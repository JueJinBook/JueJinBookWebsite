"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["63467"],{754273:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var c=r(552676),s=r(740453);let d=r.p+"static/image/d68c307b34e5ec91b5cf88ed97143de2.1f51d5eb.webp",o=r.p+"static/image/dcd18cfe46dfb0eb6350721adcbda328.c794d5f2.webp",l=r.p+"static/image/7a32af59ba2b3cf6fc04d72936d18810.7d89858e.webp";function i(e){let n=Object.assign({h2:"h2",a:"a",p:"p",code:"code",img:"img",pre:"pre",strong:"strong",h3:"h3",ol:"ol",li:"li",blockquote:"blockquote",br:"br"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h2,{id:"前言",children:["前言",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["相对于传统的 ",(0,c.jsx)(n.code,{children:"jQuery"})," 一把梭子撸到底的开发模式，组件化可以帮助我们实现 ",(0,c.jsx)(n.code,{children:"视图"})," 和 ",(0,c.jsx)(n.code,{children:"逻辑"})," 的复用，并且可以对每个部分进行单独的思考。对于一个大型的 ",(0,c.jsx)(n.code,{children:"Vue.js"})," 应用，通常是由一个个组件组合而成："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["但是我们实际访问的页面，是由 ",(0,c.jsx)(n.code,{children:"DOM"})," 元素构成的，而组件的 ",(0,c.jsx)(n.code,{children:"<template>"})," 中的内容只是一个模板字符串而已。那模板字符串是如何被渲染成 ",(0,c.jsx)(n.code,{children:"DOM"})," 的呢？接下来我们将从组件入手，揭秘 ",(0,c.jsx)(n.code,{children:"Vue"})," 的组件是如何被渲染成真实的 ",(0,c.jsx)(n.code,{children:"DOM"})," 的。"]}),"\n",(0,c.jsxs)(n.h2,{id:"初始化一个-vue-3-应用",children:["初始化一个 Vue 3 应用",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化一个-vue-3-应用",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在开始本章节之前，我们先来简单初始化一个 ",(0,c.jsx)(n.code,{children:"Vue 3"})," 的应用："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-shell",children:"# 2.渲染器：组件是如何被渲染成 DOM 的？\n$ yarn global add @vue/cli\n\n# 创建 vue3 的基础脚手架 一路回车\n$ vue create vue3-demo\n"})}),"\n",(0,c.jsxs)(n.p,{children:["接下来，打开项目，可以看到",(0,c.jsx)(n.code,{children:"Vue.js"})," 的入口文件 ",(0,c.jsx)(n.code,{children:"main.js"})," 的内容如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n"})}),"\n",(0,c.jsxs)(n.p,{children:["这里就有一个根组件 ",(0,c.jsx)(n.code,{children:"App.vue"}),"。为了更加简单地介绍 ",(0,c.jsx)(n.code,{children:"Vue"})," 根组件的渲染过程，我把 ",(0,c.jsx)(n.code,{children:"App.vue"})," 根组件进行了一个简单的修改："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<template>\n  <div class="helloWorld">\n    hello world\n  </div>\n</template>\n<script>\nexport default {\n  setup() {\n    // ...\n  }\n}\n<\/script>\n'})}),"\n",(0,c.jsxs)(n.h2,{id:"根组件模板编译",children:["根组件模板编译",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#根组件模板编译",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["我们知道 ",(0,c.jsx)(n.code,{children:".vue"})," 类型的文件无法在 ",(0,c.jsx)(n.code,{children:"Web"})," 端直接加载，我们通常会在 ",(0,c.jsx)(n.code,{children:"webpack"})," 的编译阶段，通过 ",(0,c.jsx)(n.code,{children:"vue-loader"})," 编译生成组件相关的 ",(0,c.jsx)(n.code,{children:"JavaScript"})," 和 ",(0,c.jsx)(n.code,{children:"CSS"}),"，并把 ",(0,c.jsx)(n.code,{children:"template"})," 部分编译转换成 ",(0,c.jsx)(n.code,{children:"render"})," 函数添加到组件对象的属性中。"]}),"\n",(0,c.jsxs)(n.p,{children:["上述的 ",(0,c.jsx)(n.code,{children:"App.vue"})," 文件内的模板其实是会被编译工具在编译时转成一个渲染函数，大致如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'import { openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue"\n\nconst _hoisted_1 = { class: "helloWorld" }\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createElementBlock("div", _hoisted_1, " hello world "))\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["关于 ",(0,c.jsx)(n.code,{children:"<template>"})," 中的模板字符串是如何被编译成 ",(0,c.jsx)(n.code,{children:"render"})," 函数的，以及 ",(0,c.jsx)(n.code,{children:"_hoisted_1"})," 是个什么玩意，我们将在后续章节中详细介绍。"]}),"\n",(0,c.jsxs)(n.p,{children:["现在我们只需要知道 ",(0,c.jsx)(n.code,{children:"<script>"})," 中的对象内容最终会和编译后的模板内容一起，生成一个 ",(0,c.jsx)(n.code,{children:"App"})," 对象传入 ",(0,c.jsx)(n.code,{children:"createApp"})," 函数中："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"{\n\n  render(_ctx, _cache, $props, $setup, $data, $options) { \n    // ... \n  },\n  setup() {\n    // ...\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"对象组件渲染成真实的-dom",children:["对象组件渲染成真实的 DOM",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#对象组件渲染成真实的-dom",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["接着回到 ",(0,c.jsx)(n.code,{children:"main.js"})," 的入口文件，整个初始化的过程只剩下如下部分了："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"createApp(App).mount('#app')\n"})}),"\n",(0,c.jsxs)(n.p,{children:["打开源码，可以看一下 ",(0,c.jsx)(n.code,{children:"createApp"})," 的过程："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-dom/src/index.ts\nexport const createApp = (...args) => {\n  const app = ensureRenderer().createApp(...args);\n  // ...\n  return app;\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["猜测一下，",(0,c.jsx)(n.code,{children:"ensureRenderer().createApp(...args)"})," 这个链式函数执行完成后肯定返回了 ",(0,c.jsx)(n.code,{children:"mount"})," 函数，",(0,c.jsx)(n.code,{children:"ensureRenderer"})," 就是构造了一个带有 ",(0,c.jsx)(n.code,{children:"createApp"})," 函数的",(0,c.jsx)(n.strong,{children:"渲染器 renderer 对象"})," ："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-dom/src/index.ts\nfunction ensureRenderer() {\n  // 如果 renderer 有值的话，那么以后都不会初始化了\n  return (\n    renderer ||\n    (renderer = createRenderer(rendererOptions)\n  )\n}\n\n// renderOptions 包含以下函数：\n\nconst renderOptions = {\n  createElement,\n  createText,\n  setText,\n  setElementText,\n  patchProp,\n  insert,\n  remove,\n}\n\n"})}),"\n",(0,c.jsxs)(n.p,{children:["这里返回的 ",(0,c.jsx)(n.code,{children:"renderer"})," 对象，可以认为是一个跨平台的渲染器对象，针对不同的平台，会创建出不同的 ",(0,c.jsx)(n.code,{children:"renderer"})," 对象，上述是创建浏览器环境的 ",(0,c.jsx)(n.code,{children:"renderer"})," 对象，对于服务端渲染的场景，则会创建 ",(0,c.jsx)(n.code,{children:"server render"})," 的 ",(0,c.jsx)(n.code,{children:"renderer"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-dom/src/index.ts\nlet enabledHydration = false\nfunction ensureHydrationRenderer() {\n  renderer = enabledHydration\n    ? renderer\n    : createHydrationRenderer(rendererOptions)\n  enabledHydration = true\n  return renderer\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["再来看一下 ",(0,c.jsx)(n.code,{children:"createRenderer"})," 返回的对象："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/renderer.ts\nexport function createRenderer(options) {\n  // ...\n  // 这里不介绍 hydrate 模式\n  return {\n    render,\n    hydrate,\n    createApp: createAppAPI(render, hydrate),\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["可以看到，",(0,c.jsx)(n.code,{children:"renderer"})," 对象上包含了 ",(0,c.jsx)(n.code,{children:"createApp"})," 和 ",(0,c.jsx)(n.code,{children:"render"})," 方法。再来看一下 ",(0,c.jsx)(n.code,{children:"createApp"})," 方法："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/apiCreateApp.ts\nfunction createAppAPI(render, hydrate) {\n  // createApp createApp 方法接收的两个参数：根组件的对象和 prop\n  return function createApp(rootComponent, rootProps = null) {\n    const app = {\n      // ... 省略很多不需要在这里介绍的属性\n      _component: rootComponent,\n      _props: rootProps,\n      mount(rootContainer, isHydrate, isSVG) {\n        // ...\n      }\n    }\n    return app\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["直到这里，我们才真正拨开了 ",(0,c.jsx)(n.code,{children:"Vue 3"})," 初始化根组件的核心方法，也就是入口文件 ",(0,c.jsx)(n.code,{children:"createApp"})," 真正执行的内容就是这里的 ",(0,c.jsx)(n.code,{children:"createAppAPI"})," 函数中的 ",(0,c.jsx)(n.code,{children:"createApp"})," 函数，该函数接收了 ",(0,c.jsx)(n.code,{children:"<App />"})," 组件作为根组件 ",(0,c.jsx)(n.code,{children:"rootComponent"}),"，返回了一个包含 ",(0,c.jsx)(n.code,{children:"mount"})," 方法的 ",(0,c.jsx)(n.code,{children:"app"})," 对象。"]}),"\n",(0,c.jsxs)(n.p,{children:["接下来再深入地看一下 ",(0,c.jsx)(n.code,{children:"mount"})," 的内部实现："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/apiCreateApp.ts\nmount(rootContainer, isHydrate, isSVG) {\n  if (!isMounted) {\n    // ... 省略部分不重要的代码\n    // 1. 创建根组件的 vnode\n    const vnode = createVNode(\n      rootComponent,\n      rootProps\n    )\n    \n    // 2. 渲染根组件\n    render(vnode, rootContainer, isSVG)\n    isMounted = true\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"1-创建根组件的-vnode",children:["1. 创建根组件的 vnode",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-创建根组件的-vnode",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["什么是 ",(0,c.jsx)(n.code,{children:"vnode"})," 节点呢？其实它和 ",(0,c.jsx)(n.code,{children:"Virtual DOM"})," 是一个意思，就是将真实的 ",(0,c.jsx)(n.code,{children:"DOM"})," 以普通对象形式的数据结构来表达，简化了很多 ",(0,c.jsx)(n.code,{children:"DOM"})," 中内容。"]}),"\n",(0,c.jsxs)(n.p,{children:["熟悉 ",(0,c.jsx)(n.code,{children:"JS DOM"})," 编程的小伙伴都知道 ",(0,c.jsx)(n.code,{children:"JS"})," 直接操作 ",(0,c.jsx)(n.code,{children:"DOM"})," 往往会带来许多性能负担，所以 ",(0,c.jsx)(n.code,{children:"vnode"})," 提供了对真实 ",(0,c.jsx)(n.code,{children:"DOM"})," 上的一层虚拟映射，我们只需要操作这个虚拟的数据结构，那些真正费性能的活交给这些框架来操作就好了，框架会帮我们做很多性能优化的事情。这也是 ",(0,c.jsx)(n.code,{children:"vnode"})," 带来的最大的优势之一。"]}),"\n",(0,c.jsxs)(n.p,{children:["其次，因为 ",(0,c.jsx)(n.code,{children:"vnode"})," 只是一种与平台无关的数据结构而已，所以理论上我们也可以将它渲染到不同平台上从而达到跨平台渲染的目的。这个也是 ",(0,c.jsx)(n.code,{children:"weex"}),"、",(0,c.jsx)(n.code,{children:"mpvue"})," 等跨端渲染框架的核心基础。"]}),"\n",(0,c.jsxs)(n.p,{children:["上述例子中的 ",(0,c.jsx)(n.code,{children:"template"})," 中的内容用 ",(0,c.jsx)(n.code,{children:"vnode"})," 可以表示为："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const vnode = {\n  type: 'div',\n  props: { \n    'class': 'helloWorld'\n  },\n  children: 'helloWorld'\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["说了这么多，那么根节点是如何被创建成一个 ",(0,c.jsx)(n.code,{children:"vnode"})," 的呢？核心也就在 ",(0,c.jsx)(n.code,{children:"createVNode"})," 函数中："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"// packages/runtime-core/src/vnode.ts\nfunction createBaseVNode(...) {\n  const vnode = {\n    type,\n    props,\n    key: props && normalizeKey(props),\n    children,\n    component: null,\n    shapeFlag,\n    patchFlag,\n    dynamicProps,\n    dynamicChildren: null,\n    // ... 一些其他属性\n  }\n  // ...\n  return vnode\n}\nfunction createVNode(type, props = null, children = null) {\n  if (props) {\n    // 如果存在 props 则需要对 props 进行一些处理，这里先省略\n  }\n  // ...\n  // 处理 shapeFlag 类型\n  const shapeFlag = isString(type)\n    ? ShapeFlags.ELEMENT\n    : __FEATURE_SUSPENSE__ && isSuspense(type)\n    ? ShapeFlags.SUSPENSE\n    : isTeleport(type)\n    ? ShapeFlags.TELEPORT\n    : isObject(type)\n    ? ShapeFlags.STATEFUL_COMPONENT\n    : isFunction(type)\n    ? ShapeFlags.FUNCTIONAL_COMPONENT\n    : 0\n  \n  // ...\n  return createBaseVNode(\n    type,\n    props,\n    children,\n    patchFlag,\n    dynamicProps,\n    shapeFlag,\n    isBlockNode,\n    true\n  )\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["当进行根组件渲染的时候，",(0,c.jsx)(n.code,{children:"createVNode"})," 的第一个入参 ",(0,c.jsx)(n.code,{children:"type"})," 是我们的 ",(0,c.jsx)(n.code,{children:"App"})," 对象，也就是一个 ",(0,c.jsx)(n.code,{children:"Object"}),"，所以得到的 ",(0,c.jsx)(n.code,{children:"shapeFlag"})," 的值是 ",(0,c.jsx)(n.code,{children:"STATEFUL_COMPONENT"}),"，代表的是一个有状态组件对象。（这里顺便提一下，如果传入的是个函数，那么就是一个函数式组件 ",(0,c.jsx)(n.code,{children:"FUNCTIONAL_COMPONENT"}),"，函数式组件和有状态的对象组件都是 ",(0,c.jsx)(n.code,{children:"Vue"})," 可处理的组件类型，这个会在下面渲染阶段提及。）"]}),"\n",(0,c.jsxs)(n.p,{children:["到这里，",(0,c.jsx)(n.code,{children:"Vue"})," 完成了对根组件的 ",(0,c.jsx)(n.code,{children:"Vnode"})," 对象的创建，接下来要做的就是将该组件渲染到页面中。"]}),"\n",(0,c.jsxs)(n.h3,{id:"2-vnode-渲染成真实的组件",children:["2. VNode 渲染成真实的组件",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-vnode-渲染成真实的组件",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["回到 ",(0,c.jsx)(n.code,{children:"mount"})," 函数中，接下来一步就是对 ",(0,c.jsx)(n.code,{children:"vnode"})," 的渲染工作，核心代码："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"render(vnode, rootContainer);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["那么这里的 ",(0,c.jsx)(n.code,{children:"render"})," 函数是什么呢？通过上面的代码我们发现，其实它是在调用 ",(0,c.jsx)(n.code,{children:"createAppAPI"})," 时传入进来的，而 ",(0,c.jsx)(n.code,{children:"createAppAPI"})," 则是在创建 ",(0,c.jsx)(n.code,{children:"renderer"})," 渲染器的时候调用的。那么，接下来看看 ",(0,c.jsx)(n.code,{children:"render"})," 函数的实现："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/renderer.ts\nconst render = (vnode, container) => {\n  if (vnode == null) {\n    // 如果 vnode 不存在，表示需要卸载组件\n    if (container._vnode) {\n      unmount(container._vnode, null, null, true)\n    }\n  } else {\n    // 否则进入更新流程（初始化创建也是特殊的一种更新）\n    patch(container._vnode || null, vnode, container)\n  }\n  // 缓存 vnode\n  container._vnode = vnode\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["很明显，对于初始化根组件的过程中，传入了一个根组件的 ",(0,c.jsx)(n.code,{children:"vnode"})," 对象，所以这里会执行 ",(0,c.jsx)(n.code,{children:"patch"})," 相关的动作。",(0,c.jsx)(n.code,{children:"patch"})," 本意是补丁的意思，可以理解成为更新做一些补丁的活儿，其实初始的过程也可以看作是一个全量补丁，一种特殊的更新操作。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/renderer.ts\nfunction patch(n1,n2,container = null,anchor = null,parentComponent = null) {\n  // 对于类型不同的新老节点，直接进行卸载\n  if (n1 && !isSameVNodeType(n1, n2)) {\n    anchor = getNextHostNode(n1)\n    unmount(n1, parentComponent, parentSuspense, true)\n    n1 = null\n  }\n  // 基于 n2 的类型来判断\n  // 因为 n2 是新的 vnode\n  const { type, shapeFlag } = n2;\n  switch (type) {\n    case Text:\n       // 处理文本节点\n      break;\n    // 其中还有几个类型比如： static fragment comment\n    default:\n      // 这里就基于 shapeFlag 来处理\n      if (shapeFlag & ShapeFlags.ELEMENT) {\n        // 处理普通 DOM 元素\n        processElement(n1, n2, container, anchor, parentComponent);\n      } else if (shapeFlag & ShapeFlags.COMPONENT) {\n        // 处理 component\n        processComponent(n1, n2, container, parentComponent);\n      } else if {\n        // ... 处理其他元素\n      }\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"patch"})," 函数主要接收的参数说明如下："]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"n1"})," 表示老的 ",(0,c.jsx)(n.code,{children:"vnode"})," 节点；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"n2"})," 表示新的 ",(0,c.jsx)(n.code,{children:"vnode"})," 节点；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"container"})," 表示需要挂载的 ",(0,c.jsx)(n.code,{children:"dom"})," 容器；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"anchor"})," 挂载的参考元素；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"parentComponent"})," 父组件。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这里我们主要关注前 3 个参数，因为是初始化的过程，所以 ",(0,c.jsx)(n.code,{children:"n1"})," 本次值为空，核心看 ",(0,c.jsx)(n.code,{children:"n2"})," 的值，",(0,c.jsx)(n.code,{children:"n2"})," 有一个 ",(0,c.jsx)(n.code,{children:"type"})," 和 ",(0,c.jsx)(n.code,{children:"shapeFlag"}),"。当前 ",(0,c.jsx)(n.code,{children:"n2"})," 的 ",(0,c.jsx)(n.code,{children:"type"})," 是 ",(0,c.jsx)(n.code,{children:"App"})," 组件对象，所以逻辑会进入 ",(0,c.jsx)(n.code,{children:"Switch"})," 的 ",(0,c.jsx)(n.code,{children:"default"})," 中。再比较 ",(0,c.jsx)(n.code,{children:"shapeFlag"})," 属性，前面提到 ",(0,c.jsx)(n.code,{children:"shapeFlag"})," 的值是 ",(0,c.jsx)(n.code,{children:"STATEFUL_COMPONENT"}),"。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["这里需要注意的是 ",(0,c.jsx)(n.code,{children:"ShapeFlags"})," 是一个二进制左移操作符生成的对象，其中",(0,c.jsx)(n.br,{}),"\n",(0,c.jsx)(n.code,{children:"ShapeFlags.COMPONENT = ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT"}),"，\n所以 ",(0,c.jsx)(n.code,{children:"shapeFlag & ShapeFlags.COMPONENT"})," 这里的值是 ",(0,c.jsx)(n.code,{children:"true"}),"，关于二进制左移操作符对象在 ",(0,c.jsx)(n.code,{children:"Vue 3"})," 中会大量使用，后面也会详细介绍。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["接着也就进入了 ",(0,c.jsx)(n.code,{children:"processComponent"})," 的逻辑了："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/renderer.ts\nfunction processComponent(n1, n2, container, parentComponent) {\n  // 如果 n1 没有值的话，那么就是 mount\n  if (!n1) {\n    // 初始化 component\n    mountComponent(n2, container, parentComponent);\n  } else {\n    updateComponent(n1, n2, container);\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["同理，这里我们只看初始化的逻辑，所以 ",(0,c.jsx)(n.code,{children:"n1"})," 此时还是个空值，那么就会进入 ",(0,c.jsx)(n.code,{children:"mountComponent"})," 函数对组件进行初始挂载过程。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/renderer.ts\nfunction mountComponent(initialVNode, container, parentComponent) {\n  // 1. 先创建一个 component instance\n  const instance = (initialVNode.component = createComponentInstance(\n    initialVNode,\n    parentComponent\n  ));\n  \n  // 2. 初始化 instance 上的 props, slots, 执行组件的 setup 函数...\n  setupComponent(instance);\n\n  // 3. 设置并运行带副作用的渲染函数\n  setupRenderEffect(instance, initialVNode, container);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"该函数实现过程还是非常清晰的，思考一下，一个组件的初始化要做哪些内容呢？"}),"\n",(0,c.jsxs)(n.p,{children:["其实很容易想到，我们需要一个实例化的组件对象，该对象可以在 ",(0,c.jsx)(n.code,{children:"Vue"})," 执行的运行时上下文中随时获取到，另外还需要对实例化后的组件中的属性做一些优化、处理、赋值等操作，最后，就是把组件实例的 ",(0,c.jsx)(n.code,{children:"render"})," 函数执行一遍。"]}),"\n",(0,c.jsxs)(n.p,{children:["上面也是 ",(0,c.jsx)(n.code,{children:"mountComponent"})," 核心做的事情，我们一个个来看。"]}),"\n",(0,c.jsxs)(n.p,{children:["第一步是组件实例化，在 ",(0,c.jsx)(n.code,{children:"Vue 3"})," 中通过 ",(0,c.jsx)(n.code,{children:"createComponentInstance"})," 的方法创建组件实例，返回的是一个组件实例的对象，大致包含以下属性："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/component.ts\nconst instance = {\n  // 这里是组件对象\n  type: vnode.type, \n  // 组件 vnode\n  vnode,\n  // 新的组件 vnode\n  next: null, \n  // props 相关\n  props: {}, \n  // 指向父组件\n  parent,\n  // 依赖注入相关\n  provides: parent ? parent.provides : {},\n  // 渲染上下文代理\n  proxy: null,\n  // 标记是否被挂载\n  isMounted: false,\n  // attrs 相关\n  attrs: {}, \n  // slots 相关\n  slots: {}, \n  // context 相关\n  ctx: {},\n  // setup return 的状态数据\n  setupState: {}, \n  // ...\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上述实例属性，相对源码而言，已经省略了很多内容了，这些属性现在看着肯定不知所云，头皮发麻。但相应的属性是 ",(0,c.jsx)(n.code,{children:"vue"})," 在特定的场景和功能下才会用到的，相信你跟着本小册一起阅读后，回过头来再去看一遍这些属性，就会“顿悟”。"]}),"\n",(0,c.jsxs)(n.p,{children:["然后是对实例化后的组件中的属性做一些优化、处理、赋值等操作，这里主要是初始化了 ",(0,c.jsx)(n.code,{children:"props"}),"、",(0,c.jsx)(n.code,{children:"slots"}),"，并执行组件的 ",(0,c.jsx)(n.code,{children:"setup"})," 函数，核心的实现和功能我们将在下一节介绍。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/component.ts\nexport function setupComponent(instance) {\n  // 1. 处理 props\n  // 取出存在 vnode 里面的 props\n  const { props, children } = instance.vnode;\n  initProps(instance, props);\n  // 2. 处理 slots\n  initSlots(instance, children);\n\n  // 3. 调用 setup 并处理 setupResult\n  setupStatefulComponent(instance);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["最后是把组件实例的 ",(0,c.jsx)(n.code,{children:"render"})," 函数执行一遍，这里是通过 ",(0,c.jsx)(n.code,{children:"setupRenderEffect"})," 来执行的。我们再看一下这个函数的实现："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/renderer.ts\nconst setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {\n  function componentUpdateFn() {\n    if (!instance.isMounted) {\n      // 渲染子树的 vnode\n      const subTree = (instance.subTree = renderComponentRoot(instance))\n      // 挂载子树 vnode 到 container 中\n      patch(null, subTree, container, anchor, instance, parentSuspense, isSVG)\n      // 把渲染生成的子树根 DOM 节点存储到 el 属性上\n      initialVNode.el = subTree.el\n      instance.isMounted = true\n    }\n    else {\n      // 更新相关，后面介绍\n    }\n  }\n  // 创建副作用渲染函数\n  instance.update = effect(componentUpdateFn, prodEffectOptions)\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["这里我们再看一下 ",(0,c.jsx)(n.code,{children:"componentUpdateFn"})," 这个函数，核心是调用了 ",(0,c.jsx)(n.code,{children:"renderComponentRoot"})," 来生成 ",(0,c.jsx)(n.code,{children:"subTree"}),"，然后再把 ",(0,c.jsx)(n.code,{children:"subTree"})," 挂载到 ",(0,c.jsx)(n.code,{children:"container"})," 中。其实 ",(0,c.jsx)(n.code,{children:"renderComponentRoot"})," 的核心工作就是执行 ",(0,c.jsx)(n.code,{children:"instance.render"})," 方法，该方法前面我们已经说了，组件在编译时会生成组件对象，包含了 ",(0,c.jsx)(n.code,{children:"render"})," 函数，该函数内部是一系列的渲染函数的执行："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'import { openBlock, createElementBlock } from "vue"\n\nconst _hoisted_1 = { class: "helloWorld" }\n\nexport function render(...) {\n  return (openBlock(), createElementBlock("div", _hoisted_1, " hello world "))\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["那么只需要看一下 ",(0,c.jsx)(n.code,{children:"createElementBlock"})," 函数的实现："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/vnode.ts\nexport const createElementBlock = (...) => {\n  return setupBlock(\n    createBaseVNode(\n      type,\n      props,\n      children,\n      patchFlag,\n      dynamicProps,\n      shapeFlag,\n      true /* isBlock */\n    )\n  )\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["可以看到本质还是调用了 ",(0,c.jsx)(n.code,{children:"createBaseVNode"})," 创新 ",(0,c.jsx)(n.code,{children:"vnode"}),"。所以，我们可以推导出 ",(0,c.jsx)(n.code,{children:"subtree"})," 就是调用 ",(0,c.jsx)(n.code,{children:"render"})," 函数而生产的 ",(0,c.jsx)(n.code,{children:"vnode"})," 节点。这里需要注意的一点是，因为 ",(0,c.jsx)(n.code,{children:"subtree"})," 调用的 ",(0,c.jsx)(n.code,{children:"createBaseVNode"})," 创建时，传入的 ",(0,c.jsx)(n.code,{children:"type = div"})," 在这里是个 ",(0,c.jsx)(n.code,{children:"string"}),"，所以返回的 ",(0,c.jsx)(n.code,{children:"shapeFlags"})," 的值是 ",(0,c.jsx)(n.code,{children:"ELEMENT"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["渲染生成子树 ",(0,c.jsx)(n.code,{children:"vnode"})," 后，接下来就是继续调用 ",(0,c.jsx)(n.code,{children:"patch"})," 函数把子树 ",(0,c.jsx)(n.code,{children:"vnode"})," 挂载到 ",(0,c.jsx)(n.code,{children:"container"})," 中了，前面说过了 ",(0,c.jsx)(n.code,{children:"patch"})," 的实现，再来简单看一下当传入的 ",(0,c.jsx)(n.code,{children:"vnode"})," 的 ",(0,c.jsx)(n.code,{children:"shapeFlags"})," 是个 ",(0,c.jsx)(n.code,{children:"ELEMENT"})," 时，会调用 ",(0,c.jsx)(n.code,{children:"processElement"})," 这个函数："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"if (shapeFlag & ShapeFlags.ELEMENT) {\n  processElement(n1, n2, container, anchor, parentComponent);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["我们来看一下 ",(0,c.jsx)(n.code,{children:"processElement"})," 的实现："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/renderer.ts\nfunction processElement(n1, n2, container, anchor, parentComponent) {\n  if (!n1) {\n    // 挂载元素节点\n    mountElement(n2, container, anchor);\n  } else {\n    // 更新元素节点\n    updateElement(n1, n2, container, anchor, parentComponent);\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["因为在初始化的过程中，",(0,c.jsx)(n.code,{children:"n1"})," 是 ",(0,c.jsx)(n.code,{children:"null"}),"，所以这里执行的是 ",(0,c.jsx)(n.code,{children:"mountElement"})," 进行元素的初始化挂载。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-core/src/renderer.ts\nconst mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\n  let el\n  const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode\n  // ...\n  // 根据 vnode 创建 DOM 节点\n  el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is)\n  if (props) {\n    // 处理 props 属性\n    for (const key in props) {\n      if (!isReservedProp(key)) {\n        hostPatchProp(el, key, null, props[key], isSVG)\n      }\n    }\n  }\n  // 文本节点处理\n  if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {\n    hostSetElementText(el, vnode.children)\n  } else if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {\n    // 如果节点是个数据类型，则递归子节点\n    mountChildren(vnode.children, el)\n  }\n  // 把创建好的 el 元素挂载到容器中\n  hostInsert(el, container, anchor)\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"mountElemet"})," 首先是通过 ",(0,c.jsx)(n.code,{children:"hostCreateElement"})," 创建了一个 ",(0,c.jsx)(n.code,{children:"DOM"})," 节点，然后处理一下 ",(0,c.jsx)(n.code,{children:"props"})," 属性，接着根据 ",(0,c.jsx)(n.code,{children:"shapeFlag"})," 判断子节点的类型，如果节点是个文本节点，则直接创建文本节点，如果子节点是个数组，比如这种情况："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'return (openBlock(), createElementBlock("div", _hoisted_1, [\n  hoisted_2,\n  createVNode(_component_Hello)\n]))\n'})}),"\n",(0,c.jsxs)(n.p,{children:["对于这种子节点是数组的情况时，它的 ",(0,c.jsx)(n.code,{children:"shapeFlag"})," 将是一个数组类型 ",(0,c.jsx)(n.code,{children:"ARRAY_CHILDREN"}),"。此时会对该 ",(0,c.jsx)(n.code,{children:"vnode"})," 节点的子节点调用 ",(0,c.jsx)(n.code,{children:"mountChildren"})," 进行递归的 ",(0,c.jsx)(n.code,{children:"patch"})," 渲染。"]}),"\n",(0,c.jsxs)(n.p,{children:["最后，处理完所有子节点后，通过 ",(0,c.jsx)(n.code,{children:"hostInsert"})," 方法把缓存在内存中的 ",(0,c.jsx)(n.code,{children:"DOM el"})," 映射渲染到真实的 ",(0,c.jsx)(n.code,{children:"DOM Container"})," 当中。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// packages/runtime-dom/src/nodeOps.ts\ninsert: (child, parent, anchor) {\n  parent.insertBefore(child, anchor || null)\n}\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["到这里，我们已经完成了从入口文件开始，分析根组件如何挂载渲染到真实 ",(0,c.jsx)(n.code,{children:"DOM"})," 的流程，再简单通过一张流程图回顾一下上述内容，绿色部分是初始化的过程，也是本小节的内容，灰色部分我们后面章节再做介绍。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["然后我们再引用一下 ",(0,c.jsx)(n.code,{children:"Vue"})," 官网上的一张渲染流程图："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["现在再来看这一张图，整体流程就会清晰了很多：在组件初始化挂载阶段，模板被编译成渲染函数的形式，交由渲染器执行，渲染器执行渲染函数得到 ",(0,c.jsx)(n.code,{children:"APP"})," 组件对象的子树 ",(0,c.jsx)(n.code,{children:"vnode"}),"，子树 ",(0,c.jsx)(n.code,{children:"vnode"})," 进行递归 ",(0,c.jsx)(n.code,{children:"patch"})," 后生成不同类型的 ",(0,c.jsx)(n.code,{children:"DOM"})," 节点，最后把这些 ",(0,c.jsx)(n.code,{children:"DOM"})," 节点挂载到页面的 ",(0,c.jsx)(n.code,{children:"container"})," 当中。"]}),"\n",(0,c.jsx)(n.p,{children:"关于具体的编译器和更新以及响应式的部分我们会在后续章节继续介绍。本节主要介绍了挂载过程，后面的小节我们接着介绍一下更新策略。"})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(i,{...e})}):i(e)}let a=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["Vue%203%20%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%2F2.%E6%B8%B2%E6%9F%93%E5%99%A8%EF%BC%9A%E7%BB%84%E4%BB%B6%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%AB%E6%B8%B2%E6%9F%93%E6%88%90%20DOM%20%E7%9A%84%EF%BC%9F.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"初始化一个 Vue 3 应用",id:"初始化一个-vue-3-应用",depth:2},{text:"根组件模板编译",id:"根组件模板编译",depth:2},{text:"对象组件渲染成真实的 DOM",id:"对象组件渲染成真实的-dom",depth:2},{text:"1. 创建根组件的 vnode",id:"1-创建根组件的-vnode",depth:3},{text:"2. VNode 渲染成真实的组件",id:"2-vnode-渲染成真实的组件",depth:3},{text:"总结",id:"总结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);