"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["87866"],{90667:function(n,e,r){r.r(e),r.d(e,{default:()=>u});var s=r(552676),o=r(740453);let t=r.p+"static/image/efbdab669dc891442720a58d92e96c5a.6fbf27bc.webp",c=r.p+"static/image/f70166a35ac5e9283630796adcdd87b3.bd011a3b.webp",d=r.p+"static/image/58495aa06fe1996863fc659d8b2f0f3a.a0ee50a2.webp",a=r.p+"static/image/192f0c1d8209ec910d7d944992fcbb54.26752c20.webp",i=r.p+"static/image/6a7608b5184e5a9fe0d1474b98c59d15.65139cab.webp",l=r.p+"static/image/6ab3f6b1501bbf2878913bba4f92ce1b.8eed8f23.webp",h=r.p+"static/image/df17f4aaf1acea3628892ad10ba0a4ca.e67ceb21.webp",p=r.p+"static/image/5f6cb18415ababef56ec91b153168d86.a33ef176.webp";function j(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",img:"img",ul:"ul",li:"li",h2:"h2",blockquote:"blockquote",pre:"pre",code:"code",h3:"h3",h4:"h4"},(0,o.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"45项目进阶消息通信",children:["45.项目进阶：消息通信",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#45项目进阶消息通信",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["消息通信在前面章节的状态设计当中有着重提到过，首先是使用",(0,s.jsx)(e.strong,{children:"js的语法糖封装"}),"了基本的j",(0,s.jsx)(e.strong,{children:"s代码运行时"}),"来完成",(0,s.jsx)(e.strong,{children:"属性表达式的需求支持"}),"，这一类是比较基础的功能实现。"]}),"\n",(0,s.jsxs)(e.p,{children:["我们都知道，在",(0,s.jsx)(e.strong,{children:"React"}),"当中，页面是由数据状态来驱动的，阐述就是当状态发生变化时，视图随之而然发生改变。因此，在前期设计状态管理的时候才用中心化的状态进行设计，这样后续在做分发的时候有会自己独特的优势。"]}),"\n",(0,s.jsx)(e.p,{children:"如下图所示："}),"\n",(0,s.jsxs)(e.p,{children:["在低代码平台当中可以添加JS模块，在内部可以自由的编写自己的逻辑。通过",(0,s.jsx)(e.strong,{children:"ES6的export"}),"语法进行模块方法和变量的导出。此时，就声明好了一个",(0,s.jsx)(e.strong,{children:"fetchData"}),"函数的示例。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["声明完成函数后，在事件管理器中可以为组件的某个事件绑定声明好的函数，在后续的计划中甚至可以绑定多个函数，并且通过",(0,s.jsx)(e.strong,{children:"pipeline"}),"进行串联，其目的就是将一个逻辑进行",(0,s.jsx)(e.strong,{children:"funtor化"}),"，易于使用和组装。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"在事件中，可以通过相应的语法糖来设置全局的中心状态，从而完成操作到视图的状态更新改变。"}),"\n",(0,s.jsx)(e.p,{children:"在这个过程当中，需要明确几个技术点："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"ES6模块的在线构建和运行"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"模块与组件事件Props的参数绑定"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"如何将API模块化的提供在代码编辑器当中进行使用。"})}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"解决以上几个问题的话，那么大体上的技术难点就没什么大问题了。"}),"\n",(0,s.jsxs)(e.h2,{id:"实现流程",children:["实现流程",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现流程",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"整体的实现流程如下图："}),"\n",(0,s.jsx)(e.p,{children:"我们将整个消息通信拆分成为两个不同的流程去观看。"}),"\n",(0,s.jsxs)(e.p,{children:["首先是模块的流程，其中比较重要的就是模块的构建编译和挂载，在这一个阶段下我们在",(0,s.jsx)(e.strong,{children:"Monaco编辑器"}),"下写的JS模块代码都会进行运行时编译，和我们本地构建是一样的原理。"]}),"\n",(0,s.jsx)(e.p,{children:"其次就是事件的流程，物料组件组件可以提前声明将自身拥有的事件属性暴露出去，在事件设置器中就可以拿到对应的事件列表从而绑定对应模块中声明好的函数。"}),"\n",(0,s.jsx)(e.p,{children:"两个流程完成之后，就能够完成整个低代码的通信系统，在事件绑定的函数中通过改变状态来影响页面的变化，完成通信间的闭环和应用系统的逻辑操作。"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"如果要完全做ProCode系的产品，可以将这一类事件执行封装成为一个流程事件系统，通过可视化的节点也可以模拟绝大部分的一些事件场景，这个在后面会提到。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsx)(e.p,{children:"举个例子，我有一个简单的函数。在JS模块中编写如下代码："}),"\n",(0,s.jsxs)(e.p,{children:["声明一个",(0,s.jsx)(e.strong,{children:"ES Module"}),"的导出函数，在低代码平台中我们保存的是未编译前的代码片段。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"export const fetchData = () => {\n  console.log(1)\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"当低代码平台加载时，在线运行时会将其转换为较为通用的模块来加载执行，来得到用户声明的模块方法，挂载到我们的工作专区当中提供给事件管理器使用。"}),"\n",(0,s.jsxs)(e.p,{children:["如下图所示，这个是编译后的",(0,s.jsx)(e.strong,{children:"commonjs"}),"模块代码："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.fetchData = void 0;\nconst fetchData = () => {\n  console.log(1);\n};\nexports.fetchData = fetchData;\n'})}),"\n",(0,s.jsx)(e.p,{children:"那么得到编译后的代码，执行也就相当容易了，在之前章节中提到了很多种动态执行代码的能力可以使用，选择自己比较熟悉的一个即可，在后面也会提到实现的方式，在这里先做一个了解。"}),"\n",(0,s.jsxs)(e.h2,{id:"具体实现",children:["具体实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#具体实现",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"到这一步的话就是讲具体实现的过程。"}),"\n",(0,s.jsxs)(e.h3,{id:"初始化monaco",children:["初始化Monaco",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化monaco",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在编写代码之前，肯定要找一个完善的在线编辑器组件来辅助我们进行代码的书写，目前市面上比较好的几款产品如下："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"monaco"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"Ace"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"react-codemirror"})}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["在项目中，我们主要会使用",(0,s.jsx)(e.strong,{children:"monaco"}),"作为主要的代码编译器，其原因就是它比较贴合现如今主流的代码",(0,s.jsx)(e.strong,{children:"IDE VsCode"}),"，定制起来会更加快速。"]}),"\n",(0,s.jsxs)(e.p,{children:["接下来就是一些常见的配置设置，如果有不理解的地方可以将它们复制给",(0,s.jsx)(e.strong,{children:"ChatGPT"}),"， 它会给你解释配置对应的效果和设置选项。"]}),"\n",(0,s.jsxs)(e.h2,{id:"安装",children:["安装",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["首先安装 ",(0,s.jsx)(e.strong,{children:"@monaco-editor/react"})," 编辑器，它是比较流行的",(0,s.jsx)(e.strong,{children:"monaco"}),"的",(0,s.jsx)(e.strong,{children:"React"}),"版本封装。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"pnpm add @monaco-editor/react monaco-editor -w\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"默认配置",children:["默认配置",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#默认配置",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["使用时，根据",(0,s.jsx)(e.strong,{children:"monaco的配置文档"}),"先设置部分默认的属性，关闭一些不需要的小窗口模块和调整部分属性。通过自带的属性可以将其结合自身的应用进行融合。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'// 初始化一些样式\nconst defaultOptions: EditorProps["options"] = {\n  folding: false,\n  lineNumbersMinChars: 3,\n  lineNumbers: "on",\n  automaticLayout: true,\n  acceptSuggestionOnEnter: "smart",\n  scrollbar: {\n    verticalScrollbarSize: 0,\n    verticalSliderSize: 4,\n    horizontal: "hidden",\n    useShadows: false,\n  },\n  smoothScrolling: true,\n  minimap: {\n    enabled: false,\n  },\n  autoClosingBrackets: "languageDefined",\n  autoClosingQuotes: "languageDefined",\n};\n'})}),"\n",(0,s.jsxs)(e.h4,{id:"自定义主题",children:["自定义主题",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义主题",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["默认",(0,s.jsx)(e.strong,{children:"VsCode"}),"的主题在IDE下整体感官很好，但是想要与低代码平台",(0,s.jsx)(e.strong,{children:"antd"}),"的风格结合，那么必须来做一些改造"]}),"\n",(0,s.jsx)(e.p,{children:"整体代码如下："}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"EditorThemeObject"}),"是我们配置的主题，它内部定义了一些",(0,s.jsx)(e.strong,{children:"token"}),"。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import React from "react";\nimport type { EditorProps, OnChange, OnMount } from "@monaco-editor/react";\nimport { Editor as MonacoEditor } from  "@monaco-editor/react";\nimport { useDebounceFn } from "ahooks";\nimport { Spin } from "antd";\n\nconst EditorThemeObject = {\n  base: "vs",\n  inherit: true,\n  rules: [\n    {\n      background: "FFFFFF",\n      token: "",\n    },\n    {\n      foreground: "008e00",\n      token: "comment",\n    },\n    {\n      foreground: "7d4726",\n      token: "meta.preprocessor",\n    },\n    {\n      foreground: "7d4726",\n      token: "keyword.control.import",\n    },\n    {\n      foreground: "df0002",\n      token: "string",\n    },\n    {\n      foreground: "3a00dc",\n      token: "constant.numeric",\n    },\n    {\n      foreground: "c800a4",\n      token: "constant.language",\n    },\n    {\n      foreground: "275a5e",\n      token: "constant.character",\n    },\n    {\n      foreground: "275a5e",\n      token: "constant.other",\n    },\n    {\n      foreground: "c800a4",\n      token: "variable.language",\n    },\n    {\n      foreground: "c800a4",\n      token: "variable.other",\n    },\n    {\n      foreground: "c800a4",\n      token: "keyword",\n    },\n    {\n      foreground: "c900a4",\n      token: "storage",\n    },\n    {\n      foreground: "438288",\n      token: "entity.name.class",\n    },\n    {\n      foreground: "790ead",\n      token: "entity.name.tag",\n    },\n    {\n      foreground: "450084",\n      token: "entity.other.attribute-name",\n    },\n    {\n      foreground: "450084",\n      token: "support.function",\n    },\n    {\n      foreground: "450084",\n      token: "support.constant",\n    },\n    {\n      foreground: "790ead",\n      token: "support.type",\n    },\n    {\n      foreground: "790ead",\n      token: "support.class",\n    },\n    {\n      foreground: "790ead",\n      token: "support.other.variable",\n    },\n    { token: "line-number", foreground: "000000", fontStyle: "bold" },\n  ],\n  colors: {\n    "editor.foreground": "#000000",\n    "editor.background": "#FFFFFF",\n    "editor.selectionBackground": "#f4f5f4",\n    "editor.lineHighlightBackground": "#00000012",\n    "editorCursor.foreground": "#000000",\n    "editorWhitespace.foreground": "#BFBFBF",\n  },\n};\n\n// 初始化一些样式\nconst defaultOptions: EditorProps["options"] = {\n  folding: false,\n  lineNumbersMinChars: 3,\n  lineNumbers: "on",\n  automaticLayout: true,\n  acceptSuggestionOnEnter: "smart",\n  scrollbar: {\n    verticalScrollbarSize: 0,\n    verticalSliderSize: 4,\n    horizontal: "hidden",\n    useShadows: false,\n  },\n  smoothScrolling: true,\n  minimap: {\n    enabled: false,\n  },\n  autoClosingBrackets: "languageDefined",\n  autoClosingQuotes: "languageDefined",\n};\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"设置主题",children:["设置主题",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#设置主题",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["主题配置好后，在",(0,s.jsx)(e.strong,{children:"onEditorMount"}),"当中挂载主题文件，使用",(0,s.jsx)(e.strong,{children:"defineTheme"}),"定义了一个",(0,s.jsx)(e.code,{children:"custom-ws"}),"的主题资源。"]}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'export const CodeEditor: React.FC<EditorProps> = (props) => {\n  // 主题样式\n  const [theme, setTheme] = React.useState("vs");\n\n  /**\n   * 处理代码修改， args需要做一层透传来完善防抖，避免触发重复构建\n   */\n  const { run: handleChange } = useDebounceFn<OnChange>(\n    (...args) => {\n      if (props.onChange) {\n        props.onChange(...args);\n      }\n    },\n    {\n      wait: 400,\n    }\n  );\n\n  /**\n   * 编辑器Mount的狗子，需要注册一些事例\n   * @param _ 编辑器实例\n   * @param monaco monaco实例\n   */\n  const onEditorMount: OnMount = (_, _monaco) => {\n    _monaco.editor.defineTheme("custom-ws", EditorThemeObject as any);\n\n    // 设置主题\n    setTheme("custom-ws");\n    if (props.onMount) {\n      props.onMount(_, _monaco);\n    }\n  };\n\n  return (\n    <MonacoEditor\n      loading={<Spin />}\n      {...props}\n      theme={theme}\n      onChange={handleChange}\n      onMount={onEditorMount}\n      options={{\n        ...defaultOptions,\n        ...props.options,\n      }}\n    />\n  );\n};\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"配置jseditor",children:["配置JSEditor",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置jseditor",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["创建一个React组件来管理模块弹窗，在",(0,s.jsx)(e.strong,{children:"onEditorMount"}),"中将编辑器的一些语法提示加上，使用",(0,s.jsx)(e.strong,{children:"monaco.languages"}),"的语法为",(0,s.jsx)(e.strong,{children:"javaScript"}),"和",(0,s.jsx)(e.strong,{children:"typeScript"}),"添加智能提示和react的支持。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import React from \'react\'\nimport { ModalForm, ProCard } from "@ant-design/pro-components";\nimport { CodeEditor } from "@/framework/common/code-editor";\nimport type { OnMount } from "@monaco-editor/react";\nimport { useSchema } from \'@/framework/stores/useSchema\'\nimport { message } from \'antd\';\n\nexport interface JsEditorProps {\n  trigger: React.ReactElement;\n}\n\nexport const JsEditor: React.FC<JsEditorProps> = (props) => {\n\n  const editorRef = React.useRef<Parameters<OnMount>[0]>()\n  const { jsMoudleCode, setJsModuleCode } = useSchema()\n\n  /**\n   * 编辑器Mount的狗子，需要注册一些事例\n   * @param _ 编辑器实例\n   * @param monaco monaco实例\n   */\n  const onEditorMount: OnMount = (_, monaco) => {\n\n    editorRef.current = _\n\n    // 设置语言为react tsx\n    monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n      target: monaco.languages.typescript.ScriptTarget.ES2015,\n      allowNonTsExtensions: true,\n      jsx: monaco.languages.typescript.JsxEmit.React,\n      jsxFactory: "React.createElement",\n      reactNamespace: "React",\n      allowJs: true,\n    });\n\n    // 设置当前的ts配置\n    monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n      noSemanticValidation: true,\n      noSyntaxValidation: true,\n    });\n\n    // 设置当前js配置\n    monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\n      target: monaco.languages.typescript.ScriptTarget.ES2015,\n      allowNonTsExtensions: true,\n    });\n  };\n\n  const onBuilderJsCode = async () => {\n    const curCode = editorRef.current?.getValue()\n    setJsModuleCode(curCode || \'\')\n    message.success("保存成功")\n  }\n\n  return (\n    <ModalForm title="JS模块" trigger={props.trigger} onFinish={onBuilderJsCode} >\n      <ProCard ghost>\n        <CodeEditor\n          height={500}\n          language="typescript"\n          defaultLanguage="typescript"\n          defaultValue={jsMoudleCode}\n          onMount={onEditorMount}\n        />\n      </ProCard>\n    </ModalForm>\n  );\n};\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"实现transformcode",children:["实现TransformCode",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现transformcode",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在很多时候，我们都应该去关心代码的上下兼容性，对于用户来说，存在各种不同种类的浏览器，并且它们对浏览器的规范属性支持度并不一致。因此在低代码平台当中，需要对当前编写的",(0,s.jsx)(e.strong,{children:"JS模块进行一次构建"}),"，将其转换成为兼容性和成熟度更好的资源产物。基于此，也引申出在线运行时构建的问题。"]}),"\n",(0,s.jsx)(e.p,{children:"在浏览器中想要对代码进行构建，最常用的就是babel，它是一直在活跃的前端代码构建工具，能够优秀的帮助我们将现代化JS代码进行混编，从而能够使代码的健壮性更加强大，做好向下兼容。"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"babel-standalone"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"sucrase"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"wasm"})}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"defineTheme"}),"是一个独立的",(0,s.jsx)(e.strong,{children:"Babel工具"}),"，用于在浏览器中转译",(0,s.jsx)(e.strong,{children:"JavaScript代码"}),"，以使其在不同的浏览器环境中运行。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"sucrase"}),"是另一个",(0,s.jsx)(e.strong,{children:"JavaScript代码转换工具"}),"，它专注于快速转译代码，特别是针对",(0,s.jsx)(e.strong,{children:"ES6模块"}),"和",(0,s.jsx)(e.strong,{children:"JSX语法"}),"。它可以作为构建过程的一部分使用，将",(0,s.jsx)(e.strong,{children:"现代JavaScript代码"}),"转换为向后兼容的版本，以便在不同的环境中执行。"]}),"\n",(0,s.jsxs)(e.p,{children:["在此前，我一直采用 ",(0,s.jsx)(e.strong,{children:"babel-standalone"})," 的方式来做运行时的构建，但是随着JS模块的复杂性增强，整体的性能也迎来了挑战，我开始尝试需要不同的方案希望能够得到更好的体验，因此就有了重构替换 ",(0,s.jsx)(e.strong,{children:"sucrase"})," 的尝试，在替换 sucrase后，在线构建模块性能成倍提升。在本章节中就主要是基于",(0,s.jsx)(e.strong,{children:"sucrase"}),"封装",(0,s.jsx)(e.strong,{children:"TransformCode"}),"相关的方法。"]}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["使用",(0,s.jsx)(e.strong,{children:"sucrase"}),"的",(0,s.jsx)(e.strong,{children:"transform"}),"方法来进行",(0,s.jsx)(e.strong,{children:"sucraseTransformCode"}),"的方法封装，此时接受在低代码平台中编写的代码，然后进行转换，最后将转换好的commonjs逻辑进行导出。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { transform } from "sucrase";\n\n/**\n * sucrase 编译器\n * @param code 需要编译的代码,\n */\nexport const sucraseTransformCode = async (code: string): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    try {\n      // 编译成功的代码，不需要sourceMap\n      const buildProduct = transform(code, {\n        transforms: ["typescript", "imports", "jsx"],\n      }).code;\n      resolve(buildProduct);\n    } catch (error) {\n      // 编译失败\n      reject(error);\n    }\n  });\n};\n\n/**\n * babel 的编译器\n * @description 比其他编译会慢一些，但是更加健壮稳定\n * @param code 需要编译的代码,\n */\nexport const babelTransformCode = async (code: string) => {\n  // todo...\n  return code;\n};\n'})}),"\n",(0,s.jsxs)(e.p,{children:["如下图所示，在",(0,s.jsx)(e.strong,{children:"js模块"}),"中输入代码后保存，此时可以在调用端打印当前",(0,s.jsx)(e.strong,{children:"sucraseTransformCode"}),"函数的输出，可以看到已经编译成为了标准的",(0,s.jsx)(e.strong,{children:"commonjs"}),"模块了。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"实现compilemoduleresolve",children:["实现compileModuleResolve",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现compilemoduleresolve",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["当有了",(0,s.jsx)(e.strong,{children:"cjs模块"}),"的时候，那么只需要将其执行后获取",(0,s.jsx)(e.strong,{children:"moudle.exports"}),"结果就是当前js模块所有声明的函数了。加载模块的方法前面也提到过。"]}),"\n",(0,s.jsxs)(e.p,{children:["如下代码所示，",(0,s.jsx)(e.strong,{children:"compileModuleResolve"}),"是需要实现的方法，接收两个参数："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Code"}),": 当前的",(0,s.jsx)(e.strong,{children:"cjs代码"}),"，也就是",(0,s.jsx)(e.strong,{children:"TransformCode"}),"转换后的代码"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"dependencies"}),"： 当前的依赖的对象，如",(0,s.jsx)(e.strong,{children:"react、dayjs"}),"这些，在低代码平台中可以使用刚才挂载的",(0,s.jsx)(e.strong,{children:"huosScope中的depends对象"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["使用",(0,s.jsx)(e.strong,{children:"Function"}),"执行代码时会进行类似",(0,s.jsx)(e.strong,{children:"with"}),"的操作，可以看到在下面实现了",(0,s.jsx)(e.strong,{children:"require"}),"方法来进行依赖的获取，并且将结果注入到",(0,s.jsx)(e.strong,{children:"module"}),"字段当中。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'export const compileModuleResolve = (\n  code: string,\n  dependencies: Record<string, any> = {}\n) => {\n    const module: ESMoudleType = {\n    exports: {\n      __esModule: false,\n      default: null as unknown,\n    },\n  };\n\n  // 实现一个require方法，用于模块执行时挂载依赖\n  const require = (packageName: string) => {\n    if (dependencies[packageName]) {\n      return dependencies[packageName];\n    }\n    throw new Error(`${packageName} is not found.`);\n  };\n  // 动态执行\n  Function("require, exports, module", code)(require, module.exports, module);\n  return module;\n};\n'})}),"\n",(0,s.jsxs)(e.p,{children:["如下图所示，此时执行代码后会将",(0,s.jsx)(e.strong,{children:"cjs模块"}),"的内容解析，将之前",(0,s.jsx)(e.strong,{children:"ESM中的export"}),"的函数导出成为一个对象， 此时在将其保存在内存空间中方便后续点击事件调用。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"执行代码",children:["执行代码",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#执行代码",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["如下代码所示，",(0,s.jsx)(e.strong,{children:"handleMountJsMoudle"}),"中通过",(0,s.jsx)(e.strong,{children:"connectJsRuntimeVM"}),"连接到执行容器后，在执行",(0,s.jsx)(e.strong,{children:"sucraseTransformCode"}),"方法转换",(0,s.jsx)(e.strong,{children:"cjs模块代码"}),"，最后通过",(0,s.jsx)(e.strong,{children:"compileModuleResolve"}),"将",(0,s.jsx)(e.strong,{children:"cjs模块"}),"执行输出成一个能够直接使用的js对象将其挂载在 ",(0,s.jsx)(e.strong,{children:"sandbox.huosScope.jsMoudle"}),"指定目录下。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"/**\n * 处理当前模块地址\n * @param code 代码\n */\nconst handleMountJsMoudle = async (\n  code: string,\n) => {\n  const { sandbox } = connectJsRuntimeVM()\n  const cjsCode = await sucraseTransformCode(code)\n  if (cjsCode) {\n    const module = compileModuleResolve(cjsCode, sandbox.huosScope.depends)\n    console.log(module, 'module')\n    sandbox.huosScope.jsMoudle = module.exports \n    logger.info(\"JS模块挂载成功\")\n  }\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["将这个方法挂载到",(0,s.jsx)(e.strong,{children:"jsRuntime"}),"上。然后在编辑器中监听JS模块中的内容发生改变时，直接 ",(0,s.jsx)(e.strong,{children:"jsRuntime.mountJsMoudle(jsMoudleCode)"})," 方法，此时模块会重新构建编译并且挂载。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"provider使用",children:["Provider使用",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#provider使用",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["如下图所示，",(0,s.jsx)(e.strong,{children:"useSchema是一个全局的store"}),"，我们的",(0,s.jsx)(e.strong,{children:"JSMoudleCode"}),"都保存在里面，当",(0,s.jsx)(e.strong,{children:"jsMoudleCode"}),"状态发生改变后，需要进行重新编译。"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"编译器"}),"： 会发生N次重新构建和挂载。"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"预览"}),"： 只做初始化的时候进行编译挂载。"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import React from "react";\nimport { Editor as RootEditor } from "@craftjs/core";\nimport * as DefaultMaterials from "./components";\nimport * as ArcoMaterials from "./components/design/arco";\nimport { RenderNodeWrapper } from "./render-wrapper";\nimport { EmptySetter } from \'@/framework/canvas/empty-render\'\n+import { useSchema } from \'./stores/useSchema\'\n+import { jsRuntime } from \'@huos/core\'\n\nexport interface EditoRootWrapperProps {\n  // 本地storageKey, 用户缓存当前\n  children?: React.ReactNode;\n}\n\nexport const EditoRootWrapper: React.FC<EditoRootWrapperProps> = (props) => {\n\n+  const jsMoudleCode = useSchema(selector => selector.jsMoudleCode);\n\n+  // 初始化js模块\n+  React.useEffect(() => {\n+    jsRuntime.mountJsMoudle(jsMoudleCode)\n+  }, [jsMoudleCode])\n\n  // 初始化依赖包\n\n  // 初始化wasm\n\n  return (\n    <RootEditor\n      resolver={{ ...DefaultMaterials, ...ArcoMaterials, EmptySetter }}\n      onRender={RenderNodeWrapper}\n    >\n      {props.children}\n    </RootEditor>\n  );\n};\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:["总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"本篇文章主要介绍了下后续JS模块运行时的一些基础实现方式，如何在浏览器中将代码构建并且运行模块并挂载到执行容器当中，甚至于可以在服务器进行预编译然后水合到应用当中。"}),"\n",(0,s.jsxs)(e.p,{children:["相关的代码在",(0,s.jsx)(e.strong,{children:"core包的builder"}),"目录下面，内部目前只实现了",(0,s.jsx)(e.strong,{children:"sucraseTransformCode"}),"方法，也就是基于",(0,s.jsx)(e.strong,{children:"sucrase的cjs模块"}),"打包方案。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"关于babel和wasm的方案感兴趣的可以在交流群中探讨。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["当实现模块的编译挂载后，后面就是与低代码平台组件事件做关联了，如下图所示，是一个",(0,s.jsx)(e.strong,{children:"事件管理器的setter"}),"，在此时事件名称中就可以拿到在JSModule编辑器中的模块然后输入到组件进行绑定。"]}),"\n",(0,s.jsx)(e.p,{children:"在下一章节中，主要就是基于这个思路实现整个低代码平台组件层事件通信的链路串联，并且与之和状态请求相关联，打造好基础的事件处理中心。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"引用资源",children:["引用资源",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#引用资源",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://sucrase.io/",target:"_blank",rel:"noopener noreferrer",children:"sucrase"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://babeljs.io/repl",target:"_blank",rel:"noopener noreferrer",children:"babel"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://github.com/suren-atoyan/monaco-react",target:"_blank",rel:"noopener noreferrer",children:"monaco-react"})})]})}function x(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(j,{...n})}):j(n)}let u=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F45.%E9%A1%B9%E7%9B%AE%E8%BF%9B%E9%98%B6%EF%BC%9A%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1.md"]={toc:[{text:"实现流程",id:"实现流程",depth:2},{text:"具体实现",id:"具体实现",depth:2},{text:"初始化Monaco",id:"初始化monaco",depth:3},{text:"安装",id:"安装",depth:2},{text:"默认配置",id:"默认配置",depth:4},{text:"自定义主题",id:"自定义主题",depth:4},{text:"设置主题",id:"设置主题",depth:3},{text:"配置JSEditor",id:"配置jseditor",depth:3},{text:"实现TransformCode",id:"实现transformcode",depth:3},{text:"实现compileModuleResolve",id:"实现compilemoduleresolve",depth:3},{text:"执行代码",id:"执行代码",depth:3},{text:"Provider使用",id:"provider使用",depth:3},{text:"总结",id:"总结",depth:2},{text:"引用资源",id:"引用资源",depth:2}],title:"45.项目进阶：消息通信",headingTitle:"45.项目进阶：消息通信",frontmatter:{}}}}]);