"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["41373"],{203915:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var i=r(552676),d=r(740453);function s(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",h3:"h3",pre:"pre",code:"code",h4:"h4",ul:"ul",li:"li"},(0,d.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"32数据查询与统计",children:["32.数据查询与统计",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32数据查询与统计",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"53-数据查询与统计",children:["5.3 数据查询与统计",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#53-数据查询与统计",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["查询集合collection里的记录是云开发数据库操作最重要的知识，在前面我们已经将中国城市经济数据china.csv的数据导入到了集合china之中，并已经设置好了集合的权限为“",(0,i.jsx)(n.strong,{children:"所有人可读，仅创建者可读写"}),"”（或使用安全规则），接下来我们就以此为例来讲解数据库的查询。"]}),"\n",(0,i.jsxs)(n.p,{children:["在",(0,i.jsx)(n.a,{href:"https://shimo.im/sheets/HHwXWQ9qHqvG8xDw/MODOC/",target:"_blank",rel:"noopener noreferrer",children:"中国城市经济线上excel版"}),"以及云开发控制台china集合里，我们可以看到中国332个城市的",(0,i.jsx)(n.strong,{children:"名称city"}),"、",(0,i.jsx)(n.strong,{children:"省份province"}),"、",(0,i.jsx)(n.strong,{children:"市区面积city_area"}),"、",(0,i.jsx)(n.strong,{children:"建成区面积builtup_area"}),"、",(0,i.jsx)(n.strong,{children:"户籍人口reg_pop"}),"、",(0,i.jsx)(n.strong,{children:"常住人口resident_pop"}),"、GDP的数据。"]}),"\n",(0,i.jsxs)(n.h3,{id:"531-快速了解数据查询",children:["5.3.1 快速了解数据查询",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#531-快速了解数据查询",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["查询中国",(0,i.jsx)(n.strong,{children:"GDP在3000亿元以上"}),"的",(0,i.jsx)(n.strong,{children:"前10个城市"}),"，并要求",(0,i.jsx)(n.strong,{children:"不显示_id字段"}),"，",(0,i.jsx)(n.strong,{children:"显示城市名、所在省份以及GDP"}),"，并按照",(0,i.jsx)(n.strong,{children:"GDP大小降序排列"}),"。"]}),"\n",(0,i.jsx)(n.p,{children:"使用开发者工具新建一个chinadata页面，然后再在chinadata.js的onLoad生命周期函数里输入以下代码。操作集合里的数据涉及的知识点非常繁杂，下面的案例相对比较完整，便于大家有一个整体性的理解："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const db = wx.cloud.database()  //获取数据库的引用\nconst _ = db.command     //获取数据库查询及更新操作符\ndb.collection(\"china\")  //获取集合china的引用\n  .where({              //查询的条件操作符where\n    gdp: _.gt(3000)     //查询筛选条件，gt表示字段需大于指定值。\n  })\n  .field({             //显示哪些字段\n    _id:false,         //默认显示_id，这个隐藏\n    city: true,\n    province: true,\n    gdp:true\n  })\n  .orderBy('gdp', 'desc')  //排序方式，降序排列\n  .skip(0)                 //跳过多少个记录（常用于分页），0表示这里不跳过\n  .limit(10)               //限制显示多少条记录，这里为10\n \n  .get()                   //获取根据查询条件筛选后的集合数据  \n  .then(res => {\n    console.log(res.data)\n  })\n  .catch(err => {\n    console.error(err)\n  })\n"})}),"\n",(0,i.jsxs)(n.p,{children:["大家可以留意一下数据查询的",(0,i.jsx)(n.strong,{children:"链式写法"}),"， wx.cloud.database().collection('数据库名').where().get().then().catch()，前半部分是数据查询时对对象的引用和方法的调用；后半部分是Promise对象的方法，Promise对象是get的返回值。写的时候为了让结构更加清晰，我们做了换行处理，写在同一行也是可以的。get查询会先进行权限匹配，再来查询，也就是如果集合里没有符合权限的记录，是查不到数据的。"]}),"\n",(0,i.jsxs)(n.h3,{id:"632-构建查询条件的5个方法",children:["6.3.2 构建查询条件的5个方法",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#632-构建查询条件的5个方法",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"不过值得注意的是这5个方法顺序不同查询的结果有时也会有所不同（如orderBy和skip多次打乱顺序的情况下），查询性能也会有所不同。通常skip最好放在后面，不要让skip略过大量数据。skip().limit()和limit().skip()效果是等价的。"}),"\n",(0,i.jsxs)(n.p,{children:["构建查询条件的5个方法是基于集合引用Collection的，就拿where来说，不能写成",(0,i.jsx)(n.code,{children:"wx.cloud.database().where()"}),"，也不能是 ",(0,i.jsx)(n.code,{children:'wx.cloud.database().collection("china").doc.where()'}),"，只能是 ",(0,i.jsx)(n.code,{children:'wx.cloud.database().collection("china").where()'}),"，也就是只能用于查询集合collection里的记录。"]}),"\n",(0,i.jsx)(n.p,{children:"这五个方法是可以单独拆开使用的，比如只使用where或只使用field、limit，也可以从这5个中抽几个组合在一起使用，还可以一次查询里写多个相同的方法，比如orderBy、where可以写多次的。查询返回的结果都是记录列表，是一个数组。"}),"\n",(0,i.jsxs)(n.h4,{id:"1查询条件-where",children:["1、查询条件 where",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1查询条件-where",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["与记录的值本身相关的条件都会写在where方法里，where里可以是值匹配（如",(0,i.jsx)(n.code,{children:"gdp: _.gt(3000)"}),"）；后面我们会介绍的",(0,i.jsx)(n.strong,{children:"command查询操作符"}),"比如筛选字段大于/小于/不等于某个值的比较操作符，同时满足多个筛选条件的逻辑操作符等，以及",(0,i.jsx)(n.strong,{children:"模糊查询的正则"}),"都是写在where内。"]}),"\n",(0,i.jsx)(n.p,{children:"通过where构建条件来筛选记录，不仅可以用于查询get，还可以用于删除remove、更新update、统计记录数count以及实时监听watch（add不必用where）。"}),"\n",(0,i.jsxs)(n.h4,{id:"2指定返回哪些字段field",children:["2、指定返回哪些字段field",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2指定返回哪些字段field",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"查询时只需要传入 true|false（或 1|-1）就可以返回或不返回哪些字段，在上面的案例里我们就只返回city、province、gdp三个字段的值。"}),"\n",(0,i.jsx)(n.p,{children:"我们可以使用field不返回我们不需要的字段和字段值，这会减少返回的数据的体积，这也是性能优化比较重要的。"}),"\n",(0,i.jsxs)(n.h4,{id:"3数据排序orderby",children:["3、数据排序orderBy",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3数据排序orderby",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["排序的语法为",(0,i.jsx)(n.code,{children:"orderBy('字段名',  '排序方式')"}),"，里面为排序的条件，这里的字段名不受field的限制（不在field内只是不返回，但是还是会起作用）。"]}),"\n",(0,i.jsxs)(n.p,{children:["排序方式只支持",(0,i.jsx)(n.strong,{children:"desc降序"}),"、",(0,i.jsx)(n.strong,{children:"asc升序"}),"这两种方式，如果字段里面的值时数字就按照大小，如果是字母就按照先后顺序，",(0,i.jsx)(n.strong,{children:"不支持中文的排序方式"}),"。"]}),"\n",(0,i.jsx)(n.p,{children:"排序支持按多个字段排序，多次调用orderBy即可，多字段排序时的顺序会按照orderBy调用顺序先后对多个字段排序。"}),"\n",(0,i.jsx)(n.p,{children:"如果需要对嵌套字段排序，可以使用点表示法，比如上面的books根据出版年份year从旧到新排序，可以写为orderBy('publishInfo.year','asc')"}),"\n",(0,i.jsxs)(n.h4,{id:"4分页显示skip",children:["4、分页显示skip",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4分页显示skip",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"skip常与limit一起用于分页，比如商品列表一页只显示20个商品，第1页显示整个数据的0~20个，那么第2页我们用skip(20)可以跳过第一页的20条数据，第3页则跳过40个数据，第N页则是skip((n-1)*20)个数据。"}),"\n",(0,i.jsxs)(n.h4,{id:"5限制数量上限的limit",children:["5、限制数量上限的limit",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5限制数量上限的limit",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"数据查询的数量上限limit在小程序端默认为20，上限也是20；在服务端（云函数）默认为100，上限则是1000，比如limit(30)在小程序端还是只会显示20条数据。"}),"\n",(0,i.jsxs)(n.h3,{id:"534-统计记录",children:["5.3.4 统计记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#534-统计记录",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["count()方法可以用来统计查询条件匹配到的记录数，和get()一样，count与集合权限设置有关，在小程序端一个用户仅能统计其有",(0,i.jsx)(n.strong,{children:"读权限"}),"的记录数，而云函数端由于不受权限设置的控制，可以统计集合内所有符合条件的记录数。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const db = wx.cloud.database()\nconst _ = db.command\ndb.collection("china")\n  .where({             \n    gdp: _.gt(3000)    \n  })\n  .count().then(res => {\n    console.log(res.total)\n  })\n\n//或者我们可以这样写，注意要写在async里，云函数的main自带async，小程序端要加async\nconst count = await db.collection("china")\n  .where({             \n    gdp: _.gt(3000)    \n  })\n  .count()\n'})}),"\n",(0,i.jsx)(n.p,{children:"field、orderBy、skip、limit对count是无效的，只有where才会影响count的结果，count只会返回记录数，不会返回查询到的数据。注意count请求不能和get、remove、update等混用，如果你既想查询数据又想获取count值，只能分两次查询了。"}),"\n",(0,i.jsxs)(n.h3,{id:"535-数据查询需要注意的问题",children:["5.3.5 数据查询需要注意的问题",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#535-数据查询需要注意的问题",children:"#"})]}),"\n",(0,i.jsxs)(n.h4,{id:"1简易权限控制",children:["1、简易权限控制",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1简易权限控制",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"当集合使用的是简易权限控制，我们在小程序端进行数据库请求（如get、count、update等）时，都会默认给where添加一个条件："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'.where({              \n   _openid:"当前用户的openid"    \n})\n'})}),"\n",(0,i.jsx)(n.p,{children:"所以这就是为什么尽管集合里面有数据，但是由于有了这个条件，只要记录里没有_openid或openid不匹配就查询不到记录。也就是说如果你的集合使用的是简易权限控制，进行数据库请求时，会既受到权限的约束，也会受到以上这个查询条件的约束。"}),"\n",(0,i.jsx)(n.p,{children:"比如在小程序端A用户是不能修改B用户创建的记录的，简易权限控制里没有跨用户来写记录的权限，在小程序端用户A只能修改当前用户A创建的数据。如果想实现跨用户写记录的操作，要么开启安全规则（自定义权限），要么在云函数端进行操作。"}),"\n",(0,i.jsxs)(n.h4,{id:"2数据查询的数量",children:["2、数据查询的数量",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2数据查询的数量",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"前面也提到过，小程序端自带limit限制为20条，在手机端一页显示20条数据也已经足够，如果想显示更多，可以翻页，或使用云函数获取（默认100条，最多1000条），或使用聚合。"}),"\n",(0,i.jsxs)(n.p,{children:["在MySQL里，是",(0,i.jsx)(n.strong,{children:"不允许直接"}),"查询数据表里的所有数据的，如果表里有几万、几十万乃至上百万的数据，不对查询的条件和数量有限制，会大大降低数据库的性能，但是云开发的数据库却可以直接查，正是因为云开发数据库在小程序端和云函数有默认的数据查询限制。"]}),"\n",(0,i.jsxs)(n.h4,{id:"3数据查询的速度",children:["3、数据查询的速度",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3数据查询的速度",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["这里有",(0,i.jsx)(n.strong,{children:"三个数据查询的速度"}),"要比较：1、在小程序端查询集合的速度；2、云函数端查询集合的速度；3、小程序端调用云函数来查询数据并将数据返回给小程序端的速度；"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["重新编译加载chinadata页面，然后打开控制面板的",(0,i.jsx)(n.strong,{children:"Network"}),"标签，我们可以看到db.collection.where.get的Type、size以及Time，这个是",(0,i.jsx)(n.strong,{children:"在小程序端查询集合的速度"}),"；"]}),"\n",(0,i.jsxs)(n.li,{children:["打开云开发控制台，在云函数标签找到zhihu_daily云函数，点击云端测试，直接运行测试，就能触发云函数，调用成功后我们可以看到日志里包含返回的数据，以及",(0,i.jsx)(n.strong,{children:"Duration"}),"云函数的执行时间和MaxMemoryUsed执行时最大内存（拉到日志的最后，或者可以通过云函数的日志来查看），这里的",(0,i.jsx)(n.strong,{children:"Duration"}),"可以看成是",(0,i.jsx)(n.strong,{children:"云函数查询集合"}),"的整个时间（背后原理更容易），通常会比小程序端查询集合的速度要快；"]}),"\n",(0,i.jsxs)(n.li,{children:["在模拟器里点击",(0,i.jsx)(n.strong,{children:"获取日报数据"}),"的button按钮，然后打开控制面板的",(0,i.jsx)(n.strong,{children:"Network"}),"标签，我们可以看到wx.cloud.callFuntion.zhihu_daily的Type、size以及Time，这个就是我们在小程序端调用云函数来查询数据，然后并将数据返回给小程序端的速度，这个速度是三种方法里面最慢的。"]}),"\n"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}let c=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F32.%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8E%E7%BB%9F%E8%AE%A1.md"]={toc:[{text:"5.3 数据查询与统计",id:"53-数据查询与统计",depth:2},{text:"5.3.1 快速了解数据查询",id:"531-快速了解数据查询",depth:3},{text:"6.3.2 构建查询条件的5个方法",id:"632-构建查询条件的5个方法",depth:3},{text:"1、查询条件 where",id:"1查询条件-where",depth:4},{text:"2、指定返回哪些字段field",id:"2指定返回哪些字段field",depth:4},{text:"3、数据排序orderBy",id:"3数据排序orderby",depth:4},{text:"4、分页显示skip",id:"4分页显示skip",depth:4},{text:"5、限制数量上限的limit",id:"5限制数量上限的limit",depth:4},{text:"5.3.4 统计记录",id:"534-统计记录",depth:3},{text:"5.3.5 数据查询需要注意的问题",id:"535-数据查询需要注意的问题",depth:3},{text:"1、简易权限控制",id:"1简易权限控制",depth:4},{text:"2、数据查询的数量",id:"2数据查询的数量",depth:4},{text:"3、数据查询的速度",id:"3数据查询的速度",depth:4}],title:"32.数据查询与统计",headingTitle:"32.数据查询与统计",frontmatter:{}}}}]);