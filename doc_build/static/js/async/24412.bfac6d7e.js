"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["24412"],{418798:function(e,n,s){s.r(n),s.d(n,{default:()=>O});var i=s(552676),a=s(740453);let c=s.p+"static/image/36a8a11a71cd08be298bdc600af16c0b.01f72726.webp",t=s.p+"static/image/995de8aef0c9bb6df530abc1a3ae0cad.fa880510.webp",r=s.p+"static/image/027983c32d4b246c18c6a583385b92f4.60705255.webp",p=s.p+"static/image/58d823afa82e5f797bba21916555b900.f20bdade.webp",l=s.p+"static/image/57823ede1be305f5b046f5cf6337ff55.0f42984a.webp",d=s.p+"static/image/1a7dcf537548d3721afe5ee61131b253.dba18b68.webp",o=s.p+"static/image/7601e01c62609ca727651671c1bae5a9.800bca2f.webp",x=s.p+"static/image/2b4cf5d77bb3735db196da06bf4e4510.3c8b63b1.webp",h=s.p+"static/image/3718efbca3c2ebbf415d2d2ed5fa8a37.65db0b2d.webp",g=s.p+"static/image/2678cd8ebcf0030b0f4bea8b490877b8.2c575f1b.webp",j=s.p+"static/image/ac66ee4f266e3fa0b2a8aa47ed73394d.b657f71a.webp",m=s.p+"static/image/a34782cd649b81ee7148508c7d176fa1.eeecf7e1.webp",u=s.p+"static/image/f764ad58235b9ee9a0280e05398657ff.e6acbd99.webp",b=s.p+"static/image/aa41c83b013fa00d87fb8294950624bf.76e1d338.webp",f=s.p+"static/image/ce124d693c13e6cb00598e30a83049a3.871afc61.webp",E=s.p+"static/image/eefa3886a017e965995ff08b8b63af8d.a945279f.webp",w=s.p+"static/image/43bc1048dec273a8fb4005f20046538d.2008ece0.webp",N=s.p+"static/image/d4cdd0e82dbbaa45debe8b037167591e.5924f4f1.webp",S=s.p+"static/image/cb04649d8c2f2454fdea26cca5f2c561.3d57b16f.webp",y=s.p+"static/image/d32b2a004621202e46dd6ba4b833e873.8f27f7fb.webp",k=s.p+"static/image/483b5aa4996fb7263597f1e0aaeb15fd.510046f9.webp",A=s.p+"static/image/9904a12100aa794c923765fde987a4a1.d6518c8a.webp",P=s.p+"static/image/21896f805543143c94c1b5582e5c8e21.74236535.webp",z=s.p+"static/image/fa18259daeeecc32b11c4344481e441b.0b3dac7e.webp",C=s.p+"static/image/1af508253e96664b836339a4867a6616.baa394c5.webp",v=s.p+"static/image/4e83efdbf3974b3552e96ee8697e7a96.141f927a.webp",B=s.p+"static/image/bb19f654e0e9d248f2977ebf793f45b7.15c4f667.webp",F=s.p+"static/image/418f89005653105b19275c52a92a555f.2ea28e4d.webp",H=s.p+"static/image/8428f574862461212cb90780cd153124.a32713d8.webp",R=s.p+"static/image/11af3e65faf2ae1b720b2ffadb823039.9e718a73.webp",U=s.p+"static/image/28082c2db40cb5c2030211e78aec1782.61481c62.webp",_=s.p+"static/image/406db269bf2d2dfff424f0b6bc9289ec.38b333a5.webp",I=s.p+"static/image/81b0953097281fcbd2769c3e2f015c63.0a417466.webp",Q=s.p+"static/image/f4566815c29ba656ce7012810745bee3.77c19e2c.webp",T=s.p+"static/image/3ebdc516a1164448781886be9d3e3575.e77f25f2.webp",q=s.p+"static/image/2b39ed8e0290676f26aa0c85984cb195.4bfa3270.webp",G=s.p+"static/image/ad8136df019d1a16cf8f8bde551a5b78.f953130d.webp",L=s.p+"static/image/da05658d8f17f27d40f75acffda9971e.2105ce46.webp";function D(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"114-会议室预订系统用户管理模块--用户列表和分页查询",children:["114. 会议室预订系统：用户管理模块--用户列表和分页查询",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#114-会议室预订系统用户管理模块--用户列表和分页查询",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"用户管理模块我们实现了注册、登录鉴权、信息修改接口，还剩下两个接口："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:L,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这节来实现下。"}),"\n",(0,i.jsx)(n.p,{children:"在那之前先考虑个问题："}),"\n",(0,i.jsx)(n.p,{children:"成功的响应是这样的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:G,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"但是失败的响应是这样："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:q,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"并不统一。"}),"\n",(0,i.jsx)(n.p,{children:"如何让响应统一成 {code、message、data} 的格式呢？"}),"\n",(0,i.jsx)(n.p,{children:"这里就需要自定义 Exception Filter 了。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"在 Guard、handler、interceptor 等处理逻辑里 throw http 异常，都会被 ExceptionFilter 处理成相应的响应。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:Q,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:I,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"如果想修改异常响应的格式，就要自定义了。"}),"\n",(0,i.jsx)(n.p,{children:"我们新建个 exception filter："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"nest g filter unlogin --flat\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"@Catch 的参数可以指定具体 catch 的异常类型："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { ArgumentsHost, Catch, ExceptionFilter, HttpStatus } from '@nestjs/common';\nimport { Response } from 'express';\n\nexport class UnLoginException{\n  message: string;\n\n  constructor(message?){\n    this.message = message;\n  }\n}\n\n@Catch(UnLoginException)\nexport class UnloginFilter implements ExceptionFilter {\n  catch(exception: UnLoginException, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse<Response>();\n\n    response.json({\n      code: HttpStatus.UNAUTHORIZED,\n      message: 'fail',\n      data: exception.message || '用户未登录'\n    }).end();\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"我们自定义了 UnLoginException 的异常，在 @Catch 指定捕获这个异常，返回对应的响应。"}),"\n",(0,i.jsx)(n.p,{children:"在 main.ts 引入下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:U,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后把 LoginGuard 里的异常改成 UnLoginException"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"测试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:H,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"现在当你不带 token 访问 /aaa 的时候，返回的就是自己定义的格式了。"}),"\n",(0,i.jsx)(n.p,{children:"搜索下之前代码里抛的异常："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:F,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"还有不少。"}),"\n",(0,i.jsx)(n.p,{children:"难道有多少种 exception 就定义多少种异常类和 exception filter 么？"}),"\n",(0,i.jsx)(n.p,{children:"没必要，直接修改下对 HttpException 的处理逻辑就好了。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"nest g filter custom-exception --flat\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';\nimport { Response } from 'express';\n\n@Catch(HttpException)\nexport class CustomExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse<Response>();\n    response.statusCode = exception.getStatus();\n\n    response.json({\n      code: exception.getStatus(),\n      message: 'fail',\n      data: exception.message\n    }).end();\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"直接 @Catch 指定 HttpException，修改返回的响应格式。"}),"\n",(0,i.jsx)(n.p,{children:"然后在 main.ts 里启用："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这样，所有的代码都不用修改，返回的响应就已经变了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:z,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以，如果你只是想修改默认的响应格式，直接定义个 catch HttpException 的 filter 就好了。"}),"\n",(0,i.jsx)(n.p,{children:"但这样其实还有个问题："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:P,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"对于 ValidationPipe 报的错，返回的信息不准。"}),"\n",(0,i.jsx)(n.p,{children:"我们可以打个断点看看具体的错误信息："}),"\n",(0,i.jsx)(n.p,{children:"创建 .vscode/launch.json 文件："}),"\n",(0,i.jsx)(n.p,{children:"输入调试配置："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n    "name": "Launch via NPM",\n    "request": "launch",\n    "runtimeArgs": [\n        "run-script",\n        "start:dev"\n    ],\n    "console": "integratedTerminal",\n    "runtimeExecutable": "npm",\n    "skipFiles": [\n        "<node_internals>/**"\n    ],\n    "type": "node"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"然后在 exception filter 打个断点，点击调试启动："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"在 postman 里再次请求这个接口，代码会在断点处断住："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"可以看到，这时候 message 并不是具体的错误，具体的错误在 response.message 里："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以我们可以这样改："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';\nimport { Response } from 'express';\n\n@Catch(HttpException)\nexport class CustomExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse<Response>();\n    response.statusCode = exception.getStatus();\n\n    const res = exception.getResponse() as { message: string[] };\n    \n    response.json({\n      code: exception.getStatus(),\n      message: 'fail',\n      data: res?.message?.join ? res?.message?.join(',') : exception.message\n    }).end();\n  }\n}\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"就是如果有 response.message 就优先用那个，否则就取 exception.message。"}),"\n",(0,i.jsx)(n.p,{children:"再试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:N,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这样，错误显示就对了。"}),"\n",(0,i.jsx)(n.p,{children:"然后我们实现冻结用户的接口，冻结的用户不能预定会议室。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这个接口非常简单，就是修改一个字段："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@Get('freeze')\nasync freeze(@Query('id') userId: number) {\n    await this.userService.freezeUserById(userId);\n    return 'success';\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"定义 get 接口，然后从 query 取 id 参数。"}),"\n",(0,i.jsx)(n.p,{children:"其实这个接口也需要登录，而且只有管理员有调用它的权限，这个我们后面再统一处理。"}),"\n",(0,i.jsx)(n.p,{children:"在 UserService 定义这个 freezeUserById 方法："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async freezeUserById(id: number) {\n    const user = await this.userRepository.findOneBy({\n        id\n    });\n\n    user.isFrozen = true;\n\n    await this.userRepository.save(user);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"测试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"确实冻结了。"}),"\n",(0,i.jsx)(n.p,{children:"然后实现 /user/list 用户列表接口。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@Get('list')\nasync list(@Query('pageNo', ParseIntPipe) pageNo: number, @Query('pageSize', ParseIntPipe) pageSize: number) {\n    return await this.userService.findUsersByPage(pageNo, pageSize);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"这个接口支持分页查询，传入 pageNo、pageSize，返回对应页的数据。"}),"\n",(0,i.jsx)(n.p,{children:"我们在 UserService 里实现下："}),"\n",(0,i.jsx)(n.p,{children:"还记得如何用 sql 实现分页查询么？"}),"\n",(0,i.jsx)(n.p,{children:"目前 users 表有 4 条数据，我们先查询全部的："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select * from users\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后每 2 条记录一页"}),"\n",(0,i.jsx)(n.p,{children:"查询第一页："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select * from users limit 0,2\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"查询第二页："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select * from users limit 2,2\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"也就是说，只要计算出当前页码跳过多少条记录，取多少条记录就好了。"}),"\n",(0,i.jsx)(n.p,{children:"也就是这样："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async findUsersByPage(pageNo: number, pageSize: number) {\n    const skipCount = (pageNo - 1) * pageSize;\n\n    const [users, totalCount] = await this.userRepository.findAndCount({\n        skip: skipCount,\n        take: pageSize\n    });\n\n    return {\n        users,\n        totalCount\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"当前页码减一乘以 pageSize，就是要跳过的记录数，然后再取 pageSize 条。"}),"\n",(0,i.jsx)(n.p,{children:"我们这次用的是 findAndCount 的 api，它还会查询总记录数。"}),"\n",(0,i.jsx)(n.p,{children:"测试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"没传 pageNo 的时候会返回 400 的错误。"}),"\n",(0,i.jsx)(n.p,{children:"这个报错信息不够友好，我们改一下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@Get('list')\nasync list(\n@Query('pageNo', new ParseIntPipe({\n  exceptionFactory() {\n    throw new BadRequestException('pageNo 应该传数字');\n  } \n})) pageNo: number,\n@Query('pageSize', new ParseIntPipe({\n  exceptionFactory() {\n    throw new BadRequestException('pageSize 应该传数字');\n  } \n})) pageSize: number\n) {\n    return await this.userService.findUsersByPage(pageNo, pageSize);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"现在的提示信息就友好多了。"}),"\n",(0,i.jsx)(n.p,{children:"我们重构下代码："}),"\n",(0,i.jsx)(n.p,{children:"把这段代码抽离到 src/utils.ts 里："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"export function generateParseIntPipe(name) {\n    return new ParseIntPipe({\n      exceptionFactory() {\n        throw new BadRequestException(name + ' 应该传数字');\n      } \n    })\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"那 controller 的代码就可以简化成这样了："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@Get('list')\nasync list(\n    @Query('pageNo', generateParseIntPipe('pageNo')) pageNo: number,\n    @Query('pageSize', generateParseIntPipe('pageSize')) pageSize: number,\n) {\n    return await this.userService.findUsersByPage(pageNo, pageSize);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"那如果没有传 pageNo 和 pageSize 的时候要设置个默认值呢？"}),"\n",(0,i.jsx)(n.p,{children:"可以使用 DefaultValuePipe："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"没有传 pageNo 的时候设置为 1，没有传 pageSize 的时候设置为 2。"}),"\n",(0,i.jsx)(n.p,{children:"测试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"现在传入 pageNo 和 pageSize 就可以查询出对应的数据，还有总条数："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"服务端打印了两条 sql："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"一条是分页查询，指定了 limit 2 offset 2，这个和 limit 2, 2 是一样的"}),"\n",(0,i.jsx)(n.p,{children:"一条是 count 统计，统计了用户的总条数。"}),"\n",(0,i.jsx)(n.p,{children:"这里返回的信息同样也需要做一些修改。"}),"\n",(0,i.jsx)(n.p,{children:"我们指定下 select 的字段："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async findUsersByPage(pageNo: number, pageSize: number) {\n    const skipCount = (pageNo - 1) * pageSize;\n\n    const [users, totalCount] = await this.userRepository.findAndCount({\n        select: ['id', 'username', 'nickName', 'email', 'phoneNumber', 'isFrozen', 'headPic', 'createTime'],\n        skip: skipCount,\n        take: pageSize\n    });\n\n    return {\n        users,\n        totalCount\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"这样返回的数据就只包含 select 的字段了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"当然，如果你需要对返回的数据再做一些变换，这时候可以封装个 vo 对象。"}),"\n",(0,i.jsx)(n.p,{children:"用户列表的需求除了分页外，还需要支持根据 username、nickName、email 的搜索："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"添加几个参数："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@Get('list')\nasync list(\n    @Query('pageNo', new DefaultValuePipe(1), generateParseIntPipe('pageNo')) pageNo: number,\n    @Query('pageSize', new DefaultValuePipe(2), generateParseIntPipe('pageSize')) pageSize: number,\n    @Query('username') username: string,\n    @Query('nickName') nickName: string,\n    @Query('email') email: string\n) {\n    return await this.userService.findUsers(username, nickName, email, pageNo, pageSize);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"在 UserService 添加 findUsers 方法："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async findUsers(username: string, nickName: string, email: string, pageNo: number, pageSize: number) {\n    const skipCount = (pageNo - 1) * pageSize;\n\n    const condition: Record<string, any> = {};\n\n    if(username) {\n        condition.username = Like(`%${username}%`);   \n    }\n    if(nickName) {\n        condition.nickName = Like(`%${nickName}%`); \n    }\n    if(email) {\n        condition.email = Like(`%${email}%`); \n    }\n\n    const [users, totalCount] = await this.userRepository.findAndCount({\n        select: ['id', 'username', 'nickName', 'email', 'phoneNumber', 'isFrozen', 'headPic', 'createTime'],\n        skip: skipCount,\n        take: pageSize,\n        where: condition\n    });\n\n    return {\n        users,\n        totalCount\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"和之前的区别就是多了个 where 条件。"}),"\n",(0,i.jsx)(n.p,{children:"根据 username、nickName、email 搜索的时候，使用模糊查询。"}),"\n",(0,i.jsx)(n.p,{children:"测试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"当我传 nickName 包含“里”的时候，服务端查询到数据只有一条。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"传入 nickName 包含 “光” 的时候，返回两条数据。"}),"\n",(0,i.jsx)(n.p,{children:"这样，搜索就完成了。"}),"\n",(0,i.jsxs)(n.p,{children:["代码在",(0,i.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"这节我们实现了冻结用户和用户列表接口。"}),"\n",(0,i.jsx)(n.p,{children:"我们通过自定义 exception filter，catch 了 HTTPException，返回了自定义格式的响应，统一了响应格式。"}),"\n",(0,i.jsx)(n.p,{children:"冻结用户接口比较简单，就是修改 users 表的一个字段。"}),"\n",(0,i.jsx)(n.p,{children:"用户列表支持了分页查询和模糊搜索："}),"\n",(0,i.jsx)(n.p,{children:"分页查询就是根据 (pageNo -1) * pageSize 计算出从哪里开始，然后取 pageSize 条。"}),"\n",(0,i.jsx)(n.p,{children:"模糊搜索就是通过 like 来匹配。"}),"\n",(0,i.jsx)(n.p,{children:"此外，ParseIntPipe 我们自定义了错误格式，还使用了 DefaultValuePipe 设置了默认值。"}),"\n",(0,i.jsx)(n.p,{children:"至此，用户模块的所有接口都写完了，下节我们用 swagger 来生成接口文档。"})]})}function V(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(D,{...e})}):D(e)}let O=V;V.__RSPRESS_PAGE_META={},V.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F114.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E8%AE%A2%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97--%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8%E5%92%8C%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"114. 会议室预订系统：用户管理模块--用户列表和分页查询",headingTitle:"114. 会议室预订系统：用户管理模块--用户列表和分页查询",frontmatter:{}}}}]);