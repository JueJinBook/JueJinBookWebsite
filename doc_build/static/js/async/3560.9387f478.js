"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["3560"],{515125:function(e,n,r){r.r(n),r.d(n,{default:()=>R});var s=r(552676),c=r(740453);let t=r.p+"static/image/38a9ecf573f0f75216a9eec67c190cb9.0924373b.webp",d=r.p+"static/image/6fdd6c616c9032e1b6f91cb1c38bf057.0e3dd3d1.webp",i=r.p+"static/image/fee65579d9140818db2d99aebe4e2d07.f1ee0c92.webp",l=r.p+"static/image/8a122d2b21fba66cb0cbcfbf108b8aa8.ee4008f3.webp",a=r.p+"static/image/01f93f5c0b71fa4b278eec4906ce6afb.329214f6.webp",o=r.p+"static/image/f53ce69f6feb840ffed904135d3872e5.4cd67644.webp",f=r.p+"static/image/583a8c5081e876c3304f880efcbf70c4.d800d9c4.webp",h=r.p+"static/image/e65ce02fba8d556eb0d6d54ddc0096ad.0a551944.webp",x=r.p+"static/image/fe5de9e5202b398c711c9a8abbd9b0f6.d077d460.webp",j=r.p+"static/image/87b795ee466b28e73d181a2b17bbe353.24578361.webp",u=r.p+"static/image/1d07b234bd8534e01a6a440ad3cd04ff.6704f8d0.webp";function p(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",h3:"h3",code:"code",pre:"pre",img:"img",blockquote:"blockquote",h4:"h4",ul:"ul",li:"li"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"7基础篇-多功能-ref",children:["7.基础篇-多功能 Ref",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7基础篇-多功能-ref",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"一-前言",children:["一 前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一-前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于 Ref 理解与使用，一些同学可能还停留在用 Ref 获取真实 DOM 元素和获取类组件实例层面上，但实际 ref 除了这两项功能之外，在使用上还有很多小技巧。本章节，我们就一起深入研究一下 React Ref，探索 React Ref 的奥秘。"}),"\n",(0,s.jsx)(n.p,{children:"通过本章节的阅读，你将收获 Ref 的基本使用和进阶用法，明白 React 内部如何处理Ref，以及 Ref 的原理。"}),"\n",(0,s.jsxs)(n.h2,{id:"二-ref基本概念和使用",children:["二 ref基本概念和使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二-ref基本概念和使用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["对于 Ref ，我认为应该分成两个部分去分析，第一个部分是 ",(0,s.jsx)(n.strong,{children:"Ref 对象的创建"}),"，第二个部分是 ",(0,s.jsx)(n.strong,{children:"React 本身对Ref的处理"}),"。两者不要混为一谈，所谓 Ref 对象的创建，就是通过 React.createRef 或者 React.useRef 来创建一个 Ref 原始对象。而 React 对 Ref 处理，主要指的是对于标签中 ref 属性，React 是如何处理以及 React 转发 Ref 。下面来仔细介绍一下。"]}),"\n",(0,s.jsxs)(n.h3,{id:"ref对象创建",children:["Ref对象创建",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ref对象创建",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"什么是 ref 对象"}),"，所谓 ref 对象就是用 ",(0,s.jsx)(n.code,{children:"createRef"})," 或者 ",(0,s.jsx)(n.code,{children:"useRef"})," 创建出来的对象，一个标准的 ref 对象应该是如下的样子："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"{\n    current:null , // current指向ref对象获取到的实际内容，可以是dom元素，组件实例，或者其它。\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"React 提供两种方法创建 Ref 对象，"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"①类组件React.createRef"})}),"\n",(0,s.jsx)(n.p,{children:"第一种方式通过 React.createRef 创建一个 ref 对象。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class Index extends React.Component{\n    constructor(props){\n       super(props)\n       this.currentDom = React.createRef(null)\n    }\n    componentDidMount(){\n        console.log(this.currentDom)\n    }\n    render= () => <div ref={ this.currentDom } >ref对象模式获取元素或组件</div>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"打印"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:"ref.jpg"})}),"\n",(0,s.jsx)(n.p,{children:"React.createRef 的底层逻辑很简单。下面一起来看一下："}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"react/src/ReactCreateRef.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export function createRef() {\n  const refObject = {\n    current: null,\n  }\n  return refObject;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"createRef 只做了一件事，就是创建了一个对象，对象上的 current 属性，用于保存通过 ref 获取的 DOM 元素，组件实例等。 createRef 一般用于类组件创建 Ref 对象，可以将 Ref 对象绑定在类组件实例上，这样更方便后续操作 Ref。"}),"\n",(0,s.jsx)(n.p,{children:"注意：不要在函数组件中使用 createRef，否则会造成 Ref 对象内容丢失等情况。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"②函数组件 useRef"})}),"\n",(0,s.jsx)(n.p,{children:"第二种方式就是函数组件创建 Ref ，可以用 hooks 中的 useRef 来达到同样的效果。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default function Index(){\n    const currentDom = React.useRef(null)\n    React.useEffect(()=>{\n        console.log( currentDom.current ) // div\n    },[])\n    return  <div ref={ currentDom } >ref对象模式获取元素或组件</div>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"useRef 底层逻辑是和 createRef 差不多，就是 ref 保存位置不相同，类组件有一个实例 instance 能够维护像 ref 这种信息，但是由于函数组件每次更新都是一次新的开始，所有变量重新声明，所以 useRef 不能像 createRef 把 ref 对象直接暴露出去，如果这样每一次函数组件执行就会重新声明 Ref，此时 ref 就会随着函数组件执行被重置，这就解释了在函数组件中为什么不能用 createRef 的原因。"}),"\n",(0,s.jsx)(n.p,{children:"为了解决这个问题，hooks 和函数组件对应的 fiber 对象建立起关联，将 useRef 产生的 ref 对象挂到函数组件对应的 fiber 上，函数组件每次执行，只要组件不被销毁，函数组件对应的 fiber 对象一直存在，所以 ref 等信息就会被保存下来。对于 hooks 原理，后续章节会有对应的介绍。"}),"\n",(0,s.jsxs)(n.h3,{id:"react对ref属性的处理-标记ref",children:["React对Ref属性的处理-标记ref",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#react对ref属性的处理-标记ref",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上面中重点介绍了 Ref 对象的创建，接下来一起分析一下 React 对于 ref 标签属性的处理逻辑。"}),"\n",(0,s.jsxs)(n.p,{children:["首先明确一个问题是 ",(0,s.jsx)(n.strong,{children:"DOM 元素"}),"和",(0,s.jsx)(n.strong,{children:"组件实例"})," 必须用 ref 对象获取吗？答案是否定的，React 类组件提供了多种方法获取 ",(0,s.jsx)(n.strong,{children:"DOM 元素"}),"和",(0,s.jsx)(n.strong,{children:"组件实例"}),"，说白了就是 React 对标签里面 ref 属性的处理逻辑多样化。"]}),"\n",(0,s.jsxs)(n.h4,{id:"类组件获取-ref-三种方式",children:["类组件获取 Ref 三种方式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类组件获取-ref-三种方式",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"① Ref属性是一个字符串。"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'/* 类组件 */\nclass Children extends Component{  \n    render=()=><div>hello,world</div>\n}\n/* TODO:  Ref属性是一个字符串 */\nexport default class Index extends React.Component{\n    componentDidMount(){\n       console.log(this.refs)\n    }\n    render=()=> <div>\n        <div ref="currentDom"  >字符串模式获取元素或组件</div>\n        <Children ref="currentComInstance"  />\n    </div>\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"打印"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"ref1.jpg"})}),"\n",(0,s.jsx)(n.p,{children:"如上面代码片段，用一个字符串 ref 标记一个 DOM 元素，一个类组件(函数组件没有实例，不能被 Ref 标记)。React 在底层逻辑，会判断类型，如果是 DOM 元素，会把真实 DOM 绑定在组件 this.refs (组件实例下的 refs )属性上，如果是类组件，会把子组件的实例绑定在 this.refs 上。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"② Ref 属性是一个函数。"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class Children extends React.Component{  \n    render=()=><div>hello,world</div>\n}\n/* TODO: Ref属性是一个函数 */\nexport default class Index extends React.Component{\n    currentDom = null\n    currentComponentInstance = null\n    componentDidMount(){\n        console.log(this.currentDom)\n        console.log(this.currentComponentInstance)\n    }\n    render=()=> <div>\n        <div ref={(node)=> this.currentDom = node }  >Ref模式获取元素或组件</div>\n        <Children ref={(node) => this.currentComponentInstance = node  }  />\n    </div>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"打印"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"ref2.jpg"})}),"\n",(0,s.jsxs)(n.p,{children:["如上代码片段，当用一个函数来标记 Ref 的时候，将作为 callback 形式，等到真实 DOM 创建阶段，执行 callback ，获取的 DOM 元素或组件实例，将以回调函数第一个参数形式传入，所以可以像上述代码片段中，用组件实例下的属性 ",(0,s.jsx)(n.code,{children:"currentDom"}),"和 ",(0,s.jsx)(n.code,{children:"currentComponentInstance"})," 来接收真实 DOM 和组件实例。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"③ Ref属性是一个ref对象。"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"第三种方式就是上述通过 ref 对象方式获取。上面已经介绍了，这里就不多说了，直接看下面。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class Children extends React.Component{  \n    render=()=><div>hello,world</div>\n}\nexport default class Index extends React.Component{\n    currentDom = React.createRef(null)\n    currentComponentInstance = React.createRef(null)\n    componentDidMount(){\n        console.log(this.currentDom)\n        console.log(this.currentComponentInstance)\n    }\n    render=()=> <div>\n         <div ref={ this.currentDom }  >Ref对象模式获取元素或组件</div>\n        <Children ref={ this.currentComponentInstance }  />\n   </div>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"打印"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"ref3.jpg"})}),"\n",(0,s.jsx)(n.p,{children:"总结: 大家请记住三种获取 ref 的方式。"}),"\n",(0,s.jsxs)(n.h2,{id:"三-ref高阶用法",children:["三 ref高阶用法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三-ref高阶用法",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"通过上述主要介绍了 ref 的基本用法，除了上述功能之外，ref 派生出一些其他的高级用法，能够解决一些特殊场景下的问题，这些用法可以使项目中写的 React 更加灵活多变。"}),"\n",(0,s.jsxs)(n.h3,{id:"1-forwardref-转发-ref",children:["1 forwardRef 转发 Ref",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-forwardref-转发-ref",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"forwardRef 的初衷就是解决 ref 不能跨层级捕获和传递的问题。 forwardRef 接受了父级元素标记的 ref 信息，并把它转发下去，使得子组件可以通过 props 来接受到上一层级或者是更上层级的ref，大家可能对我这句话不是很理解，不过没关系，下面来从具体场景中分析 forwardRef 的真正用途。"}),"\n",(0,s.jsxs)(n.h4,{id:"-场景一跨层级获取",children:["① 场景一：跨层级获取",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-场景一跨层级获取",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"比如想要通过标记子组件 ref ，来获取孙组件的某一 DOM 元素，或者是组件实例。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"场景：想要在 GrandFather 组件通过标记 ref ，来获取孙组件 Son 的组件实例。"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 孙组件\nfunction Son (props){\n    const { grandRef } = props\n    return <div>\n        <div> i am alien </div>\n        <span ref={grandRef} >这个是想要获取元素</span>\n    </div>\n}\n// 父组件\nclass Father extends React.Component{\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return <div>\n            <Son grandRef={this.props.grandRef}  />\n        </div>\n    }\n}\nconst NewFather = React.forwardRef((props,ref)=> <Father grandRef={ref}  {...props} />)\n// 爷组件\nclass GrandFather extends React.Component{\n    constructor(props){\n        super(props)\n    }\n    node = null \n    componentDidMount(){\n        console.log(this.node) // span #text 这个是想要获取元素\n    }\n    render(){\n        return <div>\n            <NewFather ref={(node)=> this.node = node } />\n        </div>\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"效果"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:"forwaedRef.jpg"})}),"\n",(0,s.jsx)(n.p,{children:"上述所示，forwardRef 把 ref 变成了可以通过 props 传递和转发。"}),"\n",(0,s.jsxs)(n.h4,{id:"-场景二合并转发ref",children:["② 场景二:合并转发ref",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-场景二合并转发ref",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"通过 forwardRef 转发的 ref 不要理解为只能用来直接获取组件实例，DOM 元素，也可以用来传递合并之后的自定义的 ref ，可能这么说，有些同学没有明白，不过不要紧，下面我举一个例子。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"场景：想通过Home绑定ref，来获取子组件Index的实例index，dom元素button，以及孙组件Form的实例"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 表单组件\nclass Form extends React.Component{\n    render(){\n       return <div>{...}</div>\n    }\n}\n// index 组件\nclass Index extends React.Component{ \n    componentDidMount(){\n        const { forwardRef } = this.props\n        forwardRef.current={\n            form:this.form,      // 给form组件实例 ，绑定给 ref form属性 \n            index:this,          // 给index组件实例 ，绑定给 ref index属性 \n            button:this.button,  // 给button dom 元素，绑定给 ref button属性 \n        }\n    }\n    form = null\n    button = null\n    render(){\n        return <div   > \n          <button ref={(button)=> this.button = button }  >点击</button>\n          <Form  ref={(form) => this.form = form }  />  \n      </div>\n    }\n}\nconst ForwardRefIndex = React.forwardRef(( props,ref )=><Index  {...props} forwardRef={ref}  />)\n// home 组件\nexport default function Home(){\n    const ref = useRef(null)\n     useEffect(()=>{\n         console.log(ref.current)\n     },[])\n    return <ForwardRefIndex ref={ref} />\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"效果"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"ref4.jpg"})}),"\n",(0,s.jsx)(n.p,{children:"如上代码所示，流程主要分为几个方面："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"1 通过 useRef 创建一个 ref 对象，通过 forwardRef 将当前 ref 对象传递给子组件。"}),"\n",(0,s.jsx)(n.li,{children:"2 向 Home 组件传递的 ref 对象上，绑定 form 孙组件实例，index 子组件实例，和 button DOM 元素。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"forwardRef"})," 让 ref 可以通过 props 传递，那么如果用 ",(0,s.jsx)(n.strong,{children:"ref 对象"}),"标记的 ref ，那么 ref 对象就可以通过 props 的形式，提供给子孙组件消费，当然子孙组件也可以改变 ref 对象里面的属性，或者像如上代码中赋予新的属性，这种 forwardref  +  ref 模式一定程度上打破了 React 单向数据流动的原则。当然绑定在 ref 对象上的属性，不限于组件实例或者 DOM 元素，也可以是属性值或方法。"]}),"\n",(0,s.jsxs)(n.h4,{id:"-场景三高阶组件转发",children:["③ 场景三：高阶组件转发",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-场景三高阶组件转发",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"如果通过高阶组件包裹一个原始类组件，就会产生一个问题，如果高阶组件 HOC 没有处理 ref ，那么由于高阶组件本身会返回一个新组件，所以当使用 HOC 包装后组件的时候，标记的 ref 会指向 HOC 返回的组件，而并不是 HOC 包裹的原始类组件，为了解决这个问题，forwardRef 可以对 HOC 做一层处理。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function HOC(Component){\n  class Wrap extends React.Component{\n     render(){\n        const { forwardedRef ,...otherprops  } = this.props\n        return <Component ref={forwardedRef}  {...otherprops}  />\n     }\n  }\n  return  React.forwardRef((props,ref)=> <Wrap forwardedRef={ref} {...props} /> ) \n}\nclass Index extends React.Component{\n  render(){\n    return <div>hello,world</div>\n  }\n}\nconst HocIndex =  HOC(Index)\nexport default ()=>{\n  const node = useRef(null)\n  useEffect(()=>{\n    console.log(node.current)  /* Index 组件实例  */ \n  },[])\n  return <div><HocIndex ref={node}  /></div>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"经过 forwardRef 处理后的 HOC ，就可以正常访问到 Index 组件实例了。"}),"\n",(0,s.jsxs)(n.h3,{id:"2-ref实现组件通信",children:["2 ref实现组件通信",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-ref实现组件通信",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["如果有种场景不想通过父组件 render 改变 props 的方式，来触发子组件的更新，也就是子组件通过 state 单独管理数据层，针对这种情况父组件可以通过 ref 模式标记子组件实例，从而操纵子组件方法，这种情况通常发生在一些",(0,s.jsx)(n.strong,{children:"数据层托管"}),"的组件上，比如 ",(0,s.jsx)(n.code,{children:"<Form/>"})," 表单，经典案例可以参考 antd 里面的 form 表单，暴露出对外的 ",(0,s.jsx)(n.code,{children:"resetFields"})," ， ",(0,s.jsx)(n.code,{children:"setFieldsValue"})," 等接口，可以通过表单实例调用这些 API 。"]}),"\n",(0,s.jsxs)(n.h4,{id:"-类组件-ref",children:["① 类组件 ref",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-类组件-ref",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于类组件可以通过 ref 直接获取组件实例，实现组件通信。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'/* 子组件 */\nclass Son extends React.PureComponent{\n    state={\n       fatherMes:\'\',\n       sonMes:\'\'\n    }\n    fatherSay=(fatherMes)=> this.setState({ fatherMes  }) /* 提供给父组件的API */\n    render(){\n        const { fatherMes, sonMes } = this.state\n        return <div className="sonbox" >\n            <div className="title" >子组件</div>\n            <p>父组件对我说：{ fatherMes }</p>\n            <div className="label" >对父组件说</div> <input  onChange={(e)=>this.setState({ sonMes:e.target.value })}   className="input"  /> \n            <button className="searchbtn" onClick={ ()=> this.props.toFather(sonMes) }  >to father</button>\n        </div>\n    }\n}\n/* 父组件 */\nexport default function Father(){\n    const [ sonMes , setSonMes ] = React.useState(\'\') \n    const sonInstance = React.useRef(null) /* 用来获取子组件实例 */\n    const [ fatherMes , setFatherMes ] = React.useState(\'\')\n    const toSon =()=> sonInstance.current.fatherSay(fatherMes) /* 调用子组件实例方法，改变子组件state */\n    return <div className="box" >\n        <div className="title" >父组件</div>\n        <p>子组件对我说：{ sonMes }</p>\n        <div className="label" >对子组件说</div> <input onChange={ (e) => setFatherMes(e.target.value) }  className="input"  /> \n        <button className="searchbtn"  onClick={toSon}  >to son</button>\n        <Son ref={sonInstance} toFather={setSonMes} />\n    </div>\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"流程分析："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"1 子组件暴露方法 fatherSay 供父组件使用，父组件通过调用方法可以设置子组件展示内容。"}),"\n",(0,s.jsx)(n.li,{children:"2 父组件提供给子组件 toFather，子组件调用，改变父组件展示内容，实现父 <-> 子 双向通信。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"效果"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"ref5.gif"})}),"\n",(0,s.jsxs)(n.h4,{id:"-函数组件-forwardref--useimperativehandle",children:["② 函数组件 forwardRef + useImperativeHandle",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-函数组件-forwardref--useimperativehandle",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于函数组件，本身是没有实例的，但是 React Hooks 提供了，useImperativeHandle 一方面第一个参数接受父组件传递的 ref 对象，另一方面第二个参数是一个函数，函数返回值，作为 ref 对象获取的内容。一起看一下 useImperativeHandle 的基本使用。"}),"\n",(0,s.jsx)(n.p,{children:"useImperativeHandle 接受三个参数："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"第一个参数 ref : 接受 forWardRef 传递过来的 ref 。"}),"\n",(0,s.jsx)(n.li,{children:"第二个参数 createHandle ：处理函数，返回值作为暴露给父组件的 ref 对象。"}),"\n",(0,s.jsx)(n.li,{children:"第三个参数 deps :依赖项 deps，依赖项更改形成新的 ref 对象。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"forwardRef + useImperativeHandle 可以完全让函数组件也能流畅的使用 Ref 通信。其原理图如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"流程图如下所示"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"ref6.jpg"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 子组件\nfunction Son (props,ref) {\n    const inputRef = useRef(null)\n    const [ inputValue , setInputValue ] = useState('')\n    useImperativeHandle(ref,()=>{\n       const handleRefs = {\n           onFocus(){              /* 声明方法用于聚焦input框 */\n              inputRef.current.focus()\n           },\n           onChangeValue(value){   /* 声明方法用于改变input的值 */\n               setInputValue(value)\n           }\n       }\n       return handleRefs\n    },[])\n    return <div>\n        <input placeholder=\"请输入内容\"  ref={inputRef}  value={inputValue} />\n    </div>\n}\n\nconst ForwarSon = forwardRef(Son)\n// 父组件\nclass Index extends React.Component{\n    cur = null\n    handerClick(){\n       const { onFocus , onChangeValue } =this.cur\n       onFocus() // 让子组件的输入框获取焦点\n       onChangeValue('let us learn React!') // 让子组件input  \n    }\n    render(){\n        return <div style={{ marginTop:'50px' }} >\n            <ForwarSon ref={cur => (this.cur = cur)} />\n            <button onClick={this.handerClick.bind(this)} >操控子组件</button>\n        </div>\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"效果图"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"useImperativeHandle.gif"})}),"\n",(0,s.jsx)(n.p,{children:"流程分析："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"父组件用 ref 标记子组件，由于子组件 Son 是函数组件没有实例，所以用 forwardRef 转发 ref。"}),"\n",(0,s.jsx)(n.li,{children:"子组件 Son 用 useImperativeHandle 接收父组件 ref，将让 input 聚焦的方法 onFocus 和 改变 input 输入框的值的方法 onChangeValue 传递给 ref 。"}),"\n",(0,s.jsx)(n.li,{children:"父组件可以通过调用 ref 下的 onFocus 和 onChangeValue 控制子组件中 input 赋值和聚焦。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-函数组件缓存数据",children:["3 函数组件缓存数据",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-函数组件缓存数据",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"函数组件每一次 render ，函数上下文会重新执行，那么有一种情况就是，在执行一些事件方法改变数据或者保存新数据的时候，有没有必要更新视图，有没有必要把数据放到 state 中。如果视图层更新不依赖想要改变的数据，那么 state 改变带来的更新效果就是多余的。这时候更新无疑是一种性能上的浪费。"}),"\n",(0,s.jsx)(n.p,{children:"这种情况下，useRef 就派上用场了，上面讲到过，useRef 可以创建出一个 ref 原始对象，只要组件没有销毁，ref 对象就一直存在，那么完全可以把一些不依赖于视图更新的数据储存到 ref 对象中。这样做的好处有两个："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"第一个能够直接修改数据，不会造成函数组件冗余的更新作用。"}),"\n",(0,s.jsxs)(n.li,{children:["第二个 useRef 保存数据，如果有 useEffect ，useMemo 引用 ref 对象中的数据，无须将 ref 对象添加成 dep 依赖项，因为 useRef 始终指向一个内存空间，",(0,s.jsx)(n.strong,{children:"所以这样一点好处是可以随时访问到变化后的值。"})]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"应用场景 demo"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const toLearn = [ { type: 1 , mes:'let us learn React' } , { type:2,mes:'let us learn Vue3.0' }  ]\nexport default function Index({ id }){\n    const typeInfo = React.useRef(toLearn[0])\n    const changeType = (info)=>{\n        typeInfo.current = info /* typeInfo 的改变，不需要视图变化 */\n    }\n    useEffect(()=>{\n       if(typeInfo.current.type===1){\n           /* ... */\n       }\n    },[ id ]) /* 无须将 typeInfo 添加依赖项  */\n    return <div>\n        {\n            toLearn.map(item=> <button key={item.type}  onClick={ changeType.bind(null,item) } >{ item.mes }</button> )\n        }\n    </div>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"设计思路："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"用一个 useRef 保存 type 的信息，type 改变不需要视图变化。"}),"\n",(0,s.jsx)(n.li,{children:"按钮切换直接改变 useRef 内容。"}),"\n",(0,s.jsx)(n.li,{children:"useEffect 里面可以直接访问到改变后的 typeInfo 的内容，不需要添加依赖项。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"四-ref-原理揭秘",children:["四 ref 原理揭秘",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#四-ref-原理揭秘",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于 Ref 标签引用，React 是如何处理的呢？ 接下来先来看看一段 demo 代码 （称之为 DemoRef ，请大家记住，下文中还会提及此 demo 代码片段 ） ："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default class Index extends React.Component{\n    state={ num:0 }\n    node = null\n    render(){\n        return <div >\n            <div ref={(node)=>{\n               this.node = node\n               console.log('此时的参数是什么：', this.node )\n            }}  >ref元素节点</div>\n            <button onClick={()=> this.setState({ num: this.state.num + 1  }) } >点击</button>\n        </div>\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["用回调函数方式处理 Ref ，",(0,s.jsx)(n.strong,{children:"如果点击一次按钮，会打印几次 console.log ？"})," 来打印一下试试？"]}),"\n",(0,s.jsx)(n.p,{children:"效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"ref7.gif"})}),"\n",(0,s.jsx)(n.p,{children:"第一次打印为 null ，第二次才是 div ，为什么会这样呢？ 这样的意义又是什么呢？"}),"\n",(0,s.jsxs)(n.h3,{id:"ref-执行时机和处理逻辑",children:["ref 执行时机和处理逻辑",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ref-执行时机和处理逻辑",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在上一节生命周期，提到了一次更新的两个阶段- render 阶段和 commit 阶段，后面的 fiber 章节会详细介绍两个阶段。对于整个 Ref 的处理，都是在 commit 阶段发生的。之前了解过 commit 阶段会进行真正的 Dom 操作，此时 ref 就是用来获取真实的 DOM 以及组件实例的，所以需要 commit 阶段处理。"}),"\n",(0,s.jsxs)(n.p,{children:["但是对于 Ref 处理函数，React 底层用两个方法处理：",(0,s.jsx)(n.strong,{children:"commitDetachRef"}),"  和 ",(0,s.jsx)(n.strong,{children:"commitAttachRef"})," ，上述两次 console.log 一次为 null，一次为div 就是分别调用了上述的方法。"]}),"\n",(0,s.jsx)(n.p,{children:"这两次正正好好，一次在 DOM 更新之前，一次在 DOM 更新之后。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"第一阶段：一次更新中，在 commit 的 mutation 阶段, 执行commitDetachRef，commitDetachRef 会清空之前ref值，使其重置为 null。\n源码先来看一下。"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"react-reconciler/src/ReactFiberCommitWork.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') { /* function 和 字符串获取方式。 */\n      currentRef(null); \n    } else {   /* Ref对象获取方式 */\n      currentRef.current = null;\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"第二阶段：DOM 更新阶段，这个阶段会根据不同的 effect 标签，真实的操作 DOM 。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"第三阶段：layout 阶段，在更新真实元素节点之后，此时需要更新 ref 。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"react-reconciler/src/ReactFiberCommitWork.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent: //元素节点 获取元素\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:  // 类组件直接使用实例\n        instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      ref(instanceToUse);  //* function 和 字符串获取方式。 */\n    } else {\n      ref.current = instanceToUse; /* ref对象方式 */\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:['这一阶段，主要判断 ref 获取的是组件还是 DOM 元素标签，如果 DOM 元素，就会获取更新之后最新的 DOM 元素。上面流程中讲了三种获取 ref 的方式。\n如果是字符串 ref="node" 或是 函数式 ',(0,s.jsx)(n.code,{children:"ref={(node)=> this.node = node }"})," 会执行 ref 函数，重置新的 ref 。"]}),"\n",(0,s.jsx)(n.p,{children:"如果是 ref 对象方式。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"node = React.createRef()\n<div ref={ node } ></div>\n"})}),"\n",(0,s.jsx)(n.p,{children:"会更新 ref 对象的 current 属性。达到更新 ref 对象的目的。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"｜--------问与答---------｜"}),"\n问： 上面很多同学可能会产生疑问，为什么 ",(0,s.jsx)(n.code,{children:'ref="node"'})," 字符串，最后会按照函数方式处理呢。"]}),"\n",(0,s.jsx)(n.p,{children:"答： 因为当 ref 属性是一个字符串的时候，React 会自动绑定一个函数，用来处理 ref 逻辑。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"react-reconciler/src/ReactChildFiber.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const ref = function(value) {\n    let refs = inst.refs;\n    if (refs === emptyRefsObject) {\n        refs = inst.refs = {};\n    }\n    if (value === null) {\n        delete refs[stringRef];\n    } else {\n        refs[stringRef] = value;\n    }\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:'所以当这样绑定ref="node"，会被绑定在组件实例的refs属性下面。比如'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'<div ref="node" ></div>\n'})}),"\n",(0,s.jsx)(n.p,{children:"ref 函数 在 commitAttachRef 中最终会这么处理："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"ref(<div>) \n等于 inst.refs.node = <div>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"｜-------end---------｜"})}),"\n",(0,s.jsxs)(n.h3,{id:"ref-的处理特性",children:["Ref 的处理特性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ref-的处理特性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["接下来看一下 ref 的一些特性，首先来看一下，上述没有提及的一个问题，React 被 ref 标记的 fiber，那么每一次 fiber 更新都会调用 ",(0,s.jsx)(n.strong,{children:"commitDetachRef"}),"  和 ",(0,s.jsx)(n.strong,{children:"commitAttachRef"})," 更新 Ref 吗 ？"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"答案是否定的，只有在 ref 更新的时候，才会调用如上方法更新 ref ，究其原因还要从如上两个方法的执行时期说起"})}),"\n",(0,s.jsxs)(n.h4,{id:"更新-ref",children:["更新 ref",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#更新-ref",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 commit 阶段 commitDetachRef 和 commitAttachRef 是在什么条件下被执行的呢 ？ 来一起看一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"commitDetachRef"})," 调用时机"]})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"react-reconciler/src/ReactFiberWorkLoop.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function commitMutationEffects(){\n     if (effectTag & Ref) {\n      const current = nextEffect.alternate;\n      if (current !== null) {\n        commitDetachRef(current);\n      }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"commitAttachRef"})," 调用时机"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function commitLayoutEffects(){\n     if (effectTag & Ref) {\n      commitAttachRef(nextEffect);\n    }\n}\n\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["从上可以清晰的看到只有含有 ",(0,s.jsx)(n.code,{children:"Ref"})," tag 的时候，才会执行更新 ref，那么是每一次更新都会打 ",(0,s.jsx)(n.code,{children:"Ref"})," tag 吗？ 跟着我的思路往下看，什么时候标记的 Ref 。"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"react-reconciler/src/ReactFiberBeginWork.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||      // 初始化的时候\n    (current !== null && current.ref !== ref)  // ref 指向发生改变\n  ) {\n    workInProgress.effectTag |= Ref;\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["首先 ",(0,s.jsx)(n.code,{children:"markRef"})," 方法执行在两种情况下："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"第一种就是类组件的更新过程中。"}),"\n",(0,s.jsxs)(n.li,{children:["第二种就是更新 ",(0,s.jsx)(n.code,{children:"HostComponent"})," 的时候，什么是 HostComponent 就不必多说了，比如 ",(0,s.jsx)(n.code,{children:"<div />"})," 等元素。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"markRef"})," 会在以下两种情况下给 effectTag 标记 Ref，只有标记了 Ref tag 才会有后续的 ",(0,s.jsx)(n.code,{children:"commitAttachRef"})," 和 ",(0,s.jsx)(n.code,{children:"commitDetachRef"})," 流程。（ current 为当前调和的 fiber 节点 ）"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["第一种",(0,s.jsx)(n.code,{children:" current === null && ref !== null"}),"：就是在 fiber 初始化的时候，第一次 ref 处理的时候，是一定要标记 Ref 的。"]}),"\n",(0,s.jsxs)(n.li,{children:["第二种",(0,s.jsx)(n.code,{children:" current !== null && current.ref !== ref"}),"：就是 fiber 更新的时候，但是 ref 对象的指向变了。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["只有在 Ref tag 存在的时候才会更新 ref ，那么回到最初的 ",(0,s.jsx)(n.strong,{children:"DemoRef"})," 上来，为什么每一次按钮，都会打印 ref ，那么也就是 ref 的回调函数执行了，ref 更新了。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<div ref={(node)=>{\n               this.node = node\n               console.log('此时的参数是什么：', this.node )\n}}  >ref元素节点</div>\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["如上很简单，每一次更新的时候，都给 ref 赋值了新的函数，那么 ",(0,s.jsx)(n.code,{children:"markRef"})," 中就会判断成 ",(0,s.jsx)(n.code,{children:"current.ref !== ref"}),"，所以就会重新打 Ref 标签，那么在 commit 阶段，就会更新 ref 执行 ref 回调函数了。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["如果给 ",(0,s.jsx)(n.strong,{children:"DemoRef"})," 做如下修改："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default class Index extends React.Component{\n    state={ num:0 }\n    node = null\n    getDom= (node)=>{\n        this.node = node\n        console.log('此时的参数是什么：', this.node )\n     }\n    render(){\n        return <div >\n            <div ref={this.getDom}>ref元素节点</div>\n            <button onClick={()=> this.setState({ num: this.state.num + 1  })} >点击</button>\n        </div>\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["这个时候，在点击按钮更新的时候，由于此时 ref 指向相同的函数 ",(0,s.jsx)(n.code,{children:"getDom"})," ，所以就不会打 Ref 标签，不会更新 ref 逻辑，直观上的体现就是 ",(0,s.jsx)(n.code,{children:"getDom"})," 函数不会再执行。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"卸载-ref",children:["卸载 ref",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#卸载-ref",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上述讲了 ref 更新阶段的特点，接下来分析一下当组件或者元素卸载的时候，ref 的处理逻辑是怎么样的。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"react-reconciler/src/ReactFiberCommitWork.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"this.state.isShow && <div ref={()=>this.node = node} >元素节点</div>\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["如上，在一次更新的时候，改变 ",(0,s.jsx)(n.code,{children:"isShow"})," 属性，使之由 ",(0,s.jsx)(n.code,{children:"true"})," 变成了 ",(0,s.jsx)(n.code,{children:"false"}),"， 那么 ",(0,s.jsx)(n.code,{children:"div"})," 元素会被卸载，那么 ref 会怎么处理呢？"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["被卸载的 fiber 会被打成 ",(0,s.jsx)(n.code,{children:"Deletion"})," effect tag ，然后在 commit 阶段会进行 commitDeletion 流程。对于有 ref 标记的 ClassComponent （类组件） 和 HostComponent （元素），会统一走 ",(0,s.jsx)(n.code,{children:"safelyDetachRef"})," 流程，这个方法就是用来卸载 ref。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"react-reconciler/src/ReactFiberCommitWork.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function safelyDetachRef(current) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {  // 函数式 ｜ 字符串\n        ref(null)\n    } else {\n      ref.current = null;  // ref 对象\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["对于字符串 ",(0,s.jsx)(n.code,{children:'ref="dom"'})," 和函数类型 ",(0,s.jsx)(n.code,{children:"ref={(node)=> this.node = node }"})," 的 ref，会执行传入 null 置空 ref 。"]}),"\n",(0,s.jsx)(n.li,{children:"对于 ref 对象类型，会清空 ref 对象上的 current 属性。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"借此完成卸载 ref 流程。"}),"\n",(0,s.jsxs)(n.h3,{id:"逻辑流程图",children:["逻辑流程图",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#逻辑流程图",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"ref7.jpg"})}),"\n",(0,s.jsxs)(n.h2,{id:"五-总结",children:["五 总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#五-总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节学习了如下知识。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"明白了 Ref 对象的二种创建方式，以及三种获取 ref 方法。"}),"\n",(0,s.jsx)(n.li,{children:"详细介绍 forwardRef 用法。"}),"\n",(0,s.jsx)(n.li,{children:"ref 组件通信-函数组件和类组件两种方式。"}),"\n",(0,s.jsx)(n.li,{children:"useRef 缓存数据。"}),"\n",(0,s.jsx)(n.li,{children:"Ref 的处理逻辑原理"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"下一节，我们一起走进 React context 的世界。"})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}let R=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["React%20%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F7.%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%A4%9A%E5%8A%9F%E8%83%BD%20Ref.md"]={toc:[{text:"一 前言",id:"一-前言",depth:2},{text:"二 ref基本概念和使用",id:"二-ref基本概念和使用",depth:2},{text:"Ref对象创建",id:"ref对象创建",depth:3},{text:"React对Ref属性的处理-标记ref",id:"react对ref属性的处理-标记ref",depth:3},{text:"类组件获取 Ref 三种方式",id:"类组件获取-ref-三种方式",depth:4},{text:"三 ref高阶用法",id:"三-ref高阶用法",depth:2},{text:"1 forwardRef 转发 Ref",id:"1-forwardref-转发-ref",depth:3},{text:"① 场景一：跨层级获取",id:"-场景一跨层级获取",depth:4},{text:"② 场景二:合并转发ref",id:"-场景二合并转发ref",depth:4},{text:"③ 场景三：高阶组件转发",id:"-场景三高阶组件转发",depth:4},{text:"2 ref实现组件通信",id:"2-ref实现组件通信",depth:3},{text:"① 类组件 ref",id:"-类组件-ref",depth:4},{text:"② 函数组件 forwardRef + useImperativeHandle",id:"-函数组件-forwardref--useimperativehandle",depth:4},{text:"3 函数组件缓存数据",id:"3-函数组件缓存数据",depth:3},{text:"四 ref 原理揭秘",id:"四-ref-原理揭秘",depth:2},{text:"ref 执行时机和处理逻辑",id:"ref-执行时机和处理逻辑",depth:3},{text:"Ref 的处理特性",id:"ref-的处理特性",depth:3},{text:"更新 ref",id:"更新-ref",depth:4},{text:"卸载 ref",id:"卸载-ref",depth:4},{text:"逻辑流程图",id:"逻辑流程图",depth:3},{text:"五 总结",id:"五-总结",depth:2}],title:"7.基础篇-多功能 Ref",headingTitle:"7.基础篇-多功能 Ref",frontmatter:{}}}}]);