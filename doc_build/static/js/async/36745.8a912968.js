"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["36745"],{413004:function(e,n,i){i.r(n),i.d(n,{default:()=>K});var c=i(552676),r=i(740453);let d=i.p+"static/image/6921cc274a2959e6a81c8bfa2855726f.1add49e0.gif",s=i.p+"static/image/8d207d2ef4f519e4a4ea0757b75cab49.e9f22f6d.gif",a=i.p+"static/image/3e38ff1fb9775503bf1d3ca790920ac0.75b052fb.gif",l=i.p+"static/image/a6de2dee97b40cdc8a4a3aafc389588b.2b7dcef5.gif",t=i.p+"static/image/8b2116bc0ae64a4e5a3ffaf0e2e50a61.c5dbb65c.gif",h=i.p+"static/image/4f37328cd4d83995e38af48701e3bc7b.e2937141.gif",o=i.p+"static/image/7f206024a58a5ca3ab806b3662cd2b07.a6d0dda4.gif",x=i.p+"static/image/302c359a987b90b9d9b1ac3dd36f3153.fdde12e8.webp",j=i.p+"static/image/ba5f54b60d3c9ed826a723356f47b89c.c01b3aa4.webp",p=i.p+"static/image/f6cbd3f0a04140363635c35582c7faba.ed6d4dc1.webp",g=i.p+"static/image/971e124383b244bc8fe06bbc49e81f3b.585fb96e.gif",m=i.p+"static/image/a85cad1fdc8fe6b13b3209839621436b.f3d6e4d0.gif",f=i.p+"static/image/1dd18cb00987d06313bf95ea1a36caf4.95ae5466.gif",b=i.p+"static/image/1ea5fe21173661794aaba35ba2f07be6.1bae79dc.gif",u=i.p+"static/image/4e28b7337c0cf58faf67e69fb22e9e8e.1b49c2ba.gif",w=i.p+"static/image/c157d5be53156d62f16e0185e1cb0256.3949e5a7.gif",S=i.p+"static/image/34f741569d2fe7aefa192de38741a34b.020b74f9.gif",k=i.p+"static/image/076940ab39b97b9e5c4326191a3d0aef.a7cc81ef.gif",v=i.p+"static/image/d707c388ac648e6ae99af7ee57046d50.c115f6f9.gif",N=i.p+"static/image/a3f8e7d0f012a5166d592e32aab7964a.0fe84321.gif",C=i.p+"static/image/8d3d789ddb3bc33467d45b932dd10253.656390b3.webp",_=i.p+"static/image/63f6602386b279c5c3dd6e9bfeedefc7.18ca12ea.gif",F=i.p+"static/image/638e25e26fe542ab4a4dd01dbc5fb45c.9c7d4de3.webp",q=i.p+"static/image/fadddf506526dcaac46ed5c5b81bf8a3.46db5077.webp",y=i.p+"static/image/a71737f668d2974a4ea77d2e166814dd.56f0300b.gif",W=i.p+"static/image/ba5ac797df2377528e78eb4c139ef84f.70e93997.gif",L=i.p+"static/image/c3867ef073265deefcc773aba781d24e.106f4ff9.webp",z=i.p+"static/image/7cca1fcf3f36d36154f4691059f34e7d.788cf385.webp",E=i.p+"static/image/bba2523fcaa58652ba387f57dcaadda8.621d7f78.gif",D=i.p+"static/image/64ba6792143d65e4f039d95535821ec6.d4c39cce.gif",G=i.p+"static/image/b1bd9898f57a215fd5abaa37db0fb7b3.aff4f1ce.gif",Y=i.p+"static/image/ecd9398a37be6e67fe93e1393ac561de.91e0fc12.gif",M=i.p+"static/image/e168063545e5f631501438151c51d56d.926beb8d.gif",R=i.p+"static/image/d1dc3551cf933610a4898bc9a885d5d0.956b41e1.gif",A=i.p+"static/image/3c1905963174b62c825aef4bf4ba0022.e349eeba.webp",O=i.p+"static/image/73edb0820953ac949cd423aec8312767.0c70f14c.webp",H=i.p+"static/image/ba8313e4537452c95bd6a77706e8ee55.b3201881.webp",B=i.p+"static/image/de14d188cf525651aa1891cd1708eba4.209d75a3.webp",P=i.p+"static/image/5bc788036775be291a82b1c89e70d156.182a4e8a.webp";function T(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",strong:"strong",img:"img",h3:"h3",blockquote:"blockquote",pre:"pre",ul:"ul",li:"li"},(0,r.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"第38章css宽高比aspect-ratio",children:["第38章—CSS宽高比：aspect-ratio",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第38章css宽高比aspect-ratio",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["\uFEFF",(0,c.jsx)(n.a,{href:"https://s.juejin.cn/ds/iJE2d3Ye/",target:"_blank",rel:"noopener noreferrer",children:"Web 布局"}),"最重要的是灵活性。元素可以根据内容的大小调整尺寸，无论是不同长度的文本还是不同大小的图片，这是一个受欢迎的功能，尤其是在",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7161370789680250917/section/7165845190614188062",target:"_blank",rel:"noopener noreferrer",children:"响应式 Web 设计时代"}),"，因为这种灵活性首先使构建响应式 Web 布局成为可能。但是，有时我们需要具有固定宽高比的元素，例如，如果我们想通过 ",(0,c.jsx)(n.code,{children:"iframe"})," 嵌入视频或",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328/section/7199845663143067660",target:"_blank",rel:"noopener noreferrer",children:"显示裁剪为固定宽高比的图片"}),"，而不管其原始尺寸如何。简单地说，在响应式 Web 布局中，让元素的宽度和高度之间保持一致的比例是至关重要的。在还没有 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性之前，我们一直是使用垂直方向的 ",(0,c.jsx)(n.code,{children:"padding"})," 让元素的宽度和高度保持一致的比例，这是一种 Hack 手段。"]}),"\n",(0,c.jsxs)(n.p,{children:["现在，有了 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性之后，让元素保持一个致的宽高比，就要容易得多了。一旦你理解了宽高以及如何定义它们，你就能够做各种各样的事情，比如创建一个 ",(0,c.jsx)(n.code,{children:"n x n"})," 方形网格布局、响应式调整嵌入式媒体的大小、为图片保留空间等。在这节课中，我将讨论什么是宽高比，我们过去是如何做的，以及新方法是什么以及新方法在使用过程中需要注意的一些事项。"]}),"\n",(0,c.jsx)(n.p,{children:"让我们开始吧！"}),"\n",(0,c.jsxs)(n.h2,{id:"什么是宽高比",children:["什么是宽高比？",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是宽高比",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["简单地说，宽高比就是一个比（或比值）。",(0,c.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Ratio",target:"_blank",rel:"noopener noreferrer",children:"维基百科是这样解释的"}),"：“",(0,c.jsx)(n.strong,{children:"在数学中，比是两个非零数之间的比较关系"}),"”。例如，在一个班级中有 ",(0,c.jsx)(n.code,{children:"21"})," 位男生和 ",(0,c.jsx)(n.code,{children:"9"})," 位女生，那么男生和女生的比例是 ",(0,c.jsx)(n.code,{children:"21"})," 比 ",(0,c.jsx)(n.code,{children:"9"})," ，即 ",(0,c.jsx)(n.code,{children:"21:9"})," 。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:P,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["在 Web 中，宽高比描述了元素宽度和高度之间的关系，并以比例表示，即 ",(0,c.jsx)(n.code,{children:"宽:高"})," 或 ",(0,c.jsx)(n.code,{children:"x:y"})," 。摄影中最常见的宽高比是 ",(0,c.jsx)(n.code,{children:"4:3"})," 和 ",(0,c.jsx)(n.code,{children:"3:2"})," ，而视频的宽高比往往是 ",(0,c.jsx)(n.code,{children:"16:9"})," 。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:B,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["直观地说，宽高比为 ",(0,c.jsx)(n.code,{children:"w:h"})," ，表示元素的宽度为 ",(0,c.jsx)(n.code,{children:"w"})," 个单位，高度为 ",(0,c.jsx)(n.code,{children:"h"})," 个单位。如上图所示，如果图片的宽高比为 ",(0,c.jsx)(n.code,{children:"4:3"})," ，且宽度为 ",(0,c.jsx)(n.code,{children:"400px"})," ，那么我们就知道它的高度必须是 ",(0,c.jsx)(n.code,{children:"300px"})," 。"]}),"\n",(0,c.jsxs)(n.p,{children:["换句话说，我们可以为 ",(0,c.jsx)(n.code,{children:"4:3"})," 的宽高比创建的最小框中一个 ",(0,c.jsx)(n.code,{children:"4 x 3"})," 的框，其中宽度是 ",(0,c.jsx)(n.code,{children:"4"})," 个单位，高度是 ",(0,c.jsx)(n.code,{children:"3"})," 个单位，假设你使用的单位是 ",(0,c.jsx)(n.code,{children:"px"})," 单位，那么 ",(0,c.jsx)(n.code,{children:"4:3"})," 的宽高比创建的最小框是一个 ",(0,c.jsx)(n.code,{children:"4px x 3px"})," 的框。当此框的高度批比例调整为其宽度时，我们将得到一个遵循其宽高比的框："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:H,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["上图中的虚线框都是按 ",(0,c.jsx)(n.code,{children:"4:3"})," 的比例在调整大小。现在，让我们想象一下，如果虚线框中有一图片："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:O,alt:"img"})}),"\n",(0,c.jsx)(n.p,{children:"注意，无论大小如何，图片细节都被保留下来。"}),"\n",(0,c.jsx)(n.p,{children:"简单地说，随着响应式设计的出现，维护宽高比对于 Web 开发人员来说变得越来越重要，特别是当图片尺寸不同，元素大小根据可用空间变化时。"}),"\n",(0,c.jsxs)(n.h2,{id:"实现宽高比的几种-hack",children:["实现宽高比的几种 Hack",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现宽高比的几种-hack",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在还没有 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性之前，Web 开发者需要使用一些 Hack 手段来实现宽高比的效果。"]}),"\n",(0,c.jsxs)(n.h3,{id:"技巧一垂直内距padding-top-或-padding-bottom",children:["技巧一：垂直内距（padding-top 或 padding-bottom）",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#技巧一垂直内距padding-top-或-padding-bottom",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 Web 上伪造宽高比的一个众所周知且长期存在的方法是",(0,c.jsx)(n.strong,{children:"滥用垂直内距"}),"。通过将元素的高度设置为 ",(0,c.jsx)(n.code,{children:"0"})," ，并将 ",(0,c.jsx)(n.code,{children:"padding-top"})," 或 ",(0,c.jsx)(n.code,{children:"padding-bottom"})," 属性的值设置为百分比的值，可以强制元素框具有固定的宽高比。"]}),"\n",(0,c.jsxs)(n.p,{children:["这种方法之所以有效，是因为元素的 ",(0,c.jsx)(n.code,{children:"padding"})," 属性的百分比值是根据元素的宽度来计算的。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["注意，垂直内距（",(0,c.jsx)(n.code,{children:"padding-top"})," 或 ",(0,c.jsx)(n.code,{children:"padding-bottom"}),"）的百分比值计算并不总是根据元素宽度计算。例如，在 Flexbox 布局中，对于 Flex 项目的内距百分比值会根据其高度而不是宽度进行解析。这方面的知识已经超出这节课的范畴，所以不在这里做过多的阐述。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果我们想要一个 ",(0,c.jsx)(n.code,{children:"16:9"})," 的宽高比，我们可以将外部容器的 ",(0,c.jsx)(n.code,{children:"padding-top"})," 或 ",(0,c.jsx)(n.code,{children:"padding-bottom"})," 设置为 ",(0,c.jsx)(n.code,{children:"56.25%"})," （因为 ",(0,c.jsx)(n.code,{children:"100% / 16 * 9 = 56.25%"}),"）："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:A,alt:"img"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:"<aspectratio-container>\x3c!-- padding-top 或 padding-bottom + height:0 --\x3e \n \xa0 \xa0<aspectratio-content></aspectratio-content> \x3c!-- 绝对定位，inset: 0 --\x3e\n</aspectratio-container>\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"aspectratio-container {\n \xa0  position: relative;\n \xa0  width: 100%;\n \xa0  height: 0; /* 这个很重要 */\n \xa0  padding-top: 56.25%; /* 或者 padding-bottom: 56.25%, 100% \xf7 16 \xd7 9 = 56.25% */\n}\n​\naspectratio-content {\n \xa0  position: absolute;\n \xa0  inset: 0;\n \xa0  width: 100%;\n \xa0  height: 100%;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:R,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/qBLbjBw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBLbjBw"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果你讨厌做数学计算，那么可以使用 ",(0,c.jsx)(n.code,{children:"calc()"})," 函数来做数学计算。上面示例中对应的数学计算是 ",(0,c.jsx)(n.code,{children:"100% \xf7 16 \xd7 9"})," ，换成 CSS 的 ",(0,c.jsx)(n.code,{children:"calc()"})," 函数可以是 ",(0,c.jsx)(n.code,{children:"calc(100% / 16 * 9)"})," 或者 ",(0,c.jsx)(n.code,{children:"calc(100% ``/ (16 ``/ 9``)``)"}),"。如果你熟悉 CSS 自定义属性，那么我们还可以用一个自定义属性来定义元素的宽高比："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<aspectratio-container style="--ratio: 16 / 9">\x3c!-- padding-top 或 padding-bottom + height:0 --\x3e \n \xa0 \xa0<aspectratio-content></aspectratio-content> \x3c!-- 绝对定位，inset: 0 --\x3e\n</aspectratio-container>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"aspectratio-container {\n \xa0  position: relative;\n \xa0  width: 100%;\n \xa0  height: 0;\n \xa0  padding-top: calc(100% / (var(--ratio))); /* 或者设置 padding-bottom */\n}\n​\naspectratio-content {\n \xa0  position: absolute;\n \xa0  inset: 0;\n \xa0  width: 100%;\n \xa0  height: 100%;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:M,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/eYbJRdL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYbJRdL"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"技巧二生成内容的垂直内距",children:["技巧二：生成内容的垂直内距",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#技巧二生成内容的垂直内距",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["与第一种技术类似，但又有些不同。技巧二将垂直内距 ",(0,c.jsx)(n.code,{children:"padding-top"})," 或 ",(0,c.jsx)(n.code,{children:"padding-bottom"})," 设置在伪元素 ",(0,c.jsx)(n.code,{children:"::before"})," 或 ",(0,c.jsx)(n.code,{children:"::after"})," 上，通过伪元素来撑开容器的高度。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:'aspectratio-container {\n \xa0 \xa0position: relative;\n \xa0 \xa0\n \xa0  &::after {\n \xa0 \xa0 \xa0 \xa0content:"";\n \xa0 \xa0 \xa0 \xa0display: block;\n \xa0 \xa0 \xa0 \xa0width: 1px;\n \xa0 \xa0 \xa0 \xa0padding-top: calc(100% / (var(--ratio)));\n \xa0 \xa0 \xa0 \xa0margin-right: -1px;\n \xa0 \xa0 \xa0 \xa0position: relative;\n \xa0 \xa0 \xa0 \xa0z-index: -1;\n \xa0  }\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:Y,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/NWexggw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWexggw"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这种技巧有一个缺陷存在，当 ",(0,c.jsx)(n.code,{children:"aspectratio-content"})," 内容的高度大于容器根据宽高比计算出来的高度时，将会以 ",(0,c.jsx)(n.code,{children:"aspectratio-content"})," 内容实际高度为准，并且会撑高其容器的高度，使得整个宽高比换效："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:G,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/bGOERaY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGOERaY"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果希望避免这个现象的出现，则需要像技巧一一样，将 ",(0,c.jsx)(n.code,{children:"aspectratio-content"})," 设置为绝对定位："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:'aspectratio-container {\n \xa0 \xa0position: relative;\n \xa0 \xa0\n \xa0  &::after {\n \xa0 \xa0 \xa0 \xa0content:"";\n \xa0 \xa0 \xa0 \xa0display: block;\n \xa0 \xa0 \xa0 \xa0width: 1px;\n \xa0 \xa0 \xa0 \xa0padding-top: calc(100% / (var(--ratio)));\n \xa0 \xa0 \xa0 \xa0margin-right: -1px;\n \xa0 \xa0 \xa0 \xa0position: relative;\n \xa0 \xa0 \xa0 \xa0z-index: -1;\n \xa0  }\n \xa0 \xa0\n \xa0  & aspectratio-content {\n \xa0 \xa0 \xa0 \xa0position: absolute;\n \xa0 \xa0 \xa0 \xa0inset: 0;\n \xa0 \xa0 \xa0 \xa0width: 100%;\n \xa0 \xa0 \xa0 \xa0height: 100%;\n \xa0  }\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:D,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzdwQvW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzdwQvW"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["容器的宽高比能正常工作，只是内容溢出容器。现在只需要使用 ",(0,c.jsx)(n.code,{children:"overflow"})," 属性来处理溢出的内容即可。有关于内容溢出更详细的介绍可以阅读《",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328/section/7213705145954074679",target:"_blank",rel:"noopener noreferrer",children:"溢出常见问题与排查"}),"》。"]}),"\n",(0,c.jsxs)(n.h2,{id:"为什么宽高比有用",children:["为什么宽高比有用？",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么宽高比有用",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"在 CSS 中，宽高比特别有用，因为它们允许我们响应式地缩放元素（比如图片），以便它们始终保持其尺寸而不会变形。"}),"\n",(0,c.jsx)(n.p,{children:"简单地说，宽高比允放我们改变元素的一个维度（例如，它的宽度），而另一个维度相应地缩放，而我们不必去做那些数学计算。这使得宽高比在创建一个响应式布局时尤其有用。"}),"\n",(0,c.jsxs)(n.p,{children:["我们来看一个使用 RAM 构建的响应式布局，在这个示例中，每张卡片都有一个缩略图，并且每张卡片的缩略图的宽度和高度上相等。假设卡片缩略图的宽高比是 ",(0,c.jsx)(n.code,{children:"16 : 9"})," ，那么卡片缩略图在随着浏览器视窗宽度调整时，它的高度也会根据宽高比自动匹配。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<div class="cards">\n \xa0 \xa0<div class="card">\n \xa0 \xa0 \xa0 \xa0<figure>\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0<img src="card-thumbnail.jpg" alt="card thumbnail" />\n \xa0 \xa0 \xa0 \xa0</figure>\n \xa0 \xa0 \xa0 \xa0<h3>Muffins Recipe</h3>\n \xa0 \xa0 \xa0 \xa0<p>Servings: 3</p> \xa0 \xa0\n \xa0 \xa0</div>\n \xa0 \xa0\x3c!-- 其它 Card --\x3e\n</div>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".cards {\n \xa0  display: grid;\n \xa0  grid-template-columns: repeat(auto-fit, minmax(min(100% - 2rem, 260px), 1fr));\n \xa0  gap: 1rem;\n}\n​\n.card img {\n \xa0  display: block;\n \xa0  max-width: 100%;\n \xa0  height: auto;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:E,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/dywGzMv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dywGzMv"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"它可以很好的工作。但是，由于某些原因，上传的图片尺寸大小不一致，注意第一行中卡片高度都不相等。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:z,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["你可能会想着给图片指定一个固定高度和 ",(0,c.jsx)(n.code,{children:"object-fit:cover"})," 来避免这个现象："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".card img {\n \xa0 \xa0width: 100%;\n \xa0 \xa0\n \xa0 \xa0height: 200px;\n \xa0 \xa0object-fit: cover;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:L,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/wvRMqgY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvRMqgY"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"问题真的解决了？正如上图所示，这种解决方案在响应式布局中，其效果看起来并不太好。在桌面端上，固定高度的图片的左右两侧裁剪过多，而在移动端上，图片左右两侧裁剪又过少。所有这些都是由于使用了固定的高度所引起的。虽然我们可以使用不同媒体查询手动调整图片高度，但这并不是一个实用的解决方案。"}),"\n",(0,c.jsxs)(n.p,{children:["就这个示例而言，卡片缩略图只要在不同的浏览器视口下能保持一致的大小，就可以避免因上传图片尺寸不一致而导致卡片高度不一致的现象。我们只需要给图片设置一个固定的宽高比即可，比如图片的宽高比是 ",(0,c.jsx)(n.code,{children:"21:9"})," ，即 ",(0,c.jsx)(n.code,{children:"--ratio: 21 / 9"})," 。我们可以使用上面提到的 Hack 手段实现它："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".card {\n \xa0 \xa0--ratio: 21 / 9;\n​\n \xa0  & figure {\n \xa0 \xa0 \xa0 \xa0position: relative;\n \xa0 \xa0 \xa0 \xa0width: 100%;\n \xa0 \xa0 \xa0 \xa0height: 0;\n \xa0 \xa0 \xa0 \xa0padding-top: calc(100% / (var(--ratio)));\n \xa0  }\n​\n \xa0  & img {\n \xa0 \xa0 \xa0 \xa0position: absolute;\n \xa0 \xa0 \xa0 \xa0inset: 0;\n \xa0 \xa0 \xa0 \xa0width: 100%;\n \xa0 \xa0 \xa0 \xa0height: 100%;\n \xa0 \xa0 \xa0 \xa0object-fit: cover;\n \xa0  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["通过上面的代码，我们已经定义了卡片缩略图的容器（",(0,c.jsx)(n.code,{children:"figure"}),"）的高度取决于它的宽度，而 ",(0,c.jsx)(n.code,{children:"figure"})," 的宽度又取决于它的父容器 ",(0,c.jsx)(n.code,{children:".card"})," 。由于示例整体布局采用的是 RAM 布局技术，这样一来，",(0,c.jsx)(n.code,{children:".card"})," 的宽度和浏览器视窗宽度是关联在一起的。也就是说，卡片缩略图的容器的宽度会随着浏览器视窗宽度做出响应，从而它的高度也会根据宽高比做出相应的响应。"]}),"\n",(0,c.jsxs)(n.p,{children:["此外，卡片缩略图 ",(0,c.jsx)(n.code,{children:"img"})," 是绝对定位的，它的宽高和其父容器 ",(0,c.jsx)(n.code,{children:"figure"})," 的宽高完全相等，并带有 ",(0,c.jsx)(n.code,{children:"object-fit: cover"})," ，用于上传不同大小的图片："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:W,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzdwxOa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzdwxOa"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"注意，卡片大小如何变化，卡片缩略图的宽高比始终是保持一致的。你也可以尝试着调整缩略图的宽高比："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:y,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/QWzyMXW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWzyMXW"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"虽然图片上使用宽高比是最典型的例子，但宽高比并不是只用于图片上。你还可以使用宽高比来做一些事情，例如："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["创建响应式 ",(0,c.jsx)(n.code,{children:"iframe"})," ，其中它们是父元素宽度的 ",(0,c.jsx)(n.code,{children:"100%"})," ，高度应保持特定的视窗比例"]}),"\n",(0,c.jsx)(n.li,{children:"为图片、视频或嵌入式媒体创建固有的占位符容器，以防止在项目加载和占用空间时重新布局"}),"\n",(0,c.jsx)(n.li,{children:"为交互式数据可视化或 SVG 动画创建统一的响应空间"}),"\n",(0,c.jsx)(n.li,{children:"为卡片或日历等多元素组件创建统一的响应空间"}),"\n",(0,c.jsx)(n.li,{children:"为不同尺寸的多个图片创建统一的响应空间"}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"使用-aspect-ratio-设置宽高比",children:["使用 aspect-ratio 设置宽高比",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-aspect-ratio-设置宽高比",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["众所周知，",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328/section/7199845663143067660",target:"_blank",rel:"noopener noreferrer",children:"Web 上的图片通常具有自然的宽高比"}),"，CSS 布局算法在调整元素大小时会试图保留该宽高比。例如一张 ",(0,c.jsx)(n.code,{children:"800px x 600px"})," 的图片，其自然宽高比是 ",(0,c.jsx)(n.code,{children:"800:600"})," ，即 ",(0,c.jsx)(n.code,{children:"4:3"})," ："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:q,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["假设该图片被用于一个 ",(0,c.jsx)(n.code,{children:"50vw"})," 宽的容器中，那么布局算法会根据图片的自然宽高比来调整图片渲染尺寸："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:F,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["CSS 的 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性允许为未被替换的元素指定此行为，以及更改被替换元素的有效宽高比。简单地说，现在我们可以直接使用 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性为元素框指定宽高比，这个宽高比可以计算出元素的尺寸。换句话说，现在可以不用垂直内距就可以给元素指定宽高比。"]}),"\n",(0,c.jsxs)(n.p,{children:["比如前面的卡片示例，我们可以使用 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性给卡片缩略图的容器指定宽高比（替代以前的 Hack 方法）："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"/* 宽高比 Hack */\nfigure {\n \xa0 \xa0position: relative;\n \xa0 \xa0height: 0;\n \xa0 \xa0padding-top: calc(100% / (var(--ratio)));\n \xa0 \xa0\n \xa0  & img {\n \xa0 \xa0 \xa0 \xa0position: absolute;\n \xa0 \xa0 \xa0 \xa0inset: 0;\n \xa0 \xa0 \xa0 \xa0width: 100%;\n \xa0 \xa0 \xa0 \xa0height: 100%;\n \xa0 \xa0 \xa0 \xa0object-fit: cover;\n \xa0  }\n}\n​\n/* aspect-ratio */\nfigure {\n \xa0 \xa0position: relative;\n \xa0 \xa0aspect-ratio: var(--ratio);\n \xa0 \xa0\n \xa0  & {\n \xa0 \xa0 \xa0 \xa0position: absolute;\n \xa0 \xa0 \xa0 \xa0inset: 0;\n \xa0 \xa0 \xa0 \xa0width: 100%;\n \xa0 \xa0 \xa0 \xa0height: 100%;\n \xa0 \xa0 \xa0 \xa0object-fit: cover;\n \xa0  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:_,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/xxmZMoy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxmZMoy"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["假设卡片的宽度是 ",(0,c.jsx)(n.code,{children:"300px"})," ，当 ",(0,c.jsx)(n.code,{children:"figure"})," 的宽高比是 ",(0,c.jsx)(n.code,{children:"21:9"})," 时，卡片缩略图的高度将是 ",(0,c.jsx)(n.code,{children:"300px \xf7 21 \xd7 9 = 128.57px"})," 。"]}),"\n",(0,c.jsxs)(n.p,{children:["是不是很简单？那么 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 是怎么一回事呢？在阐述 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 之前，我们有几个概念需要先理解。"]}),"\n",(0,c.jsxs)(n.h3,{id:"可替换元素",children:["可替换元素",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可替换元素",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.a,{href:"https://www.w3.org/TR/css-display-3/#replaced-element",target:"_blank",rel:"noopener noreferrer",children:"可替换元素"})})," 指的是内容不在 CSS 格式化模型范围内的元素，例如我们熟悉的 ",(0,c.jsx)(n.code,{children:"<img>"})," 、",(0,c.jsx)(n.code,{children:"<iframe>"})," 和 ",(0,c.jsx)(n.code,{children:"<video>"})," 等元素。HTML 的 ",(0,c.jsx)(n.code,{children:"<img>"})," 元素的内容经常被它的 ",(0,c.jsx)(n.code,{children:"src"})," 属性指定的图片所替代。被替换的元素通常具有固有的尺寸，即固有的宽度、固有的高度和固有的宽高比（它们也被称为内在尺寸，稍后会介绍）。"]}),"\n",(0,c.jsx)(n.p,{children:"CSS 格式化模型并不会考虑可替换元素的内容，不过，它们的内在尺寸被用于各种布局计算。也就是说，它的渲染由 CSS 模型决定。或者简单地说，CSS 布局算法在调整可替换元素大小时会试图保留其固有的宽高比（也就是其内在尺寸的宽高比）。"}),"\n",(0,c.jsxs)(n.h3,{id:"内在尺寸",children:["内在尺寸",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#内在尺寸",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7161370789680250917/section/7161625601713897508",target:"_blank",rel:"noopener noreferrer",children:"内在尺寸"}),"是指内在高度（Intrinsic Height）、内在宽度（Intrinsic Width）和内在宽高比（即内在宽度与内在高度的比率）的集合。对于给定的对旬，每一个都可能存在，也可能不存在。这些内在尺寸代表了对象本身的首选大小（也称自然大小）。也就是说，它们不是使用对象的上下文的函数。CSS 通常没有定义如何找到内在的尺寸。"]}),"\n",(0,c.jsxs)(n.p,{children:["通常情况下，可替换元素具有所有内在尺寸（宽度、高度和宽高比），比如 ",(0,c.jsx)(n.code,{children:"img"})," 元素，而 SVG 图像可能只有一个固有的宽高比，也可能只有固有的宽度和高度。另外，CSS 中的渐变（",(0,c.jsx)(n.code,{children:"<gradient>"}),"）是一个根本没有内在尺寸的对象。"]}),"\n",(0,c.jsxs)(n.p,{children:["其实，对象不会只有两个内在的尺寸，因为任意两个尺寸都会自动定义第三个尺寸。继续拿 ",(0,c.jsx)(n.code,{children:"img"})," 为例："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["当知道 ",(0,c.jsx)(n.code,{children:"img"})," 的内在宽度和内在高度时，就能计算出其内在的宽高比，即 ",(0,c.jsx)(n.code,{children:"width / height"})]}),"\n",(0,c.jsxs)(n.li,{children:["当知道 ",(0,c.jsx)(n.code,{children:"img"})," 的内在宽度和内在的宽高比时，就能计算出其内在的高度，即 ",(0,c.jsx)(n.code,{children:"height = width / ratio"})]}),"\n",(0,c.jsxs)(n.li,{children:["当知道 ",(0,c.jsx)(n.code,{children:"img"})," 的内在高度和内在的宽高比时，就能计算出其内在的宽度，即 ",(0,c.jsx)(n.code,{children:"width = ratio * height"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["上述这些行为一般存在于可替换元素上。对于不可替换的元素，我们就需要使用 CSS 的 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 来实现，往往这些行为对于构建响应式 Web 布局又至关重要。"]}),"\n",(0,c.jsxs)(n.h3,{id:"-值类型",children:[" 值类型",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-值类型",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<ratio>"})," 是 CSS 值类型之一，它被称为比值（或比率值），表示两个数值的比值，例如我们这节课所说的宽高比，即 ",(0,c.jsx)(n.code,{children:"w:h"})," 。其语法规则如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"<ratio> = <number [0,∞]> [ / <number [0,∞]> ]?\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<ratio>"})," 中的第二个 ",(0,c.jsx)(n.code,{children:"<number>"})," 是一个可选值，如果省略，那么它的值为 ",(0,c.jsx)(n.code,{children:"1"})," 。"]}),"\n",(0,c.jsxs)(n.p,{children:["通常情况下，",(0,c.jsx)(n.code,{children:"<ratio>"})," 总是两个 ",(0,c.jsx)(n.code,{children:"<number>"})," 出现，并且两个值之间有 ",(0,c.jsx)(n.code,{children:"/"})," 分隔。它的计算值是提供一对数字值，例如 ",(0,c.jsx)(n.code,{children:"16/9"})," 。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["如果 ",(0,c.jsx)(n.code,{children:"<ratio>"})," 中的任何一个数字值是 ",(0,c.jsx)(n.code,{children:"0"})," 或 ",(0,c.jsx)(n.code,{children:"∞"})," （无穷大），它表示一个退化的比率，它将不会做任何事情"]}),"\n",(0,c.jsxs)(n.li,{children:["如果要比较两个 ",(0,c.jsx)(n.code,{children:"<ratio>"})," ，则先分别对每个 ",(0,c.jsx)(n.code,{children:"<ratio>"})," 的值进行计算， ",(0,c.jsx)(n.code,{children:"<ratio>"})," 的第一个数字值除以第二个数字值，然后比较其计算值。例如 ",(0,c.jsx)(n.code,{children:"3/2"})," 小于 ",(0,c.jsx)(n.code,{children:"2/1"})," ，因为 ",(0,c.jsx)(n.code,{children:"3/2"})," 对应的是 ",(0,c.jsx)(n.code,{children:"3 \xf7 2 = 1.5"}),"，",(0,c.jsx)(n.code,{children:"2/1"})," 对应的是",(0,c.jsx)(n.code,{children:"2 \xf7 1 = 2"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["有了这个概念之后，我们可以接着继续往下聊 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性。"]}),"\n",(0,c.jsxs)(n.h3,{id:"css-的-aspect-ratio",children:["CSS 的 aspect-ratio",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-的-aspect-ratio",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["CSS 的 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 语法规则很简单："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"aspect-ratio: auto || <ratio>\n"})}),"\n",(0,c.jsxs)(n.p,{children:["其默认值为 ",(0,c.jsx)(n.code,{children:"auto"}),"。该属性可以运用于除了内联框和内部 ",(0,c.jsx)(n.code,{children:"ruby"})," 或表格框之外的所有元素。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性为元素框设置一个首选宽高比，将用于计算元素框的大小。其值的含义是："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"auto"})})," ：可替换元素使用该宽高比替代其内在的宽度高比，元素盒子没有首选的宽高比。涉及内在宽度高比的尺寸计算总是与内容框（",(0,c.jsx)(n.code,{children:"content-box"}),"）尺寸一起工作"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"<ratio>"})})," ：元素框的首选宽高比是 ",(0,c.jsx)(n.code,{children:"<ratio>"})," 指定的宽高比率。涉及首选宽高比的尺寸计算与 ",(0,c.jsx)(n.code,{children:"box-sizing"})," 指定的盒子尺寸一起工作"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"auto && <ratio>"})})," ：如果同时指定 ",(0,c.jsx)(n.code,{children:"auto"})," 和 ",(0,c.jsx)(n.code,{children:"<ratio>"}),"，则首选的宽高比是指定的宽高比（即 ",(0,c.jsx)(n.code,{children:"<ratio>"}),"），除非它是具有固有宽高比的可替换元素，在这种情况下使用该宽高比。在所有情况下，涉及此宽高比的大小计算总是与 ",(0,c.jsx)(n.code,{children:"content-box"})," 一起工作"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["我们单独把 ",(0,c.jsx)(n.code,{children:"<ratio>"})," 值拎出来说。比如上面的示例，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 设置的值是 ",(0,c.jsx)(n.code,{children:"<ratio>"})," 类型，即 ",(0,c.jsx)(n.code,{children:"16 / 9"}),"。而 ",(0,c.jsx)(n.code,{children:"<ratio>"})," 类型的值可以是："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["它通常是由 ",(0,c.jsx)(n.code,{children:"/"})," 分隔线分隔的两个数字组成，比如 ",(0,c.jsx)(n.code,{children:"16 / 9"}),"。其中第一个参数指定元素宽度，第二个参数指定元素高度"]}),"\n",(0,c.jsxs)(n.li,{children:["它还允许只传入一个数字，比如 ",(0,c.jsx)(n.code,{children:"1.7777777"}),"（即 ",(0,c.jsx)(n.code,{children:"16 \xf7 9 ≈ 1.7777777"}),"）。在这种情况下，第二个参数默认为 ",(0,c.jsx)(n.code,{children:"1"})]}),"\n",(0,c.jsxs)(n.li,{children:["不允许为这两个数字都传入 ",(0,c.jsx)(n.code,{children:"0"})]}),"\n",(0,c.jsxs)(n.li,{children:["分隔线 ",(0,c.jsx)(n.code,{children:"/"})," 前后的空格不是必须的，因此 ",(0,c.jsx)(n.code,{children:"16/9"})," 也是一个有效的 ",(0,c.jsx)(n.code,{children:"<ratio>"})," 值，但这里更建议在 ",(0,c.jsx)(n.code,{children:"/"})," 分隔线前后添加一个空格"]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"css-aspect-ratio-的使用",children:["CSS aspect-ratio 的使用",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-aspect-ratio-的使用",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"在 CSS 中，下面这些属性都可以用来设置元素盒子框的尺寸大小："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:C,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["注意，CSS 的盒模型相关的属性，例如 ",(0,c.jsx)(n.code,{children:"padding"})," 、",(0,c.jsx)(n.code,{children:"border"})," 以及 ",(0,c.jsx)(n.code,{children:"box-sizing"})," 都将会影响元素框的尺寸大小，为了不将问题复杂化，在这里不考虑这些因素，并且将 ",(0,c.jsx)(n.code,{children:"box-sizing"})," 的值默认为 ",(0,c.jsx)(n.code,{children:"border-box"})," 。除此之外，下面的示例中将基于物理尺寸展开，相应的逻辑属性有同样的功能。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["CSS 的 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性也可以用来计算元素框的尺寸。但首先要明确一点的是，",(0,c.jsx)(n.strong,{children:"CSS 的"})," ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"aspect-ratio"})})," ",(0,c.jsx)(n.strong,{children:"属性的使用和元素类型、盒子框类型以及运用场景有着紧密的联系"}),"。我们先从最简单的开始。"]}),"\n",(0,c.jsxs)(n.h3,{id:"aspect-ratio-参与元素框尺寸的计算",children:["aspect-ratio 参与元素框尺寸的计算",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#aspect-ratio-参与元素框尺寸的计算",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性是可以用来计算出元素框尺寸的，即将根据所设置的宽度或高度计算框的尺寸："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["当元素显式设置了宽度 ",(0,c.jsx)(n.code,{children:"width"})," 和宽高比 ",(0,c.jsx)(n.code,{children:"ratio"})," ，那么就可以计算出元素的高度 ",(0,c.jsx)(n.code,{children:"height = width / ratio"})]}),"\n",(0,c.jsxs)(n.li,{children:["当元素显式设置了高度 height 和宽高比 ",(0,c.jsx)(n.code,{children:"ratio"})," ，那么就可以计算出元素的宽度 ",(0,c.jsx)(n.code,{children:"width = height * ratio"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这是因为元素的宽高比 ",(0,c.jsx)(n.code,{children:"ratio"})," 计算公式始终是 ",(0,c.jsx)(n.code,{children:"ratio = width / height"})," 。例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0--ratio: 16 / 9;\n \xa0 \xa0width: 20vw;\n \xa0 \xa0aspect-ratio: var(--ratio);/* height = width / ratio = 20vw / var(--ratio)*/\n}\n​\n.element {\n \xa0 \xa0--ratio: 16 / 9;\n \xa0 \xa0height: 20vh;\n \xa0 \xa0aspect-ratio: var(--ratio); /* width = height * ratio = 20vh * var(--ratio) */\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:N,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/Yzdwbgb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/Yzdwbgb"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"aspect-ratio--width--height--",children:["aspect-ratio + width + height = \uD83D\uDEAB",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#aspect-ratio--width--height--",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["上面的示例告诉我们，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性可以基于指定的宽度或高度来计算元素框的尺寸，但它有一个前提条件，元素的宽度或高度只有一个可以显式设置，另一个应该为 ",(0,c.jsx)(n.code,{children:"auto"})," 。这是因为，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 是一个弱声明，虽然它定义了元素框的宽度和高度之间的比率，但如果元素框的宽度（",(0,c.jsx)(n.code,{children:"width"}),"）和高度（",(0,c.jsx)(n.code,{children:"height"}),"）指定的值是非 ",(0,c.jsx)(n.code,{children:"auto"})," 时，浏览器则会使用显式指定的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 值，并且会忽略 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，元素的宽度和高度可以通过显式指定 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," （或其相对应的逻辑属性） 属性值来设定，或者通过其他方式来指定，我们将在下面看到。"]}),"\n",(0,c.jsx)(n.p,{children:"我们来看一个具体的示例："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"/* 显式指定 aspect-ratio, width 和 height 为 auto （未显式指定） */\n.element {\n \xa0 \xa0--ratio: 16 / 9;\n \xa0 \xa0aspect-ratio: var(--ratio);\n}\n​\n/* 显式指定 aspect-ratio 和 width, height 为 auto（未显式指定），aspect-ratio + width */\n.element {\n \xa0 \xa0--ratio: 16 / 9;\n \xa0 \xa0width: 40vw;\n \xa0 \xa0aspect-ratio: var(--ratio);\n}\n​\n/* 显式指定 aspect-ratio 和 height, width 为 auto (未显式指定)， aspect-ratio + height*/\n.element {\n \xa0 \xa0--ratio: 16 / 9;\n \xa0 \xa0height: 40vh;\n \xa0 \xa0aspect-ratio: var(--ratio);\n}\n​\n/* 显式指定 aspect-ratio、width 和 height ， aspect-ratio + width + height */\n.element {\n \xa0 \xa0--ratio: 16 / 9;\n \xa0 \xa0width: 40vw;\n \xa0 \xa0height: 40vh;\n \xa0 \xa0aspect-ratio: var(--ratio);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/dywGBjY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dywGBjY"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在这个例子中，元素 ",(0,c.jsx)(n.code,{children:".element"})," 显式设置了 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 为 ",(0,c.jsx)(n.code,{children:"16 ``/ 9"})," ："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["当元素的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 都未显式指定具体值时（即 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 的值为 ",(0,c.jsx)(n.code,{children:"auto"}),"），",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 会获取宽度，将其转换为像素，并应用定义的宽高比来计算元素的高度"]}),"\n",(0,c.jsxs)(n.li,{children:["当元素的 ",(0,c.jsx)(n.code,{children:"width"})," 为 ",(0,c.jsx)(n.code,{children:"40vw"})," 且 ",(0,c.jsx)(n.code,{children:"height"})," 为 ",(0,c.jsx)(n.code,{children:"auto"})," 时，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 将会基于指定的宽度值，计算出元素的高度，即 ",(0,c.jsx)(n.code,{children:"height = width \xf7 ratio = 40vw \xf7 16 \xd7 9 = 22.5vw"})]}),"\n",(0,c.jsxs)(n.li,{children:["当元素的 ",(0,c.jsx)(n.code,{children:"width"})," 为 ",(0,c.jsx)(n.code,{children:"auto"})," 且 ",(0,c.jsx)(n.code,{children:"height"})," 为 ",(0,c.jsx)(n.code,{children:"40vh"})," 时，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 将会基于指定的高度值，计算出元素的宽度，即 ",(0,c.jsx)(n.code,{children:"width = height \xd7 ratio = 40vh \xd7 (16 \xf7 9) = 71.11vh"})]}),"\n",(0,c.jsxs)(n.li,{children:["当元素的 ",(0,c.jsx)(n.code,{children:"width"})," 为 ",(0,c.jsx)(n.code,{children:"40vw"})," 且 ",(0,c.jsx)(n.code,{children:"height"})," 为 ",(0,c.jsx)(n.code,{children:"40vh"})," 时（即，",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 显式指定了具体的值），",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 将会被忽略"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["虽然 CSS 的 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 可以基于元素框的宽度（",(0,c.jsx)(n.code,{children:"width"}),"）或高度（",(0,c.jsx)(n.code,{children:"height"}),"），计算出元素框的尺寸，但计算出来的尺寸是一种弱尺寸，它和 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 显式指定为具体值还是有很大差异的。比如下面这个示例，元素框的尺寸是通过 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 计算出来的，但当元素框的内容尺寸超出元素框计算出来的尺寸时，此时元素框的尺寸将会是其内容的尺寸："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/vYvLoor",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYvLoor"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["正如你所看到的，设置宽高比（",(0,c.jsx)(n.code,{children:"aspect-ratio"}),"）会告诉浏览器，这是首选的宽高比。如果元素的内容更大，那么元素盒子框的尺寸就会变大。"]}),"\n",(0,c.jsxs)(n.p,{children:["为了能让元素保持宽高比，你可以将 ",(0,c.jsx)(n.code,{children:"overflow"})," 属性的值设置为非 ",(0,c.jsx)(n.code,{children:"visible"})," ，建议将 ",(0,c.jsx)(n.code,{children:"overflow"})," 设置为 ",(0,c.jsx)(n.code,{children:"auto"})," ，以便在内容较多时能显示滚动条，不至于数据的丢失。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0aspect-ratio: 16 / 9;\n \xa0 \xa0overflow: auto;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzdqVwv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzdqVwv"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["当然，你也可以将 ",(0,c.jsx)(n.code,{children:"min-height"})," 设置为 ",(0,c.jsx)(n.code,{children:"0"})," ，也可以让元素保持宽高比，只不过这样处理将会导致内容溢出元素框："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0aspect-ratio: 16 / 9;\n \xa0 \xa0min-height: 0;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/jOXqmVP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOXqmVP"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"aspect-ratio--min---max---",children:["aspect-ratio + min-* / max-* = ❓",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#aspect-ratio--min---max---",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 CSS 中，我们可以使用 ",(0,c.jsx)(n.code,{children:"min-width"})," 、",(0,c.jsx)(n.code,{children:"max-width"})," 、",(0,c.jsx)(n.code,{children:"min-height"})," 、",(0,c.jsx)(n.code,{children:"max-height"})," 或者它们对应的逻辑属性来限制元素框尺寸大小。同样的，宽高比也遵守这个规则。"]}),"\n",(0,c.jsx)(n.p,{children:"先来看第一个示例："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"/* aspect-ratio + min-height */\n.element {\n \xa0 \xa0aspect-ratio: 16 / 9;\n \xa0 \xa0min-height: 300px;\n}\n​\n/* aspect-ratio + max-height */\n.element {\n \xa0 \xa0aspect-ratio: 16 / 9;\n \xa0 \xa0max-height: 400px;\n}\n​\n/* aspect-ratio + min/max-height */\n.element {\n \xa0 \xa0aspect-ratio: 16 / 9;\n \xa0 \xa0min-height: 300px;\n \xa0 \xa0max-height: 400px;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/oNJxWwd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNJxWwd"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在这个示例中，CSS 的 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 会获取其父元素的宽度，并基于该值计算出元素框尺寸。只不过，代码中添加了 ",(0,c.jsx)(n.code,{children:"min-height"})," 和 ",(0,c.jsx)(n.code,{children:"max-height"})," 对元素框的高度做了一定的限制。元素框的高度始终不会小于 ",(0,c.jsx)(n.code,{children:"min-height"})," 设置的值 ",(0,c.jsx)(n.code,{children:"300px"})," ，也始终不会大于 ",(0,c.jsx)(n.code,{children:"max-height"})," 设置的值 ",(0,c.jsx)(n.code,{children:"400px"})," 。"]}),"\n",(0,c.jsxs)(n.p,{children:["如果你将上面示例换成 ",(0,c.jsx)(n.code,{children:"min-width"})," 和 ",(0,c.jsx)(n.code,{children:"max-width"})," ，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 同样遵循这个规则，计算出来的宽度将会受到相应的限制："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"/* aspect-ratio + min-width */\n.element {\n \xa0 \xa0aspect-ratio: 3 / 4;\n \xa0 \xa0min-width: 300px;\n}\n​\n/* aspect-ratio + max-width */\n.element {\n \xa0 \xa0aspect-ratio: 3 / 4;\n \xa0 \xa0max-width: 400px;\n}\n​\n/* aspect-ratio + min-width + max-width */\n.element {\n \xa0 \xa0aspect-ratio: 3 / 4;\n \xa0 \xa0min-width: 300px;\n \xa0 \xa0max-width: 400px;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/ZEVWKoK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZEVWKoK"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"aspect-ratio--min--max--clamp--",children:["aspect-ratio + min() / max() / clamp() = ❓",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#aspect-ratio--min--max--clamp--",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 CSS 中，我们可能还会使用 ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7241401565653762108",target:"_blank",rel:"noopener noreferrer",children:"CSS 的比较函数"})}),"，即 ",(0,c.jsx)(n.code,{children:"min()"})," 、",(0,c.jsx)(n.code,{children:"max()"})," 或 ",(0,c.jsx)(n.code,{children:"clamp()"})," 来设置元素框的尺寸。例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0width: min(20vw, 200px);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["元素 ",(0,c.jsx)(n.code,{children:".element"})," 的宽度将会取 ",(0,c.jsx)(n.code,{children:"min()"})," 函数中更小的那个值。"]}),"\n",(0,c.jsxs)(n.p,{children:["也就是说，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 有可能和 CSS 的比较函数一起使用。例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".min {\n \xa0 \xa0width: min(50vw, 200px);\n \xa0 \xa0aspect-ratio: 16 / 9;\n}\n​\n.max {\n \xa0 \xa0width: max(50vw, 200px);\n \xa0 \xa0aspect-ratio: 16 / 9;\n}\n​\n.clamp {\n \xa0 \xa0width: clamp(200px, 50vw + 100px, 400px);\n \xa0 \xa0aspect-ratio: 16 / 9;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["在这样的场景中，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 会基于比较函数返回的值计算出相应的尺寸。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLGOXNz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLGOXNz"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["拿示例中的 ",(0,c.jsx)(n.code,{children:"min(50vw, 200px)"})," 为例："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["当浏览器视窗的宽度是 ",(0,c.jsx)(n.code,{children:"1000px"})," 时，",(0,c.jsx)(n.code,{children:"50vw"})," 等于 ",(0,c.jsx)(n.code,{children:"500px"})," ，此时 ",(0,c.jsx)(n.code,{children:"min(50vw, 200px)"})," 函数返回的值是 ",(0,c.jsx)(n.code,{children:"200px"})," （取小的值），那么浏览器会根据 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性计算出元素框的高度，即 ",(0,c.jsx)(n.code,{children:"height = width \xf7 ratio = 200px \xf7 16 \xd7 9 = 112.5px"})]}),"\n",(0,c.jsxs)(n.li,{children:["当浏览器视窗的宽度是 ",(0,c.jsx)(n.code,{children:"400px"})," 时，",(0,c.jsx)(n.code,{children:"50vw"})," 等于 ",(0,c.jsx)(n.code,{children:"200px"})," ，此时 ",(0,c.jsx)(n.code,{children:"min(50vw, 200px)"})," 函数返回的值是 ",(0,c.jsx)(n.code,{children:"200px"})," ，那么浏览器会根据 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性计算出元素框的高度，即 ",(0,c.jsx)(n.code,{children:"height = width \xf7 ratio = 200px \xf7 16 \xd7 9 = 112.5px"})]}),"\n",(0,c.jsxs)(n.li,{children:["当浏览器视窗的宽度是 ",(0,c.jsx)(n.code,{children:"300px"})," 时，",(0,c.jsx)(n.code,{children:"50vw"})," 等于 ",(0,c.jsx)(n.code,{children:"150px"})," ，此时 ",(0,c.jsx)(n.code,{children:"min(50vw, 200px)"})," 函数返回的值是 ",(0,c.jsx)(n.code,{children:"150px"})," （取小的值），那么浏览器会根据 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性计算出元素框的高度，即 ",(0,c.jsx)(n.code,{children:"height = width \xf7 ratio = 150px \xf7 16 \xd7 9 = 84.375px"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"flex-项目上的-aspect-ratio",children:["Flex 项目上的 aspect-ratio",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#flex-项目上的-aspect-ratio",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["由于 Flex 项目尺寸受 ",(0,c.jsx)(n.code,{children:"flex"})," 属性（",(0,c.jsx)(n.code,{children:"flex-basis"})," 、",(0,c.jsx)(n.code,{children:"flex-grow"})," 和 ",(0,c.jsx)(n.code,{children:"flex-shrink"}),"）影响，使得作用于 Flex 项目的 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性也变得更复杂。甚至会让你感觉用于 Flex 项目的 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 不起作用。事实上并非如此。接下来，通过具体的示例来解释，为什么会有这样的错觉。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["为了能更好的理解接下来的内容，你需要对 Flex 项目的尺寸计算有一定的了解。如果你对这方面的知识不太了解，强烈建议你花点时间阅读《",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7161370789680250917/section/7161623797794078750",target:"_blank",rel:"noopener noreferrer",children:"Flexbox 中的计算：通过扩展因子比例来扩展 Flex 项目"}),"》、《",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7161370789680250917/section/7164357320367931399",target:"_blank",rel:"noopener noreferrer",children:"Flexbox 中的计算：通过收缩因子比例收缩 Flex 项目"}),"》和《",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7161370789680250917/section/7161623717074698247",target:"_blank",rel:"noopener noreferrer",children:"Flexbox 布局中的 flex-basis ：谁能决定 Flex 项目的大小？"}),"》。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["假设 Flexbox 容器中包含了四个 Flex 项目，并且显式设置 ",(0,c.jsx)(n.code,{children:"flex: 1 1 25%"})," （即 ",(0,c.jsx)(n.code,{children:"flex-grow: 1"})," 、",(0,c.jsx)(n.code,{children:"flex-shrink: 1"})," 和 ",(0,c.jsx)(n.code,{children:"flex-basis: 25%"}),"），同时给每个 Flex 项目指定不同的宽高比："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<ul class="flexbox">\n \xa0 \xa0<li class="item" style="--ratio: 16 / 9;">16 : 9</li>\n \xa0 \xa0<li class="item" style="--ratio: 4 / 3;">4 : 3</li>\n \xa0 \xa0<li class="item" style="--ratio: 1 / 1;">1 : 1</li>\n \xa0 \xa0<li class="item" style="--ratio: 21 / 9;">21 : 9</li>\n</ul>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".flexbox {\n \xa0  display: flex;\n \xa0  gap: 10px;\n \xa0 \xa0\n \xa0 \xa0& .item {\n \xa0 \xa0 \xa0  flex: 1 1 25%;\n \xa0 \xa0 \xa0  aspect-ratio: var(--ratio);\n \xa0  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["按理说，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 会根据 Flex 项目的宽度（由 ",(0,c.jsx)(n.code,{children:"flex"})," 计算之后的 Flex 项目宽度）计算出 Flex 项目的高度，但实际效果是所有 Flex 项目的高度都是一样，即最高的 Flex 项目决定了同一行中所有 Flex 项目的高度。在我们这个例子中，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 为 ",(0,c.jsx)(n.code,{children:"1:1"})," 的 Flex 项目，计算出来的 Flex 项目是最高的，所以宽高比为 ",(0,c.jsx)(n.code,{children:"16:9"})," 、",(0,c.jsx)(n.code,{children:"4:3"})," 和 ",(0,c.jsx)(n.code,{children:"21:9"})," 的 Flex 项目的宽高比都是 ",(0,c.jsx)(n.code,{children:"1:1"})," ："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/QWzNgYm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWzNgYm"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["造成这种现象是由于 ",(0,c.jsx)(n.code,{children:"align-items: stretch"})," 引起的（",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7161370789680250917/section/7161623670622781471",target:"_blank",rel:"noopener noreferrer",children:"Flexbox 容器的 align-items 默认值为 stretch"}),"）。也就是说，只需将 ",(0,c.jsx)(n.code,{children:"align-items"})," 属性的值设置为非 ",(0,c.jsx)(n.code,{children:"stretch"})," 就能使 Flex 项目的宽高比变得正常："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".flexbox {\n \xa0 \xa0display: flex;\n \xa0 \xa0gap: 10px;\n \xa0 \xa0align-items: flex-start; /* 非 stretch 即可 */\n \xa0 \xa0\n \xa0  & .item {\n \xa0 \xa0 \xa0 \xa0flex: 1 1 25%;\n \xa0 \xa0 \xa0 \xa0aspect-ratio: var(--ratio);\n \xa0  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/ExGKvzN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ExGKvzN"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果出于某种原因，你想只在单个 Flex 项目上不被拉伸，那么你可以给该 Flex 项目设置 ",(0,c.jsx)(n.code,{children:"align-self"})," 属性的值为非 ",(0,c.jsx)(n.code,{children:"stretch"})," ，或者显式设置 Flex 项目的 ",(0,c.jsx)(n.code,{children:"height"})," 的值为 ",(0,c.jsx)(n.code,{children:"min-content"})," 。比如下面这个示例，第一个 Flex 项目设置了 ",(0,c.jsx)(n.code,{children:"align-self"})," 的值为 ",(0,c.jsx)(n.code,{children:"flex-start"})," ，第二个 Flex 项目设置了 ",(0,c.jsx)(n.code,{children:"align-self"})," 的值为 ",(0,c.jsx)(n.code,{children:"center"})," ，第三个 Flex 项目设置了 ",(0,c.jsx)(n.code,{children:"align-self"})," 的值为 ",(0,c.jsx)(n.code,{children:"flex-end"})," ，而第四个 Flex 项目设置了 ",(0,c.jsx)(n.code,{children:"height"})," 为 ",(0,c.jsx)(n.code,{children:"min-content"})," ："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".flexbox {\n \xa0 \xa0display: flex;\n \xa0 \xa0gap: 10px;\n \xa0 \xa0\n \xa0  & .item {\n \xa0 \xa0 \xa0 \xa0flex: 1 1 25%;\n \xa0 \xa0 \xa0 \xa0aspect-ratio: var(--ratio);\n \xa0 \xa0 \xa0 \xa0\n \xa0 \xa0 \xa0  &:nth-child(1) {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0align-self: flex-start;\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa0\n \xa0 \xa0 \xa0  &:nth-child(2) {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0align-self: center;\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa0\n \xa0 \xa0 \xa0  &:nth-child(3) {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0align-self: flex-end;\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa0\n \xa0 \xa0 \xa0  &:nth-child(4) {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0height: min-content;\n \xa0 \xa0 \xa0  }\n \xa0  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/abPNLvW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abPNLvW"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["除此之外，你还可以将 Flex 项目的 ",(0,c.jsx)(n.code,{children:"margin-top"})," 或 ",(0,c.jsx)(n.code,{children:"margin-bottom"})," 以及其逻辑属性 ",(0,c.jsx)(n.code,{children:"magin-block"})," 设置为 ",(0,c.jsx)(n.code,{children:"auto"})," ，也可以使得 Flex 项目保持正常的宽高比："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".flexbox {\n \xa0 \xa0display: flex;\n \xa0 \xa0gap: 10px;\n \xa0 \xa0\n \xa0  & .item {\n \xa0 \xa0 \xa0 \xa0flex: 1 1 25%;\n \xa0 \xa0 \xa0 \xa0aspect-ratio: var(--ratio);\n \xa0 \xa0 \xa0 \xa0\n \xa0 \xa0 \xa0 \xa0margin-block: auto;\n \xa0  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/RwEaLKe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwEaLKe"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"只要满足以下所述这几种情况，Flex 项目的宽高比就能保持正常，即使是 Flex 项目宽度大小不一："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Flexbox 容器的 ",(0,c.jsx)(n.code,{children:"align-items"})," 属性值不是 ",(0,c.jsx)(n.code,{children:"stretch"})," 或 ",(0,c.jsx)(n.code,{children:"normal"})]}),"\n",(0,c.jsxs)(n.li,{children:["Flex 项目的 ",(0,c.jsx)(n.code,{children:"align-self"})," 属性值不是 ",(0,c.jsx)(n.code,{children:"stretch"})," 或 ",(0,c.jsx)(n.code,{children:"normal"})]}),"\n",(0,c.jsxs)(n.li,{children:["Flex 项目的 ",(0,c.jsx)(n.code,{children:"height"})," 属性值是 ",(0,c.jsx)(n.code,{children:"min-content"})]}),"\n",(0,c.jsxs)(n.li,{children:["Flex 项目的 ",(0,c.jsx)(n.code,{children:"margin-top"})," 、",(0,c.jsx)(n.code,{children:"margin-bottom"})," 或 ",(0,c.jsx)(n.code,{children:"margin-block"})," 属性的值为 ",(0,c.jsx)(n.code,{children:"auto"})]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".flexbox {\n \xa0 \xa0display: flex;\n \xa0 \xa0gap: 10px;\n \xa0 \xa0\n \xa0  & .item {\n \xa0 \xa0 \xa0 \xa0flex: var(--grow) 1 0%;\n \xa0 \xa0 \xa0 \xa0align-self: flex-start;\n \xa0 \xa0 \xa0 \xa0aspect-ratio: var(--ratio);\n \xa0  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/abPNLYE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abPNLYE"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["需要注意的是，当 Flex 项目显式指定了 ",(0,c.jsx)(n.code,{children:"height"})," 的值，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 可以让 Flex 项目保持正常的宽高比，但会致使 ",(0,c.jsx)(n.code,{children:"flex"})," 不起任何作用（比如 ",(0,c.jsx)(n.code,{children:"flex:1"})," 失效）。在这种情况之下，只有 Flex 项目显式设置 ",(0,c.jsx)(n.code,{children:"min-width"})," 的值为 ",(0,c.jsx)(n.code,{children:"0"})," ，才能使得 ",(0,c.jsx)(n.code,{children:"flex"})," 起作用。不过这样操作，又会致使 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 失效，Flex 项目的高度始终是 ",(0,c.jsx)(n.code,{children:"height"})," 属性指定的高度："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".flexbox {\n \xa0 \xa0display: flexbox;\n \xa0 \xa0gap: 10px;\n \xa0 \xa0\n \xa0  & .item {\n \xa0 \xa0 \xa0 \xa0height: 150px;\n \xa0 \xa0 \xa0 \xa0aspect-ratio: var(--ratio);\n \xa0 \xa0 \xa0 \xa0\n \xa0 \xa0 \xa0 \xa0flex: var(--flex);\n \xa0  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLGOzwb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLGOzwb"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"grid-项目上的-aspect-ratio",children:["Grid 项目上的 aspect-ratio",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#grid-项目上的-aspect-ratio",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7161370789680250917/section/7161372229123440648",target:"_blank",rel:"noopener noreferrer",children:"CSS Grid"})})," 已经是",(0,c.jsx)(n.a,{href:"https://s.juejin.cn/ds/iee5BpTN/",target:"_blank",rel:"noopener noreferrer",children:"现代 Web 布局"}),"的主流技术之一。和 Flexbox 布局一样，也可以在 Grid 项目上指定宽高比，但和 Flex 项目不同的是，Grid 项目上的 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 可以使其保持正常的宽高比，而且可以基于 Grid 项目的宽度计算出 Grid 项目的高度。例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<ul class="grid">\n    <li class="item" style="--ratio: 16 / 9;">16 : 9</li>\n    <li class="item" style="--ratio: 4 / 3;">4 : 3</li>\n    <li class="item" style="--ratio: 1 / 1;">1 : 1</li>\n    <li class="item" style="--ratio: 21 / 9;">21 : 9</li>\n</ul>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".grid {\n    display: grid;\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n    gap: 10px;\n    \n    & .item {\n        aspect-ratio: var(--ratio);\n    }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLGOPLo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLGOPLo"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"和 Flexbox 布局不同的是，在 Grid 布局中，网格轨道、网格区域以及合并网格单元格都将影响 Grid 项目的宽度。例如："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".grid {\n    display: grid;\n    grid-template-columns: 1fr 2fr 3fr 4fr;\n    gap: 10px;\n    \n    & .item {\n        aspect-ratio: var(--ratio);\n        \n        &:nth-child(1) {\n            grid-column: span 2;\n        }\n        \n        &:nth-child(4) {\n            grid-column: 1 / 4;\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/poqydEW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poqydEW"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"aspect-ratio-用例",children:["aspect-ratio 用例",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#aspect-ratio-用例",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"aspect-ratio"})," 最常见的用例是图片、",(0,c.jsx)(n.code,{children:"iframe"})," 和视频，比如前面所介绍的卡片缩略图。除此之外，它还有一些别的经典用例。"]}),"\n",(0,c.jsxs)(n.h3,{id:"网格中的一致性",children:["网格中的一致性",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#网格中的一致性",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["有一些商业网站或开源库首页，会有赞助商的 Logo 展示。往往我们会使用 CSS Flexbox 或 CSS Grid 来布局，在展示 Logo 图标时，你可能希望它们保持一定的宽高比来展示，那么使用 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 就方便的多了，除此之外，它还能帮助我们更好的处理不同大小 Logo 图标的对齐问题。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<ul class="icons">\n \xa0 \xa0<li class="icon">\n \xa0 \xa0 \xa0 \xa0<img src="icon.png" alt="Logo Name" />\n \xa0 \xa0</li>\n \xa0 \xa0\x3c!-- 其他图标 --\x3e\n</ul>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"body {\n \xa0  --ratio: 1/1;\n}\n​\n.icons {\n \xa0  display: grid;\n \xa0  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n \xa0  gap: 4rem;\n \xa0\n \xa0 \xa0& img {\n \xa0 \xa0 \xa0  aspect-ratio: var(--ratio);\n \xa0 \xa0 \xa0  width: 100%;\n \xa0 \xa0 \xa0  object-fit: contain;\n \xa0  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["代码中的 ",(0,c.jsx)(n.code,{children:"object-fit: contain"})," 主要用于避免图片失真。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/NWeNwMv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWeNwMv"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"防止布局累积移位cls",children:["防止布局累积移位（CLS）",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#防止布局累积移位cls",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"我们在 Web 中总是会引入一些媒体对象，比如图片和视频等。当这些媒体加载完成时，会产生布局偏移。如下图所示："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["这对于 Web 性能来说是昂贵的。这一点，我曾在《",(0,c.jsx)(n.a,{href:"https://s.juejin.cn/ds/ieeQtA7w/",target:"_blank",rel:"noopener noreferrer",children:"防御式 CSS"}),"》的《",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328/section/7199845663143067660",target:"_blank",rel:"noopener noreferrer",children:"响应式图片：防止图片的拉伸和挤压"}),"》也有提到过。"]}),"\n",(0,c.jsxs)(n.p,{children:["我们可以给图片指定一个宽高比，它会创建一个占位符来防止这种布局变化。简单地说，",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 的另一个重要特性是，它可以创建占位符空间，以防止累积布局移位："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"img {\n \xa0 \xa0display: block;\n \xa0 \xa0width: 100%;\n \xa0 \xa0aspect-ratio: 3 / 2 ;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:"img"})}),"\n",(0,c.jsxs)(n.h3,{id:"响应式圆形用户头像",children:["响应式圆形用户头像",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#响应式圆形用户头像",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["以往我们创建一个圆形用户头像总是将用户头像（",(0,c.jsx)(n.code,{children:"img"}),"）的宽度（",(0,c.jsx)(n.code,{children:"width"}),"）和高度（",(0,c.jsx)(n.code,{children:"height"}),"）设置相等的值，例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".avatar {\n \xa0 \xa0--size: 100px;\n \xa0 \xa0width: var(--size);\n \xa0 \xa0height: var(--size);\n \xa0 \xa0border-radius: 50%;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["如今，你只需要指定 ",(0,c.jsx)(n.code,{children:"aspect-ratio"})," 属性的值为 ",(0,c.jsx)(n.code,{children:"1"})," ，那么调整宽度的时候就会自动调整高度，而且宽度和高度始终是相等的："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".avatar {\n \xa0 \xa0--size: 100px;\n \xa0 \xa0width: var(--size);\n \xa0 \xa0aspect-ratio: 1;\n \xa0 \xa0border-radius: 50%;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/OJrNzWQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJrNzWQ"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"小结",children:["小结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"aspect-ratio"})," 是一个非常有用的特性，它使得你能真正的根据元素宽高比来调整元素框尺寸，这在 Web 布局中是非常有用的。"]})]})}function Q(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(T,{...e})}):T(e)}let K=Q;Q.__RSPRESS_PAGE_META={},Q.__RSPRESS_PAGE_META["%E7%8E%B0%E4%BB%A3CSS%2F%E7%AC%AC38%E7%AB%A0%E2%80%94CSS%E5%AE%BD%E9%AB%98%E6%AF%94%EF%BC%9Aaspect-ratio.md"]={toc:[{text:"什么是宽高比？",id:"什么是宽高比",depth:2},{text:"实现宽高比的几种 Hack",id:"实现宽高比的几种-hack",depth:2},{text:"技巧一：垂直内距（padding-top 或 padding-bottom）",id:"技巧一垂直内距padding-top-或-padding-bottom",depth:3},{text:"技巧二：生成内容的垂直内距",id:"技巧二生成内容的垂直内距",depth:3},{text:"为什么宽高比有用？",id:"为什么宽高比有用",depth:2},{text:"使用 aspect-ratio 设置宽高比",id:"使用-aspect-ratio-设置宽高比",depth:2},{text:"可替换元素",id:"可替换元素",depth:3},{text:"内在尺寸",id:"内在尺寸",depth:3},{text:" 值类型",id:"-值类型",depth:3},{text:"CSS 的 aspect-ratio",id:"css-的-aspect-ratio",depth:3},{text:"CSS aspect-ratio 的使用",id:"css-aspect-ratio-的使用",depth:2},{text:"aspect-ratio 参与元素框尺寸的计算",id:"aspect-ratio-参与元素框尺寸的计算",depth:3},{text:"aspect-ratio + width + height = \uD83D\uDEAB",id:"aspect-ratio--width--height--",depth:3},{text:"aspect-ratio + min-* / max-* = ❓",id:"aspect-ratio--min---max---",depth:3},{text:"aspect-ratio + min() / max() / clamp() = ❓",id:"aspect-ratio--min--max--clamp--",depth:3},{text:"Flex 项目上的 aspect-ratio",id:"flex-项目上的-aspect-ratio",depth:3},{text:"Grid 项目上的 aspect-ratio",id:"grid-项目上的-aspect-ratio",depth:3},{text:"aspect-ratio 用例",id:"aspect-ratio-用例",depth:2},{text:"网格中的一致性",id:"网格中的一致性",depth:3},{text:"防止布局累积移位（CLS）",id:"防止布局累积移位cls",depth:3},{text:"响应式圆形用户头像",id:"响应式圆形用户头像",depth:3},{text:"小结",id:"小结",depth:2}],title:"第38章—CSS宽高比：aspect-ratio",headingTitle:"第38章—CSS宽高比：aspect-ratio",frontmatter:{}}}}]);