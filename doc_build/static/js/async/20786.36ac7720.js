"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["20786"],{143762:function(n,e,s){s.r(e),s.d(e,{default:()=>b});var r=s(552676),i=s(740453);let c=s.p+"static/image/f73ba7dec07e7563c3b68639907c8f45.a566e240.webp",d=s.p+"static/image/d473ed6ebbf9c292c92d8e9213e1ad03.bddc50de.webp",l=s.p+"static/image/883798537f6432a92aa6a91c2d2067f0.515f7cdf.webp",o=s.p+"static/image/768614901a3fa6f8ce33b2736bba24ea.4d7f8c30.webp",t=s.p+"static/image/281bc09b3dd9748781306f55a795c2e5.931351b6.webp",a=s.p+"static/image/6a4cc0aa397cf0b31e30cfd669748426.f8aaef9a.webp",h=s.p+"static/image/ec08c4c8a3eaa2574f19e435d0dd35c0.97ddd0ff.webp",p=s.p+"static/image/e24653d57098df2349c0da6efdca3a40.dfdd2316.webp",j=s.p+"static/image/4d7d969906947abdf6f1a0d313c4df32.203db718.webp",x=s.p+"static/image/006d7ffd8230e6624f3a7c7557d6e0c8.d6cd95a6.webp",g=s.p+"static/image/054a8ae700553ffd1295616664646696.cfd75f7f.webp";function m(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ol:"ol",li:"li",h2:"h2",h4:"h4",pre:"pre",code:"code",img:"img",blockquote:"blockquote"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"25ci_cd-实战物料与产物",children:["25.CI_CD 实战：物料与产物",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#25ci_cd-实战物料与产物",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["本章讲述了 ",(0,r.jsx)(e.strong,{children:"CICD"})," 的章节，这一块的内容会与服务端的某些功能打通，同时这些内容对于前端同学来说可能会有点上手的难度，但我们只关注于主流程的实现，具体的流程与细节需要根据不同的实际场景来进行微调。"]}),"\n",(0,r.jsxs)(e.p,{children:["本章的内容会涉及到 ",(0,r.jsx)(e.strong,{children:"Docker"}),"，如果有对 ",(0,r.jsx)(e.strong,{children:"Docker"})," 不熟悉的同学可以参考以下两篇文章："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7147483669299462174",target:"_blank",rel:"noopener noreferrer",children:"前端全栈之路 - 玩转 Docker (基础)"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7160972042757079077",target:"_blank",rel:"noopener noreferrer",children:"前端全栈之路 - 玩转 Docker (Dockerfile)"})}),"\n",(0,r.jsx)(e.p,{children:"整体的内容将分为三块讲述："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"基础组件"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"基础模板"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"搭建产物"})}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"基础组件",children:["基础组件",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基础组件",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["基础组件主要是是打包成 ",(0,r.jsx)(e.strong,{children:"NPM"})," 包或者发布 ",(0,r.jsx)(e.strong,{children:"UND"})," 产物到 ",(0,r.jsx)(e.strong,{children:"CDN"}),"，所以本章我们结合之前的 ",(0,r.jsx)(e.strong,{children:"CICD CLI"})," 来进行项目级别的实战。"]}),"\n",(0,r.jsxs)(e.h4,{id:"构建基础镜像",children:["构建基础镜像",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#构建基础镜像",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["承接之前的 ",(0,r.jsx)(e.strong,{children:"ig-base-cli"}),"，我们需要将它打包成一个基础的 ",(0,r.jsx)(e.strong,{children:"Docker"})," 镜像，然后后期可以使用它来打包其他的产物。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-dockerfile",children:"FROM node:alpine\n\nRUN mkdir -p /home/app/\n\nWORKDIR /home/app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nRUN npm link\n"})}),"\n",(0,r.jsxs)(e.p,{children:["简单解释一下上述的脚本，将工程复制到 ",(0,r.jsx)(e.strong,{children:"docker"})," 镜像中，然后通过 ",(0,r.jsx)(e.code,{children:"npm link"})," 挂载到全局给其他的项目使用，当然你也可以打包成 ",(0,r.jsx)(e.strong,{children:"npm"})," 包，然后提供通过全局安装 ",(0,r.jsx)(e.strong,{children:"npm"})," 包的方式提供服务。"]}),"\n",(0,r.jsxs)(e.p,{children:["预先使用 ",(0,r.jsx)(e.code,{children:"COPY package*.json ./"})," 是借助于 ",(0,r.jsx)(e.strong,{children:"docker"})," 的层叠性质，增加缓存减少构建镜像的时间，在之前的文章中有更详细的解析，这里也不多阐述了。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sh",children:"docker build -f ./Dockerfile -t ig-base-cli:0.0.1 .\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"构建完毕基础镜像之后，我们可以通过如下脚本进入容器查看是否正常挂载到了全局环境。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sh",children:"docker run -it ig-base-cli:0.0.1 /bin/sh\n"})}),"\n",(0,r.jsxs)(e.p,{children:["正常情况下，输入 ",(0,r.jsx)(e.strong,{children:"ig --hlep"})," 的结果如下图所示："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsxs)(e.h4,{id:"构建打包镜像",children:["构建打包镜像",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#构建打包镜像",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["这个步骤可以随便找个项目来测试，不一定用我后续的 ",(0,r.jsx)(e.strong,{children:"demo"}),"，因为 ",(0,r.jsx)(e.strong,{children:"ig-base-cli"})," 有流程编排的功能，所以理论上是可以承接任意的项目，只要按照规则来进行操作即可。"]}),"\n",(0,r.jsxs)(e.p,{children:["我们使用的是一个简单的 ",(0,r.jsx)(e.strong,{children:"vite"})," 项目作为 ",(0,r.jsx)(e.strong,{children:"demo"}),"，首先要在项目根目录下创建 ",(0,r.jsx)(e.code,{children:"ig.config.ts"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["然后修改 ",(0,r.jsx)(e.strong,{children:"flow"})," 的脚本命令:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"export default {\n  flow: {\n    preHook: 'npm i',\n    stages: [\"build\", \"publish\"],\n    build: {\n      preHook: 'echo preHook build',\n      script: 'npm run build'\n    },\n    publish: {\n      script: 'echo publish',\n      doneHook: 'echo upload to oss',\n    },\n    doneHook: 'echo doneHook all',\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["上述是 ",(0,r.jsx)(e.strong,{children:"demo"})," 性质的脚本，",(0,r.jsx)(e.strong,{children:"publish"})," 在实际生产中可以替换为证实上传 ",(0,r.jsx)(e.strong,{children:"oss"})," 或者静态服务器的脚本，如果是 ",(0,r.jsx)(e.strong,{children:"npm"})," 包的话，可以替换为 ",(0,r.jsx)(e.strong,{children:"npm publish"}),"，这是由各个项目自身的性质决定。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["构建打包镜像的 ",(0,r.jsx)(e.strong,{children:"dockerfile"})," 如下所示，其中引用的镜像为上一步骤构建的 ",(0,r.jsx)(e.strong,{children:"ig-base-cli:0.0.1"})," 基础镜像："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-dockerfile",children:'FROM ig-base-cli:0.0.1\n\nRUN mkdir -p /home/work/\n\nWORKDIR /home/work/\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 8080\n\nENTRYPOINT ["ig"]\n\nCMD ["buildFlow"]\n'})}),"\n",(0,r.jsx)(e.p,{children:"接下来我们构建镜像："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sh",children:"docker build -f ./Dockerfile -t ig-build-space:0.0.1 .\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["然后我们直接运行 ",(0,r.jsx)(e.strong,{children:"ig-build-space"})," 镜像："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sh",children:"docker run ig-build-apace:0.0.1\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["如上图所示，正如我们预料的情况一样，",(0,r.jsx)(e.strong,{children:"ig-build-space"})," 按照我们的流程编排的顺序正确执行了每一个步骤。"]}),"\n",(0,r.jsxs)(e.p,{children:["但如果构建镜像都要跟服务强挂钩在通用性的角度来说也算很不合理的，而实际的构建流程已经完全由 ",(0,r.jsx)(e.strong,{children:"ig-flow"})," 接管，所以理论上我们是不需要额外的构建 ",(0,r.jsx)(e.strong,{children:"ig-build-space"})," 镜像。"]}),"\n",(0,r.jsxs)(e.p,{children:["我们只需要启动一个新的 ",(0,r.jsx)(e.strong,{children:"ig-base-cli"})," 的容器接下来将需要构建的工程复制进去，然后剩下的步骤都交给 ",(0,r.jsx)(e.strong,{children:"ig-flow"})," 执行即可："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sh",children:"docker run -it -v /Users/botycookie/test/hello-world:/home/work ig-base-cli:0.0.1 sh -c 'cd /home/work && ig buildFlow && exit'\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"实际的项目路径需要自行调整，这里只是示例。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["但这种也是有一定的缺憾，如图所示，我们并没有借助于 ",(0,r.jsx)(e.strong,{children:"docker"})," 的缓存来解决重复下载依赖更新的问题，所以每次的构建都会走一遍安装依赖的过程，如果想使得构建速度更快的话，则需要重写定制一下 ",(0,r.jsx)(e.strong,{children:"devops"})," 的流程，不过这也是一种空间换时间的路子，如果",(0,r.jsx)(e.strong,{children:"项目过多"}),"、",(0,r.jsx)(e.strong,{children:"资源吃紧"}),"的情况下，不必在意多这一两分钟安装依赖的时间。"]}),"\n",(0,r.jsxs)(e.h2,{id:"基础模板--搭建产物",children:["基础模板 && 搭建产物",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基础模板--搭建产物",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["基础模板与搭建产物其实都是类似的结构，大部分场景都是一份 ",(0,r.jsx)(e.strong,{children:"JSON"})," 格式的数据，所以没有什么太多可以讨论的场景，但除此之外还有一种 ",(0,r.jsx)(e.strong,{children:"ProCode"})," 的产物需要构建，这里我们使用之前提到过的 ",(0,r.jsx)(e.strong,{children:"Nunjucks"})," 来实现。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["正如之前的搭建服务所示，右边的是根据 ",(0,r.jsx)(e.strong,{children:"swagger"})," 提供的 ",(0,r.jsx)(e.strong,{children:"json schema"})," 生成的代码片段，但是这种代码片段如果不经过编译肯定是无法使用的，至少也要在 ",(0,r.jsx)(e.strong,{children:"Html"})," 中引入 ",(0,r.jsx)(e.strong,{children:"React"})," 跟 ",(0,r.jsx)(e.strong,{children:"AntD"})," 等依赖才能使用。"]}),"\n",(0,r.jsx)(e.p,{children:"正式的场景比较复杂，我们后期会逐渐补充上去，下面是一个简单的示例。"}),"\n",(0,r.jsxs)(e.p,{children:["首先，我们创建一个简单的可以直接加载 ",(0,r.jsx)(e.strong,{children:"AntD"})," 跟 ",(0,r.jsx)(e.strong,{children:"React"})," 的页面。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="UTF-8"/>\n    <title>Hello World</title>\n    <script src="https://unpkg.com/react@18/umd/react.development.js"><\/script>\n    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"><\/script>\n    <script crossorigin="anonymous"  src="https://lib.baomitu.com/antd/4.24.2/antd.js"><\/script>\n    <link crossorigin="anonymous"  href="https://lib.baomitu.com/antd/4.24.2/antd.css" rel="stylesheet">\n    \x3c!-- Don\'t use this in production: --\x3e\n    <script src="https://unpkg.com/@babel/standalone/babel.min.js"><\/script>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="text/babel">\n      const onFinish = (values : any) => {\n        console.log(\'Success:\', values);\n      };\n\n      const onFinishFailed = (errorInfo : any) => {\n        console.log(\'Failed:\', errorInfo);\n      };\n      function MyApp() {\n        var Form = antd.Form;\n        var Input = antd.Input;\n        var Checkbox = antd.Checkbox;\n        var Button = antd.Button;\n        return <Form\n                name="basic"\n                labelCol={{ span: 8 }}\n                wrapperCol={{ span: 16 }}\n                style={{ maxWidth: 600 }}\n                initialValues={{ remember: true }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete="off"\n              >\n          <Form.Item\n                    label="Username"\n                    name="username"\n                    rules={\n                [\n                  {\n                    required: true,\n                    message: \'Please input your username!\'\n                  }\n                ]\n              }\n                  >\n            <Input/>\n          </Form.Item>\n          <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n            <Button type="primary" htmlType="submit">\n                      Submit\n                    </Button>\n          </Form.Item>\n        </Form>;\n      }\n\n      const container = document.getElementById(\'root\');\n      const root = ReactDOM.createRoot(container);\n      root.render(<MyApp/>);\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["正常打开的话页面如上所示，如果打不开，可以替换一下 ",(0,r.jsx)(e.strong,{children:"CND"})," 的链接。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["如上所示，我们需要将他转为一个 ",(0,r.jsx)(e.strong,{children:"Nunjucks"})," 的模板，方便我们将之前生成好的 ",(0,r.jsx)(e.strong,{children:"AntD"})," 的数据插入进去。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["模板的数据会做一些简单的压缩，",(0,r.jsx)(e.strong,{children:"Nunjucks"})," 的模板语法的变量替换为 ",(0,r.jsx)(e.code,{children:"{{ pageInfo |safe }}"}),"，所以其他的一些 ",(0,r.jsx)(e.code,{children:"{{}}"})," 的需要自行做一些转移。"]}),"\n",(0,r.jsx)(e.p,{children:"如下就是成功替换了模板之后的页面展示样式："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["这样一个简单的单页面的出码功能即完成了，但仅仅只是一个 ",(0,r.jsx)(e.strong,{children:"demo"})," 级别的，后续还有很多微调的功能需要完善，这就需要老王的设计器配合在一起进行调试，所以这并非是完全体的样式。"]}),"\n",(0,r.jsxs)(e.p,{children:["对应的代码已经上传到 ",(0,r.jsx)(e.a,{href:"https://github.com/Ignition-Space/ignition",target:"_blank",rel:"noopener noreferrer",children:"ignition"})," 项目中，可以查看下。"]}),"\n",(0,r.jsxs)(e.p,{children:["同时产物保存在数据库之外还可以配合 ",(0,r.jsx)(e.strong,{children:"Redis"})," 进行缓存。"]}),"\n",(0,r.jsxs)(e.p,{children:["除了 ",(0,r.jsx)(e.strong,{children:"Redis"})," 之外还可以去了解下 ",(0,r.jsx)(e.strong,{children:"Nacos"}),"，可能前端的同学们不太了解，配合 ",(0,r.jsx)(e.strong,{children:"Nacos"})," 的下发配置的能力，可以提前将生成的文件缓存在本地，提高加载速度。"]}),"\n",(0,r.jsxs)(e.p,{children:["想要了解更多的功能可以参考中文文档：",(0,r.jsx)(e.a,{href:"https://nunjucks.bootcss.com/index.html",target:"_blank",rel:"noopener noreferrer",children:"Nunjucks"})," 。"]}),"\n",(0,r.jsxs)(e.h2,{id:"写在最后",children:["写在最后",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["本文跟前端关系较大的是基础组件的构建，借助了 ",(0,r.jsx)(e.strong,{children:"ig-flow"})," 的能力，使得可以接入多种不同类型的项目，无论是 ",(0,r.jsx)(e.strong,{children:"Vue"}),"、",(0,r.jsx)(e.strong,{children:"React"})," 还是其他类型的项目都可以通过 ",(0,r.jsx)(e.strong,{children:"ig-flow"})," 进行构建。"]}),"\n",(0,r.jsxs)(e.p,{children:["但相对应的其实是把对应的流程编排下放到了各个项目中，除去",(0,r.jsx)(e.strong,{children:"构建以及预构建"}),"的流程之外，可以将发布的流程收拢到 ",(0,r.jsx)(e.strong,{children:"ig-base-cli"})," 中，",(0,r.jsx)(e.strong,{children:"这样即能给与项目构建最大的自定义话也可以约束发布的权限与流程"}),"。"]}),"\n",(0,r.jsx)(e.p,{children:"完全体的项目还在开发中，进度会根据个人的工作强度来进行，如果有自己的想法进行二开的也欢迎一起讨论。"}),"\n",(0,r.jsx)(e.p,{children:"后面也会有专门的直播&录播模块，应该都会尽快上线。"}),"\n",(0,r.jsx)(e.p,{children:"如果你有什么疑问，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function u(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}let b=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F25.CI_CD%20%E5%AE%9E%E6%88%98%EF%BC%9A%E7%89%A9%E6%96%99%E4%B8%8E%E4%BA%A7%E7%89%A9.md"]={toc:[{text:"基础组件",id:"基础组件",depth:2},{text:"构建基础镜像",id:"构建基础镜像",depth:4},{text:"构建打包镜像",id:"构建打包镜像",depth:4},{text:"基础模板 && 搭建产物",id:"基础模板--搭建产物",depth:2},{text:"写在最后",id:"写在最后",depth:2}],title:"25.CI_CD 实战：物料与产物",headingTitle:"25.CI_CD 实战：物料与产物",frontmatter:{}}}}]);