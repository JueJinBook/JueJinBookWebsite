"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["57684"],{527417:function(e,n,s){e.exports=s.p+"static/image/6d5ad58eab7ff0393b10b689af9dadc8.976b6b81.webp"},42913:function(e,n,s){s.r(n),s.d(n,{default:()=>S});var a=s(552676),r=s(740453);let t=s.p+"static/image/5ac8a1db6b804ef7f67b6ac07b725546.bb68daca.webp",c=s.p+"static/image/640de104e30fd6b5e2743f3fa251679d.b814d23f.webp",d=s.p+"static/image/19607396436425c6f93084ad6b5d563e.ead532f2.webp",i=s.p+"static/image/454b9004962e74d89b659156927b5da8.7982a19c.webp",p=s.p+"static/image/0ff3998ce07a2bb70a0efce08025a6b9.2f89eea4.webp",l=s.p+"static/image/e2057debf16c778705aa1593b2ab4b73.a90be77e.webp",o=s.p+"static/image/9cf210e6add52091df4b38a42e2e80e0.d2d8eecd.webp",h=s.p+"static/image/ecb738bb93bd251fb88dfc18c7391b8d.46be95d8.webp",u=s.p+"static/image/80105c95daa6892c8292a4b76d77e9f7.13d62104.webp",j=s.p+"static/image/c1bd3fb39b44204c7e7965c11ee992ed.02d5c3ce.webp",x=s.p+"static/image/d9019ebd4c52edc1536bcb0495ddeb06.075bba68.webp",m=s.p+"static/image/8b80015d9ac50b1680a6742cfe403d6f.fafff136.webp",f=s.p+"static/image/a7fb5fc458b504ca568bccaace059fef.237ad717.webp",g=s.p+"static/image/d5b4ec936fd4a9c1a51caa4c821b7aa0.4cefbc54.webp",b=s.p+"static/image/df747ec6733573d6c0ed420240931555.8dec84bf.webp",w=s.p+"static/image/d920d9189e21d33b8246b100a3051377.b451a612.webp";var E=s(527417);let U=s.p+"static/image/ffb13cf8ba14e749e7c057ab12bd669d.8063fa8b.webp";function v(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"179-聊天室修改密码修改信息",children:["179. 聊天室：修改密码、修改信息",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#179-聊天室修改密码修改信息",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"这节继续实现下修改密码、修改个人信息的接口："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:U,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"对应这两个页面："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:E,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26ce08e936b34f138187ce4a2c520ced~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1208&h=844&s=41235&e=png&b=ffffff",alt:""})}),"\n",(0,a.jsx)(n.p,{children:"不过在修改信息之前，需要先实现查询用户信息的接口，用来回显数据。"}),"\n",(0,a.jsx)(n.p,{children:"在 UserController 添加一个 /user/info 接口："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Get('info')\n@RequireLogin()\nasync info(@UserInfo('userId') userId: number) {\n  return this.userService.findUserDetailById(userId);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"加上 @RequireLogin 装饰，这样 LoginGuard 就会对 /user/info 的请求做登录检查，并把 user 信息放到 request 上。"}),"\n",(0,a.jsx)(n.p,{children:"然后用前面封装的自定义装饰器 @UserInfo 从 reqeust.user 取 userId 注入 handler。"}),"\n",(0,a.jsx)(n.p,{children:"在 UserService  实现 findUserDetailById 方法："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"async findUserDetailById(userId: number) {\n    const user =  await this.prismaService.user.findUnique({\n        where: {\n            id: userId\n        },\n        select: {\n          id: true,\n          username: true,\n          nickName: true,\n          email: true,\n          headPic: true,\n          createTime: true\n        }\n    });\n    return user;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:w,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"登录，拿到 token。"}),"\n",(0,a.jsx)(n.p,{children:"然后带上 token 访问 /user/info"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:b,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"成功拿到了 user 的信息。"}),"\n",(0,a.jsx)(n.p,{children:"然后实现修改密码的接口："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Post('update_password')\nasync updatePassword(@Body() passwordDto: UpdateUserPasswordDto) {\n  console.log(passwordDto);\n  return 'success';\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"创建 src/user/dto/update-user-password.dto.ts"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { IsEmail, IsNotEmpty, MinLength } from \"class-validator\";\n\nexport class UpdateUserPasswordDto {    \n    @IsNotEmpty({\n        message: '密码不能为空'\n    })\n    @MinLength(6, {\n        message: '密码不能少于 6 位'\n    })\n    password: string;\n    \n    @IsNotEmpty({\n        message: '邮箱不能为空'\n    })\n    @IsEmail({}, {\n        message: '不是合法的邮箱格式'\n    })\n    email: string;\n    \n    @IsNotEmpty({\n        message: '用户名不能为空'\n    })\n    username: string;\n    \n    @IsNotEmpty({\n        message: '验证码不能为空'\n    })\n    captcha: string;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"需要传的是用户名、邮箱、密码、验证码。"}),"\n",(0,a.jsx)(n.p,{children:"确认密码在前端和密码对比就行，不需要传到后端。"}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:f,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后实现下具体的更新密码的逻辑："}),"\n",(0,a.jsx)(n.p,{children:"在 UserController 里调用 UserService 的方法："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Post('update_password')\nasync updatePassword(@Body() passwordDto: UpdateUserPasswordDto) {\n    return this.userService.updatePassword(passwordDto);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"UserService 实现具体的逻辑："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"async updatePassword(passwordDto: UpdateUserPasswordDto) {\n  const captcha = await this.redisService.get(`update_password_captcha_${passwordDto.email}`);\n\n  if(!captcha) {\n      throw new HttpException('验证码已失效', HttpStatus.BAD_REQUEST);\n  }\n\n  if(passwordDto.captcha !== captcha) {\n      throw new HttpException('验证码不正确', HttpStatus.BAD_REQUEST);\n  }\n\n  const foundUser = await this.prismaService.user.findUnique({\n    where: {\n        username: passwordDto.username\n    }\n  });\n\n  foundUser.password = passwordDto.password;\n\n  try {\n    await this.prismaService.user.update({\n      where: {\n        id: foundUser.id\n      },\n      data: foundUser\n    });\n    return '密码修改成功';\n  } catch(e) {\n    this.logger.error(e, UserService);\n    return '密码修改失败';\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"先查询 redis 中相对应的验证码，检查通过之后根据 email 查询用户信息，修改密码之后 save。"}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:m,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在 redis 里手动添加 update_password_captcha_邮箱 的 key，值为 111111"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:x,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"半小时过期。"}),"\n",(0,a.jsx)(n.p,{children:"注意，我们现在连的是 db2"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:j,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后再试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:u,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"修改成功。"}),"\n",(0,a.jsx)(n.p,{children:"我们为了开发方便没对密码做加密，可以直观看出来密码修改成功了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后再加上发送邮箱验证码的接口："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Get('update_password/captcha')\nasync updatePasswordCaptcha(@Query('address') address: string) {\n    if(!address) {\n      throw new BadRequestException('邮箱地址不能为空');\n    }\n    const code = Math.random().toString().slice(2,8);\n\n    await this.redisService.set(`update_password_captcha_${address}`, code, 10 * 60);\n\n    await this.emailService.sendMail({\n      to: address,\n      subject: '更改密码验证码',\n      html: `<p>你的更改密码验证码是 ${code}</p>`\n    });\n    return '发送成功';\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后再来写下修改个人信息的接口："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26ce08e936b34f138187ce4a2c520ced~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1208&h=844&s=41235&e=png&b=ffffff",alt:""})}),"\n",(0,a.jsx)(n.p,{children:"回显数据的接口就用 /user/info 这个。"}),"\n",(0,a.jsx)(n.p,{children:"然后加一个 /user/update 接口："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Post('update')\n@RequireLogin()\nasync update(@UserInfo('userId') userId: number, @Body() updateUserDto: UpdateUserDto) {\n  return await this.userService.update(userId, updateUserDto); \n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"创建 src/user/dto/udpate-user.dto.ts"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { IsEmail, IsNotEmpty } from \"class-validator\";\n\nexport class UpdateUserDto {\n\n    headPic: string;\n\n    nickName: string;\n    \n    @IsNotEmpty({\n        message: '邮箱不能为空'\n    })\n    @IsEmail({}, {\n        message: '不是合法的邮箱格式'\n    })\n    email: string;\n    \n    @IsNotEmpty({\n        message: '验证码不能为空'\n    })\n    captcha: string;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"headPic 和 nickName 不用加非空约束，可以不传。"}),"\n",(0,a.jsx)(n.p,{children:"然后在 UserService 实现 update 方法："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"async update(userId: number, updateUserDto: UpdateUserDto) {\n    const captcha = await this.redisService.get(`update_user_captcha_${updateUserDto.email}`);\n\n    if(!captcha) {\n        throw new HttpException('验证码已失效', HttpStatus.BAD_REQUEST);\n    }\n\n    if(updateUserDto.captcha !== captcha) {\n        throw new HttpException('验证码不正确', HttpStatus.BAD_REQUEST);\n    }\n\n    const foundUser = await this.prismaService.user.findUnique({\n      where: {\n        id: userId\n      }\n    });\n\n    if(updateUserDto.nickName) {\n        foundUser.nickName = updateUserDto.nickName;\n    }\n    if(updateUserDto.headPic) {\n        foundUser.headPic = updateUserDto.headPic;\n    }\n\n    try {\n      await this.prismaService.user.update({\n        where: {\n          id: userId\n        },\n        data: foundUser\n      })\n      return '用户信息修改成功';\n    } catch(e) {\n      this.logger.error(e, UserService);\n      return '用户信息修改成功';\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"根据 userId 查询用户，修改信息后 update 到数据库。"}),"\n",(0,a.jsx)(n.p,{children:"这里需要用到验证码，我们加一个发送验证码的接口："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Get('update/captcha')\nasync updateCaptcha(@Query('address') address: string) {\n    if(!address) {\n      throw new BadRequestException('邮箱地址不能为空');\n    }\n    const code = Math.random().toString().slice(2,8);\n\n    await this.redisService.set(`update_user_captcha_${address}`, code, 10 * 60);\n\n    await this.emailService.sendMail({\n      to: address,\n      subject: '更改用户信息验证码',\n      html: `<p>你的验证码是 ${code}</p>`\n    });\n    return '发送成功';\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:"首先拿到验证码："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"登录账号拿到 token："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"带上 token 访问 /user/update 接口："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"更改成功。"}),"\n",(0,a.jsx)(n.p,{children:"查询下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:t,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"确实修改了。"}),"\n",(0,a.jsxs)(n.p,{children:["代码在",(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,a.jsxs)(n.h2,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"这节我们实现了修改密码、修改用户信息的接口。"}),"\n",(0,a.jsx)(n.p,{children:"分别实现了 /user/info 用于回显用户信息，/user/update_password 用于修改密码，/user/update 用于修改用户信息。"}),"\n",(0,a.jsx)(n.p,{children:"以及 /user/update/captcha 和 /user/update_password/captcha 用于发送验证码。"}),"\n",(0,a.jsx)(n.p,{children:"其中 /user/info 和 /user/update 接口需要登录，然后通过之前封装的 @UserInfo 装饰器从 request.user 取用户信息。"}),"\n",(0,a.jsx)(n.p,{children:"至此，用户模块的功能就完成了。"})]})}function _(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(v,{...e})}):v(e)}let S=_;_.__RSPRESS_PAGE_META={},_.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F179.%20%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%9A%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E3%80%81%E4%BF%AE%E6%94%B9%E4%BF%A1%E6%81%AF.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"179. 聊天室：修改密码、修改信息",headingTitle:"179. 聊天室：修改密码、修改信息",frontmatter:{}}}}]);