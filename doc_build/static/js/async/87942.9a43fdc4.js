"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["87942"],{379649:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var s=r(552676),p=r(740453);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",img:"img",strong:"strong",h3:"h3",blockquote:"blockquote",hr:"hr"},(0,p.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"14实战篇-05用-npm-script-实现服务自动化运维",children:["14实战篇 05：用 npm script 实现服务自动化运维",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14实战篇-05用-npm-script-实现服务自动化运维",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"需要事先说明的是，本节部分内容涉及到非前端的话题，比如服务的部署、日志，但会从前端项目管理开始，比如依赖管理、版本管理等。即使对自己定位是纯粹前端开发的同学，也建议阅读下，因为技不压身，了解整个前端项目交付流程中需要考量的点能让我们更有大局观。"}),"\n",(0,s.jsx)(n.p,{children:"通常来说，项目构建完成之后，就成为待发布的版本，因此版本管理需要考虑，甚至做成自动化的，然后，最新的代码需要部署到线上机器才能让所有用户访问到，部署环节涉及到服务的启动、重启、日志管理等需要考虑。"}),"\n",(0,s.jsx)(n.p,{children:"下面我们介绍 npm script 在服务运维时的几个用途："}),"\n",(0,s.jsxs)(n.h2,{id:"使用-npm-script-进行版本管理",children:["使用 npm script 进行版本管理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-npm-script-进行版本管理",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"每次构建完的代码都应该有新的版本号，修改版本号直接使用 npm 内置的 version 自命令即可，如果是简单粗暴的版本管理，可以在 package.json 中添加如下 scripts："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-patch",children:'+    "release:patch": "npm version patch && git push && git push --tags",\n+    "release:minor": "npm version minor && git push && git push --tags",\n+    "release:major": "npm version major && git push && git push --tags",\n     "precommit": "lint-staged",\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这 3 条命令遵循 ",(0,s.jsx)(n.a,{href:"https://semver.org",target:"_blank",rel:"noopener noreferrer",children:"semver"})," 的版本号规范来方便你管理版本，patch 是更新补丁版本，minor 是更新小版本，major 是更新大版本。在必要的时候，可以通过运行 npm run version:patch 来升补丁版本，运行输出如下："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2017/12/18/16066e6e3d85b6cd?w=910&h=943&f=png&s=144886",alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["如果要求所有的版本号不超过 10，即 0.0.9 的下个版本是 0.1.0 而不是 0.0.10，可以编写简单的 shell 脚本来实现（",(0,s.jsx)(n.strong,{children:"注意这样会破坏 semver 的约定"}),"），具体步骤如下："]}),"\n",(0,s.jsxs)(n.p,{children:["首先，在 scripts 目录下新增 bump.sh（",(0,s.jsx)(n.strong,{children:"别忘了文件的可执行权限"}),"：chmod a+x scripts/bump.sh）："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"#!/usr/bin/env bash\n\n# get major/minor/patch version to change\nversion=`cat package.json| grep version | grep -v release | awk -F\\\" '{print $4}'`\ncomponents=($(echo $version | tr '.' '\\n'))\nmajor=${components[0]}\nminor=${components[1]}\npatch=${components[2]}\n\nrelease='patch';\n\n# decide which version to increment\nif [ $patch -ge 9 ]; then\n    if [ $minor -ge 9 ]; then\n        release='major'\n    else\n        release='minor'\n    fi\nelse\n    release='patch'\nfi\n\necho \"major=$major, minor=$minor, patch=$patch, release=$release\"\n\n# upgrade version\nnpm run release:$release\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后，在 package.json 中新增 bump 子命令："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-patch",children:'     "release:major": "npm version major && git push && git push --tags",\n+    "bump": "scripty",\n     "precommit": "lint-staged",\n'})}),"\n",(0,s.jsx)(n.p,{children:"在必要的时候执行 npm run bump，输出示例如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2017/12/18/16066e70eb4a0193?w=1001&h=1143&f=png&s=165735",alt:""})}),"\n",(0,s.jsxs)(n.h2,{id:"使用-npm-script-进行服务进程和日志管理",children:["使用 npm script 进行服务进程和日志管理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-npm-script-进行服务进程和日志管理",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在生产环境的服务进程和日志管理领域，",(0,s.jsx)(n.a,{href:"http://pm2.keymetrics.io",target:"_blank",rel:"noopener noreferrer",children:"pm2"})," 是当之无愧的首选，功能很强大，使用简单，开发环境常用的是 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/nodemon",target:"_blank",rel:"noopener noreferrer",children:"nodemon"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"在我们的项目中使用 npm script 进行服务进程和日志管理的基本步骤如下："}),"\n",(0,s.jsxs)(n.h3,{id:"1-准备-http-服务",children:["1. 准备 http 服务",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-准备-http-服务",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在使用 npm script 作为构建流水线的基础上，我们在项目中引入了 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/express",target:"_blank",rel:"noopener noreferrer",children:"express"})," 和 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/morgan",target:"_blank",rel:"noopener noreferrer",children:"morgan"}),"，并使用如下脚本启动 http 服务器方便用户访问我们的网页（morgan 使用来记录用户的访问日志的）："]}),"\n",(0,s.jsx)(n.p,{children:"先安装依赖："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm i express morgan -D\n# npm install express morgan --save-dev\n# yarn add express morgan -D\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后在根目录下创建文件 server.js，内容如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const express = require('express');\nconst morgan = require('morgan');\n\nconst app = express();\nconst port = process.env.PORT || 8080;\n\napp.use(express.static('./dist'));\napp.use(morgan('combined'));\n\napp.listen(port, err => {\n  if (err) {\n    console.error('server start error', err); // eslint-disable-line\n    process.exit(1);\n  }\n\n  console.log(`server started at port ${port}`);  // eslint-disable-line\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-准备日志目录",children:["2. 准备日志目录",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-准备日志目录",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"为简单起见，我们项目中创建日志存储目录 logs，有些公司可能不会把日志存在项目部署目录下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir logs\ntouch logs/.gitkeep\ngit add logs/.gitkeep\ngit commit -m 'add logs folder'\n"})}),"\n",(0,s.jsx)(n.p,{children:"并且设置该目录为 git 忽略的，再改动 .gitignore："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-patch",children:" dist\n+logs\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TIP#21"}),"：这里加 logs/.gitkeep 空文件的目的是为了能把 logs 目录提交到 git 里面，但是我们故意忽略 logs 目录里面的内容，这是在 git 中提交目录结构而忽略其中内容的常见做法。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-安装和配置-pm2",children:["3. 安装和配置 pm2",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-安装和配置-pm2",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"安装 pm2 作为依赖："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm i pm2 -D\n# npm install pm2 --save-dev\n# yarn add pm2 -D\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后添加服务启动配置到项目根目录下 pm2.json，更多配置项可以参照",(0,s.jsx)(n.a,{href:"http://pm2.keymetrics.io/docs/usage/application-declaration",target:"_blank",rel:"noopener noreferrer",children:"文档"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "apps": [\n    {\n      "name": "npm-script-workflow",\n      "script": "./server.js",\n      "out_file": "./logs/stdout.log",\n      "error_file": "./logs/stderr.log",\n      "log_date_format": "YYYY-MM-DD HH:mm:ss",\n      "instances": 0,\n      "exec_mode": "cluster",\n      "max_memory_restart": "800M",\n      "merge_logs": true,\n      "env": {\n        "NODE_ENV": "production",\n        "PORT": 8080,\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"上面的配置指定了服务脚本为 server.js，日志输出文件路径，日志时间格式，进程数量 = CPU 核数，启动方式为 cluster，以及两个环境变量。"}),"\n",(0,s.jsxs)(n.h3,{id:"4-配置服务部署命令",children:["4. 配置服务部署命令",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-配置服务部署命令",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在没有集成 CI 服务之前，我们的部署命令应该是下面这样的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-patch",children:'     "release:major": "npm version major && git push && git push --tags",\n+    "predeploy": "yarn && npm run build",\n+    "deploy": "pm2 restart pm2.json",\n     "bump": "scripty",\n'})}),"\n",(0,s.jsx)(n.p,{children:"即在部署前需要安装最新的依赖，重新构建，然后使用 pm2 重新启动服务即可，如果你有多台机器跑通1个服务，建议有个集中的 CI 服务器专门负责构建，而部署时就不需要运行 build 了。"}),"\n",(0,s.jsx)(n.p,{children:"每次需要部署服务时只需要运行 npm run deploy 就行了，运行成功输出如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2017/12/18/16066e77ad30626c?w=1146&h=186&f=png&s=42916",alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"5-配置日志查看命令",children:["5. 配置日志查看命令",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-配置日志查看命令",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"至于日志，虽然 pm2 提供了内置的 logs 管理命令，如果某台服务器上启动了多个不同的服务进程，那么 pm2 logs 会展示所有服务的日志，个人建议使用如下命令查看当前服务的日志："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-patch",children:'+    "logs": "tail -f logs/*",\n     "bump": "scripty",\n'})}),"\n",(0,s.jsx)(n.p,{children:"需要查看日志时，直接运行 npm run logs，运行输入如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2017/12/18/16066e7b80b6d828?w=1271&h=354&f=png&s=80687",alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当然如果你有更复杂的日志查看需求，直接用 cat、grep 之类的命令好了。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"到这里，小册的内容基本结束了，接下来的一周，我会准备好视频版教程，在圣诞节的时候放出来给大家。如果你对内容有任何疑问，欢迎留言或者在读者群里面交流"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["本节用到的代码见 ",(0,s.jsx)(n.a,{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/13-use-npm-script-for-devops",target:"_blank",rel:"noopener noreferrer",children:"GitHub"}),"，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 ",(0,s.jsx)(n.code,{children:"13-use-npm-script-for-devops"}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["视频版教程已经录制完毕，下载地址：链接: ",(0,s.jsx)(n.a,{href:"https://pan.baidu.com/s/1gfeZ619",target:"_blank",rel:"noopener noreferrer",children:"https://pan.baidu.com/s/1gfeZ619"})," 密码: xx8j，请享用"]})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"** 对于购买了小册，没有加到读者群里面的同学，可以加我微信：feweekly，备注：掘金小册，我会拉你入群。感谢支持！**"})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,p.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let a=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["%E7%94%A8%20npm%20script%20%E6%89%93%E9%80%A0%E8%B6%85%E6%BA%9C%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%2F14%E5%AE%9E%E6%88%98%E7%AF%87%2005%EF%BC%9A%E7%94%A8%20npm%20script%20%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4.md"]={toc:[{text:"使用 npm script 进行版本管理",id:"使用-npm-script-进行版本管理",depth:2},{text:"使用 npm script 进行服务进程和日志管理",id:"使用-npm-script-进行服务进程和日志管理",depth:2},{text:"1. 准备 http 服务",id:"1-准备-http-服务",depth:3},{text:"2. 准备日志目录",id:"2-准备日志目录",depth:3},{text:"3. 安装和配置 pm2",id:"3-安装和配置-pm2",depth:3},{text:"4. 配置服务部署命令",id:"4-配置服务部署命令",depth:3},{text:"5. 配置日志查看命令",id:"5-配置日志查看命令",depth:3}],title:"14实战篇 05：用 npm script 实现服务自动化运维",headingTitle:"14实战篇 05：用 npm script 实现服务自动化运维",frontmatter:{}}}}]);