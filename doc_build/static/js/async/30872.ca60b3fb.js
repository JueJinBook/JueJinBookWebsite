"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["30872"],{9995:function(e,n,c){c.r(n),c.d(n,{default:()=>p});var s=c(552676),i=c(740453);let r=c.p+"static/image/c0a55e2d6cddd184b607f42e1f56e442.890a28bc.webp",d=c.p+"static/image/17729d4d991461f99558a38a6dfe1da9.25bc1947.webp",l=c.p+"static/image/2d6195e81d84e4fa6a4ae877113c70a2.b5a87182.webp",o=c.p+"static/image/07ed734ca9d80db5b6eb6984fbbbf68d.a6eb4c61.webp",h=c.p+"static/image/93811dc6efd8395761a11af162c24a11.fa20cbbc.webp";function a(e){let n=Object.assign({p:"p",img:"img",h1:"h1",a:"a",code:"code",pre:"pre",h2:"h2",ul:"ul",li:"li"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"在上一节中，我们从开发体验角度讲解了如何优化项目中的 webpack 配置，主要是如何提升 webpack 的构建速度。除了开发体验，输出质量也是在构建过程中很重要的一个性能指标。本篇文章我们带大家一起来看下如何提升 webpack 构建产物的质量。我们的目的主要是减小打包后文件的体积大小、并且可以按需引入、以及压缩混淆代码，提高用户体验。下面是本篇文章的脑图，大家先睹为快。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(n.h1,{id:"14优化-webpack-配置二提升构建产物质量",children:["14.优化 webpack 配置（二）：提升构建产物质量",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14优化-webpack-配置二提升构建产物质量",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在项目中，一般是使用同一套技术栈和公共资源。那么如果每个页面的代码中都有这些公开资源，是不是就会导致资源的浪费呢？在每一个页面下都会加载重复的公共资源，一是会浪费用户的流量，二是不利于项目的性能，造成页面加载缓慢，影响用户体验。"}),"\n",(0,s.jsxs)(n.p,{children:["基本思路就是我们先要确定哪些是我们项目中使用内容长期不会更改的三方库（",(0,s.jsx)(n.code,{children:"react"}),"、",(0,s.jsx)(n.code,{children:"react-dom"})," 等）和我们团队内部自己封装的公共 JS（",(0,s.jsx)(n.code,{children:"util.js"})," 等）。然后将其提取出放入到一个公共文件 ",(0,s.jsx)(n.code,{children:"common.js"})," 中。这样，只要不升级基础库的版本，那么 ",(0,s.jsx)(n.code,{children:"common.js"})," 文件的内容就不会变化，在访问页面的时候，就可以一直使用浏览器缓存中的资源。"]}),"\n",(0,s.jsxs)(n.p,{children:["在了解了提取公共代码的思路之后，我们看下在 ",(0,s.jsx)(n.code,{children:"webpack"})," 中，怎么具体实现。在 ",(0,s.jsx)(n.code,{children:"webpack3"})," 中我们可以使用 ",(0,s.jsx)(n.code,{children:"CommonChunkPlugin"})," 这个插件来提取公共代码。我们希望提取第三方依赖库（这里只写了 ",(0,s.jsx)(n.code,{children:"react"}),"）作为公共代码实现持久缓存，这样配置的话，如果业务代码产生了改动，那么重新构建出来的 ",(0,s.jsx)(n.code,{children:"vendor"})," 包的 ",(0,s.jsx)(n.code,{children:"hash"})," 是不会变化的。可以进行如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"var webpack = require('webpack');\nvar path = require('path');\nmodule.exports = {\n   entry: {\n       main: './index.js',\n       vendor: ['react']\n   },\n   output: {\n       filename: '[chunkhash:8].[name].js',\n       path: path.resolve(__dirname, 'dist')\n   },\n   plugins: [\n       new webpack.optimize.CommonsChunkPlugin({\n           names: ['vendor'],\n           filename: '[name].js'\n       }),\n       new webpack.optimize.CommonsChunkPlugin({\n           name: 'runtime',\n           filename: '[name].js',\n           chunks: ['vendor']\n      }),\n   ]\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"webpack4"})," 中，移除了 ",(0,s.jsx)(n.code,{children:"CommonChunkPlugin"}),"，取而代之的是 ",(0,s.jsx)(n.code,{children:"optimization.splitChunks"})," 和 ",(0,s.jsx)(n.code,{children:"optimization.runtimeChunk"}),"。我们创建一个 ",(0,s.jsx)(n.code,{children:"commons"})," 代码块，其包含了所有被其他入口共享的代码，同时也创建一个 ",(0,s.jsx)(n.code,{children:"vendors"})," 的代码块，其包含了整个应用来自 ",(0,s.jsx)(n.code,{children:"node_modules"})," 的代码，也可以实现提取公共代码的功能。其配置如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'module.exports = {\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          name: "commons",\n          chunks: "initial",\n          minChunks: 2\n        },\n        vendors: {\n          test: /[\\/]node_modules[\\/]/,\n          name: "vendors",\n          chunks: "all"\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h1,{id:"按需加载",children:["按需加载",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#按需加载",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"路由组件按需加载",children:["路由组件按需加载",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#路由组件按需加载",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在我们使用 ",(0,s.jsx)(n.code,{children:"react"})," 的时候，",(0,s.jsx)(n.code,{children:"React Router"})," 就有一套自己的按需加载的方案，可以实现对路由按需加载。也就是只加载当前路由匹配的组件代码，不加载其他组件的代码。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们要让路由动态加载，需要将 ",(0,s.jsx)(n.code,{children:"component"}),"方法 换成 ",(0,s.jsx)(n.code,{children:"getComponent"}),"方法，",(0,s.jsx)(n.code,{children:"getComponent"})," 这个方法可以异步进行加载组件，也就是只有当前路由被匹配时，才会调用到这个方法。使用姿势如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"import { createHashHistory } from \"history\";\n\nconst rootRoute = {\n  path: '/',\n  indexRoute: {\n    getComponent(nextState, cb) {\n      require.ensure([], (require) => {\n        cb(null, require('components/HelloWorld'))\n      }, 'HelloWorld')\n    },\n  },\n}\n\nReactDOM.render(\n  (\n    <Router history: createHashHistory(), routes={rootRoute}/>\n  ), document.getElementById('root')\n);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"getComponent"})," 中主要实现的按需加载的是 ",(0,s.jsx)(n.code,{children:"require.ensure()"})," 方法。该方法是 ",(0,s.jsx)(n.code,{children:"webpack"})," 提供的方法按需加载的方法，第一个参数是依赖 ",(0,s.jsx)(n.code,{children:"deps"}),"，第二个参数是回调函数，第三个参数是该 ",(0,s.jsx)(n.code,{children:"chunk"})," 文件的 ",(0,s.jsx)(n.code,{children:"chunkName"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们还可以使用 ES6 提供的 ",(0,s.jsx)(n.code,{children:"import(*)"})," 动态导入的方式来实现按需加载，我们先看下如何在项目中使用："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"import React, { lazy } from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch, withRouter } from 'react-router-dom';\n\nconst Login = lazy(() => import(/* webpackChunkName: \"Login\" */'@app/login'));\nconst UserInfo = lazy(() => import(/* webpackChunkName: \"UserInfo\" */'@app/UserInfo'));\n\nclass RouteWrapper extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/userInfo\" component={UserInfo} />\n      </Switch>\n    );\n  }\n}\nexport default withRouter(connect(mapStateToProps)(RouteWrapper));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["其中 ",(0,s.jsx)(n.code,{children:'/* webpackChunkName: "Login" */'})," 的意思是 ",(0,s.jsx)(n.code,{children:"webpack"})," 会为动态生成的 ",(0,s.jsx)(n.code,{children:"chunk"})," 赋予一个名字，以方便我们的追踪和调试。如果不进行指定，则默认会使用 ",(0,s.jsx)(n.code,{children:"[id].js"}),"。（同时要记得在 ",(0,s.jsx)(n.code,{children:"webpacl.config.js"})," 中配置相关支持可以动态生成 chunk 名称的配置）。"]}),"\n",(0,s.jsxs)(n.p,{children:["在使用该方法是，同时要注意浏览器需要支持 ",(0,s.jsx)(n.code,{children:"Promise API"}),"，因为 ",(0,s.jsx)(n.code,{children:"webpack"})," 在处理 ",(0,s.jsx)(n.code,{children:"import(*)"})," 的时候，最后会返回一个 ",(0,s.jsx)(n.code,{children:"Promise"}),"，文件加载成功时可以在 ",(0,s.jsx)(n.code,{children:"Promise"})," 的 ",(0,s.jsx)(n.code,{children:"then"})," 方法中获取其内容。对于不支持 ",(0,s.jsx)(n.code,{children:"Promise"})," 的浏览器，要记得使用 ",(0,s.jsx)(n.code,{children:"polyfill"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"第三方组件和工具库按需加载使用",children:["第三方组件和工具库，按需加载使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第三方组件和工具库按需加载使用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在我们使用 ",(0,s.jsx)(n.code,{children:"Elment"})," 或者 ",(0,s.jsx)(n.code,{children:"Antd"})," 这样的组件库时，我们可能只是需要其中的某一个或者几个组件，那么在使用这样的组件库或者其他工具库的时候，一定要注意使用其按需加载的功能（大部分大型组件库或者工具库都会提供按需加载的方式）。"]}),"\n",(0,s.jsxs)(n.p,{children:["例如，在",(0,s.jsx)(n.a,{href:"https://element-plus.org/zh-CN/guide/quickstart.html#%E6%89%8B%E5%8A%A8%E5%AF%BC%E5%85%A5",target:"_blank",rel:"noopener noreferrer",children:" Element 的使用指南"}),"中，已经给我们指明了道路，我们只需要按照官网给的姿势使用就可以："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.a,{href:"https://ant.design/docs/react/getting-started-cn",target:"_blank",rel:"noopener noreferrer",children:"AntD 的官网"}),"中，也有详细的介绍："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["其他的还有一些 ",(0,s.jsx)(n.code,{children:"SDK"})," 等，有的也会提供按需加载的能力，尽量都在需要的时候再去加载，不要直接写在 ",(0,s.jsx)(n.code,{children:"main.js"})," 中。"]}),"\n",(0,s.jsxs)(n.h1,{id:"压缩代码",children:["压缩代码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#压缩代码",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们都知道，在浏览器中，运行 JS 代码是需要先将代码文件从浏览器通过服务器下载下来后再进行解析执行。那么在相同的网络环境下文件的大小会直接影响到网页加载的时长。那么，对代码进行压缩就是最简单高效的操作。"}),"\n",(0,s.jsxs)(n.h2,{id:"uglifyjs--optimizecssassetsplugin",children:["UglifyJS & OptimizeCssAssetsPlugin",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#uglifyjs--optimizecssassetsplugin",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"UglifyJS"})," 相信大家一定听说过，它是目前最成熟的 ",(0,s.jsx)(n.code,{children:"JavaScript"})," 代码压缩工具，不仅可以压缩代码体积，还可以进行代码混淆避免我们的代码被他人下载后进行破解。",(0,s.jsx)(n.code,{children:"UglifyJS"})," 会分析 ",(0,s.jsx)(n.code,{children:"JavaScript"})," 代码的语法树，理解代码含义，然后去除掉无效的代码、日志输出代码以及缩短变量名等优化。其功能强大，使用简单，并且压缩和混淆效果明显，深受广大前端同学的喜爱。"]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"webpack"})," 中，我们可以使用 ",(0,s.jsx)(n.code,{children:"UglifyJsPlugin"})," 插件来优化 JS 资源，使用 ",(0,s.jsx)(n.code,{children:"OptimizeCssAssetsPlugin"})," 这个插件优化或者压缩 CSS 资源，我们可以进行如下配置，部分 API 含义在参考注释。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"var UglifyJsPlugin = require('uglifyjs-webpack-plugin')\nvar OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\n\nmodule.exports = {\n  optimization: {\n    minimizer: [\n      // 优化 JS 资源\n      new UglifyJsPlugin({\n        exclude: /.min.js$/,   // 过滤掉已压缩文件\n        cache: true,\n        parallel: 4,             // 开启并行压缩，充分利用cpu\n        sourceMap: false,        // 是否为压缩后的代码生成 Source Map，默认不生成，开启耗时会增大。\n        extractComments: false,  // 移除注释\n        uglifyOptions: {\n          compress: {\n            unused: true,\n            warnings: false,     // 是否在 uglifyJS 删除没有用到的代码时输出警告信息，默认为输出\n            drop_console: true,  // 是否删除代码中所有的 console 语句，默认为不删除\n          },\n          output: {\n            beautify: false,     // 是否输出可读性较强的代码，即会保留空格和指标符，为达到更好的压缩效果，可设置为 false\n            comments: false      // 是否保留代码中的注释\n          }\n        }\n      }),\n      // 用于优化css文件\n      new OptimizeCssAssetsPlugin({\n        assetNameRegExp: /.css$/g,\n        cssProcessorOptions: {\n          safe: true,\n          autoprefixer: { disable: true },\n          mergeLonghand: false,\n          discardComments: {\n            removeAll: true\n          }\n        },\n        canPrint: true\n      })\n    ]\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"gzip",children:["Gzip",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gzip",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["除了前端在打包的时候将无用的代码或者 ",(0,s.jsx)(n.code,{children:"console"}),"、注释剔除之外。一般情况下，我们都会使用 ",(0,s.jsx)(n.code,{children:"Gzip"})," 在服务端对文件进行压缩。",(0,s.jsx)(n.code,{children:"Gzip"})," 原本是 ",(0,s.jsx)(n.code,{children:"UNIX"})," 系统的文件压缩，后来逐步成为 ",(0,s.jsx)(n.code,{children:"web"})," 领域主流的压缩工具。那么浏览器和服务端是如何通信来支持 ",(0,s.jsx)(n.code,{children:"Gzip"})," 呢？"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["当用户访问 web 站点的时候，会在 ",(0,s.jsx)(n.code,{children:"request header"})," 中设置 ",(0,s.jsx)(n.code,{children:"accept-encoding:gzip"}),"，表明浏览器是否支持 ",(0,s.jsx)(n.code,{children:"Gzip"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:["服务器在收到请求后，判断如果需要返回 ",(0,s.jsx)(n.code,{children:"Gzip"})," 压缩后的文件那么服务器就会先将我们的 ",(0,s.jsx)(n.code,{children:"JS\\CSS"})," 等其他资源文件进行 ",(0,s.jsx)(n.code,{children:"Gzip"})," 压缩后再传输到客户端，同时将 ",(0,s.jsx)(n.code,{children:"esponse headers"})," 设置 ",(0,s.jsx)(n.code,{children:"content-encoding:gzip"}),"。反之，则返回源文件。"]}),"\n",(0,s.jsx)(n.li,{children:"浏览器在接收到服务器返回的文件后，判断服务端返回的内容是否为压缩过的内容，然后进行解压操作。"}),"\n",(0,s.jsxs)(n.li,{children:["一般情况下，浏览器和服务器都是支持 ",(0,s.jsx)(n.code,{children:"Gzip"})," 的。",(0,s.jsx)(n.code,{children:"Gzip"})," 的压缩效率大概在 30% 左右，效果还是很明显的。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h1,{id:"scope-hoisting",children:["Scope Hoisting",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#scope-hoisting",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Scope Hoisting"})," 是 ",(0,s.jsx)(n.code,{children:"webpack3"})," 的功能，翻译过来的意思是“作用域提升”。在 ",(0,s.jsx)(n.code,{children:"JavaScript"})," 中，也有类似的概念，“变量提升”、“函数提升”，",(0,s.jsx)(n.code,{children:"JavaScript"})," 会把函数和变量声明提升到当前作用域的顶部，",(0,s.jsx)(n.code,{children:"Scope Hoisting"})," 也是类似。",(0,s.jsx)(n.code,{children:"webpack"})," 会把引入的 js 文件“提升”顶部。"]}),"\n",(0,s.jsxs)(n.p,{children:["在没有使用 ",(0,s.jsx)(n.code,{children:"Scope Hoisting"})," 的时候，",(0,s.jsx)(n.code,{children:"webpack"})," 的打包文件会将各个模块分开使用 ",(0,s.jsx)(n.code,{children:"__webpack_require__"})," 导入，在使用了 ",(0,s.jsx)(n.code,{children:"Scope Hoisting"})," 之后，就会把需要导入的文件直接移入使用模块的顶部。这样做的好处有"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"代码中函数声明和引用语句减少，减少代码体积"}),"\n",(0,s.jsxs)(n.li,{children:["不用多次使用 ",(0,s.jsx)(n.code,{children:"__webpack_require__"})," 调用模块，运行速度会的得以提升。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["所以，",(0,s.jsx)(n.code,{children:"Scope Hoisting"})," 可以让 ",(0,s.jsx)(n.code,{children:"webpack"})," 打包出来的代码文件体积更小，运行更快。",(0,s.jsx)(n.code,{children:"Scope Hoisting"})," 的原理也很简单，主要是其会分析模块之间的依赖关系，将那些只被引用一次的模块进行合并，减少引用的次数。"]}),"\n",(0,s.jsxs)(n.p,{children:["因为 ",(0,s.jsx)(n.code,{children:"Scope Hoisting"})," 需要分析模块之间的依赖关系，所以源码必须采用 ES6 模块化语法。也就是说如果你使用非 ",(0,s.jsx)(n.code,{children:"ES6"})," 模块或者使用 ",(0,s.jsx)(n.code,{children:"import()"})," 动态导入的话，则不会有 ",(0,s.jsx)(n.code,{children:"Scope Hoisting"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Scope Hoisting"})," 是 ",(0,s.jsx)(n.code,{children:"webpack"})," 内置功能，只需要安装 ",(0,s.jsx)(n.code,{children:"ModuleConcatenationPlugin"}),"（模块关联）插件即可，相关配置文件如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// webpack.config.js\nmodule.exports = {\n  plugins: [\n    // 开启 Scope Hoisting 功能\n    new webpack.optimize.ModuleConcatenationPlugin()\n  ]\n}\n"})}),"\n",(0,s.jsxs)(n.h1,{id:"输出分析",children:["输出分析",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#输出分析",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们介绍了很多优化打包后代码体积的方式，但是怎么能够定位我们项目的问题在哪？又怎么去检验我们的优化成果呢？这就需要对输出的结果进行分析。"}),"\n",(0,s.jsx)(n.p,{children:"最直接的分析方式当然是查看我们每次打包后在控制台输出的结果，例如"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"但是这样的输出结果的可读性非常差并且不直观。我们可以使用可视化分析工具更简单、直观的查看打包结果，方便分析和排查问题。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"webpack"})," 官方推出了 ",(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer",children:"webpack-bundle-analyzer"})," 工具，该工具应该是迄今为止使用最多的 webpack 可视化分析工具。其使用姿势很简单，在安装完插件之后，进行如下的配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# NPM 安装插件\nnpm install --save-dev webpack-bundle-analyzer\n\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n\nmodule.exports = {\n  plugins: [\n    new BundleAnalyzerPlugin()\n  ]\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在重新执行 ",(0,s.jsx)(n.code,{children:"build"})," 命令就会发现浏览器重新打开了个窗口，展示本项目本次 ",(0,s.jsx)(n.code,{children:"build"})," 的结果的可视化分析：\n",(0,s.jsx)("img",{src:r,alt:""})]}),"\n",(0,s.jsx)(n.p,{children:"通过该图，我们可以很直观的看出："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"打包出了哪些文件；"}),"\n",(0,s.jsx)(n.li,{children:"每个文件的所占区块越大代表着其在打包总产物的占比越大，帮助我们指定优化的优先级。"}),"\n",(0,s.jsx)(n.li,{children:"也可以看出模块之间的包含关系。"}),"\n"]}),"\n",(0,s.jsxs)(n.h1,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["本文我们列举了常见的优化 ",(0,s.jsx)(n.code,{children:"webpack"})," 构建产物的方案，主要的目标是减少构建产物的体积、可以按需引入、以及压缩混淆代码，提高用户体验。主要从代码分割、按需加载、代码压缩、按需打包等方向进行优化。在文章的最后，也给大家介绍了怎么使用分析工具来可视化、量化我们的打包结果。"]}),"\n",(0,s.jsx)(n.p,{children:"优化构建产物的质量是为了用户的体验，主要是一些老生常谈的问题，比如减少首屏加载时间（当然，减少首屏加载时间又是另一个话题）。项目优化不是一蹴而就，每个项目都有每个项目不同的问题，这就需要作为开发者的你耐心去寻找一套适合你们项目的最优解决方案。"})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let p=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["%E5%88%9D%E6%8E%A2%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%2F14.%E4%BC%98%E5%8C%96%20webpack%20%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%8F%90%E5%8D%87%E6%9E%84%E5%BB%BA%E4%BA%A7%E7%89%A9%E8%B4%A8%E9%87%8F.md"]={toc:[{text:"路由组件按需加载",id:"路由组件按需加载",depth:2},{text:"第三方组件和工具库，按需加载使用",id:"第三方组件和工具库按需加载使用",depth:2},{text:"UglifyJS & OptimizeCssAssetsPlugin",id:"uglifyjs--optimizecssassetsplugin",depth:2},{text:"Gzip",id:"gzip",depth:2}],title:"总结",headingTitle:"总结",frontmatter:{}}}}]);