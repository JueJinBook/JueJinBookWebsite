"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["93587"],{516544:function(n,e,d){d.r(e),d.d(e,{default:()=>o});var s=d(552676),r=d(740453);let i=d.p+"static/image/beb099a06675d0f2f68a8390e8e5099b.ed6e3313.webp",c=d.p+"static/image/0a6ea731205ab76c8659a258ccba9536.88c43e0b.webp",t=d.p+"static/image/e2ee137c870b413f7f48eb5c9cdb70e1.8bd18ca0.webp",h=d.p+"static/image/5ddaeab1dfd1744ed8b3a36ee55cd8d7.b70e8363.webp",l=d.p+"static/image/b163a0c52c6997c1de8043dda4af8b09.08a6403f.webp";function j(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",h4:"h4",code:"code",pre:"pre",ul:"ul",li:"li",img:"img",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",blockquote:"blockquote"},(0,r.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"18服务端实战数据库实操进阶",children:["18.服务端实战：数据库实操进阶",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#18服务端实战数据库实操进阶",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["接着之前两个章节，我们目前已经学习了基础的 ",(0,s.jsx)(e.strong,{children:"TypeORM"})," 的用法，那么在本章进阶教程中，我们将以 ",(0,s.jsx)(e.strong,{children:"MySQL"})," 作为 ",(0,s.jsx)(e.strong,{children:"Demo"})," 数据库来学习一下 ",(0,s.jsx)(e.strong,{children:"TypeORM"})," 常见的一些高阶用法。"]}),"\n",(0,s.jsxs)(e.h2,{id:"多个数据源",children:["多个数据源",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#多个数据源",children:"#"})]}),"\n",(0,s.jsxs)(e.h4,{id:"多链接--多数据库",children:["多链接 & 多数据库",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#多链接--多数据库",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["这个在【数据库工具封装】章节中其实也做了类似的事情，在工具封装章节，我们已经在同一个工程中使用了 ",(0,s.jsx)(e.strong,{children:"MongoDB"})," 与 ",(0,s.jsx)(e.strong,{children:"MySQL"}),"，根据不同的文件后缀名来自动注册实体类（但建议使用直接引入实体类的模式），如果需要拓展数据库的话，则可以按照这种模式使用新的拓展名即可。"]}),"\n",(0,s.jsxs)(e.p,{children:["如果非必要的情况下，个人首先推荐这个模式，因为这样方便与管理数据库以及对应的配置项，缺点就是要创建多个链接，如果想尝试 ",(0,s.jsx)(e.strong,{children:"TypeORM"})," 的 ",(0,s.jsx)(e.code,{children:"createConnections"})," 模式也是可以，但这样就需要修改工具类的结构，因为之前的架构并不支持这个模式。"]}),"\n",(0,s.jsxs)(e.h4,{id:"单链接--多数据库",children:["单链接 & 多数据库",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#单链接--多数据库",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["除了多连接之外，",(0,s.jsx)(e.strong,{children:"TypeORM"})," 也支持使用单链接 & 多数据模式，在这个模式中只需要建立一次链接就可以使用多个数据库。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'import {Entity, PrimaryGeneratedColumn, Column} from "typeorm";\n\n@Entity({ database: "secondDB" })\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n}\n'})}),"\n",(0,s.jsxs)(e.h4,{id:"主从复制",children:["主从复制",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#主从复制",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"TypeORM"})," 支持 ",(0,s.jsx)(e.strong,{children:"MySQL"})," 的主从复制，虽然我们这个项目并不会使用，但也是一个不错的知识点，所以顺带讲解一下："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'{\n  type: "mysql",\n  logging: true,\n  replication: {\n    master: {\n      host: "server1",\n      port: 3306,\n      username: "test",\n      password: "test",\n      database: "test"\n    },\n    slaves: [{\n      host: "server2",\n      port: 3306,\n      username: "test",\n      password: "test",\n      database: "test"\n    }, {\n      host: "server3",\n      port: 3306,\n      username: "test",\n      password: "test",\n      database: "test"\n    }]\n  }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"同样如果需要使用主从复制，之前的架构也是不支持的，需要各位自己来实现。"}),"\n",(0,s.jsx)(e.p,{children:"一般情况下使用主从复制的场景比多个数据库会多一些，较为常见的原因如下："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"读写分离和负载均衡"}),"：主服务器负责处理写操作，而从服务器负责处理读操作。这样可以提高系统的并发处理能力和读取性能，实现负载均衡。通过合理配置多个从服务器，可以实现水平扩展和更好的吞吐量。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"数据备份和灾难恢复"}),"：：通过主从复制，可以将主服务器上的数据实时复制到从服务器上。这样，在主服务器发生故障或数据损坏时，可以快速切换到从服务器，实现高可用性和灾难恢复。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"find-进阶",children:["Find 进阶",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#find-进阶",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["接下来情启动我们的 ",(0,s.jsx)(e.strong,{children:"User"})," 服务来体验下述例子"]}),"\n",(0,s.jsxs)(e.h4,{id:"select",children:["Select",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#select",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["有的时候，我们并不需要将所有的数据都返回给前端，可以使用 ",(0,s.jsx)(e.strong,{children:"Select"})," 参数来过滤一些我们不想显示的字段。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"/user/user.service.ts"})," 修改 ",(0,s.jsx)(e.code,{children:"findAll"})," 查询数据库方法:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-diff",children:'\n  findAll() {\n    return this.userRepository.find({\n+      select: ["id", "name"],\n      relations: ["department"]\n    })\n  }\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsxs)(e.h4,{id:"not",children:["Not",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#not",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"/user/user.controller.ts"})," 新建 ",(0,s.jsx)(e.code,{children:"findNotOne"})," 方法:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"  @Get('notone/:id')\n  findNotOne(@Param('id') id: string) {\n    return this.userService.findNotOne(+id);\n  }\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"/user/user.service.ts"})," 新建 ",(0,s.jsx)(e.code,{children:"findNotOne"})," 查询数据库方法:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"import { Not, Repository } from 'typeorm';\n  findNotOne(id: number) {\n    return this.userRepository.find({\n      where: {\n        id: Not(id)\n      }\n    })\n  }\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:["基本上 ",(0,s.jsx)(e.code,{children:"Find"})," 的相关操作如上所示，整个内容都较为简单，所以重复的内容就不再重复，下述是 ",(0,s.jsx)(e.code,{children:"Find"})," 的相关方法表格，各位可自取。"]}),"\n",(0,s.jsxs)(e.p,{children:["具体的 ",(0,s.jsx)(e.strong,{children:"Find"})," 普通参数可以参考下表所示："]}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{children:"查询条件"}),"\n",(0,s.jsx)(e.th,{children:"描述"}),"\n",(0,s.jsx)(e.th,{children:"示例"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"select?: (keyof Entity)[]"})}),"\n",(0,s.jsx)(e.td,{children:"指定要选择的实体属性数组。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'select: ["id", "name"]'})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"where?: FindConditions<Entity>"})}),"\n",(0,s.jsx)(e.td,{children:"查询实体类"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:" {id}"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"relations?: string[]"})}),"\n",(0,s.jsx)(e.td,{children:"指定要加载的关联实体的名称数组。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'relations: ["posts", "comments"]'})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'order?: { [P in keyof Entity]?: "ASC" | "DESC" }'})}),"\n",(0,s.jsx)(e.td,{children:"指定查询结果的排序方式。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'{order: {id: "DESC"}'})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"skip?: number"})}),"\n",(0,s.jsx)(e.td,{children:"指定要跳过的查询结果数量。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"skip: 10"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"take?: number"})}),"\n",(0,s.jsx)(e.td,{children:"指定要获取的查询结果数量。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"take: 5"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["具体的 ",(0,s.jsx)(e.strong,{children:"Find"})," 高级用法可以参考下表所示："]}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{children:"方法名"}),"\n",(0,s.jsx)(e.th,{children:"描述"}),"\n",(0,s.jsx)(e.th,{children:"示例"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"Not(condition: any)"})}),"\n",(0,s.jsx)(e.td,{children:"排除满足指定条件的结果。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"userRepository.find({ age: Not(25) })"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"LessThan(value: any)"})}),"\n",(0,s.jsx)(e.td,{children:"筛选小于指定值的结果。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"userRepository.find({ age: LessThan(30) })"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"LessThanOrEqual(value: any)"})}),"\n",(0,s.jsx)(e.td,{children:"筛选小于或等于指定值的结果。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"userRepository.find({ age: LessThanOrEqual(30) })"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"MoreThan(value: any)"})}),"\n",(0,s.jsx)(e.td,{children:"筛选大于指定值的结果。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"userRepository.find({ age: MoreThan(20) })"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"MoreThanOrEqual(value: any)"})}),"\n",(0,s.jsx)(e.td,{children:"筛选大于或等于指定值的结果。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"userRepository.find({ age: MoreThanOrEqual(20) })"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"Like(value: string)"})}),"\n",(0,s.jsx)(e.td,{children:"筛选包含指定字符串的结果。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'userRepository.find({ name: Like("%John%") })'})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"Between(from: any, to: any)"})}),"\n",(0,s.jsx)(e.td,{children:"筛选在指定范围内的结果。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"userRepository.find({ age: Between(20, 30) })"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"In(values: any[])"})}),"\n",(0,s.jsx)(e.td,{children:"筛选在指定值列表中的结果。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"userRepository.find({ id: In([1, 2, 3]) })"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"Any(condition: any)"})}),"\n",(0,s.jsx)(e.td,{children:"筛选满足指定条件的任意结果。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'userRepository.find({ roles: Any({ name: "admin" }) })'})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"IsNull()"})}),"\n",(0,s.jsx)(e.td,{children:"筛选为空值的结果。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"userRepository.find({ address: IsNull() })"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"Raw(condition: string)"})}),"\n",(0,s.jsx)(e.td,{children:"使用原始 SQL 查询条件。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'userRepository.find({ age: Raw("age > 18") })'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"query-builder",children:["Query Builder",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#query-builder",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"QueryBuilder"})," 是 ",(0,s.jsx)(e.strong,{children:"TypeORM"})," 最强大的功能之一 ，它允许你使用优雅便捷的语法构建 ",(0,s.jsx)(e.strong,{children:"SQL"})," 查询，执行并获得自动转换的实体。"]}),"\n",(0,s.jsxs)(e.p,{children:["如果当你的条件判断复杂度上升到常规方法不支持的时候，除了手写 ",(0,s.jsx)(e.code,{children:"Sql"})," 之外，",(0,s.jsx)(e.strong,{children:"QueryBuilder"})," 也是一个非常好的选择。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["非必要情况下，一般不建议直接手写 ",(0,s.jsx)(e.strong,{children:"SQL"}),"，因为维护与排查问题的时候都会稍微麻烦点。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["创建 ",(0,s.jsx)(e.strong,{children:"QueryBuilder"})," 的方法有多种："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"connection"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"entity manager"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"repository"})}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["对于我们封装好的工具类选择第三种 ",(0,s.jsx)(e.code,{children:"repository"})," 的方式是最为简便的。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"/user/user.service.ts"})," 新建 ",(0,s.jsx)(e.code,{children:"findNotOneWithQueryBuild"})," 查询数据库方法:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'  findNotOneWithQueryBuild(id: number) {\n    const user = this.userRepository.createQueryBuilder("user")\n    user.where("user.id != :id", { id })\n    return user.getMany()\n  }\n'})}),"\n",(0,s.jsxs)(e.p,{children:["同步替换 ",(0,s.jsx)(e.code,{children:"controller"})," 中的 ",(0,s.jsx)(e.code,{children:"findNotOne"})," 方法："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:["同样使用 ",(0,s.jsx)(e.strong,{children:"QueryBuilder"})," 对比直接手写 ",(0,s.jsx)(e.strong,{children:"SQL"})," 还是较为简便的，下文是 ",(0,s.jsx)(e.strong,{children:"QueryBuilder"})," 的常见方法列表，大家可以随意自由组合试验一下。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"QueryBuilder"})," 常用方法："]}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{children:"方法名"}),"\n",(0,s.jsx)(e.th,{children:"描述"}),"\n",(0,s.jsx)(e.th,{children:"示例"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"select(fields: string                                                                            | string[]): this"})}),"\n",(0,s.jsx)(e.td,{children:"指定要选择的字段。"}),"\n",(0,s.jsx)(e.td,{}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"addSelect(fields: string                                                                         | string[]): this"})}),"\n",(0,s.jsx)(e.td,{children:"添加要选择的额外字段。"}),"\n",(0,s.jsx)(e.td,{}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"where(condition: string, parameters?: ObjectLiteral): this"})}),"\n",(0,s.jsx)(e.td,{children:"添加 WHERE 子句。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'.where("name = :name", { name: "John" })'})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"andWhere(condition: string, parameters?: ObjectLiteral): this"})}),"\n",(0,s.jsx)(e.td,{children:"添加 AND WHERE 子句。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'.andWhere("age > :age", { age: 18 })'})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"orWhere(condition: string, parameters?: ObjectLiteral): this"})}),"\n",(0,s.jsx)(e.td,{children:"添加 OR WHERE 子句。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'.orWhere("age < :age", { age: 30 })'})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"leftJoin(relation: string, alias: string, condition?: string, parameters?: ObjectLiteral): this"})}),"\n",(0,s.jsx)(e.td,{children:"添加 LEFT JOIN 子句。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'.leftJoin("user.posts", "post")'})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:'orderBy(sort: string                                                                             | ObjectLiteral, order?: "ASC" | "DESC"): this'})}),"\n",(0,s.jsx)(e.td,{children:"查询排序"}),"\n",(0,s.jsx)(e.td,{}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"skip(skip: number): this"})}),"\n",(0,s.jsx)(e.td,{children:"设置要跳过的结果数量。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:".skip(10)"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"take(take: number): this"})}),"\n",(0,s.jsx)(e.td,{children:"设置要获取的结果数量。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:".take(5)"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"getMany(): Promise<Entity[]>"})}),"\n",(0,s.jsx)(e.td,{children:"执行查询并返回实体对象数组。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:".getMany()"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"getOne(): Promise<Entity                                                                         | undefined>"})}),"\n",(0,s.jsx)(e.td,{children:"执行查询并返回单个实体对象。"}),"\n",(0,s.jsx)(e.td,{}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"getCount(): Promise<number>"})}),"\n",(0,s.jsx)(e.td,{children:"执行查询并返回结果数量。"}),"\n",(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:".getCount()"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"查询缓存",children:["查询缓存",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#查询缓存",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"数据库查询一直都是非常消耗资源的事情，所以有些不需要实时获取的内容，可以采用缓存减少查询频率。"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"QueryBuilder"})," 可以缓存  ",(0,s.jsx)(e.code,{children:"getMany"}),"、",(0,s.jsx)(e.code,{children:"getOne"}),"、",(0,s.jsx)(e.code,{children:"getRawMany"}),"、",(0,s.jsx)(e.code,{children:"getRawOne"}),"、",(0,s.jsx)(e.code,{children:"getCount"})," 的查询结果。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Repository"})," 可以缓存 ",(0,s.jsx)(e.code,{children:"find"}),"、",(0,s.jsx)(e.code,{children:"findAndCount"}),"、",(0,s.jsx)(e.code,{children:"findByIds"})," 和 ",(0,s.jsx)(e.code,{children:"count"})," 的查询结果。"]}),"\n",(0,s.jsxs)(e.p,{children:["首次启动缓存需要在启动的时候，在 TypeORM 中的数据库配置中添加 ",(0,s.jsx)(e.code,{children:"cache"})," 参数。"]}),"\n",(0,s.jsxs)(e.p,{children:["所以我们在 ",(0,s.jsx)(e.code,{children:".config/dev.yaml"})," 中添加 ",(0,s.jsx)(e.code,{children:"cache"})," 参数后并重启项目："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-diff",children:'MYSQL_CONFIG:\n  name: "material_test"\n  type: "mysql"\n  host: "127.0.0.1"\n  port: 3306\n  username: "root"\n  password: "123456"\n  database: "material_test"\n  entities: "mysql"\n  logging: true\n  synchronize: true\n+  cache: true\n'})}),"\n",(0,s.jsx)(e.p,{children:"修改"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-diff",children:'\n  findAll() {\n    return this.userRepository.find({\n      select: ["id", "name"],\n      relations: ["department"],\n+      cache: 50000\n    })\n  }\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"cache"})," 的默认缓存时间只有 ",(0,s.jsx)(e.code,{children:"1000ms"}),"，这里为了测试方便，我们加到了50000ms，具体的缓存周期需要根据自己的业务场景来设计，否则出现一些不符合预期且难以排查的问题。"]}),"\n",(0,s.jsxs)(e.p,{children:["先在数据库插入一条数据，如下图所示，新的用户 ",(0,s.jsx)(e.strong,{children:"id"})," 为 ",(0,s.jsx)(e.strong,{children:"32"}),"。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsx)(e.p,{children:"再次请求查询接口的时候，返回数据并未包含最新插入的数据，则代表缓存功能开启成功。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"注意，要验证缓存功能，再插入之前要先查询一次，否则是没办法启用缓存。"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"写在最后",children:["写在最后",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["本章是服务端",(0,s.jsx)(e.strong,{children:"基础篇"}),"最后一个章节，根据大部分同学的反馈，后期的内容将直接着重展示",(0,s.jsx)(e.strong,{children:"研发思路"}),"、",(0,s.jsx)(e.strong,{children:"整体架构"}),"以及",(0,s.jsx)(e.strong,{children:"最佳实践"}),"，更多关于的基础相关问题可以参考官方文档，就不再占用小册单独的篇章进行讲述了。"]}),"\n",(0,s.jsx)(e.p,{children:"如果你有什么疑问，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function x(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(j,{...n})}):j(n)}let o=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F18.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E6%93%8D%E8%BF%9B%E9%98%B6.md"]={toc:[{text:"多个数据源",id:"多个数据源",depth:2},{text:"多链接 & 多数据库",id:"多链接--多数据库",depth:4},{text:"单链接 & 多数据库",id:"单链接--多数据库",depth:4},{text:"主从复制",id:"主从复制",depth:4},{text:"Find 进阶",id:"find-进阶",depth:2},{text:"Select",id:"select",depth:4},{text:"Not",id:"not",depth:4},{text:"Query Builder",id:"query-builder",depth:2},{text:"查询缓存",id:"查询缓存",depth:2},{text:"写在最后",id:"写在最后",depth:2}],title:"18.服务端实战：数据库实操进阶",headingTitle:"18.服务端实战：数据库实操进阶",frontmatter:{}}}}]);