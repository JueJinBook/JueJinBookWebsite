"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["24945"],{643895:function(e,n,r){e.exports=r.p+"static/image/4e228820d57cc0be9ed05536615c16a3.c021cae3.webp"},176969:function(e,n,r){r.r(n),r.d(n,{default:()=>J});var a=r(552676),s=r(740453),c=r(643895);let i=r.p+"static/image/26061224c8b7bc9f7f70c2eeee927f81.41f9e39f.webp",t=r.p+"static/image/1e634f2425c2cff8bddefb3bcb941eb1.90618833.webp",l=r.p+"static/image/f618bc62d3e37c2d3c3d43d14ae7673a.c0aaf279.webp",d=r.p+"static/image/4768cd6fe4d5042d04f4827011a24eeb.e774db50.webp",p=r.p+"static/image/6b5591972ed0dd7cbcabb12e53b59ff3.0022fbd4.webp",o=r.p+"static/image/68557e57d7b1a50d97c0465da2d675f1.c8697e5c.webp",h=r.p+"static/image/992a7663706cae5ca4deab9be83858af.16b530a2.webp",m=r.p+"static/image/587a82bb9d2655f4dbf4b37b92cf5f0a.adbb8078.webp",j=r.p+"static/image/472a9cd1f6cdb1c148893dfbc060feee.67fe11c9.webp",x=r.p+"static/image/a48a6ef1ea7966eaa64c22755b021448.e3cdac6f.webp",g=r.p+"static/image/0a3d01f5ebc67f9f005fc2dd20167b83.e4c0f5df.webp",u=r.p+"static/image/23165649b18c3cd5081df495d256aed4.f6c1d338.webp",f=r.p+"static/image/2e8c1dfdb261ec4a0325b322f8a95dda.97f2e2de.webp",b=r.p+"static/image/974e3f2d5d0e27d16fcc0d763510d6fd.0160fa82.webp",y=r.p+"static/image/159d9991ccd7e1600c3a43c68e28ea2d.fc9df29c.webp",w=r.p+"static/image/8f6fc8e303bda161b0c9a18e885441b3.a2b10fde.webp",A=r.p+"static/image/fecf4eeba54ee4b3d20c4b02e7599406.12028ab2.webp",S=r.p+"static/image/bc0fdc54c0f995e522ecbb392b7b81d2.1bf5c087.webp",N=r.p+"static/image/24ce15f01b127cab3e9dcb502334b086.c1fa9a32.webp",D=r.p+"static/image/fc7b83c577abba5f60fb46b8219e2f4b.e91eedba.webp",E=r.p+"static/image/372631cf82742f1d1bd66fea1567e347.919138eb.webp",U=r.p+"static/image/6ef40218f3b0c8e1cee372f124527bc7.1099fc61.webp",v=r.p+"static/image/326d0493cb37650efd1ac738f76bd354.5df77446.webp",q=r.p+"static/image/d09e9bc370ce66b20ed76f86d71b6f7e.9b845488.webp",O=r.p+"static/image/f9e0a833515867e9dfa0f1f1031cbada.ff3647b9.webp",C=r.p+"static/image/bc294995a8ac56e309065f9823187286.edcf0a5d.webp",z=r.p+"static/image/350e8e606599fa89783e712d95c4e4f1.1ccc7b21.webp",B=r.p+"static/image/35a569cadbc0bc661368b98913101b6f.c12f1c34.webp",R=r.p+"static/image/c7ad0e83daa6dc92aa4c3f83d5534b9c.f385a89d.webp",_=r.p+"static/image/2f07a42bc0a1780c7e49702b32951a67.c5414818.webp",T=r.p+"static/image/2a47249b79be56ac0b533c61433a2e40.2f1a0298.webp",M=r.p+"static/image/ea1b4e78872e8249e8dec969e10778f6.076d45f1.webp",k=r.p+"static/image/49369b3eb16e3392a5c22cda540adac1.d41d347e.webp",P=r.p+"static/image/7695271377fe55b5a5935a3649fa5e21.06cde634.webp",F=r.p+"static/image/609476bdbd7edba78d76ff9fd43b47b5.e448f6bf.webp",I=r.p+"static/image/6fa1af2c1d7299cfc7ddff3b46bf37ad.8f209195.webp",G=r.p+"static/image/66bd9172daf05d718e5c5312dd1b269a.89aaf029.webp",Q=r.p+"static/image/496857f933d1b4ff7d5b7eddf153f76c.fb89ff8f.webp",L=r.p+"static/image/bf772562b054c1e5c4036d10dee13bd4.029fa4d9.webp",H=r.p+"static/image/8f2a3da1d53d513f0d31339e870c6541.7910f00a.webp";function V(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",strong:"strong",h2:"h2",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"54-快速掌握-typeorm",children:["54. 快速掌握 TypeORM",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#54-快速掌握-typeorm",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"上节我们简单用了下 TypeORM，这节我们把它全部的概念过一遍。"}),"\n",(0,a.jsx)(n.p,{children:"新建一个 TypeORM 项目："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"npx typeorm@latest init --name typeorm-all-feature --database mysql\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后改下用户名密码数据库，把连接 msyql 的驱动包改为 mysql2，并修改加密密码的方式："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:H,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import "reflect-metadata"\nimport { DataSource } from "typeorm"\nimport { User } from "./entity/User"\n\nexport const AppDataSource = new DataSource({\n    type: "mysql",\n    host: "localhost",\n    port: 3306,\n    username: "root",\n    password: "guang",\n    database: "practice",\n    synchronize: true,\n    logging: true,\n    entities: [User],\n    migrations: [],\n    subscribers: [],\n    poolSize: 10,\n    connectorPackage: \'mysql2\',\n    extra: {\n        authPlugin: \'sha256_password\',\n    }\n})\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"然后安装 mysql2:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"npm install --save mysql2\n"})}),"\n",(0,a.jsx)(n.p,{children:"我们分别来过一遍这些配置："}),"\n",(0,a.jsx)(n.p,{children:"type 是数据库的类型，因为 TypeORM 不只支持 MySQL 还支持 postgres、oracle、sqllite 等数据库。"}),"\n",(0,a.jsx)(n.p,{children:"host、port 是指定数据库服务器的主机和端口号。"}),"\n",(0,a.jsx)(n.p,{children:"user、password 是登录数据库的用户名和密码。"}),"\n",(0,a.jsx)(n.p,{children:"database 是要指定操作的 database，因为 mysql 是可以有多个 database 或者叫 schema 的。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:L,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"synchronize 是根据同步建表，也就是当 database 里没有和 Entity 对应的表的时候，会自动生成建表 sql 语句并执行。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:Q,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"当然，如果有对应的表就不会创建了。"}),"\n",(0,a.jsx)(n.p,{children:"logging 是打印生成的 sql 语句。"}),"\n",(0,a.jsx)(n.p,{children:"entities 是指定有哪些和数据库的表对应的 Entity。"}),"\n",(0,a.jsx)(n.p,{children:"除了 class，还可以通过这种方式指定："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:G,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"migrations 是修改表结构之类的 sql，暂时用不到，就不展开了。"}),"\n",(0,a.jsx)(n.p,{children:"subscribers 是一些 Entity 生命周期的订阅者，比如 insert、update、remove 前后，可以加入一些逻辑："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:I,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"poolSize 是指定数据库连接池中连接的最大数量。"}),"\n",(0,a.jsx)(n.p,{children:"connectorPackage 是指定用什么驱动包。"}),"\n",(0,a.jsx)(n.p,{children:"extra 是额外发送给驱动包的一些选项。"}),"\n",(0,a.jsx)(n.p,{children:"这些配置都保存在 DataSource 里。"}),"\n",(0,a.jsx)(n.p,{children:"DataSource 会根据你传入的连接配置、驱动包，来创建数据库连接，并且如果指定了 synchronize 的话，会同步创建表。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:F,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"而创建表的依据就是 Entity："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:P,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"跑一下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm run start\n"})}),"\n",(0,a.jsx)(n.p,{children:"比如这个 Entity 就会执行这样的 sql："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:k,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"主键为 INT 自增、firstName 和 lastName 是 VARCHAR(255)，age 是 INT。"}),"\n",(0,a.jsx)(n.p,{children:"这是默认的映射关系。"}),"\n",(0,a.jsx)(n.p,{children:"那如果我 number 不是想映射到 INT 而是 DOUBLE 呢？"}),"\n",(0,a.jsx)(n.p,{children:"或者如果 string 不是想映射到 VARCHAR(255)，而是 TEXT （长文本）呢？"}),"\n",(0,a.jsx)(n.p,{children:"这样映射："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity({\n    name: 't_aaa'\n})\nexport class Aaa {\n\n    @PrimaryGeneratedColumn({\n        comment: '这是 id'\n    })\n    id: number\n\n    @Column({\n        name: 'a_aa',\n        type: 'text',\n        comment: '这是 aaa'\n    })\n    aaa: string\n\n    @Column({\n        unique: true,\n        nullable: false,\n        length: 10,\n        type: 'varchar',\n        default: 'bbb'\n    })\n    bbb: string\n\n    @Column({\n        type: 'double',\n    })\n    ccc: number\n}\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"我们新增了一个 Entity Aaa。"}),"\n",(0,a.jsx)(n.p,{children:"@Entity 指定它是一个 Entity，name 指定表名为 t_aaa。"}),"\n",(0,a.jsx)(n.p,{children:"@PrimaryGeneratedColumn 指定它是一个自增的主键，通过 comment 指定注释。"}),"\n",(0,a.jsx)(n.p,{children:"@Column 映射属性和字段的对应关系。"}),"\n",(0,a.jsx)(n.p,{children:"通过 name 指定字段名，type 指定映射的类型，length 指定长度，default 指定默认值。"}),"\n",(0,a.jsx)(n.p,{children:"nullable 设置 NOT NULL 约束，unique 设置 UNIQUE 唯一索引。"}),"\n",(0,a.jsx)(n.p,{children:"type 这里指定的都是数据库里的数据类型。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:M,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后在 DataSource 的 entities 里引入下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:T,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"重新跑 npm run start。"}),"\n",(0,a.jsx)(n.p,{children:"生成建表 sql 是这样的："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:_,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"格式化一下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:R,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"对比着 Entity 看下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:B,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"是不是就明白怎么映射了？"}),"\n",(0,a.jsx)(n.p,{children:"在 mysql workbench 里看下，确实生成了这个表："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:z,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"表创建好了，接下来就是增删改查了。"}),"\n",(0,a.jsx)(n.p,{children:"在 index.ts 里创建个 user 对象，然后调用 AppDataSource.manager.save 来保存："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n\n    const user = new User()\n    user.firstName = "aaa"\n    user.lastName = "bbb"\n    user.age = 25\n\n    await AppDataSource.manager.save(user)\n\n}).catch(error => console.log(error))\n'})}),"\n",(0,a.jsx)(n.p,{children:"删除 User 表重新跑 npm run start。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:C,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:O,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以看到数据库插入了这条记录："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:q,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"如果你指定了 id，那就变成修改了："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n\n    const user = new User()\n    user.id = 1;\n    user.firstName = "aaa111"\n    user.lastName = "bbb"\n    user.age = 25\n\n    await AppDataSource.manager.save(user)\n\n}).catch(error => console.log(error))\n'})}),"\n",(0,a.jsx)(n.p,{children:"重新跑下 npm run start。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:v,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以看到，生成的 sql 语句变成了 select 和 update："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:U,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"当你指定了 id 的时候，typeorm 会先查询这个 id 的记录，如果查到了，那就执行 update。"}),"\n",(0,a.jsx)(n.p,{children:"在 mysql workbench 里看下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:E,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"确实修改了。"}),"\n",(0,a.jsx)(n.p,{children:"那如果想批量插入和修改呢？"}),"\n",(0,a.jsx)(n.p,{children:"这样写："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { AppDataSource } from \"./data-source\"\nimport { User } from \"./entity/User\"\n\nAppDataSource.initialize().then(async () => {\n\n    await AppDataSource.manager.save(User, [\n        { firstName: 'ccc', lastName: 'ccc', age: 21},\n        { firstName: 'ddd', lastName: 'ddd', age: 22},\n        { firstName: 'eee', lastName: 'eee', age: 23}\n    ]);\n\n\n}).catch(error => console.log(error))\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"我们 npm run start 跑一下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:D,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以看到确实生成了 3 条 insert into 的 sql 语句。"}),"\n",(0,a.jsx)(n.p,{children:"数据库中也能看到："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:N,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"批量修改也很容易想到，是这样写："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { AppDataSource } from \"./data-source\"\nimport { User } from \"./entity/User\"\n\nAppDataSource.initialize().then(async () => {\n\n    await AppDataSource.manager.save(User, [\n        { id: 2 ,firstName: 'ccc111', lastName: 'ccc', age: 21},\n        { id: 3 ,firstName: 'ddd222', lastName: 'ddd', age: 22},\n        { id: 4, firstName: 'eee333', lastName: 'eee', age: 23}\n    ]);\n\n}).catch(error => console.log(error))\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"执行 npm run start，会看到一条 select 语句， 3 条 update 语句："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:S,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在 workbench 里也可以看到数据被修改了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:A,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这就是 typeorm 里新增和修改的方式，使用 save 方法。"}),"\n",(0,a.jsx)(n.p,{children:"其实 EntityManager 还有 update 和 insert 方法，分别是修改和插入的，但是它们不会先 select 查询一次。而 save 方法会先查询一次数据库来确定是插入还是修改。"}),"\n",(0,a.jsx)(n.p,{children:"删除和批量删除用 delete 方法："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n\n    await AppDataSource.manager.delete(User, 1);\n    await AppDataSource.manager.delete(User, [2,3]);\n\n}).catch(error => console.log(error))\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"执行下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:w,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"数据库了对应记录就被删除了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:y,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这里也可以用 remove 方法："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n\n    const user = new User();\n    user.id = 1;\n\n    await AppDataSource.manager.remove(User, user);\n\n}).catch(error => console.log(error))\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"delete 和 remove 的区别是，delete 直接传 id、而 remove 则是传入 entity 对象。"})}),"\n",(0,a.jsx)(n.p,{children:"而查询是使用 find 方法："}),"\n",(0,a.jsx)(n.p,{children:"先插入几条数据："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"await AppDataSource.manager.save(User, [\n    { firstName: 'ccc', lastName: 'ccc', age: 21},\n    { firstName: 'ddd', lastName: 'ddd', age: 22},\n    { firstName: 'eee', lastName: 'eee', age: 23}\n]);\n"})}),"\n",(0,a.jsx)(n.p,{children:"再查一下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n    const users = await AppDataSource.manager.find(User);\n    console.log(users);\n    \n}).catch(error => console.log(error))\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"控制台打印了查询出的数据："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:b,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"也可以通过 findBy 方法根据条件查询："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { In } from "typeorm";\nimport { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n    const users = await AppDataSource.manager.findBy(User, {\n        age: 23\n    });\n    console.log(users);\n   \n}).catch(error => console.log(error))\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:f,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"此外，你还可以用 findAndCount 来拿到有多少条记录："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n    const [users, count] = await AppDataSource.manager.findAndCount(User);\n    console.log(users, count);\n\n}).catch(error => console.log(error))\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"会额外执行一个统计的 sql："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:u,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"count 是可以指定条件的："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n    const [users, count] = await AppDataSource.manager.findAndCountBy(User, {\n        age: 23\n    })\n    console.log(users, count);\n\n}).catch(error => console.log(error))\n'})}),"\n",(0,a.jsx)(n.p,{children:"可以看到，生成的 sql 里多了一个 where 条件："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"除了可以查询多条，还可以查询一条，使用 findOne："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n    const user = await AppDataSource.manager.findOne(User, {\n        select: {\n            firstName: true,\n            age: true\n        },\n        where: {\n            id: 4\n        },\n        order: {\n            age: \'ASC\'\n        }\n    });\n    console.log(user);\n\n}).catch(error => console.log(error))\n'})}),"\n",(0,a.jsx)(n.p,{children:"指定查询的 where 条件是 id 为 4 ，指定 select 的列为 firstName 和 age，然后 order 指定根据 age 升序排列。"}),"\n",(0,a.jsx)(n.p,{children:"查询结果如下:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:x,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"findOne 只是比 find 多加了个 LIMIT 1，其余的都一样。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { In } from "typeorm";\nimport { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n\n    const users = await AppDataSource.manager.find(User, {\n        select: {\n            firstName: true,\n            age: true\n        },\n        where: {\n            id: In([4, 8])\n        },\n        order: {\n            age: \'ASC\'\n        }\n    });\n    console.log(users);\n\n}).catch(error => console.log(error))\n'})}),"\n",(0,a.jsx)(n.p,{children:"把它改为 find，id 改为 In([4, 8]) 之后，结果如下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:j,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"通过 findOneBy 也可以："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n    const user = await AppDataSource.manager.findOneBy(User, {\n        age: 23\n    });\n    console.log(user);\n\n}).catch(error => console.log(error))\n\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:m,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"此外，findOne 还有两个特殊的方法："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { AppDataSource } from "./data-source"\nimport { User } from "./entity/User"\n\nAppDataSource.initialize().then(async () => {\n    try {\n        const user = await AppDataSource.manager.findOneOrFail(User, {\n            where: {\n                id: 666\n            }\n        });\n        console.log(user);\n    }catch(e) {\n        console.log(e);\n        console.log(\'没找到该用户\');\n    }\n\n}).catch(error => console.log(error))\n'})}),"\n",(0,a.jsx)(n.p,{children:"findOneOrFail 或者 findOneByOrFail，如果没找到，会抛一个 EntityNotFoundError 的异常："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"此外，你还可以用 query 方法直接执行 sql 语句："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { AppDataSource } from \"./data-source\"\n\nAppDataSource.initialize().then(async () => {\n\n    const users = await AppDataSource.manager.query('select * from user where age in(?, ?)', [21, 22]);\n    console.log(users);\n\n}).catch(error => console.log(error))\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"但复杂 sql 语句不会直接写，而是会用 query builder："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const queryBuilder = await AppDataSource.manager.createQueryBuilder();\n\nconst user = await queryBuilder.select("user")\n    .from(User, "user")\n    .where("user.age = :age", { age: 21 })\n    .getOne();\n\nconsole.log(user);\n'})}),"\n",(0,a.jsx)(n.p,{children:"生成的 sql 语句如下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"有同学说，用 query builder 和我用 find 指定 where 有什么区别么？"}),"\n",(0,a.jsx)(n.p,{children:"比如这种复杂的关联查询："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"涉及到多个表，也就是多个 Entity 的关联查询，就得用 query builder 了。"}),"\n",(0,a.jsx)(n.p,{children:"简单点查询直接 find 指定 where 条件就行。"}),"\n",(0,a.jsx)(n.p,{children:"此外，多条有关联的数据的增删改都离不开事务，怎么开启事务呢？"}),"\n",(0,a.jsx)(n.p,{children:"用 transaction 方法包裹下就好了。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"await AppDataSource.manager.transaction(async manager => {\n    await manager.save(User, {\n        id: 4,\n        firstName: 'eee',\n        lastName: 'eee',\n        age: 20\n    });\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"还有，调用每个方法的时候都要先传入实体类，这也太麻烦了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:t,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"有没有什么简便方法呢？"}),"\n",(0,a.jsx)(n.p,{children:"有，可以先调用 getRepository 传入 Entity，拿到专门处理这个 Entity 的增删改查的类，再调用这些方法："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"具体的方法和 EntityManager 是一样的。"}),"\n",(0,a.jsxs)(n.p,{children:["案例代码在",(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/typeorm-all-feature",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,a.jsxs)(n.h2,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"我们过了一遍 TypeORM 的各种概念，画个图总结下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"DataSource 里管理着数据库连接配置，数据库驱动包，调用它的 intialize 方法会创建和 mysql 的连接。"}),"\n",(0,a.jsx)(n.p,{children:"连接创建的时候，如果指定了 synchronize，会根据 Entitiy 生成建表 sql。"}),"\n",(0,a.jsx)(n.p,{children:"Entity 里通过 @Entity 指定和数据库表的映射，通过 @PrimaryGeneratedColumn 和 @Column 指定和表的字段的映射。"}),"\n",(0,a.jsx)(n.p,{children:"对 Entity 做增删改查通过 EntityManager 的 save、delete、find、createQueryBuilder 等方法。"}),"\n",(0,a.jsx)(n.p,{children:"如果只是对单个 Entity 做 CRUD，那可以先 getRepository 拿到对具体 Entity 操作的工具类，再调用 save、delete、find 等方法。"}),"\n",(0,a.jsx)(n.p,{children:"具体的 EntityManager 和 Repository 的方法有这些："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"save：新增或者修改 Entity，如果传入了 id 会先 select 再决定修改还新增"}),"\n",(0,a.jsx)(n.li,{children:"update：直接修改 Entity，不会先 select"}),"\n",(0,a.jsx)(n.li,{children:"insert：直接插入 Entity"}),"\n",(0,a.jsx)(n.li,{children:"delete：删除 Entity，通过 id"}),"\n",(0,a.jsx)(n.li,{children:"remove：删除 Entity，通过对象"}),"\n",(0,a.jsx)(n.li,{children:"find：查找多条记录，可以指定 where、order by 等条件"}),"\n",(0,a.jsx)(n.li,{children:"findBy：查找多条记录，第二个参数直接指定 where 条件，更简便一点"}),"\n",(0,a.jsx)(n.li,{children:"findAndCount：查找多条记录，并返回总数量"}),"\n",(0,a.jsx)(n.li,{children:"findByAndCount：根据条件查找多条记录，并返回总数量"}),"\n",(0,a.jsx)(n.li,{children:"findOne：查找单条记录，可以指定 where、order by 等条件"}),"\n",(0,a.jsx)(n.li,{children:"findOneBy：查找单条记录，第二个参数直接指定 where 条件，更简便一点"}),"\n",(0,a.jsx)(n.li,{children:"findOneOrFail：查找失败会抛 EntityNotFoundError 的异常"}),"\n",(0,a.jsx)(n.li,{children:"query：直接执行 sql 语句"}),"\n",(0,a.jsx)(n.li,{children:"createQueryBuilder：创建复杂 sql 语句，比如 join 多个 Entity 的查询"}),"\n",(0,a.jsx)(n.li,{children:"transaction：包裹一层事务的 sql"}),"\n",(0,a.jsx)(n.li,{children:"getRepository：拿到对单个 Entity 操作的类，方法同 EntityManager"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"这些概念和 api 在后面会经常用到，需要理解它们各自都是干啥的。"})]})}function X(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(V,{...e})}):V(e)}let J=X;X.__RSPRESS_PAGE_META={},X.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F54.%20%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1%20TypeORM.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"54. 快速掌握 TypeORM",headingTitle:"54. 快速掌握 TypeORM",frontmatter:{}}}}]);