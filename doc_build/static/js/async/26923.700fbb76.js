"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["26923"],{170314:function(n,e,s){n.exports=s.p+"static/image/4c5a38f877c86ef87aae1ead06ca22be.246bcccf.webp"},80233:function(n,e,s){n.exports=s.p+"static/image/7705cdf151a94e6b46c90ab6f67119f1.06473177.webp"},123940:function(n,e,s){n.exports=s.p+"static/image/7d9621915b470d011bf6a72e6af70b9a.78bf67af.gif"},821548:function(n,e,s){n.exports=s.p+"static/image/c59ffea76ccbff5cb7b305d3ff0baaf1.86ea84c3.webp"},189912:function(n,e,s){n.exports=s.p+"static/image/c69e7e6253a5c8ba4175e88a30a6f63b.251aaba6.webp"},610595:function(n,e,s){s.r(e),s.d(e,{default:()=>nb});var t=s(552676),a=s(740453);let r=s.p+"static/image/60e2089a9787b23d253cc3079d0d6243.be5e1917.gif",i=s.p+"static/image/5dbcec02a3a6f82fbb8e633c41be886c.67c94307.webp",c=s.p+"static/image/65ccfbfa7017473247127d202b17314b.aa11216a.gif",d=s.p+"static/image/ed284bc84fc9cc6d534480dd1b12bde5.d6b22c53.webp";var p=s(170314);let l=s.p+"static/image/1f38282f8c57a07d279e80cde4c80f90.8979a7ba.webp",o=s.p+"static/image/02b211faa9c2e182d64a12f3e2f9b550.e84eea01.gif",m=s.p+"static/image/1afeb4a08392669e6952532c70640ac9.cab68191.gif",x=s.p+"static/image/42c92c7c575406bbe8e3ff181efc5ddf.8c8fde91.webp",g=s.p+"static/image/e40143161e72b420cc862e7ec7999763.40e82a8e.webp",f=s.p+"static/image/2d7280e4b9eadb1b81e4bb1df0e8d0ef.feaab7b0.webp",h=s.p+"static/image/c2807460d6938dce62453375a20f22a1.7d421447.gif",j=s.p+"static/image/dc9686e3d747bb4a558f830b0771e39d.d60707e6.webp",b=s.p+"static/image/2c913f4b5b733c0c22225d6c44b1a3fc.efa2f07c.gif",u=s.p+"static/image/c7f3c83208ede425d6f91359f4ffdfbe.79589ac4.webp",w=s.p+"static/image/2f7a88f821ec88d65e69b195cd0219a7.b2773a60.webp",N=s.p+"static/image/849660f369c09922b2f95750cd929bed.b70755cc.gif",v=s.p+"static/image/924a19e018467cebd5295f55702f19ee.088a6b6d.webp",I=s.p+"static/image/b5e36eb32d2bc797e8ff4b0b0be75e9f.5e40e624.webp",L=s.p+"static/image/fc2bc07267cd00e75c0a6043ec5468eb.75c6c21c.gif",T=s.p+"static/image/7d2cabaca223c0ba2c1b911b9c6ed63c.3d3986ed.webp",k=s.p+"static/image/b3bcbb0471911fc9c0d63296d6e7a0ae.e20915dc.webp",C=s.p+"static/image/689a2007f01b38e9cde66e523e6675fa.74a7a8cf.webp",E=s.p+"static/image/106fc7f3093c8e115dad646a494cc815.807e7aa4.webp",D=s.p+"static/image/0d28dbba442d0b6f98db244daa4613a5.fdc90c56.webp",P=s.p+"static/image/952ac1688b92b088999a79a0463f0f72.047d19c8.webp",F=s.p+"static/image/1dde99f0d029602330445872f6a667d0.9298a4bf.webp",G=s.p+"static/image/6d9bc2f4e89cbe751850fa70caa1df51.80de5962.gif",y=s.p+"static/image/f25521bb4789187982e47065ba05c8e9.283dd7cf.webp",S=s.p+"static/image/f88e9901fc12b2489281633eff9f9961.9d8fc1ff.webp",A=s.p+"static/image/9953c7fe19807bafd24cd8618e900f71.a6da8f81.webp",B=s.p+"static/image/fe13bb57d0172aab6618989ec4f0423f.d72b2608.gif",R=s.p+"static/image/01f5ac61429da5aa9b6704d3c7f03a87.2cf62904.gif",_=s.p+"static/image/8b950ae5629933615a3451c434217d20.f37bfb5c.gif",O=s.p+"static/image/8ab4d3ddd4f86bfdca2eb8b6737f5bfd.1e4d26d1.webp",M=s.p+"static/image/5ac4c6d884a6ec8a2785418287bee7a0.a6a45621.webp";var z=s(80233);let H=s.p+"static/image/e9529ecc321aa54159f2f0a240be32e7.84ef0197.webp",Q=s.p+"static/image/7ac035ba511951b501d31fb526582ff3.0670cf8c.webp",q=s.p+"static/image/f883d7da09c923ae73021ea820055425.771ac6bd.webp",J=s.p+"static/image/b8221f14db631e94d33fd9d338aa02ec.c75c8bb9.gif",K=s.p+"static/image/74968cf7e53c1c62c0acf84dfdf6b891.0665dadd.webp",U=s.p+"static/image/aa2a986963a8f96d853b52a2585cd79e.3335d9f6.webp",V=s.p+"static/image/ef5922c647201ca86acc41e60e060e46.40794db2.webp",W=s.p+"static/image/7bf3a81f8b24a9c59782aeeb2ad5f7f1.83240729.webp",X=s.p+"static/image/f422d4f916746cc9eec584f310128ac0.006eff56.webp",Y=s.p+"static/image/bfeb6a0116dc88c2aeb4b0d753feb338.16d02223.webp",Z=s.p+"static/image/44ffe4c50e70b8395a75afd5dd9d4888.8a73e3ff.webp",$=s.p+"static/image/b249872c631327ca3d980ca82b209a4f.115e42ff.webp",nn=s.p+"static/image/200fc75d7bd336be04fad10a19d277d6.2e24eff7.webp",ne=s.p+"static/image/f40f80008cec971c89cc3712928ca916.1e39998c.webp",ns=s.p+"static/image/33cf6efd434c3dc7605656a3afd30275.ff881638.webp";var nt=s(189912),na=s(123940);let nr=s.p+"static/image/ef1947ec77d1dadfba9cd3387b753ffa.d2200fcf.webp";var ni=s(821548);let nc=s.p+"static/image/2e11834ef1e4247d0c6fd5783e6d9e50.afbb809f.webp",nd=s.p+"static/image/158635dbbc9382a5b1a9d4420273d34a.8dcb7e01.webp",np=s.p+"static/image/5b5c11837c2ee6be7edc266beaf29be9.f348f1c7.webp",nl=s.p+"static/image/97e86a1627a84e5cfca932e838d54323.e1c9097e.webp",no=s.p+"static/image/e0f4460545d58a8e16a3ef481f505870.bf8dc29c.webp",nm=s.p+"static/image/a06625ae8c4aec8deaf5482f70e6ddfa.f82c2ebc.webp",nx=s.p+"static/image/cc8a731005ef160df9aa1b1b7e31d617.5776b526.webp",ng=s.p+"static/image/c2cb94581e1ce31f8c02f03ca9d64187.59fe4d13.webp",nf=s.p+"static/image/823fa0c9806a461a1a7e444066a04dae.9ef26cea.webp";function nh(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"第52章react-dnd实战拖拽版todolist",children:["第52章—react-dnd实战：拖拽版TodoList",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第52章react-dnd实战拖拽版todolist",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"\uFEFF学了很多技术之后，这节来综合练习下，做个 Todo List。"}),"\n",(0,t.jsx)(e.p,{children:"当然，不是普通的那种，而是拖拽版："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:nf,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"可以拖拽右边的 Todo Item 到列表里："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:ng,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"拖拽到空白区域的时候，会高亮标出，松手后插入到该位置。"}),"\n",(0,t.jsx)(e.p,{children:"或者也可以拖动列表中的 TodoItem 调整顺序。"}),"\n",(0,t.jsx)(e.p,{children:"还可以拖到垃圾箱删除："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:nx,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"当拖动过来或者双击 TodoItem 的时候，可以进入编辑模式："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:nm,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"此外，Todo Item 勾选后代表完成："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:no,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"技术栈用 react-dnd + zustand + tailwind + react-spring。"}),"\n",(0,t.jsx)(e.p,{children:"列表的数据都在 Store 里存储："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:nl,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"增删改之后修改 Store 里的数据。"}),"\n",(0,t.jsx)(e.p,{children:"用 React Dnd 来做拖拽。"}),"\n",(0,t.jsx)(e.p,{children:"用 react-spring 实现过渡动画。"}),"\n",(0,t.jsx)(e.p,{children:"样式使用 Tailwind 的原子化样式来写。"}),"\n",(0,t.jsx)(e.p,{children:"需求理清了，我们正式上手写："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"npx create-vite\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:np,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"进入项目，去掉 StrictMode："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:nd,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"然后新建 TodoList/index.tsx 组件："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import { FC } from "react";\n\ninterface TodoListProps {\n\n}\n\nexport const TodoList:FC<TodoListProps> = (props) => {\n    \n    return <div></div>\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["按照 ",(0,t.jsx)(e.a,{href:"https://www.tailwindcss.cn/docs/guides/vite#react",target:"_blank",rel:"noopener noreferrer",children:"tailwind 文档"}),"里的步骤安装 tailwind："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"npm install -D tailwindcss postcss autoprefixer\n\nnpx tailwindcss init -p\n"})}),"\n",(0,t.jsx)(e.p,{children:"会生成 tailwind 和 postcss 配置文件："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:nc,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"修改下 content 配置，也就是从哪里提取 className："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'/** @type {import(\'tailwindcss\').Config} */\nexport default {\n  content: [\n    "./index.html",\n    "./src/**/*.{js,ts,jsx,tsx}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["前面 ",(0,t.jsx)(e.a,{href:"https://juejin.cn/book/7294082310658326565",target:"_blank",rel:"noopener noreferrer",children:"tailwind 那节"}),"讲过，tailwind 会提取 className 之后按需生成最终的 css。"]}),"\n",(0,t.jsx)(e.p,{children:"改下 index.css 引入 tailwind 基础样式："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-css",children:"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"})}),"\n",(0,t.jsx)(e.p,{children:"安装 tailwind 插件之后："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:ni,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"在写代码的时候就会提示 className 和对应的样式值："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:nr,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"这个插件触发提示需要先敲一个空格，这点要注意下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:na,alt:""})}),"\n",(0,t.jsxs)(e.p,{children:["有的你不知道 className 叫啥的样式，还可以在 ",(0,t.jsx)(e.a,{href:"https://www.tailwindcss.cn/docs/border-width",target:"_blank",rel:"noopener noreferrer",children:"tailwind 文档"}),"里搜："]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:nt,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"改下 TodoList 的样式："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import { FC } from "react";\n\ninterface TodoListProps {\n\n}\n\nexport const TodoList:FC<TodoListProps> = (props) => {\n\n    return <div className="w-1000 h-600 m-auto mt-100 p-10 border-2 border-black"></div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"设置 width 1000，height 600，margin-top 100 padding 10 然后 border 2"}),"\n",(0,t.jsx)(e.p,{children:"在 App.tsx 引入下："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { TodoList } from './TodoList'\n\nfunction App() {\n\n  return <TodoList></TodoList>\n}\n\nexport default App\n"})}),"\n",(0,t.jsx)(e.p,{children:"把开发服务跑起来："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"npm install\n\nnpm run dev\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:ns,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"为啥部分样式没生效呢？"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:ne,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"因为像 w-1000 h-600 mt-100 这种，在内置的 className 里并没有。"}),"\n",(0,t.jsx)(e.p,{children:"需要在 tailwind.config.js 里配置下："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      width: {\n        1000: '1000px',\n      },\n      height: {\n        600: '600px'\n      },\n      margin: {\n        100: '100px'\n      }\n    },\n  },\n  plugins: [],\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"这样就好了："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:nn,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"然后继续写布局："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import { FC } from "react";\n\ninterface TodoListProps {\n\n}\n\nexport const TodoList:FC<TodoListProps> = (props) => {\n\n\n    return <div className={`\n            w-1000 h-600 m-auto mt-100 p-10\n            border-2 border-black\n            flex justify-between items-start\n        `}>\n        <div className="flex-2 h-full mr-10 bg-blue-400 overflow-auto">\n        </div>\n\n        <div className="flex-1 h-full bg-blue-400">\n\n        </div>\n    </div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"父元素 display:flex，然后 子元素分别 2 和 1 的比例，设置 margin-right:10px"}),"\n",(0,t.jsx)(e.p,{children:"这里 h-full 是 height:100%"}),"\n",(0,t.jsx)(e.p,{children:"flex-2 要配置下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:$,alt:""})}),"\n",(0,t.jsxs)(e.p,{children:["看一下：\n",(0,t.jsx)("img",{src:Z,alt:""})]}),"\n",(0,t.jsx)(e.p,{children:"你会发现 margin 和 padding 都不是 10px，而是 2.5rem"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:Y,alt:""})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:X,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"我们在 tailwind.config.js 里覆盖下："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      width: {\n        1000: '1000px',\n        600: '600px'\n      },\n      height: {\n        600: '600px'\n      },\n      margin: {\n        100: '100px',\n        10: '10px'\n      },\n      padding: {\n        10: '10px'\n      },\n      flex: {\n        2: 2\n      }\n    },\n  },\n  plugins: [],\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"这样就好了："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:W,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"然后去掉背景颜色，添加 List、GarbageBin、NewItem 这三个组件："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import { FC } from "react";\nimport classNames from "classnames";\nimport { NewItem } from "./NewItem";\nimport { GarbageBin } from "./GarbageBin";\nimport { List } from "./List";\n\ninterface TodoListProps {\n\n}\n\nexport const TodoList:FC<TodoListProps> = (props) => {\n\n\n    return <div className={classNames(\n            "w-1000 h-600 m-auto mt-100 p-10",\n            "border-2 border-black",\n            "flex justify-between items-start"\n        )}>\n        <div className="flex-2 h-full mr-10 overflow-auto">\n            <List/>\n        </div>\n\n        <div className={classNames(\n            "flex-1 h-full",\n            "flex flex-col justify-start"\n        )}>\n            <NewItem/>\n            <GarbageBin className={"mt-100"}/>\n        </div>\n    </div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"这里多行 className 换成用 classnames 包来写。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"npm install --save classnames\n"})}),"\n",(0,t.jsx)(e.p,{children:"分别添加 GarbageBin.tsx"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames"\nimport { FC } from "react"\n\ninterface GarbaseProps{\n    className?: string | string[]\n}\n\nexport const GarbageBin: FC<GarbaseProps> = (props) => {\n    \n    const cs = classNames(\n        "h-100 border-2 border-black",\n        props.className\n    );\n\n    return <div className={cs}></div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"NewItem.tsx"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames"\nimport { FC } from "react"\n\ninterface NewItemProps{\n    className?: string | string[]\n}\n\nexport const NewItem: FC<NewItemProps> = (props) => {\n    \n    const cs = classNames(\n        "h-200 border-2 border-black",\n        props.className\n    );\n\n    return <div className={cs}></div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"还有 List.tsx"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames"\nimport { FC } from "react"\n\ninterface ListProps{\n    className?: string | string[]\n}\n\nexport const List: FC<ListProps> = (props) => {\n    \n    const cs = classNames(\n        "h-full border-2 border-black",\n        props.className\n    );\n\n    return <div className={cs}></div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"这里的 h-200、h-100 要在配置文件里加一下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:V,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"现在界面是这样的："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:U,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"然后先来实现 List 组件部分："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames"\nimport { FC } from "react"\n\ninterface ListProps{\n    className?: string | string[]\n}\n\nexport const List: FC<ListProps> = (props) => {\n    \n    const cs = classNames(\n        "h-full p-10",\n        props.className\n    );\n\n    return <div className={cs}>\n        <Item/>\n        <Item/>\n        <Item/>\n        <Item/>\n        <Item/>\n        <Item/>\n        <Item/>\n    </div>\n}\n\nfunction Item() {\n    return <div className={classNames(\n        "h-100 border-2 border-black bg-blue-300 mb-10 p-10",\n        "flex justify-start items-center",\n        "text-xl tracking-wide"\n    )}>\n        <input type="checkbox" className="w-40 h-40 mr-10"/>\n        <p>待办事项</p>\n    </div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"配置文件加一下 w-40、h-40 的配置："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:K,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"看下效果："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:J,alt:""})}),"\n",(0,t.jsxs)(e.p,{children:["里面用到的 className 可以去查 ",(0,t.jsx)(e.a,{href:"https://www.tailwindcss.cn/docs/user-select",target:"_blank",rel:"noopener noreferrer",children:"tailwind 文档"}),"。"]}),"\n",(0,t.jsx)(e.p,{children:"然后是 NewItem 组件："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames"\nimport { FC } from "react"\n\ninterface NewItemProps{\n    className?: string | string[]\n}\n\nexport const NewItem: FC<NewItemProps> = (props) => {\n    \n    const cs = classNames(\n        "h-100 border-2 border-black",\n        "leading-100 text-center text-2xl",\n        "bg-green-300",\n        "cursor-move select-none",\n        props.className\n    );\n\n    return <div className={cs}>新的待办事项</div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"GarbageBin 组件："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames"\nimport { FC } from "react"\n\ninterface GarbaseProps{\n    className?: string | string[]\n}\n\nexport const GarbageBin: FC<GarbaseProps> = (props) => {\n    \n    const cs = classNames(\n        "h-200 border-2 border-black",\n        "bg-orange-300",\n        "leading-200 text-center text-2xl",\n        "cursor-move select-none",\n        props.className\n    );\n\n    return <div className={cs}>垃圾箱</div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"在配置文件里加一下两个 line-height："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      width: {\n        1000: '1000px',\n        600: '600px',\n        40: '40px'\n      },\n      height: {\n        600: '600px',\n        200: '200px',\n        100: '100px',\n        40: '40px'\n      },\n      margin: {\n        100: '100px',\n        10: '10px'\n      },\n      padding: {\n        10: '10px'\n      },\n      flex: {\n        2: 2\n      },\n      lineHeight: {\n        100: '100px',\n        200: '200px'\n      }\n    },\n  },\n  plugins: [],\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:q,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"其实这些 width、height、margin、padding 的值的覆盖可以统一放到 spacing 里："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:Q,alt:""})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      spacing: {\n        10: '10px',\n        40: '40px',\n        100: '100px',\n        200: '200px',\n        600: '600px',\n        1000: '1000px',\n      },\n      width: {\n        // 1000: '1000px',\n        // 600: '600px',\n        // 40: '40px',\n        // 10: '10px'\n      },\n      height: {\n        // 600: '600px',\n        // 200: '200px',\n        // 100: '100px',\n        // 40: '40px',\n        // 10: '10px'\n      },\n      margin: {\n        // 100: '100px',\n        // 10: '10px'\n      },\n      padding: {\n        // 10: '10px'\n      },\n      flex: {\n        2: 2\n      },\n      lineHeight: {\n        100: '100px',\n        200: '200px'\n      }\n    },\n  },\n  plugins: [],\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:"https://www.tailwindcss.cn/docs/customizing-spacing",target:"_blank",rel:"noopener noreferrer",children:"tailwind 文档"}),"里写了，很多样式都继承 spacing 的配置："]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:H,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"或者不想全局改默认配置，也可以用 text-[14px] 这种方式。"}),"\n",(0,t.jsx)(e.p,{children:"text-[14px] 就会生成 font-size:14px 的样式："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:z,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"接下来加上 react-dnd 来做拖拽。"}),"\n",(0,t.jsx)(e.p,{children:"安装用到的包："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"npm install react-dnd react-dnd-html5-backend\n"})}),"\n",(0,t.jsx)(e.p,{children:"在 main.tsx 引入下 DndProvider"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:M,alt:""})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n)\n"})}),"\n",(0,t.jsx)(e.p,{children:"它是 react-dnd 用来跨组件传递数据的。"}),"\n",(0,t.jsx)(e.p,{children:"在 NewItem.tsx 组件里用 useDrag 添加拖拽："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames"\nimport { FC, useEffect, useRef } from "react"\nimport { useDrag } from "react-dnd";\n\ninterface NewItemProps{\n    className?: string | string[]\n}\n\nexport const NewItem: FC<NewItemProps> = (props) => {\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ dragging }, drag] = useDrag({\n        type: \'new-item\',\n        item: {},\n        collect(monitor) {\n            return {\n                dragging: monitor.isDragging()\n            }\n        }\n    });\n\n    useEffect(() => {\n        drag(ref);\n    }, []);\n\n    const cs = classNames(\n        "h-100 border-2 border-black",\n        "leading-100 text-center text-2xl",\n        "bg-green-300",\n        "cursor-move select-none",\n        dragging ? \'border-dashed bg-white\' : \'\',\n        props.className\n    );\n\n    return <div ref={ref} className={cs}>新的待办事项</div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:O,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"拖动过程中，设置 border 虚线、背景白色。"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:_,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"然后在 List 的 Item 也加上 useDrag 拖拽："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'function Item() {\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ dragging }, drag] = useDrag({\n        type: \'list-item\',\n        item: {},\n        collect(monitor) {\n            return {\n                dragging: monitor.isDragging()\n            }\n        }\n    });\n\n    useEffect(() => {\n        drag(ref);\n    }, []);\n\n    return <div ref={ref} className={classNames(\n        "h-100 border-2 border-black bg-blue-300 mb-10 p-10",\n        "flex justify-start items-center",\n        "text-xl tracking-wide",\n        dragging ? \'bg-white border-dashed\' : \'\'\n    )}>\n        <input type="checkbox" className="w-10 h-10 mr-10"/>\n        <p>待办事项</p>\n    </div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:R,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"在垃圾箱添加 useDrop："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames"\nimport { FC, useEffect, useRef } from "react"\nimport { useDrop } from "react-dnd";\n\ninterface GarbaseProps{\n    className?: string | string[]\n}\n\nexport const GarbageBin: FC<GarbaseProps> = (props) => {\n    \n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ isOver }, drop] = useDrop(() => {\n        return {\n            accept: \'list-item\',\n            drop(item) {},\n            collect(monitor) {\n                return {\n                    isOver: monitor.isOver()\n                }\n            }\n        }\n    });\n\n    useEffect(()=> {\n        drop(ref);\n    }, []);\n    \n\n    const cs = classNames(\n        "h-200 border-2 border-black",\n        "bg-orange-300",\n        "leading-200 text-center text-2xl",\n        "cursor-move select-none",\n        isOver ? "bg-yellow-400 border-dashed" : "",\n        props.className\n    );\n\n    return <div ref={ref} className={cs}>垃圾箱</div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"accept 指定了 list-item，只有对应的 type 拖拽到这里才能触发 isOver："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:B,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"那新的 todo item 拖到哪里呢？"}),"\n",(0,t.jsxs)(e.p,{children:["到这里：\n",(0,t.jsx)("img",{src:A,alt:""})]}),"\n",(0,t.jsx)(e.p,{children:"所以我们要把这些地方也新建个组件，然后添加 useDrop："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:S,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"去掉之前 Item 的 mt-10 换成 Gap 的 h-10："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames"\nimport { FC, useEffect, useRef } from "react"\nimport { useDrag, useDrop } from "react-dnd";\n\ninterface ListProps{\n    className?: string | string[]\n}\n\nexport const List: FC<ListProps> = (props) => {\n    \n    const cs = classNames(\n        "h-full p-10",\n        props.className\n    );\n\n    return <div className={cs}>\n        <Gap/>\n        <Item/>\n        <Gap/>\n        <Item/>\n        <Gap/>\n        <Item/>\n        <Gap/>\n        <Item/>\n        <Gap/>\n        <Item/>\n        <Gap/>\n        <Item/>\n        <Gap/>\n        <Item/>\n        <Gap/>\n    </div>\n}\n\nfunction Gap() {\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ isOver }, drop] = useDrop(() => {\n        return {\n            accept: \'new-item\',\n            drop(item) {},\n            collect(monitor) {\n                return {\n                    isOver: monitor.isOver()\n                }\n            }\n        }\n    });\n\n    useEffect(()=> {\n        drop(ref);\n    }, []);\n\n    const cs = classNames(\n        "h-10",\n        isOver ? \'bg-red-300\' : \'\'\n    );\n\n    return <div ref={ref} className={cs}></div>\n}\n\nfunction Item() {\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ dragging }, drag] = useDrag({\n        type: \'list-item\',\n        item: {},\n        collect(monitor) {\n            return {\n                dragging: monitor.isDragging()\n            }\n        }\n    });\n\n    useEffect(() => {\n        drag(ref);\n    }, []);\n\n    return <div ref={ref} className={classNames(\n        "h-100 border-2 border-black bg-blue-300 p-10",\n        "flex justify-start items-center",\n        "text-xl tracking-wide",\n        dragging ? \'bg-white border-dashed\' : \'\'\n    )}>\n        <input type="checkbox" className="w-40 h-40 mr-10"/>\n        <p>待办事项</p>\n    </div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"覆盖下 w-10、h-10 的值，默认是 rem，我们还是用 px："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"现在 new-item 就能拖过来了："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:G,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"现在 Gap 和 Item 代码挺多了，分离出去作为单独的模块 Gap.tsx 和 Item.tsx"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:F,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"接下来处理下具体的状态逻辑。"}),"\n",(0,t.jsx)(e.p,{children:"安装 zustand："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"npm install --save zustand\n"})}),"\n",(0,t.jsx)(e.p,{children:"创建 TodoList/Store.ts"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { create } from 'zustand';\n\nexport interface ListItem {\n  id: string,\n  status: 'todo' | 'done',\n  content: string\n}\n\ntype State = {\n  list: Array<ListItem>\n}\n\ntype Action = {\n  addItem: (item: ListItem) => void,\n  deleteItem: (id: string) => void,\n  updateItem: (item: ListItem) => void,\n}\n\nexport const useTodoListStore = create<State & Action>((set) => ({\n  list: [],\n  addItem: (item: ListItem) => {\n    set((state) => {\n      return {\n        list: [\n          ...state.list,\n          item\n        ]\n      }\n    })\n  },\n  deleteItem: (id: string) => {\n    set((state) => {\n      return {\n        list: state.list.filter(item => {\n          return item.id !== id;\n        })\n      }\n    });\n  },\n  updateItem: (updateItem: ListItem) => {\n    set(state => {\n      return {\n        list: state.list.map(item => {\n          if(item.id === updateItem.id) {\n            return updateItem;\n          }\n          return item;\n        })\n      }\n    })\n  }\n}))\n"})}),"\n",(0,t.jsx)(e.p,{children:"state 就是 list，然后添加 addItem、deleteItem、updateItem 的方法。"}),"\n",(0,t.jsx)(e.p,{children:"在 List 组件里引入下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:P,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"传入 data，顺便指定 key："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames"\nimport { FC, Fragment} from "react"\nimport { Gap } from "./Gap";\nimport { Item } from "./Item";\nimport { useTodoListStore } from "./store";\n\ninterface ListProps{\n    className?: string | string[]\n}\n\nexport const List: FC<ListProps> = (props) => {\n    \n    const list = useTodoListStore(state => state.list);\n\n    const cs = classNames(\n        "h-full p-10",\n        props.className\n    );\n\n    return <div className={cs}>\n        {\n            list.length ? list.map(item => {\n                return <Fragment key={item.id}>\n                    <Gap/>\n                    <Item data={item} />\n                </Fragment>\n            }) : \'暂无待办事项\'\n        }\n        <Gap/>\n    </div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"<Fragment> 也可以写 <></>，它只是用来给多个 children 包一层，但不会生成 dom 节点。"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:D,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"在 Item 组件添加 content 参数："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:E,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"看下效果："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:C,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"我们加一下添加 item 的处理："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:k,alt:""})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import classNames from \"classnames\";\nimport { useEffect, useRef } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { useTodoListStore } from \"./store\";\n\nexport function Gap() {\n    const addItem = useTodoListStore(state => state.addItem);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ isOver }, drop] = useDrop(() => {\n        return {\n            accept: 'new-item',\n            drop(item) {\n                addItem({\n                    id: Math.random().toString().slice(2, 8),\n                    status: 'todo',\n                    content: '待办事项'\n                });\n            },\n            collect(monitor) {\n                return {\n                    isOver: monitor.isOver()\n                }\n            }\n        }\n    });\n\n    useEffect(()=> {\n        drop(ref);\n    }, []);\n\n    const cs = classNames(\n        \"h-10\",\n        isOver ? 'bg-red-300' : ''\n    );\n\n    return <div ref={ref} className={cs}></div>\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"这里用 Math.random 生成 6 位的随机数："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:T,alt:""})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:L,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"然后加一下删除的处理："}),"\n",(0,t.jsx)(e.p,{children:"drag 的时候加上传递的数据："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:I,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"drop 的时候拿到 id 执行删除："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"测试下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:N,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"删除也没问题。"}),"\n",(0,t.jsx)(e.p,{children:"然后加上编辑功能："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:w,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"用两个 state 分别保存 editing 状态和 input 内容。"}),"\n",(0,t.jsx)(e.p,{children:"onDoubleClick 的时候显示 input，修改 editing 状态为 true。"}),"\n",(0,t.jsx)(e.p,{children:"onBlur 的时候修改 editing 状态为 false。"}),"\n",(0,t.jsx)(e.p,{children:"并且用 updateItem 更新状态："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"没啥问题："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"然后当选中 checkbox 的时候，也要 updateItem："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import classNames from "classnames";\nimport { useEffect, useRef, useState } from "react";\nimport { useDrag } from "react-dnd";\nimport { ListItem, useTodoListStore } from "./store";\n\ninterface ItemProps {\n    data: ListItem\n}\n\nexport function Item(props: ItemProps) {\n\n    const {\n        data\n    } = props;\n\n    const updateItem = useTodoListStore(state => state.updateItem);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [editing, setEditing] = useState(false);\n\n    const [editingContent, setEditingContent] = useState(data.content);\n\n    const [{ dragging }, drag] = useDrag({\n        type: \'list-item\',\n        item: {\n            id: data.id\n        },\n        collect(monitor) {\n            return {\n                dragging: monitor.isDragging()\n            }\n        }\n    });\n\n    useEffect(() => {\n        drag(ref);\n    }, []);\n\n    return <div ref={ref} className={classNames(\n            "h-100 border-2 border-black bg-blue-300 p-10",\n            "flex justify-start items-center",\n            "text-xl tracking-wide",\n            dragging ? \'bg-white border-dashed\' : \'\'\n        )}\n        onDoubleClick={() => {\n            setEditing(true)\n        }}\n    >\n        <input \n            type="checkbox" \n            className="w-40 h-40 mr-10"\n            checked={data.status === \'done\' ? true : false}\n            onChange={(e) => {\n                updateItem({\n                    ...data,\n                    status: e.target.checked ? \'done\' : \'todo\'\n                })\n            }}\n        />\n        <p>\n            {\n                editing ? <input \n                    value={editingContent}\n                    onChange={(e) => {\n                        setEditingContent(e.target.value)\n                    }}\n                    onBlur={() => {\n                        setEditing(false);\n                        updateItem({\n                            ...data,\n                            content: editingContent\n                        })\n                    }}\n                /> : data.content \n            }\n        </p>\n    </div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"还有，现在不管拖动到哪里都是在后面插入："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"我们希望能根据 drop 的位置来插入："}),"\n",(0,t.jsx)(e.p,{children:"所以给 Gap 传入 id 参数："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"然后 Gap 组件 drop 的时候传入 addItem 方法："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"addItem 方法里根据 id 插入："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"没有传就插入在后面，否则 findIndex，然后在那个位置插入。"}),"\n",(0,t.jsx)(e.p,{children:"测试下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,t.jsx)(e.p,{children:"不过 gap 区域有点小，大家实现的时候可以改大一点。"}),"\n",(0,t.jsx)(e.p,{children:"还有，现在一刷新，数据就没了："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"我们给 zustand 加上 persist 中间件："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"注意，ts + middleware 的场景，zustand 要换这种写法。"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:"https://github.com/pmndrs/zustand/blob/main/docs/guides/typescript.md",target:"_blank",rel:"noopener noreferrer",children:"文档的解释"}),"是为了更好的处理类型："]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"反正功能是一样的。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { StateCreator, create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport interface ListItem {\n  id: string,\n  status: 'todo' | 'done',\n  content: string\n}\n\ntype State = {\n  list: Array<ListItem>\n}\n\ntype Action = {\n  addItem: (item: ListItem, id?: string) => void,\n  deleteItem: (id: string) => void,\n  updateItem: (item: ListItem) => void,\n}\n\nconst stateCreator: StateCreator<State & Action> = (set) => ({\n  list: [],\n  addItem: (item: ListItem, id?: string) => {\n    set((state) => {\n      if(!id) {\n        return {\n          list: [\n            ...state.list,\n            item\n          ]\n        }\n      }\n\n      const newList = [\n        ...state.list, \n      ];\n\n      const index = newList.findIndex(item => item.id === id);\n\n      newList.splice(index, 0, item);\n\n      return {\n        list: newList\n      }\n    })\n  },\n  deleteItem: (id: string) => {\n    set((state) => {\n      return {\n        list: state.list.filter(item => {\n          return item.id !== id;\n        })\n      }\n    });\n  },\n  updateItem: (updateItem: ListItem) => {\n    set(state => {\n      return {\n        list: state.list.map(item => {\n          if(item.id === updateItem.id) {\n            return updateItem;\n          }\n          return item;\n        })\n      }\n    })\n  }\n});\n\nexport const useTodoListStore = create<State & Action>()(persist(stateCreator, {\n  name: 'todolist'\n}));\n"})}),"\n",(0,t.jsx)(e.p,{children:"测试下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"现在，数据就被保存到了 localstorage 中，刷新数据也不会丢失。"}),"\n",(0,t.jsx)(e.p,{children:"这样，拖拽版 TodoList 就完成了。"}),"\n",(0,t.jsx)(e.p,{children:"大家还可以加个拖拽排序功能，和上节实现一样。"}),"\n",(0,t.jsx)(e.p,{children:"最后，我们加上过渡动画，用 react-spring："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"npm install --save @react-spring/web\n"})}),"\n",(0,t.jsx)(e.p,{children:"然后渲染 list 的时候用 react-spring 的 useTransition 的 hook 处理下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"useTransition 会根据传入的配置来生成 style，这些 style 要加在 animated.div 上。"}),"\n",(0,t.jsx)(e.p,{children:"并且，keys 也是在配置里传入的，animated.div 会自动添加。"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:r,alt:""})}),"\n",(0,t.jsxs)(e.p,{children:["案例代码上传了",(0,t.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/todolist-drag",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,t.jsxs)(e.h2,{id:"总结",children:["总结",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"我们用 react-dnd + zustand 实现了拖拽版 todolist。"}),"\n",(0,t.jsx)(e.p,{children:"用 tailwind 来写的样式。"}),"\n",(0,t.jsx)(e.p,{children:"用 @react-spring/web 加上了过渡动画。"}),"\n",(0,t.jsx)(e.p,{children:"这是个综合实战，对 react-dnd、tailwind、zustand、react-spring 都有较全面的应用。"})]})}function nj(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(nh,{...n})}):nh(n)}let nb=nj;nj.__RSPRESS_PAGE_META={},nj.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC52%E7%AB%A0%E2%80%94react-dnd%E5%AE%9E%E6%88%98%EF%BC%9A%E6%8B%96%E6%8B%BD%E7%89%88TodoList.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第52章—react-dnd实战：拖拽版TodoList",headingTitle:"第52章—react-dnd实战：拖拽版TodoList",frontmatter:{}}}}]);