"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["22894"],{114923:function(n,e,s){s.r(e),s.d(e,{default:()=>x});var r=s(552676),i=s(740453);let c=s.p+"static/image/483cf2ab7ce503777e0eca7d92775f1c.594b23e9.webp",h=s.p+"static/image/96883cc563446c012dd7f1b4eb7730d3.cae9f92e.webp",d=s.p+"static/image/968154e3ef9186846460b8a85404473e.9ffc0ca9.webp",l=s.p+"static/image/7e1af0b286c196a08658e3644d6e3af1.1cd5585c.webp",t=s.p+"static/image/670e126599f5cf6664c6896dfdd04ca8.b0699d7d.webp";function a(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",pre:"pre",code:"code",img:"img",h4:"h4",ol:"ol",li:"li",blockquote:"blockquote"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"49失败的-gpt-接入",children:["49.失败的 GPT 接入",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#49失败的-gpt-接入",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["去年的 ",(0,r.jsx)(e.strong,{children:"GPT"})," 横空出世以来，到现在大家伙也或者或少都一直接触过了 ",(0,r.jsx)(e.strong,{children:"GPT"})," 相关的产品，比如文生图、查询问题、机器人对话等等。"]}),"\n",(0,r.jsxs)(e.p,{children:["除此之外，还有各种编程插件也接入了 ",(0,r.jsx)(e.strong,{children:"GPT"}),"，帮助我们来进行",(0,r.jsx)(e.strong,{children:"单元测试"}),"、",(0,r.jsx)(e.strong,{children:"文档编写"}),"、",(0,r.jsx)(e.strong,{children:"辅助编程"}),"等等各种开发场景，确实对研发效率有了质的提升同时对产品质量上也是很高的保障。"]}),"\n",(0,r.jsxs)(e.h2,{id:"安装",children:["安装",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["接下里我们将使用比较常见的 ",(0,r.jsx)(e.strong,{children:"gpt-3.5"})," 来作为模型， 进行后续的测试。"]}),"\n",(0,r.jsxs)(e.p,{children:["首先安装 ",(0,r.jsx)(e.strong,{children:"openai"})," 的 ",(0,r.jsx)(e.strong,{children:"node"})," 包："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"pnpm i openai\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"根据文档直接初始化调用即可："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"@ApiOperation({\n    summary: 'openai',\n  })\n  @Post('openai')\n  async openai() {\n    const openai = new OpenAI({\n      apiKey: this.OPENAI_API_KEY,\n    });\n    console.log('openai===>', openai);\n    const params: OpenAI.Chat.ChatCompletionCreateParams = {\n      messages: [{ role: 'user', content: 'Say this is a test' }],\n      model: 'gpt-3.5-turbo',\n    };\n    const chatCompletion: OpenAI.Chat.ChatCompletion =\n      await openai.chat.completions.create(params);\n    return chatCompletion;\n  }\n"})}),"\n",(0,r.jsxs)(e.p,{children:["如下是 ",(0,r.jsx)(e.strong,{children:"GPT"})," 正常的返回值:"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["接下来我们需要对它进行一定的 ",(0,r.jsx)(e.strong,{children:"prompt"})," 矫正，拿到我们预期的结果。"]}),"\n",(0,r.jsxs)(e.h2,{id:"调试",children:["调试",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#调试",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["首先要了解一点，",(0,r.jsx)(e.strong,{children:"大模型无记忆特性的"}),"，也就意味着大部分的内容其实都是一次性的提示，除非你以及预先生成好了各种模板，否则你会发现得到的回答几乎给不了你很多帮助，这个跟你直接使用 ",(0,r.jsx)(e.strong,{children:"GPT"})," 的网页端的 ",(0,r.jsx)(e.strong,{children:"BOT"})," 并非一样，因为 ",(0,r.jsx)(e.strong,{children:"BOT"})," 已经帮你记录了一些上下文历史数据，但如果你去调用则需要自行维护这些内容。"]}),"\n",(0,r.jsxs)(e.h4,{id:"第一次调试",children:["第一次调试",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第一次调试",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["接下来，我们来了解一下上传参数中 ",(0,r.jsx)(e.strong,{children:"role"})," 的含义："]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"System Role"})," 是指对模型的输入进行指定，以便模型在生成回复时具有特定的角色或身份，可以理解为预设模型作为一个具体方向的角色，避免模型自我发散；"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"User Role"})," 用户消息一般是直接给到 ",(0,r.jsx)(e.strong,{children:"GPT"})," 的一些指令；"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Assistant Role"})," 作为 ",(0,r.jsx)(e.strong,{children:"GPT"})," 自己的响应，一般也可以不带。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["所以，我们进行第一次的 ",(0,r.jsx)(e.strong,{children:"prompt"})," 的优化，可以从 ",(0,r.jsx)(e.strong,{children:"System Role"})," 进行："]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["接下来的内容都将只写 ",(0,r.jsx)(e.strong,{children:"prompt"})," 的修改"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"  messages: [\n    {\n      role: 'system',\n      content: '你是一个低代码领域的专家，擅长进行各种Schema的编写',\n    },\n    { role: 'user', content: '帮我生成一个CURD用户的低代码Schema' },\n  ],\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["如上图所示，它确实很棒，已经帮我们返回了一段标准关于用户 ",(0,r.jsx)(e.strong,{children:"CURD"})," 的低代码 ",(0,r.jsx)(e.strong,{children:"Schema"}),"，但仅次并不能够直接使用，因为他的回复是一个自然语言，携带了非常多的其他的内容，这些并不是能转成低代码程序能够直接使用的模块。"]}),"\n",(0,r.jsxs)(e.h4,{id:"继续调试",children:["继续调试",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#继续调试",children:"#"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"messages: [\n    {\n      role: 'system',\n      content: '你是一个低代码领域的专家，擅长进行各种Schema的编写',\n    },\n    {\n      role: 'system',\n      content: '当你收到以JSON结尾的时候，只需要返回格式化好的Schmea',\n    },\n    {\n      role: 'user',\n      content: '帮我生成一个CURD用户的低代码Schema，以JSON结尾',\n    },\n],\n"})}),"\n",(0,r.jsxs)(e.p,{children:["请注意，我们新增加了一条 ",(0,r.jsx)(e.strong,{children:"prompt"})," ",(0,r.jsx)(e.code,{children:"以JSON结尾"}),"，当 ",(0,r.jsx)(e.strong,{children:"GPT"})," 接收到了带有这条信息结尾的时候，将直接返回它生成好的 ",(0,r.jsx)(e.strong,{children:"Schema"}),"，无关的内容将会省略，这样方便我们直接拿到结果进行转换。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["如上所示的返回值，我们将 ",(0,r.jsx)(e.code,{children:"/n"})," 跟 ",(0,r.jsx)(e.code,{children:'/"'})," 进行转换之后，可以得到一份正常的 ",(0,r.jsx)(e.strong,{children:"Json"})," 格式的 ",(0,r.jsx)(e.strong,{children:"Schmea"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["但这还是远不能满足我们的需求，已经这个 ",(0,r.jsx)(e.strong,{children:"Schema"})," 并非是对应我们的低代码系统。"]}),"\n",(0,r.jsxs)(e.p,{children:["所以还需要更进一步的进行 ",(0,r.jsx)(e.strong,{children:"Prompt"})," 的优化，但我深深的思考了一下得出下面的一些结论："]}),"\n",(0,r.jsxs)(e.h4,{id:"继续尝试",children:["继续尝试",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#继续尝试",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"后续我进行了无数的尝试，为了生成足够准确的代码，喂了不少的数据模型，但最终得出来的内容虽然已经足够准确但还是需要进行人工进行校准，这就与我想要的完美结果有所差距。"}),"\n",(0,r.jsxs)(e.p,{children:["而且无论是 ",(0,r.jsx)(e.strong,{children:"MFF"})," 的方案还是老王的低代码方案，前提都是以 ",(0,r.jsx)(e.strong,{children:"Schema"})," 为结果的驱动，特别在 ",(0,r.jsx)(e.strong,{children:"MFF"})," 方案中，我们借助了 ",(0,r.jsx)(e.strong,{children:"OPENAPI"})," 的规则来进行转换成低代码搭建的 ",(0,r.jsx)(e.strong,{children:"Schema"}),"。"]}),"\n",(0,r.jsxs)(e.p,{children:["对于 ",(0,r.jsx)(e.strong,{children:"GPT"})," 来说，其实是在把一段已经",(0,r.jsx)(e.strong,{children:"规则明确的内容"}),"告诉它，然后再让它帮我重新组装成一套新的结构返回给我。"]}),"\n",(0,r.jsxs)(e.p,{children:["但实际上，对于已知规则的结构体来说，使用 ",(0,r.jsx)(e.strong,{children:"GPT"})," 就大材小用了，因为可以通过函数代码来完成转换，如同我们在搭建工程中提到的转换代码。"]}),"\n",(0,r.jsxs)(e.p,{children:["所有最后的完美结合居然是使用 ",(0,r.jsx)(e.strong,{children:"GPT"})," 将解析代码完善的更好，然后直接解析 ",(0,r.jsx)(e.strong,{children:"OPENAPI"})," 出结果。"]}),"\n",(0,r.jsx)(e.p,{children:"当然这个结果并非是最满意的，但对于目前我们的低代码系统来说，确实是一个失败的接入，因为这本身就是面对一个开发提效且打算深入对应业务模型的通用性的产品。"}),"\n",(0,r.jsxs)(e.h2,{id:"写在最后",children:["写在最后",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["这一章本来是打算删除的，思索了很久还是决定写出来，毕竟一万个读者就有一万个哈姆雷特，而且我一直对 ",(0,r.jsx)(e.strong,{children:"GPT"})," 提高生产力报有非常的期望，这里也聊下我在尝试接入过程中遇到的一些问题，但这并不是我在否决 ",(0,r.jsx)(e.strong,{children:"GPT"}),"，只是针对位于我们这个低代码的场景与解决方案上，它的帮助确实有限，没有想象中的那么高。"]}),"\n",(0,r.jsxs)(e.p,{children:["那么什么场景的低代码适合 ",(0,r.jsx)(e.strong,{children:"GPT"})," 的接入呢？"]}),"\n",(0,r.jsxs)(e.h4,{id:"面向非开发的低代码使用者",children:["面向非开发的低代码使用者",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#面向非开发的低代码使用者",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["显而易见的是，当你对实际开发过程不了解的情况下，",(0,r.jsx)(e.strong,{children:"GPT"})," 可以协助讲",(0,r.jsx)(e.strong,{children:"自然语言"}),"转成系统语言，通过之前所说的转换处理就可以使用，但前提是将低代码所有的物料进行了一定的训练才可以。"]}),"\n",(0,r.jsx)(e.p,{children:"这个训练过程比较复杂，但比较好的观望是在 GPT 的协助下文生代码与 D2C 的实现会更加精准。"}),"\n",(0,r.jsxs)(e.h4,{id:"有系统级别流程编排的模块",children:["有系统级别流程编排的模块",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#有系统级别流程编排的模块",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在我所接触到的开发中，拿 ",(0,r.jsx)(e.strong,{children:"GPT"})," 来写 ",(0,r.jsx)(e.strong,{children:"SQL"})," 的人数占比挺高的，毕竟这块的逻辑更为通用且使用者一般也是具备一定的开发思维，给到的 ",(0,r.jsx)(e.strong,{children:"Prompt"})," 也是足够 ",(0,r.jsx)(e.strong,{children:"GPT"})," 生成对应的 ",(0,r.jsx)(e.strong,{children:"SQL"}),"。"]}),"\n",(0,r.jsxs)(e.p,{children:["所以同时辅助业务流程编排，这对于 ",(0,r.jsx)(e.strong,{children:"SASS"})," 类型的产品来说，可以降低不少的对接流程，提供快更快更精准的服务。"]}),"\n",(0,r.jsxs)(e.p,{children:["后面会有视频辅助继续介绍如何利用 ",(0,r.jsx)(e.strong,{children:"GPT"})," 来协助编程。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"whatever"})," 新的一年还是 ",(0,r.jsx)(e.strong,{children:"All In AI"})," 依然是最好的选择。"]}),"\n",(0,r.jsx)(e.p,{children:"虽然目前不是最好，但未来可期，时代不会主动抛弃前进的人，加油！"}),"\n",(0,r.jsx)(e.p,{children:"如果你有什么疑问，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function o(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}let x=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F49.%E5%A4%B1%E8%B4%A5%E7%9A%84%20GPT%20%E6%8E%A5%E5%85%A5.md"]={toc:[{text:"安装",id:"安装",depth:2},{text:"调试",id:"调试",depth:2},{text:"第一次调试",id:"第一次调试",depth:4},{text:"继续调试",id:"继续调试",depth:4},{text:"继续尝试",id:"继续尝试",depth:4},{text:"写在最后",id:"写在最后",depth:2},{text:"面向非开发的低代码使用者",id:"面向非开发的低代码使用者",depth:4},{text:"有系统级别流程编排的模块",id:"有系统级别流程编排的模块",depth:4}],title:"49.失败的 GPT 接入",headingTitle:"49.失败的 GPT 接入",frontmatter:{}}}}]);