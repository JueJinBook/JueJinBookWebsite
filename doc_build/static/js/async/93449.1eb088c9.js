"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["93449"],{19094:function(n,e,s){n.exports=s.p+"static/image/a63a136cdde3166f183dc2ee8ffbedec.4d1b09ab.png"},570058:function(n,e,s){s.r(e),s.d(e,{default:()=>u});var r=s(552676),o=s(740453);let t=s.p+"static/image/df54359c4592beea2d9661163a5a9cc5.5bf05fb8.png",p=s.p+"static/image/99575aa47f7f0ca044114444ca7a62d4.88992944.png",a=s.p+"static/image/58007f6e3f510f7d63ef9bb28a9616bd.c1aeabc2.png",i=s.p+"static/image/eed75c003f9271d9828a61004a71795a.41d2ebd4.png";var c=s(19094);let l=s.p+"static/image/4a58b61af14c8bb165decfe308529beb.f7d287be.png",d=s.p+"static/image/6ef48d40ffc78ff54e6d75534842e0a0.a67b8749.png";function m(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",img:"img",h3:"h3",blockquote:"blockquote",code:"code",pre:"pre",ul:"ul",li:"li"},(0,o.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"19框架解析single-spa-的-npm-示例",children:["19.框架解析：single-spa 的 NPM 示例",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#19框架解析single-spa-的-npm-示例",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["本课程主要讲解 single-spa 的概念和使用示例，其中示例会在",(0,r.jsx)(e.strong,{children:"方案了解：NPM 方案"}),"的基础上进行衍变，从而可以使大家了解 single-spa 的功能，并为了解它的原理奠定基础。"]}),"\n",(0,r.jsxs)(e.h2,{id:"single-spa-介绍",children:["single-spa 介绍",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#single-spa-介绍",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://zh-hans.single-spa.js.org/",target:"_blank",rel:"noopener noreferrer",children:"single-spa"})," 是一个针对单页应用的微前端框架，它可以将不同框架的单页应用聚合成一个整体的单页应用。single-spa 分为主应用和微应用两个部分，在主应用中需要了解如何使用 single-spa 注册微应用。在微应用中需要了解应用类型和适用场景、应用生命周期以及如何构建微应用才能让主应用加载和识别生命周期等。如下所示：\n",(0,r.jsx)("img",{src:d,alt:"image.png"})]}),"\n",(0,r.jsx)(e.p,{children:"接下来我们会先了解 single-spa 的整体运行机制，然后讲解 single-spa 中如何注册微应用，最后讲解微应用的一些概念和设计。"}),"\n",(0,r.jsxs)(e.h3,{id:"single-spa-的运行机制",children:["single-spa 的运行机制",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#single-spa-的运行机制",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"single-spa 需要在主应用中初始化和运行，在主应用初始化时需要注册相应的微应用，在主应用运行的过程中则会根据微应用的注册信息管理它们的运行状态，如下所示："}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)("img",{src:l,alt:"yuque_diagram (4).jpg"}),"\n左侧的主应用可以是 React 或者 Vue 框架设计的单页应用，需要内置激活微应用对应的路由以及微应用需要挂载的 DOM 容器。在主应用初始化时，我们可以通过 single-spa 注册需要集成的微应用，包括提供激活的路由、传递的参数和",(0,r.jsx)(e.strong,{children:"微应用加载逻辑"}),"等。"]}),"\n",(0,r.jsxs)(e.p,{children:["上图的中间部分展示了 single-spa 的内部运行机制。当用户通过导航切换路由时，single-spa 会根据注册的微应用列表判断需要激活和失活的微应用。如果是激活微应用，主应用会调用注册微应用时提供的",(0,r.jsx)(e.strong,{children:"微应用加载逻辑"}),"进行应用加载并获取相应的生命周期函数，然后通过周期函数实现微应用的加载，此时主应用中的 single-spa 会自行管理微应用的运行状态并根据状态变更发送对应的周期事件。当然，如果微应用的路由匹配失败，那么主应用会执行相应的卸载逻辑。"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：上述所说的",(0,r.jsx)(e.strong,{children:"微应用加载逻辑"}),"是 single-spa 注册微应用的 API 需要提供的 ",(0,r.jsx)(e.code,{children:"app"})," 参数，在接下来的课程中会重点讲解",(0,r.jsx)(e.strong,{children:"加载逻辑"}),"的实现。在主应用中加载微应用的实现方式有很多，例如通过 NPM 包本地引入、通过动态 Script 远程加载或者通过 Fetch 远程请求等。"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"微应用注册",children:["微应用注册",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#微应用注册",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在主应用进行初始化时，需要通过 single-spa 的 API ",(0,r.jsx)(e.a,{href:"https://single-spa.js.org/docs/api#registerapplication",target:"_blank",rel:"noopener noreferrer",children:"registerApplication"})," 来注册需要集成的微应用。在官方的 ",(0,r.jsx)(e.a,{href:"https://single-spa.js.org/docs/configuration#registering-applications",target:"_blank",rel:"noopener noreferrer",children:"Registering applications"})," 文档中详细讲解了该 API 的两种调用方式："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// single-spa-config.js  \n// 引入 single-spa 的 NPM 库包\nimport { registerApplication, start } from 'single-spa';  \n  \n// Simple usage  \n// 简单使用方式，按顺序传递四个参数\nregisterApplication(  \n  // 参数1：微应用名称标识\n  'app2',  \n  // 参数2：微应用加载逻辑 / 微应用对象，必须返回 Promise\n  () => import('src/app2/main.js'),  \n  // 参数3：微应用的激活条件\n  (location) => location.pathname.startsWith('/app2'),  \n  // 参数4：传递给微应用的 props 数据\n  { some: 'value' }  \n);  \n  \n// Config with more expressive API  \n// 使用对象传递参数，更加清晰，易于阅读和维护，无须记住参数的顺序\nregisterApplication({  \n  // name 参数\n  name: 'app1',  \n  // app 参数，必须返回 Promise\n  app: () => import('src/app1/main.js'),  \n  // activeWhen 参数\n  activeWhen: '/app1',  \n  // customProps 参数\n  customProps: {  \n    some: 'value',  \n  }  \n});  \n  \nstart();\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：在 single-spa 中微应用可以分为 Application、Parcel 和 Utility ",(0,r.jsx)(e.a,{href:"https://single-spa.js.org/docs/module-types",target:"_blank",rel:"noopener noreferrer",children:"三种类型"}),"，本课程所讲的微应用指代 Application。Parcel 的功能和  Web Component 非常相似，主要用于在不同技术栈的应用中进行 UI 复用，如果应用使用的是同一个技术栈，那么更推荐使用技术栈相关的 UI 组件，例如 React 组件或者 Vue 组件。Utility 主要是通用逻辑设计，例如权限处理和 Ajax 通用逻辑处理等，但事实上可以使用 NPM 包进行复用。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["在上述示例中，我们注册了两个不同的微应用，这两个微应用都会在路由变化时触发执行第三个参数 ",(0,r.jsx)(e.code,{children:"activeWhen"}),"，一旦满足条件则会激活相应的微应用，从而触发执行第二个参数 ",(0,r.jsx)(e.code,{children:"app"})," 对应的",(0,r.jsx)(e.strong,{children:"微应用加载逻辑"}),"，并通过返回 Promise 解析出微应用的周期函数，最终会执行微应用对应的 ",(0,r.jsx)(e.code,{children:"mount"})," 周期函数实现应用的挂载。除此之外，在执行 ",(0,r.jsx)(e.code,{children:"mount"})," 时还可以获取第四个参数 ",(0,r.jsx)(e.code,{children:"customProps"})," 对应的自定义数据。注册后微应用的运行情况如下所示："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:"yuque_diagram (13)_副本.jpg"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：上图中的黄色部分和 ",(0,r.jsx)(e.code,{children:"registerApplication"})," 注册 API 的参数息息相关，蓝色部分是微应用的生命周期函数。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"在上述运行流程中，需要额外注意："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"再次激活时不需要执行微应用的加载逻辑，此时已经缓存了微应用的周期函数"}),"\n",(0,r.jsxs)(e.li,{children:["激活和失活可能会同时产生，此时会确保先执行完失活应用的 ",(0,r.jsx)(e.code,{children:"unmount"})]}),"\n",(0,r.jsxs)(e.li,{children:["通常情况下不会执行 ",(0,r.jsx)(e.code,{children:"unload"}),"，除非通过 API ",(0,r.jsx)(e.code,{children:"unloadApplication"})," 手动指定"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"unload"})," 之后的应用如果被激活会重新走",(0,r.jsx)(e.strong,{children:"首次激活注册应用"}),"的流程"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["接下来我们详细看一下注册 APP ",(0,r.jsx)(e.code,{children:"registerApplication"})," 中的四个参数的类型声明："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// single-spa 5.9.5 版本\n// typings/single-spa.d.ts\n\n// 简单调用方式，需要提供四个参数\nexport function registerApplication<ExtraProps extends CustomProps = {}>(\n    appName: string,\n    applicationOrLoadingFn: Application<ExtraProps>,\n    activityFn: ActivityFn,\n    customProps?: ExtraProps | CustomPropsFn<ExtraProps>\n): void;\n\n// 对象调用方式\nexport function registerApplication<ExtraProps extends CustomProps = {}>(\n    config: RegisterApplicationConfig<ExtraProps>\n): void;\n\n// 重点看下对象调用方式的参数声明 RegisterApplicationConfig<ExtraProps>\nexport type RegisterApplicationConfig<ExtraProps extends CustomProps = {}> = {\n  // 参数1：微应用名称标识\n  name: string;\n  // 参数2：微应用加载逻辑 / 微应用对象\n  app: Application<ExtraProps>;\n  // 参数3：微应用的激活条件\n  activeWhen: Activity;\n  // 参数4：传递给微应用的 props 数据\n  // 由于外部可以传入自定义数据，因此需要一个泛型可以让外部对该参数进行自定义声明\n  customProps?: ExtraProps | CustomPropsFn<ExtraProps>;\n};\n"})}),"\n",(0,r.jsxs)(e.p,{children:["我们先来看下参数 2 ",(0,r.jsx)(e.code,{children:"app"})," 的详细声明，从下述声明代码可以发现参数 ",(0,r.jsx)(e.code,{children:"app"})," 可以是一个微应用生命周期对象也可以是一个返回了微应用生命周期对象的 ",(0,r.jsx)(e.code,{children:"async"})," 函数，其中微应用生命周期对象必须包含 ",(0,r.jsx)(e.code,{children:"boostrap"}),"、",(0,r.jsx)(e.code,{children:"mount"})," 和 ",(0,r.jsx)(e.code,{children:"unmount"})," 等属性，这些属性的值也必须是 ",(0,r.jsx)(e.code,{children:"async"})," 函数。如下所示："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// 参数 2 app 的详细声明\ntype Application<ExtraProps = {}> =\n  // 可以是 LifeCycles<ExtraProps>\n  // 这里先忽略 <ExtraProps>，会在参数 4 中进行讲解\n  | LifeCycles<ExtraProps>\n  // 也可以是一个返回了 LifeCycles<ExtraProps> 的 async 函数（注意需要返回 Promise）\n  | ((config: ExtraProps & AppProps) => Promise<LifeCycles<ExtraProps>>);\n  \n// LifeCycles<ExtraProps> 声明的是一个对象，包含了微应用的生命周期\n// 注意，这里好像缺少了 unload 周期函数的声明\nexport type LifeCycles<ExtraProps = {}> = {\n  // 这里可以是一个 async 函数，也可以是一个内含 async 函数的数组\n  bootstrap: LifeCycleFn<ExtraProps> | Array<LifeCycleFn<ExtraProps>>;\n  mount: LifeCycleFn<ExtraProps> | Array<LifeCycleFn<ExtraProps>>;\n  unmount: LifeCycleFn<ExtraProps> | Array<LifeCycleFn<ExtraProps>>;\n  // update 和 Parcel 息息相关，在 Application 中不会使用，因此不是必须的\n  update?: LifeCycleFn<ExtraProps> | Array<LifeCycleFn<ExtraProps>>;\n};\n\n// 每一个生命周期都是一个 async 函数（注意需要返回 Promise）\ntype LifeCycleFn<ExtraProps> = (\n  config: ExtraProps & AppProps\n) => Promise<any>;\n"})}),"\n",(0,r.jsxs)(e.p,{children:["我们再来看下参数 3 ",(0,r.jsx)(e.code,{children:"activeWhen"})," 的类型声明："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// activeWhen 可以是一个函数、字符串、或者函数和字符串两种联合类型的数组\ntype Activity = ActivityFn | string | (ActivityFn | string)[];\n// 如果是函数，那么可以获取 location 参数，而且必须返回 boolean 用于判断是否激活微应用\ntype ActivityFn = (location: Location) => boolean;\n"})}),"\n",(0,r.jsxs)(e.p,{children:["最后我们来看下参数 4 ",(0,r.jsx)(e.code,{children:"customProps"})," 的类型声明："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// 在外部使用 registerApplication 的时候可以定义参数 4 customProps 的接口类型\n// 这里使用了 ExtraProps 这个泛型来传递外部声明的接口\nexport function registerApplication<ExtraProps extends CustomProps = {}>(\n  // 第二个参数 app 也会涉及到 customProps，因此这里需要传递泛型 ExtraProps\n  applicationOrLoadingFn: Application<ExtraProps>,\n  // 可以是对象，也可以是一个函数\n  customProps?: ExtraProps | CustomPropsFn<ExtraProps>\n): void;\n\n// 如果 customProps 是对象，那么必须返回外部声明的接口类型 ExtraProps\ntype CustomPropsFn<ExtraProps extends CustomProps = CustomProps> = (\n  name: string,\n  location: Location\n) => ExtraProps;\n\ntype Application<ExtraProps = {}> =\n  // 可以发现在 app 参数需要返回的生命周期对象里传入了 customProps 对应的泛型 ExtraProps\n  | LifeCycles<ExtraProps>\n  | ((config: ExtraProps & AppProps) => Promise<LifeCycles<ExtraProps>>);\n\n// 这里继续传递  customProps 对应的泛型 ExtraProps\nexport type LifeCycles<ExtraProps = {}> = {\n  bootstrap: LifeCycleFn<ExtraProps> | Array<LifeCycleFn<ExtraProps>>;\n  mount: LifeCycleFn<ExtraProps> | Array<LifeCycleFn<ExtraProps>>;\n  unmount: LifeCycleFn<ExtraProps> | Array<LifeCycleFn<ExtraProps>>;\n  update?: LifeCycleFn<ExtraProps> | Array<LifeCycleFn<ExtraProps>>;\n};\n\ntype LifeCycleFn<ExtraProps> = (\n  // 从这里可以发现每一个生命周期函数都可以获取 customProps 的数据\n  // customProps 会和 single-spa 内置的其他数据一起传递给生命周期函数\n  config: ExtraProps & AppProps\n) => Promise<any>;\n"})}),"\n",(0,r.jsxs)(e.p,{children:["了解了 ",(0,r.jsx)(e.code,{children:"registerApplication"})," 四个参数的类型声明之后，我们就可以很灵活的进行 API 注册了，例如下述几种调用方式都是合理的："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'// 以下采用 typescript 语法\nimport { registerApplication, AppProps } from "single-spa";\n\ninterface ICustomProps {\n  hello: string;\n}\n\nregisterApplication<ICustomProps>({\n  name: "vue",\n  // app 是一个对象，包含了 bootstrap、mount、unmount 等生命周期 async 函数\n  app: {\n    // 每一个生命周期都是一个 async 函数，接收一个 props 参数，props 参数包含了 customProps 的数据\n    // 这里的 props 的数据类型为： ICustomProps & AppProps\n    async bootstrap(props: ICustomProps & AppProps) {\n      console.log(props.hello); // 111\n      console.log("app bootstraped");\n    },\n    async mount(props) {\n      console.log("app mounted");\n    },\n    async unmount(props) {\n      console.log("app unmounted");\n    }\n  },\n  // activeWhen 可以是字符串\n  activeWhen: "/vue",\n  // customProps 可以是一个自定义数据类型的对象\n  customProps: {\n    hello: "111",\n  },\n});\n\nregisterApplication<ICustomProps>({\n  name: "react",\n  // app 是一个 async 函数，可用于处理微应用的加载逻辑\n  app: async () => {\n    return {\n      async bootstrap(props) {\n        console.log(props.hello); // 222\n        console.log("app bootstraped");\n      },\n      async mount(props) {\n        console.log("app mounted");\n      },\n      async unmount(props) {\n        console.log("app unmounted");\n      }\n    };\n  },\n  // activeWhen 可以是一个返回了 boolean 的函数\n  activeWhen: (location) => {\n    return location.pathname.startsWith("/react");\n  },\n  // customProps 可以是一个返回了自定义数据对象的函数\n  // 并且可以传入 name 和 location 参数\n  // 这里的 name 就是 registerApplication 注册的参数 1：name\n  customProps(name: string, location: Location) {\n    console.log(name); // react\n    return {\n      hello: "222",\n    };\n  },\n});\n\n\nregisterApplication<ICustomProps>({\n  name: "react",\n  app: async () => {\n    return {\n      // 每一个生命周期都是内含 async 函数的数组\n      bootstrap: [\n        async (props) => {\n          console.log(props.hello); // 222\n          console.log("app first bootstraped");\n        },\n\n        async (props) => {\n          console.log(props.hello); // 222\n          console.log("app second bootstraped");\n        },\n      ],\n      mount: [\n        async (props) => {\n          console.log(props.hello); // 222\n          console.log("app first mount");\n        },\n\n        async (props) => {\n          console.log(props.hello); // 222\n          console.log("app second mount");\n        },\n      ],\n      unmount: [\n        async (props) => {\n          console.log(props.hello); // 222\n          console.log("app first unmount");\n        },\n\n        async (props) => {\n          console.log(props.hello); // 222\n          console.log("app second unmount");\n        },\n      ],\n    };\n  },\n  activeWhen: (location) => {\n    return location.pathname.startsWith("/react");\n  },\n  customProps(name: string, location: Location) {\n    console.log(name); // react\n    return {\n      hello: "222",\n    };\n  },\n});\n'})}),"\n",(0,r.jsxs)(e.p,{children:["了解了微应用注册 API 的用法之后，我们会发现参数 2 ",(0,r.jsx)(e.code,{children:"app"})," 非常灵活，可以在主应用中构造出微应用需要的周期函数，也可以通过加载微应用来获取微应用自身的周期函数。在本课程的设计中，会通过加载微应用来获取微应用自身的周期函数。"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"温馨提示：微应用并不一定要提供生命周期函数，也可以提供能够被 single-spa 识别的特定方法，从而在注册 API 对应的生命周期函数中执行即可。当然，为了统一规范，推荐是在微应用中提供生命周期函数，然后在主应用的注册 API 进行透传或者做一些额外处理，从而形成通用的解耦设计。"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"微应用周期函数",children:["微应用周期函数",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#微应用周期函数",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在普通的 SPA 应用开发中，没有主应用和微应用的概念，通常情况下会在应用的入口文件中提供实例初始化和 DOM 渲染的逻辑，例如 Create React App 创建的 React 应用，它的 ",(0,r.jsx)(e.code,{children:"src/index.js"})," 入口文件如下所示："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// 直接将 React 应用挂载到 id 为 root 的 DOM 元素上\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"})}),"\n",(0,r.jsxs)(e.p,{children:["使用 Vue CLI 创建的 Vue 应用，它的入口文件 ",(0,r.jsx)(e.code,{children:"src/main.js"})," 如下所示："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// src.main.js 入口文件\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\n// 直接创建 Vue 实例并将应用挂载到 id 为 app 的 DOM 元素上\ncreateApp(App).mount('#app')\n"})}),"\n",(0,r.jsx)(e.p,{children:"上述设计是因为通过浏览器打开应用的地址时天然激活了应用，关闭应用所在的标签页就等于失活了应用，应用的状态都是由浏览器自身来控制，浏览器在关闭标签页时会自动释放应用运行所在的进程和内存。但是 single-spa 中的微应用状态由 single-spa 通过监听路由的变化来进行控制，因此在浏览器中打开主应用对应的地址时，微应用默认并不会被激活，此时也就不能进行应用的实例化和 DOM 的加载逻辑，需要在路由被激活时由 single-spa 来控制微应用的激活逻辑，为此 single-spa 提供了微应用生命周期的概念。我们以 Vue 为例，如下所示："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// src.main.js 入口文件\nimport { createApp } from 'vue'\nimport App from './App.vue'\nlet app;\n\n// 微应用默认不会被激活，需要匹配相应的路由进行激活\n// 因此不能直接创建 Vue 实例并将应用挂载到 id 为 app 的 DOM 元素上\n// createApp(App).mount('#app')\n\n// 为了方便自身启动调试，可以识别是否在微前端的环境里\n// 如果不在 single-spa 的运行环境内，那么识别为不在微前端的环境内，那么和普通开发一样直接激活\nif(!window.singleSpaNavigate) {\n  createApp(App).mount('#app'); \n}\n\n// 提供各种能够被 single-spa 识别的生命周期函数\n\n// 首次加载完成后会执行一次，感觉配合 unload 使用比较合适\n// 默认情况下在入口文件中直接初始化即可\nexport async function bootstrap(props) {}\n\n// 路由匹配时子应用激活触发执行，可以通过 props 获取传递的参数\nexport async function mount(props) {\n  app = createApp(App);\n  // 可以在 single-spa 注册的 API 中提供参数 4 customProps 数据\n  // 用于传递需要挂载的容器节点 ID 信息\n  app.mount(`#${props.container}`);\n}\n\n// 路由未匹配时子应用失活触发执行\nexport async function unmount(props) {\n  // 普通应用开发不会用到 Vue 实例的 unmount 方法\n  app && app.unmount();\n}\n\n// 需要手动通过 API 调用执行，用于实现热下载和重新初始化\n// 可选的周期函数，通常情况下可以忽略\nexport async function unload(props) {}\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：single-spa 注册 API 中要求生命周期对象中的周期函数是 ",(0,r.jsx)(e.code,{children:"async"})," 函数，在微应用中理论上需要做 ",(0,r.jsx)(e.code,{children:"async"})," 处理。"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"微应用构建设计",children:["微应用构建设计",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#微应用构建设计",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["single-spa 注册 API 的参数 ",(0,r.jsx)(e.code,{children:"app"})," 可以实现子应用的加载逻辑，例如："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'\n// 通过 app 参数加载微应用的 NPM 包\nregisterApplication<ICustomProps>({\n  name: "react",\n  app: async () => {\n    // 动态加载微应用对应的 NPM 包，Webpack 会进行 chunk 分割\n    return import("micro-app-npm").then((res) => {\n        // 根据 res 处理需要返回的生命周期对象\n    })\n  },\n  activeWhen: (location) => {\n    return location.pathname.startsWith("/react");\n  },\n  customProps: {\n      hello: "222",\n  }\n});\n\n// 通过 app 参数动态加载微应用的远程资源地址\nregisterApplication<ICustomProps>({\n  name: "react",\n  app: async () => {\n    // 动态加载微应用的远程资源，Webpack 会进行 chunk 分割\n    // 这里本质上是动态 Script 的方式\n     return import("http://localhost:3000/static/js/main.js").then(() => {\n        // 处理需要返回的生命周期对象\n    }\n  },\n  activeWhen: (location) => {\n    return location.pathname.startsWith("/react");\n  },\n  customProps: {\n      hello: "222",\n  }\n});\n\n// 通过 app 参数加载请求微应用的远程资源\nregisterApplication<ICustomProps>({\n  name: "react",\n  app: async () => {\n    // 通过 fetch 动态请求微应用的远程资源\n    const res = window.fetch("http://localhost:3000/static/js/main.js");\n    // 获取资源的文本信息\n    const text = await res.text();\n    // 通过 eval 或者 script 执行微应用的脚本\n    // 处理需要返回的生命周期对象\n  },\n  activeWhen: (location) => {\n    return location.pathname.startsWith("/react");\n  },\n  customProps: {\n      hello: "222",\n  }\n});\n'})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：可以额外了解一下 Webpack 动态 ",(0,r.jsx)(e.code,{children:"import(npm 包)"})," 后构建产物的运行原理，本质上是在构建的过程中先将动态 ",(0,r.jsx)(e.code,{children:"import"})," 的 NPM 包代码进行 chunk 分离，然后通过 Script 标签动态加载分离的 chunk 资源。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"从上述代码可以发现，我们可以通过动态加载微应用的 NPM 包、动态加载应用的静态资源或者 Fetch 请求微应用的静态资源来获取微应用的生命周期对象，从而实现微应用的切换功能。为了实现上述功能需要额外做一些 Webpack 构建配置，从而使得主应用加载并执行微应用后可以识别生命周期对象："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:i,alt:"yuque_diagram (12).jpg"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：NPM 包的构建配置已经在",(0,r.jsx)(e.a,{href:"https://juejin.cn/book/7258893482318626868/section/7259192684294701056#heading-3",target:"_blank",rel:"noopener noreferrer",children:"方案了解：NPM 方案 / NPM 的设计示例"})," 中详细讲解。需要注意，构建微应用时构建的是 Bundle，需要打入各种 NPM 包依赖，包括 Vue 以及 React 框架代码等。除此之外，对于动态 Script 和 Fetch 请求的加载方式，可以构建出多个 chunk 分离的 JS 文件和 CSS 文件，但是在注册 API 进行加载时需要按顺序执行，课程中为了简化加载逻辑，统一将微应用构建成单个 JS Bundle 进行加载。"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"single-spa-示例",children:["single-spa 示例",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#single-spa-示例",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在讲解了 single-spa 的运行机制、如何注册微应用以及微应用的生命周期函数等概念之后，我们可以设计课程来使用 single-spa 实现微前端，我们会依次实现 NPM 包、动态 Script 以及 Fetch 请求等三种方式。所有示例都采用 ",(0,r.jsx)(e.a,{href:"https://link.juejin.cn/?target=https%3A%2F%2Fmonorepo.tools%2F%23understanding-monorepos",title:"https://monorepo.tools/#understanding-monorepos",target:"_blank",rel:"noopener noreferrer",children:"Monorepo"}),"\xa0结构对应的 ",(0,r.jsx)(e.a,{href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer",children:"Lerna"})," 工具进行多项目合作设计，整体的目录结构如下所示："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"├── packages                                                                       \n│   ├── main-app/      # 主应用                \n│   ├── react-app/     # React 微应用\n│   ├── single-spa/    # SingleSPA 5.9.5 版本\n│   └── vue-app/       # Vue 微应用\n└── lerna.json         # Lerna 配置\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：这里为了方便大家了解 single-spa 的源码，采用 Lerna 结构引入了 single-spa 的 5.9.5 版本，在 ",(0,r.jsx)(e.code,{children:"main-app"})," 中引入的是 single-spa 的 ",(0,r.jsx)(e.code,{children:"src/single-spa.js"})," 源码，可以方便代码调试。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["所有示例实现的流程如下所示，当主应用切换路由时会先失活没有匹配路由的微应用，执行对应的 ",(0,r.jsx)(e.code,{children:"unmount"})," 函数进行卸载，然后会激活匹配了路由的微应用，执行 ",(0,r.jsx)(e.code,{children:"mount"})," 函数挂载应用，从而实现监听路由切换微应用的功能："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:a,alt:"yuque_diagram (15).jpg"})}),"\n",(0,r.jsxs)(e.h3,{id:"npm-示例---主应用设计",children:["NPM 示例 - 主应用设计",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#npm-示例---主应用设计",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["首先来看下 NPM 包的实现示例，可以在",(0,r.jsx)(e.a,{href:"https://juejin.cn/book/7258893482318626868/section/7259192684294701056#heading-3",target:"_blank",rel:"noopener noreferrer",children:"方案了解：NPM 方案 / NPM 的设计示例"})," 的基础上进行改造，微应用的构建配置不变。实现效果如下所示，点击左侧的导航切换路由，使用 single-spa 监听路由的变化来切换微应用："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:"录屏2023-12-18 19.57.47.gif"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：示例源码可以从 micro-framework 的\xa0",(0,r.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/single-spa-npm",target:"_blank",rel:"noopener noreferrer",children:"demo/single-spa-npm"}),"\xa0分支获取。在 single-spa 源码的各个阶段植入了很多打印信息，可以根据打印信息来感性了解 single-spa 的内部运行机制。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"在本课程示例中，还实现了按需加载微应用的静态资源："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:"录屏2023-12-18 20.27.37.gif"})}),"\n",(0,r.jsx)(e.p,{children:"主应用的目录结构如下所示："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"├── src                  \n│   ├── index.js            # 入口文件，包含了 single-spa 的注册和 React 路由             \n│   ├── App.js              # 主应用布局，包含了导航和内容区的布局设计           \n│   └── utils/              # 工具方法\n│        ├── micros.js      # 微应用数据信息（Mock 后端数据结构）      \n│        └── single-spa.ts  # single-spa 的注册 API 封装\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在 ",(0,r.jsx)(e.code,{children:"src/utils/micros.js"})," 中定义了微应用列表的数据结构（在真实业务场景中这个数据会更复杂，并且可以从服务端进行动态加载），该数据主要用于注册 single-spa 的微应用、生成 React 路由和主应用导航，如下所示："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'// src/utils/micros.js\n// 微应用容器元素的 ID\nexport const MICRO_APP_CONTAINER_ID = "micro-app-container";\n\nexport const MICRO_APP_ROUTER = {\n  REACT: "react",\n  VUE: "vue",\n};\n\n// 菜单信息，这里用于 Mock 后端数据\n// 真实业务可能是一个树状的带权限的菜单信息\nexport const mockMicroApps = [\n  {\n    // 应用标识\n    name: "react",\n    // 菜单名称\n    title: "React Micro App",\n    // NPM 包名称\n    app: "react-micro-app",\n    // 激活路由\n    router: MICRO_APP_ROUTER.REACT,\n  },\n  {\n    name: "vue",\n    title: "Vue Micro App",\n    app: "vue-micro-app",\n    router: MICRO_APP_ROUTER.VUE,\n  },\n];\n'})}),"\n",(0,r.jsx)(e.p,{children:"主应用在初始化时需要消费微应用列表数据，在初始化时使用 single-spa 注册微应用并生成对应的 React 路由："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'import React from "react";\nimport ReactDOM from "react-dom/client";\nimport "./index.css";\nimport App from "./App";\nimport reportWebVitals from "./reportWebVitals";\nimport { createBrowserRouter, RouterProvider } from "react-router-dom";\nimport { registerMicroApps } from "./utils/single-spa.ts";\nimport {\n  MICRO_APP_CONTAINER_ID,\n  MICRO_APP_ROUTER,\n  mockMicroApps,\n} from "./utils/micros";\n\n// 对 single-spa 的注册 API 进行了二次封装，支持传入数组进行批量注册\nregisterMicroApps(\n  // 根据后端提供的动态数据批量注册微应用\n  mockMicroApps.map((item) => ({\n    name: item.name,\n    app: () => {\n      // import 无法使用变量，所以这里需要使用 if/else 判断进行硬编码\n      if (item.router === MICRO_APP_ROUTER.REACT) {\n        // 按需动态加载微应用的 NPM 包（Webpack 会进行 chunk 分离）\n\n        // 注意 app 参数需要返回的是 Promise 对象\n        // 这里可以重点再回顾一下注册微应用 API 的参数声明\n        // 1、app 本身如果是函数，那么必须是 async 函数（需要返回 Promise 对象）\n        // 2、Promise.resolve 需要返回生命周期函数对象，每一个生命周期函数也必须是 async 函数\n        return import("react-micro-app");\n      } else if (item.router === MICRO_APP_ROUTER.VUE) {\n        return import("vue-micro-app");\n      }\n    },\n    activeWhen: item.router,\n    customProps: {\n      // 向微应用传递需要挂载的容器元素 ID\n      container: MICRO_APP_CONTAINER_ID,\n    },\n  }))\n);\n\nconst router = createBrowserRouter([\n  {\n    path: "/",\n    // <App /> 中提供了左侧导航栏和右侧内容区域的布局结构\n    element: <App />,\n    // children 中的元素会被渲染到 <App /> 的 <Outlet /> 中\n    // <Outlet> 是 react-router-dom 提供的一个组件，用于渲染子路由：https://reactrouter.com/en/main/components/outlet\n\n    // 遍历迭代 mockMicroApps 中的数据，生成对应的路由配置\n    // 这里的路由配置和微应用注册 API 中的 activeWhen 一致\n    children: mockMicroApps.map((item) => ({\n      path: item.router,\n      // 微应用的容器元素，用于渲染微应用\n      element: <div id={MICRO_APP_CONTAINER_ID}></div>,\n    })),\n  },\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById("root"));\nroot.render(<RouterProvider router={router} />);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n'})}),"\n",(0,r.jsxs)(e.p,{children:["在 ",(0,r.jsx)(e.code,{children:"src/utils/single-spa.ts"})," 中对 single-spa 的注册 API 进行二次封装使其支持批量注册："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'// src/utils/single-spa.ts\n\n// 使用 Lerna 执行 lerna bootstrap 之后，本地 packages 中的应用可以通过 NPM 包的方式进行引入\n// 注意这里直接引入了开发态的入口文件，而不是打包后的文件\nimport { start, registerApplication } from "single-spa/src/single-spa";\nimport { RegisterApplicationConfig } from "single-spa";\n\n// 对 single-spa 的 registerApplication 进行二次封装，使其可以接收一个数组，批量注册微应用\nexport function registerMicroApps(apps: RegisterApplicationConfig[]) {\n  // @ts-ignore\n  // 如果不开启 __DEV__，single-spa 无法正常运行\n  window.__DEV__ = true;\n  apps.forEach(registerApplication);\n  // 注意微应用注册完后需要通过 start 进行启动\n  start();\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["最后在 ",(0,r.jsx)(e.code,{children:"<App>"})," 中对主应用进行布局设计，将左侧设计成能够切换路由的导航，导航的信息来源于微应用数据列表，右侧设计成用于渲染微应用的内容区："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'// src/App.js\nimport { Outlet, Link } from "react-router-dom";\nimport "./App.css";\nimport { mockMicroApps } from "./utils/micros";\n\nfunction App() {\n  return (\n    <div className="app">\n      <div className="app-nav">\n        <p>Micro App List</p>\n        <nav>\n          <ul>\n            {/* 遍历微应用的数据列表生成导航路由信息 */}\n            {mockMicroApps.map((item) => (\n              <li key={item.name}>\n                <Link to={item.router}>{item.title}</Link>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </div>\n      <div className="app-content">\n        {/* 这里的 <Outlet /> 会被 <RouterProvider router={router} /> 中 router 提供的 children 进行替换 */}\n        {/* 所以本质上会被微应用的容器元素 <div id={MICRO_APP_CONTAINER_ID}></div> 替代  */}\n        <Outlet />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"npm-示例---微应用设计",children:["NPM 示例 - 微应用设计",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#npm-示例---微应用设计",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.a,{href:"https://juejin.cn/book/7258893482318626868/section/7259192684294701056#heading-3",target:"_blank",rel:"noopener noreferrer",children:"方案了解：NPM 方案 / NPM 的设计示例"})," 中我们已经讲解了 NPM 方案的微应用构建配置，当我们通过 NPM 包引入微应用时，微应用是技术无关的，它和主应用理论上不存在依赖关系，因此在微应用中推荐将所有的 NPM 包依赖都打入 Bundle，注意这和构建库是存在差异的，组件库在构建时推荐排除所有的 NPM 包依赖（例如使用 ",(0,r.jsx)(e.a,{href:"https://github.com/liady/webpack-node-externals",target:"_blank",rel:"noopener noreferrer",children:"webpack-node-externals"}),"），在主应用中加载组件库的时候，尽量使得组件库共享主应用的 NPM 依赖。"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"温馨提示：如果 Web 应用和组件库使用了相同的依赖 lodash，在什么情况下 Web 应用引入该组件库执行打包时 lodash 会被打包两次，有哪些方法可以使得 lodash 只被打包一次？"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"所以这里需要再次强调，构建库和构建应用除了在输出格式上存在差异，构建库本身还会排除所依赖的 NPM 包，尽量让 NPM 包依赖在主应用中得到复用，为最终的应用打包减少 Bundle 体积。构建应用则是会将所有的 NPM 包依赖全部打包成 Bundle，这里的 NPM 微应用方案的构建配置实际上只是在构建应用的基础上做了以下配置改造："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"为了方便加载 NPM 包，将 CSS 内联到 JS 中"}),"\n",(0,r.jsx)(e.li,{children:"输出 UMD、CommonJS 或者 ESM 规范，从而可以通过模块化的方式加载 NPM 包"}),"\n",(0,r.jsx)(e.li,{children:"不进行 chunk 分离，因为不是通过网络请求的形式进行加载，而是通过 NPM 包引入"}),"\n",(0,r.jsx)(e.li,{children:"所有的 NPM 包依赖仍然需要打入 Bundle（和构建库最主要的区别）"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"这里可以重新回顾一下 React 微应用的构建配置，如下所示："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// package.json\n{\n  name: "react-micro-app",\n  main: "build/main.js",\n}\n\n// config/webpack.config.js\nmodule.exports = function(webpackEnv) {\n  // ...\n\n  // common function to get style loaders\n  const getStyleLoaders = (cssOptions, preProcessor) => {\n    const loaders = [\n      // 注释掉抽离 CSS 样式的插件功能\n      // isEnvDevelopment && require.resolve("style-loader"),\n      // isEnvProduction && {\n      //   loader: MiniCssExtractPlugin.loader,\n      //   // css is located in `static/css`, use \'../../\' to locate index.html folder\n      //   // in production `paths.publicUrlOrPath` can be a relative path\n      //   options: paths.publicUrlOrPath.startsWith(".")\n      //     ? { publicPath: "../../" }\n      //     : {},\n      // },\n      \n      require.resolve("style-loader"),\n      {\n        loader: require.resolve("css-loader"),\n        options: cssOptions,\n      },\n      // ...\n    ].filter(Boolean);\n    // ...\n    return loaders;\n  };\n  \n  return {\n    output: {\n      // ...\n      // 老版本 Webpack 可以使用 libraryTarget 生成 CommonJS 规范\n      // libraryTarget: "commonjs",\n      library: {\n        type: \'commonjs\'\n      }\n    },\n\n    module: {\n      rules: [\n        {\n          oneOf: [\n            // TODO: Merge this config once `image/avif` is in the mime-db\n            // https://github.com/jshttp/mime-db\n            {\n              test: [/.avif$/],\n              mimetype: "image/avif",\n              // 内联处理\n              // https://webpack.js.org/guides/asset-modules/#inlining-assets\n              type: \'asset/inline\',\n            },\n            // "url" loader works like "file" loader except that it embeds assets\n            // smaller than specified limit in bytes as data URLs to avoid requests.\n            // A missing `test` is equivalent to a match.\n            {\n              test: [/.bmp$/, /.gif$/, /.jpe?g$/, /.png$/],\n              // 内联处理\n              type: \'asset/inline\',\n            },\n            {\n              test: /.svg$/,\n              // 内联处理\n              type: \'asset/inline\',\n\n              // 注释\n              \n              // use: [\n              //   {\n              //     loader: require.resolve("@svgr/webpack"),\n              //     options: {\n              //       prettier: false,\n              //       svgo: false,\n              //       svgoConfig: {\n              //         plugins: [{ removeViewBox: false }],\n              //       },\n              //       titleProp: true,\n              //       ref: true,\n              //     },\n              //   },\n              //   {\n              //     loader: require.resolve("file-loader"),\n              //     options: {\n              //        name: "static/media/[name].[hash].[ext]",\n              //     },\n              //   },\n              // ],\n              \n              issuer: {\n                and: [/.(ts|tsx|js|jsx|md|mdx)$/],\n              },\n            },\n          ]\n        }\n      ].filter(Boolean),\n    },\n\n    plugins: [\n      \n      // ...\n      \n      // 构建单个 JS 脚本\n      new webpack.optimize.LimitChunkCountPlugin({\n        maxChunks: 1,\n      }),\n    ].filter(Boolean),\n  }\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"接下来我们重点看下 React 微应用的入口设计，如下所示："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import React from "react";\nimport ReactDOM from "react-dom/client";\nimport "./index.css";\nimport App from "./App";\n// import reportWebVitals from \'./reportWebVitals\';\n\nlet root;\n\n// 判断是否在 single-spa 的环境中运行\n// 如果不是，那么说明不在微前端的环境中，可以独立启动\nif (!window.singleSpaNavigate) {\n  root = ReactDOM.createRoot(document.getElementById("root"));\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\n/**\n * bootstrap 只会在微应用首次激活时调用一次\n * 微应用重新激活时会直接调用 mount 周期函数，不会再重复触发 bootstrap。\n * 通常情况下这里不需要进行任何处理，初始化的代码可以放在当前入口文件的顶层处理\n * 除非会执行微应用的 unload 动作，然后需要再次执行 bootstrap，可能需要在此做一些必要的初始化动作\n * 注意这里的周期函数不是 async 函数，在主应用中引入该周期函数后需要进行 async 处理\n */\n\n// 注意这里的每一个生命周期函数必须是 async 函数\nexport async function bootstrap() {\n  console.log("[React 子应用] bootstrap excuted");\n}\n\n/**\n * 微应用每次激活时都会调用 mount 周期函数，通常在这里执行微应用的渲染\n */\nexport async function mount(props) {\n  console.log("[React 子应用] mount excuted, props: ", props);\n  // 在 single-spa 的注册 API 中会通过 customProps 传递 container 微应用容器元素 ID\n  // 因此这里将微应用挂载在主应用的容器元素上\n  root = ReactDOM.createRoot(document.getElementById(props.container));\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\n/**\n * 微应用每次失活时会调用 unmount 周期函数，通常在这里执行微应用的卸载\n */\nexport async function unmount(props) {\n  console.log("[React 子应用] unmount excuted, props: ", props);\n  root && root.unmount();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n'})}),"\n",(0,r.jsx)(e.p,{children:"通过 Webpack 生成 UMD、CommonJS 或者 ESM 规范后，可以在主应用中通过 NPM 包的方式进行引入，例如："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// 通过模块化的方式引入微应用 NPM 包\nimport { bootstrap, mount, unmount } from "react-micro-app";\n\n// 通过动态加载的方式引入微应用 NPM 包\n// Webpack 会将引入的模块分割成单独的 chunk，内部会通过 Script 的方式进行动态加载\n// 注意在 import() 中不能使用完全动态的 import 语句，例如 import(foo)，其中 foo 是一个变量\nimport("react-micro-app").then(({ mount, unmount, bootstrap }) => {});\n'})}),"\n",(0,r.jsx)(e.p,{children:"我们重新回顾一下主应用中注册 API 的设计："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// 对 single-spa 的注册 API 进行了二次封装，支持传入数组进行批量注册\nregisterMicroApps(\n  // 根据后端提供的动态数据批量注册微应用\n  mockMicroApps.map((item) => ({\n    name: item.name,\n    app: () => {\n      // import 无法使用变量，所以这里需要使用 if/else 判断进行硬编码\n      if (item.router === MICRO_APP_ROUTER.REACT) {\n        // 按需动态加载微应用的 NPM 包（Webpack 会进行 chunk 分离）\n\n        // 注意 app 参数需要返回的是 Promise 对象\n        // 这里可以重点再回顾一下注册微应用 API 的参数声明\n        // 1、app 本身如果是函数，那么必须是 async 函数（需要返回 Promise 对象）\n        // 2、Promise.resolve 需要返回生命周期函数对象，每一个生命周期函数也必须是 async 函数\n        return import("react-micro-app");\n      } else if (item.router === MICRO_APP_ROUTER.VUE) {\n        return import("vue-micro-app");\n      }\n    },\n    activeWhen: item.router,\n    customProps: {\n      // 向微应用传递需要挂载的容器元素 ID\n      container: MICRO_APP_CONTAINER_ID,\n    },\n  }))\n);\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"小结",children:["小结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"在本课程中我们重点讲解了 single-spa 在主应用中的运行机制、微应用注册 API 的详细参数说明、微应用的周期函数介绍以及如何构建微应用使得主应用可以识别微应用的生命周期函数。在 single-spa 的示例中我们给出了 NPM 包的微前端示例。在下一个课程中，我们会重点讲解动态 Script 示例，该示例的设计需要额外改造微应用的 Webpack 构建配置，因此会额外讲解一些 Webpack 构建后的运行原理。本课程和下一个课程的使用示例对理解 qiankun 的设计会有非常大的帮助。"})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}let u=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F19.%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90%EF%BC%9Asingle-spa%20%E7%9A%84%20NPM%20%E7%A4%BA%E4%BE%8B.md"]={toc:[{text:"single-spa 介绍",id:"single-spa-介绍",depth:2},{text:"single-spa 的运行机制",id:"single-spa-的运行机制",depth:3},{text:"微应用注册",id:"微应用注册",depth:3},{text:"微应用周期函数",id:"微应用周期函数",depth:3},{text:"微应用构建设计",id:"微应用构建设计",depth:3},{text:"single-spa 示例",id:"single-spa-示例",depth:2},{text:"NPM 示例 - 主应用设计",id:"npm-示例---主应用设计",depth:3},{text:"NPM 示例 - 微应用设计",id:"npm-示例---微应用设计",depth:3},{text:"小结",id:"小结",depth:2}],title:"19.框架解析：single-spa 的 NPM 示例",headingTitle:"19.框架解析：single-spa 的 NPM 示例",frontmatter:{}}}}]);