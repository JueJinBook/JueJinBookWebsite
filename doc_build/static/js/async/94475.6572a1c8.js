"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["94475"],{570809:function(e,n,r){r.r(n),r.d(n,{default:()=>o});var s=r(552676),c=r(740453);function i(e){let n=Object.assign({h2:"h2",a:"a",p:"p",code:"code",ol:"ol",li:"li",strong:"strong",ul:"ul",h3:"h3",pre:"pre",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"自动化测试是利用软件工具和脚本来执行测试用例和验证预期结果的过程，而无需人工干预。它是软件测试的一种方法，通过编写脚本和使用特定的测试工具来模拟用户行为和系统交互，以验证软件应用程序的功能、性能和稳定性。"}),"\n",(0,s.jsxs)(n.p,{children:["对于前端熟悉的 Web 自动化测试而言，它通过使用特定的测试工具（比如：",(0,s.jsx)(n.code,{children:"Selenium"}),"、",(0,s.jsx)(n.code,{children:"Puppeteer"}),"...）和脚本来模拟用户在 Web 浏览器中的行为和交互，以验证网站或 Web 应用程序的功能、界面和性能。"]}),"\n",(0,s.jsx)(n.p,{children:"对于 Electron 应用自动化测试而言，整体来说跟 Web 自动化测试差不多，最大区别就是要处理 Electron 驱动。"}),"\n",(0,s.jsx)(n.p,{children:"Electron 应用程序自动化测试有比较多的工具可以选择，常用的几种测试方式："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"WebdriverIO"}),"：",(0,s.jsx)(n.code,{children:"WebdriverIO"})," 是一个基于 Node.js 的自动化测试框架，用于 Web 应用程序的自动化测试。它使用 ",(0,s.jsx)(n.code,{children:"WebDriver"})," 协议来控制浏览器，并提供了强大的 API，能够让开发者执行各种测试任务，如单元测试、集成测试和端到端测试。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Selenium"}),"：",(0,s.jsx)(n.code,{children:"Selenium"})," 是一个用于自动化 Web 浏览器操作的工具集和库。它允许开发者模拟用户在不同的浏览器（如 Chrome、Firefox、Safari 等）中进行操作，执行诸如点击按钮、填写表单、导航到不同页面等任务。这对于自动化测试、网页抓取以及网站功能验证非常有用。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Playwright"}),"：",(0,s.jsx)(n.code,{children:"Playwright"})," 是一个用于自动化 Web 浏览器操作的工具，它类似于 ",(0,s.jsx)(n.code,{children:"Selenium"})," 和 ",(0,s.jsx)(n.code,{children:"Puppeteer"}),"。由 Microsoft 开发并维护，它提供了跨浏览器（如 Chrome、Firefox、WebKit）、跨平台（Windows、MacOS、Linux）的自动化解决方案。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"自定义驱动"}),"：相对于现有的测试框架，自定义驱动可以使用 Node.js 的内建 ",(0,s.jsx)(n.code,{children:"IPC STDIO"})," 来编写自己的自定义驱动。自定义测试驱动程序需要写额外的应用代码，但是有较低的性能开销，也可以自定义很多操作方法。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"接下来我们将分别介绍这几种测试方案如何在 Electron 应用程序中进行自动化测试。"}),"\n",(0,s.jsxs)(n.h2,{id:"webdriverio",children:["WebdriverIO",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webdriverio",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"WebdriverIO 提供了一个集成服务，简化了与 Electron 应用程序的交互，并使测试变得非常简单。使用 WebdriverIO 测试 Electron 应用程序的优势包括："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["自动下载正确的 ",(0,s.jsx)(n.code,{children:"Chromedriver"})," 版本。"]}),"\n",(0,s.jsxs)(n.li,{children:["非常方便地访问 ",(0,s.jsx)(n.code,{children:"Electron API"}),"，比如：",(0,s.jsx)(n.code,{children:"app"}),"、",(0,s.jsx)(n.code,{children:"BrowserWindow"}),"、",(0,s.jsx)(n.code,{children:"Dialog"})," 和 ",(0,s.jsx)(n.code,{children:"mainProcess"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:["自定义模拟 ",(0,s.jsx)(n.code,{children:"Electron API"})," 功能。"]}),"\n",(0,s.jsxs)(n.li,{children:["能够定义 ",(0,s.jsx)(n.code,{children:"API"})," 处理程序，以修改测试中应用程序的行为。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"1-安装-webdriverio",children:["1. 安装 WebdriverIO",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-安装-webdriverio",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在我们创建的 Electron 应用中，通过以下命令来安装 ",(0,s.jsx)(n.code,{children:"WebdriverIO"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 第23章—通用篇：Electron应用的自动化测试\nnpm create wdio@latest ./\n"})}),"\n",(0,s.jsx)(n.p,{children:"接下来会有一系列询问，默认情况下直接回车："}),"\n",(0,s.jsxs)(n.p,{children:["完成之后，你会看到多了一个 ",(0,s.jsx)(n.code,{children:"wdio.config.js"})," 文件，以及一个 ",(0,s.jsx)(n.code,{children:"test"})," 文件夹，",(0,s.jsx)(n.code,{children:"wdio.config.js"})," 用于配置 ",(0,s.jsx)(n.code,{children:"WebdriverIO"})," 的一些功能。",(0,s.jsx)(n.code,{children:"test"})," 文件夹主要是我们存放单测文件的目录。"]}),"\n",(0,s.jsxs)(n.p,{children:["然后再安装 ",(0,s.jsx)(n.code,{children:"wdio-electron-service"}),"，使用 ",(0,s.jsx)(n.code,{children:"wdio-electron-service"})," 可以实现自动下载和管理正确版本的 ChromeDriver，访问 Electron API，自定义模拟 Electron API 功能，以及定义自定义 API 处理程序来修改测试中应用程序的行为等。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 安装 wdio-electron-service\nyarn add wdio-electron-service\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-配置-webdriverio",children:["2. 配置 WebdriverIO",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-配置-webdriverio",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["为了支持 Electron 驱动，你需要在 ",(0,s.jsx)(n.code,{children:"wdio.config.js"})," 中添加如下内容："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export const config = {\n  outputDir: 'logs',\n  // \n  services: ['electron'],\n  capabilities: [{\n    browserName: 'electron',\n    appBinaryPath: './path/to/bundled/electron/app.exe',  \n    appArgs: ['foo', 'bar=baz'],\n  }],\n  // ...\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["其中 ",(0,s.jsx)(n.code,{children:"services"})," 字段是一个数组，用于配置各种服务，这些服务可以增强测试的功能和设置。",(0,s.jsx)(n.code,{children:"services"})," 允许你扩展测试框架的功能，以便执行特定任务或增加额外的功能，而无需显式添加新的命令。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"capabilities"})," 中的 ",(0,s.jsx)(n.code,{children:"browserName"})," 是指你想要运行的浏览器的名称或标识符。它指定了测试用例将在哪种类型的浏览器中执行，例如 Chrome、Firefox、Safari 等。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"appArgs"}),"：这个选项允许你向 Electron 应用程序传递命令行参数。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"appBinaryPath"}),"：这个选项表示 Electron 应用程序的可执行文件路径。它指定了要用于测试的已编译或构建的 Electron 应用程序的位置。以 ",(0,s.jsx)(n.code,{children:"vue-cli-plugin-electron-builder"})," 为例，我们应用在 ",(0,s.jsx)(n.code,{children:"MacOS"})," 上构建完成后，应用程序的路径目录为："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"build/mac/${你的应用程序名}.app/Contents/MacOS/${你的应用程序名}\n"})}),"\n",(0,s.jsx)(n.p,{children:"不同平台编译后的应用程序路径是不一样的，所以我们可以通过一下脚本来动态获取："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// for each OS\nlet APP_PATH;\nif (process.platform === 'linux') {\n    APP_PATH = join(__dirname, 'build', 'linux-unpacked', 'electron')\n} else if (process.platform === 'win32') {\n    APP_PATH = join(__dirname, 'build', 'win-unpacked', 'electron.exe')\n} else if (process.platform === 'darwin') {\n    APP_PATH = join(__dirname, 'build', 'mac-arm64', 'electron.app', 'Contents', 'MacOS', 'electron')\n} else {\n    throw new Error(`Platform '${process.platform}' not implemented`)\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["完整配置：",(0,s.jsx)(n.a,{href:"https://github.com/muwoo/electron-demo/blob/feat/test/wdio.conf.js",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/muwoo/electron-demo/blob/feat/test/wdio.conf.js"})]}),"\n",(0,s.jsxs)(n.h3,{id:"3-使用-electron-api",children:["3. 使用 Electron API",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-使用-electron-api",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["完成步骤 1、2 后，你可以在 ",(0,s.jsx)(n.code,{children:"test/specs/test.e2e.js"})," 中开始编写一个简单的测试用例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// test.e2e.js\nimport { browser } from '@wdio/globals';  \n  \n// 使用 Electron app 模块 api\nconst appName = await browser.electron.app('getName');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果你希望在 ",(0,s.jsx)(n.code,{children:"wdio"})," 中来 ",(0,s.jsx)(n.code,{children:"Mock"})," Electron 的 API，那么你需要在你的应用中导入 ",(0,s.jsx)(n.code,{children:"wdio-electron-service"})," 的 preload 和 main 脚本。"]}),"\n",(0,s.jsxs)(n.p,{children:["比如，在应用的 ",(0,s.jsx)(n.code,{children:"preload.js"})," 中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// preload.js\nconst isTest = process.env.NODE_ENV === 'test'\nif (isTest) {\n  require('wdio-electron-service/preload');\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在应用的 ",(0,s.jsx)(n.code,{children:"main.js"})," 中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const isTest = process.env.NODE_ENV === 'test'\nif (isTest) {\n  require('wdio-electron-service/main');\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["之后便可以调用 Mock 函数并提供 API 名称、函数名称以及模拟的返回值来模拟 Electron API 的功能。例如，需要对 Electron 的 ",(0,s.jsx)(n.code,{children:"showOpenDialog"})," 函数进行 ",(0,s.jsx)(n.code,{children:"Mock"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { expect } = require('@wdio/globals');\nconst { browser } = require('wdio-electron-service');\n\ndescribe('App', () => {\n  it('mock showOpenDialog', async () => {\n    // 对 showOpenDialog 进行 mock\n    await browser.electron.mock('dialog', 'showOpenDialog', 'dialog opened!');\n    const result = await browser.electron.dialog('showOpenDialog');\n    expect(result).toEqual('dialog opened!');\n  });\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"selenium",children:["Selenium",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#selenium",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.selenium.dev/",target:"_blank",rel:"noopener noreferrer",children:"Selenium"}),"\xa0是一个 Web 自动化框架，以多种语言公开与 WebDriver API 的绑定方式。 Node.js 环境下，可以通过 NPM 安装\xa0",(0,s.jsx)(n.code,{children:"selenium-webdriver"}),"\xa0包来使用此框架。"]}),"\n",(0,s.jsxs)(n.h3,{id:"1-安装-selenium-环境",children:["1. 安装 Selenium 环境",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-安装-selenium-环境",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["为了与 Electron 一起使用 Selenium ，你需要下载\xa0",(0,s.jsx)(n.code,{children:"electron-chromedriver"})," 和 ",(0,s.jsx)(n.code,{children:"selenium-webdriver"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 安装 electron-chromedriver\nyarn add --dev electron-chromedriver\n\n# 安装 selenium-webdriver\nyarn add --dev selenium-webdriver\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后在你的项目目录下启动一个 ",(0,s.jsx)(n.code,{children:"ChromeDriver"})," 服务："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./node_modules/.bin/chromedriver\n\n# Starting ChromeDriver (v2.10.291558) on port 9515  \n# Only local connections are allowed.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["启动成功后，默认端口是 ",(0,s.jsx)(n.code,{children:"9515"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-编写测试用例",children:["2. 编写测试用例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-编写测试用例",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们在项目目录中，新建一个 ",(0,s.jsx)(n.code,{children:"selenium/test.js"})," 目录，写入以下内容："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const webdriver = require('selenium-webdriver')\nconst {join} = require(\"path\");\n\n// for each OS\nlet APP_PATH;\nif (process.platform === 'linux') {\n  APP_PATH = join(__dirname, '../build', 'linux-unpacked', 'electron-vue')\n} else if (process.platform === 'win32') {\n  APP_PATH = join(__dirname, '../build', 'win-unpacked', 'electron-vue.exe')\n} else if (process.platform === 'darwin') {\n  APP_PATH = join(__dirname, '../build', 'mac-arm64', 'electron-vue.app', 'Contents', 'MacOS', 'electron-vue')\n} else {\n  throw new Error(`Platform '${process.platform}' not implemented`)\n}\n\nconst driver = new webdriver.Builder()\n  // 端口号 \"9515\" 是被 ChromeDriver 开启的.\n  .usingServer('http://localhost:9515')\n  .withCapabilities({\n    'goog:chromeOptions': {\n      // 这里填您的Electron二进制文件路径。\n      binary: APP_PATH\n    }\n  })\n  .forBrowser('chrome') // note: use .forBrowser('electron') for selenium-webdriver <= 3.6.0\n  .build()\n\ndriver.wait(() => {\n  return driver.getTitle().then((title) => {\n    return title === 'electron-vue'\n  })\n}, 1000)\ndriver.quit()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这里，我们通过 ",(0,s.jsx)(n.code,{children:"webdriver.Builder()"})," 来创建了一个 ",(0,s.jsx)(n.code,{children:"WebDriver"})," 实例，其中 ",(0,s.jsx)(n.code,{children:"9515"})," 端口就是我们之前启动的 ",(0,s.jsx)(n.code,{children:"ChromeDriver"})," 服务地址，",(0,s.jsx)(n.code,{children:"binary"})," 字段指明了启动 Electron 应用程序的地址路径。"]}),"\n",(0,s.jsx)(n.p,{children:"然后运行脚本："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"node selenium/test.js\n"})}),"\n",(0,s.jsx)(n.p,{children:"如果遇到了这个报错："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"SessionNotCreatedError: session not created: This version of ChromeDriver only supports Chrome version 116\nCurrent browser version is 118.0.5993.159 \n"})}),"\n",(0,s.jsxs)(n.p,{children:["因为 Electron 不同版本本身内置了一个特定版本的 ",(0,s.jsx)(n.code,{children:"Chromium"}),"， 这个错误表明你使用的 ",(0,s.jsx)(n.code,{children:"ChromeDriver"})," 版本与当前 Electron 版本内置的 ",(0,s.jsx)(n.code,{children:"Chromium"})," 不兼容。"]}),"\n",(0,s.jsxs)(n.p,{children:["解决方案一个是通过 ",(0,s.jsx)(n.a,{href:"https://chromedriver.chromium.org/downloads",target:"_blank",rel:"noopener noreferrer",children:"ChromeDriver - WebDriver for Chrome - Downloads"})," 这里找到匹配 Electron 内置 ",(0,s.jsx)(n.code,{children:"Chromium"})," 版本的 ",(0,s.jsx)(n.code,{children:"ChromeDriver"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["另一种就是安装指定版本的 ",(0,s.jsx)(n.code,{children:"Electron"}),"，让应用程序内置的 ",(0,s.jsx)(n.code,{children:"Chromium"})," 版本匹配上 ",(0,s.jsx)(n.code,{children:"ChromeDriver"}),"。关于 ",(0,s.jsx)(n.code,{children:"Electron"})," 版本具体使用了什么版本的 ",(0,s.jsx)(n.code,{children:"Chromium"}),"，可以在这里查看到：",(0,s.jsx)(n.a,{href:"https://releases.electronjs.org/releases/stable",target:"_blank",rel:"noopener noreferrer",children:"https://releases.electronjs.org/releases/stable"})," 。"]}),"\n",(0,s.jsxs)(n.h2,{id:"playwright",children:["Playwright",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#playwright",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://playwright.dev/",target:"_blank",rel:"noopener noreferrer",children:"Microsoft Playwright"}),"\xa0是一个端到端的测试框架，使用浏览器特定的远程调试协议架构，类似于\xa0",(0,s.jsx)(n.a,{href:"https://github.com/puppeteer/puppeteer",target:"_blank",rel:"noopener noreferrer",children:"Puppeteer"}),"\xa0的无头 Node.js API，但面向端到端测试。 Playwright 通过 Electron 支持\xa0",(0,s.jsx)(n.code,{children:"Chrome DevTools"})," 协议（CDP）获得",(0,s.jsx)(n.a,{href:"https://playwright.dev/docs/api/class-electron",target:"_blank",rel:"noopener noreferrer",children:"实验性的 Electron 支持"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"1-安装-playwright-环境",children:["1. 安装 Playwright 环境",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-安装-playwright-环境",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Playwright 推荐使用\xa0PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD\n# 环境变量来避免在测试 Electron 软件时进行不必要的浏览器下载。\nPLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 yarn add --dev playwright\n\n# 安装 Playwright 的测试工具，你也可以使用 Jest 或 Mocha\nyarn add --dev @playwright/test\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-编写测试用例-1",children:["2. 编写测试用例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-编写测试用例-1",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["安装完成后，可以在当前应用目录下新建一个测试目录：",(0,s.jsx)(n.code,{children:"playwright/test.spec.js"}),"，然后写入我们的第一个测试用例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { _electron: electron } = require('playwright')\nconst { test, expect } = require('@playwright/test')\n\ntest('example test', async () => {\n  // args 中填写 Electron 主进程启动的地址\n  const electronApp = await electron.launch({ args: ['../out/main/index.js'] })\n\n  // Electron 上下午执行表达式\n  const appPath = await electronApp.evaluate(async ({ app }) => {\n    // 这在 Electron 的主进程中运行，这里的参数始终是主应用脚本中 require('electron') 的结果。\n    return app.getAppPath();\n  });\n  console.log(appPath);\n\n  // 获取应用程序打开的第一个窗口.\n  const window = await electronApp.firstWindow();\n  // 获取窗口的标题.\n  const title = await window.title()\n  // 创建窗口截图.\n  await window.screenshot({ path: 'intro.png' });\n  // 打印窗口的 console 到 控制台.\n  window.on('console', console.log);\n  // Exit app.\n  await electronApp.close();\n  expect(title).toBe('标题');\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Playwright"})," 通过\xa0",(0,s.jsx)(n.code,{children:"electron.launch"}),"\xa0API 可以在开发模式下启动应用程序。 因此，要将此 API 的 ",(0,s.jsx)(n.code,{children:"args"})," 参数指向 Electron 应用，可以将路径传递到主进程入口点（此处为\xa0",(0,s.jsx)(n.code,{children:"../out/main/index.js"}),"）。"]}),"\n",(0,s.jsxs)(n.p,{children:["再次之后，你可以通过 ",(0,s.jsx)(n.code,{children:"electronApp.evaluate"})," 中的回调来访问到 Electron App 的主进程模块。"]}),"\n",(0,s.jsx)(n.p,{children:"然后调用脚本来运行测试用例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx playwright test\n\n# Running 1 test using 1 worker\n\n#  ✓  1 test.spec.js:4:1 › launch app (17.3s)\n\n#  Slow test file: test.spec.js (17.3s)\n#  Consider splitting slow test files to speed up parallel execution\n#  1 passed (17.6s)\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"自定义驱动",children:["自定义驱动",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义驱动",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们知道，通过 Node 的 ",(0,s.jsx)(n.code,{children:"child_process.spwan"})," 可以打开并运行一个应用程序，并通过 ",(0,s.jsx)(n.code,{children:"process.on()"})," 和 ",(0,s.jsx)(n.code,{children:"process.send()"})," 来和应用程序进行消息通信。因为了有了这些能力，可以让自定义驱动变得可行。"]}),"\n",(0,s.jsxs)(n.p,{children:["自定义启动的实现原理是将需要获取应用信息的功能通过 ",(0,s.jsx)(n.code,{children:"process.send()"})," 向 Electron 主进程发送通信消息，主进程通过 ",(0,s.jsx)(n.code,{children:"process.on()"})," 收到操作指令获取到数据后再通过 ",(0,s.jsx)(n.code,{children:"process.send()"})," 返回给测试程序。"]}),"\n",(0,s.jsxs)(n.h3,{id:"测试-demo",children:["测试 demo",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#测试-demo",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"首先，我们可以编写一个自定义测试驱动类，来实现启动测试和与测试应用的消息通信的功能："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// driver.js\nconst childProcess = require('child_process')\n\nclass TestDriver {\n  constructor ({ path, args, env }) {\n    this.rpcCalls = []\n    \n    // 定义测试环境变量，让测试应用可以区分环境\n    env.APP_TEST_DRIVER = 1 \n    // 启动子进程\n    this.process = childProcess.spawn(path, args, { stdio: ['inherit', 'inherit', 'inherit', 'ipc'], env })\n    \n    // 处理RPC回复\n    this.process.on('message', (message) => {\n      // 弹出处理器\n      const rpcCall = this.rpcCalls[message.msgId]\n      if (!rpcCall) return\n      this.rpcCalls[message.msgId] = null\n      // 拒绝/接受（reject/resolve）\n      if (message.reject) rpcCall.reject(message.reject)\n      else rpcCall.resolve(message.resolve)\n    })\n    \n    // 等待准备完毕\n    this.isReady = this.rpc('isReady').catch((err) => {\n      console.error('Application failed to start', err)\n      this.stop()\n      process.exit(1)\n    })\n  }\n  \n  // 简单 RPC 回调\n  // 可以使用：driver.rpc('method', 1, 2, 3).then(...)\n  async rpc (cmd, ...args) {\n    // send rpc request\n    const msgId = this.rpcCalls.length\n    this.process.send({ msgId, cmd, args })\n    return new Promise((resolve, reject) => this.rpcCalls.push({ resolve, reject }))\n  }\n  \n  stop () {\n    this.process.kill()\n  }\n}\n\nmodule.exports = { TestDriver }\n"})}),"\n",(0,s.jsx)(n.p,{children:"接着，我们需要给主进程增加事件处理功能："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// main.js\n// 在这里定义可做 RPC 调用的方法\nconst METHODS = {\n  isReady () {\n    // 进行任何需要的初始化\n    return true\n  },\n  getAppName () {\n    return app.getName();\n  }\n}\n\n// 收到消息后的处理函数\nconst onMessage = async ({ msgId, cmd, args }) => {\n  // 获取函数\n  let method = METHODS[cmd]\n  if (!method) method = () => new Error('Invalid method: ' + cmd)\n  try {\n    // 执行函数\n    const resolve = await method(...args)\n    process.send({ msgId, resolve })\n  } catch (err) {\n    const reject = {\n      message: err.message,\n      stack: err.stack,\n      name: err.name\n    }\n    process.send({ msgId, reject })\n  }\n}\n// 如果是测试环境才进行监听\nif (process.env.APP_TEST_DRIVER) {\n  process.on('message', onMessage)\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们尝试使用 ",(0,s.jsx)(n.a,{href:"https://mochajs.org/",target:"_blank",rel:"noopener noreferrer",children:"Mocha"})," 和 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/assert",target:"_blank",rel:"noopener noreferrer",children:"assert"})," 来编写测试用例，在此之前，你需要先安装这两个测试工具："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn add mocha assert\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后，我们就可以基于 ",(0,s.jsx)(n.code,{children:"Mocha"})," 和 ",(0,s.jsx)(n.code,{children:"assert"})," 开始编写测试用例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// app.test.js\nconst assert = require('assert')\nconst {join} = require('path')\nconst { TestDriver } = require('./driver')\n\n\n// 获取应用的启动路径\nlet APP_PATH;\nif (process.platform === 'linux') {\n  APP_PATH = join(__dirname, '../build', 'linux-unpacked', 'electron-vue')\n} else if (process.platform === 'win32') {\n  APP_PATH = join(__dirname, '../build', 'win-unpacked', 'electron-vue.exe')\n} else if (process.platform === 'darwin') {\n  APP_PATH = join(__dirname, '../build', 'mac-arm64', 'electron-vue.app', 'Contents', 'MacOS', 'electron-vue')\n} else {\n  throw new Error(`Platform '${process.platform}' not implemented`)\n}\n\n// 初始化测试应用\nconst app = new TestDriver({\n  path: APP_PATH,\n  args: ['./app'],\n  env: {\n    NODE_ENV: 'test'\n  }\n})\n\ndescribe('测试启动', () => {\n  before(async () => {\n    await app.isReady\n  });\n  it('获取 app name', async () => {\n    const name = await app.rpc('getAppName');\n    assert(name, 'electron-app')\n  })\n  after(async () => {\n    await app.stop()\n  });\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"最后添加测试脚本："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// package.json\n"scripts": {\n  "mocha": "mocha auto-test/*.test.js"\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["本小节所有测试 demo 已上传 github：",(0,s.jsx)(n.a,{href:"https://github.com/muwoo/electron-demo/tree/feat/test",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/muwoo/electron-demo/tree/feat/test"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"WebdriverIO"}),"、",(0,s.jsx)(n.code,{children:"Selenium"})," 二者都是基于 ",(0,s.jsx)(n.code,{children:"WebDriver"})," 协议的测试框架。",(0,s.jsx)(n.code,{children:"Selenium"})," 提供了多种语言来编写测试用例的能力，",(0,s.jsx)(n.code,{children:"WebdriverIO"})," 则是一个相对工程化的测试解决方案，内置了各种插件。",(0,s.jsx)(n.code,{children:"Playwright"})," 是一个相对较新的自动化测试工具，其基于的是类似于 ",(0,s.jsx)(n.a,{href:"https://github.com/puppeteer/puppeteer",target:"_blank",rel:"noopener noreferrer",children:"Puppeteer"}),"\xa0的无头 Node.js API 来完成自动化测试。"]}),"\n",(0,s.jsxs)(n.p,{children:["与上面三者不同的是，我们还可以通过 Node 的 ",(0,s.jsx)(n.code,{children:"child_process"})," 来自定义测试驱动，这种方案会有更小的测试内存占用，更加灵活的测试功能，但与此同时，我们也需要编写更多的代码。"]}),"\n",(0,s.jsx)(n.p,{children:"这几种测试工具和方法都可以应用到你的应用当中，具体使用哪种测试工具取决于团队的偏好、项目需求以及对于性能和功能的要求。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let o=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC23%E7%AB%A0%E2%80%94%E9%80%9A%E7%94%A8%E7%AF%87%EF%BC%9AElectron%E5%BA%94%E7%94%A8%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"WebdriverIO",id:"webdriverio",depth:2},{text:"1. 安装 WebdriverIO",id:"1-安装-webdriverio",depth:3},{text:"2. 配置 WebdriverIO",id:"2-配置-webdriverio",depth:3},{text:"3. 使用 Electron API",id:"3-使用-electron-api",depth:3},{text:"Selenium",id:"selenium",depth:2},{text:"1. 安装 Selenium 环境",id:"1-安装-selenium-环境",depth:3},{text:"2. 编写测试用例",id:"2-编写测试用例",depth:3},{text:"Playwright",id:"playwright",depth:2},{text:"1. 安装 Playwright 环境",id:"1-安装-playwright-环境",depth:3},{text:"2. 编写测试用例",id:"2-编写测试用例-1",depth:3},{text:"自定义驱动",id:"自定义驱动",depth:2},{text:"测试 demo",id:"测试-demo",depth:3},{text:"总结",id:"总结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);