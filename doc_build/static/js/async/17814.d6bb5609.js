"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["17814"],{356165:function(e,n,s){s.r(n),s.d(n,{default:()=>S});var r=s(552676),i=s(740453);let t=s.p+"static/image/7d72269c1581e6c039a12faf4dfbc399.5140a431.webp",a=s.p+"static/image/90c28fa58e721dc58517691be9669d40.b1e816e8.webp",d=s.p+"static/image/1f6fbe03dcf406e44137f4cf29a5957f.ce2b249d.webp",c=s.p+"static/image/076ac2f5de4e9209f582391451d6e9b4.276a3b61.webp",l=s.p+"static/image/8ebad4ce930a0b00503063d8548086dc.8446f313.webp",o=s.p+"static/image/61de36a93990131997cd2f69f55caa5d.289b9337.webp",h=s.p+"static/image/aea3aeac3ab7dced410f0be2ddc2dfa5.8446f313.webp",x=s.p+"static/image/12a6f724d270e0d766bd03a18ee36491.929831fb.webp",p=s.p+"static/image/d6322298a3f8ede32630b70b712ed349.a3dd4fb0.webp",j=s.p+"static/image/3502d6f0a7b23b585d82230b9c98c0ec.52085c7b.webp",m=s.p+"static/image/1b13bfd16b5ede597f1c7da2b45782cd.48651597.webp",g=s.p+"static/image/29c106697026f0d00eef8edac0aa5293.b06ea654.webp",u=s.p+"static/image/f0d0d97373d01fabec4af0ab8a5b03e0.5a33ca13.gif",b=s.p+"static/image/429738602c7b697bb88fd9d56287f293.e5231e24.gif",f=s.p+"static/image/4dee2a50b3321907395fc186587b32ae.edd01d88.gif",N=s.p+"static/image/6220116b00d6be90ff76b0af863facec.60e6042f.gif",v=s.p+"static/image/41a2ec430dabe9535ffd621d7ea88b13.49d8c225.webp";function y(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",img:"img",code:"code",ol:"ol",li:"li",pre:"pre",h3:"h3"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"37实战篇-_-react-notes-_-项目介绍与创建",children:["37.实战篇 _ React Notes _ 项目介绍与创建",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#37实战篇-_-react-notes-_-项目介绍与创建",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"欢迎来到实战篇！基础篇的目标是带大家复习基础知识，以及用作使用手册，方便大家在以后的项目开发中查询 API 用法，属于这本小册的“赠送面积”。从本篇起就进入小册的正式内容了。"}),"\n",(0,r.jsxs)(n.p,{children:["我们的第一个实战项目是 ",(0,r.jsx)(n.strong,{children:"React Notes"}),"，因为 Next.js v14 基于 React Server Component 构建的 App Router，而 React Server Component 的起源是 2020 年 12 月 21 日 React 官方发布的关于 React Server Components 的",(0,r.jsx)(n.a,{href:"https://legacy.reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html",target:"_blank",rel:"noopener noreferrer",children:"介绍文章"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["这篇文章同时配上了由 Dan Abramov 和 Lauren Tan 两位 React 团队的工程师分享的长约 1h 的",(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?time_continue=15&v=TQQPAU21ZUw&embeds_referring_euri=https%3A%2F%2Flegacy.reactjs.org%2F&source_ve_path=MzY4NDIsMzY4NDIsMzY4NDIsMzY4NDIsMzY4NDIsMzY4NDIsMzY4NDIsMjg2NjY&feature=emb_logo",target:"_blank",rel:"noopener noreferrer",children:"演讲"}),"和 ",(0,r.jsx)(n.a,{href:"https://github.com/reactjs/server-components-demo",target:"_blank",rel:"noopener noreferrer",children:"Demo"}),"，详细的介绍了 React Server Components 的出现背景和使用方式（这是这个 Demo 的一个",(0,r.jsx)(n.a,{href:"https://stackblitz.com/edit/react-server-components-demo-u57n2t?file=README.md",target:"_blank",rel:"noopener noreferrer",children:"线上工程"}),"，你可以在这个地址上调试学习）。"]}),"\n",(0,r.jsxs)(n.p,{children:["当时这个 ",(0,r.jsx)(n.a,{href:"https://github.com/reactjs/server-components-demo",target:"_blank",rel:"noopener noreferrer",children:"Demo"})," 就是 ",(0,r.jsx)(n.strong,{children:"React Notes"}),"，实战篇的第一个项目从这个“起源 Demo”开始讲起，既是一种追溯致敬，也是为了帮助大家在实战中体会 React Server Component 的特性和优势，毕竟当时 React 的工程师写了这个 Demo 用于新特性的展示，自然是要覆盖它的各种用法和特性。"]}),"\n",(0,r.jsx)(n.p,{children:"这个 Demo 中的 Server 是自己写的，数据库用的是 PostgreSQL，如果要本地预览原本的 Demo 效果，参照 Demo 的介绍，本地安装 PostgreSQL，创建数据库，连接数据库，再运行项目即可成功开启。这里具体的实现步骤就不多讲了，反正我们的实战篇会用 Next.js 重新实现这个项目。"}),"\n",(0,r.jsxs)(n.h2,{id:"需求文档",children:["需求文档",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#需求文档",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"先让我介绍下 React Notes 的项目效果，正如它的名字表明的那样，这是一个笔记系统，可以增删改查笔记，笔记支持 markdown 格式。"}),"\n",(0,r.jsx)(n.p,{children:"首页效果如下，界面分为两列，左侧是笔记列表，右侧是笔记内容："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["点击左边的 ",(0,r.jsx)(n.code,{children:"New"})," 按钮，可以增加一个 Note，增加后，左侧笔记列表也会同时更新："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:"React Notes 增加.gif"})}),"\n",(0,r.jsx)(n.p,{children:"在编辑的时候，也可以删除一个 Note，删除后左侧笔记列表也会同时更新："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:"React Notes 删除.gif"})}),"\n",(0,r.jsx)(n.p,{children:"可以对现有的 Note 进行修改："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:"React Notes 修改.gif"})}),"\n",(0,r.jsx)(n.p,{children:"还可以在左侧用搜索框查找一个 Note："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:"React Notes 查找.gif"})}),"\n",(0,r.jsx)(n.p,{children:"看起来效果是不是平平无奇？但是注意一点，在这个例子中，我们先在左侧笔记列表中展开了一个笔记，然后又新建了一个笔记，在新建后，左侧笔记列表刷新，但展开的笔记依然保持了之前的状态。"}),"\n",(0,r.jsxs)(n.h2,{id:"技术文档",children:["技术文档",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#技术文档",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现在我们要用 Next.js 实现这个项目，该怎么实现呢？"}),"\n",(0,r.jsx)(n.p,{children:"首先是技术选型，Next.js 的 App Router 自然是要用的，TypeScript 为了减少代码展示量就不使用了，ESLint 要使用，用于校验代码，Tailwind CSS 不需要，因为重写样式浪费时间，我们直接导入原 Demo 的样式文件即可。"}),"\n",(0,r.jsx)(n.p,{children:"后端数据库选择什么都可以，不过考虑到初期大家对 Next.js 尤其是 App Router 的使用不太习惯，再加上数据库的安装和使用也需要额外学习，我们先集中学习如何写好 Next.js 项目，数据方面先使用模拟数据来实现。"}),"\n",(0,r.jsxs)(n.p,{children:["那么新的问题来了，怎么写模拟数据呢？第一种方式是在代码里直接写入数据。第二种方式是使用比如 faskMock 这样的工具生成静态接口。但是我们毕竟要做增删改查，无论是直接写数据还是静态接口都难以实现真的对数据源进行修改，所以最后我想了下，干脆用 ",(0,r.jsx)(n.a,{href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer",children:"Redis"})," 做好了，作为经典的 NoSQL 数据库，使用起来也很方便。等 Next.js 部分完成学习之后，我们再替换为其他数据库。（其实我还试了用",(0,r.jsx)(n.a,{href:"https://developers.vika.cn/api/introduction",target:"_blank",rel:"noopener noreferrer",children:"维格表"}),"做数据库，但维格表接口有每秒最多 2 次的限制，于是就放弃了）"]}),"\n",(0,r.jsxs)(n.p,{children:["其次是路由分析，原 Demo 中都是在 ",(0,r.jsx)(n.code,{children:"localhost:4000"}),"下实现的，各种操作并不会产生路由变化，但既然我们用了 Next.js，不妨改成使用路由的方式，想了下，应该有这样几个路由："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["首页肯定是 ",(0,r.jsx)(n.code,{children:"/"}),"，点击左上角的 React Note Logo 会导航至首页 ",(0,r.jsx)(n.code,{children:"/"})]}),"\n",(0,r.jsxs)(n.li,{children:["点击左侧笔记列表中的一项，导航至 ",(0,r.jsx)(n.code,{children:"/note/xxxx"}),"路由，渲染具体笔记内容"]}),"\n",(0,r.jsxs)(n.li,{children:["当点击 ",(0,r.jsx)(n.code,{children:"NEW"})," 按钮的时候导航到 ",(0,r.jsx)(n.code,{children:"/note/edit"}),"路由上，点击 ",(0,r.jsx)(n.code,{children:"Done"}),"导航至刚创建的 ",(0,r.jsx)(n.code,{children:"/note/xxxx"}),"路由"]}),"\n",(0,r.jsxs)(n.li,{children:["导航至 ",(0,r.jsx)(n.code,{children:"/note/xxxx"}),"后，点击 ",(0,r.jsx)(n.code,{children:"EDIT"})," 按钮，进入 ",(0,r.jsx)(n.code,{children:"/note/edit/xxxx"})," 路由，点击 ",(0,r.jsx)(n.code,{children:"Done"}),"导航至刚修改的 ",(0,r.jsx)(n.code,{children:"/note/xxxx"}),"路由，点击 ",(0,r.jsx)(n.code,{children:"DELETE"})," 导航至首页 ",(0,r.jsx)(n.code,{children:"/"})]}),"\n",(0,r.jsxs)(n.li,{children:["当在左侧搜索框输入字符的时候，对应路由添加 ",(0,r.jsx)(n.code,{children:"?q=searchText"})," 参数"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"对应到 Next.js 的项目目录，至少要有这些文件："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"next-react-notes                 \n├─ app                                     \n│  ├─ note                       \n│  │  ├─ [id]                         \n│  │  │  └─ page.js              \n│  │  └─ edit                    \n│  │     ├─ [id]                 \n│  │     │  └─ page.js              \n│  │     └─ page.js                        \n│  ├─ layout.js                  \n│  └─ page.js                                \n"})}),"\n",(0,r.jsxs)(n.p,{children:["考虑到左侧笔记列表出现在所有的路由中，我们将左侧的内容包括搜索栏和笔记列表，统一放在根布局 ",(0,r.jsx)(n.code,{children:"layout.js"})," 中。"]}),"\n",(0,r.jsx)(n.p,{children:"再者是组件划分，示意图如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:"截屏2023-12-14 下午4.08.38.png"})}),"\n",(0,r.jsxs)(n.p,{children:["左侧是 ",(0,r.jsx)(n.code,{children:"<Sidebar>"})," 组件，子组件中有："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<SidebarSearchField>"})," 组件负责搜索框"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<EditButton>"})," 组件负责添加按钮"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<SidebarNoteList>"})," 组件负责笔记列表","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["再拆分为具体的 ",(0,r.jsx)(n.code,{children:"<SidebarNoteItem>"})," 组件负责每一条具体的笔记内容"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["右侧是 ",(0,r.jsx)(n.code,{children:"<Note>"})," 组件，子组件有："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<EditButton>"})," 组件负责编辑按钮"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<NoteEditor>"})," 组件负责笔记的编辑界面"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<NotePreview>"})," 组件负责笔记的预览界面"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"对项目有了大致的了解和规划，剩下的就让我们在项目里具体完善吧，现在开始动手吧。"}),"\n",(0,r.jsxs)(n.h2,{id:"开始项目",children:["开始项目",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开始项目",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-创建项目",children:["1. 创建项目",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-创建项目",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["使用 ",(0,r.jsx)(n.code,{children:"create-next-app"}),"脚手架",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7307280276332544027#heading-1",target:"_blank",rel:"noopener noreferrer",children:"创建项目"}),"，运行："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx create-next-app@latest\n"})}),"\n",(0,r.jsx)(n.p,{children:"相关选择如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["运行 ",(0,r.jsx)(n.code,{children:"npm run dev"}),"，打开 ",(0,r.jsx)(n.code,{children:"localhost: 3000"}),"开启项目："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-配置路径别名",children:["2. 配置路径别名",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-配置路径别名",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["为了让代码文件职责清晰，我们将组件统一放在根目录下的 ",(0,r.jsx)(n.code,{children:"components"}),"目录下，工具库放在根目录下的 ",(0,r.jsx)(n.code,{children:"lib"}),"目录下，为了方便引入，我们配置一下",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309078454316564507#heading-13",target:"_blank",rel:"noopener noreferrer",children:"路径别名"}),"，修改 ",(0,r.jsx)(n.code,{children:"jsconfig.json"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  "compilerOptions": {\n    "paths": {\n      "@/components/*": ["components/*"],\n      "@/lib/*": ["lib/*"]\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"3-修改根布局和根页面",children:["3. 修改根布局和根页面",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-修改根布局和根页面",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"app/page.js"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// app/page.js\nexport default async function Page() {\n  return (\n    <div className="note--empty-state">\n      <span className="note-text--empty-state">\n        Click a note on the left to view something! \uD83E\uDD7A\n      </span>\n    </div>\n  )\n}\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"app/layout.js"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import \'./style.css\'\nimport Sidebar from \'@/components/Sidebar\'\n\nexport default async function RootLayout({\n  children\n}) {\n\n  return (\n    <html lang="en">\n      <body>\n        <div className="container">\n          <div className="main">\n            <Sidebar />\n            <section className="col note-viewer">{children}</section>\n          </div>\n        </div>\n      </body>\n    </html>\n  )\n}\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"/components"}),"下新建一个名为 ",(0,r.jsx)(n.code,{children:"Sidebar.js"})," 的文件，代码为："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import React from \'react\'\nimport Link from \'next/link\'\n\nexport default async function Sidebar() {\n  return (\n    <>\n      <section className="col sidebar">\n        <Link href={\'/\'} className="link--unstyled">\n          <section className="sidebar-header">\n            <img\n              className="logo"\n              src="/logo.svg"\n              width="22px"\n              height="20px"\n              alt=""\n              role="presentation"\n            />\n            <strong>React Notes</strong>\n          </section>\n        </Link>\n        <section className="sidebar-menu" role="menubar">\n            {/* SideSearchField */}\n        </section>\n        <nav>\n          {/* SidebarNoteList */}\n        </nav>\n      </section>\n    </>\n  )\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"4-引入所需样式和图片文件",children:["4. 引入所需样式和图片文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-引入所需样式和图片文件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在根布局里我们引用了 ",(0,r.jsx)(n.code,{children:"style.css"}),"，",(0,r.jsx)(n.code,{children:"style.css"}),"里声明了所有的样式，但这个文件不需要我们自己写，因为",(0,r.jsx)(n.a,{href:"https://github.com/reactjs/server-components-demo/tree/main",target:"_blank",rel:"noopener noreferrer",children:"原 Demo"})," 里就已经将所有的样式写到了一个 ",(0,r.jsx)(n.a,{href:"https://github.com/reactjs/server-components-demo/blob/main/public/style.css",target:"_blank",rel:"noopener noreferrer",children:"style.css"})," 文件，我们只需要将这个文件拷贝到 ",(0,r.jsx)(n.code,{children:"app"}),"目录下即可。"]}),"\n",(0,r.jsxs)(n.p,{children:["这个项目里还会用到一些图片，我们将原 Demo 里 ",(0,r.jsx)(n.a,{href:"https://github.com/reactjs/server-components-demo/tree/main/public",target:"_blank",rel:"noopener noreferrer",children:"public 目录"}),"下的 5 张 SVG 图片：",(0,r.jsx)(n.code,{children:"checkmark.svg"}),"、",(0,r.jsx)(n.code,{children:"chevron-down.svg"}),"、",(0,r.jsx)(n.code,{children:"chevron-up.svg"}),"、",(0,r.jsx)(n.code,{children:"cross.svg"}),"、",(0,r.jsx)(n.code,{children:"logo.svg"})," 拷贝到 ",(0,r.jsx)(n.code,{children:"public"}),"目录下。"]}),"\n",(0,r.jsxs)(n.h3,{id:"5-第一步完成",children:["5. 第一步完成！",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-第一步完成",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果步骤正确的话，此时再访问 ",(0,r.jsx)(n.code,{children:"http://localhost:3000/"}),"应该效果如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"是不是有原 Demo 的样子了？"}),"\n",(0,r.jsxs)(n.h2,{id:"数据请求",children:["数据请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据请求",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现在我们来处理数据的问题，正如之前所说，为了方便起见，我们使用 Redis 做数据库。简单介绍一下 Redis，它是一个高性能的 key-value  数据库，是现在最受欢迎的 NoSQL 数据库之一，常用于缓存、计数器、消息队列系统、排行榜等场景。"}),"\n",(0,r.jsx)(n.p,{children:"使用 Redis 很简单，一共分为三步："}),"\n",(0,r.jsxs)(n.h3,{id:"1-安装-redis",children:["1. 安装 Redis",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-安装-redis",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["macOS 安装 redis 很简单，按照",(0,r.jsx)(n.a,{href:"https://redis.io/docs/install/install-redis/install-redis-on-mac-os/",target:"_blank",rel:"noopener noreferrer",children:"官网安装说明"}),"，使用 Homebrew 安装即可："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"brew install redis\n"})}),"\n",(0,r.jsx)(n.p,{children:"Windows 安装略微复杂一点，因为我手边没有 Windows 电脑，就不提供安装方法了，教程很多。"}),"\n",(0,r.jsxs)(n.h3,{id:"2-启动-redis",children:["2. 启动 Redis",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-启动-redis",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"运行以下命令，如果出现下图界面即表示运行成功："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"redis-server\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-项目引入-redis",children:["3. 项目引入 Redis",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-项目引入-redis",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在项目里使用 redis 的时候，我们借助 ",(0,r.jsx)(n.a,{href:"https://github.com/redis/ioredis",target:"_blank",rel:"noopener noreferrer",children:"ioredis"})," 这个库，安装 ioredis："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install ioredis\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在根目录下新建一个 ",(0,r.jsx)(n.code,{children:"lib"}),"文件夹，在 ",(0,r.jsx)(n.code,{children:"lib"}),"下新建一个名为 ",(0,r.jsx)(n.code,{children:"redis.js"}),"的文件，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import Redis from \'ioredis\'\n\nconst redis = new Redis()\n\nconst initialData = {\n  "1702459181837": \'{"title":"sunt aut","content":"quia et suscipit suscipit recusandae","updateTime":"2023-12-13T09:19:48.837Z"}\',\n  "1702459182837": \'{"title":"qui est","content":"est rerum tempore vitae sequi sint","updateTime":"2023-12-13T09:19:48.837Z"}\',\n  "1702459188837": \'{"title":"ea molestias","content":"et iusto sed quo iure","updateTime":"2023-12-13T09:19:48.837Z"}\'\n}\n\nexport async function getAllNotes() {\n  const data = await redis.hgetall("notes");\n  if (Object.keys(data).length == 0) {\n    await redis.hset("notes", initialData);\n  }\n  return await redis.hgetall("notes")\n}\n\nexport async function addNote(data) {\n  const uuid = Date.now().toString();\n  await redis.hset("notes", [uuid], data);\n  return uuid\n}\n\nexport async function updateNote(uuid, data) {\n  await redis.hset("notes", [uuid], data);\n}\n\nexport async function getNote(uuid) {\n  return JSON.parse(await redis.hget("notes", uuid));\n}\n\nexport async function delNote(uuid) {\n  return redis.hdel("notes", uuid)\n}\n\nexport default redis\n'})}),"\n",(0,r.jsx)(n.p,{children:"这块代码并不复杂，我们导出了 5 个函数，表示 5 个用于前后端交互的接口，分别是："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"获取所有笔记的 getAllNotes，这里我们做了一个特殊处理，如果为空，就插入 3 条事先定义的笔记数据"}),"\n",(0,r.jsx)(n.li,{children:"添加笔记的 addNote"}),"\n",(0,r.jsx)(n.li,{children:"更新笔记的 updateNote"}),"\n",(0,r.jsx)(n.li,{children:"获取笔记的 updateNote"}),"\n",(0,r.jsx)(n.li,{children:"删除笔记的 delNote"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["其中我们使用了 ioredis 的 hash 结构（ioredis 提供了相关",(0,r.jsx)(n.a,{href:"https://github.com/redis/ioredis/blob/main/examples/hash.js",target:"_blank",rel:"noopener noreferrer",children:"写法示例"}),"和 ",(0,r.jsx)(n.a,{href:"https://redis.github.io/ioredis/classes/Redis.html",target:"_blank",rel:"noopener noreferrer",children:"API 说明"}),"）。也就是说，我们在 redis 服务器中存储的数据大概长这样："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  "1702459181837": \'{"title":"sunt aut","content":"quia et suscipit suscipit recusandae","updateTime":"2023-12-13T09:19:48.837Z"}\',\n  "1702459182837": \'{"title":"qui est","content":"est rerum tempore vitae sequi sint","updateTime":"2023-12-13T09:19:48.837Z"}\',\n  "1702459188837": \'{"title":"ea molestias","content":"et iusto sed quo iure","updateTime":"2023-12-13T09:19:48.837Z"}\'\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["使用 macOS 的同学可以再下载一个 ",(0,r.jsx)(n.a,{href:"https://getmedis.com/",target:"_blank",rel:"noopener noreferrer",children:"Medis"}),"，用于查看 Redis 中的数据（当然此时 Redis 还没有写入这些数据）："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["其中，key 值用的是创建笔记时的时间戳，value 值是具体的笔记数据，分为 3 个字段，分别是 ",(0,r.jsx)(n.code,{children:"title"}),"、",(0,r.jsx)(n.code,{children:"content"}),"、",(0,r.jsx)(n.code,{children:"updateTime"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"sidebar-组件",children:["Sidebar 组件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sidebar-组件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现在让我们用此数据接口来写左侧的笔记列表吧！"}),"\n",(0,r.jsxs)(n.h3,{id:"1-笔记列表",children:["1. 笔记列表",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-笔记列表",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"components/Sidebar.js"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import React from \'react\'\nimport Link from \'next/link\'\nimport { getAllNotes } from \'@/lib/redis\';\nimport SidebarNoteList from \'@/components/SidebarNoteList\';\n\nexport default async function Sidebar() {\n  const notes = await getAllNotes()\n  return (\n    <>\n      <section className="col sidebar">\n        <Link href={\'/\'} className="link--unstyled">\n          <section className="sidebar-header">\n            <img\n              className="logo"\n              src="/logo.svg"\n              width="22px"\n              height="20px"\n              alt=""\n              role="presentation"\n              />\n            <strong>React Notes</strong>\n          </section>\n        </Link>\n        <section className="sidebar-menu" role="menubar">\n          {/* SideSearchField */}\n        </section>\n        <nav>\n          <SidebarNoteList notes={notes} />\n        </nav>\n      </section>\n    </>\n  )\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在代码中，我们将笔记列表抽成了单独的 ",(0,r.jsx)(n.code,{children:"components/SidebarNoteList.js"}),"组件，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'export default async function NoteList({ notes }) {\n\n  const arr = Object.entries(notes);\n\n  if (arr.length == 0) {\n    return <div className="notes-empty">\n      {\'No notes created yet!\'}\n    </div>\n  }\n\n  return <ul className="notes-list">\n    {arr.map(([noteId, note]) => {\n    const { title, updateTime } = JSON.parse(note);\n    return <li key={noteId}>\n      <header className="sidebar-note-header">\n        <strong>{title}</strong>\n        <small>{updateTime}</small>\n      </header>\n    </li>\n  })}\n  </ul>\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["如果步骤正确的话，此时再访问 ",(0,r.jsx)(n.code,{children:"http://localhost:3000/"}),"应该效果如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"我们已经成功的获取了 Redis 数据库中的数据，然后服务端渲染到了页面上。"}),"\n",(0,r.jsx)(n.p,{children:"现在在 Medis 中应该已经可以查看到写入的数据："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["现在你在 Medis 中修改下数据，",(0,r.jsx)(n.code,{children:"http://localhost:3000/"}),"刷新后也会展示出来。"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-时间处理库",children:["2. 时间处理库",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-时间处理库",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在你会发现，左侧笔记列表中的时间展示非常“难看”，为此我们需要一个将时间格式化的库，这里我们选择大家经常会用到的 ",(0,r.jsx)(n.a,{href:"https://dayjs.gitee.io/zh-CN/",target:"_blank",rel:"noopener noreferrer",children:"Day.js"}),"，安装一下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install dayjs\n"})}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"SidebarNoteList.js"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import dayjs from 'dayjs';\n\nexport default async function NoteList({ notes }) {\n\n  const arr = Object.entries(notes);\n\n  if (arr.length == 0) {\n    return <div className=\"notes-empty\">\n      {'No notes created yet!'}\n    </div>\n  }\n\n  return <ul className=\"notes-list\">\n    {arr.map(([noteId, note]) => {\n      const { title, updateTime } = JSON.parse(note);\n      return <li key={noteId}>\n        <header className=\"sidebar-note-header\">\n          <strong>{title}</strong>\n          <small>{dayjs(updateTime).format('YYYY-MM-DD hh:mm:ss')}</small>\n        </header>\n      </li>\n    })}\n  </ul>\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"时间效果展示如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["是不是好看多了？但其实效果并不重要，重要的是我们引用了 ",(0,r.jsx)(n.code,{children:"day.js"})," 这个库。我们引入 ",(0,r.jsx)(n.code,{children:"day.js"})," 的 SidebarNoteList 组件使用的是服务端渲染，这意味着 ",(0,r.jsx)(n.code,{children:"day.js"})," 的代码并不会被打包到客户端的 bundle 中。我们查看开发者工具中的源代码："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"截屏2023-12-14 下午10.56.02.png"})}),"\n",(0,r.jsxs)(n.p,{children:["你会发现 node_modules 并没有 day.js，但如果你现在在 SidebarNoteList 组件的顶部添加 ",(0,r.jsx)(n.code,{children:"'use client'"}),"，声明为客户端组件，你会发现立刻就多了 day.js："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"截屏2023-12-14 下午10.59.07.png"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-最佳实践多用服务端组件",children:["3. 最佳实践：多用服务端组件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-最佳实践多用服务端组件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这就是使用 React Server Compoent 的好处之一，服务端组件的代码不会打包到客户端的 bundle 中："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"那么今天的内容就结束了，本篇我们大致知道了要做的项目内容，并新建了 Next.js 项目，学会了用 Redis 做个简易的数据库，最后通过引入时间处理库，了解了使用 React Server Component 的一个优势。"}),"\n",(0,r.jsxs)(n.p,{children:["本篇的代码我已经上传到",(0,r.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/main",target:"_blank",rel:"noopener noreferrer",children:"代码仓库"}),"的 Day1 分支：",(0,r.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/day1",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/day1"}),"，直接使用的时候不要忘记在本地开启 Redis。"]}),"\n",(0,r.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/reactjs/server-components-demo",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/reactjs/server-components-demo"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=TQQPAU21ZUw&t=15s&ab_channel=MetaOpenSource",target:"_blank",rel:"noopener noreferrer",children:"https://www.youtube.com/watch?v=TQQPAU21ZUw&t=15s&ab_channel=MetaOpenSource"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://redis.io/docs/install/install-redis/install-redis-on-mac-os/",target:"_blank",rel:"noopener noreferrer",children:"https://redis.io/docs/install/install-redis/install-redis-on-mac-os/"})}),"\n"]})]})}function _(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(y,{...e})}):y(e)}let S=_;_.__RSPRESS_PAGE_META={},_.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F37.%E5%AE%9E%E6%88%98%E7%AF%87%20_%20React%20Notes%20_%20%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%88%9B%E5%BB%BA.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"需求文档",id:"需求文档",depth:2},{text:"技术文档",id:"技术文档",depth:2},{text:"开始项目",id:"开始项目",depth:2},{text:"1. 创建项目",id:"1-创建项目",depth:3},{text:"2. 配置路径别名",id:"2-配置路径别名",depth:3},{text:"3. 修改根布局和根页面",id:"3-修改根布局和根页面",depth:3},{text:"4. 引入所需样式和图片文件",id:"4-引入所需样式和图片文件",depth:3},{text:"5. 第一步完成！",id:"5-第一步完成",depth:3},{text:"数据请求",id:"数据请求",depth:2},{text:"1. 安装 Redis",id:"1-安装-redis",depth:3},{text:"2. 启动 Redis",id:"2-启动-redis",depth:3},{text:"3. 项目引入 Redis",id:"3-项目引入-redis",depth:3},{text:"Sidebar 组件",id:"sidebar-组件",depth:2},{text:"1. 笔记列表",id:"1-笔记列表",depth:3},{text:"2. 时间处理库",id:"2-时间处理库",depth:3},{text:"3. 最佳实践：多用服务端组件",id:"3-最佳实践多用服务端组件",depth:3},{text:"总结",id:"总结",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"37.实战篇 _ React Notes _ 项目介绍与创建",headingTitle:"37.实战篇 _ React Notes _ 项目介绍与创建",frontmatter:{}}}}]);