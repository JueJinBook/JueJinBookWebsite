"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["24493"],{927396:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var l=r(552676),o=r(740453);let i=r.p+"static/image/90ea69ad1f8ec36398ee9997ed0a0595.a9ee217d.webp",d=r.p+"static/image/1fb2286416fe8b2cce50ccaf258af9d7.cc4e5693.webp",s=r.p+"static/image/26fc4388da8d992df88e663c93dc2b06.3e790bd8.webp";function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",ul:"ul",li:"li",pre:"pre",img:"img",blockquote:"blockquote",h3:"h3",ol:"ol"},(0,o.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.h1,{id:"第02章搭建go语言的开发环境",children:["第02章—搭建Go语言的开发环境",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第02章搭建go语言的开发环境",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"\uFEFF从本小节开始，我们就要正式动手实践了。"}),"\n",(0,l.jsx)(n.p,{children:"类比现实生活，我们若要钉钉子，就需要准备锤子；想要烧菜，就需要准备灶具和食材…… 类似地，若要在电脑上编写 Go 语言程序，便要先配置开发环境。"}),"\n",(0,l.jsxs)(n.h2,{id:"下载和安装",children:["下载和安装",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#下载和安装",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["Google 官方提供了适用于不同操作系统（Windows、macOS、Linux等）、不同 CPU 类型（x86、x86-64、ARM64等）的软件开发工具包（也称为SDK）。此外，还提供了源码，以便开发者自行编译 SDK。请点击：",(0,l.jsx)(n.a,{href:"https://golang.google.cn/dl/",target:"_blank",rel:"noopener noreferrer",children:"下载地址"}),"，获取最新版本的 SDK。"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"\uD83D\uDCA1 提示：访问 Go 语言官网（https://golang.google.cn/），点击“Download”按钮后，会自动下载最适合当前电脑运行的 SDK。如果下载和安装配置在同一台电脑上进行，这样做会更节省时间。"})}),"\n",(0,l.jsx)(n.p,{children:"本小册以 1.17.x 版本的 Go SDK 为例进行讲解，建议各位也采用这个版本。为了进一步方便大家，点击以下链接可直接下载对应操作系统的SDK："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Microsoft Windows（64位安装包）：",(0,l.jsx)(n.a,{href:"https://golang.google.cn/dl/go1.17.1.windows-amd64.msi",target:"_blank",rel:"noopener noreferrer",children:"https://golang.google.cn/dl/go1.17.1.windows-amd64.msi"})]}),"\n",(0,l.jsxs)(n.li,{children:["Microsoft Windows（32位安装包）：",(0,l.jsx)(n.a,{href:"https://golang.google.cn/dl/go1.17.1.windows-386.msi",target:"_blank",rel:"noopener noreferrer",children:"https://golang.google.cn/dl/go1.17.1.windows-386.msi"})]}),"\n",(0,l.jsxs)(n.li,{children:["Linux：",(0,l.jsx)(n.a,{href:"https://golang.google.cn/dl/go1.17.1.linux-amd64.tar.gz",target:"_blank",rel:"noopener noreferrer",children:"https://golang.google.cn/dl/go1.17.1.linux-amd64.tar.gz"})]}),"\n",(0,l.jsxs)(n.li,{children:["macOS（Intel）：",(0,l.jsx)(n.a,{href:"https://golang.google.cn/dl/go1.17.1.darwin-amd64.pkg",target:"_blank",rel:"noopener noreferrer",children:"https://golang.google.cn/dl/go1.17.1.darwin-amd64.pkg"})]}),"\n",(0,l.jsxs)(n.li,{children:["macOS（Apple Silicon）：",(0,l.jsx)(n.a,{href:"https://golang.google.cn/dl/go1.17.1.darwin-arm64.tar.gz",target:"_blank",rel:"noopener noreferrer",children:"https://golang.google.cn/dl/go1.17.1.darwin-arm64.tar.gz"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"下载完成后进行安装。 对于 Windows 和 macOS，安装 Go SDK 和安装其它软件大同小异，只需根据安装向导逐步进行，直到出现安装成功字样即可，具体不再赘述。"}),"\n",(0,l.jsx)(n.p,{children:"对于 Linux，tar.gz 格式是压缩包（go1.17.1.linux-amd64.tar.gz），需要手动解压并将其放在合适的目录中。以 Ubuntu 为例，打开命令行窗口，使用 cd 命令导航至 SDK 压缩包所在目录（如~/Downloads）。"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"\uD83D\uDCA1 提示：在 Ubuntu 中打开命令行窗口的快捷键是 Ctrl+Alt+T。此外，也可使用文件浏览器（nautilus）导航至 SDK 压缩包所在目录，然后在窗口空白处单击鼠标右键，在弹出的菜单中选择“在此处打开命令行程序”也可启动命令行窗口，启动时将自动导航到 SDK 压缩包所在目录。"})}),"\n",(0,l.jsx)(n.p,{children:"接着，使用 cp 命令将压缩包拷贝至/usr/local/lib中，输入命令如下："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"sudo cp ./go1.17.1.linux-amd64.tar.gz /usr/local/lib/\n"})}),"\n",(0,l.jsx)(n.p,{children:"拷贝至 /usr/local/lib 中的文件权限不受当前登录用户限制，可通过配置系统环境变量提供给其他用户账户使用。若希望仅为当前用户配置，则可拷贝至 /home 中的某个目录中。有关环境变量的更多说明和配置将在后文中讲解。"}),"\n",(0,l.jsx)(n.p,{children:"稍等片刻，拷贝即可完成。接着，使用 cd 命令导航到 /usr/local/lib 目录中，将压缩包解压，解压命令为："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"sudo tar xzvf go1.17.1.linux-amd64.tar.gz\n"})}),"\n",(0,l.jsx)(n.p,{children:"这里注意，由于使用了 sudo 前缀，这一步可能要输入 root 账户密码才能继续，请确保知晓正确的 root 账户密码。"}),"\n",(0,l.jsx)(n.p,{children:"在命令行输出若干解压日志后，解压完成。此时，/usr/local/lib  中的内容将类似下图所示："}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,l.jsx)(n.p,{children:"go 目录即为解压后生成的目录，它是 Go SDK。到此，go1.17.1.linux-amd64.tar.gz 文件不再有用，可以使用 rm 命令将其删除。"}),"\n",(0,l.jsxs)(n.h2,{id:"配置环境变量",children:["配置环境变量",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置环境变量",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"环境变量的定义如下："}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数，如：临时文件夹位置和系统文件夹位置等。环境变量是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"通俗地讲，如果不设置环境变量，例如 Windows 中名为 PATH 的环境变量值，在命令行执行某个命令，则需要先导航到这个命令文件所在的目录才行。但是，将命令文件所在完整路径追加到 PATH 值后，则无论身处哪个目录，都可以随时执行这个命令。此外，不同的应用程序可能会查找特定名称的环境变量，如即将配置的 GOPATH。"}),"\n",(0,l.jsx)(n.p,{children:"无论我们使用 Windows、macOS 还是 Linux，系统都提供了两组环境变量，即系统环境变量和用户环境变量。系统环境变量影响所有系统中的用户，用户环境变量则只影响系统中的当前用户。"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"\uD83D\uDCA1 提示：对于大部分人而言，操作系统中可能仅有一个用户账户。此时系统环境变量和用户环境变量的作用域基本相同。当系统中存在多个用户账户时，请大家根据自身需求选择环境变量的配置位置。"})}),"\n",(0,l.jsx)(n.p,{children:"对于 Windows，请使用图形化的系统属性窗口进行添加；对于 Linux，请参考macOS的配置说明进行添加。接下来，以 macOS 为例，配置用户环境变量。"}),"\n",(0,l.jsx)(n.p,{children:"启动命令行，输入："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"sudo vi ~/.bash_profile\n"})}),"\n",(0,l.jsx)(n.p,{children:"同样，这里由于使用了 sudo 前缀，这一步可能要输入 root 账户密码才能继续，请确保知晓正确的 root 账户密码。"}),"\n",(0,l.jsxs)(n.h3,{id:"gopath",children:["GOPATH",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gopath",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"GOPATH 用于指定我们的开发工作区，是存放源代码、测试文件、库静态文件、可执行文件的目录。自 Go 1.1 版本开始要求配置这个变量，对于 Linux 和 macOS，GOPATH 的默认值是 $home/go。而在 Windows 中 GOPATH 的默认值则为 %USERPROFILE%\\go。通过配置 GOPATH，可以修改这个路径，但不能和 Go 安装目录相同。 添加 GOPATH 的方法是在 ~/.bash_profile 文件的最后添加如下一行："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"export GOPATH=$HOME/golang\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"\uD83D\uDCA1 提示：golang 目录名并非强制要求，可根据自身喜好自定义目录名。"})}),"\n",(0,l.jsxs)(n.h3,{id:"goroot",children:["GOROOT",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#goroot",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"GOROOT 表示 Go 语言的安装目录。当系统中存在多个版本的 Go SDK 时，通过设置这个环境变量，可方便我们在不同的 Go SDK 版本之间切换。 添加 GOROOT 的方法是在 ~/.bash_profile 文件的最后添加如下一行："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"export GOROOT=$HOME/go1_17\n"})}),"\n",(0,l.jsx)(n.p,{children:"修改 GOROOT 后，还要追加名为 PATH 环境变量的值，GOROOT/bin 包含 Go SDK 提供的工具链。继续在 ~/.bash_profile 中添加如下一行："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"export PATH=$PATH:$GOROOT/bin\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"❗️ 注意：go1_17 目录名请大家根据自己电脑中 Go SDK 安装情况进行修改，不要照抄。"})}),"\n",(0,l.jsxs)(n.h3,{id:"gobin",children:["GOBIN",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gobin",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"GOBIN 表示程序编译后二进制命令的安装目录，一般设置为 GOPATH/bin。方法为在 ~/.bash_profile 中添加如下一行："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"export GOBIN=$GOPATH/bin\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"使配置生效",children:["使配置生效",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使配置生效",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"保存 ~/.bash_profile 并退出，重启电脑后上述环境变量生效。 最后，再次启动命令行，输入"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"go env\n"})}),"\n",(0,l.jsx)(n.p,{children:"命令，查看 Go SDK 环境变量状态，找到 GOPATH、GOROOT 和 GOBIN，复查其是否已经变为我们设置的值。 我的环境变量设置情况如下图所示："}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,l.jsxs)(n.h2,{id:"第一个go程序",children:["第一个Go程序",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第一个go程序",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"习惯上，我们将完成开发环境配置后的第一个程序称为 “Hello World”。这个程序的效果是向控制台输出 “Hello World” 文本，用于验证环境配置准确无误。"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"❗️ 注意：本小册虽然以 macOS 为例，但示例代码都经过跨平台运行测试。但我在讲解文字中会使用 macOS 中的某些专有名词，如“终端”，在 Linux 中也称为“终端”，但在 Windows 中称为“命令提示符”。"})}),"\n",(0,l.jsx)(n.p,{children:"使用 vi 或启动任何一个纯文本编辑器，输入如下内容："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-go",children:'package main\r\nimport "fmt"\r\nfunc main(){\r\n \xa0  fmt.Println("Hello World!")\r\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"将其保存为 hello.go。 接下来，启动终端，导航至 hello.go 所在目录，然后执行以下命令，编译 hello.go 程序："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"go build hello.go\n"})}),"\n",(0,l.jsx)(n.p,{children:"稍等片刻，程序编译完成。编译完成后将生成名为 hello 的可执行文件。在终端执行这个文件，可以看到 “Hello World!” 字样的文本输出，如下图所示："}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,l.jsx)(n.p,{children:"到此，Go 语言开发环境配置完成，且准确无误。我们今后便可使用 Go 语言开发程序了！"}),"\n",(0,l.jsxs)(n.h2,{id:"小结",children:["小结",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"\uD83C\uDF89 恭喜，您完成了本次课程的学习！"}),"\n",(0,l.jsx)(n.p,{children:"\uD83D\uDCCC 以下是本次课程的重点内容总结，需要牢牢把握："}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"掌握 Go SDK 的下载和安装；"}),"\n",(0,l.jsx)(n.li,{children:"了解 GOPATH 环境变量的意义，并会配置它；"}),"\n",(0,l.jsx)(n.li,{children:"体验 Go 程序的开发、编译和运行过程。"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"➡️ 在下次课程中，我们会阐述如下内容："}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"剖析 Hello World 示例，解构 Go 程序（ Go 源码的结构）；"}),"\n",(0,l.jsx)(n.li,{children:"如何在 Go 程序代码中添加注释（添加注释的 2 种方式）；"}),"\n",(0,l.jsx)(n.li,{children:"使用 Go SDK 提供的命令行工具（6 个 Go SDK 命令）。"}),"\n"]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}let h=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E9%9B%B6%E5%9F%BA%E7%A1%80%E9%80%9A%E5%85%B3Go%E8%AF%AD%E8%A8%80%2F%E7%AC%AC02%E7%AB%A0%E2%80%94%E6%90%AD%E5%BB%BAGo%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.md"]={toc:[{text:"下载和安装",id:"下载和安装",depth:2},{text:"配置环境变量",id:"配置环境变量",depth:2},{text:"GOPATH",id:"gopath",depth:3},{text:"GOROOT",id:"goroot",depth:3},{text:"GOBIN",id:"gobin",depth:3},{text:"使配置生效",id:"使配置生效",depth:3},{text:"第一个Go程序",id:"第一个go程序",depth:2},{text:"小结",id:"小结",depth:2}],title:"第02章—搭建Go语言的开发环境",headingTitle:"第02章—搭建Go语言的开发环境",frontmatter:{}}}}]);