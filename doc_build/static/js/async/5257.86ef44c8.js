"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["5257"],{877069:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var d=r(552676),o=r(740453);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",code:"code",pre:"pre",img:"img",strong:"strong",ol:"ol",li:"li",br:"br"},(0,o.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"4基于-tornado-的-http-服务器简介及代码组织框架",children:["4基于 Tornado 的 HTTP 服务器简介及代码组织框架",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4基于-tornado-的-http-服务器简介及代码组织框架",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"Tornado 是一个 Python Web 框架和异步网络库，最初是在 FriendFeed 开发的。通过使用非阻塞网络I/O，Tornado 可以扩展到数以万计的开放连接，但却在创建和编写时足够的轻量级。"}),"\n",(0,d.jsxs)(n.h2,{id:"tornado-的特点",children:["Tornado 的特点",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tornado-的特点",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"Tornado 和现在的很多主流 Web 服务器框架（包括大多数 Python 框架）有着明显的区别：它是非阻塞式异步服务器。大多数社交网络应用都会展示实时更新来提醒新消息、状态变化以及用户通知，客户端需要保持一个打开的连接来等待服务器端的任何响应。这些长连接或推送请求使得非异步服务器线程池迅速饱和。一旦线程池的资源耗尽，服务器将不能再响应新的请求。异步服务器在这一场景中的应用则不同，当负载增加时，诸如 Tornodo 这样的服务器，会把当前请求正在等待来自其他资源的数据，加以控制并挂起请求，以满足新的请求。这也是 Tornado 在高并发、高效率的 Web 服务器应用很广的原因之一。"}),"\n",(0,d.jsxs)(n.h2,{id:"tornado-入门",children:["Tornado 入门",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tornado-入门",children:"#"})]}),"\n",(0,d.jsxs)(n.h3,{id:"编写-hello-world",children:["编写 Hello, world",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编写-hello-world",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["上面我们已介绍了 Tornado 的强大，现在我们从一个简单的 ",(0,d.jsx)(n.code,{children:"Hello World"})," 开始。在服务器上任意目录下（如 /data ），创建 ",(0,d.jsx)(n.code,{children:"hello.py"})," 文件，输入如下代码："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'import tornado.ioloop\r\nimport tornado.web\r\n\r\nclass MainHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        self.write("Hello, world")\r\n\r\napplication = tornado.web.Application([\r\n    (r"/", MainHandler),\r\n])\r\n\r\nif __name__ == "__main__":\r\n    application.listen(8888)\r\n    tornado.ioloop.IOLoop.current().start()\n'})}),"\n",(0,d.jsxs)(n.p,{children:["编写一个 Tornado 应用中最多的工作是定义类继承 Tornado 的 ",(0,d.jsx)(n.code,{children:"RequestHandler"})," 类。在这个例子中，我们创建了一个简单的应用，Tornado 监听给定的端口 ",(0,d.jsx)(n.code,{children:"8888"}),'，并在根目录（"/"）响应请求，响应的处理方法为继承了 ',(0,d.jsx)(n.code,{children:"RequestHandler"})," 的 ",(0,d.jsx)(n.code,{children:"MainHandler"})," 类。在 ",(0,d.jsx)(n.code,{children:"MainHandler"})," 中返回 ",(0,d.jsx)(n.code,{children:"Hello, world"}),"。"]}),"\n",(0,d.jsxs)(n.h3,{id:"测试代码",children:["测试代码",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#测试代码",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/4/26/1630200d319e8bfc?w=405&h=87&f=png&s=3125",alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["在浏览器上打开 ",(0,d.jsx)(n.code,{children:"http://150.109.33.132:8888"}),"，测试结果如下："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/4/21/162e5904ade344e0?w=502&h=113&f=png&s=5260",alt:""})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"注："})," 服务器上需要放开 8888 端口，如果是公有云云主机，注意安全组配置是否已放开。"]}),"\n",(0,d.jsxs)(n.p,{children:["至此，我们已完成基于 Tornado 服务器的 ",(0,d.jsx)(n.code,{children:"Hello, world"}),"。下面来简单介绍一下 Tornado 的整体框架。"]}),"\n",(0,d.jsxs)(n.h2,{id:"tornado-框架",children:["Tornado 框架",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tornado-框架",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"Tornado 大体上可以被分为 4 个主要的部分:"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["Web 框架 (包括创建 Web 应用的 ",(0,d.jsx)(n.code,{children:"RequestHandler"})," 类，还有很多其他支持的类)；"]}),"\n",(0,d.jsx)(n.li,{children:"HTTP的客户端和服务端实现 (HTTPServer and AsyncHTTPClient)；"}),"\n",(0,d.jsx)(n.li,{children:"异步网络库 (IOLoop and IOStream),\r\n为HTTP组件提供构建模块，也可以用来实现其他协议；"}),"\n",(0,d.jsx)(n.li,{children:"协程库 (tornado.gen) 允许异步代码写得更直接而不用链式回调的方式。"}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["这里只做简单的了解，如需深入了解 Tornado，建议读者通读学习  ",(0,d.jsx)(n.a,{href:"http://tornado-zh.readthedocs.io/zh/latest/guide.html",target:"_blank",rel:"noopener noreferrer",children:"Tornado 官方文档"}),"。"]}),"\n",(0,d.jsxs)(n.h2,{id:"代码组织框架",children:["代码组织框架",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码组织框架",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在认识了 Tornado 之后，我们将正式进入本小册核心的学习。首先 Tornado 的学习必定是从 ",(0,d.jsx)(n.code,{children:"Hello, world"})," 开始，并逐步按照个人编程习惯和组织习惯完善整个框架。"]}),"\n",(0,d.jsx)(n.p,{children:"代码的组织框架因人而异，作为入门小册，这里提供一种简化的组织框架思路并贯穿整个小册，读者在熟练应用后，可采用自身的风格。"}),"\n",(0,d.jsx)(n.p,{children:"在某个目录下，创建本次的工程文件，如 demo，并依次创建如下文件："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e4c9c2acd225?w=376&h=242&f=png&s=9428",alt:""})}),"\n",(0,d.jsxs)(n.h2,{id:"目录及文件说明",children:["目录及文件说明",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#目录及文件说明",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["common：存放公共类和方法",(0,d.jsx)(n.br,{}),"\n","conf: 存放配置文件",(0,d.jsx)(n.br,{}),"\n","log：存放相关日志",(0,d.jsx)(n.br,{}),"\n","static：存放静态文件，如样式（CSS）、脚本（js）、图片等",(0,d.jsx)(n.br,{}),"\n","templates：公用模板目录，主要存放 HTML 文件",(0,d.jsx)(n.br,{}),"\n","views：视图函数，业务逻辑代码目录",(0,d.jsx)(n.br,{}),"\n","main.py：Tornado 主程序入口",(0,d.jsx)(n.br,{}),"\n","models.py：数据库表结构定义"]}),"\n",(0,d.jsxs)(n.h2,{id:"小结",children:["小结",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"本小节简单介绍了 Tornado HTTP 服务器及本小册中使用的代码组织框架，从下一小节开始，正式进入代码编写讲解。"})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}let l=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Python%20%E8%BD%BB%E6%9D%BE%E8%87%AA%E5%BB%BA%20App%20%E6%9C%8D%E5%8A%A1%E5%99%A8%2F4%E5%9F%BA%E4%BA%8E%20Tornado%20%E7%9A%84%20HTTP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87%E6%A1%86%E6%9E%B6.md"]={toc:[{text:"Tornado 的特点",id:"tornado-的特点",depth:2},{text:"Tornado 入门",id:"tornado-入门",depth:2},{text:"编写 Hello, world",id:"编写-hello-world",depth:3},{text:"测试代码",id:"测试代码",depth:3},{text:"Tornado 框架",id:"tornado-框架",depth:2},{text:"代码组织框架",id:"代码组织框架",depth:2},{text:"目录及文件说明",id:"目录及文件说明",depth:2},{text:"小结",id:"小结",depth:2}],title:"4基于 Tornado 的 HTTP 服务器简介及代码组织框架",headingTitle:"4基于 Tornado 的 HTTP 服务器简介及代码组织框架",frontmatter:{}}}}]);