"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["95145"],{265955:function(e,r,n){n.r(r),n.d(r,{default:()=>O});var s=n(552676),i=n(740453);let a=n.p+"static/image/c3f5f76f2ac52357d8e5ed06f12cb9c4.8cd8a5d1.webp",c=n.p+"static/image/cdd8b0bbc1481f4fb0cf8227122c69c3.06248ff0.webp",t=n.p+"static/image/109ce11ad6679ea0b39dcd34101a0b56.ec2f6b54.webp",d=n.p+"static/image/4f6de3ac6326a7ff110dff2bb57f7e97.02850b03.webp",l=n.p+"static/image/1fe531c2de0d3df44d643894885f948a.b2f0cbd7.gif",o=n.p+"static/image/6e4eff84c919c7964ec770c16715c349.b2f0cbd7.gif",h=n.p+"static/image/ad3c4b356213c7b40da18b02fc07e497.ed70b300.gif",p=n.p+"static/image/62ee0c0f95ab6eae7d614dc95e2cc88c.2037a229.webp",m=n.p+"static/image/18402ba9688758bd28c635cf224fb47d.216df096.webp",x=n.p+"static/image/5acb0042aaf60a9cd51670dfc0326266.19fec404.webp",j=n.p+"static/image/9c81b853508a7d9d9f18f477168cbab4.b457376e.webp",f=n.p+"static/image/7d93361652d625a31b5ad5cde2338c22.0956fbbc.webp",u=n.p+"static/image/9bdb83aedb5d82ab7e65ba724d77176e.e76f383c.webp",g=n.p+"static/image/6ab7beb290f2979c05604cd25d2f1185.c77027e9.webp",w=n.p+"static/image/b87d32e7ac4ff2f953724111ec7859eb.94f672c4.webp",b=n.p+"static/image/f646ead666c7002ceb4ef57091ed878d.a74490ec.webp",N=n.p+"static/image/2d6f72bf3edac81dd2dad85545989c66.87e83338.webp",P=n.p+"static/image/c39011d4dcba000afc2c602f3195b703.4cc0dcfc.webp",_=n.p+"static/image/6323f82665e36a805b711f7c3ff120cb.b80f13fc.webp",k=n.p+"static/image/ebca5babe2977f5a112386f4eb5f2027.5fef698e.webp",y=n.p+"static/image/ee79372b8bb6616cba551bd0b1a758ab.4d7d99e4.webp",S=n.p+"static/image/eb178646917ab015317bad29623fd2b5.dc5cd22e.webp",v=n.p+"static/image/44c4685dba96aebfe288b7da61dc6e54.1583aa47.webp",A=n.p+"static/image/d1226f3b054d6cd17db0d7e2e4b73c03.45fcac77.webp",M=n.p+"static/image/3a1df48eb00af28926f09971e80dd4d5.0d144585.webp",I=n.p+"static/image/d449c6e49c186a797f50ebdea5db9ade.5d3fd39f.webp",R=n.p+"static/image/ec4656091bca18afea5c887d54a6caf4.bb8b35bf.webp",q=n.p+"static/image/a867f6e4746f5e77fb7c58c39bf61b52.df2d8738.webp";function U(e){let r=Object.assign({h2:"h2",a:"a",h3:"h3",p:"p",strong:"strong",pre:"pre",code:"code",img:"img",blockquote:"blockquote",ol:"ol",li:"li",h4:"h4",ul:"ul",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h2,{id:"前言",children:["前言",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1-orm",children:["1. ORM",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1-orm",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["我们先从 ORM（Object Relational Mapping） 开始说起，中文译为“",(0,s.jsx)(r.strong,{children:"对象关系映射"}),"”。简单的来说，就是用操作对象的方式操作数据库。"]}),"\n",(0,s.jsx)(r.p,{children:"比如我们用 SQL 查询数据："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"SELECT * FROM users WHERE name = 'yayu';\n"})}),"\n",(0,s.jsx)(r.p,{children:"如果使用 ORM 库（ORM 是一种技术，有很多实现 ORM 的库，Prisma 是其中一个），查询语句可以改为："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"var orm = require('orm-library');\nvar user = orm(\"users\").where({ name: 'yayu' });\n"})}),"\n",(0,s.jsxs)(r.p,{children:["这里我们虚构了一个 ",(0,s.jsx)(r.code,{children:"orm-library"}),"库，语言用的是 JavaScript。所以 ORM 的好处就在于你可以用自己喜欢的语言来操作数据库，只要有对应的 ORM 库支持。"]}),"\n",(0,s.jsx)(r.p,{children:"除此之外，ORM 对数据库进行了抽象，你可以以很低的成本更换数据库比如从 PostgreSQL 切换为 MySQL。通常 ORM 库还会支持一些高级的功能，方便开发者使用。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:q,alt:"image.png"})}),"\n",(0,s.jsxs)(r.h3,{id:"2-技术选型",children:["2. 技术选型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#2-技术选型",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["在 Node.js 下，常用的 ORM 库有 ",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm",target:"_blank",rel:"noopener noreferrer",children:"Prisma"}),"、",(0,s.jsx)(r.a,{href:"https://sequelize.org/docs/v6/",target:"_blank",rel:"noopener noreferrer",children:"Sequelize"}),"、",(0,s.jsx)(r.a,{href:"https://typeorm.io/",target:"_blank",rel:"noopener noreferrer",children:"TypeORM"}),"、",(0,s.jsx)(r.a,{href:"https://orm.drizzle.team/",target:"_blank",rel:"noopener noreferrer",children:"Drizzle"}),"。",(0,s.jsx)(r.a,{href:"https://mongoosejs.com/",target:"_blank",rel:"noopener noreferrer",children:"Mongoose"})," 也是一种 ORM，但它是基于 Node.js 和 MongoDB 的 ORM 库，而像前面提到的这些 ORM 库都是支持多种数据库的。"]}),"\n",(0,s.jsxs)(r.p,{children:["让我们看看它们的 ",(0,s.jsx)(r.a,{href:"https://npmtrends.com/drizzle-orm-vs-mongoose-vs-prisma-vs-sequelize-vs-typeorm",target:"_blank",rel:"noopener noreferrer",children:"npm trends"}),"："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:R,alt:"image.png"})}),"\n",(0,s.jsx)(r.p,{children:"其中 Sequelize 是老牌的 ORM 库，但是对 TypeScript 支持不佳，后来有了 TypeORM，对 TypeScript 支持更好，但是 TypeORM 更新维护比较慢，后被对 TypeScript 支持更佳、开发体验更好的 Prisma 超越。"}),"\n",(0,s.jsx)(r.p,{children:"Mongoose 也是老牌的 ORM 库，专注于 MongoDB 数据库。Drizzle 是这一两年才发布的小鲜肉，正在茁壮成长，目前版本还在 0.x.x。"}),"\n",(0,s.jsx)(r.p,{children:"此外，多数 ORM 库只支持关系型数据库。所以如果你用 MongoDB 这种非关系型数据库，那在这里面能选的也就只有 Prisma 和 Mongoose 了。"}),"\n",(0,s.jsxs)(r.p,{children:["有一个",(0,s.jsx)(r.a,{href:"https://stateofdb.com/orms",target:"_blank",rel:"noopener noreferrer",children:"关于 ORM 库的调查"}),"："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:I,alt:"image.png"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:M,alt:"image.png"})}),"\n",(0,s.jsx)(r.p,{children:"此项调查包含了多个语言的 ORM，比如 Django 是 Python 的，Eloquent 是 PHP 的。所以在 Node.js 中，目前使用度和满意度最高的就是 Prisma、Drizzle、Mongoose 了。"}),"\n",(0,s.jsx)(r.p,{children:"在实际的项目开发中，理论上应该选择使用度更高、版本相对稳定的库。简而言之，初学者推荐用 Prisma。如果你用 MongoDB，可以选择 Mongoose。"}),"\n",(0,s.jsx)(r.p,{children:"数据库我们继续选择 MySQL，常用的数据库也就是 Postgres、MongoDB、MySQL、Redis 了："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:A,alt:"image.png"})}),"\n",(0,s.jsxs)(r.h2,{id:"mysql",children:["MySQL",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#mysql",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["MySQL 的安装我们已经在上篇",(0,s.jsx)(r.a,{href:"https://juejin.cn/book/7307859898316881957/section/7321635703136206874#heading-4",target:"_blank",rel:"noopener noreferrer",children:"《实战篇 | React Notes | Strapi》"}),"中讲过，就不重复赘述了。"]}),"\n",(0,s.jsx)(r.p,{children:"MySQL GUI 工具可以使用 Navicat，方便查看和操作数据："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,s.jsx)(r.p,{children:"当然就本篇的内容而言，不使用 GUI 工具也没有任何关系。"}),"\n",(0,s.jsxs)(r.h2,{id:"prisma-介绍",children:["Prisma 介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#prisma-介绍",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"现在让我们正式的介绍下 Prisma 吧。按照官方的介绍，它是下一代的 Node.js 和 TypeScript ORM："}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"Next-generation Node.js and TypeScript ORM"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:S,alt:"image.png"})}),"\n",(0,s.jsx)(r.p,{children:"它的优势在于："}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"Prisma unlocks a new level of developer experience when working with databases thanks to its intuitive data model, automated migrations, type-safety & auto-completion."}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"简单的来说，就是开发体验更好：直观的数据模型、自动化迁移、类型安全、自动补全。"}),"\n",(0,s.jsxs)(r.p,{children:["比如你可以在 ",(0,s.jsx)(r.code,{children:"schema.prisma"}),"这个文件（Prisma 自定义的一种文件格式）中定义数据模型，就像这样："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:y,alt:"image.png"})}),"\n",(0,s.jsxs)(r.p,{children:["其中",(0,s.jsx)(r.code,{children:"model Post"})," 映射了数据库中的 Post 表，id、title、content、published 映射了表中的字段，字段后面的 Int、String 等表示字段类型，再后面的 @id、@default，这些是属性，我们稍后再讲。"]}),"\n",(0,s.jsx)(r.p,{children:"当你需要操作数据库时，Prisma 提供了 Prisma Client："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:k,alt:"image.png"})}),"\n",(0,s.jsxs)(r.p,{children:["Prisma 同时提供了 Prisma Migrate，这是 Prisma 的迁移系统。比如当你在 ",(0,s.jsx)(r.code,{children:"schema.prisma"}),"更改了数据模型，命令行运行 ",(0,s.jsx)(r.code,{children:"npx prisma migrate dev"}),"，prisma 就会根据你定义的数据模型，修改数据库。"]}),"\n",(0,s.jsxs)(r.p,{children:["Prisma 还提供了 Prisma Studio，这是 Prisma 提供的查看和编辑数据库数据的 GUI 工具。不同于 Navicat 这样的软件，Prisma Studio 的开启方式是在命令行运行 ",(0,s.jsx)(r.code,{children:"npx prisma studio"}),"，它会打开一个网页，展示数据库中的数据："]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)("img",{src:_,alt:"image.png"}),"\nPrisma 目前支持的语言和数据库有："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:P,alt:"image.png"})}),"\n",(0,s.jsxs)(r.p,{children:["好了，Prisma 的大致介绍就这些。",(0,s.jsx)(r.strong,{children:"Prisma Client"}),"、",(0,s.jsx)(r.strong,{children:"Prisma Migrate"}),"、",(0,s.jsx)(r.strong,{children:"Prisma Studio"})," 就是 Prisma 的主要组成部分了。接下来让我们在实战中具体体会吧！"]}),"\n",(0,s.jsxs)(r.h2,{id:"prisma-使用",children:["Prisma 使用",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#prisma-使用",children:"#"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1-创建文件",children:["1. 创建文件",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1-创建文件",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["项目根目录安装 ",(0,s.jsx)(r.code,{children:"prisma"}),"作为开发依赖："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"npm install prisma --save-dev\n"})}),"\n",(0,s.jsx)(r.p,{children:"安装后运行："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"npx prisma init\n"})}),"\n",(0,s.jsx)(r.p,{children:"这一步会："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["创建一个 ",(0,s.jsx)(r.code,{children:"prisma"}),"文件夹，其中包含一个 ",(0,s.jsx)(r.code,{children:"schema.prisma"}),"文件，这就是定义数据模型的地方"]}),"\n",(0,s.jsxs)(r.li,{children:["创建一个",(0,s.jsx)(r.code,{children:".env"}),"文件，用于定义环境变量（如数据库地址）"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"2-连接-mysql-数据库",children:["2. 连接 MySQL 数据库",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#2-连接-mysql-数据库",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["修改 ",(0,s.jsx)(r.code,{children:"prisma/schema.prisma"}),"："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["修改 ",(0,s.jsx)(r.code,{children:".env"})," 中的 ",(0,s.jsx)(r.code,{children:"DATABASE_URL"}),"，此 URL 规则如下："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:N,alt:"image.png"})}),"\n",(0,s.jsx)(r.p,{children:"按照此规则，我们的地址应该修改为："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'DATABASE_URL="mysql://root:admin@localhost:3306/notes"\n'})}),"\n",(0,s.jsxs)(r.p,{children:["其中 ",(0,s.jsx)(r.code,{children:"notes"})," 为我们的数据库名称。目前这个数据库我们在 MySQL 中还没有建立，所以我们来建一个。"]}),"\n",(0,s.jsxs)(r.p,{children:["一种方法是使用 MySQL GUI 工具，右键直接建立一个名为 ",(0,s.jsx)(r.code,{children:"notes"})," 的数据库。"]}),"\n",(0,s.jsx)(r.p,{children:"一种方法是使用命令行："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"# 46.实战篇 _ React Notes _ Prisma\nmysql -u root -p\n# 创建数据库\nCREATE DATABASE notes;\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:b,alt:"1.png"})}),"\n",(0,s.jsxs)(r.p,{children:["执行 ",(0,s.jsx)(r.code,{children:"npx prisma db pull"}),"，如果出现以下提示即表示连接成功："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:w,alt:"image.png"})}),"\n",(0,s.jsx)(r.p,{children:"注：虽然是报错信息，显示数据库为空，但说明至少连接上了数据库。如果数据库不存在，就是另外一个报错了："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,s.jsxs)(r.h3,{id:"3-定义数据模型",children:["3. 定义数据模型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#3-定义数据模型",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"现在我们来定义数据模型，数据模型需要与数据库保持一致。我们有两种方式使其保持一致："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["手动修改数据模型，然后运行 ",(0,s.jsx)(r.code,{children:"npx prisma migrate dev"}),"修改数据库，使其保持一致"]}),"\n",(0,s.jsxs)(r.li,{children:["手动修改数据库，然后运行 ",(0,s.jsx)(r.code,{children:"npx prisma db pull"}),"修改数据模型，使其保持一致"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["现在我们修改下 ",(0,s.jsx)(r.code,{children:"prisma/schema.prisma"}),"："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\nmodel User {\n  id       String @id @default(uuid())\n  username String\n  password String\n  notes    Note[]\n}\n\nmodel Note {\n  id        String   @id @default(cuid())\n  title     String   @db.VarChar(255)\n  content   String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  String\n}\n\n'})}),"\n",(0,s.jsxs)(r.p,{children:["运行 ",(0,s.jsx)(r.code,{children:"npx prisma migrate dev"}),"，然后给这次 migrate 起一个名字（这个名字无所谓，一个标识而已）："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,s.jsx)(r.p,{children:"再次查看数据库，User 表、Note 表和其中的字段都已建立："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,s.jsxs)(r.p,{children:["这个 Prisma schema 同步数据库的过程，就被称之为 ",(0,s.jsx)(r.strong,{children:"migration"}),"。每次迁移，都会生成一个迁移文件，存放在 ",(0,s.jsx)(r.code,{children:"prisma/migrations"}),"下。"]}),"\n",(0,s.jsxs)(r.p,{children:["现在我们直接修改数据库，比如在 Note 表添加一个 ",(0,s.jsx)(r.code,{children:"content"})," 字段："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,s.jsxs)(r.p,{children:["然后运行 ",(0,s.jsx)(r.code,{children:"npx prisma db pull"}),"，Prisma 会自动在 ",(0,s.jsx)(r.code,{children:"prisma/schema.prisma"})," 中同步该字段："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"model Note {\n	// ...\n  content   String?  @db.VarChar(255)\n	// ...\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["这个从数据库推导出 Prisma schema 的过程就叫做 ",(0,s.jsx)(r.strong,{children:"Introspection"}),"，中文译为“内省”，指通过检查数据库的结构和元数据来了解数据库本身的特性和信息。"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"Introspection is the process of getting the metadata of the database, such as object names, types of columns, and source code"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["不过注意使用 ",(0,s.jsx)(r.code,{children:"npx prisma db pull"}),"的时候，还要再搭配使用 ",(0,s.jsx)(r.code,{children:"prisma generate"}),"更新 Prisma Client 后，你才能正确的通过 Prisma Client 操作数据库："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsxs)(r.h3,{id:"4-语法高亮与自动格式化",children:["4. 语法高亮与自动格式化",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#4-语法高亮与自动格式化",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"多说一句：schema.prisma 因为是 Prisma 自定义的文件格式，所以文件默认无语法高亮，使用 VSCode 的同学可以下载 Prisma 这个插件以支持该文件语法高亮："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,s.jsxs)(r.p,{children:["安装该插件后，还可以打开 ",(0,s.jsx)(r.code,{children:"settings.json"}),"，添加 prisma 文件的自动格式化："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:p,alt:"截屏2024-01-18 下午8.08.04.png"})}),"\n",(0,s.jsx)(r.p,{children:"效果如下："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:h,alt:"ReactNotes-prisma2.gif"})}),"\n",(0,s.jsxs)(r.p,{children:["当然如果你不设置，也可以在根目录运行 ",(0,s.jsx)(r.code,{children:"npx prisma format"}),"格式化该文件。"]}),"\n",(0,s.jsxs)(r.h3,{id:"5-prisma-client",children:["5. Prisma Client",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#5-prisma-client",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["安装 ",(0,s.jsx)(r.code,{children:"@prisma/client"}),"："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"npm install @prisma/client\n"})}),"\n",(0,s.jsx)(r.p,{children:"现在让我们回到我们的项目需求上，因为目前并没有做权限控制，所以创建的笔记谁都可以查看、创建或编辑。如果我们希望用户登录后才能查看、新增、编辑自己的笔记呢？效果图如下："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:o,alt:"ReactNotes-prisma3.gif"})}),"\n",(0,s.jsx)(r.p,{children:"让我们开始实现吧！"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"schema.prisma"}),"的代码为："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\nmodel User {\n  id       String @id @default(uuid())\n  username String\n  password String\n  notes    Note[]\n}\n\nmodel Note {\n  id        String   @id @default(cuid())\n  title     String   @db.VarChar(255)\n  content   String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  String\n}\n\n'})}),"\n",(0,s.jsxs)(r.p,{children:["注意：如果修改了 schema，运行 ",(0,s.jsx)(r.code,{children:"npx prisma migrate dev"}),"，将修改同步数据库，migrate 会自动更新 Prisma Client，所以无须再运行 ",(0,s.jsx)(r.code,{children:"prisma generate"}),"。"]}),"\n",(0,s.jsxs)(r.p,{children:["因为要实现鉴权，所以要结合 ",(0,s.jsx)(r.code,{children:"next-auth"}),"，修改 ",(0,s.jsx)(r.code,{children:"auth.js"}),"："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'import NextAuth from "next-auth"\nimport GitHub from "next-auth/providers/github"\nimport CredentialsProvider from "next-auth/providers/credentials";\nimport { addUser, getUser } from "@/lib/prisma";\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers:[CredentialsProvider({\n    // 显示按钮文案 (e.g. "Sign in with...")\n    name: "密码登录",\n    // `credentials` 用于渲染登录页面表单\n    credentials: {\n      username: { label: "账号", type: "text", placeholder: "输入您的账号" },\n      password: { label: "密码", type: "password", placeholder: "输入您的密码" }\n    },\n    // 处理从用户收到的认证信息\n    async authorize(credentials, req) {\n      // 默认情况下不对用户输入进行验证，确保使用 Zod 这样的库进行验证\n      let user = null\n\n      // 登陆信息验证\n      user = await getUser(credentials.username, credentials.password)\n\n      // 密码错误\n      if (user === 1) return null\n\n      // 用户注册\n      if (user === 0) {\n        user = await addUser(credentials.username, credentials.password)\n      }\n\n      if (!user) {\n        throw new Error("User was not found and could not be created.")\n      }\n\n      return user\n    }\n  }), GitHub],\n  pages: {\n    signIn: \'/auth/signin\'\n  },\n  callbacks: {\n    authorized({ request, auth }) {\n      const { pathname } = request.nextUrl\n      if (pathname.startsWith("/note/edit")) return !!auth\n      return true\n    },\n    async jwt({ token, user, account }) {\n      if (account && account.type === "credentials" && user) {\n        token.userId = user.userId;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      session.user.userId = token.userId;\n      return session;\n    }\n  }\n})\n'})}),"\n",(0,s.jsxs)(r.p,{children:["新建 ",(0,s.jsx)(r.code,{children:"middleware.js"}),"，代码如下："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'export { auth as middleware } from "auth"\n\nexport const config = {\n  matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["使用 ",(0,s.jsx)(r.code,{children:"middleware.js"})," 是为了实现新建和编辑时跳转到登录页面。"]}),"\n",(0,s.jsxs)(r.p,{children:["新建 ",(0,s.jsx)(r.code,{children:"lib/prisma.js"}),"，代码如下："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"import { PrismaClient } from '@prisma/client'\nimport { auth } from \"auth\"\n\nconst globalForPrisma = global;\n\nexport const prisma = globalForPrisma.prisma || new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\nexport async function getAllNotes() {\n  const session = await auth()\n  if (session == null) return [];\n  // 查找登录用户的笔记\n  const notes = await prisma.note.findMany({\n    where: {\n      authorId: session?.user?.userId\n    }\n  })\n  // 构造返回数据\n  const res = {};\n  notes.forEach(({title, content, id, updatedAt}) => {\n    res[id] = JSON.stringify({\n      title,\n      content,\n      updateTime: updatedAt\n    })\n  })\n  return res\n}\n\nexport async function addNote(data) {\n  const session = await auth()\n  const result = await prisma.note.create({\n    data: {\n      title: JSON.parse(data).title,\n      content: JSON.parse(data).content,\n      author: { connect: { id: session?.user?.userId } },\n    }\n  })\n\n  return result.id\n}\n\nexport async function updateNote(uuid, data) {\n  const parsedData = JSON.parse(data);\n  await prisma.note.update({\n    where: {\n      id: uuid\n    },\n    data: {\n      title: parsedData.title,\n      content: parsedData.content\n    }\n  })\n}\n\nexport async function getNote(uuid) {\n  const session = await auth()\n  if (session == null) return;\n  const {title, content, updateTime, id} = await prisma.note.findFirst({\n    where: {\n      id: uuid\n    }\n  })\n\n  return {\n    title,\n    content,\n    updateTime,\n    id\n  }\n}\n\nexport async function delNote(uuid) {\n  await prisma.note.delete({\n    where: {\n      id: uuid\n    }\n  })\n}\n\nexport async function addUser(username, password) {\n  const user = await prisma.user.create({\n    data: {\n      username,\n      password,\n      notes: {\n        create: []\n      }\n    }\n  })\n\n  return {\n    name: username,\n    username,\n    userId: user.id\n  }\n}\n\nexport async function getUser(username, password) {\n  const user = await prisma.user.findFirst({\n    where: {\n      username\n    },\n    include: {\n      notes: true\n    }\n  })\n  if (!user) return 0;\n  if (user.password !== password) return 1\n  return {\n    name: username,\n    username,\n    userId: user.id\n  } \n}\n\nexport default prisma\n"})}),"\n",(0,s.jsxs)(r.p,{children:["在这段代码中，我们使用了 ",(0,s.jsx)(r.code,{children:"const prisma = globalForPrisma.prisma || new PrismaClient()"}),"这种方式，这是为了避免开发环境下建立多个 Prisma Client 实例导致问题，详细参考",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/nextjs-prisma-client-dev-practices",target:"_blank",rel:"noopener noreferrer",children:"此篇说明"}),"。"]}),"\n",(0,s.jsxs)(r.p,{children:["在这段代码中，我们演示了如何增删改查数据库。注意我们获取 Note 表的时候，要使用小写的 ",(0,s.jsx)(r.code,{children:"prisma.note"})," 获取。Prisma Client 具体 API 的用法可以参考 ",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference",target:"_blank",rel:"noopener noreferrer",children:"Prisma Client API reference"}),"，当然下节我会带大家过一遍 API。"]}),"\n",(0,s.jsxs)(r.p,{children:["然后我们将上篇的 ",(0,s.jsx)(r.code,{children:"@/lib/strapi"}),"或者之前的 ",(0,s.jsx)(r.code,{children:"@/lib/redis"})," 统一替换为 ",(0,s.jsx)(r.code,{children:"@/lib/prisma"}),"。此时效果已经实现："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:l,alt:"ReactNotes-prisma3.gif"})}),"\n",(0,s.jsxs)(r.h3,{id:"6-prisma-studio",children:["6. Prisma Studio",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#6-prisma-studio",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["在根目录运行 ",(0,s.jsx)(r.code,{children:"npx prisma studio"}),"，它会打开一个网页："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsx)(r.p,{children:"你可以在这个页面查看和编辑数据库中的数据。"}),"\n",(0,s.jsxs)(r.h2,{id:"prisma-深入了解",children:["Prisma 深入了解",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#prisma-深入了解",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Prisma 的基本使用就这些内容，Prisma 的官方文档写得很好，再深入的部分其实看文档即可，所以我们这里讲讲作为初学者，接下来要学习的一些内容。"}),"\n",(0,s.jsxs)(r.h3,{id:"1-prisma-schema",children:["1. Prisma schema",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1-prisma-schema",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"首先是数据模型的书写，举个例子："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"model Post {\n  id  Int @id @default(autoincrement())\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"模型的每个字段，包含："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-fields",target:"_blank",rel:"noopener noreferrer",children:"字段名称"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-fields",target:"_blank",rel:"noopener noreferrer",children:"字段类型"})}),"\n",(0,s.jsxs)(r.li,{children:["（可选）",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/prisma-schema/data-model/models#type-modifiers",target:"_blank",rel:"noopener noreferrer",children:"类型修饰符"}),"（type modifiers）"]}),"\n",(0,s.jsxs)(r.li,{children:["（可选）",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-attributes",target:"_blank",rel:"noopener noreferrer",children:"属性"}),"（attributes）"]}),"\n"]}),"\n",(0,s.jsxs)(r.h4,{id:"11-字段类型",children:["1.1. 字段类型",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#11-字段类型",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["其中，字段类型有 ",(0,s.jsx)(r.code,{children:"String"}),"、",(0,s.jsx)(r.code,{children:"Boolean"}),"、",(0,s.jsx)(r.code,{children:"Int"}),"、",(0,s.jsx)(r.code,{children:"BigInt"}),"、",(0,s.jsx)(r.code,{children:"Float"}),"、",(0,s.jsx)(r.code,{children:"Decimal"}),"（存储精确小数值）、",(0,s.jsx)(r.code,{children:"DateTime"}),"、",(0,s.jsx)(r.code,{children:"Json"}),"、",(0,s.jsx)(r.code,{children:"Bytes"}),"（存储文件）、",(0,s.jsx)(r.code,{children:"Unsupported"}),"。字段类型还可以是数据库底层数据类型，通过 ",(0,s.jsx)(r.code,{children:"@db."})," 描述，比如 ",(0,s.jsx)(r.code,{children:"@db.VarChar(255)"}),", varchar 正是 MySQL 支持的底层数据类型。"]}),"\n",(0,s.jsxs)(r.h4,{id:"12-类型修饰符",children:["1.2. 类型修饰符",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#12-类型修饰符",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"类型修饰符有两个："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"[]"})," 表示字段是数组"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"?"})," 表示字段可选"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"model User {\n  name String?\n  favoriteColors String[]\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"目前 Prisma 不支持可选数组，也就是这两个类型修饰符不能同时用。如果你有需要，那就创建数据的时候创建一个空数组。"}),"\n",(0,s.jsxs)(r.h4,{id:"13-属性",children:["1.3. 属性",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#13-属性",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["再后面的 ",(0,s.jsx)(r.code,{children:"@id @default(autoincrement())"})," 这些就都是属性了。属性的作用是修改字段或块（model）的行为，影响字段的属性用 ",(0,s.jsx)(r.code,{children:"@"})," 作为前缀，影响块的属性用 ",(0,s.jsx)(r.code,{children:"@@"}),"作为前缀，举个例子："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'model User {\n  id        Int    @id @default(autoincrement())\n  firstName String @map("first_name")\n  @@map("users")\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["在这个例子中，",(0,s.jsx)(r.code,{children:"map"}),"的作用是映射："]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:'@map("first_name")'})," 表示",(0,s.jsx)(r.code,{children:"firstName"})," 字段映射数据库中的 ",(0,s.jsx)(r.code,{children:"first_name"})," 字段"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:'@@map("users")'}),"表示 ",(0,s.jsx)(r.code,{children:"User"})," 映射数据库的中的 ",(0,s.jsx)(r.code,{children:"users"})," 表"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"具体影响字段的属性有："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id",target:"_blank",rel:"noopener noreferrer",children:"@id"}),"（设置主键 ",(0,s.jsx)(r.code,{children:"PRIMARY KEY"}),"）"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default",target:"_blank",rel:"noopener noreferrer",children:"@default"}),"（设置字段默认值）"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unique",target:"_blank",rel:"noopener noreferrer",children:"@unique"}),"（唯一约束，表示该字段值唯一，设置后可以用 ",(0,s.jsx)(r.code,{children:"findUnique"})," 来查找）"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relation",target:"_blank",rel:"noopener noreferrer",children:"@relation"}),"（设置外键 ",(0,s.jsx)(r.code,{children:"FOREIGN KEY"}),"/ ",(0,s.jsx)(r.code,{children:"REFERENCES"}),"，用于建立表与表之间的关联，很重要的概念，下节会具体讲）"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map",target:"_blank",rel:"noopener noreferrer",children:"@map"}),"（映射数据库中的字段）"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#updatedat",target:"_blank",rel:"noopener noreferrer",children:"@updatedAt"}),"（自动存储记录更新的时间）"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#ignore",target:"_blank",rel:"noopener noreferrer",children:"@ignore"}),"（该字段会被忽略，不会生成到 Prisma Client 中）"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"影响块的属性有："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id-1",target:"_blank",rel:"noopener noreferrer",children:"@@id"}),"：相当于关系型数据库中复合主键"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"model User {\n  firstName String\n  lastName  String\n  email     String  @unique\n  isAdmin   Boolean @default(false)\n\n  @@id([firstName, lastName])\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"firstName 和 lastName 共同组成主键，允许 firstName 或 lastName 单独重复，但不能一起重复。"}),"\n",(0,s.jsx)(r.p,{children:"当创建的时候，字段需要都创建："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const user = await prisma.user.create({\n  data: {\n    firstName: 'Alice',\n    lastName: 'Smith',\n  },\n})\n"})}),"\n",(0,s.jsx)(r.p,{children:"查询的时候，使用生成的复合 id （firstName_lastName）进行查询："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const user = await prisma.user.findUnique({\n  where: {\n    firstName_lastName: {\n      firstName: 'Alice',\n      lastName: 'Smith',\n    },\n  },\n})\n"})}),"\n",(0,s.jsxs)(r.ol,{start:"2",children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unique-1",target:"_blank",rel:"noopener noreferrer",children:"@@unique"}),"：复合唯一约束"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"定义："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"model User {\n  id        Int     @default(autoincrement())\n  firstName String\n  lastName  String\n  isAdmin   Boolean @default(false)\n\n  @@unique([firstName, lastName])\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"查询："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const user = await prisma.user.findUnique({\n  where: {\n    firstName_lastName: {\n      firstName: 'Alice',\n      lastName: 'Smith'\n    },\n  },\n})\n"})}),"\n",(0,s.jsxs)(r.ol,{start:"3",children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#index",target:"_blank",rel:"noopener noreferrer",children:"@@index"}),"：创建数据库索引"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"可以创建多列索引："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"model Post {\n  id      Int     @id @default(autoincrement())\n  title   String\n  content String?\n\n  @@index([title, content])\n}\n"})}),"\n",(0,s.jsxs)(r.ol,{start:"4",children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-1",target:"_blank",rel:"noopener noreferrer",children:"@@map"}),"：映射数据库表名"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#ignore-1",target:"_blank",rel:"noopener noreferrer",children:"@@ignore"}),"：忽略此模型"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#schema",target:"_blank",rel:"noopener noreferrer",children:"@@schema"}),"：在支持 multiSchema 的时候使用，比如搭配 supabase，为 model 添加授权相关的字段",(0,s.jsx)(r.code,{children:'@@schema("auth")'})]}),"\n"]}),"\n",(0,s.jsxs)(r.h4,{id:"14-属性函数",children:["1.4. 属性函数",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#14-属性函数",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"让我们再看下这个例子："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"model User {\n  id        Int    @id @default(autoincrement())\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"@default"})," 中的 ",(0,s.jsx)(r.code,{children:"autoincrement()"})," 被称为属性函数。属性函数有："]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#auto",target:"_blank",rel:"noopener noreferrer",children:"auto()"}),"：由数据库自动生成，只用于 Mongodb 数据库（因为 Mongodb 的 _id 是自动生成的）："]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'model User {\n  id   String  @id @default(auto()) @map("_id") @db.ObjectId\n}\n'})}),"\n",(0,s.jsxs)(r.ol,{start:"2",children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#autoincrement",target:"_blank",rel:"noopener noreferrer",children:"autoincrement()"}),"：自动增长，只用于关系型数据库："]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"model User {\n  id   Int    @id @default(autoincrement())\n  name String\n}\n"})}),"\n",(0,s.jsxs)(r.ol,{start:"3",children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cuid",target:"_blank",rel:"noopener noreferrer",children:"cuid()"}),"：基于 ",(0,s.jsx)(r.a,{href:"https://github.com/paralleldrive/cuid",target:"_blank",rel:"noopener noreferrer",children:"cuid "}),"规范生成唯一标识符，适用于浏览器环境中（示例：tz4a98xxat96iws9zmbrgj3a）"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#uuid",target:"_blank",rel:"noopener noreferrer",children:"uuid()"}),"：基于 ",(0,s.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",target:"_blank",rel:"noopener noreferrer",children:"uuid"})," 规范生成唯一标识符（示例：9c5b94b1-35ad-49bb-b118-8e8fc24abf80）"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#now",target:"_blank",rel:"noopener noreferrer",children:"now()"}),"：创建记录的时间戳"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#dbgenerated",target:"_blank",rel:"noopener noreferrer",children:"dbgenerated()"}),"：无法在 Prisma schema 中表示的默认值（如 random()）"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["除此之外，还有一个 ",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-schema-reference#enum",target:"_blank",rel:"noopener noreferrer",children:"enum"})," 类型，很好理解，使用示例如下："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"enum Role {\n  USER\n  ADMIN\n}\n\nmodel User {\n  id   Int  @id @default(autoincrement())\n  role Role @default(USER)\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"2-relations",children:["2. Relations",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#2-relations",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"关系（relation）是指 Prisma schema 中的两个 model 建立连接。建立连接的方式是通过主键（PRIMARY KEY，简写 PK）和外键（FOREIGN KEY，简写 FK）。"}),"\n",(0,s.jsxs)(r.p,{children:["所谓主键，指的是数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的键，换句话说，主键是关系表中记录的唯一标识，也就是我们添加 ",(0,s.jsx)(r.code,{children:"@id"}),"属性的字段。"]}),"\n",(0,s.jsxs)(r.p,{children:["所谓外键，指的是指向其他表的主键的键，用于建立两张表的关联性。Prisma 用 ",(0,s.jsx)(r.code,{children:"@relation"}),"属性来建立关系。"]}),"\n",(0,s.jsxs)(r.h4,{id:"21-建立关联",children:["2.1. 建立关联",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#21-建立关联",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"以我们的项目为例，一张 User 表、一张 Note 表。因为一个作者可以写多篇笔记，所以 User 和 Note 的关系为一对多："}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)("img",{src:t,alt:"image.png"}),"\n如果我们要建立两个表之间的关系，写法如下："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"model User {\n  id       String @id @default(uuid())\n  notes    Note[]\n}\n\nmodel Note {\n  id        String   @id @default(cuid())\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  String\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Note 的 author 字段指向 User，其中 ",(0,s.jsx)(r.code,{children:"@relation(fields: [authorId], references: [id])"}),"表示 Note 的 authorId 字段与 User 的 id 字段建立关系，",(0,s.jsx)(r.strong,{children:"也就是这两个字段的值应该是一致的"}),"。"]}),"\n",(0,s.jsx)(r.p,{children:"像我们的项目的 schema 为："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"model User {\n  id       String @id @default(uuid())\n  username String\n  password String\n  notes    Note[]\n}\n\nmodel Note {\n  id        String   @id @default(cuid())\n  title     String   @db.VarChar(255)\n  content   String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  String\n}\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"22-创建记录",children:["2.2. 创建记录",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#22-创建记录",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["当你通过 ",(0,s.jsx)(r.code,{children:"@relation"})," 建立了 User 表和 Note 表的关联后，你可以更便捷的进行一些操作，比如创建嵌套的记录："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"  const user = await prisma.user.create({\n    data: {\n      username,\n      password,\n      notes: {\n        create: [\n          {title: '1', content: '1'},\n          {title: '2', content: '2'}\n        ]\n      }\n    }\n  })\n"})}),"\n",(0,s.jsx)(r.p,{children:"此时 Note 表中也会有两条记录，并且两条记录的 authorId 会自动设置为刚创建的 user 记录的 id。"}),"\n",(0,s.jsxs)(r.h4,{id:"23-查询记录",children:["2.3. 查询记录",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#23-查询记录",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"当你查询 User 表的信息，可以返回 Note 表中的信息。当你通过以下代码查询时："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const user = await prisma.user.findFirst({\n  where: {\n    username: '1'\n  },\n  include: {\n    notes: true\n  }\n})\nconsole.log(user)\n"})}),"\n",(0,s.jsx)(r.p,{children:"打印的信息为："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsxs)(r.h4,{id:"24-connect",children:["2.4. connect",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#24-connect",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["不过使用关系的时候，要注意及时关联。比如当你创建了一条 note 时，要关联到对应的 user 中，为此你需要使用 ",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#connect",target:"_blank",rel:"noopener noreferrer",children:"connect"})," 嵌套查询语法："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"  const result = await prisma.note.create({\n    data: {\n      title: '1',\n      content: '2',\n      author: { \n        connect: { \n          id: '1895c437'\n      	} \n      },\n    }\n  })\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Prisma 会自动设置该 note 的 authorId 为 ",(0,s.jsx)(r.code,{children:"'1895c437'"}),"，并且关联到 id 为 ",(0,s.jsx)(r.code,{children:"'1895c437'"})," 的 user 上，这样当你通过 prisma.user 查询的时候，也会出现该 note 信息。"]}),"\n",(0,s.jsx)(r.p,{children:"也可以从 prisma.user 更新关联："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const updateAuthor = await prisma.user.update({\n  where: {\n    id: '1895c437',\n  },\n  data: {\n    notes: {\n      connect: {\n        id: 'clrkpshqd0004aa0occr5a2qq',\n      },\n    },\n  },\n})\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Prisma 会查询 id 为 ",(0,s.jsx)(r.code,{children:"'1895c437'"})," 的用户，然后将 id 为 ",(0,s.jsx)(r.code,{children:"clrkpshqd0004aa0occr5a2qq"})," 的 note 的 authorId 改为 ",(0,s.jsx)(r.code,{children:"'1895c437'"}),"，并建立两者的关联。"]}),"\n",(0,s.jsxs)(r.p,{children:["除了像这样一对多的关系，还有",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/one-to-one-relations",target:"_blank",rel:"noopener noreferrer",children:"一对一"}),"，",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations",target:"_blank",rel:"noopener noreferrer",children:"多对多"}),"的关系，详细请查阅文档。"]}),"\n",(0,s.jsxs)(r.h3,{id:"3-prisma-client",children:["3. Prisma Client",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#3-prisma-client",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["学习 Prisma Client，也就是学习具体如何操作数据库。完整的 API 参考 ",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference",target:"_blank",rel:"noopener noreferrer",children:"Prisma Client API reference"}),"。"]}),"\n",(0,s.jsxs)(r.h4,{id:"31-查询函数",children:["3.1. 查询函数",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#31-查询函数",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"查询函数有："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["增：",(0,s.jsx)(r.code,{children:"create()"}),"、",(0,s.jsx)(r.code,{children:"createMany()"})]}),"\n",(0,s.jsxs)(r.li,{children:["删：",(0,s.jsx)(r.code,{children:"delete()"}),"、",(0,s.jsx)(r.code,{children:"deleteMany()"})]}),"\n",(0,s.jsxs)(r.li,{children:["改：",(0,s.jsx)(r.code,{children:"update()"}),"、",(0,s.jsx)(r.code,{children:"upsert()"}),"（找不到就创建）、",(0,s.jsx)(r.code,{children:"updateMany()"})]}),"\n",(0,s.jsxs)(r.li,{children:["查：",(0,s.jsx)(r.code,{children:"findUnique()"}),"(需要有 @unique 属性)、",(0,s.jsx)(r.code,{children:"findUniqueOrThrow()"}),"（找不到就报错）、",(0,s.jsx)(r.code,{children:"findFirst()"}),"（找第一个）、",(0,s.jsx)(r.code,{children:"findFirstOrThrow()"}),"（找不到就报错）、",(0,s.jsx)(r.code,{children:"findMany()"})]}),"\n",(0,s.jsxs)(r.li,{children:["其他：",(0,s.jsx)(r.code,{children:"count()"}),"、",(0,s.jsx)(r.code,{children:"aggregate()"}),"（聚合）、",(0,s.jsx)(r.code,{children:"groupBy()"})]}),"\n"]}),"\n",(0,s.jsxs)(r.h4,{id:"32-查询参数",children:["3.2. 查询参数",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#32-查询参数",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["其查询参数除了 ",(0,s.jsx)(r.code,{children:"where"})," 用于条件查找之外，还有："]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"include"})," 用于定义返回的结果中包含的关系"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"select"})," 用于选择返回的字段"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"orderBy"})," 用于排序"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"distinct"})," 用于去重"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const usersWithPosts = await prisma.user.findMany({\n  orderBy: {\n    email: 'asc',\n  },\n  include: {\n    posts: {\n      select: {\n        title: true,\n      },\n      orderBy: {\n        title: 'asc',\n      },\n    },\n  },\n})\n"})}),"\n",(0,s.jsx)(r.p,{children:"在这个例子中："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"返回所有的 User 记录，记录按 email 升序排列"}),"\n",(0,s.jsx)(r.li,{children:"对于每条记录，返回嵌套的 posts 信息，按 title 升序排列后，只返回 title 字段"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"简单的来说，就是返回所有用户的基本信息和文章标题数据。一个示例结果如下："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-json",children:'[\n  {\n    "id": 2,\n    "email": "alice@prisma.io",\n    "name": "Alice",\n    "posts": [\n      {\n        "title": "Watch the talks from Prisma Day 2019"\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "email": "ariadne@prisma.io",\n    "name": "Ariadne",\n    "posts": [\n      {\n        "title": "How to connect to a SQLite database"\n      },\n      {\n        "title": "My first day at Prisma"\n      }\n    ]\n  },\n  {\n    "id": 1,\n    "email": "bob@prisma.io",\n    "name": "Bob",\n    "posts": [\n      {\n        "title": "Follow Prisma on Twitter"\n      },\n      {\n        "title": "Subscribe to GraphQL Weekly for community news "\n      }\n    ]\n  }\n]\n'})}),"\n",(0,s.jsxs)(r.h4,{id:"33-嵌套查询",children:["3.3. 嵌套查询",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#33-嵌套查询",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["在嵌套查询里，有：",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-1",target:"_blank",rel:"noopener noreferrer",children:"create"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmany-1",target:"_blank",rel:"noopener noreferrer",children:"createMany"}),"、",(0,s.jsx)(r.a,{href:"/set",children:"set"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#connect",target:"_blank",rel:"noopener noreferrer",children:"connect"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#connectorcreate",target:"_blank",rel:"noopener noreferrer",children:"connectOrCreate"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#disconnect",target:"_blank",rel:"noopener noreferrer",children:"disconnect"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-1",target:"_blank",rel:"noopener noreferrer",children:"update"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#upsert-1",target:"_blank",rel:"noopener noreferrer",children:"upsert"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete-1",target:"_blank",rel:"noopener noreferrer",children:"delete"}),"、",(0,s.jsx)(r.a,{href:"/updateMany",children:"updateMany"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#deletemany-1",target:"_blank",rel:"noopener noreferrer",children:"deleteMany"}),"，也就是如何处理关系表中的数据，示例代码如下："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"  const user = await prisma.user.create({\n    data: {\n      username,\n      password,\n      notes: {\n        create: [\n          {title: '1', content: '1'},\n          {title: '2', content: '2'}\n        ]\n      }\n    }\n  })\n"})}),"\n",(0,s.jsx)(r.p,{children:"在这段代码中，创建一条 user 记录的同时，也创建了两条 note 记录并进行了关联。其他方法的作用也是类似。"}),"\n",(0,s.jsxs)(r.h4,{id:"34-筛选条件",children:["3.4. 筛选条件",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#34-筛选条件",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["筛选条件支持 ",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#equals",target:"_blank",rel:"noopener noreferrer",children:"equals"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#not",target:"_blank",rel:"noopener noreferrer",children:"not"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#in",target:"_blank",rel:"noopener noreferrer",children:"in"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#notin",target:"_blank",rel:"noopener noreferrer",children:"notIn"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#lt",target:"_blank",rel:"noopener noreferrer",children:"lt"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#lte",target:"_blank",rel:"noopener noreferrer",children:"lte"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#gt",target:"_blank",rel:"noopener noreferrer",children:"gt"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#gte",target:"_blank",rel:"noopener noreferrer",children:"gte"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#contains",target:"_blank",rel:"noopener noreferrer",children:"contains"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#search",target:"_blank",rel:"noopener noreferrer",children:"search"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#mode",target:"_blank",rel:"noopener noreferrer",children:"mode"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#startswith",target:"_blank",rel:"noopener noreferrer",children:"startsWith"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#endswith",target:"_blank",rel:"noopener noreferrer",children:"endsWith"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#and",target:"_blank",rel:"noopener noreferrer",children:"AND"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#or",target:"_blank",rel:"noopener noreferrer",children:"OR"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#not-1",target:"_blank",rel:"noopener noreferrer",children:"NOT"}),"。举个简单的例子："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const result = await prisma.user.findMany({\n  where: {\n    name: {\n      equals: 'Eleanor',\n    },\n  },\n})\n"})}),"\n",(0,s.jsxs)(r.p,{children:["这段代码的含义是查询 ",(0,s.jsx)(r.code,{children:"name"})," 等于 ",(0,s.jsx)(r.code,{children:"'Eleanor'"})," 的记录。"]}),"\n",(0,s.jsx)(r.p,{children:"举个复杂一点的例子："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const result = await prisma.post.findMany({\n  where: {\n    OR: [\n      {\n        title: {\n          contains: 'Prisma',\n        },\n      },\n      {\n        title: {\n          contains: 'databases',\n        },\n      },\n    ],\n    AND: {\n      published: false,\n    },\n  },\n})\n"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"OR"})," 实现“或”语句，",(0,s.jsx)(r.code,{children:"AND"})," 实现 “并”语句，这段代码的意思是找出 ",(0,s.jsx)(r.code,{children:"title"})," 包含 ",(0,s.jsx)(r.code,{children:"Prisma"})," 或者 ",(0,s.jsx)(r.code,{children:"database"})," 并且 ",(0,s.jsx)(r.code,{children:"published"})," 为 ",(0,s.jsx)(r.code,{children:"false"})," 的记录。"]}),"\n",(0,s.jsxs)(r.h4,{id:"35-relation-filters",children:["3.5. Relation filters",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#35-relation-filters",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["最后还有 Relation filters，有 ",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#some",target:"_blank",rel:"noopener noreferrer",children:"some"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#every",target:"_blank",rel:"noopener noreferrer",children:"every"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#none",target:"_blank",rel:"noopener noreferrer",children:"none"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#is",target:"_blank",rel:"noopener noreferrer",children:"is"}),"、",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#isnot",target:"_blank",rel:"noopener noreferrer",children:"isNot"}),"，举个例子："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const result = await prisma.user.findMany({\n  where: {\n    post: {\n      some: {\n        content: {\n          contains: "Prisma"\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(r.p,{children:"这段代码的含义是获取文章中包含 Prisma 文字的 user 记录。"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const result = await prisma.post.findMany({\n  where: {\n    user: {\n        is: {\n          name: "yayu"\n        },\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(r.p,{children:'这段代码的含义是获取用户名为 "yayu" 的 post 记录。'}),"\n",(0,s.jsxs)(r.h3,{id:"4-prisma-cli",children:["4. Prisma Cli",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#4-prisma-cli",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"最后再学习下 Prsima 的命令，运行："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"npx prisma --help\n"})}),"\n",(0,s.jsx)(r.p,{children:"可以查看到有哪些命令："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsx)(r.p,{children:"其中："}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:(0,s.jsx)(r.code,{children:"npx prisma init"})}),"\n",(0,s.jsx)(r.th,{children:"初始化 Prisma"}),"\n",(0,s.jsx)(r.th,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#init",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma generate"})}),"\n",(0,s.jsx)(r.td,{children:"生成 Prisma Client"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#generate",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma studio"})}),"\n",(0,s.jsx)(r.td,{children:"开启 Prisma Studio"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#studio",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma validate"})}),"\n",(0,s.jsx)(r.td,{children:"检验 Prisma schema 文件"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#validate",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma format"})}),"\n",(0,s.jsx)(r.td,{children:"格式化 Prisma Scheam 文件"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#format",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma version"})}),"\n",(0,s.jsx)(r.td,{children:"展示 Prisma 版本信息"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#version--v",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma debug"})}),"\n",(0,s.jsx)(r.td,{children:"展示 Prisma debug 信息"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#debug",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["稍微有点复杂的是 ",(0,s.jsx)(r.code,{children:"db"})," 和 ",(0,s.jsx)(r.code,{children:"migrate"})," 命令："]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:(0,s.jsx)(r.code,{children:"npx prisma db pull"})}),"\n",(0,s.jsx)(r.th,{children:"连接数据库，同步到数据模型"}),"\n",(0,s.jsx)(r.th,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#db-pull",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma db push"})}),"\n",(0,s.jsx)(r.td,{children:"数据模型同步到数据库"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#db-push",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma db seed"})}),"\n",(0,s.jsx)(r.td,{children:"给数据库填充点数据"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#db-seed",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma db execute"})}),"\n",(0,s.jsx)(r.td,{children:"与数据库交互，执行 SQL 语句"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#db-execute",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.table,{children:["\n",(0,s.jsxs)(r.thead,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.th,{children:(0,s.jsx)(r.code,{children:"npx prisma migrate dev"})}),"\n",(0,s.jsx)(r.th,{children:"仅在开发环境下使用，迁移数据库"}),"\n",(0,s.jsx)(r.th,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-dev",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.tbody,{children:["\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma migrate reset"})}),"\n",(0,s.jsx)(r.td,{children:"仅在开发环境下使用，重置数据库"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-reset",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma migrate deploy"})}),"\n",(0,s.jsx)(r.td,{children:"常用于正式环境，将迁移文件更新到生产环境后，执行该命令，会应用所有尚未迁移过的文件"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-deploy",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma migrate resolve"})}),"\n",(0,s.jsxs)(r.td,{children:["当 migrate 失败时用于回滚，详细参考  ",(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/prisma-migrate/workflows/patching-and-hotfixing#failed-migration",target:"_blank",rel:"noopener noreferrer",children:"Failed migration"})]}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-resolve",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma migrate status"})}),"\n",(0,s.jsx)(r.td,{children:"当前的迁移状态，哪些迁移已应用，哪些迁移尚未应用"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-status",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n",(0,s.jsxs)(r.tr,{children:["\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"npx prisma migrate diff"})}),"\n",(0,s.jsx)(r.td,{children:"比较两个数据库 schema source 的差异"}),"\n",(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-diff",target:"_blank",rel:"noopener noreferrer",children:"API 链接"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"总结",children:["总结",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Prisma 最主要的就是这些内容了。本篇主要是为大家介绍 ORM 和 Prisma。Prisma 是非常常见的搭配 Next.js 项目的技术选型，我们后面的实战项目还会继续用到 Prisma，就让我们在不断的实践中加深理解吧！"}),"\n",(0,s.jsxs)(r.p,{children:["本篇的代码我已经上传到",(0,s.jsx)(r.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/main",target:"_blank",rel:"noopener noreferrer",children:"代码仓库"}),"的 ",(0,s.jsx)(r.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/day10",target:"_blank",rel:"noopener noreferrer",children:"Day 10"})," 分支，使用的时候不要忘记在本地开启 MySQL。"]}),"\n",(0,s.jsxs)(r.h2,{id:"参考链接",children:["参考链接",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma",target:"_blank",rel:"noopener noreferrer",children:"What is Prisma? (Overview)"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://blog.bitsrc.io/what-is-an-orm-and-why-you-should-use-it-b2b6f75f5e2a",target:"_blank",rel:"noopener noreferrer",children:"https://blog.bitsrc.io/what-is-an-orm-and-why-you-should-use-it-b2b6f75f5e2a"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-mysql",target:"_blank",rel:"noopener noreferrer",children:"https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-mysql"})}),"\n"]})]})}function E(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(U,{...e})}):U(e)}let O=E;E.__RSPRESS_PAGE_META={},E.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F46.%E5%AE%9E%E6%88%98%E7%AF%87%20_%20React%20Notes%20_%20Prisma.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. ORM",id:"1-orm",depth:3},{text:"2. 技术选型",id:"2-技术选型",depth:3},{text:"MySQL",id:"mysql",depth:2},{text:"Prisma 介绍",id:"prisma-介绍",depth:2},{text:"Prisma 使用",id:"prisma-使用",depth:2},{text:"1. 创建文件",id:"1-创建文件",depth:3},{text:"2. 连接 MySQL 数据库",id:"2-连接-mysql-数据库",depth:3},{text:"3. 定义数据模型",id:"3-定义数据模型",depth:3},{text:"4. 语法高亮与自动格式化",id:"4-语法高亮与自动格式化",depth:3},{text:"5. Prisma Client",id:"5-prisma-client",depth:3},{text:"6. Prisma Studio",id:"6-prisma-studio",depth:3},{text:"Prisma 深入了解",id:"prisma-深入了解",depth:2},{text:"1. Prisma schema",id:"1-prisma-schema",depth:3},{text:"1.1. 字段类型",id:"11-字段类型",depth:4},{text:"1.2. 类型修饰符",id:"12-类型修饰符",depth:4},{text:"1.3. 属性",id:"13-属性",depth:4},{text:"1.4. 属性函数",id:"14-属性函数",depth:4},{text:"2. Relations",id:"2-relations",depth:3},{text:"2.1. 建立关联",id:"21-建立关联",depth:4},{text:"2.2. 创建记录",id:"22-创建记录",depth:4},{text:"2.3. 查询记录",id:"23-查询记录",depth:4},{text:"2.4. connect",id:"24-connect",depth:4},{text:"3. Prisma Client",id:"3-prisma-client",depth:3},{text:"3.1. 查询函数",id:"31-查询函数",depth:4},{text:"3.2. 查询参数",id:"32-查询参数",depth:4},{text:"3.3. 嵌套查询",id:"33-嵌套查询",depth:4},{text:"3.4. 筛选条件",id:"34-筛选条件",depth:4},{text:"3.5. Relation filters",id:"35-relation-filters",depth:4},{text:"4. Prisma Cli",id:"4-prisma-cli",depth:3},{text:"总结",id:"总结",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);