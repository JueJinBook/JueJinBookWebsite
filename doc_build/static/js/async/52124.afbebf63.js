"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["52124"],{695548:function(e,n,r){e.exports=r.p+"static/image/1a26cd5b5f4e0326d7bb4bd2569998df.b563c0e4.gif"},371889:function(e,n,r){e.exports=r.p+"static/image/8656e8715d6d534f6ad43ba76b9d5a9c.e3be700f.gif"},86664:function(e,n,r){e.exports=r.p+"static/image/deaf71bb7ed34ac0e940a5f0d0966ca3.41480f9d.gif"},451817:function(e,n,r){r.r(n),r.d(n,{default:()=>H});var a=r(552676),s=r(740453);let t=r.p+"static/image/e3e1ed6ecc0c1a3c1bf183b2f4e9dbf7.735b510c.gif",c=r.p+"static/image/e06b4a9e2c78756b63873df8d93015b4.e65ad160.webp",o=r.p+"static/image/9fd44efa125a724aec577da7e13cb907.605099d2.gif";var i=r(86664),d=r(695548),l=r(371889);let m=r.p+"static/image/10972340275ef1188daba565e88d4b00.43a09753.gif",p=r.p+"static/image/9ccfa3666b7d6152d93589344d1c6ec4.037b9675.gif",u=r.p+"static/image/ebcb92d9de4a768bd7a945015b56dce3.65503a63.gif",h=r.p+"static/image/85ad5df872ea3a02ad278df9098bd95e.eb2b44e7.webp",f=r.p+"static/image/8157fb7a29009f66b6d0ae67275f64a0.db26ea10.webp",b=r.p+"static/image/2e5cfd0c0cc654174483c2c7427afd07.11ccf009.gif",x=r.p+"static/image/34077845b658c37d43c3095807891582.b776e3ca.webp",j=r.p+"static/image/c3fbdd16aec5fdac1c553ba4c5c42e54.8f0ed145.gif",g=r.p+"static/image/408a18a0a5aa2fccea08089c8b9e1605.7787e3f1.webp",M=r.p+"static/image/726492e6ce27b13d9c62c66285ba64f3.91dce731.gif",y=r.p+"static/image/6cfee3fc13317b5a1c00217ba9afdaf1.8c846082.gif",I=r.p+"static/image/c5b259676c69302058b0b9fdd84d8315.c123d82d.webp",C=r.p+"static/image/9229f68b41dd2e82c14b61bce7ae8860.c97b7eae.webp",v=r.p+"static/image/a4ff70b57c3ab9150a9faf5cad7ba560.b21bc33a.webp",G=r.p+"static/image/af3015cbc73cea482c8eaa8de35be7b9.5cd9b663.gif",w=r.p+"static/image/8ecf14037a4e4d7d9138c6bfdd489000.6ee81198.webp",F=r.p+"static/image/5996162932befa74f97bdcd21130b38e.c4cbf54f.webp",S=r.p+"static/image/c218a0fbd1490eed4374b3519ab0b8be.c8bd12c6.webp",E=r.p+"static/image/bad267884f460ee2cfe1066bc176e60c.bc79568a.webp",A=r.p+"static/image/ffe19c076874c1793a7f17c0588eac99.9244fae3.webp",O=r.p+"static/image/715db8e23398d9357f8e787fe962225c.1d224fdb.gif",k=r.p+"static/image/1218c59870a54b8ee5596ba216620074.4e03b682.webp",N=r.p+"static/image/24b8fa126b0184c74822cc919f85b45d.351c3b3e.webp",T=r.p+"static/image/5fb4eadc032c8ea124e5925ed5082fdb.ac05decb.webp",B=r.p+"static/image/c5d511aca61ab642d5917d39184929c6.9ae07f02.gif",R=r.p+"static/image/2d625bb1583f5967d24df2099b3088ed.a67670d4.webp",_=r.p+"static/image/7e99b30a6c94d07f7d398cf4eb93f845.91d74313.webp",P=r.p+"static/image/4c81a8db4f8acc95a814ac7edcd60d60.4ecbe00f.webp",q=r.p+"static/image/e778d4c10faa4be8069c9a13a6f97f22.bb0e3311.webp",U=r.p+"static/image/e7d57f7eb4307e878019b8e2b4704aef.ae076563.webp",K=r.p+"static/image/9f84beb0c5a24e6a5df392ddc8a33f99.7a1ff6ea.webp",D=r.p+"static/image/e0a7fa12547cf4d1c526f11b6aa7f521.c5c397e5.webp",L=r.p+"static/image/4161a2c3aa65c677dd96e61ab0179e00.27d8fa71.webp";function Q(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"190-聊天室创建群聊进入群聊",children:["190. 聊天室：创建群聊、进入群聊",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#190-聊天室创建群聊进入群聊",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"上节打通了一对一聊天的流程，这节继续打通群聊的流程。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:L,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"其实现在展示的群聊列表有点问题，应该把一对一的聊天室过滤掉，而且把群聊人数显示出来。"}),"\n",(0,a.jsxs)(n.p,{children:["我们改一下：\n",(0,a.jsx)("img",{src:D,alt:""})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:K,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"interface GroupSearchResult {\n    id: number;\n    name: string;\n    type: boolean;\n    userCount: number;\n    userIds: Array<number>;\n    createTime: Date;\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"setGroupResult(res.data.filter((item: GroupSearchResult) => {\n    return item.type === true\n}).map((item: GroupSearchResult) => {\n    return {\n        ...item,\n        key: item.id\n    }\n}));\n"})}),"\n",(0,a.jsx)(n.p,{children:"现在就只剩下群聊了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:U,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后我们优化下日期展示，加上人数展示，加一个详情按钮："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:q,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"{\n    title: '创建时间',\n    dataIndex: 'createTime',\n    render: (_, record) => {\n        return new Date(record.createTime).toLocaleString()\n    }\n},\n{\n    title: '人数',\n    dataIndex: 'userCount'\n},\n{\n    title: '操作',\n    render: (_, record) => (\n        <div>\n            <a href=\"#\">聊天</a>&nbsp;\n            <a href=\"#\">详情</a>\n        </div>\n    )\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:P,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"点击详情按钮的时候，通过弹窗展示群聊的成员。"}),"\n",(0,a.jsx)(n.p,{children:"我们加一个 Modal 组件："}),"\n",(0,a.jsx)(n.p,{children:"src/pages/Group/MembersModal.tsx"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { message, Modal, Table } from \"antd\";\nimport { ColumnsType } from \"antd/es/table\";\nimport { useEffect, useState } from \"react\";\nimport { groupMembers } from \"../../interfaces\";\n\nexport interface MembersModalProps {\n    isOpen: boolean\n    chatroomId: number\n    handleClose: () => void\n}\n\ninterface User {\n    id: number;\n    username: string;\n    nickName: string;\n    headPic: string;\n    email: string;\n}\n\nexport function MembersModal(props: MembersModalProps) {\n\n    const [members, setMembers] = useState<Array<User>>();\n\n    const queryMembers = async () => {\n        try{\n            const res = await groupMembers(props.chatroomId);\n\n            if(res.status === 201 || res.status === 200) {\n                setMembers(res.data.map((item: User) => {\n                    return {\n                        ...item,\n                        key: item.id\n                    }\n                }));\n            }\n        } catch(e: any){\n            message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n        }\n    };\n\n    useEffect(() => {\n        queryMembers();\n    }, [props.chatroomId]);\n\n    const columns: ColumnsType<User> = [\n        {\n            title: 'ID',\n            dataIndex: 'id'\n        },\n        {\n            title: '用户名',\n            dataIndex: 'username'\n        },\n        {\n            title: '昵称',\n            dataIndex: 'nickName'\n        },\n        {\n            title: '头像',\n            dataIndex: 'headPic',\n            render: (_, record) => (\n                <div>\n                    <img src={record.headPic} width={50} height={50}/>\n                </div>\n            )\n        },\n        {\n            title: '邮箱',\n            dataIndex: 'email'\n        }\n    ]\n\n    return <Modal \n        title=\"群聊成员\"\n        open={props.isOpen}\n        onCancel={() => props.handleClose()}\n        onOk={() => props.handleClose()}\n        width={1000}\n    >\n        <Table columns={columns} dataSource={members} pagination={false}/>\n    </Modal>\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"它就是调用 members 接口查询成员数据，用 table 展示。"}),"\n",(0,a.jsx)(n.p,{children:"在 interface 加一下这个接口："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javasript",children:"export async function groupMembers(chatroomId: number) {\n    return axiosInstance.get(`/chatroom/members`, {\n        params: {\n            chatroomId\n        }\n    });\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后在 Group/index.tsx 调用下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:_,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:R,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"就是用一个 state 保存 Modal 打开状态，一个 state 保存当前的 chatroomId"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Badge, Button, Form, Input, Popconfirm, Table, message } from "antd";\nimport { useCallback, useEffect, useMemo, useState } from "react";\nimport \'./index.css\';\nimport { ColumnsType } from "antd/es/table";\nimport { useForm } from "antd/es/form/Form";\nimport { chatroomList } from "../../interfaces";\nimport { MembersModal } from "./MembersModal";\n\ninterface SearchGroup {\n    name: string;\n}\n\ninterface GroupSearchResult {\n    id: number;\n    name: string;\n    type: boolean;\n    userCount: number;\n    userIds: Array<number>;\n    createTime: Date;\n}\n\nexport function Group() {\n    const [groupResult, setGroupResult] = useState<Array<GroupSearchResult>>([]);\n\n    const [isMembersModalOpen, setMembersModalOpen] = useState(false);\n    const [chatroomId, setChatroomId] = useState<number>(-1);\n\n    const columns: ColumnsType<GroupSearchResult> = [\n        {\n            title: \'名称\',\n            dataIndex: \'name\'\n        },\n        {\n            title: \'创建时间\',\n            dataIndex: \'createTime\',\n            render: (_, record) => {\n                return new Date(record.createTime).toLocaleString()\n            }\n        },\n        {\n            title: \'人数\',\n            dataIndex: \'userCount\'\n        },\n        {\n            title: \'操作\',\n            render: (_, record) => (\n                <div>\n                    <a href="#">聊天</a>&nbsp;\n                    <a href="#" onClick={() => {\n                        setChatroomId(record.id);\n                        setMembersModalOpen(true);\n                    }}>详情</a>\n                </div>\n            )\n        }\n    ]\n\n    const searchGroup = async (values: SearchGroup) => {\n        try{\n            const res = await chatroomList(values.name || \'\');\n\n            if(res.status === 201 || res.status === 200) {\n                setGroupResult(res.data.filter((item: GroupSearchResult) => {\n                    return item.type === true\n                }).map((item: GroupSearchResult) => {\n                    return {\n                        ...item,\n                        key: item.id\n                    }\n                }));\n            }\n        } catch(e: any){\n            message.error(e.response?.data?.message || \'系统繁忙，请稍后再试\');\n        }\n    };\n\n    const [form ]  = useForm();\n\n    useEffect(() => {\n        searchGroup({\n            name: form.getFieldValue(\'name\')\n        });\n    }, []);\n\n    return <div id="group-container">\n        <div className="group-form">\n            <Form\n                form={form}\n                onFinish={searchGroup}\n                name="search"\n                layout=\'inline\'\n                colon={false}\n            >\n                <Form.Item label="名称" name="name">\n                    <Input />\n                </Form.Item>\n\n                <Form.Item label=" ">\n                    <Button type="primary" htmlType="submit">\n                        搜索\n                    </Button>\n                </Form.Item>\n            </Form>\n        </div>\n        <div className="group-table">\n            <Table columns={columns} dataSource={groupResult} style={{width: \'1000px\'}}/>\n        </div>\n        <MembersModal isOpen={isMembersModalOpen} handleClose={() => {\n            setMembersModalOpen(false)\n        }} chatroomId={chatroomId}/>\n    </div>\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"试下效果："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:B,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,a.jsx)(n.p,{children:"其实好友列表那里也应该把 id 和 username 展示出来："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:T,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:N,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后群聊点击聊天的时候可以直接知道 chatroomId，跳到聊天页面："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:k,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"<a href=\"\" onClick={() => {\n    navigate('/chat', {\n        state: {\n            chatroomId: record.id\n        }\n    });\n}}>聊天</a>\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:O,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,a.jsx)(n.p,{children:"但现在这个群就一个人，没啥好聊的。"}),"\n",(0,a.jsx)(n.p,{children:"我们加一下添加成员的功能。"}),"\n",(0,a.jsx)(n.p,{children:"同样，我们要加一个弹窗："}),"\n",(0,a.jsx)(n.p,{children:"src/pages/Group/AddMemberModal.tsx"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Button, Form, Input, InputNumber, Modal, message } from "antd";\nimport { useForm } from "antd/es/form/Form";\nimport { addMember } from "../../interfaces";\n\ninterface AddMemberModalProps {\n    chatroomId: number;\n    isOpen: boolean;\n    handleClose: Function\n}\n\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\n\nexport interface AddMember {\n    username: string;\n}\n\nexport function AddMemberModal(props: AddMemberModalProps) {\n\n    const [form] = useForm<AddMember>();\n\n    const handleOk = async function() {\n        await form.validateFields();\n\n        const values = form.getFieldsValue();\n\n        try{\n            const res = await addMember(values.username);\n\n            if(res.status === 201 || res.status === 200) {\n                message.success(\'成员添加成功\');\n                form.resetFields();\n                props.handleClose();\n            }\n        } catch(e: any){\n            message.error(e.response?.data?.message || \'系统繁忙，请稍后再试\');\n        }\n    }\n\n    return <Modal \n        title="添加成员"\n        open={props.isOpen}\n        onOk={handleOk}\n        onCancel={() => props.handleClose()}\n        okText={\'添加\'}\n        cancelText={\'取消\'}    \n    >\n        <Form\n            form={form}\n            colon={false}\n            {...layout}\n        >\n            <Form.Item\n                label="用户名"\n                name="username"\n                rules={[\n                    { required: true, message: \'请输入用户名!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n        </Form>\n    </Modal>\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"这里调用 memberAdd 接口来添加成员。"}),"\n",(0,a.jsx)(n.p,{children:"我们之前的接口有点问题，没有支持根据 username 加人。"}),"\n",(0,a.jsx)(n.p,{children:"改一下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:A,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:E,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"接收 username 参数，根据 username 查询用户，如果用户不存在，返回错误，否则，把用户加入聊天室。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Get('join/:id')\nasync join(@Param('id') id: number, @Query('joinUsername') joinUsername: string) {\n    if(!id) {\n      throw new BadRequestException('id 不能为空')\n    }\n    if(!joinUsername) {\n      throw new BadRequestException('joinUsername 不能为空')\n    }\n    return this.chatroomService.join(id, joinUsername);\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"async join(id: number, username: string) {\n    const chatroom = await this.prismaService.chatroom.findUnique({\n        where: {\n            id\n        }\n    });\n\n    if(chatroom.type === false) {\n        throw new BadRequestException('一对一聊天室不能加人');\n    }\n\n    const user = await this.prismaService.user.findUnique({\n        where: {\n            username\n        }\n    });\n\n    if(!user) {\n        throw new BadRequestException('用户不存在');\n    }\n\n    await this.prismaService.userChatroom.create({\n        data: {\n            userId: user.id,\n            chatroomId: id\n        }\n    })\n\n    return chatroom.id;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后 interfaces 里调用下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export async function addMember(chatroomId: number, joinUsername: string) {\n    return axiosInstance.get(`/chatroom/join/${chatroomId}`, {\n        params: {\n            joinUsername\n        }\n    });\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"改下参数："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:S,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在 Group/index.tsx 调用下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:F,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:w,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"加一个 state 来保存弹窗状态，点击添加成员的时候展示，关闭弹窗的时候重新搜索。"}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:G,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以看到，添加成功后成员数量变了，但点击详情还是一个成员。"}),"\n",(0,a.jsx)(n.p,{children:"这是因为 chatroomId 参数没变， MembersModal 并没有触发重新搜索。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:v,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"我们加一个 queryKey 参数来控制重新查询："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:C,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在 Group/index.tsx 组件里传进来："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:I,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const [queryKey, setQueryKey] = useState<string>('');\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"setQueryKey(Math.random().toString().slice(2, 10))\n"})}),"\n",(0,a.jsx)(n.p,{children:"当添加成员完毕，设置 queryKey 为一个新的随机值，从而触发重新请求："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:y,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"现在群里有三个成员，我们登录另外两个账号聊聊天试试："}),"\n",(0,a.jsx)(n.p,{children:"登录小红的账号："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:M,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"确实，她有了这个群聊。"}),"\n",(0,a.jsx)(n.p,{children:"再登录东东的账号聊天试试："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"没问题，可以三人在房间里聊天。"}),"\n",(0,a.jsx)(n.p,{children:"但现在还有个 bug："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:j,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"点击聊天进入聊天室的时候，并不会查询聊天记录，只有切换聊天室才会。"}),"\n",(0,a.jsx)(n.p,{children:"当解析 state 中的 chatroomId 的时候，再查一下聊天记录就好了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:x,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"useEffect(() => {\n    if(location.state?.chatroomId) {\n        setChatroomId(location.state?.chatroomId);\n\n        queryChatHistoryList(location.state?.chatroomId);\n    }\n}, [location.state?.chatroomId]);\n"})}),"\n",(0,a.jsx)(n.p,{children:"而且也要判断下，chatroomId 不为空才查聊天记录。"}),"\n",(0,a.jsx)(n.p,{children:"现在从群聊、从好友点进来，就都会查询聊天记录了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:b,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"此外，我们还要添加下创建群聊的功能。"}),"\n",(0,a.jsx)(n.p,{children:"同样，要写一个 Modal："}),"\n",(0,a.jsx)(n.p,{children:"src/pages/CreateGroupModal.tsx"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Button, Form, Input, InputNumber, Modal, message } from "antd";\nimport { useForm } from "antd/es/form/Form";\nimport { createGroup } from "../../interfaces";\n\ninterface CreateGroupModalProps {\n    isOpen: boolean;\n    handleClose: Function\n}\n\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\n\nexport interface GroupGroup {\n    name: string;\n}\n\nexport function CreateGroupModal(props: CreateGroupModalProps) {\n\n    const [form] = useForm<GroupGroup>();\n\n    const handleOk = async function() {\n        await form.validateFields();\n\n        const values = form.getFieldsValue();\n\n        try{\n            const res = await createGroup(values.name);\n\n            if(res.status === 201 || res.status === 200) {\n                message.success(\'群聊创建成功过\');\n                form.resetFields();\n                props.handleClose();\n            }\n        } catch(e: any){\n            message.error(e.response?.data?.message || \'系统繁忙，请稍后再试\');\n        }\n    }\n\n    return <Modal \n        title="创建群聊"\n        open={props.isOpen}\n        onOk={handleOk}\n        onCancel={() => props.handleClose()}\n        okText={\'创建\'}\n        cancelText={\'取消\'}    \n    >\n        <Form\n            form={form}\n            colon={false}\n            {...layout}\n        >\n            <Form.Item\n                label="群聊名称"\n                name="name"\n                rules={[\n                    { required: true, message: \'请输入群聊名称!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n        </Form>\n    </Modal>\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"和之前的 Modal 一样，创建群聊需要填入群聊名称。"}),"\n",(0,a.jsx)(n.p,{children:"在 interfaces 添加这个接口："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export async function createGroup(name: string) {\n    return axiosInstance.get(`/chatroom/create-group`, {\n        params: {\n            name\n        }\n    });\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"在 Group/index.tsx 里用一下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:f,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"加一个按钮，点击显示创建群聊弹窗，关闭弹窗的时候刷新列表。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Badge, Button, Form, Input, Popconfirm, Table, message } from "antd";\nimport { useCallback, useEffect, useMemo, useState } from "react";\nimport \'./index.css\';\nimport { ColumnsType } from "antd/es/table";\nimport { useForm } from "antd/es/form/Form";\nimport { chatroomList } from "../../interfaces";\nimport { MembersModal } from "./MembersModal";\nimport { useNavigate } from "react-router-dom";\nimport { AddMemberModal } from "./AddMemberModal";\nimport { CreateGroupModal } from "./CreateGroupModal";\n\ninterface SearchGroup {\n    name: string;\n}\n\ninterface GroupSearchResult {\n    id: number;\n    name: string;\n    type: boolean;\n    userCount: number;\n    userIds: Array<number>;\n    createTime: Date;\n}\n\nexport function Group() {\n    const [groupResult, setGroupResult] = useState<Array<GroupSearchResult>>([]);\n\n    const [isMembersModalOpen, setMembersModalOpen] = useState(false);\n    const [isMemberAddModalOpen, setMemberAddModalOpen] = useState(false);\n    const [isCreateGroupModalOpen, setCreateGroupModalOpen] = useState(false);\n\n    const [chatroomId, setChatroomId] = useState<number>(-1);\n\n    const navigate = useNavigate();\n\n    const columns: ColumnsType<GroupSearchResult> = [\n        {\n            title: \'名称\',\n            dataIndex: \'name\'\n        },\n        {\n            title: \'创建时间\',\n            dataIndex: \'createTime\',\n            render: (_, record) => {\n                return new Date(record.createTime).toLocaleString()\n            }\n        },\n        {\n            title: \'人数\',\n            dataIndex: \'userCount\'\n        },\n        {\n            title: \'操作\',\n            render: (_, record) => (\n                <div>\n                    <a href="javascript:void(0);" onClick={() => {\n                        navigate(\'/chat\', {\n                            state: {\n                                chatroomId: record.id\n                            }\n                        });\n                    }}>聊天</a>&nbsp;\n                    <a href="#" onClick={() => {\n                        setChatroomId(record.id);\n                        setMembersModalOpen(true);\n                    }}>详情</a>&nbsp;\n                    <a href="#" onClick={() => {\n                        setChatroomId(record.id);\n                        setMemberAddModalOpen(true);\n                    }}>添加成员</a>\n                </div>\n            )\n        }\n    ]\n\n    const searchGroup = async (values: SearchGroup) => {\n        try{\n            const res = await chatroomList(values.name || \'\');\n\n            if(res.status === 201 || res.status === 200) {\n                setGroupResult(res.data.filter((item: GroupSearchResult) => {\n                    return item.type === true\n                }).map((item: GroupSearchResult) => {\n                    return {\n                        ...item,\n                        key: item.id\n                    }\n                }));\n            }\n        } catch(e: any){\n            message.error(e.response?.data?.message || \'系统繁忙，请稍后再试\');\n        }\n    };\n\n    const [form ]  = useForm();\n\n    useEffect(() => {\n        searchGroup({\n            name: form.getFieldValue(\'name\')\n        });\n    }, []);\n\n    const [queryKey, setQueryKey] = useState<string>(\'\');\n    return <div id="group-container">\n        <div className="group-form">\n            <Form\n                form={form}\n                onFinish={searchGroup}\n                name="search"\n                layout=\'inline\'\n                colon={false}\n            >\n                <Form.Item label="名称" name="name">\n                    <Input />\n                </Form.Item>\n\n                <Form.Item label=" ">\n                    <Button type="primary" htmlType="submit">\n                        搜索\n                    </Button>\n                </Form.Item>\n\n                <Form.Item label=" ">\n                    <Button type="primary" style={{background: \'green\'}} onClick={() => setCreateGroupModalOpen(true)}>\n                        创建群聊\n                    </Button>\n                </Form.Item>\n            </Form>\n        </div>\n        <div className="group-table">\n            <Table columns={columns} dataSource={groupResult} style={{width: \'1000px\'}}/>\n        </div>\n        <MembersModal isOpen={isMembersModalOpen} handleClose={() => {\n            setMembersModalOpen(false)\n        }} chatroomId={chatroomId} queryKey={queryKey}/>\n        <AddMemberModal isOpen={isMemberAddModalOpen} handleClose={() => {\n            setMemberAddModalOpen(false)\n\n            setQueryKey(Math.random().toString().slice(2, 10))\n            searchGroup({\n                name: form.getFieldValue(\'name\')\n            });\n        }} chatroomId={chatroomId}/>\n        <CreateGroupModal isOpen={isCreateGroupModalOpen} handleClose={() => {\n            setCreateGroupModalOpen(false)\n\n            searchGroup({\n                name: form.getFieldValue(\'name\')\n            });\n        }}/>\n    </div>\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:u,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后给这个闲聊群加几个成员："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:m,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"进入聊天："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"三个人都能正常聊天。"}),"\n",(0,a.jsx)(n.p,{children:"从创建聊天、加入聊天到在群里聊天，整个流程都没问题。"}),"\n",(0,a.jsx)(n.p,{children:"过程中发现一个小问题："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"刚加载出聊天记录的时候，不会滚动到底部。"}),"\n",(0,a.jsx)(n.p,{children:"我们也加一下自动滚动："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"useEffect(() => {\n    setTimeout(() => {\n        document.getElementById('bottom-bar')?.scrollIntoView({block: 'end'});\n    }, 300);\n}, [roomId])\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:t,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样就好了。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-frontend",target:"_blank",rel:"noopener noreferrer",children:"前端代码"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-backend",target:"_blank",rel:"noopener noreferrer",children:"后端代码"})}),"\n",(0,a.jsxs)(n.h2,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"这节我们打通了群聊的流程。"}),"\n",(0,a.jsx)(n.p,{children:"首先支持了查看群聊成员，通过弹窗展示。"}),"\n",(0,a.jsx)(n.p,{children:"然后支持了添加成员，填入对方的 username 即可。"}),"\n",(0,a.jsx)(n.p,{children:"之后实现了点击聊天进入群聊。"}),"\n",(0,a.jsx)(n.p,{children:"然后实现了创建群聊。"}),"\n",(0,a.jsx)(n.p,{children:"最后从创建群聊、添加成员、查看成员、开始聊天，到三个人在群里聊天，都没问题。"}),"\n",(0,a.jsx)(n.p,{children:"这样，群聊功能就完成了。"})]})}function V(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(Q,{...e})}):Q(e)}let H=V;V.__RSPRESS_PAGE_META={},V.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F190.%20%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%9A%E5%88%9B%E5%BB%BA%E7%BE%A4%E8%81%8A%E3%80%81%E8%BF%9B%E5%85%A5%E7%BE%A4%E8%81%8A.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"190. 聊天室：创建群聊、进入群聊",headingTitle:"190. 聊天室：创建群聊、进入群聊",frontmatter:{}}}}]);