"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["8044"],{216219:function(e,n,r){r.r(n),r.d(n,{default:()=>w});var i=r(552676),t=r(740453);let s=r.p+"static/image/fda759839c4d8ce43c63cf1ea22f1afc.cf31ba72.webp",o=r.p+"static/image/7a288145e846876276e022b2641fa334.82292928.webp",a=r.p+"static/image/2938afde546d69ccbc36d786db23a8bf.3b652d39.webp",c=r.p+"static/image/bd360d76b49c6f97cbba90bc96598531.0d60d3c5.webp",l=r.p+"static/image/aa9157ba7a8200931725c24cf375a4b9.9430665c.webp",d=r.p+"static/image/9f79a0d97e071535b2e10bc70dfcffc0.24012762.webp",p=r.p+"static/image/4c38b6d3c8cb30ff281815403c275fad.8b34b968.webp",h=r.p+"static/image/9c3fb23dac20df4c8d405129ad655f3b.7652818a.webp",g=r.p+"static/image/49d45f3dcde6ed50fee0ecaca1829d66.a09d98b1.webp",u=r.p+"static/image/4944943c3921b344f825e0f94cf2b2a9.43b399e9.webp",v=r.p+"static/image/f5704bc2560750cf0d84d82de0cf2dd4.bbe65f6f.webp",x=r.p+"static/image/2e3fb609844c028f654c81ce562b24a7.5fc665d2.webp",j=r.p+"static/image/29063c73cd19fa3ac801b51383c5a355.79da0ca5.webp",f=r.p+"static/image/80ca20d0be859c3e9844cc3ec35128ff.e1f5694c.webp",m=r.p+"static/image/514a09687dd2d12928dcb9fd0fa8d6e2.18e11cb1.webp",b=r.p+"static/image/4340e057c4329461fe7a43f11faba90f.9c86024d.webp";function C(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code",p:"p",img:"img",ul:"ul",li:"li",strong:"strong",h4:"h4",blockquote:"blockquote",em:"em",h5:"h5"},(0,t.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"16spring-boot-实践之-web-功能开发",children:["16.Spring Boot 实践之 Web 功能开发",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#16spring-boot-实践之-web-功能开发",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"mvc-自动配置内容",children:["MVC 自动配置内容",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mvc-自动配置内容",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tip",children:"本篇文章中所涉及的源码已经整理好并上传到百度云，地址和提取密码如下：\n链接: https://pan.baidu.com/s/1rbfEcYrtrZnmyqQJ6qvavQ \n提取码: 8ust\n"})}),"\n",(0,i.jsx)(n.p,{children:"如下图所示，是 Spring Boot 2.3.7 版本的官方解释文档，在 4.7.1 小节中介绍了 Spring Boot 项目对于 Spring MVC 的自动配置内容。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:"mvc-auto-config"})}),"\n",(0,i.jsxs)(n.p,{children:["文档地址为 ",(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-boot/docs/2.3.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration",target:"_blank",rel:"noopener noreferrer",children:"boot-features-spring-mvc-auto-configuration"}),"。"]}),"\n",(0,i.jsx)(n.p,{children:"通过官方文档的介绍可以发现，Spring Boot 还做了如下的默认配置："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"自动配置了视图解析器"}),"\n",(0,i.jsx)(n.li,{children:"静态资源文件处理"}),"\n",(0,i.jsx)(n.li,{children:"自动注册了大量的转换器和格式化器"}),"\n",(0,i.jsx)(n.li,{children:"提供了 HttpMessageConverter 对请求参数和返回结果进行处理"}),"\n",(0,i.jsx)(n.li,{children:"自动注册了 MessageCodesResolver"}),"\n",(0,i.jsx)(n.li,{children:"默认欢迎页配置"}),"\n",(0,i.jsx)(n.li,{children:"favicon 自动配置"}),"\n",(0,i.jsx)(n.li,{children:"可配置的 Web 初始化绑定器"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"以上自动配置都是在 WebMvcAutoConfiguration 自动配置类中操作的。"}),"\n",(0,i.jsxs)(n.h2,{id:"webmvcautoconfiguration-源码分析",children:["WebMvcAutoConfiguration 源码分析",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webmvcautoconfiguration-源码分析",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"WebMvcAutoConfiguration 自动配置类定义在 spring-boot-autoconfigure-2.3.7.RELEASE.jar 包的 org.springframework.boot.autoconfigure.web 包中，WebMvcAutoConfiguration 类的源码及注释如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Configuration(proxyBeanMethods = false)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,\n		ValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n  ... 省略部分代码\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"WebMvcAutoConfiguration 类的注解释义如下："})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"@Configuration(proxyBeanMethods = false)"}),"\n",(0,i.jsx)(n.p,{children:"指定该类为配置类。"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"@ConditionalOnWebApplication(type = Type.SERVLET)"}),"\n",(0,i.jsx)(n.p,{children:"当前应用是一个 Servlet Web 应用的时候，这个配置类才生效。"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)"}),"\n",(0,i.jsx)(n.p,{children:"类的加载顺序，数值越小越先加载，优先加载。"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })"}),"\n",(0,i.jsx)(n.p,{children:"判断当前 classpath 下是否存在指定类：Servlet 类、 DispatcherServlet 类和 WebMvcConfigurer 类，存在时生效。"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)"}),"\n",(0,i.jsx)(n.p,{children:"判断 IOC 容器中是否存在 WebMvcConfigurationSupport 类型的 bean，不存在时生效。"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,\nValidationAutoConfiguration.class })"}),"\n",(0,i.jsx)(n.p,{children:"自动配置的时机在 DispatcherServletAutoConfiguration 等三个自动配置类之后。"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"通过源码可得知，WebMvcAutoConfiguration 自动配置类的自动配置触发条件为：当前项目类型必须为 SERVLET （前文中有讲解 WebApplicationType.SERVLET），当前 classpath 下存在 Servlet 类、 DispatcherServlet 类和 WebMvcConfigurer 类且并未向 IOC 容器中注册 WebMvcConfigurationSupport 类型的 bean，@AutoConfigureAfter 注解又定义了自动配置类生效是在 DispatcherServletAutoConfiguration 、 TaskExecutionAutoConfiguration、ValidationAutoConfiguration 自动配置之后。"}),"\n",(0,i.jsx)(n.p,{children:"以上条件都满足时，WebMvcAutoConfiguration 就会开始进行自动配置操作了。"}),"\n",(0,i.jsx)(n.p,{children:"WebMvcAutoConfiguration 中有3个主要的内部类："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"WebMvcAutoConfigurationAdapter"}),"\n",(0,i.jsx)(n.li,{children:"EnableWebMvcConfiguration"}),"\n",(0,i.jsx)(n.li,{children:"ResourceChainCustomizerConfiguration"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:"image-20210102235905573"})}),"\n",(0,i.jsx)(n.p,{children:"具体的自动配置逻辑实现都是在这三个内部类中进行实现。"}),"\n",(0,i.jsxs)(n.h2,{id:"viewresolver-视图解析器自动配置",children:["ViewResolver 视图解析器自动配置",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#viewresolver-视图解析器自动配置",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"SpringMVC 中的 Controller 控制器可以返回各种各样的视图，比如 JSP 、JSON、 Velocity 、FreeMarker、Thymeleaf、HTML字符流等等，这些视图的解析就涉及到各种视图（即 View）对应的各种视图解析器（即 ViewResolver），视图解析器的作用是将逻辑视图转为物理视图，所有的视图解析器都必须实现ViewResolver接口。"}),"\n",(0,i.jsx)(n.p,{children:"SpringMVC 提供了不同的策略，可以在 Spring Web 上下文中配置一种或多种解析策略，并指定他们之间的先后顺序，每一种映射策略对应一个具体的视图解析器实现类。开发者可以设置一个视图解析器或混用多个视图解析器并指定解析器的优先顺序，SpringMVC 会按视图解析器顺序的优先顺序对逻辑视图名进行解析，直到解析成功并返回视图对象，否则抛出异常。"}),"\n",(0,i.jsx)(n.p,{children:"在 WebMvcAutoConfigurationAdapter 内部类中，在前置条件满足的情况下自动配置类会向 IOC 容器中注册三个视图解析器，分别是："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"InternalResourceViewResolver"}),"\n",(0,i.jsx)(n.li,{children:"BeanNameViewResolver"}),"\n",(0,i.jsx)(n.li,{children:"ContentNegotiatingViewResolver"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"源码和注释如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer {\n		...省略部分代码\n\n\n		@Bean\n		@ConditionalOnMissingBean // IOC 容器中没有 InternalResourceViewResolver 类的bean时，向容器中注册一个 InternalResourceViewResolver 类型的 bean\n		public InternalResourceViewResolver defaultViewResolver() {\n			InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n			resolver.setPrefix(this.mvcProperties.getView().getPrefix());\n			resolver.setSuffix(this.mvcProperties.getView().getSuffix());\n			return resolver;\n		}\n\n		@Bean\n		@ConditionalOnBean(View.class) // IOC 容器中存在 View.class\n		@ConditionalOnMissingBean // 满足上面一个条件同时 IOC 容器中没有 BeanNameViewResolver 类的bean时，向容器中注册一个 BeanNameViewResolver 类型的 bean\n		public BeanNameViewResolver beanNameViewResolver() {\n			BeanNameViewResolver resolver = new BeanNameViewResolver();\n			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n			return resolver;\n		}\n\n		@Bean\n		@ConditionalOnBean(ViewResolver.class) // IOC 容器中存在 ViewResolver.class\n		@ConditionalOnMissingBean(name = "viewResolver", value = ContentNegotiatingViewResolver.class) // 满足上面一个条件同时 IOC 容器中没有名称为 viewResolver 且类型为 ContentNegotiatingViewResolver 类的bean时，向容器中注册一个 ContentNegotiatingViewResolver 类型的 bean\n		public ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n			ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n			resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));\n			// ContentNegotiatingViewResolver uses all the other view resolvers to locate\n			// a view so it should have a high precedence\n			resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n			return resolver;\n		}\n'})}),"\n",(0,i.jsx)(n.p,{children:"BeanNameViewResolver：在控制器中一个方法的返回值的字符串会根据 BeanNameViewResolver 去查找 Bean 的名称为返回字符串的 View 来渲染视图。"}),"\n",(0,i.jsx)(n.p,{children:"InternalResourceViewResolver：这是极为常用的 ViewResolver，主要通过设置前缀、后缀以及控制器中方法来返回视图名的字符串，以得到实际视图内容。"}),"\n",(0,i.jsxs)(n.p,{children:["ContentNegotiatingViewResolver：这是一个特殊的视图解析器，官方文档中介绍如下：它并不会自己处理各种视图，而是委派给其他不同的 ViewResolver 来处理不同的 View，级别为最高，详细内容可以查看官方文档：",(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html",target:"_blank",rel:"noopener noreferrer",children:"ContentNegotiatingViewResolver-doc"})]}),"\n",(0,i.jsx)(n.p,{children:"在普通的 web 项目中，开发者们需要自己手动配置视图解析器，配置文件如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'    \x3c!-- 视图解析器 --\x3e\n    <bean id="viewResolver"\n          class="org.springframework.web.servlet.view.InternalResourceViewResolver">\n        <property name="prefix" value="/"/>\n        <property name="suffix" value=".jsp"></property>\n    </bean>\n'})}),"\n",(0,i.jsx)(n.p,{children:"与之相对比，Spring Boot 的自动配置机制会直接在项目启动过程中将视图解析器注册到 IOC 容器中，而不需要开发者再去做多余的配置。当然，如果不想使用默认的策略，也可以自行添加视图解析器到 IOC 容器中。"}),"\n",(0,i.jsxs)(n.h2,{id:"自动注册-converter-formatter",children:["自动注册 Converter 、Formatter",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自动注册-converter-formatter",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在 WebMvcAutoConfigurationAdapter 内部类中，含有 addFormatters() 方法，该方法会向 FormatterRegistry 添加 IOC 容器中所有的 Converter、GenericConverter、Formatter 类型的 bean。"}),"\n",(0,i.jsx)(n.p,{children:"addFormatters() 方法源码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"	@Override\n	public void addFormatters(FormatterRegistry registry) {\n		ApplicationConversionService.addBeans(registry, this.beanFactory);\n	}\n"})}),"\n",(0,i.jsx)(n.p,{children:"实际调用的逻辑代码为 ApplicationConversionService 类的 addBeans() 方法，该方法源码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"	public static void addBeans(FormatterRegistry registry, ListableBeanFactory beanFactory) {\n		Set<Object> beans = new LinkedHashSet<>();\n		beans.addAll(beanFactory.getBeansOfType(GenericConverter.class).values());\n		beans.addAll(beanFactory.getBeansOfType(Converter.class).values());\n		beans.addAll(beanFactory.getBeansOfType(Printer.class).values());\n		beans.addAll(beanFactory.getBeansOfType(Parser.class).values());\n		for (Object bean : beans) {\n			if (bean instanceof GenericConverter) {\n				registry.addConverter((GenericConverter) bean);\n			}\n			else if (bean instanceof Converter) {\n				registry.addConverter((Converter<?, ?>) bean);\n			}\n			else if (bean instanceof Formatter) {\n				registry.addFormatter((Formatter<?>) bean);\n			}\n			else if (bean instanceof Printer) {\n				registry.addPrinter((Printer<?>) bean);\n			}\n			else if (bean instanceof Parser) {\n				registry.addParser((Parser<?>) bean);\n			}\n		}\n	}\n"})}),"\n",(0,i.jsx)(n.p,{children:"为了方便读者们理解，这里简单地举一个案例。"}),"\n",(0,i.jsx)(n.p,{children:"在 controller 包中新建 TestController 类并新增 typeConversionTest() 方法，参数分别为："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"goodsName：参数类型为 String"}),"\n",(0,i.jsx)(n.li,{children:"weight：参数类型为 float"}),"\n",(0,i.jsx)(n.li,{children:"type：参数类型为 int"}),"\n",(0,i.jsx)(n.li,{children:"onSale：参数类型为 Boolean"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"typeConversionTest() 方法代码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@RestController\npublic class TestController {\n\n    @RequestMapping("/test/type/conversion")\n    public void typeConversionTest(String goodsName, float weight, int type, Boolean onSale) {\n        System.out.println("goodsName:" + goodsName);\n        System.out.println("weight:" + weight);\n        System.out.println("type:" + type);\n        System.out.println("onSale:" + onSale);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"编码完成后重启 Spring Boot 项目，项目启动成功后在浏览器中输入地址进行请求，看一下控制台中的打印结果。"}),"\n",(0,i.jsx)(n.p,{children:"第一次请求："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"http://localhost:8080/test/type/conversion?goodsName=iPhoneX&weight=174.5&type=1&onSale=true"})}),"\n",(0,i.jsx)(n.p,{children:"打印结果如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"goodsName:iPhoneX\nweight:174.5\ntype:1\nonSale:true\n"})}),"\n",(0,i.jsx)(n.p,{children:"第二次请求："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"http://localhost:8080/test/type/conversion?goodsName=iPhone8&weight=174.5&type=2&onSale=0"})}),"\n",(0,i.jsx)(n.p,{children:"打印结果如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"goodsName:iPhone8\nweight:174.5\ntype:2\nonSale:false\n"})}),"\n",(0,i.jsx)(n.p,{children:"其实这就是 SpringMVC 中的类型转换，HTTP 请求传递的数据都是字符串 String 类型的，上面这个方法在 Controller 中定义，如果该方法对应的地址接收到到浏览器的请求的话，并且请求中含有 goodsName（String 类型）、weight（float类型）、type（int类型）、onSale（Boolean类型）参数且都已经被进行正确的类型转换，大家可以在本地自行测试几次。"}),"\n",(0,i.jsx)(n.p,{children:"以上是简单的类型转换，如果业务需要的话也可以进行自定义类型转换器添加到项目中。"}),"\n",(0,i.jsxs)(n.h2,{id:"消息转换器-httpmessageconverter",children:["消息转换器 HttpMessageConverter",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#消息转换器-httpmessageconverter",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"HttpMessageConverter 的设置也是通过 WebMvcAutoConfigurationAdapter 完成的，源码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"	@Override\n	public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n		this.messageConvertersProvider\n				.ifAvailable((customConverters) -> converters.addAll(customConverters.getConverters()));\n	}\n"})}),"\n",(0,i.jsx)(n.p,{children:"在使用 SpringMVC 框架开发 Web 项目时，大家应该都使用过 @RequestBody、@ResponseBody 注解进行请求实体的转换和响应结果的格式化输出，以普遍使用的 JSON 数据为例，这两个注解的作用分别可以将请求中的数据解析成 JSON 并绑定为实体对象以及将响应结果以 JSON 格式返回给请求发起者，但 HTTP 请求和响应是基于文本的，也就是说在 SpringMVC 内部维护了一套转换机制，也就是开发者们通常所说的“将 JSON 格式的请求信息转换为一个对象，将对象转换为 JSON 格式并输出为响应信息 ”，这些就是 HttpMessageConverter 的作用。"}),"\n",(0,i.jsx)(n.p,{children:"举一个简单的例子，在项目中新建 entity 包并定义一个实体类 SaleGoods，之后通过 @RequestBody、@ResponseBody 注解进行参数的读取和响应，代码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// 实体类\npublic class SaleGoods {\n    private Integer id;\n    private String goodsName;\n    private float weight;\n    private int type;\n    private Boolean onSale;\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n        this.id = id;\n    }\n    public String getGoodsName() {\n        return goodsName;\n    }\n    public void setGoodsName(String goodsName) {\n        this.goodsName = goodsName;\n    }\n    public float getWeight() {\n        return weight;\n    }\n    public void setWeight(float weight) {\n        this.weight = weight;\n    }\n    public Boolean getOnSale() {\n        return onSale;\n    }\n    public void setOnSale(Boolean onSale) {\n        this.onSale = onSale;\n    }\n    public int getType() {\n        return type;\n    }\n    public void setType(int type) {\n        this.type = type;\n    }\n    @Override\n    public String toString() {\n        return "SaleGoods{" +\n                "id=" + id +\n                ", goodsName=\'" + goodsName + \'\\\'\' +\n                ", weight=" + weight +\n                ", type=" + type +\n                ", onSale=" + onSale +\n                \'}\';\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"在 TestController 控制器中新增 httpMessageConverterTest() 方法，代码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@RestController\npublic class TestController {\n\n    @RequestMapping(value = "/test/httpmessageconverter", method = RequestMethod.POST)\n    public SaleGoods httpMessageConverterTest(@RequestBody SaleGoods saleGoods) {\n        System.out.println(saleGoods.toString());\n        saleGoods.setType(saleGoods.getType() + 1);\n        saleGoods.setGoodsName("商品名：" + saleGoods.getGoodsName());\n        return saleGoods;\n    }\n    \n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"上述代码的作用就是拿到封装好的 SaleGoods 对象，进行简单的属性修改后，最后将对象数据返回。"}),"\n",(0,i.jsx)(n.p,{children:"编码完成后重启项目，并发送请求数据进行测试，请求数据如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{	\n	"id":1,\n	"goodsName":"Spring Boot 2 教程",\n	"weight":10.5,\n	"type":2,\n	"onSale":true\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"由于是 POST 请求，因此没有直接使用浏览器访问，而是使用 postman 软件进行模拟请求，最终获得结果如下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:"image-20210102235744872"})}),"\n",(0,i.jsx)(n.p,{children:"由于消息转换器的存在，对象数据的读取不仅简单而且完全正确，响应时也不用自行封装工具类，使得开发过程变得更加灵活和高效，开发者们使用 Spring Boot 开发项目完全不用再去做额外的配置，只需关心业务编码即可。"}),"\n",(0,i.jsxs)(n.h2,{id:"spring-boot-对静态资源的映射规则",children:["Spring Boot 对静态资源的映射规则",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#spring-boot-对静态资源的映射规则",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"对比 Spring Boot 项目和普通 Spring Web项目的目录结构，很明显地发现目录结构中仅有 java 和 resources两个目录，用于存放资源文件的 webapp 目录在Spring Boot 项目的目录结构中根本不存在，那么 Spring Boot 是如何处理静态资源的呢？WebMvc 自动配置时针对资源文件的访问做了哪些配置？"}),"\n",(0,i.jsx)(n.p,{children:"结合源码来看一下，这部分配置依然是通过 WebMvcAutoConfigurationAdapter 内部类完成的，源码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'		@Override\n		public void addResourceHandlers(ResourceHandlerRegistry registry) {\n			if (!this.resourceProperties.isAddMappings()) {\n				logger.debug("Default resource handling disabled");\n				return;\n			}\n			Duration cachePeriod = this.resourceProperties.getCache().getPeriod();\n			CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();\n            // webjars 文件访问配置\n			if (!registry.hasMappingForPattern("/webjars/**")) {\n				customizeResourceHandlerRegistration(registry.addResourceHandler("/webjars/**")\n						.addResourceLocations("classpath:/META-INF/resources/webjars/")\n						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n			}\n            // 静态资源映射配置\n			String staticPathPattern = this.mvcProperties.getStaticPathPattern();\n			if (!registry.hasMappingForPattern(staticPathPattern)) {\n				customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)\n						.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))\n						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n			}\n		}\n'})}),"\n",(0,i.jsx)(n.p,{children:"如以上源码所示，静态资源的映射是在 addResourceHandlers() 方法中进行映射配置的，类似于 SpringMVC 配置文件中的如下配置代码："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<mvc:resources mapping="/images/**" location="/images/" />\n'})}),"\n",(0,i.jsx)(n.p,{children:'回到 addResourceHandlers() 源码中来，staticPathPattern 变量值为 "/**"，该值的默认值在 WebMvcProperties 类中。实际的静态资源存放目录通过 getResourceLocations() 方法获取，跟入该方法：'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@ConfigurationProperties(prefix = "spring.resources", ignoreUnknownFields = false)\npublic class ResourceProperties {\n\n	private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {\n			"classpath:/META-INF/resources/", "classpath:/resources/",\n			"classpath:/static/", "classpath:/public/" };\n\n	private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;\n    \n	public String[] getStaticLocations() {\n		return this.staticLocations;\n	}\n}    \n'})}),"\n",(0,i.jsx)(n.p,{children:"可以得到 Spring Boot 默认的静态资源处理目录为："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"classpath:/META-INF/resources/",'}),"\n",(0,i.jsx)(n.li,{children:'"classpath:/resources/"'}),"\n",(0,i.jsx)(n.li,{children:'"classpath:/static/"'}),"\n",(0,i.jsx)(n.li,{children:'"classpath:/public/"'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"访问当前项目的任何资源，都能够去静态资源的文件夹中查找对应的资源，不存在资源则会显示相应的错误页面，因此在开发 Web 项目时只需要包含这几个目录中的任意一个或者多个，之后将静态资源文件放入其中即可。"}),"\n",(0,i.jsx)(n.p,{children:"为了验证该配置，可以在类路径下分别创建 resources 目录、public 目录、static目录，并分别在三个文件夹中放入静态文件，分别是 PNG 格式文件、CSS 格式文件、HTML 格式文件和 JS 格式文件："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:"image-20210111171736604"})}),"\n",(0,i.jsx)(n.p,{children:"之后重启 Spring Boot，启动成功后在打开浏览器并输入以下请求地址分别进行请求："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://localhost:8080/logo.png",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/logo.png"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://localhost:8080/main.css",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/main.css"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://localhost:8080/test.html",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/test.html"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://localhost:8080/test.js",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/test.js"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"访问结果如下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:"image-20210105101430358"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:"image-20210105101444100"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:"image-20210111171632077"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:"image-20210105101504213"})}),"\n",(0,i.jsx)(n.p,{children:"可以发现静态资源虽然在不同的目录中但是都能够被正确的返回，这就是 Spring Boot 对静态资源的拦截处理。"}),"\n",(0,i.jsx)(n.p,{children:'当然，开发时也可以在 Spring Boot 项目配置文件中修改这些属性，比如将拦截路径改为 "/static/**"，并将静态资源目录修改为 /file-test，那么默认配置就会失效而使用开发者自定义的配置，修改 application.properties 文件，添加如下配置：'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-properties",children:"spring.mvc.static-path-pattern=/static/**\nspring.resources.static-locations=classpath:/file-test/\n"})}),"\n",(0,i.jsx)(n.p,{children:"修改后，重启 Spring Boot 项目，再次使用原来的 URL 访问以上三个资源文件将会报 404 的错误，如下图所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:"image-20210105101650250"})}),"\n",(0,i.jsx)(n.p,{children:"如果想要正常访问则需要新建 static-test 目录并将静态资源文件移动到 file-test 目录下，且修改访问路径为："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://localhost:8080/static/logo.jpg",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/static/logo.jpg"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://localhost:8080/static/main.css",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/static/main.css"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://localhost:8080/static/test.js",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/static/test.js"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"如下图所示，此时页面中就不会出现 404 错误。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:"image-20210105103417115"})}),"\n",(0,i.jsxs)(n.h2,{id:"默认欢迎页和-favicon-配置",children:["默认欢迎页和 favicon 配置",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#默认欢迎页和-favicon-配置",children:"#"})]}),"\n",(0,i.jsxs)(n.h4,{id:"默认欢迎页配置",children:["默认欢迎页配置",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#默认欢迎页配置",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"除了静态资源映射之外，Spring Boot 也默认配置了 welcomePage 和 favicon，这两个配置都和静态资源映射相关联，首先来看 welcomePage 的设置，源码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'		@Bean\n		public WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,\n				FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) {\n			WelcomePageHandlerMapping welcomePageHandlerMapping = new WelcomePageHandlerMapping(\n					new TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),\n					this.mvcProperties.getStaticPathPattern());\n			welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));\n			welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());\n			return welcomePageHandlerMapping;\n		}\n\n		private Optional<Resource> getWelcomePage() {\n			String[] locations = getResourceLocations(this.resourceProperties.getStaticLocations());\n			return Arrays.stream(locations).map(this::getIndexHtml).filter(this::isReadable).findFirst();\n		}\n\n		private Resource getIndexHtml(String location) {\n            // 静态资源目录下的 index.html 文件\n			return this.resourceLoader.getResource(location + "index.html");\n		}\n'})}),"\n",(0,i.jsx)(n.p,{children:"通过源码可以得出，在进行 WebMvc 自动配置时会向 IOC 容器中注册一个 WelcomePageHandlerMapping 类型的 bean，即默认欢迎页，其路径为静态资源目录下的 index.html ，静态资源目录的知识点前文中已经讲解。"}),"\n",(0,i.jsxs)(n.p,{children:["在实际进行该功能测试时可以先访问一下当前项目根路径，比如启动项目后访问 ",(0,i.jsx)(n.a,{href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080"})," 地址，结果如下图所示："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:"image-20210105103539468"})}),"\n",(0,i.jsx)(n.p,{children:"此时，服务器返回的是 404 错误页面。"}),"\n",(0,i.jsx)(n.p,{children:"但是，如果开发者在静态资源目录下添加 index.html 就能够看到欢迎页效果，在静态资源目录下新增 index.html 文件，比如选择默认的 /static/ 目录，如下图所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:"image-20210105103732646"})}),"\n",(0,i.jsx)(n.p,{children:"index.html 代码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>welcome page</title>\n</head>\n<body>\n这里是默认欢迎页\n</body>\n</html>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["编码完成重启项目，启动成功后，再访问 ",(0,i.jsx)(n.a,{href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080"})," 地址，结果如下图所示："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:"image-20210105103823642"})}),"\n",(0,i.jsx)(n.p,{children:"此时，可以看到首页已经不再是错误页面了。"}),"\n",(0,i.jsxs)(n.h4,{id:"favicon-图标",children:["favicon 图标",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#favicon-图标",children:"#"})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Favicon"}),"是 ",(0,i.jsx)(n.em,{children:"favorites icon"})," 的缩写，亦被称为",(0,i.jsx)(n.strong,{children:"website icon"}),"（网页图标）、",(0,i.jsx)(n.strong,{children:"page icon"}),"（页面图标）或 ",(0,i.jsx)(n.strong,{children:"urlicon"}),"（URL图标）。Favicon 是与某个网站或网页相关联的图标。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"不同的网站会放置自身特有的 favicon 图标，如下图所示分别是Spring 、百度、掘金 、GitHub 官方网站的 favicon 图标："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:"image-20210105103952622"})}),"\n",(0,i.jsx)(n.p,{children:"Spring Boot 框架支持开发者对 favicon 图标进行配置并显示，不过由于版本的迭代，对于 favicon 图标的支持做了一些调整。在 Spring Boot 2.2.x 版本之前，Spring Boot 会默认提供一个 favicon 图标，如下图左侧的那个类似叶子一样的图标。本书所讲解的案例和源码中选择的 Spring Boot 版本都是 2.3.7，可以看到网页中已经不显示 favicon 图标，如下图所示，右侧的浏览器标签栏中不存在 favicon 图标，原因是 Spring Boot 2.2.x 版本之后的版本中已经不再提供默认的 favicon 图标。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:"image-20210103002159179"})}),"\n",(0,i.jsxs)(n.p,{children:["Spring 官方并没有对 favicon 图标做出特别的说明，不过，官方开发人员在 Spring Boot 开源仓库的 issue 中有提及此事，链接地址为",(0,i.jsx)(n.a,{href:"https://github.com/spring-projects/spring-boot/issues/17925",target:"_blank",rel:"noopener noreferrer",children:"Remove default favicon"}),"，删除默认图标的原因是担心这个行为会导致网站信息泄露，如果 Spring Boot 继续提供默认的 favicon 图标，这个绿色叶子的小图标很容易被其他人看出项目的开发框架为 Spring Boot。"]}),"\n",(0,i.jsx)(n.p,{children:"因此，在Spring Boot 2.2.x 版本之后的版本中不再提供默认的 favicon 图标，开发者不配置自定义的 favicon 图标则浏览器标签栏中就不显示 favicon 图标，开发者如果配置了自定义的 favicon 图标则浏览器标签栏中会显示开发者所配置的 favicon 图标。"}),"\n",(0,i.jsx)(n.p,{children:"结合源码拓展一下知识点，在 Spring Boot 2.2.x 之前的版本中，默认对 favicon 图标进行了设置，源码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'		@Configuration //配置类\n		@ConditionalOnProperty(value = "spring.mvc.favicon.enabled", matchIfMissing = true) //通过 spring.mvc.favicon.enabled 配置来确定是否进行设置，默认为 true\n		public static class FaviconConfiguration implements ResourceLoaderAware {\n\n			private final ResourceProperties resourceProperties;\n\n			private ResourceLoader resourceLoader;\n\n			public FaviconConfiguration(ResourceProperties resourceProperties) {\n				this.resourceProperties = resourceProperties;\n			}\n\n			@Override\n			public void setResourceLoader(ResourceLoader resourceLoader) {\n				this.resourceLoader = resourceLoader;\n			}\n\n			@Bean\n			public SimpleUrlHandlerMapping faviconHandlerMapping() {\n				SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n				mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n				mapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n						faviconRequestHandler()));\n				return mapping;\n			}\n\n			@Bean\n			public ResourceHttpRequestHandler faviconRequestHandler() {\n				ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n				requestHandler.setLocations(resolveFaviconLocations());\n				return requestHandler;\n			}\n\n			private List<Resource> resolveFaviconLocations() {\n				String[] staticLocations = getResourceLocations(\n						this.resourceProperties.getStaticLocations());\n				List<Resource> locations = new ArrayList<>(staticLocations.length + 1);\n				Arrays.stream(staticLocations).map(this.resourceLoader::getResource)\n						.forEach(locations::add);\n				locations.add(new ClassPathResource("/"));\n				return Collections.unmodifiableList(locations);\n			}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"而在Spring  Boot 2.2.x 之后的版本中，这部分源码已经被删除，spring.mvc.favicon.enabled 配置项也被标记为“过时”。"}),"\n",(0,i.jsx)(n.p,{children:"在 Spring Boot 官方文档中也能够看出，其实 Spring Boot 框架依然支持 favicon 图标的显示，只是该图标文件需要开发者自行配置。"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.h5,{children:"Custom Favicon"}),"\n",(0,i.jsxs)(n.p,{children:["As with other static resources, Spring Boot looks for a ",(0,i.jsx)(n.code,{children:"favicon.ico"})," in the configured static content locations. If such a file is present, it is automatically used as the favicon of the application."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"接下来就通过一个实际的案例来讲解如何在 Spring Boot 项目中显示开发者自定义的 favicon 图标。"}),"\n",(0,i.jsx)(n.p,{children:"首先需要制作一个 favicon 文件，并将其放入 static 目录下，也可以是其他静态资源目录。之后再重启项目进行访问，如下图所示，可以看到 favicon 已经替换为自定义设置的 favicon 图标。"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"由于浏览器缓存的原因，可能会出现“自定义 favicon 图标未生效”的错觉，尝试刷新几次页面即可。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:s,alt:"image-20210102235434993"})}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"通过实例的讲解和源码学习，可以发现 Spring Boot 在进行 Web 项目开发时为开发者提供了如此全面而便利的默认设置，以往需要在 web.xml 或者 SpringMVC 配置文件中设置的内容，都改为以编码的方式进行自动注入和实现，开发者在使用 Spring Boot 进行项目开发时，甚至一行配置都不用写就可以直接上手开发功能，不用做任何配置就已经有了视图解析器，也不用自行添加消息转换器，SpringMVC  框架需要的一些功能都已经默认加载完成，对于开发者们来说，开发 Web 项目时 Spring Boot 框架算得上是一件神兵利器。当然，如果这些默认配置不符合实际的业务需求，开发者们也可以自行配置，Spring Boot 也提供了对应的配置参数以及辅助类进行实现，非常灵活。"})]})}function S(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(C,{...e})}):C(e)}let w=S;S.__RSPRESS_PAGE_META={},S.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F16.Spring%20Boot%20%E5%AE%9E%E8%B7%B5%E4%B9%8B%20Web%20%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91.md"]={toc:[{text:"MVC 自动配置内容",id:"mvc-自动配置内容",depth:2},{text:"WebMvcAutoConfiguration 源码分析",id:"webmvcautoconfiguration-源码分析",depth:2},{text:"ViewResolver 视图解析器自动配置",id:"viewresolver-视图解析器自动配置",depth:2},{text:"自动注册 Converter 、Formatter",id:"自动注册-converter-formatter",depth:2},{text:"消息转换器 HttpMessageConverter",id:"消息转换器-httpmessageconverter",depth:2},{text:"Spring Boot 对静态资源的映射规则",id:"spring-boot-对静态资源的映射规则",depth:2},{text:"默认欢迎页和 favicon 配置",id:"默认欢迎页和-favicon-配置",depth:2},{text:"默认欢迎页配置",id:"默认欢迎页配置",depth:4},{text:"favicon 图标",id:"favicon-图标",depth:4},{text:"总结",id:"总结",depth:2}],title:"16.Spring Boot 实践之 Web 功能开发",headingTitle:"16.Spring Boot 实践之 Web 功能开发",frontmatter:{}}}}]);