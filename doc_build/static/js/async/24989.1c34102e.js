"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["24989"],{531807:function(e,n,o){e.exports=o.p+"static/image/78b8dd9d854b2721aa444a3e091b5938.deb42d06.webp"},619582:function(e,n,o){e.exports=o.p+"static/image/b8ee0b28167d18f993ae8f19a1200e98.5a58008c.webp"},468274:function(e,n,o){o.r(n),o.d(n,{default:()=>C});var t=o(552676),s=o(740453);let a=o.p+"static/image/7f047a2758017eb4b6e12cfc0b458dc8.2eaf8d56.webp",i=o.p+"static/image/18d01010439461aec82ac0d13403f382.3a8b5b9a.webp",r=o.p+"static/image/cb5142d303b30ef92c3d1ce83dcd025c.b40dbb99.webp",c=o.p+"static/image/7938baffdfdcc87bae4b2acd6b1e7b10.061662ee.webp",d=o.p+"static/image/f01545fef18e57b68670b9b3eea4f52d.73892294.webp",l=o.p+"static/image/9b4c0189e10e9365277885f92655a072.04828ff7.webp",p=o.p+"static/image/58a141b2f95c2155647e89ef4d78e572.e9ad2482.webp",b=o.p+"static/image/c83fb116e72c12009fca2fa076ef9caf.f70fcc93.gif",m=o.p+"static/image/5b234a99a83a262f976bb83b6ba22bf5.28cf8abc.webp",h=o.p+"static/image/a4116a7427b475b978bd17b9a9d69412.5509cf5a.webp",j=o.p+"static/image/0cbb44a3bd8976b0513a44b99ceb7390.c04d49cc.webp",x=o.p+"static/image/77f663b782abfc2c84a4e2889da0ff10.e45b4c27.webp",f=o.p+"static/image/bec065e952ce553157422d6f8019a636.a6ec77b8.webp",k=o.p+"static/image/2e9ac49f0d259a43f4d369abdf602f4b.5d2bd496.webp",u=o.p+"static/image/4a6787315196e3d654c3b97aeeb72dee.4fc5a792.webp",g=o.p+"static/image/63fa237cfe85339c7dd01a8e275270ce.bba62fd5.webp",B=o.p+"static/image/c590a03a3a877628fe4f1f17bec8cf95.5fa1a530.webp",v=o.p+"static/image/849791970f7090254d8c67f19bd4ae40.6412c21a.webp",E=o.p+"static/image/5795898bef507e0e5b3af9e5c87aa0f4.bcb49cfe.webp",w=o.p+"static/image/bc0d7e782a269d5a383ddcba93fe0094.a8f548ef.webp",D=o.p+"static/image/393aaa078050a6c8276ad0008f439e7e.b88f0c5a.webp";var y=o(531807);let S=o.p+"static/image/a4238f07c8b23166a7c73e367939f88b.f4f7ff4d.webp";var I=o(619582);function N(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"29-图书管理系统图书模块后端开发",children:["29. 图书管理系统：图书模块后端开发",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#29-图书管理系统图书模块后端开发",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"写完用户模块的后端代码，我们继续来写图书模块。"}),"\n",(0,t.jsx)(n.p,{children:"这个模块的接口就是增删改查："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:I,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们来添加下 book 模块："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"nest g resource book\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:S,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"不用生成 crud 代码了，我们自己来写就行。"}),"\n",(0,t.jsx)(n.p,{children:"该下 BookController，添加一些路由："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto } from './dto/create-book.dto';\nimport { UpdateBookDto } from './dto/update-book.dto';\n\n@Controller('book')\nexport class BookController {\n  constructor(private readonly bookService: BookService) {}\n\n  @Get('list')\n  async list() {\n    return this.bookService.list();\n  }\n\n  @Get(':id')\n  async findById(@Param('id') id: string) {\n    return this.bookService.findById(+id);\n  }\n\n  @Post('create')\n  async create(@Body() createBookDto: CreateBookDto) {\n    return this.bookService.create(createBookDto);\n  }\n\n  @Put('update')\n  async update(@Body() updateBookDto: UpdateBookDto) {\n    return this.bookService.update(updateBookDto);\n  }\n\n  @Delete('delete/:id')\n  async delete(@Param('id') id: string) {\n    return this.bookService.delete(+id);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"我们新增了 /book/list、/book/:id 这两个查询的接口。"}),"\n",(0,t.jsx)(n.p,{children:"新增了 /book/create、/book/update、/book/delete/:id 这三个增删改的接口。"}),"\n",(0,t.jsx)(n.p,{children:"然后创建用到的 dto："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这里 CreateBookDto 和 UpdateBookDto 都根据原型图来确定字段："}),"\n",(0,t.jsx)(n.p,{children:"book/dto/create-book.dto.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { IsNotEmpty } from \"class-validator\";\n\nexport class CreateBookDto {\n    @IsNotEmpty({ message: '书名不能为空' })\n    name: string;\n\n    @IsNotEmpty({ message: '作者不能为空' })\n    author: string;\n\n    @IsNotEmpty({ message: '描述不能为空' })\n    description: string;\n\n    @IsNotEmpty({ message: '封面不能为空' })\n    cover: string;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"book/dto/update-book.dto.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { IsNotEmpty } from \"class-validator\";\n\nexport class UpdateBookDto {\n    @IsNotEmpty({ message: 'id 不能为空' })\n    id: number;\n\n    @IsNotEmpty({ message: '书名不能为空' })\n    name: string;\n\n    @IsNotEmpty({ message: '作者不能为空' })\n    author: string;\n\n    @IsNotEmpty({ message: '描述不能为空' })\n    description: string;\n\n    @IsNotEmpty({ message: '封面不能为空' })\n    cover: string;\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"更新的时候还要传入书的 id"}),"\n",(0,t.jsx)(n.p,{children:"然后在 BookService 里实现这些方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { UpdateBookDto } from './dto/update-book.dto';\nimport { CreateBookDto } from './dto/create-book.dto';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class BookService {\n\n    list() {\n\n    }\n\n    findById(id: number) {\n\n    }\n\n    create(createBookDto: CreateBookDto) {\n\n    }\n\n    update(updateBookDto: UpdateBookDto) {\n\n    }\n\n    delete(id: number) {\n        \n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里我们需要用到 DbModule"}),"\n",(0,t.jsx)(n.p,{children:"在 BookModule 里引入下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:D,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"感受到封装 DbModule 为动态模块的意义了么？用的时候可以传入不同的参数，动态改变模块的内容。"}),"\n",(0,t.jsx)(n.p,{children:"接下来注入 dbService，实现下 service 的方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { UpdateBookDto } from './dto/update-book.dto';\nimport { CreateBookDto } from './dto/create-book.dto';\nimport { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { DbService } from 'src/db/db.service';\nimport { Book } from './entities/book.entity';\n\nfunction randomNum() {\n    return Math.floor(Math.random() * 1000000);\n}\n\n@Injectable()\nexport class BookService {\n\n    @Inject()\n    dbService: DbService;\n\n    async list() {\n        const books: Book[] = await this.dbService.read();\n        return books;\n    }\n\n    async findById(id: number) {\n        const books: Book[] = await this.dbService.read();\n        return books.find(book => book.id === id);\n    }\n\n    async create(createBookDto: CreateBookDto) {\n        const books: Book[] = await this.dbService.read();\n        \n        const book = new Book();\n        book.id = randomNum();\n        book.author = createBookDto.author;\n        book.name = createBookDto.name;\n        book.description = createBookDto.description;\n        book.cover = createBookDto.cover;\n\n        books.push(book);\n\n        await this.dbService.write(books);\n        return book;\n    }\n\n    async update(updateBookDto: UpdateBookDto) {\n        const books: Book[] = await this.dbService.read();\n\n        const foundBook = books.find(book => book.id === updateBookDto.id);\n        \n        if(!foundBook) {\n            throw new BadRequestException('该图书不存在');\n        }\n\n        foundBook.author = updateBookDto.author;\n        foundBook.cover = updateBookDto.cover;\n        foundBook.description = updateBookDto.description;\n        foundBook.name = updateBookDto.name;\n        \n        await this.dbService.write(books);\n        return foundBook;\n    }\n\n    async delete(id: number) {\n        const books: Book[] = await this.dbService.read();\n        const index = books.findIndex(book => book.id === id);\n\n        if(index !== -1) {\n            books.splice(index, 1);\n            await this.dbService.write(books);\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"虽然代码比较多，但是都比较简单，就是读取文件里 books 的内容，做下增删改，然后再写入文件。"}),"\n",(0,t.jsx)(n.p,{children:"其中，新增时的 id 是用随机数实现的。"}),"\n",(0,t.jsx)(n.p,{children:"创建用到到的 entities/book.entity.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export class Book {\n    id: number;\n    name: string;\n    author: string;\n    description: string;\n    cover: string;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:"先新增三本书："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:w,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:E,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"在 books.json 文件里保存了这三本书的数据："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:B,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后试下查询单本书的信息："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"再试下修改："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:k,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"修改成功。"}),"\n",(0,t.jsx)(n.p,{children:"再测试下删除："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"也没问题。"}),"\n",(0,t.jsx)(n.p,{children:"这样，图书的增删改查就都完成了。"}),"\n",(0,t.jsx)(n.p,{children:"还有一个上传封面的接口："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install --save multer\nnpm install -save-dev @types/multer\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后在 BookController 添加一个 /book/upload 接口："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Post('upload')\n@UseInterceptors(FileInterceptor('file', {\n    dest: 'uploads',\n    storage: storage,\n    limits: {\n      fileSize: 1024 * 1024 * 3\n    },\n    fileFilter(req, file, callback) {\n      const extname = path.extname(file.originalname);        \n      if(['.png', '.jpg', '.gif'].includes(extname)) {\n        callback(null, true);\n      } else {\n        callback(new BadRequestException('只能上传图片'), false);\n      }\n    }\n}))\nuploadFile(@UploadedFile() file: Express.Multer.File) {\n    console.log('file', file);\n    return file.path;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"通过 FileInterceptor 的拦截器来解析请求里的 file 字段，第二个参数是一些 options："}),"\n",(0,t.jsx)(n.p,{children:"dest 是保存文件的目录，limits 是文件大小限制，限制为 3 M，fileFilter 限制扩展名只能是图片。"}),"\n",(0,t.jsx)(n.p,{children:"然后创建自定义 storage。"}),"\n",(0,t.jsx)(n.p,{children:"my-file-storage.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import * as multer from \"multer\";\nimport * as fs from 'fs';\n\nconst storage = multer.diskStorage({\n    destination: function (req, file, cb) {\n        try {\n            fs.mkdirSync('uploads');\n        }catch(e) {}\n\n        cb(null, 'uploads')\n    },\n    filename: function (req, file, cb) {\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9) + '-' + file.originalname\n        cb(null, uniqueSuffix)\n    }\n});\n\nexport { storage };\n"})}),"\n",(0,t.jsxs)(n.p,{children:["这里指定了保存的目录为 uploads，文件名为",(0,t.jsx)(n.code,{children:"时间戳-随机数-文件名"}),"的格式。"]}),"\n",(0,t.jsx)(n.p,{children:"在 postman 里测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"切换 body 格式为 form-data，添加一个 file 字段，然后选择一个文件："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，服务端接收到了文件，并且返回了文件路径。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"当你传的不是图片的时候，会返回 400 响应："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"此外，还要把 uploads 目录设置为静态文件目录："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"app.useStaticAssets(join(__dirname, '../uploads'), {prefix: '/uploads'});\n"})}),"\n",(0,t.jsx)(n.p,{children:"就能直接访问了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:r,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样，上传接口就完成了。"}),"\n",(0,t.jsx)(n.p,{children:"然后上传完文件，把返回的文件路径作为 cover 字段的值传上去就可以了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["案例代码上传了",(0,t.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/book-management-system-backend/",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"这节我们实现了图书模块的接口，包括列表、详情、创建、更新、删除、上传文件。"}),"\n",(0,t.jsx)(n.p,{children:"创建了用到的 dto，并且添加了 class-validator 的校验规则的装饰器。"}),"\n",(0,t.jsx)(n.p,{children:"用 multer 实现了文件上传，并做了自定义文件存储路径。"}),"\n",(0,t.jsx)(n.p,{children:"这样，我们后端的接口就都写完了。"})]})}function A(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(N,{...e})}):N(e)}let C=A;A.__RSPRESS_PAGE_META={},A.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F29.%20%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%9A%E5%9B%BE%E4%B9%A6%E6%A8%A1%E5%9D%97%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"29. 图书管理系统：图书模块后端开发",headingTitle:"29. 图书管理系统：图书模块后端开发",frontmatter:{}}}}]);