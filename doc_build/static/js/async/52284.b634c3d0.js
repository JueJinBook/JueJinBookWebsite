"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["52284"],{644789:function(n,e,i){i.r(e),i.d(e,{default:()=>D});var s=i(552676),r=i(740453);let c=i.p+"static/image/2ca15f9db7ffa9ec9c1a7da2c9c516af.d6c7c6d7.gif",a=i.p+"static/image/28fe777e06db1a572f84c2b18e5726c5.8ea907e9.webp",t=i.p+"static/image/63a50db6a350c068ef8ecafdebcfe480.d1f42f7d.webp",d=i.p+"static/image/358c154948d75148729b6bd5477b26e6.64fcc62a.webp",p=i.p+"static/image/c39700ae7c97aa19dfccaf9e8b144d83.14b2a4e6.gif",l=i.p+"static/image/73dd73226d92cbcd26b2ce171f2c7e1d.3484c162.gif",x=i.p+"static/image/a22fc8336face3128b6e9333021e07ca.19bf81f1.webp",h=i.p+"static/image/5f526eef1c468ee0df35606ec9f1243f.d36c3bb3.gif",g=i.p+"static/image/d87bc66ca2ba5b8377d0be665459bb4d.dd2b5693.gif",o=i.p+"static/image/90707d16b1688902f75a2635760dafcb.b69b0928.gif",j=i.p+"static/image/9138cd55103c76f0e4b0fd5292df38d6.61b538b9.gif",f=i.p+"static/image/922eaf1d77a28f3e297f15d346e83e3c.a7f50880.gif",m=i.p+"static/image/f7bb4f8e87b3104e8ff64590defcf911.e5a2b7e6.gif",u=i.p+"static/image/168e3889ed90e8b7675052d67618902a.79760159.gif",b=i.p+"static/image/60fee82b5eb6551d888463a8d7a96913.7044ef5a.webp",S=i.p+"static/image/fc26360e1054497f9c761a2776de05b7.bffe43af.gif",A=i.p+"static/image/e7604025b008659ba3ee77afa7760c20.5d1572d4.gif",y=i.p+"static/image/658579d243f7b474a3dc6730fb4eb0ec.013661fb.gif",v=i.p+"static/image/5cdfd1d60cb7b42599885b6c1b1f63d1.bdceb2bb.gif",w=i.p+"static/image/05fb0dbf284c97d6fa0ce6f5c8aaf864.1826c96e.gif",T=i.p+"static/image/d79514b62bd57eda9e336de3e93c119e.4fa30885.gif",E=i.p+"static/image/6099463ed75a73a6c17a64797146d738.1bb8da6a.gif",_=i.p+"static/image/34db7fcc351a4853135f2e7865a2fb9d.e47139c9.webp",k=i.p+"static/image/c33e93bc1bdad59f07f8a030e6588013.baac15ae.gif",H=i.p+"static/image/c60b7287d085d341eb9737fb1c47f0f8.99261229.webp",R=i.p+"static/image/f79ccc54e1e2d2a36f0e81deb86fc4fd.4e92ce87.gif",C=i.p+"static/image/ab18e913a46ec8e2dbf8c5960c025c31.4e7b030c.webp";function N(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",ul:"ul",li:"li",h2:"h2"},(0,r.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"第23章用react-spring做弹簧动画",children:["第23章—用react-spring做弹簧动画",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第23章用react-spring做弹簧动画",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"\uFEFF网页中经常会见到一些动画，动画可以让产品的交互体验更好。"}),"\n",(0,s.jsx)(e.p,{children:"一般的动画我们会用 css 的 animation 和 transition 来做，但当涉及到多个元素的时候，事情就会变得复杂。"}),"\n",(0,s.jsx)(e.p,{children:"比如下面这个动画："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"横线和竖线依次做动画，最后是笑脸的动画。"}),"\n",(0,s.jsx)(e.p,{children:"这么多个元素的动画如何来安排顺序呢？"}),"\n",(0,s.jsx)(e.p,{children:"如果用 css 动画来做，那要依次设置不同的动画开始时间，就很麻烦。"}),"\n",(0,s.jsx)(e.p,{children:"这种就需要用到专门的动画库了，比如 react-spring。"}),"\n",(0,s.jsx)(e.p,{children:"我们创建个 react 项目："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"npx create-react-app --template=typescript react-spring-test\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"安装 react-spring 的包："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"npm install --save @react-spring/web\n"})}),"\n",(0,s.jsx)(e.p,{children:"然后改下 App.tsx"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { useSpringValue, animated, useSpring } from '@react-spring/web'\nimport { useEffect } from 'react';\nimport './App.css';\n\nexport default function App() {\n  const width = useSpringValue(0, {\n    config: {\n      duration: 2000\n    }\n  });\n\n  useEffect(() => {\n    width.start(300);\n  }, []);\n\n  return <animated.div className=\"box\" style={{ width }}></animated.div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"还有 App.css"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-css",children:".box {\n  background: blue;\n  height: 100px;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"跑一下开发服务："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"npm run start\n"})}),"\n",(0,s.jsx)(e.p,{children:"可以看到，box 会在 2s 内完成 width 从 0 到 300 的动画："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"此外，你还可以不定义 duration，而是定义摩擦力等参数："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:H,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const width = useSpringValue(0, {\n    config: {\n      // duration: 2000\n      mass: 2,\n      friction: 10,\n      tension: 200\n    }\n});\n"})}),"\n",(0,s.jsx)(e.p,{children:"先看效果："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"是不是像弹簧一样？"}),"\n",(0,s.jsx)(e.p,{children:"弹簧的英文是 spring，这也是为什么这个库叫做 react-spring"}),"\n",(0,s.jsx)(e.p,{children:"以及为什么 logo 是这样的："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"它主打的就是这种弹簧动画。"}),"\n",(0,s.jsx)(e.p,{children:"当然，你不想做这种动画，直接指定 duration 也行，那就是常规的动画了。"}),"\n",(0,s.jsx)(e.p,{children:"回过头来看下这三个参数："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"mass： 质量（也就是重量），质量越大，回弹惯性越大，回弹的距离和次数越多"}),"\n",(0,s.jsx)(e.li,{children:"tension: 张力，弹簧松紧程度，弹簧越紧，回弹速度越快"}),"\n",(0,s.jsx)(e.li,{children:"friction：摩擦力，增加点阻力可以抵消质量和张力的效果"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"这些参数设置不同的值，弹簧动画的效果就不一样："}),"\n",(0,s.jsx)(e.p,{children:"tension: 400"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"tension: 100"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"可以看到，确实 tension（弹簧张力）越大，弹簧越紧，回弹速度越快。"}),"\n",(0,s.jsx)(e.p,{children:"mass: 2"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"mass: 20"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"可以看到，mass（质量越大），惯性越大，回弹距离和次数越大。"}),"\n",(0,s.jsx)(e.p,{children:"friction: 10"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"friction: 80"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"可以看到，firction（摩擦力）越大，tension 和 mass 的效果抵消的越多。"}),"\n",(0,s.jsx)(e.p,{children:"这就是弹簧动画的 3 个参数。"}),"\n",(0,s.jsx)(e.p,{children:"回过头来，我们继续看其它的 api。"}),"\n",(0,s.jsx)(e.p,{children:"如果有多个 style 都要变化呢？"}),"\n",(0,s.jsx)(e.p,{children:"这时候就不要用 useSpringValue 了，而是用 useSpring："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { useSpring, animated } from '@react-spring/web'\nimport './App.css';\n\nexport default function App() {\n  const styles = useSpring({\n    from: {\n      width: 0,\n      height: 0\n    },\n    to: {\n      width: 200,\n      height: 200\n    },\n    config: {\n      duration: 2000\n    }\n  });\n\n  return <animated.div className=\"box\" style={{ ...styles }}></animated.div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"用 useSpring 指定 from 和 to，并指定 duration。"}),"\n",(0,s.jsx)(e.p,{children:"动画效果如下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"当然，也可以不用 duration 的方式："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"而是用弹簧动画的效果："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"useSpring 还有另外一种传入函数的重载，这种重载会返回 [styles, api] 两个参数："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { useSpring, animated } from '@react-spring/web'\nimport './App.css';\n\nexport default function App() {\n  const [styles, api] = useSpring(() => {\n    return {\n      from: {\n        width: 100,\n        height: 100\n      },\n      config: {\n        // duration: 2000\n        mass: 2,\n        friction: 10,\n        tension: 400\n      }\n    }\n  });\n\n  function clickHandler() {\n    api.start({\n      width: 200,\n      height: 200\n    });\n  }\n\n  return <animated.div className=\"box\" style={{ ...styles }} onClick={clickHandler}></animated.div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"可以用返回的 api 来控制动画的开始。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"那如果有多个元素都要同时做动画呢？"}),"\n",(0,s.jsx)(e.p,{children:"这时候就用 useSprings："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { useSprings, animated } from '@react-spring/web'\nimport './App.css';\n\nexport default function App() {\n  const [springs, api] = useSprings(\n    3,\n    () => ({\n      from: { width: 0 },\n      to: { width: 300 },\n      config: {\n        duration: 1000\n      }\n    })\n  )\n\n  return <div>\n    {springs.map(styles => (\n      <animated.div style={styles} className='box'></animated.div>\n    ))}\n  </div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"在 css 里加一下 margin："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-css",children:".box {\n  background: blue;\n  height: 100px;\n  margin: 10px;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"渲染出来是这样的："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"当你指定了 to，那会立刻执行动画，或者不指定 to，用 api.start 来开始动画："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { useSprings, animated } from '@react-spring/web'\nimport './App.css';\nimport { useEffect } from 'react';\n\nexport default function App() {\n  const [springs, api] = useSprings(\n    3,\n    () => ({\n      from: { width: 0 },\n      config: {\n        duration: 1000\n      }\n    })\n  )\n\n  useEffect(() => {\n    api.start({ width: 300 });\n  }, [])\n\n  return <div>\n    {springs.map(styles => (\n      <animated.div style={styles} className='box'></animated.div>\n    ))}\n  </div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"那如果多个元素的动画是依次进行的呢？"}),"\n",(0,s.jsx)(e.p,{children:"这时候要用 useTrail"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { animated, useTrail } from '@react-spring/web'\nimport './App.css';\nimport { useEffect } from 'react';\n\nexport default function App() {\n  const [springs, api] = useTrail(\n    3,\n    () => ({\n      from: { width: 0 },\n      config: {\n        duration: 1000\n      }\n    })\n  )\n\n  useEffect(() => {\n    api.start({ width: 300 });\n  }, [])\n\n  return <div>\n    {springs.map(styles => (\n      <animated.div style={styles} className='box'></animated.div>\n    ))}\n  </div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"用起来很简单，直接把 useSprings 换成 useTrail 就行："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"可以看到，动画会依次执行，而不是同时。"}),"\n",(0,s.jsx)(e.p,{children:"接下来我们实现下文章开头的这个动画效果："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"横线和竖线的动画就是用 useTrail 实现的。"}),"\n",(0,s.jsx)(e.p,{children:"而中间的笑脸使用 useSprings 同时做动画。"}),"\n",(0,s.jsx)(e.p,{children:"那多个动画如何安排顺序的呢？"}),"\n",(0,s.jsx)(e.p,{children:"用 useChain："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { animated, useChain, useSpring, useSpringRef, useSprings, useTrail } from '@react-spring/web'\nimport './App.css';\n\nexport default function App() {\n\n  const api1 = useSpringRef()\n  \n  const [springs] = useTrail(\n    3,\n    () => ({\n      ref: api1,\n      from: { width: 0 },\n      to: { width: 300 },\n      config: {\n        duration: 1000\n      }\n    }),\n    []\n  )\n\n  const api2 = useSpringRef()\n  \n  const [springs2] = useSprings(\n    3,\n    () => ({\n      ref: api2,\n      from: { height: 100 },\n      to: { height: 50},\n      config: {\n        duration: 1000\n      }\n    }),\n    []\n  )\n\n  useChain([api1, api2], [0, 1], 500)\n\n  return <div>\n    {springs.map((styles1, index) => (\n      <animated.div style={{...styles1, ...springs2[index]}} className='box'></animated.div>\n    ))}\n  </div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"我们用 useSpringRef 拿到两个动画的 api，然后用 useChain 来安排两个动画的顺序。"}),"\n",(0,s.jsx)(e.p,{children:"useChain 的第二个参数指定了 0 和 1，第三个参数指定了 500，那就是第一个动画在 0s 开始，第二个动画在 500ms 开始。"}),"\n",(0,s.jsx)(e.p,{children:"如果第三个参数指定了 3000，那就是第一个动画在 0s 开始，第二个动画在 3s 开始。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"可以看到，确实第一个动画先执行，然后 0.5s 后第二个动画执行。"}),"\n",(0,s.jsx)(e.p,{children:"这样，就可以实现那个笑脸动画了。"}),"\n",(0,s.jsx)(e.p,{children:"我们来写一下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { useTrail, useChain, useSprings, animated, useSpringRef } from '@react-spring/web'\nimport './styles.css'\nimport { useEffect } from 'react'\n\nconst STROKE_WIDTH = 0.5\n\nconst MAX_WIDTH = 150\nconst MAX_HEIGHT = 100\n\nexport default function App() {\n\n  const gridApi = useSpringRef()\n\n  const gridSprings = useTrail(16, {\n    ref: gridApi,\n    from: {\n      x2: 0,\n      y2: 0,\n    },\n    to: {\n      x2: MAX_WIDTH,\n      y2: MAX_HEIGHT,\n    },\n  })\n\n  useEffect(() => {\n    gridApi.start();\n  });\n\n  return (\n      <div className='container'>\n        <svg viewBox={`0 0 ${MAX_WIDTH} ${MAX_HEIGHT}`}>\n          <g>\n            {gridSprings.map(({ x2 }, index) => (\n              <animated.line\n                x1={0}\n                y1={index * 10}\n                x2={x2}\n                y2={index * 10}\n                key={index}\n                strokeWidth={STROKE_WIDTH}\n                stroke=\"currentColor\"\n              />\n            ))}\n            {gridSprings.map(({ y2 }, index) => (\n              <animated.line\n                x1={index * 10}\n                y1={0}\n                x2={index * 10}\n                y2={y2}\n                key={index}\n                strokeWidth={STROKE_WIDTH}\n                stroke=\"currentColor\"\n              />\n            ))}\n          </g>\n        </svg>\n      </div>\n  )\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"当用 useSpringRef 拿到动画引用时，需要手动调用 start 来开始动画。"}),"\n",(0,s.jsx)(e.p,{children:"用 useTrail 来做从 0 到指定 width、height 的动画。"}),"\n",(0,s.jsx)(e.p,{children:"然后分别遍历它，拿到 x、y 的值，来绘制横线和竖线。"}),"\n",(0,s.jsx)(e.p,{children:"用 svg 的 line 来画线，设置 x1、y1、x2、y2 就是一条线。"}),"\n",(0,s.jsx)(e.p,{children:"效果是这样的："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"当你注释掉横线或者竖线，会更明显一点："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后再做笑脸的动画，这个就是用 rect 在不同画几个方块，做一个 scale 从 0 到 1 的动画："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"动画用弹簧动画的方式，指定 mass（质量） 和 tension（张力），并且每个 box 都有不同的 delay："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"并用 useChain 来把两个动画串联执行。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { useTrail, useChain, useSprings, animated, useSpringRef } from '@react-spring/web'\nimport './styles.css'\n\nconst COORDS = [\n  [50, 30],\n  [90, 30],\n  [50, 50],\n  [60, 60],\n  [70, 60],\n  [80, 60],\n  [90, 50],\n]\n\nconst STROKE_WIDTH = 0.5\n\nconst MAX_WIDTH = 150\nconst MAX_HEIGHT = 100\n\nexport default function App() {\n\n  const gridApi = useSpringRef()\n\n  const gridSprings = useTrail(16, {\n    ref: gridApi,\n    from: {\n      x2: 0,\n      y2: 0,\n    },\n    to: {\n      x2: MAX_WIDTH,\n      y2: MAX_HEIGHT,\n    },\n  })\n\n  const boxApi = useSpringRef()\n\n  const [boxSprings] = useSprings(7, i => ({\n    ref: boxApi,\n    from: {\n      scale: 0,\n    },\n    to: {\n      scale: 1,\n    },\n    delay: i * 200,\n    config: {\n      mass: 2,\n      tension: 220,\n    },\n  }))\n\n  useChain([gridApi, boxApi], [0, 1], 1500)\n\n  return (\n      <div className='container'>\n        <svg viewBox={`0 0 ${MAX_WIDTH} ${MAX_HEIGHT}`}>\n          <g>\n            {gridSprings.map(({ x2 }, index) => (\n              <animated.line\n                x1={0}\n                y1={index * 10}\n                x2={x2}\n                y2={index * 10}\n                key={index}\n                strokeWidth={STROKE_WIDTH}\n                stroke=\"currentColor\"\n              />\n            ))}\n            {gridSprings.map(({ y2 }, index) => (\n              <animated.line\n                x1={index * 10}\n                y1={0}\n                x2={index * 10}\n                y2={y2}\n                key={index}\n                strokeWidth={STROKE_WIDTH}\n                stroke=\"currentColor\"\n              />\n            ))}\n          </g>\n          {boxSprings.map(({ scale }, index) => (\n            <animated.rect\n              key={index}\n              width={10}\n              height={10}\n              fill=\"currentColor\"\n              style={{\n                transform: `translate(${COORDS[index][0]}px, ${COORDS[index][1]}px)`,\n                transformOrigin: `5px 5px`,\n                scale,\n              }}\n            />\n          ))}\n        </svg>\n      </div>\n  )\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"这样，整个动画就完成了："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"这个动画，我们综合运用了 useSprings、useTrail、useSpringRef、useChain 这些 api。"}),"\n",(0,s.jsx)(e.p,{children:"把这个动画写一遍，react-spring 就算是掌握的可以了。"}),"\n",(0,s.jsxs)(e.p,{children:["案例代码上传了",(0,s.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/react-spring-test",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,s.jsxs)(e.p,{children:["其实这是 react-spring 的 ",(0,s.jsx)(e.a,{href:"https://www.react-spring.dev/examples",target:"_blank",rel:"noopener noreferrer",children:"官方案例"})," 里的一个，基础 api 会了之后，大家可以把这些案例都过一遍。"]}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:["总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们学了用 react-spring 来做动画。"}),"\n",(0,s.jsx)(e.p,{children:"react-spring 主打的是弹簧动画，就是类似弹簧那种回弹效果。"}),"\n",(0,s.jsx)(e.p,{children:"只要指定 mass（质量）、tension（张力）、friction（摩擦力）就可以了。"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"mass 质量：决定回弹惯性，mass 越大，回弹的距离和次数越多。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"tension 张力：弹簧松紧程度，弹簧越紧，回弹速度越快。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"friction：摩擦力： 可以抵消质量和张力的效果"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"弹簧动画不需要指定时间。"}),"\n",(0,s.jsx)(e.p,{children:"当然，你也可以指定 duration 来做那种普通动画。"}),"\n",(0,s.jsx)(e.p,{children:"react-spring 有不少 api，分别用于单个、多个元素的动画："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"useSpringValue：指定单个属性的变化。"}),"\n",(0,s.jsx)(e.li,{children:"useSpring：指定多个属性的变化"}),"\n",(0,s.jsx)(e.li,{children:"useSprings：指定多个元素的多个属性的变化，动画并行执行"}),"\n",(0,s.jsx)(e.li,{children:"useTrial：指定多个元素的多个属性的变化，动画依次执行"}),"\n",(0,s.jsx)(e.li,{children:"useSpringRef：用来拿到每个动画的 ref，可以用来控制动画的开始、暂停等"}),"\n",(0,s.jsx)(e.li,{children:"useChain：串行执行多个动画，每个动画可以指定不同的开始时间"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"掌握了这些，就足够基于 react-spring 做动画了。"})]})}function I(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(N,{...n})}):N(n)}let D=I;I.__RSPRESS_PAGE_META={},I.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC23%E7%AB%A0%E2%80%94%E7%94%A8react-spring%E5%81%9A%E5%BC%B9%E7%B0%A7%E5%8A%A8%E7%94%BB.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第23章—用react-spring做弹簧动画",headingTitle:"第23章—用react-spring做弹簧动画",frontmatter:{}}}}]);