"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["60659"],{263963:function(e,n,r){r.r(n),r.d(n,{default:()=>V});var c=r(552676),d=r(740453);let a=r.p+"static/image/60209244c00cd45bf2467108f64fae67.ce8144ce.webp",s=r.p+"static/image/8b4a30d02f5d577eecff2070ac992c02.f1171ae1.webp",i=r.p+"static/image/3b2f4d1b4a38f0321e1384a3998a9915.51d2a3a5.webp",l=r.p+"static/image/42a70ba0695496499a46be30b1ae1f30.f05326d8.webp",h=r.p+"static/image/7bc825a82ad5a433570d2eca3f103bfe.9a28da6e.webp",o=r.p+"static/image/2650ec2e04a565f8da8ba89ce251b3eb.95516277.webp",t=r.p+"static/image/5a33b2f580266646ec335d75dca1068b.778f26e3.webp",p=r.p+"static/image/ca12d4064b9745e2c1121a180b8261e4.f1171ae1.webp",x=r.p+"static/image/d1a7837575d55b1d6873fc313f1b6f3e.855e9379.webp",j=r.p+"static/image/3146605f9b3d7efa6aa47f1a682ac6dc.8aa89e43.webp",b=r.p+"static/image/38a4acce0581300c7a3f658b905ce398.c2653f99.webp",w=r.p+"static/image/fb1562aec02b83dbdac01d959b17ead7.880c254d.webp",f=r.p+"static/image/a41571210156c64bdd45d10dacda2700.ab7ba94a.webp",g=r.p+"static/image/f940a462e892546095d84ecbc2e28610.9603f6e6.webp",m=r.p+"static/image/4cfaa390af6b4e457dac8acdf2d6b93d.62881d4f.webp",u=r.p+"static/image/fd769fee113e81a51db3a8edd1fbcb6b.abcbf024.webp",k=r.p+"static/image/3e64373cd22e809bca7570cf0df5d1f4.41754f9e.webp",S=r.p+"static/image/ede68ab0bc05fa9c5b95c20bb0dd9c4b.9ad5a56c.webp",N=r.p+"static/image/0f8d0ccd63679f7407a10d6f23f4f2a5.48722237.webp",C=r.p+"static/image/8bd491d04c471f5a055d55b72aab6d34.063d6454.webp",_=r.p+"static/image/f8a41911fd81d031608711b1d418d06a.41a9ce0d.webp",E=r.p+"static/image/dc09af7abfa7ca578b4d2b90b0b28f51.b41cb97e.webp",v=r.p+"static/image/4236dddd29fd485864e347b0649eb59c.746a6417.webp",y=r.p+"static/image/43aaf3941af951755b7af576c936652c.f9b657ca.webp",W=r.p+"static/image/2afcef06c6a311bb8325a5cdbedf3581.2135d6b2.webp",q=r.p+"static/image/282541c808e62c6ff294dc4bdb0b8bfe.e9c42d7b.webp",L=r.p+"static/image/85a2d6849bd9b0663ea2868ad3634e90.8a0588bd.webp",A=r.p+"static/image/ac723660ad07c8b8dea13d2ed7153479.378d91a1.webp",D=r.p+"static/image/b2a47b336843bfcbb76680d2ceff85db.427f82bc.webp",T=r.p+"static/image/b416f8f226f4a8203795246bd164551b.057b124f.webp",M=r.p+"static/image/f92ca87f409a8f70d64347d972e2063f.bf0811ed.webp",R=r.p+"static/image/c7a85c4ba8da9a83da2e1277b6bb5400.00db53ab.webp",J=r.p+"static/image/4de5fb7845ff9d9f9555831a48a85d6c.0657386e.webp",B=r.p+"static/image/3934017ffc48cbddefee782c821f1feb.6fe81478.webp",K=r.p+"static/image/dda381455f435bdc40e14c365e9522ce.42cf6ffc.webp",Y=r.p+"static/image/f911950b686da8c405e43564504759ec.0dcade4d.webp",H=r.p+"static/image/0e5c28c9dd45ed34f4f9dba973826500.74530a43.webp";function Q(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",img:"img",h2:"h2",pre:"pre",blockquote:"blockquote",h3:"h3",strong:"strong",ul:"ul",li:"li"},(0,d.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"第23章经典排版技术使用text-wrapbalance实现文本平衡换行",children:["第23章—经典排版技术：使用text-wrap：balance实现文本平衡换行",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第23章经典排版技术使用text-wrapbalance实现文本平衡换行",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"\uFEFFWeb 开发者总是希望自己开发的 Web 应用或页面能在所有设备上正确显示。然而，尽管你已经很努力了，但仍然可能面临破碎的布局。当某些单词太长无法适应其容器时，就会出将 Web 布局打破。当你处理用户生成的内容，例如帖子的评论内容，可能会发生内容溢出，这些内容你无法控制。因此，你需要应用样式来防止内容溢出其容器。"}),"\n",(0,c.jsxs)(n.p,{children:["内容溢出是前端开发人员经常遇到的问题。在 Web 上，当你的内容不能完全适应其包含元素（容器）时，就会发出溢出，并且会溢出到容器之外。在 CSS 中，你可能主要使用 ",(0,c.jsx)(n.code,{children:"overflow"})," 、",(0,c.jsx)(n.code,{children:"word-wrap"})," 、",(0,c.jsx)(n.code,{children:"overflow-wrap"})," 和 ",(0,c.jsx)(n.code,{children:"word-break"})," 等属性来管理内容溢出。虽然这些方法可以很好的帮助你管理内容溢出，但它们都无法使换行的文本平衡排列，比如使两行标题在每行字数上保持一致。"]}),"\n",(0,c.jsxs)(n.p,{children:["庆幸的是，CSS 工作组在 ",(0,c.jsxs)(n.a,{href:"https://www.w3.org/TR/css-text-4/#text-wrapping",target:"_blank",rel:"noopener noreferrer",children:["CSS 文本模块 Level 4 （CSS Text Module Level 4）中引入了一个名为 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 的属性"]}),"，允许你以更细粒度的方式控制文本换行。"]}),"\n",(0,c.jsxs)(n.p,{children:["基本上，",(0,c.jsx)(n.code,{children:"text-wrap"})," 属性将使浏览器以看起来更平衡的方式换行文本，以获得更好的可读性并防止排版孤行。更具体地说，当 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 属性的值为 ",(0,c.jsx)(n.code,{children:"balance"})," 时，浏览器将尝试以一种方式包装文本，使元素的最后一行与第一行一样长。正如可以预期的那样，这对于使标题看起来更好非常有用。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:H,alt:"img"})}),"\n",(0,c.jsx)(n.p,{children:"接下来，我们将一起来学习如何利用这一行 CSS 大幅改善文本布局。"}),"\n",(0,c.jsxs)(n.h2,{id:"换行所存在的缺陷",children:["换行所存在的缺陷",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#换行所存在的缺陷",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"Web 设计师在处理长内容时，为了使文本换行在排版上得到一定的平衡，时常会手动调整每行文本显示的数量。比如在 Figma 设计软件上，设计师故意将最后一个词移到上一行，或者将其调整为两行。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:Y,alt:"img"})}),"\n",(0,c.jsx)(n.p,{children:"上图中，第一个设计效果中，突出显示的单词是位于一行中的单个单词。从视觉的角度来看，这看起来很奇怪，它打破了原本的视觉设计效果。此时，Web 设计师为了避免这种不一致的问题，可能会手动调整将最后一个单词移入到第一行。事实上，上图中第二种效果也可能并非是最佳的，它在视觉上要比第三种设计效果显得更局促和拥挤。它会让你感觉 UI 效果更平衡一些。"}),"\n",(0,c.jsxs)(n.p,{children:["Web 设计师在像 Figma 的软件中可以很轻易改变平衡的方式，但对于 Web 开发者而言，在没有 ",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 之前是无法改变文本排版的平衡方式。当然，你可以选择改变 HTML 的结构来实现文本平衡的排版，比如通过使用 ",(0,c.jsx)(n.code,{children:"<br />"})," 手动完成，或者用 ",(0,c.jsx)(n.code,{children:"<span>"})," （类似这样的 HTML 标签）分隔内容的另一部分，或者通过使用 ",(0,c.jsx)(n.code,{children:"<wbr>"})," 或 ",(0,c.jsx)(n.code,{children:"\xad"})," 辅助文本布局，以更智能地决定断行和断词的位置："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:"<h1>You’ll want to savor every <br/> last drop in our coffe.</h1>\n​\n\x3c!-- 或者 --\x3e\n<h1>You’ll want to savor every <span>last drop in our coffe.</span></h1>\n​\n\x3c!-- 或者 --\x3e\n​\n<h1>You’ll want to savor every <wbr>last drop in our coffe.</h1>\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:K,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/KKrNJam",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKrNJam"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"作为开发者，你无法知道标题或段落的最终大小、字体大小甚至语言。所有需要有效、美观的文字换行处理的变量都在浏览器中。这就是为什么我们会看到像下图中的标题换行："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:B,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["CSS 的 ",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," ，可以要求浏览器为文本找到最佳平衡行包装方案。浏览器确实知道所有的因素，如字体大小、语言和分配的区域。结果看起来像这样："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".balanced {\n \xa0 \xa0max-inline-size: 30ch;\n \xa0 \xa0text-wrap: balance;\n}\n​\n.unbalanced {\n \xa0 \xa0max-inline-size: 30ch;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:J,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/ExONrmp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ExONrmp"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"你的眼睛应该更喜欢平衡的文本块。它更容易吸引注意力，整体上更容易阅读。"}),"\n",(0,c.jsxs)(n.p,{children:["另外，你现在已经知道了，在 CSS 中可以使用最新的特性 ",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 使文本排版在换行时能更趋于平衡。但在深入介绍 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 之间，我还是想花点篇幅向大家介绍一些其他的换行方式。"]}),"\n",(0,c.jsxs)(n.h2,{id:"css-中的换行姿势",children:["CSS 中的换行姿势",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-中的换行姿势",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["让我们来谈谈我们可以控制文本在 Web 上换行（或不换行）的各种方法。 CSS 为我们提供了很多用于控制文本换行的属性，比如 ",(0,c.jsx)(n.code,{children:"word-wrap"}),"、",(0,c.jsx)(n.code,{children:"overflow-wrap"})," 和 ",(0,c.jsx)(n.code,{children:"word-break"})," 等，以确保我们的文本流动方式符合我们的意愿，但我们还将介绍一些使用 HTML 和特殊字符的技巧。"]}),"\n",(0,c.jsx)(n.p,{children:"通常，文本在一个容器中都会在“软换行位置”处换行，指的是你希望文本自然换行的位置，例如单词之间或连字符后面。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:R,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLQVZzP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLQVZzP"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"但有时，你可能会发现长字符的文本没有软换行的位置，例如非常长的单词或 URL。这可能会引起各种布局问题。例如，文本可能会溢出其容器，或者它可能会强制容器变得过宽并使其他元素位置不正确。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:M,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/eYQBxer",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYQBxer"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["Web 开发者在开发 Web 应用或页面时，预期文本未换行的问题是良好的",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328?utm_source=profile_book",target:"_blank",rel:"noopener noreferrer",children:"防御性编程"}),"。幸运的是，CSS 为我们提供了一些特性，允许你能更好的处理文本换行的问题，避免 ",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7161370789680250917?utm_source=profile_book",target:"_blank",rel:"noopener noreferrer",children:"Web 布局"}),"的破碎。"]}),"\n",(0,c.jsxs)(n.h3,{id:"使溢出的文本换行",children:["使溢出的文本换行",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使溢出的文本换行",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在元素上设置 ",(0,c.jsx)(n.code,{children:"overflow-wrap:break-word"})," 将允许文本在必要时中断单词。它将首先尝试通过将单词移到下一行来保持单词未经过分割，但如果仍然没有足够的空间，它会强制把单词中断。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"p {\n \xa0 \xa0overflow-wrap: break-word;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:T,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/ZEmBwvx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZEmBwvx"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["还有 ",(0,c.jsx)(n.code,{children:"overflow-wrap: anywhere"}),"，以相同的方式中断单词。不同之处在于它如何影响其所在元素的 ",(0,c.jsx)(n.code,{children:"min-content"})," 大小计算。当宽度设置为 ",(0,c.jsx)(n.code,{children:"min-content"})," 时，很容易看到。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".break-word {\n \xa0 \xa0width: min-content;\n \xa0 \xa0overflow-wrap: break-word;\n}\n​\n.anywhere {\n \xa0 \xa0width: min-content;\n \xa0 \xa0overflow-wrap: anywhere;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:D,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/PoxbVRN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PoxbVRN"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["具有 ",(0,c.jsx)(n.code,{children:"overflow-wrap: break-word"})," 的 ",(0,c.jsx)(n.code,{children:".break-word"})," 元素会计算 ",(0,c.jsx)(n.code,{children:"min-content"})," 的宽度，就像没有单词被分割一样，因此其宽度变成了最长单词的宽度。而 ",(0,c.jsx)(n.code,{children:"overflow-wrap: anywhere"})," 的 ",(0,c.jsx)(n.code,{children:".anywhere"})," 元素会计算它可以创建的所有断点的 ",(0,c.jsx)(n.code,{children:"min-content"}),"。由于断点可以出现在任何位置，因此 ",(0,c.jsx)(n.code,{children:"min-content"})," 最终是单个字符的宽度。"]}),"\n",(0,c.jsxs)(n.p,{children:["请记住，只有在涉及 ",(0,c.jsx)(n.code,{children:"min-content"})," 时才会出现此行为。如果我们将宽度设置为某个固定的值，我们会看到两者会产生相同的分词结果。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".break-word {\n \xa0 \xa0max-inline-size: 76ch;\n \xa0 \xa0overflow-wrap: break-word;\n}\n​\n.anywhere {\n \xa0 \xa0max-inline-size: 76ch;\n \xa0 \xa0overflow-wrap: anywhere;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:A,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/MWzbLVV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWzbLVV"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"无情地断词",children:["无情地断词",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#无情地断词",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["另一个分割单词的选项是 ",(0,c.jsx)(n.code,{children:"word-break: break-all"}),"。这个选项甚至不会尝试保持单词完整，它会立即将它们打破。看一下。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"p {\n \xa0 \xa0word-break: break-all;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:L,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/xxQRByV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxQRByV"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"word-break: break-all"})," 没有问题地打破单词，但还是会谨慎处理标点符号。例如，它会避免以句子末尾的句点开始一行。如果你想完全无情地分割单词，即使有标点符号，可以使用 ",(0,c.jsx)(n.code,{children:"line-break: anywhere"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".word-break {\n \xa0 \xa0word-break: break-all;\n}\n​\n.line-break {\n \xa0 \xa0line-break: anywhere;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:q,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/WNYomYY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNYomYY"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["请注意，",(0,c.jsx)(n.code,{children:"word-break: break-all"})," 将 ",(0,c.jsx)(n.code,{children:"k"})," 下移以避免以 ",(0,c.jsx)(n.code,{children:"."})," 开始第二行。与此同时，",(0,c.jsx)(n.code,{children:"line-break: anywhere"})," 不在乎。"]}),"\n",(0,c.jsxs)(n.h3,{id:"过多的标点符号",children:["过多的标点符号",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#过多的标点符号",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"让我们看看到目前为止我们涵盖的 CSS 属性如何处理过长的标点符号。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".overflow-wrap {\n \xa0 \xa0overflow-wrap: break-word;\n}\n​\n.word-break {\n \xa0 \xa0word-break: break-all;\n}\n​\n.line-break {\n \xa0line-break: anywhere;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:W,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/zYMobev",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYMobev"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"overflow-wrap: break-word"})," 和 ",(0,c.jsx)(n.code,{children:"line-break: anywhere"})," 能够保持内容不超出容器范围，但是 ",(0,c.jsx)(n.code,{children:"word-break: break-all"})," 再次对标点符号感到困惑，这一次导致文本溢出。"]}),"\n",(0,c.jsxs)(n.p,{children:["这是需要注意的问题。如果你绝对不希望文本溢出，请注意 ",(0,c.jsx)(n.code,{children:"word-break: break-all"})," 无法阻止标点符号的溢出。"]}),"\n",(0,c.jsxs)(n.h3,{id:"指定单词断行位置",children:["指定单词断行位置",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#指定单词断行位置",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["为了更好的控制，你可以手动插入 ",(0,c.jsx)(n.code,{children:"<wbr>"})," 到你的文本中控制单词的断行。你还可以使用和 HTML 实体符 ",(0,c.jsx)(n.code,{children:"&ZeroWidthSpace;"})," 。"]}),"\n",(0,c.jsx)(n.p,{children:"让我们通过将一条通常不会自动换行的长 URL 限制在段落之间的方式来看看它们的实际运用。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:"\x3c!-- normal --\x3e\n<p>https://subdomain.somewhere.co.uk</p>\n​\n\x3c!-- <wbr> --\x3e\n<p>https://subdomain<wbr>.somewhere<wbr>.co<wbr>.uk</p>\n​\n\x3c!-- &ZeroWidthSpace; --\x3e\n<p>https://subdomain&ZeroWidthSpace;.somewhere&ZeroWidthSpace;.co&ZeroWidthSpace;.uk</p>\n \xa0\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:y,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/oNQYVRW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNQYVRW"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"自动断字",children:["自动断字",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自动断字",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["你可以使用 ",(0,c.jsx)(n.code,{children:"hyphens: auto"})," 告诉浏览器在适当的位置分隔和连字单词。连字规则由语言决定，因此你需要告诉浏览器使用哪种语言。可以在 HTML 中的元素上直接指定 ",(0,c.jsx)(n.code,{children:"lang"})," 属性，也可以在 ",(0,c.jsx)(n.code,{children:"<html>"})," 上指定。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<p lang="en">This is just a bit of arbitrary text to show hyphenation in action.</p>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"p {\n \xa0  hyphens: auto;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzRpgor",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzRpgor"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"手动断字",children:["手动断字",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#手动断字",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["你还可以亲自动手并使用 HTML 实体符手动插入“软连字符”（",(0,c.jsx)(n.code,{children:"&shy;"}),"）。除非浏览器决定在此处换行（这时会出现连字符），否则它将不可见。请注意，在下面的示例中，我们使用两次，但只看到文本换行处出现了一次。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<p lang="en">Magic? Abraca&shy;dabra? Abraca&shy;dabra!</p>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:E,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/eYQBoEd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYQBoEd"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["必须将 ",(0,c.jsx)(n.code,{children:"hyphens"})," 设置为 ",(0,c.jsx)(n.code,{children:"auto"})," 或 ",(0,c.jsx)(n.code,{children:"manual"}),"，才能正确显示。方便的是，",(0,c.jsx)(n.code,{children:"hyphens"})," 的默认值是 ",(0,c.jsx)(n.code,{children:"manual"}),"，因此你可以不需要任何额外的 CSS 就可以正常使用（除非某些原因声明了 ",(0,c.jsx)(n.code,{children:"hyphens: none"}),"）。"]}),"\n",(0,c.jsxs)(n.h3,{id:"防止文本换行",children:["防止文本换行",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#防止文本换行",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"我们来切换话题。有时你可能不希望文本自由换行，以便更好地控制内容呈现方式。以下是几种方式可以帮助你防止文本换行。"}),"\n",(0,c.jsxs)(n.p,{children:["首先是 ",(0,c.jsx)(n.code,{children:"white-space: nowrap"}),"，以防止其文本自然换行。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"p {\n \xa0 \xa0white-space: nowrap;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:_,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 在址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/RwqKrwx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwqKrwx"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["还有 ",(0,c.jsx)(n.code,{children:"white-space: pre"}),"，它将按照你在 HTML 中键入的格式换行文本。不过要注意，它也会保留 HTML 中的空格，因此请注意你的格式。你还可以使用 ",(0,c.jsx)(n.code,{children:"<pre>"})," 元素来获得相同的结果（它默认使用 ",(0,c.jsx)(n.code,{children:"white-space: pre"}),"）。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:"\x3c!-- 这个 HTML 的格式会导致额外的空白空间! --\x3e\n<p>\n  What's worse, ignorance or apathy?\n  I don't know and I don't care.\n</p>\n​\n\x3c!-- 这个 HTML 的格式不会导致额外的空白空间  --\x3e\n<p>What's worse, ignorance or apathy?\nI don't know and I don't care.</p>\n​\n\x3c!-- 和上面的效果相同，但使用的是 <pre> 标签元素 --\x3e\n<pre>What's worse, ignorance or apathy?\nI don't know and I don't care.</pre>\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"p {\n \xa0  white-space: pre;\n}\n​\npre {\n \xa0  font-family: inherit;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:C,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/RwqKrPQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwqKrPQ"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"在哪里单词无法断开换行",children:["在哪里单词无法断开换行？",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在哪里单词无法断开换行",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["对于换行，你可以在具有 ",(0,c.jsx)(n.code,{children:"white-space: nowrap"})," 或 ",(0,c.jsx)(n.code,{children:"white-space: pre"})," 的元素中使用 ",(0,c.jsx)(n.code,{children:"<br>"})," 标签，文本将自动换行。"]}),"\n",(0,c.jsxs)(n.p,{children:["但是如果你在这样的元素中使用 ",(0,c.jsx)(n.code,{children:"<wbr>"})," 会发生什么呢？有点伪命题，因为浏览器对此没有统一的解决方案。Chrome 和 Edge 浏览器将识别 ",(0,c.jsx)(n.code,{children:"<wbr>"})," 并可能换行，而 Firefox 和 Safari则不会。"]}),"\n",(0,c.jsxs)(n.p,{children:["但是，当涉及到零宽度空格（",(0,c.jsx)(n.code,{children:"&ZeroWidthSpace;"}),"）时，浏览器是一致的。没有任何浏览器会在 ",(0,c.jsx)(n.code,{children:"white-space: nowrap"}),"或",(0,c.jsx)(n.code,{children:"white-space: pre"})," 中换行文本。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:"<p>Darth Vader: Nooooooooooooo<br>oooo!</p>\n​\n<p>Darth Vader: Nooooooooooooo<wbr>oooo!</p>\n​\n<p>Darth Vader: Nooooooooooooo&ZeroWidthSpace;oooo!</p>\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"p {\n \xa0  white-space: pre;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:N,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/XWypXdd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWypXdd"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"非断空格",children:["非断空格",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#非断空格",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"有时你可能希望文本在某些地方自由换行，而在其他地方则不允许。好消息！有一些专门的 HTML 实体符可以让你做到这一点。"}),"\n",(0,c.jsxs)(n.p,{children:["“非断空格”（",(0,c.jsx)(n.code,{children:"&nbsp;"}),"）通常用于保持单词之间的间距，但不允许它们之间换行。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"<p>Something I've noticed is designers don't seem to like orphans.</p>\n​\n<p>Something I've noticed is designers don't seem to like&nbsp;orphans.</p>\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/MWzJKbw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWzJKbw"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"单词连接符和不换行连字符",children:["单词连接符和不换行连字符",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单词连接符和不换行连字符",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["即使没有空格，文本也可能自然地换行，例如在连字符后面。为了防止在不添加空格的情况下换行，你可以使用⁠ ",(0,c.jsx)(n.code,{children:"&NoBreak;⁠"}),"（区分大小写！）来获得“单词连接符”。特别针对连字符，可以使用 ",(0,c.jsx)(n.code,{children:"&#8209"})," （即 ",(0,c.jsx)(n.code,{children:"‑"}),"）获得“不换行连字符”。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"<p>Turn right here to get on I-85.</p>\n​\n<p>Turn right here to get on I-&NoBreak;85.</p>\n​\n<p>Turn right here to get on I&#8209;85.</p>\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/BaGpjpv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaGpjpv"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"cjk-文本和单词断行",children:["CJK 文本和单词断行",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cjk-文本和单词断行",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"在某些方面，CJK（指中文、日文和韩文）文本的行为与非 CJK 文本不同。特定的 CSS 属性和值可用于更精细地控制 CJK 文本的换行。"}),"\n",(0,c.jsxs)(n.p,{children:["浏览器默认的行为允许在 CJK 文本中断词。这意味着 ",(0,c.jsx)(n.code,{children:"word-break: normal"}),"（默认值）和 ",(0,c.jsx)(n.code,{children:"word-break: break-all"})," 将给你相同的结果。但是，你可以使用 ",(0,c.jsx)(n.code,{children:"word-break: keep-all"})," 防止 CJK 文本在单词内换行（非CJK 文本不受影响）。"]}),"\n",(0,c.jsxs)(n.p,{children:["以下是一个韩文示例。请注意“",(0,c.jsx)(n.strong,{children:"자랑스럽게"}),"”这个词是否断行。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:"<p>나는 나의 감자 컬렉션을 매우 자랑스럽게 생각합니다.</p>\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".break-all {\n \xa0  word-break: break-all;\n}\n​\n.keep-all {\n \xa0  word-break: keep-all;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/JjeEGNJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjeEGNJ"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["不过要注意，中文和日文不像韩文一样在单词之间使用空格，因此 ",(0,c.jsx)(n.code,{children:"word-break: keep-all"})," 如果没有其他方式处理，很容易导致文本溢出。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:"<p>나는 나의 감자 컬렉션을 매우 자랑스럽게 생각합니다.</p>\n​\n<p>我非常骄傲地拥有自己的土豆收藏。</p>\n​\n<p>私は自分のジャガイモコレクションを非常に誇りに思っています。</p>\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:":root {\n \xa0  --word-break: keep-all;\n}\n​\np {\n \xa0  word-break: var(--word-break);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLQgeXN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLQgeXN"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"cjk-文本和换行规则",children:["CJK 文本和换行规则",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cjk-文本和换行规则",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["我们之前在非 CJK 文本时提到了 ",(0,c.jsx)(n.code,{children:"line-break: anywhere"})," 及其如何在标点处断行。对于 CJK 文本也是一样的。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:"<p>我的梦想是在乡村安静地生活。我能够跳起脚尖舞。</p>\n​\n<p>私の夢は田舎で静かに暮らすことだ。私は爪先立ちで踊れる。</p>\n​\n<p>내 꿈은 시골에서 조용히 살고 싶다。 나는 발끝 춤을 출 수 있어。</p>\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"p {\n \xa0  line-break: anywhere;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/eYQgJyd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYQgJyd"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["请注意示例中日文中的 ",(0,c.jsx)(n.code,{children:"。"})," 是否允许单独占一行。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"line-break"})," 属性还有其他值影响 CJK 文本的换行，例如 ",(0,c.jsx)(n.code,{children:"loose"}),"、",(0,c.jsx)(n.code,{children:"normal"})," 和 ",(0,c.jsx)(n.code,{children:"strict"}),"。这些属性值告诉浏览器在决定插入换行符的位置时使用哪些规则。",(0,c.jsx)(n.a,{href:"https://drafts.csswg.org/css-text-3/#line-break-property",target:"_blank",rel:"noopener noreferrer",children:"W3C 规范描述了几个规则"}),"，浏览器也可以添加自己的规则。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/GRwroYz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRwroYz"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"伪元素换行",children:["伪元素换行",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#伪元素换行",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"你可以通过伪元素的一些技巧，在保持它作为内联元素的同时，在内联元素之前和（或）之后强制换行。"}),"\n",(0,c.jsxs)(n.p,{children:["首先，将 ",(0,c.jsx)(n.code,{children:"::before"})," 或 ",(0,c.jsx)(n.code,{children:"::after"})," 伪元素的 ",(0,c.jsx)(n.code,{children:"content"})," 属性值设置为 ",(0,c.jsx)(n.code,{children:'"\\A"'})," ，这将使你获得新的行字符。然后设置 ",(0,c.jsx)(n.code,{children:"white-space: pre"})," 以确保新行字符起作用。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:"<p>Things that go <span>bump</span> in the night.</p>\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"span {\n \xa0  background-color: #000;\n}\n​\nspan::before, \nspan::after {\n \xa0  content: '\\A';\n \xa0  white-space: pre;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/JjeEGwp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjeEGwp"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"overflow-wrap-和-word-wrap-的差异",children:["overflow-wrap 和 word-wrap 的差异",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#overflow-wrap-和-word-wrap-的差异",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"overflow-wrap"})," 和 ",(0,c.jsx)(n.code,{children:"word-wrap"})," 这两个属性都可用于管理内容溢出，但它们处理方式略有不同。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["使用 ",(0,c.jsx)(n.code,{children:"overflow-wrap"})," 属性，整个溢出的单词可以在不溢出其容器的情况下换行。只有当无法在不溢出的情况下放置它时，浏览器才会将单词打破。"]}),"\n",(0,c.jsxs)(n.li,{children:["使用 ",(0,c.jsx)(n.code,{children:"word-wrap: break-word"})," 则将溢出的单词换行到新行上，并在两个字符之间将其截断。不管在哪一行，只要溢出的单词无法在其当前行显示，都将在两个字符之间无情的截断。一些书写系统（比如 CJK 书写系统）在使用 ",(0,c.jsx)(n.code,{children:"word-break"})," 截断文本换行时，浏览器会考虑到书写的严格分词规则"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["简单地说，如果要包裹文本或截断溢出的单词，请使用 ",(0,c.jsx)(n.code,{children:"overflow-wrap"})," 属性。如果 ",(0,c.jsx)(n.code,{children:"overflow-wrap"})," 属性无法满足你的需求时，请尝试使用 ",(0,c.jsx)(n.code,{children:"word-break"})," 属性。但是，请注意上述 ",(0,c.jsx)(n.code,{children:"overflow-wrap"})," 和 ",(0,c.jsx)(n.code,{children:"word-break"})," 之间的区别。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/wvQgWqp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvQgWqp"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"css-中的文本平衡",children:["CSS 中的文本平衡",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-中的文本平衡",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["正如上面所述，虽然在 CSS 中有很多种方式方法可以使文本换行，但它们都无法使换行的文本在容器中平衡排版。不过 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 属性的出现，改变了这一现象。我们只需要将 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 属性的值设置为 ",(0,c.jsx)(n.code,{children:"balance"})," 即可："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".balanced {\n \xa0 \xa0max-inline-size: 50ch;\n \xa0 \xa0text-wrap: balance;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/JjeERPb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjeERPb"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"text-wrap"})," 除了设置 ",(0,c.jsx)(n.code,{children:"balance"})," 值之外，还可以接受 ",(0,c.jsx)(n.code,{children:"wrap"})," 、",(0,c.jsx)(n.code,{children:"nowrap"})," 、",(0,c.jsx)(n.code,{children:"stable"})," 和 ",(0,c.jsx)(n.code,{children:"pretty"})," 等值。其每个值的含义如下："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"wrap"}),"：允许内联级内容在允许的软换行机会处换行，由正在生效的断行规则来决定，以最小化内联轴溢出。确切的算法由 UA 定义。算法在做断行决策时可以考虑多行。UA 可能会在速度优先于最佳布局的情况下进行偏向。UA 不得尝试像平衡一样使所有行（包括最后一行）变得平均。该值选择 UA 首选（或最兼容 Web）的换行算法。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"nowrap"}),"：内联级内容不会跨多行换行；不适合块容器的内容将溢出。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"balance"}),"：对于内联框来说与 ",(0,c.jsx)(n.code,{children:"wrap"})," 相同。对于建立内联格式上下文的块容器，如果能够实现比 ",(0,c.jsx)(n.code,{children:"wrap"})," 更好的平衡，则选择断行以平衡每个行框中剩余（空）空间。如果 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 被设置为 ",(0,c.jsx)(n.code,{children:"wrap"}),"，则这不会改变块将包含的行框的数量。要考虑的剩余空间是在放置浮动和内联内容之后，但在由于文本对齐而进行任何调整之前。当剩余空间的平均内联尺寸的标准偏差在块（包括以强制换行结束的行）上降低时，行框平衡。 确切的算法由 UA 定义。如果需要平衡的行多于十行，则 UA 可以将此值视为 ",(0,c.jsx)(n.code,{children:"wrap"}),"。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"stable"}),"：当应用于建立内联格式上下文的块容器时，指定在做断行决策时后续文本行不应被考虑，这样当编辑文本时，光标之前的任何内容都保持稳定；否则相当于 ",(0,c.jsx)(n.code,{children:"wrap"}),"。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"pretty"}),"：当应用于建立内联格式上下文的块容器时，指定 UA 应以更好的布局为优先，而非以速度为优先，并且预计会在做断行决策时考虑多行。否则相当于 ",(0,c.jsx)(n.code,{children:"wrap"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["无论 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 的值如何，行总是在强制断行处分行：对于所有值，必须遵守 ",(0,c.jsx)(n.a,{href:"https://www.w3.org/TR/css-text-4/#biblio-uax14",target:"_blank",rel:"noopener noreferrer",children:"UAX14 "}),"中定义的 BK、CR、LF、CM、NL 和 SG 断行类别的行为。此外，如果允许换行（即 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 不是 ",(0,c.jsx)(n.code,{children:"nowrap"}),"），必须遵守 ",(0,c.jsx)(n.a,{href:"https://www.w3.org/TR/css-text-4/#biblio-uax14",target:"_blank",rel:"noopener noreferrer",children:"UAX14"})," 中定义的 WJ、ZW 和 GL 断行类别的行为。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzRNGyE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzRNGyE"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"找到平衡点",children:["找到平衡点",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#找到平衡点",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 Web 中，读者首先看到的是标题，它们应该在视觉上吸引人且易于阅读。这可以吸引用户的注意力并提供质量和保障的感觉。好的排版可以给读者信心，鼓励他们继续阅读。因此，我们在处理标题的排版时，就可以使用 ",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 让标题在视觉上达到平衡："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".headlines {\n \xa0 \xa0text-wrap: balance;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/JjeERpr",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjeERpr"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，在设置 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 的元素上需要显式设置一个宽度值，比如 ",(0,c.jsx)(n.code,{children:"width"})," 或 ",(0,c.jsx)(n.code,{children:"max-width"})," 之类，只有这样才能使文本换行。上面示例中，它的宽度根据其容器宽度来决定。"]}),"\n",(0,c.jsxs)(n.p,{children:["原则上说，Web 上标题之处都可以使用该特性（即 ",(0,c.jsx)(n.code,{children:"text-wrap: balance"}),"）使标题在容器中排版达到平衡，例如页面的标题、组件的标题等："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["但这并不能说，",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 只能用于 Web 标题上，也可以用于一些提示性的文字之上，如下图所示："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:"img"})}),"\n",(0,c.jsx)(n.p,{children:"但在正文中平衡文本并不常见，因为它不需要突出或吸引读者的注意力。"}),"\n",(0,c.jsxs)(n.h2,{id:"平衡文本的缺陷",children:["平衡文本的缺陷",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#平衡文本的缺陷",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["虽然 ",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 以自动化的方式将平衡文本的艺术带到 Web 中，并借鉴了印刷行业设计师的工作和传统，但平衡文本的使用也是有一定缺陷存在的。比如下面所列的这几个点："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"文本平衡不会影响元素的宽度"}),"\n",(0,c.jsx)(n.li,{children:"行数限制"}),"\n",(0,c.jsx)(n.li,{children:"考虑性能"}),"\n",(0,c.jsxs)(n.li,{children:["与 ",(0,c.jsx)(n.code,{children:"white-space"})," 属性的交互"]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"文本平衡不会影响元素的宽度",children:["文本平衡不会影响元素的宽度",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文本平衡不会影响元素的宽度",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 CSS 中使用文本平衡（",(0,c.jsx)(n.code,{children:"text-wrap: balance"}),"）不会影响元素的宽度，例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".balance {\n \xa0 \xa0max-width: 630px;\n \xa0 \xa0text-wrap: balance;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["标题的最大宽度为 ",(0,c.jsx)(n.code,{children:"630px"})," ，并且会对齐每行字数，但其中 ",(0,c.jsx)(n.code,{children:"max-width"})," 并不会受到任何的影响："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["同样的事情也会发生在容器很小的时候，比如将 ",(0,c.jsx)(n.code,{children:"max-width"})," 从 ",(0,c.jsx)(n.code,{children:"630px"})," 调小至 ",(0,c.jsx)(n.code,{children:"330px"})," 时，它只会影响容器中的单词："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:"img"})}),"\n",(0,c.jsx)(n.p,{children:"这种现象看上去是蛮好的，但它同时也是一种缺陷。在某些设计中，它会留下很大的空间，它会让用户在感觉上并不美观，甚至不平衡。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["注意，上图中粉红色轮廓中文本的宽度。应用文本平衡（",(0,c.jsx)(n.code,{children:"text-wrap: balance"}),"）后，宽度将保持不变，只有文本会重新排序。这会让右侧留下一个很大的空白，会使设计效果不平衡。所以针对这类固定宽度的场景需要斟酌使用。"]}),"\n",(0,c.jsxs)(n.p,{children:["因此，有一些情况下，",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 并不是那么好，至少在我的看法中。例如前面所展示的卡片内的标题示例："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:"img"})}),"\n",(0,c.jsx)(n.p,{children:"平衡文本而会给包含的元素创建不平衡。"}),"\n",(0,c.jsxs)(n.h3,{id:"行数限制",children:["行数限制",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#行数限制",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在使用 ",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 实现平衡文本排版时，浏览器是自动完成的。浏览器在完成这个任务时，并不是免费的，它需要循环迭代来发现最佳的平衡换行解决方案。这对于 Web 性能来说是有极大影响的，因此为了降低它对 Web 性能带来较大的影响，浏览器是通过一个规则来缓解的，即四行行数的限制。"]}),"\n",(0,c.jsxs)(n.p,{children:["也就是说，当文本行数超过四行时，",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 是不起作用的，它无法实现平衡文本换行。例如下面这个示例，第二段的行数显然超过了四行，你是无法看到它平衡换行的："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:"img"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/mdQRjLm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdQRjLm"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"考虑性能",children:["考虑性能",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#考虑性能",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["正如上面示例所示，",(0,c.jsx)(n.code,{children:"text-wrap"})," 设置值为 ",(0,c.jsx)(n.code,{children:"balance"})," 时，有一个四行行数的限制。这样做是为了降级其对 Web 性能的影响。因此，在你的 CSS 中千万不要像下面这样使用 ",(0,c.jsx)(n.code,{children:"text-wrap"})," ，因为它是一种浪费请求，并可能影响页面渲染速度："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"* {\n \xa0 \xa0text-wrap: balance;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"相反，应该考虑这样做："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"h1, \nh2, \nh3, \nh4, \nh5, \nh6, \nblockquote {\n \xa0 \xa0text-wrap: balance;\n}\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"与-white-sapce-属性的交互",children:["与 white-sapce 属性的交互",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#与-white-sapce-属性的交互",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在介绍 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 时，不知道你是否有发现过，当 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 的值为 ",(0,c.jsx)(n.code,{children:"nowrap"})," 时，它也会使文本在容器中不换行。它的效果与 ",(0,c.jsx)(n.code,{children:"white-space"})," 取值为 ",(0,c.jsx)(n.code,{children:"nowrap"})," 是等同的。"]}),"\n",(0,c.jsxs)(n.p,{children:["但有的时候很有可能在使用 ",(0,c.jsx)(n.code,{children:"text-wrap"})," 实现平衡文本排版（",(0,c.jsx)(n.code,{children:"text-wrap"})," 取值为 ",(0,c.jsx)(n.code,{children:"balance"})," 时）会与 ",(0,c.jsx)(n.code,{children:"white-space"})," 属性共存，那么这样一来，两者就会发生一种竞争关系，它会使的浏览器无法操作了，是要不换行呢还是换行呢？因为这两个属性，一个要求不换行，另一个要求平衡换行。"]}),"\n",(0,c.jsxs)(n.p,{children:["为了避免该现象，可以将 ",(0,c.jsx)(n.code,{children:"white-space"})," 的值设置为 ",(0,c.jsx)(n.code,{children:"unset"})," 。这样一来，文本平衡换行排版可以再次应用："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".balanced {\n \xa0 \xa0white-space: unset;\n \xa0 \xa0text-wrap: balance;\n}\n"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["有关于 ",(0,c.jsx)(n.code,{children:"unset"})," 所起的作用，可以移步阅读小册的《",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7232094160071688227",target:"_blank",rel:"noopener noreferrer",children:"09 | CSS 的显式默认值：inherit 、initial 、unset 和 revert"}),"》一节课。"]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"小结",children:["小结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["虽然这节课的标题是“经典排版技术：使用 ",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 实现文本平衡换行”，但在介绍该特性的过程中，顺便把 CSS 中所有关于换行的知识都介绍过了。我想，通过这节课的学习，你能更好的掌握如何使用 CSS 的特性让文本换行，避免文本溢出打破 Web 布局。"]}),"\n",(0,c.jsxs)(n.p,{children:["这些换行的技术将使文本换行在视觉 UI 上有所不同，但能达到文本平衡换行的只有 ",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 。这是一个很不错且实用的 CSS 特性，在很多场景中都可以使用它，尤其是在页面标题、组件标题、提示信息、引言等地方，使得文本平衡排版，使得这些文版本在视觉上吸引人且易于阅读。这可以吸引用户的注意力并提供质量和保障的感觉。另外，一个好的排版可以给读者信心，鼓励他们继续阅读。"]}),"\n",(0,c.jsxs)(n.p,{children:["当然，",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 也有其一定的缺陷存在，比如超过四行文本是无法达到文本平衡排版效果的。而且文本平衡排版并不会改变所在容器尺寸，这在某些场景之下，会使得容器有一大片空白区域存在，也有可能会影响到视觉上的美观。"]}),"\n",(0,c.jsxs)(n.p,{children:["所以，在使用 ",(0,c.jsx)(n.code,{children:"text-wrap: balance"})," 实现文本平衡换行时，也需要根据具体的场景来决定，千万不要盲目的给所有文本排版采用该策略。"]})]})}function z(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(Q,{...e})}):Q(e)}let V=z;z.__RSPRESS_PAGE_META={},z.__RSPRESS_PAGE_META["%E7%8E%B0%E4%BB%A3CSS%2F%E7%AC%AC23%E7%AB%A0%E2%80%94%E7%BB%8F%E5%85%B8%E6%8E%92%E7%89%88%E6%8A%80%E6%9C%AF%EF%BC%9A%E4%BD%BF%E7%94%A8text-wrap%EF%BC%9Abalance%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E5%B9%B3%E8%A1%A1%E6%8D%A2%E8%A1%8C.md"]={toc:[{text:"换行所存在的缺陷",id:"换行所存在的缺陷",depth:2},{text:"CSS 中的换行姿势",id:"css-中的换行姿势",depth:2},{text:"使溢出的文本换行",id:"使溢出的文本换行",depth:3},{text:"无情地断词",id:"无情地断词",depth:3},{text:"过多的标点符号",id:"过多的标点符号",depth:3},{text:"指定单词断行位置",id:"指定单词断行位置",depth:3},{text:"自动断字",id:"自动断字",depth:3},{text:"手动断字",id:"手动断字",depth:3},{text:"防止文本换行",id:"防止文本换行",depth:3},{text:"在哪里单词无法断开换行？",id:"在哪里单词无法断开换行",depth:3},{text:"非断空格",id:"非断空格",depth:3},{text:"单词连接符和不换行连字符",id:"单词连接符和不换行连字符",depth:3},{text:"CJK 文本和单词断行",id:"cjk-文本和单词断行",depth:3},{text:"CJK 文本和换行规则",id:"cjk-文本和换行规则",depth:3},{text:"伪元素换行",id:"伪元素换行",depth:3},{text:"overflow-wrap 和 word-wrap 的差异",id:"overflow-wrap-和-word-wrap-的差异",depth:3},{text:"CSS 中的文本平衡",id:"css-中的文本平衡",depth:2},{text:"找到平衡点",id:"找到平衡点",depth:2},{text:"平衡文本的缺陷",id:"平衡文本的缺陷",depth:2},{text:"文本平衡不会影响元素的宽度",id:"文本平衡不会影响元素的宽度",depth:3},{text:"行数限制",id:"行数限制",depth:3},{text:"考虑性能",id:"考虑性能",depth:3},{text:"与 white-sapce 属性的交互",id:"与-white-sapce-属性的交互",depth:3},{text:"小结",id:"小结",depth:2}],title:"第23章—经典排版技术：使用text-wrap：balance实现文本平衡换行",headingTitle:"第23章—经典排版技术：使用text-wrap：balance实现文本平衡换行",frontmatter:{}}}}]);