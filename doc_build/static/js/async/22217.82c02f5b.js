"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["22217"],{774026:function(e,n,r){r.r(n),r.d(n,{default:()=>u});var s=r(552676),d=r(740453);let c=r.p+"static/image/cec4e56ab6dc6f2f6ab4a49045cb81a4.fda61068.webp",l=r.p+"static/image/ff84044a1bbd6625de2d31d361881b73.230965cb.webp",o=r.p+"static/image/66db7a95d213a1be5f09ac83393ea406.cacad6a6.webp",a=r.p+"static/image/8d914aebdd49a7099ce5cfa189a3a233.d4d0205d.webp",i=r.p+"static/image/1cbed5751950803cde8aa1a9b8adca68.edbbcb8a.webp",t=r.p+"static/image/8d49fb447c2b06107e585eea95364938.c9de20f1.webp",h=r.p+"static/image/4827ce696c8153392b1c4cb22f8a9167.08addf27.webp",x=r.p+"static/image/640432f2f73d781ea8cd1f6dcf807e83.217e0df7.webp";function j(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ul:"ul",li:"li",h2:"h2",blockquote:"blockquote",pre:"pre",code:"code",ol:"ol",img:"img"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"19loader-开发基础从开源项目学到的-loader-开发技巧",children:["19.Loader 开发基础：从开源项目学到的 Loader 开发技巧",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#19loader-开发基础从开源项目学到的-loader-开发技巧",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["如何扩展 Webpack？有两种主流方式，一是 Loader —— 主要负责将资源内容翻译成 Webpack 能够理解、处理的 JavaScript 代码；二是 Plugin —— 深度介入 Webpack 构建过程，",(0,s.jsx)(n.strong,{children:"重塑"})," 构建逻辑。"]}),"\n",(0,s.jsx)(n.p,{children:"相对而言，Loader 的职责更单一，入门成本相对较低。"}),"\n",(0,s.jsxs)(n.p,{children:["接下来我将集中介绍“",(0,s.jsx)(n.strong,{children:"如何开发一个 Loader"}),"”，由于内容太多，所以拆分成上下两篇文章。本文先从基础入手："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Loader 的基本形态与输入输出；"}),"\n",(0,s.jsx)(n.li,{children:"如何使用 Loader Context 上下文接口，并结合一些知名开源项目展开介绍部分常用接口；"}),"\n",(0,s.jsx)(n.li,{children:"如何为 Loader 编写自动测试代码；"}),"\n",(0,s.jsx)(n.li,{children:"深入剖析 Loader 链式调用模型。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"为什么需要-loader",children:["为什么需要 Loader？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么需要-loader",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:['为什么 Webpack 需要设计出 Loader 这一扩展方式？本质上是因为计算机世界中的文件资源格式实在太多，不可能一一穷举， 那何不将"',(0,s.jsx)(n.strong,{children:"解析"}),'"资源这部分任务开放出去，由第三方实现呢？Loader 正是为了将文件资源的“读”与“处理”逻辑解耦，Webpack 内部只需实现对标准 JavaScript 代码解析/处理能力，由第三方开发者以 Loader 方式补充对特定资源的解析逻辑。']}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"提示：Webpack5 之后增加了 Parser 对象，事实上已经内置支持图片、JSON 等格式的内容，不过这并不影响我们对 Loader 这一概念的理解。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"实现上，Loader 通常是一种 mapping 函数形式，接收原始代码内容，返回翻译结果，如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"module.exports = function(source) {\n  // 执行各种代码计算\n  return modifySource;\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在 Webpack 进入构建阶段后，首先会通过 IO 接口读取文件内容，之后调用 ",(0,s.jsx)(n.a,{href:"https://github.com/webpack/loader-runner",target:"_blank",rel:"noopener noreferrer",children:"LoaderRunner"})," 并将文件内容以 ",(0,s.jsx)(n.code,{children:"source"})," 参数形式传递到 Loader 数组，",(0,s.jsx)(n.code,{children:"source"})," 数据在 Loader 数组内可能会经过若干次形态转换，最终以标准 JavaScript 代码提交给 Webpack 主流程，以此实现内容翻译功能。"]}),"\n",(0,s.jsx)(n.p,{children:"Loader 函数签名如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"module.exports = function(source, sourceMap?, data?) {\n  return source;\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Loader 接收三个参数，分别为："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"source"}),"：资源输入，对于第一个执行的 Loader 为资源文件的内容；后续执行的 Loader 则为前一个 Loader 的执行结果，可能是字符串，也可能是代码的 AST 结构；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sourceMap"}),": 可选参数，代码的 ",(0,s.jsx)(n.a,{href:"https://sourcemap.com/",target:"_blank",rel:"noopener noreferrer",children:"sourcemap"})," 结构；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"}),": 可选参数，其它需要在 Loader 链中传递的信息，比如 ",(0,s.jsx)(n.a,{href:"https://github.com/posthtml/posthtml-loader",target:"_blank",rel:"noopener noreferrer",children:"posthtml/posthtml-loader"})," 就会通过这个参数传递额外的 AST 对象。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["其中 ",(0,s.jsx)(n.code,{children:"source"})," 是最重要的参数，大多数 Loader 要做的事情就是将 ",(0,s.jsx)(n.code,{children:"source"})," 转译为另一种形式的 ",(0,s.jsx)(n.code,{children:"output"})," ，比如 ",(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/raw-loader",target:"_blank",rel:"noopener noreferrer",children:"webpack-contrib/raw-loader"})," 的核心源码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"//... \nexport default function rawLoader(source) {\n  // ...\n  const json = JSON.stringify(source)\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029');\n\n  const esModule =\n    typeof options.esModule !== 'undefined' ? options.esModule : true;\n\n  return `${esModule ? 'export default' : 'module.exports ='} ${json};`;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这段代码的作用是将文本内容包裹成 JavaScript 模块，例如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// source\nI am 范文杰\n\n// output\nmodule.exports = "I am 范文杰"\n'})}),"\n",(0,s.jsx)(n.p,{children:"经过模块化包装之后，这段文本内容变成 Webpack 可以理解的 JavaScript，其它 Module 也就能引用、使用它了。"}),"\n",(0,s.jsx)(n.p,{children:"需要注意，Loader 中执行的各种资源内容转译操作通常都是 CPU 密集型 —— 这放在 JavaScript 单线程架构下可能导致性能问题；又或者异步 Loader 会挂起后续的加载器队列直到异步 Loader 触发回调，稍微不注意就可能导致整个加载器链条的执行时间过长。"}),"\n",(0,s.jsxs)(n.p,{children:["为此，Webpack 默认会缓存 Loader 的执行结果直到资源或资源依赖发生变化，开发者需要对此有个基本的理解，必要时可以通过 ",(0,s.jsx)(n.code,{children:"this.cachable"})," 显式声明不作缓存："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"module.exports = function(source) {\n  this.cacheable(false);\n  // ...\n  return output;\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"loader-简单示例",children:["Loader 简单示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#loader-简单示例",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"接下来我们尝试编写一个简单的 Loader Demo，理解如何开发、调试、使用自定义 Loader 组件。示例代码结构如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"loader-custom\n├─ src\n│  ├─ cjs.js\n│  ├─ index.js\n│  └─ options.json\n├─ package.json\n└─ babel.config.js\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["提示：示例已上传到小册 ",(0,s.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/main/loader-custom/package.json",target:"_blank",rel:"noopener noreferrer",children:"仓库"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["核心代码 ",(0,s.jsx)(n.code,{children:"src/index.js"})," 内容如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { validate } from "schema-utils";\nimport schema from "./options.json";\n\nexport default function loader(source) {\n  const { version, webpack } = this;\n  const options = this.getOptions();\n\n  validate(schema, options, "Loader");\n\n  const newSource = `\n  /**\n   * Loader API Version: ${version}\n   * Is this in "webpack mode": ${webpack}\n   */\n  /**\n   * Original Source From Loader\n   */\n  ${source}`;\n\n  return newSource;\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["提示：也可以在 Loader 代码中插入 ",(0,s.jsx)(n.code,{children:"debugger"})," 语句，配合 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/ndb",target:"_blank",rel:"noopener noreferrer",children:"ndb"})," 工具启动调试模式。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["代码逻辑很简单，核心功能只是在原来 ",(0,s.jsx)(n.code,{children:"source"})," 上拼接了一些文本，但该有的东西也都有了："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["通过 ",(0,s.jsx)(n.code,{children:"this.getOptions"})," 接口获取 Loader 配置对象；"]}),"\n",(0,s.jsxs)(n.li,{children:["使用 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/schema-utils",target:"_blank",rel:"noopener noreferrer",children:"schema-utils"})," 的 ",(0,s.jsx)(n.code,{children:"validate"})," 接口校验 Loader 配置是否符合预期，配置 Schema 定义在 ",(0,s.jsx)(n.code,{children:"src/options.json"})," 文件；"]}),"\n",(0,s.jsx)(n.li,{children:"返回经过修改的内容。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["开发完成后，可以通过 ",(0,s.jsx)(n.code,{children:"module.rules"})," 测试该 Loader，如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const path = require("path");\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: [{ \n          // 传入示例 Loader 的绝对路径\n          loader: path.resolve(__dirname, "../dist/index.js") \n        }],\n      },\n    ],\n  },\n};\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["提示：示例代码已上传到小册 ",(0,s.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/main/loader-custom/examples/webpack.config.js",target:"_blank",rel:"noopener noreferrer",children:"仓库"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["也可以将 ",(0,s.jsx)(n.code,{children:"resolveLoader.modules"})," 配置指向到 Loader 所在目录，Webpack 会在该目录查找加载器，如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const path = require('path');\n\nmodule.exports = {\n  //...\n  resolveLoader: {\n    modules: ['node_modules', path.resolve(__dirname, 'loaders')],\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"接下来，我们可以开始使用 Loader 上下文接口实现更丰富的功能。"}),"\n",(0,s.jsxs)(n.h2,{id:"使用上下文接口",children:["使用上下文接口",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用上下文接口",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"提示：本节内容主要围绕 Webpack5 展开，Webpack4 稍有差异，不作单独解释。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["除了作为内容转换器外，Loader 运行过程还可以通过一些",(0,s.jsx)(n.a,{href:"https://webpack.js.org/api/loaders/#thisaddcontextdependency",target:"_blank",rel:"noopener noreferrer",children:"上下文接口"}),"，",(0,s.jsx)(n.strong,{children:"有限制"}),"地影响 Webpack 编译过程，从而产生内容转换之外的副作用。上下文接口将在运行 Loader 时以 ",(0,s.jsx)(n.code,{children:"this"})," 方式注入到 Loader 函数："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["Webpack 官网对 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/api/loaders/#the-loader-context",target:"_blank",rel:"noopener noreferrer",children:"Loader Context"})," 已经有比较详细的说明，这里简单介绍几个比较常用的接口："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fs"}),"：Compilation 对象的 ",(0,s.jsx)(n.code,{children:"inputFileSystem"})," 属性，我们可以通过这个对象获取更多资源文件的内容；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"resource"}),"：当前文件路径；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"resourceQuery"}),"：文件请求参数，例如 ",(0,s.jsx)(n.code,{children:'import "./a?foo=bar"'})," 的 ",(0,s.jsx)(n.code,{children:"resourceQuery"})," 值为 ",(0,s.jsx)(n.code,{children:"?foo=bar"}),"；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"callback"}),"：可用于返回多个结果；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getOptions"}),"：用于获取当前 Loader 的配置对象；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"async"}),"：用于声明这是一个异步 Loader，开发者需要通过 ",(0,s.jsx)(n.code,{children:"async"})," 接口返回的 ",(0,s.jsx)(n.code,{children:"callback"})," 函数传递处理结果；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"emitWarning"}),"：添加警告；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"emitError"}),"：添加错误信息，注意这不会中断 Webpack 运行；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"emitFile"}),"：用于直接写出一个产物文件，例如 ",(0,s.jsx)(n.code,{children:"file-loader"})," 依赖该接口写出 Chunk 之外的产物；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"addDependency"}),"：将 ",(0,s.jsx)(n.code,{children:"dep"})," 文件添加为编译依赖，当 ",(0,s.jsx)(n.code,{children:"dep"})," 文件内容发生变化时，会触发当前文件的重新构建；"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"下面我会抽取几个比较关键的接口，结合开源项目的用法展开讲解。"}),"\n",(0,s.jsxs)(n.h2,{id:"取消-loader-缓存",children:["取消 Loader 缓存",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#取消-loader-缓存",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"需要注意，Loader 中执行的各种资源内容转译操作通常都是 CPU 密集型 —— 这放在 JavaScript 单线程架构下可能导致性能问题；又或者异步 Loader 会挂起后续的加载器队列直到异步 Loader 触发回调，稍微不注意就可能导致整个加载器链条的执行时间过长。"}),"\n",(0,s.jsxs)(n.p,{children:["为此，Webpack 默认会缓存 Loader 的执行结果直到模块或模块所依赖的其它资源发生变化，我们也可以通过 ",(0,s.jsx)(n.code,{children:"this.cacheable"})," 接口显式关闭缓存："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"module.exports = function(source) {\n  this.cacheable(false);\n  // ...\n  return output;\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"在-loader-中返回多个结果",children:["在 Loader 中返回多个结果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在-loader-中返回多个结果",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["简单的 Loader 可直接 ",(0,s.jsx)(n.code,{children:"return"})," 语句返回处理结果，复杂场景还可以通过 ",(0,s.jsx)(n.code,{children:"callback"})," 接口返回更多信息，供下游 Loader 或者 Webpack 本身使用，例如在 ",(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/eslint-loader",target:"_blank",rel:"noopener noreferrer",children:"webpack-contrib/eslint-loader"})," 中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default function loader(content, map) {\n  // ...\n  linter.printOutput(linter.lint(content));\n  this.callback(null, content, map);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["通过 ",(0,s.jsx)(n.code,{children:"this.callback(null, content, map)"})," 语句，同时返回转译后的内容与 sourcemap 内容。",(0,s.jsx)(n.code,{children:"callback"})," 的完整签名如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"this.callback(\n    // 异常信息，Loader 正常运行时传递 null 值即可\n    err: Error | null,\n    // 转译结果\n    content: string | Buffer,\n    // 源码的 sourcemap 信息\n    sourceMap?: SourceMap,\n    // 任意需要在 Loader 间传递的值\n    // 经常用来传递 ast 对象，避免重复解析\n    data?: any\n);\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"在-loader-返回异步结果",children:["在 Loader 返回异步结果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在-loader-返回异步结果",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["涉及到异步或 CPU 密集操作时，Loader 中还可以以异步形式返回处理结果，例如 ",(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/less-loader",target:"_blank",rel:"noopener noreferrer",children:"webpack-contrib/less-loader"})," 的核心逻辑："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import less from "less";\n\nasync function lessLoader(source) {\n  // 1. 获取异步回调函数\n  const callback = this.async();\n  // ...\n\n  let result;\n\n  try {\n    // 2. 调用less 将模块内容转译为 css\n    result = await (options.implementation || less).render(data, lessOptions);\n  } catch (error) {\n    // ...\n  }\n\n  const { css, imports } = result;\n\n  // ...\n\n  // 3. 转译结束，返回结果\n  callback(null, css, map);\n}\n\nexport default lessLoader;\n'})}),"\n",(0,s.jsx)(n.p,{children:"在 less-loader 中，包含三个重要逻辑："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["调用 ",(0,s.jsx)(n.code,{children:"this.async"})," 获取异步回调函数，此时 Webpack 会将该 Loader 标记为异步加载器，会挂起当前执行队列直到 ",(0,s.jsx)(n.code,{children:"callback"})," 被触发；"]}),"\n",(0,s.jsxs)(n.li,{children:["调用 ",(0,s.jsx)(n.code,{children:"less"})," 库将 less 资源转译为标准 css；"]}),"\n",(0,s.jsxs)(n.li,{children:["调用异步回调 ",(0,s.jsx)(n.code,{children:"callback"})," 返回处理结果。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"this.async"})," 返回的异步回调函数签名与上一节介绍的 ",(0,s.jsx)(n.code,{children:"this.callback"})," 相同，此处不再赘述。"]}),"\n",(0,s.jsxs)(n.h2,{id:"在-loader-中直接写出文件",children:["在 Loader 中直接写出文件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在-loader-中直接写出文件",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Loader Context 的 ",(0,s.jsx)(n.code,{children:"emitFile"})," 接口可用于直接写出新的产物文件，例如在 ",(0,s.jsx)(n.code,{children:"file-loader"})," 中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default function loader(content) {\n  const options = getOptions(this);\n\n  validate(schema, options, {\n    name: 'File Loader',\n    baseDataPath: 'options',\n  });\n  // ...\n\n  if (typeof options.emitFile === 'undefined' || options.emitFile) {\n    // ...\n    this.emitFile(outputPath, content, null, assetInfo);\n  }\n\n  const esModule =\n    typeof options.esModule !== 'undefined' ? options.esModule : true;\n\n  return `${esModule ? 'export default' : 'module.exports ='} ${publicPath};`;\n}\n\nexport const raw = true;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["借助 ",(0,s.jsx)(n.code,{children:"emitFile"})," 接口，我们能够在 Webpack 构建主流程之外提交更多产物，这有时候是必要的，除上面提到的 ",(0,s.jsx)(n.code,{children:"file-loader"})," 外，",(0,s.jsx)(n.code,{children:"response-loader"})," 、",(0,s.jsx)(n.code,{children:"mermaid-loader"})," 等也依赖于 ",(0,s.jsx)(n.code,{children:"emitFile"})," 实现构建功能。"]}),"\n",(0,s.jsxs)(n.h2,{id:"在-loader-中添加额外依赖",children:["在 Loader 中添加额外依赖",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在-loader-中添加额外依赖",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Loader Context 的 ",(0,s.jsx)(n.code,{children:"addDependency"})," 接口用于添加额外的文件依赖，当这些依赖发生变化时，也会触发重新构建，例如在 ",(0,s.jsx)(n.code,{children:"less-loader"})," 中包含这样一段代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"  try {\n    result = await (options.implementation || less).render(data, lessOptions);\n  } catch (error) {\n    // ...\n  }\n\n  const { css, imports } = result;\n\n  imports.forEach((item) => {\n    // ...\n    this.addDependency(path.normalize(item));\n  });\n"})}),"\n",(0,s.jsxs)(n.p,{children:["代码中首先调用 ",(0,s.jsx)(n.code,{children:"less"})," 库编译文件内容，之后遍历所有 ",(0,s.jsx)(n.code,{children:"@import"})," 语句(",(0,s.jsx)(n.code,{children:"result.imports"})," 数组)，调用 ",(0,s.jsx)(n.code,{children:"this.addDependency"})," 函数将 import 到的文件都注册为依赖，此后这些资源文件发生变化时都会触发重新编译。"]}),"\n",(0,s.jsxs)(n.p,{children:["为什么 ",(0,s.jsx)(n.code,{children:"less-loader"})," 需要这么处理？因为 ",(0,s.jsx)(n.code,{children:"less"})," 工具本身已经会递归所有 Less 文件树，一次性将所有 ",(0,s.jsx)(n.code,{children:".less"})," 文件打包在一起，例如在 ",(0,s.jsx)(n.code,{children:"a.less"})," 中 ",(0,s.jsx)(n.code,{children:"@import (less) './b.less'"})," ，a、b 文件会被 ",(0,s.jsx)(n.code,{children:"less"})," 打包在一起。这里面的文件依赖对 Webpack 来说是无感知的，如果不用 ",(0,s.jsx)(n.code,{children:"addDependency"})," 显式声明依赖，后续 ",(0,s.jsx)(n.code,{children:"b.less"})," 文件的变化不会触发 ",(0,s.jsx)(n.code,{children:"a.less"})," 重新构建，不符合预期啊。"]}),"\n",(0,s.jsxs)(n.p,{children:["所以，",(0,s.jsx)(n.code,{children:"addDependency"})," 接口适用于那些 Webpack 无法理解隐式文件依赖的场景。除上例 ",(0,s.jsx)(n.code,{children:"less-loader"}),"，",(0,s.jsx)(n.code,{children:"babel-loader"})," 也是一个特别经典的案例。在 ",(0,s.jsx)(n.code,{children:"babel-loader"})," 内部会添加对 Babel 配置文件如 ",(0,s.jsx)(n.code,{children:".babelrc"})," 的依赖，当 ",(0,s.jsx)(n.code,{children:".babelrc"})," 内容发生变化时，也会触发 ",(0,s.jsx)(n.code,{children:"babel-loader"})," 重新运行。"]}),"\n",(0,s.jsx)(n.p,{children:"此外，Loader Context 还提供了下面几个与依赖处理相关的接口："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"addContextDependency(directory: String)"}),"：添加文件目录依赖，目录下内容变更时会触发文件变更；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"addMissingDependency(file: String)"}),"：用于添加文件依赖，效果与 ",(0,s.jsx)(n.code,{children:"addDependency"})," 类似；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"clearDependencies()"}),"：清除所有文件依赖。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"处理二进制资源",children:["处理二进制资源",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#处理二进制资源",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["有时候我们期望以二进制方式读入资源文件，例如在 ",(0,s.jsx)(n.code,{children:"file-loader"}),"、",(0,s.jsx)(n.code,{children:"image-loader"})," 等场景中，此时只需要添加 ",(0,s.jsx)(n.code,{children:"export const raw = true"})," 语句即可，如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default function loader(source) {/* ... */}\n\nexport const raw = true;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["之后，",(0,s.jsx)(n.code,{children:"loader"})," 函数中获取到的第一个参数 ",(0,s.jsx)(n.code,{children:"source"})," 将会是 Buffer 对象形式的二进制内容。"]}),"\n",(0,s.jsxs)(n.h2,{id:"在-loader-中正确处理日志",children:["在 Loader 中正确处理日志",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在-loader-中正确处理日志",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Webpack 内置了一套 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/configuration/other-options/#infrastructurelogging",target:"_blank",rel:"noopener noreferrer",children:"infrastructureLogging"})," 接口，专门用于处理 Webpack 内部及各种第三方组件的日志需求，与 ",(0,s.jsx)(n.a,{href:"https://github.com/log4js-node/log4js-node",target:"_blank",rel:"noopener noreferrer",children:"log4js"}),"、",(0,s.jsx)(n.a,{href:"https://github.com/winstonjs/winston",target:"_blank",rel:"noopener noreferrer",children:"winston"})," 等日志工具类似，",(0,s.jsx)(n.a,{href:"https://webpack.js.org/configuration/other-options/#infrastructurelogging",target:"_blank",rel:"noopener noreferrer",children:"infrastructureLogging"})," 也提供了根据日志分级筛选展示功能，从而将日志的写逻辑与输出逻辑解耦。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["提示：作为对比，假如我们使用 ",(0,s.jsx)(n.code,{children:"console.log"})," 等硬编码方式输出日志信息，用户无法过滤这部分输出，可能会造成较大打扰，体感很不好。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["因此，在编写 Loader 时也应该尽可能复用 Webpack 内置的这套 Logging 规则，方法很简单，只需使用 Loader Context 的 ",(0,s.jsx)(n.a,{href:"https://v4.webpack.js.org/api/loaders/#logging",target:"_blank",rel:"noopener noreferrer",children:"getLogger"})," 接口，如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'export default function loader(source) {\n  const logger = this.getLogger("xxx-loader");\n  // 使用适当的 logging 接口\n  // 支持：verbose/log/info/warn/error\n  logger.info("information");\n\n  return source;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getLogger"})," 返回的 ",(0,s.jsx)(n.code,{children:"logger"})," 对象支持 ",(0,s.jsx)(n.code,{children:"verbose/log/info/warn/error"})," 五种级别的日志，最终用户可以通过 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/configuration/other-options/#level",target:"_blank",rel:"noopener noreferrer",children:"infrastructureLogging.level"})," 配置项筛选不同日志内容，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  // ...\n  infrastructureLogging: {\n    level: 'warn',\n  },\n  // ...\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"在-loader-中正确上报异常",children:["在 Loader 中正确上报异常",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在-loader-中正确上报异常",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Webpack Loader 中有多种上报异常信息的方式："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["使用 ",(0,s.jsx)(n.code,{children:"logger.error"}),"，仅输出错误日志，不会打断编译流程，效果："]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.code,{children:"this.emitError"})," 接口，同样不会打断编译流程，效果："]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["与 ",(0,s.jsx)(n.code,{children:"logger.error"})," 相比，",(0,s.jsx)(n.code,{children:"emitError"})," 不受 ",(0,s.jsx)(n.code,{children:"infragstrustureLogging"})," 规则控制，必然会强干扰到最终用户；其次，",(0,s.jsx)(n.code,{children:"emitError"})," 会抛出异常的 Loader 文件、代码行、对应模块，更容易帮助定位问题。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["使用 ",(0,s.jsx)(n.code,{children:"this.callback"})," 接口提交错误信息，但注意导致当前模块编译失败，效果与直接使用 ",(0,s.jsx)(n.code,{children:"throw"})," 相同，用法："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'export default function loader(source) {\n  this.callback(new Error("发生了一些异常"));\n\n  return source;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["之后，Webpack 会将 ",(0,s.jsx)(n.code,{children:"callback"})," 传递过来的错误信息当做模块内容，打包进产物文件："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"总的来说，这些方式各自有适用场景，我个人会按如下规则择优选用："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["一般应尽量使用 ",(0,s.jsx)(n.code,{children:"logger.error"}),"，减少对用户的打扰；"]}),"\n",(0,s.jsxs)(n.li,{children:["对于需要明确警示用户的错误，优先使用 ",(0,s.jsx)(n.code,{children:"this.emitError"}),"；"]}),"\n",(0,s.jsxs)(n.li,{children:["对于已经严重到不能继续往下编译的错误，使用 ",(0,s.jsx)(n.code,{children:"callback"})," 。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"为-loader-编写单元测试",children:["为 Loader 编写单元测试",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为-loader-编写单元测试",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 Loader 中编写单元测试收益非常高，一方面对开发者来说，不用重复手动测试各种特性；一方面对于最终用户来说，带有一定测试覆盖率的项目通常意味着更高、更稳定的质量。常规的 Webpack Loader 单元测试流程大致如下："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"创建在 Webpack 实例，并运行 Loader；"}),"\n",(0,s.jsx)(n.li,{children:"获取 Loader 执行结果，比对、分析判断是否符合预期；"}),"\n",(0,s.jsx)(n.li,{children:"判断执行过程中是否出错。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"下面我们逐一展开讲解。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"如何运行 Loader？"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"有两种办法，一是在 node 环境下运行调用 Webpack 接口，用代码而非命令行执行编译，很多框架都会采用这种方式，例如 vue-loader、stylus-loader、babel-loader 等，优点是运行效果最接近最终用户，缺点是运行效率相对较低（可以忽略）。"}),"\n",(0,s.jsxs)(n.p,{children:["以 ",(0,s.jsx)(n.a,{href:"https://github.com/posthtml/posthtml-loader",target:"_blank",rel:"noopener noreferrer",children:"posthtml/posthtml-loader"})," 为例，它会在启动测试之前创建并运行 Webpack 实例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// posthtml-loader/test/helpers/compiler.js 文件\nmodule.exports = function (fixture, config, options) {\n  config = { /*...*/ }\n\n  options = Object.assign({ output: false }, options)\n\n  // 创建 Webpack 实例\n  const compiler = webpack(config)\n\n  // 以 MemoryFS 方式输出构建结果，避免写磁盘\n  if (!options.output) compiler.outputFileSystem = new MemoryFS()\n\n  // 执行，并以 promise 方式返回结果\n  return new Promise((resolve, reject) => compiler.run((err, stats) => {\n    if (err) reject(err)\n    // 异步返回执行结果\n    resolve(stats)\n  }))\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["提示：上面的示例中用到 ",(0,s.jsx)(n.code,{children:"compiler.outputFileSystem = new MemoryFS()"})," 语句将 Webpack 设定成输出到内存，能避免写盘操作，提升编译速度。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["另外一种方法是编写一系列 mock 方法，搭建起一个模拟的 Webpack 运行环境，例如 ",(0,s.jsx)(n.a,{href:"https://github.com/emaphp/underscore-template-loader",target:"_blank",rel:"noopener noreferrer",children:"emaphp/underscore-template-loader"})," ，优点是运行速度更快，缺点是开发工作量大通用性低，了解即可。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"如何校验 Loader 执行结果？"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["上例运行结束之后会以 ",(0,s.jsx)(n.code,{children:"resolve(stats)"})," 方式返回执行结果，",(0,s.jsx)(n.code,{children:"stats"})," 对象中几乎包含了编译过程所有信息，包括：耗时、产物、模块、chunks、errors、warnings 等等，我们可以从 ",(0,s.jsx)(n.code,{children:"stats"})," 对象中读取编译最终输出的产物，例如 ",(0,s.jsx)(n.code,{children:"style-loader"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// style-loader/src/test/helpers/readAsset.js 文件\nfunction readAsset(compiler, stats, assets) => {\n  const usedFs = compiler.outputFileSystem\n  const outputPath = stats.compilation.outputOptions.path\n  const queryStringIdx = targetFile.indexOf('?')\n\n  if (queryStringIdx >= 0) {\n    // 解析出输出文件路径\n    asset = asset.substr(0, queryStringIdx)\n  }\n\n  // 读文件内容\n  return usedFs.readFileSync(path.join(outputPath, targetFile)).toString()\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["解释一下，这段代码首先计算 asset 输出的文件路径，之后调用 outputFileSystem 的 ",(0,s.jsx)(n.code,{children:"readFile"})," 方法读取文件内容。"]}),"\n",(0,s.jsx)(n.p,{children:"接下来，有两种分析内容的方法："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["调用 Jest 的 ",(0,s.jsx)(n.code,{children:"expect(xxx).toMatchSnapshot()"})," 断言，判断当前运行结果是否与之前的运行结果一致，从而确保多次修改的结果一致性，很多框架都大量用了这种方法；"]}),"\n",(0,s.jsxs)(n.li,{children:["解读资源内容，判断是否符合预期，例如 less-loader 的单元测试中会对同一份代码跑两次 less 编译，一次由 Webpack 执行，一次直接调用 ",(0,s.jsx)(n.code,{children:"less"})," 库，之后分析两次运行结果是否相同。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["对此有兴趣的同学，强烈建议看看 ",(0,s.jsx)(n.code,{children:"less-loader"})," 的 test 目录。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"如何判断执行过程是否触发异常？"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["最后，还需要判断编译过程是否出现异常，同样可以从 ",(0,s.jsx)(n.code,{children:"stats"})," 对象解析："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default getErrors = (stats) => {\n  const errors = stats.compilation.errors.sort()\n  return errors.map(\n    e => e.toString()\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["大多数情况下都希望编译没有错误，此时只要判断结果数组是否为空即可。某些情况下可能需要判断是否抛出特定异常，此时可以 ",(0,s.jsx)(n.code,{children:"expect(xxx).toMatchSnapshot()"})," 断言，用快照对比更新前后的结果。"]}),"\n",(0,s.jsxs)(n.h2,{id:"链式调用模型详解",children:["链式调用模型详解",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#链式调用模型详解",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["举个例子，为了读取 ",(0,s.jsx)(n.code,{children:"less"})," 文件，我们通常需要同时配置多个加载器："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: ["style-loader", "css-loader", "less-loader"],\n      },\n    ],\n  },\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["示例针对 ",(0,s.jsx)(n.code,{children:".less"})," 后缀的文件设定了 less、css、style 三个 Loader，Webpack 启动后会以一种所谓“链式调用”的方式按 ",(0,s.jsx)(n.code,{children:"use"})," 数组顺序从后到前调用 Loader："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["首先调用 ",(0,s.jsx)(n.code,{children:"less-loader"})," 将 Less 代码转译为 CSS 代码；"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["将 ",(0,s.jsx)(n.code,{children:"less-loader"})," 结果传入 ",(0,s.jsx)(n.code,{children:"css-loader"}),"，进一步将 CSS 内容包装成类似 ",(0,s.jsx)(n.code,{children:'module.exports = "${css}"'})," 的 JavaScript 代码片段；"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["将 ",(0,s.jsx)(n.code,{children:"css-loader"})," 结果传入 ",(0,s.jsx)(n.code,{children:"style-loader"}),"，在运行时调用 injectStyle 等函数，将内容注入到页面的 ",(0,s.jsx)(n.code,{children:"<style>"})," 标签。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"三个 Loader 分别完成内容转化工作的一部分，形成从右到左的执行链条。链式调用这种设计有两个好处，一是保持单个 Loader 的单一职责，一定程度上降低代码的复杂度；二是细粒度的功能能够被组装成复杂而灵活的处理链条，提升单个 Loader 的可复用性。"}),"\n",(0,s.jsx)(n.p,{children:"不过，这只是链式调用的一部分，这里面有两个问题："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Loader 链条一旦启动之后，需要所有 Loader 都执行完毕才会结束，没有中断的机会 —— 除非显式抛出异常；"}),"\n",(0,s.jsx)(n.li,{children:"某些场景下并不需要关心资源的具体内容，但 Loader 需要在 source 内容被读取出来之后才会执行。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["为了解决这两个问题，Webpack 在 Loader 基础上叠加了 ",(0,s.jsx)(n.code,{children:"pitch"})," 的概念。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Q: 什么是 ",(0,s.jsx)(n.code,{children:"pitch"}),"？"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Webpack 允许在 Loader 函数上挂载名为 ",(0,s.jsx)(n.code,{children:"pitch"})," 的函数，运行时 pitch 会比 Loader 本身更早执行，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const loader = function (source){\n    console.log('后执行')\n    return source;\n}\n\nloader.pitch = function(requestString) {\n    console.log('先执行')\n}\n\nmodule.exports = loader\n"})}),"\n",(0,s.jsx)(n.p,{children:"Pitch 函数的完整签名："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function pitch(\n    remainingRequest: string, previousRequest: string, data = {}\n): void {\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"包含三个参数："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"remainingRequest"})," : 当前 loader 之后的资源请求字符串；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"previousRequest"})," : 在执行当前 loader 之前经历过的 loader 列表；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"})," : 与 Loader 函数的 ",(0,s.jsx)(n.code,{children:"data"})," 相同，用于传递需要在 Loader 传播的信息。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这些参数不复杂，但与 requestString 紧密相关，我们看个例子加深了解："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          "style-loader", "css-loader", "less-loader"\n        ],\n      },\n    ],\n  },\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"css-loader.pitch"})," 中拿到的参数依次为："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// css-loader 之后的 loader 列表及资源路径\nremainingRequest = less-loader!./xxx.less\n// css-loader 之前的 loader 列表\npreviousRequest = style-loader\n// 默认值\ndata = {}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pitch"})," 函数调度逻辑"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Pitch 翻译成中文是_抛、球场、力度、事物最高点_等，它背后折射的是一整套 Loader 被执行的生命周期概念。"}),"\n",(0,s.jsx)(n.p,{children:"实现上，Loader 链条执行过程分三个阶段：pitch、解析资源、执行，设计上与 DOM 的事件模型非常相似，pitch 对应到捕获阶段；执行对应到冒泡阶段；而两个阶段之间 Webpack 会执行资源内容的读取、解析操作，对应 DOM 事件模型的 AT_TARGET 阶段："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pitch"})," 阶段按配置顺序从左到右逐个执行 ",(0,s.jsx)(n.code,{children:"loader.pitch"})," 函数(如果有的话)，开发者可以在 ",(0,s.jsx)(n.code,{children:"pitch"})," 返回任意值中断后续的链路的执行："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"那么为什么要设计 pitch 这一特性呢？"}),"\n",(0,s.jsxs)(n.p,{children:["在分析了 style-loader、vue-loader、to-string-loader 等开源项目之后，我个人总结出两个字：",(0,s.jsx)(n.strong,{children:"阻断"}),"！"]}),"\n",(0,s.jsx)(n.p,{children:"回顾一下前面提到过的 less 加载链条："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"less-loader"})," ：将 less 规格的内容转换为标准 css；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"css-loader"})," ：将 css 内容包裹为 JavaScript 模块；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"style-loader"})," ：将 JavaScript 模块的导出结果以 ",(0,s.jsx)(n.code,{children:"link"})," 、",(0,s.jsx)(n.code,{children:"style"})," 标签等方式挂载到 html 中，让 css 代码能够正确运行在浏览器上。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["实际上， ",(0,s.jsx)(n.code,{children:"style-loader"})," 只是负责让 CSS 在浏览器环境下跑起来，并不需要关心具体内容，很适合用 pitch 来处理，核心代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// ...\n// Loader 本身不作任何处理\nconst loaderApi = () => {};\n\n// pitch 中根据参数拼接模块代码\nloaderApi.pitch = function loader(remainingRequest) {\n  //...\n\n  switch (injectType) {\n    case 'linkTag': {\n      return `${\n        esModule\n          ? `...`\n          // 引入 runtime 模块\n          : `var api = require(${loaderUtils.stringifyRequest(\n              this,\n              `!${path.join(__dirname, 'runtime/injectStylesIntoLinkTag.js')}`\n            )});\n            // 引入 css 模块\n            var content = require(${loaderUtils.stringifyRequest(\n              this,\n              `!!${remainingRequest}`\n            )});\n\n            content = content.__esModule ? content.default : content;`\n      } // ...`;\n    }\n\n    case 'lazyStyleTag':\n    case 'lazySingletonStyleTag': {\n        //...\n    }\n\n    case 'styleTag':\n    case 'singletonStyleTag':\n    default: {\n        // ...\n    }\n  }\n};\n\nexport default loaderApi;\n"})}),"\n",(0,s.jsx)(n.p,{children:"关键点："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"loaderApi"})," 为空函数，不做任何处理；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"loaderApi.pitch"})," 中拼接结果，导出的代码包含：","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["引入运行时模块 ",(0,s.jsx)(n.code,{children:"runtime/injectStylesIntoLinkTag.js"}),"；"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["复用 ",(0,s.jsx)(n.code,{children:"remainingRequest"})," 参数，重新引入 css 文件。"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"运行后，关键结果大致如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"var api = require('xxx/style-loader/lib/runtime/injectStylesIntoLinkTag.js')\nvar content = require('!!css-loader!less-loader!./xxx.less');\n"})}),"\n",(0,s.jsx)(n.p,{children:"注意了，到这里 style-loader 的 pitch 函数返回这一段内容，后续的 Loader 就不会继续执行，当前调用链条中断了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"之后，Webpack 继续解析、构建 style-loader 返回的结果，遇到 inline loader 语句："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"var content = require('!!css-loader!less-loader!./xxx.less');\n"})}),"\n",(0,s.jsx)(n.p,{children:"所以从 Webpack 的角度看，对同一个文件实际调用了两次 loader 链，第一次在 style-loader 的 pitch 中断，第二次根据 inline loader 的内容跳过了 style-loader。"}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Loader 主要负责将资源内容转换为 Webpack 能够理解的 JavaScript 代码形式，开发时我们可以借助 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/api/loaders/#the-loader-context",target:"_blank",rel:"noopener noreferrer",children:"Loader Context"})," 提供的丰富接口实现各种各样的诉求。此外，也需要结合 Loader 的链式调用模型，尽可能设计出复用性更强，更简洁的资源加载器。"]}),"\n",(0,s.jsxs)(n.p,{children:["下一篇我还会继续沿着 “如何开发 Loader” 这一主题，介绍如何使用 ",(0,s.jsx)(n.code,{children:"loader-utils"}),"、",(0,s.jsx)(n.code,{children:"schema-utils"})," 等辅助工具，以及作为实践案例，深度剖析 ",(0,s.jsx)(n.code,{children:"vue-loader"})," 的实现逻辑。"]}),"\n",(0,s.jsxs)(n.h2,{id:"思考题",children:["思考题",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["读完文章后，建议同学们同步看看一些知名 Loader 的源码，包括：",(0,s.jsx)(n.code,{children:"file-loader"}),"、",(0,s.jsx)(n.code,{children:"url-loader"}),"、",(0,s.jsx)(n.code,{children:"style-loader"}),"、",(0,s.jsx)(n.code,{children:"less-loader"}),"、",(0,s.jsx)(n.code,{children:"babel-loader"})," 等，学习它们的开发模式，巩固对上述各项接口的认识。"]})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}let u=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["Webpack5%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F19.Loader%20%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BB%8E%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%AD%A6%E5%88%B0%E7%9A%84%20Loader%20%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7.md"]={toc:[{text:"为什么需要 Loader？",id:"为什么需要-loader",depth:2},{text:"Loader 简单示例",id:"loader-简单示例",depth:2},{text:"使用上下文接口",id:"使用上下文接口",depth:2},{text:"取消 Loader 缓存",id:"取消-loader-缓存",depth:2},{text:"在 Loader 中返回多个结果",id:"在-loader-中返回多个结果",depth:2},{text:"在 Loader 返回异步结果",id:"在-loader-返回异步结果",depth:2},{text:"在 Loader 中直接写出文件",id:"在-loader-中直接写出文件",depth:2},{text:"在 Loader 中添加额外依赖",id:"在-loader-中添加额外依赖",depth:2},{text:"处理二进制资源",id:"处理二进制资源",depth:2},{text:"在 Loader 中正确处理日志",id:"在-loader-中正确处理日志",depth:2},{text:"在 Loader 中正确上报异常",id:"在-loader-中正确上报异常",depth:2},{text:"为 Loader 编写单元测试",id:"为-loader-编写单元测试",depth:2},{text:"链式调用模型详解",id:"链式调用模型详解",depth:2},{text:"总结",id:"总结",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"19.Loader 开发基础：从开源项目学到的 Loader 开发技巧",headingTitle:"19.Loader 开发基础：从开源项目学到的 Loader 开发技巧",frontmatter:{}}}}]);