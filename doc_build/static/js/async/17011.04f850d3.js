"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["17011"],{110317:function(e,a,n){n.r(a),n.d(a,{default:()=>S});var s=n(552676),i=n(740453);let c=n.p+"static/image/78d691c50d6d7325455ccd509bd56d2c.7e4e27ea.webp",r=n.p+"static/image/64350204441ea5d3f768b204295a5dc9.9b5d8361.webp",t=n.p+"static/image/a3be40cd99e849da33d1d09639b6fc20.01be79b0.webp",p=n.p+"static/image/e2936d85c9b09314660f90e3edbb6272.9daabc19.webp",d=n.p+"static/image/6744864bcd8dab0e589db9187f30e08f.7aed478c.webp",l=n.p+"static/image/529f59f237c9e7f4dec0577ba1099a80.d204af45.webp",o=n.p+"static/image/40873fd8b13cb9948c4e85178683fc35.0ed7aa78.webp",j=n.p+"static/image/a07ca1c2d97289021ba4134e4af9e24a.8de4a179.webp",h=n.p+"static/image/7d11635ff72ee57b2d674832d35eacd8.7c4bafec.webp",x=n.p+"static/image/1414c1c760d7ee757bfb5edb485f4778.4a0f54dd.webp",m=n.p+"static/image/de5d62d4fafceb7fce6cafd1b50107ea.e4e3114a.webp",g=n.p+"static/image/6a71333058f8542cbd49ec09494ce990.e07f6648.webp",b=n.p+"static/image/90c3de8cd215917759d88003ecef42ec.0366aae0.webp",f=n.p+"static/image/179150b4c3059755a6e97fe7350d021d.5149fe0d.webp",w=n.p+"static/image/0c025f77a67e7e6e0d56f26a88196ead.d5e3a3fd.webp",u=n.p+"static/image/8076093434d326d8c44ab7df0e075f2e.a4e383ad.webp",v=n.p+"static/image/17a4969b640575151130d9120ffa809f.fe692924.webp",E=n.p+"static/image/8d6ee5ba0d766a87d071f8ecc35c9dec.91992f0e.webp",P=n.p+"static/image/36bd8750a9163010b9a797ac4631c347.841cf27d.webp",_=n.p+"static/image/1735590e7cc4bb0703bdca5af946d47b.5fd944dc.webp",I=n.p+"static/image/cdfebae34dc44843f80a829cb912eef2.df9f84e9.webp",A=n.p+"static/image/31f469d376c6bab0b27024e2b331af0f.516a77b6.webp",k=n.p+"static/image/587aec0eaa5570878b969d53bbad8c8a.d291d9be.webp",y=n.p+"static/image/de4f0f0665e40d7b87536b36bf2951a1.ae010145.webp",B=n.p+"static/image/2af37710a960c58aff188089e60b9956.d862a3ac.webp",V=n.p+"static/image/2d8c3aa6d7d7c3d7c975370ca687588c.6873e068.webp",N=n.p+"static/image/6b5069aae3bfe583ac56e1fee1598dd1.84f7bf41.webp",M=n.p+"static/image/00856ee712ab831f75cbf071c72a16ad.8e115c15.webp",F=n.p+"static/image/387fc03587acb1c1837fc63cc9bd9950.74f708f1.webp",T=n.p+"static/image/58f8a1e6e9a120147b353e7d86f8814b.1b798ef3.webp",D=n.p+"static/image/1f0cd4005fe56a4827ee5ef2ba248dae.79b71e4b.webp";function C(e){let a=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",strong:"strong",h2:"h2"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a.h1,{id:"21-如何使用-validationpipe-验证-post-请求参数",children:["21. 如何使用 ValidationPipe 验证 post 请求参数",(0,s.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#21-如何使用-validationpipe-验证-post-请求参数",children:"#"})]}),"\n",(0,s.jsx)(a.p,{children:"上节我们学了 pipe 来对参数做验证和转换，但那些都是 get 请求的参数，如果是 post 请求呢？"}),"\n",(0,s.jsx)(a.p,{children:"post 请求的数据是通过 @Body 装饰器来取，并且要有一个 dto class 来接收："}),"\n",(0,s.jsx)(a.p,{children:"（dto 是 data transfer object，数据传输对象，用于封装请求体的数据）"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"我们用 postman 来发个 post 请求。"}),"\n",(0,s.jsxs)(a.p,{children:["(postman 在这里下载： ",(0,s.jsx)(a.a,{href:"https://www.postman.com/downloads",target:"_blank",rel:"noopener noreferrer",children:"https://www.postman.com/downloads"}),")"]}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:F,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"content-type 指定为 json。"}),"\n",(0,s.jsx)(a.p,{children:"点击 send，就可以看到服务端接收到了数据，并且把它转为了 dto 类的对象："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"但如果我们 age 传一个浮点数，服务端也能正常接收："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"因为它也是 number。"}),"\n",(0,s.jsx)(a.p,{children:"而这很可能会导致后续的逻辑出错。"}),"\n",(0,s.jsx)(a.p,{children:"所以我们要对他做参数验证。"}),"\n",(0,s.jsx)(a.p,{children:"怎么做呢？"}),"\n",(0,s.jsx)(a.p,{children:"这就需要用到这节的 ValidationPipe 了。"}),"\n",(0,s.jsx)(a.p,{children:"它需要两个依赖包："}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{children:"npm install class-validator class-transformer\n"})}),"\n",(0,s.jsx)(a.p,{children:"然后在 @Body 里添加这个 pipe："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"在 dto 这里，用 class-validator 包的 @IsInt 装饰器标记一下："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"再次请求，你就会发现它检查出了参数里的错误："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"那它是怎么实现的呢？"}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.a,{href:"https://www.npmjs.com/package/class-validator",target:"_blank",rel:"noopener noreferrer",children:"class-validator"})," 包提供了基于装饰器声明的规则对对象做校验的功能："]}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsxs)(a.p,{children:["而 ",(0,s.jsx)(a.a,{href:"https://www.npmjs.com/package/class-transformer",target:"_blank",rel:"noopener noreferrer",children:"class-transformer"})," 则是把一个普通对象转换为某个 class 的实例对象的："]}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"这两者一结合，那 ValidationPipe 是怎么实现的不就想明白了么："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.strong,{children:"我们声明了参数的类型为 dto 类，pipe 里拿到这个类，把参数对象通过 class-transformer 转换为 dto 类的对象，之后再用 class-validator 包来对这个对象做验证。"})}),"\n",(0,s.jsx)(a.p,{children:"我们自己写写看："}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-javascript",children:"import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToInstance } from 'class-transformer';\n\n@Injectable()\nexport class MyValidationPipe implements PipeTransform<any> {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype) {\n      return value;\n    }\n    const object = plainToInstance(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('参数验证失败');\n    }\n    return value;\n  }\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:"pipe 里拿到的 metatype 就是这部分："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"如果没有声明这部分，那就没法转换和验证，直接返回 value。"}),"\n",(0,s.jsx)(a.p,{children:"否则，通过 class-transformer 包的 plainToInstance 把普通对象转换为 dto class 的实例对象。"}),"\n",(0,s.jsx)(a.p,{children:"之后调用 class-validator 包的 validate api 对它做验证。如果验证不通过，就抛一个异常。"}),"\n",(0,s.jsx)(a.p,{children:"我们来用下看："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"替换为我们自己实现的 MyValidationPipe。"}),"\n",(0,s.jsx)(a.p,{children:"再次请求下："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"确实检查出了错误。"}),"\n",(0,s.jsx)(a.p,{children:"当然，我们做的并不够完善，还是直接用内置的 ValidationPipe 好了。"}),"\n",(0,s.jsx)(a.p,{children:"pipe 里也是可以注入依赖的："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"比如，我们指定 @Inject 注入 token 为 validation_options 的对象。"}),"\n",(0,s.jsx)(a.p,{children:"因为标记了 @Optional，没找到对应的 provider 也不会报错："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"但当我们在 module 里添加了这个 provider："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"就可以正常注入了："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"当然，这种方式就不能用 new 的方式了："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"直接指定 class，让 Nest 去创建对象放到 ioc 容器里。"}),"\n",(0,s.jsx)(a.p,{children:"如果是全局的 pipe，要通过这种方式来创建才能注入依赖："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"这就和我们之前创建全局 interceptor 一样。"}),"\n",(0,s.jsx)(a.p,{children:"同理，其余的 filter、guard 也可以通过这种方式声明为全局生效的："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"现在我们就可以把 handler 里的 ValidationPipe 去掉了"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"再次访问，它依然是生效的："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"当然，这里我们没有注入什么依赖，所以这种方式也可以："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"会用 ValidationPipe 之后，我们回过头来再看看 class-validator 都支持哪些验证方式："}),"\n",(0,s.jsx)(a.p,{children:"我们声明这样一个 dto class："}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-javascript",children:"import { Contains, IsDate, IsEmail, IsFQDN, IsInt, Length, Max, Min } from 'class-validator';\n\nexport class Ppp {\n    @Length(10, 20)\n    title: string;\n  \n    @Contains('hello')\n    text: string;\n  \n    @IsInt()\n    @Min(0)\n    @Max(10)\n    rating: number;\n  \n    @IsEmail()\n    email: string;\n  \n    @IsFQDN()\n    site: string;\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:"其中 @IsFQDN 是是否是域名的意思。"}),"\n",(0,s.jsx)(a.p,{children:"然后添加一个 post 的 handler："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"在 postman 里发送 post 请求。"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-json",children:'{\n    "title": "aaaaaaaaaaaaaaa",\n    "text": "hello aaa",\n    "rating": 10,\n    "email": "aaa@qq.com",\n    "site": "aaa.guang.com",\n    "createDate": "2023-05-28T01:45:37.803Z"\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:"参数正确的时候是不会报错的。"}),"\n",(0,s.jsx)(a.p,{children:"当参数不正确，ValidationPipe 就会返回 class-validator 的报错："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,s.jsx)(a.p,{children:"这个错误消息也是可以定制的："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsx)(a.p,{children:"添加一个 options 对象，传入 message 函数，打印下它的参数："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,s.jsx)(a.p,{children:"可以拿到对象、属性名、属性值、class 名等各种信息，然后你可以返回自定义的 message："}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-typescript",children:"@Length(10, 20, {\n    message({targetName, property, value, constraints}) {\n        return `${targetName} 类的 ${property} 属性的值 ${value} 不满足约束: ${constraints}`\n    }\n})\ntitle: string;\n"})}),"\n",(0,s.jsx)(a.p,{children:"再次访问，返回的就是自定义的错误消息："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(a.p,{children:["更多的装饰器可以看 ",(0,s.jsx)(a.a,{href:"https://www.npmjs.com/package/class-validator",target:"_blank",rel:"noopener noreferrer",children:"class-validator 文档"}),"。"]}),"\n",(0,s.jsxs)(a.p,{children:["案例代码在",(0,s.jsx)(a.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/pipe-test",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,s.jsxs)(a.h2,{id:"总结",children:["总结",(0,s.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(a.p,{children:"接收 post 请求的方式是声明一个 dto class，然后通过 @Body 来取请求体来注入值。"}),"\n",(0,s.jsx)(a.p,{children:"对它做验证要使用 ValidationPipe。"}),"\n",(0,s.jsx)(a.p,{children:"它的实现原理是基于 class-tranformer 把参数对象转换为 dto class 的对象，然后通过 class-validator 基于装饰器对这个对象做验证。"}),"\n",(0,s.jsx)(a.p,{children:"我们可以自己实现这样的 pipe，pipe 里可以注入依赖。"}),"\n",(0,s.jsx)(a.p,{children:"如果是全局 pipe 想注入依赖，需要通过 APP_PIPE 的 token 在 AppModule 里声明 provider。"}),"\n",(0,s.jsx)(a.p,{children:"class-validator 支持很多种验证规则，比如邮箱、域名、长度、值的范围等，而且错误消息也可以自定义。"}),"\n",(0,s.jsx)(a.p,{children:"ValidationPipe 是非常常用的 pipe，后面会大量用到。"})]})}function R(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:a}=Object.assign({},(0,i.ah)(),e.components);return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(C,{...e})}):C(e)}let S=R;R.__RSPRESS_PAGE_META={},R.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F21.%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20ValidationPipe%20%E9%AA%8C%E8%AF%81%20post%20%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"21. 如何使用 ValidationPipe 验证 post 请求参数",headingTitle:"21. 如何使用 ValidationPipe 验证 post 请求参数",frontmatter:{}}}}]);