"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["21731"],{591643:function(e,n,t){t.r(n),t.d(n,{default:()=>b});var r=t(552676),o=t(740453);let a=t.p+"static/image/4b32ca26ef0c3cb4e8c6d5bd2c3b31a3.1e1d4c55.webp",s=t.p+"static/image/00b01f5dcfe4d2762fdfdc6c13aa9b5f.eaeae3cc.webp",c=t.p+"static/image/8a1e8ae8c7d24a783134273ff9a3126b.28176a99.webp",i=t.p+"static/image/3d335ed1fea6c503fe40c904142130bb.2d5c4525.webp",l=t.p+"static/image/b8c927bf867e976071cbcff889e5079d.c2343e74.webp",h=t.p+"static/image/ceab8e36d858c2f4c6160b1371d759bb.04076f87.webp",d=t.p+"static/image/b7fca338ef1f22a2c2b3883e75c72da5.776b6844.webp",m=t.p+"static/image/a9f7132873ab82982d1eb92e70ec3501.3b325eaa.webp",p=t.p+"static/image/718a1ad4cda8c05a86c4fae1273acd01.7cec165e.webp",x=t.p+"static/image/4fa46af423d82153d3fd3d3a3577225f.fc327a3d.webp",g=t.p+"static/image/92b47f94e03863208402ce3774fdad00.46e6f49e.webp";function f(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",img:"img",h2:"h2",pre:"pre",code:"code",strong:"strong"},(0,o.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"10样式注入如何实现一个主题化功能",children:["10.样式注入：如何实现一个主题化功能？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10样式注入如何实现一个主题化功能",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["仓库地址： ",(0,r.jsx)(n.a,{href:"https://github.com/czm1290433700/nextjs-demo",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/czm1290433700/nextjs-demo"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"前几节课我们从环境配置，到基础页面、路由、接口层，全链路讲解了一个简单的服务器端页面是如何去开发的。我们还学习了 Nextjs 的通用能力以及最新的 headless-CMS Strapi 是怎么轻量灵活地搭建一个官网运营后台系统的，相信大家对于官网开发整体的链路已经有了比较深的认识。"}),"\n",(0,r.jsx)(n.p,{children:"从这一节课开始，我们将结合具体的需求场景，case by case 去实现几个常见的 C 端需求，来帮助大家应对迭代中的一些复杂场景。"}),"\n",(0,r.jsxs)(n.p,{children:["这节课我们就来学习官网中最常见的需求 -- 主题化的实现。不管是",(0,r.jsx)(n.a,{href:"https://douyinfe.com/",target:"_blank",rel:"noopener noreferrer",children:"抖音前端技术团队官网"}),"，还是字节最新开源的 UI 组件库 ",(0,r.jsx)(n.a,{href:"https://semi.design/zh-CN/",target:"_blank",rel:"noopener noreferrer",children:"Semi"}),"，都有不同风格的官网体系展示，以 Semi 为例，它的官网有包含默认的样式："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"也有暗黑色调的展示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"甚至还可以自定义主题，提供不同的酷炫展示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"那么针对这种效果，我们应该怎么去实现呢？难道对每个主题都定义一套样式？"}),"\n",(0,r.jsxs)(n.h2,{id:"基础色调的变量抽离",children:["基础色调的变量抽离",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础色调的变量抽离",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"通过观察我们可以发现，主题化的功能对于 DOM 的结构变化不大，往往都是针对色调进行切换。顺着这个思路，如果我们定义两套变量，是不是就完成了对两套主题的配置？根据不同的主题，我们可以在 html 标签上来固定两个属性来区分，方案确定了，我们来尝试做做看。"}),"\n",(0,r.jsx)(n.p,{children:"在全局样式中定义两套我们之前使用到的色调，包括字体和背景等颜色，把我们之前定义的组件样式抽出来放在这里就可以，保证所有的色调都通过变量的方式来引用。后面我们会通过在 html 中加上 data-theme 属性来区分当前应该使用哪套样式。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./pages/global.scss\nhtml[data-theme="dark"] {\n  --primary-color: #ffffff; // 主要的字体颜色\n  --primary-background-color: rgba(14, 14, 14, 1); // 主要的背景色\n  --footer-background-color: rgba(36, 36, 36, 1); // footer组件的背景色\n  --navbar-background-color: rgba(0, 0, 0, 0.5); // navbar组件的背景色\n  --secondary-color: rgba(255, 255, 255, 0.5); // 次一级，色值没那么显眼的字体颜色\n  --link-color: #34a8eb;  // 链接 hover 上去的颜色\n}\n\nhtml[data-theme="light"] {\n  --primary-color: #333333;\n  --primary-background-color: rgba(255, 255, 255, 1);\n  --footer-background-color: #f4f5f5;\n  --navbar-background-color: rgba(255, 255, 255, 0.5);\n  --secondary-color: #666666;\n  --link-color: #0070f3;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后我们需要把这个文件在入口文件引用一下。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./pages/_app.tsx\nimport "./global.scss";\n// ...\n'})}),"\n",(0,r.jsx)(n.p,{children:"接下来就是把这些定义的变量去替换原来我们样式中给的固定色值了，以 footer 组件举例，改造之后样式文件如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// ./components/footer/styles.modules.scss\n.footer {\n  padding: 70px 145px;\n  background-color: var(--footer-background-color);\n  .topArea {\n    display: flex;\n    justify-content: space-between;\n\n    .footerTitle {\n      font-weight: 500;\n      font-size: 36px;\n      line-height: 36px;\n      color: var(--primary-color);\n      margin: 0;\n    }\n\n    .linkListArea {\n      display: flex;\n      .linkArea {\n        display: flex;\n        flex-direction: column;\n        margin-left: 160px;\n        .title {\n          font-weight: 500;\n          font-size: 14px;\n          line-height: 20px;\n          color: var(--primary-color);\n          margin-bottom: 40px;\n        }\n\n        .links {\n          display: flex;\n          flex-direction: column;\n          font-weight: 400;\n          font-size: 14px;\n          line-height: 20px;\n\n          .link {\n            color: var(--primary-color);\n            cursor: pointer;\n            margin-bottom: 24px;\n          }\n\n          .disabled {\n            color: var(--secondary-color);\n            cursor: not-allowed;\n            margin-bottom: 24px;\n          }\n        }\n      }\n    }\n  }\n\n  .bottomArea {\n    display: flex;\n    justify-content: space-between;\n    .codeArea {\n      display: flex;\n      flex-direction: column;\n      .text {\n        color: var(--secondary-color);\n      }\n    }\n    .numArea {\n      color: var(--secondary-color);\n      display: flex;\n      flex-direction: column;\n      align-items: flex-end;\n      font-weight: 400;\n      font-size: 14px;\n      line-height: 20px;\n\n      span {\n        margin-bottom: 12px;\n      }\n\n      .publicLogo {\n        display: flex;\n\n        .logo {\n          margin-right: 4px;\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["剩下的改造工作同学们可以结合上面和代码仓库的示例完成，这里就不贴代码了，只需要把之前我们定义的样式换成对应的 ",(0,r.jsx)(n.code,{children:"var(...)"}),"变量就好。"]}),"\n",(0,r.jsxs)(n.h2,{id:"图片的主题化配置",children:["图片的主题化配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#图片的主题化配置",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"然后对于图片的主题化，有两种方式，一种是针对一般固定不变的图片，我们采用同样定义的方式。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./pages/global.scss\nhtml[data-theme="dark"] {\n  --primary-color: #ffffff;\n  --primary-background-color: rgba(14, 14, 14, 1);\n  --footer-background-color: rgba(36, 36, 36, 1);\n  --navbar-background-color: rgba(0, 0, 0, 0.5);\n  --secondary-color: rgba(255, 255, 255, 0.5);\n  --link-color: #34a8eb;\n  --navbar-icon: url("../public/logo_dark.png");\n  --theme-icon: url("../public/theme_dark.png");\n}\n\nhtml[data-theme="light"] {\n  --primary-color: #333333;\n  --primary-background-color: rgba(255, 255, 255, 1);\n  --footer-background-color: #f4f5f5;\n  --navbar-background-color: rgba(255, 255, 255, 0.5);\n  --secondary-color: #666666;\n  --link-color: #0070f3;\n  --navbar-icon: url("../public/logo_light.png");\n  --theme-icon: url("../public/theme_light.png");\n}\n\nhtml,\nbody {\n  padding: 0;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\n    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n* {\n  box-sizing: border-box;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"另一种是配置中的图片，可能会频繁变化，这种我们只需要在 Strapi 中再加一个字段存不同主题的图片，然后在页面逻辑中，我们根据不同的主题去切换就可以。到这里主题化资源的前置工作就完成了，现在我们需要思考主题数据注入的时机和方式。"}),"\n",(0,r.jsxs)(n.h2,{id:"主题-context-的数据注入",children:["主题 Context 的数据注入",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#主题-context-的数据注入",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["样式和静态资源的方案确定了，我们来思考下一个问题，针对当前的主题，肯定有个地方需要进行缓存，我们应该使用哪种客户端缓存机制呢？主题化的功能往往是因为用户更喜欢这种色调，那我们用 localStorage 要更合适，因为相比 sessionStorage 只能保存当前会话的特点，localStorage可以长期保留，除非用户主动清除，这样我们可以保留用户的习惯，",(0,r.jsx)(n.strong,{children:"让他下一次访问的时候也可以保证是之前的主题。"})]}),"\n",(0,r.jsx)(n.p,{children:"那么应该怎么去注入这个缓存呢，如果我们随心所欲地去进行缓存注入操作，那我们页面中可能会分散各种缓存的逻辑，不符合单一职责原则，也不利于统一的维护和相关事件的绑定，所以我们需要在一处地方聚集主题相关的逻辑，然后再分别注入给每个页面对应的编辑方法。"}),"\n",(0,r.jsxs)(n.p,{children:["这里需要用到 React 的 ",(0,r.jsx)(n.a,{href:"https://reactjs.org/docs/hooks-reference.html#usecontext",target:"_blank",rel:"noopener noreferrer",children:"useContext"}),"，可能很多同学平时业务中不会去用这个 hook，它具有接受上下文，并将上下文进行注入的能力，这么说大家可能还不太能理解，但是如果提到 redux 大家应该就明白了，它们具备相同的能力，并且在 hook 发布后，redux 的 v6 版本也改造为了基于 React 的 Context 去实现数据的统一管理。"]}),"\n",(0,r.jsx)(n.p,{children:"那我们现在来实现一个 context 进行主题的注入。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./stores/theme.tsx\nimport React, { useState, useEffect, createContext } from "react";\nimport { Themes } from "@/constants/enum";\n\ninterface IThemeContextProps {\n  theme: Themes;\n  setTheme: (theme: Themes) => void;\n}\n\ninterface IProps {\n  children: JSX.Element;\n}\n\nexport const ThemeContext = createContext<IThemeContextProps>(\n  {} as IThemeContextProps\n);\n\nexport const ThemeContextProvider = ({ children }: IProps): JSX.Element => {\n  const [theme, setTheme] = useState<Themes>(Themes.light);\n\n  useEffect(() => {\n    const item = (localStorage.getItem("theme") as Themes) || Themes.light;\n    setTheme(item);\n    document.getElementsByTagName("html")[0].dataset.theme = item;\n  }, []);\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        theme,\n        setTheme: (currentTheme) => {\n          setTheme(currentTheme);\n          localStorage.setItem("theme", currentTheme);\n          document.getElementsByTagName("html")[0].dataset.theme = currentTheme;\n        },\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"其中 ThemeContext 是暴露出的变量，在全局注入后，每个路由页面都可以通过它来获取我们定义的 theme 和 setTheme 进行相关的业务操作，ThemeContextProvider 则是注入器，用于给需要的 DOM 进行上下文的注入。现在我们在全局页面注入我们写的 context。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./pages/_app.tsx\nimport type { AppProps, AppContext } from "next/app";\nimport App from "next/app";\nimport { Layout, ILayoutProps } from "@/components/layout";\nimport Head from "next/head";\nimport axios from "axios";\nimport { LOCALDOMAIN } from "@/utils";\nimport { ThemeContextProvider } from "@/stores/theme";\nimport "./global.scss";\n\nconst MyApp = (data: AppProps & ILayoutProps) => {\n  const { Component, pageProps, navbarData, footerData } = data;\n\n  return (\n    <div>\n      <Head>\n        <title>A Demo for 《深入浅出SSR官网开发指南》</title>\n        <meta\n          name="description"\n          content="A Demo for 《深入浅出SSR官网开发指南》"\n        />\n        <link rel="icon" href="/favicon.ico" />\n      </Head>\n      <ThemeContextProvider>\n        <Layout navbarData={navbarData} footerData={footerData}>\n          <Component {...pageProps} />\n        </Layout>\n      </ThemeContextProvider>\n    </div>\n  );\n};\n\nMyApp.getInitialProps = async (context: AppContext) => {\n  const pageProps = await App.getInitialProps(context);\n  const { data = {} } = await axios.get(`${LOCALDOMAIN}/api/layout`);\n\n  return {\n    ...pageProps,\n    ...data,\n  };\n};\n\nexport default MyApp;\n'})}),"\n",(0,r.jsx)(n.p,{children:"这个完成后主题化的大体功能就完成了，我们在 navbar 加一个主题化切换的入口。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./components/navbar/index.tsx\nimport { FC, useContext } from "react";\nimport styles from "./styles.module.scss";\nimport { ThemeContext } from "@/stores/theme";\nimport { Themes } from "@/constants/enum";\n\nexport interface INavBarProps {}\n\nexport const NavBar: FC<INavBarProps> = ({}) => {\n  const { setTheme } = useContext(ThemeContext);\n\n  return (\n    <div className={styles.navBar}>\n      <a href="http://localhost:3000/">\n        <div className={styles.logo_icon}></div>\n      </a>\n      <div\n        className={styles.theme_icon}\n        onClick={(): void => {\n          if (localStorage.getItem("theme") === Themes.light) {\n            setTheme(Themes.dark);\n          } else {\n            setTheme(Themes.light);\n          }\n        }}\n      ></div>\n    </div>\n  );\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后我们启动项目试试（除 demo 仓库，同学们还要记得启动一下 cms 仓库，后续为方便，我们统一称启动项目)。可以看到已经可以实现主题化的功能了。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"多进程场景下的主题同步",children:["多进程场景下的主题同步",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#多进程场景下的主题同步",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"上面我们实现了一个基本主题化功能，现在来思考一个问题，我们知道浏览器是多进程的，每个开启的页面都对应到一个进程，这样可以有效地避免页面之间的数据共享及一个报错页面带崩所有页面的情况。"}),"\n",(0,r.jsx)(n.p,{children:"那么针对我们这个场景，现在的实现，如果用户开了多个页面来访问我们的站点，其中一个页面的主题切换，另一个页面是感知不到的，这样一个浏览器下会有多个主题的页面，其实对用户体验上来说是不太好的。出于追求极致考虑，我们可以优化一下这个问题，其实也很简单，只需要监听浏览器的缓存修改事件，然后再次执行初始化的操作就好了。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./stores/theme.tsx\nimport React, { useState, useEffect, createContext } from "react";\nimport { Themes } from "@/constants/enum";\n\ninterface IThemeContextProps {\n  theme: Themes;\n  setTheme: (theme: Themes) => void;\n}\n\ninterface IProps {\n  children: JSX.Element;\n}\n\nexport const ThemeContext = createContext<IThemeContextProps>(\n  {} as IThemeContextProps\n);\n\nexport const ThemeContextProvider = ({ children }: IProps): JSX.Element => {\n  const [theme, setTheme] = useState<Themes>(Themes.light);\n\n  // 监听本地缓存来同步不同页面间的主题\n  useEffect(() => {\n    const checkTheme = (): void => {\n      const item = (localStorage.getItem("theme") as Themes) || Themes.light;\n      setTheme(item);\n      document.getElementsByTagName("html")[0].dataset.theme = item;\n    };\n    checkTheme();\n    window.addEventListener("storage", checkTheme);\n    return (): void => {\n      window.removeEventListener("storage", checkTheme);\n    };\n  }, []);\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        theme,\n        setTheme: (currentTheme) => {\n          setTheme(currentTheme);\n          localStorage.setItem("theme", currentTheme);\n          document.getElementsByTagName("html")[0].dataset.theme = currentTheme;\n        },\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"这时候我们尝试打开两个页面，修改其中一个，发现另一个也会同步更新为一样的主题了。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"闪烁场景的优化",children:["闪烁场景的优化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#闪烁场景的优化",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"到这里主题化其实就已经实现了，不过还有一个小问题，因为我们在服务器端是获取不到当前的主题的，我们通过 useEffect 钩子来获取主题进行样式的渲染，这样其实会有一个主题切换的过程，在低网速或是快速切换场景下会有比较明显的闪烁，我们可以在钩子处设置断点查看（当前缓存是黑色主题）。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"可以看到走到钩子的时候，是还没办法进行对应主题样式渲染的，那我们应该怎么解决这个问题呢？我们只需要在 HTML 中引入对应的 script，确保可以在交互之前进行主题的初始化就行了，Nextjs 有提供这个能力，我们在 pages 目录下创建 _document.tsx，然后引入对应的内部脚本。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// ./pages/_document.tsx\nimport { Html, Head, Main, NextScript } from \"next/document\";\nimport Script from \"next/script\";\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n        <Script id=\"theme-script\" strategy=\"beforeInteractive\">\n          {`const item = localStorage.getItem('theme') || 'light';\n          localStorage.setItem('theme', item);\n          document.getElementsByTagName('html')[0].dataset.theme = item;`}\n        <\/Script>\n      </body>\n    </Html>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"其中 id 是用于 Nextjs 检索， 而 beforeInteractive 表明这个脚本的执行策略是在交互之前，会被默认放到 head 中，现在我们再来试试效果，发现走到钩子的时候已经可以正常去初始化了。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"切换主题的时候，我们发现中间的内容会先展示，这个是因为中间的部分还是静态数据，只需要换用 strapi 接管，通过接口请求就可以了，后续章节我们会对首页有较大的调整，那时会统一配置，这里可以暂时先用静态数据。到这里我们主题化的功能就实现完成了。"}),"\n",(0,r.jsxs)(n.h2,{id:"小彩蛋",children:["小彩蛋",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小彩蛋",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果访问 ",(0,r.jsx)(n.a,{href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000"}),", 和",(0,r.jsx)(n.a,{href:"http://127.0.0.1:3000",target:"_blank",rel:"noopener noreferrer",children:"http://127.0.0.1:3000"}),", 我们会发现主题是不能共享的，因为这两者虽然是同一个服务，但并不是同一域名，localstorage之间是不会互相共享的，所以会有独立的主题。"]}),"\n",(0,r.jsxs)(n.p,{children:["后续学习大家注意一下这个问题，可以使用 ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:3000",target:"_blank",rel:"noopener noreferrer",children:"http://127.0.0.1:3000"})," 进行本地访问，后续 Strapi 配置的链接字段将包含完整 ip 和 端口。"]}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["这节课是",(0,r.jsx)(n.strong,{children:"常见需求进阶篇"}),"的第一节课，这节课我们学习了怎么实现一个主题化的功能，我们通过变量定义的方式去定义我们之前固定的相关色调和静态资源，然后通过缓存的方式去存储当前的主题，并向 html 标签中注入 data-theme 进行相关标识，来进行主题样式的对应。"]}),"\n",(0,r.jsx)(n.p,{children:"同时我们还学习了 useContext 的用法，它与 redux 等状态管理库的能力类似，是它们的底层实现方式，通过 useContext 定义注入器，我们对主题相关的代码进行了统一维护，满足了代码封装的单一职责原则。"}),"\n",(0,r.jsx)(n.p,{children:"相信一节课学习下来，同学们的收获还是很多的，因为篇幅的关系，一些代码细节我们没有逐字逐句去解释，同学们可以结合代码仓库进行调试，去理解整条链路是怎么实现的。"}),"\n",(0,r.jsx)(n.p,{children:"官网等 C 端应用中，常常会有一些复杂的动画来提高用户的交互体验，为了精准还原样式稿的设计，对于动画的实现，我们往往需要逐帧去对当前的动画状态进行描述。所以下一节课我们将来学习如何对复杂帧动画进行调试和实现。"})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}let b=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["SSR%20%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AE%98%E7%BD%91%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F10.%E6%A0%B7%E5%BC%8F%E6%B3%A8%E5%85%A5%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%BB%E9%A2%98%E5%8C%96%E5%8A%9F%E8%83%BD%EF%BC%9F.md"]={toc:[{text:"基础色调的变量抽离",id:"基础色调的变量抽离",depth:2},{text:"图片的主题化配置",id:"图片的主题化配置",depth:2},{text:"主题 Context 的数据注入",id:"主题-context-的数据注入",depth:2},{text:"多进程场景下的主题同步",id:"多进程场景下的主题同步",depth:2},{text:"闪烁场景的优化",id:"闪烁场景的优化",depth:2},{text:"小彩蛋",id:"小彩蛋",depth:2},{text:"小结",id:"小结",depth:2}],title:"10.样式注入：如何实现一个主题化功能？",headingTitle:"10.样式注入：如何实现一个主题化功能？",frontmatter:{}}}}]);