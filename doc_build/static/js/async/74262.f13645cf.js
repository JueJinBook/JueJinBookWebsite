"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["74262"],{488983:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var i=r(552676),t=r(740453);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",img:"img",ol:"ol",li:"li"},(0,t.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"41源码-9如履薄冰--懒惰删除的巨大牺牲",children:["41源码 9：如履薄冰 —— 懒惰删除的巨大牺牲",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41源码-9如履薄冰--懒惰删除的巨大牺牲",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"前面我们讲了 Redis 懒惰删除的特性，它是使用异步线程对已删除的节点进行内存回收。但是还不够深入，所以本节我们要对异步线程逻辑处理的细节进行分析，看看 Antirez 是如何实现异步线程处理的。"}),"\n",(0,i.jsxs)(n.p,{children:["异步线程在 Redis 内部有一个特别的名称，它就是",(0,i.jsx)(n.code,{children:"BIO"}),"，全称是",(0,i.jsx)(n.code,{children:"Background IO"}),"，意思是在背后默默干活的 IO 线程。不过内存回收本身并不是什么 IO 操作，只是 CPU 的计算消耗可能会比较大而已。"]}),"\n",(0,i.jsxs)(n.h2,{id:"懒惰删除的最初实现不是异步线程",children:["懒惰删除的最初实现不是异步线程",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#懒惰删除的最初实现不是异步线程",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Antirez 实现懒惰删除时，它并不是一开始就想到了异步线程。最初的尝试是在主线程里，使用类似于字典渐进式搬迁那样来实现渐进式删除回收。比如对于一个非常大的字典来说，懒惰删除是采用类似于 scan 操作的方法，通过遍历第一维数组来逐步删除回收第二维链表的内容，等到所有链表都回收完了，再一次性回收第一维数组。这样也可以达到删除大对象时不阻塞主线程的效果。"}),"\n",(0,i.jsx)(n.p,{children:"但是说起来容易做起来却很难。渐进式回收需要仔细控制回收频率，它不能回收的太猛，这会导致 CPU 资源占用过多，也不能回收的蜗牛慢，因为内存回收不及时可能导致内存持续增长。"}),"\n",(0,i.jsx)(n.p,{children:"Antirez 需要采用合适的自适应算法来控制回收频率。他首先想到的是检测内存增长的趋势是增长 (+1) 还是下降 (-1) 来渐进式调整回收频率系数，这样的自适应算法实现也很简单。但是测试后发现在服务繁忙的时候，QPS 会下降到正常情况下 65% 的水平，这点非常致命。"}),"\n",(0,i.jsx)(n.p,{children:"所以 Antirez 才使用了如今使用的方案——异步线程。异步线程这套方案就简单多了，释放内存不用为每种数据结构适配一套渐进式释放策略，也不用搞个自适应算法来仔细控制回收频率。将对象从全局字典中摘掉，然后往队列里一扔，主线程就干别的去了。异步线程从队列里取出对象来，直接走正常的同步释放逻辑就可以了。"}),"\n",(0,i.jsx)(n.p,{children:"不过使用异步线程也是有代价的，主线程和异步线程之间在内存回收器 (jemalloc) 的使用上存在竞争。这点竞争消耗是可以忽略不计的，因为 Redis 的主线程在内存的分配与回收上花的时间相对整体运算时间而言是极少的。"}),"\n",(0,i.jsxs)(n.h2,{id:"异步线程方案其实也相当复杂",children:["异步线程方案其实也相当复杂",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#异步线程方案其实也相当复杂",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"刚才上面说异步线程方案很简单，为什么这里又说它很复杂呢？因为有一点我们之前没有想到。这点非常可怕，严重阻碍了异步线程方案的改造，那就是 Redis 的内部对象有共享机制。"}),"\n",(0,i.jsxs)(n.p,{children:["比如集合的并集操作 ",(0,i.jsx)(n.code,{children:"sunionstore"})," 用来将多个集合合并成一个新集合"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'> sadd src1 value1 value2 value3\n(integer) 3\n> sadd src2 value3 value4 value5\n(integer) 3\n> sunionstore dest src1 src2\n(integer) 5\n> smembers dest\n1) "value2"\n2) "value3"\n3) "value1"\n4) "value4"\n5) "value5"\n'})}),"\n",(0,i.jsx)(n.p,{children:"我们看到新的集合包含了旧集合的所有元素。但是这里有一个我们没看到的 trick。那就是底层的字符串对象被共享了。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/8/7/165133443f6216c8?w=697&h=372&f=png&s=29829",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"为什么对象共享是懒惰删除的巨大障碍呢？因为懒惰删除相当于彻底砍掉某个树枝，将它扔到异步删除队列里去。注意这里必须是彻底删除，而不能藕断丝连。如果底层对象是共享的，那就做不到彻底删除。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/8/7/165133bdc0df4a14?w=671&h=332&f=png&s=35963",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以 Antirez 为了支持懒惰删除，将对象共享机制彻底抛弃，它将这种对象结构称为「share-nothing」，也就是无共享设计。但是甩掉对象共享谈何容易！这种对象共享机制散落在源代码的各个角落，牵一发而动全身，改起来犹如在布满地雷的道路上小心翼翼地行走。"}),"\n",(0,i.jsx)(n.p,{children:"不过 Antirez 还是决心改了，他将这种改动描述为「绝望而疯狂」，可见改动之大之深之险，前后花了好几周的时间才改完。不过效果也是很明显的，对象的删除操作再也不会导致主线程卡顿了。"}),"\n",(0,i.jsxs)(n.h2,{id:"异步删除的实现",children:["异步删除的实现",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#异步删除的实现",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"主线程需要将删除任务传递给异步线程，它是通过一个普通的双向链表来传递的。因为链表需要支持多线程并发操作，所以它需要有锁来保护。"}),"\n",(0,i.jsxs)(n.p,{children:["执行懒惰删除时，Redis 将删除操作的相关参数封装成一个",(0,i.jsx)(n.code,{children:"bio_job"}),"结构，然后追加到链表尾部。异步线程通过遍历链表摘取 job 元素来挨个执行异步任务。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"struct bio_job {\n    time_t time;  // 时间字段暂时没有使用，应该是预留的\n    void *arg1, *arg2, *arg3;\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"我们注意到这个 job 结构有三个参数，为什么删除对象需要三个参数呢？我们继续看代码："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"    /* What we free changes depending on what arguments are set:\n     * arg1 -> free the object at pointer.\n     * arg2 & arg3 -> free two dictionaries (a Redis DB).\n     * only arg3 -> free the skiplist. */\n    if (job->arg1)\n        // 释放一个普通对象，string/set/zset/hash 等等，用于普通对象的异步删除\n        lazyfreeFreeObjectFromBioThread(job->arg1);\n    else if (job->arg2 && job->arg3)\n        // 释放全局 redisDb 对象的 dict 字典和 expires 字典，用于 flushdb\n        lazyfreeFreeDatabaseFromBioThread(job->arg2,job->arg3);\n    else if (job->arg3)\n        // 释放 Cluster 的 slots_to_keys 对象，参见源码篇的「基数树」小节\n        lazyfreeFreeSlotsMapFromBioThread(job->arg3);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["可以看到通过组合这三个参数可以实现不同结构的释放逻辑。接下来我们继续追踪普通对象的异步删除",(0,i.jsx)(n.code,{children:"lazyfreeFreeObjectFromBioThread"}),"是如何进行的，请仔细阅读代码注释。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'void lazyfreeFreeObjectFromBioThread(robj *o) {\n    decrRefCount(o); // 降低对象的引用计数，如果为零，就释放\n    atomicDecr(lazyfree_objects,1); // lazyfree_objects 为待释放对象的数量，用于统计\n}\n\n// 减少引用计数\nvoid decrRefCount(robj *o) {\n    if (o->refcount == 1) {\n        // 该释放对象了\n        switch(o->type) {\n        case OBJ_STRING: freeStringObject(o); break;\n        case OBJ_LIST: freeListObject(o); break;\n        case OBJ_SET: freeSetObject(o); break;\n        case OBJ_ZSET: freeZsetObject(o); break;\n        case OBJ_HASH: freeHashObject(o); break;  // 释放 hash 对象，继续追踪\n        case OBJ_MODULE: freeModuleObject(o); break;\n        case OBJ_STREAM: freeStreamObject(o); break;\n        default: serverPanic("Unknown object type"); break;\n        }\n        zfree(o);\n    } else {\n        if (o->refcount <= 0) serverPanic("decrRefCount against refcount <= 0");\n        if (o->refcount != OBJ_SHARED_REFCOUNT) o->refcount--; // 引用计数减 1\n    }\n}\n\n// 释放 hash 对象\nvoid freeHashObject(robj *o) {\n    switch (o->encoding) {\n    case OBJ_ENCODING_HT:\n        // 释放字典，我们继续追踪\n        dictRelease((dict*) o->ptr);\n        break;\n    case OBJ_ENCODING_ZIPLIST:\n        // 如果是压缩列表可以直接释放\n        // 因为压缩列表是一整块字节数组\n        zfree(o->ptr);\n        break;\n    default:\n        serverPanic("Unknown hash encoding type");\n        break;\n    }\n}\n\n// 释放字典，如果字典正在迁移中，ht[0] 和 ht[1] 分别存储旧字典和新字典\nvoid dictRelease(dict *d)\n{\n    _dictClear(d,&d->ht[0],NULL); // 继续追踪\n    _dictClear(d,&d->ht[1],NULL);\n    zfree(d);\n}\n\n// 这里要释放 hashtable 了\n// 需要遍历第一维数组，然后继续遍历第二维链表，双重循环\nint _dictClear(dict *d, dictht *ht, void(callback)(void *)) {\n    unsigned long i;\n\n    /* Free all the elements */\n    for (i = 0; i < ht->size && ht->used > 0; i++) {\n        dictEntry *he, *nextHe;\n\n        if (callback && (i & 65535) == 0) callback(d->privdata);\n\n        if ((he = ht->table[i]) == NULL) continue;\n        while(he) {\n            nextHe = he->next;\n            dictFreeKey(d, he); // 先释放 key\n            dictFreeVal(d, he); // 再释放 value\n            zfree(he); // 最后释放 entry\n            ht->used--;\n            he = nextHe;\n        }\n    }\n    /* Free the table and the allocated cache structure */\n    zfree(ht->table); // 可以回收第一维数组了\n    /* Re-initialize the table */\n    _dictReset(ht);\n    return DICT_OK; /* never fails */\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"这些代码散落在多个不同的文件，我将它们凑到了一块便于读者阅读。从代码中我们可以看到释放一个对象要深度调用一系列函数，每种对象都有它独特的内存回收逻辑。"}),"\n",(0,i.jsxs)(n.h2,{id:"队列安全",children:["队列安全",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#队列安全",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"前面提到任务队列是一个不安全的双向链表，需要使用锁来保护它。当主线程将任务追加到队列之前它需要加锁，追加完毕后，再释放锁，还需要唤醒异步线程，如果它在休眠的话。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"void bioCreateBackgroundJob(int type, void *arg1, void *arg2, void *arg3) {\n    struct bio_job *job = zmalloc(sizeof(*job));\n\n    job->time = time(NULL);\n    job->arg1 = arg1;\n    job->arg2 = arg2;\n    job->arg3 = arg3;\n    pthread_mutex_lock(&bio_mutex[type]); // 加锁\n    listAddNodeTail(bio_jobs[type],job); // 追加任务\n    bio_pending[type]++; // 计数\n    pthread_cond_signal(&bio_newjob_cond[type]); // 唤醒异步线程\n    pthread_mutex_unlock(&bio_mutex[type]); // 释放锁\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"异步线程需要对任务队列进行轮训处理，依次从链表表头摘取元素逐个处理。摘取元素的时候也需要加锁，摘出来之后再解锁。如果一个元素都没有，它需要等待，直到主线程来唤醒它继续工作。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"// 异步线程执行逻辑\nvoid *bioProcessBackgroundJobs(void *arg) {\n...\n    pthread_mutex_lock(&bio_mutex[type]); // 先加锁\n    ...\n    // 循环处理\n    while(1) {\n        listNode *ln;\n\n        /* The loop always starts with the lock hold. */\n        if (listLength(bio_jobs[type]) == 0) {\n            // 对列空，那就睡觉吧\n            pthread_cond_wait(&bio_newjob_cond[type],&bio_mutex[type]);\n            continue;\n        }\n        /* Pop the job from the queue. */\n        ln = listFirst(bio_jobs[type]); // 获取队列头元素\n        job = ln->value;\n        /* It is now possible to unlock the background system as we know have\n         * a stand alone job structure to process.*/\n        pthread_mutex_unlock(&bio_mutex[type]); // 释放锁\n\n        // 这里是处理过程，为了省纸，就略去了\n        ...\n        \n        // 释放任务对象\n        zfree(job);\n\n        ...\n        \n        // 再次加锁继续处理下一个元素\n        pthread_mutex_lock(&bio_mutex[type]);\n        // 因为任务已经处理完了，可以放心从链表中删除节点了\n        listDelNode(bio_jobs[type],ln);\n        bio_pending[type]--; // 计数减 1\n    }\n"})}),"\n",(0,i.jsx)(n.p,{children:"研究完这些加锁解锁的代码后，我开始有点当心主线程的性能。我们都知道加锁解锁是一个相对比较耗时的操作，尤其是悲观锁最为耗时。如果删除很频繁，主线程岂不是要频繁加锁解锁。所以这里肯定还有优化空间，Java 的 ConcurrentLinkQueue 就没有使用这样粗粒度的悲观锁，它优先使用 cas 来控制并发。"}),"\n",(0,i.jsxs)(n.h2,{id:"思考",children:["思考",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考",children:"#"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Redis 还有其它地方用到了对象共享机制么？"}),"\n",(0,i.jsx)(n.li,{children:"Java 的 ConcurrentLinkQueue 具体是如何实现的？"}),"\n"]})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}let d=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["Redis%20%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F41%E6%BA%90%E7%A0%81%209%EF%BC%9A%E5%A6%82%E5%B1%A5%E8%96%84%E5%86%B0%20%E2%80%94%E2%80%94%20%E6%87%92%E6%83%B0%E5%88%A0%E9%99%A4%E7%9A%84%E5%B7%A8%E5%A4%A7%E7%89%BA%E7%89%B2.md"]={toc:[{text:"懒惰删除的最初实现不是异步线程",id:"懒惰删除的最初实现不是异步线程",depth:2},{text:"异步线程方案其实也相当复杂",id:"异步线程方案其实也相当复杂",depth:2},{text:"异步删除的实现",id:"异步删除的实现",depth:2},{text:"队列安全",id:"队列安全",depth:2},{text:"思考",id:"思考",depth:2}],title:"41源码 9：如履薄冰 —— 懒惰删除的巨大牺牲",headingTitle:"41源码 9：如履薄冰 —— 懒惰删除的巨大牺牲",frontmatter:{}}}}]);