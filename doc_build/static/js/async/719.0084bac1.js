"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["719"],{679444:function(n,e,s){n.exports=s.p+"static/image/04be26441e4e860f33c7c174439663b0.718d049f.webp"},934447:function(n,e,s){n.exports=s.p+"static/image/211aea91ae8ddcc0c6f7e0ba63b5fd57.ad7996bf.webp"},438236:function(n,e,s){n.exports=s.p+"static/image/33baa295a7992e94d8075f6458d73294.47921b51.webp"},481707:function(n,e,s){n.exports=s.p+"static/image/3ec207011e933bdee56aa1c59f09b08a.434d2e55.webp"},833657:function(n,e,s){n.exports=s.p+"static/image/414a519fadc7ed075c93e72963f166dd.802fbcd5.webp"},75345:function(n,e,s){n.exports=s.p+"static/image/743e328bf3d13bdc32fed2d6db04b6ae.b7850a64.webp"},342620:function(n,e,s){n.exports=s.p+"static/image/860a7c6933cfefca85a3a8963a7af424.9454b595.webp"},463106:function(n,e,s){n.exports=s.p+"static/image/c4436f7b5587883e3681fd3f821451d9.4fd293eb.webp"},737751:function(n,e,s){n.exports=s.p+"static/image/ca3bd5f802c9de4033a8c45b88b94f89.afde83ff.webp"},885610:function(n,e,s){n.exports=s.p+"static/image/e2ec33a3148a92b35636d489032ffcf6.1257686a.webp"},471328:function(n,e,s){s.r(e),s.d(e,{default:()=>$});var r=s(552676),i=s(740453),t=s(833657),c=s(342620),d=s(885610),a=s(679444),l=s(438236);let h=s.p+"static/image/308b3d6a18c1dceae3b5e393f5c7c31c.dc6ba7b7.webp",p=s.p+"static/image/4560dac855eed8584b2c9e215d6144c7.870639fd.webp";var o=s(481707);let j=s.p+"static/image/56dec807011ff82651efa2c2f37598e9.a912170a.webp",x=s.p+"static/image/8c2fa26a42f6564adb7c28935c7303f7.2e21193a.webp",m=s.p+"static/image/7cbf5323470844857028ccb9223aca6e.6de761b3.webp",g=s.p+"static/image/7ddc48184c6fde24e9128e47ca2a8d12.20db51c8.webp",b=s.p+"static/image/49103c953dc434c62e146dd093ebd02c.a401c38e.webp",u=s.p+"static/image/4c6023c4a4f91e7f6041d6de1a8c21b2.422fc941.webp";var f=s(737751);let y=s.p+"static/image/b1423306cfdf14620d80c5de9f4b73a5.062550d8.webp";var E=s(75345);let w=s.p+"static/image/646244a7cf4861ea1f7cf7e30661a2f3.8f353e41.webp",v=s.p+"static/image/65eca545c46869a808a55ccf413e1b94.d63bc45e.webp",R=s.p+"static/image/adbfb5fa2affd6f6a2f8abd186b89dd4.e4faeb81.webp",C=s.p+"static/image/49eab104073aae12acc78ab21b0cbd51.50811d01.webp";var A=s(934447);let _=s.p+"static/image/31cc69be1fd9430592a6ec5192b3166c.6a5ea5ec.webp",T=s.p+"static/image/382a693ffbed5c6944edf63461f60372.e33d71af.webp",S=s.p+"static/image/cbc5614a2f49f620cf0b87683d747d26.bd3a4ba3.webp",I=s.p+"static/image/ac5a3954eab84b11ce03e4973fa00583.1d3cb8b9.webp",N=s.p+"static/image/96fc590d954cc710ac943410ec465b33.48f7fa9c.webp",U=s.p+"static/image/607e224d828ec99b64e238e30650dad6.5aa6017b.webp",k=s.p+"static/image/dc43e3772d38d482235726375618dfa2.cd4fc2e5.webp",D=s.p+"static/image/1ccaeb295eb200b65ec5210ce3ce08e7.cb543736.webp",M=s.p+"static/image/610a764f9076ce597c1d3e4d1592641c.eea06fea.webp",P=s.p+"static/image/9b9f7398f90e386e9945c58e1cf589fa.525c14a4.webp",B=s.p+"static/image/58027b602835cc65c4147b4d970a8a38.ac781057.webp",O=s.p+"static/image/ff25eea2d5d6aa92b5b5a45612983c99.1c766f53.webp",H=s.p+"static/image/8506045ab2a67b233872682f7af8d174.05297526.webp",G=s.p+"static/image/bb721c50cc75012ea814d1adebc817b5.24d2c3e9.webp",q=s.p+"static/image/c8ef1a4fba8d64179c5f7741e6307c47.1878e0c8.webp",V=s.p+"static/image/791f1cab7464614020bdcafb1032d85c.9755997b.webp",L=s.p+"static/image/4bbba5a62c1e4b65f255918a921bd531.69e07a3a.webp";var F=s(463106);let z=s.p+"static/image/b3429318e7aca7d0d9c522b674512b54.58055f84.webp";function Q(n){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h2:"h2"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"111-会议室预订系统用户管理模块--用户注册",children:["111. 会议室预订系统：用户管理模块--用户注册",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#111-会议室预订系统用户管理模块--用户注册",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"前两节我们理清了需求、画了原型图，并且确定了技术选型、设计了数据库，划分了接口和模块。"}),"\n",(0,r.jsx)(e.p,{children:"这节我们正式开始写代码。"}),"\n",(0,r.jsx)(e.p,{children:"首先创建个 nest 项目："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"nest new meeting_room_booking_system_backend\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:z,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"在 docker desktop 里把 mysql 的容器跑起来："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["详细过程可以看 ",(0,r.jsx)(e.a,{href:"https://juejin.cn/book/7226988578700525605/section/7228944127025479738",target:"_blank",rel:"noopener noreferrer",children:"mysql 的第一篇"}),"。"]}),"\n",(0,r.jsx)(e.p,{children:"安装 typeorm 相关的包："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install --save @nestjs/typeorm typeorm mysql2\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 AppModule 引入 TypeOrmModule："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [ \n    TypeOrmModule.forRoot({\n      type: \"mysql\",\n      host: \"localhost\",\n      port: 3306,\n      username: \"root\",\n      password: \"guang\",\n      database: \"meeting_room_booking_system\",\n      synchronize: true,\n      logging: true,\n      entities: [],\n      poolSize: 10,\n      connectorPackage: 'mysql2',\n      extra: {\n          authPlugin: 'sha256_password',\n      }\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 mysql workbench 里创建这个 database"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"CREATE DATABASE meeting_room_booking_system DEFAULT CHARACTER SET utf8mb4;\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"刷新可以看到这个 database"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:V,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"用户模块涉及到这些表："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:q,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"我们创建下它们的 entity："}),"\n",(0,r.jsx)(e.p,{children:"先在 nest-cli.json 里添加 generateOptions，设置 spec 为 false"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:G,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这样生成代码的时候不会生成测试代码，和 nest g xxx --no-spec 效果一样"}),"\n",(0,r.jsx)(e.p,{children:"生成 user 模块："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"nest g resource user\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:H,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"确实没有生成测试代码。"}),"\n",(0,r.jsx)(e.p,{children:"然后我们添加个 src/user/entities 目录，新建 3 个实体 User、Role、Permission。"}),"\n",(0,r.jsx)(e.p,{children:"按照上节的表格来创建就好："}),"\n",(0,r.jsx)(e.p,{children:"用户表："}),"\n",(0,r.jsxs)(e.table,{children:["\n",(0,r.jsxs)(e.thead,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.th,{children:"字段名"}),"\n",(0,r.jsx)(e.th,{children:"数据类型"}),"\n",(0,r.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.tbody,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"id"}),"\n",(0,r.jsx)(e.td,{children:"INT"}),"\n",(0,r.jsx)(e.td,{children:"用户ID"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"username"}),"\n",(0,r.jsx)(e.td,{children:"VARCHAR(50)"}),"\n",(0,r.jsx)(e.td,{children:"用户名"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"password"}),"\n",(0,r.jsx)(e.td,{children:"VARCHAR(50)"}),"\n",(0,r.jsx)(e.td,{children:"密码"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"nick_name"}),"\n",(0,r.jsx)(e.td,{children:"VARCHAR(50)"}),"\n",(0,r.jsx)(e.td,{children:"昵称"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"email"}),"\n",(0,r.jsx)(e.td,{children:"VARCHAR(50)"}),"\n",(0,r.jsx)(e.td,{children:"邮箱"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"head_pic"}),"\n",(0,r.jsx)(e.td,{children:"VARCHAR(100)"}),"\n",(0,r.jsx)(e.td,{children:"头像"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"phone_number"}),"\n",(0,r.jsx)(e.td,{children:"VARCHAR(20)"}),"\n",(0,r.jsx)(e.td,{children:"手机号"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"is_frozen"}),"\n",(0,r.jsx)(e.td,{children:"BOOLEAN"}),"\n",(0,r.jsx)(e.td,{children:"是否被冻结"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"is_admin"}),"\n",(0,r.jsx)(e.td,{children:"BOOLEAN"}),"\n",(0,r.jsx)(e.td,{children:"是否是管理员"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"create_time"}),"\n",(0,r.jsx)(e.td,{children:"DATETIME"}),"\n",(0,r.jsx)(e.td,{children:"创建时间"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"update_time"}),"\n",(0,r.jsx)(e.td,{children:"DATETIME"}),"\n",(0,r.jsx)(e.td,{children:"更新时间"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"角色表 roles"}),"\n",(0,r.jsx)(e.td,{}),"\n",(0,r.jsx)(e.td,{}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.table,{children:["\n",(0,r.jsxs)(e.thead,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.th,{children:"字段名"}),"\n",(0,r.jsx)(e.th,{children:"数据类型"}),"\n",(0,r.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.tbody,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"id"}),"\n",(0,r.jsx)(e.td,{children:"INT"}),"\n",(0,r.jsx)(e.td,{children:"ID"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"name"}),"\n",(0,r.jsx)(e.td,{children:"VARCHAR(20)"}),"\n",(0,r.jsx)(e.td,{children:"角色名"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"权限表 permissions"}),"\n",(0,r.jsxs)(e.table,{children:["\n",(0,r.jsxs)(e.thead,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.th,{children:"字段名"}),"\n",(0,r.jsx)(e.th,{children:"数据类型"}),"\n",(0,r.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.tbody,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"id"}),"\n",(0,r.jsx)(e.td,{children:"INT"}),"\n",(0,r.jsx)(e.td,{children:"ID"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"code"}),"\n",(0,r.jsx)(e.td,{children:"VARCHAR(20)"}),"\n",(0,r.jsx)(e.td,{children:"权限代码"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"description"}),"\n",(0,r.jsx)(e.td,{children:"VARCHAR(100)"}),"\n",(0,r.jsx)(e.td,{children:"权限描述"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"用户-角色中间表 user_roles"}),"\n",(0,r.jsxs)(e.table,{children:["\n",(0,r.jsxs)(e.thead,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.th,{children:"字段名"}),"\n",(0,r.jsx)(e.th,{children:"数据类型"}),"\n",(0,r.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.tbody,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"id"}),"\n",(0,r.jsx)(e.td,{children:"INT"}),"\n",(0,r.jsx)(e.td,{children:"ID"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"user_id"}),"\n",(0,r.jsx)(e.td,{children:"INT"}),"\n",(0,r.jsx)(e.td,{children:"用户 ID"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"role_id"}),"\n",(0,r.jsx)(e.td,{children:"INT"}),"\n",(0,r.jsx)(e.td,{children:"角色 ID"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"角色-权限中间表 role_permissions"}),"\n",(0,r.jsxs)(e.table,{children:["\n",(0,r.jsxs)(e.thead,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.th,{children:"字段名"}),"\n",(0,r.jsx)(e.th,{children:"数据类型"}),"\n",(0,r.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.tbody,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"id"}),"\n",(0,r.jsx)(e.td,{children:"INT"}),"\n",(0,r.jsx)(e.td,{children:"ID"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"role_id"}),"\n",(0,r.jsx)(e.td,{children:"INT"}),"\n",(0,r.jsx)(e.td,{children:"角色 ID"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"permission_id"}),"\n",(0,r.jsx)(e.td,{children:"INT"}),"\n",(0,r.jsx)(e.td,{children:"权限 ID"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"也就是这样："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Column, CreateDateColumn, Entity, JoinTable, ManyToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { Role } from \"./role.entity\";\n\n@Entity({\n    name: 'users'\n})\nexport class User {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        length: 50,\n        comment: '用户名'\n    })\n    username: string;\n\n    @Column({\n        length: 50,\n        comment: '密码'\n    })\n    password: string;\n\n    @Column({\n        name: 'nick_name',\n        length: 50,\n        comment: '昵称'\n    })\n    nickName: string;\n\n\n    @Column({\n        comment: '邮箱',\n        length: 50\n    })\n    email: string;\n\n\n    @Column({\n        comment: '头像',\n        length: 100,\n        nullable: true\n    })\n    headPic: string;\n\n    @Column({\n        comment: '手机号',\n        length: 20,\n        nullable: true\n    })\n    phoneNumber: string;\n\n    @Column({\n        comment: '是否冻结',\n        default: false\n    })\n    isFrozen: boolean;\n\n    @Column({\n        comment: '是否是管理员',\n        default: false\n    })\n    isAdmin: boolean;\n\n    @CreateDateColumn()\n    createTime: Date;\n\n    @UpdateDateColumn()\n    updateTime: Date;\n\n    @ManyToMany(() => Role)\n    @JoinTable({\n        name: 'user_roles'\n    })\n    roles: Role[] \n}\n\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Column, CreateDateColumn, Entity, JoinTable, ManyToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { Permission } from \"./permission.entity\";\n\n@Entity({\n    name: 'roles'\n})\nexport class Role {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        length: 20,\n        comment: '角色名'\n    })\n    name: string;\n\n    @ManyToMany(() => Permission)\n    @JoinTable({\n        name: 'role_permissions'\n    })\n    permissions: Permission[] \n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity({\n    name: 'permissions'\n})\nexport class Permission {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        length: 20,\n        comment: '权限代码'\n    })\n    code: string;\n\n    @Column({\n        length: 100,\n        comment: '权限描述'\n    })\n    description: string;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 entities 里引入下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后把项目跑起来："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsx)(e.p,{children:"正好是 5 条建表 sql："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"我们去数据库看下："}),"\n",(0,r.jsx)(e.p,{children:"users 表没啥问题："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"要注意的是 mysql 里没有 boolean 类型，使用 TINYINT 实现的，用 1、0 存储 true、false。"}),"\n",(0,r.jsx)(e.p,{children:"typeorm 会自动把它映射成 true、false。"}),"\n",(0,r.jsx)(e.p,{children:"然后是 roles 表："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"permissions 表："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"还有两个中间表："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:U,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:I,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题，外键也都是对的。"}),"\n",(0,r.jsx)(e.p,{children:"接下来就可以实现接口了。"}),"\n",(0,r.jsx)(e.p,{children:"上节我们列了 user 模块有这些接口："}),"\n",(0,r.jsxs)(e.table,{children:["\n",(0,r.jsxs)(e.thead,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.th,{children:"接口路径"}),"\n",(0,r.jsx)(e.th,{children:"请求方式"}),"\n",(0,r.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.tbody,{children:["\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"/user/login"}),"\n",(0,r.jsx)(e.td,{children:"POST"}),"\n",(0,r.jsx)(e.td,{children:"普通用户登录"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"/user/register"}),"\n",(0,r.jsx)(e.td,{children:"POST"}),"\n",(0,r.jsx)(e.td,{children:"普通用户注册"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"/user/update"}),"\n",(0,r.jsx)(e.td,{children:"POST"}),"\n",(0,r.jsx)(e.td,{children:"普通用户个人信息修改"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"/user/update_password"}),"\n",(0,r.jsx)(e.td,{children:"POST"}),"\n",(0,r.jsx)(e.td,{children:"普通用户修改密码"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"/user/admin/login"}),"\n",(0,r.jsx)(e.td,{children:"POST"}),"\n",(0,r.jsx)(e.td,{children:"管理员登录"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"/user/admin/update_password"}),"\n",(0,r.jsx)(e.td,{children:"POST"}),"\n",(0,r.jsx)(e.td,{children:"管理员修改密码"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"/user/admin/update"}),"\n",(0,r.jsx)(e.td,{children:"POST"}),"\n",(0,r.jsx)(e.td,{children:"管理员个人信息修改"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"/user/list"}),"\n",(0,r.jsx)(e.td,{children:"GET"}),"\n",(0,r.jsx)(e.td,{children:"用户列表"}),"\n"]}),"\n",(0,r.jsxs)(e.tr,{children:["\n",(0,r.jsx)(e.td,{children:"/user/freeze"}),"\n",(0,r.jsx)(e.td,{children:"GET"}),"\n",(0,r.jsx)(e.td,{children:"冻结用户"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"我们分别来实现下。"}),"\n",(0,r.jsx)(e.p,{children:"先实现下注册："}),"\n",(0,r.jsx)(e.p,{children:"在 UserController 增加一个 post 接口："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"@Post('register')\nregister(@Body() registerUser: RegisterUserDto) {\n    console.log(registerUser);\n    return \"success\"\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"dto 是封装 body 里的请求参数的，根据界面上要填的信息，创建 RegisterUserDto："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"export class RegisterUserDto {\n\n    username: string;\n    \n    nickName: string;\n    \n    password: string;\n    \n    email: string;\n    \n    captcha: string;\n}\n\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 postman 里调用下试试："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'{\n    "username": "guang",\n    "nickName": "神说要有光",\n    "password": "123456",\n    "email": "xxxx@xx.com",\n    "captcha": "abc123"\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"服务端也接收到了 body 里的数据，并创建了对应的 dto 对象："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后加一下 ValidationPipe，来对请求体做校验。"}),"\n",(0,r.jsx)(e.p,{children:"安装用到的包："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install --save class-validator class-transformer\n"})}),"\n",(0,r.jsx)(e.p,{children:"全局启用 ValidationPipe："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后加一下校验规则："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { IsEmail, IsNotEmpty, MinLength } from \"class-validator\";\n\nexport class RegisterUserDto {\n\n    @IsNotEmpty({\n        message: \"用户名不能为空\"\n    })\n    username: string;\n    \n    @IsNotEmpty({\n        message: '昵称不能为空'\n    })\n    nickName: string;\n    \n    @IsNotEmpty({\n        message: '密码不能为空'\n    })\n    @MinLength(6, {\n        message: '密码不能少于 6 位'\n    })\n    password: string;\n    \n    @IsNotEmpty({\n        message: '邮箱不能为空'\n    })\n    @IsEmail({}, {\n        message: '不是合法的邮箱格式'\n    })\n    email: string;\n    \n    @IsNotEmpty({\n        message: '验证码不能为空'\n    })\n    captcha: string;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"测试下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(e.p,{children:"然后实现注册的逻辑。"}),"\n",(0,r.jsx)(e.p,{children:"在 userService 里添加 register 方法："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { md5 } from 'src/utils';\nimport { Repository } from 'typeorm';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { User } from './entities/user.entity';\n\n@Injectable()\nexport class UserService {\n    private logger = new Logger();\n\n    @InjectRepository(User)\n    private userRepository: Repository<User>;\n\n    async register(user: RegisterUserDto) {\n        \n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"创建 logger 对象，注入 Repository<User>。"}),"\n",(0,r.jsx)(e.p,{children:"这里注入 Repository 需要在 UserModule 里引入下 TypeOrm.forFeature"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"注册的逻辑是这样的："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"我们需要先封装个 redis 模块。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"nest g module redis\nnest g service redis\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"安装 redis 的包："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install --save redis\n"})}),"\n",(0,r.jsx)(e.p,{children:"确保 redis 的 docker 容器是启动的："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"添加连接 redis 的 provider"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Global, Module } from '@nestjs/common';\nimport { RedisService } from './redis.service';\nimport { createClient } from 'redis';\n\n@Global()\n@Module({\n  providers: [\n    RedisService,\n    {\n      provide: 'REDIS_CLIENT',\n      async useFactory() {\n        const client = createClient({\n            socket: {\n                host: 'localhost',\n                port: 6379\n            },\n            database: 1\n        });\n        await client.connect();\n        return client;\n      }\n    }\n  ],\n  exports: [RedisService]\n})\nexport class RedisModule {}\n"})}),"\n",(0,r.jsx)(e.p,{children:"这里用 @Global() 把它声明为全局模块，这样只需要在 AppModule 里引入，别的模块不用引入也可以注入 RedisService 了。"}),"\n",(0,r.jsx)(e.p,{children:"database 指定为 1，因为我们之前都是用的默认的 0"}),"\n",(0,r.jsx)(e.p,{children:"redis 的 database 就是一个命名空间的概念："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"把存储的 key-value 的数据放到不同命名空间下，避免冲突。"}),"\n",(0,r.jsx)(e.p,{children:"然后写下 RedisService"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Inject, Injectable } from '@nestjs/common';\nimport { RedisClientType } from 'redis';\n\n@Injectable()\nexport class RedisService {\n\n    @Inject('REDIS_CLIENT') \n    private redisClient: RedisClientType;\n\n    async get(key: string) {\n        return await this.redisClient.get(key);\n    }\n\n    async set(key: string, value: string | number, ttl?: number) {\n        await this.redisClient.set(key, value);\n\n        if(ttl) {\n            await this.redisClient.expire(key, ttl);\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"注入 redisClient，实现 get、set 方法，set 方法支持指定过期时间。"}),"\n",(0,r.jsx)(e.p,{children:"然后回过头来继续实现 register 方法。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"@Inject(RedisService)\nprivate redisService: RedisService;\n\nasync register(user: RegisterUserDto) {\n    const captcha = await this.redisService.get(`captcha_${user.email}`);\n\n    if(!captcha) {\n        throw new HttpException('验证码已失效', HttpStatus.BAD_REQUEST);\n    }\n\n    if(user.captcha !== captcha) {\n        throw new HttpException('验证码不正确', HttpStatus.BAD_REQUEST);\n    }\n\n    const foundUser = await this.userRepository.findOneBy({\n      username: user.username\n    });\n\n    if(foundUser) {\n      throw new HttpException('用户已存在', HttpStatus.BAD_REQUEST);\n    }\n\n    const newUser = new User();\n    newUser.username = user.username;\n    newUser.password = md5(user.password);\n    newUser.email = user.email;\n    newUser.nickName = user.nickName;\n\n    try {\n      await this.userRepository.save(newUser);\n      return '注册成功';\n    } catch(e) {\n      this.logger.error(e, UserService);\n      return '注册失败';\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"根据流程图，很容易写出注册的实现逻辑。"}),"\n",(0,r.jsx)(e.p,{children:"这里的 md5 方法放在 src/utils.ts 里，用 node 内置的 crypto 包实现。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import * as crypto from 'crypto';\n\nexport function md5(str) {\n    const hash = crypto.createHash('md5');\n    hash.update(str);\n    return hash.digest('hex');\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 controller 里调用下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"@Post('register')\nasync register(@Body() registerUser: RegisterUserDto) {    \n    return await this.userService.register(registerUser);\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"然后 postman 里测试下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"因为还没实现发送邮箱验证码的逻辑，这里我们手动在 redis 添加一个 key："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"测试下："}),"\n",(0,r.jsx)(e.p,{children:"带上错误的验证码，返回验证码不正确；"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"带上正确的验证码，返回注册成功："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这时可以在数据库里看到这条记录："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这就代表注册成功了。"}),"\n",(0,r.jsx)(e.p,{children:"然后我们来实现发送邮箱验证码的功能。"}),"\n",(0,r.jsx)(e.p,{children:"封装个 email 模块："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"nest g resource email\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"安装发送邮件用的包："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install nodemailer --save\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 EmailService 里实现 sendMail 方法"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { createTransport, Transporter} from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n\n    transporter: Transporter\n    \n    constructor() {\n      this.transporter = createTransport({\n          host: \"smtp.qq.com\",\n          port: 587,\n          secure: false,\n          auth: {\n              user: '你的邮箱地址',\n              pass: '你的授权码'\n          },\n      });\n    }\n\n    async sendMail({ to, subject, html }) {\n      await this.transporter.sendMail({\n        from: {\n          name: '会议室预定系统',\n          address: '你的邮箱地址'\n        },\n        to,\n        subject,\n        html\n      });\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"把邮箱地址和授权码改成你自己的。"}),"\n",(0,r.jsx)(e.p,{children:"这里用的 qq 邮箱，你也可以换成别的邮箱，填写对应的 smtp 服务的域名和端口就好了。"}),"\n",(0,r.jsx)(e.p,{children:"或者你也可以买专门发邮件的服务。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["比如阿里云的",(0,r.jsx)(e.a,{href:"https://help.aliyun.com/document_detail/29421.html",target:"_blank",rel:"noopener noreferrer",children:"邮件推送服务"}),"："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"线上要买这种邮件推送服务来发邮件的，但这里我们还是用 nodemailer 自己发邮件。"}),"\n",(0,r.jsx)(e.p,{children:"把 EmailModule 声明为全局的，并且导出 EmailService"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后在 UserController 里添加一个 get 接口："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"@Inject(EmailService)\nprivate emailService: EmailService;\n\n@Inject(RedisService)\nprivate redisService: RedisService;\n\n@Get('register-captcha')\nasync captcha(@Query('address') address: string) {\n    const code = Math.random().toString().slice(2,8);\n\n    await this.redisService.set(`captcha_${address}`, code, 5 * 60);\n\n    await this.emailService.sendMail({\n      to: address,\n      subject: '注册验证码',\n      html: `<p>你的注册验证码是 ${code}</p>`\n    });\n    return '发送成功';\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"测试下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"邮件发送成功："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"redis 里也保存了邮箱地址对应的验证码："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这样整个注册的流程就完成了。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["代码在",(0,r.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"这节我们创建了 nest 项目，并引入了 typeorm 和 redis。"}),"\n",(0,r.jsx)(e.p,{children:"创建了 User、Role、Permission 的 entity，通过 typeorm 的自动建表功能，在数据库创建了对应的 3 个表和 2 个中间表。"}),"\n",(0,r.jsx)(e.p,{children:"引入了 nodemailer 来发邮件，如果是线上可以买阿里云或者其他平台的邮件推送服务。"}),"\n",(0,r.jsx)(e.p,{children:"实现了 /user/register 和 /user/register-captcha 两个接口。"}),"\n",(0,r.jsx)(e.p,{children:"/user/register-captcha 会向邮箱地址发送一个包含验证码的邮件，并在 redis 里存一份。"}),"\n",(0,r.jsx)(e.p,{children:"/user/register 会根据邮箱地址查询 redis 中的验证码，验证通过会把用户信息保存到表中。"}),"\n",(0,r.jsx)(e.p,{children:"这样，注册功能就完成了。"})]})}function J(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(Q,{...n})}):Q(n)}let $=J;J.__RSPRESS_PAGE_META={},J.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F111.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E8%AE%A2%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97--%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"111. 会议室预订系统：用户管理模块--用户注册",headingTitle:"111. 会议室预订系统：用户管理模块--用户注册",frontmatter:{}}}}]);