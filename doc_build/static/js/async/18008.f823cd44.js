"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["18008"],{970098:function(e,n,r){e.exports=r.p+"static/image/a9555cf0277536a9d7cd25f5ea4f51e4.046d3cf3.webp"},166302:function(e,n,r){e.exports=r.p+"static/image/b57f4dce9e49c5383b9e528b334254f9.68a36aae.webp"},280402:function(e,n,r){r.r(n),r.d(n,{default:()=>w});var t=r(552676),i=r(740453);let s=r.p+"static/image/e805068ff9d3f1c0375db9fbcc6df637.e3a59733.webp",l=r.p+"static/image/dd6a286561f86722038dc46677b43e40.fcabc9fb.webp",d=r.p+"static/image/5dc4c496f060258d5d98d9cbe20fb02e.5e4731fa.webp",c=r.p+"static/image/441b221062056b7abbcee2cd02541056.cd493db7.webp",o=r.p+"static/image/cdf15e3946c2bb9ffda4fd1365a85a64.ec96e7c8.webp",a=r.p+"static/image/75e1389f45322c4708af618796fbd2ce.ed54800d.webp",p=r.p+"static/image/f3d3db9c44cf7b3b2aa161c75948ea56.c2ed3b52.webp",h=r.p+"static/image/56f555c1aa411ca3bac18b3b6f1caead.ccb6e60c.webp",x=r.p+"static/image/380ba99b6e4237bb10075431bc3e79d5.c722f58c.webp",u=r.p+"static/image/cbba3cf88db3a37e206bc6de7f365cab.2f989a70.webp",m=r.p+"static/image/37e248527bc5866c4c5322a3661a71e5.ff0c3d8c.webp",g=r.p+"static/image/39daf9260986fe9db63c2dde1b87101e.f732cffc.webp",j=r.p+"static/image/cffda98987a21679db68e78642eea948.2d7454df.webp";var f=r(970098),v=r(166302);let b=r.p+"static/image/2aad09cb229dfd7eff8321e40f403846.48bae4d0.webp",k=r.p+"static/image/1131a1bdce93155adfa318e8e7416678.b76ea2c6.webp";function C(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",strong:"strong",img:"img",pre:"pre",code:"code",h3:"h3"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"32-实战篇--项目初始化",children:["32-实战篇 ❘ 项目初始化",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-实战篇--项目初始化",children:"#"})]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"推荐学习指数：⭐️️⭐️️⭐️️"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"1-前言",children:["1. 前言",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["常用技术选型铺垫的差不多了，本篇开始，我们使用之前介绍的这些技术选型（",(0,t.jsx)(n.strong,{children:"Svelte 5 + SvelteKit + Tailwind CSS + Zod + Superforms + Shadcn Svelte + Clerk + Prisma + MySQL"}),"）共同实现一个全栈项目，项目效果如下："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:k,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"效果并不复杂，本质还是一个 TodoList，但全栈项目常见的用户登录与鉴权、深色模式、主题、表单验证、前后端交互、数据的增删改查都有，可谓是麻雀虽小，五脏俱全。"}),"\n",(0,t.jsx)(n.p,{children:"不过虽说简单，但如果你是第一次写，加上还对一些技术选型不太熟悉，那写的时候很有可能会感到“寸步难行”。这种感觉就像大家第一次写 React 或者 Vue 实战项目，亦或者打黑神话的“白衣秀士”，第一次遇见很棘手，但当你二周目再去打的时候，就会轻松很多。"}),"\n",(0,t.jsx)(n.p,{children:"现在让我们跟着本篇的内容一步步完成这个项目吧。"}),"\n",(0,t.jsxs)(n.h2,{id:"2-初始化项目",children:["2. 初始化项目",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-初始化项目",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"运行："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx sv create svelte-todolist\n"})}),"\n",(0,t.jsxs)(n.p,{children:["选择 ",(0,t.jsx)(n.strong,{children:"SvelteKit minimal、TypeScript、ESLint、Prettier、Tailwind CSS："})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"按照命令行中的提示提交代码（提交代码可以方便看到每个阶段的改动）："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'cd svelte-todolist\n\ngit init && git add -A && git commit -m "Initial commit" (optional)\n\nnpm run dev -- --open\n'})}),"\n",(0,t.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"因为引入了 Tailwind CSS，样式被重置。"}),"\n",(0,t.jsxs)(n.h2,{id:"3-接入-clerk",children:["3. 接入 Clerk",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-接入-clerk",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"31-clerk-sveltekit",children:["3.1. clerk-sveltekit",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-clerk-sveltekit",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["Clerk 并没有直接提供 Svelte 版本，所以我们借助社区的 ",(0,t.jsx)(n.a,{href:"https://github.com/markjaquith/clerk-sveltekit",title:"https://github.com/markjaquith/clerk-sveltekit",target:"_blank",rel:"noopener noreferrer",children:"clerk-sveltekit"})," 实现："]}),"\n",(0,t.jsx)(n.p,{children:"安装依赖项："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i clerk-sveltekit\n"})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:".env"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"PUBLIC_CLERK_PUBLISHABLE_KEY=pk_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\nCLERK_SECRET_KEY=sk_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"})}),"\n",(0,t.jsxs)(n.p,{children:["查看这两个值最简单的方法是查看 ",(0,t.jsx)(n.a,{href:"https://dashboard.clerk.com/",title:"https://dashboard.clerk.com/",target:"_blank",rel:"noopener noreferrer",children:"Clerk"})," 项目创建后提供的 Next.js 接入文档，第二步就有写："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"如果你已经在其他项目接入了，可以在 「Configure」- 「API keys」，选择 Next.js 看到："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["拷贝代码，注意把 ",(0,t.jsx)(n.code,{children:"NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY"})," 更名为 ",(0,t.jsx)(n.code,{children:"PUBLIC_CLERK_PUBLISHABLE_KEY"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/hooks.server.ts"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import type { Handle } from "@sveltejs/kit";\nimport { sequence } from "@sveltejs/kit/hooks";\nimport { handleClerk } from "clerk-sveltekit/server";\nimport { CLERK_SECRET_KEY } from "$env/static/private";\n\nconst publicPaths = ["/signin", "/signup"];\n\nexport const handle: Handle = sequence(\n  handleClerk(CLERK_SECRET_KEY, {\n    debug: true,\n    protectedPaths: [\n      (event) => {\n        if (publicPaths.includes(event.url.pathname)) {\n          return false;\n        }\n        return true;\n      },\n    ],\n    signInUrl: "/signin",\n  })\n);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["在这段代码中，我们声明了保护路由地址和登录地址。其中",(0,t.jsx)(n.code,{children:"/signin"})," 和 ",(0,t.jsx)(n.code,{children:"/signup"}),"是公共路由地址，访问其他路由会进行鉴权，如果没有登录，会跳转到登录页面。"]}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/hooks.client.ts"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import type { HandleClientError } from "@sveltejs/kit";\n// To use Clerk components:\nimport { initializeClerkClient } from "clerk-sveltekit/client";\n// Or for headless mode:\n// import { initializeClerkClient } from \'clerk-sveltekit/headless\'\nimport { PUBLIC_CLERK_PUBLISHABLE_KEY } from "$env/static/public";\n\ninitializeClerkClient(PUBLIC_CLERK_PUBLISHABLE_KEY, {\n  afterSignInUrl: "/",\n  afterSignUpUrl: "/",\n  signInUrl: "/signin",\n  signUpUrl: "/signup",\n});\n\nexport const handleError: HandleClientError = async ({ error, event }) => {\n  console.error(error, event);\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"在这段代码中，我们声明了登录和注册的地址以及登录和注册后的跳转地址。"}),"\n",(0,t.jsx)(n.p,{children:"基本配置完毕。现在我们开始构建登录界面。"}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/routes/(auth)/+layout.svelte"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'<script>\n  let { children } = $props();\n<\/script>\n\n<div class="mt-4 flex justify-center">\n  {@render children()}\n</div>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"src/routes/+layout.svelte"}),"，完整代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'<script lang="ts">\n  import UserButton from \'clerk-sveltekit/client/UserButton.svelte\';\n  import SignedIn from \'clerk-sveltekit/client/SignedIn.svelte\';\n  import SignedOut from \'clerk-sveltekit/client/SignedOut.svelte\';\n  import ClerkLoading from \'clerk-sveltekit/client/ClerkLoading.svelte\';\n\n  import \'../app.css\';\n<\/script>\n\n<nav class="flex h-[60px] w-full items-center justify-between p-4">\n  <h1><a href="/" data-sveltekit-reload>嗒嗒清单</a></h1>\n  <div class="flex items-center gap-2">\n    <ClerkLoading>\n      <div>加载中...</div>\n    </ClerkLoading>\n    <SignedIn>\n      <UserButton afterSignOutUrl="/" />\n    </SignedIn>\n    <SignedOut>\n      <a href="/signin">登录</a> <span>|</span> <a href="/signup">注册</a>\n    </SignedOut>\n  </div>\n</nav>\n\n<slot />\n\n<style>\n  :global(.cl-internal-b3fm6y),\n  :global(.cl-userButtonPopoverFooter),\n  :global(.cl-profileSection__connectedAccounts .cl-internal-fqx4fd) {\n    display: none;\n  }\n</style>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["在这段代码中，",(0,t.jsx)(n.code,{children:"<SignedIn>"}),"表示登录后显示的内容，",(0,t.jsx)(n.code,{children:"<SignedOut>"}),"表示未登录时现实的内容。我们放在 ",(0,t.jsx)(n.code,{children:"+layout.svelte"}),"中用于模拟顶部导航栏。"]}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/routes/(auth)/signin/+page.svelte"}),"，这是登录界面，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'<script lang="ts">\n  import SignIn from \'clerk-sveltekit/client/SignIn.svelte\';\n<\/script>\n\n<SignIn redirectUrl="/" />\n'})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/routes/(auth)/signup/+page.svelte"}),"，这是注册界面，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'<script lang="ts">\n  import SignUp from \'clerk-sveltekit/client/SignUp.svelte\';\n<\/script>\n\n<SignUp redirectUrl="/" />\n'})}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"src/routes/+page.svelte"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<script>\n  import SignedIn from 'clerk-sveltekit/client/SignedIn.svelte';\n<\/script>\n\n<SignedIn let:user>\n  欢迎 {user?.fullName}!\n</SignedIn>\n"})}),"\n",(0,t.jsx)(n.p,{children:"这是登录后跳转的界面。"}),"\n",(0,t.jsx)(n.p,{children:"此时基本配置完成，我们看下浏览器的效果："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsxs)(n.h3,{id:"32-中文汉化",children:["3.2. 中文汉化",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-中文汉化",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"虽然登录注册功能解决了，但你会发现，登录以及管理界面都是英文，我们该如何改为中文呢？"}),"\n",(0,t.jsx)(n.p,{children:"安装："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i @clerk/localizations\n"})}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"src/hooks.client.ts"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:"import type { HandleClientError } from '@sveltejs/kit';\n// To use Clerk components:\nimport { initializeClerkClient } from 'clerk-sveltekit/client';\n// Or for headless mode:\n// import { initializeClerkClient } from 'clerk-sveltekit/headless'\nimport { PUBLIC_CLERK_PUBLISHABLE_KEY } from '$env/static/public';\n+import { zhCN } from '@clerk/localizations';\n\ninitializeClerkClient(PUBLIC_CLERK_PUBLISHABLE_KEY, {\n+	localization: zhCN,\n  afterSignInUrl: '/admin/',\n  afterSignUpUrl: '/admin/',\n  signInUrl: '/sign-in',\n  signUpUrl: '/sign-up'\n});\n\nexport const handleError: HandleClientError = async ({ error, event }) => {\n  console.error(error, event);\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"此时界面改为中文。"}),"\n",(0,t.jsxs)(n.h3,{id:"33-自定义汉化",children:["3.3. 自定义汉化",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-自定义汉化",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"但是你会发现，即便改为了中文，还是有些地方没有汉化："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这是因为 Clerk 的汉化全靠社区贡献，之前的中文汉化没有覆盖目前所有的内容。这就需要我们自定义设置汉化内容。"}),"\n",(0,t.jsxs)(n.p,{children:["安装 ",(0,t.jsx)(n.code,{children:"lodash.merge"}),"："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i lodash.merge\n"})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/lib/locales/zh.json"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "userProfile": {\n    "navbar": {\n      "description": "管理账户信息"\n    },\n    "start": {\n      "dangerSection": {\n        "deleteAccountButton": "删除账户",\n        "deleteAccountTitle": "删除账户",\n        "deleteAccountDescription": "删除账户和所有关联信息",\n        "title": "账户终止"\n      },\n      "headerSubtitle__account": "管理账户信息",\n      "headerSubtitle__security": "管理安全设置",\n      "emailAddressesSection": {\n        "detailsTitle__primary": "主邮箱地址",\n        "detailsSubtitle__primary": "此邮箱地址是主邮箱地址",\n        "destructiveActionTitle": "删除",\n        "destructiveActionSubtitle": "删除此邮箱地址并且从账户中取消关联"\n      },\n      "connectedAccountsSection": {\n        "title__connectionFailed": "重试连接失败",\n        "destructiveActionSubtitle": "从您的账户中移除此连接的账户",\n        "destructiveActionAccordionSubtitle": "移除连接账户"\n      },\n      "activeDevicesSection": {\n        "detailsTitle": "当前设备",\n        "detailsSubtitle": "这是您当前正在使用的设备",\n        "destructiveActionTitle": "退出",\n        "destructiveActionSubtitle": "退出设备"\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"hooks.client.ts"}),"，完整代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import type { HandleClientError } from '@sveltejs/kit';\n// To use Clerk components:\nimport { initializeClerkClient } from 'clerk-sveltekit/client';\n// Or for headless mode:\n// import { initializeClerkClient } from 'clerk-sveltekit/headless'\nimport { PUBLIC_CLERK_PUBLISHABLE_KEY } from '$env/static/public';\nimport { zhCN } from '@clerk/localizations';\nimport merge from 'lodash.merge';\nimport zhCNlocales from '$lib/locales/zh.json';\n\nconst localization = merge(zhCN, zhCNlocales);\n\ninitializeClerkClient(PUBLIC_CLERK_PUBLISHABLE_KEY, {\n	localization,\n	afterSignInUrl: '/admin/',\n	afterSignUpUrl: '/admin/',\n	signInUrl: '/sign-in',\n	signUpUrl: '/sign-up'\n});\n\nexport const handleError: HandleClientError = async ({ error, event }) => {\n	console.error(error, event);\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"此时界面汉化的更全面了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"注：如果你遇到了没有汉化的内容，查看该元素："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["元素上的 ",(0,t.jsx)(n.code,{children:"data-localization-key"}),"就对应了翻译的字段，在 ",(0,t.jsx)(n.code,{children:"src/lib/locales/zh.json"}),"添加即可。"]}),"\n",(0,t.jsxs)(n.p,{children:["如果没有该属性，说明可能是返回的信息等，可以选择直接隐藏该内容（使用 ",(0,t.jsx)(n.code,{children:":global(xxx)"})," ）。"]}),"\n",(0,t.jsx)(n.p,{children:"我们将代码提交："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'git add -A && git commit -m "Add Clerk"\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"4-接入-shadcn-ui",children:["4. 接入 Shadcn UI",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-接入-shadcn-ui",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"41-shadcn-svelte",children:["4.1. shadcn-svelte",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-shadcn-svelte",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"接下来我们接入 Shadcn UI 并支持暗黑模式和主题色。"}),"\n",(0,t.jsx)(n.p,{children:"运行："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx shadcn-svelte@latest init\n"})}),"\n",(0,t.jsx)(n.p,{children:"选项选择默认即可。"}),"\n",(0,t.jsx)(n.p,{children:"如果因为版本问题在安装依赖项的时候会出现错误："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们可以改为手动安装："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install tailwind-variants clsx tailwind-merge --legacy-peer-deps\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后添加需要用到的组件："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"npx shadcn-svelte@latest add card skeleton alert-dialog separator button sheet input form select dialog popover calendar dropdown-menu checkbox\n"})}),"\n",(0,t.jsx)(n.p,{children:"如果安装依赖项的时候出现错误："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"根据命令行中出现的错误命令改为手动安装："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i bits-ui lucide-svelte formsnap zod sveltekit-superforms @internationalized/date --legacy-peer-deps\n"})}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"src/routes/+page.svelte"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<script lang="ts">\n  import SignedIn from \'clerk-sveltekit/client/SignedIn.svelte\';\n  import ClerkLoading from \'clerk-sveltekit/client/ClerkLoading.svelte\';\n\n  import {\n    Card,\n    CardDescription,\n    CardFooter,\n    CardHeader,\n    CardTitle\n  } from \'$lib/components/ui/card\';\n  import { Skeleton } from \'$lib/components/ui/skeleton\';\n  import { Button } from \'$lib/components/ui/button\';\n<\/script>\n\n<Card class="mx-4">\n  <CardHeader class="pb-3">\n    <CardTitle class="text-lg">\n      <SignedIn let:user>\n        欢迎 {user?.fullName}!\n      </SignedIn>\n      <ClerkLoading>\n        <Skeleton class="h-7 w-[150px]" />\n      </ClerkLoading>\n    </CardTitle>\n    <CardDescription class="text-primary max-w-lg text-balance leading-relaxed">\n      道虽迩，不行不至；事虽小，不为不成\n    </CardDescription>\n  </CardHeader>\n  <CardFooter>\n    <Button>添加清单</Button>\n  </CardFooter>\n</Card>\n'})}),"\n",(0,t.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsxs)(n.h3,{id:"42-支持暗黑模式和主题色",children:["4.2. 支持暗黑模式和主题色",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-支持暗黑模式和主题色",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.shadcn-svelte.com/docs/dark-mode/svelte",title:"https://www.shadcn-svelte.com/docs/dark-mode/svelte",target:"_blank",rel:"noopener noreferrer",children:"参考 shadcn-svelte 的文档"}),"，安装依赖项 mode-watcher："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"npm install mode-watcher\n"})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/lib/components/ModeSwitcher.svelte"})," ，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<script lang="ts">\n  import Sun from \'lucide-svelte/icons/sun\';\n  import Moon from \'lucide-svelte/icons/moon\';\n  import { resetMode, setMode, ModeWatcher, theme, setTheme } from \'mode-watcher\';\n  import * as DropdownMenu from \'$lib/components/ui/dropdown-menu/index.js\';\n  import { Button } from \'$lib/components/ui/button/index.js\';\n\n  let themeValue = $theme || \'Blue\';\n<\/script>\n\n<ModeWatcher defaultMode={\'system\'} defaultTheme="Blue" />\n<DropdownMenu.Root>\n  <DropdownMenu.Trigger asChild let:builder>\n    <Button builders={[builder]} variant="outline" size="icon">\n      <Sun\n        class="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0"\n      />\n      <Moon\n        class="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100"\n      />\n      <span class="sr-only">Toggle theme</span>\n    </Button>\n  </DropdownMenu.Trigger>\n  <DropdownMenu.Content align="end">\n    <DropdownMenu.Item on:click={() => setMode(\'light\')}>Light</DropdownMenu.Item>\n    <DropdownMenu.Item on:click={() => setMode(\'dark\')}>Dark</DropdownMenu.Item>\n    <DropdownMenu.Item on:click={() => resetMode()}>System</DropdownMenu.Item>\n  </DropdownMenu.Content>\n</DropdownMenu.Root>\n\n<DropdownMenu.Root>\n  <DropdownMenu.Trigger asChild let:builder>\n    <Button variant="outline" builders={[builder]}>主题</Button>\n  </DropdownMenu.Trigger>\n  <DropdownMenu.Content>\n    <DropdownMenu.RadioGroup bind:value={themeValue} onValueChange={(value) => setTheme(value!)}>\n      <DropdownMenu.RadioItem value="Blue">海蓝</DropdownMenu.RadioItem>\n      <DropdownMenu.RadioItem value="Rose">玫红</DropdownMenu.RadioItem>\n      <DropdownMenu.RadioItem value="Green">草绿</DropdownMenu.RadioItem>\n    </DropdownMenu.RadioGroup>\n  </DropdownMenu.Content>\n</DropdownMenu.Root>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["在这段代码中，我们主要是靠 ",(0,t.jsx)(n.code,{children:"<ModeWatcher>"}),"组件实现模式和主题的切换。我们同时实现了两个下拉菜单用于切换模式和主题。"]}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"src/routes/+layout.svelte"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<script lang="ts">\n  import UserButton from \'clerk-sveltekit/client/UserButton.svelte\';\n  import SignedIn from \'clerk-sveltekit/client/SignedIn.svelte\';\n  import SignedOut from \'clerk-sveltekit/client/SignedOut.svelte\';\n  import ClerkLoading from \'clerk-sveltekit/client/ClerkLoading.svelte\';\n\n  import \'../app.css\';\n\n  import ModeSwitcher from \'$lib/components/ModeSwitcher.svelte\';\n<\/script>\n\n<nav class="flex h-[60px] w-full items-center justify-between p-4">\n  <h1><a href="/" data-sveltekit-reload>嗒嗒清单</a></h1>\n  <div class="flex items-center gap-2">\n    <ClerkLoading>\n      <div>加载中...</div>\n    </ClerkLoading>\n    <SignedIn>\n      <UserButton afterSignOutUrl="/" />\n    </SignedIn>\n    <SignedOut>\n      <a href="/signin">登录</a> <span>|</span> <a href="/signup">注册</a>\n    </SignedOut>\n    <ModeSwitcher />\n  </div>\n</nav>\n\n<slot />\n\n<style>\n  :global(.cl-internal-b3fm6y),\n  :global(.cl-userButtonPopoverFooter),\n  :global(.cl-profileSection__connectedAccounts .cl-internal-fqx4fd) {\n    display: none;\n  }\n</style>\n'})}),"\n",(0,t.jsx)(n.p,{children:"现在应该已经可以支持暗黑模式了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"但是主题色还没有支持，这是因为我们还没有设置主题对应的色值。"}),"\n",(0,t.jsxs)(n.p,{children:["我们打开 ",(0,t.jsx)(n.a,{href:"https://www.shadcn-svelte.com/themes",title:"https://www.shadcn-svelte.com/themes",target:"_blank",rel:"noopener noreferrer",children:"shadcn-svelte 的主题页面"}),"，选择用到的主题色，然后拷贝代码。"]}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"svelte-todolist/src/app.css"}),"，这是拷贝并修改后的代码："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 72.22% 50.59%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221.2 83.2% 53.3%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 224.3 76.3% 48%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n@layer base {\n  [data-theme='Rose']:root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 346.8 77.2% 49.8%;\n    --primary-foreground: 355.7 100% 97.3%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 72.22% 50.59%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 346.8 77.2% 49.8%;\n    --radius: 0.5rem;\n  }\n  [data-theme='Rose'].dark {\n    --background: 20 14.3% 4.1%;\n    --foreground: 0 0% 95%;\n    --card: 24 9.8% 10%;\n    --card-foreground: 0 0% 95%;\n    --popover: 0 0% 9%;\n    --popover-foreground: 0 0% 95%;\n    --primary: 346.8 77.2% 49.8%;\n    --primary-foreground: 355.7 100% 97.3%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 15%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 12 6.5% 15.1%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 85.7% 97.3%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 346.8 77.2% 49.8%;\n  }\n}\n\n@layer base {\n  [data-theme='Green']:root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 142.1 76.2% 36.3%;\n    --primary-foreground: 355.7 100% 97.3%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 72.22% 50.59%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 142.1 76.2% 36.3%;\n    --radius: 0.5rem;\n  }\n  [data-theme='Green'].dark {\n    --background: 20 14.3% 4.1%;\n    --foreground: 0 0% 95%;\n    --card: 24 9.8% 10%;\n    --card-foreground: 0 0% 95%;\n    --popover: 0 0% 9%;\n    --popover-foreground: 0 0% 95%;\n    --primary: 142.1 70.6% 45.3%;\n    --primary-foreground: 144.9 80.4% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 15%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 12 6.5% 15.1%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 85.7% 97.3%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 142.4 71.8% 29.2%;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"默认是海蓝主题，然后新增玫红、草绿主题。浏览器效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"当我们点击切换模式和主题的时候，其实 HTML 上的属性会发生变化："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们之所以能够实现主题色切换，就是根据 HTML 的 data-theme 属性设定不同值下的变量。"}),"\n",(0,t.jsxs)(n.p,{children:["如果我们要使用这些主题色，并不需要直接使用 CSS 变量，Shadcn Svelte 为 Tailwind CSS 拓展了一系列的颜色，查看 ",(0,t.jsx)(n.code,{children:"tailwind.config.ts"}),"："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["这些色值（以 ",(0,t.jsx)(n.code,{children:"border"})," 为例，它虽然名字叫 ",(0,t.jsx)(n.code,{children:"border"}),"，但本质是一个色值，只是说这个色值被设计用于边框，你可以使用 ",(0,t.jsx)(n.code,{children:"text-border"})," 将文字设置成该颜色）可以直接使用，比如 ",(0,t.jsx)(n.code,{children:"text-border"}),"、",(0,t.jsx)(n.code,{children:"text-primary"}),"、",(0,t.jsx)(n.code,{children:"bg-primary"}),"等，如此我们便能实现我们的自定义组件根据 Shadcn UI 的主题色变化而变化。"]}),"\n",(0,t.jsx)(n.p,{children:"最后，我们将代码提交："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'git add -A && git commit -m "Add Shadcn UI, support Dark Mode, support themes"\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"5-总结",children:["5. 总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本篇我们实现了鉴权、模式和主题色，浏览器效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"现在我们已经为项目铺垫好了基础，让我们进入清单的创建和展示部分吧！"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["仓库源码：",(0,t.jsx)(n.code,{children:"git clone git@github.com:mqyqingfeng/learn-svelte.git"})]}),"\n"]})]})}function S(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(C,{...e})}):C(e)}let w=S;S.__RSPRESS_PAGE_META={},S.__RSPRESS_PAGE_META["Svelte%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F32-%E5%AE%9E%E6%88%98%E7%AF%87%20%E2%9D%98%20%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96.md"]={toc:[{text:"1. 前言",id:"1-前言",depth:2},{text:"2. 初始化项目",id:"2-初始化项目",depth:2},{text:"3. 接入 Clerk",id:"3-接入-clerk",depth:2},{text:"3.1. clerk-sveltekit",id:"31-clerk-sveltekit",depth:3},{text:"3.2. 中文汉化",id:"32-中文汉化",depth:3},{text:"3.3. 自定义汉化",id:"33-自定义汉化",depth:3},{text:"4. 接入 Shadcn UI",id:"4-接入-shadcn-ui",depth:2},{text:"4.1. shadcn-svelte",id:"41-shadcn-svelte",depth:3},{text:"4.2. 支持暗黑模式和主题色",id:"42-支持暗黑模式和主题色",depth:3},{text:"5. 总结",id:"5-总结",depth:2}],title:"32-实战篇 ❘ 项目初始化",headingTitle:"32-实战篇 ❘ 项目初始化",frontmatter:{}}}}]);