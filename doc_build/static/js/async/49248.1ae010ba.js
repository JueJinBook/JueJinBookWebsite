"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["49248"],{4387:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var a=r(552676),s=r(740453);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",pre:"pre"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"10内置工具类型上类型世界的内置方法",children:["10.内置工具类型（上）：类型世界的内置方法",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10内置工具类型上类型世界的内置方法",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["通常情况下，在学习一门编程语言时，我们主要学习的是语法、内置对象以及内置方法，比如说 JavaScript，这三个概念可以分别对应到 ",(0,a.jsx)(n.code,{children:"const name = 'linbudu';"}),"、",(0,a.jsx)(n.code,{children:"Object"})," 、",(0,a.jsx)(n.code,{children:"Array.prototype.sort"}),"。而对于 TypeScript，则可以对应到 ",(0,a.jsx)(n.code,{children:"const name: string = 'linbudu';"}),"、",(0,a.jsx)(n.code,{children:"any 类型"})," 以及这一节要介绍的工具类型。"]}),"\n",(0,a.jsxs)(n.p,{children:["对于内置方法，其实就是一批语言层面提供了的通用工具方法，还是以 JavaScript 为例，内置方法既包括了我们可以通过其它方法模拟的 ",(0,a.jsx)(n.code,{children:"Array.prototype.map"}),"，也包括 ",(0,a.jsx)(n.code,{children:"Function()"})," 这样只能由底层引擎实现的部分。而 JavaScript 中的内置方法是用来操作值的，TypeScript 的内置方法是用来操作类型的。"]}),"\n",(0,a.jsx)(n.p,{children:"这一节，我们要介绍的其实就是 TypeScript 内置的，专用于对类型进行编程的工具方法——我们称之为工具类型。TypeScript 内置了一批简单的工具类型，它们就是类型别名的使用方式，同时在全局可用，无需导入："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"type A = Partial<{}>; // Partial 即是内置的工具类型\n"})}),"\n",(0,a.jsx)(n.p,{children:"在介绍过程中，我们只会关注这些工具类型的实际使用方式，对内部的实现原理并不是入门教程需要包括的部分——毕竟，我们在前面学习到的内置类型工具还不足以让我们完全理解类型编程。"}),"\n",(0,a.jsx)(n.p,{children:"在开始前，我们不妨思考一个问题：在日常使用 JavaScript 进行开发时，你和哪个数据结构打交道最多，为什么？"}),"\n",(0,a.jsx)(n.p,{children:"毋庸置疑，一定是对象，毕竟对象能够更完整地描述程序中的各种模型与状态——你是想要使用一个变量描述二十项归属于一个模型的属性，还是要想二十个变量名？同时，对象的扩展功能也是我们依赖的一项重要能力，这些都是面向对象编程范式中的概念，但其实，对于 JS 开发者来说，我们其实还常常忽略了对象的一个重要能力——即对属性的描述能力。"}),"\n",(0,a.jsx)(n.p,{children:"在 Class 一节中我们学习到了 Class 成员的可访问性描述，public / private / protected，而在对象类型一节中，我们也了解了类似的概念，即属性可选和属性只读。"}),"\n",(0,a.jsx)(n.p,{children:"JavaScript 中，可以通过 Object.defineProperty 来实现属性的只读，但你可以回想下自己有几次使用过这个能力来标记对象属性为只读？原因无他——使用方式不够直观，同时 JavaScript 开发者对只读的概念并不怎么关心。而在 TypeScript 中，我们此前了解过的对象类型只读，必须要在声明时就进行描述，同时无法再进行修改。但现在，有了工具类型的帮助，我们可以更愉快地实现类型修饰了。"}),"\n",(0,a.jsx)(n.p,{children:"第一个登场的工具类型是 Partial，它接收一个对象类型，并将这个对象类型的所有属性都标记为可选，这样我们就不需要一个个将它们标记为可选属性了。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"type User = {\n  name: string;\n  age: number;\n  email: string;\n};\n\ntype PartialUser = Partial<User>;\n\nconst user: User = {\n  name: 'John Doe',\n  age: 30,\n  email: 'john.doe@example.com'\n};\n\n// 可以不实现全部的属性了！\nconst partialUser: PartialUser = {\n  name: 'John Doe',\n  age: 30\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"从 Partial 的使用方式我们可以看到，工具类型使用起来就像一个函数——你给它入参，它还你出参，而出入参都是类型！而这些函数预留的参数，其实也正是我们此前介绍过的，类型世界中的变量——泛型。"}),"\n",(0,a.jsx)(n.p,{children:"如果我们最开始编写了一个内部属性均为必选的对象类型，可以使用 Partial 得到一个属性均为可选的版本。那如果反过来，一开始我们有的就是一个内部属性均为可选的对象类型呢？"}),"\n",(0,a.jsx)(n.p,{children:"这就要说到另一个类型编程的规律了——大部分工具类型都是成对出现的，有将属性标记为可选的 Partial，就会有将属性标记为必选的 Required，它的使用方式和 Partial 完全一致："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"type User = {\n  name?: string;\n  age?: number;\n  email?: string;\n};\n\ntype RequiredUser = Required<User>;\n\nconst user: User = {\n  name: 'John Doe'\n};\n\n// 现在你必须全部实现这些属性了\nconst requiredUser: RequiredUser = {\n  name: 'John Doe',\n  age: 30,\n  email: 'john.doe@example.com'\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"还记得在对象类型一节中我们讲到的对对象类型属性的几种修饰吗？除了可选以外，还有一个 readonly 修饰，用于将属性标记为只读，类似于 Partial，TypeScript 中也内置了一个用于将对象类型所有属性标记为只读的工具类型 Readonly："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"type User = {\n  name: string;\n  age: number;\n  email: string;\n};\n\ntype ReadonlyUser = Readonly<User>;\n\nconst user: User = {\n  name: 'John Doe',\n  age: 30,\n  email: 'john.doe@example.com'\n};\n\nconst readonlyUser: ReadonlyUser = {\n  name: 'John Doe',\n  age: 30,\n  email: 'john.doe@example.com'\n};\n\n// 修改 user 对象的属性\nuser.name = 'Jane Doe';\nuser.age = 25;\nuser.email = 'jane.doe@example.com';\n\n// 修改 readonlyUser 对象的属性\n// readonlyUser.name = 'Jane Doe';  // 报错\n// readonlyUser.age = 25;  // 报错\n// readonlyUser.email = 'jane.doe@example.com';  // 报错\n"})}),"\n",(0,a.jsx)(n.p,{children:"需要注意的是，TypeScript 内置的工具类型中，并不包括与 Readonly 结对出现的版本，你可以认为，只读通常是一个不可逆的行为，如果能够随意将只读修饰移除，就可能破坏了只读带来的安全性。同时，不同于可选与必选，我们最开始获得的类型输入基本不会携带 readonly 修饰。"}),"\n",(0,a.jsx)(n.p,{children:"这一节是内置工具类型的上篇，我们学习了 Partial、Required 以及 Readonly 这三个用在对象类型上的工具类型，以及它们的作用——可选、必选与只读。这些工具类型应当为你展示了类型世界的另一面——它也有自己的内置函数，我们甚至再无需学习新的概念——你只需要理解类型别名与泛型。而考虑到思维习惯的转变，这一节我们的篇幅要稍短一些，主要是通过三个最简单的工具类型，给你打开一点新世界的大门。而在下一节，我们会继续学习内置的工具类型，来感受一下 TypeScript 到底为你准备了多少贴心小礼物。"})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["TypeScript%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%2F10.%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E7%B1%BB%E5%9E%8B%E4%B8%96%E7%95%8C%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95.md"]={toc:[],title:"10.内置工具类型（上）：类型世界的内置方法",headingTitle:"10.内置工具类型（上）：类型世界的内置方法",frontmatter:{}}}}]);