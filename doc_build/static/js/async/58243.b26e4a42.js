"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["58243"],{904254:function(e,n,s){s.r(n),s.d(n,{default:()=>o});var r=s(552676),t=s(740453);let d=s.p+"static/image/9b4060f6ca0dac20768206aa7aa9057e.360baeb9.webp";function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",code:"code",h2:"h2",pre:"pre",blockquote:"blockquote",img:"img"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"8如何引入-pinia-并管控应用的数据状态",children:["8.如何引入 Pinia 并管控应用的数据状态？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8如何引入-pinia-并管控应用的数据状态",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们一般都会考虑统筹管理一个上了规模的 Vue 项目的数据状态，对于基于 Vue2.x 创建的前端项目来说，Vuex 是个不错的选择；但对于使用 Vue3.x 创建前端项目来说，可能 Pinia 才是更好的选择。"}),"\n",(0,r.jsx)(n.p,{children:"相对于 Vuex 来说，Pinia 有以下几方面的优势。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Pinia 没有",(0,r.jsx)(n.code,{children:"mutations"})]}),"，相应的工作都在",(0,r.jsx)(n.code,{children:"actions"}),"中完成，而且",(0,r.jsx)(n.code,{children:"actions"}),"直接支持异步函数。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Pinia 完美支持 ",(0,r.jsx)(n.code,{children:"TypeScript"})]}),"，Vuex 在这方面做得不是很好。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pinia 对开发工具支持很好"}),"，尤其是 ",(0,r.jsx)(n.code,{children:"VS Code"}),"，智能提示很完善，这方面 Vuex 做得不是很好。Pinia 对调试工具（",(0,r.jsx)(n.code,{children:"vue-devtools"}),"）也支持得很好。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["不需要再使用名称空间来控制 ",(0,r.jsx)(n.code,{children:"store"})]}),"，也不需要再考虑 store 的嵌套问题。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pinia 性能优于 Vuex"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"接下来我们就从“如何为工程引入 Pinia，如何创建 Store，如何创建数据模型，如何使用 Store，如何订阅 Store，如何完成 Store 间的互访”等几个方面讲解如何使用 Pinia 管控应用的数据状态。"}),"\n",(0,r.jsxs)(n.h2,{id:"为项目引入-pinia",children:["为项目引入 Pinia",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为项目引入-pinia",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["使用如下命令为项目安装 ",(0,r.jsx)(n.code,{children:"Pinia"})," 依赖："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install pinia -D\n"})}),"\n",(0,r.jsxs)(n.p,{children:["安装完成后，修改渲染进程的入口文件，使其加载 ",(0,r.jsx)(n.code,{children:"Pinia"})," 插件"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'// src\\renderer\\main.ts\nimport { createApp } from "vue";\nimport "./assets/style.css";\nimport "./assets/icon/iconfont.css";\nimport App from "./App.vue";\nimport { router } from "./router";\nimport { createPinia } from "pinia";\n\ncreateApp(App).use(createPinia()).use(router).mount("#app");\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"创建-store",children:["创建 Store",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-store",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，我们在",(0,r.jsx)(n.code,{children:"src\\renderer\\store"}),"目录下为我们的应用创建第一个 Store 程序，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'//src\\renderer\\store\\useChatStore.ts\nimport { defineStore } from "pinia";\nimport { Ref, ref } from "vue";\nimport { ModelChat } from "../../model/ModelChat";\n//初始化模拟数据\nlet prepareData = () => {\n  let result = [];\n  for (let i = 0; i < 10; i++) {\n    let model = new ModelChat();\n    model.fromName = "聊天对象" + i;\n    model.sendTime = "昨天";\n    model.lastMsg = "这是此会话的最后一条消息" + i;\n    model.avatar = `https://pic3.zhimg.com/v2-306cd8f07a20cba46873209739c6395d_im.jpg?source=32738c0c`;\n    result.push(model);\n  }\n  return result;\n};\n//定义一个Store\nexport const useChatStore = defineStore("chat", () => {\n  let data: Ref<ModelChat[]> = ref(prepareData());\n  let selectItem = (item: ModelChat) => {\n    if (item.isSelected) return;\n    data.value.forEach((v) => (v.isSelected = false));\n    item.isSelected = true;\n  };\n  return { data, selectItem };\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在这个文件中，我们通过 export 暴露了一个 ",(0,r.jsx)(n.code,{children:"useChatStore"})," 方法，这个方法是通过 Pinia 的",(0,r.jsx)(n.code,{children:"defineStore"}),"方法创建的，在 Vue 业务组件中执行这个函数实例才会得到真正的 Store。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们",(0,r.jsxs)(n.strong,{children:["使用",(0,r.jsx)(n.code,{children:"defineStore(name,function)"}),"的形式创建 Store，这种形式的 Store 叫作",(0,r.jsx)(n.code,{children:"Setup Stores"})]}),"。Pinia 还提供了另一种形式的 Store ：",(0,r.jsx)(n.a,{href:"https://pinia.vuejs.org/core-concepts/#option-stores",target:"_blank",rel:"noopener noreferrer",children:"Option Stores"}),"，具体可以参阅 Pinia 的官方文档。你如果也像我一样倾向于使用 Vue 组件的 Setup API（这也是 Vue 作者推荐的方式），那么使用 Pinia 的",(0,r.jsx)(n.code,{children:"Setup Stores"}),"会更方便，编码风格也一致。"]}),"\n",(0,r.jsxs)(n.p,{children:["这个 Store 的状态数据存储在：",(0,r.jsx)(n.code,{children:"data"}),"属性中，这是一个被",(0,r.jsx)(n.code,{children:"Ref"}),"对象包裹着的数组，数组里的内容是我们通过",(0,r.jsx)(n.code,{children:"prepareData"}),"方法模拟的（模拟了十个聊天会话对象）。"]}),"\n",(0,r.jsxs)(n.p,{children:["这个 Store 还提供了一个",(0,r.jsx)(n.code,{children:"Action"}),"方法：",(0,r.jsx)(n.code,{children:"selectItem"}),"，这个方法用于选中某个具体的聊天会话。"]}),"\n",(0,r.jsx)(n.p,{children:"代码中的 ModelChat 是数据模型定义类，接下来我们就介绍这个数据模型。"}),"\n",(0,r.jsxs)(n.h2,{id:"数据模型",children:["数据模型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据模型",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["聊天会话的数据模型是在",(0,r.jsx)(n.code,{children:"src\\model"}),"目录下定义的，因为应用的主进程和渲染进程都可能会用到数据模型，所以我们把它放置在",(0,r.jsx)(n.code,{children:"renderer"}),"和",(0,r.jsx)(n.code,{children:"main"}),"的同级目录下。以后我们还会在这个目录下定义更多的模型。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ModelChat"}),"模型的代码如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'// src\\model\\ModelChat.ts\nimport { ModelBase } from "./ModelBase";\nexport class ModelChat extends ModelBase {\n  fromName?: string;\n  sendTime?: number | string;\n  isSelected = false;\n  lastMsg?: string;\n  avatar?: string;\n  /**\n   * 0单聊，1群聊，2公众号，3文件传输助手\n   */\n  chatType?: number;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"模型主要用于描述对象携带的信息"}),"，所以模型里的类并没有具体的方法。"]}),"\n",(0,r.jsxs)(n.p,{children:["由于所有的模型都会拥有一些共同的字段，所以我们把这些字段放置在模型的基类",(0,r.jsx)(n.code,{children:"ModelBase"}),"中，这个类的代码如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'// src\\model\\ModelBase.ts\nimport crypto from "crypto";\nexport class ModelBase {\n  id: string;\n  constructor() {\n    this.id = crypto.randomUUID();\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这里我们暂时只提供了一个公共字段：",(0,r.jsx)(n.code,{children:"id"}),"，",(0,r.jsxs)(n.strong,{children:["凡继承于",(0,r.jsx)(n.code,{children:"ModelBase"}),"的子类都将拥有这个字段"]}),"，而且这个字段是随模型实例化的时候自动创建的。也就是说，只有",(0,r.jsx)(n.code,{children:"new ModelXXXX"}),"时才会创建这个字段，",(0,r.jsx)(n.code,{children:"let model = obj as ModelXXXX"}),"时不会创建这个字段。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们使用 Node.js ",(0,r.jsx)(n.code,{children:"crypto"}),"模块的",(0,r.jsx)(n.code,{children:"randomUUID"}),"方法来生成每个聊天会话的 ID，这将为我们把数据存储在数据库中打下基础。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["无论是",(0,r.jsx)(n.code,{children:"ModelChat"}),"模型还是我们后文介绍到的其他模型，都只用作演示用途，实际项目中的模型要比这些模型复杂得多。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"使用-store",children:["使用 Store",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-store",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"首先我们把模型中模拟的 10 个聊天会话显示在界面上，代码如下所示："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'<script setup lang="ts">\n// src\\renderer\\Window\\WindowMain\\Chat\\ChatBoard.vue\nimport { onMounted } from "vue";\nimport { useChatStore } from "../../../store/useChatStore";\nimport ChatItem from "./ChatItem.vue";\nimport ChatSearch from "./ChatSearch.vue";\nlet store = useChatStore();\nonMounted(() => {\n  //选中第七个会话\n  store.selectItem(store.data[6]);\n});\n<\/script>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<template>\n  <div class="ChatList">\n    <ChatSearch />\n    <div class="ListBox">\n      <ChatItem :data="item" v-for="item in store.data" :key="item.id" />\n    </div>\n  </div>\n</template>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在这段代码中，我们通过 Vue 的",(0,r.jsx)(n.code,{children:"v-for"}),"指令渲染了一个自定义组件列表（",(0,r.jsx)(n.code,{children:"ChatItem"}),"）。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["store 对象是通过",(0,r.jsx)(n.code,{children:"useChatStore"}),"方法获取的"]}),"，",(0,r.jsx)(n.code,{children:"useChatStore"}),"方法就是我们前面介绍的",(0,r.jsx)(n.code,{children:"useChatStore.ts"}),"导出的方法。得到 store 对象之后，可以直接使用",(0,r.jsx)(n.code,{children:"store.data"}),"获取 Store 对象里的数据。"]}),"\n",(0,r.jsxs)(n.p,{children:["在当前组件",(0,r.jsx)(n.code,{children:"ChatBoard"}),"渲染完成后，我们调用了",(0,r.jsx)(n.code,{children:"store"}),"对象的",(0,r.jsx)(n.code,{children:"selectItem"}),"方法，选中了第 7 个会话"]}),"\n",(0,r.jsxs)(n.p,{children:["具体每一个聊天会话对象是通过自定义组件的 ",(0,r.jsx)(n.code,{children:"data"})," 属性传递到组件内部的。"]}),"\n",(0,r.jsxs)(n.p,{children:["实际上我们在",(0,r.jsx)(n.code,{children:"ChatBoard"}),"组件渲染完成时，还可以通过如下代码来选中某个聊天会话："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"store.$patch((v) => (v.data[5].isSelected = true));\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ChatItem"}),"自定义组件的代码如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'<script setup lang="ts">\n// src\\renderer\\Window\\WindowMain\\Chat\\ChatItem.vue\nimport { ModelChat } from "../../../../model/ModelChat";\nimport { useChatStore } from "../../../store/useChatStore";\ndefineProps<{ data: ModelChat }>();\nlet store = useChatStore();\nlet itemClick = (item: ModelChat) => {\n  //选中当前会话\n  store.selectItem(item);\n};\n<\/script>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<template>\n  <div @click="itemClick(data)" :class="[\'chatItem\', { chatItemSelected: data.isSelected }]">\n    <div class="avatar">\n      <img :src="data.avatar" alt="" />\n    </div>\n    <div class="chatInfo">\n      <div class="row">\n        <div class="fromName">{{ data.fromName }}</div>\n        <div class="timeName">{{ data.sendTime }}</div>\n      </div>\n      <div class="row">\n        <div class="lastMsg">{{ data.lastMsg }}</div>\n        <div class="subscribe"></div>\n      </div>\n    </div>\n  </div>\n</template>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在这段代码中，我们使用",(0,r.jsx)(n.code,{children:"defineProps"}),"方法接收父组件传来的数据。"]}),"\n",(0,r.jsx)(n.p,{children:"聊天会话对象里的数据在这个自定义组件中被展开，渲染给用户。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["当用户点击这个自定义组件的时候，程序执行了 Store 对象的",(0,r.jsx)(n.code,{children:"selectItem"}),"方法，这个方法负责选中用户点击的组件，改变了用户点击组件的样式，同时还取消了原来选中的组件"]}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"订阅-store",children:["订阅 Store",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#订阅-store",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["无论是用户点击",(0,r.jsx)(n.code,{children:"ChatItem"}),"组件选中一个聊天会话，还是",(0,r.jsx)(n.code,{children:"ChatBoard"}),"渲染完成后选中一个聊天会话，我们都应该通知其他组件，选中的聊天会话变更了。"]}),"\n",(0,r.jsxs)(n.p,{children:["这里我们在",(0,r.jsx)(n.code,{children:"MessageBoard"}),"组件中演示这个功能，代码如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'<script setup lang="ts">\n//src\\renderer\\Window\\WindowMain\\Chat\\MessageBoard.vue\nimport { ref } from "vue";\nimport BarTop from "../../../Component/BarTop.vue";\nimport { useChatStore } from "../../../store/useChatStore";\nlet store = useChatStore();\nlet logInfo = ref("");\nlet curId = "";\n//订阅Store内数据的变化\nstore.$subscribe((mutations, state) => {\n  let item = state.data.find((v) => v.isSelected);\n  let id = item?.id as string;\n  if (id != curId) {\n    logInfo.value = `现在应该加载ID为${item?.id}的聊天记录`;\n    curId = id;\n  }\n});\n<\/script>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<template>\n  <div class="MessageBord">\n    <BarTop />\n    <div class="MessageList">{{ logInfo }}</div>\n  </div>\n</template>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在上面代码中我们",(0,r.jsxs)(n.strong,{children:["使用",(0,r.jsx)(n.code,{children:"store"}),"对象的",(0,r.jsx)(n.code,{children:"$subscribe"}),"方法订阅了数据变更事件"]}),"，无论什么时候 store 内的数据发生了变化，都会执行我们为",(0,r.jsx)(n.code,{children:"$subscribe"}),"方法提供的回调函数。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["用户点击",(0,r.jsx)(n.code,{children:"ChatItem"}),"组件选中一个聊天会话时，无论是通过",(0,r.jsx)(n.code,{children:"selectItem"}),"方法更新数据，还是通过",(0,r.jsx)(n.code,{children:"$patch"}),"方法更新数据，都会触发订阅事件。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"我们在订阅回调中，验证选中的会话是否发生了变化（有可能是当前 store 其他数据对象的变化触发了订阅回调），如果是，那么就给出提示（此处仅仅用于演示）。"}),"\n",(0,r.jsxs)(n.p,{children:["订阅回调函数有两个参数 ，第一个是 ",(0,r.jsx)(n.code,{children:"mutations"})," 参数，这个参数的",(0,r.jsx)(n.code,{children:"events"}),"属性携带着变更前的值和变更后的值，但这个属性只有在开发环境下存在，生产环境下不存在。",(0,r.jsx)(n.strong,{children:"订阅的第二个参数是 state，这个参数包含 store 中的数据"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"以这种方式更新 store 里的数据，不利于复用数据更新的逻辑，接下来我就介绍可以复用数据更新逻辑的方案。"}),"\n",(0,r.jsxs)(n.h2,{id:"store-的互访",children:["store 的互访",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#store-的互访",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"让我们新建一个模型类，代码如下所示："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'//src\\model\\ModelMessage.ts\nimport { ModelBase } from "./ModelBase";\nexport class ModelMessage extends ModelBase {\n  createTime?: number;\n  receiveTime?: number;\n  messageContent?: string;\n  chatId?: string;\n  fromName?: string;\n  avatar?: string;\n  //** 是否为传入消息 */\n  isInMsg?: boolean;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这个模型用于描述聊天的消息，聊天会话模型与这个模型之间的关系是一对多的关系（1:n），它们之间的关系字段就是",(0,r.jsx)(n.code,{children:"ModelChat"}),"模型的 id 字段和",(0,r.jsx)(n.code,{children:"ModelMessage"}),"模型的",(0,r.jsx)(n.code,{children:"chatId"}),"字段。后面的代码中我们还会进一步描述这种关系。"]}),"\n",(0,r.jsxs)(n.p,{children:["然后创建",(0,r.jsx)(n.code,{children:"useMessageStore"}),"，用于管理消息的状态数据，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'//src\\renderer\\store\\useMessageStore.ts\nimport { ModelChat } from "./../../model/ModelChat";\nimport { ModelMessage } from "./../../model/ModelMessage";\nimport { defineStore } from "pinia";\nimport { ref } from "vue";\n\nexport const useMessageStore = defineStore("message", () => {\n  let data = ref<ModelMessage[]>([]);\n  let msg1 = `醉里挑灯看剑，梦回吹角连营。八百里分麾下灸，五十弦翻塞外声。沙场秋点兵。马作的卢飞快，弓如霹雳弦惊。了却君王天下事，嬴得生前身后名。可怜白发生`;\n  let msg2 = `怒发冲冠，凭栏处，潇潇雨歇。抬望眼，仰天长啸，壮怀激烈。 三十功名尘与土，八千里路云和月。莫等闲，白了少年头，空悲切！ 靖康耻，犹未雪；臣子恨，何时灭?驾长车，踏破贺兰山缺！ 壮志饥餐胡虏肉，笑谈渴饮匈奴血。待从头，收拾旧山河，朝天阙！`;\n  let initData = (chat: ModelChat) => {\n    let result = [];\n    for (let i = 0; i < 10; i++) {\n      let model = new ModelMessage();\n      model.createTime = Date.now();\n      model.isInMsg = i % 2 === 0;\n      model.messageContent = model.isInMsg ? msg1 : msg2;\n      model.fromName = model.isInMsg ? chat.fromName : "我";\n      model.avatar = chat.avatar;\n      model.chatId = chat.id;\n      result.push(model);\n    }\n    data.value = result;\n  };\n  return { data, initData };\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["如你所见，消息数据我们也是模拟出来的，这里模拟了 10 条消息，我们预期用户切换会话的时候，执行",(0,r.jsx)(n.code,{children:"initData"}),"方法，初始化当前会话的消息。"]}),"\n",(0,r.jsxs)(n.p,{children:["现在我们修改一下",(0,r.jsx)(n.code,{children:"MessageBoard"}),"组件的的代码，如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'<script setup lang="ts">\nimport { ModelChat } from "../../../../model/ModelChat";\nimport BarTop from "../../../Component/BarTop.vue";\nimport { useChatStore } from "../../../store/useChatStore";\nimport { useMessageStore } from "../../../store/useMessageStore";\nimport MessageItem from "./MessageItem.vue";\nlet chatStore = useChatStore();\nlet messageStore = useMessageStore();\nlet curId = "";\n//订阅Store内数据的变化\nchatStore.$subscribe((mutations, state) => {\n  let item = state.data.find((v) => v.isSelected) as ModelChat;\n  if (item.id != curId) {\n    messageStore.initData(item);\n    curId = item.id;\n  }\n});\n<\/script>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<template>\n  <div class="MessageBord">\n    <BarTop />\n    <div class="MessageList">\n      <MessageItem :data="item" v-for="item in messageStore.data" :key="item.id" />\n    </div>\n  </div>\n</template>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["现在",(0,r.jsxs)(n.strong,{children:["当选中的聊天会话切换时，我们执行了",(0,r.jsx)(n.code,{children:"messageStore"}),"对象的",(0,r.jsx)(n.code,{children:"initData"}),"方法，这样就初始化了",(0,r.jsx)(n.code,{children:"messageStore"}),"内部的状态数据"]}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"MessageItem"}),"是我们新创建的一个 Vue 组件，这个组件用于显示一条消息的具体信息。代码如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'<script setup lang="ts">\n//src\\renderer\\Window\\WindowMain\\Chat\\MessageItem.vue\nimport { ModelMessage } from "../../../../model/ModelMessage";\ndefineProps<{ data: ModelMessage }>();\n<\/script>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<template>\n  <template v-if="data.isInMsg">\n    <div class="messageItem left">\n      <div class="avatar">\n        <img :src="data.avatar" alt="" />\n      </div>\n      <div class="msgBox">\n        <div class="fromName">{{ data.fromName }}</div>\n        <div class="msgContent">{{ data.messageContent }}</div>\n      </div>\n    </div>\n  </template>\n  <template v-else>\n    <div class="messageItem right">\n      <div class="msgBox">\n        <div class="msgContent">{{ data.messageContent }}</div>\n      </div>\n      <div class="avatar">\n        <img :src="data.avatar" alt="" />\n      </div>\n    </div>\n  </template>\n</template>\n'})}),"\n",(0,r.jsx)(n.p,{children:"这段代码我们就不多做解释了，现在我们的界面变成了下面这样子："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"5.1.png"})}),"\n",(0,r.jsxs)(n.p,{children:["有心的读者可能已经发现了，如果我们在切换选中的聊天会话时，直接初始化",(0,r.jsx)(n.code,{children:"messageStore"}),"里的数据，就完全不需要在",(0,r.jsx)(n.code,{children:"MessageBord"}),"组件里订阅",(0,r.jsx)(n.code,{children:"chatStore"}),"的数据变更了。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"pinia"}),"是支持这种操作的，现在我们修改一下",(0,r.jsx)(n.code,{children:"useChatStore"}),"的代码，如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'// src\\renderer\\store\\useChatStore.ts\nimport { useMessageStore } from "./useMessageStore";\nexport const useChatStore = defineStore("chat", () => {\n  let data: Ref<ModelChat[]> = ref(prepareData());\n  let selectItem = (item: ModelChat) => {\n    if (item.isSelected) return;\n    data.value.forEach((v) => (v.isSelected = false));\n    item.isSelected = true;\n    let messageStore = useMessageStore(); //新增的行\n    messageStore.initData(item); //新增的行\n  };\n  return { data, selectItem };\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["你会发现我们",(0,r.jsxs)(n.strong,{children:["完全可以在",(0,r.jsx)(n.code,{children:"selectItem"}),"方法内使用",(0,r.jsx)(n.code,{children:"messageStore"}),"提供的方法"]}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"删除掉订阅逻辑之后，不但提升了性能，减少了内存消耗，还使我们的代码逻辑变得更加清晰了。"}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本节我们介绍了如何为工程引入 Pinia，如何创建 Store，如何创建数据模型，如何使用 Store，如何订阅 Store，如何完成 Store 间的互访等内容。"}),"\n",(0,r.jsx)(n.p,{children:"本节的内容技术难度并不高，但工程实战性特别强，希望你在学习本节内容时体会一个工程内有数百个 Store 时该如何组织管控应用的数据状态。"}),"\n",(0,r.jsx)(n.p,{children:"下一节我们将介绍如何为应用引入客户端数据库。"}),"\n",(0,r.jsxs)(n.h2,{id:"源码",children:["源码",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#源码",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本节示例代码请通过如下地址自行下载："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://gitee.com/horsejs_admin/electron-jue-jin/tree/pinia",target:"_blank",rel:"noopener noreferrer",children:"源码仓储"})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let o=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["Electron%20%2B%20Vue%203%20%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%2F8.%E5%A6%82%E4%BD%95%E5%BC%95%E5%85%A5%20Pinia%20%E5%B9%B6%E7%AE%A1%E6%8E%A7%E5%BA%94%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81%EF%BC%9F.md"]={toc:[{text:"为项目引入 Pinia",id:"为项目引入-pinia",depth:2},{text:"创建 Store",id:"创建-store",depth:2},{text:"数据模型",id:"数据模型",depth:2},{text:"使用 Store",id:"使用-store",depth:2},{text:"订阅 Store",id:"订阅-store",depth:2},{text:"store 的互访",id:"store-的互访",depth:2},{text:"总结",id:"总结",depth:2},{text:"源码",id:"源码",depth:2}],title:"8.如何引入 Pinia 并管控应用的数据状态？",headingTitle:"8.如何引入 Pinia 并管控应用的数据状态？",frontmatter:{}}}}]);