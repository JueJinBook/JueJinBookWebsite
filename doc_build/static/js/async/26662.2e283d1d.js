"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["26662"],{962591:function(n,s,e){e.r(s),e.d(s,{default:()=>h});var r=e(552676),t=e(740453);let i=e.p+"static/image/30319bcf6e48812e6067cbdb5434070d.6f34f680.webp",l=e.p+"static/image/edf00ee393f9ea2615629ecee58129a8.3e061fd5.webp",o=e.p+"static/image/7f2bec37158583fbf6c263c4a0024518.ec9c9d25.webp";function c(n){let s=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",h2:"h2",img:"img",blockquote:"blockquote",h3:"h3",pre:"pre",code:"code"},(0,t.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h1,{id:"37组件实战开发套件实现",children:["37.组件实战：开发套件实现",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#37组件实战开发套件实现",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"在低代码平台中，物料组件的丰富程度对于搭建应用的上限起着决定性作用。拥有丰富的物料组件意味着开发人员可以更快速地构建界面，同时通过组合这些组件可以实现复杂的功能。在我们公司中，我们有以下几种类型的组件："}),"\n",(0,r.jsx)(s.p,{children:"在公司当中，我们有很多的资产都可以进行沉淀，绝大部分的公司或多或少都会有以下几种组件的相关实现"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"基础组件库"}),"：提供一系列原子级别的组件控件，彼此之间能够相互组合。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"高阶组件"}),"：提供基于原子组件与设计规范的高阶组件控件，满足部分通用场景业务的模式。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"业务组件"}),"：业务组件则是根据对应公司的通用业务或者是特定场景业务封装成的组件控件，满足产品设计场景。"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"在建设组件体系的过程中，我们通过工程化的手段可以用极小的成本来进行低代码的平台接入，在两者之间寻找开发与接入的平衡点。在组件体系的开发阶段当中，可以将生命周期划分为以下几个阶段："}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"开发阶段"}),"：代码开发的阶段。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"构建阶段"}),"：完成开发后，工程化构建进行的阶段。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"发布部署阶段"}),"：构建产物完成后，发布系统进行的阶段。"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"接下来，本章节内容主要会从物料组件的体系做为切入，来完成组件化的建设，在此基础之上，将其进行完成物料化的逐步演进。"}),"\n",(0,r.jsxs)(s.h2,{id:"工作流程",children:["工作流程",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#工作流程",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"基于上述组件生命周期阶段划分，如下图所示："}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"开发阶段"}),"：在开发阶段，主要是进行物料组件的开发，一个标准的物料组件在之前设计篇中已经提到过，在进行标准化的组件开发流程时，能够划分为以下几个"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"组件"}),"：组件源码、组件样式、组件类型是组件基础之下"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"协议"}),"：低代码协议相关，通过",(0,r.jsx)(s.strong,{children:"createReactMaterial"}),"将其声明为物料组件。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"物料描述"}),"：",(0,r.jsx)(s.strong,{children:"README"}),"文件的描述，用于在物料平台中进行展示，并且如果公司有国际化业务，那么多语言描述在。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"StoryBook"}),"：",(0,r.jsx)(s.strong,{children:"Storybook"}),"是一个用于开发和展示用户界面组件的开源工具。它为开发人员提供了一种以组件为中心的开发环境，在封装物料组件时，相关的测试、文档等都可以",(0,r.jsx)(s.strong,{children:"Storybook"}),"进行维护."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"package.json"}),"：物料组件的描述信息，标准化的p",(0,r.jsx)(s.strong,{children:"ackage.json"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"构建阶段"}),"：在构建阶段通过工程化打包，将其拆分为不同的产物来进行管理。"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"构建产物"}),"：将所有导出的组件打包成",(0,r.jsx)(s.strong,{children:"UMD、ESM"}),"模块进行打包构建。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"搭建产物"}),"：将所有的组件与搭建物料产物进行打包构建。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"文档产物"}),"：组件的描述、示例等进行构建，生成静态的站点，提供一站式的文档产物。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"物料包描述"}),"：自定义物料组件相关的描述和依赖等等信息。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"发布阶段"}),"：发布阶段通常就是一个将产物推送到不同存储区域的一个过程，我大体上列举了几个不同的点："]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"OSS + CDN"}),"：资源在线化是一个常态，在之前也提到过，在打包的时候很多同学会将React、Vue等依赖都替换成为从",(0,r.jsx)(s.strong,{children:"在线CDN"}),"引入，其原理就是因为通过",(0,r.jsx)(s.strong,{children:"OSS+CDN"}),"的方案可以将",(0,r.jsx)(s.strong,{children:"js bundle"}),"资源存储在远程，通过资源的方式来进行安装。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"npm仓库"}),"：正常的npm发布流程，将构建好的产物发布到私有的npm仓库当中，从而可以通过npm install进行依赖安装。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"文档中心"}),"：将物料组件的文档信息进行发布部署，来完成静态文档的部署展示。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Material Platfrom"}),"：物料平台，将发布的一些地址，如",(0,r.jsx)(s.strong,{children:"CDN资源地址"}),"，",(0,r.jsx)(s.strong,{children:"文档地址"}),"，",(0,r.jsx)(s.strong,{children:"物料包信息"}),"同步到",(0,r.jsx)(s.strong,{children:"物料平台"}),"进行存储，从而来完整整个物料组件的资源整合，统一收敛口径使用和呈现展示。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,r.jsxs)(s.h2,{id:"模版工程",children:["模版工程",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#模版工程",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["基于上述的工作流程描述，可以将其抽离成为一个标准的模版工程，并且通过",(0,r.jsx)(s.strong,{children:"CLI"}),"来进行一键初始化项目。\n接下来就来实现模版整个模版工程的创建吧。由于低代码平台是通用型的能力，那么部分组件实践就来基于标准化的组件体系来进行物料开发，并将其导入到低代码平台中进行使用，完成整个物料中心与编辑器的流程打通。"]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:["大多时候物料是不需要",(0,r.jsx)(s.strong,{children:"Monorepo"}),"的，如果需要颗粒度更细的组织模式依旧可以使用 ",(0,r.jsx)(s.strong,{children:"Monorepo"})," 的方式进行组织。具体方式取决于对应的管理模式。"]}),"\n"]}),"\n",(0,r.jsxs)(s.h3,{id:"初始化工程",children:["初始化工程",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化工程",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["首先，通过",(0,r.jsx)(s.strong,{children:"pnpm init"}),"来初始化一个简单的代码工程。"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"pnpm init \n"})}),"\n",(0,r.jsxs)(s.p,{children:["初始化文档后，使用",(0,r.jsx)(s.strong,{children:"storybook"}),"命令来初始化示例文档相关的配置文件与资源生成。如下代码所示，通过",(0,r.jsx)(s.strong,{children:"npx"}),"安装",(0,r.jsx)(s.strong,{children:"storybook"}),"后直接执行",(0,r.jsx)(s.strong,{children:"init"}),"可以快速进行安装和初始化。"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"npx storybook@latest init \n"})}),"\n",(0,r.jsx)(s.p,{children:"如下所示：当初始化结束后，本地文件目录会发生变化，会对你当前的工程进行一些初始化，用于支持其运作。"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-diff",children:"+├── .storybook\n+│  ├── main.ts\n+│  └── preview.ts\n├── package.json\n├── pnpm-lock.yaml\n+├── stories\n+│  ├── assets\n+│  │  ├── accessibility.png\n+│  │  ├── accessibility.svg\n+│  │  ├── addon-library.png\n+│  │  ├── assets.png\n+│  │  ├── context.png\n+│  │  ├── discord.svg\n+│  │  ├── docs.png\n+│  │  ├── figma-plugin.png\n+│  │  ├── github.svg\n+│  │  ├── share.png\n+│  │  ├── styling.png\n+│  │  ├── testing.png\n+│  │  ├── theming.png\n+│  │  ├── tutorials.svg\n+│  │  └── youtube.svg\n+│  ├── button.css\n+│  ├── Button.stories.ts\n+│  ├── Button.tsx\n+│  ├── Configure.mdx\n+│  ├── header.css\n+│  ├── Header.stories.ts\n+│  ├── Header.tsx\n+│  ├── page.css\n+│  ├── Page.stories.ts\n+│  └── Page.tsx\n└── tsup.config.ts\n"})}),"\n",(0,r.jsxs)(s.p,{children:["除此之外，当你打开",(0,r.jsx)(s.strong,{children:"package.json"}),"后，会发现",(0,r.jsx)(s.strong,{children:"sotrybook"}),"的开发和构建命令已经自动写入进",(0,r.jsx)(s.strong,{children:"scripts"}),"当中，后续只需要执行",(0,r.jsx)(s.strong,{children:"storybook"}),"和",(0,r.jsx)(s.strong,{children:"build-storybook"}),"即可。"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-diff",children:'"scripts": {\n    "start": "tsup --watch",\n    "build": "tsup",\n+   "storybook": "storybook dev -p 6006",\n+   "build-storybook": "storybook build"\n  },\n'})}),"\n",(0,r.jsxs)(s.p,{children:["执行",(0,r.jsx)(s.strong,{children:"pnpm run storybook"}),"后，可以来启动",(0,r.jsx)(s.strong,{children:"storybook"}),"的工程，看下是否存在问题。"]}),"\n",(0,r.jsx)(s.p,{children:"如下图所示："}),"\n",(0,r.jsxs)(s.p,{children:["当进入",(0,r.jsx)(s.strong,{children:"localhost:6006"}),"后会发现，整个组件的文档和示例页面能正常展示就说明初始化过程很顺利，没有踩到一些坑点。如果需要制定端口号的话，可以通过",(0,r.jsx)(s.strong,{children:"storybook"}),"的 ",(0,r.jsx)(s.strong,{children:"-p"})," 命令来自定义执行的端口号(port)。"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(s.h3,{id:"产物构建",children:["产物构建",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#产物构建",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["针对产物的构建，在之前的设计篇中也提到过了区分物料的打包方式，因此在这边也是通过两个不同的",(0,r.jsx)(s.strong,{children:"entry"}),"来区分不同的产物。"]}),"\n",(0,r.jsx)(s.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(s.p,{children:["在",(0,r.jsx)(s.strong,{children:"tsup.config.ts"}),"中，分别将",(0,r.jsx)(s.strong,{children:"src"}),"目录下的",(0,r.jsx)(s.strong,{children:"components.tsx"}),"和",(0,r.jsx)(s.strong,{children:"materials.tsx"}),"进行不同的",(0,r.jsx)(s.strong,{children:"entry"}),"声明，那么在执行构建命令时就会在",(0,r.jsx)(s.strong,{children:"dist"}),"当中分别产生对应的产物文件。"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:'export default defineConfig((options) => ({\n  minify: !options.watch,\n  entry: {\n    components: \'./src/components.tsx\',\n    materiamls: \'./src/materials.tsx\'\n  },\n  splitting: false,\n  sourcemap: false,\n  format: ["esm"],\n  external: ["react", "react-dom", "@craftjs/core", "antd", "@ant-design/pro-components", "react-monaco-editor", "lodash"],\n  dts: true,\n}))\n'})}),"\n",(0,r.jsx)(s.p,{children:"执行tsup结果如下所示："}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:'> test-demo@1.0.0 build /Desktop/示例/test-demo\n> tsup\n\nCLI Building entry: {"components":"./src/components.tsx","materiamls":"./src/materials.tsx"}\nCLI Using tsconfig: tsconfig.json\nCLI tsup v7.2.0\nCLI Using tsup config: /Users/wangly19/Desktop/示例/test-demo/tsup.config.ts\nCLI Target: esnext\nESM Build start\nESM You have emitDecoratorMetadata enabled but @swc/core was not installed, skipping swc plugin\nESM dist/components.mjs 0 B\nESM dist/materiamls.mjs 0 B\nESM ⚡️ Build success in 5ms\nDTS Build start\nDTS ⚡️ Build success in 524ms\nDTS dist/components.d.mts 12.00 B\nDTS dist/materiamls.d.mts 12.00 B\n'})}),"\n",(0,r.jsxs)(s.h3,{id:"实现一个物料组件",children:["实现一个物料组件",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#实现一个物料组件",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["在之前提到过了物料组件的一个分层，根据更细一步的划分下，我们需要在这个基础上新增",(0,r.jsx)(s.strong,{children:"stories"}),"来放置组件的示例和撰写对应的相关文档。"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-diff",children:"+├── button\n+│  ├── index.tsx // 物料导出\n+│  └── view.tsx // 组件导出\n+│  └── settings.tsx // 属性面板导出\n+│  └── stories.[tsx|mdx] // 文档示例导出\n"})}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"在此之前呢，需要将之前低代码中的core和setter两个依赖包发布到正式的npm平台，或者是通过本地发布的形式进行引用，才能够跨工程进行访问哦"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"当有了前期的准备工作后，就可以进行组件的开发了，下面就是简单的一个物料组件封装过程："}),"\n",(0,r.jsx)(s.p,{children:"首先来看物料组件的声明，这个和之前如何创建物料组件是一致的，在此之间已经实现过很多次了"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:"import { createReactMaterial } from '@huos/core'\nimport { Button } from './view'\nimport { Settings } from './settings'\n\nexport __TestButton = createReactMaterial(Button, {\n  displayName: 'TestButton',\n  related: {\n    settingRender: Settings\n  }\n})\n"})}),"\n",(0,r.jsxs)(s.p,{children:["一个标准的",(0,r.jsx)(s.strong,{children:"view"}),"组件实现，这个是一个纯功能的，并没有与物料有强相关联的逻辑。大部分场景下都是通用的。不管是业务组件也好还是原子组件也好，在",(0,r.jsx)(s.strong,{children:"view"}),"当中，尽可能的导出一些存粹的组件代码，避免大量的物料内容插入。"]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"Demo是StoryBook的默认实现。"}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:"import React from 'react';\nimport './button.css';\n\ninterface ButtonProps {\n  primary?: boolean;\n  backgroundColor?: string;\n  size?: 'small' | 'medium' | 'large';\n  label: string;\n  onClick?: () => void;\n}\n\nexport const Button = ({\n  primary = false,\n  size = 'medium',\n  backgroundColor,\n  label,\n  ...props\n}: ButtonProps) => {\n  const mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n  return (\n    <button\n      type=\"button\"\n      className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}\n      style={{ backgroundColor }}\n      {...props}\n    >\n      {label}\n    </button>\n  );\n};\n"})}),"\n",(0,r.jsxs)(s.p,{children:["除此之外就是",(0,r.jsx)(s.strong,{children:"stories"}),"和",(0,r.jsx)(s.strong,{children:"settings"}),"都比较标准化，在这里就不展开细说。完成组件后，将其分别进行导出。"]}),"\n",(0,r.jsx)(s.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(s.p,{children:["分别将",(0,r.jsx)(s.strong,{children:"view.ts"}),"和",(0,r.jsx)(s.strong,{children:"index.tsx"}),"在不同文件下进行引入，"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:"// components.tsx\nexport * from './components/button/view'\n\n// materials tsx\nexport * from './components/button'\n"})}),"\n",(0,r.jsxs)(s.h2,{id:"material-platform",children:["Material Platform",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#material-platform",children:"#"})]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"物料平台后续会随着工程链路更新而进行补充，在这里可以先有个印象。"}),"\n"]}),"\n",(0,r.jsxs)(s.h2,{id:"总结",children:["总结",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"那么在回到工作流程本身，在开发与构建阶段当中，基本上所有的要点要已经覆盖到了。后续的工作就是通过部署平台，将其进行发布与部署与低代码平台进行打通，完成整个核心流程的闭环。"}),"\n",(0,r.jsxs)(s.p,{children:["除此之外，为了更加方便的进行开发，从工程化的角度上也可以将其抽离成为工程模板，通过",(0,r.jsx)(s.strong,{children:"CLI"}),"的方式进行快速的创建与初始化，避免无意义的重复配置工作。在之前的掘金的文章当中也有这方面相关的一些技术方案实现，在这里就不过多的进行赘述了。"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(s.p,{children:["发布部署阶段是一个资源推送的过程，可以手动推送，也可以自动化推送，两者之间的差距就是效能方面的差距点，也是自动化的实际价值。这一块可以参考",(0,r.jsx)(s.strong,{children:"All in Docker"}),"方案的实现原理。在后续过程中，会来实现整个物料组件的相关注册和管理。"]}),"\n",(0,r.jsxs)(s.h2,{id:"资源",children:["资源",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#资源",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://juejin.cn/post/7004967490790883365",target:"_blank",rel:"noopener noreferrer",children:"前端工程化实战 - 自定义 CLI 插件开发"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://storybook.js.org/",target:"_blank",rel:"noopener noreferrer",children:"StoryBook"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://juejin.cn/column/6960547897611911205",target:"_blank",rel:"noopener noreferrer",children:"前端 DevOps专栏"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://juejin.cn/post/7236021829000446011?searchId=20230821011432930449D51CD4D752AB76",target:"_blank",rel:"noopener noreferrer",children:"从入门到精通，100行代码构建你的前端CLI脚手架之路"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://docs.npmjs.com/cli/v8/commands/npm-publish/",target:"_blank",rel:"noopener noreferrer",children:"npm publish"})})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?(0,r.jsx)(s,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}let h=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F37.%E7%BB%84%E4%BB%B6%E5%AE%9E%E6%88%98%EF%BC%9A%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"工作流程",id:"工作流程",depth:2},{text:"模版工程",id:"模版工程",depth:2},{text:"初始化工程",id:"初始化工程",depth:3},{text:"产物构建",id:"产物构建",depth:3},{text:"实现一个物料组件",id:"实现一个物料组件",depth:3},{text:"Material Platform",id:"material-platform",depth:2},{text:"总结",id:"总结",depth:2},{text:"资源",id:"资源",depth:2}],title:"37.组件实战：开发套件实现",headingTitle:"37.组件实战：开发套件实现",frontmatter:{}}}}]);