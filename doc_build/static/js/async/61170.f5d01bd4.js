"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["61170"],{756540:function(e,n,a){a.r(n),a.d(n,{default:()=>t});var r=a(552676),d=a(740453);let s=a.p+"static/image/c29bf8c8582077a653c7ddb563dc81cf.d8725bac.webp";function o(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",pre:"pre",h3:"h3",br:"br",img:"img"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"8-embedding多数据源加载",children:["8-Embedding：多数据源加载",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-embedding多数据源加载",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["本章对应源代码：",(0,r.jsx)(n.a,{href:"https://github.com/RealKai42/langchainjs-juejin/blob/main/loader.ipynb",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/RealKai42/langchainjs-juejin/blob/main/loader.ipynb"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这一节我们将核心聚焦在数据源的加载。因为 RAG 的本质是给 chat bot 外挂数据源，而考虑到各种应用场景，数据源的形式也多种多样，有的是文件/数据库/网络数据/代码 等等情况。 针对此，langchain 提供了一系列的开箱即用的 loader 来帮助开发者处理不同数据源的数据。"}),"\n",(0,r.jsxs)(n.h2,{id:"document-对象",children:["Document 对象",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#document-对象",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Document 对象你可以理解成 langchain 对所有类型的数据的一个统一抽象，其中包含"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pageContent"})," 文本内容，即文档对象对应的文本数据"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"})," 元数据，文本数据对应的元数据，例如 原始文档的标题、页数等信息，可以用于后面 ",(0,r.jsx)(n.code,{children:"Retriver"})," 基于此进行筛选。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"其 TypeScript 对象为"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Document {\n  pageContent: string;\n  metadata: Record<string, any>;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Document"})," 对象一般是由各种 ",(0,r.jsx)(n.code,{children:"Loader"})," 自动创建，当然我们也可以手动创建"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { Document } from "langchain/document";\n\nconst test = new Document({ pageContent: "test text", metadata: { source: "ABC Title" } });\n'})}),"\n",(0,r.jsxs)(n.p,{children:["把 ",(0,r.jsx)(n.code,{children:"test"})," 打印出来，就是这样"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'Document {\n  pageContent: "test text",\n  metadata: { source: "ABC Title" }\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"loader",children:["Loader",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#loader",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"处理数据的第一部就是加载数据，正常我们需要为目标的数据格式（json、csv、txt）来查找需要的库和写加载文件的代码，而有了 langchain 后，其内置了大多数据文件的读取支持，这里我们以常见的一些 loader 来带大家简单入门。"}),"\n",(0,r.jsxs)(n.h3,{id:"textloader",children:["TextLoader",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#textloader",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["首先是 ",(0,r.jsx)(n.code,{children:"TextLoader"}),"，我们将用此介绍 Loader 中的基础概念。",(0,r.jsx)(n.br,{}),"\n","使用起来非常直觉，就是对文件所在的路径进行加载"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { TextLoader } from "langchain/document_loaders/fs/text";\nconst loader = new TextLoader("data/qiu.txt");\n\nconst docs = await loader.load();\n'})}),"\n",(0,r.jsx)(n.p,{children:"我们把加载后的结果打印出来分析一下"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  Document {\n    pageContent: "三体前传：球状闪电 作者：刘慈欣\\r\\n" +\n      "\\r\\n" +\n      "内容简介：\\r\\n" +\n      "　　没有《球状闪电》，就没有后来的《三体》！\\r\\n" +\n      "　　《三体》前传！\\r\\n" +\n      "　　亚洲首位雨果奖得主刘慈欣的三大长篇之一！（《三体》《球状闪电》《超新星纪"... 192095 more characters,\n    metadata: { source: "data/qiu.txt" }\n  }\n]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["可以看到这个结构也很好理解，整个返回对象就是一个 ",(0,r.jsx)(n.code,{children:"Document"})," 对象的实例，其中 ",(0,r.jsx)(n.code,{children:"pageContent"})," 是文本的原始内容，而在 ",(0,r.jsx)(n.code,{children:"metadata"})," 中是跟这个对象相关的一些元数据，这里就是加载原始文件的文件名。"]}),"\n",(0,r.jsxs)(n.h3,{id:"pdfloader",children:["PDFLoader",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pdfloader",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"PDF 是常见的数据来源，很多 chatbot 也支持用户上传任意 pdf 作为外挂数据库，来让聊天内容和背景知识聚焦在某个 pdf 中。"}),"\n",(0,r.jsxs)(n.p,{children:["在 Deno 环境下使用 ",(0,r.jsx)(n.code,{children:"PDFLoader"})," 会有一个 bug，总是报错找不到 ",(0,r.jsx)(n.code,{children:"./test/data/05-versions-space.pdf"})," 这个文件。",(0,r.jsx)(n.br,{}),"\n","解决方法有两个，第一个是你把这个文件放在你项目根目录里，这个文件也在我们项目中有，你可以在 github 中下载。第二个是将",(0,r.jsx)(n.code,{children:"deno.json"})," 中 ",(0,r.jsx)(n.code,{children:"pdf-parser"})," 的别名改为"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'    "pdf-parse": "npm:/pdf-parse/lib/pdf-parse.js"\n'})}),"\n",(0,r.jsx)(n.p,{children:"这是作者一直没有修复的一个 bug，仅在 ESM 导入的时候会出现。"}),"\n",(0,r.jsx)(n.p,{children:"然后我们就可以加载 pdf 文件"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import * as pdfParse from "pdf-parse";\nimport { PDFLoader } from "langchain/document_loaders/fs/pdf";\n\nconst loader = new PDFLoader("data/github-copliot.pdf");\nconst pdfs = await loader.load()\n'})}),"\n",(0,r.jsxs)(n.p,{children:["打印出来 ",(0,r.jsx)(n.code,{children:"pdfs"}),"是一个 ",(0,r.jsx)(n.code,{children:"Document"})," 数组，其中每一个 ",(0,r.jsx)(n.code,{children:"Document"})," 对象对应了 pdf 中的一页，这是 ",(0,r.jsx)(n.code,{children:"PDFLoader"})," 的默认行为。",(0,r.jsx)(n.br,{}),"\n","我们可以使用配置关闭这个特性"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const loader = new PDFLoader("data/github-copliot.pdf", { splitPages: false });\nconst pdf = await loader.load()\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这时候，我们打印 ",(0,r.jsx)(n.code,{children:"pdfs"})," 中的一个 ",(0,r.jsx)(n.code,{children:"Document"})," 对象分析一下"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'Document {\n  pageContent: "2024/3/24 20:59\\n" +\n    "如何使用 github copilot 完成 50% 的日常工作\\n" +\n    "https://kaiyi.cool/blog/github-copilot1/14\\n" +\n    "如何使用 git"... 6530 more characters,\n  metadata: {\n    source: "data/github-copliot.pdf",\n    pdf: {\n      version: "1.10.100",\n      info: {\n        PDFFormatVersion: "1.4",\n        IsAcroFormPresent: false,\n        IsXFAPresent: false,\n        Title: "如何使用 github copilot 完成 50% 的日常工作",\n        Creator: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0."... 17 more characters,\n        Producer: "Skia/PDF m123",\n        CreationDate: "D:20240324125917+00\'00\'",\n        ModDate: "D:20240324125917+00\'00\'"\n      },\n      metadata: null,\n      totalPages: 14\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["可以看到其中的 ",(0,r.jsx)(n.code,{children:"metadata"})," 就更丰富了，包含了从 PDF 中读取到的一系列信息，可以帮我们后续对 ",(0,r.jsx)(n.code,{children:"Document"})," 对象做一些处理。"]}),"\n",(0,r.jsxs)(n.h3,{id:"directoryloader",children:["DirectoryLoader",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#directoryloader",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["当我们需要加载一个文件夹下多种格式的文件时，就可以使用 ",(0,r.jsx)(n.code,{children:"DirectoryLoader"}),"，我们需要预先定义对该文件夹不同文件类型的 ",(0,r.jsx)(n.code,{children:"Loader"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { DirectoryLoader } from "langchain/document_loaders/fs/directory";\n\nconst loader = new DirectoryLoader(\n  "./data",\n  {\n    ".pdf": (path) => new PDFLoader(path, { splitPages: false }),\n    ".txt": (path) => new TextLoader(path),\n  }\n);\nconst docs = await loader.load();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这样就可以批处理文件下所有的数据文件，至于加载其他数据类型的 ",(0,r.jsx)(n.code,{children:"loader"})," 使用方式都差不多，都很简单，可以按需在 langchain 官网进行查看。"]}),"\n",(0,r.jsx)(n.p,{children:"可以看到，在使用了 Langchain 之后，各种繁琐的数据文件的加载和处理都被 langchain 所实现，我们只按需调用相应的 Loader 即可，这大大加速了我们开发 LLM related app 的速度。"}),"\n",(0,r.jsxs)(n.h2,{id:"web-loader",children:["Web Loader",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#web-loader",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"上面主要讲的是从文件中去加载数据，而来自网络的数据也是 chat bot 比较重要的数据源，例如 new bing 等基于搜索的 chat bot，就是根据用的需求去从互联网爬取数据，然后以此为上下文进行回答，我们会讲解几个常见的数据源的抓取方式。"}),"\n",(0,r.jsxs)(n.h3,{id:"github-loader",children:["Github loader",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#github-loader",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"基于某个开源项目构建数据库，然后根据用户提问寻找与此相关的代码片段回答用户问题，是很多开发者梦想中的工具。因为我们开发中经常遇到文档不全需要自己寻找源代码找到解决办法的场景，让 llm 去寻找和理解显然比我们的速度要快很多。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { GithubRepoLoader } from "langchain/document_loaders/web/github";\nimport ignore from "ignore";\n\nconst loader = new GithubRepoLoader(\n    "https://github.com/RealKai42/qwerty-learner",\n    { \n        branch: "master",\n        recursive: false, \n        unknown: "warn", \n        ignorePaths: ["*.md", "yarn.lock", "*.json"],\n        accessToken: env["GITHUB_TOKEN"]\n    }\n  );\n'})}),"\n",(0,r.jsx)(n.p,{children:"这里有几个需要注意的地方"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"branch"})," 要设置正确，有的是 main 有的 master"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"recursive"})," 是否递归的访问文件夹内部的内容，如果是为了测试建议是关闭，请求量比较大，等待比较久"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ignorePaths"})," 使用的 git ignore 的语法，忽略掉一些特定格式的文件，这里是我把项目中比较大的 json 给忽略掉了，大家可以根据不同项目的特点进行设置"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"accessToken"})," 是 github API 的 accessToken，在没有设置的情况也能访问，但有频率设置。关于 Github API 的更多信息： ",(0,r.jsx)(n.a,{href:"https://github.com/settings/tokens",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/settings/tokens"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"让我们分析一下构建出来的结果"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n...,\nDocument {\n    pageContent: "/** @type {import(\'tailwindcss\').Config} */\\n" +\n      "module.exports = {\\n" +\n      "  darkMode: [\'class\'],\\n" +\n      "  content: [\'."... 1652 more characters,\n    metadata: {\n      source: "tailwind.config.js",\n      repository: "https://github.com/RealKai42/qwerty-learner",\n      branch: "master"\n    }\n  },\n...\n]\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"GithubRepoLoader"})," 会在爬取的文件的时候自动记录下相关的 ",(0,r.jsx)(n.code,{children:"metadata"}),"，方便后续使用"]}),"\n",(0,r.jsxs)(n.h3,{id:"webloader",children:["WebLoader",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webloader",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"对于 llm 所需要提取的信息是网页中静态的信息时，一般使用 Cheerio 用来提取和处理 html 内容，类似于 python 中的 BeautifulSoup。 这两者都是只能针对静态的 html，无法运行其中的 js, 对大部分场景都是够用的"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import "cheerio";\nimport { CheerioWebBaseLoader } from "langchain/document_loaders/web/cheerio";\n\nconst loader = new CheerioWebBaseLoader(\n  "https://kaiyi.cool/blog/github-copilot"\n);\n\nconst docs = await loader.load();\n'})}),"\n",(0,r.jsx)(n.p,{children:"可以看到打印出来的效果就是纯文本，并不需要我们对其中的 html 标签进行处理。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:"CleanShot 2024-03-25 at 21.46.53@2x.png"})}),"\n",(0,r.jsx)(n.p,{children:"我们也可以用类似于 jQuery 的语法对 html 中的元素进行选择和过滤，例如"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const loader = new CheerioWebBaseLoader(\n  "https://kaiyi.cool/blog/github-copilot",\n  {\n    selector: "h3",\n  }\n);\n\nconst docs = await loader.load();\nconsole.log(docs[0].pageContent)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["就会只输出 ",(0,r.jsx)(n.code,{children:"h1"})," 标题的内容，也可以根据 css 类等其他选择器对内容进行 filter"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"0. 一些基础信息1. 基本使用思路2.变量命名3. 代码速读，代码精读，加注释解析，寻找修改项4. 代码改写，用 xx 库实现整体逻辑5. ai-native 的开发方式6. 报错解析7. 解释 review message8. 提高代码质量，设计优化9. 灵活使用 cmd+i10. 写 commit message11. 基础脚手架、基础 poc12. 中间插入一些唠叨13. llm as doc/search14. 碎碎念15. vsc plugin 开发\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"search-api",children:["Search API",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#search-api",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["这是给 chatbot 接入网络支持最重要的 API，对于 langchain.js 来说，常用的是 ",(0,r.jsx)(n.code,{children:"SearchApiLoader"})," 和 ",(0,r.jsx)(n.code,{children:"SerpAPILoader"})," 这个两个提供的都是接入搜索的能力，免费计划都是每个月 100 次 search 能力，除了 google 外，也支持 baidu/bing 等常用的搜索引擎。这两个 API 的使用方式大差不差，所以我们这里以 ",(0,r.jsx)(n.code,{children:"SerpAPILoader"})," 来讲解。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { SerpAPILoader } from "langchain/document_loaders/web/serpapi";\n\nconst apiKey = env["SERP_KEY"]\nconst question = "什么 github copliot"\nconst loader = new SerpAPILoader({ q: question, apiKey });\nconst docs = await loader.load();\n'})}),"\n",(0,r.jsx)(n.p,{children:"返回结果"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  Document {\n    pageContent: \'{"title":"GitHub Copilot","type":"Software","entity_type":"kp3_verticals","kgmid":"/g/11q83qbj3d","k\'... 7060 more characters,\n    metadata: { source: "SerpAPI", responseType: "knowledge_graph" }\n  },\n  Document {\n    pageContent: \'{"position":1,"title":"什么是GitHub Copilot？ [共6 个]","link":"https://learn.microsoft.com/zh-cn/shows/in\'... 695 more characters,\n    metadata: { source: "SerpAPI", responseType: "organic_results" }\n  },\n  Document {\n    pageContent: \'{"position":2,"title":"什么是GitHub Copilot？一个适合所有人的人工智能配对程序员","link":"https://juejin.cn/post/709008265\'... 650 more characters,\n    metadata: { source: "SerpAPI", responseType: "organic_results" }\n  },\n  ...]\n'})}),"\n",(0,r.jsx)(n.p,{children:"serp 非常强大，其不止是返回 google 搜索的结果，并且会爬取每个结果的汇总和信息放在 pageContent，搭配 lanchain 的对应的集成了，提供了开箱即用的接入 google 搜索和爬取内容的能力，也就是给 chatbot 提供了访问互联网的能力。"}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["本节我们主要介绍了数据在 langchain 是如何通过 ",(0,r.jsx)(n.code,{children:"Document"})," 对象来进行组织和管理的，以及如何使用不同的 loader 从 文件/github/网页/搜索引擎 去加载数据。我们只是介绍 langchain 中常用的一部分 loader，作为一个正在蓬勃发展的社区，langchain 有各种各样的数据加载 loader，也可以很方便的去实现自己的 loader。通过本节的学习，我们掌握了如何把我们现存的文件数据和网络数据加载进 langchain 的能力，下一节，我们将学习如何对数据进行预处理。"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}let t=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%20AI%EF%BC%9ALangChain.js%20%E5%85%A5%E9%97%A8%E5%92%8C%E5%AE%9E%E6%88%98_online%2F8-Embedding%EF%BC%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8A%A0%E8%BD%BD.md"]={toc:[{text:"Document 对象",id:"document-对象",depth:2},{text:"Loader",id:"loader",depth:2},{text:"TextLoader",id:"textloader",depth:3},{text:"PDFLoader",id:"pdfloader",depth:3},{text:"DirectoryLoader",id:"directoryloader",depth:3},{text:"Web Loader",id:"web-loader",depth:2},{text:"Github loader",id:"github-loader",depth:3},{text:"WebLoader",id:"webloader",depth:3},{text:"Search API",id:"search-api",depth:3},{text:"小结",id:"小结",depth:2}],title:"8-Embedding：多数据源加载",headingTitle:"8-Embedding：多数据源加载",frontmatter:{}}}}]);