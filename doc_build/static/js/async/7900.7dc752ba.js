"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["7900"],{612368:function(e,r,n){n.r(r),n.d(r,{default:()=>m});var s=n(552676),t=n(740453);let o=n.p+"static/image/fc8505f2e9629cfcec45c13fc8a2c046.bf8ff614.webp",i=n.p+"static/image/8c4ed0ebb4a0ed13e680d1539117a331.a7a7ae13.webp",a=n.p+"static/image/99fdf383503d33119e6ec959a1e7f679.5f2d47fe.webp",d=n.p+"static/image/d35045afde585a958635ecced79d272b.27032487.webp",c=n.p+"static/image/b188a1e3925a6d2ebce2f9da5ac66fb3.624bf68d.webp",l=n.p+"static/image/73568e4462cfc0d584d107dd138f46cf.d593034d.webp",h=n.p+"static/image/358ddd698b46f9eac5078a44ed031cc7.764d5c10.webp",p=n.p+"static/image/cbe31309f09726b3d9e858f39b3e0c01.a2bcc9ca.webp";function x(e){let r=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",img:"img",h2:"h2",ul:"ul",li:"li",h3:"h3",code:"code",pre:"pre",ol:"ol"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"32客户端实战本地预览功能实现",children:["32.客户端实战：本地预览功能实现",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#32客户端实战本地预览功能实现",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["在前面已经提到，低代码平台用户通过可视化方式构建应用程序 ",(0,s.jsx)(r.strong,{children:"GUI"})," 并配置其属性和状态。然而在构建完成之后，即使看到应用程序外观和行为、用户交互等方面是必要的。通过低代码预览，使用者可以快速了解应用程序的外观和行为，以及用户交互的效果和体验。"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"有同学会问，编辑器中的画布难道不算是一个预览功能吗"}),"？"]}),"\n",(0,s.jsx)(r.p,{children:"这里需要强调，画布本质上并不算是一个预览环境，在编辑状态下，画布中的组件除了显示相关的编辑状态信息，还有一些定制的显示效果，比如插槽组件会显示占位信息来引导用户添加组件，如下图所示。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(r.p,{children:"预览环境，旨在展现页面真实呈现状态，是低代码平台的重要组成部分。"}),"\n",(0,s.jsx)(r.p,{children:"接下来，我们将利用浏览器本地存储，完成整个平台的本地预览模块。相信完成这一章节后，您对编辑器的工作流程将有更加深入的理解。"}),"\n",(0,s.jsxs)(r.h2,{id:"实现过程",children:["实现过程",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#实现过程",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["在前期设计篇中提到过，编辑器的内容都是依靠 ",(0,s.jsx)(r.strong,{children:"Schema"})," 来渲染的。那么预览页面的实现逻辑就是在新的页面打开，并将当前的 ",(0,s.jsx)(r.strong,{children:"Schema"})," 进行加载渲染。"]}),"\n",(0,s.jsx)(r.p,{children:"如下图所示，下面是两种不同的贮藏方式流程图："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"方案一"}),"：采用基于 ",(0,s.jsx)(r.strong,{children:"sessionStorage"})," 的 ",(0,s.jsx)(r.strong,{children:"UID"})," 存储方式，预览时重新生成。多个副本之间将无关联，呈现相对独立状态，从而达到多个副本共存比对的作用。"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"方案二"}),"：通过基于 ",(0,s.jsx)(r.strong,{children:"localStorage"})," 的存储方式，编辑器与预览页面将实现快速同步，共同使用一个本地存储，呈现实时预览效果，同时还能支持持久化的数据缓存。此方案将进一步提升用户的工作效率，为用户带来更多的便利。"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(r.p,{children:"以上呈现了两种基本的本地存储方式，当然还有内存级别的缓存方法可供选择，具体方案应根据不同业务形态而定。每种方案均有其优点及缺陷，因此选择最适合自己业务需求的方式才能是最佳解决方案。"}),"\n",(0,s.jsxs)(r.h2,{id:"实现过程-1",children:["实现过程",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#实现过程-1",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"在解析相关流程后，我们现在进入了实际操作阶段，文中涉及的代码已经在仓库中，可以进行查阅和调试。"}),"\n",(0,s.jsxs)(r.h3,{id:"创建preview页面",children:["创建preview页面",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#创建preview页面",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["如下图所示，在 ",(0,s.jsx)(r.strong,{children:"editor"})," 应用的 ",(0,s.jsx)(r.strong,{children:"pages"})," 目录下，创建 ",(0,s.jsx)(r.strong,{children:"preview/$id.tsx"})," 路由，它的实际作用就是创建一个动态的 ",(0,s.jsx)(r.strong,{children:"perview"})," 页面。"]}),"\n",(0,s.jsxs)(r.p,{children:["举个例子：",(0,s.jsx)(r.strong,{children:"/preview/uid-100、/preview/uid-101，/preview/uid-102"}),"。因此它的效果等同于",(0,s.jsx)(r.code,{children:"/preview/{uid}"}),"的模式。"]}),"\n",(0,s.jsxs)(r.p,{children:["在这里就不过多叙述了，可以查阅 ",(0,s.jsx)(r.strong,{children:"umi"})," 的动态路由章节, 会有更全面的阐述。【",(0,s.jsx)(r.a,{href:"https://umijs.org/docs/guides/routes#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1",target:"_blank",rel:"noopener noreferrer",children:"点击直达"}),"】"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(r.h3,{id:"预览入口",children:["预览入口",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#预览入口",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["首先，在编辑器中添加预览按钮，以方便操作。该按钮位于编辑器右上角的 ",(0,s.jsx)(r.strong,{children:"ToolBar"})," 区域，如下图所示。点击该按钮后，将会跳转至 ",(0,s.jsx)(r.code,{children:"/preview"})," 页面，进入预览状态。"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(r.p,{children:["具下面是具体的实现步骤。在预览按钮上绑定点击事件，并实现 ",(0,s.jsx)(r.strong,{children:"handlePreviewEvt"})," 方法。该方法内部逻辑可以参考前面的流程图，首先获取当前页面的 ",(0,s.jsx)(r.strong,{children:"schema"})," 数据，然后生成一个唯一的 ",(0,s.jsx)(r.strong,{children:"previewId"})," 作为标识，并将其存储到 ",(0,s.jsx)(r.strong,{children:"sessionStorage"})," 中。最后，使用 ",(0,s.jsx)(r.strong,{children:"history"})," 进行页面跳转，进入 ",(0,s.jsx)(r.code,{children:"/preview"})," 页面。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:'const { query } = useEditor()\n\n// 处理预览逻辑\nconst handlePreviewEvt = () => {\n  // 获取当前schema\n  const schema = query.serialize()\n  const previewId = "uid-" + new Date().getTime()\n  sessionStorage.setItem(previewId, schema)\n  history.push(`/preview/${previewId}`)\n}\n\n  <Button onClick={handlePreviewEvt} >\n  <Space size={2}>\n    <CaretRightOutlined />\n    预览\n  </Space>\n  </Button>\n'})}),"\n",(0,s.jsxs)(r.p,{children:["点击预览按钮后，会在 ",(0,s.jsx)(r.strong,{children:"sessionStorage"})," 中自动生成一条记录，记录内容为当前页面的 ",(0,s.jsx)(r.strong,{children:"Schema"})," 协议，如下图所示："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(r.h3,{id:"context",children:["context",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#context",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["为了后续的统一处理，之前所有的 ",(0,s.jsx)(r.strong,{children:"provider"})," 都是在 ",(0,s.jsx)(r.strong,{children:"components/framework/index.ts"})," 中进行开发。"]}),"\n",(0,s.jsxs)(r.p,{children:["现在，为了更好地维护和全局应用中使用，因此将整个 ",(0,s.jsx)(r.strong,{children:"FrameworkContextProvider"})," 组件放在了\n",(0,s.jsx)(r.strong,{children:"@lgnition-lowcode/core"})," 中。该组件包含了 ",(0,s.jsx)(r.strong,{children:"EditorProvider"}),"、",(0,s.jsx)(r.strong,{children:"StoreProvider"})," 等多个 ",(0,s.jsx)(r.strong,{children:"useContext"})," 引用和导出，"]}),"\n",(0,s.jsx)(r.p,{children:"实现代码如下："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:'import * as React from "react";\nimport { Editor } from "@craftjs/core";\nimport { Provider as StoreProvider } from "react-redux";\nimport { store } from  \'./store\'\n\ntype EditorProps = React.ComponentProps<typeof Editor>;\n\nexport type FrameworkProviderProps = Pick<EditorProps, "enabled">;\n\nexport const FrameworkContext = React.createContext<EditorProps | null>({\n  enabled: true,\n});\n\nexport const FrameworkContextProvider = (props: EditorProps) => {\n  return (\n    <StoreProvider store={store} >\n      <FrameworkContext.Provider\n        value={{\n          enabled: props.enabled,\n        }}\n      >\n        <Editor {...props}>{props.children}</Editor>\n      </FrameworkContext.Provider>\n    </StoreProvider>\n  );\n};\n'})}),"\n",(0,s.jsxs)(r.p,{children:["以下是 ",(0,s.jsx)(r.strong,{children:"FrameworkContextProvider"})," 的使用示例，它可以接收 ",(0,s.jsx)(r.strong,{children:"Editor"})," 组件的参数，同时也具有其他 ",(0,s.jsx)(r.strong,{children:"Provider"})," 的功能。在进行扩展时，可以将大部分注入配置收敛起来。"]}),"\n",(0,s.jsx)(r.p,{children:"代码示例："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:'import type { FrameworkProviderProps } from "@lgnition-lowcode/core";\nimport { FrameworkContextProvider } from "@lgnition-lowcode/core";\n\nexport const Framework = React.forwardRef<FrameworRef, FrameworkProps>(\n  (props, ref) => {\n    const { token } = useTokens();\n    return (\n      <FrameworkContextProvider\n        enabled={props.enabled}\n        resolver={_materials_}\n        onRender={RenderNodeWrapper}\n        onNodesChange={(dragProps) => console.log(`onNodesChange`, dragProps)}\n        >\n        <MountRef ref={ref} />\n        {...}\n      </FrameworkContextProvider>\n    );\n  }\n);\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"mountref",children:["MountRef",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#mountref",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"mountRef"})," 是一个组件，它的作用是用于单独来管理编辑器的一些对外暴露钩子的手段之一。由于编辑器是一个 ",(0,s.jsx)(r.strong,{children:"SDK"})," 整体，那么与应用之间的交互手段就比较明确了，一种是通过 ",(0,s.jsx)(r.strong,{children:"props"})," 来传递参数，另外一种就是通过 ",(0,s.jsx)(r.strong,{children:"ref"})," 了。如下图所示："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Framework"})," 组件使用 ",(0,s.jsx)(r.strong,{children:"React.forwardRef"})," 进行 ",(0,s.jsx)(r.strong,{children:"ref"})," 透传，并将其传递给 ",(0,s.jsx)(r.strong,{children:"MountRef"})," 组件进行绑定。"]}),"\n",(0,s.jsxs)(r.p,{children:["这样做的原因是，内部需要使用 ",(0,s.jsx)(r.strong,{children:"useEditor"})," 进行编辑器相关的操作，因此必须确保 ",(0,s.jsx)(r.strong,{children:"useEditor"})," 在使用时是完全位于 ",(0,s.jsx)(r.strong,{children:"Editor"})," 组件内部的。因此，实现了一个 ",(0,s.jsx)(r.strong,{children:"MountRef"})," 组件，专门用于处理暴露给外部的实例方法，如基于 ",(0,s.jsx)(r.strong,{children:"useEditor"})," 实现的 ",(0,s.jsx)(r.strong,{children:"onLoadState"})," 方法， ",(0,s.jsx)(r.strong,{children:"Schema"})," 数据重新加载进入编辑器。"]}),"\n",(0,s.jsx)(r.p,{children:"代码示例如下："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"import * as React from 'react'\nimport { useEditor } from \"@craftjs/core\"\nimport lz from 'lzutf8'\n\nexport interface FrameworRef {\n  onLoadState: (json: string, options?: {\n    useState?: boolean;\n  }) => void;\n}\n\nexport const MountRef = React.forwardRef<FrameworRef>((_, ref) => {\n  const { actions } = useEditor()\n\n  React.useImperativeHandle(ref, () => ({\n    /**\n     * 修改当前\n     * @param json stateText 或这是 JOSN\n     * @param options \n     */\n    onLoadState(json, options) {\n      let data = json\n      if (options?.useState) {\n        data = lz.decompress(lz.decodeBase64(data));\n      }\n      actions.deserialize(data)\n    }\n  }))\n\n  return null\n})\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"加载本地存储",children:["加载本地存储",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#加载本地存储",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["在完成预览页面的最后一步工作之前，我们需要通过一个过程来获取存储的 ",(0,s.jsx)(r.strong,{children:"schema"}),"。具体来说就是可以通过使用 ",(0,s.jsx)(r.strong,{children:"useParams"})," 来获取当前动态路由的 ",(0,s.jsx)(r.strong,{children:"uid"}),"，接着调用 ",(0,s.jsx)(r.strong,{children:"sessionStorage.getItem"})," 方法来获取当前存储区中的数据。最后使用 ",(0,s.jsx)(r.strong,{children:"editorFrameworkRef.current.onLoadState"})," 方法来进行加载。"]}),"\n",(0,s.jsx)(r.p,{children:"实现代码如下："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"import * as React from 'react'\nimport { Framework as EditorFramework } from '@/components/framework'\nimport type { FrameworRef } from '@/components/framework/mount-ref'\nimport { Frame } from '@/components/framework/canvas/frame'\nimport { useParams } from '@umijs/max'\nexport default () => {\n\n  const editorFrameworkRef = React.useRef<FrameworRef>(null)\n  const params = useParams()\n\n  console.log(editorFrameworkRef, 'editorFrameworkRef')\n\n  React.useEffect(() => {\n    if (params.id) {\n      const schema = sessionStorage.getItem(params.id)\n      // setSchemaData(schema)\n      if (editorFrameworkRef?.current && schema) {\n        editorFrameworkRef.current?.onLoadState(schema)\n      }\n    }\n    return () => {\n    }\n  }, [params.id])\n\n  return (\n    <EditorFramework enabled={false} ref={editorFrameworkRef} >\n      <Frame/>\n    </EditorFramework>\n  )\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["如果我们想使用 ",(0,s.jsx)(r.strong,{children:"localStorage"})," 来存储状态，实现的过程与使用 ",(0,s.jsx)(r.strong,{children:"sessionStorage"})," 类似，也可以通过以下步骤完成："]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["使用 ",(0,s.jsx)(r.strong,{children:"localStorage.setItem"})," 方法来保存 ",(0,s.jsx)(r.strong,{children:"Schema"})," 协议，这也可以帮助用户在进行操作时保留其所做的更改状态。"]}),"\n",(0,s.jsxs)(r.li,{children:["在本地预览模块中，需要使用 ",(0,s.jsx)(r.strong,{children:"localStorage.getItem"})," 方法来获取当前存储区中的数据，这可以用来恢复之前所做的更改状态。"]}),"\n",(0,s.jsxs)(r.li,{children:["在用户进行操作时，也可以使用 ",(0,s.jsx)(r.strong,{children:"localStorage.setItem"})," 方法来更新当前存储区的数据，能够保证本地预览模块能够实时反映用户所做的更改。"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"编辑态禁用",children:["编辑态禁用",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#编辑态禁用",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["之前提到了编辑状态下需要做一些禁用处理，首先就是关闭 ",(0,s.jsx)(r.strong,{children:"Editor"})," 的编辑模式，在这里通过属性\n",(0,s.jsx)(r.strong,{children:"enabled={false}"})," 进行设置即可。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-diff",children:"<EditorFramework \n+  enabled={false} \n  ref={editorFrameworkRef}\n  >\n  <Frame />\n</EditorFramework>\n"})}),"\n",(0,s.jsxs)(r.p,{children:["除此之外，就是专门服役于编辑器的一些物料组件也需要进行相应的处理，如下插槽组件的编辑态占位内容，这个时候就可以通过 ",(0,s.jsx)(r.strong,{children:"React.useContext(FrameworkContext)"})," 来获取共享的 ",(0,s.jsx)(r.strong,{children:"enabled状态"})," 后判断是否需要在内容为空的情况下显示 ",(0,s.jsx)(r.strong,{children:"SlotEmpty"})," 组件。"]}),"\n",(0,s.jsx)(r.p,{children:"如下代码："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-Diff",children:'import * as React from "react";\nimport {\n  createReactMaterial,\n  withMaterialNode,\n+ FrameworkContext,\n} from "@lgnition-lowcode/core";\nimport { SlotEmpty } from "./empty";\n\nexport interface SlotProps {\n  children?: React.ReactNode;\n  empty?: React.ReactNode;\n}\n\nconst SlotView = withMaterialNode<SlotProps>(\n  React.forwardRef((props, ref: React.LegacyRef<HTMLDivElement>) => {\n+    const frameworkContext = React.useContext(FrameworkContext);\n\n+    const emptyRender = frameworkContext?.enabled ? <SlotEmpty>{props.empty}</SlotEmpty> : null;\n\n    return (\n      <div ref={ref} style={{}}>\n       {props.children ? props.children : emptyRender}\n      </div>\n    );\n  })\n);\n\nexport const Slot = createReactMaterial(SlotView, {});\n'})}),"\n",(0,s.jsxs)(r.h2,{id:"总结",children:["总结",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["通过实现这些要点，我们成功地设计出了一个基本的本地预览模块，从而提升低代码平台的用户预览体验。当您完成",(0,s.jsx)(r.strong,{children:"Schema"}),"数据的本地存储和恢复逻辑后，后续发布远程存储的流程也将得心应手。"]}),"\n",(0,s.jsx)(r.p,{children:"在实现本地预览模块后，整个编辑器环节从物料装载到过程搭建以及协议存储的链路都已经实现了最小闭环。后续的功能将基于此进行扩展，最终您将能够凭借自己的想法完成可视化编辑器的实现。"}),"\n",(0,s.jsx)(r.p,{children:"编辑态与预览态的具体呈现效果如下："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"编辑态"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"预览界面"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(r.h2,{id:"资源推荐",children:["资源推荐",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#资源推荐",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://umijs.org/docs/guides/routes#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1",target:"_blank",rel:"noopener noreferrer",children:"https://umijs.org/docs/guides/routes#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://craft.js.org/docs/api/editor#props",target:"_blank",rel:"noopener noreferrer",children:"https://craft.js.org/docs/api/editor#props"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://github.com/Ignition-Space/Ignition-web/blob/main/packages/core/src/context/index.tsx",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/Ignition-Space/Ignition-web/blob/main/packages/core/src/context/index.tsx"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://github.com/Ignition-Space/Ignition-web/blob/main/packages/core/src/context/mount-ref.tsx",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/Ignition-Space/Ignition-web/blob/main/packages/core/src/context/mount-ref.tsx"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://github.com/IgnitionSpace/Ignitionweb/blob/main/apps/editor/src/pages/preview/%24id.tsx",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/IgnitionSpace/Ignitionweb/blob/main/apps/editor/src/pages/preview/%24id.tsx"})}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"写在最后",children:["写在最后",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"如果你有什么疑问或者更好的建议，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,t.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}let m=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F32.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"实现过程",id:"实现过程",depth:2},{text:"实现过程",id:"实现过程-1",depth:2},{text:"创建preview页面",id:"创建preview页面",depth:3},{text:"预览入口",id:"预览入口",depth:3},{text:"context",id:"context",depth:3},{text:"MountRef",id:"mountref",depth:3},{text:"加载本地存储",id:"加载本地存储",depth:3},{text:"编辑态禁用",id:"编辑态禁用",depth:3},{text:"总结",id:"总结",depth:2},{text:"资源推荐",id:"资源推荐",depth:2},{text:"写在最后",id:"写在最后",depth:2}],title:"32.客户端实战：本地预览功能实现",headingTitle:"32.客户端实战：本地预览功能实现",frontmatter:{}}}}]);