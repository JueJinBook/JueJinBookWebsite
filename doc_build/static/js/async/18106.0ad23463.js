"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["18106"],{62833:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var s=r(552676),a=r(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",strong:"strong",pre:"pre",code:"code",ul:"ul",li:"li"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"11桌面应用开发需要掌握哪些数据库知识下",children:["11.桌面应用开发需要掌握哪些数据库知识（下）？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11桌面应用开发需要掌握哪些数据库知识下",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在上一节中，我们使用 SQLite Expert 创建了一个数据库，并把这个数据库配置到工程中；我们还让 electron-builder 把这个数据库打包到安装包内，在用户初次运行应用时，把数据库文件拷贝到用户数据目录下；除了这些知识外，我们还介绍了如何使用 Knex 完成基本的数据库操作。"}),"\n",(0,s.jsx)(n.p,{children:"显然这些数据库知识对于一个复杂应用来说是不够的，本节我就带领大家更深入地学习数据库知识，比如关系型数据库是如何描述数据之间的关系的，如何在事务中操作数据，如何分页检索数据等知识。"}),"\n",(0,s.jsxs)(n.h2,{id:"数据之间的关系",children:["数据之间的关系",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据之间的关系",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在一个复杂的应用系统中，往往需要用到很多表来存储数据，每个表都存储一类数据，比如：聊天会话数据会存储在一张表中，聊天消息数据会存储在另一张表中，聊天的用户信息会存储在第三张表中。"}),"\n",(0,s.jsx)(n.p,{children:"很显然这些表中的数据是有联系的，接下来我们就介绍一下关系型数据库中常见的几种数据关系。"}),"\n",(0,s.jsxs)(n.h3,{id:"1-一对一关系",children:["1. 一对一关系",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-一对一关系",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["一对一关系是几种关系中最简单的关系，它表示",(0,s.jsx)(n.strong,{children:"一个表的数据与另一个表的数据行与行之间是一一对应的"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"现实生活中这种一一对应的关系非常常见，比如：用户账户信息（用户名、密码等）与用户的身份信息（性别、身份证号等）就是一一对应的。"}),"\n",(0,s.jsx)(n.p,{children:"一个用户不能拥有多个账户，一个账户也不能被分配给多个用户，而且账号信息和身份信息也属于两类不同的信息，不适合放在同一张表内。"}),"\n",(0,s.jsx)(n.p,{children:"当然，有时候开发者也会因为某类信息的字段太多了而强行把字段分别存储在两张或多张表中，这些表里的数据关系都是一对一关系。"}),"\n",(0,s.jsx)(n.p,{children:"下面这段代码可以从两张一对一关系表中查询数据："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'knex("user").leftJoin("userInfo", "user.id", "userInfo.userId").select("user.name", "userInfo.idNumber");\n'})}),"\n",(0,s.jsx)(n.p,{children:"其中，leftJoin 方法把两个表连接在一起，user 表中的 id 字段（是 user 表的主键）和 userInfo 表中的 userId 字段是关系字段（主键和外键），查询数据时，就是使用这两个关系字段完成数据检索的。"}),"\n",(0,s.jsx)(n.p,{children:"在向这两个表中插入数据时要保证这两个字段的内容是相同的，这样才能保证检索出的数据是一一对应的。比如新建一个用户时，在创建用户信息时，要把 userId 字段设置为某一个用户的 Id，也就是 user 表中某一行记录的主键值。如下代码所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'let user = new ModelUser(); //这个对象的id是它的基类自动生成的，我们前面介绍过\nuser.userName = "abc";\nuser.password = "123";\nawait db("User").insert(user);\n\nlet userInfo = new ModelUserInfo(); //这个对象的id也是它的基类自动生成的\nuserInfo.userId = user.id;\nuserInfo.trueName = "元始天尊";\nawait db("UserInfo").insert(userInfo);\n'})}),"\n",(0,s.jsx)(n.p,{children:"上面的代码在向 UserInfo 表插入数据时就使用了 User 表中的某行记录的 ID，所以 User 表和 UserInfo 表存在两行有关系的数据。"}),"\n",(0,s.jsx)(n.p,{children:"如果两张表中存在多行这样有关的数据的话，我们使用 leftJoin 方法检索两张表里的数据时，也会返回多行数据。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"leftJoin 会保证从左表（user）那里返回所有的行，即使在右表（userInfo）中没有匹配的行也会返回数据"}),"，比如检索到了 user.name，而 userInfo.idNumber 却是空值。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"rightJoin 方法则正好相反。它会保证右表（userInfo）返回所有的数据，即使右表没有匹配的行也会返回数据"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"不但一对一关系可以使用 leftJoin 或 rightJoin 方法检索关联的数据信息，其他几种关系也会使用这两个方法检索关联的信息。"}),"\n",(0,s.jsxs)(n.h3,{id:"2-一对多关系",children:["2. 一对多关系",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-一对多关系",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"一对多关系是一个表中的某行数据对应另一个表中的多行数据，另一个表中的某行数据只对应第一张表中的一行数据"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"比如，我们提到的聊天会话信息和聊天消息信息就是一种一对多关系。一个会话可以对应着多个聊天信息，但一个聊天信息不可能隶属于多个会话。在数据库中的表现形式就是，Message 表中可能有多行记录拥有同一个 ChatId。"}),"\n",(0,s.jsxs)(n.h3,{id:"3-多对多关系",children:["3. 多对多关系",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-多对多关系",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"多对多关系是一个表中的某行数据对应另一个表中的多行数据，另一个表中的某行数据也对应第一张表中的多行数据"}),"。现实生活中老师和学生的关系就是多对多关系，一个学生可以有多个老师，一个老师也可以有多个学生。"]}),"\n",(0,s.jsx)(n.p,{children:"在数据库中表述这种关系一般需要三张表，拿刚才的例子来说，老师信息存储在一张表中，学生信息存储在一张表中，还需要一张关系表，用来描述老师和学生的关系。这张关系表中，一般会有老师的 ID 和学生的 ID。这样就建立了老师和学生之间的多对多关系。"}),"\n",(0,s.jsx)(n.p,{children:"比如，要查询某位老师下的所有学生，可以先在老师表查询到老师的信息，再到关系表查询到所有学生的 ID，再使用这些学生的 ID 查询到所有学生的信息。查询某位学生的所有老师把这个操作反过来做即可。"}),"\n",(0,s.jsxs)(n.h3,{id:"4-自关联关系",children:["4. 自关联关系",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-自关联关系",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"自关联关系往往用来描述树状结构的信息"}),"，比如菜单、部门等。比如：一级菜单、二级菜单、三级菜单......N 级菜单；一级部门、二级部门、三级部门......N 级部门。"]}),"\n",(0,s.jsx)(n.p,{children:"我们在设计系统时往往不知道具体有多少层，具体的层级数量是用户在使用过程中确定的。即使我们知道有多少层，把每层的数据存储在一张表中也不是个好主意，我们应该把所有的数据都存储在一张表中，表中有两个字段非常关键：ID 和 ParentID，我们用这两个字段让表中的数据自己和自己进行关联，使用类似递归的方法遍历某个层级下的所有数据。"}),"\n",(0,s.jsxs)(n.h2,{id:"在事务中操作数据",children:["在事务中操作数据",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在事务中操作数据",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"数据库的事务是一个操作序列，包含了一组数据库操作指令。事务把这组指令作为一个整体向数据库提交操作请求，这一组数据库命令要么都执行，要么都不执行，因此事务是一个不可分割的工作逻辑单元"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"举个例子，当用户购买了一件商品后，你需要向数据库的订单表插入一行记录，同时需要向付款信息表插入一行记录（实际购物平台的实现逻辑要远比这个例子复杂得多），假设订单数据插入成功了，付款数据却由于种种原因没有插入成功，这种异常对于系统来说是不可容忍的。"}),"\n",(0,s.jsx)(n.p,{children:"事务就是为了解决这种问题的，下面我们看一下使用 Knex 提交事务的代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//src\\renderer\\Window\\WindowMain\\Contact.vue\nlet transaction = async () => {\n  try {\n    await db.transaction(async (trx) => {\n      let chat = new ModelChat();\n      chat.fromName = "聊天对象aaa";\n      chat.sendTime = Date.now();\n      chat.lastMsg = "这是此会话的最后一条消息";\n      chat.avatar = `https://pic3.zhimg.com/v2-306cd8f07a20cba46873209739c6395d_im.jpg?source=32738c0c`;\n      await trx("Chat").insert(chat);\n      // throw "throw a error";\n      let message = new ModelMessage();\n      message.fromName = "聊天对象";\n      message.chatId = chat.id;\n      message.createTime = Date.now();\n      message.isInMsg = true;\n      message.messageContent = "这是我发给你的消息";\n      message.receiveTime = Date.now();\n      message.avatar = `https://pic3.zhimg.com/v2-306cd8f07a20cba46873209739c6395d_im.jpg?source=32738c0c`;\n      await trx("Message").insert(message);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面的代码就是把两个插入操作封装到了一个事务中，两个插入操作要么都成功执行，要么一个也不执行，你可以把",(0,s.jsx)(n.code,{children:'throw "throw a error"'})," 语句取消注释，观察一下数据库的数据更新情况。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"db.transaction"}),"方法的回调函数中",(0,s.jsx)(n.code,{children:"trx"}),"就是 Knex 为我们封装的数据库事务对象，我们接下来的数据库操作，都是使用这个对象完成的。"]}),"\n",(0,s.jsx)(n.p,{children:"除了这种用法外，我们也可以用类似下面这样的代码完成事务操作："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'await db("Message").insert(message).transacting(trx);\n'})}),"\n",(0,s.jsx)(n.p,{children:"总之，事务对象必须参与到具体的数据操作过程中。"}),"\n",(0,s.jsxs)(n.h2,{id:"分页查询数据",children:["分页查询数据",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分页查询数据",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"分页从数据库中获取数据是后端开发者经常要做的工作，前端开发者往往都是按照后端开发者提供的接口要求，从接口获取数据就可以了，然而开发桌面应用，往往会遇到这样的需求，需要从本地数据库中分页获取数据。下面就给出一个简单的实现代码，看看后端工程师都是如何完成这项工作的，代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//src\\renderer\\Window\\WindowMain\\Contact.vue\n/**\n * 当前是第几页\n */\nlet currentPageIndex = 0;\n/**\n * 每页数据行数\n */\nlet rowCountPerPage = 6;\n/**\n * 总页数(可能有小数部分)\n */\nlet pageCount = -1;\n/**\n * 获取某一页数据\n */\nlet getOnePageData = async () => {\n  let data = await db("Chat")\n    .orderBy("sendTime", "desc")\n    .offset(currentPageIndex * rowCountPerPage)\n    .limit(rowCountPerPage);\n  console.log(data);\n};\n/**\n * 获取第一页数据\n */\nlet getFirstPage = async () => {\n  if (pageCount === -1) {\n    let { count } = await db("Chat").count("id as count").first();\n    count = count as number;\n    pageCount = count / rowCountPerPage;\n  }\n  currentPageIndex = 0;\n  await getOnePageData();\n};\n/**\n * 获取下一页数据\n */\nlet getNextPage = async () => {\n  if (currentPageIndex + 1 >= pageCount) {\n    currentPageIndex = Math.ceil(pageCount) - 1;\n  } else {\n    currentPageIndex = currentPageIndex + 1;\n  }\n  await getOnePageData();\n};\n/**\n * 获取上一页数据\n */\nlet getPrevPage = async () => {\n  if (currentPageIndex - 1 < 0) {\n    currentPageIndex = 0;\n  } else {\n    currentPageIndex = currentPageIndex - 1;\n  }\n  await getOnePageData();\n};\n/**\n * 获取最后一页数据\n */\nlet getLastPage = async () => {\n  currentPageIndex = Math.ceil(pageCount) - 1;\n  await getOnePageData();\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"这段代码有以下几点需要注意。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"获取第一页数据的时候，我们初始化了总页数和当前页码数，总页数是通过数据库中的总行数除以每页行数得到的，这个值有可能包含小数部分。当前页码数是从零开始的整数。第一页时，它的值为 0。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["获取下一页数据时，我们",(0,s.jsx)(n.strong,{children:"要判断当前页码数是不是到达了最后一页，如果没有，那么就把当前页码数加 1"}),"，考虑到总页数存在小数的可能，所以最后一页的当前页码数应为：",(0,s.jsx)(n.code,{children:"Math.ceil(pageCount) - 1"}),"。Math.ceil() 函数返回大于或等于一个给定数字的最小整数。",(0,s.jsx)(n.code,{children:"Math.ceil(6.11)"}),"的结果为 7，",(0,s.jsx)(n.code,{children:"Math.ceil(6)"}),"的结果为 6"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["获取上一页数据时，我们要",(0,s.jsx)(n.strong,{children:"判断当前页码数是不是小于 0，如果是，就把当前页码数置为 0"}),"，如果不是就把当前页码数减一。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["获取最后一页数据时，直接把当前页码数置为",(0,s.jsx)(n.code,{children:"Math.ceil(pageCount) - 1"}),"即可。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["每次获取数据我们都调用了",(0,s.jsx)(n.code,{children:"getOnePageData"}),"方法。这个方法中需要注意",(0,s.jsx)(n.code,{children:"offset"}),"和",(0,s.jsx)(n.code,{children:"limit"}),"方法的使用，",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"offset"}),"方法是跳过 n 行的意思，",(0,s.jsx)(n.code,{children:"limit"}),"方法是确保返回的结果中不多于 n 行的意思"]}),"。当最后一页数据不足",(0,s.jsx)(n.code,{children:"rowCountPerPage"}),"（值为 6）时，就返回数据库表中剩余的所有数据（在上述示例中，如果数据库表中有 40 行数据时，最后一页会返回 4 行数据），不会出错。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["分页获取数据最好提供明确的排序规则：注意",(0,s.jsx)(n.code,{children:"orderBy"}),"的使用，常常还会有复杂的查询条件。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["在实际的桌面应用中一般不会要求用户点击上一页、下一页等按钮分页获取数据，大部分情况都是根据滚动条滚动时的",(0,s.jsx)(n.code,{children:"触底"}),"或",(0,s.jsx)(n.code,{children:"触顶"}),"事件来触发数据获取的逻辑，不过从数据库中读取数据的逻辑还是大同小异的，都是一页一页读取的。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本节我们首先介绍了关系型数据库是如何描述数据和数据之间的关系的，其中包括一对一关系、一对多关系、多对多关系和自关联关系，在介绍这部分知识时，我们还介绍了如何使用 leftJoin 和 rightJoin 完成数据库的关联查询。"}),"\n",(0,s.jsx)(n.p,{children:"接着我们介绍了两个基本数据库操作知识，一个是使用事务操作数据，一个是分页查询数据，这都是后端开发者的基本技能，但前端开发者比较欠缺的知识。"}),"\n",(0,s.jsx)(n.p,{children:"相信你已经对使用 Knex 操作 SQLite 有了一个基本的认识，接下去我们将介绍如何为 Electron 应用开发原生模块，让你在客户端领域的“权力”大大提升。"}),"\n",(0,s.jsxs)(n.h2,{id:"源码",children:["源码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#源码",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本节示例代码请通过如下地址自行下载："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://gitee.com/horsejs_admin/electron-jue-jin/tree/db",target:"_blank",rel:"noopener noreferrer",children:"源码仓储"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["Electron%20%2B%20Vue%203%20%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%2F11.%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9F.md"]={toc:[{text:"数据之间的关系",id:"数据之间的关系",depth:2},{text:"1. 一对一关系",id:"1-一对一关系",depth:3},{text:"2. 一对多关系",id:"2-一对多关系",depth:3},{text:"3. 多对多关系",id:"3-多对多关系",depth:3},{text:"4. 自关联关系",id:"4-自关联关系",depth:3},{text:"在事务中操作数据",id:"在事务中操作数据",depth:2},{text:"分页查询数据",id:"分页查询数据",depth:2},{text:"总结",id:"总结",depth:2},{text:"源码",id:"源码",depth:2}],title:"11.桌面应用开发需要掌握哪些数据库知识（下）？",headingTitle:"11.桌面应用开发需要掌握哪些数据库知识（下）？",frontmatter:{}}}}]);