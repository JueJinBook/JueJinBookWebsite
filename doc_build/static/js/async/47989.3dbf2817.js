"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["47989"],{392332:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var r=s(552676),c=s(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",pre:"pre",code:"code",h4:"h4",strong:"strong",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"38操作嵌套数组对象",children:["38.操作嵌套数组对象",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#38操作嵌套数组对象",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"59-操作嵌套数组对象",children:["5.9 操作嵌套数组对象",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#59-操作嵌套数组对象",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"云开发数据库作为一个文档型数据库，它的记录的值除了会是对象和数组这种相对复杂的数据类型，还会出现多重的嵌套。那这种嵌套数组、嵌套对象，我们应该怎样对它们进行查询和更新呢？"}),"\n",(0,r.jsxs)(n.h3,{id:"591-普通数组和对象的查询与更新",children:["5.9.1 普通数组和对象的查询与更新",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#591-普通数组和对象的查询与更新",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们始终要明确，不管字段的值是数组、对象也好，还是更为复杂的嵌套，使用where条件所筛选的始终都是记录，而update则是对筛选返回的记录列表进行字段级别的更新。比如用户存储用户信息的集合user（包含用户标签tags、公司职位信息company、喜欢的书books，以及书签页数mark），它的记录结构设计如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  _id:"user001",\n  tags:["音乐爱好者","健身达人","二次元","职场菜鸟"],\n  company:{\n    name:"腾讯",\n    title:"前端开发工程师",\n    years:2\n  },\n  books:[{\n    "title": "JavaScript高级程序设计(第3版)", \n    "publishInfo": {\n      "press": "人民邮电出版社",\n      "year": 2012\n    },\n    mark:[22,34,68,105,300]\n  },{\n    "title": "JavaScript权威指南(第6版)",\n    "publishInfo": {\n      "press": "机械工业出版社",\n      "year": 2012\n    },\n    mark:[15,99,122,178,411]\n  }]\n}\n{用户2的数据}{用户3的数据}{用户4的数据}{...} //N个用户的记录\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"1匹配和更新数组里面的元素",children:["1、匹配和更新数组里面的元素",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1匹配和更新数组里面的元素",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"tags字段的值是一个数组，在前面我们已经使用过数组的查询操作符来筛选记录，我们还可以通过匹配的方式，比如我们要查询标签为“二次元”的所有用户爱看的书有哪些："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const db = wx.cloud.database()\ndb.collection('user').where({\n  tags:\"二次元\" \n})\n.get()\n.then(res=>{console.log(res)})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们可以直接使用条件",(0,r.jsx)(n.code,{children:'tags:"二次元"'}),"就能筛选到tags数组包含二次元的记录，也可以使用查询操作符",(0,r.jsx)(n.code,{children:'tags:_.all(["二次元"])'}),"或",(0,r.jsx)(n.code,{children:'tags:_.elemMatch(_.eq("二次元"))'}),"，意思虽然不同，但是结果是一样的。"]}),"\n",(0,r.jsxs)(n.p,{children:["除此以外我们还可以使用点表示法来精准匹配数组元素的位置，比如查询第3个标签的值为“二次元”的用户，我们可以使用条件",(0,r.jsx)(n.code,{children:'"tags.2":"二次元"'}),"，也就是",(0,r.jsx)(n.code,{children:"字段名.数组的index"}),'，而对数组进行更新时除了可以使用更新操作符，也可以使用点表示法更新数组内指定index的元素，比如我们把数组的第2个标签更新为"徒步爱好者"']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'.update({\n  data:{\n    "tags.1":"徒步爱好者"\n  }\n})\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"2匹配和更新对象里面的元素",children:["2、匹配和更新对象里面的元素",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2匹配和更新对象里面的元素",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["company的值是一个对象，在匹配对象的条件时，我们可以使用",(0,r.jsx)(n.strong,{children:"点表示法"}),"（更加推荐这种方法）和传入相同结构的对象的方式，比如我们要筛选企业的名称是“腾讯”，岗位是“前端开发工程师”的用户："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'//点表示法，更推荐这种方式，\n.where({\n  "company.name":"腾讯",\n  "company.title":"前端开发工程师"\n})\n\n//传入相同结构的对象的方式，\n.where({\n  company:{\n    name:"腾讯",\n    title:"前端开发工程师"\n  }\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"使用点表示法在查询时可以和前面介绍的数组对象保持一致，在更新时也能够保持一致的写法，尤其是在字段的值是更加复杂的嵌套数组和对象的情况下，点表示法非常通用。"}),"\n",(0,r.jsxs)(n.h3,{id:"592-匹配和更新多重嵌套的数组和对象",children:["5.9.2 匹配和更新多重嵌套的数组和对象",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#592-匹配和更新多重嵌套的数组和对象",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"点表示法"}),"和",(0,r.jsx)(n.strong,{children:"数组的index"}),"在字段的值是多重嵌套数组和嵌套对象时一样通用，都可以用来根究深层嵌套里的字段的值来匹配筛选记录以及将字段级别的更新用到更深的嵌套里，不管这个嵌套有多少层。"]}),"\n",(0,r.jsx)(n.p,{children:"比如上面的books就是数组里面嵌套对象，对象里面也嵌套对象，我们想要筛选喜欢的书里有“人民邮电出版社”的用户（注意，因为只能返回记录，而记录存储的是用户），应该怎么做呢？"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'.where({\n  "books.publishInfo.press":"人民邮电出版社",\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"注意尽管books是一个数组，但是我们在上面的案例进行嵌套匹配时没有指定下标index。如果没有指定下标表示的是数组内所有的值，只要值内的嵌套对象有一个值满足匹配条件，那这条记录就符合要求。如果指定数组的下标，那就是精确数组的第几项的值。"}),"\n",(0,r.jsx)(n.p,{children:"我们可以再进一步区分一下面对数组带下标与不带下标的区别，说明如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"books.1.publishInfo.press   //表示的是books数组第2项的书的出版信息\nbooks.publishInfo.press     //表示的是用户喜欢的所有书的出版信息\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在更新的时候，我们可以使用下标精准更新第几本书的信息，但是",(0,r.jsx)(n.strong,{children:"不能没有"}),"下标，否则会出现",(0,r.jsx)(n.code,{children:"multiple write errors"}),"，也就是说使用这个方式是不能更新用户喜欢的所有书的出版信息的（后面会介绍一个更新指令",(0,r.jsx)(n.code,{children:"$[]"}),"）。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'//只精准更新了用户喜欢的书的第2本的出版社信息\n.update({\n  data:{\n    "books.1.publishInfo.press":"人邮社"\n  }\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"不管你的记录的嵌套有多少层，这样的规则同样适用，遇到数组写下标就是精准匹配第几项，不写下标就是匹配了数组内的所有值。一定要注意的是，不管你匹配了多少层，使用where所返回的结果，始终都是记录列表，不会返回某个字段。"}),"\n",(0,r.jsxs)(n.h3,{id:"593-更新数组中所有匹配的元素之",children:["5.9.3 更新数组中所有匹配的元素之$[]",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#593-更新数组中所有匹配的元素之",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["要想更新数组中所有匹配的元素，这里就需要用到数组更新操作符",(0,r.jsx)(n.code,{children:"$[]"}),"，既然是更新操作符，那就不能写到查询匹配写到where里，二是要写在update请求里。在查询条件匹配筛选了记录之后，",(0,r.jsx)(n.code,{children:"$[]"}),"会修改筛选出来的记录里指定数组字段中的所有元素。比如",(0,r.jsx)(n.code,{children:"books.1"}),"是books数组的第2个元素，",(0,r.jsx)(n.code,{children:"books.$[]"}),"就是books数组内的所有元素。"]}),"\n",(0,r.jsx)(n.p,{children:"还是以前面的例子为例，但是我们丰富一下案例(学习时可以使用控制台的高级操作用脚本将数据添加到集合里)："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  _id:"user001",\n  books:[{\n    "title": "JavaScript高级程序设计(第3版)", \n    "publishInfo": {\n      "press": "人民邮电出版社",\n    }\n  },{\n    "title": "JavaScript权威指南(第6版)",\n    "publishInfo": {\n      "press": "机械工业出版社",\n    }\n  }]\n},{\n  _id:"user002",\n  books:[{\n    "title": "Python编程从入门到实践", \n    "publishInfo": {\n      "press": "人民邮电出版社",\n    }\n  },{\n    "title": "高性能MySQL（第3版）",\n    "publishInfo": {\n      "press": "电子工业出版社"\n    },\n  },{\n    "title": "JavaScript高级程序设计(第3版)", \n    "publishInfo": {\n      "press": "人民邮电出版社",\n    }\n  }]\n} //.....N个用户\n'})}),"\n",(0,r.jsxs)(n.p,{children:["比如我们想将所有用户的喜欢的书里面的“人民邮电出版社”全部更新为“人邮社”，那我们就可以使用",(0,r.jsx)(n.code,{children:"$[]"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.collection(\'user\')\n.where({\n  "books.publishInfo.press":"人民邮电出版社"\n})\n.update({\n  data:{\n    "books.$[].publishInfo.press":"人邮社"\n  }\n})\n.then(res=>{console.log(res)})\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"594-更新数组中第一个匹配到的元素之",children:["5.9.4 更新数组中第一个匹配到的元素之$",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#594-更新数组中第一个匹配到的元素之",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["以上的案例where匹配和update之间并没有太大的联系，where只匹配出记录，而update不管你匹配的嵌套是啥情况，只管更新你匹配筛选了哪些记录。比如你使用where",(0,r.jsx)(n.code,{children:'"books.publishInfo.press":"人民邮电出版社"'}),"匹配的是喜欢的书里有“人民邮电出版社”的",(0,r.jsx)(n.strong,{children:"用户的信息"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["where匹配筛选返回的结果是记录列表，那要怎么样才能让where在字段上的匹配与update之间产生联系呢，",(0,r.jsx)(n.code,{children:"$"}),"更新操作符只会更新第一个匹配到的元素，它相当于是第一个匹配结果的占位符，在使用时一定要是where匹配到的数组的一部分，where的字段匹配和update就通过",(0,r.jsx)(n.code,{children:"$"}),"有了联系。"]}),"\n",(0,r.jsxs)(n.p,{children:["比如我们想根据喜欢的书名为",(0,r.jsx)(n.code,{children:"JavaScript高级程序设计(第3版)"}),"来更新这本书的出版社，由于我们只知道书名，但是不知道这本书在数组的index，那我们如何更新呢？"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.collection(\'user\')\n.where({\n  "books.title":"JavaScript高级程序设计(第3版)"\n})\n.update({\n  data:{\n    "books.$.publishInfo.press":"人民邮电"\n  }\n})\n.then(res=>{console.log(res)})\n'})}),"\n",(0,r.jsxs)(n.p,{children:["注意尽管有N多个用户都喜欢",(0,r.jsx)(n.code,{children:"JavaScript高级程序设计(第3版)"}),"这本书，我们使用where查询时得到的也是N多个用户的记录列表，但是使用",(0,r.jsx)(n.code,{children:"books.$.publishInfo.press"}),"却只会更新第一个用户的书，如果你想更新所有用户的书的出版社，就要用",(0,r.jsx)(n.code,{children:"books.$[].publishInfo.press"}),"。居然只能更新数组第一个，",(0,r.jsx)(n.code,{children:"$"}),"的意义在哪呢？"]}),"\n",(0,r.jsxs)(n.p,{children:["在数据量比较大的时候，有时候我们并不清楚嵌套数组里的某个值在数组里的index（如果清楚的话，就可以直接用index精准更新了），但是我们可以",(0,r.jsx)(n.code,{children:"$"}),"，只要在where进行嵌套字段匹配时是唯一值，我们就能精确更新它的值。"]}),"\n",(0,r.jsxs)(n.p,{children:["比如以下是一个博客集合posts的评论数据，我们只知道评论的id，但是我们想修改这个id相应的评论的内容，这个时候就可以用到",(0,r.jsx)(n.code,{children:"$"}),"了："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  "_id":"post001",\n  "comments":[\n    //...前面有N条评论，使得我们没法依赖评论在评论列表的index\n    {\n    "comment":{\n      "id":"comment0998",\n      "content":"云开发真是好用啊"\n    }\n  }]\n}\n\ndb.collection(\'posts\')\n.where({\n  "comments.comment.id":"comment0998"\n})\n.update({\n  data:{\n    "comments.$.comment.content":"云开发数据库真好用，哈哈"\n  }\n})\n.then(res=>{console.log(res)})\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["注意，",(0,r.jsx)(n.code,{children:"$"}),"不能用于更新嵌套在两层及两层以上的数组里的字段。"]}),"\n"]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let a=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F38.%E6%93%8D%E4%BD%9C%E5%B5%8C%E5%A5%97%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1.md"]={toc:[{text:"5.9 操作嵌套数组对象",id:"59-操作嵌套数组对象",depth:2},{text:"5.9.1 普通数组和对象的查询与更新",id:"591-普通数组和对象的查询与更新",depth:3},{text:"1、匹配和更新数组里面的元素",id:"1匹配和更新数组里面的元素",depth:4},{text:"2、匹配和更新对象里面的元素",id:"2匹配和更新对象里面的元素",depth:4},{text:"5.9.2 匹配和更新多重嵌套的数组和对象",id:"592-匹配和更新多重嵌套的数组和对象",depth:3},{text:"5.9.3 更新数组中所有匹配的元素之$[]",id:"593-更新数组中所有匹配的元素之",depth:3},{text:"5.9.4 更新数组中第一个匹配到的元素之$",id:"594-更新数组中第一个匹配到的元素之",depth:3}],title:"38.操作嵌套数组对象",headingTitle:"38.操作嵌套数组对象",frontmatter:{}}}}]);