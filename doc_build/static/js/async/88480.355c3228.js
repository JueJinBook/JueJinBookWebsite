"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["88480"],{458580:function(e,n,r){r.r(n),r.d(n,{default:()=>j});var s=r(552676),c=r(740453);let a=r.p+"static/image/ac0050ef44965a66628673c9e4173f6c.d466c887.png",d=r.p+"static/image/44249d3d1174dcac6a3bc53ef88132e0.0e4a97a5.png",t=r.p+"static/image/8a0ff247b09111fd10ed540d4ea5ecf8.2846c2f2.png",i=r.p+"static/image/03c17d71981643ac57cbb028356e868a.97e065c2.png",h=r.p+"static/image/c59dfc52b1462b585801f9b2ad70edb4.26946f37.png",l=r.p+"static/image/2042a6b7513b8268ac7a81a76d3f1f82.c79b26a2.png";function o(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",h3:"h3",h4:"h4",pre:"pre",code:"code",img:"img",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"27本地调试与云端测试",children:["27.本地调试与云端测试",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#27本地调试与云端测试",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"42-本地调试与云端测试",children:["4.2 本地调试与云端测试",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-本地调试与云端测试",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["用编程来写项目，就像是在做一系列精密而复杂的实验，你不能总是劳烦他人帮你解决问题，而是要掌握",(0,s.jsx)(n.strong,{children:"调试"}),"、",(0,s.jsx)(n.strong,{children:"测试"}),"、",(0,s.jsx)(n.strong,{children:"日志打印"}),"等手段来检查每一步操作是否正确，你需要学会查看报错信息，如果不正确问题在哪、出了什么问题，你才能有针对性的去搜索，有针对性的去咨询他人。"]}),"\n",(0,s.jsxs)(n.h3,{id:"421-云函数的开发流程",children:["4.2.1 云函数的开发流程",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#421-云函数的开发流程",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["为了能够让大家更加清楚的了解：",(0,s.jsx)(n.strong,{children:"完整操作一个云函数的流程"}),"以及",(0,s.jsx)(n.strong,{children:"本地调试与云端测试的重要性"}),"，我们以长方形的边长（a、b）求周长、面积这个简单的数学公式为例。"]}),"\n",(0,s.jsxs)(n.h4,{id:"1新建云函数",children:["1、新建云函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1新建云函数",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先我们右键点击",(0,s.jsx)(n.strong,{children:"云函数根目录"}),"（也就是",(0,s.jsx)(n.strong,{children:"cloudfunctions文件夹"}),"），选择",(0,s.jsx)(n.strong,{children:"新建Node.js云函数"}),"，函数名为长方形的英文rectangle，然后打开index.js，将代码修改为如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nexports.main = async (event, context) => {\n  const {width,height} = event\n  console.log(\"长方形的周长与面积\",[(width+height)*2,width*height])\n  return {\n    circum:(width+height)*2,\n    area:width*height\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["circum是周长，周长=（宽度width+高度height）✖️2；area是面积，面积=宽度width✖️高度height，只要我们之后把长方形的参数宽度width和高度height传递进来（",(0,s.jsx)(n.strong,{children:"之后我们会来讲怎么传"}),"），即可获得长方形的周长和面积。"]}),"\n",(0,s.jsxs)(n.p,{children:["建好云函数之后，我们右键点击云函数目录，也就是rectangle文件夹，选择",(0,s.jsx)(n.strong,{children:"在终端中打开"}),"，使用npm install来安装依赖。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"npm install\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"2本地调试云函数是否正确",children:["2、本地调试云函数是否正确",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2本地调试云函数是否正确",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["对于一个复杂的云函数，我们最好是先在本地测试一下云函数是否正确，然后再部署上传到云端。那如何本地测试呢？右键点击云函数目录，也就是rectangle文件夹，选择",(0,s.jsx)(n.strong,{children:"本地调试"}),"（这种方式进入本地调试会默认开启rectangle的本地调试）。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以根据情况来选择",(0,s.jsx)(n.strong,{children:"手动触发"}),"和",(0,s.jsx)(n.strong,{children:"模拟器触发"}),"，使用手动触发需要我们在本地调试输入参数之后，点击",(0,s.jsx)(n.strong,{children:"调用"}),"："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["我们给参数宽度width和高度height赋值（",(0,s.jsx)(n.strong,{children:"注意传递的是JSON格式，最后一个参数结尾不能有逗号,"}),"），比如赋值为3和7："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "width": 3,\n  "height":7\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["然后点击",(0,s.jsx)(n.strong,{children:"调用"}),"，如果显示函数执行成功(注意仍然是在调试的console标签)，并得到周长circum和面积area的结果分别为20、21，那证明云函数没有写错。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"当开启了本地调试，我们在开发者工具调试器的console控制台（非本地调试的console标签页）调用云函数时也会调用本地的云函数。在本地调试窗口无论是选择手动触发、模拟器触发亦或是通过其他云函数来调用云函数，取决于你的云函数的调用方式，比如如果云函数调用是在页面的生命周期函数里调用，我们本地调试时就可以使用模拟器触发。"}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"3云端测试云函数是否正确",children:["3、云端测试云函数是否正确",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3云端测试云函数是否正确",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["打开",(0,s.jsx)(n.strong,{children:"云开发控制台"}),"的",(0,s.jsx)(n.strong,{children:"云函数"}),"标签页，找到rectangle云函数，点击",(0,s.jsx)(n.strong,{children:"云端测试"}),"，同样我们给参数赋值，将以下代码进行修改，比如给宽度width赋值为4，高度height赋值为7，即代码修改为："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "width": 4,\n  "height": 7\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"然后点击运行测试，（会等一段时间），再来查看测试的结果，如果返回结果如下，则表示在云端的云函数可以正常调用："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{"circum":22,"area":28}\n'})}),"\n",(0,s.jsx)(n.p,{children:"云函数的调用采用事件触发模型，小程序端的调用、本地调试和云端测试都会触发云函数的调用事件，其中本地调试调用的不是云端的云函数，而是小程序本地的云函数；而在云端测试调用云函数的结果是可以在云开发控制台云函数的日志里查看到的。"}),"\n",(0,s.jsxs)(n.h4,{id:"4云函数的在线编辑",children:["4、云函数的在线编辑",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4云函数的在线编辑",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上传到云端的云函数，我们还可以通过云开发的网页控制台（登录方式见第一章【云开发资源的管理】的介绍）在线修改代码。通过在线编辑，我们不仅可以检查代码是否更新成功，还可以脱离微信开发者工具、Cloudbase CLI等来临时修改代码。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"云函数在线编辑器"})}),"\n",(0,s.jsxs)(n.h3,{id:"422-retun与console",children:["4.2.2 retun与console",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#422-retun与console",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"1云函数日志",children:["1、云函数日志",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1云函数日志",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当调用云函数时，在开发者工具调试器里并没有看到console.log打印的结果，我们可以打开",(0,s.jsx)(n.strong,{children:"云开发控制台"}),"–",(0,s.jsx)(n.strong,{children:"云函数"}),"–",(0,s.jsx)(n.strong,{children:"日志"}),"，",(0,s.jsx)(n.strong,{children:"按函数名筛选"}),"，选择rectangle云函数，可以看到云函数被调用的日志记录了（日志也可以在云开发网页控制台查看）。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"查看云函数日志"})}),"\n",(0,s.jsxs)(n.p,{children:["在云函数日志里，我们除了可以在",(0,s.jsx)(n.strong,{children:"返回结果"}),"里看到return返回的对象，还可以在日志里查看到云函数执行的时间点（使用的是服务端时间，时区为UTC+0），以及云函数里使用console.log打印的日志。"]}),"\n",(0,s.jsxs)(n.p,{children:["云函数调试的时候，不能只依赖小程序端的",(0,s.jsx)(n.code,{children:"wx.cloud.callFunction"}),"使用return返回的报错，因为它只是反馈云函数的调用结果以及调用是否出现错误error，更多的还是要在云函数里使用",(0,s.jsx)(n.code,{children:"console.log"}),"打印云函数在执行过程中的一些日志情况。也就是说，return只会返回中断函数执行的一些报错，而比如函数是否获取到参数，参数是什么数据类型，以及是否包含你想要的预期值，这些都需要勤使用console.log来反馈。"]}),"\n",(0,s.jsxs)(n.h4,{id:"2return与报错",children:["2、return与报错",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2return与报错",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在小程序端调用云函数时，我们经常会使用到return，return语句可以终止函数的执行并返回一个值给小程序端，因此很多人会依赖return返回的这个值来了解云函数是否获取到了最终想要的结果。对于复杂的云函数，仅仅只是使用return并不能精确定位到云函数在执行过程中哪里出错。"}),"\n",(0,s.jsx)(n.p,{children:"而小程序端的报错，只能显示云函数为什么没有等到执行return就中断了，比如以下案例集合名本为cloudbase，但是在书写的过程中，却不小心写错了："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nconst db = cloud.database()\nconst _ = db.command\nexports.main = async (event, context) => {\n  return await db.collection(\"cloubase\").where({\n    _id:_.exists(true)\n  }).get()\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这种错误由于会中断云函数的执行，因此会被返回到小程序端，报错也会显示集合或记录不存在，截图如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"云函数出现报错"})}),"\n",(0,s.jsx)(n.p,{children:"当然出现这个报错，首先要检查你调用的集合与云数据库的集合名是否一致（或确实不存在这个集合），如果都没有问题，则需要检查云函数的初始化是否正确的选择了集合所在的云开发环境。"}),"\n",(0,s.jsx)(n.p,{children:"大多数情况下，可能云函数里并没有出现中断函数执行的错误error，但是return却并没有返回到预期的结果，比如前面介绍的rectangle云函数，我们可以在开发者工具的调试器console里调用云函数："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'wx.cloud.callFunction({name:"rectangle"}).then(res=>{console.log(res)})\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在调用时，我们忘记了传入参数，或者参数名写错了，或者由于异步的问题参数其实没有值等等原因，云函数可以正常执行，但是return的值却为",(0,s.jsx)(n.code,{children:"result: {circum: null, area: null}"}),"，对于这样的错误如果不通过日志，就很难反馈出来。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注意 ",(0,s.jsx)(n.strong,{children:"错误(Error)"})," 与 ",(0,s.jsx)(n.strong,{children:"异常(Exception)"})," 是完全不一样的，错误会中断JavaScript函数的执行，而异常不会导致JavaScript进程被终止，通过return只能返回错误而不能获取到异常，要获取云函数执行的异常需要通过",(0,s.jsx)(n.code,{children:"try..catch"}),"的方式。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"3关于return语句",children:["3、关于return语句",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3关于return语句",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"值得一提的是，return语句除了可以返回一个值给调用者外，它还会终结一个函数的执行。当return后面还有函数语句，开发者工具会提示这些代码为灰色，表明这些语句不会执行。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"return语句中断函数执行"})}),"\n",(0,s.jsx)(n.p,{children:"以上面的截图为例，第15行的console.log由于是在return语句的后面，所以是灰色的不会执行；不过整个云函数在第8行就被return中断了，整个函数最终只会返回width*height的值。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"在return关键字和被返回的表达式之间不允许使用行终止符，也就是说return与要返回的表达式之间不能有换行，开发者工具的代码提示也会显示有错误。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"423-云函数错误处理",children:["4.2.3 云函数错误处理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#423-云函数错误处理",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"1trycatch",children:["1、try...catch",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1trycatch",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在云函数中，return只能返回错误，而有些异常我们可以通过",(0,s.jsx)(n.code,{children:"try..catch"}),"来返回，",(0,s.jsx)(n.code,{children:"try..catch"}),"的语法如下。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"try {\n  // 代码...\n} catch (err) {\n  // 错误捕获\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["也就是如果在try块中有任何一个语句或函数抛出异常，控制会立即转向catch子句。如果在try块中没有异常抛出，则会跳过catch子句。我们写的每一个云函数都建议采用",(0,s.jsx)(n.code,{children:"try..catch"}),"的方式来进行错误处理。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nconst db = cloud.database()\nconst _ = db.command\nexports.main = async (event, context) => {\n  try{\n    const data = await db.collection(\"cloubase\").where({\n      _id:_.exists(true)\n    }).get()\n    return data\n  }catch(err){\n    return err\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["前面通过return获取不到的异常，通过",(0,s.jsx)(n.code,{children:"try...catch"}),"的方式就能获取到了，异常返回如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'errCode: -502005\nerrMsg: "[ResourceNotFound] Db or Table not exist. Please check your request, but if the problem cannot be solved, contact us.; \n'})}),"\n",(0,s.jsxs)(n.h4,{id:"2error对象不支持遍历",children:["2、error对象不支持遍历",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2error对象不支持遍历",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"不过对于一些异常，Node.js存在error对象的字段不支持遍历，所以序列化成字符串时会忽略所有的字段，比如下面的代码不仅集合不存在，连upData这个变量也没有声明，直接返回error显示的会为空："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nconst db = cloud.database()\nconst _ = db.command\nexports.main = async (event, context) => {\n  try {\n    const result =await db.collection('users').where(upData).get()\n    return result\n  }catch (error) {\n    //return error有时候返回不了一些异常，可以通过通过返回error的具体属性\n    // return { name: error.name, message: error.message, stack: error.stack }\n    return error\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们可以通过返回error对象的name、message、stack的方式来获取异常，如catch子句里我们可以使用",(0,s.jsx)(n.code,{children:"return { name: error.name, message: error.message, stack: error.stack }"}),"，这样就可以返回报错了。"]}),"\n",(0,s.jsxs)(n.h4,{id:"3云函数的日志与高级日志",children:["3、云函数的日志与高级日志",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3云函数的日志与高级日志",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["不过更加建议的方式是在做云函数错误处理时结合使用console.log或高级日志的方式来记录报错，因为即使采用了",(0,s.jsx)(n.code,{children:"try...catch"}),"的方式，还是有一些错误、异常无法被反馈，而console.log强大的调试测试能力却可以做到。"]}),"\n",(0,s.jsxs)(n.p,{children:["比如下面的一个云函数，需要我们在调用云函数时给云函数传入两个参数",(0,s.jsx)(n.code,{children:"a"}),"和",(0,s.jsx)(n.code,{children:"b"}),"，云函数会将获取到的参数相加并返回："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nexports.main = async (event, context) => {\n  try {\n    const {a,b} = event\n    const sum = a + b\n    console.log(\"获取到的a,b,sum的值\",[a,b,sum])\n    return sum\n  }catch (e) {\n    console.log(e)\n    return { name: error.name, message: error.message, stack: error.stack }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果我们在调用云函数时忘记传入参数，比如在控制台输入以下代码，即使在用了",(0,s.jsx)(n.code,{children:"try...catch"}),"的情况下也是无法准确定位到错误的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'wx.cloud.callFunction({name:"rectangle"}).then(res=>{console.log(res)})\n'})}),"\n",(0,s.jsxs)(n.p,{children:["我们可以在try语句打印云函数参数获取的情况",(0,s.jsx)(n.code,{children:'console.log("获取到的a,b,sum的值",[a,b,sum])'}),"，在云函数的调用日志里面查看就能发现问题："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"获取到的a,b,sum的值 [ undefined, undefined, NaN ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"当小程序发布之后，通过筛选“调用失败”只能获取到中断云函数执行的错误，而对于一些bug或异常，则需要通过云函数日志。但是云函数调用次数非常多，而console.log日志却没办法筛选，这个时候我们可以使用云开发提供的高级日志服务。高级日志服务实现日志采集和检索分析等功能，方便开发者通过日志快速的发现和定位问题。每条日志可最长存储30天，超过 30 天的日志将被自动清理。"}),"\n",(0,s.jsxs)(n.h3,{id:"424-云函数的监控",children:["4.2.4 云函数的监控",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#424-云函数的监控",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"1云函数状态监控与消耗",children:["1、云函数状态监控与消耗",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1云函数状态监控与消耗",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在云函数日志里，我们可以看到云函数的执行时间、内存和内存消耗，比如",(0,s.jsx)(n.code,{children:"Duration:5ms Memory:256MB MemUsage:35.218750M"}),"，意思是整个云函数执行时间为5ms，当前云函数的内存为256MB，内存消耗为35.218750M。"]}),"\n",(0,s.jsx)(n.p,{children:"云函数的执行时间和内存是一个非常关键的指标，比如云函数执行时间可以反映该云函数的性能，如果执行时间过长，比如超过500ms，云函数就应该尽可能优化一下；而同时云函数的计费也与执行时间和内存（也就是256M，非内存消耗）相关，云函数资源使用量 = 函数配置内存（256M） X 运行计费时长（5ms）。"}),"\n",(0,s.jsxs)(n.h4,{id:"2network面板",children:["2、network面板",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2network面板",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["调用云函数时，我们还可以在开发者工具调试面板的NetWork标签查看调用云函数的情况。\n",(0,s.jsx)("img",{src:a,alt:"云函数调用加载情况"})]})]})}function x(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}let j=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F27.%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E4%B8%8E%E4%BA%91%E7%AB%AF%E6%B5%8B%E8%AF%95.md"]={toc:[{text:"4.2 本地调试与云端测试",id:"42-本地调试与云端测试",depth:2},{text:"4.2.1 云函数的开发流程",id:"421-云函数的开发流程",depth:3},{text:"1、新建云函数",id:"1新建云函数",depth:4},{text:"2、本地调试云函数是否正确",id:"2本地调试云函数是否正确",depth:4},{text:"3、云端测试云函数是否正确",id:"3云端测试云函数是否正确",depth:4},{text:"4、云函数的在线编辑",id:"4云函数的在线编辑",depth:4},{text:"4.2.2 retun与console",id:"422-retun与console",depth:3},{text:"1、云函数日志",id:"1云函数日志",depth:4},{text:"2、return与报错",id:"2return与报错",depth:4},{text:"3、关于return语句",id:"3关于return语句",depth:4},{text:"4.2.3 云函数错误处理",id:"423-云函数错误处理",depth:3},{text:"1、try...catch",id:"1trycatch",depth:4},{text:"2、error对象不支持遍历",id:"2error对象不支持遍历",depth:4},{text:"3、云函数的日志与高级日志",id:"3云函数的日志与高级日志",depth:4},{text:"4.2.4 云函数的监控",id:"424-云函数的监控",depth:3},{text:"1、云函数状态监控与消耗",id:"1云函数状态监控与消耗",depth:4},{text:"2、network面板",id:"2network面板",depth:4}],title:"27.本地调试与云端测试",headingTitle:"27.本地调试与云端测试",frontmatter:{}}}}]);