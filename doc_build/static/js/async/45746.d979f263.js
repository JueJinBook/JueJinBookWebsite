"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["45746"],{141358:function(n,e,r){r.r(e),r.d(e,{default:()=>u});var s=r(552676),t=r(740453);let c=r.p+"static/image/fcf947b2cb2b8618bee11b1e147fa023.87d3596c.webp",i=r.p+"static/image/03ef7bbc9daa02b094649ee03f2ba57e.0fd77bb8.webp",d=r.p+"static/image/0696074de89bc0591fa17049fc3ea2fe.f23e2fd4.webp",o=r.p+"static/image/040b6cd15dd5dea3b75e34dfa9c9b9c3.aaf5528c.webp",a=r.p+"static/image/69559051f827ea32e72ea61d2d9dcfa2.ed2c7864.webp",l=r.p+"static/image/760320a3aa08218831b5c37fefa50596.3524dad9.webp",h=r.p+"static/image/be5c018fb752cce015eae3a541fe2179.59e79d74.webp",p=r.p+"static/image/3f39611c6acc2ca40806390850ea4f31.18dff277.webp",j=r.p+"static/image/12e3b6052a961094ef04bef72ac07d07.7c204917.webp";function x(n){let e=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",img:"img",h2:"h2",h3:"h3",pre:"pre",code:"code",blockquote:"blockquote"},(0,t.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"36客户端实战远程资源加载应用实现",children:["36.客户端实战：远程资源加载应用实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#36客户端实战远程资源加载应用实现",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在上一篇文章当中，我们主要讲述了目前主流的一些加载方案，但是都没有成一个体系化。在低代码平台当中，应用对于远程资源获取的能力是非常重要的。"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"JS"}),"：通产需要在运行时或者是启动时预加载一些脚本资源来完成一些工具库的预安装和变量注入。"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Css"}),"：对应用而言，需要引入一些在线的css样式来完善整个页面的加载展示。"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"如下图所示，在新建一个应用的时候，除了基本信息之外，还可以来自定义当前页面初始化的一些资源列表，当应用列表创建完成后，预加载的资源会填充到画布&页面当中进行加载。"}),"\n",(0,s.jsx)(e.p,{children:"如下图所示："}),"\n",(0,s.jsxs)(e.p,{children:["在创建应用中，可以插入需要加载的资源，资源的类型可以更加的灵活一些，目前先支持主流的",(0,s.jsx)(e.strong,{children:"js & css"}),"资源。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"实现过程",children:["实现过程",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现过程",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"模块的加载可以分为两部分：静态资源和异步模块。"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"静态资源"}),"： 包括页面重置的CSS、各种字体文件、样式包、垫片等资源文件。这些资源在界面渲染过程中被使用，用于美化和定制化页面的外观和样式。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"异步模块"}),"：在执行层提供给用户使用的模型对象，类似于moment和dayjs等类库。这些模型对象以不同的模块类型存在，通常使用ESM和UMD格式。"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"UMD"}),": 是一种兼容多种模块系统的通用模块格式，具有很强的兼容性，可以在不同的环境下使用。当在浏览器中直接加载UMD模块时，它会在全局对象中创建一个对象来保存当前模块的信息。因此，可以通过创建加载容器的方式来安全地进行在线加载UMD模块。"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"ESM"}),": 使用import和export关键字来导入和导出模块。ESM既可以在浏览器环境下使用，也可以在Node环境下使用，但需要注意一些版本限制。相比于UMD，ESM提供了动态加载模块的能力，使用import关键字可以直接返回模块对象。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"整体实现如下图所示："}),"\n",(0,s.jsx)(e.p,{children:"需要注意的是，在编辑模式下因为有画布的影响，所以挂载静态资源时需要挂载到画布的iframe当中，以此来保证编辑预览效果与真实界面的一致性。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(e.h2,{id:"静态资源加载实现",children:["静态资源加载实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#静态资源加载实现",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"静态资源的实现可以分为两一份，一是资源的设置、二是资源的加载。接下来就是整个过程的实现了。"}),"\n",(0,s.jsxs)(e.h3,{id:"创建列表",children:["创建列表",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#创建列表",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["通过",(0,s.jsx)(e.strong,{children:"pro-components"}),"的",(0,s.jsx)(e.strong,{children:"ProFormList"}),"组件创建一个列表。该列表用于展示预加载资源的记录，每条记录包含资源地址和类型。"]}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'<ProFormList\n          label="预加载资源"\n          name="heads"\n          tooltip="需要提前加载的资源，脚本(js script)，资源(css, font...)"\n          initialValue={[\n            {\n              useMode: "chapter",\n            },\n          ]}\n          creatorButtonProps={{\n            position: "bottom",\n            creatorButtonText: "添加脚本",\n          }}\n          creatorRecord={{\n            tag: "script",\n          }}\n        >\n          <Space>\n            <ProFormText\n              width="xl"\n              name="url"\n              addonBefore={<Tag color="blue">http(s)://</Tag>}\n              rules={[\n                {\n                  required: true,\n                  message: "请输入资源地址",\n                },\n              ]}\n              placeholder="需要加载的资源地址"\n            />\n            <ProFormSelect\n              name="tag"\n              placeholder="资源标签"\n              rules={[\n                {\n                  required: true,\n                  message: "请选择资源类型",\n                },\n              ]}\n              options={[\n                {\n                  label: "脚本",\n                  value: "script",\n                },\n                {\n                  label: "资源",\n                  value: "link",\n                },\n              ]}\n            />\n          </Space>\n        </ProFormList>\n'})}),"\n",(0,s.jsx)(e.p,{children:"基本的设计界面的显示如下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"createjsscript",children:["createJsScript",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#createjsscript",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"createJsScript"}),"方法用于创建 ",(0,s.jsx)(e.strong,{children:"JavaScript"})," 脚本的地址。该函数接受一个参数 ",(0,s.jsx)(e.strong,{children:"src"}),"，代表脚本的地址。在函数内部，首先通过 ",(0,s.jsx)(e.strong,{children:"document.createElement('script')"})," 创建了一个",(0,s.jsx)(e.strong,{children:"script"}),"元素，并将需要加载的资源地址设置为",(0,s.jsx)(e.strong,{children:"src"}),"属性"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"/**\n * 创建js script地址\n * @param src 脚本地址\n */\nfunction createJsScript(src: string): HTMLScriptElement {\n  const jsScript = document.createElement('script');\n  jsScript.src = addHttpPrefix(src);\n  jsScript.async = true;\n  return jsScript;\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"createcsslink",children:["createCssLink",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#createcsslink",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"createCssLink"}),"用于创建 ",(0,s.jsx)(e.strong,{children:"CSS Link"})," 元素，在函数内部，首先通过 ",(0,s.jsx)(e.strong,{children:"document.createElement('link')"})," 创建了一个",(0,s.jsx)(e.strong,{children:"link"}),"元素，表示 ",(0,s.jsx)(e.strong,{children:"CSS"})," 链接。然后，将元素的 ",(0,s.jsx)(e.strong,{children:"rel"})," 属性设置为 '",(0,s.jsx)(e.strong,{children:"stylesheet"}),"'，表示它是一个样式表链接。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"/**\n * 创建css Link组件\n * @param href css地址\n */\nfunction createCssLink(href: string): HTMLLinkElement {\n  const cssLink = document.createElement('link');\n  cssLink.rel = 'stylesheet';\n  cssLink.href = addHttpPrefix(href);\n  return cssLink;\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"usedynamicheadinsertion",children:["useDynamicHeadInsertion",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#usedynamicheadinsertion",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"createCssLink"})," & ",(0,s.jsx)(e.strong,{children:"createJsScript"})," 定义了解析创建列表中的heads字段，并将它们转换成相应的",(0,s.jsx)(e.strong,{children:"script"}),"和",(0,s.jsx)(e.strong,{children:"link"}),"标签，并通过",(0,s.jsx)(e.strong,{children:"document.appendChild"}),"插入到对应的画布当中。"]}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["遍历 ",(0,s.jsx)(e.strong,{children:"heads"})," 数组中的每个元素，并根据元素的 tag 属性来动态创建并添加不同类型的资源元素到文档片段 ",(0,s.jsx)(e.strong,{children:"fragment"})," 中进行保存，",(0,s.jsx)(e.strong,{children:"React.useMemo"}),"返回了一个",(0,s.jsx)(e.strong,{children:"DocumentFragment"}),"片段，方便整个区块插入到页面当中。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import React from 'react'\nimport { addHttpPrefix } from '@/framework/utils'\n/**\n * 注入预加载资源\n */\nexport const useDynamicHeadInsertion = () => {\n\n  const element = React.useMemo(() => {\n    const preloadHeads = localStorage.getItem(\"editor_heads\")\n\n    if (!preloadHeads) return null\n\n    try {\n      const heads: Array<{\n        tag: 'link' | 'script',\n        url: string\n      }> = JSON.parse(preloadHeads)\n\n      const fragment = document.createDocumentFragment();\n\n      heads.forEach((item) => {\n        if (item.tag === \"link\") {\n          fragment.appendChild(createCssLink(item.url))\n        } else {\n          fragment.appendChild(createJsScript(item.url))\n        }\n      })\n\n      return fragment\n      \n\n    } catch (error) {\n      return null\n    }\n\n  }, [])\n\n  return element\n  \n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"使用",children:["使用",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.strong,{children:"Ignition-web/apps/editor/src/framework/canvas/document.tsx"}),"文件下引入",(0,s.jsx)(e.strong,{children:"useDynamicHeadInsertion"}),"，判断当前",(0,s.jsx)(e.strong,{children:"useFrame"}),"获取的",(0,s.jsx)(e.strong,{children:"widnow"}),"是否存在，如果存在的话就将其插入",(0,s.jsx)(e.strong,{children:"canvasDocument"}),"，反之的话就插入",(0,s.jsx)(e.strong,{children:"document"}),"。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-diff",children:'import React from "react";\nimport { __Provider__, __Box__ } from "@/framework/components";\nimport { Frame as DocumentFrame, Element } from "@craftjs/core";\n+ import { useFrame } from "react-frame-component";\n+ import { useDynamicHeadInsertion } from "../hooks/useDynamicHeadInsertion";\nimport { CnavasRootId } from "@huos/core";\n\nexport const DocumentNodes = () => {\n+  const { document: canvasDocument } = useFrame();\n+   const elements = useDynamicHeadInsertion();\n\n+  React.useEffect(() => {\n+    const canvasElement = document.getElementById(CnavasRootId);\n+    const insertElement = canvasElement ? canvasDocument : document;\n+\n+    if (insertElement && elements) {\n+      insertElement.head.appendChild(elements);\n+    }\n+  }, [canvasDocument, elements]);\n\n  return (\n    <div\n      id="__CasterViewPort__"\n      style={{\n        height: "100vh",\n        width: "100vw",\n        overflow: "hidden",\n      }}\n    >\n      <DocumentFrame>\n        <Element\n          canvas\n          is={__Provider__}\n          height="100vh"\n          width="100vw"\n          overflow="auto"\n          backgroundColor="#FFF"\n        >\n          <__Box__ />\n        </Element>\n      </DocumentFrame>\n    </div>\n  );\n};\n'})}),"\n",(0,s.jsx)(e.p,{children:"如下图所示："}),"\n",(0,s.jsxs)(e.p,{children:["画布的",(0,s.jsx)(e.strong,{children:"iframe"}),"中，",(0,s.jsx)(e.strong,{children:"head"}),"已经有了自定义的资源地址。并且已经进行了异步加载。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"动态模块加载",children:["动态模块加载",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#动态模块加载",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["动态模块加载的主要用途是提供给动态执行的加强能力，在",(0,s.jsx)(e.strong,{children:"JS"}),"当中，存在非常多的工具库可以给用户选择，因此在低代码平台中，我们也希望这个能力能够被集成到模块当中。"]}),"\n",(0,s.jsx)(e.p,{children:"如下图所示："}),"\n",(0,s.jsxs)(e.p,{children:["页面中处理一个时间，通常会使用",(0,s.jsx)(e.strong,{children:"moment"}),"或者是",(0,s.jsx)(e.strong,{children:"dayjs"}),"来快速的处理。通过动态模块加载，可以给代码执行容器提供更强大的逻辑能力。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"loadjs",children:["loadJS",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#loadjs",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在这之前，我们实现了",(0,s.jsx)(e.strong,{children:"BrowserRuntimeVM"}),"执行容器，用于执行用户输入的表达式代码。在此基础之上，新建一个",(0,s.jsx)(e.strong,{children:"loadJS"}),"方法来加载对应的",(0,s.jsx)(e.strong,{children:"CDN模块包"}),"。"]}),"\n",(0,s.jsx)(e.p,{children:"如下图所示："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"loadJS"}),"的功能非常简单，通过创建 ",(0,s.jsx)(e.strong,{children:"script"})," 元素，并将要加载的脚本的 ",(0,s.jsx)(e.strong,{children:"URL"})," 设置为 ",(0,s.jsx)(e.strong,{children:"src"})," 属性。监听",(0,s.jsx)(e.strong,{children:"script"}),"脚本的",(0,s.jsx)(e.strong,{children:"load"}),"和",(0,s.jsx)(e.strong,{children:"error"}),"事件能够判断脚本加载的状态，从而通过Promise返回相关的信息。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'public async loadJS(url: string) {\n    this.onGasketInstance();\n\n    const contentWindow = this.iframe.contentWindow!;\n    const contentDocument = this.iframe.contentDocument!;\n\n    return new Promise((resolve, reject) => {\n      // 先查一遍，看看是否存在已经加载的script\n      const matchingElements = contentDocument.querySelectorAll(\n        `script[src="${url}"]`\n      );\n      \n      // 判断模块是否存在\n      if (matchingElements.length > 0) {\n        resolve(true);\n      } else {\n      \n        // 创建script标签\n        const script = contentDocument.createElement("script");\n\n        // 添加src标签\n        script.setAttribute("src", url);\n\n        // 发生错误\n        contentWindow.addEventListener("error", (evt) => {\n          resolve(false);\n        });\n        \n        // onload加载事件\n        script.onload = () => {\n          console.log("加载成功: ", url);\n          resolve(true);\n        };\n        \n        // onerror加载事件\n        script.onerror = () => {\n          resolve(false);\n        };\n\n        // 添加到 iframe 里面\n        this.iframe.contentDocument!.head.appendChild(script);\n      }\n    });\n  }\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"这是一个最简单的实现，只是单纯的将umd模块加载到执行容器当中，事实上如果再进一步就可以对比加载前和加载后的window对象属性，从而精确的返回对应的模块对象。"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["使用当前",(0,s.jsx)(e.strong,{children:"jsRuntime"}),"实例的",(0,s.jsx)(e.strong,{children:"loadJS"}),"方法加载一个unpkg的CDN模块。"]}),"\n",(0,s.jsx)(e.p,{children:"如下图所示："}),"\n",(0,s.jsx)(e.p,{children:"加载完成后，会在代码执行容器中挂载一个脚本，与静态资源加载相同，动态的挂载脚本能够将模块注入到对应的容器当中，从而在上下文当中调用。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"调用方式",children:["调用方式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#调用方式",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在这里的话，先使用",(0,s.jsx)(e.strong,{children:"useMount"}),"简单模拟调用方式，后续还是需要做可视化的界面配置面板的方式来引入。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { useMount } from "ahooks";\nimport { jsRuntime } from \'@huos/core\'\n\nexport interface EditoRootWrapperProps {\n  // 本地storageKey, 用户缓存当前\n  children?: React.ReactNode;\n}\n\nexport const EditoRootWrapper: React.FC<EditoRootWrapperProps> = (props) => {\n\n  // 生命周期实现\n  useMount(() => {\n  // mock实现\n    jsRuntime.loadJS("https://www.unpkg.com/dayjs@1.11.9/dayjs.min.js")\n  })\n\n  return (\n    <RootEditor\n      resolver={{ ...DefaultMaterials, ...ArcoMaterials }}\n      onRender={RenderNodeWrapper}\n    >\n      {props.children}\n    </RootEditor>\n  );\n};\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"difference",children:["difference",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#difference",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["通过",(0,s.jsx)(e.strong,{children:"difference"}),"的方式可以精确的找到当前加载的函数，方法就是在加载模块链接之前先把当前",(0,s.jsx)(e.strong,{children:"window keys"}),"保存，模块加载完成之再将当前的",(0,s.jsx)(e.strong,{children:"window keys"}),"进行比对，",(0,s.jsx)(e.strong,{children:"difference"}),"后的结果就是当前模块挂载到",(0,s.jsx)(e.strong,{children:"window"}),"上的属性。"]}),"\n",(0,s.jsx)(e.p,{children:"如下图所示"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["使用 ",(0,s.jsx)(e.strong,{children:"Object.keys(contentWindow)"})," 先保存当前的",(0,s.jsx)(e.strong,{children:"keys"}),"，当",(0,s.jsx)(e.strong,{children:"script"}),"脚本",(0,s.jsx)(e.strong,{children:"onload"}),"后，在通过 ",(0,s.jsx)(e.strong,{children:"Object.keys(contentWindow)"})," 获取最新的keys，使用",(0,s.jsx)(e.strong,{children:"lodash"}),"的",(0,s.jsx)(e.strong,{children:"difference"}),"方法就能快速的得到两个数组之间的",(0,s.jsx)(e.strong,{children:"差异key"}),"，从而来精准的获取加载的模块。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-diff",children:'public async loadJS(url: string) {\n    this.onGasketInstance();\n\n    const contentWindow = this.iframe.contentWindow!;\n    const contentDocument = this.iframe.contentDocument!;\n\n    return new Promise((resolve, reject) => {\n      // 先查一遍，看看是否存在已经加载的script\n      const matchingElements = contentDocument.querySelectorAll(\n        `script[src="${url}"]`\n      );\n\n      if (matchingElements.length > 0) {\n        resolve(true);\n      } else {\n+        const saveWindowKeys = Object.keys(contentWindow)\n        const script = contentDocument.createElement("script");\n\n        script.setAttribute("src", url);\n\n        // 执行过程中发生错误\n        contentWindow.addEventListener("error", (evt) => {\n          resolve(false);\n        });\n\n        script.onload = () => {\n          console.log("加载成功: ", url);\n+          const curWindowKeys = Object.keys(contentWindow)\n+          const diffKey = difference(curWindowKeys, saveWindowKeys)\n+          console.log(curWindowKeys.length, saveWindowKeys.length, diffKey, \'比对window的长度\')\n+          resolve(true);\n        };\n\n        script.onerror = () => {\n          resolve(false);\n        };\n\n        // 添加到 iframe 里面\n        this.iframe.contentDocument!.head.appendChild(script);\n      }\n    });\n  }\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:["总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["本章节的内容依旧不涉及服务端的交互，使用的技术都是在完善之前",(0,s.jsx)(e.strong,{children:"BrowserRuntimeVM"}),"的能力。通过这些功能，我们能够实现资源脚本的加载以及编辑器动态模块的能力，也可以通过加载静态资源来改变页面的视图，也可以在属性绑定表达式中使用来自 ",(0,s.jsx)(e.code,{children:"www.unpkg.com"})," 的模块包，以增强当前的功能。在接下来的教程当中，会基于当前的功能来完善应用的生命周期、逻辑编排器的能力。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"本章节随着服务端的更新会进行同步的更新。"}),"\n"]})]})}function m(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(x,{...n})}):x(n)}let u=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F36.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E8%BF%9C%E7%A8%8B%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"实现过程",id:"实现过程",depth:2},{text:"静态资源加载实现",id:"静态资源加载实现",depth:2},{text:"创建列表",id:"创建列表",depth:3},{text:"createJsScript",id:"createjsscript",depth:3},{text:"createCssLink",id:"createcsslink",depth:3},{text:"useDynamicHeadInsertion",id:"usedynamicheadinsertion",depth:3},{text:"使用",id:"使用",depth:3},{text:"动态模块加载",id:"动态模块加载",depth:2},{text:"loadJS",id:"loadjs",depth:3},{text:"调用方式",id:"调用方式",depth:3},{text:"difference",id:"difference",depth:3},{text:"总结",id:"总结",depth:2}],title:"36.客户端实战：远程资源加载应用实现",headingTitle:"36.客户端实战：远程资源加载应用实现",frontmatter:{}}}}]);