"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["31507"],{359272:function(n,e,r){r.r(e),r.d(e,{default:()=>t});var i=r(552676),s=r(740453);let c=r.p+"static/image/b4699101467e524c32a853f0f5aa0214.849f46de.webp",d=r.p+"static/image/0f1a969811aa915312a8af7d7e0cf3e0.25cf20ae.webp";function o(n){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",h2:"h2",ol:"ol",li:"li",img:"img",strong:"strong",ul:"ul",blockquote:"blockquote",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"2-基础篇作用域变量的可访问性原理",children:["2 基础篇｜作用域：变量的可访问性原理",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-基础篇作用域变量的可访问性原理",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"早年间有一种说法叫做 “JavaScript 没有作用域”，当然这是一种夸张的讲法，其表达的意思应该是：JavaScript 没有块级作用域。"}),"\n",(0,i.jsx)(e.p,{children:"比如下面这样的代码是可以工作的："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'{ var foo = "Hello"; }\nconsole.log(foo) // "Hello"\n'})}),"\n",(0,i.jsx)(e.p,{children:"还有这样的代码："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"for (var i = 0; i < 10; i++);\nconsole.log(i) // 10\n"})}),"\n",(0,i.jsx)(e.p,{children:"大括号和 for 语句并没有束缚住变量的作用范围。"}),"\n",(0,i.jsx)(e.p,{children:"在现代的 JavaScript 执行环境中，基本已经没有了这样的困扰，“没有块级作用域”也不再适用于 JavaScript。"}),"\n",(0,i.jsxs)(e.h2,{id:"作用域",children:["作用域",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#作用域",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"作用域，或者称之为“上下文”，是变量被承载的容器。"}),"\n",(0,i.jsxs)(e.p,{children:["在最新的 ECMAScript 规范中，定义了一个叫做",(0,i.jsx)(e.code,{children:"环境记录（Environment Record）"}),"的抽象概念，可理解为就是作用域。从 ",(0,i.jsx)(e.code,{children:"Record"})," 这种词我们就能联想到它是用来记录变量的。这里的变量不仅仅包括 var 声明的变量，还包括 ",(0,i.jsx)(e.code,{children:"const"}),"、",(0,i.jsx)(e.code,{children:"let"}),"、",(0,i.jsx)(e.code,{children:"class"}),"、",(0,i.jsx)(e.code,{children:"function"}),"、",(0,i.jsx)(e.code,{children:"with"}),"、",(0,i.jsx)(e.code,{children:"catch"})," 等声明的变量或参数。一旦这些语句被执行，那么就会创建一个新的 Environment Record。"]}),"\n",(0,i.jsx)(e.p,{children:"Environment Record 是抽象的（abstract），它有三个子类，分别是："}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"Declarative Environment Record"}),"，包括 var、const、let、class、module、function、catch；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"Object Environment Record"}),"，包括 with；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"Global Environment Record"}),"，浏览器中指 globalThis，Node.js 中指 global。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"其中，Declarative Environment Record 还有两个子类："}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"Function Environment Record"})," —— function；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"Module Environment Record"})," —— module。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"因此，目前官方规范中定义的这几种作用域的关系是："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["每一个 Environment Record 有一个 ",(0,i.jsx)(e.code,{children:"OuterEnv"})," 属性，指向另一个 Environment Record 实例。从这一点上我们就能看出来，",(0,i.jsx)(e.strong,{children:"作用域是有上下层级关系的，所有作用域应该可以组成一个树形结构"}),"，这和我们的认知是一致的。我举一个例子："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"var foo = 1; // Env3\n\nfunction onload() {\n    var bar = 2; // Env2\n    return function callback() {\n        var baz = 3; // Env1\n        return foo + bar + baz;\n    };\n}\n\n"})}),"\n",(0,i.jsxs)(e.p,{children:["在上面这段代码中，我们至少定义了三个作用域：Env1、Env2 和 Env3。当需要计算 ",(0,i.jsx)(e.code,{children:"foo + bar + baz"})," 的时候，需要依次",(0,i.jsx)(e.code,{children:"从下向上"}),"搜索作用域内是否有对应的变量声明。"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"首先，在 Env1 中查找 foo，不存在，向上在 Env2 中查找，也不存在，继续向上，直到在 Env3 中找到，取其值；"}),"\n",(0,i.jsx)(e.li,{children:"其次，在 Env1 中查找 bar，不存在，向上在 Env2 中找到，取其值；"}),"\n",(0,i.jsx)(e.li,{children:"最后，在 Env1 中找到 baz，取其值。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["由此可见，这三个作用域的关系：Env1 的 OuterEnv 是 Env2，Env2 的 OuterEnv 是 Env3，这一条关系链称为",(0,i.jsx)(e.code,{children:"作用域链"}),"。"]}),"\n",(0,i.jsxs)(e.p,{children:["不同类型的 Environment Record，其 ",(0,i.jsx)(e.code,{children:"OuterEnv"})," 类型是受限的。比如，",(0,i.jsx)(e.strong,{children:"Global Environment Record"})," 的 OuterEnv 总是 ",(0,i.jsx)(e.code,{children:"null"}),"，而 ",(0,i.jsx)(e.strong,{children:"Module Environment Record"})," 的 OuterEnv 总是 ",(0,i.jsx)(e.strong,{children:"Global Environment Record"}),"。"]}),"\n",(0,i.jsx)(e.p,{children:"前者容易理解，毕竟树形结构总有一个根结点。至于后者，我们可以看下面这个例子："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'// index.js\nvar foo = 1;\n\nfunction onload() {\n    var bar = 2;\n    import("./dynamic.js");\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"// dynamic.js\nvar baz = 3;\nconsole.log(foo + bar + baz);\n"})}),"\n",(0,i.jsxs)(e.p,{children:["dynamic.js 所在的作用域，是一个 ",(0,i.jsx)(e.strong,{children:"Module Environment Record"}),"，由于其 ",(0,i.jsx)(e.code,{children:"OuterEnv"})," 是 ",(0,i.jsx)(e.strong,{children:"Global Environment Record"}),"，因此它可以访问到 foo 变量，但是访问不到 bar 变量，于是在 console.log 那一行就会报错。"]}),"\n",(0,i.jsxs)(e.p,{children:["除了主动声明的变量，我们还经常会使用到 ",(0,i.jsx)(e.code,{children:"this"}),"。"]}),"\n",(0,i.jsxs)(e.h2,{id:"this",children:["this",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#this",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"this"})," 通常与对象相关，在对象上调用一个函数，这个函数内部的 ",(0,i.jsx)(e.code,{children:"this"})," 通常就指向这个对象："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"const dog = {\n    name: 'spark',\n    bark: function() {\n        return this.name;\n    },\n};\n\nconsole.log(dog.bark()); // \"spark\"\n"})}),"\n",(0,i.jsx)(e.p,{children:"那 this 具体是如何工作的呢？这一节我们就来理清一下。"}),"\n",(0,i.jsxs)(e.p,{children:["ECMAScript 规定，在 Environment Record 的抽象定义上，有一个函数叫做 ",(0,i.jsx)(e.code,{children:"HasThisBinding()"}),"，不同的子类对此函数的实现不同。"]}),"\n",(0,i.jsxs)(e.p,{children:["当你的代码在执行过程中遇到 ",(0,i.jsx)(e.code,{children:"this"})," 的时候，具体的计算规则是这样的："]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["设 ",(0,i.jsx)(e.strong,{children:"env"})," 等于当前的 ",(0,i.jsx)(e.code,{children:"Environment Record"}),"；"]}),"\n",(0,i.jsxs)(e.li,{children:["设 ",(0,i.jsx)(e.strong,{children:"exist"})," 等于 ",(0,i.jsx)(e.code,{children:"env.HasThisBinding()"})," 返回值；"]}),"\n",(0,i.jsxs)(e.li,{children:["如果 ",(0,i.jsx)(e.strong,{children:"exist"})," 为 true，则返回 ",(0,i.jsx)(e.code,{children:"env.GetThisBinding()"}),"，终止；"]}),"\n",(0,i.jsxs)(e.li,{children:["赋值 ",(0,i.jsx)(e.strong,{children:"env"})," 等于 ",(0,i.jsx)(e.code,{children:"env.OuterEnv"}),"，跳到步骤 2 继续执行。"]}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"GetThisBinding() 下面会提到。"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["可见这个过程就是一个向上递归遍历的过程，哪一级的 Environment Record 有 ",(0,i.jsx)(e.code,{children:"ThisBinding"}),"，就返回它，非常类似于",(0,i.jsx)(e.code,{children:"作用域链"}),"。"]}),"\n",(0,i.jsxs)(e.p,{children:["你可能担心这个的算法不会死循环或者抛异常么？不会，因为 Environment Record 结构的最顶层是一个 Global Environment Record，它一定有 ",(0,i.jsx)(e.code,{children:"ThisBinding"}),"，下面会讲到。"]}),"\n",(0,i.jsxs)(e.p,{children:["我们来看看各种各样的 Environment Record 的 ",(0,i.jsx)(e.code,{children:"ThisBinding"})," 是怎样的。"]}),"\n",(0,i.jsxs)(e.h3,{id:"declarative-environment-record",children:["Declarative Environment Record",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#declarative-environment-record",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Declarative Environment Record 的 ",(0,i.jsx)(e.code,{children:"HasThisBinding()"})," 始终返回 false，因此像下面这样的代码，this 其实指向的上一层 Environment Record，即 ",(0,i.jsx)(e.code,{children:"globalThis"})," 对象："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"<script>\n{\n    console.log(this);\n}\n<\/script>\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"function-environment-record",children:["Function Environment Record",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#function-environment-record",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Function Environment Record 是 Declarative Environment Record 的子类，并设计有额外的属性或函数，比如 ",(0,i.jsx)(e.code,{children:"ThisValue"}),"、",(0,i.jsx)(e.code,{children:"BindThisValue(V)"}),"、",(0,i.jsx)(e.code,{children:"GetThisBinding()"}),"。"]}),"\n",(0,i.jsxs)(e.p,{children:["我们还是关注 ",(0,i.jsx)(e.code,{children:"HasThisBinding()"})," 的行为。"]}),"\n",(0,i.jsxs)(e.p,{children:["ECMAScript 规定，如果函数是箭头函数（",(0,i.jsx)(e.code,{children:"=>"}),"），那么",(0,i.jsx)(e.code,{children:"HasThisBinding()"})," 返回 false，否则返回 true。从这一点上就能看到，ES6 引入箭头函数这一语法后，我们就具备了锁定 this 的能力，试看下面这个例子："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"<script>\n    const person = {\n        say: () => {\n            console.log(this);\n        }\n    };\n\n    console.log(person.say()); // window\n<\/script>\n"})}),"\n",(0,i.jsxs)(e.p,{children:["虽然函数 ",(0,i.jsx)(e.code,{children:"say"})," 是在 ",(0,i.jsx)(e.code,{children:"person"})," 对象上调用的，但是其 this 并不指向 ",(0,i.jsx)(e.code,{children:"person"}),"。即便使用 ",(0,i.jsx)(e.code,{children:"Function.prototype.bind/call/apply"})," 函数尝试修改 this 也不行："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'person.say.call("Hello"); // window\nperson.say.apply("Hello", []); // window\nperson.say.bind("Hello")(); // window\n'})}),"\n",(0,i.jsx)(e.p,{children:"关于 Function Environment Record 的其他属性和函数，我们在以后的章节中还会讲到，现在来看 Global Environment Record。"}),"\n",(0,i.jsxs)(e.h3,{id:"global-environment-record",children:["Global Environment Record",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#global-environment-record",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Global Environment Record 也有自己专属的属性和函数，如 ",(0,i.jsx)(e.code,{children:"GlobalThisValue"}),"、",(0,i.jsx)(e.code,{children:"GetThisBinding()"}),"。它的 ",(0,i.jsx)(e.code,{children:"HasThisBinding()"})," 始终返回 true，因此在全局环境下，this 是有值的，浏览器下是 ",(0,i.jsx)(e.code,{children:"window/globalThis"}),"，Node.js 环境下是 ",(0,i.jsx)(e.code,{children:"global"}),"："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"<script>\nconsole.log(this); // window\n<\/script>\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sh",children:'$ node -e "console.log(this)"  # global\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"module-environment-record",children:["Module Environment Record",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#module-environment-record",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["最后来看 Module Environment Record，它也是 Declarative Environment Record 的子类，提供了 ",(0,i.jsx)(e.code,{children:"GetThisBinding()"})," 函数。"]}),"\n",(0,i.jsxs)(e.p,{children:["Module Environment Record 的 ",(0,i.jsx)(e.code,{children:"HasThisBinding()"})," 始终返回 true，但是 ",(0,i.jsx)(e.code,{children:"GetThisBinding()"})," 却始终返回 undefined，这样的效果就是：",(0,i.jsx)(e.strong,{children:"在 ES Modules 里面的全局 this 始终是 undefined"}),"。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'// index.js\nimport("./lib.js");\n\n// lib.js\nconsole.log(this); // undefined\n'})}),"\n",(0,i.jsx)(e.p,{children:"这样的设计能够避免一些潜在的歧义，比如下面这段代码在顶层上下文中运行："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"function foo() {\n    console.log(this);\n}\n\nfoo();\n"})}),"\n",(0,i.jsxs)(e.p,{children:["但是如果不是 ES Modules，那么 this 指向将取决于是否是 ",(0,i.jsx)(e.code,{children:"strict"})," 模式："]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["strict 模式下，this 为 ",(0,i.jsx)(e.code,{children:"undefined"}),"；"]}),"\n",(0,i.jsxs)(e.li,{children:["非 strict 模式下， this 为 ",(0,i.jsx)(e.code,{children:"window/globalThis"}),"。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"ES Modules 环境避免了这种歧义，this 始终是 undefined，不会意外地修改到全局的数据。"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["我们忽略了对 ",(0,i.jsx)(e.code,{children:"Object Environment Record"})," 的讨论，因为它代表的 ",(0,i.jsx)(e.code,{children:"with"})," 是不建议使用的。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["我们总结一下可以发现：函数 ",(0,i.jsx)(e.code,{children:"GetThisBinding()"})," 并非像 ",(0,i.jsx)(e.code,{children:"HasThisBinding()"})," 定义在 Environment Record 中，而是被 Global Environment Record、Function Environment Record 和 Module Environment Record 各种子类分别实现的，也只有它们才有 this。"]}),"\n",(0,i.jsx)(e.p,{children:"this 可以任意访问，最多也就是 undefined 而已，但普通变量则不一定，声明普通变量有着不一样的规则。"}),"\n",(0,i.jsxs)(e.h2,{id:"变量提升与-tdz",children:["变量提升与 TDZ",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#变量提升与-tdz",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["在 ES6 之前，我们只能用 ",(0,i.jsx)(e.code,{children:"var"})," 来声明变量，我还记得有一条不成文的规矩是：",(0,i.jsx)(e.strong,{children:"应该把所有 var 语句提到当前作用域的最前面"}),"，后来被 ",(0,i.jsx)(e.code,{children:"ESLint"})," 收录成 ",(0,i.jsx)(e.a,{href:"https://eslint.org/docs/latest/rules/vars-on-top",target:"_blank",rel:"noopener noreferrer",children:"vars-on-top"})," 规则。之所以要这样做，是因为 var 声明的变量具有提升的效果，也就是我们可以在声明之前访问到它，只不过值肯定是 ",(0,i.jsx)(e.strong,{children:"undefined"}),"。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'console.log(foo); // undefined\nvar foo = "hello";\n'})}),"\n",(0,i.jsx)(e.p,{children:"把 var 声明提到最上面的初衷是想让开发者对上下文数据环境有明确的预期，不会不小心访问到未经过初始化的变量，导致带来意外的错误。"}),"\n",(0,i.jsx)(e.p,{children:"var 声明的变量也确实呼应了前面对于 “JavaScript 没有块级作用域”的特征，一个大括号根本无法阻止 var 的作用范围："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"{\n    var foo = 100;\n}\n\nconsole.log(foo); // 100\n"})}),"\n",(0,i.jsxs)(e.p,{children:["甚至是一个 ",(0,i.jsx)(e.code,{children:"try...catch"})," 语句："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"try {\n    var foo = 8;\n    throw Error();\n} catch {\n    var bar = 9;\n}\n\nconsole.log(foo, bar); // 8 9\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"for"})," 语句亦如此："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"for (var i = 0; i< 5; ++i);\nconsole.log(i); // 5\n"})}),"\n",(0,i.jsxs)(e.p,{children:["所以很容易一个不小心就会造成变量的冲突。为了解决这个问题，ES6 引入了 ",(0,i.jsx)(e.code,{children:"let"})," 和 ",(0,i.jsx)(e.code,{children:"const"})," 关键字来声明具有块级作用域的变量，它们的区别就是一个的值可变，一个不可变。"]}),"\n",(0,i.jsx)(e.p,{children:"我们以 let 为例："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"{\n    let foo = 100;\n}\nconsole.log(foo); // ❌ Uncaught ReferenceError: foo is not defined\n"})}),"\n",(0,i.jsxs)(e.p,{children:["类似的，在 ",(0,i.jsx)(e.code,{children:"try...catch"})," 和 ",(0,i.jsx)(e.code,{children:"for"})," 语句中声明变量，外边均不能访问到，也杜绝了冲突的可能。"]}),"\n",(0,i.jsx)(e.p,{children:"如果在 let 声明之前使用变量，则会触发未初始化异常："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"console.log(foo); // ❌ Uncaught ReferenceError: Cannot access 'foo' before initialization\nlet foo = 100;\n"})}),"\n",(0,i.jsxs)(e.p,{children:["这里是一个面试常见的考点，只要你说出 ",(0,i.jsx)(e.code,{children:"TDZ"})," 一词，基本上就算合格了。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"TDZ"})," 全称 Temporal Dead Zone，即",(0,i.jsx)(e.code,{children:"暂行性死区"}),"。这个词语是一种约定俗成的说法，因为你",(0,i.jsx)(e.strong,{children:"在 ECMAScript 的官方规范文档中根本找不到对 TDZ 的表述"}),"。"]}),"\n",(0,i.jsxs)(e.p,{children:["要理解 TDZ，我们可以从 ECMAScript 规范中对 ",(0,i.jsx)(e.code,{children:"var"})," 和 ",(0,i.jsx)(e.code,{children:"let/const"})," 的定义来一窥究竟："]}),"\n",(0,i.jsxs)(e.table,{children:["\n",(0,i.jsxs)(e.thead,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.th,{children:"var"}),"\n",(0,i.jsx)(e.th,{children:"let/const"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.tbody,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsxs)(e.td,{children:["A var statement declares variables that are scoped to the running execution context's VariableEnvironment. ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"Var variables are created when their containing Environment Record is instantiated and are initialized to undefined when created."})})," Within the scope of any VariableEnvironment a common BindingIdentifier may appear in more than one VariableDeclaration but those declarations collectively define only one variable. A variable defined by a VariableDeclaration with an Initializer is assigned the value of its Initializer's AssignmentExpression when the VariableDeclaration is executed, not when the variable is created."]}),"\n",(0,i.jsxs)(e.td,{children:["let and const declarations define variables that are scoped to the running execution context's LexicalEnvironment. ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"The variables are created when their containing Environment Record is instantiated but may not be accessed in any way until the variable's LexicalBinding is evaluated."})})," A variable defined by a LexicalBinding with an Initializer is assigned the value of its Initializer's AssignmentExpression when the LexicalBinding is evaluated, not when the variable is created. If a LexicalBinding in a let declaration does not have an Initializer the variable is assigned the value undefined when the LexicalBinding is evaluated."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["它们之间最关键的区别体现在第二句话上面。",(0,i.jsxs)(e.strong,{children:["var 声明的变量在 Environment Record 初始化的时候就被赋值为 undefined，而 let/const 是直到词法绑定（",(0,i.jsx)(e.code,{children:"LexicalBinding"}),"）被执行才可以被访问"]}),"。"]}),"\n",(0,i.jsx)(e.p,{children:"什么是词法绑定？我们可以简单地理解为就是 let/const 所在的那一句代码。不到这一句，都不可以访问变量，这也解释了为什么在 let/const 声明之前不可以使用变量的现象。"}),"\n",(0,i.jsxs)(e.p,{children:["因此，虽然规范没有 TDZ 这个术语，但是我们可以给它做这样的定义：",(0,i.jsx)(e.code,{children:"TDZ 就是作用域初始化到执行 let/const 语句之间的这段区域"}),"。总之一句话：不可以在声明之前使用。我们应该始终开启 ESLint 的 ",(0,i.jsx)(e.a,{href:"https://eslint.org/docs/latest/rules/no-use-before-define",target:"_blank",rel:"noopener noreferrer",children:"no-use-before-define"})," 规则。"]}),"\n",(0,i.jsxs)(e.h2,{id:"小结",children:["小结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["作用域与变量声明是 JavaScript 乃至任何编程语言的基础。JavaScript 相对更特殊一些，初期它不具备块级作用域的能力，直到 ES6 引入了 ",(0,i.jsx)(e.code,{children:"let/const"}),"，但是也有了业界常用的 ",(0,i.jsx)(e.code,{children:"TDZ"})," 概念。"]}),"\n",(0,i.jsxs)(e.p,{children:["在如今的 ECMAScript 规范中，以 ",(0,i.jsx)(e.code,{children:"Environment Record"})," 术语来代指作用域或者上下文的概念，并派生出了不同的子类，不同子类对 ",(0,i.jsx)(e.code,{children:"this"})," 的支持不尽相同，有的压根不支持（如 Declarative Environment Record），有的算支持但一直是 undefined（如 Module Environment Record），有的则还需要考虑额外的条件（如 Function Environment Record），有的则无条件支持（如 Global Environment Record）。"]}),"\n",(0,i.jsxs)(e.p,{children:["无论哪种 Environment Record，都有 ",(0,i.jsx)(e.code,{children:"OuterEnv"})," 属性，不过不同种类也不同，比如 Module Environment Record 的 ",(0,i.jsx)(e.code,{children:"OuterEnv"})," 一直是 Global Environment Record；而 Global Environment Record 的 ",(0,i.jsx)(e.code,{children:"OuterEnv"})," 必定是 null。所有的 Environment Record 则组成了一个",(0,i.jsx)(e.strong,{children:"树形结构"}),"。"]}),"\n",(0,i.jsxs)(e.p,{children:["我没有专门提",(0,i.jsx)(e.code,{children:"闭包"}),"的概念，因为它并没有什么特殊的，像下面这个例子一样，animalFactory 创建的 Animal 函数中（",(0,i.jsx)(e.strong,{children:"Env1"}),"）可以自由访问 animalFactory 的作用域（",(0,i.jsx)(e.strong,{children:"Env2"}),"），而 ",(0,i.jsx)(e.strong,{children:"Env2"})," 再也无法通过其他方式访问得到，相当于是“封闭的”，但又是对 Animal 开放的。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function animalFactory(home) {\n    // Env2\n    return function Animal() {\n        // Env1\n        this.address = home;\n    }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"学习完变量的声明，下一节我们来关注变量的类型。"})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}let t=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["JavaScript%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6%2F2%20%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BD%9C%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%9A%E5%8F%98%E9%87%8F%E7%9A%84%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E5%8E%9F%E7%90%86.md"]={toc:[{text:"作用域",id:"作用域",depth:2},{text:"this",id:"this",depth:2},{text:"Declarative Environment Record",id:"declarative-environment-record",depth:3},{text:"Function Environment Record",id:"function-environment-record",depth:3},{text:"Global Environment Record",id:"global-environment-record",depth:3},{text:"Module Environment Record",id:"module-environment-record",depth:3},{text:"变量提升与 TDZ",id:"变量提升与-tdz",depth:2},{text:"小结",id:"小结",depth:2}],title:"2 基础篇｜作用域：变量的可访问性原理",headingTitle:"2 基础篇｜作用域：变量的可访问性原理",frontmatter:{}}}}]);