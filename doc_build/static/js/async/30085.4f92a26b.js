"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["30085"],{298602:function(e,n,r){e.exports=r.p+"static/image/13e6d7d3d88d3a02b2685cb07b6b7e24.e6db0daa.webp"},235675:function(e,n,r){e.exports=r.p+"static/image/3dcfb4a62ca4e8563f5b80ceb485701c.0906c9f2.webp"},702438:function(e,n,r){e.exports=r.p+"static/image/78b36476f1c058a881b3139595126208.ed989b79.webp"},541471:function(e,n,r){e.exports=r.p+"static/image/9a97688da75505387bc1bef073b8d748.057104a7.webp"},513165:function(e,n,r){e.exports=r.p+"static/image/c94c4300f29d4cf45773dd3638070e79.8e95ae60.webp"},384004:function(e,n,r){e.exports=r.p+"static/image/e867fd8a92c2010324490ed71e13a106.2d3ee5fc.webp"},131066:function(e,n,r){r.r(n),r.d(n,{default:()=>k});var s=r(552676),a=r(740453);let i=r.p+"static/image/9b11e64d48b31ee4648b76316ec661d7.044af33b.webp",c=r.p+"static/image/0279fb43649eb3e7f0be674fab646baa.51cacaf7.webp",d=r.p+"static/image/afd75c8a0c2962a107e52affbb4d822a.b6336522.webp",t=r.p+"static/image/72719a3e2312e05dd07727b60fa93ab4.2da8195b.webp",l=r.p+"static/image/eeb91d0dff051c62e29bcf7708252807.09364ef1.webp";var p=r(298602),o=r(384004),h=r(702438),j=r(513165);let x=r.p+"static/image/748256cd5d05af3dee67fbb418ba2565.ea2cc083.webp",m=r.p+"static/image/8440c2feea0cafb7b7f621a6b4cb3bcd.25535024.webp",b=r.p+"static/image/11992d16ea062a44dd7de1ebb70be37c.95253909.webp";var u=r(235675),g=r(541471);function f(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",blockquote:"blockquote",h3:"h3",pre:"pre",code:"code",img:"img",strong:"strong"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"14--支线篇-打包生成第一个桌面应用骄傲自豪",children:["14.\uD83D\uDC3C  支线篇-打包生成第一个桌面应用（骄傲自豪）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14--支线篇-打包生成第一个桌面应用骄傲自豪",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["许多小伙伴们通过阅读 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/6950646725295996940/section/6961586491285831720",target:"_blank",rel:"noopener noreferrer",children:"环境篇-动手搭建我们的简历平台"}),"章节，将 Electron + React 搭建起来后，还没开始写几行代码，就迫不及待想打包成桌面应用，毕竟搞出自己第一个桌面应用，是一件很骄傲自豪的事情！！！为此，此章节将以 ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-11/",target:"_blank",rel:"noopener noreferrer",children:"chapter-11"}),"分支为主，新增支线代码 ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-14-app",target:"_blank",rel:"noopener noreferrer",children:"chapter-14-app"}),"进行简易版的打包构建成桌面端应用。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["⚠️ 请注意此章节为支线任务，非主线任务。只是为了快速圆大家一个桌面应用梦想。后续的章节，仍然以 ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-11/",target:"_blank",rel:"noopener noreferrer",children:"chapter-11"}),"分支进行开发。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["强烈在看章节内容的同时，结合仓库代码进行学习。\uD83D\uDC49 此项目代码在: ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-14-app",target:"_blank",rel:"noopener noreferrer",children:"chapter-14-app"})]}),"\n",(0,s.jsxs)(n.h2,{id:"electron-和-react-的关系",children:["electron 和 react 的关系",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#electron-和-react-的关系",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们需要先搞清楚一下，electron 跟 react 的关系。"}),"\n",(0,s.jsxs)(n.h3,{id:"本地开发",children:["本地开发",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本地开发",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"当我们在本地开发时，运行的脚本命令是："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"npm run start:main // 运行主进程\nnpm run start:render // 运行渲染进程\n"})}),"\n",(0,s.jsxs)(n.p,{children:["react 通过 ",(0,s.jsx)(n.code,{children:"webpack-dev-server"})," 起了一个本地服务，我们通过 ",(0,s.jsx)(n.code,{children:"http://127.0.0.1:7001"})," 就能访问我们的站点。Electron 是通过 BrowserWindow 创建了一个浏览器窗口，此窗口通过 loadURL 加载了我们的地址（你可以理解成 webview 形式），从而显示我们的网页。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 创建浏览器窗口\nconst mainWindow = new BrowserWindow({\n  width: 1200,\n  height: 800,\n  webPreferences: {\n    devTools: true,\n    nodeIntegration: true,\n  },\n});\n\nif (isDev()) {\n  // 开发环境\n  mainWindow.loadURL(`http://127.0.0.1:7001`);\n} else {\n  // 生产环境\n  mainWindow.loadURL(`file://${path.join(__dirname, '../dist/index.html')}`);\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"打包构建",children:["打包构建",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#打包构建",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"当我们本地开发完成之后，需要打包上线，需要跑什么命令？不要想太复杂。它们也是分开打包的"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"npm run build:main // 打包主进程（对 app/main/electron.ts进行打包 ）\nnpm run build:render // 打包渲染进程（也就是对 React 进行打包）\n"})}),"\n",(0,s.jsx)(n.p,{children:"打包之后，我们 dist 目录就会存在相应的资源文件。如 index.html、electron.js 等。"}),"\n",(0,s.jsxs)(n.h3,{id:"关系",children:["关系",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#关系",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"提问：抛开 Electron，我们常规的 React 项目，在打包之后，如何运行？"}),"\n",(0,s.jsx)(n.p,{children:"我们是通过点击 dist 下的 index.html 就能在浏览器页面中打开看效果（如果你发现没效果，请确保是以相对路径加载资源文件）；但如果结合了 Electron，那么此时点击 dist 下的 index.html，在浏览器中打开，一般都会出错的。"}),"\n",(0,s.jsxs)(n.p,{children:["如何理解？Electron 它内置了 Chromium 和 Node，试想一下，你能在 Chrome 浏览器的控制台中输出 ",(0,s.jsx)(n.code,{children:"process"})," 吗？并不能，它会报错。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["但如果你是通过 Electron 的 BrowserWindow 创建的浏览器窗口，去打印 ",(0,s.jsx)(n.code,{children:"process"}),"，就能显示内容"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["这也是为什么 Electron 项目中 dist 下的 index.html 不能直接在 Chrome 浏览器运行，因为你的代码，可能用到了 Electron API、Node API，Chrome 浏览器无法识别这是什么东西。",(0,s.jsx)(n.strong,{children:"只有通过 Electron 生成的浏览器窗口，LoadURL 加载此页面，才能正常运行。"})]}),"\n",(0,s.jsx)(n.p,{children:"通过前面的代码可以看到，在生产环境下，我们 LoadURL 的是 dist 下的 index.html"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"if (isDev()) {\n  // 开发环境\n  mainWindow.loadURL(`http://127.0.0.1:7001`);\n} else {\n  // 生产环境\n  mainWindow.loadURL(`file://${path.join(__dirname, '../dist/index.html')}`);\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"打包构建-1",children:["打包构建",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#打包构建-1",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["上面了解了 Electron 和 React 的关系之后，接下来我们开始打包构建，此次项目中，将以 ",(0,s.jsx)(n.a,{href:"https://www.electron.build/",target:"_blank",rel:"noopener noreferrer",children:"electron-builder"})," 进行应用打包。请记住，我们以 ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-11/",target:"_blank",rel:"noopener noreferrer",children:"chapter-11"})," 分支代码进行打包，如果你是基于其他分支，请确保 webpack 的配置是正确的。"]}),"\n",(0,s.jsxs)(n.h3,{id:"第一步打包-electron-和-react",children:["第一步：打包 Electron 和 React",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第一步打包-electron-和-react",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 webpack 文件夹下，新增 ",(0,s.jsx)(n.code,{children:"webpack.main.prod.js"}),"，表示主进程在生产环境下的打包配置。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// webpack/webpack.main.prod.js\nconst path = require('path');\nconst baseConfig = require('./webpack.base.js');\nconst webpackMerge = require('webpack-merge');\n\nconst prodConfig = {\n  entry: path.resolve(__dirname, '../app/main/electron.ts'),\n  target: 'electron-main',\n  output: {\n    filename: 'electron.js',\n    path: path.resolve(__dirname, '../dist'),\n  },\n  devtool: 'inline-source-map',\n  // \uD83D\uDC47 这里改成生产环境\n  mode: 'production',\n};\n\nmodule.exports = webpackMerge.merge(baseConfig, prodConfig);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["新增 ",(0,s.jsx)(n.code,{children:"webpack.render.prod.js"}),"，表示渲染进程在生产环境下的打包配置。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const path = require('path');\nconst webpackMerge = require('webpack-merge');\nconst baseConfig = require('./webpack.base.js');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nconst prodConfig = {\n  // \uD83D\uDC47 这里改成生产环境\n  mode: 'production',\n  entry: {\n    index: path.resolve(__dirname, '../app/renderer/app.tsx'),\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, '../dist'),\n  },\n  target: 'electron-renderer',\n  devtool: 'inline-source-map',\n  devServer: {\n    contentBase: path.join(__dirname, '../dist'),\n    compress: true,\n    host: '127.0.0.1', // webpack-dev-server启动时要指定ip，不能直接通过localhost启动，不指定会报错\n    port: 7001, // 启动端口为 7001 的服务\n    hot: true,\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader', 'postcss-loader'],\n      },\n      {\n        test: /\\.less$/,\n        exclude: /node_modules/,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              modules: {\n                localIdentName: '[name]__[local]__[hash:base64:5]',\n              },\n            },\n          },\n          'postcss-loader',\n          'less-loader',\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: path.resolve(__dirname, '../app/renderer/index.html'),\n      filename: path.resolve(__dirname, '../dist/index.html'),\n      chunks: ['index'],\n    }),\n  ],\n};\n\nmodule.exports = webpackMerge.merge(baseConfig, prodConfig);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["紧接着，我们前往 ",(0,s.jsx)(n.code,{children:"package.json"})," 中，添加打包命令"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  // 本地开发\n  "start:main": "webpack --config ./webpack/webpack.main.dev.js && electron ./dist/electron.js",\n  "start:render": "webpack-dev-server --config ./webpack/webpack.render.dev.js",\n  // \uD83D\uDC47 新增的生产打包命令\n  "build:main": "webpack --config ./webpack/webpack.main.prod.js",\n  "build:render": "webpack --config ./webpack/webpack.render.prod.js",\n},\n'})}),"\n",(0,s.jsxs)(n.p,{children:["我们去执行一下 ",(0,s.jsx)(n.code,{children:"npm run build:main"})," 和 ",(0,s.jsx)(n.code,{children:"npm run build:render"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"看看打包之后的 dist 文件，发现打包之后的 electron.js 不见了。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["原因在于我们使用了 ",(0,s.jsx)(n.code,{children:"clean-webpack-plugin"})," 插件，该插件在每次打包之前，都会将 dist 删除再新增。所以先打包的文件跟着被删掉了。我们来修改一下 ",(0,s.jsx)(n.code,{children:"webpack.base.js"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// webpack/webpack.base.js\nconst path = require('path');\n// const { CleanWebpackPlugin } = require('clean-webpack-plugin');\n\nmodule.exports = {\n  // 其他代码省略...\n  // \uD83D\uDC47 注释此插件\n  // plugins: [new CleanWebpackPlugin()],\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"我们删除 dist 目录，再次打包试试"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"rm -rf dist\nnpm run build:main\nnpm run build:render\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"这次我们就发现，dist 目录下的内容都是正确的了。为此我们 Electron 和 React 均打包成功。"}),"\n",(0,s.jsxs)(n.h3,{id:"第二步安装-electron-builder",children:["第二步：安装 electron-builder",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第二步安装-electron-builder",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"根据官方文档，我们进行安装"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install electron-builder --save-dev\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h3,{id:"第三步添加打包命令进行打包",children:["第三步：添加打包命令进行打包",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第三步添加打包命令进行打包",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["通过 electron-builder 官方文档的 ",(0,s.jsx)(n.a,{href:"https://www.electron.build/#quick-setup-guide",target:"_blank",rel:"noopener noreferrer",children:"快速上手"}),"，我们可以发现，只需要添加对应的一些配置即可实现打包。"]}),"\n",(0,s.jsx)(n.p,{children:"配置属性很多，就不一一列举，小伙伴们们可以自行前往阅读一下～"}),"\n",(0,s.jsx)(n.p,{children:"根据教程，我们在 package.json 添加 build 属性"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "build": {\n    "appId": "visResumeMook.ElectronReact", // 自定义 appId\n    "productName": "VisResumeMook", // 打包之后的程序名\n    "copyright": "Copyright \xa9 2019 ${author}",\n    "files": ["dist/**/*", "package.json", "node_modules/"]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"接着添加脚本命令"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'"scripts": {\n  "pack": "electron-builder --dir",\n  "dist": "electron-builder"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"这时候我们就可以执行打包了。一个完整的打包构建命令为："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"rm -rf dist\nnpm run build:main\nnpm run build:render\n\n// 如果你的静态资源没发生改变，可以直接 pack，不用再重新打包主进程和渲染进程\nnpm run pack\n"})}),"\n",(0,s.jsx)(n.p,{children:"运行一下，发现报错了"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"我们将 electron 放到 devDependencies 中，然后重新 install，再执行一下命令"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run pack\n"})}),"\n",(0,s.jsx)(n.p,{children:"执行结果还是出错，原因在于我们的应用入口文件写错了"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"我们检查一下 package.json 中的 main 属性，果然有问题，进行修改"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  // \uD83D\uDC47 修改成打包后的入口文件\n  "main": "./dist/electron.js"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"再执行一下命令，看看会不会打包成功"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run pack\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"没问题，我们再去 dist 下面看看"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"我们双击打开，发现白屏，来看看报什么错"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["加载的 ",(0,s.jsx)(n.code,{children:"dist/index.html"})," 有问题，通过控制台查看报错信息，我们发现这个 ",(0,s.jsx)(n.code,{children:"file://"})," 链接有误"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"if (isDev()) {\n  // 开发环境\n  mainWindow.loadURL(`http://127.0.0.1:7001`);\n} else {\n  // 生产环境\n  mainWindow.loadURL(`file://${path.join(__dirname, '../dist/index.html')}`);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["很明显，这个 ",(0,s.jsx)(n.code,{children:"__dirname"})," 好像不起作用。我们可以通过 webpack.definePlugin 添加此全局变量"]}),"\n",(0,s.jsx)(n.p,{children:"修改 webpack.main.prod.js，我们为其添加此全局变量"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// webpack/webpack.main.prod.js\n\nplugins: [\n  // \uD83D\uDC47 添加这个，用于打包后的主进程中正确获取__dirname\n  new webpack.DefinePlugin({\n    __dirname: '__dirname',\n  }),\n];\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后重新打包一下"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"rm -rf dist\nnpm run build:main\nnpm run build:render\nnpm run pack\n"})}),"\n",(0,s.jsx)(n.p,{children:"顺利打包之后，进入 dist ，双击点击我们的程序包，这时候就能正常运行了"}),"\n",(0,s.jsxs)(n.h3,{id:"第三步生成多平台的安装包",children:["第三步：生成多平台的安装包",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第三步生成多平台的安装包",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当我们不配置任何平台相关信息时，将会根据你当前的设备，打包成对应的安装包。如果你想了解默认行为",(0,s.jsx)(n.a,{href:"https://www.electron.build/cli.html#target",target:"_blank",rel:"noopener noreferrer",children:"可点击这里"}),"，我们接下来进行 mac 和 win 的配置，配置参数太多，这里就直接上配置项了，大家可以去",(0,s.jsx)(n.a,{href:"https://www.electron.build/",target:"_blank",rel:"noopener noreferrer",children:"官网"}),"了解相关配置"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"build": {\n    "appId": "visResumeMook.ElectronReact",\n    "productName": "VisResumeMook",\n    "copyright": "Copyright \xa9 2019 ${author}",\n    "extends": null,\n    "files": [\n      "dist/**/*",\n      "package.json",\n      "node_modules/"\n    ],\n    // 这是资源文件\n    "directories": {\n      "buildResources": "assets",\n      "output": "distAssets" // 这是打包之后安装包所在的文件夹\n    },\n    "mac": {\n      "target": [\n        "dmg",\n        "zip"\n      ]\n    },\n    "dmg": {\n      "contents": [\n        {\n          "x": 130,\n          "y": 220\n        },\n        {\n          "x": 410,\n          "y": 220,\n          "type": "link",\n          "path": "/Applications"\n        }\n      ]\n    },\n    "win": {\n      "target": [\n        "nsis",\n        "msi"\n      ]\n    }\n  },\n'})}),"\n",(0,s.jsx)(n.p,{children:"之后我们再去执行一下打包。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run dist\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"企业微信截图_5353b118-156c-45a0-b1a6-e79d39dad901.png"})}),"\n",(0,s.jsx)(n.p,{children:"我们进入到 distAssets 文件夹下，然后就会发现 dmg 安装包，进行安装即可"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"安装完后，我们就能愉快的使用此程序啦～"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"问题",children:["问题？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#问题",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["有小伙伴们可能会遇到一些问题，比如打包之后图片怎么没了，一些功能怎么消失了？不要慌，因为本章节知识支线任务，只是让小伙伴们体验一下构建成安装包的快乐，完整的构建打包请看此章节：",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/6950646725295996940/section/6962941213401939998",target:"_blank",rel:"noopener noreferrer",children:"打包篇-应用程序生产环境构建"}),"，看完之后，你遇到的打包问题都能迎刃而解～"]}),"\n",(0,s.jsxs)(n.h2,{id:"最后",children:["最后",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最后",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["此章节以”粗暴“的方案实现，代码未经过优化和抽离，同时打包出来的程序体积很大，并未进行优化。这些操作都在主线任务的",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/6950646725295996940/section/6962941003858706436",target:"_blank",rel:"noopener noreferrer",children:"打包篇-Electron 打包体积优化"}),"去实现。"]})]})}function w(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}let k=w;w.__RSPRESS_PAGE_META={},w.__RSPRESS_PAGE_META["Electron%20%2B%20React%20%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8E%86%E5%B9%B3%E5%8F%B0%E5%AE%9E%E6%88%98%2F14.%F0%9F%90%BC%20%20%E6%94%AF%E7%BA%BF%E7%AF%87-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%EF%BC%88%E9%AA%84%E5%82%B2%E8%87%AA%E8%B1%AA%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"electron 和 react 的关系",id:"electron-和-react-的关系",depth:2},{text:"本地开发",id:"本地开发",depth:3},{text:"打包构建",id:"打包构建",depth:3},{text:"关系",id:"关系",depth:3},{text:"打包构建",id:"打包构建-1",depth:2},{text:"第一步：打包 Electron 和 React",id:"第一步打包-electron-和-react",depth:3},{text:"第二步：安装 electron-builder",id:"第二步安装-electron-builder",depth:3},{text:"第三步：添加打包命令进行打包",id:"第三步添加打包命令进行打包",depth:3},{text:"第三步：生成多平台的安装包",id:"第三步生成多平台的安装包",depth:3},{text:"问题？",id:"问题",depth:2},{text:"最后",id:"最后",depth:2}],title:"14.\uD83D\uDC3C  支线篇-打包生成第一个桌面应用（骄傲自豪）",headingTitle:"14.\uD83D\uDC3C  支线篇-打包生成第一个桌面应用（骄傲自豪）",frontmatter:{}}}}]);