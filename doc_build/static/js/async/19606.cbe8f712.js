"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["19606"],{538441:function(e,r,n){n.r(r),n.d(r,{default:()=>L});var c=n(552676),s=n(740453);let d=n.p+"static/image/1028ee0e95287b005de7958152ca0488.36707a5f.webp",i=n.p+"static/image/ec27390bec6052b6984561c16a1ce7e1.955ac271.webp",a=n.p+"static/image/c74f03761a2565ca90c90d92a7ebc775.46be7299.webp",o=n.p+"static/image/5d4e5f0861fc91d2a8668ca483acd797.a228458e.webp",l=n.p+"static/image/ac9ced630e9183976c9391fa3d33994c.893f69dc.webp",h=n.p+"static/image/1c92c5cf82291a327221fed72defbec5.4341286c.webp",t=n.p+"static/image/9de1dd7c71ae179810f2bb92d4e756de.d6770418.webp",p=n.p+"static/image/a63c72055c99d1954024b7f344d0f6a2.44560274.webp",x=n.p+"static/image/1a8898d761e5407e5cfb34724286f907.229ea984.webp",j=n.p+"static/image/e06b65d20aff91ec0eebe13053d66165.01a8b060.webp",g=n.p+"static/image/4a7ddd7ba9549e57a40cd52a52a9c0c8.ef33355c.webp",m=n.p+"static/image/7bb86ed6e7ca0ca1763fd03b17fe06ee.892ef6b1.webp",b=n.p+"static/image/7e4c3610c7002f0818b88b693de43a0d.917d0527.webp",k=n.p+"static/image/ac88b2b3d0222303d114abbd3b5ad82c.300198b3.webp",f=n.p+"static/image/d4b63608a0e422b1b61187f4fd0253ed.800e3d8f.webp",u=n.p+"static/image/455675e85d58f1cac4a78d8e930d6f6c.1dc6d05b.webp",_=n.p+"static/image/e341ae9b88115c8cf7f4daeb1ea8b542.590ceb3d.webp",D=n.p+"static/image/592de2abf1015239b98485d00c0cf769.df3b9bfd.webp",N=n.p+"static/image/9cf7080274707e3bafaf36a568b36b4d.98f3faef.webp",y=n.p+"static/image/b413b14d8a9df5457453cb6223a8e0e4.df3b9bfd.webp",w=n.p+"static/image/23285a343ad0601f4b255fc10b72aa92.7b15f0a0.webp",R=n.p+"static/image/300f1be2a0ff26e8b4bf3653300fc868.f4256cba.webp",v=n.p+"static/image/62d6a187a98f4706978731468bab1c3a.948abe67.webp",C=n.p+"static/image/406f92618fddb03653a3716c8114b950.e9f73f48.webp",E=n.p+"static/image/01b6bcda78807beae00b866afc4496b9.a308f0f3.webp",O=n.p+"static/image/1a6cbc1869295df27a9fa0006cdfe65d.9547bfbf.webp",A=n.p+"static/image/583d78f27426fc7684787e7079844368.16f94cc7.webp",M=n.p+"static/image/c577f660cf62759ad00ac5accbb08c6b.530aa9b4.webp",I=n.p+"static/image/713bbe4485e9c70758b84a1f57a58a78.280ccf62.webp",F=n.p+"static/image/dd0521bb53242371d6e28680a7381ee2.6daa2eed.webp",P=n.p+"static/image/6774bd0301e25bd05f71e06647dfa028.ce3d342e.webp",S=n.p+"static/image/d9c060e42a6a9391a4e17c53a807839b.c77c4589.webp",H=n.p+"static/image/e873dedbefdf795de832661a27126a4c.91ee9191.webp",G=n.p+"static/image/fc5f992ed17b6b49fd264c1d6172ff81.b290c88f.webp",q=n.p+"static/image/a78dee36fd651f1e35f36215c7ca80c9.4997452e.webp",T=n.p+"static/image/419452c791013519b59033b1e5ee8a99.29630778.webp",B=n.p+"static/image/af03596860d14f1a2e7f00f54338ffb0.d42aaabe.webp",U=n.p+"static/image/63cf2a31b18fa3edc0c6889c15dd89fa.8a9a5a39.webp",W=n.p+"static/image/820c40fb0625127c98047f69a5a6a729.0540d29b.webp";function K(e){let r=Object.assign({h2:"h2",a:"a",p:"p",strong:"strong",img:"img",code:"code",pre:"pre",ol:"ol",li:"li",h3:"h3",blockquote:"blockquote"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(r.h2,{id:"前言",children:["前言",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"假设我们的项目做完了，现在该部署上线了。因为项目用到了 MySQL 等技术，我需要在服务器上也安装一遍环境。这……好麻烦……"}),"\n",(0,c.jsx)(r.p,{children:"假如我把代码提交到 GitHub，其他同学为了查看效果，也要把环境安装一遍。这……好麻烦……"}),"\n",(0,c.jsx)(r.p,{children:"有没有更简单的解决方案？"}),"\n",(0,c.jsx)(r.p,{children:"这就要说到 Docker 了。Docker 应该是目前最流行的容器解决方案。Docker 会把项目和项目的依赖，包括运行环境等，都打包到一个文件中。运行这个文件，会生成一个虚拟容器，我们的项目就在这个虚拟容器里运行。"}),"\n",(0,c.jsx)(r.p,{children:"这样当在服务器或者其他电脑上运行的时候，不需要直接运行项目代码，而是运行包含环境的打包文件，这样就避免了再次安装环境的困扰。"}),"\n",(0,c.jsxs)(r.h2,{id:"理解-docker",children:["理解 Docker",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#理解-docker",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"现在让我们开始学习 Docker 吧！"}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)(r.strong,{children:"Docker 有三个核心概念：镜像（Image）、容器（Container） 和仓库（Repository）。"})}),"\n",(0,c.jsx)(r.p,{children:"Docker 会把应用程序及其依赖，都打包在名为镜像（Image）的文件中。Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。"}),"\n",(0,c.jsxs)(r.p,{children:["而镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，",(0,c.jsx)(r.strong,{children:"镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。"})]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:W,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。"}),"\n",(0,c.jsxs)(r.p,{children:["在本地制作好镜像后，我们可以将镜像推送到远程仓库（Repository）。仓库分为公开仓库和私有仓库，最大的公开仓库是 Docker 的官方仓库 ",(0,c.jsx)(r.a,{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer",children:"Docker Hub"}),"。这一点跟 Git 就很相似了，最大的 Git 公开仓库是 GitHub。"]}),"\n",(0,c.jsxs)(r.h2,{id:"使用-docker",children:["使用 Docker",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-docker",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["安装 Docker 最快捷的方式就是使用 Docker 客户端了。下载 Docker：",(0,c.jsx)(r.a,{href:"https://docs.docker.com/get-docker/",target:"_blank",rel:"noopener noreferrer",children:"https://docs.docker.com/get-docker/"})]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:U,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["下载安装完成后，本地应该就有 ",(0,c.jsx)(r.code,{children:"docker"})," 命令了，运行 ",(0,c.jsx)(r.code,{children:"docker -v"}),"试试。"]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:B,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。国内很多云服务商都提供了国内加速器服务，可用的加速器可以参考：",(0,c.jsx)(r.a,{href:"https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6",target:"_blank",rel:"noopener noreferrer",children:"https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6"}),"。操作方式如下："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:T,alt:"截屏2024-01-30 16.06.39.png"})}),"\n",(0,c.jsx)(r.p,{children:"添加代码如下（这是我目前在用的，如果构建或者拉取的时候因为网络原因失败，就参考上面的文档更换新的加速器）："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-javascript",children:'{\n  // ...\n  "max-concurrent-downloads": 2,\n  "max-download-attempts": 10,\n  "registry-mirrors": [\n      "https://dockerproxy.com",\n      "https://docker.mirrors.ustc.edu.cn",\n      "https://docker.nju.edu.cn"\n  ]\n  // ...\n}\n'})}),"\n",(0,c.jsxs)(r.h2,{id:"入门-docker",children:["入门 Docker",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#入门-docker",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"没有用过 Docker 的同学，让我们开始一个 30 分钟速度入门教程吧："}),"\n",(0,c.jsx)(r.p,{children:"本地创建一个新的 Next.js 项目，运行："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"npx create-next-app@latest\n"})}),"\n",(0,c.jsx)(r.p,{children:"效果如下（这里怎么选都行，项目能正常运行就行）："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:q,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["根目录新建 ",(0,c.jsx)(r.code,{children:".dockerignore"}),"，写入："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"Dockerfile\n.dockerignore\nnode_modules\nnpm-debug.log\nREADME.md\n.next\ndocker\n.git\n"})}),"\n",(0,c.jsxs)(r.p,{children:["作用类似于 ",(0,c.jsx)(r.code,{children:".gitignore"}),"，排除不必要的文件和目录，以便在构建 Docker 镜像时，减小镜像大小并提高构建效率。"]}),"\n",(0,c.jsxs)(r.p,{children:["根目录新建 ",(0,c.jsx)(r.code,{children:"Dockerfile"}),"，写入："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-javascript",children:"FROM node:18-alpine\nWORKDIR /app\nCOPY . .\nRUN npm install --registry=https://registry.npmmirror.com && npm run build\nCMD npm start\nEXPOSE 3000\n"})}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"Dockerfile"})," 是一个文本文件，用于定制镜像文件。其内的每一行都是一句指令（Instruction）。完整的指令和其含义可以参考 ",(0,c.jsx)(r.a,{href:"https://docs.docker.com/engine/reference/builder/#dockerfile-reference",target:"_blank",rel:"noopener noreferrer",children:"Dockerfile reference"}),"。这里简单说说用到的指令："]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"FROM"})," 用于指定基础镜像。所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。而 FROM 就是指定 基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。"]}),"\n",(0,c.jsxs)(r.p,{children:["在 ",(0,c.jsx)(r.a,{href:"https://hub.docker.com/search?q=&type=image&image_filter=official",target:"_blank",rel:"noopener noreferrer",children:"Docker Hub"}),"上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 ",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/nginx/",target:"_blank",rel:"noopener noreferrer",children:"nginx"}),"、",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/redis/",target:"_blank",rel:"noopener noreferrer",children:"redis"}),"、",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/mongo/",target:"_blank",rel:"noopener noreferrer",children:"mongo"}),"、",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/mysql/",target:"_blank",rel:"noopener noreferrer",children:"mysql"}),"、",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/httpd/",target:"_blank",rel:"noopener noreferrer",children:"httpd"}),"、",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/php/",target:"_blank",rel:"noopener noreferrer",children:"php"}),"、",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/tomcat/",target:"_blank",rel:"noopener noreferrer",children:"tomcat"}),"等；也有一些方便开发、构建、运行各种语言应用的镜像，如 ",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/node",target:"_blank",rel:"noopener noreferrer",children:"node"}),"、",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/openjdk/",target:"_blank",rel:"noopener noreferrer",children:"openjdk"}),"、",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/python/",target:"_blank",rel:"noopener noreferrer",children:"python"}),"、",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/ruby/",target:"_blank",rel:"noopener noreferrer",children:"ruby"}),"、",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/golang/",target:"_blank",rel:"noopener noreferrer",children:"golang"}),"等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。"]}),"\n",(0,c.jsxs)(r.p,{children:["这里我们选择了 ",(0,c.jsx)(r.code,{children:"node:18-alpine"})," 这个镜像，node 完整的镜像版本和标签可以查看 ",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/node",target:"_blank",rel:"noopener noreferrer",children:"Docker Hub node"}),"。这里之所以选择了 ",(0,c.jsx)(r.code,{children:"18-alpine"})," 是参考了 ",(0,c.jsx)(r.a,{href:"https://github.com/vercel/next.js/tree/canary/examples/with-docker",target:"_blank",rel:"noopener noreferrer",children:"Next.js 的官方 Docker 示例代码"}),"。"]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"WORKDIR"}),"用于指定 Docker 的工作目录。如该目录不存在，WORKDIR 会帮你建立目录。"]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"COPY"})," 用于将文件拷贝到 Docker。第一个点表示源路径，第二个点表示目标路径。目标路径可以是容器内的绝对路径，也可以是相对于工作目录的相对路径，而工作目录可以用 ",(0,c.jsx)(r.code,{children:"WORKDIR"})," 指令来指定。所以这个指令的意思就是简单粗暴的将当前目录的所有文件拷贝到 ",(0,c.jsx)(r.code,{children:"/app"}),"下。"]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"RUN"})," 用于执行命令行命令。这里我们安装了项目依赖。"]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"CMD"})," 用于指定容器启动命令。RUN 可以有多个，在镜像构建阶段执行。CMD 只能有一个，在容器启动后执行。前面说到，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。"]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"EXPOSE"})," 用于声明容器运行时提供服务的端口。不过这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。但可以帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。"]}),"\n",(0,c.jsx)(r.p,{children:"进入项目根目录，运行命令，构建镜像文件："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-javascript",children:"docker image build -t next-docker-learn-demo:0.0.1 .\n"})}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"-t"})," 参数用来指定镜像文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是 ",(0,c.jsx)(r.code,{children:"latest"}),"。最后面还有一个 ",(0,c.jsx)(r.code,{children:"."}),"，用于指定上下文路径。"]}),"\n",(0,c.jsx)(r.p,{children:"多说一句："}),"\n",(0,c.jsxs)(r.ol,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"docker build"})," 看似是在本地构建，其实是在服务端，也就是在 Docker 引擎中构建的，所以构建的时候需要加速器"]}),"\n",(0,c.jsxs)(r.li,{children:["为了能够让服务端知道本地文件的位置，就需要指定上下文路径（也就是最后的 ",(0,c.jsx)(r.code,{children:"."}),"），Docker 会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["举个例子，如果在 Dockerfile 中这么写：",(0,c.jsx)(r.code,{children:"COPY ./package.json /app/"}),"。这并不是要复制执行 ",(0,c.jsx)(r.code,{children:"docker build "}),"命令所在的目录下的 ",(0,c.jsx)(r.code,{children:"package.json"}),"，也不是复制 ",(0,c.jsx)(r.code,{children:"Dockerfile"})," 所在目录下的 ",(0,c.jsx)(r.code,{children:"package.json"}),"，而是复制指定的上下文路径下的 ",(0,c.jsx)(r.code,{children:"package.json"}),"。"]}),"\n",(0,c.jsx)(r.p,{children:"总结一下就是：构建不要浪。把 Dockerfile 写在项目根目录下，将所需的文件也都拷贝在根目录下，指定项目根目录为上下文路径。"}),"\n",(0,c.jsx)(r.p,{children:"构建效果如下："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:G,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"构建了 2 分多钟吧。如果出现网络问题，关闭代理试试。构建完成后，可以在 Docker 客户端中查看："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:H,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["也可以在本地执行 ",(0,c.jsx)(r.code,{children:"docker images"})," 查看镜像列表："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:S,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"现在有了镜像，我们开启一个容器运行我们的项目："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-javascript",children:"docker run -p 4000:3000 next-docker-learn-demo:0.0.1\n"})}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"-p"})," 用于指定端口映射，这里的意思是将容器的 ",(0,c.jsx)(r.code,{children:"3000"})," 端口映射到主机的 ",(0,c.jsx)(r.code,{children:"4000"})," 端口，此时效果如下："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:P,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["容器里项目正常运行，开在了容器的 3000 端口，映射到本地的 4000 端口，所以我们在本地打开 ",(0,c.jsx)(r.a,{href:"http://localhost:4000/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:4000/"}),"，此时正常访问项目："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:F,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"查看 Docker 客户端："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:I,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"我们可以对启动的容器进行启动、停止、删除等操作："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"# 48.实战篇 _ React Notes _ Docker 快速入门\ndocker container ls\n# 停止容器\ndocker container stop container-id\n# 启动容器\ndocker container start container-id\n# 重启容器\ndocker container restart container-id\n# 删除容器\ndocker container rm container-id\n"})}),"\n",(0,c.jsx)(r.p,{children:"当然也可以直接在客户端中操作。"}),"\n",(0,c.jsx)(r.p,{children:"现在你已经有了一个镜像。就像 npm 包发布到 npm 上，你也可以将镜像发布到 Docker Hub。"}),"\n",(0,c.jsxs)(r.p,{children:["首先去 ",(0,c.jsx)(r.a,{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer",children:"https://hub.docker.com/"})," 注册一个账户，当然你也可以在使用客户端的时候注册登录账号。运行 ",(0,c.jsx)(r.code,{children:"docker login"}),"，因为我已经在 Docker 客户端登录，执行效果如下："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:M,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["使用 ",(0,c.jsx)(r.code,{children:"dcoker image tag"})," 标记本地镜像，将其归入某一仓库，运行："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"# 格式如下：\n# docker image tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\n# 其中 yayu007 是我的 Docker Hub 账户名\ndocker image tag next-docker-learn-demo:0.0.1 yayu007/next-docker-learn-demo:0.0.1\n"})}),"\n",(0,c.jsx)(r.p,{children:"`\n推送到 Docker Hub："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"# 格式如下：\n# docker image push [OPTIONS] NAME[:TAG]\ndocker image push yayu007/next-docker-learn-demo:0.0.1\n"})}),"\n",(0,c.jsx)(r.p,{children:"效果如下："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:A,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"发布完毕后，你可以在 Docker 客户端的 Images 下的 Hub 选项栏中查到："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:O,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["对应的链接为：",(0,c.jsx)(r.a,{href:"https://hub.docker.com/layers/yayu007/next-docker-learn-demo/0.0.1/images/sha256:50b1b7cf09b4147ef60c14cd2297bbad441c1be8b55cd10a0e06be1e87cc9bb6",target:"_blank",rel:"noopener noreferrer",children:"https://hub.docker.com/layers/yayu007/next-docker-learn-demo/0.0.1/images/sha256:50b1b7cf09b4147ef60c14cd2297bbad441c1be8b55cd10a0e06be1e87cc9bb6"})]}),"\n",(0,c.jsx)(r.p,{children:"推送到 Docker Hub 后，其他人就可以直接拉取我的镜像文件："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker image pull yayu007/next-docker-learn-demo:0.0.1\n"})}),"\n",(0,c.jsxs)(r.p,{children:["然后运行 ",(0,c.jsx)(r.code,{children:"docker run"})," 开启项目："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker run -p 4000:3000 next-docker-learn-demo:0.0.1\n"})}),"\n",(0,c.jsxs)(r.h2,{id:"入门-docker-compose",children:["入门 Docker Compose",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#入门-docker-compose",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"实际开发中，肯定不会只用到 Next.js，还会用到 Nginx、Redis、MySQL 等环境。这里我们以 React Notes 的 day1 代码为例，演示如何开启并使用多个容器。"}),"\n",(0,c.jsxs)(r.h3,{id:"本地运行",children:["本地运行",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#本地运行",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"下载我们的 day1 分支代码："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"git clone -b day1 git@github.com:mqyqingfeng/next-react-notes-demo.git\n"})}),"\n",(0,c.jsx)(r.p,{children:"大家还记得 day1 实现的效果吗？我们本地运行以下代码："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"cd next-react-notes-demo && npm i && npm run dev\n"})}),"\n",(0,c.jsx)(r.p,{children:"因为 day1 代码需要开启 redis 服务，所以另起一个命令行运行："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"redis-server\n"})}),"\n",(0,c.jsxs)(r.p,{children:["等 Redis 服务成功开启，此时打开 ",(0,c.jsx)(r.a,{href:"http://localhost:3000/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/"}),"，页面正常访问："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:E,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"左侧笔记列表的标题和时间取自于 Redis 数据库，说明代码运行正常。"}),"\n",(0,c.jsxs)(r.h3,{id:"redis-容器化",children:["Redis 容器化",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#redis-容器化",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["现在我们把 Redis 改为容器运行。先在刚才开启 redis-server 的窗口按 ",(0,c.jsx)(r.code,{children:"Ctrl + C"})," 退出 Redis 服务，然后拉取 ",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/redis/",target:"_blank",rel:"noopener noreferrer",children:"redis"})," 镜像："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker pull redis\n"})}),"\n",(0,c.jsxs)(r.p,{children:["当我们不带标签的时候，默认拉取的是 ",(0,c.jsx)(r.code,{children:"redis:latest"}),"。"]}),"\n",(0,c.jsx)(r.p,{children:"镜像拉取完毕后，开启容器："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker run -p 6379:6379 redis redis-server\n"})}),"\n",(0,c.jsxs)(r.p,{children:["这里我们将 Redis 开启的 6379 端口映射到本地的 6379 端口，替换掉了刚才在本地开启的 redis-server，所以此时访问 ",(0,c.jsx)(r.a,{href:"http://localhost:3000/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/"}),"，页面依然正常运行："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:C,alt:"image.png"})}),"\n",(0,c.jsxs)(r.h3,{id:"next-项目容器化",children:["Next 项目容器化",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#next-项目容器化",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"现在我们将 Next.js 项目改为容器运行。前面我们讲过："}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsx)(r.p,{children:"容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。"}),"\n"]}),"\n",(0,c.jsx)(r.p,{children:"所以 Next.js 容器与 Redis 容器是相互隔离的。为此，我们需要实现容器互联。Docker 推荐将容器加入自定义的 Docker 网络的方式来连接多个容器。"}),"\n",(0,c.jsx)(r.p,{children:"创建一个自定义的网络："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker network create -d bridge react-notes\n"})}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"-d"})," 参数指定 Docker 网络类型，有 ",(0,c.jsx)(r.code,{children:"bridge"}),"、",(0,c.jsx)(r.code,{children:"overlay"}),"。其中 ",(0,c.jsx)(r.code,{children:"overlay"})," 网络类型用于 ",(0,c.jsx)(r.a,{href:"https://yeasy.gitbook.io/docker_practice/swarm_mode",target:"_blank",rel:"noopener noreferrer",children:"Swarm mode"}),"。",(0,c.jsx)(r.code,{children:"react-notes"})," 为我们的自定义网络的名字。运行效果如下："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["我们在 Docker 客户端暂停或者删除之前开启的 Redis 容器，然后命令行运行一个新的 Redis 容器并连接到新建的 ",(0,c.jsx)(r.code,{children:"react-notes"})," 网络："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker run -p 6379:6379 --network react-notes redis redis-server\n"})}),"\n",(0,c.jsxs)(r.p,{children:["然后运行 ",(0,c.jsx)(r.code,{children:"docker network inspect"}),"查找 redis 容器的 IP 地址："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker network inspect react-notes\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:R,alt:"截屏2024-01-31 18.14.21.png"})}),"\n",(0,c.jsxs)(r.p,{children:["修改 ",(0,c.jsx)(r.code,{children:"lib/redis.js"}),"如下："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"// ...\nconst redis = new Redis({\n  host: '172.19.0.2'\n})\n// ...\n"})}),"\n",(0,c.jsxs)(r.p,{children:["项目根目录新建 ",(0,c.jsx)(r.code,{children:"Dockerfile"}),"，代码如下："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"FROM node:18-alpine\nWORKDIR /app\nCOPY . .\nRUN npm install --registry=https://registry.npmmirror.com\nCMD  npm run build && npm start\nEXPOSE 3000\n"})}),"\n",(0,c.jsx)(r.p,{children:"创建项目镜像："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker image build -t next-react-notes-demo:0.0.1 .\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:w,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"运行项目容器并添加到 react-notes 网络中："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker run -p 4000:3000 --network react-notes next-react-notes-demo:0.0.1\n"})}),"\n",(0,c.jsxs)(r.p,{children:["等 Redis 服务成功开启，此时打开 ",(0,c.jsx)(r.a,{href:"http://localhost:4000/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:4000/"}),"，页面正常访问："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:y,alt:"image.png"})}),"\n",(0,c.jsxs)(r.h3,{id:"docker-compose",children:["Docker Compose",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#docker-compose",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["如果让我们像这样一个个管理容器，着实有点麻烦，Docker 提供了 ",(0,c.jsx)(r.a,{href:"https://github.com/docker/compose?tab=readme-ov-file#docker-compose-v2",target:"_blank",rel:"noopener noreferrer",children:"Docker Compose"})," 用于容器的管理。使用 Compose，你只需要通过一个单独的 ",(0,c.jsx)(r.code,{children:"docker-compose.yml"}),"文件就可以定义一组相关联的应用容器。"]}),"\n",(0,c.jsxs)(r.p,{children:["Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用。本地运行 ",(0,c.jsx)(r.code,{children:"docker-compose --version"}),"试试："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:N,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["现在我们使用 Docker Compose 重新运行这个项目。项目根目录新建 ",(0,c.jsx)(r.code,{children:"docker-compose.yml"}),"文件，代码如下："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-javascript",children:"version: '3.8'\nservices:\n\n  redis:\n    image: redis\n    ports:\n      - '6379:6379'\n    command: redis-server\n    \n  nextapp:\n    build: .\n    ports:\n     - '4000:3000'\n    depends_on:\n      - redis\n"})}),"\n",(0,c.jsxs)(r.p,{children:["模板文件的各种指令含义可以参考 ",(0,c.jsx)(r.a,{href:"https://yeasy.gitbook.io/docker_practice/compose/compose_file",target:"_blank",rel:"noopener noreferrer",children:"《Compose 模板文件》"}),"。"]}),"\n",(0,c.jsxs)(r.p,{children:["上节创建的 ",(0,c.jsx)(r.code,{children:"Dockerfile"})," 代码保持不变。修改 ",(0,c.jsx)(r.code,{children:"lib/redis.js"}),"："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-javascript",children:"// ...\nconst redis = new Redis({\n  host: 'redis'\n})\n// ...\n"})}),"\n",(0,c.jsx)(r.p,{children:"最后根目录运行："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker-compose up\n"})}),"\n",(0,c.jsx)(r.p,{children:"运行这个命令，它会尝试自动完成包括构建镜像、（重新）创建服务、启动服务，并关联服务相关容器的一系列操作。大部分时候都可以直接通过该命令来启动一个项目。此时应该可以正常运行："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:D,alt:"image.png"})}),"\n",(0,c.jsxs)(r.h2,{id:"数据持久化",children:["数据持久化",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#数据持久化",children:"#"})]}),"\n",(0,c.jsxs)(r.h3,{id:"redis",children:["Redis",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#redis",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["现在我们已经用 Docker Compose 开启了一个 Redis 容器，但其中 Redis 的数据并不是持久的，一旦容器删除，数据也就丢失了。因为 day1 分支的代码还没有实现增删查改功能，所以我们使用 ",(0,c.jsx)(r.code,{children:"docker exec"})," 进入容器进行操作："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"# 查看 redis 容器的 container id\ndocker container ls\n# 进入 redis 容器\ndocker exec -it b0a18 bash\n"})}),"\n",(0,c.jsxs)(r.p,{children:["其中 ",(0,c.jsx)(r.code,{children:"-it"}),"是 ",(0,c.jsx)(r.code,{children:"-i"})," 和 ",(0,c.jsx)(r.code,{children:"-t"})," 一起使用，用于开启一个交互模式的终端。如果出现这样的报错："]}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsx)(r.p,{children:'OCI runtime exec failed: exec failed: unable to start container process: exec: "bash": executable file not found in $PATH: unknown'}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["可以改为使用 ",(0,c.jsx)(r.code,{children:"docker exec -it b0a18 sh"}),"试试。"]}),"\n",(0,c.jsx)(r.p,{children:"当然最简单的方式还是使用客户端："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:_,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"使用哪种方式都行，现在我们进入容器删除一条数据："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"# 开启 cli\nredis-cli\n# 查看 keys\nkeys *\n# 查看 notes 数据\nhgetAll notes\n# 删除一条数据\nhdel notes 1702459181837\n# 再次查看数据\nhgetAll notes\n"})}),"\n",(0,c.jsx)(r.p,{children:"操作效果如下："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:u,alt:"截屏2024-02-01 23.14.56.png"})}),"\n",(0,c.jsxs)(r.p,{children:["现在我们已经删除了一条数据，不过打开 ",(0,c.jsx)(r.code,{children:"http://localhost:4000/"}),"，你会发现左侧的笔记列表数据不会有任何变化，这是 Next.js 编译的缘故，在 Next.js 编译页面的时候数据库有三条，所以我们重新编译一下 Next.js 项目试试。"]}),"\n",(0,c.jsx)(r.p,{children:"先按 Ctrl + C 退出 Cli 界面，然后 Ctrl + A Ctrl + D 退出交互终端。运行："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"# 查看 Next.js 项目的 container id\ndocker container ls\n# 重启容器\ndocker container restart 74776b12c032\n"})}),"\n",(0,c.jsx)(r.p,{children:"交互效果如下："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["现在重新打开 ",(0,c.jsx)(r.a,{href:"http://localhost:4000/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:4000/"}),"，数据确实少了一条："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:k,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"然后我们删了所有容器，再重新开一个："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"# 停止并删除所有容器\ndocker-compose down\n# 运行容器\ndocker-compose up\n"})}),"\n",(0,c.jsx)(r.p,{children:"交互效果如下："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["现在重新打开 ",(0,c.jsx)(r.a,{href:"http://localhost:4000/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:4000/"}),"，页面又恢复到了初始生成的三条，也就是说，操作的数据全丢了，一切又从头开始了："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"所以我们需要数据持久化。那么怎么实现数据持久化呢？"}),"\n",(0,c.jsx)(r.p,{children:"我们将容器里的数据库数据同步到主机的文件中不就可以了吗？Docker 提供了名为数据卷（volumes）的功能，它会将数据存在主机文件系统的某个区域，该区域由 Docker 来进行管理，其他非 Docker 程序不要乱动其中的数据。"}),"\n",(0,c.jsxs)(r.p,{children:["现在我们在项目的根目录下建立一个名为 ",(0,c.jsx)(r.code,{children:"redis"}),"的文件夹，在其中再建立一个名为 ",(0,c.jsx)(r.code,{children:"data"}),"的文件夹存放数据。修改 ",(0,c.jsx)(r.code,{children:"docker-compose.yml"}),"如下："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-yaml",children:"version: '3.8'\nservices:\n\n  redis:\n    image: redis\n    ports:\n      - '6379:6379'\n    command: redis-server\n    volumes:\n      - ./redis/data:/data\n    \n  nextapp:\n    build: .\n    ports:\n     - '4000:3000'\n    depends_on:\n      - redis\n"})}),"\n",(0,c.jsxs)(r.p,{children:["其中",(0,c.jsx)(r.code,{children:"./redis/data:/data"}),"表示将一个地址为 ",(0,c.jsx)(r.code,{children:"./redis/data"}),"的 volume 挂载到 Redis 容器的 ",(0,c.jsx)(r.code,{children:"/data"}),"目录。这个目录正是 Redis 存放数据的地方。镜像中的被指定为挂载点的目录中的文件会复制到数据卷中。"]}),"\n",(0,c.jsx)(r.p,{children:"现在我们删除掉之前的镜像，再重新构建的镜像，因为数据做了持久化，再重复一遍刚才的操作再次打开地址的时候，数据还会是之前的两条。"}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"/redis/data"}),"会在运行 ",(0,c.jsx)(r.code,{children:"docker-compose down"})," 的时候产生一个 ",(0,c.jsx)(r.code,{children:"dump.rdb"}),"文件。这个文件是二进制文件，正是 Redis 数据的全量备份。运行 ",(0,c.jsx)(r.code,{children:"docker-compose up"})," 的时候，redis 又会读取加载这个文件，由此实现了数据持久化。"]}),"\n",(0,c.jsxs)(r.p,{children:["注：为什么是 ",(0,c.jsx)(r.code,{children:"dump.rdb"})," 这个文件就要说到 Redis 的持久化机制了。Redis 的持久化机制有两种，一种是 RDB（Redis Database），一种是 AOF（Append Only File）。简单的理解：RDB 是一次快照，AOF 是连续增量备份。默认是 RDB，开启 Redis 容器时的 ",(0,c.jsx)(r.code,{children:"--appendonly"})," 参数开启的正是 AOF。"]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,c.jsxs)(r.h3,{id:"数据卷",children:["数据卷",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#数据卷",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"目前我们是随便指定了一个目录作为数据卷，其实 Docker 本身就提供了创建数据卷的方法："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker volume create my-vol\n"})}),"\n",(0,c.jsx)(r.p,{children:"查看数据卷："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker volume ls\n"})}),"\n",(0,c.jsx)(r.p,{children:"该数据卷其实也对应了主机的一个位置，运行："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"docker volume inspect my-vol\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["可以看出，创建的数据卷的地址为 ",(0,c.jsx)(r.code,{children:"/var/lib/docker/volumes/my-vol/_data"}),"。"]}),"\n",(0,c.jsxs)(r.p,{children:["我们先看下如何在 ",(0,c.jsx)(r.code,{children:"docker-compose.yml"})," 文件中使用："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"version: '3.8'\n\nvolumes:\n  redis-data:\n\nservices:\n\n  redis:\n    image: redis\n    ports:\n      - '6379:6379'\n    command: redis-server\n    volumes:\n      - redis-data:/data\n    \n  nextapp:\n    build: .\n    ports:\n     - '4000:3000'\n    depends_on:\n      - redis\n"})}),"\n",(0,c.jsx)(r.p,{children:"其中："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"volumes:\n  redis-data:\n"})}),"\n",(0,c.jsxs)(r.p,{children:["用来创建名为 ",(0,c.jsx)(r.code,{children:"redis-data"})," 的数据卷，使用 ",(0,c.jsx)(r.code,{children:"- redis-data:/data"}),"挂载到容器。"]}),"\n",(0,c.jsx)(r.p,{children:"我们删除掉之前的镜像，重新构建镜像文件。其实也不用像刚才那样删除容器再开启容器，之前只是为了帮助大家学习一些操作命令，其实把 redis 容器重启一下就会产生备份数据。"}),"\n",(0,c.jsx)(r.p,{children:"那这次数据卷对应的本机的位置在哪里呢？"}),"\n",(0,c.jsxs)(r.p,{children:["刚才演示创建的 ",(0,c.jsx)(r.code,{children:"my-vol"}),"的地址在 ",(0,c.jsx)(r.code,{children:"/var/lib/docker/volumes/my-vol/_data"}),"，那 ",(0,c.jsx)(r.code,{children:"redis-data"})," 的地址应该在 ",(0,c.jsx)(r.code,{children:"/var/lib/docker/volumes/redis-data/_data"}),"，我们试着 inspect 一下。"]}),"\n",(0,c.jsxs)(r.p,{children:["你会发现，发现找不到 ",(0,c.jsx)(r.code,{children:"redis-data"})," 这个卷，其实是因为名字写错了，完整的名字应该是 ",(0,c.jsx)(r.code,{children:"next-react-notes-demo_redis-data"}),"，中间用下划线连接："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"但 MacOS 下打开这个地址，你会发现并没有这个目录。这是因为 Docker 放在了虚拟机（VM）里，我们运行："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"# 开启容器\ndocker run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh\n# 进入目录\ncd /var/lib/docker/volumes\n# 查看文件\nls\n# 再进入相关的目录\ncd next-react-notes-demo_redis-data/_data\n# ls\n"})}),"\n",(0,c.jsx)(r.p,{children:"交互效果如下："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:p,alt:"截屏2024-02-02 11.00.33.png"})}),"\n",(0,c.jsxs)(r.h3,{id:"redis-配置",children:["Redis 配置",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#redis-配置",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"Docker 中使用 Redis 都已经介绍了这么多，来都来了，我们再介绍一下 redis 容器如何使用 redis 配置文件。"}),"\n",(0,c.jsx)(r.p,{children:"首先搞一个配置文件，有两种方式："}),"\n",(0,c.jsxs)(r.ol,{children:["\n",(0,c.jsxs)(r.li,{children:["打开 ",(0,c.jsx)(r.a,{href:"https://redis.io/docs/management/config/",target:"_blank",rel:"noopener noreferrer",children:"https://redis.io/docs/management/config/"})," 保存一个对应版本的 ",(0,c.jsx)(r.code,{children:"redis.conf"}),"文件"]}),"\n"]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["注：不知道你的 Redis 版本？就是你拉取 Redis 镜像的那个版本，默认是 ",(0,c.jsx)(r.code,{children:"latest"}),"，目前是 ",(0,c.jsx)(r.code,{children:"7.2.4"}),"，可以在 ",(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/redis",target:"_blank",rel:"noopener noreferrer",children:"Docker Hub Redis"})," 中查看。此外容器启动的时候也会显示版本："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:h,alt:"截屏2024-02-02 11.34.37.png"})}),"\n",(0,c.jsxs)(r.p,{children:["进入容器使用 ",(0,c.jsx)(r.code,{children:"redis-cli"}),"输入 ",(0,c.jsx)(r.code,{children:"info"}),"命令也行："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,c.jsxs)(r.ol,{start:"2",children:["\n",(0,c.jsxs)(r.li,{children:["下载 redis 压缩包，地址为：",(0,c.jsx)(r.a,{href:"http://www.redis.cn/download.html",target:"_blank",rel:"noopener noreferrer",children:"http://www.redis.cn/download.html"}),"  或者 ",(0,c.jsx)(r.a,{href:"https://download.redis.io/releases/",target:"_blank",rel:"noopener noreferrer",children:"https://download.redis.io/releases/"}),"，下载后解压会在项目根目录看到一个 ",(0,c.jsx)(r.code,{children:"redis.conf"}),"文件"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["将这个配置文件放到项目根目录 ",(0,c.jsx)(r.code,{children:"/redis"}),"下（放其他位置也行）。"]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["修改 ",(0,c.jsx)(r.code,{children:"redis.confg"}),"，因为下载的文件是默认配置项，用在容器时，需要修改一些："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"# 这句要注释掉，127.0.0.1 是本机 IP，只能容器内部使用 redis，因为需要外部连接，所以注释掉\n# bind 127.0.0.1 ::1\n\n# 默认情况下，Redis 不作为守护进程运行\ndaemonize no\n\n# 关闭保护模式，会阻止外部连接\n# protected-mode yes\n"})}),"\n",(0,c.jsx)(r.p,{children:"还有些其他的（视情况选择）："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"# 开启 AOF 持久化\nappendonly yes\n# 开启密码，注释表示不需要密码\n# requirepass foobared\n\n# 指定 redis 最大内存\nmaxmemory 500mb\n# 当内存到达上限，使用 LRU 算法删除部分 key，释放空间\nmaxmemory-policy volatile-lru\n"})}),"\n",(0,c.jsxs)(r.p,{children:["修改 ",(0,c.jsx)(r.code,{children:"docker-compose.yml"}),"："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"version: '3.8'\n\nvolumes:\n  redis-data:\n\nservices:\n\n  redis:\n    image: redis\n    ports:\n      - '6379:6379'\n    command: redis-server /etc/redis/redis.conf\n    volumes:\n      - redis-data:/data\n      - ./redis:/etc/redis\n    \n  nextapp:\n    build: .\n    ports:\n     - '4000:3000'\n    depends_on:\n      - redis\n"})}),"\n",(0,c.jsx)(r.p,{children:"删除之前的容器，重新构建镜像运行，查看 Redis 容器日志："}),"\n",(0,c.jsx)(r.p,{children:"之前是："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"会变成："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,c.jsx)(r.p,{children:"此外容器启动的时候如果有这个 warning："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,c.jsxs)(r.p,{children:["可以参考 ",(0,c.jsx)(r.a,{href:"https://github.com/docker-library/redis/issues/346",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/docker-library/redis/issues/346"})," 和 ",(0,c.jsx)(r.a,{href:"https://github.com/nextcloud/all-in-one/discussions/1731",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/nextcloud/all-in-one/discussions/1731"})," 修复这个 warning。"]}),"\n",(0,c.jsxs)(r.h2,{id:"总结",children:["总结",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"那么今天的内容就结束了，本篇以 Docker 部署一个简单的带 redis 数据库的 Next.js 项目为例，带大家熟悉 Docker 和 Docker Compose 的常用命令，以及如何做数据持久化。熟悉 Docker 的同学就请直接进入下篇实战篇吧！"}),"\n",(0,c.jsxs)(r.h2,{id:"参考链接",children:["参考链接",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,c.jsxs)(r.ol,{children:["\n",(0,c.jsx)(r.li,{children:(0,c.jsx)(r.a,{href:"https://yeasy.gitbook.io/docker_practice/",target:"_blank",rel:"noopener noreferrer",children:"https://yeasy.gitbook.io/docker_practice/"})}),"\n",(0,c.jsx)(r.li,{children:(0,c.jsx)(r.a,{href:"https://dunwu.github.io/linux-tutorial/docker/",target:"_blank",rel:"noopener noreferrer",children:"https://dunwu.github.io/linux-tutorial/docker/"})}),"\n",(0,c.jsx)(r.li,{children:(0,c.jsx)(r.a,{href:"https://github.com/docker-library/redis/issues/45",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/docker-library/redis/issues/45"})}),"\n",(0,c.jsx)(r.li,{children:(0,c.jsx)(r.a,{href:"https://redis.io/docs/management/persistence/",target:"_blank",rel:"noopener noreferrer",children:"https://redis.io/docs/management/persistence/"})}),"\n",(0,c.jsx)(r.li,{children:(0,c.jsx)(r.a,{href:"https://hub.docker.com/_/redis",target:"_blank",rel:"noopener noreferrer",children:"https://hub.docker.com/_/redis"})}),"\n"]})]})}function Y(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,s.ah)(),e.components);return r?(0,c.jsx)(r,{...e,children:(0,c.jsx)(K,{...e})}):K(e)}let L=Y;Y.__RSPRESS_PAGE_META={},Y.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F48.%E5%AE%9E%E6%88%98%E7%AF%87%20_%20React%20Notes%20_%20Docker%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"理解 Docker",id:"理解-docker",depth:2},{text:"使用 Docker",id:"使用-docker",depth:2},{text:"入门 Docker",id:"入门-docker",depth:2},{text:"入门 Docker Compose",id:"入门-docker-compose",depth:2},{text:"本地运行",id:"本地运行",depth:3},{text:"Redis 容器化",id:"redis-容器化",depth:3},{text:"Next 项目容器化",id:"next-项目容器化",depth:3},{text:"Docker Compose",id:"docker-compose",depth:3},{text:"数据持久化",id:"数据持久化",depth:2},{text:"Redis",id:"redis",depth:3},{text:"数据卷",id:"数据卷",depth:3},{text:"Redis 配置",id:"redis-配置",depth:3},{text:"总结",id:"总结",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);