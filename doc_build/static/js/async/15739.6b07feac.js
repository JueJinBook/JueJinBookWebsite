"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["15739"],{122085:function(e,n,r){r.r(n),r.d(n,{default:()=>o});var s=r(552676),a=r(740453);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"11内置工具类型下类型世界的内置方法",children:["11.内置工具类型（下）：类型世界的内置方法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11内置工具类型下类型世界的内置方法",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上一节我们学习了用于处理对象类型属性的工具类型，而实际上，对象类型的声明也是相当常见的一个场景，在对象类型一节中我们简单介绍了索引签名类型，用于声明一个内部属性键类型一致、键值类型也一致的对象类型，而 TypeScript 中基于索引签名类型提供了一个简化版本 Record，它能够用更简洁的语法实现同样的效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type UserProps = 'name' | 'job' | 'email';\n\n// 等价于你一个个实现这些属性了\ntype User = Record<UserProps, string>;\n\nconst user: User = {\n  name: 'John Doe',\n  job: 'fe-developer',\n  email: 'john.doe@example.com'\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"你可以使用 Record 类型来声明属性名还未确定的接口类型，如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type User = Record<string, string>;\n\nconst user: User = {\n  name: 'John Doe',\n  job: 'fe-developer',\n  email: 'john.doe@example.com',\n  bio: 'Make more interesting things!',\n  type: 'vip',\n  // ...\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"除了对象类型的声明与属性修饰，内置工具类型中还包括用于对象类型裁剪的 Pick 与 Omit。如果你使用过 Lodash 中的 Pick 与 Omit 方法，那么对这两个工具类型你基本一下就明白作用了："}),"\n",(0,s.jsx)(n.p,{children:"Pick 类型接收一个对象类型，以及一个字面量类型组成的联合类型，这个联合类型只能是由对象类型的属性名组成的。它会对这个对象类型进行裁剪，只保留你传入的属性名组成的部分："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type User = {\n  name: string;\n  age: number;\n  email: string;\n  phone: string;\n};\n\n// 只提取其中的 name 与 age 信息\ntype UserBasicInfo = Pick<User, 'name' | 'age'>;\n\nconst user: User = {\n  name: 'John Doe',\n  age: 30,\n  email: 'john.doe@example.com',\n  phone: '1234567890'\n};\n\nconst userBasicInfo: UserBasicInfo = {\n  name: 'John Doe',\n  age: 30\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"而 Omit 类型就是 Pick 类型的另一面，它的入参和 Pick 类型一致，但效果却是相反的——它会移除传入的属性名的部分，只保留剩下的部分作为新的对象类型："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type User = {\n  name: string;\n  age: number;\n  email: string;\n  phone: string;\n};\n\n// 只移除 phone 属性\ntype UserWithoutPhone = Omit<User, 'phone'>;\n\nconst user: User = {\n  name: 'John Doe',\n  age: 30,\n  email: 'john.doe@example.com',\n  phone: '1234567890'\n};\n\nconst userWithoutPhone: UserWithoutPhone = {\n  name: 'John Doe',\n  age: 30,\n  email: 'john.doe@example.com'\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Pick 与 Omit 类型是类型编程中相当重要的一个部分，举例来说，我们可以先声明一个代表全局所有状态的大型接口类型："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type User = {\n  name: string;\n  age: number;\n  email: string;\n  phone: string;\n  address: string;\n  gender: string;\n  occupation: string;\n  education: string;\n  hobby: string;\n  bio: string;\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后在我们的子组件中，可能只用到了其中一部分的类型，此时就可以使用 Pick 类型将我们需要的部分择出来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type UserBasicInfo = Pick<User, 'name' | 'age' | 'email'>;\n\nconst userBasicInfo: UserBasicInfo = {\n  name: 'John Doe',\n  age: 30,\n  email: 'john.doe@example.com'\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"反之，如果我们用到了大部分类型，只有数个类型需要移除，就可以使用 Omit 类型来减少一些代码量："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type UserDetailedInfo = Omit<User, 'name' | 'age' | 'email'>;\n\nconst userDetailedInfo: UserDetailedInfo = {\n  phone: '1234567890',\n  address: '123 Main St',\n  gender: 'male',\n  occupation: 'developer',\n  education: 'Bachelor',\n  hobby: 'reading',\n  bio: 'A passionate developer'\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"对象类型的处理是内置工具类型中占比较大的部分，除此以外，集合类型与函数类型也占有一席之地。比如集合类型的 Exclude 和 Extract，这两个名字可能不太好理解，但如果我说 差集 与 交集 你就懂了。Exclude 和 Extract 的作用也正是如此，只要你把联合类型看成一个类型组成的集合就好理解了。首先是代表差集的 Exclude，它能够从一个类型中移除另一个类型中也存在的部分："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type UserProps = 'name' | 'age' | 'email' | 'phone' | 'address';\ntype RequiredUserProps = 'name' | 'email';\n\n// OptionalUserProps = UserProps - RequiredUserProps\ntype OptionalUserProps = Exclude<UserProps, RequiredUserProps>;\n\nconst optionalUserProps: OptionalUserProps = 'age'; // 'age' | 'phone' | 'address';\n"})}),"\n",(0,s.jsx)(n.p,{children:"而 Extract 则用于提取另一个类型中也存在的部分，即交集："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type UserProps = 'name' | 'age' | 'email' | 'phone' | 'address';\ntype RequiredUserProps = 'name' | 'email';\n\ntype RequiredUserPropsOnly = Extract<UserProps, RequiredUserProps>;\n\nconst requiredUserPropsOnly: RequiredUserPropsOnly = 'name'; // 'name' | 'email';\n"})}),"\n",(0,s.jsx)(n.p,{children:"除了对象类型，函数类型也是一个能够被工具类型处理的重要部分。不妨先想想，对于函数类型，工具类型能起到什么作用？在函数类型一节中我们已经说到，函数类型=参数类型+返回值类型，这个定律适用于所有的函数类型定义。而我们一般又不会去修改参数与返回值位置的类型，那就只剩下读取了。内置工具类型中提供了 Parameters 和 ReturnType 这两个类型来提取函数的参数类型与返回值类型："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Add = (x: number, y: number) => number;\n\ntype AddParams = Parameters<Add>; // [number, number] 类型\ntype AddResult = ReturnType<Add>; // number 类型\n\nconst addParams: AddParams = [1, 2];\nconst addResult: AddResult = 3;\n"})}),"\n",(0,s.jsx)(n.p,{children:"那么如果，我们只有一个函数，而并没有这个函数类型呢？此时可以使用 TypeScript 提供的类型查询操作符，即 typeof（记得和 JavaScript 的 typeof 区分一下），来获得一个函数的结构化类型，再配合工具类型即可即可："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const addHandler = (x: number, y: number) => x + y;\n\ntype Add = typeof addHandler; // (x: number, y: number) => number;\n\ntype AddParams = Parameters<Add>; // [number, number] 类型\ntype AddResult = ReturnType<Add>; // number 类型\n\nconst addParams: AddParams = [1, 2];\nconst addResult: AddResult = 3;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["你可能会想到，对于异步函数类型，提取出的返回值类型是一个 ",(0,s.jsx)(n.code,{children:"Promise<string>"})," 这样的类型，如果我想提取 Promise 内部的 string 类型呢？贴心的 TypeScript 为你准备了 Awaited 类型用于解决这样的问题："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const promise = new Promise<string>((resolve) => {\n  setTimeout(() => {\n    resolve("Hello, World!");\n  }, 1000);\n});\n\ntype PromiseInput = Promise<string>;\ntype AwaitedPromiseInput = Awaited<PromiseInput>; // string\n'})}),"\n",(0,s.jsx)(n.p,{children:"你可以直接嵌套在 ReturnType 内部使用："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// 定义一个函数，该函数返回一个 Promise 对象\nasync function getPromise() {\n  return new Promise<string>((resolve) => {\n    setTimeout(() => {\n      resolve("Hello, World!");\n    }, 1000);\n  });\n}\n\ntype Result = Awaited<ReturnType<typeof getPromise>>; // string 类型\n'})}),"\n",(0,s.jsx)(n.p,{children:"以上这些虽然不是全部的 TypeScript 内置工具类型，但一定是最常用的部分。但是在很多时候，这些内置工具类型并不能满足我们的需要，比如说 Partial，如果我们只希望将某些特定的属性标记为可选，但 Partial 一定是全量生效的，此时该怎么办？"}),"\n",(0,s.jsx)(n.p,{children:"由于作为入门教程的缘故，我们并不会详细介绍这些特殊场景的解决方案，但其实目前我们所学习的相关知识已经足够给到你一些启发了，比如特殊属性标记为可选的这个场景，是否可以借助 Pick / Omit 类型的帮助？"}),"\n",(0,s.jsx)(n.p,{children:"到这一节，我们的类型世界之旅就结束了。回顾前文，我们从最简单的原始类型标记开始，一路学习了对象类型与函数类型，学习了常见的类型工具，再到这一节的工具类型，一步一步构建起了入门阶段完整的知识体系。之所以选择内置工具类型的应用作为类型之旅的收官，也是因为它就是入门阶段的突破口。一旦你熟练应用了这些工具类型，开始探究这些工具类型背后的实现原理，那么就可以恭喜你，迈出了新手村，开始面向更广阔的天地了。"})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let o=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["TypeScript%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%2F11.%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E7%B1%BB%E5%9E%8B%E4%B8%96%E7%95%8C%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95.md"]={toc:[],title:"11.内置工具类型（下）：类型世界的内置方法",headingTitle:"11.内置工具类型（下）：类型世界的内置方法",frontmatter:{}}}}]);