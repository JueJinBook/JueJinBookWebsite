"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["95053"],{29944:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var t=r(552676),s=r(740453);function i(e){let n=Object.assign({h3:"h3",a:"a",h1:"h1",pre:"pre",code:"code",p:"p",ul:"ul",li:"li",blockquote:"blockquote",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"",children:(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#",children:"#"})}),"\n",(0,t.jsxs)(n.h1,{id:"9案例八静态资源服务器---node-工具集---pathutilzlib-等",children:["9案例八：[静态资源服务器] - Node 工具集 - path、util、zlib 等",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9案例八静态资源服务器---node-工具集---pathutilzlib-等",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-!",children:"本节目标：【实现一个静态资源服务器】没有金刚钻，不揽瓷器活，而金刚钻，也需要得力小助手，在 Node 那就是文件路径，网址解析，参数处理，压缩解压等等这些贴心小工具。\n"})}),"\n",(0,t.jsx)(n.p,{children:"开始之前，我们把这几个模块导进来，看下有哪些小工具："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const path = require('path') \xa0 \xa0 \xa0// 路径模块\nconst qs = require('querystring') // 地址参数解析模块\nconst util = require('util')   \xa0 \xa0// 常用工具方法模块\nconst url = require('url')     \xa0 \xa0// URL 解析模块\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"node-默认提供的路径信息",children:["Node 默认提供的路径信息",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#node-默认提供的路径信息",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"当一个代码开始运行的时候，它是在哪个目录下，以及从什么位置运行，这些地址信息非常重要，那么在 Node 里面有哪些关键的地址信息呢，我们在最初 Node 源码解读和 CommonJS 规范讲解的时候就知道，在 Node 里面所写的任何一个 JS 模块，它都会被被这样的函数包起来："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"\n(function (exports, require, module, __filename, __dirname) {\n\xa0 // 我们的代码都写在这里 \n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["在代码内部就可以拿到传下来的 5 个参数变量，跟地址有关的是最后两个参数 ",(0,t.jsx)(n.code,{children:"__filename"}),"  和 \xa0",(0,t.jsx)(n.code,{children:"\\_\\_dirname"}),"，在 global 里面还有 process.cwd() 可以直接访问，它们都是跟路径相关的变量，我们来过一下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"./            当前文件所在目录，是个相对路径\n           \xa0 \xa0- 如：/Users/black/juejin/index.js\n          \xa0 \xa0 - index.js 的 ./ 是 /Users/black/juejin/\n__dirname     当前文件所在目录的完整目录名，也就是绝对路径\n           \xa0 \xa0- 如：/Users/black/juejin/node/\n__filename    当前文件所在目录的完整目录路径，含文件名\n           \xa0 \xa0- 如：/Users/black/juejin/node/package.json\nprocess.cwd() 当前执行 Node 命令时候的文件夹目录名 \n           \xa0 \xa0- 如：node index.js 就是 index.js 文件夹目录\n           \xa0 \xa0- 如：node ./lib/index.js 就是 lib 这一级的目录\n"})}),"\n",(0,t.jsxs)(n.p,{children:["其中 process.cwd() 这个特殊一些，大家要注意，文件的真实位置和程序启动文件时候所处的位置不一定是相同的，而 process.cwd() 就是指运行程序时候所处的目录，无论是文件还是文件夹，它都有针对当前运行程序的一个相对地址和一个相对于操作系统的绝对路径，其中相对地址随着参照物和运行程序会发生变化，而绝对路径是不变的，参考 ",(0,t.jsx)(n.a,{href:"https://nodejs.org/api/path.html#path_path_parse_path",target:"_blank",rel:"noopener noreferrer",children:"Node Path 的文档"}),"，一个绝对路径的组成是这样的："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'Linux：/home/user/www/pack.json       Windows：C:\\usr\\www\\pack.js        \n┌─────────────────────┬────────────┐ ┌─────────────────────┬────────────┐\n│       dir           │    base    │ │          dir        │    base    │\n├──────┬              ├──────┬─────┤ ├──────┬              ├──────┬─────┤\n│ root │              │ name │ ext │ │ root │              │ name │ ext │\n"  /    home/user/www  /pack .json " " C:\\      usr\\www    \\ pack  .js  "\n└──────┴──────────────┴──────┴─────┘ └──────┴──────────────┴──────┴─────┘\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"root \xa0 文件所在的根目录"}),"\n",(0,t.jsx)(n.li,{children:"dir   \xa0 文件所处的目录"}),"\n",(0,t.jsx)(n.li,{children:"base  由文件名和后缀名组成，是路径的最后一部分"}),"\n",(0,t.jsx)(n.li,{children:"name 文件名"}),"\n",(0,t.jsx)(n.li,{children:"ext     文件后缀名"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"我们在程序里能东奔西跑，就是靠路径的这几个组织层级，至于 path 是怎么组织路径的，我们接下来到 path 里面了解一下。"}),"\n",(0,t.jsxs)(n.h3,{id:"文件位置穿梭不迷路---path",children:["文件位置穿梭不迷路 - path",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文件位置穿梭不迷路---path",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["我们在文件堆中穿梭的时候，最害怕的就是进错目录，进错层级，还要考虑到 windows 系统和 Linux 系统的差异性，一个文件夹是 ",(0,t.jsx)(n.code,{children:"C:\\\\Users\\\\.."}),"，一个是 ",(0,t.jsx)(n.code,{children:"/Users/black/"}),"，目录的格式差别很大。"]}),"\n",(0,t.jsx)(n.p,{children:"我们在 windows 上和 Linux 上运行代码的时候，path 会自动判断当前的系统，从而做出相应的处理，比如"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"const file = '/Users/black/juejin/node/package.json'"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"const file = 'C:\\Users\\black\\juejin\\node\\package.json'"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"path 的几个常用的 API 比较简单，整理如下："}),"\n",(0,t.jsxs)(n.h3,{id:"参数的序列化与反序列化---querystring",children:["参数的序列化与反序列化 - querystring",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数的序列化与反序列化---querystring",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"前后端工程师合作时，可能提到最多的就是接口返回的数据格式和请求所传的参数了，前者是从服务端拿到的响应，而后者就是入参，参数一旦获取出错可能导致返回的数据出错，甚至会引发后端的一些程序运行异常，那么参数解析就变得非常关键，一个简单的地址参数可能长这个样子："}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://bd.juejin.im/?utm_campaign=bd&utm_source=web&utm_medium=link",target:"_blank",rel:"noopener noreferrer",children:(0,t.jsx)(n.a,{href:"https://bd.juejin.im/?utm%5C_campaign=bd&utm%5C_source=web&utm%5C_medium=link",target:"_blank",rel:"noopener noreferrer",children:"https://bd.juejin.im/?utm\\_campaign=bd&utm\\_source=web&utm\\_medium=link"})})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"一个复杂点的可能长这样子："}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://srd.simba.taobao.com/rd?w=mmp4ptest&f=https%3A%2F%2Fre.taobao.com%2Fauction%3Fkeyword%3D%26catid%3D50050587%26refpid%3Dtt_26632537_19294801_67276517%26crtid%3D1189307289%26itemid%3D572699375755%26adgrid%3D1016912923%26elemtid%3D1%26clk1info%3D1210788191%2C64%2CdPGasl8cWaKf4G0xY6c%252BLZZBixWUMilHWql2oFy2mXu521tWpp6T7wwyX7D1fRla%26sbid%3D%3B%3B%2C%3B31234%26nick%3D%25%5Cu6dd8%5Cu5b9d%5Cu6635%5Cu79f0%26qtype%3D5%26tagvalue%3D6459423679025591774_0_100%26isf%3D0&k=eb305a7ca09eeebf&pvid=0a67267d00005bd5b1c04ab300826baf&p=tt_26632537_19294801_67276517",target:"_blank",rel:"noopener noreferrer",children:(0,t.jsx)(n.a,{href:"https://srd.simba.taobao.com/rd?w=mmp4ptest&f=https%3A%2F%2Fre.taobao.com%2Fauction%3Fkeyword%3D%26catid%3D50050587%26refpid%3Dtt%5C_26632517%5C_19294801%5C_67276517%26crtid%3D1189307289%26itemid%3D572699375755%26adgrid%3D1016912923%26elemtid%3D1%26clk1info%3D1210788191%2C64%2CdPGasl8cWaKf4G0xY6c%252BLZZBixWUMilHWql2oFy2mXu521tWpp6T7wwyX7D1fRla%26sbid%3D%3B%3B%2C%3B31234%26nick%3D%25%5Cu6dd8%5Cu5b9d%5Cu6635%5Cu79f0%26qtype%3D5%26tagvalue%3D6459423679025591774%5C_0%5C_100%26isf%3D0&k=eb305a7ca09eeebf&pvid=0a67267d00005bd5b1c04ab300826baf&p=tt%5C_26632537%5C_19294801%5C_67276517",target:"_blank",rel:"noopener noreferrer",children:"https://srd.simba.taobao.com/rd?w=mmp4ptest&f=https%3A%2F%2Fre.taobao.com%2Fauction%3Fkeyword%3D%26catid%3D50050587%26refpid%3Dtt\\_26632517\\_19294801\\_67276517%26crtid%3D1189307289%26itemid%3D572699375755%26adgrid%3D1016912923%26elemtid%3D1%26clk1info%3D1210788191%2C64%2CdPGasl8cWaKf4G0xY6c%252BLZZBixWUMilHWql2oFy2mXu521tWpp6T7wwyX7D1fRla%26sbid%3D%3B%3B%2C%3B31234%26nick%3D%25%5Cu6dd8%5Cu5b9d%5Cu6635%5Cu79f0%26qtype%3D5%26tagvalue%3D6459423679025591774\\_0\\_100%26isf%3D0&k=eb305a7ca09eeebf&pvid=0a67267d00005bd5b1c04ab300826baf&p=tt\\_26632537\\_19294801\\_67276517"})})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"稍后我们再来拆解这两个 url，先来看下 querystring 几个主要方法："}),"\n",(0,t.jsx)(n.p,{children:"我们现在对前面的两个 url 地址参数进行解析："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"qs.parse('utm_campaign=bd&utm_source=web&utm_medium=link')\n// 解析出 3 个参数，解析为一个对象\n// { utm_campaign: 'bd', utm_source: 'web', utm_medium: 'link' }\nqs.stringify({ utm_campaign: 'bd', utm_source: 'web', utm_medium: 'link' }, '@@')\n// 参数的分隔符可以定制，比如 @@\n// utm_campaign=bd@@utm_source=web@@utm_medium=link\n\nqs.parse('https://srd.simba.taobao.com/rd?w=mmp4ptest&f=https%3A%2F%2Fre.taobao.com%2Fauction%3Fkeyword%3D%26catid%3D50050587%26refpid%3Dtt_26632537_19294801_67276517%26crtid%3D1189307289%26itemid%3D572699375755%26adgrid%3D1016912923%26elemtid%3D1%26clk1info%3D1210788191%2C64%2CdPGasl8cWaKf4G0xY6c%252BLZZBixWUMilHWql2oFy2mXu521tWpp6T7wwyX7D1fRla%26sbid%3D%3B%3B%2C%3B31234%26nick%3D%25%5Cu6dd8%5Cu5b9d%5Cu6635%5Cu79f0%26qtype%3D5%26tagvalue%3D6459423679025591774_0_100%26isf%3D0&k=eb305a7ca09eeebf&pvid=0a67267d00005bd5b1c04ab300826baf&p=tt_26632537_19294801_67276517')\n\n/* 解析出来 w/f/k/pvid/p 这 4 个参数\n{ w: 'mmp4ptest',\n  f:\n   'https://re.taobao.com/auction?keyword=&catid=50050587&refpid=tt_26632537_19294801_67276517&crtid=1189307289&itemid=572699375755&adgrid=1016912923&elemtid=1&clk1info=1210788191,64,dPGasl8cWaKf4G0xY6c%2BLZZBixWUMilHWql2oFy2mXu521tWpp6T7wwyX7D1fRla&sbid=;;,;31234&nick=%\\\\u6dd8\\\\u5b9d\\\\u6635\\\\u79f0&qtype=5&tagvalue=6459423679025591774_0_100&isf=0',\n  k: 'eb305a7ca09eeebf',\n  pvid: '0a67267d00005bd5b1c04ab300826baf',\n  p: 'tt_26632537_19294801_67276517' }\n*/\n"})}),"\n",(0,t.jsx)(n.p,{children:"其中 f 这个参数是一个二跳地址，它里面有 %，我们把它的参数解码一下"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"qs.unescape('keyword=&catid=50050587&refpid=tt_26632537_19294801_67276517&crtid=1189307289&itemid=572699375755&adgrid=1016912923&elemtid=1&clk1info=1210788191,64,dPGasl8cWaKf4G0xY6c%2BLZZBixWUMilHWql2oFy2mXu521tWpp6T7wwyX7D1fRla&sbid=;;,;31234&nick=%\\u6dd8\\u5b9d\\u6635\\u79f0&qtype=5&tagvalue=6459423679025591774_0_100&isf=0')"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"解码后，继续解析参数串："}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"qs.parse('keyword=&catid=50050587&refpid=tt_26632537_19294801_67276517&crtid=1189307289&itemid=572699375755&adgrid=1016912923&elemtid=1&clk1info=1210788191,64,dPGasl8cWaKf4G0xY6c+LZZBixWUMilHWql2oFy2mXu521tWpp6T7wwyX7D1fRla&sbid=;;,;31234&nick=%\\u6dd8\\u5b9d\\u6635\\u79f0&qtype=5&tagvalue=6459423679025591774_0_100&isf=0')"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"/* 解析出来一坨参数\n{ keyword: '',\n  catid: '50050587',\n  refpid: 'tt_26632537_19294801_67276517',\n  crtid: '1189307289',\n  itemid: '572699375755',\n  adgrid: '1016912923',\n  elemtid: '1',\n  clk1info:\n   '1210788191,64,dPGasl8cWaKf4G0xY6c LZZBixWUMilHWql2oFy2mXu521tWpp6T7wwyX7D1fRla',\n  sbid: ';;,;31234',\n  nick: '%\\\\u6dd8\\\\u5b9d\\\\u6635\\\\u79f0',\n  qtype: '5',\n  tagvalue: '6459423679025591774_0_100',\n  isf: '0' }\n*/\n"})}),"\n",(0,t.jsx)(n.p,{children:"其中 itemid 就是淘宝的商品 ID 了，有一个 nick 应该是用户昵称（这个已被我改过），是一个 utf8 编码的字符串，它从 utf8 转中文，就是淘宝昵称了。"}),"\n",(0,t.jsx)(n.p,{children:"所以在这个复杂点的场景里面，我们可以解析拿到二跳需要跳往的地址，同时带过去相应的参数，这个 url 就可以承载更多的业务逻辑了，比如商品定位，用户信息透传，类目信息包括媒体推广的流量跟踪等等，非常强大。"}),"\n",(0,t.jsxs)(n.h3,{id:"实用方法集---util",children:["实用方法集 - util",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实用方法集---util",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"util 一开始是给内部模块使用的，提供了很多好用的工具函数，现在作为 Node 的核心 API 暴露给开发者使用，我们也就不用自己实现了。"}),"\n",(0,t.jsxs)(n.table,{children:["\n",(0,t.jsxs)(n.thead,{children:["\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.th,{children:"util.callbackify(original)"}),"\n",(0,t.jsx)(n.th,{children:"promise 的代码风格转成 callback 风格"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.tbody,{children:["\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"util.promisify(original)"}),"\n",(0,t.jsx)(n.td,{children:"callback 的代码风格转成 promise 风格"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"util.format(format[, ...args])"}),"\n",(0,t.jsx)(n.td,{children:"字符串格式化处理"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"util.isDeepStrictEqual(val1, val2)"}),"\n",(0,t.jsx)(n.td,{children:"比对两个变量是否严格相等"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"util.inherits(constructor, superConstructor)"}),"\n",(0,t.jsx)(n.td,{children:"与 class 的 extends 相同，继承父类的方法属性"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"util.inspect(object[, options])"}),"\n",(0,t.jsx)(n.td,{children:"对传入对象进行字符串格式化操作"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"util.types"}),"\n",(0,t.jsx)(n.td,{children:"各种数据类型的判断"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"当然还有其他的 API，比如对于废弃 API 的提示等，不再一一列举，他们在特定的场景下，都非常有用，特别是 util.types 来判断数据类型，可能是用到非常高频的 API，我们单独看下 promisify，这个是我个人最喜欢的一个工具函数了，可以把 callback 转成 promise，最开始想要把一个 callback 包装成 promise，通常会这么干："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { readFile } = require('fs')\nconst { join } = require('path')\nconst filePath = join(__dirname, './package.json.')\n\nconst readFileAsync = (filePath) => {\n  return new Promise((resolve, reject) => {\n    readFile(filePath, 'utf8', (err, data) => {\n      if (err) reject(err)\n      else resolve(data)\n    })\n  })\n}\n\nreadFileAsync(filePath)\n  .then(data => console.log(data.toString()))\n"})}),"\n",(0,t.jsx)(n.p,{children:"现在有了 promisify，就简单多了："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { readFile } = require('fs')\nconst { join } = require('path')\nconst { promisify } = require('util') \nconst filePath = join(__dirname, './package.json')\nconst readFileAsync = promisify(readFile)\n\nreadFileAsync(filePath)\n  .then(data => console.log(data.toString()))\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"网址解析利器---url",children:["网址解析利器 - url",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#网址解析利器---url",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'┌─────────────────────────────────────────────────────────────────────────────────────────────┐\n│                                            href                                             │\n├──────────┬──┬─────────────────────┬─────────────────────┬───────────────────────────┬───────┤\n│ protocol │  │        auth         │        host         │           path            │ hash  │\n│          │  │                     ├──────────────┬──────┼──────────┬────────────────┤       │\n│          │  │                     │   hostname   │ port │ pathname │     search     │       │\n│          │  │                     │              │      │          ├─┬──────────────┤       │\n│          │  │                     │              │      │          │ │    query     │       │\n"  https:   //    user   :   pass   @ sub.host.com : 8080   /p/a/t/h  ?  query=string   #hash "\n│          │  │          │          │   hostname   │ port │          │                │       │\n│          │  │          │          ├──────────────┴──────┤          │                │       │\n│ protocol │  │ username │ password │        host         │          │                │       │\n├──────────┴──┼──────────┴──────────┼─────────────────────┤          │                │       │\n│   origin    │                     │       origin        │ pathname │     search     │ hash  │\n├─────────────┴─────────────────────┴─────────────────────┴──────────┴────────────────┴───────┤\n│                                            href                                             │\n└─────────────────────────────────────────────────────────────────────────────────────────────┘\n(all spaces in the "" line should be ignored — they are purely for formatting)\n'})}),"\n",(0,t.jsx)(n.p,{children:"结合上图，一个 url 可以是这个样子："}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://usr:pwd@juejin.com:8080/a/b/c/d?q=js&cat=3&#hash",target:"_blank",rel:"noopener noreferrer",children:(0,t.jsx)(n.a,{href:"https://usr:pwd@juejin.com:8080/a/b/c/d?q=js&cat=3&#hash",target:"_blank",rel:"noopener noreferrer",children:"https://usr:pwd@juejin.com:8080/a/b/c/d?q=js&cat=3&#hash"})})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"在命令行中，我们 url.parse 一下，所解析出来的，跟上图也能对应上："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"url.parse('https://usr:pwd@juejin.com:8080/a/b/c/d?q=js&cat=3&#hash')\nUrl {\n  // 请求协议，比如 http、https、ftp、file 等\n  protocol: 'https:',\n  // 协议的 : 号有没有 /\n  slashes: true,\n  // url 的认证信息，跟上 @ 来区分认证部分和域名部分\n  auth: 'usr:pwd',\n  // url 的主机名\n  host: 'juejin.com:8080',\n  // 主机端口号\n  port: '8080',\n  // 主机名\n  hostname: 'juejin.com',\n  // 锚点部分，用 # 标识\n  hash: '#hash',\n  // 查询参数，包含 ?\n  search: '?q=js&cat=3&',\n  // 查询参数的字符串部分，不包含 ?\n  query: 'q=js&cat=3&',\n  // url 中的路径部分\n  pathname: '/a/b/c/d',\n  // 完整路径，由 pathname 和 search 组成\n  path: '/a/b/c/d?q=js&cat=3&',\n  // 链接地址\n  href: 'https://usr:pwd@juejin.com:8080/a/b/c/d?q=js&cat=3&#hash'\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"除了 parse，Node 还提供了一个 URL 类，挂到了 global 上面，通过它可以 new 一个 URL 实例出来，来拿到所有特定的属性值，而且还可以修改任意的属性值："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const url = new URL('https://usr:pwd@juejin.com:8080/a/b/c/d?q=js&cat=3#hash')\nconsole.log(url.hash)\n// #hash\nurl.hash = 'newHash'\nurl.port = 7000\nurl.pathname = '/e/f'\nconsole.log(url.href)\n// https://usr:pwd@juejin.com:7000/e/f?q=js&cat=3#newHash\n"})}),"\n",(0,t.jsx)(n.p,{children:"除了解析 url，我们反过来也可以根据一个对象生成一个 url 地址："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const url = require('url')\n\nconst href = url.format({\n  protocol: 'https',\n  hostname: 'juejin.com',\n  port: '8080',\n  pathname: '/a/b/c/d',\n  auth: 'usr:pwd',\n  hash: '#hash',\n  query: {\n    q: 'js',\n    cat: 3\n  }\n})\n\n// https://usr:pwd@juejin.com:8080/a/b/c/d?q=js&cat=3#hash\n"})}),"\n",(0,t.jsx)(n.p,{children:"或者是通过 resolve 来拼接一个 url 地址，比如："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const url = require('url')\n\nconst href = url.resolve('https://juejin.com/book', '/3')\n// 'https://juejin.com/book/3'\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"编程练习---静态服务器搭建",children:["编程练习 - 静态服务器搭建",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编程练习---静态服务器搭建",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在 Node 里面，起一个服务器非常简单："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const server = http.createServer((req, res) => {\n  //\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"但是要让这个服务器可以响应不同的静态资源，就需要考虑情况，做必要的判断甚至压缩处理，这时候小工具们就派上用场了，我们来实现一个静态服务器："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"#!/usr/bin/env node\n\nconst fs = require('fs')\nconst url = require('url')\nconst http = require('http')\nconst path = require('path')\nconst zlib = require('zlib')\nconst wwwroot = '/home/admin/wwwroot'\nconst mimeType = {\n  '.ico': 'image/x-icon',\n  '.md': 'text/plain',\n  '.html': 'text/html',\n  '.js': 'application/javascript',\n  '.json': 'application/json',\n  '.css': 'text/css',\n  '.png': 'image/png',\n  '.jpg': 'image/jpeg',\n  '.wav': 'audio/wav',\n  '.mp3': 'audio/mpeg',\n  '.svg': 'image/svg+xml',\n  '.pdf': 'application/pdf',\n  '.doc': 'application/msword',\n  '.eot': 'appliaction/vnd.ms-fontobject',\n  '.ttf': 'aplication/font-sfnt'\n}\n\nconst server = http.createServer((req, res) => {\n  const { pathname } = url.parse(req.url)\n  const filePath = path.join(wwwroot, pathname)\n  const ext = path.extname(pathname)\n  // 参数合法性校验  \n  // 1. 非允许后缀的资源不予返回\n  if (!mimeType[ext]) {\n    res.writeHead(404)\n    return res.end()\n  }\n  // 2. 若后缀合法，判断文件是否存在\n  if (!fs.existsSync(filePath)) {\n    return (res.statusCode = 404)\n  }\n  // 3. 若文件存在，判断是否是文件类型\n  const fStat = fs.statSync(filePath)\n  if (!fStat.isFile()) {\n    return (res.statusCode = 404)\n  }\n  // 4. 若合法存在，判断是否位于 wwwroot 目录下\n  if (!filePath.startsWith(wwwroot)) {\n    return (res.statusCode = 404)\n  }\n\n  // 5. 304 缓存有效期判断, 使用 If-Modified-Since，用 Etag 也可以\n  const modified = req.headers['if-modified-since']\n  const expectedModified = new Date(fStat.mtime).getTime()\n  if (modified && modified == expectedModified) {\n    res.statusCode = 304\n    res.setHeader('Content-Type', mimeType[ext])\n    res.setHeader('Cache-Control', 'max-age=3600')\n    res.setHeader('Last-Modified', new Date(expectedModified).toGMTString())\n    return\n  }\n\n  // 6. 文件头信息设置\n  res.statusCode = 200\n  res.setHeader('Content-Type', mimeType[ext])\n  res.setHeader('Cache-Control', 'max-age=3600')\n  res.setHeader('Content-Encoding', 'gzip')\n  res.setHeader('Last-Modified', new Date(expectedModified).toGMTString())\n\n  // 7. gzip 压缩后，把文件流 pipe 回去\n  const stream = fs.createReadStream(filePath, {\n    flags: 'r', encoding: 'utf8'\n  })\n  stream.on('error', () => {\n    res.writeHead(404)\n    res.end()\n  })\n  stream.pipe(zlib.createGzip()).pipe(res)\n})\n\nserver.on('error', error => console.log(error))\nserver.listen(4000, '127.0.0.1')\n"})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}let d=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B%E6%8E%8C%E6%8F%A1%20NodeJS%20%E6%A0%B8%E5%BF%83%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F9%E6%A1%88%E4%BE%8B%E5%85%AB%EF%BC%9A%5B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%5D%20-%20Node%20%E5%B7%A5%E5%85%B7%E9%9B%86%20-%20path%E3%80%81util%E3%80%81zlib%20%E7%AD%89.md"]={toc:[{text:"",id:"",depth:3},{text:"Node 默认提供的路径信息",id:"node-默认提供的路径信息",depth:3},{text:"文件位置穿梭不迷路 - path",id:"文件位置穿梭不迷路---path",depth:3},{text:"参数的序列化与反序列化 - querystring",id:"参数的序列化与反序列化---querystring",depth:3},{text:"实用方法集 - util",id:"实用方法集---util",depth:3},{text:"网址解析利器 - url",id:"网址解析利器---url",depth:3},{text:"编程练习 - 静态服务器搭建",id:"编程练习---静态服务器搭建",depth:3}],title:"9案例八：[静态资源服务器] - Node 工具集 - path、util、zlib 等",headingTitle:"9案例八：[静态资源服务器] - Node 工具集 - path、util、zlib 等",frontmatter:{}}}}]);