"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["4663"],{91933:function(n,e,r){r.r(e),r.d(e,{default:()=>x});var i=r(552676),s=r(740453);function d(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",p:"p",ol:"ol",pre:"pre",code:"code",strong:"strong",img:"img"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"18进阶-5基于-nginx-的-api-部署方案",children:["18进阶 5：基于 Nginx 的 API 部署方案",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#18进阶-5基于-nginx-的-api-部署方案",children:"#"})]}),"\n",(0,i.jsxs)(e.h2,{id:"本节核心内容",children:["本节核心内容",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#本节核心内容",children:"#"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"介绍 Nginx"}),"\n",(0,i.jsx)(e.li,{children:"介绍如何安装 Nginx"}),"\n",(0,i.jsx)(e.li,{children:"介绍如何配置 Nginx"}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["本小节源码下载路径：",(0,i.jsx)(e.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo14",target:"_blank",rel:"noopener noreferrer",children:"demo14"})]}),"\n",(0,i.jsx)(e.p,{children:"可先下载源码到本地，结合源码理解后续内容，边学边练。"}),"\n",(0,i.jsxs)(e.p,{children:["本小节的代码是基于 ",(0,i.jsx)(e.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo13",target:"_blank",rel:"noopener noreferrer",children:"demo13"})," 来开发的。"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"nginx-介绍",children:["Nginx 介绍",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#nginx-介绍",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Nginx 是一个自由、开源、高性能及轻量级的 HTTP 服务器和反向代理服务器，它有很多功能，主要功能为："}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"正向代理"}),"\n",(0,i.jsx)(e.li,{children:"反向代理"}),"\n",(0,i.jsx)(e.li,{children:"负载均衡"}),"\n",(0,i.jsx)(e.li,{children:"HTTP 服务器（包含动静分离）"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"本小册使用了 Nginx 反向代理和负载均衡的功能。"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["Nginx 的更详细介绍可以参考 ",(0,i.jsx)(e.a,{href:"https://www.cnblogs.com/jingmoxukong/p/5945200.html",target:"_blank",rel:"noopener noreferrer",children:"nginx简易教程"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"nginx-反向代理功能",children:["Nginx 反向代理功能",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#nginx-反向代理功能",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Nginx 最常用的功能之一是作为一个反向代理服务器。反向代理（Reverse Proxy）是指以代理服务器来接收 Internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器（摘自百度百科）。"}),"\n",(0,i.jsx)(e.p,{children:"为什么需要反向代理呢？在实际的生产环境中，服务部署的网络（内网）跟外部网络（外网）通常是不通的，需要通过一台既能够访问内网又能够访问外网的服务器来做中转，这种服务器就是反向代理服务器。Nginx 作为反向代理服务器，简单的配置如下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-nginx",children:"    server {                     \r\n        listen      80;           \r\n        server_name  apiserver.com;    \r\n        client_max_body_size 1024M;\r\n                                 \r\n        location / {             \r\n            proxy_set_header Host $http_host;\r\n            proxy_set_header X-Forwarded-Host $http_host;\r\n            proxy_set_header X-Real-IP $remote_addr;\r\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n            proxy_pass  http://127.0.0.1:8080/;\r\n            client_max_body_size 100m;\r\n        }                        \r\n    }                            \n"})}),"\n",(0,i.jsx)(e.p,{children:"Nginx 在做反向代理服务器时，能够根据不同的配置规则转发到后端不同的服务器上。"}),"\n",(0,i.jsxs)(e.h2,{id:"nginx-负载均衡功能",children:["Nginx 负载均衡功能",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#nginx-负载均衡功能",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Nginx 另一个常用的功能是负载均衡，所谓的负载均衡就是指当 Nginx 收到一个 HTTP 请求后，会根据负载策略将请求转发到不同的后端服务器上。比如，apiserver 部署在两台服务器 A 和 B 上，当请求到达 Nginx 后，Nginx 会根据 A 和 B 服务器上的负载情况，将请求转发到负载较小的那台服务器上。这里要求 apiserver 是无状态的服务。"}),"\n",(0,i.jsxs)(e.h2,{id:"安装和启动-nginx需要切换到-root-用户",children:["安装和启动 Nginx（需要切换到 root 用户）",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#安装和启动-nginx需要切换到-root-用户",children:"#"})]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"安装 Nginx（CentOS 7.x 安装流程）"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"$ yum -y install nginx\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsx)(e.li,{children:"确认 Nginx 安装成功"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"$ nginx -v\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"3",children:["\n",(0,i.jsx)(e.li,{children:"启动 Nginx"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"$ systemctl start nginx\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"4",children:["\n",(0,i.jsx)(e.li,{children:"设置开机启动"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"$ systemctl enable nginx\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"5",children:["\n",(0,i.jsx)(e.li,{children:"查看 Nginx 启动状态"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"$ systemctl status nginx\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Nginx 常用命令"})}),"\n",(0,i.jsxs)(e.p,{children:["Nginx 常用命令如下（执行 ",(0,i.jsx)(e.code,{children:"which nginx"})," 可以找到 Nginx 命令所在的路径）："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"nginx -s stop       快速关闭 Nginx，可能不保存相关信息，并迅速终止 Web 服务\r\nnginx -s quit       平稳关闭 Nginx，保存相关信息，有安排的结束 Web 服务\r\nnginx -s reload     因改变了 Nginx 相关配置，需要重新加载配置而重载\r\nnginx -s reopen     重新打开日志文件\r\nnginx -c filename   为 Nginx 指定一个配置文件，来代替默认的\r\nnginx -t            不运行，而仅仅测试配置文件。Nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件\r\nnginx -v            显示 Nginx 的版本\r\nnginx -V            显示 Nginx 的版本、编译器版本和配置参数\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["Nginx 默认监听 80 端口，启动 Nginx 前要确保 80 端口没有被占用。当然你也可以通过修改 Nginx 配置文件 ",(0,i.jsx)(e.code,{children:"/etc/nginx/nginx.conf"})," 改 Nginx 监听端口。"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"配置-nginx-作为反向代理",children:["配置 Nginx 作为反向代理",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置-nginx-作为反向代理",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["假定要访问的 API 服务器域名为 ",(0,i.jsx)(e.code,{children:"apiserver.com"}),"，在 ",(0,i.jsx)(e.code,{children:"/etc/nginx/nginx.conf"})," 配置 API 服务器的 ",(0,i.jsx)(e.code,{children:"server"})," 入口："]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/6/5/163ce6bd14b27589?w=1128&h=785&f=png&s=44586",alt:""})}),"\n",(0,i.jsx)(e.p,{children:"完成 nginx.conf 内容如下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-nginx",children:'user  nginx;\r\nworker_processes  1;\r\n\r\nerror_log  /var/log/nginx/error.log warn;\r\npid        /var/run/nginx.pid;\r\n\r\n\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n    include       /etc/nginx/mime.types;\r\n    default_type  application/octet-stream;\r\n\r\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\r\n                      \'$status $body_bytes_sent "$http_referer" \'\r\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\r\n\r\n    access_log  /var/log/nginx/access.log  main;\r\n\r\n    sendfile        on;\r\n    #tcp_nopush     on;\r\n\r\n    keepalive_timeout  65;\r\n\r\n    #gzip  on;\r\n\r\n    include /etc/nginx/conf.d/*.conf;\r\n\r\n    server {  \r\n        listen      80;                                                        \r\n        server_name  apiserver.com;                                              \r\n        client_max_body_size 1024M;\r\n\r\n        location / {\r\n            proxy_set_header Host $http_host;\r\n            proxy_set_header X-Forwarded-Host $http_host;\r\n            proxy_set_header X-Real-IP $remote_addr;\r\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n            proxy_pass  http://127.0.0.1:8080/;\r\n            client_max_body_size 5m;\r\n        }\r\n    } \r\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"配置说明"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["由于 Nginx 默认允许客户端请求的最大单文件字节数为 1MB，实际生产环境中可能太小，所以这里将此限制改为 5MB（",(0,i.jsx)(e.code,{children:"client_max_body_size 5m"}),"）"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"server_name"}),"：说明使用哪个域名来访问"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"proxy_pass"}),"：反向代理的路径（这里是本机的 API 服务，所以IP为 127.0.0.1。端口要和 API 服务端口一致：8080）"]}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"如果需要上传图片之类的，可能需要设置成更大的值，比如 50m。"}),"\n",(0,i.jsx)(e.p,{children:"因为 Nginx 配置选项比较多，跟实际需求和环境有关，所以这里的配置是基础的、未经优化的配置，在实际生产环境中，需要读者再做调节。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"测试"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"配置完 Nginx 后重启 Nginx"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"$ systemctl restart nginx\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsx)(e.li,{children:"在编译完 apiserver 后，启动 API 服务器"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"$ ./apiserver\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"3",children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["在 ",(0,i.jsx)(e.code,{children:"/etc/hosts"})," 中添加一行：",(0,i.jsx)(e.code,{children:"127.0.0.1 apiserver.com"})]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"发送 HTTP 请求"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'$ curl -XGET -H "Content-Type: application/json" -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ" http://apiserver.com/v1/user \r\n\r\n{\r\n  "code": 0,\r\n  "message": "OK",\r\n  "data": {\r\n    "totalCount": 1,\r\n    "userList": [\r\n      {\r\n        "id": 0,\r\n        "username": "admin",\r\n        "sayHello": "Hello Jypl3DSig",\r\n        "password": "$2a$10$veGcArz47VGj7l9xN7g2iuT9TF21jLI1YGXarGzvARNdnt4inC9PG",\r\n        "createdAt": "2018-05-28 00:25:33",\r\n        "updatedAt": "2018-05-28 00:25:33"\r\n      }\r\n    ]\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"可以看到成功通过代理访问后端的 API 服务。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"请求流程说明"})}),"\n",(0,i.jsxs)(e.p,{children:["在用 ",(0,i.jsx)(e.code,{children:"curl"})," 请求 ",(0,i.jsx)(e.code,{children:"http://apiserver.com/v1/user"})," 后，后端的请求流程实际上是这样的："]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["因为在 ",(0,i.jsx)(e.code,{children:"/etc/hosts"})," 中配置了 ",(0,i.jsx)(e.code,{children:"127.0.0.1 apiserver.com"}),"，所以请求 ",(0,i.jsx)(e.code,{children:"http://apiserver.com/v1/use"})," 实际上是请求本机的 Nginx 端口（",(0,i.jsx)(e.code,{children:"127.0.0.1:80"}),"）"]}),"\n",(0,i.jsxs)(e.li,{children:["Nginx 在收到请求后，解析到请求域名为 ",(0,i.jsx)(e.code,{children:"apiserver.com"}),"，根据请求域名去匹配 Nginx 的 server 配置，匹配到 ",(0,i.jsx)(e.code,{children:"server_name  apiserver.com"})," 配置"]}),"\n",(0,i.jsxs)(e.li,{children:["匹配到 server 后，把请求转发到该 server 的 ",(0,i.jsx)(e.code,{children:"proxy_pass"})," 路径"]}),"\n",(0,i.jsx)(e.li,{children:"等待 API 服务器返回结果，并返回客户端"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"配置-nginx-作为负载均衡",children:["配置 Nginx 作为负载均衡",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置-nginx-作为负载均衡",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"负载均衡的演示需要多个后端服务，为此我们在同一个服务器上启动多个 apiserver，配置不同的端口（8080、8082），并采用 Nginx 默认的轮询转发策略（轮询：每个请求按时间顺序逐一分配到不同的后端服务器）。"}),"\n",(0,i.jsxs)(e.p,{children:["在 ",(0,i.jsx)(e.code,{children:"/etc/nginx/nginx.conf"})," 中添加 ",(0,i.jsx)(e.code,{children:"upstream "})," 配置："]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/6/5/163ce86c83907507?w=1147&h=877&f=png&s=49330",alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"配置说明"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["因为有多个后端，所以需要将之前固定的后端 ",(0,i.jsx)(e.code,{children:"proxy_pass  http://127.0.0.1:8080/"})," 换成具有多个后端的 ",(0,i.jsx)(e.code,{children:"apiserver.com"}),"（通过 ",(0,i.jsx)(e.code,{children:"upstream"}),"）"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"upstream"})," 配置中配置多个后端（ip:port）"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-nginx",children:"    upstream apiserver.com {\r\n        server 127.0.0.1:8080;\r\n        server 127.0.0.1:8082;\r\n    }   \n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"测试"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"配置完 Nginx 后重启 Nginx"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"$ systemctl restart nginx\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsxs)(e.li,{children:["这里需要构建并发请求，编写测试脚本 ",(0,i.jsx)(e.code,{children:"test.sh"}),"，内容为："]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'#!/bin/bash\r\n\r\n\r\nfor n in $(seq 1 1 10)\r\ndo\r\n    nohup curl -XGET -H "Content-Type: application/json" -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ" http://apiserver.com/v1/user &>/dev/null\r\ndone\n'})}),"\n",(0,i.jsxs)(e.ol,{start:"3",children:["\n",(0,i.jsxs)(e.li,{children:["为了展示哪个 API 被调用，需要在查询用户列表的入口函数（",(0,i.jsx)(e.code,{children:"handler/user/list.go "}),"文件中的 ",(0,i.jsx)(e.code,{children:"List()"})," 函数）中添加日志打印信息："]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/6/5/163ce972c78297b1?w=961&h=728&f=png&s=34502",alt:""})}),"\n",(0,i.jsxs)(e.ol,{start:"4",children:["\n",(0,i.jsx)(e.li,{children:"在相同服务器上启动两个不同的 HTTP 端口：8080 和 8082"}),"\n",(0,i.jsx)(e.li,{children:"执行 test.sh 脚本"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"$ ./test.sh\n"})}),"\n",(0,i.jsx)(e.p,{children:"观察 API 日志，可以看到请求被均衡地转发到后端的两个服务："}),"\n",(0,i.jsx)(e.p,{children:"apiserver1（8080 端口）："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/6/5/163ce8e0330b4ac1?w=1361&h=564&f=png&s=86186",alt:""})}),"\n",(0,i.jsx)(e.p,{children:"apiserver2（8082 端口）:"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/6/5/163ce8e1f0308e86?w=1415&h=548&f=png&s=82778",alt:""})}),"\n",(0,i.jsxs)(e.h2,{id:"小结",children:["小结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"在生产环境中，API 服务器所在的网络通常不能直接通过外网访问，需要通过可从外网访问的 Nginx 服务器，将请求转发到内网的 API 服务器。并且随着业务规模越来越大，请求量也会越来越大，这时候需要将 API 横向扩容，也需要 Nginx。所以在实际的 API 服务部署中 Nginx 经常能派上用场。通过本小节的学习，读者可以了解到如何在实际生产环境中部署 API 服务。"})]})}function c(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}let x=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F18%E8%BF%9B%E9%98%B6%205%EF%BC%9A%E5%9F%BA%E4%BA%8E%20Nginx%20%E7%9A%84%20API%20%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88.md"]={toc:[{text:"本节核心内容",id:"本节核心内容",depth:2},{text:"Nginx 介绍",id:"nginx-介绍",depth:2},{text:"Nginx 反向代理功能",id:"nginx-反向代理功能",depth:2},{text:"Nginx 负载均衡功能",id:"nginx-负载均衡功能",depth:2},{text:"安装和启动 Nginx（需要切换到 root 用户）",id:"安装和启动-nginx需要切换到-root-用户",depth:2},{text:"配置 Nginx 作为反向代理",id:"配置-nginx-作为反向代理",depth:2},{text:"配置 Nginx 作为负载均衡",id:"配置-nginx-作为负载均衡",depth:2},{text:"小结",id:"小结",depth:2}],title:"18进阶 5：基于 Nginx 的 API 部署方案",headingTitle:"18进阶 5：基于 Nginx 的 API 部署方案",frontmatter:{}}}}]);