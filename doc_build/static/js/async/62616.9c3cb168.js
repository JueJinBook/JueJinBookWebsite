"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["62616"],{28489:function(e,n,r){e.exports=r.p+"static/image/19c1fec5c80f18f3a945b7a145445566.cd562fd0.webp"},499913:function(e,n,r){e.exports=r.p+"static/image/222c35eebfc68dab375209b0dd2f3bbb.8814b2a4.gif"},592125:function(e,n,r){e.exports=r.p+"static/image/79c4a1bbfefc79047cfd2d733a237935.575297ff.webp"},323916:function(e,n,r){e.exports=r.p+"static/image/c5385f9be7b39dd5c9377b0f1f9c515f.71d7165c.webp"},458459:function(e,n,r){e.exports=r.p+"static/image/ccbcefeec87bf09b3da5747b7fc7aec7.b7aadf7f.webp"},742239:function(e,n,r){e.exports=r.p+"static/image/d523a8a0a209f2e18e6043f1c20a083d.0d6a1733.webp"},425842:function(e,n,r){r.r(n),r.d(n,{default:()=>O});var s=r(552676),t=r(740453),a=r(458459),c=r(742239),i=r(499913);let l=r.p+"static/image/2c191b0ad6cb75c0eceed237750b9e28.7382ae96.webp",o=r.p+"static/image/1683e83e95ddf564658953d938b618ba.300903f0.webp",p=r.p+"static/image/f3d4f8036523a6c3370ae926d257f7b8.ec41464e.gif",d=r.p+"static/image/a8d3ca9a48c39bbc97e67d17868b2922.deea727b.webp",g=r.p+"static/image/f63d1688a6b3c44d360dd914261ba693.4f6edcb9.webp";var m=r(28489),h=r(592125);let j=r.p+"static/image/2a1e6306da108ac0878ca3fb56393469.34c34216.webp",x=r.p+"static/image/4abcacc9a8d2a429f1d9eb61f30badbb.5922479c.webp",f=r.p+"static/image/d128498bdedec1e7e658082702611808.fdb817e9.webp",u=r.p+"static/image/76bd3813694d32494fec0ffd33602587.81698105.webp",b=r.p+"static/image/501186b39b5cc4788717693843c4e711.4691018d.gif",y=r.p+"static/image/d826489e33462390b9643ae20d05e158.dea8b173.gif",w=r.p+"static/image/23415ab863dcbdfdf44ed67868b56213.6e8aeaf6.webp",v=r.p+"static/image/7f93a06ebc9202453438d8227a43bd89.06ce5555.gif",k=r.p+"static/image/d4f234d390808b439da5e2d645df8074.1412e3e2.webp",G=r.p+"static/image/0fc0bd6f7bfa9f725dc21075cf1cd89c.61c58ae8.webp",A=r.p+"static/image/3d518ffe8d3fa4621b063dd24b1b8853.841f8800.webp",E=r.p+"static/image/3137b9fe52a8f83e2895613f1edbbfba.5ef31849.webp",S=r.p+"static/image/f6c6cc6d74a92c3d2b1ad1a31422315a.c444b2d6.webp",C=r.p+"static/image/9690b3db323f88f752bce61da2b426af.b9576d62.webp",M=r.p+"static/image/698ee4b2d154d86884a4040a075c85ff.2485a95c.webp",N=r.p+"static/image/c0c2e46c19d077733af613f725d00f07.0bffcddf.webp",_=r.p+"static/image/fa59c1bc7ba55fd5797120c69d1ef939.1c5aff8b.webp",T=r.p+"static/image/6a01eeb7506f728b662ec42b5225399f.e736fe18.webp",B=r.p+"static/image/5aca2d3e0d303679644ee483cdaf819a.eda8aede.webp",U=r.p+"static/image/c213d05fa03c8de0824bf03bad0e0c17.5e7ea24b.webp",R=r.p+"static/image/2ac52894168666e8a2c8db8623a3d2f9.577944ab.gif";var q=r(323916);let I=r.p+"static/image/04f7de4c3c2f72546e682d4173edaed4.96ca2154.webp";function P(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"75-passport-实现-google-三方账号登录",children:["75. passport 实现 Google 三方账号登录",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#75-passport-实现-google-三方账号登录",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上节我们实现了 Github 登录，这节继续来实现下 Google 登录。"}),"\n",(0,s.jsx)(n.p,{children:"创建个 nest 项目："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest new google-login\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"进入项目，安装 passport 的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save passport @nestjs/passport\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后安装 google 的策略包。"}),"\n",(0,s.jsxs)(n.p,{children:["这个可以去 ",(0,s.jsx)(n.a,{href:"https://www.passportjs.org/packages/",target:"_blank",rel:"noopener noreferrer",children:"passport 的网站"}),"搜索："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"找下载量最多的那个。"}),"\n",(0,s.jsx)(n.p,{children:"然后安装下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save passport-google-oauth20\nnpm install --save-dev @types/passport-google-oauth20\n"})}),"\n",(0,s.jsx)(n.p,{children:"我们先做 google 登录，很明显，最关键的也是要获取 client id 和 client secret。"}),"\n",(0,s.jsxs)(n.p,{children:["打开 google cloud 的控制台页面",(0,s.jsx)(n.a,{href:"https://console.cloud.google.com/welcome",target:"_blank",rel:"noopener noreferrer",children:"https://console.cloud.google.com/welcome"})]}),"\n",(0,s.jsx)(n.p,{children:"点击左上角的按钮，然后点击 new project："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"填入项目名后点击 create："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"点击左上角的按钮切换到你刚刚创建的 project："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"进入 api & service 页面："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"点击 OAuth consent screen，然后勾选 external，点击 create："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"输入三个必填信息："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"点击 save and continue。"}),"\n",(0,s.jsx)(n.p,{children:"然后点击 Credentials 创建凭证："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"输入应用类型、name、填入授权的域名、回调的 url，点击 create："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样 client id 和 client secret 就生成好了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"接下来写代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g module auth\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"生成 auth 模块，然后创建 auth/google.strategy.ts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-google-oauth20';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: '122695705559-9nr9alq0s53e2pr3vkiv2h7vau917ic4.apps.googleusercontent.com',\n      clientSecret: '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',\n      callbackURL: 'http://localhost:3000/callback/google',\n      scope: ['email', 'profile'],\n    });\n  }\n\n  validate (accessToken: string, refreshToken: string, profile: any) {\n    const { name, emails, photos } = profile\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n      accessToken\n    }\n    return user;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里填入刚刚的 clientID、clientSecret、callbackURL。"}),"\n",(0,s.jsx)(n.p,{children:"然后在 AuthModule 引入："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { GoogleStrategy } from './google.strategy';\n\n@Module({\n    providers: [GoogleStrategy]\n})\nexport class AuthModule {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"之后在 AppController 添加两个路由："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Req, UseGuards } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  async googleAuth() {}\n\n  @Get('callback/google')\n  @UseGuards(AuthGuard('google'))\n  googleAuthRedirect(@Req() req) {\n    if (!req.user) {\n      return 'No user from google'\n    }\n\n    return {\n      message: 'User information from google',\n      user: req.user\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"一个是登录的，一个是回调的。"}),"\n",(0,s.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:k,alt:""}),"\n测试下：\n",(0,s.jsx)("img",{src:v,alt:""})]}),"\n",(0,s.jsx)(n.p,{children:"可以看到，google 的用户信息拿到了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这里没有 github 返回的那种有 id，但这里返回了 email，同样可以唯一标识用户。"}),"\n",(0,s.jsxs)(n.p,{children:["你可以试下 ",(0,s.jsx)(n.a,{href:"https://medium.com/",target:"_blank",rel:"noopener noreferrer",children:"medium.com"})," 的三方登录："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"用 google 账号登录之后，会让你完善一些信息，然后 create count。"}),"\n",(0,s.jsx)(n.p,{children:"也就是基于你 google 账号里的东西，再让你填一些东西之后，完成账号注册。"}),"\n",(0,s.jsx)(n.p,{children:"之后你 google 登录，就会查到这个账号，从而直接登录，不用输密码。"}),"\n",(0,s.jsxs)(n.p,{children:["或者 ",(0,s.jsx)(n.a,{href:"https://hub.docker.com/signup",target:"_blank",rel:"noopener noreferrer",children:"hub.docker.com"})," 的三方登录："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"也是在 github 账号登录后，让你填一些其余信息，完成注册。"}),"\n",(0,s.jsx)(n.p,{children:"之后三方账号授权后，直接登录。"}),"\n",(0,s.jsx)(n.p,{children:"我们也来实现下："}),"\n",(0,s.jsx)(n.p,{children:"引入下 TypeORM 来操作数据库："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install --save @nestjs/typeorm typeorm mysql2\n"})}),"\n",(0,s.jsx)(n.p,{children:"AppModule 里引入 TypeOrmModule："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    AuthModule, \n    TypeOrmModule.forRoot({\n      type: \"mysql\",\n      host: \"localhost\",\n      port: 3306,\n      username: \"root\",\n      password: \"guang\",\n      database: \"google-login\",\n      synchronize: true,\n      logging: true,\n      entities: [],\n      poolSize: 10,\n      connectorPackage: 'mysql2',\n      extra: {\n          authPlugin: 'sha256_password',\n      }\n    })\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 mysql workbench 创建这个 database："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"添加 src/user.entity.ts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\nexport enum RegisterType {\n    normal = 1,\n    google = 2\n}\n@Entity()\nexport class User {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        length: 50\n    })\n    email: string;\n\n    @Column({\n        length: 20\n    })\n    password: string;\n\n    @Column({\n        comment: '昵称',\n        length: 50\n    })\n    nickName: string;\n\n    @Column({\n        comment: '头像 url',\n        length: 200\n    })\n    avater: string;\n\n    @Column({\n        comment: '注册类型: 1.用户名密码注册 2. google自动注册',\n        default: 1\n    })\n    registerType: RegisterType;\n\n    @CreateDateColumn()\n    createTime: Date;\n\n    @UpdateDateColumn()\n    updateTime: Date;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"有 id、email、nickName、avater、registerType、createTime、updateTime 7 个字段。"}),"\n",(0,s.jsx)(n.p,{children:"registerType 用来标识哪种注册方式，正常注册是 1，google 账号自动注册是 2。"}),"\n",(0,s.jsx)(n.p,{children:"这里要区分是因为 google 方式注册就不用 password 了，验证逻辑不一样。"}),"\n",(0,s.jsx)(n.p,{children:"在 entities 里引入："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"跑一下试试："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这部分和我们单独跑 typeorm 没啥区别："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后是增删改查，我们可以注入 EntityManager："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"自动创建了对应的表。"}),"\n",(0,s.jsx)(n.p,{children:"在 mysql workbench 里也可以看到："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后在 AppService 里注入 EntityManager 来操作 user 表："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { InjectEntityManager } from '@nestjs/typeorm';\nimport { EntityManager } from 'typeorm';\nimport { User } from './user.entity';\n\nexport interface GoogleInfo {\n  email: string;\n  firstName: string;\n  lastName: string;\n  picture: string;\n}\n\n@Injectable()\nexport class AppService {\n\n  @InjectEntityManager()\n  entityManager: EntityManager;\n\n  getHello(): string {\n    return 'Hello World!';\n  }\n\n  async registerByGoogleInfo(info: GoogleInfo) {\n    const user = new User();\n\n    user.nickName = `${info.firstName}_${info.lastName}`;\n    user.avater = info.picture;\n    user.email = info.email;\n    user.password = '';\n    user.registerType = 2;\n\n    return this.entityManager.save(User, user);\n  }\n\n  async findGoogleUserByEmail(email: string) {\n    return this.entityManager.findOneBy(User, {\n      registerType: 2,\n      email\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"实现了 findGoogleUserByEmail 方法，可以根据 email 查询 google 注册的账号。"}),"\n",(0,s.jsx)(n.p,{children:"实现了 registerByGoogleInfo 方法，根据 google 返回的信息自动注册账号。"}),"\n",(0,s.jsx)(n.p,{children:"然后在 AppController 里改下 callback 的逻辑："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Get('callback/google')\n@UseGuards(AuthGuard('google'))\nasync googleAuthRedirect(@Req() req) {\n    const user = await this.appService.findGoogleUserByEmail(req.user.email);\n\n    if(!user) {\n      const newUser = this.appService.registerByGoogleInfo(req.user);\n      return newUser;\n    } else {\n      return user;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"首先根据 email 查询 google 方式登录的 user，如果有，就自动登录。"}),"\n",(0,s.jsx)(n.p,{children:"否则自动注册然后登录。"}),"\n",(0,s.jsx)(n.p,{children:"这里因为 google 返回的信息是全的，就直接自动注册了。"}),"\n",(0,s.jsx)(n.p,{children:"如果不全，需要再跳转一个页面填写其余信息之后再自动注册。"}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"因为前面登录过 google 账号并授权了，短时间内不需要再次授权，所以这里直接触发了注册并登录了。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当你用这个 google 账号登录，就会直接登录，不需要再注册了。"}),"\n",(0,s.jsx)(n.p,{children:"当然，网站登录后一般都会重定向到首页，那这时候怎么返回 jwt 的token 呢？"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["看下 ",(0,s.jsx)(n.a,{href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer",children:"https://hub.docker.com"})," 怎么做的："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，它并不是直接返回 jwt 的 token，而是重定向回首页，在 cookie 里携带 token。"}),"\n",(0,s.jsx)(n.p,{children:"这样前端只要判断下如果 cookie 里有这些 token 就自动登录就好了。"}),"\n",(0,s.jsx)(n.p,{children:"这就是三方账号登录的实现原理。"}),"\n",(0,s.jsxs)(n.p,{children:["案例代码上传了",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/google-login",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们实现了基于 google 的三方账号登录。"}),"\n",(0,s.jsx)(n.p,{children:"首先搜索对应的 passport 策略，然后生成 client id 和 client secret。"}),"\n",(0,s.jsx)(n.p,{children:"在 nest 项目里使用这个策略，添加登录和 callback 的路由。"}),"\n",(0,s.jsx)(n.p,{children:"之后基于 google 返回的信息来自动注册，如果信息不够，可以重定向到一个 url 让用户填写其余信息。"}),"\n",(0,s.jsx)(n.p,{children:"之后再次用这个 google 账号登录的话，就会自动登录。"}),"\n",(0,s.jsx)(n.p,{children:"现在，你可以在你的应用中加上 docker.com 这种三方账号登录了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})})]})}function D(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(P,{...e})}):P(e)}let O=D;D.__RSPRESS_PAGE_META={},D.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F75.%20passport%20%E5%AE%9E%E7%8E%B0%20Google%20%E4%B8%89%E6%96%B9%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"75. passport 实现 Google 三方账号登录",headingTitle:"75. passport 实现 Google 三方账号登录",frontmatter:{}}}}]);