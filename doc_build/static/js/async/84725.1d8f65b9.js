"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["84725"],{573570:function(n,e,t){t.r(e),t.d(e,{default:()=>D});var i=t(552676),r=t(740453);let a=t.p+"static/image/d0f5c7ba53901a88fa53e1e63217e23d.aea98cb6.webp",s=t.p+"static/image/5511f4e86a464ae84cd22fdc2ca20489.b5eb6808.webp",c=t.p+"static/image/11fa909dc0cb9ea61fd7c78ce2538ed0.c3d64768.webp",o=t.p+"static/image/e78698a2f3cf65a95d0adc29703161a6.3d6cfcdc.webp",l=t.p+"static/image/2bb798bc9095eec4b90129d0ebb6fc01.e032b269.webp",d=t.p+"static/image/4a045ebe02b2ab44311da6b63a01abd2.d57513a8.webp",p=t.p+"static/image/5adea93b72971aaaf50e46abd1ca9a8a.9246ab0a.webp",m=t.p+"static/image/41d9878a30fd9ff5e1ebd03d592864b4.d9cc82b1.webp",h=t.p+"static/image/1ff2fb6c1280356ddc99bc859e571def.d97caf87.webp",g=t.p+"static/image/f84ff91630d37a63638ce2fa74132256.e8320ed6.webp",x=t.p+"static/image/33da116b1fc6737d8250eef8cd98ce1e.8f39eb35.webp",f=t.p+"static/image/b446aec2f3adc61e603cddb2887c3c2e.0840ac53.webp",u=t.p+"static/image/aa250883e620bd4d6348fa1f8c34c259.77ade0e3.webp",j=t.p+"static/image/406d645a4cad3c43ede0d6097caef367.8a945c33.webp",b=t.p+"static/image/acb314795c38610ea21c02f87ca30c62.aab7eb62.webp",A=t.p+"static/image/dd02e034f40079892464cbebb97e41e9.b316f3a4.webp",I=t.p+"static/image/48314f345b11ea3e32cc7cf28f91bfc3.a255583f.webp",S=t.p+"static/image/d14fe9593f9c00d7565ef8f1a4b43cdf.6f463514.webp",w=t.p+"static/image/9090e8abae4b17ff1b6ebeaa4181f4f0.12b2b4e9.webp",v=t.p+"static/image/e5d478f8a7658030d3d45ca91e9816a3.8d850471.webp",y=t.p+"static/image/d8d0398df620375dba124fa4c1e3d6e8.9260537b.webp",k=t.p+"static/image/7d3969165a32ec999b68fcc9a4c6f12c.d602763b.webp",E=t.p+"static/image/3ce72490fd949fab48394a63305b91ea.310ea13f.webp",N=t.p+"static/image/bc30823a8f004bf4ece7f8e70bee4d58.db2c5eeb.webp";function C(n){let e=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",h3:"h3",pre:"pre",code:"code",img:"img",strong:"strong"},(0,r.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"13strapi-进阶文章页分页--国际化多语言功能的实现",children:["13.Strapi 进阶：文章页分页 & 国际化多语言功能的实现",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#13strapi-进阶文章页分页--国际化多语言功能的实现",children:"#"})]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"本节课程涉及 CMS 和 Demo 两个仓库地址"}),"\n",(0,i.jsxs)(e.p,{children:["CMS 仓库地址：",(0,i.jsx)(e.a,{href:"https://github.com/czm1290433700/nextjs-cms",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/czm1290433700/nextjs-cms"})]}),"\n",(0,i.jsxs)(e.p,{children:["Demo 仓库地址： ",(0,i.jsx)(e.a,{href:"https://github.com/czm1290433700/nextjs-demo",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/czm1290433700/nextjs-demo"})]}),"\n",(0,i.jsx)(e.p,{children:"本节课代码内容较多，同学们可以根据学习和理解的情况，拆分成多个模块来学习。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"上一节课我们学习了怎么对官网项目进行多媒体适配，我们通过 CSS media，注入设备信息以及服务器端请求获取三种方式实现了不同场景下的多媒体适配。因为 SSR 的特殊性，我们需要针对不同的场景选用合适的适配方法，来达到更理想的效果。"}),"\n",(0,i.jsx)(e.p,{children:"这节课我将来给大家介绍官网中最常见的两个需求，一个是文章页分页，另一个是国际化多语言。"}),"\n",(0,i.jsx)(e.p,{children:"官网作为一个品牌形象的载体，肯定需要大量的文章或是信息，来进行文化价值观的传输，文章的内容一多，我们自然需要为它实现对应的分页。至于国际化多语言，我们的官网不一定是给一个国家的人看的，可能公司或是团队的业务是针对多个地区的，语言不应该成为价值观传输的阻碍，所以如果是多地区业务线的公司，实现多语言也是很必要的，那么这两个功能我们应该怎么去实现呢？"}),"\n",(0,i.jsxs)(e.p,{children:["在",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141544709205262368",target:"_blank",rel:"noopener noreferrer",children:"08 | 数据可视化：基于 Strapi 实现后台数据的灵活配置"})," 我们通过配置 Strapi 实现了 layout 部分的数据注入，使用了它的 find 接口进行 cdn 层的数据灵活配置，这节课我们将来重新认识我们的老朋友 Strapi，使用它来实现官网常见的文章页分页和国际化多语言的功能。"]}),"\n",(0,i.jsxs)(e.h2,{id:"文章页分页",children:["文章页分页",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#文章页分页",children:"#"})]}),"\n",(0,i.jsxs)(e.h3,{id:"样式的实现",children:["样式的实现",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#样式的实现",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"我们之前在首页有配置一个静态的六个文章块，不过没有分页，所以我们首先来实现一下静态样式，分页的组件我们可以使用 semi-design 来实现，这是字节跳动抖音前端技术团队推出的一款样式组件库，设计上和易用性上都经过各种大型项目的考验，我们平时业务开发主要也是用它，还是很推荐大家使用的，我们先来装一下依赖。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm install @douyinfe/semi-ui --save\n"})}),"\n",(0,i.jsx)(e.p,{children:"然后我们给首页文章块下面加一个分页。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./pages/index.tsx;\nimport { Pagination } from "@douyinfe/semi-ui";\n// ...\n<div className={styles.paginationArea}>\n    <Pagination total={articles?.total} pageSize={6} />\n</div>\n// ...\n'})}),"\n",(0,i.jsx)(e.p,{children:"这时候我们发现控制台会有一个编译报错。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:N,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"这个报错的原因是因为 Nextjs 希望我们可以自主导入依赖中的样式，而不是随着依赖直接导入样式，避免稀里糊涂对全局样式造成影响，Semi 的依赖默认是在入口文件统一导入的，针对这种情况，Semi 提供了 semi-next 插件来对入口文件样式进行去除，然后我们再自行导入就可。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm i @douyinfe/semi-next\n"})}),"\n",(0,i.jsx)(e.p,{children:"安装好 semi-next 后，我们到 nextjs 的配置文件，用 semi-next 包裹一层配置文件，进行默认导入样式的去除。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./next.config.js\nconst path = require("path");\n\nconst semi = require("@douyinfe/semi-next").default({});\n\nmodule.exports = semi({\n  reactStrictMode: true,\n  swcMinify: true,\n  webpack: (config) => {\n    config.resolve.alias = {\n      ...config.resolve.alias,\n      "@": path.resolve(__dirname),\n    };\n    return config;\n  },\n  images: {\n    domains: ["127.0.0.1"],\n  },\n});\n'})}),"\n",(0,i.jsx)(e.p,{children:"接下来，我们在全局样式中手动导入 Semi 的样式，发现报错就没有了。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./pages/global.scss\n@import "~@douyinfe/semi-ui/dist/css/semi.min.css";\n'})}),"\n",(0,i.jsxs)(e.p,{children:["现在我们可以打开 ",(0,i.jsx)(e.a,{href:"http://127.0.0.1:3000",target:"_blank",rel:"noopener noreferrer",children:"http://127.0.0.1:3000"})," 来看一下分页的效果。"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:E,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"因为我们有做主题化，所以 Semi 的样式不能直接在我们页面中用。我们需要针对分页组件覆盖一下主题化的样式，样式覆盖是通过 global 样式去做，通常组件库的样式都会采用普通类的方式，而不是模块化样式，我们都可以在页面中通过 global 去全局覆盖对应类下的样式，达到组件样式自定义。这一块的样式，之前我们是直接复用了脚手架初始化的样式，层级上也比较乱，我们顺便一起梳理一下。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"@mixin initStatus {\n  transform: translate3d(0, 2.5rem, 0);\n  opacity: 0;\n}\n\n@mixin finalStatus {\n  -webkit-transform: none;\n  transform: none;\n  opacity: 1;\n}\n\n.container {\n  padding: 0 2rem;\n  color: var(--primary-color);\n\n  .main {\n    min-height: 100vh;\n    padding: 4rem 0;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    .title a {\n      color: var(--link-color);\n      text-decoration: none;\n    }\n\n    .title a:hover,\n    .title a:focus,\n    .title a:active {\n      text-decoration: underline;\n    }\n\n    .title {\n      margin: 0;\n      line-height: 1.15;\n      font-size: 4rem;\n    }\n\n    .title,\n    .description {\n      text-align: center;\n    }\n\n    .description {\n      margin: 4rem 0;\n      line-height: 1.5;\n      font-size: 1.5rem;\n    }\n\n    .grid {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-wrap: wrap;\n      max-width: 50rem;\n      transition: 2s;\n      .card {\n        margin: 1rem;\n        padding: 1.5rem;\n        text-align: left;\n        color: inherit;\n        text-decoration: none;\n        border: 0.0625rem solid var(--footer-background-color);\n        border-radius: 0.625rem;\n        transition: color 0.15s ease, border-color 0.15s ease;\n        max-width: 18.75rem;\n        cursor: pointer;\n      }\n\n      .card:hover,\n      .card:focus,\n      .card:active {\n        color: var(--link-color);\n        border-color: var(--link-color);\n      }\n\n      .card h2 {\n        margin: 0 0 1rem 0;\n        font-size: 1.5rem;\n      }\n\n      .card p {\n        margin: 0;\n        font-size: 1.25rem;\n        line-height: 1.5;\n      }\n    }\n\n    .paginationArea {\n      width: 43.125rem;\n      display: flex;\n      justify-content: flex-end;\n      padding: 20px 0;\n\n      :global {\n        .semi-page-item {\n          color: var(--primary-color);\n          opacity: 0.7;\n        }\n\n        .semi-page-item:hover {\n          background-color: var(--semi-page-hover-background-color);\n        }\n\n        .semi-page-item-active {\n          color: var(--semi-page-active-color);\n          background-color: var(--semi-page-active-background-color);\n        }\n\n        .semi-page-item-active:hover {\n          color: var(--semi-page-active-color);\n          background-color: var(--semi-page-active-background-color);\n        }\n      }\n    }\n  }\n\n  .withAnimation {\n    .title {\n      animation: fadeInDown1 1s;\n    }\n\n    .description {\n      animation: fadeInDown2 1s;\n    }\n\n    .card:nth-of-type(1) {\n      animation: fadeInDown3 1s;\n    }\n\n    .card:nth-of-type(2) {\n      animation: fadeInDown4 1s;\n    }\n\n    .card:nth-of-type(3) {\n      animation: fadeInDown5 1s;\n    }\n\n    .card:nth-of-type(4) {\n      animation: fadeInDown6 1s;\n    }\n\n    .card:nth-of-type(5) {\n      animation: fadeInDown7 1s;\n    }\n\n    .card:nth-of-type(6) {\n      animation: fadeInDown8 1s;\n    }\n  }\n\n  @keyframes fadeInDown1 {\n    0% {\n      @include initStatus;\n    }\n\n    11% {\n      @include initStatus;\n    }\n\n    100% {\n      @include finalStatus;\n    }\n  }\n\n  @keyframes fadeInDown2 {\n    0% {\n      @include initStatus;\n    }\n\n    22% {\n      @include initStatus;\n    }\n\n    100% {\n      @include finalStatus;\n    }\n  }\n\n  @keyframes fadeInDown3 {\n    0% {\n      @include initStatus;\n    }\n\n    33% {\n      @include initStatus;\n    }\n\n    100% {\n      @include finalStatus;\n    }\n  }\n\n  @keyframes fadeInDown4 {\n    0% {\n      @include initStatus;\n    }\n\n    44% {\n      @include initStatus;\n    }\n\n    100% {\n      @include finalStatus;\n    }\n  }\n\n  @keyframes fadeInDown5 {\n    0% {\n      @include initStatus;\n    }\n\n    55% {\n      @include initStatus;\n    }\n\n    100% {\n      @include finalStatus;\n    }\n  }\n\n  @keyframes fadeInDown6 {\n    0% {\n      @include initStatus;\n    }\n\n    66% {\n      @include initStatus;\n    }\n\n    100% {\n      @include finalStatus;\n    }\n  }\n\n  @keyframes fadeInDown7 {\n    0% {\n      @include initStatus;\n    }\n\n    77% {\n      @include initStatus;\n    }\n\n    100% {\n      @include finalStatus;\n    }\n  }\n\n  @keyframes fadeInDown8 {\n    0% {\n      @include initStatus;\n    }\n\n    88% {\n      @include initStatus;\n    }\n\n    100% {\n      @include finalStatus;\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"然后我们来看看调整后的效果，还是很理想的。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:k,alt:"f53793d2-8fb2-4518-91b1-082808742bd7.gif"})}),"\n",(0,i.jsx)(e.p,{children:"接下来我们对之前的文章页也写一些简单的样式，再提供一下标题、作者、描述这些字段，代码这边就不讲解了，都是一些基础的样式代码，同学们可以下来自己看一看，效果是这样的。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:y,alt:"image.png"})}),"\n",(0,i.jsxs)(e.h3,{id:"接口层的实现",children:["接口层的实现",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#接口层的实现",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["样式咱们已经搞定了，接下来我们来为文章页分页定义一下接口。我们需要参照 ",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141544709205262368",target:"_blank",rel:"noopener noreferrer",children:"08 | 数据可视化：基于 Strapi 实现后台数据的灵活配置"})," 和 ",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141544003933061132",target:"_blank",rel:"noopener noreferrer",children:"09 | BFF数据流转：Nextjs中的页面数据流转开发实战"}),"的做法， 把它配置到 Strapi 上，现在首页和文章页的数据结构是这样的。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./pages/index.tsx\n{\n    title: "Hello SSR!",\n    description: "A Demo for 《SSR 实战：官网开发指南》",\n    articles: {\n      list: [\n        {\n          label: "文章1",\n          info: "A test for article1",\n          link: "http://localhost:3000/article/1",\n        },\n        {\n          label: "文章2",\n          info: "A test for article2",\n          link: "http://localhost:3000/article/2",\n        },\n        {\n          label: "文章3",\n          info: "A test for article3",\n          link: "http://localhost:3000/article/3",\n        },\n        {\n          label: "文章4",\n          info: "A test for article4",\n          link: "http://localhost:3000/article/4",\n        },\n        {\n          label: "文章5",\n          info: "A test for article5",\n          link: "http://localhost:3000/article/5",\n        },\n        {\n          label: "文章6",\n          info: "A test for article6",\n          link: "http://localhost:3000/article/6",\n        },\n      ],\n      total: 12,\n    },\n  }\n  // ./pages/article/[articleId].tsx\n  {\n    title: `文章${articleId}`,\n    author: "zhenmin",\n    description: `a description for 文章${articleId}`,\n    createTime: "2022/8/16",\n    content: "文章内容",\n  }\n'})}),"\n",(0,i.jsx)(e.p,{children:"针对这个数据结构，我们设计三个结构体，ArticleInfo、ArticleIntroduction和 Home，其中 Home 就是首页那两个基础文案，ArticleIntroduction 是文章相关的简介，link 我们指向 ArticleInfo 对应元素的 id 即可。"}),"\n",(0,i.jsx)(e.p,{children:"这里文章内容我们单独放在 ArticleInfo，之所以这么做，是因为考虑到文章内容往往很多，如果放在 ArticleIntroduction 中进行分页，cdn 拉取的时间随着文章的增多，可能会越来越长。"}),"\n",(0,i.jsx)(e.p,{children:"首先我们来配置一下对应的结构体，启动一下 CMS 的项目，为了便于讲解，大家可以直接打开教学仓库的 master 分支查看，我有为大家保存缓存，所以拉取最新代码打开是可以直接看到我们的配置的。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["其中大部分配置大家直接看就好了，在",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141544709205262368",target:"_blank",rel:"noopener noreferrer",children:"08 | 数据可视化：基于 Strapi 实现后台数据的灵活配置"})," 我们大多有介绍，值得一提的是， ArticleInfo 中的 content 使用的是富文本，可以配置标题、加粗、图片等，并返回对应的 markdown 文本，非常适合文章页的数据源，有了结构体，接下来我们要做的就是对对应的结构体配置数据，我们切换到 Content Manager 目录下。"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:w,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"我们已经有配置一些数据，其中富文本区域的配置我们需要着重关注一下，大家可以打开第一篇文章，《时政新闻眼...》，这篇文章是我到新闻上随便找的一篇，其中包含了文本、标题和图片，我们看看它的配置是咋样的。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:S,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"这个其实和我们常用的一些文本编辑器还是很像的，点击 preview mode 处可以看到效果，我们按照平时写笔记的习惯，用 markdown 语言去配置文章就可以了，这里需要注意的是，图片导入后它默认会插入相对当前域名的相对路径，我们需要手动补上域名，因为我们站点的域名未必和现在是相同的，可能会出现资源 404 的情况，这个文章我们预览一下效果看看。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:I,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["看上去很简陋，不过没关系，只要标签相关正确就可，样式我们可以后续再定义美化。接下来我们按照之前的配置，给这些结构体开一下 find、findone 等配置，不记得的同学可以查阅",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141544709205262368g",target:"_blank",rel:"noopener noreferrer",children:"08 | 数据可视化：基于 Strapi 实现后台数据的灵活配置"})," 中 Api 权限配置及上线的模块。"]}),"\n",(0,i.jsx)(e.p,{children:"配置好了，以后我们随便开一个模块看看。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:A,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["好像有 time 等相关数据，",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141544709205262368g",target:"_blank",rel:"noopener noreferrer",children:"08 | 数据可视化：基于 Strapi 实现后台数据的灵活配置"}),"我们也有提过这个场景，我们需要参照上次，把对应用不上的数据清掉，这里我们以 home 为例。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'"use strict";\nconst { removeTime, removeAttrsAndId } = require("../../../utils/index.js");\n\n/**\n *  home controller\n */\n\nconst { createCoreController } = require("@strapi/strapi").factories;\n\nmodule.exports = createCoreController("api::home.home", ({ strapi }) => ({\n  async find(ctx) {\n    ctx.query = {\n      ...ctx.query,\n      populate: "deep",\n    };\n    const { data } = await super.find(ctx);\n    return removeAttrsAndId(removeTime(data[0]));\n  },\n}));\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"然后我们对其他模块进行相同的处理，具体代码同学们可以在 CMS 仓库查看，这里就不贴出来了。"}),"\n",(0,i.jsxs)(e.p,{children:["除此之外，我们还需要额外对 ArticleIntroduce 做一个分页的操作，Strapi 中针对分页的操作提供了",(0,i.jsx)(e.code,{children:"pagination[page]"})," 和 ",(0,i.jsx)(e.code,{children:"pagination[pageSize]"}),"两个参数，类似下面的效果。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"/api/articles?pagination[page]=1&pagination[pageSize]=10 // 按10个/页分页，返回第一页的数据\n"})}),"\n",(0,i.jsx)(e.p,{children:"这两个参数太长了，也不好记，我们定义两个我们自己的参数，pageNo, pageSize，然后咱们在它的基础上魔改一下就可以，具体代码如下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'"use strict";\nconst { removeTime, removeAttrsAndId } = require("../../../utils/index.js");\n\n/**\n *  article-introduction controller\n */\n\nconst { createCoreController } = require("@strapi/strapi").factories;\n\nmodule.exports = createCoreController(\n  "api::article-introduction.article-introduction",\n  ({ strapi }) => ({\n    async find(ctx) {\n      const { pageNo, pageSize, ...params } = ctx.query;\n      if (pageNo && pageSize) {\n        ctx.query = {\n          ...params,\n          "pagination[page]": Number(pageNo),\n          "pagination[pageSize]": Number(pageSize),\n        };\n      }\n      const { data, meta } = await super.find(ctx);\n      return { data: removeAttrsAndId(removeTime(data)), meta };\n    },\n  })\n);\n'})}),"\n",(0,i.jsx)(e.p,{children:"然后大家可以访问一下三个接口试试，应该都有符合我们预期的数据了，接下来我们开始编写我们 BFF 层的代码，三个结构体分别对应三个接口层，home 的最简单，我们透传即可。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./pages/api/home.ts\nimport type { NextApiRequest, NextApiResponse } from "next";\nimport axios from "axios";\nimport { CMSDOMAIN } from "@/utils";\n\ninterface IHomeProps {\n  title: string;\n  description: string;\n}\n\nconst getHomeData = (req: NextApiRequest, res: NextApiResponse<IHomeProps>) => {\n  axios.get(`${CMSDOMAIN}/api/homes`).then((result) => {\n    const { title, description } = result.data || {};\n\n    res.status(200).json({\n      title,\n      description,\n    });\n  });\n};\n\nexport default getHomeData;\n'})}),"\n",(0,i.jsx)(e.p,{children:"接下来是文章简介的接口，它可以接受分页的两个入参进行对应的分页。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./pages/api/articleIntro.ts\nimport type { NextApiRequest, NextApiResponse } from "next";\nimport axios from "axios";\nimport { CMSDOMAIN } from "@/utils";\n\nexport interface IArticleIntro {\n  label: string;\n  info: string;\n  articleId: number;\n}\n\ninterface IArticleIntroProps {\n  list: Array<{ label: string; info: string; articleId: number }>;\n  total: number;\n}\n\nconst getArticleIntroData = (\n  req: NextApiRequest,\n  res: NextApiResponse<IArticleIntroProps>\n) => {\n  const { pageNo, pageSize } = req.body;\n  axios\n    .get(`${CMSDOMAIN}/api/article-introductions`, {\n      params: {\n        pageNo,\n        pageSize,\n      },\n    })\n    .then((result) => {\n      const { data, meta } = result.data || {};\n\n      res.status(200).json({\n        list: Object.values(data),\n        total: meta.pagination.total,\n      });\n    });\n};\n\nexport default getArticleIntroData;\n'})}),"\n",(0,i.jsx)(e.p,{children:"其中 list 我们为什么需要用 Object.values 包一层 data 呢，细心的同学可能已经发现了，针对没有 relation 的多个元素， Strapi 是通过 object 类型返回给我们的，所以我们需要处理一层转成我们需要的数组格式。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"最后一个接口是文章详情的接口，那个接口包含一个 id 的入参，可以支持对数据进行单查，我们直接调用 Strapi 的 findOne 接口实现就好。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./pages/api/articleInfo.ts\nimport type { NextApiRequest, NextApiResponse } from "next";\nimport axios from "axios";\nimport { CMSDOMAIN } from "@/utils";\nimport { IArticleProps } from "../article/[articleId]";\n\nconst getArticleInfoData = (\n  req: NextApiRequest,\n  res: NextApiResponse<IArticleProps>\n) => {\n  const { articleId } = req.query;\n  axios.get(`${CMSDOMAIN}/api/article-infos/${articleId}`).then((result) => {\n    const data = result.data || {};\n    res.status(200).json(data);\n  });\n};\n\nexport default getArticleInfoData;\n'})}),"\n",(0,i.jsx)(e.p,{children:"到这里我们 BFF 层就定义好了，接下来我们改造一下首页，接入一下接口替换我们原先的静态数据。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"// ./pages/index.tsx\n// ...\nHome.getInitialProps = async (context) => {\n  const { data: homeData } = await axios.get(`${LOCALDOMAIN}/api/home`);\n  const { data: articleData } = await axios.post(\n    `${LOCALDOMAIN}/api/articleIntro`,\n    {\n      pageNo: 1,\n      pageSize: 6,\n    }\n  );\n\n  return {\n    title: homeData.title,\n    description: homeData.description,\n    articles: {\n      list: articleData.list.map((item: IArticleIntro) => {\n        return {\n          label: item.label,\n          info: item.info,\n          link: `${LOCALDOMAIN}/article/${item.articleId}`,\n        };\n      }),\n      total: articleData.total,\n    },\n  };\n};\n"})}),"\n",(0,i.jsx)(e.p,{children:"然后我们看看效果，数据已经注入进去了，不过样式有点糟糕，我们优化一下。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"// ./pages/index.module.scss\n//..\n.grid {\n      display: flex;\n      align-items: flex-start;\n      justify-content: flex-start;\n      flex-wrap: wrap;\n      max-width: 62.5rem;\n      transition: 2s;\n      min-height: 36.25rem;\n      .card {\n        margin: 1rem;\n        padding: 1.5rem;\n        text-align: left;\n        color: inherit;\n        text-decoration: none;\n        border: 0.0625rem solid var(--footer-background-color);\n        border-radius: 0.625rem;\n        transition: color 0.15s ease, border-color 0.15s ease;\n        max-width: 18.75rem;\n        cursor: pointer;\n        width: 18.75rem;\n        height: 13.875rem;\n      }\n      //...\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"现在就好多了，不过这时候还没完，我们需要把客户端的分页事件绑定一下。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./pages/index.tsx\nimport type { NextPage } from "next";\nimport styles from "./index.module.scss";\nimport cName from "classnames";\nimport { useContext, useEffect, useRef, useState } from "react";\nimport { ThemeContext } from "@/stores/theme";\nimport { Pagination } from "@douyinfe/semi-ui";\nimport axios from "axios";\nimport { LOCALDOMAIN } from "@/utils";\nimport { IArticleIntro } from "./api/articleIntro";\n\ninterface IProps {\n  title: string;\n  description: string;\n  articles: {\n    list: {\n      label: string;\n      info: string;\n      link: string;\n    }[];\n    total: number;\n  };\n}\n\nconst Home: NextPage<IProps> = ({ title, description, articles }) => {\n  const [content, setContent] = useState(articles);\n  const mainRef = useRef<HTMLDivElement>(null);\n  const { theme } = useContext(ThemeContext);\n\n  useEffect(() => {\n    mainRef.current?.classList.remove(styles.withAnimation);\n    window.requestAnimationFrame(() => {\n      mainRef.current?.classList.add(styles.withAnimation);\n    });\n  }, [theme]);\n\n  return (\n    <div className={styles.container}>\n      <main\n        className={cName([styles.main, styles.withAnimation])}\n        ref={mainRef}\n      >\n        <h1 className={styles.title}>{title}</h1>\n\n        <p className={styles.description}>{description}</p>\n\n        <div className={styles.grid}>\n          {content?.list?.map((item, index) => {\n            return (\n              <div\n                key={index}\n                className={styles.card}\n                onClick={(): void => {\n                  window.open(\n                    item.link,\n                    "blank",\n                    "noopener=yes,noreferrer=yes"\n                  );\n                }}\n              >\n                <h2>{item.label} &rarr;</h2>\n                <p>{item.info}</p>\n              </div>\n            );\n          })}\n          <div className={styles.paginationArea}>\n            <Pagination\n              total={content?.total}\n              pageSize={6}\n              onPageChange={(pageNo) => {\n                axios\n                  .post(`${LOCALDOMAIN}/api/articleIntro`, {\n                    pageNo,\n                    pageSize: 6,\n                  })\n                  .then(({ data }) => {\n                    setContent({\n                      list: data.list.map((item: IArticleIntro) => {\n                        return {\n                          label: item.label,\n                          info: item.info,\n                          link: `${LOCALDOMAIN}/article/${item.articleId}`,\n                        };\n                      }),\n                      total: data.total,\n                    });\n                  });\n              }}\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\n// ...\n'})}),"\n",(0,i.jsxs)(e.p,{children:["然后我们访问一下 ",(0,i.jsx)(e.a,{href:"http://127.0.0.1:3000%EF%BC%8C%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%98%AF%EF%BC%8C%E8%BF%99%E9%87%8C%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE",target:"_blank",rel:"noopener noreferrer",children:"http://127.0.0.1:3000，需要注意的是，这里不能直接访问"})," localhost，因为我们接口并没有设置 localhost 的域，会出现跨域的情况，我们可以参考 ",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141544003933061132",target:"_blank",rel:"noopener noreferrer",children:"09 | BFF数据流转：Nextjs中的页面数据流转开发实战"})," 中间件章节的做法，引入 cros 的中间件，把 localhost 配置 origin 即可，感兴趣的同学可以下来自己尝试一下"]}),"\n",(0,i.jsx)(e.p,{children:"现在我们来看一下效果，效果还是可以的"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:x,alt:"16a40330-4789-475a-a3af-ce6bc8fcbb75.gif"})}),"\n",(0,i.jsx)(e.p,{children:"接下来我们给对应的文章页面绑定一下接口数据。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"// ./pages/article/[articleId].tsx\nArticle.getInitialProps = async (context) => {\n  const { articleId } = context.query;\n  const { data } = await axios.get(`${LOCALDOMAIN}/api/articleInfo`, {\n    params: {\n      articleId,\n    },\n  });\n  return data;\n};\n"})}),"\n",(0,i.jsx)(e.p,{children:"来看看效果。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"现在已经完成数据的注入了，不过这个和我们预想的还不太一样，因为现在还是 markdown 的文本，没有显示出对应的标题，咱们需要把它换成 HTML。"}),"\n",(0,i.jsx)(e.p,{children:"Markdown 转 HTML 我们可以使用 showdown，这是一个免费的开源转换 markdown 为 HTML的库，首先我们来装一下对应的依赖。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm install showdown --save\n"})}),"\n",(0,i.jsx)(e.p,{children:"然后我们对页面的 content 进行一下转换。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./pages/article/[articleId].tsx\nimport { LOCALDOMAIN } from "@/utils";\nimport axios from "axios";\nimport type { NextPage } from "next";\nimport styles from "./styles.module.scss";\n\nconst showdown = require("showdown");\n\nexport interface IArticleProps {\n  title: string;\n  author: string;\n  description: string;\n  createTime: string;\n  content: string;\n}\n\nconst Article: NextPage<IArticleProps> = ({\n  title,\n  author,\n  description,\n  createTime,\n  content,\n}) => {\n  const converter = new showdown.Converter();\n  return (\n    <div className={styles.article}>\n      <h1 className={styles.title}>{title}</h1>\n      <div className={styles.info}>\n        作者：{author} | 创建时间: {createTime}\n      </div>\n      <div className={styles.description}>{description}</div>\n      <div>{converter.makeHtml(content)}</div>\n    </div>\n  );\n};\n\nArticle.getInitialProps = async (context) => {\n  const { articleId } = context.query;\n  const { data } = await axios.get(`${LOCALDOMAIN}/api/articleInfo`, {\n    params: {\n      articleId,\n    },\n  });\n  return data;\n};\n\nexport default Article;\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"可以看到，现在已经转成我们需要的 HTML 文本了，但是新的问题来了，我们应该怎样把 HTML 文本渲染成我们需要的 dom 呢，我们可以使用 dangerouslySetInnerHTML， 之所以这个属性包含一个dangerous，原因和 eval 相似，因为它可以在客户端手动执行一段代码（Dom)，在执行为用户输入的内容时，是会有一定风险的，我们这个是来自我们自己的底层 CDN ，所以数据相关有安全保证，对于外部输入的场景，同学们在使用的时候需要衡量一下。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"// ./pages/article/[articleId].tsx\n<div dangerouslySetInnerHTML={{ __html: converter.makeHtml(content) }} />\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"可以看到现在已经可以渲染成我们需要的元素了，不过样式太丑了，因为配置的时候富文本是可以随意配置的，这样会导致整体样式五花八门，我们需要进行一下统一的相关限制。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"// ./pages/article/[articleId].tsx\n<div\n    dangerouslySetInnerHTML={{ __html: converter.makeHtml(content) }}\n    className={styles.content}\n  />\n// ./pages/article/styles.module.scss\n.content {\n    margin-bottom: 5rem;\n    font-size: 16px;\n    line-height: 32px;\n\n    img {\n      width: 50rem;\n    }\n  }\n  \n"})}),"\n",(0,i.jsx)(e.p,{children:"这样效果就好多了，后面如果官网有文章迭代的需求，也只需要让运营同学到 Strapi 平台配置一下对应的富文本发布就好了。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,i.jsxs)(e.h3,{id:"首页和文章页的多媒体适配",children:["首页和文章页的多媒体适配",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#首页和文章页的多媒体适配",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["在",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141551328555335713",target:"_blank",rel:"noopener noreferrer",children:"12 | 多媒体适配: 官网的设备样式兼容方案"})," ，我给同学们留了多媒体适配的作业，不知道大家做了吗，没做也没关系，现在我们改造完首页和文章页，一起来实现这部分。首先我们针对首页进行一下简单适配。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./pages/index.module.scss\n@import "./media.scss";\n// ...\n@include media-ipad {\n  .container {\n    .main {\n      .grid {\n        width: 95%;\n        margin: auto;\n        justify-content: center;\n      }\n    }\n  }\n}\n\n@include media-mobile {\n  .container {\n    .main {\n      .title {\n        font-size: 1.75rem;\n        line-height: 2.4375rem;\n      }\n      .description {\n        font-size: 0.875rem;\n        line-height: 1.5rem;\n        margin: 2rem 0;\n      }\n      .grid {\n        width: 95%;\n        margin: auto;\n        justify-content: center;\n        .card {\n          height: 10rem;\n          h2 {\n            font-size: 1.125rem;\n            line-height: 1.5625rem;\n          }\n          p {\n            font-size: 0.75rem;\n            line-height: 1.625rem;\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"我们来看一下效果。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"文章页咱们也适配一下。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./pages/article/styles.module.scss\n@import "../media.scss";\n// ...\n@include media-ipad {\n  .article {\n    width: 80%;\n    .content {\n      img {\n        width: 100%;\n      }\n    }\n  }\n}\n\n@include media-mobile {\n  .article {\n    width: 80%;\n    .title {\n      font-size: 1.75rem;\n      line-height: 2.4375rem;\n    }\n    .content {\n      h2 {\n        font-size: 1.125rem;\n        line-height: 1.5625rem;\n      }\n      img {\n        width: 100%;\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"我们看看效果。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"到这里，我们文章页分页的内容就已经全部实现了"}),"\n",(0,i.jsxs)(e.h2,{id:"国际化",children:["国际化",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#国际化",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"分页的功能实现了，国际化的功能我们应该怎么实现呢？每个页面不同语言展示不同的文案内容，难道我们要为每种语言写一套页面吗？那开发国际化平台的同学可能已经准备提桶跑路了..."}),"\n",(0,i.jsx)(e.p,{children:"有没有什么更灵活快捷的方式吗？其实这个方法我们在前几节课就已经有所涉猎了，在讲解方法之前，我想请大家将国际化、主题化和多媒体适配的注入联系起来看看，它们有什么共同之处吗？"}),"\n",(0,i.jsx)(e.p,{children:"没错，它们都是每个页面共同的部分，每个页面都有相同的语言，主题化和多媒体适配，那我们是不是也可以针对语言来定义一套注入器（Context)，通过缓存的方式统一管理，然后进行全局的注入。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// ./stores/language.tsx\nimport React, { useState, useEffect, createContext } from "react";\nimport { Language } from "@/constants/enum";\n\ninterface ILanguageContextProps {\n  language: Language;\n  setLanguage: (language: Language) => void;\n}\n\ninterface IProps {\n  children: JSX.Element;\n}\n\nexport const LanguageContext = createContext<ILanguageContextProps>(\n  {} as ILanguageContextProps\n);\n\nexport const LanguageContextProvider = ({ children }: IProps): JSX.Element => {\n  const [language, setLanguage] = useState<Language>(Language.ch);\n\n  useEffect(() => {\n    const checkLanguage = (): void => {\n      const item =\n        (localStorage.getItem("language") as Language) || Language.ch;\n      setLanguage(item);\n    };\n    checkLanguage();\n    window.addEventListener("storage", checkLanguage);\n    return (): void => {\n      window.removeEventListener("storage", checkLanguage);\n    };\n  }, []);\n\n  return (\n    <LanguageContext.Provider\n      value={{\n        language,\n        setLanguage: (currentLanguage) => {\n          setLanguage(currentLanguage);\n          localStorage.setItem("language", currentLanguage);\n        },\n      }}\n    >\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n'})}),"\n",(0,i.jsxs)(e.p,{children:["那么注入完成，我们怎么对每个文案进行多个语言的翻译呢？我们只需要在 Strapi 配置对应语言的文案即可，比如中文的 title 字段我们叫做 ",(0,i.jsx)(e.code,{children:"titlech"}),"，英文的 title 字段我们叫做 ",(0,i.jsx)(e.code,{children:"titleen"}),"，前缀相同，结尾文案与我们定义的类型相同，我们就可以在页面中直接采取 ",(0,i.jsx)(e.code,{children:"title${language}"}),"的方式调用了。"]}),"\n",(0,i.jsx)(e.p,{children:"同时这样实现有个好处，不仅仅是单纯的对文案进行翻译，在不同的地区需要展示的文化信息是不尽相同的，以字节官网为例，中文和英文并不是单纯的机翻。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"针对不同地区的同学，需要针对他们的文化去定制化的宣传，多站在对方的角度上去思考问题，"})," ",(0,i.jsx)(e.strong,{children:"多元兼容"})," ",(0,i.jsx)(e.strong,{children:"，才是国际化的真正意义。"})," 这样在相互的合作中，往往才会有更多的理解和默契~"]}),"\n",(0,i.jsx)(e.p,{children:"具体 Strapi 的配置和 BFF 层这边就当作一个课后小作业，这边就不实现了，思路参考上面即可。同学们可以课后自己试一试。"}),"\n",(0,i.jsxs)(e.h2,{id:"小结",children:["小结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"这节课我们学习了文章页分页和国际化多语言的实现，使用了 Strapi 的 findOne 和分页能力，我们可以用很低的成本的进行文章的配置和分页，后续的网站维护，运营同学也只需要使用对应的富文本编辑器，就可以随时随地配置更新需要的文案到官网上。还支持有预览的能力，完全可以做到所见即所得。"}),"\n",(0,i.jsx)(e.p,{children:"同时我们还对首页和文章页进行了移动端和 ipad 端的适配，让它可以在多端进行访问！"}),"\n",(0,i.jsx)(e.p,{children:"对于国际化多语言的实现，我们用到了前几章反复使用的注入器方案，将对应的语言页面注入到每个页面，然后再结合 Strapi 的配置，我们就可以实现对不同地区的语言进行灵活配置的能力，后续如果需要新增对某个语言的支持，也只需要在 Strapi 上配置对应的文案就好了，不需要改动代码，配置能力拉满，太酷了~"}),"\n",(0,i.jsx)(e.p,{children:"平时我们需求中可能经常会用到弹窗，官网经常会有一些自定义的动画，通过样式很难去覆盖动画的，所以下一节课，我们就来学习，如何来实现一个有自定义动画效果的弹窗组件。"})]})}function L(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(C,{...n})}):C(n)}let D=L;L.__RSPRESS_PAGE_META={},L.__RSPRESS_PAGE_META["SSR%20%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AE%98%E7%BD%91%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F13.Strapi%20%E8%BF%9B%E9%98%B6%EF%BC%9A%E6%96%87%E7%AB%A0%E9%A1%B5%E5%88%86%E9%A1%B5%20%26%20%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"文章页分页",id:"文章页分页",depth:2},{text:"样式的实现",id:"样式的实现",depth:3},{text:"接口层的实现",id:"接口层的实现",depth:3},{text:"首页和文章页的多媒体适配",id:"首页和文章页的多媒体适配",depth:3},{text:"国际化",id:"国际化",depth:2},{text:"小结",id:"小结",depth:2}],title:"13.Strapi 进阶：文章页分页 & 国际化多语言功能的实现",headingTitle:"13.Strapi 进阶：文章页分页 & 国际化多语言功能的实现",frontmatter:{}}}}]);