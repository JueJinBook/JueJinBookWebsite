"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["60655"],{309446:function(e,n,s){s.r(n),s.d(n,{default:()=>f});var r=s(552676),c=s(740453);let d=s.p+"static/image/3503695253db473c2414a1ddf8474d1f.5aa86615.webp",i=s.p+"static/image/3e0fe77414200c2c618914b9d830d5b0.ddf2abe7.webp",l=s.p+"static/image/b8497b5028f97f6fdcfa7b8e4027d790.79576a89.webp",o=s.p+"static/image/9bcc2136d44ea4582d9e3770830f9ad1.f9eb2fbd.webp",t=s.p+"static/image/f2e2216cdbe8e83f310255a0165ea9ab.1026a789.webp",a=s.p+"static/image/7af5317c738ed018d0932a1feacc2d03.1cf773ad.webp",h=s.p+"static/image/5df51d42716e954f13eb483b5a914bdd.b4b2367a.webp",j=s.p+"static/image/df1aedb967a16b2562f020ac2f60c480.0d55eae2.webp",x=s.p+"static/image/f34aa52a99b5ba6069d47a8712910446.d7c46000.webp",p=s.p+"static/image/04e9b4db45c8edc0f0ea41bd27b49955.eec660e6.webp",u=s.p+"static/image/db5e51fface2f922a286ab4b3feb2c80.d75f8afb.webp";function g(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h4:"h4",ul:"ul",li:"li",blockquote:"blockquote",code:"code",img:"img",pre:"pre"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"6后端实战egg-jwt-实现用户鉴权注册登录",children:["6.后端实战：egg-jwt 实现用户鉴权（注册、登录）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6后端实战egg-jwt-实现用户鉴权注册登录",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用户鉴权，是一个系统项目中的重中之重。几乎所有的需求，都是围绕用户体系去展开设计的。放眼市面上诸多项目，哪一个不是建立在用户体系基础上的，如博客、电商、工具、管理系统、音乐、游戏等等领域。所以我们将用户鉴权这块内容放在了第一个要实现的接口。"}),"\n",(0,r.jsxs)(n.h4,{id:"知识点",children:["知识点",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#知识点",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"egg-jwt 插件的使用"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"egg 中间件编写"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"token 鉴权"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"用户鉴权是什么",children:["用户鉴权是什么",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户鉴权是什么",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"引用百度百科对「用户鉴权」的定义："}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"用户鉴权，一种用于在通信网络中对试图访问来自服务提供商的服务的用户进行鉴权的方法。用于用户登陆到DSMP或使用数据业务时，业务网关或Portal发送此消息到DSMP，对该用户使用数据业务的合法性和有效性（状态是否为激活）进行检查。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我个人觉得上述解释过于官方，我还是喜欢将复杂的东西简单化。我认为鉴权就是用户在浏览网页或 ",(0,r.jsx)(n.code,{children:"App"})," 时，通过约定好的方式，让网页和用户建立起一种相互信赖的机制，继而返回给用户需要的信息。"]}),"\n",(0,r.jsx)(n.p,{children:"鉴权的机制，分为四种："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"HTTP Basic Authentication"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"session-cookie"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Token 令牌"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"OAuth(开放授权)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["本小册采用的鉴权模式是 ",(0,r.jsx)(n.code,{children:"token"})," 令牌模式，出于多端考虑，",(0,r.jsx)(n.code,{children:"token"})," 可以运用在如网页、客户端、小程序、浏览器插件等等领域。如果选用 ",(0,r.jsx)(n.code,{children:"cookie"})," 的形式鉴权，在客户端和小程序就无法使用这套接口，因为它们没有域的概念，而 ",(0,r.jsx)(n.code,{children:"cookie"})," 是需要存在某个域下。"]}),"\n",(0,r.jsxs)(n.h2,{id:"注册接口实现",children:["注册接口实现",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注册接口实现",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"整个注册的流程大致如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["我们将第 2 章新建的 ",(0,r.jsx)(n.code,{children:"egg-example"})," 项目改名为 ",(0,r.jsx)(n.code,{children:"juejue-server"}),"，这么做的目的是为了避免重复之前章节的内容，并且将里面的相关代码清理，避免后面写代码的时候产生干扰。"]}),"\n",(0,r.jsxs)(n.p,{children:["注意将 ",(0,r.jsx)(n.code,{children:"config.default.js"})," 的数据库配置项中的数据库名称修改一下，因为我们上一章节新建了一个数据库："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"exports.mysql = {\n  // 单数据库信息配置\n  client: {\n    // host\n    host: 'localhost',\n    // 端口号\n    port: '3306',\n    // 用户名\n    user: 'root',\n    // 密码\n    password: '你的数据库初始化密码', // Window 用户如果没有密码，可不填写\n    // 数据库名\n    database: 'juejue-cost',\n  },\n  // 是否加载到 app 上，默认开启\n  app: true,\n  // 是否加载到 agent 上，默认关闭\n  agent: false,\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"众所周知，用户在网页端注册的时候会上报两个参数，「用户名」和「密码」，此时我们便需要在服务端代码中拿到这俩参数。"}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"controller"})," 目录下新建 ",(0,r.jsx)(n.code,{children:"user.js"})," 用于编写用户相关的代码，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// controller/user.js\n'use strict';\n\nconst Controller = require('egg').Controller;\n\nclass UserController extends Controller {\n  async register() {\n    const { ctx } = this;\n    const { username, password } = ctx.request.body; // 获取注册需要的参数\n  }\n}\n\nmodule.exports = UserController;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时我们拿到了 ",(0,r.jsx)(n.code,{children:"username"})," 和 ",(0,r.jsx)(n.code,{children:"password"}),"，我们需要判断两个参数是否为空。如果是空，则返回错误信息："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 判空操作\nif (!username || !password) {\n  ctx.body = {\n    code: 500,\n    msg: '账号密码不能为空',\n    data: null\n  }\n  return\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时我们还需要一个判断，根据用户传入的 ",(0,r.jsx)(n.code,{children:"username"})," 去数据库的 ",(0,r.jsx)(n.code,{children:"user"})," 表查询，是否已经被注册。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"由于没有手机验证短信服务，这里只能让  username 作为唯一标示。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我们需要在 ",(0,r.jsx)(n.code,{children:"service"})," 目录下新建 ",(0,r.jsx)(n.code,{children:"user.js"}),"，并且添加 ",(0,r.jsx)(n.code,{children:"getUserByName"})," 方法用于根据 ",(0,r.jsx)(n.code,{children:"username"})," 查找用户信息，内容如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"//  service/user.js\n'use strict';\n\nconst Service = require('egg').Service;\n\nclass UserService extends Service {\n  // 通过用户名获取用户信息\n  async getUserByName(username) {\n    const { app } = this;\n      try {\n        const result = await app.mysql.get('user', { username });\n        return result;\n      } catch (error) {\n        console.log(error);\n        return null;\n      }\n  }\n}\nmodule.exports = UserService;\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"使用 async 和 await 时，如果想捕获错误，需要使用 try...catch 来捕获，如果代码运行过程中发生错误，都将会被 catch 捕获。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我们回到 ",(0,r.jsx)(n.code,{children:"controller/user.js"})," 继续添加逻辑，在 「判空操作」逻辑下，判断是否已经被注册的逻辑："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// controller/user.js\nasync register() {\n  ...\n  // 验证数据库内是否已经有该账户名\n  const userInfo = await ctx.service.user.getUserByName(username) // 获取用户信息\n\n  // 判断是否已经存在\n  if (userInfo && userInfo.id) {\n    ctx.body = {\n      code: 500,\n      msg: '账户名已被注册，请重新输入',\n      data: null\n    }\n    return\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"经过上述两层判断之后，接下便可将账号和密码写入数据库，我们继续在上述代码后，添加逻辑："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// controller/user.js\n// 默认头像，放在 user.js 的最外，部避免重复声明。\nconst defaultAvatar = 'http://s.yezgea02.com/1615973940679/WeChat77d6d2ac093e247c361f0b8a7aeb6c2a.png'\n// 调用 service 方法，将数据存入数据库。\nconst result = await ctx.service.user.register({\n  username,\n  password,\n  signature: '世界和平。',\n  avatar: defaultAvatar\n});\n\nif (result) {\n  ctx.body = {\n    code: 200,\n    msg: '注册成功',\n    data: null\n  }\n} else {\n  ctx.body = {\n    code: 500,\n    msg: '注册失败',\n    data: null\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们继续前往 ",(0,r.jsx)(n.code,{children:"service/user.js"})," 添加 ",(0,r.jsx)(n.code,{children:"register"})," 写入数据库的方法："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// service/user.js\n...\n// 注册\nasync register(params) {\n  const { app } = this;\n  try {\n    const result = await app.mysql.insert('user', params);\n    return result;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时上述代码的作用，便是将用户注册数据存入到数据库中的 ",(0,r.jsx)(n.code,{children:"user"})," 表。通过在 ",(0,r.jsx)(n.code,{children:"router.js"})," 将接口抛出，如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// router.js\n'use strict';\n\n/**\n * @param {Egg.Application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.post('/api/user/register', controller.user.register);\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["打开 ",(0,r.jsx)(n.code,{children:"Postman"}),"，进行手动测试，观察是否能成功将数据存入数据库。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"查看数据库是否生效："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到我们注册的信息已经进入数据库，此时我们验证一下，再次发起相同的请求，查看服务端代码的判断是否生效。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"不出意外，你将会看到“账户名已被注册，请重新输入”。"}),"\n",(0,r.jsxs)(n.p,{children:["通常情况下，我们需要将密码通过 ",(0,r.jsx)(n.code,{children:"md5"})," 或者其他的形式加密，避免数据库泄漏之后，导致用户信息被窃取，造成一些不必要的损失。加密这块，是一个比较深的知识点，为了让大家顺利的走完整个项目流程，这里不展开讲解。"]}),"\n",(0,r.jsxs)(n.h2,{id:"登录接口实现",children:["登录接口实现",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#登录接口实现",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["注册完成之后，紧接着就是登录流程。我们通过注册的「用户名」和「密码」，调用登录接口，接口会返回给我们一个 ",(0,r.jsx)(n.code,{children:"token"})," 令牌。这个令牌的生成和使用我们通过一张流程图来分析："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["网页端获取到 ",(0,r.jsx)(n.code,{children:"token"})," 之后，需要将其存在浏览器本地，它是有过期时间的，通常我们会设置 24 小时的过期时间，如果不是一些信息敏感的网站或app，如银行、政务之类，我们可以将过期时间设置的更长一些。"]}),"\n",(0,r.jsxs)(n.p,{children:["之后每次发起请求，无论是获取数据，还是提交数据，我们都需要将 ",(0,r.jsx)(n.code,{children:"token"})," 带上，以此来标识，此次获取(GET)或提交(POST)是哪一个用户的行为。"]}),"\n",(0,r.jsxs)(n.p,{children:["你可能会有疑问，服务端是怎么通过 ",(0,r.jsx)(n.code,{children:"token"})," 来判断是哪一个用户在发起请求。既然 ",(0,r.jsx)(n.code,{children:"egg-jwt"})," 有加密的功能，那也会有解密的功能。通过解密 ",(0,r.jsx)(n.code,{children:"token"})," 拿到当初加密  ",(0,r.jsx)(n.code,{children:"token"})," 时的信息，信息的内容大致就是当初注册时候的用户信息。我们通过一张流程图来分析："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"意思就是登录的时候，你使用的是："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  username: '张三',\n  password: '123'\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["那么这个 ",(0,r.jsx)(n.code,{children:"token"})," 内就会含有上述信息，在服务端解析 ",(0,r.jsx)(n.code,{children:"token"})," 的时候，便会解析出上述「用户名」和「密码」。知道是谁发起的请求，那后续就是针对该用户进行数据的获取和存储。"]}),"\n",(0,r.jsx)(n.p,{children:"分析完上述鉴权的流程之后，我们开始登录接口的编写。"}),"\n",(0,r.jsxs)(n.p,{children:["首先我们需要在项目下安装 ",(0,r.jsx)(n.code,{children:"egg-jwt"})," 插件，执行如下指令："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i egg-jwt -S\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这是它的",(0,r.jsx)(n.a,{href:"https://github.com/okoala/egg-jwt#readme",target:"_blank",rel:"noopener noreferrer",children:"仓库地址"}),"，仓库内有一些简易的文档，具体的操作其实很多都没有写在文档里，我也是搜了很多相关的资料，才设计出这样一套鉴权流程。"]}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"config/plugin.js"})," 下添加插件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"...\njwt: {\n  enable: true,\n  package: 'egg-jwt'\n}\n...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["紧接着前往 ",(0,r.jsx)(n.code,{children:"config/config.default.js"})," 下添加自定义加密字符串："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"config.jwt = {\n  secret: 'Nick',\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"secret"})," 加密字符串，将在后续用于结合用户信息生成一串 ",(0,r.jsx)(n.code,{children:"token"}),"。",(0,r.jsx)(n.code,{children:"secret"})," 是放在服务端代码中，普通用户是无法通过浏览器发现的，所以千万不能将其泄漏，否则有可能会被不怀好意的人加以利用。"]}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"/controller/user.js"})," 下新建 ",(0,r.jsx)(n.code,{children:"login"})," 方法，逐行添加分析，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"async login() {\n    // app 为全局属性，相当于所有的插件方法都植入到了 app 对象。\n    const { ctx, app } = this;\n    const { username, password } = ctx.request.body\n    // 根据用户名，在数据库查找相对应的id操作\n    const userInfo = await ctx.service.user.getUserByName(username)\n    // 没找到说明没有该用户\n    if (!userInfo || !userInfo.id) {\n      ctx.body = {\n        code: 500,\n        msg: '账号不存在',\n        data: null\n      }\n      return\n    }\n    // 找到用户，并且判断输入密码与数据库中用户密码。\n    if (userInfo && password != userInfo.password) {\n      ctx.body = {\n        code: 500,\n        msg: '账号密码错误',\n        data: null\n      }\n      return\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"app"})," 是全局上下文中的一个属性，",(0,r.jsx)(n.code,{children:"config/plugin.js"})," 中挂载的插件，可以通过 ",(0,r.jsx)(n.code,{children:"app.xxx"})," 获取到，如 ",(0,r.jsx)(n.code,{children:"app.mysql"}),"、",(0,r.jsx)(n.code,{children:"app.jwt"})," 等。",(0,r.jsx)(n.code,{children:"config/config.default.js"})," 中抛出的属性，可以通过 ",(0,r.jsx)(n.code,{children:"app.config.xxx"})," 获取到，如 ",(0,r.jsx)(n.code,{children:"app.config.jwt.secret"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"所以我们继续编写后续的登录逻辑，上述的判断都通过之后，后续的代码逻辑如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"async login () {\n  ...\n  // 生成 token 加盐\n  // app.jwt.sign 方法接受两个参数，第一个为对象，对象内是需要加密的内容；第二个是加密字符串，上文已经提到过。\n  const token = app.jwt.sign({\n    id: userInfo.id,\n    username: userInfo.username,\n    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // token 有效期为 24 小时\n  }, app.config.jwt.secret);\n  \n  ctx.body = {\n    code: 200,\n    message: '登录成功',\n    data: {\n      token\n    },\n  };\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们把获取到的 ",(0,r.jsx)(n.code,{children:"userInfo"})," 中的 ",(0,r.jsx)(n.code,{children:"id"})," 和 ",(0,r.jsx)(n.code,{children:"username"})," 两个属性，通过 ",(0,r.jsx)(n.code,{children:"app.jwt.sign"})," 方法，结合 ",(0,r.jsx)(n.code,{children:"app.config.jwt.secret"})," 加密字符串（之前声明的 ",(0,r.jsx)(n.code,{children:"Nick"}),"），生成一个 ",(0,r.jsx)(n.code,{children:"token"}),"。这个 ",(0,r.jsx)(n.code,{children:"token"})," 会是一串很长的加密字符串，类似这样 ",(0,r.jsx)(n.code,{children:"dkadaklsfnasalkd9a9883kndlas9dfa9238jand"})," 的一串密文。"]}),"\n",(0,r.jsxs)(n.p,{children:["完成上述操作之后，我们在路由 ",(0,r.jsx)(n.code,{children:"router.js"})," 脚本中，将登录接口抛出："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"'use strict';\n\n/**\n * @param {Egg.Application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.post('/api/user/register', controller.user.register);\n  router.post('/api/user/login', controller.user.login);\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们尝试用 ",(0,r.jsx)(n.code,{children:"Postman"})," 去测试一下接口是否可行，运行成功的话，会是如下所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["你可以这么理解这个 ",(0,r.jsx)(n.code,{children:"token"}),"，它里面藏着 ",(0,r.jsx)(n.code,{children:"username"})," 和 ",(0,r.jsx)(n.code,{children:"id"})," 两个参数，但是我在客户端拿到这个 ",(0,r.jsx)(n.code,{children:"token"})," 并不能破解出它内部的内容。必须要利用加密字符串，结合 ",(0,r.jsx)(n.code,{children:"egg-jwt"})," 的方法，才能解析出 ",(0,r.jsx)(n.code,{children:"username"})," 和 ",(0,r.jsx)(n.code,{children:"id"}),"。所以，用户的权限就通过这样的形式建立起来。"]}),"\n",(0,r.jsxs)(n.p,{children:["包括 ",(0,r.jsx)(n.code,{children:"cookie"})," 其实也是类似的原理，每次请求，请求头 ",(0,r.jsx)(n.code,{children:"requert"})," 都会带上 ",(0,r.jsx)(n.code,{children:"cookie"}),"，服务端通过获取请求中带上的 ",(0,r.jsx)(n.code,{children:"cookie"})," 去解析出对应的用户信息，然后操作相应的请求。"]}),"\n",(0,r.jsxs)(n.p,{children:["那么我希望验证一下，在发起一个带上 ",(0,r.jsx)(n.code,{children:"token"})," 接口请求时，如何在服务端解析出 ",(0,r.jsx)(n.code,{children:"token"})," 内的信息。我们在 ",(0,r.jsx)(n.code,{children:"/controller/user.js"})," 中，新增一个验证方法 ",(0,r.jsx)(n.code,{children:"test"}),"，如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 验证方法\nasync test() {\n  const { ctx, app } = this;\n  // 通过 token 解析，拿到 user_id\n  const token = ctx.request.header.authorization; // 请求头获取 authorization 属性，值为 token\n  // 通过 app.jwt.verify + 加密字符串 解析出 token 的值 \n  const decode = await app.jwt.verify(token, app.config.jwt.secret);\n  // 响应接口\n  ctx.body = {\n    code: 200,\n    message: '获取成功',\n    data: {\n      ...decode\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们发起请求的时候，通过在请求头 ",(0,r.jsx)(n.code,{children:"header"})," 上，携带认证信息，让服务端可以通过 ",(0,r.jsx)(n.code,{children:"ctx.request.header.authorization"})," 获取到 ",(0,r.jsx)(n.code,{children:"token"}),"，并且解析出内容返回到客户端，别忘了去 ",(0,r.jsx)(n.code,{children:"router.js"})," 抛出这个接口："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"router.get('/api/user/test', controller.user.test);\n"})}),"\n",(0,r.jsx)(n.p,{children:"我们测试一下接口是否可行："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["注意，我们在请求头 ",(0,r.jsx)(n.code,{children:"Headers"})," 上添加 ",(0,r.jsx)(n.code,{children:"authorization"})," 属性，并且值为之前登录接口获取到的 ",(0,r.jsx)(n.code,{children:"token"})," 值。发起请求后，我们得到返回值，",(0,r.jsx)(n.code,{children:"id = 1"}),"、",(0,r.jsx)(n.code,{children:"username = Nick"}),"。实际证明，我们的鉴权，基本上已经完成了。"]}),"\n",(0,r.jsxs)(n.h2,{id:"登录验证中间件",children:["登录验证中间件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#登录验证中间件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["中间件我们可以理解成一个过滤器，举个例子，我们有 ",(0,r.jsx)(n.code,{children:"A"}),"、",(0,r.jsx)(n.code,{children:"B"}),"、",(0,r.jsx)(n.code,{children:"C"}),"、",(0,r.jsx)(n.code,{children:"D"})," 四个接口是需要用户权限的，如果我们要判断是否有用户权限的话，就需要在这四个接口的控制层去判断用户是否登录，为代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"A() {\n  if(token && isValid(token)) {\n    // do something\n  }\n}\n\nB() {\n  if(token && isValid(token)) {\n    // do something\n  }\n}\n\nC() {\n  if(token && isValid(token)) {\n    // do something\n  }\n}\n\nD() {\n  if(token && isValid(token)) {\n    // do something\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"上述操作会有两个弊端："}),"\n",(0,r.jsx)(n.p,{children:"1、每次编写新的接口，都要在方法内部做判断，这很费事。\n2、一旦鉴权有所调整，我们需要修改每个用到判断登录的代码。"}),"\n",(0,r.jsxs)(n.p,{children:["现在我们引入中间件的概念，在请求接口的时候，过一层中间件，判断该请求是否是登录状态下发起的。此时我们打开项目，在 ",(0,r.jsx)(n.code,{children:"app"})," 目录下新新建一个文件夹 ",(0,r.jsx)(n.code,{children:"middleware"}),"，并且在该目录下新增 ",(0,r.jsx)(n.code,{children:"jwtErr.js"}),"，如下所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们为其添加如下代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"'use strict';\n\nmodule.exports = (secret) => {\n  return async function jwtErr(ctx, next) {\n    const token = ctx.request.header.authorization; // 若是没有 token，返回的是 null 字符串\n    let decode\n    if(token != 'null' && token) {\n      try {\n        decode = ctx.app.jwt.verify(token, secret); // 验证token\n        await next();\n      } catch (error) {\n        console.log('error', error)\n        ctx.status = 200;\n        ctx.body = {\n          msg: 'token已过期，请重新登录',\n          code: 401,\n        }\n        return;\n      }\n    } else {\n      ctx.status = 200;\n      ctx.body = {\n        code: 401,\n        msg: 'token不存在',\n      };\n      return;\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["首先中间件默认抛出一个函数，该函数返回一个异步方法 ",(0,r.jsx)(n.code,{children:"jwtErr"}),"，",(0,r.jsx)(n.code,{children:"jewErr"})," 方法有两个参数 ",(0,r.jsx)(n.code,{children:"ctx"})," 是上下文，可以在 ",(0,r.jsx)(n.code,{children:"ctx"})," 中拿到全局对象 ",(0,r.jsx)(n.code,{children:"app"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["首先，通过 ",(0,r.jsx)(n.code,{children:"ctx.request.header.authorization"})," 获取到请求头中的 ",(0,r.jsx)(n.code,{children:"authorization"})," 属性，它便是我们请求接口是携带的 ",(0,r.jsx)(n.code,{children:"token"})," 值，如果没有携带 ",(0,r.jsx)(n.code,{children:"token"}),"，该值为字符串 ",(0,r.jsx)(n.code,{children:"null"}),"。我们通过 ",(0,r.jsx)(n.code,{children:"if"})," 语句判断如果有 ",(0,r.jsx)(n.code,{children:"token"})," 的情况下，使用 ",(0,r.jsx)(n.code,{children:"ctx.app.jwt.verify"})," 方法验证该 ",(0,r.jsx)(n.code,{children:"token"})," 是否存在并且有效，如果是存在且有效，则通过验证 ",(0,r.jsx)(n.code,{children:"await next()"})," 继续执行后续的接口逻辑。否则判断是失效还是不存在该 ",(0,r.jsx)(n.code,{children:"token"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["编写完上述的中间件之后，我们就要前往 ",(0,r.jsx)(n.code,{children:"router.js"})," 去使用它，如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"'use strict';\n\n/**\n * @param {Egg.Application} app - egg application\n */\nmodule.exports = app => {\n  const { router, controller, middleware } = app;\n  const _jwt = middleware.jwtErr(app.config.jwt.secret); // 传入加密字符串\n  router.post('/api/user/register', controller.user.register);\n  router.post('/api/user/login', controller.user.login);\n  router.get('/api/user/test', _jwt, controller.user.test); // 放入第二个参数，作为中间件过滤项\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们模拟不带 ",(0,r.jsx)(n.code,{children:"authorization"})," 的请求，如下所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["勾去选项，发起请求，如上图所示，进入中间件，判断 ",(0,r.jsx)(n.code,{children:"token"})," 不存在。我们在随便写一个 ",(0,r.jsx)(n.code,{children:"token"})," 值验证无效的情况。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["可见，登录验证的中间件逻辑基本上已经实现了，后续我们如果想要新增一些接口是需要用户权限的，便可以在抛出方法的第二个参数，添加 ",(0,r.jsx)(n.code,{children:"_jwt"})," 方法，这样便可在进入接口逻辑之前就进行用户权限的判断。"]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本章节是整个服务端内容的精华所在，无论什么项目，要做用户权限的话，这些逻辑是避不开的。不过想要选择哪种鉴权方式，还是取决于项目以及团队的需要，做完上述鉴权之后，我们的项目就变成了面向多用户的项目。"}),"\n",(0,r.jsxs)(n.h4,{id:"本章节源代码",children:["本章节源代码",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章节源代码",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://s.yezgea02.com/1621494507475/juejue-server.zip",target:"_blank",rel:"noopener noreferrer",children:"点击下载"})})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}let f=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["Node%20%2B%20React%20%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E8%AE%B0%E8%B4%A6%E6%9C%AC%2F6.%E5%90%8E%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9Aegg-jwt%20%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E9%89%B4%E6%9D%83%EF%BC%88%E6%B3%A8%E5%86%8C%E3%80%81%E7%99%BB%E5%BD%95%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"知识点",id:"知识点",depth:4},{text:"用户鉴权是什么",id:"用户鉴权是什么",depth:2},{text:"注册接口实现",id:"注册接口实现",depth:2},{text:"登录接口实现",id:"登录接口实现",depth:2},{text:"登录验证中间件",id:"登录验证中间件",depth:2},{text:"总结",id:"总结",depth:2},{text:"本章节源代码",id:"本章节源代码",depth:4}],title:"6.后端实战：egg-jwt 实现用户鉴权（注册、登录）",headingTitle:"6.后端实战：egg-jwt 实现用户鉴权（注册、登录）",frontmatter:{}}}}]);