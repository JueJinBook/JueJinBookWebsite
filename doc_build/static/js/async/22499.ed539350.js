"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["22499"],{404150:function(n,e,t){n.exports=t.p+"static/image/35bb21b02948791703f4414f2ebe64db.1e9a4c87.webp"},207671:function(n,e,t){n.exports=t.p+"static/image/7386be520e1f20179015adb34236fb15.82ce6bbc.webp"},462335:function(n,e,t){n.exports=t.p+"static/image/82d25ef4ab3a4edfb72f1dac673f87f2.a063c741.webp"},246178:function(n,e,t){n.exports=t.p+"static/image/a1a1f45d769e5f3ab74659a33bbdbe01.0e96f896.gif"},821548:function(n,e,t){n.exports=t.p+"static/image/c59ffea76ccbff5cb7b305d3ff0baaf1.86ea84c3.webp"},189912:function(n,e,t){n.exports=t.p+"static/image/c69e7e6253a5c8ba4175e88a30a6f63b.251aaba6.webp"},534404:function(n,e,t){n.exports=t.p+"static/image/c8d394b151bb664295c8a4b03eccc1f5.2f76961c.webp"},196454:function(n,e,t){n.exports=t.p+"static/image/cc0cd0111d5090efe200a0cc230d3b12.ef6f1691.webp"},415142:function(n,e,t){n.exports=t.p+"static/image/f375418608f6c820714c5a768674f816.bcf2d1f8.gif"},897738:function(n,e,t){t.r(e),t.d(e,{default:()=>K});var c=t(552676),s=t(740453),r=t(207671);let i=t.p+"static/image/c994dca9c6ccfe8b10aec69b17b69ec7.e22685e9.webp",a=t.p+"static/image/7e3e98925cd201bbd34c1bc720d5414b.19c9fd46.webp",d=t.p+"static/image/898dde474648d5a8d418c4a9c9d01c35.a92daf57.webp",p=t.p+"static/image/dc6e57f14cd01eb62ad33344a60243fb.af633848.webp",o=t.p+"static/image/683df7626f40f50adc3d3d183c8c32d4.9bec8860.gif",l=t.p+"static/image/49be5dedc85864983e645a362af23b53.7628602b.gif",m=t.p+"static/image/a33c61c552cbc4a30b659ddd7c980b59.8094e627.webp",x=t.p+"static/image/7e25d5f8c2628cb3bb663a24707e9cfa.16a8ede3.gif",j=t.p+"static/image/0ce5e88379b7549bf10869f297aded50.ba50b5b9.webp";var h=t(462335),f=t(415142);let g=t.p+"static/image/3d59b42d37e7c98cfc76ff35dd7fdf8d.8761094c.webp",b=t.p+"static/image/e03e4e02185b60276675f67658989524.b6d49257.gif",u=t.p+"static/image/85a5129595050c049eb8f9c1f1b291a2.144dd5d6.webp",w=t.p+"static/image/7a73574c4a909dca768dcba97820c3fe.d8fa36dd.webp",v=t.p+"static/image/75355c185817ffecec528155eb55e573.19740bef.webp",A=t.p+"static/image/f231538e1b735c3ddfa35f7563f05095.8c7ab55d.webp";var E=t(404150);let C=t.p+"static/image/4a0bd865d1ea7cec7b7f3fb9032e0f76.535aeca4.webp",S=t.p+"static/image/8598bb6b5bfcb8aea226f408504e2630.920dc077.webp",N=t.p+"static/image/4905a5d6b7bd06ab63437065c6e0683e.4505e2b8.webp",I=t.p+"static/image/5e145ece6bf8826e0468e7937fc48a93.79e87d70.gif",P=t.p+"static/image/d84565bdbe641642ff809e95efa3d7ad.713f764d.webp";var B=t(246178),z=t(189912),_=t(196454),y=t(821548);let k=t.p+"static/image/e98d8bfc390783d10faf2aab705bd2d5.7aff8c44.webp";var M=t(534404);let R=t.p+"static/image/04fbde21b28ae956d1757ae0db57cd01.bf038364.webp",F=t.p+"static/image/56f869d053272dfbe3a19585ad86261f.ea116b58.webp",H=t.p+"static/image/df97751a21be34c8969103b77628342a.02891409.webp",D=t.p+"static/image/5a357c073b8703407a7ceceb447d1a10.3b0dab23.webp",L=t.p+"static/image/618ba832cf01ae0c1151fa120327e420.005e03ea.gif",O=t.p+"static/image/a6c90c32a08da1b9c7fc40e3161ca9a6.7c106429.webp",T=t.p+"static/image/d16abb0a20d3c7e5c8f72976ef00b3b0.cbcef757.webp",G=t.p+"static/image/c382561813bff4f158f656b6847f4f1f.865b1f86.gif",V=t.p+"static/image/8b23c535d9631a85001ce307358529d2.5014eba1.gif",J=t.p+"static/image/1bf6a88e841fa18d9d918533d19447f7.4407eaf4.webp";function Q(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",strong:"strong",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"第67章低代码编辑器核心数据结构全局store",children:["第67章—低代码编辑器：核心数据结构、全局store",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第67章低代码编辑器核心数据结构全局store",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"\uFEFF这节开始，我们做一个实战项目：低代码编辑器"}),"\n",(0,c.jsxs)(e.p,{children:["这种编辑器都差不多，比如百度开源的 ",(0,c.jsx)(e.a,{href:"https://aisuda.github.io/amis-editor-demo/#/edit/0",target:"_blank",rel:"noopener noreferrer",children:"amis"}),"："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:J,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"左边是物料区，中间是画布区，右边是属性编辑区。"}),"\n",(0,c.jsx)(e.p,{children:"可以从物料区拖拽组件到中间的画布区，来可视化搭建页面："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:V,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"画布区的组件可以选中之后，在属性编辑区修改属性："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:G,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"左边可以看到组件的大纲视图，用树形展示组件嵌套结构："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:T,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"也可以直接看生成的 json 结构："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:O,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"可以看到，json 的嵌套结构和页面里组件的结构一致，并且 json 对象的属性也是在属性编辑区编辑后的。"}),"\n",(0,c.jsx)(e.p,{children:"所以说，整个低代码编辑器就是围绕这个 json 来的。"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"从物料区拖拽组件到画布区，其实就是在 json 的某一层级加了一个组件对象。"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"选中组件在右侧编辑属性，其实就是修改 json 里某个组件对象的属性。"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"大纲就是把这个 json 用树形展示。"})}),"\n",(0,c.jsx)(e.p,{children:"你从 json 的角度来回想一下低代码编辑器的拖拽组件到画布、编辑属性、查看大纲这些功能，是不是原理就很容易想通了？"}),"\n",(0,c.jsx)(e.p,{children:"没错，这就是低代码编辑器的核心，就是一个 json。"}),"\n",(0,c.jsx)(e.p,{children:"拖拽也是低代码编辑器的一个难点，用 react-dnd 做就行。"}),"\n",(0,c.jsx)(e.p,{children:"但交互方式是次要的，比如移动端页面的低代码编辑器，可能不需要拖拽，点击就会添加到画布："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:L,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"这种不需要拖拽的是低代码编辑器么？"}),"\n",(0,c.jsx)(e.p,{children:"明显也是。所以说，拖拽不是低代码编辑器必须的。"}),"\n",(0,c.jsx)(e.p,{children:"理解低代码编辑器的核心就是 json 数据结构，不同交互只是修改这个 json 不同部分就行。"}),"\n",(0,c.jsx)(e.p,{children:"下面我们自己来写一个："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"npx create-vite lowcode-editor\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:D,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"安装依赖，把项目跑起来："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"npm install\nnpm run dev\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:H,alt:""})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:F,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"改下 main.tsx："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"import ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\n\nReactDOM.createRoot(document.getElementById('root')!).render(<App />)\n"})}),"\n",(0,c.jsx)(e.p,{children:"新建 src/editor/index.tsx"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"export default function LowcodeEditor() {\n    return <div>LowcodeEditor</div>\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"在 App.tsx 引入下："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"import LowcodeEditor from './editor';\n\nfunction App() {\n\n  return (\n    <LowcodeEditor/>\n  )\n}\n\nexport default App\n\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:R,alt:""})}),"\n",(0,c.jsxs)(e.p,{children:["按照 ",(0,c.jsx)(e.a,{href:"https://www.tailwindcss.cn/docs/guides/vite#react",target:"_blank",rel:"noopener noreferrer",children:"tailwind 文档"}),"里的步骤安装 tailwind："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"npm install -D tailwindcss postcss autoprefixer\n\nnpx tailwindcss init -p\n"})}),"\n",(0,c.jsx)(e.p,{children:"会生成 tailwind 和 postcss 配置文件："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:M,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"修改下 content 配置，也就是从哪里提取 className："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'/** @type {import(\'tailwindcss\').Config} */\nexport default {\n  content: [\n    "./index.html",\n    "./src/**/*.{js,ts,jsx,tsx}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n'})}),"\n",(0,c.jsx)(e.p,{children:"tailwind 会提取 className 之后按需生成最终的 css。"}),"\n",(0,c.jsx)(e.p,{children:"改下 index.css 引入 tailwind 基础样式："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-css",children:"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"})}),"\n",(0,c.jsx)(e.p,{children:"在 main.tsx 里引入："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"如果你没安装 tailwind 插件，需要安装一下："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"这样在写代码的时候就会提示 className 和对应的样式值："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsxs)(e.p,{children:["不知道 className 叫啥的样式，还可以在 ",(0,c.jsx)(e.a,{href:"https://www.tailwindcss.cn/docs/border-width",target:"_blank",rel:"noopener noreferrer",children:"tailwind 文档"}),"里搜："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:z,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"接下来写布局："}),"\n",(0,c.jsxs)(e.p,{children:["我们用 ",(0,c.jsx)(e.a,{href:"https://www.npmjs.com/package/allotment",target:"_blank",rel:"noopener noreferrer",children:"allotment"})," 实现可拖动改变大小的 pane："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:B,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"安装这个包："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"npm install --save allotment\n"})}),"\n",(0,c.jsx)(e.p,{children:"改下 LowcodeEditor："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"import { Allotment } from \"allotment\";\nimport 'allotment/dist/style.css';\n\nexport default function ReactPlayground() {\n    return <div className='h-[100vh] flex flex-col'>\n        <div className=''>\n           Header\n        </div>\n        <Allotment>\n            <Allotment.Pane preferredSize={240} maxSize={300} minSize={200}>\n                Materail\n            </Allotment.Pane>\n            <Allotment.Pane>\n                EditArea\n            </Allotment.Pane>\n            <Allotment.Pane preferredSize={300} maxSize={500} minSize={300}>\n                Setting\n            </Allotment.Pane>\n        </Allotment>\n    </div>\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"引入 Allotment 组件和样式。"}),"\n",(0,c.jsx)(e.p,{children:"设置左右两个 pane 的初始 size，最大最小 size。"}),"\n",(0,c.jsx)(e.p,{children:"h-[任意数值] 是 tailwind 支持的样式写法，就是 height: 任意数值 的意思。"}),"\n",(0,c.jsx)(e.p,{children:"h-[100vh] 就是 height: 100vh"}),"\n",(0,c.jsx)(e.p,{children:"然后设置 flex、flex-col"}),"\n",(0,c.jsx)(e.p,{children:"看下样式："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:P,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"没问题。"}),"\n",(0,c.jsx)(e.p,{children:"左右两边是可以拖拽改变大小的："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:I,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"初始 size、最大、最小 size 都和我们设置的一样。"}),"\n",(0,c.jsx)(e.p,{children:"然后写下 header 的样式。"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"高度 60px、用 flex 布局，竖直居中，有一个底部 border"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"h-[60px] flex items-center border-b-[1px] border-[#000]\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,c.jsx)(e.p,{children:"然后换成具体的组件："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'import { Allotment } from "allotment";\nimport \'allotment/dist/style.css\';\nimport { Header } from "./components/Header";\nimport { EditArea } from "./components/EditArea";\nimport { Setting } from "./components/Setting";\nimport { Material } from "./components/Material";\n\nexport default function ReactPlayground() {\n    return <div className=\'h-[100vh] flex flex-col\'>\n        <div className=\'h-[60px] flex items-center border-b-[1px] border-[#000]\'>\n            <Header />\n        </div>\n        <Allotment>\n            <Allotment.Pane preferredSize={240} maxSize={300} minSize={200}>\n                <Material />\n            </Allotment.Pane>\n            <Allotment.Pane>\n                <EditArea />\n            </Allotment.Pane>\n            <Allotment.Pane preferredSize={300} maxSize={500} minSize={300}>\n                <Setting />\n            </Allotment.Pane>\n        </Allotment>\n    </div>\n}\n'})}),"\n",(0,c.jsx)(e.p,{children:"分别写下这几个组件："}),"\n",(0,c.jsx)(e.p,{children:"editor/components/Header.tsx"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"export function Header() {\n    return <div>Header</div>\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"editor/components/Material.tsx"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"export function Material() {\n    return <div>Material</div>\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"editor/components/EditArea.tsx"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"export function EditArea() {\n    return <div>EditArea</div>\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"editor/components/Setting.tsx"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"export function Setting() {\n    return <div>Setting</div>\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"布局写完了，接下来可以正式来写逻辑了。"}),"\n",(0,c.jsx)(e.p,{children:"这节先来写下低代码编辑器核心的数据结构。"}),"\n",(0,c.jsx)(e.p,{children:"我们不用 Context 保存全局数据了，用 zustand 来做。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"npm install --save zustand\n"})}),"\n",(0,c.jsx)(e.p,{children:"前面做 todolist 案例用过 zustand："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"声明 State、Action 的类型，然后在 create 方法里声明 state、action 就行。"}),"\n",(0,c.jsx)(e.p,{children:"创建 editor/stores/components.tsx，在这里保存全局的那个组件 json："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"import {create} from 'zustand';\n\nexport interface Component {\n  id: number;\n  name: string;\n  props: any;\n  children?: Component[];\n  parentId?: number;\n}\n\ninterface State {\n  components: Component[];\n}\n\ninterface Action {\n  addComponent: (component: Component, parentId?: number) => void;\n  deleteComponent: (componentId: number) => void;\n  updateComponentProps: (componentId: number, props: any) => void;\n}\n\nexport const useComponetsStore = create<State & Action>(\n  ((set, get) => ({\n    components: [\n      {\n        id: 1,\n        name: 'Page',\n        props: {},\n        desc: '页面',\n      }\n    ],\n    addComponent: (component, parentId) =>\n      set((state) => {\n        if (parentId) {\n          const parentComponent = getComponentById(\n            parentId,\n            state.components\n          );\n\n          if (parentComponent) {\n            if (parentComponent.children) {\n              parentComponent.children.push(component);\n            } else {\n              parentComponent.children = [component];\n            }\n          }\n\n          component.parentId = parentId;\n          return {components: [...state.components]};\n        }\n        return {components: [...state.components, component]};\n      }),\n    deleteComponent: (componentId) => {\n      if (!componentId) return;\n\n      const component = getComponentById(componentId, get().components);\n      if (component?.parentId) {\n        const parentComponent = getComponentById(\n          component.parentId,\n          get().components\n        );\n\n        if (parentComponent) {\n          parentComponent.children = parentComponent?.children?.filter(\n            (item) => item.id !== +componentId\n          );\n\n          set({components: [...get().components]});\n        }\n      }\n    },\n    updateComponentProps: (componentId, props) =>\n      set((state) => {\n        const component = getComponentById(componentId, state.components);\n        if (component) {\n          component.props = {...component.props, ...props};\n\n          return {components: [...state.components]};\n        }\n\n        return {components: [...state.components]};\n      }),\n    })\n  )\n);\n\n\nexport function getComponentById(\n    id: number | null,\n    components: Component[]\n  ): Component | null {\n    if (!id) return null;\n  \n    for (const component of components) {\n      if (component.id == id) return component;\n      if (component.children && component.children.length > 0) {\n        const result = getComponentById(id, component.children);\n        if (result !== null) return result;\n      }\n    }\n    return null;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"我们从上到下来看下："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"store 里保存着 components 组件树，它是一个用 children 属性连接起来的树形结构。"}),"\n",(0,c.jsx)(e.p,{children:"我们定义了每个 Component 节点的类型，有 id、name、props 属性，然后通过 chiildren、parentId 关联父子节点。"}),"\n",(0,c.jsx)(e.p,{children:"此外，定义了 add、delete、update 的增删改方法，用来修改 components 组件树。"}),"\n",(0,c.jsx)(e.p,{children:"这是一个树形结构，想要增删改都要先找到 parent 节点，我们实现了查找方法："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:A,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"树形结构中查找节点，自然是通过递归。"}),"\n",(0,c.jsx)(e.p,{children:"如果节点 id 是查找的目标 id 就返回当前组件，否则遍历 children 递归查找。"}),"\n",(0,c.jsx)(e.p,{children:"之后就可以实现增删改方法了："}),"\n",(0,c.jsx)(e.p,{children:"新增会传入 parentId，在哪个节点下新增："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"查找到 parent 之后，在 children 里添加一个 component，并把 parentId 指向这个 parent。"}),"\n",(0,c.jsx)(e.p,{children:"没查到就直接放在 components 下。"}),"\n",(0,c.jsx)(e.p,{children:"删除则是找到这个节点的 parent，在 parent.children 里删除当前节点："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"修改 props 也是找到目标 component，修改属性："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"这样，components 和它的增删改查方法就都定义好了。"}),"\n",(0,c.jsx)(e.p,{children:"这就是我们前面分析的核心数据结构。"}),"\n",(0,c.jsx)(e.p,{children:"有了这个就能实现低代码编辑器的大多数功能了。"}),"\n",(0,c.jsx)(e.p,{children:"不信？"}),"\n",(0,c.jsx)(e.p,{children:"我们试一下："}),"\n",(0,c.jsx)(e.p,{children:"比如我们拖拽一个容器组件进来："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"是不是就是在 components 下新加了一个组件。"}),"\n",(0,c.jsx)(e.p,{children:"模拟实现下："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'import { useEffect } from "react";\nimport { useComponetsStore } from "../../stores/components"\n\nexport function EditArea() {\n\n    const {components, addComponent} = useComponetsStore();\n\n    useEffect(()=> {\n        addComponent({\n            id: 222,\n            name: \'Container\',\n            props: {},\n            children: []\n        }, 1);\n    }, []);\n\n    return <div>\n        <pre>\n            {\n                JSON.stringify(components, null, 2)\n            }\n        </pre>\n    </div>\n}\n'})}),"\n",(0,c.jsx)(e.p,{children:"在 EditArea 组件里，调用 store 里的 addComponent 添加一个组件。"}),"\n",(0,c.jsx)(e.p,{children:"然后把 components 组件树渲染出来："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"可以看到，Page 下多了一个 Container 组件。"}),"\n",(0,c.jsx)(e.p,{children:"然后在 Container 下拖拽一个 Video 组件过去："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"对应的底层操作就是这样的："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"addComponent({\n    id: 333,\n    name: 'Video',\n    props: {},\n    children: []\n}, 222);\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"在编辑器中把这个组件删除："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"对应的操作就是 deleteComponent："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"setTimeout(() => {\n    deleteComponent(333);\n}, 3000);\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"在右边属性编辑区修改组件的信息："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"对应的就是 updateComponentProps："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"（amis 用的 body 属性关联子组件，我们用的 children）"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"至于大纲和 json："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:i,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"就是对这个 json 的展示："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"所以说，从物料区拖组件到画布，删除组件、在属性编辑区修改组件属性，都是对这个 json 的修改。"}),"\n",(0,c.jsxs)(e.p,{children:["案例代码上传了",(0,c.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"git reset --hard 32bd1b33e74adb3832c839161aef415a0d4f3b20\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"总结",children:["总结",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"我们分析了下低代码编辑器 amis，发现核心就是一个 json 的数据结构。"}),"\n",(0,c.jsx)(e.p,{children:"这个 json 就是一个通过 children 属性串联的组件对象树。"}),"\n",(0,c.jsx)(e.p,{children:"从物料区拖拽组件到画布区，就是在 json 的某一层级加了一个组件对象。"}),"\n",(0,c.jsx)(e.p,{children:"选中组件在右侧编辑属性，就是修改 json 里某个组件对象的属性。"}),"\n",(0,c.jsx)(e.p,{children:"大纲就是把这个 json 用树形展示。"}),"\n",(0,c.jsx)(e.p,{children:"然后我们写了下代码，用 allomet 实现了 split pane 布局，用 tailwind 来写样式，引入 zustand 来做全局 store。"}),"\n",(0,c.jsx)(e.p,{children:"在 store 中定义了 components 和对应的 add、update、delete 方法。"}),"\n",(0,c.jsx)(e.p,{children:"然后对应低代码编辑器里的操作，用这些方法实现了一下。"}),"\n",(0,c.jsx)(e.p,{children:"这个数据结构并不复杂，却是低代码编辑器的核心。"})]})}function q(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(Q,{...n})}):Q(n)}let K=q;q.__RSPRESS_PAGE_META={},q.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC67%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E5%85%A8%E5%B1%80store.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第67章—低代码编辑器：核心数据结构、全局store",headingTitle:"第67章—低代码编辑器：核心数据结构、全局store",frontmatter:{}}}}]);