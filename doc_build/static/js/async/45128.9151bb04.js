"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["45128"],{863281:function(e,n,s){s.r(n),s.d(n,{default:()=>c});var r=s(552676),i=s(740453);let a=s.p+"static/image/26c176c147b51caffcf8d3a6d5eb580f.04e7b6d3.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",ul:"ul",li:"li",pre:"pre",code:"code",img:"img",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ol:"ol",h4:"h4"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"5-基础4页面导航网络请求数据缓存",children:["5 基础4：页面导航、网络请求、数据缓存",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-基础4页面导航网络请求数据缓存",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"注释代码很像清洁你的厕所——你不想干，但如果你做了，这绝对会给你和你的客人带来更愉悦的体验。—— Ryan Campbell"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这一章我们主要学习关于页面导航，网络请求以及数据缓存的知识，学习如何在跨页面中传递参数，如何拦截请求等"}),"\n",(0,r.jsxs)(n.h2,{id:"页面导航",children:["页面导航",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面导航",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"说到页面导航，我们可能首先想到的是页面跳转（页面A跳转到页面B），页面跳转在不同端之间有不同的区别："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"H5 通过 window.history 属性对其进行访问，改变路由记录从而实现跳转"}),"\n",(0,r.jsx)(n.li,{children:"ios/安卓 是改变根视图或操作导航控制器出栈进栈从而实现跳转"}),"\n",(0,r.jsx)(n.li,{children:"小程序实现跳转采用的方式也是改变根视图或操作导航控制器出栈进栈"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"如果你要把用 Uniapp 开发的项目编译成 H5，那么该项目呈现的是单页面应用，单页面应用实现页面跳转是通过监测页面 url 的 hash 改变而加载不同页面。hash 模式背后的原理是 onhashchange 事件，可以在 window 对象上监听这个事件："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"window.location.hash = 'list/list' // 设置页面 url 的 hash，会在当前url后加上 '#list/list'\n\nlet hash = window.location.hash // '#/pages/list/list'\n\nwindow.addEventListener('hashchange', function(){ \n    // 监听 hash 变化，点击浏览器的前进后退或者hash改变会触发\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:"例如访问列表地址，# 后面的路径就是指向页面地址："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"http://localhost:8080/#/pages/list/list\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果不想要很丑的 hash，我们可以用路由的 history 模式，在项目的配置文件 【manifest.json】>>【h5配置】>> 【路由模式】 进行修改："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["history 模式改变 url 的方式会导致浏览器向服务器发送请求，如果服务器端未做任何处理，则会请求资源失败，我们需要在服务器端做处理：如果匹配不到任何静态资源，则应该始终返回同一个 html 页面。具体操作可以看",(0,r.jsx)(n.a,{href:"https://router.vuejs.org/zh/guide/essentials/history-mode.html",target:"_blank",rel:"noopener noreferrer",children:"这里"})]}),"\n",(0,r.jsx)(n.p,{children:"如果你要用 Uniapp 开发的项目编译成微信小程序，就要注意微信小程序的页面栈的限制了，小程序中页面栈限制最多十层（微信进行了限制调整），随着页面栈的push增加，在不知道的情况下就会堆栈到十层，再用API navigateTo 去跳转页面就跳不动了，用户会跳转失效（卡死状态）。"}),"\n",(0,r.jsx)(n.p,{children:"如果遇到上述问题，删除当前页面栈（redirectTo）或删除所有页面栈（reLaunch）来跳转了，页面栈以跳转的 url 为第一个页面栈。页面栈可以通过 getCurrentPages 方法获取。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function navigateTo(url, callback) {\n    let goType = getCurrentPages().length >= 10 ? 'redirectTo' : 'navigateTo'\n    wx[goType]({\n        url,\n        success: res => {\n            callback()\n        },\n        fail: res => { },\n        complete: res => { },\n    })\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"简单化是微信小程序的开发理念的其中之一，如果你的页面栈层出现爆栈卡制，那么可以考虑一下你的产品项目的入口是不是设计的太深了，如果是，那这是多么糟糕的用户体验呀。"}),"\n",(0,r.jsx)(n.p,{children:"通过上面这些介绍，我们来看下 Uniapp 的路由与页面跳转"}),"\n",(0,r.jsxs)(n.h2,{id:"uniapp-的路由与页面跳转",children:["Uniapp 的路由与页面跳转",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#uniapp-的路由与页面跳转",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Uniapp 集成多端的跳转方式，以标签 navigator 及封装 API 的形式控制应用内的跳转。"}),"\n",(0,r.jsx)(n.p,{children:"如果我想要首页跳转到列表页面并传一些参数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 在起始页面跳转到list.vue页面并传递参数\n// 该页面需要在 pages.json 注册\nuni.navigateTo({\n    url: '/pages/list/list?id=1&name=uniapp'\n});\n\n// 或者使用标签形式跳转\n<navigator url=\"/pages/list/list?id=1&name=uniapp\">去列表</navigator>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 在list.vue页面接受参数\nexport default {\n    onLoad: function (option) { //option为object类型，会序列化上个页面传递的参数\n        console.log(option.id); //打印出上个页面传递的参数。\n        console.log(option.name); //打印出上个页面传递的参数。\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"我们还可以使用下面的几个 API 操作页面跳转:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"uni.navigateTo() 保留当前页面，跳转到应用内的某个页面，使用 uni.navigateBack 可以返回到原页面。\nuni.redirectTo() 关闭当前页面，跳转到应用内的某个页面。\nuni.reLaunch() 关闭所有页面，打开到应用内的某个页面。reLaunch 可以打开任意页面。\nuni.switchTab() 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。switchTab 只能打开 tabBar 页面。\n"})}),"\n",(0,r.jsx)(n.p,{children:"注意："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"* navigateTo, redirectTo 只能打开非 tabBar 页面。\n* 页面跳转路径有层级限制，不能无限制跳转新页面\n* 跳转到 tabBar 页面只能使用 switchTab 跳转\n* 路由 API 的目标页面必须是在 pages.json 里注册的 vue 页面。如果想打开 web url，在 App 平台可以使用 plus.runtime.openURL 或 web-view 组件；H5 平台使用 window.open；小程序平台使用 web-view 组件（url需在小程序的联网白名单中）。在 hello uni-app 中有个组件 ulink.vue 已对多端进行封装，可参考。\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果使用标签形式进行跳转改变标签 ",(0,r.jsx)(n.code,{children:"open-type"})," 属性即可："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<navigator url="navigate/navigate?title=navigate" open-type="navigate">\n    跳转到新页面\n</navigator>\n'})}),"\n",(0,r.jsx)(n.p,{children:"open-type 跳转方式参数对应："}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"值"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"说明"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"平台差异说明"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"navigate"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"对应 uni.navigateTo 的功能"}),"\n",(0,r.jsx)(n.td,{align:"center"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"redirect"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"对应 uni.redirectTo 的功能"}),"\n",(0,r.jsx)(n.td,{align:"center"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"switchTab"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"对应 uni.switchTab 的功能"}),"\n",(0,r.jsx)(n.td,{align:"center"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"reLaunch"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"对应 uni.reLaunch 的功能"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"字节跳动小程序不支持"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"navigateBack"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"对应 uni.navigateBack 的功能"}),"\n",(0,r.jsx)(n.td,{align:"center"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"exit"}),"\n",(0,r.jsx)(n.td,{align:"center",children:'退出小程序，target="miniProgram"时生效'}),"\n",(0,r.jsx)(n.td,{align:"center",children:"微信2.1.0+、百度2.5.2+、QQ1.4.7+"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"uniapp中的网络请求",children:["Uniapp中的网络请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#uniapp中的网络请求",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Uniapp 使用 API ",(0,r.jsx)(n.code,{children:"uni.request()"})," 发起网络请求，如果你用过微信小程序开发就会熟悉这个 API（",(0,r.jsx)(n.code,{children:"wx.request()"}),"），Uniapp 兼容了微信代码，如果你写了 ",(0,r.jsx)(n.code,{children:"wx."})," 前缀，也可以执行，效果等同于 ",(0,r.jsx)(n.code,{children:"uni."}),"，这里提一下，不建议同时存在 ",(0,r.jsx)(n.code,{children:"uni."})," 和 ",(0,r.jsx)(n.code,{children:"wx."})," 的写法，始终保持 api 统一，以免后期升级维护莫名报 bug。"]}),"\n",(0,r.jsx)(n.p,{children:"代码示例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"uni.request({\n    url: 'https://www.example.com/request', //仅为示例，并非真实接口地址。\n    data: {\n        text: 'uni.request'\n    },\n    header: {\n        'custom-header': 'hello' //自定义请求头信息\n    },\n    success: (res) => {\n        console.log(res.data);\n        this.text = 'request success';\n    }\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"使用方法跟 jQuery 的 ajax 差不多，指定接口地址、请求方法、请求参数，可以拿来即用。如果没有传入 success / fail / complete 参数，则会返回封装后的 Promise 对象:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Promise\nuni.request({\n    url: 'https://www.example.com/request'\n}).then(data => {   // data为一个数组，数组第一项为错误信息，第二项为返回数据\n    let [error, res]  = data;\n    console.log(res.data);\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:"如何中断一次请求呢？"}),"\n",(0,r.jsx)(n.p,{children:"很多场景下是如果请求2个接口数据，当某一个接口成功的时候，就可能需要禁止掉另外一个接口的继续请求了，无论你是否有这样的需求，这种情况确实有发生："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let requestTask = uni.request({\n    url: 'https://www.example.com/request' // 仅为示例，并非真实接口地址。\n});\n\n// 中断请求任务\nrequestTask.abort();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面对 request 对象进行一次返回，这样我们可以调用该对象下的 ",(0,r.jsx)(n.code,{children:"abort"})," 方法，可中断请求任务。如果需要更好的实现拦截，并统一管理请求，Uniapp 插件市场有 flyio、axios 等三方封装的拦截器可用。本章附有教程代码。"]}),"\n",(0,r.jsx)(n.p,{children:"当然更多的时候，我们会进行另外一个操作，设置网络请求超时。服务器未必会如同我们想的那么快捷，携带的信息也并非轻量，可能它们会跟我们一样悄悄的偷个懒，我们并不希望让这个请求一直保持触发状态。对于用户来说，这就是卡死的状态，我们现在说的就是体验感的问题。Uniapp 规定可以统一在 manifest.json 文件中配置 networkTimeout 的参数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'    "name" : "mvvm",\n    "appid" : "",\n    "description" : "",\n    "versionName" : "1.0.0",\n    "versionCode" : "100",\n    "transformPx" : false,\n    "networkTimeout" : {\n        "request" : 6000\n    },\n    // ...\n'})}),"\n",(0,r.jsx)(n.p,{children:"有效封装能够更好的管理业务，比如服务器 500 错误的处理，400 的错误有怎么去处理，这些就是让你的请求更有肌肉感，让用户能在错误请求中获得良好体验。"}),"\n",(0,r.jsx)(n.p,{children:"一段 request 封装处理的响应代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const resInterceptor = (response, conf = {}) => {\n    // TODO do your response\n    const statusCode = response.statusCode\n    console.log(\'statusCode：\'+ statusCode)\n    // response interceptor\n    if (statusCode >= 200 && statusCode < 300) { //成功\n        _responseLog(response, conf, "response 200-299")\n        return response\n    } else if (statusCode === 500) {\n        _responseLog(response, conf, "response 500")\n        // 为了对reject的内容更加可控，我们增加了一个控制字段 wakaryReqToReject\n        return {\n            // 根据当前字段来判断是否reject\n            wakaryReqToReject: true,\n            // 下面可以配置您的其它返回信息，方便您更加统一的处理reject的内容。\n            // 以下内容会被作为reject的返回，根据您的需要处理，比如返回您的具体错误信息\n            msg: "服务器错误",\n            res: response\n        }\n    } else {\n        _responseLog(response, conf, "response 300-499")\n        // 为了对reject的内容更加可控，我们增加了一个控制字段 wakaryReqToReject\n        return {\n            // 根据当前字段来判断是否reject\n            wakaryReqToReject: true,\n            // 下面可以配置您的其它返回信息，方便您更加统一的处理reject的内容。\n            // 以下内容会被作为reject的返回，根据您的需要处理，比如返回您的具体错误信息\n            msg: "这里是提示信息",\n            res: response\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"注意："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"良好体验的 App，还会判断当前是否处于飞行模式（参考）、是 wifi 还是 3G（参考）"}),"\n",(0,r.jsx)(n.li,{children:"单次网络请求数据量建议控制在50K以下（仅指 json 数据，不含图片），过多数据应分页获取，以提升应用体验。"}),"\n",(0,r.jsx)(n.li,{children:"localhost、127.0.0.1等服务器地址，只能在电脑端运行，手机端连接时不能访问。请使用标准 IP 并保证手机能连接电脑网络"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"uniapp-中的storage存储信息",children:["Uniapp 中的storage存储信息",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#uniapp-中的storage存储信息",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Uniapp 集成了小程序，app，h5 的数据缓存，统一了 ",(0,r.jsx)(n.code,{children:"uni.setStorage()"}),"，",(0,r.jsx)(n.code,{children:"uni.getStorage()"})," 系列 API，完成对缓存数据的操作。"]}),"\n",(0,r.jsx)(n.p,{children:"示例代码:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"uni.setStorage({\n    key: 'storage_key',\n    data: 'hello',\n    success: function () {\n        console.log('success');\n    }\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，存储的内容，只支持原生类型、及能够通过 ",(0,r.jsx)(n.code,{children:"JSON.stringify"})," 序列化的对象。"]}),"\n",(0,r.jsxs)(n.p,{children:["记住，uniapp 设置存储有同步与异步之分，使用 ",(0,r.jsx)(n.code,{children:"uni.setStorage()"})," 参数对象需指定键值 ",(0,r.jsx)(n.code,{children:"key"})," ，存储数据 ",(0,r.jsx)(n.code,{children:"data"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 异步需指定 key 和 data\nuni.setStorage({\n    key: 'storage_key',\n    data: 'hello',\n    success: function () {\n        console.log('success');\n    }\n});\n\n// 同步，不用指定 key 和 data 的键\nuni.setStorageSync('storage_key', 'hello');\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"因为是异步操作，有接口调用成功的回调函数，如果有业务逻辑处理或者判定失败等情况，就可以从这入手。"}),"\n",(0,r.jsxs)(n.h4,{id:"注意",children:["注意",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Uniapp 的 Storage 在不同端的实现不同："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"H5 端为 localStorage，浏览器限制 5M 大小，持久化，可能会被清理；"}),"\n",(0,r.jsx)(n.li,{children:"App 端为原生的 plus.storage，无大小限制，不是缓存，持久化；"}),"\n",(0,r.jsx)(n.li,{children:"各个小程序端自带的 Storage api，数据存储生命周期跟小程序本身一致，即除用户主动删除或超过一定时间被自动清理，否则数据都一直可用；"}),"\n",(0,r.jsx)(n.li,{children:"微信小程序单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB；"}),"\n",(0,r.jsx)(n.li,{children:"支付宝小程序单条数据转换成字符串后，字符串长度最大200*1024。同一个支付宝用户，同一个小程序缓存总上限为10MB；"}),"\n",(0,r.jsx)(n.li,{children:"百度、字节跳动小程序文档未说明大小限制。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"页面跳转的方式是一个应用的基本，但是入口太深会让你的用户失去耐心；"}),"\n",(0,r.jsx)(n.li,{children:"请求的二次封装可以更好的管理你的请求动作，取消中断操作，业务问题，服务器错误等；"}),"\n",(0,r.jsx)(n.li,{children:"留意操作 Storage 的异步同步之分，以及 Storage 在各端的表现。"}),"\n",(0,r.jsxs)(n.li,{children:["本章代码 ",(0,r.jsx)(n.a,{href:"https://github.com/front-end-class/uniapp-music-code/blob/master/uni-course-request.zip",target:"_blank",rel:"noopener noreferrer",children:"uni-course-request"})]}),"\n"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["Uniapp%20%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6%2F5%20%E5%9F%BA%E7%A1%804%EF%BC%9A%E9%A1%B5%E9%9D%A2%E5%AF%BC%E8%88%AA%E3%80%81%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E3%80%81%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98.md"]={toc:[{text:"页面导航",id:"页面导航",depth:2},{text:"Uniapp 的路由与页面跳转",id:"uniapp-的路由与页面跳转",depth:2},{text:"Uniapp中的网络请求",id:"uniapp中的网络请求",depth:2},{text:"Uniapp 中的storage存储信息",id:"uniapp-中的storage存储信息",depth:2},{text:"注意",id:"注意",depth:4},{text:"小结",id:"小结",depth:2}],title:"5 基础4：页面导航、网络请求、数据缓存",headingTitle:"5 基础4：页面导航、网络请求、数据缓存",frontmatter:{}}}}]);