"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["44624"],{275674:function(e,n,c){c.r(n),c.d(n,{default:()=>l});var r=c(552676),s=c(740453);let d=c.p+"static/image/b4db937c1e5b0775a6c2e41c3137b267.9e0a621b.webp";function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",img:"img",strong:"strong",blockquote:"blockquote"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"9响应式原理watch-函数的实现原理",children:["9.响应式原理：watch 函数的实现原理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9响应式原理watch-函数的实现原理",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在组合式 API 中，我们可以使用\xa0",(0,r.jsxs)(n.a,{href:"https://cn.vuejs.org/api/reactivity-core.html#watch",target:"_blank",rel:"noopener noreferrer",children:[(0,r.jsx)(n.code,{children:"watch"}),"\xa0函数"]}),"在每次响应式状态发生变化时触发回调函数，",(0,r.jsx)(n.code,{children:"watch"}),"\xa0的第一个参数可以是不同形式的数据类型：它可以是一个 ",(0,r.jsx)(n.code,{children:"ref"}),"（包括计算属性）、一个响应式对象、一个 ",(0,r.jsx)(n.code,{children:"getter 函数"}),"、或多个数据源组成的数组。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const x = ref(0)\nconst y = ref(0)\nconst state = reactive({ num: 0 })\n\n// 单个 ref\nwatch(x, (newX) => {\n  console.log(`x is ${newX}`)\n})\n\n// getter 函数\nwatch(\n  () => x.value + y.value,\n  (sum) => {\n    console.log(`sum of x + y is: ${sum}`)\n  }\n)\n\n// 响应式对象\nwatch(\n  state,\n  (newState) => {\n    console.log(`new state num is: ${newState.num}`)\n  }\n)\n\n// 多个来源组成的数组\nwatch([x, () => y.value], ([newX, newY]) => {\n  console.log(`x is ${newX} and y is ${newY}`)\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["了解了一些基础的 ",(0,r.jsx)(n.code,{children:"watch"})," 使用示例后，我们开始分析一下 ",(0,r.jsx)(n.code,{children:"watch"})," 函数是如何实现的呢。"]}),"\n",(0,r.jsxs)(n.h2,{id:"标准化-source",children:["标准化 source",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#标准化-source",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["先来看一下 ",(0,r.jsx)(n.code,{children:"watch"})," 函数实现的代码："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function watch(source, cb, options) { \n  // ...\n  return doWatch(source, cb, options) \n} \n\nfunction doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) { \n  // ...\n} \n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"watch"})," 函数内部是通过 ",(0,r.jsx)(n.code,{children:"doWatch"})," 来执行的，在分析 ",(0,r.jsx)(n.code,{children:"doWatch"})," 函数实现前，我们先看看前面的示例中，",(0,r.jsx)(n.code,{children:"watch"})," 监听的 ",(0,r.jsx)(n.code,{children:"source"})," 可以是多种类型，一个函数可以支持多种类型的参数入参，那么实现该函数最好的设计模式就是 ",(0,r.jsx)(n.code,{children:"adapter"})," 代理模式。就是将底层模型设计成一致的，抹平调用差异，这也是 ",(0,r.jsx)(n.code,{children:"doWatch"})," 函数实现的第一步：标准化 ",(0,r.jsx)(n.code,{children:"source"})," 参数。"]}),"\n",(0,r.jsx)(n.p,{children:"一起来看看其中的实现："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {\n  // ...\n  // source 不合法的时候警告函数\n  const warnInvalidSource = (s: unknown) => {\n    warn(\n      `Invalid watch source: `,\n      s,\n      `A watch source can only be a getter/effect function, a ref, ` +\n      `a reactive object, or an array of these types.`\n    )\n  }\n  \n  const instance = currentInstance\n  let getter\n  let forceTrigger = false\n  let isMultiSource = false\n\n  // 判断是不是 ref 类型\n  if (isRef(source)) {\n    getter = () => source.value\n    forceTrigger = isShallow(source)\n  }\n  // 判断是不是响应式对象\n  else if (isReactive(source)) {\n    getter = () => source\n    deep = true\n  }\n  // 判断是不是数组类型\n  else if (isArray(source)) {\n    isMultiSource = true\n    forceTrigger = source.some(s => isReactive(s) || isShallow(s))\n    getter = () =>\n      source.map(s => {\n        if (isRef(s)) {\n          return s.value\n        } else if (isReactive(s)) {\n          return traverse(s)\n        } else if (isFunction(s)) {\n          return callWithErrorHandling(s, instance, ErrorCodes.WATCH_GETTER)\n        } else {\n          __DEV__ && warnInvalidSource(s)\n        }\n      })\n  }\n  // 判断是不是函数类型\n  else if (isFunction(source)) {\n    if (cb) {\n      // getter with cb\n      getter = () =>\n        callWithErrorHandling(source, instance, ErrorCodes.WATCH_GETTER)\n    } else {\n      // 如果只有一个函数作为source 入参，则执行 watchEffect 的逻辑\n      // ...\n    }\n  }\n  // 都不符合，则告警\n  else {\n    getter = NOOP\n    __DEV__ && warnInvalidSource(source)\n  }\n\n  // 深度监听\n  if (cb && deep) {\n    const baseGetter = getter\n    getter = () => traverse(baseGetter())\n  }\n  \n  // ...\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["由于 ",(0,r.jsx)(n.code,{children:"doWatch"})," 函数代码量比较多，我们先一部分一部分地来解读，这里我们只关注于标准化 ",(0,r.jsx)(n.code,{children:"source"})," 的逻辑。可以看到 ",(0,r.jsx)(n.code,{children:"doWatch"})," 函数会对入参的 ",(0,r.jsx)(n.code,{children:"source"})," 做不同类型的判断逻辑，然后生成一个统一的 ",(0,r.jsx)(n.code,{children:"getter"})," 函数："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"getter"})," 函数就是简单地对不同数据类型设置一个访问 ",(0,r.jsx)(n.code,{children:"source"})," 的操作，比如对于 ",(0,r.jsx)(n.code,{children:"ref"})," 就是一个创建了一个访问 ",(0,r.jsx)(n.code,{children:"source.value"})," 的函数。"]}),"\n",(0,r.jsxs)(n.p,{children:["那么为什么需要",(0,r.jsx)(n.strong,{children:"访问"}),"呢？由之前的响应式原理我们知道，只有在触发 ",(0,r.jsx)(n.code,{children:"proxy getter"})," 的时候，才会进行依赖收集，所以，这里标准化的 ",(0,r.jsx)(n.code,{children:"source"})," 函数中，不管是什么类型的 ",(0,r.jsx)(n.code,{children:"source"})," 都会设计一个访问器函数。"]}),"\n",(0,r.jsxs)(n.p,{children:["另外，需要注意的是当 ",(0,r.jsx)(n.code,{children:"source"})," 是个响应式对象时，源码中会同时设置 ",(0,r.jsx)(n.code,{children:"deep = true"}),"。这是因为对于响应式对象，需要进行深度监听，因为响应式对象中的属性变化时，都需要进行反馈。那是怎么做到深度监听的呢？在回答这个问题之前，我们前面说了监听一个对象的属性就是需要先访问对象的属性，触发 ",(0,r.jsx)(n.code,{children:"proxy getter"}),"，把副作用 ",(0,r.jsx)(n.code,{children:"cb"})," 收集起来。源码中则是通过 ",(0,r.jsx)(n.code,{children:"traverse"})," 函数来实现对响应式对象属性的遍历访问："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export function traverse(value, seen) {\n  // ...\n  if (isRef(value)) {\n    // 如果是 ref 类型，继续递归执行 .value值\n    traverse(value.value, seen)\n  } else if (Array.isArray(value)) {\n    // 如果是数组类型\n    for (let i = 0; i < value.length; i++) {\n      // 递归调用 traverse 进行处理\n      traverse(value[i], seen)\n    }\n  } else if (isPlainObject(value)) {\n    // 如果是对象，使用 for in 读取对象的每一个值，并递归调用 traverse 进行处理\n    for (const key in value) {\n      traverse((value as any)[key], seen)\n    }\n  }\n  return value\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"构造副作用-effect",children:["构造副作用 effect",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构造副作用-effect",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["前面说到，我们通过一系列操作，标准化了用户传入的 ",(0,r.jsx)(n.code,{children:"source"})," 成了一个 ",(0,r.jsx)(n.code,{children:"getter"})," 函数，此时的 ",(0,r.jsx)(n.code,{children:"getter"})," 函数一方面还没有真正执行，也就没有触发对属性的访问操作。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"watch"})," 的本质是对数据源进行依赖收集，当依赖变化时，回调执行 ",(0,r.jsx)(n.code,{children:"cb"})," 函数并传入新旧值。所以我们需要构造一个副作用函数，完成对数据源的变化追踪："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) { \n  // ...\n  const effect = new ReactiveEffect(getter, scheduler)\n} \n"})}),"\n",(0,r.jsxs)(n.p,{children:["这里的 ",(0,r.jsx)(n.code,{children:"getter"})," 就是前面构造的属性访问函数，我们在介绍响应式原理的章节中，介绍过 ",(0,r.jsx)(n.code,{children:"ReactiveEffect"})," 函数，这里再来回顾一下 ",(0,r.jsx)(n.code,{children:"ReactiveEffect"})," 的实现："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class ReactiveEffect {\n  constructor(\n    public fn: () => T,\n    public scheduler: EffectScheduler | null = null,\n    scope?: EffectScope\n  ) {\n    recordEffectScope(this, scope)\n  }\n  \n  run() {\n    // ...  \n    this.fn()\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这里细节部分可以详细阅读响应式原理的部分，我们只需要知道这里的 ",(0,r.jsx)(n.code,{children:"ReactiveEffect run"})," 函数内部执行了 ",(0,r.jsx)(n.code,{children:"this.fn()"})," 也就是上面传入的 ",(0,r.jsx)(n.code,{children:"getter"})," 函数，所以，本质上是在此时完成了对 ",(0,r.jsx)(n.code,{children:"watch source"})," 的访问。"]}),"\n",(0,r.jsxs)(n.p,{children:["然后再看一下 ",(0,r.jsx)(n.code,{children:"ReactiveEffect"})," 的第二个参数 ",(0,r.jsx)(n.code,{children:"scheduler"}),"，是如何构造的呢？"]}),"\n",(0,r.jsxs)(n.h2,{id:"构造-scheduler-调度",children:["构造 scheduler 调度",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构造-scheduler-调度",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {\n  // ...\n  let oldValue = isMultiSource \n    ? new Array(source.length).fill(INITIAL_WATCHER_VALUE)\n    : INITIAL_WATCHER_VALUE\n  const job = () => {\n    // 被卸载\n    if (!effect.active) {\n      return\n    }\n    if (cb) {\n      // 获取新值\n      const newValue = effect.run()\n      // ...\n      // 执行 cb 函数\n      callWithAsyncErrorHandling(cb, instance, ErrorCodes.WATCH_CALLBACK, [\n        newValue,\n        // 第一次更改时传递旧值为 undefined\n        oldValue === INITIAL_WATCHER_VALUE\n          ? undefined\n          : (isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE)\n            ? []\n            : oldValue,\n        onCleanup\n        ])\n      oldValue = newValue\n    } else {\n      // watchEffect\n      effect.run()\n    }\n  }\n\n  let scheduler\n  // 直接赋值为 job 函数\n  if (flush === 'sync') {\n    scheduler = job\n  } else if (flush === 'post') {\n    // 渲染后执行，放入 postRenderEffect 队列\n    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense)\n  } else {\n    // 默认是渲染更新之前执行，设置 job.pre = true\n    job.pre = true\n    if (instance) job.id = instance.uid\n    scheduler = () => queueJob(job)\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"scheduler"})," 我们在批量调度更新章节有简单介绍过，本质这里是根据不同的 ",(0,r.jsx)(n.code,{children:"watch options"})," 中的 ",(0,r.jsx)(n.code,{children:"flush"})," 参数来设置不同的调度节点，这里默认是渲染更新前执行，也就是在异步更新队列 ",(0,r.jsx)(n.code,{children:"queue"})," 执行前执行。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"scheduler"})," 核心就是将 ",(0,r.jsx)(n.code,{children:"job"})," 放入异步执行队列中，但有个特殊，也就是 ",(0,r.jsx)(n.code,{children:"flush = 'sync'"})," 时，是放入同步执行的。那么 ",(0,r.jsx)(n.code,{children:"job"})," 是个什么啥玩意呢？"]}),"\n",(0,r.jsxs)(n.p,{children:["上述代码的注释已经很详尽了，",(0,r.jsx)(n.code,{children:"job"})," 其实就是一个用来执行回调函数 ",(0,r.jsx)(n.code,{children:"cb"})," 的函数而已，在执行 ",(0,r.jsx)(n.code,{children:"cb"})," 的同时，传入了 ",(0,r.jsx)(n.code,{children:"source"})," 的新旧值。"]}),"\n",(0,r.jsxs)(n.h2,{id:"effect-run-函数执行",children:["effect run 函数执行",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#effect-run-函数执行",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["前面我们说到了，",(0,r.jsx)(n.code,{children:"ReactiveEffect"})," 内部的 ",(0,r.jsx)(n.code,{children:"run"})," 函数，执行了依赖访问的 ",(0,r.jsx)(n.code,{children:"getter"})," 函数，所以 ",(0,r.jsx)(n.code,{children:"run"})," 函数是如何被执行的呢？"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {\n  //...\n  // 如果存在 cb\n  if (cb) {\n    // 立即执行\n    if (immediate) {\n      // 首次直接执行 job\n      job()\n    } else {\n      // 执行run 函数，获取旧值\n      oldValue = effect.run()\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["可以看到在执行 ",(0,r.jsx)(n.code,{children:"effect.run"})," 的前面判断了是否是立即执行的模式，如果是立即执行，则直接执行上面的 ",(0,r.jsx)(n.code,{children:"job"})," 函数，而此时的 ",(0,r.jsx)(n.code,{children:"job"})," 函数是没有旧值的，所以此时执行的 ",(0,r.jsx)(n.code,{children:"oldValue = undefined"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"返回销毁函数",children:["返回销毁函数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回销毁函数",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["最后，会返回侦听器销毁函数，也就是 ",(0,r.jsx)(n.code,{children:"watch API"})," 执行后返回的函数。我们可以通过调用它来停止 ",(0,r.jsx)(n.code,{children:"watcher"})," 对数据的侦听。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {\n  //...\n  return () => {\n    effect.stop()\n    if (instance && instance.scope) {\n      remove(instance.scope.effects!, effect)\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["销毁函数内部会执行 ",(0,r.jsx)(n.code,{children:"effect.stop"})," 方法，用来停止对数据的 ",(0,r.jsx)(n.code,{children:"effect"})," 响应。并且，如果是在组件中注册的 ",(0,r.jsx)(n.code,{children:"watcher"}),"，也会移除组件 ",(0,r.jsx)(n.code,{children:"effects"})," 对这个 ",(0,r.jsx)(n.code,{children:"runner"})," 的引用。"]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["所谓 ",(0,r.jsx)(n.code,{children:"watch"}),"，就是观测一个响应式数据或者监测一个副作用函数里面的响应式数据，当数据发生变化的时候通知并执行相应的回调函数。而内部实现，就是通过构造一个 ",(0,r.jsx)(n.code,{children:"effect"})," 副作用对象，通过对 ",(0,r.jsx)(n.code,{children:"watch"})," 监听属性的访问触发副作用收集，当修改监听属性时，根据 ",(0,r.jsx)(n.code,{children:"flush"})," 的状态触发 ",(0,r.jsx)(n.code,{children:"job"})," 的不同阶段更新。"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let l=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["Vue%203%20%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%2F9.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%EF%BC%9Awatch%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"标准化 source",id:"标准化-source",depth:2},{text:"构造副作用 effect",id:"构造副作用-effect",depth:2},{text:"构造 scheduler 调度",id:"构造-scheduler-调度",depth:2},{text:"effect run 函数执行",id:"effect-run-函数执行",depth:2},{text:"返回销毁函数",id:"返回销毁函数",depth:2},{text:"总结",id:"总结",depth:2}],title:"9.响应式原理：watch 函数的实现原理",headingTitle:"9.响应式原理：watch 函数的实现原理",frontmatter:{}}}}]);