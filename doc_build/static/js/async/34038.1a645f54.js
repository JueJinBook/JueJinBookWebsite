"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["34038"],{964101:function(n,e,a){a.r(e),a.d(e,{default:()=>h});var s=a(552676),i=a(740453);function c(n){let e=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",br:"br",h2:"h2",code:"code",pre:"pre",ul:"ul",li:"li",h3:"h3"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"4--langchainjs-的介绍安装和快速入门",children:["4- Langchain.js 的介绍、安装和快速入门",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4--langchainjs-的介绍安装和快速入门",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["本章对应源代码：",(0,s.jsx)(e.a,{href:"https://github.com/RealKai42/langchainjs-juejin/blob/main/basic-langchain.ipynb",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/RealKai42/langchainjs-juejin/blob/main/basic-langchain.ipynb"})]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["在本章和后续的教程中，我会默认使用 Deno 环境，如果使用的 nodejs 我会特别标注出来。",(0,s.jsx)(e.br,{}),"\n","当然因为 Deno 和 Node.js 代码上除了部分 API 外大同小异，使用 Node.js 的同学也可以简单修改一些细节来成功运行。"]}),"\n",(0,s.jsxs)(e.h2,{id:"基础配置",children:["基础配置",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基础配置",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["首先，我们向 ",(0,s.jsx)(e.code,{children:"deno.json"})," 中添加 langchain 相关的依赖别名，为了保证大家正常学习教程，我们会锁定版本："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "imports": {\n    "lodash": "npm:/lodash@4.17.21",\n    "dotenv": "https://deno.land/std@0.220.0/dotenv/mod.ts",\n    "langchain": "npm:/langchain@0.1.28",\n    "langchain/": "npm:/langchain@0.1.28/",\n    "@langchain/openai": "npm:/@langchain/openai@0.0.22",\n    "@langchain/openai/": "npm:/@langchain/openai@0.0.22/",\n    "@langchain/core": "npm:/@langchain/core@0.1.48",\n    "@langchain/core/": "npm:/@langchain/core@0.1.48/"\n  },\n  "deno.enable": true\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["这里我们除了添加正常的",(0,s.jsx)(e.code,{children:"langchain"})," 包之外，我们还添加了",(0,s.jsx)(e.code,{children:"langchain/"})," 来方便引用 langchain 中众多的子包，其他的依赖也是类似的逻辑。"]}),"\n",(0,s.jsx)(e.p,{children:"然后，我们就可以引入环境变量，主要是相关的 keys。这里我们再次强调，一定不能将 env 文件上传到 github 或者任意公开渠道！！！"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'import { load } from "dotenv";\nconst env = await load();\n\nconst process = {\n    env\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"什么是-lcel",children:["什么是 LCEL",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是-lcel",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["如果你之前看到 langchain.js 其他的相关教程，可能写法并不是 LCEL。 LCEL（LangChain Expression Language） 是 langchain 无论是 python 还是 js 版本都在主推的新设计。",(0,s.jsx)(e.br,{}),"\n","站在当前这个时间点，我认为应该全面转向 LCEL，可以抛弃之前的旧写法，为了防止混淆，本教程所有代码都会基于 LCEL，也并不会介绍旧的 langchain 写法。"]}),"\n",(0,s.jsx)(e.p,{children:"那 LCEL 有什么优势呢？\nLCEL 从底层设计的目标就是支持 从原型到生产 完整流程不需要修改任何代码，也就是我们在写的任何原型代码不需要太多的改变就能支持生产级别的各种特性（比如并行、steaming 等），具体来说会有这些优势："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"并行，只要是整个 chain 中有可以并行的步骤就会自动的并行，来减少使用时的延迟。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"自动的重试和 fallback。大部分 chain 的组成部分都有自动的重试（比如因为网络原因的失败）和回退机制，来解决很多请求的出错问题。 而不需要我们去写代码 cover 这些问题。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"对 chain 中间结果的访问，在旧的写法中很难访问中间的结果，而 LCEL 中可以方便的通过访问中间结果来进行调试和记录。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"LCEL 会自动支持 LangSimith 进行可视化和记录。这是 langchain 官方推出的记录工具，可以记录一条 chian 运行过程中的大部分信息，来方便调试 LLM 找到是哪些中间环节的导致了最终结果较差。这部分我们会在后续的章节中涉及到。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["一条 Chain 组成的每个模块都是继承自 ",(0,s.jsx)(e.code,{children:"Runnable"})," 这个接口，而一条 Chain 也是继承自这个接口，所以一条 Chain 也可以很自然的成为另一个 Chain 的一个模块。并且所有 ",(0,s.jsx)(e.code,{children:"Runnable"})," 都有相同的调用方式。 所以在我们写 Chain 的时候就可以自由组合多个 ",(0,s.jsx)(e.code,{children:"Runnable"})," 的模块来形成复杂的 Chain。"]}),"\n",(0,s.jsxs)(e.p,{children:["对于任意 ",(0,s.jsx)(e.code,{children:"Runnable"})," 对象，其都会有这几个常用的标准的调用接口："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"invoke"})," 基础的调用，并传入参数"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"batch"})," 批量调用，输入一组参数"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"stream"})," 调用，并以 stream 流的方式返回数据"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"streamLog"})," 除了像 stream 流一样返回数据，并会返回中间的运行结果"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Talk is cheap，让我们来看 code 演示，其中会涉及到很多 Langchain 中陌生的概念，大家可以简单从它的表现中理解，我们会在后续的章节中深入介绍。"}),"\n",(0,s.jsxs)(e.h3,{id:"invoke",children:["invoke",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#invoke",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["首先，我们用最基础的 ",(0,s.jsx)(e.code,{children:"ChatOpenAI"}),"，这显然是一个 ",(0,s.jsx)(e.code,{children:"Runnable"})," 对象，我们以此为例来让大家熟悉 LCEL 中 ",(0,s.jsx)(e.code,{children:"Runnable"})," 中常见的调用接口。 其中 ",(0,s.jsx)(e.code,{children:"HumanMessage"})," 你可以理解成构建一个用户输入，各种 ",(0,s.jsx)(e.code,{children:"Message"})," 的介绍我们会在后续章节中展开介绍。 注意这里 ",(0,s.jsx)(e.code,{children:"chatModel"})," 需要的输入是一个 ",(0,s.jsx)(e.code,{children:"Message"})," 的列表。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'import { ChatOpenAI } from "@langchain/openai";\nimport { HumanMessage } from "@langchain/core/messages";\n\nconst model = new ChatOpenAI();\n\nawait model.invoke([\n    new HumanMessage("Tell me a joke")\n])\n'})}),"\n",(0,s.jsxs)(e.p,{children:["这里，我们就完成了一个基础的对 ",(0,s.jsx)(e.code,{children:"Runnable"})," 接口的调用，我们会拿到其对应的输出"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'AIMessage {\n  lc_serializable: true,\n  lc_kwargs: {\n    content: "Why don\'t scientists trust atoms?\\n\\nBecause they make up everything!",\n    additional_kwargs: { function_call: undefined, tool_calls: undefined },\n    response_metadata: {}\n  },\n  lc_namespace: [ "langchain_core", "messages" ],\n  content: "Why don\'t scientists trust atoms?\\n\\nBecause they make up everything!",\n  name: undefined,\n  additional_kwargs: { function_call: undefined, tool_calls: undefined },\n  response_metadata: {\n    tokenUsage: { completionTokens: 13, promptTokens: 11, totalTokens: 24 },\n    finish_reason: "stop"\n  }\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["为了方便展示，我们会加入一个简单的 ",(0,s.jsx)(e.code,{children:"StringOutputParser"})," 来处理输出，你可以简单的理解为将 OpenAI 返回的复杂对象提取出最核心的字符串，更详细的 ",(0,s.jsx)(e.code,{children:"OutputParser"})," 相关介绍会在后续章节中展开。组成一个最基础的 Chain 来演示， ",(0,s.jsx)(e.code,{children:"Runnable"})," 中各个调用方式"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'import { ChatOpenAI } from "@langchain/openai";\nimport { HumanMessage } from "@langchain/core/messages";\nimport { StringOutputParser } from "@langchain/core/output_parsers";\n\nconst chatModel = new ChatOpenAI();\nconst outputPrase = new StringOutputParser();\n\nconst simpleChain = chatModel.pipe(outputPrase)\n\nawait simpleChain.invoke([\n    new HumanMessage("Tell me a joke")\n])\n'})}),"\n",(0,s.jsxs)(e.p,{children:["因为我们添加了 ",(0,s.jsx)(e.code,{children:"OutputParser"}),"，所以输出就是一个普通的文本，而不是 OpenAI 返回复杂的对象。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'"Why don\'t scientists trust atoms?\\n\\nBecause they make up everything."\n'})}),"\n",(0,s.jsxs)(e.p,{children:["在 LCEL 中，使用 ",(0,s.jsx)(e.code,{children:".pipe()"})," 方法来组装多个 ",(0,s.jsx)(e.code,{children:"Runnable"})," 对象形成完整的 Chain，可以看到我们是用对单个模块同样的 ",(0,s.jsx)(e.code,{children:"invoke"})," 方法去调用整个 chain。 因为无论是单个模块还是由模块组装而成的多个 chain 都是 ",(0,s.jsx)(e.code,{children:"Runnable"}),"。"]}),"\n",(0,s.jsxs)(e.h3,{id:"batch",children:["batch",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#batch",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"然后我们尝试对这个基础的 Chain 进行批量调用，用起来也非常简单"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'await simpleChain.batch([\n    [ new HumanMessage("Tell me a joke") ],\n    [ new HumanMessage("Hi, Who are you?") ],\n])\n'})}),"\n",(0,s.jsx)(e.p,{children:"其返回值也是一个列表"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'[\n  "Why don\'t scientists trust atoms?\\n\\nBecause they make up everything!",\n  "Hello! I\'m OpenAI, or more specifically an artificial intelligence programmed to help answer questio"... 89 more characters\n]\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"stream",children:["stream",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#stream",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"因为 LLM 的很多调用都是一段一段的返回的，如果等到完整地内容再返回给用户，就会让用户等待比较久，影响用户的体验。而 LCEL 开箱就支持 steaming，我们依旧使用我们定义的基础 Chain，就可以直接获得 streaming 的能力"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'const stream = await simpleChain.stream([\n     new HumanMessage("Tell me a joke")\n])\n\nfor await (const chunk of stream){\n    console.log(chunk)\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"其返回值是"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Why\n don\n't\n scientists\n trust\n atoms\n?\n\n\nBecause\n they\n make\n up\n everything\n!\n"})}),"\n",(0,s.jsx)(e.p,{children:"streamLog 的使用较少，他会在每次返回 chunk 的时候，返回完整的对象，我们不深入介绍，感兴趣的可以运行下述代码观察其每个 chunk 的返回值，并根据自己需要去使用。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'const stream = await simpleChain.streamLog([\n     new HumanMessage("Tell me a joke")\n])\n\nfor await (const chunk of stream){\n    console.log(chunk)\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"fallback",children:["fallback",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#fallback",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"withFallbacks"})," 是任何 runnable 都有的一个函数，可以给当前 runnable 对象添加 fallback 然后生成一个带 fallback 的  ",(0,s.jsx)(e.code,{children:"RunnableWithFallbacks"})," 对象，这适合我们将自己的 fallback 逻辑增加到 LCEL 中。"]}),"\n",(0,s.jsx)(e.p,{children:"例如，我们创建一个一定会失败的 llm ："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'import { ChatOpenAI } from "@langchain/openai";\n\nconst fakeLLM = new ChatOpenAI({\n    azureOpenAIApiKey: "123",\n    maxRetries: 0,\n});\n\nawait fakeLLM.invoke("你好")\n'})}),"\n",(0,s.jsxs)(e.p,{children:["因为大多 runnable 都自带出错重试的机制，所以我们在这将重试的次数 ",(0,s.jsx)(e.code,{children:"maxRetries"})," 设置为 0。"]}),"\n",(0,s.jsx)(e.p,{children:"然后，我们创建一个可以成功的 llm，并设置为 fallback："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'const realLLM = new ChatOpenAI()\nconst llmWithFallback = fakeLLM.withFallbacks({\n    fallbacks: [realLLM]\n})\n\nawait llmWithFallback.invoke("你好")\n'})}),"\n",(0,s.jsx)(e.p,{children:"就会输出正确的结果。"}),"\n",(0,s.jsx)(e.p,{children:"因为无论是 llm model 或者其他的模块，还是整个 chain 都是 runnable 对象，所以我们可以给整个 LCEL 流程中的任意环节去增加 fallback，来避免一个环节出问题卡住剩下环境的运行。"}),"\n",(0,s.jsx)(e.p,{children:"当然，我们也可以给整个 chain 增加 fallback，例如一个复杂但输出高质量的结果的 chain 可以设置一个非常简单的 chain 作为 fallback，可以在极端环境下保证至少有输出。"}),"\n",(0,s.jsxs)(e.h2,{id:"小结",children:["小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["That's All!",(0,s.jsx)(e.br,{}),"\n","这就是 langchain.js 基础，如果你在 LCEL 之前学习过 langchain，你会发现 LCEL 极大的降低了 langchain 的使用难度，并且为使用 chain 提供了开箱即用的生产级能力支持。其最大的魅力就是进一步强化了模块化，可以方便的复用各种 chain 来组合成更复杂的 chain。"]}),"\n",(0,s.jsx)(e.p,{children:"所以我认为，在当前时间点可以抛弃之前的旧写法，全面拥抱 LCEL。 在掌握了基础用法后，我们就可以探索更多 langchain 的应用了。至于更多 LCEL 的高级用法，我们会随着实战逐步引入和讲解。"})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}let h=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%20AI%EF%BC%9ALangChain.js%20%E5%85%A5%E9%97%A8%E5%92%8C%E5%AE%9E%E6%88%98_online%2F4-%20Langchain.js%20%E7%9A%84%E4%BB%8B%E7%BB%8D%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.md"]={toc:[{text:"基础配置",id:"基础配置",depth:2},{text:"什么是 LCEL",id:"什么是-lcel",depth:2},{text:"invoke",id:"invoke",depth:3},{text:"batch",id:"batch",depth:3},{text:"stream",id:"stream",depth:3},{text:"fallback",id:"fallback",depth:3},{text:"小结",id:"小结",depth:2}],title:"4- Langchain.js 的介绍、安装和快速入门",headingTitle:"4- Langchain.js 的介绍、安装和快速入门",frontmatter:{}}}}]);