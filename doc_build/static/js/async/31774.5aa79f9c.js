"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["31774"],{863090:function(n,e,t){t.r(e),t.d(e,{default:()=>u});var o=t(552676),s=t(740453);let d=t.p+"static/image/47d0e9a671d208332156af1b93bbd38a.09586f50.webp",i=t.p+"static/image/ec7bc7b81fde5dec480b8740dee71ee7.f4ae8b69.webp",r=t.p+"static/image/3b49ccc0f30331f9e875c848c30ee78a.2c0ae917.webp",a=t.p+"static/image/209b99ecf0060421f55935892d8192c9.2b509574.webp",l=t.p+"static/image/f9931b01f4b4375aff6a556a2dbd9769.07d123ab.webp",c=t.p+"static/image/e657c00bb240829e2a7b14add88907c4.932a93e9.webp",p=t.p+"static/image/8dbffd76f93bc20fe779bd2d73041627.0e666559.webp";function h(n){let e=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",img:"img",pre:"pre",code:"code",strong:"strong"},(0,s.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"25-练手篇--todolist-实战",children:["25-练手篇 ❘ TodoList 实战",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#25-练手篇--todolist-实战",children:"#"})]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"推荐学习指数：⭐️️⭐️️⭐️️"}),"\n"]}),"\n",(0,o.jsxs)(e.h2,{id:"1-前言",children:["1. 前言",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"在正式开始实战篇之前，我们先使用 Svelte 5 和 SvelteKit 实现一个全栈 TodoList，用于熟悉 Svelte 的基本语法和掌握前后端交互方式。TodoList 的效果并不复杂："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:p,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"虽然效果看起来并不复杂，但麻雀虽小，五脏俱全。大多数的应用本质上就是“增删改查”，所以这样一个 TodoList 是最好的学习方式。"}),"\n",(0,o.jsx)(e.p,{children:"此外，为了让交互效果更加流畅，TodoList 实现了乐观更新："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:c,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"所谓乐观更新，说白了就是乐观的假设操作会成功，先更新 UI，同时发送数据请求。如果数据请求成功，相安无事，用户感受到流畅的操作，提升了用户体验，数据也得到更新。如果更新失败，则视情况对错误进行处理。"}),"\n",(0,o.jsx)(e.p,{children:"以我们实现的 TodoList 为例，如果请求成功，应用操作就会如第一张动图中那样流畅，如果请求失败，则会像第二张动图中那样给与用户错误提示并回退数据。"}),"\n",(0,o.jsx)(e.p,{children:"那就让我们开始吧。"}),"\n",(0,o.jsxs)(e.h2,{id:"2-项目初始化",children:["2. 项目初始化",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-项目初始化",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"运行："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npx sv create svelte-todolist\n"})}),"\n",(0,o.jsxs)(e.p,{children:["选择 ",(0,o.jsx)(e.strong,{children:"SvelteKit minimal、TypeScript、prettier、eslint、tailwindcss"}),"："]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,o.jsx)(e.p,{children:"按照命令行中的提示提交代码："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'cd svelte-todolist\n\ngit init && git add -A && git commit -m "Initial commit" (optional)  \n\nnpm run dev -- --open   \n'})}),"\n",(0,o.jsx)(e.p,{children:"浏览器效果如下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,o.jsxs)(e.h2,{id:"3-纯前端实现",children:["3. 纯前端实现",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-纯前端实现",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"我们先纯前端实现一遍。因为代码并不复杂，加起来也才一两百行代码，所以我们直接给出最终的代码。"}),"\n",(0,o.jsxs)(e.p,{children:["新建 ",(0,o.jsx)(e.code,{children:"src/routes/todo/remove.svg"}),"，代码如下："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">\n    <path fill="#888" stroke="none" d="M22 4.2h-5.6L15 1.6c-.1-.2-.4-.4-.7-.4H9.6c-.2 0-.5.2-.6.4L7.6 4.2H2c-.4 0-.8.4-.8.8s.4.8.8.8h1.8V22c0 .4.3.8.8.8h15c.4 0 .8-.3.8-.8V5.8H22c.4 0 .8-.3.8-.8s-.4-.8-.8-.8zM10.8 16.5c0 .4-.3.8-.8.8s-.8-.3-.8-.8V10c0-.4.3-.8.8-.8s.8.3.8.8v6.5zm4 0c0 .4-.3.8-.8.8s-.8-.3-.8-.8V10c0-.4.3-.8.8-.8s.8.3.8.8v6.5z" />\n</svg>\n'})}),"\n",(0,o.jsx)(e.p,{children:"这是我们的删除按钮 SVG 图片。"}),"\n",(0,o.jsxs)(e.p,{children:["新建 ",(0,o.jsx)(e.code,{children:"src/routes/todo/+layout.svelte"}),"，代码如下："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:'<script lang="ts">\n  import type { Snippet } from \'svelte\';\n  const {\n  children\n  }: {\n  children: Snippet;\n  } = $props();\n<\/script>\n\n<div class="m-10">\n  <h1 class="mb-4 block text-2xl font-bold">今日清单</h1>\n  {@render children()}\n</div>\n'})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"注：这段代码其实并不是必要的，全部放在 +page.svelte 也可以，只是帮助大家再熟悉一下插槽的用法"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["新建 ",(0,o.jsx)(e.code,{children:"src/routes/todo/+page.svelte"}),"，代码如下："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:"<script lang=\"ts\">\n  import { fly } from 'svelte/transition';\n  import DeleteBtn from './remove.svg';\n\n  type Todo = {\n    id: string;\n    text: string;\n    done: boolean;\n  };\n\n  type Filters = 'all' | 'todo' | 'done';\n\n  let todos = $state<Todo[]>([\n    { id: 'gewrii', text: '阅读', done: false },\n    { id: '4m9ha4', text: '写作', done: false },\n    { id: 'b9u33z', text: '冥想', done: false }\n  ]);\n\n  let filter = $state<Filters>('all');\n\n  let filteredTodos = $derived(filterTodos());\n\n  function filterTodos() {\n    switch (filter) {\n      case 'all':\n        return todos;\n      case 'todo':\n        return todos.filter((t) => !t.done);\n      case 'done':\n        return todos.filter((t) => t.done);\n      default:\n        return todos;\n    }\n  }\n\n  function onAddTodo(event: KeyboardEvent) {\n    if (event.key !== 'Enter') return;\n\n    const todoElement = event.target as HTMLInputElement;\n\n    todos.push({\n      id: Math.random().toString(36).slice(-6),\n      text: todoElement.value,\n      done: false\n    });\n\n    todoElement.value = '';\n  }\n\n  function onRemoveTodo(event: Event) {\n    const buttonEl = event.target as HTMLInputElement;\n    const id = buttonEl.dataset.id;\n    const index = todos.findIndex((t) => t.id === id);\n    todos.splice(index, 1);\n  }\n\n  function setFilter(newFilter: Filters) {\n    filter = newFilter;\n  }\n\n  function remaining(todos: Todo[]) {\n    console.log('recalculating');\n    return todos.filter((t) => !t.done).length;\n  }\n<\/script>\n\n<input\n  placeholder=\"添加待办事项\"\n  class=\"mb-4 block w-full rounded-md border-0 p-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600\"\n  onkeydown={onAddTodo}\n/>\n\n<div class=\"mb-4 flex items-center gap-4\">\n  {#each [['all', '全部'], ['todo', '待办'], ['done', '已完成']] as [filter, filterName]}\n    <button\n      class=\"flex w-full justify-center rounded-md bg-indigo-500 px-3 py-1.5 text-sm font-semibold leading-6 text-white\"\n      onclick={() => {\n        setFilter(filter as Filters);\n      }}>{filterName}</button\n    >\n  {/each}\n</div>\n\n<ul class=\"mb-4 flex flex-col gap-4\">\n  {#each filteredTodos as todo, index (todo.id)}\n    <li class=\"flex items-center gap-4\" class:opacity-40={todo.done} in:fly={{ y: -20 }}>\n      <input type=\"checkbox\" bind:checked={todo.done} />\n      <input\n        type=\"text\"\n        class=\"block flex-1 rounded-md border-0 p-1.5 text-gray-900 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600\"\n        bind:value={todo.text}\n      />\n      <button onclick={onRemoveTodo} aria-label=\"Remove\">\n        <img src={DeleteBtn} class=\"w-4\" alt=\"删除按钮\" data-id={todo.id} />\n      </button>\n    </li>\n  {/each}\n</ul>\n\n<p>剩余待办事项：{remaining(todos)}</p>\n"})}),"\n",(0,o.jsxs)(e.p,{children:["在这段代码中，因为并没有提交按钮，所以我们监听了输入框的 ",(0,o.jsx)(e.code,{children:"onkeydown"})," 事件，在回车的时候获取输入框中的值并创建 Todo。Todo 创建后，checkbox 和 Todo 修改输入框我们都采用了 bind 进行双向绑定，可以快捷的修改值。点击筛选器按钮，我们通过 ",(0,o.jsx)(e.code,{children:"filteredTodos"}),"派生状态获取筛选后的值。点击删除按钮，我们从 todo 数组中删除对应 id 的值。"]}),"\n",(0,o.jsx)(e.p,{children:"在这个例子中，我们演示了两种获取对应点击元素数据的的方法，一种是类似于筛选器按钮，通过函数参数传递："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:"{#each [['all', '全部'], ['todo', '待办'], ['done', '已完成']] as [filter, filterName]}\n  <button\n    class=\"flex w-full justify-center rounded-md bg-indigo-500 px-3 py-1.5 text-sm font-semibold leading-6 text-white\"\n    onclick={() => {\n      setFilter(filter as Filters);\n    }}>{filterName}</button\n  >\n{/each}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["一种是类似于删除按钮，将数据放到 ",(0,o.jsx)(e.code,{children:"data-xxx"}),"属性，然后通过 ",(0,o.jsx)(e.code,{children:"event.target.dataset.xxx"}),"获取："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:'{#each filteredTodos as todo, index (todo.id)}\n  <li class="flex items-center gap-4" class:opacity-40={todo.done} in:fly={{ y: -20 }}>\n    <button onclick={onRemoveTodo} aria-label="Remove">\n      <img src={DeleteBtn} class="w-4" alt="删除按钮" data-id={todo.id} />\n    </button>\n  </li>\n{/each}\n'})}),"\n",(0,o.jsx)(e.p,{children:"浏览器效果如下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:r,alt:""})}),"\n",(0,o.jsxs)(e.h2,{id:"4-全栈实现",children:["4. 全栈实现",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4-全栈实现",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"因为是纯前端实现，所以页面刷新后数据就会丢失，现在我们将这个 TodoList 改为全栈实现："}),"\n",(0,o.jsxs)(e.p,{children:["新建 ",(0,o.jsx)(e.code,{children:"src/lib/index.ts"}),"，代码如下："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"export type Todo = {\n  id: string;\n  text: string;\n  done: boolean;\n};\n\nexport type Filters = 'all' | 'todo' | 'done';\n"})}),"\n",(0,o.jsxs)(e.p,{children:["因为客户端与服务端都会用到这些类型，所以我们放到 ",(0,o.jsx)(e.code,{children:"lib"})," 目录下方便引用。"]}),"\n",(0,o.jsxs)(e.p,{children:["新建 ",(0,o.jsx)(e.code,{children:"src/lib/utils.ts"}),"，代码如下："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"export const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"sleep"})," 函数用于模拟请求延时。"]}),"\n",(0,o.jsxs)(e.p,{children:["新建 ",(0,o.jsx)(e.code,{children:"src/routes/todo/+page.server.ts"}),"，代码如下："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'import { fail } from "@sveltejs/kit";\nimport { sleep } from "$lib/utils";\nimport type { Todo } from "$lib";\n\nconst todos: Todo[] = [];\n\nexport function load() {\n  return {\n    todos,\n  };\n}\n\nexport const actions = {\n  createTodo: async ({ request }) => {\n    await sleep(1000);\n\n    const data = await request.formData();\n    const text = data.get("text") as string;\n\n    try {\n      const newTodo = {\n        id: crypto.randomUUID(),\n        text,\n        done: false,\n      };\n\n      todos.push(newTodo);\n      return { todos };\n    } catch (error: any) {\n      return fail(422, { error: error.message });\n    }\n  },\n  deleteTodo: async ({ request }) => {\n    await sleep(1000);\n\n    const data = await request.formData();\n    const id = data.get("id") as string;\n\n    try {\n      const index = todos.findIndex((todo) => todo.id === id);\n      if (index !== -1) todos.splice(index, 1);\n    } catch (error: any) {\n      return fail(422, { error: error.message });\n    }\n  },\n  toggleTodo: async ({ request }) => {\n    await sleep(1000);\n\n    const data = await request.formData();\n    const id = data.get("id") as string;\n\n    try {\n      const todo = todos.find((todo) => todo.id === id);\n      if (todo) {\n        todo.done = !todo.done;\n      }\n    } catch (error: any) {\n      return fail(422, { error: error.message });\n    }\n  },\n  editTodo: async ({ request }) => {\n    await sleep(1000);\n\n    const data = await request.formData();\n    const id = data.get("id") as string;\n\n    try {\n      const todo = todos.find((todo) => todo.id === id);\n      if (todo) {\n        todo.text = data.get("text") as string;\n      }\n    } catch (error: any) {\n      return fail(422, { error: error.message });\n    }\n  },\n};\n'})}),"\n",(0,o.jsx)(e.p,{children:"这里我们创建了 4 个用于前后端交互的 Form Actions。"}),"\n",(0,o.jsxs)(e.p,{children:["修改 ",(0,o.jsx)(e.code,{children:"src/routes/todo/+page.svelte"}),"，完整代码如下："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'<script lang="ts">\n  import type { Todo, Filters } from \'$lib\';\n  import { fly, slide } from \'svelte/transition\';\n  import { enhance, applyAction, deserialize } from \'$app/forms\';\n  import type { ActionResult } from \'@sveltejs/kit\';\n  import { invalidateAll } from \'$app/navigation\';\n  import DeleteBtn from \'./remove.svg\';\n\n  let { data, form } = $props();\n  const { todos: todoList = [] } = data;\n\n  let loading = $state(false);\n  let todos = $state<Todo[]>(todoList);\n  let filter = $state<Filters>(\'all\');\n\n  let filteredTodos = $derived(filterTodos());\n\n  function filterTodos() {\n    switch (filter) {\n      case \'all\':\n        return todos;\n      case \'todo\':\n        return todos.filter((t) => !t.done);\n      case \'done\':\n        return todos.filter((t) => t.done);\n      default:\n        return todos;\n    }\n  }\n\n  $effect(() => {\n    todos = data.todos;\n  });\n\n  const onToggleTodo = (todo: any) => async (event: Event) => {\n    event.preventDefault();\n    const checkboxEl = event.target as HTMLInputElement;\n\n    const formData = new FormData();\n    formData.append(\'id\', todo.id);\n    formData.append(\'done\', checkboxEl.checked.toString());\n    const response = await fetch(\'?/toggleTodo\', {\n      method: \'POST\',\n      body: formData\n    });\n\n    const result: ActionResult = deserialize(await response.text());\n\n    if (result.type === \'success\') {\n      await invalidateAll();\n    }\n\n    applyAction(result);\n  };\n\n  const onEditTodo = (todo: any) => async (event: Event) => {\n    event.preventDefault();\n    const inputEl = event.target as HTMLInputElement;\n    const formData = new FormData();\n    formData.append(\'id\', todo.id);\n    formData.append(\'text\', inputEl.value);\n    const response = await fetch(\'?/editTodo\', {\n      method: \'POST\',\n      body: formData\n    });\n\n    const result: ActionResult = deserialize(await response.text());\n\n    if (result.type === \'success\') {\n      await invalidateAll();\n    }\n\n    applyAction(result);\n  };\n\n  function remaining(todos: Todo[]) {\n    return todos.filter((t) => !t.done).length;\n  }\n\n  function setFilter(newFilter: Filters) {\n    filter = newFilter;\n  }\n<\/script>\n\n<form\n  action="?/createTodo"\n  method="POST"\n  use:enhance={() => {\n    loading = true;\n    return async ({ update }) => {\n      loading = false;\n      update();\n    };\n  }}\n>\n  <input\n    placeholder="添加待办事项"\n    class="mb-4 block w-full rounded-md border-0 p-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n    name="text"\n    disabled={loading}\n  />\n  <button type="submit" class="hidden">提交</button>\n</form>\n\n{#if form?.error}\n  <p in:fly={{ y: 20 }} class="mb-4 rounded-md bg-red-400 px-4 py-2 text-white">\n    {form.error}\n  </p>\n{/if}\n\n<div class="mb-4 flex items-center gap-4">\n  {#each [[\'all\', \'全部\'], [\'todo\', \'待办\'], [\'done\', \'已完成\']] as [filter, filterName]}\n    <button\n      class="flex w-full justify-center rounded-md bg-indigo-500 px-3 py-1.5 text-sm font-semibold leading-6 text-white"\n      onclick={() => {\n        setFilter(filter as Filters);\n      }}>{filterName}</button\n    >\n  {/each}\n</div>\n\n<ul class="mb-4 flex flex-col gap-4">\n  {#each filteredTodos as todo (todo.id)}\n    <li class:opacity-40={todo.done} class="flex items-center gap-4">\n      <form action="?/toggleTodo" method="POST" use:enhance>\n        <input type="hidden" name="id" value={todo.id} />\n        <input type="checkbox" checked={todo.done} onclick={onToggleTodo(todo)} />\n      </form>\n\n      <input\n        type="text"\n        class="block flex-1 rounded-md border-0 p-1.5 text-gray-900 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n        value={todo.text}\n        onchange={onEditTodo(todo)}\n      />\n\n      <form action="?/deleteTodo" method="POST" use:enhance>\n        <input type="hidden" name="id" value={todo.id} />\n        <button aria-label="Remove" type="submit">\n          <img src={DeleteBtn} class="w-4" alt="删除按钮" />\n        </button>\n      </form>\n    </li>\n  {/each}\n  {#if loading}\n    <span class="loading">Loading...</span>\n  {/if}\n</ul>\n\n<p>剩余待办事项：{remaining(todos)}</p>\n'})}),"\n",(0,o.jsxs)(e.p,{children:["在这段代码中，我们演示了两种与 Form Actions 交互的方式，一种是传统的使用 ",(0,o.jsx)(e.code,{children:"<form>"}),"标签："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'<form\n  action="?/createTodo"\n  method="POST"\n  use:enhance={() => {\n    loading = true;\n    return async ({ update }) => {\n      loading = false;\n      update();\n    };\n  }}\n>\n  <input\n    placeholder="添加待办事项"\n    class="mb-4 block w-full rounded-md border-0 p-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n    name="text"\n    disabled={loading}\n  />\n  <button type="submit" class="hidden">\n    提交\n  </button>\n</form>\n'})}),"\n",(0,o.jsxs)(e.p,{children:["一种则是通过 ",(0,o.jsx)(e.code,{children:"fetch"})," 的方式："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:"<script lang=\"ts\">\nconst onToggleTodo = (todo: any) => async (event: Event) => {\n    event.preventDefault();\n    const checkboxEl = event.target as HTMLInputElement;\n\n    const formData = new FormData();\n    formData.append('id', todo.id);\n    formData.append('done', checkboxEl.checked.toString());\n    const response = await fetch('?/toggleTodo', {\n      method: 'POST',\n      body: formData\n    });\n\n    const result: ActionResult = deserialize(await response.text());\n\n    if (result.type === 'success') {\n      await invalidateAll();\n    }\n\n    applyAction(result);\n  };\n\n<\/script>\n\n{#each filteredTodos as todo (todo.id)}\n  <li class:opacity-40={todo.done} class=\"flex items-center gap-4\">\n    <input type=\"checkbox\" checked={todo.done} onclick={onToggleTodo(todo)} />\n  </li>\n{/each}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["如果能使用第一种 ",(0,o.jsx)(e.code,{children:"<form>"}),"标签的形式，还是尽可能使用第一种，因为它支持渐进式增强，即便禁用 JavaScript 也可以使用。第二种方式虽然可以用，但其实跟调用 API 没太大区别，主要的区别在于利用了 ",(0,o.jsx)(e.code,{children:"+page.server.js"}),"的 ",(0,o.jsx)(e.code,{children:"actions"}),"，省了在 ",(0,o.jsx)(e.code,{children:"+server.js"}),"声明 API 接口的功夫。"]}),"\n",(0,o.jsxs)(e.p,{children:["除了这两种与后端交互的形式，还有就是传统的 fetch API 的形式，后端通过 ",(0,o.jsx)(e.code,{children:"+server.js"}),"声明接口，然后前端调用接口。"]}),"\n",(0,o.jsx)(e.p,{children:"浏览器效果如下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:i,alt:""})}),"\n",(0,o.jsxs)(e.p,{children:["此时交互效果基本与之前一致，但因为我们在接口中使用了 ",(0,o.jsx)(e.code,{children:"sleep(1000)"}),"模拟接口延迟，当我们删除或者切换任务状态的时候，因为有 1s 左右的延迟，所以交互显得有些“卡”。"]}),"\n",(0,o.jsxs)(e.h2,{id:"5-乐观更新",children:["5. 乐观更新",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5-乐观更新",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"如果我想要实现乐观更新该如何实现呢？其实并不复杂，我们为 Todo 的切换状态、编辑、删除添加上乐观更新效果："}),"\n",(0,o.jsxs)(e.p,{children:["修改 ",(0,o.jsx)(e.code,{children:"src/routes/todo/+page.server.ts"}),"，完整代码如下："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'import { fail } from "@sveltejs/kit";\nimport { sleep } from "$lib/utils";\nimport type { Todo } from "$lib";\n\nconst todos: Todo[] = [];\n\nexport function load() {\n  return {\n    todos,\n  };\n}\n\nexport const actions = {\n  createTodo: async ({ request }) => {\n    await sleep(1000);\n\n    const data = await request.formData();\n    const text = data.get("text") as string;\n\n    try {\n      const newTodo = {\n        id: crypto.randomUUID(),\n        text,\n        done: false,\n      };\n\n      todos.push(newTodo);\n      return { todos };\n    } catch (error: any) {\n      return fail(422, { error: error.message });\n    }\n  },\n  deleteTodo: async ({ request }) => {\n    await sleep(1000);\n\n    const data = await request.formData();\n    const id = data.get("id") as string;\n\n    try {\n      throw new Error("删除事项失败");\n      const index = todos.findIndex((todo) => todo.id === id);\n      if (index !== -1) todos.splice(index, 1);\n    } catch (error: any) {\n      return fail(422, { error: error.message });\n    }\n  },\n  toggleTodo: async ({ request }) => {\n    await sleep(1000);\n\n    const data = await request.formData();\n    const id = data.get("id") as string;\n\n    try {\n      throw new Error("修改事项失败");\n      const todo = todos.find((todo) => todo.id === id);\n      if (todo) {\n        todo.done = !todo.done;\n      }\n    } catch (error: any) {\n      return fail(422, { error: error.message });\n    }\n  },\n  editTodo: async ({ request }) => {\n    await sleep(1000);\n\n    const data = await request.formData();\n    const id = data.get("id") as string;\n\n    try {\n      throw new Error("修改事项失败");\n      const todo = todos.find((todo) => todo.id === id);\n      if (todo) {\n        todo.text = data.get("text") as string;\n      }\n    } catch (error: any) {\n      return fail(422, { error: error.message });\n    }\n  },\n};\n'})}),"\n",(0,o.jsxs)(e.p,{children:["主要是添加了三行 ",(0,o.jsx)(e.code,{children:"throw new Error"})," 模拟出错时的情况。"]}),"\n",(0,o.jsxs)(e.p,{children:["修改 ",(0,o.jsx)(e.code,{children:"src/routes/todo/+page.svelte"}),"，完整代码如下："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"<script lang=\"ts\">\n  import type { Todo, Filters } from '$lib';\n  import { fly, slide } from 'svelte/transition';\n  import { enhance, applyAction, deserialize } from '$app/forms';\n  import type { ActionResult } from '@sveltejs/kit';\n  import { invalidateAll } from '$app/navigation';\n  import DeleteBtn from './remove.svg';\n\n  let { data, form } = $props();\n\n  const { todos: todoList = [] } = data;\n\n  let loading = $state(false);\n  let deleting: string[] = $state([]);\n\n  let todos = $state<Todo[]>(todoList);\n  let filter = $state<Filters>('all');\n\n  let filteredTodos = $derived(filterTodos());\n\n  function filterTodos() {\n    switch (filter) {\n      case 'all':\n        return todos;\n      case 'todo':\n        return todos.filter((t) => !t.done);\n      case 'done':\n        return todos.filter((t) => t.done);\n      default:\n        return todos;\n    }\n  }\n\n  $effect(() => {\n    todos = data.todos;\n  });\n\n  const onToggleTodo = (todo: any) => async (event: Event) => {\n    event.preventDefault();\n    const checkboxEl = event.target as HTMLInputElement;\n\n    const formData = new FormData();\n    formData.append('id', todo.id);\n    formData.append('done', checkboxEl.checked.toString());\n    const response = await fetch('?/toggleTodo', {\n      method: 'POST',\n      body: formData\n    });\n\n    const result: ActionResult = deserialize(await response.text());\n\n    if (result.type === 'success' || result.type === 'failure') {\n      await invalidateAll();\n    }\n\n    applyAction(result);\n  };\n\n  const onEditTodo = (todo: any) => async (event: Event) => {\n    event.preventDefault();\n    const inputEl = event.target as HTMLInputElement;\n    const formData = new FormData();\n    formData.append('id', todo.id);\n    formData.append('text', inputEl.value);\n    const response = await fetch('?/editTodo', {\n      method: 'POST',\n      body: formData\n    });\n\n    const result: ActionResult = deserialize(await response.text());\n\n    if (result.type === 'success' || result.type === 'failure') {\n      await invalidateAll();\n    }\n\n    applyAction(result);\n  };\n\n  function remaining(todos: Todo[]) {\n    return todos.filter((t) => !t.done).length;\n  }\n\n  function setFilter(newFilter: Filters) {\n    filter = newFilter;\n  }\n<\/script>\n\n<form\n  action=\"?/createTodo\"\n  method=\"POST\"\n  use:enhance={() => {\n    loading = true;\n    return async ({ update }) => {\n      loading = false;\n      update();\n    };\n  }}\n>\n  <input\n    placeholder=\"添加待办事项\"\n    class=\"mb-4 block w-full rounded-md border-0 p-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600\"\n    name=\"text\"\n    disabled={loading}\n  />\n  <button type=\"submit\" class=\"hidden\">提交</button>\n</form>\n\n{#if form?.error}\n  <p in:fly={{ y: 20 }} class=\"mb-4 rounded-md bg-red-400 px-4 py-2 text-white\">\n    {form.error}\n  </p>\n{/if}\n\n<div class=\"mb-4 flex items-center gap-4\">\n  {#each [['all', '全部'], ['todo', '待办'], ['done', '已完成']] as [filter, filterName]}\n    <button\n      class=\"flex w-full justify-center rounded-md bg-indigo-500 px-3 py-1.5 text-sm font-semibold leading-6 text-white\"\n      onclick={() => {\n        setFilter(filter as Filters);\n      }}>{filterName}</button\n    >\n  {/each}\n</div>\n\n<ul class=\"mb-4 flex flex-col gap-4\">\n  {#each filteredTodos.filter((todo) => !deleting.includes(todo.id)) as todo (todo.id)}\n    <li class:opacity-40={todo.done} class=\"flex items-center gap-4\">\n      <input type=\"checkbox\" bind:checked={todo.done} onchange={onToggleTodo(todo)} />\n\n      <input\n        type=\"text\"\n        class=\"block flex-1 rounded-md border-0 p-1.5 text-gray-900 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600\"\n        bind:value={todo.text}\n        onchange={onEditTodo(todo)}\n      />\n\n      <form\n        action=\"?/deleteTodo\"\n        method=\"POST\"\n        use:enhance={() => {\n          deleting = [...deleting, todo.id];\n          return async ({ update }) => {\n            await update();\n            deleting = deleting.filter((id) => id !== todo.id);\n          };\n        }}\n      >\n        <input type=\"hidden\" name=\"id\" value={todo.id} />\n        <button aria-label=\"Remove\" type=\"submit\">\n          <img src={DeleteBtn} class=\"w-4\" alt=\"删除按钮\" />\n        </button>\n      </form>\n    </li>\n  {/each}\n  {#if loading}\n    <span class=\"loading\">Loading...</span>\n  {/if}\n</ul>\n\n<p>剩余待办事项：{remaining(todos)}</p>\n"})}),"\n",(0,o.jsxs)(e.p,{children:["我们是如何实现乐观更新的呢？首先是删除按钮，我们添加了一个 ",(0,o.jsx)(e.code,{children:"deleting"}),"状态，点击删除按钮后，会立刻进入 ",(0,o.jsx)(e.code,{children:"deleting"}),"状态，在遍历的时候，处于 ",(0,o.jsx)(e.code,{children:"deleting"}),"状态的 Todo 不会被渲染，于是实现了立刻删除效果。在接口结果返回后，",(0,o.jsx)(e.code,{children:"deleting"}),"状态去除，如果接口出错，删除的 Todo 恢复。如果接口成功，数据重新加载，UI 界面保持一致。"]}),"\n",(0,o.jsxs)(e.p,{children:["然后是 ",(0,o.jsx)(e.code,{children:'<input type="checkbox">'})," 和 ",(0,o.jsx)(e.code,{children:'<input type="text">'}),"，我们改为监听 ",(0,o.jsx)(e.code,{children:"onchange"}),"事件，当用户操作时，内容会先修改，然后再触发 ",(0,o.jsx)(e.code,{children:"onchange"}),"事件，也就是会提交修改后的值。如果接口失败，我们也调用 ",(0,o.jsx)(e.code,{children:"invalidateAll()"}),"，这会导致数据重新加载，因为使用了双向绑定，所以数据会恢复之前的值。"]}),"\n",(0,o.jsx)(e.p,{children:"浏览器效果如下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:d,alt:""})}),"\n",(0,o.jsxs)(e.h2,{id:"6-总结",children:["6. 总结",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#6-总结",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"本篇我们使用 Svelte5 和 SvelteKit 实现了一个全栈的 TodoList，麻雀虽小，五脏俱全，应用包含了数据的增删改查，一些大型的应用也不过是增删改查的堆叠，所以这个应用的实现对于上手 Svelte 和 SvelteKit 有很多帮助。但在实际开发中，我们并不会只使用 Svelte，还会搭配一些技术选型实现快速开发。实战篇开始我们会介绍 Svelte 项目主流搭配的一些技术选型，那就让我们继续学习吧！"})]})}function f(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(h,{...n})}):h(n)}let u=f;f.__RSPRESS_PAGE_META={},f.__RSPRESS_PAGE_META["Svelte%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F25-%E7%BB%83%E6%89%8B%E7%AF%87%20%E2%9D%98%20TodoList%20%E5%AE%9E%E6%88%98.md"]={toc:[{text:"1. 前言",id:"1-前言",depth:2},{text:"2. 项目初始化",id:"2-项目初始化",depth:2},{text:"3. 纯前端实现",id:"3-纯前端实现",depth:2},{text:"4. 全栈实现",id:"4-全栈实现",depth:2},{text:"5. 乐观更新",id:"5-乐观更新",depth:2},{text:"6. 总结",id:"6-总结",depth:2}],title:"25-练手篇 ❘ TodoList 实战",headingTitle:"25-练手篇 ❘ TodoList 实战",frontmatter:{}}}}]);