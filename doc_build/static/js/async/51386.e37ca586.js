"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["51386"],{846331:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var s=r(552676),d=r(740453);function h(e){let n=Object.assign({h1:"h1",a:"a",pre:"pre",code:"code",p:"p",strong:"strong",h2:"h2",h3:"h3",ul:"ul",li:"li",ol:"ol"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"17性能优化琐碎事",children:["17.性能优化琐碎事",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#17性能优化琐碎事",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-!",children:"注意：该知识点属于性能优化领域。\n"})}),"\n",(0,s.jsxs)(n.p,{children:["总的来说性能优化这个领域的很多内容都很",(0,s.jsx)(n.strong,{children:"碎片化"}),"，这一章节我们将来学习这些碎片化的内容。"]}),"\n",(0,s.jsxs)(n.h2,{id:"图片优化",children:["图片优化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#图片优化",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"计算图片大小",children:["计算图片大小",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#计算图片大小",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["对于一张 100 * 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 ",(0,s.jsx)(n.strong,{children:"RGBA"})," 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节（8 位 = 1个字节），所以该图片大小大概为 39KB（10000 * 1 * 4 / 1024）。"]}),"\n",(0,s.jsx)(n.p,{children:"但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。"}),"\n",(0,s.jsx)(n.p,{children:"了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个思路了："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"减少像素点"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"减少每个像素点能够显示的颜色"})}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"图片加载优化",children:["图片加载优化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#图片加载优化",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。"}),"\n",(0,s.jsx)(n.li,{children:"对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。"}),"\n",(0,s.jsx)(n.li,{children:"小图使用 base64 格式"}),"\n",(0,s.jsx)(n.li,{children:"将多个图标文件整合到一张图片中（雪碧图）"}),"\n",(0,s.jsxs)(n.li,{children:["选择正确的图片格式：","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"照片使用 JPEG"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"dns-预解析",children:["DNS 预解析",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dns-预解析",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"DNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<link rel="dns-prefetch" href="//yuchengkai.cn">\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"节流",children:["节流",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#节流",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"考虑一个场景，滚动事件中会发起网络请求，但是我们并不希望用户在滚动过程中一直发起请求，而是隔一段时间发起一次，对于这种情况我们就可以使用节流。"}),"\n",(0,s.jsx)(n.p,{children:"理解了节流的用途，我们就来实现下这个函数"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// func是用户传入需要防抖的函数\n// wait是等待时间\nconst throttle = (func, wait = 50) => {\n  // 上一次执行该函数的时间\n  let lastTime = 0\n  return function(...args) {\n    // 当前时间\n    let now = +new Date()\n    // 将当前时间和上一次执行函数时间对比\n    // 如果差值大于设置的等待时间就执行函数\n    if (now - lastTime > wait) {\n      lastTime = now\n      func.apply(this, args)\n    }\n  }\n}\n\nsetInterval(\n  throttle(() => {\n    console.log(1)\n  }, 500),\n  1\n)\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"防抖",children:["防抖",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#防抖",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"考虑一个场景，有一个按钮点击会触发网络请求，但是我们并不希望每次点击都发起网络请求，而是当用户点击按钮一段时间后没有再次点击的情况才去发起网络请求，对于这种情况我们就可以使用防抖。"}),"\n",(0,s.jsx)(n.p,{children:"理解了防抖的用途，我们就来实现下这个函数"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// func是用户传入需要防抖的函数\n// wait是等待时间\nconst debounce = (func, wait = 50) => {\n  // 缓存一个定时器id\n  let timer = 0\n  // 这里返回的函数是每次用户实际调用的防抖函数\n  // 如果已经设定过定时器了就清空上一次的定时器\n  // 开始一个新的定时器，延迟执行用户传入的方法\n  return function(...args) {\n    if (timer) clearTimeout(timer)\n    timer = setTimeout(() => {\n      func.apply(this, args)\n    }, wait)\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"预加载",children:["预加载",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#预加载",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在开发中，可能会遇到这样的情况。有些资源不需要马上用到，但是希望尽早获取，这时候就可以使用预加载。"}),"\n",(0,s.jsxs)(n.p,{children:["预加载其实是声明式的 ",(0,s.jsx)(n.code,{children:"fetch"})," ，强制浏览器请求资源，并且不会阻塞 ",(0,s.jsx)(n.code,{children:"onload"})," 事件，可以使用以下代码开启预加载"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<link rel="preload" href="http://example.com">\n'})}),"\n",(0,s.jsx)(n.p,{children:"预加载可以一定程度上降低首屏的加载时间，因为可以将一些不影响首屏但重要的文件延后加载，唯一缺点就是兼容性不好。"}),"\n",(0,s.jsxs)(n.h2,{id:"预渲染",children:["预渲染",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#预渲染",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"可以通过预渲染将下载的文件预先在后台渲染，可以使用以下代码开启预渲染"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<link rel="prerender" href="http://example.com"> \n'})}),"\n",(0,s.jsx)(n.p,{children:"预渲染虽然可以提高页面的加载速度，但是要确保该页面大概率会被用户在之后打开，否则就是白白浪费资源去渲染。"}),"\n",(0,s.jsxs)(n.h2,{id:"懒执行",children:["懒执行",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#懒执行",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，对于某些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒。"}),"\n",(0,s.jsxs)(n.h2,{id:"懒加载",children:["懒加载",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#懒加载",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"懒加载就是将不关键的资源延后加载。"}),"\n",(0,s.jsxs)(n.p,{children:["懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。对于图片来说，先设置图片标签的 ",(0,s.jsx)(n.code,{children:"src"})," 属性为一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，就将自定义属性替换为 ",(0,s.jsx)(n.code,{children:"src"})," 属性，这样图片就会去下载资源，实现了图片懒加载。"]}),"\n",(0,s.jsx)(n.p,{children:"懒加载不仅可以用于图片，也可以使用在别的资源上。比如进入可视区域才开始播放视频等等。"}),"\n",(0,s.jsxs)(n.h2,{id:"cdn",children:["CDN",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cdn",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"CDN 的原理是尽可能的在各个地方分布机房缓存数据，这样即使我们的根服务器远在国外，在国内的用户也可以通过国内的机房迅速加载资源。"}),"\n",(0,s.jsx)(n.p,{children:"因此，我们可以将静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。并且对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie，平白消耗流量。"}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这些碎片化的性能优化点看似很短，但是却能在出现性能问题时简单高效的提高性能，并且好几个点都是面试高频考点，比如节流、防抖。如果你还没有在项目中使用过这些技术，可以尝试着用到项目中，体验下功效。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%2F17.%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%90%90%E7%A2%8E%E4%BA%8B.md"]={toc:[{text:"图片优化",id:"图片优化",depth:2},{text:"计算图片大小",id:"计算图片大小",depth:3},{text:"图片加载优化",id:"图片加载优化",depth:3},{text:"DNS 预解析",id:"dns-预解析",depth:2},{text:"节流",id:"节流",depth:2},{text:"防抖",id:"防抖",depth:2},{text:"预加载",id:"预加载",depth:2},{text:"预渲染",id:"预渲染",depth:2},{text:"懒执行",id:"懒执行",depth:2},{text:"懒加载",id:"懒加载",depth:2},{text:"CDN",id:"cdn",depth:2},{text:"小结",id:"小结",depth:2}],title:"17.性能优化琐碎事",headingTitle:"17.性能优化琐碎事",frontmatter:{}}}}]);