"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["96506"],{20242:function(e,n,l){l.r(n),l.d(n,{default:()=>m});var t=l(552676),r=l(740453);let a=l.p+"static/image/7ad802c64b5347bc6942d82b6a568539.42f546b1.webp",s=l.p+"static/image/759831d7a9a448ee969949e5bd3a6564.13ea195c.webp",d=l.p+"static/image/1f62af43478a78b3ff7e2b33e576caa0.e9161bfe.webp",i=l.p+"static/image/f1d4eca0da6faa4f314adb72bcb4796d.961f7ca3.webp",c=l.p+"static/image/bf816a5d7c0c7602ee62f117efdd903e.2d2c362e.webp",o=l.p+"static/image/341575eda02a7dcd5d036ef3558793c7.af04f16f.webp";function p(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h4:"h4",ul:"ul",li:"li",code:"code",img:"img",pre:"pre",strong:"strong",blockquote:"blockquote"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"38vue3-实战之订单管理操作多级判断",children:["38.Vue3 实战之订单管理（操作多级判断）",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#38vue3-实战之订单管理操作多级判断",children:"#"})]}),"\n",(0,t.jsxs)(n.h2,{id:"前言",children:["前言",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"上一章节我们对商品管理做了详细的分析和讲解，主要学习了新增商品、修改商品等操作。\n本章节对订单管理模进行讲解，主要分两部分，第一部分为订单列表，第二部分为订单详情。"}),"\n",(0,t.jsxs)(n.h4,{id:"本章节知识点",children:["本章节知识点",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章节知识点",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["需要注册的组件：",(0,t.jsx)(n.code,{children:"ElSelect"}),"、",(0,t.jsx)(n.code,{children:"ElOption"}),"。"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Table 筛选项。"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["路由 ",(0,t.jsx)(n.code,{children:"router-link"})," 带参跳转。"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"订单列表",children:["订单列表",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#订单列表",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"需要实现的页面样式在浏览器中的显示效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["页面的整体结构还是和之前一样的 ",(0,t.jsx)(n.code,{children:"el-card"})," + ",(0,t.jsx)(n.code,{children:"el-table"})," 布局，不同的是，这次顶部有列表筛选条件项。分别是订单号输入框筛选，以及订单状态筛选项。"]}),"\n",(0,t.jsxs)(n.p,{children:["首先打开 ",(0,t.jsx)(n.code,{children:"App.vue"}),"，添加菜单项："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:'...\n<el-menu-item index="/good"><i class="el-icon-s-goods" />商品管理</el-menu-item>\n+ <el-menu-item index="/order"><el-icon><List /></el-icon>订单管理</el-menu-item>\n...\n'})}),"\n",(0,t.jsxs)(n.p,{children:["然后前往 ",(0,t.jsx)(n.code,{children:"views"})," 文件夹下新建 ",(0,t.jsx)(n.code,{children:"Order.vue"})," 组件，先占位："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<template>\n  订单列表\n</template>\n\n<script>\nexport default {\n  name: 'Order'\n}\n<\/script>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["然后再去 ",(0,t.jsx)(n.code,{children:"router/index.js"})," 编写路由配置项，如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import Order from '@/views/Order.vue'\n...\n{\n  path: '/order',\n  name: 'order',\n  component: Order\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["顺便把头部信息也添加了，前往 ",(0,t.jsx)(n.code,{children:"utils/index.js"}),"，添加如下代码："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export const pathMap = {\n  index: '首页',\n  login: '登录',\n  add: '添加商品',\n  swiper: '轮播图配置',\n  hot: '热销商品配置',\n  new: '新品上线配置',\n  recommend: '为你推荐配置',\n  category: '分类管理',\n  level2: '分类二级管理',\n  level3: '分类三级管理',\n  good: '商品管理',\n  order: '订单管理',\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"上述一顿操作，都是为了后面写页面时能把精力集中在业务上，打开浏览器观察页面变化："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"如上图所示，此时，已经成功创建了订单页面。"}),"\n",(0,t.jsxs)(n.p,{children:["接下来开始编写 ",(0,t.jsx)(n.code,{children:"Order.vue"})," 内部逻辑，首先来编写模板部分："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"template"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<template>\n  <el-card class="order-container">\n    <template #header>\n      <div class="header">\n        <el-input\n          style="width: 200px; margin-right: 10px"\n          placeholder="请输入订单号"\n          v-model="state.orderNo"\n          @change="handleOption"\n          size="small"\n          clearable\n        />\n        <el-select @change="handleOption" v-model="state.orderStatus" size="small" style="width: 200px; margin-right: 10px">\n          <el-option\n            v-for="item in state.options"\n            :key="item.value"\n            :label="item.label"\n            :value="item.value"\n          />\n        </el-select>\n        \x3c!-- <el-button type="primary" size="small" icon="el-icon-edit">修改订单</el-button> --\x3e\n        <el-button type="primary" :icon="HomeFilled" @click="handleConfig()">配货完成</el-button>\n        <el-button type="primary" :icon="HomeFilled" @click="handleSend()">出库</el-button>\n        <el-button type="danger" :icon="Delete" @click="handleClose()">关闭订单</el-button>\n      </div>\n    </template>\n    <el-table\n      :load="state.loading"\n      :data="state.tableData"\n      tooltip-effect="dark"\n      style="width: 100%"\n      @selection-change="handleSelectionChange">\n      <el-table-column\n        type="selection"\n        width="55">\n      </el-table-column>\n      <el-table-column\n        prop="orderNo"\n        label="订单号"\n      >\n      </el-table-column>\n      <el-table-column\n        prop="totalPrice"\n        label="订单总价"\n      >\n      </el-table-column>\n      <el-table-column\n        prop="orderStatus"\n        label="订单状态"\n      >\n        <template #default="scope">\n          <span>{{ $filters.orderMap(scope.row.orderStatus) }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        prop="payType"\n        label="支付方式"\n      >\n        <template #default=\'scope\'>\n          <span v-if="scope.row.payType == 1">微信支付</span>\n          <span v-else-if="scope.row.payType == 2">支付宝支付</span>\n          <span v-else>未知</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        prop="createTime"\n        label="创建时间"\n      >\n      </el-table-column>\n      <el-table-column\n        label="操作"\n      >\n        <template #default="scope">\n          <el-popconfirm\n            v-if="scope.row.orderStatus == 1"\n            title="确定配货完成吗？"\n            @confirm="handleConfig(scope.row.orderId)"\n            confirm-button-text="确定"\n            cancel-button-text="取消"\n          >\n            <template #reference>\n              <a style="cursor: pointer; margin-right: 10px">配货完成</a>\n            </template>\n          </el-popconfirm>\n          <el-popconfirm\n            v-if="scope.row.orderStatus == 2"\n            title="确定出库吗？"\n            @confirm="handleSend(scope.row.orderId)"\n            confirm-button-text="确定"\n            cancel-button-text="取消"\n          >\n            <template #reference>\n              <a style="cursor: pointer; margin-right: 10px">出库</a>\n            </template>\n          </el-popconfirm>\n          <el-popconfirm\n            v-if="!(scope.row.orderStatus == 4 || scope.row.orderStatus < 0)"\n            title="确定关闭订单吗？"\n            @confirm="handleClose(scope.row.orderId)"\n            confirm-button-text="确定"\n            cancel-button-text="取消"\n          >\n            <template #reference>\n              <a style="cursor: pointer; margin-right: 10px">关闭订单</a>\n            </template>\n          </el-popconfirm>\n          <router-link :to="{ path: \'/order_detail\', query: { id: scope.row.orderId }}">订单详情</router-link>\n        </template>\n      </el-table-column>\n    </el-table>\n    <el-pagination\n      background\n      layout="prev, pager, next"\n      :total="state.total"\n      :page-size="state.pageSize"\n      :current-page="state.currentPage"\n      @current-change="changePage"\n    />\n  </el-card>\n</template>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["注意，",(0,t.jsx)(n.code,{children:"el-card"})," 的 ",(0,t.jsx)(n.code,{children:"#header"})," 插槽多了两个筛选项，一个是输入框，另一个是选择框，以及路由跳转组件："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<router-link :to=\"{ path: '/order_detail', query: { id: scope.row.orderId }}\">订单详情</router-link>\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"to"})," 接收 ",(0,t.jsx)(n.code,{children:"string"})," 类型的时候，可以直接写跳转的路径，如 ",(0,t.jsx)(n.code,{children:"to='/test'"}),"。但是当接收的参数为对象时，需要设置 ",(0,t.jsx)(n.code,{children:"path"})," 属性为跳转的路径，如果带参的话，可以通过 ",(0,t.jsx)(n.code,{children:"query"})," 属性传递参数，如上述传递订单的 ",(0,t.jsx)(n.code,{children:"id"})," 给订单详情页面。"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"el-option"})," 选项接收的 ",(0,t.jsx)(n.code,{children:"option"})," 属性是一个对象类型，有固定格式，需要你在传递之前，手动修改成 ",(0,t.jsx)(n.code,{children:"{ key: xx, label: xxx, value: xxx }"})," 这样的形式。"]}),"\n",(0,t.jsxs)(n.p,{children:["本章节大量使用了 ",(0,t.jsx)(n.code,{children:"v-if"}),"、",(0,t.jsx)(n.code,{children:"v-else-if"}),"、",(0,t.jsx)(n.code,{children:"v-else"}),"，合理的利用这些 ",(0,t.jsx)(n.code,{children:"Vue"})," 提供的原生指令，能大大的提高代码的可读性。"]}),"\n",(0,t.jsx)(n.p,{children:"我们再来添加逻辑部分："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"script"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport { onMounted, reactive, ref } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport { HomeFilled, Delete } from '@element-plus/icons-vue'\nimport axios from '@/utils/axios'\n\nconst state = reactive({\n  loading: false,\n  tableData: [], // 数据列表\n  multipleSelection: [], // 选中项\n  total: 0, // 总条数\n  currentPage: 1, // 当前页\n  pageSize: 10, // 分页大小\n  orderNo: '', // 订单号\n  orderStatus: '', // 订单状态\n  // 订单状态筛选项默认值\n  options: [{\n    value: '',\n    label: '全部'\n  }, {\n    value: 0,\n    label: '待支付'\n  }, {\n    value: 1,\n    label: '已支付'\n  }, {\n    value: 2,\n    label: '配货完成'\n  }, {\n    value: 3,\n    label: '出库成功'\n  }, {\n    value: 4,\n    label: '交易成功'\n  }, {\n    value: -1,\n    label: '手动关闭'\n  }, {\n    value: -2,\n    label: '超时关闭'\n  }, {\n    value: -3,\n    label: '商家关闭'\n  }]\n})\n// 初始化获取订单列表\nonMounted(() => {\n  getOrderList()\n})\n// 获取列表方法\nconst getOrderList = () => {\n  state.loading = true\n  axios.get('/orders', {\n    params: {\n      pageNumber: state.currentPage,\n      pageSize: state.pageSize,\n      orderNo: state.orderNo,\n      orderStatus: state.orderStatus\n    }\n  }).then(res => {\n    state.tableData = res.list\n    state.total = res.totalCount\n    state.currentPage = res.currPage\n    state.loading = false\n  })\n}\n// 触发过滤项方法\nconst handleOption = () => {\n  state.currentPage = 1\n  getOrderList()\n}\n// checkbox 选择项\nconst handleSelectionChange = (val) => {\n  state.multipleSelection = val\n}\n// 翻页方法\nconst changePage = (val) => {\n  state.currentPage = val\n  getOrderList()\n}\n// 配货方法\nconst handleConfig = (id) => {\n  let params\n  // 当个配置\n  if (id) {\n    params = [id]\n  } else {\n    if (!state.multipleSelection.length) {\n      console.log('state.multipleSelection', state.multipleSelection.length)\n      ElMessage.error('请选择项')\n      return\n    }\n    // 多选配置\n    params = state.multipleSelection.map(i => i.orderId)\n  }\n  axios.put('/orders/checkDone', {\n    ids: params\n  }).then(() => {\n    ElMessage.success('配货成功')\n    getOrderList()\n  })\n}\n// 出库方法\nconst handleSend = (id) => {\n  let params\n  if (id) {\n    params = [id]\n  } else {\n    if (!state.multipleSelection.length) {\n      ElMessage.error('请选择项')\n      return\n    }\n    params = state.multipleSelection.map(i => i.orderId)\n  }\n  axios.put('/orders/checkOut', {\n    ids: params\n  }).then(() => {\n    ElMessage.success('出库成功')\n    getOrderList()\n  })\n}\n// 关闭订单方法\nconst handleClose = (id) => {\n  let params\n  if (id) {\n    params = [id]\n  } else {\n    if (!state.multipleSelection.length) {\n      ElMessage.error('请选择项')\n      return\n    }\n    params = state.multipleSelection.map(i => i.orderId)\n  }\n  axios.put('/orders/close', {\n    ids: params\n  }).then(() => {\n    ElMessage.success('关闭成功')\n    getOrderList()\n  })\n}\n<\/script>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["代码中已经配置了 ",(0,t.jsx)(n.code,{children:"options"})," 属性值，上述几个状态都是从后段 api 接口文档拿到的，在此描述一下订单返回属性的对应释义："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'createTime: "2021-04-07 17:37:02", // 订单创建时间\nextraInfo: "", \nisDeleted: 0,\norderId: 3056, // 订单 id\norderNo: "16177882220776231", // 订单编号\norderStatus: -3, // 订单状态，空字符串：全部，0：待支付，1：已支付，2：配货完成，3：出库成功，4：交易成功，-1：手动关闭，-2：超时关闭，-3：商家关闭\npayStatus: 1, // 支付状态，\npayTime: "2021-04-07T09:37:05.000+0000", // 支付时间\npayType: 2, // 支付类型 1：微信，2：支付宝\ntotalPrice: 8598, // 总金额\nupdateTime: "2021-04-07 20:46:40", // 更新时间\nuserId: 4555, // 购买用户id\n'})}),"\n",(0,t.jsxs)(n.p,{children:["返回列表的数据描述如上述所示，根据列表的需要，自行设置 ",(0,t.jsx)(n.code,{children:"el-table-column"})," 组件。"]}),"\n",(0,t.jsxs)(n.p,{children:["配置、出库、关闭订单方法，接口是接收多条数据同时操作的，根据 ",(0,t.jsx)(n.code,{children:"multipleSelection"})," 数组值，通过  ",(0,t.jsx)(n.code,{children:"map"})," 操作，将 ",(0,t.jsx)(n.code,{children:"orderId"})," 提取出来，以数组的形式传递给接口。"]}),"\n",(0,t.jsxs)(n.p,{children:["注意，代码中还声明了一个全局变量 ",(0,t.jsx)(n.code,{children:"orderMap"}),"，需要去 ",(0,t.jsx)(n.code,{children:"main.js"})," 添加这个变量，否则会报错，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// main.js\nconst orderStatus = {\n  0: '待支付',\n  1: '已支付',\n  2: '配货完成',\n  3: '出库成功',\n  4: '交易成功',\n  '-1': '手动关闭',\n  '-2': '超时关闭',\n  '-3': '商家关闭'\n}\n\n// 全局方法\napp.config.globalProperties.$filters = {\n  orderMap(status) {\n    return orderStatus[status] || '未知状态'\n  },\n  prefix(url) {\n    if (url && url.startsWith('http')) {\n      return url\n    } else {\n      url = `http://backend-api-02.newbee.ltd${url}`\n      return url\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"查看浏览器表现，如下所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsxs)(n.h2,{id:"订单详情",children:["订单详情",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#订单详情",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["如上图所示，列表页通过传递订单 id 给详情页面，详情页通过订单 id，去获取该笔交易的订单详情内容。开始编码，在 ",(0,t.jsx)(n.code,{children:"views"})," 下新建一个订单详情详情组件 ",(0,t.jsx)(n.code,{children:"OrderDetail.vue"}),"，还是先占位："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<template>\n  订单详情\n</template>\n\n<script setup>\n<\/script>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["添加头部设置，打开 ",(0,t.jsx)(n.code,{children:"utils/index.js"}),"："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export const pathMap = {\n  index: '首页',\n  login: '登录',\n  add: '添加商品',\n  swiper: '轮播图配置',\n  hot: '热销商品配置',\n  new: '新品上线配置',\n  recommend: '为你推荐配置',\n  category: '分类管理',\n  level2: '分类二级管理',\n  level3: '分类三级管理',\n  good: '商品管理',\n  order: '订单管理',\n  order_detail: '订单详情',\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["前往 ",(0,t.jsx)(n.code,{children:"router/index.js"})," 添加路由配置："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import OrderDetail from '@/views/OrderDetail.vue'\n...\n{\n  path: '/order_detail',\n  name: 'order_detail',\n  component: OrderDetail\n},\n"})}),"\n",(0,t.jsx)(n.p,{children:"此时，通过点击列表页的详情按钮，查看详情页及路由是否正常，如下图所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"此时，已经成功配置好详情页面，接着开始编写详情页的内容："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"template"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<template>\n  <el-card class="order-container">\n    <div class="data">\n      <el-card class="data-item" shadow="hover">\n        <template #header>\n          <div class="card-header">\n            <span>订单状态</span>\n          </div>\n        </template>\n        <div>\n          {{ state.data.orderStatusString }}\n        </div>\n      </el-card>\n      <el-card class="data-item" shadow="hover">\n        <template #header>\n          <div class="card-header">\n            <span>创建时间</span>\n          </div>\n        </template>\n        <div>\n          {{ state.data.createTime }}\n        </div>\n      </el-card>\n      <el-card class="data-item" shadow="hover">\n        <template #header>\n          <div class="card-header">\n            <span>订单号</span>\n          </div>\n        </template>\n        <div>\n          {{ state.data.orderNo }}\n        </div>\n      </el-card>\n    </div>\n    <el-table\n      :data="state.tableData"\n      tooltip-effect="dark"\n      style="width: 100%"\n    >\n      <el-table-column\n        label="商品图片"\n      >\n        <template #default="scope">\n          <img style="width: 100px" :key="scope.row.goodsId" :src="$filters.prefix(scope.row.goodsCoverImg)" alt="商品主图">\n        </template>\n      </el-table-column>\n      <el-table-column\n        prop="goodsId"\n        label="商品编号"\n      >\n      </el-table-column>\n      <el-table-column\n        prop="goodsName"\n        label="商品名"\n      ></el-table-column>\n      <el-table-column\n        prop="goodsCount"\n        label="商品数量"\n      >\n      </el-table-column>\n      <el-table-column\n        prop="sellingPrice"\n        label="价格"\n      >\n      </el-table-column>\n    </el-table>\n  </el-card>\n</template>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["头部声明了三个 ",(0,t.jsx)(n.code,{children:"el-card"})," 组件，分别设置订单状态、订单时间、订单号，读者朋友们可以根据自己的需求，多设置一些展示内容，这里就展示三个订单字段仅供参考。"]}),"\n",(0,t.jsxs)(n.p,{children:["底部采用 Table 静态数据，也就是获取一份数据，通过数组的形式传给 ",(0,t.jsx)(n.code,{children:"el-table"})," 属性，代码逻辑部分的实现如下："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"script"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport { onMounted, reactive } from 'vue'\nimport { useRoute } from 'vue-router'\nimport axios from '@/utils/axios'\n\nconst route = useRoute()\nconst { id } = route.query\nconst state = reactive({\n  data: {},\n  tableData: []\n})\nonMounted(() => {\n  // 初始化钩子，获取订单详情数据\n  axios.get(`/orders/${id}`).then(res => {\n    state.data = res\n    state.tableData = res.newBeeMallOrderItemVOS\n  })\n})\n<\/script>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["逻辑部分比较简单，通过 ",(0,t.jsx)(n.code,{children:"/orders/{id}"})," 接口，获取详情，将数据赋值给 ",(0,t.jsx)(n.code,{children:"tableData"}),"，return 给模板使用便可。"]}),"\n",(0,t.jsx)(n.p,{children:"最后是样式部分的代码，如下所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"style"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<style scoped>\n  .data {\n    display: flex;\n    margin-bottom: 50px;\n  }\n  .data .data-item {\n    flex: 1;\n    margin: 0 10px;\n  }\n  .el-table {\n    border: 1px solid #EBEEF5;\n    border-bottom: none;\n  }\n  .has-gutter th {\n    border-right: 1px solid #EBEEF5;\n  }\n\n  .has-gutter th:last-child {\n    border-right: none;\n  }\n  .el-table__row td {\n    border-right: 1px solid #EBEEF5;\n  }\n  .el-table__row td:last-child {\n    border-right: none;\n  }\n</style>\n"})}),"\n",(0,t.jsx)(n.p,{children:"查看最后的页面展示效果："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"订单这块逻辑我们已经走通了，本章节我们学习了如何通过路由组件跳转页面，在业务中这种模式会经常使用到。"}),"\n",(0,t.jsxs)(n.h4,{id:"本章源码地址",children:["本章源码地址",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章源码地址",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://s.yezgea02.com/1663579816909/admin07.zip",target:"_blank",rel:"noopener noreferrer",children:"点击下载"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"文档最近更新时间：2022 年 9 月 20 日。"}),"\n"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}let m=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F38.Vue3%20%E5%AE%9E%E6%88%98%E4%B9%8B%E8%AE%A2%E5%8D%95%E7%AE%A1%E7%90%86%EF%BC%88%E6%93%8D%E4%BD%9C%E5%A4%9A%E7%BA%A7%E5%88%A4%E6%96%AD%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"本章节知识点",id:"本章节知识点",depth:4},{text:"订单列表",id:"订单列表",depth:2},{text:"订单详情",id:"订单详情",depth:2},{text:"总结",id:"总结",depth:2},{text:"本章源码地址",id:"本章源码地址",depth:4}],title:"38.Vue3 实战之订单管理（操作多级判断）",headingTitle:"38.Vue3 实战之订单管理（操作多级判断）",frontmatter:{}}}}]);