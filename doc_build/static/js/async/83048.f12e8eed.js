"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["83048"],{8056:function(e,n,t){e.exports=t.p+"static/image/0c9abc5e01e04297a74b822b61552b2f.9caa2f95.webp"},747715:function(e,n,t){t.r(n),t.d(n,{default:()=>o});var s=t(552676),r=t(740453);let a=t.p+"static/image/f05b63ffa08cd7b358ec5f0fe8477a64.5c234a63.webp",c=t.p+"static/image/4f86c353bdc71e964cdca6699639d10f.62f853b2.webp",i=t.p+"static/image/c7de53a8d66eeb599e3484baf439bc6a.7a7b79c7.webp";var d=t(8056);function l(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",pre:"pre",h3:"h3",strong:"strong"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"5template-模板是怎样通过-compile-编译的",children:["5.template 模板是怎样通过 Compile 编译的",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5template-模板是怎样通过-compile-编译的",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"compile",children:["Compile",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#compile",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"compile"})," 编译可以分成 ",(0,s.jsx)(n.code,{children:"parse"}),"、",(0,s.jsx)(n.code,{children:"optimize"})," 与 ",(0,s.jsx)(n.code,{children:"generate"})," 三个阶段，最终需要得到 render function。这部分内容不算 Vue.js 的响应式核心，只是用来编译的，笔者认为在精力有限的情况下不需要追究其全部的实现细节，能够把握如何解析的大致流程即可。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"由于解析过程比较复杂，直接上代码可能会导致不了解这部分内容的同学一头雾水。所以笔者准备提供一个 template 的示例，通过这个示例的变化来看解析的过程。但是解析的过程及结果都是将最重要的部分抽离出来展示，希望能让读者更好地了解其核心部分的实现。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div :class="c" class="demo" v-if="isShow">\n    <span v-for="item in sz">{{item}}</span>\n</div>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var html = \'<div :class="c" class="demo" v-if="isShow"><span v-for="item in sz">{{item}}</span></div>\';\n'})}),"\n",(0,s.jsx)(n.p,{children:"接下来的过程都会依赖这个示例来进行。"}),"\n",(0,s.jsxs)(n.h2,{id:"parse",children:["parse",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parse",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先是 ",(0,s.jsx)(n.code,{children:"parse"}),"，",(0,s.jsx)(n.code,{children:"parse"})," 会用正则等方式将 template 模板中进行字符串解析，得到指令、class、style等数据，形成 AST（",(0,s.jsx)(n.a,{href:"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9",target:"_blank",rel:"noopener noreferrer",children:"在计算机科学中，抽象语法树（abstract syntax tree或者缩写为AST），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式，这里特指编程语言的源代码。"}),"）。"]}),"\n",(0,s.jsx)(n.p,{children:"这个过程比较复杂，会涉及到比较多的正则进行字符串解析，我们来看一下得到的 AST 的样子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"{\n    /* 标签属性的map，记录了标签上属性 */\n    'attrsMap': {\n        ':class': 'c',\n        'class': 'demo',\n        'v-if': 'isShow'\n    },\n    /* 解析得到的:class */\n    'classBinding': 'c',\n    /* 标签属性v-if */\n    'if': 'isShow',\n    /* v-if的条件 */\n    'ifConditions': [\n        {\n            'exp': 'isShow'\n        }\n    ],\n    /* 标签属性class */\n    'staticClass': 'demo',\n    /* 标签的tag */\n    'tag': 'div',\n    /* 子标签数组 */\n    'children': [\n        {\n            'attrsMap': {\n                'v-for': \"item in sz\"\n            },\n            /* for循环的参数 */\n            'alias': \"item\",\n            /* for循环的对象 */\n            'for': 'sz',\n            /* for循环是否已经被处理的标记位 */\n            'forProcessed': true,\n            'tag': 'span',\n            'children': [\n                {\n                    /* 表达式，_s是一个转字符串的函数 */\n                    'expression': '_s(item)',\n                    'text': '{{item}}'\n                }\n            ]\n        }\n    ]\n}\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"最终得到的 AST 通过一些特定的属性，能够比较清晰地描述出标签的属性以及依赖关系。"}),"\n",(0,s.jsx)(n.p,{children:"接下来我们用代码来讲解一下如何使用正则来把 template 编译成我们需要的 AST 的。"}),"\n",(0,s.jsxs)(n.h3,{id:"正则",children:["正则",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#正则",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"首先我们定义一下接下来我们会用到的正则。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nconst singleAttrIdentifier = /([^\\s\"'<>/=]+)/\nconst singleAttrAssign = /(?:=)/\nconst singleAttrValues = [\n  /\"([^\"]*)\"+/.source,\n  /'([^']*)'+/.source,\n  /([^\\s\"'=<>`]+)/.source\n]\nconst attribute = new RegExp(\n  '^\\\\s*' + singleAttrIdentifier.source +\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\n)\n\nconst qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')'\nconst startTagOpen = new RegExp('^<' + qnameCapture)\nconst startTagClose = /^\\s*(\\/?)>/\n\nconst endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>')\n\nconst defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g\n\nconst forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"advance",children:["advance",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#advance",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"因为我们解析 template 采用循环进行字符串匹配的方式，所以每匹配解析完一段我们需要将已经匹配掉的去掉，头部的指针指向接下来需要匹配的部分。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function advance (n) {\n    index += n\n    html = html.substring(n)\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"举个例子，当我们把第一个 div 的头标签全部匹配完毕以后，我们需要将这部分除去，也就是向右移动 43 个字符。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["调用 ",(0,s.jsx)(n.code,{children:"advance"})," 函数"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"advance(43);\n"})}),"\n",(0,s.jsx)(n.p,{children:"得到结果"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"parsehtml",children:["parseHTML",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parsehtml",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先我们需要定义个 ",(0,s.jsx)(n.code,{children:"parseHTML"})," 函数，在里面我们循环解析 template 字符串。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function parseHTML () {\n    while(html) {\n        let textEnd = html.indexOf('<');\n        if (textEnd === 0) {\n            if (html.match(endTag)) {\n                //...process end tag\n                continue;\n            }\n            if (html.match(startTagOpen)) {\n                //...process start tag\n                continue;\n            }\n        } else {\n            //...process text\n            continue;\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"parseHTML"})," 会用 ",(0,s.jsx)(n.code,{children:"while"})," 来循环解析 template ，用正则在匹配到标签头、标签尾以及文本的时候分别进行不同的处理。直到整个 template 被解析完毕。"]}),"\n",(0,s.jsxs)(n.h3,{id:"parsestarttag",children:["parseStartTag",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parsestarttag",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们来写一个 ",(0,s.jsx)(n.code,{children:"parseStartTag"}),' 函数，用来解析起始标签（"<div :class="c" class="demo" v-if="isShow">"部分的内容）。']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function parseStartTag () {\n    const start = html.match(startTagOpen);\n    if (start) {\n        const match = {\n            tagName: start[1],\n            attrs: [],\n            start: index\n        }\n        advance(start[0].length);\n\n        let end, attr\n        while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n            advance(attr[0].length)\n            match.attrs.push({\n                name: attr[1],\n                value: attr[3]\n            });\n        }\n        if (end) {\n            match.unarySlash = end[1];\n            advance(end[0].length);\n            match.end = index;\n            return match\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["首先用 ",(0,s.jsx)(n.code,{children:"startTagOpen"})," 正则得到标签的头部，可以得到 ",(0,s.jsx)(n.code,{children:"tagName"}),"（标签名称），同时我们需要一个数组 ",(0,s.jsx)(n.code,{children:"attrs"})," 用来存放标签内的属性。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const start = html.match(startTagOpen);\nconst match = {\n    tagName: start[1],\n    attrs: [],\n    start: index\n}\nadvance(start[0].length);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接下来使用 ",(0,s.jsx)(n.code,{children:"startTagClose"})," 与 ",(0,s.jsx)(n.code,{children:"attribute"})," 两个正则分别用来解析标签结束以及标签内的属性。这段代码用 ",(0,s.jsx)(n.code,{children:"while"})," 循环一直到匹配到 ",(0,s.jsx)(n.code,{children:"startTagClose"})," 为止，解析内部所有的属性。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let end, attr\nwhile (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n    advance(attr[0].length)\n    match.attrs.push({\n        name: attr[1],\n        value: attr[3]\n    });\n}\nif (end) {\n    match.unarySlash = end[1];\n    advance(end[0].length);\n    match.end = index;\n    return match\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"stack",children:["stack",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stack",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["此外，我们需要维护一个 ",(0,s.jsx)(n.strong,{children:"stack"})," 栈来保存已经解析好的标签头，这样我们可以根据在解析尾部标签的时候得到所属的层级关系以及父标签。同时我们定义一个 ",(0,s.jsx)(n.code,{children:"currentParent"})," 变量用来存放当前标签的父标签节点的引用， ",(0,s.jsx)(n.code,{children:"root"})," 变量用来指向根标签节点。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const stack = [];\nlet currentParent, root;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["知道这个以后，我们优化一下 ",(0,s.jsx)(n.code,{children:"parseHTML"})," ，在 ",(0,s.jsx)(n.code,{children:"startTagOpen"})," 的 ",(0,s.jsx)(n.code,{children:"if"})," 逻辑中加上新的处理。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"if (html.match(startTagOpen)) {\n    const startTagMatch = parseStartTag();\n    const element = {\n        type: 1,\n        tag: startTagMatch.tagName,\n        lowerCasedTag: startTagMatch.tagName.toLowerCase(),\n        attrsList: startTagMatch.attrs,\n        attrsMap: makeAttrsMap(startTagMatch.attrs),\n        parent: currentParent,\n        children: []\n    }\n\n    if(!root){\n        root = element\n    }\n\n    if(currentParent){\n        currentParent.children.push(element);\n    }\n\n    stack.push(element);\n    currentParent = element;\n    continue;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们将 ",(0,s.jsx)(n.code,{children:"startTagMatch"})," 得到的结果首先封装成 ",(0,s.jsx)(n.code,{children:"element"})," ，这个就是最终形成的 AST 的节点，标签节点的 type 为 1。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const startTagMatch = parseStartTag();\nconst element = {\n    type: 1,\n    tag: startTagMatch.tagName,\n    attrsList: startTagMatch.attrs,\n    attrsMap: makeAttrsMap(startTagMatch.attrs),\n    parent: currentParent,\n    children: []\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后让 ",(0,s.jsx)(n.code,{children:"root"})," 指向根节点的引用。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"if(!root){\n    root = element\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接着我们将当前节点的 ",(0,s.jsx)(n.code,{children:"element"})," 放入父节点 ",(0,s.jsx)(n.code,{children:"currentParent"})," 的 ",(0,s.jsx)(n.code,{children:"children"})," 数组中。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"if(currentParent){\n    currentParent.children.push(element);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["最后将当前节点 ",(0,s.jsx)(n.code,{children:"element"})," 压入 stack 栈中，并将 ",(0,s.jsx)(n.code,{children:"currentParent"})," 指向当前节点，因为接下去下一个解析如果还是头标签或者是文本的话，会成为当前节点的子节点，如果是尾标签的话，那么将会从栈中取出当前节点，这种情况我们接下来要讲。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"stack.push(element);\ncurrentParent = element;\ncontinue;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["其中的 ",(0,s.jsx)(n.code,{children:"makeAttrsMap"})," 是将 attrs 转换成 map 格式的一个方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function makeAttrsMap (attrs) {\n    const map = {}\n    for (let i = 0, l = attrs.length; i < l; i++) {\n        map[attrs[i].name] = attrs[i].value;\n    }\n    return map\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"parseendtag",children:["parseEndTag",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parseendtag",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["同样，我们在 ",(0,s.jsx)(n.code,{children:"parseHTML"})," 中加入对尾标签的解析函数，为了匹配如“</div>”。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const endTagMatch = html.match(endTag)\n if (endTagMatch) {\n    advance(endTagMatch[0].length);\n    parseEndTag(endTagMatch[1]);\n    continue;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["用 ",(0,s.jsx)(n.code,{children:"parseEndTag"})," 来解析尾标签，它会从 stack 栈中取出最近的跟自己标签名一致的那个元素，将 ",(0,s.jsx)(n.code,{children:"currentParent"})," 指向那个元素，并将该元素之前的元素都从 stack 中出栈。"]}),"\n",(0,s.jsx)(n.p,{children:"这里可能有同学会问，难道解析的尾元素不应该对应 stack 栈的最上面的一个元素才对吗？"}),"\n",(0,s.jsx)(n.p,{children:"其实不然，比如说可能会存在自闭合的标签，如“<br />”，或者是写了“<span>”但是没有加上“< /span>”的情况，这时候就要找到 stack 中的第二个位置才能找到同名标签。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function parseEndTag (tagName) {\n    let pos;\n    for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === tagName.toLowerCase()) {\n            break;\n        }\n    }\n\n    if (pos >= 0) {\n        stack.length = pos;\n        currentParent = stack[pos]; \n    }   \n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"parsetext",children:["parseText",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parsetext",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["最后是解析文本，这个比较简单，只需要将文本取出，然后有两种情况，一种是普通的文本，直接构建一个节点 push 进当前 ",(0,s.jsx)(n.code,{children:"currentParent"})," 的 children 中即可。还有一种情况是文本是如“{{item}}”这样的 Vue.js 的表达式，这时候我们需要用 ",(0,s.jsx)(n.code,{children:"parseText"})," 来将表达式转化成代码。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"text = html.substring(0, textEnd)\nadvance(textEnd)\nlet expression;\nif (expression = parseText(text)) {\n    currentParent.children.push({\n        type: 2,\n        text,\n        expression\n    });\n} else {\n    currentParent.children.push({\n        type: 3,\n        text,\n    });\n}\ncontinue;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们会用到一个 ",(0,s.jsx)(n.code,{children:"parseText"})," 函数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function parseText (text) {\n    if (!defaultTagRE.test(text)) return;\n\n    const tokens = [];\n    let lastIndex = defaultTagRE.lastIndex = 0\n    let match, index\n    while ((match = defaultTagRE.exec(text))) {\n        index = match.index\n        \n        if (index > lastIndex) {\n            tokens.push(JSON.stringify(text.slice(lastIndex, index)))\n        }\n        \n        const exp = match[1].trim()\n        tokens.push(`_s(${exp})`)\n        lastIndex = index + match[0].length\n    }\n\n    if (lastIndex < text.length) {\n        tokens.push(JSON.stringify(text.slice(lastIndex)))\n    }\n    return tokens.join('+');\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们使用一个 ",(0,s.jsx)(n.code,{children:"tokens"})," 数组来存放解析结果，通过 ",(0,s.jsx)(n.code,{children:"defaultTagRE"})," 来循环匹配该文本，如果是普通文本直接 ",(0,s.jsx)(n.code,{children:"push"})," 到 ",(0,s.jsx)(n.code,{children:"tokens"})," 数组中去，如果是表达式（{{item}}），则转化成“_s(${exp})”的形式。"]}),"\n",(0,s.jsx)(n.p,{children:"举个例子，如果我们有这样一个文本。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<div>hello,{{name}}.</div>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["最终得到 ",(0,s.jsx)(n.code,{children:"tokens"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"tokens = ['hello,', _s(name), '.'];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["最终通过 ",(0,s.jsx)(n.code,{children:"join"})," 返回表达式。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"'hello' + _s(name) + '.';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"processif与processfor",children:["processIf与processFor",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#processif与processfor",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["最后介绍一下如何处理“",(0,s.jsx)(n.code,{children:"v-if"}),"”以及“",(0,s.jsx)(n.code,{children:"v-for"}),"”这样的 Vue.js 的表达式的，这里我们只简单介绍两个示例中用到的表达式解析。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们只需要在解析头标签的内容中加入这两个表达式的解析函数即可，在这时“",(0,s.jsx)(n.code,{children:"v-for"}),"”之类指令已经在属性解析时存入了 ",(0,s.jsx)(n.code,{children:"attrsMap"})," 中了。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"if (html.match(startTagOpen)) {\n    const startTagMatch = parseStartTag();\n    const element = {\n        type: 1,\n        tag: startTagMatch.tagName,\n        attrsList: startTagMatch.attrs,\n        attrsMap: makeAttrsMap(startTagMatch.attrs),\n        parent: currentParent,\n        children: []\n    }\n\n    processIf(element);\n    processFor(element);\n\n    if(!root){\n        root = element\n    }\n\n    if(currentParent){\n        currentParent.children.push(element);\n    }\n\n    stack.push(element);\n    currentParent = element;\n    continue;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["首先我们需要定义一个 ",(0,s.jsx)(n.code,{children:"getAndRemoveAttr"})," 函数，用来从 ",(0,s.jsx)(n.code,{children:"el"})," 的 ",(0,s.jsx)(n.code,{children:"attrsMap"})," 属性或是 ",(0,s.jsx)(n.code,{children:"attrsList"})," 属性中取出 ",(0,s.jsx)(n.code,{children:"name"})," 对应值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function getAndRemoveAttr (el, name) {\n    let val\n    if ((val = el.attrsMap[name]) != null) {\n        const list = el.attrsList\n        for (let i = 0, l = list.length; i < l; i++) {\n            if (list[i].name === name) {\n                list.splice(i, 1)\n                break\n            }   \n        }\n    }\n    return val\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"比如说解析示例的 div 标签属性。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"getAndRemoveAttr(el, 'v-for');\n"})}),"\n",(0,s.jsx)(n.p,{children:"可有得到“item in sz”。"}),"\n",(0,s.jsxs)(n.p,{children:["有了这个函数这样我们就可以开始实现 ",(0,s.jsx)(n.code,{children:"processFor"})," 与 ",(0,s.jsx)(n.code,{children:"processIf"})," 了。"]}),"\n",(0,s.jsxs)(n.p,{children:["“v-for”会将指令解析成 ",(0,s.jsx)(n.code,{children:"for"})," 属性以及 ",(0,s.jsx)(n.code,{children:"alias"})," 属性，而“v-if”会将条件都存入 ",(0,s.jsx)(n.code,{children:"ifConditions"})," 数组中。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function processFor (el) {\n    let exp;\n    if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n        const inMatch = exp.match(forAliasRE);\n        el.for = inMatch[2].trim();\n        el.alias = inMatch[1].trim();\n    }\n}\n\nfunction processIf (el) {\n    const exp = getAndRemoveAttr(el, 'v-if');\n    if (exp) {\n        el.if = exp;\n        if (!el.ifConditions) {\n            el.ifConditions = [];\n        }\n        el.ifConditions.push({\n            exp: exp,\n            block: el\n        });\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["到这里，我们已经把 ",(0,s.jsx)(n.code,{children:"parse"})," 的过程介绍完了，接下来看一下 ",(0,s.jsx)(n.code,{children:"optimize"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"optimize",children:["optimize",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#optimize",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optimize"})," 主要作用就跟它的名字一样，用作「优化」。"]}),"\n",(0,s.jsxs)(n.p,{children:["这个涉及到后面要讲 ",(0,s.jsx)(n.code,{children:"patch"})," 的过程，因为 ",(0,s.jsx)(n.code,{children:"patch"})," 的过程实际上是将 VNode 节点进行一层一层的比对，然后将「差异」更新到视图上。那么一些静态节点是不会根据数据变化而产生变化的，这些节点我们没有比对的需求，是不是可以跳过这些静态节点的比对，从而节省一些性能呢？"]}),"\n",(0,s.jsxs)(n.p,{children:["那么我们就需要为静态的节点做上一些「标记」，在 ",(0,s.jsx)(n.code,{children:"patch"})," 的时候我们就可以直接跳过这些被标记的节点的比对，从而达到「优化」的目的。"]}),"\n",(0,s.jsxs)(n.p,{children:["经过 ",(0,s.jsx)(n.code,{children:"optimize"})," 这层的处理，每个节点会加上 ",(0,s.jsx)(n.code,{children:"static"})," 属性，用来标记是否是静态的。"]}),"\n",(0,s.jsx)(n.p,{children:"得到如下结果。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"{\n    'attrsMap': {\n        ':class': 'c',\n        'class': 'demo',\n        'v-if': 'isShow'\n    },\n    'classBinding': 'c',\n    'if': 'isShow',\n    'ifConditions': [\n        'exp': 'isShow'\n    ],\n    'staticClass': 'demo',\n    'tag': 'div',\n    /* 静态标志 */\n    'static': false,\n    'children': [\n        {\n            'attrsMap': {\n                'v-for': \"item in sz\"\n            },\n            'static': false,\n            'alias': \"item\",\n            'for': 'sz',\n            'forProcessed': true,\n            'tag': 'span',\n            'children': [\n                {\n                    'expression': '_s(item)',\n                    'text': '{{item}}',\n                    'static': false\n                }\n            ]\n        }\n    ]\n}\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们用代码实现一下 ",(0,s.jsx)(n.code,{children:"optimize"})," 函数。"]}),"\n",(0,s.jsxs)(n.h3,{id:"isstatic",children:["isStatic",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isstatic",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先实现一个 ",(0,s.jsx)(n.code,{children:"isStatic"})," 函数，传入一个 node 判断该 node 是否是静态节点。判断的标准是当 type 为 2（表达式节点）则是非静态节点，当 type 为 3（文本节点）的时候则是静态节点，当然，如果存在 ",(0,s.jsx)(n.code,{children:"if"})," 或者 ",(0,s.jsx)(n.code,{children:"for "}),"这样的条件的时候（表达式节点），也是非静态节点。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function isStatic (node) {\n    if (node.type === 2) {\n        return false\n    }\n    if (node.type === 3) {\n        return true\n    }\n    return (!node.if && !node.for);\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"markstatic",children:["markStatic",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#markstatic",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"markStatic"})," 为所有的节点标记上 ",(0,s.jsx)(n.code,{children:"static"}),"，遍历所有节点通过 ",(0,s.jsx)(n.code,{children:"isStatic"})," 来判断当前节点是否是静态节点，此外，会遍历当前节点的所有子节点，如果子节点是非静态节点，那么当前节点也是非静态节点。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function markStatic (node) {\n    node.static = isStatic(node);\n    if (node.type === 1) {\n        for (let i = 0, l = node.children.length; i < l; i++) {\n            const child = node.children[i];\n            markStatic(child);\n            if (!child.static) {\n                node.static = false;\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"markstaticroots",children:["markStaticRoots",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#markstaticroots",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["接下来是 ",(0,s.jsx)(n.code,{children:"markStaticRoots"})," 函数，用来标记 ",(0,s.jsx)(n.code,{children:"staticRoot"}),"（静态根）。这个函数实现比较简单，简单来将就是如果当前节点是静态节点，同时满足该节点并不是只有一个文本节点左右子节点（作者认为这种情况的优化消耗会大于收益）时，标记 ",(0,s.jsx)(n.code,{children:"staticRoot"})," 为 true，否则为 false。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function markStaticRoots (node) {\n    if (node.type === 1) {\n        if (node.static && node.children.length && !(\n        node.children.length === 1 &&\n        node.children[0].type === 3\n        )) {\n            node.staticRoot = true;\n            return;\n        } else {\n            node.staticRoot = false;\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"optimize-1",children:["optimize",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#optimize-1",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["有了以上的函数，就可以实现 ",(0,s.jsx)(n.code,{children:"optimize"})," 了。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function optimize (rootAst) {\n    markStatic(rootAst);\n    markStaticRoots(rootAst);\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"generate",children:["generate",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#generate",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"generate"})," 会将 AST 转化成 render funtion 字符串，最终得到 render 的字符串以及 staticRenderFns 字符串。"]}),"\n",(0,s.jsx)(n.p,{children:"首先带大家感受一下真实的 Vue.js 编译得到的结果。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"with(this){\n    return (isShow) ? \n    _c(\n        'div',\n        {\n            staticClass: \"demo\",\n            class: c\n        },\n        _l(\n            (sz),\n            function(item){\n                return _c('span',[_v(_s(item))])\n            }\n        )\n    )\n    : _e()\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["看到这里可能会纳闷了，这些 ",(0,s.jsx)(n.code,{children:"_c"}),"，",(0,s.jsx)(n.code,{children:"_l"})," 到底是什么？其实他们是 Vue.js 对一些函数的简写，比如说 ",(0,s.jsx)(n.code,{children:"_c"})," 对应的是 ",(0,s.jsx)(n.code,{children:"createElement"})," 这个函数。没关系，我们把它用 VNode 的形式写出来就会明白了，这个对接上一章写的 VNode 函数。"]}),"\n",(0,s.jsx)(n.p,{children:"首先是第一层 div 节点。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"render () {\n    return isShow ? (new VNode('div', {\n        'staticClass': 'demo',\n        'class': c\n    }, [ /*这里还有子节点*/ ])) : createEmptyVNode();\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后我们在 ",(0,s.jsx)(n.code,{children:"children"})," 中加上第二层 span 及其子文本节点节点。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"/* 渲染v-for列表 */\nfunction renderList (val, render) {\n    let ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n        ret[i] = render(val[i], i);\n    }\n}\n\nrender () {\n    return isShow ? (new VNode('div', {\n        'staticClass': 'demo',\n        'class': c\n    }, \n        /* begin */\n        renderList(sz, (item) => {\n            return new VNode('span', {}, [\n                createTextVNode(item);\n            ]);\n        })\n        /* end */\n    )) : createEmptyVNode();\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["那我们如何来实现一个 ",(0,s.jsx)(n.code,{children:"generate"})," 呢？"]}),"\n",(0,s.jsxs)(n.h3,{id:"genif",children:["genIf",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#genif",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先实现一个处理 ",(0,s.jsx)(n.code,{children:"if"})," 条件的 ",(0,s.jsx)(n.code,{children:"genIf"})," 函数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function genIf (el) {\n    el.ifProcessed = true;\n    if (!el.ifConditions.length) {\n        return '_e()';\n    }\n    return `(${el.ifConditions[0].exp})?${genElement(el.ifConditions[0].block)}: _e()`\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"genfor",children:["genFor",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#genfor",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["然后是处理 ",(0,s.jsx)(n.code,{children:"for"})," 循环的函数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function genFor (el) {\n    el.forProcessed = true;\n\n    const exp = el.for;\n    const alias = el.alias;\n    const iterator1 = el.iterator1 ? `,${el.iterator1}` : '';\n    const iterator2 = el.iterator2 ? `,${el.iterator2}` : '';\n\n    return `_l((${exp}),` +\n        `function(${alias}${iterator1}${iterator2}){` +\n        `return ${genElement(el)}` +\n    '})';\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"gentext",children:["genText",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gentext",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"处理文本节点的函数。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function genText (el) {\n    return `_v(${el.expression})`;\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"genelement",children:["genElement",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#genelement",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["接下来实现一下 ",(0,s.jsx)(n.code,{children:"genElement"}),"，这是一个处理节点的函数，因为它依赖 ",(0,s.jsx)(n.code,{children:"genChildren"})," 以及g ",(0,s.jsx)(n.code,{children:"enNode"})," ，所以这三个函数放在一起讲。"]}),"\n",(0,s.jsxs)(n.p,{children:["genElement会根据当前节点是否有 ",(0,s.jsx)(n.code,{children:"if"})," 或者 ",(0,s.jsx)(n.code,{children:"for"})," 标记然后判断是否要用 ",(0,s.jsx)(n.code,{children:"genIf"})," 或者 ",(0,s.jsx)(n.code,{children:"genFor"})," 处理，否则通过 ",(0,s.jsx)(n.code,{children:"genChildren"})," 处理子节点，同时得到 ",(0,s.jsx)(n.code,{children:"staticClass"}),"、",(0,s.jsx)(n.code,{children:"class"})," 等属性。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"genChildren"})," 比较简单，遍历所有子节点，通过 ",(0,s.jsx)(n.code,{children:"genNode"})," 处理后用“，”隔开拼接成字符串。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"genNode"})," 则是根据 ",(0,s.jsx)(n.code,{children:"type"})," 来判断该节点是用文本节点 ",(0,s.jsx)(n.code,{children:"genText"})," 还是标签节点 ",(0,s.jsx)(n.code,{children:"genElement"})," 来处理。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function genNode (el) {\n    if (el.type === 1) {\n        return genElement(el);\n    } else {\n        return genText(el);\n    }\n}\n\nfunction genChildren (el) {\n    const children = el.children;\n\n    if (children && children.length > 0) {\n        return `${children.map(genNode).join(',')}`;\n    }\n}\n\nfunction genElement (el) {\n    if (el.if && !el.ifProcessed) {\n        return genIf(el);\n    } else if (el.for && !el.forProcessed) {\n        return genFor(el);\n    } else {\n        const children = genChildren(el);\n        let code;\n        code = `_c('${el.tag},'{\n            staticClass: ${el.attrsMap && el.attrsMap[':class']},\n            class: ${el.attrsMap && el.attrsMap['class']},\n        }${\n            children ? `,${children}` : ''\n        })`\n        return code;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"generate-1",children:["generate",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#generate-1",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["最后我们使用上面的函数来实现 ",(0,s.jsx)(n.code,{children:"generate"}),"，其实很简单，我们只需要将整个 AST 传入后判断是否为空，为空则返回一个 div 标签，否则通过 ",(0,s.jsx)(n.code,{children:"generate"})," 来处理。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function generate (rootAst) {\n    const code = rootAst ? genElement(rootAst) : '_c(\"div\")'\n    return {\n        render: `with(this){return ${code}}`,\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["经历过这些过程以后，我们已经把 template 顺利转成了 render function 了，接下来我们将介绍 ",(0,s.jsx)(n.code,{children:"patch"})," 的过程，来看一下具体 VNode 节点如何进行差异的比对。"]}),"\n",(0,s.jsxs)(n.p,{children:["注：本节代码参考",(0,s.jsx)(n.a,{href:"https://github.com/answershuto/VueDemo/blob/master/%E3%80%8Atemplate%20%E6%A8%A1%E6%9D%BF%E6%98%AF%E6%80%8E%E6%A0%B7%E9%80%9A%E8%BF%87%20Compile%20%E7%BC%96%E8%AF%91%E7%9A%84%E3%80%8B.js",target:"_blank",rel:"noopener noreferrer",children:"《template 模板是怎样通过 Compile 编译的》"}),"。"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let o=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E5%89%96%E6%9E%90%20Vue.js%20%E5%86%85%E9%83%A8%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%2F5.template%20%E6%A8%A1%E6%9D%BF%E6%98%AF%E6%80%8E%E6%A0%B7%E9%80%9A%E8%BF%87%20Compile%20%E7%BC%96%E8%AF%91%E7%9A%84.md"]={toc:[{text:"Compile",id:"compile",depth:2},{text:"parse",id:"parse",depth:2},{text:"正则",id:"正则",depth:3},{text:"advance",id:"advance",depth:2},{text:"parseHTML",id:"parsehtml",depth:3},{text:"parseStartTag",id:"parsestarttag",depth:3},{text:"stack",id:"stack",depth:2},{text:"parseEndTag",id:"parseendtag",depth:3},{text:"parseText",id:"parsetext",depth:3},{text:"processIf与processFor",id:"processif与processfor",depth:3},{text:"optimize",id:"optimize",depth:2},{text:"isStatic",id:"isstatic",depth:3},{text:"markStatic",id:"markstatic",depth:3},{text:"markStaticRoots",id:"markstaticroots",depth:3},{text:"optimize",id:"optimize-1",depth:3},{text:"generate",id:"generate",depth:2},{text:"genIf",id:"genif",depth:3},{text:"genFor",id:"genfor",depth:3},{text:"genText",id:"gentext",depth:3},{text:"genElement",id:"genelement",depth:3},{text:"generate",id:"generate-1",depth:3}],title:"5.template 模板是怎样通过 Compile 编译的",headingTitle:"5.template 模板是怎样通过 Compile 编译的",frontmatter:{}}}}]);