"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["97969"],{723223:function(e,n,s){e.exports=s.p+"static/image/b70b46e9cfa4968253f2eeb008b4ea85.afe27b7a.gif"},18366:function(e,n,s){e.exports=s.p+"static/image/ba7a230c0433811b53e8b86c9da8e963.facf6f6f.gif"},421294:function(e,n,s){s.r(n),s.d(n,{default:()=>F});var r=s(552676),a=s(740453),c=s(723223);let t=s.p+"static/image/0d6049c2d3c329a05a36de2faef59954.8de379d8.webp",i=s.p+"static/image/4cfb550162368fc1552f1ecc7b614216.4eb35921.gif",l=s.p+"static/image/7883a9bba9e965cc2c73a3cfd3c3ef96.bf4a60ad.webp",d=s.p+"static/image/e03d4edf42c958afe362a1201fe60c6a.e9078d6c.gif",o=s.p+"static/image/672ea762c47ae74c7b18c129ba5327dc.53e4745b.webp",p=s.p+"static/image/c5876b924134e3e420d712f15bba025d.e43928fd.gif",m=s.p+"static/image/0f3dfb235e898430fdaef0c47dc493ad.f8b785bc.webp",g=s.p+"static/image/ccd9961f4c9053c3a4cae52b38e42ff7.e2287191.webp",x=s.p+"static/image/86c41b749aa249d000f5c1b7dd907436.22de4aa3.webp",h=s.p+"static/image/28851c47fbf3288e58093aca5eb8868d.af94047c.webp",f=s.p+"static/image/a4f8ee0a50c506b5edbf63ef54fab7c9.ec72339a.webp",j=s.p+"static/image/1255cd3d57e13d0348b67b90893b5b9c.64932a3f.webp",b=s.p+"static/image/ebc39fb7577f81ff5443c9bd61bfcfd3.590c113f.webp",u=s.p+"static/image/f7613ea6235eedfb861ff6a43d43b4cc.346eb747.webp",E=s.p+"static/image/31ec302ed42641fa6596794090705c62.ceedc776.gif",y=s.p+"static/image/c0ceda39928566ceb0dae9ed0f03ae3b.c906ac61.webp",w=s.p+"static/image/b54300092b46b0d79aade873503c243e.ba239704.gif",v=s.p+"static/image/4281358aca99f2deb3aa98135783dfce.153a7f5c.webp",M=s.p+"static/image/0d5839e0c31deef9084202961f42cb7b.c774f761.webp";var C=s(18366);let P=s.p+"static/image/7576728be7f9aafc5e24b9eec99b122a.291b491f.gif",_=s.p+"static/image/dc9839fbad12640fba3d2d946955f0f8.6ec638f4.webp",A=s.p+"static/image/3009ddaa06b8a15cda5c74915c165057.903b70d7.webp",R=s.p+"static/image/eca437f1f4dbfca3c6cb0535d1a60e3e.d69697d0.webp",N=s.p+"static/image/8fe66bfab20dadb1f8dea3dea05634c6.1f91fa6c.gif";function k(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"第58章reactplayground项目实战错误显示主题切换",children:["第58章—ReactPlayground项目实战：错误显示、主题切换",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第58章reactplayground项目实战错误显示主题切换",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"\uFEFF这节我们继续完善 playground 的功能。"}),"\n",(0,r.jsx)(n.p,{children:"首先，我们预览出错时，iframe 会白屏，并不会显示错误。"}),"\n",(0,r.jsx)(n.p,{children:"比如当依赖的模块找不到的时候："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这时候在 devtools 可以看到错误信息："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"但总不能让开发者自己打开 devtools 看，我们要在页面做一下错误的显示。"}),"\n",(0,r.jsx)(n.p,{children:"新增 components/Message/index.tsx 组件"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import classnames from 'classnames'\nimport React, { useEffect, useState } from 'react'\n\nimport styles from './index.module.scss'\n\nexport interface MessageProps {\n    type: 'error' | 'warn'\n    content: string\n}\n\nexport const Message: React.FC<MessageProps> = (props) => {\n  const { type, content } = props\n  const [visible, setVisible] = useState(false)\n\n  useEffect(() => {\n      setVisible(!!content)\n  }, [content])\n\n  return visible ? (\n    <div className={classnames(styles.msg, styles[type])}>\n      <pre dangerouslySetInnerHTML={{ __html: content }}></pre>\n      <button className={styles.dismiss} onClick={() => setVisible(false)}>\n        ✕\n      </button>\n    </div>\n  ) : null\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"传入两个参数，type 是 error 还是 warn，还有错误内容 content。"}),"\n",(0,r.jsx)(n.p,{children:"这里 cotent 要作为 html 的方式设置到 pre 标签的标签体。"}),"\n",(0,r.jsx)(n.p,{children:"React 里设置 html 要用 dangerouslySetInnerHTML={{_html: 'xxx'}} 的方式。"}),"\n",(0,r.jsx)(n.p,{children:"用 visible 的 state 控制显示隐藏，当传入内容的时候，设置 visible 为 true。"}),"\n",(0,r.jsx)(n.p,{children:"写下样式："}),"\n",(0,r.jsx)(n.p,{children:"index.module.scss"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scss",children:".msg {\n    position: absolute;\n    right: 8px;\n    bottom: 0;\n    left: 8px;\n    z-index: 10;\n\n    display: flex;\n    max-height: calc(100% - 300px);\n    min-height: 40px;\n    margin-bottom: 8px;\n    color: var(--color);\n\n    background-color: var(--bg-color);\n    border: 2px solid #fff;\n    border-radius: 6px;\n\n    border-color: var(--color);\n  \n    &.error {\n      --color: #f56c6c;\n      --bg-color: #fef0f0;\n    }\n  \n    &.warn {\n      --color: #e6a23c;\n      --bg-color: #fdf6ec;\n    }\n}\n  \npre {\n    padding: 12px 20px;\n    margin: 0;\n    overflow: auto;\n    white-space: break-spaces;\n}\n  \n.dismiss {\n    position: absolute;\n    top: 2px;\n    right: 2px;\n\n    display: block;\n    width: 18px;\n    height: 18px;\n    padding: 0;\n\n    font-size: 9px;\n    line-height: 18px;\n    color: var(--bg-color);\n\n    text-align: center;\n    cursor: pointer;\n    background-color: var(--color);\n    border: none;\n    border-radius: 9px;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:".msg 绝对定位在底部，设置下宽高。"}),"\n",(0,r.jsx)(n.p,{children:".dismss 绝对定位在 .msg 的右上角。"}),"\n",(0,r.jsx)(n.p,{children:"注意，.error 和 .warn 的时候 color 和 background-color 都不同，我们声明了两个 css 变量。"}),"\n",(0,r.jsx)(n.p,{children:"css 变量可以在它元素和子元素 css 里生效，所以切换了 .error 和 .warn 就切换了整体的颜色："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 Preview 组件引入下试试："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"<Message type='warn' content={new Error().stack!.toString()} />\n"})}),"\n",(0,r.jsx)(n.p,{children:"看下效果："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"把 type 换成 error，再缩小下窗口试试："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(n.p,{children:"那展示的错误内容从哪里来呢？"}),"\n",(0,r.jsx)(n.p,{children:"从 iframe 里传出来。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script>\n    window.addEventListener('error', (e) => {\n        window.parent.postMessage({type: 'ERROR', message: e.message})\n    })\n<\/script>\n"})}),"\n",(0,r.jsx)(n.p,{children:"通过 postMessage 传递消息给父窗口。"}),"\n",(0,r.jsx)(n.p,{children:"然后在 Preview 组件里监听下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { useContext, useEffect, useState } from \"react\"\nimport { PlaygroundContext } from \"../../PlaygroundContext\"\nimport Editor from \"../CodeEditor/Editor\";\nimport { compile } from \"./compiler\";\nimport iframeRaw from './iframe.html?raw'\nimport { IMPORT_MAP_FILE_NAME } from \"../../files\";\nimport { Message } from \"../Message\";\n\ninterface MessageData {\n    data: {\n      type: string\n      message: string\n    }\n}\n\nexport default function Preview() {\n\n    const { files} = useContext(PlaygroundContext)\n    const [compiledCode, setCompiledCode] = useState('')\n\n    useEffect(() => {\n        const res = compile(files);\n        setCompiledCode(res);\n    }, [files]);\n\n    const getIframeUrl = () => {\n        const res = iframeRaw.replace(\n            '<script type=\"importmap\"><\/script>', \n            `<script type=\"importmap\">${\n                files[IMPORT_MAP_FILE_NAME].value\n            }<\/script>`\n        ).replace(\n            '<script type=\"module\" id=\"appSrc\"><\/script>',\n            `<script type=\"module\" id=\"appSrc\">${compiledCode}<\/script>`,\n        )\n        return URL.createObjectURL(new Blob([res], { type: 'text/html' }))\n    }\n\n    useEffect(() => {\n        setIframeUrl(getIframeUrl())\n    }, [files[IMPORT_MAP_FILE_NAME].value, compiledCode]);\n\n    const [iframeUrl, setIframeUrl] = useState(getIframeUrl());\n\n    const [error, setError] = useState('')\n\n    const handleMessage = (msg: MessageData) => {\n        const { type, message } = msg.data\n        if (type === 'ERROR') {\n          setError(message)\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('message', handleMessage)\n        return () => {\n          window.removeEventListener('message', handleMessage)\n        }\n    }, [])\n\n    return <div style={{height: '100%'}}>\n        <iframe\n            src={iframeUrl}\n            style={{\n                width: '100%',\n                height: '100%',\n                padding: 0,\n                border: 'none',\n            }}\n        />\n        <Message type='error' content={error} />\n\n        {/* <Editor file={{\n            name: 'dist.js',\n            value: compiledCode,\n            language: 'javascript'\n        }}/> */}\n    </div>\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"试下效果："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"错误展示出来了，这就是控制台那个报错："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这里暂时用不到 warn，后面用到 warn 再切换 type。"}),"\n",(0,r.jsx)(n.p,{children:"然后再来做下主题切换："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这个同样要在 context 里保存配置："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后加一个 theme 对应的 className："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"写下用到的样式："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:".light {\n    --text: #444;\n    --bg: #fff;\n}\n  \n.dark {\n    --text: #fff;\n    --bg: #1a1a1a;\n} \n"})}),"\n",(0,r.jsx)(n.p,{children:"还记得前面讲过 css 变量的生效范围么？"}),"\n",(0,r.jsx)(n.p,{children:"在元素和它的所有子元素里生效。"}),"\n",(0,r.jsx)(n.p,{children:"所以只要把之前 css 的样式值改成这些变量就可以了。"}),"\n",(0,r.jsx)(n.p,{children:"比如我们在 Header 组件里用下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后把 theme 初始值改为 dark"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这时候 Header 就切换为暗色主题了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"改为 light 就会变回来："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这就是主题切换的原理："}),"\n",(0,r.jsx)(n.p,{children:"声明一些全局的 css 变量，写样式的时候用这些变量。切换主题时切换不同的全局变量值即可。"}),"\n",(0,r.jsx)(n.p,{children:"切成暗色主题后可以看到周边有点间距，加下重置样式："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后我们在 Header 加一个切换主题的按钮："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import styles from './index.module.scss'\n\nimport logoSvg from './icons/logo.svg';\nimport { useContext } from 'react';\nimport { PlaygroundContext } from '../../PlaygroundContext';\nimport { MoonOutlined, SunOutlined } from '@ant-design/icons';\n\nexport default function Header() {\n  const { theme, setTheme} = useContext(PlaygroundContext)\n\n  return (\n    <div className={styles.header}>\n      <div className={styles.logo}>\n        <img alt='logo' src={logoSvg}/>\n        <span>React Playground</span>\n      </div>\n      <div className={styles.links}>\n        {theme === 'light' && (\n          <MoonOutlined\n            title='切换暗色主题'\n            className={styles.theme}\n            onClick={() => setTheme('dark')}\n          />\n        )}\n        {theme === 'dark' && (\n          <SunOutlined\n            title='切换亮色主题'\n            className={styles.theme}\n            onClick={() => setTheme('light')}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"安装用到的 icon 包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"npm install @ant-design/icons --save\n"})}),"\n",(0,r.jsx)(n.p,{children:"试下效果："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"确实能切换了，不过我们要完善下暗色主题的样式。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"其余地方也是同理。"}),"\n",(0,r.jsx)(n.p,{children:"再改下 FileNameList 的样式："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"编辑器同样也可以切换主题，这个是 monaco editor 自带的。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样，主题切换功能就完成了。"}),"\n",(0,r.jsxs)(n.p,{children:["案例代码上传了",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/react-playground-project",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git reset --hard 4a77f1bf3dc8be9e270cc346145fde6a6a896b89\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这节我们实现了错误显示和主题切换功能。"}),"\n",(0,r.jsx)(n.p,{children:"我们创建了 Message 组件来显示错误，iframe 里监听 error 事件，发生错误的时候通过 postMessage 传递给父窗口。"}),"\n",(0,r.jsx)(n.p,{children:"父窗口里监听 message 事件传过来的错误，用 Message 组件显示。"}),"\n",(0,r.jsx)(n.p,{children:"主题切换就是在根元素加一个 .light、.dark 的 className，里面声明 css 变量，因为 css 变量可以在子元素里生效，子元素写样式基于这些变量，那切换了 className 也就切换了这些变量的值，从而实现主题切换。"}),"\n",(0,r.jsx)(n.p,{children:"实现这两个功能后，我们的 playground 就更完善了。"})]})}function S(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(k,{...e})}):k(e)}let F=S;S.__RSPRESS_PAGE_META={},S.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC58%E7%AB%A0%E2%80%94ReactPlayground%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E9%94%99%E8%AF%AF%E6%98%BE%E7%A4%BA%E3%80%81%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第58章—ReactPlayground项目实战：错误显示、主题切换",headingTitle:"第58章—ReactPlayground项目实战：错误显示、主题切换",frontmatter:{}}}}]);