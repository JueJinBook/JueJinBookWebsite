"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["27963"],{225900:function(e,n,s){s.r(n),s.d(n,{default:()=>i});var r=s(552676),l=s(740453);function o(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",h3:"h3",ul:"ul",li:"li"},(0,l.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"13symbol",children:["13.Symbol",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#13symbol",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"概述",children:["概述",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#概述",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入",(0,r.jsx)(n.code,{children:"Symbol"}),"的原因。"]}),"\n",(0,r.jsxs)(n.p,{children:["ES6 引入了一种新的原始数据类型",(0,r.jsx)(n.code,{children:"Symbol"}),"，表示独一无二的值。它属于 JavaScript 语言的原生数据类型之一，其他数据类型是：",(0,r.jsx)(n.code,{children:"undefined"}),"、",(0,r.jsx)(n.code,{children:"null"}),"、布尔值（Boolean）、字符串（String）、数值（Number）、大整数（BigInt）、对象（Object）。"]}),"\n",(0,r.jsxs)(n.p,{children:["Symbol 值通过",(0,r.jsx)(n.code,{children:"Symbol()"}),"函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let s = Symbol();\n\ntypeof s\n// "symbol"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，变量",(0,r.jsx)(n.code,{children:"s"}),"就是一个独一无二的值。",(0,r.jsx)(n.code,{children:"typeof"}),"运算符的结果，表明变量",(0,r.jsx)(n.code,{children:"s"}),"是 Symbol 数据类型，而不是字符串之类的其他类型。"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，",(0,r.jsx)(n.code,{children:"Symbol()"}),"函数前不能使用",(0,r.jsx)(n.code,{children:"new"}),"命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象，所以不能使用",(0,r.jsx)(n.code,{children:"new"}),"命令来调用。另外，由于 Symbol 值不是对象，所以也不能添加属性。基本上，它是一种类似于字符串的数据类型。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Symbol()"}),"函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述。这主要是为了在控制台显示，或者转为字符串时，比较容易区分。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let s1 = Symbol('foo');\nlet s2 = Symbol('bar');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"s1"}),"和",(0,r.jsx)(n.code,{children:"s2"}),"是两个 Symbol 值。如果不加参数，它们在控制台的输出都是",(0,r.jsx)(n.code,{children:"Symbol()"}),"，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果 Symbol 的参数是一个对象，就会调用该对象的",(0,r.jsx)(n.code,{children:"toString()"}),"方法，将其转为字符串，然后才生成一个 Symbol 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = {\n  toString() {\n    return 'abc';\n  }\n};\nconst sym = Symbol(obj);\nsym // Symbol(abc)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["注意，",(0,r.jsx)(n.code,{children:"Symbol()"}),"函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的",(0,r.jsx)(n.code,{children:"Symbol"}),"函数的返回值是不相等的。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// 没有参数的情况\nlet s1 = Symbol();\nlet s2 = Symbol();\n\ns1 === s2 // false\n\n// 有参数的情况\nlet s1 = Symbol('foo');\nlet s2 = Symbol('foo');\n\ns1 === s2 // false\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"s1"}),"和",(0,r.jsx)(n.code,{children:"s2"}),"都是",(0,r.jsx)(n.code,{children:"Symbol()"}),"函数的返回值，而且参数相同，但是它们是不相等的。事实上，如果调用100次",(0,r.jsx)(n.code,{children:"Symbol()"}),"，会得到100个互不相等的值。"]}),"\n",(0,r.jsx)(n.p,{children:"Symbol 值不能与其他类型的值进行运算，会报错。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let sym = Symbol('My symbol');\n\n\"your symbol is \" + sym\n// TypeError: can't convert symbol to string\n`your symbol is ${sym}`\n// TypeError: can't convert symbol to string\n"})}),"\n",(0,r.jsx)(n.p,{children:"但是，Symbol 值可以显式转为字符串。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let sym = Symbol('My symbol');\n\nString(sym) // 'Symbol(My symbol)'\nsym.toString() // 'Symbol(My symbol)'\n"})}),"\n",(0,r.jsx)(n.p,{children:"另外，Symbol 值也可以转为布尔值，但是不能转为数值。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let sym = Symbol();\nBoolean(sym) // true\n!sym  // false\n\nif (sym) {\n  // ...\n}\n\nNumber(sym) // TypeError\nsym + 2 // TypeError\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"symbolprototypedescription",children:["Symbol.prototype.description",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symbolprototypedescription",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["前面说过，",(0,r.jsx)(n.code,{children:"Symbol()"}),"函数创建 Symbol 值时，可以用参数添加一个描述。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const sym = Symbol('foo');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"sym"}),"这个值的描述就是字符串",(0,r.jsx)(n.code,{children:"foo"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"但是，读取这个描述需要将 Symbol 显式转为字符串，即下面的写法。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const sym = Symbol(\'foo\');\n\nString(sym) // "Symbol(foo)"\nsym.toString() // "Symbol(foo)"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面的用法不是很方便。",(0,r.jsx)(n.a,{href:"https://github.com/tc39/proposal-Symbol-description",target:"_blank",rel:"noopener noreferrer",children:"ES2019"})," 提供了一个 Symbol 值的实例属性",(0,r.jsx)(n.code,{children:"description"}),"，直接返回 Symbol 值的描述。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const sym = Symbol('foo');\n\nsym.description // \"foo\"\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"作为属性名的-symbol",children:["作为属性名的 Symbol",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#作为属性名的-symbol",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"由于每一个 Symbol 值都是不相等的，这意味着只要 Symbol 值作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let mySymbol = Symbol();\n\n// 第一种写法\nlet a = {};\na[mySymbol] = 'Hello!';\n\n// 第二种写法\nlet a = {\n  [mySymbol]: 'Hello!'\n};\n\n// 第三种写法\nlet a = {};\nObject.defineProperty(a, mySymbol, { value: 'Hello!' });\n\n// 以上写法都得到同样结果\na[mySymbol] // \"Hello!\"\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码通过方括号结构和",(0,r.jsx)(n.code,{children:"Object.defineProperty()"}),"方法，将对象的属性名指定为一个 Symbol 值。"]}),"\n",(0,r.jsx)(n.p,{children:"注意，Symbol 值作为对象属性名时，不能用点运算符。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const mySymbol = Symbol();\nconst a = {};\n\na.mySymbol = 'Hello!';\na[mySymbol] // undefined\na['mySymbol'] // \"Hello!\"\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，因为点运算符后面总是字符串，所以不会读取",(0,r.jsx)(n.code,{children:"mySymbol"}),"作为标识名所指代的那个值，导致",(0,r.jsx)(n.code,{children:"a"}),"的属性名实际上是一个字符串，而不是一个 Symbol 值。"]}),"\n",(0,r.jsx)(n.p,{children:"同理，在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let s = Symbol();\n\nlet obj = {\n  [s]: function (arg) { ... }\n};\n\nobj[s](123);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，如果",(0,r.jsx)(n.code,{children:"s"}),"不放在方括号中，该属性的键名就是字符串",(0,r.jsx)(n.code,{children:"s"}),"，而不是",(0,r.jsx)(n.code,{children:"s"}),"所代表的那个 Symbol 值。"]}),"\n",(0,r.jsxs)(n.p,{children:["采用增强的对象写法，上面代码的",(0,r.jsx)(n.code,{children:"obj"}),"对象可以写得更简洁一些。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let obj = {\n  [s](arg) { ... }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Symbol 类型还可以用于定义一组常量，保证这组常量的值都是不相等的。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const log = {};\n\nlog.levels = {\n  DEBUG: Symbol('debug'),\n  INFO: Symbol('info'),\n  WARN: Symbol('warn')\n};\nconsole.log(log.levels.DEBUG, 'debug message');\nconsole.log(log.levels.INFO, 'info message');\n"})}),"\n",(0,r.jsx)(n.p,{children:"下面是另外一个例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const COLOR_RED    = Symbol();\nconst COLOR_GREEN  = Symbol();\n\nfunction getComplement(color) {\n  switch (color) {\n    case COLOR_RED:\n      return COLOR_GREEN;\n    case COLOR_GREEN:\n      return COLOR_RED;\n    default:\n      throw new Error('Undefined color');\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["常量使用 Symbol 值最大的好处，就是其他任何值都不可能有相同的值了，因此可以保证上面的",(0,r.jsx)(n.code,{children:"switch"}),"语句会按设计的方式工作。"]}),"\n",(0,r.jsx)(n.p,{children:"还有一点需要注意，Symbol 值作为属性名时，该属性还是公开属性，不是私有属性。"}),"\n",(0,r.jsxs)(n.h2,{id:"实例消除魔术字符串",children:["实例：消除魔术字符串",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例消除魔术字符串",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function getArea(shape, options) {\n  let area = 0;\n\n  switch (shape) {\n    case 'Triangle': // 魔术字符串\n      area = .5 * options.width * options.height;\n      break;\n    /* ... more code ... */\n  }\n\n  return area;\n}\n\ngetArea('Triangle', { width: 100, height: 100 }); // 魔术字符串\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，字符串",(0,r.jsx)(n.code,{children:"Triangle"}),"就是一个魔术字符串。它多次出现，与代码形成“强耦合”，不利于将来的修改和维护。"]}),"\n",(0,r.jsx)(n.p,{children:"常用的消除魔术字符串的方法，就是把它写成一个变量。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const shapeType = {\n  triangle: 'Triangle'\n};\n\nfunction getArea(shape, options) {\n  let area = 0;\n  switch (shape) {\n    case shapeType.triangle:\n      area = .5 * options.width * options.height;\n      break;\n  }\n  return area;\n}\n\ngetArea(shapeType.triangle, { width: 100, height: 100 });\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，我们把",(0,r.jsx)(n.code,{children:"Triangle"}),"写成",(0,r.jsx)(n.code,{children:"shapeType"}),"对象的",(0,r.jsx)(n.code,{children:"triangle"}),"属性，这样就消除了强耦合。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果仔细分析，可以发现",(0,r.jsx)(n.code,{children:"shapeType.triangle"}),"等于哪个值并不重要，只要确保不会跟其他",(0,r.jsx)(n.code,{children:"shapeType"}),"属性的值冲突即可。因此，这里就很适合改用 Symbol 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const shapeType = {\n  triangle: Symbol()\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，除了将",(0,r.jsx)(n.code,{children:"shapeType.triangle"}),"的值设为一个 Symbol，其他地方都不用修改。"]}),"\n",(0,r.jsxs)(n.h2,{id:"属性名的遍历",children:["属性名的遍历",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#属性名的遍历",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Symbol 值作为属性名，遍历对象的时候，该属性不会出现在",(0,r.jsx)(n.code,{children:"for...in"}),"、",(0,r.jsx)(n.code,{children:"for...of"}),"循环中，也不会被",(0,r.jsx)(n.code,{children:"Object.keys()"}),"、",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyNames()"}),"、",(0,r.jsx)(n.code,{children:"JSON.stringify()"}),"返回。"]}),"\n",(0,r.jsxs)(n.p,{children:["但是，它也不是私有属性，有一个",(0,r.jsx)(n.code,{children:"Object.getOwnPropertySymbols()"}),"方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = {};\nlet a = Symbol('a');\nlet b = Symbol('b');\n\nobj[a] = 'Hello';\nobj[b] = 'World';\n\nconst objectSymbols = Object.getOwnPropertySymbols(obj);\n\nobjectSymbols\n// [Symbol(a), Symbol(b)]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码是",(0,r.jsx)(n.code,{children:"Object.getOwnPropertySymbols()"}),"方法的示例，可以获取所有 Symbol 属性名。"]}),"\n",(0,r.jsxs)(n.p,{children:["下面是另一个例子，",(0,r.jsx)(n.code,{children:"Object.getOwnPropertySymbols()"}),"方法与",(0,r.jsx)(n.code,{children:"for...in"}),"循环、",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyNames"}),"方法进行对比的例子。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = {};\nconst foo = Symbol('foo');\n\nobj[foo] = 'bar';\n\nfor (let i in obj) {\n  console.log(i); // 无输出\n}\n\nObject.getOwnPropertyNames(obj) // []\nObject.getOwnPropertySymbols(obj) // [Symbol(foo)]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，使用",(0,r.jsx)(n.code,{children:"for...in"}),"循环和",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyNames()"}),"方法都得不到 Symbol 键名，需要使用",(0,r.jsx)(n.code,{children:"Object.getOwnPropertySymbols()"}),"方法。"]}),"\n",(0,r.jsxs)(n.p,{children:["另一个新的 API，",(0,r.jsx)(n.code,{children:"Reflect.ownKeys()"}),"方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let obj = {\n  [Symbol(\'my_key\')]: 1,\n  enum: 2,\n  nonEnum: 3\n};\n\nReflect.ownKeys(obj)\n//  ["enum", "nonEnum", Symbol(my_key)]\n'})}),"\n",(0,r.jsx)(n.p,{children:"由于以 Symbol 值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let size = Symbol('size');\n\nclass Collection {\n  constructor() {\n    this[size] = 0;\n  }\n\n  add(item) {\n    this[this[size]] = item;\n    this[size]++;\n  }\n\n  static sizeOf(instance) {\n    return instance[size];\n  }\n}\n\nlet x = new Collection();\nCollection.sizeOf(x) // 0\n\nx.add('foo');\nCollection.sizeOf(x) // 1\n\nObject.keys(x) // ['0']\nObject.getOwnPropertyNames(x) // ['0']\nObject.getOwnPropertySymbols(x) // [Symbol(size)]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，对象",(0,r.jsx)(n.code,{children:"x"}),"的",(0,r.jsx)(n.code,{children:"size"}),"属性是一个 Symbol 值，所以",(0,r.jsx)(n.code,{children:"Object.keys(x)"}),"、",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyNames(x)"}),"都无法获取它。这就造成了一种非私有的内部方法的效果。"]}),"\n",(0,r.jsxs)(n.h2,{id:"symbolforsymbolkeyfor",children:["Symbol.for()，Symbol.keyFor()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symbolforsymbolkeyfor",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["有时，我们希望重新使用同一个 Symbol 值，",(0,r.jsx)(n.code,{children:"Symbol.for()"}),"方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建一个以该字符串为名称的 Symbol 值，并将其注册到全局。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let s1 = Symbol.for('foo');\nlet s2 = Symbol.for('foo');\n\ns1 === s2 // true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"s1"}),"和",(0,r.jsx)(n.code,{children:"s2"}),"都是 Symbol 值，但是它们都是由同样参数的",(0,r.jsx)(n.code,{children:"Symbol.for"}),"方法生成的，所以实际上是同一个值。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Symbol.for()"}),"与",(0,r.jsx)(n.code,{children:"Symbol()"}),"这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。",(0,r.jsx)(n.code,{children:"Symbol.for()"}),"不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的",(0,r.jsx)(n.code,{children:"key"}),"是否已经存在，如果不存在才会新建一个值。比如，如果你调用",(0,r.jsx)(n.code,{children:'Symbol.for("cat")'}),"30 次，每次都会返回同一个 Symbol 值，但是调用",(0,r.jsx)(n.code,{children:'Symbol("cat")'}),"30 次，会返回 30 个不同的 Symbol 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'Symbol.for("bar") === Symbol.for("bar")\n// true\n\nSymbol("bar") === Symbol("bar")\n// false\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，由于",(0,r.jsx)(n.code,{children:"Symbol()"}),"写法没有登记机制，所以每次调用都会返回一个不同的值。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Symbol.keyFor()"}),"方法返回一个已登记的 Symbol 类型值的",(0,r.jsx)(n.code,{children:"key"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let s1 = Symbol.for("foo");\nSymbol.keyFor(s1) // "foo"\n\nlet s2 = Symbol("foo");\nSymbol.keyFor(s2) // undefined\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，变量",(0,r.jsx)(n.code,{children:"s2"}),"属于未登记的 Symbol 值，所以返回",(0,r.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，",(0,r.jsx)(n.code,{children:"Symbol.for()"}),"为 Symbol 值登记的名字，是全局环境的，不管有没有在全局环境运行。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function foo() {\n  return Symbol.for('bar');\n}\n\nconst x = foo();\nconst y = Symbol.for('bar');\nconsole.log(x === y); // true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"Symbol.for('bar')"}),"是函数内部运行的，但是生成的 Symbol 值是登记在全局环境的。所以，第二次运行",(0,r.jsx)(n.code,{children:"Symbol.for('bar')"}),"可以取到这个 Symbol 值。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Symbol.for()"}),"的这个全局登记特性，可以用在不同的 iframe 或 service worker 中取到同一个值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"iframe = document.createElement('iframe');\niframe.src = String(window.location);\ndocument.body.appendChild(iframe);\n\niframe.contentWindow.Symbol.for('foo') === Symbol.for('foo')\n// true\n"})}),"\n",(0,r.jsx)(n.p,{children:"上面代码中，iframe 窗口生成的 Symbol 值，可以在主页面得到。"}),"\n",(0,r.jsxs)(n.h2,{id:"实例模块的-singleton-模式",children:["实例：模块的 Singleton 模式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例模块的-singleton-模式",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Singleton 模式指的是调用一个类，任何时候返回的都是同一个实例。"}),"\n",(0,r.jsx)(n.p,{children:"对于 Node 来说，模块文件可以看成是一个类。怎么保证每次执行这个模块文件，返回的都是同一个实例呢？"}),"\n",(0,r.jsxs)(n.p,{children:["很容易想到，可以把实例放到顶层对象",(0,r.jsx)(n.code,{children:"global"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// mod.js\nfunction A() {\n  this.foo = 'hello';\n}\n\nif (!global._foo) {\n  global._foo = new A();\n}\n\nmodule.exports = global._foo;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后，加载上面的",(0,r.jsx)(n.code,{children:"mod.js"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const a = require('./mod.js');\nconsole.log(a.foo);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，变量",(0,r.jsx)(n.code,{children:"a"}),"任何时候加载的都是",(0,r.jsx)(n.code,{children:"A"}),"的同一个实例。"]}),"\n",(0,r.jsxs)(n.p,{children:["但是，这里有一个问题，全局变量",(0,r.jsx)(n.code,{children:"global._foo"}),"是可写的，任何文件都可以修改。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"global._foo = { foo: 'world' };\n\nconst a = require('./mod.js');\nconsole.log(a.foo);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面的代码，会使得加载",(0,r.jsx)(n.code,{children:"mod.js"}),"的脚本都失真。"]}),"\n",(0,r.jsx)(n.p,{children:"为了防止这种情况出现，我们就可以使用 Symbol。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// mod.js\nconst FOO_KEY = Symbol.for('foo');\n\nfunction A() {\n  this.foo = 'hello';\n}\n\nif (!global[FOO_KEY]) {\n  global[FOO_KEY] = new A();\n}\n\nmodule.exports = global[FOO_KEY];\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，可以保证",(0,r.jsx)(n.code,{children:"global[FOO_KEY]"}),"不会被无意间覆盖，但还是可以被改写。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"global[Symbol.for('foo')] = { foo: 'world' };\n\nconst a = require('./mod.js');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果键名使用",(0,r.jsx)(n.code,{children:"Symbol"}),"方法生成，那么外部将无法引用这个值，当然也就无法改写。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// mod.js\nconst FOO_KEY = Symbol('foo');\n\n// 后面代码相同 ……\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码将导致其他脚本都无法引用",(0,r.jsx)(n.code,{children:"FOO_KEY"}),"。但这样也有一个问题，就是如果多次执行这个脚本，每次得到的",(0,r.jsx)(n.code,{children:"FOO_KEY"}),"都是不一样的。虽然 Node 会将脚本的执行结果缓存，一般情况下，不会多次执行同一个脚本，但是用户可以手动清除缓存，所以也不是绝对可靠。"]}),"\n",(0,r.jsxs)(n.h2,{id:"内置的-symbol-值",children:["内置的 Symbol 值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#内置的-symbol-值",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。"}),"\n",(0,r.jsxs)(n.h3,{id:"symbolhasinstance",children:["Symbol.hasInstance",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symbolhasinstance",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.hasInstance"}),"属性，指向一个内部方法。当其他对象使用",(0,r.jsx)(n.code,{children:"instanceof"}),"运算符，判断是否为该对象的实例时，会调用这个方法。比如，",(0,r.jsx)(n.code,{children:"foo instanceof Foo"}),"在语言内部，实际调用的是",(0,r.jsx)(n.code,{children:"Foo[Symbol.hasInstance](foo)"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class MyClass {\n  [Symbol.hasInstance](foo) {\n    return foo instanceof Array;\n  }\n}\n\n[1, 2, 3] instanceof new MyClass() // true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"MyClass"}),"是一个类，",(0,r.jsx)(n.code,{children:"new MyClass()"}),"会返回一个实例。该实例的",(0,r.jsx)(n.code,{children:"Symbol.hasInstance"}),"方法，会在进行",(0,r.jsx)(n.code,{children:"instanceof"}),"运算时自动调用，判断左侧的运算子是否为",(0,r.jsx)(n.code,{children:"Array"}),"的实例。"]}),"\n",(0,r.jsx)(n.p,{children:"下面是另一个例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Even {\n  static [Symbol.hasInstance](obj) {\n    return Number(obj) % 2 === 0;\n  }\n}\n\n// 等同于\nconst Even = {\n  [Symbol.hasInstance](obj) {\n    return Number(obj) % 2 === 0;\n  }\n};\n\n1 instanceof Even // false\n2 instanceof Even // true\n12345 instanceof Even // false\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"symbolisconcatspreadable",children:["Symbol.isConcatSpreadable",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symbolisconcatspreadable",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.isConcatSpreadable"}),"属性等于一个布尔值，表示该对象用于",(0,r.jsx)(n.code,{children:"Array.prototype.concat()"}),"时，是否可以展开。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let arr1 = ['c', 'd'];\n['a', 'b'].concat(arr1, 'e') // ['a', 'b', 'c', 'd', 'e']\narr1[Symbol.isConcatSpreadable] // undefined\n\nlet arr2 = ['c', 'd'];\narr2[Symbol.isConcatSpreadable] = false;\n['a', 'b'].concat(arr2, 'e') // ['a', 'b', ['c','d'], 'e']\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码说明，数组的默认行为是可以展开，",(0,r.jsx)(n.code,{children:"Symbol.isConcatSpreadable"}),"默认等于",(0,r.jsx)(n.code,{children:"undefined"}),"。该属性等于",(0,r.jsx)(n.code,{children:"true"}),"时，也有展开的效果。"]}),"\n",(0,r.jsxs)(n.p,{children:["类似数组的对象正好相反，默认不展开。它的",(0,r.jsx)(n.code,{children:"Symbol.isConcatSpreadable"}),"属性设为",(0,r.jsx)(n.code,{children:"true"}),"，才可以展开。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let obj = {length: 2, 0: 'c', 1: 'd'};\n['a', 'b'].concat(obj, 'e') // ['a', 'b', obj, 'e']\n\nobj[Symbol.isConcatSpreadable] = true;\n['a', 'b'].concat(obj, 'e') // ['a', 'b', 'c', 'd', 'e']\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Symbol.isConcatSpreadable"}),"属性也可以定义在类里面。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class A1 extends Array {\n  constructor(args) {\n    super(args);\n    this[Symbol.isConcatSpreadable] = true;\n  }\n}\nclass A2 extends Array {\n  constructor(args) {\n    super(args);\n  }\n  get [Symbol.isConcatSpreadable] () {\n    return false;\n  }\n}\nlet a1 = new A1();\na1[0] = 3;\na1[1] = 4;\nlet a2 = new A2();\na2[0] = 5;\na2[1] = 6;\n[1, 2].concat(a1).concat(a2)\n// [1, 2, 3, 4, [5, 6]]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，类",(0,r.jsx)(n.code,{children:"A1"}),"是可展开的，类",(0,r.jsx)(n.code,{children:"A2"}),"是不可展开的，所以使用",(0,r.jsx)(n.code,{children:"concat"}),"时有不一样的结果。"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，",(0,r.jsx)(n.code,{children:"Symbol.isConcatSpreadable"}),"的位置差异，",(0,r.jsx)(n.code,{children:"A1"}),"是定义在实例上，",(0,r.jsx)(n.code,{children:"A2"}),"是定义在类本身，效果相同。"]}),"\n",(0,r.jsxs)(n.h3,{id:"symbolspecies",children:["Symbol.species",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symbolspecies",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.species"}),"属性，指向一个构造函数。创建衍生对象时，会使用该属性。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class MyArray extends Array {\n}\n\nconst a = new MyArray(1, 2, 3);\nconst b = a.map(x => x);\nconst c = a.filter(x => x > 1);\n\nb instanceof MyArray // true\nc instanceof MyArray // true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，子类",(0,r.jsx)(n.code,{children:"MyArray"}),"继承了父类",(0,r.jsx)(n.code,{children:"Array"}),"，",(0,r.jsx)(n.code,{children:"a"}),"是",(0,r.jsx)(n.code,{children:"MyArray"}),"的实例，",(0,r.jsx)(n.code,{children:"b"}),"和",(0,r.jsx)(n.code,{children:"c"}),"是",(0,r.jsx)(n.code,{children:"a"}),"的衍生对象。你可能会认为，",(0,r.jsx)(n.code,{children:"b"}),"和",(0,r.jsx)(n.code,{children:"c"}),"都是调用数组方法生成的，所以应该是数组（",(0,r.jsx)(n.code,{children:"Array"}),"的实例），但实际上它们也是",(0,r.jsx)(n.code,{children:"MyArray"}),"的实例。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Symbol.species"}),"属性就是为了解决这个问题而提供的。现在，我们可以为",(0,r.jsx)(n.code,{children:"MyArray"}),"设置",(0,r.jsx)(n.code,{children:"Symbol.species"}),"属性。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class MyArray extends Array {\n  static get [Symbol.species]() { return Array; }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，由于定义了",(0,r.jsx)(n.code,{children:"Symbol.species"}),"属性，创建衍生对象时就会使用这个属性返回的函数，作为构造函数。这个例子也说明，定义",(0,r.jsx)(n.code,{children:"Symbol.species"}),"属性要采用",(0,r.jsx)(n.code,{children:"get"}),"取值器。默认的",(0,r.jsx)(n.code,{children:"Symbol.species"}),"属性等同于下面的写法。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"static get [Symbol.species]() {\n  return this;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"现在，再来看前面的例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class MyArray extends Array {\n  static get [Symbol.species]() { return Array; }\n}\n\nconst a = new MyArray();\nconst b = a.map(x => x);\n\nb instanceof MyArray // false\nb instanceof Array // true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"a.map(x => x)"}),"生成的衍生对象，就不是",(0,r.jsx)(n.code,{children:"MyArray"}),"的实例，而直接就是",(0,r.jsx)(n.code,{children:"Array"}),"的实例。"]}),"\n",(0,r.jsx)(n.p,{children:"再看一个例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class T1 extends Promise {\n}\n\nclass T2 extends Promise {\n  static get [Symbol.species]() {\n    return Promise;\n  }\n}\n\nnew T1(r => r()).then(v => v) instanceof T1 // true\nnew T2(r => r()).then(v => v) instanceof T2 // false\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"T2"}),"定义了",(0,r.jsx)(n.code,{children:"Symbol.species"}),"属性，",(0,r.jsx)(n.code,{children:"T1"}),"没有。结果就导致了创建衍生对象时（",(0,r.jsx)(n.code,{children:"then"}),"方法），",(0,r.jsx)(n.code,{children:"T1"}),"调用的是自身的构造方法，而",(0,r.jsx)(n.code,{children:"T2"}),"调用的是",(0,r.jsx)(n.code,{children:"Promise"}),"的构造方法。"]}),"\n",(0,r.jsxs)(n.p,{children:["总之，",(0,r.jsx)(n.code,{children:"Symbol.species"}),"的作用在于，实例对象在运行过程中，需要再次调用自身的构造函数时，会调用该属性指定的构造函数。它主要的用途是，有些类库是在基类的基础上修改的，那么子类使用继承的方法时，作者可能希望返回基类的实例，而不是子类的实例。"]}),"\n",(0,r.jsxs)(n.h3,{id:"symbolmatch",children:["Symbol.match",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symbolmatch",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.match"}),"属性，指向一个函数。当执行",(0,r.jsx)(n.code,{children:"str.match(myObject)"}),"时，如果该属性存在，会调用它，返回该方法的返回值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"String.prototype.match(regexp)\n// 等同于\nregexp[Symbol.match](this)\n\nclass MyMatcher {\n  [Symbol.match](string) {\n    return 'hello world'.indexOf(string);\n  }\n}\n\n'e'.match(new MyMatcher()) // 1\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"symbolreplace",children:["Symbol.replace",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symbolreplace",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.replace"}),"属性，指向一个方法，当该对象被",(0,r.jsx)(n.code,{children:"String.prototype.replace"}),"方法调用时，会返回该方法的返回值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"String.prototype.replace(searchValue, replaceValue)\n// 等同于\nsearchValue[Symbol.replace](this, replaceValue)\n"})}),"\n",(0,r.jsx)(n.p,{children:"下面是一个例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const x = {};\nx[Symbol.replace] = (...s) => console.log(s);\n\n'Hello'.replace(x, 'World') // [\"Hello\", \"World\"]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Symbol.replace"}),"方法会收到两个参数，第一个参数是",(0,r.jsx)(n.code,{children:"replace"}),"方法正在作用的对象，上面例子是",(0,r.jsx)(n.code,{children:"Hello"}),"，第二个参数是替换后的值，上面例子是",(0,r.jsx)(n.code,{children:"World"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"symbolsearch",children:["Symbol.search",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symbolsearch",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.search"}),"属性，指向一个方法，当该对象被",(0,r.jsx)(n.code,{children:"String.prototype.search"}),"方法调用时，会返回该方法的返回值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"String.prototype.search(regexp)\n// 等同于\nregexp[Symbol.search](this)\n\nclass MySearch {\n  constructor(value) {\n    this.value = value;\n  }\n  [Symbol.search](string) {\n    return string.indexOf(this.value);\n  }\n}\n'foobar'.search(new MySearch('foo')) // 0\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"symbolsplit",children:["Symbol.split",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symbolsplit",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.split"}),"属性，指向一个方法，当该对象被",(0,r.jsx)(n.code,{children:"String.prototype.split"}),"方法调用时，会返回该方法的返回值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"String.prototype.split(separator, limit)\n// 等同于\nseparator[Symbol.split](this, limit)\n"})}),"\n",(0,r.jsx)(n.p,{children:"下面是一个例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class MySplitter {\n  constructor(value) {\n    this.value = value;\n  }\n  [Symbol.split](string) {\n    let index = string.indexOf(this.value);\n    if (index === -1) {\n      return string;\n    }\n    return [\n      string.substr(0, index),\n      string.substr(index + this.value.length)\n    ];\n  }\n}\n\n'foobar'.split(new MySplitter('foo'))\n// ['', 'bar']\n\n'foobar'.split(new MySplitter('bar'))\n// ['foo', '']\n\n'foobar'.split(new MySplitter('baz'))\n// 'foobar'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面方法使用",(0,r.jsx)(n.code,{children:"Symbol.split"}),"方法，重新定义了字符串对象的",(0,r.jsx)(n.code,{children:"split"}),"方法的行为，"]}),"\n",(0,r.jsxs)(n.h3,{id:"symboliterator",children:["Symbol.iterator",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symboliterator",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.iterator"}),"属性，指向该对象的默认遍历器方法。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["对象进行",(0,r.jsx)(n.code,{children:"for...of"}),"循环时，会调用",(0,r.jsx)(n.code,{children:"Symbol.iterator"}),"方法，返回该对象的默认遍历器，详细介绍参见《Iterator 和 for...of 循环》一章。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Collection {\n  *[Symbol.iterator]() {\n    let i = 0;\n    while(this[i] !== undefined) {\n      yield this[i];\n      ++i;\n    }\n  }\n}\n\nlet myCollection = new Collection();\nmyCollection[0] = 1;\nmyCollection[1] = 2;\n\nfor(let value of myCollection) {\n  console.log(value);\n}\n// 1\n// 2\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"symboltoprimitive",children:["Symbol.toPrimitive",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symboltoprimitive",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.toPrimitive"}),"属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Symbol.toPrimitive"}),"被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Number：该场合需要转成数值"}),"\n",(0,r.jsx)(n.li,{children:"String：该场合需要转成字符串"}),"\n",(0,r.jsx)(n.li,{children:"Default：该场合可以转成数值，也可以转成字符串"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let obj = {\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return 123;\n      case 'string':\n        return 'str';\n      case 'default':\n        return 'default';\n      default:\n        throw new Error();\n     }\n   }\n};\n\n2 * obj // 246\n3 + obj // '3default'\nobj == 'default' // true\nString(obj) // 'str'\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"symboltostringtag",children:["Symbol.toStringTag",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symboltostringtag",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.toStringTag"}),"属性，用来设定一个字符串（设为其他类型的值无效，但不报错）。在目标对象上面调用",(0,r.jsx)(n.code,{children:"Object.prototype.toString()"}),"方法时，如果",(0,r.jsx)(n.code,{children:"Symbol.toStringTag"}),"属性存在，该属性设定的字符串会出现在",(0,r.jsx)(n.code,{children:"toString()"}),"方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制",(0,r.jsx)(n.code,{children:"[object Object]"}),"或",(0,r.jsx)(n.code,{children:"[object Array]"}),"中",(0,r.jsx)(n.code,{children:"object"}),"后面的那个大写字符串。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// 例一\n({[Symbol.toStringTag]: 'Foo'}.toString())\n// \"[object Foo]\"\n\n// 例二\nclass Collection {\n  get [Symbol.toStringTag]() {\n    return 'xxx';\n  }\n}\nlet x = new Collection();\nObject.prototype.toString.call(x) // \"[object xxx]\"\n"})}),"\n",(0,r.jsxs)(n.p,{children:["ES6 新增内置对象的",(0,r.jsx)(n.code,{children:"Symbol.toStringTag"}),"属性值如下。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"JSON[Symbol.toStringTag]"}),"：'JSON'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Math[Symbol.toStringTag]"}),"：'Math'"]}),"\n",(0,r.jsxs)(n.li,{children:["Module 对象",(0,r.jsx)(n.code,{children:"M[Symbol.toStringTag]"}),"：'Module'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ArrayBuffer.prototype[Symbol.toStringTag]"}),"：'ArrayBuffer'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DataView.prototype[Symbol.toStringTag]"}),"：'DataView'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Map.prototype[Symbol.toStringTag]"}),"：'Map'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Promise.prototype[Symbol.toStringTag]"}),"：'Promise'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set.prototype[Symbol.toStringTag]"}),"：'Set'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"%TypedArray%.prototype[Symbol.toStringTag]"}),"：'Uint8Array'等"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WeakMap.prototype[Symbol.toStringTag]"}),"：'WeakMap'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WeakSet.prototype[Symbol.toStringTag]"}),"：'WeakSet'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"%MapIteratorPrototype%[Symbol.toStringTag]"}),"：'Map Iterator'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"%SetIteratorPrototype%[Symbol.toStringTag]"}),"：'Set Iterator'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"%StringIteratorPrototype%[Symbol.toStringTag]"}),"：'String Iterator'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Symbol.prototype[Symbol.toStringTag]"}),"：'Symbol'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Generator.prototype[Symbol.toStringTag]"}),"：'Generator'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GeneratorFunction.prototype[Symbol.toStringTag]"}),"：'GeneratorFunction'"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"symbolunscopables",children:["Symbol.unscopables",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#symbolunscopables",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对象的",(0,r.jsx)(n.code,{children:"Symbol.unscopables"}),"属性，指向一个对象。该对象指定了使用",(0,r.jsx)(n.code,{children:"with"}),"关键字时，哪些属性会被",(0,r.jsx)(n.code,{children:"with"}),"环境排除。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Array.prototype[Symbol.unscopables]\n// {\n//   copyWithin: true,\n//   entries: true,\n//   fill: true,\n//   find: true,\n// \xa0 findIndex: true,\n//   includes: true,\n//   keys: true\n// }\n\nObject.keys(Array.prototype[Symbol.unscopables])\n// ['copyWithin', 'entries', 'fill', 'find', 'findIndex', 'includes', 'keys']\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码说明，数组有 7 个属性，会被",(0,r.jsx)(n.code,{children:"with"}),"命令排除。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// 没有 unscopables 时\nclass MyClass {\n  foo() { return 1; }\n}\n\nvar foo = function () { return 2; };\n\nwith (MyClass.prototype) {\n  foo(); // 1\n}\n\n// 有 unscopables 时\nclass MyClass {\n  foo() { return 1; }\n  get [Symbol.unscopables]() {\n    return { foo: true };\n  }\n}\n\nvar foo = function () { return 2; };\n\nwith (MyClass.prototype) {\n  foo(); // 2\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码通过指定",(0,r.jsx)(n.code,{children:"Symbol.unscopables"}),"属性，使得",(0,r.jsx)(n.code,{children:"with"}),"语法块不会在当前作用域寻找",(0,r.jsx)(n.code,{children:"foo"}),"属性，即",(0,r.jsx)(n.code,{children:"foo"}),"将指向外层作用域的变量。"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}let i=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F13.Symbol.md"]={toc:[{text:"概述",id:"概述",depth:2},{text:"Symbol.prototype.description",id:"symbolprototypedescription",depth:2},{text:"作为属性名的 Symbol",id:"作为属性名的-symbol",depth:2},{text:"实例：消除魔术字符串",id:"实例消除魔术字符串",depth:2},{text:"属性名的遍历",id:"属性名的遍历",depth:2},{text:"Symbol.for()，Symbol.keyFor()",id:"symbolforsymbolkeyfor",depth:2},{text:"实例：模块的 Singleton 模式",id:"实例模块的-singleton-模式",depth:2},{text:"内置的 Symbol 值",id:"内置的-symbol-值",depth:2},{text:"Symbol.hasInstance",id:"symbolhasinstance",depth:3},{text:"Symbol.isConcatSpreadable",id:"symbolisconcatspreadable",depth:3},{text:"Symbol.species",id:"symbolspecies",depth:3},{text:"Symbol.match",id:"symbolmatch",depth:3},{text:"Symbol.replace",id:"symbolreplace",depth:3},{text:"Symbol.search",id:"symbolsearch",depth:3},{text:"Symbol.split",id:"symbolsplit",depth:3},{text:"Symbol.iterator",id:"symboliterator",depth:3},{text:"Symbol.toPrimitive",id:"symboltoprimitive",depth:3},{text:"Symbol.toStringTag",id:"symboltostringtag",depth:3},{text:"Symbol.unscopables",id:"symbolunscopables",depth:3}],title:"13.Symbol",headingTitle:"13.Symbol",frontmatter:{}}}}]);