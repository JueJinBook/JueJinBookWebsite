"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["9396"],{133295:function(e,n,t){t.r(n),t.d(n,{default:()=>l});var s=t(552676),c=t(740453);let d=t.p+"static/image/deadc5940682bffd61ebd174a379a277.5fd42093.webp",r=t.p+"static/image/cdafa9337a7eb74eed06572ed1bb05fd.03e5b898.webp";function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",img:"img",strong:"strong",ul:"ul",li:"li",pre:"pre",h3:"h3"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"23react-常考基础知识点",children:["23.React 常考基础知识点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23react-常考基础知识点",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这一章节我们将来学习 React 的一些经常考到的基础知识点。"}),"\n",(0,s.jsxs)(n.h2,{id:"生命周期",children:["生命周期",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#生命周期",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 V16 版本中引入了 Fiber 机制。这个机制一定程度上的影响了部分生命周期的调用，并且也引入了新的 2 个 API 来解决问题，关于 Fiber 的内容将会在下一章节中讲到。"}),"\n",(0,s.jsxs)(n.p,{children:["在之前的版本中，如果你拥有一个很复杂的复合组件，然后改动了最上层组件的 ",(0,s.jsx)(n.code,{children:"state"}),"，那么调用栈可能会很长"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"调用栈过长，再加上中间进行了复杂的操作，就可能导致长时间阻塞主线程，带来不好的用户体验。Fiber 就是为了解决该问题而生。"}),"\n",(0,s.jsx)(n.p,{children:"Fiber 本质上是一个虚拟的堆栈帧，新的调度器会按照优先级自由调度这些帧，从而将之前的同步渲染改成了异步渲染，在不影响体验的情况下去分段计算更新。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"对于如何区别优先级，React 有自己的一套逻辑。对于动画这种实时性很高的东西，也就是 16 ms 必须渲染一次保证不卡顿的情况下，React 会每 16 ms（以内） 暂停一下更新，返回来继续渲染动画。"}),"\n",(0,s.jsxs)(n.p,{children:["对于异步渲染，现在渲染有两个阶段：",(0,s.jsx)(n.code,{children:"reconciliation"})," 和 ",(0,s.jsx)(n.code,{children:"commit"})," 。前者过程是可以打断的，后者不能暂停，会一直更新界面直到完成。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Reconciliation"})," 阶段"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"componentWillMount"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"componentWillReceiveProps"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shouldComponentUpdate"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"componentWillUpdate"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Commit"})," 阶段"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"componentDidMount"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"componentDidUpdate"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"componentWillUnmount"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["因为 Reconciliation 阶段是可以被打断的，所以 Reconciliation 阶段会执行的生命周期函数就可能会出现调用多次的情况，从而引起 Bug。由此对于 Reconciliation 阶段调用的几个函数，除了 ",(0,s.jsx)(n.code,{children:"shouldComponentUpdate"})," 以外，其他都应该避免去使用，并且 V16 中也引入了新的 API 来解决这个问题。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getDerivedStateFromProps"})," 用于替换 ",(0,s.jsx)(n.code,{children:"componentWillReceiveProps"})," ，该函数会在初始化和 ",(0,s.jsx)(n.code,{children:"update"})," 时被调用"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class ExampleComponent extends React.Component {\n  // Initialize state in constructor,\n  // Or with a property initializer.\n  state = {};\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.someMirroredValue !== nextProps.someValue) {\n      return {\n        derivedData: computeDerivedState(nextProps),\n        someMirroredValue: nextProps.someValue\n      };\n    }\n\n    // Return null to indicate no change to state.\n    return null;\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getSnapshotBeforeUpdate"})," 用于替换 ",(0,s.jsx)(n.code,{children:"componentWillUpdate"})," ，该函数会在 ",(0,s.jsx)(n.code,{children:"update"})," 后 DOM 更新前被调用，用于读取最新的 DOM 数据。"]}),"\n",(0,s.jsxs)(n.h2,{id:"setstate",children:["setState",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#setstate",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"setState"})," 在 React 中是经常使用的一个 API，但是它存在一些的问题经常会导致初学者出错，核心原因就是因为这个 API 是异步的。"]}),"\n",(0,s.jsxs)(n.p,{children:["首先 ",(0,s.jsx)(n.code,{children:"setState"})," 的调用并不会马上引起 ",(0,s.jsx)(n.code,{children:"state"})," 的改变，并且如果你一次调用了多个 ",(0,s.jsx)(n.code,{children:"setState"})," ，那么结果可能并不如你期待的一样。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"handle() {\n  // 初始化 `count` 为 0\n  console.log(this.state.count) // -> 0\n  this.setState({ count: this.state.count + 1 })\n  this.setState({ count: this.state.count + 1 })\n  this.setState({ count: this.state.count + 1 })\n  console.log(this.state.count) // -> 0\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["第一，两次的打印都为 0，因为 ",(0,s.jsx)(n.code,{children:"setState"})," 是个异步 API，只有同步代码运行完毕才会执行。",(0,s.jsx)(n.code,{children:"setState"})," 异步的原因我认为在于，",(0,s.jsx)(n.code,{children:"setState"})," 可能会导致 DOM 的重绘，如果调用一次就马上去进行重绘，那么调用多次就会造成不必要的性能损失。设计成异步的话，就可以将多次调用放入一个队列中，在恰当的时候统一进行更新过程。"]}),"\n",(0,s.jsxs)(n.p,{children:["第二，虽然调用了三次 ",(0,s.jsx)(n.code,{children:"setState"})," ，但是 ",(0,s.jsx)(n.code,{children:"count"})," 的值还是为 1。因为多次调用会合并为一次，只有当更新结束后 ",(0,s.jsx)(n.code,{children:"state"})," 才会改变，三次调用等同于如下代码"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"Object.assign(  \n  {},\n  { count: this.state.count + 1 },\n  { count: this.state.count + 1 },\n  { count: this.state.count + 1 },\n)w\n"})}),"\n",(0,s.jsxs)(n.p,{children:["当然你也可以通过以下方式来实现调用三次 ",(0,s.jsx)(n.code,{children:"setState"})," 使得 ",(0,s.jsx)(n.code,{children:"count"})," 为 3"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"handle() {\n  this.setState((prevState) => ({ count: prevState.count + 1 }))\n  this.setState((prevState) => ({ count: prevState.count + 1 }))\n  this.setState((prevState) => ({ count: prevState.count + 1 }))\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果你想在每次调用 ",(0,s.jsx)(n.code,{children:"setState"})," 后获得正确的 ",(0,s.jsx)(n.code,{children:"state"})," ，可以通过如下代码实现"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"handle() {\n    this.setState((prevState) => ({ count: prevState.count + 1 }), () => {\n        console.log(this.state)\n    })\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"性能优化",children:["性能优化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#性能优化",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["这小节内容集中在组件的性能优化上，这一方面的性能优化也基本集中在 ",(0,s.jsx)(n.code,{children:"shouldComponentUpdate"})," 这个钩子函数上做文章。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-!",children:"PS：下文中的 state 指代了 state 及 props\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"shouldComponentUpdate"})," 函数中我们可以通过返回布尔值来决定当前组件是否需要更新。这层代码逻辑可以是简单地浅比较一下当前 ",(0,s.jsx)(n.code,{children:"state"})," 和之前的 ",(0,s.jsx)(n.code,{children:"state"})," 是否相同，也可以是判断某个值更新了才触发组件更新。一般来说不推荐完整地对比当前 ",(0,s.jsx)(n.code,{children:"state"})," 和之前的 ",(0,s.jsx)(n.code,{children:"state"})," 是否相同，因为组件更新触发可能会很频繁，这样的完整对比性能开销会有点大，可能会造成得不偿失的情况。"]}),"\n",(0,s.jsxs)(n.p,{children:["当然如果真的想完整对比当前 ",(0,s.jsx)(n.code,{children:"state"})," 和之前的 ",(0,s.jsx)(n.code,{children:"state"})," 是否相同，并且不影响性能也是行得通的，可以通过 immutable 或者 immer 这些库来生成不可变对象。这类库对于操作大规模的数据来说会提升不错的性能，并且一旦改变数据就会生成一个新的对象，对比前后 ",(0,s.jsx)(n.code,{children:"state"})," 是否一致也就方便多了，同时也很推荐阅读下 immer 的源码实现。"]}),"\n",(0,s.jsxs)(n.p,{children:["另外如果只是单纯的浅比较一下，可以直接使用 ",(0,s.jsx)(n.code,{children:"PureComponent"}),"，底层就是实现了浅比较 ",(0,s.jsx)(n.code,{children:"state"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class Test extends React.PureComponent {\n  render() {\n    return (\n      <div>\n        PureComponent\n      </div>\n    )\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这时候你可能会考虑到函数组件就不能使用这种方式了，如果你使用 16.6.0 之后的版本的话，可以使用 ",(0,s.jsx)(n.code,{children:"React.memo"})," 来实现相同的功能。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const Test = React.memo(() => (\n    <div>\n        PureComponent\n    </div>\n))\n"})}),"\n",(0,s.jsxs)(n.p,{children:["通过这种方式我们就可以既实现了 ",(0,s.jsx)(n.code,{children:"shouldComponentUpdate"})," 的浅比较，又能够使用函数组件。"]}),"\n",(0,s.jsxs)(n.h2,{id:"通信",children:["通信",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#通信",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"其实 React 中的组件通信基本和 Vue 中的一致。同样也分为以下三种情况："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"父子组件通信"}),"\n",(0,s.jsx)(n.li,{children:"兄弟组件通信"}),"\n",(0,s.jsx)(n.li,{children:"跨多层级组件通信"}),"\n",(0,s.jsx)(n.li,{children:"任意组件"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"父子通信",children:["父子通信",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#父子通信",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["父组件通过 ",(0,s.jsx)(n.code,{children:"props"})," 传递数据给子组件，子组件通过调用父组件传来的函数传递数据给父组件，这两种方式是最常用的父子通信实现办法。"]}),"\n",(0,s.jsxs)(n.p,{children:["这种父子通信方式也就是典型的单向数据流，父组件通过 ",(0,s.jsx)(n.code,{children:"props"})," 传递数据，子组件不能直接修改 ",(0,s.jsx)(n.code,{children:"props"}),"， 而是必须通过调用父组件函数的方式告知父组件修改数据。"]}),"\n",(0,s.jsxs)(n.h3,{id:"兄弟组件通信",children:["兄弟组件通信",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#兄弟组件通信",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于这种情况可以通过共同的父组件来管理状态和事件函数。比如说其中一个兄弟组件调用父组件传递过来的事件函数修改父组件中的状态，然后父组件将状态传递给另一个兄弟组件。"}),"\n",(0,s.jsxs)(n.h3,{id:"跨多层次组件通信",children:["跨多层次组件通信",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#跨多层次组件通信",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"如果你使用 16.3 以上版本的话，对于这种情况可以使用 Context API。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 创建 Context，可以在开始就传入值\nconst StateContext = React.createContext()\nclass Parent extends React.Component {\n  render () {\n    return (\n      // value 就是传入 Context 中的值\n      <StateContext.Provider value='yck'>\n        <Child />\n      </StateContext.Provider>\n    )\n  }\n}\nclass Child extends React.Component {\n  render () {\n    return (\n      <ThemeContext.Consumer>\n        // 取出值\n        {context => (\n          name is { context }\n        )}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"任意组件",children:["任意组件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#任意组件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这种方式可以通过 Redux 或者 Event Bus 解决，另外如果你不怕麻烦的话，可以使用这种方式解决上述所有的通信情况"}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"总的来说这一章节的内容更多的偏向于 React 的基础，另外 React 的面试题还会经常考到 Virtual DOM 中的内容，所以这块内容大家也需要好好准备。"}),"\n",(0,s.jsx)(n.p,{children:"下一章节我们将来了解一些 React 的进阶知识内容。"})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%2F23.React%20%E5%B8%B8%E8%80%83%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9.md"]={toc:[{text:"生命周期",id:"生命周期",depth:2},{text:"setState",id:"setstate",depth:2},{text:"性能优化",id:"性能优化",depth:2},{text:"通信",id:"通信",depth:2},{text:"父子通信",id:"父子通信",depth:3},{text:"兄弟组件通信",id:"兄弟组件通信",depth:3},{text:"跨多层次组件通信",id:"跨多层次组件通信",depth:3},{text:"任意组件",id:"任意组件",depth:3},{text:"小结",id:"小结",depth:2}],title:"23.React 常考基础知识点",headingTitle:"23.React 常考基础知识点",frontmatter:{}}}}]);