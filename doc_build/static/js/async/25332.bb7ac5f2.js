"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["25332"],{452931:function(e,n,r){e.exports=r.p+"static/image/5d54ec371415f2cdfad0e3f3fa1914d4.afd4c925.webp"},39010:function(e,n,r){e.exports=r.p+"static/image/b16f959e3b546c63c0fcef13d400c788.7c734daa.webp"},556836:function(e,n,r){r.r(n),r.d(n,{default:()=>k});var t=r(552676),a=r(740453);let c=r.p+"static/image/1ff433dd6d0109cf851b5c3f76450f91.1d756001.webp",s=r.p+"static/image/bbbd6d5347072d389324b407c8199fe2.03fbd4d3.webp",i=r.p+"static/image/f469586d62bf70ccfb806e100ff34747.0e5991f6.webp",l=r.p+"static/image/29ea0ddb876865b77875b81aeb78ea21.ae9ce579.gif",d=r.p+"static/image/738cfd655ab24e11321c2fffd3e104fe.ac483950.webp",p=r.p+"static/image/cdf3a7e0704d87aa88268b293b9b0aed.a78fe8c8.webp",o=r.p+"static/image/f4afe6db68ef1bbf0d8fe10f20125c9f.5ccd8645.webp",h=r.p+"static/image/c157978a6f5e081cbe7b5b9598aa7560.90195987.webp",m=r.p+"static/image/f0f570efaf8b8ae1c9937d0218d5b7e8.8b2efb45.webp";var x=r(39010),b=r(452931);let j=r.p+"static/image/05199b10ce675c163f8881f3d489c1c8.ab5a8c6f.webp",f=r.p+"static/image/f8f80b1897dfaa81fa3da249be89f4e4.077fd8e3.webp",u=r.p+"static/image/a63b0b00d952de461450b06260944735.1ec23349.webp",g=r.p+"static/image/96c70897dc547dc1ee722a8b10afefc9.e9b71df0.webp",v=r.p+"static/image/7819090ea65ff428c654379add2e0c59.3f176389.webp",E=r.p+"static/image/65069aa545abef0c21ee688b29c15eb3.64c92d21.webp",w=r.p+"static/image/eb76438deb6c1b6f235afd62ab2886f1.9d83f88a.webp",R=r.p+"static/image/c4de19258d95b1b6330c58045cf5d46d.bf7521fc.gif",y=r.p+"static/image/02d6cc9c1da8c51d13ec5e40b38a7a9b.c3343ea2.webp";function A(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"第53章reactplayground项目实战需求分析实现原理",children:["第53章—ReactPlayground项目实战：需求分析、实现原理",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第53章reactplayground项目实战需求分析实现原理",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"\uFEFF这节我们开始做一个实战项目：React Playground。"}),"\n",(0,t.jsxs)(n.p,{children:["类似 ",(0,t.jsx)(n.a,{href:"https://play.vuejs.org/",target:"_blank",rel:"noopener noreferrer",children:"vue 的 playground"}),"："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"左边写代码，右边实时预览。"}),"\n",(0,t.jsx)(n.p,{children:"右边还可以看到编译后的代码："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:R,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"先来分析下实现思路。"}),"\n",(0,t.jsx)(n.p,{children:"首先是编译："}),"\n",(0,t.jsxs)(n.p,{children:["编译用的 ",(0,t.jsx)(n.a,{href:"https://babeljs.io/docs/babel-standalone",target:"_blank",rel:"noopener noreferrer",children:"@babel/standalone"}),"，这个是 babel 的浏览器版本。"]}),"\n",(0,t.jsx)(n.p,{children:"可以用它实时把 tsx 代码编译为 js。"}),"\n",(0,t.jsx)(n.p,{children:"试一下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"npx create-vite\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:w,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"进入项目安装 @babel/standalone 和它的 ts 类型："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install\nnpm i --save @babel/standalone\nnpm i --save-dev @types/babel__standalone\n"})}),"\n",(0,t.jsx)(n.p,{children:"去掉 index.css 和 StrictMode："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:E,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"改下 App.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { useRef, useState } from 'react'\nimport { transform } from '@babel/standalone';\n\nfunction App() {\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  function onClick() {\n    if(!textareaRef.current) {\n      return ;\n    }\n\n    const res = transform(textareaRef.current.value, {\n      presets: ['react', 'typescript'],\n      filename: 'guang.tsx'\n    });\n    console.log(res.code);\n  }\n\n  const code = `import { useEffect, useState } from \"react\";\n\n  function App() {\n    const [num, setNum] = useState(() => {\n      const num1 = 1 + 2;\n      const num2 = 2 + 3;\n      return num1 + num2\n    });\n  \n    return (\n      <div onClick={() => setNum((prevNum) => prevNum + 1)}>{num}</div>\n    );\n  }\n  \n  export default App;\n  `\n  return (\n    <div>\n      <textarea ref={textareaRef} style={{ width: '500px', height: '300px'}} defaultValue={code}></textarea>\n      <button onClick={onClick}>编译</button>\n    </div>\n  )\n}\n\nexport default App\n"})}),"\n",(0,t.jsx)(n.p,{children:"在 textarea 输入内容，设置默认值 defaultValue，用 useRef 获取它的 value。"}),"\n",(0,t.jsx)(n.p,{children:"然后点击编译按钮的时候，拿到内容用 babel.transform 编译，指定 typescript 和 react 的 preset。"}),"\n",(0,t.jsx)(n.p,{children:"打印 res.code。"}),"\n",(0,t.jsx)(n.p,{children:"可以看到，打印了编译后的代码："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"但现在编译后的代码也不能跑啊："}),"\n",(0,t.jsx)(n.p,{children:"主要是 import 语句这里："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"运行代码的时候，会引入 import 的模块，这时会找不到。"}),"\n",(0,t.jsx)(n.p,{children:"当然，我们可以像 vite 的 dev server 那样做一个根据 moduleId 返回编译后的模块内容的服务。"}),"\n",(0,t.jsx)(n.p,{children:"但这里是纯前端项目，显然不适合。"}),"\n",(0,t.jsx)(n.p,{children:"其实 import 的 url 可以用 blob url。"}),"\n",(0,t.jsx)(n.p,{children:"在 public 目录下添加 test.html："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n\n<script>\n    const code1 =`\n    function add(a, b) {\n        return a + b;\n    }\n    export { add };\n    `;\n\n    const url = URL.createObjectURL(new Blob([code1], { type: \'application/javascript\' }));\n    const code2 = `import { add } from "${url}";\n\n    console.log(add(2, 3));`;\n\n    const script = document.createElement(\'script\');\n    script.type="module";\n    script.textContent = code2;\n    document.body.appendChild(script);\n<\/script>\n</body>\n</html>\n'})}),"\n",(0,t.jsx)(n.p,{children:"浏览器访问下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这里用的就是 blob url："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们可以把一段 JS 代码，用 URL.createObjectURL 和 new Blob 的方式变为一个 url："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"URL.createObjectURL(new Blob([code], { type: 'application/javascript' }))\n"})}),"\n",(0,t.jsx)(n.p,{children:"那接下来的问题就简单了，左侧写的所有代码都是有文件名的。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们只需要根据文件名替换下 import 的 url 就好了。"}),"\n",(0,t.jsx)(n.p,{children:"比如 App.tsx 引入了 ./Aaa.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import Aaa from './Aaa.tsx';\n\nexport default function App() {\n    return <Aaa></Aaa>\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"我们维护拿到 Aaa.tsx 的内容，然后通过 Bob 和 URL.createObjectURL 的方式把 Aaa.tsx 内容变为一个 blob url，替换 import 的路径就好了。"}),"\n",(0,t.jsx)(n.p,{children:"这样就可以直接跑。"}),"\n",(0,t.jsx)(n.p,{children:"那怎么替换呢？"}),"\n",(0,t.jsx)(n.p,{children:"babel 插件呀。"}),"\n",(0,t.jsx)(n.p,{children:"babel 编译流程分为 parse、transform、generate 三个阶段。"}),"\n",(0,t.jsx)(n.p,{children:"babel 插件就是在 transform 的阶段增删改 AST 的："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["通过 ",(0,t.jsx)(n.a,{href:"https://astexplorer.net/#/gist/6f01ee950445813f623214fb2c7abba9/b45fffd5a735f829d15098efa4f860438c3a070e",target:"_blank",rel:"noopener noreferrer",children:"astexplorer.net"})," 看下对应的 AST："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"只要在对 ImportDeclaration 的 AST 做处理，把 source.value 替换为对应文件的 blob url 就行了。"}),"\n",(0,t.jsx)(n.p,{children:"比如这样写："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { transform } from '@babel/standalone';\nimport type { PluginObj } from '@babel/core';\n\nfunction App() {\n\n    const code1 =`\n    function add(a, b) {\n        return a + b;\n    }\n    export { add };\n    `;\n\n    const url = URL.createObjectURL(new Blob([code1], { type: 'application/javascript' }));\n\n    const transformImportSourcePlugin: PluginObj = {\n        visitor: {\n            ImportDeclaration(path) {\n                path.node.source.value = url;\n            }\n        },\n    }\n\n\n  const code = `import { add } from './add.ts'; console.log(add(2, 3));`\n\n  function onClick() {\n    const res = transform(code, {\n      presets: ['react', 'typescript'],\n      filename: 'guang.ts',\n      plugins: [transformImportSourcePlugin]\n    });\n    console.log(res.code);\n  }\n\n  return (\n    <div>\n      <button onClick={onClick}>编译</button>\n    </div>\n  )\n}\n\nexport default App\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里插件的类型用到了 @babel/core 包的类型，安装下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm i --save-dev @types/babel__core\n"})}),"\n",(0,t.jsx)(n.p,{children:"我们用 babel 插件的方式对 import 的 source 做了替换。"}),"\n",(0,t.jsx)(n.p,{children:"把 ImportDeclaration 的 soure 的值改为了 blob url。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样，浏览器里就能直接跑这段代码。"}),"\n",(0,t.jsx)(n.p,{children:"那如果是引入 react 和 react-dom 的包呢？这些也不是在左侧写的代码呀"}),"\n",(0,t.jsx)(n.p,{children:"这种可以用 import maps 的机制："}),"\n",(0,t.jsx)(n.p,{children:"在 public 下新建 test2.html"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    <script type="importmap">\n        {\n            "imports": {\n                "react": "https://esm.sh/react@18.2.0"\n            }\n        }\n    <\/script>\n    <script type="module">\n        import React from "react";\n\n        console.log(React);\n    <\/script>\n</body>\n</html>\n'})}),"\n",(0,t.jsx)(n.p,{children:"访问下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，import react 生效了。"}),"\n",(0,t.jsx)(n.p,{children:"为什么会生效呢？"}),"\n",(0,t.jsxs)(n.p,{children:["你访问下可以看到，",(0,t.jsx)(n.a,{href:"https://esm.sh/react@18.2.0",target:"_blank",rel:"noopener noreferrer",children:"返回的内容"}),"也是 import url 的方式："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["这里的 ",(0,t.jsx)(n.a,{href:"https://esm.sh",target:"_blank",rel:"noopener noreferrer",children:"esm.sh"})," 就是专门提供 esm 模块的 CDN 服务："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["这是它们做的 ",(0,t.jsx)(n.a,{href:"https://code.esm.sh/",target:"_blank",rel:"noopener noreferrer",children:"react playground"}),"："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样，如何引入编辑器里写的 ./Aaa.tsx 这种模块，如何引入 react、react-dom 这种模块我们就都清楚了。"}),"\n",(0,t.jsx)(n.p,{children:"分别用 Blob + URL.createBlobURL 和 import maps + esm.sh 来做。"}),"\n",(0,t.jsx)(n.p,{children:"那编辑器部分如何做呢？"}),"\n",(0,t.jsx)(n.p,{children:"这个用 @monaco-editor/react"}),"\n",(0,t.jsx)(n.p,{children:"安装下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install @monaco-editor/react\n"})}),"\n",(0,t.jsx)(n.p,{children:"试一下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import Editor from \'@monaco-editor/react\';\n\nfunction App() {\n\n    const code =`import { useEffect, useState } from "react";\n\nfunction App() {\n    const [num, setNum] = useState(() => {\n        const num1 = 1 + 2;\n        const num2 = 2 + 3;\n        return num1 + num2\n    });\n\n    return (\n        <div onClick={() => setNum((prevNum) => prevNum + 1)}>{num}</div>\n    );\n}\n\nexport default App;\n`;\n\n    return <Editor height="500px" defaultLanguage="javascript" defaultValue={code} />;\n}\n\nexport default App;\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["Editor 有很多",(0,t.jsx)(n.a,{href:"https://github.com/suren-atoyan/monaco-react?tab=readme-ov-file#editor",target:"_blank",rel:"noopener noreferrer",children:"参数"}),"，等用到的时候再展开看。"]}),"\n",(0,t.jsx)(n.p,{children:"接下来看下预览部分："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这部分就是 iframe，然后加一个通信机制，左边编辑器的结果，编译之后传到 iframe 里渲染就好了。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import React from 'react'\n\nimport iframeRaw from './iframe.html?raw';\n\nconst iframeUrl = URL.createObjectURL(new Blob([iframeRaw], { type: 'text/html' }));\n\nconst Preview: React.FC = () => {\n\n  return (\n    <iframe\n        src={iframeUrl}\n        style={{\n            width: '100%',\n            height: '100%',\n            padding: 0,\n            border: 'none'\n        }}\n    />\n  )\n}\n\nexport default Preview;\n"})}),"\n",(0,t.jsx)(n.p,{children:"iframe.html："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8"/>\n  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>\n  <title>Preview</title>\n  <style>\n    * {\n      padding: 0;\n      margin: 0;\n    }\n  </style>\n</head>\n<body>\n<script type="importmap">\n  {\n    "imports": {\n      "react": "https://esm.sh/react@18.2.0",\n      "react-dom/client": "https://esm.sh/react-dom@18.2.0"\n    }\n  }\n<\/script>\n<script>\n\n<\/script>\n<script type="module">\n  import React, {useState, useEffect} from \'react\';\n  import ReactDOM from \'react-dom/client\';\n\n  const App = () => {\n    return React.createElement(\'div\', null, \'aaa\');\n  };\n\n  window.addEventListener(\'load\', () => {\n    const root = document.getElementById(\'root\')\n    ReactDOM.createRoot(root).render(React.createElement(App, null))\n  })\n<\/script>\n\n<div id="root">\n  <div style="position:absolute;top: 0;left:0;width:100%;height:100%;display: flex;justify-content: center;align-items: center;">\n    Loading...\n  </div>\n</div>\n\n</body>\n</html>\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"这里路径后面加个 ?raw 是通过字符串引入（webpack 和 vite 都有这种功能），用 URL.createObjectURL + Blob 生成 blob url 设置到 iframe 的 src 就好了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"渲染的没问题："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样，我们只需要内容变了之后生成新的 blob url 就好了。"}),"\n",(0,t.jsx)(n.p,{children:"至此，从编辑器到编译到预览的流程就理清了。"}),"\n",(0,t.jsxs)(n.p,{children:["案例代码上传了",(0,t.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/playground-test",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"我们分析了下 react playground 的实现思路。"}),"\n",(0,t.jsx)(n.p,{children:"编辑器部分用 @monaco-editor/react 实现，然后用 @babel/standalone 在浏览器里编译。"}),"\n",(0,t.jsx)(n.p,{children:"编译过程中用自己写的 babel 插件实现 import 的 source 的修改，变为 URL.createObjectURL + Blob 生成的 blob url，把模块内容内联进去。"}),"\n",(0,t.jsxs)(n.p,{children:["对于 react、react-dom 这种包，用 import maps 配合 ",(0,t.jsx)(n.a,{href:"https://esm.sh/",target:"_blank",rel:"noopener noreferrer",children:"esm.sh"})," 网站来引入。"]}),"\n",(0,t.jsx)(n.p,{children:"然后用 iframe 预览生成的内容，url 同样是把内容内联到 src 里，生成 blob url。"}),"\n",(0,t.jsx)(n.p,{children:"这样，react playground 整个流程的思路就理清了。"})]})}function _(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(A,{...e})}):A(e)}let k=_;_.__RSPRESS_PAGE_META={},_.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC53%E7%AB%A0%E2%80%94ReactPlayground%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E3%80%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第53章—ReactPlayground项目实战：需求分析、实现原理",headingTitle:"第53章—ReactPlayground项目实战：需求分析、实现原理",frontmatter:{}}}}]);