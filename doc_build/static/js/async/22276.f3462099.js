"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["22276"],{762726:function(n,e,t){n.exports=t.p+"static/image/39005221d8ad2f047cb7702aedf9af8f.0834d1cb.webp"},190759:function(n,e,t){n.exports=t.p+"static/image/a5a1d1b377ed7fdaa8679609c0f83499.60d8bab5.gif"},690101:function(n,e,t){t.r(e),t.d(e,{default:()=>T});var a=t(552676),c=t(740453);let i=t.p+"static/image/92e3ae0bfdd7667edf9d78c82c5a8bcd.98f5c1ce.webp",s=t.p+"static/image/ecc240649ad3f742079ac9330566ff5b.e4b4f36f.webp",o=t.p+"static/image/99bf13de5fea80c0434f73cde6eee085.a13c0ffc.webp";var d=t(190759);let r=t.p+"static/image/03cbaa008cb8906d54eee8100a67c74f.67bd0198.webp",p=t.p+"static/image/f4c8c19002e72dd7b7a0738c17d55197.9106dff5.gif",l=t.p+"static/image/10c7277a2464f5ece5392a2c87903f74.e8732a5c.webp",g=t.p+"static/image/b84086ec1e7d1022641035edd61edd8a.2125ed82.webp",u=t.p+"static/image/68c7901a3a7ea567b78f4bfd808a3e93.febcbee5.gif",x=t.p+"static/image/9437f31bc7ae5fc9b401b746901c8505.f849f745.webp",h=t.p+"static/image/c45b143e63dca163166a182cec51c845.eeddde82.gif",m=t.p+"static/image/cdc6f84693cf504892489300c69af811.385c7b49.webp",j=t.p+"static/image/44dce9ac0bf816387d1f956962a0a0de.2133bdd0.gif",f=t.p+"static/image/b1a601fb75a8a92fbbb014728c0ef42f.74a65ab2.webp",b=t.p+"static/image/a15b9ae9f7b1e31c34f1798724d7fcf5.384e5016.gif",v=t.p+"static/image/c1f07c79b0de8a09b0cb3b1efbfe0493.1b4e28d3.webp",y=t.p+"static/image/2ee30e5ae984c47e0fc3b328af026f66.2f79b023.webp",N=t.p+"static/image/10b7c9ec24720e3f1c10ae38967ea16f.837ddffd.webp",w=t.p+"static/image/7fb8c0fbaa2cd6a35950fe5510a9ec05.cd5dadfa.webp",A=t.p+"static/image/cc05ebe29e6635e06f43d8b4cd301a46.53743920.webp",E=t.p+"static/image/b022ed24639bf4dd68660c86183f9929.0fc0c692.webp",C=t.p+"static/image/17cedcd4c296dba96f89d7eab45cd5af.a28a467a.webp",k=t.p+"static/image/2261fff580057c5970a49dd60bbde76d.a9ec8e93.webp",_=t.p+"static/image/7d9c66ef3b5f01fdf952cd62a966649a.688607bf.webp",q=t.p+"static/image/4ca80f6f47a862f77ccbd3f695c2f6dc.fbe12c8e.webp",O=t.p+"static/image/8a021f3ff46ddc33712b806929e8338c.d3b87c10.webp",F=t.p+"static/image/8917ed55bdefd308aa98397db1f83aae.a49df4d6.webp",R=t.p+"static/image/6813a1c373b4d5425941cd7afdb90a65.e5fbc5a2.webp",P=t.p+"static/image/646cb086d50e1eafda36f6be5b23cbc2.4373d5b7.webp";var S=t(762726);function G(n){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,c.ah)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"第83章reactflow振荡器调音合成声音",children:["第83章—ReactFlow振荡器调音：合成声音",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第83章reactflow振荡器调音合成声音",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"\uFEFF这节来写音频部分，通过流程图设置参数，然后生成声音。"}),"\n",(0,a.jsx)(e.p,{children:"我们先用一下 AudioContext 的 api。"}),"\n",(0,a.jsx)(e.p,{children:"创建 audio.ts"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const context = new AudioContext();\n\nconst osc = context.createOscillator();\nosc.frequency.value = 220;\nosc.type = 'square';\nosc.start();\n\nconst volume = context.createGain();\nvolume.gain.value = 0.5;\n\nconst out = context.destination;\n\nosc.connect(volume);\nvolume.connect(out);\n"})}),"\n",(0,a.jsx)(e.p,{children:"创建一个 Oscillator 节点，一个 Gain 节点，和 destination 节点连接起来："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:S,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"Oscillator 振荡器节点产生不同波形、频率的声音，Gain 节点调节音量，然后 destination 节点播放声音。"}),"\n",(0,a.jsx)(e.p,{children:"在 main.ts 里引入下："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:P,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"这时候你在页面上就能听到声音了。"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://lf-activity-static.juejin.cn/obj/juejin-activity-static/user_book/2788017216685118_1724930888896_3064.mp3",target:"_blank",rel:"noopener noreferrer",children:"jaudio"})}),"\n",(0,a.jsx)(e.p,{children:"有 connect 当然也有 disconnect："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:R,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"断开节点的连接就没声音了。"}),"\n",(0,a.jsx)(e.p,{children:"connect、disconnect 在流程图上就是 edge 的创建和删除。"}),"\n",(0,a.jsx)(e.p,{children:"所以很容易把两者结合起来。"}),"\n",(0,a.jsx)(e.p,{children:"而且你可以用两个振荡器节点 connect 到一个 destination"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:q,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"对应的代码就是这样："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:F,alt:"image.png"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const context = new AudioContext();\n\nconst osc = context.createOscillator();\nosc.frequency.value = 220;\nosc.type = 'square';\nosc.start();\n\nconst volume = context.createGain();\nvolume.gain.value = 0.5;\n\nconst out = context.destination;\n\nosc.connect(volume);\nvolume.connect(out);\n\nconst osc2 = context.createOscillator();\nosc2.frequency.value = 800;\nosc2.type = 'sine';\nosc2.start();\n\nconst volume2 = context.createGain();\nvolume2.gain.value = 0.5;\n\nosc2.connect(volume2);\nvolume2.connect(out);\n"})}),"\n",(0,a.jsx)(e.p,{children:"两个振荡器分别设置不同的波形、频率，产生不同的声音。"}),"\n",(0,a.jsx)(e.p,{children:"你可以听一下，声音是不是两者的合并："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://lf-activity-static.juejin.cn/obj/juejin-activity-static/user_book/2788017216685118_1724934947163_9470.mp3",target:"_blank",rel:"noopener noreferrer",children:"jaudio"})}),"\n",(0,a.jsx)(e.p,{children:"对比听下之前的："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://lf-activity-static.juejin.cn/obj/juejin-activity-static/user_book/2788017216685118_1724930888896_3064.mp3",target:"_blank",rel:"noopener noreferrer",children:"jaudio"})}),"\n",(0,a.jsx)(e.p,{children:"对应到流程图就是这样的："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:O,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"接下来我们就来实现流程图操作到 audio 的对应。"}),"\n",(0,a.jsx)(e.p,{children:"改下 Audio.tsx"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const context = new AudioContext();\n\nconst osc = context.createOscillator();\nosc.frequency.value = 220;\nosc.type = 'square';\nosc.start();\n\nconst volume = context.createGain();\nvolume.gain.value = 0.5;\n\nconst out = context.destination;\n\nconst nodes = new Map();\n\nnodes.set('a', osc);\nnodes.set('b', volume);\nnodes.set('c', out);\n\nexport function isRunning() {\n  return context.state === 'running';\n}\n\nexport function toggleAudio() {\n  return isRunning() ? context.suspend() : context.resume();\n}\n\nexport function updateAudioNode(id: string, data: Record<string, any>) {\n    const node = nodes.get(id);\n  \n    for (const [key, val] of Object.entries(data)) {\n      if (node[key] instanceof AudioParam) {\n        node[key].value = val;\n      } else {\n        node[key] = val;\n      }\n    }\n}\n\nexport function removeAudioNode(id: string) {\n    const node = nodes.get(id);\n  \n    node.disconnect();\n    node.stop?.();\n  \n    nodes.delete(id);\n}\n\nexport function connect(sourceId: string, targetId: string) {\n    const source = nodes.get(sourceId);\n    const target = nodes.get(targetId);\n  \n    source.connect(target);\n}\n\nexport function disconnect(sourceId: string, targetId: string) {\n    const source = nodes.get(sourceId);\n    const target = nodes.get(targetId);\n    source.disconnect(target);\n}\n\n\nexport function createAudioNode(id: string, type: string, data: Record<string, any>) {\n  switch (type) {\n    case 'osc': {\n      const node = context.createOscillator();\n      node.frequency.value = data.frequency;\n      node.type = data.type;\n      node.start();\n\n      nodes.set(id, node);\n      break;\n    }\n\n    case 'volume': {\n      const node = context.createGain();\n      node.gain.value = data.gain;\n\n      nodes.set(id, node);\n      break;\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"从上往下看："}),"\n",(0,a.jsx)(e.p,{children:"因为可能有多个振荡器节点、音量节点，所以用一个 Map 来存储，key 是流程图节点 id："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:q,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"首先，内置 3 个节点："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:_,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"然后暴露了一个 createAudioNode 的方法来创建两种节点（destination 节点只有一个）："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:k,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"创建完加到 Map 里。"}),"\n",(0,a.jsx)(e.p,{children:"然后提供两个 Audio 节点的连接和断开连接的方法："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:C,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"这就是我们用流程图节点 id 来作为 Map 的 key 的好处，可以直接把流程图节点的操作对应到 Audio 节点。"}),"\n",(0,a.jsx)(e.p,{children:"然后暴露一个删除 Audio 节点的方法："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:E,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"首先 disconnect 所有的连接，然后 stop 这个 Audio 节点，之后从 map 中删除它。"}),"\n",(0,a.jsx)(e.p,{children:"然后是更新参数的方法："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:A,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"两种流程图节点中的参数修改，就通过这个方法更新到 Audio 节点"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:w,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"最后暴露一个暂停、修复声音播放的方法："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:N,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"总结一下，就是用一个 Map 保存所有的 Audio 节点，key 为对应流程图节点的 id，然后暴露创建节点、节点连接、删除节点、更新节点参数，暂停、恢复播放的方法。"}),"\n",(0,a.jsx)(e.p,{children:"之后就可以把节点的 onNodeChanges、onEdgeChanges、onConnect 事件对应到这些 更新 audio 节点的方法了。"}),"\n",(0,a.jsx)(e.p,{children:"改下 App.tsx"}),"\n",(0,a.jsx)(e.p,{children:"初始有 a、b、c 三个节点："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:y,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"没有边。"}),"\n",(0,a.jsx)(e.p,{children:"流程图节点 connect 的时候，顺便也把对应的 Audio 节点 connect："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const initialNodes: Node[] =  [\n  {\n      id: 'a',\n      type: 'osc',\n      data: { frequency: 220, type: 'square' },\n      position: { x: 200, y: 0 }\n  },\n  { \n      id: 'b', \n      type: 'volume', \n      data: { gain: 0.5 },\n      position: { x: 150, y: 250 } \n  },\n  { \n      id: 'c',\n      type: 'out',\n      data: {},\n      position: { x: 350, y: 400 } \n  }\n];\n\nconst initialEdges:Edge[] = [];\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"connect(params.source, params.target);\n"})}),"\n",(0,a.jsx)(e.p,{children:"然后你再在界面上连下线："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:b,alt:"2024-08-29 21.13.32.gif"})}),"\n",(0,a.jsx)(e.p,{children:"连完 3 个节点，你会发现还是没声音。"}),"\n",(0,a.jsx)(e.p,{children:"因为默认是在 suspend 状态，需要 resume 一下："}),"\n",(0,a.jsx)(e.p,{children:"我们在 OutputNode 点击喇叭的时候调用下 toogleAudio 来切换状态："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"这样点击喇叭就有声音了："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:j,alt:"2024-08-29 21.51.05.gif"})}),"\n",(0,a.jsx)(e.p,{children:"再点击一次就会暂停。"}),"\n",(0,a.jsx)(e.p,{children:"然后再支持下参数的调整："}),"\n",(0,a.jsx)(e.p,{children:"在 onChange 的时候，修改 audio 节点的参数："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"import { Handle, Position } from '@xyflow/react';\nimport { updateAudioNode } from '../Audio';\nimport { ChangeEvent, ChangeEventHandler, useState } from 'react';\n\nexport interface VolumeNodeProps {\n  id: string\n  data: {\n    gain: number\n  }\n}\n\nexport function VolumeNode({ id, data }: VolumeNodeProps) {\n    const [gain, setGain] = useState(data.gain);\n\n    const changeGain: ChangeEventHandler<HTMLInputElement> = (e) => {\n        setGain(+e.target.value);\n        updateAudioNode(id, { gain: +e.target.value })\n    }\n\n    return (\n        <div className={'rounded-md bg-white shadow-xl'}>\n            <Handle type=\"target\" position={Position.Top} />\n\n            <p className={'rounded-t-md p-[4px] bg-blue-500 text-white'}>音量节点</p>\n            <div className={'flex flex-col p-[4px]'}>\n                <p>Gain</p>\n                <input\n                    className=\"nodrag\"\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                    value={gain}\n                    onChange={changeGain}\n                />\n                <p className={'text-right'}>{gain.toFixed(2)}</p>\n            </div>\n\n            <Handle type=\"source\" position={Position.Bottom} />\n        </div>\n    );\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"试一下："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:h,alt:"2024-08-30 08.06.37.gif"})}),"\n",(0,a.jsx)(e.p,{children:"拖动调整音量，你能听到声音大小的变化。"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://lf-activity-static.juejin.cn/obj/juejin-activity-static/user_book/2788017216685118_1724975765635_1230.mp3",target:"_blank",rel:"noopener noreferrer",children:"jaudio"})}),"\n",(0,a.jsx)(e.p,{children:"注意，这里加上了 nodrag："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"不加的话拖动进度条就变成了拖动节点："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:u,alt:"2024-08-30 07.56.40.gif"})}),"\n",(0,a.jsx)(e.p,{children:"这个是 react flow 提供的用于禁止拖动的 className："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"同样的方式处理下 OscillatorNode"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"import { Handle, Position, useReactFlow } from '@xyflow/react';\nimport { updateAudioNode } from '../Audio';\nimport { ChangeEvent, ChangeEventHandler, useState } from 'react';\n\nexport interface OscillatorNodeProps {\n  id: string\n  data: {\n    frequency: number\n    type: string\n  }\n}\n\nexport function OscillatorNode({ id, data }: OscillatorNodeProps) {\n    const [frequency, setFrequency] = useState(data.frequency);\n    const [type, setType] = useState(data.type);\n\n    const changeFrequency: ChangeEventHandler<HTMLInputElement> = (e) => {\n      setFrequency(+e.target.value);\n      updateAudioNode(id, { frequency: +e.target.value })\n    }\n\n    const changeType: ChangeEventHandler<HTMLSelectElement> = (e) => {\n      setType(e.target.value);\n      updateAudioNode(id, { type: e.target.value })\n    }\n\n    return (\n      <div className={'bg-white shadow-xl'}>\n          <p className={'rounded-t-md p-[8px] bg-pink-500 text-white'}>振荡器节点</p>\n          <div className={'flex flex-col p-[8px]'}>\n            <span>频率</span>\n            <input\n                className='nodrag'\n                type=\"range\"\n                min=\"10\"\n                max=\"1000\"\n                value={frequency}\n                onChange={changeFrequency}\n            />\n            <span className={'text-right'}>{frequency}赫兹</span>\n          </div>\n          <hr className={'mx-[4px]'} />\n          <div className={'flex flex-col p-[8px]'}>\n            <p>波形</p>\n            <select value={type} onChange={changeType}>\n              <option value=\"sine\">正弦波</option>\n              <option value=\"triangle\">三角波</option>\n              <option value=\"sawtooth\">锯齿波</option>\n              <option value=\"square\">方波</option>\n            </select>\n          </div>\n          <Handle type=\"source\" position={Position.Bottom} />\n      </div>\n    );\n};\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:p,alt:"2024-08-30 08.11.10.gif"})}),"\n",(0,a.jsx)(e.p,{children:"现在就能听到不同频率、波形的声音了。"}),"\n",(0,a.jsx)(e.p,{children:"然后我们再支持下添加振荡器节点和音量节点："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"import { addEdge, Background, BackgroundVariant, Connection, Controls, Edge, EdgeTypes, MiniMap, Node, OnConnect, Panel, ReactFlow, useEdgesState, useNodesState } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport { OscillatorNode } from './components/OscillatorNode';\nimport { VolumeNode } from './components/VolumeNode';\nimport { OutputNode } from './components/OutputNode';\nimport { connect, createAudioNode } from './Audio';\n\nconst initialNodes: Node[] =  [\n  {\n      id: 'a',\n      type: 'osc',\n      data: { frequency: 220, type: 'square' },\n      position: { x: 200, y: 0 }\n  },\n  { \n      id: 'b', \n      type: 'volume', \n      data: { gain: 0.5 },\n      position: { x: 150, y: 250 } \n  },\n  { \n      id: 'c',\n      type: 'out',\n      data: {},\n      position: { x: 350, y: 400 } \n  }\n];\n\nconst initialEdges:Edge[] = [];\n\nconst nodeTypes = {\n  'osc': OscillatorNode,\n  'volume': VolumeNode,\n  'out': OutputNode\n}\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n \n  const onConnect = (params: Connection) => {\n    connect(params.source, params.target);\n    setEdges((eds) => addEdge(params, eds))\n  }\n\n  function addOscNode() {\n    const id = Math.random().toString().slice(2, 8);\n    const position = { x: 0, y: 0 };\n    const type = 'osc';\n    const data = {frequency: 400, type: 'sine' };\n\n    setNodes([...nodes, {id, type, data, position}])\n    createAudioNode(id, type, data);\n  }\n\n  function addVolumeNode() {\n    const id = Math.random().toString().slice(2, 8);\n    const data = { gain: 0.5 };\n    const position = { x: 0, y: 0 };\n    const type = 'volume';\n  \n    setNodes([...nodes, {id, type, data, position}])\n    createAudioNode(id, type, data);\n  }\n\n  return (\n    <div style={{ width: '100vw', height: '100vh'}}>\n      <ReactFlow \n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        fitView\n      >\n        <Controls/>\n        <MiniMap/>\n        <Background variant={BackgroundVariant.Lines}/>\n        <Panel className={'space-x-4'}  position=\"top-right\">\n          <button className={'p-[4px] rounded bg-white shadow'}  onClick={addOscNode}>添加振荡器节点</button>\n          <button className={'p-[4px] rounded bg-white shadow'}  onClick={addVolumeNode}>添加音量节点</button>\n        </Panel>\n      </ReactFlow>\n    </div>\n  );\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"试一下："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:d,alt:"2024-08-30 08.24.31.gif"})}),"\n",(0,a.jsx)(e.p,{children:"这样，添加节点就完成了。"}),"\n",(0,a.jsx)(e.p,{children:"多个节点的时候，声音是它们的合成音。"}),"\n",(0,a.jsx)(e.p,{children:"我们还没处理流程节点删除的时候，去掉 Audio Node，也做一下："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"onNodesDelete={(nodes) => {\n  for (const { id } of nodes) {\n    removeAudioNode(id)\n  }\n}}\nonEdgesDelete={(edges) => {\n  for (const item of edges) {\n    const { source, target} = item\n    disconnect(source, target);\n  }\n}}\n"})}),"\n",(0,a.jsx)(e.p,{children:"节点删除对应 removeAudioNode，边删除对应 disconnect。"}),"\n",(0,a.jsx)(e.p,{children:"至此，我们的 React Flow 振荡器调音就完成了。"}),"\n",(0,a.jsx)(e.p,{children:"不过现在不好操作，Handle 有点小，我们加大一点："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"看下效果："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"这样，操作起来就方便多了。"}),"\n",(0,a.jsxs)(e.p,{children:["案例代码上传了",(0,a.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/audio-flow",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,a.jsxs)(e.h2,{id:"总结",children:["总结",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"这节我们实现了流程图节点和 AudioContext 节点的同步。"}),"\n",(0,a.jsx)(e.p,{children:"Audio 是通过 createOscillator 创建振荡器节点，通过 createGain 创建音量节点，然后把它们 connect 起来 connect 到 context.destination 节点播放声音。"}),"\n",(0,a.jsx)(e.p,{children:"这和 React Flow 流程图的节点创建、节点连接很容易对应上。"}),"\n",(0,a.jsx)(e.p,{children:"我们分别把流程图节点的 connect 对应到 Audio Node 的 connect 上。"}),"\n",(0,a.jsx)(e.p,{children:"流程图节点表单参数的修改对应到相同 id 的 Audio Node 的参数修改。"}),"\n",(0,a.jsx)(e.p,{children:"流程图节点的创建、删除对应到 Audio Node 的添加删除上。"}),"\n",(0,a.jsx)(e.p,{children:"这样，就可以可视化的调音了。"})]})}function M(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(G,{...n})}):G(n)}let T=M;M.__RSPRESS_PAGE_META={},M.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC83%E7%AB%A0%E2%80%94ReactFlow%E6%8C%AF%E8%8D%A1%E5%99%A8%E8%B0%83%E9%9F%B3%EF%BC%9A%E5%90%88%E6%88%90%E5%A3%B0%E9%9F%B3.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第83章—ReactFlow振荡器调音：合成声音",headingTitle:"第83章—ReactFlow振荡器调音：合成声音",frontmatter:{}}}}]);