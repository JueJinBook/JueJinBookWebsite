"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["33164"],{180944:function(e,n,r){r.r(n),r.d(n,{default:()=>D});var s=r(552676),a=r(740453);let i=r.p+"static/image/10e465f4a0b65dd14b9722dc3ee63599.4139e5bb.gif",l=r.p+"static/image/db858b9dfec28fe4f17627c1d1b0cc5a.1ccaa6cb.gif",c=r.p+"static/image/ddf6c6e0201a3c08cc0e71ee1498c345.49b89229.webp",t=r.p+"static/image/012aa6acf8abae38d814bc2903281434.7ad9f274.webp",d=r.p+"static/image/4b26b81bf85431f0c671758dfafe8064.faec3dea.gif",o=r.p+"static/image/90b09df541c7a0c501e9366bacafe5ae.c5cc3825.gif",h=r.p+"static/image/8e2e39c197ba968c1b5f83fa409051ee.319ef808.gif",p=r.p+"static/image/877fbae218609cf58e7d0861a52e3b5e.614e0b42.webp",x=r.p+"static/image/d606b961f92b309c625969c2036267cc.1f641040.gif",g=r.p+"static/image/5daf080cf463b3d4de3f9eec34e6cc1a.319ef808.gif",j=r.p+"static/image/af3c45a9e2f9ff8df3900bff6a7e9a1b.aad80142.gif",f=r.p+"static/image/2b7eeacde400831b28a58b9812abc12e.dd89be87.gif",b=r.p+"static/image/5d96d9a4c1b58628fffac85e568ccbaa.ec7e8387.gif",u=r.p+"static/image/c9f63ce4bf8de82dd393df9027c31847.785cbdd6.gif",m=r.p+"static/image/6243825defa2d4011b5b5bc1999a1616.f50b24b0.gif",S=r.p+"static/image/dc4c1eb42377529b9ecf3c39a8d2469b.f02ab43f.gif",v=r.p+"static/image/22a7990fa7c0730daf6c0e0b321124c6.f345706c.webp",k=r.p+"static/image/fa5df836815550ef4400d3b2f631009c.90c3055d.webp",y=r.p+"static/image/bdfa41a5c69b3e02e588fef1c6015894.07609df7.webp",C=r.p+"static/image/b694e9796675e73c7ca95c23c4e76e5c.7c2e2573.webp",E=r.p+"static/image/5a29d1af86c9ada7bc1b42a4c37adfc4.adaca207.webp",_=r.p+"static/image/581d970f648463fa33fca6988f486b95.4795f5f1.gif",G=r.p+"static/image/3c3db10baa7e830503ef6eb75fc89f4c.0cbf9362.gif",N=r.p+"static/image/fd5161b09a6b231e335e2a785a1c73f0.329fac5b.webp",w=r.p+"static/image/a8da1bf508a52e89be8ef6cf74b473ed.5230168c.gif",B=r.p+"static/image/b22bf79fa77041b315491528121b3665.65afdeb9.gif",V=r.p+"static/image/3ad5de32f48bbe178e31768d2166be74.f7d0800d.webp",q=r.p+"static/image/5c0cca4f6e56e0894b557c34e7133101.f3ae45f8.webp",L=r.p+"static/image/a772aa0b97be1c7d3ec226172511694a.a580fcd0.gif",T=r.p+"static/image/a6b88020ac2c24f3fa7f0495b77c8d45.6493ec54.webp",U=r.p+"static/image/b561f96499ef6a3b413b7d7bf17ee6ba.6f85edc7.webp";function R(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",strong:"strong",h2:"h2",blockquote:"blockquote",ul:"ul",li:"li",code:"code",pre:"pre"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"41-高级篇svg-滤镜的进阶之创建颗粒效果",children:["41-高级篇：SVG 滤镜的进阶之创建颗粒效果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-高级篇svg-滤镜的进阶之创建颗粒效果",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["一直以来，许多设计师喜欢在他们的作品中运用一种简单而有效的技巧：",(0,s.jsx)(n.strong,{children:"颗粒效果。"})," 颗粒效果能够为图像和渐变增添丰富的纹理和真实感，特别是在处理纯色或光滑表面时，例如阴影和背景。这种技术不仅能够使设计更加生动和引人注目，还能营造出复古、手工或艺术风格的视觉效果。"]}),"\n",(0,s.jsx)(n.p,{children:"在 Web 设计中，颗粒效果广泛应用于背景、按钮、图标等元素，以增强其视觉效果。然而，在许多情况下，Web 开发者会选择使用位图来实现带有颗粒效果的 UI 视觉。在这里，我想告诉大家的是，使用 CSS 和 SVG 技术，也可以轻松地为 Web UI 添加引人注目的颗粒效果。"}),"\n",(0,s.jsx)(n.p,{children:"在这节课中，我将向你展示如何利用 CSS 和 SVG 技术创建丰富多彩的颗粒效果，从而改进 Web 设计中的渐变效果。我们将从基础开始，介绍如何使用 SVG 滤镜来生成颗粒效果，并逐步引导你探索不同的参数和效果，以实现你期望的颗粒效果。这不仅将帮助你理解如何在 Web 开发中有效地应用颗粒效果，还将使你学会根据设计需求调整和优化颗粒效果。"}),"\n",(0,s.jsx)(n.p,{children:"通过学习和实践这节课的内容，你将掌握创建和应用颗粒效果的关键技能，为你的 Web 设计增添独特的视觉吸引力和艺术感。"}),"\n",(0,s.jsxs)(n.h2,{id:"颗粒效果简介",children:["颗粒效果简介",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#颗粒效果简介",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 Web 设计和开发中，颗粒效果（Grain）是一种常用的视觉技术，用来增添图像和界面元素的纹理和真实感。这种效果源于早期摄影胶片的“",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Film_grain",target:"_blank",rel:"noopener noreferrer",children:"胶片颗粒"}),"”（Film Grain），是摄影技术的自然产物，如今在数字领域被重新诠释和应用。"]}),"\n",(0,s.jsx)(n.p,{children:"在传统摄影中，胶片颗粒是由银卤化物微小颗粒或染料云组成的随机光学纹理，这种纹理赋予了照片独特的外观和质感。随着数码摄影技术的进步，现代相机通过噪声降低技术减少了这种胶片颗粒效应，以提高图像的清晰度和真实性。"}),"\n",(0,s.jsx)(n.p,{children:"然而，颗粒效果在数字艺术和 Web 设计中仍然很受欢迎。设计师和开发者通过使用CSS、SVG和其他技术手段，可以轻松地向 Web 页面和应用程序的背景、图标或按钮等元素添加颗粒效果。这种技术不仅仅是为了模拟胶片的视觉特性，还能够为设计增添深度和趣味，使得界面看起来更加生动和引人注目。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"接下来，我们的主要目的就是探讨如何使用 SVG 和 CSS 来实现颗粒效果或者说颗粒渐变效果，以及这些效果可以用在哪里？"}),"\n",(0,s.jsxs)(n.h2,{id:"创建颗粒效果的诀窍",children:["创建颗粒效果的诀窍",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建颗粒效果的诀窍",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们直奔主题，要实现类似上图这样的颗粒渐变效果，主要诀窍在于使用 SVG 滤镜创建噪声效果，然后将其应用为背景，将噪声层放在渐变之下，提升亮度和对比度，这样你就得到了一个逐渐消失的渐变效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:L,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/yLWPGVO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLWPGVO"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"关键部分是："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["1️⃣：SVG 滤镜：使用 ",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜生成噪声图案"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"2️⃣：CSS 渐变：使用 CSS 渐变属性制作渐变图像"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"3️⃣：CSS 多背景：将 SVG 滤镜生成的噪声图案作为元素的背景图案，并且放置在 CSS 渐变制作的图像之下"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"4️⃣：CSS 滤镜：使用 CSS 滤镜增加噪声图案的亮度和对比度"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["5️⃣：CSS 混合模式：可以选择使用 ",(0,s.jsx)(n.code,{children:"mix-blend-mode"})," 进一步过滤颜色并混合渐变"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"注意，其中第 3️⃣ 步也可以替换成，将噪声图案和 CSS 渐变图分别放置在不同的元素中，然后再对两个元素进行合成。另外，第 5️⃣ 步不是必需的，可以根据具体的效果来选择是否使用。"}),"\n",(0,s.jsx)(n.p,{children:"接下来，我们来逐步探讨这几个部分。"}),"\n",(0,s.jsxs)(n.h2,{id:"使用-svg-滤镜创建噪声图",children:["使用 SVG 滤镜创建噪声图",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-svg-滤镜创建噪声图",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["在 SVG 滤镜中，我们可以使用 ",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜基元来创建噪声图。我们可以通过调整它的相关属性来获得所需要的噪声图案，例如 ",(0,s.jsx)(n.code,{children:"baseFrequency"})," 、",(0,s.jsx)(n.code,{children:"numOctaves"})," 和 ",(0,s.jsx)(n.code,{children:"type"})," 等："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/bGyYgaQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGyYgaQ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["有关于 ",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜更详细的介绍，可以阅读之前的课程《",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318101526183986",target:"_blank",rel:"noopener noreferrer",children:"SVG 滤镜的进阶之创建纹理"}),"》。"]}),"\n",(0,s.jsxs)(n.p,{children:["有一点需要知道的是，SVG 滤镜元素 ",(0,s.jsx)(n.code,{children:"<filter>"})," 定义的滤镜效果，通常有两种方式来引用，其中之一是使用 CSS 的 ",(0,s.jsx)(n.code,{children:"filter"})," 属性来引用，这种方式通常用于 HTML 元素上；其二是 SVG 元素的 ",(0,s.jsx)(n.code,{children:"filter"})," 属性引用。对于第二种方式，如果 SVG 内联在 HTML 中，CSS 的 ",(0,s.jsx)(n.code,{children:"filter"})," 属性将会覆盖 SVG 元素的 ",(0,s.jsx)(n.code,{children:"filter"})," 属性。"]}),"\n",(0,s.jsxs)(n.p,{children:["由于我们需要将 SVG 滤镜用于 CSS 的 ",(0,s.jsx)(n.code,{children:"background-image"})," ，我们需要通过 SVG 元素（例如 ",(0,s.jsx)(n.code,{children:"<rect>"}),"）来引用 ",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 创建的噪声图案。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg id="noise">\n    <defs>\n        <filter id="noise-filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n            <feTurbulence \n                type="fractalNoise" \n                baseFrequency="2" \n                numOctaves="5" \n                stitchTiles="stitch"\n                in="SourceGraphic" \n                resutl="TURBULENCE" />\n        </filter>\n    </defs>\n    <rect x="0" y="0" width="100%" height="100%" filter="url(#noise-filter)" />\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["你可以尝试着改变 ",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 元素的一些属性，看看效果如何？"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/qBGVvRZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBGVvRZ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们需要将这个 SVG 代码保存为一个单独的 ",(0,s.jsx)(n.code,{children:".svg"})," 文件，",(0,s.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7344089098363076620#heading-6",target:"_blank",rel:"noopener noreferrer",children:["提供给 ",(0,s.jsx)(n.code,{children:"background-image"})," 使用"]}),"。由于某些特殊的原因，在 CSS 中通过 ",(0,s.jsx)(n.code,{children:"ID"})," 引用 SVG 的滤镜是行不通的，",(0,s.jsx)(n.a,{href:"https://yoksel.github.io/url-encoder/",target:"_blank",rel:"noopener noreferrer",children:"不过你可以将 SVG 文件转换为 Data URI 或 Base 64 格式"}),"："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["URL:",(0,s.jsx)(n.a,{href:"https://yoksel.github.io/url-encoder/",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/url-encoder/"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="grainy"></div>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".grainy {\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' id='noise'%3E%3Cdefs%3E%3Cfilter id='noise-filter' color-interpolation-filters='linearRGB' x='0%25' y='0%25' width='100%25' height='100%25'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='2' numOctaves='5' stitchTiles='stitch' in='SourceGraphic' resutl='TURBULENCE' /%3E%3C/filter%3E%3C/defs%3E%3Crect x='0' y='0' width='100%25' height='100%25' filter='url(%23noise-filter)' /%3E%3C/svg%3E\");\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["或者使用 JavaScript 脚本，将内联在 HTML 的 SVG 代码转换为 Data URI 或 Base 64 ，然后提供给 ",(0,s.jsx)(n.code,{children:".grainy"})," 使用："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:'const svgElement = document.querySelector("#noise");\nconst grainyElement = document.querySelector(".grainy");\n\n\nconst applySvgAsBackground = (svgElement, targetElement) => {\n    // 获取SVG元素的内容\n    if (!svgElement) {\n        console.error(`SVG element not found.`);\n        return;\n    }\n\n    const svgContent = new XMLSerializer().serializeToString(svgElement);\n\n    // 对SVG内容进行URL编码\n    const encodedSvg = encodeURIComponent(svgContent).replace(/\'/g, "%27").replace(/"/g, "%22");\n\n    // 生成data URI\n    const dataUri = `data:image/svg+xml,${encodedSvg}`;\n\n    // 获取目标元素\n    if (!targetElement) {\n        console.error(`Target element  not found.`);\n        return;\n    }\n\n    // 将data URI应用到CSS的 `--bg-noise` 变量中\n    targetElement.style.setProperty(`--bg-noise`, `url("${dataUri}")`);\n};\n\napplySvgAsBackground(svgElement, grainyElement);\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".grainy {\n    background:var(--bg-noise) var(--bg-color, #fff);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/Baembqq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/Baembqq"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["目前我们所看到的仅仅是使用 ",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜生成的最基础的噪声图案。如果你愿意，还可以结合其他 SVG 滤镜来调整噪声图案的效果，例如，使用 ",(0,s.jsx)(n.code,{children:"<feColorMatrix>"})," 和 ",(0,s.jsx)(n.code,{children:"<feComponentTransfer>"})," 来调整噪声图的颜色和细节："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg id="noise" xmlns=\'http://www.w3.org/2000/svg\' style="display:none">\n    <defs>\n        <filter id="noise-filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n            <feTurbulence type="fractalNoise" baseFrequency="2" numOctaves="5" stitchTiles="stitch" in="SourceGraphic" resutl="TURBULENCE__10" />\n            <feColorMatrix type="saturate" values="0" in="TURBULENCE__10" result="TURBULENCE__20" class="saturate" />\n            <feComponentTransfer in="TURBULENCE__20" result="TURBULENCE__30">\n                <feFuncR type="linear" slope="2.02" class="brightness" />\n                <feFuncG type="linear" slope="2.02" class="brightness" />\n                <feFuncB type="linear" slope="2.02" class="brightness" />\n                <feFuncA type="linear" slope="0.2" class="opacity" />\n            </feComponentTransfer>\n            <feComponentTransfer in="TURBULENCE__30" result="TURBULENCE__40">\n                <feFuncR type="linear" slope="2.1" intercept="-0.55" class="contrast" />\n                <feFuncG type="linear" slope="2.1" intercept="-0.55" class="contrast" />\n                <feFuncB type="linear" slope="2.1" intercept="-0.55" class="contrast" />\n            </feComponentTransfer>\n        </filter>\n    </defs>\n    <rect x="0" y="0" width="100%" height="100%" filter="url(#noise-filter)" />\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/QWROPBN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWROPBN"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"现在，制作颗粒效果的第一层图案已准备好了，接下来我们来看盖在它上面的 CSS 渐变。"}),"\n",(0,s.jsxs)(n.h2,{id:"创建渐变层",children:["创建渐变层",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建渐变层",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 CSS 中，",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668771856941111",target:"_blank",rel:"noopener noreferrer",children:"渐变"}),"主要有三种类型：",(0,s.jsx)(n.strong,{children:"线性渐变"})," 、",(0,s.jsx)(n.strong,{children:"径向渐变"})," 和",(0,s.jsx)(n.strong,{children:"锥形渐变"})," ，每一种类型渐变又包含一次性渐变和重复性渐变："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["线性渐变：",(0,s.jsx)(n.code,{children:"linear-gradient()"})," （一次性线性渐变）和 ",(0,s.jsx)(n.code,{children:"repeating-linear-gradient()"})," （重复性线性渐变）"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["径向渐变：",(0,s.jsx)(n.code,{children:"radial-gradient()"})," （一次性径向渐变）和 ",(0,s.jsx)(n.code,{children:"repeating-radial-gradient()"})," （重复性径向渐变）"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["锥形渐变：",(0,s.jsx)(n.code,{children:"conic-gradient()"})," （一次性锥形渐变）和 ",(0,s.jsx)(n.code,{children:"repeating-conic-gradient()"})," （重复性锥形渐变）"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/xxNPNba",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxNPNba"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这意味着，我们可以使用不同的方式创建所需要的渐变层。"}),"\n",(0,s.jsxs)(n.p,{children:["当然，如果你不想花太多时间去了解 CSS 渐变特性，那么可以借助在线工具来辅助你构建出所需的渐变效果。例如 ",(0,s.jsx)(n.a,{href:"https://gradient.style/",target:"_blank",rel:"noopener noreferrer",children:"HD Gradients 工具"}),"，它可以帮助你创建高清的渐变效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["URL:",(0,s.jsx)(n.a,{href:"https://gradient.style/",target:"_blank",rel:"noopener noreferrer",children:"https://gradient.style/"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["或者使用 ",(0,s.jsx)(n.a,{href:"https://csshero.org/mesher/",target:"_blank",rel:"noopener noreferrer",children:"Mesher 工具"}),"来制作 Mesh Gradient （CSS 没有专门的属性用于制作 Mesh 渐变）:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["URL:",(0,s.jsx)(n.a,{href:"https://csshero.org/mesher/",target:"_blank",rel:"noopener noreferrer",children:"https://csshero.org/mesher/"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"假设你现在已经使用 CSS 渐变创建了渐变效果。例如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"background-image:\nradial-gradient(at 40% 20%, hsla(28,100%,74%,1) 0px, transparent 50%),\nradial-gradient(at 80% 0%, hsla(189,100%,56%,1) 0px, transparent 50%),\nradial-gradient(at 0% 50%, hsla(355,100%,93%,1) 0px, transparent 50%),\nradial-gradient(at 80% 50%, hsla(340,100%,76%,1) 0px, transparent 50%),\nradial-gradient(at 0% 100%, hsla(22,100%,77%,1) 0px, transparent 50%),\nradial-gradient(at 80% 100%, hsla(242,100%,70%,1) 0px, transparent 50%),\nradial-gradient(at 0% 0%, hsla(343,100%,76%,1) 0px, transparent 50%);\n"})}),"\n",(0,s.jsx)(n.p,{children:"与之前的噪声图片一样，我们使用 CSS 自定义属性来管理渐变效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".grainy {\n    --bg-gradient: \n        radial-gradient(at 40% 20%, hsla(28,100%,74%,1) 0px, transparent 50%),\n        radial-gradient(at 80% 0%, hsla(189,100%,56%,1) 0px, transparent 50%),\n        radial-gradient(at 0% 50%, hsla(355,100%,93%,1) 0px, transparent 50%),\n        radial-gradient(at 80% 50%, hsla(340,100%,76%,1) 0px, transparent 50%),\n        radial-gradient(at 0% 100%, hsla(22,100%,77%,1) 0px, transparent 50%),\n        radial-gradient(at 80% 100%, hsla(242,100%,70%,1) 0px, transparent 50%),\n        radial-gradient(at 0% 0%, hsla(343,100%,76%,1) 0px, transparent 50%);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["到这里，我们就为颗粒效果准备好两个层了，一个是噪声图案层 ",(0,s.jsx)(n.code,{children:"--bg-noise"})," （由 SVG 滤镜创建，并转换为 Data URI 或 Base 64），另一个是渐变层 ",(0,s.jsx)(n.code,{children:"--bg-gradient"})," 。"]}),"\n",(0,s.jsxs)(n.h2,{id:"合并层噪声层--渐变层",children:["合并层：噪声层 + 渐变层",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#合并层噪声层--渐变层",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["之前，我们提到过，这两个层都是 ",(0,s.jsx)(n.code,{children:".grainy"})," 的背景，而且渐变层要在噪声层上面。我们可以这样来编写我们的 CSS:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".grainy {\n    background:  var(--bg-gradient), var(--bg-noise) var(--bg-color, #fff);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["请注意，我们使用了 CSS 多背景的特性，将渐变层和噪声层都作为 ",(0,s.jsx)(n.code,{children:".grainy"})," 元素的背景层使用。有个细节非常重要，那就是背景图片出现的顺序。越早出现，越在顶层："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["这意味着，",(0,s.jsx)(n.code,{children:"--bg-gradient"})," 要先于 ",(0,s.jsx)(n.code,{children:"--bg-noise"})," ，因为我们需要将渐变层覆盖在噪声层上面。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/xxNPNzN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxNPNzN"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正如你所看到的，仅仅将渐变层和噪声层合在一起，效果并不太好。颗粒效果太混乱，我们需要进一步调整。"}),"\n",(0,s.jsx)(n.p,{children:"注意，渐变层需要带有一定的透明度，否则看不到底部的噪声图案，也就看不到任何颗粒效果。如果你使用的是不带任何透明度的渐变效果，需要使用其他的技术手段，使底部噪声透出部分。例如 CSS 混合模式（这个稍后再讨论）。"}),"\n",(0,s.jsxs)(n.h2,{id:"提升亮度和对比度",children:["提升亮度和对比度",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#提升亮度和对比度",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以借助 CSS 的滤镜 ",(0,s.jsx)(n.code,{children:"filter"})," 中的 ",(0,s.jsx)(n.code,{children:"contrast()"})," 和 ",(0,s.jsx)(n.code,{children:"brightness()"})," 函数使噪声更为鲜明，将最淡的颜色变成白色或黑色："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".grainy {\n    background:  var(--bg-gradient), var(--bg-noise) var(--bg-color, #fff);\n    filter: var(--contrast, contrast(170%)) var(--brightness, brightness(100%));\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["你可以尝试着调整 ",(0,s.jsx)(n.code,{children:"contrast()"})," 和 ",(0,s.jsx)(n.code,{children:"brightness()"})," 函数的值，看看它们如何影响渐变效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/mdYpeXq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdYpeXq"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"css-混合模式过滤颜色",children:["CSS 混合模式：过滤颜色",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-混合模式过滤颜色",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["需要知道的是，SVG 滤镜本身就是彩色的，增加亮度和对比度进一步强调了某些颜色。虽然不太明显，但如果这些彩色斑点不受欢迎，我们可以继续使用 CSS 混合模式（例如 ",(0,s.jsx)(n.code,{children:"mix-blend-mode"})," 或 ",(0,s.jsx)(n.code,{children:"background-blend-mode"}),"）来过滤颜色。"]}),"\n",(0,s.jsxs)(n.p,{children:["在我们这个场景，有多种不同的方式使用 CSS 混合模式来过滤镜颜色，或者说调整颗粒渐变效果。首先来看 ",(0,s.jsx)(n.code,{children:"background-blend-mode"})," 属性如何影响颗粒渐变的效果。"]}),"\n",(0,s.jsx)(n.p,{children:"我们在创建颗粒渐变效果的过程中有一步非常关键，那就是将 SVG 滤镜生成的噪声图案和 CSS 渐变创建的渐变效果，一起作为元素的背景图像在使用。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".grainy {\n    background:  var(--bg-gradient), var(--bg-noise) var(--bg-color, #fff);\n }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["与此同时，还为元素设置了一个背景颜色。这样一来，整个元素就有三个层：渐变层、噪声层和颜色层。我们可以使用 CSS 的 ",(0,s.jsx)(n.code,{children:"background-blend-mode"})," 对这三个层做一些混合处理，使整个效果变得更平滑一些："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".grainy {\n    background:  var(--bg-gradient), var(--bg-noise) var(--bg-color, #fff);\n    filter: var(--contrast, contrast(170%)) var(--brightness, brightness(100%));\n    background-blend-mode: var(--bg-blend, multiply);\n }\n"})}),"\n",(0,s.jsx)(n.p,{children:"你可以尝试调整混合模式的值，但看颗粒渐变效果的变化："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/mdYpeYL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdYpeYL"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["另外一种方式是使用 ",(0,s.jsx)(n.code,{children:"mix-blend-mode"})," 。使用这种模式，需要在 ",(0,s.jsx)(n.code,{children:".grainy"})," 上面添加一个层，在这个层上设置一个颜色，并设置它的混合模式类型："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="isolate">\n    <div class="grainy"></div>\n</div>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'.isolate {\n    position: relative;\n    \n    .grainy {\n        background:  var(--bg-gradient), var(--bg-noise) var(--bg-color, #fff);\n        filter: var(--contrast, contrast(170%)) var(--brightness, brightness(100%));\n    }\n    \n    &::after {\n        content: "";\n        position: absolute;\n        inset: 0;\n        background-color: var(--mix-color, moccasin);\n        mix-blend-mode: var(--mix-blend, multiply);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/PovEZZx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PovEZZx"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["当然，如果你有需要，可以同时使用 ",(0,s.jsx)(n.code,{children:"mix-blend-mode"})," 和 ",(0,s.jsx)(n.code,{children:"background-blend-mode"})," 来调整颗粒渐变的效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'.isolate {\n    position: relative;\n    \n    .grainy {\n        background:  var(--bg-gradient), var(--bg-noise) var(--bg-color, #fff);\n        filter: var(--contrast, contrast(170%)) var(--brightness, brightness(100%));\n        background-blend-mode: var(--bg-blend, multiply);\n    }\n    \n    &::after {\n        content: "";\n        position: absolute;\n        inset: 0;\n        background-color: var(--mix-color, moccasin);\n        mix-blend-mode: var(--mix-blend, multiply);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/BaeJjYX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaeJjYX"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以使用 ",(0,s.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368317864165507082#heading-25",target:"_blank",rel:"noopener noreferrer",children:["CSS 的 ",(0,s.jsx)(n.code,{children:"isolation"})," 属性"]}),"来创建一个新的层叠上下文，从而防止元素与背景或其他元素混合。这会将元素视为一个独立的图层，不受其他元素的混合影响。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'.isolate {\n    position: relative;\n    isolation: isolate;\n    \n    .grainy {\n        background:  var(--bg-gradient), var(--bg-noise) var(--bg-color, #fff);\n        filter: var(--contrast, contrast(170%)) var(--brightness, brightness(100%));\n        background-blend-mode: var(--bg-blend, multiply);\n    }\n    \n    &::after {\n        content: "";\n        position: absolute;\n        inset: 0;\n        background-color: var(--mix-color, moccasin);\n        mix-blend-mode: var(--mix-blend, multiply);\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["你可以尝试在下面的示例中切换 ",(0,s.jsx)(n.code,{children:"isolation"})," 状态（开启或关闭），但看颗粒渐变效果的变化："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/zYQprLE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYQprLE"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"我想，根据上面的步骤，你应该可以制作出你想要的颗粒渐变效果了。你可以尝试调整上面的案例的相关参数，看看它们如何影响颗粒效果。除此之外，这里还有一些继续探索这种技术的方法："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"使用不同的 SVG"}),"：可以调整 ",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜属性的值，改变其粗糙度以及外观和感觉"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"应用不同的 SVG 滤镜"}),"：SVG 中有 17 种不同的滤镜基元，你可以使用更多的滤镜，改变噪声图案，获得更丰富的渐变效果"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"尝试不同的渐变"}),"：虽然示例中提供了多种不同的渐变，但不影响你使用其他的渐变类型来绘制更复杂的渐变层效果，例如带图案的渐变层"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"添加更多的层"}),"：通过 CSS 混合，你可以叠加任意数量的图层并进行混合，创造出复杂的效果"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"当你尝试的越多，你将获得的效果也会越多，因为调整其中任何一个参数，你都将得到不同的效果。如果你在尝试制作的过程中，获得非常丰富的效果，请不要忘记在评论中与我一起分享你的成果。"}),"\n",(0,s.jsxs)(n.h2,{id:"使用多元素制作合并层",children:["使用多元素制作合并层",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用多元素制作合并层",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["不难发现，上面所展示的示例，合并层（噪声层+渐变层）是以多背景方式合成的。如果你的层数并不多（假设就只有噪声层和渐变层），那么可以考虑使用多元素制作合并层。只不过，这种方式你需要额外增加 HTML 空元素或使用伪元素充当层。我在下面的示例中，使用的是伪元素 ",(0,s.jsx)(n.code,{children:"::before"})," 或 ",(0,s.jsx)(n.code,{children:"::after"})," ，因为我个人比较喜欢使用伪元素："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="isolate multi-element">\n    <div class="grainy">\n        \x3c!-- ::before 是渐变层 --\x3e\n        \x3c!-- ::after 是噪声层 --\x3e\n    </div>\n</div>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".isolate {\n    isolation: var(--isolate);\n    \n    &::after {\n        background-color: var(--mix-color);\n        mix-blend-mode: var(--mix-blend);\n    }\n}\n  \n.multi-element .grainy {\n    position: relative;\n    filter: var(--contrast) var(--brightness);\n    \n    &::before {\n        z-index: 2;\n        background: var(--bg-gradient);\n        mix-blend-mode: var(--bg-blend);\n    }\n    \n    &::after {\n        z-index: 1;\n        background: var(--bg-noise) var(--bg-color);\n        background-blend-mode: var(--bg-blend);\n        mix-blend-mode: var(--bg-blend);\n    }\n} \n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/bGyapNp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGyapNp"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"你可能已经发现了，虽然这两种方式都可以实现颗粒渐变效果，但最终渲染的结果上还是略有差异的。另外，一旦有更多的层需要进行合并，那么多元素的方式就越会显得鸡肋，因为你需要更多的元素来充当层。就这一而言，我个人强烈推荐使用多背景的方式，你不会受到层数限制。"}),"\n",(0,s.jsxs)(n.h2,{id:"一些使用场景",children:["一些使用场景",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一些使用场景",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"了解完如何使用 SVG 滤镜和 CSS 滤镜、混合模式制作颗粒渐变效果的理论以及制作方法之后，我们来看几个实际的案例。看看这些效果在 Web 上哪些场景可以使用该效果。"}),"\n",(0,s.jsx)(n.p,{children:"首先来看一个卡片效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/vYwpKLy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYwpKLy"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["上面这个效果是在 ",(0,s.jsx)(n.a,{href:"https://codepen.io/jh3y/full/yLwLVgP",target:"_blank",rel:"noopener noreferrer",children:"@Jhey 在 Codepen 提供的光晕案例"}),"基础上增加的颗粒渐变效果。原案例的效果如下："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/jh3y/full/yLwLVgP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/jh3y/full/yLwLVgP"})," （来源于 @Jhey）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"带有颗粒渐变的卡片效果是不是更有质感一点。"}),"\n",(0,s.jsxs)(n.p,{children:["你可能已经猜到了，这个效果就是采用这节课介绍的技术制作的。为了不打破原有案例的光晕效果，我只是在原卡片的基础上新增了两个元素，即 ",(0,s.jsx)(n.code,{children:".noise"})," 和 ",(0,s.jsx)(n.code,{children:".overlay"})," ："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<article data-glow>\n    <div>\n        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">\n            <path fill-rule="evenodd" d="M14.447 3.026a.75.75 0 0 1 .527.921l-4.5 16.5a.75.75 0 0 1-1.448-.394l4.5-16.5a.75.75 0 0 1 .921-.527ZM16.72 6.22a.75.75 0 0 1 1.06 0l5.25 5.25a.75.75 0 0 1 0 1.06l-5.25 5.25a.75.75 0 1 1-1.06-1.06L21.44 12l-4.72-4.72a.75.75 0 0 1 0-1.06Zm-9.44 0a.75.75 0 0 1 0 1.06L2.56 12l4.72 4.72a.75.75 0 0 1-1.06 1.06L.97 12.53a.75.75 0 0 1 0-1.06l5.25-5.25a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd" />\n        </svg>\n        <h2>Div Tamer</h2>\n        <span>Style co.</span>\n    </div>\n    <hr>\n    <span>Total Comp.</span>\n    <span>$1,000,000 - $1,240,000</span>\n    \n    \x3c!-- 用于制作颗粒渐变效果 --\x3e\n    <sapn class="noise"></sapn>\n    <span class="overlay"></span>\n</article>\n'})}),"\n",(0,s.jsx)(n.p,{children:"实现该效果，首先需要一张噪声图，我使用了下面的 SVG 生成的噪声图："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg id="noise" xmlns="http://www.w3.org/2000/svg" style="display:none">\n    <defs>\n        <filter id="noise-filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n            <feTurbulence \n                type="fractalNoise"\n                baseFrequency="0.6" \n                numOctaves="3"              \n                stitchTiles="stitch"\n                in="SourceGraphic" \n                resutl="TURBULENCE__10"/>\n        </filter>\n    </defs>\n    <rect x="0" y="0" width="100%" height="100%" filter="url(#noise-filter)" />\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:"大致的效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["你可以选择将这段 SVG 代码保存为一个名为 ",(0,s.jsx)(n.code,{children:"noise.svg"})," 文件，以备在 CSS 中引用。不过，我在示例中使用了 JavaScript 脚本，将这段 SVG 转换为 Data URI，并作为自定义属性 ",(0,s.jsx)(n.code,{children:"--bg-noise"})," 的值："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:'const feTurbulence = document.querySelector("feTurbulence");\nconst svgElement = document.querySelector("#noise");\nconst rootEle = document.documentElement; \n\nconst applySvgAsBackground = (svgElement, targetElement) => {\n    if (!svgElement) {\n        console.error(`SVG element not found.`);\n        return;\n    }\n\n    const svgContent = new XMLSerializer().serializeToString(svgElement);\n\n    const encodedSvg = encodeURIComponent(svgContent).replace(/\'/g, "%27").replace(/"/g, "%22");\n\n    const dataUri = `data:image/svg+xml,${encodedSvg}`;\n\n    if (!targetElement) {\n        console.error(`Target element  not found.`);\n        return;\n    }\n\n    targetElement.style.setProperty(`--bg-noise`, `url("${dataUri}")`);\n};\n\napplySvgAsBackground(svgElement, rootEle);\n'})}),"\n",(0,s.jsx)(n.p,{children:"接下来是 CSS 部分："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:":root {\n    --card-size: clamp(350px, 40vw, 450px);\n    --card-ar: 2 / 1;\n    --x: calc(50vw * 1);\n    --y: calc((50vh - (var(--card-size) * 0.25)) * 1);\n    --spotlight: 50vmin;\n    --backdrop: black;\n    --radius: 14;\n    --border: 3;\n    --backup-border: hsl(0 0% 10% / 0.2);\n    --size: 200;\n    --bg-spot-opacity: 0.16;\n    --border-light-opacity: 1;\n    --border-spot-opacity: 0.75;\n    --bg-gradient: \n        radial-gradient(at 40% 20%,hsla(28, 100%, 74%, 1) 0px,transparent 50%),\n        radial-gradient(at 80% 0%, hsla(189, 100%, 56%, 1) 0px, transparent 50%),\n        radial-gradient(at 0% 50%, hsla(355, 100%, 93%, 1) 0px, transparent 50%),\n        radial-gradient(at 80% 50%, hsla(340, 100%, 76%, 1) 0px, transparent 50%),\n        radial-gradient(at 0% 100%, hsla(22, 100%, 77%, 1) 0px, transparent 50%),\n        radial-gradient(at 80% 100%, hsla(242, 100%, 70%, 1) 0px, transparent 50%),\n        radial-gradient(at 0% 0%, hsla(343, 100%, 76%, 1) 0px, transparent 50%);\n}\n  \n[data-glow] {    \n    position: relative;\n    isolation: isolate;\n    \n    :is(.noise, .overlay) {\n        position: absolute;\n        inset: 0;\n        width: 100%;\n        height: 100%;\n        border-radius: inherit;\n    }\n\n    .noise {      \n        --border-size: calc(var(--border, 2) * 1px);\n        --spotlight-size: calc(var(--card-size) * 1.2);\n        --hue: calc(var(--base) + (var(--xp, 0) * var(--spread, 0)));\n        background-image: \n            radial-gradient(var(--spotlight-size) var(--spotlight-size) at var(--x) var(--y), hsl(var(--hue, 210) calc(var(--saturation, 100) * 1%) calc(var(--lightness, 70) * 1%) / var(--bg-spot-opacity, 0.15)),transparent),\n            var(--bg-gradient), \n            var(--bg-noise);\n        background-color: var(--backdrop, transparent);\n        background-size: calc(100% + (2 * var(--border-size))) calc(100% + (2 * var(--border-size)));\n        background-position: 50% 50%;\n        background-attachment: fixed;\n        border: var(--border-size) solid var(--backup-border);\n        touch-action: none;\n        background-blend-mode: hard-light;\n        filter: contrast(170%) brightness(70%);\n        z-index: -2;\n    }\n    \n    .overlay {\n        z-index: -1;\n        background-color: #ffeb3b;\n        mix-blend-mode: multiply;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"注意，颗粒渐变使用了一个层，两个渐变层，一个噪声层，并且按照之前介绍的方法，给其添加了混合模式和滤镜等效果。在这些样式的组合之下，实现了最终的效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/vYwpKLy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYwpKLy"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["按照类似的方法，我们可以给 Web 上的任何元素添加颗粒渐变效果。例如 ",(0,s.jsx)(n.a,{href:"https://codepen.io/tag/grainy-gradient",target:"_blank",rel:"noopener noreferrer",children:"@ Juxtopposed 在 Codepen"})," 上提供的两个案例："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/Juxtopposed/full/PoyWzEq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/Juxtopposed/full/PoyWzEq"})," （来源于 @ Juxtopposed）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/Juxtopposed/full/BaqLEQY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/Juxtopposed/full/BaqLEQY"})," （来源于 @ Juxtopposed）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"另外，颗粒渐变还可以用来制作光和影子相关的效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/zYQpKqo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYQpKqo"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/cjimmy/full/XWRQPep",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/cjimmy/full/XWRQPep"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/cjimmy",target:"_blank",rel:"noopener noreferrer",children:"@Jimmy Chion"})," ）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"如果你愿意，你还可以给 Web 上的一些标题添加颗粒渐变效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/LukyVj/full/poOjqBv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/LukyVj/full/poOjqBv"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/LukyVj",target:"_blank",rel:"noopener noreferrer",children:"@LukyVJ"})," ）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/cjimmy/full/zYzNBJj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/cjimmy/full/zYzNBJj"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/cjimmy",target:"_blank",rel:"noopener noreferrer",children:"@Jimmy Chion"})," ）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正如你所看到的，只要你敢想，愿意尝试，采用这种方法你可以为 Web 添加各式各样的颗粒渐变效果！"}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在这节课，我们主要介绍了如何将 SVG 滤镜制作的噪声图与 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259669043622690853",target:"_blank",rel:"noopener noreferrer",children:"CSS 处理图像的技术"}),"（例如滤镜和混合模式）相结合来制作各式各样的颗粒渐变效果。在课程中我们展示了各种不同的颗粒渐变效果，但它们的制作原理是相同的。通过这些有趣的案例，我们也知道，只要愿意去尝试，例如调整噪声图粗细度、改变渐变风格、调整对比度和亮度以及合适的混合模式，我们就可以轻易制作出符合期望的带颗粒渐变效果的 UI 视觉。"]}),"\n",(0,s.jsx)(n.p,{children:"而且我想说的是，虽然这节课主题是“SVG 创建颗粒效果”，但也告诉我们，在实际开发中，我们可以结合 SVG 滤镜和 CSS 现代特性为 Web 添加更丰富的，更有趣的 UI 效果和交互效果。这意味着，你又多了一种可以为 Web 增添加有深度、有质感的精美视觉效果。"})]})}function z(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(R,{...e})}):R(e)}let D=z;z.__RSPRESS_PAGE_META={},z.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F41-%E9%AB%98%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E6%BB%A4%E9%95%9C%E7%9A%84%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%88%9B%E5%BB%BA%E9%A2%97%E7%B2%92%E6%95%88%E6%9E%9C.md"]={toc:[{text:"颗粒效果简介",id:"颗粒效果简介",depth:2},{text:"创建颗粒效果的诀窍",id:"创建颗粒效果的诀窍",depth:2},{text:"使用 SVG 滤镜创建噪声图",id:"使用-svg-滤镜创建噪声图",depth:2},{text:"创建渐变层",id:"创建渐变层",depth:2},{text:"合并层：噪声层 + 渐变层",id:"合并层噪声层--渐变层",depth:2},{text:"提升亮度和对比度",id:"提升亮度和对比度",depth:2},{text:"CSS 混合模式：过滤颜色",id:"css-混合模式过滤颜色",depth:2},{text:"使用多元素制作合并层",id:"使用多元素制作合并层",depth:2},{text:"一些使用场景",id:"一些使用场景",depth:2},{text:"小结",id:"小结",depth:2}],title:"41-高级篇：SVG 滤镜的进阶之创建颗粒效果",headingTitle:"41-高级篇：SVG 滤镜的进阶之创建颗粒效果",frontmatter:{}}}}]);