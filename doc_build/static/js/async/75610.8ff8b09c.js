"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["75610"],{918150:function(e,n,o){e.exports=o.p+"static/image/0e6400ba3936a3166ea2c06df5595213.be27c895.webp"},885363:function(e,n,o){o.r(n),o.d(n,{default:()=>y});var s=o(552676),r=o(740453);let c=o.p+"static/image/7c27e66252805eeeb37980b9e0ed81b0.cd371d8b.webp",a=o.p+"static/image/c248bc1b616f5f07180f545b32296c00.72c8648e.webp",t=o.p+"static/image/ae31f6d7237df2a0d838d97237481460.f7dc850c.webp",d=o.p+"static/image/3e2c1e6c51d0fc99c71e1afa7805cf86.244eb9f4.webp",i=o.p+"static/image/1fd4c73b14ee578f4d499640c2893cb1.c9eb60c5.webp",l=o.p+"static/image/5c881e96639a2241b576f18d06252d55.e5fad976.webp",g=o.p+"static/image/6e918de447546d9bfea94549d6166b1b.f3a28adf.webp",p=o.p+"static/image/acc66bcdbfe3117ed1a879826289aab8.39461860.webp",m=o.p+"static/image/56e302555e6b0c0f5d2ec426c25b812a.e91d3211.webp",h=o.p+"static/image/8615acc1205860607cb414d66129d17f.37520a2d.webp",j=o.p+"static/image/71e9140352a849eb745811ddac9e72e5.80773196.webp",x=o.p+"static/image/2045337bf7d2c516092e483f1a1f480e.138c0dea.webp",b=o.p+"static/image/c679b8922e5bbeec440ffee03e4260bf.2cf6a803.webp",f=o.p+"static/image/70365360c74bf3dab0cf103b1a761f08.5da4c96c.webp",u=o.p+"static/image/b2fd44b0cb03e186385f4abac14af59d.fba00405.webp",D=o.p+"static/image/0fc043ae519393809e23ecc9cfa71442.04a759d4.webp",M=o.p+"static/image/882c0cc33a80cf87dbc88a8a7505fbca.6ad6e84d.webp",w=o.p+"static/image/061011161fe161b2103a9d2ba9af21bd.0d4bf909.webp",S=o.p+"static/image/4305c9a3b524679938482cd317adc373.77d2a24c.webp",v=o.p+"static/image/d97a6b2c4a19801b95ad17a3fbc7b512.e8b391c9.webp",E=o.p+"static/image/a11eb2870f9b3ab5b4ae0e22e84e434d.cc4b4cb1.webp",N=o.p+"static/image/7e4a4d97349c1f843f4a7ec8305a302d.692b50f1.webp";var A=o(918150);let C=o.p+"static/image/e1fd1436860e05a7a98688e17d9bff26.847ba769.webp";function P(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"196-使用-mongoose-操作-mongodb-数据库",children:["196. 使用 mongoose 操作 MongoDB 数据库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#196-使用-mongoose-操作-mongodb-数据库",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上节我们用了下 mongodb，这节在 node 里操作下。"}),"\n",(0,s.jsx)(n.p,{children:"在 node 里操作 mongodb 我们常用的是 mongoose 这个包。"}),"\n",(0,s.jsx)(n.p,{children:"创建个项目："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir mongoose-test\ncd mongoose-test\nnpm init -y\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"进入项目，安装 mongoose 包。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm install --save mongoose\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 Docker Desktop 里把 mongodb 的容器跑起来："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后用 node 代码连接下。"}),"\n",(0,s.jsx)(n.p,{children:"创建 index.js"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const mongoose = require('mongoose');\n\nmain().catch(err => console.log(err));\n\nasync function main() {\n  await mongoose.connect('mongodb://localhost:27017/guang');\n\n  const PersonSchema = new mongoose.Schema({\n    name: String,\n    age: Number,\n    hobbies: [String]\n  });\n\n  const Person = mongoose.model('Person', PersonSchema);\n\n  const guang = new Person();\n  guang.name = 'guang';\n  guang.age = 20;\n\n  await guang.save();\n\n  const dong = new Person();\n  dong.name = 'dong';\n  dong.age = 21;\n  dong.hobbies = ['reading', 'football']\n\n  await dong.save();\n\n  const persons = await Person.find();\n  console.log(persons);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"首先创建 Schema 描述对象的形状，然后根据 Schema 创建 Model，每一个 model 对象存储一个文档的信息，可以单独 CRUD。"}),"\n",(0,s.jsx)(n.p,{children:"因为 collection 中的 document 可以是任意形状："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们需要先用 Schema 声明具体有哪些属性再操作。"}),"\n",(0,s.jsx)(n.p,{children:"跑一下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"node index.js\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 MongoDB Compass 里看下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"两条数据都插入了。"}),"\n",(0,s.jsx)(n.p,{children:"而且在 mongoose 里查询的语法和上节我们学的 mongodb 的 api 一模一样："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const persons = await Person.find(\n    {\n        $and: [{age: { $gte: 20 }}, { name: /dong/}]\n    }\n);\nconsole.log(persons);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const persons = await Person.find(\n    {\n        age: { $in: [20, 21]}\n    }\n);\nconsole.log(persons);\n"})}),"\n",(0,s.jsx)(n.p,{children:"增删改查的方法都比较简单，就不一个个试了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后在 nest 项目里操作下。"}),"\n",(0,s.jsx)(n.p,{children:"创建个项目："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"nest new nest-mongoose\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"进入项目，安装用到的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install @nestjs/mongoose mongoose\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 AppModule 里引入下 MongooseModule"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://localhost:27017/guang')\n      \n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"创建个模块："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g resource dog --no-spec\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"改下 dog.entities.ts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\n@Schema()\nexport class Dog {\n  @Prop()\n  name: string;\n\n  @Prop()\n  age: number;\n  \n  @Prop([String])\n  tags: string[];\n}\n\nexport type DogDocument = HydratedDocument<Dog>;\n\nexport const DogSchema = SchemaFactory.createForClass(Dog);\n"})}),"\n",(0,s.jsx)(n.p,{children:"用 @Schema 创建 schema，然后用 @Prop 声明属性。"}),"\n",(0,s.jsx)(n.p,{children:"之后用 SchemaFactory.createForClass 来根据 class 创建 Schema。"}),"\n",(0,s.jsx)(n.p,{children:"这个 HydratedDocument 只是在 Dog 类型的基础上加了一个 _id 属性："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后 dog.module.ts 里注入 Schema 对应的 Model"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { DogService } from './dog.service';\nimport { DogController } from './dog.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Dog, DogSchema } from './entities/dog.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Dog.name, schema: DogSchema }])\n  ],\n  controllers: [DogController],\n  providers: [DogService],\n})\nexport class DogModule {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这样在 DogService 里就可以用 Model 来做 CRUD 了。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { CreateDogDto } from './dto/create-dog.dto';\nimport { UpdateDogDto } from './dto/update-dog.dto';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Dog } from './entities/dog.entity';\n\n@Injectable()\nexport class DogService {\n\n  @InjectModel(Dog.name)\n  private dogModel: Model<Dog>;\n\n  create(createDogDto: CreateDogDto) {\n    return 'This action adds a new dog';\n  }\n\n  findAll() {\n    return this.dogModel.find();\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} dog`;\n  }\n\n  update(id: number, updateDogDto: UpdateDogDto) {\n    return `This action updates a #${id} dog`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} dog`;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后我们改下 create-dog.dto.ts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { IsNotEmpty, IsNumber, IsString, Length } from "class-validator";\n\nexport class CreateDogDto {\n\n    @IsString()\n    @IsNotEmpty()\n    @Length(30)\n    name: string;\n\n    @IsNumber()\n    @IsNotEmpty()\n    age: number;\n  \n    tags: string[];\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install class-validator class-transformer\n"})}),"\n",(0,s.jsx)(n.p,{children:"之后完善下 DogService："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { CreateDogDto } from './dto/create-dog.dto';\nimport { UpdateDogDto } from './dto/update-dog.dto';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Dog } from './entities/dog.entity';\n\n@Injectable()\nexport class DogService {\n\n  @InjectModel(Dog.name)\n  private dogModel: Model<Dog>;\n\n  create(createDogDto: CreateDogDto) {\n    const dog = new this.dogModel(createDogDto);\n    return dog.save();\n  }\n\n  findAll() {\n    return this.dogModel.find();\n  }\n\n  findOne(id: string) {\n    return this.dogModel.findById(id);\n  }\n\n  update(id: string, updateDogDto: UpdateDogDto) {\n    return this.dogModel.findByIdAndUpdate(id, updateDogDto);\n  }\n\n  remove(id: number) {\n    return this.dogModel.findByIdAndDelete(id);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"之前把 id 转为 number 的 + 去掉，因为 mongodb 的 id 是 stirng："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后在 postman 里测试下："}),"\n",(0,s.jsx)(n.p,{children:"先创建 2 个 dog："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"查询下全部："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"单个："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后修改下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["再查询下：\n",(0,s.jsx)("img",{src:t,alt:""})]}),"\n",(0,s.jsx)(n.p,{children:"之后删除："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 Mongodb Compass 里点击刷新，也可以看到数据确实被删掉了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这就是在 nest 里对 MongoDB 做 CRUD 的方式。"}),"\n",(0,s.jsx)(n.p,{children:"案例代码在小册仓库："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/mongoose-test",target:"_blank",rel:"noopener noreferrer",children:"mongoose 操作 mongodb"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/nest-mongoose",target:"_blank",rel:"noopener noreferrer",children:"nest 集成 mongoose"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们学习了用 mongoose 操作 MongoDB 以及在 Nest 里集成 mongoose。"}),"\n",(0,s.jsx)(n.p,{children:"主要是通过 Schema 描述形状，然后创建 Model，通过一个个 model 对象保存数据和做 CRUD。"}),"\n",(0,s.jsx)(n.p,{children:"因为 mongodb 本身提供的就是 api 的操作方式，而 mongoose 的 api 也是对底层 api 的封装，\n所以基本可以直接上手用。"})]})}function B(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(P,{...e})}):P(e)}let y=B;B.__RSPRESS_PAGE_META={},B.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F196.%20%E4%BD%BF%E7%94%A8%20mongoose%20%E6%93%8D%E4%BD%9C%20MongoDB%20%E6%95%B0%E6%8D%AE%E5%BA%93.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"196. 使用 mongoose 操作 MongoDB 数据库",headingTitle:"196. 使用 mongoose 操作 MongoDB 数据库",frontmatter:{}}}}]);