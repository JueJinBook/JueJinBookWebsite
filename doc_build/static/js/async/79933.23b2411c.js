"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79933"],{894703:function(e,n,c){c.r(n),c.d(n,{default:()=>i});var r=c(552676),s=c(740453);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",pre:"pre",h3:"h3",strong:"strong"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"11对象的新增方法",children:["11.对象的新增方法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11对象的新增方法",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本章介绍 Object 对象的新增方法。"}),"\n",(0,r.jsxs)(n.h2,{id:"objectis",children:["Object.is()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objectis",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["ES5 比较两个值是否相等，只有两个运算符：相等运算符（",(0,r.jsx)(n.code,{children:"=="}),"）和严格相等运算符（",(0,r.jsx)(n.code,{children:"==="}),"）。它们都有缺点，前者会自动转换数据类型，后者的",(0,r.jsx)(n.code,{children:"NaN"}),"不等于自身，以及",(0,r.jsx)(n.code,{children:"+0"}),"等于",(0,r.jsx)(n.code,{children:"-0"}),"。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。"]}),"\n",(0,r.jsxs)(n.p,{children:["ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。",(0,r.jsx)(n.code,{children:"Object.is"}),"就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.is('foo', 'foo')\n// true\nObject.is({}, {})\n// false\n"})}),"\n",(0,r.jsxs)(n.p,{children:["不同之处只有两个：一是",(0,r.jsx)(n.code,{children:"+0"}),"不等于",(0,r.jsx)(n.code,{children:"-0"}),"，二是",(0,r.jsx)(n.code,{children:"NaN"}),"等于自身。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["ES5 可以通过下面的代码，部署",(0,r.jsx)(n.code,{children:"Object.is"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.defineProperty(Object, 'is', {\n  value: function(x, y) {\n    if (x === y) {\n      // 针对+0 不等于 -0的情况\n      return x !== 0 || 1 / x === 1 / y;\n    }\n    // 针对NaN的情况\n    return x !== x && y !== y;\n  },\n  configurable: true,\n  enumerable: false,\n  writable: true\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"objectassign",children:["Object.assign()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objectassign",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"基本用法",children:["基本用法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本用法",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.assign()"}),"方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const target = { a: 1 };\n\nconst source1 = { b: 2 };\nconst source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.assign()"}),"方法的第一个参数是目标对象，后面的参数都是源对象。"]}),"\n",(0,r.jsx)(n.p,{children:"注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const target = { a: 1, b: 1 };\n\nconst source1 = { b: 2, c: 2 };\nconst source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果只有一个参数，",(0,r.jsx)(n.code,{children:"Object.assign()"}),"会直接返回该参数。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = {a: 1};\nObject.assign(obj) === obj // true\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果该参数不是对象，则会先转成对象，然后返回。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'typeof Object.assign(2) // "object"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["由于",(0,r.jsx)(n.code,{children:"undefined"}),"和",(0,r.jsx)(n.code,{children:"null"}),"无法转成对象，所以如果它们作为参数，就会报错。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.assign(undefined) // 报错\nObject.assign(null) // 报错\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果",(0,r.jsx)(n.code,{children:"undefined"}),"和",(0,r.jsx)(n.code,{children:"null"}),"不在首参数，就不会报错。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let obj = {a: 1};\nObject.assign(obj, undefined) === obj // true\nObject.assign(obj, null) === obj // true\n"})}),"\n",(0,r.jsx)(n.p,{children:"其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const v1 = \'abc\';\nconst v2 = true;\nconst v3 = 10;\n\nconst obj = Object.assign({}, v1, v2, v3);\nconsole.log(obj); // { "0": "a", "1": "b", "2": "c" }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"v1"}),"、",(0,r.jsx)(n.code,{children:"v2"}),"、",(0,r.jsx)(n.code,{children:"v3"}),"分别是字符串、布尔值和数值，结果只有字符串合入目标对象（以字符数组的形式），数值和布尔值都会被忽略。这是因为只有字符串的包装对象，会产生可枚举属性。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'Object(true) // {[[PrimitiveValue]]: true}\nObject(10)  //  {[[PrimitiveValue]]: 10}\nObject(\'abc\') // {0: "a", 1: "b", 2: "c", length: 3, [[PrimitiveValue]]: "abc"}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，布尔值、数值、字符串分别转成对应的包装对象，可以看到它们的原始值都在包装对象的内部属性",(0,r.jsx)(n.code,{children:"[[PrimitiveValue]]"}),"上面，这个属性是不会被",(0,r.jsx)(n.code,{children:"Object.assign()"}),"拷贝的。只有字符串的包装对象，会产生可枚举的实义属性，那些属性则会被拷贝。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.assign()"}),"拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（",(0,r.jsx)(n.code,{children:"enumerable: false"}),"）。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.assign({b: 'c'},\n  Object.defineProperty({}, 'invisible', {\n    enumerable: false,\n    value: 'hello'\n  })\n)\n// { b: 'c' }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"Object.assign()"}),"要拷贝的对象只有一个不可枚举属性",(0,r.jsx)(n.code,{children:"invisible"}),"，这个属性并没有被拷贝进去。"]}),"\n",(0,r.jsxs)(n.p,{children:["属性名为 Symbol 值的属性，也会被",(0,r.jsx)(n.code,{children:"Object.assign()"}),"拷贝。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.assign({ a: 'b' }, { [Symbol('c')]: 'd' })\n// { a: 'b', Symbol(c): 'd' }\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"注意点",children:["注意点",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意点",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"（1）浅拷贝"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.assign()"}),"方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj1 = {a: {b: 1}};\nconst obj2 = Object.assign({}, obj1);\n\nobj1.a.b = 2;\nobj2.a.b // 2\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，源对象",(0,r.jsx)(n.code,{children:"obj1"}),"的",(0,r.jsx)(n.code,{children:"a"}),"属性的值是一个对象，",(0,r.jsx)(n.code,{children:"Object.assign()"}),"拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"（2）同名属性的替换"})}),"\n",(0,r.jsxs)(n.p,{children:["对于这种嵌套的对象，一旦遇到同名属性，",(0,r.jsx)(n.code,{children:"Object.assign()"}),"的处理方法是替换，而不是添加。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const target = { a: { b: 'c', d: 'e' } }\nconst source = { a: { b: 'hello' } }\nObject.assign(target, source)\n// { a: { b: 'hello' } }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"target"}),"对象的",(0,r.jsx)(n.code,{children:"a"}),"属性被",(0,r.jsx)(n.code,{children:"source"}),"对象的",(0,r.jsx)(n.code,{children:"a"}),"属性整个替换掉了，而不会得到",(0,r.jsx)(n.code,{children:"{ a: { b: 'hello', d: 'e' } }"}),"的结果。这通常不是开发者想要的，需要特别小心。"]}),"\n",(0,r.jsxs)(n.p,{children:["一些函数库提供",(0,r.jsx)(n.code,{children:"Object.assign()"}),"的定制版本（比如 Lodash 的",(0,r.jsx)(n.code,{children:"_.defaultsDeep()"}),"方法），可以得到深拷贝的合并。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"（3）数组的处理"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.assign()"}),"可以用来处理数组，但是会把数组视为对象。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.assign([1, 2, 3], [4, 5])\n// [4, 5, 3]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"Object.assign()"}),"把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性",(0,r.jsx)(n.code,{children:"4"}),"覆盖了目标数组的 0 号属性",(0,r.jsx)(n.code,{children:"1"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"（4）取值函数的处理"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.assign()"}),"只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const source = {\n  get foo() { return 1 }\n};\nconst target = {};\n\nObject.assign(target, source)\n// { foo: 1 }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"source"}),"对象的",(0,r.jsx)(n.code,{children:"foo"}),"属性是一个取值函数，",(0,r.jsx)(n.code,{children:"Object.assign()"}),"不会复制这个取值函数，只会拿到值以后，将这个值复制过去。"]}),"\n",(0,r.jsxs)(n.h3,{id:"常见用途",children:["常见用途",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见用途",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.assign()"}),"方法有很多用处。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"（1）为对象添加属性"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面方法通过",(0,r.jsx)(n.code,{children:"Object.assign()"}),"方法，将",(0,r.jsx)(n.code,{children:"x"}),"属性和",(0,r.jsx)(n.code,{children:"y"}),"属性添加到",(0,r.jsx)(n.code,{children:"Point"}),"类的对象实例。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"（2）为对象添加方法"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    \xb7\xb7\xb7\n  },\n  anotherMethod() {\n    \xb7\xb7\xb7\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  \xb7\xb7\xb7\n};\nSomeClass.prototype.anotherMethod = function () {\n  \xb7\xb7\xb7\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用",(0,r.jsx)(n.code,{children:"assign()"}),"方法添加到",(0,r.jsx)(n.code,{children:"SomeClass.prototype"}),"之中。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"（3）克隆对象"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function clone(origin) {\n  return Object.assign({}, origin);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。"}),"\n",(0,r.jsx)(n.p,{children:"不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function clone(origin) {\n  let originProto = Object.getPrototypeOf(origin);\n  return Object.assign(Object.create(originProto), origin);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"（4）合并多个对象"})}),"\n",(0,r.jsx)(n.p,{children:"将多个对象合并到某个对象。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const merge =\n  (target, ...sources) => Object.assign(target, ...sources);\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const merge =\n  (...sources) => Object.assign({}, ...sources);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"（5）为属性指定默认值"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"DEFAULTS"}),"对象是默认值，",(0,r.jsx)(n.code,{children:"options"}),"对象是用户提供的参数。",(0,r.jsx)(n.code,{children:"Object.assign()"}),"方法将",(0,r.jsx)(n.code,{children:"DEFAULTS"}),"和",(0,r.jsx)(n.code,{children:"options"}),"合并成一个新对象，如果两者有同名属性，则",(0,r.jsx)(n.code,{children:"options"}),"的属性值会覆盖",(0,r.jsx)(n.code,{children:"DEFAULTS"}),"的属性值。"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，由于存在浅拷贝的问题，",(0,r.jsx)(n.code,{children:"DEFAULTS"}),"对象和",(0,r.jsx)(n.code,{children:"options"}),"对象的所有属性的值，最好都是简单类型，不要指向另一个对象。否则，",(0,r.jsx)(n.code,{children:"DEFAULTS"}),"对象的该属性很可能不起作用。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const DEFAULTS = {\n  url: {\n    host: 'example.com',\n    port: 7070\n  },\n};\n\nprocessContent({ url: {port: 8000} })\n// {\n//   url: {port: 8000}\n// }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码的原意是将",(0,r.jsx)(n.code,{children:"url.port"}),"改成 8000，",(0,r.jsx)(n.code,{children:"url.host"}),"不变。实际结果却是",(0,r.jsx)(n.code,{children:"options.url"}),"覆盖掉",(0,r.jsx)(n.code,{children:"DEFAULTS.url"}),"，所以",(0,r.jsx)(n.code,{children:"url.host"}),"就不存在了。"]}),"\n",(0,r.jsxs)(n.h2,{id:"objectgetownpropertydescriptors",children:["Object.getOwnPropertyDescriptors()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objectgetownpropertydescriptors",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["ES5 的",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyDescriptor()"}),"方法会返回某个对象属性的描述对象（descriptor）。ES2017 引入了",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyDescriptors()"}),"方法，返回指定对象所有自身属性（非继承属性）的描述对象。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = {\n  foo: 123,\n  get bar() { return 'abc' }\n};\n\nObject.getOwnPropertyDescriptors(obj)\n// { foo:\n//    { value: 123,\n//      writable: true,\n//      enumerable: true,\n//      configurable: true },\n//   bar:\n//    { get: [Function: get bar],\n//      set: undefined,\n//      enumerable: true,\n//      configurable: true } }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyDescriptors()"}),"方法返回一个对象，所有原对象的属性名都是该对象的属性名，对应的属性值就是该属性的描述对象。"]}),"\n",(0,r.jsx)(n.p,{children:"该方法的实现非常容易。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function getOwnPropertyDescriptors(obj) {\n  const result = {};\n  for (let key of Reflect.ownKeys(obj)) {\n    result[key] = Object.getOwnPropertyDescriptor(obj, key);\n  }\n  return result;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["该方法的引入目的，主要是为了解决",(0,r.jsx)(n.code,{children:"Object.assign()"}),"无法正确拷贝",(0,r.jsx)(n.code,{children:"get"}),"属性和",(0,r.jsx)(n.code,{children:"set"}),"属性的问题。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const source = {\n  set foo(value) {\n    console.log(value);\n  }\n};\n\nconst target1 = {};\nObject.assign(target1, source);\n\nObject.getOwnPropertyDescriptor(target1, 'foo')\n// { value: undefined,\n//   writable: true,\n//   enumerable: true,\n//   configurable: true }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"source"}),"对象的",(0,r.jsx)(n.code,{children:"foo"}),"属性的值是一个赋值函数，",(0,r.jsx)(n.code,{children:"Object.assign"}),"方法将这个属性拷贝给",(0,r.jsx)(n.code,{children:"target1"}),"对象，结果该属性的值变成了",(0,r.jsx)(n.code,{children:"undefined"}),"。这是因为",(0,r.jsx)(n.code,{children:"Object.assign"}),"方法总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法。"]}),"\n",(0,r.jsxs)(n.p,{children:["这时，",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyDescriptors()"}),"方法配合",(0,r.jsx)(n.code,{children:"Object.defineProperties()"}),"方法，就可以实现正确拷贝。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const source = {\n  set foo(value) {\n    console.log(value);\n  }\n};\n\nconst target2 = {};\nObject.defineProperties(target2, Object.getOwnPropertyDescriptors(source));\nObject.getOwnPropertyDescriptor(target2, 'foo')\n// { get: undefined,\n//   set: [Function: set foo],\n//   enumerable: true,\n//   configurable: true }\n"})}),"\n",(0,r.jsx)(n.p,{children:"上面代码中，两个对象合并的逻辑可以写成一个函数。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const shallowMerge = (target, source) => Object.defineProperties(\n  target,\n  Object.getOwnPropertyDescriptors(source)\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.getOwnPropertyDescriptors()"}),"方法的另一个用处，是配合",(0,r.jsx)(n.code,{children:"Object.create()"}),"方法，将对象属性克隆到一个新对象。这属于浅拷贝。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const clone = Object.create(Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj));\n\n// 或者\n\nconst shallowClone = (obj) => Object.create(\n  Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj)\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码会克隆对象",(0,r.jsx)(n.code,{children:"obj"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["另外，",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyDescriptors()"}),"方法可以实现一个对象继承另一个对象。以前，继承另一个对象，常常写成下面这样。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = {\n  __proto__: prot,\n  foo: 123,\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["ES6 规定",(0,r.jsx)(n.code,{children:"__proto__"}),"只有浏览器要部署，其他环境不用部署。如果去除",(0,r.jsx)(n.code,{children:"__proto__"}),"，上面代码就要改成下面这样。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = Object.create(prot);\nobj.foo = 123;\n\n// 或者\n\nconst obj = Object.assign(\n  Object.create(prot),\n  {\n    foo: 123,\n  }\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["有了",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyDescriptors()"}),"，我们就有了另一种写法。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = Object.create(\n  prot,\n  Object.getOwnPropertyDescriptors({\n    foo: 123,\n  })\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.getOwnPropertyDescriptors()"}),"也可以用来实现 Mixin（混入）模式。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let mix = (object) => ({\n  with: (...mixins) => mixins.reduce(\n    (c, mixin) => Object.create(\n      c, Object.getOwnPropertyDescriptors(mixin)\n    ), object)\n});\n\n// multiple mixins example\nlet a = {a: 'a'};\nlet b = {b: 'b'};\nlet c = {c: 'c'};\nlet d = mix(c).with(a, b);\n\nd.c // \"c\"\nd.b // \"b\"\nd.a // \"a\"\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码返回一个新的对象",(0,r.jsx)(n.code,{children:"d"}),"，代表了对象",(0,r.jsx)(n.code,{children:"a"}),"和",(0,r.jsx)(n.code,{children:"b"}),"被混入了对象",(0,r.jsx)(n.code,{children:"c"}),"的操作。"]}),"\n",(0,r.jsxs)(n.p,{children:["出于完整性的考虑，",(0,r.jsx)(n.code,{children:"Object.getOwnPropertyDescriptors()"}),"进入标准以后，以后还会新增",(0,r.jsx)(n.code,{children:"Reflect.getOwnPropertyDescriptors()"}),"方法。"]}),"\n",(0,r.jsxs)(n.h2,{id:"__proto__属性objectsetprototypeofobjectgetprototypeof",children:[(0,r.jsx)(n.code,{children:"__proto__"}),"属性，Object.setPrototypeOf()，Object.getPrototypeOf()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#__proto__属性objectsetprototypeofobjectgetprototypeof",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"JavaScript 语言的对象继承是通过原型链实现的。ES6 提供了更多原型对象的操作方法。"}),"\n",(0,r.jsxs)(n.h3,{id:"__proto__属性",children:[(0,r.jsx)(n.code,{children:"__proto__"}),"属性",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#__proto__属性",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"__proto__"}),"属性（前后各两个下划线），用来读取或设置当前对象的原型对象（prototype）。目前，所有浏览器（包括 IE11）都部署了这个属性。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// es5 的写法\nconst obj = {\n  method: function() { ... }\n};\nobj.__proto__ = someOtherObj;\n\n// es6 的写法\nvar obj = Object.create(someOtherObj);\nobj.method = function() { ... };\n"})}),"\n",(0,r.jsxs)(n.p,{children:["该属性没有写入 ES6 的正文，而是写入了附录，原因是",(0,r.jsx)(n.code,{children:"__proto__"}),"前后的双下划线，说明它本质上是一个内部属性，而不是一个正式的对外的 API，只是由于浏览器广泛支持，才被加入了 ES6。标准明确规定，只有浏览器必须部署这个属性，其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的。因此，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的",(0,r.jsx)(n.code,{children:"Object.setPrototypeOf()"}),"（写操作）、",(0,r.jsx)(n.code,{children:"Object.getPrototypeOf()"}),"（读操作）、",(0,r.jsx)(n.code,{children:"Object.create()"}),"（生成操作）代替。"]}),"\n",(0,r.jsxs)(n.p,{children:["实现上，",(0,r.jsx)(n.code,{children:"__proto__"}),"调用的是",(0,r.jsx)(n.code,{children:"Object.prototype.__proto__"}),"，具体实现如下。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.defineProperty(Object.prototype, '__proto__', {\n  get() {\n    let _thisObj = Object(this);\n    return Object.getPrototypeOf(_thisObj);\n  },\n  set(proto) {\n    if (this === undefined || this === null) {\n      throw new TypeError();\n    }\n    if (!isObject(this)) {\n      return undefined;\n    }\n    if (!isObject(proto)) {\n      return undefined;\n    }\n    let status = Reflect.setPrototypeOf(this, proto);\n    if (!status) {\n      throw new TypeError();\n    }\n  },\n});\n\nfunction isObject(value) {\n  return Object(value) === value;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果一个对象本身部署了",(0,r.jsx)(n.code,{children:"__proto__"}),"属性，该属性的值就是对象的原型。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.getPrototypeOf({ __proto__: null })\n// null\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"objectsetprototypeof",children:["Object.setPrototypeOf()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objectsetprototypeof",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.setPrototypeOf"}),"方法的作用与",(0,r.jsx)(n.code,{children:"__proto__"}),"相同，用来设置一个对象的原型对象（prototype），返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// 格式\nObject.setPrototypeOf(object, prototype)\n\n// 用法\nconst o = Object.setPrototypeOf({}, null);\n"})}),"\n",(0,r.jsx)(n.p,{children:"该方法等同于下面的函数。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function setPrototypeOf(obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"下面是一个例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let proto = {};\nlet obj = { x: 10 };\nObject.setPrototypeOf(obj, proto);\n\nproto.y = 20;\nproto.z = 40;\n\nobj.x // 10\nobj.y // 20\nobj.z // 40\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码将",(0,r.jsx)(n.code,{children:"proto"}),"对象设为",(0,r.jsx)(n.code,{children:"obj"}),"对象的原型，所以从",(0,r.jsx)(n.code,{children:"obj"}),"对象可以读取",(0,r.jsx)(n.code,{children:"proto"}),"对象的属性。"]}),"\n",(0,r.jsx)(n.p,{children:"如果第一个参数不是对象，会自动转为对象。但是由于返回的还是第一个参数，所以这个操作不会产生任何效果。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.setPrototypeOf(1, {}) === 1 // true\nObject.setPrototypeOf('foo', {}) === 'foo' // true\nObject.setPrototypeOf(true, {}) === true // true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["由于",(0,r.jsx)(n.code,{children:"undefined"}),"和",(0,r.jsx)(n.code,{children:"null"}),"无法转为对象，所以如果第一个参数是",(0,r.jsx)(n.code,{children:"undefined"}),"或",(0,r.jsx)(n.code,{children:"null"}),"，就会报错。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.setPrototypeOf(undefined, {})\n// TypeError: Object.setPrototypeOf called on null or undefined\n\nObject.setPrototypeOf(null, {})\n// TypeError: Object.setPrototypeOf called on null or undefined\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"objectgetprototypeof",children:["Object.getPrototypeOf()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objectgetprototypeof",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["该方法与",(0,r.jsx)(n.code,{children:"Object.setPrototypeOf"}),"方法配套，用于读取一个对象的原型对象。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.getPrototypeOf(obj);\n"})}),"\n",(0,r.jsx)(n.p,{children:"下面是一个例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function Rectangle() {\n  // ...\n}\n\nconst rec = new Rectangle();\n\nObject.getPrototypeOf(rec) === Rectangle.prototype\n// true\n\nObject.setPrototypeOf(rec, Object.prototype);\nObject.getPrototypeOf(rec) === Rectangle.prototype\n// false\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果参数不是对象，会被自动转为对象。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// 等同于 Object.getPrototypeOf(Number(1))\nObject.getPrototypeOf(1)\n// Number {[[PrimitiveValue]]: 0}\n\n// 等同于 Object.getPrototypeOf(String('foo'))\nObject.getPrototypeOf('foo')\n// String {length: 0, [[PrimitiveValue]]: \"\"}\n\n// 等同于 Object.getPrototypeOf(Boolean(true))\nObject.getPrototypeOf(true)\n// Boolean {[[PrimitiveValue]]: false}\n\nObject.getPrototypeOf(1) === Number.prototype // true\nObject.getPrototypeOf('foo') === String.prototype // true\nObject.getPrototypeOf(true) === Boolean.prototype // true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果参数是",(0,r.jsx)(n.code,{children:"undefined"}),"或",(0,r.jsx)(n.code,{children:"null"}),"，它们无法转为对象，所以会报错。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.getPrototypeOf(null)\n// TypeError: Cannot convert undefined or null to object\n\nObject.getPrototypeOf(undefined)\n// TypeError: Cannot convert undefined or null to object\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"objectkeysobjectvaluesobjectentries",children:["Object.keys()，Object.values()，Object.entries()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objectkeysobjectvaluesobjectentries",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"objectkeys",children:["Object.keys()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objectkeys",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["ES5 引入了",(0,r.jsx)(n.code,{children:"Object.keys"}),"方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'var obj = { foo: \'bar\', baz: 42 };\nObject.keys(obj)\n// ["foo", "baz"]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["ES2017 ",(0,r.jsx)(n.a,{href:"https://github.com/tc39/proposal-object-values-entries",target:"_blank",rel:"noopener noreferrer",children:"引入"}),"了跟",(0,r.jsx)(n.code,{children:"Object.keys"}),"配套的",(0,r.jsx)(n.code,{children:"Object.values"}),"和",(0,r.jsx)(n.code,{children:"Object.entries"}),"，作为遍历一个对象的补充手段，供",(0,r.jsx)(n.code,{children:"for...of"}),"循环使用。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let {keys, values, entries} = Object;\nlet obj = { a: 1, b: 2, c: 3 };\n\nfor (let key of keys(obj)) {\n  console.log(key); // 'a', 'b', 'c'\n}\n\nfor (let value of values(obj)) {\n  console.log(value); // 1, 2, 3\n}\n\nfor (let [key, value] of entries(obj)) {\n  console.log([key, value]); // ['a', 1], ['b', 2], ['c', 3]\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"objectvalues",children:["Object.values()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objectvalues",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.values"}),"方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = { foo: 'bar', baz: 42 };\nObject.values(obj)\n// [\"bar\", 42]\n"})}),"\n",(0,r.jsx)(n.p,{children:"返回数组的成员顺序，与本章的《属性的遍历》部分介绍的排列规则一致。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = { 100: 'a', 2: 'b', 7: 'c' };\nObject.values(obj)\n// [\"b\", \"c\", \"a\"]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，属性名为数值的属性，是按照数值大小，从小到大遍历的，因此返回的顺序是",(0,r.jsx)(n.code,{children:"b"}),"、",(0,r.jsx)(n.code,{children:"c"}),"、",(0,r.jsx)(n.code,{children:"a"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.values"}),"只返回对象自身的可遍历属性。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = Object.create({}, {p: {value: 42}});\nObject.values(obj) // []\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"Object.create"}),"方法的第二个参数添加的对象属性（属性",(0,r.jsx)(n.code,{children:"p"}),"），如果不显式声明，默认是不可遍历的，因为",(0,r.jsx)(n.code,{children:"p"}),"的属性描述对象的",(0,r.jsx)(n.code,{children:"enumerable"}),"默认是",(0,r.jsx)(n.code,{children:"false"}),"，",(0,r.jsx)(n.code,{children:"Object.values"}),"不会返回这个属性。只要把",(0,r.jsx)(n.code,{children:"enumerable"}),"改成",(0,r.jsx)(n.code,{children:"true"}),"，",(0,r.jsx)(n.code,{children:"Object.values"}),"就会返回属性",(0,r.jsx)(n.code,{children:"p"}),"的值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = Object.create({}, {p:\n  {\n \xa0 \xa0value: 42,\n \xa0 \xa0enumerable: true\n \xa0}\n});\nObject.values(obj) // [42]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.values"}),"会过滤属性名为 Symbol 值的属性。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.values({ [Symbol()]: 123, foo: 'abc' });\n// ['abc']\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果",(0,r.jsx)(n.code,{children:"Object.values"}),"方法的参数是一个字符串，会返回各个字符组成的一个数组。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.values('foo')\n// ['f', 'o', 'o']\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，字符串会先转成一个类似数组的对象。字符串的每个字符，就是该对象的一个属性。因此，",(0,r.jsx)(n.code,{children:"Object.values"}),"返回每个属性的键值，就是各个字符组成的一个数组。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果参数不是对象，",(0,r.jsx)(n.code,{children:"Object.values"}),"会先将其转为对象。由于数值和布尔值的包装对象，都不会为实例添加非继承的属性。所以，",(0,r.jsx)(n.code,{children:"Object.values"}),"会返回空数组。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.values(42) // []\nObject.values(true) // []\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"objectentries",children:["Object.entries()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objectentries",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.entries()"}),"方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const obj = { foo: \'bar\', baz: 42 };\nObject.entries(obj)\n// [ ["foo", "bar"], ["baz", 42] ]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["除了返回值不一样，该方法的行为与",(0,r.jsx)(n.code,{children:"Object.values"}),"基本一致。"]}),"\n",(0,r.jsx)(n.p,{children:"如果原对象的属性名是一个 Symbol 值，该属性会被忽略。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.entries({ [Symbol()]: 123, foo: 'abc' });\n// [ [ 'foo', 'abc' ] ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，原对象有两个属性，",(0,r.jsx)(n.code,{children:"Object.entries"}),"只输出属性名非 Symbol 值的属性。将来可能会有",(0,r.jsx)(n.code,{children:"Reflect.ownEntries()"}),"方法，返回对象自身的所有属性。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.entries"}),"的基本用途是遍历对象的属性。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'let obj = { one: 1, two: 2 };\nfor (let [k, v] of Object.entries(obj)) {\n  console.log(\n    `${JSON.stringify(k)}: ${JSON.stringify(v)}`\n  );\n}\n// "one": 1\n// "two": 2\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.entries"}),"方法的另一个用处是，将对象转为真正的",(0,r.jsx)(n.code,{children:"Map"}),"结构。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = { foo: 'bar', baz: 42 };\nconst map = new Map(Object.entries(obj));\nmap // Map { foo: \"bar\", baz: 42 }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["自己实现",(0,r.jsx)(n.code,{children:"Object.entries"}),"方法，非常简单。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Generator函数的版本\nfunction* entries(obj) {\n  for (let key of Object.keys(obj)) {\n    yield [key, obj[key]];\n  }\n}\n\n// 非Generator函数的版本\nfunction entries(obj) {\n  let arr = [];\n  for (let key of Object.keys(obj)) {\n    arr.push([key, obj[key]]);\n  }\n  return arr;\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"objectfromentries",children:["Object.fromEntries()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objectfromentries",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.fromEntries()"}),"方法是",(0,r.jsx)(n.code,{children:"Object.entries()"}),"的逆操作，用于将一个键值对数组转为对象。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Object.fromEntries([\n  ['foo', 'bar'],\n  ['baz', 42]\n])\n// { foo: \"bar\", baz: 42 }\n"})}),"\n",(0,r.jsx)(n.p,{children:"该方法的主要目的，是将键值对的数据结构还原为对象，因此特别适合将 Map 结构转为对象。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// 例一\nconst entries = new Map([\n  ['foo', 'bar'],\n  ['baz', 42]\n]);\n\nObject.fromEntries(entries)\n// { foo: \"bar\", baz: 42 }\n\n// 例二\nconst map = new Map().set('foo', true).set('bar', false);\nObject.fromEntries(map)\n// { foo: true, bar: false }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["该方法的一个用处是配合",(0,r.jsx)(n.code,{children:"URLSearchParams"}),"对象，将查询字符串转为对象。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'Object.fromEntries(new URLSearchParams(\'foo=bar&baz=qux\'))\n// { foo: "bar", baz: "qux" }\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"objecthasown",children:["Object.hasOwn()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#objecthasown",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["JavaScript 对象的属性分成两种：自身的属性和继承的属性。对象实例有一个",(0,r.jsx)(n.code,{children:"hasOwnProperty()"}),"方法，可以判断某个属性是否为原生属性。ES2022 在",(0,r.jsx)(n.code,{children:"Object"}),"对象上面新增了一个静态方法",(0,r.jsx)(n.a,{href:"https://github.com/tc39/proposal-accessible-object-hasownproperty",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(n.code,{children:"Object.hasOwn()"})}),"，也可以判断是否为自身的属性。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.hasOwn()"}),"可以接受两个参数，第一个是所要判断的对象，第二个是属性名。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const foo = Object.create({ a: 123 });\nfoo.b = 456;\n\nObject.hasOwn(foo, 'a') // false\nObject.hasOwn(foo, 'b') // true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面示例中，对象",(0,r.jsx)(n.code,{children:"foo"}),"的属性",(0,r.jsx)(n.code,{children:"a"}),"是继承属性，属性",(0,r.jsx)(n.code,{children:"b"}),"是原生属性。",(0,r.jsx)(n.code,{children:"Object.hasOwn()"}),"对属性",(0,r.jsx)(n.code,{children:"a"}),"返回",(0,r.jsx)(n.code,{children:"false"}),"，对属性",(0,r.jsx)(n.code,{children:"b"}),"返回",(0,r.jsx)(n.code,{children:"true"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.hasOwn()"}),"的一个好处是，对于不继承",(0,r.jsx)(n.code,{children:"Object.prototype"}),"的对象不会报错，而",(0,r.jsx)(n.code,{children:"hasOwnProperty()"}),"是会报错的。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = Object.create(null);\n\nobj.hasOwnProperty('foo') // 报错\nObject.hasOwn(obj, 'foo') // false\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面示例中，",(0,r.jsx)(n.code,{children:"Object.create(null)"}),"返回的对象",(0,r.jsx)(n.code,{children:"obj"}),"是没有原型的，不继承任何属性，这导致调用",(0,r.jsx)(n.code,{children:"obj.hasOwnProperty()"}),"会报错，但是",(0,r.jsx)(n.code,{children:"Object.hasOwn()"}),"就能正确处理这种情况。"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let i=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F11.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95.md"]={toc:[{text:"Object.is()",id:"objectis",depth:2},{text:"Object.assign()",id:"objectassign",depth:2},{text:"基本用法",id:"基本用法",depth:3},{text:"注意点",id:"注意点",depth:3},{text:"常见用途",id:"常见用途",depth:3},{text:"Object.getOwnPropertyDescriptors()",id:"objectgetownpropertydescriptors",depth:2},{text:"`__proto__`属性，Object.setPrototypeOf()，Object.getPrototypeOf()",id:"__proto__属性objectsetprototypeofobjectgetprototypeof",depth:2},{text:"`__proto__`属性",id:"__proto__属性",depth:3},{text:"Object.setPrototypeOf()",id:"objectsetprototypeof",depth:3},{text:"Object.getPrototypeOf()",id:"objectgetprototypeof",depth:3},{text:"Object.keys()，Object.values()，Object.entries()",id:"objectkeysobjectvaluesobjectentries",depth:2},{text:"Object.keys()",id:"objectkeys",depth:3},{text:"Object.values()",id:"objectvalues",depth:3},{text:"Object.entries()",id:"objectentries",depth:3},{text:"Object.fromEntries()",id:"objectfromentries",depth:2},{text:"Object.hasOwn()",id:"objecthasown",depth:2}],title:"11.对象的新增方法",headingTitle:"11.对象的新增方法",frontmatter:{}}}}]);