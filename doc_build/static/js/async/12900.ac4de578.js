"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["12900"],{909710:function(n,e,r){r.r(e),r.d(e,{default:()=>a});var l=r(552676),i=r(740453);function s(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",blockquote:"blockquote",ol:"ol",li:"li",pre:"pre",code:"code",ul:"ul"},(0,i.ah)(),n.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(e.h1,{id:"25拓展-2go-规范指南",children:["25拓展 2：Go 规范指南",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#25拓展-2go-规范指南",children:"#"})]}),"\n",(0,l.jsxs)(e.h2,{id:"说明",children:["说明",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#说明",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"本小节是拓展内容，笔者会不定期更新 Go 规范指南，使该指南的内容尽可能全，并保证规范的实用性。"}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"说明：本指南参考了网络上各种 REST 最佳实践，结合笔者的实际经验汇总而来。"}),"\n"]}),"\n",(0,l.jsxs)(e.h2,{id:"go-规范指南",children:["Go 规范指南",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#go-规范指南",children:"#"})]}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"写完代码都必须格式化，保证代码优雅：gofmt goimports"}),"\n",(0,l.jsx)(e.li,{children:"编译前先执行代码静态分析：go vet pathxxx/"}),"\n",(0,l.jsx)(e.li,{children:"package 名字：包名与目录保持一致，尽量有意义，简短，不和标准库冲突， 全小写，不要有下划线"}),"\n",(0,l.jsx)(e.li,{children:"竞态检测：go build –race (测试环境编译时加上 -race 选项，生产环境必须去掉，因为 race 限制最多 goroutine 数量为 8192 个)"}),"\n",(0,l.jsx)(e.li,{children:"每行长度约定：一行不要太长，超过请使用换行展示，尽量保持格式优雅；单个文件也不要太大，最好不要超过 500 行"}),"\n",(0,l.jsx)(e.li,{children:"多返回值最多返回三个，超过三个请使用 struct"}),"\n",(0,l.jsx)(e.li,{children:"变量名采用驼峰法，不要有下划线，不要全部大写"}),"\n",(0,l.jsx)(e.li,{children:"在逻辑处理中禁用 panic，除非你知道你在做什么"}),"\n",(0,l.jsx)(e.li,{children:"错误处理的原则就是不能丢弃任何有返回 err 的调用，不要采用_丢弃，必须全部处理。接收到错误，要么返回 err，要么实在不行就 panic，或者使用 log 记录下来。\r\n不要这样写:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:"if err != nil {\r\n\r\n    // error handling\r\n\r\n} else {\r\n\r\n    // normal code\r\n\r\n}\n"})}),"\n",(0,l.jsx)(e.p,{children:"而应该是:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:"if err != nil {\r\n\r\n    // error handling\r\n\r\n    return // or continue, etc.\r\n}\r\n\r\n// normal code\n"})}),"\n",(0,l.jsxs)(e.ol,{start:"10",children:["\n",(0,l.jsx)(e.li,{children:"常用的首字母缩写名词，使用全小写或者全大写，如 UIN URL HTTP ID IP OK"}),"\n",(0,l.jsx)(e.li,{children:"Receiver:：用一两个字符，能够表示出类型，不要使用 me self this"}),"\n",(0,l.jsx)(e.li,{children:"参数传递:"}),"\n"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"对于少量数据，不要传递指针"}),"\n",(0,l.jsx)(e.li,{children:"对于大量数据的 struct 可以考虑使用指针"}),"\n",(0,l.jsx)(e.li,{children:"传入参数是 map，slice，chan，interface，string 不要传递指针"}),"\n"]}),"\n",(0,l.jsxs)(e.ol,{start:"13",children:["\n",(0,l.jsx)(e.li,{children:"每个基础库都必须有实际可运行的例子, 基础库的接口都要有单元测试用例"}),"\n",(0,l.jsx)(e.li,{children:"不要在 for 循环里面使用 defer，defer只有在函数退出时才会执行"}),"\n",(0,l.jsx)(e.li,{children:"panic 捕获只能到goroutine最顶层，每个自己启动的 goroutine，必须在入口处就捕获panic，并打印出详细的堆栈信息"}),"\n",(0,l.jsx)(e.li,{children:"Go 的内置类型slice、map、chan都是引用，初次使用前，都必须先用 make 分配好对象，不然会有空指针异常"}),"\n",(0,l.jsx)(e.li,{children:"使用 map 时需要注意：map 初次使用，必须用 make 初始化；map 是引用，不用担心赋值内存拷贝；并发操作时，需要加锁；range 遍历时顺序不确定，不可依赖；不能使用 slice、map 和 func 作为 key"}),"\n",(0,l.jsx)(e.li,{children:"import 在多行的情况下，goimports 会自动帮你格式化，但是我们这里还是规范一下 import 的一些规范，如果你在一个文件里面引入了一个 package，还是建议采用如下格式："}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:'import (\r\n    "fmt"\r\n)\n'})}),"\n",(0,l.jsx)(e.p,{children:"如果你的包引入了三种类型的包，标准库包，程序内部包，第三方包，建议采用如下方式进行组织你的包："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:'import (\r\n    "encoding/json"\r\n    "strings"\r\n\r\n    "myproject/models"\r\n    "myproject/controller"\r\n    "myproject/utils"\r\n\r\n    "github.com/astaxie/beego"\r\n    "github.com/go-sql-driver/mysql"\r\n)   \n'})}),"\n",(0,l.jsx)(e.p,{children:"有顺序的引入包，不同的类型采用空格分离，第一种实标准库，第二是项目包，第三是第三方包。"}),"\n",(0,l.jsxs)(e.ol,{start:"19",children:["\n",(0,l.jsx)(e.li,{children:"如果你的函数很短小，少于 10 行代码，那么可以使用，不然请直接使用类型，因为如果使用命名变量很容易引起隐藏的 bug。\r\n当然如果是有多个相同类型的参数返回，那么命名参数可能更清晰："}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:"func (f *Foo) Location() (float64, float64, error)\n"})}),"\n",(0,l.jsxs)(e.ol,{start:"20",children:["\n",(0,l.jsxs)(e.li,{children:["长句子打印或者调用，使用参数进行格式化分行\r\n我们在调用 ",(0,l.jsx)(e.code,{children:"fmt.Sprint"})," 或者 ",(0,l.jsx)(e.code,{children:"log.Sprint"})," 之类的函数时，有时候会遇到很长的句子，我们需要在参数调用处进行多行分割："]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"下面是错误的方式："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:"log.Printf(“A long format string: %s %d %d %s”, myStringParameter, len(a),\r\n    expected.Size, defrobnicate(“Anotherlongstringparameter”,\r\n        expected.Growth.Nanoseconds() /1e6))\n"})}),"\n",(0,l.jsx)(e.p,{children:"应该是如下的方式："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:"log.Printf( \r\n    “A long format string: %s %d %d %s”, \r\n    myStringParameter,\r\n    len(a),\r\n    expected.Size,\r\n    defrobnicate(\r\n        “Anotherlongstringparameter”,\r\n        expected.Growth.Nanoseconds()/1e6, \r\n    ),\r\n）   \n"})}),"\n",(0,l.jsxs)(e.ol,{start:"21",children:["\n",(0,l.jsx)(e.li,{children:"注意闭包的调用\r\n在循环中调用函数或者 goroutine 方法，一定要采用显示的变量调用，不要在闭包函数里调用循环的参数"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:"fori:=0;i<limit;i++{\r\n    go func(){ DoSomething(i) }() //错误的做法\r\n    go func(i int){ DoSomething(i) }(i)//正确的做法\r\n}\n"})}),"\n",(0,l.jsxs)(e.ol,{start:"22",children:["\n",(0,l.jsx)(e.li,{children:"recieved 是值类型还是指针类型\r\n到底是采用值类型还是指针类型主要参考如下原则："}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:"func(w Win) Tally(playerPlayer)int    //w不会有任何改变 \r\nfunc(w *Win) Tally(playerPlayer)int    //w会改变数据\n"})}),"\n",(0,l.jsxs)(e.ol,{start:"23",children:["\n",(0,l.jsx)(e.li,{children:"struct 声明和初始化格式采用多行：\r\n定义如下："}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:"type User struct{\r\n    Username  string\r\n    Email     string\r\n}\n"})}),"\n",(0,l.jsx)(e.p,{children:"初始化如下："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:'u := User{\r\n    Username: "astaxie",\r\n    Email:    "astaxie@gmail.com",\r\n}\n'})}),"\n",(0,l.jsxs)(e.ol,{start:"24",children:["\n",(0,l.jsx)(e.li,{children:"变量命名"}),"\n"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["和结构体类似，变量名称一般遵循驼峰法，首字母根据访问控制原则大写或者小写，但遇到特有名词时，需要遵循以下规则：","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"如果变量为私有，且特有名词为首个单词，则使用小写，如 apiClient"}),"\n",(0,l.jsx)(e.li,{children:"其它情况都应当使用该名词原有的写法，如 APIClient、repoID、UserID"}),"\n",(0,l.jsx)(e.li,{children:"错误示例：UrlArray，应该写成 urlArray 或者 URLArray"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.li,{children:"若变量类型为 bool 类型，则名称应以 Has、Is、Can 或 Allow 开头"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:"var isExist bool\r\nvar hasConflict bool\r\nvar canManage bool\r\nvar allowGitHook bool\n"})}),"\n",(0,l.jsxs)(e.ol,{start:"25",children:["\n",(0,l.jsx)(e.li,{children:"常量命名\r\n常量均需使用全部大写字母组成，并使用下划线分词"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-go",children:'const APP_VER = "1.0"\n'})})]})}function c(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(s,{...n})}):s(n)}let a=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F25%E6%8B%93%E5%B1%95%202%EF%BC%9AGo%20%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97.md"]={toc:[{text:"说明",id:"说明",depth:2},{text:"Go 规范指南",id:"go-规范指南",depth:2}],title:"25拓展 2：Go 规范指南",headingTitle:"25拓展 2：Go 规范指南",frontmatter:{}}}}]);