"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["53730"],{109660:function(e,n,s){e.exports=s.p+"static/image/1d561c2fcd8aa892cd4ea3f0373ca87c.02377fc0.webp"},974922:function(e,n,s){e.exports=s.p+"static/image/914f03c4c6b58475779bc81e1ed3a9ef.3ca6407e.webp"},792699:function(e,n,s){e.exports=s.p+"static/image/fb5760fee7cd147658aa2ffb75e7b47f.8c005ae7.webp"},979884:function(e,n,s){s.r(n),s.d(n,{default:()=>X});var r=s(552676),a=s(740453);let c=s.p+"static/image/57314e6472ce6efb25463f773c431a02.ef0bd9fa.webp",t=s.p+"static/image/6c0bdeb6512a1f01825d1c97f80ca23d.9112c86b.webp",i=s.p+"static/image/d2c52fbfac57d818dc486dab744fb383.062f6562.webp",d=s.p+"static/image/238dd4a30e7021ddbd09edba0c214b45.0d437846.webp",p=s.p+"static/image/14917df60fd82ee193224bb277880b6c.bd830a3f.webp",o=s.p+"static/image/c8eade8bfe7684604b6cc17d7527aed6.05cd48c0.webp",l=s.p+"static/image/30db11fcb989e56b097f1444cc0f3beb.75e196b0.webp",h=s.p+"static/image/f76be04ad48d6791be7c6692b2ddfc2f.1d32140a.webp",x=s.p+"static/image/7a759be83fa5c64b4e6fdcf9e504ee2c.d69c7140.webp",j=s.p+"static/image/5e0b13c2995737bd7a2c4f1b3cb7de33.d58009b0.webp",u=s.p+"static/image/5e70e8cfd66b0bb18e2ef7369b1caf62.3865719f.webp",m=s.p+"static/image/d9ce841d78e4f39490847115f27afca5.e174b0b8.webp",g=s.p+"static/image/94a5395bbed7b4a81e3f8711f691d624.3ec12c27.webp",b=s.p+"static/image/210b2d1cea5c498089bbedab32719035.cc517a7c.webp",f=s.p+"static/image/a687f1c09341be28fa5fc3f0742d6941.61923d37.webp",w=s.p+"static/image/9e230bd7d1b2a08c166809cc1d700349.3f7436bf.webp",E=s.p+"static/image/af0227a02907cd4ced19bfec82ccb13d.8fdbf3c4.webp",_=s.p+"static/image/5282867a69611ab6dcda333fb244edaf.3f477977.webp",v=s.p+"static/image/6f29b72550f27452bd4c602258c372ed.92a43c39.webp",y=s.p+"static/image/a1c645c92ccc6db5064d73e24a31e8e7.494d3514.webp",I=s.p+"static/image/8edf2c01e98899edb389accbf35fc0d2.cba7c2ba.webp",U=s.p+"static/image/f56e4ab3823b851f1e2afba09dc0eb73.6b55ef54.webp",N=s.p+"static/image/853070386ed9f0f958f8bd78ac04426e.4e79d643.webp",D=s.p+"static/image/2a0685303299363c30cc9e45bd384131.ca712ab5.webp",k=s.p+"static/image/62b546ff9f054dc8e4848c97861b7738.e280bb9d.webp",A=s.p+"static/image/b5a4622938115c71bad156c86c8d6f91.0826cc69.webp";var R=s(109660),S=s(974922),B=s(792699);let P=s.p+"static/image/4670833009c797e1d475cd774430b6fc.bf2d2e53.webp",C=s.p+"static/image/47e1d64522d859af0c1764275e314911.06346516.webp",$=s.p+"static/image/a5b4e62ecbca4baf2166d77f93ce1e1d.83e2f528.webp",q=s.p+"static/image/e12824f73c423309e5b4d0e6445de11a.db473d4e.webp",H=s.p+"static/image/ac19df74ebfdbf5a4f8d0586192e8e9c.5aa72605.webp",F=s.p+"static/image/53714ced3586323dab2df457deab85d1.bfd89424.webp",L=s.p+"static/image/d4f720ac34b92fefeb266a9af0bc1d56.5e01495a.webp",T=s.p+"static/image/9370ad2a44c425702d11099be053e25e.f2c56677.webp",O=s.p+"static/image/6636ae5bff66d043297c2591a3aa1fe6.21c276c1.webp",G=s.p+"static/image/43958e8d2520ea379720914258c50997.e1a98af6.webp",M=s.p+"static/image/9d6146130f4a12319e72f7b84824c948.465dbe78.webp",Q=s.p+"static/image/5e211351e44c574e474e40ac3fd9d902.6da12e44.webp",z=s.p+"static/image/8582ce8fd095a709b4c202aaab379d23.77158302.webp",J=s.p+"static/image/636ae9d68d0d75b15af1916ec97b0a46.9c6eb445.webp",V=s.p+"static/image/f6e972dbb65973d6121b16af5815a1ba.1c1146c1.webp";function K(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"113-会议室预订系统用户管理模块---interceptor修改信息接口",children:["113. 会议室预订系统：用户管理模块-- interceptor、修改信息接口",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#113-会议室预订系统用户管理模块---interceptor修改信息接口",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"用户管理模块我们实现了登录、注册、认证鉴权，还剩下一些列表、更新等接口："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:V,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这节把修改密码、修改信息的接口写完。"}),"\n",(0,r.jsx)(n.p,{children:"在那之前，我们先加一个修改响应内容的拦截器。把响应的格式改成 {code、message、data} 这种。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g interceptor format-response --flat\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:J,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"使用 map 操作符来修改响应："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { Response } from 'express';\nimport { map, Observable } from 'rxjs';\n\n@Injectable()\nexport class FormatResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const response = context.switchToHttp().getResponse<Response>();\n\n    return next.handle().pipe(map((data) => {\n      return {\n        code: response.statusCode,\n        message: 'success',\n        data\n      }\n    }));\n  }\n}\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"全局启用它："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:z,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["这时候访问 ",(0,r.jsx)(n.a,{href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000"})," ，可以看到响应格式变了："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Q,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["这里我用了一个 ",(0,r.jsx)(n.a,{href:"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?utm_source=ext_sidebar&hl=zh-CN",target:"_blank",rel:"noopener noreferrer",children:"JSON Formatter"})," 的 chrome 插件来格式化。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后再试下其它接口："}),"\n",(0,r.jsx)(n.p,{children:"响应格式确实变了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:G,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"抛出的异常还是由内置的 Exception Filter 来处理，返回响应："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后再加一个接口访问记录的 interceptor："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g interceptor invoke-record --flat\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"记录下访问的 ip、user agent、请求的 controller、method，接口耗时、响应内容，当前登录用户等信息。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Request } from 'express';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class InvokeRecordInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(InvokeRecordInterceptor.name);\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler<any>,\n  ): Observable<any> | Promise<Observable<any>> {\n    const request = context.switchToHttp().getRequest<Request>();\n    const response = context.switchToHttp().getResponse<Response>();\n\n    const userAgent = request.headers['user-agent'];\n\n    const { ip, method, path } = request;\n\n    this.logger.debug(\n      `${method} ${path} ${ip} ${userAgent}: ${\n        context.getClass().name\n      } ${\n        context.getHandler().name\n      } invoked...`,\n    );\n  \n    this.logger.debug(`user: ${request.user?.userId}, ${request.user?.username}`);\n\n    const now = Date.now();\n\n    return next.handle().pipe(\n      tap((res) => {\n        this.logger.debug(\n          `${method} ${path} ${ip} ${userAgent}: ${response.statusCode}: ${Date.now() - now}ms`,\n        );\n        this.logger.debug(`Response: ${JSON.stringify(res)}`);\n      }),\n    );\n  }\n}\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"全局启用这个 interceptor："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"试一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"访问管理员的登录的接口。"}),"\n",(0,r.jsx)(n.p,{children:"可以看到控制台打印了请求的路径、请求方法、controller、handler 等信息："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:H,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这里因为是本地访问，所以是 ::1 的 ip，相当于 localhost。"}),"\n",(0,r.jsx)(n.p,{children:"user 因为当前还没有，所以是 undefined"}),"\n",(0,r.jsx)(n.p,{children:"响应之后打印了接口耗时以及接口返回的数据："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:q,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们拿着个 access_token 放在 header 来访问 /aaa 接口试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:$,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，请求之前打印了访问的 controller、handler、user等信息："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"响应之后打印了接口耗时和响应内容等信息："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"为什么 interceptor 里能拿到 user 信息呢？"}),"\n",(0,r.jsx)(n.p,{children:"因为这是在 LoginGuard 里从 jwt 取出来放到  request.user 的，而 Guard 在 interceptor 之前调用："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后实现普通用户和管理员修改密码、修改信息的接口。"}),"\n",(0,r.jsx)(n.p,{children:"涉及到这 4 个页面："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"分别是 /user/update_password 和 /user/admin/update_password、/user/update、/user/admin/update"}),"\n",(0,r.jsx)(n.p,{children:"不过在修改信息之前，需要先实现查询用户信息的接口，用来回显数据。"}),"\n",(0,r.jsx)(n.p,{children:"在 UserController 添加一个 /user/info 接口："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Get('info')\n@RequireLogin()\nasync info(@UserInfo('userId') userId: number) {\n  return await this.userService.findUserDetailById(userId);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"加上 @RequireLogin 装饰，这样 LoginGuard 就会对 /user/info 的请求做登录检查，并把 user 信息放到 request 上。"}),"\n",(0,r.jsx)(n.p,{children:"然后用前面封装的自定义装饰器 @UserInfo 从 reqeust.user 取 userId 注入 handler。"}),"\n",(0,r.jsx)(n.p,{children:"在 UserService  实现 findUserDetailById 方法："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"async findUserDetailById(userId: number) {\n    const user =  await this.userRepository.findOne({\n        where: {\n            id: userId\n        }\n    });\n\n    return user;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"我们测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"登录用户端，拿到 access_token。"}),"\n",(0,r.jsx)(n.p,{children:"然后加到 header 里访问 /user/info"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"成功拿到了 user 的信息。"}),"\n",(0,r.jsx)(n.p,{children:"但这些信息并不是全都需要，比如密码就不需要返回。"}),"\n",(0,r.jsx)(n.p,{children:"我们创建个 vo 来封装返回的结果："}),"\n",(0,r.jsx)(n.p,{children:"创建 /user/vo/user-info.vo.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export class UserDetailVo {\n    id: number;\n\n    username: string;\n\n    nickName: string;\n\n    email: string;\n\n    headPic: string;\n\n    phoneNumber: string;\n\n    isFrozen: boolean;\n\n    createTime: Date;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后把 controller 里的返回值封装成 vo："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Get('info')\n@RequireLogin()\nasync info(@UserInfo('userId') userId: number) {\n  const user = await this.userService.findUserDetailById(userId);\n\n  const vo = new UserDetailVo();\n  vo.id = user.id;\n  vo.email = user.email;\n  vo.username = user.username;\n  vo.headPic = user.headPic;\n  vo.phoneNumber = user.phoneNumber;\n  vo.nickName = user.nickName;\n  vo.createTime = user.createTime;\n  vo.isFrozen = user.isFrozen;\n\n  return vo;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"现在返回的内容就是合理的了。"}),"\n",(0,r.jsx)(n.p,{children:"然后实现修改密码的接口："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:U,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"管理员和用户修改密码的页面是一样的，我们就用一个接口就好了。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Post(['update_password', 'admin/update_password'])\n@RequireLogin()\nasync updatePassword(@UserInfo('userId') userId: number, @Body() passwordDto: UpdateUserPasswordDto) {\n    console.log(passwordDto);\n    return 'success';\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"@Post 写个数组，就代表数组里的这两个路由是同一个 handler 处理。"}),"\n",(0,r.jsx)(n.p,{children:"这个接口同样是需要登录的，所以加上 @RequireLogin 的装饰器。"}),"\n",(0,r.jsx)(n.p,{children:"用 @UserInfo 从 request.user 取 userId，其余的通过 dto 传。"}),"\n",(0,r.jsx)(n.p,{children:"创建 src/user/dto/update-user-password.dto.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { IsEmail, IsNotEmpty, MinLength } from \"class-validator\";\n\nexport class UpdateUserPasswordDto {    \n    @IsNotEmpty({\n        message: '密码不能为空'\n    })\n    @MinLength(6, {\n        message: '密码不能少于 6 位'\n    })\n    password: string;\n    \n    @IsNotEmpty({\n        message: '邮箱不能为空'\n    })\n    @IsEmail({}, {\n        message: '不是合法的邮箱格式'\n    })\n    email: string;\n    \n    @IsNotEmpty({\n        message: '验证码不能为空'\n    })\n    captcha: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"需要传的是邮箱、密码、验证码。"}),"\n",(0,r.jsx)(n.p,{children:"确认密码在前端和密码对比就行，不需要传到后端。"}),"\n",(0,r.jsx)(n.p,{children:"测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:I,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"登录用户端，拿到 access_token，然后访问 /user/update_password 和 /user/admin/update_password 接口："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"都能正常接收到数据。"}),"\n",(0,r.jsx)(n.p,{children:"然后实现下具体的更新密码的逻辑："}),"\n",(0,r.jsx)(n.p,{children:"先查询 redis 中有没有邮箱对应的验证码，没有的话就返回验证码不存在或者不正确。"}),"\n",(0,r.jsx)(n.p,{children:"查到的话再调用 Repository 去更新数据库中的用户密码。"}),"\n",(0,r.jsx)(n.p,{children:"也就是这样的："}),"\n",(0,r.jsx)(n.p,{children:"在 UserController 里调用 UserService 的方法："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Post(['update_password', 'admin/update_password'])\n@RequireLogin()\nasync updatePassword(@UserInfo('userId') userId: number, @Body() passwordDto: UpdateUserPasswordDto) {\n    return await this.userService.updatePassword(userId, passwordDto);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"UserService 实现具体的逻辑："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"async updatePassword(userId: number, passwordDto: UpdateUserPasswordDto) {\n    const captcha = await this.redisService.get(`update_password_captcha_${passwordDto.email}`);\n\n    if(!captcha) {\n        throw new HttpException('验证码已失效', HttpStatus.BAD_REQUEST);\n    }\n\n    if(passwordDto.captcha !== captcha) {\n        throw new HttpException('验证码不正确', HttpStatus.BAD_REQUEST);\n    }\n\n    const foundUser = await this.userRepository.findOneBy({\n      id: userId\n    });\n\n    foundUser.password = md5(passwordDto.password);\n\n    try {\n      await this.userRepository.save(foundUser);\n      return '密码修改成功';\n    } catch(e) {\n      this.logger.error(e, UserService);\n      return '密码修改失败';\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"先查询 redis 中有相对应的验证码，检查通过之后根据 id 查询用户信息，修改密码之后 save。"}),"\n",(0,r.jsx)(n.p,{children:"测试下："}),"\n",(0,r.jsx)(n.p,{children:"登录 lisi 账号，拿到 access_token"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"数据库中可以查到 lisi 的邮箱："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"带上 access_token 访问更新密码接口："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["先手动去 redis 里添加 ",(0,r.jsx)(n.a,{href:"mailto:update_password_captcha_yy@yy.com",children:"update_password_captcha_yy@yy.com"})," 的 key，值为 123123（注意，我们现在用的是 redis 的 db1）"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"半小时过期。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后再试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"修改成功。"}),"\n",(0,r.jsx)(n.p,{children:"数据库里看不到具体的密码，但也能看出确实变了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"之前是这样的："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后我们登录下试试就知道了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"用之前的密码登录，会提示密码错误。"}),"\n",(0,r.jsx)(n.p,{children:"换成新密码就好了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后再加上这个发送邮箱验证码的接口："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Get('update_password/captcha')\nasync updatePasswordCaptcha(@Query('address') address: string) {\n    const code = Math.random().toString().slice(2,8);\n\n    await this.redisService.set(`update_password_captcha_${address}`, code, 10 * 60);\n\n    await this.emailService.sendMail({\n      to: address,\n      subject: '更改密码验证码',\n      html: `<p>你的更改密码验证码是 ${code}</p>`\n    });\n    return '发送成功';\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"和之前注册验证码的逻辑一样。"}),"\n",(0,r.jsx)(n.p,{children:"然后还有修改个人信息的："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"对应 /user/udpate 和 /user/admin/update 接口。"}),"\n",(0,r.jsx)(n.p,{children:"回显数据的接口就用 /user/info 这个。"}),"\n",(0,r.jsx)(n.p,{children:"实现流程和修改密码的差不多："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Post(['update', 'admin/update'])\n@RequireLogin()\nasync update(@UserInfo('userId') userId: number, @Body() updateUserDto: UpdateUserDto) {\n    return await this.userService.update(userId, updateUserDto); \n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 UserController 定义两个 post 接口。"}),"\n",(0,r.jsx)(n.p,{children:"创建 src/user/dto/udpate-user.dto.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { IsEmail, IsNotEmpty } from \"class-validator\";\n\nexport class UpdateUserDto {\n\n    headPic: string;\n\n    nickName: string;\n    \n    @IsNotEmpty({\n        message: '邮箱不能为空'\n    })\n    @IsEmail({}, {\n        message: '不是合法的邮箱格式'\n    })\n    email: string;\n    \n    @IsNotEmpty({\n        message: '验证码不能为空'\n    })\n    captcha: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"这里 headPic 和 nickName 就不做非空约束了，也就是说可以不改。"}),"\n",(0,r.jsx)(n.p,{children:"对应的 UserService 里的逻辑和修改密码的差不多："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"async update(userId: number, updateUserDto: UpdateUserDto) {\n    const captcha = await this.redisService.get(`update_user_captcha_${updateUserDto.email}`);\n\n    if(!captcha) {\n        throw new HttpException('验证码已失效', HttpStatus.BAD_REQUEST);\n    }\n\n    if(updateUserDto.captcha !== captcha) {\n        throw new HttpException('验证码不正确', HttpStatus.BAD_REQUEST);\n    }\n\n    const foundUser = await this.userRepository.findOneBy({\n      id: userId\n    });\n\n    if(updateUserDto.nickName) {\n        foundUser.nickName = updateUserDto.nickName;\n    }\n    if(updateUserDto.headPic) {\n        foundUser.headPic = updateUserDto.headPic;\n    }\n\n    try {\n      await this.userRepository.save(foundUser);\n      return '用户信息修改成功';\n    } catch(e) {\n      this.logger.error(e, UserService);\n      return '用户信息修改成功';\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"只不过现在是传了的属性才会修改，没传的不修改。"}),"\n",(0,r.jsx)(n.p,{children:"测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"登录 lisi 账号拿到 token"}),"\n",(0,r.jsx)(n.p,{children:"带上 token 访问 /user/update 接口："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["提示验证码失效，在 redis 里添加 ",(0,r.jsx)(n.a,{href:"mailto:update_user_captcha_yy@yy.com",children:"update_user_captcha_yy@yy.com"})," 的 key，值为 123456"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后再试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"用户信息修改成功了，在数据库里也可以看到确实修改了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样，修改接口就完成了。"}),"\n",(0,r.jsx)(n.p,{children:"然后还要加一个发验证码的接口，这个和别的发验证码的逻辑一样："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Get('update/captcha')\nasync updateCaptcha(@Query('address') address: string) {\n    const code = Math.random().toString().slice(2,8);\n\n    await this.redisService.set(`update_user_captcha_${address}`, code, 10 * 60);\n\n    await this.emailService.sendMail({\n      to: address,\n      subject: '更改用户信息验证码',\n      html: `<p>你的验证码是 ${code}</p>`\n    });\n    return '发送成功';\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["代码在",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这节我们添加了 interceptor 用来对响应格式做转换，改成 {code、message、data} 的格式，用到了 map 操作符。"}),"\n",(0,r.jsx)(n.p,{children:"并且还用 interceptor 实现了接口访问的日志记录，用到 tap 操作符。"}),"\n",(0,r.jsx)(n.p,{children:"然后实现了修改信息、修改密码的接口。"}),"\n",(0,r.jsx)(n.p,{children:"这些流程都差不多，首先实现一个查询的接口用来回显数据，通过 vo 封装返回的数据。"}),"\n",(0,r.jsx)(n.p,{children:"然后提交数据进行更新，用到的 userId 通过之前封装的 @UserInfo 装饰器从 request.user 来取。"}),"\n",(0,r.jsx)(n.p,{children:"还剩个列表接口，我们下节再写。"})]})}function W(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(K,{...e})}):K(e)}let X=W;W.__RSPRESS_PAGE_META={},W.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F113.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E8%AE%A2%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97--%20interceptor%E3%80%81%E4%BF%AE%E6%94%B9%E4%BF%A1%E6%81%AF%E6%8E%A5%E5%8F%A3.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"113. 会议室预订系统：用户管理模块-- interceptor、修改信息接口",headingTitle:"113. 会议室预订系统：用户管理模块-- interceptor、修改信息接口",frontmatter:{}}}}]);