"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["21285"],{79822:function(n,e,s){s.r(e),s.d(e,{default:()=>d});var a=s(552676),r=s(740453);let c=s.p+"static/image/86fb9afe749c7cde6a52ad12670136a1.da9a9785.png";function i(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",strong:"strong",h4:"h4",pre:"pre",code:"code",img:"img",ul:"ul",li:"li",blockquote:"blockquote"},(0,r.ah)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"23小程序函数与调用",children:["23.小程序函数与调用",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#23小程序函数与调用",children:"#"})]}),"\n",(0,a.jsxs)(e.h2,{id:"37-小程序函数与调用",children:["3.7 小程序函数与调用",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#37-小程序函数与调用",children:"#"})]}),"\n",(0,a.jsxs)(e.h3,{id:"371-函数与调用函数",children:["3.7.1 函数与调用函数",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#371-函数与调用函数",children:"#"})]}),"\n",(0,a.jsxs)(e.p,{children:["函数的作用，可以写一次代码，然后反复地重用这个代码。如果没有函数，一段特定的操作过程用几次就要重复写几次，而使用函数则只需调用一下函数，并传入一些参数即可。",(0,a.jsx)(e.strong,{children:"JavaScript的函数本身也是对象"}),"，因此可以把函数赋值给变量，或者作为参数传递给其他函数。"]}),"\n",(0,a.jsxs)(e.h4,{id:"1函数的定义和结构",children:["1、函数的定义和结构",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1函数的定义和结构",children:"#"})]}),"\n",(0,a.jsxs)(e.p,{children:["我们可以使用",(0,a.jsx)(e.strong,{children:"function"}),"关键词来定义一个函数，括号()里为函数的参数，参数可以有很多个，使用逗号,隔开；函数要执行的代码（语句）使用大括号{}包住："]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function 函数名(参数 1, 参数 2, 参数 3) {\n  代码块内要执行的语句\n}\n"})}),"\n",(0,a.jsxs)(e.h4,{id:"2不带参数的函数",children:["2、不带参数的函数",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2不带参数的函数",children:"#"})]}),"\n",(0,a.jsxs)(e.p,{children:["比如，我们使用开发者工具",(0,a.jsx)(e.strong,{children:"在data.js的Page()对象前"}),"（后面的函数都要写在Page()对象前面哦），添加如下代码："]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'function greet() {\n  console.log("你好，欢迎来到云开发训练营");\n};\ngreet(); //调用greet()函数\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:c,alt:"函数的声明与调用"})}),"\n",(0,a.jsxs)(e.p,{children:["保存之后，我们可以在控制台看到函数打印的字符串。定义一个函数并不会自动的执行它。定义了函数仅仅是赋予函数以名称并明确函数被调用时该做些什么。",(0,a.jsx)(e.strong,{children:"调用"}),"函数才会以给定的参数真正执行这些动作。greet()函数没有参数，调用函数时，直接写函数名+括号即可。"]}),"\n",(0,a.jsxs)(e.h4,{id:"3只有一个参数的函数",children:["3、只有一个参数的函数",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3只有一个参数的函数",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"下面定义了一个简单的平方函数square()，square为函数名，number为函数的参数(名称可以自定义)，使用return语句确定函数的返回值。我们继续在data.js的Page()函数前，输入以下代码："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function square(number) { \n  return number * number;  \n}; \nsquare(5);\n"})}),"\n",(0,a.jsxs)(e.p,{children:["square(5)，就是把5赋值给变量number，然后执行",(0,a.jsx)(e.code,{children:"number*number"}),"，也就是",(0,a.jsx)(e.code,{children:"5*5"}),"，然后返回return这个值。当在函数体中使用return语句时，函数将会停止执行，如果指定一个值，则这个值返回给函数调用者，上面的案例就是将值返回给函数调用者。"]}),"\n",(0,a.jsxs)(e.p,{children:["这里的number被称之为",(0,a.jsx)(e.strong,{children:"形参"}),"，而5被称之为",(0,a.jsx)(e.strong,{children:"实参"}),"。大家可以结合案例就能大致了解形参和实参的意思。"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"形参"}),"是在定义函数时使用的参数，目的是用来接收调用该函数时传进来的实际参数。"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"实参"}),"是在调用时传递给函数的参数"]}),"\n"]}),"\n",(0,a.jsxs)(e.h4,{id:"4多个参数的函数",children:["4、多个参数的函数",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4多个参数的函数",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"有时我们需要处理的功能可能需要多个参数，比如下面的函数把求长方形周长给封装成了一个函数rectangle，这就需要包括两个参数，长方形的长与宽："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function rectangle(length, width) {\n  return (length+width)*2\n}\nconsole.log(rectangle(5, 7))\n"})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:"JavaScript允许传入任意个参数而不影响调用，因此传入的参数可以比定义的参数多，但是不能少。也就是说实参的数量可以多于形参但是不能少于形参。"}),"\n"]}),"\n",(0,a.jsxs)(e.h3,{id:"372-匿名函数与箭头函数",children:["3.7.2 匿名函数与箭头函数",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#372-匿名函数与箭头函数",children:"#"})]}),"\n",(0,a.jsxs)(e.h4,{id:"1匿名函数",children:["1、匿名函数",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1匿名函数",children:"#"})]}),"\n",(0,a.jsxs)(e.p,{children:["函数声明function在语法上是一个语句，但函数也可以由",(0,a.jsx)(e.strong,{children:"函数表达式"}),"创建，这样的函数没有函数名称（匿名）。"]}),"\n",(0,a.jsx)(e.p,{children:"使用开发者工具在data.js的Page()函数前，输入以下代码："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"let square = function(number) {\n  return number * number\n};\nconsole.log(square(4))//使用console.log()输出变量square\n"})}),"\n",(0,a.jsx)(e.p,{children:"执行后，可以在控制台看到输出的结果为16。上面这个function函数没有函数名，相当于是把函数的返回值赋值给了变量square。"}),"\n",(0,a.jsxs)(e.h4,{id:"2箭头函数",children:["2、箭头函数",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2箭头函数",children:"#"})]}),"\n",(0,a.jsxs)(e.p,{children:["为什么叫箭头函数（Arrow Function），因为它定义一个函数用的就是一个箭头",(0,a.jsx)(e.code,{children:"=>"}),"，我们来看两个例子，在data.js的Page()函数前输入以下代码："]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const multiply = (x, y) => {\n  return x * y;\n}\nconst sum= (x, y) => x + y;//连{}和return语句都可以省掉\nconsole.log(multiply(20, 4));\nconsole.log(sum(20, 4));\n"})}),"\n",(0,a.jsxs)(e.p,{children:["在控制台我们可以看到箭头函数打印的结果。箭头函数相当于匿名函数，它没有函数名，而且也简化了函数定义。箭头函数可以只包含一个表达式，甚至连",(0,a.jsx)(e.code,{children:"{ … }"}),"和return都可以省略掉。",(0,a.jsx)(e.strong,{children:"大家可以先只需要了解这个写法就可以了，以后碰到不至于比较迷惑，见多了也试着尝试多写一下。"})]}),"\n",(0,a.jsxs)(e.h3,{id:"373-对象的方法",children:["3.7.3 对象的方法",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#373-对象的方法",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"在小程序里我们会经常将一个匿名函数赋值给对象的一个属性，而这个属性我们可以称之为对象的方法。比如Page()就是一个对象，里面的data就是对象的属性，而一些事件处理函数、生命周期函数都是Page()对象的方法。"}),"\n",(0,a.jsx)(e.p,{children:"可以使用点表示法来调用对象的方法，这个和访问对象的属性没有区别。而调用对象的方法和调用一个函数也是大同小异。调用对象的方法我们在前面就已经接触过大量的案例了，在前面我们已经说过，wx是小程序的全局对象，而在第一节我们打印的很多API，就是调用了wx对象里的方法。"}),"\n",(0,a.jsx)(e.p,{children:"在点击事件章节里，我们创建的事件点击处理函数的写法如下："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"Page({\n  scrollToPosition() { \n  },\n})\n"})}),"\n",(0,a.jsx)(e.p,{children:"对象里面的方法还可以像下面这样写："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"Page({\n  yellowTap:function(){\n  },\n})\n"})}),"\n",(0,a.jsx)(e.p,{children:"这两种写法都是可以执行的，大家可以把这两种写法互相修改一下试试看~"}),"\n",(0,a.jsxs)(e.h3,{id:"374-给构造器添加函数或数据变量",children:["3.7.4 给构造器添加函数或数据变量",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#374-给构造器添加函数或数据变量",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"在小程序构造器或页面构造器，除了有一些默认的生命周期函数以外，我们还可以给App()和Page()添加一些函数以及数据变量。"}),"\n",(0,a.jsxs)(e.h4,{id:"1小程序的全局变量与调用",children:["1、小程序的全局变量与调用",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1小程序的全局变量与调用",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"我们可以在app.js的App({})里添加一个数据变量globalData对象、tcbData对象来存放整个小程序都会使用到的数据："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'App({\n  globalData: {\n    userInfo:{\n      username:"李东bbsky",\n      title:"杂役"\n    }\n  },\n\n  tcbData: {\n    title:"云开发训练营",\n    year:2019,\n    company:"腾讯Tencent"\n  },\n})\n'})}),"\n",(0,a.jsxs)(e.p,{children:["在app.js里声明的数据变量，我们应该如何在页面的js文件里面调用它呢？这个时候我们需要用到",(0,a.jsx)(e.code,{children:"getApp()"}),"来获取小程序全局唯一的App实例，就可以在其他任意页面调用到app.js里声明的数据变量了。"]}),"\n",(0,a.jsx)(e.p,{children:"比如lifecyle就是一个页面，我们可以在lifecyle.js里这样来调用："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const app = getApp() \n\n//在Page外调用\nconsole.log(app.globalData.userInfo.username)\nconsole.log(app.tcbData.title)\nconsole.log(app)\nPage({\n  //在data对象里调用\n  data: {\n    userInfo:app.globalData.userInfo\n  },\n\n  //在生命周期函数里面调用\n  onLoad: function (options) {\n    console.log(app.globalData.userInfo.username)\n    console.log(app.tcbData.title)\n    console.log(app)\n    console.log(this.data.userInfo)\n  }\n})\n"})}),"\n",(0,a.jsxs)(e.p,{children:["而如果我们想在app.js里调用globalData、tcbData对象里的数据，只需要使用this即可，不要使用",(0,a.jsx)(e.code,{children:"getApp()"}),"。"]}),"\n",(0,a.jsxs)(e.h4,{id:"2函数的调用",children:["2、函数的调用",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2函数的调用",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"有的时候要执行一个功能需要写很多个函数，或者有时候我们希望能够把一些特定的功能给封装成一个函数，如果把这些函数整个都写到生命周期函数或事件处理函数里面来调用就很不方便了。"}),"\n",(0,a.jsx)(e.p,{children:"比如一个博客小程序每篇文章发布成功之后，最好给用户一个发布成功的反馈以及会返回上一页，也就是一个功能里面需要执行多个函数，而且这个功能还比较常用，我们可以用如下方式："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"Page({\n  onLoad: function (options) {\n    this.publishSuc() //this调用的是我们封装好的函数publishSuc\n  },\n\n  publishSuc(){\n    wx.showToast({\n      title: '文章发布成功',\n      icon: 'success',\n      duration: 1000\n    },\n    setTimeout(function() {\n			wx.navigateBack({\n				delta: 1\n			})\n		},2000))\n  }\n})\n"})}),"\n",(0,a.jsx)(e.p,{children:"上面的案例没有给函数传递参数，回顾前面形参和实参的知识，我们可以在调用函数的时候用如下的方法传递参数，message和title的名称虽然不一样，但是也没有关系："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"Page({\n  onLoad: function (options) {\n    const message = \"发布失败\"\n    this.publishSuc(message)\n  },\n\n  publishSuc(title){\n    wx.showToast({\n      title: title,\n      icon: 'success',\n      duration: 1000\n    })\n  }\n})\n"})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:"在小程序页面的js文件中声明的变量和函数只在该文件中有效；不同的文件中可以声明相同名字的变量和函数，不会互相影响。"}),"\n"]})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(i,{...n})}):i(n)}let d=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F23.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%87%BD%E6%95%B0%E4%B8%8E%E8%B0%83%E7%94%A8.md"]={toc:[{text:"3.7 小程序函数与调用",id:"37-小程序函数与调用",depth:2},{text:"3.7.1 函数与调用函数",id:"371-函数与调用函数",depth:3},{text:"1、函数的定义和结构",id:"1函数的定义和结构",depth:4},{text:"2、不带参数的函数",id:"2不带参数的函数",depth:4},{text:"3、只有一个参数的函数",id:"3只有一个参数的函数",depth:4},{text:"4、多个参数的函数",id:"4多个参数的函数",depth:4},{text:"3.7.2 匿名函数与箭头函数",id:"372-匿名函数与箭头函数",depth:3},{text:"1、匿名函数",id:"1匿名函数",depth:4},{text:"2、箭头函数",id:"2箭头函数",depth:4},{text:"3.7.3 对象的方法",id:"373-对象的方法",depth:3},{text:"3.7.4 给构造器添加函数或数据变量",id:"374-给构造器添加函数或数据变量",depth:3},{text:"1、小程序的全局变量与调用",id:"1小程序的全局变量与调用",depth:4},{text:"2、函数的调用",id:"2函数的调用",depth:4}],title:"23.小程序函数与调用",headingTitle:"23.小程序函数与调用",frontmatter:{}}}}]);