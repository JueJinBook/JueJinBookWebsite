"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["6639"],{352240:function(e,n,d){d.r(n),d.d(n,{default:()=>i});var r=d(552676),s=d(740453);function c(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",h3:"h3",h4:"h4",pre:"pre",code:"code",blockquote:"blockquote"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"33查询操作符",children:["33.查询操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33查询操作符",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"54-查询操作符",children:["5.4 查询操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#54-查询操作符",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["操作符Command主要分为",(0,r.jsx)(n.strong,{children:"查询操作符"}),"和",(0,r.jsx)(n.strong,{children:"更新操作符"}),"，查询操作符用于db.collection的where条件筛选（也就是都会写在where条件内），而更新操作符则是用于update请求的字段的更新里。查询操作符主要对",(0,r.jsx)(n.strong,{children:"字段的值"}),"进行比较和逻辑的筛选判断。"]}),"\n",(0,r.jsxs)(n.h3,{id:"541-查询操作符基础",children:["5.4.1 查询操作符基础",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#541-查询操作符基础",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1比较逻辑字段查询操作符",children:["1、比较、逻辑、字段查询操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1比较逻辑字段查询操作符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"下面我们把查询操作符的比较操作符和逻辑操作符整理成了一张表格，并附上相应的技术文档，方便大家对它们有一个清晰而整体的认识。"}),"\n",(0,r.jsxs)(n.h4,{id:"2查询操作符的写法",children:["2、查询操作符的写法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2查询操作符的写法",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["首先我们要明确的是查询操作符只能写在where内，查询操作符是基于database数据库引用的，我们以",(0,r.jsx)(n.strong,{children:"大于gt"}),"在小程序端（以大于3000为例）的完整写法为例："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'//简化前\nconst db = wx.cloud.database()\ndb.collection("china")\n  .where({             \n    gdp: wx.cloud.database().command.gt(3000)   \n  })\n\n//简化后，注意变量db和_的声明一定要有哦，这个可以作为一个全局变量，比如写在Page()对象的外面\nconst db = wx.cloud.database()\nconst _ = db.command\ndb.collection("china")\n  .where({             \n    gdp: _.gt(3000)   \n  })\n'})}),"\n",(0,r.jsxs)(n.p,{children:["为了简便，通常我们会把",(0,r.jsx)(n.code,{children:"wx.cloud.database()"}),"会赋值给一个变量db，而把db.command又会赋值给",(0,r.jsx)(n.code,{children:"_"}),"，使用时最终被简化为",(0,r.jsx)(n.code,{children:"_.gt(3000)"}),"。通过一层一层的声明变量并赋值，大大简化了操作符的写法，大家可以在其他操作符都沿用这种写法。"]}),"\n",(0,r.jsxs)(n.h4,{id:"3通过打印了解操作符",children:["3、通过打印了解操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3通过打印了解操作符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们可以在开发者工具的Console控制台输入以下命令，来了解云开发在小程序端到底有哪些操作符："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"wx.cloud.database().command\n"})}),"\n",(0,r.jsx)(n.p,{children:"操作符包含查询操作符、更新操作符以及聚合操作符，而在云函数里我们也可以通过打印来了解云函数端有哪些操作符："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"console.log(cloud.database().command)\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"542-比较操作符",children:["5.4.2 比较操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#542-比较操作符",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1用法丰富的等于eq操作符",children:["1、用法丰富的等于eq操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1用法丰富的等于eq操作符",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["相比于其他的比较操作符等于eq和不等于neq操作符的用法非常丰富，它可以",(0,r.jsx)(n.strong,{children:"进行数值比较"}),"，我们查询某个字段比如GDP等于某个数值如17502.8亿的城市："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:".where({\n  gdp: _.eq(17502.8),\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["它还可以进行",(0,r.jsx)(n.strong,{children:"字符串的匹配"}),"，比如我们查询某个字段比如city完整匹配一个字符串如深圳："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'.where({\n  city: _.eq("深圳"),\n})\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["注意：在查询时，",(0,r.jsx)(n.code,{children:"gdp: _.eq(17502.8)"}),"的效果等同于",(0,r.jsx)(n.code,{children:"gdp:17502.8"}),"，而",(0,r.jsx)(n.code,{children:"city: _.eq(“深圳”)"}),"等同于",(0,r.jsx)(n.code,{children:"city:”深圳”"}),"，虽然两种方式查询的结果都是一致的，但是它们的原理不同，前者用的是等于操作符，后者用的是传递对象值（匹配查询）。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"eq操作符接受一个字面量，除了可以是number, boolean, string以外，还可以是object, array, Date类型，值为数组和对象的情况，后面章节我们会来介绍。"}),"\n",(0,r.jsxs)(n.h4,{id:"2在where中规定多值的in操作符",children:["2、在where中规定多值的in操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2在where中规定多值的in操作符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"使用in和nin，可以在where条件中规定多值，而这多个值要写在一个数组内，比如我们想同时查询北上广深四个城市的经济数据，可以使用："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const db = wx.cloud.database()\nconst _ = db.command\ndb.collection("china")\n  .where({             \n    city: _.in(["北京","上海","广州","深圳"])   \n  })\n'})}),"\n",(0,r.jsxs)(n.p,{children:["数组里的值也可以是数字，比如取值为10、20这两个值，写法为",(0,r.jsx)(n.code,{children:"_.in([10,20])"}),"，这里不要错误理解为10到20。"]}),"\n",(0,r.jsxs)(n.h3,{id:"543-逻辑操作符",children:["5.4.3 逻辑操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#543-逻辑操作符",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1字段内的逻辑操作符",children:["1、字段内的逻辑操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1字段内的逻辑操作符",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["查询",(0,r.jsx)(n.strong,{children:"广东省内"}),"、",(0,r.jsx)(n.strong,{children:"GDP在3000亿以上且在1万亿以下"}),"的城市。在广东省内也就是让字段province的值等于”广东”，而GDP的要求则是GDP这个字段同时满足大于3000亿且小于1万亿，这时就需要用到and（条件与，也就是且的意思）："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'.where({\n  province:_.eq("广东"),\n  gdp:_.gt(3000).and(_.lt(10000))\n})\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["操作符支持链式调用其他操作符，多个操作符之间是逻辑与的关系，比如",(0,r.jsx)(n.code,{children:"gdp:_.gt(3000).and(_.lt(10000))"}),"可以简写成",(0,r.jsx)(n.code,{children:"gdp:_.gt(3000).lt(10000)"}),"也就是省掉了and操作符。and的写法还可以写成如下：",(0,r.jsx)(n.code,{children:"gdp:_.and(_.gt(3000), _.lt(10000))"}),",三种写法都是一样的。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"2跨字段的逻辑操作符",children:["2、跨字段的逻辑操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2跨字段的逻辑操作符",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["上面的案例中where内的两个条件，",(0,r.jsx)(n.code,{children:'province:_.eq("广东")'}),"和 ",(0,r.jsx)(n.code,{children:"gdp:_.gt(3000).and(_.lt(10000))"}),"带有跨字段的",(0,r.jsxs)(n.strong,{children:["条件与and（也就是且）",(0,r.jsx)(n.strong,{children:"的关系，那如何实现跨字段的"}),"条件或or"]}),"呢？"]}),"\n",(0,r.jsxs)(n.p,{children:["查询中国",(0,r.jsx)(n.strong,{children:"GDP在3000亿元以上且常住人口在500万以上或建城区面积在300平方公里以上"}),"的",(0,r.jsx)(n.strong,{children:"前20个大城市"}),"。这里常住人口和建成区面积只需要满足其中一个条件即可，这就涉及到条件或or（",(0,r.jsx)(n.strong,{children:"注意下面代码的格式写法"}),"）："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:".where(\n  {\n    gdp: _.gt(3000),\n    resident_pop:_.gt(500), \n    },\n  _.or([{\n    builtup_area: _.gt(300)}\n    ]), \n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["注意上面三个条件，",(0,r.jsx)(n.code,{children:"gdp:  _.gt(3000)"}),"和",(0,r.jsx)(n.code,{children:"resident_pop:_.gt(500)"}),"是逻辑与，而与 ",(0,r.jsx)(n.code,{children:"builtup_area:  _.gt(300)}"}),"的关系是逻辑或。 ",(0,r.jsx)(n.code,{children:"_.or([{条件一},{条件二}])"}),"内是一个数组，条件一与条件二又构成逻辑与的关系。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"一般不太建议把逻辑操作符写得过于复杂，要尽可能的简单，这也是数据库请求的一个基本原则；在使用逻辑操作符时，能用“是”，就不要用“非”。"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"544字段操作符",children:["5.4.4、字段操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#544字段操作符",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["我们可以使用",(0,r.jsx)(n.code,{children:"_.exists(true|false)"}),"来判断字段是否存在，这个非常适合用于数据清洗处理相关的操作。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"//比如每个记录都有字段_id，可以通过如下选中所有记录\n.where({\n  _id:_.exitst(true)\n})\n\n//比如我们可以判断字段是否存在，从而进行有选择的更新，比如记录不存在gdp这个字段时，可以将字段的值清洗为null\n.where({\n  gdp:_.exitst(false)\n})\n.update({\n  data:{\n    gdp:null\n  }\n})\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"where查询不仅可以服务于get请求，还可以服务于remove以及update，尤其是update，我们可以用查询操作符来对记录进行字段级别的筛选，再通过更新操作符进行字段级别的更新（而且是批量的），这一点对于云开发数据库这种文档型数据库来说非常关键。"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"545-字段字符串的模糊查询",children:["5.4.5 字段字符串的模糊查询",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#545-字段字符串的模糊查询",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["正则表达式能够灵活有效匹配字符串，可以用来检查一个串里是否含有某种子串，比如“CloudBase技术训练营”里是否含有”技术”这个词。云数据库正则查询支持UTF-8的格式，可以进行中英文的模糊查询。",(0,r.jsx)(n.strong,{children:"正则查询也是写在where字段的条件筛选里。"})]}),"\n",(0,r.jsx)(n.p,{children:"我们可以用正则查询来查询某个字段，比如city城市名称内，包含某个字符串比如”州”的城市"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const db = wx.cloud.database()\ndb.collection(\"china\")\n  .where({\n    city: db.RegExp({\n      regexp: '州',\n      options: 'i',\n    })\n  })\n"})}),"\n",(0,r.jsx)(n.p,{children:"注意这里的city是字段，db.RegExp()里的regexp是正则表达式，而options是flag，i是flag的值表示不区分字母的大小写。当然我们也可以直接在where内用JavaScript的原生写法或调用 RegExp对象的构造函数。比如上面的案例也可以写成："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"//JavaScript原生正则写法\n  .where({\n     city:/州/i\n  })\n \n//JavaScript调用RegExp对象的构造函数写法\n  .where({\n    city: new db.RegExp({\n      regexp: \"州\",\n      options: 'i',\n    })\n  })\n"})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let i=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F33.%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C%E7%AC%A6.md"]={toc:[{text:"5.4 查询操作符",id:"54-查询操作符",depth:2},{text:"5.4.1 查询操作符基础",id:"541-查询操作符基础",depth:3},{text:"1、比较、逻辑、字段查询操作符",id:"1比较逻辑字段查询操作符",depth:4},{text:"2、查询操作符的写法",id:"2查询操作符的写法",depth:4},{text:"3、通过打印了解操作符",id:"3通过打印了解操作符",depth:4},{text:"5.4.2 比较操作符",id:"542-比较操作符",depth:3},{text:"1、用法丰富的等于eq操作符",id:"1用法丰富的等于eq操作符",depth:4},{text:"2、在where中规定多值的in操作符",id:"2在where中规定多值的in操作符",depth:4},{text:"5.4.3 逻辑操作符",id:"543-逻辑操作符",depth:3},{text:"1、字段内的逻辑操作符",id:"1字段内的逻辑操作符",depth:4},{text:"2、跨字段的逻辑操作符",id:"2跨字段的逻辑操作符",depth:4},{text:"5.4.4、字段操作符",id:"544字段操作符",depth:3},{text:"5.4.5 字段字符串的模糊查询",id:"545-字段字符串的模糊查询",depth:3}],title:"33.查询操作符",headingTitle:"33.查询操作符",frontmatter:{}}}}]);