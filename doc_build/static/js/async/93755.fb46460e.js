"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["93755"],{478831:function(e,n,r){r.r(n),r.d(n,{default:()=>j});var a=r(552676),s=r(740453);let t=r.p+"static/image/80e499011dd8fb1f8fe5ef71827d14f0.23e568af.webp",i=r.p+"static/image/165195f4c99ee188ceac62f0ebd7b0b0.934ecf08.webp",c=r.p+"static/image/88bd46947821d511c13c90f91d6f1cf0.43dd352e.webp",d=r.p+"static/image/e8e3e06df04318f8b51477c0eaf1d52f.76c80927.webp",o=r.p+"static/image/3fa8d595e4ed7c9a6cc59b1d2e265d82.ba547be4.webp",l=r.p+"static/image/48bb208c48bfe4263ab444b1e0704d62.490b6d01.webp";function h(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",strong:"strong",h2:"h2",pre:"pre",code:"code",img:"img",br:"br"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"17行为型迭代器模式真遍历专家",children:["17.行为型：迭代器模式——真\xb7遍历专家",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#17行为型迭代器模式真遍历专家",children:"#"})]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。          ——《设计模式：可复用面向对象软件的基础》"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["迭代器模式是设计模式中少有的",(0,a.jsx)(n.strong,{children:"目的性极强的模式"}),"。所谓“目的性极强”就是说它不操心别的，它就解决这一个问题——遍历。"]}),"\n",(0,a.jsxs)(n.h2,{id:"公元前的迭代器模式",children:["“公元前”的迭代器模式",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#公元前的迭代器模式",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"遍历作为一种合理、高频的使用需求，几乎没有语言会要求它的开发者手动去实现。在JS中，本身也内置了一个比较简陋的数组迭代器的实现——Array.prototype.forEach。"}),"\n",(0,a.jsx)(n.p,{children:"通过调用forEach方法，我们可以轻松地遍历一个数组："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const arr = [1, 2, 3]\narr.forEach((item, index)=>{\n    console.log(`索引为${index}的元素是${item}`)\n})\n"})}),"\n",(0,a.jsx)(n.p,{children:"但forEach方法并不是万能的，比如下面这种场景："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta http-equiv="X-UA-Compatible" content="ie=edge">\n  <title>事件代理</title>\n</head>\n<body>\n    <a href="#">链接1号</a>\n    <a href="#">链接2号</a>\n    <a href="#">链接3号</a>\n    <a href="#">链接4号</a>\n    <a href="#">链接5号</a>\n    <a href="#">链接6号</a>\n</body>\n</html>\n'})}),"\n",(0,a.jsx)(n.p,{children:"我想拿到所有的a标签，我可以这样做："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const aNodes = document.getElementsByTagName('a')\nconsole.log('aNodes are', aNodes)\n"})}),"\n",(0,a.jsx)(n.p,{children:"我想取其中一个a标签，可以这样做："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const aNode = aNodes[i]\n"})}),"\n",(0,a.jsx)(n.p,{children:"在这个操作的映衬下，aNodes看上去多么像一个数组啊！但当你尝试用数组的原型方法去遍历它时："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"aNodes.forEach((aNode, index){\n    console.log(aNode, index)\n})\n"})}),"\n",(0,a.jsx)(n.p,{children:"你发现报错了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:"forEach报错"})}),"\n",(0,a.jsxs)(n.p,{children:["震惊，原来这个aNodes是个假数组！准确地说，它是一个",(0,a.jsx)(n.strong,{children:"类数组"}),"对象，并没有为你实现好用的forEach方法。也就是说，要想实现类数组的遍历，你得另请高明。"]}),"\n",(0,a.jsxs)(n.p,{children:["现在问题就出现了：普通数组是不是集合？是！aNodes是不是集合？是！同样是集合，同样有遍历需求，我们却要针对不同的数据结构执行不同的遍历手段，好累！",(0,a.jsx)(n.br,{}),"\n","再回头看看迭代器的定义是什么——遍历集合的同时，我们",(0,a.jsx)(n.strong,{children:"不需要关心集合的内部结构"}),"。而forEach只能做到允许我们不关心数组这一种集合的内部结构，看来想要一套统一的遍历方案，我们非得请出一个",(0,a.jsx)(n.strong,{children:"更强的通用迭代器"}),"不可了。"]}),"\n",(0,a.jsxs)(n.p,{children:["这个小节的标题定语里有三个字“公元前”，这个“公元前”怎么定义呢？其实它说的就是ES标准内置迭代器之前的那些日子——差不多四五年之前，彼时还没有这么多轮子，jQuery风头正盛。当时面试可不问什么Vue原理、React原理、Webpack这些，当时问的最多的是",(0,a.jsx)(n.strong,{children:"你读过jQuery源码吗"}),"？",(0,a.jsx)(n.br,{}),"\n","答读过，好，那咱们就有的聊了；答没有？fine，看来你只是个调包侠，回见吧——因为前端的技术点在那时还很有限，可考察的东西也就这么点，读jQuery源码的程序员和不读jQuery源码的程序员在面试官眼里有着质的区别。",(0,a.jsx)(n.br,{}),"\n","这也从一个侧面反映出来，jQuery这个库其实是非常优秀的，至少jQuery里有太多优秀的设计模式可以拿来考考你。就包括咱们当年想用一个真\xb7迭代器又不想自己搞的时候，也是请jQuery实现的迭代器来帮忙："]}),"\n",(0,a.jsx)(n.p,{children:"首先我们要在页面里引入jQuery："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'  <script src="https://cdn.bootcss.com/jquery/3.3.0/jquery.min.js" type="text/javascript"><\/script>\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"借助jQuery的each方法，我们可以用同一套遍历规则遍历不同的集合对象："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const arr = [1, 2, 3]\n    const aNodes = document.getElementsByTagName('a')\n\n    $.each(arr, function (index, item) {\n      console.log(`数组的第${index}个元素是${item}`)\n    })\n\n    $.each(aNodes, function (index, aNode) {\n      console.log(`DOM类数组的第${index}个元素是${aNode.innerText}`)\n    })\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出结果完全没问题："}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)("img",{src:o,alt:""}),"\n当然啦，遍历jQuery自己的集合对象也不在话下："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const jQNodes = $('a')\n$.each(jQNodes, function (index, aNode) {\n      console.log(`jQuery集合的第${index}个元素是${aNode.innerText}`)\n    })\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出结果仍然没问题："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以看出，jQuery的迭代器为我们统一了不同类型集合的遍历方式，使我们在访问集合内每一个成员时不用去关心集合本身的内部结构以及集合与集合间的差异，这就是迭代器存在的价值~"}),"\n",(0,a.jsxs)(n.h2,{id:"es6对迭代器的实现",children:["ES6对迭代器的实现",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#es6对迭代器的实现",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["在“公元前”，JS原生的集合类型数据结构，只有Array（数组）和Object（对象）；而ES6中，又新增了Map和Set。四种数据结构各自有着自己特别的内部实现，但我们仍期待以同样的一套规则去遍历它们，所以ES6在推出新数据结构的同时也推出了一套",(0,a.jsx)(n.strong,{children:"统一的接口机制"}),"——迭代器（Iterator）。"]}),"\n",(0,a.jsx)(n.p,{children:"ES6约定，任何数据结构只要具备Symbol.iterator属性（这个属性就是Iterator的具体实现，它本质上是当前数据结构默认的迭代器生成函数），就可以被遍历——准确地说，是被for...of...循环和迭代器的next方法遍历。 事实上，for...of...的背后正是对next方法的反复调用。"}),"\n",(0,a.jsx)(n.p,{children:"在ES6中，针对Array、Map、Set、String、TypedArray、函数的 arguments 对象、NodeList 对象这些原生的数据结构都可以通过for...of...进行遍历。原理都是一样的，此处我们拿最简单的数组进行举例，当我们用for...of...遍历数组时："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const arr = [1, 2, 3]\nconst len = arr.length\nfor(item of arr) {\n    console.log(`当前元素是${item}`)\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"之所以能够按顺序一次一次地拿到数组里的每一个成员，是因为我们借助数组的Symbol.iterator生成了它对应的迭代器对象，通过反复调用迭代器对象的next方法访问了数组成员，像这样："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const arr = [1, 2, 3]\n// 通过调用iterator，拿到迭代器对象\nconst iterator = arr[Symbol.iterator]()\n\n// 对迭代器对象执行next，就能逐个访问集合的成员\niterator.next()\niterator.next()\niterator.next()\n"})}),"\n",(0,a.jsx)(n.p,{children:"丢进控制台，我们可以看到next每次会按顺序帮我们访问一个集合成员："}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)("img",{src:c,alt:""}),(0,a.jsx)(n.br,{}),"\n","而for...of...做的事情，基本等价于下面这通操作："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 通过调用iterator，拿到迭代器对象\nconst iterator = arr[Symbol.iterator]()\n\n// 初始化一个迭代结果\nlet now = { done: false }\n\n// 循环往外迭代成员\nwhile(!now.done) {\n    now = iterator.next()\n    if(!now.done) {\n        console.log(`现在遍历到了${now.value}`)\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"可以看出，for...of...其实就是iterator循环调用换了种写法。在ES6中我们之所以能够开心地用for...of...遍历各种各种的集合，全靠迭代器模式在背后给力。"}),"\n",(0,a.jsxs)(n.p,{children:["ps：此处推荐阅读",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols",target:"_blank",rel:"noopener noreferrer",children:"迭代协议"}),"，相信大家读过后会对迭代器在ES6中的实现有更深的理解。"]}),"\n",(0,a.jsxs)(n.h2,{id:"一起实现一个迭代器生成函数吧",children:["一起实现一个迭代器生成函数吧!",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一起实现一个迭代器生成函数吧",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"ok，看过了迭代器从古至今的操作，我们一起来实现一个自定义的迭代器。"}),"\n",(0,a.jsxs)(n.p,{children:["楼上我们说",(0,a.jsx)(n.strong,{children:"迭代器对象"}),"全凭",(0,a.jsx)(n.strong,{children:"迭代器生成函数"}),"帮我们生成。在ES6中，实现一个迭代器生成函数并不是什么难事儿，因为ES6早帮我们考虑好了全套的解决方案，内置了贴心的",(0,a.jsx)(n.strong,{children:"生成器"}),"（Generator）供我们使用："]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"注：本小册不要求ES6基础，但生成器语法比较简单，推荐不了解的同学阅读阮老师的生成器教学光速入门"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 编写一个迭代器生成函数\nfunction *iteratorGenerator() {\n    yield '1号选手'\n    yield '2号选手'\n    yield '3号选手'\n}\n\nconst iterator = iteratorGenerator()\n\niterator.next()\niterator.next()\niterator.next()\n"})}),"\n",(0,a.jsx)(n.p,{children:"丢进控制台，不负众望："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"写一个生成器函数并没有什么难度，但在面试的过程中，面试官往往对生成器这种语法糖背后的实现逻辑更感兴趣。下面我们要做的，不仅仅是写一个迭代器对象，而是用ES5去写一个能够生成迭代器对象的迭代器生成函数（解析在注释里）："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 定义生成器函数，入参是任意集合\nfunction iteratorGenerator(list) {\n    // idx记录当前访问的索引\n    var idx = 0\n    // len记录传入集合的长度\n    var len = list.length\n    return {\n        // 自定义next方法\n        next: function() {\n            // 如果索引还没有超出集合长度，done为false\n            var done = idx >= len\n            // 如果done为false，则可以继续取值\n            var value = !done ? list[idx++] : undefined\n            \n            // 将当前值与遍历是否完毕（done）返回\n            return {\n                done: done,\n                value: value\n            }\n        }\n    }\n}\n\nvar iterator = iteratorGenerator(['1号选手', '2号选手', '3号选手'])\niterator.next()\niterator.next()\niterator.next()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["此处为了记录每次遍历的位置，我们实现了一个闭包，借助自由变量来做我们的迭代过程中的“游标”。",(0,a.jsx)(n.br,{}),"\n","运行一下我们自定义的迭代器，结果符合预期："]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:t,alt:"iterator自定义"})}),"\n",(0,a.jsxs)(n.h2,{id:"小结",children:["小结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"迭代器模式比较特别，它非常重要，重要到语言和框架都争着抢着帮我们实现。但也正因为如此，大家业务开发中需要手动写迭代器的场景几乎没有，所以很少有同学会去刻意留意迭代器模式、思考它背后的实现机制。通过阅读本节，希望大家可以领略迭代器模式的妙处（为什么会有，为什么要用）和迭代器模式的实现思路（方便面试）。至此，我们的设计模式之旅就告一段落了~"}),"\n",(0,a.jsx)(n.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function x(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}let j=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["JavaScript%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F17.%E8%A1%8C%E4%B8%BA%E5%9E%8B%EF%BC%9A%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9C%9F%C2%B7%E9%81%8D%E5%8E%86%E4%B8%93%E5%AE%B6.md"]={toc:[{text:"“公元前”的迭代器模式",id:"公元前的迭代器模式",depth:2},{text:"ES6对迭代器的实现",id:"es6对迭代器的实现",depth:2},{text:"一起实现一个迭代器生成函数吧!",id:"一起实现一个迭代器生成函数吧",depth:2},{text:"小结",id:"小结",depth:2}],title:"17.行为型：迭代器模式——真\xb7遍历专家",headingTitle:"17.行为型：迭代器模式——真\xb7遍历专家",frontmatter:{}}}}]);