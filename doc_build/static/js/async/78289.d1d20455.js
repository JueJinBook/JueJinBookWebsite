"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["78289"],{280581:function(e,r,n){n.r(r),n.d(r,{default:()=>t});var s=n(552676),d=n(740453);function i(e){let r=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",code:"code",pre:"pre",h3:"h3",br:"br"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"7第一次数据请求-3将用户信息写入-mysql-数据库",children:["7第一次数据请求 3：将用户信息写入 MySQL 数据库",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#7第一次数据请求-3将用户信息写入-mysql-数据库",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"上两小节已完成逻辑代码，这小节将学习使用 ORM 的方式将用户注册信息写入数据库中。"}),"\n",(0,s.jsxs)(r.h2,{id:"整个逻辑架构图",children:["整个逻辑架构图",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#整个逻辑架构图",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/17/162d43602b033d38?w=769&h=578&f=png&s=33871",alt:""})}),"\n",(0,s.jsxs)(r.p,{children:["数据库的信息（如地址、端口、用户名和密码等）存放在 ",(0,s.jsx)(r.code,{children:"base.py"})," 中，",(0,s.jsx)(r.code,{children:"model.py"})," 中定义了数据库表并从 ",(0,s.jsx)(r.code,{children:"base.py"})," 中获取数据库信息。当 ",(0,s.jsx)(r.code,{children:"main.py"})," 启动时，其将调用 ",(0,s.jsx)(r.code,{children:"model.py"})," 初始化数据库。而 ",(0,s.jsx)(r.code,{children:"users_views.py"})," 负责将客户端的请求数据写入数据库中，并返回注册成功信息。"]}),"\n",(0,s.jsxs)(r.h2,{id:"配置数据用户名和密码",children:["配置数据用户名和密码",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#配置数据用户名和密码",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["用户名为 ",(0,s.jsx)(r.code,{children:"root"}),"，密码为 ",(0,s.jsx)(r.code,{children:"pwd@demo"}),"，\r\n在服务器端输入如下命令配置数据库。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-shell",children:"mysql -u root\r\nset password for 'root' @localhost = password('pwd@demo');\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e761b234df07?w=1023&h=423&f=png&s=46537",alt:""})}),"\n",(0,s.jsxs)(r.h2,{id:"创建数据库",children:["创建数据库",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#创建数据库",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"在服务器端输入如下命令创建数据库。"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-shell",children:"CREATE DATABASE demo CHARACTER SET 'utf8' COLLATE 'utf8_general_ci';\n"})}),"\n",(0,s.jsxs)(r.p,{children:["创建完成后，使用 ",(0,s.jsx)(r.code,{children:"show databases"})," 检查数据库是否创建成功。"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e764100fcc65?w=984&h=326&f=png&s=22404",alt:""})}),"\n",(0,s.jsxs)(r.h2,{id:"代码中配置数据库",children:["代码中配置数据库",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#代码中配置数据库",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["在配置文件 ",(0,s.jsx)(r.code,{children:"base.py"})," 中指定数据库，需修改 ",(0,s.jsx)(r.code,{children:"conf/base.py"}),"，增加如下代码："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"from sqlalchemy import create_engine\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nengine = create_engine('mysql://root:pwd@demo@localhost:3306/demo?charset=utf8', encoding=\"utf8\", echo=False)\r\nBaseDB = declarative_base()\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/22/162ea967a288b36f?w=827&h=224&f=png&s=16085",alt:""})}),"\n",(0,s.jsxs)(r.h2,{id:"代码中定义数据库表",children:["代码中定义数据库表",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#代码中定义数据库表",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["在前面的介绍中，我们提到，",(0,s.jsx)(r.code,{children:"models.py"})," 这个文件主要包含数据库表的定义及初始化。从第 6 小节中看到，用户注册信息包含手机号、密码和验证码。这里需要记录在数据库中的有手机号（",(0,s.jsx)(r.code,{children:"phone"}),"）和密码（",(0,s.jsx)(r.code,{children:"password"}),"），当然还包括创建的时间（",(0,s.jsx)(r.code,{children:"createTime"}),"）。这些信息作为数据库表项，在 ",(0,s.jsx)(r.code,{children:"models.py"})," 中定义，在 ",(0,s.jsx)(r.code,{children:"models.py"})," 文件中输入如下代码："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'#! /usr/bin/python3\r\n# -*- coding:utf-8 -*-\r\n\r\nfrom conf.base import BaseDB, engine\r\nimport sys\r\nfrom sqlalchemy import (\r\nColumn, \r\nInteger,\r\n    String, \r\n    DateTime\r\n)\r\n\r\n    \r\nclass Users(BaseDB):\r\n    """table for users\r\n    """\r\n    __tablename__ = "users"\r\n    #定义表结构，包括id，phone，password，createTime\r\n    id = Column(Integer, primary_key=True)\r\n    phone = Column(String(50), nullable=False)\r\n    password = Column(String(50), nullable=True)\r\n    createTime = Column(DateTime, nullable=True)\r\n    \r\n    def __init__(self, phone, password, createTime):\r\n        self.phone = phone\r\n        self.password = password\r\n        self.createTime = createTime\r\n    \r\n    \r\ndef initdb():\r\n    BaseDB.metadata.create_all(engine)\r\n    \r\nif __name__ == \'__main__\':\r\n    print ("Initialize database")\r\n    initdb()\n'})}),"\n",(0,s.jsxs)(r.h2,{id:"代码中初始化数据库",children:["代码中初始化数据库",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#代码中初始化数据库",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["在 ",(0,s.jsx)(r.code,{children:"main.py"})," 中，调用 ",(0,s.jsx)(r.code,{children:"models.py"})," 初始化数据库并启用数据库"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/22/162ea9ceea5f9845?w=705&h=672&f=png&s=52336",alt:""}),"\r\n具体代码如下："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'#! /usr/bin/python3\r\n# -*- coding:utf-8 -*-\r\n# Author: demo\r\n# Email: demo@demo.com\r\n# Version: demo\r\n\r\nimport tornado.ioloop\r\nimport tornado.web\r\nimport os\r\nimport sys\r\nfrom tornado.options import define, options\r\nfrom common.url_router import include, url_wrapper\r\nfrom tornado.options import define, options\r\nfrom models import initdb\r\nfrom sqlalchemy.orm import scoped_session, sessionmaker\r\nfrom conf.base import BaseDB, engine\r\n\r\n\r\nclass Application(tornado.web.Application):\r\n    def __init__(self):\r\n        initdb()\r\n        handlers = url_wrapper([\r\n        (r"/users/", include(\'views.users.users_urls\'))\r\n        ])\r\n        #定义tornado服务器的配置项，如static/templates目录位置，debug级别等\r\n        settings = dict(\r\n            debug=True,\r\n            static_path=os.path.join(os.path.dirname(__file__), "static"),\r\n            template_path=os.path.join(os.path.dirname(__file__), "templates")\r\n        )\r\n        tornado.web.Application.__init__(self, handlers, **settings)\r\n        self.db = scoped_session(sessionmaker(bind=engine,\r\n                                  autocommit=False, autoflush=True,\r\n                                  expire_on_commit=False))\r\n \r\n \r\nif __name__ == \'__main__\':\r\n    print ("Tornado server is ready for service\\r")\r\n    tornado.options.parse_command_line()\r\n    Application().listen(8000, xheaders=True)\r\n    tornado.ioloop.IOLoop.instance().start()\n'})}),"\n",(0,s.jsxs)(r.h2,{id:"代码将用户信息写入数据库",children:["代码将用户信息写入数据库",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#代码将用户信息写入数据库",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["修改 ",(0,s.jsx)(r.code,{children:"users_views.py"}),"，将用户数据写入数据库中，修改内容包括从 ",(0,s.jsx)(r.code,{children:"models"})," 中导入 ",(0,s.jsx)(r.code,{children:"Users"})," 类表，并判断用户是否在数据库中。如果存在，返回注册失败信息；如果不存在，将用户信息写入数据库，并返回注册成功信息。"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/22/162eaacef4db547f?w=555&h=469&f=png&s=24382",alt:""})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/22/162eaad1013a7464?w=601&h=680&f=png&s=53202",alt:""})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"users_views.py"})," 完整代码如下："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'#! /usr/bin/python3\r\n# -*- coding:utf-8 -*-\r\n\r\nimport tornado.web\r\nimport sys\r\nfrom tornado.escape import json_decode\r\nimport logging\r\nfrom logging.handlers import TimedRotatingFileHandler\r\nfrom datetime import datetime\r\n\r\n\r\n#从commons中导入http_response方法\r\nfrom common.commons import (\r\n    http_response,\r\n)\r\n\r\n#从配置文件中导入错误码\r\nfrom conf.base import (\r\n    ERROR_CODE,\r\n)\r\n\r\nfrom models import (\r\n    Users\r\n)\r\n  \r\n \r\n########## Configure logging #############\r\nlogFilePath = "log/users/users.log"\r\nlogger = logging.getLogger("Users")  \r\nlogger.setLevel(logging.DEBUG)  \r\nhandler = TimedRotatingFileHandler(logFilePath,  \r\n                                   when="D",  \r\n                                   interval=1,  \r\n                                   backupCount=30)  \r\nformatter = logging.Formatter(\'%(asctime)s \\\r\n%(filename)s[line:%(lineno)d] %(levelname)s %(message)s\',)  \r\nhandler.suffix = "%Y%m%d"\r\nhandler.setFormatter(formatter)\r\nlogger.addHandler(handler)\r\n \r\n \r\nclass RegistHandle(tornado.web.RequestHandler):\r\n    """handle /user/regist request\r\n    :param phone: users sign up phone\r\n    :param password: users sign up password\r\n    :param code: users sign up code, must six digital code\r\n    """\r\n    \r\n    @property\r\n    def db(self):\r\n        return self.application.db\r\n        \r\n    def post(self):\r\n        try:\r\n            #获取入参\r\n            args = json_decode(self.request.body)\r\n            phone = args[\'phone\']\r\n            password = args[\'password\']\r\n            verify_code = args[\'code\']\r\n        except:\r\n            #获取入参失败时，抛出错误码及错误信息\r\n            logger.info("RegistHandle: request argument incorrect")\r\n            http_response(self, ERROR_CODE[\'1001\'], 1001)\r\n            return \r\n            \r\n        ex_user = self.db.query(Users).filter_by(phone=phone).first()\r\n        if ex_user:\r\n            #如果手机号已存在，返回用户已注册信息\r\n            http_response(self, ERROR_CODE[\'1002\'], 1002)\r\n            self.db.close()\r\n            return\r\n        else:\r\n            #用户不存在，数据库表中插入用户信息\r\n            logger.debug("RegistHandle: insert db, user: %s" %phone)\r\n            create_time = datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\')\r\n            add_user = Users(phone, password, create_time)                         \r\n            self.db.add(add_user)\r\n            self.db.commit()\r\n            self.db.close()\r\n            #处理成功后，返回成功码“0”及成功信息“ok”\r\n            logger.debug("RegistHandle: regist successfully")\r\n            http_response(self, ERROR_CODE[\'0\'], 0)\r\n            \n'})}),"\n",(0,s.jsxs)(r.h2,{id:"增加错误码处理",children:["增加错误码处理",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#增加错误码处理",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"修改 base.py，增加错误码 1002："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'"1002": "用户已注册，请直接登录",\n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/22/162eaaee9fc4d2a5?w=857&h=242&f=png&s=18751",alt:""})}),"\n",(0,s.jsxs)(r.h2,{id:"结果检查",children:["结果检查",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#结果检查",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["上面的几大步骤，从配置数据库，到代码指定数据库，再到将用户信息写入数据库，我们已完成了数据库部分代码的编写，下面执行 ",(0,s.jsx)(r.code,{children:"main.py"})," 文件，查看是否运行正常。"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e7716c1fbcc4?w=987&h=123&f=png&s=15264",alt:""})}),"\n",(0,s.jsxs)(r.h3,{id:"http-发包模拟器再次请求注册信息",children:["HTTP 发包模拟器再次请求注册信息",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#http-发包模拟器再次请求注册信息",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e773c3e1648d?w=806&h=584&f=png&s=25959",alt:""})}),"\n",(0,s.jsxs)(r.h3,{id:"查看控制台",children:["查看控制台",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#查看控制台",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e775c4e51c32?w=1016&h=103&f=png&s=18891",alt:""})}),"\n",(0,s.jsxs)(r.h3,{id:"查看数据库",children:["查看数据库",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#查看数据库",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e777a8c83dee?w=1025&h=765&f=png&s=69867",alt:""})}),"\n",(0,s.jsxs)(r.h3,{id:"在-http-发包模拟器上再次点击注册",children:["在 HTTP 发包模拟器上再次点击注册",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#在-http-发包模拟器上再次点击注册",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e779988d7341?w=779&h=585&f=png&s=26334",alt:""})}),"\n",(0,s.jsx)(r.p,{children:"可以看到，服务器端返回的错误信息提示该用户已注册。"}),"\n",(0,s.jsxs)(r.h2,{id:"代码下载",children:["代码下载",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#代码下载",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["到目前为止，服务器端代码如下：",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.a,{href:"https://github.com/Jawish185/demo8.git",target:"_blank",rel:"noopener noreferrer",children:"demo8"})]}),"\n",(0,s.jsxs)(r.h2,{id:"小结",children:["小结",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["至此，我们已完成了数据库的写入，加上前两节的逻辑处理和 log 处理，客户端与服务器端的第一条消息请求交互已完成。这里只是使用到了 SQLAlchemy 很有限的功能，SQLAlchemy 具有很强大的功能，感兴趣的同学可以访问 ",(0,s.jsx)(r.a,{href:"http://docs.sqlalchemy.org/en/latest/",target:"_blank",rel:"noopener noreferrer",children:"SQLAlchemy 官网"}),"学习。"]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,d.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let t=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Python%20%E8%BD%BB%E6%9D%BE%E8%87%AA%E5%BB%BA%20App%20%E6%9C%8D%E5%8A%A1%E5%99%A8%2F7%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%203%EF%BC%9A%E5%B0%86%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%86%99%E5%85%A5%20MySQL%20%E6%95%B0%E6%8D%AE%E5%BA%93.md"]={toc:[{text:"整个逻辑架构图",id:"整个逻辑架构图",depth:2},{text:"配置数据用户名和密码",id:"配置数据用户名和密码",depth:2},{text:"创建数据库",id:"创建数据库",depth:2},{text:"代码中配置数据库",id:"代码中配置数据库",depth:2},{text:"代码中定义数据库表",id:"代码中定义数据库表",depth:2},{text:"代码中初始化数据库",id:"代码中初始化数据库",depth:2},{text:"代码将用户信息写入数据库",id:"代码将用户信息写入数据库",depth:2},{text:"增加错误码处理",id:"增加错误码处理",depth:2},{text:"结果检查",id:"结果检查",depth:2},{text:"HTTP 发包模拟器再次请求注册信息",id:"http-发包模拟器再次请求注册信息",depth:3},{text:"查看控制台",id:"查看控制台",depth:3},{text:"查看数据库",id:"查看数据库",depth:3},{text:"在 HTTP 发包模拟器上再次点击注册",id:"在-http-发包模拟器上再次点击注册",depth:3},{text:"代码下载",id:"代码下载",depth:2},{text:"小结",id:"小结",depth:2}],title:"7第一次数据请求 3：将用户信息写入 MySQL 数据库",headingTitle:"7第一次数据请求 3：将用户信息写入 MySQL 数据库",frontmatter:{}}}}]);