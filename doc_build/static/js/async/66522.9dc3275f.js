"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["66522"],{803997:function(e,s,n){n.r(s),n.d(s,{default:()=>h});var c=n(552676),r=n(740453);function d(e){let s=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ol:"ol",li:"li",img:"img",pre:"pre",h3:"h3",blockquote:"blockquote"},(0,r.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(s.h1,{id:"7进阶-4feature-branching最流行的工作流",children:["7进阶 4：Feature Branching：最流行的工作流",(0,c.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#7进阶-4feature-branching最流行的工作流",children:"#"})]}),"\n",(0,c.jsxs)(s.p,{children:["在前面的《上手 2》这一节里，我介绍了一种最基本的团队工作模型。在这种模型里，所有人都工作在 ",(0,c.jsx)(s.code,{children:"master"})," 上，写完了的 ",(0,c.jsx)(s.code,{children:"commit"})," 可以通过 ",(0,c.jsx)(s.code,{children:"push"})," 来发送到中央仓库，并且可以使用 ",(0,c.jsx)(s.code,{children:"pull"})," 来获取到别人的最新 ",(0,c.jsx)(s.code,{children:"commit"}),"s。"]}),"\n",(0,c.jsx)(s.p,{children:"这种工作模型解决了团队合作最基本的问题：多人并行开发和版本管理。事实上，这也是早期的 VCS——中央式 VCS 的工作模型。"}),"\n",(0,c.jsxs)(s.p,{children:["但这种工作模型也有它的限制：使用这种工作模型时，每个人的代码在被大家看到的时候，就是它进入正式的生产库的时候。所有人的工作都会被直接 ",(0,c.jsx)(s.code,{children:"push"})," 到 ",(0,c.jsx)(s.code,{children:"master"}),"，这导致每个人的代码在正式启用前无法被别人看到（严格来讲是有办法的，别人可以直接从你的电脑上 ",(0,c.jsx)(s.code,{children:"pull"})," ，Git 的「分布式」不是说说的。但——这种做法超级不方便），这样就让代码在正式启用前的讨论和 review（审阅）非常不方便。现在的商业团队，开发项目多是采用「边开发边发布、边开发边更新、边开发边修复」的持续开发策略，所以代码分享的不便会极大地影响团队的开发效率。"]}),"\n",(0,c.jsx)(s.p,{children:"这一节，我将介绍的是目前最流行（不论是中国还是世界）的团队开发的工作流：Feature Branching。"}),"\n",(0,c.jsxs)(s.h2,{id:"简介",children:["简介",(0,c.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"})]}),"\n",(0,c.jsx)(s.p,{children:"这种工作流的核心内容可以总结为两点："}),"\n",(0,c.jsxs)(s.ol,{children:["\n",(0,c.jsxs)(s.li,{children:["任何新的功能（feature）或 bug 修复全都新建一个 ",(0,c.jsx)(s.code,{children:"branch"})," 来写；"]}),"\n",(0,c.jsxs)(s.li,{children:[(0,c.jsx)(s.code,{children:"branch"})," 写完后，合并到 ",(0,c.jsx)(s.code,{children:"master"}),"，然后删掉这个 ",(0,c.jsx)(s.code,{children:"branch"}),"。"]}),"\n"]}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fde6edbfe362c4?w=600&h=476&f=gif&s=627308",alt:"Feature Branching"})}),"\n",(0,c.jsx)(s.p,{children:"这就是这种工作流最基本的模型。"}),"\n",(0,c.jsx)(s.p,{children:"从上面的动图来看，这种工作流似乎没什么特别之处。但实质上，Feature Branching 这种工作流，为团队开发时两个关键的问题——代码分享和一人多任务——提供了解决方案。"}),"\n",(0,c.jsxs)(s.h2,{id:"1-代码分享",children:["1. 代码分享",(0,c.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#1-代码分享",children:"#"})]}),"\n",(0,c.jsxs)(s.p,{children:["假设你在一个叫做「掘金」的团队工作，现在你要开发一个叫做「掘金小册」的功能（呵呵），于是你创建了一个新的 ",(0,c.jsx)(s.code,{children:"branch"})," 叫做 ",(0,c.jsx)(s.code,{children:"books"}),"，然后开始在 ",(0,c.jsx)(s.code,{children:"books"})," 上进行开发工作。"]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-shell",children:"git checkout -b books\n"})}),"\n",(0,c.jsxs)(s.p,{children:["在十几个 ",(0,c.jsx)(s.code,{children:"commit"}),"s 过后，「掘金小册」的基本功能开发完毕，你就把代码 ",(0,c.jsx)(s.code,{children:"push"})," 到中央仓库（例如 GitHub）去，然后告诉同事：「嘿，小册的基本功能写完了，分支名是 ",(0,c.jsx)(s.code,{children:"books"}),"，谁有空的话帮我 review 一下吧。」"]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-shell",children:"git push origin books\n"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/29/16007bb30da619c5?w=590&h=854&f=gif&s=143898",alt:"把 books push 到中央仓库"})}),"\n",(0,c.jsx)(s.p,{children:"然后你的同事明明正好有空，他就从中央仓库拉下来了你的代码开始读："}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-shell",children:"# 明明的电脑：\ngit pull\ngit chekcout books\n"})}),"\n",(0,c.jsxs)(s.p,{children:["读完以后，明明对你说说，嗯我看完了，我觉得不错，可以合并到 ",(0,c.jsx)(s.code,{children:"master"}),"！"]}),"\n",(0,c.jsxs)(s.p,{children:["于是你就把 ",(0,c.jsx)(s.code,{children:"books"})," 合并到了 ",(0,c.jsx)(s.code,{children:"master"})," 上去："]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-shell",children:"git checkout master\ngit pull # merge 之前 pull 一下，让 master 更新到和远程仓库同步\ngit merge books\n"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/29/160087ca5a7d901a?w=484&h=672&f=gif&s=579053",alt:"把 books 合并到 master"})}),"\n",(0,c.jsxs)(s.p,{children:["紧接着，你把合并后的结果 ",(0,c.jsx)(s.code,{children:"push"})," 到了中央仓库，并删掉了 ",(0,c.jsx)(s.code,{children:"books"})," 这个 ",(0,c.jsx)(s.code,{children:"branch"}),"："]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-shell",children:"git push\ngit branch -d books\ngit push origin -d books # 用 -d 参数把远程仓库的 branch 也删了\n"})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/29/1600877abc63a4d9?w=482&h=594&f=gif&s=492135",alt:"把 master push 上去，并删除本地和远程的 books"})}),"\n",(0,c.jsxs)(s.h3,{id:"如果同事有意见",children:["如果同事有意见",(0,c.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#如果同事有意见",children:"#"})]}),"\n",(0,c.jsx)(s.p,{children:"上面讲的是明明对你的代码没有意见，而假如他在你的代码里看到了问题，例如他跑来对你说：「嘿，你的代码缩进为什么用的是 TAB？快改成空格，不然砍死你哦。」"}),"\n",(0,c.jsxs)(s.p,{children:["这时，你就可以把你的缩进改成空格，然后做一个新的提交，再 ",(0,c.jsx)(s.code,{children:"push"})," 上去，然后通知他：「我改完啦！」"]}),"\n",(0,c.jsxs)(s.p,{children:["明明 ",(0,c.jsx)(s.code,{children:"pull"})," 下来你的新提交看了看：「嗯，这下可以合并了。」"]}),"\n",(0,c.jsxs)(s.p,{children:["于是你依照上面的那一套操作，把代码合并进 ",(0,c.jsx)(s.code,{children:"master"}),"，并 ",(0,c.jsx)(s.code,{children:"push"})," 了上去，然后删掉了 ",(0,c.jsx)(s.code,{children:"books"}),"。"]}),"\n",(0,c.jsxs)(s.p,{children:["瞧，代码在同事竖大拇指之前都不会正式发布到 ",(0,c.jsx)(s.code,{children:"master"}),"，挺方便的吧？"]}),"\n",(0,c.jsxs)(s.h3,{id:"pull-request",children:["Pull Request",(0,c.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#pull-request",children:"#"})]}),"\n",(0,c.jsx)(s.p,{children:"事实上，上面讲的这个流程，还可以利用 Pull Request 来进一步简化。"}),"\n",(0,c.jsxs)(s.p,{children:["Pull Request 并不是 Git 的内容，而是一些 Git 仓库服务提供方（例如 GitHub）所提供的一种便捷功能，它可以让团队的成员方便地讨论一个 ",(0,c.jsx)(s.code,{children:"branch"})," ，并在讨论结束后一键合并这个 ",(0,c.jsx)(s.code,{children:"branch"})," 到 ",(0,c.jsx)(s.code,{children:"master"}),"。"]}),"\n",(0,c.jsxs)(s.p,{children:["同样是把写好的 ",(0,c.jsx)(s.code,{children:"branch"})," 给同事看，使用 Pull Request 的话你可以这样做："]}),"\n",(0,c.jsxs)(s.ol,{children:["\n",(0,c.jsxs)(s.li,{children:["\n",(0,c.jsxs)(s.p,{children:["把 ",(0,c.jsx)(s.code,{children:"branch"})," ",(0,c.jsx)(s.code,{children:"push"})," 到中央仓库；"]}),"\n"]}),"\n",(0,c.jsxs)(s.li,{children:["\n",(0,c.jsx)(s.p,{children:"在中央仓库处创建一个 Pull Request。以 GitHub 为例："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fde6edbe5190a4?w=1000&h=465&f=jpeg&s=135485",alt:""})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fde6edbeda949d?w=882&h=669&f=jpeg&s=158636",alt:""})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fde6edc112a514?w=796&h=616&f=jpeg&s=145692",alt:""})}),"\n",(0,c.jsxs)(s.p,{children:["然后你的同事就可以在 GitHub 上看到你创建的 Pull Request 了。他们可以在 GitHub 的这个页面查看你的 ",(0,c.jsx)(s.code,{children:"commit"}),"s，也可以给你评论表示赞同或提意见，你接下来也可以根据他们的意见把新的 ",(0,c.jsx)(s.code,{children:"commit"}),"s ",(0,c.jsx)(s.code,{children:"push"})," 上来，这也页面会随着你新的 ",(0,c.jsx)(s.code,{children:"push"})," 而展示出最新的 ",(0,c.jsx)(s.code,{children:"commits"}),"。"]}),"\n",(0,c.jsxs)(s.p,{children:["在讨论结束以后，你们一致认为这个 ",(0,c.jsx)(s.code,{children:"branch"}),' 可以合并了，你只需要点一下页面中那个绿色的 "Merge pull request" 按钮，GitHub 就会自动地在中央仓库帮你把 ',(0,c.jsx)(s.code,{children:"branch"})," 合并到 ",(0,c.jsx)(s.code,{children:"master"})," 了："]}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/30/1600884104e5bb94?w=458&h=594&f=gif&s=129309",alt:'"Merge pull request" 按钮自动在中央仓库 merge'})}),"\n",(0,c.jsxs)(s.p,{children:["然后你只要在本地 ",(0,c.jsx)(s.code,{children:"pull"})," 一下，把最新的内容拉到你的电脑上，这件事情就算完成了。"]}),"\n",(0,c.jsxs)(s.p,{children:['另外，GitHub 还设计了一个贴心的 "Delete branch" 按钮，方便你在合并之后一键删除 ',(0,c.jsx)(s.code,{children:"branch"}),"。"]}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fde6edbfbe3b64?w=793&h=132&f=jpeg&s=22712",alt:""})}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(s.h2,{id:"2-一人多任务",children:["2. 一人多任务",(0,c.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#2-一人多任务",children:"#"})]}),"\n",(0,c.jsx)(s.p,{children:"除了代码分享的便捷，基于 Feature Branch 的工作流对于一人多任务的工作需求也提供了很好的支持。"}),"\n",(0,c.jsx)(s.p,{children:"安安心心做事不被打扰，做完一件再做下一件自然是很美好的事，但现实往往不能这样。对于程序员来说，一种很常见的情况是，你正在认真写着代码，忽然同事过来跟你说：「内个……你这个功能先放一放吧，我们最新讨论出要做另一个更重要的功能，你来做一下吧。」"}),"\n",(0,c.jsxs)(s.p,{children:["其实，虽然这种情况确实有点烦，但如果你是在独立的 ",(0,c.jsx)(s.code,{children:"branch"})," 上做事，切换任务是很简单的。你只要稍微把目前未提交的代码简单收尾一下，然后做一个带有「未完成」标记的提交（例如，在提交信息里标上「TODO」），然后回到 ",(0,c.jsx)(s.code,{children:"master"})," 去创建一个新的 ",(0,c.jsx)(s.code,{children:"branch"})," 就好了。"]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-shell",children:"git checkout master\ngit checkout -b new_feature\n"})}),"\n",(0,c.jsxs)(s.blockquote,{children:["\n",(0,c.jsx)(s.p,{children:"上面这两行代码有更简单的操作方式，不过为了小册内容的简洁性，我就不引入更多的内容了，有兴趣的话可以自己搜索一下。"}),"\n"]}),"\n",(0,c.jsxs)(s.p,{children:["如果有一天需要回来继续做这个 ",(0,c.jsx)(s.code,{children:"branch"}),"，你只要用 ",(0,c.jsx)(s.code,{children:"checkout"})," 切回来，就可以继续了。"]}),"\n",(0,c.jsxs)(s.h2,{id:"小结",children:["小结",(0,c.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsx)(s.p,{children:"这一节介绍了 Feature Branching 这种工作流。它的概念很简单："}),"\n",(0,c.jsxs)(s.ol,{children:["\n",(0,c.jsxs)(s.li,{children:["每个新功能都新建一个 ",(0,c.jsx)(s.code,{children:"branch"})," 来写；"]}),"\n",(0,c.jsx)(s.li,{children:"写完以后，把代码分享给同事看；写的过程中，也可以分享给同事讨论。另外，借助 GitHub 等服务提供方的 Pull Request 功能，可以让代码分享变得更加方便；"}),"\n",(0,c.jsxs)(s.li,{children:["分支确定可以合并后，把分支合并到 ",(0,c.jsx)(s.code,{children:"master"})," ，并删除分支。"]}),"\n"]}),"\n",(0,c.jsx)(s.p,{children:"这种工作流由于功能强大，而且概念和使用方式都很简单，所以很受欢迎。再加上 GitHub 等平台提供了 Pull Request 的支持，目前这种工作流是商业项目开发中最为流行的工作流。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,r.ah)(),e.components);return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["Git%20%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%2F7%E8%BF%9B%E9%98%B6%204%EF%BC%9AFeature%20Branching%EF%BC%9A%E6%9C%80%E6%B5%81%E8%A1%8C%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81.md"]={toc:[{text:"简介",id:"简介",depth:2},{text:"1. 代码分享",id:"1-代码分享",depth:2},{text:"如果同事有意见",id:"如果同事有意见",depth:3},{text:"Pull Request",id:"pull-request",depth:3},{text:"2. 一人多任务",id:"2-一人多任务",depth:2},{text:"小结",id:"小结",depth:2}],title:"7进阶 4：Feature Branching：最流行的工作流",headingTitle:"7进阶 4：Feature Branching：最流行的工作流",frontmatter:{}}}}]);