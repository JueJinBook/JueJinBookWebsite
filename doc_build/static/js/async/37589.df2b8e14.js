"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["37589"],{740535:function(e,n,c){e.exports=c.p+"static/image/e4256edb138dc96838c0d52bf4e96d0c.81b0f5d0.webp"},155017:function(e,n,c){c.r(n),c.d(n,{default:()=>es});var i=c(552676),s=c(740453);let r=c.p+"static/image/67915ee66bfae349c474bdef5d94406d.dfc145ee.webp",d=c.p+"static/image/6d83be5469af8fd0e04a17c916838023.d33bb396.webp",a=c.p+"static/image/01931db955e00e280e3ca36dcbe9bc17.1ce99937.webp",p=c.p+"static/image/e0fbd0bfa8bb0be4d58753b307f84a59.1d562129.webp",l=c.p+"static/image/2507b7f9d5cb2a549f49cbdf0d53a2d5.912b6192.webp",t=c.p+"static/image/34642c8a2377a97e7b2910572517bc6f.91ed3bc6.webp",x=c.p+"static/image/75e9ffc50f60c278ee84a2815b71dc55.89a4a39f.webp",b=c.p+"static/image/3ed42739dd0fa624fdbb426414bb09b7.81478f3d.webp",o=c.p+"static/image/12a6e7bb2b33778436225f126afec8a8.816e216d.webp",j=c.p+"static/image/a10bfb4b3830be7e7e169a5d8b97d6da.9764fd5a.webp",h=c.p+"static/image/ed4dd96b96fd642f739d61b9f0f5cdc8.a7fb6c37.webp",m=c.p+"static/image/f84c310ac3435ebeeaa426a1d327c9c9.982f4509.webp",g=c.p+"static/image/4c4ab421b76ba22e2fcac91801731c1e.6ece3fb0.webp",f=c.p+"static/image/851de86a4ffc12aca39508cac5659acd.a3b8843d.webp",u=c.p+"static/image/b072f239e7385d47b415b157068afe28.72bb9cbb.webp",w=c.p+"static/image/e30bc18c9d6985a76046b9883ff27223.eea5b588.webp",k=c.p+"static/image/0bdc19b0119ee1548c7d03da1b934d93.37ccddf2.webp",_=c.p+"static/image/38011ad722daed57a60a5278bb4828bd.6f0f9358.webp",E=c.p+"static/image/dae5d8ca2eba4bf884e8839f1597a6b2.05c2b580.webp",A=c.p+"static/image/d878bfb596f12f80419e75bb892513e5.cba479fa.webp",y=c.p+"static/image/da26d9694edce27008901bc0a7779354.35ff7d08.webp",B=c.p+"static/image/74291ca1e280c404d462f749c64db3e6.ee84856e.webp",v=c.p+"static/image/dbac0fc5a356a52a5005b39d749f0cb7.c426319d.webp",R=c.p+"static/image/0f1a3961177a88051444feba0980e284.d4208cee.webp",O=c.p+"static/image/1210b692e501442a7b84981cbc2a74b5.72c3c7f7.webp",C=c.p+"static/image/300ab4ef446accc5620a1f06b3d206cb.fb31102e.webp",P=c.p+"static/image/60dd8017db438d7cf3883fdcd63b7992.6a712e3a.webp",S=c.p+"static/image/5deb3a01ebd322531315676150029826.9c972a27.webp",D=c.p+"static/image/f86b4c74783f3af127816535cf923577.49f15925.webp",q=c.p+"static/image/bb3d7e2381484dbec92a10b2cb37d7da.55a2f629.webp",F=c.p+"static/image/7132b7f452621ccb47bfe5387eef0df8.cab52ed3.webp",M=c.p+"static/image/0e70ed36b7746f088dc70134b87a5010.aac04cd5.webp",N=c.p+"static/image/cf37343e0a4732d55a60a277a774ca01.ed00ee6a.webp",U=c.p+"static/image/a8f7bfc651d65d0ebaf7a25347664153.b9f9ccf7.webp",Y=c.p+"static/image/4ab91f553f4c08ae1fe32c11bd62829a.ffdeddb9.webp",T=c.p+"static/image/bcda689fb6341e45911e4b58c0e3e440.826eb46e.webp",G=c.p+"static/image/93300f4481dfb6a0c5854742d97db8f4.7cd66ce4.webp",Q=c.p+"static/image/1549b229b32f3f335d2da89682c50fd0.cff91153.webp",$=c.p+"static/image/59476b55a6f813e7cfed0cc8ef4081a2.49070544.webp",L=c.p+"static/image/937a561dac8c3156bb25b6567735ea90.8993419e.webp",W=c.p+"static/image/065b5e6cbec10eddd62bfab4e7b8c963.941d8d93.webp",I=c.p+"static/image/76694c88310d63620ed4b1b28624386d.8bc81a21.webp",K=c.p+"static/image/ecc6175cc248cf2f2ce5305db21a7e9d.d9e1e666.webp",X=c.p+"static/image/c9b8af2c6833be17a4c4c4c5b6c3d2dc.e664f068.webp",z=c.p+"static/image/ecf6ab630f25b8c270bf4aaec91e5b98.66284a4f.webp",H=c.p+"static/image/f7fda270ad3a59995d7ef53a27d2af47.ebff0130.webp",J=c.p+"static/image/a7cb7ff9ba07844c998aed857cafd220.4a5cb80e.webp",V=c.p+"static/image/4cac3d6104e7086517a6e8ead04ff350.f7ba4468.webp",Z=c.p+"static/image/b307a7905c53d8db949bfa6fe9c7c87b.690c62c4.webp",ee=c.p+"static/image/ee91976c46a87540404587cc8e1e779a.ca5a1eed.webp";var en=c(740535);function ec(e){let n=Object.assign({p:"p",img:"img",pre:"pre",code:"code",a:"a",h2:"h2"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"上节把后端项目部署到了阿里云，可以在任意电脑上访问。"}),"\n",(0,i.jsx)(n.p,{children:"这节来部署下前端项目。"}),"\n",(0,i.jsx)(n.p,{children:"项目跑起来是这样的架构："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:en,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"在之前 docker compose 的基础上加上 nginx 容器就好了。"}),"\n",(0,i.jsx)(n.p,{children:"我们进入 frontend-admin 项目，加一下 nginx 配置文件："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"upstream nest-server {\n    server 192.168.31.56:3005;\n}\n\nserver {\n    listen       80;\n    listen  [::]:80;\n    server_name  localhost;\n\n    location ^~ /api {\n        rewrite ^/api/(.*)$ /$1 break;\n        proxy_pass http://nest-server;\n    }\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"nginx 的两个核心功能就是静态资源托管、反向代理。"}),"\n",(0,i.jsx)(n.p,{children:"我们配置了 /api 下的请求走反向代理，转发请求到 nest 服务。"}),"\n",(0,i.jsx)(n.p,{children:"/ 下的静态资源请求返回 index.html。"}),"\n",(0,i.jsx)(n.p,{children:"这里的 ip 是我宿主机的，你可以换成你本地的。"}),"\n",(0,i.jsx)(n.p,{children:"用 nginx 做了反向代理之后，访问的 url 要改一下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:ee,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"不再是直接访问 nest 服务了，而是通过 nginx 反向代理到 nest 服务。"}),"\n",(0,i.jsx)(n.p,{children:"然后加一下 Dockerfile"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-docker",children:'# 130. 会议室预订系统：前端项目部署到阿里云\nFROM node:18 as build-stage\n\nWORKDIR /app\n\nCOPY package.json ./\n\nRUN npm config set registry https://registry.npmmirror.com/\n\nRUN npm install\n\nCOPY . .\n\nRUN npm run build\n\n# production stage\nFROM nginx:stable as production-stage\n\nCOPY --from=build-stage /app/build /usr/share/nginx/html\n\nCOPY --from=build-stage /app/nginx.conf /etc/nginx/conf.d/default.conf\n\nEXPOSE 80\n\nCMD ["nginx", "-g", "daemon off;"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"用多阶段构建，第一个阶段把代码复制到容器，执行 npm run build，第二个阶段把上个阶段的产物还有 nginx 配置文件复制过来，把 nginx 服务跑起来。"}),"\n",(0,i.jsx)(n.p,{children:"这里的 CMD 启动命令看别的 nginx 镜像的启动命令就行："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:Z,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"加一下 .dockerignore"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"node_modules/\n.vscode/\n.git/\nbuild/\n"})}),"\n",(0,i.jsx)(n.p,{children:"然后 build 下镜像："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"docker build -t fe-container:first .\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:V,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后在 docker desktop 里搜索这个镜像，点击 run："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:J,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:H,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"进入 backend 项目，把服务跑起来："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:z,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"浏览器访问下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:X,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"界面正常渲染，访问接口的 url 也换成了 nginx 的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:K,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"接口也正常返回了数据。"}),"\n",(0,i.jsx)(n.p,{children:"说明 nginx 的反向代理和静态资源托管都成功了。"}),"\n",(0,i.jsx)(n.p,{children:"但是，当你切换到修改信息界面，会跳到 /login 的 url，这时候返回了 404:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:I,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"因为我们用的是 browser 路由，也就是 /xxx 的方式，而不是 hash 路由，也就是 ?#/xxx 的方式。"}),"\n",(0,i.jsx)(n.p,{children:"需要在 nginx 里面支持下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:W,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"location / {\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    try_files $uri $uri/ /index.html;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"加上这条 try_files，当访问 /login 的时候会先匹配 /login 然后是 /login/ 然后是 /index.html"}),"\n",(0,i.jsx)(n.p,{children:"这样就交给了前端页面来处理 /login 路由。"}),"\n",(0,i.jsx)(n.p,{children:"重新 build 一下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:L,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"把之前的 container 停止、删除，然后重新跑。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:$,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:Q,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"现在你就会发现所有的路由都能正常访问了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:G,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"当然，我们现在是单独跑的 nginx 的容器，而且反向代理 nest 服务时用的是 ip。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:Y,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这样肯定是不好的。"}),"\n",(0,i.jsx)(n.p,{children:"我们希望可以把它也放到 docker-compose.yml 的配置文件里。"}),"\n",(0,i.jsx)(n.p,{children:"直接 docker compose up 一起跑。"}),"\n",(0,i.jsx)(n.p,{children:"我们知道，docker compose 跑的多个容器之间可以通过容器名相互访问。"}),"\n",(0,i.jsx)(n.p,{children:"改一下 nginx 配置，把 ip 换成 nest 服务的容器名："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:U,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"重新 build："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:N,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后在 backend 项目的 docker-compose.yml 里配置下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:M,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"version: '3.8'\nservices:\n  fe-app:\n    image: fe-container:first\n    ports:\n      - 80:80\n    depends_on:\n      - nest-app\n    networks:\n      - common-network\n  nest-app:\n    build:\n      context: ./\n      dockerfile: ./Dockerfile\n    depends_on:\n      - mysql-container\n      - redis-container\n    networks:\n      - common-network\n  mysql-container:\n    image: mysql\n    volumes:\n      - /Users/guang/mysql-data:/var/lib/mysql\n    environment:\n      MYSQL_DATABASE: meeting_room_booking_system\n      MYSQL_ROOT_PASSWORD: guang\n    networks:\n      - common-network\n  redis-container:\n    image: redis\n    volumes:\n      - /Users/guang/redis-data:/data\n    networks:\n      - common-network\nnetworks:\n  common-network:\n    driver: bridge\n"})}),"\n",(0,i.jsx)(n.p,{children:"把 env 里的 url 改回来："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:F,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后跑一下（最好把本地的其他 mysql 和 redis 容器停掉再跑）："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"docker-compose up\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:q,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"跑起来之后，浏览器访问下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:D,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这样，我们就通过 docker compose 一次性跑了 nest、nginx 还有 mysql 和 redis 服务。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:P,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"但是 fe-container 这个镜像只存在于本地，在阿里云跑 docker compose 的话会找不到这个镜像。"}),"\n",(0,i.jsx)(n.p,{children:"所以我们需要这个镜像上传到阿里云的镜像仓库。"}),"\n",(0,i.jsx)(n.p,{children:"当然，这里直接在服务器上下载代码然后 build 镜像也可以，这里只是为了用一下阿里云的镜像仓库。"}),"\n",(0,i.jsxs)(n.p,{children:["阿里云的",(0,i.jsx)(n.a,{href:"https://www.aliyun.com/product/acr",target:"_blank",rel:"noopener noreferrer",children:"容器镜像服务"}),"个人用是免费的："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"进入管理控制台："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:O,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"点击创建镜像仓库。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"它会让你先创建命名空间。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"直接说明了如何登陆阿里云镜像仓库和 push 镜像上去："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"我们在本地 build 下镜像。"}),"\n",(0,i.jsx)(n.p,{children:"复制下你买的服务器的公网 ip："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"改一下项目里的 baseURL，改成服务器的 ip："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后 build 出镜像："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"docker build -t fe-container:first .\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后分别执行 docker login、docker tag、docker push 把镜像 push 到镜像仓库（直接复制命令就行）："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"上传之后，点击镜像版本就可以看到这个版本号的镜像："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后改一下 backend 项目里的 docker-compose.yml 文件："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"image 改成阿里云镜像仓库里的。"}),"\n",(0,i.jsx)(n.p,{children:"接下来我们在服务器上把它跑起来就行。"}),"\n",(0,i.jsx)(n.p,{children:"保存代码，然后 git push 到代码仓库："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后登录服务器，把最新代码 clone 下来（如果你clone 过了，只要 git pull 就行）。"}),"\n",(0,i.jsx)(n.p,{children:"然后跑一下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"docker login --username=用户名 registry.cn-qingdao.aliyuncs.com\n \ndocker-compose up\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"之后在安全组添加 80 端口："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"但是这时你用 ip 访问，会发现没返回东西："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"为什么呢？"}),"\n",(0,i.jsx)(n.p,{children:"往上翻一下日志，可能会有这个报错："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"说是 docker 镜像的 platform 不匹配。"}),"\n",(0,i.jsx)(n.p,{children:"因为我本地是 m1 芯片的 mac ，build 出来的镜像在 linux 上跑不了。"}),"\n",(0,i.jsx)(n.p,{children:"当然，你不一定遇到这个问题，如果没遇到这个问题下面的步骤可以跳过。"}),"\n",(0,i.jsx)(n.p,{children:"如果遇到这个问题，那就需要 build 的时候加上 platform 了："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"docker build -t fe-container:first --platform linux/amd64 .\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"我重新 build 了一下镜像，指定了目标 platform。"}),"\n",(0,i.jsx)(n.p,{children:"然后重新 docker login、docker tag、docker push 来上传镜像："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"上传之后在服务器把之前镜像删掉，重新跑："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"docker-compose down --rmi all\n\ndocker login --username=用户名 registry.cn-qingdao.aliyuncs.com\n\ndocker-compose up\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这时浏览器就可以看到页面正常渲染了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"如果你没遇到 platform 的问题，那直接就可以在浏览器看到结果。"}),"\n",(0,i.jsx)(n.p,{children:"请求的 url 也是对的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"只是现在没有数据，后面加一下初始数据就好了。"}),"\n",(0,i.jsx)(n.p,{children:"这样，我们前端部分也部署完成了。"}),"\n",(0,i.jsx)(n.p,{children:"代码在小册仓库："}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"backend"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_frontend_admin",target:"_blank",rel:"noopener noreferrer",children:"frontend-admin"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们通过 nginx 部署了前端项目，用它来做静态资源托管和 nest 服务的反向代理。"}),"\n",(0,i.jsx)(n.p,{children:"通过 Dockerfile 的多阶段构建，第一个阶段 npm run build 出产物，第二个阶段把产物和 nginx 配置文件复制过去跑 nginx 服务。"}),"\n",(0,i.jsx)(n.p,{children:"之后用 docker build 构建出镜像，把它上传到阿里云镜像仓库。"}),"\n",(0,i.jsx)(n.p,{children:"在另一边的 docker compose 配置文件里添加这个 nginx 的容器配置。"}),"\n",(0,i.jsx)(n.p,{children:"这样服务端那边就可以用 docker compose up 一次性跑起 nginx、nest、mysql、redis 等容器，前后端服务一键启动。"}),"\n",(0,i.jsx)(n.p,{children:"这就是 docker compose 的作用。"}),"\n",(0,i.jsx)(n.p,{children:"过程中如果遇到 platform 不一致的问题，那就 build 的时候指定下 platform 再上传就好了。"}),"\n",(0,i.jsx)(n.p,{children:"这样，我们就通过 docker-compose 把前后端项目都部署到了阿里云："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:""})})]})}function ei(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(ec,{...e})}):ec(e)}let es=ei;ei.__RSPRESS_PAGE_META={},ei.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F130.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E8%AE%A2%E7%B3%BB%E7%BB%9F%EF%BC%9A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);