"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["78871"],{231892:function(n,e,i){i.r(e),i.d(e,{default:()=>Z});var s=i(552676),r=i(740453);let t=i.p+"static/image/e6aaa0f25263e7bedcc1744464d3fb08.8406663c.webp",a=i.p+"static/image/f586ceabd95079aac81325f4e344f6c0.8f9a8d82.webp",d=i.p+"static/image/b792d40f0ae6ba5fb581c482124bfc22.57f552b9.webp",c=i.p+"static/image/63135b85b2304f692ba66e45d6e126d7.b692c732.webp",o=i.p+"static/image/653757689c060bad839f59531f933b0f.ee55b3a9.webp",l=i.p+"static/image/f6f46d94420946f957fec19696897916.b4319aa4.webp",h=i.p+"static/image/ad27af762e3f3b58732e9ef867d14d08.b1c746ec.webp",j=i.p+"static/image/93aab5dbc7de364494abd1f3c943ed1c.6e7ba6eb.webp",g=i.p+"static/image/9c49c4a51dfd2042f8c5b2e1a071a7e4.70bf02e2.webp",m=i.p+"static/image/bafa87b92d218abb4a3645d0c05232e9.634937a1.webp",x=i.p+"static/image/e2d1e26e6a57b907acfb06d987d25929.8460c08b.webp",p=i.p+"static/image/069c67a1e2b95433254057e58d487633.5a1faed7.webp",b=i.p+"static/image/589bdba7860a333547df64522bea271a.807f9f9c.webp",u=i.p+"static/image/9b56cec3d1f9fe0c03d5e6fecf95d090.8218c895.webp",k=i.p+"static/image/acb59f6e30e20616ba080318ec0b5437.bd5c750b.webp",f=i.p+"static/image/d98b772e5a2712275e2a492eee974b4c.8f3e0cc6.webp",w=i.p+"static/image/2b09827bcf2056694a18458e4d72fef2.3b0a373c.webp",y=i.p+"static/image/3eb64253e18a5ecbb3468b584e21dfc4.99b12d6e.webp",T=i.p+"static/image/2bbb8aa692c1632a477214a9094e5aa6.6cbf000a.webp",E=i.p+"static/image/e2025dfb7dd382fb986fef4d79d4214d.a1fae808.webp",R=i.p+"static/image/7330d3a378ee739f8a87c9d29977a252.956318ef.webp",B=i.p+"static/image/d31331ca010a3aebfc7a7287bae0faec.e75d6324.webp",v=i.p+"static/image/07d6e981ad61865581d7340461163e0d.32e5693f.webp",D=i.p+"static/image/6e5dac88cda0882a4deb2827df019747.12c6a841.webp",S=i.p+"static/image/2a62a60dff636269c1b1c758861ef3d0.a0a86ea6.webp",N=i.p+"static/image/42f21619178b7e54ed2570bac554e7c5.e1a06e8b.webp",M=i.p+"static/image/655b988f90ec4471f41955a29c0ebf73.beb7e47a.webp",I=i.p+"static/image/103b324a5b3d975b217d60264febcff3.45d5f5dc.webp",C=i.p+"static/image/b1d6f91f59005091d51405934bf32654.7355417f.webp",A=i.p+"static/image/662ae472c833806a2aa70a882fbdc8ad.98f2c5bc.webp",P=i.p+"static/image/c4270241ad68387ac5cf6a0cc8dbe75e.d6bdc0a2.webp",_=i.p+"static/image/1d76a0507504665779751ef9ff8c5c3c.f2820867.webp",G=i.p+"static/image/529db0b5f85bc8d19274bd501d1395be.8a67bb75.webp",O=i.p+"static/image/108508af8048a4e775afe0587820272d.2d50b13c.webp",U=i.p+"static/image/96a659e67caf5a998e09f9252449b2c5.0c9a2b30.webp",q=i.p+"static/image/bb2044f385c206486baf3e53cc874188.17709bdb.webp",z=i.p+"static/image/480ab8781641f3120a954272b1af87a8.d9ca79b8.webp",L=i.p+"static/image/ca46ecdf6aa739231f3002b14d1965ff.5cea7456.webp",Q=i.p+"static/image/590e987d1b38510d257f03822aa22843.d1a308e9.webp",$=i.p+"static/image/e953cc04d9ccf10c2c20b4a00f41e4ac.361e81df.webp",F=i.p+"static/image/82f0bb5bde66a4d738d5a1538d5accdb.99e4e550.webp",V=i.p+"static/image/e75e7f3e1ca512bc857d176bb810fc1f.5ca042e9.webp",H=i.p+"static/image/9f1bef40f1cc13bb4d982b7ddf78782c.9b6aa007.webp",J=i.p+"static/image/92fe476c80a6142adceab11345ef96b4.eeee56d5.webp",K=i.p+"static/image/72833645c64320dc37c41e0e25d820ab.4ebfaa35.webp",W=i.p+"static/image/3e9aaf1d2b910f67c621d1a450762cc7.6f19ad74.webp";function X(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",pre:"pre",code:"code",h2:"h2"},(0,r.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"124-会议室预订系统预定管理模块-后端开发",children:["124. 会议室预订系统：预定管理模块-后端开发",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#124-会议室预订系统预定管理模块-后端开发",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"这节我们来实现预定管理模块的后端。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:W,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:K,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"涉及到这些接口："}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{children:"接口路径"}),"\n",(0,s.jsx)(e.th,{children:"请求方式"}),"\n",(0,s.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/list"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"预订列表"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/approve"}),"\n",(0,s.jsx)(e.td,{children:"POST"}),"\n",(0,s.jsx)(e.td,{children:"审批预订申请"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/add"}),"\n",(0,s.jsx)(e.td,{children:"POST"}),"\n",(0,s.jsx)(e.td,{children:"申请预订"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/apply/:id"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"通过预订"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/reject/:id"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"取消预订"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/unbind/:id"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"解除预订"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/history"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"预订历史"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/urge"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"催办"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"我们来写一下。"}),"\n",(0,s.jsx)(e.p,{children:"先创建 Booking 的 entity。"}),"\n",(0,s.jsx)(e.p,{children:"在后端项目下创建一个 meeting-room 模块："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"nest g resource booking\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:J,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后修改 booking.entity.ts"}),"\n",(0,s.jsx)(e.p,{children:"根据当时设计的表来写："}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{children:"字段名"}),"\n",(0,s.jsx)(e.th,{children:"数据类型"}),"\n",(0,s.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"id"}),"\n",(0,s.jsx)(e.td,{children:"INT"}),"\n",(0,s.jsx)(e.td,{children:"预订ID"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"user_id"}),"\n",(0,s.jsx)(e.td,{children:"INT"}),"\n",(0,s.jsx)(e.td,{children:"预订用户ID"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"room_id"}),"\n",(0,s.jsx)(e.td,{children:"INT"}),"\n",(0,s.jsx)(e.td,{children:"会议室ID"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"start_time"}),"\n",(0,s.jsx)(e.td,{children:"DATETIME"}),"\n",(0,s.jsx)(e.td,{children:"会议开始时间"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"end_time"}),"\n",(0,s.jsx)(e.td,{children:"DATETIME"}),"\n",(0,s.jsx)(e.td,{children:"会议结束时间"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"status"}),"\n",(0,s.jsx)(e.td,{children:"VARCHAR(20)"}),"\n",(0,s.jsx)(e.td,{children:"状态（申请中、审批通过、审批驳回、已解除）"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"note"}),"\n",(0,s.jsx)(e.td,{children:"VARCHAR(100)"}),"\n",(0,s.jsx)(e.td,{children:"备注"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"create_time"}),"\n",(0,s.jsx)(e.td,{children:"DATETIME"}),"\n",(0,s.jsx)(e.td,{children:"创建时间"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"update_time"}),"\n",(0,s.jsx)(e.td,{children:"DATETIME"}),"\n",(0,s.jsx)(e.td,{children:"更新时间"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { MeetingRoom } from \"src/meeting-room/entities/meeting-room.entity\";\nimport { User } from \"src/user/entities/user.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Booking {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        comment: '会议开始时间'\n    })\n    startTime: Date;\n\n    @Column({\n        comment: '会议结束时间'\n    })\n    endTime: Date;\n\n    @Column({\n        length: 20,\n        comment: '状态（申请中、审批通过、审批驳回、已解除）',\n        default: '申请中'\n    })\n    status: string;\n\n    @Column({\n        length: 100,\n        comment: '备注',\n        default: ''\n    })\n    note: string;\n\n    @ManyToOne(() => User)\n    user: User;\n\n    @ManyToOne(() => MeetingRoom)\n    room: MeetingRoom;\n\n    @CreateDateColumn({\n        comment: '创建时间'\n    })\n    createTime: Date;\n\n    @UpdateDateColumn({\n        comment: '更新时间'\n    })\n    updateTime: Date;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"这里 Booking 和 User、MeetingRoom 是多对一的关系："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:H,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"我们在 entities 引入："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"typeorm 会自动建表和创建外键："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:F,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"在 mysql workbench 里可以看到这个表："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:$,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"这两个外键都是 restrict 的约束："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:Q,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"restrict 是只有从表没有相关记录，才可以删除主表记录。"}),"\n",(0,s.jsx)(e.p,{children:"但我们会议室是支持删除的，怎么办呢？"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:L,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"可以在删除失败时提示有预定记录，然后手动取消预订后再删除。"}),"\n",(0,s.jsx)(e.p,{children:"这个后面再处理。"}),"\n",(0,s.jsx)(e.p,{children:"我们先插入一些数据："}),"\n",(0,s.jsx)(e.p,{children:"在 BookingService 增加一个 initData 方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"@InjectEntityManager()\nprivate entityManager: EntityManager;\n\nasync initData() {\n    const user1 = await this.entityManager.findOneBy(User, {\n      id: 1\n    });\n    const user2 = await this.entityManager.findOneBy(User, {\n      id: 2\n    });\n\n    const room1 = await this.entityManager.findOneBy(MeetingRoom, {\n      id: 3\n    });\n    const room2 = await await this.entityManager.findOneBy(MeetingRoom, {\n      id: 6\n    });\n\n    const booking1 = new Booking();\n    booking1.room = room1;\n    booking1.user = user1;\n    booking1.startTime = new Date();\n    booking1.endTime = new Date(Date.now() + 1000 * 60 * 60);\n\n    await this.entityManager.save(Booking, booking1);\n\n    const booking2 = new Booking();\n    booking2.room = room2;\n    booking2.user = user2;\n    booking2.startTime = new Date();\n    booking2.endTime = new Date(Date.now() + 1000 * 60 * 60);\n\n    await this.entityManager.save(Booking, booking2);\n\n    const booking3 = new Booking();\n    booking3.room = room1;\n    booking3.user = user2;\n    booking3.startTime = new Date();\n    booking3.endTime = new Date(Date.now() + 1000 * 60 * 60);\n\n    await this.entityManager.save(Booking, booking3);\n\n    const booking4 = new Booking();\n    booking4.room = room2;\n    booking4.user = user1;\n    booking4.startTime = new Date();\n    booking4.endTime = new Date(Date.now() + 1000 * 60 * 60);\n\n    await this.entityManager.save(Booking, booking4);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"我们先查询出 2 个 User ，2 个 MeetingRoom，然后创建 4 个 Booking。"}),"\n",(0,s.jsx)(e.p,{children:"用 save 把 4 条记录保存到数据库。"}),"\n",(0,s.jsx)(e.p,{children:"用 repl 的方式跑起来："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"npm run repl\n"})}),"\n",(0,s.jsx)(e.p,{children:"调用 initData 方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"await get(BookingService).initData()\n"})}),"\n",(0,s.jsx)(e.p,{children:"会有一系列 insert 语句："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:z,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"在数据库的 booking 表可以看到插入了 4 条记录："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后来写 booking 模块的接口："}),"\n",(0,s.jsx)(e.p,{children:"首先是 list 接口。"}),"\n",(0,s.jsx)(e.p,{children:"它支持根据条件搜索，并且可以分页："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"我们来写一下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:O,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"@Get('list')\nasync list(\n    @Query('pageNo', new DefaultValuePipe(1), generateParseIntPipe('pageNo')) pageNo: number,\n    @Query('pageSize', new DefaultValuePipe(10), generateParseIntPipe('pageSize')) pageSize: number,\n    @Query('username') username: string,\n    @Query('meetingRoomName') meetingRoomName: string,\n    @Query('meetingRoomPosition') meetingRoomPosition: string,\n    @Query('bookingTimeRangeStart') bookingTimeRangeStart: number,\n    @Query('bookingTimeRangeEnd') bookingTimeRangeEnd: number,\n) {\n    return this.bookingService.find(pageNo, pageSize, username, meetingRoomName, meetingRoomPosition, bookingTimeRangeStart, bookingTimeRangeEnd);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"这种列表接口我们写过，就是传入分页参数、搜索参数，然后在 service 里把它们查出来返回。"}),"\n",(0,s.jsx)(e.p,{children:"这里的时间用 number 来接收。"}),"\n",(0,s.jsx)(e.p,{children:"我们去 BookingService 里实现下这个方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"async find(pageNo: number, pageSize: number, username: string, meetingRoomName: string, meetingRoomPosition: string, bookingTimeRangeStart: number, bookingTimeRangeEnd: number ) {\n    const skipCount = (pageNo - 1) * pageSize;\n\n    const [bookings, totalCount] = await this.entityManager.findAndCount(Booking, {\n      where: {\n        user: {\n          username: Like(`%${username}%`)\n        },\n        room: {\n          name: Like(`%${meetingRoomName}%`),\n          location: Like(`%${meetingRoomPosition}%`)\n        },\n        startTime: Between(new Date(bookingTimeRangeStart), new Date(bookingTimeRangeEnd))\n      },\n      relations: {\n        user: true,\n        room: true,\n      },\n      skip: skipCount,\n      take: pageSize\n    });\n\n    return {\n      bookings,\n      totalCount\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"很容易看懂，就是接个 where 条件，还有分页。"}),"\n",(0,s.jsx)(e.p,{children:"要注意下日期的范围查询使用 between and 语法，这里使用 Between 操作符。"}),"\n",(0,s.jsx)(e.p,{children:"先测试下。"}),"\n",(0,s.jsx)(e.p,{children:"停掉服务，我们用 repl 的方式测："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"npm run repl\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"先看下有啥数据："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后测试下："}),"\n",(0,s.jsx)(e.p,{children:"在 repl 拿到两个时间戳："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"new Date('2023-09-29').getTime()\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"new Date('2023-09-30').getTime()\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"调用下这个方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"await get(BookingService).find(1, 10, 'guang', '天王', '三层', 1695945600000, 1696032000000)\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"打印了一堆 sql，下面有查询的结果："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"查询出来的是 id 为 1 和 3 的记录。"}),"\n",(0,s.jsx)(e.p,{children:"因为条件是 user.name 包含 guang："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"room.name 包含天王："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"所以查出这两条是对的："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"查询逻辑写完了，我们还得优化下。"}),"\n",(0,s.jsx)(e.p,{children:"因为这些参数是可选的，我们要处理下没有传入的情况："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"async find(pageNo: number, pageSize: number, username: string, meetingRoomName: string, meetingRoomPosition: string, bookingTimeRangeStart: number, bookingTimeRangeEnd: number ) {\n    const skipCount = (pageNo - 1) * pageSize;\n\n    const condition: Record<string, any> = {};\n\n    if(username) {\n      condition.user = {\n        username: Like(`%${username}%`)\n      }\n    }\n\n    if(meetingRoomName) {\n      condition.room =  {\n        name: Like(`%${meetingRoomName}%`)\n      }\n    }\n\n    if(meetingRoomPosition) {\n      if (!condition.room) {\n        condition.room = {}\n      }\n      condition.room.location = Like(`%${meetingRoomPosition}%`)\n    }\n\n    if(bookingTimeRangeStart) {\n      if(!bookingTimeRangeEnd) {\n        bookingTimeRangeEnd = bookingTimeRangeStart + 60 * 60 * 1000\n      }\n      condition.startTime = Between(new Date(bookingTimeRangeStart), new Date(bookingTimeRangeEnd))\n    }\n\n    const [bookings, totalCount] = await this.entityManager.findAndCount(Booking, {\n      where: condition,\n      relations: {\n        user: true,\n        room: true,\n      },\n      skip: skipCount,\n      take: pageSize\n    });\n\n    return {\n      bookings,\n      totalCount\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"就是如果传入了，就加到 condition 上。"}),"\n",(0,s.jsx)(e.p,{children:"其中，如果 endTime 没传入，那就用 startTime + 一小时 来搜索。"}),"\n",(0,s.jsx)(e.p,{children:"此外，这里查询出来 user 信息是包含密码的，其实应该把它去掉："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"可以在这里指定 select 的字段："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"但这样有点麻烦。"}),"\n",(0,s.jsx)(e.p,{children:"我们直接查出来之后把它删掉就好了："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"bookings.map(item => {\n    delete item.user.password;\n    return item;\n})\n"})}),"\n",(0,s.jsx)(e.p,{children:"把 repl 停掉，把服务跑起来："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"npm run start:dev\n"})}),"\n",(0,s.jsx)(e.p,{children:"我们在 postman 里测试下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"http://localhost:3005/booking/list?meetingRoomName=天王&username=guang\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(e.p,{children:"接下来是申请预定的接口"}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{children:"接口路径"}),"\n",(0,s.jsx)(e.th,{children:"请求方式"}),"\n",(0,s.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/list"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"预订列表"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/add"}),"\n",(0,s.jsx)(e.td,{children:"POST"}),"\n",(0,s.jsx)(e.td,{children:"申请预订"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"在 BookingController 添加一个接口："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"@Post('add')\n@RequireLogin()\nasync add(@Body() booking: CreateBookingDto, @UserInfo('userId') userId: number) {\n    await this.bookingService.add(booking, userId);\n    return 'success'\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"这里需要用 @UserInfo 拿到 userId。"}),"\n",(0,s.jsx)(e.p,{children:"从 request.user 拿到 userId 的信息，需要登录，所以添加 @RequireLogin 装饰器。"}),"\n",(0,s.jsx)(e.p,{children:"因为我们在 LoginGuard 里做了判断，只有有这个装饰器的 handler 才会从 header 中解析出用户信息放在 reqeust.user 上："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"创建用到的 dto："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { IsNotEmpty, IsNumber } from \"class-validator\";\n\nexport class CreateBookingDto {\n    @IsNotEmpty({ message: '会议室名称不能为空'})\n    @IsNumber()\n    meetingRoomId: number;\n\n    @IsNotEmpty({ message: '开始时间不能为空' })\n    @IsNumber()\n    startTime: number;\n\n    @IsNotEmpty({ message: '结束时间不能为空' })\n    @IsNumber()\n    endTime: number;\n\n    note: string;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"然后在 BookingService 实现下 add 方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"async add(bookingDto: CreateBookingDto, userId: number) {\n    const meetingRoom = await this.entityManager.findOneBy(MeetingRoom, {\n      id: bookingDto.meetingRoomId\n    });\n\n    if(!meetingRoom) {\n      throw new BadRequestException('会议室不存在');\n    }\n\n    const user = await this.entityManager.findOneBy(User, {\n      id: userId\n    });\n\n    const booking = new Booking();\n    booking.room = meetingRoom;\n    booking.user = user;\n    booking.startTime = new Date(bookingDto.startTime);\n    booking.endTime = new Date(bookingDto.endTime);\n\n    await this.entityManager.save(Booking, booking);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"就是根据 id 查询出 meeetingRoom 和 user，然后创建 booking，保存。"}),"\n",(0,s.jsx)(e.p,{children:"测试下："}),"\n",(0,s.jsx)(e.p,{children:"先登录拿到 token："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"带在 Aothrization 的 header 上访问 add 接口："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n    "meetingRoomId": 3,\n    "startTime": 1703986859333,\n    "endTime": 1703987859333\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"在 mysql workbench 查询下，可以看到记录成功插入了："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"当然，现在的接口还是有问题的，我们得限制下，同一个会议室一段时间内只能被预定一次。"}),"\n",(0,s.jsx)(e.p,{children:"那怎么保证预定的时间不会冲突呢？"}),"\n",(0,s.jsx)(e.p,{children:"其实一般的会议室预订系统都是这样做的："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"在右边列出来会议室在一天之内哪些时间可用，哪些时间被预定了。"}),"\n",(0,s.jsx)(e.p,{children:"然后只能在没有被预定的时间内选择。"}),"\n",(0,s.jsx)(e.p,{children:"这里我们就简化一下，查询下已经预定的记录里有没有包含这段时间的就好了。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"async add(bookingDto: CreateBookingDto, userId: number) {\n    const meetingRoom = await this.entityManager.findOneBy(MeetingRoom, {\n      id: bookingDto.meetingRoomId\n    });\n\n    if(!meetingRoom) {\n      throw new BadRequestException('会议室不存在');\n    }\n\n    const user = await this.entityManager.findOneBy(User, {\n      id: userId\n    });\n\n    const booking = new Booking();\n    booking.room = meetingRoom;\n    booking.user = user;\n    booking.startTime = new Date(bookingDto.startTime);\n    booking.endTime = new Date(bookingDto.endTime);\n\n    const res = await this.entityManager.findOneBy(Booking, {\n      room: {\n        id: meetingRoom.id\n      },\n      startTime: LessThanOrEqual(booking.startTime),\n      endTime: MoreThanOrEqual(booking.endTime)\n    });\n\n    if(res) {\n      throw new BadRequestException('该时间段已被预定');\n    }\n    \n    await this.entityManager.save(Booking, booking);\n  }\n"})}),"\n",(0,s.jsx)(e.p,{children:"测试下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n    "meetingRoomId": 3,\n    "startTime": 1703986959333,\n    "endTime": 1703986859333\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"当预定一个已经被预定的时间段时，会提示已被预定。"}),"\n",(0,s.jsx)(e.p,{children:"然后继续写后面接口："}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{children:"接口路径"}),"\n",(0,s.jsx)(e.th,{children:"请求方式"}),"\n",(0,s.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/list"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"预订列表"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/add"}),"\n",(0,s.jsx)(e.td,{children:"POST"}),"\n",(0,s.jsx)(e.td,{children:"申请预订"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/apply/:id"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"通过预订"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/reject/:id"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"取消预订"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/unbind/:id"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"解除预订"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"接下来写修改预定状态的这三个接口。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"状态有这 4 种："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"在 BookingController 添加三个路由："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"@Get(\"apply/:id\")\nasync apply(@Param('id') id: number) {\n    return this.bookingService.apply(id);\n}\n\n@Get(\"reject/:id\")\nasync reject(@Param('id') id: number) {\n    return this.bookingService.reject(id);\n}\n\n@Get(\"unbind/:id\")\nasync unbind(@Param('id') id: number) {\n    return this.bookingService.unbind(id);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"然后在 BookingService 里实现这三个方法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"async apply(id: number) {\n    await this.entityManager.update(Booking, {\n      id\n    }, {\n      status: '审批通过'      \n    });\n    return 'success'\n}\n\nasync reject(id: number) {\n    await this.entityManager.update(Booking, {\n      id\n    }, {\n      status: '审批驳回'      \n    });\n    return 'success'\n}\n\nasync unbind(id: number) {\n    await this.entityManager.update(Booking, {\n      id\n    }, {\n      status: '已解除'      \n    });\n    return 'success'\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"postman 里测试下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"http://localhost:3005/booking/apply/1\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"http://localhost:3005/booking/reject/2\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"http://localhost:3005/booking/reject/3\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"在 mysql workbench 里可以看到状态成功被修改了："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"接下来是催办的接口："}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{children:"接口路径"}),"\n",(0,s.jsx)(e.th,{children:"请求方式"}),"\n",(0,s.jsx)(e.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/list"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"预订列表"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/apply/:id"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"通过预订"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/reject/:id"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"取消预订"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/unbind/:id"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"解除预订"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{children:"/booking/urge"}),"\n",(0,s.jsx)(e.td,{children:"GET"}),"\n",(0,s.jsx)(e.td,{children:"催办"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"按当时的设计，催办要发送邮件和短信，不过我们没买短信服务，这里就发邮件好了。"}),"\n",(0,s.jsx)(e.p,{children:"但也不是每次催办都会发邮件，我们在 redis 里加个标识，半小时内只发一次邮件。"}),"\n",(0,s.jsx)(e.p,{children:"我们在 BookingController 添加一个 urge 接口："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"@Get('urge/:id')\nasync urge(@Param('id') id: number) {\n    return this.bookingService.urge(id);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"然后在 BookingService 添加实现逻辑："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"@Inject(RedisService)\nprivate redisService: RedisService;\n\n@Inject(EmailService)\nprivate emailService: EmailService;\n\nasync urge(id: number) {\n    const flag = await this.redisService.get('urge_' + id);\n\n    if(flag) {\n      return '半小时内只能催办一次，请耐心等待';\n    }\n\n    let email = await this.redisService.get('admin_email');\n\n    if(!email) { \n      const admin = await this.entityManager.findOne(User, {\n        select: {\n          email: true\n        },\n        where: {\n          isAdmin: true\n        }\n      });\n\n      email = admin.email\n\n      this.redisService.set('admin_email', admin.email);\n    }\n\n    this.emailService.sendMail({\n      to: email,\n      subject: '预定申请催办提醒',\n      html: `id 为 ${id} 的预定申请正在等待审批`\n    });\n    \n    this.redisService.set('urge_' + id, 1, 60 * 30);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"我们注入了 EmailService 和 RedisService。"}),"\n",(0,s.jsx)(e.p,{children:"先用 redisService 查询 flag，查到的话就提醒半小时内只能催办一次。"}),"\n",(0,s.jsx)(e.p,{children:"然后用 redisService 查询 admin 的邮箱，没查到的话到数据库查，然后存到 redis。"}),"\n",(0,s.jsx)(e.p,{children:"之后发催办邮件，并且在 redis 里存一个 30 分钟的 flag。"}),"\n",(0,s.jsx)(e.p,{children:"测试下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"第一次催办，管理员会收到邮件："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"第二次催办，会提示半小时只能催办一次："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"在 RedisInsight 里可以看到这两个 key："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"这样，催办接口就完成了。"}),"\n",(0,s.jsx)(e.p,{children:"当然，这里最好是在邮件里带一个具体的链接，点击可以直接打开对应的页面来处理申请。"}),"\n",(0,s.jsx)(e.p,{children:"等后面写完这个页面再改。"}),"\n",(0,s.jsxs)(e.p,{children:["案例代码上传了",(0,s.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:["总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"这节我们完成了预定管理模块的后端代码，包括列表、添加预定、审批、催办等。"}),"\n",(0,s.jsx)(e.p,{children:"后端代码完成了，下节我们来写前端部分的代码。"})]})}function Y(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(X,{...n})}):X(n)}let Z=Y;Y.__RSPRESS_PAGE_META={},Y.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F124.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E8%AE%A2%E7%B3%BB%E7%BB%9F%EF%BC%9A%E9%A2%84%E5%AE%9A%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97-%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"124. 会议室预订系统：预定管理模块-后端开发",headingTitle:"124. 会议室预订系统：预定管理模块-后端开发",frontmatter:{}}}}]);