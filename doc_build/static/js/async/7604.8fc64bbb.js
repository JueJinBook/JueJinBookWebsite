"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["7604"],{957913:function(n,e,r){r.r(e),r.d(e,{default:()=>l});var s=r(552676),i=r(740453);function d(n){let e=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",h2:"h2",img:"img",ol:"ol",code:"code",blockquote:"blockquote",strong:"strong",pre:"pre"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"2api-流程和代码结构",children:["2API 流程和代码结构",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2api-流程和代码结构",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"为了使读者在开始实战之前对 API 开发有个整体的了解，这里选择了两个流程来介绍："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"HTTP API 服务器启动流程"}),"\n",(0,s.jsx)(e.li,{children:"HTTP 请求处理流程"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"本小节也提前给出了程序代码结构图，让读者从宏观上了解将要构建的 API 服务器的功能。"}),"\n",(0,s.jsxs)(e.h2,{id:"http-api-服务器启动流程",children:["HTTP API 服务器启动流程",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#http-api-服务器启动流程",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/5/30/163acb3ab9fd10ff?w=1633&h=1134&f=png&s=108152",alt:""})}),"\n",(0,s.jsx)(e.p,{children:"如上图，在启动一个 API 命令后，API 命令会首先加载配置文件，根据配置做后面的处理工作。通常会将日志相关的配置记录在配置文件中，在解析完配置文件后，就可以加载日志包初始化函数，来初始化日志实例，供后面的程序调用。接下来会初始化数据库实例，建立数据库连接，供后面对数据库的 CRUD 操作使用。在建立完数据库连接后，需要设置 HTTP，通常包括 3 方面的设置："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"设置 Header"}),"\n",(0,s.jsx)(e.li,{children:"注册路由"}),"\n",(0,s.jsx)(e.li,{children:"注册中间件"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["之后会调用 ",(0,s.jsx)(e.code,{children:"net/http"})," 包的 ",(0,s.jsx)(e.code,{children:"ListenAndServe()"})," 方法启动 HTTP 服务器。"]}),"\n",(0,s.jsxs)(e.p,{children:["在启动 HTTP 端口之前，程序会 go 一个协程，来ping HTTP 服务器的 ",(0,s.jsx)(e.code,{children:"/sd/health"})," 接口，如果程序成功启动，ping 协程在 timeout 之前会成功返回，如果程序启动失败，则 ping 协程最终会 timeout，并终止整个程序。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"解析配置文件、初始化 Log 、初始化数据库的顺序根据自己的喜好和需求来排即可。"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"http-请求处理流程",children:["HTTP 请求处理流程",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#http-请求处理流程",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/5/30/163adeb520ed5673?w=633&h=401&f=png&s=62914",alt:"网图"})}),"\n",(0,s.jsxs)(e.p,{children:["一次完整的 HTTP 请求处理流程如上图所示。（图片出自",(0,s.jsx)(e.a,{href:"https://book.douban.com/subject/10746113/",target:"_blank",rel:"noopener noreferrer",children:"《HTTP 权威指南》"}),"，推荐想全面理解 HTTP 的读者阅读此书。）"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"1. 建立连接"})}),"\n",(0,s.jsxs)(e.p,{children:["客户端发送 HTTP 请求后，服务器会根据域名进行域名解析，就是将网站名称转变成 IP 地址：localhost -> 127.0.0.1，Linux hosts文件、DNS 域名解析等可以实现这种功能。之后通过发起 TCP 的三次握手建立连接。TCP 三次连接请参考 ",(0,s.jsx)(e.a,{href:"https://blog.csdn.net/oney139/article/details/8103223",target:"_blank",rel:"noopener noreferrer",children:"TCP 三次握手详解及释放连接过程"}),"，建立连接之后就可以发送 HTTP 请求了。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"2. 接收请求"})}),"\n",(0,s.jsxs)(e.p,{children:["HTTP 服务器软件进程，这里指的是 API 服务器，在接收到请求之后，首先根据 HTTP 请求行的信息来解析到 HTTP 方法和路径，在上图所示的报文中，方法是 ",(0,s.jsx)(e.code,{children:"GET"}),"，路径是 ",(0,s.jsx)(e.code,{children:"/index.html"}),"，之后根据 API 服务器注册的路由信息（大概可以理解为：HTTP 方法 + 路径和具体处理函数的映射）找到具体的处理函数。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"3. 处理请求"})}),"\n",(0,s.jsx)(e.p,{children:"在接收到请求之后，API 通常会解析 HTTP 请求报文获取请求头和消息体，然后根据这些信息进行相应的业务处理，HTTP 框架一般都有自带的解析函数，只需要输入 HTTP 请求报文，就可以解析到需要的请求头和消息体。通常情况下，业务逻辑处理可以分为两种：包含对数据库的操作和不包含对数据的操作。大型系统中通常两种都会有："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"包含对数据库的操作：需要访问数据库（增删改查），然后获取指定的数据，对数据处理后构建指定的响应结构体，返回响应包。数据库通常用的是 MySQL，因为免费，功能和性能也都能满足企业级应用的要求。"}),"\n",(0,s.jsx)(e.li,{children:"不包含对数据库的操作：进行业务逻辑处理后，构建指定的响应结构体，返回响应包。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"4. 记录事务处理过程"})}),"\n",(0,s.jsx)(e.p,{children:"在业务逻辑处理过程中，需要记录一些关键信息，方便后期 Debug 用。在 Go 中有各种各样的日志包可以用来记录这些信息。"}),"\n",(0,s.jsxs)(e.h2,{id:"http-请求和响应格式介绍",children:["HTTP 请求和响应格式介绍",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#http-请求和响应格式介绍",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"一个 HTTP 请求报文由请求行（request line）、请求头部（header）、空行和请求数据四部分组成，下图是请求报文的一般格式。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/6/27/1643f2e4e3da9dcd?w=2393&h=1385&f=png&s=274398",alt:""})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"第一行必须是一个请求行（request line），用来说明请求类型、要访问的资源以及所使用的 HTTP 版本"}),"\n",(0,s.jsx)(e.li,{children:"紧接着是一个头部（header）小节，用来说明服务器要使用的附加信息"}),"\n",(0,s.jsx)(e.li,{children:"之后是一个空行"}),"\n",(0,s.jsx)(e.li,{children:"再后面可以添加任意的其他数据（称之为主体：body）"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"HTTP 响应格式跟请求格式类似，也是由 4 个部分组成：状态行、消息报头、空行和响应数据。"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"目录结构",children:["目录结构",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#目录结构",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"├── admin.sh                     # 进程的start|stop|status|restart控制文件\n├── conf                         # 配置文件统一存放目录\n│\xa0\xa0 ├── config.yaml              # 配置文件\n│\xa0\xa0 ├── server.crt               # TLS配置文件\n│\xa0\xa0 └── server.key\n├── config                       # 专门用来处理配置和配置文件的Go package\n│\xa0\xa0 └── config.go                 \n├── db.sql                       # 在部署新环境时，可以登录MySQL客户端，执行source db.sql创建数据库和表\n├── docs                         # swagger文档，执行 swag init 生成的\n│\xa0\xa0 ├── docs.go\n│\xa0\xa0 └── swagger\n│\xa0\xa0     ├── swagger.json\n│\xa0\xa0     └── swagger.yaml\n├── handler                      # 类似MVC架构中的C，用来读取输入，并将处理流程转发给实际的处理函数，最后返回结果\n│\xa0\xa0 ├── handler.go\n│\xa0\xa0 ├── sd                       # 健康检查handler\n│\xa0\xa0 │\xa0\xa0 └── check.go \n│\xa0\xa0 └── user                     # 核心：用户业务逻辑handler\n│\xa0\xa0     ├── create.go            # 新增用户\n│\xa0\xa0     ├── delete.go            # 删除用户\n│\xa0\xa0     ├── get.go               # 获取指定的用户信息\n│\xa0\xa0     ├── list.go              # 查询用户列表\n│\xa0\xa0     ├── login.go             # 用户登录\n│\xa0\xa0     ├── update.go            # 更新用户\n│\xa0\xa0     └── user.go              # 存放用户handler公用的函数、结构体等\n├── main.go                      # Go程序唯一入口\n├── Makefile                     # Makefile文件，一般大型软件系统都是采用make来作为编译工具\n├── model                        # 数据库相关的操作统一放在这里，包括数据库初始化和对表的增删改查\n│\xa0\xa0 ├── init.go                  # 初始化和连接数据库\n│\xa0\xa0 ├── model.go                 # 存放一些公用的go struct\n│\xa0\xa0 └── user.go                  # 用户相关的数据库CURD操作\n├── pkg                          # 引用的包\n│\xa0\xa0 ├── auth                     # 认证包\n│\xa0\xa0 │\xa0\xa0 └── auth.go\n│\xa0\xa0 ├── constvar                 # 常量统一存放位置\n│\xa0\xa0 │\xa0\xa0 └── constvar.go\n│\xa0\xa0 ├── errno                    # 错误码存放位置\n│\xa0\xa0 │\xa0\xa0 ├── code.go\n│\xa0\xa0 │\xa0\xa0 └── errno.go\n│\xa0\xa0 ├── token\n│\xa0\xa0 │\xa0\xa0 └── token.go\n│\xa0\xa0 └── version                  # 版本包\n│\xa0\xa0     ├── base.go\n│\xa0\xa0     ├── doc.go\n│\xa0\xa0     └── version.go\n├── README.md                    # API目录README\n├── router                       # 路由相关处理\n│\xa0\xa0 ├── middleware               # API服务器用的是Gin Web框架，Gin中间件存放位置\n│\xa0\xa0 │\xa0\xa0 ├── auth.go \n│\xa0\xa0 │\xa0\xa0 ├── header.go\n│\xa0\xa0 │\xa0\xa0 ├── logging.go\n│\xa0\xa0 │\xa0\xa0 └── requestid.go\n│\xa0\xa0 └── router.go\n├── service                      # 实际业务处理函数存放位置\n│\xa0\xa0 └── service.go\n├── util                         # 工具类函数存放目录\n│   ├── util.go \n│   └── util_test.go\n└── vendor                         # vendor目录用来管理依赖包\n    ├── github.com\n    ├── golang.org\n    ├── gopkg.in\n    └── vendor.json\n"})}),"\n",(0,s.jsx)(e.p,{children:"Go API 项目中，一般都会包括这些功能项：Makefile 文件、配置文件目录、RESTful API 服务器的 handler 目录、model 目录、工具类目录、vendor 目录，以及实际处理业务逻辑函数所存放的 service 目录。这些都在上述的代码结构中有列出，新加功能时将代码放入对应功能的目录/文件中，可以使整个项目代码结构更加清晰，非常有利于后期的查找和维护。"}),"\n",(0,s.jsxs)(e.h2,{id:"小结",children:["小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"本小节通过介绍 API 服务器启动流程和 HTTP 请求处理流程，来让读者对 API 服务器中的关键流程有个宏观的了解，更好地理解 API 服务器是如何工作的。API 服务器源码结构也非常重要，一个好的源码结构通常能让逻辑更加清晰，编写更加顺畅，后期维护更加容易，本小册介绍了笔者倾向的源码组织结构，供读者参考。"})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}let l=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F2API%20%E6%B5%81%E7%A8%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.md"]={toc:[{text:"HTTP API 服务器启动流程",id:"http-api-服务器启动流程",depth:2},{text:"HTTP 请求处理流程",id:"http-请求处理流程",depth:2},{text:"HTTP 请求和响应格式介绍",id:"http-请求和响应格式介绍",depth:2},{text:"目录结构",id:"目录结构",depth:2},{text:"小结",id:"小结",depth:2}],title:"2API 流程和代码结构",headingTitle:"2API 流程和代码结构",frontmatter:{}}}}]);