"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["2669"],{648633:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var s=r(552676),c=r(740453);function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li",h3:"h3",strong:"strong"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"7数值的扩展",children:["7.数值的扩展",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7数值的扩展",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"二进制和八进制表示法",children:["二进制和八进制表示法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二进制和八进制表示法",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 提供了二进制和八进制数值的新的写法，分别用前缀",(0,s.jsx)(n.code,{children:"0b"}),"（或",(0,s.jsx)(n.code,{children:"0B"}),"）和",(0,s.jsx)(n.code,{children:"0o"}),"（或",(0,s.jsx)(n.code,{children:"0O"}),"）表示。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"0b111110111 === 503 // true\n0o767 === 503 // true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["从 ES5 开始，在严格模式之中，八进制就不再允许使用前缀",(0,s.jsx)(n.code,{children:"0"}),"表示，ES6 进一步明确，要使用前缀",(0,s.jsx)(n.code,{children:"0o"}),"表示。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 非严格模式\n(function(){\n  console.log(0o11 === 011);\n})() // true\n\n// 严格模式\n(function(){\n  'use strict';\n  console.log(0o11 === 011);\n})() // Uncaught SyntaxError: Octal literals are not allowed in strict mode.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果要将",(0,s.jsx)(n.code,{children:"0b"}),"和",(0,s.jsx)(n.code,{children:"0o"}),"前缀的字符串数值转为十进制，要使用",(0,s.jsx)(n.code,{children:"Number"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number('0b111')  // 7\nNumber('0o10')  // 8\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"数值分隔符",children:["数值分隔符",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数值分隔符",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["欧美语言中，较长的数值允许每三位添加一个分隔符（通常是一个逗号），增加数值的可读性。比如，",(0,s.jsx)(n.code,{children:"1000"}),"可以写作",(0,s.jsx)(n.code,{children:"1,000"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-numeric-separator",target:"_blank",rel:"noopener noreferrer",children:"ES2021"}),"，允许 JavaScript 的数值使用下划线（",(0,s.jsx)(n.code,{children:"_"}),"）作为分隔符。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let budget = 1_000_000_000_000;\nbudget === 10 ** 12 // true\n"})}),"\n",(0,s.jsx)(n.p,{children:"这个数值分隔符没有指定间隔的位数，也就是说，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"123_00 === 12_300 // true\n\n12345_00 === 123_4500 // true\n12345_00 === 1_234_500 // true\n"})}),"\n",(0,s.jsx)(n.p,{children:"小数和科学计数法也可以使用数值分隔符。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 小数\n0.000_001\n\n// 科学计数法\n1e10_000\n"})}),"\n",(0,s.jsx)(n.p,{children:"数值分隔符有几个使用注意点。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"不能放在数值的最前面（leading）或最后面（trailing）。"}),"\n",(0,s.jsx)(n.li,{children:"不能两个或两个以上的分隔符连在一起。"}),"\n",(0,s.jsx)(n.li,{children:"小数点的前后不能有分隔符。"}),"\n",(0,s.jsxs)(n.li,{children:["科学计数法里面，表示指数的",(0,s.jsx)(n.code,{children:"e"}),"或",(0,s.jsx)(n.code,{children:"E"}),"前后不能有分隔符。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"下面的写法都会报错。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 全部报错\n3_.141\n3._141\n1_e12\n1e_12\n123__456\n_1464301\n1464301_\n"})}),"\n",(0,s.jsx)(n.p,{children:"除了十进制，其他进制的数值也可以使用分隔符。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 二进制\n0b1010_0001_1000_0101\n// 十六进制\n0xA0_B0_C0\n"})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，数值分隔符可以按字节顺序分隔数值，这在操作二进制位时，非常有用。"}),"\n",(0,s.jsxs)(n.p,{children:["注意，分隔符不能紧跟着进制的前缀",(0,s.jsx)(n.code,{children:"0b"}),"、",(0,s.jsx)(n.code,{children:"0B"}),"、",(0,s.jsx)(n.code,{children:"0o"}),"、",(0,s.jsx)(n.code,{children:"0O"}),"、",(0,s.jsx)(n.code,{children:"0x"}),"、",(0,s.jsx)(n.code,{children:"0X"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 报错\n0_b111111000\n0b_111111000\n"})}),"\n",(0,s.jsx)(n.p,{children:"数值分隔符只是一种书写便利，对于 JavaScript 内部数值的存储和输出，并没有影响。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let num = 12_345;\n\nnum // 12345\nnum.toString() // 12345\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面示例中，变量",(0,s.jsx)(n.code,{children:"num"}),"的值为",(0,s.jsx)(n.code,{children:"12_345"}),"，但是内部存储和输出的时候，都不会有数值分隔符。"]}),"\n",(0,s.jsx)(n.p,{children:"下面三个将字符串转成数值的函数，不支持数值分隔符。主要原因是语言的设计者认为，数值分隔符主要是为了编码时书写数值的方便，而不是为了处理外部输入的数据。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Number()"}),"\n",(0,s.jsx)(n.li,{children:"parseInt()"}),"\n",(0,s.jsx)(n.li,{children:"parseFloat()"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number('123_456') // NaN\nparseInt('123_456') // 123\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"numberisfinite-numberisnan",children:["Number.isFinite(), Number.isNaN()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#numberisfinite-numberisnan",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 在",(0,s.jsx)(n.code,{children:"Number"}),"对象上，新提供了",(0,s.jsx)(n.code,{children:"Number.isFinite()"}),"和",(0,s.jsx)(n.code,{children:"Number.isNaN()"}),"两个方法。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Number.isFinite()"}),"用来检查一个数值是否为有限的（finite），即不是",(0,s.jsx)(n.code,{children:"Infinity"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.isFinite(15); // true\nNumber.isFinite(0.8); // true\nNumber.isFinite(NaN); // false\nNumber.isFinite(Infinity); // false\nNumber.isFinite(-Infinity); // false\nNumber.isFinite('foo'); // false\nNumber.isFinite('15'); // false\nNumber.isFinite(true); // false\n"})}),"\n",(0,s.jsxs)(n.p,{children:["注意，如果参数类型不是数值，",(0,s.jsx)(n.code,{children:"Number.isFinite"}),"一律返回",(0,s.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Number.isNaN()"}),"用来检查一个值是否为",(0,s.jsx)(n.code,{children:"NaN"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.isNaN(NaN) // true\nNumber.isNaN(15) // false\nNumber.isNaN('15') // false\nNumber.isNaN(true) // false\nNumber.isNaN(9/NaN) // true\nNumber.isNaN('true' / 0) // true\nNumber.isNaN('true' / 'true') // true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果参数类型不是",(0,s.jsx)(n.code,{children:"NaN"}),"，",(0,s.jsx)(n.code,{children:"Number.isNaN"}),"一律返回",(0,s.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["它们与传统的全局方法",(0,s.jsx)(n.code,{children:"isFinite()"}),"和",(0,s.jsx)(n.code,{children:"isNaN()"}),"的区别在于，传统方法先调用",(0,s.jsx)(n.code,{children:"Number()"}),"将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，",(0,s.jsx)(n.code,{children:"Number.isFinite()"}),"对于非数值一律返回",(0,s.jsx)(n.code,{children:"false"}),", ",(0,s.jsx)(n.code,{children:"Number.isNaN()"}),"只有对于",(0,s.jsx)(n.code,{children:"NaN"}),"才返回",(0,s.jsx)(n.code,{children:"true"}),"，非",(0,s.jsx)(n.code,{children:"NaN"}),"一律返回",(0,s.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'isFinite(25) // true\nisFinite("25") // true\nNumber.isFinite(25) // true\nNumber.isFinite("25") // false\n\nisNaN(NaN) // true\nisNaN("NaN") // true\nNumber.isNaN(NaN) // true\nNumber.isNaN("NaN") // false\nNumber.isNaN(1) // false\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"numberparseint-numberparsefloat",children:["Number.parseInt(), Number.parseFloat()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#numberparseint-numberparsefloat",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 将全局方法",(0,s.jsx)(n.code,{children:"parseInt()"}),"和",(0,s.jsx)(n.code,{children:"parseFloat()"}),"，移植到",(0,s.jsx)(n.code,{children:"Number"}),"对象上面，行为完全保持不变。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ES5的写法\nparseInt('12.34') // 12\nparseFloat('123.45#') // 123.45\n\n// ES6的写法\nNumber.parseInt('12.34') // 12\nNumber.parseFloat('123.45#') // 123.45\n"})}),"\n",(0,s.jsx)(n.p,{children:"这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.parseInt === parseInt // true\nNumber.parseFloat === parseFloat // true\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"numberisinteger",children:["Number.isInteger()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#numberisinteger",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Number.isInteger()"}),"用来判断一个数值是否为整数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.isInteger(25) // true\nNumber.isInteger(25.1) // false\n"})}),"\n",(0,s.jsx)(n.p,{children:"JavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 25  和 25.0 被视为同一个值。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.isInteger(25) // true\nNumber.isInteger(25.0) // true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果参数不是数值，",(0,s.jsx)(n.code,{children:"Number.isInteger"}),"返回",(0,s.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.isInteger() // false\nNumber.isInteger(null) // false\nNumber.isInteger('15') // false\nNumber.isInteger(true) // false\n"})}),"\n",(0,s.jsxs)(n.p,{children:["注意，由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，",(0,s.jsx)(n.code,{children:"Number.isInteger"}),"可能会误判。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.isInteger(3.0000000000000002) // true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Number.isInteger"}),"的参数明明不是整数，但是会返回",(0,s.jsx)(n.code,{children:"true"}),"。原因就是这个小数的精度达到了小数点后16个十进制位，转成二进制位超过了53个二进制位，导致最后的那个",(0,s.jsx)(n.code,{children:"2"}),"被丢弃了。"]}),"\n",(0,s.jsxs)(n.p,{children:["类似的情况还有，如果一个数值的绝对值小于",(0,s.jsx)(n.code,{children:"Number.MIN_VALUE"}),"（5E-324），即小于 JavaScript 能够分辨的最小值，会被自动转为 0。这时，",(0,s.jsx)(n.code,{children:"Number.isInteger"}),"也会误判。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.isInteger(5E-324) // false\nNumber.isInteger(5E-325) // true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"5E-325"}),"由于值太小，会被自动转为0，因此返回",(0,s.jsx)(n.code,{children:"true"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["总之，如果对数据精度的要求较高，不建议使用",(0,s.jsx)(n.code,{children:"Number.isInteger()"}),"判断一个数值是否为整数。"]}),"\n",(0,s.jsxs)(n.h2,{id:"numberepsilon",children:["Number.EPSILON",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#numberepsilon",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 在",(0,s.jsx)(n.code,{children:"Number"}),"对象上面，新增一个极小的常量",(0,s.jsx)(n.code,{children:"Number.EPSILON"}),"。根据规格，它表示 1 与大于 1 的最小浮点数之间的差。"]}),"\n",(0,s.jsxs)(n.p,{children:["对于 64 位浮点数来说，大于 1 的最小浮点数相当于二进制的",(0,s.jsx)(n.code,{children:"1.00..001"}),"，小数点后面有连续 51 个零。这个值减去 1 之后，就等于 2 的 -52 次方。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'Number.EPSILON === Math.pow(2, -52)\n// true\nNumber.EPSILON\n// 2.220446049250313e-16\nNumber.EPSILON.toFixed(20)\n// "0.00000000000000022204"\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Number.EPSILON"}),"实际上是 JavaScript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。"]}),"\n",(0,s.jsx)(n.p,{children:"引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"0.1 + 0.2\n// 0.30000000000000004\n\n0.1 + 0.2 - 0.3\n// 5.551115123125783e-17\n\n5.551115123125783e-17.toFixed(20)\n// '0.00000000000000005551'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码解释了，为什么比较",(0,s.jsx)(n.code,{children:"0.1 + 0.2"}),"与",(0,s.jsx)(n.code,{children:"0.3"}),"得到的结果是",(0,s.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"0.1 + 0.2 === 0.3 // false\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Number.EPSILON"}),"可以用来设置“能够接受的误差范围”。比如，误差范围设为 2 的-50 次方（即",(0,s.jsx)(n.code,{children:"Number.EPSILON * Math.pow(2, 2)"}),"），即如果两个浮点数的差小于这个值，我们就认为这两个浮点数相等。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"5.551115123125783e-17 < Number.EPSILON * Math.pow(2, 2)\n// true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["因此，",(0,s.jsx)(n.code,{children:"Number.EPSILON"}),"的实质是一个可以接受的最小误差范围。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function withinErrorMargin (left, right) {\n  return Math.abs(left - right) < Number.EPSILON * Math.pow(2, 2);\n}\n\n0.1 + 0.2 === 0.3 // false\nwithinErrorMargin(0.1 + 0.2, 0.3) // true\n\n1.1 + 1.3 === 2.4 // false\nwithinErrorMargin(1.1 + 1.3, 2.4) // true\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面的代码为浮点数运算，部署了一个误差检查函数。"}),"\n",(0,s.jsxs)(n.h2,{id:"安全整数和-numberissafeinteger",children:["安全整数和 Number.isSafeInteger()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安全整数和-numberissafeinteger",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript 能够准确表示的整数范围在",(0,s.jsx)(n.code,{children:"-2^53"}),"到",(0,s.jsx)(n.code,{children:"2^53"}),"之间（不含两个端点），超过这个范围，无法精确表示这个值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.pow(2, 53) // 9007199254740992\n\n9007199254740992  // 9007199254740992\n9007199254740993  // 9007199254740992\n\nMath.pow(2, 53) === Math.pow(2, 53) + 1\n// true\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码中，超出 2 的 53 次方之后，一个数就不精确了。"}),"\n",(0,s.jsxs)(n.p,{children:["ES6 引入了",(0,s.jsx)(n.code,{children:"Number.MAX_SAFE_INTEGER"}),"和",(0,s.jsx)(n.code,{children:"Number.MIN_SAFE_INTEGER"}),"这两个常量，用来表示这个范围的上下限。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1\n// true\nNumber.MAX_SAFE_INTEGER === 9007199254740991\n// true\n\nNumber.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER\n// true\nNumber.MIN_SAFE_INTEGER === -9007199254740991\n// true\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码中，可以看到 JavaScript 能够精确表示的极限。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Number.isSafeInteger()"}),"则是用来判断一个整数是否落在这个范围之内。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.isSafeInteger('a') // false\nNumber.isSafeInteger(null) // false\nNumber.isSafeInteger(NaN) // false\nNumber.isSafeInteger(Infinity) // false\nNumber.isSafeInteger(-Infinity) // false\n\nNumber.isSafeInteger(3) // true\nNumber.isSafeInteger(1.2) // false\nNumber.isSafeInteger(9007199254740990) // true\nNumber.isSafeInteger(9007199254740992) // false\n\nNumber.isSafeInteger(Number.MIN_SAFE_INTEGER - 1) // false\nNumber.isSafeInteger(Number.MIN_SAFE_INTEGER) // true\nNumber.isSafeInteger(Number.MAX_SAFE_INTEGER) // true\nNumber.isSafeInteger(Number.MAX_SAFE_INTEGER + 1) // false\n"})}),"\n",(0,s.jsx)(n.p,{children:"这个函数的实现很简单，就是跟安全整数的两个边界值比较一下。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.isSafeInteger = function (n) {\n  return (typeof n === 'number' &&\n    Math.round(n) === n &&\n    Number.MIN_SAFE_INTEGER <= n &&\n    n <= Number.MAX_SAFE_INTEGER);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"实际使用这个函数时，需要注意。验证运算结果是否落在安全整数的范围内，不要只验证运算结果，而要同时验证参与运算的每个值。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.isSafeInteger(9007199254740993)\n// false\nNumber.isSafeInteger(990)\n// true\nNumber.isSafeInteger(9007199254740993 - 990)\n// true\n9007199254740993 - 990\n// 返回结果 9007199254740002\n// 正确答案应该是 9007199254740003\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"9007199254740993"}),"不是一个安全整数，但是",(0,s.jsx)(n.code,{children:"Number.isSafeInteger"}),"会返回结果，显示计算结果是安全的。这是因为，这个数超出了精度范围，导致在计算机内部，以",(0,s.jsx)(n.code,{children:"9007199254740992"}),"的形式储存。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"9007199254740993 === 9007199254740992\n// true\n"})}),"\n",(0,s.jsx)(n.p,{children:"所以，如果只验证运算结果是否为安全整数，很可能得到错误结果。下面的函数可以同时验证两个运算数和运算结果。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function trusty (left, right, result) {\n  if (\n    Number.isSafeInteger(left) &&\n    Number.isSafeInteger(right) &&\n    Number.isSafeInteger(result)\n  ) {\n    return result;\n  }\n  throw new RangeError('Operation cannot be trusted!');\n}\n\ntrusty(9007199254740993, 990, 9007199254740993 - 990)\n// RangeError: Operation cannot be trusted!\n\ntrusty(1, 2, 3)\n// 3\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"math-对象的扩展",children:["Math 对象的扩展",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#math-对象的扩展",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"ES6 在 Math 对象上新增了 17 个与数学相关的方法。所有这些方法都是静态方法，只能在 Math 对象上调用。"}),"\n",(0,s.jsxs)(n.h3,{id:"mathtrunc",children:["Math.trunc()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mathtrunc",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.trunc"}),"方法用于去除一个数的小数部分，返回整数部分。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.trunc(4.1) // 4\nMath.trunc(4.9) // 4\nMath.trunc(-4.1) // -4\nMath.trunc(-4.9) // -4\nMath.trunc(-0.1234) // -0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["对于非数值，",(0,s.jsx)(n.code,{children:"Math.trunc"}),"内部使用",(0,s.jsx)(n.code,{children:"Number"}),"方法将其先转为数值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.trunc('123.456') // 123\nMath.trunc(true) //1\nMath.trunc(false) // 0\nMath.trunc(null) // 0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["对于空值和无法截取整数的值，返回",(0,s.jsx)(n.code,{children:"NaN"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.trunc(NaN);      // NaN\nMath.trunc('foo');    // NaN\nMath.trunc();         // NaN\nMath.trunc(undefined) // NaN\n"})}),"\n",(0,s.jsx)(n.p,{children:"对于没有部署这个方法的环境，可以用下面的代码模拟。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.trunc = Math.trunc || function(x) {\n  return x < 0 ? Math.ceil(x) : Math.floor(x);\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"mathsign",children:["Math.sign()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mathsign",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.sign"}),"方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。"]}),"\n",(0,s.jsx)(n.p,{children:"它会返回五种值。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["参数为正数，返回",(0,s.jsx)(n.code,{children:"+1"}),"；"]}),"\n",(0,s.jsxs)(n.li,{children:["参数为负数，返回",(0,s.jsx)(n.code,{children:"-1"}),"；"]}),"\n",(0,s.jsxs)(n.li,{children:["参数为 0，返回",(0,s.jsx)(n.code,{children:"0"}),"；"]}),"\n",(0,s.jsxs)(n.li,{children:["参数为-0，返回",(0,s.jsx)(n.code,{children:"-0"}),";"]}),"\n",(0,s.jsxs)(n.li,{children:["其他值，返回",(0,s.jsx)(n.code,{children:"NaN"}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.sign(-5) // -1\nMath.sign(5) // +1\nMath.sign(0) // +0\nMath.sign(-0) // -0\nMath.sign(NaN) // NaN\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果参数是非数值，会自动转为数值。对于那些无法转为数值的值，会返回",(0,s.jsx)(n.code,{children:"NaN"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.sign('')  // 0\nMath.sign(true)  // +1\nMath.sign(false)  // 0\nMath.sign(null)  // 0\nMath.sign('9')  // +1\nMath.sign('foo')  // NaN\nMath.sign()  // NaN\nMath.sign(undefined)  // NaN\n"})}),"\n",(0,s.jsx)(n.p,{children:"对于没有部署这个方法的环境，可以用下面的代码模拟。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.sign = Math.sign || function(x) {\n  x = +x; // convert to a number\n  if (x === 0 || isNaN(x)) {\n    return x;\n  }\n  return x > 0 ? 1 : -1;\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"mathcbrt",children:["Math.cbrt()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mathcbrt",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.cbrt()"}),"方法用于计算一个数的立方根。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.cbrt(-1) // -1\nMath.cbrt(0)  // 0\nMath.cbrt(1)  // 1\nMath.cbrt(2)  // 1.2599210498948732\n"})}),"\n",(0,s.jsxs)(n.p,{children:["对于非数值，",(0,s.jsx)(n.code,{children:"Math.cbrt()"}),"方法内部也是先使用",(0,s.jsx)(n.code,{children:"Number()"}),"方法将其转为数值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.cbrt('8') // 2\nMath.cbrt('hello') // NaN\n"})}),"\n",(0,s.jsx)(n.p,{children:"对于没有部署这个方法的环境，可以用下面的代码模拟。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.cbrt = Math.cbrt || function(x) {\n  var y = Math.pow(Math.abs(x), 1/3);\n  return x < 0 ? -y : y;\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"mathclz32",children:["Math.clz32()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mathclz32",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.clz32()"}),"方法将参数转为 32 位无符号整数的形式，然后返回这个 32 位值里面有多少个前导 0。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.clz32(0) // 32\nMath.clz32(1) // 31\nMath.clz32(1000) // 22\nMath.clz32(0b01000000000000000000000000000000) // 1\nMath.clz32(0b00100000000000000000000000000000) // 2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，0 的二进制形式全为 0，所以有 32 个前导 0；1 的二进制形式是",(0,s.jsx)(n.code,{children:"0b1"}),"，只占 1 位，所以 32 位之中有 31 个前导 0；1000 的二进制形式是",(0,s.jsx)(n.code,{children:"0b1111101000"}),"，一共有 10 位，所以 32 位之中有 22 个前导 0。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"clz32"}),"这个函数名就来自”count leading zero bits in 32-bit binary representation of a number“（计算一个数的 32 位二进制形式的前导 0 的个数）的缩写。"]}),"\n",(0,s.jsxs)(n.p,{children:["左移运算符（",(0,s.jsx)(n.code,{children:"<<"}),"）与",(0,s.jsx)(n.code,{children:"Math.clz32"}),"方法直接相关。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.clz32(0) // 32\nMath.clz32(1) // 31\nMath.clz32(1 << 1) // 30\nMath.clz32(1 << 2) // 29\nMath.clz32(1 << 29) // 2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["对于小数，",(0,s.jsx)(n.code,{children:"Math.clz32"}),"方法只考虑整数部分。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.clz32(3.2) // 30\nMath.clz32(3.9) // 30\n"})}),"\n",(0,s.jsxs)(n.p,{children:["对于空值或其他类型的值，",(0,s.jsx)(n.code,{children:"Math.clz32"}),"方法会将它们先转为数值，然后再计算。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.clz32() // 32\nMath.clz32(NaN) // 32\nMath.clz32(Infinity) // 32\nMath.clz32(null) // 32\nMath.clz32('foo') // 32\nMath.clz32([]) // 32\nMath.clz32({}) // 32\nMath.clz32(true) // 31\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"mathimul",children:["Math.imul()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mathimul",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.imul"}),"方法返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.imul(2, 4)   // 8\nMath.imul(-1, 8)  // -8\nMath.imul(-2, -2) // 4\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果只考虑最后 32 位，大多数情况下，",(0,s.jsx)(n.code,{children:"Math.imul(a, b)"}),"与",(0,s.jsx)(n.code,{children:"a * b"}),"的结果是相同的，即该方法等同于",(0,s.jsx)(n.code,{children:"(a * b)|0"}),"的效果（超过 32 位的部分溢出）。之所以需要部署这个方法，是因为 JavaScript 有精度限制，超过 2 的 53 次方的值无法精确表示。这就是说，对于那些很大的数的乘法，低位数值往往都是不精确的，",(0,s.jsx)(n.code,{children:"Math.imul"}),"方法可以返回正确的低位数值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"(0x7fffffff * 0x7fffffff)|0 // 0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面这个乘法算式，返回结果为 0。但是由于这两个二进制数的最低位都是 1，所以这个结果肯定是不正确的，因为根据二进制乘法，计算结果的二进制最低位应该也是 1。这个错误就是因为它们的乘积超过了 2 的 53 次方，JavaScript 无法保存额外的精度，就把低位的值都变成了 0。",(0,s.jsx)(n.code,{children:"Math.imul"}),"方法可以返回正确的值 1。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.imul(0x7fffffff, 0x7fffffff) // 1\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"mathfround",children:["Math.fround()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mathfround",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.fround"}),"方法返回一个数的32位单精度浮点数形式。"]}),"\n",(0,s.jsxs)(n.p,{children:["对于32位单精度格式来说，数值精度是24个二进制位（1 位隐藏位与 23 位有效位），所以对于 -2","24"," 至 2","24"," 之间的整数（不含两个端点），返回结果与参数本身一致。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.fround(0)   // 0\nMath.fround(1) \xa0 // 1\nMath.fround(2 ** 24 - 1)   // 16777215\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果参数的绝对值大于 2","24","，返回的结果便开始丢失精度。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.fround(2 ** 24)       // 16777216\nMath.fround(2 ** 24 + 1)   // 16777216\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.fround"}),"方法的主要作用，是将64位双精度浮点数转为32位单精度浮点数。如果小数的精度超过24个二进制位，返回值就会不同于原值，否则返回值不变（即与64位双精度值一致）。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 未丢失有效精度\nMath.fround(1.125) // 1.125\nMath.fround(7.25)  // 7.25\n\n// 丢失精度\nMath.fround(0.3) \xa0 // 0.30000001192092896\nMath.fround(0.7) \xa0 // 0.699999988079071\nMath.fround(1.0000000123) // 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["对于 ",(0,s.jsx)(n.code,{children:"NaN"})," 和 ",(0,s.jsx)(n.code,{children:"Infinity"}),"，此方法返回原值。对于其它类型的非数值，",(0,s.jsx)(n.code,{children:"Math.fround"})," 方法会先将其转为数值，再返回单精度浮点数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.fround(NaN)      // NaN\nMath.fround(Infinity) // Infinity\n\nMath.fround('5')      // 5\nMath.fround(true)     // 1\nMath.fround(null)     // 0\nMath.fround([])       // 0\nMath.fround({})       // NaN\n"})}),"\n",(0,s.jsx)(n.p,{children:"对于没有部署这个方法的环境，可以用下面的代码模拟。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.fround = Math.fround || function (x) {\n  return new Float32Array([x])[0];\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"mathhypot",children:["Math.hypot()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mathhypot",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.hypot"}),"方法返回所有参数的平方和的平方根。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.hypot(3, 4);        // 5\nMath.hypot(3, 4, 5);     // 7.0710678118654755\nMath.hypot();            // 0\nMath.hypot(NaN);         // NaN\nMath.hypot(3, 4, 'foo'); // NaN\nMath.hypot(3, 4, '5');   // 7.0710678118654755\nMath.hypot(-3);          // 3\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码中，3 的平方加上 4 的平方，等于 5 的平方。"}),"\n",(0,s.jsxs)(n.p,{children:["如果参数不是数值，",(0,s.jsx)(n.code,{children:"Math.hypot"}),"方法会将其转为数值。只要有一个参数无法转为数值，就会返回 NaN。"]}),"\n",(0,s.jsxs)(n.h3,{id:"对数方法",children:["对数方法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#对数方法",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"ES6 新增了 4 个对数相关方法。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（1） Math.expm1()"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.expm1(x)"}),"返回 e","x"," - 1，即",(0,s.jsx)(n.code,{children:"Math.exp(x) - 1"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.expm1(-1) // -0.6321205588285577\nMath.expm1(0)  // 0\nMath.expm1(1)  // 1.718281828459045\n"})}),"\n",(0,s.jsx)(n.p,{children:"对于没有部署这个方法的环境，可以用下面的代码模拟。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.expm1 = Math.expm1 || function(x) {\n  return Math.exp(x) - 1;\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（2）Math.log1p()"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.log1p(x)"}),"方法返回",(0,s.jsx)(n.code,{children:"1 + x"}),"的自然对数，即",(0,s.jsx)(n.code,{children:"Math.log(1 + x)"}),"。如果",(0,s.jsx)(n.code,{children:"x"}),"小于-1，返回",(0,s.jsx)(n.code,{children:"NaN"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.log1p(1)  // 0.6931471805599453\nMath.log1p(0)  // 0\nMath.log1p(-1) // -Infinity\nMath.log1p(-2) // NaN\n"})}),"\n",(0,s.jsx)(n.p,{children:"对于没有部署这个方法的环境，可以用下面的代码模拟。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.log1p = Math.log1p || function(x) {\n  return Math.log(1 + x);\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（3）Math.log10()"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.log10(x)"}),"返回以 10 为底的",(0,s.jsx)(n.code,{children:"x"}),"的对数。如果",(0,s.jsx)(n.code,{children:"x"}),"小于 0，则返回 NaN。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.log10(2)      // 0.3010299956639812\nMath.log10(1)      // 0\nMath.log10(0)      // -Infinity\nMath.log10(-2)     // NaN\nMath.log10(100000) // 5\n"})}),"\n",(0,s.jsx)(n.p,{children:"对于没有部署这个方法的环境，可以用下面的代码模拟。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.log10 = Math.log10 || function(x) {\n  return Math.log(x) / Math.LN10;\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（4）Math.log2()"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Math.log2(x)"}),"返回以 2 为底的",(0,s.jsx)(n.code,{children:"x"}),"的对数。如果",(0,s.jsx)(n.code,{children:"x"}),"小于 0，则返回 NaN。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.log2(3)       // 1.584962500721156\nMath.log2(2)       // 1\nMath.log2(1)       // 0\nMath.log2(0)       // -Infinity\nMath.log2(-2)      // NaN\nMath.log2(1024)    // 10\nMath.log2(1 << 29) // 29\n"})}),"\n",(0,s.jsx)(n.p,{children:"对于没有部署这个方法的环境，可以用下面的代码模拟。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.log2 = Math.log2 || function(x) {\n  return Math.log(x) / Math.LN2;\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"双曲函数方法",children:["双曲函数方法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#双曲函数方法",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"ES6 新增了 6 个双曲函数方法。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Math.sinh(x)"})," 返回",(0,s.jsx)(n.code,{children:"x"}),"的双曲正弦（hyperbolic sine）"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Math.cosh(x)"})," 返回",(0,s.jsx)(n.code,{children:"x"}),"的双曲余弦（hyperbolic cosine）"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Math.tanh(x)"})," 返回",(0,s.jsx)(n.code,{children:"x"}),"的双曲正切（hyperbolic tangent）"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Math.asinh(x)"})," 返回",(0,s.jsx)(n.code,{children:"x"}),"的反双曲正弦（inverse hyperbolic sine）"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Math.acosh(x)"})," 返回",(0,s.jsx)(n.code,{children:"x"}),"的反双曲余弦（inverse hyperbolic cosine）"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Math.atanh(x)"})," 返回",(0,s.jsx)(n.code,{children:"x"}),"的反双曲正切（inverse hyperbolic tangent）"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"bigint-数据类型",children:["BigInt 数据类型",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#bigint-数据类型",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"简介",children:["简介",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），大于这个范围的整数，JavaScript 是无法精确表示，这使得 JavaScript 不适合进行科学和金融方面的精确计算。二是大于或等于2的1024次方的数值，JavaScript 无法表示，会返回",(0,s.jsx)(n.code,{children:"Infinity"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 超过 53 个二进制位的数值，无法保持精度\nMath.pow(2, 53) === Math.pow(2, 53) + 1 // true\n\n// 超过 2 的 1024 次方的数值，无法表示\nMath.pow(2, 1024) // Infinity\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-bigint",target:"_blank",rel:"noopener noreferrer",children:"ES2020"})," 引入了一种新的数据类型 BigInt（大整数），来解决这个问题，这是 ECMAScript 的第八种数据类型。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const a = 2172141653n;\nconst b = 15346349309n;\n\n// BigInt 可以保持精度\na * b // 33334444555566667777n\n\n// 普通整数无法保持精度\nNumber(a) * Number(b) // 33334444555566670000\n"})}),"\n",(0,s.jsxs)(n.p,{children:["为了与 Number 类型区别，BigInt 类型的数据必须添加后缀",(0,s.jsx)(n.code,{children:"n"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"1234 // 普通整数\n1234n // BigInt\n\n// BigInt 的运算\n1n + 2n // 3n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["BigInt 同样可以使用各种进制表示，都要加上后缀",(0,s.jsx)(n.code,{children:"n"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"0b1101n // 二进制\n0o777n // 八进制\n0xFFn // 十六进制\n"})}),"\n",(0,s.jsx)(n.p,{children:"BigInt 与普通整数是两种值，它们之间并不相等。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"42n === 42 // false\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"typeof"}),"运算符对于 BigInt 类型的数据返回",(0,s.jsx)(n.code,{children:"bigint"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"typeof 123n // 'bigint'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["BigInt 可以使用负号（",(0,s.jsx)(n.code,{children:"-"}),"），但是不能使用正号（",(0,s.jsx)(n.code,{children:"+"}),"），因为会与 asm.js 冲突。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"-42n // 正确\n+42n // 报错\n"})}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript 以前不能计算70的阶乘（即",(0,s.jsx)(n.code,{children:"70!"}),"），因为超出了可以表示的精度。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let p = 1;\nfor (let i = 1; i <= 70; i++) {\n  p *= i;\n}\nconsole.log(p); // 1.197857166996989e+100\n"})}),"\n",(0,s.jsx)(n.p,{children:"现在支持大整数了，就可以算了，浏览器的开发者工具运行下面代码，就 OK。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let p = 1n;\nfor (let i = 1n; i <= 70n; i++) {\n  p *= i;\n}\nconsole.log(p); // 11978571...00000000n\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"bigint-函数",children:["BigInt 函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#bigint-函数",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript 原生提供",(0,s.jsx)(n.code,{children:"BigInt"}),"函数，可以用它生成 BigInt 类型的数值。转换规则基本与",(0,s.jsx)(n.code,{children:"Number()"}),"一致，将其他类型的值转为 BigInt。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"BigInt(123) // 123n\nBigInt('123') // 123n\nBigInt(false) // 0n\nBigInt(true) // 1n\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"BigInt()"}),"函数必须有参数，而且参数必须可以正常转为数值，下面的用法都会报错。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"new BigInt() // TypeError\nBigInt(undefined) //TypeError\nBigInt(null) // TypeError\nBigInt('123n') // SyntaxError\nBigInt('abc') // SyntaxError\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，尤其值得注意字符串",(0,s.jsx)(n.code,{children:"123n"}),"无法解析成 Number 类型，所以会报错。"]}),"\n",(0,s.jsx)(n.p,{children:"参数如果是小数，也会报错。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"BigInt(1.5) // RangeError\nBigInt('1.5') // SyntaxError\n"})}),"\n",(0,s.jsx)(n.p,{children:"BigInt 继承了 Object 对象的两个实例方法。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"BigInt.prototype.toString()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"BigInt.prototype.valueOf()"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"它还继承了 Number 对象的一个实例方法。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"BigInt.prototype.toLocaleString()"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"此外，还提供了三个静态方法。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"BigInt.asUintN(width, BigInt)"}),"： 给定的 BigInt 转为 0 到 2","width"," - 1 之间对应的值。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"BigInt.asIntN(width, BigInt)"}),"：给定的 BigInt 转为 -2","width - 1"," 到 2","width - 1"," - 1 之间对应的值。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"BigInt.parseInt(string[, radix])"}),"：近似于",(0,s.jsx)(n.code,{children:"Number.parseInt()"}),"，将一个字符串转换成指定进制的 BigInt。"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const max = 2n ** (64n - 1n) - 1n;\n\nBigInt.asIntN(64, max)\n// 9223372036854775807n\nBigInt.asIntN(64, max + 1n)\n// -9223372036854775808n\nBigInt.asUintN(64, max + 1n)\n// 9223372036854775808n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"max"}),"是64位带符号的 BigInt 所能表示的最大值。如果对这个值加",(0,s.jsx)(n.code,{children:"1n"}),"，",(0,s.jsx)(n.code,{children:"BigInt.asIntN()"}),"将会返回一个负值，因为这时新增的一位将被解释为符号位。而",(0,s.jsx)(n.code,{children:"BigInt.asUintN()"}),"方法由于不存在符号位，所以可以正确返回结果。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果",(0,s.jsx)(n.code,{children:"BigInt.asIntN()"}),"和",(0,s.jsx)(n.code,{children:"BigInt.asUintN()"}),"指定的位数，小于数值本身的位数，那么头部的位将被舍弃。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const max = 2n ** (64n - 1n) - 1n;\n\nBigInt.asIntN(32, max) // -1n\nBigInt.asUintN(32, max) // 4294967295n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"max"}),"是一个64位的 BigInt，如果转为32位，前面的32位都会被舍弃。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面是",(0,s.jsx)(n.code,{children:"BigInt.parseInt()"}),"的例子。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Number.parseInt() 与 BigInt.parseInt() 的对比\nNumber.parseInt('9007199254740993', 10)\n// 9007199254740992\nBigInt.parseInt('9007199254740993', 10)\n// 9007199254740993n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，由于有效数字超出了最大限度，",(0,s.jsx)(n.code,{children:"Number.parseInt"}),"方法返回的结果是不精确的，而",(0,s.jsx)(n.code,{children:"BigInt.parseInt"}),"方法正确返回了对应的 BigInt。"]}),"\n",(0,s.jsxs)(n.p,{children:["对于二进制数组，BigInt 新增了两个类型",(0,s.jsx)(n.code,{children:"BigUint64Array"}),"和",(0,s.jsx)(n.code,{children:"BigInt64Array"}),"，这两种数据类型返回的都是64位 BigInt。",(0,s.jsx)(n.code,{children:"DataView"}),"对象的实例方法",(0,s.jsx)(n.code,{children:"DataView.prototype.getBigInt64()"}),"和",(0,s.jsx)(n.code,{children:"DataView.prototype.getBigUint64()"}),"，返回的也是 BigInt。"]}),"\n",(0,s.jsxs)(n.h3,{id:"转换规则",children:["转换规则",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#转换规则",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["可以使用",(0,s.jsx)(n.code,{children:"Boolean()"}),"、",(0,s.jsx)(n.code,{children:"Number()"}),"和",(0,s.jsx)(n.code,{children:"String()"}),"这三个方法，将 BigInt 可以转为布尔值、数值和字符串类型。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'Boolean(0n) // false\nBoolean(1n) // true\nNumber(1n)  // 1\nString(1n)  // "1"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，注意最后一个例子，转为字符串时后缀",(0,s.jsx)(n.code,{children:"n"}),"会消失。"]}),"\n",(0,s.jsxs)(n.p,{children:["另外，取反运算符（",(0,s.jsx)(n.code,{children:"!"}),"）也可以将 BigInt 转为布尔值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"!0n // true\n!1n // false\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"数学运算",children:["数学运算",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数学运算",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["数学运算方面，BigInt 类型的",(0,s.jsx)(n.code,{children:"+"}),"、",(0,s.jsx)(n.code,{children:"-"}),"、",(0,s.jsx)(n.code,{children:"*"}),"和",(0,s.jsx)(n.code,{children:"**"}),"这四个二元运算符，与 Number 类型的行为一致。除法运算",(0,s.jsx)(n.code,{children:"/"}),"会舍去小数部分，返回一个整数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"9n / 5n\n// 1n\n"})}),"\n",(0,s.jsx)(n.p,{children:"几乎所有的数值运算符都可以用在 BigInt，但是有两个例外。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["不带符号的右移位运算符",(0,s.jsx)(n.code,{children:">>>"})]}),"\n",(0,s.jsxs)(n.li,{children:["一元的求正运算符",(0,s.jsx)(n.code,{children:"+"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["上面两个运算符用在 BigInt 会报错。前者是因为",(0,s.jsx)(n.code,{children:">>>"}),"运算符是不带符号的，但是 BigInt 总是带有符号的，导致该运算无意义，完全等同于右移运算符",(0,s.jsx)(n.code,{children:">>"}),"。后者是因为一元运算符",(0,s.jsx)(n.code,{children:"+"}),"在 asm.js 里面总是返回 Number 类型，为了不破坏 asm.js 就规定",(0,s.jsx)(n.code,{children:"+1n"}),"会报错。"]}),"\n",(0,s.jsx)(n.p,{children:"BigInt 不能与普通数值进行混合运算。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"1n + 1.3 // 报错\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码报错是因为无论返回的是 BigInt 或 Number，都会导致丢失精度信息。比如",(0,s.jsx)(n.code,{children:"(2n**53n + 1n) + 0.5"}),"这个表达式，如果返回 BigInt 类型，",(0,s.jsx)(n.code,{children:"0.5"}),"这个小数部分会丢失；如果返回 Number 类型，有效精度只能保持 53 位，导致精度下降。"]}),"\n",(0,s.jsx)(n.p,{children:"同样的原因，如果一个标准库函数的参数预期是 Number 类型，但是得到的是一个 BigInt，就会报错。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 错误的写法\nMath.sqrt(4n) // 报错\n\n// 正确的写法\nMath.sqrt(Number(4n)) // 2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Math.sqrt"}),"的参数预期是 Number 类型，如果是 BigInt 就会报错，必须先用",(0,s.jsx)(n.code,{children:"Number"}),"方法转一下类型，才能进行计算。"]}),"\n",(0,s.jsxs)(n.p,{children:["asm.js 里面，",(0,s.jsx)(n.code,{children:"|0"}),"跟在一个数值的后面会返回一个32位整数。根据不能与 Number 类型混合运算的规则，BigInt 如果与",(0,s.jsx)(n.code,{children:"|0"}),"进行运算会报错。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"1n | 0 // 报错\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"其他运算",children:["其他运算",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#其他运算",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["BigInt 对应的布尔值，与 Number 类型一致，即",(0,s.jsx)(n.code,{children:"0n"}),"会转为",(0,s.jsx)(n.code,{children:"false"}),"，其他值转为",(0,s.jsx)(n.code,{children:"true"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"if (0n) {\n  console.log('if');\n} else {\n  console.log('else');\n}\n// else\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"0n"}),"对应",(0,s.jsx)(n.code,{children:"false"}),"，所以会进入",(0,s.jsx)(n.code,{children:"else"}),"子句。"]}),"\n",(0,s.jsxs)(n.p,{children:["比较运算符（比如",(0,s.jsx)(n.code,{children:">"}),"）和相等运算符（",(0,s.jsx)(n.code,{children:"=="}),"）允许 BigInt 与其他类型的值混合计算，因为这样做不会损失精度。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"0n < 1 // true\n0n < true // true\n0n == 0 // true\n0n == false // true\n0n === 0 // false\n"})}),"\n",(0,s.jsx)(n.p,{children:"BigInt 与字符串混合运算时，会先转为字符串，再进行运算。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"'' + 123n // \"123\"\n"})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let d=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F7.%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95.md"]={toc:[{text:"二进制和八进制表示法",id:"二进制和八进制表示法",depth:2},{text:"数值分隔符",id:"数值分隔符",depth:2},{text:"Number.isFinite(), Number.isNaN()",id:"numberisfinite-numberisnan",depth:2},{text:"Number.parseInt(), Number.parseFloat()",id:"numberparseint-numberparsefloat",depth:2},{text:"Number.isInteger()",id:"numberisinteger",depth:2},{text:"Number.EPSILON",id:"numberepsilon",depth:2},{text:"安全整数和 Number.isSafeInteger()",id:"安全整数和-numberissafeinteger",depth:2},{text:"Math 对象的扩展",id:"math-对象的扩展",depth:2},{text:"Math.trunc()",id:"mathtrunc",depth:3},{text:"Math.sign()",id:"mathsign",depth:3},{text:"Math.cbrt()",id:"mathcbrt",depth:3},{text:"Math.clz32()",id:"mathclz32",depth:3},{text:"Math.imul()",id:"mathimul",depth:3},{text:"Math.fround()",id:"mathfround",depth:3},{text:"Math.hypot()",id:"mathhypot",depth:3},{text:"对数方法",id:"对数方法",depth:3},{text:"双曲函数方法",id:"双曲函数方法",depth:3},{text:"BigInt 数据类型",id:"bigint-数据类型",depth:2},{text:"简介",id:"简介",depth:3},{text:"BigInt 函数",id:"bigint-函数",depth:3},{text:"转换规则",id:"转换规则",depth:3},{text:"数学运算",id:"数学运算",depth:3},{text:"其他运算",id:"其他运算",depth:3}],title:"7.数值的扩展",headingTitle:"7.数值的扩展",frontmatter:{}}}}]);