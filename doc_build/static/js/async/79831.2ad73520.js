"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79831"],{363486:function(e,n,c){c.r(n),c.d(n,{default:()=>E});var s=c(552676),d=c(740453);let r=c.p+"static/image/89e3070eb34626398fe441ce6343999e.3a827dfc.png",i=c.p+"static/image/c89e5979521052ab9e6bdb8f09b29f17.0a8e4f8c.png",a=c.p+"static/image/2dc7a3614cacff0524217062043f5744.e99ca85c.png",l=c.p+"static/image/aadc5a337d36a6ae76c8e50ba79ca802.eff569fe.png",g=c.p+"static/image/6185441e1e16bbb4d340234198fe520d.5cfe8698.png",t=c.p+"static/image/c4c8a3d274069992e0b25a1c2a58539f.a5cf81e9.png",h=c.p+"static/image/c94deb4468ca1bac587e12556cf7c2d0.9b58fb5d.png",p=c.p+"static/image/ed0cafc600c263d2fbb3f5c2135fa25b.98227c4b.png",j=c.p+"static/image/0d56091530fd3d28fb8e471127742828.fc40ce98.png",o=c.p+"static/image/e9272369cf608194bcd10e5815ea05dd.29ffece3.png",b=c.p+"static/image/1d2a34be214665528d1b6156520d12dc.9867bdd7.png",x=c.p+"static/image/e3316dde6c21c90e87a5313e613d09b5.5b78cae0.png",u=c.p+"static/image/97af151c5c25f7a70f5fc302222fcd51.9481ae22.png",m=c.p+"static/image/cf5f8b4dab52549110817302edb2a8ce.e582bb1e.png";function f(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",img:"img",h2:"h2",pre:"pre",code:"code",ul:"ul",li:"li",ol:"ol"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"15工具介绍vscode-debugger-的使用",children:["15.工具介绍：VSCode Debugger 的使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#15工具介绍vscode-debugger-的使用",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"想看懂复杂代码离不开 debugger，它是提升 Node.js 水平必备的能力。因为后面的案例代码都是有一定的复杂度的，建议同学们先学会使用 debugger 再去学后面的案例，结合 debugger 来看。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这一节，我们来学习下 vscode debugger 的使用。"}),"\n",(0,s.jsxs)(n.p,{children:["首先，我们把",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/babel-plugin-exercize",target:"_blank",rel:"noopener noreferrer",children:"代码"}),"下载下来后，可以看到又一个 .vscode 的目录，里面有个 launch.json 的配置，这里面就是调试的配置。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这个文件就是调试的配置，点开 debugger 的窗口，就可以看到启动调试的按钮。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以在想断住的那一行左边点一下，就会打上断点，然后点击调试，就会以 debug 模式运行，到了断点就会停住，然后可以看到堆栈信息、断点等。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这是 vscode debugger 的使用方式。"}),"\n",(0,s.jsxs)(n.h2,{id:"vscode-debugger-的配置",children:["vscode debugger 的配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vscode-debugger-的配置",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"会了怎么使用之后，我们来深入讲下怎么配置，希望能够让同学们的 nodejs 调试能力有所提升。"}),"\n",(0,s.jsx)(n.p,{children:"点击这个齿轮，会打开 .vscode/launch.json 的内容来编辑，在这里写各种配置。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"点击右下角的按钮就会有一个菜单来选择配置的模版："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"运行环境有很多，比如 chrome、node.js 等，这里我们只需要 node.js 的环境。"}),"\n",(0,s.jsx)(n.p,{children:"然后启动方式分为 launch 和 attach 两种。为什么是这两种呢？"}),"\n",(0,s.jsx)(n.p,{children:"那是因为调试是分为客户端和服务端的，"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们如果是启动 node.js 的调试模式，需要加上 --inspect  或者 --inspect-brk（在首行断住）参数，之后会启动一个 websocket server，等待客户端链接。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"两者之间是通过 v8 debug protocol 来通信的。"}),"\n",(0,s.jsx)(n.p,{children:"比如：\n设置断点："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n    "seq":117,\n    "type":"request",\n    "command":"setbreakpoint",\n    "arguments":{\n        "type":"function",\n        "target":"f"\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"去掉断点："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n    "seq":117,\n    "type":"request",\n    "command":"clearbreakpoint",\n    "arguments": {\n        "type":"function",\n        "breakpoint":1\n     }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"手动连接的话可以打开 chrome://inspect 页面，可以用 chrome devtools 的 debugger client 连上来调试。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"但是，用 vscode 不用这么麻烦，直接在 .vscode/launch.json 里面配置下就可以。"}),"\n",(0,s.jsx)(n.p,{children:"前面提到 vsocde 的 debug 配置分为 launch 和 attach 两种："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"launch： 把 nodejs 代码跑起来，启动 debugger server，然后用 client 来连接"}),"\n",(0,s.jsx)(n.li,{children:"attach：已经有了 debugger server，只需要启动一个 debugger client 连接上就行"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"所以就可以看到 launch 的配置要指定运行什么 js 代码："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"而 attach 则只需要指定 连接到哪个端口："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当然，小册里的代码都通过 launch 的配置就可以，如果添加的话也是类似上面的方式添加调试配置，然后就可以调试了。"}),"\n",(0,s.jsx)(n.p,{children:"vscode 提供了这几个控制按键（底层会发送 debug 协议的消息），点击按钮就可以让代码继续运行。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"第一个是继续运行，到下一个断点停住"}),"\n",(0,s.jsx)(n.p,{children:"第二个是运行下一步（单步运行）"}),"\n",(0,s.jsx)(n.p,{children:"第三个可以在执行到某个函数调用的时候进入函数内部执行"}),"\n",(0,s.jsx)(n.p,{children:"第四个是跳出当前函数调用，然后往下执行"}),"\n",(0,s.jsx)(n.p,{children:"第五个是重新运行"}),"\n",(0,s.jsx)(n.p,{children:"第六个是终止运行"}),"\n",(0,s.jsxs)(n.p,{children:["学会了 debugger 以后，api 不用记，打个断点都能看到：\n",(0,s.jsx)("img",{src:i,alt:""})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:""})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"debug 能力是一种很重要的能力，比起 console.log 来能精确的知道每一步的运行结果，更容易读懂代码。"}),"\n",(0,s.jsx)(n.p,{children:"小册代码中有 vscode debugger 的配置，但是很多读者不会使用，所以这节来介绍了一下，主要是在 .vscode/launch.json 里面添加配置，然后在 debug 窗口来启动调试，之后就可以打断点和单步运行了。"}),"\n",(0,s.jsx)(n.p,{children:"vscode debugger 的使用分为这几步："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"在 .vscode/launch.json 里面添加对应 js 文件的调试配置"}),"\n",(0,s.jsx)(n.li,{children:"在要调试的那行左边打断点"}),"\n",(0,s.jsx)(n.li,{children:"点击调试窗口的调试按钮启动调试"}),"\n",(0,s.jsx)(n.li,{children:"点击下一步、下一个断点、进入函数内部等方式来部分执行代码"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"debugger 的实现原理是分为一个 debugger server 和一个 debugger client，deubgger server 在 js 引擎里面，debugger client 包括 chrome devtools、vscode debugger 等，他们两者之间通过调试协议通信，比如 v8 debug protocol。"}),"\n",(0,s.jsx)(n.p,{children:"launch 的方式就是启动一个 debugger server（websocket），然后用 debugger client 连接上，发送消息来控制单步执行、打断点等。"}),"\n",(0,s.jsx)(n.p,{children:"而 attach 只是 启动 client，连上已有的 debugger server，后续流程一样。"}),"\n",(0,s.jsx)(n.p,{children:"node --inspect xxx.js 就可以看到 ws://sss:111 的地址，这就是 websocket 的 debugger server 的地址。客户端用 chrome. devtools. 可以，用 vscode 或者其他 ide 都可以，因为他们都实现了 v8 debug protocol 的 websocket client，只是做了各自的 ui。（当然，原理做了解即可，了解原理的目的是为了更好的使用工具）。"}),"\n",(0,s.jsx)(n.p,{children:"掌握 vscode debugger 的使用，对更好的理解案例代码有很大的帮助。"})]})}function v(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}let E=v;v.__RSPRESS_PAGE_META={},v.__RSPRESS_PAGE_META["Babel%20%E6%8F%92%E4%BB%B6%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F15.%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D%EF%BC%9AVSCode%20Debugger%20%E7%9A%84%E4%BD%BF%E7%94%A8.md"]={toc:[{text:"vscode debugger 的配置",id:"vscode-debugger-的配置",depth:2},{text:"总结",id:"总结",depth:2}],title:"15.工具介绍：VSCode Debugger 的使用",headingTitle:"15.工具介绍：VSCode Debugger 的使用",frontmatter:{}}}}]);