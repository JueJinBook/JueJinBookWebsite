"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["50725"],{911265:function(n,e,a){n.exports=a.p+"static/image/6f11cc65362038ed7bf6402bde420b98.3667bca0.gif"},125987:function(n,e,a){a.r(e),a.d(e,{default:()=>nl});var i=a(552676),s=a(740453),l=a(911265);let r=a.p+"static/image/1d925f175f2a358593779ee5909659ce.7abf9500.gif",t=a.p+"static/image/b7d3a32d7e9fbfb9df2bb5bda8687097.e85d3adb.webp",c=a.p+"static/image/bfbcdbb54c96da8c904dfe7109526524.bb6902c7.webp",p=a.p+"static/image/33f051d3f3c0e8fa534ca53e784b5986.c00ea080.webp",o=a.p+"static/image/0d2780bde9d1d82c0ac59cdb7d8ae551.287f76b5.webp",d=a.p+"static/image/da7aa6d1168891d96ffb5e03043c1dad.724624a2.webp",f=a.p+"static/image/27e7f2ddf557cfbf4f35fb04be23b1bb.f69c8c03.gif",m=a.p+"static/image/27972ee260e8a049e6804fbd1b517664.c045e1d6.webp",h=a.p+"static/image/beb250831875389d4bb500f3ebc6fe8f.e5c3be93.gif",u=a.p+"static/image/40c734ac733002e12d7e044bcde333ef.dddf393e.webp",x=a.p+"static/image/a91cb785706cfa2fd85ac0ebb45d21c8.e4892cce.webp",g=a.p+"static/image/31def01c7bf84d4e8fa2929905789297.e1838355.webp",j=a.p+"static/image/f1a4d6e2c05ac25fcfdb416935c9496d.7f0eab16.webp",b=a.p+"static/image/7c6b01e9f8191f29a19644a6013c6f0c.6e64e323.webp",F=a.p+"static/image/b363a6a250d4c54f5884e1c00b2595c8.11437301.gif",v=a.p+"static/image/a5f65c3a234d5b23540c9784b50d0883.f3f8b695.webp",U=a.p+"static/image/3713d06a609f27964ed4ada8a6eaa5f5.ddfd338d.webp",C=a.p+"static/image/68689473e9fe0552cedb8ff5f29dc7de.9171eb68.webp",w=a.p+"static/image/45c71bde5fda68b3b5f77fd46f3ab547.813b7f21.webp",y=a.p+"static/image/73d1b7d025e952e6fe497934091f4baa.16baca9f.gif",E=a.p+"static/image/8ffcb4632b2a4a6edd8582330fd4db9e.aadc7d9c.webp",k=a.p+"static/image/7458776644c03f63efc1148f7a597063.fbbadc52.gif",L=a.p+"static/image/1946cbdc8bc8c6a9bece63681fcf7fa2.a2855fd0.webp",P=a.p+"static/image/e5e4364179c8496730ddd8df54df67ce.95f99c1a.webp",D=a.p+"static/image/73f56a9851a40ff3e898e1c41528863e.6d5de2a4.webp",N=a.p+"static/image/df769ff35b9a54fab50ab41abc7f7e3a.c64bc420.webp",R=a.p+"static/image/e9ba4386e1a4f1456474348d5808699a.0d11b612.webp",O=a.p+"static/image/67123ce85909cca93c985acfcd3a31f1.6ea353e9.webp",A=a.p+"static/image/6431b0275fe836ca64a6ca8c346f33ca.2565c1d8.webp",S=a.p+"static/image/8edf1d13527fee23c0ac5eb033245254.dea89ab9.webp",I=a.p+"static/image/894350c1d319a2027bce480f3b96e3dd.de4f973c.gif",B=a.p+"static/image/959d9c7d5c61d30c4ff91737a9ee97f3.95cb865f.webp",_=a.p+"static/image/63ad5f46f4f15096eab5ab506cf7b13c.2b4ee9fb.webp",M=a.p+"static/image/17f11202a1db576441dc359c02868300.a87b007c.webp",T=a.p+"static/image/30559569165e9650cbdfdbf5d7d2c26e.cf30e364.webp",q=a.p+"static/image/9b5e0cd102b7bd9fc500d602baed5706.085ce05a.webp",z=a.p+"static/image/2ee538e332715917c799ca76f0774164.be47f0b7.webp",H=a.p+"static/image/c444dc474de608aa2583061746045e4d.53c31888.webp",W=a.p+"static/image/86bf4ff9385825c57aafbd6b519757bd.e50ce335.webp",G=a.p+"static/image/bd841be72848d6050ddaf5fb4538a846.a3e45ced.gif",$=a.p+"static/image/2eb2e43571161eeedb2ea1607cfd1332.f8624a84.webp",J=a.p+"static/image/dc277f4e75e3c7cce1090278d1544514.293cd7c1.webp",Q=a.p+"static/image/445ff94f9d86ccad0ac4b02c2ee13ded.62a25a8d.webp",K=a.p+"static/image/149bf66a20dbf3691c1a2870227abfe3.bfe2a558.webp",V=a.p+"static/image/cc9b61c9883f2e5e3e90e1bd70de3d7c.800b0353.gif",X=a.p+"static/image/467774c4b01ea4e61852c42bb6788fed.cb27a0d0.webp",Y=a.p+"static/image/67b7cd11d439cea8f9a117467c6a94dd.f59eaff0.webp",Z=a.p+"static/image/d5db35f290c73453406960a05b0fe5de.ac63fcbd.webp",nn=a.p+"static/image/c83a56ec5e947192037628fba3b15f76.32337aba.webp",ne=a.p+"static/image/f1d7f4afb6ed16fde3b03c7b75f6558d.c7bb530f.gif",na=a.p+"static/image/578a89adec954fe61a765b988ee4b8af.db7f0c28.gif";function ni(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"第37章组件实战upload拖拽上传",children:["第37章—组件实战：Upload拖拽上传",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第37章组件实战upload拖拽上传",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"\uFEFF上传文件是常见的需求，我们经常用 antd 的 Upload 组件来实现。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:na,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"它有一个上传按钮，下面是上传的文件列表的状态："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"并且，还支持拖拽上传："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:ne,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"这节我们就来实现下这个 Upload 组件。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx create-vite\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:nn,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"用 create-vite 创建个 react 项目。"}),"\n",(0,i.jsx)(e.p,{children:"去掉 index.css 和 StrictMode"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:Z,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"然后把开发服务跑起来："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm install\nnpm run dev\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:Y,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"访问下试试："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:X,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"然后我们先用下 antd 的 Upload 组件："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm i --save antd\n"})}),"\n",(0,i.jsx)(e.p,{children:"改下 App.tsx"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import React from 'react';\nimport { UploadOutlined } from '@ant-design/icons';\nimport type { UploadProps } from 'antd';\nimport { Button, message, Upload } from 'antd';\n\nconst props: UploadProps = {\n  name: 'file',\n  action: 'https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188',\n  headers: {},\n  onChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n};\n\nconst App: React.FC = () => (\n  <Upload {...props}>\n    <Button icon={<UploadOutlined />}>Click to Upload</Button>\n  </Upload>\n);\n\nexport default App;\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:V,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"现在接口是 mock 的，这样不过瘾，我们用 express 起个服务来接收下文件。"}),"\n",(0,i.jsx)(e.p,{children:"根目录下新建 server.js"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import express from 'express';\nimport multer from 'multer';\nimport cors from 'cors';\n\nconst app = express()\napp.use(cors());\n\nconst upload = multer({ \n    dest: 'uploads/'\n})\n\napp.post('/upload', upload.single('file'), function (req, res, next) {\n  console.log('req.file', req.file);\n  console.log('req.body', req.body);\n\n  res.end(JSON.stringify({\n    message: 'success'\n  }));\n})\n\napp.listen(3333);\n"})}),"\n",(0,i.jsx)(e.p,{children:"用 express 跑服务，然后用 cors 处理跨域请求，用 multer 来接收文件。"}),"\n",(0,i.jsx)(e.p,{children:"指定 dest 为 uploads 目录。"}),"\n",(0,i.jsx)(e.p,{children:"安装依赖，然后用 node 跑一下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm i --save express cors multer\n\nnode ./server.js\n"})}),"\n",(0,i.jsx)(e.p,{children:"这里 node 能直接跑 es module 的代码是因为 package.json 里指定了 type 为 module："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:K,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"也就是说默认所有 js 都是 es module 的。"}),"\n",(0,i.jsx)(e.p,{children:"然后改下上传路径："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:Q,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"试一下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:G,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"上传成功，服务端也接收到了文件："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:J,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"只不过现在的文件名没有带后缀名，我们可以自定义一下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import express from 'express';\nimport multer from 'multer';\nimport cors from 'cors';\nimport path from 'path';\nimport fs from 'fs';\n\nconst app = express()\napp.use(cors());\n\nconst storage = multer.diskStorage({\n    destination: function (req, file, cb) {\n        try {\n            fs.mkdirSync(path.join(process.cwd(), 'uploads'));\n        }catch(e) {}\n        cb(null, path.join(process.cwd(), 'uploads'))\n    },\n    filename: function (req, file, cb) {\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9) + '-' + file.originalname\n        cb(null, uniqueSuffix)\n    }\n});\nconst upload = multer({ \n    dest: 'uploads/',\n    storage\n})\n\napp.post('/upload', upload.single('file'), function (req, res, next) {\n  console.log('req.file', req.file);\n  console.log('req.body', req.body);\n\n  res.end(JSON.stringify({\n    message: 'success'\n  }));\n})\n\napp.listen(3333);\n"})}),"\n",(0,i.jsx)(e.p,{children:"自定义 storage，指定文件存储的目录以及文件名。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:$,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"重新跑下服务，然后再次上传："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:G,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"现在，文件保存的路径就改了"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:W,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"上传的图片也能正常打开："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:H,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"接口搞定之后，我们自己来实现下这个 Upload 组件。"}),"\n",(0,i.jsx)(e.p,{children:"新建 Upload/index.tsx"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { FC, useRef, ChangeEvent, PropsWithChildren } from 'react'\nimport axios from 'axios'\n\nimport './index.scss';\n\nexport interface UploadProps extends PropsWithChildren{\n  action: string;\n  headers?: Record<string, any>;\n  name?: string;\n  data?: Record<string, any>;\n  withCredentials?: boolean;\n  accept?: string;\n  multiple?: boolean;\n}\n\nexport const Upload: FC<UploadProps> = (props) => {\n  const {\n    action,\n    name,\n    headers,\n    data,\n    withCredentials,\n    accept,\n    multiple,\n    children,\n  } = props\n\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const handleClick = () => {\n    if (fileInput.current) {\n        fileInput.current.click()\n    }\n  }\n\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    if(!files) {\n        return\n    }\n    uploadFiles(files)\n    if (fileInput.current) {\n        fileInput.current.value = ''\n    }\n  }\n\n  const uploadFiles = (files: FileList) => {\n    let postFiles = Array.from(files)\n    postFiles.forEach(file => {\n        post(file)\n    })\n  }\n\n  const post = (file: File) => {\n    const formData = new FormData()\n\n    formData.append(name || 'file', file);\n    if (data) {\n        Object.keys(data).forEach(key => {\n            formData.append(key, data[key])\n        })\n    } \n\n    axios.post(action, formData, {\n        headers: {\n            ...headers,\n            'Content-Type': 'multipart/form-data'\n        },\n        withCredentials\n    })\n  }\n\n  return (\n    <div className=\"upload-component\">\n        <div \n            className=\"upload-input\"\n            onClick={handleClick}\n        >\n            {children}\n            <input\n                className=\"upload-file-input\"\n                type=\"file\"\n                ref={fileInput}\n                onChange={handleFileChange}\n                accept={accept}\n                multiple={multiple}\n            />\n        </div>\n    </div>\n  )\n}\n\nexport default Upload;\n"})}),"\n",(0,i.jsx)(e.p,{children:"还有 Upload/index.scss"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:".upload-input {\n    display: inline-block;\n}\n.upload-file-input {\n    display: none;\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"这些参数都很容易理解："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:z,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"action 是上传的 url"}),"\n",(0,i.jsx)(e.p,{children:"headers 是携带的请求头"}),"\n",(0,i.jsx)(e.p,{children:"data 是携带的数据"}),"\n",(0,i.jsx)(e.p,{children:"name 是文件的表单字段名"}),"\n",(0,i.jsx)(e.p,{children:"accept 是 input 接受的文件格式"}),"\n",(0,i.jsx)(e.p,{children:"multiple 是 input 可以多选"}),"\n",(0,i.jsx)(e.p,{children:"然后渲染 children 外加一个隐藏的 file input"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:q,alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"onChange 的时候，拿到所有 files 依次上传，之后把 file input 置空："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:M,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"用 axios 来发送 post 请求，携带 FormData 数据，包含 file 和其它 data 字段："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"再就是点击其它区域也触发 file input 的点击："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"安装用到的 axios 包："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm install --save axios\n"})}),"\n",(0,i.jsx)(e.p,{children:"改下 App.tsx"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import React from 'react';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport Upload, { UploadProps } from './Upload'\n\nconst props: UploadProps = {\n  name: 'file',\n  action: 'http://localhost:3333/upload'\n};\n\nconst App: React.FC = () => (\n  <Upload {...props}>\n    <Button icon={<UploadOutlined />}>Click to Upload</Button>\n  </Upload>\n);\n\nexport default App;\n"})}),"\n",(0,i.jsx)(e.p,{children:"这里内层的 Button、Icon 还是用 antd 的，只是把 Upload 组件换成我们自己实现的。"}),"\n",(0,i.jsx)(e.p,{children:"然后测试下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:I,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"虽然界面还没加啥反馈，但请求已经发送成功了："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:O,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"服务端也接受到了这个文件："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"上传功能没问题，然后我们添加几个上传过程中的回调函数："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:N,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"beforeUpload 是上传之前的回调，如果返回 false 就不上传，也可以返回 promise，比如在服务端校验的时候，等 resolve 之后才会上传"}),"\n",(0,i.jsxs)(e.p,{children:["antd 的 ",(0,i.jsx)(e.a,{href:"https://ant-design.antgroup.com/components/upload-cn#components-upload-demo-avatar",target:"_blank",rel:"noopener noreferrer",children:"Upload 组件"}),"就是这样的："]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:D,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"onProgress 是进度更新时的回调，可以拿到进度。"}),"\n",(0,i.jsx)(e.p,{children:"onSuccess 和 onError 是上传成功、失败时的回调。"}),"\n",(0,i.jsx)(e.p,{children:"onChange 是上传状态改变时的回调。"}),"\n",(0,i.jsx)(e.p,{children:"这几个回调分别在上传前、进度更新、成功、失败时调用："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:P,alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:L,alt:""})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { FC, useRef, ChangeEvent, PropsWithChildren } from 'react'\nimport axios from 'axios'\n\nimport './index.scss';\n\nexport interface UploadProps extends PropsWithChildren{\n  action: string;\n  headers?: Record<string, any>;\n  name?: string;\n  data?: Record<string, any>;\n  withCredentials?: boolean;\n  accept?: string;\n  multiple?: boolean;\n  beforeUpload? : (file: File) => boolean | Promise<File>;\n  onProgress?: (percentage: number, file: File) => void;\n  onSuccess?: (data: any, file: File) => void;\n  onError?: (err: any, file: File) => void;\n  onChange?: (file: File) => void;\n}\n\nexport const Upload: FC<UploadProps> = (props) => {\n  const {\n    action,\n    name,\n    headers,\n    data,\n    withCredentials,\n    accept,\n    multiple,\n    children,\n    beforeUpload,\n    onProgress,\n    onSuccess,\n    onError,\n    onChange,\n  } = props\n\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const handleClick = () => {\n    if (fileInput.current) {\n        fileInput.current.click()\n    }\n  }\n\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    if(!files) {\n        return\n    }\n    uploadFiles(files)\n    if (fileInput.current) {\n        fileInput.current.value = ''\n    }\n  }\n\n  const uploadFiles = (files: FileList) => {\n    let postFiles = Array.from(files)\n    postFiles.forEach(file => {\n        if (!beforeUpload) {\n            post(file)\n        } else {\n            const result = beforeUpload(file)\n            if (result && result instanceof Promise) {\n                result.then(processedFile => {\n                    post(processedFile)\n                })\n            } else if (result !== false) {\n                post(file)\n            }\n        }\n    })\n  }\n\n  const post = (file: File) => {\n    const formData = new FormData()\n\n    formData.append(name || 'file', file);\n    if (data) {\n        Object.keys(data).forEach(key => {\n            formData.append(key, data[key])\n        })\n    } \n\n    axios.post(action, formData, {\n        headers: {\n            ...headers,\n            'Content-Type': 'multipart/form-data'\n        },\n        withCredentials,\n        onUploadProgress: (e) => {\n            let percentage = Math.round((e.loaded * 100) / e.total!) || 0;\n            if (percentage < 100) {\n                if (onProgress) {\n                    onProgress(percentage, file)\n                }\n            }\n        }\n    }).then(resp => {\n        onSuccess?.(resp.data, file)\n        onChange?.(file)\n    }).catch(err => {\n        onError?.(err, file)\n        onChange?.(file)\n    })\n  }\n\n  return (\n    <div className=\"upload-component\">\n        <div \n            className=\"upload-input\"\n            onClick={handleClick}\n        >\n            {children}\n            <input\n                className=\"upload-file-input\"\n                type=\"file\"\n                ref={fileInput}\n                onChange={handleFileChange}\n                accept={accept}\n                multiple={multiple}\n            />\n        </div>\n    </div>\n  )\n}\n\nexport default Upload;\n"})}),"\n",(0,i.jsx)(e.p,{children:"在 App.tsx 里传入对应参数："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import React from 'react';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport Upload, { UploadProps } from './Upload'\n\nconst props: UploadProps = {\n  name: 'file',\n  action: 'http://localhost:3333/upload',\n  beforeUpload(file) {\n    if(file.name.includes('1.image')) {\n      return false;\n    }\n    return true;\n  },\n  onSuccess(ret) {\n    console.log('onSuccess', ret);\n  },\n  onError(err) {\n    console.log('onError', err);\n  },\n  onProgress(percentage, file) {\n    console.log('onProgress', percentage);\n  },\n  onChange(file) {\n    console.log('onChange', file);\n  }\n};\n\nconst App: React.FC = () => (\n  <Upload {...props}>\n    <Button icon={<UploadOutlined />}>Click to Upload</Button>\n  </Upload>\n);\n\nexport default App;\n"})}),"\n",(0,i.jsx)(e.p,{children:"包含 1.image 的文件返回 false，其余的返回 true"}),"\n",(0,i.jsx)(e.p,{children:"跑一下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"网速快的时候没有上传进度，改下网络设置："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"几个回调函数都没问题。"}),"\n",(0,i.jsx)(e.p,{children:"接下来我们添加下面的文件列表："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"新建 Upload/UploadList.tsx"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { FC } from 'react'\nimport { Progress } from 'antd';\nimport { CheckOutlined, CloseOutlined, DeleteOutlined, FileOutlined, LoadingOutlined } from '@ant-design/icons';\n\nexport interface UploadFile {\n  uid: string;\n  size: number;\n  name: string;\n  status?: 'ready' | 'uploading' | 'success' | 'error';\n  percent?: number;\n  raw?: File;\n  response?: any;\n  error?: any;\n}\n\ninterface UploadListProps {\n  fileList: UploadFile[];\n  onRemove: (file: UploadFile) => void;\n}\n\nexport const UploadList: FC<UploadListProps> = (props) => {\n  const {\n    fileList,\n    onRemove,\n  } = props;\n\n  return (\n    <ul className=\"upload-list\">\n      {\n        fileList.map(item => {\n            return (\n                <li className={`upload-list-item upload-list-item-${item.status}`} key={item.uid}>\n                    <span className='file-name'>\n                        {\n                            (item.status === 'uploading' || item.status === 'ready') && \n                                <LoadingOutlined />\n                        }\n                        {\n                            item.status === 'success' && \n                                <CheckOutlined />\n                        }\n                        {\n                            item.status === 'error' && \n                                <CloseOutlined />\n                        }\n                        {item.name}\n                    </span>\n                    <span className=\"file-actions\">\n                        <DeleteOutlined onClick={() => { onRemove(item)}}/>\n                    </span>\n                        {\n                            item.status === 'uploading' && \n                                <Progress percent={item.percent || 0}/>\n                        }\n                </li>\n            )\n        })\n      }\n    </ul>\n  )\n}\n\nexport default UploadList;\n"})}),"\n",(0,i.jsx)(e.p,{children:"这个组件传入 UploadFile 的数组和 onRemove 回调作为参数："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"UploadFile 里除了文件信息外，还有 status、response、error"}),"\n",(0,i.jsx)(e.p,{children:"上传状态 status 有 ready、uploading、success、error 四种。"}),"\n",(0,i.jsx)(e.p,{children:"然后把 UploadFile 数组渲染出来："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:U,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"显示文件名、进度、删除按钮等。"}),"\n",(0,i.jsx)(e.p,{children:"点击删除的时候调用 onRemove 回调。"}),"\n",(0,i.jsx)(e.p,{children:"然后在 index.scss 里添加对应的样式："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:".upload-input {\n    display: inline-block;\n}\n.upload-file-input {\n    display: none;\n}\n\n.upload-list {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n}\n.upload-list-item {\n    margin-top: 5px;\n\n    font-size: 14px;\n    line-height: 2em;\n    font-weight: bold;\n\n    box-sizing: border-box;\n    min-width: 200px;\n\n    position: relative;\n\n    &-success {\n        color: blue;\n    }\n    \n    &-error {\n        color: red;\n    }\n\n    .file-name {\n        .anticon {\n            margin-right: 10px;\n        }\n    }\n\n    .file-actions {\n        display: none;\n\n        position: absolute;\n        right: 7px;\n        top: 0;\n\n        cursor: pointer;\n    }\n\n    &:hover {\n        .file-actions {\n            display: block;\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"在 Upload/index.tsx 里引入试试："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"用 mock 的数据渲染 UploadList"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const fileList: UploadFile[] = [\n    {\n        uid: '11',\n        size: 111,\n        name: 'xxxx',\n        status: 'uploading',\n        percent: 50\n    },\n    {\n        uid: '22',\n        size: 111,\n        name: 'yyy',\n        status: 'success',\n        percent: 50\n    },\n    {\n        uid: '33',\n        size: 111,\n        name: 'zzz',\n        status: 'error',\n        percent: 50\n    },\n];\n\nreturn (\n    <div className=\"upload-component\">\n        <div \n            className=\"upload-input\"\n            onClick={handleClick}\n        >\n            {children}\n            <input\n                className=\"upload-file-input\"\n                type=\"file\"\n                ref={fileInput}\n                onChange={handleFileChange}\n                accept={accept}\n                multiple={multiple}\n            />\n        </div>\n\n        <UploadList\n            fileList={fileList}\n            onRemove={() => {}}\n        />\n    </div>\n)\n"})}),"\n",(0,i.jsx)(e.p,{children:"浏览器看一下:"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:F,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,i.jsx)(e.p,{children:"然后把数据变成动态的："}),"\n",(0,i.jsx)(e.p,{children:"声明一个 fileList 的 state，并封装一个更新它的方法："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"在状态改变的时候调用更新方法来更新 fileList："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"并且添加一个 onRemove 的回调："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"在点击删除按钮的时候调用："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { FC, useRef, ChangeEvent, PropsWithChildren, useState } from 'react'\nimport axios from 'axios'\n\nimport './index.scss';\nimport UploadList, { UploadFile } from './UploadList';\n\nexport interface UploadProps extends PropsWithChildren{\n  action: string;\n  headers?: Record<string, any>;\n  name?: string;\n  data?: Record<string, any>;\n  withCredentials?: boolean;\n  accept?: string;\n  multiple?: boolean;\n  beforeUpload? : (file: File) => boolean | Promise<File>;\n  onProgress?: (percentage: number, file: File) => void;\n  onSuccess?: (data: any, file: File) => void;\n  onError?: (err: any, file: File) => void;\n  onChange?: (file: File) => void;\n  onRemove?: (file: UploadFile) => void;\n}\n\nexport const Upload: FC<UploadProps> = (props) => {\n  const {\n    action,\n    name,\n    headers,\n    data,\n    withCredentials,\n    accept,\n    multiple,\n    children,\n    beforeUpload,\n    onProgress,\n    onSuccess,\n    onError,\n    onChange,\n    onRemove\n  } = props\n\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const [ fileList, setFileList ] = useState<Array<UploadFile>>([]);\n\n  const updateFileList = (updateFile: UploadFile, updateObj: Partial<UploadFile>) => {\n    setFileList(prevList => {\n      return prevList.map(file => {\n        if (file.uid === updateFile.uid) {\n          return { ...file, ...updateObj }\n        } else {\n          return file\n        }\n      })\n    })\n  }\n\n  const handleRemove = (file: UploadFile) => {\n    setFileList((prevList) => {\n      return prevList.filter(item => item.uid !== file.uid)\n    })\n    if (onRemove) {\n      onRemove(file)\n    }\n  }\n\n  const handleClick = () => {\n    if (fileInput.current) {\n        fileInput.current.click()\n    }\n  }\n\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    if(!files) {\n        return\n    }\n    uploadFiles(files)\n    if (fileInput.current) {\n        fileInput.current.value = ''\n    }\n  }\n\n  const uploadFiles = (files: FileList) => {\n    let postFiles = Array.from(files)\n    postFiles.forEach(file => {\n        if (!beforeUpload) {\n            post(file)\n        } else {\n            const result = beforeUpload(file)\n            if (result && result instanceof Promise) {\n                result.then(processedFile => {\n                    post(processedFile)\n                })\n            } else if (result !== false) {\n                post(file)\n            }\n        }\n    })\n  }\n\n  const post = (file: File) => {\n    let uploadFile: UploadFile = {\n        uid: Date.now() + 'upload-file',\n        status: 'ready',\n        name: file.name,\n        size: file.size,\n        percent: 0,\n        raw: file\n    }\n    setFileList(prevList => {\n        return [uploadFile, ...prevList]\n    })\n\n    const formData = new FormData()\n\n    formData.append(name || 'file', file);\n    if (data) {\n        Object.keys(data).forEach(key => {\n            formData.append(key, data[key])\n        })\n    } \n\n    axios.post(action, formData, {\n        headers: {\n            ...headers,\n            'Content-Type': 'multipart/form-data'\n        },\n        withCredentials,\n        onUploadProgress: (e) => {\n            let percentage = Math.round((e.loaded * 100) / e.total!) || 0;\n            if (percentage < 100) {\n                updateFileList(uploadFile, { percent: percentage, status: 'uploading'});\n\n                if (onProgress) {\n                    onProgress(percentage, file)\n                }\n            }\n        }\n    }).then(resp => {\n        updateFileList(uploadFile, {status: 'success', response: resp.data})\n\n        onSuccess?.(resp.data, file)\n        onChange?.(file)\n    }).catch(err => {\n        updateFileList(uploadFile, { status: 'error', error: err})\n\n        onError?.(err, file)\n        onChange?.(file)\n    })\n  }\n\n  return (\n    <div className=\"upload-component\">\n        <div \n            className=\"upload-input\"\n            onClick={handleClick}\n        >\n            {children}\n            <input\n                className=\"upload-file-input\"\n                type=\"file\"\n                ref={fileInput}\n                onChange={handleFileChange}\n                accept={accept}\n                multiple={multiple}\n            />\n        </div>\n\n        <UploadList\n            fileList={fileList}\n            onRemove={handleRemove}\n        />\n    </div>\n  )\n}\n\nexport default Upload;\n"})}),"\n",(0,i.jsx)(e.p,{children:"大功告成，我们测试下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"文件上传状态没问题，服务端也收到了上传的文件。"}),"\n",(0,i.jsx)(e.p,{children:"至此，我们的 Upload 组件就完成了。"}),"\n",(0,i.jsx)(e.p,{children:"然后我们再加上拖拽上传的功能："}),"\n",(0,i.jsx)(e.p,{children:"创建 Upload/Dragger.tsx"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { FC, useState, DragEvent, PropsWithChildren } from 'react'\nimport classNames from 'classnames'\n\ninterface DraggerProps extends PropsWithChildren{\n  onFile: (files: FileList) => void;\n}\n\nexport const Dragger: FC<DraggerProps> = (props) => {\n\n  const { onFile, children } = props\n\n  const [ dragOver, setDragOver ] = useState(false)\n\n  const cs = classNames('upload-dragger', {\n    'is-dragover': dragOver\n  })\n\n  const handleDrop = (e: DragEvent<HTMLElement>) => {\n    e.preventDefault()\n    setDragOver(false)\n    onFile(e.dataTransfer.files)\n  }\n  \n  const handleDrag = (e: DragEvent<HTMLElement>, over: boolean) => {\n    e.preventDefault()\n    setDragOver(over)\n  }\n\n  return (\n    <div \n      className={cs}\n      onDragOver={e => { handleDrag(e, true)}}\n      onDragLeave={e => { handleDrag(e, false)}}\n      onDrop={handleDrop}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default Dragger;\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"因为拖拽文件到这里的时候，会有对应的样式，所以我们要在 dragover 和 dragleave 的时候分别设置不同的 dragOver 状态值，然后更改 className"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"然后在 drop 的时候，把文件传给 onFile 回调函数："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"在 index.scss 里加上它的样式："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:".upload-dragger {\n    background: #eee;\n    border: 1px dashed #aaa;\n    border-radius: 4px;\n    cursor: pointer;\n    padding: 20px;\n    width: 200px;\n    height: 100px;\n    text-align: center;\n\n    &.is-dragover {\n      border: 2px dashed blue;\n      background: rgba(blue, .3);\n    }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"然后在 Upload/index.tsx 引入 Dragger 组件："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"{\n    drag ? <Dragger onFile={(files) => {uploadFiles(files)}}>\n            {children}\n        </Dragger>\n        : children\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"当传入 drag 参数的时候，渲染 dragger 组件，onFile 回调里调用 uploadFiles 方法来上传。"}),"\n",(0,i.jsx)(e.p,{children:"在 index.tsx 里试试："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"浏览器访问下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,i.jsx)(e.p,{children:"可以改下 Upload 组件的 children："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const App: React.FC = () => (\n  <Upload {...props} drag>\n    <p>\n      <InboxOutlined style={{fontSize: '50px'}}/>\n    </p>\n    <p>点击或者拖拽文件到此处</p>\n  </Upload>\n);\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"这样，拖拽上传就完成了。"}),"\n",(0,i.jsxs)(e.p,{children:["案例代码上传了",(0,i.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/upload-component",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,i.jsxs)(e.h2,{id:"总结",children:["总结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"今天我们实现了 Upload 组件。"}),"\n",(0,i.jsx)(e.p,{children:"首先用 express + multer 跑的服务端，创建 /upload 接口来接收文件。"}),"\n",(0,i.jsx)(e.p,{children:"然后在 Upload 组件里调用 axios，上传包含 file 的 FormData。"}),"\n",(0,i.jsx)(e.p,{children:"之后加上了 beforeUpload、onProgress、onSuccess、onChange 等回调函数。"}),"\n",(0,i.jsx)(e.p,{children:"最后又加上了 UploadList 来可视化展示上传文件的状态。"}),"\n",(0,i.jsx)(e.p,{children:"然后实现了 Dragger 组件，可以拖拽文件来上传。"}),"\n",(0,i.jsx)(e.p,{children:"这样，我们就实现了 Upload 组件。"})]})}function ns(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(ni,{...n})}):ni(n)}let nl=ns;ns.__RSPRESS_PAGE_META={},ns.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC37%E7%AB%A0%E2%80%94%E7%BB%84%E4%BB%B6%E5%AE%9E%E6%88%98%EF%BC%9AUpload%E6%8B%96%E6%8B%BD%E4%B8%8A%E4%BC%A0.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第37章—组件实战：Upload拖拽上传",headingTitle:"第37章—组件实战：Upload拖拽上传",frontmatter:{}}}}]);