"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["51952"],{291819:function(e,n,s){s.r(n),s.d(n,{default:()=>u});var t=s(552676),r=s(740453);let i=s.p+"static/image/1325322dbb3d2025aac098203e75d528.8a1e4ea6.webp",c=s.p+"static/image/620e13bfa150d8a14a61ba5cd93a6cee.7d8dbb5d.webp",d=s.p+"static/image/7c7260f8cd653ea63351e14aa89cbc33.c328fa8a.webp",l=s.p+"static/image/b481517f8cfe69e23a956e093d6162e5.c1054c49.webp",a=s.p+"static/image/d650c216ad0a78e98882edcc68a4cdd9.01e8543c.webp",o=s.p+"static/image/6f51a7f559fd60a1188870949f615102.f9c652e1.webp",p=s.p+"static/image/c929d5d474dccdec3db123dd24d804a7.6ef6e110.webp",h=s.p+"static/image/6a58a89a9f82251925dce3be90a9e23a.85dc7ea9.webp",x=s.p+"static/image/e4034a67885052c7bad9618cd36195de.bac79b8e.webp";function j(e){let n=Object.assign({blockquote:"blockquote",p:"p",a:"a",h1:"h1",pre:"pre",code:"code",img:"img"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["仓库：",(0,t.jsx)(n.a,{href:"https://github.com/czm1290433700/nextjs-demo",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/czm1290433700/nextjs-demo"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"之前的几节课，我们学习了 SSR 的原理并且从零实现了服务器端渲染同构和注水等过程，相信大家对 SSR 的原理已经有了较为深刻的理解。从这节课开始，我们将开始新的学习，通过实战来讲解一个基本的官网是怎么实现的，同样仓库也贴在每一章节的开头处，大家可以 clone 下来学习理解。"}),"\n",(0,t.jsx)(n.p,{children:"实战篇我们将使用 Nextjs 来进行开发，nextjs 是业内相对成熟的 SSR 服务器端渲染框架，有完善的数据同步能力，除服务器端外，还提供了静态渲染和较多开箱即用的优化能力，对减少项目的开发成本和大家的学习理解成本都有不小的优势。"}),"\n",(0,t.jsx)(n.p,{children:"在项目开发中，规范的 lint、 IDE提示及调试能力一直是影响开发者开发项目效率和质量的关键因素。针对服务器端渲染，因为涉及客户端和 Api 层这几点就显得更为重要，规范的 lint、 IDE 提示可以帮助我们更有效地开发和规避问题，至于调试能力，因为服务器端的存在，我们不能像客户端渲染一样，直接在浏览器中断点调试，也需要增加额外的配置来支持。"}),"\n",(0,t.jsx)(n.p,{children:"那么针对Nextjs服务器端渲染，我们应该如何搭建呢？"}),"\n",(0,t.jsx)(n.p,{children:"之前在《架构实现（一）：代码 lint & 项目构建》这节，我们已经有介绍项目中 lint 和构建的方式，因为这次不再是个原理的 demo，将包含样式、Api 层和框架，整体配置会有相关差异，所以会在上次的基础补充额外的内容。大体方向上，我们将从项目初始化，代码lint & commit lint，模块化代码提示和服务器端调试能力四个方向上来展开探讨。"}),"\n",(0,t.jsxs)(n.h1,{id:"6实战入门如何搭建一个-nextjs-服务器端渲染项目",children:["6.实战入门：如何搭建一个 Nextjs 服务器端渲染项目？",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6实战入门如何搭建一个-nextjs-服务器端渲染项目",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"首先我们先对 nextjs 的项目进行初始化，nextjs 提供了脚手架来帮助我们初始化项目，我们可以执行下面的命令来初始化项目："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npx create-next-app@latest --typescript\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"其中 next-env.d.ts 是 nextjs 的类型文件，可以保证 ts 选择 nextjs 相关的类型，通常我们不需要对它进行修改，可以在提交后加到 .gitignore 中。next.config.js 是 nextjs 的构建配置，底层也是基于 Webpack 去打包的，我们可以在默认的配置上加上下面的配置来提供别名的能力。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'// next.config.js\nconst path = require("path");\n\nmodule.exports = {\n  reactStrictMode: true,\n  swcMinify: true,\n  webpack: (config) => {\n    config.resolve.alias = {\n      ...config.resolve.alias,\n      "@": path.resolve(__dirname),\n    };\n    return config;\n  },\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"tsconfig.json 中我们也需要加一下对应的别名解析识别（baseurl , paths）。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'// tsconfig.json\n{\n  "compilerOptions": {\n    "target": "es5",\n    "lib": ["dom", "dom.iterable", "esnext"],\n    "allowJs": true,\n    "skipLibCheck": true,\n    "strict": true,\n    "forceConsistentCasingInFileNames": true,\n    "noEmit": true,\n    "esModuleInterop": true,\n    "module": "esnext",\n    "moduleResolution": "node",\n    "resolveJsonModule": true,\n    "isolatedModules": true,\n    "jsx": "preserve",\n    "incremental": true,\n    "baseUrl": "./",\n    "paths": {\n      "@/*": ["./*"]\n    },\n  },\n  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],\n  "exclude": ["node_modules"]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["到这里项目其实就已经初步初始化完成了，我们执行",(0,t.jsx)(n.code,{children:"npm run dev"}),"打开",(0,t.jsx)(n.a,{href:"http://localhost:3000%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E4%B8%AA",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000就可以看到一个"})," nextjs 的默认服务器端渲染页面，大家可以按照前几节课介绍的打开 network 看一下服务器端的请求是不是包含了相关的 dom 了 。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h1,{id:"代码-lint--commit-lint",children:["代码 Lint & commit lint",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-lint--commit-lint",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"nextjs 已经内置了开箱的 eslint 能力，我们不需要自己进行相关的配置，可以执行下面的脚本来自动生成对应的 lint，可以覆盖大部分场景。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm run lint\n"})}),"\n",(0,t.jsx)(n.p,{children:"commitlint 的部分我们可以参照《架构实现（一）：代码 lint & 项目构建》中 commitlint 的配置，不过需要把对应钩子下 lint 的脚本改成对应的 nextjs lint。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'// .husky/pre-commit\n#!/usr/bin/env sh\n. "$(dirname -- "$0")/_/husky.sh"\n\nnpx commitlint --edit $1 \nnpm run lint\n'})}),"\n",(0,t.jsxs)(n.h1,{id:"模块化代码提示",children:["模块化代码提示",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#模块化代码提示",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"我们写页面肯定会涉及样式，所以样式的配置也是很重要的。这里推荐使用 sass 等超类来替代 css，相比 css， sass 等超类提供了变量定义和函数的能力，可以避免一些重复的 css 代码，使得样式的可维护性和复用性更高。sass 有支持两种语法， sass 和 scss，作为 css 超集，scss 有更平滑的学习成本，对于初学者更为友好，所以后续的学习会以 scss 来书写样式。"}),"\n",(0,t.jsx)(n.p,{children:"Nextjs 已经提供了对 css 和 sass 的支持，所以我们不需要配置相关 webpack loader，只需要安装一下 sass 的依赖即可。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install sass --save-dev\n"})}),"\n",(0,t.jsx)(n.p,{children:"通常针对一个大型项目，我们定义多级嵌套的组件来提高页面的复用性，组件之间的样式命名是很容易重复的，所以针对非组件库的业务代码，我们通常会使用 css 模块化来进行相关的样式定义。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["模块化会在编译的时候将样式的类名加上对应唯一的哈希值来进行区分，从而解决样式类名重复的问题，nextjs 已经内置了这部分能力，我们只需要将类名定义为",(0,t.jsx)(n.code,{children:"[name].module.(css|scss)"}),"即可，不过模块化的样式调用不能直接用字符串，需要用引用的方式，比如下面的例子："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"import { FC } from 'react';\nimport styles from \"./index.module.scss\";\n\ninterface IProps {}\n\nexport const Demo: FC<IProps> = ({}) => {\n  return (\n    <div className={styles.demo}>\n      <h1 className={styles.title}>demo</h1>\n    </div>\n  )\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["不过 nextjs 并没有支持对模块化代码的识别，我们在页面中执行输入",(0,t.jsx)(n.code,{children:"styles."}),"并不会有相关的代码提示，这其实是很不方便的，因为我们并不能记住所有的类名，可以自己加上相关的配置。"]}),"\n",(0,t.jsx)(n.p,{children:"要实现这个能力，我们需要用到 typescript-plugin-css-modules，这个依赖可以给 IDE 提供模块化相关的类型，配合 typescript 使用就能实现 css 的类型提示，我们首先安装一下依赖。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install typescript-plugin-css-modules --save-dev\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后我们需要在 tsconfig.json 中加上对应的组件（plugins），使得 ts-server 解析的过程中，可以进行样式的识别。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'// tsconfig.json\n{\n  "compilerOptions": {\n    "target": "es5",\n    "lib": ["dom", "dom.iterable", "esnext"],\n    "allowJs": true,\n    "skipLibCheck": true,\n    "strict": true,\n    "forceConsistentCasingInFileNames": true,\n    "noEmit": true,\n    "esModuleInterop": true,\n    "module": "esnext",\n    "moduleResolution": "node",\n    "resolveJsonModule": true,\n    "isolatedModules": true,\n    "jsx": "preserve",\n    "incremental": true,\n    "baseUrl": "./",\n    "paths": {\n      "@/*": ["./*"]\n    },\n    "plugins": [{ "name": "typescript-plugin-css-modules" }]\n  },\n  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],\n  "exclude": ["node_modules"]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["然后我们打开 vscode 的 setting.json 文件，可以通过",(0,t.jsx)(n.code,{children:"  ctrl + shift + p "}),"（mac 的同学 ctrl 换成 cmd）打开。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"加上下面的配置，typescript.tsserver.pluginPaths 是为了引入 ts-server 需要用中间件组件，而 typescript.tsdk 和 typescript.enablePromptUseWorkspaceTsdk 是为了指出 ts 的位置，保证工作空间可以正常使用 ts 的相关 sdk 能力。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n     // ...前面的保持原状就可以\n    "typescript.tsserver.pluginPaths": ["typescript-plugin-css-modules"],\n    "typescript.tsdk": "node_modules/typescript/lib",\n    "typescript.enablePromptUseWorkspaceTsdk": true\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"完成后我们 reload window 即可，同样可以通过上面的快捷键打开。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["然后我们可以拿脚手架生成的代码试验一下，把 home 的模块化引用换成 scss，然后去掉一个类名，重新按",(0,t.jsx)(n.code,{children:"."}),", 可以看到已经可以了："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h1,{id:"服务器端调试能力",children:["服务器端调试能力",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#服务器端调试能力",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在之前的架构实现篇，我们有学习服务器端渲染一个静态页面的过程，请求会在服务器端执行，并且将数据注入到页面中，意味着这部分逻辑并不在客户端执行，所以在服务器端执行的时候，我们是不能直接用 Chrome的 network 来调试的，那上面只能调试直接在客户端执行的脚本。"}),"\n",(0,t.jsxs)(n.p,{children:["nextjs 也有内置相关的调试能力来帮助我们进行调试，我们只需要为 dev 命令加一个",(0,t.jsx)(n.code,{children:"--inspect"}),"的node option 就行，我们首先来安装 cross-env 的依赖来支持跨平台的环境变量添加："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install cross-env --save-dev\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后在 package.json 中，我们加一条 debugger 的命令："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'// package.json\n{\n   // ...\n  "scripts": {\n    "dev": "next dev",\n    "debugger": "cross-env NODE_OPTIONS=\'--inspect\' next dev",\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["执行它并重新打开 ",(0,t.jsx)(n.a,{href:"http://localhost:3000%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E4%B8%AA%E7%BB%BF%E8%89%B2%E7%9A%84",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000，我们可以看到一个绿色的"})," nodejs 的小图标，点开会打开一个新的 network，这个就是服务器端 server 的 network，服务器端执行的相关代码断点可以在上面进行调试。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"我们在 home 处加一个 debugger 试验一下，已经可以进行调试了。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h1,{id:"小结",children:["小结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"这一节，我们学习了怎么搭建一个 Nextjs 服务器端渲染项目，并支持了相关的 lint，模块化提示及 nodejs 调试能力。现在项目已经具备了基本的项目开发能力，从下一节开始，我们将继续结合相关的 case 进行实战页面的开发，学习怎么在 Nextjs 项目中实现完整的页面链路？"})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(j,{...e})}):j(e)}let u=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["SSR%20%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AE%98%E7%BD%91%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F6.%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%EF%BC%9A%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%20Nextjs%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%B8%B2%E6%9F%93%E9%A1%B9%E7%9B%AE%EF%BC%9F.md"]={toc:[],title:"小结",headingTitle:"小结",frontmatter:{}}}}]);