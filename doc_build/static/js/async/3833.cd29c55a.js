"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["3833"],{418754:function(r,e,n){n.r(e),n.d(e,{default:()=>i});var s=n(552676),d=n(740453);function o(r){let e=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",code:"code",blockquote:"blockquote",p:"p",pre:"pre",strong:"strong",img:"img",ol:"ol"},(0,d.ah)(),r.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"9基础-6自定义业务错误信息",children:["9基础 6：自定义业务错误信息",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#9基础-6自定义业务错误信息",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"本节核心内容",children:["本节核心内容",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#本节核心内容",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"如何自定义业务自己的错误信息"}),"\n",(0,s.jsx)(e.li,{children:"实际开发中是如何处理错误的"}),"\n",(0,s.jsx)(e.li,{children:"实际开发中常见的错误类型"}),"\n",(0,s.jsxs)(e.li,{children:["通过引入新包 ",(0,s.jsx)(e.code,{children:"errno"})," 来实现此功能，会展示该包的如下用法：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"如何新建 Err 类型的错误"}),"\n",(0,s.jsx)(e.li,{children:"如何从 Err 类型的错误中获取 code 和 message"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["本小节源码下载路径：",(0,s.jsx)(e.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo05",target:"_blank",rel:"noopener noreferrer",children:"demo05"})]}),"\n",(0,s.jsx)(e.p,{children:"可先下载源码到本地，结合源码理解后续内容，边学边练。"}),"\n",(0,s.jsxs)(e.p,{children:["本小节的代码是基于 ",(0,s.jsx)(e.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo04",target:"_blank",rel:"noopener noreferrer",children:"demo04"})," 来开发的。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"为什么要定制业务自己的错误码",children:["为什么要定制业务自己的错误码",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么要定制业务自己的错误码",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在实际开发中引入错误码有如下好处："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"可以非常方便地定位问题和定位代码行（看到错误码知道什么意思，grep 错误码可以定位到错误码所在行）"}),"\n",(0,s.jsx)(e.li,{children:"如果 API 对外开放，有个错误码会更专业些"}),"\n",(0,s.jsx)(e.li,{children:"错误码包含一定的信息，通过错误码可以判断出错误级别、错误模块和具体错误信息"}),"\n",(0,s.jsxs)(e.li,{children:["在实际业务开发中，一个条错误信息需要包含两部分内容：直接展示给用户的 ",(0,s.jsx)(e.code,{children:"message"})," 和用于开发人员 debug 的 ",(0,s.jsx)(e.code,{children:"error"})," 。",(0,s.jsx)(e.code,{children:"message"})," 可能会直接展示给用户，",(0,s.jsx)(e.code,{children:"error"})," 是用于 debug 的错误信息，可能包含敏感/内部信息，不宜对外展示"]}),"\n",(0,s.jsx)(e.li,{children:"业务开发过程中，可能需要判断错误是哪种类型以便做相应的逻辑处理，通过定制的错误码很容易做到这点，例如："}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"    if err == errno.ErrBind {\r\n        ...\r\n    }   \n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Go 中的 HTTP 服务器开发都是引用 ",(0,s.jsx)(e.code,{children:"net/http"})," 包，该包中只有 60 个错误码，基本都是跟 HTTP 请求相关的。在大型系统中，这些错误码完全不够用，而且跟业务没有任何关联，满足不了业务需求。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"在-apiserver-中引入错误码",children:["在 apiserver 中引入错误码",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#在-apiserver-中引入错误码",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["我们通过一个新包 ",(0,s.jsx)(e.code,{children:"errno"})," 来做错误码的定制，详见 ",(0,s.jsx)(e.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo05/pkg/errno",target:"_blank",rel:"noopener noreferrer",children:"demo05/pkg/errno"}),"。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"$ ls pkg/errno/\r\ncode.go  errno.go\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"errno"})," 包由两个 Go 文件组成：",(0,s.jsx)(e.code,{children:"code.go"})," 和 ",(0,s.jsx)(e.code,{children:"errno.go"}),"。",(0,s.jsx)(e.code,{children:"code.go"})," 用来统一存自定义的错误码，",(0,s.jsx)(e.code,{children:"code.go"})," 的代码为："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package errno\r\n\r\nvar (\r\n	// Common errors\r\n	OK                  = &Errno{Code: 0, Message: "OK"}\r\n	InternalServerError = &Errno{Code: 10001, Message: "Internal server error"}\r\n	ErrBind             = &Errno{Code: 10002, Message: "Error occurred while binding the request body to the struct."}\r\n\r\n	// user errors\r\n	ErrUserNotFound      = &Errno{Code: 20102, Message: "The user was not found."}\r\n)\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"代码解析"})}),"\n",(0,s.jsxs)(e.p,{children:["在实际开发中，一个错误类型通常包含两部分：Code 部分，用来唯一标识一个错误；Message 部分，用来展示错误信息，这部分错误信息通常供前端直接展示。这两部分映射在 ",(0,s.jsx)(e.code,{children:"errno"})," 包中即为 ",(0,s.jsx)(e.code,{children:'&Errno{Code: 0, Message: "OK"}'}),"。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"错误码设计"})}),"\n",(0,s.jsxs)(e.p,{children:["目前错误码没有一个统一的设计标准，笔者研究了 BAT 和新浪开放平台对外公布的错误码设计，参考新浪开放平台 ",(0,s.jsx)(e.a,{href:"http://open.weibo.com/wiki/Error_code",target:"_blank",rel:"noopener noreferrer",children:"Error code"})," 的设计，如下是设计说明："]}),"\n",(0,s.jsx)(e.p,{children:"错误返回值格式："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "code": 10002,\r\n  "message": "Error occurred while binding the request body to the struct."\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"错误代码说明："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/6/1/163b938084a7e9e9?w=1098&h=131&f=png&s=9673",alt:""})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"服务级别错误：1 为系统级错误；2 为普通错误，通常是由用户非法操作引起的"}),"\n",(0,s.jsx)(e.li,{children:"服务模块为两位数：一个大型系统的服务模块通常不超过两位数，如果超过，说明这个系统该拆分了"}),"\n",(0,s.jsx)(e.li,{children:"错误码为两位数：防止一个模块定制过多的错误码，后期不好维护"}),"\n",(0,s.jsx)(e.li,{children:"code = 0 说明是正确返回，code > 0 说明是错误返回"}),"\n",(0,s.jsx)(e.li,{children:"错误通常包括系统级错误码和服务级错误码"}),"\n",(0,s.jsx)(e.li,{children:"建议代码中按服务模块将错误分类"}),"\n",(0,s.jsx)(e.li,{children:"错误码均为 >= 0 的数"}),"\n",(0,s.jsxs)(e.li,{children:["在 apiserver 中 HTTP Code 固定为 ",(0,s.jsx)(e.code,{children:"http.StatusOK"}),"，错误码通过 code 来表示。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"错误信息处理",children:["错误信息处理",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#错误信息处理",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["通过 ",(0,s.jsx)(e.code,{children:"errno.go"})," 来对自定义的错误进行处理，",(0,s.jsx)(e.code,{children:"errno.go"})," 的代码为："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package errno\r\n\r\nimport "fmt"\r\n\r\ntype Errno struct {\r\n	Code    int\r\n	Message string\r\n}\r\n\r\nfunc (err Errno) Error() string {\r\n	return err.Message\r\n}\r\n\r\n// Err represents an error\r\ntype Err struct {\r\n	Code    int\r\n	Message string\r\n	Err     error\r\n}\r\n\r\nfunc New(errno *Errno, err error) *Err {\r\n	return &Err{Code: errno.Code, Message: errno.Message, Err: err}\r\n}\r\n\r\nfunc (err *Err) Add(message string) error {\r\n	err.Message += " " + message\r\n	return err\r\n}\r\n\r\nfunc (err *Err) Addf(format string, args ...interface{}) error {\r\n	err.Message += " " + fmt.Sprintf(format, args...)\r\n	return err\r\n}\r\n\r\nfunc (err *Err) Error() string {\r\n	return fmt.Sprintf("Err - code: %d, message: %s, error: %s", err.Code, err.Message, err.Err)\r\n}\r\n\r\nfunc IsErrUserNotFound(err error) bool {\r\n	code, _ := DecodeErr(err)\r\n	return code == ErrUserNotFound.Code\r\n}\r\n\r\nfunc DecodeErr(err error) (int, string) {\r\n	if err == nil {\r\n		return OK.Code, OK.Message\r\n	}\r\n\r\n	switch typed := err.(type) {\r\n	case *Err:\r\n		return typed.Code, typed.Message\r\n	case *Errno:\r\n		return typed.Code, typed.Message\r\n	default:\r\n	}\r\n\r\n	return InternalServerError.Code, err.Error()\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"代码解析"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"errno.go"})," 源码文件中有两个核心函数 ",(0,s.jsx)(e.code,{children:"New()"})," 和 ",(0,s.jsx)(e.code,{children:"DecodeErr()"}),"，一个用来新建定制的错误，一个用来解析定制的错误，稍后会介绍如何使用。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"errno.go"})," 同时也提供了 ",(0,s.jsx)(e.code,{children:"Add()"})," 和 ",(0,s.jsx)(e.code,{children:"Addf()"})," 函数，如果想对外展示更多的信息可以调用此函数，使用方法下面有介绍。"]}),"\n",(0,s.jsxs)(e.h2,{id:"错误码实战",children:["错误码实战",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#错误码实战",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["上面介绍了错误码的一些知识，这一部分讲开发中是如何使用 ",(0,s.jsx)(e.code,{children:"errno"})," 包来处理错误信息的。为了演示，我们新增一个创建用户的 API："]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"router/router.go"})," 中添加路由，详见 ",(0,s.jsx)(e.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo05/router/router.go",target:"_blank",rel:"noopener noreferrer",children:"demo05/router/router.go"}),"："]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/6/1/163b9570311afe43?w=1049&h=674&f=png&s=44258",alt:""})}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"handler"})," 目录下增加业务处理函数 ",(0,s.jsx)(e.code,{children:"handler/user/create.go"}),"，详见 ",(0,s.jsx)(e.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo05/handler/user/create.go",target:"_blank",rel:"noopener noreferrer",children:"demo05/handler/user/create.go"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"编译并运行",children:["编译并运行",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编译并运行",children:"#"})]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"下载 apiserver_demos 源码包（如前面已经下载过，请忽略此步骤）"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"$ git clone https://github.com/lexkong/apiserver_demos\n"})}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsxs)(e.li,{children:["将 ",(0,s.jsx)(e.code,{children:"apiserver_demos/demo05"})," 复制为 ",(0,s.jsx)(e.code,{children:"$GOPATH/src/apiserver"})]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"$ cp -a apiserver_demos/demo05/ $GOPATH/src/apiserver\n"})}),"\n",(0,s.jsxs)(e.ol,{start:"3",children:["\n",(0,s.jsx)(e.li,{children:"在 apiserver 目录下编译源码"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"$ cd $GOPATH/src/apiserver\r\n$ gofmt -w .\r\n$ go tool vet .\r\n$ go build -v .\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"测试验证",children:["测试验证",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#测试验证",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["启动 apiserver：",(0,s.jsx)(e.code,{children:"./apiserver"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'$ curl -XPOST -H "Content-Type: application/json" http://127.0.0.1:8080/v1/user\r\n\r\n{\r\n  "code": 10002,\r\n  "message": "Error occurred while binding the request body to the struct."\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["因为没有传入任何参数，所以返回 ",(0,s.jsx)(e.code,{children:"errno.ErrBind"})," 错误。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'$ curl -XPOST -H "Content-Type: application/json" http://127.0.0.1:8080/v1/user -d\'{"username":"admin"}\'\r\n\r\n{\r\n  "code": 10001,\r\n  "message": "password is empty"\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["因为没有传入 ",(0,s.jsx)(e.code,{children:"password"}),"，所以返回 ",(0,s.jsx)(e.code,{children:'fmt.Errorf("password is empty")'})," 错误，该错误信息不是定制的错误类型，",(0,s.jsx)(e.code,{children:"errno.DecodeErr(err)"})," 解析时会解析为默认的 ",(0,s.jsx)(e.code,{children:"errno.InternalServerError"})," 错误，所以返回结果中 code 为 ",(0,s.jsx)(e.code,{children:"10001"}),"，message 为 ",(0,s.jsx)(e.code,{children:"err.Error()"}),"。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'$ curl -XPOST -H "Content-Type: application/json" http://127.0.0.1:8080/v1/user -d\'{"password":"admin"}\'\r\n\r\n{\r\n  "code": 20102,\r\n  "message": "The user was not found. This is add message."\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["因为没有传入 ",(0,s.jsx)(e.code,{children:"username"}),"，所以返回 ",(0,s.jsx)(e.code,{children:"errno.ErrUserNotFound"})," 错误信息，并通过 ",(0,s.jsx)(e.code,{children:"Add()"})," 函数在 message 信息后追加了 ",(0,s.jsx)(e.code,{children:"This is add message."})," 信息。"]}),"\n",(0,s.jsx)(e.p,{children:"通过"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'   if errno.IsErrUserNotFound(err) {\r\n        log.Debug("err type is ErrUserNotFound")\r\n    }   \n'})}),"\n",(0,s.jsx)(e.p,{children:"演示了如何通过定制错误方便地对比是不是某个错误，在该请求中，apiserver 会输出如下错误："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/6/1/163b9c03a0a6033e?w=1902&h=646&f=png&s=103787",alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["可以看到在后台日志中会输出敏感信息 ",(0,s.jsx)(e.code,{children:"username can not found in db: xx.xx.xx.xx"}),"，但是返回给用户的 message （",(0,s.jsx)(e.code,{children:'{"code":20102,"message":"The user was not found. This is add message."}'}),"）不包含这些敏感信息，可以供前端直接对外展示。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'$ curl -XPOST -H "Content-Type: application/json" http://127.0.0.1:8080/v1/user -d\'{"username":"admin","password":"admin"}\'\r\n\r\n{\r\n  "code": 0,\r\n  "message": "OK"\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["如果 ",(0,s.jsx)(e.code,{children:"err = nil"}),"，则 ",(0,s.jsx)(e.code,{children:"errno.DecodeErr(err)"})," 会返回成功的 ",(0,s.jsx)(e.code,{children:"code: 0"})," 和 ",(0,s.jsx)(e.code,{children:"message: OK"}),"。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["如果 API 是对外的，错误信息数量有限，则制定错误码非常容易，强烈建议使用错误码。如果是内部系统，特别是庞大的系统，内部错误会非常多，这时候没必要为每一个错误制定错误码，而只需为常见的错误制定错误码，对于普通的错误，系统在处理时会统一作为 ",(0,s.jsx)(e.code,{children:"InternalServerError"})," 处理。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"小结",children:["小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["本小节详细介绍了实际开发中是如何处理业务错误信息的，并给出了笔者倾向的错误码规范供读者参考，最后通过大量的实例来展示如何通过 ",(0,s.jsx)(e.code,{children:"errno"})," 包来处理不同场景的错误。"]})]})}function c(){let r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),r.components);return e?(0,s.jsx)(e,{...r,children:(0,s.jsx)(o,{...r})}):o(r)}let i=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F9%E5%9F%BA%E7%A1%80%206%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%9A%E5%8A%A1%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF.md"]={toc:[{text:"本节核心内容",id:"本节核心内容",depth:2},{text:"为什么要定制业务自己的错误码",id:"为什么要定制业务自己的错误码",depth:2},{text:"在 apiserver 中引入错误码",id:"在-apiserver-中引入错误码",depth:2},{text:"错误信息处理",id:"错误信息处理",depth:2},{text:"错误码实战",id:"错误码实战",depth:2},{text:"编译并运行",id:"编译并运行",depth:2},{text:"测试验证",id:"测试验证",depth:2},{text:"小结",id:"小结",depth:2}],title:"9基础 6：自定义业务错误信息",headingTitle:"9基础 6：自定义业务错误信息",frontmatter:{}}}}]);