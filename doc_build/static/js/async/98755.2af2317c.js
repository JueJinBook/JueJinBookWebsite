"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["98755"],{131060:function(e,n,d){d.r(n),d.d(n,{default:()=>c});var i=d(552676),a=d(740453);function r(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",h3:"h3",h4:"h4",pre:"pre",code:"code",blockquote:"blockquote"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"34操作集合里的记录",children:["34.操作集合里的记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34操作集合里的记录",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"55-操作集合里的记录",children:["5.5 操作集合里的记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#55-操作集合里的记录",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["在前面我们已经介绍了集合数据请求的",(0,i.jsx)(n.strong,{children:"查询方法get"}),"，除了get查询外，",(0,i.jsx)(n.strong,{children:"请求的方法"}),"还有",(0,i.jsx)(n.strong,{children:"add新增"}),"，",(0,i.jsx)(n.strong,{children:"remove删除"}),"、",(0,i.jsx)(n.strong,{children:"update改写/更新"}),"等，这些方法也都是基于数据库集合的引用Collection的。"]}),"\n",(0,i.jsxs)(n.h3,{id:"551-新增记录add",children:["5.5.1 新增记录add",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#551-新增记录add",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在前面我们将知乎日报的数据导入到了zhihu_daily的集合里，接下来我们就来给zhihu_daily新增记录。"}),"\n",(0,i.jsxs)(n.h4,{id:"1小程序端新增记录",children:["1、小程序端新增记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1小程序端新增记录",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"使用开发者工具新建一个daily的页面，然后在daily.wxml里输入以下代码，新建一个绑定了事件处理函数为addDaily的button按钮："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<button bindtap="addDaily">新增日报数据</button>\n'})}),"\n",(0,i.jsx)(n.p,{children:"然后再在daily.js里输入以下代码，在事件处理函数addDaily里调用Collection.add，往集合zhihu_daily里添加一条记录，如果传入的记录对象没有 _id 字段，则由后台自动生成 _id；若指定了 _id，则不能与已有记录冲突。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const db = wx.cloud.database() //注意这个要声明，建议放在Page()外，作为全局变量\naddDaily(){\n  db.collection(\'zhihu_daily\').add({\n    data: {\n      _id:"daily9718005",\n      title: "元素，生生不息的宇宙诸子",\n      images: [\n  "https://pic4.zhimg.com/v2-3c5d866701650615f50ff4016b2f521b.jpg"\n],\n      id: 9718005,\n      url: "https://daily.zhihu.com/story/9718005",\n      image: "https://pic2.zhimg.com/v2-c6a33965175cf81a1b6e2d0af633490d.jpg",\n      share_url: "http://daily.zhihu.com/story/9718005",\n      body:"<p><strong><strong>谨以此文，纪念元素周期表发布 150 周年。</strong></strong></p>rn<p>地球，世界，和生活在这里的芸芸众生从何而来，这是每个人都曾有意无意思考过的问题。</p>rn<p>科幻小说家道格拉斯\xb7亚当斯给了一个无厘头的答案，42；宗教也给出了诸神创世的虚构场景；</p>rn<p>最为恢弘的画面，则是由科学给出的，另一个意义上的<strong>生死轮回，一场属于元素的生死轮回</strong>。</p>"\n    }\n  })\n    .then(res => {\n      console.log(res)\n    })\n    .catch(console.error)\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["点击",(0,i.jsx)(n.strong,{children:"新增日报数据"}),"的button，会看到控制台打印的res对象里包含新增记录的_id为我们自己设置的daily9718005。打开云开发控制台的数据库标签，打开集合zhihu_daily，翻到最后一页，就能看到我们新增的记录啦。"]}),"\n",(0,i.jsxs)(n.h4,{id:"2服务端批量新增记录",children:["2、服务端批量新增记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2服务端批量新增记录",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"目前云开发还不支持在小程序端批量新增记录，只能一条一条的加，data参数的值也必须是object，而不能是数组array，但是在服务端（云函数端和云开发控制台的高级脚本操作）可以支持一次性增加多条记录。"}),"\n",(0,i.jsx)(n.p,{children:"比如我们可以新建一个china的云函数，然后再在index.js里输入如下代码，然后部署上传并调用这个云函数，就可以新增多条记录了："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const cloud = require(\'wx-server-sdk\')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\nconst db = cloud.database() \nexports.main = async (event, context) => {\n  const result = await db.collection(\'china\')\n  .add({\n    data:[{\n      _id:"user001",\n      name:"bbsky"\n    },{\n      _id:"user002",\n      name:"李东"\n    }]\n  })\n  return result\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["在创建记录的时候，如果不指定_id的值会自动生成一个唯一值，不过这个值过长，更加建议自建_id的生成规则。由于云开发数据库没有类似于MySQL的AUTO_INCREMENT自增主键的机制，我们可以使用自定义的值+时间戳+随机数来生成唯一值，比如",(0,i.jsx)(n.code,{children:'"p"+Date.now().toString().slice(-3)+Math.random().toString().slice(-3)'}),"，这里的意思是用自定义值",(0,i.jsx)(n.code,{children:"p"}),"和时间戳的后3位和随机数的后3位共7位数来构成唯一id。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"552-删除与更新多条记录",children:["5.5.2 删除与更新多条记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#552-删除与更新多条记录",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们可以用remove请求删除多条记录，用update来更新多条记录，不过需要注意的是简易权限控制不支持在小程序端执行remove请求和批量更新（基于db.collection的update就是批量更新多条记录）。只有开启了安全规则（自定义权限）才行；当然，服务端具有最高权限，也可以在云函数端和通过脚本来操作多条记录。"}),"\n",(0,i.jsxs)(n.h4,{id:"1云函数端删除多条记录",children:["1、云函数端删除多条记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1云函数端删除多条记录",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"比如我们可以把之前建好的china云函数main函数里的代码修改为如下，即删除省份province为广东的所有数据："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const result = await db.collection('china')\n  .where({\n    province:\"广东\"\n  })\n  .remove()\n"})}),"\n",(0,i.jsx)(n.p,{children:"调用chinadata云函数，就能在控制台里看到云函数返回的对象，其中包含stats:\xa0{removed:\xa022}，即删除了22条数据。"}),"\n",(0,i.jsxs)(n.h4,{id:"2云函数端更新多条记录update",children:["2、云函数端更新多条记录update",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2云函数端更新多条记录update",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们可以把之前建好的china云函数main函数里的代码修改为如下，也就是先查询省份province为湖北的记录，给这个记录更新一个字段英文省份名pro-en："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const result = await db.collection(\'china\')\n  .where({\n    province:"湖北"\n  })\n  .update({\n    data: {\n      "pro-en": "Hubei"\n    },\n  })\n'})}),"\n",(0,i.jsxs)(n.p,{children:["这里要注意的是，pro-en这个字段之前是没有的，通过Collection.update不只是起到更新的作用，还可以",(0,i.jsx)(n.strong,{children:"批量新增字段并赋值"}),'，也就是update时记录里有相同字段就更新，没有就新增； "pro-en":  "Hubei"，直接使用pro-en会报错，用双引号效果等价。']}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"在使用where.update操作时，如果集合中不存在满足条件的记录，返回的updated就会为0。我们在调试update操作时，可以先使用相同条件的where来get查询记录，在了解了查询到的记录情况下进行update就不容易犯错了。"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"3小程序端批量操作记录",children:["3、小程序端批量操作记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3小程序端批量操作记录",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["如果你想在小程序端批量删除和更新记录，除了需要使用安全规则以外，还需要注意安全规则与where条件的搭配，比如安全规则里有",(0,i.jsx)(n.code,{children:"auth.openid"}),"时，就是要求传入当前用户的openid作为条件，比如仅创建者可读写的安全规则如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  "read": "doc._openid == auth.openid",\n  "write": "doc._openid == auth.openid"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["也就是，我们在对集合进行读写操作时，都要求传入用户的openid，写的时候只需要在where里添加",(0,i.jsx)(n.code,{children:"_openid:'{openid}'"}),"即可（如果你不明白，where时一律都加这个条件）："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:".where({\n  _openid:'{openid}',//'{openid}'就是指当前用户的openid，这是一个字符串常量，当后台发现该字符串时会自动替换为当前小程序用户的openid\n  province:\"湖北\"\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"_openid:'{openid}'"}),"这个条件的意思是，记录里存在_openid这个字段，且它的值为当前用户的openid；如果记录里面没有_openid或者记录了用户openid的字段，则只有当安全规则的读或写设置为true时，才能在小程序端进行读写操作。"]})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}let c=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F34.%E6%93%8D%E4%BD%9C%E9%9B%86%E5%90%88%E9%87%8C%E7%9A%84%E8%AE%B0%E5%BD%95.md"]={toc:[{text:"5.5 操作集合里的记录",id:"55-操作集合里的记录",depth:2},{text:"5.5.1 新增记录add",id:"551-新增记录add",depth:3},{text:"1、小程序端新增记录",id:"1小程序端新增记录",depth:4},{text:"2、服务端批量新增记录",id:"2服务端批量新增记录",depth:4},{text:"5.5.2 删除与更新多条记录",id:"552-删除与更新多条记录",depth:3},{text:"1、云函数端删除多条记录",id:"1云函数端删除多条记录",depth:4},{text:"2、云函数端更新多条记录update",id:"2云函数端更新多条记录update",depth:4},{text:"3、小程序端批量操作记录",id:"3小程序端批量操作记录",depth:4}],title:"34.操作集合里的记录",headingTitle:"34.操作集合里的记录",frontmatter:{}}}}]);