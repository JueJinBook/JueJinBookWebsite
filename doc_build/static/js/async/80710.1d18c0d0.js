"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["80710"],{214854:function(e,n,r){r.r(n),r.d(n,{default:()=>x});var s=r(552676),t=r(740453);let d=r.p+"static/image/dbfa68cbe6f99cfa1967da0e733702ac.db0a3eb6.webp",a=r.p+"static/image/29fe1f0f47268e6b650c62628364dfa7.09067ea8.webp",o=r.p+"static/image/431638163563644df9ac9ed98fe51cb6.8e6a4e71.webp",i=r.p+"static/image/819e9aa83f9fe77ac65b9be5a7892a3d.94060549.webp",c=r.p+"static/image/f9d508af202fd7863134bda0e9300a8e.35ba0689.webp",l=r.p+"static/image/ca101d244c913c2e75db70975bde256f.531b3071.webp";function p(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",blockquote:"blockquote",h3:"h3",h4:"h4",pre:"pre",code:"code",strong:"strong",img:"img",ul:"ul",li:"li"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"7业务篇-如何写我们的redux与file",children:["7.业务篇-如何写我们的Redux与File",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7业务篇-如何写我们的redux与file",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"如何编写我们的-redux-与-jsonfile",children:["如何编写我们的 Redux 与 jsonFile",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何编写我们的-redux-与-jsonfile",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上一章节，我们已将首页开发完毕，接下来将要进入简历制作，但在简历制作之前，我们先将数据存储模块加以实现。让我们思考篇一个问题点："}),"\n",(0,s.jsx)(n.p,{children:"我们的简历平台最重要的是什么：数据！试想一下，你坐在电脑桌前，美滋滋的在做一份简历，隔壁家的熊孩子一不小心将你电源线拔了，电脑关机，数据丢失，此时你是不是很崩溃？你抱着最后一丝希望，重启应用，你是否期望应用能恢复你上次的数据信息？"}),"\n",(0,s.jsxs)(n.p,{children:["本章节阿宽将带着小伙伴们，在应用中动手实现数据的储存：实时性数据存储与持久性数据存储。如果你忘了储存方案，可以回头看：\uD83D\uDC49 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/6950646725295996940/section/6962435230061821952",target:"_blank",rel:"noopener noreferrer",children:"设计篇-需求功能设计与数据存储方案设计"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"本章节将一步步带你实现建立平台应用中的数据存储层面的功能实现，这是一个循序渐进过程，如果你对本章节内容兴趣不大，可以快速阅读或跳过。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"实时性数据存储",children:["实时性数据存储",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实时性数据存储",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们通过 redux 进行数据状态管理，为了避免繁琐的操作，采用 rc-redux-model 进行辅助开发，接下来跟着阿宽步伐，冲！"}),"\n",(0,s.jsxs)(n.h4,{id:"1-安装",children:["1. 安装",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-安装",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"让我们先来安装一下"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"npm install redux\nnpm install rc-redux-model --save-dev // \uD83D\uDC49 安装这个库，简便redux操作\nnpm install redux-logger --save-dev // \uD83D\uDC49 安装这个库，让我们在控制台看到redux数据\n"})}),"\n",(0,s.jsxs)(n.p,{children:["安装完成后，我们在 ",(0,s.jsx)(n.code,{children:"app/renderer"})," 文件夹下，新增一个名为 ",(0,s.jsx)(n.code,{children:"store"})," 的文件夹，存放着所有 redux model 相关的代码文件。在里面新增一个文件名为 ",(0,s.jsx)(n.code,{children:"index.ts"}),"，该文件主要引入我们所有的 model，经过 redux 的 API，导出一颗完整的数据状态树。（看下面代码注释）"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// renderer/store/index.ts\nimport logger from 'redux-logger';\nimport RcReduxModel from 'rc-redux-model';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n\n// \uD83D\uDC47 引入我们写好的 model\nimport globalModel from './globalModel';\n\n// \uD83D\uDC47 这里只需要调用 RcReduxModel 实例化一下得到最后的 reduxModel\nconst reduxModel = new RcReduxModel([globalModel]);\n\n// \uD83D\uDC47 无侵入式的使用 Redux，即使你写最原始的 reducer 也照样支持\nconst reducerList = combineReducers(reduxModel.reducers);\n\nexport default createStore(reducerList, applyMiddleware(reduxModel.thunk, logger));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面我们引入了 ",(0,s.jsx)(n.code,{children:"./globalModel"}),"，那么我们在 store 文件夹下，追加一份 ",(0,s.jsx)(n.code,{children:"globalModel.ts"})," 文件。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// renderer/store/globalModel.ts\nconst globalModel = {\n  namespace: 'globalModel',\n  openSeamlessImmutable: true,\n  state: {\n    appName: '简历应用平台',\n  },\n};\n\nexport default globalModel;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["通过 ",(0,s.jsx)(n.a,{href:"https://github.com/SugarTurboS/rc-redux-model",target:"_blank",rel:"noopener noreferrer",children:"rc-redux-model"})," 官方文档介绍：在 model 中，",(0,s.jsx)(n.strong,{children:"action 以及 reducer 我们均可忽略不写"}),"。只需要定义好 state 值即可。"]}),"\n",(0,s.jsx)(n.p,{children:"到目前为止，我们已经将 redux 文件信息创建好了，接下来在项目中使用，不过在使用前，先捋一下 react、redux、react-redux 的关系。"}),"\n",(0,s.jsxs)(n.h4,{id:"2-为什么要用-react-redux",children:["2. 为什么要用 react-redux",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-为什么要用-react-redux",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["如果你还记得阿宽前面介绍的 react 数据流知识，想必你还有印象：当多个组件需要进行数据共享，交换双方的数据，",(0,s.jsx)(n.strong,{children:"唯一的解决方案就是：提升 state"}),"，将原本兄弟组件的 state 提升到共有的父组件中管理，由父组件向下传递数据，子组件进行处理，通过回调函数回传修改 state，这样的 state 一定程度上是响应式的。redux 也是这样的原理！"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["要知道 redux 是不区分技术栈的，意味着你也可以在 vue 中使用，只是我们经常搭配套餐使用 react。如上述的代码，我们通过 ",(0,s.jsx)(n.code,{children:"createStore"})," 导出了数据状态树后，在组件中，我们如何得到数据值呢？只能通过 redux 提供的 ",(0,s.jsx)(n.code,{children:"store.getState()"})," API，意味着我们每个组件都需要写:（下面为伪代码）"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import store from './store/index.ts';\n\nfunction Home() {\n  // \uD83D\uDC47 每个组件都需要这么写才能拿到数据\n  const state = store.getState();\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"另一种方式是你可以在根组件获取 store，通过 Props 层层传递，如果你中间组件断层，没传递 Props，就会导致下层组件获取不到值，为了在使用上简洁方便，我们才引入了 react-redux 库。"}),"\n",(0,s.jsx)(n.p,{children:"让我们安装一下"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install react-redux\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"3-在组件中使用-redux",children:["3. 在组件中使用 redux",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-在组件中使用-redux",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当你捋清楚三者关系并安装 react-redux 之后，接下来在组件中使用 redux 不再是困难的事。我们将经过 ",(0,s.jsx)(n.code,{children:"createStore"})," 生成的 store 挂载到 react-redux 提供的 Provider 组件上，这个 Provider 的工作任务是：通过 context 向子组件提供 store。"]}),"\n",(0,s.jsx)(n.p,{children:"多说无益，上手试试，我们进入根组件 app.tsx 将其进行修改"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './router';\n\n// \uD83D\uDC47 引入 store\nimport store from './store';\n\n// 引入 Provider\nimport { Provider } from 'react-redux';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["刷新一下页面，没有发生报错，也不会出现白屏，接下来我们在首页入口模块获取一下 redux 中的数据吧～ 上面我们已经给了一个初始值，",(0,s.jsx)(n.code,{children:'appName="简历应用平台"'}),"，我们修改一下首页模块的 index.tsx"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// renderer/container/root/index.tsx\nimport { useSelector } from 'react-redux';\n\nfunction Root() {\n  const appName = useSelector((state: any) => state.globalModel.appName);\n  console.log('appName = ', appName);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"刷新一下页面，打开控制台，看看打印的数据，很完美符合我们的预期。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h4,{id:"4-在组件中修改-redux",children:["4. 在组件中修改 redux",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-在组件中修改-redux",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["既然可以获取 redux 数据值，自然而然地，我们也需要修改 redux 的值。在",(0,s.jsx)(n.a,{href:"https://redux.js.org/introduction/core-concepts",target:"_blank",rel:"noopener noreferrer",children:"redux 官方文档"}),"中，很明确提到：",(0,s.jsx)(n.strong,{children:"唯一改变 state 的方法就是触发 action"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["通过 dispatch 发起一个 action 就能修改 state 值，但仔细一想，每个 state，都对应一个 action，在简历这种多 state 值下，这是不是很麻烦呢？得益于 rc-redux-model，",(0,s.jsx)(n.code,{children:"它提供一个 action API，只需记住一个 action，就能修改 state 的任意值"}),"。接下来我们来修改一下"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// renderer/container/root/index.tsx\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction Root() {\n  const dispatch = useDispatch();\n  const appName = useSelector((state: any) => state.globalModel.appName);\n\n  useEffect(() => {\n    setTimeout(() => {\n      console.log('3s 后修改...');\n      dispatch({\n        type: 'globalModel/setStore',\n        payload: {\n          key: 'appName',\n          values: 'visResumeMook',\n        },\n      });\n    }, 3000);\n  }, []);\n\n  useEffect(() => {\n    console.log('appName = ', appName);\n  }, [appName]);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["解读一下上面代码，我们在生命周期 ",(0,s.jsx)(n.code,{children:"didMount"})," 中写了一段延时方法，在 3s 之后修改 appName，紧接着对 appName 进行监听，当它修改时，打印当前最新的值。小伙伴们猜测一下，3s 后数据是不是会发生改变呢？刷新页面，打开控制台，发现一切如我们预期一致。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"至此，我们能够已经能够项目中使用 redux 进行实时性数据的存储，更多的使用在接下来的实战过程中会讲到。"}),"\n",(0,s.jsxs)(n.h3,{id:"持久性数据存储",children:["持久性数据存储",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#持久性数据存储",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们采用文件形式进行持久性数据存储，最重要的就是对文件的增删改查，接下来，我们实现一套文件操作方法，需要支持的方法有："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"文件的创建"}),"\n",(0,s.jsx)(n.li,{children:"文件的读取"}),"\n",(0,s.jsx)(n.li,{children:"文件的更新"}),"\n",(0,s.jsx)(n.li,{children:"文件的删除"}),"\n",(0,s.jsx)(n.li,{children:"文件是否存在"}),"\n",(0,s.jsx)(n.li,{children:"文件是否可读"}),"\n",(0,s.jsx)(n.li,{children:"文件是否可写"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["得益于渲染进程也能使用 NodeJS 模块，我们可以通过 fs 进行文件相关的操作。通过 ",(0,s.jsx)(n.a,{href:"https://nodejs.org/dist/latest-v10.x/docs/api/fs.html#fs_fs_readfile_path_options_callback",target:"_blank",rel:"noopener noreferrer",children:"Node 官网"})," 我们发现大部分的函数方法都是通过回调函数的形式，将数据值返回，这样会造成 ",(0,s.jsx)(n.code,{children:"回调地狱"})," 的形式。"]}),"\n",(0,s.jsxs)(n.p,{children:["仔细一想，通过 Promise 方式是否对我们更加友好？但好像改造成 Promise 又增加我们的工作量，有没有现成的 API 可用呢？在 Node 10 之后，提供了 ",(0,s.jsx)(n.a,{href:"https://nodejs.org/dist/latest-v10.x/docs/api/fs.html#fs_fs_promises_api",target:"_blank",rel:"noopener noreferrer",children:"fs Promises API"})," ，这里我们通过官方提供的 API 即可实现 Promise 操作 fs 模块。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面通过实战进行开发，这是一个通用的工具方法，并且期望对文件的操作都进行统一管理，我们可以在 ",(0,s.jsx)(n.code,{children:"renderer/common/utils"})," 中，新增一个名为 file.ts 的文件"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// renderer/common/utils/file.ts\n// \uD83D\uDC47 先打印一下Node版本\nconsole.log(`Node Version：${process.versions.node}`);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"在开发前请小伙伴们确定你的 Node 版本是 10 以上，这里阿宽的 Node 版本在 14，可以使用 fs Promises API，如果小伙伴们的 Node 版本较低，可以考虑升级或者自己尝试改造成 Promise 形式哦～"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"接下来我们封装一下 file.ts 的实现"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// renderer/common/utils/file.ts\nimport fs, { promises as fsPromiseAPIs } from 'fs';\n\nconst fileAction = {\n  read: (path: string, encoding: BufferEncoding): Promise<string> => {\n    return fsPromiseAPIs.readFile(path, { encoding: encoding || 'utf8' });\n  },\n  write: (path: string, content: string, encoding: BufferEncoding): Promise<void> => {\n    return fsPromiseAPIs.writeFile(path, content, { encoding: encoding || 'utf8' });\n  },\n  rename: (oldPath: string, newPath: string) => {\n    return fsPromiseAPIs.rename(oldPath, newPath);\n  },\n  delete: (path: string) => {\n    return fsPromiseAPIs.unlink(path);\n  },\n  hasFile: (path: string) => {\n    return fsPromiseAPIs.access(path, fs.constants.F_OK);\n  },\n  canWrite: (path: string) => {\n    return fsPromiseAPIs.access(path, fs.constants.W_OK);\n  },\n  canRead: (path: string) => {\n    return fsPromiseAPIs.access(path, fs.constants.R_OK);\n  },\n};\n\nexport default fileAction;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接下来我们在简历模块处，读取一下文件内容，修改一下 ",(0,s.jsx)(n.code,{children:"container/resume/index.ts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// renderer/container/resume/index.ts\nimport React from 'react';\nimport './index.less';\nimport fileAction from '@common/utils/file';\n\nfunction Resume() {\n  // \uD83D\uDC47 读取一下当前这个文件内容\n  fileAction.read('./index.tsx').then((data) => {\n    console.log(data);\n  });\n\n  return <div>我是简历模块</div>;\n}\nexport default Resume;\n"})}),"\n",(0,s.jsx)(n.p,{children:"将项目跑起来，进入到简历路由页面下，看看控制台输出什么？"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"读取错误，那怎样才能读到文件内容？是不是绝对路径就没问题呢？我们先试试这样能否读到文件数据"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"fileAction\n  .read(\n    '/Users/pengdaokuan/Desktop/pdk/visResumeMook/app/renderer/container/resume/index.tsx'\n  )\n  .then((data) => {\n    console.log(data);\n  });\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["通过上图可以看到，绝对路径是能读到文件数据的，于是问题聚焦于：我们如何获取当前应用程序所在目录？也就是 ",(0,s.jsx)(n.code,{children:"/Users/pengdaokuan/Desktop/pdk/visResumeMook"})," 路径的获取。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["electron 提供一个 ",(0,s.jsx)(n.a,{href:"https://www.electronjs.org/docs/api/app#app",target:"_blank",rel:"noopener noreferrer",children:"app"})," 模块"]}),"，该模块提供了一个 ",(0,s.jsx)(n.a,{href:"https://www.electronjs.org/docs/api/app#appgetapppath",target:"_blank",rel:"noopener noreferrer",children:"getAppPath()"})," 方法，用于获取当前应用程序在本机中的目录路径，但有个问题在于，该 app 模块仅能在主进程中使用，而我们期望在渲染进程中得到此目录路径，只能通过 IPC 进程间通信获取。"]}),"\n",(0,s.jsxs)(n.h4,{id:"ipc-获取应用程序所在的目录路径",children:["IPC 获取应用程序所在的目录路径",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ipc-获取应用程序所在的目录路径",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 utils 目录下，新增一个文件名为：appPath.ts，该文件用于获取项目的绝对路径。我们通过 Promise 来写一下它："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// renderer/common/utils/appPath.ts\n\n// 监听主进程与渲染进程通信\nimport { ipcRenderer } from 'electron';\n\n// 获取项目绝对路径\nexport function getAppPath() {\n  return new Promise(\n    (resolve: (value: string) => void, reject: (value: Error) => void) => {\n      ipcRenderer.send('get-root-path', '');\n      ipcRenderer.on('reply-root-path', (event, arg: string) => {\n        if (arg) {\n          resolve(arg);\n        } else {\n          reject(new Error('项目路径错误'));\n        }\n      });\n    }\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接着我们在主进程中，通过 app 模块获取项目路径，通过 ipcMain 回复渲染进程，修改一下 ",(0,s.jsx)(n.code,{children:"app/main/electron.ts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { app, ipcMain } from 'electron';\n\nconst ROOT_PATH = path.join(app.getAppPath(), '../');\n\n// \uD83D\uDC47 监听渲染进程发的消息并回复\nipcMain.on('get-root-path', (event, arg) => {\n  event.reply('reply-root-path', ROOT_PATH);\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"这时候我们再回过头去简历模块处，稍微修改"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nimport './index.less';\nimport fileAction from '@common/utils/file';\nimport { getAppPath } from '@common/utils/appPath';\n\nfunction Resume() {\n  getAppPath().then((rootPath: string) => {\n    console.log('应用程序的目录路径为: ', rootPath);\n    console.log('文件读取，内容数据为: ');\n    fileAction\n      .read(`${rootPath}app/renderer/container/resume/index.tsx`)\n      .then((data) => {\n        console.log(data);\n      });\n  });\n\n  return <div>我是简历模块</div>;\n}\nexport default Resume;\n"})}),"\n",(0,s.jsx)(n.p,{children:"一定要记住，修改完之后，重新跑一下主进程命令，因为主进程并不会热更新"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["上图所示，我们就完成了持久性数据文件的基本操作，对于更新、新增、删除文件等操作这边就不演示了，小伙伴们可以拉取一下：",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-07",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 chapter-07"})," 分支代码进行阅读哈"]}),"\n",(0,s.jsxs)(n.h2,{id:"代码优化",children:["代码优化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码优化",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上面我们实现了基本功能，接下来我们优化一下代码，将上边为了验证 Redux 的无用代码删除，并且为各方法添加对应注释与类型约束。"}),"\n",(0,s.jsxs)(n.p,{children:["这里的优化相对简单，大部分是注释补全与类型约束，优化后的代码可访问: ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-07-op",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 chapter-07-op"})," 分支"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["本章节主要带着大家在项目中使用 Redux 以及对本地文件的一系列操作，",(0,s.jsx)(n.strong,{children:"数据存储是应用程序至关重要的一环"}),"，掌握它是我们实战开发中的重中之重。接下来将使用封装好的方法进行信息的录入和存储。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"如果您在边阅读边实践时，发现代码报错或者 TS 报错，那么小伙伴们可以根据报错信息，去线上看看相应的代码。"})}),"\n",(0,s.jsx)(n.p,{children:"如果对本章节存在疑问，欢迎在评论区留言。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}let x=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Electron%20%2B%20React%20%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8E%86%E5%B9%B3%E5%8F%B0%E5%AE%9E%E6%88%98%2F7.%E4%B8%9A%E5%8A%A1%E7%AF%87-%E5%A6%82%E4%BD%95%E5%86%99%E6%88%91%E4%BB%AC%E7%9A%84Redux%E4%B8%8EFile.md"]={toc:[{text:"如何编写我们的 Redux 与 jsonFile",id:"如何编写我们的-redux-与-jsonfile",depth:2},{text:"实时性数据存储",id:"实时性数据存储",depth:3},{text:"1. 安装",id:"1-安装",depth:4},{text:"2. 为什么要用 react-redux",id:"2-为什么要用-react-redux",depth:4},{text:"3. 在组件中使用 redux",id:"3-在组件中使用-redux",depth:4},{text:"4. 在组件中修改 redux",id:"4-在组件中修改-redux",depth:4},{text:"持久性数据存储",id:"持久性数据存储",depth:3},{text:"IPC 获取应用程序所在的目录路径",id:"ipc-获取应用程序所在的目录路径",depth:4},{text:"代码优化",id:"代码优化",depth:2},{text:"总结",id:"总结",depth:2}],title:"7.业务篇-如何写我们的Redux与File",headingTitle:"7.业务篇-如何写我们的Redux与File",frontmatter:{}}}}]);