"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["25428"],{567993:function(n,e,t){t.r(e),t.d(e,{default:()=>r});var a=t(552676),i=t(740453);function l(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2",strong:"strong"},(0,i.ah)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"8应用-7一毛不拔--漏斗限流",children:["8应用 7：一毛不拔 —— 漏斗限流",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#8应用-7一毛不拔--漏斗限流",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"漏斗限流是最常用的限流方法之一，顾名思义，这个算法的灵感源于漏斗（funnel）的结构。"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/7/10/164847a37cfcea2e?w=730&h=320&f=png&s=73710",alt:""})}),"\n",(0,a.jsx)(e.p,{children:"漏斗的容量是有限的，如果将漏嘴堵住，然后一直往里面灌水，它就会变满，直至再也装不进去。如果将漏嘴放开，水就会往下流，流走一部分之后，就又可以继续往里面灌水。如果漏嘴流水的速率大于灌水的速率，那么漏斗永远都装不满。如果漏嘴流水速率小于灌水的速率，那么一旦漏斗满了，灌水就需要暂停并等待漏斗腾空。"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/7/11/16487813367a459d?w=483&h=174&f=png&s=30383",alt:""})}),"\n",(0,a.jsx)(e.p,{children:"所以，漏斗的剩余空间就代表着当前行为可以持续进行的数量，漏嘴的流水速率代表着系统允许该行为的最大频率。下面我们使用代码来描述单机漏斗算法。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:"# coding: utf8\n\nimport time\n\nclass Funnel(object):\n\n    def __init__(self, capacity, leaking_rate):\n        self.capacity = capacity  # 漏斗容量\n        self.leaking_rate = leaking_rate  # 漏嘴流水速率\n        self.left_quota = capacity  # 漏斗剩余空间\n        self.leaking_ts = time.time()  # 上一次漏水时间\n\n    def make_space(self):\n        now_ts = time.time()\n        delta_ts = now_ts - self.leaking_ts  # 距离上一次漏水过去了多久\n        delta_quota = delta_ts * self.leaking_rate  # 又可以腾出不少空间了\n        if delta_quota < 1:  # 腾的空间太少，那就等下次吧\n            return\n        self.left_quota += delta_quota  # 增加剩余空间\n        self.leaking_ts = now_ts  # 记录漏水时间\n        if self.left_quota > self.capacity:  # 剩余空间不得高于容量\n            self.left_quota = self.capacity\n\n    def watering(self, quota):\n        self.make_space()\n        if self.left_quota >= quota:  # 判断剩余空间是否足够\n            self.left_quota -= quota\n            return True\n        return False\n\n\nfunnels = {}  # 所有的漏斗\n\n# capacity  漏斗容量\n# leaking_rate 漏嘴流水速率 quota/s\ndef is_action_allowed(\n        user_id, action_key, capacity, leaking_rate):\n    key = '%s:%s' % (user_id, action_key)\n    funnel = funnels.get(key)\n    if not funnel:\n        funnel = Funnel(capacity, leaking_rate)\n        funnels[key] = funnel\n    return funnel.watering(1)\n\n\nfor i in range(20):\n    print is_action_allowed('laoqian', 'reply', 15, 0.5)\n"})}),"\n",(0,a.jsx)(e.p,{children:"再提供一个 Java 版本的："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'public class FunnelRateLimiter {\n\n  static class Funnel {\n    int capacity;\n    float leakingRate;\n    int leftQuota;\n    long leakingTs;\n\n    public Funnel(int capacity, float leakingRate) {\n      this.capacity = capacity;\n      this.leakingRate = leakingRate;\n      this.leftQuota = capacity;\n      this.leakingTs = System.currentTimeMillis();\n    }\n\n    void makeSpace() {\n      long nowTs = System.currentTimeMillis();\n      long deltaTs = nowTs - leakingTs;\n      int deltaQuota = (int) (deltaTs * leakingRate);\n      if (deltaQuota < 0) { // 间隔时间太长，整数数字过大溢出\n        this.leftQuota = capacity;\n        this.leakingTs = nowTs;\n        return;\n      }\n      if (deltaQuota < 1) { // 腾出空间太小，最小单位是1\n        return;\n      }\n      this.leftQuota += deltaQuota;\n      this.leakingTs = nowTs;\n      if (this.leftQuota > this.capacity) {\n        this.leftQuota = this.capacity;\n      }\n    }\n\n    boolean watering(int quota) {\n      makeSpace();\n      if (this.leftQuota >= quota) {\n        this.leftQuota -= quota;\n        return true;\n      }\n      return false;\n    }\n  }\n\n  private Map<String, Funnel> funnels = new HashMap<>();\n\n  public boolean isActionAllowed(String userId, String actionKey, int capacity, float leakingRate) {\n    String key = String.format("%s:%s", userId, actionKey);\n    Funnel funnel = funnels.get(key);\n    if (funnel == null) {\n      funnel = new Funnel(capacity, leakingRate);\n      funnels.put(key, funnel);\n    }\n    return funnel.watering(1); // 需要1个quota\n  }\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"Funnel 对象的 make_space 方法是漏斗算法的核心，其在每次灌水前都会被调用以触发漏水，给漏斗腾出空间来。能腾出多少空间取决于过去了多久以及流水的速率。Funnel 对象占据的空间大小不再和行为的频率成正比，它的空间占用是一个常量。"}),"\n",(0,a.jsx)(e.p,{children:"问题来了，分布式的漏斗算法该如何实现？能不能使用 Redis 的基础数据结构来搞定？"}),"\n",(0,a.jsx)(e.p,{children:"我们观察 Funnel 对象的几个字段，我们发现可以将 Funnel 对象的内容按字段存储到一个 hash 结构中，灌水的时候将 hash 结构的字段取出来进行逻辑运算后，再将新值回填到 hash 结构中就完成了一次行为频度的检测。"}),"\n",(0,a.jsx)(e.p,{children:"但是有个问题，我们无法保证整个过程的原子性。从 hash 结构中取值，然后在内存里运算，再回填到 hash 结构，这三个过程无法原子化，意味着需要进行适当的加锁控制。而一旦加锁，就意味着会有加锁失败，加锁失败就需要选择重试或者放弃。"}),"\n",(0,a.jsx)(e.p,{children:"如果重试的话，就会导致性能下降。如果放弃的话，就会影响用户体验。同时，代码的复杂度也跟着升高很多。这真是个艰难的选择，我们该如何解决这个问题呢？Redis-Cell 救星来了！"}),"\n",(0,a.jsxs)(e.h2,{id:"redis-cell",children:["Redis-Cell",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#redis-cell",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"Redis 4.0 提供了一个限流 Redis 模块，它叫 redis-cell。该模块也使用了漏斗算法，并提供了原子的限流指令。有了这个模块，限流问题就非常简单了。"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/7/11/1648780927d6f4ec?w=522&h=202&f=png&s=32765",alt:""})}),"\n",(0,a.jsxs)(e.p,{children:["该模块只有1条指令",(0,a.jsx)(e.code,{children:"cl.throttle"}),"，它的参数和返回值都略显复杂，接下来让我们来看看这个指令具体该如何使用。"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"> cl.throttle laoqian:reply 15 30 60 1\n                      ▲     ▲  ▲  ▲  ▲\n                      |     |  |  |  └───── need 1 quota (可选参数，默认值也是1)\n                      |     |  └──┴─────── 30 operations / 60 seconds 这是漏水速率\n                      |     └───────────── 15 capacity 这是漏斗容量\n                      └─────────────────── key laoqian\n"})}),"\n",(0,a.jsx)(e.p,{children:"上面这个指令的意思是允许「用户老钱回复行为」的频率为每 60s 最多 30 次(漏水速率)，漏斗的初始容量为 15，也就是说一开始可以连续回复 15 个帖子，然后才开始受漏水速率的影响。我们看到这个指令中漏水速率变成了 2 个参数，替代了之前的单个浮点数。用两个参数相除的结果来表达漏水速率相对单个浮点数要更加直观一些。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"> cl.throttle laoqian:reply 15 30 60\n1) (integer) 0   # 0 表示允许，1表示拒绝\n2) (integer) 15  # 漏斗容量capacity\n3) (integer) 14  # 漏斗剩余空间left_quota\n4) (integer) -1  # 如果拒绝了，需要多长时间后再试(漏斗有空间了，单位秒)\n5) (integer) 2   # 多长时间后，漏斗完全空出来(left_quota==capacity，单位秒)\n"})}),"\n",(0,a.jsx)(e.p,{children:"在执行限流指令时，如果被拒绝了，就需要丢弃或重试。cl.throttle 指令考虑的非常周到，连重试时间都帮你算好了，直接取返回结果数组的第四个值进行 sleep 即可，如果不想阻塞线程，也可以异步定时任务来重试。"}),"\n",(0,a.jsxs)(e.h2,{id:"思考",children:["思考",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#思考",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"漏斗限流模块除了应用于 UGC，还能应用于哪些地方？"}),"\n",(0,a.jsxs)(e.h2,{id:"拓展阅读",children:["拓展阅读",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#拓展阅读",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"1. 《Redis-Cell 作者 Itamar Haber 其人趣事》"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/7/11/164872dc531f1a48?w=865&h=141&f=png&s=56775",alt:""})}),"\n",(0,a.jsx)(e.p,{children:"Redis-Cell 作者 Itamar Haber  的介绍很有意思——一个「自封」的 Redis 极客。还有，Cell 这个模块居然是用 Rust 编写的。—— 原来 Redis 模块可以使用 Rust 编写？！"}),"\n",(0,a.jsx)(e.p,{children:"这意味着我们不用去搞古老的 C 语言了。老钱表示要重新拾起放弃很久的 Rust 语言。哎，干程序员这一行，真是要活到老，学到死啊！\uD83D\uDE22"})]})}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}let r=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["Redis%20%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F8%E5%BA%94%E7%94%A8%207%EF%BC%9A%E4%B8%80%E6%AF%9B%E4%B8%8D%E6%8B%94%20%E2%80%94%E2%80%94%20%E6%BC%8F%E6%96%97%E9%99%90%E6%B5%81.md"]={toc:[{text:"Redis-Cell",id:"redis-cell",depth:2},{text:"思考",id:"思考",depth:2},{text:"拓展阅读",id:"拓展阅读",depth:2}],title:"8应用 7：一毛不拔 —— 漏斗限流",headingTitle:"8应用 7：一毛不拔 —— 漏斗限流",frontmatter:{}}}}]);