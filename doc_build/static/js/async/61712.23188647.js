"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["61712"],{464542:function(e,n,r){r.r(n),r.d(n,{default:()=>o});var s=r(552676),c=r(740453);function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h3:"h3",pre:"pre",code:"code",ul:"ul",li:"li",img:"img",hr:"hr",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"9高阶篇-03用-nodejs-脚本替代复杂的-npm-script",children:["9高阶篇 03：用 node.js 脚本替代复杂的 npm script",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9高阶篇-03用-nodejs-脚本替代复杂的-npm-script",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer",children:"Node.js"})," 丰富的生态能赋予我们更强的能力，对于前端工程师来说，使用 Node.js 来编写复杂的 npm script 具有明显的 2 个优势：首先，编写简单的工具脚本对前端工程师来说额外的学习成本很低甚至可以忽略不计，其次，因为 Node.js 本身是跨平台的，用它编写的脚本出现跨平台兼容问题的概率很小。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面我们就一起探索下，如何把上节中使用 shell 编写的 cover 脚本改写成 Node.js 脚本，在 Node.js 脚本中我们也能体味到 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/shelljs",target:"_blank",rel:"noopener noreferrer",children:"shelljs"})," 这个工具包的强大。"]}),"\n",(0,s.jsxs)(n.h3,{id:"1-安装-shelljs-依赖",children:["1. 安装 shelljs 依赖",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-安装-shelljs-依赖",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"使用如下命令安装 shelljs 到项目依赖中："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm i shelljs -D\n# npm install shelljs --save-dev\n# yarn add shelljs -D\n"})}),"\n",(0,s.jsxs)(n.p,{children:["此外，我们计划使用 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/chalk",target:"_blank",rel:"noopener noreferrer",children:"chalk"})," 来给输出加点颜色，让脚本变的更有趣，同样安装到 devDependencies 里面："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm i chalk -D\n# npm install chalk --save-dev\n# yarn add chalk -D\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-创建-nodejs-脚本",children:["2. 创建 Node.js 脚本",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-创建-nodejs-脚本",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"touch scripts/cover.js\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-用-nodejs-实现同等功能",children:["3. 用 Node.js 实现同等功能",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-用-nodejs-实现同等功能",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["shelljs 为我们提供了各种常见命令的跨平台支持，比如 cp、mkdir、rm、cd 等命令，此外，理论上你可以在 Node.js 脚本中使用任何 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com",target:"_blank",rel:"noopener noreferrer",children:"npmjs.com"})," 上能找到的包。清理归档目录、运行测试、归档并预览覆盖率报告的完整 Node.js 代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const { rm, cp, mkdir, exec, echo } = require('shelljs');\nconst chalk = require('chalk');\n\nconsole.log(chalk.green('1. remove old coverage reports...'));\nrm('-rf', 'coverage');\nrm('-rf', '.nyc_output');\n\nconsole.log(chalk.green('2. run test and collect new coverage...'));\nexec('nyc --reporter=html npm run test');\n\nconsole.log(chalk.green('3. archive coverage report by version...'));\nmkdir('-p', 'coverage_archive/$npm_package_version');\ncp('-r', 'coverage/*', 'coverage_archive/$npm_package_version');\n\nconsole.log(chalk.green('4. open coverage report for preview...'));\nexec('npm-run-all --parallel cover:serve cover:open');\n"})}),"\n",(0,s.jsx)(n.p,{children:"关于改动的几点说明："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"简单的文件系统操作，建议直接使用 shelljs 提供的 cp、rm 等替换；"}),"\n",(0,s.jsx)(n.li,{children:"部分稍复杂的命令，比如 nyc 可以使用 exec 来执行，也可以使用 istanbul 包来完成；"}),"\n",(0,s.jsxs)(n.li,{children:["在 exec 中也可以大胆的使用 npm script 运行时的环境变量，比如 ",(0,s.jsx)(n.code,{children:"$npm_package_version"}),"；"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"4-让-packagejson-指向新脚本",children:["4. 让 package.json 指向新脚本",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-让-packagejson-指向新脚本",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"准备好 Node.js 脚本之后，我们需要修改 package.json 里面的命令，使其运行该脚本："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-patch",children:'   "scripts": {\n     "test": "cross-env NODE_ENV=test mocha tests/",\n-    "cover": "scripty",\n+    "cover": "node scripts/cover.js",\n     "cover:open": "scripty"\n   },\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"5-测试-cover-命名",children:["5. 测试 cover 命名",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-测试-cover-命名",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"重新运行 npm run cover 命令，不出意外的话，基本功能是正常的，除了我们新加的绿色输出，如下图："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2017/12/10/1603de95af9b2c41?w=1060&h=587&f=png&s=87226",alt:""})}),"\n",(0,s.jsx)(n.p,{children:"以上，本小节完，这里只是简单展示了如何组织 Node.js 脚本并且让其与 npm script 关联起来，至于具体在脚本中做什么事情，请你自由发挥吧。"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["本节用到的代码见 ",(0,s.jsx)(n.a,{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/08-using-nodejs-script-as-replacement",target:"_blank",rel:"noopener noreferrer",children:"GitHub"}),"，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 ",(0,s.jsx)(n.code,{children:"08-using-nodejs-script-as-replacement"}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let o=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E7%94%A8%20npm%20script%20%E6%89%93%E9%80%A0%E8%B6%85%E6%BA%9C%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%2F9%E9%AB%98%E9%98%B6%E7%AF%87%2003%EF%BC%9A%E7%94%A8%20node.js%20%E8%84%9A%E6%9C%AC%E6%9B%BF%E4%BB%A3%E5%A4%8D%E6%9D%82%E7%9A%84%20npm%20script.md"]={toc:[{text:"1. 安装 shelljs 依赖",id:"1-安装-shelljs-依赖",depth:3},{text:"2. 创建 Node.js 脚本",id:"2-创建-nodejs-脚本",depth:3},{text:"3. 用 Node.js 实现同等功能",id:"3-用-nodejs-实现同等功能",depth:3},{text:"4. 让 package.json 指向新脚本",id:"4-让-packagejson-指向新脚本",depth:3},{text:"5. 测试 cover 命名",id:"5-测试-cover-命名",depth:3}],title:"9高阶篇 03：用 node.js 脚本替代复杂的 npm script",headingTitle:"9高阶篇 03：用 node.js 脚本替代复杂的 npm script",frontmatter:{}}}}]);