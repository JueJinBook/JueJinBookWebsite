"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["68586"],{97899:function(e,n,i){i.r(n),i.d(n,{default:()=>I});var t=i(552676),r=i(740453);let a=i.p+"static/image/5ff887b01fbe0375e3cc3fee34b5f5ef.cb51e6c8.webp",d=i.p+"static/image/011ce96d80377072d630a7c54c6962e0.6716d3aa.webp",l=i.p+"static/image/2052a674db857cf329ffd2a25c3122c4.b8102d22.webp",s=i.p+"static/image/a7c9f3829741e8d499e806f49fd6764a.fd6af642.webp",o=i.p+"static/image/049bae64193f271b9b07667a081de921.91f889b5.webp",p=i.p+"static/image/a85fdb5cbfd7a48277459b6634df6d1f.0c70112f.webp",c=i.p+"static/image/afa1c953e4dc3f7cdff5b77d0fdc06ee.9f71b039.webp",g=i.p+"static/image/58a51099b16bb08f26b76d9b4ea50e0d.49331046.webp",u=i.p+"static/image/be0ffeb17be42e34e6456bc101786c01.5c76eb01.webp",m=i.p+"static/image/8729e0dd194ed78583ad93c7d3330897.ee775379.webp",f=i.p+"static/image/e839ee28cc810d3b4846ded94b95c2e1.bf8256c7.webp";function T(e){let n=Object.assign({h1:"h1",a:"a",pre:"pre",code:"code",h2:"h2",p:"p",ul:"ul",li:"li",strong:"strong",img:"img",blockquote:"blockquote",h4:"h4"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"28api-接口开发实战之商品配置管理模块接口开发",children:["28.API 接口开发实战之商品配置管理模块接口开发",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#28api-接口开发实战之商品配置管理模块接口开发",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tip",children:"本篇文章中所涉及的源码已经整理好并上传到百度云，地址和提取密码如下：\n链接: https://pan.baidu.com/s/1FFWQCu2qKVFiOAdKa-dysg \n提取码: u7fh\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"商城首页推荐商品模块介绍",children:["商城首页推荐商品模块介绍",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#商城首页推荐商品模块介绍",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"商城首页中还有三个版块需要渲染数据，分别是："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"热销商品"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"新品上线"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"推荐商品"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"在商城首页中的展示版面如下图所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:"截图 2021-04-25 17.20.50"})}),"\n",(0,t.jsx)(n.p,{children:"在商城首页中设计这三个版块，主要是为了丰富版面，使得页面不是那么单调。"}),"\n",(0,t.jsx)(n.p,{children:"当然，这部分的设计也参考了当前主流线上商城的商品推荐设计，不过这些线上商城都有大量的正式数据做支撑，做的肯定要比新蜂商城复杂的多。比如热销商品，一定是在大量实际订单的统计下做出来的数据渲染，又比如商品推荐，也一定是在用户的浏览痕迹和下单习惯上计算出来的。目前来说，新蜂商城的开发人员只有笔者一个人，订单也只有模拟数据，如果要做到淘宝、京东那种效果是不现实的，因此新蜂商城中的热销商品、新品上线、推荐商品这三个版块中的数据是在后台中配置的，首页渲染前直接读取数据就可以，这些数据并没有进行实时的数据统计。"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"注意：这三个模块也可以使用真实数据来实现，比如新品上线中的数据可以读取最新添加的几条商品数据，热销商品中的数据可以读取下单量最高的几条商品，这也是一种实现思路。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"新蜂商城中这三个版块中的内容是在后台进行配置的，页面显示效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:"image-20210424171752928"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"接下来会介绍这种方式的实现，主要是后台管理系统中，首页配置管理模块的接口开发。"})}),"\n",(0,t.jsxs)(n.h2,{id:"首页配置管理模块接口设计及实现",children:["首页配置管理模块接口设计及实现",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#首页配置管理模块接口设计及实现",children:"#"})]}),"\n",(0,t.jsxs)(n.h4,{id:"首页配置表结构设计",children:["首页配置表结构设计",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#首页配置表结构设计",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"通过商城首页中的展示内容可以得出几个主要的字段，首先是配置项的类别，其次是配置项中的商品属性，这里笔者设计了一个商品 id 字段，以此来建立配置项与商品的关系，在实现查询功能时，就可以先查出配置项的数据，之后根据配置项中的商品 id 字段去查找对应的商品，其它则是一些基础的功能字段，表结构如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"USE `newbee_mall_db_v2`;\n\nDROP TABLE IF EXISTS `tb_newbee_mall_index_config`;\nCREATE TABLE `tb_newbee_mall_index_config`  (\n  `config_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '首页配置项主键id',\n  `config_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '显示字符(配置搜索时不可为空，其他可为空)',\n  `config_type` tinyint(4) NOT NULL DEFAULT 0 COMMENT '1-搜索框热搜 2-搜索下拉框热搜 3-(首页)热销商品 4-(首页)新品上线 5-(首页)为你推荐',\n  `goods_id` bigint(20) NOT NULL DEFAULT 0 COMMENT '商品id 默认为0',\n  `redirect_url` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '##' COMMENT '点击后的跳转地址(默认不跳转)',\n  `config_rank` int(11) NOT NULL DEFAULT 0 COMMENT '排序值(字段越大越靠前)',\n  `is_deleted` tinyint(4) NOT NULL DEFAULT 0 COMMENT '删除标识字段(0-未删除 1-已删除)',\n  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `create_user` int(11) NOT NULL DEFAULT 0 COMMENT '创建者id',\n  `update_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '最新修改时间',\n  `update_user` int(11) NULL DEFAULT 0 COMMENT '修改者id',\n  PRIMARY KEY (`config_id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\n"})}),"\n",(0,t.jsx)(n.p,{children:"每个字段对应的含义都在上面的 SQL 中有介绍，读者们可以对照 SQL 进行理解，正确的把建表 SQL 导入到数据库中即可，接下来进行编码工作。"}),"\n",(0,t.jsxs)(n.h4,{id:"新建首页配置实体类和-mapper-接口",children:["新建首页配置实体类和 Mapper 接口",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#新建首页配置实体类和-mapper-接口",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"首先在 ltd.newbee.mall.entity 包中创建首页配置实体类，选中 entity 包并右击，在弹出的菜单中选择“New → Java Class”，在弹出的窗口中输入“IndexConfig”，最后在 IndexConfig 类中新增如下代码："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ltd.newbee.mall.entity;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport lombok.Data;\n\nimport java.util.Date;\n\n@Data\npublic class IndexConfig {\n    private Long configId;\n\n    private String configName;\n\n    private Byte configType;\n\n    private Long goodsId;\n\n    private String redirectUrl;\n\n    private Integer configRank;\n\n    private Byte isDeleted;\n\n    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")\n    private Date createTime;\n\n    private Integer createUser;\n\n    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")\n    private Date updateTime;\n\n    private Integer updateUser;\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"在 ltd.newbee.mall.dao 包中新建首页配置实体的 Mapper 接口，选中 dao 包并右击，在弹出的菜单中选择“New → Java Class”，在弹出的窗口中输入“IndexConfigMapper”，并选中“Interface”选项，之后在 IndexConfigMapper.java 文件中新增如下代码："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"package ltd.newbee.mall.dao;\n\nimport ltd.newbee.mall.entity.IndexConfig;\nimport ltd.newbee.mall.util.PageQueryUtil;\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.List;\n\npublic interface IndexConfigMapper {\n\n    /**\n     * 删除一条记录\n     * @param configId\n     * @return\n     */\n    int deleteByPrimaryKey(Long configId);\n\n    /**\n     * 保存一条新记录\n     * @param record\n     * @return\n     */\n    int insert(IndexConfig record);\n\n    /**\n     * 保存一条新记录\n     * @param record\n     * @return\n     */\n    int insertSelective(IndexConfig record);\n\n    /**\n     * 根据主键查询记录\n     * @param configId\n     * @return\n     */\n    IndexConfig selectByPrimaryKey(Long configId);\n\n    /**\n     * 修改记录\n     * @param record\n     * @return\n     */\n    int updateByPrimaryKeySelective(IndexConfig record);\n\n    /**\n     * 修改记录\n     * @param record\n     * @return\n     */\n    int updateByPrimaryKey(IndexConfig record);\n\n    /**\n     * 查询分页数据\n     * @param pageUtil\n     * @return\n     */\n    List<IndexConfig> findIndexConfigList(PageQueryUtil pageUtil);\n\n    /**\n     * 查询总数\n     * @param pageUtil\n     * @return\n     */\n    int getTotalIndexConfigs(PageQueryUtil pageUtil);\n\n    /**\n     * 批量删除\n     * @param ids\n     * @return\n     */\n    int deleteBatch(Long[] ids);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"定义了对于首页配置实体操作的数据层方法，包括查询、新增、修改和删除等操作。"}),"\n",(0,t.jsxs)(n.h4,{id:"创建-indexconfigmapper-接口的映射文件",children:["创建 IndexConfigMapper 接口的映射文件",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-indexconfigmapper-接口的映射文件",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在 resources/mapper 目录下新建 IndexConfigMapper 接口的映射文件 IndexConfigMapper.xml，之后进行映射文件的编写。"}),"\n",(0,t.jsx)(n.p,{children:"1.首先，定义映射文件与 Mapper 接口的对应关系，比如该示例中，需要将 IndexConfigMapper.xml 文件与对应的 IndexConfigMapper 接口之间的关系定义出来："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<mapper namespace="ltd.newbee.mall.dao.IndexConfigMapper">\n'})}),"\n",(0,t.jsx)(n.p,{children:"2.之后，配置表结构和实体类的对应关系："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<resultMap id="BaseResultMap" type="ltd.newbee.mall.entity.IndexConfig">\n  <id column="config_id" jdbcType="BIGINT" property="configId"/>\n  <result column="config_name" jdbcType="VARCHAR" property="configName"/>\n  <result column="config_type" jdbcType="TINYINT" property="configType"/>\n  <result column="goods_id" jdbcType="BIGINT" property="goodsId"/>\n  <result column="redirect_url" jdbcType="VARCHAR" property="redirectUrl"/>\n  <result column="config_rank" jdbcType="INTEGER" property="configRank"/>\n  <result column="is_deleted" jdbcType="TINYINT" property="isDeleted"/>\n  <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>\n  <result column="create_user" jdbcType="INTEGER" property="createUser"/>\n  <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>\n  <result column="update_user" jdbcType="INTEGER" property="updateUser"/>\n</resultMap>\n'})}),"\n",(0,t.jsx)(n.p,{children:"3.最后，按照对应的接口方法，编写具体的 SQL 语句，最终的 IndexConfigMapper.xml 文件如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="ltd.newbee.mall.dao.IndexConfigMapper">\n    <resultMap id="BaseResultMap" type="ltd.newbee.mall.entity.IndexConfig">\n        <id column="config_id" jdbcType="BIGINT" property="configId"/>\n        <result column="config_name" jdbcType="VARCHAR" property="configName"/>\n        <result column="config_type" jdbcType="TINYINT" property="configType"/>\n        <result column="goods_id" jdbcType="BIGINT" property="goodsId"/>\n        <result column="redirect_url" jdbcType="VARCHAR" property="redirectUrl"/>\n        <result column="config_rank" jdbcType="INTEGER" property="configRank"/>\n        <result column="is_deleted" jdbcType="TINYINT" property="isDeleted"/>\n        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>\n        <result column="create_user" jdbcType="INTEGER" property="createUser"/>\n        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>\n        <result column="update_user" jdbcType="INTEGER" property="updateUser"/>\n    </resultMap>\n    <sql id="Base_Column_List">\n    config_id, config_name, config_type, goods_id, redirect_url, config_rank, is_deleted, \n    create_time, create_user, update_time, update_user\n  </sql>\n\n    <select id="findIndexConfigList" parameterType="Map" resultMap="BaseResultMap">\n        select\n        <include refid="Base_Column_List"/>\n        from tb_newbee_mall_index_config\n        <where>\n            <if test="configType!=null and configType!=\'\'">\n                and config_type = #{configType}\n            </if>\n            and is_deleted = 0\n        </where>\n        order by config_rank desc\n        <if test="start!=null and limit!=null">\n            limit #{start},#{limit}\n        </if>\n    </select>\n    <select id="getTotalIndexConfigs" parameterType="Map" resultType="int">\n        select count(*) from tb_newbee_mall_index_config\n        <where>\n            <if test="configType!=null and configType!=\'\'">\n                and config_type = #{configType}\n            </if>\n            and is_deleted = 0\n        </where>\n    </select>\n\n    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">\n        select\n        <include refid="Base_Column_List"/>\n        from tb_newbee_mall_index_config\n        where config_id = #{configId,jdbcType=BIGINT} and is_deleted=0\n    </select>\n    <update id="deleteByPrimaryKey" parameterType="java.lang.Long">\n    update tb_newbee_mall_index_config set is_deleted=1\n    where config_id = #{configId,jdbcType=BIGINT} and is_deleted=0\n  </update>\n    <update id="deleteBatch">\n        update tb_newbee_mall_index_config\n        set is_deleted=1,update_time=now() where is_deleted=0 and config_id in\n        <foreach item="id" collection="array" open="(" separator="," close=")">\n            #{id}\n        </foreach>\n    </update>\n    <insert id="insert" parameterType="ltd.newbee.mall.entity.IndexConfig">\n    insert into tb_newbee_mall_index_config (config_id, config_name, config_type, \n      goods_id, redirect_url, config_rank, \n      is_deleted, create_time, create_user, \n      update_time, update_user)\n    values (#{configId,jdbcType=BIGINT}, #{configName,jdbcType=VARCHAR}, #{configType,jdbcType=TINYINT}, \n      #{goodsId,jdbcType=BIGINT}, #{redirectUrl,jdbcType=VARCHAR}, #{configRank,jdbcType=INTEGER}, \n      #{isDeleted,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=INTEGER}, \n      #{updateTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=INTEGER})\n  </insert>\n    <insert id="insertSelective" parameterType="ltd.newbee.mall.entity.IndexConfig">\n        insert into tb_newbee_mall_index_config\n        <trim prefix="(" suffix=")" suffixOverrides=",">\n            <if test="configId != null">\n                config_id,\n            </if>\n            <if test="configName != null">\n                config_name,\n            </if>\n            <if test="configType != null">\n                config_type,\n            </if>\n            <if test="goodsId != null">\n                goods_id,\n            </if>\n            <if test="redirectUrl != null">\n                redirect_url,\n            </if>\n            <if test="configRank != null">\n                config_rank,\n            </if>\n            <if test="isDeleted != null">\n                is_deleted,\n            </if>\n            <if test="createTime != null">\n                create_time,\n            </if>\n            <if test="createUser != null">\n                create_user,\n            </if>\n            <if test="updateTime != null">\n                update_time,\n            </if>\n            <if test="updateUser != null">\n                update_user,\n            </if>\n        </trim>\n        <trim prefix="values (" suffix=")" suffixOverrides=",">\n            <if test="configId != null">\n                #{configId,jdbcType=BIGINT},\n            </if>\n            <if test="configName != null">\n                #{configName,jdbcType=VARCHAR},\n            </if>\n            <if test="configType != null">\n                #{configType,jdbcType=TINYINT},\n            </if>\n            <if test="goodsId != null">\n                #{goodsId,jdbcType=BIGINT},\n            </if>\n            <if test="redirectUrl != null">\n                #{redirectUrl,jdbcType=VARCHAR},\n            </if>\n            <if test="configRank != null">\n                #{configRank,jdbcType=INTEGER},\n            </if>\n            <if test="isDeleted != null">\n                #{isDeleted,jdbcType=TINYINT},\n            </if>\n            <if test="createTime != null">\n                #{createTime,jdbcType=TIMESTAMP},\n            </if>\n            <if test="createUser != null">\n                #{createUser,jdbcType=INTEGER},\n            </if>\n            <if test="updateTime != null">\n                #{updateTime,jdbcType=TIMESTAMP},\n            </if>\n            <if test="updateUser != null">\n                #{updateUser,jdbcType=INTEGER},\n            </if>\n        </trim>\n    </insert>\n    <update id="updateByPrimaryKeySelective" parameterType="ltd.newbee.mall.entity.IndexConfig">\n        update tb_newbee_mall_index_config\n        <set>\n            <if test="configName != null">\n                config_name = #{configName,jdbcType=VARCHAR},\n            </if>\n            <if test="configType != null">\n                config_type = #{configType,jdbcType=TINYINT},\n            </if>\n            <if test="goodsId != null">\n                goods_id = #{goodsId,jdbcType=BIGINT},\n            </if>\n            <if test="redirectUrl != null">\n                redirect_url = #{redirectUrl,jdbcType=VARCHAR},\n            </if>\n            <if test="configRank != null">\n                config_rank = #{configRank,jdbcType=INTEGER},\n            </if>\n            <if test="isDeleted != null">\n                is_deleted = #{isDeleted,jdbcType=TINYINT},\n            </if>\n            <if test="createTime != null">\n                create_time = #{createTime,jdbcType=TIMESTAMP},\n            </if>\n            <if test="createUser != null">\n                create_user = #{createUser,jdbcType=INTEGER},\n            </if>\n            <if test="updateTime != null">\n                update_time = #{updateTime,jdbcType=TIMESTAMP},\n            </if>\n            <if test="updateUser != null">\n                update_user = #{updateUser,jdbcType=INTEGER},\n            </if>\n        </set>\n        where config_id = #{configId,jdbcType=BIGINT}\n    </update>\n    <update id="updateByPrimaryKey" parameterType="ltd.newbee.mall.entity.IndexConfig">\n    update tb_newbee_mall_index_config\n    set config_name = #{configName,jdbcType=VARCHAR},\n      config_type = #{configType,jdbcType=TINYINT},\n      goods_id = #{goodsId,jdbcType=BIGINT},\n      redirect_url = #{redirectUrl,jdbcType=VARCHAR},\n      config_rank = #{configRank,jdbcType=INTEGER},\n      is_deleted = #{isDeleted,jdbcType=TINYINT},\n      create_time = #{createTime,jdbcType=TIMESTAMP},\n      create_user = #{createUser,jdbcType=INTEGER},\n      update_time = #{updateTime,jdbcType=TIMESTAMP},\n      update_user = #{updateUser,jdbcType=INTEGER}\n    where config_id = #{configId,jdbcType=BIGINT}\n  </update>\n</mapper>\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"业务层代码实现",children:["业务层代码实现",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#业务层代码实现",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在 ltd.newbee.mall.service 包中新建业务处理类，选中 service 包并右击，在弹出的菜单中选择“New → Java Class”，在弹出的窗口中输入“NewBeeMallIndexConfigService”，并选中“Interface”选项。"}),"\n",(0,t.jsx)(n.p,{children:"最后在 NewBeeMallIndexConfigService.java 文件中新增如下代码："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"package ltd.newbee.mall.service;\n\nimport ltd.newbee.mall.controller.vo.NewBeeMallIndexConfigGoodsVO;\nimport ltd.newbee.mall.entity.IndexConfig;\nimport ltd.newbee.mall.util.PageQueryUtil;\nimport ltd.newbee.mall.util.PageResult;\n\nimport java.util.List;\n\npublic interface NewBeeMallIndexConfigService {\n    \n    /**\n     * 查询后台管理系统首页配置分页数据\n     *\n     * @param pageUtil\n     * @return\n     */\n    PageResult getConfigsPage(PageQueryUtil pageUtil);\n\n    /**\n     * 新增一条首页配置记录\n     *\n     * @param indexConfig\n     * @return\n     */\n    String saveIndexConfig(IndexConfig indexConfig);\n\n    /**\n     * 修改一条首页配置记录\n     *\n     * @param indexConfig\n     * @return\n     */\n    String updateIndexConfig(IndexConfig indexConfig);\n\n    /**\n     * 批量删除\n     *\n     * @param ids\n     * @return\n     */\n    Boolean deleteBatch(Long[] ids);\n\n    /**\n     * 根据id查询详情\n     *\n     * @param id\n     * @return\n     */\n    IndexConfig getIndexConfigById(Long id);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"首页配置模块的业务层方法定义以及每个方法的作用都已经编写完成。"}),"\n",(0,t.jsx)(n.p,{children:"然后在 ltd.newbee.mall.service.impl 包中新建 NewBeeMallIndexConfigService 的实现类，选中 impl 包并右击，在弹出的菜单中选择“New → Java Class”，在弹出的窗口中输入“NewBeeMallIndexConfigServiceImpl”，最后在 NewBeeMallIndexConfigServiceImpl 类中新增如下代码："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"package ltd.newbee.mall.service.impl;\n\nimport ltd.newbee.mall.common.ServiceResultEnum;\nimport ltd.newbee.mall.dao.IndexConfigMapper;\nimport ltd.newbee.mall.entity.IndexConfig;\nimport ltd.newbee.mall.service.NewBeeMallIndexConfigService;\nimport ltd.newbee.mall.util.PageQueryUtil;\nimport ltd.newbee.mall.util.PageResult;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class NewBeeMallIndexConfigServiceImpl implements NewBeeMallIndexConfigService {\n\n    @Autowired\n    private IndexConfigMapper indexConfigMapper;\n\n    @Override\n    public PageResult getConfigsPage(PageQueryUtil pageUtil) {\n        List<IndexConfig> indexConfigs = indexConfigMapper.findIndexConfigList(pageUtil);\n        int total = indexConfigMapper.getTotalIndexConfigs(pageUtil);\n        PageResult pageResult = new PageResult(indexConfigs, total, pageUtil.getLimit(), pageUtil.getPage());\n        return pageResult;\n    }\n\n    @Override\n    public String saveIndexConfig(IndexConfig indexConfig) {\n        if (indexConfigMapper.insertSelective(indexConfig) > 0) {\n            return ServiceResultEnum.SUCCESS.getResult();\n        }\n        return ServiceResultEnum.DB_ERROR.getResult();\n    }\n\n    @Override\n    public String updateIndexConfig(IndexConfig indexConfig) {\n        IndexConfig temp = indexConfigMapper.selectByPrimaryKey(indexConfig.getConfigId());\n        if (temp == null) {\n            return ServiceResultEnum.DATA_NOT_EXIST.getResult();\n        }\n        if (indexConfigMapper.updateByPrimaryKeySelective(indexConfig) > 0) {\n            return ServiceResultEnum.SUCCESS.getResult();\n        }\n        return ServiceResultEnum.DB_ERROR.getResult();\n    }\n\n    @Override\n    public IndexConfig getIndexConfigById(Long id) {\n        return indexConfigMapper.selectByPrimaryKey(id);\n    }\n\n    @Override\n    public Boolean deleteBatch(Long[] ids) {\n        if (ids.length < 1) {\n            return false;\n        }\n        //删除数据\n        return indexConfigMapper.deleteBatch(ids) > 0;\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"首页管理模块控制层代码实现",children:["首页管理模块控制层代码实现",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#首页管理模块控制层代码实现",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在 ltd.newbee.mall.api.admin 包中新建 NewBeeAdminIndexConfigAPI 类，在 NewBeeAdminIndexConfigAPI 控制器中新增相关接口的实现代码，最终 NewBeeAdminIndexConfigAPI 类的代码如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ltd.newbee.mall.api.admin;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiParam;\nimport ltd.newbee.mall.api.admin.param.BatchIdParam;\nimport ltd.newbee.mall.api.admin.param.IndexConfigAddParam;\nimport ltd.newbee.mall.api.admin.param.IndexConfigEditParam;\nimport ltd.newbee.mall.common.IndexConfigTypeEnum;\nimport ltd.newbee.mall.common.ServiceResultEnum;\nimport ltd.newbee.mall.config.annotation.TokenToAdminUser;\nimport ltd.newbee.mall.entity.AdminUserToken;\nimport ltd.newbee.mall.entity.IndexConfig;\nimport ltd.newbee.mall.service.NewBeeMallIndexConfigService;\nimport ltd.newbee.mall.util.BeanUtil;\nimport ltd.newbee.mall.util.PageQueryUtil;\nimport ltd.newbee.mall.util.Result;\nimport ltd.newbee.mall.util.ResultGenerator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport javax.validation.Valid;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author 13\n * @qq交流群 796794009\n * @email 2449207463@qq.com\n * @link https://github.com/newbee-ltd\n */\n@RestController\n@Api(value = "v1", tags = "8-4.后台管理系统首页配置模块接口")\n@RequestMapping("/manage-api/v1")\npublic class NewBeeAdminIndexConfigAPI {\n\n    private static final Logger logger = LoggerFactory.getLogger(NewBeeAdminIndexConfigAPI.class);\n\n    @Resource\n    private NewBeeMallIndexConfigService newBeeMallIndexConfigService;\n\n    /**\n     * 列表\n     */\n    @RequestMapping(value = "/indexConfigs", method = RequestMethod.GET)\n    @ApiOperation(value = "首页配置列表", notes = "首页配置列表")\n    public Result list(@RequestParam(required = false) @ApiParam(value = "页码") Integer pageNumber,\n                       @RequestParam(required = false) @ApiParam(value = "每页条数") Integer pageSize,\n                       @RequestParam(required = false) @ApiParam(value = "1-搜索框热搜 2-搜索下拉框热搜 3-(首页)热销商品 4-(首页)新品上线 5-(首页)为你推荐") Integer configType, @TokenToAdminUser AdminUserToken adminUser) {\n        logger.info("adminUser:{}", adminUser.toString());\n        if (pageNumber == null || pageNumber < 1 || pageSize == null || pageSize < 10) {\n            return ResultGenerator.genFailResult("分页参数异常！");\n        }\n        IndexConfigTypeEnum indexConfigTypeEnum = IndexConfigTypeEnum.getIndexConfigTypeEnumByType(configType);\n        if (indexConfigTypeEnum.equals(IndexConfigTypeEnum.DEFAULT)) {\n            return ResultGenerator.genFailResult("非法参数！");\n        }\n        Map params = new HashMap(8);\n        params.put("page", pageNumber);\n        params.put("limit", pageSize);\n        params.put("configType", configType);\n        PageQueryUtil pageUtil = new PageQueryUtil(params);\n        return ResultGenerator.genSuccessResult(newBeeMallIndexConfigService.getConfigsPage(pageUtil));\n    }\n\n    /**\n     * 添加\n     */\n    @RequestMapping(value = "/indexConfigs", method = RequestMethod.POST)\n    @ApiOperation(value = "新增首页配置项", notes = "新增首页配置项")\n    public Result save(@RequestBody @Valid IndexConfigAddParam indexConfigAddParam, @TokenToAdminUser AdminUserToken adminUser) {\n        logger.info("adminUser:{}", adminUser.toString());\n        IndexConfig indexConfig = new IndexConfig();\n        BeanUtil.copyProperties(indexConfigAddParam, indexConfig);\n        String result = newBeeMallIndexConfigService.saveIndexConfig(indexConfig);\n        if (ServiceResultEnum.SUCCESS.getResult().equals(result)) {\n            return ResultGenerator.genSuccessResult();\n        } else {\n            return ResultGenerator.genFailResult(result);\n        }\n    }\n\n\n    /**\n     * 修改\n     */\n    @RequestMapping(value = "/indexConfigs", method = RequestMethod.PUT)\n    @ApiOperation(value = "修改首页配置项", notes = "修改首页配置项")\n    public Result update(@RequestBody @Valid IndexConfigEditParam indexConfigEditParam, @TokenToAdminUser AdminUserToken adminUser) {\n        logger.info("adminUser:{}", adminUser.toString());\n        IndexConfig indexConfig = new IndexConfig();\n        BeanUtil.copyProperties(indexConfigEditParam, indexConfig);\n        String result = newBeeMallIndexConfigService.updateIndexConfig(indexConfig);\n        if (ServiceResultEnum.SUCCESS.getResult().equals(result)) {\n            return ResultGenerator.genSuccessResult();\n        } else {\n            return ResultGenerator.genFailResult(result);\n        }\n    }\n\n    /**\n     * 详情\n     */\n    @RequestMapping(value = "/indexConfigs/{id}", method = RequestMethod.GET)\n    @ApiOperation(value = "获取单条首页配置项信息", notes = "根据id查询")\n    public Result info(@PathVariable("id") Long id, @TokenToAdminUser AdminUserToken adminUser) {\n        logger.info("adminUser:{}", adminUser.toString());\n        IndexConfig config = newBeeMallIndexConfigService.getIndexConfigById(id);\n        if (config == null) {\n            return ResultGenerator.genFailResult("未查询到数据");\n        }\n        return ResultGenerator.genSuccessResult(config);\n    }\n\n    /**\n     * 删除\n     */\n    @RequestMapping(value = "/indexConfigs", method = RequestMethod.DELETE)\n    @ApiOperation(value = "批量首页配置项信息", notes = "批量首页配置项信息")\n    public Result delete(@RequestBody BatchIdParam batchIdParam, @TokenToAdminUser AdminUserToken adminUser) {\n        logger.info("adminUser:{}", adminUser.toString());\n        if (batchIdParam == null || batchIdParam.getIds().length < 1) {\n            return ResultGenerator.genFailResult("参数异常！");\n        }\n        if (newBeeMallIndexConfigService.deleteBatch(batchIdParam.getIds())) {\n            return ResultGenerator.genSuccessResult();\n        } else {\n            return ResultGenerator.genFailResult("删除失败");\n        }\n    }\n\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"1.列表接口负责接收前端传来的分页参数，如 pageNumber、pageSize 等参数，另外一个重要的参数就是 configType，通过这个参数就能够区分不同类型的首页配置项，之后将数据总数和对应页面的数据列表查询出来并封装为分页数据返回给前端。实际的查询 SQL 语句在 IndexConfigMapper.xml 文件中，除了分页参数的过滤外，也针对 config_type 字段进行了过滤，前端请求的 configType 参数不同，执行的 SQL 也会去对应的查询该类型的分页记录，获取响应条数的记录和总数之后再进行数据封装，这个接口就是根据前端传的分页参数进行查询并返回分页数据以供前端页面进行数据渲染。"}),"\n",(0,t.jsx)(n.p,{children:"2.添加接口负责接收前端的 POST 请求并处理其中的参数，接收的参数为 configName 字段、configType字段和 redirectUrl 字段、goodsId 字段和 configRank 字段，在这个方法里使用 @RequestBody 注解将其转换为 IndexConfigAddParam 参数对象，并使用 @Valid 注解标注以便对参数进行基本的验证。需要注意的一点是，在这个方法中并不会存储和设置任何关于商品表的其他字段，也不会对商品表进行操作，只是设置了 goods_id 字段将配置项和对应的商品记录之间的关联关系存储下来。"}),"\n",(0,t.jsx)(n.p,{children:"3.删除接口负责接收前端的配置项删除请求，处理前端传输过来的数据后，将这些记录从数据库中删除，这里的“删除”功能并不是真正意义上的删除，而是逻辑删除。将接收的参数设置为一个数组，可以同时删除多条记录，只需要在前端将用户选择的记录 id 封装好再传参到后端即可，接口的请求路径为 /manage-api/v1/indexConfigs，方法为 DELETE，并使用 @RequestBody 将前端传过来的参数封装为数组对象，如果数组为空则直接返回异常提醒，参数验证通过后则调用 deleteBatch() 批量删除方法进行数据库操作。"}),"\n",(0,t.jsxs)(n.h2,{id:"首页配置管理模块接口测试",children:["首页配置管理模块接口测试",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#首页配置管理模块接口测试",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"最后，我们通过 Swagger 页面来测试一下这些接口。"}),"\n",(0,t.jsx)(n.p,{children:"重启项目，打开 swagger-ui 页面："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:"image-20210424155338344"})}),"\n",(0,t.jsx)(n.p,{children:"由于这些接口都需要登录后才能访问，首先我们访问登录接口，拿到一个可以正常进行身份认证的 token 字符串，如下图所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:"image-20210407170852871"})}),"\n",(0,t.jsx)(n.p,{children:"最终获取到一个 token 字符串，值为“ce01a7e885e55a38fdfd09c902c551a3”。"}),"\n",(0,t.jsx)(n.p,{children:"1.列表接口"}),"\n",(0,t.jsx)(n.p,{children:"点开“首页配置列表”，在 token 输入框中填入登录接口返回的 token 值并输入分页所需的 pageNumber 、 pageSize 和 configType 参数，这些是必传参数，之后点击”Execute“按钮："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:"image-20210424172944530"})}),"\n",(0,t.jsx)(n.p,{children:"首页配置列表测试数据如下，如下图所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:"image-20210424173009386"})}),"\n",(0,t.jsx)(n.p,{children:"大家可以自行调整查询参数，来更好的测试分页列表接口。"}),"\n",(0,t.jsx)(n.p,{children:"2.新增接口："}),"\n",(0,t.jsx)(n.p,{children:"点开“新增首页配置项”，在 token 输入框中填入登录接口返回的 token 值并输入新增商品接口中的必填参数，分别输入配置项名称、配置类别、商品 id、排序值字段，最后点击”Execute“按钮，得到如下返回结果："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:"image-20210424173242934"})}),"\n",(0,t.jsx)(n.p,{children:"添加成功后可以看到列表中多了一条数据。"}),"\n",(0,t.jsx)(n.p,{children:"以上是正常情况，如果 token 不正确或者请求的参数不规范也会得到对应的错误提示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:"image-20210424173318497"})}),"\n",(0,t.jsx)(n.p,{children:"“首页配置项修改接口”与“新增首页配置项接口”测试步骤类似，这里就省略了，大家可以自行测试。"}),"\n",(0,t.jsx)(n.p,{children:"3.详情接口："}),"\n",(0,t.jsx)(n.p,{children:"点开“获取单条首页配置项信息”，在 token 输入框中填入登录接口返回的 token 值和配置项的 id，之后点击”Execute“按钮，即可得到配置项的详情数据，如下图所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:"image-20210424173447138"})}),"\n",(0,t.jsx)(n.p,{children:"而如果传入的 id 未查询到数据，会得到如下返回结果："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:"image-20210424173518763"})}),"\n",(0,t.jsx)(n.p,{children:"4.删除接口："}),"\n",(0,t.jsx)(n.p,{children:"最后是删除接口的测试，点开“批量删除首页配置项信息”，在 token 输入框中填入登录接口返回的 token 值和需要删除的配置项 id 数组，比如这里我想要删除 id 是 39 和 40 的两条数据，之后点击”Execute“按钮，即可完成删除步骤，如下图所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:"image-20210424173658710"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"注意数组中的逗号为英文逗号，如果不小心输入了中文符号会报错的。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"如果此时再去查询这两条数据，无论是列表接口还是详情接口都不存在 id 为 39 和 40 的配置项数据，功能测试完成。"}),"\n",(0,t.jsx)(n.p,{children:"读者们可以按照文中的思路和过程自行测试，首页配置项管理模块的接口开发完成！"})]})}function x(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(T,{...e})}):T(e)}let I=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F28.API%20%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E4%B9%8B%E5%95%86%E5%93%81%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91.md"]={toc:[{text:"商城首页推荐商品模块介绍",id:"商城首页推荐商品模块介绍",depth:2},{text:"首页配置管理模块接口设计及实现",id:"首页配置管理模块接口设计及实现",depth:2},{text:"首页配置表结构设计",id:"首页配置表结构设计",depth:4},{text:"新建首页配置实体类和 Mapper 接口",id:"新建首页配置实体类和-mapper-接口",depth:4},{text:"创建 IndexConfigMapper 接口的映射文件",id:"创建-indexconfigmapper-接口的映射文件",depth:4},{text:"业务层代码实现",id:"业务层代码实现",depth:4},{text:"首页管理模块控制层代码实现",id:"首页管理模块控制层代码实现",depth:4},{text:"首页配置管理模块接口测试",id:"首页配置管理模块接口测试",depth:2}],title:"28.API 接口开发实战之商品配置管理模块接口开发",headingTitle:"28.API 接口开发实战之商品配置管理模块接口开发",frontmatter:{}}}}]);