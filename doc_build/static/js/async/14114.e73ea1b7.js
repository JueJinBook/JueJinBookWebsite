"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["14114"],{821548:function(n,e,s){n.exports=s.p+"static/image/c59ffea76ccbff5cb7b305d3ff0baaf1.86ea84c3.webp"},189912:function(n,e,s){n.exports=s.p+"static/image/c69e7e6253a5c8ba4175e88a30a6f63b.251aaba6.webp"},534404:function(n,e,s){n.exports=s.p+"static/image/c8d394b151bb664295c8a4b03eccc1f5.2f76961c.webp"},196454:function(n,e,s){n.exports=s.p+"static/image/cc0cd0111d5090efe200a0cc230d3b12.ef6f1691.webp"},536330:function(n,e,s){s.r(e),s.d(e,{default:()=>C});var i=s(552676),a=s(740453);let t=s.p+"static/image/3d2cf0b7577a08ea1cf7d4bf41fb5864.c50d232f.webp",d=s.p+"static/image/813119abffa893173f2f9ddffc910821.e5475251.webp",c=s.p+"static/image/1fe54e8df6b51005bdf09a303294f76e.498cf393.webp",o=s.p+"static/image/91dee195ce3e9788992fc03a4f987bb1.7bc24d95.webp",r=s.p+"static/image/973e777b75688e8764713b28981b4773.1f4f6b0a.webp",l=s.p+"static/image/f9d845fd7b662cbfe7a371b22e113577.e2914d5e.webp",p=s.p+"static/image/5756d556905e10544b8f09f3bdbdbeae.8043b713.webp";var g=s(189912),x=s(196454),h=s(821548);let m=s.p+"static/image/41d7800b5970276cbd7a409792d2d25e.0aa94524.webp";var u=s(534404);let j=s.p+"static/image/45f94ac0416c5f2e10df9c7020d2f8bb.c2761da8.webp",f=s.p+"static/image/a81fb07e84e57352f4e970e00b75fc74.89e43899.webp",b=s.p+"static/image/9e8802681541b8b1ff7d97f9091442c7.6cb6adbc.gif",w=s.p+"static/image/a05eafb355ed09edbbfb299557f1fa75.58555e82.webp",N=s.p+"static/image/d6f1c33ad1de0dee1c03e042098a71ad.5ac46c4b.webp",v=s.p+"static/image/3443501fe665f3092268d99964314e53.71d62577.webp";function y(n){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,a.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"第82章reactflow振荡器调音流程图绘制",children:["第82章—ReactFlow振荡器调音：流程图绘制",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第82章reactflow振荡器调音流程图绘制",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"\uFEFF这节我们来画下流程图。"}),"\n",(0,i.jsx)(e.p,{children:"创建个项目："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx create-vite audio-flow\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"进入项目，安装下 reactflow"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm install\nnpm install --save @xyflow/react\n"})}),"\n",(0,i.jsx)(e.p,{children:"去掉 index.css"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:N,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"然后改下 App.tsx"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { addEdge, Background, BackgroundVariant, Connection, Controls, MiniMap, OnConnect, ReactFlow, useEdgesState, useNodesState } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\n \nconst initialNodes = [\n  { id: '1', position: { x: 0, y: 0 }, data: { label: '1' } },\n  { id: '2', position: { x: 0, y: 100 }, data: { label: '2' } },\n];\nconst initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];\n \nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n \n  const onConnect = (params: Connection) => {\n    setEdges((eds) => addEdge(params, eds))\n  }\n\n  return (\n    <div style={{ width: '100vw', height: '100vh'}}>\n      <ReactFlow \n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n      >\n        <Controls/>\n        <MiniMap/>\n        <Background variant={BackgroundVariant.Lines}/>\n      </ReactFlow>\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"我们写了下基础代码，加了两个 node，一个 edge，然后加了 Controles、Background、MiniMap 组件。"}),"\n",(0,i.jsx)(e.p,{children:"跑起来看一下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm run dev\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:w,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:b,alt:"2024-08-29 14.42.48.gif"})}),"\n",(0,i.jsx)(e.p,{children:"没啥问题，只是流程图不在正中央。"}),"\n",(0,i.jsx)(e.p,{children:"加个 fitView 就好了："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"接下来分别实现这三种自定义节点："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"我们用 tailwind 来写样式。"}),"\n",(0,i.jsxs)(e.p,{children:["按照 ",(0,i.jsx)(e.a,{href:"https://www.tailwindcss.cn/docs/guides/vite#react",target:"_blank",rel:"noopener noreferrer",children:"tailwind 文档"}),"里的步骤安装 tailwind："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"npm install -D tailwindcss postcss autoprefixer\n\nnpx tailwindcss init -p\n"})}),"\n",(0,i.jsx)(e.p,{children:"会生成 tailwind 和 postcss 配置文件："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"修改下 content 配置，也就是从哪里提取 className："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'/** @type {import(\'tailwindcss\').Config} */\nexport default {\n  content: [\n    "./index.html",\n    "./src/**/*.{js,ts,jsx,tsx}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"tailwind 会提取 className 之后按需生成最终的 css。"}),"\n",(0,i.jsx)(e.p,{children:"改下 index.css 引入 tailwind 基础样式："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"})}),"\n",(0,i.jsx)(e.p,{children:"在 main.tsx 里引入："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"如果你没安装 tailwind 插件，需要安装一下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"这样在写代码的时候就会提示 className 和对应的样式值："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsxs)(e.p,{children:["不知道 className 叫啥的样式，还可以在 ",(0,i.jsx)(e.a,{href:"https://www.tailwindcss.cn/docs/border-width",target:"_blank",rel:"noopener noreferrer",children:"tailwind 文档"}),"里搜："]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"接下来创建振荡器的自定义节点："}),"\n",(0,i.jsx)(e.p,{children:"components/OscillatorNode.tsx"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'import { Handle, Position } from \'@xyflow/react\';\n\nexport interface OscillatorNodeProps {\n  id: string\n  data: {\n    frequency: number\n    type: string\n  }\n}\n\nexport function OscillatorNode({ id, data }: OscillatorNodeProps) {\n    return (\n      <div className={\'bg-white shadow-xl\'}>\n          <p className={\'rounded-t-md p-[8px] bg-pink-500 text-white\'}>振荡器节点</p>\n          <div className={\'flex flex-col p-[8px]\'}>\n            <span>频率</span>\n            <input\n                type="range"\n                min="10"\n                max="1000"\n                value={data.frequency}\n            />\n            <span className={\'text-right\'}>{data.frequency}赫兹</span>\n          </div>\n          <hr className={\'mx-[4px]\'} />\n          <div className={\'flex flex-col p-[8px]\'}>\n            <p>波形</p>\n            <select value={data.type}>\n              <option value="sine">正弦波</option>\n              <option value="triangle">三角波</option>\n              <option value="sawtooth">锯齿波</option>\n              <option value="square">方波</option>\n            </select>\n          </div>\n          <Handle type="source" position={Position.Bottom} />\n      </div>\n    );\n};\n'})}),"\n",(0,i.jsx)(e.p,{children:"就是一个标题，一个 input，一个 select，用 tailwind 写下样式。"}),"\n",(0,i.jsx)(e.p,{children:"可以通过 data 传入 frequency、type"}),"\n",(0,i.jsx)(e.p,{children:"用一下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { addEdge, Background, BackgroundVariant, Connection, Controls, MiniMap, OnConnect, ReactFlow, useEdgesState, useNodesState } from '@xyflow/react';\nimport '@xyflow/react/dist/style.css';\nimport { OscillatorNode } from './components/OscillatorNode';\n \nconst initialNodes = [\n  { id: '1', position: { x: 0, y: 0 }, data: { frequency: 300, type: 'square' }, type: 'osc' },\n  { id: '2', position: { x: 0, y: 300 }, data: { label: '2' } },\n];\nconst initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];\n\nconst nodeTypes = {\n  'osc': OscillatorNode\n}\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n \n  const onConnect = (params: Connection) => {\n    setEdges((eds) => addEdge(params, eds))\n  }\n\n  return (\n    <div style={{ width: '100vw', height: '100vh'}}>\n      <ReactFlow \n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        fitView\n      >\n        <Controls/>\n        <MiniMap/>\n        <Background variant={BackgroundVariant.Lines}/>\n      </ReactFlow>\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["看下效果：\n",(0,i.jsx)("img",{src:l,alt:"image.png"})]}),"\n",(0,i.jsx)(e.p,{children:"可以看到，节点替换为了我们自定义的节点，并且根据传入的 data 做了表单回显。"}),"\n",(0,i.jsx)(e.p,{children:"接下来写下第二种自定义节点："}),"\n",(0,i.jsx)(e.p,{children:"components/VolumeNode.tsx"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'import { Handle, Position } from \'@xyflow/react\';\n\nexport interface VolumeNodeProps {\n  id: string\n  data: {\n    gain: number\n  }\n}\n\nexport function VolumeNode({ id, data }: VolumeNodeProps) {\n    return (\n        <div className={\'rounded-md bg-white shadow-xl\'}>\n            <Handle type="target" position={Position.Top} />\n\n            <p className={\'rounded-t-md p-[4px] bg-blue-500 text-white\'}>音量节点</p>\n            <div className={\'flex flex-col p-[4px]\'}>\n                <p>Gain</p>\n                <input\n                    type="range"\n                    min="0"\n                    max="1"\n                    step="0.01"\n                    value={data.gain}\n                />\n                <p className={\'text-right\'}>{data.gain.toFixed(2)}</p>\n            </div>\n\n            <Handle type="source" position={Position.Bottom} />\n        </div>\n    );\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"主要是上下两个 Handle、中间一个 input。"}),"\n",(0,i.jsx)(e.p,{children:"用一下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const initialNodes = [\n  { id: '1', position: { x: 0, y: 0 }, data: { frequency: 300, type: 'square' }, type: 'osc' },\n  { id: '2', position: { x: 0, y: 300 }, data: { gain: 0.6 }, type: 'volume' },\n];\nconst initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];\n\nconst nodeTypes = {\n  'osc': OscillatorNode,\n  'volume': VolumeNode\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"看下效果："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"可以看到，音量节点也渲染出来了。"}),"\n",(0,i.jsx)(e.p,{children:"然后来写最后一个节点：输出节点"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"components/OutputNode.tsx"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { Handle, Position } from '@xyflow/react';\nimport { useState } from 'react';\n\nexport function OutputNode() {\n    const [isRunning, setIsRuning] = useState(false);\n\n    function toggleAudio() {\n        setIsRuning(isRunning => !isRunning)\n    }\n\n    return <div className={'bg-white shadow-xl p-[20px]'}>\n        <Handle type=\"target\" position={Position.Top} />\n\n        <div>\n            <p>输出节点</p>\n            <button onClick={toggleAudio}>\n                {isRunning ? (\n                    <span role=\"img\">\n                    \uD83D\uDD08\n                    </span>\n                ) : (\n                    <span role=\"img\">\n                    \uD83D\uDD07\n                    </span>\n                )}\n            </button>\n        </div>\n    </div>\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"用一下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"加一个节点类型，然后加一个节点、一条边。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const initialNodes = [\n  { id: '1', position: { x: 0, y: 0 }, data: { frequency: 300, type: 'square' }, type: 'osc' },\n  { id: '2', position: { x: 0, y: 300 }, data: { gain: 0.6 }, type: 'volume' },\n  { id: '3', position: { x: 0, y: 500 }, data: { }, type: 'out' },\n];\nconst initialEdges = [\n  { id: 'e1-2', source: '1', target: '2' },\n  { id: 'e2-3', source: '2', target: '3' },\n];\n\nconst nodeTypes = {\n  'osc': OscillatorNode,\n  'volume': VolumeNode,\n  'out': OutputNode\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"看下效果："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,i.jsx)(e.p,{children:"这样，三种自定义节点就都画出来了。"}),"\n",(0,i.jsxs)(e.p,{children:["案例代码上传了",(0,i.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/audio-flow",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,i.jsxs)(e.h2,{id:"总结",children:["总结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"我们创建了 vite 项目，引入了 tailwind 来写样式。"}),"\n",(0,i.jsx)(e.p,{children:"然后实现了流程图的绘制，主要是三种自定义节点的绘制："}),"\n",(0,i.jsx)(e.p,{children:"振荡器节点、音量节点、输出节点。"}),"\n",(0,i.jsx)(e.p,{children:"流程图画完了，下节来开发音频部分的功能。"})]})}function E(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(y,{...n})}):y(n)}let C=E;E.__RSPRESS_PAGE_META={},E.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC82%E7%AB%A0%E2%80%94ReactFlow%E6%8C%AF%E8%8D%A1%E5%99%A8%E8%B0%83%E9%9F%B3%EF%BC%9A%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%BB%98%E5%88%B6.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第82章—ReactFlow振荡器调音：流程图绘制",headingTitle:"第82章—ReactFlow振荡器调音：流程图绘制",frontmatter:{}}}}]);