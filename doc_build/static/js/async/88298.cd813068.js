"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["88298"],{374964:function(e,n,r){r.r(n),r.d(n,{default:()=>s});var d=r(552676),t=r(740453);function o(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",img:"img",h3:"h3",strong:"strong"},(0,t.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"第-15-节-复杂数据图表--树形图",children:["第 15 节 复杂数据图表 \xb7 树形图",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第-15-节-复杂数据图表--树形图",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"翻过了关系图谱这座小山丘之后，让我们继续回忆一下我们在前面就提到过的一种特殊的关系图谱——树形。树形结构有着非常明确的上下级关系，可以非常直观地表达出事物的因果关系，且其规则复杂却足够灵活，因而能够很好地使用在各种算法和场景中。"}),"\n",(0,d.jsx)(n.p,{children:"使用 ECharts 来对树形结构进行可视化，可以为这种强大的数据结构加上更强的交互性，能让你的用户更好地梳理和理解树形结构中所承载的内容。"}),"\n",(0,d.jsxs)(n.h2,{id:"151-准备数据",children:["15.1 准备数据",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#151-准备数据",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"在第 7 节中我们介绍了如何利用树形结构及其相关的运算算法来对一系列关系数据进行处理，而本章节我们将要使用 ECharts 进行具有可交互特性的图表可视化。"}),"\n",(0,d.jsx)(n.p,{children:"和在上一节中的关系图谱中所使用的数据集类似，由于 ECharts 对数据集进行应用之前都需要先进行一系列的预处理，而这过程中很有可能会与我们所实现的类中的某些属性或方法相冲突。"}),"\n",(0,d.jsx)(n.p,{children:"所以我们需要准备一个转换函数，将我们第 7 节中所生成的树形结构数据转换为更纯粹的 JavaScript 对象数据，也就是俗称的 JSON 数据。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"const root = new Node('root')\nconst node1 = new Node('node 1')\nconst node2 = new Node('node 2')\nconst node3 = new Node('node 3')\nconst node4 = new Node('node 4')\nconst node5 = new Node('node 5')\nconst node6 = new Node('node 6')\n\nconst tree = new Tree(root)\ntree.addNode(node1)\ntree.addNode(node2)\ntree.addNode(node3, node1)\ntree.addNode(node4, node1)\ntree.addNode(node5, node2)\ntree.addNode(node6, node5)\n\nfunction treeDataHelper(treeNode) {\n  const node = {\n    value: treeNode.value\n  }\n\n  if (treeNode.children && treeNode.children.length > 0) {\n    node.children = node.children || []\n\n    treeNode.children.forEach(function(childNode) {\n      node.children.push(treeDataHelper(childNode))\n    })\n  }\n\n  return node\n}\n\nconst pureRoot = treeDataHelper(tree.root)\n\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"152-编写配置",children:["15.2 编写配置",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#152-编写配置",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"ECharts 在这种较为复杂的数据图表中有着非常优秀的封装，它可以帮助我们很快地将复杂的数据结构根据图表配置展示出我们所希望看到的可视化图表，这一特点在树形图中尤为明显。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"const option = {\n  series: {\n    type: 'tree',\n    data: [ pureRoot ]\n  }\n}\n\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/9/22/16600db1765073ff?w=600&h=400&f=png&s=12604",alt:"tree-chart-1"})}),"\n",(0,d.jsxs)(n.p,{children:["Live DEMO: ",(0,d.jsx)(n.a,{href:"https://codepen.io/iwillwen/pen/zJXBEV",target:"_blank",rel:"noopener noreferrer",children:(0,d.jsx)(n.a,{href:"https://codepen.io/iwillwen/pen/zJXBEV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/iwillwen/pen/zJXBEV"})})]}),"\n",(0,d.jsx)(n.p,{children:"Bravo！极其简单的配置便可以得到样式良好且可交互的树形图表，但我们发现在树形图中节点并没有将节点的名称展示出来，那么接下来我们依然是进入我们非常熟悉的图表优化环节。"}),"\n",(0,d.jsxs)(n.h3,{id:"图表优化",children:["图表优化",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#图表优化",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"显示节点名称"})}),"\n",(0,d.jsxs)(n.p,{children:["事实上 ECharts 的树形图在不需要添加任何配置项的情况下也可以展示节点的名称，不过因为我们在第 7 节中所指定的节点类 ",(0,d.jsx)(n.code,{children:"Node"})," 中代表节点值或名称的属性为 ",(0,d.jsx)(n.code,{children:"value"})," 而 ECharts 树形图中则需要使用 ",(0,d.jsx)(n.code,{children:"name"}),"，所以便无法直接展示出节点的名称。"]}),"\n",(0,d.jsxs)(n.p,{children:["而这一问题也并不是无法解决的，我们可以使用 ",(0,d.jsx)(n.code,{children:"label.formatter"})," 的方式为节点添加标签。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"const option = {\n  series: {\n    // ...\n    \n    label: {\n      formatter: '{@value}' // 绑定到 value 属性上\n    }\n  }\n}\n\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/9/22/16600db17685bc08?w=600&h=400&f=png&s=15647",alt:"tree-chart-2"})}),"\n",(0,d.jsxs)(n.p,{children:["Live DEMO: ",(0,d.jsx)(n.a,{href:"https://codepen.io/iwillwen/pen/aaxZEo",target:"_blank",rel:"noopener noreferrer",children:(0,d.jsx)(n.a,{href:"https://codepen.io/iwillwen/pen/aaxZEo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/iwillwen/pen/aaxZEo"})})]}),"\n",(0,d.jsx)(n.p,{children:"但是我们还发现这个配置虽然满足了在图表上显示节点名称的需求，却出现了名称与节点图标重叠的情况。那么我们便需要对这个情况进行调整，以帮助图表的使用者和阅读者更好地使用。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"调整节点名称位置"})}),"\n",(0,d.jsx)(n.p,{children:"在对数据进行调整之前，我们需要明确调整的思路。因为树形结构中的节点除了根节点都会与上一层的父节点有一条连线以表示节点之间的父子关系，但相对的每一个节点与上一层父节点的关系数量只有一个，但却有可能有很多的子节点与自身有关系，所以如果将节点的名字放在了节点的右方便很有可能会出现严重的与节点的边相重叠。"}),"\n",(0,d.jsx)(n.p,{children:"所以对于叶节点以外的所有节点，我们需要将名字显示在节点的左边，而因为叶节点是没有子节点的，所以叶节点的名称可以显示在节点图标的右边。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"const option = {\n  series: {\n    // ...\n    \n    label: {\n      position: 'left'\n    },\n    \n    leaves: {\n      label: {\n        position: 'right'\n      }\n    }\n  }\n}\n\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/9/22/16600db176625b85?w=600&h=400&f=png&s=16749",alt:"tree-chart-3"})}),"\n",(0,d.jsxs)(n.p,{children:["Live DEMO: ",(0,d.jsx)(n.a,{href:"https://codepen.io/iwillwen/pen/qMwNxd",target:"_blank",rel:"noopener noreferrer",children:(0,d.jsx)(n.a,{href:"https://codepen.io/iwillwen/pen/qMwNxd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/iwillwen/pen/qMwNxd"})})]}),"\n",(0,d.jsxs)(n.h2,{id:"153-其他树形图形态",children:["15.3 其他树形图形态",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#153-其他树形图形态",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"就如上一节中关系图谱的两种模板，除了默认的从左往右伸展的树形图结构以外，ECharts 的树形图表也提供了多种不同的结构模板。"}),"\n",(0,d.jsx)(n.p,{children:"除了最基本的从左往右展开排列以外，还有其他三个方向的模板（如从上往下）。除此以外还有一个十分好看的放射形树形图。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"const option = {\n  series: {\n    type: 'tree',\n    layout: 'radial',\n    data: [ treeDataHelper(tree.root) ],\n    label: {\n      formatter: '{@value}'\n    }\n  }\n}\n\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/9/22/16600db1767d9abb?w=600&h=400&f=png&s=16740",alt:"tree-chart-4"})}),"\n",(0,d.jsxs)(n.p,{children:["Live DEMO: ",(0,d.jsx)(n.a,{href:"https://codepen.io/iwillwen/pen/LJvZdG",target:"_blank",rel:"noopener noreferrer",children:(0,d.jsx)(n.a,{href:"https://codepen.io/iwillwen/pen/LJvZdG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/iwillwen/pen/LJvZdG"})})]}),"\n",(0,d.jsx)(n.p,{children:"这里的效果稍微有点差，当然这是因为节点的数量太少了。"}),"\n",(0,d.jsxs)(n.h2,{id:"小结",children:["小结",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"这一节中我们学习了另外一种复杂数据结构——树形结构的可视化图表的使用，其中因为 ECharts 对数据的内部处理导致了我们需要利用其他手段将我们原本实现的树形结构转换为更纯净的 JavaScript 对象数据集，那么我们本节的习题也会从这一个点上进行练习。"}),"\n",(0,d.jsxs)(n.h3,{id:"习题",children:["习题",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#习题",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在上一节中我们并没有为关系图谱数据设计类似 ",(0,d.jsx)(n.code,{children:"treeDataHelper"})," 这样的函数，而在本节中我们利用了递归的方式进行了逐层的转换来对树形结构进行了转换。"]}),"\n",(0,d.jsxs)(n.p,{children:["请模仿 ",(0,d.jsx)(n.code,{children:"treeDataHelper"})," 编写出适用于上一节中关系图谱数据的 ",(0,d.jsx)(n.code,{children:"graphDataHelper"}),"。"]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}let s=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20JavaScript%20%E5%BC%80%E5%8F%91%E7%81%B5%E6%B4%BB%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%2F%E7%AC%AC%2015%20%E8%8A%82%20%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E5%9B%BE%E8%A1%A8%20%C2%B7%20%E6%A0%91%E5%BD%A2%E5%9B%BE.md"]={toc:[{text:"15.1 准备数据",id:"151-准备数据",depth:2},{text:"15.2 编写配置",id:"152-编写配置",depth:2},{text:"图表优化",id:"图表优化",depth:3},{text:"15.3 其他树形图形态",id:"153-其他树形图形态",depth:2},{text:"小结",id:"小结",depth:2},{text:"习题",id:"习题",depth:3}],title:"第 15 节 复杂数据图表 \xb7 树形图",headingTitle:"第 15 节 复杂数据图表 \xb7 树形图",frontmatter:{}}}}]);