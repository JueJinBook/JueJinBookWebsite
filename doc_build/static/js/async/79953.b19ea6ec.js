"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79953"],{247648:function(e,n,s){s.r(n),s.d(n,{default:()=>b});var r=s(552676),a=s(740453);let t=s.p+"static/image/4192c4869c283926ed69048731e4faf1.656fd5b9.gif",c=s.p+"static/image/bacde267dbade99038d46e78bf15f372.d266d227.gif",i=s.p+"static/image/2b12c14579af90aba8204dde855e417a.2651de64.gif",d=s.p+"static/image/02925aa33c1a66eb0dadf6e9db70ea96.dd8f4343.webp",o=s.p+"static/image/6c11a96bc6bb81e750a5f174b5201f02.d87d9c40.webp",l=s.p+"static/image/deb40ea83d24893e0d5758ba92f01cff.9ce8c549.gif",h=s.p+"static/image/908b229f784c943ef564a2b8ddfee6bd.e074e03a.gif",p=s.p+"static/image/09111560daf6cfd8eb896ae8e9aabb67.4e30a54f.webp",x=s.p+"static/image/a816b7b85ac3656047f4c3cebae15e9c.54f125bb.webp",j=s.p+"static/image/5b04a970629582d7d20be8cd39abf721.371646ba.webp",u=s.p+"static/image/816cdf19c8e6c2c583f4dced1532461c.cd1465b6.webp",m=s.p+"static/image/8e58e23122cad968b8a551cd1afac57a.5c96f083.webp";function g(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",h3:"h3",pre:"pre",ol:"ol",li:"li",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ul:"ul"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"6路由篇-_-路由处理程序",children:["6.路由篇 _ 路由处理程序",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6路由篇-_-路由处理程序",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["路由处理程序是指使用 Web ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Request",target:"_blank",rel:"noopener noreferrer",children:"Request"})," 和 ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Response",target:"_blank",rel:"noopener noreferrer",children:"Response"})," API 对于给定的路由自定义处理逻辑。"]}),"\n",(0,r.jsx)(n.p,{children:"简单的来说，前后端分离架构中，客户端与服务端之间通过 API 接口来交互。这个“API 接口”在 Next.js 中有个更为正式的称呼，就是路由处理程序。"}),"\n",(0,r.jsx)(n.p,{children:"本篇我们会讲解如何定义一个路由处理程序以及写路由处理程序时常遇到的一些问题。"}),"\n",(0,r.jsxs)(n.h2,{id:"1-定义路由处理程序",children:["1. 定义路由处理程序",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-定义路由处理程序",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["写路由处理程序，你需要定义一个名为 ",(0,r.jsx)(n.code,{children:"route.js"}),"的特殊文件。（注意是 ",(0,r.jsx)(n.code,{children:"route"})," 不是 ",(0,r.jsx)(n.code,{children:"router"}),"）"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["该文件必须在 ",(0,r.jsx)(n.code,{children:"app"}),"目录下，可以在 ",(0,r.jsx)(n.code,{children:"app"})," 嵌套的文件夹下，但是要注意 ",(0,r.jsx)(n.code,{children:"page.js"}),"和 ",(0,r.jsx)(n.code,{children:"route.js"}),"不能在同一层级同时存在。"]}),"\n",(0,r.jsxs)(n.p,{children:["想想也能理解，",(0,r.jsx)(n.code,{children:"page.js"}),"和 ",(0,r.jsx)(n.code,{children:"route.js"}),"本质上都是对路由的响应。",(0,r.jsx)(n.code,{children:"page.js"}),"主要负责渲染 UI，",(0,r.jsx)(n.code,{children:"route.js"}),"主要负责处理请求。如果同时存在，Next.js 就不知道用谁的逻辑了。"]}),"\n",(0,r.jsxs)(n.h3,{id:"11-get-请求",children:["1.1. GET 请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-get-请求",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"让我们从写 GET 请求开始，比如写一个获取文章列表的接口。"}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"app/api/posts/route.js"})," 文件，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { NextResponse } from 'next/server'\n \nexport async function GET() {\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts')\n  const data = await res.json()\n \n  return NextResponse.json({ data })\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["浏览器访问 ",(0,r.jsx)(n.code,{children:"http://localhost:3000/api/posts"})," 查看接口返回的数据："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"在这个例子中："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["我们 ",(0,r.jsx)(n.code,{children:"export"})," 一个名为 ",(0,r.jsx)(n.code,{children:"GET"})," 的 ",(0,r.jsx)(n.code,{children:"async"})," 函数来定义 GET 请求处理，注意是 export 而不是 export default"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["我们使用 ",(0,r.jsx)(n.code,{children:"next/server"})," 的 NextResponse 对象用于设置响应内容，但这里不一定非要用 ",(0,r.jsx)(n.code,{children:"NextResponse"}),"，直接使用 ",(0,r.jsx)(n.code,{children:"Response"})," 也是可以的："]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export async function GET() {\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts')\n  const data = await res.json()\n  \n  return Response.json({ data })\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["但在实际开发中，推荐使用 ",(0,r.jsx)(n.code,{children:"NextResponse"}),"，因为它是 Next.js 基于 ",(0,r.jsx)(n.code,{children:"Response"})," 的封装，它对 TypeScript 更加友好，同时提供了更为方便的用法，比如获取 Cookie 等。"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["我们将接口写在了 ",(0,r.jsx)(n.code,{children:"app/api"})," 文件夹下，并不是因为接口一定要放在名为 ",(0,r.jsx)(n.code,{children:"api"})," 文件夹下（与 Pages Router 不同）。如果你代码写在 ",(0,r.jsx)(n.code,{children:"app/posts/route.js"}),"，对应的接口地址就是 ",(0,r.jsx)(n.code,{children:"/posts"}),"。放在 ",(0,r.jsx)(n.code,{children:"api"})," 文件夹下只是为了方便区分地址是接口还是页面。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"12-支持方法",children:["1.2. 支持方法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-支持方法",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Next.js 支持 ",(0,r.jsx)(n.code,{children:"GET"}),"、",(0,r.jsx)(n.code,{children:"POST"}),"、",(0,r.jsx)(n.code,{children:"PUT"}),"、",(0,r.jsx)(n.code,{children:"PATCH"}),"、",(0,r.jsx)(n.code,{children:"DELETE"}),"、",(0,r.jsx)(n.code,{children:"HEAD"})," 和 ",(0,r.jsx)(n.code,{children:"OPTIONS"})," 这些 HTTP 请求方法。如果传入了不支持的请求方法，Next.js 会返回 ",(0,r.jsx)(n.code,{children:"405 Method Not Allowed"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// route.js\nexport async function GET(request) {}\n \nexport async function HEAD(request) {}\n \nexport async function POST(request) {}\n \nexport async function PUT(request) {}\n \nexport async function DELETE(request) {}\n \nexport async function PATCH(request) {}\n \n// 如果 `OPTIONS` 没有定义, Next.js 会自动实现 `OPTIONS`\nexport async function OPTIONS(request) {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"现在让我们再写一个 POST 请求练练手。"}),"\n",(0,r.jsxs)(n.p,{children:["继续修改 ",(0,r.jsx)(n.code,{children:"app/api/posts/route.js"}),"，添加代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export async function POST(request) {\n  const article = await request.json()\n  \n  return NextResponse.json({\n    id: Math.random().toString(36).slice(-8),\n    data: article\n  }, { status: 201 })\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"现在让我们用 Postman 调用一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h3,{id:"13-传入参数",children:["1.3. 传入参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#13-传入参数",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在让我们具体看下请求方法。每个请求方法的处理函数会被传入两个参数，一个 ",(0,r.jsx)(n.code,{children:"request"}),"，一个 ",(0,r.jsx)(n.code,{children:"context"})," 。两个参数都是可选的："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export async function GET(request, context) {}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"request-optional",children:["request (optional)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#request-optional",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["request 对象是一个 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-23",target:"_blank",rel:"noopener noreferrer",children:"NextRequest"})," 对象，它是基于 ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Request",target:"_blank",rel:"noopener noreferrer",children:"Web Request API"})," 的扩展。使用 request ，你可以快捷读取 cookies 和处理 URL。"]}),"\n",(0,r.jsx)(n.p,{children:"我们这里讲讲如何获取 URL 参数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export async function GET(request, context) {\n  //  访问 /home, pathname 的值为 /home\n	const pathname = request.nextUrl.pathname\n	// 访问 /home?name=lee, searchParams 的值为 { 'name': 'lee' }\n	const searchParams = request.nextUrl.searchParams\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["其中 nextUrl 是基于 Web URL API 的扩展（如果你想获取其他值，参考 ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/URL",target:"_blank",rel:"noopener noreferrer",children:"URL API"}),"），同样提供了一些方便使用的方法。"]}),"\n",(0,r.jsxs)(n.h4,{id:"context-optional",children:["context (optional)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#context-optional",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["目前",(0,r.jsx)(n.code,{children:"context"})," 只有一个值就是 ",(0,r.jsx)(n.code,{children:"params"}),"，它是一个包含当前动态路由参数的对象。举个例子："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/dashboard/[team]/route.js\nexport async function GET(request, { params }) {\n  const team = params.team\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["当访问 ",(0,r.jsx)(n.code,{children:"/dashboard/1"})," 时，params 的值为 ",(0,r.jsx)(n.code,{children:"{ team: '1' }"}),"。其他情况还有："]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"Example"}),"\n",(0,r.jsx)(n.th,{children:"URL"}),"\n",(0,r.jsx)(n.th,{children:"params"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"app/dashboard/[team]/route.js"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/dashboard/1"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{ team: '1' }"})}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"app/shop/[tag]/[item]/route.js"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/shop/1/2"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{ tag: '1', item: '2' }"})}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"app/blog/[...slug]/route.js"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/blog/1/2"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{ slug: ['1', '2'] }"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"注意第二行：此时 params 返回了当前链接所有的动态路由参数。"}),"\n",(0,r.jsxs)(n.h4,{id:"示例代码",children:["示例代码",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例代码",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现在让我们写个 demo 复习下这些知识。"}),"\n",(0,r.jsxs)(n.p,{children:["需求：目前 GET 请求 ",(0,r.jsx)(n.code,{children:"/api/posts"})," 时会返回所有文章数据，现在希望 GET 请求 ",(0,r.jsx)(n.code,{children:"/api/posts/1?dataField=title"})," 获取 post id 为 1 的文章数据，dataField 用于指定返回哪些字段数据。"]}),"\n",(0,r.jsxs)(n.p,{children:["让我们开始写吧。新建 ",(0,r.jsx)(n.code,{children:"/api/posts/[id]/route.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { NextResponse } from 'next/server'\n\nexport async function GET(request, { params }) {\n  const field = request.nextUrl.searchParams.get(\"dataField\")\n  const data = await ((await fetch(`https://jsonplaceholder.typicode.com/posts/${params.id}`)).json())\n  const result = field ? { [field]: data[field] } : data\n  return NextResponse.json(result)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["用 Postman 测试一下，如果请求地址是 ",(0,r.jsx)(n.code,{children:"http://localhost:3000/api/posts/1?dataField=title"}),"，效果如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["如果请求地址是 ",(0,r.jsx)(n.code,{children:"http://localhost:3000/api/posts/1"}),"，效果如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h3,{id:"14-缓存行为",children:["1.4. 缓存行为",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14-缓存行为",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"默认缓存",children:["默认缓存",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#默认缓存",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["默认情况下，使用 ",(0,r.jsx)(n.code,{children:"Response"})," 对象（",(0,r.jsx)(n.code,{children:"NextResponse"})," 也是一样的）的 GET 请求会被缓存。"]}),"\n",(0,r.jsxs)(n.p,{children:["让我们举个例子，新建 ",(0,r.jsx)(n.code,{children:"app/api/time/route.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export async function GET() {\n  console.log('GET /api/time')\n  return Response.json({ data: new Date().toLocaleTimeString() })\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"注意：在开发模式下，并不会被缓存，每次刷新时间都会改变："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"get-cache.gif"})}),"\n",(0,r.jsxs)(n.p,{children:["现在我们部署生产版本，运行 ",(0,r.jsx)(n.code,{children:"npm run build && npm run start"}),"："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"get-cache-1.gif"})}),"\n",(0,r.jsx)(n.p,{children:"你会发现，无论怎么刷新，时间都不会改变。这就是被缓存了。"}),"\n",(0,r.jsx)(n.p,{children:"可是为什么呢？Next.js 是怎么实现的呢？"}),"\n",(0,r.jsx)(n.p,{children:"让我们看下构建（npm run build）时的命令行输出："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"截屏2024-02-29 12.02.47.png"})}),"\n",(0,r.jsxs)(n.p,{children:["根据输出的结果，你会发现 ",(0,r.jsx)(n.code,{children:"/api/time"})," 是静态的，也就是被预渲染为静态的内容，换言之，",(0,r.jsx)(n.code,{children:"/api/time"})," 的返回结果其实在构建的时候就已经确定了，而不是在第一次请求的时候才确定。"]}),"\n",(0,r.jsxs)(n.h4,{id:"退出缓存",children:["退出缓存",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#退出缓存",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"但大家也不用担心默认缓存带来的影响。实际上，默认缓存的条件是非常“严苛”的，这些情况都会导致退出缓存："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GET"})," 请求使用 ",(0,r.jsx)(n.code,{children:"Request"})," 对象"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"app/api/time/route.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export async function GET(request) {\n  const searchParams = request.nextUrl.searchParams\n  return Response.json({ data: new Date().toLocaleTimeString(), params: searchParams.toString() })\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["现在我们部署生产版本，运行 ",(0,r.jsx)(n.code,{children:"npm run build && npm run start"}),"："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"截屏2024-02-29 12.37.21.png"})}),"\n",(0,r.jsx)(n.p,{children:"运行效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"get-cache-2.gif"})}),"\n",(0,r.jsx)(n.p,{children:"此时会动态渲染，也就是在请求的时候再进行服务端渲染，所以时间会改变。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"添加其他 HTTP 方法，比如 POST"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"app/api/time/route.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export async function GET() {\n  console.log('GET /api/time')\n  return Response.json({ data: new Date().toLocaleTimeString() })\n}\n\nexport async function POST() {\n  console.log('POST /api/time')\n  return Response.json({ data: new Date().toLocaleTimeString() })\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"此时会转为动态渲染。这是因为 POST 请求往往用于改变数据，GET 请求用于获取数据。如果写了 POST 请求，表示数据会发生变化，此时不适合缓存。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["使用像 cookies、headers 这样的",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309076661532622885#heading-9",target:"_blank",rel:"noopener noreferrer",children:"动态函数"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"app/api/time/route.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export async function GET(request) {\n  const token = request.cookies.get('token')\n  return Response.json({ data: new Date().toLocaleTimeString() })\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"此时会转为动态渲染。这是因为 cookies、headers 这些数据只有当请求的时候才知道具体的值。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079033223446554#heading-3",target:"_blank",rel:"noopener noreferrer",children:"路由段配置项"}),"手动声明为动态模式"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"app/api/time/route.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export const dynamic = 'force-dynamic'\n\nexport async function GET() {\n  return Response.json({ data: new Date().toLocaleTimeString() })\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"此时会转为动态渲染。这是因为你手动设置为了动态渲染模式……"}),"\n",(0,r.jsxs)(n.h4,{id:"重新验证",children:["重新验证",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#重新验证",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"除了退出缓存，也可以设置缓存的时效，适用于一些重要性低、时效性低的页面。"}),"\n",(0,r.jsxs)(n.p,{children:["有两种常用的方案，一种是使用",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079033223446554#heading-5",target:"_blank",rel:"noopener noreferrer",children:"路由段配置项"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"app/api/time/route.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export const revalidate = 10\n\nexport async function GET() {\n  return Response.json({ data: new Date().toLocaleTimeString() })\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"export const revalidate = 10"})," 表示设置重新验证频率为 10s，但是要注意："]}),"\n",(0,r.jsxs)(n.p,{children:["这句代码的效果并不是设置服务器每 10s 会自动更新一次 ",(0,r.jsx)(n.code,{children:"/api/time"}),"。而是最少 10s 后才重新验证。"]}),"\n",(0,r.jsxs)(n.p,{children:["举个例子，假设你现在访问了 ",(0,r.jsx)(n.code,{children:"/api/time"}),"，此时时间设为 0s，10s 内持续访问，",(0,r.jsx)(n.code,{children:"/api/time"}),"返回的都是之前缓存的结果。当 10s 过后，假设你第 12s 又访问了一次 ",(0,r.jsx)(n.code,{children:"/api/time"}),"，此时虽然超过了 10s，但依然会返回之前缓存的结果，但同时会触发服务器更新缓存，当你第 13s 再次访问的时候，就是更新后的结果。"]}),"\n",(0,r.jsx)(n.p,{children:"简单来说，超过 revalidate 设置时间的首次访问会触发缓存更新，如果更新成功，后续的返回就都是新的内容，直到下一次触发缓存更新。"}),"\n",(0,r.jsxs)(n.p,{children:["还有一种是使用 ",(0,r.jsx)(n.code,{children:"next.revalidate"})," 选项。"]}),"\n",(0,r.jsx)(n.p,{children:"为了演示它的效果，我们需要准备一个能够随机返回数据的接口。"}),"\n",(0,r.jsxs)(n.p,{children:["如果你喜欢猫猫，可以调用 ",(0,r.jsx)(n.a,{href:"https://api.thecatapi.com/v1/images/search",target:"_blank",rel:"noopener noreferrer",children:"https://api.thecatapi.com/v1/images/search"}),"，每次调用它都会返回一张随机的猫猫图片数据。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你喜欢狗狗，可以调用 ",(0,r.jsx)(n.a,{href:"https://dog.ceo/api/breeds/image/random",target:"_blank",rel:"noopener noreferrer",children:"https://dog.ceo/api/breeds/image/random"}),"，每次调用它都会返回一张随机的狗狗图片数据。"]}),"\n",(0,r.jsx)(n.p,{children:"如果你喜欢美女帅哥，请自己解决。"}),"\n",(0,r.jsxs)(n.p,{children:["现在让我们开始吧！新建 ",(0,r.jsx)(n.code,{children:"app/api/image/route.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export async function GET() {\n  const res = await fetch('https://api.thecatapi.com/v1/images/search')\n  const data = await res.json()\n  console.log(data)\n  return Response.json(data)\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"让我们在开发模式下打开这个页面："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:"get-cache-3.gif"})}),"\n",(0,r.jsxs)(n.p,{children:["你会发现与之前的 ",(0,r.jsx)(n.code,{children:"/api/time"})," 不同，",(0,r.jsx)(n.code,{children:"/api/image"})," 接口返回的数据在开发模式下刷新就已经不会改变了，即使 console.log 每次都会打印，返回的结果却还是一样。"]}),"\n",(0,r.jsxs)(n.p,{children:["这是因为 Next.js 拓展了原生的 fetch 方法，会自动缓存 fetch 的结果。现在我们使用 ",(0,r.jsx)(n.code,{children:"next.revalidate"})," 设置 fetch 请求的重新验证时间，修改 ",(0,r.jsx)(n.code,{children:"app/api/image/route.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export async function GET() {\n  const res = await fetch('https://api.thecatapi.com/v1/images/search', {\n    next: { revalidate: 5 }, //  每 5 秒重新验证\n  })\n  const data = await res.json()\n  console.log(data)\n  return Response.json(data)\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在本地多次刷新页面，你会发现数据发生了更新："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"get-cache-4.gif"})}),"\n",(0,r.jsxs)(n.p,{children:["如果你使用生产版本，虽然在构建的时候，",(0,r.jsx)(n.code,{children:"/api/image"})," 显示的是静态渲染，但是数据会更新。具体更新的规律和第一种方案是一样的，这里就不多赘述了。"]}),"\n",(0,r.jsxs)(n.p,{children:["注：Next.js 的缓存方案我们还会在 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309077169735958565",target:"_blank",rel:"noopener noreferrer",children:"《缓存篇 | Caching》"}),"中详细介绍。"]}),"\n",(0,r.jsxs)(n.h2,{id:"2-写接口常见问题",children:["2. 写接口常见问题",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-写接口常见问题",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"接下来我们讲讲写接口时常遇到的一些问题，比如如何获取网址参数，如何读取 cookie，各种方法了解即可。实际开发中遇到问题的时候再来查就行。"}),"\n",(0,r.jsxs)(n.h3,{id:"21-如何获取网址参数",children:["2.1. 如何获取网址参数？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-如何获取网址参数",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/api/search/route.js\n// 访问 /api/search?query=hello\nexport function GET(request) {\n  const searchParams = request.nextUrl.searchParams\n  const query = searchParams.get('query') // query\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"22-如何处理-cookie",children:["2.2. 如何处理 Cookie？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-如何处理-cookie",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["第一种方法是通过 ",(0,r.jsx)(n.code,{children:"NextRequest"}),"对象："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/api/route.js\nexport async function GET(request) {\n  const token = request.cookies.get('token')\n  request.cookies.set(`token2`, 123)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["其中，",(0,r.jsx)(n.code,{children:"request"})," 是一个 ",(0,r.jsx)(n.code,{children:"NextRequest"})," 对象。正如上节所说，",(0,r.jsx)(n.code,{children:"NextRequest"})," 相比 ",(0,r.jsx)(n.code,{children:"Request"})," 提供了更为便捷的用法，这就是一个例子。"]}),"\n",(0,r.jsx)(n.p,{children:"此外，虽然我们使用 set 设置了 cookie，但设置的是请求的 cookie，并没有设置响应的 cookie。"}),"\n",(0,r.jsxs)(n.p,{children:["第二种方法是通过",(0,r.jsx)(n.code,{children:"next/headers"}),"包提供的 ",(0,r.jsx)(n.code,{children:"cookies"}),"方法。"]}),"\n",(0,r.jsxs)(n.p,{children:["因为 cookies 实例只读，如果你要设置 Cookie，你需要返回一个使用 ",(0,r.jsx)(n.code,{children:"Set-Cookie"})," header 的 Response 实例。示例代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/api/route.js\nimport { cookies } from 'next/headers'\n \nexport async function GET(request) {\n  const cookieStore = cookies()\n  const token = cookieStore.get('token')\n \n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { 'Set-Cookie': `token=${token}` },\n  })\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"23-如何处理-headers-",children:["2.3. 如何处理 Headers ？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-如何处理-headers-",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["第一种方法是通过 ",(0,r.jsx)(n.code,{children:"NextRequest"}),"对象："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/api/route.js\nexport async function GET(request) {\n  const headersList = new Headers(request.headers)\n  const referer = headersList.get('referer')\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["第二种方法是",(0,r.jsx)(n.code,{children:"next/headers"}),"包提供的 ",(0,r.jsx)(n.code,{children:"headers"})," 方法。"]}),"\n",(0,r.jsx)(n.p,{children:"因为 headers 实例只读，如果你要设置 headers，你需要返回一个使用了新 header 的 Response 实例。使用示例如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/api/route.js\nimport { headers } from 'next/headers'\n \nexport async function GET(request) {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n \n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { referer: referer },\n  })\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"24-如何重定向",children:["2.4. 如何重定向？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24-如何重定向",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["重定向使用 ",(0,r.jsx)(n.code,{children:"next/navigation"})," 提供的 ",(0,r.jsx)(n.code,{children:"redirect"})," 方法，示例如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { redirect } from 'next/navigation'\n \nexport async function GET(request) {\n  redirect('https://nextjs.org/')\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"25-如何获取请求体内容",children:["2.5. 如何获取请求体内容？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#25-如何获取请求体内容",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/items/route.js \nimport { NextResponse } from 'next/server'\n \nexport async function POST(request) {\n  const res = await request.json()\n  return NextResponse.json({ res })\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果请求正文是 FormData 类型："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/items/route.js\nimport { NextResponse } from 'next/server'\n \nexport async function POST(request) {\n  const formData = await request.formData()\n  const name = formData.get('name')\n  const email = formData.get('email')\n  return NextResponse.json({ name, email })\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"26-如何设置-cors-",children:["2.6. 如何设置 CORS ？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#26-如何设置-cors-",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/api/route.ts\nexport async function GET(request) {\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"27-如何响应无-ui-内容",children:["2.7. 如何响应无 UI 内容？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#27-如何响应无-ui-内容",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["你可以返回无 UI 的内容。在这个例子中，访问 ",(0,r.jsx)(n.code,{children:"/rss.xml"}),"的时候，会返回 XML 结构的内容："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// app/rss.xml/route.ts\nexport async function GET() {\n  return new Response(`<?xml version="1.0" encoding="UTF-8" ?>\n<rss version="2.0">\n \n<channel>\n  <title>Next.js Documentation</title>\n  <link>https://nextjs.org/docs</link>\n  <description>The React Framework for the Web</description>\n</channel>\n \n</rss>`)\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["注：",(0,r.jsx)(n.code,{children:"sitemap.xml"}),"、",(0,r.jsx)(n.code,{children:"robots.txt"}),"、",(0,r.jsx)(n.code,{children:"app icons"})," 和 ",(0,r.jsx)(n.code,{children:"open graph images"})," 这些特殊的文件，Next.js 都已经提供了内置支持，这些内容我们会在",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309078702511128626",target:"_blank",rel:"noopener noreferrer",children:"《Metadata 篇 | 基于文件》"}),"详细讲到。"]}),"\n",(0,r.jsxs)(n.h3,{id:"28-streaming",children:["2.8. Streaming",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#28-streaming",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"openai 的打字效果背后用的就是流："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/api/chat/route.js\nimport OpenAI from 'openai'\nimport { OpenAIStream, StreamingTextResponse } from 'ai'\n \nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n})\n \nexport const runtime = 'edge'\n \nexport async function POST(req) {\n  const { messages } = await req.json()\n  const response = await openai.chat.completions.create({\n    model: 'gpt-3.5-turbo',\n    stream: true,\n    messages,\n  })\n \n  const stream = OpenAIStream(response)\n \n  return new StreamingTextResponse(stream)\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"当然也可以直接使用底层的 Web API 实现 Streaming："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/api/route.js\n// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream\nfunction iteratorToStream(iterator) {\n  return new ReadableStream({\n    async pull(controller) {\n      const { value, done } = await iterator.next()\n \n      if (done) {\n        controller.close()\n      } else {\n        controller.enqueue(value)\n      }\n    },\n  })\n}\n \nfunction sleep(time) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time)\n  })\n}\n \nconst encoder = new TextEncoder()\n \nasync function* makeIterator() {\n  yield encoder.encode('<p>One</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Two</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Three</p>')\n}\n \nexport async function GET() {\n  const iterator = makeIterator()\n  const stream = iteratorToStream(iterator)\n \n  return new Response(stream)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["注：Streaming 更完整详细的示例和解释可以参考 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/post/7344089411983802394",target:"_blank",rel:"noopener noreferrer",children:"《如何用 Next.js v14 实现一个 Streaming 接口？》"})]}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"恭喜你，完成了本节内容的学习！"}),"\n",(0,r.jsxs)(n.p,{children:["这一节我们介绍了如何定义一个路由处理程序，那就是使用新的约定文件 ",(0,r.jsx)(n.code,{children:"route.js"}),"，切记 ",(0,r.jsx)(n.code,{children:"route.js"})," 不能跟同级的 ",(0,r.jsx)(n.code,{children:"page.js"})," 一起使用。"]}),"\n",(0,r.jsx)(n.p,{children:"同时我们介绍了写路由处理程序中可能会遇到的问题。在开发的时候，尽可能使用 NextRequest 和 NextResponse，它们是基于原生 Request 和 Response 的封装，提供了快捷处理 url 和 cookie 的方法。"}),"\n",(0,r.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/routing/route-handlers",target:"_blank",rel:"noopener noreferrer",children:"Routing: Route Handlers"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/file-conventions/route",target:"_blank",rel:"noopener noreferrer",children:"File Conventions: route.js"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/functions/next-response",target:"_blank",rel:"noopener noreferrer",children:"Functions: NextResponse"})}),"\n"]})]})}function f(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}let b=f;f.__RSPRESS_PAGE_META={},f.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F6.%E8%B7%AF%E7%94%B1%E7%AF%87%20_%20%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. 定义路由处理程序",id:"1-定义路由处理程序",depth:2},{text:"1.1. GET 请求",id:"11-get-请求",depth:3},{text:"1.2. 支持方法",id:"12-支持方法",depth:3},{text:"1.3. 传入参数",id:"13-传入参数",depth:3},{text:"request (optional)",id:"request-optional",depth:4},{text:"context (optional)",id:"context-optional",depth:4},{text:"示例代码",id:"示例代码",depth:4},{text:"1.4. 缓存行为",id:"14-缓存行为",depth:3},{text:"默认缓存",id:"默认缓存",depth:4},{text:"退出缓存",id:"退出缓存",depth:4},{text:"重新验证",id:"重新验证",depth:4},{text:"2. 写接口常见问题",id:"2-写接口常见问题",depth:2},{text:"2.1. 如何获取网址参数？",id:"21-如何获取网址参数",depth:3},{text:"2.2. 如何处理 Cookie？",id:"22-如何处理-cookie",depth:3},{text:"2.3. 如何处理 Headers ？",id:"23-如何处理-headers-",depth:3},{text:"2.4. 如何重定向？",id:"24-如何重定向",depth:3},{text:"2.5. 如何获取请求体内容？",id:"25-如何获取请求体内容",depth:3},{text:"2.6. 如何设置 CORS ？",id:"26-如何设置-cors-",depth:3},{text:"2.7. 如何响应无 UI 内容？",id:"27-如何响应无-ui-内容",depth:3},{text:"2.8. Streaming",id:"28-streaming",depth:3},{text:"小结",id:"小结",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"6.路由篇 _ 路由处理程序",headingTitle:"6.路由篇 _ 路由处理程序",frontmatter:{}}}}]);