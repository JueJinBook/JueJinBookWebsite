"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["7096"],{954927:function(n,e,s){s.r(e),s.d(e,{default:()=>B});var r=s(552676),i=s(740453);let c=s.p+"static/image/dcae00d3ce96240ff32771e673fc30c3.85fab537.webp",t=s.p+"static/image/0d163b4eb4e19c53021c7a7dd8cba875.50fe8ef1.gif",a=s.p+"static/image/92ab17b6c417094f0091d7ed9900be2f.69abad90.gif",l=s.p+"static/image/56b53d54bbe0728523867c5f3c8aabcd.a9302175.webp",o=s.p+"static/image/00d2beec673d5d92daf485b4e9185bb5.19c0e856.webp",d=s.p+"static/image/5ce38c7164e051402ffda25c5cfff42a.836164d4.webp",p=s.p+"static/image/45d448754fbbfc8c2d188764729b22fc.01a70eb8.webp",g=s.p+"static/image/6de6ee77c48b7f4c106efced5613dc84.0b06bc69.webp",j=s.p+"static/image/41248cc52ff6ecae5236345c96976d25.78c6b1eb.webp",h=s.p+"static/image/fba6634e57f785f344f8ec310d8023d2.0fe79760.webp",x=s.p+"static/image/1fe79b22c97e89c60cfc3a2f20b180e9.fd2372d2.webp",m=s.p+"static/image/39fba7c36c55efd4ad322bf6be7922ac.b06a99f3.webp",b=s.p+"static/image/125a9f95c200ee4568347f28bac9b8ae.4879e893.webp",f=s.p+"static/image/98e4fb673b971a6bfb1979e3e4973bf6.d9b95b91.gif",w=s.p+"static/image/5f279dd68b07e5ac7eaaf80f7aec22ef.40560bc6.webp",u=s.p+"static/image/78c3b6d43940127801bf915e90067a2f.4eb91133.webp",_=s.p+"static/image/b37c8cfedebb517dc549da9672ed7e35.a5b890da.webp",y=s.p+"static/image/5ce8734d18826134594ea1256b915421.6bf8d7bc.webp",E=s.p+"static/image/4a88939db3cbdc112e56509259a1b001.c463c13f.webp",v=s.p+"static/image/418beb195d39bc1953d7dd2aa5743429.5ecbfb8e.webp",A=s.p+"static/image/cd667000e9e3435cc8b0d512c3e5a78c.e60bde0f.gif",R=s.p+"static/image/03f26d5d1c49a55ddfea14b34d4c3933.cb254bd3.webp",L=s.p+"static/image/3419eaa7f8161502c2a4e23bc69b192a.5b3bef32.webp",S=s.p+"static/image/14a34eff92c16492108390246fd91777.a36d365d.webp";function k(n){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"136-会议室预定系统集成日志框架-winston",children:["136. 会议室预定系统：集成日志框架 winston",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#136-会议室预定系统集成日志框架-winston",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"现在我们的日志都是直接打印在 console 的，这样开发时没问题，但是线上有时候我们要去查日志，这时候在 console 打印的日志就不是很方便。"}),"\n",(0,r.jsx)(e.p,{children:"所以我们要把日志保存在文件里，或者通过 http 发送到专门的日志服务器。"}),"\n",(0,r.jsx)(e.p,{children:"而 winston 等日志框架就是做这个的。"}),"\n",(0,r.jsxs)(e.p,{children:["nest 集成 winston 直接用 ",(0,r.jsx)(e.a,{href:"https://www.npmjs.com/package/nest-winston",target:"_blank",rel:"noopener noreferrer",children:"nest-winston"})," 这个包，没必要自己写。"]}),"\n",(0,r.jsx)(e.p,{children:"在 backend 项目里安装下依赖："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install --save nest-winston winston\n"})}),"\n",(0,r.jsx)(e.p,{children:"然后在 AppModule 引入下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"WinstonModule.forRootAsync({\n  useFactory: () => ({\n    level: 'debug',\n    transports: [\n      new winston.transports.File({\n        filename: `${process.cwd()}/log`,\n      }),\n      new winston.transports.Console({\n        format: winston.format.combine(\n          winston.format.timestamp(),\n          utilities.format.nestLike(),\n        ),\n      }),\n    ],\n  })\n}),\n"})}),"\n",(0,r.jsx)(e.p,{children:"我们指定日志输出级别是 debug，输出到的 transport 包括 console 和 file。"}),"\n",(0,r.jsx)(e.p,{children:"然后把 winston 的 logger 设置为 Nest 的默认 Logger："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER));\n"})}),"\n",(0,r.jsx)(e.p,{children:"跑下试试："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsx)(e.p,{children:"可以看到，除了 console 之外， log 文件中也输出了一份："}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)("img",{src:R,alt:""}),"、"]}),"\n",(0,r.jsx)(e.p,{children:"两个 transport 都生效了。"}),"\n",(0,r.jsx)(e.p,{children:"页面刷新下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"你会发现 typeorm 的日志并没有输出到文件。"}),"\n",(0,r.jsx)(e.p,{children:"这是因为 TypeORM 有自己的 Logger。"}),"\n",(0,r.jsx)(e.p,{children:"它当然也是可以自定义的。"}),"\n",(0,r.jsx)(e.p,{children:"我们在 src 下新建一个 CustomTypeOrmLogger.ts 文件："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { WinstonLogger } from 'nest-winston';\nimport { Logger, QueryRunner } from 'typeorm';\n\nexport class CustomTypeOrmLogger implements Logger {\n\n    constructor(private winstonLogger: WinstonLogger) {\n\n    }\n\n    log(level: 'log' | 'info' | 'warn', message: any) {\n        this.winstonLogger.log(message);\n    }\n\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        this.winstonLogger.log({\n            sql: query,\n            parameters\n        });\n    }\n\n    logQueryError(error: string | Error, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        this.winstonLogger.error({\n            sql: query,\n            parameters\n        });\n    }\n\n    logQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        this.winstonLogger.log({\n            sql: query,\n            parameters,\n            time\n        });\n    }\n\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        this.winstonLogger.log(message);\n    }\n\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        this.winstonLogger.log(message);\n    }\n\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"就是实现 typeorm 的 Logger 接口，实现各种方法就好了。"}),"\n",(0,r.jsx)(e.p,{children:"具体的实现也比较简单，就是通过构造器传入 WinstonLogger，然后分别调用 log、error 等方法打印下日志。"}),"\n",(0,r.jsx)(e.p,{children:"然后我们在 TypeOrmModule 用一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"试下效果："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"现在 console 和 file 里就有 typeorm 的日志了。"}),"\n",(0,r.jsx)(e.p,{children:"现在的日志都是保存在单个文件里，不断追加内容，这样文件会越来越大，不好维护。"}),"\n",(0,r.jsx)(e.p,{children:"我们改下 transport，换成按照日期来分割日志那种。"}),"\n",(0,r.jsx)(e.p,{children:"安装用到的包："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install --save winston-daily-rotate-file\n"})}),"\n",(0,r.jsx)(e.p,{children:"用一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"new winston.transports.DailyRotateFile({\n  level: 'debug',\n  dirname: 'daily-log',\n  filename: 'log-%DATE%.log',\n  datePattern: 'YYYY-MM-DD',\n  maxSize: '10k'\n}),\n"})}),"\n",(0,r.jsx)(e.p,{children:"指定目录为 daily-log，然后指定文件名的格式和日期格式，文件最大的大小为 10k。"}),"\n",(0,r.jsx)(e.p,{children:"试试看："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"多刷新几次页面："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"可以看到，产生了几个文件，每个都是 10k 左右。"}),"\n",(0,r.jsx)(e.p,{children:"当然，最重要的是它会自动按照日期分割。"}),"\n",(0,r.jsx)(e.p,{children:"我们改下本地时间："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后刷新页面，可以看到，日志被记录在了新的文件里："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"也就是说，日志会按照日期为维度来分割，并且超过了一定 maxSize 也会分割。"}),"\n",(0,r.jsx)(e.p,{children:"这样，我们查日志的时候就可以找到当天的日期，在日志文件里搜索了。"}),"\n",(0,r.jsx)(e.p,{children:"把 winston 的配置也抽到 .env 里："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"winston_log_level=debug\nwinston_log_dirname=daily-log\nwinston_log_filename=log-%DATE%.log\nwinston_log_date_pattern=YYYY-MM-DD\nwinston_log_max_size=1M\n"})}),"\n",(0,r.jsx)(e.p,{children:"然后在 WinstonModule 里读取："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"WinstonModule.forRootAsync({\n  useFactory: (configService: ConfigService) => ({\n    level: 'debug',\n    transports: [\n      new winston.transports.DailyRotateFile({\n          level: configService.get('winston_log_level'),\n          dirname: configService.get('winston_log_dirname'),\n          filename: configService.get('winston_log_filename'),\n          datePattern: configService.get('winston_log_date_pattern'),\n          maxSize: configService.get('winston_log_max_size')\n      }),\n      new winston.transports.Console({\n        format: winston.format.combine(\n          winston.format.timestamp(),\n          utilities.format.nestLike(),\n        ),\n      }),\n    ],\n  }),\n  inject: [ConfigService]\n}),\n"})}),"\n",(0,r.jsx)(e.p,{children:"跑下试试："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(e.p,{children:"这样，我们的 winston 就集成成功了。"}),"\n",(0,r.jsx)(e.p,{children:"此外，如果你有单独的日志服务，那就更方便了，不需要去服务器查日志文件，可以通过日志服务来查。"}),"\n",(0,r.jsx)(e.p,{children:"假设我们有了这样的日志服务，那可以加一个 Http 的 transport 来上传日志。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"new winston.transports.Http({\n  host: 'localhost',\n  port: 3002,\n  path: '/log'\n})\n"})}),"\n",(0,r.jsx)(e.p,{children:"创建个 nest 项目作为日志服务来接收下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"nest new log-server\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"改下端口："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"加个 /log 的路由："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"把服务跑起来："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"页面上触发下查询："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"可以看到所有的日志都接收到了："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"同时在 console、file、日志服务三个地方保存了日志，这就是 winston 的魅力。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["案例代码上传了",(0,r.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"这节我们集成了日志框架 winston。"}),"\n",(0,r.jsx)(e.p,{children:"没接入 winston 之前，我们都是在 console 打印日志，如果出了问题想查日志很不方便。"}),"\n",(0,r.jsx)(e.p,{children:"接入 winston 之后，日志会在 console 打印，还会保存到日志文件中，按照日期分割，另外还会发送到日志服务来保存。"}),"\n",(0,r.jsx)(e.p,{children:"现在想查日志可以通过日志服务，也可以在查找日期对应的日志文件里搜索。"}),"\n",(0,r.jsx)(e.p,{children:"我们用了 nest-winston 这个包，在 AppModule 引入了 WinstonModoule 之后，在 main.ts 里把它设置为 nest 的 logger。"}),"\n",(0,r.jsx)(e.p,{children:"此外，我们需要自定义 TypeOrm 的 logger，使用 winston logger 来实现它的方法。"}),"\n",(0,r.jsx)(e.p,{children:"这样，日志查询就方便多了。"})]})}function M(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(k,{...n})}):k(n)}let B=M;M.__RSPRESS_PAGE_META={},M.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F136.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E5%AE%9A%E7%B3%BB%E7%BB%9F%EF%BC%9A%E9%9B%86%E6%88%90%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%20winston.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"136. 会议室预定系统：集成日志框架 winston",headingTitle:"136. 会议室预定系统：集成日志框架 winston",frontmatter:{}}}}]);