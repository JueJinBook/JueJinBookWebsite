"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["74634"],{184356:function(n,e,t){t.r(e),t.d(e,{default:()=>a});var d=t(552676),o=t(740453);let s=t.p+"static/image/79a91a61a923cea9ff4e4da14a9568bb.be4a5e2d.webp";function c(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",strong:"strong",pre:"pre",code:"code",br:"br",blockquote:"blockquote",del:"del",h3:"h3"},(0,o.ah)(),n.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(e.h1,{id:"8结构型装饰器模式对象装上它就像开了挂",children:["8.结构型：装饰器模式——对象装上它，就像开了挂",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#8结构型装饰器模式对象装上它就像开了挂",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"装饰器模式，又名装饰者模式。它的定义是“在不改变原对象的基础上，通过对其进行包装拓展，使原有对象可以满足用户的更复杂需求”。"}),"\n",(0,d.jsx)(e.p,{children:"当然，对于没接触过装饰器的同学来说，这段定义意义不大。我们先借助一个生活中的例子来理解装饰器："}),"\n",(0,d.jsxs)(e.h2,{id:"生活中的装饰器",children:["生活中的装饰器",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#生活中的装饰器",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"去年有个手机壳在同事里非常流行，我也随大流买了一个，它长这样："}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)("img",{src:s,alt:""})}),"\n",(0,d.jsx)(e.p,{children:"这个手机壳的安装方式和普通手机壳一样，就是卡在手机背面。不同的是它卡上去后会变成一块水墨屏，这样一来我们手机就有了两个屏幕。平时办公或者玩游戏的时候，用正面的普通屏幕；阅读的时候怕伤眼睛，就可以翻过来用背面的水墨屏了。"}),"\n",(0,d.jsxs)(e.p,{children:["这个水墨屏手机壳安装后，",(0,d.jsx)(e.strong,{children:"不会对手机原有的功能产生任何影响，仅仅是使手机具备了一种新的能力"}),"（多了块屏幕），因此它在此处就是一个标准的装饰器。"]}),"\n",(0,d.jsx)(e.p,{children:"PS：手机壳是挺好用的，就是有点厚，用了一个月我就放弃了，目前正在工位一角吃灰。大家谨记理性消费、适度消费。"}),"\n",(0,d.jsxs)(e.h2,{id:"装饰器的应用场景",children:["装饰器的应用场景",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#装饰器的应用场景",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"按钮是我们平时写业务时常见的页面元素。假设我们的初始需求是：每个业务中的按钮在点击后都弹出「您还未登录哦」的弹窗。"}),"\n",(0,d.jsx)(e.p,{children:"那我们可以很轻易地写出这个需求的代码："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>按钮点击需求1.0</title>\n</head>\n<style>\n    #modal {\n        height: 200px;\n        width: 200px;\n        line-height: 200px;\n        position: fixed;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        border: 1px solid black;\n        text-align: center;\n    }\n</style>\n<body>\n	<button id='open'>点击打开</button>\n	<button id='close'>关闭弹窗</button>\n</body>\n<script>\n    // 弹窗创建逻辑，这里我们复用了单例模式面试题的例子\n    const Modal = (function() {\n    	let modal = null\n    	return function() {\n            if(!modal) {\n            	modal = document.createElement('div')\n            	modal.innerHTML = '您还未登录哦~'\n            	modal.id = 'modal'\n            	modal.style.display = 'none'\n            	document.body.appendChild(modal)\n            }\n            return modal\n    	}\n    })()\n    \n    // 点击打开按钮展示模态框\n    document.getElementById('open').addEventListener('click', function() {\n        // 未点击则不创建modal实例，避免不必要的内存占用\n    	const modal = new Modal()\n    	modal.style.display = 'block'\n    })\n    \n    // 点击关闭按钮隐藏模态框\n    document.getElementById('close').addEventListener('click', function() {\n    	const modal = document.getElementById('modal')\n    	if(modal) {\n    	    modal.style.display = 'none'\n    	}\n    })\n<\/script>\n</html>\n"})}),"\n",(0,d.jsx)(e.p,{children:"按钮发布上线后，过了几天太平日子。忽然有一天，产品经理找到你，说这个弹窗提示还不够明显，我们应该在弹窗弹出后把按钮的文案改为“快去登录”，同时把按钮置灰。"}),"\n",(0,d.jsx)(e.p,{children:"听到这个消息，你立刻马不停蹄地翻出之前的代码，找到了按钮的 click 监听函数，手动往里面添加了文案修改&按钮置灰逻辑。但这还没完，因为你司的几乎每个业务里都用到了这类按钮：除了“点击打开”按钮，还有“点我开始”、“点击购买”按钮等各种五花八门的按钮，这意味着你不得不深入到每一个业务的深处去给不同的按钮添加这部分逻辑。"}),"\n",(0,d.jsxs)(e.p,{children:["有的业务不在你这儿，但作为这个新功能迭代的 owner，你还需要把需求细节再通知到每一个相关同事（要么你就自己上，去改别人的代码，更恐怖），怎么想怎么麻烦。",(0,d.jsx)(e.br,{}),"\n","一个文案修改&按钮置灰尚且如此麻烦，更不要说我们日常开发中遇到的更复杂的需求变更了。"]}),"\n",(0,d.jsx)(e.p,{children:"不仅麻烦，直接去修改已有的函数体，这种做法违背了我们的“开放封闭原则”；往一个函数体里塞这么多逻辑，违背了我们的“单一职责原则”。所以说这个事儿，越想越不能这么干。"}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["我想一定会有同学质疑说为啥不把按钮抽成公共组件 Button，这样只需要在 Button 组件里修改一次逻辑就可以了。",(0,d.jsx)(e.br,{}),"\n","这种想法非常好。但注意，我们楼上的例子没有写组件直接写了 Button 标签是为了简化示例。事实上真要写组件的话，不同业务里必定有针对业务定制的不同 Button 组件，比如 MoreButton 、BeginButton等等，也是五花八门的，所以说我们仍会遇到同样的困境。"]}),"\n"]}),"\n",(0,d.jsxs)(e.p,{children:["讲真，我想任何人去做这个需求的时候，其实都压根",(0,d.jsx)(e.strong,{children:"不想去关心它现有的业务逻辑是啥样的"}),"——你说这按钮的旧逻辑是我自己写的还好，理解成本不高；万一碰上是个离职同事写的，那阅读难度谁能预料呢？我不想接锅，我只是想",(0,d.jsx)(e.strong,{children:"对它已有的功能做个拓展，只关心拓展出来的那部分新功能如何实现"}),"，对不对？"]}),"\n",(0,d.jsx)(e.p,{children:"程序员说：“我不想努力了，我想开挂”，于是便有了装饰器模式。"}),"\n",(0,d.jsxs)(e.h2,{id:"装饰器模式初相见",children:["装饰器模式初相见",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#装饰器模式初相见",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:["为了不被已有的业务逻辑干扰，当务之急就是将旧逻辑与新逻辑分离，",(0,d.jsx)(e.strong,{children:"把旧逻辑抽出去"}),"："]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-javascript",children:"// 将展示Modal的逻辑单独封装\nfunction openModal() {\n    const modal = new Modal()\n    modal.style.display = 'block'\n}\n"})}),"\n",(0,d.jsx)(e.p,{children:"编写新逻辑："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-javascript",children:"// 按钮文案修改逻辑\nfunction changeButtonText() {\n    const btn = document.getElementById('open')\n    btn.innerText = '快去登录'\n}\n\n// 按钮置灰逻辑\nfunction disableButton() {\n    const btn =  document.getElementById('open')\n    btn.setAttribute(\"disabled\", true)\n}\n\n// 新版本功能逻辑整合\nfunction changeButtonStatus() {\n    changeButtonText()\n    disableButton()\n}\n"})}),"\n",(0,d.jsx)(e.p,{children:"然后把三个操作逐个添加open按钮的监听函数里："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-javascript",children:"document.getElementById('open').addEventListener('click', function() {\n    openModal()\n    changeButtonStatus()\n})\n"})}),"\n",(0,d.jsx)(e.p,{children:"如此一来，我们就实现了“只添加，不修改”的装饰器模式，使用changeButtonStatus的逻辑装饰了旧的按钮点击逻辑。以上是ES5中的实现，ES6中，我们可以以一种更加面向对象化的方式去写："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-javascript",children:"// 定义打开按钮\nclass OpenButton {\n    // 点击后展示弹窗（旧逻辑）\n    onClick() {\n        const modal = new Modal()\n    	modal.style.display = 'block'\n    }\n}\n\n// 定义按钮对应的装饰器\nclass Decorator {\n    // 将按钮实例传入\n    constructor(open_button) {\n        this.open_button = open_button\n    }\n    \n    onClick() {\n        this.open_button.onClick()\n        // “包装”了一层新逻辑\n        this.changeButtonStatus()\n    }\n    \n    changeButtonStatus() {\n        this.changeButtonText()\n        this.disableButton()\n    }\n    \n    disableButton() {\n        const btn =  document.getElementById('open')\n        btn.setAttribute(\"disabled\", true)\n    }\n    \n    changeButtonText() {\n        const btn = document.getElementById('open')\n        btn.innerText = '快去登录'\n    }\n}\n\nconst openButton = new OpenButton()\nconst decorator = new Decorator(openButton)\n\ndocument.getElementById('open').addEventListener('click', function() {\n    // openButton.onClick()\n    // 此处可以分别尝试两个实例的onClick方法，验证装饰器是否生效\n    decorator.onClick()\n})\n"})}),"\n",(0,d.jsxs)(e.p,{children:["大家这里需要特别关注一下 ES6 这个版本的实现，这里我们把按钮实例传给了 Decorator，以便于后续 Decorator 可以对它",(0,d.jsx)(e.del,{children:"为所欲为"}),"进行逻辑的拓展。在 ES7 中，Decorator 作为一种语法被直接支持了，它的书写会变得更加简单，但背后的原理其实与此大同小异。在下一节，我们将一起去探究一下 ES7 中 Decorator 背后的故事。"]}),"\n",(0,d.jsxs)(e.h2,{id:"值得关注的细节",children:["值得关注的细节",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#值得关注的细节",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"结束了装饰器的感性认知之旅，下一节我们将直奔ES7装饰器原理&装饰器优秀案例教学。在此之前，我们对本节的一个小细节进行复盘："}),"\n",(0,d.jsxs)(e.h3,{id:"单一职责原则",children:["单一职责原则",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#单一职责原则",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:["大家可能刚刚没来得及注意，按钮新逻辑中，文本修改&按钮置灰这两个变化，被我封装在了两个不同的方法里，并以组合的形式出现在了最终的目标方法",(0,d.jsx)(e.code,{children:"changeButtonStatus"}),"里。这样做的目的是为了强化大家脑中的“单一职责”意识。将不同的职责分离，可以做到每个职责都能被灵活地复用；同时，不同职责之间无法相互干扰，不会出现因为修改了 A 逻辑而影响了 B 逻辑的狗血剧情。"]}),"\n",(0,d.jsxs)(e.p,{children:["但是，",(0,d.jsx)(e.strong,{children:"设计原则并非是板上钉钉的教条"}),"。在此处，我们的代码总共只有两行、且比较简单，逻辑分离的诉求并不特别强，分开最好，不分影响也不大（此处我们选择了拆散两段逻辑，更多地是为了强化大家的意识）。在日常开发中，当遇到两段各司其职的代码逻辑时，我们首先要有“尝试拆分”的敏感，其次要有“该不该拆”的判断——当逻辑粒度过小时，盲目拆分会导致你的项目里存在过多的零碎的小方法，这反而不会使我们的代码变得更好。"]}),"\n",(0,d.jsx)(e.p,{children:"OK，真正的战斗才刚刚开始，大家梳理一下思路，一起进入下一节的学习吧~"}),"\n",(0,d.jsx)(e.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(c,{...n})}):c(n)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["JavaScript%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F8.%E7%BB%93%E6%9E%84%E5%9E%8B%EF%BC%9A%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E8%A3%85%E4%B8%8A%E5%AE%83%EF%BC%8C%E5%B0%B1%E5%83%8F%E5%BC%80%E4%BA%86%E6%8C%82.md"]={toc:[{text:"生活中的装饰器",id:"生活中的装饰器",depth:2},{text:"装饰器的应用场景",id:"装饰器的应用场景",depth:2},{text:"装饰器模式初相见",id:"装饰器模式初相见",depth:2},{text:"值得关注的细节",id:"值得关注的细节",depth:2},{text:"单一职责原则",id:"单一职责原则",depth:3}],title:"8.结构型：装饰器模式——对象装上它，就像开了挂",headingTitle:"8.结构型：装饰器模式——对象装上它，就像开了挂",frontmatter:{}}}}]);