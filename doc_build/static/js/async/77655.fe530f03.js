"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["77655"],{793364:function(e,n,r){r.r(n),r.d(n,{default:()=>g});var s=r(552676),c=r(740453);let i=r.p+"static/image/339c07a64e856bd4c8b6f52b0a977732.5509f174.gif",d=r.p+"static/image/a5672fa1d2a7e5a9ea5d519ffdf3593d.cc2ef877.gif",t=r.p+"static/image/8422ea7743c8d1da8a90f3acb118d498.e0624db9.gif",a=r.p+"static/image/a4c3c868ed0b4a162708f20e81c43e4d.e3f6a436.gif",l=r.p+"static/image/8895a0f6fc5c1bc65d4dd7bfaa867755.6d26ff2c.gif",h=r.p+"static/image/afab463546d49ca9f5d732ad0c8142d0.f7d08814.webp",o=r.p+"static/image/7c79a0abd2d85853452b0ebea564a04b.8d98418d.webp",x=r.p+"static/image/1ef5a8c762fe593d617a04cc01e2649b.c79e632c.webp",j=r.p+"static/image/b681c63b74c609768a68e34755d19467.4b16933d.webp";function p(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",strong:"strong",ol:"ol",li:"li",pre:"pre",code:"code",img:"img",ul:"ul",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"15缓存篇-_-caching下",children:["15.缓存篇 _ Caching（下）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#15缓存篇-_-caching下",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本篇我们继续讲 Next.js 的缓存机制。今天介绍的是完整路由缓存和路由缓存。"}),"\n",(0,s.jsxs)(n.h2,{id:"1-完整路由缓存full-route-cache",children:["1. 完整路由缓存（Full Route Cache）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-完整路由缓存full-route-cache",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"11-工作原理",children:["1.1. 工作原理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-工作原理",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Next.js 在",(0,s.jsx)(n.strong,{children:"构建的时候"}),"会自动渲染和缓存路由，这样当访问路由的时候，可以直接使用缓存中的路由而不用从零开始在服务端渲染，从而加快页面加载速度。"]}),"\n",(0,s.jsx)(n.p,{children:"那你可能要问，缓存路由是个什么鬼？我听过缓存数据，但是路由怎么缓存呢？让我们复习下 Next.js 的渲染原理："}),"\n",(0,s.jsx)(n.p,{children:"Next.js 使用 React 的 API 来编排渲染。当渲染的时候，渲染工作会根据路由和 Suspense 拆分成多个 chunk，每个 chunk 分为两步进行渲染："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"React 会将服务端组件渲染成一种特殊的数据格式，我们称之为 React Server Component Payload，简写为 RSC payload。比如一个服务端组件的代码为："}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"<div>\n  Don’t give up and don’t give in.\n  <ClientComponent />\n</div>\n"})}),"\n",(0,s.jsx)(n.p,{children:"React 会将其转换为如下的 Payload："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'["$","div",null,{"children":["Don’t give up and don’t give in.", ["$","$L1",null,{}]]}]\n1:I{"id":123,"chunks":["chunk/[hash].js"],"name":"ClientComponent","async":false}\n'})}),"\n",(0,s.jsx)(n.p,{children:"这个格式针对流做了优化，它们可以以流的形式逐行从服务端发送给客户端，客户端可以逐行解析 RSC Payload，渐进式渲染页面。"}),"\n",(0,s.jsx)(n.p,{children:"当然这个 RSC payload 代码肯定是不能直接执行的，它包含的更多是信息："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"服务端组件的渲染结果"}),"\n",(0,s.jsx)(n.li,{children:"客户端组件的占位和引用文件"}),"\n",(0,s.jsx)(n.li,{children:"从服务端组件传给客户端组件的数据"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["比如这个 RSC Payload 中的 ",(0,s.jsx)(n.code,{children:"$L1"})," 表示的就是 ClientComponent，客户端会在收到 RSC Payload 后，解析下载 ClientComponent 对应的 bundle 地址，然后将执行的结果渲染到 ",(0,s.jsx)(n.code,{children:"$L1"})," 占位的位置上。"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Next.js 会用 RSC payload 和客户端组件代码在服务端渲染 HTML"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这张图生动的描述了这个过程："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"简单来说，路由渲染的产物有两个，一个是 RSC Payload，一个是 HTML。完整路由缓存，缓存的就是这两个产物。"}),"\n",(0,s.jsx)(n.p,{children:"不过路由在构建的时候是否会被缓存取决于它是静态渲染还是动态渲染。静态路由默认都是会被缓存的，动态路由因为只能在请求的时候被渲染，所以不会被缓存。这张图展示了静态渲染和动态渲染的差异："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["在这种图中，静态路由 ",(0,s.jsx)(n.code,{children:"/a"})," 因为有完整路由缓存，所以不会重新渲染一遍。动态路由 ",(0,s.jsx)(n.code,{children:"/b"})," 没有完整路由缓存，所以会重新执行一遍渲染。但这并不影响客户端的路由缓存，所以在后续的请求中都命中了路由缓存。"]}),"\n",(0,s.jsxs)(n.h3,{id:"12-持续时间",children:["1.2. 持续时间",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-持续时间",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"完整路由缓存默认是持久的，这意味着可以跨用户请求复用。"}),"\n",(0,s.jsxs)(n.h3,{id:"13-失效方式",children:["1.3. 失效方式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#13-失效方式",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"有两种方式可以使完整路由缓存失效："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"重新验证数据：重新验证数据缓存会使完整路由缓存失效，毕竟渲染输出依赖于数据"}),"\n",(0,s.jsx)(n.li,{children:"重新部署：数据缓存是可以跨部署的，但完整路由缓存会在重新部署中被清除"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"14-退出方式",children:["1.4. 退出方式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14-退出方式",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"退出完整路由缓存的方式就是将其改为动态渲染："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"使用动态函数：使用动态函数后会改为动态渲染，此时数据缓存依然可以用"}),"\n",(0,s.jsxs)(n.li,{children:["使用路由段配置项：",(0,s.jsx)(n.code,{children:"dynamic = 'force-dynamic'"}),"或 ",(0,s.jsx)(n.code,{children:"revalidate = 0"})," 这会跳过完整路由缓存和数据缓存，也就是说，每次请求时都会重新获取数据并渲染组件。此时路由缓存依然可以用，毕竟它是客户端缓存"]}),"\n",(0,s.jsx)(n.li,{children:"退出数据缓存：如果路由中有一个 fetch 请求退出了缓存，则会退出完整路由缓存。这个特定的 fetch 请求会在每次请求时重新获取，其他 fetch 请求依然会使用数据缓存。Next.js 允许这种缓存和未缓存数据的混合"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"简单来说，完整路由缓存只适用于静态渲染，在服务端保留静态渲染的产物 RSC Payload 和 HTML。"}),"\n",(0,s.jsxs)(n.p,{children:["使用动态渲染则会退出完整路由缓存。如何让路由从静态渲染转为动态渲染，也可以参考 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7342031804771565619#heading-2",target:"_blank",rel:"noopener noreferrer",children:"《渲染篇 | 服务端渲染策略》"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"2-路由缓存router-cache",children:["2. 路由缓存（Router Cache）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-路由缓存router-cache",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"21-工作原理",children:["2.1. 工作原理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-工作原理",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Next.js 有一个存放在内存中的客户端缓存，它会在用户会话期间按路由段存储 RSC Payload。这就是路由缓存。"}),"\n",(0,s.jsx)(n.p,{children:"工作原理图如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["原理图很好理解，当访问 ",(0,s.jsx)(n.code,{children:"/a"}),"的时候，因为是首次访问（",(0,s.jsx)(n.code,{children:"MISS"}),"），将 ",(0,s.jsx)(n.code,{children:"/（layout）"}),"和 ",(0,s.jsx)(n.code,{children:"/a(page)"}),"放在路由缓存中（",(0,s.jsx)(n.code,{children:"SET"}),"），当访问与 ",(0,s.jsx)(n.code,{children:"/a"}),"共享布局的 ",(0,s.jsx)(n.code,{children:"/b"}),"的时候，使用路由缓存中的 ",(0,s.jsx)(n.code,{children:"/（layout）"}),"，然后将 ",(0,s.jsx)(n.code,{children:"/b(page)"}),"放在路由缓存中（",(0,s.jsx)(n.code,{children:"SET"}),"）。再次访问 ",(0,s.jsx)(n.code,{children:"/a"}),"的时候，直接使用路由缓存中（",(0,s.jsx)(n.code,{children:"HIT"}),"）的 ",(0,s.jsx)(n.code,{children:"/(layout)"}),"和 ",(0,s.jsx)(n.code,{children:"/b(page)"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["不止如此，当用户在路由之间导航，Next.js 会缓存访问过的路由段并预获取用户可能导航的路由（基于视口内的 ",(0,s.jsx)(n.code,{children:"<Link>"})," 组件）。这会为用户带来更好的导航体验："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"即时前进和后退导航，因为访问过的路由已经被缓存，并且预获取了新路由"}),"\n",(0,s.jsx)(n.li,{children:"导航不会导致页面重载，并且会保留 React 的状态和浏览器状态"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"让我们根据原理图写个 demo 验证一下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// app/layout.js\nimport Link from "next/link";\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang="en">\n      <body>\n        <div>\n          <Link href="/a">Link to /a</Link>\n          <br />\n          <Link href="/b">Link to /b</Link>\n        </div>\n        {children}\n      </body>\n    </html>\n  )\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"两个路由的代码类似："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// app/a/page.js | app/b/page.js\nexport default function Page() {\n  return (\n    <h1>Component X</h1>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["当首次访问 ",(0,s.jsx)(n.code,{children:"/a"}),"的时候，因为 Link 组件的 ",(0,s.jsx)(n.code,{children:"/a"})," 和 ",(0,s.jsx)(n.code,{children:"/b"})," 都在视口内，所以会预加载 ",(0,s.jsx)(n.code,{children:"/a"})," 和  ",(0,s.jsx)(n.code,{children:"/b"})," 的 RSC Payload："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"截屏2023-11-28 上午11.13.19.png"})}),"\n",(0,s.jsx)(n.p,{children:"得益于预加载和缓存，无论是导航还是前进后退都非常顺滑："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"1114.gif"})}),"\n",(0,s.jsxs)(n.h3,{id:"22-持续时间",children:["2.2. 持续时间",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-持续时间",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"路由缓存存放在浏览器的临时缓存中，有两个因素决定了路由缓存的持续时间："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Session，缓存在导航时持续存在，当页面刷新的时候会被清除"}),"\n",(0,s.jsxs)(n.li,{children:["自动失效期：单个路由段会在特定时长后自动失效","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"如果路由是静态渲染，持续 5 分钟"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"如果路由是动态渲染，持续 30s"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"比如上面的 demo 中如果等 5 分钟后再去点击，就会重新获取新的 RSC Payload"}),"\n",(0,s.jsxs)(n.p,{children:["通过添加 ",(0,s.jsx)(n.code,{children:"prefetch={true}"}),"（Link 组件的 prefetch 默认就为 true）或者在动态渲染路由中调用 ",(0,s.jsx)(n.code,{children:"router.prefetch"}),"，可以进入缓存 5 分钟。"]}),"\n",(0,s.jsxs)(n.h3,{id:"23-失效方式",children:["2.3. 失效方式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-失效方式",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"有两种方法可以让路由缓存失效："})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["在 Server Action 中","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["通过 ",(0,s.jsx)(n.code,{children:"revalidatePath"})," 或 ",(0,s.jsx)(n.code,{children:"revalidateTag"})," 重新验证数据"]}),"\n",(0,s.jsxs)(n.li,{children:["使用  ",(0,s.jsx)(n.code,{children:"cookies.set"})," 或者 ",(0,s.jsx)(n.code,{children:"cookies.delete"})," 会使路由缓存失效，这是为了防止使用 cookie 的路由过时（如身份验证）"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["调用 ",(0,s.jsx)(n.code,{children:"router.refresh"})," 会使路由缓存失效并发起一个重新获取当前路由的请求"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"24-退出方式",children:["2.4. 退出方式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24-退出方式",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"无法退出路由缓存"}),"。你可以通过给 ",(0,s.jsx)(n.code,{children:"<Link>"})," 组件的 ",(0,s.jsx)(n.code,{children:"prefetch"})," 传递 ",(0,s.jsx)(n.code,{children:"false"})," 来退出预获取，但依然会临时存储路由段 30s，这是为了实现嵌套路由段之间的即时导航。此外访问过的路由也会被缓存。"]}),"\n",(0,s.jsxs)(n.h3,{id:"25-实战体会",children:["2.5. 实战体会",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#25-实战体会",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这个时候你可能觉得路由缓存还蛮不错，但是让我们写个项目，在实战中感受下路由缓存有的时候让人多头疼吧！"}),"\n",(0,s.jsx)(n.p,{children:"目录结构如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"app                  \n├─ (cache)       \n│  ├─ about          \n│  │  └─ page.js     \n│  ├─ settings       \n│  │  └─ page.js     \n│  ├─ layout.js      \n│  └─ loading.js         \n"})}),"\n",(0,s.jsxs)(n.p,{children:["其中 ",(0,s.jsx)(n.code,{children:"app/(cache)/layout.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import Link from \'next/link\'\n\nexport const dynamic = \'force-dynamic\'\n\nexport default function CacheLayout({\n  children,\n}) {\n  return (\n    <section className="p-5">\n        <nav className="flex items-center justify-center gap-10 text-blue-600 mb-6">\n          <Link href="/about">About</Link>\n          <Link href="/settings">Settings</Link>\n        </nav>\n      {children}\n    </section>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"app/(cache)/loading.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'export default function DashboardLoading() {\n  return  <div className="h-60 flex-1 rounded-xl bg-indigo-500 text-white flex items-center justify-center">Loading</div>\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"app/(cache)/about/page.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const sleep = ms => new Promise(r => setTimeout(r, ms));\n\nexport default async function About() {\n  await sleep(2000)\n  return (\n    <div className="h-60 flex-1 rounded-xl bg-teal-400 text-white flex items-center justify-center">Hello, About! {new Date().toLocaleString()}</div>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"app/(cache)/settings/page.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const sleep = ms => new Promise(r => setTimeout(r, ms));\n\nexport default async function Settings() {\n  await sleep(2000)\n  return (\n    <div className="h-60 flex-1 rounded-xl bg-teal-400 text-white flex items-center justify-center">Hello, Settings! {new Date().toLocaleString()}</div>\n  )\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"运行生产版本，交互效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"cache-13.gif"})}),"\n",(0,s.jsx)(n.p,{children:"交互效果看起来很正常是不是？但是注意："}),"\n",(0,s.jsxs)(n.p,{children:["当我们刷新页面的时候，",(0,s.jsx)(n.code,{children:"/about"})," 出现了 loading 加载，当我们首次点击 Settings 导航至 ",(0,s.jsx)(n.code,{children:"/settings"})," 的时候，也出现了 loading 加载。然而当我们再点击 About、Settings 的时候就没有 loading 加载效果了，不仅如此，查看网络请求，甚至都没有发送网络请求。"]}),"\n",(0,s.jsxs)(n.p,{children:["这就是客户端路由缓存的功效。尤其是搭配 ",(0,s.jsx)(n.code,{children:"<Link>"})," 标签导航的时候，会直接从路由缓存中获取 RSC，所以当导航的时候，连时间都没有改变。"]}),"\n",(0,s.jsx)(n.p,{children:"如果我希望每次点击的时候都重新加载页面呢？"}),"\n",(0,s.jsxs)(n.p,{children:["你可能会想，那就给 About、Settings 这两个页面加上 ",(0,s.jsx)(n.code,{children:"dynamic"}),"、",(0,s.jsx)(n.code,{children:"revalidate"})," 等路由段配置项，让静态渲染转为动态渲染。但其实我们已经在布局中配置了 ",(0,s.jsx)(n.code,{children:"const dynamic = 'force-dynamic'"}),"，现在就是动态渲染，动态渲染只能让页面刷新或者初次请求的时候时间是准确的，但是导航的时候，因为客户端缓存的缘故，依然不会更新。"]}),"\n",(0,s.jsx)(n.p,{children:"那么我们该怎么办呢？"}),"\n",(0,s.jsx)(n.p,{children:"第一种方式是等。客户端缓存是有自动失效期的，动态渲染 30s，静态渲染 5 分钟。现在是动态渲染，等待 30s 后再点击 About、Settings 就会重新发送请求，显示正确的时间。"}),"\n",(0,s.jsxs)(n.p,{children:["第二种方式是不用 Link 标签，改用原生的 ",(0,s.jsx)(n.code,{children:"<a>"})," 标签。不过这种方式会导致页面刷新。"]}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"app/(cache)/layout.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import Link from \'next/link\'\n\nexport const dynamic = \'force-dynamic\'\n\nexport default function CacheLayout({\n  children,\n}) {\n  return (\n    <section className="p-5">\n        <nav className="flex items-center justify-center gap-10 text-blue-600 mb-6">\n          <a href="/about">About</a>\n          <a href="/settings">Settings</a>\n        </nav>\n      {children}\n    </section>\n  )\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"运行生产版本，交互效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"cache-14.gif"})}),"\n",(0,s.jsx)(n.p,{children:"第三种方式是参照让路由缓存失效的方式：一种是使用 Server Actions，不过这里我们用不到 Server Actions。一种是调用 router.refresh，但是使用 router 需要声明为客户端组件，这就需要将布局改为客户端组件，虽然有点糟糕，但是也能用。"}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"app/(cache)/layout.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function CacheLayout({\n  children,\n}) {\n  const router = useRouter()\n  return (\n    <section className=\"p-5\">\n        <nav className=\"flex items-center justify-center gap-10 text-blue-600 mb-6\">\n          <button onClick={() => {\n            router.push('/about')\n            router.refresh()\n          }}>About</button>\n          <button onClick={() => {\n            router.push('/settings')\n            router.refresh()\n          }}>Settings</button>\n        </nav>\n      {children}\n    </section>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后给 ",(0,s.jsx)(n.code,{children:"app/(cache)/about/page.js"})," 和 ",(0,s.jsx)(n.code,{children:"app/(cache)/about/page.js"})," 添加代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export const dynamic = 'force-dynamic'\n"})}),"\n",(0,s.jsx)(n.p,{children:"目的将其转为动态渲染。运行生产版本，效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"cache-16.gif"})}),"\n",(0,s.jsx)(n.p,{children:"第四种方式跟第三种方式都是用 router.refresh，不过实现方式不同。示例代码如下："}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"app/(cache)/navigation-events.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"'use client'\n \nimport { useEffect } from 'react'\nimport { usePathname, useSearchParams } from 'next/navigation'\nimport { useRouter } from 'next/navigation'\n\nexport function NavigationEvents() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  const router = useRouter()\n  \n  useEffect(() => {\n    router.refresh()\n  }, [pathname, searchParams])\n \n  return null\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"app/(cache)/layout.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import Link from 'next/link'\nimport { Suspense } from 'react'\nimport { NavigationEvents } from './navigation-events'\n\nexport const dynamic = 'force-dynamic'\n\nexport default function CacheLayout({\n  children,\n}) {\n  return (\n    <section className=\"p-5\">\n        <nav className=\"flex items-center justify-center gap-10 text-blue-600 mb-6\">\n          <Link href={`/about`}>About</Link>\n          <Link href={`/settings`}>Settings</Link>\n        </nav>\n      {children}\n      <Suspense fallback={null}>\n        <NavigationEvents />\n      </Suspense>\n    </section>\n  )\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"运行生产版本，交互效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"cache-15.gif"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"路由缓存和完整路由缓存的区别："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"路由缓存发生在用户访问期间，将 RSC Payload 暂时存储在浏览器，导航期间都会持续存在，页面刷新的时候会被清除。而完整路由缓存则会持久的将 RSC Payload 和 HTML 缓存在服务器上"}),"\n",(0,s.jsx)(n.li,{children:"完整路由缓存仅缓存静态渲染的路由，路由缓存可以应用于静态和动态渲染的路由"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在实际项目开发中，路由缓存可能是一个让人头疼的问题。因为它经常使用，但又无法退出，为此有的时候需要特殊处理，所以关于路由缓存可以多关注一下。我们在实战篇的第一个项目",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309112043122196490#heading-4",target:"_blank",rel:"noopener noreferrer",children:"《实战篇 | React Notes | 笔记预览界面》"}),"还会遇到路由缓存。"]}),"\n",(0,s.jsx)(n.p,{children:"之前说过 Next.js 会自动根据你使用的 API 做好缓存管理，具体 API 跟四种缓存的关系表为："}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"API"}),"\n",(0,s.jsx)(n.th,{children:"路由缓存"}),"\n",(0,s.jsx)(n.th,{children:"完整路由缓存"}),"\n",(0,s.jsx)(n.th,{children:"数据缓存"}),"\n",(0,s.jsx)(n.th,{children:"请求记忆"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#link",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"<Link prefetch>"})})}),"\n",(0,s.jsx)(n.td,{children:"Cache"}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#routerprefetch",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"router.prefetch"})})}),"\n",(0,s.jsx)(n.td,{children:"Cache"}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#routerrefresh",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"router.refresh"})})}),"\n",(0,s.jsx)(n.td,{children:"Revalidate"}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#fetch",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"fetch"})})}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{children:"Cache"}),"\n",(0,s.jsx)(n.td,{children:"Cache"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#fetch-optionscache",target:"_blank",rel:"noopener noreferrer",children:[(0,s.jsx)(n.code,{children:"fetch"}),"\xa0",(0,s.jsx)(n.code,{children:"options.cache"})]})}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{children:"Cache or Opt out"}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#fetch-optionsnextrevalidate",target:"_blank",rel:"noopener noreferrer",children:[(0,s.jsx)(n.code,{children:"fetch"}),"\xa0",(0,s.jsx)(n.code,{children:"options.next.revalidate"})]})}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{children:"Revalidate"}),"\n",(0,s.jsx)(n.td,{children:"Revalidate"}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#fetch-optionsnexttags-and-revalidatetag",target:"_blank",rel:"noopener noreferrer",children:[(0,s.jsx)(n.code,{children:"fetch"}),"\xa0",(0,s.jsx)(n.code,{children:"options.next.tags"})]})}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{children:"Cache"}),"\n",(0,s.jsx)(n.td,{children:"Cache"}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#fetch-optionsnexttags-and-revalidatetag",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"revalidateTag"})})}),"\n",(0,s.jsx)(n.td,{children:"Revalidate (Server Action)"}),"\n",(0,s.jsx)(n.td,{children:"Revalidate"}),"\n",(0,s.jsx)(n.td,{children:"Revalidate"}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#revalidatepath",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"revalidatePath"})})}),"\n",(0,s.jsx)(n.td,{children:"Revalidate (Server Action)"}),"\n",(0,s.jsx)(n.td,{children:"Revalidate"}),"\n",(0,s.jsx)(n.td,{children:"Revalidate"}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#segment-config-options",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"const revalidate"})})}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{children:"Revalidate or Opt out"}),"\n",(0,s.jsx)(n.td,{children:"Revalidate or Opt out"}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#segment-config-options",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"const dynamic"})})}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{children:"Cache or Opt out"}),"\n",(0,s.jsx)(n.td,{children:"Cache or Opt out"}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#cookies",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"cookies"})})}),"\n",(0,s.jsx)(n.td,{children:"Revalidate (Server Action)"}),"\n",(0,s.jsx)(n.td,{children:"Opt out"}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#dynamic-functions",target:"_blank",rel:"noopener noreferrer",children:[(0,s.jsx)(n.code,{children:"headers"}),",\xa0",(0,s.jsx)(n.code,{children:"searchParams"})]})}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{children:"Opt out"}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#generatestaticparams",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"generateStaticParams"})})}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{children:"Cache"}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#react-cache-function",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"React.cache"})})}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{}),"\n",(0,s.jsx)(n.td,{children:"Cache"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"注：Cache 表示触发缓存，Revalidate 表示触发重新验证，Opt out 表示触发退出缓存"}),"\n",(0,s.jsx)(n.p,{children:"在开发项目中遇到缓存问题的时候，可以先根据使用的 API 判断涉及的缓存类型，然后再选择合适的方式重新验证或者退出缓存。"}),"\n",(0,s.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching",target:"_blank",rel:"noopener noreferrer",children:"Building Your Application: Caching | Next.js"})}),"\n"]})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}let g=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F15.%E7%BC%93%E5%AD%98%E7%AF%87%20_%20Caching%EF%BC%88%E4%B8%8B%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. 完整路由缓存（Full Route Cache）",id:"1-完整路由缓存full-route-cache",depth:2},{text:"1.1. 工作原理",id:"11-工作原理",depth:3},{text:"1.2. 持续时间",id:"12-持续时间",depth:3},{text:"1.3. 失效方式",id:"13-失效方式",depth:3},{text:"1.4. 退出方式",id:"14-退出方式",depth:3},{text:"2. 路由缓存（Router Cache）",id:"2-路由缓存router-cache",depth:2},{text:"2.1. 工作原理",id:"21-工作原理",depth:3},{text:"2.2. 持续时间",id:"22-持续时间",depth:3},{text:"2.3. 失效方式",id:"23-失效方式",depth:3},{text:"2.4. 退出方式",id:"24-退出方式",depth:3},{text:"2.5. 实战体会",id:"25-实战体会",depth:3},{text:"总结",id:"总结",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"15.缓存篇 _ Caching（下）",headingTitle:"15.缓存篇 _ Caching（下）",frontmatter:{}}}}]);