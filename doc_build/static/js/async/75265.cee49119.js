"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["75265"],{716616:function(n,e,t){n.exports=t.p+"static/image/d5c54398ad9bee7003cc3c30a397d7bc.68e50759.webp"},772413:function(n,e,t){t.r(e),t.d(e,{default:()=>M});var o=t(552676),s=t(740453);let c=t.p+"static/image/c9db949bccbd35dad261a3299d51a04f.a97a5613.webp",a=t.p+"static/image/3804678f4d0908c3b5671062c450c011.b07756e1.gif";var i=t(716616);let r=t.p+"static/image/c33f0e70ca5c9ebd7850e126de5a3f9c.7c9a62ea.gif",p=t.p+"static/image/e7d4f5a4e3d9f6b9d2864d41f6f43f0c.dd241ee7.webp",d=t.p+"static/image/3e51324615874674f38f8adf2daee8ff.1e1c5001.webp",l=t.p+"static/image/842c94749751076fbc2f3ac237ec7f09.ddf316b4.webp",m=t.p+"static/image/242925aba8890c87f90ab9d5b641b171.0e0840bb.webp",g=t.p+"static/image/40c6e93b5913147ddb7da39f93433d12.558a7cef.webp",u=t.p+"static/image/cac73923f31d19f01bc0dbc101ed3dc7.0ec8536a.gif",x=t.p+"static/image/bc9a10faa30bab600ace94d88d0aac79.946b6846.gif",f=t.p+"static/image/06a24c61112afa4119bc41cd20cb9dc2.4fd58474.webp",h=t.p+"static/image/314b51d713da1dc513a47b479b35c4cb.3b19bc58.webp",v=t.p+"static/image/c76549ea28612ab32cbb697b29a2349a.460d7622.webp",j=t.p+"static/image/e6ec435f7860c681c506cb21c1eec314.6595e9ac.webp",C=t.p+"static/image/bbf21dff91cca5cb7d6dde5dbd3a4620.01d57e05.gif",b=t.p+"static/image/a796d7fd6aad12236c5eeec048c0b457.01ea7cd5.webp",N=t.p+"static/image/58de9357bf6df3dd0118459882d18824.bcc296d7.webp",w=t.p+"static/image/46698489c1f0724665e31df08044b076.0343a7a4.webp",E=t.p+"static/image/11af785ca7d56e51ea05d99a3c433f36.c8d72a3b.gif",S=t.p+"static/image/8235a8cbb89bc1edfdbf3bd755fbd452.3b07572d.webp",y=t.p+"static/image/36f022e235b05b91b6d340bbb32a5718.12008a62.webp",k=t.p+"static/image/8164b76b9edda1881a57d7881e544bee.55585da5.webp",P=t.p+"static/image/caf658685159205f7fa11341f76d9ec1.8746b389.webp",I=t.p+"static/image/e20423a92a18a6505729143710b3ade3.e6fb0ff8.webp",A=t.p+"static/image/1f8bb2b3d9787ffaf08137b95f7421f6.29aa1d91.webp",B=t.p+"static/image/9d37b6cc64746fd61389c9f9bd47a06d.5e32cf06.webp",T=t.p+"static/image/19a38acb76b14142f5bdeb6224081a13.c3108a3c.webp",_=t.p+"static/image/fba7720ac89e50b3573005b62d6d37d3.91429315.gif";function L(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"第73章低代码编辑器事件绑定",children:["第73章—低代码编辑器：事件绑定",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第73章低代码编辑器事件绑定",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"\uFEFF这节我们来实现下事件绑定。"}),"\n",(0,o.jsx)(e.p,{children:"现在看下 amis 里事件绑定的流程："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:_,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"选中组件，在事件面板会列出可以绑定的事件。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:T,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"选中某个事件之后，可以添加动作："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:B,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"你可以添加自定义执行的 JS 代码。"}),"\n",(0,o.jsx)(e.p,{children:"或者执行一些内置的动作，比如跳转链接。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:A,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"还可以调用别的组件的方法，比如修改某个组件的显示隐藏："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:I,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这节我们就实现下。"}),"\n",(0,o.jsx)(e.p,{children:"首先，不同组件可绑定的事件是不同的："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:P,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:k,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这明显也是需要配置的。"}),"\n",(0,o.jsx)(e.p,{children:"我们在 componentConfig 里加上这个配置："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:y,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"export interface ComponentEvent {\n    name: string\n    label: string\n}\n\nexport interface ComponentConfig {\n    name: string;\n    defaultProps: Record<string, any>,\n    desc: string;\n    setter?: ComponentSetter[];\n    stylesSetter?: ComponentSetter[];\n    events?: ComponentEvent[];\n    dev: any;\n    prod: any;\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"然后给 Button 组件配置一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:S,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"events: [\n    {\n        name: 'onClick',\n        label: '点击事件',\n    },\n    {\n        name: 'onDoubleClick',\n        label: '双击事件'\n    },\n],\n"})}),"\n",(0,o.jsx)(e.p,{children:"改下 Setting/ComponentEvent.tsx 组件，把事件渲染出来："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Collapse, Input, Select, CollapseProps} from 'antd';\nimport { useComponetsStore } from '../../stores/components';\nimport { useComponentConfigStore } from '../../stores/component-config';\n\nexport function ComponentEvent() {\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n\n    if (!curComponent) return null;\n\n    const items: CollapseProps['items'] = (componentConfig[curComponent.name].events || []).map(event => {\n        return {\n            key: event.name,\n            label: event.label,\n            children: <div>\n                <div className='flex items-center'>\n                    <div>动作：</div>\n                    <Select\n                        className='w-[160px]'\n                        options={[\n                            { label: '显示提示', value: 'showMessage' },\n                            { label: '跳转链接', value: 'goToLink' },\n                        ]}\n                        value={curComponent?.props?.[event.name]?.type}\n                    />\n                </div>\n            </div>\n        }\n    })\n\n    return <div className='px-[10px]'>\n        <Collapse className='mb-[10px]' items={items}/>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"根据 curComponent 从 componentConfig 取出对应组件的 events 配置。"}),"\n",(0,o.jsx)(e.p,{children:"用 antd 的 Collapse 组件渲染。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:E,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样选中按钮组件的时候，就会渲染出它可以绑定的事件。"}),"\n",(0,o.jsx)(e.p,{children:"内置了两个动作：显示提示、跳转链接"}),"\n",(0,o.jsx)(e.p,{children:"当选择某个动作的时候，我们把它保存到 store 里。"}),"\n",(0,o.jsx)(e.p,{children:"比如 onClick 选择了 gotoLink 的动作，那就会在 component.props 上添加这样一个属性："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"onClick: {\n    type: 'gotoLink'\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:w,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"onChange={(value) => { selectAction(event.name, value) }}\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"function selectAction(eventName: string, value: string) {\n    if (!curComponentId) return;\n\n    updateComponentProps(curComponentId, { [eventName]: { type: value, } })\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"然后当切换到不同 action 的时候，显示对应的表单："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:N,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:b,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Collapse, Input, Select, CollapseProps} from 'antd';\nimport { useComponetsStore } from '../../stores/components';\nimport { useComponentConfigStore } from '../../stores/component-config';\n\nexport function ComponentEvent() {\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n\n    if (!curComponent) return null;\n\n    function selectAction(eventName: string, value: string) {\n        if (!curComponentId) return;\n\n        updateComponentProps(curComponentId, { [eventName]: { type: value, } })\n    }\n\n    function urlChange(eventName: string, value: string) {\n        if (!curComponentId) return;\n\n        updateComponentProps(curComponentId, {\n          [eventName]: {\n            ...curComponent?.props?.[eventName],\n            url: value\n          }\n        })\n    }\n\n    const items: CollapseProps['items'] = (componentConfig[curComponent.name].events || []).map(event => {\n        return {\n            key: event.name,\n            label: event.label,\n            children: <div>\n                <div className='flex items-center'>\n                    <div>动作：</div>\n                    <Select\n                        className='w-[160px]'\n                        options={[\n                            { label: '显示提示', value: 'showMessage' },\n                            { label: '跳转链接', value: 'goToLink' },\n                        ]}\n                        onChange={(value) => { selectAction(event.name, value) }}\n                        value={curComponent?.props?.[event.name]?.type}\n                    />\n                </div>\n                {\n                    curComponent?.props?.[event.name]?.type === 'goToLink' && (\n                        <div className='mt-[10px]'>\n                          <div className='flex items-center gap-[10px]'>\n                            <div>链接</div>\n                            <div>\n                              <Input\n                                onChange={(e) => { urlChange(event.name, e.target.value) }}\n                                value={curComponent?.props?.[event.name]?.url}\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      )\n                }\n            </div>\n        }\n    })\n\n    return <div className='px-[10px]'>\n        <Collapse className='mb-[10px]' items={items}/>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:C,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"当切换动作为跳转链接的时候，就会显示 url 的输入框。"}),"\n",(0,o.jsx)(e.p,{children:"输入 url 后，可以在 json 里看到这个信息："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:j,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"那渲染的时候根据这个绑定 click 事件就好了。"}),"\n",(0,o.jsx)(e.p,{children:"改下 Preview 组件："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:v,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:h,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"根据 componentConfig 里的事件类型给组件绑定事件。"}),"\n",(0,o.jsx)(e.p,{children:"如果有 components.props 里如果有 goToLink 的配置，就跳转链接。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import React from "react";\nimport { useComponentConfigStore } from "../../stores/component-config";\nimport { Component, useComponetsStore } from "../../stores/components"\n\nexport function Preview() {\n    const { components } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n\n    function handleEvent(component: Component) {\n        const props: Record<string, any> = {};\n\n        componentConfig[component.name].events?.forEach((event) => {\n            const eventConfig = component.props[event.name];\n\n            if (eventConfig) {\n                const { type } = eventConfig;\n\n                props[event.name] = () => {\n                    if (type === \'goToLink\' && eventConfig.url) {\n                        window.location.href = eventConfig.url;\n                    }\n                }\n            }\n        })\n        return props;\n    }\n\n    function renderComponents(components: Component[]): React.ReactNode {\n        return components.map((component: Component) => {\n            const config = componentConfig?.[component.name]\n\n            if (!config?.prod) {\n                return null;\n            }\n            \n            return React.createElement(\n                config.prod,\n                {\n                    key: component.id,\n                    id: component.id,\n                    name: component.name,\n                    styles: component.styles,\n                    ...config.defaultProps,\n                    ...component.props,\n                    ...handleEvent(component)\n                },\n                renderComponents(component.children || [])\n            )\n        })\n    }\n\n    return <div>\n        {renderComponents(components)}\n    </div>\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"然后组件里接收这个参数："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:f,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:x,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样，我们第一个动作就完成了。"}),"\n",(0,o.jsx)(e.p,{children:"对比下 amis 里的实现："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:u,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"没跳转是因为 amis 在预览模式下禁止了跳转："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:g,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"虽然交互有点区别，但流程是一样的。"}),"\n",(0,o.jsx)(e.p,{children:"看下 amis 的 json："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:m,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"也是把动作信息记录在 json 里，渲染的时候用这些来绑定事件。"}),"\n",(0,o.jsx)(e.p,{children:"动作后面会越来越多，所以最好抽成组件："}),"\n",(0,o.jsx)(e.p,{children:"新建 Setting/actions/GoToLink.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { Input } from "antd"\nimport { ComponentEvent } from "../../../stores/component-config";\nimport { useComponetsStore } from "../../../stores/components";\n\nexport function GoToLink(props: { event: ComponentEvent }) {\n    const { event } = props;\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n\n    function urlChange(eventName: string, value: string) {\n        if (!curComponentId) return;\n\n        updateComponentProps(curComponentId, {\n          [eventName]: {\n            ...curComponent?.props?.[eventName],\n            url: value\n          }\n        })\n    }\n\n    return <div className=\'mt-[10px]\'>\n        <div className=\'flex items-center gap-[10px]\'>\n        <div>链接</div>\n        <div>\n            <Input\n                onChange={(e) => { urlChange(event.name, e.target.value) }}\n                value={curComponent?.props?.[event.name]?.url}\n            />\n        </div>\n        </div>\n    </div>\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"把跳转链接的表单抽离到这里："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:l,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"然后我们再实现一个动作："}),"\n",(0,o.jsx)(e.p,{children:"Setting/actions/ShowMessage.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Input, Select } from \"antd\"\nimport { ComponentEvent } from \"../../../stores/component-config\";\nimport { useComponetsStore } from \"../../../stores/components\";\n\nexport function ShowMessage(props: { event: ComponentEvent }) {\n    const { event } = props;\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n\n    function messageTypeChange(eventName: string, value: string) {\n        if (!curComponentId) return;\n\n        updateComponentProps(curComponentId, {\n          [eventName]: {\n            ...curComponent?.props?.[eventName],\n            config: {\n              ...curComponent?.props?.[eventName]?.config,\n              type: value,\n            },\n          }\n        })\n      }\n    \n    function messageTextChange(eventName: string, value: string) {\n        if (!curComponentId) return;\n\n        updateComponentProps(curComponentId, {\n            [eventName]: {\n                ...curComponent?.props?.[eventName],\n                config: {\n                    ...curComponent?.props?.[eventName]?.config,\n                    text: value,\n                },\n            },\n        })\n    }\n\n    return <div className='mt-[10px]'>\n        <div className='flex items-center gap-[10px]'>\n            <div>类型：</div>\n            <div>\n            <Select\n                style={{ width: 160 }}\n                options={[\n                    { label: '成功', value: 'success' },\n                    { label: '失败', value: 'error' },\n                ]}\n                onChange={(value) => { messageTypeChange(event.name, value) }}\n                value={curComponent?.props?.[event.name]?.config?.type}\n            />\n            </div>\n        </div>\n        <div className='flex items-center gap-[10px] mt-[10px]'>\n            <div>文本：</div>\n            <div>\n            <Input\n                onChange={(e) => { messageTextChange(event.name, e.target.value) }}\n                value={curComponent?.props?.[event.name]?.config?.text}\n            />\n            </div>\n        </div>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"和 GoToLink 差不多，只不过现在多了一个 Select 表单。"}),"\n",(0,o.jsx)(e.p,{children:"用一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:d,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"{\n    curComponent?.props?.[event.name]?.type === 'showMessage' && <ShowMessage event={event}/>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"渲染的时候做下处理："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:p,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"props[event.name] = () => {\n    if (type === 'goToLink' && eventConfig.url) {\n        window.location.href = eventConfig.url;\n    } else if (type === 'showMessage' && eventConfig.config) {\n        if (eventConfig.config.type === 'success') {\n            message.success(eventConfig.config.text);\n        } else if (eventConfig.config.type === 'error') {\n            message.error(eventConfig.config.text);\n        }\n    }\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"试一下效果："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:r,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样我们就实现了 showMessage 的动作："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:i,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"试下 amis 里的："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:a,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"一样。"}),"\n",(0,o.jsx)(e.p,{children:"当然，amis 里是支持绑定多个动作的："}),"\n",(0,o.jsx)(e.p,{children:"它的 actions 是个数组："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:c,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"我们目前只支持绑定一个 action。"}),"\n",(0,o.jsx)(e.p,{children:"这个也很简单，就是把存储结构改为数组，然后界面支持添加多个动作，大家可以自己完善。"}),"\n",(0,o.jsxs)(e.p,{children:["案例代码上传了",(0,o.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"git reset --hard 4fd81d180f8369efb4142876944b0c70a6f4cd6c\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"总结",children:["总结",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"这节我们实现了事件绑定。"}),"\n",(0,o.jsx)(e.p,{children:"我们先实现了内置动作的方式。"}),"\n",(0,o.jsx)(e.p,{children:"在 comonentConfig 里配置组件可以绑定的事件，然后在 Setting 区事件面板里展示。"}),"\n",(0,o.jsx)(e.p,{children:"可以选择绑定的动作，比如跳转链接，显示提示，输入一些参数之后，就会保存到 json 里。"}),"\n",(0,o.jsx)(e.p,{children:"然后渲染 Preview 的时候根据这些信息来绑定事件。"}),"\n",(0,o.jsx)(e.p,{children:"我们对比了下和 amis 的区别，内置动作这些的实现一样的。"}),"\n",(0,o.jsx)(e.p,{children:"当然，事件绑定还有别的方式，下节我们继续完善。"})]})}function R(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(L,{...n})}):L(n)}let M=R;R.__RSPRESS_PAGE_META={},R.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC73%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第73章—低代码编辑器：事件绑定",headingTitle:"第73章—低代码编辑器：事件绑定",frontmatter:{}}}}]);