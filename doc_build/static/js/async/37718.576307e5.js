"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["37718"],{134849:function(e,n,t){t.r(n),t.d(n,{default:()=>m});var c=t(552676),i=t(740453);let r=t.p+"static/image/1cde36209df02dc9ff8c84805fb4d44f.990124ad.webp",a=t.p+"static/image/0b1eb64746d0f7654db419c02993679c.cb1d9147.webp",d=t.p+"static/image/8de71c9b72d42ed2d0267d87c36f12c2.9554df47.webp",s=t.p+"static/image/200db1621c34db5d4758c6e3e322656a.e33b161e.webp",l=t.p+"static/image/9f6becb1a46fc47ddd4ad91b079b6439.b29c50d7.webp",o=t.p+"static/image/ded5fa5afea273ca95187a2144527ee4.3f48d9a0.webp",p=t.p+"static/image/d06998fdc1868c327270770d16e31ecc.2218526e.webp",h=t.p+"static/image/2df305b37c83048d2522f7f9d13e158b.dec143b5.webp";function x(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",img:"img",h3:"h3",pre:"pre",code:"code"},(0,i.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"18数据埋点用户数据的上报统计分析",children:["18.数据埋点：用户数据的上报统计分析",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#18数据埋点用户数据的上报统计分析",children:"#"})]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["仓库地址： ",(0,c.jsx)(n.a,{href:"https://github.com/czm1290433700/nextjs-demo",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/czm1290433700/nextjs-demo"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"上一节课，我们学习了怎么对官网应用进行上线前的压力测试，从兼容性、配置难度、上手习惯和数据结构多个方面对比了 WebBench、wrk 和 autocannon 三种方案，最终选用了 autucannon 进行应用的压力测试。它是一款基于 nodejs 实现编写的 HTTP/1.1 基准测试工具，而且兼容 Windows， Mac 和 Linux 的 环境，使用轻量，且更符合前端的开发习惯。这节课我们来学习一个部署中同样重要的阶段，数据埋点。"}),"\n",(0,c.jsxs)(n.h2,{id:"为什么要做数据埋点",children:["为什么要做数据埋点？",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么要做数据埋点",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"数据埋点是什么？简单来说，它是一种用户数据采集和上报的步骤，例如像收集用户访问、用户在页面中的一些操作等，收集这些数据是为了对站点整体状况进行分析。比如产品新上线了一个需求，怎么去判断这个需求是不是正向收益，用户对新功能更关注的点，更频繁使用的内容是哪些，从而来优化产品的方案和做出下一步的决策。可以说，数据埋点是一个C 端站点必不可少的能力，是对产品功能查漏补缺的重要手段。"}),"\n",(0,c.jsx)(n.p,{children:"埋点这么重要，那么这些用户数据是怎么上报上去的呢？这里我们需要了解“埋点事件”的概念，通常业内会把埋点事件分成全埋点、代码埋点、可视化埋点这三类，这个只是埋点内部的实现划分而已，大家并不需要太关注，可以简单把事件理解成一个 key - value 的 map，通过定义唯一的事件 key，上报对应 key 所需要的事件数据，最后汇总这些数据进行一些分析，这就是埋点事件最基础的原理了。"}),"\n",(0,c.jsxs)(n.h2,{id:"怎么进行数据埋点",children:["怎么进行数据埋点？",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#怎么进行数据埋点",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"业内有很多自研的数据埋点平台可以供大家选择，当然都是要收费的=、=。比如百度统计（原来免费，现在事件分析的部分也收敛作为付费内容了），因为埋点平台通常是一整套的数据相关的解决方案，不仅是提供埋点能力，还涵括有数据分析、爬虫检测、A/B实验、反转实验等来提供更精准的用户分析，这些如果自研需要消耗很大的人力成本和时间成本，所以大多是要收费的，往往只提供一些基础的免费能力。"}),"\n",(0,c.jsxs)(n.p,{children:["这边给大家推荐一个我们字节内部（包括在火山引擎中）在用的解决方案，我也有特意提 oncall 问过相关的 pm 同学，最近有推出一个",(0,c.jsx)(n.a,{href:"https://www.volcengine.com/activity/data1",target:"_blank",rel:"noopener noreferrer",children:"火种计划"}),"，中小型企业认证完可以免费使用 12 个月（不是推销，的确暂时没有更合适的开源免费方案0.0）。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,c.jsxs)(n.h3,{id:"如何接入埋点",children:["如何接入埋点？",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何接入埋点",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"因为我们是客户端 Web 埋点，所以我们直接引用它的 web js sdk 即可，之前我们有介绍过 nextjs 中，我们可以在 pages 目录下的 _documents 文件（模板文件）中引入对应的外部脚本，我们来做一下下面的初始化配置。"}),"\n",(0,c.jsxs)(n.p,{children:["需要注意的是，这个初始化配置分为 SaaS 版本和私有化版本，对于 SaaS 版本，就是使用火山引擎（也就是字节的 cdn 服务器）来存储对应的部署数据，详细区别大家可以参照",(0,c.jsx)(n.a,{href:"https://www.volcengine.com/docs/6285/93209",target:"_blank",rel:"noopener noreferrer",children:"开发者文档"}),"，SaaS 配置相对更简单，而且也不需要考虑私服的部署，可以理解为一条龙服务，下面以 SaaS 版本为例介绍。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'// ./pages/_document.tsx\n// ....\n<Script id="data-buried">\n  {`(function(win, export_obj) {\n      win[\'LogAnalyticsObject\'] = export_obj;\n      if (!win[export_obj]) {\n          function _collect() {\n              _collect.q.push(arguments);\n          }\n          _collect.q = _collect.q || [];\n          win[export_obj] = _collect;                \n      }\n      win[export_obj].l = +new Date();\n  })(window, \'collectEvent\');`}\n<\/Script>\n<Script\n  async\n  src="{{domain}}/collect-privity-v5.1.2.js"\n  strategy="beforeInteractive"\n><\/Script>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["这几个文件是火山引擎的初始化配置文件，接下来我们来针对我们的应用进行初始化配置，进行这一步前，我们需要一个 appid（类似123456这种纯数字id），不知道怎么获取的同学可以参照这个",(0,c.jsx)(n.a,{href:"https://www.volcengine.com/docs/6285/66205#_3-%E9%A6%96%E6%AC%A1%E8%BF%9B%E5%85%A5%E4%BA%A7%E5%93%81%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8%EF%BC%9F-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%96%B0%E5%BA%94%E7%94%A8%EF%BC%9F",target:"_blank",rel:"noopener noreferrer",children:"步骤"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"// ./pages/_document.tsx\nimport { Html, Head, Main, NextScript } from \"next/document\";\nimport Script from \"next/script\";\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n        <Script id=\"theme-script\" strategy=\"beforeInteractive\">\n          {`const item = localStorage.getItem('theme') || 'light';\n          localStorage.setItem('theme', item);\n          document.getElementsByTagName('html')[0].dataset.theme = item;`}\n        <\/Script>\n        <Script id=\"data-buried\">\n          {`(function(win, export_obj) {\n              win['LogAnalyticsObject'] = export_obj;\n              if (!win[export_obj]) {\n                  function _collect() {\n                      _collect.q.push(arguments);\n                  }\n                  _collect.q = _collect.q || [];\n                  win[export_obj] = _collect;                \n              }\n              win[export_obj].l = +new Date();\n          })(window, 'collectEvent');`}\n        <\/Script>\n        <Script\n          async\n          src=\"{{domain}}/collect-privity-v5.1.2.js\"\n          strategy=\"beforeInteractive\"\n        ><\/Script>\n        <Script id=\"init\">\n          {`window.collectEvent('init', {\n              app_id: {{APPID}}, // 把appid填进来就可以了\n              channel: 'cn', \n              log: true, \n              autotrack: false \n          });\n          window.collectEvent('start');`}\n        <\/Script>\n      </body>\n    </Html>\n  );\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"然后我们参照上面的步骤把 appid 拿到以后，就可以开始创建我们需要的埋点事件了，像 PV， UV 这些基础数据不需要我们自己上报，这些是全埋点事件，脚本默认就会帮我们上报的。SDK 初始化完成后，会自动上报一条 predefine_pageview 事件的埋点。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"至于代码埋点很简单，火山引擎会给 window 变量里写入一个 collectEvent 事件，我们通过这个创建埋点就可以了，第一个参数是事件的名称，可以自己随便定义，不重复就可，第二个参数是对应事件所上报的数据，这个上报完成以后，咱们可以在数据看板里找到对应的事件进行一些分析。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"window.collectEvent('config', {\n    language: 'cn',\n    weeks: 'Monday',\n})\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"如何创建数据看板进行数据的事件分析",children:["如何创建数据看板进行数据的事件分析？",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何创建数据看板进行数据的事件分析",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["我们在进行对应埋点后，可以在",(0,c.jsx)(n.a,{href:"https://console.volcengine.com/datafinder/app/180186/dashboard/7138946272999932447",target:"_blank",rel:"noopener noreferrer",children:"增长分析"}),"处看到我们的看板，像 PV、 UV这种全埋点应该已经创建好了一些默认的看板。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"除了默认看板，我们还可以通过点左边菜单栏的“ +” 来创建我们需要的看板。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"这里我已经创建了一个 test 的看板，我们点击添加图表 - 添加新图表 - 事件分析。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"在左边事件中，包含了默认的全埋点和我们主动上报的埋点事件，我们选取我们需要的，并且配置右边的一些正则匹配就可以创建出我们需要的图表了，然后点保存即可。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"可以看到，除了用户信息外，我们还可以上报程序的一些异常信息作为埋点内容，进行性能监控，异常汇总的操作。火山引擎是一套解决方案平台，除埋点外，火山引擎还提供了 A / B实验等能力，大家也可以去体验看看。"}),"\n",(0,c.jsxs)(n.h2,{id:"小结",children:["小结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"这节课我们学习了如何通过数据埋点的方式对用户数据进行上报统计分析，对于 C 端产品而言，用户的体验和反馈对产品的优化是有着重要意义的，数据埋点就是一种获取用户反馈和信息的高效方式，同时，数据埋点除了可以对用户数据进行上报，我们还可以对站点的报错、加载时长等进行上报，进行代码层面性能上的监控。"}),"\n",(0,c.jsx)(n.p,{children:"除压测和埋点，还有一个同样重要的知识点 SEO ，它决定了站点在搜索引擎中的排行，以及能否获得预期的流量，可以说是 C 端产品部署中最重要的部分，所以下一节课我们就来学习如何对官网项目进行 SEO 优化。"})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(x,{...e})}):x(e)}let m=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["SSR%20%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AE%98%E7%BD%91%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F18.%E6%95%B0%E6%8D%AE%E5%9F%8B%E7%82%B9%EF%BC%9A%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%8A%E6%8A%A5%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90.md"]={toc:[{text:"为什么要做数据埋点？",id:"为什么要做数据埋点",depth:2},{text:"怎么进行数据埋点？",id:"怎么进行数据埋点",depth:2},{text:"如何接入埋点？",id:"如何接入埋点",depth:3},{text:"如何创建数据看板进行数据的事件分析？",id:"如何创建数据看板进行数据的事件分析",depth:3},{text:"小结",id:"小结",depth:2}],title:"18.数据埋点：用户数据的上报统计分析",headingTitle:"18.数据埋点：用户数据的上报统计分析",frontmatter:{}}}}]);