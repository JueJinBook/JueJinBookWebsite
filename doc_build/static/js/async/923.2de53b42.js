"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["923"],{304843:function(e,n,a){a.r(n),a.d(n,{default:()=>i});var r=a(552676),d=a(740453);function s(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",strong:"strong",pre:"pre",code:"code"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"36更新操作符",children:["36.更新操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#36更新操作符",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"57-更新操作符",children:["5.7 更新操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#57-更新操作符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"如果要在云数据库中更新文档，有两种方式，一是先从数据库中使用get查询记录，然后使用JavaScipt进行修改，之后再将修改好的数据存储到数据库，也就是先查再更新；二是结合一些更新操作符来修改文档中的特定字段，也就是只更新部分字段。而针对字段有针对性的更新通常性能更好，它不需要先从服务器查询来获取记录，而且无论要修改的文档有多大，指定字段更新的内容一般都很小。"}),"\n",(0,r.jsxs)(n.h3,{id:"571-更新操作符介绍",children:["5.7.1 更新操作符介绍",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#571-更新操作符介绍",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["更新操作符可以对记录里面的字段进行",(0,r.jsx)(n.strong,{children:"字段级别"}),"的更新，也就是说更新操作符修改的只是记录里面的字段和字段值（可以是嵌套数组或对象），它是文档型数据库非常重要的操作。下面是更新操作符的字段操作符列表（数组操作符后面会介绍）："]}),"\n",(0,r.jsx)(n.p,{children:"和查询操作符不一样的是，查询操作符是写在where里用于构建查询条件，而更新操作符则写在update里，用于对记录里的字段进行字段级别的操作；而和查询操作符一样的是，我们要使用更新操作符时，可以先声明如下变量，或者和查询操作符共用："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const db = wx.cloud.database()\nconst _ = db.command\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"572-使用更新操作符操作字段",children:["5.7.2 使用更新操作符操作字段",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#572-使用更新操作符操作字段",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们可以使用set（增加一个字段或修改字段值）、remove（删除一个字段）、rename（修改字段名称）来对字段进行操作，也就是说更新操作符对记录进行的是字段级别的操作，也只能修改记录的字段，不要和其他操作弄混。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.collection(\'china\').where({\n  city:_.in(["广州","深圳","珠海","佛山","惠州","东莞","中山","江门","肇庆","香港","澳门"])\n})\n.update({\n  data:{\n    //set操作符，可以设定一个字段的值，而字段值可以为对象，当然可以不用set操作符，直接赋值一个对象给字段\n    area:_.set({    \n      name:"粤港澳大湾区",\n      en_name:"Guangdong-Hong Kong-Macao Greater Bay Area"\n    }),\n    builtup_area:_.remove(), //删除字段\n    city:_.rename("城市") //修改字段名称\n  }\n})\n.then(res=>{\n  console.log(res)\n})\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"572-原子操作与高并发",children:["5.7.2 原子操作与高并发",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#572-原子操作与高并发",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["云开发数据库针对",(0,r.jsx)(n.strong,{children:"单个文档"}),"的写write是原子操作，比如更新操作符inc、mul、addToSet，所谓原子操作就是要么写入成功，要么不成功；原子操作保证了当多个用户同时进行数据库写操作时不会出现冲突和不一致。"]}),"\n",(0,r.jsx)(n.p,{children:"当多个用户同时并发操作一个记录或一个记录某个字段的值时，比如抢购、点赞、拼团等时，使用更新操作符就不会出现冲突。不仅如此同一个记录的嵌套字段，使用更新操作符也是原子操作，因此用原子操作结合文档的嵌套设计，可以替代事务的部分功能。"}),"\n",(0,r.jsx)(n.p,{children:"比如用户在抢购时商品时，我们可以在用户支付成功的回调函数里执行update请求，使用inc更新操作符，让库存量减少："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const db = wx.cloud.database()\nconst _ = db.command\ndb.collection('shop').where({\n  _openid:'{openid}',\n  _id:\"20200702110\"\n}).update({\n  total:_.inc(-1) \n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["inc可以实现字段值原子自增或自减，",(0,r.jsx)(n.code,{children:"_.inc(1)"}),"就是字段的值自增加1，",(0,r.jsx)(n.code,{children:"_.inc(-1)"}),"就是字段的值自减1，也可以是",(0,r.jsx)(n.code,{children:"_.inc(10)"}),"一次性增加一个值，不过需要注意的是，使用inc时需要字段的值为整数，增减的值也是整数。"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}let i=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F36.%E6%9B%B4%E6%96%B0%E6%93%8D%E4%BD%9C%E7%AC%A6.md"]={toc:[{text:"5.7 更新操作符",id:"57-更新操作符",depth:2},{text:"5.7.1 更新操作符介绍",id:"571-更新操作符介绍",depth:3},{text:"5.7.2 使用更新操作符操作字段",id:"572-使用更新操作符操作字段",depth:3},{text:"5.7.2 原子操作与高并发",id:"572-原子操作与高并发",depth:3}],title:"36.更新操作符",headingTitle:"36.更新操作符",frontmatter:{}}}}]);