"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["7438"],{352275:function(e,r,n){e.exports=n.p+"static/image/5353f1adf2520e4f4adf800331b27d75.d9a99af3.webp"},740302:function(e,r,n){e.exports=n.p+"static/image/d5b944b8793cdff966631aabea7d070d.cc2f5841.webp"},81797:function(e,r,n){n.r(r),n.d(r,{default:()=>B});var d=n(552676),c=n(740453);let s=n.p+"static/image/7b7992751d8d8ba8a49e7a3dc56680f9.784f0d3d.webp",i=n.p+"static/image/b3d104aafc623a55a7b6575a616b0fa5.4b1149e8.webp",l=n.p+"static/image/9fc9762fa5616c45acc1ecd747741d6e.6750c2e0.webp",h=n.p+"static/image/19fb523b9cb365d8b49af6433b3d2100.8c0c653c.webp",o=n.p+"static/image/55e944e11d840f1ef7189870b69920e1.be46a674.webp",a=n.p+"static/image/6385752acace9d2102045a32b318057a.bc9b75a6.webp",t=n.p+"static/image/e458bf5884483f6c457e95ce0076c744.c4c9a2e5.webp",j=n.p+"static/image/d21ecbce49b02ecb921058573e17e2ab.34fed8c4.webp",x=n.p+"static/image/f3d5690060461785d26c2e6ab28af211.89a31ae1.webp",p=n.p+"static/image/a73eed08a618eaa11eaba2a4adc65fcc.3d9a7571.webp",g=n.p+"static/image/8421e6c1773c279f60f2df16eb5a074e.e20bfd63.webp";var f=n(740302),E=n(352275);let b=n.p+"static/image/8075b087eba46a909cd9fd84b775c869.cac2515f.webp",u=n.p+"static/image/dc547efde2f2559811a55cbf7fed9dda.c356a92e.webp";function m(e){let r=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",br:"br",code:"code",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",img:"img",h3:"h3",pre:"pre",h4:"h4",ol:"ol"},(0,c.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(r.h1,{id:"5递归初相见二叉树递归遍历的三种姿势",children:["5.递归初相见——二叉树递归遍历的三种姿势",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#5递归初相见二叉树递归遍历的三种姿势",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"$\\color{LightPink}{保姆式教学の}\\color{Pink}{温情提示：}$"}),"\n",(0,d.jsx)(r.p,{children:"我们之前学过数组的遍历、链表的遍历，这些线性结构的遍历考起来没有什么难度，可以理解为基本技能，一般也不会单独出题。"}),"\n",(0,d.jsxs)(r.p,{children:["但是二叉树可不一样了，这一“开叉”，它的遍历难度陡然上了一个台阶。在面试中，",(0,d.jsx)(r.strong,{children:"二叉树的各种姿势的遍历，是非常容易作为独立命题点来考察的"}),"，而且这个考察的频率极高极高。",(0,d.jsx)(r.br,{}),"\n","因此对于有志于在算法面试上求稳的同学，本节涉及的编码内容，你千万不要沉溺在“我看懂了”、“我理解了”、“我知道你说的是啥意思了”这种虚无的成就感中——假的，都是假的，只有自己写出来的代码才是真的！"]}),"\n",(0,d.jsx)(r.p,{children:"理解只是记忆的前提，只吹理解不记忆，不如回家去种地：）。"}),"\n",(0,d.jsxs)(r.p,{children:["这里我对大家的要求就是“",(0,d.jsx)(r.strong,{children:"在理解的基础上记忆"}),"”。如果你真的暂时理解不了，",(0,d.jsx)(r.code,{children:"背也要先给你自己背下来"}),"，然后带着对正确思路的记忆，重新去看解析部分里的图文（尤其是图）、反复去理解，这么整下来你不可能学不会。",(0,d.jsx)(r.br,{}),"\n","面试时见到二叉树的遍历，你不能再去想太多——没有那么多时间给你现场推理，这么熟悉的题目你没必要现场推理，你要做的是默写！默写啊！老哥们！！（捶胸顿足）"]}),"\n",(0,d.jsxs)(r.h2,{id:"二叉树的遍历命题思路解读",children:["二叉树的遍历——命题思路解读",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#二叉树的遍历命题思路解读",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"以一定的顺序规则，逐个访问二叉树的所有结点，这个过程就是二叉树的遍历。按照顺序规则的不同，遍历方式有以下四种："}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"先序遍历"}),"\n",(0,d.jsx)(r.li,{children:"中序遍历"}),"\n",(0,d.jsx)(r.li,{children:"后序遍历"}),"\n",(0,d.jsx)(r.li,{children:"层次遍历"}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"按照实现方式的不同，遍历方式又可以分为以下两种："}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"递归遍历（先、中、后序遍历）"}),"\n",(0,d.jsx)(r.li,{children:"迭代遍历（层次遍历）"}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"层次遍历的考察相对比较孤立，我们会把它放在后续的真题归纳解读环节来讲。这里我们重点要看的是先、中、后序遍历三兄弟——由于同时纠结了二叉树和“递归”两个大热命题点，又不属于“偏难怪”之流，遍历三兄弟一直是前端算法面试官们的心头好，考察热度经久不衰。"}),"\n",(0,d.jsxs)(r.h2,{id:"递归遍历初相见",children:["递归遍历初相见",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#递归遍历初相见",children:"#"})]}),"\n",(0,d.jsxs)(r.blockquote,{children:["\n",(0,d.jsx)(r.p,{children:"编程语言中，函数Func(Type a,……)直接或间接调用函数本身，则该函数称为递归函数。"}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"简单来说，当我们看到一个函数反复调用它自己的时候，递归就发生了。“递归”就意味着“反复”，像咱们之前对二叉树的定义，就可以理解为是一个递归式的定义："}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"它可以没有根结点，作为一棵空树存在"}),"\n",(0,d.jsxs)(r.li,{children:["如果它不是空树，那么必须由根结点、左子树和右子树组成，",(0,d.jsx)(r.strong,{children:"且左右子树都是二叉树"}),"。"]}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"这个定义有着这样的内涵：如果我们想要创建一个二叉树结点作为根结点，那么它左侧的子结点和右侧的子结点也都必须符合二叉树结点的定义，这意味着我们要反复地执行“创建一个由数据域、左右子树组成的结点”这个动作，直到数据被分配完为止。"}),"\n",(0,d.jsx)(r.p,{children:"结合这个定义来看，每一棵二叉树都应该由这三部分组成："}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)("img",{src:u,alt:""}),"\n对树的遍历，就可以看做是对这三个部分的遍历。这里就引出一个问题：三个部分中，到底先遍历哪个、后遍历哪个呢？我们此处其实可以穷举一下，假如在保证“左子树一定先于右子树遍历”这个前提，那么遍历的可能顺序也不过三种："]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"根结点 -> 左子树 -> 右子树"}),"\n",(0,d.jsx)(r.li,{children:"左子树 -> 根结点 -> 右子树"}),"\n",(0,d.jsx)(r.li,{children:"左子树 -> 右子树 -> 根结点"}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"上述三个遍历顺序，就分别对应了二叉树的先序遍历、中序遍历和后序遍历规则。"}),"\n",(0,d.jsxs)(r.p,{children:["在这三种顺序中，根结点的遍历分别被安排在了首要位置、中间位置和最后位置。",(0,d.jsx)(r.br,{}),"\n","所谓的“先序”、“中序”和“后序”，“先”、“中”、“后”其实就是指根结点的遍历时机。"]}),"\n",(0,d.jsxs)(r.h2,{id:"遍历方法图解与编码实现",children:["遍历方法图解与编码实现",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#遍历方法图解与编码实现",children:"#"})]}),"\n",(0,d.jsxs)(r.h3,{id:"先序遍历",children:["先序遍历",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#先序遍历",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"先序遍历的“旅行路线”如下图红色数字\n所示："}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:b,alt:""})}),"\n",(0,d.jsxs)(r.p,{children:["如果说有 N 多个子树，那么我们在每一棵子树内部，都要重复这个“旅行路线”，动画演示如下：\n",(0,d.jsx)("img",{src:E,alt:""})]}),"\n",(0,d.jsx)(r.p,{children:"这个“重复”，我们就用递归来实现。"}),"\n",(0,d.jsx)(r.p,{children:"注：上面这个二叉树的结构，大家可以试着用我们前面学过的知识编码实现一把。这里为了方便大家理解，我直接给出来了哈（记得自己回去也要试着手写一遍）："}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:'const root = {\n  val: "A",\n  left: {\n    val: "B",\n    left: {\n      val: "D"\n    },\n    right: {\n      val: "E"\n    }\n  },\n  right: {\n    val: "C",\n    right: {\n      val: "F"\n    }\n  }\n};\n'})}),"\n",(0,d.jsxs)(r.h4,{id:"递归函数的编写要点",children:["递归函数的编写要点",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#递归函数的编写要点",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"编写一个递归函数之前，大家首先要明确两样东西："}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"递归式"}),"\n",(0,d.jsx)(r.li,{children:"递归边界"}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:["递归式，它指的是你每一次重复的内容是什么。在这里，我们要做先序遍历，那么每一次重复的其实就是 ",(0,d.jsx)(r.code,{children:"根结点 -> 左子树 -> 右子树"})," 这个旅行路线。"]}),"\n",(0,d.jsxs)(r.p,{children:["递归边界，它指的是",(0,d.jsx)(r.strong,{children:"你什么时候停下来"}),"。",(0,d.jsx)(r.br,{}),"\n","在遍历的场景下，当我们发现遍历的目标树为空的时候，就意味着旅途已达终点、需要画上句号了。这个“画句号”的方式，在编码实现里对应着一个 return 语句——这就是二叉树遍历的递归边界。"]}),"\n",(0,d.jsxs)(r.h4,{id:"第一个递归遍历函数",children:["第一个递归遍历函数",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#第一个递归遍历函数",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"上面咱们已经捋清楚思路，接下来话不多说，先序遍历的编码实现："}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:"// 所有遍历函数的入参都是树的根结点对象\nfunction preorder(root) {\n    // 递归边界，root 为空\n    if(!root) {\n        return \n    }\n     \n    // 输出当前遍历的结点值\n    console.log('当前遍历的结点值是：', root.val)  \n    // 递归遍历左子树 \n    preorder(root.left)  \n    // 递归遍历右子树  \n    preorder(root.right)\n}\n"})}),"\n",(0,d.jsx)(r.p,{children:"不熟悉这种写法？不用怕，我们接下来一行一行把这段代码跑完，你就知道它在干啥了："}),"\n",(0,d.jsxs)(r.h4,{id:"图解先序遍历的完整过程",children:["图解先序遍历的完整过程",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#图解先序遍历的完整过程",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"各位现在完全可以再回过头来看一下我们前面示例的这棵二叉树："}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:f,alt:""})}),"\n",(0,d.jsxs)(r.p,{children:["我们直接把它套进 ",(0,d.jsx)(r.code,{children:"preorder"})," 函数里，一步一步来认清楚先序遍历的每一步做了什么："]}),"\n",(0,d.jsxs)(r.ol,{children:["\n",(0,d.jsxs)(r.li,{children:["调用 ",(0,d.jsx)(r.code,{children:"preorder(root)"}),"，这里 root 就是 A，它非空，所以进入递归式，输出 A 值。接着优先遍历左子树，",(0,d.jsx)(r.code,{children:"preorder(root.left)  "})," 此时为 ",(0,d.jsx)(r.code,{children:"preorder(B)  "}),"："]}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:g,alt:""})}),"\n",(0,d.jsxs)(r.ol,{start:"2",children:["\n",(0,d.jsxs)(r.li,{children:["进入 ",(0,d.jsx)(r.code,{children:"preorder(B)  "}),"的逻辑： 入参为结点 B，非空，进入递归式，输出 B 值。接着优先遍历 B 的左子树，",(0,d.jsx)(r.code,{children:"preorder(root.left)  "})," 此时为 ",(0,d.jsx)(r.code,{children:"preorder(D)  "}),"："]}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:p,alt:""})}),"\n",(0,d.jsxs)(r.ol,{start:"3",children:["\n",(0,d.jsxs)(r.li,{children:["进入 ",(0,d.jsx)(r.code,{children:"preorder(D)  "}),"的逻辑： 入参为结点 D，非空，进入递归式，输出 D 值。接着优先遍历 D 的左子树，",(0,d.jsx)(r.code,{children:"preorder(root.left)  "})," 此时为 ",(0,d.jsx)(r.code,{children:"preorder(null)"}),"：\n",(0,d.jsx)("img",{src:x,alt:""})]}),"\n",(0,d.jsxs)(r.li,{children:["进入",(0,d.jsx)(r.code,{children:"preorder(null) "}),"，发现抵达了递归边界，直接 return 掉。紧接着是 ",(0,d.jsx)(r.code,{children:"preorder(D)  "}),"的逻辑往下走，走到了 ",(0,d.jsx)(r.code,{children:"preorder(root.right) "}),"："]}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:j,alt:""})}),"\n",(0,d.jsxs)(r.ol,{start:"5",children:["\n",(0,d.jsxs)(r.li,{children:["再次进入",(0,d.jsx)(r.code,{children:"preorder(null) "}),"，发现抵达了递归边界，直接 return 掉，回到",(0,d.jsx)(r.code,{children:"preorder(D)  "}),"里。接着 ",(0,d.jsx)(r.code,{children:"preorder(D)  "}),"的逻辑往下走，发现  ",(0,d.jsx)(r.code,{children:"preorder(D)  "})," 已经执行完了。于是返回，回到",(0,d.jsx)(r.code,{children:"preorder(B) "}),"里，接着",(0,d.jsx)(r.code,{children:"preorder(B) "}),"往下走，进入 ",(0,d.jsx)(r.code,{children:"preorder(root.right) "}),"，也就是 ",(0,d.jsx)(r.code,{children:"preorder(E) "}),"："]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)("img",{src:t,alt:""}),(0,d.jsx)(r.br,{}),"\n","E 不为空，进入递归式，输出 E 值。接着优先遍历 E 的左子树，",(0,d.jsx)(r.code,{children:"preorder(root.left)  "})," 此时为 ",(0,d.jsx)(r.code,{children:"preorder(null)"}),"，触碰递归边界，直接返回 ",(0,d.jsx)(r.code,{children:"preorder(E)"}),"；继续",(0,d.jsx)(r.code,{children:"preorder(E)"}),"执行下去，是",(0,d.jsx)(r.code,{children:"preorder(root.right)  "}),"，这里 E 的 right 同样是 null，故直接返回。如此一来，",(0,d.jsx)(r.code,{children:"preorder(E)"}),"就执行完了，回到",(0,d.jsx)(r.code,{children:"preorder(B)"}),"里去；发现",(0,d.jsx)(r.code,{children:"preorder(B)"}),"也执行完了，于是回到",(0,d.jsx)(r.code,{children:"preorder(A)"}),"里去，执行",(0,d.jsx)(r.code,{children:"preorder(A)"}),"中的 ",(0,d.jsx)(r.code,{children:"preorder(root.right)"}),"。",(0,d.jsx)(r.br,{}),"\n","6. root 是A，root.right 就是 C 了，进入",(0,d.jsx)(r.code,{children:"preorder(C)"}),"的逻辑："]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)("img",{src:a,alt:""}),"\nC 不为空，进入递归式，输出 C 值。接着优先遍历 C 的左子树，",(0,d.jsx)(r.code,{children:"preorder(root.left)  "})," 此时为 ",(0,d.jsx)(r.code,{children:"preorder(null)"}),"，触碰递归边界，直接返回。继续",(0,d.jsx)(r.code,{children:"preorder(C)"}),"执行下去，是",(0,d.jsx)(r.code,{children:"preorder(root.right)  "}),"，这里 C 的 right 是 F："]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)("img",{src:o,alt:""}),"\n7. 进入",(0,d.jsx)(r.code,{children:"preorder(F)"}),"的逻辑，F 不为空，进入递归式，输出 F 值。接着优先遍历 F 的左子树，",(0,d.jsx)(r.code,{children:"preorder(root.left)  "})," 此时为 ",(0,d.jsx)(r.code,{children:"preorder(null)"}),"，触碰递归边界，直接返回 ",(0,d.jsx)(r.code,{children:"preorder(F)"}),"；继续",(0,d.jsx)(r.code,{children:"preorder(F)"}),"执行下去，是",(0,d.jsx)(r.code,{children:"preorder(root.right)  "}),"，这里 F 的 right 同样是 null，故直接返回",(0,d.jsx)(r.code,{children:"preorder(F)"}),"。此时",(0,d.jsx)(r.code,{children:"preorder(F)"}),"已经执行完了，返回",(0,d.jsx)(r.code,{children:"preorder(C)"}),"；发现",(0,d.jsx)(r.code,{children:"preorder(C)"}),"也执行完了，就回到 ",(0,d.jsx)(r.code,{children:"preorder(A)"}),"；发现",(0,d.jsx)(r.code,{children:"preorder(A)"}),"作为递归入口，它的逻辑也已经执行完了，于是我们的递归活动就正式画上了句号。到此为止，6个结点也已全部按照先序遍历顺序输出："]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:"当前遍历的结点值是： A\n当前遍历的结点值是： B\n当前遍历的结点值是： D\n当前遍历的结点值是： E\n当前遍历的结点值是： C\n当前遍历的结点值是： F\n"})}),"\n",(0,d.jsxs)(r.h3,{id:"中序遍历",children:["中序遍历",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#中序遍历",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"理解了先序遍历的过程，中序遍历就不是什么难题。唯一的区别只是把遍历顺序调换了左子树 -> 根结点 -> 右子树："}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)("img",{src:h,alt:""}),"\n若有多个子树，那么我们在每一棵子树内部，都要重复这个“旅行路线”，这个过程用动画表示如下："]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:l,alt:""})}),"\n",(0,d.jsx)(r.p,{children:"递归边界照旧，唯一发生改变的是递归式里调用递归函数的顺序——左子树的访问会优先于根结点。我们参考先序遍历的分析思路，来写中序遍历的代码："}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:"// 所有遍历函数的入参都是树的根结点对象\nfunction inorder(root) {\n    // 递归边界，root 为空\n    if(!root) {\n        return \n    }\n     \n    // 递归遍历左子树 \n    inorder(root.left)  \n    // 输出当前遍历的结点值\n    console.log('当前遍历的结点值是：', root.val)  \n    // 递归遍历右子树  \n    inorder(root.right)\n}\n"})}),"\n",(0,d.jsx)(r.p,{children:"按照中序遍历的逻辑，同样的一棵二叉树，结点内容的输出顺序如下："}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:"当前遍历的结点值是： D\n当前遍历的结点值是： B\n当前遍历的结点值是： E\n当前遍历的结点值是： A\n当前遍历的结点值是： C\n当前遍历的结点值是： F\n"})}),"\n",(0,d.jsxs)(r.h3,{id:"后序遍历",children:["后序遍历",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#后序遍历",children:"#"})]}),"\n",(0,d.jsxs)(r.p,{children:["在后序遍历中，我们先访问左子树，再访问右子树，最后访问根结点：",(0,d.jsx)(r.br,{}),"\n",(0,d.jsx)("img",{src:i,alt:""}),"\n若有多个子树，那么我们在每一棵子树内部，都要重复这个“旅行路线”："]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)("img",{src:s,alt:""}),"\n在编码实现的时候，递归边界照旧，唯一发生改变的仍然是是递归式里调用递归函数的顺序："]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:"function postorder(root) {\n    // 递归边界，root 为空\n    if(!root) {\n        return \n    }\n     \n    // 递归遍历左子树 \n    postorder(root.left)  \n    // 递归遍历右子树  \n    postorder(root.right)\n    // 输出当前遍历的结点值\n    console.log('当前遍历的结点值是：', root.val)  \n}\n"})}),"\n",(0,d.jsx)(r.p,{children:"按照后序遍历的逻辑，同样的一棵二叉树，结点内容的输出顺序如下："}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:"当前遍历的结点值是： D\n当前遍历的结点值是： E\n当前遍历的结点值是： B\n当前遍历的结点值是： F\n当前遍历的结点值是： C\n当前遍历的结点值是： A\n"})}),"\n",(0,d.jsxs)(r.h2,{id:"结语",children:["结语",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#结语",children:"#"})]}),"\n",(0,d.jsxs)(r.p,{children:["对于二叉树的先、中、后序遍历，各位只要掌握了其中一种的思路，就可以举一反三、顺势推导其它三种思路。不过，我个人的建议，仍然是以“默写”的标准来要求自己，面试时不要指望“推导”，而应该有",(0,d.jsx)(r.strong,{children:"条件反射"}),"。这样才可以尽量地提高你做题的效率，为后面真正的难题、综合性题目腾出时间。"]}),"\n",(0,d.jsx)(r.p,{children:"关于二叉树遍历类题目的讨论，这里只是一个开始。二叉树的先、中、后包括层次遍历的玩法，还有很多很多，我们在后续的真题归纳解读专题、包括末尾的大规模刷题训练中，会带大家认识更多新奇好玩的东西。"}),"\n",(0,d.jsx)(r.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function A(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,c.ah)(),e.components);return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(m,{...e})}):m(e)}let B=A;A.__RSPRESS_PAGE_META={},A.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%A2%E8%AF%95%EF%BC%9A%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%A4%A7%E5%8E%82%E7%9C%9F%E9%A2%98%E8%AE%AD%E7%BB%83%2F5.%E9%80%92%E5%BD%92%E5%88%9D%E7%9B%B8%E8%A7%81%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E7%9A%84%E4%B8%89%E7%A7%8D%E5%A7%BF%E5%8A%BF.md"]={toc:[{text:"二叉树的遍历——命题思路解读",id:"二叉树的遍历命题思路解读",depth:2},{text:"递归遍历初相见",id:"递归遍历初相见",depth:2},{text:"遍历方法图解与编码实现",id:"遍历方法图解与编码实现",depth:2},{text:"先序遍历",id:"先序遍历",depth:3},{text:"递归函数的编写要点",id:"递归函数的编写要点",depth:4},{text:"第一个递归遍历函数",id:"第一个递归遍历函数",depth:4},{text:"图解先序遍历的完整过程",id:"图解先序遍历的完整过程",depth:4},{text:"中序遍历",id:"中序遍历",depth:3},{text:"后序遍历",id:"后序遍历",depth:3},{text:"结语",id:"结语",depth:2}],title:"5.递归初相见——二叉树递归遍历的三种姿势",headingTitle:"5.递归初相见——二叉树递归遍历的三种姿势",frontmatter:{}}}}]);