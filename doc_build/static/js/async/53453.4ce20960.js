"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["53453"],{138905:function(n,e,s){s.r(e),s.d(e,{default:()=>c});var i=s(552676),r=s(740453);function t(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",blockquote:"blockquote",strong:"strong",img:"img",ol:"ol",li:"li",h3:"h3",hr:"hr"},(0,r.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"1入门篇-01创建并运行-npm-script-命令",children:["1入门篇 01：创建并运行 npm script 命令",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1入门篇-01创建并运行-npm-script-命令",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"首先介绍创建 package.json 文件的科学方法，目标是掌握 npm init 命令。然后，通过在终端中运行自动生成的 test 命令，详细讲解 npm 脚本基本执行流程。 然后，动手给项目增加 eslint 命令，熟悉创建自定义命令的基本流程。"}),"\n",(0,i.jsxs)(e.h2,{id:"用-npm-init-快速创建项目",children:["用 npm init 快速创建项目",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#用-npm-init-快速创建项目",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"开始探索 npm script 之前，我们先聊聊这些 scripts 所依赖的文件 package.json，以它为基础的 npm 则是 node.js 社区蓬勃发展的顶梁柱。"}),"\n",(0,i.jsx)(e.p,{children:"npm 为我们提供了快速创建 package.json 文件的命令 npm init，执行该命令会问几个基本问题，如包名称、版本号、作者信息、入口文件、仓库地址、许可协议等，多数问题已经提供了默认值，你可以在问题后敲回车接受默认值："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-text",children:"package name: (hello-npm-script)\nversion: (0.1.0)\ndescription: hello npm script\nentry point: (index.js)\ntest command:\ngit repository:\nkeywords: npm, script\nlicense: (MIT)\n"})}),"\n",(0,i.jsx)(e.p,{children:"上面的例子指定了描述（description）和关键字（keywords）两个字段，基本问题问完之后 npm 会把 package.json 文件内容打出来供你确认："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "name": "hello-npm-script",\n  "version": "0.1.0",\n  "description": "hello npm script",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [\n    "npm",\n    "script"\n  ],\n  "author": "wangshijun <wangshijun2010@gmail.com> (https://github.com/wangshijun)",\n  "license": "MIT"\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"按回车确认就能把package.json 的内容写到文件系统，如果要修改 package.json，可以直接用编辑器编辑，或者再次运行 npm init，npm 默认不会覆盖修改里面已经存在的信息。"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"TIP#1"}),": 嫌上面的初始化方式太啰嗦？你可以使用 npm init -f（意指 --force，或者使用 --yes）告诉 npm 直接跳过参数问答环节，快速生成 package.json。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"初始化 package.json 时的字段默认值是可以自己配置的，细心的同学可能已经发现，我上面的默认版本号是 0.1.0，而 npm 默认的版本号是 0.0.1，可以用下面的命令去修改默认配置："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:'npm config set init.author.email "wangshijun2010@gmail.com"\nnpm config set init.author.name "wangshijun"\nnpm config set init.author.url "http://github.com/wangshijun"\nnpm config set init.license "MIT"\nnpm config set init.version "0.1.0"\n'})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"TIP#2"}),": 将默认配置和 -f 参数结合使用，能让你用最短的时间创建 package.json，快去自己试试吧。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"严肃的工程师都会使用 Git 对源代码进行版本管理，在 npm init 的基础上，你可以使用 git init 来初始化 git 仓库，不再展开。"}),"\n",(0,i.jsx)(e.p,{children:"纸上得来终觉浅，想掌握 npm script，请打开终端，执行下列命令："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"cd ~\nmkdir hello-npm-script && cd $_\nnpm init\nnpm init -f\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"执行上面第 3、4 行命令时结果是否符合预期？如果不符合预期，请在下面留言，或者在读者群里反馈。"})}),"\n",(0,i.jsxs)(e.h2,{id:"用-npm-run-执行任意命令",children:["用 npm run 执行任意命令",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#用-npm-run-执行任意命令",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"使用 npm init 创建的 package.json 文件中包含了 scripts 字段："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'"scripts": {\n  "test": "echo \\"Error: no test specified\\" && exit 1"\n},\n'})}),"\n",(0,i.jsx)(e.p,{children:"在终端中运行 npm run test，能看到 Error: no test specified 的输出。npm run test 可以简写为 npm test，或更简单的 npm t，得到的结果是几乎相同的。npm test 顾名思义，就是运行项目测试，实际用法在实战环节会有介绍。"}),"\n",(0,i.jsx)(e.p,{children:"和 test 类似，start 也是 npm 内置支持的命令，但是需要先在 scripts 字段中声明该脚本的实际内容，如果没声明就执行 npm start，会直接报错。如下图所示："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2017/11/25/15ff0b3414194277?w=805&h=112&f=png&s=26451",alt:""})}),"\n",(0,i.jsx)(e.p,{children:"那么，npm 是如何管理和执行各种 scripts 的呢？作为 npm 内置的核心功能之一，npm run 实际上是 npm run-script 命令的简写。当我们运行 npm run xxx 时，基本步骤如下："}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"从 package.json 文件中读取 scripts 对象里面的全部配置；"}),"\n",(0,i.jsx)(e.li,{children:"以传给 npm run 的第一个参数作为键，本例中为 xxx，在 scripts 对象里面获取对应的值作为接下来要执行的命令，如果没找到直接报错；"}),"\n",(0,i.jsx)(e.li,{children:"在系统默认的 shell 中执行上述命令，系统默认 shell 通常是 bash，windows 环境下可能略有不同，稍后再讲。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"注意，上面这是简化的流程，更复杂的钩子机制后面章节单独介绍。"}),"\n",(0,i.jsx)(e.p,{children:"举例来说，如果 package.json 文件内容如下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "name": "hello-npm-script",\n  "devDependencies": {\n    "eslint": "latest"\n  },\n  "scripts": {\n    "eslint": "eslint **.js"\n  }\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"如果不带任何参数执行 npm run，它会列出可执行的所有命令，比如下面这样："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"Available scripts in the myproject package:\n  eslint\n    eslint **.js\n"})}),"\n",(0,i.jsx)(e.p,{children:"如果运行 npm run eslint，npm 会在 shell 中运行 eslint **.js。"}),"\n",(0,i.jsxs)(e.p,{children:["有没有好奇过上面的 eslint 命令是从哪里来的？其实，npm 在执行指定 script 之前会把 node_modules/.bin 加到环境变量 $PATH 的前面，这意味着任何内含可执行文件的 npm 依赖都可以在 npm script 中直接调用，换句话说，你不需要在 npm script 中加上可执行文件的完整路径，比如 ",(0,i.jsx)(e.code,{children:"./node_modules/.bin/eslint **.js"}),"。"]}),"\n",(0,i.jsxs)(e.h2,{id:"创建自定义-npm-script",children:["创建自定义 npm script",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#创建自定义-npm-script",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["知道如何运行 npm script 之后，接下来我们在 hello-npm-script 项目中添加有实际用途的 eslint 脚本，",(0,i.jsx)(e.a,{href:"https://eslint.org",target:"_blank",rel:"noopener noreferrer",children:"eslint"})," 是社区中接受度比较高的 javascript 风格检查工具，有大把现成的规则集可供你选择，比如 ",(0,i.jsx)(e.a,{href:"https://github.com/google/eslint-config-google",target:"_blank",rel:"noopener noreferrer",children:"google"}),"、 ",(0,i.jsx)(e.a,{href:"https://www.npmjs.com/package/eslint-config-airbnb",target:"_blank",rel:"noopener noreferrer",children:"airbnb"}),"。"]}),"\n",(0,i.jsx)(e.p,{children:"在新项目或者任何现有项目中添加 eslint 自定义脚本的步骤如下："}),"\n",(0,i.jsxs)(e.h3,{id:"1-准备被检查的代码",children:["1. 准备被检查的代码",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-准备被检查的代码",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"要做代码检查，我们必须有代码，创建 index.js 文件，输入如下内容："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const str = 'some value';\n\nfunction fn(){\n    console.log('some log');\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"2-添加-eslint-依赖",children:["2. 添加 eslint 依赖",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-添加-eslint-依赖",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"执行如下命令将 eslint 添加为 devDependencies："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"npm install eslint -D\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"3-初始化-eslint-配置",children:["3. 初始化 eslint 配置",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-初始化-eslint-配置",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"用 eslint 做检查需要配置规则集，存放规则集的文件就是配置文件，使用如下文件生成配置文件："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"./node_modules/.bin/eslint --init\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"TIP#3"}),": 把 eslint 安装为项目依赖而非全局命令，项目可移植性更高。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"在命令行提示中选择 Answer questions about your style，如下图回答几个问题，答案可以根据自己的偏好："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2017/11/25/15ff0b3ab69913bd?w=998&h=264&f=png&s=75959",alt:""})}),"\n",(0,i.jsx)(e.p,{children:"回车后根目录下就有了 .eslintrc.js 配置文件："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"module.exports = {\n  env: {\n    es6: true,\n    node: true,\n  },\n  extends: 'eslint:recommended',\n  rules: {\n    indent: ['error', 4],\n    'linebreak-style': ['error', 'unix'],\n    quotes: ['error', 'single'],\n    semi: ['error', 'always'],\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"4-添加-eslint-命令",children:["4. 添加 eslint 命令",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4-添加-eslint-命令",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"在 package.json 的 scripts 字段中新增命令 eslint："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "scripts": {\n    "eslint": "eslint *.js",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"手动修改 package.json 时一定要注意语法正确。"})}),"\n",(0,i.jsxs)(e.h3,{id:"5-运行-eslint-命令",children:["5. 运行 eslint 命令",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5-运行-eslint-命令",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"执行 npm run eslint，可以看到，按照官方推荐规则代码里有 3 处不符合规范的地方："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2017/11/25/15ff0b3dd4c03103?w=783&h=271&f=png&s=49211",alt:""})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:"如果读到这里，相信你已经完成 npm script 上手，接下来我们去探索更高级的话题。"}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.h2,{id:"20171205-增补eslint-完成-reactvuejs-代码的检查",children:["20171205 增补：eslint 完成 react、vue.js 代码的检查",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#20171205-增补eslint-完成-reactvuejs-代码的检查",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"如果需要结合 eslint 检查主流前端框架 react、vue.js，下面提供两条线索，因为官方仓库的 README 就可以作为入门文档，仔细读读相信绝大多数同学都能配置好。"}),"\n",(0,i.jsxs)(e.p,{children:["使用 ",(0,i.jsx)(e.a,{href:"https://github.com/yannickcr/eslint-plugin-react",target:"_blank",rel:"noopener noreferrer",children:"eslint-plugin-react"})," 检查 react 代码，使用 ",(0,i.jsx)(e.a,{href:"https://github.com/Intellicode/eslint-plugin-react-native",target:"_blank",rel:"noopener noreferrer",children:"react-plugin-react-native"})," 检查 react-native 代码，如果你比较懒，可以直接使用 ",(0,i.jsx)(e.a,{href:"https://www.npmjs.com/package/eslint-config-airbnb",target:"_blank",rel:"noopener noreferrer",children:"eslint-config-airbnb"}),"，里面内置了 eslint-plugin-react，新人常遇到 peerDependencies 安装失败问题可参照 npmjs 主页上的如下方法解决："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:'(\n  export PKG=eslint-config-airbnb;\n  npm info "$PKG@latest" peerDependencies --json | command sed \'s/[\\{\\},]//g ; s/: /@/g\' | xargs npm install --save-dev "$PKG@latest"\n)\n'})}),"\n",(0,i.jsxs)(e.p,{children:["推荐使用 vue.js 官方的 eslint 插件：",(0,i.jsx)(e.a,{href:"https://github.com/vuejs/eslint-plugin-vue",target:"_blank",rel:"noopener noreferrer",children:"eslint-plugin-vue"})," 来检查 vue.js 代码，具体的配置方法官方 README 写的清晰明了，这里就不赘述了。"]}),"\n",(0,i.jsx)(e.p,{children:"上面的几种 eslint 规则集的官方仓库都列出了各自支持的规则，如果你需要关闭某些规则，可以直接在自己的 .eslintrc* 里面的 rules 中配置，比如我们仓库里面的："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"module.exports = {\n  env: {\n    es6: true,\n    node: true,\n  },\n  extends: 'eslint:recommended',\n  rules: {\n    indent: ['error', 2],\n    'linebreak-style': ['error', 'unix'],\n    quotes: ['error', 'single'],\n    semi: ['error', 'always'],\n  },\n};\n"})}),"\n",(0,i.jsx)(e.p,{children:"如果你配置过程中遇到什么问题，欢迎留言或者在读者群里面交流。"})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(t,{...n})}):t(n)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E7%94%A8%20npm%20script%20%E6%89%93%E9%80%A0%E8%B6%85%E6%BA%9C%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%2F1%E5%85%A5%E9%97%A8%E7%AF%87%2001%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%BF%90%E8%A1%8C%20npm%20script%20%E5%91%BD%E4%BB%A4.md"]={toc:[{text:"用 npm init 快速创建项目",id:"用-npm-init-快速创建项目",depth:2},{text:"用 npm run 执行任意命令",id:"用-npm-run-执行任意命令",depth:2},{text:"创建自定义 npm script",id:"创建自定义-npm-script",depth:2},{text:"1. 准备被检查的代码",id:"1-准备被检查的代码",depth:3},{text:"2. 添加 eslint 依赖",id:"2-添加-eslint-依赖",depth:3},{text:"3. 初始化 eslint 配置",id:"3-初始化-eslint-配置",depth:3},{text:"4. 添加 eslint 命令",id:"4-添加-eslint-命令",depth:3},{text:"5. 运行 eslint 命令",id:"5-运行-eslint-命令",depth:3},{text:"20171205 增补：eslint 完成 react、vue.js 代码的检查",id:"20171205-增补eslint-完成-reactvuejs-代码的检查",depth:2}],title:"1入门篇 01：创建并运行 npm script 命令",headingTitle:"1入门篇 01：创建并运行 npm script 命令",frontmatter:{}}}}]);