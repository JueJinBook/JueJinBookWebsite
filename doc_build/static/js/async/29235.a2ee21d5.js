"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["29235"],{922774:function(e,n,s){s.r(n),s.d(n,{default:()=>h});var r=s(552676),c=s(740453);let i=s.p+"static/image/e2b3b86af538f54391dac907150a5631.80a62a18.webp",d=s.p+"static/image/bd668e6d585280ed5bf59aac056a4e24.00a9c14f.webp";function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",code:"code",pre:"pre",ol:"ol",li:"li",h3:"h3",blockquote:"blockquote",img:"img"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"5-基础篇高效优雅地利用正则表达式",children:["5 基础篇｜高效、优雅地利用正则表达式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-基础篇高效优雅地利用正则表达式",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在遇到模糊搜索、替换这类字符串高级操作的需求时，我们第一时间就会想到正则，这也成为了一名合格程序员的必备基础能力。",(0,r.jsx)(n.strong,{children:"在 JavaScript 中，使用正则既可以从 RegExp 对象入手，也可以从 String 的一些方法入手"}),"。它们之间有差异，但也有不少共性。在解决一个问题的时候，往往有不止一种方式。"]}),"\n",(0,r.jsx)(n.p,{children:"本章我们就来学习如何从不同的需求出发，选择最简单、高效的正则使用方法。首先，我们来看如何构造一个正则。"}),"\n",(0,r.jsxs)(n.h2,{id:"构造正则对象",children:["构造正则对象",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构造正则对象",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在 JavaScript 中构造正则对象有两种方法：一种是表达式语法，如 ",(0,r.jsx)(n.code,{children:"/.+/"}),"；一种使用 RegExp 构造函数，如 ",(0,r.jsx)(n.code,{children:'new RegExp(".+")'}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"表达式语法用来声明静态的正则，里面的内容是写死的，就如同你声明了一个字符串常量、一个数字常量一样。"}),"\n",(0,r.jsx)(n.p,{children:"而构造函数可以指定更灵活的动态内容："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const avaliableLetters = ["A", "K"].join("|");\nnew RegExp(`\\d${avaliableLetters}\\d`);\n'})}),"\n",(0,r.jsx)(n.p,{children:"事实上，RegExp 不仅仅是一个构造函数，还是一个类型转换函数，这一功能和 String、Number、Boolean 是一样的。"}),"\n",(0,r.jsx)(n.p,{children:"而且，RegExp 用作类型转换函数的话，它仍然可以处理第二个参数 flags，就如同它是一个构造函数一样："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"RegExp(\"\\w+\", 'g') // /\\w+/g\n"})}),"\n",(0,r.jsx)(n.p,{children:"不过，这两种方式还是有着细微的差别，即在于传入参数本身就是 RegExp 且不存在 flags 的情况下，作为构造函数会返回一个新的 RegExp 对象，而作为类型转换函数则会直接把参数原封不动返回："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const originReg = new RegExp(`\\w{2}`, 'g');\n\nconst typeReg = RegExp(originReg);\nconst newReg = new RegExp(originReg);\n\nconsole.log(originReg === typeReg); // true\nconsole.log(originReg === newReg); // false\n"})}),"\n",(0,r.jsx)(n.p,{children:"但是，只要传入第二个参数 flags，哪怕是空字符串，两者就都会返回新的 RegExp 对象了："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const typeReg = RegExp(originReg, "");\nconst newReg = new RegExp(originReg, "");\n\nconsole.log(originReg === typeReg); // false\nconsole.log(originReg === newReg); // false\n'})}),"\n",(0,r.jsx)(n.p,{children:"大多数场景下我们并不需要关心这种差别，因此构造正则的策略可以是这样的："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["如果是",(0,r.jsx)(n.strong,{children:"静态内容"}),"，那么建议用表达式的方式构造正则；"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["如果是",(0,r.jsx)(n.strong,{children:"动态内容"}),"，则可以用类型转换的方式构造正则。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["无论哪种方式，构造出来正则对象都是由两部分构成的：",(0,r.jsx)(n.code,{children:"source"})," 和 ",(0,r.jsx)(n.code,{children:"flags"}),"（修饰符）。如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'var reg = /\\w\\d/img;\n\nconsole.log(reg.source); // "\\w\\d"\nconsole.log(reg.flags);  // "gim"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"修饰符在字符串的搜索、替换上都起到了至关重要的作用，控制着许多 API 的行为结果"}),"。随着 ECMA262 新规范的不断引入，近年来有一些新的修饰符被加入了进来，并且浏览器的支持也比较广泛，我们必须对其有所了解，才能正确、高效地使用正则。"]}),"\n",(0,r.jsxs)(n.h2,{id:"修饰符",children:["修饰符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#修饰符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"ignoreCase（i）、multiline（m）、global（g）是最基础的三个修饰符，ES6 又引入了三个，并且都会影响到匹配的结果。"}),"\n",(0,r.jsxs)(n.h3,{id:"unicodeu",children:["unicode（u）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#unicodeu",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"unicode 修饰符允许匹配双码元字符。在过去，这样的写法也是支持的："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'"a".match(/\\u61/)\n'})}),"\n",(0,r.jsx)(n.p,{children:"但只针对于单码元字符，有了 u 修饰符，我们可以做到："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"var reg = /\\u{20bff}/u;\n\"\uD842\uDFFF\".match(reg) // ['\uD842\uDFFF', index: 0, input: '\uD842\uDFFF', groups: undefined]\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果没有 u 的支持，那么匹配双码元字符会非常别扭，几乎没有实际应用的价值："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"var reg = /\ud842\udfff/; // 不建议如此\n\"\uD842\uDFFF\".match(reg) // ['\uD842\uDFFF', index: 0, input: '\uD842\uDFFF', groups: undefined]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"dotalls",children:["dotAll（s）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dotalls",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["注意 dotAll 简写为 s，不要和正则中的 ",(0,r.jsx)(n.code,{children:"\\s"})," 混淆。dotAll 顾名思义是控制英文点号“.”的语义的。"]}),"\n",(0,r.jsx)(n.p,{children:"默认“.”能匹配任何除了换行（U+000A、U+000D、U+2028、U+2029）以外的单码元字符，开启 dotAll 之后，连这四个特殊字符也被包含了进去，看这个例子："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"`\nAB\nCD\n`.match(/A(.+)D/) // null\n\n`\nAB\nCD\n`.match(/A(.+)D/s) // ['AB\\nCD', 'B\\nC', index: 1, input: '\\nAB\\nCD\\n', groups: undefined]\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果再开启 u 修饰符，那么“.”将可以匹配任何字符。"}),"\n",(0,r.jsxs)(n.h3,{id:"stickyy",children:["sticky（y）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stickyy",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"sticky 简写为 y，意为“粘连”。开启 y 后，正则将只从上一次匹配到子串的后面一个位置开始匹配，举例说明："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"\"123456zy78\".match(/\\d{2}/g) // ['12', '34', '56', '78']\n\"123456zy78\".match(/\\d{2}/gy) // ['12', '34', '56']\n"})}),"\n",(0,r.jsx)(n.p,{children:"第二个语句由于开启了 y，在“56”后面遇到字母“zy”与正则不匹配，将不再继续，因此比第一个少了一个匹配结果。"}),"\n",(0,r.jsx)(n.p,{children:"大家可能已经注意到了，g 和 y 是有一些语义重合的，如果不开启 g，那么 y 应该也没有意义。事实上，ECMA262 规定：如果开启了 y，那么 g 修饰符将会被忽略掉。"}),"\n",(0,r.jsxs)(n.h2,{id:"字符串搜索",children:["字符串搜索",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串搜索",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"RegExp 和 String 都有函数可以执行正则搜索操作。我把实际需求从简单到复杂分成三层，分别是："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"判断有无匹配；"}),"\n",(0,r.jsx)(n.li,{children:"获取首个匹配；"}),"\n",(0,r.jsx)(n.li,{children:"获取全部匹配。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"从后向前是包容的关系，可以说我们只要掌握了最下面的那一种，所有场景都迎刃而解了，不过从执行效率和语义上来说，只要能满足需求，还是建议使用最简单、效率最高的那一种。"}),"\n",(0,r.jsxs)(n.h3,{id:"判断有无匹配",children:["判断有无匹配",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#判断有无匹配",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果仅仅需要一个布尔值，那么 RegExp 的 ",(0,r.jsx)(n.code,{children:"test"})," 函数就是不二之选："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'/\\d{2}/.test("AB23CD87K") // true\n'})}),"\n",(0,r.jsx)(n.p,{children:"如果 test 的参数不是字符串的话，它就会调用内部方法 ToString 来强制转换为字符串。注意这一步是可能抛出异常的，例如传入一个无法转换为字符串的 Symbol 实例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"/\\d{2}/.test(Symbol()) // ❌ TypeError\n"})}),"\n",(0,r.jsxs)(n.p,{children:["test 之于 RegExp 就如同 includes 之于 String，都是从左到右寻找匹配，没找到则返回 false。如果想知道匹配到的位置，String 有 indexOf，而 RegExp 仍然需要依赖 String 的一个函数，叫做 ",(0,r.jsx)(n.code,{children:"search"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"String 的 search 方法传入一个正则，从左到右返回第一个匹配到的子串的首字母位置："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'"AB23CD87K".search(/\\d{2}/) // 2\n'})}),"\n",(0,r.jsx)(n.p,{children:"这一步已经带有首个匹配的位置信息了，如果不满足于只知道位置的话，那么就进入下一层需求——获取首个匹配的全量信息。"}),"\n",(0,r.jsxs)(n.h3,{id:"获取首个匹配",children:["获取首个匹配",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#获取首个匹配",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"获取首个匹配，显然不需要 g 修饰符。这一层需求我们在 RegExp 和 String 各有方法可以实现，而且有意思的是，它们竟然是等价的："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"/\\w{4}/.exec(\"What is your name?\")  // ['What', index: 0, input: 'What is your name?', groups: undefined]\n\"What is your name?\".match(/\\w{4}/) // ['What', index: 0, input: 'What is your name?', groups: undefined]\n"})}),"\n",(0,r.jsx)(n.p,{children:"注意，只有在没有 g 的条件下它们才等价，有兴趣的同学可以试一试加上 g 修饰符后它们有怎样的输出。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"exec"})," 和 ",(0,r.jsx)(n.code,{children:"test"})," 是 RegExp 唯二的两个核心函数，而且它们之间也有着微妙的关系：test 正是依靠 exec 来实现的，甚至你也可以写出这样一个 test 出来。如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Custom test\nRegExp.prototype.test = function (str) {\n    return this.exec(str) ? true : false;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"String 的 match 与 search 一样，都会尝试把参数转换成正则。它在 ECMA262 的定义中与 exec 复用了一部分逻辑分支，在没有 g 修饰符之下刚好是等价的。"}),"\n",(0,r.jsxs)(n.p,{children:["不过大家可能发现了，exec 返回的数组不太寻常，除了它在 0 下标上有数据外，还在普通数组没有的其他属性（",(0,r.jsx)(n.code,{children:"index"}),"、",(0,r.jsx)(n.code,{children:"input"}),"、",(0,r.jsx)(n.code,{children:"groups"})," 等）上有数据。我们知道，数组本身也是对象，因此外挂其他属性是完全合法的，只是不太常见。",(0,r.jsx)(n.strong,{children:"注意这里的 index 指的就是正则匹配到的子串在原始字符串中的位置，等同于上面 search 的返回值"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"为什么要使用这么奇怪的数据结构呢？可能有一些历史原因，不过就结果上来看也是可以理解的，如果我们想匹配正则中的一部分："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"/Wh([a-z]+)\\b/.exec(\"What is your name?\") // \xa0['What', 'at', index: 0, input: 'What is your name?', groups: undefined]\n"})}),"\n",(0,r.jsx)(n.p,{children:"看到正则中的小括号了么，再看看结果，字串 “at” 出现在了数组的第二个位置上，如果你的正则有 N 个小括号匹配，那么 exec 的最终结果中就会按照顺序多出 N 个数据出来，这样的数据结构可扩展性更好一些。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["我们过去常常使用正则的 ",(0,r.jsx)(n.code,{children:"$1"}),"、",(0,r.jsx)(n.code,{children:"$2"}),"、",(0,r.jsx)(n.code,{children:"$3"}),"...属性来拿到这些值，但这些都不是标准属性，不提倡被使用。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"接下来我们提高需求难度，来到第三层。"}),"\n",(0,r.jsxs)(n.h3,{id:"获取全部匹配",children:["获取全部匹配",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#获取全部匹配",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果只是想简单地拿到所有匹配到的子串，那么使用 String 的 ",(0,r.jsx)(n.code,{children:"match"})," 就好了，只不过不同于刚才，这一次我们必须带上 g（和 y） 修饰符才行："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"\"Contributors are respected.\".match(/\\w{4}/g) // ['Cont', 'ribu', 'tors', 'resp', 'ecte']\n\"Contributors are respected.\".match(/\\w{4}/gy) // ['Cont', 'ribu', 'tors']\n"})}),"\n",(0,r.jsxs)(n.p,{children:["可惜却丢失了位置（index）信息。为了弥补这个遗憾，我们就得搬请功能最强大的 API：RegExp 的 exec 和 String 的 ",(0,r.jsx)(n.code,{children:"matchAll"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"exec 刚刚已经被用来捕获首个匹配了，不过那是在没有 g 和 y 修饰符的环境下。一旦开启这两个修饰符中的任意一个，才算是释放了 exec 的潜力。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"exec 的使用“秘诀”是遍历"}),"。比如说这样一个例子，前端收到后端发送过来的一大篇 HTML 代码，这里面会有数量不定占位符，比如 ",(0,r.jsx)(n.code,{children:"\x3c!-- video: https://someurl --\x3e"}),"，我们需要把这个占位符替换成具有丰富交互的视频播放器，怎么做呢？"]}),"\n",(0,r.jsx)(n.p,{children:"我们必然要搜索到所有的占位符位置："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const reg = /\x3c!--\\s*video:\\s*(.+)\\s*--\x3e/g;\nconst html = `\n<p>text</p>\n\x3c!-- video: http://someurl/1.mp4 --\x3e\n<div>sep</div>\n\x3c!-- video: http://someurl/2.mp4 --\x3e\n<footer></footer>\n`;\nlet result;\nwhile(result = reg.exec(html)) { // 依次调用exec\n    // ['\\x3C!-- video: http://someurl/1.mp4 --\x3e', 'http://someurl/1.mp4 ', index: 13...\n    // ['\\x3C!-- video: http://someurl/2.mp4 --\x3e', 'http://someurl/2.mp4 ', index: 65...\n    console.log(result);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["看到了吗？我们循环调用 exec，直到返回 null 为止。这里隐含着一个特性：在带有修饰符 g（或 y）的 RegExp 对象上调用 exec，RegExp 对象本身是带有状态的，这个状态就是 ",(0,r.jsx)(n.code,{children:"lastIndex"}),"，代表下一次搜索的起始位置，初始为 0。"]}),"\n",(0,r.jsx)(n.p,{children:"如果嫌 exec 使用起来麻烦，我们还有 String 的 matchAll 可用："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const result = \"What is your name?\".matchAll(/\\w{4}/g)\n// [\n//   [ 'What', index: 0, input: 'What is your name?', groups: undefined ],\n//   [ 'your', index: 8, input: 'What is your name?', groups: undefined ],\n//   [ 'name', index: 13, input: 'What is your name?', groups: undefined ]\n// ]\nArray.from(result);\n"})}),"\n",(0,r.jsx)(n.p,{children:"matchAll 的名字已经说明了它的行为特点，同时为了语义上的一致性，它强制要求传入的正则带有 g 修饰符，否则就会抛出异常。"}),"\n",(0,r.jsxs)(n.p,{children:["注意，matchAll 返回的是一个迭代器对象而不是简单的数组，你可以用 ",(0,r.jsx)(n.code,{children:"for...of"})," 来依次获取每一个匹配结果，也可以像上面那样用 ",(0,r.jsx)(n.code,{children:"Array.from"})," 来整体转换成数组。"]}),"\n",(0,r.jsx)(n.p,{children:"这就是在搜索、匹配子串上最复杂的两种方案了，现在还是更建议使用 exec，虽然麻烦一点，但因为 matchAll 是最近几年才引入的，旧一些的浏览器版本不一定都支持。"}),"\n",(0,r.jsx)(n.p,{children:"以上三种需求的渐进关系，我总结出这样一张图："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"字符串替换",children:["字符串替换",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串替换",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["严格来说，替换能力是搜索能力的子集，我们学会了搜索，知道每一个子串的位置了，自然就能够实现替换。不过 String 还是提供了两个函数，",(0,r.jsx)(n.code,{children:"replace"})," 和 ",(0,r.jsx)(n.code,{children:"replaceAll"}),"，能简化这一过程。和上面一样，替换也可以分为只替换第一个和替换全部这两种需求。"]}),"\n",(0,r.jsx)(n.p,{children:"如果只需要替换第一个匹配的话，那么用 replace 即可，参数可以是字符串，也可以是不带 g 的正则："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'"ABCB".replace(\'B\', "-") // "A-CB"\n"ABCB".replace(/B/, "-") // "A-CB"\n'})}),"\n",(0,r.jsx)(n.p,{children:"如果要替换全部匹配的话，可以依旧使用 replace，只不过必须传入带 g 的正则："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'"ABCB".replace(/B/g, "-") // "A-C-"\n'})}),"\n",(0,r.jsx)(n.p,{children:"在同样的参数下，也可以使用 replaceAll。replaceAll 相比 replace 而言可以实现在传入字符串参数的情况下也能做到全部替换："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'"ABCB".replaceAll(\'B\', "-") // "A-C-"\n'})}),"\n",(0,r.jsx)(n.p,{children:"我总结出下面这张图，可以用作使用哪一个函数的判断之用："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"虽然正则表达式本身的语法可以写得很复杂，但其实从编程语言上来说只需要一个 API 就够了。像 JavaScript 这样，我们完全可以用 RegExp 的 exec 函数来实现任意的搜索和替换功能，剩余的其他 API 可以认为是为了使用上的方便，在不同需求下进行的一层包装。"}),"\n",(0,r.jsx)(n.p,{children:"从这一点上看，JavaScript 提供的这么多与正则有关的函数并没有那么杂乱，你可以这样记："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"test、search 就是用来判断是否匹配的"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"exec、match、matchAll 就是用来获取匹配结果的"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"replace、replaceAll 就是用来做替换的"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"ES6 新增的三个修饰符也需要关注，在特殊的需求下往往能取得“四两拨千斤”的效果。"})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}let h=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["JavaScript%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6%2F5%20%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BD%9C%E9%AB%98%E6%95%88%E3%80%81%E4%BC%98%E9%9B%85%E5%9C%B0%E5%88%A9%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md"]={toc:[{text:"构造正则对象",id:"构造正则对象",depth:2},{text:"修饰符",id:"修饰符",depth:2},{text:"unicode（u）",id:"unicodeu",depth:3},{text:"dotAll（s）",id:"dotalls",depth:3},{text:"sticky（y）",id:"stickyy",depth:3},{text:"字符串搜索",id:"字符串搜索",depth:2},{text:"判断有无匹配",id:"判断有无匹配",depth:3},{text:"获取首个匹配",id:"获取首个匹配",depth:3},{text:"获取全部匹配",id:"获取全部匹配",depth:3},{text:"字符串替换",id:"字符串替换",depth:2},{text:"小结",id:"小结",depth:2}],title:"5 基础篇｜高效、优雅地利用正则表达式",headingTitle:"5 基础篇｜高效、优雅地利用正则表达式",frontmatter:{}}}}]);