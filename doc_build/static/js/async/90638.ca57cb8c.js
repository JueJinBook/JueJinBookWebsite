"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["90638"],{275956:function(e,n,i){e.exports=i.p+"static/image/66aca542bd1bcafed12b6517093fb8e8.879bf77c.webp"},341322:function(e,n,i){i.r(n),i.d(n,{default:()=>g});var l=i(552676),s=i(740453);let r=i.p+"static/image/9005644e30d9ac4c2dc4996ff08ed776.3938f6c7.webp",d=i.p+"static/image/dde829f256ee6154f6ddf3d82164035d.8076c226.webp",c=i.p+"static/image/c68826e7817efa241766b87e6c5cc0a5.ebe96634.webp",h=i.p+"static/image/8b5008313144f4c71936f17d389e120a.ffc82b96.webp",t=i.p+"static/image/34b289203e336d50966f1516776e8247.6ede5bbd.webp",o=i.p+"static/image/209f07b376af9a7352e984322954c95f.93000a1a.webp",a=i.p+"static/image/49d8b1f34f9a06014cbe9fc0f562f6cd.96fc1c9b.webp",p=i.p+"static/image/e3c35678180205141f173686d98791d0.b9ddfc5d.webp",x=i.p+"static/image/ce8e04e5d9f12353a980436a9e4aca35.05eccdee.webp";var j=i(275956);function u(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",img:"img",blockquote:"blockquote",h3:"h3",strong:"strong",ul:"ul",li:"li",ol:"ol",pre:"pre"},(0,s.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.h1,{id:"8双引擎架构_-vite-是如何站在巨人的肩膀上实现的",children:["8.双引擎架构_ Vite 是如何站在巨人的肩膀上实现的？",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8双引擎架构_-vite-是如何站在巨人的肩膀上实现的",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["在前面的章节中，我们学习了很多 Vite 使用和项目搭建的内容。接下来让我们将目光集中到 Vite 本身的架构上，一起聊聊它是如何站在巨人的肩膀上实现出来的。所谓的",(0,l.jsx)(n.code,{children:"巨人"}),"，指的就是 Vite 底层所深度使用的两个构建引擎——",(0,l.jsx)(n.code,{children:"Esbuild"}),"和",(0,l.jsx)(n.code,{children:"Rollup"}),"。"]}),"\n",(0,l.jsxs)(n.p,{children:["那么，这两个构建引擎对于 Vite 来说究竟有多重要？在 Vite 的架构中，两者各自扮演了什么样的角色？本小节，我将和你一起拆解 Vite 的双引擎架构，深入分析",(0,l.jsx)(n.code,{children:"Esbuild"}),"和",(0,l.jsx)(n.code,{children:"Rollup"}),"究竟在 Vite 中做了些什么。"]}),"\n",(0,l.jsxs)(n.h2,{id:"vite-架构图",children:["Vite 架构图",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vite-架构图",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["很多人对 Vite 的双引擎架构仅仅停留在",(0,l.jsx)(n.code,{children:"开发阶段使用 Esbuild，生产环境用 Rollup"}),"的阶段，殊不知，Vite 真正的架构远没有这么简单。一图胜千言，这里放一张 Vite 架构图："]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,l.jsx)(n.p,{children:"相信对于 Vite 的双引擎架构，你可以从图中略窥一二。在接下来的内容中，我会围绕这张架构图展开双引擎的介绍，到时候你会对这份架构图理解得更透彻。"}),"\n",(0,l.jsxs)(n.h2,{id:"性能利器esbuild",children:["性能利器——Esbuild",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#性能利器esbuild",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["必须要承认的是，",(0,l.jsx)(n.code,{children:"Esbuild"}),"的确是 Vite 高性能的得力助手，在很多",(0,l.jsx)(n.code,{children:"关键的构建阶段"}),"让 Vite 获得了相当优异的性能，如果这些阶段用传统的打包器/编译器来完成的话，开发体验要下降一大截。"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"关于 Esbuild 为什么快，我会在下一节展开介绍。"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"那么，Esbuild 到底在 Vite 的构建体系中发挥了哪些作用？"}),"\n",(0,l.jsxs)(n.h3,{id:"一依赖预构建作为-bundle-工具",children:["一、依赖预构建——作为 Bundle 工具",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一依赖预构建作为-bundle-工具",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["首先是",(0,l.jsx)(n.strong,{children:"开发阶段的依赖预构建"}),"阶段。"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,l.jsxs)(n.p,{children:["一般来说，",(0,l.jsx)(n.code,{children:"node_modules"})," 依赖的大小动辄几百 MB 甚至上 GB ，会远超项目源代码，相信大家都深有体会。如果这些依赖直接在 Vite 中使用，会出现一系列的问题，这些问题我们在",(0,l.jsx)(n.strong,{children:"依赖预构建"}),"的小节已经详细分析过，主要是 ESM 格式的兼容性问题和海量请求的问题，不再赘述。总而言之，对于第三方依赖，需要在应用启动前进行",(0,l.jsx)(n.strong,{children:"打包"}),"并且",(0,l.jsx)(n.strong,{children:"转换为 ESM 格式"}),"。"]}),"\n",(0,l.jsx)(n.p,{children:"Vite 1.x 版本中使用 Rollup 来做这件事情，但 Esbuild 的性能实在是太恐怖了，Vite 2.x 果断采用 Esbuild 来完成第三方依赖的预构建，至于性能到底有多强，大家可以参照它与传统打包工具的性能对比图:"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:p,alt:""})}),"\n",(0,l.jsx)(n.p,{children:"当然，Esbuild 作为打包工具也有一些缺点。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["不支持降级到 ",(0,l.jsx)(n.code,{children:"ES5"})," 的代码。这意味着在低端浏览器代码会跑不起来。"]}),"\n",(0,l.jsxs)(n.li,{children:["不支持 ",(0,l.jsx)(n.code,{children:"const enum"})," 等语法。这意味着单独使用这些语法在 esbuild 中会直接抛错。"]}),"\n",(0,l.jsxs)(n.li,{children:["不提供操作打包产物的接口，像 Rollup 中灵活处理打包产物的能力(如",(0,l.jsx)(n.code,{children:"renderChunk"}),"钩子)在 Esbuild 当中完全没有。"]}),"\n",(0,l.jsx)(n.li,{children:"不支持自定义 Code Splitting 策略。传统的 Webpack 和 Rollup 都提供了自定义拆包策略的 API，而 Esbuild 并未提供，从而降级了拆包优化的灵活性。"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["尽管 Esbuild 作为一个社区新兴的明星项目，有如此多的局限性，但依然不妨碍 Vite 在",(0,l.jsx)(n.strong,{children:"开发阶段"}),"使用它成功启动项目并获得极致的",(0,l.jsx)(n.strong,{children:"性能提升"}),"，生产环境处于稳定性考虑当然是采用功能更加丰富、生态更加成熟的 Rollup 作为依赖打包工具了。"]}),"\n",(0,l.jsxs)(n.h3,{id:"二单文件编译作为-ts-和-jsx-编译工具",children:["二、单文件编译——作为 TS 和 JSX 编译工具",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二单文件编译作为-ts-和-jsx-编译工具",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["在依赖预构建阶段， Esbuild 作为 Bundler 的角色存在。而在 TS(X)/JS(X) 单文件编译上面，Vite 也使用 Esbuild 进行语法转译，也就是将 Esbuild 作为 Transformer 来用。大家可以在架构图中",(0,l.jsx)(n.code,{children:"Vite Plugin Pipeline"}),"部分注意到:"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,l.jsx)(n.p,{children:"也就是说，Esbuild 转译 TS 或者 JSX 的能力通过 Vite 插件提供，这个 Vite 插件在开发环境和生产环境都会执行，因此，我们可以得出下面这个结论:"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["Vite 已经将 Esbuild 的 Transformer 能力用到了生产环境。尽管如此，对于低端浏览器场景，Vite 仍然可以做到语法和 Polyfill 安全，详情见 ",(0,l.jsx)(n.a,{href:"https://juejin.cn/book/7050063811973218341/section/7066611951547187214",target:"_blank",rel:"noopener noreferrer",children:"小册第 15 节——语法降级与 Polyfill"}),"。"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["这部分能力用来替换原先 Babel 或者 TSC 的功能，因为无论是 Babel 还是 TSC都有性能问题，大家对这两个工具普遍的认知都是: ",(0,l.jsx)(n.strong,{children:"慢，太慢了"}),"。"]}),"\n",(0,l.jsxs)(n.p,{children:["当 Vite 使用 Esbuild 做单文件编译之后，提升可以说",(0,l.jsx)(n.strong,{children:"相当大"}),"了，我们以一个巨大的、50 多 MB 的纯代码文件为例，来",(0,l.jsx)(n.a,{href:"https://datastation.multiprocess.io/blog/2021-11-13-benchmarking-esbuild-swc-typescript-babel.html",target:"_blank",rel:"noopener noreferrer",children:"对比"}),(0,l.jsx)(n.code,{children:"Esbuild"}),"、",(0,l.jsx)(n.code,{children:"Babel"}),"、",(0,l.jsx)(n.code,{children:"TSC"})," 包括 ",(0,l.jsx)(n.code,{children:"SWC"})," 的编译性能:"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:o,alt:""})}),"\n",(0,l.jsxs)(n.p,{children:["可以看到，虽然 Esbuild Transfomer 能带来巨大的性能提升，但其自身也有局限性，最大的局限性就在于 TS 中的类型检查问题。这是因为 Esbuild 并没有实现 TS 的类型系统，在编译 ",(0,l.jsx)(n.code,{children:"TS"}),"(或者 ",(0,l.jsx)(n.code,{children:"TSX"}),") 文件时仅仅抹掉了类型相关的代码，暂时没有能力实现类型检查。"]}),"\n",(0,l.jsxs)(n.p,{children:["也因此，",(0,l.jsx)(n.strong,{children:"快速上手"}),"这一节，我让大家注意初始化工程的构建脚本，",(0,l.jsx)(n.code,{children:"vite build"}),"之前会先执行",(0,l.jsx)(n.code,{children:"tsc"}),"命令，也就是借助 TS 官方的编译器进行类型检查。"]}),"\n",(0,l.jsx)(n.p,{children:"当然，要解决类型问题，我更推荐大家使用 TS 的编辑器插件。在开发阶段就能早早把问题暴露出来并解决，不至于等到项目要打包上线的时候。"}),"\n",(0,l.jsxs)(n.h3,{id:"三代码压缩作为压缩工具",children:["三、代码压缩——作为压缩工具",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三代码压缩作为压缩工具",children:"#"})]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Vite 从 2.6 版本开始，就官宣默认使用 Esbuild 来进行生产环境的代码压缩，包括 JS 代码和 CSS 代码。"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"从架构图中可以看到，在生产环境中 Esbuild 压缩器通过插件的形式融入到了 Rollup 的打包流程中:"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,l.jsx)(n.p,{children:"那为什么 Vite 要将 Esbuild 作为生产环境下默认的压缩工具呢？因为压缩效率实在太高了！"}),"\n",(0,l.jsx)(n.p,{children:"传统的方式都是使用 Terser 这种 JS 开发的压缩器来实现，在 Webpack 或者 Rollup 中作为一个 Plugin 来完成代码打包后的压缩混淆的工作。但 Terser 其实很慢，主要有 2 个原因。"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"压缩这项工作涉及大量 AST 操作，并且在传统的构建流程中，AST 在各个工具之间无法共享，比如 Terser 就无法与 Babel 共享同一个 AST，造成了很多重复解析的过程。"}),"\n",(0,l.jsx)(n.li,{children:"JS 本身属于解释性 + JIT（即时编译） 的语言，对于压缩这种 CPU 密集型的工作，其性能远远比不上 Golang 这种原生语言。"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["因此，Esbuild 这种从头到尾",(0,l.jsx)(n.strong,{children:"共享 AST"})," 以及",(0,l.jsx)(n.strong,{children:"原生语言编写"}),"的 Minifier 在性能上能够甩开传统工具的好几十倍。"]}),"\n",(0,l.jsxs)(n.p,{children:["举个例子，我们可以看下面这个实际大型库(",(0,l.jsx)(n.code,{children:"echarts"}),")的压缩性能",(0,l.jsx)(n.a,{href:"https://github.com/privatenumber/minification-benchmarks",target:"_blank",rel:"noopener noreferrer",children:"测试项目"}),":"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:h,alt:""})}),"\n",(0,l.jsxs)(n.p,{children:["压缩一个大小为",(0,l.jsx)(n.code,{children:"3.2 MB"}),"的库，Terser 需要耗费",(0,l.jsx)(n.code,{children:"8798 ms"}),"，而 Esbuild 仅仅需要",(0,l.jsx)(n.code,{children:"361 ms"}),"，压缩效率较 Terser 提升了二三十倍，并且产物的体积几乎没有劣化，因此 Vite 果断将其内置为默认的压缩方案。"]}),"\n",(0,l.jsxs)(n.p,{children:["总的来说，Vite 将 Esbuild 作为自己的性能利器，将 Esbuild 各个垂直方向的能力(",(0,l.jsx)(n.code,{children:"Bundler"}),"、",(0,l.jsx)(n.code,{children:"Transformer"}),"、",(0,l.jsx)(n.code,{children:"Minifier"}),")利用的淋漓尽致，给  Vite 的高性能提供了有利的保证。"]}),"\n",(0,l.jsxs)(n.h2,{id:"构建基石rollup",children:["构建基石——Rollup",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建基石rollup",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"Rollup 在 Vite 中的重要性一点也不亚于 Esbuild，它既是 Vite 用作生产环境打包的核心工具，也直接决定了 Vite 插件机制的设计。那么，Vite 到底基于 Rollup 做了哪些事情？"}),"\n",(0,l.jsxs)(n.h3,{id:"生产环境-bundle",children:["生产环境 Bundle",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#生产环境-bundle",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["虽然 ESM 已经得到众多浏览器的原生支持，但生产环境做到完全",(0,l.jsx)(n.code,{children:"no-bundle"}),"也不行，会有网络性能问题。为了在生产环境中也能取得优秀的产物性能，Vite 默认选择在生产环境中利用 ",(0,l.jsx)(n.code,{children:"Rollup"})," 打包，并基于 Rollup 本身成熟的打包能力进行扩展和优化，主要包含 3 个方面:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["CSS 代码分割。如果某个异步模块中引入了一些 CSS 代码，Vite 就会自动将这些 CSS 抽取出来生成单独的文件，提高线上产物的",(0,l.jsx)(n.code,{children:"缓存复用率"}),"。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["自动预加载。Vite 会自动为入口 chunk 的依赖自动生成预加载标签",(0,l.jsx)(n.code,{children:'<link rel="modulepreload">'})," ，如:"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<head>\n  \x3c!-- 省略其它内容 --\x3e\n  \x3c!-- 入口 chunk --\x3e\n  <script type="module" crossorigin src="/assets/index.250e0340.js"><\/script>\n  \x3c!--  自动预加载入口 chunk 所依赖的 chunk--\x3e\n  <link rel="modulepreload" href="/assets/vendor.293dca09.js">\n</head>\n'})}),"\n",(0,l.jsx)(n.p,{children:"这种适当预加载的做法会让浏览器提前下载好资源，优化页面性能。"}),"\n",(0,l.jsxs)(n.ol,{start:"3",children:["\n",(0,l.jsxs)(n.li,{children:["异步 Chunk 加载优化。在异步引入的 Chunk 中，通常会有一些公用的模块，如现有两个异步引入的 Chunk: ",(0,l.jsx)(n.code,{children:"A"})," 和 ",(0,l.jsx)(n.code,{children:"B"}),"，而且两者有一个公共依赖 C，如下图:"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,l.jsx)(n.p,{children:"一般情况下，Rollup 打包之后，会先请求 A，然后浏览器在加载 A 的过程中才决定请求和加载 C，但 Vite 进行优化之后，请求 A 的同时会自动预加载 C，通过优化 Rollup 产物依赖加载方式节省了不必要的网络开销。"}),"\n",(0,l.jsxs)(n.h3,{id:"兼容插件机制",children:["兼容插件机制",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#兼容插件机制",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"无论是开发阶段还是生产环境，Vite 都根植于 Rollup 的插件机制和生态，如下面的架构图所示:"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,l.jsxs)(n.p,{children:["在开发阶段，Vite 借鉴了 ",(0,l.jsx)(n.a,{href:"https://github.com/preactjs/wmr",target:"_blank",rel:"noopener noreferrer",children:"WMR"})," 的思路，自己实现了一个 ",(0,l.jsx)(n.code,{children:"Plugin Container"}),"，用来模拟 Rollup 调度各个 Vite 插件的执行逻辑，而 Vite 的插件写法完全兼容 Rollup，因此在生产环境中将所有的 Vite 插件传入 Rollup 也没有问题。"]}),"\n",(0,l.jsxs)(n.p,{children:["反过来说，Rollup 插件却不一定能完全兼容 Vite(这部分我们会在",(0,l.jsx)(n.strong,{children:"插件开发"}),"小节展开来说)。不过，目前仍然有不少 Rollup 插件可以直接复用到 Vite 中，你可以通过这个站点查看所有兼容 Vite 的 Rollup 插件: ",(0,l.jsx)(n.a,{href:"https://vite-rollup-plugins.patak.dev/",target:"_blank",rel:"noopener noreferrer",children:"https://vite-rollup-plugins.patak.dev/"})," 。"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,l.jsxs)(n.p,{children:["狼叔在",(0,l.jsx)(n.a,{href:"https://mp.weixin.qq.com/s/mt2Uyh-lpHqHAHqjsen7zw",target:"_blank",rel:"noopener noreferrer",children:"《以框架定位论前端的先进性》"})," 提到现代前端框架的几大分类，Vite 属于",(0,l.jsx)(n.code,{children:"人有我优"}),"的类型，因为类似的工具之前有 ",(0,l.jsx)(n.a,{href:"https://www.snowpack.dev/",target:"_blank",rel:"noopener noreferrer",children:"Snowpack"}),"，Vite 诞生之后补齐了作为一个 no-bundle 构建工具的 Dev Server 能力(如 HMR)，确实比现有的工具能力更优。但更重要的是，Vite 在",(0,l.jsx)(n.strong,{children:"社区生态"}),"方面比 Snowpack 更占先天优势。"]}),"\n",(0,l.jsx)(n.p,{children:"Snowpack 自研了一套插件机制，类似 Rollup 的 Hook 机制，可以看出借鉴了 Rollup 的插件机制，但并不能兼容任何现有的打包工具。如果需要打包，只能调用其它打包工具的 API，自身不提供打包能力。"}),"\n",(0,l.jsxs)(n.p,{children:["而 Vite 的做法是从头到尾根植于的 Rollup 的生态，设计了和 Rollup 非常吻合的插件机制，而 Rollup 作为一个非常成熟的打包方案，从诞生至今已经迭代了",(0,l.jsx)(n.code,{children:"六年多"}),"的时间，npm 年下载量达到",(0,l.jsx)(n.code,{children:"上亿次"}),"，产物质量和稳定性都经历过大规模的验证。某种程度上说，这种根植于已有成熟工具的思路也能打消或者降低用户内心的疑虑，更有利于工具的推广和发展。"]}),"\n",(0,l.jsxs)(n.h2,{id:"小结",children:["小结",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["本小节的内容中，我给你拆解了 Vite 底层双引擎的架构，分别介绍了 Esbuild 和 Rollup 究竟在 Vite 中做些了什么，你需要重点掌握 ",(0,l.jsx)(n.strong,{children:"Vite 的整体架构"}),"以及 ",(0,l.jsx)(n.strong,{children:"Esbuild 和 Rollup 在 Vite 中的作用"}),"。"]}),"\n",(0,l.jsx)(n.p,{children:"首先，Esbuild 作为构建的性能利器，Vite 利用其 Bundler 的功能进行依赖预构建，用其 Transformer 的能力进行 TS 和 JSX 文件的转译，也用到它的压缩能力进行 JS 和 CSS 代码的压缩。"}),"\n",(0,l.jsxs)(n.p,{children:["接着，我给你介绍了 Vite 和 Rollup 的关系。在 Vite 当中，无论是插件机制、还是底层的打包手段，都基于 Rollup 来实现，可以说 Vite 是对于 Rollup 一种场景化的深度扩展，将 Rollup 从传统的 JS 库打包场景扩展至完整 Web 应用打包，然后结合开发阶段 ",(0,l.jsx)(n.code,{children:"no-bundle"})," 的核心竞争力，打造出了自己独具一格的技术品牌。"]}),"\n",(0,l.jsx)(n.p,{children:"因此，你可以看出双引擎对于 Vite 的重要性，如果要深入学习和应用 Vite，那么掌握 Esbuild 和 Rollup 的基础使用和插件开发是非常有必要的。在下面的几个小节中，我们将一起进入双引擎本身的学习。"})]})}function b(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}let g=b;b.__RSPRESS_PAGE_META={},b.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20Vite%2F8.%E5%8F%8C%E5%BC%95%E6%93%8E%E6%9E%B6%E6%9E%84_%20Vite%20%E6%98%AF%E5%A6%82%E4%BD%95%E7%AB%99%E5%9C%A8%E5%B7%A8%E4%BA%BA%E7%9A%84%E8%82%A9%E8%86%80%E4%B8%8A%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F.md"]={toc:[{text:"Vite 架构图",id:"vite-架构图",depth:2},{text:"性能利器——Esbuild",id:"性能利器esbuild",depth:2},{text:"一、依赖预构建——作为 Bundle 工具",id:"一依赖预构建作为-bundle-工具",depth:3},{text:"二、单文件编译——作为 TS 和 JSX 编译工具",id:"二单文件编译作为-ts-和-jsx-编译工具",depth:3},{text:"三、代码压缩——作为压缩工具",id:"三代码压缩作为压缩工具",depth:3},{text:"构建基石——Rollup",id:"构建基石rollup",depth:2},{text:"生产环境 Bundle",id:"生产环境-bundle",depth:3},{text:"兼容插件机制",id:"兼容插件机制",depth:3},{text:"小结",id:"小结",depth:2}],title:"8.双引擎架构_ Vite 是如何站在巨人的肩膀上实现的？",headingTitle:"8.双引擎架构_ Vite 是如何站在巨人的肩膀上实现的？",frontmatter:{}}}}]);