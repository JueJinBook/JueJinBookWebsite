"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["85299"],{31705:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var c=r(552676),i=r(740453);let d=r.p+"static/image/4b0dcf5bf51803ee4d810b89d8832a5b.74317429.webp",s=r.p+"static/image/81e5858a2f3e74e9acf6ca8003c8d551.0ddc9ba2.webp";function h(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",img:"img"},(0,i.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"25监控",children:["25.监控",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#25监控",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"前端监控一般分为三种，分别为页面埋点、性能监控以及异常监控。"}),"\n",(0,c.jsx)(n.p,{children:"这一章节我们将来学习这些监控相关的内容，但是基本不会涉及到代码，只是让大家了解下前端监控该用什么方式实现。毕竟大部分公司都只是使用到了第三方的监控工具，而不是选择自己造轮子。"}),"\n",(0,c.jsxs)(n.h2,{id:"页面埋点",children:["页面埋点",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面埋点",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"页面埋点应该是大家最常写的监控了，一般起码会监控以下几个数据："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"PV / UV"}),"\n",(0,c.jsx)(n.li,{children:"停留时长"}),"\n",(0,c.jsx)(n.li,{children:"流量来源"}),"\n",(0,c.jsx)(n.li,{children:"用户交互"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"对于这几类统计，一般的实现思路大致可以分为两种，分别为手写埋点和无埋点的方式。"}),"\n",(0,c.jsx)(n.p,{children:"相信第一种方式也是大家最常用的方式，可以自主选择需要监控的数据然后在相应的地方写入代码。这种方式的灵活性很大，但是唯一的缺点就是工作量较大，每个需要监控的地方都得插入代码。"}),"\n",(0,c.jsx)(n.p,{children:"另一种无埋点的方式基本不需要开发者手写埋点了，而是统计所有的事件并且定时上报。这种方式虽然没有前一种方式繁琐了，但是因为统计的是所有事件，所以还需要后期过滤出需要的数据。"}),"\n",(0,c.jsxs)(n.h2,{id:"性能监控",children:["性能监控",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#性能监控",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"性能监控可以很好的帮助开发者了解在各种真实环境下，页面的性能情况是如何的。"}),"\n",(0,c.jsxs)(n.p,{children:["对于性能监控来说，我们可以直接使用浏览器自带的 ",(0,c.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance",target:"_blank",rel:"noopener noreferrer",children:"Performance API"})," 来实现这个功能。"]}),"\n",(0,c.jsxs)(n.p,{children:["对于性能监控来说，其实我们只需要调用 ",(0,c.jsx)(n.code,{children:"performance.getEntriesByType('navigation')"})," 这行代码就行了。对，你没看错，一行代码我们就可以获得页面中各种详细的性能相关信息。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"我们可以发现这行代码返回了一个数组，内部包含了相当多的信息，从数据开始在网络中传输到页面加载完成都提供了相应的数据。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsxs)(n.h2,{id:"异常监控",children:["异常监控",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#异常监控",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"对于异常监控来说，以下两种监控是必不可少的，分别是代码报错以及接口异常上报。"}),"\n",(0,c.jsxs)(n.p,{children:["对于代码运行错误，通常的办法是使用 ",(0,c.jsx)(n.code,{children:"window.onerror"})," 拦截报错。该方法能拦截到大部分的详细报错信息，但是也有例外"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["对于跨域的代码运行错误会显示 ",(0,c.jsx)(n.code,{children:"Script error."})," 对于这种情况我们需要给 ",(0,c.jsx)(n.code,{children:"script"})," 标签添加 ",(0,c.jsx)(n.code,{children:"crossorigin"})," 属性"]}),"\n",(0,c.jsxs)(n.li,{children:["对于某些浏览器可能不会显示调用栈信息，这种情况可以通过 ",(0,c.jsx)(n.code,{children:"arguments.callee.caller"})," 来做栈递归"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["对于异步代码来说，可以使用 ",(0,c.jsx)(n.code,{children:"catch"})," 的方式捕获错误。比如 ",(0,c.jsx)(n.code,{children:"Promise"})," 可以直接使用 ",(0,c.jsx)(n.code,{children:"catch"})," 函数，",(0,c.jsx)(n.code,{children:"async await"})," 可以使用 ",(0,c.jsx)(n.code,{children:"try catch"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:"但是要注意线上运行的代码都是压缩过的，需要在打包时生成 sourceMap 文件便于 debug。"}),"\n",(0,c.jsxs)(n.p,{children:["对于捕获的错误需要上传给服务器，通常可以通过 ",(0,c.jsx)(n.code,{children:"img"})," 标签的 ",(0,c.jsx)(n.code,{children:"src"})," 发起一个请求。"]}),"\n",(0,c.jsx)(n.p,{children:"另外接口异常就相对来说简单了，可以列举出出错的状态码。一旦出现此类的状态码就可以立即上报出错。接口异常上报可以让开发人员迅速知道有哪些接口出现了大面积的报错，以便迅速修复问题。"}),"\n",(0,c.jsxs)(n.h2,{id:"小结",children:["小结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"这一章节内容虽然不多，但是这类监控的知识网上的资料确实不多，相信能给大家一个不错的思路。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%2F25.%E7%9B%91%E6%8E%A7.md"]={toc:[{text:"页面埋点",id:"页面埋点",depth:2},{text:"性能监控",id:"性能监控",depth:2},{text:"异常监控",id:"异常监控",depth:2},{text:"小结",id:"小结",depth:2}],title:"25.监控",headingTitle:"25.监控",frontmatter:{}}}}]);