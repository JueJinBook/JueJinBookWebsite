"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["10756"],{684818:function(e,n,r){e.exports=r.p+"static/image/09dc026f395d36dc23437d71f2134748.866a3303.webp"},227894:function(e,n,r){e.exports=r.p+"static/image/15dfd9187d64608884f44c6d67f710cf.85f0622f.webp"},555387:function(e,n,r){r.r(n),r.d(n,{default:()=>T});var s=r(552676),i=r(740453);let t=r.p+"static/image/672b08ede010c7cf2d3a9f121c65d37f.68479df6.webp",c=r.p+"static/image/48a0df7ae8282b747d1aa829417bd51c.8b0574d0.webp",a=r.p+"static/image/3d3a73ef63af2b8accb327a90b7413a7.496559bc.webp",d=r.p+"static/image/44db062222e62e570e3efdd49f16c25d.751bc1a3.webp",l=r.p+"static/image/0a0ff56ea31a37ae829fc9f2708ea536.ea65d313.webp",o=r.p+"static/image/5f564254def44d010f33c1bf06ab1bf2.2fbcfadc.webp",p=r.p+"static/image/5e6549485a53e5db8f1f47a3d82e8b04.37ddc3b3.webp",m=r.p+"static/image/120f4780263a9c45df5d950050c7cb29.8d01c6b2.webp",h=r.p+"static/image/e91a17a71d3082c863aba98640028709.65bf141b.webp",j=r.p+"static/image/5e9e2f92a6171d9c3e40989ec90b3fde.e69bcec1.webp",x=r.p+"static/image/b67abb4b565093ee3f4d6c5b40b92164.def226bc.webp",g=r.p+"static/image/6c43799f039442ca4380fc480e87f1ad.e623f610.webp",u=r.p+"static/image/f90faf92f88df3ba68ebdff414214fe9.f829ed9e.webp",b=r.p+"static/image/c2ec5b8d32bc44ec3eeb962180c24c5f.d836c5d0.webp",f=r.p+"static/image/266328c5c2b0e286e241c3aaf6ce7231.efa2ae7f.webp";var y=r(684818),w=r(227894);let E=r.p+"static/image/a7bd9121dcbf6dba74f93f7e10d438b8.38ed7d40.webp";function B(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"127-会议室预订系统统计管理模块-后端开发",children:["127. 会议室预订系统：统计管理模块-后端开发",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#127-会议室预订系统统计管理模块-后端开发",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"写完用户模块、会议室模块、预定模块之后，就只剩下统计模块了，这节我们就来写下这个模块。"}),"\n",(0,s.jsx)(n.p,{children:"这个模块只有 2 个统计的功能："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"分别是统计会议室的使用频率、用户的预定频率："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没有新的实体，只是对已有数据的统计。"}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.a,{href:"https://echarts.apache.org/handbook/zh/how-to/chart-types/bar/basic-bar",target:"_blank",rel:"noopener noreferrer",children:"echarts 官网"}),"可以看到柱形图和饼图都只需要一个二维的数据，也就是 [[a, b], [a, b], [a, b]] 这样的形式的数据："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们先在数据库里写下这个 sql："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select u.username 用户名, count(*) 预定次数\nfrom booking b\nleft join users u\non b.userId = u.id\nwhere b.startTime between '2023-09-24' and '2023-09-30'\ngroup by b.userId;\n\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"关联 users 和 booking 表，过滤出在这段日期内的预定记录，根据用户分组，统计每组的预定数量。"}),"\n",(0,s.jsx)(n.p,{children:"这样查询出来的就是这段时间内每个用户预定了多少次会议室。"}),"\n",(0,s.jsx)(n.p,{children:"同理，也可以很轻松的统计处会议室被预定的频率："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select m.name 会议室名字, count(*) 预定次数\nfrom booking b\nleft join meeting_room m\non b.roomId = m.id\nwhere b.startTime between '2023-09-24' and '2023-09-30'\ngroup by b.roomId;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"把关联的表换成 meeting_room 就好了。"}),"\n",(0,s.jsx)(n.p,{children:"当然，现在的数据不是很多，我们添加一些数据："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"直接通过 mysql workbench 的 copy row 和 paste row 快速复制一些数据就好了。"}),"\n",(0,s.jsx)(n.p,{children:"复制出来的数据要改下 id，以及其他一些信息。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我添加了 4 条数据，并且指定了不同的 userId 和 roomId，点击 apply 应用修改。"}),"\n",(0,s.jsx)(n.p,{children:"然后再跑下那两个统计 sql"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(n.p,{children:"接下来在 nest 里把这个统计 sql 实现就好了。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g module statistic\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"生成一个新的 module。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g service statistic\nnest g controller statistic\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"之后生成 controller 和 service。"}),"\n",(0,s.jsx)(n.p,{children:"然后在 service 里实现下上面两个统计。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { InjectEntityManager } from '@nestjs/typeorm';\nimport { Booking } from 'src/booking/entities/booking.entity';\nimport { User } from 'src/user/entities/user.entity';\nimport { EntityManager } from 'typeorm';\n\n@Injectable()\nexport class StatisticService {\n\n    @InjectEntityManager()\n    private entityManager: EntityManager;\n\n    async userBookingCount() {\n        const res = await this.entityManager\n            .createQueryBuilder(Booking, 'b')\n            .select('u.id', '用户id')\n            .addSelect('u.username', '用户名')\n            .leftJoin(User, 'u', 'b.userId = u.id')\n            .addSelect('count(1)', '预定次数')\n            .where('b.startTime between :time1 and :time2', {\n                time1: '2023-09-24', \n                time2: '2023-09-30'\n            })\n            .addGroupBy('b.user')\n            .getRawMany();\n        return res;\n    }\n\n\n    async meetingRoomUsedCount() {\n\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"注入 entityManager 来查询。"}),"\n",(0,s.jsx)(n.p,{children:"统计相关的 sql 比较复杂，我们使用 queryBuilder 的 api。"}),"\n",(0,s.jsx)(n.p,{children:"queryBuilder 的 api 和写 sql 的体验差不多。"}),"\n",(0,s.jsx)(n.p,{children:"我们用 repl 的方式跑下试试："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run repl\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"await get(StatisticService).userBookingCount()\n"})}),"\n",(0,s.jsx)(n.p,{children:"仔细观察下这个打印的 sql，其实和我们前面在 mysql workbench 里写的是一样的。"}),"\n",(0,s.jsx)(n.p,{children:"用 typeorm 的 query buidler 的 api 可以写各种 sql。"}),"\n",(0,s.jsx)(n.p,{children:"然后我们加上参数，并且改下别名："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async userBookingCount(startTime: string, endTime: string) {\n    const res = await this.entityManager\n        .createQueryBuilder(Booking, 'b')\n        .select('u.id', 'userId')\n        .addSelect('u.username', 'username')\n        .leftJoin(User, 'u', 'b.userId = u.id')\n        .addSelect('count(1)', 'bookingCount')\n        .where('b.startTime between :time1 and :time2', {\n            time1: startTime, \n            time2: endTime\n        })\n        .addGroupBy('b.user')\n        .getRawMany();\n    return res;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"再跑下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"await get(StatisticService).userBookingCount('2023-09-23', '2023-09-30')\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(n.p,{children:"然后在 controller 里加个接口："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Inject, Query } from '@nestjs/common';\nimport { StatisticService } from './statistic.service';\n\n@Controller('statistic')\nexport class StatisticController {\n\n    @Inject(StatisticService)\n    private statisticService: StatisticService;\n\n    @Get('userBookingCount')\n    async userBookignCount(@Query('startTime') startTime: string, @Query('endTime') endTime) {\n        return this.statisticService.userBookingCount(startTime, endTime);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"把 repl 的模式停掉，重新跑服务："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"用 postman 访问下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"http://localhost:3005/statistic/userBookingCount?startTime=2023-09-23&endTime=2023-09-30\n"})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，返回了这段时间的统计数据。"}),"\n",(0,s.jsx)(n.p,{children:"这样，加个 echarts 就可以实现饼图、柱形图了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后，我们再写另一个接口。"}),"\n",(0,s.jsx)(n.p,{children:"和用户预定次数的统计差不多："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async meetingRoomUsedCount(startTime: string, endTime: string) {\n    const res = await this.entityManager\n        .createQueryBuilder(Booking, 'b')\n        .select('m.id', 'meetingRoomId')\n        .addSelect('m.name', 'meetingRoomName')\n        .leftJoin(MeetingRoom, 'm', 'b.roomId = m.id')\n        .addSelect('count(1)', 'usedCount')\n        .where('b.startTime between :time1 and :time2', {\n            time1: startTime, \n            time2: endTime\n        })\n        .addGroupBy('b.roomId')\n        .getRawMany();\n    return res;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面是 service 部分。"}),"\n",(0,s.jsx)(n.p,{children:"然后是 controller："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Get('meetingRoomUsedCount')\nasync meetingRoomUsedCount(@Query('startTime') startTime: string, @Query('endTime') endTime) {\n    return this.statisticService.meetingRoomUsedCount(startTime, endTime);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"postman 里测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"http://localhost:3005/statistic/meetingRoomUsedCount?startTime=2023-09-23&endTime=2023-09-30\n"})}),"\n",(0,s.jsx)(n.p,{children:"也没啥问题，和我们在 mysql workbench 里自己写 sql 统计的结果一样。"}),"\n",(0,s.jsx)(n.p,{children:"这样，统计模块的后端部分就完成了。"}),"\n",(0,s.jsxs)(n.p,{children:["代码在",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节我们实现了统计模块的后端代码。"}),"\n",(0,s.jsx)(n.p,{children:"就两个统计 sql，我们先在 mysql workbench 里写了这个统计 sql，然后在 typeorm 里用 query builder 的方式实现。"}),"\n",(0,s.jsx)(n.p,{children:"query builder 的 api 和直接写 sql 差不多。"}),"\n",(0,s.jsx)(n.p,{children:"前端部分拿到统计的数据，就可以用 echarts 展示饼图或者柱形图了。"})]})}function k(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(B,{...e})}):B(e)}let T=k;k.__RSPRESS_PAGE_META={},k.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F127.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E8%AE%A2%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%BB%9F%E8%AE%A1%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97-%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"127. 会议室预订系统：统计管理模块-后端开发",headingTitle:"127. 会议室预订系统：统计管理模块-后端开发",frontmatter:{}}}}]);