"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["67615"],{381368:function(e,n,c){e.exports=c.p+"static/image/f9e6608ed85ceb7cb5e7594dbc648826.8cad990e.webp"},644719:function(e,n,c){c.r(n),c.d(n,{default:()=>j});var d=c(552676),r=c(740453),s=c(381368);let i=c.p+"static/image/1c27eba4628b8fde59125ffe3bb50d03.0edf66ff.webp",h=c.p+"static/image/4b74019b75fad9e7b3cd17750fb16dbd.18be2807.webp",l=c.p+"static/image/d211ad23b5bca9adec9d7231191a82b7.0c53d103.webp";function o(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",code:"code",h3:"h3",img:"img",ul:"ul",li:"li",pre:"pre"},(0,r.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"1开篇词-vue-3--_vue-2",children:["1.开篇词： Vue 3  _Vue 2",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1开篇词-vue-3--_vue-2",children:"#"})]}),"\n",(0,d.jsxs)(n.h2,{id:"vue-2-即将成为过去",children:["Vue 2 即将成为过去",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vue-2-即将成为过去",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["自从 ",(0,d.jsx)(n.strong,{children:"2020 年 9 月 18 日"})," ",(0,d.jsx)(n.code,{children:"Vue 3"})," 正式发布以来，已经有两年多时间了，终于在\xa0",(0,d.jsx)(n.strong,{children:"2022 年 2 月 7 日"})," Vue 作者发布了一则消息：",(0,d.jsxs)(n.strong,{children:[(0,d.jsx)(n.code,{children:"Vue 3"})," 将成为新的默认版本"]}),"。与此同时，Vue 相关官方周边的核心库 ",(0,d.jsx)(n.code,{children:"latest"}),"\xa0发布标签将指向其 Vue 3 的兼容版本。"]}),"\n",(0,d.jsxs)(n.p,{children:["另外，随着 Vue 2.7 的发布，",(0,d.jsx)(n.code,{children:"Vue 2.7"})," 已经成为 Vue 2.x 的最终次要版本。在这个版本之后，Vue 2 进入了 ",(0,d.jsx)(n.code,{children:"LTS（长期支持）"}),"，并且将不再接收新功能。这意味着 ",(0,d.jsx)(n.code,{children:"Vue 2.x 将在 2023 年底结束其生命周期"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:["可以预见：在不久的将来，Vue 2.x 将会逐步淡出江湖，",(0,d.jsx)(n.code,{children:"Vue 3"})," 将会成为代替 Vue 2 的主流框架。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Vue 3"})," 作为一个全球最顶尖的前端框架之一，整体的思想理念、程序设计、细节的取舍、API 设计、项目的工程考量都是非常优秀的！通过对源码的阅读，不仅仅可以让我们快速建立起对 ",(0,d.jsx)(n.code,{children:"Vue 3"})," 运行机制的深入了解，还可以从中学习到很多程序设计的宝贵经验和架构思想！"]}),"\n",(0,d.jsx)(n.p,{children:"所以，让我们快人一步，现在就开始对 Vue 3 的深耕，去学习一下 Vue 3 的核心技术实现原理，以及一些相对于 Vue 2 的改变之处。"}),"\n",(0,d.jsxs)(n.h2,{id:"全面拥抱-vue-3",children:["全面拥抱 Vue 3",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#全面拥抱-vue-3",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Vue 3"})," 整体的设计相对于 ",(0,d.jsx)(n.code,{children:"Vue 2.x"})," 有着不小的变化，在开启 ",(0,d.jsx)(n.code,{children:"Vue 3"})," 技术揭秘的旅途之前，我们先着重介绍几个相对于 ",(0,d.jsx)(n.code,{children:"Vue 2.x"})," 而言较大的几个变化，这里的介绍不会深入到源码的细节，旨在帮助小伙伴们快速建立起对 ",(0,d.jsx)(n.code,{children:"Vue 3"})," 的一些前置认知，更多的细节变化和设计原理我们将在接下来的课程中为大家渐进式地揭开面纱！"]}),"\n",(0,d.jsxs)(n.h3,{id:"1-源码组织上的变化",children:["1. 源码组织上的变化",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-源码组织上的变化",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在 ",(0,d.jsx)(n.code,{children:"Vue 2"})," 中，所有的源码都存在在 ",(0,d.jsx)(n.code,{children:"src"})," 目录下："]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Vue 3"})," 相对于 ",(0,d.jsx)(n.code,{children:"Vue 2"})," 使用 ",(0,d.jsx)(n.code,{children:"monorepo"})," 的方式",(0,d.jsx)(n.strong,{children:"进行包管理"}),"，使用 ",(0,d.jsx)(n.code,{children:"monorepo"})," 的管理方式，使得 ",(0,d.jsx)(n.code,{children:"Vue 3"})," 源码模块职责显得特别地清晰明了，每个包独立负责一块核心功能的实现，方便开发和测试。如下图："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,d.jsxs)(n.p,{children:["比如，",(0,d.jsx)(n.code,{children:"compiler-core"})," 专职负责与平台无关层的渲染器底层，对外提供统一调用函数，内部通过完整的测试用例保障功能的稳定性。而 ",(0,d.jsx)(n.code,{children:"compiler-dom"})," 和 ",(0,d.jsx)(n.code,{children:"compiler-ssr"})," 则依托于 ",(0,d.jsx)(n.code,{children:"compiler-core"})," 分别实现浏览器和服务端侧的渲染器上层逻辑，模块核心职责清晰明了，提高了整体程序运行的健壮性！"]}),"\n",(0,d.jsxs)(n.h3,{id:"2-引入-composition-api",children:["2. 引入 Composition API",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-引入-composition-api",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在 ",(0,d.jsx)(n.code,{children:"Vue 2.7"})," 之前，我们去开发 Vue 应用，都是通过 ",(0,d.jsx)(n.code,{children:"data"}),"、",(0,d.jsx)(n.code,{children:"computed"}),"、",(0,d.jsx)(n.code,{children:"methods"}),"……这样的选项分类的方式来实现一个组件的开发。其实这样对于没有大量状态逻辑维护、复用的组件来说，是比较直观的组织方式，但是一旦遇到需要大量维护、复用状态的组件来说，这无疑增加了维护的成本和风险。"]}),"\n",(0,d.jsxs)(n.p,{children:["组合式 API (",(0,d.jsx)(n.code,{children:"Composition API"}),") 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。通过下图我们可以清晰地看出来二者的区别："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,d.jsxs)(n.p,{children:["但 ",(0,d.jsx)(n.code,{children:"Composition API"})," 也并不是“银弹”，它也有自己适合的场景，所以 ",(0,d.jsx)(n.code,{children:"Vue 3"})," 也是在实现层面做到了兼容 ",(0,d.jsx)(n.code,{children:"Options API"})," 的写法。相对而言，",(0,d.jsx)(n.code,{children:"Composition API"})," 更适用于大型的项目，因为大型项目可能会产生大量状态逻辑的维护，甚至跨组件的逻辑复用；而对于中小型项目来说，",(0,d.jsx)(n.code,{children:"Options API"})," 可以在你写代码时减少思考组织状态逻辑的方式，也是一种不错的选择。"]}),"\n",(0,d.jsxs)(n.h3,{id:"3-运作机制的变化",children:["3. 运作机制的变化",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-运作机制的变化",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["熟悉 Vue 2 源码的同学大致清楚 ",(0,d.jsx)(n.code,{children:"Vue 2"}),"的核心运作机制可以抽象为下图所示的样子："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Vue 3"})," 则在底层实现中，摒弃了 Vue 2 的部分实现，",(0,d.jsx)(n.strong,{children:"采用全新的响应式模型进行重写"}),"。这里我根据 Vue 3 的运行机制，也简单画了一张 Vue 3 的宏观草图，如下所示："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,d.jsx)(n.p,{children:"可以粗略地看到："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["首先，之前通过 ",(0,d.jsx)(n.code,{children:"new Vue()"})," 来创建 Vue 对象的方式已经变成了 ",(0,d.jsx)(n.code,{children:"createApp"}),"；"]}),"\n",(0,d.jsxs)(n.li,{children:["其次，在响应式部分也由原来的 ",(0,d.jsx)(n.code,{children:"Object.defineProperty"})," 改成了现在的 ",(0,d.jsx)(n.code,{children:"Proxy API"})," 实现；"]}),"\n",(0,d.jsxs)(n.li,{children:["另外，针对响应式依赖收集的内容，在 Vue 2.x 版本中是收集了 ",(0,d.jsx)(n.code,{children:"Watcher"}),"，而到了 Vue 3 中则成了 ",(0,d.jsx)(n.code,{children:"effect"}),"。"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["除了上面所说的这些变化外，Vue 3 不管是在编译时、还是在运行时都",(0,d.jsx)(n.strong,{children:"做了大量的性能优化"}),"。例如，在编译时，Vue 3 通过标记 ",(0,d.jsx)(n.code,{children:"/*#__PURE__*/"})," 来为打包工具提供良好的 ",(0,d.jsx)(n.code,{children:"Tree-Shaking"})," 机制，通过 ",(0,d.jsx)(n.code,{children:"静态提升"})," 机制，避免了大量静态节点的重复渲染执行；在运行时，又通过批量队列更新机制优化了更新性能，通过 ",(0,d.jsx)(n.code,{children:"PatchFlags"})," 和 ",(0,d.jsx)(n.code,{children:"dynamicChildren"})," 进行了 ",(0,d.jsx)(n.code,{children:"diff"})," 的靶向更新……"]}),"\n",(0,d.jsx)(n.p,{children:"上面的内容有些不理解了？没关系，等等，这里先卖个关子。相信你一定可以在学习本小册的过程中，得到你的答案！"}),"\n",(0,d.jsxs)(n.h2,{id:"开启小册的前置准备",children:["开启小册的前置准备",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开启小册的前置准备",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"如果你已经迫不及待地想赶紧开始学习 Vue 3 的设计核心，请稍安勿躁，我们还需要做一些准备工作，以方便你在后续的学习中更容易理解文中的内容。"}),"\n",(0,d.jsxs)(n.p,{children:["首先，本小册中所有关于 Vue 的源码所依托的版本是 ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"3.2.47"})}),"。然后你也可以去 GitHub 上 clone 下来 ",(0,d.jsx)(n.a,{href:"https://github.com/vuejs/core",target:"_blank",rel:"noopener noreferrer",children:"Vue 3 源码"}),"。"]}),"\n",(0,d.jsx)(n.p,{children:"clone 下来后，我们可以简单看一下项目的目录结构："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-bash",children:"├── packages              \n│   ├── compiler-core     # 与平台无关的编译器实现的核心函数包\n│   ├── compiler-dom      # 浏览器相关的编译器上层内容\n│   ├── compiler-sfc      # 单文件组件的编译器\n│   ├── compiler-ssr      # 服务端渲染相关的编译器实现\n│   ├── global.d.ts       # ts 相关一些声明文件\n│   ├── reactivity        # 响应式核心包\n│   ├── runtime-core      # 与平台无关的渲染器相关的核心包\n│   ├── runtime-dom       # 浏览器相关的渲染器部分\n│   ├── runtime-test      # 渲染器测试相关代码\n│   ├── server-renderer   # 服务端渲染相关的包\n│   ├── sfc-playground    # 单文件组件演练场 \n│   ├── shared            # 工具库相关\n│   ├── size-check        # 检测代码体积相关\n│   ├── template-explorer # 演示模板编译成渲染函数相关的包\n│   └── vue               # 包含编译时和运行时的发布包\n"})}),"\n",(0,d.jsxs)(n.p,{children:["本小册介绍的核心内容主要分布在 ",(0,d.jsx)(n.code,{children:"compiler-core"}),"、",(0,d.jsx)(n.code,{children:"compiler-dom"}),"、",(0,d.jsx)(n.code,{children:"reactivity"}),"、 ",(0,d.jsx)(n.code,{children:"runtime-core"}),"、",(0,d.jsx)(n.code,{children:"runtime-dom"})," 这几个包中，这些也是 Vue 的",(0,d.jsx)(n.strong,{children:"核心"}),"。"]}),"\n",(0,d.jsx)(n.p,{children:"另外，在阅读过程中，你也可以一边看、一边自己调试，Vue 为我们提供了很多开发使用的示例，我们可以通过下面的命令来运行它："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-shell",children:"$ npm run dev # 开启 vue dev 环境 watch\n$ npm run serve # 启动 example 示例的服务器\n"})}),"\n",(0,d.jsxs)(n.p,{children:["接着，我们只需要访问 ",(0,d.jsx)(n.code,{children:"packages/vue/examples/**"})," 中的示例就可以在线调试 Vue 代码了。"]}),"\n",(0,d.jsx)(n.p,{children:"最后，让我们一起进入 Vue 3 的世界，探索其中的奥秘吧！"})]})}function x(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}let j=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["Vue%203%20%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%2F1.%E5%BC%80%E7%AF%87%E8%AF%8D%EF%BC%9A%20Vue%203%20%20_Vue%202.md"]={toc:[{text:"Vue 2 即将成为过去",id:"vue-2-即将成为过去",depth:2},{text:"全面拥抱 Vue 3",id:"全面拥抱-vue-3",depth:2},{text:"1. 源码组织上的变化",id:"1-源码组织上的变化",depth:3},{text:"2. 引入 Composition API",id:"2-引入-composition-api",depth:3},{text:"3. 运作机制的变化",id:"3-运作机制的变化",depth:3},{text:"开启小册的前置准备",id:"开启小册的前置准备",depth:2}],title:"1.开篇词： Vue 3  _Vue 2",headingTitle:"1.开篇词： Vue 3  _Vue 2",frontmatter:{}}}}]);