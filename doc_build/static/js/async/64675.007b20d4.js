"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["64675"],{533059:function(e,n,c){c.r(n),c.d(n,{default:()=>o});var s=c(552676),r=c(740453);let l=c.p+"static/image/523f0cab9f318fbb79b15842f85e1ef4.92938ec7.webp";function i(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h3:"h3",code:"code",hr:"hr",strong:"strong",ul:"ul",li:"li",h5:"h5",pre:"pre",input:"input",img:"img"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"14应用打包应用打包体积过大聊聊webpack那些构建策略",children:["14.应用打包：应用打包体积过大，聊聊Webpack那些构建策略！",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14应用打包应用打包体积过大聊聊webpack那些构建策略",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"技术要点：Webpack"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"前端脚手架"}),"作为",(0,s.jsx)(n.code,{children:"前端工程化"}),"中最重要的流程，同时也是引领着前端不断变革的重要技术。一说到",(0,s.jsx)(n.code,{children:"前端脚手架"}),"，肯定会想起应用打包。当应用开发完毕都会进入应用打包的流程，让项目源码转换为最终上线的代码。"]}),"\n",(0,s.jsxs)(n.p,{children:["目前两大热门前端框架分别是",(0,s.jsx)(n.code,{children:"react"}),"与",(0,s.jsx)(n.code,{children:"vue"}),"，它们对应",(0,s.jsx)(n.code,{children:"前端脚手架"}),"分别是",(0,s.jsx)(n.code,{children:"create-react-app"}),"与",(0,s.jsx)(n.code,{children:"@vue/cli"}),"，所有项目最终上线的代码都是通过对应",(0,s.jsx)(n.code,{children:"前端脚手架"}),"打包而成。虽然不同",(0,s.jsx)(n.code,{children:"前端脚手架"}),"处理不同前端框架，但其底层都是基于",(0,s.jsx)(n.code,{children:"webpack"}),"封装，整体来说就是一个增强版的",(0,s.jsx)(n.code,{children:"webpack"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"webpack"}),"是一个现代",(0,s.jsx)(n.code,{children:"JS应用程序"}),"的静态模块打包器。当",(0,s.jsx)(n.code,{children:"webpack"}),"处理应用程序时，它会递归地构建一个依赖关系图，其中包括应用程序所需的每个模块，然后将这些模块打包为一个或多个",(0,s.jsx)(n.code,{children:"bundle文件"}),"。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"痛点"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["近几年",(0,s.jsx)(n.code,{children:"webpack"}),"不断升级，为用户提供更简单的配置，有时使用二三十行代码就能配置完毕。随着开发进度的推进，业务代码量会不断积累，当达到一定量时就可能引发构建速度过慢引起打包时间过长，甚至打包出来的代码体积变得很大。"]}),"\n",(0,s.jsx)(n.p,{children:"构建是一个渐进式的过程，每次编码保存都会产生一次增量编译，增量编译若处理不当就可能会构建全部代码，导致一些无改动痕迹的文件重新编译，极大浪费执行开销。当开启缓存模式就能从编译缓存中找出该文件在最后一次改动的副本并当作本次的编译内容。简而言之，未改动的文件使用最后一次的编译内容，改动的文件重新编译，再将所有文件的编译内容合并输出。"}),"\n",(0,s.jsxs)(n.p,{children:["可能就是一个这样的简单的配置，就能为",(0,s.jsx)(n.code,{children:"webpack"}),"节省很多性能开销。上述只是一个常见应用场景，在写好",(0,s.jsx)(n.code,{children:"webpack"}),"的前提下，更需做好相关构建策略，让应用打包变得更快更小。"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["功能强大的",(0,s.jsx)(n.code,{children:"webpack"}),"配置繁多，很多配置字段零零散散地分布，再加上",(0,s.jsx)(n.code,{children:"Loader"}),"与",(0,s.jsx)(n.code,{children:"Plugin"}),"的配置，要让",(0,s.jsx)(n.code,{children:"webpack"}),"打包时间更短打包体积更小还是很费心费力的。本章将带领你",(0,s.jsx)(n.strong,{children:"基于构建策略优化应用打包"}),"，从两大层面着手，一步一步完善",(0,s.jsx)(n.code,{children:"webpack"}),"的构建策略。"]}),"\n",(0,s.jsxs)(n.h3,{id:"背景一份良好的构建策略打包才顺心",children:["背景：一份良好的构建策略打包才顺心",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#背景一份良好的构建策略打包才顺心",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["使用",(0,s.jsx)(n.code,{children:"webpack"}),"打包应用是一个开发者的必备技能，相信你对其已熟悉透了。在此不深入讲述",(0,s.jsx)(n.code,{children:"webpack"}),"的安装使用、底层原理和运行机制，而是从",(0,s.jsx)(n.code,{children:"前端工程化"}),"的角度看待应用打包，看看如何将应用打包做到最优化，为",(0,s.jsx)(n.code,{children:"webpack"}),"制定你都认同的",(0,s.jsx)(n.code,{children:"构建策略"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["对",(0,s.jsx)(n.code,{children:"webpack"}),"做相关构建策略是为了让应用打包达到最优化。简而言之，就是做好",(0,s.jsx)(n.code,{children:"webpack"}),"的性能优化工作。说到",(0,s.jsx)(n.code,{children:"webpack"}),"的",(0,s.jsx)(n.code,{children:"性能优化"}),"，无疑是从",(0,s.jsx)(n.code,{children:"时间层面"}),"与",(0,s.jsx)(n.code,{children:"体积层面"}),"入手。因为这两方面是最直接可观的，无需修改源码或增加流程，利用",(0,s.jsx)(n.code,{children:"webpack"}),"与其他第三方应用提供的多元化配置完成上述操作。"]}),"\n",(0,s.jsxs)(n.p,{children:["我对两层面分别做出6个总共12个",(0,s.jsx)(n.code,{children:"性能优化建议"}),"，为了方便记忆都使用四字真言概括。⏱表示",(0,s.jsx)(n.code,{children:"减少打包时间"}),"，\uD83D\uDCE6表示",(0,s.jsx)(n.code,{children:"减少打包体积"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"减少打包时间"}),"：",(0,s.jsx)(n.code,{children:"缩减范围"}),"、",(0,s.jsx)(n.code,{children:"缓存副本"}),"、",(0,s.jsx)(n.code,{children:"定向搜索"}),"、",(0,s.jsx)(n.code,{children:"提前构建"}),"、",(0,s.jsx)(n.code,{children:"并行构建"}),"、",(0,s.jsx)(n.code,{children:"可视结构"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"减少打包体积"}),"：",(0,s.jsx)(n.code,{children:"分割代码"}),"、",(0,s.jsx)(n.code,{children:"摇树优化"}),"、",(0,s.jsx)(n.code,{children:"动态垫片"}),"、",(0,s.jsx)(n.code,{children:"按需加载"}),"、",(0,s.jsx)(n.code,{children:"作用提升"}),"、",(0,s.jsx)(n.code,{children:"压缩资源"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"方案减少打包时间",children:["方案：减少打包时间",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#方案减少打包时间",children:"#"})]}),"\n",(0,s.jsxs)(n.h5,{id:"缩减范围",children:["⏱缩减范围",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#缩减范围",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"配置include/exclude缩小Loader对文件的搜索范围"}),"，好处是",(0,s.jsx)(n.code,{children:"避免不必要的转译"}),"。",(0,s.jsx)(n.code,{children:"node_modules"}),"文件夹的体积这么大，那得增加多少时间成本去检索所有文件啊？"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"include/exclude"}),"通常在各大",(0,s.jsx)(n.code,{children:"Loader"}),"中配置，",(0,s.jsx)(n.code,{children:"src"}),"文件夹通常作为源码目录，可做以下处理。当然",(0,s.jsx)(n.code,{children:"include/exclude"}),"可根据实际情况修改。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'export default {\n	// ...\n	module: {\n		rules: [{\n			exclude: /node_modules/,\n			include: /src/,\n			test: /\\.js$/,\n			use: "babel-loader"\n		}]\n	}\n};\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"缓存副本",children:["⏱缓存副本",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#缓存副本",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"配置cache缓存Loader对文件的编译副本"}),"，好处是",(0,s.jsx)(n.code,{children:"再次编译时只编译变动的文件"}),"。未变动的文件干嘛要随着变动的文件重新编译？"]}),"\n",(0,s.jsxs)(n.p,{children:["很多",(0,s.jsx)(n.code,{children:"Loader/Plugin"}),"都会提供一个可用编译缓存的选项，通常包括",(0,s.jsx)(n.code,{children:"cache"}),"字眼。以",(0,s.jsx)(n.code,{children:"babel-loader"}),"与",(0,s.jsx)(n.code,{children:"eslint-webpack-plugin"}),"为例。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import EslintPlugin from "eslint-webpack-plugin";\n\nexport default {\n	// ...\n	module: {\n		rules: [{\n			// ...\n			test: /\\.js$/,\n			use: [{\n				loader: "babel-loader",\n				options: { cacheDirectory: true }\n			}]\n		}]\n	},\n	plugins: [\n		// ...\n		new EslintPlugin({ cache: true })\n	]\n};\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"定向搜索",children:["⏱定向搜索",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#定向搜索",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"配置resolve提高文件的搜索速度"}),"，好处是",(0,s.jsx)(n.code,{children:"定向指定所需文件路径"}),"。若某些第三方库以默认形式引用可能报错或希望程序自动索引指定类型文件都可通过该方式解决。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"alias"}),"表示映射路径，",(0,s.jsx)(n.code,{children:"extensions"}),"表示文件后缀，",(0,s.jsx)(n.code,{children:"noParse"}),"表示过滤无依赖文件。通常配置",(0,s.jsx)(n.code,{children:"alias"}),"与",(0,s.jsx)(n.code,{children:"extensions"}),"就足够。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'export default {\n	// ...\n	resolve: {\n		alias: {\n			"#": AbsPath(""), // 根目录快捷方式\n			"@": AbsPath("src"), // src文件夹快捷方式\n			swiper: "swiper/js/swiper.min.js"\n		}, // 导入模块快捷方式\n		extensions: [".js", ".ts", ".jsx", ".tsx", ".json", ".vue"] // 导入模块省略后缀\n	}\n};\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"提前构建",children:["⏱提前构建",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#提前构建",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"配置DllPlugin将第三方依赖提前打包"}),"，好处是",(0,s.jsx)(n.code,{children:"将DLL与业务代码完全分离且每次只构建业务代码"}),"。这是一个古老配置，在",(0,s.jsx)(n.code,{children:"webpack v2"}),"时已存在，不过现在",(0,s.jsx)(n.code,{children:"webpack v4+"}),"已不推荐使用该配置，因为其版本迭代带来的性能提升足以忽略",(0,s.jsx)(n.code,{children:"DllPlugin"}),"所带来的效益。当然配置了也没事，对于一个上了一定规模的项目，我亲测在二次构建时能快1~2秒。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"DLL"}),"意为",(0,s.jsx)(n.code,{children:"动态链接库"}),"，指一个可由多个程序同时使用的代码库。在前端领域中可认为是另类缓存的存在，它把公共代码打包为",(0,s.jsx)(n.code,{children:"dll文件"}),"并存放到硬盘中，再次构建时动态链接",(0,s.jsx)(n.code,{children:"dll文件"}),"就无需再次打包那些公共代码，以提升构建速度，减少打包时间。"]}),"\n",(0,s.jsxs)(n.p,{children:["总体来说配置",(0,s.jsx)(n.code,{children:"DLL"}),"相比其他配置复杂，配置流程可大致分为三步。"]}),"\n",(0,s.jsxs)(n.p,{children:["首先告知构建脚本哪些依赖做成",(0,s.jsx)(n.code,{children:"DLL"}),"并生成",(0,s.jsx)(n.code,{children:"dll文件"}),"与",(0,s.jsx)(n.code,{children:"DLL映射表文件"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { DefinePlugin, DllPlugin } from "webpack";\n\nexport default {\n	// ...\n	entry: {\n		vendor: ["react", "react-dom", "react-router-dom"]\n	},\n	mode: "production",\n	optimization: {\n		splitChunks: {\n			cacheGroups: {\n				vendor: {\n					chunks: "all",\n					name: "vendor",\n					test: /node_modules/\n				}\n			}\n		}\n	},\n	output: {\n		filename: "[name].dll.js", // 输出路径与文件名称\n		library: "[name]", // 全局变量名称：其他模块会从该变量中获取内部模块\n		path: AbsPath("dist/static") // 输出目录路径\n	},\n	plugins: [\n		// ...\n		new DefinePlugin({\n			"process.env.NODE_ENV": JSON.stringify("development") // DLL模式下覆盖生产环境为开发环境(启动第三方依赖调试模式)\n		}),\n		new DllPlugin({\n			name: "[name]", // 全局变量名称：减小搜索范围，与output.library结合使用\n			path: AbsPath("dist/static/[name]-manifest.json") // 输出目录路径\n		})\n	]\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["然后在",(0,s.jsx)(n.code,{children:"package.json"}),"中指定",(0,s.jsx)(n.code,{children:"scripts"}),"，配置执行脚本且每次构建前首先执行该脚本打包出",(0,s.jsx)(n.code,{children:"dll文件"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n	"scripts": {\n		"dll": "webpack --config webpack.dll.js"\n	}\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["最后链接",(0,s.jsx)(n.code,{children:"dll文件"}),"并告知",(0,s.jsx)(n.code,{children:"webpack"}),"可命中的",(0,s.jsx)(n.code,{children:"dll文件"}),"让其自行读取。使用",(0,s.jsx)(n.a,{href:"https://github.com/jharris4/html-webpack-tags-plugin",target:"_blank",rel:"noopener noreferrer",children:"html-webpack-tags-plugin"}),"在构建时自动加入",(0,s.jsx)(n.code,{children:"dll文件"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { DllReferencePlugin } from "webpack";\nimport HtmlTagsPlugin from "html-webpack-tags-plugin";\n\nexport default {\n	// ...\n	plugins: [\n		// ...\n		new DllReferencePlugin({\n			manifest: AbsPath("dist/static/vendor-manifest.json") // manifest文件路径\n		}),\n		new HtmlTagsPlugin({\n			append: false, // 在生成资源后加入\n			publicPath: "/", // 使用公共路径\n			tags: ["static/vendor.dll.js"] // 资源路径\n		})\n	]\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["为了那几秒钟的时间成本，我建议配置上较好。当然也可用",(0,s.jsx)(n.a,{href:"https://github.com/asfktz/autodll-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"autodll-webpack-plugin"}),"代替手动配置。"]}),"\n",(0,s.jsxs)(n.h5,{id:"并行构建",children:["⏱并行构建",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#并行构建",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"配置Thread将Loader单进程转换为多进程"}),"，好处是",(0,s.jsx)(n.code,{children:"释放CPU多核并发的优势"}),"。在使用",(0,s.jsx)(n.code,{children:"webpack"}),"构建项目时会有大量文件需解析与处理，构建过程是计算密集型的操作，随着文件增多会使构建过程变得越慢。"]}),"\n",(0,s.jsxs)(n.p,{children:["在",(0,s.jsx)(n.code,{children:"Node"}),"中运行的",(0,s.jsx)(n.code,{children:"webpack"}),"是单线程模型。简而言之，",(0,s.jsx)(n.code,{children:"webpack"}),"待处理的任务需一件件处理，不能同一时刻处理多件任务。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"文件读写"}),"与",(0,s.jsx)(n.code,{children:"计算操作"}),"无法避免，能不能让",(0,s.jsx)(n.code,{children:"webpack"}),"同一时刻处理多个任务，发挥多核",(0,s.jsx)(n.code,{children:"CPU"}),"电脑的威力以提升构建速度？",(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/thread-loader",target:"_blank",rel:"noopener noreferrer",children:"thread-loader"}),"来帮你，根据",(0,s.jsx)(n.code,{children:"CPU"}),"个数开启线程。"]}),"\n",(0,s.jsxs)(n.p,{children:["在此需注意一个问题，若项目文件不算多就不要使用该",(0,s.jsx)(n.code,{children:"性能优化建议"}),"，毕竟开启多个线程也会存在性能开销。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import Os from "os";\n\nexport default {\n	// ...\n	module: {\n		rules: [{\n			// ...\n			test: /\\.js$/,\n			use: [{\n				loader: "thread-loader",\n				options: { workers: Os.cpus().length }\n			}, {\n				loader: "babel-loader",\n				options: { cacheDirectory: true }\n			}]\n		}]\n	}\n};\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"可视结构",children:["⏱可视结构",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可视结构",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"配置BundleAnalyzer分析打包文件结构"}),"，好处是",(0,s.jsx)(n.code,{children:"找出导致体积过大的原因"}),"。通过分析原因得出优化方案减少打包时间。",(0,s.jsx)(n.code,{children:"BundleAnalyzer"}),"是",(0,s.jsx)(n.code,{children:"webpack"}),"官方插件，可直观分析",(0,s.jsx)(n.code,{children:"打包文件"}),"的模块组成部分、模块体积占比、模块包括关系、模块依赖关系、文件是否重复、压缩体积对比等可视化数据。"]}),"\n",(0,s.jsxs)(n.p,{children:["可用",(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer",children:"webpack-bundle-analyzer"}),"配置，有了它就能快速找出相关问题。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { BundleAnalyzerPlugin } from "webpack-bundle-analyzer";\n\nexport default {\n	// ...\n	plugins: [\n		// ...\n		BundleAnalyzerPlugin()\n	]\n};\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"方案减少打包体积",children:["方案：减少打包体积",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#方案减少打包体积",children:"#"})]}),"\n",(0,s.jsxs)(n.h5,{id:"分割代码",children:["\uD83D\uDCE6分割代码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分割代码",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"分割各个模块代码，提取相同部分代码"}),"，好处是",(0,s.jsx)(n.code,{children:"减少重复代码的出现频率"}),"。",(0,s.jsx)(n.code,{children:"webpack v4+"}),"使用",(0,s.jsx)(n.code,{children:"splitChunks"}),"替代",(0,s.jsx)(n.code,{children:"CommonsChunksPlugin"}),"实现代码分割。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"splitChunks"}),"配置较多，可查看",(0,s.jsx)(n.a,{href:"https://webpack.docschina.org/configuration/optimization/#optimizationsplitchunks",target:"_blank",rel:"noopener noreferrer",children:"webpack-optimizationsplitchunks"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'export default {\n	// ...\n	optimization: {\n		runtimeChunk: { name: "manifest" }, // 抽离WebpackRuntime函数\n		splitChunks: {\n			cacheGroups: {\n				common: {\n					minChunks: 2, // 代码块出现最少次数\n					name: "common", // 代码块名称\n					priority: 5, // 优先级别\n					reuseExistingChunk: true, // 重用已存在代码块\n					test: AbsPath("src")\n				},\n				vendor: {\n					chunks: "initial", // 代码分割类型\n					name: "vendor",\n					priority: 10,\n					test: /node_modules/\n				}\n			}, // 缓存组\n			chunks: "all" // 代码分割类型：all全部模块，async异步模块，initial入口模块\n		} // 代码块分割\n	}\n};\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"摇树优化",children:["\uD83D\uDCE6摇树优化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#摇树优化",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"删除项目中未被引用代码"}),"，好处是",(0,s.jsx)(n.code,{children:"删除重复代码与未使用代码"}),"。",(0,s.jsx)(n.code,{children:"摇树优化"}),"首次出现于",(0,s.jsx)(n.code,{children:"rollup"}),"，是",(0,s.jsx)(n.code,{children:"rollup"}),"的核心概念，后来在",(0,s.jsx)(n.code,{children:"webpack v2"}),"中借鉴过来使用。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"摇树优化"}),"只对",(0,s.jsx)(n.code,{children:"ESM"}),"生效，对其他",(0,s.jsx)(n.code,{children:"模块规范"}),"失效。",(0,s.jsx)(n.code,{children:"摇树优化"}),"针对静态结构分析，只有",(0,s.jsx)(n.code,{children:"import/export"}),"才能提供静态的",(0,s.jsx)(n.code,{children:"导入/导出"}),"功能，因此在编写业务代码时必须使用",(0,s.jsx)(n.code,{children:"ESM"}),"才能让",(0,s.jsx)(n.code,{children:"摇树优化"}),"删除重复代码与未使用代码。"]}),"\n",(0,s.jsxs)(n.p,{children:["在",(0,s.jsx)(n.code,{children:"webpack"}),"中只需将打包环境设置为",(0,s.jsx)(n.code,{children:"生产环境"}),"就能让",(0,s.jsx)(n.code,{children:"摇树优化"}),"生效，同时业务代码使用",(0,s.jsx)(n.code,{children:"ESM"}),"编写，使用",(0,s.jsx)(n.code,{children:"import"}),"导入模块，使用",(0,s.jsx)(n.code,{children:"export"}),"导出模块。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'export default {\n	// ...\n	mode: "production"\n};\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"动态垫片",children:["\uD83D\uDCE6动态垫片",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动态垫片",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"通过垫片服务根据UA返回当前浏览器代码垫片"}),"，好处是",(0,s.jsx)(n.code,{children:"无需将繁重的代码垫片打包进去"}),"。每次构建都配置",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"与",(0,s.jsx)(n.code,{children:"core-js"}),"根据某些需求将",(0,s.jsx)(n.code,{children:"Polyfill"}),"打包进来，这无疑又为代码体积增加了贡献。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"提供的",(0,s.jsx)(n.code,{children:"useBuiltIns"}),"可按需导入",(0,s.jsx)(n.code,{children:"Polyfill"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,s.jsx)(n.strong,{children:"false"}),"：无视",(0,s.jsx)(n.code,{children:"target.browsers"}),"将所有",(0,s.jsx)(n.code,{children:"Polyfill"}),"加载进来"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,s.jsx)(n.strong,{children:"entry"}),"：根据",(0,s.jsx)(n.code,{children:"target.browsers"}),"将部分",(0,s.jsx)(n.code,{children:"Polyfill"}),"加载进来(仅引入有浏览器不支持的",(0,s.jsx)(n.code,{children:"Polyfill"}),"，需在入口文件",(0,s.jsx)(n.code,{children:'import "core-js/stable"'}),")"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,s.jsx)(n.strong,{children:"usage"}),"：根据",(0,s.jsx)(n.code,{children:"target.browsers"}),"与检测代码中",(0,s.jsx)(n.code,{children:"ES6"}),"的使用情况将部分",(0,s.jsx)(n.code,{children:"Polyfill"}),"加载进来(无需在入口文件",(0,s.jsx)(n.code,{children:'import "core-js/stable"'}),")"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在此推荐使用",(0,s.jsx)(n.code,{children:"动态垫片"}),"。",(0,s.jsx)(n.code,{children:"动态垫片"}),"可根据浏览器",(0,s.jsx)(n.code,{children:"UserAgent"}),"返回当前浏览器",(0,s.jsx)(n.code,{children:"Polyfill"}),"，其思路是根据浏览器的",(0,s.jsx)(n.code,{children:"UserAgent"}),"从",(0,s.jsx)(n.code,{children:"browserlist"}),"中查找出当前浏览器哪些",(0,s.jsx)(n.code,{children:"API"}),"缺乏支持以返回这些",(0,s.jsx)(n.code,{children:"API"}),"的",(0,s.jsx)(n.code,{children:"Polyfill"}),"。对这方面感兴趣的同学可查看",(0,s.jsx)(n.a,{href:"https://github.com/Financial-Times/polyfill-library",target:"_blank",rel:"noopener noreferrer",children:"polyfill-library"}),"与",(0,s.jsx)(n.a,{href:"https://github.com/Financial-Times/polyfill-service",target:"_blank",rel:"noopener noreferrer",children:"polyfill-service"}),"的源码。"]}),"\n",(0,s.jsxs)(n.p,{children:["在此提供两个",(0,s.jsx)(n.code,{children:"动态垫片"}),"服务，可在不同浏览器中点击以下链接看看输出不同",(0,s.jsx)(n.code,{children:"Polyfill"}),"。相信",(0,s.jsx)(n.code,{children:"IExplore"}),"还是最多",(0,s.jsx)(n.code,{children:"Polyfill"}),"的，它自豪地说：",(0,s.jsx)(n.code,{children:"我就是我，不一样的烟火"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"官方CDN服务"}),"：",(0,s.jsx)(n.a,{href:"https://polyfill.io/v3/polyfill.min.js",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://polyfill.io/v3/polyfill.min.js",target:"_blank",rel:"noopener noreferrer",children:"https://polyfill.io/v3/polyfill.min.js"})})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"阿里CDN服务"}),"：",(0,s.jsx)(n.a,{href:"https://polyfill.alicdn.com/polyfill.min.js",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://polyfill.alicdn.com/polyfill.min.js",target:"_blank",rel:"noopener noreferrer",children:"https://polyfill.alicdn.com/polyfill.min.js"})})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["使用",(0,s.jsx)(n.a,{href:"https://github.com/jharris4/html-webpack-tags-plugin",target:"_blank",rel:"noopener noreferrer",children:"html-webpack-tags-plugin"}),"在打包时自动加入",(0,s.jsx)(n.code,{children:"动态垫片"}),"，同时注释掉",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"相关配置。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import HtmlTagsPlugin from "html-webpack-tags-plugin";\n\nexport default {\n	// ...\n	plugins: [\n		// ...\n		new HtmlTagsPlugin({\n			append: false, // 在生成资源后加入\n			publicPath: false, // 使用公共路径\n			tags: ["https://polyfill.alicdn.com/polyfill.min.js"] // 资源路径\n		})\n	]\n};\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"按需加载",children:["\uD83D\uDCE6按需加载",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#按需加载",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"将路由页面/触发性功能单独打包为一个文件，使用时才加载"}),"，好处是",(0,s.jsx)(n.code,{children:"减轻首屏渲染的负担"}),"。因为项目功能越多其打包体积越大，导致首屏渲染速度越慢。"]}),"\n",(0,s.jsxs)(n.p,{children:["首屏渲染时只需首页的",(0,s.jsx)(n.code,{children:"JS代码"}),"而无需其他网页的",(0,s.jsx)(n.code,{children:"JS代码"}),"，所以可用",(0,s.jsx)(n.code,{children:"按需加载"}),"实现。",(0,s.jsx)(n.code,{children:"webpack v4+"}),"提供模块按需切割加载功能，配合",(0,s.jsx)(n.code,{children:"import()"}),"可做到首屏渲染减包的效果，以加快首屏渲染速度。只有当触发某些功能时才会加载当前功能的",(0,s.jsx)(n.code,{children:"JS代码"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"webpack v4+"}),"提供魔术注解命名",(0,s.jsx)(n.code,{children:"切割模块"}),"，若无注解则切割出来的模块无法分辨出属于哪个业务模块，所以一般都是一个业务模块共用一个",(0,s.jsx)(n.code,{children:"切割模块"}),"的注解名称。若使用",(0,s.jsx)(n.code,{children:"webpack v5"}),"则无需魔术注解。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const Login = () => import( /* webpackChunkName: "login" */ "../../views/login");\nconst Logon = () => import( /* webpackChunkName: "logon" */ "../../views/logon");\n'})}),"\n",(0,s.jsxs)(n.p,{children:["运行起来控制台可能会报错，在",(0,s.jsx)(n.code,{children:"package.json"}),"中指定",(0,s.jsx)(n.code,{children:"babel"}),"相关配置，接入",(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import.html",target:"_blank",rel:"noopener noreferrer",children:"@babel/plugin-syntax-dynamic-import"}),"或升级",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"到最新版本。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n	// ...\n	"babel": {\n		// ...\n		"plugins": [\n			// ...\n			"@babel/plugin-syntax-dynamic-import"\n		]\n	}\n}\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"作用提升",children:["\uD83D\uDCE6作用提升",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#作用提升",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"分析模块间依赖关系，把打包好的模块合并到一个函数中"}),"，好处是",(0,s.jsx)(n.code,{children:"减少函数声明与内存花销"}),"。",(0,s.jsx)(n.code,{children:"作用提升"}),"首次出现于",(0,s.jsx)(n.code,{children:"rollup"}),"，是",(0,s.jsx)(n.code,{children:"rollup"}),"的核心概念，后来在",(0,s.jsx)(n.code,{children:"webpack v3"}),"中借鉴过来使用。"]}),"\n",(0,s.jsxs)(n.p,{children:["在未开启",(0,s.jsx)(n.code,{children:"作用提升"}),"前，构建好的代码会存在大量函数闭包。因为模块依赖，通过",(0,s.jsx)(n.code,{children:"webpack"}),"打包后会转换为",(0,s.jsx)(n.code,{children:"IIFE"}),"，大量函数闭包包裹代码会导致打包体积增大，模块越多越明显。在运行代码时创建的函数作用域变多，导致更大的内存开销。"]}),"\n",(0,s.jsxs)(n.p,{children:["在开启",(0,s.jsx)(n.code,{children:"作用提升"}),"后，构建好的代码会根据引用顺序放到一个函数作用域中，通过适当重命名某些变量以防止变量名冲突，以减少函数声明与内存花销。"]}),"\n",(0,s.jsxs)(n.p,{children:["在",(0,s.jsx)(n.code,{children:"webpack"}),"中只需将打包环境设置为",(0,s.jsx)(n.code,{children:"生产环境"}),"就能让",(0,s.jsx)(n.code,{children:"作用提升"}),"生效，或显式设置",(0,s.jsx)(n.code,{children:"concatenateModules"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'export default {\n	// ...\n	mode: "production"\n};\n// 显式设置\nexport default {\n	// ...\n	optimization: {\n		// ...\n		concatenateModules: true\n	}\n};\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"压缩资源",children:["\uD83D\uDCE6压缩资源",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#压缩资源",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"压缩HTML/CSS/JS代码，压缩字体/图像/音频/视频"}),"，好处是",(0,s.jsx)(n.code,{children:"更有效减少打包体积"}),"。极致地优化代码都有可能不及优化一个资源文件的体积更有效。"]}),"\n",(0,s.jsxs)(n.p,{children:["针对",(0,s.jsx)(n.code,{children:"HTML"}),"代码，使用",(0,s.jsx)(n.a,{href:"https://github.com/jantimon/html-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"html-webpack-plugin"}),"开启压缩功能。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import HtmlPlugin from "html-webpack-plugin";\n\nexport default {\n	// ...\n	plugins: [\n		// ...\n		HtmlPlugin({\n			// ...\n			minify: {\n				collapseWhitespace: true,\n				removeComments: true\n			} // 压缩HTML\n		})\n	]\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["针对",(0,s.jsx)(n.code,{children:"CSS/JS代码"}),"，分别使用以下插件开启压缩功能。其中",(0,s.jsx)(n.code,{children:"OptimizeCss"}),"基于",(0,s.jsx)(n.code,{children:"cssnano"}),"封装，",(0,s.jsx)(n.code,{children:"Uglifyjs"}),"与",(0,s.jsx)(n.code,{children:"Terser"}),"都是",(0,s.jsx)(n.code,{children:"webpack"}),"官方插件，同时需注意压缩",(0,s.jsx)(n.code,{children:"JS代码"}),"需区分",(0,s.jsx)(n.code,{children:"ES5"}),"与",(0,s.jsx)(n.code,{children:"ES6"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/NMFR/optimize-css-assets-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"optimize-css-assets-webpack-plugin"}),"：压缩",(0,s.jsx)(n.code,{children:"CSS代码"}),"，在",(0,s.jsx)(n.code,{children:"webpack v5"}),"中请使用",(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/css-minimizer-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"css-minimizer-webpack-plugin"}),"代替"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/uglifyjs-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"uglifyjs-webpack-plugin"}),"：压缩",(0,s.jsx)(n.code,{children:"ES5"}),"版本的",(0,s.jsx)(n.code,{children:"JS代码"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"terser-webpack-plugin"}),"：压缩",(0,s.jsx)(n.code,{children:"ES6"}),"版本的",(0,s.jsx)(n.code,{children:"JS代码"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["后续实测",(0,s.jsx)(n.code,{children:"terser-webpack-plugin"}),"也可压缩",(0,s.jsx)(n.code,{children:"JS代码"}),"，因此在",(0,s.jsx)(n.code,{children:"webpack v5"}),"中可用其压缩",(0,s.jsx)(n.code,{children:"ES5"}),"与",(0,s.jsx)(n.code,{children:"ES6"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// import CssMinimizerWebpackPlugin from "css-minimizer-webpack-plugin"; // webpack v5\nimport OptimizeCssAssetsPlugin from "optimize-css-assets-webpack-plugin";\nimport TerserPlugin from "terser-webpack-plugin";\nimport UglifyjsPlugin from "uglifyjs-webpack-plugin";\n\nconst compressOpts = type => ({\n	cache: true, // 缓存文件\n	parallel: true, // 并行处理\n	[`${type}Options`]: {\n		beautify: false,\n		compress: { drop_console: true }\n	} // 压缩配置\n});\nconst compressCss = new OptimizeCssAssetsPlugin({\n	cssProcessorOptions: {\n		autoprefixer: { remove: false }, // 设置autoprefixer保留过时样式\n		safe: true // 避免cssnano重新计算z-index\n	}\n});\n// const compressCss = CssMinimizerWebpackPlugin(); // webpack v5\nconst compressJs = USE_ES6\n	? new TerserPlugin(compressOpts("terser"))\n	: new UglifyjsPlugin(compressOpts("uglify"));\n\nexport default {\n	// ...\n	optimization: {\n		// ...\n		minimizer: [compressCss, compressJs] // 代码压缩\n	}\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["针对",(0,s.jsx)(n.code,{children:"字体/音频/视频"}),"文件，还真无相关",(0,s.jsx)(n.code,{children:"Plugin"}),"，就只能拜托你在部署项目到生产环境前使用对应压缩工具处理了。针对",(0,s.jsx)(n.code,{children:"图像"}),"文件，很多",(0,s.jsx)(n.code,{children:"Loader/Plugin"}),"在封装时都使用了某些图像处理工具，而这些工具的某些功能又托管在国外服务器中，所以导致经常安装失败。具体解决方案可能较繁琐，可回看第10章的",(0,s.jsx)(n.code,{children:"填埋Npm镜像那些险象环生的坑"}),"那部分内容。"]}),"\n",(0,s.jsxs)(n.p,{children:["鉴于此，我花了一点小技巧开发了一个",(0,s.jsx)(n.code,{children:"Plugin"}),"用于配合",(0,s.jsx)(n.code,{children:"webpack"}),"压缩图像，可查看",(0,s.jsx)(n.a,{href:"https://github.com/JowayYoung/tinyimg-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"tinyimg-webpack-plugin"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import TinyimgPlugin from "tinyimg-webpack-plugin";\n\nexport default {\n	// ...\n	plugins: [\n		// ...\n		new TinyimgPlugin({ logged: true })\n	]\n};\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"一次构建策略两大优化方向十二个处理方式，轻松为应用打包做到最优化，当然下图不能缺席！"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"构建策略"})}),"\n",(0,s.jsxs)(n.p,{children:["任何时刻都要开展性能优化的思考，需从",(0,s.jsx)(n.code,{children:"时间成本"}),"与",(0,s.jsx)(n.code,{children:"空间成本"}),"下手，在必要时刻还需考虑两者共存的问题。一个应用不是开发完毕就了事，应时刻把用户放在首位，从用户角度思考性能优化的相关问题。"]}),"\n",(0,s.jsx)(n.p,{children:"本章内容到此为止，希望能对你有所启发，欢迎你把自己的学习心得打到评论区！"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","示例项目：",(0,s.jsx)(n.a,{href:"https://github.com/JowayYoung/fe-engineering",target:"_blank",rel:"noopener noreferrer",children:"fe-engineering"})]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","正式项目：",(0,s.jsx)(n.a,{href:"https://github.com/JowayYoung/bruce",target:"_blank",rel:"noopener noreferrer",children:"bruce"})]}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let o=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E5%88%B0%201%20%E8%90%BD%E5%9C%B0%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%2F14.%E5%BA%94%E7%94%A8%E6%89%93%E5%8C%85%EF%BC%9A%E5%BA%94%E7%94%A8%E6%89%93%E5%8C%85%E4%BD%93%E7%A7%AF%E8%BF%87%E5%A4%A7%EF%BC%8C%E8%81%8A%E8%81%8AWebpack%E9%82%A3%E4%BA%9B%E6%9E%84%E5%BB%BA%E7%AD%96%E7%95%A5%EF%BC%81.md"]={toc:[{text:"前言",id:"前言",depth:3},{text:"背景：一份良好的构建策略打包才顺心",id:"背景一份良好的构建策略打包才顺心",depth:3},{text:"方案：减少打包时间",id:"方案减少打包时间",depth:3},{text:"方案：减少打包体积",id:"方案减少打包体积",depth:3},{text:"总结",id:"总结",depth:3}],title:"14.应用打包：应用打包体积过大，聊聊Webpack那些构建策略！",headingTitle:"14.应用打包：应用打包体积过大，聊聊Webpack那些构建策略！",frontmatter:{}}}}]);