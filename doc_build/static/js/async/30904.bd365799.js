"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["30904"],{718118:function(e,n,t){t.r(n),t.d(n,{default:()=>a});var r=t(552676),s=t(740453);function c(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",blockquote:"blockquote",pre:"pre",code:"code",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"37v18特性篇-订阅外部数据源",children:["37.v18特性篇-订阅外部数据源",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#37v18特性篇-订阅外部数据源",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"一前言",children:["一前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一前言",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在第 31 章节中，讲到了外部数据源，还介绍了外部数据源的处理方式 —— ",(0,r.jsx)(n.strong,{children:"useMutableSource"})," 。在前不久更新的最新 React 18 中，用 useSyncExternalStore 代替了 useMutableSource 。具体内容可以参考 ",(0,r.jsx)(n.a,{href:"https://github.com/reactwg/react-18/discussions/86",target:"_blank",rel:"noopener noreferrer",children:"useMutableSource → useSyncExternalStore"})," 。"]}),"\n",(0,r.jsx)(n.p,{children:"言归正传，在之前的章节说到在 concurrent 模式下，render 可能会被执行多次，那么在读取外部数据源的会存在一个问题，比如一个 render 过程中读取了外部数据源状态 1 ，那么中途遇到更高优先级的任务，而中断了此次更新，就在此时改变了外部数据源，然后又恢复了此次更新，那么接下来又读取了数据源，由于中途发生了改变，所以这次读取的是外部数据源状态 2 ，那么一次更新中出现了这种表现不一致的情况。这个问题叫做 tearing 。"}),"\n",(0,r.jsxs)(n.h2,{id:"二-usesyncexternalstore-介绍",children:["二 useSyncExternalStore 介绍",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二-usesyncexternalstore-介绍",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"那么 useSyncExternalStore 的诞生并非偶然，和 v18 的更新模式下外部数据的 tearing 有着十分紧密的关联。"}),"\n",(0,r.jsx)(n.p,{children:"useSyncExternalStore 出现解决了这个问题，我们从 v18 发布的 tag 中，找到这样的描述："}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"useSyncExternalStore is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. It removes the need for useEffect when implementing subscriptions to external data sources, and is recommended for any library that integrates with state external to React."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"useSyncExternalStore 能够让 React 组件在 concurrent  模式下安全地有效地读取外接数据源，在组件渲染过程中能够检测到变化，并且在数据源发生变化的时候，能够调度更新。当读取到外部状态发生了变化，会触发一个强制更新，来保证结果的一致性。"}),"\n",(0,r.jsx)(n.p,{children:"现在用 useSyncExternalStore 不在需要把订阅到更新流程交给组件处理。如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:")\nfunction App(){\n     const state = useSyncExternalStore(store.subscribe,store.getSnapshot)\n     return <div>...</div>\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"如上是通过 useSyncExternalStore 实现的订阅更新，这样减少了 APP 内部组件代码，代码健壮性提升，一定程度上也降低了耦合，最重要的它解决了并发模式状态读取问题。但是这里强调的一点是， 正常的 React 开发者在开发过程中不需要使用这个 api ，这个 hooks 主要是对于 React 的一些状态管理库，比如 redux ，通过它的帮助可以合理管理外部的 store，保证数据读取的一致。"}),"\n",(0,r.jsx)(n.p,{children:"接下来看一下 useSyncExternalStore 使用："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"useSyncExternalStore(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot\n)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"subscribe 为订阅函数，当数据改变的时候，会触发 subscribe，在 useSyncExternalStore 会通过带有记忆性的 getSnapshot 来判别数据是否发生变化，如果发生变化，那么会强制更新数据。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"getSnapshot 可以理解成一个带有记忆功能的选择器。当 store 变化的时候，会通过 getSnapshot 生成新的状态值，这个状态值可提供给组件作为数据源使用，getSnapshot 可以检查订阅的值是否改变，改变的话那么会触发更新。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"getServerSnapshot 用于 hydration 模式下的 getSnapshot。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"三-usesyncexternalstore-基本使用",children:["三 useSyncExternalStore 基本使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三-usesyncexternalstore-基本使用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"接下来我们用 useSyncExternalStore 配合 redux ，来简单实现订阅外部数据源功能。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { combineReducers , createStore  } from 'redux'\n\n/* number Reducer */\nfunction numberReducer(state=1,action){\n    switch (action.type){\n      case 'ADD':\n        return state + 1\n      case 'DEL':\n        return state - 1\n      default:\n        return state\n    }\n}\n\n/* 注册reducer */\nconst rootReducer = combineReducers({ number:numberReducer  })\n/* 创建 store */\nconst store = createStore(rootReducer,{ number:1  })\n\nfunction Index(){\n    /* 订阅外部数据源 */\n    const state = useSyncExternalStore(store.subscribe,() => store.getState().number)\n    console.log(state)\n    return <div>\n        {state}\n        <button onClick={() => store.dispatch({ type:'ADD' })} >点击</button>\n    </div>\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"点击按钮，会触发 reducer ，然后会触发 store.subscribe 订阅函数，执行 getSnapshot 得到新的 number ，判断 number 是否发生变化，如果变化，触发更新。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"有了 useSyncExternalStore 这个 hooks ，可以通过外部数据到内部数据的映射，当数据变化的时候，可以通知订阅函数 subscribe 去触发更新。"}),"\n",(0,r.jsxs)(n.h2,{id:"四-usesyncexternalstore-原理",children:["四 useSyncExternalStore 原理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#四-usesyncexternalstore-原理",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"接下来看一下 useSyncExternalStore 内部是如何实现的。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"react-reconciler/src/ReactFiberHooks.new.js"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function mountSyncExternalStore(subscribe,getSnapshot){\n    /*  创建一个 hooks  */\n    const hook = mountWorkInProgressHook();\n    /* 产生快照 */\n    let nextSnapshot = getSnapshot(); \n\n    /* 把快照记录下来 */\n    hook.memoizedState = nextSnapshot;\n    /* 快照记录在 inst 属性上 */\n    const inst  = {\n        value: nextSnapshot,\n        getSnapshot,\n    };\n    hook.queue = inst;\n    \n    /* 用一个 effect 来订阅状态 ，subscribeToStore 发起订阅 */\n    mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n    \n    /* 用一个 useEffect 来监听组件 render ，只要组件渲染就会调用 updateStoreInstance  */\n    pushEffect(\n        HookHasEffect | HookPassive,\n        updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n        undefined,\n        null,\n    );\n    return nextSnapshot;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"mountSyncExternalStore 大致流程是这样的："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"第一步：创建一个 hooks 。我们都知道 hooks 更新是分两个阶段的，在初始化 hooks 阶段会创建一个 hooks ，在更新阶段会更新这个 Hook。"}),"\n",(0,r.jsx)(n.li,{children:"第二步：调用 getSnapshot 产生一个状态值，并保存起来。"}),"\n",(0,r.jsxs)(n.li,{children:["第三步：用一个 effect 来订阅状态 ",(0,r.jsx)(n.code,{children:"subscribeToStore"})," 发起订阅 。"]}),"\n",(0,r.jsxs)(n.li,{children:["第四步：用一个 useEffect 来监听组件 render ，只要组件渲染就会调用 ",(0,r.jsx)(n.code,{children:"updateStoreInstance"})," 。这一步是关键所在，在 concurrent 模式下渲染会中断，那么如果中断恢复 render ，那么这个 effect 就解决了这个问题。当 render 就会触发 updateStoreInstance 。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"接下来看一下 subscribeToStore 和 updateStoreInstance 的实现。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"subscribeToStore"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"react-reconciler/src/subscribeToStore.js"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  /* 取出上一次的快照信息 */\n  const prevValue = inst.value;\n  try {\n    /* 最新的快照信息 */\n    const nextValue = latestGetSnapshot();\n    /* 返回是否相等 */\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n/* 直接发起调度更新  */\nfunction forceStoreRerender(fiber) {\n  scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  const handleStoreChange = () => {\n    /* 检查 state 是否发生变化 */\n    if (checkIfSnapshotChanged(inst)) {\n       /* 触发更新 */ \n      forceStoreRerender(fiber);\n    }\n  };\n   /* 发起订阅 */\n  return subscribe(handleStoreChange);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"subscribeToStore 的流程如下："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"通过 subscribe 订阅 handleStoreChange，当 state 改变会触发 handleStoreChange ，里面判断两次快照是否相等，如果不想等那么触发更新。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"updateStoreInstance"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"react-reconciler/src/updateStoreInstance.js"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function updateStoreInstance(fiber,inst,nextSnapshot,getSnapshot) {\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot;\n  /* 检查是否更新 */\n  if (checkIfSnapshotChanged(inst)) {\n    /* 强制更新 */\n    forceStoreRerender(fiber);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"updateStoreInstance 很简单就是判断 state 是否发生变化，变化就更新。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"通过如上原理分析，我们知道了 useSyncExternalStore 是如何防止 tearing 的了。为了让大家更清楚其流程 ，接下来我们来模拟一个  useSyncExternalStore 的实现。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function useMockSyncExternalStore(subscribe,getSnapshot){\n  const [ , forceupdate ] = React.useState(null)\n  const inst = React.useRef(null)\n\n  const nextValue = getSnapshot()\n\n  inst.current = {\n     value:nextValue,\n     getSnapshot\n  }\n  /* 检测是否更新 */\n  const checkIfSnapshotChanged = () => {\n    try {\n      /* 最新的快照信息 */\n      const nextValue = inst.current.getSnapshot();\n      /* 返回是否相等 */\n      return !inst.value === nextValue\n    } catch (error) {\n      return true;\n    }\n  }\n  /* 处理 store 改变 */\n  const handleStoreChange=()=>{\n    if (checkIfSnapshotChanged(inst)) {\n      /* 触发更新 */\n      forceupdate({})\n   }\n  }\n  React.useEffect(()=>{\n    subscribe(handleStoreChange)\n  },[ subscribe ])\n\n  /* 注意这个 useEffect 没有依赖项 ，每次更新都会执行该 effect */\n  React.useEffect(()=>{\n      handleStoreChange()\n  })\n\n  return nextValue\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"如上就是 useSyncExternalStore 的模拟实现。"}),"\n",(0,r.jsxs)(n.h2,{id:"五-总结",children:["五 总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#五-总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本章节介绍了引入外部数据源的 hooks useSyncExternalStore，以及它的介绍，使用，以及原理。"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let a=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["React%20%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F37.v18%E7%89%B9%E6%80%A7%E7%AF%87-%E8%AE%A2%E9%98%85%E5%A4%96%E9%83%A8%E6%95%B0%E6%8D%AE%E6%BA%90.md"]={toc:[{text:"一前言",id:"一前言",depth:2},{text:"二 useSyncExternalStore 介绍",id:"二-usesyncexternalstore-介绍",depth:2},{text:"三 useSyncExternalStore 基本使用",id:"三-usesyncexternalstore-基本使用",depth:2},{text:"四 useSyncExternalStore 原理",id:"四-usesyncexternalstore-原理",depth:2},{text:"五 总结",id:"五-总结",depth:2}],title:"37.v18特性篇-订阅外部数据源",headingTitle:"37.v18特性篇-订阅外部数据源",frontmatter:{}}}}]);