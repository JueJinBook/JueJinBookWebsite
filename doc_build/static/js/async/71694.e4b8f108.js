"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["71694"],{488549:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var i=r(552676),s=r(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",h3:"h3",h4:"h4",pre:"pre",strong:"strong",blockquote:"blockquote",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"42聚合操作符入门",children:["42.聚合操作符入门",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42聚合操作符入门",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"63-聚合操作符入门",children:["6.3 聚合操作符入门",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#63-聚合操作符入门",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["在前面我们也说过，我们可以把聚合的操作符和Excel的公式和函数来类比，因为借助于操作符以及",(0,i.jsx)(n.code,{children:"$+字段名"}),"，聚合可以和Excel一样“整列整列”（N个文档里的同一个字段）地处理数据；而就聚合操作符的具体功能而言，和JavaScipt处理数字、时间、数组、对象、字符串等数据类型又有几分类似，所以我们可以把原本（看起来）需要JavaScipt处理的数据交给聚合来处理。在后面介绍操作符时，我们也会把聚合操作符与Excel、JavaScript处理数据来做类比。"]}),"\n",(0,i.jsxs)(n.h3,{id:"631-算术操作符",children:["6.3.1 算术操作符",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#631-算术操作符",children:"#"})]}),"\n",(0,i.jsxs)(n.h4,{id:"1算术操作符一览表与语法",children:["1、算术操作符一览表与语法",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1算术操作符一览表与语法",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"算术操作符基本都需要字段的值为Number数字类型或者可以通过表达式解析为数字类型，下面为算术操作符一览表以及对应着相应的使用语法说明："}),"\n",(0,i.jsxs)(n.h4,{id:"算术操作符与整列处理",children:["算术操作符与整列处理",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#算术操作符与整列处理",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"算术操作符可以批量处理N个文档里的同一个字段，也就是进行整列的处理，比如我们想获取以下表格所有用户的总分，这就需要使用到add将语文chinese、数学math、英语english的值使用add操作符相加："}),"\n",(0,i.jsxs)(n.p,{children:["结合add操作符的语法，我们可以使用如下查询代码，",(0,i.jsx)(n.code,{children:"$+字段名"}),"代表着字段的引用，而sum则是我们新增的一个字段："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"db.collection('user').aggregate()\n.project({\n  _id:1,\n  name:1,\n  sum:$.add(['$chinese','$math','$english'])\n})\n.end()\n.then(res => console.log(res.list))\n.catch(err => console.error(err))\n"})}),"\n",(0,i.jsx)(n.p,{children:"查询返回的结果，就和Excel下拉公式一样，总分sum是把每行的语数外分别相加："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'[{_id: "user001", name: "小云", sum: 251},\n{_id: "user002", name: "小开", sum: 240},\n{_id: "user003", name: "小发", sum: 219},\n{_id: "user004", name: "小腾", sum: 224}]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["上面的案例是使用算术操作符进行跨行相加的操作，我们还可以使用",(0,i.jsx)(n.code,{children:"$.add(['$number',20])"}),"让整个字段都加上一个常数，也可以更加复杂，比如",(0,i.jsx)(n.code,{children:"$.add([$.pow(['$number1', 2]), $.pow(['$number2', 2])])"}),"可以求number1字段和number2字段的平方和。"]}),"\n",(0,i.jsxs)(n.h3,{id:"632-累计器操作符",children:["6.3.2 累计器操作符",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#632-累计器操作符",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在前面我们介绍过聚合阶段group结合累计器操作符，它统计的是一整列数据的值，比如sum操作符就是把一整列的字段值求和。统计的是一整列，这是由group分组决定的，累计器操作符还可以用于其他阶段，用法和用在group阶段会有很多不同。"}),"\n",(0,i.jsxs)(n.h4,{id:"1累计器操作符一览表与语法",children:["1、累计器操作符一览表与语法",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1累计器操作符一览表与语法",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["以下累计器操作符都可以用在group阶段，而sum、avg、min、max、stdDevPop和stdDevSamp、mergeObjects还可以用于project、addFields、replaceRoot等阶段。用于group阶段，则是统计“",(0,i.jsx)(n.strong,{children:"纵向"}),"”一整列的数据（输入文档",(0,i.jsx)(n.strong,{children:"一整组"}),"某个字段的值），而用在其他阶段，则统计的是“",(0,i.jsx)(n.strong,{children:"横向"}),"”同一个文档里的数组内的数据（字段需是数组，且分别统计数组里面的值，mergeObjects则需要同一个文档内的多个字段的值为对象）。"]}),"\n",(0,i.jsxs)(n.h4,{id:"2求总和与平均值",children:["2、求总和与平均值",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2求总和与平均值",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"上面我们说过累计器用在不同的聚合阶段效果会不一样，比如sum和avg累计器，用在project就是“纵向”求总和、平均值，用在其他聚合阶段就是“横向”求总和、平均值。那这两者有什么区别呢？"}),"\n",(0,i.jsx)(n.p,{children:"比如下面是一个水果店各种水果的价格以及销售数量，我们想获取各种水果的均价以及一天的销售总额是多少："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{ "_id" : 1, "item" : "苹果", "price" : 8, "quantity" : 2,},\n{ "_id" : 2, "item" : "香蕉", "price" : 20, "quantity" : 1},\n{ "_id" : 3, "item" : "苹果", "price" : 7, "quantity" : 5},\n{ "_id" : 4, "item" : "西瓜", "price" : 10, "quantity" : 10},\n{ "_id" : 5, "item" : "香蕉", "price" : 5, "quantity" : 10}\n'})}),"\n",(0,i.jsx)(n.p,{children:"水果的均价使用group结合累计器操作符avg“纵向”求price的平均值，而一天的销售总额则是先将每行的价格和数量相乘之后再使用累计器操作符sum“纵向”求乘积的总和："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'db.collection("fruits").aggregate()\n.group({\n  _id:null,\n  avg:$.avg(\'$price\'),  //水果的均价，\n  total:$.sum($.multiply(["$price","$quantity"])) //销售额  \n})\n.end()\n.then(res => console.log(res.list))\n.catch(err => console.error(err))\n\n//打印的结果为：\n[{\n  _id: null,\n  total: 215,\n  avg: 10,\n}]\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"3查询分组里面的最大值和最小值",children:["3、查询分组里面的最大值和最小值",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3查询分组里面的最大值和最小值",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们以之前介绍的中国经济数据表来了解一下累计器操作符最大值和最小值的用法，比如我们想了解每个省的最大的城市GDP值或最少的城市常住人口值，也就是我们把城市按照省份来分组，再使用累计器操作符里的max和min来按省份取数据："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'db.collection("china").aggregate()\n.group({\n  _id:"$province",\n  maxgdp:$.max("$gdp"),\n  minresident:$.min("$resident_pop")\n})\n.end()\n.then(res => console.log(res))\n.catch(err => console.error(err))\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"使用max和min只是返回输入文档指定字段“整列”数据的最大值或最小值，却无法返回最大值或最小值对应的其他字段的值，比如上面我们只能获取每个省下辖的城市GDP的最大值分别是多少，但是却无法获取GDP最大的城市是哪一个。当然也可以继续使用聚合阶段并结合setDifference聚合操作符来最终获取对应的城市，不过非常麻烦，这里不多介绍。"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"4按条件排序后取第一个值和最后一个值",children:["4、按条件排序后取第一个值和最后一个值",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4按条件排序后取第一个值和最后一个值",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"如果你想按分组来除了获取每个组指定字段的最大值和最小值，还想获取最大值或最小值对应的其他字段的值，可以使用sort排序之后，再使用group来获取排序后的第一个值或最后一个值，比如我们想获取每个省GDP最高的城市的gdp值以及是哪个城市，可以使用如下方式："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'db.collection("china").aggregate()\n.sort({\n  gdp:-1\n})\n.group({\n  _id:"$province",\n  maxgdp:$.first("$gdp"),\n  city:$.first("$city")\n})\n.end()\n.then(res => console.log(res))\n.catch(err => console.error(err))\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"5将整列字段值组成一个数组",children:["5、将整列字段值组成一个数组",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5将整列字段值组成一个数组",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"比如如下数据存储了每个用户喜欢阅读的书籍，虽然是不同的用户，但是他们喜欢的书可能存在重复，我们想获取所有用户都喜欢哪些书，就需要将重复的数据给剔除，而且书籍分散在不同的用户的记录里，我们怎样才能把这些数据组合到一起呢？"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'[{\n  "_id":"author10001",\n  "file":["file200001","file200002","file200003"],\n  "male":"female",\n  "name":"小云",\n  "bookList":[\n    {\n      "_id":"file200001","categories":"PDF文档","size":"16M","title":"云开发实战指南.pdf"\n      },\n    {\n      "_id":"file200002","categories":"Word文档","size":"2M","title":"云数据库性能优化.doc"\n    },\n    {\n      "_id":"file200003","categories":"Word文档","size":"4M","title":"云开发入门指南.doc"\n    }]\n  },\n{\n  "_id":"author10002",\n  "male":"male",\n  "name":"小开",\n  "file":["file200001","file200004"],\n  "bookList":[\n    {\n      "_id":"file200001","categories":"PDF文档","size":"16M","title":"云开发实战指南.pdf"\n    },\n    {\n      "_id":"file200004","categories":"Word文档","size":"4M","title":"云函数实战.doc"\n    }]\n  }]\n'})}),"\n",(0,i.jsx)(n.p,{children:"我们可以使用unwind将数组给拆分，然后使用group分组来获取唯一值，使用push累计器操作符将用户喜欢的书籍给一个个push到数组里："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'db.collection("user").aggregate()\n  .unwind("$bookList")\n  .group({\n    _id:"$bookList._id",\n    books:$.push("$bookList")\n  })\n  .end()\n  .then(res => console.log(res))\n  .catch(err => console.error(err))\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"633-类型转换操作符",children:["6.3.3 类型转换操作符",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#633-类型转换操作符",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"云开发数据库的聚合支持在聚合阶段对数据类型进行转换，不过需要注意的是转换的结果并不会写入到数据库，不会对原有的数据造成影响。类型转换操作符的具体使用方法和JavaScript有一些相似，这里就不多做介绍了。"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"convert，将值转换为指定的类型"}),"\n",(0,i.jsx)(n.li,{children:"toBool，将值转换为布尔值"}),"\n",(0,i.jsx)(n.li,{children:"toDate，将值转换为日期"}),"\n",(0,i.jsx)(n.li,{children:"toDecimal，将值转换为Decimal128"}),"\n",(0,i.jsx)(n.li,{children:"toDouble，将值转换为double"}),"\n",(0,i.jsx)(n.li,{children:"toInt，将值转换为整数"}),"\n",(0,i.jsx)(n.li,{children:"toLong，将值转换为long"}),"\n",(0,i.jsx)(n.li,{children:"toObjectId，将值转换为ObjectId"}),"\n",(0,i.jsx)(n.li,{children:"toString，将值转换为字符串"}),"\n",(0,i.jsx)(n.li,{children:"type，返回字段的BSON数据类型"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"聚合操作符还有日期操作符、字符串操作符、数组操作符、对象操作符、集合操作符、条件操作符等等，这些操作符的使用方法和JavaScript处理不同的数据类型有很多相似之处，可以说是相互替代与补充的关系。我们只需要掌握了聚合阶段以及每个操作符所对应的功能，处理起来就可以得心应手了。"})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}let c=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F42.%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%85%A5%E9%97%A8.md"]={toc:[{text:"6.3 聚合操作符入门",id:"63-聚合操作符入门",depth:2},{text:"6.3.1 算术操作符",id:"631-算术操作符",depth:3},{text:"1、算术操作符一览表与语法",id:"1算术操作符一览表与语法",depth:4},{text:"算术操作符与整列处理",id:"算术操作符与整列处理",depth:4},{text:"6.3.2 累计器操作符",id:"632-累计器操作符",depth:3},{text:"1、累计器操作符一览表与语法",id:"1累计器操作符一览表与语法",depth:4},{text:"2、求总和与平均值",id:"2求总和与平均值",depth:4},{text:"3、查询分组里面的最大值和最小值",id:"3查询分组里面的最大值和最小值",depth:4},{text:"4、按条件排序后取第一个值和最后一个值",id:"4按条件排序后取第一个值和最后一个值",depth:4},{text:"5、将整列字段值组成一个数组",id:"5将整列字段值组成一个数组",depth:4},{text:"6.3.3 类型转换操作符",id:"633-类型转换操作符",depth:3}],title:"42.聚合操作符入门",headingTitle:"42.聚合操作符入门",frontmatter:{}}}}]);