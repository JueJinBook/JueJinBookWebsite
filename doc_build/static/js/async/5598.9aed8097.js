"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["5598"],{179388:function(e,n,s){s.r(n),s.d(n,{default:()=>O});var r=s(552676),c=s(740453);let l=s.p+"static/image/10cb5d6554c94697567e2f7a9db9fb4b.c894c129.gif",d=s.p+"static/image/64a309291974ea11ee444a4c97223f06.53b0729d.gif",i=s.p+"static/image/dd0054b1975cc911ad8028def2862cf5.6eea0496.webp",o=s.p+"static/image/5256fd6ee31c693f08c528a058ad5829.96973f37.webp",h=s.p+"static/image/40365b2752375c9f13b413414cd6892e.2f32b158.webp",a=s.p+"static/image/ddd2618a76fb7dddd5fd72ae023ecfdf.a4d94a70.gif",t=s.p+"static/image/3ab2de17a55d2b09c6097b8e31bfe660.4cd0ec04.gif",x=s.p+"static/image/6491ba4a98d0083df9850701ed36cc35.069c766d.webp",j=s.p+"static/image/25c4f31a1d6e069c2e51dc5c33a8ab5b.234eb52a.gif",p=s.p+"static/image/5a846852bfee315e18db8feab5dbce35.67395c64.gif",f=s.p+"static/image/15028f59155295a2ee6d3d999566ab3c.9d57c6df.webp",g=s.p+"static/image/eca2d63d7035fc83af5e922774f960f1.a56fbae2.webp",m=s.p+"static/image/9b85407793cf68c5e0a37cb525760945.9c1becb4.gif",u=s.p+"static/image/eb7da142b3a053c92919857a892454d5.acf336cc.webp",b=s.p+"static/image/8dd668e08f9e0690dd3b44d8e305fe1e.56615d5a.webp",y=s.p+"static/image/d66910484e8910637df324fd9206e888.39d25584.webp",S=s.p+"static/image/eaa2b470b31bdd8219b8c12efa8fdf0f.db16190b.webp",w=s.p+"static/image/75514c99fb71041638376a87980cbf75.4bff04e4.gif",v=s.p+"static/image/73ee2bb7e0828ffcb35ca48dc68786a3.09761a67.webp",k=s.p+"static/image/f11f6926d3ec140592367167baaa06e5.7e40271c.webp",C=s.p+"static/image/a820daf1831961ed4144ac546a14e724.e21f8594.webp",V=s.p+"static/image/fe17242f0db2434905601e29a52de390.c0a41cd7.webp",G=s.p+"static/image/02ce03032114338885ac1fad62b93ff1.c0a41cd7.webp",B=s.p+"static/image/5d02e0f0557a5d6f4f494d982a0319ad.981bea57.webp",M=s.p+"static/image/cc943d0afb5d872d8ca88add03f81507.00923f85.webp",E=s.p+"static/image/c2d81926719b874d5a52a1b6dc1c755e.981bea57.webp",D=s.p+"static/image/6a156a06a0f6696cffa55a966c7a86e1.d5a7023a.webp",N=s.p+"static/image/45f2c354f15ffec475da6270c5ab801a.c0a41cd7.webp",L=s.p+"static/image/abcf5ff49760d74ed0624099dc4ba137.ac187e8e.webp",X=s.p+"static/image/c3c1c772d8c807ca7c1f89db80a77442.d188402c.webp",A=s.p+"static/image/be89d7e187f7f1f0c96c93d7ba4f7d15.ea9f1bfb.webp",_=s.p+"static/image/60a896ef8464ac26a80a345c1edbca7b.90c26c08.gif",Z=s.p+"static/image/1418c974a9cf1ee7bb123b1428a33f95.f52c6ca6.webp";function W(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",img:"img",ul:"ul",li:"li",strong:"strong",pre:"pre",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"10-初级篇组织-svg",children:["10-初级篇：组织 SVG",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10-初级篇组织-svg",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["SVG 已经成为 Web 开发、数据可视化和图形设计领域的不可或缺的工具，它的灵活性和强大功能令人印象深刻。然而，随着 SVG 图形的复杂性不断增加，有效地组织和管理这些图形变得至关重要。在 SVG 中，你可以利用 ",(0,r.jsx)(n.code,{children:"<g>"}),"、",(0,r.jsx)(n.code,{children:"<use>"}),"、",(0,r.jsx)(n.code,{children:"<defs>"})," 和 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 等元素，有条不紊地组织和管理 SVG 图形的内容。通过结构化和分组，你能够将图形元素组织为逻辑单元，使代码更具可读性和可维护性。同时，引用和重用技术将帮助你减少重复代码，并实现图形元素的高效复用，从而提高开发效率。接下来的内容中，我将深入探讨这些元素，突出它们之间的区别以及各自的优势。"]}),"\n",(0,r.jsx)(n.p,{children:"除了技术层面的探索外，本节课还将分享优化和简化 SVG 代码的实用技巧和最佳实践。你将了解如何通过减少代码体积和复杂性来提高性能，并学会如何创建出令人印象深刻的图形内容。让我们一起深入探索 SVG 的世界，掌握组织 SVG 图形的技巧，创造出令人惊叹的视觉体验！"}),"\n",(0,r.jsxs)(n.h2,{id:"svg-结构元素的简介",children:["SVG 结构元素的简介",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-结构元素的简介",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Z,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 SVG 中，结构元素扮演着重要的角色，它们主要用于组织、管理和重用图形内容。这些元素不仅使用 SVG 文档更具可读性和可维护性，还为 Web 开发人员提供了强大的工具来创建复杂的图形结构和动态效果。"}),"\n",(0,r.jsxs)(n.p,{children:["当涉及到组织和管理 SVG 图形内容时，SVG 提供了一些关键的结构元素，包括 ",(0,r.jsx)(n.code,{children:"<g>"})," 、",(0,r.jsx)(n.code,{children:"<defs>"})," 、",(0,r.jsx)(n.code,{children:"<symbol>"})," 和 ",(0,r.jsx)(n.code,{children:"<use>"})," 等元素："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"<g>"})})," ",(0,r.jsx)(n.strong,{children:"元素"}),"：它主要用于创建一个分组，将多个 SVG 元素组织在一起。它类似于 HTML 的 ",(0,r.jsx)(n.code,{children:"<div>"})," 元素，不具有特定的图形语义，但允许你将相关的图形元素放在一起，并对它们进行统一的变换和样式设置。例如，你可以将多个路径（",(0,r.jsx)(n.code,{children:"<path>"}),"）、圆形（",(0,r.jsx)(n.code,{children:"<circle>"}),"）和矩形（",(0,r.jsx)(n.code,{children:"<rect>"}),"）放在一个 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素内，以便处理和样式化。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"<defs>"})})," ",(0,r.jsx)(n.strong,{children:"元素"}),"：它主要用于定义可重复使用的图形元素、渐变、滤镜和纹理等。你可以在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素内部定义这些元素，然后在整个 SVG 文档中使用它们。这种方式使得 SVG 文档更加模块化，让你能够更轻松地管理和维护定义的元素，以实现代码的简化和复用性。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"<symbol>"})})," ",(0,r.jsx)(n.strong,{children:"元素"}),"：它主要用于定义可重用的图形符号。与 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素类似，你可以在 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素内部定义图形，并在需要时通过 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素进行引用。不同之处在于，",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素通常用于定义独立的图形符号，比如 Icon 图标、Logo或其他可重复使用的图形元素。该元素可以实现图形的高效复用。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"<use>"})})," ",(0,r.jsx)(n.strong,{children:"元素"}),"：它允许你在 SVG 文档中重复使用现有的图形元素。通过使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素，你可以在同一文档中多次引用 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 或其他已定义的图形元素，而无需重复编写相同的代码。这对于创建大型和复杂的 SVG 图形非常有用，因为它可以减少代码的重复性，并简化代码的维护和管理。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"接下来，我们将介绍这些元素，突出它们之间的区别以及各自的优点。"}),"\n",(0,r.jsxs)(n.h2,{id:"使用-g-元素进行分组",children:["使用 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素进行分组",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-g-元素进行分组",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["SVG 的 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素代表组（“group”）的意思，使用 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素可以将逻辑上相关的图形元素组合在一起。在 SVG 中，使用 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素进行分组是组织和管理图形内容的一种常见方法。",(0,r.jsx)(n.code,{children:"<g>"})," 元素类似于 HTML 中的 ",(0,r.jsx)(n.code,{children:"<div>"})," 元素，它不具有特定的图形语义，而是用于将多个 SVG 元素（通常是逻辑上相关的图形元素）组合在一起。在图形编辑软件（如 Figma）中，",(0,r.jsx)(n.code,{children:"<g>"})," 元素的功能类似于图层中的“组”。你可以将组类比为图形设计软件中图层的概念，因为图层也是元素的一种组合："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["正如你所见，这个五角星被分成了五个组，每个组包含两个多边形（",(0,r.jsx)(n.code,{children:"<polygon>"})," 元素）。这些组中的多边形通常被认为是逻辑上相关的图形元素。"]}),"\n",(0,r.jsxs)(n.p,{children:["在对逻辑相关的图形元素进行分组时，我们通常会给 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素指定一个 ",(0,r.jsx)(n.code,{children:"id"})," 属性，以便为该组命名。任何应用于 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素的样式都会应用到其所有后代元素上。这样可以轻松地为整个对象添加样式、变换和交互性动画等。"]}),"\n",(0,r.jsxs)(n.p,{children:["以上图中的五角星为例。它由五个相同的角组成，每个角中包括了两个 ",(0,r.jsx)(n.code,{children:"<polygon>"})," 元素绘制的多边形："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["也就是说，首先在 SVG 中，使用 ",(0,r.jsx)(n.code,{children:"<polygon>"})," 元素绘制两个多边形，并且它们都嵌套在同一个 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素内："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -100 200 200" class="star">\n    <g class="arm arm-1">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:X,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["使用相同的方式，在上面代码的基础上再复制出四个一样的 ",(0,r.jsx)(n.code,{children:"<g>"})," ："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -100 200 200" class="star">\n    <g class="arm arm-1">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n    <g class="arm arm-2">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n    <g class="arm arm-3">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n    <g class="arm arm-4">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n    <g class="arm arm-5">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["现在五角星的五个角重叠在一起。我们需要通过其他的样式将每个角放置到它该去的位置，例如，旋转每个组（在 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素上设置 ",(0,r.jsx)(n.code,{children:"transform"})," 的 ",(0,r.jsx)(n.code,{children:"rotate"})," ）到正确的位置："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -100 200 200" class="star">\n    <g class="arm arm-1">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n    <g class="arm arm-2" transform="rotate(72)">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n    <g class="arm arm-3" transform="rotate(144)">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n    <g class="arm arm-4" transform="rotate(216)">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n    <g class="arm arm-5" transform="rotate(288)">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:"你可能注意到，我们将多边形定义为从坐标系的原点（即图像中心）开始。默认情况下，旋转也是围绕坐标系的原点进行的。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["由于五角星有五个角，图像的底部比顶部略短，为了使图像居中，我们可以将整个五角星图案组合在一起，即用一个 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素来包裹所有的角（",(0,r.jsx)(n.code,{children:"<g>"}),"）。然后再该元素元素使用 ",(0,r.jsx)(n.code,{children:"tranform"})," 的 ",(0,r.jsx)(n.code,{children:"translate"})," ，将整个五角星沿着 ",(0,r.jsx)(n.code,{children:"y"})," 轴向下移动 ",(0,r.jsx)(n.code,{children:"10"})," 个单位："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -100 200 200" class="star">\n    <g class="arms" transform="translate(0,10)">\n        <g class="arm arm-1">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n        <g class="arm arm-2" transform="rotate(72)">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n        <g class="arm arm-3" transform="rotate(144)">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n        <g class="arm arm-4" transform="rotate(216)">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n        <g class="arm arm-5" transform="rotate(288)">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n    </g>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/NWmdZXK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWmdZXK"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["正如你所看到的，分组元素不仅在组织和结构上非常有用。特别是当你想要向多个项目组成的 SVG 图形添加交互和变换时，它就显得特别有用。对于包含在同一个 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素内的所有子元素，可以统一应用变换和样式。这意味着你可以对整个组执行移动、旋转、缩放等设置，而不必单独操作每个元素，从而保持它们之间的空间关系。这非常方便。"]}),"\n",(0,r.jsx)(n.p,{children:"分组使交互性变得更加方便。例如，你可以将鼠标事件附加到整个“五角星”上，并使其作为一个整体组响应事件，而不必对该组中的每个元素应用相同的交互事件。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<g>"}),"元素还有一个重要且很棒的功能：它可以拥有自己的 ",(0,r.jsx)(n.code,{children:"<title>"})," 和 ",(0,r.jsx)(n.code,{children:"<desc>"})," 标签，这有助于使其对屏幕阅读器更具可访问性，并且使代码对人类来说更易读。例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -100 200 200" class="star">\n    <g class="arms" transform="translate(0,10)">\n        <title>五角星</title>\n        <desc>闪闪发光的五角星</desc>\n        \n        <g class="arm arm-1">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n        <g class="arm arm-2" transform="rotate(72)">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n        <g class="arm arm-3" transform="rotate(144)">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n        <g class="arm arm-4" transform="rotate(216)">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n        <g class="arm arm-5" transform="rotate(288)">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n    </g>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["你可能已经发现了，上面示例中，绘制五角星的五个角是相同的代码，我们不得不一遍又一遍地复制粘贴每个角的代码。其实，在 SVG 中，我们有更好的方式可以重复利用相同的形状。那就是 SVG 的 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素。"]}),"\n",(0,r.jsxs)(n.h2,{id:"使用-use-元素重复使用相同的形状",children:["使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素重复使用相同的形状",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-use-元素重复使用相同的形状",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["SVG 中的 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素提供了在同一文档中重复利用已定义图形元素的功能。通过 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素，你可以在 SVG 中创建一个图形，然后在需要的地方多次使用它，而无需重复编写相同的代码。换言之，使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素就像在 Figma 图形编辑软件中进行复制粘贴一样方便。它可以用于重用单个元素，也可以用于重用由 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素定义的一组元素。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<use>"})," 元素接受 ",(0,r.jsx)(n.code,{children:"x"}),"、",(0,r.jsx)(n.code,{children:"y"}),"、",(0,r.jsx)(n.code,{children:"width"})," 和 ",(0,r.jsx)(n.code,{children:"height"})," 属性，并使用 ",(0,r.jsx)(n.code,{children:"href"})," 属性（在 SVG 2 之前使用 ",(0,r.jsx)(n.code,{children:"xlink:href"})," 属性）引用其他内容（需要重用的元素或组）。因此，如果你在某处定义了一个具有特定 ",(0,r.jsx)(n.code,{children:"ID"})," 的元素或组，并且想要在其他地方重用它，你只需在 ",(0,r.jsx)(n.code,{children:"href"})," 属性中指定它的 URI，并设置 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 值，就可以将该元素或组移动到指定的位置。"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，我们来看两个简单的示例，看看 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素是如何重复使用单个元素和组。"]}),"\n",(0,r.jsxs)(n.p,{children:["首先，通过绘制一个太阳的形状，来向大家展示 ",(0,r.jsx)(n.code,{children:"<use>"})," 是如何重复使用单个元素的。我们需要绘制的太阳看起来像下图这样："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["不难发现，上图中有八条相同的太阳光线。假设你是使用 SVG 的 ",(0,r.jsx)(n.code,{children:"<line>"})," 绘制了太阳光线，如果你不利用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的话，你不得不重复使用八次 ",(0,r.jsx)(n.code,{children:"<line>"})," 来绘制上图中所有太阳光线。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sun" viewBox="-15 -15 30 30">\n    <circle r="6" fill="#F8CE6A" x="0" y="0" stroke="#FEBA0B" stroke-width=".8" />\n\n    <line stroke="#FEBA0B" stroke-width="2" stroke-linecap="round" x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(45)" stroke="#FEBA0B" stroke-width="2" stroke-linecap="round" x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(90)" stroke="#FEBA0B" stroke-width="2" stroke-linecap="round" x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(135)" stroke="#FEBA0B" stroke-width="2" stroke-linecap="round" x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(180)" stroke="#FEBA0B" stroke-width="2" stroke-linecap="round" x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(225)" stroke="#FEBA0B" stroke-width="2" stroke-linecap="round" x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(270)" stroke="#FEBA0B" stroke-width="2" stroke-linecap="round" x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(315)" stroke="#FEBA0B" stroke-width="2" stroke-linecap="round" x1="0" y1="10" x2="0" y2="13" />\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["你可以考虑将 ",(0,r.jsx)(n.code,{children:"<line>"})," 元素中的 ",(0,r.jsx)(n.code,{children:"stroke"})," 、",(0,r.jsx)(n.code,{children:"stroke-width"})," 和 ",(0,r.jsx)(n.code,{children:"stroke-linecap"})," 等属性提取到 CSS 中，使你的 SVG 代码变得更简洁："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sun" viewBox="-15 -15 30 30">\n    <circle r="6" fill="#F8CE6A" x="0" y="0" stroke="#FEBA0B" stroke-width=".8" />\n\n    <line  x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(45)"  x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(90)"  x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(135)"  x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(180)"  x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(225)"  x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(270)"  x1="0" y1="10" x2="0" y2="13" />\n    <line transform="rotate(315)"  x1="0" y1="10" x2="0" y2="13" />\n</svg>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".sun line {\n    stroke: #FEBA0B;\n    stroke-width: 2;\n    stroke-linecap: round;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/XWQpvmZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWQpvmZ"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["要是使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 怎么来绘制上图的太阳呢？我们使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的主要目的是重复使用 ",(0,r.jsx)(n.code,{children:"<line>"})," （太阳线），因此，我们还得使用一个 ",(0,r.jsx)(n.code,{children:"<circle>"})," 和 ",(0,r.jsx)(n.code,{children:"<line>"})," 元素绘制出太阳的“脸蛋”（中间的圆）和一条太阳线："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sun" viewBox="-15 -15 30 30">\n    <circle r="6" fill="#F8CE6A" x="0" y="0" stroke="#FEBA0B" stroke-width=".8" />\n    <line id="solar-line" x1="0" y1="10" x2="0" y2="13" />\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["现在，我们已经创建了一条用 ",(0,r.jsx)(n.code,{children:"<line>"})," 元素绘制的太阳线。你可以使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素来重复使用此太阳线，并绘制出其他的太阳线。为了让 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素能够重复使用 ",(0,r.jsx)(n.code,{children:"<line>"})," 元素绘制的太阳线，我们需要在 ",(0,r.jsx)(n.code,{children:"<line>"})," 元素上指定一个 ",(0,r.jsx)(n.code,{children:"id"})," 值，为这条线命名。这样，",(0,r.jsx)(n.code,{children:"<use>"})," 元素的 ",(0,r.jsx)(n.code,{children:"href"})," 属性就可以引用这个 ",(0,r.jsx)(n.code,{children:"id"}),"，从而重复使用相同的太阳线："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sun" viewBox="-15 -15 30 30">\n    <circle r="6" fill="#F8CE6A" x="0" y="0" stroke="#FEBA0B" stroke-width=".8" />\n\n    <line id="solar-line" x1="0" y1="10" x2="0" y2="13" />\n    <use href="#solar-line" transform="rotate(45)" />\n    <use href="#solar-line" transform="rotate(90)" />\n    <use href="#solar-line" transform="rotate(135)" />\n    <use href="#solar-line" transform="rotate(180)" />\n    <use href="#solar-line" transform="rotate(225)" />\n    <use href="#solar-line" transform="rotate(270)" />\n    <use href="#solar-line" transform="rotate(315)" />\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面的代码中，我们在 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素上使用了 ",(0,r.jsx)(n.code,{children:"transform"})," 的 ",(0,r.jsx)(n.code,{children:"rotate()"})," ，使每条重复利用的太阳线移动到其正确的位置。你甚至还可以将 ",(0,r.jsx)(n.code,{children:"<line>"})," 和所有 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素嵌套在一个 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素内，毕竟它们都是太阳线，逻辑上是相关的图形："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sun" viewBox="-15 -15 30 30">\n    <circle r="6" fill="#F8CE6A" x="0" y="0" stroke="#FEBA0B" stroke-width=".8" />\n  \n    <g class="solar-lines">\n        <line id="solar-line" x1="0" y1="10" x2="0" y2="13" />\n        <use href="#solar-line" transform="rotate(45)" />\n        <use href="#solar-line" transform="rotate(90)" />\n        <use href="#solar-line" transform="rotate(135)" />\n        <use href="#solar-line" transform="rotate(180)" />\n        <use href="#solar-line" transform="rotate(225)" />\n        <use href="#solar-line" transform="rotate(270)" />\n        <use href="#solar-line" transform="rotate(315)" />\n    </g>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/oNOBKzV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNOBKzV"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["请注意，你可以在 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的 ",(0,r.jsx)(n.code,{children:"href"})," 属性中引用任何 SVG 元素，即使该元素位于外部文件中。引用的元素或分组不必存在于同一个文件中。这对于组织文件（例如，你可以为重用组件创建一个文件）和缓存已使用的文件非常有用。例如，你为自己创建了一个图标组件，将项目中所有 Icon 图标存在一个名 ",(0,r.jsx)(n.code,{children:"icons.svg"})," 文件中，你可以在任何一个项目中像下面这样引用 ",(0,r.jsx)(n.code,{children:"icons.svg"})," 文件已定义的图标："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<use href="./path/icons.svg#sun" />\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这种方式存在一定的兼容性，例如 IE11 之前的版本，使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 引用外部 SVG 是不起作用的。因此，这种方式请谨慎使用。"]}),"\n",(0,r.jsxs)(n.p,{children:["现在，你可以使用相似的方式来改造前面五角星的案例。与之前绘制五角星一样，首先将绘制五角星角的两个 ",(0,r.jsx)(n.code,{children:"<polygon>"})," 放置在一个 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素中，并且给它指定一个 ",(0,r.jsx)(n.code,{children:"id"})," 值，例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -100 200 200" class="star">\n    <g class="arms" transform="translate(0,10)">\n        \x3c!-- 将重复使用这个角 --\x3e\n        <g id="arm">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n    \n    </g>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这是因为我们需要使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 重复使用五角星的角，也就是 ",(0,r.jsx)(n.code,{children:"id"})," 名为 ",(0,r.jsx)(n.code,{children:"arm"})," 的 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -100 200 200" class="star">\n    <g class="arms" transform="translate(0,10)">\n        <g id="arm">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n        <use href="#arm" transform="rotate(72)" />\n        <use href="#arm" transform="rotate(144)" />\n        <use href="#arm" transform="rotate(216)" />\n        <use href="#arm" transform="rotate(288)" />\n    </g>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:G,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/bGJgXLq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGJgXLq"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<use>"})," 元素允许你重用已经呈现在画布上的元素。但是，如果你想定义一个不显示的元素，然后在需要或想要时在特定位置绘制它呢？这就是 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素的用武之地。"]}),"\n",(0,r.jsxs)(n.h2,{id:"使用-defs-元素存储可重用元素",children:["使用 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素存储可重用元素",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-defs-元素存储可重用元素",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在上面两个示例中，你可能已经注意到了一个共同点：无论是重复利用 ",(0,r.jsx)(n.code,{children:"<line>"})," 元素绘制的太阳线，还是重复利用 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素中 ",(0,r.jsx)(n.code,{children:"<polygon>"})," 绘制的五角星的“角”，这些可重用的元素都会在 SVG 视口中进行渲染。然而，如果你希望这些可重用的元素不在 SVG 视口中渲染，而只是作为一个被复制的对象存在，那么 SVG 的 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素就是你的不二选择。"]}),"\n",(0,r.jsxs)(n.p,{children:["SVG 的 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素充当了一个非渲染的容器，主要用于存储那些不会直接显示在页面上的内容，比如可重用的图形元素、渐变、滤镜和纹理等。它的作用类似于一个“仓库”，用于存放那些在整个 SVG 文档中需要多次使用的元素，以便于集中管理和维护。换句话说，",(0,r.jsx)(n.code,{children:"<defs>"})," 元素的作用是定义元素，而不是直接渲染它们。然后，这些存储在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 内部的隐藏内容可以被其他 SVG 元素引用和显示。这意味着，使用 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素可以使 SVG 文档更加模块化，减少代码的重复性，提高代码的可维护性和可读性。"]}),"\n",(0,r.jsxs)(n.p,{children:["通过使用 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素，我们可以定义需要重复使用的任何元素，无论是之前提到的五角星的“角”（",(0,r.jsx)(n.code,{children:"<g>"})," 元素），还是太阳线（",(0,r.jsx)(n.code,{children:"<line>"})," 元素），甚至是更为复杂的 SVG 效果，比如裁剪、渐变、滤镜和纹理等。基本上，任何我们想要定义和存储以备将来使用的内容都可以放在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素内部，并且该元素将作为未来使用的模板或者工具，但它本身不会被渲染，只有当它的实例被调用时才会显示出来。"]}),"\n",(0,r.jsxs)(n.p,{children:["下面是 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素的一些主要特点和用法："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["定义可重用的图形元素： 在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素内部，可以定义各种类型的图形元素，如 ",(0,r.jsx)(n.code,{children:"<path>"}),"、",(0,r.jsx)(n.code,{children:"<circle>"}),"、",(0,r.jsx)(n.code,{children:"<rect>"})," 等。这些图形元素可以在整个 SVG 文档中被多次引用。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["定义渐变： ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素常用于定义线性渐变 (",(0,r.jsx)(n.code,{children:"<linearGradient>"}),") 和径向渐变 (",(0,r.jsx)(n.code,{children:"<radialGradient>"}),")。通过定义渐变，可以在 SVG 图形中应用复杂的颜色效果，而无需重复定义渐变的属性。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["定义滤镜： ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素也可以用来定义滤镜效果，比如模糊、阴影等。定义一次滤镜效果后，可以在需要的地方通过 ",(0,r.jsx)(n.code,{children:"<filter>"})," 元素引用，并将其应用到具体的图形元素上。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["定义图案和纹理： 除了渐变和滤镜外，",(0,r.jsx)(n.code,{children:"<defs>"})," 元素还可以用来定义图案 (",(0,r.jsx)(n.code,{children:"<pattern>"}),") 和纹理等。这些图案和纹理可以应用于填充图形元素，从而创建出复杂的视觉效果。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["使用 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素时，通常会结合 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素来实现图形元素的重用。定义在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 内部的元素可以通过在其他地方引用来重复使用，从而提高 SVG 图形的效率和灵活性。"]}),"\n",(0,r.jsxs)(n.p,{children:["继续以绘制五角形为例。我们都知道，不管是重复使用 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素，还是使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素，它们都在重复使用下面代码所绘制的五角星的“角”："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -100 200 200" class="star">\n    <g id="arm">\n        <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n        <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n    </g>\n</svg>        \n'})}),"\n",(0,r.jsxs)(n.p,{children:["既然如此，我们可以把这个对象存储在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 中："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -100 200 200" class="star">\n    <defs>\n        <g id="arm">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n    </defs>\n</svg>    \n'})}),"\n",(0,r.jsxs)(n.p,{children:["注意，前面我们提到过，",(0,r.jsx)(n.code,{children:"<defs>"})," 是个不可渲染的元素，放置在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 的所有内容都不会在 SVG 视口中呈现。因此，这个时候，你在 SVG 视口中看不到任何图形。"]}),"\n",(0,r.jsxs)(n.p,{children:["现在，我们可以通过 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素来重复使用存储在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 中的对象，比如这个示例中的 ",(0,r.jsx)(n.code,{children:"#arm"})," ，它是一个 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -100 200 200" class="star">\n    <defs>\n        <g id="arm">\n            <polygon points="0,0 36,-50 0,-100" fill="#EDD8B7" />\n            <polygon points="0,0 -36,-50 0,-100" fill="#E5C39C" />\n        </g>\n    </defs>\n    \n    <g class="arms" transform="translate(0,10)">\n        <use href="#arm"  />\n        <use href="#arm" transform="rotate(72)" />\n        <use href="#arm" transform="rotate(144)" />\n        <use href="#arm" transform="rotate(216)" />\n        <use href="#arm" transform="rotate(288)" />\n    </g>\n</svg>  \n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:V,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/YzMZKLV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzMZKLV"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我们再来看一个稍微复杂一点的案例。在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 中存储了一个径性渐变："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -200 200 400" class="snowman">\n    <defs>\n        <radialGradient id="snowball" cx="0.25" cy="0.25" r="1">\n            <stop offset="0%" stop-color="white" />\n            <stop offset="50%" stop-color="white" />\n            <stop offset="100%" stop-color="#d6d6d6" />\n        </radialGradient>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["然后将其（径向渐变 ",(0,r.jsx)(n.code,{children:"#snowball"}),"）用作其他 SVG 元素的填充颜色："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-100 -200 200 400" class="snowman">\n    <defs>\n        <radialGradient id="snowball" cx="0.25" cy="0.25" r="1">\n            <stop offset="0%" stop-color="white" />\n            <stop offset="50%" stop-color="white" />\n            <stop offset="100%" stop-color="#d6d6d6" />\n        </radialGradient>\n        \n        <circle id="eye" cx="0" cy="-55" r="5" />\n    </defs>\n\n    <circle class="body" cx="0" cy="60" r="80" fill="url(#snowball)" />\n\n    <g class="head">\n        <circle class="face" cx="0" cy="-40" r="50" fill="url(#snowball)" />\n        <g class="eyes">\n            <use href="#eye" />\n            <use href="#eye" x="20" />\n        </g>\n        <polygon class="mouth" points="10,-46 50,-40 10,-34" fill="#e66465" />\n    </g>\n\n    <g class="branch">\n        <line x1="-40" y1="30" x2="-90" y2="-30" stroke="pink" stroke-width="5" />\n        <line x1="-65" y1="0" x2="-90" y2="-10" stroke="pink" stroke-width="5" />\n    </g>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/RwOpbBL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwOpbBL"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["使用 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素存储可重用的对象时，原始元素不仅不会被直接渲染，而且在你想要在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 内重用一个元素时，你为每个实例指定的位置将相对于用户坐标系统的原点设置，而不是相对于原始元素的位置。举例来说，考虑下面这个示例，我们使用 SVG 绘制了一串樱桃，它由“茎叶”和“果实”组成。“茎叶”被分组到一个 ",(0,r.jsx)(n.code,{children:"id"})," 名为 ",(0,r.jsx)(n.code,{children:"stems-leaf"})," 的组内，它由茎和叶两个部分组成，分别使用两个 ",(0,r.jsx)(n.code,{children:"<path>"})," 元素绘制而成；而樱桃的“果实”也是由两个 ",(0,r.jsx)(n.code,{children:"<path>"})," 绘制面成，并且将它们分组到一个 ",(0,r.jsx)(n.code,{children:"id"})," 名为 ",(0,r.jsx)(n.code,{children:"cherrys"})," 的组内。随后，这个组与“茎叶”一起分组到一个 ",(0,r.jsx)(n.code,{children:"id"})," 名为 ",(0,r.jsx)(n.code,{children:"fruit-cherry"})," 的组中。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果我们将 ",(0,r.jsx)(n.code,{children:"#fruit-cherry"})," 组嵌套在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素中，那么它是不会在画布上渲染的。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="cherry" viewBox="0 0 512 512">\n    <defs>\n        \x3c!-- 一串樱桃 --\x3e\n        <g id="fruit-cherry">\n            \x3c!-- 樱桃茎叶 --\x3e\n            <g id="stems-leaf" stroke="#7AA20D" stroke-linejoin="round" stroke-linecap="round">\n                <path class="stems" fill="none" stroke-width="8" d="M54.817,169.848c0,0,77.943-73.477,82.528-104.043c4.585-30.566,46.364,91.186,27.512,121.498" />\n                <path class="leaf" fill="#7AA20D" stroke-width="4" d="M134.747,62.926c-1.342-6.078,0.404-12.924,5.762-19.681c11.179-14.098,23.582-17.539,40.795-17.846 c0.007,0,22.115-0.396,26.714-20.031c-2.859,12.205-5.58,24.168-9.774,36.045c-6.817,19.301-22.399,48.527-47.631,38.028 C141.823,75.784,136.277,69.855,134.747,62.926z" />\n            </g>\n            \n            \x3c!-- 樱桃果实 --\x3e\n            <g id="cherrys" fill="#ED6E46" stroke="#ED6E46" stroke-width="12">\n                <path class="r-cherry" d="M164.836,193.136 c1.754-0.12,3.609-0.485,5.649-1.148c8.512-2.768,21.185-6.985,28.181,3.152c15.076,21.845,5.764,55.876-18.387,66.523 c-27.61,12.172-58.962-16.947-56.383-45.005c1.266-13.779,8.163-35.95,26.136-27.478   C155.46,191.738,159.715,193.485,164.836,193.136z" />\n                <path class="l-cherry" d="M55.99,176.859 c1.736,0.273,3.626,0.328,5.763,0.135c8.914-0.809,22.207-2.108,26.778,9.329c9.851,24.647-6.784,55.761-32.696,60.78 c-29.623,5.739-53.728-29.614-44.985-56.399c4.294-13.154,15.94-33.241,31.584-20.99C47.158,173.415,50.919,176.062,55.99,176.859z" />\n            </g>\n        </g>\n    </defs>\n\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["现在，这串樱桃 ",(0,r.jsx)(n.code,{children:"#fruit-cherry"})," 可以作为一个模板供使用。我们可以像使用任何其他元素一样使用它，使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素。唯一的区别在于，在这种情况下，",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 属性现在是相对于用户坐标系统设置的，而不是相对于被使用的元素的位置。"]}),"\n",(0,r.jsxs)(n.p,{children:["例如，我们使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素在 SVG 画布上创建了三串樱桃，并通过 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 属性设置它们的位置："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<use xlink:href="#fruit-cherry" />\n<use xlink:href="#fruit-cherry" x="220" />\n<use xlink:href="#fruit-cherry" x="100" y="210" />\n'})}),"\n",(0,r.jsx)(n.p,{children:"假设在这种情况下用户坐标系统与视口的宽高相匹配，原点位于 SVG 视口的左上角，上面代码最终得到的结果如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/WNWpeBm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNWpeBm"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["正如你在上面的图片中看到的，每串樱桃都相对于坐标系的原点进行了定位，而在这种情况下，原点是 SVG 的左上角。因此，每串樱桃的左上角都位于用户坐标系统中的其自身的 ",(0,r.jsx)(n.code,{children:"(x，y)"})," 位置，与其他樱桃独立，与在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 内定义的樱桃模板无关。"]}),"\n",(0,r.jsxs)(n.p,{children:["当你使用 ",(0,r.jsx)(n.code,{children:"<defs>"})," 定义的重用元素时，可以为每个独立对象（如上面示例中的“一串串樱桃”）应用不同的样式和填充颜色，前提是这些样式没有在原始“樱桃”模板上定义。如果 ",(0,r.jsx)(n.code,{children:"<defs>"})," 内的“樱桃”应用了样式，这些样式仍然不会被任何新的样式覆盖。因此，",(0,r.jsx)(n.code,{children:"<defs>"})," 非常适合创建最小的模板，然后根据需要对副本进行样式设置。如果没有 ",(0,r.jsx)(n.code,{children:"<defs>"})," ，单独使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 就无法实现这一点。"]}),"\n",(0,r.jsx)(n.p,{children:"注意，有关于样式覆盖这一部分内容，稍后还会单独讨论。"}),"\n",(0,r.jsxs)(n.h2,{id:"使用-symbol-元素进行分组",children:["使用 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素进行分组",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-symbol-元素进行分组",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["SVG 的 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素是用于定义可重用图形符号的元素。它允许你将一个或多个图形元素打包成一个符号，然后在需要时通过 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素进行引用。这种机制非常适合定义独立的图形符号，比如图标、标志或其他可重复使用的图形元素。"]}),"\n",(0,r.jsxs)(n.p,{children:["以下是 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素的一些关键特点和使用方法："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["定义图形符号：",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素内部包含了一个或多个 SVG 图形元素，如路径（",(0,r.jsx)(n.code,{children:"<path>"}),"）、矩形（",(0,r.jsx)(n.code,{children:"<rect>"}),"）、圆形（",(0,r.jsx)(n.code,{children:"<circle>"}),"）等。这些图形元素定义了图形符号的形状和样式。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["标识符：每个 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素通常都会有一个唯一的 ",(0,r.jsx)(n.code,{children:"id"})," 属性，用于标识这个符号。这个 ",(0,r.jsx)(n.code,{children:"id"})," 属性在后续使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素引用该符号时会被用到。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["复用：一旦定义了 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素，你可以在同一个 SVG 文档中的任何地方重复使用它。通过 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素，你可以在文档的不同位置插入相同的图形符号，而不需要重复定义相同的图形元素。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["样式和属性继承：在使用 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素定义的图形符号中，可以设置各种样式和属性，如填充色、边框色、线条粗细等。这些样式和属性会被继承到使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素引用该符号的地方，但也可以在引用时进行覆盖。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["图形符号的不可见性：与 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素类似，",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素也是不可渲染的，它内部定义的图形在 SVG 渲染时不会直接显示出来。而是通过 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素引用和显示。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["简而言之，",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素类似于组元素 ",(0,r.jsx)(n.code,{children:"<g>"}),"，它提供了一种将元素组合在一起的方法。然而，它与 ",(0,r.jsx)(n.code,{children:"<g>"})," 组元素在两个方面有所不同："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<symbol>"})," 元素类似于 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素，是一个不可渲染的 SVG 元素。在没有被其他元素（例如 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素）引用的情况下，它定义的图形符号不会在 SVG 画布中显示出来。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<symbol>"})," 元素可以拥有自己的 ",(0,r.jsx)(n.code,{children:"viewBox"})," 和 ",(0,r.jsx)(n.code,{children:"preserveAspectRatio"})," 属性。这使得它可以根据需要适应于渲染到的视口，而不是默认的方式。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["SVG Sprites（SVG 雪碧图）应该是 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 最经典的用例。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["如上图所示，我们在构建 Web 应用或网站时，很可能会应用到很多小图标，而且应用 SVG 版本的 Icon 图标是具有明显优势的，例如缩放自如，还不失真。针对这种情境，使用 SVG 的 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素将 Web 应用上所需图标集中在一起管理将是一个非常不错的选择。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="icons sr-only">\n    <symbol id="youtube" viewBox="0 0 1024 1024">\n        <title>youtube</title>\n        <g fill="#212121">\n            <path d="M832 128 192 128c-105.6 0-192 86.4-192 192l0 384c0 105.6 86.4 192 192 192l640 0c105.6 0 192-86.4 192-192L1024 320C1024 214.4 937.6 128 832 128zM384 768 384 256l320 256L384 768z" fill="#212121" p-id="1710923637258-2546986_12356" />\n        </g>\n    </symbol>\n    \n    <symbol id="weibo" viewBox="0 0 1024 1024"></symbol>\n  \n    \x3c!-- 其他 symbol --\x3e\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面的代码相当于把将可能会用的到 Icon 图标都放置在一个单独的 SVG 文档中，你也可以其直接嵌套在 HTML 文档中，具体根据实际需求来决定。虽然 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 不会在 SVG 画布中直接呈现，但 ",(0,r.jsx)(n.code,{children:"<svg>"})," 根元素还是会占有一定的空间，为了避免它破坏 Web 布局，你可以直接给它设置一个内联的 ",(0,r.jsx)(n.code,{children:'style="display: none"'})," 。但不建议这样用，因为对 Web 可访问性不太友好，我习惯是使用其他的方案来达到相似的效果（隐藏元素）："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border-width: 0;\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["请注意，",(0,r.jsx)(n.code,{children:"display"})," 属性不适用于 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素；因此，即使将 ",(0,r.jsx)(n.code,{children:"display"})," 属性设置为 ",(0,r.jsx)(n.code,{children:"none"})," 以外的值， ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素也不会直接呈现，并且即使在 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素或其任何祖先上设置了",(0,r.jsx)(n.code,{children:"display"})," 属性为 ",(0,r.jsx)(n.code,{children:"none"}),"，",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素也可用于引用。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，根据实际需求，使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的 ",(0,r.jsx)(n.code,{children:"href"})," 属性来引用 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素的 ",(0,r.jsx)(n.code,{children:"id"})," 名，你就可以将所需要的图标应用于 Web："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<ul class="nav">\n    <li>\n        <a href="#">\n            <svg>\n                <use href="#twitter" />\n            </svg>\n            <span>Twitter</span>\n        </a>\n    </li>\n    \x3c!-- 其他 li --\x3e\n</ul>\n'})}),"\n",(0,r.jsx)(n.p,{children:"添加一些 CSS 代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".nav {\n    a {\n      color: #767c8c;\n      transition: color .3s ease-in;\n      \n        &:hover {\n            color: #00b3b0;\n        }\n    }\n    \n    svg {\n        display: block;\n        width: 1.5em;\n        height: 1.5em;\n        fill: currentColor;    \n    }\n    \n    use {\n        fill: red;    \n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"你看到的效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/jORBEva",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jORBEva"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["你可能已经发现了，虽然我们在 CSS 中给 ",(0,r.jsx)(n.code,{children:"use"})," 设置了 ",(0,r.jsx)(n.code,{children:"fill:red"})," ，Icon 图标的颜色并没有被调整。接下来，我们就要来聊聊这方面的内容。"]}),"\n",(0,r.jsxs)(n.h2,{id:"使用-css-样式化-svg-use-元素内容",children:["使用 CSS 样式化 SVG ",(0,r.jsx)(n.code,{children:"<use>"})," 元素内容",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-css-样式化-svg-use-元素内容",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在前面的学习中，我们了解到 SVG 的 ",(0,r.jsx)(n.code,{children:"<g>"}),"、",(0,r.jsx)(n.code,{children:"<defs>"}),"、",(0,r.jsx)(n.code,{children:"<symbol>"})," 和 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素在分组和引用元素方面发挥着重要作用："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<g>"})," 元素用于逻辑上将一组相关的图形元素进行分组。将元素分组对于应用样式并使所有元素继承该样式的情况非常有用，特别是当需要对一组元素进行动画处理并保持它们之间的空间关系时。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<defs>"})," 元素对于定义许多内容都很有用，其中一个主要用例是定义模式（例如渐变），然后将这些渐变用作其他 SVG 元素的描边和填充。它可用于通过引用在画布上的任何位置定义的任何元素来定义。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<symbol>"})," 元素结合了 ",(0,r.jsx)(n.code,{children:"<g>"})," 和 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素的优点，因为它用于将定义模板的元素组合在一起，该模板将在文档中的其他地方引用。与 ",(0,r.jsx)(n.code,{children:"<defs>"})," 不同，",(0,r.jsx)(n.code,{children:"<symbol>"})," 主要用于定义符号（例如图标），这些符号在整个文档中被引用。与其他两个元素相比，",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素具有一个重要的优势，即接受 ",(0,r.jsx)(n.code,{children:"viewBox"})," 和 ",(0,r.jsx)(n.code,{children:"preserveAspectRatio"})," 属性，使其可以根据需要适应于渲染到的视口，而不是默认的方式。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<use>"})," 元素是用于引用文档中其他地方定义的任何元素的元素。它可用于重用单个元素，也可用于重用由 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素、",(0,r.jsx)(n.code,{children:"<defs>"})," 元素或 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 定义的一组元素。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["虽然 SVG 的 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素有许多优点，如提高代码的可维护性和重用性，但它也存在一个明显的缺陷，那就是样式继承问题。",(0,r.jsx)(n.code,{children:"<use>"})," 元素会继承被引用元素的样式，这可能会导致一些意外的效果。如果被引用元素和 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素具有不同的样式，就可能出现样式冲突或不一致的情况。以 SVG 雪碧图为例，我们要重置 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素实例的样式，就会面临巨大的挑战。"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，我们来一起探讨为什么样式化 ",(0,r.jsx)(n.code,{children:"<use>"})," 引用的实例可能具有挑战性以及解决这些问题的方法。"]}),"\n",(0,r.jsxs)(n.p,{children:["继续以 SVG 雪碧图为例，当你使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 引用一个元素（例如 Icon 图标），代码可能如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'\x3c!-- 使用 symbol 定义和管理所需要的 icon 图标 --\x3e\n<svg class="icons sr-only">\n    <symbol id="youtube" viewBox="0 0 1024 1024">\n        <title>youtube</title>\n        <g fill="#212121">\n            <path d="M832 128 192 128c-105.6 0-192 86.4-192 192l0 384c0 105.6 86.4 192 192 192l640 0c105.6 0 192-86.4 192-192L1024 320C1024 214.4 937.6 128 832 128zM384 768 384 256l320 256L384 768z" fill="#212121" p-id="1710923637258-2546986_12356" />\n        </g>\n    </symbol>\n    \n    <symbol id="weibo" viewBox="0 0 1024 1024"></symbol>\n  \n    \x3c!-- 其他 symbol --\x3e\n</svg>\n\n\x3c!-- 使用 use 将需要的 icon 引入到 Web 应用或网站中 --\x3e\n<ul class="nav">\n    <li>\n        <a href="#">\n            <svg>\n                <use href="#twitter" />\n            </svg>\n            <span>Twitter</span>\n        </a>\n    </li>\n    \x3c!-- 其他 li --\x3e\n</ul>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["当你在屏幕上看到的图标时，实际上它是在 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素内部定义的，但呈现在屏幕上的不是 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 的内容，而是 ",(0,r.jsx)(n.code,{children:"<use>"})," 的内容，这相当于是 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 内容的一个副本或克隆。但是 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素只是一个 SVG 元素，并且是自闭合的（即 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的开始和结束标签之间没有任何内容）。那么第一个问题是，",(0,r.jsx)(n.code,{children:"<use>"})," 元素克隆来的内容到底放在哪里呢？"]}),"\n",(0,r.jsxs)(n.p,{children:["如果您打开浏览器的开发者工具，检查 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的实例化内容（例如“Twitter”图标），你会发现在 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素下面有一个 ",(0,r.jsx)(n.code,{children:"#shadow-root"})," ："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"#shadow-root"})," 自身有一个专业的术语，即 ",(0,r.jsx)(n.strong,{children:"Shadow DOM"}),"。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["特别声明，至于 Shadow DOM 是何方神圣，这里就不做过多的阐述，因为相关的内容超出了这节课的范畴。如果你想进一步了解这方面的内容，你可以移步阅读 W3C 提供的相关规范：",(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/shadow-dom/",target:"_blank",rel:"noopener noreferrer",children:"Shadow DOM"}),"！"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["从上面的截图中可以看出，SVG 的 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素所实例化的内容被克隆到一个由 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素“托管”的文档片段中。在这种情况下，",(0,r.jsx)(n.code,{children:"<use>"})," 元素被称为 Shadow Host。换句话说，",(0,r.jsx)(n.code,{children:"<use>"})," 元素克隆的内容以一种我们熟悉的 DOM 方式存在，但是存在于 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素托管的文档片段中，就像是一个影子一样。"]}),"\n",(0,r.jsxs)(n.p,{children:["对于开发者而言，不能像平时那样使用 CSS 或 JavaScript 来处理 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素托管的文档片段中的 DOM 元素，这是最令人关心的问题之一。开发者希望能够覆盖存在于 Shadow DOM 中的内容，特别是对于样式设置。例如，在介绍 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素时所展示的图标用例中，我们可能希望图标的颜色能够与链接文本的颜色同步。"]}),"\n",(0,r.jsx)(n.p,{children:"然而，实际情况并不如我们想象的那么简单。我们不能以熟悉的方式处理 Shadow DOM 中元素的样式。例如，下面这样的选择器无法选中 Shadow DOM 中的 DOM 元素："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"use path {\n    fill: red;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"这意味着，Web 开发者无法使用常规的 CSS 选择器来访问 Shadow DOM 中的元素。"}),"\n",(0,r.jsxs)(n.p,{children:["如果你曾经尝试过在 Web 开发中自定义 ",(0,r.jsx)(n.code,{children:"type"})," 为 ",(0,r.jsx)(n.code,{children:"range"})," 的 ",(0,r.jsx)(n.code,{children:"input"})," 元素的样式，你可能会知道，开发者可以使用一些特殊的选择器来穿透 Shadow DOM 的边界，以选中其中的元素并应用样式。例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:'input[type="range"]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: #000;\n    cursor: pointer;\n    -webkit-transition: all 0.15s ()ease-in-out;\n    transition: all 0.15s ()ease-in-out;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"即便如此，这并不代表这是一种普适的解决方案。因为能够穿透 Shadow DOM 边界的选择器非常有限，并且这些选择器的支持也不一定稳定。"}),"\n",(0,r.jsxs)(n.p,{children:["除此之外，Web 开发者希望有一种更简便的方法来为 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的内容设置样式，而不必费力地穿透 Shadow DOM 的边界。为了实现这一目标，并对 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的内容样式拥有更多的控制权，我们需要以不同的视角来思考，并充分利用 CSS 的层叠和继承特性。"]}),"\n",(0,r.jsxs)(n.p,{children:["样式化 SVG 元素与样式化 HTML 元素是极其相似的。SVG 元素除了可以使用表示属性进行样式化之外，还可以使用 CSS 的三种不同方式进行样式化：外部 CSS 样式（在外部样式表中）、内部样式块（",(0,r.jsx)(n.code,{children:"<style></style>"})," 元素）和内联样式（元素的 ",(0,r.jsx)(n.code,{children:"style"})," 属性），因此级联规则决定了如何对 SVG 元素进行样式化处理。"]}),"\n",(0,r.jsxs)(n.p,{children:["样式化 SVG 元素与样式化 HTML 元素非常相似。SVG 元素不仅可以使用其自身的属性进行样式化，还可以通过三种不同方式使用 CSS 进行样式化：外部 CSS 样式（在外部样式表中）、 SVG 文档内部样式块（",(0,r.jsx)(n.code,{children:"<style></style>"})," 元素）和内联样式（元素的 ",(0,r.jsx)(n.code,{children:"style"})," 属性）。因此，级联规则决定了如何对 SVG 元素进行样式化处理。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'\x3c!-- SVG 元素属性样式化 --\x3e\n<svg viewBox="0 0 100 100">\n    <circle cx="50" cy="50" r="20" fill="lime" stroke="orange" stroke-width="2" />\n</svg>\n\n\x3c!-- 内部样式块 --\x3e\n<svg viewBox="0 0 100 100">\n    <style>\n        circle {\n            fill: lime;\n            stroke: orange;\n            stroke-width: 2;\n        }\n    </style>\n    <circle cx="50" cy="50" r="20" fill="lime" stroke="orange" stroke-width="2" />\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:"外部样式表："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 100 100">\n    <circle cx="50" cy="50" r="20" fill="lime" stroke="orange" stroke-width="2" />\n</svg>    \n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"circle {\n    fill: red;\n    stroke: lime;\n    stroke-width: 4;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"SVG 元素内联样式："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 100 100">\n    <circle cx="50" cy="50" r="20" style="fill: lime; stroke: orange; stroke-width: 2"  />\n</svg>   \n'})}),"\n",(0,r.jsxs)(n.p,{children:["请注意，",(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/SVG/propidx.html",target:"_blank",rel:"noopener noreferrer",children:"SVG 规范"}),"中列出了一些可以作为 CSS 属性设置的 SVG 属性。其中一些属性与 CSS 共享，例如 ",(0,r.jsx)(n.code,{children:"opacity"})," 和 ",(0,r.jsx)(n.code,{children:"transform"}),"，而另一些则不是，例如 ",(0,r.jsx)(n.code,{children:"fill"}),"、",(0,r.jsx)(n.code,{children:"stroke"})," 和 ",(0,r.jsx)(n.code,{children:"stroke-width"})," 等。在 ",(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/SVG2/styling.html#SVGStylingProperties",target:"_blank",rel:"noopener noreferrer",children:"SVG 2.0 规范"}),"中，扩展了一些属性可以作为 CSS 属性来样式化 SVG 元素，例如 ",(0,r.jsx)(n.code,{children:"x"}),"、",(0,r.jsx)(n.code,{children:"y"}),"、",(0,r.jsx)(n.code,{children:"width"}),"、",(0,r.jsx)(n.code,{children:"height"}),"、",(0,r.jsx)(n.code,{children:"cx"})," 和 ",(0,r.jsx)(n.code,{children:"cy"})," 等。"]}),"\n",(0,r.jsx)(n.p,{children:"尽管可以使用多种方式对 SVG 元素进行样式化处理，但它们的权重是有所不同的。使用 SVG 元素属性进行样式化处理的权重最低，会被任何其他样式定义（外部样式表、文档样式表和内联样式）所覆盖。SVG 元素样式属性在样式级联中唯一具有的权力是对继承样式的覆盖。换句话说，样式属性只能覆盖元素上继承的样式，并且会被任何其他样式声明所覆盖。"}),"\n",(0,r.jsxs)(n.p,{children:["现在，明确了这一点，让我们回到 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素及其内容。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们现在知道不能使用 CSS 选择器来设置 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素内部的元素样式。我们还知道，就像 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素一样，应用于 ",(0,r.jsx)(n.code,{children:"<use>"})," 的样式将被其所有后代元素（在 Shadow DOM 中）继承。因此，尝试改变 ",(0,r.jsx)(n.code,{children:"<use>"})," 内部元素的填充颜色的第一个尝试是将该填充颜色应用于 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素本身，并让继承和级联自行处理。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" class="sr-only">\n    <symbol id="icon-coffee" viewBox="0 0 20 20">\n        <title>icon-coffee</title>\n        <path fill="#000" d="M15,17H14V9h3a3,3,0,0,1,3,3h0A5,5,0,0,1,15,17Zm1-6v3.83A3,3,0,0,0,18,12a1,1,0,0,0-1-1Z"/>\n        <rect fill="#000" x="1" y="7" width="15" height="12" rx="3" ry="3"/>\n        <path fill="#000" d="M7.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,0,1-1.79.89Z"/>\n        <path fill="#000" d="M3.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z"/>\n        <path fill="#000" d="M11.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z"/>\n    </symbol>\n</svg>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="icon" aria-hidden="true">\n    <use href="#icon-coffee" />\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<symbol>"})," 中的 ",(0,r.jsx)(n.code,{children:"<rect>"})," 和 ",(0,r.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,r.jsx)(n.code,{children:"fill"})," 被 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的所有后代元素继承。最终呈现的是一个黑色的“喝咖啡”的图标。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你希望得到是一个其他颜色的图标，例如 ",(0,r.jsx)(n.code,{children:"lime"})," 颜色。我们是无法直接通过普通的 CSS 选择器来选中 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的后代元素，但又为了需要改变图标颜色，很多 Web 开发者会考虑直接在 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 中修改元素的 ",(0,r.jsx)(n.code,{children:"fill"})," 属性。例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" class="sr-only">\n    <symbol id="icon-coffee" viewBox="0 0 20 20">\n        <title>icon-coffee</title>\n        <path fill="lime" d="M15,17H14V9h3a3,3,0,0,1,3,3h0A5,5,0,0,1,15,17Zm1-6v3.83A3,3,0,0,0,18,12a1,1,0,0,0-1-1Z"/>\n        <rect fill="lime" x="1" y="7" width="15" height="12" rx="3" ry="3"/>\n        <path fill="lime" d="M7.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,0,1-1.79.89Z"/>\n        <path fill="lime" d="M3.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z"/>\n        <path fill="lime" d="M11.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z"/>\n    </symbol>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:"这种方式可以使你得到一个绿色的图标。"}),"\n",(0,r.jsxs)(n.p,{children:["甚至你可能会考虑，将 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 中绘制图形元素的样式属性都从元素中删除。例如，移除上面示例代码中 ",(0,r.jsx)(n.code,{children:"<rect>"})," 和 ",(0,r.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,r.jsx)(n.code,{children:"fill"})," 属性，然后在 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素上应用一个 ",(0,r.jsx)(n.code,{children:"fill"})," 属性，使其后代元素继承该属性："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" class="sr-only">\n    <symbol id="icon-coffee" viewBox="0 0 20 20">\n        <title>icon-coffee</title>\n        <path  d="M15,17H14V9h3a3,3,0,0,1,3,3h0A5,5,0,0,1,15,17Zm1-6v3.83A3,3,0,0,0,18,12a1,1,0,0,0-1-1Z"/>\n        <rect  x="1" y="7" width="15" height="12" rx="3" ry="3"/>\n        <path  d="M7.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,0,1-1.79.89Z"/>\n        <path  d="M3.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z"/>\n        <path  d="M11.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z"/>\n    </symbol>\n</svg>\n\n<svg class="icon" aria-hidden="true">\n    <use href="#icon-coffee" fill="lime" />\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:"这种方式你同样可以获得所需要的图标。但问题也随之而来："}),"\n",(0,r.jsxs)(n.p,{children:["首先，",(0,r.jsx)(n.code,{children:"fill"})," 将被 ",(0,r.jsx)(n.code,{children:"<use>"})," 的所有后代元素继承，即使你可能不想对所有后代元素进行样式化。也就是说，如果 ",(0,r.jsx)(n.code,{children:"<use>"})," 内只有一个元素，或者你只需要一个单色图标，这种方式不会有任何问题。反之，如果 ",(0,r.jsx)(n.code,{children:"<use>"})," 内有多个元素，并且是一个彩色图标（哪怕是两种颜色），这种方式会使你得不到最终想要的结果。"]}),"\n",(0,r.jsx)(n.p,{children:"其次，你的 SVG 代码可能是通过诸如 Figma 图形设计软件导出或从设计师那里获得，或从第三方平台获得，并且出于任何原因，你可能没有权限或机会修改 SVG 代码。那么上面这两种方式也无法让你获得预期的图标。即使你可以有权限编辑 SVG 代码，我个人也强烈建议你不要这样做。因为："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["在大多数情况下，这些属性的值都是黑色（我们这里讨论的是 ",(0,r.jsx)(n.code,{children:"fill"})," 属性），可以称为浏览器的默认值。一旦你移除这些属性，你不得不重置它们，否则它将以黑色形式存在，除非你刚好需要"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["你可能需要重置所有值，例如 ",(0,r.jsx)(n.code,{children:"fill"}),"、",(0,r.jsx)(n.code,{children:"stroke"}),"、",(0,r.jsx)(n.code,{children:"stroke-width"})," 等"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["也就是说，我们应该找到一些更合理的方式对 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的内容进行样式化处理。"]}),"\n",(0,r.jsxs)(n.p,{children:["事实上，我们还是可以找到一些更合理，更优雅的方式来样式化 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的内容。"]}),"\n",(0,r.jsxs)(n.p,{children:["首先，我们可以利用 SVG 元素样式属性会被任何其他样式声明覆盖这一特点，让外部样式声明的属性样式覆盖来自 ",(0,r.jsx)(n.code,{children:"<use>"})," 的继续值。通过使用 CSS 的 ",(0,r.jsx)(n.code,{children:"inherit"})," 关键字，会使事情变得非常简单。继续以上面的代码为例，我们希望得到不同颜色的图标："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" class="sr-only">\n    <symbol id="icon-coffee" viewBox="0 0 20 20">\n        <title>icon-coffee</title>\n        <path fill="#000" d="M15,17H14V9h3a3,3,0,0,1,3,3h0A5,5,0,0,1,15,17Zm1-6v3.83A3,3,0,0,0,18,12a1,1,0,0,0-1-1Z"/>\n        <rect fill="#000" x="1" y="7" width="15" height="12" rx="3" ry="3"/>\n        <path fill="#000" d="M7.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,0,1-1.79.89Z"/>\n        <path fill="#000" d="M3.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z"/>\n        <path fill="#000" d="M11.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z"/>\n    </symbol>\n</svg>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="icon" aria-hidden="true">\n    <use href="#icon-coffee" class="coffee-1" />\n</svg>\n\n<svg class="icon" aria-hidden="true">\n    <use href="#icon-coffee" class="coffee-2" />\n</svg>\n\n<svg class="icon" aria-hidden="true">\n    <use href="#icon-coffee" class="coffee-3" />\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["我们使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 渲染了多个图标："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"现在让我们尝试为每个图标实例更改填充颜色："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".coffee-1 {\n    fill: lime;\n}\n\n.coffee-2 {\n    fill: skyblue;\n}\n\n.coffee-3 {\n    fill: brown;\n} \n"})}),"\n",(0,r.jsxs)(n.p,{children:["图标的填充颜色仍然不会改变，因为 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的后代元素（",(0,r.jsx)(n.code,{children:"<rect>"})," 和 ",(0,r.jsx)(n.code,{children:"<path>"}),"）上的 ",(0,r.jsx)(n.code,{children:'fill="#000"'})," 正在覆盖继承的颜色值。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["为了防止这种情况发生，我们需要强制 ",(0,r.jsx)(n.code,{children:"<rect>"})," 和 ",(0,r.jsx)(n.code,{children:"<path>"})," 元素继续颜色值："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":is(rect, path) {\n    svg & {\n        fill: inherit;\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在我们这个示例，需要强制的是 ",(0,r.jsx)(n.code,{children:"<rect>"})," 和 ",(0,r.jsx)(n.code,{children:"<path>"})," ，换成别的图形，你可以还需要对其他元素做类似操作。你可以来点粗暴的方式，那就是将 ",(0,r.jsx)(n.code,{children:"svg"})," 的所有后代元素的 ",(0,r.jsx)(n.code,{children:"fill"})," 属性的值重置为 ",(0,r.jsx)(n.code,{children:"inherit"})," ："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"svg * {\n    fill: inherit;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["现在，我们在每个 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素上设置的颜色被应用到了它的每个后代元素上。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/XWQMVGx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWQMVGx"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"通过种方式，你可以获得任意你想的颜色图标："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/WNWpMNX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNWpMNX"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["现在，当你希望强制 ",(0,r.jsx)(n.code,{children:"<use>"})," 的内容继承你在其上设置的样式时，这种技术就非常有用。但在大多数情况下，这可能并不是你想要的确切效果。例如，你希望继承 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素上更多的样式，例如 ",(0,r.jsx)(n.code,{children:"fill"})," 、",(0,r.jsx)(n.code,{children:"stroke"})," 、",(0,r.jsx)(n.code,{children:"stroke-width"})," 等。那么，你可能会发现你的 CSS 要这样做："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":is(rect, path) {\n    svg & {\n        fill: inherit;\n        stroke: inherit;\n        stroke-width: inherit;\n        /* 甚至还有其他要继承的样式 */\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果你真的碰到类似这样的情景，这里有一个小技巧可以提供给大家。我们可以利用 CSS 的 ",(0,r.jsx)(n.code,{children:"all"})," 属性使你的代码变得更简洁："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":is(rect, path) {\n    svg & {\n        all: inherit;\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["请注意，这只会影响可以在 CSS 中设置的属性，而不是仅适用于 SVG 的属性。因此，如果一个属性可以设置为 CSS 属性，它将被设置为 ",(0,r.jsx)(n.code,{children:"inherit"}),"，否则不会。虽然这样做能省不少事情，但带来的潜在风险也随之增加，如果你对 ",(0,r.jsx)(n.code,{children:"all 和 inherit"})," 都不太了解的话，我不建议你这样使用。"]}),"\n",(0,r.jsxs)(n.p,{children:["上面这种方案，能够强制样式属性从 ",(0,r.jsx)(n.code,{children:"<use>"})," 样式中继承是很强大，但是如果你有一个具有多个元素的图标，并且你不希望所有这些元素都从 ",(0,r.jsx)(n.code,{children:"<use>"})," 继续相同的填充颜色，那么你就需要考虑其他的解决方案。继续以上面的“咖啡”图标为例，假设你希望“咖啡杯”与“咖啡热气”的填充颜色不相同，怎么办？"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["仅仅在 ",(0,r.jsx)(n.code,{children:"<use>"})," 上设置一个样式肯定是行不通的。这个时候，我们需要其他方法来帮助我们将正确的颜色应用到正确的元素上。"]}),"\n",(0,r.jsxs)(n.p,{children:["针对于上图这种情景，我们可以使用 CSS 的 ",(0,r.jsx)(n.code,{children:"currentColor"})," 变量来为 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的内容设置样式。使用 CSS 的 ",(0,r.jsx)(n.code,{children:"currentColor"})," 变量结合上述技术，我们可以在一个元素上指定两种不同的颜色，而不仅仅是一种。这种技术的背后思想是在 ",(0,r.jsx)(n.code,{children:"<use>"})," 上同时使用 ",(0,r.jsx)(n.code,{children:"fill"})," 和 ",(0,r.jsx)(n.code,{children:"color"})," 属性，然后利用 ",(0,r.jsx)(n.code,{children:"currentColor"})," 的变量特性，使这些颜色继承到 ",(0,r.jsx)(n.code,{children:"<use>"})," 的内容中。"]}),"\n",(0,r.jsxs)(n.p,{children:["利用这种技术，我们需要对 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 做一些调整。例如上面的“咖啡”图标为例，我在 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 中新增了两个 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素，它将“咖啡杯”和“烟”分成两个组，并且将 ",(0,r.jsx)(n.code,{children:"fill"})," 属性移至 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" class="sr-only">\n    <symbol id="icon-coffee" viewBox="0 0 20 20">\n        <title>icon-coffee</title>\n        <g class="cup" fill="currentColor">\n              <path d="M15,17H14V9h3a3,3,0,0,1,3,3h0A5,5,0,0,1,15,17Zm1-6v3.83A3,3,0,0,0,18,12a1,1,0,0,0-1-1Z"/>\n              <rect  x="1" y="7" width="15" height="12" rx="3" ry="3"/>\n        </g>\n        <g class="smoke">\n            <path  d="M7.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,0,1-1.79.89Z"/>\n            <path  d="M3.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z"/>\n            <path  d="M11.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z"/>\n        </g>\n    </symbol>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["注意，我在 ",(0,r.jsx)(n.code,{children:".cup"})," （咖啡杯）的 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素上设置了 ",(0,r.jsx)(n.code,{children:"fill"})," 为 ",(0,r.jsx)(n.code,{children:"currentColor"})," ，同时将 ",(0,r.jsx)(n.code,{children:".smoke"})," 和其子元素的 ",(0,r.jsx)(n.code,{children:"fill"})," 移除。如果我们继续以 ",(0,r.jsx)(n.code,{children:"inherit"})," 来处理，事情反而会变得更为复杂一些。现在这样做，有一个很明显的优势，",(0,r.jsx)(n.code,{children:"fill"})," 为 ",(0,r.jsx)(n.code,{children:"currentColor"})," 的 SVG 元素，它将继承 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的 ",(0,r.jsx)(n.code,{children:"color"})," 值（咖啡杯），未设置 ",(0,r.jsx)(n.code,{children:"fill"})," 的 SVG 元素，它将直接继承 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的 ",(0,r.jsx)(n.code,{children:"fill"})," 值（烟）。如果我们继续使用 ",(0,r.jsx)(n.code,{children:"inherit"})," 关键词来强制继承 ",(0,r.jsx)(n.code,{children:"<use>"})," 的值，那么两个 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素（",(0,r.jsx)(n.code,{children:".cup"})," 和 ",(0,r.jsx)(n.code,{children:".smoke"}),"）都将继承相同的值，",(0,r.jsx)(n.code,{children:"currentColor"})," 将不再起作用。"]}),"\n",(0,r.jsxs)(n.p,{children:["现在，同时给 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素指定 ",(0,r.jsx)(n.code,{children:"fill"})," 和 ",(0,r.jsx)(n.code,{children:"color"})," 属性值，我们就可以使“咖啡杯和其上面的烟”具有不同的颜色："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".coffee-1 {\n    fill: red;\n    color: orange;\n}\n\n.coffee-2 {\n    fill: pink;\n    color: lime;\n}\n\n.coffee-3 {\n    fill: yellow;\n    color: #f26ace;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/vYMxdqe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYMxdqe"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["每个 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素都有自己的填充和颜色值。就这个示例来说，",(0,r.jsx)(n.code,{children:".cup"})," 将会继承 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的 ",(0,r.jsx)(n.code,{children:"color"})," 属性的值，因为它的 ",(0,r.jsx)(n.code,{children:"fill"})," 为 ",(0,r.jsx)(n.code,{children:"currentColor"})," （在",(0,r.jsx)(n.code,{children:"<symbol>"})," 中）；",(0,r.jsx)(n.code,{children:".smoke"})," 将会继承 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的 ",(0,r.jsx)(n.code,{children:"fill"})," 属性的值，因为它没有设置 ",(0,r.jsx)(n.code,{children:"fill"})," 属性值（在",(0,r.jsx)(n.code,{children:"<symbol>"})," 中）。"]}),"\n",(0,r.jsxs)(n.p,{children:["你可以尝试在下面的示例中，随意调整 ",(0,r.jsx)(n.code,{children:"fill"})," 和 ",(0,r.jsx)(n.code,{children:"color"})," 的颜色值，将会获得任意你喜欢的图标（双色）："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/abxJYBp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abxJYBp"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，",(0,r.jsx)(n.code,{children:"currentColor"})," 也适用于单色图标，这比使用 ",(0,r.jsx)(n.code,{children:"inherit"})," 还要更简便，唯一的要求是，需要在 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 中将 ",(0,r.jsx)(n.code,{children:"fill"})," 属性的值设置为 ",(0,r.jsx)(n.code,{children:"currentColor"})," 。你可以通过 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素，避免在每个元素上重置 ",(0,r.jsx)(n.code,{children:"fill"})," 属性的值为 ",(0,r.jsx)(n.code,{children:"currentColor"})," ："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" class="sr-only">\n    <symbol id="icon-coffee" viewBox="0 0 20 20">\n        <title>icon-coffee</title>\n        <g fill="currentColor">\n            <path d="M15,17H14V9h3a3,3,0,0,1,3,3h0A5,5,0,0,1,15,17Zm1-6v3.83A3,3,0,0,0,18,12a1,1,0,0,0-1-1Z" />\n            <rect x="1" y="7" width="15" height="12" rx="3" ry="3" />\n            <path d="M7.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,0,1-1.79.89Z" />\n            <path d="M3.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z" />\n            <path d="M11.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z" />\n        </g>\n    </symbol>\n</svg> \n\n<svg class="icon-coffee" aria-hidden="true">\n    <use href="#icon-coffee" class="coffee" />\n</svg>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".coffee {\n    color: lime;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/abxJYWJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abxJYWJ"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"继续加码，如果图标不是单色，也不仅是双色，而是更多的色彩呢？"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["现在我们需要更多的变量。这也意味着，仅使用 ",(0,r.jsx)(n.code,{children:"currentColor"})," 这个单一变量已经无法满足超出双色的情景了。庆幸的是，我们可以借助",(0,r.jsx)(n.a,{href:"https://s.juejin.cn/ds/iF4TyfGx/",target:"_blank",rel:"noopener noreferrer",children:"现代 CSS"})," 中的",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7249357815410589733",target:"_blank",rel:"noopener noreferrer",children:"自定义属性"}),"，即 CSS 变量来设置更多的变量。"]}),"\n",(0,r.jsxs)(n.p,{children:["使用 CSS 变量来样式化 ",(0,r.jsx)(n.code,{children:"<use>"})," 内容与使用 ",(0,r.jsx)(n.code,{children:"currentColor"})," 类似，首先我们需要将 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 中每个元素的 ",(0,r.jsx)(n.code,{children:"fill"})," 属性值设置为 CSS 自定义属性："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" class="sr-only">\n    <symbol id="icon-coffee" viewBox="0 0 20 20">\n        <title>icon-coffee</title>\n        <path fill="var(--fill-1, lime)" d="M15,17H14V9h3a3,3,0,0,1,3,3h0A5,5,0,0,1,15,17Zm1-6v3.83A3,3,0,0,0,18,12a1,1,0,0,0-1-1Z" />\n        <rect fill="var(--fill-2, lime)" x="1" y="7" width="15" height="12" rx="3" ry="3" />\n        <path fill="var(--fill-3, lime)" d="M7.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,0,1-1.79.89Z" />\n        <path fill="var(--fill-4, lime)" d="M3.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z" />\n        <path fill="var(--fill-5, lime)" d="M11.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z" />\n    </symbol>\n</svg>\n\n<svg class="icon-coffee" aria-hidden="true">\n    <use href="#icon-coffee" class="coffee" />\n</svg>  \n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面的代码中，我们为每个元素都设置了一个 CSS 自定义属性，并且提供了一个备用值 ",(0,r.jsx)(n.code,{children:"lime"})," 。当你没有给每个变时显式指定值时，都将会使用备用值 ",(0,r.jsx)(n.code,{children:"lime"})," 作为每个自定义属性的值。因此，你看到的咖啡杯将是一个纯色（",(0,r.jsx)(n.code,{children:"lime"}),"）。"]}),"\n",(0,r.jsxs)(n.p,{children:["基于这个前提，你可以在 ",(0,r.jsx)(n.code,{children:"<use>"})," 中为 CSS 自定义属性指定值："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".coffee {\n    --fill-1: red;\n    --fill-2: green;\n    --fill-3: blue;\n    --fill-4: orange;\n    --fill-5: pink;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"这样你就可以非常容易得到一个多色有图标："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/abxJYyJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abxJYyJ"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["通过利用CSS 层叠，尽管在 Shadow DOM中，对 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的内容进行样式化可以变得不那么复杂。而且借助CSS 自定义属性（无论是仅使用 ",(0,r.jsx)(n.code,{children:"currentColor"})," 还是自定义属性），我们可以穿透 Shadow DOM的边界，按照我们的喜好定制图形，同时为任何出现问题时提供非常好的回退机制。"]}),"\n",(0,r.jsxs)(n.p,{children:["就我个人而言，我对 CSS 自定义属性与 SVG 结合的功能非常兴奋。我喜欢它们在一起时的强大功能，特别是考虑到我们拥有的出色回退机制。但需要知道的是，",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7252964839705247755",target:"_blank",rel:"noopener noreferrer",children:"CSS 自定义属性非常的强大"}),"，它可以帮助以更轻便的方式做更多复杂的事情，但它也有很多细节需要注意。不过，这部分内容已超出这节课的范畴，如果你感兴趣的话，可以移步阅读《",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7249357815410589733",target:"_blank",rel:"noopener noreferrer",children:"CSS 自定义属性你知道多少"}),"》。"]}),"\n",(0,r.jsxs)(n.h2,{id:"案例会动的魔方",children:["案例：会动的魔方",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#案例会动的魔方",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"接下来，我们通过前面学到的相关知识来制作一个魔方，并通过几行简单的 CSS 代码，使这个魔方动起来："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/marianab/full/KKKYdxE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/marianab/full/KKKYdxE"})," （来源于 ",(0,r.jsx)(n.a,{href:"https://codepen.io/marianab",target:"_blank",rel:"noopener noreferrer",children:"@Mariana Beldi"})," ）"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["正如你所看到的，整个魔方就是一个大立方体，它又是由很多个小立方体组成。绘制这个魔方和我们今天所学到知识非常的匹配。我们可以使用 SVG 的 ",(0,r.jsx)(n.code,{children:"<use>"})," 克隆很多个小立方体，然后将它们拼装在一起，就组成了一个魔方（大立体）。"]}),"\n",(0,r.jsxs)(n.p,{children:["这意味着，在使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 之前，我们先要有一个小立方体。这在 SVG 中，一点都不难。我们可以通过三个 ",(0,r.jsx)(n.code,{children:"<rect>"})," 绘制小立方体的三个可视面（虽然一个立方体是六个面，但在这个示例中，我们只需要三个就足够了）。需要知道的是，",(0,r.jsx)(n.code,{children:"<rect>"})," 只会绘制出三个矩形，你需要应用一点 ",(0,r.jsx)(n.code,{children:"transform"})," 相关的知识，把三个矩形拼接组成一个立方体："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-130 -20 300 100" class="cub">\n    <g id="cube" class="cube-unit">\n        <rect width="21" height="24" fill="#00affa" stroke="#0079ad" transform="skewY(30)"/>\n        <rect width="21" height="24" fill="#008bc7" stroke="#0079ad" transform="skewY(-30) translate(21 24.3)"/>\n        <rect width="21" height="21" fill="#009CDE" stroke="#0079ad" transform="scale(1.41,.81) rotate(45) translate(0 -21)"/>\n    </g>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面示例中，应用于 ",(0,r.jsx)(n.code,{children:"react"})," 元素的 ",(0,r.jsx)(n.code,{children:"transform"})," 属性与 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668493158023205",target:"_blank",rel:"noopener noreferrer",children:"CSS 的变换"}),"基本相似，如果使用过 CSS 的变换（",(0,r.jsx)(n.code,{children:"transform"}),"），那么理解它们就不难。即使你从未接触过，也不用紧张，后面我们会有一节课专变介绍 SVG 的 ",(0,r.jsx)(n.code,{children:"transform"})," 属性。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/BaEWxVz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaEWxVz"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我们通过 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素来包裹这三个 ",(0,r.jsx)(n.code,{children:"<rect>"})," ，并且给它指定了一个 ",(0,r.jsx)(n.code,{children:"id"})," 名为 ",(0,r.jsx)(n.code,{children:"cub"})," ，这是便于 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素来克隆出剩余的小立方体。"]}),"\n",(0,r.jsxs)(n.p,{children:["在克隆出大立方体之前，先把上面绘制出来的小立方体嵌套到一个 ",(0,r.jsx)(n.code,{children:"<defs>"})," 中。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <g id="cube" fill-opacity= "0.9" stroke-miterlimit= "0">\n            <rect width="21" height="24" fill="#00affa" stroke="#0079ad" transform="skewY(30)" />\n            <rect width="21" height="24" fill="#008bc7" stroke="#0079ad" transform="skewY(-30) translate(21 24.3)" />\n            <rect width="21" height="21" fill="#009CDE" stroke="#0079ad" transform="scale(1.41,.81) rotate(45) translate(0 -21)" />\n        </g>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["你也可以使用 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 来替代前面示例中的 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <symbol id="cube" viewBox="-30 -30 300 230">\n        <rect width="21" height="24" fill="#00affa" stroke="#0079ad" transform="skewY(30)" fill-opacity= "0.9" stroke-miterlimit= "0"/>\n        <rect width="21" height="24" fill="#008bc7" stroke="#0079ad" transform="skewY(-30) translate(21 24.3)" fill-opacity= "0.9" stroke-miterlimit= "0" />\n        <rect width="21" height="21" fill="#009CDE" stroke="#0079ad" transform="scale(1.41,.81) rotate(45) translate(0 -21)" fill-opacity= "0.9" stroke-miterlimit= "0" />\n    </symbol>    \n</svg> \n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<defs>"})," 和 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 都不会让小立体方直接在 SVG 中画布上呈现，除非我们使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素来引用它们。以 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 为例，它也有一个 ",(0,r.jsx)(n.code,{children:"id"})," 名 ",(0,r.jsx)(n.code,{children:"cube"})," ，我们使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 的 ",(0,r.jsx)(n.code,{children:"href"})," 属性来引用它，你可以根据你的需要引用任意次数，并在 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素上设置 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 值，更改克隆的小立体的位置："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="50 50 300 230" class="cub">\n    <use href="#cube" x="121" y="112" />\n    <use href="#cube" x="100" y="124" />\n    <use href="#cube" x="142" y="124" />\n    <use href="#cube" x="121" y="136" />\n    <use href="#cube" x="79" y="136" />\n    <use href="#cube" x="163" y="136" />\n    <use href="#cube" x="142" y="148" />\n    <use href="#cube" x="100" y="148" />\n    <use href="#cube" x="121" y="160" />\n    <use href="#cube" x="121" y="88" />\n    <use href="#cube" x="100" y="100" />\n    <use href="#cube" x="142" y="100" />\n    <use href="#cube" x="121" y="112" />\n    <use href="#cube" x="79" y="112" />\n    <use href="#cube" x="163" y="112" />\n    <use href="#cube" x="142" y="124" />\n    <use href="#cube" x="100" y="124" />\n    <use href="#cube" x="121" y="136" />\n    <use href="#cube" x="121" y="64" />\n    <use href="#cube" x="100" y="76" />\n    <use href="#cube" x="142" y="76" />\n    <use href="#cube" x="121" y="88" />\n    <use href="#cube" x="79" y="88" />\n    <use href="#cube" x="163" y="88" />\n    <use href="#cube" x="142" y="100" />\n    <use href="#cube" x="100" y="100" />\n    <use href="#cube" x="121" y="112" />\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:"现在一个蓝色的魔方就出现在你的眼前了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/WNWpJYO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNWpJYO"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你不喜欢蓝色，那么可以根据前面所学，使用 CSS 自定义属性来替代 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 中元素（",(0,r.jsx)(n.code,{children:"<rect>"}),"）的 ",(0,r.jsx)(n.code,{children:"fill"})," 和 ",(0,r.jsx)(n.code,{children:"stroke"})," 属性值："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <symbol id="cube" viewBox="-30 -30 300 230">\n        <rect width="21" height="24" fill="var(--lightColor, #00affa)" stroke="var(--strokeColor,#0079ad)" transform="skewY(30)" fill-opacity="0.9" stroke-miterlimit="0" />\n        <rect width="21" height="24" fill="var(--darkColor,#008bc7)" stroke="var(--strokeColor,#0079ad)" transform="skewY(-30) translate(21 24.3)" fill-opacity="0.9" stroke-miterlimit="0" />\n        <rect width="21" height="21" fill="var(--mainColor,#009CDE)" stroke="var(--strokeColor,#0079ad)" transform="scale(1.41,.81) rotate(45) translate(0 -21)" fill-opacity="0.9" stroke-miterlimit="0" />\n    </symbol>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["你只需要在 CSS 中将 ",(0,r.jsx)(n.code,{children:"--lightColor"})," 、",(0,r.jsx)(n.code,{children:"--darkColor"})," 、",(0,r.jsx)(n.code,{children:"--mainColor"})," 和 ",(0,r.jsx)(n.code,{children:"--strokeColor"})," 设置为自己喜欢的颜色值，你就将获得自己喜欢的魔方："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".pink-cube {\n    --mainColor: #de0063;\n    --strokeColor: #ad004e;\n    --lightColor: #fa0070;\n    --darkColor: #c7005a;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/gOymKrg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOymKrg"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这样，我们可以创建任意多的魔方，也可以获得任意颜色的魔方："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/mdgWKwW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdgWKwW"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["最后，你可以使用 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7292735608995184678",target:"_blank",rel:"noopener noreferrer",children:"CSS 动画"}),"，给魔方添加一个类似爆炸的动画效果："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes moveX {\n        to {\n            translate: var(--translate, 35px) 0;\n        }\n    }\n    \n    @keyframes moveY {\n        to {\n            translate: 0 var(--translate, -35px);\n        }\n    }\n\n    .m-left {\n        --translate: -50px;\n    }\n    \n    .m-right {\n        --translate: 50px;\n    }\n\n    .m-left,\n    .m-right {\n        animation: 1s moveX alternate infinite paused;\n    }\n    \n    .m-up,\n    .m-down {\n        animation: 1s moveY alternate infinite paused;\n    }\n\n    .cube:hover * {\n        animation-play-state: running;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/xxeqzPb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxeqzPb"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这节课中，我们深入探讨了如何组织和利用 SVG 图形的不同元素，以及它们之间的关系。"}),"\n",(0,r.jsxs)(n.p,{children:["首先，我们介绍了 SVG 中的 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素，它用于将一组相关的图形元素进行逻辑分组。通过使用 ",(0,r.jsx)(n.code,{children:"<g>"})," 元素，我们可以轻松地对一组元素应用样式、变换和动画，同时保持它们之间的空间关系。"]}),"\n",(0,r.jsxs)(n.p,{children:["其次，我们研究了 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素的作用，它允许我们定义一组不直接显示在画布上的内容，如可重用的图形元素、渐变、滤镜等。",(0,r.jsx)(n.code,{children:"<defs>"})," 元素在整个 SVG 文档中多次使用的元素提供了一种统一的管理和维护方式，从而提高了代码的可维护性和可读性。"]}),"\n",(0,r.jsxs)(n.p,{children:["然后，我们学习了 ",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素的用法，它类似于 ",(0,r.jsx)(n.code,{children:"<g>"})," 和 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素，但具有自己的 ",(0,r.jsx)(n.code,{children:"viewBox"})," 和 ",(0,r.jsx)(n.code,{children:"preserveAspectRatio"})," 属性。",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素通常用于定义符号，如图标，以便在文档中的其他地方引用。与 ",(0,r.jsx)(n.code,{children:"<defs>"})," 不同，",(0,r.jsx)(n.code,{children:"<symbol>"})," 元素更适合定义模板，而不是直接渲染内容。"]}),"\n",(0,r.jsxs)(n.p,{children:["最后，我们讨论了如何使用 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素来引用和重用其他 SVG 元素。",(0,r.jsx)(n.code,{children:"<use>"})," 元素允许我们在文档中多次使用相同的图形元素，而无需重复编写代码。然而，我们也注意到了 ",(0,r.jsx)(n.code,{children:"<use>"})," 元素的一些缺点，如样式继承问题和对 Shadow DOM 的限制。"]}),"\n",(0,r.jsx)(n.p,{children:"总的来说，这节课提供了一种全面的方法来组织和管理 SVG 图形，使其更易于维护和重用。通过深入了解每种元素的用法和特性，我们可以更好地利用 SVG 技术，为网页和应用程序添加丰富的矢量图形效果。"})]})}function q(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(W,{...e})}):W(e)}let O=q;q.__RSPRESS_PAGE_META={},q.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F10-%E5%88%9D%E7%BA%A7%E7%AF%87%EF%BC%9A%E7%BB%84%E7%BB%87%20SVG.md"]={toc:[{text:"SVG 结构元素的简介",id:"svg-结构元素的简介",depth:2},{text:"使用 `<g>` 元素进行分组",id:"使用-g-元素进行分组",depth:2},{text:"使用 `<use>` 元素重复使用相同的形状",id:"使用-use-元素重复使用相同的形状",depth:2},{text:"使用 `<defs>` 元素存储可重用元素",id:"使用-defs-元素存储可重用元素",depth:2},{text:"使用 `<symbol>` 元素进行分组",id:"使用-symbol-元素进行分组",depth:2},{text:"使用 CSS 样式化 SVG `<use>` 元素内容",id:"使用-css-样式化-svg-use-元素内容",depth:2},{text:"案例：会动的魔方",id:"案例会动的魔方",depth:2},{text:"小结",id:"小结",depth:2}],title:"10-初级篇：组织 SVG",headingTitle:"10-初级篇：组织 SVG",frontmatter:{}}}}]);