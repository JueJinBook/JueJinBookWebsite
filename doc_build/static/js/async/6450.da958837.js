"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["6450"],{548444:function(n,e,r){r.r(e),r.d(e,{default:()=>l});var t=r(552676),s=r(740453);let i=r.p+"static/image/6142e7490032b0cca2529704a962a80a.38b4693d.png",a=r.p+"static/image/0fe51416327c03cdb46805ae9eaecd8d.1ca095d6.png";function o(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ul:"ul",li:"li",code:"code",blockquote:"blockquote",img:"img",pre:"pre"},(0,s.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"48原理进阶浏览器的线程和任务",children:["48.原理进阶：浏览器的线程和任务",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#48原理进阶浏览器的线程和任务",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["在",(0,t.jsx)(e.strong,{children:"方案了解：iframe 方案"}),"中讲解了 Chrome 浏览器的多进程架构，重点讲解了进程的概念，包括 Browser 进程、Renderer 进程和工具进程（网络服务）等。本课程主要讲解浏览器中的线程（Thread）和任务（Task）的概念。在浏览器中，每一个进程内部有多个线程，而每一个线程内部有多个任务："]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"https://chromium.googlesource.com/chromium/src.git/+/HEAD/docs/threading_and_tasks.md#threads",target:"_blank",rel:"noopener noreferrer",children:"线程"})}),"：每一个进程都有一个主线程，例如 Browser 进程里的 Browser Thread:: UI 主线程和 Renderer 进程里的 Blink main thread 主线程。除此之外，Browser 进程和 Renderer 进程各自还存在一个 IO 线程，主要用于处理进程间通信。为了保持 Browser Thread:: UI 主线程的低延迟（快速响应）工作能力，一些昂贵的 I/O 异步操作还可以通过其他工作线程或者线程池里来完成，更多信息可以查看 ",(0,t.jsx)(e.a,{href:"https://chromium.googlesource.com/chromium/src.git/+/HEAD/docs/threading_and_tasks.md#keeping-the-browser-responsive",target:"_blank",rel:"noopener noreferrer",children:"keep-the-browser-responsive"}),"。"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"https://chromium.googlesource.com/chromium/src.git/+/HEAD/docs/threading_and_tasks.md#tasks",target:"_blank",rel:"noopener noreferrer",children:"任务"})}),"：大部分线程都有执行任务队列的 ",(0,t.jsx)(e.a,{href:"https://docs.google.com/document/d/1_pJUHO3f3VyRSQjEhKVvUU7NzCyuTCQshZvbWeQiCXU/edit#heading=h.okllz7fdmm0",target:"_blank",rel:"noopener noreferrer",children:"MessageLoop"}),"，在线程里可以通过轮询消息来接收需要处理的任务，然后放入任务队列进行任务执行。除此之外，主线程可以通过 ",(0,t.jsx)(e.code,{children:"postTask"})," 方法像其他线程或者线程池发送处理任务的消息。"]}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["温馨提示：如果不了解进程和线程的区别，可以查看阮一峰的",(0,t.jsx)(e.a,{href:"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html",target:"_blank",rel:"noopener noreferrer",children:"进程和线程的一个简单解释"}),"。关于 Chrome 线程和任务的详细信息可以查看 ",(0,t.jsx)(e.a,{href:"https://chromium.googlesource.com/chromium/src.git/+/HEAD/docs/threading_and_tasks.md",target:"_blank",rel:"noopener noreferrer",children:"Threading and Tasks in Chrome"}),"。多进程架构是为了保持浏览器标签页的稳定性，而多线程架构为了保持主线程的快速响应能力，例如 Browser Thread:: UI 主线程。"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["在沙箱和站点隔离中重点了解了 Chrome 标签页与 Renderer 进程之间可能存在 1: N 的关系，并且 Renderer 进程会将三方不受信代码运行在特定的沙箱环境内。在 Chrome 中， Renderer 进程主要运行 ",(0,t.jsx)(e.a,{href:"https://www.chromium.org/blink/",target:"_blank",rel:"noopener noreferrer",children:"Blink"})," 渲染引擎，该引擎主要负责标签页应用的渲染工作，包含 HTML / CSS 解析、JavaScript 解释执行、DOM 树构建、计算样式和布局等。Blink 渲染引擎所在的进程主要包含一个 Main 线程、多个 Worker 线程以及其他一些内部工作线程，具体如下所示："]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["温馨提示：图片来源于 ",(0,t.jsx)(e.a,{href:"https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit#",target:"_blank",rel:"noopener noreferrer",children:"How Blink works"}),"。"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"主线程主要负责 JavaScript 解释执行、 DOM 解析、DOM 树创建以及样式的计算和布局（HTML / CSS / JavaScript）等。在 Web 页面中的 JavaScript 是在主线程里运行，并且和页面视图渲染占用同一个主线程（需要注意 Worker 里的 JavaScript 是额外的工作线程）。在 Renderer 进程的线程中，每一个工作都是以任务的方式进行，并且可以简单理解为使用轮询来执行这些任务（和 Event Loop 息息相关），通过 Chrome DevTools 的 Performance 可以查看这些任务："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"温馨提示：为什么页面中的 JavaScript 不采用多线程的方式进行工作呢？因为多线程模式下操作同一个 DOM 会产生并行冲突问题，例如一个线程的 JavaScript 想要删除 DOM，而另外一个线程在同一时刻想要在该 DOM 下添加子元素。"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"在 Chrome 的线程中大概有以下一些任务："}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Parse HTML"}),"\n",(0,t.jsx)(e.li,{children:"Parse Stylesheet"}),"\n",(0,t.jsx)(e.li,{children:"Evaluate JavaScript / Compile Script"}),"\n",(0,t.jsx)(e.li,{children:"Compile Code"}),"\n",(0,t.jsx)(e.li,{children:"Timer Fired"}),"\n",(0,t.jsx)(e.li,{children:"Event: mouseover（DOM 事件）"}),"\n",(0,t.jsx)(e.li,{children:"Event: load / DOMContentLoaded"}),"\n",(0,t.jsx)(e.li,{children:"clearTimeout / setTimeout"}),"\n",(0,t.jsx)(e.li,{children:"Layout"}),"\n",(0,t.jsx)(e.li,{children:"Recalculate Style"}),"\n",(0,t.jsx)(e.li,{children:"Paint / Pre-Paint"}),"\n",(0,t.jsx)(e.li,{children:"Composite Layers"}),"\n",(0,t.jsx)(e.li,{children:"Run Microtasks"}),"\n",(0,t.jsx)(e.li,{children:"Animation Frame Fired"}),"\n",(0,t.jsx)(e.li,{children:"Function Call"}),"\n",(0,t.jsx)(e.li,{children:"Minor GC"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"这些任务中既有异步执行的 JavaScript Task（宏任务），也有浏览器 Blink 渲染引擎自身需要处理的渲染解析任务，除此之外，还会运行一些 Microtasks。通过右键 Save profile 可以导出 JSON 格式查看更详细的任务信息（这里列举几个相对比较重要的任务）："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:'[\n  {\n    "args": {},\n    "cat": "v8",\n    "dur": 2321,\n    // 任务名称\n    "name": "V8.DeserializeContext",\n    "ph": "X",\n    // 任务所在的进程\n    "pid": 1968,\n    "tdur": 1842,\n    // 任务所在的线程\n    "tid": 259,\n    "ts": 11927918423,\n    "tts": 201565\n  },\n  {\n    "args": {},\n    "cat": "disabled-by-default-v8.compile",\n    "dur": 3399,\n    "name": "V8.CompileCode",\n    "ph": "X",\n    "pid": 1968,\n    "tdur": 1111,\n    "tid": 259,\n    "ts": 11927921078,\n    "tts": 203731\n  },\n  {\n    "args": {},\n    "cat": "disabled-by-default-v8.compile",\n    "dur": 638,\n    "name": "V8.Compile",\n    "ph": "X",\n    "pid": 1968,\n    "tdur": 444,\n    "tid": 259,\n    "ts": 11927923821,\n    "tts": 204379\n  },\n  {\n    "args": {},\n    "cat": "disabled-by-default-v8.compile",\n    "dur": 63,\n    "name": "V8.CompileIgnition",\n    "ph": "X",\n    "pid": 1968,\n    "tdur": 63,\n    "tid": 259,\n    "ts": 11927923882,\n    "tts": 204439\n  },\n  {\n    "args": {},\n    "cat": "disabled-by-default-v8.compile",\n    "dur": 26,\n    "name": "V8.CompileIgnitionFinalization",\n    "ph": "X",\n    "pid": 1968,\n    "tdur": 28,\n    "tid": 259,\n    "ts": 11927923955,\n    "tts": 204511\n  },\n  {\n    "args": {\n      "beginData": {\n        "frame": "0A4064F236CA7AC5A862947FECE4023C",\n        "startLine": 0,\n        "url": "https://www.yuque.com/zhuxiankang/rqhn79/fy4iv1/edit"\n      },\n      "endData": {\n        "endLine": 38\n      }\n    },\n    "cat": "devtools.timeline",\n    "dur": 3874,\n    "name": "ParseHTML",\n    "ph": "X",\n    "pid": 1968,\n    "tdur": 2149,\n    "tid": 259,\n    "ts": 11928161960,\n    "tts": 239835\n  },\n  {\n    "args": {\n      "data": {\n        "clip": [0, 0, 2560, 0, 2560, 1304, 0, 1304],\n        "frame": "0A4064F236CA7AC5A862947FECE4023C",\n        "layerId": 4\n      }\n    },\n    "cat": "devtools.timeline,rail",\n    "name": "Paint",\n    "ph": "I",\n    "pid": 1968,\n    "s": "t",\n    "tid": 259,\n    "ts": 11931212536,\n    "tts": 1867395\n  },\n  {\n    "args": {\n      "data": {\n        "styleSheetUrl": "https://gw.alipayobjects.com/os/chair-script/skylark/p__editor__routers__doc.226daef7.chunk.css"\n      }\n    },\n    "cat": "blink,devtools.timeline",\n    "dur": 12167,\n    "name": "ParseAuthorStyleSheet",\n    "ph": "X",\n    "pid": 1968,\n    "tdur": 9859,\n    "tid": 259,\n    "ts": 11931111043,\n    "tts": 1833412\n  },\n  {\n    "args": {\n      "beginData": {\n        "dirtyObjects": 142,\n        "frame": "0A4064F236CA7AC5A862947FECE4023C",\n        "partialLayout": false,\n        "stackTrace": [\n          {\n            "columnNumber": 2902366,\n            "functionName": "cS",\n            "lineNumber": 2,\n            "scriptId": "33",\n            "url": "https://gw.alipayobjects.com/os/chair-script/skylark/c__CustomIndexPage~c__Lakex.0c810339.async.js"\n          }\n        ],\n        "totalObjects": 2324\n      },\n      "endData": {\n        "layoutRoots": [\n          {\n            "depth": 1,\n            "nodeId": 1,\n            "quads": [[0, 0, 2560, 0, 2560, 1304, 0, 1304]]\n          }\n        ]\n      }\n    },\n    "cat": "devtools.timeline",\n    "dur": 54056,\n    "name": "Layout",\n    "ph": "X",\n    "pid": 1968,\n    "tdur": 42386,\n    "tid": 259,\n    "ts": 11940577783,\n    "tts": 6105165\n  }\n]\n'})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"温馨提示：以语雀页面为例做渲染测试，会发现页面渲染的过程大概有二十万个任务需要执行，当然这里的任务包含浏览器的所有进程的任务。"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["从导出的任务信息可以发现，UI 渲染（ParseHTML、Paint、Layout）和 ",(0,t.jsx)(e.a,{href:"https://v8.dev/",target:"_blank",rel:"noopener noreferrer",children:"V8"})," 中的 JavaScript 编译执行占据同一个进程（pid）中的同一个线程（tid），两者在同一时刻只能有一个任务执行。"]})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(o,{...n})}):o(n)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F48.%E5%8E%9F%E7%90%86%E8%BF%9B%E9%98%B6%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%92%8C%E4%BB%BB%E5%8A%A1.md"]={toc:[],title:"48.原理进阶：浏览器的线程和任务",headingTitle:"48.原理进阶：浏览器的线程和任务",frontmatter:{}}}}]);