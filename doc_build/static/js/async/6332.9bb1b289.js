"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["6332"],{514856:function(n,e,r){r.r(e),r.d(e,{default:()=>j});var o=r(552676),c=r(740453);let s=r.p+"static/image/3b561cb86baa8e56c3497d20b6db31ac.a986a244.png",t=r.p+"static/image/17eace24fee0652b34d4d22fb8b49dc8.5fbaa417.png",i=r.p+"static/image/2f59884567e57bb2bfa713d8cf3f9c43.3c09bef5.png",a=r.p+"static/image/46dd4bb912304232d51cfb890be3f81c.1f81efaa.png",p=r.p+"static/image/59648dd127484686156d8c1f46ccfcc6.b43d7a98.png",l=r.p+"static/image/2bd73bf41ff3ecbff09fddb151018dc1.9f1271d1.png",d=r.p+"static/image/247f8f7359036fe6a8e84b64bc1b8240.b2ec1e7b.png",_=r.p+"static/image/35b03233447014154b2753a92ff55602.0b4d6205.png",u=r.p+"static/image/c241564175b5754a46a7e901afcfbb27.5fffc12a.png",h=r.p+"static/image/354f7094909badc892cdd6885bf034e3.def87b69.png",x=r.p+"static/image/9ae3f3249303fc4ac46018ef77b6b693.cb005883.png";function b(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",blockquote:"blockquote",h3:"h3",img:"img",ul:"ul",li:"li",strong:"strong"},(0,c.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"21框架解析single-spa-的-fetch-示例",children:["21.框架解析：single-spa 的 Fetch 示例",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#21框架解析single-spa-的-fetch-示例",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["在上一个课程中，我们讲解了 single-spa 的动态 Script 方案，并设计了通用 SDK ",(0,o.jsx)(e.code,{children:"single-spa-lifecycle"})," 的微应用生命周期函数获取方案，这种获取方案存在一定的耦合性，因为主应用需要感知和维护微应用的应用标识。在本课程中，我们会讲解 single-spa 的 Fetch 请求方案，并设计一个更加解耦的微应用生命周期函数获取方案。为了设计这种通用的方案，我们需要对微应用进行额外的 Webpack 配置，因此需要额外了解 Webpack 的部分运行时原理。"]}),"\n",(0,o.jsxs)(e.h2,{id:"为什么需要了解-webpack-运行时原理",children:["为什么需要了解 Webpack 运行时原理",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么需要了解-webpack-运行时原理",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["在 qiankun 官方文档",(0,o.jsx)(e.a,{href:"https://qiankun.umijs.org/zh/guide/getting-started#2-%E9%85%8D%E7%BD%AE%E5%BE%AE%E5%BA%94%E7%94%A8%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7",target:"_blank",rel:"noopener noreferrer",children:"配置微应用的打包工具"}),"中为了让主应用能识别微应用暴露出来的生命周期函数，需要微应用的 Webpack 增加如下配置："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// webpack 5.x\nconst packageName = require('./package.json').name;\n\nmodule.exports = {\n  output: {\n    // library 和 libraryTarget 用于暴露微应用的生命周期函数\n    library: `${packageName}-[name]`,\n    libraryTarget: 'umd',\n    // chunkLoadingGlobal 用于代码分离\n    chunkLoadingGlobal: `webpackJsonp_${packageName}`,\n  },\n};\n\n// webpack 4.x\nconst packageName = require('./package.json').name;\n\n\nmodule.exports = {\n  output: {\n    library: `${packageName}-[name]`,\n    libraryTarget: 'umd',\n    jsonpFunction: `webpackJsonp_${packageName}`,\n  },\n};\n"})}),"\n",(0,o.jsxs)(e.p,{children:["在上述 Webpack 配置中，",(0,o.jsx)(e.code,{children:"output.library"})," 和 ",(0,o.jsx)(e.code,{children:"output.libraryTarget"})," 用于暴露微应用的生命周期函数，因此可以使得主应用配合 qiankun 框架实现彻底解耦的微应用生命周期函数获取方案。为此，我们需要先了解上述 Webpack 配置的运行时原理，从而帮助我们分析和设计一个基于通用生命周期函数获取方式的 Fetch 微前端方案。"]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：在下一个课程中我们会重点讲解 ",(0,o.jsx)(e.code,{children:"output.chunkLoadingGlobal"})," 配置的运行原理，从而使大家深入了解",(0,o.jsx)(e.a,{href:"https://webpack.docschina.org/guides/code-splitting/",target:"_blank",rel:"noopener noreferrer",children:"代码分离"}),"的微前端设计方案。"]}),"\n"]}),"\n",(0,o.jsxs)(e.h2,{id:"webpack-运行时-library-配置分析",children:["Webpack 运行时 ",(0,o.jsx)(e.code,{children:"library"})," 配置分析",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-运行时-library-配置分析",children:"#"})]}),"\n",(0,o.jsxs)(e.h3,{id:"library-配置示例",children:[(0,o.jsx)(e.code,{children:"library"})," 配置示例",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#library-配置示例",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["我们首先需要分析 ",(0,o.jsx)(e.code,{children:"output.library"}),"\xa0配置生成的产物，示例代码的目录结构如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:".\n├── dist                # 构建目录\n│   └── main.js\n├── src                 # 源文件目录\n│   └── index.js\n├── index.html          # 网页代码，用于运行构建代码进行测试\n├── package.json        # 项目描述文件\n└── webpack.config.js   # webpack 配置文件\n"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：示例源码可以从 webpack-runtime-analyze 的\xa0",(0,o.jsx)(e.a,{href:"https://github.com/ziyi2/webpack-runtime-analyze/tree/demo/library",target:"_blank",rel:"noopener noreferrer",children:"demo/library"}),"\xa0分支获取。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["为了可以在全局\xa0",(0,o.jsx)(e.code,{children:"window"}),"\xa0对象上暴露属性\xa0",(0,o.jsx)(e.code,{children:"window.myLibrary"}),"，需要在\xa0Webpack\xa0中使用\xa0",(0,o.jsx)(e.a,{href:"https://webpack.docschina.org/configuration/output/#outputlibrary",target:"_blank",rel:"noopener noreferrer",children:"output.library"})," 配置，如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// webpack.config.js\nmodule.exports = {\n  output: {\n    // 导出的变量将会挂载在 window.myLibrary 上\n    library: 'myLibrary',\n  }\n};\n"})}),"\n",(0,o.jsxs)(e.p,{children:["假设在 ",(0,o.jsx)(e.code,{children:"src/index.js"})," 源码中导出了\xa0single-spa\xa0需要的生命周期函数："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// src/index.js\n// 注意 single-spa 中需要加载 async 函数\nexport async function bootstrap() {\n  console.log("bootstrap");\n}\n\nexport async function mount() {\n  console.log("mount");\n}\n\nexport async function unmount() {\n  console.log("unmount");\n}\n\nexport async function update() {\n  console.log("update");\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"为了方便分析 Webpack 的运行时代码，这里采用开发态进行构建："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'// package.json\n"scripts": {\n  // 开发态构建\n  "start": "webpack --mode=development",\n},\n'})}),"\n",(0,o.jsxs)(e.p,{children:["执行构建命令\xa0",(0,o.jsx)(e.code,{children:"npm\xa0run\xa0start"})," 后会在\xa0",(0,o.jsx)(e.code,{children:"dist/main.js"})," 中生成构建代码，将其加入\xa0",(0,o.jsx)(e.code,{children:"index.html"}),"："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",children:'\x3c!-- index.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Document</title>\n  </head>\n  <body>\n    \x3c!-- 加载 Webpack 构建后的代码 --\x3e\n    <script src="./dist/main.js"><\/script>\n    <script>\n      // 用于验证是否在 window 上暴露了 myLibrary 库属性\n      console.log(window.myLibrary);\n      // 模拟 single-spa 执行 myLibrary 上的生命周期函数\n      window.myLibrary.bootstrap();\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,o.jsxs)(e.p,{children:["在浏览器中打开 ",(0,o.jsx)(e.code,{children:"index.html"})," 查看打印信息，可以发现在\xa0",(0,o.jsx)(e.code,{children:"window.myLibrary"}),"\xa0上可以获取 ",(0,o.jsx)(e.code,{children:"src/index.js"})," 导出的生命周期函数："]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,o.jsxs)(e.h3,{id:"library-配置运行时分析",children:[(0,o.jsx)(e.code,{children:"library"})," 配置运行时分析",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#library-配置运行时分析",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["我们重点来分析一下 ",(0,o.jsx)(e.code,{children:"dist/main.js"}),"\xa0构建代码，如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// 根据 output.library 配置的库名称\n// 定义全局库属性 window.myLibrary\nvar myLibrary;\n\n// 自执行匿名函数，包含了 Webpack 的运行时代码和开发者的源代码模块\n(() => {\n  // webpackBootstrap\n  "use strict";\n\n  // 定义模块化映射对象 \n  // __webpack_modules__  = {"模块路径": "模块化包装函数" }}\n  var __webpack_modules__ = {\n    // "./src/index.js" 属性的值是一个箭头函数\n    // 该箭头函数在本课程中被称为模块化包装函数\n    "./src/index.js": (\n      __unused_webpack_module,\n      __webpack_exports__,\n      __webpack_require__\n    ) => {\n      // 使用 eval 执行 src/index.js 对应的源代码包装模块\n      eval(\n        \'__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   bootstrap: () => (/* binding */ bootstrap),\\n/* harmony export */   mount: () => (/* binding */ mount),\\n/* harmony export */   unmount: () => (/* binding */ unmount),\\n/* harmony export */   update: () => (/* binding */ update)\\n/* harmony export */ });\\nasync function bootstrap() {\\n  console.log("bootstrap");\\n}\\n\\nasync function mount() {\\n  console.log("mount");\\n}\\n\\nasync function unmount() {\\n  console.log("unmount");\\n}\\n\\nasync function update() {\\n  console.log("update");\\n}\\n\\n//# sourceURL=webpack://myLibrary/./src/index.js?\'\n      );\n    },\n  };\n\n  // The require scope\n  // 定义一个 Webpack 运行时对象\n  // 该对象定义的方法会在 src/index.js 对应的模块化包装函数中使用\n  var __webpack_require__ = {};\n\n  /* webpack/runtime/define property getters */\n  (() => {\n    // define getter functions for harmony exports\n    // 函数名称\n    // __webpack_require__.d\n\n    // 函数作用\n    // 用于定义 harmony 模块（ES2015 模块）的 exports 导出对象\n    // 将源文件模块导出的对象赋值给模块化导出对象 __webpack_exports__\n    \n    // 参数说明\n    // exports： 模块化导出对象 __webpack_exports__\n    // definition： 源文件中的导出对象（例如 src/index.js 中导出的生命周期函数）\n\n    // 举个例子\n    // 如果在 src/index.js 中导出了 bootstrap、mount、unmount、update 四个函数\n    // 那么 definition 对象就是 { bootstrap, mount, unmount, update }\n    __webpack_require__.d = (exports, definition) => {\n      // 遍历源文件中导出对象的属性\n      for (var key in definition) {\n        if (\n          // 检查 definition 对象是否有 key 属性\n          __webpack_require__.o(definition, key) &&\n          // 检查 exports 对象是否有 key 属性\n          !__webpack_require__.o(exports, key)\n        ) {\n          // 为 exports 对象定义 key 属性，属性值为 definition 对象的 key 属性值\n          // 即将 src/index.js 中导出的 bootstrap 等函数添加到 __webpack_exports__ 对象中\n          Object.defineProperty(exports, key, {\n            // enumerable: true 表示该属性可以被枚举\n            enumerable: true,\n            // 设置 getter 函数，该函数返回 definition 对象的 key 属性值\n            get: definition[key],\n          });\n        }\n      }\n    };\n  })();\n\n  /* webpack/runtime/hasOwnProperty shorthand */\n  (() => {\n    // 函数名称\n    // __webpack_require__.o\n\n    // 函数作用\n    // 用于检查一个对象是否有某个自身属性（即不包括继承的属性）\n    \n    // 参数说明\n    // obj： 需要被检查的对象\n    // prop： 需要被检查的属性\n    __webpack_require__.o = (obj, prop) =>\n      // 用于检查一个对象是否有某个自身属性（即不包括继承的属性）\n      Object.prototype.hasOwnProperty.call(obj, prop);\n  })();\n\n  /* webpack/runtime/make namespace object */\n  (() => {\n    // define __esModule on exports\n\n    // 函数名称\n    // __webpack_require__.r\n\n    // 函数作用\n    // 该函数用于定义 ES6 模块的标准行为\n    // 即为模块化导出对象 __webpack_exports__ 定义 __esModule 属性值等\n    // 可用于识别 __webpack_exports__ 的模块性质\n\n    // 参数说明\n    // exports： 模块化导出对象 __webpack_exports__\n    __webpack_require__.r = (exports) => {\n      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {\n        // 为 exports 对象定义属性 Symbol.toStringTag，值为 "Module"\n        \n        // Symbol.toStringTag\n        // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\n\n        // ES6 模块的标准行为\n        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });\n        // console.log(Object.prototype.toString.call(exports)); // [object Module]\n      }\n      // exports.__esModule = true\n      // 这是一个约定，用于标记这个模块是一个 ES 模块。\n      // 其他模块在导入该模块时可以知道它是一个 ES 模块，从而使用正确的导入语法\n      Object.defineProperty(exports, "__esModule", { value: true });\n\n      // 为什么使用 Object.defineProperty 而不是直接 exports.__esModule = true 呢？\n      // 因为 Object.defineProperty 有一个特性 configurable\n      // 当 configurable 为 false 时，该属性不可被删除，也不可被修改\n      // 这样可以防止其他模块修改 __esModule 的值，从而保证了 __esModule 的值为 true\n      \n      // Object.defineProperty 被用于在 exports 对象上定义 __esModule 属性，\n      // 这个属性是不可枚举的，这意味着它不会出现在 for-in 循环或 Object.keys 方法中。\n      \n      // 这个属性也是不可写的，这意味着你不能改变它的值。\n      // 这些特性都是通过 Object.defineProperty 方法来实现的\n      // { configurable: false, enumerable: false, value: true, writable: false }\n      console.log(Object.getOwnPropertyDescriptor(exports, "__esModule")); \n    };\n  })();\n\n  // startup\n  // Load entry module and return exports\n  // This entry module can\'t be inlined because the eval devtool is used.\n\n  // 定义 __webpack_exports__ 导出对象\n  // 由于这里只有一个 src/index.js 模块，因此只需要一个导出对象\n  var __webpack_exports__ = {};\n\n\n  // 获取模块化映射对象中映射路径对应的模块化包装函数（箭头函数）\n  // 传入 __webpack_exports__ 模块化导出对象、__webpack_require__ 模块化运行时对象\n  // 执行模块化包装函数\n  // 内部会将 src/index.js 的生命周期函数通过 __webpack_require__.d 赋值给 __webpack_exports__\n  __webpack_modules__["./src/index.js"](\n    0,\n    __webpack_exports__,\n    __webpack_require__\n  );\n\n  // 此时将 __webpack_exports__ 赋值给 myLibrary\n  // 因此可以通过 myLibrary 执行 src/index.js 导出的生命周期函数\n  // 例如执行 window.myLibrary.bootstrap\n  myLibrary = __webpack_exports__;\n})();\n'})}),"\n",(0,o.jsx)(e.p,{children:"为了使得大家在学习时达成共识，这里使用固定术语来描述\xa0Webpack\xa0的运行时对象："}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"__webpack_modules__"}),"：模块化映射对象（建立模块路径和模块包装函数的映射关系）"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"__webpack_require__"}),"：模块化运行时对象（在模块化包装函数中使用）"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"__webpack_exports__"}),"：模块导出对象"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["除此之外，本课程将\xa0",(0,o.jsx)(e.code,{children:"__webpack_modules__"})," 中模块路径映射的箭头函数称为",(0,o.jsx)(e.strong,{children:"模块化包装函数"}),"，例如\xa0",(0,o.jsx)(e.code,{children:"./src/index.js"}),"\xa0模块路径对应的模块化包装函数如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// var __webpack_modules__ = {"./src/index.js": "模块化包装函数" };\n\n// 其中模块化包装函数如下所示，是一个箭头函数\n// 传入 module、__webpack_exports__ 以及 __webpack_require__ 参数\n// 由于只有一个模块，因此 Webpack 没有开辟 module 对象（__unused_webpack_module = 0）\n(__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n  // 为了方便调试，使用 eval 执行源代码模块\n  eval(\n    \'__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   bootstrap: () => (/* binding */ bootstrap),\\n/* harmony export */   mount: () => (/* binding */ mount),\\n/* harmony export */   unmount: () => (/* binding */ unmount),\\n/* harmony export */   update: () => (/* binding */ update)\\n/* harmony export */ });\\nasync function bootstrap() {\\n  console.log("bootstrap");\\n}\\n\\nasync function mount() {\\n  console.log("mount");\\n}\\n\\nasync function unmount() {\\n  console.log("unmount");\\n}\\n\\nasync function update() {\\n  console.log("update");\\n}\\n\\n//# sourceURL=webpack://myLibrary/./src/index.js?\'\n  );\n};\n'})}),"\n",(0,o.jsxs)(e.p,{children:["上述\xa0",(0,o.jsx)(e.code,{children:"eval"})," 代码在\xa0",(0,o.jsx)(e.code,{children:"src/index.js"})," 源码的基础上进行了模块化包装，传入了模块导出对象\xa0",(0,o.jsx)(e.code,{children:"__webpack_exports__"}),"，主要利用模块化运行时对象\xa0",(0,o.jsx)(e.code,{children:"__webpack_require__"}),"\xa0处理："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:' // eval 代码等同于以下代码\n\n// 定义 ES 模块的标准行为：为 __webpack_exports__ 模块化导出对象设置 esModule 属性为 true\n// 可以通过标准行为识别 __webpack_exports__ 为 ES 模块，例如：\n// __webpack_exports__.__esModule = true\n// Object.prototype.toString.call(__webpack_exports__) = \'[object Module]\'\n__webpack_require__.r(__webpack_exports__);\n\n// 为 __webpack_exports__ 对象定义源码中的 ES 模块导出值\n// 内部使用了 Object.defineProperty 进行属性劫持处理\n// 通过 __webpack_exports__.bootstrap 可以访问到 bootstrap 函数\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n  /* harmony export */ bootstrap: () => /* binding */ bootstrap,\n  /* harmony export */ mount: () => /* binding */ mount,\n  /* harmony export */ unmount: () => /* binding */ unmount,\n  /* harmony export */ update: () => /* binding */ update,\n  /* harmony export */\n});\nasync function bootstrap() {\n  console.log("bootstrap");\n}\n\nasync function mount() {\n  console.log("mount");\n}\n\nasync function unmount() {\n  console.log("unmount");\n}\n\nasync function update() {\n  console.log("update");\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["我们重新来分析一下\xa0Webpack\xa0的主运行时代码\xa0",(0,o.jsx)(e.code,{children:"dist/main.js"})," 和模块化包装函数中的 ",(0,o.jsx)(e.code,{children:"eval"})," 代码，简化后的代码如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'var myLibrary;\n\n(() => {\n  // 模块化映射对象\n  var __webpack_modules__ = {\n    "./src/index.js": (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n      // 为 __webpack_exports__ 模块化导出对象定义 ES 标准行为\n      // 例如：__webpack_exports__.__esModule = true\n      __webpack_require__.r(__webpack_exports__);\n      // 将 src/index.js 导出的生命周期函数赋值给 __webpack_exports__ 模块化导出对象\n      // 例如：__webpack_exports__.bootstrap = bootstrap\n      __webpack_require__.d(__webpack_exports__, {\n        bootstrap: () => /* binding */ bootstrap,\n      });\n      async function bootstrap() {\n        console.log("bootstrap");\n      }\n      // ...\n    },\n  };\n\n  // 模块化运行时对象\n  var __webpack_require__ = {};\n  (() => {\n    __webpack_require__.d = function () {};\n  })()\n  \n  (() => {\n    __webpack_require__.o = function () {};\n  })()\n  \n  (() => {\n    __webpack_require__.r = function () {};\n  })();\n\n  // 模块导出对象\n  var __webpack_exports__ = {};\n\n  // 执行模块化代码，将模块内部的导出对象挂载到 __webpack_exports__ 上\n  __webpack_modules__["./src/index.js"](\n    0,\n    __webpack_exports__,\n    __webpack_require__\n  );\n\n  // 将 __webpack_exports__ 挂载到 myLibrary 上\n  myLibrary = __webpack_exports__;\n})();\n'})}),"\n",(0,o.jsx)(e.p,{children:"整体的执行流程如下所示："}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["定义全局库属性\xa0",(0,o.jsx)(e.code,{children:"window.myLibrary"})]}),"\n",(0,o.jsxs)(e.li,{children:["定义模块化映射对象\xa0",(0,o.jsx)(e.code,{children:"__webpack_modules__"}),"(内部包含\xa0",(0,o.jsx)(e.code,{children:"src/index.js"}),"\xa0模块化包装代码)"]}),"\n",(0,o.jsxs)(e.li,{children:["定义模块化运行时对象\xa0",(0,o.jsx)(e.code,{children:"__webpack_require__"})," 以及\xa0",(0,o.jsx)(e.code,{children:"d"}),"、",(0,o.jsx)(e.code,{children:"o"}),"\xa0和\xa0",(0,o.jsx)(e.code,{children:"r"})," 等方法"]}),"\n",(0,o.jsxs)(e.li,{children:["定义模块化导出对象\xa0",(0,o.jsx)(e.code,{children:"__webpack_exports__"})]}),"\n",(0,o.jsxs)(e.li,{children:["根据\xa0",(0,o.jsx)(e.code,{children:"__webpack_modules__"}),"\xa0执行\xa0",(0,o.jsx)(e.code,{children:"src/index.js"})," 对应的模块化包装函数（ ",(0,o.jsx)(e.code,{children:"eval"})," 代码）","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["执行\xa0",(0,o.jsx)(e.code,{children:"__webpack_require__.r"})," 定义\xa0",(0,o.jsx)(e.code,{children:"__webpack_exports__"}),"\xa0的\xa0ES\xa0模块标准行为"]}),"\n",(0,o.jsxs)(e.li,{children:["执行\xa0",(0,o.jsx)(e.code,{children:"__webpack_require__.d"})," 将当前模块的导出值赋值给\xa0",(0,o.jsx)(e.code,{children:"__webpack_exports__"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["将模块化导出对象\xa0",(0,o.jsx)(e.code,{children:"__webpack_exports__"})," 赋值给\xa0",(0,o.jsx)(e.code,{children:"window.myLibrary"})]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"上述构建代码的运行时流程如下所示："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:h,alt:"Webpack 运行时分析-流程图.jpg"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：如果图片不清晰，可以点击放大查看或者在浏览器中右键并选择",(0,o.jsx)(e.strong,{children:"在新标签页中打开图片"}),"查看。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["我们重新来回顾一下 ",(0,o.jsx)(e.code,{children:"index.html"}),"\xa0的使用，通过执行\xa0",(0,o.jsx)(e.code,{children:"dist/main.js"})," 可以实现将\xa0",(0,o.jsx)(e.code,{children:"src/index.js"})," 导出的生命周期函数赋值给\xa0",(0,o.jsx)(e.code,{children:"window.myLibrary"}),"，从而可以通过\xa0",(0,o.jsx)(e.code,{children:"window.myLibrary.bootstrap()"})," 执行，如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",children:'\x3c!-- index.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Document</title>\n  </head>\n  <body>\n    \x3c!-- 加载 Webpack 构建后的代码 --\x3e\n    <script src="./dist/main.js"><\/script>\n    <script>\n      // 用于验证是否在 window 上暴露了 myLibrary 库属性\n      console.log(window.myLibrary);\n      // 模拟 single-spa 执行 myLibrary 上的生命周期函数\n      window.myLibrary.bootstrap();\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,o.jsxs)(e.h3,{id:"devtool配置说明",children:["devtool\xa0配置说明",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#devtool配置说明",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["上述 ",(0,o.jsx)(e.code,{children:"src/index.js"})," 源码对应的构建代码在模块化包装函数对应的 ",(0,o.jsx)(e.code,{children:"eval"})," 中执行，可能很多同学比较疑惑为什么需要在\xa0",(0,o.jsx)(e.code,{children:"eval"})," 中执行？其实是为了加快\xa0Webpack\xa0的编译速度，并可以在\xa0Chrome\xa0DevTools\xa0调试面板中映射出源码对应的文件目录，从而方便开发者进行代码调试。我们来看下\xa0Chrome\xa0DevTools\xa0调试面板，可以发现\xa0",(0,o.jsx)(e.code,{children:"src/index.js"})," 被编译后的代码在调试面板的\xa0",(0,o.jsx)(e.code,{children:"myLibrary/src/index.js"})," 映射目录，如下所示："]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：Chrome\xa0DevTools\xa0会将 ",(0,o.jsx)(e.code,{children:"output.library"})," 的配置 ",(0,o.jsx)(e.code,{children:"myLibrary"})," 定义为调试映射目录的根目录。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["我们重新来回顾一下模块化包装函数\xa0",(0,o.jsx)(e.code,{children:"eval"})," 部分，如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'var __webpack_modules__ = {\n    "./src/index.js": (\n      __unused_webpack_module,\n      __webpack_exports__,\n      __webpack_require__\n    ) => {\n      // 使用 eval 执行代码模块\n      eval(\n        \'__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   bootstrap: () => (/* binding */ bootstrap),\\n/* harmony export */   mount: () => (/* binding */ mount),\\n/* harmony export */   unmount: () => (/* binding */ unmount),\\n/* harmony export */   update: () => (/* binding */ update)\\n/* harmony export */ });\\nasync function bootstrap() {\\n  console.log("bootstrap");\\n}\\n\\nasync function mount() {\\n  console.log("mount");\\n}\\n\\nasync function unmount() {\\n  console.log("unmount");\\n}\\n\\nasync function update() {\\n  console.log("update");\\n}\\n\\n//# sourceURL=webpack://myLibrary/./src/index.js?\'\n      );\n  }\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["默认情况下\xa0",(0,o.jsx)(e.code,{children:"eval"})," 中的代码都是字符串，难以进行调试，但是在\xa0Webpack\xa0构建代码的尾部增加了一个\xa0",(0,o.jsx)(e.code,{children:"//#\xa0sourceURL"}),"\xa0的注释后（查看上图中的蓝框部分），可以使得\xa0Chrome\xa0DevTools\xa0识别该注释并将\xa0",(0,o.jsx)(e.code,{children:"eval"})," 对应的字符串单独抽离成一个可调试的映射文件，如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bootstrap: () => (/* binding */ bootstrap),\n/* harmony export */   mount: () => (/* binding */ mount),\n/* harmony export */   unmount: () => (/* binding */ unmount),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\nasync function bootstrap() {\n  console.log("bootstrap");\n}\n\nasync function mount() {\n  console.log("mount");\n}\n\nasync function unmount() {\n  console.log("unmount");\n}\n\nasync function update() {\n  console.log("update");\n}\n\n// 以下注释是一个调试标准，可以被 Chrome DevTools 识别\n//# sourceURL=webpack://myLibrary/./src/index.js?\n'})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：",(0,o.jsx)(e.code,{children:"sourceURL"}),"\xa0主要为 ",(0,o.jsx)(e.code,{children:"eval"})," 函数或者 ",(0,o.jsx)(e.code,{children:"new\xa0Function"})," 构造器执行的字符串动态代码定义一个调试文件，从而可以在\xa0Chrome\xa0DevTools\xa0的\xa0Sources\xa0面板中展示该文件并用于断点调试，关于\xa0sourceURL\xa0详细介绍可以查看\xa0",(0,o.jsx)(e.a,{href:"https://developer.chrome.com/docs/devtools/javascript/source-maps?hl=zh-cn#sourceurl_and_displayname",target:"_blank",rel:"noopener noreferrer",children:"Name\xa0eval()\xa0calls\xa0with\xa0#sourceURL（中文版）"}),"。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["在这里我们可以修改上述\xa0",(0,o.jsx)(e.code,{children:"sourceURL"}),"\xa0对应的文件映射路径，并查看\xa0Chrome\xa0DevTools\xa0的路径变化，例如："]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:_,alt:"image.png"})}),"\n",(0,o.jsxs)(e.p,{children:["需要注意该注释遵循了 ",(0,o.jsx)(e.a,{href:"https://sourcemaps.info/spec.html",target:"_blank",rel:"noopener noreferrer",children:"Source\xa0Map\xa0Revision\xa03\xa0Proposal"}),"\xa0规范，从规范中我们可以发现除了使用\xa0",(0,o.jsx)(e.code,{children:"sourceURL"}),"\xa0进行注释之外，还可以使用\xa0",(0,o.jsx)(e.code,{children:"sourceMappingURL"}),"\xa0进行注释。上述\xa0",(0,o.jsx)(e.code,{children:"eval"})," 对应的调试代码没有完全和源码一致，为了使得\xa0Chrome\xa0DevTools\xa0的调试代码和源码一致，需要使用\xa0Webpack\xa0生成\xa0Source\xa0Map\xa0文件并借助\xa0",(0,o.jsx)(e.code,{children:"sourceMappingURL"})," 注释。"]}),"\n",(0,o.jsxs)(e.p,{children:["为了生成\xa0Source\xa0Map\xa0文件，需要在\xa0Webpack\xa0的配置文件中新增\xa0",(0,o.jsx)(e.a,{href:"https://webpack.docschina.org/configuration/devtool/",target:"_blank",rel:"noopener noreferrer",children:"devtool"})," 配置字段，例如："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'module.exports = {\n  output: {\n    library: "hello",\n  },\n  // devtool 包含多种配置类型，例如 eval、eval-cheap-source-map 等\n  // 在 development 模式下默认配置是 eval\n  // 不同的配置会影响 Webpack 构建 (build) 和重新构建 (rebuild) 的速度\n  devtool: "source-map",\n};\n'})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：Webpack\xa0中 ",(0,o.jsx)(e.a,{href:"https://webpack.docschina.org/configuration/devtool/",target:"_blank",rel:"noopener noreferrer",children:"devtool"})," 配置主要用于支持\xa0Chrome\xa0DevTools\xa0调试工具。在\xa0devlopment\xa0模式下，Webpack\xa0的\xa0",(0,o.jsx)(e.a,{href:"https://webpack.docschina.org/configuration/devtool/#devtool",target:"_blank",rel:"noopener noreferrer",children:"devtool"}),"\xa0配置默认为\xa0",(0,o.jsx)(e.code,{children:"eval"}),"，此时会在打包后的代码中包含\xa0",(0,o.jsx)(e.code,{children:"eval"}),"\xa0函数，使用\xa0",(0,o.jsx)(e.code,{children:"eval"}),"\xa0模式时\xa0Webpack\xa0\xa0的构建速度很快，因此推荐在开发环境下使用该调试模式。\xa0在\xa0production\xa0模式下，",(0,o.jsx)(e.code,{children:"devtool"}),"\xa0默认为\xa0",(0,o.jsx)(e.code,{children:"false"}),"，此时不会在打包后生成任何调试信息。当然，有些监控工具为了可以定位详细的错误信息，会要求开发者上传\xa0Souce\xa0Map\xa0文件，但是切忌将\xa0Source\xa0Map\xa0调试文件发布到线上环境。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["执行构建后会生成\xa0",(0,o.jsx)(e.code,{children:"dist/main.js.map"})," 文件，并会在\xa0",(0,o.jsx)(e.code,{children:"dist/main.js"})," 的底部生成\xa0",(0,o.jsx)(e.code,{children:"sourceMappingURL"}),"\xa0注释，该注释用于告诉浏览器当前执行的脚本文件关联的源映射（source\xa0map）文件的位置。源映射是一种数据格式，它提供了编译后的代码（比如经过压缩或者转译的代码）到源代码的映射信息。当\xa0JavaScript\xa0代码被浏览器执行时，如果存在 ",(0,o.jsx)(e.code,{children:"sourceMappingURL"})," 注释，Chrome\xa0DevTools\xa0将利用这一信息来还原构建前的源代码，从而帮助开发者进行源码调试，",(0,o.jsx)(e.code,{children:"dist/main.js"})," 构建代码如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'var myLibrary;\n/******/ (() => { // webpackBootstrap\n/******/ 	"use strict";\n/******/ 	// The require scope\n/******/ 	var __webpack_require__ = {};\n/******/ 	\n/************************************************************************/\n/******/ 	/* webpack/runtime/define property getters */\n/******/ 	(() => {\n/******/ 		// define getter functions for harmony exports\n/******/ 		__webpack_require__.d = (exports, definition) => {\n/******/ 			for(var key in definition) {\n/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ 				}\n/******/ 			}\n/******/ 		};\n/******/ 	})();\n/******/ 	\n/******/ 	/* webpack/runtime/hasOwnProperty shorthand */\n/******/ 	(() => {\n/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ 	})();\n/******/ 	\n/******/ 	/* webpack/runtime/make namespace object */\n/******/ 	(() => {\n/******/ 		// define __esModule on exports\n/******/ 		__webpack_require__.r = (exports) => {\n/******/ 			if(typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n/******/ 			}\n/******/ 			Object.defineProperty(exports, \'__esModule\', { value: true });\n/******/ 		};\n/******/ 	})();\n/******/ 	\n/************************************************************************/\nvar __webpack_exports__ = {};\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  **********************/\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bootstrap: () => (/* binding */ bootstrap),\n/* harmony export */   mount: () => (/* binding */ mount),\n/* harmony export */   unmount: () => (/* binding */ unmount),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\nasync function bootstrap() {\n  console.log("bootstrap");\n}\n\nasync function mount() {\n  console.log("mount");\n}\n\nasync function unmount() {\n  console.log("unmount");\n}\n\nasync function update() {\n  console.log("update");\n}\nmyLibrary = __webpack_exports__;\n/******/ })()\n;\n// 生成了一个识别 map 文件的调试注释\n//# sourceMappingURL=main.js.map\n'})}),"\n",(0,o.jsxs)(e.p,{children:["源映射文件 ",(0,o.jsx)(e.code,{children:"dist/main.js.map"})," 如下所示："]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:d,alt:""})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：如果想额外了解\xa0",(0,o.jsx)(e.code,{children:"sourceMappingURL"}),"\xa0对应的源代码位置映射原理，可以查看\xa0",(0,o.jsx)(e.a,{href:"https://web.dev/articles/source-maps?hl=zh-cn",target:"_blank",rel:"noopener noreferrer",children:"什么是源代码映射？"}),"和\xa0\xa0",(0,o.jsx)(e.a,{href:"https://developer.chrome.com/blog/sourcemaps?hl=zh-cn#how-does-the-source-map-work",target:"_blank",rel:"noopener noreferrer",children:"JavaScript\xa0Source\xa0Maps\xa0简介"}),"。"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"最终可以在\xa0Chrome\xa0DevTools\xa0调试面板中进行源码调试："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,o.jsxs)(e.h2,{id:"webpack-运行时-librarytarget-配置分析",children:["Webpack 运行时 ",(0,o.jsx)(e.code,{children:"libraryTarget"})," 配置分析",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-运行时-librarytarget-配置分析",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["尽管在\xa0Webpack\xa0中暴露 ",(0,o.jsx)(e.code,{children:"window.myLibrary"})," 属性后可以在浏览器中引入构建脚本来获取对应的生命周期函数，但是开发者可以随意定义该属性的名称（例如 ",(0,o.jsx)(e.code,{children:"window.yourLibrary"}),"），如果主子应用没有对属性名称进行约定，在主应用中很难设计通用的微应用生命周期获取方案。"]}),"\n",(0,o.jsxs)(e.p,{children:["在 qiankun 的 Webpack 配置中，除了配置 ",(0,o.jsx)(e.code,{children:"output.library"}),"，还需要配置 ",(0,o.jsx)(e.code,{children:"output.libraryTarget"})," 为 ",(0,o.jsx)(e.code,{children:"umd"}),"，使其通过\xa0UMD\xa0（Universal\xa0Module\xa0Definition，通用模块定义）规范进行导出："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// webpack.config.js\nmodule.exports = {\n  output: {\n    library: "myLibrary",\n    libraryTarget: "umd",\n  }\n};\n'})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：配置\xa0",(0,o.jsx)(e.code,{children:"library:\xa0'myLibrary'"}),"\xa0后构建脚本只能通过\xa0",(0,o.jsx)(e.code,{children:"<script>"}),"\xa0标签引入执行并通过\xa0",(0,o.jsx)(e.code,{children:"window.myLibrary"}),"\xa0获取生命周期，而\xa0Webpack\xa0导出\xa0UMD\xa0规范后可以使得构建脚本在原有 ",(0,o.jsx)(e.code,{children:"<script>"}),"\xa0标签引入方式的基础上，增加\xa0CommonJS、AMD\xa0等环境的引入，从而使得构建脚本能够兼容更多的运行环境。如果对\xa0UMD\xa0不清楚，可以查看\xa0",(0,o.jsx)(e.a,{href:"https://jameshfisher.com/2020/10/04/what-are-umd-modules/",target:"_blank",rel:"noopener noreferrer",children:"What\xa0are\xa0UMD\xa0modules？"}),"。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["构建后的脚本仍然可以在浏览器中通过\xa0",(0,o.jsx)(e.code,{children:"window.myLibrary"}),"\xa0进行访问，如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// 这里导出了 UMD 规范的代码，可以在浏览器中直接使用\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === "object" && typeof module === "object")\n    module.exports = factory();\n  else if (typeof define === "function" && define.amd) define([], factory);\n  else if (typeof exports === "object") exports["myLibrary"] = factory();\n  // 通过 <script> 标签引入会执行如下代码\n  // window.myLibrary = factory()\n  // 这里的 root 在浏览器中指代的是 window 对象\n  else root["myLibrary"] = factory();\n})(self, () => {\n  return (() => {\n    // webpackBootstrap\n    "use strict";\n    var __webpack_modules__ = {\n      "./src/index.js": (\n        __unused_webpack_module,\n        __webpack_exports__,\n        __webpack_require__\n      ) => {\n        eval(\n          \'__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   bootstrap: () => (/* binding */ bootstrap),\\n/* harmony export */   mount: () => (/* binding */ mount),\\n/* harmony export */   unmount: () => (/* binding */ unmount),\\n/* harmony export */   update: () => (/* binding */ update)\\n/* harmony export */ });\\nasync function bootstrap() {\\n  console.log("bootstrap");\\n}\\n\\nasync function mount() {\\n  console.log("mount");\\n}\\n\\nasync function unmount() {\\n  console.log("unmount");\\n}\\n\\nasync function update() {\\n  console.log("update");\\n}\\n\\n//# sourceURL=webpack://myLibrary/./src/index.js?\'\n        );\n      },\n    };\n\n    // The require scope\n    var __webpack_require__ = {};\n\n    /* webpack/runtime/define property getters */\n    (() => {\n      // define getter functions for harmony exports\n      __webpack_require__.d = (exports, definition) => {\n        for (var key in definition) {\n          if (\n            __webpack_require__.o(definition, key) &&\n            !__webpack_require__.o(exports, key)\n          ) {\n            Object.defineProperty(exports, key, {\n              enumerable: true,\n              get: definition[key],\n            });\n          }\n        }\n      };\n    })();\n\n    /* webpack/runtime/hasOwnProperty shorthand */\n    (() => {\n      __webpack_require__.o = (obj, prop) =>\n        Object.prototype.hasOwnProperty.call(obj, prop);\n    })();\n\n    /* webpack/runtime/make namespace object */\n    (() => {\n      // define __esModule on exports\n      __webpack_require__.r = (exports) => {\n        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: "Module",\n          });\n        }\n        Object.defineProperty(exports, "__esModule", { value: true });\n      };\n    })();\n\n    // startup\n    // Load entry module and return exports\n    // This entry module can\'t be inlined because the eval devtool is used.\n    var __webpack_exports__ = {};\n    __webpack_modules__["./src/index.js"](\n      0,\n      __webpack_exports__,\n      __webpack_require__\n    );\n\n    return __webpack_exports__;\n  })();\n});\n'})}),"\n",(0,o.jsxs)(e.p,{children:["我们可以对构建代码进行简化，之前我们分析了构建代码的模块化运行时，这些代码的执行没有任何变化，只是将其封装在了一个工厂函数\xa0",(0,o.jsx)(e.code,{children:"factory"}),"\xa0中，如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// 这里导出了 UMD 规范的代码，从而支持了 CommonJS、AMD 和浏览器运行环境\n(function webpackUniversalModuleDefinition(root, factory) {\n  // 通过判断环境来导出不同的模块\n  // 1. 如果是 CommonJS 规范的环境，则使用 module.exports 导出\n  if (typeof exports === "object" && typeof module === "object")\n    module.exports = factory();\n  // 2. 如果是 AMD 规范的环境，则使用 define 导出\n  else if (typeof define === "function" && define.amd) define([], factory);\n  // 3. 在 CommonJS-like 环境中导出模块，但不是 Node.js 环境\n  else if (typeof exports === "object") exports["myLibrary"] = factory();\n  // 4. 如果浏览器环境或其他环境，则设置 window.myLibrary = factory();\n  else root["myLibrary"] = factory();\n  // self 是一个全局对象，它在各种环境中都有定义\n  // 包括浏览器的 window 环境、Web Workers、Service Workers 等。\n  // 在浏览器环境中，self 和 window 是等价的，都指向全局的 Window 对象。\n  // 使用 self 而不是 window，是为了让代码能在各种环境中运行，而不仅仅是浏览器环境。\n})(self, () => {\n  // 通过 IIFE 的方式自执行模块化运行时代码\n  return (() => {\n\n    // 模块化映射对象\n    var __webpack_modules__ = {\n      "./src/index.js": (\n        __unused_webpack_module,\n        __webpack_exports__,\n        __webpack_require__\n      ) => {\n        __webpack_require__.r(__webpack_exports__);\n        __webpack_require__.d(__webpack_exports__, {\n          bootstrap: () => /* binding */ bootstrap,\n        });\n\n        async function bootstrap() {\n          console.log("bootstrap");\n        }\n\n        // ...\n      },\n    };\n\n    // 模块化运行时对象\n    var __webpack_require__ = {};\n    (() => {\n      __webpack_require__.d = function () {};\n    })()\n    \n    (() => {\n      __webpack_require__.o = function () {};\n    })()\n    \n    (() => {\n      __webpack_require__.r = function () {};\n    })();\n\n    // 模块导出对象\n    var __webpack_exports__ = {};\n\n    // 执行模块化代码，将模块内部的导出对象挂载到 __webpack_exports__ 上\n    __webpack_modules__["./src/index.js"](\n      0,\n      __webpack_exports__,\n      __webpack_require__\n    );\n\n    // 模块化运行时代码\n    // 大部分代码和之前分析的 dist/main.js 运行时一致\n    // factory 工厂函数最终返回模块化导出对象，即 window.myLibrary = __webpack_exports__\n    return __webpack_exports__;\n  })();\n});\n\n'})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"温馨提示：在源代码的\xa0ES\xa0Module\xa0中引入上述\xa0UMD\xa0规范的代码后，Webpack\xa0是通过什么方式来识别\xa0UMD\xa0模块并进行加载的呢？这里可以先构建一个\xa0UMD\xa0的模块出来，然后重新加载该\xa0UMD\xa0模块进行二次构建，最后分析构建后的代码。"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["我们重新回顾一下仅使用 ",(0,o.jsx)(e.code,{children:"output.library"})," 的简化代码，如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'var myLibrary;\n\n(() => {\n  // 模块化映射对象\n  var __webpack_modules__ = {\n    "./src/index.js": (\n      __unused_webpack_module,\n      __webpack_exports__,\n      __webpack_require__\n    ) => {\n      __webpack_require__.r(__webpack_exports__);\n      __webpack_require__.d(__webpack_exports__, {\n        bootstrap: () => /* binding */ bootstrap,\n      });\n\n      async function bootstrap() {\n        console.log("bootstrap");\n      }\n\n      // ...\n    },\n  };\n\n  // 模块化运行时对象\n  var __webpack_require__ = {};\n  (() => {\n    __webpack_require__.d = function () {};\n  })()(() => {\n    __webpack_require__.o = function () {};\n  })()(() => {\n    __webpack_require__.r = function () {};\n  })();\n\n  // 模块导出对象\n  var __webpack_exports__ = {};\n\n  // 执行模块化代码，将模块内部的导出对象挂载到 __webpack_exports__ 上\n  __webpack_modules__["./src/index.js"](\n    0,\n    __webpack_exports__,\n    __webpack_require__\n  );\n\n  // 将 __webpack_exports__ 挂载到 myLibrary 上\n  myLibrary = __webpack_exports__;\n})();\n'})}),"\n",(0,o.jsxs)(e.p,{children:["配置 ",(0,o.jsx)(e.code,{children:"output.libraryTarget"})," 为 ",(0,o.jsx)(e.code,{children:"umd"})," 后，构建代码会先执行 ",(0,o.jsx)(e.code,{children:"factory()"})," 返回模块化导出对象\xa0",(0,o.jsx)(e.code,{children:"__webpack_exports__"}),"，最后将模块化导出对象赋值给\xa0",(0,o.jsx)(e.code,{children:"window.myLibrary"}),"，而仅使用 ",(0,o.jsx)(e.code,{children:"output.library"})," 配置则会在起始位置先声明\xa0",(0,o.jsx)(e.code,{children:"var myLibrary"}),"。"]}),"\n",(0,o.jsxs)(e.h2,{id:"如何获取生命周期函数",children:["如何获取生命周期函数",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#如何获取生命周期函数",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["了解了 ",(0,o.jsx)(e.code,{children:"output.library & output.libraryTarget"})," 的配置和 Webpack 的运行时原理后，我们可以重点分析一下两者的差异和规律，探索如何建立一套通用的微应用生命周期函数获取方案，从而减少主应用和微应用识别过程的耦合性。"]}),"\n",(0,o.jsxs)(e.p,{children:["如果主应用在不知晓微应用配置 ",(0,o.jsx)(e.code,{children:'output.library = "myLibrary"'}),"（",(0,o.jsx)(e.code,{children:"myLibrary"})," 可以是任意值） 的情况下能够自动识别出微应用的全局属性 ",(0,o.jsx)(e.code,{children:"window.myLibrary"}),"，那么就可以执行微应用导出的 ",(0,o.jsx)(e.code,{children:"window.myLibrary.bootstrap"}),"，从而识别出 single-spa 所需要的生命周期函数。关键在于如何自动识别出 ",(0,o.jsx)(e.code,{children:"window.myLibrary"}),"？"]}),"\n",(0,o.jsxs)(e.p,{children:["由于 ",(0,o.jsx)(e.code,{children:"window"})," 全局对象默认内置了很多属性，因此在应用的起始位置声明 ",(0,o.jsx)(e.code,{children:"var myLibrary"})," 不会使得 ",(0,o.jsx)(e.code,{children:"window"})," 变量的第一个属性是 ",(0,o.jsx)(e.code,{children:"myLibrary"}),"，而如果后续的应用代码中存在声明的全局属性，那么也不会是最后一个全局属性，因此只配置 ",(0,o.jsx)(e.code,{children:"output.library"})," 的情况下无法按顺序识别出 ",(0,o.jsx)(e.code,{children:"myLibrary"}),"。但是如果在代码执行的最后对\xa0",(0,o.jsx)(e.code,{children:"window.myLibrary"}),"\xa0进行声明和赋值，那么可以在代码执行完毕后立即对 ",(0,o.jsx)(e.code,{children:"window"}),"\xa0属性按顺序进行遍历，从而识别出最后声明的属性 ",(0,o.jsx)(e.code,{children:"window.myLibrary"}),"，因此在配置 ",(0,o.jsx)(e.code,{children:'output.library = "myLibrary"'})," 的基础上新增 ",(0,o.jsx)(e.code,{children:'output.libraryTarget = "umd"'})," 配置后，可以按顺序遍历属性识别出 ",(0,o.jsx)(e.code,{children:"myLibrary"}),"。"]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：这里所说的识别出 ",(0,o.jsx)(e.code,{children:"window"})," 最后声明的属性，必须要在当前应用代码 ",(0,o.jsx)(e.code,{children:"window.myLibrary = factory()"})," 执行完毕后立即进行属性遍历。因为应用代码中可能存在即将要执行的宏任务和微任务，这些任务中可能存在全局属性声明，所以这个遍历的方法不能放在微任务或者宏任务中进行处理。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["主应用可以在微应用代码执行完毕后立即对\xa0",(0,o.jsx)(e.code,{children:"window"}),"\xa0属性按顺序进行遍历，最后一个获取的属性即为微应用导出的属性。通用的识别逻辑如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'function getAppLifeCycles() {\n  // 由于使用 UMD 进行微应用的构建\n  // 挂载全局属性的动作是在内部微应用的代码执行完毕后\n  // 例如 root["myLibrary"] = factory()\n  // 这里的 factory 包含了内部微应用代码的执行\n  \n  // Object.keys()的返回顺序如下：\n  // 数字键（整数索引），按照升序排列。\n  // 字符串键，按照它们被添加到对象的顺序。\n  // 符号键，按照它们被添加到对象的顺序。\n  \n  // 由于 Object.keys() 只返回字符串键，因此只需要关心数字键和字符串键。\n  // 数字键会被视为数组索引并按照数值升序排列，\n  // 字符串键则会按照它们创建时的顺序排列。\n  // 符号键不会被 Object.keys() 返回，但如果要获取它们，可以使用 Object.getOwnPropertySymbols()。\n\n  // 注意，这里的“数字键”指的是那些可被转换为 32 位无符号整数的字符串键\n  // 它们属于数组索引的范围，即在 0 到 2^32-1 之间的整数。\n  // 对于这些数字键，即使它们是作为对象的属性添加的，它们也会被当作数组索引并按照数值排序。\n  // 其他非数字的字符串键则按照它们添加到对象的顺序进行枚举。\n\n  // for...in\n  // 需要注意和 for...in 的区别，for...in 还能遍历原型链上的属性\n  \n  const keys = Object.keys(window);\n  const app = window[keys[keys.length - 1]];\n  let lifeCycles = {};\n  Object.keys(app).forEach((key) => {\n    const lifecycle = app[key];\n    if (lifecycle && typeof lifecycle === "function") {\n      // 将子应用的所有 lifeCycle 函数进行包装，包装成返回 Promise 的\n      lifeCycles[key] = async (...args) => {\n        console.log(`[main-app] ${key} start`);\n        await lifecycle(...args);\n        console.log(`[main-app] ${key} end`);\n      };\n    }\n  });\n  return lifeCycles;\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["其中 ",(0,o.jsx)(e.code,{children:"Object.keys"})," 可以获取到对象的属性，不会遍历原型链上的属性，并且字符串键会按照它们创建时的顺序排列，是按顺序遍历属性的重要 API。关于 ",(0,o.jsx)(e.code,{children:"Object.keys"})," 获取对象自身属性的返回顺序可以查看 ",(0,o.jsxs)(e.a,{href:"https://262.ecma-international.org/6.0/?_gl=1*1tycd0l*_ga*NDQ5NTkxOTguMTcwMTc0MzUwMg..*_ga_TDCK4DWEPP*MTcwMTc0MzUwMS4xLjEuMTcwMTc0MzcxMy4wLjAuMA..&_ga=2.173157030.426159955.1701743502-44959198.1701743502#sec-object.keys",target:"_blank",rel:"noopener noreferrer",children:["ECMAScript 2015 标准 ",(0,o.jsx)(e.code,{children:"Object.keys (O)"})]}),"："]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,o.jsxs)(e.p,{children:["上述执行步骤的重点是 ",(0,o.jsx)(e.code,{children:"nameList"})," 对应的 ",(0,o.jsx)(e.a,{href:"https://262.ecma-international.org/6.0/?_gl=1*1tycd0l*_ga*NDQ5NTkxOTguMTcwMTc0MzUwMg..*_ga_TDCK4DWEPP*MTcwMTc0MzUwMS4xLjEuMTcwMTc0MzcxMy4wLjAuMA..&_ga=2.173157030.426159955.1701743502-44959198.1701743502#sec-enumerableownnames",target:"_blank",rel:"noopener noreferrer",children:"EnumerableOwnNames (O)"}),"："]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,o.jsx)(e.p,{children:"上述操作用于获取对象所有可枚举的自有属性名称，返回按特定顺序排列的字符串列表："}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"确保传入的 O 是一个对象（只有对象才有属性）"}),"\n",(0,o.jsxs)(e.li,{children:["获取对象 O 的 ",(0,o.jsx)(e.code,{children:"[[OwnPropertyKeys]]()"}),"（不包含原型链上继承的属性），存储在 ",(0,o.jsx)(e.code,{children:"ownKeys"})," 中"]}),"\n",(0,o.jsxs)(e.li,{children:["创建一个新的空列表 ",(0,o.jsx)(e.code,{children:"names"}),"，用于存储最终的结果"]}),"\n",(0,o.jsxs)(e.li,{children:["遍历 ",(0,o.jsx)(e.code,{children:"ownKeys"})," 中的每一个键：","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["如果键的类型是字符串（不包含 ",(0,o.jsx)(e.code,{children:"Symbol"})," 类型的属性），获取该键对应的",(0,o.jsx)(e.a,{href:"https://262.ecma-international.org/6.0/?_gl=1*1tycd0l*_ga*NDQ5NTkxOTguMTcwMTc0MzUwMg..*_ga_TDCK4DWEPP*MTcwMTc0MzUwMS4xLjEuMTcwMTc0MzcxMy4wLjAuMA..&_ga=2.173157030.426159955.1701743502-44959198.1701743502#sec-ordinary-object-internal-methods-and-internal-slots-getownproperty-p",target:"_blank",rel:"noopener noreferrer",children:"属性描述符"}),(0,o.jsx)(e.code,{children:"[[GetOwnProperty]](key)"}),"，存储在 ",(0,o.jsx)(e.code,{children:"desc"})," 中（包含了属性的值、是否可写、是否可枚举、是否可配置等信息）"]}),"\n",(0,o.jsxs)(e.li,{children:["如果 ",(0,o.jsx)(e.code,{children:"desc"})," 不是 ",(0,o.jsx)(e.code,{children:"undefined"}),"（属性确实存在），并且 ",(0,o.jsx)(e.code,{children:"desc"})," 的 [[Enumerable]] 属性是 ",(0,o.jsx)(e.code,{children:"true"}),"（属性可枚举），那么就把这个键添加到 ",(0,o.jsx)(e.code,{children:"names"})," 列表中"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["对 ",(0,o.jsx)(e.code,{children:"names"})," 列表中的元素进行排序，使它们的相对顺序与通过在对象 O 上调用 [[Enumerate]] 内部方法返回的迭代器产生的顺序相同。"]}),"\n",(0,o.jsxs)(e.li,{children:["返回 ",(0,o.jsx)(e.code,{children:"names"})," 列表"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["上述第 6 步的排序还依赖第 2 步 ",(0,o.jsx)(e.code,{children:"[[OwnPropertyKeys]]()"})," 返回的顺序结果，因此我们重点来看下 ",(0,o.jsx)(e.code,{children:"[[OwnPropertyKeys]]()"})," 的",(0,o.jsx)(e.a,{href:"https://262.ecma-international.org/6.0/?_gl=1*1tycd0l*_ga*NDQ5NTkxOTguMTcwMTc0MzUwMg..*_ga_TDCK4DWEPP*MTcwMTc0MzUwMS4xLjEuMTcwMTc0MzcxMy4wLjAuMA..&_ga=2.173157030.426159955.1701743502-44959198.1701743502#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys",target:"_blank",rel:"noopener noreferrer",children:"定义"}),"："]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,o.jsx)(e.p,{children:"上述方法用于获取对象的所有自有属性的键，返回的是一个按特定顺序排列的列表:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["创建一个新的空列表 ",(0,o.jsx)(e.code,{children:"keys"}),"，用于存储最终的结果"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"遍历对象 O 的所有自有属性键："}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["如果键 P 是一个整数索引，那么按照升序将 P 添加到 ",(0,o.jsx)(e.code,{children:"keys"})," 列表的末尾。主要应用于数组，因为数组的键就是整数索引。"]}),"\n",(0,o.jsxs)(e.li,{children:["如果键 P 是一个字符串，但不是整数索引，那么按照它们被添加到对象的顺序将 P 添加到 ",(0,o.jsx)(e.code,{children:"keys"})," 列表的末尾。"]}),"\n",(0,o.jsxs)(e.li,{children:["如果键 P 是一个 ",(0,o.jsx)(e.code,{children:"Symbol"})," 类型，那么按照它们被添加到对象的顺序将 P 添加到 ",(0,o.jsx)(e.code,{children:"keys"})," 列表的末尾。"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["返回 ",(0,o.jsx)(e.code,{children:"keys"})," 列表，这个列表包含了对象 O 的所有自有属性的键，按照特定的顺序排列。"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["综上所述，",(0,o.jsx)(e.code,{children:"Object.keys"})," 可以按添加的顺序遍历自身的可枚举的字符串键的属性，并且不会枚举原型链上继承的属性以及 ",(0,o.jsx)(e.code,{children:"Symbol"})," 键类型的属性。"]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：感兴趣的同学可以查看一下 ",(0,o.jsx)(e.code,{children:"for...in"})," 的",(0,o.jsx)(e.a,{href:"https://262.ecma-international.org/6.0/?_gl=1*1tycd0l*_ga*NDQ5NTkxOTguMTcwMTc0MzUwMg..*_ga_TDCK4DWEPP*MTcwMTc0MzUwMS4xLjEuMTcwMTc0MzcxMy4wLjAuMA..&_ga=2.173157030.426159955.1701743502-44959198.1701743502#sec-for-in-and-for-of-statements-static-semantics-early-errors",target:"_blank",rel:"noopener noreferrer",children:"定义"}),"，并对比一下和 ",(0,o.jsx)(e.code,{children:"Object.keys"})," 定义的差异，上述获取生命周期函数的识别算法能用 ",(0,o.jsx)(e.code,{children:"for...in"})," 代替  ",(0,o.jsx)(e.code,{children:"Object.keys"})," 吗？"]}),"\n"]}),"\n",(0,o.jsxs)(e.h2,{id:"fetch-示例",children:["Fetch 示例",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#fetch-示例",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"了解了 Webpack 配置的运行时原理以及如何识别微应用的生命周期函数后，我们可以设计一个更加解耦的微应用生命周期函数获取方案。整体的目录结构如下所示："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"├── packages  \n│   ├── main-app/                # 主应用\n│   ├── react-app/               # React 微应用\n│   ├── single-spa/              # single-spa 5.9.5 版本\n│   └── vue-app/                 # Vue 微应用\n└── lerna.json                   # Lerna 配置\n"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：示例源码可以从 micro-framework 的\xa0",(0,o.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/single-spa-fetch",target:"_blank",rel:"noopener noreferrer",children:"demo/single-spa-fetch"}),"\xa0分支获取。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["Fetch 方案示例的实现流程如下所示，当主应用切换路由时会先失活没有匹配路由的微应用，执行相应的\xa0",(0,o.jsx)(e.code,{children:"unmount"}),"\xa0函数卸载微应用，然后会激活匹配路由的微应用，通过 Fetch 请求获取微应用的脚本文本，然后使用 ",(0,o.jsx)(e.code,{children:"eval"})," 执行脚本代码，并立即获取执行代码后的微应用生命周期函数，最后执行\xa0",(0,o.jsx)(e.code,{children:"mount"}),"\xa0函数挂载应用，从而实现监听路由切换微应用的功能："]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:t,alt:"yuque_diagram (1).jpg"})}),"\n",(0,o.jsxs)(e.h3,{id:"主应用设计",children:["主应用设计",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#主应用设计",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"首先来看下 Fetch 示例的实现效果，如下所示，点击左侧的导航切换路由，使用 single-spa 监听路由的变化来切换微应用："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:s,alt:"录屏2024-02-22 09.29.28.gif"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"温馨提示：切换路由的时候可以通过 Network 发现使用 Fetch 请求获取了微应用的 JS 脚本文本。在控制台还可以查看微应用通过 UMD 导出的全局属性名称。除此之外，在 single-spa 源码的各个阶段植入了很多打印信息，可以根据打印信息来感性了解 single-spa 的内部运行机制。"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"主应用的目录结构如下所示："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"├── src                  \n│   ├── index.js            # 入口文件，包含了 single-spa 的注册和 React 路由             \n│   ├── App.js              # 主应用布局，包含了导航和内容区的布局设计           \n│   └── utils/              # 工具方法\n│        ├── micros.js      # 微应用数据信息（Mock 后端数据结构）      \n│        └── single-spa.ts  # single-spa 的注册 API 封装\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["在\xa0",(0,o.jsx)(e.code,{children:"src/utils/micros.js"}),"\xa0中定义了微应用列表的数据结构（在真实业务场景中这个数据会更复杂，并且可以从服务端进行动态加载），该数据主要用于注册 single-spa 的微应用、生成 React 路由和主应用导航，如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// src/utils/micros.js\n// 微应用容器元素的 ID\nexport const MICRO_APP_CONTAINER_ID = "micro-app-container";\n\nexport const MICRO_APP_ROUTER = {\n  REACT: "react",\n  VUE: "vue",\n};\n\n// 菜单信息，这里用于 Mock 后端数据\n// 真实业务可能是一个树状的带权限的菜单信息\nexport const mockMicroApps = [\n  {\n    // 应用标识\n    name: "react",\n    // 菜单名称\n    title: "React Micro App",\n    // NPM 包名称\n    app: "react-micro-app",\n    // 激活路由\n    router: MICRO_APP_ROUTER.REACT,\n  },\n  {\n    name: "vue",\n    title: "Vue Micro App",\n    app: "vue-micro-app",\n    router: MICRO_APP_ROUTER.VUE,\n  },\n];\n'})}),"\n",(0,o.jsx)(e.p,{children:"主应用在初始化时需要消费微应用列表数据，在初始化时使用 single-spa 注册微应用并生成对应的 React 路由："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'import React from "react";\nimport ReactDOM from "react-dom/client";\nimport "./index.css";\nimport App from "./App.tsx";\nimport reportWebVitals from "./reportWebVitals.js";\nimport { createBrowserRouter, RouterProvider } from "react-router-dom";\nimport { registerMicroApps, fetchApp } from "./utils/single-spa.ts";\nimport { MICRO_APP_CONTAINER_ID, mockMicroApps } from "./utils/micros.ts";\n\n// 对 single-spa 的注册 API 进行了二次封装，支持传入数组进行批量注册\nregisterMicroApps(\n  // 根据后端提供的动态数据批量注册微应用\n  mockMicroApps.map((item) => ({\n    name: item.name,\n    app: () => {\n      // 通过 Fetch 请求方式获取\n      return fetchApp(item.entry);\n    },\n    activeWhen: item.router,\n    customProps: {\n      // 向微应用传递需要挂载的容器元素 ID\n      container: MICRO_APP_CONTAINER_ID,\n    },\n  }))\n);\n\nconst router = createBrowserRouter([\n  {\n    path: "/",\n    // <App /> 中提供了左侧导航栏和右侧内容区域的布局结构\n    element: <App />,\n    // children 中的元素会被渲染到 <App /> 的 <Outlet /> 中\n    // <Outlet> 是 react-router-dom 提供的一个组件，用于渲染子路由：https://reactrouter.com/en/main/components/outlet\n\n    // 遍历迭代 mockMicroApps 中的数据，生成对应的路由配置\n    // 这里的路由配置和微应用注册 API 中的 activeWhen 一致\n    children: mockMicroApps.map((item) => ({\n      path: item.router,\n      // 微应用的容器元素，用于渲染微应用\n      element: <div id={MICRO_APP_CONTAINER_ID}></div>,\n    })),\n  },\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById("root")!);\nroot.render(<RouterProvider router={router} />);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n'})}),"\n",(0,o.jsxs)(e.p,{children:["在\xa0",(0,o.jsx)(e.code,{children:"src/utils/single-spa.ts"}),"\xa0中重点看下 ",(0,o.jsx)(e.code,{children:"fetchApp"})," 的实现，通过 ",(0,o.jsx)(e.code,{children:"window.fetch"})," 获取微应用的 JS 脚本文本进行动态执行，执行完成后立马获取相应的生命周期函数："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// 这里使用 npm link 进行连接调试\nimport { start, registerApplication } from "single-spa/src/single-spa";\nimport { LifeCycles, RegisterApplicationConfig } from "single-spa";\n\n// 对 single-spa 的 registerApplication 进行二次封装，使其可以接收一个数组，批量注册子应用\nexport function registerMicroApps(apps: RegisterApplicationConfig[]) {\n  // @ts-ignore\n  // 如果不开启 __DEV__，single-spa 的源码无法正常运行\n  window.__DEV__ = true;\n  apps.forEach(registerApplication);\n  start();\n}\n\nexport function getAppLifeCycles() {\n  // 使用 UMD 进行子应用的构建，挂载全局变量的动作是在内部微应用的代码执行完毕后\n  // 例如 root["myLibrary"] = factory(), 这里的 factory 包含了内部微应用代码的执行\n  // 因此这里通过遍历全局对象的属性顺序拿到子应用的生命周期函数\n\n  // Object.keys 可以获取到对象的属性\n  // 对象自身属性的返回顺序查看 ECMAScript 2015 标准：\n  // https://262.ecma-international.org/6.0/?_gl=1*1tycd0l*_ga*NDQ5NTkxOTguMTcwMTc0MzUwMg..*_ga_TDCK4DWEPP*MTcwMTc0MzUwMS4xLjEuMTcwMTc0MzcxMy4wLjAuMA..&_ga=2.173157030.426159955.1701743502-44959198.1701743502#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys\n\n  // 按照这个规范，Object.keys() 的返回顺序如下：\n\n  // 数字键（整数索引），按照升序排列。\n  // 字符串键，按照它们被添加到对象的顺序。\n  // 符号键，按照它们被添加到对象的顺序。\n  // 由于 Object.keys() 只返回字符串键，因此只需要关心数字键和字符串键。\n  // 数字键会被视为数组索引并按照数值升序排列，而字符串键则会按照它们创建时的顺序排列。\n  // 符号键不会被 Object.keys() 返回，但如果要获取它们，可以使用 Object.getOwnPropertySymbols()。\n\n  // 注意，这里的“数字键”指的是那些可被转换为32位无符号整数的字符串键，它们属于数组索引的范围，即在0到2^32-1之间的整数。\n  // 对于这些数字键，即使它们是作为对象的属性添加的，它们也会被当作数组索引并按照数值排序。其他非数字的字符串键则按照它们添加到对象的顺序进行枚举。\n\n  // 需要注意和 for...in 的区别，for...in 还能遍历原型链上的属性\n\n  // for...in\n  // https://262.ecma-international.org/6.0/?_gl=1*1tycd0l*_ga*NDQ5NTkxOTguMTcwMTc0MzUwMg..*_ga_TDCK4DWEPP*MTcwMTc0MzUwMS4xLjEuMTcwMTc0MzcxMy4wLjAuMA..&_ga=2.173157030.426159955.1701743502-44959198.1701743502#sec-for-in-and-for-of-statements-static-semantics-early-errors\n\n  const keys = Object.keys(window);\n  const lifeCycles = window[keys[keys.length - 1]];\n  // 打印微应用 UMD 构建导出的全局属性\n  console.info(\n    "%c当前 window 对象的最后一个属性是：%c" + keys[keys.length - 1],\n    "color: blue; font-weight: bold; font-size: 20px;",\n    "color: red; font-weight: bold; font-size: 20px;"\n  );\n  return lifeCycles as LifeCycles;\n}\n\nexport async function fetchApp(url: string) {\n  const res = await window.fetch(url);\n  const text = await res.text();\n\n  // 为什么 qiankun 更加推荐使用 eval 而不是 script 呢？\n  // 错误处理：(0, eval) 执行的代码若出现错误，可以通过 try-catch 语句捕获异常进行处理，而 script 标签注入的代码需要通过监听 error 事件来处理异常。\n  // 执行时机：使用 script.textContent 插入并执行代码的时机可以被精确控制，因为它发生在你将 script 元素添加到 DOM 的那一刻。而使用 (0, eval) 执行的代码通常是立即执行的，一旦调用，代码就会运行。\n  // 性能: 对于大型应用，qiankun 需要动态加载和卸载子应用，script 标签的插入和删除可能会导致性能问题，而 (0, eval) 可以更容易地控制这些操作。\n  // 安全性: 使用 script 标签可能会导致某些安全性问题，比如内容安全策略（CSP）的违反，而 (0, eval) 可以更容易地遵守这些策略。\n  // 兼容性: 在某些老旧浏览器中，动态插入 script 标签可能会遇到兼容性问题，使用 (0, eval) 可以提供更一致的跨浏览器行为。\n  // 调试: <script> 标签内的代码或通过其 src 属性加载的外部脚本在浏览器的开发者工具中通常有更好的调试体验，可以提供源代码映射。\n  // (0, eval) 执行的代码在调试时可能更加困难，特别是如果执行的是压缩或动态生成的代码字符串，那么可能难以找到代码出错的具体位置。\n\n  // 使用 <script> 标签插入内联代码可能会遇到 CSP 限制，因为 CSP 可以禁止执行页面上的内联脚本作为一种安全措施。\n  // 现在 Chrome 开发工具可以调试 eval() 内的代码，但是必须等代码执行一次后才出现在源面板中。\n\n  // 使用 script 元素执行\n  // const script = document.createElement("script");\n  // script.textContent = text;\n  // document.head.appendChild(script);\n\n  // 使用 eval 执行\n  // (0, eval) 和 eval 的区别是什么？为什么需要使用 (0, eval) 执行？\n  (0, eval)(text);\n\n  // 执行微应用的代码后立即获取对应的生命周期函数\n  return getAppLifeCycles();\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["最后在\xa0",(0,o.jsx)(e.code,{children:"<App>"}),"\xa0中对主应用进行布局设计，将左侧设计成能够切换路由的导航，导航的信息来源于微应用数据列表，右侧设计成用于渲染微应用的内容区："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:'// src/App.js\nimport { Outlet, Link } from "react-router-dom";\nimport "./App.css";\nimport { mockMicroApps } from "./utils/micros";\n\nfunction App() {\n  return (\n    <div className="app">\n      <div className="app-nav">\n        <p>Micro App List</p>\n        <nav>\n          <ul>\n            {/* 遍历微应用的数据列表生成导航路由信息 */}\n            {mockMicroApps.map((item) => (\n              <li key={item.name}>\n                <Link to={item.router}>{item.title}</Link>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </div>\n      <div className="app-content">\n        {/* 这里的 <Outlet /> 会被 <RouterProvider router={router} /> 中 router 提供的 children 进行替换 */}\n        {/* 所以本质上会被微应用的容器元素 <div id={MICRO_APP_CONTAINER_ID}></div> 替代  */}\n        <Outlet />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,o.jsxs)(e.h3,{id:"微应用设计",children:["微应用设计",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#微应用设计",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["在了解了 Webpack 的运行原理后，为了可以在主应用中通过 ",(0,o.jsx)(e.code,{children:"getAppLifeCycles"})," 按顺序遍历获取微应用导出的全局属性，需要在微应用中新增如下 Webpack 配置："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// webpack 5.x\nconst packageName = require('./package.json').name;\n\nmodule.exports = {\n  output: {\n    // library 和 libraryTarget 用于暴露微应用的生命周期函数\n    library: `${packageName}-[name]`,\n    libraryTarget: 'umd',\n  },\n};\n\n// webpack 4.x\nconst packageName = require('./package.json').name;\n\n\nmodule.exports = {\n  output: {\n    library: `${packageName}-[name]`,\n    libraryTarget: 'umd',\n  },\n};\n"})}),"\n",(0,o.jsxs)(e.p,{children:["本课程的 React 示例需要在 ",(0,o.jsx)(e.code,{children:"config/webpack.config.js"})," 中新增如下配置："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// config/webpack.config.js\nmodule.exports = function(webpackEnv) {\n  // ...\n\n  // common function to get style loaders\n  const getStyleLoaders = (cssOptions, preProcessor) => {\n    const loaders = [\n      // 注释掉抽离 CSS 样式的插件功能\n      // isEnvDevelopment && require.resolve("style-loader"),\n      // isEnvProduction && {\n      //   loader: MiniCssExtractPlugin.loader,\n      //   // css is located in `static/css`, use \'../../\' to locate index.html folder\n      //   // in production `paths.publicUrlOrPath` can be a relative path\n      //   options: paths.publicUrlOrPath.startsWith(".")\n      //     ? { publicPath: "../../" }\n      //     : {},\n      // },\n      \n      require.resolve("style-loader"),\n      {\n        loader: require.resolve("css-loader"),\n        options: cssOptions,\n      },\n      // ...\n    ].filter(Boolean);\n    // ...\n    return loaders;\n  };\n  \n  return {\n    output: {\n      // ...\n      \n      // 需要确保唯一性\n      library: "reactMicroApp",\n      // 构建输出 UMD 规范\n      libraryTarget: "umd",\n    },\n\n    module: {\n      rules: [\n        {\n          oneOf: [\n            // TODO: Merge this config once `image/avif` is in the mime-db\n            // https://github.com/jshttp/mime-db\n            {\n              test: [/.avif$/],\n              mimetype: "image/avif",\n              // 内联处理\n              // https://webpack.js.org/guides/asset-modules/#inlining-assets\n              type: \'asset/inline\',\n            },\n            // "url" loader works like "file" loader except that it embeds assets\n            // smaller than specified limit in bytes as data URLs to avoid requests.\n            // A missing `test` is equivalent to a match.\n            {\n              test: [/.bmp$/, /.gif$/, /.jpe?g$/, /.png$/],\n              // 内联处理\n              type: \'asset/inline\',\n            },\n            {\n              test: /.svg$/,\n              // 内联处理\n              type: \'asset/inline\',\n\n              // 注释\n              \n              // use: [\n              //   {\n              //     loader: require.resolve("@svgr/webpack"),\n              //     options: {\n              //       prettier: false,\n              //       svgo: false,\n              //       svgoConfig: {\n              //         plugins: [{ removeViewBox: false }],\n              //       },\n              //       titleProp: true,\n              //       ref: true,\n              //     },\n              //   },\n              //   {\n              //     loader: require.resolve("file-loader"),\n              //     options: {\n              //        name: "static/media/[name].[hash].[ext]",\n              //     },\n              //   },\n              // ],\n              \n              issuer: {\n                and: [/.(ts|tsx|js|jsx|md|mdx)$/],\n              },\n            },\n          ]\n        }\n      ].filter(Boolean),\n    },\n\n    plugins: [\n      \n      // ...\n      \n      // 构建单个 JS 脚本\n      new webpack.optimize.LimitChunkCountPlugin({\n        maxChunks: 1,\n      }),\n    ].filter(Boolean),\n  }\n}\n'})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：这里构建输出单个 JS Bundle，因此不需要额外配置代码分离的 ",(0,o.jsx)(e.code,{children:"output.chunkLoadingGlobal"})," 或者 ",(0,o.jsx)(e.code,{children:"output.jsonpFunction"}),"。除此之外，为了保证全局属性的唯一性（防止冲突），可以在配置 ",(0,o.jsx)(e.code,{children:"output.library"})," 时采用 ",(0,o.jsx)(e.a,{href:"https://github.com/uuidjs/uuid",target:"_blank",rel:"noopener noreferrer",children:"uuid"})," 设置唯一性。"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"同时在 React 微应用的入口文件中导出生命周期函数，如下所示："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// src/index.js\nimport React from "react";\nimport ReactDOM from "react-dom/client";\nimport "./index.css";\nimport App from "./App";\n// import reportWebVitals from \'./reportWebVitals\';\n\nlet root;\n\n// 判断是否在 single-spa 的环境中运行\n// 如果不是，那么说明不在微前端的环境中，可以独立启动\nif (!window.singleSpaNavigate) {\n  root = ReactDOM.createRoot(document.getElementById("root"));\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\n/**\n * bootstrap 只会在微应用首次激活时调用一次\n * 微应用重新激活时会直接调用 mount 周期函数，不会再重复触发 bootstrap。\n * 通常情况下这里不需要进行任何处理，初始化的代码可以放在当前入口文件的顶层处理\n * 除非会执行微应用的 unload 动作，然后需要再次执行 bootstrap，可能需要在此做一些必要的初始化动作\n * 注意这里的周期函数不是 async 函数，在主应用中引入该周期函数后需要进行 async 处理\n */\n\n// 注意这里的每一个生命周期函数必须是 async 函数\nexport async function bootstrap() {\n  console.log("[React 子应用] bootstrap excuted");\n}\n\n/**\n * 微应用每次激活时都会调用 mount 周期函数，通常在这里执行微应用的渲染\n */\nexport async function mount(props) {\n  console.log("[React 子应用] mount excuted, props: ", props);\n  // 在 single-spa 的注册 API 中会通过 customProps 传递 container 微应用容器元素 ID\n  // 因此这里将微应用挂载在主应用的容器元素上\n  root = ReactDOM.createRoot(document.getElementById(props.container));\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\n/**\n * 微应用每次失活时会调用 unmount 周期函数，通常在这里执行微应用的卸载\n */\nexport async function unmount(props) {\n  console.log("[React 子应用] unmount excuted, props: ", props);\n  root && root.unmount();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n'})}),"\n",(0,o.jsx)(e.p,{children:"Vue 示例也需要进行更改，首先使其支持构建单个 Bundle 文件："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// vue.config.js\nconst { defineConfig } = require("@vue/cli-service");\nmodule.exports = defineConfig({\n  transpileDependencies: true,\n  css: { extract: false },\n  configureWebpack: {\n    optimization: {\n      splitChunks: false,\n    },\n    output: {\n      // 需要确保唯一性，可以使用 uuid 来设置\n      library: "vueMicroApp",\n      // 构建输出 UMD 规范\n      libraryTarget: "umd",\n    },\n  },\n  \n  // 需要注意主应用和微应用端口不同形成了跨域\n  // 为了通过 fetch 请求微应用的 JS 脚本，需要微应用的开发态服务支持跨域\n  // 上一个课程通过 <script> 标签的方式加载天然支持跨域\n  devServer: {\n    headers: {\n      "Access-Control-Allow-Origin": "*",\n    },\n  },\n});\n'})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：React 微应用的 ",(0,o.jsx)(e.code,{children:"config/webpackDevServer.config.js"})," 默认已经设置了跨域配置，因此不需要额外进行配置。"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"同时在 Vue 微应用的入口文件中导出生命周期函数，如下所示："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// src/main.js\nimport { createApp } from "vue";\nimport App from "./App.vue";\nlet app;\n\n// 判断是否在 single-spa 的环境中运行\n// 如果不是，那么说明不在微前端的环境中，可以独立启动\nif (!window.singleSpaNavigate) {\n  app = createApp(App);\n  app.mount("#app");\n}\n\n// 注意这里的每一个生命周期函数必须是 async 函数\nexport async function bootstrap() {\n  console.log("[Vue 子应用] bootstrap excuted");\n}\n\nexport async function mount(props) {\n  console.log("[Vue 子应用] mount excuted, props: ", props);\n  app = createApp(App);\n  app.mount(`#${props.container}`);\n}\n\nexport async function unmount(props) {\n  console.log("[Vue 子应用] unmount excuted, props: ", props);\n  app && app.unmount();\n}\n'})}),"\n",(0,o.jsxs)(e.h2,{id:"小结",children:["小结",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["本课程讲解了 Fetch 请求方案的实现示例，重点讲解了如何实现解耦的微应用生命周期函数获取方案。为了实现该方案，需要额外进行 Webpack 配置，因此还讲解了 Webpack 配置对应的运行时原理。为了加深大家对本课程的理解，可以额外思考一下，上一个课程的 Script 示例是否可以参考本课程的主应用示例通过 ",(0,o.jsx)(e.code,{children:"getAppLifeCycles"}),"来获取生命周期函数？在下一个课程中，我们会讲解代码分离的 single-spa 微前端示例。"]})]})}function m(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(b,{...n})}):b(n)}let j=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F21.%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90%EF%BC%9Asingle-spa%20%E7%9A%84%20Fetch%20%E7%A4%BA%E4%BE%8B.md"]={toc:[{text:"为什么需要了解 Webpack 运行时原理",id:"为什么需要了解-webpack-运行时原理",depth:2},{text:"Webpack 运行时 `library` 配置分析",id:"webpack-运行时-library-配置分析",depth:2},{text:"`library` 配置示例",id:"library-配置示例",depth:3},{text:"`library` 配置运行时分析",id:"library-配置运行时分析",depth:3},{text:"devtool\xa0配置说明",id:"devtool配置说明",depth:3},{text:"Webpack 运行时 `libraryTarget` 配置分析",id:"webpack-运行时-librarytarget-配置分析",depth:2},{text:"如何获取生命周期函数",id:"如何获取生命周期函数",depth:2},{text:"Fetch 示例",id:"fetch-示例",depth:2},{text:"主应用设计",id:"主应用设计",depth:3},{text:"微应用设计",id:"微应用设计",depth:3},{text:"小结",id:"小结",depth:2}],title:"21.框架解析：single-spa 的 Fetch 示例",headingTitle:"21.框架解析：single-spa 的 Fetch 示例",frontmatter:{}}}}]);