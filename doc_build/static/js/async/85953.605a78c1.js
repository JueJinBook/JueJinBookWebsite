"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["85953"],{704589:function(n,e,r){r.r(e),r.d(e,{default:()=>j});var s=r(552676),c=r(740453);let d=r.p+"static/image/da00bf8935fc1973f3279dc2f8546bd7.4d8f0258.webp",o=r.p+"static/image/16d0a13729b2af2bf3ac70afe35c66a4.de32c526.webp",i=r.p+"static/image/f78701e596fcaacd2ea99be3a7d42651.a4d41c4d.webp",t=r.p+"static/image/1c8937a70b8f5add3cf8f514a67845fd.1798b4a7.webp",a=r.p+"static/image/fe55ab7766ced5c00f1c16d3aa6ff263.17230b89.webp",l=r.p+"static/image/7f27c44de6f178089cb6d92553171154.d0486ba5.webp",h=r.p+"static/image/80c6714303ec0ec0dfb858b24cfe3af8.45f5f8a9.webp";function p(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ul:"ul",li:"li",img:"img",h2:"h2",pre:"pre",code:"code",blockquote:"blockquote",ol:"ol"},(0,c.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"29客户端实战属性编排功能实现",children:["29.客户端实战：属性编排功能实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#29客户端实战属性编排功能实现",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["拖拽引擎负责了低代码平台 ",(0,s.jsx)(e.strong,{children:"GUI"})," 的实现，那么属性编排则是负责了应用程序组件属性的配置预设，通过可视化的表单能力来设置组件上有的一些属性内容。"]}),"\n",(0,s.jsx)(e.p,{children:"这样做的目的就是为了让非技术人员也能够轻松地创建和维护应用程序，用最小化的成本来进行复杂的技术配置。"}),"\n",(0,s.jsx)(e.p,{children:"整个属性编排分为两部分："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"第一：需要把整个编辑器串联起来，打通整个组件放置和选中渲染的过程；"}),"\n",(0,s.jsxs)(e.li,{children:["第二：就是来实现各式各样的编排组件，来使得它赋予其定制 ",(0,s.jsx)(e.strong,{children:"GUI"})," 展示和逻辑执行的能力。"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"当你熟悉这两个流程之后，后续实现属于自己的低代码平台或者是搭建平台来说，会有非常大的帮助。"}),"\n",(0,s.jsxs)(e.p,{children:["在这之前已经通过 ",(0,s.jsx)(e.strong,{children:"craft.js"})," 快速的开发了物料组件，并封装了对应的高阶组件和相关的方法用来快速注册一个物料组件。接下来就需要将其与编辑器画布联系起来，形成一套最基础的链路。"]}),"\n",(0,s.jsx)(e.p,{children:"本章节主要是来实现属性编排的前置工作，将整个编辑器的基本核心链路打通。"}),"\n",(0,s.jsx)(e.p,{children:"实现后的预览效果图如下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(e.h2,{id:"组件列表",children:["组件列表",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#组件列表",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["首先，绝大多数低代码平台都有属于自己的物料组件列表，它是画布搭建 ",(0,s.jsx)(e.strong,{children:"GUI"})," 的组成模块。"]}),"\n",(0,s.jsxs)(e.p,{children:["要实现一个物料组件非常的简单，整个物料组件列表的构成会根据物料的划分而放入到不同分类当中显示。可以通过 ",(0,s.jsx)(e.strong,{children:"lodash"})," 的 ",(0,s.jsx)(e.strong,{children:"groupBy"})," 方法来实现相关的逻辑，如下代码所示:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"const components = [\n  {\n    displayName: '文本',\n    category: 'base',\n    componentType: 'Text'\n  },\n\n  {\n    displayName: '标题',\n    category: 'base',\n    componentType: 'Text'\n  },\n\n  {\n    displayName: '容器-行',\n    category: 'container',\n    componentType: 'Row'\n  },\n\n  {\n    displayName: '容器-列',\n    category: 'container',\n    componentType: 'Column'\n  }\n]\n\n// transform group\nconst groupComponents = _.groupBy(components, 'category')\n\n/** 输出\n{\n  \"base\": [{\n    displayName: '文本',\n    category: 'base',\n    componentType: 'Text'\n  },\n\n  {\n    displayName: '标题',\n    category: 'base',\n    componentType: 'Text'\n  }],\n  \"container\": [{\n    displayName: '容器-行',\n    category: 'container',\n    componentType: 'Row'\n  },\n\n  {\n    displayName: '容器-列',\n    category: 'container',\n    componentType: 'Column'\n  }]\n}\n  **/\n"})}),"\n",(0,s.jsxs)(e.p,{children:["那么此时，左侧的组件区域将会同时渲染 ",(0,s.jsx)(e.strong,{children:"base"})," 和 ",(0,s.jsx)(e.strong,{children:"container"})," 两个区块的内容，内部是分类后各自归属的相关组件。"]}),"\n",(0,s.jsx)(e.p,{children:"在真实情况下，有根据组件的用途类型做分类的，也有根据不同组件库来分类的等等。接下来就以基础物料组件包来进行实战开发。"}),"\n",(0,s.jsxs)(e.p,{children:["如下代码所示：\n",(0,s.jsx)(e.strong,{children:"@lgnition-lowcode/materials"})," 是当前的基础物料的组件库，其中包含了布局，基础空间等相关的物料组件，如下图通过 ",(0,s.jsx)(e.code,{children:"as AllExport"})," 的方式将所有组件导出成为一个完整的对象。然后通过遍历处理成对应的组件列表格式。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import * as _materials from '@lgnition-lowcode/materials'\n\nconst baseMaterials = Object.keys(_materials).map((key: any) => ({\n  key,\n  component: _materials[key as keyof typeof _materials]\n}))\n"})}),"\n",(0,s.jsxs)(e.p,{children:["在控制台输出下看看。如下图所示，",(0,s.jsx)(e.strong,{children:"baseMaterials"})," 形成了一个所有 ",(0,s.jsx)(e.code,{children:"ESModule"})," 对象被输出出来了。",(0,s.jsx)(e.strong,{children:"key"})," 是 ",(0,s.jsx)(e.code,{children:"exportName"}),"，",(0,s.jsx)(e.strong,{children:"component"})," 是对应的物料组件，被抽离成这样的格式。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsx)(e.p,{children:"获取到了物料组件的列表后，下一步就来实现项目中的物料组件列表的渲染了。实现的效果如下图所示："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsx)(e.p,{children:"左侧面板中需要将其进行一个归类展示，这样的话我们就需要将分类的渲染单独抽离出来封装成一个组件来负责分类列表的渲染。根据相关的布局来实现对应的功能。"}),"\n",(0,s.jsx)(e.p,{children:"相关的代码实现逻辑如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'export interface CategoryProps {\n  list?: MaterialCategory[];\n  title: string;\n}\n\nexport const Category: React.FC<CategoryProps> = (props) => {\n\n\n  const { connectors } = useEditor();\n  const { token } = useTokens()\n\n  return (\n    <div >\n      <Typography.Text style={{ marginBottom: 12, display: \'inline-block\' }} type="secondary" >{props.title}</Typography.Text>\n      <Row gutter={[6, 12]} >\n        {\n          (props.list || []).map((item) => {\n            const { key, component } = item\n            let value = React.createElement(component);\n            if (["Container"].includes(key)) {\n              value = <Element canvas is={component} initialHeight={100} initialWidth={"10%"} style={{\n                background: token.colorPrimary\n              }} />;\n            }\n\n            if (!item?.component?.craft?.displayName) return null\n\n            return (\n              <Col span={8} key={item.key}\n                ref={(ref: HTMLDivElement) => connectors.create(ref, value)} >\n                <CardItem name={item?.component?.craft?.displayName} />\n              </Col>\n            )\n          })\n        }\n        {\n        !props.list ? <Col span={24} >\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n        </Col> : null\n        }\n      </Row>\n      <Divider style={{\n      marginBlock: token.margin\n    }} />\n    </div>\n  )\n}\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["需要注意的是针对容器类的组件需要单独的处理成 ",(0,s.jsx)(e.code,{children:"<Element/>"})," 来支持嵌套拖拽，它也是后面实现复合组件以及插槽的核心概念，在这里可以先做个了解，后面也会逐渐的使用起来。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["每个拖动的组件卡片需要与编辑器连接，通过 ",(0,s.jsx)(e.code,{children:"connectors.create"})," 来进行组件放置时的创建动作，如下代码所示："]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["先通过 ",(0,s.jsx)(e.code,{children:"useEditor"})," 初始化连接器；"]}),"\n",(0,s.jsxs)(e.li,{children:["使用 ",(0,s.jsx)(e.code,{children:"connectors.create"})," 将当前组件的ref与物料组件关联。"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"const { connectors } = useEditor();\n\n<Col span={8} key={item.key}\n  ref={(ref: HTMLDivElement) => connectors.create(ref, value)} >\n  <CardItem name={item?.component?.craft?.displayName} icon={item?.component?.craft?.icon} />\n</Col>\n"})}),"\n",(0,s.jsxs)(e.p,{children:["到了这一步就基本完成了组件列表的一个显示与渲染了，",(0,s.jsx)(e.code,{children:"<CardItem/>"})," 用于展示物料组件相关的信息。实现代码如下："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"export const CardItem: React.FC<CardItemProps> = (props) => {\n\n  const { token } = useTokens()\n\n  return (\n    <div className={css({\n      width: '100%',\n      textAlign: 'center',\n      cursor: 'copy',\n      fontSize: 12,\n    })} >\n      <Space direction=\"vertical\" size={0} >\n        <div className={css({\n          height: '52px',\n          width: '100%',\n          border: `1px solid ${token.colorBorder}`,\n          paddingInline: 4,\n          borderRadius: token.borderRadius,\n          marginBottom: 4,\n          background: '#f9f9f9',\n          ['&:hover']: {\n            background: token.colorBorderSecondary,\n            transition: '.8s'\n          }\n        })} >\n            <Image  preview={false} src={props.icon} />\n        </div>\n        <span style={{ fontSize: 10 }} >{props.name}</span>\n      </Space>\n    </div>\n  )\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"到此，整个组件列表的基本实现就完成了，现在你已经有了一个基本的组件列表和一个连接到编辑器的方式，可以开始创建页面并构建它们的显示效果了。现在可能只有一些基本的组件类型，后面可以添加更多的组件类型，例如页面布局、表格表单，图表等等，以满足更多的页面搭建需求。"}),"\n",(0,s.jsxs)(e.h2,{id:"编辑器画布",children:["编辑器画布",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编辑器画布",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"组件列表实现后，接下来就来实现画布相关的内容了。"}),"\n",(0,s.jsxs)(e.p,{children:["在这之前已经将编辑器与物料组件通过 ",(0,s.jsx)(e.code,{children:"connectors.create"})," 进行串联，接下来只需要为 ",(0,s.jsx)(e.code,{children:"Editor"})," 上下文来声明对应的物料组件了。导入 ",(0,s.jsx)(e.code,{children:"@craftjs/core"})," 中的 ",(0,s.jsx)(e.code,{children:"Editor"})," 并且放置到编辑器组件 ",(0,s.jsx)(e.strong,{children:"SDK"})," 的最上层来构建实例。"]}),"\n",(0,s.jsxs)(e.p,{children:["如下代码所示：\n",(0,s.jsx)(e.code,{children:"Editor"})," 组件包裹了 ",(0,s.jsx)(e.code,{children:"children"}),"，通过 ",(0,s.jsx)(e.code,{children:"enabled"})," 属性控制当前是否是编辑模式。将之前的 ",(0,s.jsx)(e.code,{children:"_materials"})," 放入 到 ",(0,s.jsx)(e.code,{children:"Editor"})," 的 ",(0,s.jsx)(e.code,{children:"resolver"})," 属性后即可在画布内通过协议渲染对应的组件，否则的话会警告并且无法正常渲染协议中的组件。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Editor } from '@craftjs/core'\nimport * as _materials_ from '@lgnition-lowcode/materials'\n\n<StoreProvider store={store} >\n  <Editor \n    enabled \n    resolver={_materials_} \n    onRender={RenderNodeWrapper} \n    onNodesChange={(dragProps) => console.log(`onNodesChange`, dragProps)} \n  >\n    // ...children\n  </Editor>\n</StoreProvider>\n"})}),"\n",(0,s.jsxs)(e.p,{children:["整体的绑定逻辑关系如下图所示：\n",(0,s.jsx)(e.strong,{children:"Schema"})," 协议中的 ",(0,s.jsx)(e.code,{children:"componentType"})," 就是编辑器画布渲染组件向 ",(0,s.jsx)(e.code,{children:"resolver"})," 映射的凭证。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"WebFrameCanvas"})," 是一个 ",(0,s.jsx)(e.strong,{children:"Web"})," 碎片的画布，基于 ",(0,s.jsx)(e.code,{children:"@craftjs/core"})," 的 ",(0,s.jsx)(e.code,{children:"<Frame/>"})," 可以很轻松的将画布渲染到编辑器页面当中，并且在内部可以任意使用之前被插入的 ",(0,s.jsx)(e.code,{children:"resolver"})," 空间的组件，通过之前关系图中的 ",(0,s.jsx)(e.code,{children:"componentType"})," 来完成映射显示。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Frame as EditorFrame, Element } from '@craftjs/core'\n\nexport const WebFrameCanvas = () => {\n\n  const { token } = useTokens()\n  const { deviceWidth } = useStore()\n\n  return (\n    <div\n      id='__CasterViewPort__'\n      className={css({\n        background: token.colorBgContainer,\n        width: deviceWidthMap[deviceWidth],\n        height: '100%'\n      })}\n    >\n      <EditorFrame>\n        <Element canvas is={Container}\n          //... default components.\n        </Element>\n      </EditorFrame>\n    </div>\n  )\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["在之前提到过如何使用 ",(0,s.jsx)(e.code,{children:"iframe"})," 来实现应用环境的隔离，并提到了相对应的两种解决方案。通过封装好的 ",(0,s.jsx)(e.code,{children:"FrameSandbox"})," 组件来包裹 ",(0,s.jsx)(e.code,{children:"WebFrameCanvas"})," 画布的渲染。"]}),"\n",(0,s.jsxs)(e.p,{children:["如下代码所示：\n将 ",(0,s.jsx)(e.code,{children:"WebFrameCanvas"})," 传入 FrameSandbox 渲染，将当前父容器的 ",(0,s.jsx)(e.code,{children:"head"})," 也同时注入进去，以此来达到一个“影子”容器的作用。"]}),"\n",(0,s.jsxs)(e.p,{children:["搭建部署完成后的应用在真实渲染中，会提前进行资源的初始化处理，将异步和同步的资源如 ",(0,s.jsx)(e.strong,{children:"css"}),"、",(0,s.jsx)(e.strong,{children:"script"})," 等都加载进来，然后在通过",(0,s.jsx)(e.strong,{children:"Schema"}),"进行页面的渲染，避免因为上下文的缺失导致应用的错误。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import htmlParser from 'html-react-parser'\n\n<FrameSandbox className={css({\n  height: '100%',\n  width: '100%',\n  border: 'none',\n  background: '#FFF',\n})} head={htmlParser(headStr)}>\n  <div className={css({\n  boxSizing: 'border-box',\n  padding: 12,\n  height: '100vh'\n})} >\n    <WebFrameCanvas />\n  </div>\n</FrameSandbox>\n"})}),"\n",(0,s.jsx)(e.p,{children:"到了这一步，基本上就已经将整个编辑器最基本的流程打通了，整体的一个基本流程就和下面这个图来"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsx)(e.p,{children:"如下预览图所示，基本流程就已经被串通了起来。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(e.h2,{id:"属性面板",children:["属性面板",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#属性面板",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在之前物料组件的设计篇提到过，物料组件的构成分别是",(0,s.jsx)(e.strong,{children:"渲染组件"})," + ",(0,s.jsx)(e.strong,{children:"属性设置"}),"模块。因此，当用户点击画布中的组件时会发生以下几个动作："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"属性面板区域将会显示当前物料组件的属性面板；"}),"\n",(0,s.jsx)(e.li,{children:"属性面板需要呈现用户保存的属性与物料组件初始化的默认值一一相等；"}),"\n",(0,s.jsx)(e.li,{children:"属性面板切换时需要清空上一个组件设置的数据，并将当前组件的数据进行回显。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"以上这几种动作都是正常的交互链路。下面就来看看它们的基础实现原理吧。"}),"\n",(0,s.jsxs)(e.p,{children:["首先，组件第一次被选中与切换组件都会触发当前 ",(0,s.jsx)(e.code,{children:"selectedNodeId"})," 的变化，在用户点击组件时，内部会将其操作的 ",(0,s.jsx)(e.code,{children:"nodeId"})," 保存起来。在实现上述逻辑的过程中，就可以通过当前选中组件的 ",(0,s.jsx)(e.code,{children:"nodeId"})," 的变化来进行相应的操作。"]}),"\n",(0,s.jsxs)(e.p,{children:["通过 ",(0,s.jsx)(e.code,{children:"useEditor"})," 的钩子，在内部拿到了当前选中的 ",(0,s.jsx)(e.code,{children:"NodeId"}),"，通过 ",(0,s.jsx)(e.code,{children:"currentNodeId"})," 可以获取到之前挂载在物料组件上的相关属性，如属性 ",(0,s.jsx)(e.code,{children:"Props"}),"，属性设置面板组件等。如下代码所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"const { id: nodeId, currentNodeProps, actions, SettingRender } = useEditor((state) => {\n  const [currentNodeId] = state.events.selected;\n\n  if (currentNodeId) {\n    const { data, related } = state.nodes[currentNodeId];\n\n    console.log(data, 'data')\n    return {\n      id: currentNodeId,\n      currentNodeProps: data.props,\n      SettingRender: related?.settingRender\n    }\n  }\n})\n"})}),"\n",(0,s.jsx)(e.p,{children:"当通过编辑器拿到相关的内容时，就可以根据对应的逻辑来执行后续的动作。"}),"\n",(0,s.jsxs)(e.p,{children:["如下代码显示：\n当选中的 ",(0,s.jsx)(e.code,{children:"nodeId"})," 不存在时，右侧的属性面板就不展示相关的设置面板。\n当选中的 ",(0,s.jsx)(e.code,{children:"nodeId"})," 存在时，会执行以下几个动作："]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"清空当前大表单上下文中的内容；"}),"\n",(0,s.jsxs)(e.li,{children:["将当前组件的 ",(0,s.jsx)(e.code,{children:"props"}),"，也就是 ",(0,s.jsx)(e.strong,{children:"Schema"})," 协议中组件的属性进行设置，以此来保证当前设置内容的干净和一致性。这个逻辑只会在 ",(0,s.jsx)(e.code,{children:"nodeId"})," 发生改变时触发。"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"\nconst handleFormChange = (changeValues: any) => {\n\n  if (nodeId) {\n    actions.setProp(nodeId, (setterProps) => {\n      return merge(setterProps, changeValues)\n    })\n  }\n}\n\n// 当前编辑的组件发生改变，nodeId副作用更新了\nReact.useEffect(() => {\n  if (nodeId) {\n\n    /** 切换组件清除setter配置 */\n    form.resetFields()\n\n\n    /** 设置新组件内容属性配置 */\n    form.setFieldsValue({\n      ...currentNodeProps\n    })\n  }\n}, [nodeId, form])\n\nReact.useEffect(() => {\n  console.log(currentNodeProps, 'currentNodeProps')\n}, [currentNodeProps])\n\nreturn (\n  nodeId && SettingRender ? (\n    <ProForm form={form} submitter={false} onValuesChange={handleFormChange} className={css({\n      ['& .ant-pro-form-group-title']: {\n        fontWeight: 600,\n        marginBlockEnd: 12,\n        cursor: 'pointer'\n      }\n    })} >\n      <SettingRender />\n    </ProForm>\n  ) : <Card size='small' >\n    <Typography.Text type=\"secondary\" >暂无选中的编辑组件，请点击画布当中的组件后再尝试吧。</Typography.Text>\n  </Card>\n)\n"})}),"\n",(0,s.jsx)(e.p,{children:"如下图所示，这就是后面实现的大体效果:"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:["总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["本节内容时是属性编排功能的第一小节，主要的目的是带各位同学来打通可视化编辑器的流程概念，在最小化逻辑的基础上后面逐步来完善功能。借用 ",(0,s.jsx)(e.strong,{children:"craft.js"})," 的能力，可以非常简单来串联起编辑器的基础功能，对新手而言是非常友好的。"]}),"\n",(0,s.jsx)(e.p,{children:"接下来内容的核心就是在现有的编辑器基础上进行扩展，提供一个易于使用的可视化界面，支持属性配置、数据绑定、事件处理和自定义组件等内容相关的属性设置器。"}),"\n",(0,s.jsx)(e.p,{children:"在后续的章节中，有关编辑器相关的功能都会在这个基础上进行扩展，慢慢的形成一个属于自己定制化的低代码平台。"}),"\n",(0,s.jsxs)(e.h2,{id:"写在最后",children:["写在最后",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"如果你有什么疑问或者更好的建议，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function x(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}let j=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F29.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E5%B1%9E%E6%80%A7%E7%BC%96%E6%8E%92%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"组件列表",id:"组件列表",depth:2},{text:"编辑器画布",id:"编辑器画布",depth:2},{text:"属性面板",id:"属性面板",depth:2},{text:"总结",id:"总结",depth:2},{text:"写在最后",id:"写在最后",depth:2}],title:"29.客户端实战：属性编排功能实现",headingTitle:"29.客户端实战：属性编排功能实现",frontmatter:{}}}}]);