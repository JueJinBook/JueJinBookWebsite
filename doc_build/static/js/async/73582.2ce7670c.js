"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["73582"],{806759:function(n,e,r){r.r(e),r.d(e,{default:()=>p});var s=r(552676),t=r(740453);let o=r.p+"static/image/75e32c64e21d0b3949fcc376abf99cfb.cd0a8627.webp",d=r.p+"static/image/be21c314bb6df3b3aa61cd61974461c6.1a22750f.webp",i=r.p+"static/image/7614cd2db2d6a5ac34a55e8786a0e48b.91d8127f.webp",c=r.p+"static/image/95bfce1990533823682cdb530caf8ac2.a2496da4.webp",l=r.p+"static/image/c6a77a6c08d9cf02271e75e5176b30fe.6c144a79.webp",a=r.p+"static/image/961824ea2881e35006df1198975c4d1a.017243e3.webp";function h(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",img:"img",h2:"h2",ul:"ul",li:"li",code:"code",blockquote:"blockquote",pre:"pre",h3:"h3"},(0,t.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"30客户端实战属性编排功能进阶",children:["30.客户端实战：属性编排功能进阶",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#30客户端实战属性编排功能进阶",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在完成整个物料模块到编辑器画布的关系串联后，下一步就需要实现另外一个核心的功能内容，也就是针对组件配置的扩展属性面板区域。"}),"\n",(0,s.jsxs)(e.p,{children:["低代码平台的属性面板提供了丰富的功能和工具，帮助用户快速开发和部署应用程序，提高开发效率和业务响应能力。同时，通过编排，将画布中的物料组件进行布局设置、属性设置、样式设置、绑定状态等等常见的操作，最终得到一份符合业务需求的",(0,s.jsx)(e.strong,{children:"schema"}),"协议，进行保存。"]}),"\n",(0,s.jsx)(e.p,{children:"如下图所示，右侧\uD83E\uDEF1内容就是需要来实现的部分。当用户点击画布中对应组件时，右侧属性面板就会渲染当前组件的相关配置设置器，本章节的核心目标就是来打通编辑器与设置器之间的连接，完成整个低代码编辑器的基础实现。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"实现方式",children:["实现方式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现方式",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["属性面板包含的内容大体上可以分三个部分，分别是",(0,s.jsx)(e.strong,{children:"panel"}),"、",(0,s.jsx)(e.strong,{children:"setter"}),"、",(0,s.jsx)(e.strong,{children:"field"}),"。它们之间的关系是一个包容关系，一个",(0,s.jsx)(e.strong,{children:"panel"}),"可以用后多个",(0,s.jsx)(e.strong,{children:"setter"}),"，一个",(0,s.jsx)(e.strong,{children:"setter"}),"可以有一个或者",(0,s.jsx)(e.strong,{children:"多个field"}),"。"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Panel"}),": 面板区，通常组织管理相同的模块内容。如常见的字体样式设置、容器样式等相同类型设置，将其分组后绘制成一个可收缩的折叠板，方便用户更精准的找到自己想要的属性设置功能。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Setter"}),": 设置器，用于处理可视化操作数据的控件，比如常见的有",(0,s.jsx)(e.strong,{children:"Input"}),"、",(0,s.jsx)(e.strong,{children:"Select"}),"这些基础",(0,s.jsx)(e.strong,{children:"Form"}),"组件，个性化复杂一些的有",(0,s.jsx)(e.strong,{children:"请求设置器"}),"，",(0,s.jsx)(e.strong,{children:"逻辑执行设置器"}),"这些比较复杂且定制化强的设置器。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Field"}),"：绑定字段对于很多同学都不是很陌生，在可视化操作下，操作的变化最终是要存储到",(0,s.jsx)(e.code,{children:"渲染协议中去的"}),"，因此",(0,s.jsx)(e.strong,{children:"Filed"}),"的作用就是一对一绑定属性面板设置器和渲染协议的钩子，在实际使用中，它可以绑定一个符合JSON存储规范的一个数据格式。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["需要注意的是，像",(0,s.jsx)(e.strong,{children:"Funtion"}),", ",(0,s.jsx)(e.strong,{children:"Class"})," 格式无法保存在",(0,s.jsx)(e.strong,{children:"Class"}),"当中的数据类型是不支持的。在属性编排中往往需要绑定表达式、执行函数、状态等，都会将它们转换成描述协议存储到",(0,s.jsx)(e.strong,{children:"Schema"}),"当中，以便后续渲染器解析。"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"如下图所示："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"实现属性面板的方案有有很多种，总结来说就是声明协议驱动还是组件驱动的方式"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"JsonSchema"}),"：通过声明一组",(0,s.jsx)(e.strong,{children:"JsonSchema"}),"来生成表单布局。","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"优点：通过 JsonSchema 协议渲染表单，因为它定义了表单的结构和规则，使得表单生成和表单验证的过程变得简单，能够拥有更快的开发速度与可重用性。"}),"\n",(0,s.jsx)(e.li,{children:"缺点：JSON Schema 协议定义非常复杂的表单结构和规则，会增加实现和维护表单的复杂度，提高了测试难度，增加了用户的学习曲线。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"组件"}),": 通过开发setting组件来支持设置器的渲染。","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"优点：可以根据具体的需求和应用场景灵活地构建和定制表单，自由的发挥布局。其灵活性、高定制化可以适用多数复杂"}),"\n",(0,s.jsx)(e.li,{children:"缺点：开发成本高，可重用性低，容易形成很多冗余代码，需要编写大量的代码来构建和定制表单，这可能会使表单代码变得冗长和复杂。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["以上两种方案不管是哪种方式其目的都是为了生成组件编排属性的大表单，总的来说，使用 ",(0,s.jsx)(e.strong,{children:"JsonSchema"})," 可以使表单的开发更快、更容易、更可靠，从而提高开发效率和应用程序的质量。但是，对于一些非常复杂的表单结构和规则，传统的 ",(0,s.jsx)(e.strong,{children:"React"})," 组件可能更加灵活和适用。因此，需要根据具体的应用场景和需求来选择合适的开发方法。"]}),"\n",(0,s.jsxs)(e.p,{children:["对于低代码平台的开发而言，根据自身的喜好选择两种方案其中之一即可。社区当中",(0,s.jsx)(e.strong,{children:"JsonSchema"}),"优质的中后台表单的解决方案有不少，感兴趣的同学可以尝试下",(0,s.jsx)(e.a,{href:"https://xrender.fun/",target:"_blank",rel:"noopener noreferrer",children:"XRenderForm"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["如下图所示，是一个基于",(0,s.jsx)(e.strong,{children:"antd Form"}),"组件构建的相关数据流转的过程图，也就是后续需要实现的一个过程。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"创建物料",children:["创建物料",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#创建物料",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["属性编排与物料是绑定的，在之前设计篇中也提到过。在物料的目录下新增",(0,s.jsx)(e.strong,{children:"settings.tsx"}),"组件，它是一个表单组件，使用",(0,s.jsx)(e.strong,{children:"Form"}),"组件构建。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Diff",children:"title\n+  view.ts\n+  settings.ts\n+  index.ts\n"})}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.strong,{children:"settings.tsx"}),"填充简单的设置属性，比如标题组件需要设置",(0,s.jsx)(e.strong,{children:"h1～h5"}),"的大小设置，那么就可以实现一个",(0,s.jsx)(e.strong,{children:"HeaderSetter"}),"或者是",(0,s.jsx)(e.strong,{children:"Segmented分段控制器"}),"来完成。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { ProForm } from "@ant-design/pro-components"\nimport { HeaderSetter } from \'@lgnition-lowcode/setter\'\n\nexport default () => {\n  return (\n    <>\n      <ProForm.Group title="标题"  collapsible >\n        <HeaderSetter name="level" label="标题等级" />\n      </ProForm.Group>\n    </>\n  )\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["创建好对应的",(0,s.jsx)(e.strong,{children:"settings"}),"后，在",(0,s.jsx)(e.strong,{children:"index.ts"}),"中引入并挂载到组件",(0,s.jsx)(e.strong,{children:"related.settingRender"}),"下面提供给编辑器进行渲染。",(0,s.jsx)(e.strong,{children:"settingsSchema"}),"是协议声明方式，",(0,s.jsx)(e.strong,{children:"settingRender"}),"是组件方式，两者是通过",(0,s.jsx)(e.strong,{children:"antd Form"}),"来实现的，都可以触发",(0,s.jsx)(e.strong,{children:"onValuesChange"}),"和",(0,s.jsx)(e.strong,{children:"onFinish"}),"方法，可以选择不同的方式来渲染属性面板。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Diff",children:"import type * as React from 'react'\nimport { createReactMaterial, withMaterialNode } from '@lgnition-lowcode/core'\n+ import TitleSettings from './settings'\nimport { Typography } from 'antd'\n\nexport const Title = createReactMaterial(withMaterialNode<React.ComponentProps<typeof Typography.Title>>(Typography.Title), {\n  displayName: '标题',\n+  related: {\n+    settingsSchema: null,\n+    settingRender: TitleSettings\n+  }\n})\n\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"渲染属性面板",children:["渲染属性面板",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#渲染属性面板",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["如下图所示",(0,s.jsx)(e.strong,{children:"right目录"}),"当中存放了属性面板相关的代码。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"获取组件状态",children:["获取组件状态",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#获取组件状态",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["创建一个",(0,s.jsx)(e.strong,{children:"RenderSettings"}),"组件来负责选中时渲染创建物料时挂载的",(0,s.jsx)(e.strong,{children:"settingRender"}),"。接下来就需要来完成上一篇中剩下的流程链路，当用户点击组件时渲染属性面板，编排完成后保存。且切换组件时保存状态，再一次选中时需要在属性编辑器中展示最新的属性状态。"]}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["首先需要获取当前选中的组件，在之前章节中有提到过，通过 ",(0,s.jsx)(e.strong,{children:"@craftjs/core"})," 的 ",(0,s.jsx)(e.strong,{children:"usEditor"})," 可以拿到编辑器当前的状态，",(0,s.jsx)(e.strong,{children:"state.events.selected"})," 就是当前编辑器选中的组件Id列表，它是一个",(0,s.jsx)(e.strong,{children:"Set"}),"数据结构，使用解构的方案将当前选中组件的id获取到，也就是代码中的",(0,s.jsx)(e.strong,{children:"currentNodeId"}),"。通过",(0,s.jsx)(e.strong,{children:"currentNodeId"}),"可以从",(0,s.jsx)(e.strong,{children:"state.nodes"}),"节点中获取到物料节点的信息，比如组件的",(0,s.jsx)(e.strong,{children:"props"}),"，挂载的",(0,s.jsx)(e.strong,{children:"settingRender"}),"属性面板等等。获取到需要的内容后，直接",(0,s.jsx)(e.strong,{children:"return"}),"出去，方便后续渲染。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"const { \n  id: nodeId, \n  currentNodeProps, \n  actions, \n  SettingRender \n} = useEditor((state) => {\n  const [currentNodeId] = state.events.selected;\n\n  if (currentNodeId) {\n    const { data, related } = state.nodes[currentNodeId];\n    return {\n      id: currentNodeId,\n      currentNodeProps: data.props,\n      SettingRender: related?.settingRender\n    }\n  }\n\n})\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"渲染属性面板-1",children:["渲染属性面板",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#渲染属性面板-1",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["通过",(0,s.jsx)(e.strong,{children:"useEditor"}),"拿到了当前选中的组件",(0,s.jsx)(e.strong,{children:"id"}),"，",(0,s.jsx)(e.strong,{children:"props"}),"，属性面板后，下一步就是将其渲染到页面当中。"]}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["当",(0,s.jsx)(e.strong,{children:"nodeId"}),"和",(0,s.jsx)(e.strong,{children:"SettingRender"}),"存在的时候，就表示页面中存在选中的物料组件，此时就需要将",(0,s.jsx)(e.strong,{children:"SettingRender"}),"放入到",(0,s.jsx)(e.strong,{children:"Form"}),"当中进行渲染。反之则提示用户没有选中组件。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"nodeId && SettingRender ? (\n      <ProForm\n        form={form}\n        submitter={false}\n        onValuesChange={handleFormChange}\n        onFinish={handleFormChange}\n        className={css({\n          ['& .ant-pro-form-group-title']: {\n            fontWeight: 600,\n            marginBlockEnd: 12,\n            cursor: 'pointer'\n          }\n        })} >\n        <SettingRender />\n      </ProForm>\n    ) : <Card size='small' >\n      <Typography.Text type=\"secondary\" >暂无选中的编辑组件，请点击画布当中的组件后再尝试吧。</Typography.Text>\n    </Card>\n"})}),"\n",(0,s.jsx)(e.p,{children:"如下图所示，组件属性面板就正常渲染到指定的区域了。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"状态绑定",children:["状态绑定",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#状态绑定",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"当属性面板渲染结束后，这个时候切换表单内的属性是没有任何效果的，因为编辑器的状态与表单的状态还没有进行关联的流程，也就是下图红框中的步骤。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["要实现编辑器状态和表单的关联，首先是在",(0,s.jsx)(e.strong,{children:"Form"}),"组件上绑定",(0,s.jsx)(e.strong,{children:"onValuesChange"}),"和",(0,s.jsx)(e.strong,{children:"onFinish"}),"这两个方法的处理函数，当表单值发生变化或者是提交表单时都会触发两个方法。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Diff",children:"<ProForm\n        form={form}\n        submitter={false}\n+       onValuesChange={handleFormChange}\n+       onFinish={handleFormChange} >\n        <SettingRender />\n</ProForm>\n"})}),"\n",(0,s.jsxs)(e.p,{children:["接下来就是实现",(0,s.jsx)(e.strong,{children:"handleFormChange"}),"方法，当方法触发的时候如果",(0,s.jsx)(e.strong,{children:"nodeId"}),"存在，那么就需要将当前",(0,s.jsx)(e.strong,{children:"props"}),"和修改的表单值进行合并，这里最好是一次深拷贝的过程，否则很容易发生数据改变但是引用不变的问题，导致页面更新显示不对的情况。因此，可以使用",(0,s.jsx)(e.strong,{children:"lodash"}),"当中的",(0,s.jsx)(e.strong,{children:"merge"}),"方法来进行合并。最后将其通过",(0,s.jsx)(e.strong,{children:"actions.setProp"}),"方法设置到编辑器当中。"]}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"const handleFormChange = async (vals: any) => {\n  if (nodeId) {\n    actions.setProp(nodeId, (setterProps) => {\n      return lodash.merge(setterProps, vals)\n    })\n  }\n  return true\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"到了这一步就完成了属性编排表单内容发生改变时与编辑器的串联，但是它还并不算成功。细心的同学会发现，当切换组件后，之前设置的属性并没有被清空掉，而是进行了保留带到了另外一个组件的显示上。那么如何才能避免此类问题发生呢？下面就是整个切换组件时属性面板的渲染逻辑了"}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["通过",(0,s.jsx)(e.strong,{children:"React.useEffect"}),"的",(0,s.jsx)(e.strong,{children:"depends"}),"依赖可以判断得出",(0,s.jsx)(e.strong,{children:"nodeId"}),"是否发生变化，一旦",(0,s.jsx)(e.strong,{children:"nodeId"}),"发生变化就表示用户发生了组件切换得场景，此时就需要通过",(0,s.jsx)(e.strong,{children:"form.resetFields"}),"方法先清空表单的数据，然后将切换最新的组件属性通过",(0,s.jsx)(e.strong,{children:"form.setFieldsValue"}),"将其设置进表单当中，完成编辑器与表单状态之间的绑定。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:" // 当前编辑的组件发生改变，nodeId副作用更新了\n  React.useEffect(() => {\n    if (nodeId) {\n\n      /** 切换组件清除setter配置 */\n      form.resetFields()\n\n\n      /** 设置新组件内容属性配置 */\n      form.setFieldsValue(currentNodeProps)\n    }\n  }, [nodeId])\n\n"})}),"\n",(0,s.jsx)(e.p,{children:"最后，就实现了比编辑器与属性编排工作的相关逻辑闭环。"}),"\n",(0,s.jsxs)(e.h2,{id:"自定义控件",children:["自定义控件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义控件",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在很多时候，基本的表单设置器很难满足复杂属性编排的需求。往往需要实现更为复杂的设置器。借用Form组件的自定义表单控件的方式来完成定制化需求。只要该组件遵循以下的约定，"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["提供受控属性\xa0",(0,s.jsx)(e.strong,{children:"value"}),"\xa0或其它与\xa0",(0,s.jsx)(e.a,{href:"https://ant.design/components/form-cn/#formitem",target:"_blank",rel:"noopener noreferrer",children:"valuePropName"}),"\xa0的值同名的属性。"]}),"\n",(0,s.jsxs)(e.li,{children:["提供 ",(0,s.jsx)(e.strong,{children:"onChange"})," 事件或\xa0",(0,s.jsx)(e.a,{href:"https://ant.design/components/form-cn/#formitem",target:"_blank",rel:"noopener noreferrer",children:"trigger"}),"\xa0的值同名的事件。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["相关文档事例",(0,s.jsx)(e.a,{href:"https://ant.design/components/form-cn#components-form-demo-customized-form-controls",target:"_blank",rel:"noopener noreferrer",children:"https://ant.design/components/form-cn#components-form-demo-customized-form-controls"})]}),"\n",(0,s.jsxs)(e.p,{children:["在工程目录 ",(0,s.jsx)(e.strong,{children:"packages"})," 下，单独将 ",(0,s.jsx)(e.strong,{children:"setter"})," 拆分出来单独维护，",(0,s.jsx)(e.strong,{children:"setter"}),"内部会提供各种各样的自定义表单控件，因此它也可以被称为自定义表单的集合，不仅仅可以提供给低代码平台属性面板使用，也可以在任何使用",(0,s.jsx)(e.strong,{children:"antd Form"}),"组件中进行运用。"]}),"\n",(0,s.jsx)(e.p,{children:"具体实现如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["先定义好自定义设置器表单控件的类型，分别将",(0,s.jsx)(e.strong,{children:"value"}),"和",(0,s.jsx)(e.strong,{children:"onChange"}),"的类型进行定义。方便后续在使用过程中能够有明确的类型提示。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"export interface CustomFieldFormItemProps<T = any> {\n  value?: T;\n  onChange?: (value: T) => void;\n  id: string;\n}\n\n"})}),"\n",(0,s.jsxs)(e.p,{children:["以一个简单的颜色选择器为例，在",(0,s.jsx)(e.strong,{children:"React"}),"官方没有推出",(0,s.jsx)(e.strong,{children:"ColorPicker组"}),"件支持的时候，往往都需要业务同学自己通过",(0,s.jsx)(e.strong,{children:"react-colorful"}),"或者是其他的类库来封装一个通用的颜色选择器来支持这个功能。"]}),"\n",(0,s.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(e.p,{children:["整个",(0,s.jsx)(e.strong,{children:"ColorPicker"}),"会接收 ",(0,s.jsx)(e.strong,{children:"CustomFieldFormItemProps"})," 的参数，也就是之前自定义表单控件的类型。此时在内部就可以定义相关的业务逻辑，比如点击色块和输入框的时候会创建一个",(0,s.jsx)(e.strong,{children:"Popover"}),"来展示",(0,s.jsx)(e.strong,{children:"react-colorful"}),"的面板，用户发生颜色修改的操作后，触发",(0,s.jsx)(e.strong,{children:"props.onChange"}),"方法将变更的值进行修改，更新完成后",(0,s.jsx)(e.strong,{children:"props.value"}),"的内容也会相应的更新。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { HexColorPicker } from "react-colorful";\nimport { CustomSetterFormItemProps } from "@/global";\nimport { Popover, Button, Space, theme, Typography, Tag, Input, message } from "antd";\nimport { css } from "@emotion/css";\n\nconst { useToken } = theme;\n\nconst styles = {\n  content: css({\n    width: 200,\n  }),\n  tag: css({\n    background: "red",\n    width: 30,\n    height: 30,\n    borderRadius: 4,\n  }),\n};\n\nconst defaultColors = [\n  "#ff6900",\n  "#fcb900",\n  "#7bdcb5",\n  "#00d084",\n  "#0693e3",\n  "#abb8c3",\n  "#555555",\n  "#9900ef",\n  "#f78da7",\n  "#795548",\n];\n\nexport interface ColorPickerProps<T> extends CustomFieldFormItemProps<T> {}\n\nexport const ColorPicker = (props: ColorPickerProps<string>) => {\n  const { token } = useToken();\n\n  const handleColorPickerValueChange = (v: string) => {\n\n    if ( props.onChange) {\n      props.onChange(v)\n    }\n  };\n\n  return (\n    <Space>\n      <Popover\n        title={props.value}\n        placement="bottom"\n        trigger="click"\n        content={\n          <Space className={styles.content} direction="vertical">\n            <HexColorPicker\n              color={props.value}\n              onChange={handleColorPickerValueChange}\n            />\n            <Space\n              style={{\n                width: "100%",\n              }}\n              wrap\n              size={[12, 12]}\n            >\n              {defaultColors.map((color) => (\n                <div\n                  key={color}\n                  style={{\n                    background: color,\n                    boxShadow:\n                      props.value === color ? token.boxShadowSecondary : undefined,\n                  }}\n                  className={styles.tag}\n                  onClick={() => handleColorPickerValueChange(color)}\n                />\n              ))}\n            </Space>\n          </Space>\n        }\n      >\n        <Space>\n          <Button type="primary">选择颜色</Button>\n        </Space>\n      </Popover>\n      {props.value ? (\n        <Input\n          maxLength={6}\n          min={6}\n          prefix={<Tag color={props.value}>HEX(#)</Tag>}\n          value={props.value.replace("#", "")}\n          onChange={(e: any) => handleColorPickerValueChange("#" + e.target.value)}\n        />\n      ) : null}\n    </Space>\n  );\n};\n\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:["总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"到此为止，整个编辑器的核心模块就已经实现完成了，从物料的创建到画布的渲染，最后是属性编排，整个流程已经完成了相应的节点串联。后续的工作就是扩展相应的组件设置器和自定义的表单控件来提供更全面的编排体验。当完成编排的操作后，就可以将月面整份协议保存到数据库远程存储当中进行贮藏，下次进入页面后依旧可以还原上一次编辑的内容状态。"}),"\n",(0,s.jsxs)(e.h2,{id:"资源",children:["资源",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#资源",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"文章中提到的一些内容资源文档地址。"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://ant.design/components/form-cn#components-form-demo-customized-form-controls",target:"_blank",rel:"noopener noreferrer",children:"https://ant.design/components/form-cn#components-form-demo-customized-form-controls"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://xrender.fun/form-render",target:"_blank",rel:"noopener noreferrer",children:"https://xrender.fun/form-render"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/Ignition-Space/Ignition-web",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/Ignition-Space/Ignition-web"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://craft.js.org/docs/api/useEditor",target:"_blank",rel:"noopener noreferrer",children:"https://craft.js.org/docs/api/useEditor"})}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"写在最后",children:["写在最后",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"如果你有什么疑问或者更好的建议，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function x(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}let p=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F30.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E5%B1%9E%E6%80%A7%E7%BC%96%E6%8E%92%E5%8A%9F%E8%83%BD%E8%BF%9B%E9%98%B6.md"]={toc:[{text:"实现方式",id:"实现方式",depth:2},{text:"创建物料",id:"创建物料",depth:2},{text:"渲染属性面板",id:"渲染属性面板",depth:2},{text:"获取组件状态",id:"获取组件状态",depth:3},{text:"渲染属性面板",id:"渲染属性面板-1",depth:3},{text:"状态绑定",id:"状态绑定",depth:3},{text:"自定义控件",id:"自定义控件",depth:2},{text:"总结",id:"总结",depth:2},{text:"资源",id:"资源",depth:2},{text:"写在最后",id:"写在最后",depth:2}],title:"30.客户端实战：属性编排功能进阶",headingTitle:"30.客户端实战：属性编排功能进阶",frontmatter:{}}}}]);