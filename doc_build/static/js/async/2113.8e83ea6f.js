"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["2113"],{80962:function(e,n,s){s.r(n),s.d(n,{default:()=>k});var r=s(552676),c=s(740453);let a=s.p+"static/image/e6b645bf71db73fdced6c2751856cc62.29887ba0.webp",l=s.p+"static/image/92671e7282af3c6a9fb6579955bce4b3.7c9f4c60.webp",i=s.p+"static/image/b466bf6de1f5ce47441de431cd8a0e64.06a353d8.webp",d=s.p+"static/image/a2bcf6c7b36d87561380f18d892cf0ad.88990cf0.webp",h=s.p+"static/image/dd7c38f015a34cf6010e64b9a5c2ad52.752bbf74.webp",t=s.p+"static/image/615a43f9827305a6c7945c045c610b1d.40b951d5.webp",p=s.p+"static/image/0929ea4bef5a0b4cd6de4612be974872.a3f0475c.webp",o=s.p+"static/image/ec1129bfeb829a272f9d5c746727e300.034865cf.webp",j=s.p+"static/image/be41c7b9a1d90b2ec8113e9f37c1f542.91987091.webp",x=s.p+"static/image/9bfa74629fa5ac7bef59a10726789ebf.3ddc1e6a.webp";function b(e){let n=Object.assign({p:"p",h2:"h2",a:"a",ol:"ol",li:"li",ul:"ul",strong:"strong",code:"code",pre:"pre",img:"img",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Webpack 最大的优势在于它的功能非常强大、全面，加之繁荣活跃的组件生态，已经足够应对几乎所有 Web 构建需求，包括：SPA、MPA、SSR、桌面应用、Node 程序、WebAssemsbly、PWA、微前端等等，所以即使在近几年工程化领域异军突起、百花齐放的背景下，Webpack 也依然能保持老大哥的位置。"}),"\n",(0,r.jsx)(n.p,{children:"但软件世界没有银弹！Webpack 在大型项目中通常性能表现不佳，这一方面是因为 JavaScript 语言的单线程架构决定了 Webpack 的运算效率就不可能很高；另一方面则是因为在大型项目中，Webpack 通常需要借助许多组件（插件、Loader）完成大量的文件读写、代码编译操作。"}),"\n",(0,r.jsx)(n.p,{children:"幸运的是，站在开发者视角，我们有许多行之有效的性能优化方法，包括缓存、并发、优化文件处理步骤等，但在着手优化之前，有必要先简单了解一下 Webpack 打包的核心流程；了解哪些步骤比较耗时，可能会造成性能卡点；以及，如何借助一些可视化工具分析 Webpack 的编译性能。"}),"\n",(0,r.jsxs)(n.h2,{id:"核心流程",children:["核心流程",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心流程",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Webpack 最最核心的功能，一是使用适当 Loader 将任意类型文件转译为 JavaScript 代码，例如将 CSS 代码转译为 JS 字符串，将多媒体文件转译为 Base64 代码等；二是将这些经过 Loader 处理的文件资源合并、打包成向下兼容的产物文件。"}),"\n",(0,r.jsx)(n.p,{children:"为了实现这些功能，Webpack 底层的工作流程大致可以总结为这么几个阶段："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["初始化阶段：","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"初始化参数"}),"：从配置文件、 配置对象、Shell 参数中读取，与默认配置结合得出最终的参数；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"创建编译器对象"}),"：用上一步得到的参数创建 Compiler 对象；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"初始化编译环境"}),"：包括注入内置插件、注册各种模块工厂、初始化 RuleSet 集合、加载配置的插件等；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"开始编译"}),"：执行 compiler 对象的 run 方法，创建 Compilation 对象；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"确定入口"}),"：根据配置中的 ",(0,r.jsx)(n.code,{children:"entry"})," 找出所有的入口文件，调用 ",(0,r.jsx)(n.code,{children:"compilation.addEntry"})," 将入口文件转换为 ",(0,r.jsx)(n.code,{children:"dependence"})," 对象。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["构建阶段：","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"编译模块(make)"}),"：从 ",(0,r.jsx)(n.code,{children:"entry"})," 文件开始，调用 ",(0,r.jsx)(n.code,{children:"loader"})," 将模块转译为标准 JS 内容，调用 JS 解析器将内容转换为 AST 对象，从中找出该模块依赖的模块，再 ",(0,r.jsx)(n.strong,{children:"递归"})," 处理这些依赖模块，直到所有入口依赖的文件都经过了本步骤的处理；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"完成模块编译"}),"：上一步递归处理所有能触达到的模块后，得到了每个模块被翻译后的内容以及它们之间的",(0,r.jsx)(n.code,{children:"依赖关系图"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["封装阶段：","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["合并(",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"seal"})}),")"]}),"：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 ",(0,r.jsx)(n.code,{children:"Chunk"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"优化(optimization)"}),"：对上述 ",(0,r.jsx)(n.code,{children:"Chunk"})," 施加一系列优化操作，包括：tree-shaking、terser、scope-hoisting、压缩、Code Split 等；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"写入文件系统(emitAssets)"}),"：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"在这个过程中有不少可能造成性能问题的地方："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["构建阶段：","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["首先需要将文件的相对引用路径转换为绝对路径，这个过程可能涉及多次 IO 操作，执行效率取决于 ",(0,r.jsx)(n.strong,{children:"文件层次深度"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:["找到具体文件后，需要读入文件内容并调用 ",(0,r.jsx)(n.a,{href:"https://github1s.com/webpack/loader-runner/blob/HEAD/lib/LoaderRunner.js",target:"_blank",rel:"noopener noreferrer",children:"loader-runner"})," 遍历 Loader 数组完成内容转译，这个过程需要执行较密集的 CPU 操作，执行效率取决于 ",(0,r.jsx)(n.strong,{children:"Loader 的数量与复杂度"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:["需要将模块内容解析为 AST 结构，并遍历 AST 找出模块的依赖资源，这个过程同样需要较密集的 CPU 操作，执行效率取决于 ",(0,r.jsx)(n.strong,{children:"代码复杂度"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:["递归处理依赖资源，执行效率取决于 ",(0,r.jsx)(n.strong,{children:"模块数量"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["封装阶段：","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["根据 ",(0,r.jsx)(n.code,{children:"splitChunks"})," 配置、",(0,r.jsx)(n.code,{children:"entry"})," 配置、动态模块引用语句等，确定模块与 Chunk 的映射关系，其中 ",(0,r.jsx)(n.code,{children:"splitChunks"})," 相关的分包算法非常复杂，涉及大量 CPU 计算；"]}),"\n",(0,r.jsxs)(n.li,{children:["根据 ",(0,r.jsx)(n.code,{children:"optimization"})," 配置执行一系列产物优化操作，特别是 ",(0,r.jsx)(n.a,{href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"Terser"})," 插件需要执行大量 AST 相关的运算，执行效率取决于 ",(0,r.jsx)(n.strong,{children:"产物代码量"}),"；"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"等等。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"可以看出，Webpack 需要执行非常密集的 IO 与 CPU 操作，计算成本高，再加上 Webpack 以及大多数组件都使用 JavaScript 编写，无法充分利用多核 CPU 能力，所以在中大型项性能通常表现较差。"}),"\n",(0,r.jsx)(n.p,{children:"不过，这些性能问题是可以被优化的！"}),"\n",(0,r.jsxs)(n.h2,{id:"性能分析",children:["性能分析",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#性能分析",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"有许多被反复实践、行之有效的构建性能优化手段，包括并行编译、缓存、缩小资源搜索范围等等，但在介绍这些具体的优化方法之前，有必要先聊聊：如何收集、分析 Webpack 打包过程的性能数据。"}),"\n",(0,r.jsxs)(n.p,{children:["收集数据的方法很简单 —— Webpack 内置了 ",(0,r.jsx)(n.a,{href:"https://webpack.js.org/api/stats/",target:"_blank",rel:"noopener noreferrer",children:"stats"})," 接口，专门用于统计模块构建耗时、模块依赖关系等信息，推荐用法："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["添加 ",(0,r.jsx)(n.code,{children:"profile = true"})," 配置："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// webpack.config.js\nmodule.exports = {\n  // ...\n  profile: true\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["运行编译命令，并添加 ",(0,r.jsx)(n.code,{children:"--json"})," 参数，参数值为最终生成的统计文件名，如："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx webpack --json=stats.json\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上述命令执行完毕后，会在文件夹下生成 ",(0,r.jsx)(n.code,{children:"stats.json"})," 文件，内容大致如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "hash": "2c0b66247db00e494ab8",\n  "version": "5.36.1",\n  "time": 81,\n  "builtAt": 1620401092814,\n  "publicPath": "",\n  "outputPath": "/Users/tecvan/learn-webpack/hello-world/dist",\n  "assetsByChunkName": { "main": ["index.js"] },\n  "assets": [\n    // ...\n  ],\n  "chunks": [\n    // ...\n  ],\n  "modules": [\n    // ...\n  ],\n  "entrypoints": {\n    // ...\n  },\n  "namedChunkGroups": {\n    // ...\n  },\n  "errors": [\n    // ...\n  ],\n  "errorsCount": 0,\n  "warnings": [\n    // ...\n  ],\n  "warningsCount": 0,\n  "children": [\n    // ...\n  ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"stats"})," 对象收集了 Webpack 运行过程中许多值得关注的信息，包括："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"modules"}),"：本次打包处理的所有模块列表，内容包含模块的大小、所属 ",(0,r.jsx)(n.code,{children:"chunk"}),"、构建原因、依赖模块等，特别是 ",(0,r.jsx)(n.code,{children:"modules.profile"})," 属性，包含了构建该模块时，解析路径、编译、打包、子模块打包等各个环节所花费的时间，非常有用；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"chunks"}),"：构建过程生成的 ",(0,r.jsx)(n.code,{children:"chunks"})," 列表，数组内容包含 ",(0,r.jsx)(n.code,{children:"chunk"})," 名称、大小、包含了哪些模块等；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"assets"}),"：编译后最终输出的产物列表、文件路径、文件大小等；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"entrypoints"}),"：entry 列表，包括动态引入所生产的 entry 项也会包含在这里面；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"children"}),"：子 Compiler 对象的性能数据，例如 ",(0,r.jsx)(n.code,{children:"extract-css-chunk-plugin"})," 插件内部就会调用 ",(0,r.jsx)(n.a,{href:"https://github1s.com/faceyspacey/extract-css-chunks-webpack-plugin/blob/HEAD/src/loader.js#L82",target:"_blank",rel:"noopener noreferrer",children:"compilation.createChildCompiler"})," 函数创建出子 Compiler 来做 CSS 抽取的工作。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["篇幅有限，这里不展开介绍每个节点的具体内容，有需要的同学可以查阅 Webpack 官网的 ",(0,r.jsx)(n.a,{href:"https://webpack.js.org/api/stats/",target:"_blank",rel:"noopener noreferrer",children:"stats"})," 介绍文档，或到小册代码仓库查看",(0,r.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/HEAD/stats-with-profile/stats.json",target:"_blank",rel:"noopener noreferrer",children:"示例"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"我们可以从这些数据中分析出模块之间的依赖关系、体积占比、编译构建耗时等，Webpack 社区还提供了许多优秀的分析工具，能够将这些数据转换各种风格的可视化图表，帮助我们更高效地找出性能卡点，包括："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://webpack.github.io/analyse/",target:"_blank",rel:"noopener noreferrer",children:"Webpack Analysis"})," ：Webpack 官方提供的，功能比较全面的 ",(0,r.jsx)(n.code,{children:"stats"})," 可视化工具；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/statoscope/statoscope",target:"_blank",rel:"noopener noreferrer",children:"Statoscope"}),"：主要侧重于模块与模块、模块与 chunk、chunk 与 chunk 等，实体之间的关系分析；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://chrisbateman.github.io/webpack-visualizer/",target:"_blank",rel:"noopener noreferrer",children:"Webpack Visualizer"}),"：一个简单的模块体积分析工具，真的很简单！"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer",children:"Webpack Bundle Analyzer"}),"：应该是使用率最高的性能分析工具之一，主要实现以 Tree Map 方式展示各个模块的体积占比；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/webpack-dashboard",target:"_blank",rel:"noopener noreferrer",children:"Webpack Dashboard"}),"：能够在编译过程实时展示编译进度、模块分布、产物信息等；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/unused-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"Unused Webpack Plugin"}),"：能够根据 ",(0,r.jsx)(n.code,{children:"stats"})," 数据反向查找项目中未被使用的文件。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"webpack-analysis",children:["Webpack Analysis",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-analysis",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://webpack.github.io/analyse/",target:"_blank",rel:"noopener noreferrer",children:"Webpack Analysis"})," 是 webpack 官方提供的可视化分析工具，相比于其它工具，它提供的视图更全，功能更强大，能够通过创建依赖关系图对你的包进行更彻底的检查。"]}),"\n",(0,r.jsxs)(n.p,{children:["使用上只需要将上一节 ",(0,r.jsx)(n.code,{children:"webpack --json=stats.json"})," 命令生成的 ",(0,r.jsx)(n.code,{children:"stats.json"})," 文件导入页面，就可以看到一些关键统计信息："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["点击页面中的 ",(0,r.jsx)(n.code,{children:"modules/chunks/assets"})," 按钮，页面会渲染出对应实体的依赖关系图，例如："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["除 ",(0,r.jsx)(n.code,{children:"modules/chunks/assets"})," 外，右上方菜单栏 ",(0,r.jsx)(n.strong,{children:"Hints"})," 还可以查看构建过程各阶段、各模块的处理耗时，可以用于对比分析各个阶段的性能情况："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：不过，实测发现 ",(0,r.jsx)(n.strong,{children:"Hints"})," 还不支持 webpack 5 版本的 ",(0,r.jsx)(n.code,{children:"stats"})," 数据，等待官方更新吧。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://webpack.github.io/analyse/",target:"_blank",rel:"noopener noreferrer",children:"Webpack Analysis"})," 提供了非常齐全的分析视角，信息几乎没有失真，但上手难度稍高，信息噪音比较多，所以社区还提供了一个简化版 ",(0,r.jsx)(n.a,{href:"https://mshustov.github.io/webpack-deps-tree/static/",target:"_blank",rel:"noopener noreferrer",children:"webpack-deps-tree"}),"，功能相似但用法更简单、信息更简洁，大家可以根据实际需要交叉使用。"]}),"\n",(0,r.jsxs)(n.h2,{id:"statoscope",children:["Statoscope",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#statoscope",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/statoscope/statoscope",target:"_blank",rel:"noopener noreferrer",children:"Statoscope"})," 也是一个非常强大的可视化分析工具，主要提供如下功能："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"完整的依赖关系视图，涵盖 modules/chunks/assets/entrypoints/packages 维度；"}),"\n",(0,r.jsx)(n.li,{children:"entrypoints/chunks/packages/module 体积分析；"}),"\n",(0,r.jsx)(n.li,{children:"重复包检测；"}),"\n",(0,r.jsxs)(n.li,{children:["多份 ",(0,r.jsx)(n.code,{children:"stats"})," 数据对比；"]}),"\n",(0,r.jsx)(n.li,{children:"等等。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["有两种用法，一是将 ",(0,r.jsx)(n.code,{children:"stats"})," 数据导入到 ",(0,r.jsx)(n.a,{href:"https://github.com/statoscope/statoscope",target:"_blank",rel:"noopener noreferrer",children:"Statoscope"})," 在线页面；二是使用 ",(0,r.jsx)(n.code,{children:"@statoscope/webpack-plugin"})," 插件，用法："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"安装依赖："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"yarn add -D @statoscope/webpack-plugin\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"注册插件："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const StatoscopeWebpackPlugin = require('@statoscope/webpack-plugin').default;\n\nmodule.exports = {\n  ...\n  plugins: [new StatoscopeWebpackPlugin()],\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["之后，运行 ",(0,r.jsx)(n.code,{children:"npx webpack"})," 命令，编译结束后默认打开分析视图："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，Statoscope 提供了多种维度的统计信息，包括：Chunk 数量、模块总数、重复模块树、编译耗时、Initial Chunk 体积等；更重要的是，Statoscope 还展示了模块与模块、Chunk、Entry 等维度的依赖关系："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"我们可以据此推断出模块体积、为何需要打包该模块、有哪些模块被重复引用等信息。"}),"\n",(0,r.jsxs)(n.h2,{id:"webpack-bundle-analyzer",children:["Webpack Bundle Analyzer",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-bundle-analyzer",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer",children:"Webpack-bundle-analyzer"})," 是一个非常有名的性能分析插件，只需要一些简单配置就可以在 Webpack 构建结束后生成 Tree Map 形态的模块分布统计图，用户可以通过对比 Tree Map 内容推断各模块的体积占比，是否包含重复模块、不必要的模块等，用法："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"安装模块依赖："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"yarn add -D webpack-bundle-analyzer\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"添加插件："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const BundleAnalyzerPlugin = require("webpack-bundle-analyzer")\n  .BundleAnalyzerPlugin;\n\nmodule.exports = {\n  ...\n  plugins: [new BundleAnalyzerPlugin()],\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"编译结束后，默认自动打开本地视图页面："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["也可以直接用 Webpack-bundle-analyzer 命令直接打开 ",(0,r.jsx)(n.code,{children:"stats"})," 文件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx webpack-bundle-analyzer ./stats.json\n"})}),"\n",(0,r.jsx)(n.p,{children:"基于 Webpack Bundle Analyzer 提供的视图，我们可以分析出："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Bundle 包所包含的模块内容 —— 从而推断出产物中是否包含预期之外的模块；"}),"\n",(0,r.jsx)(n.li,{children:"确定模块体积大小与占比 —— 从而确定是否存在优化空间；"}),"\n",(0,r.jsx)(n.li,{children:"了解 Bundle 产物体积，以及经过压缩后的体积。"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：\n",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/webpack-bundle-size-analyzer",target:"_blank",rel:"noopener noreferrer",children:"webpack-bundle-size-analyzer"}),"、",(0,r.jsx)(n.a,{href:"https://github.com/danvk/source-map-explorer%20",target:"_blank",rel:"noopener noreferrer",children:"source-map-explorer"})," 等工具也实现了类似功能，但分别适用于不同场景，建议你也了解一下相关用法，择优选用。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"webpack-visualizer",children:["Webpack Visualizer",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-visualizer",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://chrisbateman.github.io/webpack-visualizer/",target:"_blank",rel:"noopener noreferrer",children:"Webpack Visualizer"})," 是一个在线分析工具，可用于检测、可视化 Webpack 产物的构成模块。有两种用法，一是将 ",(0,r.jsx)(n.code,{children:"stats.json"})," 文件上传到在线 ",(0,r.jsx)(n.a,{href:"https://chrisbateman.github.io/webpack-visualizer/",target:"_blank",rel:"noopener noreferrer",children:"页面"}),"；二是使用 ",(0,r.jsx)(n.code,{children:"webpack-visualizer-plugin"})," 生成统计页面，用法："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"安装依赖："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"yarn add —D webpack-visualizer-plugin\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"添加插件："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// webpack.config.js\nconst VisualizerPlugin = require('webpack-visualizer-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new Visualizer({\n      filename: './stats.html'\n    })\n  ],\n}\n//...\n"})}),"\n",(0,r.jsx)(n.p,{children:"两种方式最终都可以生成如下视图："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：很遗憾，实测发现 ",(0,r.jsx)(n.a,{href:"https://github.com/chrisbateman/webpack-visualizer#plugin-usage",target:"_blank",rel:"noopener noreferrer",children:"webpack-visualizer-plugin"})," 插件年久失修，只兼容 webpack 1.x ，所以现在几乎没有使用价值了。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["此外，在线工具 ",(0,r.jsx)(n.a,{href:"https://alexkuz.github.io/webpack-chart/",target:"_blank",rel:"noopener noreferrer",children:"Webpack Chart"})," 也提供了类似的功能，功能重合度很高，这里就不展开讲了。"]}),"\n",(0,r.jsxs)(n.h2,{id:"webpack-dashboard",children:["Webpack Dashboard",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-dashboard",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/webpack-dashboard",target:"_blank",rel:"noopener noreferrer",children:"webpack-dashboard"})," 是一个命令行可视化工具，能够在编译过程中实时展示编译进度、模块分布、产物信息等，用法："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"安装依赖："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"yarn add -D webpack-dashboard\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"注册插件："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const DashboardPlugin = require("webpack-dashboard/plugin");\n\nmodule.exports = {\n  // ...\n  plugins: [new DashboardPlugin()],\n};\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["注意了，需要用 ",(0,r.jsx)(n.code,{children:"webpack-dashboard"})," 命令启动编译："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 12.构建性能：分享 7 款常用的性能分析工具\nnpx webpack-dashboard -- webpack\n# Dev Server\nnpx webpack-dashboard -- webpack-dev-server\n# 运行 Node 程序\nnpx webpack-dashboard -- node index.js\n"})}),"\n",(0,r.jsx)(n.p,{children:"之后，就可以在命令行看到一个漂亮的可视化界面："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"speed-measure-plugin",children:["Speed Measure Plugin",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#speed-measure-plugin",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/speed-measure-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"SpeedMeasureWebpackPlugin"})," 插件能够统计出各个 Loader、插件的处理耗时，开发者可以根据这些数据分析出哪些类型的文件处理更耗时间，用法："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"安装依赖："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"yarn add -D speed-measure-webpack-plugin\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"修改配置："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const SpeedMeasurePlugin = require("speed-measure-webpack-plugin");\n\nconst smp = new SpeedMeasurePlugin();\n\nconst config = {\n  entry: "./src/index.ts",\n  // ...\n};\n\n// 注意，这里是用 `smp.wrap` 函数包裹住 Webpack 配置\nmodule.exports = smp.wrap(config);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["之后运行打包命令如 ",(0,r.jsx)(n.code,{children:"npx webpack"})," 即可，运行效果："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"unusedwebpackplugin",children:["UnusedWebpackPlugin",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#unusedwebpackplugin",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["最后分享 ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/unused-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"UnusedWebpackPlugin"})," 插件，它能够根据 webpack 统计信息，反向查找出工程项目里哪些文件没有被用到，我日常在各种项目重构工作中都会用到，非常实用。用法也比较简单："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const UnusedWebpackPlugin = require("unused-webpack-plugin");\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new UnusedWebpackPlugin({\n      directories: [path.join(__dirname, "src")],\n      root: path.join(__dirname, "../"),\n    }),\n  ],\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["示例中，",(0,r.jsx)(n.code,{children:"directories"})," 用于指定需要分析的文件目录；",(0,r.jsx)(n.code,{children:"root"})," 用于指定根路径，与输出有关。配置插件后，webpack 每次运行完毕都会输出 ",(0,r.jsx)(n.code,{children:"directories"})," 目录中，有哪些文件没有被用到："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这是一篇介绍 Webpack 性能分析的实践方法类文章，我们首先需要理解 Webpack 编译的基本过程，以及过程中各个步骤的耗时，理解哪些节点可能会消耗更多时间等，在此基础上我们才能更精确、有的放矢地排查出项目中的性能问题。"}),"\n",(0,r.jsx)(n.p,{children:"理解基本原理后，我们可以借助一系列可视化工具分析构建、产物性能，你可以沿着上面的介绍，逐一试用、学习这些分析工具。"}),"\n",(0,r.jsxs)(n.h2,{id:"思考题",children:["思考题",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["请仔细观察 ",(0,r.jsx)(n.code,{children:"stats"})," ",(0,r.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/HEAD/stats-with-profile/stats.json",target:"_blank",rel:"noopener noreferrer",children:"示例文件"}),"，思考几个问题："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"如何推断一个 Chunk 中包含了哪些模块？"}),"\n",(0,r.jsx)(n.li,{children:"如何判断 Chunk 类型(Initial/Async/Runtime Chunk)？"}),"\n",(0,r.jsx)(n.li,{children:"如何分析 Module 与 Module 之间的依赖关系？"}),"\n"]})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}let k=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["Webpack5%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F12.%E6%9E%84%E5%BB%BA%E6%80%A7%E8%83%BD%EF%BC%9A%E5%88%86%E4%BA%AB%207%20%E6%AC%BE%E5%B8%B8%E7%94%A8%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7.md"]={toc:[{text:"核心流程",id:"核心流程",depth:2},{text:"性能分析",id:"性能分析",depth:2},{text:"Webpack Analysis",id:"webpack-analysis",depth:2},{text:"Statoscope",id:"statoscope",depth:2},{text:"Webpack Bundle Analyzer",id:"webpack-bundle-analyzer",depth:2},{text:"Webpack Visualizer",id:"webpack-visualizer",depth:2},{text:"Webpack Dashboard",id:"webpack-dashboard",depth:2},{text:"Speed Measure Plugin",id:"speed-measure-plugin",depth:2},{text:"UnusedWebpackPlugin",id:"unusedwebpackplugin",depth:2},{text:"总结",id:"总结",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);