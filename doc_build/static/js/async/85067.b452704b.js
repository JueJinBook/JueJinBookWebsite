"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["85067"],{752319:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var t=r(552676),s=r(740453);let o=r.p+"static/image/eba8310cd25993fcf762a49990765c6b.35b19be2.webp",i=r.p+"static/image/8b57f13af0a14549cb1ed7de90f2e888.9c6f5d69.webp",c=r.p+"static/image/95a182d35b23612f4af954dfebd5d132.8dbd59d6.webp";function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",blockquote:"blockquote",img:"img",h3:"h3",code:"code",pre:"pre",ul:"ul",li:"li",h4:"h4"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"6业务篇-首页开发好的印象能加分",children:["6.业务篇-首页开发，好的印象能加分",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6业务篇-首页开发好的印象能加分",children:"#"})]}),"\n",(0,t.jsxs)(n.h2,{id:"基础建设很重要",children:["基础建设很重要",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础建设很重要",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["首页作为我们整个应用程序的门面担当，它是用户打开应用程序之后，第一眼直观看到的东西，做得复杂多样、花里胡哨的会给用户造成一定的视觉障碍，我们抓住整个应用的核心点：",(0,t.jsx)(n.strong,{children:"简洁、轻巧"}),"，下面是我们的效果图，接下来跟着阿宽一同开发首页效果吧～"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"本章节将一步步带你开发首页功能，这是一个循序渐进过程，从简单粗暴的功能实现到思考抽离，如果你对本章节内容兴趣不大，可以快速阅读或跳过。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h3,{id:"路由组件开发",children:["路由组件开发",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#路由组件开发",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["我们进入到 ",(0,t.jsx)(n.code,{children:"app/renderer"})," 文件夹下，会发现这里有搭建环境时写的 ",(0,t.jsx)(n.code,{children:"<Title />"})," 组件，我们将其进行删除（已无用），我们用脚趾头都能知道，之后会存在诸多模块入口，所以我们在 renderer 下，创建一个路由文件 ",(0,t.jsx)(n.code,{children:"router.tsx"}),"，管理所有的模块入口，先来编写一下 router.tsx"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// renderer/router.tsx\nimport React from 'react';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Root from './container/root';\n\nfunction Router() {\n  return (\n    <HashRouter>\n      <Switch>\n        {/* \uD83D\uDC47 一定要添加 exact */}\n        <Route path=\"/\" exact>\n          <Root />\n        </Route>\n      </Switch>\n      {/* 重定向到首页 */}\n      <Redirect to=\"/\" />\n    </HashRouter>\n  );\n}\nexport default Router;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["眼精的小伙伴已经发现，上面我们引入了 ",(0,t.jsx)(n.code,{children:"import Root from './container/root'"}),"，貌似我们现在还没有这个组件，我们来创建一下它。"]}),"\n",(0,t.jsxs)(n.p,{children:["创建一个文件夹 ",(0,t.jsx)(n.code,{children:"container"}),"，该文件夹存放着所有模块的代码文件，此时我们添加一个新文件夹，取名为：",(0,t.jsx)(n.code,{children:"root"}),"，表明这是首页模块，并创建入口文件 index.tsx 和 index.less"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// renderer/container/root/index.tsx\nimport React from 'react';\nimport './index.less';\n\nfunction Root() {\n  return <div>我是首页</div>;\n}\nexport default Root;\n"})}),"\n",(0,t.jsx)(n.p,{children:"回到根组件 app.tsx，将路由组件 router.tsx 引入"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// renderer/app.tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './router';\nfunction App() {\n  return <Router />;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"})}),"\n",(0,t.jsx)(n.p,{children:"大功告成，运行一下，看看效果如何"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run start:main\nnpm run start:render\n"})}),"\n",(0,t.jsx)(n.p,{children:"不出意外，渲染进程窗口很顺利的展示了我们想要的页面效果，此时看看我们的文件结构"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h3,{id:"首页开发",children:["首页开发",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#首页开发",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"通过效果图，我们可以将首页拆分成："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"logo 图片"}),"\n",(0,t.jsx)(n.li,{children:"title 应用名称"}),"\n",(0,t.jsx)(n.li,{children:"tips 应用简介特性"}),"\n",(0,t.jsx)(n.li,{children:"entry 模块入口"}),"\n",(0,t.jsx)(n.li,{children:"copyright 应用版权"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["接下来将代码实现首页效果，对于样式代码不会贴出，小伙伴们可移步 github 阅读：\uD83D\uDC49 ",(0,t.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-06",target:"_blank",rel:"noopener noreferrer",children:"chapter-06"})]}),"\n",(0,t.jsx)(n.p,{children:"我们先将logo图引入（图片可自行获取），通过 CSS 实现布局效果，CSS部分代码此处忽略"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// 首页模块的入口文件\nimport React from \'react\';\nimport \'./index.less\';\nimport Logo from \'../../../../assets/logo.png\';\n\nfunction Root() {\n  return (\n    <div styleName="root">\n      <div styleName="container">\n        <img src={Logo} alt="" />\n        <div styleName="title">VisResumeMook</div>\n        <div styleName="tips">一个模板简历制作平台, 让你的简历更加出众 ~</div>\n        <div styleName="action">\n          {[\'介绍\', \'简历\', \'源码\'].map((text, index) => {\n            return (\n              <div key={index} styleName="item">{text}</div>\n            );\n          })}\n        </div>\n        <div styleName="copyright">\n          <div styleName="footer">\n            <p styleName="copyright">\n              Copyright \xa9 2018-{new Date().getFullYear()} All Rights Reserved. Copyright By pengdaokuan\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Root;\n'})}),"\n",(0,t.jsx)(n.p,{children:"刷新一下页面，可以发现我们距离成功只剩一步之遥。接下来我们来实现一下基本点击跳转等功能。"}),"\n",(0,t.jsxs)(n.h3,{id:"模块入口跳转功能",children:["模块入口跳转功能",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#模块入口跳转功能",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在 React 中我们可以通过 react-router 这个强大路由库进行页面之间的跳转，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。"}),"\n",(0,t.jsxs)(n.p,{children:["在环境搭建篇中我们已经安装了 react-router，由于我们采用 Hooks 的写法，react-router 提供了一个 API 叫做 ",(0,t.jsx)(n.code,{children:"useHistory"}),"，接下来我们就通过它，来实现我们的跳转功能吧～"]}),"\n",(0,t.jsxs)(n.p,{children:["回到我们上面的代码，我们为其添加一个 ",(0,t.jsx)(n.code,{children:"onClick"})," 事件"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// 首页模块的入口文件\nimport React from 'react';\nimport './index.less';\nimport { useHistory } from 'react-router';\nimport Logo from '../../../../assets/logo.png';\n\nfunction Root() {\n  // \uD83D\uDC47 通过 history.push 进行跳转\n  const history = useHistory();\n  \n  const onRouterToLink = (text: string) => {\n     if (text === '简历') {\n       console.log('跳转到简历页面')\n       history.push('/resume')\n     } else {\n       console.log('进入到 github ')\n     }\n  }\n\n  return (\n    <div styleName=\"root\">\n      ...\n      <div styleName=\"action\">\n        {['介绍', '简历', '源码'].map((text, index) => {\n          return (\n            <div key={index} styleName=\"item\" onClick={() => onRouterToLink(text)} >\n              {text}\n            </div>\n          );\n       )}\n      </div>\n      ...\n    </div>\n  );\n}\nexport default Root;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["解读一下上面代码，我们为每个模块 div 都添加 ",(0,t.jsx)(n.code,{children:"onClick"})," 事件，点击模块后，进行条件判断，从而做对应的操作。 刷新一下页面，点击",(0,t.jsx)(n.code,{children:"简历"})," ，发现页面空白，为什么呢？回过头想想，我们上边的 ",(0,t.jsx)(n.code,{children:"router.tsx"})," 路由组件，",(0,t.jsx)(n.strong,{children:"不就只写了一个首页模块的路由吗"}),"？我们回去添加一个新路由。"]}),"\n",(0,t.jsxs)(n.p,{children:["在 ",(0,t.jsx)(n.code,{children:"container"})," 下添加 resume 文件夹，并新增入口 index.tsx，我们简单写一下简历入口代码。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nimport './index.less';\n\nfunction Resume() {\n  return <div>我是简历模块</div>;\n}\nexport default Resume;\n"})}),"\n",(0,t.jsx)(n.p,{children:"同时修改 router.tsx 文件，将其引入"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import React from 'react';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Root from './container/root';\nimport Resume from './container/resume';\n\nfunction Router() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Root />\n        </Route>\n        {/* \uD83D\uDC47 添加简历模块入口路由 */}\n        <Route path=\"/resume\" exact>\n          <Resume />\n        </Route>\n      </Switch>\n      <Redirect to=\"/\" />\n    </HashRouter>\n  );\n}\nexport default Router;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["再点击一下 ",(0,t.jsx)(n.code,{children:"简历"}),"，此时可成功跳转。页面内的路由切换尚能解决，窗口外的页面跳转无从下手。我们期望点击",(0,t.jsx)(n.code,{children:"介绍"}),"、",(0,t.jsx)(n.code,{children:"源码"}),"处，能够脱离应用窗口，在我们默认浏览器中打开页面，进入到 github 中。"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["electron 提供一个 ",(0,t.jsx)(n.a,{href:"https://www.electronjs.org/docs/api/shell#shell",target:"_blank",rel:"noopener noreferrer",children:"shell"})," 模块，它模块提供与桌面集成相关的功能"]}),"。并且此模块也能用于渲染进程中，下面我们通过此模块，实现此功能（\uD83D\uDC47 部分代码省略）"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { shell } from 'electron';\n\nfunction Root() {\n   const onRouterToLink = (text: string) => {\n    if (text !== '简历') {\n      // 通过 shell 模块，打开默认浏览器，进入 github\n     shell.openExternal('https://github.com/PDKSophia/visResumeMook');\n    } else {\n        history.push('/resume');\n     }\n  };\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["到目前为止，我们首页的基本功能已经开发完成。相关代码可访问：",(0,t.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-06",target:"_blank",rel:"noopener noreferrer",children:"chapter-06"})]}),"\n",(0,t.jsxs)(n.h3,{id:"-思考代码优化",children:["\uD83E\uDD14 思考代码优化",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-思考代码优化",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"上面我们是以简单粗暴形式，将页面和逻辑撸了出来，但代码简直“不堪入目”，作为一个有追求、有代码洁癖的工程师，简直无法容忍，接下来我们对它进行美化。"}),"\n",(0,t.jsxs)(n.h4,{id:"1-webpack-alias-别名",children:["1. webpack alias 别名",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-webpack-alias-别名",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["我们回过头看，当我们引入图片时，路径要些一连串的 ",(0,t.jsx)(n.code,{children:"../../../../"}),"，有没有想骂 x 的冲动，好在 webpack 提供 alias 配置，让我们能够配置别名，接下来我们上手试试。"]}),"\n",(0,t.jsxs)(n.p,{children:["我们的图片都放在项目根路径下的 assets 中，我们给它加个别名，修改 ",(0,t.jsx)(n.code,{children:"webpack.base.js"})," 文件"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  resolve: {\n    // \uD83D\uDC47 添加别名\n    alias: {\n      '@assets': path.join(__dirname, '../', 'assets/'),\n      '@src': path.join(__dirname, '../', 'app/renderer'),\n    },\n  },\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"添加之后，我们将文件的引入改成下面这种形式"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// 未修改前\nimport Logo from '../../../../assets/logo.png';\n\n// 修改后\nimport Logo from '@assets/logo.png';\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// 未修改前\nimport Root from './container/root';\nimport Resume from './container/resume';\n\n// 修改后\nimport Root from '@src/container/root';\nimport Resume from '@src/container/resume';\n"})}),"\n",(0,t.jsx)(n.p,{children:"重跑一下项目（运行 npm run start:render）发现没啥问题，完美"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"如果发现文件报红，这是 ts 报错，你需要前往 tsconfig.json 中同样添加一下 paths 配置"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"添加之后如果还是有问题，可以重启一下 vscode"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    // \uD83D\uDC47 如果ts报错，添加下面这段代码\n    "baseUrl": "./",\n    "paths": {\n      "@assets/*": ["./assets/*"],\n      "@src/*": ["./app/renderer/*"],\n      "@common/*": ["./app/renderer/common/*"]\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"2-模块入口的常量定义与类型约束",children:["2. 模块入口的常量定义与类型约束",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-模块入口的常量定义与类型约束",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["上面我们写了一段“粗暴”代码，我们能否将其进行抽离，思考一下，",(0,t.jsx)(n.code,{children:"路由常量数据"}),"是一个只会在首页用到的数据还是其他模块也会用到的数据呢？"]}),"\n",(0,t.jsxs)(n.p,{children:["其他模块是否也会通过 ",(0,t.jsx)(n.code,{children:"history.push"})," 方式跳转到其他模块页面，如果是，我们将来在其他模块也要写一段“粗暴”代码？还可能出现的问题是：我们期望数据一致，当往往出于疏忽，两边数据不一致。"]}),"\n",(0,t.jsx)(n.p,{children:"那么我们将其抽离成一个路由常量文件，进行统一维护，是不是更好呢？"}),"\n",(0,t.jsxs)(n.p,{children:["我们在 ",(0,t.jsx)(n.code,{children:"app/renderer"})," 文件夹下新增一个文件夹，取名为：common，顾名思义，这里存放的是项目中所有公共通用的代码文件，在里边我们创建一个 constants 文件夹，表示这里维护所有常量数据。"]}),"\n",(0,t.jsxs)(n.p,{children:["我们在 contants 下维护一份路由专用的文件，取名为 ",(0,t.jsx)(n.code,{children:"router.ts"}),"，我们来写一下该文件："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// 模块路径\nconst ROUTER = {\n  root: '/',\n  resume: '/resume',\n};\nexport default ROUTER;\n\nexport const ROUTER_KEY = {\n  root: 'root',\n  resume: 'resume',\n};\n\n// 入口模块，TS 定义类型必须为 TSRouter.Item\nexport const ROUTER_ENTRY: TSRouter.Item[] = [\n  {\n    url: 'https://github.com/PDKSophia/visResumeMook',\n    key: 'intro',\n    text: '介绍',\n  },\n  {\n    url: ROUTER.resume,\n    key: ROUTER_KEY.resume,\n    text: '简历',\n  },\n  {\n    url: 'https://github.com/PDKSophia/visResumeMook',\n    key: 'code',\n    text: '源码',\n  },\n];\n"})}),"\n",(0,t.jsxs)(n.p,{children:["既然我们使用了 Typescript，那么我们先小试牛刀一下，上面定义的 ",(0,t.jsx)(n.code,{children:"ROUTER_ENTRY"})," 我们将它的类型约束为 ",(0,t.jsx)(n.code,{children:"TSRouter.Item"}),"，我们在 common 文件夹下新增一个名为 types 文件夹，表示此文件存放着应用中用到的类型定义。我们来新增一个用于路由的 router.d.ts 文件"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// router.d.ts\n// 路由类型约束\ndeclare namespace TSRouter {\n  export interface Item {\n    /**\n     * @description 路由跳转链接\n     */\n    url: string;\n    /**\n     * @description 关键词\n     */\n    key: string;\n    /**\n     * @description 文本\n     */\n    text: string;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"紧接着我们在 webpack 中配置一下此文件夹的别名"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"alias: {\n  // ...\n  '@common': path.join(__dirname, '../', 'app/renderer/common'),\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"我们进行改造，首先先来修改一下路由组件 router.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// router.tsx 路由组件\n// \uD83D\uDC47 引入路由常量\nimport ROUTER from '@common/constants/router';\n\nfunction Router() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path={ROUTER.root} exact>\n          <Root />\n        </Route>\n        <Route path={ROUTER.resume} exact>\n          <Resume />\n        </Route>\n      </Switch>\n      <Redirect to={ROUTER.root} />\n    </HashRouter>\n  );\n}\nexport default Router;\n"})}),"\n",(0,t.jsx)(n.p,{children:"我们在首页入口 index.tsx 文件进行改造"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// 首页入口 index.tsx\nimport { ROUTER_ENTRY, ROUTER_KEY } from '@common/constants/router';\n\n// 在方法调用上\nconst onRouterToLink = (router: TSRouter.Item) => {\n  if (router.text !== '简历') {\n    shell.openExternal(router.url);\n  } else {\n    history.push(router.url)\n  }\n};\n\n// 在遍历上\n<div styleName=\"action\">\n  {ROUTER_ENTRY.map((router: TSRouter.Item) => {\n    return (\n      <div key={router.key} styleName=\"item\" onClick={() => onRouterToLink(router)} >\n        {router.text}\n      </div>\n    );\n  })}\n</div>\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"3-utils-方法抽离",children:["3. utils 方法抽离",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-utils-方法抽离",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["虽然我们代码优化了一部分，但还是存在一些小问题的，比如 ",(0,t.jsx)(n.code,{children:"router.text !== '简历'"})," 这个条件判断就有些突兀了，我们回到问题本质，这里进行判断原因是：如果这个 url 是外部可访问的链接，则通过 shell 模块打开浏览器，如果是页面之间跳转，则跳转到对应的路由页面。"]}),"\n",(0,t.jsx)(n.p,{children:"所以问题聚焦在，如何判断 url 是不是可访问的外部链接？这很简单，我们写一个方法，判断 url 是不是 http 或 https 开头，该方法返回 boolean 值，下面我们来实现此方法。"}),"\n",(0,t.jsx)(n.p,{children:"首先在 common 下新增一个 utils 文件夹，并新增 router.ts，表示这是路由相关的工具处理函数，在里面实现我们的函数方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// renderer/common/utils/router.ts\n/**\n * @desc 判断是否属于外部连接\n * @param {string} url - 链接\n */\nexport function isHttpOrHttpsUrl(url: string): boolean {\n  let regRule = /(http|https):\\/\\/([\\w.]+\\/?)\\S*/;\n  return regRule.test(url.toLowerCase());\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"接下来我们进行修改的条件判断"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { isHttpOrHttpsUrl } from '@common/utils/router';\n\n// 在方法调用上\nconst onRouterToLink = (router: TSRouter.Item) => {\n  if (isHttpOrHttpsUrl(router.url) {\n    shell.openExternal(router.url);\n  } else {\n    history.push(router.url);\n  }\n};\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"4-页面存在空白间隙",children:["4. 页面存在空白间隙",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-页面存在空白间隙",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"最懒惰的解决方式是，在 index.html 中，修改一下样式"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>VisResumeMook</title>\n    <style>\n      * {\n        margin: 0;\n      }\n    </style>\n  </head>\n  <body>\n    <div id="root"></div>\n  </body>\n</html>\n'})}),"\n",(0,t.jsx)(n.p,{children:"至此，我们的首页终于开发完毕，并且经过思考，不断优化，将项目的整个文件结构进行丰富。一张图回顾一下我们现在的文件结构"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本章节更像是手把手教程，从最简单的粗暴实现，到最后的思考以及抽离，中间穿插着 webpack、ts 等一些配置，希望这章节能让小伙伴们上手项目，这并不难，接下来的实战章节，阿宽也会通过这种方式，循序渐进，一步步引导大家去思考去优化。"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["简单粗暴型代码：",(0,t.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-06",target:"_blank",rel:"noopener noreferrer",children:"chapter-06"})]}),"\n",(0,t.jsxs)(n.li,{children:["思考优化型代码：",(0,t.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-06-op",target:"_blank",rel:"noopener noreferrer",children:"chapter-06-op"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"如果您在边阅读边实践时，发现代码报错或者 TS 报错，那么小伙伴们可以根据报错信息，去线上看看相应的代码。"})}),"\n",(0,t.jsx)(n.p,{children:"如果对本章节存在疑问，欢迎在评论区留言。"})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["Electron%20%2B%20React%20%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8E%86%E5%B9%B3%E5%8F%B0%E5%AE%9E%E6%88%98%2F6.%E4%B8%9A%E5%8A%A1%E7%AF%87-%E9%A6%96%E9%A1%B5%E5%BC%80%E5%8F%91%EF%BC%8C%E5%A5%BD%E7%9A%84%E5%8D%B0%E8%B1%A1%E8%83%BD%E5%8A%A0%E5%88%86.md"]={toc:[{text:"基础建设很重要",id:"基础建设很重要",depth:2},{text:"路由组件开发",id:"路由组件开发",depth:3},{text:"首页开发",id:"首页开发",depth:3},{text:"模块入口跳转功能",id:"模块入口跳转功能",depth:3},{text:"\uD83E\uDD14 思考代码优化",id:"-思考代码优化",depth:3},{text:"1. webpack alias 别名",id:"1-webpack-alias-别名",depth:4},{text:"2. 模块入口的常量定义与类型约束",id:"2-模块入口的常量定义与类型约束",depth:4},{text:"3. utils 方法抽离",id:"3-utils-方法抽离",depth:4},{text:"4. 页面存在空白间隙",id:"4-页面存在空白间隙",depth:4},{text:"总结",id:"总结",depth:2}],title:"6.业务篇-首页开发，好的印象能加分",headingTitle:"6.业务篇-首页开发，好的印象能加分",frontmatter:{}}}}]);