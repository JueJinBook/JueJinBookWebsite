"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["95012"],{249478:function(n,e,r){r.r(e),r.d(e,{default:()=>a});var c=r(552676),s=r(740453);function l(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",pre:"pre",code:"code",strong:"strong"},(0,s.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"3变量的解构赋值",children:["3.变量的解构赋值",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3变量的解构赋值",children:"#"})]}),"\n",(0,c.jsxs)(e.h2,{id:"数组的解构赋值",children:["数组的解构赋值",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数组的解构赋值",children:"#"})]}),"\n",(0,c.jsxs)(e.h3,{id:"基本用法",children:["基本用法",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基本用法",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。"}),"\n",(0,c.jsx)(e.p,{children:"以前，为变量赋值，只能直接指定值。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let a = 1;\nlet b = 2;\nlet c = 3;\n"})}),"\n",(0,c.jsx)(e.p,{children:"ES6 允许写成下面这样。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let [a, b, c] = [1, 2, 3];\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。"}),"\n",(0,c.jsx)(e.p,{children:"本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'let [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = ["foo", "bar", "baz"];\nthird // "baz"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = [\'a\'];\nx // "a"\ny // undefined\nz // []\n'})}),"\n",(0,c.jsxs)(e.p,{children:["如果解构不成功，变量的值就等于",(0,c.jsx)(e.code,{children:"undefined"}),"。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let [foo] = [];\nlet [bar, foo] = [1];\n"})}),"\n",(0,c.jsxs)(e.p,{children:["以上两种情况都属于解构不成功，",(0,c.jsx)(e.code,{children:"foo"}),"的值都会等于",(0,c.jsx)(e.code,{children:"undefined"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let [x, y] = [1, 2, 3];\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面两个例子，都属于不完全解构，但是可以成功。"}),"\n",(0,c.jsx)(e.p,{children:"如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。"}),"\n",(0,c.jsx)(e.p,{children:"对于 Set 结构，也可以使用数组的解构赋值。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let [x, y, z] = new Set(['a', 'b', 'c']);\nx // \"a\"\n"})}),"\n",(0,c.jsx)(e.p,{children:"事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"function* fibs() {\n  let a = 0;\n  let b = 1;\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs();\nsixth // 5\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"fibs"}),"是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。"]}),"\n",(0,c.jsxs)(e.h3,{id:"默认值",children:["默认值",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#默认值",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"解构赋值允许指定默认值。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let [foo = true] = [];\nfoo // true\n\nlet [x, y = 'b'] = ['a']; // x='a', y='b'\nlet [x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n"})}),"\n",(0,c.jsxs)(e.p,{children:["注意，ES6 内部使用严格相等运算符（",(0,c.jsx)(e.code,{children:"==="}),"），判断一个位置是否有值。所以，只有当一个数组成员严格等于",(0,c.jsx)(e.code,{children:"undefined"}),"，默认值才会生效。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let [x = 1] = [undefined];\nx // 1\n\nlet [x = 1] = [null];\nx // null\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，如果一个数组成员是",(0,c.jsx)(e.code,{children:"null"}),"，默认值就不会生效，因为",(0,c.jsx)(e.code,{children:"null"}),"不严格等于",(0,c.jsx)(e.code,{children:"undefined"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"function f() {\n  console.log('aaa');\n}\n\nlet [x = f()] = [1];\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，因为",(0,c.jsx)(e.code,{children:"x"}),"能取到值，所以函数",(0,c.jsx)(e.code,{children:"f"}),"根本不会执行。上面的代码其实等价于下面的代码。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let x;\nif ([1][0] === undefined) {\n  x = f();\n} else {\n  x = [1][0];\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"默认值可以引用解构赋值的其他变量，但该变量必须已经声明。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let [x = 1, y = x] = [];     // x=1; y=1\nlet [x = 1, y = x] = [2];    // x=2; y=2\nlet [x = 1, y = x] = [1, 2]; // x=1; y=2\nlet [x = y, y = 1] = [];     // ReferenceError: y is not defined\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面最后一个表达式之所以会报错，是因为",(0,c.jsx)(e.code,{children:"x"}),"用",(0,c.jsx)(e.code,{children:"y"}),"做默认值时，",(0,c.jsx)(e.code,{children:"y"}),"还没有声明。"]}),"\n",(0,c.jsxs)(e.h2,{id:"对象的解构赋值",children:["对象的解构赋值",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#对象的解构赋值",children:"#"})]}),"\n",(0,c.jsxs)(e.h3,{id:"简介",children:["简介",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"解构不仅可以用于数组，还可以用于对象。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let { foo, bar } = { foo: 'aaa', bar: 'bbb' };\nfoo // \"aaa\"\nbar // \"bbb\"\n"})}),"\n",(0,c.jsx)(e.p,{children:"对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let { bar, foo } = { foo: 'aaa', bar: 'bbb' };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet { baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // undefined\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于",(0,c.jsx)(e.code,{children:"undefined"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["如果解构失败，变量的值等于",(0,c.jsx)(e.code,{children:"undefined"}),"。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let {foo} = {bar: 'baz'};\nfoo // undefined\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，等号右边的对象没有",(0,c.jsx)(e.code,{children:"foo"}),"属性，所以变量",(0,c.jsx)(e.code,{children:"foo"}),"取不到值，所以等于",(0,c.jsx)(e.code,{children:"undefined"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 例一\nlet { log, sin, cos } = Math;\n\n// 例二\nconst { log } = console;\nlog('hello') // hello\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码的例一将",(0,c.jsx)(e.code,{children:"Math"}),"对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。例二将",(0,c.jsx)(e.code,{children:"console.log"}),"赋值到",(0,c.jsx)(e.code,{children:"log"}),"变量。"]}),"\n",(0,c.jsx)(e.p,{children:"如果变量名与属性名不一致，必须写成下面这样。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\n\nlet obj = { first: 'hello', last: 'world' };\nlet { first: f, last: l } = obj;\nf // 'hello'\nl // 'world'\n"})}),"\n",(0,c.jsx)(e.p,{children:"这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let { foo: foo, bar: bar } = { foo: 'aaa', bar: 'bbb' };\n"})}),"\n",(0,c.jsx)(e.p,{children:"也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\nfoo // error: foo is not defined\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"foo"}),"是匹配的模式，",(0,c.jsx)(e.code,{children:"baz"}),"才是变量。真正被赋值的是变量",(0,c.jsx)(e.code,{children:"baz"}),"，而不是模式",(0,c.jsx)(e.code,{children:"foo"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"与数组一样，解构也可以用于嵌套结构的对象。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nlet { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n"})}),"\n",(0,c.jsxs)(e.p,{children:["注意，这时",(0,c.jsx)(e.code,{children:"p"}),"是模式，不是变量，因此不会被赋值。如果",(0,c.jsx)(e.code,{children:"p"}),"也要作为变量赋值，可以写成下面这样。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'let obj = {\n  p: [\n    \'Hello\',\n    { y: \'World\' }\n  ]\n};\n\nlet { p, p: [x, { y }] } = obj;\nx // "Hello"\ny // "World"\np // ["Hello", {y: "World"}]\n'})}),"\n",(0,c.jsx)(e.p,{children:"下面是另一个例子。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\n\nlet { loc, loc: { start }, loc: { start: { line }} } = node;\nline // 1\nloc  // Object {start: Object}\nstart // Object {line: 1, column: 5}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码有三次解构赋值，分别是对",(0,c.jsx)(e.code,{children:"loc"}),"、",(0,c.jsx)(e.code,{children:"start"}),"、",(0,c.jsx)(e.code,{children:"line"}),"三个属性的解构赋值。注意，最后一次对",(0,c.jsx)(e.code,{children:"line"}),"属性的解构赋值之中，只有",(0,c.jsx)(e.code,{children:"line"}),"是变量，",(0,c.jsx)(e.code,{children:"loc"}),"和",(0,c.jsx)(e.code,{children:"start"}),"都是模式，不是变量。"]}),"\n",(0,c.jsx)(e.p,{children:"下面是嵌套赋值的例子。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let obj = {};\nlet arr = [];\n\n({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });\n\nobj // {prop:123}\narr // [true]\n"})}),"\n",(0,c.jsx)(e.p,{children:"如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 报错\nlet {foo: {bar}} = {baz: 'baz'};\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，等号左边对象的",(0,c.jsx)(e.code,{children:"foo"}),"属性，对应一个子对象。该子对象的",(0,c.jsx)(e.code,{children:"bar"}),"属性，解构时会报错。原因很简单，因为",(0,c.jsx)(e.code,{children:"foo"}),"这时等于",(0,c.jsx)(e.code,{children:"undefined"}),"，再取子属性就会报错。"]}),"\n",(0,c.jsx)(e.p,{children:"注意，对象的解构赋值可以取到继承的属性。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const obj1 = {};\nconst obj2 = { foo: 'bar' };\nObject.setPrototypeOf(obj1, obj2);\n\nconst { foo } = obj1;\nfoo // \"bar\"\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，对象",(0,c.jsx)(e.code,{children:"obj1"}),"的原型对象是",(0,c.jsx)(e.code,{children:"obj2"}),"。",(0,c.jsx)(e.code,{children:"foo"}),"属性不是",(0,c.jsx)(e.code,{children:"obj1"}),"自身的属性，而是继承自",(0,c.jsx)(e.code,{children:"obj2"}),"的属性，解构赋值可以取到这个属性。"]}),"\n",(0,c.jsxs)(e.h3,{id:"默认值-1",children:["默认值",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#默认值-1",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"对象的解构也可以指定默认值。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"var {x = 3} = {};\nx // 3\n\nvar {x, y = 5} = {x: 1};\nx // 1\ny // 5\n\nvar {x: y = 3} = {};\ny // 3\n\nvar {x: y = 3} = {x: 5};\ny // 5\n\nvar { message: msg = 'Something went wrong' } = {};\nmsg // \"Something went wrong\"\n"})}),"\n",(0,c.jsxs)(e.p,{children:["默认值生效的条件是，对象的属性值严格等于",(0,c.jsx)(e.code,{children:"undefined"}),"。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"var {x = 3} = {x: undefined};\nx // 3\n\nvar {x = 3} = {x: null};\nx // null\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，属性",(0,c.jsx)(e.code,{children:"x"}),"等于",(0,c.jsx)(e.code,{children:"null"}),"，因为",(0,c.jsx)(e.code,{children:"null"}),"与",(0,c.jsx)(e.code,{children:"undefined"}),"不严格相等，所以是个有效的赋值，导致默认值",(0,c.jsx)(e.code,{children:"3"}),"不会生效。"]}),"\n",(0,c.jsxs)(e.h3,{id:"注意点",children:["注意点",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#注意点",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 错误的写法\nlet x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码的写法会报错，因为 JavaScript 引擎会将",(0,c.jsx)(e.code,{children:"{x}"}),"理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 正确的写法\nlet x;\n({x} = {x: 1});\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。"}),"\n",(0,c.jsx)(e.p,{children:"（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"({} = [true, false]);\n({} = 'abc');\n({} = []);\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面的表达式虽然毫无意义，但是语法是合法的，可以执行。"}),"\n",(0,c.jsx)(e.p,{children:"（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let arr = [1, 2, 3];\nlet {0 : first, [arr.length - 1] : last} = arr;\nfirst // 1\nlast // 3\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码对数组进行对象解构。数组",(0,c.jsx)(e.code,{children:"arr"}),"的",(0,c.jsx)(e.code,{children:"0"}),"键对应的值是",(0,c.jsx)(e.code,{children:"1"}),"，",(0,c.jsx)(e.code,{children:"[arr.length - 1]"}),"就是",(0,c.jsx)(e.code,{children:"2"}),"键，对应的值是",(0,c.jsx)(e.code,{children:"3"}),"。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。"]}),"\n",(0,c.jsxs)(e.h2,{id:"字符串的解构赋值",children:["字符串的解构赋值",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串的解构赋值",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'const [a, b, c, d, e] = \'hello\';\na // "h"\nb // "e"\nc // "l"\nd // "l"\ne // "o"\n'})}),"\n",(0,c.jsxs)(e.p,{children:["类似数组的对象都有一个",(0,c.jsx)(e.code,{children:"length"}),"属性，因此还可以对这个属性解构赋值。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let {length : len} = 'hello';\nlen // 5\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"数值和布尔值的解构赋值",children:["数值和布尔值的解构赋值",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数值和布尔值的解构赋值",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let {toString: s} = 123;\ns === Number.prototype.toString // true\n\nlet {toString: s} = true;\ns === Boolean.prototype.toString // true\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，数值和布尔值的包装对象都有",(0,c.jsx)(e.code,{children:"toString"}),"属性，因此变量",(0,c.jsx)(e.code,{children:"s"}),"都能取到值。"]}),"\n",(0,c.jsxs)(e.p,{children:["解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于",(0,c.jsx)(e.code,{children:"undefined"}),"和",(0,c.jsx)(e.code,{children:"null"}),"无法转为对象，所以对它们进行解构赋值，都会报错。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let { prop: x } = undefined; // TypeError\nlet { prop: y } = null; // TypeError\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"函数参数的解构赋值",children:["函数参数的解构赋值",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数参数的解构赋值",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"函数的参数也可以使用解构赋值。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"function add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]); // 3\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，函数",(0,c.jsx)(e.code,{children:"add"}),"的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量",(0,c.jsx)(e.code,{children:"x"}),"和",(0,c.jsx)(e.code,{children:"y"}),"。对于函数内部的代码来说，它们能感受到的参数就是",(0,c.jsx)(e.code,{children:"x"}),"和",(0,c.jsx)(e.code,{children:"y"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"下面是另一个例子。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"[[1, 2], [3, 4]].map(([a, b]) => a + b);\n// [ 3, 7 ]\n"})}),"\n",(0,c.jsx)(e.p,{children:"函数参数的解构也可以使用默认值。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"function move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，函数",(0,c.jsx)(e.code,{children:"move"}),"的参数是一个对象，通过对这个对象进行解构，得到变量",(0,c.jsx)(e.code,{children:"x"}),"和",(0,c.jsx)(e.code,{children:"y"}),"的值。如果解构失败，",(0,c.jsx)(e.code,{children:"x"}),"和",(0,c.jsx)(e.code,{children:"y"}),"等于默认值。"]}),"\n",(0,c.jsx)(e.p,{children:"注意，下面的写法会得到不一样的结果。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"function move({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, undefined]\nmove({}); // [undefined, undefined]\nmove(); // [0, 0]\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码是为函数",(0,c.jsx)(e.code,{children:"move"}),"的参数指定默认值，而不是为变量",(0,c.jsx)(e.code,{children:"x"}),"和",(0,c.jsx)(e.code,{children:"y"}),"指定默认值，所以会得到与前一种写法不同的结果。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"undefined"}),"就会触发函数参数的默认值。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"[1, undefined, 3].map((x = 'yes') => x);\n// [ 1, 'yes', 3 ]\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"圆括号问题",children:["圆括号问题",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#圆括号问题",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。"}),"\n",(0,c.jsx)(e.p,{children:"由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。"}),"\n",(0,c.jsx)(e.p,{children:"但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。"}),"\n",(0,c.jsxs)(e.h3,{id:"不能使用圆括号的情况",children:["不能使用圆括号的情况",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#不能使用圆括号的情况",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"以下三种解构赋值不得使用圆括号。"}),"\n",(0,c.jsx)(e.p,{children:"（1）变量声明语句"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 全部报错\nlet [(a)] = [1];\n\nlet {x: (c)} = {};\nlet ({x: c}) = {};\nlet {(x: c)} = {};\nlet {(x): c} = {};\n\nlet { o: ({ p: p }) } = { o: { p: 2 } };\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。"}),"\n",(0,c.jsx)(e.p,{children:"（2）函数参数"}),"\n",(0,c.jsx)(e.p,{children:"函数参数也属于变量声明，因此不能带有圆括号。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 报错\nfunction f([(z)]) { return z; }\n// 报错\nfunction f([z,(x)]) { return x; }\n"})}),"\n",(0,c.jsx)(e.p,{children:"（3）赋值语句的模式"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 全部报错\n({ p: a }) = { p: 42 };\n([a]) = [5];\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面代码将整个模式放在圆括号之中，导致报错。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 报错\n[({ p: a }), { x: c }] = [{}, {}];\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面代码将一部分模式放在圆括号之中，导致报错。"}),"\n",(0,c.jsxs)(e.h3,{id:"可以使用圆括号的情况",children:["可以使用圆括号的情况",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#可以使用圆括号的情况",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"[(b)] = [3]; // 正确\n({ p: (d) } = {}); // 正确\n[(parseInt.prop)] = [3]; // 正确\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是",(0,c.jsx)(e.code,{children:"p"}),"，而不是",(0,c.jsx)(e.code,{children:"d"}),"；第三行语句与第一行语句的性质一致。"]}),"\n",(0,c.jsxs)(e.h2,{id:"用途",children:["用途",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#用途",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"变量的解构赋值用途很多。"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"（1）交换变量的值"})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码交换变量",(0,c.jsx)(e.code,{children:"x"}),"和",(0,c.jsx)(e.code,{children:"y"}),"的值，这样的写法不仅简洁，而且易读，语义非常清晰。"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"（2）从函数返回多个值"})}),"\n",(0,c.jsx)(e.p,{children:"函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nlet { foo, bar } = example();\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"（3）函数参数的定义"})}),"\n",(0,c.jsx)(e.p,{children:"解构赋值可以方便地将一组参数与变量名对应起来。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"（4）提取 JSON 数据"})}),"\n",(0,c.jsx)(e.p,{children:"解构赋值对提取 JSON 对象中的数据，尤其有用。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'let jsonData = {\n  id: 42,\n  status: "OK",\n  data: [867, 5309]\n};\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, "OK", [867, 5309]\n'})}),"\n",(0,c.jsx)(e.p,{children:"上面代码可以快速提取 JSON 数据的值。"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"（5）函数参数的默认值"})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"jQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n} = {}) {\n  // ... do stuff\n};\n"})}),"\n",(0,c.jsxs)(e.p,{children:["指定参数的默认值，就避免了在函数体内部再写",(0,c.jsx)(e.code,{children:"var foo = config.foo || 'default foo';"}),"这样的语句。"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"（6）遍历 Map 结构"})}),"\n",(0,c.jsxs)(e.p,{children:["任何部署了 Iterator 接口的对象，都可以用",(0,c.jsx)(e.code,{children:"for...of"}),"循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n"})}),"\n",(0,c.jsx)(e.p,{children:"如果只想获取键名，或者只想获取键值，可以写成下面这样。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"（7）输入模块的指定方法"})}),"\n",(0,c.jsx)(e.p,{children:"加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'const { SourceMapConsumer, SourceNode } = require("source-map");\n'})})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(l,{...n})}):l(n)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F3.%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.md"]={toc:[{text:"数组的解构赋值",id:"数组的解构赋值",depth:2},{text:"基本用法",id:"基本用法",depth:3},{text:"默认值",id:"默认值",depth:3},{text:"对象的解构赋值",id:"对象的解构赋值",depth:2},{text:"简介",id:"简介",depth:3},{text:"默认值",id:"默认值-1",depth:3},{text:"注意点",id:"注意点",depth:3},{text:"字符串的解构赋值",id:"字符串的解构赋值",depth:2},{text:"数值和布尔值的解构赋值",id:"数值和布尔值的解构赋值",depth:2},{text:"函数参数的解构赋值",id:"函数参数的解构赋值",depth:2},{text:"圆括号问题",id:"圆括号问题",depth:2},{text:"不能使用圆括号的情况",id:"不能使用圆括号的情况",depth:3},{text:"可以使用圆括号的情况",id:"可以使用圆括号的情况",depth:3},{text:"用途",id:"用途",depth:2}],title:"3.变量的解构赋值",headingTitle:"3.变量的解构赋值",frontmatter:{}}}}]);