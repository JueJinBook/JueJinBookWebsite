"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["6069"],{281976:function(e,n,r){r.r(n),r.d(n,{default:()=>u});var t=r(552676),i=r(740453);let s=r.p+"static/image/be777a24ab9dad88717e8763314b683d.2a8ee04f.webp",c=r.p+"static/image/65f3c1275a6af9b736d4c04554219314.969dff95.webp",a=r.p+"static/image/9fab7620898ebafbc1408dc747bba75e.1fdd2342.webp",o=r.p+"static/image/e4bb3e39b241d5ac7f3efc50b0f98fb8.a133b5dd.webp",l=r.p+"static/image/a947e7f802b650b08a6b1062feabaca6.2416515a.webp",d=r.p+"static/image/199135078d16b7cfca828ab75a3e26a3.41ce062b.webp",p=r.p+"static/image/bfb35d8f030b1fbc580bebc15402f861.f66144a1.webp",h=r.p+"static/image/5d64e8a270650311c7fb7b9b1e8436c9.d317deb3.webp",m=r.p+"static/image/8b3a00ef3a105eb8bcbc60b6074057c5.1696407f.webp";function x(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",blockquote:"blockquote",strong:"strong",ul:"ul",li:"li",img:"img",code:"code",pre:"pre",h3:"h3"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"31玩转-typescript-astast-checker-与-codemod",children:["31.玩转 TypeScript AST：AST Checker 与 CodeMod",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31玩转-typescript-astast-checker-与-codemod",children:"#"})]}),"\n",(0,t.jsxs)(n.h2,{id:"前置知识babel-的基本工作流程",children:["前置知识：Babel 的基本工作流程",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前置知识babel-的基本工作流程",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在本节的最开始，我有必要郑重说明下，我本身并不是科班出身，没有系统学习过编译原理，以下涉及编译原理的概念大部分来自于在社区的学习所得，也欢迎你指出其中的错误，我将认真对待并修正。"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"本节原本是被作为短小精悍的漫谈篇呈现的，但有部分同学反馈对这部分知识确实有刚需，因此进行了大量内容扩充后加入到正文篇中。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"对大部分前端同学来说，提到编译原理第一时间想到的就是 Babel，即使你没有直接使用过它，也一定间接地接触过，不论是已经搭建好的项目还是更底层的 Webpack 与 Babel Loader 。"}),"\n",(0,t.jsxs)(n.p,{children:["而 Babel 的作用你应该也至少了解过一些，其实它的核心功能就是",(0,t.jsx)(n.strong,{children:"语法降级"}),"。是的，就是 TypeScript 在编译时会进行的类型擦除与语法降级中的那个语法降级，Babel 的曾用名是 6to5，意为将 ES6 代码转换为 ES5 代码。这是因为，当时 ES6 已经算是时代的弄潮儿了，很多浏览器还无法完全支持其中的特性，这就需要 Babel 将其转换为能够在更低版本的浏览器上运行的代码。而它现在的这个名字，意为巴别塔，是圣经中记载的一座通天之塔，当时的人们只有一种语言，彼此之间精诚合作，尝试联合起来建立起通往天堂的高塔，而上帝为了阻止这一行动，让人类之间使用不同的语言，彼此之间无法沟通，而计划最终自然失败。Babel 使用这一名字，正是为了更好地宣告自己的使命：",(0,t.jsx)(n.strong,{children:"让所有各不相同的 JavaScript 语法，最终都能转换为能在相同环境下直接运行的代码"}),"。"]}),"\n",(0,t.jsx)(n.p,{children:"可你是否了解 Babel 的工作流程？"}),"\n",(0,t.jsxs)(n.p,{children:["从功能角度，Babel 的",(0,t.jsx)(n.a,{href:"https://github.com/babel/babel",target:"_blank",rel:"noopener noreferrer",children:"源码"}),"大致可以分为这么几个部分："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["核心部分，包括 ",(0,t.jsx)(n.a,{href:"https://github.com/babel/babel/blob/main/packages/babel-parser/README.md",target:"_blank",rel:"noopener noreferrer",children:"Parser"}),"、",(0,t.jsx)(n.a,{href:"https://github.com/babel/babel/tree/main/packages/babel-traverse",target:"_blank",rel:"noopener noreferrer",children:"Transformer"})," 以及 ",(0,t.jsx)(n.a,{href:"https://github.com/babel/babel/tree/main/packages/babel-generator",target:"_blank",rel:"noopener noreferrer",children:"Generator"}),"，它们主要负责对源码的解析、转换以及生成等工作。一份源码首先会被 Parser 通过词法分析与语法分析，转换为 AST，也就是抽象语法树的形式，然后由 Transformer 对这棵语法树上的 AST 结点进行遍历处理，比如将所有的函数声明转换为函数表达式，最后由 Generator 基于处理完毕的 AST 结点转换出新的代码，就实现了语法的降级。"]}),"\n",(0,t.jsxs)(n.p,{children:["AST其实就是将代码的每个部分进行拆分，得到一棵树形的结构表示，你可以在 ",(0,t.jsx)(n.a,{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer",children:"AST Explorer"})," 上，实时查看一段代码转换完毕的 AST 结构。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["插件相关，如 ",(0,t.jsx)(n.code,{children:"babel-plugin-syntax-jsx"})," ",(0,t.jsx)(n.code,{children:"babel-plugin-transform-for-of"})," 以及 ",(0,t.jsx)(n.code,{children:"babel-plugin-proposal-decorators"})," 等，上面的核心部分只包括最简单的处理逻辑，如果你想转换 JSX 代码，想将 for...of 降级为 for 循环，想使用装饰器等语法，就需要这些插件来支持，这些插件其实就是遍历 AST 时，对目标的 AST 结点注册处理逻辑。一般来说一个插件只会关注一种特定的语法。当然，每个浏览器支持的语法版本都是差异巨大的，因此我们需要 ",(0,t.jsx)(n.code,{children:"babel-preset-env"}),"，自动地基于浏览器版本去确定需要使用的插件。"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["除了依赖 Babel Loader 这样的工具来进行源码的转换以外，其实你也可以使用 ",(0,t.jsx)(n.code,{children:"@babel/core"}),"，来编程式地调用 Babel 的 Compiler API ，并对应地配置插件、预设等等。"]}),"\n",(0,t.jsx)(n.p,{children:"可以看到，在工作流程中其实有一样东西贯穿了整个过程，那就是 AST 。而这也是我们本节所关注的：如何玩转 TypeScript 的 AST。"}),"\n",(0,t.jsxs)(n.h2,{id:"使用-typescript-compiler-api",children:["使用 TypeScript Compiler API",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-typescript-compiler-api",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"编译处理 TypeScript 代码，我们其实仍然可以使用 Babel，但实际上 TypeScript 本身就将几乎所有 Compiler API 都暴露了出来，也就是说如果你希望更贴近 tsc 的行为，其实更应该使用 TypeScript Compiler API 。"}),"\n",(0,t.jsx)(n.p,{children:"然而相比 Babel，TS Compiler API 的使用成本要高一些。我们直接看一个官方例子的精简版本，大致感受下其使用方式即可："}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"由于本节的重点并不是详细介绍 Compiler API 的使用，因此并不会对其进行非常详细介绍。"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import ts from 'typescript';\n\nfunction makeFactorialFunction() {\n  // 创建代表函数名 factorial 的 Identifier 结点\n  const functionName = ts.factory.createIdentifier('factorial');\n  // 创建代表参数名 n 的 Identifier 结点\n  const paramName = ts.factory.createIdentifier('n');\n  // 创建参数类型结点\n  const paramType = ts.factory.createKeywordTypeNode(\n    ts.SyntaxKind.NumberKeyword\n  );\n\n  // 创建参数的声明\n  const parameter = ts.factory.createParameterDeclaration(\n    undefined,\n    [],\n    undefined,\n    paramName,\n    undefined,\n    paramType\n  );\n\n  // 创建表达式 n ≤ 1\n  const condition = ts.factory.createBinaryExpression(\n    // n\n    paramName,\n    // ≤\n    ts.SyntaxKind.LessThanEqualsToken,\n    // 1\n    ts.factory.createNumericLiteral(1)\n  );\n\n  // 创建代码块\n  const ifBody = ts.factory.createBlock(\n    // 创建代码块内的返回语句\n    [ts.factory.createReturnStatement(ts.factory.createNumericLiteral(1))],\n    true\n  );\n\n  // 创建表达式 n - 1\n  const decrementedArg = ts.factory.createBinaryExpression(\n    paramName,\n    ts.SyntaxKind.MinusToken,\n    ts.factory.createNumericLiteral(1)\n  );\n\n  // 创建表达式 n * factorial(n - 1)\n  const recurse = ts.factory.createBinaryExpression(\n    paramName,\n    ts.SyntaxKind.AsteriskToken,\n    // 创建函数调用表达式\n    ts.factory.createCallExpression(functionName, undefined, [decrementedArg])\n  );\n\n  const statements = [\n    // 创建 IF 语句\n    ts.factory.createIfStatement(condition, ifBody),\n    // 创建 return 语句\n    ts.factory.createReturnStatement(recurse),\n  ];\n\n  // 创建函数声明\n  return ts.factory.createFunctionDeclaration(\n    undefined,\n    [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],\n    undefined,\n    functionName,\n    undefined,\n    [parameter],\n    // 函数返回值类型\n    ts.factory.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword),\n    // 函数体\n    ts.factory.createBlock(statements, true)\n  );\n}\n\n// 创建一个虚拟的源文件\nconst resultFile = ts.createSourceFile(\n  './source.ts',\n  '',\n  ts.ScriptTarget.Latest,\n  false,\n  ts.ScriptKind.TS\n);\n\nconst printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });\n\nconst result = printer.printNode(\n  ts.EmitHint.Unspecified,\n  makeFactorialFunction(),\n  resultFile\n);\n\nconsole.log(result);\n"})}),"\n",(0,t.jsx)(n.p,{children:"这么一长串代码，最后会生成这样的一段函数声明："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export function factorial(n: number): number {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["在这个例子中，我们从最基础的 identifier （代表变量名的结点）开始创建，组装参数、if 语句条件与代码块、函数的返回语句，最后通过 ",(0,t.jsx)(n.code,{children:"createFunctionDeclaration"})," 完成组装。要想流畅地使用，你需要对 Expression、Declaration、Statement 等 AST 的结点类型有比较清晰地了解，比如上面的 If 语句需要使用哪些 token 来组装，还需要了解 TypeScript 的 AST，如 interface、类型别名、装饰器等实际的 AST 结构。"]}),"\n",(0,t.jsxs)(n.p,{children:["TypeScript Compiler API 和 Babel、JSCodeShift 等工具的使用方式都不同，Babel 是声明式的 Visitor 模式，我们声明对哪一部分语句做哪些处理，然后 Babel 在遍历 AST 时（",(0,t.jsx)(n.code,{children:"@babel/traverse"}),"），发现这些语句被注册了操作，就进行对应地执行："]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"以下示例来自于神光的文章分享，也推荐各位有兴趣进一步学习编译原理的同学关注神光老师的社区分享。"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const { declare } = require("@babel/helper-plugin-utils");\n\n// 不允许函数类型的赋值\nconst noFuncAssignLint = declare((api, options, dirname) => {\n  api.assertVersion(7);\n\n  return {\n    pre(file) {\n      file.set("errors", []);\n    },\n    visitor: {\n      AssignmentExpression(path, state) {\n        const errors = state.file.get("errors");\n        const assignTarget = path.get("left").toString();\n        const binding = path.scope.getBinding(assignTarget);\n        if (binding) {\n          if (\n            binding.path.isFunctionDeclaration() ||\n            binding.path.isFunctionExpression()\n          ) {\n            const tmp = Error.stackTraceLimit;\n            Error.stackTraceLimit = 0;\n            errors.push(\n              path.buildCodeFrameError("can not reassign to function", Error)\n            );\n            Error.stackTraceLimit = tmp;\n          }\n        }\n      },\n    },\n    post(file) {\n      console.log(file.get("errors"));\n    },\n  };\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"而 jscodeshift 则提供的是命令式的 API："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'module.exports = function (fileInfo, api) {\n  return api\n    .jscodeshift(fileInfo.source)\n    .findVariableDeclarators("foo")\n    .renameTo("bar")\n    .toSource();\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"虽然命令式看起来很简单，但却可能导致对 AST 节点的遗漏（如果底层封装没有完全覆盖掉边界情况），就像鱼和熊掌不可兼得一样。而 TypeScript Compiler API 同样属于命令式，只不过它的使用风格并非链式，而更像是组合式。"}),"\n",(0,t.jsx)(n.p,{children:"铺垫了这么多，是时候请出我们本节的主角了。"}),"\n",(0,t.jsxs)(n.h2,{id:"使用-ts-morph",children:["使用 ts-morph",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-ts-morph",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"上面的例子看下来，可能有部分同学已经被劝退了，这一堆眼花缭乱的 API，我咋知道啥时候该用哪个，难道还要先从头学一遍编译原理？"}),"\n",(0,t.jsxs)(n.p,{children:["当然不，你可以永远相信 JavaScript 社区。为了简化 TypeScript AST 的操作，我们本节的主角 ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/ts-morph",target:"_blank",rel:"noopener noreferrer",children:"ts-morph"})," 诞生了，它的原名为 ",(0,t.jsx)(n.code,{children:"ts-simple-ast"}),"，从这两个名字你都能感受到它的目的：",(0,t.jsx)(n.strong,{children:"让 AST 操作更简单一些"}),"（morph 意为变形）。"]}),"\n",(0,t.jsx)(n.p,{children:"我们直接来看它的使用方式，直观地感受下它是如何实现更简单的 AST 操作的："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import path from 'path';\nimport chalk from 'chalk';\nimport { Project, SyntaxKind } from 'ts-morph';\n\n// 实例化一个“项目实例”\nconst p = new Project();\n\n// 将某个路径的文件添加到这个项目内\nconst source = p.addSourceFileAtPath(path.resolve(__dirname, './source.ts'));\n\n/**\n * 创建一个接口\n *\n * interface IUser { }\n */\nconst interfaceDec = source.addInterface({\n  name: 'IUser',\n  properties: [],\n});\n\n// 新增属性\ninterfaceDec.addProperties([\n  {\n    name: 'name',\n    type: 'string',\n  },\n  {\n    name: 'age',\n    type: 'number',\n  },\n]);\n\n// 添加 JSDoc 注释 @author Linbudu\ninterfaceDec.addJsDoc({\n  tags: [\n    {\n      tagName: 'author',\n      text: 'Linbudu',\n    },\n  ],\n});\n\n// 添加泛型 T extends Record<string, any>\ninterfaceDec.addTypeParameter({\n  name: 'T',\n  constraint: 'Record<string, any>',\n});\n\n// 获取接口名称\ninterfaceDec.getName();\n\n// 删除这个接口声明\ninterfaceDec.remove();\n\n// 创建一条导入：import { readFile, rmSync } from 'fs';\nconst importDec = source.addImportDeclaration({\n  namedImports: ['readFile', 'rmSync'],\n  moduleSpecifier: 'fs',\n});\n\n// 新增具名导入 appendFile\nimportDec.addNamedImport('appendFile');\n// 设置默认导入 fs\nimportDec.setDefaultImport('fs');\n\n// 删除默认导入\nimportDec.removeDefaultImport();\n// 删除命名空间导入\nimportDec.removeNamespaceImport();\n\n// 删除这条导入声明\nimportDec.remove();\n"})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，ts-morph 提供了一系列直观的封装方法，只要调用这些方法就可以完成对 AST 的各种操作，包括新增、更新、删除、读取等等！"}),"\n",(0,t.jsx)(n.p,{children:"通过使用 ts-morph，你可以使用非常简便的方式来完成各种有趣好玩的操作，比如我们下面会讲到的为 React 组件添加 memo、检查并更新导入语句、从 JSON 文件转换到 TypeScript 类型等等。而实际实现中，当然也是基于 Compiler API 的封装，但是它屏蔽了 Statement、Expression、Declaration、Token 等等概念，直接提供给你应用层的实现：创建一个接口，添加泛型参数，添加属性，添加继承，将其设置为导出，完成！在这个过程中，你并不需要理解底层发生了哪些 AST 结点的变化和操作。"}),"\n",(0,t.jsx)(n.p,{children:"光是这样，其实还是具有一定使用成本，毕竟要对 AST 进行操作，还是需要分析出整个 AST 结构，以及定位到需要操作的目标 AST 结点。如果是和我一样没有学习过编译原理的同学，这一步仍然是天堑。"}),"\n",(0,t.jsxs)(n.p,{children:["感谢万能的社区，我们可以使用 ",(0,t.jsx)(n.a,{href:"https://ts-ast-viewer.com/#",target:"_blank",rel:"noopener noreferrer",children:"TS-AST-Viewer"})," 这个在线网页来直观地检查一段代码的 AST 结构："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"从左到右依次是输入的源码（左上）与对应的 Compiler API 代码（左下）、AST 结构以及其在 TypeScript 内部的编译产物。"}),"\n",(0,t.jsx)(n.p,{children:"你可以通过右上角的配置来调整 TS 版本等功能："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["除了 TS AST Viewer 以外，此前你可能也使用过支持数十种语言或 SDL，以及其对应的 parser 的 ",(0,t.jsx)(n.a,{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer",children:"AST Explorer"}),"，它们的功能是类似的，但 AST Explorer 目前并不支持使用 TypeScript Compiler API 来解析 TS 代码："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"有了 TS AST Viewer，我们的操作流程就会变得非常流畅了。首先一级级向下找到目标 AST 结点，这一步我们可以使用 ts-morph 提供的 getFirstChildByKind 方法来获取一个 AST 结点内我们需要的子结点，“ByKind” 的 Kind 指的是  TypeScript Compiler API 内的 SyntaxKind 枚举，它描述了所有可能的 AST 结点类型。"}),"\n",(0,t.jsxs)(n.p,{children:["拿到目标 AST 结点后，我们就可以调用上面已经提供好的方法（如导入声明的 ",(0,t.jsx)(n.code,{children:"getModuleSpecifierValue"})," 方法可以直接获得此导入的模块名），最后保存即可。"]}),"\n",(0,t.jsx)(n.p,{children:"最后，ts-morph 其实也并不能完全替代原生 Compiler API，它并没有对 Block 内的 AST 操作进行封装，比如最开始我们使用 Compiler API 创建函数的例子，如果换成 ts-morph ，那么对于函数体内的逻辑它是无能为力的，你要么直接写入字符串，要么将这部分仍然使用原生的 Compiler API 实现。"}),"\n",(0,t.jsxs)(n.h2,{id:"ast-checker-与-codemod",children:["AST Checker 与 CodeMod",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ast-checker-与-codemod",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"了解了 ts-morph 的基本使用，接下来我们就通过几个具有实际意义的示例进一步掌握它。这些示例基本都是我遇见过的实际场景，如果不通过 AST 操作，就需要自己手动一个个处理。"}),"\n",(0,t.jsx)(n.p,{children:"这些操作其实可以分为两大类：AST Checker 与 CodeMod。其中 AST Checker 指的是完全不进行新增/更新/删除操作，只是通过 AST + 预设的条件检查源码是否符合要求，比如不允许调用某个方法、不允许默认导出、要求某个导入必须存在，都属于 AST Checker 的范畴。"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"关于 AST Checker 与 ESLint 的区别，请参考扩展阅读部分。"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["而 CodeMod 你此前可能已经使用过，它通常会在基础框架发生大版本更新时出现，用来降低使用者的迁移成本，比如 Antd Design 的 ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/@ant-design/codemod-v4",target:"_blank",rel:"noopener noreferrer",children:"codemod"}),"，Material UI 的 ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/@mui/codemod",target:"_blank",rel:"noopener noreferrer",children:"codemod"})," 等，这些 codemod 会进行依赖升级、配置文件更新以及源码更新等操作，这里我们指的 codemod，其实就只是源码更新这一部分。它需要对源码进行新增、更新以及删除等等操作。"]}),"\n",(0,t.jsx)(n.p,{children:"接下来我们会使用 ts-morph 来实现数个示例，它们没有什么难度，毕竟我们的目的在于熟悉“分析-定位-处理-保存”这个工作流程嘛。而且有了 ts-morph 的加持，很多 AST 操作的难度都会下降几个级别。"}),"\n",(0,t.jsxs)(n.h3,{id:"示例导入语句",children:["示例：导入语句",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例导入语句",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"许多场景的 AST 操作中，其实都会涉及对导入语句的处理。比如 CodeMod 会将你旧版本的导入更新为新版本的导入，或者更换导入语句的导入路径（模块名），而在某些工程场景下，AST Checker 也会检查代码中是否进行了必需的 polyfill 导入。"}),"\n",(0,t.jsx)(n.p,{children:"我们的源码如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { readFileSync } from 'fs';\nimport 'some_required_polyfill';\n"})}),"\n",(0,t.jsx)(n.p,{children:"操作后的代码如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import 'some_required_polyfill';\nimport { readFile } from \"fs/promises\";\n"})}),"\n",(0,t.jsx)(n.p,{children:"在这个例子中，我们希望进行两种操作："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["将来自于 fs 的 sync api 导入，更换为来自 ",(0,t.jsx)(n.code,{children:"fs/promise"})," 的 async api，如 ",(0,t.jsx)(n.code,{children:"import { readFile } from 'fs/promises'"})]}),"\n",(0,t.jsxs)(n.li,{children:["检查是否存在对 ",(0,t.jsx)(n.code,{children:"some_required_polyfill"})," 的导入"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"首先第一步，一定是分析源代码的 AST 结构："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"整理一下思路："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"将 fs 更改为 fs/promises"}),"\n",(0,t.jsx)(n.li,{children:"将来自 fs 的，以 Sync 结尾的导入进行更改"}),"\n",(0,t.jsxs)(n.li,{children:["检查是否存在以 ",(0,t.jsx)(n.code,{children:"some_required_polyfill"})," 为导入名的导入声明"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"直接看具体实现："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import path from 'path';\nimport { Project, SyntaxKind, SourceFile, ImportDeclaration } from 'ts-morph';\nimport { uniq } from 'lodash';\n\nconst p = new Project();\n\nconst source = p.addSourceFileAtPath(path.resolve(__dirname, './source.ts'));\n\n// 获取所有导入声明中的模块名\nexport function getImportModuleSpecifiers(source: SourceFile): string[] {\n  return uniq(\n    source.getImportDeclarations().map((i) => i.getModuleSpecifierValue())\n  );\n}\n\nconst REQUIRED = ['some_required_polyfill'];\n\nconst allDeclarations = source.getImportDeclarations();\n\nconst allSpecifiers = getImportModuleSpecifiers(source);\n\nif (!REQUIRED.every((i) => allSpecifiers.includes(i))) {\n  throw new Error('missing required polyfill');\n}\n\n// 设计一个通用的替换模式\nconst FORBIDDEN = [\n  {\n    // 要被替换的导入路径\n    moduleSpecifier: 'fs',\n    // 替换为这个值\n    replacement: 'fs/promises',\n    // 原本的导入如何更新\n    namedImportsReplacement: (raw: string) =>\n      raw.endsWith('Sync') ? raw.slice(0, -4) : raw,\n  },\n];\n\nconst FORBIDDEN_SPECIFIERS = FORBIDDEN.map((i) => i.moduleSpecifier);\n\nfor (const specifier of allSpecifiers) {\n  if (FORBIDDEN_SPECIFIERS.includes(specifier)) {\n    const target = allDeclarations.find(\n      (i) =>\n        // 检查是否是要被替换的模块\n        i.getModuleSpecifierValue() === specifier\n    );\n\n    // 找到要被替换的导入声明\n    const replacementMatch = FORBIDDEN.find(\n      (i) => i.moduleSpecifier === specifier\n    );\n\n    // 收集原本的具名导入\n    const namedImports = target?.getNamedImports() ?? [];\n\n    // 替换为新的具名导入\n    const namedImportsReplacement = namedImports.map((i) =>\n      replacementMatch?.namedImportsReplacement(i.getText())\n    );\n\n    // 移除原本的导入\n    target?.remove();\n\n    // 增加新的导入\n    source.addImportDeclaration({\n      moduleSpecifier: replacementMatch?.replacement!,\n      namedImports: namedImportsReplacement.map((i) => ({\n        name: i!,\n      })),\n    });\n  }\n}\n\nconsole.log(source.getText());\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里我们使用的 API 主要包括："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source.getImportDeclarations()"}),"，获取源码的所有导入声明"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source.addImportDeclaration"}),"，源码新增导入声明语句"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"i.getModuleSpecifierValue"}),"，获取导入声明的模块名（或者说导入路径）"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"target?.getNamedImports"}),"，获取导入声明的具名导入"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"扩展：如何处理默认导入、命名空间导入的形式？"}),"\n",(0,t.jsxs)(n.h3,{id:"示例添加装饰器",children:["示例：添加装饰器",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例添加装饰器",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在装饰器一节我们说到，可以使用方法装饰器来测量一个方法的调用耗时，但一个一个加未免太过麻烦，更好的方式是通过 AST 来批量处理目标 Class 的目标方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"abstract class Handler {\n  abstract handle(input: unknown): void;\n}\n\nclass NotHandler {}\n\nclass EventHandler implements Handler {\n  handle(input: unknown): void {\n    // ...\n  }\n}\n\nclass MessageHandler implements Handler {\n  handle(input: unknown): void {\n    // ...\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"其处理结果应当是这样的："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"abstract class Handler {\n  abstract handle(input: unknown): void;\n}\n\nclass NotHandler {}\n\nclass EventHandler implements Handler {\n    @PerformanceMark()\n    handle(input: unknown): void {\n    // ...\n  }\n}\n\nclass MessageHandler implements Handler {\n    @PerformanceMark()\n    handle(input: unknown): void {\n    // ...\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里我们使用抽象类来区分目标 Class，即只有实现了某一抽象类的 Class 才需要进行处理。"}),"\n",(0,t.jsx)(n.p,{children:"首先分析 AST 结构："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"整理一下实现思路："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"拿到所有实现了 Handler 抽象类的 Class 声明"}),"\n",(0,t.jsxs)(n.li,{children:["为这些声明内部的 handle 方法添加 ",(0,t.jsx)(n.code,{children:"@PerformanceMark"})," 装饰器"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"完整实现如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import path from 'path';\nimport { Project, ClassDeclaration } from 'ts-morph';\n\nconst p = new Project();\n\nconst source = p.addSourceFileAtPath(path.resolve(__dirname, './source.ts'));\n\nconst IMPLS = ['Handler'];\n\n// 获取所有目标 Class 声明\nconst filteredClassDeclarations: ClassDeclaration[] = source\n  .getClasses()\n  .filter((cls) => {\n    const impls = cls.getImplements().map((impl) => impl.getText());\n    return IMPLS.some((impl) => impls.includes(impl));\n  });\n\nconst METHODS = ['handle'];\n\nfor (const cls of filteredClassDeclarations) {\n  // 拿到所有方法\n  const methods = cls.getMethods().map((method) => method.getName());\n  for (const method of methods) {\n    if (METHODS.includes(method)) {\n      // 拿到目标方法声明\n      const methodDeclaration = cls.getMethod(method)!;\n      methodDeclaration.addDecorator({\n        name: 'PerformanceMark',\n        arguments: [],\n      });\n    }\n  }\n}\n\nconsole.log(source.getText());\n"})}),"\n",(0,t.jsx)(n.p,{children:"我们主要使用了这么几个 API："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source.getClasses"}),"，获取源码中所有的 Class 声明"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cls.getImplements"}),"，获取 Class 声明实现的抽象类"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cls.getMethods"})," 与 ",(0,t.jsx)(n.code,{children:"cls.getMethod"}),"，获取 Class 声明中的方法声明"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"methodDeclaration.addDecorator"}),"，为方法声明新增装饰器"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"扩展：试试给方法的参数也添加方法参数装饰器？"}),"\n",(0,t.jsxs)(n.h3,{id:"示例添加-memo",children:["示例：添加 memo",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例添加-memo",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"为 React 组件添加 memo 是一个常见的优化手段，我们是否可以通过 AST 操作来批量为组件添加 memo ？"}),"\n",(0,t.jsx)(n.p,{children:"我们的源码是这样的："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { useState } from 'react';\n\nconst Comp = () => {\n  return <></>;\n};\n\nexport default Comp;\n"})}),"\n",(0,t.jsx)(n.p,{children:"处理后的结果则是这样的："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { memo, useState } from 'react';\n\nconst Comp = () => {\n  return <></>;\n};\n\nexport default memo(Comp);\n"})}),"\n",(0,t.jsx)(n.p,{children:"也就是说，我们需要添加具名导入，以及修改默认导出表达式两个步骤。"}),"\n",(0,t.jsx)(n.p,{children:"首先分析 AST 结构："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，我们需要处理的两处分别为 NamedImports 与 ExportAssignment ，接下来就简单了："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import path from 'path';\nimport { Project, SyntaxKind, SourceFile } from 'ts-morph';\n\nconst p = new Project();\n\nconst source = p.addSourceFileAtPath(path.resolve(__dirname, './source.tsx'));\n\n// 获取默认导出\nconst exportDefaultAssignment = source\n  .getFirstChildByKind(SyntaxKind.SyntaxList)!\n  .getFirstChildByKind(SyntaxKind.ExportAssignment)!;\n\n// 获取原本的导出语句的组件名\nconst targetIdentifier = exportDefaultAssignment\n  ?.getFirstChildByKind(SyntaxKind.Identifier)\n  ?.getText()!;\n\n// 获取 react 对应的导入声明\nconst reactImport = source.getImportDeclaration(\n  (imp) => imp.getModuleSpecifierValue() === 'react'\n)!;\n\n// 新增一个具名导入\nreactImport.insertNamedImport(0, 'memo');\n\n// 新增 memo 包裹\n!targetIdentifier.startsWith('memo') &&\n exportDefaultAssignment.setExpression(`memo(${targetIdentifier})`);\n\nconsole.log(source.getText());\n"})}),"\n",(0,t.jsx)(n.p,{children:"我们主要调用了这些 API："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source.getFirstChildByKind(SyntaxKind.SyntaxList)"}),"，获取一个 AST 结点下首个目标类型的子结点，在上面我们都是直接使用 ",(0,t.jsx)(n.code,{children:"source.getClasses()"})," 形式获取目标类型，而这里则是另外一种方式，",(0,t.jsx)(n.code,{children:"source.getFirstChildByKind(SyntaxKind.SyntaxList).getFirstChildByKind(SyntaxKind.ExportAssignment)"})," 即意味着拿到源码中的第一个导出语句。需要注意的是，使用这种方式必须首先拿到 ",(0,t.jsx)(n.code,{children:"SyntaxKind.SyntaxList"})," 类型的子结点。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source.getImportDeclaration"}),"，获取源码中所有的导入声明"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"imp.getModuleSpecifierValue"}),"，获取导入的模块名"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"import.insertNamedImport"}),"，为导入声明插入一个具名导入"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exportDefaultAssignment.setExpression"}),"，修改导出语句的表达式"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["扩展：上面我们直接将默认导出语句作为了组件，然后通过修改它的表达式来实现添加 memo。不妨试试如何支持 ",(0,t.jsx)(n.code,{children:"export const"})," 形式的组件导出？"]}),"\n",(0,t.jsxs)(n.h3,{id:"示例json-转类型定义",children:["示例：JSON 转类型定义",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例json-转类型定义",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"这个例子可能是最最刚需的一个了，把后端响应的 JSON 放进去，就得到了 TypeScript 的类型定义。"}),"\n",(0,t.jsx)(n.p,{children:"我们输入的 json 是这样的："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "linbudu",\n  "age": 22,\n  "sex": "male",\n  "favors": [\n    "execrise",\n    "writting",\n    999\n  ],\n  "job": {\n    "name": "programmer",\n    "stack": "javascript",\n    "company": "alibaba"\n  },\n  "pets": [\n    {\n      "id": 1,\n      "type": "dog"\n    },\n    {\n      "id": 2,\n      "type": "cat"\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"最终输出的类型定义是这样的："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export interface IStruct {\n    name: string;\n    age: number;\n    sex: string;\n    favors: (string | number)[];\n    IJob: IJob;\n    pets: IStructPets[];\n}\n\nexport interface IJob {\n    name: string;\n    stack: string;\n    company: string;\n}\n\nexport interface IStructPets {\n    id: number;\n    type: string;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"具体实现其实并不复杂，由于 JSON 的限制，我们无需处理函数之类的类型，但也无法实现字面量类型与枚举这样精确的定义。然而绝大部分情况下，JSON 中的值类型其实还是字符串、数字、布尔值以及对象与数组这五位。"}),"\n",(0,t.jsx)(n.p,{children:"我们来整理一下思路："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"遍历 JSON"}),"\n",(0,t.jsxs)(n.li,{children:["对于原始类型元素，直接使用 typeof （注意，是 JavaScript 中的 typeof，不是类型查询操作符）的值作为类型，调用 ",(0,t.jsx)(n.code,{children:"interfaceDeclaration.addProperty"})," 方法新增属性"]}),"\n",(0,t.jsxs)(n.li,{children:["对于对象类型，遍历此对象类型，将此对象类型生成的接口也调用 ",(0,t.jsx)(n.code,{children:"source.addInterface"})," 方法添加到源码中，并将其名称调用 ",(0,t.jsx)(n.code,{children:"interfaceDeclaration.addProperty"})," 添加到顶层的对象中"]}),"\n",(0,t.jsx)(n.li,{children:"对于数组类型，如果其中是原始类型，提取所有原始类型值的类型，合并为联合类型，如果其中是对象类型，则遍历其中的对象类型，类似上一步。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"来看完整的代码："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import path from 'path';\nimport fs from 'fs-extra';\nimport { Project } from 'ts-morph';\nimport { capitalize, uniq } from 'lodash';\n\nimport json from './source.json';\n\nconst p = new Project();\n\nconst filePath = path.resolve(__dirname, './source.ts');\n\nfs.rmSync(filePath);\nfs.ensureFileSync(filePath);\n\nconst source = p.addSourceFileAtPath(filePath);\n\nfunction objectToInterfaceStruct(\n  identifier: string,\n  input: Record<string, unknown>\n) {\n  const interfaceDeclaration = source.addInterface({\n    name: identifier,\n    isExported: true,\n  });\n\n  for (const [key, value] of Object.entries(input)) {\n    // 最简单的情况，直接添加属性\n    if (['string', 'number', 'boolean'].includes(typeof value)) {\n      interfaceDeclaration.addProperty({\n        name: key,\n        type: typeof value,\n      });\n    }\n\n    // 简单起见，不处理混合或者更复杂的情况\n    if (Array.isArray(value)) {\n      // 对象类型元素\n      const objectElement = value.filter((v) => typeof v === 'object');\n      // 原始类型元素\n      const primitiveElement = value.filter((v) =>\n        ['string', 'number', 'boolean'].includes(typeof v)\n      );\n\n      const primitiveElementTypes = uniq(primitiveElement.map((v) => typeof v));\n\n      // 对对象类型元素，只取第一个来提取类型\n      if (objectElement.length > 0) {\n        // 再次遍历此方法\n        const objectType = objectToInterfaceStruct(\n          `${identifier}${capitalize(key)}`,\n          objectElement[0]\n        );\n        interfaceDeclaration.addProperty({\n          name: key,\n          type: `${objectType.getName()}[]`,\n        });\n      } else {\n        interfaceDeclaration.addProperty({\n          name: key,\n          // 使用联合类型 + 数组作为此属性的类型\n          type: `(${primitiveElementTypes.join(' | ')})[]`,\n        });\n      }\n\n      continue;\n    }\n\n    // 对于对象类型，再次遍历\n    if (typeof value === 'object') {\n      const nestedStruct = objectToInterfaceStruct(\n        `I${capitalize(key)}`,\n        value as Record<string, unknown>\n      );\n\n      interfaceDeclaration.addProperty({\n        name: key,\n        // 使用从接口结构得到的接口名称\n        type: nestedStruct.getName(),\n      });\n    }\n  }\n\n  return interfaceDeclaration;\n}\n\nobjectToInterfaceStruct('IStruct', json);\n\nsource.saveSync();\n\nconsole.log(source.getText());\n"})}),"\n",(0,t.jsx)(n.p,{children:"在这一部分，我们主要使用两个 API ："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"source.addInterface"}),"，在源码中新增一个接口声明，如："]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"interfaceDeclaration.addProperty"}),"，为接口声明新增一个属性，如："]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"扩展：上面的处理逻辑并没有很好地处理掉对象类型与数组类型中的复杂情况，比如数组中既有原始类型也有对象类型，不妨试着完善一下这部分逻辑？"}),"\n",(0,t.jsxs)(n.h3,{id:"示例基于-jsdoc-的任务过期检测",children:["示例：基于 JSDoc 的任务过期检测",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例基于-jsdoc-的任务过期检测",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"很多时候，我们可能会写一些存在过期时效的代码，比如紧急更新、临时 bugfix 等，如果在规模较为庞大的代码库中，很可能你写完就忘记这个方法只是临时方法了。这个示例中，我们会使用 JSDoc 的形式来标记一个方法的过期时间，并通过 AST 来检查此方法是否过期："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"/**\n * @expires 2022-08-01\n * @author linbudu\n * @description 这是一个临时的 bugfix，需要在下次更新时删除\n */\nfunction tempFix() {}\n\n/**\n * @expires 2022-01-01\n * @author linbudu\n * @description 这是一个临时的兼容\n */\nfunction tempSolution() {}\n\n/**\n * 工具方法\n */\nfunction utils() {}\n"})}),"\n",(0,t.jsx)(n.p,{children:"由于 TS AST Viewer 目前不支持 JSDoc 的解析，这里我们直接来整理一下实现思路："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"检查所有函数的 JSDoc 区域"}),"\n",(0,t.jsxs)(n.li,{children:["如果发现了 ",(0,t.jsx)(n.code,{children:"@expires"}),"，对比其标注的过期时间与当前的时间"]}),"\n",(0,t.jsxs)(n.li,{children:["如果过期，抛出错误，并指出 ",(0,t.jsx)(n.code,{children:"@author"})," 标记的作者"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"直接来看实现："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import path from 'path';\nimport chalk from 'chalk';\nimport { Project, SyntaxKind, SourceFile, FunctionDeclaration } from 'ts-morph';\n\nconst p = new Project();\n\nconst source = p.addSourceFileAtPath(path.resolve(__dirname, './source.ts'));\n\n// 收集所有的函数声明\nexport function getAllFunctionDeclarations(\n  source: SourceFile\n): FunctionDeclaration[] {\n  const functionDeclarationList = source\n    .getFirstChildByKind(SyntaxKind.SyntaxList)!\n    .getChildrenOfKind(SyntaxKind.FunctionDeclaration);\n\n  return functionDeclarationList;\n}\n\n// 收集所有存在 JSDoc 的函数声明\nconst filteredFuncDeclarations = getAllFunctionDeclarations(source).filter(\n  (func) => func.getJsDocs().length > 0\n);\n\nfor (const func of filteredFuncDeclarations) {\n  const jsdocContent = func.getJsDocs()[0];\n\n  const tags = jsdocContent.getTags();\n\n  const expireTag = tags.find((tag) => tag.getTagName() === 'expires');\n\n  // 如果不存在 @expires 标签，则跳过\n  if (!expireTag) continue;\n\n  // 将其值处理为可解析的字符串\n  const [, expireDesc] = expireTag.getText().replace(/\\*|\\n/g, '').split(' ');\n\n  const expireDate = new Date(expireDesc).getTime();\n  const now = new Date().getTime();\n\n  // 对比时间\n  if (expireDate < now) {\n    const authorTag = tags.find((tag) => tag.getTagName() === 'author');\n    const [, author] = authorTag\n      ? authorTag.getText().replace(/\\*|\\n/g, '').split(' ')\n      : 'unknown';\n\n    console.log(\n      chalk.red(\n        `Function ${chalk.yellow(\n          func.getName()\n        )} is expired, author: ${chalk.white(author)}`\n      )\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"使用效果是这样的："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["扩展：上面的例子只能基于硬编码的日期进行处理，而另外一种可能的情况是基于版本来做检查，比如某一部分代码应该在 ",(0,t.jsx)(n.code,{children:"package.json"})," 中的 ",(0,t.jsx)(n.code,{children:"version"})," 到达 ",(0,t.jsx)(n.code,{children:"1.0.0"})," 以前被再次优化一遍，不妨来试一下支持这种情况？"]}),"\n",(0,t.jsxs)(n.p,{children:["以上的示例应该能帮助你领会到，使用 ts-morph 来进行源码检查与操作的窍门。同时你可能注意到了，上面的示例我们封装了不少方法，如 ",(0,t.jsx)(n.code,{children:"getAllFunctionDeclarations"}),"、",(0,t.jsx)(n.code,{children:"getClassDeclarations"}),"、",(0,t.jsx)(n.code,{children:"getImportDeclarations"})," 等，这也是我比较推荐的一种方式：在 ts-morph 上进一步封装 AST 方法，让 AST 操作就像调用 Lodash 方法一样简单。"]}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在这一节，我们主要学习了如何使用 TypeScript 的 Compiler API 和 ts-morph 来对 TS 源码进行操作，就像数据库的 CRUD 一样，对源码的常见操作其实也可以被归类为检查、变更、新增这么几类。"}),"\n",(0,t.jsx)(n.p,{children:"对没有系统学习过编译原理的同学，其实更推荐使用 ts-morph 来简化这些 AST 操作。原因上面我们也已经了解到了，ts-morph 通过更符合直觉的 API 封装掉了很多底层的操作，能够大大地简化使用成本与理解负担。"}),"\n",(0,t.jsx)(n.p,{children:"当然，由于封装带来了黑盒的底层实现与各种不确定性，如果你对操作的稳定性要求高，最好的方式还是使用原生的 Compiler API 或 Babel 一点点进行实现。"}),"\n",(0,t.jsx)(n.p,{children:"而通过 TS AST Viewer 的帮助，我们还可以更进一步简化操作。检查 AST 结构、确定目标 AST 结构、执行操作以及保存，就能完成一次处理。"}),"\n",(0,t.jsx)(n.p,{children:"最后，除了本节给到的操作示例，你还可以根据自身的实际需要来探索更多有趣的例子，试着来感受“换一种方式使用 TypeScript”的乐趣吧！"}),"\n",(0,t.jsxs)(n.h2,{id:"扩展阅读",children:["扩展阅读",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展阅读",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"ast-checker-与-eslint",children:["AST Checker 与 ESLint",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ast-checker-与-eslint",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在上面的介绍中，听起来 AST Checker 和 ESLint 很相似，都是检查代码是否符合规则，并且 ESLint 也是通过 AST 来进行检查，如 AST Explorer 中使用 TypeScript ESLint Parser："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然而二者的差异实际上非常大。首先， Lint 不会涉及业务逻辑的检查，比如我们要求对某个 polyfill 的导入必须存在，或者要求必须调用某个全局的顶级方法，此时就应该是 AST Checker 的工作范畴，而非 Lint。Lint 更多关注的是纯粹的、完全不涉及业务逻辑的规则。"}),"\n",(0,t.jsx)(n.p,{children:"另外，Lint 规则的维度通常更高，比如我要求团队内的所有代码库都必须遵守一系列规则。而 AST Checker 的规则通常只是项目维度的，比如只在几个项目内要求遵守这条规则，这也就意味着 AST Checker 的规则不具备或很难具备可推广性。"})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(x,{...e})}):x(e)}let u=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["TypeScript%20%E5%85%A8%E9%9D%A2%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%2F31.%E7%8E%A9%E8%BD%AC%20TypeScript%20AST%EF%BC%9AAST%20Checker%20%E4%B8%8E%20CodeMod.md"]={toc:[{text:"前置知识：Babel 的基本工作流程",id:"前置知识babel-的基本工作流程",depth:2},{text:"使用 TypeScript Compiler API",id:"使用-typescript-compiler-api",depth:2},{text:"使用 ts-morph",id:"使用-ts-morph",depth:2},{text:"AST Checker 与 CodeMod",id:"ast-checker-与-codemod",depth:2},{text:"示例：导入语句",id:"示例导入语句",depth:3},{text:"示例：添加装饰器",id:"示例添加装饰器",depth:3},{text:"示例：添加 memo",id:"示例添加-memo",depth:3},{text:"示例：JSON 转类型定义",id:"示例json-转类型定义",depth:3},{text:"示例：基于 JSDoc 的任务过期检测",id:"示例基于-jsdoc-的任务过期检测",depth:3},{text:"总结",id:"总结",depth:2},{text:"扩展阅读",id:"扩展阅读",depth:2},{text:"AST Checker 与 ESLint",id:"ast-checker-与-eslint",depth:3}],title:"31.玩转 TypeScript AST：AST Checker 与 CodeMod",headingTitle:"31.玩转 TypeScript AST：AST Checker 与 CodeMod",frontmatter:{}}}}]);