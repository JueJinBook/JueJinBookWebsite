"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["25995"],{560976:function(e,n,i){i.r(n),i.d(n,{default:()=>L});var t=i(552676),r=i(740453);let s=i.p+"static/image/59891884373f33f064c29231441c39ce.abe1f8a9.webp",c=i.p+"static/image/0f6bfc65680238c44e18bf17a97fadbe.49dfaff2.webp",a=i.p+"static/image/ce094155ae970b965717cf5078c1212f.4ce22f6f.webp",d=i.p+"static/image/49bc0a249fbd52a1028adbfdb9c7a3fd.30659392.webp",o=i.p+"static/image/cd879f62b7ccab4f0f30cee4327ecd0c.06452416.gif",l=i.p+"static/image/86efc1542b58933a0a7e7d05a769e539.79b61e98.webp",p=i.p+"static/image/8d5cfd4d368c425a9edc49cc16dfdd80.941e0381.webp",m=i.p+"static/image/0930553501981e4e8b18460d5b4dbafd.5fef587d.webp",h=i.p+"static/image/04b5d0049928dd48da808911ecb15bef.cc19cd4e.webp",j=i.p+"static/image/3a59f0dbee6b396af1de125386187a53.fe5fed7c.webp",x=i.p+"static/image/0b9cf8aa726d83cdb4cf1780c8f3244f.6532a697.webp",g=i.p+"static/image/be9f2486fcb785db7abb32630e188356.a5794ca2.webp",b=i.p+"static/image/cb151a4280cd8a9ab95a40d898471bfb.6cc9d552.webp",u=i.p+"static/image/16478b3337c954925feacc7d9d60d614.9f9b2a34.webp",f=i.p+"static/image/3b9453af5fcab293eba58bdbd050c45e.e12c8eaf.webp",y=i.p+"static/image/02ff13450137a3edfe254a5d9fc664c8.f3c778cc.webp",R=i.p+"static/image/98003c1c9ceed9529e901f4a9697eba8.8aca6eb5.webp",E=i.p+"static/image/718ea5b41001223db91a76ae83995b82.cd81a191.webp",w=i.p+"static/image/cbbc21d01d83f3722cae27833439d033.57e65b97.gif",D=i.p+"static/image/ed34ff4a2094cdde29d8113ee716ddc0.b6904d1b.webp",v=i.p+"static/image/e0c557dae836aa1063cd04670beea753.06ce71bd.webp",C=i.p+"static/image/76f48965620032d6f1a3cf088cbcfbfa.36dc9e3a.webp",M=i.p+"static/image/78f226b33c9556fa53cee57b84bf146f.48de4796.webp",N=i.p+"static/image/5f7c8792722ec12222f83c9cbb1f19e7.e91fae3c.webp",A=i.p+"static/image/e796b19e820b3731252d40c095404d19.432cd7bc.webp",S=i.p+"static/image/6589bbdb1d8fb2fe165b6b9e52d0eeac.071f5487.webp",P=i.p+"static/image/10e85bd331c4648089afa3a96cff5bec.8f4c8287.webp",_=i.p+"static/image/bcf6a131de1f0590d7acd1272017fb14.6ac5716a.webp",B=i.p+"static/image/a2915dcf0fb6b80ecb5a0887686f2a36.a43a04c7.webp",k=i.p+"static/image/177489cfd5ecc158093429221ca53181.e348481e.webp",T=i.p+"static/image/41e1e9cd2811bc71263e5f9cb4bd5898.6d71be8c.webp",q=i.p+"static/image/bd7995ccbfe16075e6ceef1536d2686c.164629b0.webp",I=i.p+"static/image/7d89a43b56d712775cf5c8c4b52bf9ba.a8b25072.webp",z=i.p+"static/image/48a98cc05c44b30aebed1a7247a98bfd.6e7d9649.webp";function G(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",pre:"pre",code:"code",h2:"h2"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"121-会议室预订系统会议室管理模块-后端开发",children:["121. 会议室预订系统：会议室管理模块-后端开发",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#121-会议室预订系统会议室管理模块-后端开发",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"用户相关的功能，后端代码、用户端前端代码、管理端前端代码都写完了。"}),"\n",(0,t.jsx)(n.p,{children:"这节我们开始写下一个模块：会议室管理。"}),"\n",(0,t.jsx)(n.p,{children:"看下当时分析的需求："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:z,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:I,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"以及我们分析出来的接口："}),"\n",(0,t.jsxs)(n.table,{children:["\n",(0,t.jsxs)(n.thead,{children:["\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.th,{children:"接口路径"}),"\n",(0,t.jsx)(n.th,{children:"请求方式"}),"\n",(0,t.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.tbody,{children:["\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"/meeting_room/list"}),"\n",(0,t.jsx)(n.td,{children:"GET"}),"\n",(0,t.jsx)(n.td,{children:"会议室列表"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"/meeting_room/delete/:id"}),"\n",(0,t.jsx)(n.td,{children:"DELETE"}),"\n",(0,t.jsx)(n.td,{children:"会议室删除"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"/meeting_room/update/:id"}),"\n",(0,t.jsx)(n.td,{children:"PUT"}),"\n",(0,t.jsx)(n.td,{children:"会议室更新"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"/meeting_room/create"}),"\n",(0,t.jsx)(n.td,{children:"POST"}),"\n",(0,t.jsx)(n.td,{children:"会议室新增"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"/meeting_room/search"}),"\n",(0,t.jsx)(n.td,{children:"GET"}),"\n",(0,t.jsx)(n.td,{children:"会议室搜索"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"一共 5 个接口。"}),"\n",(0,t.jsx)(n.p,{children:"在后端项目下创建一个 meeting-room 模块："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"nest g resource meeting-room\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:q,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"修改下 meeting-room.entity.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class MeetingRoom {\n    \n    @PrimaryGeneratedColumn({\n        comment: '会议室ID'\n    })\n    id: number;\n\n    @Column({\n        length: 50,\n        comment: '会议室名字'\n    })\n    name: string;\n\n    @Column({\n        comment: '会议室容量'\n    })\n    capacity: number;\n\n    @Column({\n        length: 50,\n        comment: '会议室位置'\n    })\n    location: string;\n\n    @Column({\n        length: 50,\n        comment: '设备',\n        default: ''\n    })\n    equipment: string;\n\n    @Column({\n        length: 100,\n        comment: '描述',\n        default: ''\n    })\n    description: string;\n\n    @Column({\n        comment: '是否被预订',\n        default: false\n    })\n    isBooked: boolean;\n\n    @CreateDateColumn({\n        comment: '创建时间'\n    })\n    createTime: Date;\n\n    @UpdateDateColumn({\n        comment: '更新时间'\n    })\n    updateTime: Date;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"这个是根据当时我们的数据库设计来的："}),"\n",(0,t.jsxs)(n.table,{children:["\n",(0,t.jsxs)(n.thead,{children:["\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.th,{children:"字段名"}),"\n",(0,t.jsx)(n.th,{children:"数据类型"}),"\n",(0,t.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.tbody,{children:["\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"id"}),"\n",(0,t.jsx)(n.td,{children:"INT"}),"\n",(0,t.jsx)(n.td,{children:"会议室ID"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"name"}),"\n",(0,t.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,t.jsx)(n.td,{children:"会议室名字"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"capacity"}),"\n",(0,t.jsx)(n.td,{children:"INT"}),"\n",(0,t.jsx)(n.td,{children:"会议室容量"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"location"}),"\n",(0,t.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,t.jsx)(n.td,{children:"会议室位置"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"equipment"}),"\n",(0,t.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,t.jsx)(n.td,{children:"设备"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"description"}),"\n",(0,t.jsx)(n.td,{children:"VARCHAR(100)"}),"\n",(0,t.jsx)(n.td,{children:"描述"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"is_booked"}),"\n",(0,t.jsx)(n.td,{children:"BOOLEAN"}),"\n",(0,t.jsx)(n.td,{children:"是否被预订"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"create_time"}),"\n",(0,t.jsx)(n.td,{children:"DATETIME"}),"\n",(0,t.jsx)(n.td,{children:"创建时间"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"update_time"}),"\n",(0,t.jsx)(n.td,{children:"DATETIME"}),"\n",(0,t.jsx)(n.td,{children:"更新时间"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"在 entities 里引入下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:T,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,t.jsx)(n.p,{children:"会生成建表语句："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:k,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"在 mysql workbench 里点击刷新就可以看到这个表："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:B,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"点击第二个图标，查看表定义："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:_,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,t.jsx)(n.p,{children:"然后我们先来初始化下数据："}),"\n",(0,t.jsx)(n.p,{children:"在 MeetingRoomModule 引入 MeetingRoom 的 Repository："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:P,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:S,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@InjectRepository(MeetingRoom)\nprivate repository: Repository<MeetingRoom>;\n\ninitData() {\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后来写初始化数据的逻辑："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"initData() {\n    const room1 = new MeetingRoom();\n    room1.name = '木星';\n    room1.capacity = 10;\n    room1.equipment = '白板';\n    room1.location = '一层西';\n\n    const room2 = new MeetingRoom();\n    room2.name = '金星';\n    room2.capacity = 5;\n    room2.equipment = '';\n    room2.location = '二层东';\n\n    const room3 = new MeetingRoom();\n    room3.name = '天王星';\n    room3.capacity = 30;\n    room3.equipment = '白板，电视';\n    room3.location = '三层东';\n\n    this.repository.save([room1, room2, room3])\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"还需要像 user 模块那样，添加一个 init-data 的路由，浏览器访问么？"}),"\n",(0,t.jsx)(n.p,{children:"不用，可以用 repl 的模式来跑："}),"\n",(0,t.jsx)(n.p,{children:"添加 src/repl.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { repl } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n    const replServer = await repl(AppModule);\n    replServer.setupHistory(\".nestjs_repl_history\", (err) => {\n        if (err) {\n            console.error(err);\n        }\n    });\n}\nbootstrap();\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后在 package.json 里添加一个 scripts"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:A,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"repl": "nest start --watch --entryFile repl",\n'})}),"\n",(0,t.jsx)(n.p,{children:"把服务停掉，执行："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm run repl\n"})}),"\n",(0,t.jsx)(n.p,{children:"先查看下 MeetingRoomService 的方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"methods(MeetingRoomService)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:N,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后调用下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"get(MeetingRoomService).initData()\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:M,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"打印了 3 条 insert 语句，之后又把它 select 出来返回："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:C,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"数据库里也可以看到插入的三条数据："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们很多地方都是用的 repository.save，但如果你确定是 insert 或者 update 的时候，直接用 repository.insert  或者 repository.update 更好。"}),"\n",(0,t.jsx)(n.p,{children:"先 truncate table 清空数据："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:D,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"刷新可以看到，确实清空了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:w,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"把 save 换成 insert："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:E,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"重新跑一下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"get(MeetingRoomService).initData()\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:R,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"现在是批量插入了 3 条数据。"}),"\n",(0,t.jsx)(n.p,{children:"所以说确定是 insert 的时候 用 insert 比用 save 更好，能够批量插入数据。"}),"\n",(0,t.jsx)(n.p,{children:"同理，确定是 update 的时候，也不要用 save，因为它会先 select 一次，再确定是 udpate 还是 insert。"}),"\n",(0,t.jsx)(n.p,{children:"然后我们写一下 CRUD 的接口："}),"\n",(0,t.jsxs)(n.table,{children:["\n",(0,t.jsxs)(n.thead,{children:["\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.th,{children:"接口路径"}),"\n",(0,t.jsx)(n.th,{children:"请求方式"}),"\n",(0,t.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.tbody,{children:["\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"/meeting_room/list"}),"\n",(0,t.jsx)(n.td,{children:"GET"}),"\n",(0,t.jsx)(n.td,{children:"会议室列表"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"/meeting_room/delete/:id"}),"\n",(0,t.jsx)(n.td,{children:"DELETE"}),"\n",(0,t.jsx)(n.td,{children:"会议室删除"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"/meeting_room/update/:id"}),"\n",(0,t.jsx)(n.td,{children:"PUT"}),"\n",(0,t.jsx)(n.td,{children:"会议室更新"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"/meeting_room/create"}),"\n",(0,t.jsx)(n.td,{children:"POST"}),"\n",(0,t.jsx)(n.td,{children:"会议室新增"}),"\n"]}),"\n",(0,t.jsxs)(n.tr,{children:["\n",(0,t.jsx)(n.td,{children:"/meeting_room/search"}),"\n",(0,t.jsx)(n.td,{children:"GET"}),"\n",(0,t.jsx)(n.td,{children:"会议室搜索"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"在 MeetingRoomtController 增加一个 list 接口："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Post, Body, Patch, Param, Delete, Query, DefaultValuePipe } from '@nestjs/common';\nimport { MeetingRoomService } from './meeting-room.service';\nimport { generateParseIntPipe } from 'src/utils';\n\n@Controller('meeting-room')\nexport class MeetingRoomController {\n  constructor(private readonly meetingRoomService: MeetingRoomService) {}\n\n  @Get('list')\n  async list(\n    @Query('pageNo', new DefaultValuePipe(1), generateParseIntPipe('pageNo')) pageNo: number,\n    @Query('pageSize', new DefaultValuePipe(2), generateParseIntPipe('pageSize')) pageSize: number,\n  ) {\n    return await this.meetingRoomService.find(pageNo, pageSize);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后在 MeetingRoomService 添加 find 方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async find(pageNo: number, pageSize: number) {\n    if(pageNo < 1) {\n      throw new BadRequestException('页码最小为 1');\n    }\n    const skipCount = (pageNo - 1) * pageSize;\n\n    const [meetingRooms, totalCount] = await this.repository.findAndCount({\n        skip: skipCount,\n        take: pageSize\n    });\n\n    return {\n        meetingRooms,\n        totalCount\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"重新跑下服务："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,t.jsx)(n.p,{children:"然后是 create 接口："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Post('create')\nasync create(@Body() meetingRoomDto: CreateMeetingRoomDto) {\n    return await this.meetingRoomService.create(meetingRoomDto);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"修改下 create-meeting-room.dto.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { IsNotEmpty, MaxLength } from \"class-validator\";\n\nexport class CreateMeetingRoomDto {\n\n    @IsNotEmpty({\n        message: '会议室名称不能为空'\n    })\n    @MaxLength(10, {\n        message: '会议室名称最长为 10 字符'\n    })\n    name: string;\n\n    @IsNotEmpty({\n        message: '容量不能为空'\n    })\n    capacity: number;\n\n    @IsNotEmpty({\n        message: '位置不能为空'\n    })\n    @MaxLength(50, {\n        message: '位置最长为 50 字符'\n    })\n    location: string;\n\n    @IsNotEmpty({\n        message: '设备不能为空'\n    })\n    @MaxLength(50, {\n        message: '设备最长为 50 字符'\n    })\n    equipment: string;\n\n    @IsNotEmpty({\n        message: '描述不能为空'\n    })\n    @MaxLength(100, {\n        message: '描述最长为 100 字符'\n    })\n    description: string;\n\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"在 MeetingRoomService 里添加 create 方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async create(meetingRoomDto: CreateMeetingRoomDto) {\n    return await this.repository.insert(meetingRoomDto);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这个错误的格式是我们在 exception filter 里自定义的。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"创建成功时会返回创建成功的会议室信息。"}),"\n",(0,t.jsx)(n.p,{children:"这个会议室名其实应该保持唯一，我们加一下校验逻辑："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async create(meetingRoomDto: CreateMeetingRoomDto) {\n    const room = await this.repository.findOneBy({\n      name: meetingRoomDto.name\n    });\n\n    if(room) {\n      throw new BadRequestException('会议室名字已存在');\n    }\n\n    return await this.repository.save(meetingRoomDto);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样就能保证会议室名字不会重复。"}),"\n",(0,t.jsx)(n.p,{children:"然后实现下 update 接口："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Put('update')\nasync update(@Body() meetingRoomDto: UpdateMeetingRoomDto) {\n    return await this.meetingRoomService.update(meetingRoomDto);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里的 UpdateMeetingRoomDto 和 CreateMeetingRoomDto 差不多，我们用 PartialType 来复用它的字段："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreateMeetingRoomDto } from './create-meeting-room.dto';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class UpdateMeetingRoomDto extends PartialType(CreateMeetingRoomDto) {\n\n    @ApiProperty()\n    @IsNotEmpty({\n        message: 'id 不能为空'\n    })\n    id: number;\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后在 MeetingRoomService 实现 update 方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async update(meetingRoomDto: UpdateMeetingRoomDto) {\n    const meetingRoom = await this.repository.findOneBy({\n      id: meetingRoomDto.id\n    })\n\n    if(!meetingRoom) {\n      throw new BadRequestException('会议室不存在');\n    }\n\n    meetingRoom.capacity = meetingRoomDto.capacity;\n    meetingRoom.location = meetingRoomDto.location;\n    meetingRoom.name = meetingRoomDto.name;\n\n    if(meetingRoomDto.description) {\n      meetingRoom.description = meetingRoomDto.description;\n    }\n    if(meetingRoomDto.equipment) {\n      meetingRoom.equipment = meetingRoomDto.equipment;\n    }\n\n    await this.repository.update({\n      id: meetingRoom.id\n    } , meetingRoom);\n    return 'success';\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"先查询一下，如果查不到就返回会议室不存在。"}),"\n",(0,t.jsx)(n.p,{children:"否则，更新会议室信息。"}),"\n",(0,t.jsx)(n.p,{children:"这里的 description 和 equipment 因为可以不传，所以要判断下，传了才更新。"}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"服务端打印了 select 和 update 的 sql："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"数据库中也更新了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后还需要一个回显的接口，用在修改的时候回显数据："}),"\n",(0,t.jsx)(n.p,{children:"添加一个 :id 接口："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Get(':id')\nasync find(@Param('id') id: number) {\n    return await this.meetingRoomService.findById(id);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后在 service 实现这个方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async findById(id: number) {\n    return this.repository.findOneBy({\n      id\n    }); \n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后是 delete 接口："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Delete(':id')\nasync delete(@Param('id') id: number) {\n    return await this.meetingRoomService.delete(id);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"在 service 实现 delete 方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@InjectEntityManager()\nentityManager: EntityManager;\n\nasync delete(id: number) {\n    const bookings = await this.entityManager.findBy(Booking, {\n      room: {\n        id: id\n      }\n    });\n\n    for(let i = 0; i< bookings.length; i++) {\n      this.entityManager.delete(Booking, bookings[i].id);\n    }\n    await this.repository.delete(id);\n    return 'success';\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"注意，因为 booking 表关联了 meeting-room 表，有外键约束，所以要删除所有的预定之后再去删除会议室。"}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"确实删除了。"}),"\n",(0,t.jsx)(n.p,{children:"最后，还有个搜索接口："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们没必要单独新建个接口，直接改下 list 接口就行："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Get('list')\nasync list(\n    @Query('pageNo', new DefaultValuePipe(1), generateParseIntPipe('pageNo')) pageNo: number,\n    @Query('pageSize', new DefaultValuePipe(2), generateParseIntPipe('pageSize')) pageSize: number,\n    @Query('name') name: string,\n    @Query('capacity') capacity: number,\n    @Query('equipment') equipment: string\n) {\n    return await this.meetingRoomService.find(pageNo, pageSize, name, capacity, equipment);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"添加 3 个参数。"}),"\n",(0,t.jsx)(n.p,{children:"service 里的 find 方法也要添加 3 个参数："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"async find(pageNo: number, pageSize: number, name: string, capacity: number, equipment: string) {\n    if(pageNo < 1) {\n      throw new BadRequestException('页码最小为 1');\n    }\n    const skipCount = (pageNo - 1) * pageSize;\n\n    const condition: Record<string, any> = {};\n\n    if(name) {\n        condition.name = Like(`%${name}%`);   \n    }\n    if(equipment) {\n        condition.equipment = Like(`%${equipment}%`); \n    }\n    if(capacity) {\n        condition.capacity = capacity;\n    }\n\n    const [meetingRooms, totalCount] = await this.repository.findAndCount({\n        skip: skipCount,\n        take: pageSize,\n        where: condition\n    });\n\n    return {\n        meetingRooms,\n        totalCount\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"如果传了这三个参数，就添加查询的 where 条件。"}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,t.jsx)(n.p,{children:"这样，会议室管理模块的接口就写完了。"}),"\n",(0,t.jsxs)(n.p,{children:["案例代码上传了",(0,t.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"这节，我们实现了会议室管理模块。"}),"\n",(0,t.jsx)(n.p,{children:"首先添加了 entity，然后实现了 CRUD 方法。"}),"\n",(0,t.jsx)(n.p,{children:"其中，我们在 list 接口实现了分页和搜索。"}),"\n",(0,t.jsx)(n.p,{children:"这些接口我们在用户模块都写过。"}),"\n",(0,t.jsx)(n.p,{children:"其实很多模块的功能都是差不多的，都是 CRUD 的复合。"})]})}function U(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(G,{...e})}):G(e)}let L=U;U.__RSPRESS_PAGE_META={},U.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F121.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E8%AE%A2%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%BC%9A%E8%AE%AE%E5%AE%A4%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97-%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"121. 会议室预订系统：会议室管理模块-后端开发",headingTitle:"121. 会议室预订系统：会议室管理模块-后端开发",frontmatter:{}}}}]);