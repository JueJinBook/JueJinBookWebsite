"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["83860"],{156578:function(e,n,t){e.exports=t.p+"static/image/146c348d454ae8f0fc58d0c7d39088c3.6b4dc768.png"},259203:function(e,n,t){t.r(n),t.d(n,{default:()=>f});var i=t(552676),o=t(740453),r=t(156578);let s=t.p+"static/image/59ee1ad3a3eeb940b4aadd375390e27a.9b30cbe3.png",c=t.p+"static/image/64f92afaf89b627d12275d3dc2b40048.80d72b1c.png",a=t.p+"static/image/6fcdde9f8e602e44bae80efa8b5c674d.582dfe31.png",l=t.p+"static/image/ce69633b2258a4805a08d41f89a6790b.2480e7a1.png",d=t.p+"static/image/8b2557bb154f24caab159817effdf513.a879e889.png",m=t.p+"static/image/32a4ece4f4e2b2c838a5f610a914567f.1e39d7f3.png",h=t.p+"static/image/effe24f7b3beeb3d81e526007219da00.7a06c615.png",p=t.p+"static/image/00937ae390df700790e07f4017efb0a7.acc4843e.png";function g(e){let n=Object.assign({p:"p",img:"img",h2:"h2",a:"a",strong:"strong",pre:"pre",code:"code",ul:"ul",li:"li",blockquote:"blockquote",h3:"h3"},(0,o.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"本课程主要讲解如何书写符合规范的提交说明，并基于提交说明自动生成变更日志。为了使得大家更好的理解课程设计，接下来会按照以下内容进行讲解："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:"yuque_diagram (1).jpg"})}),"\n",(0,i.jsxs)(n.h2,{id:"提交说明",children:["提交说明",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#提交说明",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["在 Git 中进行代码提交都需要手写",(0,i.jsx)(n.strong,{children:"提交说明"}),"（Commit Message）："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'git commit -m "hello world"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["如果",(0,i.jsx)(n.strong,{children:"提交说明"}),"语义不清晰则很难阐述当前提交代码的目的，例如提交是为了修复 Bug、优化性能、新增功能还是发布版本？查看 Vue 项目的 Git ",(0,i.jsx)(n.strong,{children:"提交说明"}),"："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"在上述提交说明中，可以很清晰的知道每一次提交的类型和作用："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"feat"}),"：新增一个功能"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fix"}),"：修复一个 Bug"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"chore"}),"：变更构建流程或者辅助工具"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"refactor"}),"： 进行代码重构"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"test"}),"：测试变更"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["如果将这些提交说明放在需要发布的变更日志里，那么立马就能看明白在历史的各个版本里修复了什么 Bug 以及新增了什么功能，因此语义化的提交说明可以用于生成变更日志，例如 Vue 的",(0,i.jsx)(n.a,{href:"https://github.com/vuejs/vue/blob/main/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer",children:"变更日志"}),"："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：上述版本日志信息可以在 ",(0,i.jsx)(n.a,{href:"https://github.com/vuejs/vue/commits/",target:"_blank",rel:"noopener noreferrer",children:"Commit 列表"}),"中一一找到对应的提交说明。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"开发者可以从上述日志中查看 Bug 修复对应的 Commit 提交说明、Pull Request 链接、Issue 链接以及代码提交链接。当然 Vue 的日志并不是手动生成，需要基于规范的提交说明并配套相应的工具自动生成。"}),"\n",(0,i.jsxs)(n.h2,{id:"提交说明规范",children:["提交说明规范",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#提交说明规范",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["为了生成类似于 Vue 这样的变更日志，首先需要提交规范的 Git 说明。社区很早以前就出现了一些 Git 提交说明的规范，目前使用最广的是",(0,i.jsx)(n.a,{href:"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.uyo6cb12dt6w",target:"_blank",rel:"noopener noreferrer",children:" Angular 规范"}),"，它的主要作用如下："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"可以通过脚本工具自动生成变更日志"}),"\n",(0,i.jsx)(n.li,{children:"能忽视一些不重要的提交说明，例如代码格式化"}),"\n",(0,i.jsx)(n.li,{children:"在浏览历史提交记录时能够提供更好的语义说明"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"为了实现上述目的，在 Angular 规范中提供了提交说明的格式规范，需要包含三个部分："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"<type>(<scope>): <subject>   # <header>\n<BLANK LINE>                 # 换行\n<body>                       # <body> \n<BLANK LINE>                 # 换行\n<footer>                     # <footer>\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"header",children:["Header",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#header",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Header 包括三个字段",(0,i.jsx)(n.code,{children:"type"}),"（必需）、",(0,i.jsx)(n.code,{children:"scope"}),"（可选）和",(0,i.jsx)(n.code,{children:"subject"}),"（必需）："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"<type>(<scope>): <subject>\n# 34.工程设计：变更日志\n# scope => Button \n# subject => 新增 Button 组件\nfeat(Button): 新增 Button 组件\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"type"})," 用于描述 Git 的提交类型："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示： ",(0,i.jsx)(n.code,{children:"feat"})," 和 ",(0,i.jsx)(n.code,{children:"fix"})," 必须放入变更日志。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"scope"})," 用于描述 Git 提交的影响范围， 范围可以依据项目而定，例如在业务项目中可以依据菜单或者功能模块划分。如果是组件库开发，则可以依据组件划分。如果是工具库，则可以根据依据文件名称或功能类型划分。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"subject"}),"是 Git 提交的简短描述，一般需要："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"使用第一人称的动作表述，不要使用被动句和第三人称表述"}),"\n",(0,i.jsx)(n.li,{children:"如果是英文，第一个字母小写"}),"\n",(0,i.jsx)(n.li,{children:"结尾不需要加句号（. 或者 。）"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"body",children:["Body",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#body",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Body 是 Git 提交的详细描述，说明提交代码的详细作用，可以分成多行进行说明："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"提交尽量不超过 50 个字符"}),"\n",(0,i.jsx)(n.li,{children:"使用第一人称的动作表述，不要使用被动句和第三人称表述"}),"\n",(0,i.jsx)(n.li,{children:"描述包含代码变更的动机以及和变更之前的行为对比"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["在大部分场景下， Header 的 ",(0,i.jsx)(n.code,{children:"subject"})," 可以满足提交说明的描述功能，因此 Body 不是必需的。在书写说明时，应该使用 ",(0,i.jsx)(n.code,{children:"subject"})," 尽可能的描述清楚本次提交的目的。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：在本课程的演示中，对 ",(0,i.jsx)(n.code,{children:"subject"})," 进行了非常简短的说明，而对 Body 进行了非常详细的说明设计，其实对于生成变更日志而言不是特别友好，大家在学习本课程的时候可以重点观察一下。"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：更多关于 Body 规范的描述可以查看",(0,i.jsx)(n.a,{href:"https://365git.tumblr.com/post/3308646748/writing-git-commit-messages",target:"_blank",rel:"noopener noreferrer",children:" Writing Git commit messages"})," 和 ",(0,i.jsx)(n.a,{href:"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html",target:"_blank",rel:"noopener noreferrer",children:"A Note About Git Commit Messages"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"footer",children:["Footer",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#footer",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Footer 只在提交的代码有非兼容性更新以及需要关联 issues 时才需要使用。当前代码与上一个版本不兼容，则 Footer 以 BREAKING CHANGE 开头，后面是对变动的描述以及变动的理由和迁移方法，例如："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"BREAKING CHANGE: isolate scope bindings definition has changed and\n    the inject option for the directive controller injection was removed.\n    \n    To migrate the code follow the example below:\n    \n    Before:\n    \n    scope: {\n      myAttr: 'attribute',\n      myBind: 'bind',\n      myExpression: 'expression',\n      myEval: 'evaluate',\n      myAccessor: 'accessor'\n    }\n    \n    After:\n    \n    scope: {\n      myAttr: '@',\n      myBind: '@',\n      myExpression: '&',\n      // myEval - usually not useful, but in cases where the expression is assignable, you can use '='\n      myAccessor: '=' // in directive's template change myAccessor() to myAccessor\n    }\n    \n    The removed inject wasn't generaly useful for directives so there should be no code using it.\n"})}),"\n",(0,i.jsx)(n.p,{children:"如果当前提交的代码是进行 Bug 修复，并且需要关联对应 Bug 的 issues，那么可以使用 Footer："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 关联单个需要关闭的 issues\nCloses #234\n# 关联多个需要关闭的 issues\nCloses #123, #245, #992\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"示例",children:["示例",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"完整的 Anguar 规范提交说明如下所示："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# <header>\n# <type>(<scope>): <subject> \n# type: feat\n# scope: directive\n# subject: ng:disabled, ng:checked, ng:multiple, ng:readonly, ng:selected\nfeat(directive): ng:disabled, ng:checked, ng:multiple, ng:readonly, ng:selected\n# <BLANK LINE> Header 和 Body 之间需要空一行\n\n# <body>         \nNew directives for proper binding these attributes in older browsers (IE).\nAdded coresponding description, live examples and e2e tests.\n# <BLANK LINE> Body 和 Footer 之间需要空一行\n\n# <footer>\nCloses #351\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"commitizen",children:["Commitizen",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#commitizen",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["手写 Anguler 规范的提交说明难免会产生错误，因此社区产生了可以撰写提交说明的工具 ",(0,i.jsx)(n.a,{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer",children:"commitizen"}),"。在官方文档的说明中提供了全局安装 commitizen 的方式，这里为了让所有开发者使用统一的 commitizen 版本，可以在项目中进行局部安装和使用："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 其他协作的开发者不需要感知 commitizen 的安装\n# 查看 node_modules/commitizen/package.json 的 bin 字段可以发现\n# 对外提供了 cz 和 git cz 命令，通过使用这两个命令代替 git commit 操作\n# commitizen 示例固定 4.3.0 版本\nnpm install --save-dev commitizen\n"})}),"\n",(0,i.jsxs)(n.p,{children:["安装完成后可以通过 ",(0,i.jsx)(n.code,{children:"git cz"})," 命令代替 ",(0,i.jsx)(n.code,{children:"git commit"})," 命令执行，由于使用局部安装，可以在 ",(0,i.jsx)(n.code,{children:"package.json"})," 中配置 ",(0,i.jsx)(n.code,{children:"git cz"})," 命令，如下所示："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// package.json\n"scripts": {\n  "cz": "git cz"\n},\n'})}),"\n",(0,i.jsxs)(n.p,{children:["此时执行 ",(0,i.jsx)(n.code,{children:"npm run cz"})," 等同于执行了 ",(0,i.jsx)(n.code,{children:"git commit"})," 命令："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 执行（等同于执行 git commit）\nnpm run cz\n\n# 打印\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# On branch demo/changelog-cz\n# Changes to be committed:\n#       modified:   package-lock.json\n#       modified:   package.json\n#\n# Changes not staged for commit:\n#       modified:   package.json\n#\n~                                                                                 \n~                                                                                 \n~                                                                                 \n~                                                                                 \n~                                                                                 \n~                                                                                 \n~                                                                                 \n~                                                                                 \n~                                                                                 \n~                                                                                 \n~                                                                                 \n~                                                                                 \n~   \n"})}),"\n",(0,i.jsx)(n.p,{children:"commitizen 提供了适配器用于扩展自身的能力（可以简单理解为插件），开发者可以自己设计适配器，也可以使用别人设计好的适配器。本文主要介绍几个常用的适配器："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/commitizen/cz-conventional-changelog",target:"_blank",rel:"noopener noreferrer",children:"cz-conventional-changelog"}),"：生成符合 Auglar 规范的提交说明"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fleonardoanalista%2Fcz-customizable",target:"_blank",rel:"noopener noreferrer",children:"cz-customizable"}),"：定制提交说明"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["通过执行 ",(0,i.jsx)(n.code,{children:"npm run cz"})," 可以发现只安装 commitizen 并没有任何能力增强，我们继续安装可以生成 Auglar 规范提交说明的适配器 cz-conventional-changelog："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 查看 node_modules/commitizen/package.json 的 bin 字段可以发现 \n# 除了对外提供了 cz 和 git-cz 命令，还提供了 commitizen 命令 \n# commitizen 命令只有一个 init 动作 \n# cz-conventional-changelog 示例固定 3.3.0 版本 \nnpx commitizen init cz-conventional-changelog --save --save-exact\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"commitizen init"})," 命令主要用于快速增加 commitizen 适配器，执行过程如下所示："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["解析适配器的参数（Yarn、NPM 的安装参数、",(0,i.jsx)(n.code,{children:"--force"})," 等）"]}),"\n",(0,i.jsxs)(n.li,{children:["判断是否存在其他适配器，如果存在则报错并提示使用 ",(0,i.jsx)(n.code,{children:"--force"})," 参数强制覆盖"]}),"\n",(0,i.jsxs)(n.li,{children:["安装适配器并将依赖保存到 ",(0,i.jsx)(n.code,{children:"package.json"})," 的 ",(0,i.jsx)(n.code,{children:"devDependencies"})," 字段信息"]}),"\n",(0,i.jsxs)(n.li,{children:["在 ",(0,i.jsx)(n.code,{children:"package.json"})," 中新增或者更改适配器 cz-conventional-changelog 的路径"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"温馨提示：从 commitizen 命令可以看出在 commitizen 中只能使用一个适配器，不能让多个适配器共存。"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["如果当前已经有其他适配器被使用则会报以下错误，此时如果仍然需要替换适配器，可以加上 ",(0,i.jsx)(n.code,{children:"--force"})," 进行强制覆盖："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Error: A previous adapter is already configured. Use --force to override\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"commitizen init"})," 命令执行后会在 ",(0,i.jsx)(n.code,{children:"package.json"})," 中新增或者更改 commitizen 的适配器 cz-conventional-changelog 路径，如下所示："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"config": {\n  "commitizen": {\n    // 适配器路径，也可以是 cz-conventional-changelog，在源码中是通过 require 加载\n    "path": "./node_modules/cz-conventional-changelog"\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["添加了 cz-conventional-changelog 适配器后，我们再次执行 ",(0,i.jsx)(n.code,{children:"npm run cz"}),"："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 执行\nnpm run cz\n\n# 打印\n> micro-framework@1.0.6 cz\n> git cz\n\ncz-cli@4.3.0, cz-conventional-changelog@3.3.0\n\n? Select the type of change that you're committing: (Use arrow keys)\n❯ feat:     A new feature \n  fix:      A bug fix \n  docs:     Documentation only changes \n  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing \nsemi-colons, etc) \n  refactor: A code change that neither fixes a bug nor adds a feature \n  perf:     A code change that improves performance \n(Move up and down to reveal more choices)\n"})}),"\n",(0,i.jsx)(n.p,{children:"此时可以通过工具生成符合 Angular 规范的提交说明了，如下所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:"提交说明.gif"})}),"\n",(0,i.jsx)(n.p,{children:"注意不要被这里的演示误导，应该尽可能详细的书写短说明 subject，而不是长说明 Body，因为 subject 是必须的，后续有助于生成变更日志，而长说明会被变更日志忽略。"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：示例源码可以从 ",(0,i.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/changelog-cz",target:"_blank",rel:"noopener noreferrer",children:"demo/changelog-cz"})," 分支获取。为什么这里没有触发 lint-staged 校验呢？"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"commitizen-工作原理",children:["commitizen 工作原理",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#commitizen-工作原理",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["commitizen 构建后的代码相对难以阅读，这里以源码为例进行讲解，首先看下 CLI 的入口 ",(0,i.jsx)(n.code,{children:"bin"})," 配置信息："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// package.json\n"bin": {\n  "cz": "./bin/git-cz",\n  "git-cz": "./bin/git-cz",\n  // 用于执行 commitizen init\n  "commitizen": "./bin/commitizen"\n},\n'})}),"\n",(0,i.jsxs)(n.p,{children:["当执行 ",(0,i.jsx)(n.code,{children:"git cz"})," 时指向了 ",(0,i.jsx)(n.code,{children:"bin/git-cz"})," 文件："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// bin/git-cz\n\n// 熟悉的 Shebang，注意省略了 .js 后缀\n// git-cz 文件会被 Node 解析执行\n#!/usr/bin/env node\n\nrequire('./git-cz.js');\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"git-cz.js"})," 的代码如下所示："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"var path = require('path');\n\nprocess.on('uncaughtException', function (err) {\n  console.error(err.message || err);\n  process.exit(1);\n});\n\n// catch SIGINT signal\nprocess.stdin.on('data', function (key) {\n  if (key == '\\u0003') {\n    process.exit(130); // 128 + SIGINT\n  }\n});\n\n// dist 是构建目录，这里可以查看 src/cli/git-cz.js 文件\nrequire('../dist/cli/git-cz.js').bootstrap({\n  cliPath: path.join(__dirname, '../')\n});\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"src/cli/git-cz.js"})," 的代码如下所示："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// src/cli/git-cz.js\nimport { configLoader } from '../commitizen';\nimport { git as useGitStrategy, gitCz as useGitCzStrategy } from './strategies';\n\nexport {\n  bootstrap\n};\n\n/**\n * This is the main cli entry point.\n * environment may be used for debugging.\n */\nfunction bootstrap (environment = {}, argv = process.argv) {\n\n  // Get cli args\n  // 获取 CLI 命令的解析参数\n  let rawGitArgs = argv.slice(2, argv.length);\n  \n  // 解析适配器的配置信息（包括 path 路径）\n  // 在之前的演示中主要解析 commitizen init 之后在 package.json 的 config 中生成的适配器配置信息\n  let adapterConfig = environment.config || configLoader.load();\n\n  // Choose a strategy based on the existance the adapter config\n  if (typeof adapterConfig !== 'undefined') {\n    // This tells commitizen we're in business\n    // 使用适配器后进行执行\n    useGitCzStrategy(rawGitArgs, environment, adapterConfig);\n  } else {\n    // This tells commitizen that it is not needed, just use git\n    // 使用原生的 git commit 进行执行\n    useGitStrategy(rawGitArgs, environment);\n  }\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["可以发现默认的 ",(0,i.jsx)(n.code,{children:"environment"})," 没有传入 ",(0,i.jsx)(n.code,{children:"config"})," 配置，因此从 ",(0,i.jsx)(n.code,{children:"configLoader.load()"})," 中获取适配器的配置信息，跟踪代码可以发现最后获取配置的操作如下所示："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// src/configLoager/getNormalizedConfig.js\n\nexport default getNormalizedConfig;\n\n// Given a config and content, plucks the actual\n// settings that we\'re interested in\nfunction getNormalizedConfig (config, content) {\n\n  // 如果从 package.json 中获取配置\n  if (content && (config === \'package.json\')) {\n\n  // PACKAGE.JSON\n\n    // Use the npm config key, be good citizens\n    if (content.config && content.config.commitizen) {\n      // 读取 package.json 的 config 字段信息\n      // 可以查看之前使用 commitizen init 生成的配置信息\n      // "config": {\n      //    "commitizen": {\n                // 适配器路径，也可以是 cz-conventional-changelog，在源码中是通过 require 加载\n                // "path": "./node_modules/cz-conventional-changelog"\n      //     }\n      // }\n      \n      // 返回了适配器的配置信息（包括 path 路径）\n      return content.config.commitizen;\n    } else if (content.czConfig) { // Old method, will be deprecated in 3.0.0\n\n      // Suppress during test\n      if (typeof global.it !== \'function\')\n      {\n        console.error("\\n********\\nWARNING: This repository\'s package.json is using czConfig. czConfig will be deprecated in Commitizen 3. \\nPlease use this instead:\\n{\\n  \\"config\\": {\\n    \\"commitizen\\": {\\n      \\"path\\": \\"./path/to/adapter\\"\\n    }\\n  }\\n}\\nFor more information, see: http://commitizen.github.io/cz-cli/\\n********\\n");\n      }\n      return content.czConfig;\n    }\n  } else {\n    // .cz.json or .czrc\n    return content;\n  }\n\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["重新回到 ",(0,i.jsx)(n.code,{children:"bootstrap"})," 函数，获取适配器的参数后会通过 ",(0,i.jsx)(n.code,{children:"useGitCzStrategy"})," 执行："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// src/strategies/git-cz.js\n\nimport inquirer from 'inquirer';\nimport findRoot from 'find-root';\nimport { getParsedPackageJsonFromPath } from '../../common/util';\nimport { gitCz as gitCzParser, commitizen as commitizenParser } from '../parsers';\nimport { commit, staging, adapter } from '../../commitizen';\nimport * as gitStrategy from './git';\n\n// destructure for shorter apis\nlet { parse } = gitCzParser;\n\nlet { getPrompter, resolveAdapterPath, getGitRootPath } = adapter;\nlet { isClean } = staging;\n\n// 外部引入时重命名为 useGitCzStrategy 函数\nexport default gitCz;\n\nfunction gitCz (rawGitArgs, environment, adapterConfig) {\n\n  // See if any override conditions exist.\n\n  // In these very specific scenarios we may want to use a different\n  // commit strategy than git-cz. For example, in the case of --amend\n  let parsedCommitizenArgs = commitizenParser.parse(rawGitArgs);\n    \n  // 如果存在 --amend 参数，则直接使用 git commit \n  if (parsedCommitizenArgs.amend) {\n    // console.log('override --amend in place');\n    gitStrategy.default(rawGitArgs, environment);\n    return;\n  }\n\n  // Now, if we've made it past overrides, proceed with the git-cz strategy\n  let parsedGitCzArgs = parse(rawGitArgs);\n\n  // Determine if we need to process this commit as a retry instead of a\n  // normal commit.\n  let retryLastCommit = rawGitArgs && rawGitArgs[0] === '--retry';\n\n  // Determine if we need to process this commit using interactive hook mode\n  // for husky prepare-commit-message\n  let hookMode = !(typeof parsedCommitizenArgs.hook === 'undefined');\n\n  // 这里计算适配器的路径，可以发现读取的就是 package.json config 中的适配器参数\n  let resolvedAdapterConfigPath = resolveAdapterPath(adapterConfig.path);\n  let resolvedAdapterRootPath = findRoot(resolvedAdapterConfigPath);\n  \n  // 获取适配器的 prompter，适配器必须要提供这个入口函数\n  let prompter = getPrompter(adapterConfig.path);\n  let shouldStageAllFiles = rawGitArgs.includes('-a') || rawGitArgs.includes('--all');\n\n  isClean(process.cwd(), function (error, stagingIsClean) {\n    if (error) {\n      throw error;\n    }\n\n    if (stagingIsClean && !parsedGitCzArgs.includes('--allow-empty')) {\n      throw new Error('No files added to staging! Did you forget to run git add?');\n    }\n\n    // OH GOD IM SORRY FOR THIS SECTION\n    let adapterPackageJson = getParsedPackageJsonFromPath(resolvedAdapterRootPath);\n    let cliPackageJson = getParsedPackageJsonFromPath(environment.cliPath);\n    console.log(`cz-cli@${cliPackageJson.version}, ${adapterPackageJson.name}@${adapterPackageJson.version}\\n`);\n    \n    // 调用 commit 函数\n    commit(inquirer, getGitRootPath(), prompter, {\n      args: parsedGitCzArgs,\n      disableAppendPaths: true,\n      emitData: true,\n      quiet: false,\n      retryLastCommit,\n      hookMode\n    }, function (error) {\n      if (error) {\n        throw error;\n      }\n    });\n  }, shouldStageAllFiles);\n\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["重点来看一下 ",(0,i.jsx)(n.code,{children:"getPrompter"})," 是如何获取适配器的 ",(0,i.jsx)(n.code,{children:"prompter"})," 函数："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// src/commitizen/adapter.js\n\nimport childProcess from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\nimport findNodeModules from 'find-node-modules';\nimport _ from 'lodash';\nimport detectIndent from 'detect-indent';\n\nimport { isFunction } from '../common/util';\n\n/**\n * Gets the prompter from an adapter given an adapter path\n */\nfunction getPrompter (adapterPath) {\n  // Resolve the adapter path\n  let resolvedAdapterPath = resolveAdapterPath(adapterPath);\n\n  // Load the adapter\n  // 通过 require 加载适配器\n  let adapter = require(resolvedAdapterPath);\n\n  /* istanbul ignore next */\n  // 适配器必须抛出 prompter 供 commitizen 调用\n  if (adapter && adapter.prompter && isFunction(adapter.prompter)) {\n     return adapter.prompter;\n  } else if (adapter && adapter.default && adapter.default.prompter && isFunction(adapter.default.prompter)) {\n     return adapter.default.prompter;\n  } else {\n    throw new Error(`Could not find prompter method in the provided adapter module: ${adapterPath}`);\n  }\n}\n\n/**\n * Given a resolvable module name or path, which can be a directory or file, will\n * return a located adapter path or will throw.\n */\nfunction resolveAdapterPath (inboundAdapterPath) {\n  // Check if inboundAdapterPath is a path or node module name\n  let parsed = path.parse(inboundAdapterPath);\n  let isPath = parsed.dir.length > 0 && parsed.dir.charAt(0) !== \"@\";\n\n  // Resolve from the root of the git repo if inboundAdapterPath is a path\n  let absoluteAdapterPath = isPath ?\n    path.resolve(getGitRootPath(), inboundAdapterPath) :\n    inboundAdapterPath;\n\n  try {\n    // try to resolve the given path\n    return require.resolve(absoluteAdapterPath);\n  } catch (error) {\n    error.message = \"Could not resolve \" + absoluteAdapterPath + \". \" + error.message;\n    throw error;\n  }\n}\n\nfunction getGitRootPath () {\n  return childProcess.spawnSync('git', ['rev-parse', '--show-toplevel'], { encoding: 'utf8' }).stdout.trim();\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["获取了适配器的 ",(0,i.jsx)(n.code,{children:"prompter"})," 之后，我们来看下最终的 ",(0,i.jsx)(n.code,{children:"commit"})," 函数执行："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// src/commitizen/commit.js\n\n\n/**\n * Takes all of the final inputs needed in order to make dispatch a git commit\n */\nfunction dispatchGitCommit (repoPath, template, options, overrideOptions, done) {\n    // Commit the user input -- side effect that we'll test\n    // 提交适配器返回的用户输入的说明信息 \n    gitCommit(repoPath, template, { ...options, ...overrideOptions }, function (error) {\n      done(error, template);\n    });\n}\n\n\n /**\n  * Asynchronously commits files using commitizen\n  */\nfunction commit (inquirer, repoPath, prompter, options, done) {\n  var cacheDirectory = cacheDir('commitizen');\n  var cachePath = path.join(cacheDirectory, 'commitizen.json');\n\n  ensureDir(cacheDirectory, function (error) {\n    if (error) {\n      console.error(\"Couldn't create commitizen cache directory: \", error);\n      // TODO: properly handle error?\n    } else {\n      if (options.retryLastCommit) {\n\n        console.log('Retrying last commit attempt.');\n\n        // We want to use the last commit instead of the current commit,\n        // so lets override some options using the values from cache.\n        let {\n          options: retryOptions,\n          overrideOptions: retryOverrideOptions,\n          template: retryTemplate\n        } = cache.getCacheValueSync(cachePath, repoPath);\n        dispatchGitCommit(repoPath, retryTemplate, retryOptions, retryOverrideOptions, done);\n\n      } else {\n      \n        // 执行适配器提供的 prompter 函数来获取用户输入\n        // Get user input -- side effect that is hard to test\n        prompter(inquirer, function (error, template, overrideOptions) {\n          // Allow adapters to error out\n          // (error: Error?, template: String, overrideOptions: Object)\n          if (!(error instanceof Error)) {\n            overrideOptions = template;\n            template = error;\n            error = null;\n          }\n\n          if (error) {\n            return done(error);\n          }\n\n          // We don't want to add retries to the cache, only actual commands\n          cache.setCacheValueSync(cachePath, repoPath, { template, options, overrideOptions });\n          \n          // template 是通过执行适配器后获取的 git message 信息\n          // 最终会调用 git commit -m 执行提交说明\n          dispatchGitCommit(repoPath, template, options, overrideOptions, done);\n        });\n      }\n    }\n  });\n\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["在执行适配器提供的 ",(0,i.jsx)(n.code,{children:"prompter"})," 函数后，会通过提供的 ",(0,i.jsx)(n.code,{children:"inquirer"})," 工具回调最终用户输入的 commit 信息，最后会通过 ",(0,i.jsx)(n.code,{children:"dispatchGitCommit"})," 函数执行原始的 ",(0,i.jsx)(n.code,{children:"git commit -m"})," 操作。",(0,i.jsx)(n.code,{children:"gitCommit"})," 最后的操作如下所示："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// src/git/commit.js\n\nimport { execSync, spawn } from 'child_process';\n\nimport path from 'path';\n\nimport { writeFileSync, openSync, closeSync } from 'fs';\n\nimport dedent from 'dedent';\n\nexport { commit };\n\n/**\n * Asynchronously git commit at a given path with a message\n */\nfunction commit (repoPath, message, options, done) {\n  let called = false;\n\n  // commit the file by spawning a git process, unless the --hook\n  // option was provided. in that case, write the commit message into\n  // the .git/COMMIT_EDITMSG file\n  if (!options.hookMode) {\n     \n     // 最终还是通过 git commit -m 提交说明\n    let args = ['commit', '-m', dedent(message), ...(options.args || [])];\n    let child = spawn('git', args, {\n      cwd: repoPath,\n      stdio: options.quiet ? 'ignore' : 'inherit'\n    });\n\n    child.on('error', function (err) {\n      if (called) return;\n      called = true;\n\n      done(err);\n    });\n\n    child.on('exit', function (code, signal) {\n      if (called) return;\n      called = true;\n\n      if (code) {\n        if (code === 128) {\n          console.warn(`\n            Git exited with code 128. Did you forget to run:\n\n              git config --global user.email \"you@example.com\"\n              git config --global user.name \"Your Name\"\n            `)\n        }\n        done(Object.assign(new Error(`git exited with error code ${code}`), { code, signal }));\n      } else {\n        done(null);\n      }\n    });\n  } else {\n    const gitDirPath = execSync(\n      'git rev-parse --absolute-git-dir',\n      { cwd: repoPath, encoding: 'utf8' },\n    ).trim();\n    const commitFilePath = path.join(gitDirPath, 'COMMIT_EDITMSG');\n    try {\n      const fd = openSync(commitFilePath, 'w');\n      try {\n        writeFileSync(fd, dedent(message));\n        done(null);\n      } catch (e) {\n        done(e);\n      } finally {\n        closeSync(fd);\n      }\n    } catch (e) {\n      // windows doesn't allow opening existing hidden files\n      // in 'w' mode... but it does let you do 'r+'!\n      try {\n        const fd = openSync(commitFilePath, 'r+');\n        try {\n          writeFileSync(fd, dedent(message));\n          done(null);\n        } catch (e) {\n          done(e);\n        } finally {\n          closeSync(fd);\n        }\n      } catch (e) {\n        done(e);\n      }\n    }\n  }\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["从上述 commitizen 的代码执行流程可以发现，commitizen 需要获取适配器提供的 commit message 信息来执行 ",(0,i.jsx)(n.code,{children:"git commit -m"}),"，具体流程如下所示："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["上述流程是一个简单的示意流程，在真正设计的过程中，还包含 Git 的参数解析，例如 ",(0,i.jsx)(n.code,{children:"--allow-empty"}),"、",(0,i.jsx)(n.code,{children:"--retry"}),"、",(0,i.jsx)(n.code,{children:"--amend"})," 等。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"温馨提示：学习 huksy、lint-staged、commitizen 以及 cz-conventional-changelog 等三方库的源码，了解内部的一些 Git 操作，有助于加深对于工程化设计的理解。例如提供一个工具库，如何设计它的配置文件，如何获取配置，如何设计它的可扩展能力等，当然也有助于在实际的项目中简单使用 Node 脚本设计工程自动化。"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"cz-conventional-changelog-工作原理",children:["cz-conventional-changelog 工作原理",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cz-conventional-changelog-工作原理",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["cz-conventional-changelog 的代码非常简单，主要利用 commitizen 提供的 ",(0,i.jsx)(n.a,{href:"https://github.com/SBoudrias/Inquirer.js",target:"_blank",rel:"noopener noreferrer",children:"inquirer"})," 让用户提供信息，从而生成 Angular 规范的 commit 信息供 commitizen 进行 ",(0,i.jsx)(n.code,{children:"git commit"})," 操作："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// cz-conventional-changelog：3.3.0 \n// 查看 node_modules/cz-conventional-changelog/package.json 中的 main 字段信息找到入口文件\n// node_modules/cz-conventional-changelog/index.js\n\n'format cjs';\n\nvar engine = require('./engine');\nvar conventionalCommitTypes = require('conventional-commit-types');\nvar configLoader = require('commitizen').configLoader;\n\n// 最终会调取 commitizen 的 getNormalizedConfig.js 获取 commitizen 的配置信息\nvar config = configLoader.load() || {};\nvar options = {\n  // 获取提交类型 \n  // Angular 规范中 Header 部分 <type>(<scope>): <subject> 的 type\n  types: config.types || conventionalCommitTypes.types,\n  defaultType: process.env.CZ_TYPE || config.defaultType,\n  defaultScope: process.env.CZ_SCOPE || config.defaultScope,\n  defaultSubject: process.env.CZ_SUBJECT || config.defaultSubject,\n  defaultBody: process.env.CZ_BODY || config.defaultBody,\n  defaultIssues: process.env.CZ_ISSUES || config.defaultIssues,\n  disableScopeLowerCase:\n    process.env.DISABLE_SCOPE_LOWERCASE || config.disableScopeLowerCase,\n  disableSubjectLowerCase:\n    process.env.DISABLE_SUBJECT_LOWERCASE || config.disableSubjectLowerCase,\n  maxHeaderWidth:\n    (process.env.CZ_MAX_HEADER_WIDTH &&\n      parseInt(process.env.CZ_MAX_HEADER_WIDTH)) ||\n    config.maxHeaderWidth ||\n    100,\n  maxLineWidth:\n    (process.env.CZ_MAX_LINE_WIDTH &&\n      parseInt(process.env.CZ_MAX_LINE_WIDTH)) ||\n    config.maxLineWidth ||\n    100\n};\n\n(function(options) {\n  try {\n    var commitlintLoad = require('@commitlint/load');\n    commitlintLoad().then(function(clConfig) {\n      if (clConfig.rules) {\n        var maxHeaderLengthRule = clConfig.rules['header-max-length'];\n        if (\n          typeof maxHeaderLengthRule === 'object' &&\n          maxHeaderLengthRule.length >= 3 &&\n          !process.env.CZ_MAX_HEADER_WIDTH &&\n          !config.maxHeaderWidth\n        ) {\n          options.maxHeaderWidth = maxHeaderLengthRule[2];\n        }\n      }\n    });\n  } catch (err) {}\n})(options);\n\nmodule.exports = engine(options);\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：在 commitizen 的 ",(0,i.jsx)(n.code,{children:"getNormalizedConfig.js"})," 中可以发现按顺序读取了 package.json、.cz.json 以及 .czrc 中配置的 types 字段信息，优先读取 package.json 中的配置信息。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["从上述注释代码可以发现，提交说明的 types 通过 commitizen 的配置或者 ",(0,i.jsx)(n.a,{href:"https://github.com/commitizen/conventional-commit-types",target:"_blank",rel:"noopener noreferrer",children:"conventional-commit-types"})," 获取，由于默认没有 ",(0,i.jsx)(n.code,{children:"commitizen"})," 配置，因此会从 conventional-commit-types 获取 types："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// node_modules/conventional-commit-types/index.json\n// 和提交说明规范的 Header 部分的 type 基本上一致，这里多出了 perf、ci、build 等类型\n\n{\n  "types": {\n    "feat": {\n      "description": "A new feature",\n      "title": "Features"\n    },\n    "fix": {\n      "description": "A bug fix",\n      "title": "Bug Fixes"\n    },\n    "docs": {\n      "description": "Documentation only changes",\n      "title": "Documentation"\n    },\n    "style": {\n      "description": "Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)",\n      "title": "Styles"\n    },\n    "refactor": {\n      "description": "A code change that neither fixes a bug nor adds a feature",\n      "title": "Code Refactoring"\n    },\n    "perf": {\n      "description": "A code change that improves performance",\n      "title": "Performance Improvements"\n    },\n    "test": {\n      "description": "Adding missing tests or correcting existing tests",\n      "title": "Tests"\n    },\n    "build": {\n      "description": "Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)",\n      "title": "Builds"\n    },\n    "ci": {\n      "description": "Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)",\n      "title": "Continuous Integrations"\n    },\n    "chore": {\n      "description": "Other changes that don\'t modify src or test files",\n      "title": "Chores"\n    },\n    "revert": {\n      "description": "Reverts a previous commit",\n      "title": "Reverts"\n    }\n  }\n}\n\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"温馨提示：从源码可以发现 types 的值优先读取 commitizen 的配置，因此可以将上述 types 放入 commitizen 的配置进行覆盖，这里可以放入 package.json 的 config.commitizen.types 中，也可以放入 .cz.json 或者 .czrc  的 types 中，并且如果不喜欢英文，也可以进行汉化处理。"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["我们重点来看下 cz-conventional-changelog 的 ",(0,i.jsx)(n.code,{children:"engine.js"}),"："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"'format cjs';\n\nvar wrap = require('word-wrap');\nvar map = require('lodash.map');\nvar longest = require('longest');\nvar chalk = require('chalk');\n\nvar filter = function(array) {\n  return array.filter(function(x) {\n    return x;\n  });\n};\n\nvar headerLength = function(answers) {\n  return (\n    answers.type.length + 2 + (answers.scope ? answers.scope.length + 2 : 0)\n  );\n};\n\nvar maxSummaryLength = function(options, answers) {\n  return options.maxHeaderWidth - headerLength(answers);\n};\n\nvar filterSubject = function(subject, disableSubjectLowerCase) {\n  subject = subject.trim();\n  if (!disableSubjectLowerCase && subject.charAt(0).toLowerCase() !== subject.charAt(0)) {\n    subject =\n      subject.charAt(0).toLowerCase() + subject.slice(1, subject.length);\n  }\n  while (subject.endsWith('.')) {\n    subject = subject.slice(0, subject.length - 1);\n  }\n  return subject;\n};\n\n// This can be any kind of SystemJS compatible module.\n// We use Commonjs here, but ES6 or AMD would do just\n// fine.\nmodule.exports = function(options) {\n  var types = options.types;\n\n  var length = longest(Object.keys(types)).length + 1;\n  var choices = map(types, function(type, key) {\n    return {\n      name: (key + ':').padEnd(length) + ' ' + type.description,\n      value: key\n    };\n  });\n\n  return {\n    // When a user runs `git cz`, prompter will\n    // be executed. We pass you cz, which currently\n    // is just an instance of inquirer.js. Using\n    // this you can ask questions and get answers.\n    //\n    // The commit callback should be executed when\n    // you're ready to send back a commit template\n    // to git.\n    //\n    // By default, we'll de-indent your commit\n    // template and will keep empty lines.\n    \n    \n    // 这里是 commitizen 提供的扩展写法，在 commitizen 中会获取 prompter 进行执行\n    // 这里的 cz 指代 commitizen 中传入的 inquirer，而 commit 指代回调函数\n    prompter: function(cz, commit) {\n      // Let's ask some questions of the user\n      // so that we can populate our commit\n      // template.\n      //\n      // See inquirer.js docs for specifics.\n      // You can also opt to use another input\n      // collection library if you prefer.\n      cz.prompt([\n        {\n          // 首先让用户选择 Header 的 type\n          type: 'list',\n          name: 'type',\n          message: \"Select the type of change that you're committing:\",\n          choices: choices,\n          default: options.defaultType\n        },\n        {\n          type: 'input',\n          name: 'scope',\n          message:\n            'What is the scope of this change (e.g. component or file name): (press enter to skip)',\n          default: options.defaultScope,\n          filter: function(value) {\n            return options.disableScopeLowerCase\n              ? value.trim()\n              : value.trim().toLowerCase();\n          }\n        },\n        {\n          type: 'input',\n          name: 'subject',\n          message: function(answers) {\n            return (\n              'Write a short, imperative tense description of the change (max ' +\n              maxSummaryLength(options, answers) +\n              ' chars):\\n'\n            );\n          },\n          default: options.defaultSubject,\n          validate: function(subject, answers) {\n            var filteredSubject = filterSubject(subject, options.disableSubjectLowerCase);\n            return filteredSubject.length == 0\n              ? 'subject is required'\n              : filteredSubject.length <= maxSummaryLength(options, answers)\n              ? true\n              : 'Subject length must be less than or equal to ' +\n                maxSummaryLength(options, answers) +\n                ' characters. Current length is ' +\n                filteredSubject.length +\n                ' characters.';\n          },\n          transformer: function(subject, answers) {\n            var filteredSubject = filterSubject(subject, options.disableSubjectLowerCase);\n            var color =\n              filteredSubject.length <= maxSummaryLength(options, answers)\n                ? chalk.green\n                : chalk.red;\n            return color('(' + filteredSubject.length + ') ' + subject);\n          },\n          filter: function(subject) {\n            return filterSubject(subject, options.disableSubjectLowerCase);\n          }\n        },\n        {\n          type: 'input',\n          name: 'body',\n          message:\n            'Provide a longer description of the change: (press enter to skip)\\n',\n          default: options.defaultBody\n        },\n        {\n          type: 'confirm',\n          name: 'isBreaking',\n          message: 'Are there any breaking changes?',\n          default: false\n        },\n        {\n          type: 'input',\n          name: 'breakingBody',\n          default: '-',\n          message:\n            'A BREAKING CHANGE commit requires a body. Please enter a longer description of the commit itself:\\n',\n          when: function(answers) {\n            return answers.isBreaking && !answers.body;\n          },\n          validate: function(breakingBody, answers) {\n            return (\n              breakingBody.trim().length > 0 ||\n              'Body is required for BREAKING CHANGE'\n            );\n          }\n        },\n        {\n          type: 'input',\n          name: 'breaking',\n          message: 'Describe the breaking changes:\\n',\n          when: function(answers) {\n            return answers.isBreaking;\n          }\n        },\n\n        {\n          type: 'confirm',\n          name: 'isIssueAffected',\n          message: 'Does this change affect any open issues?',\n          default: options.defaultIssues ? true : false\n        },\n        {\n          type: 'input',\n          name: 'issuesBody',\n          default: '-',\n          message:\n            'If issues are closed, the commit requires a body. Please enter a longer description of the commit itself:\\n',\n          when: function(answers) {\n            return (\n              answers.isIssueAffected && !answers.body && !answers.breakingBody\n            );\n          }\n        },\n        {\n          type: 'input',\n          name: 'issues',\n          message: 'Add issue references (e.g. \"fix #123\", \"re #123\".):\\n',\n          when: function(answers) {\n            return answers.isIssueAffected;\n          },\n          default: options.defaultIssues ? options.defaultIssues : undefined\n        }\n      ]).then(function(answers) {\n        var wrapOptions = {\n          trim: true,\n          cut: false,\n          newline: '\\n',\n          indent: '',\n          width: options.maxLineWidth\n        };\n\n        // parentheses are only needed when a scope is present\n        var scope = answers.scope ? '(' + answers.scope + ')' : '';\n\n        // Hard limit this line in the validate\n        var head = answers.type + scope + ': ' + answers.subject;\n\n        // Wrap these lines at options.maxLineWidth characters\n        var body = answers.body ? wrap(answers.body, wrapOptions) : false;\n\n        // Apply breaking change prefix, removing it if already present\n        var breaking = answers.breaking ? answers.breaking.trim() : '';\n        breaking = breaking\n          ? 'BREAKING CHANGE: ' + breaking.replace(/^BREAKING CHANGE: /, '')\n          : '';\n        breaking = breaking ? wrap(breaking, wrapOptions) : false;\n\n        var issues = answers.issues ? wrap(answers.issues, wrapOptions) : false;\n        \n        // 最终通过 commitizen 传入的 commit 回调函数返回用户通过 inquirer 交互产生的 message 信息\n        commit(filter([head, body, breaking, issues]).join('\\n\\n'));\n      });\n    }\n  };\n};\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["我们重新回到 commitizen 查看如何执行上述 ",(0,i.jsx)(n.code,{children:"commit"})," 回调函数："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// src/commitizen/commit.js\n\n /**\n  * Asynchronously commits files using commitizen\n  */\n  \n// 这里的 prompter 就是从适配器获取的 prompter 函数\nfunction commit (inquirer, repoPath, prompter, options, done) {\n  var cacheDirectory = cacheDir('commitizen');\n  var cachePath = path.join(cacheDirectory, 'commitizen.json');\n\n  ensureDir(cacheDirectory, function (error) {\n    if (error) {\n      console.error(\"Couldn't create commitizen cache directory: \", error);\n      // TODO: properly handle error?\n    } else {\n      if (options.retryLastCommit) {\n\n        console.log('Retrying last commit attempt.');\n\n        // We want to use the last commit instead of the current commit,\n        // so lets override some options using the values from cache.\n        let {\n          options: retryOptions,\n          overrideOptions: retryOverrideOptions,\n          template: retryTemplate\n        } = cache.getCacheValueSync(cachePath, repoPath);\n        dispatchGitCommit(repoPath, retryTemplate, retryOptions, retryOverrideOptions, done);\n\n      } else {\n      \n        // 执行适配器提供的 prompter 函数，传入的第二个参数是一个回调函数\n        // 在 cz-conventional-changelog 中的  prompter: function(cz, commit) {} 中的 commit 就是该回调函数\n        // 该回调函数在 cz-conventional-changelog 中的调用为 commit(filter([head, body, breaking, issues]).join('\\n\\n'));\n        // Get user input -- side effect that is hard to test\n        prompter(inquirer, function (error, template, overrideOptions) {\n          // Allow adapters to error out\n          // (error: Error?, template: String, overrideOptions: Object)\n          // 判断传入的第一个参数是否是 Error 实例，如果不是则说明传入的是 message 信息\n          if (!(error instanceof Error)) {\n            overrideOptions = template;\n            template = error;\n            error = null;\n          }\n\n          if (error) {\n            return done(error);\n          }\n\n          // We don't want to add retries to the cache, only actual commands\n          cache.setCacheValueSync(cachePath, repoPath, { template, options, overrideOptions });\n          \n          // template 是通过执行适配器后获取的 git message 信息\n          // 最终会调用 git commit -m 执行提交说明\n          dispatchGitCommit(repoPath, template, options, overrideOptions, done);\n        });\n      }\n    }\n  });\n\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["通过 cz-conventional-changelog 的源码可以发现，commitizen 需要适配器提供 prompter 执行函数，并会向该函数注入 inquirer 和回调函数两个参数，适配器通过 inquirer 和用户产生信息交互，获取用户的信息后通过回调函数将用户信息返回给 commitizen 执行最终的 ",(0,i.jsx)(n.code,{children:"git commit"}),"。这是一种非常典型的插件设计模式，包括在 Webpack 中执行插件也是类似的模式，如下所示："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// https://webpack.docschina.org/contribute/writing-a-plugin/\n\n// 导出一个 Class 类\nclass MyExampleWebpackPlugin {\n  // 在插件函数的 prototype 上定义一个 `apply` 方法，以 compiler 为参数。\n  apply(compiler) {\n    // 指定一个挂载到 webpack 自身的事件钩子。\n    compiler.hooks.emit.tapAsync(\n      'MyExampleWebpackPlugin',\n      (compilation, callback) => {\n        console.log('这是一个示例插件！');\n        console.log(\n          '这里表示了资源的单次构建的 `compilation` 对象：',\n          compilation\n        );\n\n        // 用 webpack 提供的插件 API 处理构建过程\n        compilation.addModule(/* ... */);\n\n        callback();\n      }\n    );\n  }\n}\n\nmodule.exports = MyExampleWebpackPlugin;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["在 Webpack 中配置该插件时需要通过 ",(0,i.jsx)(n.code,{children:"new"})," 进行实例化（commitizen 只需要在配置层面提供 NPM 包的路径，如果适配器还需要额外提供配置参数，那么也可以通过 Webpack 的形式来处理），在内部执行 Webpack 插件的实例时会调用 ",(0,i.jsx)(n.code,{children:"apply"})," 函数并传入 ",(0,i.jsx)(n.code,{children:"compiler"})," 参数，在 ",(0,i.jsx)(n.code,{children:"compiler"})," 内部的事件钩子上通过 ",(0,i.jsx)(n.code,{children:"callback"})," 实现和宿主环境的回调处理。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：不管是 Webpack 的插件还是 commitizen 的适配器，本质上都是在宿主环境中定义出一个插件标准（NPM 包形式，可以形成复用），让插件导出可以被宿主环境调用的标准函数，并给插件注入宿主环境提供的参数和回调函数，让插件基于宿主环境的参数进行处理并返回宿主环境需要的信息。如果插件的功能非常复杂，那么也可以是一套完整的插件脚手架，例如 Vue CLI 的插件开发就相对复杂，需要提供一套标准的插件脚手架来完成插件功能的设计，具体可查看 ",(0,i.jsx)(n.a,{href:"https://cli.vuejs.org/zh/dev-guide/plugin-dev.html",target:"_blank",rel:"noopener noreferrer",children:"Vue CLI 插件开发指南"}),"。如果微前端的框架需要提供一个插件的功能供三方自定义，例如三方想自定义沙箱实例，想自行定义静态资源的请求方法，则完全可以通过上述思想来提供设计方案。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"定制提交说明",children:["定制提交说明",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#定制提交说明",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"通过 commitizen 和 cz-conventional-changelog 已经能够创建符合 Angular 规范的提交说明，如下所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["但是可以发现上述的两个 scope（工程化和 readme.md）仍然需要手写，并且 cz-conventional-changelog 中配置的能力是有限的，例如可以在 commitizen 的配置文件中配置自定义的 types 来覆盖 cz-conventional-changelog 中默认读取的 conventional-commit-types。那么是否有插件可以非常详细的来自定义整个提交说明呢，此时可以使用",(0,i.jsx)(n.a,{href:"https://github.com/leonardoanalista/cz-customizable",target:"_blank",rel:"noopener noreferrer",children:"cz-customizable"})," 适配器："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 将之前的 cz-conventional-changelog 替换为 cz-customizable 适配器\nnpx commitizen init cz-customizable --save --save-exact\n"})}),"\n",(0,i.jsx)(n.p,{children:"由于已经配置了 cz-conventional-changelog 适配器，此时执行会产生错误信息："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 执行\nnpx commitizen init cz-customizable --save --save-exact\n\n# 打印\nAttempting to initialize using the npm package cz-customizable\nError: Error: A previous adapter is already configured. Use --force to override\n    adapterConfig.path: ./node_modules/cz-conventional-changelog\n    repoPath: /Users/zhuxiankang/Desktop/Github/micro-framework\n    CLI_PATH: /Users/zhuxiankang/Desktop/Github/micro-framework/node_modules/commitizen/\n    installAdapterCommand: npm install cz-customizable --save-dev\n    adapterNpmName: cz-customizable\n"})}),"\n",(0,i.jsxs)(n.p,{children:["我们重新使用 ",(0,i.jsx)(n.code,{children:"--force"})," 强制覆盖适配器："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx commitizen init cz-customizable --save --save-exact --force\n"})}),"\n",(0,i.jsxs)(n.p,{children:["执行后可以发现 ",(0,i.jsx)(n.code,{children:"package.json"})," 中的 commitizen 适配器路径配置变更为 cz-customizable，此时我们执行 ",(0,i.jsx)(n.code,{children:"npm run cz"})," 进行测试："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 执行\nnpm run cz\n\n# 打印\n> micro-framework@1.0.6 cz\n> git cz\n\ncz-cli@4.3.0, cz-customizable@7.0.0\n\nUnable to find a configuration file. Please refer to documentation to learn how to set up: https://github.com/leonardoanalista/cz-customizable#steps \"\nCannot read properties of null (reading 'subjectLimit')\n"})}),"\n",(0,i.jsxs)(n.p,{children:["可以发现适配器已经成功被替换，但是提示需要提供配置文件，查看 cz-customizable 的仓库文档可以发现需要提供 ",(0,i.jsx)(n.a,{href:"https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js",target:"_blank",rel:"noopener noreferrer",children:".cz-config.js"})," 配置文件，并且官方提供了一个示例，如下所示："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js\nmodule.exports = {\n  types: [\n    { value: "feat", name: "feat:     A new feature" },\n    { value: "fix", name: "fix:      A bug fix" },\n    { value: "docs", name: "docs:     Documentation only changes" },\n    {\n      value: "style",\n      name: "style:    Changes that do not affect the meaning of the code\\n            (white-space, formatting, missing semi-colons, etc)",\n    },\n    {\n      value: "refactor",\n      name: "refactor: A code change that neither fixes a bug nor adds a feature",\n    },\n    {\n      value: "perf",\n      name: "perf:     A code change that improves performance",\n    },\n    { value: "test", name: "test:     Adding missing tests" },\n    {\n      value: "chore",\n      name: "chore:    Changes to the build process or auxiliary tools\\n            and libraries such as documentation generation",\n    },\n    { value: "revert", name: "revert:   Revert to a commit" },\n    { value: "WIP", name: "WIP:      Work in progress" },\n  ],\n\n  scopes: [\n    { name: "accounts" },\n    { name: "admin" },\n    { name: "exampleScope" },\n    { name: "changeMe" },\n  ],\n\n  usePreparedCommit: false, // to re-use commit from ./.git/COMMIT_EDITMSG\n  allowTicketNumber: false,\n  isTicketNumberRequired: false,\n  ticketNumberPrefix: "TICKET-",\n  ticketNumberRegExp: "\\\\d{1,5}",\n\n  // it needs to match the value for field type. Eg.: \'fix\'\n  /*\n    scopeOverrides: {\n      fix: [\n  \n        {name: \'merge\'},\n        {name: \'style\'},\n        {name: \'e2eTest\'},\n        {name: \'unitTest\'}\n      ]\n    },\n    */\n  // override the messages, defaults are as follows\n  messages: {\n    type: "Select the type of change that you\'re committing:",\n    scope: "\\nDenote the SCOPE of this change (optional):",\n    // used if allowCustomScopes is true\n    customScope: "Denote the SCOPE of this change:",\n    subject: "Write a SHORT, IMPERATIVE tense description of the change:\\n",\n    body: \'Provide a LONGER description of the change (optional). Use "|" to break new line:\\n\',\n    breaking: "List any BREAKING CHANGES (optional):\\n",\n    footer:\n      "List any ISSUES CLOSED by this change (optional). E.g.: #31, #34:\\n",\n    confirmCommit: "Are you sure you want to proceed with the commit above?",\n  },\n\n  allowCustomScopes: true,\n  allowBreakingChanges: ["feat", "fix"],\n  // skip any questions you want\n  // skipQuestions: [\'scope\', \'body\'],\n\n  // limit subject length\n  subjectLimit: 100,\n  // breaklineChar: \'|\', // It is supported for fields body and footer.\n  // footerPrefix : \'ISSUES CLOSED:\'\n  // askForBreakingChangeFirst : true, // default is false\n};\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["我们在根目录下新增 ",(0,i.jsx)(n.code,{children:".cz-config.js"}),"，并将示例放入文件中，再次执行 ",(0,i.jsx)(n.code,{children:"npm run cz"}),"："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 执行\n npm run cz\n\n# 打印\n> micro-framework@1.0.6 cz\n> git cz\n\ncz-cli@4.3.0, cz-customizable@7.0.0\n\nAll lines except first will be wrapped after 100 characters.\n? Select the type of change that you're committing: (Use arrow keys)\n❯ feat:     A new feature \n  fix:      A bug fix \n  docs:     Documentation only changes \n  style:    Changes that do not affect the meaning of the code\n            (white-space, formatting, missing semi-colons, etc) \n  refactor: A code change that neither fixes a bug nor adds a feature \n  perf:     A code change that improves performance \n(Move up and down to reveal more choices)\n"})}),"\n",(0,i.jsx)(n.p,{children:"可以发现适配器 cz-customizable 已经可以根据配置文件进行提示了，我们重新更改一下示例文件，对其进行汉化处理并更改 scopes 从而可以符合我们的开发项目："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// 根目录下的 .cz-config.js\n// https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js\nmodule.exports = {\n  // 对原有的 types 进行汉化处理\n  types: [\n    { value: "特性", name: "特性:    一个新的特性" },\n    { value: "修复", name: "修复:    修复一个Bug" },\n    { value: "文档", name: "文档:    变更的只有文档" },\n    { value: "格式", name: "格式:    空格, 分号等格式修复" },\n    { value: "重构", name: "重构:    代码重构，注意和特性、修复区分开" },\n    { value: "性能", name: "性能:    提升性能" },\n    { value: "测试", name: "测试:    添加一个测试" },\n    { value: "工具", name: "工具:    开发工具变动(构建、脚手架工具等)" },\n    { value: "回滚", name: "回滚:    代码回退" },\n    { value: "开发中", name: "开发中:  功能正在开发，还未完成" },\n  ],\n\n  // 以本小册的课程内容进行 scopes 的拆分\n  // 如果是组件库，则可以根据组件的名称进行拆分\n  // 如果是框架库，也可以根据框架库的模块内容进行拆分\n  // 例如这里的框架设计还可以细分为 框架设计(沙箱)、框架设计(性能优化)、框架设计(通信)\n  scopes: [\n    { name: "方案了解" },\n    { name: "框架原理" },\n    { name: "工程设计" },\n    { name: "框架设计" },\n  ],\n\n  usePreparedCommit: false, // to re-use commit from ./.git/COMMIT_EDITMSG\n  allowTicketNumber: false,\n  isTicketNumberRequired: false,\n  ticketNumberPrefix: "TICKET-",\n  ticketNumberRegExp: "\\\\d{1,5}",\n\n  // it needs to match the value for field type. Eg.: \'fix\'\n  /*\n    scopeOverrides: {\n      fix: [\n  \n        {name: \'merge\'},\n        {name: \'style\'},\n        {name: \'e2eTest\'},\n        {name: \'unitTest\'}\n      ]\n    },\n    */\n  // override the messages, defaults are as follows\n  messages: {\n    type: "选择一种提交类型:",\n    scope: "选择一个 scope (可选):",\n    // used if allowCustomScopes is true\n    customScope: "选择一个 scope:",\n    subject: "短说明:\\n",\n    body: \'长说明，使用"|"换行(可选)：\\n\',\n    breaking: "非兼容性说明 (可选):\\n",\n    footer: "关联关闭的 issue，例如：#31, #34(可选):\\n",\n    confirmCommit: "确定提交说明?",\n  },\n\n  allowCustomScopes: true,\n  allowBreakingChanges: ["feat", "fix"],\n  // skip any questions you want\n  // skipQuestions: [\'scope\', \'body\'],\n\n  // limit subject length\n  subjectLimit: 100,\n  // breaklineChar: \'|\', // It is supported for fields body and footer.\n  // footerPrefix : \'ISSUES CLOSED:\'\n  // askForBreakingChangeFirst : true, // default is false\n};\n'})}),"\n",(0,i.jsx)(n.p,{children:"更改以后再次进行代码提交："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:s,alt:"定制cz.gif"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：示例源码可以从 ",(0,i.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/commits/demo/changelog-cz-customizable",target:"_blank",rel:"noopener noreferrer",children:"demo/changelog-cz-customizable"})," 分支获取。感兴趣的同学可以简单阅读一下 cz-customizable 适配器的源码，本课程不再讲解实现细节。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"commitlint",children:["commitlint",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#commitlint",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["尽管我们已经可以通过 ",(0,i.jsx)(n.code,{children:"git cz"})," 进行提交说明，但是在团队协作的过程中并不是所有人都会遵循该提交规范。为了防止不符合 Angular 规范的提交说明被上传，并且为了后续可通过工具快速生成规范的变更日志，我们需要在提交说明时对说明内容进行校验，此时我们可以通过 husky 配合 ",(0,i.jsx)(n.a,{href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer",children:"commitlint"})," 来完成这项工作，通过校验："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"有助于自动生成 CHANGELOG (变更日志)"}),"\n",(0,i.jsx)(n.li,{children:"有助于发布语义版本"}),"\n",(0,i.jsx)(n.li,{children:"有助于向库的使用者传达变更信息"}),"\n",(0,i.jsx)(n.li,{children:"有助于建设 CI / CD 流程"}),"\n",(0,i.jsx)(n.li,{children:"通过浏览结构化的提交历史，有助于更好的团队协作"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["commitlint 用于校验提交说明的格式规范，配合 ",(0,i.jsx)(n.a,{href:"https://github.com/conventional-changelog/commitlint/tree/master/@commitlint/config-conventional",target:"_blank",rel:"noopener noreferrer",children:"commitlint-config-conventional"})," 可以校验提交说明是否 Angular 规范，该共享配置中的 types 校验和 cz-conventional-changelog 中默认使用的 types 完全一致，当然除了校验 types 是否符合 Angular 规范的提交说明，也会校验内容的格式信息，可以查看 ",(0,i.jsx)(n.a,{href:"https://github.com/conventional-changelog/commitlint/tree/master/@commitlint/config-conventional#rules",target:"_blank",rel:"noopener noreferrer",children:"Rules"})," 了解细节。我们通过以下命令进行安装使用："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 安装 commitlint 的 CLI 和共享配置 @commitlint/config-conventional\nnpm install --save-dev @commitlint/config-conventional @commitlint/cli\n# 在项目根目录新建 commitlint.config.js 配置文件并配置 @commitlint/config-conventional 为共享配置\necho \"module.exports = {extends: ['@commitlint/config-conventional']}\" > commitlint.config.js\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"温馨提示：在 ESLint 中我们讲解了共享配置的概念，在此处可以将 commitlint 对比成 ESLint，将 commitlint-config-conventional 对比成 ESLint 的共享配置。本课程不再额外讲解 commitlint 的工作原理，感兴趣的同学可以自行了解。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"安装并配置完成后，我们设置 husky 来新增 git 钩子："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx husky add .husky/commit-msg  'npx --no -- commitlint --edit ${1}'\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：关于 husky 和 commit-msg 钩子可以回顾上一节课程",(0,i.jsx)(n.strong,{children:"提交规范"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["此时我们使用 ",(0,i.jsx)(n.code,{children:"npm run cz"})," 进行提交说明时，husky 会执行 ",(0,i.jsx)(n.code,{children:"commitlint"})," 校验命令来校验提交说明是否符合 Angular 规范，如果不符合规范则会放弃本次提交。我们可以用它来校验之前配置的自定义提交说明，如下所示："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# 执行\nnpm run cz                                                                                   \n# 打印\n> micro-framework@1.0.6 cz\n> git cz\n\ncz-cli@4.3.0, cz-customizable@7.0.0\n\nAll lines except first will be wrapped after 100 characters.\n? 选择一种提交类型: 特性:    一个新的特性\n? 选择一个 scope (可选): 工程设计\n? 短说明:\n 新增 commitlint\n? 长说明，使用"|"换行：\n 用于校验 commit 是否符合 Angular 规范\n? 关联关闭的 issue，例如：#31, #34(可选):\n \n\n###--------------------------------------------------------###\n特性(工程设计): 新增 commitlint\n\n用于校验 commit 是否符合 Angular 规范\n###--------------------------------------------------------###\n\n? 确定提交说明? Yes\n→ No staged files match any configured task.\n⧗   input: 特性(工程设计): commitlint\n\n用于校验 commit 是否符合 Angular 规范\n# 提示没有 subject\n✖   subject may not be empty [subject-empty]\n# 提示没有 type\n✖   type may not be empty [type-empty]\n\n✖   found 2 problems, 0 warnings\nⓘ   Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint\n\nhusky - commit-msg hook exited with code 1 (error)\ngit exited with error code 1\n'})}),"\n",(0,i.jsxs)(n.p,{children:["可以发现自定义提交说明改变了原有 Angular 规范的 types 的值导致校验失败。一种方式是将 cz-customizable 回退成 cz-conventional-changelog 进行提交说明。如果还是想要使用 cz-customizable 定制提交说明，则可以自行设计共享配置或者使用 ",(0,i.jsx)(n.a,{href:"https://github.com/whizark/commitlint-config-cz",target:"_blank",rel:"noopener noreferrer",children:"commitlint-config-cz"})," 对自定义提交说明进行校验："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 安装共享配置\nnpm install commitlint-config-cz --save-dev\n# 更改配置\necho \"module.exports = {extends: ['cz']}\" > commitlint.config.js\n"})}),"\n",(0,i.jsxs)(n.p,{children:["我们假设团队协作的新人对具有校验功能的项目进行 ",(0,i.jsx)(n.code,{children:"git commit"})," 提交："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# 执行（使用不符合自定义规则的提交说明）\ngit commit -m "feat: hello"\n→ No staged files match any configured task.\n⧗   input: feat: hello\n# 校验失败，type 必须是 .cz-config.js 中汉化的 type \n✖   type must be one of [特性, 修复, 文档, 格式, 重构, 性能, 测试, 工具, 回滚, 开发中] [type-enum]\n\n✖   found 1 problems, 0 warnings\nⓘ   Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint\n\nhusky - commit-msg hook exited with code 1 (error)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["我们使用 ",(0,i.jsx)(n.code,{children:"npm run cz"})," 进行提交，此时可以校验通过："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# 执行\nnpm run cz\n\n# 打印\n> micro-framework@1.0.6 cz\n> git cz\n\ncz-cli@4.3.0, cz-customizable@7.0.0\n\nAll lines except first will be wrapped after 100 characters.\n? 选择一种提交类型: 特性:    一个新的特性\n? 选择一个 scope (可选): 工程设计\n? 短说明:\n 新增  commitlint\n? 长说明，使用"|"换行：\n 使用 commitlint 来校验提交说明是否符合规范\n? 关联关闭的 issue，例如：#31, #34(可选):\n \n\n###--------------------------------------------------------###\n特性(工程设计): 新增  commitlint\n\n使用 commitlint 来校验提交说明是否符合规范\n###--------------------------------------------------------###\n\n? 确定提交说明? Yes\n→ No staged files match any configured task.\n[demo/changelog-commitlint c03edc3] 特性(工程设计): 新增  commitlint\n 6 files changed, 2327 insertions(+), 238 deletions(-)\n create mode 100755 .husky/commit-msg\n create mode 100644 commitlint.config.js\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：示例源码可以从\xa0",(0,i.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/changelog-commitlint",target:"_blank",rel:"noopener noreferrer",children:"demo/changelog-commitlint"}),"\xa0分支获取。开发者有什么方式可以绕过上述校验规则呢？"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"变更日志",children:["变更日志",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#变更日志",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["使用了 commitizen（cz-customizable） + commitlint（commitlint-config-cz）的组合之后，可以确保团队协作的过程中都生成符合 Augular 规范的提交说明。生成了规范的提交说明之后可以使用 ",(0,i.jsx)(n.a,{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli",target:"_blank",rel:"noopener noreferrer",children:"conventional-changelog-cli"})," 自动生成变更日志："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev conventional-changelog-cli\n"})}),"\n",(0,i.jsxs)(n.p,{children:["安装完成后在 ",(0,i.jsx)(n.code,{children:"package.json"})," 中新增 CLI 命令："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0"\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：可以查看 Vue 代码的 ",(0,i.jsx)(n.code,{children:"package.json"}),"，使用的也是 conventional-changelog 工具，注意该工具的 CLI 参数，有些参数是增量式生成日志，这里是对日志进行全量覆盖处理。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["执行 ",(0,i.jsx)(n.code,{children:"npm run changelog"})," 之后会在根目录下自动生成 ",(0,i.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/blob/demo/changelog/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer",children:"CHANGELOG.md"})," 文件："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"需要注意，从上述变更日志可以发现 Angular 规范中的 Body 被日志忽视，由于 Body 不是必须的，因此尽量详细书写 subject 短说明（本课程示例中的短说明写的太短，已经无法说明 commit 提交的目的，导致变更日志看起来不够详细。。。）。"}),"\n",(0,i.jsx)(n.p,{children:"除此之外，上述变更日志中出现了大量重复的 commit 提交说明，有没有什么方式可以合并提交说明呢？合并提交说明对于代码 CR 和 PR 都是非常有用的能力。"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：示例源码可以从\xa0",(0,i.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/changelog",target:"_blank",rel:"noopener noreferrer",children:"demo/changelog"}),"\xa0分支获取。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"小结",children:["小结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"本课程先讲解了 Angular 规范的提交说明，然后详细讲解了 commitizen 和适配器的工作原理和作用，并讲解了在团队协作的过程中如何进行提交说明的校验，从而最终可以生成规范的变更日志。在设计的过程中，推荐使用 cz-conventional-changelog 和 @commitlint/config-conventional 的组合规范提交说明，如果需要对提交说明进行汉化处理，则可以使用 cz-customizable 和 commitlint-config-cz 的组合。在下一个课程中，我们重点讲解如何进行单元测试。"})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}let f=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F34.%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%8F%98%E6%9B%B4%E6%97%A5%E5%BF%97.md"]={toc:[{text:"提交说明",id:"提交说明",depth:2},{text:"提交说明规范",id:"提交说明规范",depth:2},{text:"Header",id:"header",depth:3},{text:"Body",id:"body",depth:3},{text:"Footer",id:"footer",depth:3},{text:"示例",id:"示例",depth:3},{text:"Commitizen",id:"commitizen",depth:2},{text:"commitizen 工作原理",id:"commitizen-工作原理",depth:3},{text:"cz-conventional-changelog 工作原理",id:"cz-conventional-changelog-工作原理",depth:3},{text:"定制提交说明",id:"定制提交说明",depth:3},{text:"commitlint",id:"commitlint",depth:2},{text:"变更日志",id:"变更日志",depth:2},{text:"小结",id:"小结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);