"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["81873"],{214784:function(e,n,s){e.exports=s.p+"static/image/64c69dc3494d7847d415a51ba1b4d709.ec02fbb5.webp"},816397:function(e,n,s){s.r(n),s.d(n,{default:()=>R});var r=s(552676),i=s(740453);let t=s.p+"static/image/53662d24f21b123fe1c83bf12acf6571.c89e51f2.webp",a=s.p+"static/image/a0b6f7df272a956f751eb917beea51b5.51f0e13d.webp",c=s.p+"static/image/01116ef297813dc8dc5766c413a1600d.8671c627.webp",d=s.p+"static/image/71523ca867801fea4cbf9d3dcaffed5e.07d08821.webp",p=s.p+"static/image/f6ebb9a3f29542950517166f83232816.837a2f94.webp",l=s.p+"static/image/3398f616fd4a17b52b3c8b7d8f6c8db6.8583774e.webp",o=s.p+"static/image/aa67aa98cfeb88d0eae2f169d806fe6b.ab311e04.webp",x=s.p+"static/image/662d6f0d7d8ae11c5b723abd02150cf1.ff195df4.webp",m=s.p+"static/image/c6f3e5049f9fcd245382e8397a3fe50d.9a3befed.webp",j=s.p+"static/image/bbb36c019eb4518514c90a4075a7ca8d.7de541c0.webp",h=s.p+"static/image/48d740ec454a66590bbbfd06b63829d0.692da9c8.webp",b=s.p+"static/image/53d9d56d172f59dda491f6bc41c69bb3.397c3f3a.webp",g=s.p+"static/image/e2e1695d9b77607b10cb1aea55da9385.27dd3493.webp",f=s.p+"static/image/21aadb6ba525e8b224b66c3b5dbc772c.6d723590.webp",u=s.p+"static/image/228b97abe384781f633adf329a6e77d5.c8918a65.webp",w=s.p+"static/image/4c38ee77768d6fd6fac55b2b49cafe90.0e3a4f16.webp",v=s.p+"static/image/4845ddabeb2e0ed41fb947823c39a523.22cdba16.webp",U=s.p+"static/image/628a474ff7ca138f66623a62c4821089.dbac7f9c.webp",y=s.p+"static/image/2a970c7b5761745d4e4eaaf80f92e233.8465a2c5.webp",E=s.p+"static/image/0df31ee528f87cd4d621d6d4e02331b0.b95d4ac9.webp",A=s.p+"static/image/5fc14aed7ff29e5900e8684e3982977d.f0fbe7ef.webp",P=s.p+"static/image/8ee050c3f4e2b5a1d09eebc8f8a4e6db.0fe7d27d.webp",S=s.p+"static/image/4313cdcd7d5a62e0d5a198b4b01edd71.5b8eea3b.webp",D=s.p+"static/image/7e42e319882f17f916466be4cceafe11.f8bcb47e.webp",O=s.p+"static/image/2331bda61e8bc92ba239621f6cfe5791.89b8df49.webp",C=s.p+"static/image/8b22c12bd3601ed862bdbde20184c140.63f2b52a.webp",T=s.p+"static/image/4f44faa2a0acf158abdef7db5426251f.36966581.webp",B=s.p+"static/image/4ee8857adf0a4d9dd15a96fdd6611a82.55186061.webp",N=s.p+"static/image/1b30212747b580d95d6ed742aeeeb739.ba2ff475.webp";var _=s(214784);let V=s.p+"static/image/7effb0e7bb9ffcba81dec45c148de4ec.fe522537.webp",z=s.p+"static/image/e756ae66d32d94380926f5cb24c0bdf1.c1c9f6e8.webp";function I(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"86--序列化-entity你不需要-vo-对象",children:["86.  序列化 Entity，你不需要 VO 对象",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#86--序列化-entity你不需要-vo-对象",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"后端系统常见的对象有三种："}),"\n",(0,r.jsx)(n.p,{children:"Entity：数据实体，和数据库表对应。"}),"\n",(0,r.jsx)(n.p,{children:"DTO： Data Transfer Object，用于封装请求参数。"}),"\n",(0,r.jsx)(n.p,{children:"VO：Value Object，用于封装返回的响应数据。"}),"\n",(0,r.jsx)(n.p,{children:"三者的关系如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:z,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"但文档中并没有提到 VO 对象，这是为什么呢？"}),"\n",(0,r.jsx)(n.p,{children:"因为有替代方案。"}),"\n",(0,r.jsx)(n.p,{children:"我们来看一下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest new vo-test\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:V,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"生成一个 user 的 CRUD 模块："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g resource user --no-spec\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 entity 里加一些内容："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export class User {\n    id: number;\n\n    username: string;\n\n    password: string;\n\n    email: string;\n\n    constructor(partial: Partial<User>) {\n        Object.assign(this, partial);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Partial 是把 User 的属性变为可选："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以传入部分属性，然后 Object.assign 赋值到 this。"}),"\n",(0,r.jsx)(n.p,{children:"然后 CreateUserDto 里包含这些属性："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export class CreateUserDto {\n    username: string;\n\n    password: string;\n\n    email: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"实现下 UserService 的 create 和 find 的逻辑："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这里我们直接用数组模拟 database 来保存数据。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { BadRequestException, Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\n\nconst database = [];\nlet id = 0;\n\n@Injectable()\nexport class UserService {\n  create(createUserDto: CreateUserDto) {\n    const user = new User(createUserDto);\n\n    user.id = id++;\n\n    database.push(user);\n\n    return user;\n  }\n\n  findAll() {\n    return database;\n  }\n\n  findOne(id: number) {\n    return database.filter(item =>  item.id === id).at(0);\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"创建两个 user："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:"i"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"查一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，user 的 password 也被返回了。"}),"\n",(0,r.jsx)(n.p,{children:"而这个应该过滤掉。"}),"\n",(0,r.jsx)(n.p,{children:"一般这种情况，我们都会封装个 vo。"}),"\n",(0,r.jsx)(n.p,{children:"创建 vo/user.vo.ts："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export class UserVo {\n    id: number;\n\n    username: string;\n\n    email: string;\n\n    constructor(partial: Partial<UserVo>) {\n        Object.assign(this, partial);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后把数据封装成 vo 返回："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"findAll() {\n    return database.map(item => {\n      return new UserVo({\n        id: item.id,\n        username: item.username,\n        email: item.email\n      });\n    });\n}\n\nfindOne(id: number) {\n    return database.filter(item =>  item.id === id).map(item => {\n      return new UserVo({\n        id: item.id,\n        username: item.username,\n        email: item.email\n      });\n    }).at(0);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"试一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，这样就没有 password 了。"}),"\n",(0,r.jsx)(n.p,{children:"但你会发现 UserVo 和 User entity 很类似："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"对于 dto 我们可以通过 PartialType、PickType、OmitType、IntersectionType 来组合已有 dto，避免重复。"}),"\n",(0,r.jsx)(n.p,{children:"那 vo 是不是也可以呢？"}),"\n",(0,r.jsx)(n.p,{children:"是的，nest 里可以直接复用 entity 作为 vo。"}),"\n",(0,r.jsx)(n.p,{children:"这里要用到 class-transformer 这个包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save class-transformer\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后在 UserController 的查询方法上加上 ClassSerializerInterceptor 就好了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"代码恢复原样："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:U,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"现在返回的数据就没有 password 字段了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"class-transformer 这个包我们用过，是用于根据 class 创建对应的对象的。"}),"\n",(0,r.jsx)(n.p,{children:"当时是 ValidationPipe 里用它来创建 dto class 对应的对象。"}),"\n",(0,r.jsx)(n.p,{children:"这里也是用它来创建 entity class 对应的对象。"}),"\n",(0,r.jsx)(n.p,{children:"简单看下 ClassSerializerInterceptor 的源码："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"它是通过 map 对响应做转换，在 serialize 方法拿到响应的对象，如果是数组就拿到每个元素。"}),"\n",(0,r.jsx)(n.p,{children:"在 transformToPlain 方法里，调用 classToPlain 创建对象。"}),"\n",(0,r.jsx)(n.p,{children:"它会先拿到响应对象的 class、然后根据 class 上的装饰器来创建新的对象。"}),"\n",(0,r.jsx)(n.p,{children:"当然，装饰器不只有 @Exclude，还有几个有用的："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Exclude, Expose, Transform } from \"class-transformer\";\n\nexport class User {\n    id: number;\n\n    username: string;\n\n    @Exclude()\n    password: string;\n\n    @Expose()\n    get xxx(): string {\n        return `${this.username} ${this.email}`;\n    }\n\n    @Transform(({value}) => '邮箱是：' + value)\n    email: string;\n\n    constructor(partial: Partial<User>) {\n        Object.assign(this, partial);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"@Expose 是添加一个导出的字段，这个字段是只读的。"}),"\n",(0,r.jsx)(n.p,{children:"@Transform 是对返回的字段值做一些转换。"}),"\n",(0,r.jsx)(n.p,{children:"测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，返回的数据多了 xxx 字段，email 字段也做了修改："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样基于 entity 直接创建 vo 确实方便多了。"}),"\n",(0,r.jsx)(n.p,{children:"此外，你可以可以通过 @SerializeOptions 装饰器加一些序列化参数："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"strategy 默认值是 exposeAll，全部导出，除了有 @Exclude 装饰器的。"}),"\n",(0,r.jsx)(n.p,{children:"设置为 excludeAl 就是全部排除，除了有 @Expose 装饰器的。"}),"\n",(0,r.jsx)(n.p,{children:"当然，你可以 ClassSerializerInterceptor 和 SerializeOptions 加到 class 上："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样，controller 所有的接口返回的对象都会做处理："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"swagger 那节当返回对象的时候，我们都是创建了个 vo 的类，在 vo class 上加上 swagger 的装饰器："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"其实没必要，完全可以直接用 entity。"}),"\n",(0,r.jsx)(n.p,{children:"安装 swagger 的包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save @nestjs/swagger\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后在 main.ts 添加 swagger 的入口代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  const config = new DocumentBuilder()\n    .setTitle('Test example')\n    .setDescription('The API description')\n    .setVersion('1.0')\n    .addTag('test')\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('doc', app, document);\n\n  await app.listen(3000);\n}\nbootstrap();\n"})}),"\n",(0,r.jsx)(n.p,{children:"现在 @apiResponse 里就可以直接指定 User 的 entity 了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Post, Body, Patch, Param, Delete, UseInterceptors, ClassSerializerInterceptor, SerializeOptions, HttpStatus } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiBody, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { User } from './entities/user.entity';\n\n@Controller('user')\n@SerializeOptions({\n  // strategy: 'excludeAll'\n})\n@UseInterceptors(ClassSerializerInterceptor)\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @ApiOperation({summary:'findAll'})\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'ok',\n    type: User\n  })\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(+id);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 User 里加一下 swagger 的装饰器："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { ApiHideProperty, ApiProperty } from "@nestjs/swagger";\nimport { Exclude, Expose, Transform } from "class-transformer";\n\nexport class User {\n    @ApiProperty()\n    id: number;\n\n    @ApiProperty()\n    username: string;\n\n    @ApiHideProperty()\n    @Exclude()\n    password: string;\n\n    @ApiProperty()\n    @Expose()\n    get xxx(): string {\n        return `${this.username} ${this.email}`;\n    }\n\n    @ApiProperty()\n    @Transform(({value}) => \'邮箱是：\' + value)\n    email: string;\n\n    constructor(partial: Partial<User>) {\n        Object.assign(this, partial);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"注意，这里要用 @ApiHideProperty 把 password 字段隐藏掉。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，现在的 swagger 文档是对的："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"而且我们没有用 vo 对象。"}),"\n",(0,r.jsx)(n.p,{children:"这也是为什么 Nest 文档里没有提到 vo，因为完全可以用 entity 来替代。"}),"\n",(0,r.jsxs)(n.p,{children:["案例代码在",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/vo-test",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"后端系统中常见 entity、vo、dto 三种对象，vo 是用来封装返回的响应数据的。"}),"\n",(0,r.jsx)(n.p,{children:"但是 Nest 文档里并没有提到 vo 对象，因为完全可以用 entity 来代替。"}),"\n",(0,r.jsx)(n.p,{children:"entity 里加上 @Exclude 可以排除某些字段、@Expose 可以增加一些派生字段、@Transform 可以对已有字段的序列化结果做修改。"}),"\n",(0,r.jsx)(n.p,{children:"然后在 cotnroller 上加上 ClassSerializerInterceptor 的 interceptor，还可以用 @SerializeOptions 来添加 options。"}),"\n",(0,r.jsx)(n.p,{children:"它的底层是基于 class-transfomer 包来实现的，拿到响应对象，plainToClass 拿到 class，然后根据 class 的装饰器再 classToPlain 创建序列化的对象。"}),"\n",(0,r.jsx)(n.p,{children:"swagger 的 @ApiResponse 也完全可以用 entity 来代替 vo，在想排除的字段加一下 @ApiHideProperty 就好了。"}),"\n",(0,r.jsx)(n.p,{children:"Nest 文档里并没有提到 vo 对象，因为完全没有必要，可以直接用序列化的 entity。"})]})}function k(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(I,{...e})}):I(e)}let R=k;k.__RSPRESS_PAGE_META={},k.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F86.%20%20%E5%BA%8F%E5%88%97%E5%8C%96%20Entity%EF%BC%8C%E4%BD%A0%E4%B8%8D%E9%9C%80%E8%A6%81%20VO%20%E5%AF%B9%E8%B1%A1.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"86.  序列化 Entity，你不需要 VO 对象",headingTitle:"86.  序列化 Entity，你不需要 VO 对象",frontmatter:{}}}}]);