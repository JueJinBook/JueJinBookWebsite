"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["77435"],{756889:function(n,e,t){t.r(e),t.d(e,{default:()=>g});var r=t(552676),i=t(740453);let o=t.p+"static/image/9d094e82dda4fdd5b496dbccb846370f.107014cd.webp",s=t.p+"static/image/a0feb720ecd96e20f32fbd86a13c6936.277cf5d9.webp",a=t.p+"static/image/22cac9b18b2d2a2e226a154cd6d8ee9b.3ae4e227.webp",l=t.p+"static/image/4dd611ee0ce142497bf632b17a15856d.74f8ffec.webp",c=t.p+"static/image/ee195c5dd8c8a56ec682850b4e8fc8b6.34af6aae.webp",p=t.p+"static/image/4689e3cd612fc1296d78e16231bf750b.091bd481.webp",d=t.p+"static/image/b93a5f865087293f38ef2176ce7bd4d1.597c3a14.webp",x=t.p+"static/image/f6c925468942f77af0c27bc20a225a32.a77776f4.webp";function m(n){let e=Object.assign({blockquote:"blockquote",p:"p",a:"a",img:"img",h1:"h1",ol:"ol",li:"li",h2:"h2",pre:"pre",code:"code",ul:"ul",strong:"strong"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["仓库：",(0,r.jsx)(e.a,{href:"https://github.com/czm1290433700/nextjs-demo",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/czm1290433700/nextjs-demo"})]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"上一节课，我们介绍了怎么初始化一个 Nextjs 服务器端渲染项目，这一节我们将来学习怎么在 Nextjs 项目中实现完整的页面链路。在开始这章的学习前，我们先来回忆一下 SSR 实现静态页面渲染的一个过程。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"主体上可以分为模板页面渲染、路由匹配和 header 修改三个模块，模板页面渲染是页面渲染的主要部分，包含了静态模板的生成和页面数据的注入，最后形成服务器端返回给我们的 HTML文本。"}),"\n",(0,r.jsx)(e.p,{children:"在 Nextjs 中也是按照这几个模块来实现的，在这些基础上它提供了不少开箱即用的能力，我们不再需要自己实现相关的方法。所以这小节我们仍从模板页面渲染、路由匹配和 header修改三个模块来展开对 Nextjs 实战的学习。"}),"\n",(0,r.jsx)(e.p,{children:"这一节的代码量会比较多，大家可以对着教程自己手写看看，不一定要完全复制，更重要的是理解思路和过程。"}),"\n",(0,r.jsxs)(e.h1,{id:"7快速上手在-nextjs-项目中实现完整页面链路",children:["7.快速上手：在 Nextjs 项目中实现完整页面链路",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#7快速上手在-nextjs-项目中实现完整页面链路",children:"#"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.h2,{children:"通用 layout"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Nextjs 模板页面的写法和 React 的用法是相同的，这里不过多赘述。我们的web应用的路由页面之间通常会有共同的页面元素，比如页首、页尾，对于这种页面，我们通常会定义对应的组件在入口文件中引用，这样所有的页面就都可以有相同的页面组件了，而不在需要在每个页面中去单独调用"}),"\n",(0,r.jsx)(e.p,{children:"在写页面之前，给大家推荐一个在业务开发中很好用的类名库 classnames，它可以用函数式的方式来处理一些相对复杂的类场景，后续会有大量应用。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install classnames --save\n"})}),"\n",(0,r.jsx)(e.p,{children:"我们先定义一下页首的组件："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./components/navbar/index.tsx\nimport { FC } from "react";\nimport styles from "./styles.module.scss";\nimport Image from "next/image";\nimport logoLight from "@/public/logo_light.png";\n\nexport interface INavBarProps {}\n\nexport const NavBar: FC<INavBarProps> = ({}) => {\n  return (\n    <div className={styles.navBar}>\n      <a href="http://localhost:3000/">\n        <Image src={logoLight} alt="Demo" width={70} height={20} />\n      </a>\n    </div>\n  );\n};\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"// ./components/navbar/styles.module.scss\n.navBar {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    background-color: hsla(0,0%,100%,.5);\n    backdrop-filter: blur(8px);\n    width: 100%;\n    height: 64px;\n    position: sticky;\n    top: 0;\n    left: 0;\n    padding: 20px 32px;\n    z-index: 100;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"其中我们引用了 next/image 内置的 Image 标签，相比平常的 img 标签，Nextjs 会根据导入的图像来确认宽高，从而规避累积布局移位 (CLS) 的问题，可以在布局阶段提前进行相关区域预留位置，而不是加载中再进行移位。"}),"\n",(0,r.jsx)(e.p,{children:"同样我们再定义一下页尾的组件："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./components/footer/index.tsx\nimport { FC } from "react";\nimport Image from "next/image";\nimport publicLogo from "@/public/public_logo.png";\nimport styles from "./styles.module.scss";\nimport cName from "classnames";\n\ninterface ILink {\n  label: string;\n  link?: string;\n}\n\ninterface ILinkList {\n  title: string;\n  list: ILink[];\n}\n\ninterface IQRCode {\n  image: string;\n  text: string;\n}\n\nexport interface IFooterProps {\n  title: string;\n  linkList: ILinkList[];\n  qrCode: IQRCode;\n  copyRight: string;\n  siteNumber: string; // 站点备案号\n  publicNumber: string; // 公安备案号\n}\n\nexport const Footer: FC<IFooterProps> = ({\n  title,\n  linkList,\n  qrCode,\n  copyRight,\n  siteNumber,\n  publicNumber,\n}) => {\n  return (\n    <div className={styles.footer}>\n      <div className={styles.topArea}>\n        <h1 className={styles.footerTitle}>{title}</h1>\n        <div className={styles.linkListArea}>\n          {linkList?.map((item, index) => {\n            return (\n              <div className={styles.linkArea} key={`linkArea${index}`}>\n                <span className={styles.title}>{item.title}</span>\n                <div className={styles.links}>\n                  {item.list?.map((_item, _index) => {\n                    return (\n                      <div\n                        className={cName({\n                          [styles.link]: _item.link,\n                          [styles.disabled]: !_item.link,\n                        })}\n                        onClick={(): void => {\n                          _item.link &&\n                            window.open(\n                              _item.link,\n                              "blank",\n                              "noopener=yes,noreferrer=yes"\n                            );\n                        }}\n                        key={`link${_index}`}\n                      >\n                        {_item.label}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className={styles.bottomArea}>\n        <div className={styles.codeArea}>\n          <div>\n            <Image\n              src={qrCode?.image}\n              alt={qrCode?.text}\n              width={56}\n              height={56}\n            ></Image>\n          </div>\n          <div className={styles.text}>{qrCode?.text}</div>\n        </div>\n        <div className={styles.numArea}>\n          <span>{copyRight}</span>\n          <span>{siteNumber}</span>\n          <div className={styles.publicLogo}>\n            <div className={styles.logo}>\n              <Image\n                src={publicLogo}\n                alt={publicNumber}\n                width={20}\n                height={20}\n              ></Image>\n            </div>\n            <span>{publicNumber}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"// ./components/footer/styles.module.scss\n.footer {\n  padding: 70px 145px;\n  background-color: #f4f5f5;\n  .topArea {\n    display: flex;\n    justify-content: space-between;\n\n    .footerTitle {\n      font-weight: 500;\n      font-size: 36px;\n      line-height: 36px;\n      color: #333333;\n      margin: 0;\n    }\n\n    .linkListArea {\n      display: flex;\n      .linkArea {\n        display: flex;\n        flex-direction: column;\n        margin-left: 160px;\n        .title {\n          font-weight: 500;\n          font-size: 14px;\n          line-height: 20px;\n          color: #333333;\n          margin-bottom: 40px;\n        }\n\n        .links {\n          display: flex;\n          flex-direction: column;\n          font-weight: 400;\n          font-size: 14px;\n          line-height: 20px;\n\n          .link {\n            color: #333333;\n            cursor: pointer;\n            margin-bottom: 24px;\n          }\n\n          .disabled {\n            color: #666;\n            cursor: not-allowed;\n            margin-bottom: 24px;\n          }\n        }\n      }\n    }\n  }\n\n  .bottomArea {\n    display: flex;\n    justify-content: space-between;\n    .codeArea {\n      display: flex;\n      flex-direction: column;\n      .text {\n        color: #666;\n      }\n    }\n    .numArea {\n      color: #666;\n      display: flex;\n      flex-direction: column;\n      align-items: flex-end;\n      font-weight: 400;\n      font-size: 14px;\n      line-height: 20px;\n\n      span {\n        margin-bottom: 12px;\n      }\n\n      .publicLogo {\n        display: flex;\n\n        .logo {\n          margin-right: 4px;\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"页首和页尾需要的图片资源我们统一放在 public 中，这里就不贴了，同学们可以到 Github仓库中拷贝下来，放到自己仓库中。定义好组件，我们将它拼接成我们需要的布局（layout)组件，并将中间的 body 通过 children 透传进来。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./components/layout/index.tsx\nimport { FC } from "react";\nimport { IFooterProps, Footer } from "../footer/index";\nimport { INavBarProps, NavBar } from "../navbar/index";\nimport styles from "./styles.module.scss";\n\nexport interface ILayoutProps {\n  navbarData: INavBarProps;\n  footerData: IFooterProps;\n}\n\nexport const Layout: FC<ILayoutProps & { children: JSX.Element }> = ({\n  navbarData,\n  footerData,\n  children,\n}) => {\n  return (\n    <div className={styles.layout}>\n      <NavBar {...navbarData} />\n      <main className={styles.main}>{children}</main>\n      <Footer {...footerData} />\n    </div>\n  );\n};\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"// ./components/layout/styles.module.scss\n.layout {\n  .main {\n    min-height: calc(100vh - 560px);\n  }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"定义好 layout，我们只需要把 layout 塞进入口文件就可以， Nextjs 的入口文件是 pages下的 _app.tsx，如下定义："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// .pages/_app.tsx\nimport "../styles/globals.css";\nimport type { AppProps } from "next/app";\nimport { Layout, ILayoutProps } from "@/components/layout";\n\nconst MyApp = (data: AppProps & ILayoutProps) => {\n  const { Component, pageProps, navbarData, footerData } = data;\n\n  return (\n    <Layout navbarData={navbarData} footerData={footerData}>\n      <Component {...pageProps} />\n    </Layout>\n  );\n};\nexport default MyApp;\n'})}),"\n",(0,r.jsx)(e.p,{children:"这样就已经可以了，我们可以启动项目看看效果："}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)("img",{src:d,alt:"image.png"}),"\n可以看到，已经有固定的页首和页尾了，不过因为还没注入数据的关系，所以很多地方都是空的，下面我们将对应的数据按定义的类型注入进来。"]}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.h2,{children:"数据注入"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["大家应该还记得，在",(0,r.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141320046864777228",target:"_blank",rel:"noopener noreferrer",children:"《架构实现（三）：如何支持 SSR对数据的请求》"}),"中，我们定义了 getInitProps 来进行数据的请求和服务器端的注入，同样在 Nextjs 中也提供了相关的函数来实现数据注入，分别是 getStaticProps、getServerSideProps 和 getInitialProps，这里我们讲一下它们的区别。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"getStaticProps： getStaticProps 多用于静态页面的渲染，它只会在生产中执行，而不会在运行的时候再次调用，这意味着它只能用于不常编辑的部分，每次调整都需要重新构建部署，官网信息的时效性比较敏感，所以后面章节我们只会有少部分应用到 getStaticProps，但这并不意味着它没用，在一些特殊的场景下会有奇效，后面章节会具体介绍。"}),"\n"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["getServerSideProps：getServerSideProps 只会执行在服务器端，不会在客户端执行。",(0,r.jsx)(e.strong,{children:"因为这个特性，所以客户端的脚本打包会较小，相关数据不会有在客户端暴露的问题，相对更隐蔽安全，不过逻辑集中在服务器端处理，会加重服务器的负担，服务器成本也会更高。"})," 我们使用服务器端渲染的初衷，还是将处理的数据直接包含在 HTML 文本中，提高 SEO，至于客户端的逻辑我们并不需要都放在服务器端执行，所以我们不使用它来作为服务器端注入方式。"]}),"\n"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["getInitialProps：这个方法和我们当时自己实现的很相似，初始化的时候，",(0,r.jsx)(e.strong,{children:"如果是服务器端路由，那么数据的注入会在服务器端执行，对"})," ",(0,r.jsx)(e.strong,{children:"SEO"})," ",(0,r.jsx)(e.strong,{children:"友好，在实际的页面操作中，相关的逻辑会在"})," ",(0,r.jsx)(e.strong,{children:"客户端"})," ",(0,r.jsx)(e.strong,{children:"执行，从而减轻了服务器端的负担。"})," 所以综合成本来考虑，我们后期的数据注入主要会采用 getInitialProps 来进行。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"不过这里需要注意的一点是，数据的注入都是针对页面的，也就是 pages 目录下的，对组件进行数据注入是不支持的，所以我们应在页面中注入对应数据后再透传给页面组件，现在我们还没学习怎么创建 API 层，所以我们直接返回静态数据就好。"}),"\n",(0,r.jsx)(e.p,{children:"不过这里需要注意一点，因为 _app.tsx 是所有页面的入口页面，所以别的页面的参数也需要透传下来，而不能直接覆盖，我们可以用内置的 App 对象来获取对应组件本身的 pageProps，不要直接覆盖了，对于非入口页面的普通页面，我们直接加上业务逻辑就可以："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./pages/_app.tsx\nimport "../styles/globals.css";\nimport type { AppProps, AppContext } from "next/app";\nimport App from "next/app";\nimport { Layout, ILayoutProps } from "@/components/layout";\nimport code from "@/public/code.png";\n\nconst MyApp = (data: AppProps & ILayoutProps) => {\n  const { Component, pageProps, navbarData, footerData } = data;\n\n  return (\n    <div>\n      <Layout navbarData={navbarData} footerData={footerData}>\n        <Component {...pageProps} />\n      </Layout>\n    </div>\n  );\n};\n\nMyApp.getInitialProps = async (context: AppContext) => {\n  const pageProps = await App.getInitialProps(context);\n\n  return {\n    ...pageProps,\n    navbarData: {},\n    footerData: {\n      title: "Demo",\n      linkList: [\n        {\n          title: "技术栈",\n          list: [\n            {\n              label: "react",\n            },\n            {\n              label: "typescript",\n            },\n            {\n              label: "ssr",\n            },\n            {\n              label: "nodejs",\n            },\n          ],\n        },\n        {\n          title: "了解更多",\n          list: [\n            {\n              label: "掘金",\n              link: "https://juejin.cn/user/2714061017452557",\n            },\n            {\n              label: "知乎",\n              link: "https://www.zhihu.com/people/zmAboutFront",\n            },\n            {\n              label: "csdn",\n            },\n          ],\n        },\n        {\n          title: "联系我",\n          list: [{ label: "微信" }, { label: "QQ" }],\n        },\n      ],\n      qrCode: {\n        image: code,\n        text: "祯民讲前端微信公众号",\n      },\n      copyRight: "Copyright \xa9 2022 xxx. 保留所有权利",\n      siteNumber: "粤ICP备XXXXXXXX号-X",\n      publicNumber: "粤公网安备 xxxxxxxxxxxxxx号",\n    },\n  };\n};\n\nexport default MyApp;\n'})}),"\n",(0,r.jsx)(e.p,{children:"然后我们再刷新页面试试，可以看到一个简易的有 layout 的首页就创建好了。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsxs)(e.h1,{id:"路由匹配",children:["路由匹配",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#路由匹配",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"Nextjs 的路由不同于我们一般使用的路由，它没有对应的文件去配置对应的路由，而是通过文件系统自动检索对应的路由，会根据相对 pages 的目录路径来生成对应的路由，比如："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"// ./pages/home/index.tsx => /home\n// ./pages/demo/[id].tsx => /demo/:id\n"})}),"\n",(0,r.jsx)(e.p,{children:"这里我们创建一个 article 目录来试验一下对应的文件路由，针对文章路由，我们需要给它加一个 articleId 参数来区分不同文章："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./pages/article/[articleId].tsx\nimport type { NextPage } from "next";\n\ninterface IProps {\n  articleId: number;\n}\n\nconst Article: NextPage<IProps> = ({ articleId }) => {\n  return (\n    <div>\n      <h1>文章{articleId}</h1>\n    </div>\n  );\n};\n\nArticle.getInitialProps = (context) => {\n  const { articleId } = context.query;\n  return {\n    articleId: Number(articleId),\n  };\n};\n\nexport default Article;\n'})}),"\n",(0,r.jsxs)(e.p,{children:["我们在注入的时候获取当前的 articleId 来用于页面显示，我们可以刷新一下页面，然后打开 ",(0,r.jsx)(e.a,{href:"http://localhost:3000/article/1",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/article/1"})," 试试："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"可以看到已经可以了，这里我们可以顺便把首页默认的 index.tsx 简单改造一下，把链接指到我们定义的文章路由。"}),"\n",(0,r.jsxs)(e.p,{children:["这里有个小细节需要提醒一下，大家应该还记得之前",(0,r.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141320046537605131",target:"_blank",rel:"noopener noreferrer",children:"04 | 架构实现（二）：如何实现 SSR 的静态页面渲染？"})," 我们有提到服务器端渲染的路由包含客户端路由和服务器端路由，如果采用 router hook 跳转将采用客户端路由，如果需要使用服务器端渲染，需要使用 a 标签或是 window.open 等原生方式，这里我们采用服务器端路由进行跳转，提高 SEO 的检索效果。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./pages/index.tsx\nimport type { NextPage } from "next";\nimport styles from "./index.module.scss";\n\ninterface IProps {\n  title: string;\n  description: string;\n  list: {\n    label: string;\n    info: string;\n    link: string;\n  }[];\n}\n\nconst Home: NextPage<IProps> = ({ title, description, list }) => {\n  return (\n    <div className={styles.container}>\n      <main className={styles.main}>\n        <h1 className={styles.title}>{title}</h1>\n\n        <p className={styles.description}>{description}</p>\n\n        <div className={styles.grid}>\n          {list?.map((item, index) => {\n            return (\n              <div\n                key={index}\n                className={styles.card}\n                onClick={(): void => {\n                  window.open(\n                    item.link,\n                    "blank",\n                    "noopener=yes,noreferrer=yes"\n                  );\n                }}\n              >\n                <h2>{item.label} &rarr;</h2>\n                <p>{item.info}</p>\n              </div>\n            );\n          })}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nHome.getInitialProps = (context) => {\n  return {\n    title: "Hello SSR!",\n    description: "A Demo for 《深入浅出SSR官网开发指南》",\n    list: [\n      {\n        label: "文章1",\n        info: "A test for article1",\n        link: "http://localhost:3000/article/1",\n      },\n      {\n        label: "文章2",\n        info: "A test for article2",\n        link: "http://localhost:3000/article/2",\n      },\n      {\n        label: "文章3",\n        info: "A test for article3",\n        link: "http://localhost:3000/article/3",\n      },\n      {\n        label: "文章4",\n        info: "A test for article4",\n        link: "http://localhost:3000/article/4",\n      },\n      {\n        label: "文章5",\n        info: "A test for article5",\n        link: "http://localhost:3000/article/5",\n      },\n      {\n        label: "文章6",\n        info: "A test for article6",\n        link: "http://localhost:3000/article/6",\n      },\n    ],\n  };\n};\n\nexport default Home;\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"// ./pages/index.module.scss\n.container {\n  padding: 0 2rem;\n}\n\n.main {\n  min-height: 100vh;\n  padding: 4rem 0;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.footer {\n  display: flex;\n  flex: 1;\n  padding: 2rem 0;\n  border-top: 1px solid #eaeaea;\n  justify-content: center;\n  align-items: center;\n}\n\n.footer a {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n\n.title a {\n  color: #0070f3;\n  text-decoration: none;\n}\n\n.title a:hover,\n.title a:focus,\n.title a:active {\n  text-decoration: underline;\n}\n\n.title {\n  margin: 0;\n  line-height: 1.15;\n  font-size: 4rem;\n}\n\n.title,\n.description {\n  text-align: center;\n}\n\n.description {\n  margin: 4rem 0;\n  line-height: 1.5;\n  font-size: 1.5rem;\n}\n\n.code {\n  background: #fafafa;\n  border-radius: 5px;\n  padding: 0.75rem;\n  font-size: 1.1rem;\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,\n    Bitstream Vera Sans Mono, Courier New, monospace;\n}\n\n.grid {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  max-width: 800px;\n}\n\n.card {\n  margin: 1rem;\n  padding: 1.5rem;\n  text-align: left;\n  color: inherit;\n  text-decoration: none;\n  border: 1px solid #eaeaea;\n  border-radius: 10px;\n  transition: color 0.15s ease, border-color 0.15s ease;\n  max-width: 300px;\n  cursor: pointer;\n}\n\n.card:hover,\n.card:focus,\n.card:active {\n  color: #0070f3;\n  border-color: #0070f3;\n}\n\n.card h2 {\n  margin: 0 0 1rem 0;\n  font-size: 1.5rem;\n}\n\n.card p {\n  margin: 0;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.logo {\n  height: 1em;\n  margin-left: 0.5rem;\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["这里我们使用 ",(0,r.jsx)(e.code,{children:"window.open"}),"打开一个新页面来指向上文我们创建的文章页，",(0,r.jsx)(e.code,{children:"noopener=yes,noreferrer=yes"}),"是为了跳转的安全性，这个可以隐藏我们跳转的 window.opener 与 Document.referrer，在跨站点跳转中，我们通常加这个参数来保证跳转信息的不泄露，现在我们就可以重新访问 ",(0,r.jsx)(e.a,{href:"http://localhost:3000/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/"})," 看看效果。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"我们官网的首页大致就已经搭建好了，点击其中的文章模块就可以跳到对应的文章页。"}),"\n",(0,r.jsxs)(e.h1,{id:"header-修改",children:["header 修改",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#header-修改",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["之前在",(0,r.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141320046537605131",target:"_blank",rel:"noopener noreferrer",children:"04 | 架构实现（二）：如何实现 SSR 的静态页面渲染？"}),"我们通过 react-helmet 来实现对模板页面 header 的修改，现在我们不再需要通过这种方式了，Nextjs 提供了开箱即用的能力，我们只需要直接用 next/head 暴露出来的标签来修改 header 就可以了，这里我们在 _app.tsx 加一个默认的 title。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./pages/_app.tsx\nimport "../styles/globals.css";\nimport type { AppProps, AppContext } from "next/app";\nimport App from "next/app";\nimport { Layout, ILayoutProps } from "@/components/layout";\nimport code from "@/public/code.png";\nimport Head from "next/head";\n\nconst MyApp = (data: AppProps & ILayoutProps) => {\n  const { Component, pageProps, navbarData, footerData } = data;\n\n  return (\n    <div>\n      <Head>\n        <title>A Demo for 《深入浅出SSR官网开发指南》</title>\n        <meta\n          name="description"\n          content="A Demo for 《深入浅出SSR官网开发指南》"\n        />\n        <link rel="icon" href="/favicon.ico" />\n      </Head>\n      <Layout navbarData={navbarData} footerData={footerData}>\n        <Component {...pageProps} />\n      </Layout>\n    </div>\n  );\n};\n\nMyApp.getInitialProps = async (context: AppContext) => {\n  const pageProps = await App.getInitialProps(context);\n\n  return {\n    ...pageProps,\n    navbarData: {},\n    footerData: {\n      title: "Demo",\n      linkList: [\n        {\n          title: "技术栈",\n          list: [\n            {\n              label: "react",\n            },\n            {\n              label: "typescript",\n            },\n            {\n              label: "ssr",\n            },\n            {\n              label: "nodejs",\n            },\n          ],\n        },\n        {\n          title: "了解更多",\n          list: [\n            {\n              label: "掘金",\n              link: "https://juejin.cn/user/2714061017452557",\n            },\n            {\n              label: "知乎",\n              link: "https://www.zhihu.com/people/zmAboutFront",\n            },\n            {\n              label: "csdn",\n            },\n          ],\n        },\n        {\n          title: "联系我",\n          list: [{ label: "微信" }, { label: "QQ" }],\n        },\n      ],\n      qrCode: {\n        image: code,\n        text: "祯民讲前端微信公众号",\n      },\n      copyRight: "Copyright \xa9 2022 xxx. 保留所有权利",\n      siteNumber: "粤ICP备XXXXXXXX号-X",\n      publicNumber: "粤公网安备 xxxxxxxxxxxxxx号",\n    },\n  };\n};\n\nexport default MyApp;\n'})}),"\n",(0,r.jsx)(e.p,{children:"我们再刷新试试，可以看到默认的 title 已经加上了。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,r.jsxs)(e.h1,{id:"小结",children:["小结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"这一章节我们学习了 Nextjs 中的完整页面链路，Nextjs 提供的各种开箱即用的能力，可以帮助我们快速高效地完成静态页面中的模板页面渲染、路由匹配和 header 修改， 我们不再需要像之前一样定义复杂的函数去同构实现了。"}),"\n",(0,r.jsx)(e.p,{children:"同时这节还涉及很多页面的 dom 逻辑和样式，像顶部栏的磨砂效果，算是一个小彩蛋吧～感兴趣的同学可以下来自己对着代码研究一下是怎么实现的。"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)("img",{src:o,alt:"image.png"}),"\n目前我们页面相关的数据用的还是固定常量，官网的数据具有实时性，可灵活配置的特点。后面我们肯定要考虑使用接口来替代对应的常量，来实现官网数据的灵活配置。"]}),"\n",(0,r.jsx)(e.p,{children:"针对这个需求，难道我们要实现一个复杂的后台系统吗？联表成本肯定很高。那针对不同类型的数据表单应该如何进行对应的灵活配置呢？下一节我们就这些问题来一一解决。"})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}let g=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["SSR%20%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AE%98%E7%BD%91%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F7.%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%EF%BC%9A%E5%9C%A8%20Nextjs%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%AE%8C%E6%95%B4%E9%A1%B5%E9%9D%A2%E9%93%BE%E8%B7%AF.md"]={toc:[],title:"小结",headingTitle:"小结",frontmatter:{}}}}]);