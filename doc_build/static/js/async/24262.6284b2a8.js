"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["24262"],{166313:function(e,c,s){s.r(c),s.d(c,{default:()=>j});var d=s(552676),n=s(740453);let h=s.p+"static/image/5.3.a62cf894.png",i=s.p+"static/image/5.2.99c36ae3.png",r=s.p+"static/image/5.1.6956ab42.png";function l(e){let c=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",img:"img",pre:"pre",blockquote:"blockquote",ol:"ol",li:"li"},(0,n.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(c.h1,{id:"5进阶-2push-的本质",children:["5进阶 2：push 的本质",(0,d.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#5进阶-2push-的本质",children:"#"})]}),"\n",(0,d.jsxs)(c.p,{children:["在之前的内容里，我粗略地说过，",(0,d.jsx)(c.code,{children:"push"})," 指令做的事是把你的本地提交上传到中央仓库去，用本地的内容来覆盖掉远端的内容。这个说法其实是不够准确的，但 Git 的知识系统比较庞大，在你对 Git 了解比较少的时候，用「上传本地提交」来解释会比较好理解；而在你知道了 ",(0,d.jsx)(c.code,{children:"branch"}),"，并且明白了 ",(0,d.jsx)(c.code,{children:"branch"})," 的具体含义以后，我就可以告诉你 ",(0,d.jsx)(c.code,{children:"push"})," 到底是什么了。"]}),"\n",(0,d.jsxs)(c.h2,{id:"push把-branch-上传到远端仓库",children:["push：把 branch 上传到远端仓库",(0,d.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#push把-branch-上传到远端仓库",children:"#"})]}),"\n",(0,d.jsxs)(c.p,{children:["实质上，",(0,d.jsx)(c.code,{children:"push"})," 做的事是：把当前 ",(0,d.jsx)(c.code,{children:"branch"})," 的位置（即它指向哪个 ",(0,d.jsx)(c.code,{children:"commit"}),"）上传到远端仓库，并把它的路径上的 ",(0,d.jsx)(c.code,{children:"commit"}),"s 一并上传。"]}),"\n",(0,d.jsxs)(c.p,{children:["例如，我现在的本地仓库有一个 ",(0,d.jsx)(c.code,{children:"master"})," ，它超前了远程仓库两个提交；另外还有一个新建的 ",(0,d.jsx)(c.code,{children:"branch"})," 叫 ",(0,d.jsx)(c.code,{children:"feature1"}),"，远程仓库还没有记载过它。具体大概像这样："]}),"\n",(0,d.jsx)(c.p,{children:(0,d.jsx)("img",{src:r,alt:"本地仓库超前于远程仓库"})}),"\n",(0,d.jsxs)(c.p,{children:["这时我执行 ",(0,d.jsx)(c.code,{children:"git push"}),"，就会把 ",(0,d.jsx)(c.code,{children:"master"})," 的最新位置更新到远端，并且把它的路径上的 ",(0,d.jsx)(c.code,{children:"5"})," ",(0,d.jsx)(c.code,{children:"6"})," 两个 ",(0,d.jsx)(c.code,{children:"commit"}),"s 上传："]}),"\n",(0,d.jsx)(c.pre,{children:(0,d.jsx)(c.code,{className:"language-shell",children:"git push\n"})}),"\n",(0,d.jsx)(c.p,{children:(0,d.jsx)("img",{src:i,alt:"把 master push 到远程仓库"})}),"\n",(0,d.jsxs)(c.p,{children:["而如果这时候我再切到 ",(0,d.jsx)(c.code,{children:"feature1"})," 去后再执行一次 ",(0,d.jsx)(c.code,{children:"push"}),"，就会把 ",(0,d.jsx)(c.code,{children:"feature1"})," 以及它的 ",(0,d.jsx)(c.code,{children:"commit"})," ",(0,d.jsx)(c.code,{children:"4"})," 上传到远程仓库："]}),"\n",(0,d.jsx)(c.pre,{children:(0,d.jsx)(c.code,{className:"language-shell",children:"git checkout feature1\ngit push origin feature1\n"})}),"\n",(0,d.jsxs)(c.blockquote,{children:["\n",(0,d.jsxs)(c.p,{children:["这里的 ",(0,d.jsx)(c.code,{children:"git push"})," 和之前有点不同：多了 ",(0,d.jsx)(c.code,{children:"origin feature1"})," 这两个参数。其中 ",(0,d.jsx)(c.code,{children:"origin"})," 是远程仓库的别名，是你在 ",(0,d.jsx)(c.code,{children:"git clone"})," 的时候 Git 自动帮你起的；",(0,d.jsx)(c.code,{children:"feature1"})," 是远程仓库中目标 ",(0,d.jsx)(c.code,{children:"branch"})," 的名字。这两个参数合起来指定了你要 ",(0,d.jsx)(c.code,{children:"push"})," 到的目标仓库和目标分支，意思是「我要 push 到 ",(0,d.jsx)(c.code,{children:"origin"})," 这个仓库的 ",(0,d.jsx)(c.code,{children:"feature1"})," 分支」。"]}),"\n",(0,d.jsxs)(c.p,{children:["在 Git 中（2.0 及它之后的版本），默认情况下，你用不加参数的 ",(0,d.jsx)(c.code,{children:"git push"})," 只能上传那些之前从远端 ",(0,d.jsx)(c.code,{children:"clone"})," 下来或者 ",(0,d.jsx)(c.code,{children:"pull"})," 下来的分支，而如果需要 ",(0,d.jsx)(c.code,{children:"push"})," 你本地的自己创建的分支，则需要手动指定目标仓库和目标分支（并且目标分支的名称必须和本地分支完全相同），就像上面这样。"]}),"\n",(0,d.jsxs)(c.p,{children:["你可以通过 ",(0,d.jsx)(c.code,{children:"git config"})," 指令来设置 ",(0,d.jsx)(c.code,{children:"push.default"})," 的值来改变 ",(0,d.jsx)(c.code,{children:"push"})," 的行为逻辑，例如可以设置为「所有分支都可以用 ",(0,d.jsx)(c.code,{children:"git push"})," 来直接 push，目标自动指向 ",(0,d.jsx)(c.code,{children:"origin"})," 仓库的同名分支」（对应的 ",(0,d.jsx)(c.code,{children:"push.default"})," 值：",(0,d.jsx)(c.code,{children:"current"}),"），或者别的什么行为逻辑，你甚至可以设置为每次执行 ",(0,d.jsx)(c.code,{children:"git push"})," 时就自动把所有本地分支全部同步到远程仓库（虽然这可能有点耗时和危险）。如果希望详细了解，你可以到",(0,d.jsx)(c.a,{href:"https://git-scm.com/docs/git-config#git-config-pushdefault",target:"_blank",rel:"noopener noreferrer",children:"这里"}),"看看。"]}),"\n"]}),"\n",(0,d.jsx)(c.p,{children:(0,d.jsx)("img",{src:h,alt:"push feature1 到远程仓库"})}),"\n",(0,d.jsxs)(c.p,{children:["细心的人可能会发现，在 ",(0,d.jsx)(c.code,{children:"feature1"})," 被 ",(0,d.jsx)(c.code,{children:"push"})," 时，远程仓库的 ",(0,d.jsx)(c.code,{children:"HEAD"})," 并没有和本地仓库的 ",(0,d.jsx)(c.code,{children:"HEAD"})," 一样指向 ",(0,d.jsx)(c.code,{children:"feature1"}),"。这是因为，",(0,d.jsx)(c.code,{children:"push"})," 的时候只会上传当前的 ",(0,d.jsx)(c.code,{children:"branch"})," 的指向，并不会把本地的 ",(0,d.jsx)(c.code,{children:"HEAD"})," 的指向也一起上传到远程仓库。事实上，远程仓库的 ",(0,d.jsx)(c.code,{children:"HEAD"})," 是永远指向它的默认分支（即 master，如果不修改它的名称的话），并会随着默认分支的移动而移动的。"]}),"\n",(0,d.jsxs)(c.h2,{id:"小结",children:["小结",(0,d.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,d.jsxs)(c.p,{children:["这一节介绍了 ",(0,d.jsx)(c.code,{children:"push"})," 这个指令的本质。总结一下关键点："]}),"\n",(0,d.jsxs)(c.ol,{children:["\n",(0,d.jsxs)(c.li,{children:[(0,d.jsx)(c.code,{children:"push"})," 是把当前的分支上传到远程仓库，并把这个 ",(0,d.jsx)(c.code,{children:"branch"})," 的路径上的所有 ",(0,d.jsx)(c.code,{children:"commit"}),"s 也一并上传。"]}),"\n",(0,d.jsxs)(c.li,{children:[(0,d.jsx)(c.code,{children:"push"})," 的时候，如果当前分支是一个本地创建的分支，需要指定远程仓库名和分支名，用 ",(0,d.jsx)(c.code,{children:"git push origin branch_name"})," 的格式，而不能只用 ",(0,d.jsx)(c.code,{children:"git push"}),"；或者可以通过 ",(0,d.jsx)(c.code,{children:"git config"})," 修改 ",(0,d.jsx)(c.code,{children:"push.default"})," 来改变 ",(0,d.jsx)(c.code,{children:"push"})," 时的行为逻辑。"]}),"\n",(0,d.jsxs)(c.li,{children:[(0,d.jsx)(c.code,{children:"push"})," 的时候之后上传当前分支，并不会上传 ",(0,d.jsx)(c.code,{children:"HEAD"}),"；远程仓库的 ",(0,d.jsx)(c.code,{children:"HEAD"})," 是永远指向默认分支（即 ",(0,d.jsx)(c.code,{children:"master"}),"）的。"]}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:c}=Object.assign({},(0,n.ah)(),e.components);return c?(0,d.jsx)(c,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}let j=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["Git%20%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%2F5%E8%BF%9B%E9%98%B6%202%EF%BC%9Apush%20%E7%9A%84%E6%9C%AC%E8%B4%A8.md"]={toc:[{text:"push：把 branch 上传到远端仓库",id:"push把-branch-上传到远端仓库",depth:2},{text:"小结",id:"小结",depth:2}],title:"5进阶 2：push 的本质",headingTitle:"5进阶 2：push 的本质",frontmatter:{}}}}]);