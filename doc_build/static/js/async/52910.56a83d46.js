"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["52910"],{689513:function(e,n,s){s.r(n),s.d(n,{default:()=>d});var r=s(552676),a=s(740453);function c(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",h4:"h4",pre:"pre",code:"code"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"37数组的查询更新操作符",children:["37.数组的查询更新操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#37数组的查询更新操作符",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"58-数组的查询更新操作符",children:["5.8 数组的查询更新操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#58-数组的查询更新操作符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在前面我们了解到查询更新操作符是对记录的字段进行字段级别的操作，当字段的值是数组时，我们可以通过数组查询操作符来构建筛选记录的条件，通过数组更新操作符可以对记录里面的数组字段进行增、删、改等操作。"}),"\n",(0,r.jsxs)(n.h3,{id:"581-查询更新操作符一览",children:["5.8.1 查询更新操作符一览",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#581-查询更新操作符一览",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"当字段的值是普通数据类型的数组或对象类型的数组时，我们可以使用查询操作符来根据数组是否拥有哪些值以及数组的长度来对记录进行筛选，也就是说我们尽管进行的是字段级别的查询，但是筛选的依然是记录，查询返回的结果也依然是记录列表；我们还可以使用更新操作符往这个数组的头部、尾部根据条件添加元素或减少元素。数组的查询操作符和更新操作符如下："}),"\n",(0,r.jsxs)(n.h3,{id:"582-查询更新操作符",children:["5.8.2 查询、更新操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#582-查询更新操作符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"查询操作符是用来构建筛选记录的条件，所以要写在where内；而更新操作符，则是对记录的字段进行字段级别的写操作，要写在update内。数组的类型有普通数据类型的数组，也就是不嵌套；还有对象数组，这种相对比较复杂一些，后面会介绍。"}),"\n",(0,r.jsxs)(n.h4,{id:"1数组查询操作符",children:["1、数组查询操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1数组查询操作符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"首先我们以记录的字段值是普通数据类型的数组的情况为例来了解操作符的写法，比如user集合用户兴趣订阅，它的记录的数据结构如下所示："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  "_id":"user2020070401",\n  "tags": ["体育","财经","汽车","房产","教育"],\n},\n{\n  "_id":"user2020070402",\n  "tags": ["文化","财经","视频","星座"],\n},\n{\n  "_id":"user2020070403",\n  "tags": ["房产","财经","体育","汽车","美食"],\n},\n'})}),"\n",(0,r.jsxs)(n.p,{children:["比如all操作符的含义是",(0,r.jsx)(n.code,{children:"数组所有元素是否满足给定条件"}),"，可能这个说法有点绕口，下面的案例的表述方法可能让你更容易理解，就是",(0,r.jsx)(n.code,{children:"同时订阅了房产频道和财经频道的用户"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const db = wx.cloud.database()\nconst _ = db.command\n\ndb.collection(\'user\').where({\n  tags:_.all(["房产","财经"]), //同时订阅了房产频道和财经频道的用户\n})\n.get()\n.then(res=>{\n  console.log(res)\n})\n'})}),"\n",(0,r.jsxs)(n.p,{children:["使用",(0,r.jsx)(n.code,{children:"tags:_.size(5)"}),"则可以用来筛选出数组长度为5，也就是订阅了5个频道的用户；而elemMatch操作符的会相对复杂一些，它的写法是",(0,r.jsx)(n.code,{children:"_.elemMatch(条件，这里是对象)"}),"，比如",(0,r.jsx)(n.code,{children:'tags:_.elemMatch(_.eq("财经"))'}),"指的是筛选订阅了财经频道的用户。"]}),"\n",(0,r.jsx)(n.p,{children:"elemMatch还可以用于字段的值是数字构成的数组，比如下面是学生成绩单的记录的结构："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  "_id":"user2020070405",\n  "scores": [59,99,82,77]}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["我们可以使用",(0,r.jsx)(n.code,{children:"_.elemMatch(_.lt(60))"}),"来筛选各科成绩存在不及格的学生，还可以使用查询操作符的链式写法",(0,r.jsx)(n.code,{children:"_.elemMatch(_.gt(80).lt(100))"}),"来筛选各科成绩有优良的学生。"]}),"\n",(0,r.jsxs)(n.h4,{id:"2数组的增删更新操作符",children:["2、数组的增删更新操作符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2数组的增删更新操作符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"数组更新操作符可以结合JavaScript的一些数组方法来理解，数组方法里的尾部添加元素push，尾部删除元素pop，头部添加元素unshift，头部删除元素shift基本都和更新操作符保持了一致，只是push更新操作符的用法会有所不同。"}),"\n",(0,r.jsx)(n.p,{children:"push更新操作符支持each（要插入的元素），position（从哪个位置插入），sort（对结果数组排序），slice（限制结果数组长度）的属性。比如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.collection(\'user\').where({\n  tags:_.elemMatch(_.eq("财经"))\n})\n.update({\n  data:{\n    tags: _.push({\n      each: ["漫画","视频","历史"],//把3个元素添加到数组\n      position: 3,//从第4位开始也就是第3位的后面添加\n      slice: 6,//数组只保留前 n 个元素，n为0时数组会被清空；为负数时，只保留后 n 个元素\n      //sort:1, 给定 1 代表升序，-1 代表降序，由于sort的中文排序并没有那么理想，而且还会打算position的位置，所以你可以按情况来使用\n    })\n  }\n})\n.then(res=>{\n  console.log(res)\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"执行更新操作符之后，记录的字段的数组值的变化结果如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'["体育","财经","汽车","房产","教育"]--\x3e["体育","财经","汽车","漫画","视频","历史"]\n["文化","财经","视频","星座"] --\x3e["文化","财经","视频","漫画","视频","历史"] \n["房产","财经","体育","汽车","美食"]--\x3e["房产","财经","体育","漫画","视频","历史"]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["当然，我们也可以直接使用",(0,r.jsx)(n.code,{children:'tags: _.push(["漫画","视频","历史"])'}),"直接往数组里面添加结果（不推荐使用这种方法），它等价于",(0,r.jsx)(n.code,{children:'tags: _.push({each: ["漫画","视频","历史"]})'}),"（建议使用这种方法），也就是position、sort、slice都是非必填属性，但是如果要添加position、sort、slice属性，必须要有each属性才行。"]}),"\n",(0,r.jsx)(n.p,{children:"而addToSet和push一样也是把元素添加到数组里面，不过addToSet不会保证插入元素时的顺序，但是添加元素时不会出现重复添加（只添加数组里没有的元素，不添加已有的元素）。如果你要添加的字段在记录里不存在，addToSet和push都可以创建并添加。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let d=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F37.%E6%95%B0%E7%BB%84%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%9B%B4%E6%96%B0%E6%93%8D%E4%BD%9C%E7%AC%A6.md"]={toc:[{text:"5.8 数组的查询更新操作符",id:"58-数组的查询更新操作符",depth:2},{text:"5.8.1 查询更新操作符一览",id:"581-查询更新操作符一览",depth:3},{text:"5.8.2 查询、更新操作符",id:"582-查询更新操作符",depth:3},{text:"1、数组查询操作符",id:"1数组查询操作符",depth:4},{text:"2、数组的增删更新操作符",id:"2数组的增删更新操作符",depth:4}],title:"37.数组的查询更新操作符",headingTitle:"37.数组的查询更新操作符",frontmatter:{}}}}]);