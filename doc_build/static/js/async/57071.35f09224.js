"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["57071"],{28644:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var t=r(552676),i=r(740453);let s=r.p+"static/image/2d785162f1a393e4645c941dd925787c.bf279bc1.gif";function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",code:"code",h4:"h4",pre:"pre",img:"img"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"4路由篇-_-链接与导航",children:["4.路由篇 _ 链接与导航",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4路由篇-_-链接与导航",children:"#"})]}),"\n",(0,t.jsxs)(n.h2,{id:"前言",children:["前言",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"上篇我们介绍了如何定义路由，本篇我们讲讲如何在 Next.js 中实现链接和导航。"}),"\n",(0,t.jsx)(n.p,{children:"所谓“导航”，指的是使用 JavaScript 进行页面切换，通常会比浏览器默认的重新加载更快，因为在导航的时候，只会更新必要的组件，而不会重新加载整个页面。"}),"\n",(0,t.jsx)(n.p,{children:"在 Next.js 中，有 4 种方式可以实现路由导航："}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["使用 ",(0,t.jsx)(n.code,{children:"<Link>"})," 组件"]}),"\n",(0,t.jsxs)(n.li,{children:["使用 ",(0,t.jsx)(n.code,{children:"useRouter"})," Hook（客户端组件）"]}),"\n",(0,t.jsxs)(n.li,{children:["使用 ",(0,t.jsx)(n.code,{children:"redirect"})," 函数（服务端组件）"]}),"\n",(0,t.jsx)(n.li,{children:"使用浏览器原生 History API"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"link组件",children:[(0,t.jsx)(n.code,{children:"<Link>"}),"组件",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#link组件",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["Next.js 的",(0,t.jsx)(n.code,{children:"<Link>"}),"组件是一个拓展了原生 HTML ",(0,t.jsx)(n.code,{children:"<a>"})," 标签的内置组件，用来实现预获取（prefetching） 和客户端路由导航。这是 Next.js 中路由导航的主要和推荐方式。"]}),"\n",(0,t.jsxs)(n.h4,{id:"基础使用",children:["基础使用",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础使用",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"基本的使用方式如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import Link from 'next/link'\n \nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"支持动态渲染",children:["支持动态渲染",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#支持动态渲染",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"支持路由链接动态渲染："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import Link from 'next/link'\n \nexport default function PostList({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"获取当前路径名",children:["获取当前路径名",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#获取当前路径名",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["如果需要对当前链接进行判断，你可以使用 ",(0,t.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-54",target:"_blank",rel:"noopener noreferrer",children:"usePathname()"})," ，它会读取当前 URL 的路径名（pathname）。示例代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"'use client'\n \nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function Navigation({ navLinks }) {\n  const pathname = usePathname()\n \n  return (\n    <>\n      {navLinks.map((link) => {\n        const isActive = pathname === link.href\n \n        return (\n          <Link\n            className={isActive ? 'text-blue' : 'text-black'}\n            href={link.href}\n            key={link.name}\n          >\n            {link.name}\n          </Link>\n        )\n      })}\n    </>\n  )\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"跳转行为设置",children:["跳转行为设置",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#跳转行为设置",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"App Router 的默认行为是滚动到新路由的顶部，或者在前进后退导航时维持之前的滚动距离。"}),"\n",(0,t.jsxs)(n.p,{children:["如果你想要禁用这个行为，你可以给 ",(0,t.jsx)(n.code,{children:"<Link>"})," 组件传递一个 ",(0,t.jsx)(n.code,{children:"scroll={false}"}),"属性，或者在使用 ",(0,t.jsx)(n.code,{children:"router.push"}),"和 ",(0,t.jsx)(n.code,{children:"router.replace"}),"的时候，设置 ",(0,t.jsx)(n.code,{children:"scroll: false"}),"："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// next/link\n<Link href="/dashboard" scroll={false}>\n  Dashboard\n</Link>\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// useRouter\nimport { useRouter } from 'next/navigation'\n \nconst router = useRouter()\n \nrouter.push('/dashboard', { scroll: false })\n"})}),"\n",(0,t.jsxs)(n.p,{children:["注：关于 ",(0,t.jsx)(n.code,{children:"<Link>"})," 组件的具体用法，我们还会在",(0,t.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309077238333308937",target:"_blank",rel:"noopener noreferrer",children:"《组件篇 | Link 和 Script》"}),"中详细介绍。"]}),"\n",(0,t.jsxs)(n.h2,{id:"userouter-hook",children:["useRouter() hook",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#userouter-hook",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"第二种方式是使用 useRouter，这是 Next.js 提供的用于更改路由的 hook。使用示例代码如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"'use client'\n \nimport { useRouter } from 'next/navigation'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["注意使用该 hook 需要在客户端组件中。（顶层的 ",(0,t.jsx)(n.code,{children:"'use client'"})," 就是声明这是客户端组件）"]}),"\n",(0,t.jsxs)(n.p,{children:["注：关于 useRouter() hook 的具体用法，我们会在",(0,t.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-58",target:"_blank",rel:"noopener noreferrer",children:"《API 篇 | 常用函数与方法（上）》"})," 中详细介绍。"]}),"\n",(0,t.jsxs)(n.h2,{id:"redirect-函数",children:["redirect 函数",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redirect-函数",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"客户端组件使用 useRouter hook，服务端组件则可以直接使用 redirect 函数，这也是 Next.js 提供的 API，使用示例代码如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { redirect } from 'next/navigation'\n \nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n \nexport default async function Profile({ params }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    redirect('/login')\n  }\n \n  // ...\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["注：关于 redirect() 函数的具体用法，我们会在",(0,t.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-44",target:"_blank",rel:"noopener noreferrer",children:"《API 篇 | 常用函数与方法（上）》"})," 中详细介绍。"]}),"\n",(0,t.jsxs)(n.h2,{id:"history-api",children:["History API",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#history-api",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["也可以使用浏览器原生的 ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/History/pushState",target:"_blank",rel:"noopener noreferrer",children:"window.history.pushState"})," 和 ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState",target:"_blank",rel:"noopener noreferrer",children:"window.history.replaceState"})," 方法更新浏览器的历史记录堆栈。通常与 usePathname（获取路径名的 hook） 和 useSearchParams（获取页面参数的 hook） 一起使用。"]}),"\n",(0,t.jsx)(n.p,{children:"比如用 pushState 对列表进行排序："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"'use client'\n \nimport { useSearchParams } from 'next/navigation'\n \nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n \n  function updateSorting(sortOrder) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n \n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"交互效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:"history.gif"})}),"\n",(0,t.jsx)(n.p,{children:"replaceState 会替换浏览器历史堆栈的当前条目，替换后用户无法后退，比如切换应用的地域设置（国际化）："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"'use client'\n \nimport { usePathname } from 'next/navigation'\n \nexport default function LocaleSwitcher() {\n  const pathname = usePathname()\n \n  function switchLocale(locale) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n \n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"恭喜你，完成了本节内容的学习！"}),"\n",(0,t.jsx)(n.p,{children:"本篇我们介绍了 4 种实现导航的方式，但所涉及的具体概念如服务端组件、客户端组件、各种 hooks、函数方法等都未展开讲解，我们会在后续的文章中讲述。本篇可以作为概览，主要是为了方便大家写 Demo 的时候用到导航相关的内容。"}),"\n",(0,t.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating",target:"_blank",rel:"noopener noreferrer",children:"https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating"})}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}let c=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F4.%E8%B7%AF%E7%94%B1%E7%AF%87%20_%20%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%AF%BC%E8%88%AA.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"`<Link>`组件",id:"link组件",depth:2},{text:"基础使用",id:"基础使用",depth:4},{text:"支持动态渲染",id:"支持动态渲染",depth:4},{text:"获取当前路径名",id:"获取当前路径名",depth:4},{text:"跳转行为设置",id:"跳转行为设置",depth:4},{text:"useRouter() hook",id:"userouter-hook",depth:2},{text:"redirect 函数",id:"redirect-函数",depth:2},{text:"History API",id:"history-api",depth:2},{text:"总结",id:"总结",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"4.路由篇 _ 链接与导航",headingTitle:"4.路由篇 _ 链接与导航",frontmatter:{}}}}]);