"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["49885"],{523108:function(e,n,r){r.r(n),r.d(n,{default:()=>x});var s=r(552676),c=r(740453);let i=r.p+"static/image/37fbba07d9c2cbc9ff57984b5b0b73f1.4f4eced8.webp",d=r.p+"static/image/5a420735243a3b4b4414887906bfdc46.b42e9b23.webp",l=r.p+"static/image/7a9e224c0d4d43e8675d33505ed80f2e.29064ddb.webp",t=r.p+"static/image/c86993620d606d4f59b88d4afb96750e.1116d26e.webp",o=r.p+"static/image/3acdd41a44de7411eb6a1dc4773bf15d.ae302e1d.webp";function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ol:"ol",li:"li",strong:"strong",code:"code",img:"img",h2:"h2",pre:"pre",h3:"h3",ul:"ul",blockquote:"blockquote",h4:"h4",em:"em"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"31客户端实战动态逻辑执行实现",children:["31.客户端实战：动态逻辑执行实现",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31客户端实战动态逻辑执行实现",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在之前的章节中，我们已经成功地完成了编辑器中的最小闭环，并实现了编辑器逻辑的全流程。现在，来回顾一下前面章节中所做的所有事情："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"创建物料"}),"：通过 ",(0,s.jsx)(n.code,{children:"createReactMaterial"})," 方法和 ",(0,s.jsx)(n.code,{children:"withMaterialNodeHOC"})," 快速地创建了一个自定义的 ",(0,s.jsx)(n.strong,{children:"React"})," 组件，并用它作为编辑器中的物料。生成的组件可以包含一系列的属性和样式来描述它的行为和外观；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"注入编辑器"}),"：使用 ",(0,s.jsx)(n.code,{children:"FrameworkContextProvider"})," 的 ",(0,s.jsx)(n.code,{children:"resolver"})," 属性，将自定义组件映射到组件列表中，并对它们进行分类，以便用户可以轻松地找到并选择。这使得我们可以动态地添加、删除和修改插件，而无需对编辑器的核心逻辑进行任何大的更改；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"拖拽入画布"}),"：通过使用 ",(0,s.jsx)(n.code,{children:"withMaterialNodeHOC"})," 和 ",(0,s.jsx)(n.code,{children:"useNode"})," 来进一步加强我们的组件，使其具有拖拽功能。这样用户就可以从组件列表中选择一个物料组件，并将其拖拽到画布上，用于演示和编辑；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"属性编排"}),"：对每个组件提供了一个属性编排表单，以便用户可以对其进行可视化的配置。用户可以在表单中定义组件的",(0,s.jsx)(n.strong,{children:"名称"}),"、",(0,s.jsx)(n.strong,{children:"类型"}),"、",(0,s.jsx)(n.strong,{children:"样式"}),"、",(0,s.jsx)(n.strong,{children:"事件"}),"等属性，从而实现更多的自定义功能；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"存储"}),"：使用 ",(0,s.jsx)(n.code,{children:"useEditor"})," 返回的 ",(0,s.jsx)(n.code,{children:"query"})," 对象，可以将当前编辑器的 ",(0,s.jsx)(n.strong,{children:"Schema"})," 协议序列化为本地或远程数据库中，以便以后再次加载和编辑。这样就可以根据不同的应用程序和用户需求，快速轻松地定制和部署编辑器；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"加载"}),"：当需要重新加载编辑器时，可以调用 ",(0,s.jsx)(n.code,{children:"ref.current.onLoadState"})," 方法。此方法将从本地或远程数据库中加载存储的 ",(0,s.jsx)(n.strong,{children:"Schema"})," 协议，并将其恢复为我们之前创建编辑器的状态。这样就可以从容易保存状态的地方恢复编辑器，而无需从头开始构建。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"整体逻辑如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"那么，本章节的内容就是基于以往流程做扩展，在属性面板只能够配置静态属性的基础上新增绑定动态逻辑执行的能力。在之前设计篇中就提到低代码平台通常具备良好的逻辑执行能力。"}),"\n",(0,s.jsxs)(n.p,{children:["动态逻辑执行与状态绑定方案提供了一种方便的方式来快速构建应用程序，并且提供了灵活的逻辑编排和状态管理功能。它的基本思想是将所有的逻辑函数、表达式等 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 代码都以字符串格式来保存，并以 ",(0,s.jsx)(n.code,{children:"{{}}"})," 约定其内部为具体的代码、数据等内容。这样可以方便地进行",(0,s.jsx)(n.strong,{children:"动态执行"}),"和",(0,s.jsx)(n.strong,{children:"状态绑定"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["如下是 ",(0,s.jsx)(n.strong,{children:"retool"})," 中的绑定效果，总体的设计思路与架构大体一致，只是在各项目中呈现会略有不同。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(n.h2,{id:"实现思路",children:["实现思路",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现思路",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在浏览器当中执行字符串代码是一个比较危险的方式，在逻辑判断中你很难枚举完用户输入的执行逻辑究竟是正常的还是有害的，对于一些抱着不良目的的用户来说，风险是未知的。通常来说，使用以下两个个手段可以在浏览器中执行字符串代码片段："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Function"}),"：",(0,s.jsx)(n.strong,{children:"Function"})," 是 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 中的一个内置对象，它可以将一个字符串转化为一个函数，并执行该函数。例如，可以使用如下代码来执行字符串代码片段："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const code = \"console.log('Hello, world!');\";\nvar func = new Function(code);\nfunc();\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"eval"}),"：",(0,s.jsx)(n.strong,{children:"eval"})," 是 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 中的一个内置函数，它可以直接执行一段字符串代码，并返回执行结果。例如，可以使用如下代码来执行字符串代码片段："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const code = \"console.log('Hello, world!');\";\neval(code);\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Function"})," 和 ",(0,s.jsx)(n.strong,{children:"window.eval"})," 都可以执行代码片段，在实际应用中，应该根据具体的场景和需求来选择最适合的执行方式。在低代码平台实战开发当中，会在 ",(0,s.jsx)(n.strong,{children:"@lgnition-lowcode/core"})," 中创建一个 ",(0,s.jsx)(n.code,{children:"jsRuntime.ts"})," 用来实现相关的代码执行容器。"]}),"\n",(0,s.jsx)(n.p,{children:"执行代码的方案有了后，就需要考虑一些其他条件因素了："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"浏览器兼容性"}),"：浏览器的兼容性是前端开发需要重点关注的问题之一。为了避免出现意料之外的问题，开发人员应该充分考虑不同浏览器之间对于 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 的支持程度有所不同，尽可能地使用广泛兼容的 ",(0,s.jsx)(n.strong,{children:"ES 版本"})," 代码，并尽量避免使用某些不支持的 ",(0,s.jsx)(n.strong,{children:"API"})," 等新特性；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"安全性"}),"：",(0,s.jsx)(n.strong,{children:"eval"})," 函数的使用会存在安全风险，可能会导致 ",(0,s.jsx)(n.strong,{children:"XSS"})," 漏洞。为了避免不良代码的注入，开发人员需要进行好安全性检查，尽量将代码收敛到可控范围；同时在使用 ",(0,s.jsx)(n.strong,{children:"eval"})," 函数时，建议将整个上下文收敛到沙盒中，用于避免用户操作非法代码造成安全问题；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"执行速度"}),"：",(0,s.jsx)(n.strong,{children:"JavaScript"})," 代码的执行效率直接关系到网页的响应速度和用户体验。为了提高代码执行效率，从交互层面来引导用户应尽可能地避免重复的代码执行，把相同的操作集中在一起等，这样可以有效提高代码性能；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"单例模式"}),"：在全局上下文中，开发人员可以使用单例模式来保证",(0,s.jsx)(n.strong,{children:"有且只有一个执行容器存在"}),"，这样可以避免频繁创建容器而未成功销毁的情况。这样能避免一些常见的浏览器崩溃或变慢的问题。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"总结来说，开发人员需要注重代码的兼容性、安全性和执行效率等问题，这些方面的优化和调试，都可以大幅提高运行效率，并保证网站在更多浏览器中正常运行，最终实现低代码平台中的逻辑执行中枢。"}),"\n",(0,s.jsxs)(n.h2,{id:"实现过程",children:["实现过程",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现过程",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"实现过程大体上如下图所示:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"初始化-browserruntimevm",children:["初始化 BrowserRuntimeVM",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化-browserruntimevm",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["是的，",(0,s.jsx)(n.code,{children:"BrowserRuntimeVM"})," 这个类的目的是创建一个 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 代码运行容器，这个容器的作用类似于一个沙盒，可以隔离代码的执行环境，防止代码执行时污染全局对象。具体而言，",(0,s.jsx)(n.code,{children:"BrowserRuntimeVM"})," 类可以执行以下工作："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["创建一个 ",(0,s.jsx)(n.strong,{children:"iframe"})," 对象，用于隔离正在运行的 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 代码的执行上下文；"]}),"\n",(0,s.jsxs)(n.li,{children:["往 ",(0,s.jsx)(n.strong,{children:"iframe"})," 中注入上下文依赖；"]}),"\n",(0,s.jsx)(n.li,{children:"执行代码并返回相应的结果。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["如下代码所示，定义好类主体后，添加 ",(0,s.jsx)(n.strong,{children:"private iframe"})," 用于保存 ",(0,s.jsx)(n.strong,{children:"iframe 的 DOM 实例"}),"，方便后续更好的操作 ",(0,s.jsx)(n.strong,{children:"DOM"})," 做一些相关操作。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"+class BrowserRuntimeVM {\n+  \n+  private iframe: HTMLIFrameElement | null = null;\n+}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接下来就是初始化 ",(0,s.jsx)(n.strong,{children:"iframe"})," 相关的创建信息，在构造函数 ",(0,s.jsx)(n.code,{children:"constructor"})," 中创建一个 ",(0,s.jsx)(n.code,{children:"iframe"})," 元素，并将其添加到 ",(0,s.jsx)(n.strong,{children:"HTML"})," 页面的根元素中。其中主要做了以下几个事情："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["使用 ",(0,s.jsx)(n.code,{children:"document.createElement()"})," 函数创建一个 ",(0,s.jsx)(n.code,{children:"iframe"})," 元素，将其保存在类成员变量 ",(0,s.jsx)(n.code,{children:"this.iframe"})," 中;"]}),"\n",(0,s.jsxs)(n.li,{children:["调用 ",(0,s.jsx)(n.code,{children:"iframe"})," 元素的 ",(0,s.jsx)(n.code,{children:"setAttribute"})," 方法，设置其 ",(0,s.jsx)(n.code,{children:"sandbox"})," 属性为 ",(0,s.jsx)(n.strong,{children:"'allow-same-origin allow-scripts'"})," 。这个属性表示 ",(0,s.jsx)(n.code,{children:"iframe"})," 中的脚本只能访问与主文档具有相同源的内容，并且只能运行;",(0,s.jsx)(n.strong,{children:"JavaScript"})," 脚本。这可以保证 ",(0,s.jsx)(n.code,{children:"iframe"})," 与主文档之间的安全隔离，防止 ",(0,s.jsx)(n.code,{children:"iframe"})," 中的恶意脚本影响主文档;"]}),"\n",(0,s.jsxs)(n.li,{children:["将 ",(0,s.jsx)(n.code,{children:"iframe"})," 元素的 ",(0,s.jsx)(n.code,{children:"display"})," 样式设置为 ",(0,s.jsx)(n.code,{children:"none"}),"，使其在页面中不可见。这是为了避免 ",(0,s.jsx)(n.code,{children:"iframe"})," 对页面布局产生影响。"]}),"\n",(0,s.jsxs)(n.li,{children:["调用 ",(0,s.jsx)(n.code,{children:"document.documentElement.appendChild()"})," 函数，将 ",(0,s.jsx)(n.code,{children:"iframe"})," 元素添加到文档根元素中。这可以确保 ",(0,s.jsx)(n.code,{children:"iframe"})," 的创建与页面加载同时进行。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"constructor () {\n  this.iframe = document.createElement('iframe');\n  this.iframe.setAttribute('sandbox', 'allow-same-origin allow-scripts');\n  this.iframe.style.display = 'none';\n  document.documentElement.appendChild(this.iframe);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["关键点在于使用 ",(0,s.jsx)(n.strong,{children:"iframe"})," 的 ",(0,s.jsx)(n.strong,{children:"sandbox"})," 属性来做一层安全隔离。实现与主文档的隔离和安全性保护，这是一种常见的方式，且多数低代码平台都会具备此功能，实现方式大同小异。"]}),"\n",(0,s.jsxs)(n.h3,{id:"执行代码",children:["执行代码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#执行代码",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"初始化 BrowserRuntimeVM"})," 类实例的过程中，会动态创建一个 ",(0,s.jsx)(n.strong,{children:"iframe"})," 元素，然后将其添加到页面中，从而实现一个 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 代码执行容器。"]}),"\n",(0,s.jsx)(n.p,{children:"如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"既然执行代码的容器有了，那么代码又该怎么执行呢？"}),"\n",(0,s.jsxs)(n.p,{children:["在实现思路章节中提到了 ",(0,s.jsx)(n.strong,{children:"window.eval"})," 与 ",(0,s.jsx)(n.strong,{children:"Function"})," 可以执行字符串代码片段，在接下来我就以 ",(0,s.jsx)(n.strong,{children:"eval"})," 为例来实现容器中的代码执行的实现。首先创建 ",(0,s.jsx)(n.code,{children:"private executeCode"})," 方法，它接收两个参数："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"code"}),": 执行的代码片段"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"globalSpace"}),": 注入容器上下文参数（为什么要注入等下会讲到）"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"private executeCode(code: string, globalScope: InjectVMVarsType) {\n    const sandbox = this.iframe.contentWindow as IBrowserRuntimeVMWindow\n    sandbox.__INJECT_VARS__ = globalScope;\n\n    return sandbox.eval(`\n      (() => {\n        with (window.__INJECT_VARS__) { \n          return (${code})\n        }\n      })()\n    `);\n  }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["将要注入的全局变量 ",(0,s.jsx)(n.code,{children:"globalScope"})," 设置到 ",(0,s.jsx)(n.code,{children:"sandbox"})," 对象中的 ",(0,s.jsx)(n.code,{children:"__INJECT_VARS__"})," 属性中，从而在容器内部创建了一个与外部 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 代码同名的全局对象。"]}),"\n",(0,s.jsxs)(n.p,{children:["然后，将 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 代码字符串传递到 ",(0,s.jsx)(n.strong,{children:"iframe"})," 中的 ",(0,s.jsx)(n.code,{children:"eval()"})," 函数中执行。在执行代码之前，容器通过使用 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 语句 ",(0,s.jsx)(n.code,{children:"with (window.INJECT_VARS)"})," 建立了一个新的作用域，用于包含注入的全局变量。",(0,s.jsx)(n.strong,{children:"with"})," 语句允许代码块中的所有变量名直接使用容器内的全局变量进行匹配，这就意味着外部 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 代码将使用与容器中同名的全局变量，而不是使用同名变量本身。"]}),"\n",(0,s.jsx)(n.p,{children:"此外，它通过将代码包装在一个匿名函数中来确保代码的完整性，然后返回代码执行结果。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"with"})," 语句可以将一个对象添加到作用域链的顶层，并且允许在代码块中省略掉该对象的引用。通过它可以创建一个独立的上下文，更好地满足执行代码片段的逻辑是无污染的。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"结果处理",children:["结果处理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结果处理",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["尽管 ",(0,s.jsx)(n.code,{children:"executeCode"})," 方法可以单独执行 ",(0,s.jsx)(n.strong,{children:"JavaScript"})," 代码，但是在生产应用中，还是更倾向于创建一个公共的 ",(0,s.jsx)(n.code,{children:"execute"})," 方法，以统一对外提供执行服务。这样不仅可以统一处理返回结果的处理，还可以更好地保护外部调用者的应用程序安全。"]}),"\n",(0,s.jsxs)(n.p,{children:["为了更好地保证代码的健壮性，执行代码时必须采用 ",(0,s.jsx)(n.code,{children:"try-catch"})," 来进行异常机制的处理。在执行代码期间，异常情况有很多种，例如语法错误、运行时错误、访问限制等等。在这种情况下，我们不能让应用程序因为一个小小的错误而崩溃，因此需要使用 ",(0,s.jsx)(n.code,{children:"try-catch"})," 块以便能够及时捕获并处理这些异常情况，保证应用的稳定性。"]}),"\n",(0,s.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export interface ExecuteResult {\n  value: any,\n  error: any,\n  success: boolean;\n}\n\npublic execute(code: string, globalScope: InjectVMVarsType) {\n    try {\n      const value = this.executeCode(code, globalScope);\n      return { value, success: true };\n    } catch (err) {\n      return { success: false, error: err, value: null };\n    }\n  }\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"导出实例",children:["导出实例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#导出实例",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当逻辑实现完成之后，就可以使用 ",(0,s.jsx)(n.code,{children:"new\xa0BrowserRuntimeVM"})," 来初始化一个实例，并将其导出到客户端进行使用。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果严谨一些的话，还需要判断当前是否是浏览器环境来确定是否需要初始化 ",(0,s.jsx)(n.code,{children:"BrowserRuntimeVM"}),"，避免在非浏览器环境下初始化类失败。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export const browserRuntimeVM = window ? new BrowserRuntimeVM() : null;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"解析可执行代码",children:["解析可执行代码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#解析可执行代码",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在之前提到了可执行代码都是通过 ",(0,s.jsx)(n.code,{children:"{{}}"})," 约定其内部的内容就是表达式，那么接下来就需要实现解析表达式的方法来甄别须需要执行的代码将其调用 ",(0,s.jsx)(n.code,{children:"browserRuntimeVM.execute"})," 来完成相关的内容了。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果有同学实现过字符串模板引擎的实现那就比较好理解了，以下是模板引擎的逻辑实现，内部也通过 ",(0,s.jsx)(n.code,{children:"{{}}"})," 来约定变量与表达式的。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const template = `\n  <div>\n    <h1>{{ title }}</h1>\n    <p>{{ content }}</p>\n    <p>{{ author.name }}</p>\n    <p>{{ 1 + 2 }}</p>\n  </div>\n`;\n\nconst data = {\n  title: 'Hello World',\n  content: 'This is a test',\n  author: {\n    name: 'John Doe'\n  }\n};\n\nconst result = render(template, data);\nconsole.log(result);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["那么 ",(0,s.jsx)(n.strong,{children:"render"})," 的逻辑大方向上需要实现两个功能，一是匹配解析 ",(0,s.jsx)(n.strong,{children:"template"})," 字符串中所有的 ",(0,s.jsx)(n.code,{children:"{{}}"})," 模板，然后判断当前是变量还是表达式，如果是变量就根据路径替换 ",(0,s.jsx)(n.strong,{children:"data"})," 当中的内容，如果是表达式就需要执行后将结果替换。"]}),"\n",(0,s.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function render(template, data) {\n  // 匹配 {{ 变量名 }} 和 {{ 表达式 }}\n  const reg = /{{\\s*([\\w.]+)\\s*}}|{{\\s*(.*?)\\s*}}/g;\n  return template.replace(reg, (match, p1, p2) => {\n    if (p1) {\n      // 变量绑定\n      return getValueByPath(data, p1);\n    } else {\n      // 表达式求值\n      return evalExpression(data, p2);\n    }\n  });\n}\n\n// 根据路径获取对象的属性值，可以通过lodash.get快速获取对应namePath下的value\nfunction getValueByPath(obj, path) {\n  const paths = path.split('.');\n  let value = obj;\n  for (let i = 0; i < paths.length; i++) {\n    value = value[paths[i]];\n  }\n  return value;\n}\n\n// 求表达式的值\nfunction evalExpression(data, expression) {\n  const func = new Function('data', `return ${expression}`);\n  return func(data);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这是一个模板引擎的实现方式，"}),"\n",(0,s.jsxs)(n.h4,{id:"isexpression",children:["isExpression",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isexpression",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["实现 ",(0,s.jsx)(n.code,{children:"isExpression"})," 方法，通过 ",(0,s.jsxs)(n.em,{children:[(0,s.jsx)(n.em,{children:"/{{\\s"}),"([^}]+)?\\s"]}),"}}/** 正则来匹配 ",(0,s.jsx)(n.code,{children:"{{}}"})," 模板的相关规则。通过这种方式，我们可以快速地判断一个字符串是否是表达式，以便我们在代码中快速地进行逻辑控制和处理。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export const isExpression = (str: string): boolean => {\n  if (typeof str === 'string') {\n    return /{{\\s*([^}]+)?\\s*}}/g.test(str)\n  }\n  return false\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"parsejsstrtolte",children:["parseJsStrToLte",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parsejsstrtolte",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"parseJsStrToLte"})," 方法就是用来将之前的可执行代码片段解析成为 ",(0,s.jsx)(n.strong,{children:"ES6"})," 当中的模板字符串用于执行渲染。",(0,s.jsx)(n.strong,{children:"ES6"})," 模板字符串天然支持变量与表达式的执行，是一个实现成本比较小的技术方案之一。"]}),"\n",(0,s.jsx)(n.p,{children:"转换示例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const str = "props: {{props.code}}"\n\nconst strLte = `props: ${props.code}`\n'})}),"\n",(0,s.jsxs)(n.p,{children:["具体实现如下，通过 ",(0,s.jsx)(n.strong,{children:"/{{(.+?)}}/g"})," 正则匹配所有需要替换的内容，将匹配的结果通过 ",(0,s.jsx)(n.code,{children:"replace(regex, '${$1}')"})," 替换成为预期的模板字符串的结果。至此，就可以将模板字符串放入 ",(0,s.jsx)(n.code,{children:"BrowserRuntimeVM"})," 当中执行。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export const parseJsStrToLte = (code: string): string => {\n\n  // 匹配 {{}} 的内容\n  const regex = /{{(.+?)}}/g;\n  \n  // {{}} -> ${}\n  const result = code.replace(regex, '${$1}');\n\n  // 转换成为模板字符串`${a1} ${a2}`格式\n  \n  return ``${result}``;\n  \n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"页面使用",children:["页面使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面使用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当实现完成 ",(0,s.jsx)(n.code,{children:"BrowserRuntimeVM"})," 与表达式解析后，最后就来简单实验一下效果。"]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.strong,{children:"Button"})," 物料组件中，添加 ",(0,s.jsx)(n.strong,{children:"text"})," 为动态的变量绑定，在页面中此时 ",(0,s.jsx)(n.strong,{children:"text"})," 解析后应该是 ",(0,s.jsx)(n.strong,{children:"small"})," 的值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:'export const Button = createReactMaterial<any>(withMaterialNode(ButtonView), {\n  displayName: \'按钮\',\n  props: {\n+   size: "small",\n+   text: "{{props.size}}"\n  },\n  related: {\n    settingRender: ButtonSettings\n  }\n})\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"withMaterialNode"})," 中比较粗暴的方式是当 ",(0,s.jsx)(n.strong,{children:"props"})," 发生变化的时候，通过",(0,s.jsx)(n.strong,{children:"cloneDeepWith"}),"方法深度遍历每个属性，通过 ",(0,s.jsx)(n.code,{children:"isExpression"})," 判断 ",(0,s.jsx)(n.code,{children:"value"})," 如果为表达式的情况下，将其调用 ",(0,s.jsx)(n.code,{children:"parseJsStrToLte"})," 的结果给 ",(0,s.jsx)(n.code,{children:"browserRuntimeVM.execute"})," 执行，此时将原始的 ",(0,s.jsx)(n.code,{children:"props"})," 传递给 ",(0,s.jsx)(n.code,{children:"browserRuntimeVM"})," 创造当前的上下文。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:'export function withMaterialNode<T = any> (WrapComponent: React.FunctionComponent<T>) {\n  return function (props: any) {\n    const { connectors: { connect, drag } } = useNode()\n\n+    const memoizedProps = React.useMemo(() => {\n+      const cloneProps =  cloneDeepWith(props,  (value) => {\n+        // vm run\n+        if (value && typeof value === "string" && isExpression(value)) {\n+          console.log(`执行代码： ${value}`)\n+          return browserRuntimeVM.execute(parseJsStrToLte(value), {props})?.value\n+        }\n+      })\n+      return cloneProps\n+    }, [props])\n\n    return (\n      <ErrorBoundary fallbackRender={fallbackRender} >\n        <WrapComponent ref={(dom: HTMLElement) => connect(drag(dom))} {...memoizedProps}/>\n      </ErrorBoundary>\n    )\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["最后将 ",(0,s.jsx)(n.code,{children:"cloneDeepWith"})," 返回的新对象 ",(0,s.jsx)(n.code,{children:"memoizedProps"})," 传递给组件进行渲染，此时就会发现 ",(0,s.jsx)(n.code,{children:"props.text"})," 的内容已经发生了改变。"]}),"\n",(0,s.jsx)(n.p,{children:"如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["通过实现章节中的组件属性动态逻辑绑定执行能力，实现了 ",(0,s.jsx)(n.code,{children:"BrowserRuntimeVM"})," 类，能够在页面中动态执行逻辑。为保证其稳定性并避免与应用上下文的串联带来的问题，考虑了安全性与灵活性等，为其提供了一个独立的上下文容器，通过 ",(0,s.jsx)(n.strong,{children:"iframe"})," 的 ",(0,s.jsx)(n.strong,{children:"sandbox"})," 来实现。"]}),"\n",(0,s.jsx)(n.p,{children:"此外，还实现了解析表达式的相关逻辑，通过快速判断表达式并将其转换为模板字符串，使其能够执行相关的获取逻辑，并将结果展示在组件中。"}),"\n",(0,s.jsxs)(n.p,{children:["在后续的实现中，就需要将其与编辑器 ",(0,s.jsx)(n.strong,{children:"setter"})," 结合起来，实现一个健全的属性绑定组件，这个在下面几期慢慢的会进行实现，因此本章节尽可能的讲的细一些，避免后续实现扩展功能时出现无从下手的情况。"]}),"\n",(0,s.jsx)(n.p,{children:"需要注意的是，目前模板字符串仅支持变量绑定与表达式执行，不支持函数字符串的运行，但我们将在后续扩展中增加更多类型的支持。"}),"\n",(0,s.jsxs)(n.h2,{id:"资源",children:["资源",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#资源",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval",target:"_blank",rel:"noopener noreferrer",children:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with",target:"_blank",rel:"noopener noreferrer",children:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener noreferrer",children:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.codiga.io/blog/javascript-eval-best-practices/",target:"_blank",rel:"noopener noreferrer",children:"https://www.codiga.io/blog/javascript-eval-best-practices/"})}),"\n"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let x=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F31.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E5%8A%A8%E6%80%81%E9%80%BB%E8%BE%91%E6%89%A7%E8%A1%8C%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"实现思路",id:"实现思路",depth:2},{text:"实现过程",id:"实现过程",depth:2},{text:"初始化 BrowserRuntimeVM",id:"初始化-browserruntimevm",depth:3},{text:"执行代码",id:"执行代码",depth:3},{text:"结果处理",id:"结果处理",depth:3},{text:"导出实例",id:"导出实例",depth:3},{text:"解析可执行代码",id:"解析可执行代码",depth:3},{text:"isExpression",id:"isexpression",depth:4},{text:"parseJsStrToLte",id:"parsejsstrtolte",depth:4},{text:"页面使用",id:"页面使用",depth:3},{text:"总结",id:"总结",depth:2},{text:"资源",id:"资源",depth:2}],title:"31.客户端实战：动态逻辑执行实现",headingTitle:"31.客户端实战：动态逻辑执行实现",frontmatter:{}}}}]);