"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["67243"],{930360:function(e,n,i){i.r(n),i.d(n,{default:()=>R});var c=i(552676),s=i(740453);let d=i.p+"static/image/009b87c34b48feb80d7cc016cb3c1b67.3819877f.webp",r=i.p+"static/image/298fbf2a63cc4219091ccad23dc251d9.656d6d0f.gif",l=i.p+"static/image/6b2b4370af35606e05b069c6835f1d4c.08cf32af.gif",o=i.p+"static/image/eee868637153317191eb654f10ca6da4.f6dd4953.webp",h=i.p+"static/image/0a298832901957440d4eb5d018fa5d8c.048aed49.webp",x=i.p+"static/image/9488261c04a435d45ec72de27227bfef.8b1b1f1d.gif",t=i.p+"static/image/e1b45e91ea5b69846457bb803b955a4e.ed91c489.webp",j=i.p+"static/image/a831e8ae7acc4e7defb27e98fffeed9b.2d9792bf.webp",a=i.p+"static/image/42f79e353233b33961267ba6b9ac53e2.636fd988.webp",p=i.p+"static/image/16971a5e30e5c3db974b07e9e7f1551e.2d5791fc.gif",g=i.p+"static/image/8eb1f242c7fd56bfa2dd786a07cea645.9e8fda3e.webp",m=i.p+"static/image/8e61a8a541f38688b8e080d6c7bd60ee.5decd7ec.gif",f=i.p+"static/image/f7b82e00c1b3b8e526f40fac1f17b9bb.3f1ced11.gif",v=i.p+"static/image/b141b455819aedcf26c6db048c931652.22febe7f.gif",b=i.p+"static/image/a63427f36c620ad37ce00ac7bbf26651.01ae333e.gif",u=i.p+"static/image/a0045ad35aaf99bd50494824811dac8e.439e308e.gif",S=i.p+"static/image/ade898a8b97e30dffdedf5f5d660bdc8.5aa0e2c3.webp",w=i.p+"static/image/0db6e0755822d6bf944eb578c56d55ed.cb53dcd1.gif",G=i.p+"static/image/f24f47e3ccd16781a76e245273a2106a.fd6c1ce9.webp",V=i.p+"static/image/e207a2c58c3e07690b6ea07419b1f10e.d258b5c2.gif",k=i.p+"static/image/f76d215b612501b3c4059f5348969ae9.fccc5670.webp";function B(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",strong:"strong",img:"img",blockquote:"blockquote",pre:"pre"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"9-初级篇svg-图像元素",children:["9-初级篇：SVG 图像元素",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9-初级篇svg-图像元素",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["图像在 Web 应用或网站中扮演着至关重要的角色。作为 Web 开发者，我们有多种方式可以为 Web 添加图片，比如使用 HTML 提供的 ",(0,c.jsx)(n.code,{children:"<img>"})," 和 ",(0,c.jsx)(n.code,{children:"<picture>"})," 元素，或者利用 CSS 的 ",(0,c.jsx)(n.code,{children:"background-image"})," 属性。与此类似，SVG 也提供了 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素，类似于 HTML 中的 ",(0,c.jsx)(n.code,{children:"<img>"})," 元素，使得我们能够轻松地将图片引入到 SVG 文档中。"]}),"\n",(0,c.jsxs)(n.p,{children:["SVG 图像元素 ",(0,c.jsx)(n.code,{children:"<image>"})," 在 SVG 中扮演着与",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345813971552698406",target:"_blank",rel:"noopener noreferrer",children:"基本图形元素"}),"、",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7346773005114507304",target:"_blank",rel:"noopener noreferrer",children:"文本元素"}),"同等重要的角色。它允许我们将各种类型的图像文件（如 JPG、PNG、WebP 和 GIF 等）嵌入到 SVG 中，并在指定的位置进行渲染和展示。"]}),"\n",(0,c.jsxs)(n.p,{children:["这节课将深入探讨 SVG 图像元素 ",(0,c.jsx)(n.code,{children:"<image>"})," 的各种用法，从基本的图像引用到更复杂的渲染和处理，为大家详细介绍其各项属性、用法、兼容性以及最佳实践。无论你是初学者还是有一定经验的 Web 开发者，这节课都将为你提供清晰易懂的指导，帮助你轻松掌握 SVG 图像元素 ",(0,c.jsx)(n.code,{children:"<image>"})," 的技巧，并将其应用到实际的项目中去。让我们一起踏上探索 SVG 图像元素 ",(0,c.jsx)(n.code,{children:"<image>"})," 的旅程，开启一段令人兴奋的学习之旅！"]}),"\n",(0,c.jsxs)(n.h2,{id:"svg-图像元素的概述",children:["SVG 图像元素的概述",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-图像元素的概述",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["SVG 图像元素（",(0,c.jsx)(n.code,{children:"<image>"}),"）是 SVG 标准中的一个重要组成部分。它允许 Web 开发者将外部图像文件以及 MIME 类型为 ",(0,c.jsx)(n.code,{children:'"image/svg+xml"'})," 的文件嵌入到 SVG 文档中，并在指定位置进行渲染和展示。与 HTML 中的 ",(0,c.jsx)(n.code,{children:"<img>"})," 元素类似，SVG 的 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素可以引用多种图像格式，包括 JPG、PNG、WebP 和 GIF 等。"]}),"\n",(0,c.jsx)(n.p,{children:"Web 开发者通过使用 SVG 图像元素可以引入外部图像文件并进行各种处理。例如："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"缩放和定位"}),"：使用 ",(0,c.jsx)(n.code,{children:"x"})," 、",(0,c.jsx)(n.code,{children:"y"})," 、",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 属性可以对图像进行位置和尺寸的调整，以便将其放置在适当的位置并调整大小"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"保持宽高比"}),"：使用 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性可以控制图像的缩放和定位，以确保其原始宽高比得到保持"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"裁剪"}),"：可以通过设置 ",(0,c.jsx)(n.code,{children:"viewBox"})," 属性来定义一个裁剪框，只显示图像的特定部分，而不是全部显示"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"滤镜效果"}),"：可以使用 SVG 滤镜来对引入的图像进行各种视觉效果处理，如模糊、颜色变换等"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"叠加效果"}),"：可以通过叠加多个图像元素来创建图像叠加效果，从而实现更复杂的视觉效果"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"交互效果"}),"：可以结合 JavaScript 代码来为引入的图像添加互交效果，如鼠标悬停、点击等事件响应"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"动画效果"}),"：可以使用 CSS 或 JavaScript 创建动画效果，使引入的图像产生动态变化"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"组合和分组"}),"：可以将多个图像元素组合在一起，形成一个复杂的图像场景，并对它们进行分组管理"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["总的来说，SVG 的 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素为我们提供了丰富的功能和灵活的处理方式，可以实现各种复杂的图像处理效果。通过合理利用这些功能，可以创建出更加丰富、生动和具有交互性的 SVG 图像。"]}),"\n",(0,c.jsxs)(n.h2,{id:"svg-图像元素的基本应用",children:["SVG 图像元素的基本应用",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-图像元素的基本应用",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"假设你有一张像下图这样的一张图片，需要嵌入到 SVG 文档中："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["图片地址：",(0,c.jsx)(n.a,{href:"https://picsum.photos/id/77/1631/1102",target:"_blank",rel:"noopener noreferrer",children:"https://picsum.photos/id/77/1631/1102"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在介绍如何通过 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素将上图嵌入到 SVG 文档中之前，我们先简单回忆一下 HTML 的 ",(0,c.jsx)(n.code,{children:"<img>"})," 元素是如何将该图片嵌入到 HTML 文档中。事情很简单，只需要在 ",(0,c.jsx)(n.code,{children:"<img>"})," 的 ",(0,c.jsx)(n.code,{children:"src"})," 属性上引入你所要的图片文件地址即可，该地址可以是图片文件的相对地址，也可以是绝对地址，还可以是 Data URIs。这里图片文件的绝对地址为例："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<img src="https://picsum.photos/id/77/1631/1102" />\n'})}),"\n",(0,c.jsxs)(n.p,{children:["在不做任何修改的情况之下，在浏览器看到 ",(0,c.jsx)(n.code,{children:"<img>"})," 引入的图片效果如下："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:V,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/bGJBZwb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGJBZwb"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["它将会以图片的原始尺寸（",(0,c.jsx)(n.code,{children:"1631 \xd7 1102"}),"）渲染，当容器尺寸小于图片尺寸时，会使容器出现滚动条。当然，你可以在 ",(0,c.jsx)(n.code,{children:"<img>"})," 元素上指定一个你想要的尺寸："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<img src="https://picsum.photos/id/77/1631/1102" width="400" height="300" />\n'})}),"\n",(0,c.jsxs)(n.p,{children:["或者是通过 CSS 的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 设置渲染的大小："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"img {\n    display: block;\n    width: 400px;\n    height: 300px;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:G,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/PogbLWv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PogbLWv"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这是一种简单又粗暴的方式，很容易造成图片的扭曲变形，因为重置的宽高比与图片原始宽高比不相等时。更为合理的方式是，仅给图片宽高中的一个指定确切的值，另一个设置为 ",(0,c.jsx)(n.code,{children:"auto"})," 。这个时候，浏览器会根据图片原始宽高比计算出相应的值："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"img {\n    display: block;\n    width: 400px;\n    height: auto;\n}\n\n/* 或者 */\nimg {\n    display: block;\n    height: 300px;\n    width: auto;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["当然，",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259316040151236666",target:"_blank",rel:"noopener noreferrer",children:"你还可以借助 CSS 的 aspect-ratio 属性使图片按照指定的宽高比来设置尺寸"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"img {\n    display: block;\n    width: 100%;\n    aspect-ratio: 4 / 3;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/dyLOrWq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dyLOrWq"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这些对于 Web 开发者来说，是图片在 Web 上应用的最基础部分，但要在 Web 上用好图片，还是有很多细节的，比如",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328/section/7199845663143067660",target:"_blank",rel:"noopener noreferrer",children:"如何防止图片拉伸或挤压"}),"、",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328/section/7199845888997457959",target:"_blank",rel:"noopener noreferrer",children:"图片裁剪"}),"等。不过，这些内容已超出这节课的范畴，因此不在这里做过多的阐述。"]}),"\n",(0,c.jsxs)(n.p,{children:["我们还是回到这节课的主题中来， ",(0,c.jsx)(n.code,{children:"<image>"})," 元素是如何将该图片嵌入到 SVG 文档中。"]}),"\n",(0,c.jsx)(n.p,{children:"首先，假设你有一个 SVG 文档："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    \x3c!-- 我是一个 SVG 文档 --\x3e\n</svg>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"svg {\n    display: block;\n    width: 50vw;\n    aspect-ratio: 4 / 3;\n    outline: 1px dashed #fff;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["我们使用上面的代码创建了一个 SVG 文档，而且视口和宽高比与 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的宽高比相等，都是 ",(0,c.jsx)(n.code,{children:"4:3"})," 。现在，我们使用 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素，将需要的图片嵌入到 ",(0,c.jsx)(n.code,{children:"<svg>"})," 元素中："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    <image href="https://picsum.photos/id/77/1631/1102" />\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<image>"})," 和 ",(0,c.jsx)(n.code,{children:"<img>"})," 最直观的差异，",(0,c.jsx)(n.code,{children:"<image>"})," 是通过 ",(0,c.jsx)(n.code,{children:"href"})," （SVG 2 之前是通过 ",(0,c.jsx)(n.code,{children:"xlink:href"}),"）属性来引入图片源。另外一个差异是，",(0,c.jsx)(n.code,{children:"<image>"})," 引入的图片尺寸与 SVG 视口尺寸不匹配时，图片溢出部分会被裁剪："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/vYMyPWb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYMyPWb"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这是因为用户代理（Web 浏览器）默认情况之下将 ",(0,c.jsx)(n.code,{children:"<svg>"})," 元素的 ",(0,c.jsx)(n.code,{children:"overflow"})," 属性的值设置为 ",(0,c.jsx)(n.code,{children:"hidden"})," ："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"/* User Agent Stylesheet */\nsvg :not ( :root ) {\n overflow - clip - margin : content-box;\n overflow : hidden;\n} \n"})}),"\n",(0,c.jsxs)(n.p,{children:["有意思的是，用户代理同时也将 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素上的 ",(0,c.jsx)(n.code,{children:"overflow"})," 属性的值设置为 ",(0,c.jsx)(n.code,{children:"hidden"})," ："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"/* User Agent Stylesheet */\nimage {\n overflow : hidden;\n} \n"})}),"\n",(0,c.jsxs)(n.p,{children:["这意味着，对于嵌入 SVG 图像的 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素，应用两个不同的溢出值。在 ",(0,c.jsx)(n.code,{children:"image"})," 元素上指定的值确定了图像渲染矩形是否被裁剪到定位矩形中。在所引用 SVG 的根元素上的值确定了图形是否被裁剪到图像渲染矩形中。也就是说，除非 Web 开发者覆盖 ",(0,c.jsx)(n.code,{children:"image"})," 元素的 ",(0,c.jsx)(n.code,{children:"overflow"})," 属性值，否则图像将被裁剪到由几何属性定义的定位矩形中。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["注意，这里所说的定位矩形是指 ",(0,c.jsx)(n.code,{children:"image"})," 元素的 ",(0,c.jsx)(n.code,{children:"x"}),"、",(0,c.jsx)(n.code,{children:"y"}),"、",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 几何属性指定了嵌入内容所放置的矩形区域（称为定位矩形）。定位矩形被用作元素的边界框；然而需要注意的是，根据 ",(0,c.jsx)(n.code,{children:"overflow"})," 属性的值，图形可能会溢出定位矩形。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/xxeRePN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxeRePN"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<image>"})," 元素还有一点与 ",(0,c.jsx)(n.code,{children:"<img>"})," 不一样的是，我们可以通过 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素的 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 属性来设置 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素左上角在 SVG 视口中的位置。这两个属性的值可以是数字也可以是百分比值，也可以是负值。当 ",(0,c.jsx)(n.code,{children:"x"})," 的值为正值时，",(0,c.jsx)(n.code,{children:"image"})," 元素会沿 ",(0,c.jsx)(n.code,{children:"x"})," 轴向右移动，反则之向左移动；当 ",(0,c.jsx)(n.code,{children:"y"})," 的值为正值时，",(0,c.jsx)(n.code,{children:"image"})," 元素会沿着 ",(0,c.jsx)(n.code,{children:"y"})," 轴向下移动，反之则向上移动。如果没有给 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素显式设置 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 属性的值，它们默认为 ",(0,c.jsx)(n.code,{children:"0"})," ，那么 ",(0,c.jsx)(n.code,{children:"image"})," 元素的左上角将与 SVG 视窗的左上角（原点）对齐："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    <image href="https://picsum.photos/id/77/1631/1102" x="50" y="50" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/LYvbvmY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYvbvmY"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<image>"})," 元素与 ",(0,c.jsx)(n.code,{children:"<img>"})," 元素有一点相似的是，可以给 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素指定 ",(0,c.jsx)(n.code,{children:"width"})," 和（或）",(0,c.jsx)(n.code,{children:"height"})," 。当只给 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素设置 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 中的一个值时，客户端（例如浏览器）会根据图片的原始宽高比计算出另一个值。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    \x3c!-- 根据图片原始宽高比，在设置的宽度基础上计算出图片的高度 --\x3e\n    <image href="https://picsum.photos/id/77/1631/1102" x="50" y="50" width="400" />\n</svg>\n\n\x3c!-- 或者 --\x3e\n<svg viewBox="0 0 800 600">\n    \x3c!-- 根据图片原始宽高比，在设置的高度基础上计算出图片的宽度 --\x3e\n    <image href="https://picsum.photos/id/77/1631/1102" x="50" y="50" height="300" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/abxBxRe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abxBxRe"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["也可以同时给 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素设置 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," ，但与 ",(0,c.jsx)(n.code,{children:"<img>"})," 不同的是，它们并不会造成图片的扭曲，依旧会根据图片原始宽度进行缩放，有可能会使图片溢出或者小于定位矩形所在的区域："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    <image href="https://picsum.photos/id/77/1631/1102" x="50" y="50" width="400" height="300" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/LYvxPgL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYvxPgL"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["需要注意的是，",(0,c.jsx)(n.code,{children:"<image>"})," 元素的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 属性的任一值为 ",(0,c.jsx)(n.code,{children:"0"})," 的时候，图片都不会在 SVG 视口中呈现："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/jORyOrP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jORyOrP"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"svg-的-viewbox-属性对-image-元素的影响",children:["SVG 的 viewBox 属性对 image 元素的影响",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-的-viewbox-属性对-image-元素的影响",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<svg>"})," 元素的 ",(0,c.jsx)(n.code,{children:"viewBox"})," 属性对 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素的影响是非常重要的，它可以用来控制图像在 SVG 视口中的显示方式，包括图像尺寸调整、图像位置和图像的显示等。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345677438053810214",target:"_blank",rel:"noopener noreferrer",children:"通过对 SVG 坐标系统的学习"}),"，我们知道 ",(0,c.jsx)(n.code,{children:"<svg>"})," 元素的 ",(0,c.jsx)(n.code,{children:"viewBox"})," 属性包括了 ",(0,c.jsx)(n.code,{children:"<min-x>"})," 、",(0,c.jsx)(n.code,{children:"<min-y>"})," 、",(0,c.jsx)(n.code,{children:"<width>"})," 和 ",(0,c.jsx)(n.code,{children:"<height>"})," 四个参数，其中 ",(0,c.jsx)(n.code,{children:"<min-x>"})," 和 ",(0,c.jsx)(n.code,{children:"<min-y>"})," 决定了 ",(0,c.jsx)(n.code,{children:"viewBox"})," 左上角在视口中的位置，",(0,c.jsx)(n.code,{children:"<width>"})," 和 ",(0,c.jsx)(n.code,{children:"<height>"})," 决定了 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的尺寸大小。如果将 ",(0,c.jsx)(n.code,{children:"viewBox"})," 比作相片，把 SVG 视口比作相框的话，其两者的关系是："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"如果相片和相框尺寸相等，那么效果可以说是堪称完美，相片会完美的填充在相框中"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"如果相片比相框小，那么相片就填不满整个区域，你需要考虑相片在相框中的摆放位置，才能达到满意的效果"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"如果相片比相框大，那么相片就会超出相框的区域，你同样需要考虑相片在相框中的摆放位置，才能达到满意效果"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["注意，这里描述的相片与框之间存在的关系，其前提是相片（",(0,c.jsx)(n.code,{children:"viewBox"}),"）和相框（SVG 视口）的宽高比相等。"]}),"\n",(0,c.jsxs)(n.p,{children:["这意味着，调整 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的 ",(0,c.jsx)(n.code,{children:"<min-x>"})," 和（或）",(0,c.jsx)(n.code,{children:"<min-y>"})," 将会改变相片在相框中的位置，调整 ",(0,c.jsx)(n.code,{children:"<width>"})," 和 （或）",(0,c.jsx)(n.code,{children:"<height>"})," 将会放大或缩小相片。"]}),"\n",(0,c.jsxs)(n.p,{children:["也就是说，当我们调整 ",(0,c.jsx)(n.code,{children:"<svg>"})," 元素的 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的 ",(0,c.jsx)(n.code,{children:"<min-x>"})," 和 ",(0,c.jsx)(n.code,{children:"<min-y>"})," 参数的值，将会调整 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素在 SVG 视口中的位置；调整 ",(0,c.jsx)(n.code,{children:"<svg>"})," 元素的 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的 ",(0,c.jsx)(n.code,{children:"<width>"})," 和 ",(0,c.jsx)(n.code,{children:"<height>"})," 参数的值，将会对 ",(0,c.jsx)(n.code,{children:"<image>"})," 进行缩放。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 400 300" class="figure">\n    <image href="https://picsum.photos/id/77/1631/1102" x="50" y="50" width="400" height="300" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".figure {\n    width: 800px;\n    height: 600px;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["请拖动示例中的滑块，修改 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的值，你将看到 ",(0,c.jsx)(n.code,{children:"viewBox"})," 给 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素在 SVG 视口中呈现上的变化："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/GRLrRaR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRLrRaR"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["为了能让大家更好的理解 ",(0,c.jsx)(n.code,{children:"viewBox"})," 对 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素的位置、尺寸等影响，我们在上面的示例基础上简化一下。考虑以下 SVG 代码："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="800" height="600" viewBox="0 0 400 300" class="figure">\n    <image href="https://picsum.photos/id/77/1631/1102" x="50" y="50" width="300" height="150" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLrgyMK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLrgyMK"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在给定的 SVG 示例中，SVG 的视口（相框 Viewport）的尺寸是 ",(0,c.jsx)(n.code,{children:"800 x 600"})," ，并且设置了一个 ",(0,c.jsx)(n.code,{children:"viewBox"})," 属性为 ",(0,c.jsx)(n.code,{children:'"0 0 400 300"'})," ，SVG 的 ",(0,c.jsx)(n.code,{children:"viewBox"})," （相片）的尺寸是 ",(0,c.jsx)(n.code,{children:"400 x 300"})," 。在 SVG 中，",(0,c.jsx)(n.code,{children:"<image>"})," 元素引入了一张外部图像，设置的初始位置（图片左上角）是 ",(0,c.jsx)(n.code,{children:"(50,50)"})," ，宽度是 ",(0,c.jsx)(n.code,{children:"300"})," ，高度是 ",(0,c.jsx)(n.code,{children:"150"})," 。同时，",(0,c.jsx)(n.code,{children:"<image>"})," 元素的“定位矩形”左上角位置是 ",(0,c.jsx)(n.code,{children:"(50,50)"})," ，大小是 ",(0,c.jsx)(n.code,{children:"300 x 150"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["现在让我们详细解释 ",(0,c.jsx)(n.code,{children:"viewBox"})," 属性对 ",(0,c.jsx)(n.code,{children:"image"})," 元素的影响。"]}),"\n",(0,c.jsxs)(n.p,{children:["我们知道，SVG 视口的尺寸是 ",(0,c.jsx)(n.code,{children:"800 x 600"})," ，SVG 的 ",(0,c.jsx)(n.code,{children:"viewBox"})," 尺寸是 ",(0,c.jsx)(n.code,{children:"400 x 300"})," ，为了使 ",(0,c.jsx)(n.code,{children:"viewBox"})," 能填满 SVG 视口，那么 ",(0,c.jsx)(n.code,{children:"viewBox"})," 则需要放大两倍（在这个示例中），与此同时，",(0,c.jsx)(n.code,{children:"<image>"})," 元素“定位矩形”受 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的影响，其位置和大小都会放大两倍。即："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<image>"})," 元素的“定位矩形”的左上角由初设的 ",(0,c.jsx)(n.code,{children:"(50,50)"})," 变成了 ",(0,c.jsx)(n.code,{children:"(100,100)"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<image>"})," 元素的“定位矩形”的尺寸由初设的 ",(0,c.jsx)(n.code,{children:"300 x 150"})," 变成了 ",(0,c.jsx)(n.code,{children:"600 x 300"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["因此，",(0,c.jsx)(n.code,{children:"<image>"})," 元素引用的图片在 SVG 画布中向右下角偏移，同时图片会放大显示。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，",(0,c.jsx)(n.code,{children:"<image>"})," 元素上指定的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 只是定位矩形的尺寸，图片实际呈现可能会比定位矩形大，也可能会比定位矩形小。它会根据图片的原始宽高比与定位矩形的宽高比进行计算，该计算有点类似于 CSS 的 ",(0,c.jsx)(n.code,{children:"background-size"})," 或 ",(0,c.jsx)(n.code,{children:"object-fit"})," 属性的 ",(0,c.jsx)(n.code,{children:"cover"})," 或 ",(0,c.jsx)(n.code,{children:"contain"})," 的计算。在这个示例中，图片实际呈现的尺寸是 ",(0,c.jsx)(n.code,{children:"444 x 300"})," （图片的原始宽高比是大约是 ",(0,c.jsx)(n.code,{children:"1.48"}),"） ："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["图片实际呈现的的效果是位于 ",(0,c.jsx)(n.code,{children:"image"})," 元素“定位矩形”的中心。"]}),"\n",(0,c.jsxs)(n.p,{children:["反之，",(0,c.jsx)(n.code,{children:"image"})," 引入的图片就会缩小。在上例的基础上，我们把 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的尺寸与 SVG 视口的尺寸对调一下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="400" height="300" viewBox="0 0 800 600" class="figure">\n    <image href="https://picsum.photos/id/77/1631/1102" x="50" y="50" width="300" height="150" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/gOygWjz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOygWjz"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["由于 ",(0,c.jsx)(n.code,{children:"viewBox"})," （相片）要缩小两倍才能正好填充在 SVG 视口（相框）中，导致 SVG 视口中的图形也会缩小两倍。因此，",(0,c.jsx)(n.code,{children:"<image>"})," 元素的“定位矩形”从原来的 ",(0,c.jsx)(n.code,{children:"(50,50)"})," 向左上角移动（移动到 ",(0,c.jsx)(n.code,{children:"(25,25)"}),"），尺寸由原来的 ",(0,c.jsx)(n.code,{children:"300 x 150"})," 缩小到 ",(0,c.jsx)(n.code,{children:"150 x 75"})," 。最终呈现的图片尺寸是 ",(0,c.jsx)(n.code,{children:"111 x 75"})," ，图片缩小了两倍！"]}),"\n",(0,c.jsxs)(n.p,{children:["综上所述，",(0,c.jsx)(n.code,{children:"viewBox"})," 属性可以影响 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素的尺寸、位置和显示方式，以便与 SVG 画布的可见区域相匹配。在处理 SVG 中的图像时，",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345677438053810214",target:"_blank",rel:"noopener noreferrer",children:"理解 viewBox 属性的影响是非常重要的"}),"。"]}),"\n",(0,c.jsxs)(n.h2,{id:"svg-的-preserveaspectratio-属性对-image-元素的影响",children:["SVG 的 preserveAspectRatio 属性对 image 元素的影响",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-的-preserveaspectratio-属性对-image-元素的影响",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["对于 ",(0,c.jsx)(n.code,{children:"<svg>"})," 元素，",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性与 ",(0,c.jsx)(n.code,{children:"viewBox"})," 属性同样重要，它可以用来控制 SVG 中的 ",(0,c.jsx)(n.code,{children:"viewBox"})," 在视口中的缩放和定位。这个属性主要用来确保图形在缩放时能够保持宽高比一致。通过 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"}),"，你可以定义三个关键方面：是均匀缩放还是拉伸、整个 ",(0,c.jsx)(n.code,{children:"viewBox"})," 是否完全可见、以及 ",(0,c.jsx)(n.code,{children:"viewBox"})," 在视口内的对齐方式。"]}),"\n",(0,c.jsxs)(n.p,{children:["在上一部分，我们已经一起探讨了 ",(0,c.jsx)(n.code,{children:"viewBox"})," 属性对于 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素位置、大小和呈现方式的影响。在所展示的示例，它们有着一个共同的特性，那就是 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的宽高比与 SVG 视窗的宽高比相等。因此，并没有在示例中应用 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性。事实上，只有当 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的宽高比与 SVG 视口的宽高比不匹配的时候，我们才会使用 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性来控制图形在 SVG 视口中的对齐方式和缩放形式。"]}),"\n",(0,c.jsxs)(n.p,{children:["这也意味着，SVG 的 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 同样会对 SVG 的 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素引入的图片呈现有一定的影响："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"缩放和定位"}),"： ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"}),"允许你控制 SVG 图像中嵌入的图像（使用 ",(0,c.jsx)(n.code,{children:"image"})," 元素）的缩放和定位。该属性决定了视口范围内图像如何缩放以及如何在视口内定位。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"保持宽高比例"}),"： ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"}),"属性允许你保持图像的宽高比例。它可以确保图像在调整大小时保持其原始比例，以避免图像变形。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"meet"})})," ",(0,c.jsx)(n.strong,{children:"和"})," ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"slice"})})," ",(0,c.jsx)(n.strong,{children:"选项"}),"： ",(0,c.jsx)(n.code,{children:"meet"})," 表示将图像缩放以使其完全适应视口，并且保持图像的宽高比例，类似于 CSS 的 ",(0,c.jsx)(n.code,{children:"object-fit"})," 属性中的 ",(0,c.jsx)(n.code,{children:"contain"})," 值。",(0,c.jsx)(n.code,{children:"slice"})," 则表示将图像缩放以覆盖整个视口，即使需要裁剪图像以适应视口，也保持图像的宽高比例，类似于 CSS 的 ",(0,c.jsx)(n.code,{children:"object-fit"})," 属性中的 ",(0,c.jsx)(n.code,{children:"cover"}),"值。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"定位"}),"： ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 还可以控制图像在视口中的定位。它可以决定图像在视口内的水平和垂直位置。你可以通过将 ",(0,c.jsx)(n.code,{children:"none"}),"、",(0,c.jsx)(n.code,{children:"xMinYMin"}),"、",(0,c.jsx)(n.code,{children:"xMidYMin"}),"、",(0,c.jsx)(n.code,{children:"xMaxYMin"}),"、",(0,c.jsx)(n.code,{children:"xMinYMid"}),"、",(0,c.jsx)(n.code,{children:"xMidYMid"}),"、",(0,c.jsx)(n.code,{children:"xMaxYMid"}),"、",(0,c.jsx)(n.code,{children:"xMinYMax"}),"、",(0,c.jsx)(n.code,{children:"xMidYMax"})," 或 ",(0,c.jsx)(n.code,{children:"xMaxYMax"})," 中的一个值 与 ",(0,c.jsx)(n.code,{children:"meet"})," 或 ",(0,c.jsx)(n.code,{children:"slice"})," 组合使用，来控制图像的位置。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["简单地说，",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性决定了如何对引用的图像（",(0,c.jsx)(n.code,{children:"<image>"})," 元素引入的图像）进行缩放和定位，以适应从“定位矩形”和 ",(0,c.jsx)(n.code,{children:"object-fit"})," 和 ",(0,c.jsx)(n.code,{children:"object-position"})," 属性确定的具体对象大小。应用此属性的结果定义了用于实际图像渲染的图像渲染矩形。"]}),"\n",(0,c.jsxs)(n.p,{children:["简而言之，",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性决定了如何对引用的图像（即通过 ",(0,c.jsx)(n.code,{children:"<image>"}),' 元素引入的图像）进行缩放和定位，以适应由"定位矩形"和 ',(0,c.jsx)(n.code,{children:"object-fit"})," 与 ",(0,c.jsx)(n.code,{children:"object-position"})," 属性确定的具体对象大小。应用此属性的结果定义了用于实际图像渲染的图像渲染矩形。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性只有满足一定条件时，才于 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素引入的图像才会生效的。即，"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 计算是在确定具体对象大小之后应用的，仅在该大小与嵌入图像的固有宽高比不匹配时才生效。如果使用了 ",(0,c.jsx)(n.code,{children:"object-fit"})," 的值确保了具体对象大小与固有宽高比匹配（即除默认的 ",(0,c.jsx)(n.code,{children:"fill"})," 以外的任何值），那么 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 的值将不起作用；图像渲染矩形将是在使用 CSS 进行缩放和定位时确定的。因此，",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性可以安全地作为大多数 ",(0,c.jsx)(n.code,{children:"object-fit"})," 和 ",(0,c.jsx)(n.code,{children:"object-position"})," 值的回退使用；它必须显式地设置为 ",(0,c.jsx)(n.code,{children:"none"})," 才能关闭纵横比控制，而不管 ",(0,c.jsx)(n.code,{children:"object-fit"})," 的值如何。"]}),"\n",(0,c.jsxs)(n.p,{children:["只有在满足特定条件时，",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性才会对 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素引入的图像生效。换句话说， ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 的计算是在确定具体对象大小之后应用的，仅当该大小与嵌入图像的固有宽高比不匹配时才生效。如果使用 ",(0,c.jsx)(n.code,{children:"object-fit"})," 的值确保了具体对象大小与固有宽高比匹配（即除了默认的 ",(0,c.jsx)(n.code,{children:"fill"})," 以外的任何值），那么 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 的值将不起作用；图像渲染矩形将是在使用 CSS 进行缩放和定位时确定的。因此，",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性可以安全地作为大多数 ",(0,c.jsx)(n.code,{children:"object-fit"})," 和 ",(0,c.jsx)(n.code,{children:"object-position"}),"值的备用方案；它必须显式地设置为 ",(0,c.jsx)(n.code,{children:"none"})," 才能关闭宽高比控制，而不管 ",(0,c.jsx)(n.code,{children:"object-fit"})," 的值如何。"]}),"\n",(0,c.jsx)(n.p,{children:"注意，图片的固有宽高比指的是图片原始宽度和高度的比。"}),"\n",(0,c.jsxs)(n.p,{children:["接下来，我们以实际用例来看看，如何利用 ",(0,c.jsx)(n.code,{children:"viewBox"})," 和 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性更好控制 ",(0,c.jsx)(n.code,{children:"<image>"})," 的缩放和位置。换句说，我们将使用这些属性来裁剪、缩放和定位图像，并且作为 CSS 的 ",(0,c.jsx)(n.code,{children:"object-fit"})," 和 ",(0,c.jsx)(n.code,{children:"object-position"})," 属性的备用或替代方案。"]}),"\n",(0,c.jsxs)(n.p,{children:["CSS 提供了多种不同的方式允许你对图片进行裁剪、缩放和定位，使用",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328/section/7199845888997457959#heading-11",target:"_blank",rel:"noopener noreferrer",children:" CSS 的 object-fit 和 object-position"})," 就是其中一种，它们使得你在适应框内裁剪和缩放图像变得轻而易举。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/KKxxZOP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKxxZOP"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"object-position"})," 相对而言更容易理解。你可以使用 ",(0,c.jsx)(n.code,{children:"object-position"})," 来更改图像的默认位置，该属性接受与 ",(0,c.jsx)(n.code,{children:"background-position"})," 类似的值。例如，",(0,c.jsx)(n.code,{children:"object-position: top left"})," 会使图像的顶部边缘与框的顶部边框对齐，并且图像的左边缘与框的左边框对齐。"]}),"\n",(0,c.jsxs)(n.p,{children:["相比之下，",(0,c.jsx)(n.code,{children:"object-fit"})," 稍微复杂一些。它指定了替换元素（例如 ",(0,c.jsx)(n.code,{children:"<img>"}),"）的内容应该如何适应其使用的高度和宽度所建立的框。即使位图图像具有自己的固有尺寸（即图片的原始宽度和高度）以及宽高比（即图片的原始宽高比），你也可以调整其大小以适应 CSS 中定义的任何大小的框。此外，你可以选择是否保持图像的宽高比。这意味着，",(0,c.jsx)(n.code,{children:"object-fit"})," 属性值会根据适应框的宽高比和图片的原始宽高比，找到最适合的方式对图片进行裁剪和缩放。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["注意，其中 ",(0,c.jsx)(n.code,{children:"object-fit"})," 的值为 ",(0,c.jsx)(n.code,{children:"cover"})," 和 ",(0,c.jsx)(n.code,{children:"contain"})," 对图片裁剪与缩放是有一套成熟的计算公式的，有关于这方面的介绍就不在这里展开了，如果你感兴趣的话，可以移步阅读《",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328/section/7199845663143067660#heading-2",target:"_blank",rel:"noopener noreferrer",children:"响应式图片：防止图片的拉伸或挤压"}),"》一文！"]}),"\n",(0,c.jsx)(n.p,{children:"接下来，我们来看看如何使用 SVG 裁剪和缩放图像。"}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 中，由 ",(0,c.jsx)(n.code,{children:"viewBox"})," 定义的用户坐标系统不一定会与 SVG 视口具有相同的宽高比。当 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的宽高比与视口的宽高比不相等时，浏览器需要将 ",(0,c.jsx)(n.code,{children:"viewBox"})," 定位在视口内，类似于上面示例中将图片定位在适应框内的方式。"]}),"\n",(0,c.jsxs)(n.p,{children:["默认情况下，就像使用 ",(0,c.jsx)(n.code,{children:"object-fit"})," 一样，浏览器将 ",(0,c.jsx)(n.code,{children:"viewBox"})," 适应于SVG视口内，使其完全包含在其中，从而使整个 ",(0,c.jsx)(n.code,{children:"viewBox"})," 都在 SVG 视口内可见。"]}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性，你可以更改 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的位置和缩放，从而更改 SVG 的所有内容，就类似于使用 ",(0,c.jsx)(n.code,{children:"object-fit"})," 时更改图像在适应框内的位置和缩放的方式。"]}),"\n",(0,c.jsxs)(n.p,{children:["例如，假设我们有一个正方式的 SVG 视口（宽高比是 ",(0,c.jsx)(n.code,{children:"1:1"}),"）和一个具有不同宽高比的 ",(0,c.jsx)(n.code,{children:"viewBox"})," （例如 ",(0,c.jsx)(n.code,{children:"2:1"}),"）："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="400" height="400" viewBox="0 0 800 600" class="figure">\n    <image href="https://picsum.photos/id/77/3000/1024" x="0" y="0" width="100%" height="100%" />\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上述代码的结果如下图所示。",(0,c.jsx)(n.code,{children:"<image>"})," 元素引入的图像将代表 ",(0,c.jsx)(n.code,{children:"viewBox"})," 在 SVG 视口中的大小和位置。它与下面这个 CSS 应用的 ",(0,c.jsx)(n.code,{children:"object-fit"})," 示例结果是相似的："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<div class="wrapper">\n    <img src="https://picsum.photos/id/77/3000/1024" alt="">\n</div>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".wrapper {\n    outline: 1px dashed #fff;\n    width: 400px;\n    aspect-ratio: 1;\n    display: grid;\n    place-content: center;\n    \n    img {\n        display: block;\n        width: 100%;\n        object-position: center;\n        object-fit: contain;\n    }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/mdgRBJm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdgRBJm"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["现在，使用 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," ，你可以更改 ",(0,c.jsx)(n.code,{children:"viewBox"})," 在视口中的位置以及其大小（或缩放），类似于我们在 CSS 中使用 ",(0,c.jsx)(n.code,{children:"object-fit"})," 和 ",(0,c.jsx)(n.code,{children:"object-position"})," 更改图像位置和缩放方式。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性值由 ",(0,c.jsx)(n.code,{children:"<align>"})," 和 ",(0,c.jsx)(n.code,{children:"<meetOrSlice>"})," 两个参数组成，其中 ",(0,c.jsx)(n.code,{children:"<align>"})," 参数有 ",(0,c.jsx)(n.code,{children:"19"})," 个值，包括 ",(0,c.jsx)(n.code,{children:"none"})," ，除 ",(0,c.jsx)(n.code,{children:"none"})," 之外的值将会使 ",(0,c.jsx)(n.code,{children:"viewBox"})," 在保持宽高比进行缩放以填充 SVG 视口。其中 ",(0,c.jsx)(n.code,{children:"<align>"})," 的值为 ",(0,c.jsx)(n.code,{children:"none"})," 时，有点类似于 ",(0,c.jsx)(n.code,{children:"object-fit: fill"})," 的效果。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性的 ",(0,c.jsx)(n.code,{children:"<meetOrSlice>"})," 代表缩放 ",(0,c.jsx)(n.code,{children:"viewBox"})," ，并具有两个值：",(0,c.jsx)(n.code,{children:"meet"})," 或 ",(0,c.jsx)(n.code,{children:"slice"})," 。其中 ",(0,c.jsx)(n.code,{children:"meet"})," 具有与 ",(0,c.jsx)(n.code,{children:"object-fit: contain"})," （或 ",(0,c.jsx)(n.code,{children:"background-size: contain"}),"）相同的效果，而 ",(0,c.jsx)(n.code,{children:"slice"})," 具有与 ",(0,c.jsx)(n.code,{children:"object-fit: cover"})," （或 ",(0,c.jsx)(n.code,{children:"background-size: cover"}),"）相同的效果。前者将保持 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的宽高比，并将其适应到 SVG 视口内，以便完全可见。这是默认行为。而 ",(0,c.jsx)(n.code,{children:"slice"})," 将缩放 ",(0,c.jsx)(n.code,{children:"viewBox"})," ，同时保持其宽高比，以覆盖整个 SVG 视口区域，即使这意味着切掉一些内容（图片会可能会被裁剪）。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="300px" height="300px" viewBox="0 0 579 375" preserveAspectRatio="xMidYMid meet" class="figure">\n    <image href="https://s3-us-west-2.amazonaws.com/s.cdpn.io/9674/photo-1501366062246-723b4d3e4eb6.jpg" x="0" y="0" width="100%" height="100%" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/OJGWxjv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJGWxjv"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["正如你所看到的，几乎任何 ",(0,c.jsx)(n.code,{children:"object-fit"})," 和 ",(0,c.jsx)(n.code,{children:"object-position"})," 值的组合都可以使用 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 在 ",(0,c.jsx)(n.code,{children:"viewBox"}),"上复制。更有意思的是，你可以使用下面这段 SVG 代码作为 ",(0,c.jsx)(n.code,{children:"object-fit"})," 和 ",(0,c.jsx)(n.code,{children:"object-position"})," 的替代方案："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="x" height="y" viewBox="0 0 imgX imgY" preserveAspectRatio="<align>   <meetOrSlice>” aria-labelledby="title"  aria-role="img">\n     <title id="title"> img alt here </title>\n      <image xlink:href="..." width="100%" height=“100%” >\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["其中 ",(0,c.jsx)(n.code,{children:"imgX"})," 和 ",(0,c.jsx)(n.code,{children:"imgY"})," 是要裁剪和缩放的图像的尺寸，",(0,c.jsx)(n.code,{children:"<align>"})," 和 ",(0,c.jsx)(n.code,{children:"<meetOrslice>"})," 是确定图像在 SVG 包装器内的缩放和位置的两个关键字。"]}),"\n",(0,c.jsxs)(n.p,{children:["SVG 的 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性除了可以应用于 ",(0,c.jsx)(n.code,{children:"<svg>"})," 元素上之外，它也可以直接应用于 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素上。但用于 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素时需要知道。对于通过 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素嵌入的 SVG 图像，SVG 图像中根元素（",(0,c.jsx)(n.code,{children:"<svg>"})," 元素 ）上的 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性必须被忽略，并且视为具有 ",(0,c.jsx)(n.code,{children:"none"})," 值。这样可以确保 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素上引用的 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性能够按预期生效，即使它是 ",(0,c.jsx)(n.code,{children:"none"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["当 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素上的 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性值不是 ",(0,c.jsx)(n.code,{children:"none"})," 时，根据 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素的属性确定的图像渲染矩形将完全匹配嵌入 SVG 的固有宽高比。因此，通常情况下忽略来自嵌入 SVG 的 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性不会产生任何影响。唯一的例外是，如果图像的宽高比是根据宽度和高度属性的绝对值来确定的，而这些值与其 ",(0,c.jsx)(n.code,{children:"viewBox"})," 的纵横比不匹配。这种情况比较罕见，建议开发者尽量避免出现，因为可能会引发各种问题。"]}),"\n",(0,c.jsxs)(n.h2,{id:"响应式-svg-图像叠加",children:["响应式 SVG 图像叠加",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#响应式-svg-图像叠加",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"“响应式 SVG 图像叠加”是一种利用 SVG 技术在图像上创建叠加层的技术，以适应不同的屏幕尺寸或视口大小，确保设计的响应式。这种方法允许根据可用空间动态调整 SVG 元素，为不同设备提供视觉上吸引人且灵活的用户体验。"}),"\n",(0,c.jsx)(n.p,{children:"在这里，“响应式”意味着 SVG 叠加层根据不同的屏幕尺寸或分辨率动态调整其布局、大小和位置，确保在从桌面端到智能手机和平板电脑等各种设备上的最佳显示。"}),"\n",(0,c.jsx)(n.p,{children:"通过利用 SVG 的可扩展性和灵活性，开发人员可以创建具有复杂设计或交互式元素的叠加层，使其能够无缝地适应视觉环境的变化。这种技术通过提供视觉上吸引人且功能齐全的叠加层，增强了用户界面和用户体验，使其在不同设备和屏幕尺寸下仍然易于访问。"}),"\n",(0,c.jsx)(n.p,{children:"来看一个简单的示例："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<div id="greenhouse">\n    <svg id="lines" viewBox="0 0 1280 1280" preserveAspectRatio="xMinYMin meet">\n        <path stroke="#d4ffde" stroke-width="3" fill="none" d="M 130,820 L 130,320 l 50,0 " />\n        <path stroke="#d4ffde" stroke-width="3" fill="none" d="M 620,820 L 620,520 l -230,0 " />\n        <path stroke="#d4ffde" stroke-width="3" fill="none" d="M 1100,820 L 1100,380 l -290,0 " />\n    </svg>\n    \n    <svg viewBox="0 0 1280 720" preserveAspectRatio="xMinYMin meet">\n        <image width="1280" height="720" xlink:href="https://dkli3tbfz4zj3.cloudfront.net/all/202006_SaladDays/images/greenhouse.jpg">\n        </image>\n        <circle cx="220" cy="320" r="40" stroke="#d4ffde" stroke-width="3" fill="none" />\n        <circle cx="320" cy="520" r="70" stroke="#d4ffde" stroke-width="3" fill="none" />\n        <circle cx="750" cy="380" r="60" stroke="#d4ffde" stroke-width="3" fill="none" />\n    </svg>\n    \n    <div id="greenhouse-details">\n        <div class="narrow-text">\n          <p>Whip up a delicious salad</p>\n        </div>\n        <div class="narrow-text">\n          <p>Cuddle up to Marguerit’s Snow Stalker companion</p>\n        </div>\n        <div class="narrow-text">\n          <p>Learn how to farm new, unusual plants</p>\n        </div>\n    </div>\n</div>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    #greenhouse {\n        position: relative;\n        width: 100%;\n        overflow: hidden;\n        color: #333;\n        \n        svg {\n            position: absolute;\n            top: 0;\n            left: 0;\n        }\n    }\n    \n    #lines {\n        z-index: 3;\n    }\n    \n    #greenhouse-details {\n        display: flex;\n        margin-top: 60%;\n        flex-wrap: wrap;\n        justify-content: center;\n    }\n    \n    .narrow-text {\n        background-color: #d4ffde;\n        padding: 3% 5%;\n        margin: 3%;\n        flex-basis: 25%;\n        \n        @media only screen and (width <= 480px) {\n            flex-basis: 100%;\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/qBwRPzj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBwRPzj"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"总的来说，响应式 SVG 图像叠加提供了一种多功能解决方案，能够有效地响应现代 Web 设计的多样化需求，从而创建引人入胜的视觉体验。"}),"\n",(0,c.jsxs)(n.h2,{id:"带有滤镜效果的-image",children:["带有滤镜效果的 image",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#带有滤镜效果的-image",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 中，你可以将 SVG 的滤镜效果直接应用于 ",(0,c.jsx)(n.code,{children:"<image>"})," 引入的图片上，为图片创建出与众不同的视觉效果："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1920 1024" preserveAspectRatio="xMinYMin slice"class="figure">\n    <defs>\n       <filter id="filter" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="linearRGB">\n           <feTurbulence type="turbulence" baseFrequency="0.01 0.05" numOctaves="2" seed="2" stitchTiles="noStitch" result="turbulence"/>\n           <feDisplacementMap in="SourceGraphic" in2="turbulence" scale="20" xChannelSelector="G" yChannelSelector="A" result="displacementMap"/>\n        </filter>\n    </defs>\n    \n     <image filter="url(#filter)" href="https://picsum.photos/id/188/1920/1024" width="100%" height="100%" x="0" y="0" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/vYMgWXa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYMgWXa"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"考虑图片的可访问性",children:["考虑图片的可访问性",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#考虑图片的可访问性",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["HTML 的 ",(0,c.jsx)(n.code,{children:"<img>"})," 元素有一个 ",(0,c.jsx)(n.code,{children:"alt"})," 属性，它能很好的被诸如屏幕阅读器这种辅助技术识别，使得一些残障人士也能理解好的理解 ",(0,c.jsx)(n.code,{children:"<img>"})," 元素引入的图片代表什么。不幸的是，SVG 的 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素并不像 ",(0,c.jsx)(n.code,{children:"<img>"})," 元素有一个",(0,c.jsx)(n.code,{children:"alt"})," 属性。到目前为止，为了使 SVG 的 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素引入的图像具有更好的可访问性，通常会将 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素与 ",(0,c.jsx)(n.code,{children:"<title>"})," 和 ",(0,c.jsx)(n.code,{children:"<desc>"})," 等元素结合起来使用。例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="300px" height="300px" viewBox="0 0 579 375" preserveAspectRatio="xMidYMid meet">\n    <g>\n        <title>画家的双手</title>\n        <image xlink:href="./path/to/painter.jpg" x="0" y="0" width="100%" height="100%" />\n    </g>  \n</svg>\n\n\x3c!-- 或者 --\x3e\n<svg width="300px" height="300px" viewBox="0 0 579 375" preserveAspectRatio="xMidYMid meet">\n    <g>\n        <title>画家的双手</title>\n        <desc>这是一双沾满颜料的画家的双手</desc>\n        <image xlink:href="./path/to/painter.jpg" x="0" y="0" width="100%" height="100%" />\n    </g>  \n</svg>\n'})}),"\n",(0,c.jsxs)(n.h2,{id:"小结",children:["小结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["通过这节课的内容，我们了解到 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素在 SVG 中是至关重要的。通过掌握如何使用 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素，在 SVG 图形中引入和处理外部图像资源，你可以为你的项目增添更丰富、更生动的视觉效果。不仅如此，",(0,c.jsx)(n.code,{children:"<image>"})," 元素的灵活性和可扩展性使得你可以根据需要对图像进行缩放、定位和组合，从而实现各种复杂的图像处理效果。"]}),"\n",(0,c.jsxs)(n.p,{children:["尽管 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素的使用可能会略显复杂，但一旦掌握了其基本属性和用法，你就能够在 SVG 图形中轻松地引入外部图像，并根据需求进行灵活处理。无论是网页设计、数据可视化还是其他领域，掌握 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素都将为你的项目增添更多可能性和创造力。"]}),"\n",(0,c.jsxs)(n.p,{children:["希望这节课能够帮助你更好地理解 SVG 图形元素中的 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素，并能够运用它在你的项目中创造出令人惊叹的图像效果。SVG 的学习之路是一个充满创意和探索的旅程，相信通过不断地实践和尝试，你将能够运用 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素创造出令人赞叹的视觉体验。"]})]})}function M(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(B,{...e})}):B(e)}let R=M;M.__RSPRESS_PAGE_META={},M.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F9-%E5%88%9D%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E5%9B%BE%E5%83%8F%E5%85%83%E7%B4%A0.md"]={toc:[{text:"SVG 图像元素的概述",id:"svg-图像元素的概述",depth:2},{text:"SVG 图像元素的基本应用",id:"svg-图像元素的基本应用",depth:2},{text:"SVG 的 viewBox 属性对 image 元素的影响",id:"svg-的-viewbox-属性对-image-元素的影响",depth:2},{text:"SVG 的 preserveAspectRatio 属性对 image 元素的影响",id:"svg-的-preserveaspectratio-属性对-image-元素的影响",depth:2},{text:"响应式 SVG 图像叠加",id:"响应式-svg-图像叠加",depth:2},{text:"带有滤镜效果的 image",id:"带有滤镜效果的-image",depth:2},{text:"考虑图片的可访问性",id:"考虑图片的可访问性",depth:2},{text:"小结",id:"小结",depth:2}],title:"9-初级篇：SVG 图像元素",headingTitle:"9-初级篇：SVG 图像元素",frontmatter:{}}}}]);