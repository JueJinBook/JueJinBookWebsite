"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["1668"],{737949:function(n,e,s){s.r(e),s.d(e,{default:()=>c});var r=s(552676),t=s(740453);function i(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",ol:"ol",li:"li",strong:"strong",h2:"h2",ul:"ul",pre:"pre",img:"img",blockquote:"blockquote",hr:"hr"},(0,t.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"4进阶篇-01使用-npm-script-的钩子",children:["4进阶篇 01：使用 npm script 的钩子",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4进阶篇-01使用-npm-script-的钩子",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["为了方便开发者自定义，npm script 的设计者为命令的执行增加了类似生命周期的机制，具体来说就是 ",(0,r.jsx)(e.code,{children:"pre"})," 和 ",(0,r.jsx)(e.code,{children:"post"})," 钩子脚本。这种特性在某些操作前需要做检查、某些操作后需要做清理的情况下非常有用。"]}),"\n",(0,r.jsx)(e.p,{children:"举例来说，运行 npm run test 的时候，分 3 个阶段："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"检查 scripts 对象中是否存在 pretest 命令，如果有，先执行该命令；"}),"\n",(0,r.jsx)(e.li,{children:"检查是否有 test 命令，有的话运行 test 命令，没有的话报错；"}),"\n",(0,r.jsx)(e.li,{children:"检查是否存在 posttest 命令，如果有，执行 posttest 命令；"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["到目前为止我们所覆盖的前端工作流包含了代码检查和测试自动化运行环节，",(0,r.jsx)(e.strong,{children:"衡量测试效果的重要指标是测试覆盖率"}),"，而收集覆盖率也非常的简单，",(0,r.jsx)(e.strong,{children:"下面逐步讲解如何把代码检查、测试运行、覆盖率收集这些步骤串起来"}),"。"]}),"\n",(0,r.jsxs)(e.h2,{id:"改造-test-命令",children:["改造 test 命令",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#改造-test-命令",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"首先，我们基于钩子机制对现有的 scripts 做以下 3 点重构，把代码检查和测试运行串起来："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"增加简单的 lint 命令，并行运行所有的 lint 子命令；"}),"\n",(0,r.jsx)(e.li,{children:"增加 pretest 钩子，在其中运行 lint 命令；"}),"\n",(0,r.jsxs)(e.li,{children:["把 test 替换为更简单的 ",(0,r.jsx)(e.code,{children:"mocha tests/"}),"；"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"代码 diff 如下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-patch",children:'diff --git a/package.json b/package.json\nindex 8f67810..d297f2e 100644\n--- a/package.json\n+++ b/package.json\n@@ -4,13 +4,17 @@\n+    "lint": "npm-run-all --parallel lint:*",\n     "lint:js": "eslint *.js",\n     "lint:js:fix": "npm run lint:js -- --fix",\n     "lint:css": "stylelint *.less",\n     "lint:json": "jsonlint --quiet *.json",\n     "lint:markdown": "markdownlint --config .markdownlint.json *.md",\n-    "mocha": "mocha tests/",\n-    "test": "# 运行所有代码检查和单元测试 \\n    npm-run-all --parallel lint:* mocha"\n+    "pretest": "npm run lint",\n+    "test": "mocha tests/",\n'})}),"\n",(0,r.jsx)(e.p,{children:"当我们运行 npm test 的时候，会先自动执行 pretest 里面的 lint，实际输出如下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2017/11/29/160052621691a0b7?w=846&h=848&f=png&s=103472",alt:""})}),"\n",(0,r.jsxs)(e.h2,{id:"增加覆盖率收集",children:["增加覆盖率收集",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#增加覆盖率收集",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"接下来，我们把运行测试和覆盖率收集串起来，具体做法是：增加覆盖率收集的命令，并且覆盖率收集完毕之后自动打开 html 版本的覆盖率报告。要实现目标，我们需要引入两个新工具："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["覆盖率收集工具 ",(0,r.jsx)(e.a,{href:"https://github.com/istanbuljs/nyc",target:"_blank",rel:"noopener noreferrer",children:"nyc"}),"，是覆盖率收集工具 ",(0,r.jsx)(e.a,{href:"https://istanbul.js.org",target:"_blank",rel:"noopener noreferrer",children:"istanbul"})," 的命令行版本，istanbul 支持生成各种格式的覆盖率报告，我已经使用多年；"]}),"\n",(0,r.jsxs)(e.li,{children:["打开 html 文件的工具 ",(0,r.jsx)(e.a,{href:"https://github.com/sindresorhus/opn-cli",target:"_blank",rel:"noopener noreferrer",children:"opn-cli"}),"，是能够打开任意程序的工具 ",(0,r.jsx)(e.a,{href:"https://github.com/sindresorhus/opn",target:"_blank",rel:"noopener noreferrer",children:"opn"})," 的命令行版本，作者是\b前端社区非常高产的 ",(0,r.jsx)(e.a,{href:"https://github.com/sindresorhus",target:"_blank",rel:"noopener noreferrer",children:"Sindre Sorhus"}),"，它在 npm 上发布了超过 1000 个包，并且质量都很不错。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"使用如下命令安装依赖："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"npm i nyc opn-cli -D\n"})}),"\n",(0,r.jsx)(e.p,{children:"然后在 package.json 增加 nyc 的配置，告诉 nyc 该忽略哪些文件。最后是在 scripts 中新增 3 条命令："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"precover，收集覆盖率之前把之前的覆盖率报告目录清理掉；"}),"\n",(0,r.jsx)(e.li,{children:"cover，直接调用 nyc，让其生成 html 格式的覆盖率报告；"}),"\n",(0,r.jsx)(e.li,{children:"postcover，清理掉临时文件，并且在浏览器中预览覆盖率报告；"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"具体 diff 如下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-patch",children:'diff --git a/package.json b/package.json\nindex 8f67810..d297f2e 100644\n--- a/package.json\n+++ b/package.json\n@@ -4,13 +4,17 @@\n   scripts: {\n+    "precover": "rm -rf coverage",\n+    "cover": "nyc --reporter=html npm test",\n+    "postcover": "rm -rf .nyc_output && opn coverage/index.html"\n   },\n@@ -22,7 +26,15 @@\n   "devDependencies": {\n     "npm-run-all": "^4.1.2",\n+    "nyc": "^11.3.0",\n+    "opn-cli": "^3.1.0",\n     "stylelint": "^8.2.0",\n     "stylelint-config-standard": "^17.0.0"\n+  },\n+  "nyc": {\n+    "exclude": [\n+      "**/*.spec.js",\n+      ".*.js"\n+    ]\n   }\n }\n'})}),"\n",(0,r.jsx)(e.p,{children:"改完之后，我们可以直接运行 npm run cover，运行的详细截图如下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2017/11/29/16005264d5d3aef6?w=921&h=1112&f=png&s=147056",alt:""})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"TIP#7"}),"：到目前为止，我们的工作流中已经包含代码检查、测试运行、覆盖率收集、覆盖率查看等功能，你是不是可以用来改进下自己的工作流呢？"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["本节用到的代码见 ",(0,r.jsx)(e.a,{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/04-pre-and-post-hooks",target:"_blank",rel:"noopener noreferrer",children:"GitHub"}),"，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 ",(0,r.jsx)(e.code,{children:"04-pre-and-post-hooks"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(i,{...n})}):i(n)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E7%94%A8%20npm%20script%20%E6%89%93%E9%80%A0%E8%B6%85%E6%BA%9C%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%2F4%E8%BF%9B%E9%98%B6%E7%AF%87%2001%EF%BC%9A%E4%BD%BF%E7%94%A8%20npm%20script%20%E7%9A%84%E9%92%A9%E5%AD%90.md"]={toc:[{text:"改造 test 命令",id:"改造-test-命令",depth:2},{text:"增加覆盖率收集",id:"增加覆盖率收集",depth:2}],title:"4进阶篇 01：使用 npm script 的钩子",headingTitle:"4进阶篇 01：使用 npm script 的钩子",frontmatter:{}}}}]);