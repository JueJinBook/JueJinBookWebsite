"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["10461"],{338246:function(e,n,s){s.r(n),s.d(n,{default:()=>h});var l=s(552676),r=s(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",ul:"ul",li:"li",hr:"hr",h2:"h2",pre:"pre",code:"code"},(0,r.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.h1,{id:"24-实战14nodejs简单入门",children:["24 实战14：Node.js简单入门",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24-实战14nodejs简单入门",children:"#"})]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"凡是可以用 JavaScript 来写的应用，终将都会用 JavaScript 来写。—— Atwood 定律"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:'Node.js 简称"服务端 JavaScript "，是基于谷歌 v8 引擎的 js 运行环境，可以让 JavaScript 在服务器端执行。相比于后端人员，JavaScript 对于前端来说再熟悉不过了，入门还是相对简单的。这章包含的内容如下：'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"安装 Node.js 及相关配置"}),"\n",(0,l.jsx)(n.li,{children:"常用的应用模块"}),"\n",(0,l.jsx)(n.li,{children:"简易 HTTP 服务器和自定义模块"}),"\n",(0,l.jsx)(n.li,{children:"事件驱动"}),"\n",(0,l.jsx)(n.li,{children:"常见的状态码"}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h2,{id:"安装-nodejs-及相关配置",children:["安装 Node.js 及相关配置",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装-nodejs-及相关配置",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["可从 Node.js ",(0,l.jsx)(n.a,{href:"http://nodejs.cn/download/",target:"_blank",rel:"noopener noreferrer",children:"官网"}),",下载对应平台的 Node 版本进行安装，一路完成即可。"]}),"\n",(0,l.jsx)(n.p,{children:"完成后在命令行界面输入以下两个命令，检验是否安装成功："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"# node -v //查看node版本\n# npm -v  //查看npm版本\n"})}),"\n",(0,l.jsx)(n.p,{children:"使用 npm 命令安装模块"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"npm install <Module Name>\n"})}),"\n",(0,l.jsx)(n.p,{children:"你也可以使用 yarn 命令安装模块"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"yarn add <Module Name>\n"})}),"\n",(0,l.jsx)(n.p,{children:"关于如何安装 Node.js，这里就不赘述了，如果打印报错，请自行百度谷歌。"}),"\n",(0,l.jsxs)(n.h2,{id:"常用的应用模块",children:["常用的应用模块",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常用的应用模块",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"Node.js 提供了各种丰富的 JavaScript 模块库（自带的+第三方），极大简化了使用 Node.js 来扩展Web应用程序的开发。"}),"\n",(0,l.jsx)(n.p,{children:"Node Package Manager，简称 npm，是一个基于 Node.js 的包管理器，也是整个 Node.js 社区最流行、支持的第三方模块最多的包管理器。通过 npm，方便直接下载引用第三方发布模块，提高开发效率。"}),"\n",(0,l.jsx)(n.p,{children:"常用内置模块有："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"http"}),"\n",(0,l.jsx)(n.li,{children:"path"}),"\n",(0,l.jsx)(n.li,{children:"url"}),"\n",(0,l.jsx)(n.li,{children:"events"}),"\n",(0,l.jsx)(n.li,{children:"fs"}),"\n",(0,l.jsx)(n.li,{children:"crypto加密"}),"\n",(0,l.jsx)(n.li,{children:"os"}),"\n",(0,l.jsx)(n.li,{children:"process"}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"简易http服务器和自定义模块",children:["简易HTTP服务器和自定义模块",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简易http服务器和自定义模块",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"Node.js 基于 CommonJS 规范，主要分为模块定义、模块引用和模块标识，但 Node.js 在实现中并非完全按照 CommonJS 规范实现，而是对模块规范进行了一定的取舍。简单记住就是：引入模块用 require，输出模块用 module.exports。"}),"\n",(0,l.jsx)(n.p,{children:"网上有很多教程都会教你把所有的逻辑都放进一个用 Node.js 写的基础 HTTP 服务器里。但是如果我想加入更多的内容，同时还想保持代码的可读性呢？"}),"\n",(0,l.jsx)(n.p,{children:"实际上，只要把不同功能的代码放入不同的模块中，保持代码分离还是相当简单的。"}),"\n",(0,l.jsx)(n.p,{children:"让我们先从服务器模块开始。在项目的根目录下创建一个叫 app.js 的文件，并写入以下代码（记得动手敲起来哦）："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"const http = require('http');\nconst url = require('url'); //引用内置模块url  \nhttp.createServer(function(req, res) {\n	res.writeHead(200, {\n   'Content-Type': 'text/plain'\n	}); //设置头信息  \n	let pathname = url.parse(req.url).pathname; //把请求网址交给url 对象处理  \n	let bodyStr = \"\"; //定义一个变量，用来存储要输出的内容  \n	if (pathname === \"/\") { //如果是首页   \n		bodyStr = 'Hello Uniapp\\n';\n	} else {\n		bodyStr = 'Happy Uniapp\\n'; //如果是其他路径   \n	}\n	res.end(bodyStr); //输出内容   \n}).listen(3000); //绑定端口 \nconsole.log('Server running at http://localhost:3000/'); //控制台输出提示\n"})}),"\n",(0,l.jsx)(n.p,{children:"然后在终端输入脚本："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"node app.js\n"})}),"\n",(0,l.jsxs)(n.p,{children:["接下来，打开浏览器访问 ",(0,l.jsx)(n.code,{children:"http://localhost:3000/"}),"，你会看到页面写着",(0,l.jsx)(n.code,{children:"Hello Uniapp"}),"，如果是 ",(0,l.jsx)(n.code,{children:"http://localhost:3000/happy"}),"，会显示",(0,l.jsx)(n.code,{children:"Happy Uniapp"}),"。"]}),"\n",(0,l.jsxs)(n.p,{children:["就这么简单，你已经启动了服务器。只要敲入键盘",(0,l.jsx)(n.code,{children:"Ctrl+C"}),"就可以停止服务。"]}),"\n",(0,l.jsx)(n.p,{children:"接下来创建一个自定义模块 testA.js 文件，并写下如下代码："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'function helloUniapp(){\n	console.log("Hello Uniapp");\n}\n\nmodule.exports = helloUniapp;\n'})}),"\n",(0,l.jsxs)(n.p,{children:["我们在testA模块里面声明了一个",(0,l.jsx)(n.code,{children:"helloUniapp"}),"函数，并且通过 module.exports 对外暴露该函数，在需要地方通过引入该模块，就可以使用",(0,l.jsx)(n.code,{children:"helloUniapp"}),"函数方法。"]}),"\n",(0,l.jsx)(n.p,{children:"我们再写一个 app.js 文件，引入该模块并使用"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"const helloUniapp = require('./testA');	//引入testA模块\n\nhelloUniapp()  		// 执行showAge()函数  输出`Hello Uniapp`\n"})}),"\n",(0,l.jsx)(n.p,{children:"在引用时注意引用的路径，上面两个文件是在同一目录下，所以用的相对路径。"}),"\n",(0,l.jsxs)(n.p,{children:["在上面看到例如",(0,l.jsx)(n.code,{children:'const http = require("http")'}),"的方式引用，这时 Node.js 会依次在内置模块、全局模块（即node_modules文件夹）下查找",(0,l.jsx)(n.code,{children:"http"}),"模块，如果查找不到，就会报错！"]}),"\n",(0,l.jsxs)(n.h2,{id:"事件驱动",children:["事件驱动",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#事件驱动",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"Node.js 设计天生就是基于事件驱动。事件驱动可以理解为发布/订阅模式，当进来的一个新的请求的时候，请求将会被压入队列中，因为单线程关系，会通过一个循环来检测队列中的事件状态变化，如果检测到有状态变化的事件，那么就执行该事件对应的回调函数。"}),"\n",(0,l.jsx)(n.p,{children:"看个栗子直观理解："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// 引入 events 模块\nconst events = require('events');\n// 创建 eventEmitter 对象\nconst eventEmitter = new events.EventEmitter();\n\n// 绑定 helloAction 事件\neventEmitter.on('helloAction', function(d){\n   console.log(d); // 'Hello Uniapp。'\n});\n\n// 触发 helloAction 事件 \neventEmitter.emit('helloAction', 'Hello Uniapp。');\n\nconsole.log(\"程序执行完毕。\");\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"Hello Uniapp。\n程序执行完毕。\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"常见的状态码",children:["常见的状态码",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见的状态码",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"200 OK 服务器成功处理了请求"}),"\n",(0,l.jsx)(n.li,{children:"301/302 Moved Permanently（重定向）请求的URL已移走。Response中应该包含一个Location URL, 说明资源现在所处的位置"}),"\n",(0,l.jsx)(n.li,{children:"304 Not Modified（未修改）客户端的缓存资源是最新的，使用客户端缓存"}),"\n",(0,l.jsx)(n.li,{children:"400 Bad Request 传参有误"}),"\n",(0,l.jsx)(n.li,{children:"403 Forbidden 禁止访问，一般是没有权限"}),"\n",(0,l.jsx)(n.li,{children:"404 Not Found 未找到资源"}),"\n",(0,l.jsx)(n.li,{children:"500 Internal Server Error服务器内部错误"}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"小结",children:["小结",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"本章讲了 Node.js 的几个基础知识：安装与配置，常用模块，HTTP服务，自定义模块和状态码，下一章会基于 Koa.js 框架实现简单的 Restful Api。"}),"\n",(0,l.jsx)(n.p,{children:"关于 Node.js 相关知识远远不止这些，网上专门讲 node.js 的教程和书籍有很多，我推荐《深入浅出Node.js》，可以反复看，讲得非常细致。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["Uniapp%20%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6%2F24%20%E5%AE%9E%E6%88%9814%EF%BC%9ANode.js%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8.md"]={toc:[{text:"安装 Node.js 及相关配置",id:"安装-nodejs-及相关配置",depth:2},{text:"常用的应用模块",id:"常用的应用模块",depth:2},{text:"简易HTTP服务器和自定义模块",id:"简易http服务器和自定义模块",depth:2},{text:"事件驱动",id:"事件驱动",depth:2},{text:"常见的状态码",id:"常见的状态码",depth:2},{text:"小结",id:"小结",depth:2}],title:"24 实战14：Node.js简单入门",headingTitle:"24 实战14：Node.js简单入门",frontmatter:{}}}}]);