"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["35337"],{808112:function(e,n,s){e.exports=s.p+"static/image/a47907e7c6907a6045b7d164f5171070.ec863777.gif"},506688:function(e,n,s){e.exports=s.p+"static/image/afc7fd9e06ccd488b53c9cb83c6f94fd.c4925776.gif"},116753:function(e,n,s){s.r(n),s.d(n,{default:()=>T});var t=s(552676),i=s(740453);let a=s.p+"static/image/76dad5e511d348b9d445fc86b9aca6ea.ac75c583.gif",c=s.p+"static/image/57b9625196b64730b0ec9bef364a5042.abe286a1.webp",l=s.p+"static/image/6ef9c46b1d8758913d196c17c319932b.ede90c72.webp",r=s.p+"static/image/ca1eb392624555a30604bf3dc71fb1c8.39cce205.gif",d=s.p+"static/image/946174529e1ca5420fab24931821a7d3.800e302d.gif",o=s.p+"static/image/9a3e40be7a9d94e6dc9d2c26c7151267.266e6ff2.webp",p=s.p+"static/image/7003eb5c37ab2b900393460ef5b80ea5.1753ce82.gif",m=s.p+"static/image/f3c1390797ed8d02c6fdc50727a4d602.8496c7a9.webp";var x=s(506688);let f=s.p+"static/image/0a07979a1ab868a738daec6592093d7e.49b983de.webp",g=s.p+"static/image/0f70c756913aa9c51ed7dc0c3299e95c.c4f6fe9a.gif",h=s.p+"static/image/8cdeec7b5706143a06ff8d6650c74013.2d89fa4e.gif",u=s.p+"static/image/c6d8211350a90cda6a7c5fe1234c4849.38bbdcbd.webp",j=s.p+"static/image/6389f8106ddae01a32c3e9ca990459cd.b81198f0.webp",b=s.p+"static/image/7a96256024c191967864c560dad9d13e.d97ec638.webp",N=s.p+"static/image/4e73b3a3303452f3f9004ab80ef9c3aa.e5622260.webp",F=s.p+"static/image/26d0d330667677d9fdd269832cb478e2.ab472cbb.webp",v=s.p+"static/image/4e22aa643d96645c75c45de45cf9e186.a8001c22.webp",E=s.p+"static/image/1ca21c70732091623b9c7df8ee862ae3.956fade0.webp",P=s.p+"static/image/989f5c48ceaa44ab5d7f29600d1fc235.09080c7e.webp",A=s.p+"static/image/0257551f88e6539bf10f98fbbf295f34.e8a8838a.webp",C=s.p+"static/image/d78aa6375ce5ca70cdf4aed608915985.94221c1a.webp";var y=s(808112);let w=s.p+"static/image/4636f8ba7f6edda723e9766a91e1f0c5.4b05f977.webp",_=s.p+"static/image/c682c061c676ee1defc9b4db6f3684a0.f25b7ad8.webp",k=s.p+"static/image/6ff973fc2e2ffea8b2c505d7f642c086.59107eed.webp",M=s.p+"static/image/371b2b3bfdc35789a9ea3b7cad80c9c2.2df6db81.webp",R=s.p+"static/image/78f6c0b83839dda9aa81ca88b4ffd46c.b970e701.gif",I=s.p+"static/image/ec7c00d2a99170526bab720d545c9051.21f7be91.webp";function L(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"第55章reactplayground项目实战多文件切换",children:["第55章—ReactPlayground项目实战：多文件切换",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第55章reactplayground项目实战多文件切换",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"\uFEFF上节完成了整体布局和代码编辑器部分的开发："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:I,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这节继续来做多文件的切换："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:R,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"点击上面的 tab 可以切换当前选中的文件，然后下面就会展示对应文件的内容。"}),"\n",(0,t.jsx)(n.p,{children:"上面的 FileNameList 组件、下面的 Editor 组件，还有右边的 Preview 组件都需要拿到所有文件的信息："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:M,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"如何跨多个组件共享同一份数据呢？"}),"\n",(0,t.jsx)(n.p,{children:"很明显要用 Context。"}),"\n",(0,t.jsx)(n.p,{children:"我们先来创建这个 Context："}),"\n",(0,t.jsx)(n.p,{children:"创建 PlaygroundContext.tsx"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:k,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import React, { createContext, useState } from 'react'\n\nexport interface File {\n  name: string\n  value: string\n  language: string\n}\n\nexport interface Files {\n  [key: string]: File\n}\n\nexport interface PlaygroundContext {\n  files: Files\n  selectedFileName: string\n  setSelectedFileName: (fileName: string) => void\n  setFiles: (files: Files) => void\n  addFile: (fileName: string) => void\n  removeFile: (fileName: string) => void\n  updateFileName: (oldFieldName: string, newFieldName: string) => void\n}\n\nexport const PlaygroundContext = createContext<PlaygroundContext>({\n  selectedFileName: 'App.tsx',\n} as PlaygroundContext)\n"})}),"\n",(0,t.jsx)(n.p,{children:"context 里保存了 files 的信息，还有当前选中的文件 selectedFileName"}),"\n",(0,t.jsx)(n.p,{children:"file 的信息是这样保存的："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:_,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"files 里是键值对方式保存的文件信息，键是文件名，值是文件的信息，包括 name、value、language。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:w,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"context 里除了 files 和 selectedFileName 外，还有修改它们的方法 setXxx。"}),"\n",(0,t.jsx)(n.p,{children:"以及 addFile、removeFile、updateFileName 的方法。"}),"\n",(0,t.jsx)(n.p,{children:"增删改文件的时候用："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后提供一个 PlaygroundProvider 组件："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:C,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"它就是对 Context.Provider 的封装，注入了这些增删改文件的方法的实现："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export const PlaygroundProvider = (props: PropsWithChildren) => {\n  const { children } = props\n  const [files, setFiles] = useState<Files>({})\n  const [selectedFileName, setSelectedFileName] = useState('App.tsx');\n\n  const addFile = (name: string) => {\n    files[name] = {\n      name,\n      language: fileName2Language(name),\n      value: '',\n    }\n    setFiles({ ...files })\n  }\n\n  const removeFile = (name: string) => {\n    delete files[name]\n    setFiles({ ...files })\n  }\n\n  const updateFileName = (oldFieldName: string, newFieldName: string) => {\n    if (!files[oldFieldName] || newFieldName === undefined || newFieldName === null) return\n    const { [oldFieldName]: value, ...rest } = files\n    const newFile = {\n      [newFieldName]: {\n        ...value,\n        language: fileName2Language(newFieldName),\n        name: newFieldName,\n      },\n    }\n    setFiles({\n      ...rest,\n      ...newFile,\n    })\n  }\n\n  return (\n    <PlaygroundContext.Provider\n      value={{\n        files,\n        selectedFileName,\n        setSelectedFileName,\n        setFiles,\n        addFile,\n        removeFile,\n        updateFileName,\n      }}\n    >\n      {children}\n    </PlaygroundContext.Provider>\n  )\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里的 addFile、removeFile、updateFileName 的实现都比较容易看懂，就是修改 files 的内容。"}),"\n",(0,t.jsx)(n.p,{children:"用到的 fileName2Language 在 utils.ts 里："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:A,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export const fileName2Language = (name: string) => {\n    const suffix = name.split('.').pop() || ''\n    if (['js', 'jsx'].includes(suffix)) return 'javascript'\n    if (['ts', 'tsx'].includes(suffix)) return 'typescript'\n    if (['json'].includes(suffix)) return 'json'\n    if (['css'].includes(suffix)) return 'css'\n    return 'javascript'\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"就是根据不同的后缀名返回 language。"}),"\n",(0,t.jsx)(n.p,{children:"在 monaco editor 这里会用到，用于不同语法的高亮："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:P,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后我们在 App.tsx 里包一层 Provider："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:E,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样就可以在任意组件用 useContext 读取 context 的值了。"}),"\n",(0,t.jsx)(n.p,{children:"我们在 FileNameList 里读取下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { useContext } from "react"\nimport { PlaygroundContext } from "../../../PlaygroundContext"\n\nexport default function FileNameList() {\n    const { \n        files, \n        removeFile, \n        addFile, \n        updateFileName, \n        selectedFileName \n    } = useContext(PlaygroundContext)\n\n    return <div>FileNameList</div>\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"然后渲染下 tab："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { useContext, useEffect, useState } from "react"\nimport { PlaygroundContext } from "../../../PlaygroundContext"\n\nexport default function FileNameList() {\n    const { \n        files, \n        removeFile, \n        addFile, \n        updateFileName, \n        selectedFileName \n    } = useContext(PlaygroundContext)\n\n    const [tabs, setTabs] = useState([\'\'])\n\n    useEffect(() => {\n        setTabs(Object.keys(files))\n    }, [files])\n\n    return <div>\n        {\n            tabs.map((item, index) => (\n                <div>{item}</div>\n            ))\n        }\n    </div>\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"用 useContext 读取 context 中的 files，用来渲染 tab。"}),"\n",(0,t.jsx)(n.p,{children:"当然，现在 context 里的 files 没有内容，我们初始化下数据。"}),"\n",(0,t.jsx)(n.p,{children:"在 src/ReactPlayground 目录下创建个 files.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Files } from './PlaygroundContext'\nimport importMap from './template/import-map.json?raw'\nimport AppCss from './template/App.css?raw'\nimport App from './template/App.tsx?raw'\nimport main from './template/main.tsx?raw'\nimport { fileName2Language } from './utils'\n\n// app 文件名\nexport const APP_COMPONENT_FILE_NAME = 'App.tsx'\n// esm 模块映射文件名\nexport const IMPORT_MAP_FILE_NAME = 'import-map.json'\n// app 入口文件名\nexport const ENTRY_FILE_NAME = 'main.tsx'\n\nexport const initFiles: Files = {\n  [ENTRY_FILE_NAME]: {\n    name: ENTRY_FILE_NAME,\n    language: fileName2Language(ENTRY_FILE_NAME),\n    value: main,\n  },\n  [APP_COMPONENT_FILE_NAME]: {\n    name: APP_COMPONENT_FILE_NAME,\n    language: fileName2Language(APP_COMPONENT_FILE_NAME),\n    value: App,\n  },\n  'App.css': {\n    name: 'App.css',\n    language: 'css',\n    value: AppCss,\n  },\n  [IMPORT_MAP_FILE_NAME]: {\n    name: IMPORT_MAP_FILE_NAME,\n    language: fileName2Language(IMPORT_MAP_FILE_NAME),\n    value: importMap,\n  },\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"导出的 initFiles 包含 App.tsx、main.tsx、App.css、import-map.json 这几个文件。"}),"\n",(0,t.jsx)(n.p,{children:"import 模块的时候加一个 ?raw，就是直接文本的方式引入模块内容。"}),"\n",(0,t.jsx)(n.p,{children:"在 template 目录下添加这四个文件："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"App.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { useState } from 'react'\nimport './App.css'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <h1>Hello World</h1>\n      <div className='card'>\n        <button onClick={() => setCount((count) => count + 1)}>count is {count}</button>\n      </div>\n    </>\n  )\n}\n\nexport default App\n"})}),"\n",(0,t.jsx)(n.p,{children:"App.css"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:":root {\n  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  font-weight: 400;\n  line-height: 1.5;\n  color: rgb(255 255 255 / 87%);\n  text-rendering: optimizelegibility;\n  text-size-adjust: 100%;\n  background-color: #242424;\n  color-scheme: light dark;\n  font-synthesis: none;\n}\n\n#root {\n  max-width: 1280px;\n  padding: 2rem;\n  margin: 0 auto;\n  text-align: center;\n}\n\nbody {\n  display: flex;\n  min-width: 320px;\n  min-height: 100vh;\n  margin: 0;\n  place-items: center;\n}\n\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\nbutton {\n  padding: 0.6em 1.2em;\n  font-family: inherit;\n  font-size: 1em;\n  font-weight: 500;\n  cursor: pointer;\n  background-color: #1a1a1a;\n  border: 1px solid transparent;\n  border-radius: 8px;\n  transition: border-color 0.25s;\n}\n\nbutton:hover {\n  border-color: #646cff;\n}\n\nbutton:focus,\nbutton:focus-visible {\n  outline: 4px auto -webkit-focus-ring-color;\n}\n\n@media (prefers-color-scheme: light) {\n  :root {\n    color: #213547;\n    background-color: #fff;\n  }\n\n  button {\n    background-color: #f9f9f9;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"main.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import React from 'react'\nimport ReactDOM from 'react-dom/client'\n\nimport App from './App'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:"import-map.json"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "imports": {\n    "react": "https://esm.sh/react@18.2.0",\n    "react-dom/client": "https://esm.sh/react-dom@18.2.0"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"然后在 Provider 里初始化 files："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:F,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"看下效果："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:N,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"上面的 tab 展示出来了，下面的 editor 还没有展示对应的文件内容。"}),"\n",(0,t.jsx)(n.p,{children:"改一下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { \n    files, \n    setFiles, \n    selectedFileName, \n    setSelectedFileName\n} = useContext(PlaygroundContext)\n\nconst file = files[selectedFileName];\n"})}),"\n",(0,t.jsx)(n.p,{children:"换成从 context 读取的当前选中的 file 就好了。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后点击文件名的时候做下 selectedFileName 的切换："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"现在，点击 tab 就会切换编辑的文件，并且语法高亮也是对的。"}),"\n",(0,t.jsx)(n.p,{children:"接下来只要完善下样式就好了。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这部分还是挺复杂的，单独抽个 FileNameItem 组件。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import classnames from 'classnames'\nimport React, { useState, useRef, useEffect } from 'react'\n\nimport styles from './index.module.scss'\n\nexport interface FileNameItemProps {\n    value: string\n    actived: boolean\n    onClick: () => void\n}\n\nexport const FileNameItem: React.FC<FileNameItemProps> = (props) => {\n  const {\n    value,\n    actived = false,\n    onClick,\n  } = props\n\n  const [name, setName] = useState(value)\n \n  return (\n    <div\n      className={classnames(styles['tab-item'], actived ? styles.actived : null)}\n      onClick={onClick}\n    >\n        <span>{name}</span>\n    </div>\n  )\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"传入 value、actived、onClick 参数。"}),"\n",(0,t.jsx)(n.p,{children:"如果是 actived 也就是选中的，就加上 actived 的 className。"}),"\n",(0,t.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install --save classnames\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里用了 css modules 来做 css 模块化。"}),"\n",(0,t.jsx)(n.p,{children:"写下 index.module.scss"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".tabs {\n    display: flex;\n    align-items: center;\n\n    height: 38px;\n    overflow-x: auto;\n    overflow-y: hidden;\n    border-bottom: 1px solid #ddd;\n    box-sizing: border-box;\n\n    color: #444;\n    background-color: #fff;\n\n    .tab-item {\n        display: inline-flex;\n        padding: 8px 10px 6px;\n        font-size: 13px;\n        line-height: 20px;\n        cursor: pointer;\n        align-items: center;\n        border-bottom: 3px solid transparent;\n\n        &.actived {\n            color: skyblue;\n            border-bottom: 3px solid skyblue;\n        }\n\n        &:first-child {\n            cursor: text;\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"分别写下整体 .tabs 的样式，.tab-item 的样式。"}),"\n",(0,t.jsx)(n.p,{children:"这部分就是用 flex 布局，然后设置 tab-item 的 padding 即可。"}),"\n",(0,t.jsx)(n.p,{children:"但是 tab-item 可能很多，所以 overflw-x 设置为 auto，也就是会有滚动条。"}),"\n",(0,t.jsx)(n.p,{children:"在 CodeEditor 里引入下 FileNameItem 组件，并加上 tabs 的 className："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { useContext, useEffect, useState } from "react"\nimport { PlaygroundContext } from "../../../PlaygroundContext"\n\nimport { FileNameItem } from "./FileNameItem"\nimport styles from \'./index.module.scss\'\n\nexport default function FileNameList() {\n    const { \n        files, \n        removeFile, \n        addFile, \n        updateFileName, \n        selectedFileName,\n        setSelectedFileName\n    } = useContext(PlaygroundContext)\n\n    const [tabs, setTabs] = useState([\'\'])\n\n    useEffect(() => {\n        setTabs(Object.keys(files))\n    }, [files])\n\n    return <div className={styles.tabs}>\n        {\n            tabs.map((item, index) => (\n                <FileNameItem \n                    key={item + index}  \n                    value={item} \n                    actived={selectedFileName === item} \n                    onClick={() => setSelectedFileName(item)}>\n                </FileNameItem>\n            ))\n        }\n    </div>\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"selectedFileName 对应的 item 的 actived 为 true。"}),"\n",(0,t.jsx)(n.p,{children:"看下效果："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"好看多了。"}),"\n",(0,t.jsx)(n.p,{children:"在 initFiles 里多加点文件，我们测试下滚动条："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"确实有滚动条，就是有点丑。"}),"\n",(0,t.jsx)(n.p,{children:"改下滚动条样式："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"&::-webkit-scrollbar {\n    height: 1px;\n}\n\n&::-webkit-scrollbar-track {\n    background-color: #ddd;\n}\n\n&::-webkit-scrollbar-thumb {\n    background-color: #ddd;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"现在滚动条就不明显了。"}),"\n",(0,t.jsx)(n.p,{children:"我们现在并没有在编辑的时候修改 context 的 files 内容，所以切换 tab 又会变回去："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:r,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"只要在编辑器内容改变的时候修改下 files 就好了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function onEditorChange(value?: string) {\n    files[file.name].value = value!\n    setFiles({ ...files })\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,t.jsx)(n.p,{children:"不过编辑是个频繁触发的事件，我们最好加一下防抖："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install --save lodash-es\nnpm install --save-dev @types/lodash-es\n"})}),"\n",(0,t.jsx)(n.p,{children:"安装 lodash，然后调用下 debounce："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样性能好一点。"}),"\n",(0,t.jsxs)(n.p,{children:["案例代码上传了",(0,t.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/react-playground-project",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git reset --hard 4621920c63b265b1c69865adbaabbba7babe66da\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"这节我们实现了多文件的切换。"}),"\n",(0,t.jsx)(n.p,{children:"在 Context 中保存全局数据，比如 files、selectedFileName，还有对应的增删改的方法。"}),"\n",(0,t.jsx)(n.p,{children:"对 Context.Provider 封装了一层来注入初始化数据和方法，提供了 initFiles 的信息。"}),"\n",(0,t.jsx)(n.p,{children:"然后在 FileNameList 里读取 context 里的 files 来渲染文件列表。"}),"\n",(0,t.jsx)(n.p,{children:"点击 tab 的时候切换 selectedFileName，从而切换编辑器的内容。"}),"\n",(0,t.jsx)(n.p,{children:"这样，多文件的切换和编辑就完成了。"})]})}function S(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(L,{...e})}):L(e)}let T=S;S.__RSPRESS_PAGE_META={},S.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC55%E7%AB%A0%E2%80%94ReactPlayground%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%87%E6%8D%A2.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第55章—ReactPlayground项目实战：多文件切换",headingTitle:"第55章—ReactPlayground项目实战：多文件切换",frontmatter:{}}}}]);