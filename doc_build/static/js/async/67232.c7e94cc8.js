"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["67232"],{19023:function(e,n,s){s.r(n),s.d(n,{default:()=>o});var r=s(552676),c=s(740453);let i=s.p+"static/image/900d12266489cbfd1bd7d66e06eef307.3187be44.webp",l=s.p+"static/image/5d09fc8e2bb45dc8542112c57bab48e1.e9c93fb1.webp",a=s.p+"static/image/a62a4ec835f5c0ec8967815009b81640.57f56cf1.webp",d=s.p+"static/image/6a86720ed3bc191b6845dc246ac736c1.eb235879.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",blockquote:"blockquote",h2:"h2",img:"img",strong:"strong",h3:"h3",ul:"ul",li:"li"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"4掌握字面量类型与枚举让你的类型再精确一些",children:["4.掌握字面量类型与枚举，让你的类型再精确一些",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4掌握字面量类型与枚举让你的类型再精确一些",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"了解了原始类型与对象类型以后，我们已经能完成简单场景的类型标注了。但这还远远不够，我们还可以让这些类型标注更精确一些。比如，有一个接口结构，它描述了响应的消息结构："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface IRes {\n  code: number;\n  status: string;\n  data: any;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在大多数情况下，这里的 code 与 status 实际值会来自于一组确定值的集合，比如 code 可能是 10000 / 10001 /  50000，status 可能是 ",(0,r.jsx)(n.code,{children:'"success"'})," / ",(0,r.jsx)(n.code,{children:'"failure"'}),"。而上面的类型只给出了一个宽泛的 number（string），此时我们既不能在访问 code 时获得精确的提示，也失去了 TypeScript 类型即文档的功能。"]}),"\n",(0,r.jsx)(n.p,{children:"这个时候要怎么做？"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["本节代码见：",(0,r.jsx)(n.a,{href:"https://github.com/linbudu599/TypeScript-Tiny-Book/tree/main/packages/02-literal-and-enum",target:"_blank",rel:"noopener noreferrer",children:"Literal and Enum"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"字面量类型与联合类型",children:["字面量类型与联合类型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字面量类型与联合类型",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们可以使用联合类型加上字面量类型，把上面的例子改写成这样："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'interface Res {\n  code: 10000 | 10001 | 50000;\n  status: "success" | "failure";\n  data: any;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"这个时候，我们就能在访问时获得精确地类型推导了。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["对于 ",(0,r.jsx)(n.code,{children:"declare var res: Res"}),"，你可以认为它其实就是快速生成一个符合指定类型，但没有实际值的变量，同时它也不存在于运行时中。上面引入了一些新的概念，我们来一个一个了解。"]}),"\n",(0,r.jsxs)(n.h2,{id:"字面量类型",children:["字面量类型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字面量类型",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["最开始你可能觉得很神奇，",(0,r.jsx)(n.code,{children:'"success"'})," 不是一个值吗？为什么它也可以作为类型？在 TypeScript 中，这叫做",(0,r.jsx)(n.strong,{children:"字面量类型（Literal Types）"}),"，它代表着比原始类型更精确的类型，同时也是原始类型的子类型（关于类型层级，我们会在后面详细了解）。"]}),"\n",(0,r.jsxs)(n.p,{children:["字面量类型主要包括",(0,r.jsx)(n.strong,{children:"字符串字面量类型"}),"、",(0,r.jsx)(n.strong,{children:"数字字面量类型"}),"、",(0,r.jsx)(n.strong,{children:"布尔字面量类型"}),"和",(0,r.jsx)(n.strong,{children:"对象字面量类型"}),"，它们可以直接作为类型标注："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const str: "linbudu" = "linbudu";\nconst num: 599 = 599;\nconst bool: true = true;\n'})}),"\n",(0,r.jsx)(n.p,{children:"为什么说字面量类型比原始类型更精确？我们可以看这么个例子："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// 报错！不能将类型“"linbudu599"”分配给类型“"linbudu"”。\nconst str1: "linbudu" = "linbudu599";\n\nconst str2: string = "linbudu";\nconst str3: string = "linbudu599";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面的代码，原始类型的值可以包括任意的同类型值，而字面量类型要求的是",(0,r.jsx)(n.strong,{children:"值级别的字面量一致"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["单独使用字面量类型比较少见，因为单个字面量类型并没有什么实际意义。它通常和联合类型（即这里的 ",(0,r.jsx)(n.code,{children:"|"}),"）一起使用，表达一组字面量类型："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'interface Tmp {\n  bool: true | false;\n  num: 1 | 2 | 3;\n  str: "lin" | "bu" | "du"\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"联合类型",children:["联合类型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#联合类型",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["而联合类型你可以理解为，它代表了",(0,r.jsx)(n.strong,{children:"一组类型的可用集合"}),"，只要最终赋值的类型属于联合类型的成员之一，就可以认为符合这个联合类型。联合类型对其成员并没有任何限制，除了上面这样对同一类型字面量的联合，我们还可以将各种类型混合到一起："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Tmp {\n  mixed: true | string | 599 | {} | (() => {}) | (1 | 2)\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"这里有几点需要注意的："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["对于联合类型中的函数类型，需要使用括号",(0,r.jsx)(n.code,{children:"()"}),"包裹起来"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["函数类型并不存在字面量类型，因此这里的 ",(0,r.jsx)(n.code,{children:"(() => {})"})," 就是一个合法的函数类型"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"你可以在联合类型中进一步嵌套联合类型，但这些嵌套的联合类型最终都会被展平到第一级中"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"联合类型的常用场景之一是通过多个对象类型的联合，来实现手动的互斥属性，即这一属性如果有字段1，那就没有字段2："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Tmp {\n  user:\n    | {\n        vip: true;\n        expires: string;\n      }\n    | {\n        vip: false;\n        promotion: string;\n      };\n}\n\ndeclare var tmp: Tmp;\n\nif (tmp.user.vip) {\n  console.log(tmp.user.expires);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在这个例子中，user 属性会满足普通用户与 VIP 用户两种类型，这里 vip 属性的类型基于布尔字面量类型声明。我们在实际使用时可以通过判断此属性为 true ，确保接下来的类型推导都会将其类型收窄到 VIP 用户的类型（即联合类型的第一个分支）。这一能力的使用涉及类型守卫与类型控制流分析，我们会在后面的章节详细来说。"}),"\n",(0,r.jsx)(n.p,{children:"我们也可以通过类型别名来复用一组字面量联合类型："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type Code = 10000 | 10001 | 50000;\n\ntype Status = "success" | "failure";\n'})}),"\n",(0,r.jsx)(n.p,{children:"除了原始类型的字面量类型以外，对象类型也有着对应的字面量类型。"}),"\n",(0,r.jsxs)(n.h3,{id:"对象字面量类型",children:["对象字面量类型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#对象字面量类型",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"类似的，对象字面量类型就是一个对象类型的值。当然，这也就意味着这个对象的值全都为字面量值："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'interface Tmp {\n  obj: {\n    name: "linbudu",\n    age: 18\n  }\n}\n\nconst tmp: Tmp = {\n  obj: {\n    name: "linbudu",\n    age: 18\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"如果要实现一个对象字面量类型，意味着完全的实现这个类型每一个属性的每一个值。对象字面量类型在实际开发中的使用较少，我们只需要了解。"}),"\n",(0,r.jsxs)(n.p,{children:["总的来说，在需要更精确类型的情况下，我们可以使用字面量类型加上联合类型的方式，将类型从 string 这种宽泛的原始类型直接收窄到 ",(0,r.jsx)(n.code,{children:'"resolved" | "pending" | "rejected"'})," 这种精确的字面量类型集合。"]}),"\n",(0,r.jsxs)(n.p,{children:["需要注意的是，",(0,r.jsx)(n.strong,{children:"无论是原始类型还是对象类型的字面量类型，它们的本质都是类型而不是值"}),"。它们在编译时同样会被擦除，同时也是被存储在内存中的类型空间而非值空间。"]}),"\n",(0,r.jsx)(n.p,{children:"如果说字面量类型是对原始类型的进一步扩展（对象字面量类型的使用较少），那么枚举在某些方面则可以理解为是对对象类型的扩展。"}),"\n",(0,r.jsxs)(n.h2,{id:"枚举",children:["枚举",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#枚举",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["枚举并不是 JavaScript 中原生的概念，在其他语言中它都是老朋友了（Java、C#、Swift 等）。目前也已经存在给 JavaScript（ECMAScript）引入枚举支持的 ",(0,r.jsx)(n.a,{href:"https://github.com/rbuckton/proposal-enum",target:"_blank",rel:"noopener noreferrer",children:"proposal-enum"})," 提案，但还未被提交给 TC39 ，仍处于 Stage 0 阶段。"]}),"\n",(0,r.jsx)(n.p,{children:"如果要和 JavaScript 中现有的概念对比，我想最贴切的可能就是你曾经写过的 constants 文件了："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'export default {\n  Home_Page_Url: "url1",\n  Setting_Page_Url: "url2",\n  Share_Page_Url: "url3",\n}\n\n// 或是这样：\nexport const PageUrl = {\n  Home_Page_Url: "url1",\n  Setting_Page_Url: "url2",\n  Share_Page_Url: "url3",\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"如果把这段代码替换为枚举，会是如下的形式："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'enum PageUrl {\n  Home_Page_Url = "url1",\n  Setting_Page_Url = "url2",\n  Share_Page_Url = "url3",\n}\n\nconst home = PageUrl.Home_Page_Url;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这么做的好处非常明显。首先，你拥有了更好的类型提示。其次，这些常量被真正地",(0,r.jsx)(n.strong,{children:"约束在一个命名空间"}),"下（上面的对象声明总是差点意思）。如果你没有声明枚举的值，它会默认使用数字枚举，并且从 0 开始，以 1 递增："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"enum Items {\n  Foo,\n  Bar,\n  Baz\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在这个例子中，",(0,r.jsx)(n.code,{children:"Items.Foo"})," , ",(0,r.jsx)(n.code,{children:"Items.Bar"})," , ",(0,r.jsx)(n.code,{children:"Items.Baz"}),"的值依次是 0，1，2 。"]}),"\n",(0,r.jsx)(n.p,{children:"如果你只为某一个成员指定了枚举值，那么之前未赋值成员仍然会使用从 0 递增的方式，之后的成员则会开始从枚举值递增。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"enum Items {\n  // 0 \n  Foo,\n  Bar = 599,\n  // 600\n  Baz\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在数字型枚举中，你可以使用延迟求值的枚举值，比如函数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const returnNum = () => 100 + 499;\n\nenum Items {\n  Foo = returnNum(),\n  Bar = 599,\n  Baz\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["但要注意，延迟求值的枚举值是有条件的。",(0,r.jsx)(n.strong,{children:"如果你使用了延迟求值，那么没有使用延迟求值的枚举成员必须放在使用常量枚举值声明的成员之后（如上例），或者放在第一位"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"enum Items {\n  Baz,\n  Foo = returnNum(),\n  Bar = 599,\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"TypeScript 中也可以同时使用字符串枚举值和数字枚举值："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'enum Mixed {\n  Num = 599,\n  Str = "linbudu"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["枚举和对象的重要差异在于，",(0,r.jsx)(n.strong,{children:"对象是单向映射的"}),"，我们只能从键映射到键值。而",(0,r.jsx)(n.strong,{children:"枚举是双向映射的"}),"，即你可以从枚举成员映射到枚举值，也可以从枚举值映射到枚举成员："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'enum Items {\n  Foo,\n  Bar,\n  Baz\n}\n\nconst fooValue = Items.Foo; // 0\nconst fooKey = Items[0]; // "Foo"\n'})}),"\n",(0,r.jsx)(n.p,{children:"要了解这一现象的本质，我们需要来看一看枚举的编译产物，如以上的枚举会被编译为以下 JavaScript 代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'"use strict";\nvar Items;\n(function (Items) {\n    Items[Items["Foo"] = 0] = "Foo";\n    Items[Items["Bar"] = 1] = "Bar";\n    Items[Items["Baz"] = 2] = "Baz";\n})(Items || (Items = {}));\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"obj[k] = v"})," 的返回值即是 v，因此这里的 ",(0,r.jsx)(n.code,{children:"obj[obj[k] = v] = k"})," 本质上就是进行了 ",(0,r.jsx)(n.code,{children:"obj[k] = v"})," 与 ",(0,r.jsx)(n.code,{children:"obj[v] = k"})," 这样两次赋值。"]}),"\n",(0,r.jsxs)(n.p,{children:["但需要注意的是，仅有值为数字的枚举成员才能够进行这样的双向枚举，",(0,r.jsx)(n.strong,{children:"字符串枚举成员仍然只会进行单次映射"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'enum Items {\n  Foo,\n  Bar = "BarValue",\n  Baz = "BazValue"\n}\n\n// 编译结果，只会进行 键-值 的单向映射\n"use\xa0strict";\nvar\xa0Items;\n(function\xa0(Items)\xa0{\n\xa0\xa0\xa0\xa0Items[Items["Foo"]\xa0=\xa00]\xa0=\xa0"Foo";\n\xa0\xa0\xa0\xa0Items["Bar"]\xa0=\xa0"BarValue";\n\xa0\xa0\xa0\xa0Items["Baz"]\xa0=\xa0"BazValue";\n})(Items\xa0||\xa0(Items\xa0=\xa0{}));\n'})}),"\n",(0,r.jsx)(n.p,{children:"除了数字枚举与字符串枚举这种分类以外，其实还存在着普通枚举与常量枚举这种分类方式。"}),"\n",(0,r.jsxs)(n.h3,{id:"常量枚举",children:["常量枚举",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常量枚举",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"常量枚举和枚举相似，只是其声明多了一个 const："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const enum Items {\n  Foo,\n  Bar,\n  Baz\n}\n\nconst fooValue = Items.Foo; // 0\n"})}),"\n",(0,r.jsxs)(n.p,{children:["它和普通枚举的差异主要在访问性与编译产物。对于常量枚举，你",(0,r.jsx)(n.strong,{children:"只能通过枚举成员访问枚举值"}),"（而不能通过值访问成员）。同时，在编译产物中并不会存在一个额外的辅助对象（如上面的 Items 对象），对枚举成员的访问会被",(0,r.jsx)(n.strong,{children:"直接内联替换为枚举的值"}),"。以上的代码会被编译为如下形式："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const fooValue = 0 /* Foo */; // 0\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["实际上，常量枚举的表现、编译产物还受到配置项 ",(0,r.jsx)(n.code,{children:"--isolatedModules"})," 以及 ",(0,r.jsx)(n.code,{children:"--preserveConstEnums"})," 等的影响，我们会在后面的 TSConfig 详解中了解更多。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"总结与预告",children:["总结与预告",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结与预告",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在这一节中，我们了解了字面量类型和枚举的使用，包括字面量类型的分类，与联合类型的结合使用，以及枚举与其编译产物等等。"}),"\n",(0,r.jsxs)(n.p,{children:["对于字面量类型，我们可以使用它来提供更精确的类型标注。比如，你可以将如用户类型与请求状态码这一类属性的类型，都使用",(0,r.jsx)(n.strong,{children:"字面量类型＋联合类型"}),"的形式改写，获得更详细的类型信息与更严格的类型约束。"]}),"\n",(0,r.jsx)(n.p,{children:"而对于枚举，我们可以使用它来替换掉之前使用对象进行常量收敛的代码，而如果你希望减少编译后的代码，可以进一步地使用在编译后会被完全抹除的常量枚举。"}),"\n",(0,r.jsxs)(n.h2,{id:"扩展阅读",children:["扩展阅读",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展阅读",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"类型控制流分析中的字面量类型",children:["类型控制流分析中的字面量类型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型控制流分析中的字面量类型",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"除了手动声明字面量类型以外，实际上 TypeScript 也会在某些情况下将变量类型推导为字面量类型，看这个例子："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"你会发现，使用 const 声明的变量，其类型会从值推导出最精确的字面量类型。而对象类型则只会推导至符合其属性结构的接口，不会使用字面量类型："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["要解答这个现象，需要你回想 let 和 const 声明的意义。我们知道，使用 let 声明的变量是可以再次赋值的，在 TypeScript 中要求赋值类型始终与原类型一致（如果声明了的话）。因此对于 let 声明，",(0,r.jsx)(n.strong,{children:"只需要推导至这个值从属的类型即可"}),"。而 const 声明的原始类型变量将不再可变，因此类型可以直接一步到位收窄到最精确的字面量类型，但对象类型变量仍可变（但同样会要求其属性值类型保持一致）。"]}),"\n",(0,r.jsx)(n.p,{children:"这些现象的本质都是 TypeScript 的类型控制流分析，我们会在后面的类型系统部分中讲到。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let o=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["TypeScript%20%E5%85%A8%E9%9D%A2%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%2F4.%E6%8E%8C%E6%8F%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%9E%9A%E4%B8%BE%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%86%8D%E7%B2%BE%E7%A1%AE%E4%B8%80%E4%BA%9B.md"]={toc:[{text:"字面量类型与联合类型",id:"字面量类型与联合类型",depth:2},{text:"字面量类型",id:"字面量类型",depth:2},{text:"联合类型",id:"联合类型",depth:3},{text:"对象字面量类型",id:"对象字面量类型",depth:3},{text:"枚举",id:"枚举",depth:2},{text:"常量枚举",id:"常量枚举",depth:3},{text:"总结与预告",id:"总结与预告",depth:2},{text:"扩展阅读",id:"扩展阅读",depth:2},{text:"类型控制流分析中的字面量类型",id:"类型控制流分析中的字面量类型",depth:3}],title:"4.掌握字面量类型与枚举，让你的类型再精确一些",headingTitle:"4.掌握字面量类型与枚举，让你的类型再精确一些",frontmatter:{}}}}]);