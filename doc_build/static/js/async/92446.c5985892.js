"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["92446"],{98948:function(e,i,s){s.r(i),s.d(i,{default:()=>a});var n=s(552676),c=s(740453);function d(e){let i=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",ol:"ol",li:"li",h2:"h2"},(0,c.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.h1,{id:"38源码-6破旧立新--探索紧凑列表内部",children:["38源码 6：破旧立新 —— 探索「紧凑列表」内部",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#38源码-6破旧立新--探索紧凑列表内部",children:"#"})]}),"\n",(0,n.jsx)(i.p,{children:"Redis 5.0 又引入了一个新的数据结构 listpack，它是对 ziplist 结构的改进，在存储空间上会更加节省，而且结构上也比 ziplist 要精简。它的整体形式和 ziplist 还是比较接近的，如果你认真阅读了 ziplist 的内部结构分析，那么 listpack 也是比较容易理解的。"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-c",children:"struct listpack<T> {\n    int32 total_bytes; // 占用的总字节数\n    int16 size; // 元素个数\n    T[] entries; // 紧凑排列的元素列表\n    int8 end; // 同 zlend 一样，恒为 0xFF\n}\n"})}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.img,{src:"https://user-gold-cdn.xitu.io/2018/7/29/164e41fa97257519?w=1412&h=480&f=png&s=57895",alt:""}),"\n首先这个 listpack 跟 ziplist 的结构几乎一摸一样，只是少了一个",(0,n.jsx)(i.code,{children:"zltail_offset"}),"字段。ziplist 通过这个字段来定位出最后一个元素的位置，用于逆序遍历。不过 listpack 可以通过其它方式来定位出最后一个元素的位置，所以",(0,n.jsx)(i.code,{children:"zltail_offset"}),"字段就省掉了。"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-c",children:"struct lpentry {\n    int<var> encoding;\n    optional byte[] content;\n    int<var> length;\n}\n"})}),"\n",(0,n.jsxs)(i.p,{children:["元素的结构和 ziplist 的元素结构也很类似，都是包含三个字段。不同的是长度字段放在了元素的尾部，而且存储的不是上一个元素的长度，是当前元素的长度。正是因为长度放在了尾部，所以可以省去了",(0,n.jsx)(i.code,{children:"zltail_offset"}),"字段来标记最后一个元素的位置，这个位置可以通过",(0,n.jsx)(i.code,{children:"total_bytes"}),"字段和最后一个元素的长度字段计算出来。"]}),"\n",(0,n.jsx)(i.p,{children:"长度字段使用 varint 进行编码，不同于 skiplist 元素长度的编码为 1 个字节或者 5 个字节，listpack 元素长度的编码可以是 1、2、3、4、5 个字节。同 UTF8 编码一样，它通过字节的最高为是否为 1 来决定编码的长度。"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{src:"https://user-gold-cdn.xitu.io/2018/7/29/164e4256399b6e4a?w=1286&h=618&f=png&s=40994",alt:""})}),"\n",(0,n.jsx)(i.p,{children:"同样，Redis 为了让 listpack 元素支持很多类型，它对 encoding 字段也进行了较为复杂的设计。"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"0xxxxxxx"})," 表示非负小整数，可以表示",(0,n.jsx)(i.code,{children:"0~127"}),"。"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"10xxxxxx"})," 表示小字符串，长度范围是",(0,n.jsx)(i.code,{children:"0~63"}),"，",(0,n.jsx)(i.code,{children:"content"}),"字段为字符串的内容。"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"110xxxxx yyyyyyyy"})," 表示有符号整数，范围是",(0,n.jsx)(i.code,{children:"-2048~2047"}),"。"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"1110xxxx yyyyyyyy"})," 表示中等长度的字符串，长度范围是",(0,n.jsx)(i.code,{children:"0~4095"}),"，",(0,n.jsx)(i.code,{children:"content"}),"字段为字符串的内容。"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"11110000 aaaaaaaa bbbbbbbb cccccccc dddddddd"})," 表示大字符串，四个字节表示长度，",(0,n.jsx)(i.code,{children:"content"}),"字段为字符串内容。"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"11110001 aaaaaaaa bbbbbbbb"})," 表示 2 字节有符号整数。"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"11110010 aaaaaaaa bbbbbbbb cccccccc"})," 表示 3 字节有符号整数。"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"11110011 aaaaaaaa bbbbbbbb cccccccc dddddddd"})," 表示 4 字节有符号整数。"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"11110011 aaaaaaaa ... hhhhhhhh"})," 表示 8 字节有符号整数。"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"11111111"})," 表示 listpack 的结束符号，也就是",(0,n.jsx)(i.code,{children:"0xFF"}),"。"]}),"\n"]}),"\n",(0,n.jsxs)(i.h2,{id:"级联更新",children:["级联更新",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#级联更新",children:"#"})]}),"\n",(0,n.jsx)(i.p,{children:"listpack 的设计彻底消灭了 ziplist 存在的级联更新行为，元素与元素之间完全独立，不会因为一个元素的长度变长就导致后续的元素内容会受到影响。"}),"\n",(0,n.jsxs)(i.h2,{id:"取代-ziplist",children:["取代 ziplist",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#取代-ziplist",children:"#"})]}),"\n",(0,n.jsx)(i.p,{children:"listpack 的设计的目的是用来取代 ziplist，不过当下还没有做好替换 ziplist 的准备，因为有很多兼容性的问题需要考虑，ziplist 在 Redis 数据结构中使用太广泛了，替换起来复杂度会非常之高。它目前只使用在了新增加的 Stream 数据结构中。"}),"\n",(0,n.jsxs)(i.h2,{id:"思考",children:["思考",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#思考",children:"#"})]}),"\n",(0,n.jsx)(i.p,{children:"为什么 listpack 比 ziplist 更加优秀？"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:i}=Object.assign({},(0,c.ah)(),e.components);return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["Redis%20%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F38%E6%BA%90%E7%A0%81%206%EF%BC%9A%E7%A0%B4%E6%97%A7%E7%AB%8B%E6%96%B0%20%E2%80%94%E2%80%94%20%E6%8E%A2%E7%B4%A2%E3%80%8C%E7%B4%A7%E5%87%91%E5%88%97%E8%A1%A8%E3%80%8D%E5%86%85%E9%83%A8.md"]={toc:[{text:"级联更新",id:"级联更新",depth:2},{text:"取代 ziplist",id:"取代-ziplist",depth:2},{text:"思考",id:"思考",depth:2}],title:"38源码 6：破旧立新 —— 探索「紧凑列表」内部",headingTitle:"38源码 6：破旧立新 —— 探索「紧凑列表」内部",frontmatter:{}}}}]);