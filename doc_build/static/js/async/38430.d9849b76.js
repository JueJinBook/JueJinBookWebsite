"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["38430"],{945547:function(e,n,r){r.r(n),r.d(n,{default:()=>j});var a=r(552676),t=r(740453);let o=r.p+"static/image/8fe8c35f409164244bb1d1bb09305582.93cdee62.webp",s=r.p+"static/image/003fe7e9ec31bc342ece4aa71aa2dc09.a4d3da31.webp",i=r.p+"static/image/d250043e65b56f2523660ae3a472da08.09af3804.webp",d=r.p+"static/image/331dd4101be2eab1388ff4703a81f036.92b69402.webp",c=r.p+"static/image/5c493b2e38b01bbdd4fe0d834c61f43d.145b3222.webp";function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",h3:"h3",code:"code",img:"img",pre:"pre"},(0,t.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"11浏览器缓存3日新月异存储型缓存的道与术",children:["11.浏览器缓存3：日新月异——存储型缓存的道与术",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11浏览器缓存3日新月异存储型缓存的道与术",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["不知大家是否还记得小册开篇提到的两种缓存“作祟”的现象，其中一种与 Http 缓存有关的我们已经有所介绍，而另一种“",(0,a.jsx)(n.strong,{children:"当登录一个网站后再次访问的时候就已经是登录状态了"}),"”，这一现象便是和本文所要介绍的浏览器存储型缓存息息相关。"]}),"\n",(0,a.jsx)(n.p,{children:"浏览器存储型缓存包含了 Cookie、Web Storage、IndexedDB 等，它们也是我们日常开发中经常会接触的缓存，而正因为经常接触，往往也更容易忽视它们的“道与术”。此处的“道”指的是存储型缓存的设计初衷与背景，“术”指的是存储型缓存的使用技巧和方案。"}),"\n",(0,a.jsx)(n.p,{children:"下面不妨让我们从上述提到的“不用重复登录”的现象出发，一起进一步认识浏览器存储型缓存的“道与术”。"}),"\n",(0,a.jsxs)(n.h2,{id:"网站登录背后的存储逻辑",children:["网站登录背后的存储逻辑",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#网站登录背后的存储逻辑",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"网站登录功能几乎在大多数应用中都普遍存在，其也是服务端搜集并存储用户信息的必要途径。用户登录也可以看作是前端与服务端的一次授权对话。"}),"\n",(0,a.jsx)(n.p,{children:"当用户从客户端界面输入账号密码点击登录后，前端会将数据发送给服务端进行验证，如果服务端判断用户存在且账号密码正确则向客户端返回响应并颁发有效的 token 信息，如果校验失败则会返回错误信息。"}),"\n",(0,a.jsxs)(n.p,{children:["一旦唯一并有效的 token 信息返回到客户端，后续的所有需登录访问的接口请求客户端都需要携带 token 给服务端判断用户登录的有效性，因此 ",(0,a.jsx)(n.strong,{children:"token 信息在客户端的存储及传输是用户不必重复登录的关键"}),"。"]}),"\n",(0,a.jsx)(n.p,{children:"常见的客户端存储 token 信息的方式有两种：服务端自动植入和前端手动存储。"}),"\n",(0,a.jsxs)(n.h3,{id:"服务端自动植入",children:["服务端自动植入",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#服务端自动植入",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["服务端登录接口可以在返回前端的响应报头中设置首部字段 ",(0,a.jsx)(n.code,{children:"set-cookie"})," 来将 token 信息植入浏览器 cookie 中，如下图所示："]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:"20210927214521.jpg"})}),"\n",(0,a.jsxs)(n.p,{children:["set-cookie 指令值包含了必选项 ",(0,a.jsx)(n.code,{children:"<cookie-name>=<cookie-value>"})," 值和名的形式，同时还包括了可选项 Path（路径）、Domain（域名）、Max-Age（有效时间）等，以分号分隔。"]}),"\n",(0,a.jsx)(n.p,{children:"服务端可以返回多个 set-cookie 指令来达到设置多个 cookie 的目的。最终我们可以在开发者工具 Application 面板中查看当前网页设置的 cookie 值。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:"20210927220024.jpg"})}),"\n",(0,a.jsx)(n.p,{children:"之后前端调用任何同域下的接口时，浏览器会自动将网站的 cookie 值附加在请求头中传给后端进行校验，前端则不需要关心 token 的存取问题。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:"20210927222425.jpg"})}),"\n",(0,a.jsxs)(n.h3,{id:"前端手动存储",children:["前端手动存储",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前端手动存储",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"相比服务端自动植入，前端存储的方式不受限于浏览器环境，比如像 APP 或小程序等一些没有浏览器 cookie 的环境下也可以使用该种方式。"}),"\n",(0,a.jsx)(n.p,{children:"服务端登录接口成功后直接将用户的 token 信息通过响应实体的方式返回给前端，比如像下面这样："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:s,alt:"20210927221734.jpg"})}),"\n",(0,a.jsxs)(n.p,{children:["前端获取到 token 信息后可以通过前端存储方法将数据持久化缓存起来，并在退出后手动清除。同时在调用后端接口时需要手动将 token 传递给服务端，以一个简单的 ",(0,a.jsx)(n.code,{children:"axios"})," 调用为例："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import axios from 'axios'\n\nexport const http = params => {\n    let instance = axios.create({\n        baseURL: 'https://juejin.cn',\n    })\n    \n    let token = localStorage.getItem('token') // 从缓存中获取对应 name 值\n\n    return instance({\n        url: '/xxx/xxx',\n        method: 'post',\n        data: params,\n        headers: {\n            'x-token': token // 前端手动设置自定义 token 响应头\n        }\n    })\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["大家可以根据实际场景和环境进行 token 的存取，在不同环境中使用当前环境支持的存取方法即可。如浏览器环境支持 ",(0,a.jsx)(n.code,{children:"localStorage"}),"。"]}),"\n",(0,a.jsxs)(n.h2,{id:"浏览器存储型缓存方案",children:["浏览器存储型缓存方案",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#浏览器存储型缓存方案",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"在浏览器环境中，不同的存储型缓存并非适应所有的场景，作为一名合格的前端开发，我们应该在实现方案中进行合理的权衡，最终采用最佳的缓存方案。"}),"\n",(0,a.jsxs)(n.h3,{id:"cookie-存储方案",children:["Cookie 存储方案",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookie-存储方案",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Cookie"})," 作为最老牌的存储型缓存，其诞生之初其实并不是为了提供浏览器存储的功能，而是为了辨别用户身份，实现页面间状态的维持和传递，上述介绍的网站不用重复登录的现象便很好的阐述了这一设计初衷。"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Cookie 的存储空间很小，不能超过 4KB，因此这一缺点也限制了它用于存储较大容量数据的能力。"})," 当然笔者也不建议将非用户身份类的数据存储在 Cookie 中，因为 Cookie 在同域下会伴随着每一次资源请求的请求报头传递到服务端进行验证，试想一下如果大量非必要的数据存储在 Cookie 中，伴随着请求响应会造成多大的无效资源传输及性能浪费。"]}),"\n",(0,a.jsxs)(n.p,{children:["而利用 Cookie 无法跨域携带的特点我们可以在 CDN 域名上有所作为。假如 CDN 资源和主站采用了同样的域名，那么必然会造成因 Cookie 传输带来的巨大性能浪费，相反我们可以将 CDN 的域名与主站区分开来来规避这一问题。比如掘金的 CDN 域名为 ",(0,a.jsx)(n.code,{children:"https://lf3-cdn-tos.bytescm.com"}),"，而主站的域名为 ",(0,a.jsx)(n.code,{children:"https://juejin.cn"}),"。"]}),"\n",(0,a.jsx)(n.p,{children:"在 Cookie 存储 API 方面，浏览器提供的原始 API 使用起来也不是特别方便，比如："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 存储 Cookie\ndocument.cookie='name=juejin; domain=juejin.cn'\n\n// 读取 Cookie\n// 只能通过 document.cookie 读取所有 Cookie 并进行字符串截取，非常不便\n\n// 删除 Cookie\nlet date = new Date()\n\ndate.setTime(date.getTime() - 10000) // 设置一个过期时间\n\ndocument.cookie=`name=test; domain=juejin.cn; expires=${date.toGMTString()}`\n"})}),"\n",(0,a.jsx)(n.p,{children:"如此操作起来会编写大量重复糟心的代码，因此封装 Cookie 的增删改查操作十分必要。"}),"\n",(0,a.jsxs)(n.p,{children:["这里笔者推荐大家安装目前较为流行的一款封装 Cookie 操作的库 ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/js-cookie",target:"_blank",rel:"noopener noreferrer",children:"js-cookie"})," 进行使用，其 API 操作如下："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import Cookies from 'js-cookie'\n\n// 存储 Cookie\nCookies.set('name', 'juejin', { domain: 'juejin.cn' })\n\n// 读取 Cookie\nCookies.get('name')\n\n// 删除 Cookie\nCookies.remove('name')\n"})}),"\n",(0,a.jsx)(n.p,{children:"对比一下，显然封装过后的 API 变得“丝滑”许多。"}),"\n",(0,a.jsxs)(n.h3,{id:"web-storage-存储方案",children:["Web Storage 存储方案",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#web-storage-存储方案",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"在验证用户身份及维持状态方面，Cookie 有明显的特点和优势，但其并不是存储网页数据的小能手，相反 Web Storage 在这方面却有显著的优势。"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Web Storage"})," 作为 HTML5 推出的浏览器存储机制，其又可分为 ",(0,a.jsx)(n.code,{children:"Session Storage"})," 和 ",(0,a.jsx)(n.code,{children:"Local Storage"}),"，两者相辅相成。"]}),"\n",(0,a.jsx)(n.p,{children:"Session Storage 作为临时性的本地存储，其生命周期存在于网页会话期间，即使用 Session Storage 存储的缓存数据在网页关闭后会自动释放，并不是持久性的。而 Local Storage 则存储于浏览器本地，除非手动删除或过期，否则其一直存在，属于持久性缓存。"}),"\n",(0,a.jsx)(n.p,{children:"Web Storage 与 Cookie 相比存储大小得到了明显的提升，一般为 2.5-10M 之间（各家浏览器不同），这容量对于用于网页数据存储来说已经十分充足。"}),"\n",(0,a.jsx)(n.p,{children:"我们再来看一下 Web Storage 相关的操作 API（以 Local Storage 为例）："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 存储 Local Storage 数据\nlocalStorage.setItem('name', 'juejin')\n\n// 读取 Local Storage 数据\nlocalStorage.getItem('name')\n\n// 删除 Local Storage 数据\nlocalStorage.removeItem('name')\n"})}),"\n",(0,a.jsx)(n.p,{children:"在存储简单的数据类型时，Web Storage 提供的原始 API 可以轻松完成任务，但是一旦数据类型变为 Object 类型时，其应付起来就变得捉襟见肘，主要原因在于使用 Web Storage 存储的数据最终都会转化成字符串类型，比如："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"localStorage.setItem('age', 18)\n\nlocalStorage.getItem('age') // 最终获取的会是字符串 '18'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["而存储对象时如果没有提前采用序列化方法 ",(0,a.jsx)(n.code,{children:"JSON.stringify"})," 转化为字符串对象，那么最终获取的值会变成 ",(0,a.jsx)(n.code,{children:"[object Object]"}),"。"]}),"\n",(0,a.jsx)(n.p,{children:"因此 Web Storage 的原始存储方案会存在繁碎的序列化与反序列化的缺点："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"let userinfo = { name: 'juejin', age: 18 }\n\n// 存储时进行序列化操作\nlocalStorage.setItem('userinfo', JSON.stringify(userinfo))\n\n// 获取时进行反序列化操作\nJSON.parse(localStorage.getItem('userinfo'))\n"})}),"\n",(0,a.jsx)(n.p,{children:"此时我们唯一需要做的便还是进行二次封装，比如以封装 Local Storage 为例："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'let storage = {\n    // 存储方法\n    setStorage: function (key, value, duration) {\n        let data = {\n            value: value,\n            expiryTime: !duration || isNaN(duration) ? 0 : this.getCurrentTimeStamp() + parseInt(duration)\n        }\n        \n        localStorage[key] = JSON.stringify(data) // 进行序列化操作\n    },\n    // 获取方法\n    getStorage: function (key) {\n        let data = localStorage[key]\n        \n        if (!data || data === "null") {\n            return null\n        }\n       \n        let now = this.getCurrentTimeStamp()\n        let obj\n    \n        try {\n            obj = JSON.parse(data); // 进行反序列化操作\n        } catch (e) {\n            return null\n        }\n        \n        if (obj.expiryTime === 0 || obj.expiryTime > now) {\n            return obj.value\n        }\n        \n        return null\n    },\n    // 删除方法\n    removeStorage: function (key) {\n        localStorage.removeItem(key)\n    },\n    // 获取当前时间戳\n    getCurrentTimeStamp: function () {\n        return Date.parse(new Date())\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"这是十分常用的 Local Storage 封装方法，赋予了其过期时间和自动序列化反序列化的能力，此时我们便无需再关心存储数据的格式问题。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 存储\nlet userinfo = { name: 'juejin', age: 18 }\n\nstorage.setStorage('userinfo', userinfo)\n\n// 获取\nstorage.getStorage('userinfo') // { name: 'juejin', age: 18 }\n"})}),"\n",(0,a.jsxs)(n.p,{children:["目前 npm 市场上也有相关封装 Web Storage 的包可以进行使用，比如 ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/web-storage-cache",target:"_blank",rel:"noopener noreferrer",children:"web-storage-cache"}),"。"]}),"\n",(0,a.jsxs)(n.h3,{id:"indexeddb-存储方案",children:["IndexedDB 存储方案",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#indexeddb-存储方案",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["通过使用 Web Storage，我们实现了网页间数据的临时和持久化存储，但和大容量的数据库相比 Web Storage 存储的空间还是相对有限，此时最终的解决方案便是 —— ",(0,a.jsx)(n.code,{children:"IndexedDB"}),"。"]}),"\n",(0,a.jsx)(n.p,{children:"IndexedDB 是一个大规模的 NoSQL 存储系统，它几乎可以存储浏览器中的任何数据内容，包括二进制数据（ArrayBuffer 对象和 Blob 对象），其可以存储不少于 250M 的数据。"}),"\n",(0,a.jsx)(n.p,{children:"在使用 IndexedDB 前，我们需要判断浏览器是否支持："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"if (!('indexedDB' in window)) {\n    console.log('浏览器不支持 indexedDB')\n    return\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"在浏览器支持的前提下，我们便可以对其进行增删改查操作。首先我们先得打开或者创建数据库："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"let idb\n\n// 打开名为 juejin，版本号为 1 的数据库，如果不存在则自动创建\nlet request = window.indexedDB.open('juejin', 1)\n\n// 错误回调\nrequest.onerror = function (event) {\n    console.log('打开数据库失败')\n}\n\n// 成功回调\nrequest.onsuccess = function (event) {\n    idb = request.result\n    console.log('打开数据库成功')\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["如果是新建数据库那么会触发版本变化的 ",(0,a.jsx)(n.code,{children:"onupgradeneeded"})," 方法，因为此时版本是从有到无的："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"request.onupgradeneeded = function(e) {\n    idb = e.target.result;\n    console.log('running onupgradeneeded')\n    \n    // 新建对象表时，先判断该表是否存在\n    if (!idb.objectStoreNames.contains('store')) {\n        // 创建名为 store 的表，以 id 为主键\n        let storeOS = idb.createObjectStore('store', { keyPath: 'id' })\n    }\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"当我们创建完数据库表（仓库）后，就可以对其进行数据的新增操作："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 新增方法\nfunction addItem(item) {\n    // 新增时必须指定表名和操作模式\n    let transaction = idb.transaction(['store'], 'readwrite')\n    // 获取表对象\n    let store = transaction.objectStore('store')\n    // 调用 add 方法新增数据\n    store.add(item)\n}\n\nlet data = {\n    id: 1, // 主键 id\n    name: 'test',\n    age: '18',\n}\n\naddItem(data) // 调用新增方法\n"})}),"\n",(0,a.jsx)(n.p,{children:"通过主键 id 我们可以方便的获取到想要的数据："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 读取方法\nfunction readItem(id) {\n    // 创建事务，指定表名\n    let transaction = idb.transaction(['store'])\n    // 获取表对象\n    let store = transaction.objectStore('store')\n    // 调用 get 方法获取数据\n    let requestStore = store.get(id)\n    \n    requestStore.onsuccess = function() {\n        if (requestStore.result) {\n            console.log(requestStore.result) // { id: 1, name: 'test', age: '18' }\n        }\n    }\n}\n\nreadItem(1) // 获取主键 id 为 1 的数据\n"})}),"\n",(0,a.jsxs)(n.p,{children:["更多关于 IndexedDB 的 API 大家可以参考 w3 的文档：",(0,a.jsx)(n.a,{href:"https://www.w3.org/TR/IndexedDB/",target:"_blank",rel:"noopener noreferrer",children:(0,a.jsx)(n.a,{href:"https://www.w3.org/TR/IndexedDB/",target:"_blank",rel:"noopener noreferrer",children:"https://www.w3.org/TR/IndexedDB/"})})]}),"\n",(0,a.jsxs)(n.p,{children:["当然我们也可以不必使用原始的 API 像上面那样进行比较繁琐的操作，目前 npm 市场上比较流行的封装 IndexedDB 的包 ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/idb",target:"_blank",rel:"noopener noreferrer",children:"idb"})," 可以简化原始 API 的操作流程。比如使用 idb 库后我们可以将上述创建数据库、新增和读取方法换成类似 localStorage 一样的同步方式："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { openDB } from 'idb'\n\nconst dbPromise = openDB('juejin', 1, {\n    upgrade(db) {\n        db.createObjectStore('store', { keyPath: 'id' })\n    },\n})\n\n// 新增方法\nexport async function add(val) {\n    return (await dbPromise).add('store', val)\n}\n\n// 读取方法\nexport async function get(key) {\n    return (await dbPromise).get('store', key)\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"相对于 Cookie 和 Web Storage，IndexedDB 目前在不同浏览器中的兼容性并不是那么好，因此使用 IndexedDB 时还需进行权衡，遵循渐进增强原则。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:"20211001220900.jpg"})}),"\n",(0,a.jsxs)(n.h2,{id:"结语",children:["结语",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结语",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"浏览器存储型缓存的使用是前端学习过程中的必修课，同时存储型缓存也是我们开发过程中最为常用的缓存类型，正所谓“知其然知其所以然”，在使用缓存的过程中我们需要了解它的内在方法，并根据实际情况进行合理的存储操作，实施最佳的缓存方案，这便是笔者撰写本文内容所的意义所在。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}let j=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90%2F11.%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%983%EF%BC%9A%E6%97%A5%E6%96%B0%E6%9C%88%E5%BC%82%E2%80%94%E2%80%94%E5%AD%98%E5%82%A8%E5%9E%8B%E7%BC%93%E5%AD%98%E7%9A%84%E9%81%93%E4%B8%8E%E6%9C%AF.md"]={toc:[{text:"网站登录背后的存储逻辑",id:"网站登录背后的存储逻辑",depth:2},{text:"服务端自动植入",id:"服务端自动植入",depth:3},{text:"前端手动存储",id:"前端手动存储",depth:3},{text:"浏览器存储型缓存方案",id:"浏览器存储型缓存方案",depth:2},{text:"Cookie 存储方案",id:"cookie-存储方案",depth:3},{text:"Web Storage 存储方案",id:"web-storage-存储方案",depth:3},{text:"IndexedDB 存储方案",id:"indexeddb-存储方案",depth:3},{text:"结语",id:"结语",depth:2}],title:"11.浏览器缓存3：日新月异——存储型缓存的道与术",headingTitle:"11.浏览器缓存3：日新月异——存储型缓存的道与术",frontmatter:{}}}}]);