"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["44041"],{482339:function(n,e,t){t.r(e),t.d(e,{default:()=>g});var s=t(552676),r=t(740453);let c=t.p+"static/image/6679432d6f0dae536b0da63c83e3ea2c.c076b8b4.png",i=t.p+"static/image/6ad8a0cc23312ac4730f1efe36c27bc7.540947d4.png",l=t.p+"static/image/8f2ab5d01f6cad8b283c5bb1431676f5.5248b700.png",o=t.p+"static/image/8b8ec50d64113b65a8778a9c1cbc374f.d09b739d.png",p=t.p+"static/image/061a5db0e61978ea5e601a34e182f3a9.93326017.png",a=t.p+"static/image/bf7a31380963858260c0cf2a0a52841a.a2806237.png",d=t.p+"static/image/2067871042c570fd3fdc2b86807eab5f.7d519d71.png",h=t.p+"static/image/8a1b6398057c50ae56b83f75266d6d9e.5846257d.png",m=t.p+"static/image/13ab426d3a1b3e9e4d80e5af67db477c.8310094d.png",u=t.p+"static/image/f5c0891e59c0d86a471c89a3cd3ae9d2.9e526fb8.png";function y(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",strong:"strong",pre:"pre",img:"img",h3:"h3",h4:"h4"},(0,r.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"25框架解析import-html-entry-源码解析",children:["25.框架解析：import-html-entry 源码解析",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#25框架解析import-html-entry-源码解析",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在上一个课程中，我们讲解了 qiankun 的使用示例，在最后一个示例中我们将 ",(0,s.jsx)(e.code,{children:"entry"})," 设置成 HTML 地址进行微应用的加载，此时 qiankun 会通过 ",(0,s.jsx)(e.code,{children:"import-html-entry"})," 库包请求并解析 HTML 文本内容，最终实现微应用的加载。本课程我们主要分为两个部分来讲解 ",(0,s.jsx)(e.code,{children:"import-html-entry"}),"，首先会讲解如何通过 single-spa 来使用 ",(0,s.jsx)(e.code,{children:"import-html-entry"}),"，其次会详细讲解它的内部运行原理。"]}),"\n",(0,s.jsxs)(e.h2,{id:"import-html-entry",children:["import-html-entry",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#import-html-entry",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://github.com/kuitos/import-html-entry",target:"_blank",rel:"noopener noreferrer",children:"import-html-entry"}),"是一个被\xa0qiankun\xa0依赖的库包，它的主要作用是加载微应用，解析微应用导出的生命周期函数："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"如果提供\xa0HTML\xa0地址，会请求和解析\xa0HTML\xa0文本，自动提取\xa0JS\xa0和\xa0CSS\xa0资源"}),"\n",(0,s.jsx)(e.li,{children:"请求外联\xa0CSS\xa0资源文本，通过内联的方式嵌入 HTML"}),"\n",(0,s.jsxs)(e.li,{children:["请求外联\xa0JS\xa0资源文本，通过\xa0",(0,s.jsx)(e.code,{children:"(0,\xa0eval)"}),"\xa0的形式动态执行脚本"]}),"\n",(0,s.jsxs)(e.li,{children:["识别微应用的入口脚本并解析微应用导出的生命周期函数提供给\xa0single-spa\xa0的注册参数\xa0",(0,s.jsx)(e.code,{children:"app"})]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：\xa0在\xa0single-spa\xa0的示例中，我们通过\xa0",(0,s.jsx)(e.code,{children:"fecthApp"}),"\xa0请求微应用的\xa0JS\xa0脚本，动态执行脚本并解析\xa0single-spa\xa0需要的生命周期函数。",(0,s.jsx)(e.code,{children:"import-html-entry"}),"\xa0库包可以理解为\xa0",(0,s.jsx)(e.code,{children:"fecthApp"}),"\xa0的加强版，它不仅支持传入微应用的\xa0JS\xa0和\xa0CSS\xa0进行加载，还可以传入微应用的\xa0HTML\xa0地址进行解析加载。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["qiankun\xa0的\xa0",(0,s.jsx)(e.code,{children:"entry"}),"\xa0可以提供两种配置方式，一种是\xa0",(0,s.jsx)(e.strong,{children:"Config\xa0Entry"}),"\xa0模式，需要配置\xa0",(0,s.jsx)(e.code,{children:"scripts"}),"、",(0,s.jsx)(e.code,{children:"styles"}),"\xa0以及\xa0",(0,s.jsx)(e.code,{children:"html"}),"\xa0三个字段信息，另外一种是\xa0",(0,s.jsx)(e.strong,{children:"HTML\xa0Entry"}),"\xa0模式，只需要配置一个\xa0HTML\xa0地址。正好这两种模式对应了\xa0",(0,s.jsx)(e.code,{children:"import-html-entry"}),"\xa0的两个对外\xa0API:"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"importHTML"}),"：HTML\xa0Entry\xa0解析模式，传入\xa0HTML\xa0地址进行解析"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"importEntry"}),"：如果是\xa0Config\xa0Entry\xa0模式，需要传入\xa0JS、CSS\xa0等资源"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"使用示例",children:["使用示例",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["为了能够调试\xa0",(0,s.jsx)(e.code,{children:"import-html-entry"}),"的源码，我们通过\xa0Lerna\xa0工具设计\xa0Monorepo\xa0结构引入\xa0",(0,s.jsx)(e.code,{children:"1.15.2"}),"\xa0固定版本的源码包。由于\xa0",(0,s.jsx)(e.code,{children:"import-html-entry"}),"\xa0采用\xa0ES6\xa0编写源码，并且\xa0Chrome\xa0浏览器默认支持\xa0",(0,s.jsx)(e.a,{href:"https://compat-table.github.io/compat-table/es2016plus/",target:"_blank",rel:"noopener noreferrer",children:"ES2016\xa0~\xa0ES2024"}),"\xa0的新语法特性，因此在调试时可以不用编译\xa0",(0,s.jsx)(e.code,{children:"import-html-entry"}),"的源码。通过\xa0Lerna\xa0可以自然的将本地\xa0",(0,s.jsx)(e.code,{children:"packages"}),"目录下的项目链接成\xa0NPM\xa0包，直接在主应用中引入使用，目录结构如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"├── packages  \n│   ├── import-html-entry/       # import-html-entry 1.15.2 版本\n│   ├── main-app/                # 主应用\n│   ├── react-app/               # React 微应用\n│   └── vue-app/                 # Vue 微应用\n└── lerna.json                   # Lerna 配置\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"温馨提示：本示例不再引入 single-spa 的源码，如果你仍然对 single-spa 的源码运行原理感兴趣，可以自行参考之前的示例进行更改。"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["我们会在 ",(0,s.jsx)(e.strong,{children:"single-spa\xa0的\xa0Code\xa0Splitting\xa0示例"})," 上进行简单更改，为此可以先回顾一下原有的执行流程，如下所示："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:["上图中的",(0,s.jsx)(e.strong,{children:"微应用 Fetch 加载逻辑"}),"会使用 ",(0,s.jsx)(e.code,{children:"import-html-entry"})," 替换实现，如下所示："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:"yuque_diagram (53).jpg"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：上图中红色文本是 ",(0,s.jsx)(e.code,{children:"import-html-entry"})," 对外提供的 API。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"import-html-entry-1",children:["import-html-entry",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#import-html-entry-1",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["为了可以在主应用中直接使用\xa0",(0,s.jsx)(e.code,{children:"import-html-entry"}),"\xa0的源码，引入源码后需要修改\xa0",(0,s.jsx)(e.code,{children:"package.json"}),"\xa0的入口文件，如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'{\n  "name": "import-html-entry",\n  "version": "1.15.2",\n  "description": "import html and get the exports of entry",\n  // 去除 module 字段，不进行 build 处理\n  // 将 main 字段修改成源码入口地址\n  \n  // 注意 import-html-entry 的源码可以被 Chrome 浏览器直接兼容\n  // 如果只是用于调试，完全可以不用编译\n  // 当然如果需要在生产环境使用，一定要使用编译后的代码\n  "main": "./src/index.js",\n  "sideEffects": false,\n  "directories": {\n    "example": "example"\n  },\n  "files": [\n    "lib",\n    "esm",\n    "index.d.ts"\n  ],\n  "types": "./index.d.ts",\n  "scripts": {\n    "lint": "npm test",\n    "build": "npm run build:lib && npm run build:esm",\n    "build:lib": "rm -fr ./lib && babel ./src --out-dir ./lib --ignore \'src/**/__tests__/**/*.js\'",\n    "build:esm": "rm -fr ./esm && BABEL_ENV=esm babel ./src --out-dir ./esm --ignore \'src/**/__tests__/**/*.js\'",\n    "prepush": "npm run lint",\n    "prepublishOnly": "npm run build",\n    "release": "np --no-cleanup --yolo --no-publish --any-branch",\n    "test": "jest --coverage",\n    "codecov": "codecov"\n  },\n  "repository": {\n    "type": "git",\n    "url": "git+https://github.com/kuitos/import-html-entry.git"\n  },\n  "publishConfig": {\n    "registry": "https://registry.npmjs.org/"\n  },\n  "keywords": [\n    "html",\n    "importer"\n  ],\n  "author": "Kuitos",\n  "license": "MIT",\n  "bugs": {\n    "url": "https://github.com/kuitos/import-html-entry/issues"\n  },\n  "homepage": "https://github.com/kuitos/import-html-entry#readme",\n  "browserslist": [\n    "> 1%",\n    "last 6 versions",\n    "not ie <= 8"\n  ],\n  "devDependencies": {\n    "@babel/cli": "^7.2.3",\n    "@babel/core": "^7.2.2",\n    "@babel/plugin-proposal-optional-chaining": "^7.8.3",\n    "@babel/plugin-transform-runtime": "^7.0.0",\n    "@babel/preset-env": "^7.0.0",\n    "babel-loader": "^8.0.2",\n    "codecov": "^3.7.0",\n    "husky": "^1.3.1",\n    "iconv-lite": "^0.6.2",\n    "jest": "^24.9.0",\n    "np": "^5.0.3",\n    "webpack": "^4.17.1",\n    "webpack-cli": "^3.1.0"\n  },\n  "jest": {\n    "globals": {\n      "process.env.NODE_ENV": "test"\n    },\n    "testURL": "http://test.com/path/",\n    "testMatch": [\n      "<rootDir>/src/**/__tests__/**/*.js"\n    ],\n    "testPathIgnorePatterns": [\n      "/node_modules/",\n      "/fixtures/"\n    ],\n    "coveragePathIgnorePatterns": [\n      "/node_modules/",\n      "/__tests__/",\n      "/dist/"\n    ],\n    "setupFiles": [\n      "./test/setup.js"\n    ]\n  },\n  "dependencies": {\n    "@babel/runtime": "^7.7.2"\n  }\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"主应用设计",children:["主应用设计",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#主应用设计",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"首先来看下实现效果，如下所示，点击左侧的导航切换路由，使用\xa0single-spa\xa0监听路由的变化来切换微应用："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:m,alt:"录屏2024-06-01 10.49.55.gif"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：从上述示例的 Network 中可以发现，会通过 ",(0,s.jsx)(e.code,{children:"window.fetch"})," 请求微应用的 HTML 地址。除此之外，在上一个课程\xa0",(0,s.jsx)(e.strong,{children:"qiankun\xa0使用示例"}),"中默认会对所有微应用进行\xa0Prefetch\xa0处理，所以首次刷新激活微应用时会将所有微应用的资源进行预加载处理，而本示例没有对微应用的资源进行预请求处理，因此这里在首次刷新时只会加载激活的微应用。"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"主应用的目录结构如下所示："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"├── src                  \n│   ├── index.tsx           # 入口文件，包含了 single-spa 的注册和 React 路由             \n│   ├── App.tsx             # 主应用布局，包含了导航和内容区的布局设计           \n│   └── utils/              # 工具方法\n│        ├── micros.ts      # 微应用数据信息（Mock 后端数据结构）   \n│        └── single-spa.ts  # single-spa 的注册 API 封装 \n"})}),"\n",(0,s.jsxs)(e.p,{children:["在\xa0",(0,s.jsx)(e.code,{children:"src/utils/micros.js"}),"\xa0中定义了微应用列表的数据结构（在真实业务场景中这个数据会更复杂，并且可以从服务端进行动态加载），该数据主要用于注册\xa0single-spa\xa0的微应用、生成\xa0React\xa0路由和主应用导航，如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'export const MICRO_APP_CONTAINER_ID = "micro-app-container";\n\nexport const MICRO_APP_ROUTER = {\n  REACT: "react",\n  VUE: "vue",\n};\n\nexport const mockMicroApps = [\n  {\n    name: "react",\n    title: "React Micro App",\n\n    // 在原有 single-spa 的示例中\n    // Entry 主要采用 Config Entry 的配置方式\n    // 并且没有考虑 CSS 样式的 Entry 处理\n    // 对配置 JS 的顺序有要求，需要按照 <script> 标签的执行顺序放置\n    // entry: [\n    //   "http://localhost:3000/vendors.js",\n    //   "http://localhost:3000/main.js",\n    // ],\n\n    // 由于采用了 import-html-entry 加载微应用\n    // Entry 采用 HTML Entry 的配置方式\n    entry: "http://localhost:3000",\n    activeWhen: MICRO_APP_ROUTER.REACT,\n    customProps: {\n      container: MICRO_APP_CONTAINER_ID,\n    },\n  },\n  {\n    name: "vue",\n    title: "Vue Micro App",\n    entry: "http://localhost:8080",\n    activeWhen: MICRO_APP_ROUTER.VUE,\n    customProps: {\n      container: MICRO_APP_CONTAINER_ID,\n    },\n  },\n];\n'})}),"\n",(0,s.jsx)(e.p,{children:"主应用在初始化时需要消费微应用列表数据，在初始化时使用\xa0single-spa\xa0注册微应用并生成对应的\xa0React\xa0路由："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// src/index.tsx\nimport React from "react";\nimport ReactDOM from "react-dom/client";\nimport "./index.css";\nimport App from "./App";\nimport { createBrowserRouter, RouterProvider } from "react-router-dom";\nimport { registerMicroApps, fetchApp } from "./utils/single-spa";\nimport { MICRO_APP_CONTAINER_ID, mockMicroApps } from "./utils/micros";\n\nregisterMicroApps(\n  mockMicroApps.map((item) => ({\n    name: item.name,\n    app: (props) => {\n      // 注意 fetchApp 和之前 single-spa 请求微应用的方式存在巨大差异\n      // 内部主要采用 import-html-entry 实现微应用的加载和生命周期函数的获取\n      return fetchApp(item.entry);\n    },\n    activeWhen: item.activeWhen,\n    customProps: item.customProps,\n  }))\n);\n\nconst router = createBrowserRouter([\n  {\n    path: "/",\n    element: <App />,\n    children: mockMicroApps.map((item) => ({\n      path: item.activeWhen,\n      element: <div id={MICRO_APP_CONTAINER_ID}></div>,\n    })),\n  },\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById("root")!);\nroot.render(<RouterProvider router={router} />);\n'})}),"\n",(0,s.jsxs)(e.p,{children:["在\xa0",(0,s.jsx)(e.code,{children:"src/utils/single-spa.ts"}),"\xa0中重点关注\xa0",(0,s.jsx)(e.code,{children:"fetchApp"}),"\xa0的实现，之前的示例通过\xa0",(0,s.jsx)(e.code,{children:"window.fetch"}),"\xa0获取微应用的\xa0JS\xa0脚本文本进行动态执行，执行完成后立即识别相应的生命周期函数，现在则改用\xa0",(0,s.jsx)(e.code,{children:"import-html-entry"}),"\xa0来实现类似的功能："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// single-spa 使用 NPM 库包\nimport {\n  start,\n  registerApplication,\n  LifeCycles,\n  RegisterApplicationConfig,\n  AppProps,\n} from "single-spa";\n\n// 这里本质上可以理解为使用 npm link 进行连接调试\n// 实际上采用 Lerna 进行内部 packages 包的链接\nimport { importEntry } from "import-html-entry";\n\nimport { MICRO_APP_CONTAINER_ID } from "./micros";\n\nexport function registerMicroApps(apps: RegisterApplicationConfig[]) {\n  apps.forEach(registerApplication);\n  start();\n}\n\nexport async function fetchApp(url: string): Promise<LifeCycles> {\n  // 1. 通过 window.fetch 请求 HTML 的 url 地址\n  //    获取对应的文本字符串（url 地址需要支持跨域）\n  \n  // 2. 通过各种正则匹配 HTML 文本中的内联 CSS、外联 CSS、内联脚本、外联脚本\n  \n  // 3. 通过 window.fetch 请求外联 CSS，将其内联到微应用自身的 HTML 中\n  //    解析的时候会通过注释的方式提供替换内联样式的占位符\n  const { template, execScripts, getExternalScripts } = await importEntry(url);\n  // 这个 template 会内联 CSS 样式，例如以 Vue 微应用为例，template 如下所示：\n  //   <!DOCTYPE html>\n  // <html lang="">\n  //   <head>\n  //     <meta charset="utf-8" />\n  //     <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n  //     <meta name="viewport" content="width=device-width,initial-scale=1.0" />\n  //     <link rel="icon" href="//localhost:8080/favicon.ico" />\n  //     <title>vue-micro-app</title>\n  //     <style>\n  //       body {\n  //         margin: 0;\n  //       }\n  //     </style>\n  //     \x3c!-- inline scripts replaced by import-html-entry --\x3e\n  //   \x3c!--   script http://localhost:8080/js/chunk-vendors.js replaced by import-html-entry --\x3e\x3c!--   script http://localhost:8080/js/app.js replaced by import-html-entry --\x3e\n  //     <style>/* http://localhost:8080/css/app.css *//*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  //   !*** css ../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../../node_modules/vue-loader/dist/stylePostLoader.js!../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css ***!\n  //   ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n  \n  // h3[data-v-469af010] {\n  //   margin: 40px 0 0;\n  // }\n  // ul[data-v-469af010] {\n  //   list-style-type: none;\n  //   padding: 0;\n  // }\n  // li[data-v-469af010] {\n  //   display: inline-block;\n  //   margin: 0 10px;\n  // }\n  // a[data-v-469af010] {\n  //   color: #42b983;\n  // }\n  \n  // /*!************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  //   !*** css ../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../../node_modules/vue-loader/dist/stylePostLoader.js!../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css ***!\n  //   ************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n  \n  // #app {\n  //   font-family: Avenir, Helvetica, Arial, sans-serif;\n  //   -webkit-font-smoothing: antialiased;\n  //   -moz-osx-font-smoothing: grayscale;\n  //   text-align: center;\n  //   color: #2c3e50;\n  //   margin-top: 60px;\n  // }\n  \n  // </style></head>\n  //   <body>\n  //     <noscript>\n  //       <strong\n  //         >We\'re sorry but vue-micro-app doesn\'t work\n  //         properly without JavaScript enabled. Please enable it to\n  //         continue.</strong\n  //       >\n  //     </noscript>\n  //     <div id="app"></div>\n  \n  //   </body>\n  // </html>\n  console.log("template", template); \n  // 尽管 template 中已经通过 window.fetch 获取外联的 CSS 脚本\n  // 但是还需要通过 window.fetch 请求获取并缓存微应用的 JS 脚本\n  await getExternalScripts();\n  // 将 HTML 挂载到 container 容器中\n  const container = document.getElementById(MICRO_APP_CONTAINER_ID)!;\n  container.innerHTML = template;\n  // 1. 通过 eval 动态执行缓存的微应用脚本，\n  //    注意不是使用 <script> 标签执行脚本\n  //    qiankun 会进行沙箱隔离，该示例没有隔离处理\n  \n  // 2. 识别并返回微应用导出的生命周期函数\n  const scriptExports: LifeCycles = await execScripts();\n  // 封装成 single-spa 需要的微应用生命周期函数格式\n  return {\n    async bootstrap(props) {\n      console.log("bootstrap", props);\n      await execLifecycleFn(scriptExports, "bootstrap", props);\n    },\n    async mount(props) {\n      const container = document.getElementById(MICRO_APP_CONTAINER_ID)!;\n      // 挂载微应用时将微应用的 HTML（经过 import-html-entry 处理）挂载到 container 容器中\n      container.innerHTML = template;\n      await execLifecycleFn(scriptExports, "mount", props);\n    },\n    async unmount(props) {\n      const container = document.getElementById(MICRO_APP_CONTAINER_ID)!;\n      await execLifecycleFn(scriptExports, "unmount", props);\n      // 卸载微应用时清除 container 容器元素的微应用内容\n      container.innerHTML = "";\n    },\n  };\n}\n\nexport async function execLifecycleFn(\n  scriptExports: LifeCycles,\n  lifecycle: keyof LifeCycles,\n  props: AppProps\n) {\n  const lifecycleFn = scriptExports[lifecycle];\n  if (Array.isArray(lifecycleFn)) {\n    // 如果是数组，需要按顺序执行\n    for (const fn of lifecycleFn) {\n      await fn(props);\n    }\n  } else if (lifecycleFn) {\n    await lifecycleFn(props);\n  }\n}\n\n// 原有 single-spa 的 fetch 示例中 fetchApp 的实现如下：\n// 此时 urls 为 Config Entry：\n// [\n//   "http://localhost:3000/vendors.js",\n//   "http://localhost:3000/main.js",\n// ]\n// export async function fetchApp(urls: string[]) {\n//   for (let url of urls) {\n//     const res = await window.fetch(url);\n//     const text = await res.text();\n//     (0, eval)(text);\n//   }\n//   return getAppLifeCycles();\n// }\n\n// export function getAppLifeCycles() {\n//   const keys = Object.keys(window);\n//   const lifeCycles = window[keys[keys.length - 1]];\n//   console.info(\n//     "%c当前 window 对象的最后一个属性是：%c" + keys[keys.length - 1],\n//     "color: blue; font-weight: bold; font-size: 20px;",\n//     "color: red; font-weight: bold; font-size: 20px;"\n//   );\n//   return lifeCycles as LifeCycles;\n// }\n'})}),"\n",(0,s.jsxs)(e.p,{children:["最后在\xa0",(0,s.jsx)(e.code,{children:"<App>"}),"\xa0中对主应用进行布局设计，将左侧设计成能够切换路由的导航，导航的信息来源于微应用数据列表，右侧设计成用于渲染微应用的内容区："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import React from "react";\nimport { Outlet, Link } from "react-router-dom";\nimport "./App.css";\nimport { mockMicroApps } from "./utils/micros";\n\nfunction App() {\n  return (\n    <div className="app">\n      <div className="app-nav">\n        <p>Micro App List</p>\n        <nav>\n          <ul>\n            {/* 遍历微应用的数据列表生成导航路由信息 */}\n            {mockMicroApps.map((item) => (\n              <li key={item.name}>\n                <Link to={item.activeWhen}>{item.title}</Link>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </div>\n      <div className="app-content">\n        {/* 这里的 <Outlet /> 会被 <RouterProvider router={router} /> 中 router 提供的 children 进行替换 */}\n        <Outlet />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"微应用设计",children:["微应用设计",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#微应用设计",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["微应用的\xa0Webpack\xa0配置和之前示例保持一致。除此之外，由于主应用中通过\xa0",(0,s.jsx)(e.code,{children:"import-html-entry"}),"\xa0获取微应用的\xa0HTML\xa0内容进行渲染，因此仍然可以将微应用的内容渲染到原有\xa0HTML\xa0模板的根节点中，但是原有通过\xa0",(0,s.jsx)(e.code,{children:"ducoment"}),"\xa0去寻找根节点的方式可以改为通过微应用渲染容器去寻找根节点，如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// packages/react-app/src/index.js\nimport React from "react";\nimport ReactDOM from "react-dom/client";\nimport "./index.css";\nimport App from "./App";\n\nlet root;\n\nif (!window.singleSpaNavigate) {\n  // 默认单独启动时通过 document 获取根节点\n  root = ReactDOM.createRoot(document.getElementById("root"));\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\nexport async function bootstrap() {\n  console.log("[React 子应用] bootstrap excuted");\n}\n\nexport async function mount(props) {\n  console.log("[React 子应用] mount excuted, props: ", props);\n  // 在 single-spa 的注册 API 中会通过 customProps \n  // 传递 container 微应用容器元素 ID\n  const containerElm = document.getElementById(props.container);\n  // 微应用的 HTML 内容通过 import-html-entry 处理后\n  // 会在 container 微应用容器元素中渲染\n  \n  // 因此可以通过 container 微应用容器元素\n  // 来寻找 HTML 内容中的根节点\n  root = ReactDOM.createRoot(containerElm?.querySelector("#root"));\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\nexport async function unmount(props) {\n  console.log("[React 子应用] unmount excuted, props: ", props);\n  root && root.unmount();\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// packages/vue-app/src/main.js\nimport { createApp } from "vue";\nimport App from "./App.vue";\nlet app;\n\nif (!window.singleSpaNavigate) {\n  app = createApp(App);\n  app.mount("#app");\n}\n\nexport async function bootstrap() {\n  console.log("[Vue 子应用] bootstrap excuted");\n}\n\nexport async function mount(props) {\n  console.log("[Vue 子应用] mount excuted, props: ", props);\n  const containerElm = document.getElementById(props.container);\n  app = createApp(App);\n  app.mount(containerElm?.querySelector("#app"));\n}\n\nexport async function unmount(props) {\n  console.log("[Vue 子应用] unmount excuted, props: ", props);\n  app && app.unmount();\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["我们可以观察 Vue 微应用通过 ",(0,s.jsx)(e.code,{children:"import-html-entry"})," 处理渲染的 DOM 结构和单独启动的 DOM 结构差异。 Vue 微应用的原始 HTML 模版如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'\x3c!-- packages/vue-app/public/index.html --\x3e\n<!DOCTYPE html>\n<html lang="">\n  <head>\n    <meta charset="utf-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width,initial-scale=1.0" />\n    <link rel="icon" href="<%= BASE_URL %>favicon.ico" />\n    <title><%= htmlWebpackPlugin.options.title %></title>\n    \x3c!-- 内联样式，用于测试 --\x3e\n    <style>\n      body {\n        margin: 0;\n      }\n    </style>\n    \x3c!-- 内联脚本式，用于测试 --\x3e\n    <script>\n      console.log("inline script");\n    <\/script>\n  </head>\n  <body>\n    <noscript>\n      <strong\n        >We\'re sorry but <%= htmlWebpackPlugin.options.title %> doesn\'t work\n        properly without JavaScript enabled. Please enable it to\n        continue.</strong\n      >\n    </noscript>\n    <div id="app"></div>\n    \x3c!-- built files will be auto injected --\x3e\n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：为了测试内联脚本和内联样式在 ",(0,s.jsx)(e.code,{children:"import-html-entry"})," 中的处理，这里专门在模板中添加了一些内联标签。"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Vue 微应用单独启动 的 HTML 的结构如下所示："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：单独启动 Vue 应用时通过 ",(0,s.jsx)(e.code,{children:"localhost:8080"})," 进行访问。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["当我们通过本课程示例 single-spa 微前端框架渲染 Vue 微应用时，会通过 ",(0,s.jsx)(e.code,{children:"import-html-entry"})," 请求上述",(0,s.jsx)(e.code,{children:"localhost:8080"})," 的 HTML 文本，最终在主应用的容器中渲染处理后的 HTML，如下所示："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsxs)(e.h2,{id:"源码解析",children:["源码解析",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#源码解析",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们重新回顾一下本课程的示例执行流程，如下所示："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:"yuque_diagram (53).jpg"})}),"\n",(0,s.jsxs)(e.p,{children:["通过上述的红色文本可以发现，在 single-spa 的 ",(0,s.jsx)(e.code,{children:"app"})," 参数中加载微应用时，主要使用了 ",(0,s.jsx)(e.code,{children:"importHTML"}),"、",(0,s.jsx)(e.code,{children:"getExternalScripts"})," 和 ",(0,s.jsx)(e.code,{children:"execScripts"})," 三个 API，我们可以根据这三个 API 来重点分析一下 ",(0,s.jsx)(e.code,{children:"import-html-entry"})," 内部的源码实现。"]}),"\n",(0,s.jsxs)(e.h3,{id:"importhtml",children:["importHTML",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#importhtml",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"importHTML"})," 主要用于解析微应用的 HTML 文本，它的内部执行流程如下所示："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:"yuque_diagram (55).jpg"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：除了 ",(0,s.jsx)(e.code,{children:"importHTML"}),"，",(0,s.jsx)(e.code,{children:"import-html-entry"})," 还提供了\xa0",(0,s.jsx)(e.code,{children:"importEntry"}),"\xa0，两者分别对应 HTML Entry 和 Config Entry 两种加载微应用的配置方式。"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"在之前的课程中我们其实已经讲解了使用\xa0HTML\xa0Entry\xa0的优势，例如在现实的业务开发中往往需要生成带\xa0hash\xa0的资源地址，如果采用\xa0Config\xa0Entry\xa0配置\xa0JS\xa0和\xa0CSS\xa0外联地址的请求方式，则每次构建后都需要变更请求的地址。采用\xa0HTML\xa0Entry\xa0的请求方式，可以解决\xa0hash\xa0地址引入的变更问题，开发者不需要感知\xa0JS\xa0和\xa0CSS\xa0的地址、数量和加载顺序配置。我们首先来看下\xa0HTML\xa0Entry\xa0对外提供的\xa0API\xa0实现："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'export default function importHTML(url, opts = {}) {\n	// 默认的 fetch 方法是 window.fetch\n	let fetch = defaultFetch;\n	let autoDecodeResponse = false;\n	// 默认的 getPublicPath 方法是 defaultGetPublicPath\n	let getPublicPath = defaultGetPublicPath;\n	let getTemplate = defaultGetTemplate;\n	// HTML 解析的后置处理，让用户可以对解析后的 HTML 内容进行二次处理\n	const { postProcessTemplate } = opts;\n\n	// compatible with the legacy importHTML api\n	if (typeof opts === "function") {\n		fetch = opts;\n	} else {\n		// fetch option is availble\n		if (opts.fetch) {\n			// fetch is a funciton\n			if (typeof opts.fetch === "function") {\n				fetch = opts.fetch;\n			} else {\n				// configuration\n				fetch = opts.fetch.fn || defaultFetch;\n				autoDecodeResponse = !!opts.fetch.autoDecodeResponse;\n			}\n		}\n		getPublicPath =\n			opts.getPublicPath || opts.getDomain || defaultGetPublicPath;\n		getTemplate = opts.getTemplate || defaultGetTemplate;\n	}\n\n	return (\n		// 如果已经解析并缓存了 HTML 的处理结果，直接返回缓存结果\n		embedHTMLCache[url] ||\n		// 通过 window.fetch 获取 HTML 内容（HTML 地址的请求需要支持跨域）\n		(embedHTMLCache[url] = fetch(url)\n			// 将请求结果转换为字符串\n			.then((response) => readResAsString(response, autoDecodeResponse))\n			// 请求成功后，处理 HTML 文本内容\n			.then((html) => {\n				// 获取 HTML 内容的 publicPath\n				// 例如：http://localhost:8080/abc/index.html \n                           // -> http://localhost:8080/abc/\n				const assetPublicPath = getPublicPath(url);\n				// 对 HTML 内容进行解析，提取其中的 script、style、template 等内容\n				const { template, scripts, entry, styles } = processTpl(\n					getTemplate(html),\n					assetPublicPath,\n					postProcessTemplate\n				);\n\n				// 处理 CSS 样式表，将外联样式表转换为内联样式表\n\n				// 例如 template：\n\n				// <!DOCTYPE html>\n				// <html lang="">\n				// <head>\n				// 	<meta charset="utf-8" />\n				// 	<meta http-equiv="X-UA-Compatible" content="IE=edge" />\n				// 	<meta name="viewport" content="width=device-width,initial-scale=1.0" />\n				// 	<link rel="icon" href="//localhost:8080/favicon.ico" />\n				// 	<title>vue-micro-app</title>\n				// 	<style>\n				// 	body {\n				// 		margin: 0;\n				// 	}\n				// 	</style>\n				// 	\x3c!-- inline scripts replaced by import-html-entry --\x3e\n				// \x3c!--   script http://localhost:8080/js/chunk-vendors.js replaced by import-html-entry --\x3e\x3c!--   script http://localhost:8080/js/app.js replaced by import-html-entry --\x3e\x3c!--  link http://localhost:8080/css/app.css replaced by import-html-entry --\x3e</head>\n				// <body>\n				// 	<noscript>\n				// 	<strong\n				// 		>We\'re sorry but vue-micro-app doesn\'t work\n				// 		properly without JavaScript enabled. Please enable it to\n				// 		continue.</strong\n				// 	>\n				// 	</noscript>\n				// 	<div id="app"></div>\n\n				// </body>\n				// </html>\n\n				// 通过 getEmbedHTML 处理后转换成 embedHTML：\n\n				// <!DOCTYPE html>\n				// <html lang="">\n				//   <head>\n				// 	<meta charset="utf-8" />\n				// 	<meta http-equiv="X-UA-Compatible" content="IE=edge" />\n				// 	<meta name="viewport" content="width=device-width,initial-scale=1.0" />\n				// 	<link rel="icon" href="//localhost:8080/favicon.ico" />\n				// 	<title>vue-micro-app</title>\n				// 	<style>\n				// 	  body {\n				// 		margin: 0;\n				// 	  }\n				// 	</style>\n				// 	\x3c!-- inline scripts replaced by import-html-entry --\x3e\n				//   \x3c!--   script http://localhost:8080/js/chunk-vendors.js replaced by import-html-entry --\x3e\x3c!--   script http://localhost:8080/js/app.js replaced by import-html-entry --\x3e<style>/* http://localhost:8080/css/app.css *//*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n				//   !*** css ../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../../node_modules/vue-loader/dist/stylePostLoader.js!../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css ***!\n				//   ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n\n				// h3[data-v-469af010] {\n				//   margin: 40px 0 0;\n				// }\n				// ul[data-v-469af010] {\n				//   list-style-type: none;\n				//   padding: 0;\n				// }\n				// li[data-v-469af010] {\n				//   display: inline-block;\n				//   margin: 0 10px;\n				// }\n				// a[data-v-469af010] {\n				//   color: #42b983;\n				// }\n\n				// /*!************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n				//   !*** css ../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../../node_modules/vue-loader/dist/stylePostLoader.js!../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css ***!\n				//   ************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n\n				// #app {\n				//   font-family: Avenir, Helvetica, Arial, sans-serif;\n				//   -webkit-font-smoothing: antialiased;\n				//   -moz-osx-font-smoothing: grayscale;\n				//   text-align: center;\n				//   color: #2c3e50;\n				//   margin-top: 60px;\n				// }\n\n				// </style></head>\n				//   <body>\n				// 	<noscript>\n				// 	  <strong\n				// 		>We\'re sorry but vue-micro-app doesn\'t work\n				// 		properly without JavaScript enabled. Please enable it to\n				// 		continue.</strong\n				// 	  >\n				// 	</noscript>\n				// 	<div id="app"></div>\n\n				//   </body>\n				// </html>\n				return getEmbedHTML(template, styles, { fetch }).then((embedHTML) => ({\n					// 对外暴露转换成内联样式表的 HTML 内容\n					template: embedHTML,\n					// 对外暴露 HTML 内容的 publicPath\n					assetPublicPath,\n					// 对外暴露获取外链脚本的方法（利用闭包缓存了参数 scripts 和 fetch）\n					getExternalScripts: () => getExternalScripts(scripts, fetch),\n					// 对外暴露获取外链样式表的方法（基本上不需要使用，因为 template 已经处理过内联样式）\n					getExternalStyleSheets: () => getExternalStyleSheets(styles, fetch),\n					// 对外暴露执行脚本的方法（利用闭包缓存了参数 entry、scripts 和 fetch）\n					execScripts: (proxy, strictGlobal, opts = {}) => {\n						// 如果没有脚本，则直接返回\n						if (!scripts.length) {\n							return Promise.resolve();\n						}\n						// 执行脚本\n						return execScripts(entry, scripts, proxy, {\n							fetch,\n							strictGlobal,\n							...opts,\n						});\n					},\n				}));\n			}))\n	);\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"importHTML"})," 的执行可以分解为以下几个重要的步骤："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["入参的配置处理，例如 ",(0,s.jsx)(e.code,{children:"getPublicPath"}),"、",(0,s.jsx)(e.code,{children:"getTemplate"})," 和 ",(0,s.jsx)(e.code,{children:"fetch"})]}),"\n",(0,s.jsx)(e.li,{children:"请求微应用的 HTML 文本"}),"\n",(0,s.jsxs)(e.li,{children:["通过 ",(0,s.jsx)(e.code,{children:"processTpl"})," 解析 HTML 文本，提取 ",(0,s.jsx)(e.code,{children:"styles"}),"、",(0,s.jsx)(e.code,{children:"scripts"})," 和 ",(0,s.jsx)(e.code,{children:"entry"})," 等"]}),"\n",(0,s.jsxs)(e.li,{children:["通过 ",(0,s.jsx)(e.code,{children:"getEmbedHTML"})," 将外联的 CSS 样式全部内嵌到 HTML 文本中"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["在入参的配置处理时，会依赖一些默认的配置，这些默认配置可以通过\xa0",(0,s.jsx)(e.code,{children:"imprtHTML"}),"\xa0的第二个配置参数\xa0",(0,s.jsx)(e.code,{children:"opts"}),"进行覆盖，从而满足一些业务上的定制化开发诉求。默认配置如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'const defaultFetch = window.fetch.bind(window);\n\n// 原样返回\nfunction defaultGetTemplate(tpl) {\n	return tpl;\n}\n\n/**\n * 计算 publicPath\n *\n * @export\n * @param {*} entry\n * @return {*}\n */\n\n// 例如：entry = \'http://localhost:8080/entry.js\'\n// 返回 \'http://localhost:8080/\'\n\n// 例如：entry = \'http://localhost:8080/a/b/entry.js\'\n// 返回：\'http://localhost:8080/a/b/\'\nexport function defaultGetPublicPath(entry) {\n	if (typeof entry === "object") {\n		return "/";\n	}\n	try {\n		const { origin, pathname } = new URL(entry, location.href);\n		const paths = pathname.split("/");\n		// 移除最后一个元素\n		paths.pop();\n		return `${origin}${paths.join("/")}/`;\n	} catch (e) {\n		console.warn(e);\n		return "";\n	}\n}\n'})}),"\n",(0,s.jsxs)(e.h4,{id:"processtpl",children:[(0,s.jsx)(e.code,{children:"processTpl"}),(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#processtpl",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在 ",(0,s.jsx)(e.code,{children:"importHTML"})," 中最主要的部分是通过 ",(0,s.jsx)(e.code,{children:"processTpl"})," 解析 HTML 文本，",(0,s.jsx)(e.code,{children:"processTpl"})," 内部的大致执行流程如下所示："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：在  ",(0,s.jsx)(e.code,{children:"importHTML"})," 中 ",(0,s.jsx)(e.code,{children:"opts.getTemplate"})," 是处理微应用 HTML 的 pre hook，而 ",(0,s.jsx)(e.code,{children:"opts.postProcessTemplate"})," 则是通过正则处理完 HTML 后的 post hook。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["其中通过正则匹配 ",(0,s.jsx)(e.code,{children:"<link>"})," 标签（外联样式）的执行流程如下所示："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:"yuque_diagram (59).jpg"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：上图中的绿色区域实现提取外联 ",(0,s.jsx)(e.code,{children:"styles"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["其中通过正则匹配 ",(0,s.jsx)(e.code,{children:"<script>"})," 标签（包含内联和外联脚本）的执行流程如下所示："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:"yuque_diagram (60).jpg"})}),"\n",(0,s.jsxs)(e.p,{children:["其中绿色区域的流程主要用于实现提取内联和外联脚本，因此 ",(0,s.jsx)(e.code,{children:"scripts"})," 数组中既包含内联脚本的文本，也包含外联脚本的链接地址，还可能包含识别了 ",(0,s.jsx)(e.code,{children:"async"})," 或 ",(0,s.jsx)(e.code,{children:"crossorigin"})," 的对象信息。红色区域主要用于提取微应用的入口脚本，如果 ",(0,s.jsx)(e.code,{children:"<script>"})," 标签包含了 ",(0,s.jsx)(e.code,{children:"entry"})," 属性，那么可以判定为入口脚本。当然一个微应用只能包含一个入口脚本，如果存在多个，则会抛出错误信息。当然，如果不存在 ",(0,s.jsx)(e.code,{children:"entry"})," 属性，",(0,s.jsx)(e.code,{children:"processTpl"})," 会将提取的 ",(0,s.jsx)(e.code,{children:"scripts"})," 数组中的最后一个脚本识别为入口脚本。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：如果需要额外处理微应用的 HTML 模板，在没有显示指定 ",(0,s.jsx)(e.code,{children:"entry"})," 入口文件时，切忌在 HTML 模板的最后添加非入口脚本，否则会被识别出入口脚本，从而导致无法识别微应用需要导出的生命周期函数。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"processTpl"})," 的源码如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'/**\n * @author Kuitos\n * @homepage https://github.com/kuitos/\n * @since 2018-09-03 15:04\n */\nimport { getInlineCode, isModuleScriptSupported, parseUrl } from "./utils";\n\n// 注意一下这些正则表达式中使用了大量的捕获组，捕获组是用括号括起来的部分\n// 例如获取 type 属性值的正则表达式: type=(\'|")?([^>\'"\\s]+), 其中 (\'|")? 是第一个捕获组。([^>\'"\\s]+) 是第二个捕获组，用于提取 type 属性值\n// 例如获取 href 属性值的正则表达式: href=(\'|")?([^>\'"\\s]+), 其中 (\'|")? 是第一个捕获组。([^>\'"\\s]+) 是第二个捕获组，用于提取 href 属性值\n// 例如获取 src 属性值的正则表达式: src=(\'|")?([^>\'"\\s]+), 其中 (\'|")? 是第一个捕获组。([^>\'"\\s]+) 是第二个捕获组，用于提取 src 属性值\n// 因为需要从匹配的字符串中提取出属性值，所以需要使用捕获组\n\nconst ALL_SCRIPT_REGEX = /(<script[\\s\\S]*?>)[\\s\\S]*?<\/script>/gi;\nconst SCRIPT_TAG_REGEX =\n	/<(script)\\s+((?!type=(\'|")text/ng-template\\3).)*?>.*?</\\1>/is;\n\nconst SCRIPT_SRC_REGEX = /.*\\ssrc=(\'|")?([^>\'"\\s]+)/;\nconst SCRIPT_TYPE_REGEX = /.*\\stype=(\'|")?([^>\'"\\s]+)/;\nconst SCRIPT_ENTRY_REGEX = /.*\\sentry\\s*.*/;\nconst SCRIPT_ASYNC_REGEX = /.*\\sasync\\s*.*/;\nconst SCRIPT_CROSSORIGIN_REGEX = /.*\\scrossorigin=(\'|")?use-credentials\\1/;\nconst SCRIPT_NO_MODULE_REGEX = /.*\\snomodule\\s*.*/;\nconst SCRIPT_MODULE_REGEX = /.*\\stype=(\'|")?module(\'|")?\\s*.*/;\nconst LINK_TAG_REGEX = /<(link)\\s+.*?>/gis;\nconst LINK_PRELOAD_OR_PREFETCH_REGEX = /\\srel=(\'|")?(preload|prefetch)\\1/;\nconst LINK_HREF_REGEX = /.*\\shref=(\'|")?([^>\'"\\s]+)/;\nconst LINK_AS_FONT = /.*\\sas=(\'|")?font\\1.*/;\nconst STYLE_TAG_REGEX = /<style[^>]*>[\\s\\S]*?</style>/gi;\nconst STYLE_TYPE_REGEX = /\\s+rel=(\'|")?stylesheet\\1.*/;\nconst STYLE_HREF_REGEX = /.*\\shref=(\'|")?([^>\'"\\s]+)/;\nconst HTML_COMMENT_REGEX = /\x3c!--([\\s\\S]*?)--\x3e/g;\nconst LINK_IGNORE_REGEX = /<link(\\s+|\\s+.+\\s+)ignore(\\s*|\\s+.*|=.*)>/is;\nconst STYLE_IGNORE_REGEX = /<style(\\s+|\\s+.+\\s+)ignore(\\s*|\\s+.*|=.*)>/is;\nconst SCRIPT_IGNORE_REGEX = /<script(\\s+|\\s+.+\\s+)ignore(\\s*|\\s+.*|=.*)>/is;\n\nfunction hasProtocol(url) {\n	return url.startsWith("http://") || url.startsWith("https://");\n}\n\nfunction getEntirePath(path, baseURI) {\n	// URL：https://developer.mozilla.org/zh-CN/docs/Web/API/URL\n	// 例如： path = //localhost:8080/css/app.css，baseURI = http://localhost:8080\n	// new URL(path, baseURI) 会将 path 拼接到 baseURI 后面，返回一个新的 URL 对象\n	// 此时 new URL(path, baseURI).toString() 返回的结果为 http://localhost:8080/css/app.css\n	return new URL(path, baseURI).toString();\n}\n\nfunction isValidJavaScriptType(type) {\n	const handleTypes = [\n		"text/javascript",\n		"module",\n		"application/javascript",\n		"text/ecmascript",\n		"application/ecmascript",\n	];\n	// 如果 type 为空，则返回 true，或者 handleTypes 中包含 type，则返回 true\n	// 例如：type 为 text/javascript，则返回 true\n	// 例如：<script defer src="/static/js/bundle.js">，type 为空，也返回 true\n	return !type || handleTypes.indexOf(type) !== -1;\n}\n\nexport const genLinkReplaceSymbol = (linkHref, preloadOrPrefetch = false) =>\n	`\x3c!-- ${\n		preloadOrPrefetch ? "prefetch/preload" : ""\n	} link ${linkHref} replaced by import-html-entry --\x3e`;\nexport const genScriptReplaceSymbol = (\n	scriptSrc,\n	async = false,\n	crossOrigin = false\n) =>\n	`\x3c!-- ${crossOrigin ? "cors" : ""} ${\n		async ? "async" : ""\n	} script ${scriptSrc} replaced by import-html-entry --\x3e`;\nexport const inlineScriptReplaceSymbol = `\x3c!-- inline scripts replaced by import-html-entry --\x3e`;\nexport const genIgnoreAssetReplaceSymbol = (url) =>\n	`\x3c!-- ignore asset ${url || "file"} replaced by import-html-entry --\x3e`;\nexport const genModuleScriptReplaceSymbol = (scriptSrc, moduleSupport) =>\n	`\x3c!-- ${\n		moduleSupport ? "nomodule" : "module"\n	} script ${scriptSrc} ignored by import-html-entry --\x3e`;\n\n/**\n * parse the script link from the template\n * 1. collect stylesheets\n * 2. use global eval to evaluate the inline scripts\n *    see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function#Difference_between_Function_constructor_and_function_declaration\n *    see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#Do_not_ever_use_eval!\n * @param tpl\n * @param baseURI\n * @param postProcessTemplate\n * @stripStyles whether to strip the css links\n * @returns {{template: void | string | *, scripts: *[], entry: *}}\n */\nexport default function processTpl(tpl, baseURI, postProcessTemplate) {\n	let scripts = [];\n	const styles = [];\n	let entry = null;\n	// 判断浏览器的兼容性，是否支持 <script type=module>\n	const moduleSupport = isModuleScriptSupported();\n\n	const template = tpl\n\n		/*\n		remove html comment first\n		*/\n\n		// HTML_COMMENT_REGEX：/\x3c!--([\\s\\S]*?)--\x3e/g\n		// 该正则表达式可以拆分为：\n		// 1 \x3c!--: 匹配 \x3c!-- 开头的字符串\n		// 2 ([\\s\\S]*?): 匹配任意字符，包括换行符，非贪婪模式，即尽可能少的匹配\n		//   2.1 [\\s\\S]: 匹配任意字符，包括换行符\n		//     2.1.1 []: 用于定义一个字符集，可以匹配字符集中的任意一个字符，例如常见的 [0-9] 匹配 0 到 9 之间的任意一个数字\n		//     2.1.2 \\s: 匹配一个空白字符\n		//     2.1.3 \\S: 匹配一个非空白字符\n		//   2.2 *?: 匹配 0 次或多次，非贪婪模式，即尽可能少的匹配\n		//     2.2.1 * 表示匹配 0 次或多次\n		//     2.2.2 ? 表示非贪婪模式\n		// 3 --\x3e: 匹配 --\x3e 结尾的字符串\n\n		// 移除所有的 HTML 注释\n		.replace(HTML_COMMENT_REGEX, "")\n\n		// LINK_TAG_REGEX: /<(link)\\s+.*?>/gis\n		// 例如：<link rel="icon" href="//localhost:8080/favicon.ico">\n		// 例如：<link href="//localhost:8080/css/app.css" rel="stylesheet">\n		// 该正则表达式可以拆分为：\n		// 1 <(link): 匹配 <link 开头的字符串\n		// 2 \\s+: 匹配一个或多个空白字符\n		// 3 .*?: 匹配任意字符，非贪婪模式，即尽可能少的匹配\n		// 	 3.1 . 匹配除了换行符之外的任意字符\n		//   3.2 * 表示匹配 0 次或多次\n		//   3.3 ? 表示非贪婪模式\n		// 4 >: 匹配 > 字符\n\n		// 匹配所有的 link 标签\n		.replace(LINK_TAG_REGEX, (match) => {\n			/*\n			change the css link\n			*/\n\n			// STYLE_TYPE_REGEX: /\\s+rel=(\'|")?stylesheet\\1.*/\n			// 例如：<link href="//localhost:8080/css/app.css" rel="stylesheet">\n			// 该正则表达式可以拆分为：\n			// 1 \\s+: 匹配一个或多个空白字符\n			// 2 rel=(\'|")?stylesheet\\1: 匹配 rel=\'stylesheet\'、rel="stylesheet" 或 rel=stylesheet\n			//   2.1 rel=(\'|")?: 匹配 rel=\' 或 rel=" 或者 rel=，其中 ? 表示匹配 0 次或 1 次\n			//     2.1.1 (\'|"): 匹配 \' 或 "，其中 | 表示或，() 表示捕获组\n			//     2.1.2 ?: 表示匹配 0 次或 1 次\n			//   2.2 stylesheet: 匹配 stylesheet\n			//   2.3 \\1: 反向引用，引用前面的 (\'|") 第 1 个捕获组，可以简单理解为就是 (\'|") 的引用\n			// 3 .*: 匹配任意字符，其中 * 表示匹配 0 次或多次\n\n			// 判读 link 标签中的 rel 属性是否为 stylesheet\n			const styleType = !!match.match(STYLE_TYPE_REGEX);\n			// styleType 为 true，表示 link 标签中有 rel 属性为 stylesheet，即为 CSS 样式表\n			if (styleType) {\n				// LINK_HREF_REGEX: /.*\\shref=(\'|")?([^>\'"\\s]+)/\n				// 例如：<link href="//localhost:8080/css/app.css" rel="stylesheet">\n				// 该正则表达式可以拆分为：\n				// 1 .*: 匹配任意字符\n				// 2 \\s: 匹配一个空白字符\n				// 3 href=(\'|")?([^>\'"\\s]+): 匹配 href=\'、href=" 或 href=，并且匹配 href 属性值\n				//   3.1 href=(\'|")?: 匹配 href=\' 或 href=" 或者 href=，其中 ? 表示匹配 0 次或 1 次\n				//   3.2 ([^>\'"\\s]+): 匹配除了 >, \', ", 空白字符之外的任意字符, + 表示匹配一次或多次（如果遇到了 >, \', ", 空白字符就结束匹配）\n				//     3.2.1 (): 用于提取匹配的内容，是一个捕获组，用于捕获 href 属性值\n				//     3.2.2 []: 用于定义一个字符集，可以匹配字符集中的任意一个字符，例如常见的 [0-9] 匹配 0 到 9 之间的任意一个数字\n				//     3.2.3 ^: 在字符集中插入符号 ^ 表示取反，即匹配除了字符集中的字符之外的任意字\n				//     3.2.4 >\'"\\s: 匹配 >, \', ", 空白字符\n				//   3.3 (): 捕获组，用于提取匹配的内容，在这里一共有两个捕获组，第一个捕获组用于匹配 href 属性值的引号，第二个捕获组用于匹配 href 属性值\n\n				// 以 <link href="//localhost:8080/css/app.css" rel="stylesheet"> 为例\n				// styleHref = [\n				// 	"<link href="//localhost:8080/css/app.css", // 整个匹配的字符串\n				// 	""", // 第一个捕获组，匹配 href 属性值的引号 "，注意这里的 \\ 是转义字符\n				// 	"//localhost:8080/css/app.css" // 第二个捕获组，匹配 href 属性值\n				// ]\n\n				// 匹配 link 标签中的 href 属性\n				const styleHref = match.match(STYLE_HREF_REGEX);\n\n				// LINK_IGNORE_REGEX: /<link(\\s+|\\s+.+\\s+)ignore(\\s*|\\s+.*|=.*)>/is\n				// 例如：<link ignore href="//localhost:8080/css/app.css">\n				// 该正则表达式可以拆分为：\n				// 1 <link: 匹配 <link 开头的字符串\n				// 2 (\\s+|\\s+.+\\s+): 匹配一个或多个空白字符，或者匹配一个或多个空白字符加上任意字符加上一个或多个空白字符\n				//   2.1 \\s+: 匹配一个或多个空白字符\n				//   2.2 \\s+.+\\s+: 匹配一个或多个空白字符加上任意字符加上一个或多个空白字符\n				//     2.2.1 \\s+: 匹配一个或多个空白字符\n				//     2.2.2 .+: 匹配任意字符，+ 表示匹配一次或多次\n				//     2.2.3 \\s+: 匹配一个或多个空白字符\n				//   2.3 |: 或\n				// 3 ignore: 匹配 ignore\n				// 4 (\\s*|\\s+.*|=.*)>: 匹配 0 个或多个空白字符，或者匹配一个或多个空白字符加上任意字符，或者匹配 = 加上任意字符\n				//   4.1 \\s*: 匹配 0 个或多个空白字符\n				//   4.2 \\s+.*: 匹配一个或多个空白字符加上任意字符\n				//   4.3 =.*: 匹配 = 加上任意字符\n\n				// 这里为什么要加上 ignore 属性的判断呢？\n				// 因为有些微应用的 JS 脚本或者 CSS 资源必须放在主应用中加载，不能通过微应用自己的方式加载\n				// 此时需要将 link 标签替换为注释信息，不加载 link 标签中的资源\n				// 例如：<link ignore href="//localhost:8080/css/app.css"> 会被替换为注释信息\n				// 这样微应用的 css 资源就不会被加载，需要将其加入到主应用的模板中\n				// 如果微应用需要单独使用（不是在微前端中运行），那么 ignore 的属性不会影响资源的加载，它不是 HTML 标准的属性\n\n				// 匹配 link 标签中的 ignore 属性\n				const styleIgnore = match.match(LINK_IGNORE_REGEX);\n\n				// 如果 link 标签中有 href 属性\n				if (styleHref) {\n					// 获取 href 属性值\n					// 例如：<link href="//localhost:8080/css/app.css" rel="stylesheet">\n					// href = "//localhost:8080/css/app.css"\n\n					// 这里的 styleHref[2] 就是匹配到的 href 属性值、\n					// 因为在 STYLE_HREF_REGEX 中，href 属性值是第二个捕获组\n					const href = styleHref && styleHref[2];\n					let newHref = href;\n					// 如果 href 属性值不是以 http:// 或 https:// 开头，则将其拼接到 baseURI 后面\n					if (href && !hasProtocol(href)) {\n						// 例如：href = //localhost:8080/css/app.css，baseURI = http://localhost:8080\n						// newHref = http://localhost:8080/css/app.css\n						newHref = getEntirePath(href, baseURI);\n					}\n\n					// 如果 link 标签中有 ignore 属性\n					if (styleIgnore) {\n						// 将 link 标签替换为注释信息\n						// 例如：<link ignore href="//localhost:8080/css/app.css"> 会被替换为注释信息\n						// \x3c!-- ignore asset http://localhost:8080/css/app.css replaced by import-html-entry --\x3e\n						return genIgnoreAssetReplaceSymbol(newHref);\n					}\n\n					// 例如：newHref = "http://example.com/path?query=param&amp;anotherParam=value"\n					// 此时 newHref 中的 &amp; 是转义字符，需要将其转换为 & 符号\n					// 使用 parseUrl 方法将 newHref 进行解析\n					// 返回结果为 http://example.com/path?query=param&anotherParam=value\n					newHref = parseUrl(newHref);\n					// 将 newHref 添加到 styles 数组中\n					styles.push(newHref);\n					// 生成 link 标签替换的注释信息\n					// 原有的文本 <link href="//localhost:8080/css/app.css" rel="stylesheet"> 会被替换为注释信息\n					// \x3c!-- link http://localhost:8080/css/app.css replaced by import-html-entry --\x3e\n					return genLinkReplaceSymbol(newHref);\n				}\n			}\n\n			// 如果 link 标签中没有 rel 属性为 stylesheet，即不是 CSS 样式表\n			// 但可能是 preload 或 prefetch，例如：<link rel="preload" href="//localhost:8080/css/app.css">\n			// 也可能是 font，例如：<link as="font" href="//localhost:8080/css/app.css">\n			// 这里需要对这些 link 标签进行处理\n			const preloadOrPrefetchType =\n				// LINK_PRELOAD_OR_PREFETCH_REGEX: /\\srel=(\'|")?(preload|prefetch)\\1/\n				// 例如：<link rel="preload" href="//localhost:8080/css/app.css">\n				// 该正则表达式可以拆分为：\n				// 1 \\srel=(\'|")?(preload|prefetch)\\1: 匹配 rel=\'preload\' 或 rel="preload" 或 rel=\'prefetch\' 或 rel="prefetch" 或 rel=preload 或 rel=prefetch\n				// 	 1.1 \\s: 匹配一个空白字符\n				// 	 1.2 rel=(\'|")?: 匹配 rel=\'、rel=" 或 rel=, ? 表示匹配 0 次或 1 次\n				// 	 1.3 (preload|prefetch): 匹配 preload 或 prefetch，其中（）是一个分组，可以匹配 preload 或 prefetch\n				//   1.4 \\1: 反向引用，引用前面的 (\'|") 第 1 个捕获组，这样就可以匹配到 rel=\'preload\' 或 rel="preload 尾部的引号\n\n				// 匹配所有的 rel 属性为 preload 或 prefetch 的 link 标签\n				match.match(LINK_PRELOAD_OR_PREFETCH_REGEX) &&\n				// 匹配所有的 rel 属性为 preload 或 prefetch 的 link 标签中的 href 属性\n				// 已经在上面的代码中讲解了该正则表达式\n				match.match(LINK_HREF_REGEX) &&\n				// LINK_AS_FONT: /.*\\sas=(\'|")?font\\1.*/\n				// 例如：<link as="font" href="//localhost:8080/css/app.css">\n				// 该正则表达式可以拆分为：\n				// 1 .*: 匹配任意字符\n				// 2 \\s: 匹配一个空白字符\n				// 3 as=(\'|")?font\\1: 匹配 as=\'font\' 或 as="font" 或 as=font\n				//   3.1 as=(\'|")?: 匹配 as=\'、as=" 或 as=，其中 ? 表示匹配 0 次或 1 次\n				//   3.2 font: 匹配 font\n				//   3.3 \\1: 反向引用，引用前面的 (\'|") 第 1 个捕获组，这样就可以匹配到 as=\'font\' 或 as="font 尾部的引号\n				// 4 .*: 匹配任意字符，* 表示匹配 0 次或多次\n\n				// 不匹配 link 标签中的 as 属性为 font 的 link 标签\n				!match.match(LINK_AS_FONT);\n\n			// 如果 link 标签中的 rel 属性为 preload 或 prefetch\n			// 此时 preloadOrPrefetchType 为 true\n			if (preloadOrPrefetchType) {\n				// 匹配 link 标签中的 href 属性\n				// 因为 href 属性值是第二个捕获组，所以这里是 [2]\n				const [, , linkHref] = match.match(LINK_HREF_REGEX);\n				// 生成 link 标签替换的注释信息\n				// 原有的文本 <link rel="preload" href="//localhost:8080/css/app.css"> 会被替换为注释信息\n				// \x3c!-- prefetch/preload link //localhost:8080/css/app.css replaced by import-html-entry --\x3e\n\n				// 这里可以思考一下为什么要将 preload 或 prefetch 的 link 标签替换为注释信息？\n				// 为什么要去除 preload 或 prefetch 的能力？\n				// 因为不是直接使用 HTML 的方式加载资源，而是通过 import-html-entry 的方式加载资源\n				// 只有通过 HTML 的方式加载资源，才会触发浏览器的预加载或预取功能\n				// 通过 import-html-entry 的方式加载资源，不会触发浏览器的预加载或预取功能\n				return genLinkReplaceSymbol(linkHref, true);\n			}\n			// 其余情况，直接返回 link 标签\n			return match;\n		})\n\n		// STYLE_TAG_REGEX: /<style[^>]*>[\\s\\S]*?</style>/gi\n		// 例如：<style>body { color: red; }</style>\n		// 该正则表达式可以拆分为：\n		// 1 <style: 匹配 <style 开头的字符串\n		// 2 [^>]*: 匹配除了 > 之外的任意字符，* 表示匹配 0 次或多次\n		// 3 >: 匹配 > 字符\n		// 4 [\\s\\S]*?: 匹配任意字符，非贪婪模式，即尽可能少的匹配\n		// 5 </style>: 匹配 </style> 结尾的字符串\n\n		// 匹配所有内联的 style 标签\n		.replace(STYLE_TAG_REGEX, (match) => {\n			// STYLE_IGNORE_REGEX: /<style(\\s+|\\s+.+\\s+)ignore(\\s*|\\s+.*|=.*)>/is\n			// 例如：<style ignore>body { color: red; }</style>\n			// 该正则表达式可以拆分为：\n			// 1 <style: 匹配 <style 开头的字符串\n			// 2 (\\s+|\\s+.+\\s+): 匹配一个或多个空白字符，或者匹配一个或多个空白字符加上任意字符加上一个或多个空白字符\n			//   2.1 \\s+: 匹配一个或多个空白字符\n			//   2.2 \\s+.+\\s+: 匹配一个或多个空白字符加上任意字符加上一个或多个空白字符\n			//     2.2.1 \\s+: 匹配一个或多个空白字符\n			//     2.2.2 .+: 匹配任意字符，+ 表示匹配一次或多次\n			//     2.2.3 \\s+: 匹配一个或多个空白字符\n			//   2.3 |: 或\n			// 3 ignore: 匹配 ignore\n			// 4 (\\s*|\\s+.*|=.*)>: 匹配 0 个或多个空白字符，或者匹配一个或多个空白字符加上任意字符，或者匹配 = 加上任意字符\n			//   4.1 \\s*: 匹配 0 个或多个空白字符\n			//   4.2 \\s+.*: 匹配一个或多个空白字符加上任意字符\n			//   4.3 =.*: 匹配 = 加上任意字符\n			//   4.4 >: 匹配 > 字符\n\n			// qiankun 识别到 style 标签中有 ignore 属性，不会加载该 style 标签中的样式\n			// 而是将该 style 标签替换为注释信息\n\n			// 匹配 ignore 属性的 style 标签\n			if (STYLE_IGNORE_REGEX.test(match)) {\n				// 将 ignore 属性的 style 标签替换为注释信息\n				// 例如：<style ignore>body { color: red; }</style> 会被替换为注释信息\n				// \x3c!-- ignore asset style file replaced by import-html-entry --\x3e\n				return genIgnoreAssetReplaceSymbol("style file");\n			}\n			// 如果是内联的 style 标签，直接返回内联的 style 标签\n			return match;\n		})\n		// 例如: <script defer src="/static/js/bundle.js"></scrip>\n		// 例如: <script>console.log(\'inline script\')<\/script>\n\n		// ALL_SCRIPT_REGEX: /<script(\\s+|.+?)*>[\\s\\S]*?<\/script>/gi\n		// 该正则表达式可以拆分为：\n		// 1 <script: 匹配 <script 开头的字符串\n		// 2 (\\s+|.+?)*: 匹配一个或多个空白字符，或者匹配任意字符，非贪婪模式，即尽可能少的匹配，注意这是一个捕获组\n		//   2.1 \\s+: 匹配一个或多个空白字符\n		//   2.2 .+?: 匹配任意字符，非贪婪模式，即尽可能少的匹配\n		//   2.3 *: 匹配 0 次或多次\n		// 3 >: 匹配 > 字符\n		// 4 [\\s\\S]*?: 匹配任意字符，非贪婪模式，即尽可能少的匹配\n		//   4.1 \\s: 匹配一个空白字符\n		//   4.2 \\S: 匹配一个非空白字符\n		//   4.3 *: 匹配 0 次或多次\n		//   4.4 ?: 非贪婪模式，即尽可能少的匹配\n		// 5 <\/script>: 匹配 <\/script> 结尾的字符串\n\n		// 匹配所有的 script 标签\n		.replace(ALL_SCRIPT_REGEX, (match, scriptTag) => {\n			// 匹配 script 标签中的 ignore 属性\n			// 类似于上述 style 标签中的 ignore 匹配\n			const scriptIgnore = scriptTag.match(SCRIPT_IGNORE_REGEX);\n			// 1. 浏览器支持 module 但是 script 标签中有 nomodule 属性\n			// 2. 浏览器不支持 module 但是 script 标签中有 type="module" 属性\n			// 这两种情况都会被忽略\n			const moduleScriptIgnore =\n				// SCRIPT_NO_MODULE_REGEX: /.*\\snomodule\\s*.*/\n				// 例如：<script nomodule src="/static/js/bundle.js"><\/script>\n				// 该正则表达式可以拆分为：\n				// 1 .*: 匹配任意字符\n				// 2 \\s: 匹配一个空白字符\n				// 3 nomodule: 匹配 nomodule\n				// 4 \\s*: 匹配 0 个或多个空白字符\n				// 5 .*: 匹配任意字符，* 表示匹配 0 次或多次\n\n				// 浏览器支持 module 但是 script 标签中有 nomodule 属性\n				(moduleSupport && !!scriptTag.match(SCRIPT_NO_MODULE_REGEX)) ||\n				// SCRIPT_MODULE_REGEX: /.*\\stype=(\'|")?module(\'|")?\\s*.*/\n				// 例如：<script type="module" src="/static/js/bundle.js"><\/script>\n				// 该正则表达式可以拆分为：\n				// 1 .*: 匹配任意字符\n				// 2 \\s: 匹配一个空白字符\n				// 3 type=(\'|")?module(\'|")?: 匹配 type=\'module\'、type="module"、type=module\n				//   3.1 type=(\'|")?: 匹配 type=\' 或 type=" 或者 type=，其中 ? 表示匹配 0 次或 1 次\n				//   3.2 module: 匹配 module\n				//   3.3 (\'|")?: 匹配 \' 或 "，其中 ? 表示匹配 0 次或 1 次\n				// 4 \\s*: 匹配 0 个或多个空白字符\n				// 5 .*: 匹配任意字符，* 表示匹配 0 次或多次\n\n				// 浏览器不支持 module 但是 script 标签中有 type="module" 属性\n				(!moduleSupport && !!scriptTag.match(SCRIPT_MODULE_REGEX));\n			// in order to keep the exec order of all javascripts\n\n			// SCRIPT_TYPE_REGEX: /.*\\stype=(\'|")?([^>\'"\\s]+)/\n			// 例如：<script type="text/javascript" src="/static/js/bundle.js"><\/script>\n			// 该正则表达式可以拆分为：\n			// 1 .*: 匹配任意字符\n			// 2 \\s: 匹配一个空白字符\n			// 3 type=(\'|")?: 匹配 type=\' 或 type=" 或者 type=，其中 ? 表示匹配 0 次或 1 次\n			// 4 ([^>\'"\\s]+): 匹配除了 >, \', ", 空白字符之外的任意字符，+ 表示匹配一次或多次（如果遇到了 >, \', ", 空白字符就结束匹配）\n			//   4.1 (): 用于提取匹配的内容，是一个捕获组，用于捕获 type 属性值，注意这里是第二个捕获组\n			//   4.2 []: 用于定义一个字符集，可以匹配字符集中的任意一个字符，例如常见的 [0-9] 匹配 0 到 9 之间的任意一个数字\n			//   4.3 ^: 在字符集中插入符号 ^ 表示取反，即匹配除了字符集中的字符之外的任意字\n			//   4.4 >\'"\\s: 匹配 >, \', ", 空白字符\n			//   4.5 +: 匹配 1 次或多次（匹配非 >, \', ", 空白字符之外的字符）\n\n			// 匹配 script 标签中的 type 属性\n			const matchedScriptTypeMatch = scriptTag.match(SCRIPT_TYPE_REGEX);\n			const matchedScriptType =\n				// SCRIPT_TYPE_REGEX 正则中有两个捕获组，\n				// 第一个捕获组匹配 type 属性的引号\n				// 第二个捕获组匹配 type 属性值\n\n				// 在 (\'|")? 中 () 有两个主要作用：\n				// 1. 分组\n				// 括号可以将多个字符组合在一起，然后应用一个或多个正则操作符。\n				// 例如，a(bc)? 会匹配一个 \'a\' 后面跟着零个或多个 \'bc\'\n				// \'bc\' 是一个分组，可以使用 ? 来匹配 0 次或 1 次\n				// 2. 捕获\n				// 括号还可以捕获匹配的文本，以便稍后在表达式中或在后续的代码中使用。\n				// 例如，a(bc) 会匹配 \'abc\'，并且捕获 \'bc\'\n\n				// 正因为如此，所以 ([^>\'"\\s]+) 不得已成为了第二个捕获组，而不是第一个捕获组\n				matchedScriptTypeMatch && matchedScriptTypeMatch[2];\n\n			// 如果 script 标签的 type 不能判断是否为 JavaScript 脚本，那么不对该 script 标签进行处理\n			if (!isValidJavaScriptType(matchedScriptType)) {\n				return match;\n			}\n\n			// if it is a external script\n\n			// SCRIPT_TAG_REGEX: /<(script)\\s+((?!type=(\'|")text/ng-template\\3).)*?>.*?</\\1>/is\n			// 例如：\n			// <script type="text/ng-template" id="tpl1.html">\n			// 	<div>Content of tpl1.html</div>\n			// <\/script>\n\n			// 该正则表达式可以拆分为：\n			// 1 <(script): 匹配 <script 开头的字符串\n			// 2 \\s+: 匹配一个或多个空白字符\n			// 3 ((?!type=(\'|")text/ng-template\\3).)*?: 匹配除了 type=\'text/ng-template\'、type="text/ng-template" 之外的任意字符\n			//   3.1 (?!type=(\'|")text/ng-template\\3): 负向预查，匹配后面不是 type=\'text/ng-template\' 的字符\n			//       3.1.1 type=(\'|")text/ng-template\\3: 匹配 type=\'text/ng-template\' 或 type="text/ng-template"\n			//       3.1.2 \\3: 反向引用，引用前面的 (\'|") 第 3 个捕获组，这样就可以匹配到 type=\'text/ng-template\' 或 type="text/ng-template 尾部的引号\n			//       3.1.3 (\'|"): 匹配 \' 或 "，其中 | 表示或，() 表示捕获组\n			//       3.1.4 text/ng-template: 匹配 text/ng-template\n			//       3.1.5 (?!) 负向预查，匹配后面不是 type=\'text/ng-template\' 或 type="text/ng-template" 的字符\n			//   3.2 .: 匹配任意字符\n			//   3.3 *?: 匹配 0 次或多次，非贪婪模式，即尽可能少的匹配\n			// 4 >: 匹配 > 字符\n			// 5 .*?: 匹配任意字符，非贪婪模式，即尽可能少的匹配\n			// 6 </\\1>: 匹配 <\/script> 结尾的字符串，\\1 表示引用前面的捕获组，这里是 script\n\n			// SCRIPT_SRC_REGEX: /.*\\ssrc=(\'|")?([^>\'"\\s]+)/\n			// 例如：<script src="/static/js/bundle.js"><\/script>\n			// 该正则表达式可以拆分为：\n			// 1 .*: 匹配任意字符\n			// 2 \\s: 匹配一个空白字符\n			// 3 src=(\'|")?: 匹配 src=\' 或 src=" 或者 src=，其中 ? 表示匹配 0 次或 1 次\n			// 4 ([^>\'"\\s]+): 匹配除了 >, \', ", 空白字符之外的任意字符，+ 表示匹配一次或多次（如果遇到了 >, \', ", 空白字符就结束匹配）\n			//   4.1 (): 用于提取匹配的内容，是一个捕获组，用于捕获 src 属性值\n			//   4.2 []: 用于定义一个字符集，可以匹配字符集中的任意一个字符，例如常见的 [0-9] 匹配 0 到 9 之间的任意一个数字\n			//   4.3 ^: 在字符集中插入符号 ^ 表示取反，即匹配除了字符集中的字符之外的任意字\n			//   4.4 >\'"\\s: 匹配 >, \', ", 空白字符\n			//   4.5 +: 匹配 1 次或多次（匹配非 >, \', ", 空白字符之外的字符）\n\n			// 1. 匹配 type 不为 text/ng-template 的 script 标签\n			//    在 Angular 中，text/ng-template 用于定义模板，并不是 JavaScript 脚本\n			// 2. 匹配 script 标签中有 src 属性, 例如：<script src="/static/js/bundle.js"><\/script>\n			// 满足上述两个条件的 script 标签都会被认为是外部的 JavaScript 脚本\n			if (SCRIPT_TAG_REGEX.test(match) && scriptTag.match(SCRIPT_SRC_REGEX)) {\n				/*\n				collect scripts and replace the ref\n				*/\n\n				// SCRIPT_ENTRY_REGEX: /.*\\sentry\\s*.*/\n				// 例如：<script entry src="/static/js/bundle.js"><\/script>\n\n				// 该正则表达式可以拆分为：\n				// 1 .*: 匹配任意字符\n				// 2 \\s: 匹配一个空白字符\n				// 3 entry: 匹配 entry\n				// 4 \\s*: 匹配 0 个或多个空白字符\n				// 5 .*: 匹配任意字符，* 表示匹配 0 次或多次\n\n				// 在 qiankun 中，entry 属性用于标识入口脚本\n				// 如果 script 标签中有 entry 属性，那么该 script 标签中的 src 属性值就是入口脚本\n				// 例如：<script entry src="/static/js/bundle.js"><\/script>，那么 /static/js/bundle.js 就是入口脚本\n				const matchedScriptEntry = scriptTag.match(SCRIPT_ENTRY_REGEX);\n\n				// 再次匹配 script 标签中的 src 属性值\n				const matchedScriptSrcMatch = scriptTag.match(SCRIPT_SRC_REGEX);\n				// 获取 script 标签中的 src 属性值\n				let matchedScriptSrc =\n					matchedScriptSrcMatch && matchedScriptSrcMatch[2];\n\n				// 注意最外层的 .replace(ALL_SCRIPT_REGEX, (match, scriptTag) => {})  匹配的是整个 script 标签的内容\n				// 如果当前 HTML 有多个 script 标签，那么会多次进入 .replace(ALL_SCRIPT_REGEX, (match, scriptTag) => {}) 中\n				// 此时如果在之前的 script 标签中匹配到了 entry 属性，那么会将 entry 属性值赋值给 entry 变量\n				// 如果在当前 script 标签中再次匹配到了 entry 属性，那么说明有多个入口脚本，此时会抛出异常\n				if (entry && matchedScriptEntry) {\n					throw new SyntaxError("You should not set multiply entry script!");\n				}\n\n				// 如果当前 script 标签有 src 属性, 例如：<script src="/static/js/bundle.js"><\/script>\n				if (matchedScriptSrc) {\n					// append the domain while the script not have a protocol prefix\n					// 如果 script 标签中的 src 属性值不是以 http:// 或 https:// 开头，则将其拼接到 baseURI 后面\n					if (!hasProtocol(matchedScriptSrc)) {\n						// 例如：matchedScriptSrc = //localhost:8080/static/js/bundle.js，baseURI = http://localhost:8080\n						// matchedScriptSrc = http://localhost:8080/static/js/bundle.js\n						matchedScriptSrc = getEntirePath(matchedScriptSrc, baseURI);\n					}\n					// 例如：matchedScriptSrc = http://example.com/path?query=param&amp;anotherParam=value\n					// 此时 matchedScriptSrc 中的 &amp; 是转义字符，需要将其转换为 & 符号\n					// 使用 parseUrl 方法将 matchedScriptSrc 进行解析\n					// 返回结果为 http://example.com/path?query=param&anotherParam=value\n					matchedScriptSrc = parseUrl(matchedScriptSrc);\n				}\n\n				// 识别出入口脚本\n				// 如果当前 script 标签中有 entry 属性，那么该 script 标签中的 src 属性值就是入口脚本\n				// 例如：<script entry src="/static/js/bundle.js"><\/script>，那么 /static/js/bundle.js 就是入口脚本\n				entry = entry || (matchedScriptEntry && matchedScriptSrc);\n\n				// 如果 script 标签中有 ignore 属性，那么将该 script 标签替换为注释信息\n				if (scriptIgnore) {\n					// 例如：<script ignore src="/static/js/bundle.js"><\/script> 会被替换为注释信息\n					// \x3c!-- ignore asset /static/js/bundle.js replaced by import-html-entry --\x3e\n					return genIgnoreAssetReplaceSymbol(matchedScriptSrc || "js file");\n				}\n\n				// 如果浏览器支持 module 但是 script 标签中有 nomodule 属性\n				// 或者浏览器不支持 module 但是 script 标签中有 type="module" 属性\n				// 那么将该 script 标签替换为注释信息\n				if (moduleScriptIgnore) {\n					// 返回对应的注释信息\n					return genModuleScriptReplaceSymbol(\n						matchedScriptSrc || "js file",\n						moduleSupport\n					);\n				}\n\n				// 如果 script 标签中有 src 属性\n				if (matchedScriptSrc) {\n					// SCRIPT_ASYNC_REGEX: /.*\\sasync\\s*.*/\n					// 例如：<script async src="/static/js/bundle.js"><\/script>\n					// 该正则表达式可以拆分为：\n					// 1 .*: 匹配任意字符\n					// 2 \\s: 匹配一个空白字符\n					// 3 async: 匹配 async\n					// 4 \\s*: 匹配 0 个或多个空白字符\n					// 5 .*: 匹配任意字符，* 表示匹配 0 次或多次\n\n					// 匹配 script 标签中的 async 属性\n					const asyncScript = !!scriptTag.match(SCRIPT_ASYNC_REGEX);\n\n					// SCRIPT_CROSSORIGIN_REGEX: /.*\\scrossorigin=(\'|")?use-credentials\\1/\n					// 例如：<script crossorigin="use-credentials" src="/static/js/bundle.js"><\/script>\n					// 该正则表达式可以拆分为：\n					// 1 .*: 匹配任意字符\n					// 2 \\s: 匹配一个空白字符\n					// 3 crossorigin=(\'|")?: 匹配 crossorigin=\' 或 crossorigin=" 或者 crossorigin=，其中 ? 表示匹配 0 次或 1 次\n					// 4 use-credentials: 匹配 use-credentials\n					// 5 \\1: 反向引用，引用前面的 (\'|") 第 1 个捕获组，这样就可以匹配到 crossorigin=\'use-credentials\' 或 crossorigin="use-credentials" 尾部的引号\n\n					// 匹配 script 标签中的 crossorigin 属性，use-credentials 表示使用凭证\n					// use-credentials 会对 window.onerror 捕获的错误堆栈信息产生影响\n\n					// 如果没有使用 crossorigin 属性或没有为跨源脚本配置适当的 CORS 头部，\n					// 当跨源脚本发生运行时错误时，这些错误信息默认不会暴露给调用的域，\n					// 即 window.onerror 事件处理器不能获取到错误的详细信息，比如行号、错误消息、堆栈信息等，只能得到 "Script error."。\n\n					// 但是，如果你使用了 crossorigin="use-credentials" 并且服务端响应了适当的 CORS 头部，\n					// 那么当跨源脚本发生错误时，浏览器会把详细的错误信息提供给 window.onerror 回调，允许开发者捕获并处理这些错误。\n\n					// 例如 React CDN 中使用 crossorigin，详见 https://legacy.reactjs.org/docs/cdn-links.html#why-the-crossorigin-attribute\n					const crossOriginScript = !!scriptTag.match(SCRIPT_CROSSORIGIN_REGEX);\n					// 将 matchedScriptSrc 添加到 scripts 数组中\n					scripts.push(\n						asyncScript || crossOriginScript\n							? {\n									async: asyncScript,\n									src: matchedScriptSrc,\n									crossOrigin: crossOriginScript,\n							  }\n							: matchedScriptSrc\n					);\n					// 生成 script 标签替换的注释信息\n					// 例如：<script src="/static/js/bundle.js"><\/script> 会被替换为注释信息\n					// \x3c!-- script /static/js/bundle.js replaced by import-html-entry --\x3e\n\n					// 例如: <script async src="/static/js/bundle.js"><\/script> 会被替换为注释信息\n					// \x3c!-- async script /static/js/bundle.js replaced by import-html-entry --\x3e\n\n					// 例如: <script crossorigin="use-credentials" src="/static/js/bundle.js"><\/script> 会被替换为注释信息\n					// \x3c!-- crossorigin script /static/js/bundle.js replaced by import-html-entry --\x3e\n					return genScriptReplaceSymbol(\n						matchedScriptSrc,\n						asyncScript,\n						crossOriginScript\n					);\n				}\n\n				// 其余情况，直接返回 script 标签\n				return match;\n\n				// 如果 script 标签中没有 src 属性，那么该 script 标签就是内联的脚本\n			} else {\n				// 如果 script 标签中有 ignore 属性，那么将该 script 标签替换为注释信息\n				if (scriptIgnore) {\n					// 例如：<script ignore>console.log(\'inline script\')<\/script> 会被替换为注释信息\n					// \x3c!-- ignore asset js file replaced by import-html-entry --\x3e\n					return genIgnoreAssetReplaceSymbol("js file");\n				}\n\n				// 如果浏览器支持 module 但是 script 标签中有 nomodule 属性\n				// 或者浏览器不支持 module 但是 script 标签中有 type="module" 属性\n				// 那么将该 script 标签替换为注释信息\n				// 例如：<script nomodule>console.log(\'inline script\')<\/script> 会被替换为注释信息\n				// \x3c!-- module script js file replaced by import-html-entry --\x3e\n				if (moduleScriptIgnore) {\n					return genModuleScriptReplaceSymbol("js file", moduleSupport);\n				}\n\n				// if it is an inline script\n				// 去除 <script>console.log(\'inline script\')<\/script> 中的 <script> 和 <\/script>\n				// 只保留内联的脚本内容 console.log(\'inline script\')\n				const code = getInlineCode(match);\n\n				// remove script blocks when all of these lines are comments.\n				// 判断内联脚本是否全是注释\n				const isPureCommentBlock = code\n					// 通过 split 方法将 code 按照换行符分割为数组\n					.split(/[\\r\\n]+/)\n					// 通过 every 方法判断数组中的每一项是否都是注释\n					.every((line) => !line.trim() || line.trim().startsWith("//"));\n\n				// 如果内联脚本不全是注释\n				if (!isPureCommentBlock) {\n					// 将内联脚本添加到 scripts 数组中，注意这里加入的不是 code，而是 match\n					// 例如：<script>console.log(\'inline script\')<\/script> 会被添加到 scripts 数组中\n					scripts.push(match);\n				}\n\n				// 生成内联脚本替换的注释信息\n				// 例如：<script>console.log(\'inline script\')<\/script> 会被替换为注释信息\n				// \x3c!-- inline script replaced by import-html-entry --\x3e\n				return inlineScriptReplaceSymbol;\n			}\n		});\n\n	// 过滤掉空的 script\n	scripts = scripts.filter(function (script) {\n		// filter empty script\n		return !!script;\n	});\n\n	let tplResult = {\n		template,\n		scripts,例如以当前示例项目的\xa0Vue\xa0微应用为例，通过\xa0`window.fetch`\xa0获取的\xa0HTML\xa0文本如下所示：\n		styles,\n		// set the last script as entry if have not set\n		// 如果没有明确在 script 标签中设置 entry 属性\n		// 那么将 scripts 数组中的最后一个脚本作为入口脚本\n		entry: entry || scripts[scripts.length - 1],\n	};\n\n	// postProcessTemplate 是 importHTML 以及 importEntry 方法中 opts 参数的 postProcessTemplate 属性\n	// 可以通过外部传入 postProcessTemplate 函数对模板进行后处理\n	if (typeof postProcessTemplate === "function") {\n		tplResult = postProcessTemplate(tplResult);\n	}\n\n	return tplResult;\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["例如以当前示例项目的\xa0Vue\xa0微应用为例，通过\xa0",(0,s.jsx)(e.code,{children:"window.fetch"}),"\xa0获取的\xa0HTML\xa0文本如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="">\n  <head>\n    <meta charset="utf-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width,initial-scale=1.0" />\n    <link rel="icon" href="//localhost:8080/favicon.ico" />\n    <title>vue-micro-app</title>\n    <style>\n      body {\n        margin: 0;\n      }\n    </style>\n    <script>\n      console.log("inline script");\n    <\/script>\n  <script defer src="//localhost:8080/js/chunk-vendors.js"><\/script><script defer src="//localhost:8080/js/app.js"><\/script><link href="//localhost:8080/css/app.css" rel="stylesheet"></head>\n  <body>\n    <noscript>\n      <strong\n        >We\'re sorry but vue-micro-app doesn\'t work\n        properly without JavaScript enabled. Please enable it to\n        continue.</strong\n      >\n    </noscript>\n    <div id="app"></div>\n    \x3c!-- built files will be auto injected --\x3e\n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：为了调试\xa0",(0,s.jsx)(e.code,{children:"import-html-entry"}),"\xa0源码，分别在\xa0Vue\xa0应用的\xa0HTML\xa0模板中插入了一个内联样式和内联脚本。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["当上述\xa0HTML\xa0通过\xa0",(0,s.jsx)(e.code,{children:"processTpl"}),"\xa0进行正则匹配和替换后，",(0,s.jsx)(e.code,{children:"template"}),"\xa0会得到如下结果："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="">\n<head>\n    <meta charset="utf-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width,initial-scale=1.0" />\n    <link rel="icon" href="//localhost:8080/favicon.ico" />\n    <title>vue-micro-app</title>\n    <style>\n    body {\n        margin: 0;\n    }\n    </style>\n    \x3c!-- inline scripts replaced by import-html-entry --\x3e\n    \x3c!--   script http://localhost:8080/js/chunk-vendors.js replaced by import-html-entry --\x3e\n    \x3c!--   script http://localhost:8080/js/app.js replaced by import-html-entry --\x3e\n    \x3c!--  link http://localhost:8080/css/app.css replaced by import-html-entry --\x3e\n</head>\n<body>\n    <noscript>\n    <strong\n        >We\'re sorry but vue-micro-app doesn\'t work\n        properly without JavaScript enabled. Please enable it to\n        continue.</strong\n    >\n    </noscript>\n    <div id="app"></div>\n\n</body>\n</html>\n'})}),"\n",(0,s.jsxs)(e.p,{children:["而\xa0",(0,s.jsx)(e.code,{children:"scripts"}),"和\xa0\xa0",(0,s.jsx)(e.code,{children:"styles"}),"\xa0以及\xa0",(0,s.jsx)(e.code,{children:"entry"}),"\xa0都会被解析出来，如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// entry\n// 没有识别出 <script> 标签中的 entry 属性\n// 而是将 scripts 数组中的最后一个元素当做入口脚本\nentry = \'http://localhost:8080/js/app.js\'\n\n// scripts\n// 内联脚本需要被抽离，因为最终不再通过 <script> 标签执行\n[\n  "<script>\\n      console.log("inline script");\\n    <\/script>",\n  "http://localhost:8080/js/chunk-vendors.js",\n  "http://localhost:8080/js/app.js"\n]\n\n// styles\n// 注意内联样式不需要抽离，仍然会在 template 中\n// 并且最终 styles 中的外联样式也会被嵌入到 template 中成为内联样式\n[\n  "http://localhost:8080/css/app.css"\n]\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：可以发现\xa0HTML\xa0Entry\xa0中\xa0",(0,s.jsx)(e.code,{children:"stytles"}),"和",(0,s.jsx)(e.code,{children:"scripts"}),"\xa0都是通过正则自动解析出来，这样用户不需要感知\xa0HTML\xa0中存在哪些\xa0JS\xa0脚本以及\xa0Style\xa0样式，而如果通过\xa0Config\xa0Entry\xa0的方式引入，则需要手动传入\xa0",(0,s.jsx)(e.code,{children:"stytles"}),"和",(0,s.jsx)(e.code,{children:"scripts"}),"，这样就不需要通过\xa0",(0,s.jsx)(e.code,{children:"processTpl"}),"\xa0进行正则解析了。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"getembedhtml",children:[(0,s.jsx)(e.code,{children:"getEmbedHTML"}),(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#getembedhtml",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["通过\xa0",(0,s.jsx)(e.code,{children:"processTpl"}),"\xa0获取到\xa0",(0,s.jsx)(e.code,{children:"template"}),"、",(0,s.jsx)(e.code,{children:"styles"}),"\xa0以及\xa0",(0,s.jsx)(e.code,{children:"scripts"}),"\xa0后，",(0,s.jsx)(e.code,{children:"import-html-entry"}),"\xa0会将外联的\xa0CSS\xa0样式内联到\xa0HTML\xa0中，会通过\xa0",(0,s.jsx)(e.code,{children:"getEmbedHTML"}),"获取外联的\xa0CSS\xa0样式进行内联处理，如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// 将外链样式表转换为内联样式表\nfunction getEmbedHTML(template, styles, opts = {}) {\n	const { fetch = defaultFetch } = opts;\n	let embedHTML = template;\n	// 请求获取 HTML 中的外链样式表内容\n	return getExternalStyleSheets(styles, fetch).then((styleSheets) => {\n		// 将外链样式表替换为内联样式表\n		embedHTML = styles.reduce((html, styleSrc, i) => {\n			html = html.replace(\n				// 之前通过 genLinkReplaceSymbol 生成的占位符，用于替换外链样式表\n				genLinkReplaceSymbol(styleSrc),\n				// 如果 styleSrc 是内联代码，则直接返回内联代码\n				// 如果 styleSrc 是外链样式表地址，则将外链样式表内容转换为内联样式表\n				isInlineCode(styleSrc)\n					? `${styleSrc}`\n					: `<style>/* ${styleSrc} */${styleSheets[i]}</style>`\n			);\n			return html;\n			// 根据之前生成的 HTML Template 和外链样式表内容，生成最终带有内联样式表的 HTML\n		}, embedHTML);\n		return embedHTML;\n	});\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["传入\xa0",(0,s.jsx)(e.code,{children:"template"}),"\xa0和外联的\xa0",(0,s.jsx)(e.code,{children:"styles"}),"后，会请求\xa0",(0,s.jsx)(e.code,{children:"styles"}),"中的外联样式，并内联到\xa0",(0,s.jsx)(e.code,{children:"template"}),"\xa0中，例如处理之前的\xa0",(0,s.jsx)(e.code,{children:"template"}),"\xa0如下："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="">\n<head>\n    <meta charset="utf-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width,initial-scale=1.0" />\n    <link rel="icon" href="//localhost:8080/favicon.ico" />\n    <title>vue-micro-app</title>\n    <style>\n    body {\n        margin: 0;\n    }\n    </style>\n    \x3c!-- inline scripts replaced by import-html-entry --\x3e\n    \x3c!--   script http://localhost:8080/js/chunk-vendors.js replaced by import-html-entry --\x3e\n    \x3c!--   script http://localhost:8080/js/app.js replaced by import-html-entry --\x3e\n    \x3c!--  link http://localhost:8080/css/app.css replaced by import-html-entry --\x3e</head>\n<body>\n    <noscript>\n    <strong\n        >We\'re sorry but vue-micro-app doesn\'t work\n        properly without JavaScript enabled. Please enable it to\n        continue.</strong\n    >\n    </noscript>\n    <div id="app"></div>\n\n</body>\n</html>\n'})}),"\n",(0,s.jsxs)(e.p,{children:["请求的\xa0",(0,s.jsx)(e.code,{children:"styles"}),"\xa0如下："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'[\n  "http://localhost:8080/css/app.css"\n]\n'})}),"\n",(0,s.jsxs)(e.p,{children:["通过\xa0",(0,s.jsx)(e.code,{children:"getEmbedHTML"}),"\xa0处理后，",(0,s.jsx)(e.code,{children:"embedHTML"}),"\xa0如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="">\n  <head>\n    <meta charset="utf-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width,initial-scale=1.0" />\n    <link rel="icon" href="//localhost:8080/favicon.ico" />\n    <title>vue-micro-app</title>\n    <style>\n      body {\n        margin: 0;\n      }\n    </style>\n    \x3c!-- inline scripts replaced by import-html-entry --\x3e\n    \x3c!--   script http://localhost:8080/js/chunk-vendors.js replaced by import-html-entry --\x3e\n    \x3c!--   script http://localhost:8080/js/app.js replaced by import-html-entry --\x3e\n    <style>\n    /* http://localhost:8080/css/app.css *//*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** css ../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../../node_modules/vue-loader/dist/stylePostLoader.js!../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css ***!\n  ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n\nh3[data-v-469af010] {\n  margin: 40px 0 0;\n}\nul[data-v-469af010] {\n  list-style-type: none;\n  padding: 0;\n}\nli[data-v-469af010] {\n  display: inline-block;\n  margin: 0 10px;\n}\na[data-v-469af010] {\n  color: #42b983;\n}\n\n/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\\\n  !*** css ../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../../node_modules/vue-loader/dist/stylePostLoader.js!../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css ***!\n  ************************************************************************************************************************************************************************************************************************************************************************************************************************************/\n\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n</style></head>\n  <body>\n    <noscript>\n      <strong\n        >We\'re sorry but vue-micro-app doesn\'t work\n        properly without JavaScript enabled. Please enable it to\n        continue.</strong\n      >\n    </noscript>\n    <div id="app"></div>\n\n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(e.p,{children:["可以发现外联的\xa0CSS\xa0链接地址通过\xa0",(0,s.jsx)(e.code,{children:"window.fetch"}),"\xa0请求后被放入\xa0",(0,s.jsx)(e.code,{children:"template"}),"中成为了内联样式。"]}),"\n",(0,s.jsxs)(e.h4,{id:"getexternalstylesheets",children:[(0,s.jsx)(e.code,{children:"getExternalStyleSheets"}),(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#getexternalstylesheets",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在\xa0",(0,s.jsx)(e.code,{children:"getEmbedHTML"}),"\xa0中会通过\xa0",(0,s.jsx)(e.code,{children:"getExternalStyleSheets"}),"获取外联\xa0CSS\xa0文本，如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"\n// for prefetch\nexport function getExternalStyleSheets(styles, fetch = defaultFetch) {\n	return Promise.all(\n		styles.map((styleLink) => {\n			// 如果 styleLink 是内联代码，则以 < 开头\n			// 否则 styleLink 是外链样式表地址\n			if (isInlineCode(styleLink)) {\n				// if it is inline style\n				// 如果是内联样式表，则直接返回内联样式表内容\n                // 例如：去除 <script>console.log('inline script')<\/script> 中的 <script> 和 <\/script>\n				// 只保留内联的脚本内容 console.log('inline script')\n				return getInlineCode(styleLink);\n			} else {\n				// external styles\n				// 如果是外部样式表，则通过 fetch 获取样式表内容\n				// 并将样式表内容缓存到 styleCache 中\n				// 注意这里的 styleCache 存储的是 Promise，而不是样式表内容\n				// 如果再次请求相同的样式表，会直接返回缓存的 Promise\n				// 此时 Promise 的状态如果是 pending，则会等待 Promise resolve 后再返回\n				// 如果 Promise 的状态是 resolved，则直接返回样式表内容\n				// 这样可以避免多次请求相同的样式表\n				return (\n					styleCache[styleLink] ||\n					(styleCache[styleLink] = fetch(styleLink).then((response) =>\n						// 返回样式表内容\n						response.text()\n					))\n				);\n			}\n		})\n	);\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"importentry",children:[(0,s.jsx)(e.code,{children:"importEntry"}),(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#importentry",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["除了 ",(0,s.jsx)(e.code,{children:"importHTML"}),"，",(0,s.jsx)(e.code,{children:"import-html-entry"})," 还提供了\xa0",(0,s.jsx)(e.code,{children:"importEntry"}),"\xa0，两者分别对应 HTML Entry 和 Config Entry 两种加载微应用的配置方式，重新回顾一下执行流程："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:"yuque_diagram (55).jpg"})}),"\n",(0,s.jsxs)(e.p,{children:["Config\xa0Entry\xa0对外提供的 ",(0,s.jsx)(e.code,{children:"importEntry"}),"\xa0API\xa0兼容了\xa0HTML\xa0Entry\xa0的处理，如果传入的\xa0",(0,s.jsx)(e.code,{children:"entry"}),"\xa0仍然是\xa0HTML\xa0地址，那么还会调用",(0,s.jsx)(e.code,{children:"imprtHTML"})," 额外进行处理，否则需要传入\xa0",(0,s.jsx)(e.code,{children:"styles"}),"、",(0,s.jsx)(e.code,{children:"scripts"}),"\xa0以及\xa0",(0,s.jsx)(e.code,{children:"html"}),"\xa0参数，相对于\xa0HTML\xa0Entry\xa0缺少了\xa0HTML\xa0解析 ",(0,s.jsx)(e.code,{children:"processTpl"})," 的过程，如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'export function importEntry(entry, opts = {}) {\n	const {\n		fetch = defaultFetch,\n		getTemplate = defaultGetTemplate,\n		postProcessTemplate,\n	} = opts;\n	const getPublicPath =\n		opts.getPublicPath || opts.getDomain || defaultGetPublicPath;\n\n	if (!entry) {\n		throw new SyntaxError("entry should not be empty!");\n	}\n\n	// html entry\n	if (typeof entry === "string") {\n		return importHTML(entry, {\n			fetch,\n			getPublicPath,\n			getTemplate,\n			postProcessTemplate,\n		});\n	}\n\n	// config entry\n	// 如果 entry 是对象，且 entry 中包含 scripts 和 styles\n	if (Array.isArray(entry.scripts) || Array.isArray(entry.styles)) {\n		const { scripts = [], styles = [], html = "" } = entry;\n		// 通过 getHTMLWithStylePlaceholder 方法将 HTML 中的外链样式表替换为占位符\n		const getHTMLWithStylePlaceholder = (tpl) =>\n			styles.reduceRight(\n				(html, styleSrc) => `${genLinkReplaceSymbol(styleSrc)}${html}`,\n				tpl\n			);\n		// 通过 getHTMLWithScriptPlaceholder 方法将 HTML 中的外链脚本替换为占位符\n		const getHTMLWithScriptPlaceholder = (tpl) =>\n			scripts.reduce(\n				(html, scriptSrc) => `${html}${genScriptReplaceSymbol(scriptSrc)}`,\n				tpl\n			);\n\n		// 基本上和 importHTML 逻辑一致\n		return getEmbedHTML(\n			getTemplate(\n				getHTMLWithScriptPlaceholder(getHTMLWithStylePlaceholder(html))\n			),\n			styles,\n			{ fetch }\n		).then((embedHTML) => ({\n			template: embedHTML,\n			assetPublicPath: getPublicPath(entry),\n			getExternalScripts: () => getExternalScripts(scripts, fetch),\n			getExternalStyleSheets: () => getExternalStyleSheets(styles, fetch),\n			execScripts: (proxy, strictGlobal, opts = {}) => {\n				if (!scripts.length) {\n					return Promise.resolve();\n				}\n				return execScripts(scripts[scripts.length - 1], scripts, proxy, {\n					fetch,\n					strictGlobal,\n					...opts,\n				});\n			},\n		}));\n	} else {\n		throw new SyntaxError("entry scripts or styles should be array!");\n	}\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"getexternalscripts",children:[(0,s.jsx)(e.code,{children:"getExternalScripts"}),(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#getexternalscripts",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们重新回顾一下本课程的示例执行流程，如下所示："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:"yuque_diagram (53).jpg"})}),"\n",(0,s.jsxs)(e.p,{children:["通过上述的红色文本可以发现，在 single-spa 的 ",(0,s.jsx)(e.code,{children:"app"})," 参数中加载微应用时，主要使用了 ",(0,s.jsx)(e.code,{children:"importHTML"}),"、",(0,s.jsx)(e.code,{children:"getExternalScripts"})," 和 ",(0,s.jsx)(e.code,{children:"execScripts"})," 三个 API。"]}),"\n",(0,s.jsxs)(e.p,{children:["至此，我们已经将 ",(0,s.jsx)(e.code,{children:"importHTML"})," 的实现分析完毕，它的主要作用是请求微应用的 HTML 文本，提取 ",(0,s.jsx)(e.code,{children:"scripts"})," 以及返回 ",(0,s.jsx)(e.code,{children:"embedHTML"}),"（将外联样式内嵌到微应用原有的 HTML 中），在主应用中调用 ",(0,s.jsx)(e.code,{children:"importHTML"})," 后，会将获取的 ",(0,s.jsx)(e.code,{children:"embedHTML"})," 挂载到相应的微应用容器元素上。处理了 HTML 的 CSS 样式后，还需要处理微应用的 JS 脚本，通过调用 ",(0,s.jsx)(e.code,{children:"importHTML"})," 后已经将 ",(0,s.jsx)(e.code,{children:"scripts"})," 提取出来，因此接下来可以通过 ",(0,s.jsx)(e.code,{children:"getExternalScripts"})," 请求获取外联的 JS 脚本，它的实现如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// for prefetch\nexport function getExternalScripts(scripts, fetch = defaultFetch) {\n	const fetchScript = (scriptUrl, opts) =>\n		// 如果 scriptUrl 已经请求过，则直接返回缓存的 Promise\n		// 否则通过 fetch 获取脚本内容\n		scriptCache[scriptUrl] ||\n		(scriptCache[scriptUrl] = fetch(scriptUrl, opts).then((response) => {\n			// usually browser treats 4xx and 5xx response of script loading as an error and will fire a script error event\n			// https://stackoverflow.com/questions/5625420/what-http-headers-responses-trigger-the-onerror-handler-on-a-script-tag/5625603\n			if (response.status >= 400) {\n				throw new Error(\n					`${scriptUrl} load failed with status ${response.status}`\n				);\n			}\n			// 返回脚本内容\n			return response.text();\n		}));\n\n	// 通过 Promise.all 获取所有脚本内容\n	// 如果脚本是内联代码，则直接返回内联代码\n	// 如果脚本是外链脚本地址，则通过 fetch 获取脚本内容\n	// 获取的脚本内容会缓存到 scriptCache 中\n	return Promise.all(\n		scripts.map((script) => {\n			// 1. 内联代码\n			// 2. 外链脚本地址\n			if (typeof script === \"string\") {\n				// 如果是内联代码，则直接返回内联代码\n				if (isInlineCode(script)) {\n					// if it is inline script\n					// 例如：'<script>alert(1)<\/script>'\n					// 返回内联代码内容, 例如：'alert(1)'\n					return getInlineCode(script);\n				} else {\n					// external script\n					// 如果是外链脚本地址，则通过 fetch 获取脚本内容\n					return fetchScript(script);\n				}\n\n				// 1. async script\n				// 2. crossOrigin script\n			} else {\n				// use idle time to load async script\n				const { src, async, crossOrigin } = script;\n				// 如果是 crossOrigin 脚本，则需要设置 fetch 的 credentials 为 include\n				const fetchOpts = crossOrigin ? { credentials: \"include\" } : {};\n\n				// 如果是 async 脚本，则通过 requestIdleCallback 在空闲时间内加载脚本\n				if (async) {\n					return {\n						src,\n						async: true,\n						content: new Promise((resolve, reject) =>\n							requestIdleCallback(() =>\n								fetchScript(src, fetchOpts).then(resolve, reject)\n							)\n						),\n					};\n				}\n				// 否则直接加载脚本\n				return fetchScript(src, fetchOpts);\n			}\n		})\n	);\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"execscripts",children:[(0,s.jsx)(e.code,{children:"execScripts"}),(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#execscripts",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["请求了所有微应用的\xa0JS\xa0脚本后，需要通过\xa0",(0,s.jsx)(e.code,{children:"execScripts"}),"\xa0执行脚本，它的主要执行流程如下所示："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:"yuque_diagram (61).jpg"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：由于本课程没有使用沙箱隔离，这里不会赘述沙箱隔离相关的内容，感兴趣的同学可以重新回顾 ",(0,s.jsx)(e.a,{href:"https://juejin.cn/book/7258893482318626868/section/7259192856407965711#heading-0",target:"_blank",rel:"noopener noreferrer",children:"原理解析：iframe + Proxy 隔离"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"execScripts"})," 的源码如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const supportsUserTiming =\n	typeof performance !== \"undefined\" &&\n	typeof performance.mark === \"function\" &&\n	typeof performance.clearMarks === \"function\" &&\n	typeof performance.measure === \"function\" &&\n	typeof performance.clearMeasures === \"function\";\n\n/**\n * FIXME to consistent with browser behavior, we should only provide callback way to invoke success and error event\n * @param entry\n * @param scripts\n * @param proxy\n * @param opts\n * @returns {Promise<unknown>}\n */\nexport function execScripts(entry, scripts, proxy = window, opts = {}) {\n	const {\n		fetch = defaultFetch,\n		strictGlobal = false,\n		success,\n		error = () => {},\n		beforeExec = () => {},\n		afterExec = () => {},\n		scopedGlobalVariables = [],\n	} = opts;\n\n	// 如果外部使用 import-html-entry 时没有调用 getExternalScripts 方法获取脚本内容\n	// 调用 execScripts 时会再次获取脚本内容\n	// 如果外部使用 import-html-entry 时已经调用 getExternalScripts 方法获取脚本内容\n	// 此时再次调用时会直接获取 scriptCache 中缓存的脚本内容\n	return (\n		getExternalScripts(scripts, fetch)\n			// scriptsText 是所有脚本内容的数组\n			// 例如：['alert(1)', 'alert(2)', 'alert(3)']\n			.then((scriptsText) => {\n				// 例如：geval('<script>alert(1)<\/script>', 'alert(1)')\n				// scriptSrc 为 '<script>alert(1)<\/script>'\n				// inlineScript 为 'alert(1)'\n				const geval = (scriptSrc, inlineScript) => {\n					// beforeExec 用于处理脚本执行前的逻辑，外部可以通过 beforeExec 方法对脚本进行处理\n					// 例如：rawCode 为 'alert(1)'\n					const rawCode = beforeExec(inlineScript, scriptSrc) || inlineScript;\n					// 获取可执行的脚本内容\n					const code = getExecutableScript(scriptSrc, rawCode, {\n						// proxy 为 window，用于代理全局变量\n						proxy,\n						// 是否是严格模式\n						strictGlobal,\n						// scopedGlobalVariables 为全局变量数组\n						// 例如：['window', 'document', 'location', 'localStorage', 'sessionStorage', 'alert', 'confirm', 'prompt']\n						scopedGlobalVariables,\n					});\n					// 在非严格模式的全局作用域下执行脚本\n					evalCode(scriptSrc, code);\n					// afterExec 用于处理脚本执行后的逻辑，外部可以通过 afterExec 方法对脚本进行处理\n					afterExec(inlineScript, scriptSrc);\n				};\n\n				function exec(scriptSrc, inlineScript, resolve) {\n					const markName = `Evaluating script ${scriptSrc}`;\n					// 用于记录脚本执行的时间\n					const measureName = `Evaluating Time Consuming: ${scriptSrc}`;\n\n					// 如果支持 performance API，则记录脚本执行的时间\n					if (process.env.NODE_ENV === \"development\" && supportsUserTiming) {\n						// mark 用于记录时间点\n						performance.mark(markName);\n					}\n\n					// 如果 scriptSrc 是 entry，则执行 entry 脚本\n					if (scriptSrc === entry) {\n						// 记录入口脚本执行前的 window 对象的第一个属性、第二个属性以及最后一个属性\n						noteGlobalProps(strictGlobal ? proxy : window);\n\n						try {\n							// 执行 entry 脚本\n							geval(scriptSrc, inlineScript);\n							// 获取 entry 脚本执行后导出的生命周期函数\n							const exports =\n								// 通过对比微应用脚本执行之前的 window 对象（noteGlobalProps）和执行之后的 window 对象\n								// 可以计算出微应用脚本执行后新增的全局属性，从而计算出导出的生命周期函数\n								proxy[getGlobalProp(strictGlobal ? proxy : window)] || {};\n\n							// Promise.resolve(exports) 用于返回微应用导出的生命周期函数\n							resolve(exports);\n						} catch (e) {\n							// entry error must be thrown to make the promise settled\n							console.error(\n								`[import-html-entry]: error occurs while executing entry script ${scriptSrc}`\n							);\n							throw e;\n						}\n						// 如果 scriptSrc 不是 entry，则执行普通脚本\n					} else {\n						if (typeof inlineScript === \"string\") {\n							try {\n								// 例如：scriptSrc.src = 'http://localhost:8080/js/app.js'\n								if (scriptSrc?.src) {\n									geval(scriptSrc.src, inlineScript);\n								} else {\n									// 例如： scriptSrc = '<script>alert(1)<\/script>'\n									// 例如： inlineScript = 'alert(1)'\n									geval(scriptSrc, inlineScript);\n								}\n							} catch (e) {\n								// consistent with browser behavior, any independent script evaluation error should not block the others\n								throwNonBlockingError(\n									e,\n									`[import-html-entry]: error occurs while executing normal script ${scriptSrc}`\n								);\n							}\n						} else {\n							// external script marked with async\n							// 执行 async 脚本\n							inlineScript.async &&\n								// 通过 requestIdleCallback 在空闲时间内加载脚本\n								inlineScript?.content\n									.then((downloadedScriptText) =>\n										geval(inlineScript.src, downloadedScriptText)\n									)\n									.catch((e) => {\n										throwNonBlockingError(\n											e,\n											`[import-html-entry]: error occurs while executing async script ${inlineScript.src}`\n										);\n									});\n						}\n					}\n\n					// 如果支持 performance API，则记录脚本执行的时间\n					if (process.env.NODE_ENV === \"development\" && supportsUserTiming) {\n						performance.measure(measureName, markName);\n						performance.clearMarks(markName);\n						performance.clearMeasures(measureName);\n					}\n				}\n\n				function schedule(i, resolvePromise) {\n					// 如果 i < scripts.length，则表明还有脚本需要执行\n					if (i < scripts.length) {\n						// 获取 scriptSrc\n						// 如果是内联代码，则 scriptSrc 是内联代码内容\n						// 如果是外链脚本地址，则 scriptSrc 是外链脚本地址\n						// 例如：\n						// [\n						// 	\"<script>\\n      console.log(\"inline script\");\\n    <\/script>\",\n						// 	\"http://localhost:8080/js/chunk-vendors.js\",\n						// 	\"http://localhost:8080/js/app.js\"\n						// ]\n						const scriptSrc = scripts[i];\n\n						// 获取 inlineScript\n						// inlineScript 是脚本的文本内容\n						const inlineScript = scriptsText[i];\n\n						// 执行脚本\n						exec(scriptSrc, inlineScript, resolvePromise);\n						// resolve the promise while the last script executed and entry not provided\n						if (!entry && i === scripts.length - 1) {\n							resolvePromise();\n						} else {\n							schedule(i + 1, resolvePromise);\n						}\n					}\n				}\n\n				// 开始执行所有的脚本\n				return new Promise((resolve) => schedule(0, success || resolve));\n			})\n			.catch((e) => {\n				error();\n				throw e;\n			})\n	);\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"getExecutableScript"}),"\xa0的实现如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// 如果 style 或 script 是内联代码，则以 < 开头\nconst isInlineCode = (code) => code.startsWith("<");\n\nfunction getExecutableScript(scriptSrc, scriptText, opts = {}) {\n	const { proxy, strictGlobal, scopedGlobalVariables = [] } = opts;\n\n	// 如果 scriptSrc 是内联代码，则不需要设置 sourceURL\n	const sourceUrl = isInlineCode(scriptSrc)\n		? ""\n		: // 否则设置 sourceURL 为 scriptSrc\n		  `//# sourceURL=${scriptSrc}\\n`;\n\n	// 将 scopedGlobalVariables 拼接成变量声明，用于缓存全局变量，避免每次使用时都走一遍代理\n\n	// 这里用于节省性能，防止每次使用全局变量时都需要通过代理获取\n	// 在 qiankun 中为了使内部的微应用执行可以快速访问 history、location 等，\n	// 专门进行了作用域内的局部声明，从而防止作用域链查找带来的性能损耗\n	const scopedGlobalVariableDefinition = scopedGlobalVariables.length\n		? `const {${scopedGlobalVariables.join(",")}}=this;`\n		: "";\n\n	// 通过这种方式获取全局 window，因为 script 也是在全局作用域下运行的，所以我们通过 window.proxy 绑定时也必须确保绑定到全局 window 上\n	// 否则在嵌套场景下， window.proxy 设置的是内层应用的 window，而代码其实是在全局作用域运行的，会导致闭包里的 window.proxy 取的是最外层的微应用的 proxy\n\n	// "嵌套场景" 指的是在一个 iframe 或 Web Worker 中运行代码。\n	// 例如，有一个主页面，它包含一个 iframe，这个 iframe 又包含另一个 iframe，这就是一个嵌套的场景。\n\n	// 在这种情况下，每个 iframe 都有自己的 window 对象，这些 window 对象是嵌套的。\n	// 主页面的 window 对象是最外层的 window 对象，第一个 iframe 的 window 对象是第二层，第二个 iframe 的 window 对象是第三层，依此类推。\n\n	// 这段代码的目的是确保 window.proxy 绑定到全局的 window 对象，而不是内层 iframe 应用的 window 对象。\n	// 这样，即使代码在全局作用域运行，闭包里的 window.proxy 也能取到最外层的代理对象。\n	const globalWindow = (0, eval)("window");\n	globalWindow.proxy = proxy;\n	// TODO 通过 strictGlobal 方式切换 with 闭包，待 with 方式坑趟平后再合并\n	return strictGlobal\n		? scopedGlobalVariableDefinition\n			? // 关于 Proxy + with 详见课程 iframe + Proxy 隔离：https://juejin.cn/book/7258893482318626868/section/7259192856407965711#heading-2\n			  // 当然在这里使用 with 是因为 scopedGlobalVariableDefinition 里面的变量是需要在 with 作用域下的，使用 with 可以缩短作用域链查找的时间\n			  `;(function(){with(this){${scopedGlobalVariableDefinition}${scriptText}\\n${sourceUrl}}}).bind(window.proxy)();`\n			: `;(function(window, self, globalThis){with(window){;${scriptText}\\n${sourceUrl}}}).bind(window.proxy)(window.proxy, window.proxy, window.proxy);`\n		: // globalThis: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis\n		  // globalThis 指代 window 对象，本质上是为了解决不同环境的代码移植性问题\n		  `;(function(window, self, globalThis){;${scriptText}\\n${sourceUrl}}).bind(window.proxy)(window.proxy, window.proxy, window.proxy);`;\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["其中\xa0",(0,s.jsx)(e.code,{children:"evalCode"}),"的实现如下所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// 在非严格模式的全局作用域中执行 JavaScript 代码，同时缓存已经解析过的代码\nexport function evalCode(scriptSrc, code) {\n	// 例如：scriptSrc = 'http://localhost:8080/entry.js'\n	// 例如：scriptSrc = '<script>var a = 123;<\/script>'\n	// 例如：code: ;(function(window, self, globalThis){;\n	//   var a = 123;\n	// }).bind(window.proxy)(window.proxy, window.proxy, window.proxy);\n	const key = scriptSrc;\n	// 检测是否已经缓存了该代码\n	if (!evalCache[key]) {\n		// 例如： (function(){;(function(window, self, globalThis){;var a = 123;}).bind(window.proxy)(window.proxy, window.proxy, window.proxy);})'\n		// 例如： (function(){;(function(){with(this){var a = 123;}}).bind(window.proxy)();})'\n		const functionWrappedCode = `(function(){${code}})`;\n		// 通过 (0, eval) 执行的函数，其作用域是全局作用域\n		// 因此这里得到了一个在全局作用域下执行的函数\n\n		// 除此之外，间接调用的 eval（0,eval） 还会在非严格模式下执行代码，因此内部可以使用 with 语句（默认情况下严格模式才能使用 with）\n		// 当然，如果显示指定 \"use strict\"，则会在严格模式下执行代码；例如：(0, eval(\"use strict; var a = 123;\"))\n		// 在严格模式下间接调用 eval （0,eval）也是非严格模式下执行\n		evalCache[key] = (0, eval)(functionWrappedCode);\n	}\n	// evalFun 是一个函数，该函数因为使用了 (0, eval)，所在是在全局作用域下执行\n	const evalFunc = evalCache[key];\n	// 执行 evalFunc 函数\n	evalFunc.call(window);\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"小结",children:["小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["本课程通过改造已有的 ",(0,s.jsx)(e.code,{children:"single-spa"})," 示例，结合 ",(0,s.jsx)(e.code,{children:"import-html-entry"})," 的使用和源码解析，使大家对 HTML Entry 的功能有了详细的认知，其实在 qiankun 的源码实现中，就是将这两者结合起来使用，并增强了微应用脚本的沙箱隔离能力。在下一个课程中，我们会详细讲解 qiankun 的内部实现。"]})]})}function x(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(y,{...n})}):y(n)}let g=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F25.%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90%EF%BC%9Aimport-html-entry%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.md"]={toc:[{text:"import-html-entry",id:"import-html-entry",depth:2},{text:"使用示例",id:"使用示例",depth:2},{text:"import-html-entry",id:"import-html-entry-1",depth:3},{text:"主应用设计",id:"主应用设计",depth:3},{text:"微应用设计",id:"微应用设计",depth:3},{text:"源码解析",id:"源码解析",depth:2},{text:"importHTML",id:"importhtml",depth:3},{text:"`processTpl`",id:"processtpl",depth:4},{text:"`getEmbedHTML`",id:"getembedhtml",depth:4},{text:"`getExternalStyleSheets`",id:"getexternalstylesheets",depth:4},{text:"`importEntry`",id:"importentry",depth:3},{text:"`getExternalScripts`",id:"getexternalscripts",depth:2},{text:"`execScripts`",id:"execscripts",depth:2},{text:"小结",id:"小结",depth:2}],title:"25.框架解析：import-html-entry 源码解析",headingTitle:"25.框架解析：import-html-entry 源码解析",frontmatter:{}}}}]);