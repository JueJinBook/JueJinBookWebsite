"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["98282"],{423980:function(e,s,n){n.r(s),n.d(s,{default:()=>c});var d=n(552676),i=n(740453);function r(e){let s=Object.assign({h1:"h1",a:"a",p:"p",img:"img",h2:"h2",strong:"strong",code:"code",pre:"pre",ol:"ol",li:"li"},(0,i.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(s.h1,{id:"13原理-3未雨绸缪--持久化",children:["13原理 3：未雨绸缪 —— 持久化",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#13原理-3未雨绸缪--持久化",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"Redis 的数据全部在内存里，如果突然宕机，数据就会全部丢失，因此必须有一种机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的持久化机制。"}),"\n",(0,d.jsx)(s.p,{children:"Redis 的持久化机制有两种，第一种是快照，第二种是 AOF 日志。快照是一次全量备份，AOF 日志是连续的增量备份。快照是内存数据的二进制序列化形式，在存储上非常紧凑，而 AOF 日志记录的是内存数据修改的指令记录文本。AOF 日志在长期的运行过程中会变的无比庞大，数据库重启时需要加载 AOF 日志进行指令重放，这个时间就会无比漫长。所以需要定期进行 AOF 重写，给 AOF 日志进行瘦身。"}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/7/10/164820eb27b6a97e?w=667&h=259&f=png&s=19059",alt:""})}),"\n",(0,d.jsxs)(s.h2,{id:"快照原理",children:["快照原理",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#快照原理",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"我们知道 Redis 是单线程程序，这个线程要同时负责多个客户端套接字的并发读写操作和内存数据结构的逻辑读写。"}),"\n",(0,d.jsx)(s.p,{children:"在服务线上请求的同时，Redis 还需要进行内存快照，内存快照要求 Redis 必须进行文件 IO 操作，可文件 IO 操作是不能使用多路复用 API。"}),"\n",(0,d.jsxs)(s.p,{children:["这意味着单线程同时在服务线上的请求还要进行文件 IO 操作，文件 IO 操作会严重拖垮服务器请求的性能。还有个",(0,d.jsx)(s.strong,{children:"重要的问题是为了不阻塞线上的业务，就需要边持久化边响应客户端请求"}),"。持久化的同时，内存数据结构还在改变，比如一个大型的 hash 字典正在持久化，结果一个请求过来把它给删掉了，还没持久化完呢，这尼玛要怎么搞？"]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"那该怎么办呢？"})}),"\n",(0,d.jsx)(s.p,{children:"Redis 使用操作系统的多进程 COW(Copy On Write) 机制来实现快照持久化，这个机制很有意思，也很少人知道。多进程 COW 也是鉴定程序员知识广度的一个重要指标。"}),"\n",(0,d.jsxs)(s.h2,{id:"fork多进程",children:["fork(多进程)",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#fork多进程",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["Redis 在持久化时会调用 glibc 的函数",(0,d.jsx)(s.code,{children:"fork"}),"产生一个子进程，快照持久化完全交给子进程来处理，父进程继续处理客户端请求。子进程刚刚产生时，它和父进程共享内存里面的代码段和数据段。这时你可以将父子进程想像成一个连体婴儿，共享身体。这是 Linux 操作系统的机制，为了节约内存资源，所以尽可能让它们共享起来。在进程分离的一瞬间，内存的增长几乎没有明显变化。"]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/5/18/163712a9f9d0c3cf?w=493&h=255&f=png&s=212826",alt:""})}),"\n",(0,d.jsxs)(s.p,{children:["用 Python 语言描述进程分离的逻辑如下。",(0,d.jsx)(s.code,{children:"fork"}),"函数会在父子进程同时返回，在父进程里返回子进程的 pid，在子进程里返回零。如果操作系统内存资源不足，pid 就会是负数，表示",(0,d.jsx)(s.code,{children:"fork"}),"失败。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-py",children:"pid = os.fork()\nif pid > 0:\n    handle_client_requests()  # 父进程继续处理客户端请求\nif pid == 0:\n    handle_snapshot_write()  # 子进程处理快照写磁盘\nif pid < 0:\n    # fork error\n"})}),"\n",(0,d.jsx)(s.p,{children:"子进程做数据持久化，它不会修改现有的内存数据结构，它只是对数据结构进行遍历读取，然后序列化写到磁盘中。但是父进程不一样，它必须持续服务客户端请求，然后对内存数据结构进行不间断的修改。"}),"\n",(0,d.jsx)(s.p,{children:"这个时候就会使用操作系统的 COW 机制来进行数据段页面的分离。数据段是由很多操作系统的页面组合而成，当父进程对其中一个页面的数据进行修改时，会将被共享的页面复制一份分离出来，然后对这个复制的页面进行修改。这时子进程相应的页面是没有变化的，还是进程产生时那一瞬间的数据。"}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/5/18/163711de3e2b6cb8?w=461&h=364&f=png&s=20109",alt:""})}),"\n",(0,d.jsx)(s.p,{children:"随着父进程修改操作的持续进行，越来越多的共享页面被分离出来，内存就会持续增长。但是也不会超过原有数据内存的 2 倍大小。另外一个 Redis 实例里冷数据占的比例往往是比较高的，所以很少会出现所有的页面都会被分离，被分离的往往只有其中一部分页面。每个页面的大小只有 4K，一个 Redis 实例里面一般都会有成千上万的页面。"}),"\n",(0,d.jsx)(s.p,{children:"子进程因为数据没有变化，它能看到的内存里的数据在进程产生的一瞬间就凝固了，再也不会改变，这也是为什么 Redis 的持久化叫「快照」的原因。接下来子进程就可以非常安心的遍历数据了进行序列化写磁盘了。"}),"\n",(0,d.jsxs)(s.h2,{id:"aof-原理",children:["AOF 原理",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#aof-原理",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"AOF 日志存储的是 Redis 服务器的顺序指令序列，AOF 日志只记录对内存进行修改的指令记录。"}),"\n",(0,d.jsx)(s.p,{children:"假设 AOF 日志记录了自 Redis 实例创建以来所有的修改性指令序列，那么就可以通过对一个空的 Redis 实例顺序执行所有的指令，也就是「重放」，来恢复 Redis 当前实例的内存数据结构的状态。"}),"\n",(0,d.jsx)(s.p,{children:"Redis 会在收到客户端修改指令后，进行参数校验进行逻辑处理后，如果没问题，就立即将该指令文本存储到 AOF 日志中，也就是先执行指令才将日志存盘。这点不同于leveldb、hbase等存储引擎，它们都是先存储日志再做逻辑处理。"}),"\n",(0,d.jsx)(s.p,{children:"Redis 在长期运行的过程中，AOF 的日志会越变越长。如果实例宕机重启，重放整个 AOF 日志会非常耗时，导致长时间 Redis 无法对外提供服务。所以需要对 AOF 日志瘦身。"}),"\n",(0,d.jsxs)(s.h2,{id:"aof-重写",children:["AOF 重写",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#aof-重写",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"Redis 提供了 bgrewriteaof 指令用于对 AOF 日志进行瘦身。其原理就是开辟一个子进程对内存进行遍历转换成一系列 Redis 的操作指令，序列化到一个新的 AOF 日志文件中。序列化完毕后再将操作期间发生的增量 AOF 日志追加到这个新的 AOF 日志文件中，追加完毕后就立即替代旧的 AOF 日志文件了，瘦身工作就完成了。"}),"\n",(0,d.jsxs)(s.h2,{id:"fsync",children:["fsync",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#fsync",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"AOF 日志是以文件的形式存在的，当程序对 AOF 日志文件进行写操作时，实际上是将内容写到了内核为文件描述符分配的一个内存缓存中，然后内核会异步将脏数据刷回到磁盘的。"}),"\n",(0,d.jsx)(s.p,{children:"这就意味着如果机器突然宕机，AOF 日志内容可能还没有来得及完全刷到磁盘中，这个时候就会出现日志丢失。那该怎么办？"}),"\n",(0,d.jsxs)(s.p,{children:["Linux 的",(0,d.jsx)(s.code,{children:"glibc"}),"提供了",(0,d.jsx)(s.code,{children:"fsync(int fd)"}),"函数可以将指定文件的内容强制从内核缓存刷到磁盘。只要 Redis 进程实时调用 fsync 函数就可以保证 aof 日志不丢失。但是 fsync 是一个磁盘 IO 操作，它很慢！如果 Redis 执行一条指令就要 fsync 一次，那么 Redis 高性能的地位就不保了。"]}),"\n",(0,d.jsx)(s.p,{children:"所以在生产环境的服务器中，Redis 通常是每隔 1s 左右执行一次 fsync 操作，周期 1s 是可以配置的。这是在数据安全性和性能之间做了一个折中，在保持高性能的同时，尽可能使得数据少丢失。"}),"\n",(0,d.jsx)(s.p,{children:"Redis 同样也提供了另外两种策略，一个是永不 fsync——让操作系统来决定何时同步磁盘，很不安全，另一个是来一个指令就 fsync 一次——非常慢。但是在生产环境基本不会使用，了解一下即可。"}),"\n",(0,d.jsxs)(s.h2,{id:"运维",children:["运维",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#运维",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"快照是通过开启子进程的方式进行的，它是一个比较耗资源的操作。"}),"\n",(0,d.jsxs)(s.ol,{children:["\n",(0,d.jsx)(s.li,{children:"遍历整个内存，大块写磁盘会加重系统负载"}),"\n",(0,d.jsx)(s.li,{children:"AOF 的 fsync 是一个耗时的 IO 操作，它会降低 Redis 性能，同时也会增加系统 IO 负担"}),"\n"]}),"\n",(0,d.jsx)(s.p,{children:"所以通常 Redis 的主节点是不会进行持久化操作，持久化操作主要在从节点进行。从节点是备份节点，没有来自客户端请求的压力，它的操作系统资源往往比较充沛。"}),"\n",(0,d.jsx)(s.p,{children:"但是如果出现网络分区，从节点长期连不上主节点，就会出现数据不一致的问题，特别是在网络分区出现的情况下又不小心主节点宕机了，那么数据就会丢失，所以在生产环境要做好实时监控工作，保证网络畅通或者能快速修复。另外还应该再增加一个从节点以降低网络分区的概率，只要有一个从节点数据同步正常，数据也就不会轻易丢失。"}),"\n",(0,d.jsxs)(s.h2,{id:"redis-40-混合持久化",children:["Redis 4.0 混合持久化",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#redis-40-混合持久化",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"重启 Redis 时，我们很少使用 rdb 来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 rdb 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。"}),"\n",(0,d.jsx)(s.p,{children:"Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。将 rdb 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是自持久化开始到持久化结束的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小。"}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/7/10/164821272ae19ebb?w=816&h=382&f=png&s=21479",alt:""})}),"\n",(0,d.jsx)(s.p,{children:"于是在 Redis 重启的时候，可以先加载 rdb 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，重启效率因此大幅得到提升。"}),"\n",(0,d.jsxs)(s.h2,{id:"思考题",children:["思考题",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,d.jsxs)(s.ol,{children:["\n",(0,d.jsx)(s.li,{children:"有人说 Redis 只适合用来做缓存，当数据库来用并不合适，你怎么看？"}),"\n",(0,d.jsx)(s.li,{children:"为什么 Redis 先执行指令再记录aof日志而不是像其它存储引擎一样反过来呢？"}),"\n"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,i.ah)(),e.components);return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(r,{...e})}):r(e)}let c=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Redis%20%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F13%E5%8E%9F%E7%90%86%203%EF%BC%9A%E6%9C%AA%E9%9B%A8%E7%BB%B8%E7%BC%AA%20%E2%80%94%E2%80%94%20%E6%8C%81%E4%B9%85%E5%8C%96.md"]={toc:[{text:"快照原理",id:"快照原理",depth:2},{text:"fork(多进程)",id:"fork多进程",depth:2},{text:"AOF 原理",id:"aof-原理",depth:2},{text:"AOF 重写",id:"aof-重写",depth:2},{text:"fsync",id:"fsync",depth:2},{text:"运维",id:"运维",depth:2},{text:"Redis 4.0 混合持久化",id:"redis-40-混合持久化",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"13原理 3：未雨绸缪 —— 持久化",headingTitle:"13原理 3：未雨绸缪 —— 持久化",frontmatter:{}}}}]);