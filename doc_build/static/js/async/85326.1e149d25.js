"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["85326"],{679444:function(e,n,r){e.exports=r.p+"static/image/04be26441e4e860f33c7c174439663b0.718d049f.webp"},934447:function(e,n,r){e.exports=r.p+"static/image/211aea91ae8ddcc0c6f7e0ba63b5fd57.ad7996bf.webp"},926308:function(e,n,r){e.exports=r.p+"static/image/2838042fbcdaa8ed79443d2fe33853b4.f43013b2.webp"},438236:function(e,n,r){e.exports=r.p+"static/image/33baa295a7992e94d8075f6458d73294.47921b51.webp"},481707:function(e,n,r){e.exports=r.p+"static/image/3ec207011e933bdee56aa1c59f09b08a.434d2e55.webp"},632738:function(e,n,r){e.exports=r.p+"static/image/4123d9612454c7e1bfedaf27d25530be.d623a86d.webp"},833657:function(e,n,r){e.exports=r.p+"static/image/414a519fadc7ed075c93e72963f166dd.802fbcd5.webp"},75345:function(e,n,r){e.exports=r.p+"static/image/743e328bf3d13bdc32fed2d6db04b6ae.b7850a64.webp"},342620:function(e,n,r){e.exports=r.p+"static/image/860a7c6933cfefca85a3a8963a7af424.9454b595.webp"},901277:function(e,n,r){e.exports=r.p+"static/image/c30a0190c2e6c4248f0ee3342ccc99f2.3390b406.webp"},463106:function(e,n,r){e.exports=r.p+"static/image/c4436f7b5587883e3681fd3f821451d9.4fd293eb.webp"},737751:function(e,n,r){e.exports=r.p+"static/image/ca3bd5f802c9de4033a8c45b88b94f89.afde83ff.webp"},738206:function(e,n,r){e.exports=r.p+"static/image/ce6a03c519e64a7088e81d1922303eb1.07fdf98e.webp"},885610:function(e,n,r){e.exports=r.p+"static/image/e2ec33a3148a92b35636d489032ffcf6.1257686a.webp"},867123:function(e,n,r){e.exports=r.p+"static/image/eb087f71dfe98648de820e1440cd0422.e6773e29.webp"},473064:function(e,n,r){e.exports=r.p+"static/image/f0ea1660b5318a5d385f20fb9cda6dc4.44ee6f8c.webp"},46544:function(e,n,r){r.r(n),r.d(n,{default:()=>J});var s=r(552676),i=r(740453),c=r(833657),t=r(342620),a=r(885610),d=r(679444),l=r(438236),p=r(481707);let o=r.p+"static/image/120969d4f84c48f1825066a9aa3675c8.545bd79f.webp",h=r.p+"static/image/2333e52ac1a0d79db6e9249d89965e64.caf4085b.webp",j=r.p+"static/image/d52e325ff7589d768ccc542646d45efe.af6f2bde.webp",x=r.p+"static/image/80a29ad889274a2103c93afff57cc0f8.93cce9d2.webp",m=r.p+"static/image/aac42e4039a8f71704f03500a53fc5d5.3bc453a6.webp",g=r.p+"static/image/872acb916fe18ba79605cad2de8b9f5f.6831f5d5.webp";var b=r(737751),u=r(75345);let f=r.p+"static/image/298343ceeee1ff688fa701946933fe1e.e95f5a6a.webp",v=r.p+"static/image/5353e5a69ea327fffc3b52845e9e35b2.5eeb2503.webp";var w=r(934447);let S=r.p+"static/image/2b30171c19fcb3b75aa0b5d7acd8113c.927dcf17.webp",E=r.p+"static/image/4af914e5a0858316188b2ec857fde56b.5af917a2.webp",y=r.p+"static/image/75b45c1fd76d668064955fdf2807b1ad.45d4523e.webp",R=r.p+"static/image/dfcb3b348e0f80c35188599c25bbc598.91e5923f.webp",A=r.p+"static/image/c8d5cdb51d1c4a46aabfa9f3056a4afd.b6a5e042.webp",C=r.p+"static/image/d5a2c188de9f8b8813a707441777538f.d5687ba5.webp";var P=r(473064);let I=r.p+"static/image/c97fa0140804fe1a1c6fd7d085407895.57e05a42.webp";var U=r(738206);let k=r.p+"static/image/59addffffe47be17f7e7acca00e68609.1eb98354.webp",N=r.p+"static/image/186afa977a54d34c87da8d143823ab05.0b12abc3.webp",T=r.p+"static/image/e7a67b5f310c385a73902b407dc7c350.ed5c54aa.webp",_=r.p+"static/image/6223d59c428b658efd3e810ec0b722ee.9931a260.webp",D=r.p+"static/image/073c551406bb67d65ea2bc48a45af764.36a8a92e.webp",M=r.p+"static/image/6dbf2c9fa44213bb9e1ac6416f521cb0.5fd2c9a7.webp",B=r.p+"static/image/11ae6bf31de8e0ce8d0f3442be69b3b8.ec9a1d21.webp";var q=r(901277),H=r(632738);let V=r.p+"static/image/202b7b43b2a9f549209faf0af9eb475b.f538675e.webp",G=r.p+"static/image/20ca4ace1153c1e3a353eb7ba5cba8df.db2e801e.webp";var L=r(867123),O=r(926308),Q=r(463106);let $=r.p+"static/image/d5963d2e93c8f927978d43961db84a4d.89727bf5.webp";function F(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h2:"h2"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"177-聊天室用户注册",children:["177. 聊天室：用户注册",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#177-聊天室用户注册",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节正式进入开发，我们先来开发注册功能。"}),"\n",(0,s.jsx)(n.p,{children:"创建个 nest 项目："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest new chat-room-backend\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:$,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 docker desktop 里把 mysql 的容器跑起来："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Q,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"进入项目，安装 prisma"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install prisma --save-dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后执行 prisma init 创建 schema 文件："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npx prisma init\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:O,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:L,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"改下 .env 的配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'DATABASE_URL="mysql://root:你的密码@localhost:3306/chat-room"\n'})}),"\n",(0,s.jsx)(n.p,{children:"并且修改下 schema 里的 datasource 部分："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'datasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"然后创建 model。"}),"\n",(0,s.jsx)(n.p,{children:"上节分析过用户表的结构："}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"字段名"}),"\n",(0,s.jsx)(n.th,{children:"数据类型"}),"\n",(0,s.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"id"}),"\n",(0,s.jsx)(n.td,{children:"INT"}),"\n",(0,s.jsx)(n.td,{children:"用户ID"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"username"}),"\n",(0,s.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,s.jsx)(n.td,{children:"用户名"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"password"}),"\n",(0,s.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,s.jsx)(n.td,{children:"密码"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"nick_name"}),"\n",(0,s.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,s.jsx)(n.td,{children:"昵称"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"email"}),"\n",(0,s.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,s.jsx)(n.td,{children:"邮箱"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"head_pic"}),"\n",(0,s.jsx)(n.td,{children:"VARCHAR(100)"}),"\n",(0,s.jsx)(n.td,{children:"头像"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"create_time"}),"\n",(0,s.jsx)(n.td,{children:"DATETIME"}),"\n",(0,s.jsx)(n.td,{children:"创建时间"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"update_time"}),"\n",(0,s.jsx)(n.td,{children:"DATETIME"}),"\n",(0,s.jsx)(n.td,{children:"更新时间"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"创建对应的 modal："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\nmodel User {\n  id  Int @id @default(autoincrement())\n  username String @db.VarChar(50) @unique\n  password String @db.VarChar(50)\n  nickName String @db.VarChar(50)\n  email String @db.VarChar(50)\n  headPic String @db.VarChar(100) @default("")\n  createTime DateTime @default(now())\n  updateTime DateTime @updatedAt\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"注意，这里 username 要添加唯一约束。"}),"\n",(0,s.jsx)(n.p,{children:"在 mysql workbench 里创建 chat-room 的数据库："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"先 migrate reset，重置下数据库："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npx prisma migrate reset \n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:H,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后创建新的 migration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npx prisma migrate dev --name user\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这时就生成了迁移文件，包含创建 user 表的 sql 语句："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 mysql workbench 里可以看到创建好的 user 表："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"并且 migrate dev 还会生成 client 代码，接下来我们就可以直接来做 CRUD 了。"}),"\n",(0,s.jsx)(n.p,{children:"创建个 module 和 service："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g module prisma\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g service prisma --no-spec\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"改下 PrismaService，继承 PrismaClient，这样它就有 crud 的 api 了："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n\n    constructor() {\n        super({\n            log: [\n                {\n                    emit: 'stdout',\n                    level: 'query'\n                }\n            ]\n        })\n    }\n\n    async onModuleInit() {\n        await this.$connect();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 constructor 里设置 PrismaClient 的 log 参数，也就是打印 sql 到控制台。"}),"\n",(0,s.jsx)(n.p,{children:"在 onModuleInit 的生命周期方法里调用 $connect 来连接数据库。"}),"\n",(0,s.jsx)(n.p,{children:"然后把 PrismaService 导出，并且设置 PrismaModule 为全局模块："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样各处就都可以注入 PrismaService 用了。"}),"\n",(0,s.jsx)(n.p,{children:"然后创建 user 模块："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g resource user\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 UserService 里注入 PrismaService 来做 crud："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { Prisma } from '@prisma/client';\n\n@Injectable()\nexport class UserService {\n\n  @Inject(PrismaService)\n  private prisma: PrismaService;\n\n  async create(data: Prisma.UserCreateInput) {\n      return await this.prisma.user.create({\n          data,\n          select: {\n              id: true\n          }\n      });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"写代码的时候你会发现，参数的类型 prisma 都给你生成好了，直接用就行："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"user 模块有这些接口："}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"接口路径"}),"\n",(0,s.jsx)(n.th,{children:"请求方式"}),"\n",(0,s.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/user/login"}),"\n",(0,s.jsx)(n.td,{children:"POST"}),"\n",(0,s.jsx)(n.td,{children:"用户登录"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/user/register"}),"\n",(0,s.jsx)(n.td,{children:"POST"}),"\n",(0,s.jsx)(n.td,{children:"用户注册"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/user/update"}),"\n",(0,s.jsx)(n.td,{children:"POST"}),"\n",(0,s.jsx)(n.td,{children:"用户个人信息修改"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/user/update_password"}),"\n",(0,s.jsx)(n.td,{children:"POST"}),"\n",(0,s.jsx)(n.td,{children:"用户修改密码"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"我们这节实现注册："}),"\n",(0,s.jsx)(n.p,{children:"在 UserController 增加一个 post 接口："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { RegisterUserDto } from './dto/register-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('register')\n  async register(@Body() registerUser: RegisterUserDto) {\n      return await this.userService.create(registerUser);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"dto 是封装 body 里的请求参数的，根据界面上要填的信息，创建 dto："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"创建 user/dto/register-user.dto.ts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export class RegisterUserDto{\n    username: string;\n\n    password: string;\n\n    nickName: string;\n\n    email: string;\n\n    captcha: string;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 postman 里调用下试试："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n    "username": "guang",\n    "nickName": "神说要有光",\n    "password": "123456",\n    "email": "xxxx@xx.com",\n    "captcha": "abc123"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"报错了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"数据库中没有 captcha 的字段。"}),"\n",(0,s.jsx)(n.p,{children:"我们要在调用 service 之前删掉它："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"再试一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"服务端打印了 insert 的 sql 语句："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"数据库里也可以看到这条记录："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后加一下 ValidationPipe，来对请求体做校验。"}),"\n",(0,s.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save class-validator class-transformer\n"})}),"\n",(0,s.jsx)(n.p,{children:"全局启用 ValidationPipe："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"app.useGlobalPipes(new ValidationPipe());\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后加一下校验规则："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { IsEmail, IsNotEmpty, MinLength } from \"class-validator\";\n\nexport class RegisterUserDto {\n\n    @IsNotEmpty({\n        message: \"用户名不能为空\"\n    })\n    username: string;\n    \n    @IsNotEmpty({\n        message: '昵称不能为空'\n    })\n    nickName: string;\n    \n    @IsNotEmpty({\n        message: '密码不能为空'\n    })\n    @MinLength(6, {\n        message: '密码不能少于 6 位'\n    })\n    password: string;\n    \n    @IsNotEmpty({\n        message: '邮箱不能为空'\n    })\n    @IsEmail({}, {\n        message: '不是合法的邮箱格式'\n    })\n    email: string;\n    \n    @IsNotEmpty({\n        message: '验证码不能为空'\n    })\n    captcha: string;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(n.p,{children:"然后实现注册的逻辑。"}),"\n",(0,s.jsx)(n.p,{children:"注册的逻辑是这样的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们需要先封装个 redis 模块。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g module redis\nnest g service redis --no-spec\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"安装 redis 的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save redis\n"})}),"\n",(0,s.jsx)(n.p,{children:"确保 redis 的 docker 容器是启动的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"添加连接 redis 的 provider"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Global, Module } from '@nestjs/common';\nimport { RedisService } from './redis.service';\nimport { createClient } from 'redis';\n\n@Global()\n@Module({\n  providers: [\n    RedisService,\n    {\n      provide: 'REDIS_CLIENT',\n      async useFactory() {\n        const client = createClient({\n            socket: {\n                host: 'localhost',\n                port: 6379\n            },\n            database: 2\n        });\n        await client.connect();\n        return client;\n      }\n    }\n  ],\n  exports: [RedisService]\n})\nexport class RedisModule {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"用 @Global() 把它声明为全局模块，这样只需要在 AppModule 里引入，别的模块不用引入也可以注入 RedisService 了。"}),"\n",(0,s.jsx)(n.p,{children:"database 指定为 2，默认是 0"}),"\n",(0,s.jsx)(n.p,{children:"这个 database 就是把存储的 key-value 的数据放到不同命名空间下，避免冲突。"}),"\n",(0,s.jsx)(n.p,{children:"然后写下 RedisService"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Inject, Injectable } from '@nestjs/common';\nimport { RedisClientType } from 'redis';\n\n@Injectable()\nexport class RedisService {\n\n    @Inject('REDIS_CLIENT') \n    private redisClient: RedisClientType;\n\n    async get(key: string) {\n        return await this.redisClient.get(key);\n    }\n\n    async set(key: string, value: string | number, ttl?: number) {\n        await this.redisClient.set(key, value);\n\n        if(ttl) {\n            await this.redisClient.expire(key, ttl);\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"注入 redisClient，实现 get、set 方法，set 方法支持指定过期时间。"}),"\n",(0,s.jsx)(n.p,{children:"然后继续实现 register 方法。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { HttpException, HttpStatus, Inject, Injectable, Logger } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { RedisService } from 'src/redis/redis.service';\nimport { RegisterUserDto } from './dto/register-user.dto';\n\n@Injectable()\nexport class UserService {\n\n  @Inject(PrismaService)\n  private prismaService: PrismaService;\n\n  @Inject(RedisService)\n  private redisService: RedisService;\n\n  private logger = new Logger();\n\n  async register(user: RegisterUserDto) {\n      const captcha = await this.redisService.get(`captcha_${user.email}`);\n\n      if(!captcha) {\n          throw new HttpException('验证码已失效', HttpStatus.BAD_REQUEST);\n      }\n\n      if(user.captcha !== captcha) {\n          throw new HttpException('验证码不正确', HttpStatus.BAD_REQUEST);\n      }\n\n      const foundUser = await this.prismaService.user.findUnique({\n        where: {\n          username: user.username\n        }\n      });\n\n      if(foundUser) {\n        throw new HttpException('用户已存在', HttpStatus.BAD_REQUEST);\n      }\n\n      try {\n        return await this.prismaService.user.create({\n          data: {\n            username: user.username,\n            password: user.password,\n            nickName: user.nickName,\n            email: user.email\n          },\n          select: {\n            id: true,\n            username: true,\n            nickName: true,\n            email: true,\n            headPic: true,\n            createTime: true\n          }\n        });\n      } catch(e) {\n        this.logger.error(e, UserService);\n        return null;\n      }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"先检查验证码是否正确，如果正确的话，检查用户是否存在，然后用 prismaService.create 插入数据。"}),"\n",(0,s.jsx)(n.p,{children:"失败的话用 Logger 记录错误日志。"}),"\n",(0,s.jsx)(n.p,{children:"这里的 md5 方法放在 src/utils.ts 里，用 node 内置的 crypto 包实现。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import * as crypto from 'crypto';\n\nexport function md5(str) {\n    const hash = crypto.createHash('md5');\n    hash.update(str);\n    return hash.digest('hex');\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 UserController 里调用下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { RegisterUserDto } from './dto/register-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('register')\n  async register(@Body() registerUser: RegisterUserDto) {\n    return await this.userService.register(registerUser);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后在 postman 里测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"因为还没实现发送邮箱验证码的逻辑，这里我们手动在 redis 添加一个 key："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:"带上错误的验证码，返回验证码不正确；"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:j,alt:""}),"\n带上正确的验证码，注册成功："]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:h,alt:""}),"\n这时可以在数据库里看到这条记录："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后我们来实现发送邮箱验证码的功能。"}),"\n",(0,s.jsx)(n.p,{children:"封装个 email 模块："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g resource email --no-spec\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"安装发送邮件用的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install nodemailer --save\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 EmailService 里实现 sendMail 方法"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { createTransport, Transporter} from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n\n    transporter: Transporter\n    \n    constructor() {\n      this.transporter = createTransport({\n          host: \"smtp.qq.com\",\n          port: 587,\n          secure: false,\n          auth: {\n              user: '你的邮箱地址',\n              pass: '你的授权码'\n          },\n      });\n    }\n\n    async sendMail({ to, subject, html }) {\n      await this.transporter.sendMail({\n        from: {\n          name: '聊天室',\n          address: '你的邮箱地址'\n        },\n        to,\n        subject,\n        html\n      });\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"把邮箱地址和授权码改成你自己的。"}),"\n",(0,s.jsxs)(n.p,{children:["具体怎么生成授权码，看前面的 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7226988578700525605/section/7247327089496424505",target:"_blank",rel:"noopener noreferrer",children:"node 发送邮件"}),"那节。"]}),"\n",(0,s.jsx)(n.p,{children:"把 EmailModule 声明为全局的，并且导出 EmailService"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后在 UserController 里添加一个 get 接口："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Inject(EmailService)\nprivate emailService: EmailService;\n\n@Inject(RedisService)\nprivate redisService: RedisService;\n\n@Get('register-captcha')\nasync captcha(@Query('address') address: string) {\n    const code = Math.random().toString().slice(2,8);\n\n    await this.redisService.set(`captcha_${address}`, code, 5 * 60);\n\n    await this.emailService.sendMail({\n      to: address,\n      subject: '注册验证码',\n      html: `<p>你的注册验证码是 ${code}</p>`\n    });\n    return '发送成功';\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"邮件发送成功："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"redis 里也保存了邮箱地址对应的验证码："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"通过邮件发送验证码之后，保存到 redis，注册的时候取出邮箱地址对应的验证码来校验。"}),"\n",(0,s.jsx)(n.p,{children:"这样，整个注册的流程就完成了。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["代码在",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节我们创建了 nest 项目，并引入了 prisma 和 redis。"}),"\n",(0,s.jsx)(n.p,{children:"通过 prisma 的 migrate 功能，生成迁移 sql 并同步到数据库。"}),"\n",(0,s.jsx)(n.p,{children:"此外，prisma 会生成 client 的代码，我们封装了 PrismaService 来做 CRUD。"}),"\n",(0,s.jsx)(n.p,{children:"我们实现了 /user/register 和 /user/register-captcha 两个接口。"}),"\n",(0,s.jsx)(n.p,{children:"/user/register-captcha 会向邮箱地址发送一个包含验证码的邮件，并在 redis 里存一份。"}),"\n",(0,s.jsx)(n.p,{children:"/user/register 会根据邮箱地址查询 redis 中的验证码，验证通过会把用户信息保存到表中。"}),"\n",(0,s.jsx)(n.p,{children:"这样，注册功能就完成了。"})]})}function z(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(F,{...e})}):F(e)}let J=z;z.__RSPRESS_PAGE_META={},z.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F177.%20%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%9A%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"177. 聊天室：用户注册",headingTitle:"177. 聊天室：用户注册",frontmatter:{}}}}]);