"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["63985"],{883116:function(e,n,o){e.exports=o.p+"static/image/114a2c29f62312cd4f1707642f5ee0c5.08803862.webp"},454547:function(e,n,o){o.r(n),o.d(n,{default:()=>u});var t=o(552676),s=o(740453);let l=o.p+"static/image/009d7fd252c833e6eda0eeb2da41ba12.a2700343.webp",r=o.p+"static/image/d6bf03abb6d32beb3b34671c635b4f68.f611a6f5.webp",a=o.p+"static/image/89076bd743d2130cf5924cc7ec8c9e6d.ab652793.webp",d=o.p+"static/image/93c61506c40648d60641ade2cc2affc0.b30ae545.webp";var i=o(883116);let c=o.p+"static/image/05568743f049c7faf7790b6014efd383.a2512f60.webp",p=o.p+"static/image/6d27dee3005ddbb49403565cd6d3c1ac.6de665a6.webp",g=o.p+"static/image/66ff672c0029f707ad2015629f9a44ff.0ad3c6ef.webp";function h(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",img:"img",pre:"pre",strong:"strong",blockquote:"blockquote",h4:"h4"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"37vue3-实战之商品管理wangeditor-富文本插件cascader-组件分类三级联动",children:["37.Vue3 实战之商品管理（wangEditor 富文本插件、Cascader 组件分类三级联动）",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#37vue3-实战之商品管理wangeditor-富文本插件cascader-组件分类三级联动",children:"#"})]}),"\n",(0,t.jsxs)(n.h2,{id:"前言",children:["前言",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["相信 34、35 两个章节，让你对 ",(0,t.jsx)(n.code,{children:"Table"})," 的一些变种需求有所了解，实际业务中常遇到的问题都已经介绍了。你可能会说二级子路由有 ",(0,t.jsx)(n.code,{children:"menu"})," 的情况还没讲到。作为开发人员，需要做到举一反三。35 章节虽然都是同一个 ",(0,t.jsx)(n.code,{children:"menu"})," 上操作，你可以将对应的二级路径写在 ",(0,t.jsx)(n.code,{children:"menu"})," 菜单上便可。"]}),"\n",(0,t.jsx)(n.p,{children:"本章节我们对商品管理进行分析讲解，涉及到的知识点如下所示："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["需要注册的组件：",(0,t.jsx)(n.code,{children:"ElCascader"}),"、",(0,t.jsx)(n.code,{children:"ElRadioGroup"}),"、",(0,t.jsx)(n.code,{children:"ElRadio"}),"。"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"添加商品表单验证。"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"富文本编辑器 wangEditor 的使用。"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"需求分析",children:["需求分析",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#需求分析",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"我们对本章节的需求进行简单分析，首先是商品列表页，如下所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"其次我们点击新增商品按钮，需要跳转到「添加商品」菜单栏，自然是展示一个添加商品的表单页面，表单样式如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["表单内涉及到的内容也基本涵盖了正常业务开发的范畴，如三级联动（动态获取）、文本输入框、数字输入框、",(0,t.jsx)(n.code,{children:"Radio"})," 选项、图片上传、富文本编辑。"]}),"\n",(0,t.jsxs)(n.h2,{id:"商品列表页",children:["商品列表页",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#商品列表页",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"我的开发习惯一般是先开发列表页，再开发列表页的各个操作，如增加、修改、删除、查询。"}),"\n",(0,t.jsxs)(n.p,{children:["首先，把列表页面敲出来，前往 ",(0,t.jsx)(n.code,{children:"App.vue"})," 添加菜单栏，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<el-menu-item index="/good"><el-icon><Goods /></el-icon>商品管理</el-menu-item>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["然后在 ",(0,t.jsx)(n.code,{children:"views"})," 文件夹下下新建 ",(0,t.jsx)(n.code,{children:"Good.vue"})," 文件，添加模板内容："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"template"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<template>\n  <el-card class="swiper-container">\n    <template #header>\n      <div class="header">\n        <el-button type="primary" :icon="Plus" @click="handleAdd">新增商品</el-button>\n      </div>\n    </template>\n    <el-table\n      :load="state.loading"\n      :data="state.tableData"\n      tooltip-effect="dark"\n      style="width: 100%"\n    >\n      <el-table-column\n        prop="goodsId"\n        label="商品编号"\n      >\n      </el-table-column>\n      <el-table-column\n        prop="goodsName"\n        label="商品名"\n      >\n      </el-table-column>\n      <el-table-column\n        prop="goodsIntro"\n        label="商品简介"\n      >\n      </el-table-column>\n      <el-table-column\n        label="商品图片"\n        width="150px"\n      >\n        <template #default="scope">\n          <img style="width: 100px; height: 100px;" :key="scope.row.goodsId" :src="$filters.prefix(scope.row.goodsCoverImg)" alt="商品主图">\n        </template>\n      </el-table-column>\n      <el-table-column\n        prop="stockNum"\n        label="商品库存"\n      >\n      </el-table-column>\n      <el-table-column\n        prop="sellingPrice"\n        label="商品售价"\n      >\n      </el-table-column>\n      <el-table-column\n        label="上架状态"\n      >\n        <template #default="scope">\n          <span style="color: green;" v-if="scope.row.goodsSellStatus == 0">销售中</span>\n          <span style="color: red;" v-else>已下架</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column\n        label="操作"\n        width="100"\n      >\n        <template #default="scope">\n          <a style="cursor: pointer; margin-right: 10px" @click="handleEdit(scope.row.goodsId)">修改</a>\n          <a style="cursor: pointer; margin-right: 10px" v-if="scope.row.goodsSellStatus == 0" @click="handleStatus(scope.row.goodsId, 1)">下架</a>\n          <a style="cursor: pointer; margin-right: 10px" v-else @click="handleStatus(scope.row.goodsId, 0)">上架</a>\n        </template>\n      </el-table-column>\n    </el-table>\n    \x3c!--总数超过一页，再展示分页器--\x3e\n    <el-pagination\n      background\n      layout="prev, pager, next"\n      :total="state.total"\n      :page-size="state.pageSize"\n      :current-page="state.currentPage"\n      @current-change="changePage"\n    />\n  </el-card>\n</template>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["大家可能会问，上述的 ",(0,t.jsx)(n.code,{children:"$filters.prefix"})," 是哪来的，作用是什么？"]}),"\n",(0,t.jsxs)(n.p,{children:["其实开发过程中，很多工具都需要全局设置，方便直接在 ",(0,t.jsx)(n.code,{children:"template"})," 模板内引用。比如上述商品主图，可能会返回一些绝对路径，导致图片加载失败。所以我们需要在 ",(0,t.jsx)(n.code,{children:"main.js"})," 下，声明一个全局方法，代码如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// main.js\n// 全局方法\napp.config.globalProperties.$filters = {\n  prefix(url) {\n    if (url && url.startsWith('http')) {\n      // 当 url 以 http 开头时候，我们返回原路径\n      return url\n    } else {\n      // 否则，我们给路径添加 host，如下\n      url = `http://backend-api-02.newbee.ltd${url}`\n      return url\n    }\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["在模板中直接通过 ",(0,t.jsx)(n.code,{children:"$filters.prefix"})," 使用便可。"]}),"\n",(0,t.jsxs)(n.p,{children:["上述模板结构，我们继续用 ",(0,t.jsx)(n.code,{children:"el-card"})," 组件对页面进行包裹，结构还是 ",(0,t.jsx)(n.code,{children:"el-card"})," 内添加 ",(0,t.jsx)(n.code,{children:"#header"})," 具名插槽，再添加 ",(0,t.jsx)(n.code,{children:"el-table"})," 组件编写列表，最后加上分页组件 ",(0,t.jsx)(n.code,{children:"el-pagination"}),"。"]}),"\n",(0,t.jsx)(n.p,{children:"大家发现一个规律了吗？很多页面都采用了上述的布局结构，也就是说产生了共同点，有心的同学，在课后可以自己对这部分的结构进行组件的抽离，包括获取列表的方法，筛选条件等。这里考虑到同学们学习的顺畅性，就不对这部分内容进行抽离，如果有想了解这块内容的同学，可以在小册的交流群内进行讨论。"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"这里我再次强调一下，el-table 的数据 load 属性从之前的 v-loading 变为 :load，在这里我踩了大坑，调试了很久才发现 element-plus 版本更新后，居然出现了这个问题。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"接下来，在代码中添加相应的逻辑："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"script"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport { onMounted, reactive, ref } from 'vue'\nimport axios from '@/utils/axios'\nimport { ElMessage } from 'element-plus'\nimport { useRouter } from 'vue-router'\n\nconst router = useRouter() // 获取路由实例，内涵路由相关的各种方法。\nconst state = reactive({\n  loading: false, // 列表数据接口返回前的 loadinig\n  tableData: [], // 数据列表\n  total: 0, // 总条数\n  currentPage: 1, // 当前页\n  pageSize: 10 // 分页大小\n})\n// 初始化钩子函数\nonMounted(() => {\n  getGoodList()\n})\n// 获取轮播图列表\nconst getGoodList = () => {\n  state.loading = true\n  axios.get('/goods/list', {\n    params: {\n      pageNumber: state.currentPage, // 当前页\n      pageSize: state.pageSize, // 每页数量\n    }\n  }).then(res => {\n    state.tableData = res.list // 列表数据\n    state.total = res.totalCount // 数据总条数\n    state.currentPage = res.currPage // 当前页\n    state.loading = false // 数据成功返回后，将列表 loading 清除\n  })\n}\n// 添加商品，跳转到 /add 路径下\nconst handleAdd = () => {\n  router.push({ path: '/add' })\n}\n// 编辑商品，带 id 跳转 /add 路径\nconst handleEdit = (id) => {\n  router.push({ path: '/add', query: { id } })\n}\n// 翻页方法\nconst changePage = (val) => {\n  state.currentPage = val\n  getGoodList()\n}\n// 上下架方法\nconst handleStatus = (id, status) => {\n  axios.put(`/goods/status/${status}`, {\n    ids: id ? [id] : []\n  }).then(() => {\n    ElMessage.success('修改成功')\n    getGoodList()\n  })\n}\n<\/script>\n"})}),"\n",(0,t.jsx)(n.p,{children:"列表数据可能有点多，在此为大家一一对照着解释一下数据对应表："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  createTime: "2021-04-17 16:42:43", // 创建时间\n  goodsCarousel: "/admin/dist/img/no-img.png", // 商品轮播图\n  goodsCategoryId: 182, // 商品分类 id\n  goodsCoverImg: "http://backend-api-02.newbee.ltd/upload/20210417_1642416.jpg", // 商品主图\n  goodsDetailContent: null, // 详情内容\n  goodsId: 11000, // 商品 id\n  goodsIntro: "2",\n  goodsName: "1", // 商品名称\n  goodsSellStatus: 1, // 商品上下架状态，0：下架，1：上架\n  originalPrice: 3, // 商品原价\n  sellingPrice: 4, // 商品售价\n  stockNum: 5, // 商品库存\n  tag: "6", // 标签\n  updateTime: "2021-04-18 10:51:53", // 更新时间\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["根据上述描述，对照着 ",(0,t.jsx)(n.code,{children:"template"})," 下 ",(0,t.jsx)(n.code,{children:"el-table-column"})," 的属性输出，",(0,t.jsx)(n.code,{children:"prop"})," 默认对照这上述属性。默认不自定义，输出上述原始值。如果需要自定义的同学请使用 ",(0,t.jsx)(n.code,{children:'<template #default="scope">'})," 在次插槽内部进行自定义操作。"]}),"\n",(0,t.jsxs)(n.p,{children:["最后千万千万别忘记前往 ",(0,t.jsx)(n.code,{children:"router/index.js"})," 去添加路由配置，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import Good from '@/views/Good.vue'\n{\n  path: '/good',\n  name: 'good',\n  component: Good\n},\n"})}),"\n",(0,t.jsxs)(n.p,{children:["在 ",(0,t.jsx)(n.code,{children:"utils/index.js"})," 文件中添加头部信息："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export const pathMap = {\n  index: '首页',\n  login: '登录',\n  add: '添加商品',\n  swiper: '轮播图配置',\n  hot: '热销商品配置',\n  new: '新品上线配置',\n  recommend: '为你推荐配置',\n  category: '分类管理',\n  level2: '分类二级管理',\n  level3: '分类三级管理',\n  good: '商品管理',\n"})}),"\n",(0,t.jsx)(n.p,{children:"一顿操作之后，我们观察浏览器展示情况："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"当列表长了之后，我发现一个问题。列表滚动到底部的时候，点击翻页按钮进入下一个，但是滚动条却没有滚动到顶部，这很影响开发体验，于是我想每次翻页的时候，页面滚回顶部。"}),"\n",(0,t.jsx)(n.p,{children:"我们回忆一下之前在布局的时候，是不是将右边栏的高度固定，超出部分采用滚动条的形式。大型挖坟现场："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["红色内容部分为 ",(0,t.jsx)(n.code,{children:"class"})," 为 ",(0,t.jsx)(n.code,{children:"main"})," 的 ",(0,t.jsx)(n.code,{children:"div"}),"，我们来看看给了什么样式："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["height = 屏幕的高度 - （头部的高度 + 底部的高度），并且给了 ",(0,t.jsx)(n.code,{children:"overflow"})," 设置滚动。"]}),"\n",(0,t.jsxs)(n.p,{children:["可以在每次点击分页的时候，拿到 ",(0,t.jsx)(n.code,{children:"main"})," 的 ",(0,t.jsx)(n.code,{children:"DOM"})," 节点，设置它的 scrollTop 值为 0，让其滚动条滚回顶部。我们来这是一个全局公用方法如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// main.js\napp.config.globalProperties.goTop = function () {\n  const main = document.querySelector('.main')\n  main.scrollTop = 0\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"受用方法："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:"<script setup>\n+ import { getCurrentInstance } from 'vue'\n\nconst app = getCurrentInstance()\nconst { goTop } = app.appContext.config.globalProperties\n...\n// 获取轮播图列表\nconst getGoodList = () => {\n  state.loading = true\n  axios.get('/goods/list', {\n    params: {\n      pageNumber: state.currentPage,\n      pageSize: state.pageSize\n    }\n  }).then(res => {\n    state.tableData = res.list\n    state.total = res.totalCount\n    state.currentPage = res.currPage\n    state.loading = false\n+      goTop && goTop() // 数据获取成功后，回到顶部\n  })\n}\n<\/script>\n"})}),"\n",(0,t.jsx)(n.p,{children:"展示效果如下图所示，已经达到了想要的结果。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"列表页的制作到这里差不多结束了，接下来我们添加操作部分的内容。"}),"\n",(0,t.jsxs)(n.h2,{id:"新增修改商品",children:["新增、修改商品",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#新增修改商品",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"由于新增商品的表单内容较多，所以这里不采用弹窗的形式新增商品，转而采用跳转新页面的形式。"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"views"})," 目录下已经建好了 ",(0,t.jsx)(n.code,{children:"AddGood.vue"})," 组件，该组件便是我们实现新增商品的页面。"]}),"\n",(0,t.jsx)(n.p,{children:"打开并添加模板，代码如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"template"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<template>\n  <div class="add">\n    <el-card class="add-container">\n      <el-form :model="state.goodForm" :rules="state.rules" ref="goodRef" label-width="100px" class="goodForm">\n        <el-form-item required label="商品分类">\n          <el-cascader :placeholder="state.defaultCate" style="width: 300px" :props="state.category" @change="handleChangeCate"></el-cascader>\n        </el-form-item>\n        <el-form-item label="商品名称" prop="goodsName">\n          <el-input style="width: 300px" v-model="state.goodForm.goodsName" placeholder="请输入商品名称"></el-input>\n        </el-form-item>\n        <el-form-item label="商品简介" prop="goodsIntro">\n          <el-input style="width: 300px" type="textarea" v-model="state.goodForm.goodsIntro" placeholder="请输入商品简介(100字)"></el-input>\n        </el-form-item>\n        <el-form-item label="商品价格" prop="originalPrice">\n          <el-input type="number" min="0" style="width: 300px" v-model="state.goodForm.originalPrice" placeholder="请输入商品价格"></el-input>\n        </el-form-item>\n        <el-form-item label="商品售卖价" prop="sellingPrice">\n          <el-input type="number" min="0" style="width: 300px" v-model="state.goodForm.sellingPrice" placeholder="请输入商品售价"></el-input>\n        </el-form-item>\n        <el-form-item label="商品库存" prop="stockNum">\n          <el-input type="number" min="0" style="width: 300px" v-model="state.goodForm.stockNum" placeholder="请输入商品库存"></el-input>\n        </el-form-item>\n        <el-form-item label="商品标签" prop="tag">\n          <el-input style="width: 300px" v-model="state.goodForm.tag" placeholder="请输入商品小标签"></el-input>\n        </el-form-item>\n        <el-form-item label="上架状态" prop="goodsSellStatus">\n          <el-radio-group v-model="state.goodForm.goodsSellStatus">\n            <el-radio label="0">上架</el-radio>\n            <el-radio label="1">下架</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item required label="商品主图" prop="goodsCoverImg">\n          <el-upload\n            class="avatar-uploader"\n            :action="state.uploadImgServer"\n            accept="jpg,jpeg,png"\n            :headers="{\n              token: token\n            }"\n            :show-file-list="false"\n            :before-upload="handleBeforeUpload"\n            :on-success="handleUrlSuccess"\n          >\n            <img style="width: 100px; height: 100px; border: 1px solid #e9e9e9;" v-if="state.goodForm.goodsCoverImg" :src="state.goodForm.goodsCoverImg" class="avatar">\n            <el-icon v-else class="avatar-uploader-icon"><Plus /></el-icon>\n          </el-upload>\n        </el-form-item>\n        <el-form-item label="详情内容">\n          <div ref=\'editor\'></div>\n        </el-form-item>\n        <el-form-item>\n          <el-button type="primary" @click="submitAdd()">{{ state.id ? \'立即修改\' : \'立即创建\' }}</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["这里注意，新增了 ",(0,t.jsx)(n.code,{children:"el-cascader"})," 组件用作三级联动。",(0,t.jsx)(n.code,{children:":props"})," 属性非常重要，这个在后续的逻辑添加内容上，做一个详细的分析。"]}),"\n",(0,t.jsxs)(n.p,{children:["详情内容给了一个 ",(0,t.jsx)(n.code,{children:"div"}),"，并且设置好了 ",(0,t.jsx)(n.code,{children:"ref"}),"，准备接入 ",(0,t.jsx)(n.code,{children:"wangEditor"}),"。"]}),"\n",(0,t.jsx)(n.p,{children:"话不多说，我们添加逻辑部分："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"script"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport { reactive, ref, toRefs, onMounted, onBeforeUnmount, getCurrentInstance } from 'vue'\nimport WangEditor from 'wangeditor'\nimport axios from '@/utils/axios'\nimport { ElMessage } from 'element-plus'\nimport { useRoute, useRouter } from 'vue-router'\nimport { localGet, uploadImgServer, uploadImgsServer } from '@/utils'\n\nconst { proxy } = getCurrentInstance()\nconst editor = ref(null) // 富文本编辑器 ref\nconst goodRef = ref(null) // 表单 ref\nconst route = useRoute()\nconst router = useRouter()\nconst { id } = route.query // 编辑时传入的商品 id\nconst state = reactive({\n  uploadImgServer, // 上传图片的接口地址，单图上传\n  token: localGet('token') || '', // 存在本地的 token\n  id: id,\n  defaultCate: '', // 默认分类值\n  goodForm: { // 商品表单内容\n    goodsName: '',\n    goodsIntro: '',\n    originalPrice: '',\n    sellingPrice: '',\n    stockNum: '',\n    goodsSellStatus: '0',\n    goodsCoverImg: '',\n    tag: ''\n  },\n  rules: { // 规则\n    goodsName: [\n      { required: 'true', message: '请填写商品名称', trigger: ['change'] }\n    ],\n    originalPrice: [\n      { required: 'true', message: '请填写商品价格', trigger: ['change'] }\n    ],\n    sellingPrice: [\n      { required: 'true', message: '请填写商品售价', trigger: ['change'] }\n    ],\n    stockNum: [\n      { required: 'true', message: '请填写商品库存', trigger: ['change'] }\n    ],\n  },\n  categoryId: '', // 分类 id\n  category: { // 联动组件 props 属性\n    lazy: true,\n    lazyLoad(node, resolve) { // 懒加载分类方法\n      const { level = 0, value } = node\n      axios.get('/categories', {\n        params: {\n          pageNumber: 1,\n          pageSize: 1000,\n          categoryLevel: level + 1,\n          parentId: value || 0\n        }\n      }).then(res => {\n        const list = res.list\n        const nodes = list.map(item => ({\n          value: item.categoryId,\n          label: item.categoryName,\n          leaf: level > 1\n        }))\n        resolve(nodes)\n      })\n    }\n  }\n})\nlet instance // wangEditor 实例\nonMounted(() => {\n  instance = new WangEditor(editor.value) // 初始化 wangEditor\n  instance.config.showLinkImg = false\n  instance.config.showLinkImgAlt = false\n  instance.config.showLinkImgHref = false\n  instance.config.uploadImgMaxSize = 2 * 1024 * 1024 // 最大上传大小 2M \n  instance.config.uploadFileName = 'file' // 上传时，key 值自定义\n  instance.config.uploadImgHeaders = {\n    token: state.token // 添加 token，否则没有权限调用上传接口\n  }\n  // 图片返回格式不同，需要自定义返回格式\n  instance.config.uploadImgHooks = {\n    // 图片上传并返回了结果，想要自己把图片插入到编辑器中\n    // 例如服务器端返回的不是 { errno: 0, data: [...] } 这种格式，可使用 customInsert\n    customInsert: function(insertImgFn, result) {\n      console.log('result', result)\n      // result 即服务端返回的接口\n      // insertImgFn 可把图片插入到编辑器，传入图片 src ，执行函数即可\n      if (result.data && result.data.length) {\n        result.data.forEach(item => insertImgFn(item))\n      }\n    }\n  }\n  instance.config.uploadImgServer = uploadImgsServer // 上传接口地址配置\n  Object.assign(instance.config, {\n    onchange() {\n      console.log('change')\n    },\n  })\n  instance.create()\n  if (id) {\n    // 获取商品信息\n    axios.get(`/goods/${id}`).then(res => {\n      const { goods, firstCategory, secondCategory, thirdCategory } = res\n      state.goodForm = {\n        goodsName: goods.goodsName,\n        goodsIntro: goods.goodsIntro,\n        originalPrice: goods.originalPrice,\n        sellingPrice: goods.sellingPrice,\n        stockNum: goods.stockNum,\n        goodsSellStatus: String(goods.goodsSellStatus),\n        goodsCoverImg: proxy.$filters.prefix(goods.goodsCoverImg),\n        tag: goods.tag\n      }\n      state.categoryId = goods.goodsCategoryId\n      state.defaultCate = `${firstCategory.categoryName}/${secondCategory.categoryName}/${thirdCategory.categoryName}`\n      if (instance) {\n        // 初始化商品详情 html\n        instance.txt.html(goods.goodsDetailContent)\n      }\n    })\n  }\n})\nonBeforeUnmount(() => {\n  // 组件销毁之前，销毁 wangEditor 实例\n  instance.destroy()\n  instance = null\n})\n// 添加商品方法\nconst submitAdd = () => {\n  goodRef.value.validate((vaild) => {\n    if (vaild) {\n      // 默认新增用 post 方法\n      let httpOption = axios.post\n      let params = {\n        goodsCategoryId: state.categoryId,\n        goodsCoverImg: state.goodForm.goodsCoverImg,\n        goodsDetailContent: instance.txt.html(),\n        goodsIntro: state.goodForm.goodsIntro,\n        goodsName: state.goodForm.goodsName,\n        goodsSellStatus: state.goodForm.goodsSellStatus,\n        originalPrice: state.goodForm.originalPrice,\n        sellingPrice: state.goodForm.sellingPrice,\n        stockNum: state.goodForm.stockNum,\n        tag: state.goodForm.tag\n      }\n      console.log('params', params)\n      if (id) {\n        params.goodsId = id\n        // 修改商品使用 put 方法\n        httpOption = axios.put\n      }\n      httpOption('/goods', params).then(() => {\n        ElMessage.success(id ? '修改成功' : '添加成功')\n        router.push({ path: '/good' })\n      })\n    }\n  })\n}\n// 上传之前，判断一下文件格式\nconst handleBeforeUpload = (file) => {\n  const sufix = file.name.split('.')[1] || ''\n  if (!['jpg', 'jpeg', 'png'].includes(sufix)) {\n    ElMessage.error('请上传 jpg、jpeg、png 格式的图片')\n    return false\n  }\n}\n// 图片上传成功后的回调\nconst handleUrlSuccess = (val) => {\n  state.goodForm.goodsCoverImg = val.data || ''\n}\n// 联动变化后的回调\nconst handleChangeCate = (val) => {\n  state.categoryId = val[2] || 0\n}\n<\/script>\n"})}),"\n",(0,t.jsx)(n.p,{children:"样式部分："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"style"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"<style scoped>\n  .add {\n    display: flex;\n  }\n  .add-container {\n    flex: 1;\n    height: 100%;\n  }\n  .avatar-uploader {\n    width: 100px;\n    height: 100px;\n    color: #ddd;\n    font-size: 30px;\n  }\n  .avatar-uploader-icon {\n    display: block;\n    width: 100%;\n    height: 100%;\n    border: 1px solid #e9e9e9;\n    padding: 32px 17px;\n  }\n</style>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["逻辑部分，逐行分析了每一段代码，这里我着重讲解一下三级联动的 ",(0,t.jsx)(n.code,{children:"props"})," 属性是咋回事。"]}),"\n",(0,t.jsxs)(n.p,{children:["首先我们给 ",(0,t.jsx)(n.code,{children:":props"})," 赋值的内容是："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"category: {\n  lazy: true,\n  lazyLoad(node, resolve) {\n    const { level = 0, value } = node\n    axios.get('/categories', {\n      params: {\n        pageNumber: 1,\n        pageSize: 1000,\n        categoryLevel: level + 1,\n        parentId: value || 0\n      }\n    }).then(res => {\n      const list = res.list\n      const nodes = list.map(item => ({\n        value: item.categoryId,\n        label: item.categoryName,\n        leaf: level > 1\n      }))\n      resolve(nodes)\n    })\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["lazy: 是否动态加载子节点，需与 ",(0,t.jsx)(n.code,{children:"lazyLoad"})," 方法结合使用。我们是接口请求的联动，所以需要设置为 ",(0,t.jsx)(n.code,{children:"true"}),"。"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["lazyLoad：加载动态数据的方法，仅在 lazy 为 true 时有效。接收的类型为 ",(0,t.jsx)(n.code,{children:"function(node, resolve)"}),"，",(0,t.jsx)(n.code,{children:"node"})," 为当前点击的节点，",(0,t.jsx)(n.code,{children:"resolve"})," 为数据加载完成的回调(必须调用)。默认第一次加载的参数 ",(0,t.jsx)(n.code,{children:"level = 0, value = 0"}),"，获取 ",(0,t.jsx)(n.code,{children:"categoryLevel = 1，parentId = 0"})," 的分类。当你选择某个分类的时候，会再次触发 ",(0,t.jsx)(n.code,{children:"lazyLoad"}),"。此时 ",(0,t.jsx)(n.code,{children:"level = 1，value = 点击的分类id"}),"，",(0,t.jsx)(n.code,{children:"categoryLevel = 2，parentId = 点击的分类id"}),"，二级分类的值也就通过 ",(0,t.jsx)(n.code,{children:"resolve(nodes)"})," 返回给 ",(0,t.jsx)(n.code,{children:"el-cascader"})," 组件。"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"wangEditor"})," 难得的对 ",(0,t.jsx)(n.code,{children:"Vue3"})," 做了适配，国内的同学开源的一个富文本编辑器，",(0,t.jsx)(n.a,{href:"https://doc.wangeditor.com/",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"在此。其实富文本编辑器的使用并不复杂，所有的内容编辑完之后，样式都会以内嵌的形式嵌入到标签里，只要将最后编辑完的内容上传给服务器，C 端可通过 ",(0,t.jsx)(n.code,{children:"v-html"})," 直接展示详情内容。"]}),"\n",(0,t.jsxs)(n.p,{children:["上述要注意的是，上传图片接口，一个是支持单图，另一个是支持多图的，需要事先在 ",(0,t.jsx)(n.code,{children:"utils/index.js"})," 里定义好，如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// 单张图片上传\nexport const uploadImgServer = 'http://backend-api-02.newbee.ltd/manage-api/v1/upload/file'\n// 多张图片上传\nexport const uploadImgsServer = 'http://backend-api-02.newbee.ltd/manage-api/v1/upload/files'\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"没有注册的组件一定要注册好，否则组件无法展示。wangEditor 需要通过 npm 安装。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"浏览器展示如下所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:r,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本小节讲解了商品管理相关知识点，特别是这个三级联动懒加载，很考验一个开发者阅读文档的能力。有心的同学，建议自己手动实现一个三级联动选项组件，这很考验一个开发者代码功底。"}),"\n",(0,t.jsxs)(n.h4,{id:"本章源码地址",children:["本章源码地址",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章源码地址",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://s.yezgea02.com/1663573824427/admin06.zip",target:"_blank",rel:"noopener noreferrer",children:"点击下载"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"文档最近更新时间：2022 年 9 月 20 日。"}),"\n"]})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}let u=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F37.Vue3%20%E5%AE%9E%E6%88%98%E4%B9%8B%E5%95%86%E5%93%81%E7%AE%A1%E7%90%86%EF%BC%88wangEditor%20%E5%AF%8C%E6%96%87%E6%9C%AC%E6%8F%92%E4%BB%B6%E3%80%81Cascader%20%E7%BB%84%E4%BB%B6%E5%88%86%E7%B1%BB%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"需求分析",id:"需求分析",depth:2},{text:"商品列表页",id:"商品列表页",depth:2},{text:"新增、修改商品",id:"新增修改商品",depth:2},{text:"总结",id:"总结",depth:2},{text:"本章源码地址",id:"本章源码地址",depth:4}],title:"37.Vue3 实战之商品管理（wangEditor 富文本插件、Cascader 组件分类三级联动）",headingTitle:"37.Vue3 实战之商品管理（wangEditor 富文本插件、Cascader 组件分类三级联动）",frontmatter:{}}}}]);