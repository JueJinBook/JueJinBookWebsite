"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79699"],{542269:function(n,e,t){t.r(e),t.d(e,{default:()=>h});var r=t(552676),o=t(740453);let c=t.p+"static/image/030803bb5983b14595df87890c72ef0e.34675246.png",i=t.p+"static/image/e827319695b90d3591093ea9e35a7ff0.bd520232.png",a=t.p+"static/image/1107f821dff2b3bab8e85b056762903d.7fbd21d1.png",l=t.p+"static/image/b6d9f33dbd98461fb5cc3347171cc7cc.d223be05.png";function s(n){let e=Object.assign({p:"p",code:"code",h2:"h2",a:"a",pre:"pre",img:"img",blockquote:"blockquote",ul:"ul",li:"li",strong:"strong"},(0,o.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["在介绍动态 Script 方案时，需要在全局对象上抛出对应的 ",(0,r.jsx)(e.code,{children:"mount"})," 和 ",(0,r.jsx)(e.code,{children:"unmount"})," 函数，而且内部运行的 JavaScript 不建议声明全局属性（采用了立即执行的匿名函数进行作用域的包装处理），否则很容易产生全局变量的命名冲突，从而导致微应用运行出错。为了避免类似的问题，需要考虑微应用之间的 JavaScript 隔离。本课程接下来将为大家介绍 V8 的隔离原理，从而帮助大家更好的了解后续的微应用隔离设计。"]}),"\n",(0,r.jsxs)(e.h2,{id:"命名冲突",children:["命名冲突",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#命名冲突",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"我们重新回顾一下动态 Script 方案，去除微应用中立即执行的匿名函数："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// public/micro/micro1.js\n\n// (function () {\n  let root;\n\n  window.micro1_mount = function (el) {\n    root = document.createElement("h1");\n    root.textContent = "微应用1";\n    const $el = document.querySelector(el);\n    $el?.appendChild(root); \n  };\n\n  window.micro1_unmount = function () {\n    if (!root) return;\n    root.parentNode?.removeChild(root);\n  };\n// })();\n\n// public/micro/micro2.js\n// 立即执行的匿名函数可以防止变量 root 产生冲突\n// (function () {\n  let root;\n\n  window.micro2_mount = function (el) {\n    root = document.createElement("h1");\n    root.textContent = "微应用2";\n    const $el = document.querySelector(el);\n    $el?.appendChild(root);\n  };\n\n  window.micro2_unmount = function () {\n    if (!root) return;\n    root.parentNode?.removeChild(root);\n  };\n// })();\n'})}),"\n",(0,r.jsxs)(e.p,{children:["进行微应用切换时会分别加载 ",(0,r.jsx)(e.code,{children:"micro1.js"})," 和 ",(0,r.jsx)(e.code,{children:"micro2.js"}),"，由于都在全局作用域声明了 ",(0,r.jsx)(e.code,{children:"root"})," 变量，因此会产生重复声明的错误，导致后加载的微应用产生异常："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：示例源码可以从 micro-framework  ",(0,r.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/dynamic-script-global",target:"_blank",rel:"noopener noreferrer",children:"demo/dynamic-script-global"})," 分支获取。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["更改一下上述示例，采用 ",(0,r.jsx)(e.code,{children:"var"})," 声明全局变量："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// public/micro/micro1.js\nvar root;\nvar count = 0;\n\nwindow.micro1_mount = function (el) {\n    root = document.createElement("h1");\n    count ++;\n    root.textContent = `微应用1： ${count}`;\n    const $el = document.querySelector(el);\n    $el?.appendChild(root);\n};\n\nwindow.micro1_unmount = function () {\nif (!root) return;\nroot.parentNode?.removeChild(root);\n};\n\n// public/micro/micro2.js\n\nvar root;\n// micro1.js 中的 count 会被覆盖\nvar count = 0;\n\nwindow.micro2_mount = function (el) {\n    root = document.createElement("h1");\n    count ++;\n    root.textContent = `微应用2： ${count}`;\n    const $el = document.querySelector(el);\n    $el?.appendChild(root);\n};\n\nwindow.micro2_unmount = function () {\n    if (!root) return;\n    root.parentNode?.removeChild(root);\n};\n'})}),"\n",(0,r.jsxs)(e.p,{children:["此时两个微应用会因为使用了同一个 ",(0,r.jsx)(e.code,{children:"count"})," 全局变量而产生意想不到的结果："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"如果情况复杂一点，两个不同的开发者在不同的微应用里声明了同一个变量名，一个变量值是对象，另外一个变量值是基础类型数据："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// public/micro/micro1.js\nvar root;\nvar data = { count: { value: 0 } };\n\nwindow.micro1_mount = function (el) {\n    root = document.createElement("h1");\n    data.count.value ++;\n    root.textContent = `微应用1： ${data.count.value}`;\n    const $el = document.querySelector(el);\n    $el?.appendChild(root);\n};\n\nwindow.micro1_unmount = function () {\nif (!root) return;\nroot.parentNode?.removeChild(root);\n};\n\n// public/micro/micro2.js\nvar root;\nvar data = 0;\n\nwindow.micro2_mount = function (el) {\n    root = document.createElement("h1");\n    data ++;\n    root.textContent = `微应用2： ${data}`;\n    const $el = document.querySelector(el);\n    $el?.appendChild(root);\n};\n\nwindow.micro2_unmount = function () {\n    if (!root) return;\n    root.parentNode?.removeChild(root);\n};\n'})}),"\n",(0,r.jsx)(e.p,{children:"此时会产生异常情况，如下所示："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["在真实的业务开发中，开发者难以排查 ",(0,r.jsx)(e.code,{children:"data.count.value"}),"，因为很难会想到是因为浏览器执行了另外一个微应用的 ",(0,r.jsx)(e.code,{children:"micro2.js"})," 从而导致全局变量 ",(0,r.jsx)(e.code,{children:"data"})," 被覆盖。"]}),"\n",(0,r.jsxs)(e.h2,{id:"v8-隔离",children:["V8 隔离",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#v8-隔离",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"在上述命名冲突测试中可以发现 SPA 模式下很容易导致全局变量产生冲突。如果微应用处于 MPA 模式，那么 JS 可以做到天然隔离，不管是多个标签页之间的应用、标签页和内部的 iframe 应用以及同一个 Renderer 进程的不同应用，这些都是因为 Chrome 浏览器嵌入的 V8 引擎本身对 JS 的执行上下文做了隔离处理。"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"温馨提示：Chrome 中的标签页和内部的 iframe 应用、两个不同的标签页应用可能会处于同一个 Renderer 进程。"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["在 Chrome 的 Blink 渲染引擎中可以通过嵌入 V8 来实现 JS 代码的解释和执行，因此我们也可以通过类似的方式嵌入 V8 来验证上述观点。V8 官方提供了 C++ 的嵌入文档 ",(0,r.jsx)(e.a,{href:"https://v8.dev/docs/embed",target:"_blank",rel:"noopener noreferrer",children:"Getting started with embedding V8"}),"，可以通过官方提供的示例进行简单改造，从而实现如下功能："]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"在同一个 JS 上下文中执行两个不同的 JS 文件，查看内部的同名全局变量执行情况"}),"\n",(0,r.jsx)(e.li,{children:"在不同的 JS 上下文中执行 JS 文件，查看内部的同名全局变量执行情况"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：如果你对 C++ 编译不熟悉， 可以先阅读",(0,r.jsx)(e.strong,{children:"原理进阶：V8 的嵌入实践，"})," 重点讲解了 C++ 的编译工具、多文件开发、V8 静态库的编译制作、V8 动态库的下载使用等。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["官方示例 ",(0,r.jsx)(e.code,{children:"hello-world.cc"})," 将需要执行的 JavaScript 固定在 C++ 代码中，因此每次修改 JavaScript 都需要重新编译成可执行的二进制文件。这里对官方示例进行更改，设计一个可以读取 JS 文件的 C++ 代码，将 JavaScript 从 C++ 编译中释放出来："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["在 ",(0,r.jsx)(e.code,{children:"main.cpp"})," 中读取外部的 JS 文件进行解释执行，项目的示例结构如下所示："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"├── v8                              # 库源码\n│   ├── inclide/                    # 头文件\n│   │   ├── libplatform/                         \n│   │   │   └── libplatform.h        \n│   │   └── v8.h                                                \n│   └── lib/                        # 动态库\n│       ├── libv8.dylib         \n│       └── libv8_libplatform.dylib                \n├── utils                           # 工具目录\n│   ├── file.cpp        \n│   ├── file.h\n│   └── utils.h                                                                        \n├── micro1.js                       # js 文件\n├── micro2.js                       # js 文件\n└── main.cpp                        # 应用源码\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：示例源码可以从 embed-v8 的 ",(0,r.jsx)(e.a,{href:"https://github.com/ziyi2/embed-v8/tree/demo/v8-context",target:"_blank",rel:"noopener noreferrer",children:"demo/v8-context"})," 分支获取。由于 Mac 存在不同的 CPU 架构，建议通过 Homebrew 重新下载 V8 动态库进行测试，具体可以查看仓库的 ",(0,r.jsx)(e.code,{children:"README.md"})," 说明文件。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"utils"})," 目录下会实现一个读取 JS 文件的工具方法，",(0,r.jsx)(e.code,{children:"utils.h"})," 是总声明头文件，在 ",(0,r.jsx)(e.code,{children:"main.cpp"})," 中需要引入它，有点类似于 Web 前端的某个目录下有一个总的 ",(0,r.jsx)(e.code,{children:"index.js"})," 导出了内部的所有模块："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c++",children:'// utils.h\n#ifndef INCLUDE_UTILS_H_\n#define INCLUDE_UTILS_H_\n\n#include "file.h"\n\n# 11.原理解析：V8 隔离\n\n// file.h\n#ifndef INCLUDE_FILE_H_\n#define INCLUDE_FILE_H_\n\nchar* readJavaScriptFile(const char* name);\n\n#endif\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"file.h"})," 声明的 API 在 ",(0,r.jsx)(e.code,{children:"file.cpp"})," 中实现，主要用于读取 JavaScript 文件的字符串内容："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c++",children:'#include <iostream>\n#include <fstream>\n#include "file.h"\n\nusing namespace std;\n\n// C++ 读写示例：https://cplusplus.com/doc/tutorial/files/\n// 查看最后一个示例 Binary files\n\nchar* readJavaScriptFile(const char* fileName) {\n    \n    char* code;\n\n    // 创建一个 ifstream，并打开名为 fileName 的文件\n    // fileName 可以是 string 类型，也可以是一个指向字符串存储地址的指针\n\n    // ios::in：打开文件用于读取\n    // ios::ate：文件打开后定位到文件末尾\n    // 这里的 | 是一个位运算符，表明上述两个操作都要执行\n    ifstream file(fileName, ios::in|ios::ate);\n\n    if(file.is_open()) {\n        // 由于打开时定位到末尾，因此可以直接获取文件大小\n        streampos size = file.tellg();\n        // 开辟和文件大小一致的字符串数组空间，从而可以有足够的空间存放文件的字符串内容\n        code = new char[size];\n        // 重新定位到文件开头\n        file.seekg (0, ios::beg);\n        // 读取文件的全部内容（通过 size 指定读取的文件大小）\n        file.read (code, size);\n        // 关闭文件\n        file.close();\n    }\n    \n    \n    return code;\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["将 ",(0,r.jsx)(e.code,{children:"main.cpp"})," 中的官方示例进行改造，主要实现如下功能："]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["创建一个 V8 上下文，读取并执行 ",(0,r.jsx)(e.code,{children:"micro1.js"})," 和 ",(0,r.jsx)(e.code,{children:"micro2.js"})]}),"\n",(0,r.jsxs)(e.li,{children:["创建两个 V8 上下文，分别执行 ",(0,r.jsx)(e.code,{children:"micro1.js"})," 和 ",(0,r.jsx)(e.code,{children:"micro2.js"})]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c++",children:'// 包含库的头文件，使用 <>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// 包含自定义的头文件，用 ""\n#include "libplatform/libplatform.h"\n#include "v8.h"\n\n// 引入自定义的 utils.h 头文件\n#include "utils.h"\n\nint main(int argc, char* argv[]) {\n  // Initialize V8.\n  v8::V8::InitializeICUDefaultLocation(argv[0]);\n  v8::V8::InitializeExternalStartupData(argv[0]);\n  std::unique_ptr<v8::Platform> platform = v8::platform::NewDefaultPlatform();\n  v8::V8::InitializePlatform(platform.get());\n  v8::V8::Initialize();\n\n  // Create a new Isolate and make it the current one.\n  v8::Isolate::CreateParams create_params;\n  create_params.array_buffer_allocator =\n      v8::ArrayBuffer::Allocator::NewDefaultAllocator();\n  v8::Isolate* isolate = v8::Isolate::New(create_params);\n  {\n    v8::Isolate::Scope isolate_scope(isolate);\n\n    // Create a stack-allocated handle scope.\n    v8::HandleScope handle_scope(isolate);\n\n    /**\n     1. 创建一个上下文，执行 micro1.js 和 micro2.js\n    */\n\n    {\n\n      // Create a new context.\n      // 创建一个上下文\n      v8::Local<v8::Context> context = v8::Context::New(isolate);\n\n      // Enter the context for compiling and running the script.\n      // 进入该上下文执行 JS 代码\n      v8::Context::Scope context_scope(context);\n\n      {\n        // 读取当前 main.cpp 同级目录下的 micro1.js 文件\n        const char* code = readJavaScriptFile("micro1.js");\n\n        // Create a string containing the JavaScript source code.\n        v8::Local<v8::String> source =\n            v8::String::NewFromUtf8(isolate, code).ToLocalChecked();\n\n        // Compile the source code.\n        v8::Local<v8::Script> script =\n            v8::Script::Compile(context, source).ToLocalChecked();\n\n        // Run the script to get the result.\n        v8::Local<v8::Value> result = script->Run(context).ToLocalChecked();\n\n        // Convert the result to an UTF8 string and print it.\n        v8::String::Utf8Value utf8(isolate, result);\n        printf("%s\\n", *utf8);\n      }\n\n      {\n        // 读取当前 main.cpp 同级目录下的 micro2.js 文件\n        const char* code = readJavaScriptFile("micro2.js");\n\n        // Create a string containing the JavaScript source code.\n        v8::Local<v8::String> source =\n            v8::String::NewFromUtf8(isolate, code).ToLocalChecked();\n\n        // Compile the source code.\n        v8::Local<v8::Script> script =\n            v8::Script::Compile(context, source).ToLocalChecked();\n\n        // Run the script to get the result.\n        v8::Local<v8::Value> result = script->Run(context).ToLocalChecked();\n\n        // Convert the result to an UTF8 string and print it.\n        v8::String::Utf8Value utf8(isolate, result);\n        printf("%s\\n", *utf8);\n      }\n    }\n    \n    /**\n     2. 创建两个上下文，分别执行 micro1.js 和 micro2.js\n    */\n\n    {\n      // Create a new context.\n      // 创建一个新的上下文\n      v8::Local<v8::Context> context = v8::Context::New(isolate);\n\n      // Enter the context for compiling and running the hello world script.\n      // 进入新的上下文执行 JS 代码\n      v8::Context::Scope context_scope(context);\n\n      // 读取当前 main.cpp 同级目录下的 micro1.js 文件\n      const char* code = readJavaScriptFile("micro1.js");\n\n      // Create a string containing the JavaScript source code.\n      v8::Local<v8::String> source =\n          v8::String::NewFromUtf8(isolate, code).ToLocalChecked();\n\n      // Compile the source code.\n      v8::Local<v8::Script> script =\n          v8::Script::Compile(context, source).ToLocalChecked();\n\n      // Run the script to get the result.\n      v8::Local<v8::Value> result = script->Run(context).ToLocalChecked();\n\n      // Convert the result to an UTF8 string and print it.\n      v8::String::Utf8Value utf8(isolate, result);\n      printf("%s\\n", *utf8);\n    }\n\n    {\n      // Create a new context.\n      // 创建一个新的上下文\n      v8::Local<v8::Context> context = v8::Context::New(isolate);\n\n      // Enter the context for compiling and running the hello world script.\n      // 进入新的上下文执行 JS 代码\n      v8::Context::Scope context_scope(context);\n\n      // 读取当前 main.cpp 同级目录下的 micro2.js 文件\n      const char* code = readJavaScriptFile("micro2.js");\n\n      // Create a string containing the JavaScript source code.\n      v8::Local<v8::String> source =\n          v8::String::NewFromUtf8(isolate, code).ToLocalChecked();\n\n      // Compile the source code.\n      v8::Local<v8::Script> script =\n          v8::Script::Compile(context, source).ToLocalChecked();\n\n      // Run the script to get the result.\n      v8::Local<v8::Value> result = script->Run(context).ToLocalChecked();\n\n      // Convert the result to an UTF8 string and print it.\n      v8::String::Utf8Value utf8(isolate, result);\n      printf("%s\\n", *utf8);\n    }\n  }\n\n  // Dispose the isolate and tear down V8.\n  isolate->Dispose();\n  v8::V8::Dispose();\n  v8::V8::DisposePlatform();\n  delete create_params.array_buffer_allocator;\n  return 0;\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["其中 ",(0,r.jsx)(e.code,{children:"micro1.js"})," 和 ",(0,r.jsx)(e.code,{children:"micro2.js"})," 和命名冲突测试中的微应用示例相似，具体代码如下所示："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// micro1.js\nvar count = 0;\n++ count;\n\n// micro2.js\nvar count;\n++ count;\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在 ",(0,r.jsx)(e.code,{children:"main.cpp"})," 中，我们首先创建一个执行上下文，将 ",(0,r.jsx)(e.code,{children:"micro1.js"})," 和 ",(0,r.jsx)(e.code,{children:"micro2.js"})," 都执行一遍，接着我们又各自创建新的执行上下文，分别将 ",(0,r.jsx)(e.code,{children:"micro1.js"})," 和 ",(0,r.jsx)(e.code,{children:"micro2.js"})," 单独执行一遍，查看执行结果："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# 执行\ncmake .\n# 打印\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /Users/zhuxiankang/Desktop/Github/embed-v8\n# 执行\nmake\n# 打印\n[ 33%] Building CXX object CMakeFiles/main.dir/main.cpp.o\n[ 66%] Building CXX object CMakeFiles/main.dir/utils/file.cpp.o\n[100%] Linking CXX executable main\n[100%] Built target main\n# main 可执行文件生成后，执行\n./main\n\n# 同一个执行上下文执行两个 JS 文件\n# micro1.js\n1\n# micro2.js：重复声明的 count 变量无效，直接在 micro1.js 声明的变量上进行 + 1 处理\n2\n\n# 不同的执行上下文分别执行 JS 文件\n# micro1.js\n1\n# micro2.js：不受到 micro1.js 的变量影响\nNaN\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：在执行之前需要先编译生成 ",(0,r.jsx)(e.code,{children:"main"})," 可执行文件，查看示例代码的 ",(0,r.jsx)(e.code,{children:"README.md"}),"，提供了两种不同的编译方式，方式一使用 g++ 进行编译，是一种相对原始的编译方式，也是 V8 官方使用的方式（你可以简单理解为在 TypeScript 中直接使用 tsc 进行编译），方式二使用 CMake 多文件配置的编译方式（你可以简单理解为使用 Webpack 进行编译）。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"从上述打印结果可以发现："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"如果两个 JS 文件在相同的全局执行上下文，声明的全局属性会产生覆盖"}),"\n",(0,r.jsx)(e.li,{children:"如果两个 JS 文件在不同的全局执行上下文，声明的全局属性互不干扰"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["如果把上述示例中的 ",(0,r.jsx)(e.code,{children:"var"})," 改为 ",(0,r.jsx)(e.code,{children:"let"})," 进行声明处理："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// micro1.js\nlet count = 0;\n++ count;\n\n// micro2.js\nlet count;\n++ count;\n"})}),"\n",(0,r.jsxs)(e.p,{children:["此时重新编译后进行执行，可以发现在同一个执行上下文的 ",(0,r.jsx)(e.code,{children:"micro2.js"})," 会报错："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# 执行\n./main\n\n# 同一个执行上下文执行两个 JS 文件\n# micro1.js\n1\n# micro2.js\n<unknown>:0: Uncaught SyntaxError: Identifier 'count' has already been declared\n\n#\n# Fatal error in v8::ToLocalChecked\n# Empty MaybeLocal\n#\n\nzsh: trace trap  ./main\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"温馨提示：可以在 Chrome 浏览器中进行测试，会发现同一个执行上下文中行为和嵌入的 V8 代码运行一致。"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["相信很多同学经常会听到全局执行上下文这个概念，在 V8 中执行上下文用于隔离不相关的 JavaScript 应用，并且这些应用可以处于同一个 V8 的 Isolate 实例中。那为什么需要在 V8 中建立上下文的概念呢？是因为在 JavaScript 中提供了很多",(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects",target:"_blank",rel:"noopener noreferrer",children:"内置的工具方法以及对象"}),"，这些内置对象可以通过 JavaScript 运行时进行更改（例如通过原型链进行覆盖，或者声明了一个同名的全局属性），如果两个不相关的 JavaScript 应用同时修改了某个全局对象的同名属性，那么很容易产生意想不到的 Bug（例如在上述命名冲突的示例中都声明了全局属性 ",(0,r.jsx)(e.code,{children:"count"}),"），通过创建不同的全局执行上下文可以解决该问题，这也是不同的 Web 应用可以进行 JS 隔离的主要原因。举个例子："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:"\x3c!-- main.html --\x3e\n<html>\n\n<body>\n    <iframe src=\"iframe.html\"></iframe>\n    <script>\n        // 当前全局上下文为 main.html 对应的 Context\n        var a = 1;\n        var iframe = document.querySelector(\"iframe\");\n        iframe.onload = function () {\n            // 执行 iframe.contentWindow.func 时在全局上下文栈中 push iframe.html 对应的 Context  \n            // 当前全局上下文为 iframe.html 对应的 Context\n            iframe.contentWindow.func();\n            // 执行后在全局上下文栈中 pop iframe.html 对应的 Context  \n            // 当前全局上下文为 main.html 对应的 Context\n            console.log('main a: ', a); // main a:  1\n        }\n    <\/script>\n</body>\n\n</html>\n\n\x3c!-- iframe.html --\x3e\n<script>\n    // 当前全局上下文为 iframe.html 对应的 Context\n    var a = 2;\n    function func() {\n        console.log('iframe a:', a); // iframe a: 2\n    }\n<\/script>\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：参考官方的 ",(0,r.jsx)(e.a,{href:"https://v8.dev/docs/embed#contexts",target:"_blank",rel:"noopener noreferrer",children:"V8 / Contexts"})," 进行阅读会更加有体感，本质上是 JS 全局执行上下文栈的 PUSH 和 POP 处理。需要注意，上述示例代码因为 iframe 和所在 Web 应用同源，因此会处于同一个 Renderer 进程的同一个主线程，并且会处于同一个 V8 的 Isolate 实例。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["在 JavaScript 代码层面感知不到 Context 在全局上下文栈中的切换情况，事实上在执行 ",(0,r.jsx)(e.code,{children:"main.html"})," 中的 JavaScript 代码时可以简单理解为底层的 C++ 做了如下操作："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c++",children:"// 在 V8 的隔离实例中创建一个 main.html 对应的上下文\nv8::Local<v8::Context> main = v8::Context::New(isolate);\n// 在 V8 的隔离实例中创建一个 iframe.html 对应的上下文\nv8::Local<v8::Context> iframe = v8::Context::New(isolate);\n\n// 进入 main.html 的 上下文\nv8::Context::Scope context_scope(main);\n\n// 编译和执行 main.html 对应的 script \n// ...\n// 当执行 iframe.contentWindow.func 时，C++ 中的 V8 会对 contentWindow 属性进行拦截 \n// 类似于 Vue 中的数据劫持\n\n// 拦截属性后进行 Context 切换，切换到 iframe.html 对应的 Context\n// Context 是一个栈式结构的存储方式，此时栈顶是 iframe.html 对应的 Context\n\nv8::Context::Scope context_scope(iframe);\n\n// iframe.contentWindow 执行完毕后，将 iframe.html 对应的 Context 推出栈顶\n// 此时栈顶是 main.html 对应的 Context\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：关于 V8 中 C++ 代码对 JavaScript 属性拦截的操作可以查看 ",(0,r.jsx)(e.a,{href:"https://v8.dev/docs/embed#interceptors",target:"_blank",rel:"noopener noreferrer",children:"Interceptors"}),"。想详细了解更多关于 Web 应用的全局上下文隔离细节，可以阅读课程",(0,r.jsx)(e.strong,{children:"原理进阶：V8 的概念说明"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"微应用的-js-隔离思想",children:["微应用的 JS 隔离思想",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#微应用的-js-隔离思想",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"通过 V8 隔离的演示说明，可以发现在 iframe 方案中，由于 V8 Context 的不同，可以做到标签页应用和 iframe 应用之间的全局执行上下文隔离，而之前所说的 NPM 方案、动态 Script 方案以及 Web Components 方案，由于各个聚合的微应用处于同一个 Renderer 进程的主渲染线程，并且处于同一个 V8 Isolate 实例下的同一个 Context 中，因此无法通过浏览器的默认能力实现全局执行上下文的隔离。"}),"\n",(0,r.jsx)(e.p,{children:"事实上，V8 在运行时隔离方面，主要包括了 Isolate 隔离和 Context 隔离。Isolate 在安全上用于物理空间的隔离，可以防止跨站攻击，有自己的堆内存和垃圾回收器等资源，不同的 Isolate 之间的内存和资源相互隔离，它们之间无法共享数据，是非常安全可靠的隔离。而 Context 隔离是指在同一个 Isolate 实例中，可以创建不同的 Context，这些 Context 有自己的全局变量、函数和对象等，默认情况下不同 Context 对应的 JavaScript 全局上下文无法访问其他全局上下文。"}),"\n",(0,r.jsx)(e.p,{children:"需要注意，浏览器目前没有提供 Web API 来直接创建新的 Isolate 或者 Context 隔离 JavaScript 运行环境，因此在 SPA 应用中没有直接进行 JavaScript 隔离的手段。在浏览器中可以通过一些额外功能来实现 JS 的隔离运行，例如："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"使用 WebAssembly 进行隔离，WebAssembly 会被限制运行在一个安全的沙箱执行环境中"}),"\n",(0,r.jsx)(e.li,{children:"使用 Web Worker 进行隔离，每个 Worker 有自己独立的 Isolate 实例"}),"\n",(0,r.jsx)(e.li,{children:"创建 iframe 进行 Isolate 或者 Context （同一个 Renderer 进程）隔离"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"上述所列举的隔离手段，本质上是利用了浏览器自身的功能特性间接来实现 JS 的运行环境隔离。由于是通过浏览器功能间接实现 JS 隔离，会受到功能本身的环境特性约束，例如在 WebAssembly 运行时不能直接调用 Web API，而 Web Worker 运行时只能使用部分 Web API（XMLHttpRequest 和 Web Workers API）。微应用的 JS 本身是为了在 Renderer 进程的主线程的 V8 Isolate 实例中运行，需要具备完整的 Web API 调用能力，这使得 Web 微应用需要被隔离的 JS 很难运行在这些受到约束的环境中。当然社区也给出了一些不完美的隔离方案，例如："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"如果需要使用 WebAssembly 进行隔离，需要进行 Web API 的桥接和隔离工作，并且为了可以将三方的 JS 运行在 WebAssembly 的隔离环境中，需要在该环境中提供解释执行 JS 的引擎，例如 QuickJS、Duktape"}),"\n",(0,r.jsxs)(e.li,{children:["如果需要使用 Web Worker 进行隔离，需要实现 Web 应用所在的 Renderer 执行环境和 Web Worker 环境的异步通信能力，从而解决无法在 Web Worker 环境中调用完整的 Web API 短板，例如 ",(0,r.jsx)(e.a,{href:"https://github.com/web-perf/react-worker-dom",target:"_blank",rel:"noopener noreferrer",children:"react-worker-dom"})]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"由于微前端中的微应用需要具备 Renderer 进程 UI 主线程的全部运行环境，因此在后续课程中会重点讲解使用 iframe 进行 JS 隔离的方案，除此之外，也会在框架源码分析的课程中简单讲解社区框架中的 JS 不完全隔离方案（在同一个 Context 中通过 JS 特性实现隔离）。"}),"\n",(0,r.jsxs)(e.h2,{id:"小结",children:["小结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["本课程从 SPA 应用中的动态 Script 方案出发，讲解了 JS 隔离的必要性。同时，本课程重点讲解了 V8 中实现 JS 隔离的方式（Isolate 和 Context），从而使大家了解 MPA 应用以及 iframe 应用实现 JS 隔离的本质。最后，本课程讨论了在 SPA 模式下微应用的 JS 环境隔离的几种方案，例如利用 iframe 的特性创建新的 V8 Context 隔离环境以及通过 JS 的特性来实现同一个 Context 中的 ",(0,r.jsx)(e.code,{children:"window"})," 变量隔离，本课程接下来重点讲解这些隔离方式的实现方案。"]})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(s,{...n})}):s(n)}let h=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F11.%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%9AV8%20%E9%9A%94%E7%A6%BB.md"]={toc:[{text:"命名冲突",id:"命名冲突",depth:2},{text:"V8 隔离",id:"v8-隔离",depth:2},{text:"微应用的 JS 隔离思想",id:"微应用的-js-隔离思想",depth:2},{text:"小结",id:"小结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);