"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["82705"],{528794:function(n,e,r){r.r(e),r.d(e,{default:()=>h});var s=r(552676),c=r(740453);function d(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",pre:"pre",code:"code",ul:"ul",li:"li",h3:"h3",ol:"ol",strong:"strong"},(0,c.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"第-14-节-复杂数据图表--关系图谱",children:["第 14 节 复杂数据图表 \xb7 关系图谱",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第-14-节-复杂数据图表--关系图谱",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"关系图谱可以说是笔者我最喜欢的一种数据图表了，因为从很多年前的好莱坞科幻电影开始，主人公都会在一个悬浮在半空中的操作界面中进行操作。其中最具酷炫感的便是不同的球形之间通过一条线进行连接，操作者点击其中一个球体便会带动其他相连的球体，这简直太酷了。"}),"\n",(0,s.jsx)(e.p,{children:"还记得我们在第 8 节中所学习过的关系图谱数据结构吗？我们可以将其应用起来，变成一个非常酷炫的关系图谱。"}),"\n",(0,s.jsxs)(e.h2,{id:"141-准备数据",children:["14.1 准备数据",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#141-准备数据",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们再次使用在第 8 节中准备好的关系图谱数据，一个简单却能够包含大部分情况的图谱数据。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/9/4/165a223cc5768407?w=373&h=243&f=png&s=15547",alt:"有向图"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"const vertices = [\n  new Vertex(1, 'A'),\n  new Vertex(2, 'B'),\n  new Vertex(3, 'C'),\n  new Vertex(4, 'D'),\n  new Vertex(5, 'E')\n]\n\nconst edges = [\n  new DirectedEdge(1, 2, 1),\n  new DirectedEdge(1, 3, 2),\n  new DirectedEdge(2, 4, 1),\n  new DirectedEdge(3, 4, 1),\n  new DirectedEdge(1, 1, 3),\n  new DirectedEdge(3, 5, 4),\n  new DirectedEdge(4, 5, 5)\n]\n\n"})}),"\n",(0,s.jsxs)(e.p,{children:["虽然我们在第 8 节中创建了如 ",(0,s.jsx)(e.code,{children:"Vertex"}),"、",(0,s.jsx)(e.code,{children:"Edge"})," 和 ",(0,s.jsx)(e.code,{children:"DirectedEdge"})," 这样的类以方便进行关系图谱算法实现以及代码的理解，但 ECharts 的关系图谱图表则相对简单许多，并不需要使用到特定的类进行内容的标识，只需准备好符合规则结构的数据即可。"]}),"\n",(0,s.jsx)(e.p,{children:"对应上面的关系图谱数据，我们可以编写出以下数据集。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"const vertices = [\n  { name: 'A' },\n  { name: 'B' },\n  { name: 'C' },\n  { name: 'D' },\n  { name: 'E' }\n]\n\nconst edges = [\n  { source: 'A', target: 'B' },\n  { source: 'A', target: 'C' },\n  { source: 'B', target: 'D' },\n  { source: 'C', target: 'D' },\n  { source: 'A', target: 'A' },\n  { source: 'C', target: 'E' },\n  { source: 'D', target: 'E' }\n]\n\n"})}),"\n",(0,s.jsxs)(e.p,{children:["比较特殊的是，因为关系图谱数据系列同时需要使用到两个数据集，所以没办法使用前面学习到的 ",(0,s.jsx)(e.code,{children:"dataset"})," 和 ",(0,s.jsx)(e.code,{children:"encode"})," 来进行数据绑定。"]}),"\n",(0,s.jsxs)(e.h2,{id:"142-关系图谱数据系列",children:["14.2 关系图谱数据系列",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#142-关系图谱数据系列",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在将数据集应用到数据图表中之前，首先我们需要了解的是虽然 ECharts 中的关系图谱图表也是建立在二维空间中的，但其与前面学习过的饼图类似，默认情况下并不需要使用到直角坐标系。"}),"\n",(0,s.jsxs)(e.p,{children:["所以关系图谱中的每一个节点在二维空间中的位置是需要特定标明的，也就是每一个节点（Node）都需要带有二维空间的坐标信息（",(0,s.jsx)(e.code,{children:"x"})," 和 ",(0,s.jsx)(e.code,{children:"y"}),"）。但显然这个任务由我们来完成并不现实，所以 ECharts 提供了几个比较实用的“模板”（Layout），以便于将关系图谱以比较好的形式展示在图表上。"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Circular 环形，整个关系图谱的节点会围绕成一个环形结构，并根据实际节点之间的关系进行排列；"}),"\n",(0,s.jsx)(e.li,{children:"Force 力引导，关系图谱的分布会根据节点之间连接的“能量”来尽可能保持边长的一致和尽可能少地出现交叉。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/9/5/165a7f2334474f79?w=1132&h=840&f=png&s=419685",alt:"Les Miserables Circular"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/9/5/165a7f9e2e8a3cd8?w=1132&h=840&f=png&s=126804",alt:"Les Miserables Force"})}),"\n",(0,s.jsx)(e.p,{children:"从这两张图我们可以看出同一份关系图谱数据分别使用两种不同的展示方式，便有着区别非常大的展示效果。环形井然有序中透露着不少的科技感，而力引导虽然看似杂乱无章却处处透露着数学的魅力。两种不同的模板可以根据实际的需要进行合理的选择，以达到更好的展示效果。"}),"\n",(0,s.jsx)(e.p,{children:"当然 ECharts 也同样支持在数据集中录入每一个节点的位置参数，通常用于展示由其他软件生成的关系图谱数据。"}),"\n",(0,s.jsxs)(e.h3,{id:"1421-编写配置",children:["14.2.1 编写配置",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1421-编写配置",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["因为关系图谱在一般情况下都不需要使用到坐标系来进行辅助，所以我们只需要直接指定数据系列的类别为 ",(0,s.jsx)(e.code,{children:"graph"})," 即可，并将我们的数据传入到数据系列中。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"const option = {\n  series: {\n    type: 'graph',\n  \n    // Dataset\n    data: vertices,\n    links: edges\n  }\n}\n\n"})}),"\n",(0,s.jsxs)(e.p,{children:["然后我们以环形模板为例子，以展示一个较为简单的关系图谱，只需要添加一个 ",(0,s.jsx)(e.code,{children:"layout"})," 配置即可。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"const option = {\n  series: {\n    // ...\n    layout: 'circular'\n  }\n}\n\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/9/5/165a7983519ae543?w=600&h=400&f=png&s=14537",alt:"graph-chart-1"})}),"\n",(0,s.jsxs)(e.h3,{id:"1422-润色图表",children:["14.2.2 润色图表",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1422-润色图表",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"看完前面章节的同学肯定都知道我们在绘制图表的时候都是采用循序渐进的形式进行绘制的，在完成了最基础的图表绘制以后，需要逐步地根据实际需求对图表进行优化润色。"}),"\n",(0,s.jsx)(e.p,{children:"在这个关系图谱中我们可以总结出以下需要优化的地方："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"节点图标大小需要调整，目前的节点图标过小而导致画面空洞，当然这也跟节点数量有关；"}),"\n",(0,s.jsx)(e.li,{children:"有向边没有直观的标识，我们在准备节点之间的边时便已经标明了这些边均为有向边，而目前在图表上边的有向性并没有表现出来；"}),"\n",(0,s.jsx)(e.li,{children:"节点的名称没有标明。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"节点大小"})}),"\n",(0,s.jsx)(e.p,{children:"我们也是逐个将上面的问题进行解决，首先就是需要调整节点的大小，一般情况下只需要填写一个合适的大小即可。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"const option = {\n  series: {\n    // ...\n    symbolSize: 50\n  }\n}\n\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/9/5/165a7983520da76c?w=600&h=400&f=png&s=18405",alt:"graph-chart-2"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"展示标签"})}),"\n",(0,s.jsx)(e.p,{children:"回想一下我们前面学习过的数据图表，当我们需要在数据系列上进行标签展示的时候需要添加什么配置？"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"const option = {\n  series: {\n    // ...\n    label: {\n      normal: {\n        show: true\n      }\n    }\n  }\n}\n\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/9/5/165a798351e9a66b?w=600&h=400&f=png&s=19575",alt:"graph-chart-3"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"展示有向边"})}),"\n",(0,s.jsx)(e.p,{children:"因为在进行图表展示的时候，有向图的意义与无向图有着非常大的差别，而准确地表达数据集所包含的内容则是可视化工程的首要原则。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"const option = {\n  series: {\n    type: 'graph',\n    layout: 'circular',\n    symbolSize: 50,\n  \n    // Dataset\n    data: vertices,\n    links: edges,\n    \n    label: {\n      normal: {\n        show: true\n      }\n    },\n    \n    edgeSymbol: [ 'circle', 'arrow' ],\n    edgeSymbolSize: [ 4, 10 ]\n  }\n}\n\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/9/5/165a798352fceda6?w=600&h=400&f=png&s=20604",alt:"graph-chart-4"})}),"\n",(0,s.jsxs)(e.h3,{id:"1423-力引导关系图谱",children:["14.2.3 力引导关系图谱",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1423-力引导关系图谱",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"前面我们使用了环形模板来展示我们的关系图谱数据，而 ECharts 还提供了力引导模板以供使用。力引导模板运用了一系列的数学原则以及算法来计算每一个节点的位置和节点之间的距离，综合得到最终的完整关系图谱。"}),"\n",(0,s.jsxs)(e.p,{children:["将前面的环形配置更换为力引导 ",(0,s.jsx)(e.code,{children:"force"}),"。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"const option = {\n  series: {\n    // ...\n    layout: 'force'\n  }\n}\n\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/9/5/165a79835308bb5b?w=600&h=400&f=png&s=9132",alt:"graph-chart-5"})}),"\n",(0,s.jsx)(e.p,{children:"咦？为什么更换了力引导模板以后整个关系图谱的节点都挤在了一起？因为我们前面设置的节点图标大小与力引导模板默认的大小相差太大，而在距离的计算上也并没有自动地进行适应，所以就出现了全部节点挤在了一起的现象。"}),"\n",(0,s.jsx)(e.p,{children:"为了修复这一问题，我们还需要对力引导模板进行配置，比如力引导中模板中节点之间的斥力大小以及边长的取值范围。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"const option = {\n  series: {\n    // ...\n    force: {\n      repulsion: 100,\n      edgeLength: [ 100, 500 ]\n    }\n  }\n}\n\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/9/5/165a798352eef0ba?w=600&h=400&f=png&s=23520",alt:"graph-chart-6"})}),"\n",(0,s.jsxs)(e.h2,{id:"小结",children:["小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"这一节我们学习到了，如何将我们在第 8 节中学习到的关系图谱数据使用直观的图表展示出来，虽然图表并不能像图论算法一样通过计算节点之间的关系以进行动态调整，但却能更直观地将数据表达出来。"})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20JavaScript%20%E5%BC%80%E5%8F%91%E7%81%B5%E6%B4%BB%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%2F%E7%AC%AC%2014%20%E8%8A%82%20%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E5%9B%BE%E8%A1%A8%20%C2%B7%20%E5%85%B3%E7%B3%BB%E5%9B%BE%E8%B0%B1.md"]={toc:[{text:"14.1 准备数据",id:"141-准备数据",depth:2},{text:"14.2 关系图谱数据系列",id:"142-关系图谱数据系列",depth:2},{text:"14.2.1 编写配置",id:"1421-编写配置",depth:3},{text:"14.2.2 润色图表",id:"1422-润色图表",depth:3},{text:"14.2.3 力引导关系图谱",id:"1423-力引导关系图谱",depth:3},{text:"小结",id:"小结",depth:2}],title:"第 14 节 复杂数据图表 \xb7 关系图谱",headingTitle:"第 14 节 复杂数据图表 \xb7 关系图谱",frontmatter:{}}}}]);