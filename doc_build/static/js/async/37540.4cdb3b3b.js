"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["37540"],{142065:function(e,n,r){r.r(n),r.d(n,{default:()=>T});var s=r(552676),a=r(740453);let c=r.p+"static/image/703d09cd13da87ef0c2cffb94dd2b373.0b814a7c.gif",l=r.p+"static/image/9a696162a01044da340be24db6a73bb9.3da2c42a.gif",d=r.p+"static/image/af8cf546f3f2eba661df53177657b6a1.6b4839cb.gif",t=r.p+"static/image/e4a506a1ecac55029cf653ae3a85a413.4927359b.gif",o=r.p+"static/image/2eec75ca6581822cf865c67b03c94c10.9d64aa25.gif",i=r.p+"static/image/8d86ef3cb5eb0454294924ba1bde0a83.ca864492.gif",h=r.p+"static/image/59c11564657bb557757fbde7363d8259.ea3b2e20.gif",x=r.p+"static/image/166b4e74b931d21a475821bd80160214.3f4d3b2b.gif",j=r.p+"static/image/a2ba7580234d7fd8cfd9a22dda12854f.5f45102f.gif",f=r.p+"static/image/42b23688229a86fff1674de247feaef0.6c2e1422.gif",p=r.p+"static/image/2d74df1c7facecc9bcc9f61383f940a0.5f9033c1.gif",m=r.p+"static/image/70c239f1edaaaf8d5d7317aea57b638c.101daf8b.gif",g=r.p+"static/image/3a16b819be97cc30f95899faaea5aa82.f9b29c02.gif",b=r.p+"static/image/9ef8f50b6e4bc64876f0809055cb6286.60591189.webp",u=r.p+"static/image/4d1c8fbbf5de584eee6b85344e488a4d.0d3478e8.gif",S=r.p+"static/image/6b808ac38d5bee1650384615de86cd28.da539349.gif",k=r.p+"static/image/02c4810ba904220bf8183ee781b3a1aa.19f452ab.gif",y=r.p+"static/image/19dafc60a903e98552db2def8f8c0119.53465653.gif",v=r.p+"static/image/3a4a197edbb3aa04a811ddcc6e64aa98.8a26dd5f.webp",C=r.p+"static/image/bbd0935731bc2d5a2c0c175ab121f1e1.cbc4341c.webp",w=r.p+"static/image/8fab0ba393948f8443e3afc45cd954d3.0414ebf8.webp",N=r.p+"static/image/43dc6401524561427c643ec82484bb88.fcb4a47a.gif",Y=r.p+"static/image/e5b547fd3d7166b446f0f7315fd75f3e.cb6db572.gif",_=r.p+"static/image/f0b486ed8e3cf2c89138f0a9a9b41332.b2fb8289.gif",X=r.p+"static/image/866bfd57e1ed43efe95040860459a5ba.e92a24f5.gif",z=r.p+"static/image/06009545106c5b29a88eeb0859c4f900.51d97f8d.webp",q=r.p+"static/image/9191528f81f4ad2efdbffff2d47f5a40.c5cbdd41.gif",D=r.p+"static/image/2c7486d35cecb1f005c392b45148f530.fbb447de.webp",W=r.p+"static/image/259a6c6474f14d04c03252104785c674.8843152c.webp",M=r.p+"static/image/e09f568265525de3c54884ce5ff02fc5.65cb4a0f.gif",G=r.p+"static/image/665eef04501398baa7804f6eec8066c1.df3b9020.gif",J=r.p+"static/image/3b05fd4875a659f3f82102f9172d68ff.f817d0bc.gif",R=r.p+"static/image/4f9ce7e32bf46fc4d224161a2b16cb4c.d4e8e5ad.gif",P=r.p+"static/image/40d818f94ba81bae30d34463bf14950c.6c5dd972.gif",E=r.p+"static/image/c0a1059bb612b3f52acb297dbf600979.560d3a9a.gif",V=r.p+"static/image/567601cd854ac9229b35dd934bb502a2.63eaf534.gif",L=r.p+"static/image/3b87d4c3fcf313231e69bc6e51246e3a.f9b29c02.gif",O=r.p+"static/image/b9d66f2ce6b5d8d2c67b1caf9bc614b6.97531de5.gif",Z=r.p+"static/image/181b837c288ba245e29e3c7b73c10cf5.43e43dab.webp",A=r.p+"static/image/32887e507bc104565c3e9db3f0369c03.b52c0e1b.webp";function B(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",strong:"strong",img:"img",ul:"ul",li:"li",blockquote:"blockquote",pre:"pre",h3:"h3"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"第37章css变换之单个变换",children:["第37章—CSS变换之单个变换",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第37章css变换之单个变换",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["\uFEFFCSS 变换（",(0,s.jsx)(n.code,{children:"transform"}),"）与 CSS 的过渡（",(0,s.jsx)(n.code,{children:"transition"}),"）和 CSS 的动画（",(0,s.jsx)(n.code,{children:"animation"}),"）一起出现在 Web 上，它们主要用于 Web 上动效的制作。十多年以来，这些都是 Web 开发者常用的 CSS 特性。例如，使用 CSS 的 ",(0,s.jsx)(n.code,{children:"transform"})," 可以对元素进行旋转、平移、缩放和扭曲等操作。"]}),"\n",(0,s.jsxs)(n.p,{children:["对于 Web 开发者而言，使用 ",(0,s.jsx)(n.code,{children:"transform"})," 操作单个函数时，它很容易，也很易于理解。然而，当处理多个值时，就绝非易事，会给 Web 开发者带来繁重的认知负荷。庆幸的是，CSS 通过引入单独的变换属性来解决这种认知负荷。也就是说，我们除了可以使用 CSS 的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性进行旋转、平移和缩放等操作之外，我们还可以使用 ",(0,s.jsx)(n.code,{children:"rotate"})," 、",(0,s.jsx)(n.code,{children:"translate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"})," 等属性进行旋转、平移和缩放等操作。这些新增的单个变换属性几乎完全消除了使用 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的需要，这是令人难以置信的，因为它们打开了大量的可能性。"]}),"\n",(0,s.jsx)(n.p,{children:"在这节课中，我将分解这三个属性是如何工作的(它并不像你想象的那么简单)，并在最后解释为什么它们是如此重要。"}),"\n",(0,s.jsxs)(n.p,{children:["首先，让我们回顾一下当前的变换属性（",(0,s.jsx)(n.code,{children:"transform"}),"），然后如何通过使用新的单个变换属性来改进其功能。让我们开始吧。"]}),"\n",(0,s.jsxs)(n.h2,{id:"回顾-css-的变换属性-transform",children:["回顾 CSS 的变换属性 transform",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#回顾-css-的变换属性-transform",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["CSS 的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的值主要分为 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://www.w3.org/TR/css-transforms-1/#two-d-transform-functions",target:"_blank",rel:"noopener noreferrer",children:"2D 函数"})})," 和 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://www.w3.org/TR/css-transforms-2/#three-d-transform-functions",target:"_blank",rel:"noopener noreferrer",children:"3D 函数"})}),"："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["在 CSS 中，",(0,s.jsx)(n.code,{children:"transform"})," 属性通过使用它的函数（比如 ",(0,s.jsx)(n.code,{children:"translate()"})," 、",(0,s.jsx)(n.code,{children:"rotate()"})," 和 ",(0,s.jsx)(n.code,{children:"scale()"})," 等）可以做很多不同的事情，例如："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["平移：",(0,s.jsx)(n.code,{children:"translate()"})," 、",(0,s.jsx)(n.code,{children:"translateX()"})," 、",(0,s.jsx)(n.code,{children:"translateY()"})," 、",(0,s.jsx)(n.code,{children:"translateZ()"})," 和 ",(0,s.jsx)(n.code,{children:"translate3d()"})]}),"\n",(0,s.jsxs)(n.li,{children:["旋转：",(0,s.jsx)(n.code,{children:"rotate()"})," 、",(0,s.jsx)(n.code,{children:"rotateX()"})," 、",(0,s.jsx)(n.code,{children:"rotateY()"})," 、",(0,s.jsx)(n.code,{children:"rotateZ()"})," 和 ",(0,s.jsx)(n.code,{children:"rotate3d()"})]}),"\n",(0,s.jsxs)(n.li,{children:["缩放：",(0,s.jsx)(n.code,{children:"scale()"})," 、",(0,s.jsx)(n.code,{children:"scaleX()"})," 、",(0,s.jsx)(n.code,{children:"scaleY()"})," 、",(0,s.jsx)(n.code,{children:"scaleZ()"})," 和 ",(0,s.jsx)(n.code,{children:"scale3d()"})]}),"\n",(0,s.jsxs)(n.li,{children:["扭曲：",(0,s.jsx)(n.code,{children:"skew()"})," 、",(0,s.jsx)(n.code,{children:"skewX()"})," 、",(0,s.jsx)(n.code,{children:"skewY()"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Z,alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["这是 ",(0,s.jsx)(n.code,{children:"transform"})," 属性最基础的使用。你也可以尝试在 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://moro.es/",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"http://www.moro.es",target:"_blank",rel:"noopener noreferrer",children:"www.moro.es"})})})," (变换可视化工具)上调整变换函数对应的参数，可视化查看 CSS 变换各函数的功能和作用："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:O,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["变换可视化工具：",(0,s.jsx)(n.a,{href:"https://css-transform.moro.es/",target:"_blank",rel:"noopener noreferrer",children:"https://css-transform.moro.es/"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"transform"})," 属性除了可以运用单个函数值之外，还可以使用多个组合函数，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0transform: translateX(66vmin) rotate(.125turn) scale(.5) translateY(66vmin);\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注意，",(0,s.jsx)(n.code,{children:"transform"})," 运用多个变换函数时，函数之间需要使用空格符隔开。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"上面代码运行效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:L,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/LYMVXYV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYMVXYV"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["正如你所看到的，元素 ",(0,s.jsx)(n.code,{children:".element"})," 先沿着 ",(0,s.jsx)(n.code,{children:"x"})," 轴向右平移了 ",(0,s.jsx)(n.code,{children:"66vmin"})," ，然后旋转 ",(0,s.jsx)(n.code,{children:"0.125turn"})," ，再缩小 ",(0,s.jsx)(n.code,{children:"0.5"})," 倍，最后沿着 ",(0,s.jsx)(n.code,{children:"y"})," 轴向下平移 ",(0,s.jsx)(n.code,{children:"66vmin"})," 。注意，该示例整个操作都是基于元素正中心的，这是因为 ",(0,s.jsx)(n.code,{children:"transform-origin"})," 属性的值为 ",(0,s.jsx)(n.code,{children:"50% 50%"})," 。"]}),"\n",(0,s.jsx)(n.p,{children:"当你对元素执行变换时，从技术上讲，你并没有修改元素本身，你只是正在影响它的坐标系。它并不会影响元素盒子自身的大小，以及它所占的空间大小。"}),"\n",(0,s.jsxs)(n.p,{children:["在 Web 上，使用 ",(0,s.jsx)(n.code,{children:"transform"})," 可以调整 UI 外观之外，更多的时候是用于 Web 动效的制作中。比如下面这个简单的动效，即“月球绕着地球转”："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="orbit">\n \xa0 \xa0<div class="moon">\x3c!-- 月球 --\x3e</div>\n \xa0 \xa0<div class="planet">\x3c!-- 地球 --\x3e</div>\n</div>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n \xa0  @keyframes moonOrbit {\n \xa0 \xa0 \xa0  from {\n \xa0 \xa0 \xa0 \xa0 \xa0  transform: rotate(0deg) translateX(200px);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0  to {\n \xa0 \xa0 \xa0 \xa0 \xa0  transform: rotate(360deg) translateX(200px);\n \xa0 \xa0 \xa0  }\n \xa0  }\n \xa0 \xa0\n \xa0  .moon {\n \xa0 \xa0 \xa0  animation: moonOrbit 6s linear infinite;\n \xa0  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/LYMVaqW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYMVaqW"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在这个例子中，首先将月球（",(0,s.jsx)(n.code,{children:".moon"}),"）定位在地球（",(0,s.jsx)(n.code,{children:".planet"}),"）的正中心。然后在 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中把月球向右平移 ",(0,s.jsx)(n.code,{children:"200px"})," ，然后使它在一个圆圈中旋转。因为月球是绕着地球的中心旋转，所以它绕地球运行的距离是一样的。"]}),"\n",(0,s.jsxs)(n.h2,{id:"transform-属性的局限性",children:["transform 属性的局限性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#transform-属性的局限性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我想你对 CSS 的 ",(0,s.jsx)(n.code,{children:"transform"})," 有一定的认识了。但为了让大家能更好的理解单个变换属性的好处，我们先一起来看看 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的局限性。"]}),"\n",(0,s.jsxs)(n.p,{children:["前面说过，CSS 的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性可以使用单个或多个变换函数。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0transform: rotate(45deg);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中的 ",(0,s.jsx)(n.code,{children:"transform"})," 可以很好的工作，元素会基于其中心位置旋转 ",(0,s.jsx)(n.code,{children:"45deg"})," 。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们在实际开发的过程中，可能会在元素不同状态下应用不同的变换。比如上面这个示例，元素默认状态有一个旋转效果（",(0,s.jsx)(n.code,{children:"rotate(45deg)"}),"），当用户将鼠标悬停在元素上时，希望在旋转效果的基础上叠加一个放大的效果，例如 ",(0,s.jsx)(n.code,{children:"scale(1.5)"})," 。如果你像下面这样编写 CSS 的话，最终效果和你期望的有所不同："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0transform: rotate(45deg);\n \xa0 \xa0\n \xa0  &:hover {\n \xa0 \xa0 \xa0 \xa0transform: scale(1.5);\n \xa0  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/YzdXbLz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzdXbLz"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["不难发现，当用户鼠标悬浮在元素上时，只有放大的效果，而原本的旋转效果被丢失了。这是因为 ",(0,s.jsx)(n.code,{children:":hover"})," 状态下的 ",(0,s.jsx)(n.code,{children:"transform"})," 覆盖了默认状态下的 ",(0,s.jsx)(n.code,{children:"transform"})," 。如果要改变这一现象，我们不得不在 ",(0,s.jsx)(n.code,{children:":hover"})," 状态下保留 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的初始值："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0transform: rotate(45deg);\n \xa0 \xa0\n \xa0  &:hover {\n \xa0 \xa0 \xa0 \xa0transform: rotate(45deg) scale(1.5);\n \xa0  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/GRPJawq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRPJawq"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["上面示例还不算复杂，因为 ",(0,s.jsx)(n.code,{children:"transform"})," 使用的是单一值，可实际开发的过程中，",(0,s.jsx)(n.code,{children:"transform"})," 属性会同时使用多个变换函数，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0transform: scale(1.5) translate(0, 50%) rotate(90deg);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["同样的，如果我们想在悬浮状态（",(0,s.jsx)(n.code,{children:":hover"}),"）调整缩放量，我们不得不要像下面这样编写 CSS 代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0transform: scale(1.5) translate(0, 50%) rotate(90deg);\n \xa0 \xa0\n \xa0  &:hover {\n \xa0 \xa0 \xa0 \xa0transform: scale(.5) translate(0, 50%) rotate(90deg);\n \xa0  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["元素在悬浮状态下，为了在不丢失平移（",(0,s.jsx)(n.code,{children:"translate(0, 50%)"}),"）和旋转（",(0,s.jsx)(n.code,{children:"rotate(90deg)"}),"）值的情况下缩小，我们不得不把它们复制过来与更新的缩放值（",(0,s.jsx)(n.code,{children:"scale(.5)"}),"）一起使用。"]}),"\n",(0,s.jsx)(n.p,{children:"对于单个悬浮状态，这可能不是太大的负担。但随着变换的增长或创建多帧动画时，这就会变得很复杂。这样的场景在实际生产中也是很常见。"}),"\n",(0,s.jsxs)(n.p,{children:["假设你正在开发一个模态框（Modal）组件，使用 ",(0,s.jsx)(n.code,{children:"transform"})," 让模态框在浏览器视窗中水平垂直居中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".modal {\n \xa0 \xa0position: absolute;\n \xa0 \xa0top: 50%;\n \xa0 \xa0left: 50%;\n \xa0 \xa0transform: translate(-50%, -50%);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["它可以很好的工作。但是，有一个新的需求，需要给模态框添加一个 ",(0,s.jsx)(n.code,{children:"bounceInDown"})," 的动效："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer modal {\n \xa0 \xa0@keyframes bounceInDown {\n \xa0 \xa0 \xa0 \xa0from,\n \xa0 \xa0 \xa0 \xa060%,\n \xa0 \xa0 \xa0 \xa075%,\n \xa0 \xa0 \xa0 \xa090%,\n \xa0 \xa0 \xa0 \xa0to {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0\n \xa0 \xa0 \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0opacity: 0;\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translate3d(0, -3000px, 0) scaleY(3);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0\n \xa0 \xa0 \xa0 \xa060% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0opacity: 1;\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translate3d(0, 25px, 0) scaleY(0.9);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0\n \xa0 \xa0 \xa0 \xa075% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translate3d(0, -10px, 0) scaleY(0.95);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0\n \xa0 \xa0 \xa0 \xa090% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translate3d(0, 5px, 0) scaleY(0.985);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0\n \xa0 \xa0 \xa0 \xa0to {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translate3d(0, 0, 0);\n \xa0 \xa0 \xa0  }\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0dialog {\n \xa0 \xa0 \xa0 \xa0position: absolute;\n \xa0 \xa0 \xa0 \xa0top: 50%;\n \xa0 \xa0 \xa0 \xa0left: 50%;\n \xa0 \xa0 \xa0 \xa0transform: translate(-50%, -50%);\n \xa0 \xa0 \xa0 \xa0animation: bounceInDown 0.28s cubic-bezier(0.215, 0.61, 0.355, 1) both;\n \xa0  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["你会发现，添加 ",(0,s.jsx)(n.code,{children:"bounceInDown"})," 动效之后的模态框，在动效结束时，它的位置也被改变了，并没有在浏览器视窗中水平居中："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:J,alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["这是因为运用于模态框的 ",(0,s.jsx)(n.code,{children:"transform"})," 并不是最初设置的值（",(0,s.jsx)(n.code,{children:"transform: translate(-50%,-50%)"}),"），而是被 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中最后一帧的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性值（",(0,s.jsx)(n.code,{children:"translate3d(0,0,0)"}),"）覆盖了。如果要让添加了 ",(0,s.jsx)(n.code,{children:"bounceInDown"})," 动效的模态框，在动效结束之后依旧在浏览器视窗中水平垂直居中，我们不得不改变水平垂直居中的布局方案，或者调整 ",(0,s.jsx)(n.code,{children:"bounceInDown"})," 动画中每一帧的 ",(0,s.jsx)(n.code,{children:"transform"})," 的值，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer modal {\n \xa0 \xa0@keyframes bounceInDown {\n \xa0 \xa0 \xa0 \xa0from,\n \xa0 \xa0 \xa0 \xa060%,\n \xa0 \xa0 \xa0 \xa075%,\n \xa0 \xa0 \xa0 \xa090%,\n \xa0 \xa0 \xa0 \xa0to {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0\n \xa0 \xa0 \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0opacity: 0;\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translate3d(-50%, calc(-3000px - 50%), 0) scaleY(3);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0\n \xa0 \xa0 \xa0 \xa060% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0opacity: 1;\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translate3d(-50%, calc(25px - 50%), 0) scaleY(0.9);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0\n \xa0 \xa0 \xa0 \xa075% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translate3d(-50%, calc(-10px - 50%), 0) scaleY(0.95);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0\n \xa0 \xa0 \xa0 \xa090% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translate3d(-50%, calc(5px - 50%), 0) scaleY(0.985);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0\n \xa0 \xa0 \xa0 \xa0to {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translate3d(-50%, -50%, 0);\n \xa0 \xa0 \xa0  }\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0dialog {\n \xa0 \xa0 \xa0 \xa0position: absolute;\n \xa0 \xa0 \xa0 \xa0top: 50%;\n \xa0 \xa0 \xa0 \xa0left: 50%;\n \xa0 \xa0 \xa0 \xa0transform: translate(-50%, -50%);\n \xa0 \xa0 \xa0 \xa0animation: bounceInDown 0.28s cubic-bezier(0.215, 0.61, 0.355, 1) both;\n \xa0  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/rNoOMWL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNoOMWL"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这对于 Web 开发者来说是痛苦的，而且也是易于出错的。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注意，在 CSS 中有很多种方式可以实现水平垂直居中，比如 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7161370789680250917/section/7161623855054716935",target:"_blank",rel:"noopener noreferrer",children:"CSS Flexbox"})})," 或 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7161370789680250917/section/7161624078397210638",target:"_blank",rel:"noopener noreferrer",children:"CSS Grid"})})," 中就有多不同的方案。换句话说，示例中的模态框（",(0,s.jsx)(n.code,{children:"dialog"}),"）不使用 ",(0,s.jsx)(n.code,{children:"transform"})," 制作水平垂直居中，就可以完全避免上面示例所呈现的现象。不过，课程中使用 ",(0,s.jsx)(n.code,{children:"transform"})," 来实现，是为了更好的通过示例告诉大家，在使用 ",(0,s.jsx)(n.code,{children:"transform"})," 时，你将在实际生产中，将会碰到哪些挑战！"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"transform"})," 属性使用组合变换函数（同时包含多个变换函数）时，将会带来另一个挑战。因为，",(0,s.jsx)(n.code,{children:"transform"})," 属性包含多个变换函数时，",(0,s.jsx)(n.strong,{children:"它的顺序很重要，变换函数将按顺序应用"}),"。从 ",(0,s.jsx)(n.a,{href:"https://www.w3.org/TR/css-transforms-1/#transform-rendering",target:"_blank",rel:"noopener noreferrer",children:"W3C 的规范中"}),"，我们可以获知，变换函数（",(0,s.jsx)(n.code,{children:"translate()"})," 、",(0,s.jsx)(n.code,{children:"rotate()"})," 等）是从左向右应用的，即",(0,s.jsx)(n.strong,{children:"从左到右乘以变换属性中的每个变换函数"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"这一事实可能令人惊讶，因为应用相同的转换函数可能会导致不同的视觉效果，这取决于它们的顺序。例如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".box1 {\n \xa0 \xa0transform: \n \xa0 \xa0 \xa0 \xa0translate(var(--translateX), var(--translateY)) \n \xa0 \xa0 \xa0 \xa0scale(var(--scaleX), var(--scaleY)) \n \xa0 \xa0 \xa0 \xa0rotate(var(--deg));\n}\n​\n.box2 {\n \xa0 \xa0transform: \n \xa0 \xa0 \xa0 \xa0rotate(var(--deg))\n \xa0 \xa0 \xa0 \xa0scale(var(--scaleX), var(--scaleY)) \n \xa0 \xa0 \xa0 \xa0translate(var(--translateX), var(--translateY)) ;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/GRPJwmv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRPJwmv"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"假设上面示例中的各参数的值为："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".box {\n    --translateX: 80px;\n    --translateY: 80px;\n    --scaleX: 1.5;\n    --scaleY: 1.5;\n    --deg: 45deg;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["那么 ",(0,s.jsx)(n.code,{children:"transform: translate(80px, 80px) scale(1.5, 1.5) rotate(45deg)"})," 和 ",(0,s.jsx)(n.code,{children:"transform: rotate(45deg) scale(1.5, 1.5) translate(80px, 80px)"})," 对应的效果如下图所示："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:W,alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["事实上，你可通过嵌套元素获得相同的效果。例如 ",(0,s.jsx)(n.code,{children:"transform: translate(80px, 80px) scale(1.5, 1.5) rotate(45deg)"})," 对应的嵌套关系如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div style="transform: translate(80px, 80px)">\n    <div style="transform: scale(1.5, 1.5)">\n        <div class="transform: roate(45deg)"></div>\n    </div>\n</div>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/zYyGebb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYyGebb"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["随着变换变得越来越复杂，使用的变换函数也越来越多，管理 ",(0,s.jsx)(n.code,{children:"transform"})," 属性就变得越来越困难。以多帧动画为例:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/OJryRZG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJryRZG"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"当创建具有多个变换值的动画时，在每一帧中以正确的顺序管理每个属性的认知负荷可能会成为相当大的负担。因为顺序一旦出错，整个效果就会出错。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n \xa0 \xa0@keyframes animate {\n \xa0 \xa0 \xa0 \xa010%,\n \xa0 \xa0 \xa0 \xa015% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(0);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa016% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(0) scale(0.5);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa018% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(0) scale(1.5);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa020% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(0) scale(1);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa050% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(50%) scale(1) rotate(180deg);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa065% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(-50%) scale(1) rotate(180deg);\n \xa0 \xa0 \xa0  }\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0@keyframes animate-alt {\n \xa0 \xa0 \xa0 \xa010%,\n \xa0 \xa0 \xa0 \xa015% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(-150%);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa016% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(-150%) scale(0.5);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa018% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(-150%) scale(1.5);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa020% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(-150%) scale(1);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa050% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(-150%) scale(1) rotate(-180deg);\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa065% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0transform: translateX(-50%) scale(1) rotate(-180deg);\n \xa0 \xa0 \xa0  }\n \xa0  }\n​\n \xa0 \xa0.animation {\n \xa0 \xa0 \xa0  &::before {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0animation: animate 5s linear infinite;\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0  &::after {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0animation: animate-alt 5s linear infinite;\n \xa0 \xa0 \xa0  }\n \xa0  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这些挑战和认知负荷似乎可以通过引入 CSS 单个的变换属性来消除。"}),"\n",(0,s.jsxs)(n.h2,{id:"单个变换属性的简介",children:["单个变换属性的简介",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单个变换属性的简介",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["W3C 的 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://www.w3.org/TR/css-transforms-2/",target:"_blank",rel:"noopener noreferrer",children:"CSS 变换模块 Level 2"})})," （CSS Transforms Module Level 2）为 CSS 的变换新增了一个特性，即 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://www.w3.org/TR/css-transforms-2/#individual-transforms",target:"_blank",rel:"noopener noreferrer",children:"单个变换属性"})}),"。单个变换属性主要包括 ",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"})," 三个属性，分别映射 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的 ",(0,s.jsx)(n.code,{children:"translate()"})," 、",(0,s.jsx)(n.code,{children:"rotate()"})," 和 ",(0,s.jsx)(n.code,{children:"scale()"})," 三个函数。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注意，并非 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的所有变换函数都有匹配的单独变换属性，例如 ",(0,s.jsx)(n.code,{children:"skew()"})," 和 ",(0,s.jsx)(n.code,{children:"matrix()"})," 函数。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"在 CSS 中使用这些单个变换属性，会让 Web 开发者有一种宾至如归的感觉。比如下面这个示例，它们最终的结果是一样的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".transform {\n    transform: translate(100px, 100px) rotate(45deg) scale(2);\n}\n\n.individual--transform {\n    translate: 100px 100px;\n    rotate: 45deg;\n    scale: 2;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:z,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/OJryRGK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJryRGK"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["正如你所看到的，使用 ",(0,s.jsx)(n.code,{children:"transform"})," 和单个变换属性最终效果都是一样的，即元素做了一次平移，一次旋转和一次缩放。但相对而言，单个变换属性要比 ",(0,s.jsx)(n.code,{children:"transform"})," 属性使用组合值要好得多。其中一个原因是方便，Web 开发者不是总在一个 ",(0,s.jsx)(n.code,{children:"transform"})," 中包含所有内容。对于某些代码库，这可能更清晰或更具可读性。除此之外，单个变换属性是相互独立的，Web 开发者可以按自已认为合适的方式来自由地组合那些不同的变换属性。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0translate: 100px 100px;\n \xa0 \xa0rotate: 45deg;\n \xa0 \xa0scale: 1.1;\n}\n​\n/* 等同于 */\n.element {\n \xa0 \xa0rotate: 45deg;\n \xa0 \xa0scale: 1.1;\n \xa0 \xa0translate: 100px 100px;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["当然，Web 开发者同样可以使用单个变换属性构建出复杂的动画效果，并且省去了不少的麻烦。简单地说，使用单个变换属性好处总比使用 ",(0,s.jsx)(n.code,{children:"transform"})," 属性好得多。稍后我将会以具体实例来解释它。"]}),"\n",(0,s.jsxs)(n.h2,{id:"单个变换属性的使用",children:["单个变换属性的使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单个变换属性的使用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在阐述单个变换属性的益处之前，我们先来了解一下单个变换属性如何使用。"}),"\n",(0,s.jsxs)(n.h3,{id:"缩放scale",children:["缩放：scale",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#缩放scale",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["让我们从三个新属性中最简单的一个开始，即缩放属性 ",(0,s.jsx)(n.code,{children:"scale"})," 。它的工作原理与 ",(0,s.jsx)(n.code,{children:"scale()"})," 函数完全相同："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"scale: none | [ <number> | <percentage> ]{1,3}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"scale"})," 属性接受 ",(0,s.jsx)(n.code,{children:"1 ~ 3"})," 个值，每个值按照 ",(0,s.jsx)(n.code,{children:"x"})," 、",(0,s.jsx)(n.code,{children:"y"})," 和 ",(0,s.jsx)(n.code,{children:"z"})," 轴的顺序来指定缩放比例："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["当 ",(0,s.jsx)(n.code,{children:"scale"})," 只设置了一个值时，那么 ",(0,s.jsx)(n.code,{children:"x"})," 轴和 ",(0,s.jsx)(n.code,{children:"y"})," 轴的缩放比例值相同"]}),"\n",(0,s.jsxs)(n.li,{children:["当 ",(0,s.jsx)(n.code,{children:"scale"})," 设置了两个值时，那么第一个值指定 ",(0,s.jsx)(n.code,{children:"x"})," 轴缩放比例，第二个值指定 ",(0,s.jsx)(n.code,{children:"y"})," 轴的缩放比例"]}),"\n",(0,s.jsxs)(n.li,{children:["当 ",(0,s.jsx)(n.code,{children:"scale"})," 设置了三个值时，那么第一个值指定 ",(0,s.jsx)(n.code,{children:"x"})," 轴的缩放比例，第二个值指定 ",(0,s.jsx)(n.code,{children:"y"})," 轴的缩放比例，第三个值指定 ",(0,s.jsx)(n.code,{children:"z"})," 轴的缩放比例"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，如果未给出 ",(0,s.jsx)(n.code,{children:"z"})," 轴的值，则默认为 ",(0,s.jsx)(n.code,{children:"1"})," 。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果 ",(0,s.jsx)(n.code,{children:"scale"})," 属性未显式设置第三个值（省略第三个值 ",(0,s.jsx)(n.code,{children:"1"})," 或 ",(0,s.jsx)(n.code,{children:"100%"}),"），那么 ",(0,s.jsx)(n.code,{children:"scale"})," 指定 2D 缩放，相当于 ",(0,s.jsx)(n.code,{children:"scale()"})," 函数；否则，",(0,s.jsx)(n.code,{children:"scale"})," 指定一个 3D 缩放，相当于 ",(0,s.jsx)(n.code,{children:"scale3d()"})," 函数。只不过，省略第三个值与设置第三个值为 ",(0,s.jsx)(n.code,{children:"1"})," 或 ",(0,s.jsx)(n.code,{children:"100%"})," 最终结果没有区别。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"/* 指定一个值 */\n.scale {\n \xa0 \xa0scale: 2; /* x = y = 2, z = 1*/\n \xa0 \xa0\n \xa0 \xa0/* 等同于 */\n \xa0 \xa0transform: scale(2);\n}\n​\n/* 指定两个值 */\n.scale {\n \xa0 \xa0scale: 2 .5; /* x = 2, y = .5, z = 1*/\n \xa0 \xa0\n \xa0 \xa0/* 等同于 */\n \xa0 \xa0transform: scale(2, .5);\n}\n​\n/* 指定三个值 */\n.scale {\n \xa0 \xa0scale: 1.2 2 .5; /* x = 1.2, y = 2, z = .5*/\n \xa0 \xa0\n \xa0 \xa0/* 等同于 */\n \xa0 \xa0transform: scale3d(1.2, 2, .5);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:X,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/NWeGbab",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWeGbab"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"平移translate",children:["平移：translate",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#平移translate",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["接下来是 ",(0,s.jsx)(n.code,{children:"translate"})," 属性，其",(0,s.jsx)(n.strong,{children:"大部分工作原理"}),"与 ",(0,s.jsx)(n.code,{children:"translate()"})," 函数完全相同："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"translate: none | <length-percentage> [ <length-percentage> <length>? ]?\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"translate"})," 属性也可以接受 ",(0,s.jsx)(n.code,{children:"1 ~ 3"})," 个值，每个值按照 ",(0,s.jsx)(n.code,{children:"x"})," 、",(0,s.jsx)(n.code,{children:"y"})," 和 ",(0,s.jsx)(n.code,{children:"z"})," 轴的顺序指定平移值。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["当 ",(0,s.jsx)(n.code,{children:"translate"})," 属性指定一个值时，它的工作原理和 ",(0,s.jsx)(n.code,{children:"translate()"})," （或 ",(0,s.jsx)(n.code,{children:"translateX()"}),"）函数一样，元素会沿着 ",(0,s.jsx)(n.code,{children:"x"})," 轴平移。当 ",(0,s.jsx)(n.code,{children:"translate"})," 属性指定的值大于 ",(0,s.jsx)(n.code,{children:"0"})," 时，元素将沿着 ",(0,s.jsx)(n.code,{children:"x"})," 轴向右平移，反之它将沿着 ",(0,s.jsx)(n.code,{children:"x"})," 轴向左平移"]}),"\n",(0,s.jsxs)(n.li,{children:["当 ",(0,s.jsx)(n.code,{children:"translate"})," 属性指定两个值时，它的工作原理和 ",(0,s.jsx)(n.code,{children:"translate(x, y)"})," 函数一样，元素会同时沿着 ",(0,s.jsx)(n.code,{children:"x"})," 轴和 ",(0,s.jsx)(n.code,{children:"y"})," 轴平移。其中第一个值指定 ",(0,s.jsx)(n.code,{children:"x"})," 轴的平移量，第二个值指定 ",(0,s.jsx)(n.code,{children:"y"})," 轴的平移量。如果 ",(0,s.jsx)(n.code,{children:"x"})," 轴的值大于 ",(0,s.jsx)(n.code,{children:"0"})," ，元素将沿着 ",(0,s.jsx)(n.code,{children:"x"})," 轴向右平移，反之将沿着 ",(0,s.jsx)(n.code,{children:"x"})," 轴向左平移；如果 ",(0,s.jsx)(n.code,{children:"y"})," 轴的值大于 ",(0,s.jsx)(n.code,{children:"0"})," ，元素将沿着 ",(0,s.jsx)(n.code,{children:"y"})," 向下平移，反之将沿着 ",(0,s.jsx)(n.code,{children:"y"})," 轴向上平移"]}),"\n",(0,s.jsxs)(n.li,{children:["当 ",(0,s.jsx)(n.code,{children:"translate"})," 属性指定三个值时，它的工作原理和 ",(0,s.jsx)(n.code,{children:"translate3d(x, y, z)"})," 函数一样。第一个值指定 ",(0,s.jsx)(n.code,{children:"x"})," 轴的平移量，第二个值指定 ",(0,s.jsx)(n.code,{children:"y"})," 轴的平移量，第三个值指定 ",(0,s.jsx)(n.code,{children:"z"})," 轴的平移量。如果 ",(0,s.jsx)(n.code,{children:"x"})," 轴的值大于 ",(0,s.jsx)(n.code,{children:"0"})," ，元素将沿着 ",(0,s.jsx)(n.code,{children:"x"})," 轴向右平移，反之将沿着 ",(0,s.jsx)(n.code,{children:"x"})," 轴向左平移；如果 ",(0,s.jsx)(n.code,{children:"y"})," 轴的值大于 ",(0,s.jsx)(n.code,{children:"0"})," ，元素将沿着 ",(0,s.jsx)(n.code,{children:"y"})," 轴向下平移，反之将沿着 ",(0,s.jsx)(n.code,{children:"y"})," 轴向上平移；如果 ",(0,s.jsx)(n.code,{children:"z"})," 轴的值大于 ",(0,s.jsx)(n.code,{children:"0"})," ，元素将沿着 ",(0,s.jsx)(n.code,{children:"z"})," 轴平移，离用户眼睛越来越近，元素有放大的效果，反之元素离用户的眼睛越来越远，元素有缩小的效果"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，当 ",(0,s.jsx)(n.code,{children:"translate"})," 属性缺少第二个或第三个值时，它们默认为 ",(0,s.jsx)(n.code,{children:"0px"})," 。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"/* 一个值 */\n.translate {\n \xa0 \xa0translate: 100px; /* x = 100px, y = 0, z = 0 */\n \xa0 \xa0\n \xa0 \xa0/* 等同于 */\n \xa0 \xa0transform: translate(100px);\n \xa0 \xa0\n \xa0 \xa0/* 也等同于 */\n \xa0 \xa0transform: translateX(100px);\n}\n​\n/* 两个值 */\n.translate {\n \xa0 \xa0translate: 100px 200px; /* x = 100px, y = 200px, z = 0 */\n \xa0 \xa0\n \xa0 \xa0/* 等同于 */\n \xa0 \xa0transform: translate(100px, 200px);\n}\n​\n/* 三个值 */\n.translate {\n \xa0 \xa0translate: 100px 200px 50px; /* x = 100px, y = 200px, z = 50px */\n \xa0 \xa0\n \xa0 \xa0/* 等同于 */\n \xa0 \xa0transform: translate3d(100px, 200px, 50px);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/xxmwRyB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxmwRyB"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"旋转rotate",children:["旋转：rotate",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#旋转rotate",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["相对而言，旋转 ",(0,s.jsx)(n.code,{children:"rotate"})," 属性的使用要比缩放 ",(0,s.jsx)(n.code,{children:"scale"})," 和平移 ",(0,s.jsx)(n.code,{children:"translate"})," 属性复杂一些。",(0,s.jsx)(n.code,{children:"rotate"})," 属性接受一个角度来旋转元素，也可以接受一个轴来旋转元素："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"rotate: none | <angle> | [ x | y | z | <number>{3} ] && <angle>\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["当 ",(0,s.jsx)(n.code,{children:"rotate"})," 属性只指定一个角度值（",(0,s.jsx)(n.code,{children:"<angle>"}),"），它的工作原理就像 ",(0,s.jsx)(n.code,{children:"rotate()"})," （或 ",(0,s.jsx)(n.code,{children:"rotateZ()"}),"）函数，元素围绕着 ",(0,s.jsx)(n.code,{children:"z"})," 轴旋转指定的角度"]}),"\n",(0,s.jsxs)(n.li,{children:["当 ",(0,s.jsx)(n.code,{children:"rotate"})," 属性同时指定一个轴（可以是 ",(0,s.jsx)(n.code,{children:"x"})," 、",(0,s.jsx)(n.code,{children:"y"})," 或 ",(0,s.jsx)(n.code,{children:"z"})," 任一轴）和一个角度值（",(0,s.jsx)(n.code,{children:"<angle>"}),"），那么元素将会围绕着指定的轴旋转对应的角度。其中第一个值为指定的轴，第二个值为旋转的角度值。如果指定的轴是 ",(0,s.jsx)(n.code,{children:"x"})," 轴，那么它的工作原理和 ",(0,s.jsx)(n.code,{children:"rotateX()"})," 函数相同；如果指定的轴是 ",(0,s.jsx)(n.code,{children:"y"})," 轴，那么它的工作原理和 ",(0,s.jsx)(n.code,{children:"rotateY()"})," 函数相同，如果指定的轴是 ",(0,s.jsx)(n.code,{children:"z"})," 轴，那么它的工作原理和 ",(0,s.jsx)(n.code,{children:"rotateZ()"})," 函数相同"]}),"\n",(0,s.jsxs)(n.li,{children:["当 ",(0,s.jsx)(n.code,{children:"rotate"})," 属性指定了三个数字和一个角度值（",(0,s.jsx)(n.code,{children:"<angle>"}),"），它的工作原理就像 ",(0,s.jsx)(n.code,{children:"rotate3d()"})," ，其中给出的三个数字表示以原点为中心的向量的 ",(0,s.jsx)(n.code,{children:"x"})," 、",(0,s.jsx)(n.code,{children:"y"})," 和 ",(0,s.jsx)(n.code,{children:"z"})," 分量（即每个轴上应用的旋转程度），第四个角度值是旋转的角度"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".rotate {\n    rotate: 45deg;\n    \n    /* 等同于 */\n    transform: rotate(45deg);\n    \n    /* 也等同于*/\n    transform: rotateZ(45deg);\n}\n\n.rotate {\n    rotate: x 45deg;\n    \n    /* 等同于 */\n    transform: rotateX(45deg);\n}\n\n.rotate {\n    rotate: y 45deg;\n    \n    /* 等同于 */\n    transform: rotateY(45deg);\n}\n\n.rotate {\n    rotate: z 45deg;\n    \n    /* 等同于 */\n    transform: rotateZ(45deg);\n}\n\n.rotate {\n    rotate: 0 1 1.5 90deg;\n    \n    /* 等同于 */\n    transform: rotate3d(0, 1, 1.5, 90deg);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Y,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/YzdyZRJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzdyZRJ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"单个变换属性的优势",children:["单个变换属性的优势",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单个变换属性的优势",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["知道了如何使用 ",(0,s.jsx)(n.code,{children:"scale"})," 、",(0,s.jsx)(n.code,{children:"translate"})," 和 ",(0,s.jsx)(n.code,{children:"rotate"})," 属性之后，我们一起来看看它们给 Web 开发者带来哪些益处？"]}),"\n",(0,s.jsxs)(n.p,{children:["在介绍 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的时候，我们有说过，",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/GRPJawq",target:"_blank",rel:"noopener noreferrer",children:"元素在不同状态下可能会设置不同的变换函数"}),"。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0transform: rotate(45deg);\n \xa0 \xa0\n \xa0  &:hover {\n \xa0 \xa0 \xa0 \xa0transform: rotate(45deg) scale(1.5);\n \xa0  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["元素在悬浮状态下，Web 开发者不得不复制变换的初始值（",(0,s.jsx)(n.code,{children:"rotate(45deg)"}),"），否则悬浮状态下的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性将会覆盖元素最初设置的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的值。"]}),"\n",(0,s.jsx)(n.p,{children:"有了单个变换属性之后，这一切就显得容易而且清晰多了。例如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0rotate: 45deg;\n \xa0 \xa0\n \xa0  &:hover {\n \xa0 \xa0 \xa0 \xa0scale: 1.5;\n \xa0  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:"fig-19.gif"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/OJrymRV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJrymRV"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["其次，单个变换属性和 CSS 的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性有一个关键性的区别，那就是单个变换属性对于顺序不是那么的重要，即顺序不是声明它们的顺序，它们的顺序总是相同的：",(0,s.jsx)(n.strong,{children:"首先平移（向外），然后旋转，然后缩放（向内）"})," 。"]}),"\n",(0,s.jsx)(n.p,{children:"这意味着，下面两个代码片段最终的结果是相同的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".transform--individual {\n \xa0 \xa0translate: 50% 0;\n \xa0 \xa0rotate: 30deg;\n \xa0 \xa0scale: 1.2;\n}\n​\n.transform--individual-alt {\n \xa0 \xa0rotate: 30deg;\n \xa0 \xa0translate: 50% 0;\n \xa0 \xa0scale: 1.2;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/bGOVWWe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGOVWWe"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在这两种情况下，目标元素将首先沿着 ",(0,s.jsx)(n.code,{children:"x"})," 轴向右平移 ",(0,s.jsx)(n.code,{children:"50%"})," ，然后旋转 ",(0,s.jsx)(n.code,{children:"30deg"})," ，最后放大 ",(0,s.jsx)(n.code,{children:"1.2"})," 倍。"]}),"\n",(0,s.jsx)(n.p,{children:"单个变换属性还有一个优势是，使得 Web 开发者开发动效时变得更简单，更清晰。例如，你要给目标元素添加下面这样的一个动画效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["在没有单个变换属性之前，使用 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的 ",(0,s.jsx)(n.code,{children:"translate()"})," 、",(0,s.jsx)(n.code,{children:"rotate()"})," 和 ",(0,s.jsx)(n.code,{children:"scale()"})," 函数实现这个动画，就必须计算所有定义的变换的中间值，并在每个关键帧中包含它们："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["如上图右侧关键帧示意图所示，如果要在时间轴的 ",(0,s.jsx)(n.code,{children:"10%"})," 位置旋转元素，其他变换的值也必须计算，例如 ",(0,s.jsx)(n.code,{children:"translateX(10%)"})," 、",(0,s.jsx)(n.code,{children:"scale(1.2)"})," 等，因为 ",(0,s.jsx)(n.code,{children:"transform"})," 属性需要所有变换函数的值。这一点在介绍 ",(0,s.jsx)(n.code,{children:"transfrom"})," 属性的局限性时也着重阐述过。简单地说，使用 ",(0,s.jsx)(n.code,{children:"transform"})," 属性组合多个变换函数，会使得 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 变得很复杂，也易于弄错。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes animation {\n \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0transform: translateX(0%) rotate(0deg) scale(1);\n \xa0  }\n \xa0 \xa0\n \xa0 \xa05% {\n \xa0 \xa0 \xa0 \xa0transform: translateX(5%) rotate(90deg) scale(1.2);\n \xa0  }\n \xa0 \xa0\n \xa0 \xa010% {\n \xa0 \xa0 \xa0 \xa0transform: translateX(10%) rotate(180deg) scale(1.2);\n \xa0  }\n \xa0 \xa0\n \xa0 \xa090% {\n \xa0 \xa0 \xa0 \xa0transform: translateX(90%) rotate(180deg) scale(1.2);\n \xa0  }\n \xa0 \xa0\n \xa0 \xa095% {\n \xa0 \xa0 \xa0 \xa0transform: translateX(95%) rotate(270deg) scale(1.2);\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0transform: translateX(100%) rotate(360deg) scale(1);\n \xa0  }\n} \n​\n.animation {\n \xa0 \xa0animation: animation 2s linear both;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/abPvWex",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abPvWex"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["有了单个变换属性之后，编写动画帧 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 就要容易得多了，也不至于出错了。因为你不需要在每个关键帧都编写所有的变换，也不需再担心变换顺序影响最终的变换结果。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes animation {\n \xa0 \xa0/* 元素平移的效果 */\n \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0translate: 0%;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0translate: 100%\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0/* 元素旋转的效果 */\n \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0rotate: 0deg;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa010%, 90% {\n \xa0 \xa0 \xa0 \xa0rotate: 180deg;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0rotate: 360deg;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0/* 元素缩放的效果*/\n \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0scale: 1;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa05%, 95% {\n \xa0 \xa0 \xa0 \xa0scale: 1.2;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0scale: 1;\n \xa0  }\n}\n​\n.animation {\n \xa0 \xa0animation: animation 2s linear both;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/zYyvzKQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYyvzKQ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["为了使代码模块化，我们可以将每个子动画（比如 ",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"})," ）分成独立的 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 。换句话说，将 ",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"})," 放到单独的 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中，然后再使用 ",(0,s.jsx)(n.code,{children:"animation"})," 引用它们。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes translate {\n \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0translate: 0%;\n \xa0  }\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0translate: 100%;\n \xa0  }\n}\n​\n@keyframes rotate {\n \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0rotate: 0deg;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa010%, 90% {\n \xa0 \xa0 \xa0 \xa0rotate: 180deg;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0rotate: 360deg;\n \xa0  }\n}\n​\n@keyframes scale {\n \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0scale: 1;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa05%, 95% {\n \xa0 \xa0 \xa0 \xa0scale: 1.2;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0scale: 1;\n \xa0  }\n}\n​\n.animation {\n \xa0 \xa0animation: \n \xa0 \xa0 \xa0 \xa0translate 2s linear both,\n \xa0 \xa0 \xa0 \xa0rotate 2s linear both,\n \xa0 \xa0 \xa0 \xa0scale 2s linear both;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/zYyvMMY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYyvMMY"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"由于这种分离，你可以根据需要应用每一组单独的关键帧，因为单个变换属性不会相互覆盖。在此基础上，你可以为每个变换提供不同的时间，而无需重写全部内容。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".animation {\n \xa0 \xa0animation: \n \xa0 \xa0 \xa0translate 2s linear both,\n \xa0 \xa0 \xa0rotate 3s \xa0cubic-bezier(0.54, -0.39, 0.49, 1.58) both,\n \xa0 \xa0 \xa0scale 1s cubic-bezier(0, 0, 1, -0.27) both;\n \xa0 \xa0animation-composition:accumulate;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/ExGVOrj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ExGVOrj"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，在这个示例中，我们还使用了动画合成（",(0,s.jsx)(n.code,{children:"animation-composition"}),"）的特性，小册后面有一个章节会详细阐述这方面的特性，敬请期待！"]}),"\n",(0,s.jsxs)(n.h2,{id:"单个变换属性的限制",children:["单个变换属性的限制",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单个变换属性的限制",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["单个变换属性 ",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"})," 不能像 ",(0,s.jsx)(n.code,{children:"transform"})," 属性那样接受组合值，所以单个变换属性在元素上只能使用一次。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".translate {\n \xa0 \xa0translate: 30px;\n \xa0 \xa0translate: 40px;\n \xa0 \xa0translate: 50px;\n}\n​\n.transform {\n \xa0 \xa0transform: \n \xa0 \xa0 \xa0 \xa0translate(30px)\n \xa0 \xa0 \xa0 \xa0translate(40px)\n \xa0 \xa0 \xa0 \xa0translate(50px);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/qBLOQza",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBLOQza"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["正如你所看到的，相同的单个变换属性同时出现在一个元素上时，会根据 CSS 的级联规则，出现在后面的属性会覆盖前面的。但 ",(0,s.jsx)(n.code,{children:"transform"})," 属性中不会存在该现象，因为 ",(0,s.jsx)(n.code,{children:"transform"})," 属性允许出现多个变换函数的组合值，相同的变换函数也是一样，当相同的变换函数出现在 ",(0,s.jsx)(n.code,{children:"transform"})," 属性上时，它们会做加法计算。也就是说，当你想要给元素添加多个变换属性时，你需要使用 ",(0,s.jsx)(n.code,{children:"transform"})," 属性。例如，你需要实现下面这样的一个变换效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/LYMVXYV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYMVXYV"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["如果使用单个变换属性是无法实现上图所示的变换效果，因为最后一个 ",(0,s.jsx)(n.code,{children:"translate"})," 会覆盖第一个 ",(0,s.jsx)(n.code,{children:"translate"})," 属性，代码如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0translate: 66vmin;\n \xa0 \xa0rotate: .125turn;\n \xa0 \xa0scale: .5;\n \xa0 \xa0translate: 66vmin; \n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在此情况之下，你只能使用 ",(0,s.jsx)(n.code,{children:"transform"})," 属性来实现："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0transform: translateX(66vmin) rotate(.125turn) scale(.5) translateX(66vmin);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["有一个细节我们需要注意，",(0,s.jsx)(n.code,{children:"0"})," 值在单个变换属性中的使用。稍微熟悉 CSS 的 Web 开发者都知道，当属性的值为 ",(0,s.jsx)(n.code,{children:"0"})," 时，可以不显式设置单位值，比如 ",(0,s.jsx)(n.code,{children:"0px"})," 和 ",(0,s.jsx)(n.code,{children:"0rem"})," 是等同的。同样的，在 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的变换函数 ",(0,s.jsx)(n.code,{children:"translate()"})," 和 ",(0,s.jsx)(n.code,{children:"roate()"})," 等函数中设置 ",(0,s.jsx)(n.code,{children:"0"})," 值时，也可以不显式设置单位，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0transform: rotate(0) scale(1.1) translate(0);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["但在单个变换属性 ",(0,s.jsx)(n.code,{children:"rotate"})," 属性上使用 ",(0,s.jsx)(n.code,{children:"0"})," 值时，必须带上单位 ",(0,s.jsx)(n.code,{children:"deg"})," 、",(0,s.jsx)(n.code,{children:"turn"})," 、",(0,s.jsx)(n.code,{children:"grad"})," 或 ",(0,s.jsx)(n.code,{children:"rad"})," ，否则该规则会被视为无效规则："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"/* ❌ 无效规则 */\n.element {\n \xa0 \xa0rotate: 0; /* 未显式设置单位会被视为无效规则 */\n}\n​\n/* ✅  有效规则 */\n.element {\n \xa0 \xa0rotate: 0deg; /* 显式指定了单位 */\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["注意，",(0,s.jsx)(n.code,{children:"translate"})," 属性设置 ",(0,s.jsx)(n.code,{children:"0"})," 值时不会有此现象，但我个人习惯性会在 ",(0,s.jsx)(n.code,{children:"translate"})," 属性设置 ",(0,s.jsx)(n.code,{children:"0"})," 值时也显式指定一个单位，比如 ",(0,s.jsx)(n.code,{children:"%"})," ："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0translate: 0%;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["到目前为止，CSS 只引入了 ",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"})," 三个单个变换属性，但其余的变换函数（例如 ",(0,s.jsx)(n.code,{children:"skew()"})," 和 ",(0,s.jsx)(n.code,{children:"matrix()"})," 等）并没有对应的单个变换属性。因此，单个变换属性和 ",(0,s.jsx)(n.code,{children:"transform"})," 属性可以一起工作。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0rotate: 45deg;\n \xa0 \xa0transform: rotate(45deg);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["你会发现，上面的代码做了两次旋转，最终元素旋转 ",(0,s.jsx)(n.code,{children:"90deg"})," ，等同于："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n \xa0 \xa0rotate: 90deg;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/oNJjJZe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNJjJZe"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正如你所看到的，它们是一个叠加的过程，而不是一个覆盖的过程。因此，下面代码最终获得的效果是一样的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".transform {\n \xa0 \xa0transform: rotate(30deg) translate(10px,10px);\n}\n​\n.individual--transform {\n \xa0 \xa0rotate: 30deg;\n \xa0 \xa0translate: 10px 10px;\n}\n​\n.individual-and-transform {\n \xa0 \xa0rotate: 30deg;\n \xa0 \xa0transfrom: translate(10px, 10px);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["也就是说，当单个变换属性 ",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 、",(0,s.jsx)(n.code,{children:"scale"})," 和 CSS 的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性同时使用时，它们会涉及到一个计算过程：“",(0,s.jsxs)(n.strong,{children:["单个变换属性首先会被应用（",(0,s.jsx)(n.code,{children:"translate"}),"，",(0,s.jsx)(n.code,{children:"rotate"}),"，然后 ",(0,s.jsx)(n.code,{children:"scale"}),"），最后应用"]})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"transform"})}),"”。"]}),"\n",(0,s.jsxs)(n.p,{children:["其实，在 CSS 中，除了使用 CSS 的 ",(0,s.jsx)(n.code,{children:"transform"})," 以及单个变换属性可以随心所欲地对元素进行平移、旋转和缩放之外，CSS 的 ",(0,s.jsx)(n.code,{children:"offset"})," 属性也可以有效地平移和旋转元素，只不过它们的工作方式有所不同。尽管 ",(0,s.jsx)(n.code,{children:"offset"})," 以不同的方式工作，但它以类似 ",(0,s.jsx)(n.code,{children:"transform"})," 方式有效地在从标系统上应用变换。因此，它们也依赖于其他四个变换属性（",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 、",(0,s.jsx)(n.code,{children:"scale"})," 和 ",(0,s.jsx)(n.code,{children:"transform"}),"）所使用的相同变换源点，即 ",(0,s.jsx)(n.code,{children:"transform-origin"})," 。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注意，",(0,s.jsx)(n.code,{children:"offset"})," 是一个简写属性，设置了沿定义的路径为元素设置动画所需的所有属性。将会在路径动画一节课中详细介绍！"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["如此一来，单个变换属性、",(0,s.jsx)(n.code,{children:"transform"})," 和 ",(0,s.jsx)(n.code,{children:"offset"})," 一起对一个元素进行平移、旋转、缩放等操作时，三个新的独立变换属性（",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"})," ）发生在 ",(0,s.jsx)(n.code,{children:"offset"})," 属性之前，",(0,s.jsx)(n.code,{children:"transform"})," 属性则会应用在 ",(0,s.jsx)(n.code,{children:"offset"})," 属性之后："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["①: ",(0,s.jsx)(n.code,{children:"translate"})]}),"\n",(0,s.jsxs)(n.li,{children:["②：",(0,s.jsx)(n.code,{children:"rotate"})]}),"\n",(0,s.jsxs)(n.li,{children:["③：",(0,s.jsx)(n.code,{children:"scale"})]}),"\n",(0,s.jsxs)(n.li,{children:["④：",(0,s.jsx)(n.code,{children:"offset"})," （距离 、锚定和旋转）"]}),"\n",(0,s.jsxs)(n.li,{children:["⑤：",(0,s.jsx)(n.code,{children:"transform"})," （按指定顺序应用函数）"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["即：“",(0,s.jsx)(n.code,{children:"translate"})," ➟ ",(0,s.jsx)(n.code,{children:"rotate"})," ➟ ",(0,s.jsx)(n.code,{children:"scale"})," ➟ ",(0,s.jsx)(n.code,{children:"offset"})," ➟ ",(0,s.jsx)(n.code,{children:"transform"}),"”。",(0,s.jsx)(n.a,{href:"https://www.w3.org/TR/css-transforms-2/#ctm",target:"_blank",rel:"noopener noreferrer",children:"在定义如何计算变换矩阵的规范中对这方面有详细的阐述"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们来看两个这方面的示例。假设，你有一个路径动画，它分别与 ",(0,s.jsx)(n.code,{children:"transform:translate(25px, -35px)"})," 和 ",(0,s.jsx)(n.code,{children:"translate: 25px -35px"})," 结合使用，将会产生不同的视觉效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes distance {\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0offset-distance: 100%;\n \xa0  }\n}\n​\n.pathed {\n \xa0 \xa0offset-path: path('M0,0 C40,240 200,240 240,0');\n \xa0 \xa0animation: distance 4000ms infinite alternate ease-in-out;\n}\n​\n.transformed {\n \xa0 \xa0transform: translate(25px, -35px);\n}\n​\n.translated {\n \xa0 \xa0translate: 25px -35px;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/poqgzdP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poqgzdP"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"单个变换属性的-transform-origin",children:["单个变换属性的 transform-origin",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单个变换属性的-transform-origin",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在变换元素时，通常还会使用 CSS 的 ",(0,s.jsx)(n.code,{children:"transform-origin"})," 。该属性可以用来指定变换原点位置，默认是元素的中心位置。例如围绕着元素中心点旋转 ",(0,s.jsx)(n.code,{children:"45deg"})," ，我们可以不显式设置 ",(0,s.jsx)(n.code,{children:"transform-origin"})," 的值："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".rotate {\n \xa0 \xa0rotate: 45deg;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果你并不希望元素围绕着中心点旋转，而是希望它围绕着元素左上角旋转，那么就可以通过改变 ",(0,s.jsx)(n.code,{children:"transform-origin"})," 属性的值："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".rotate {\n \xa0 \xa0rotate: 45deg;\n \xa0 \xa0transform-origin: left top; /* left top = 0 0 */\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"transform-origin"})," 属性的使用类似于 ",(0,s.jsx)(n.code,{children:"background-origin"})," ，也和 ",(0,s.jsx)(n.code,{children:"background-position"})," 属性相似，它可以设置关键词（比如 ",(0,s.jsx)(n.code,{children:"left"})," 、",(0,s.jsx)(n.code,{children:"top"})," 、",(0,s.jsx)(n.code,{children:"right"})," 、",(0,s.jsx)(n.code,{children:"bottom"})," 、",(0,s.jsx)(n.code,{children:"center"})," 等），也可以是长度值（比如 ",(0,s.jsx)(n.code,{children:"100px"}),"、",(0,s.jsx)(n.code,{children:"10vmin"})," 等），还可以百分比值，比如 ",(0,s.jsx)(n.code,{children:"10%"})," 。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"transform-origin"}),"属性可以使用一个，两个或三个值来指定，其中每个值都表示一个偏移量。如果定义了两个或更多值并且没有值的关键字，或者唯一使用的关键字是 ",(0,s.jsx)(n.code,{children:"center"}),"，则第一个值表示水平偏移量，第二个值表示垂直偏移量："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["一个值：必须是 ",(0,s.jsx)(n.code,{children:"<length>"}),"，",(0,s.jsx)(n.code,{children:"<percentage>"}),"，或 ",(0,s.jsx)(n.code,{children:"left"})," 、 ",(0,s.jsx)(n.code,{children:"center"}),"、",(0,s.jsx)(n.code,{children:"right"}),"、 ",(0,s.jsx)(n.code,{children:"top"})," 、",(0,s.jsx)(n.code,{children:"bottom"}),"关键字中的一个。"]}),"\n",(0,s.jsxs)(n.li,{children:["两个值：其中一个必须是 ",(0,s.jsx)(n.code,{children:"<length>"}),"，",(0,s.jsx)(n.code,{children:"<percentage>"}),"，或 ",(0,s.jsx)(n.code,{children:"left"}),"、",(0,s.jsx)(n.code,{children:"center"}),"、 ",(0,s.jsx)(n.code,{children:"right"})," 关键字中的一个；另一个必须是 ",(0,s.jsx)(n.code,{children:"<length>"}),"，",(0,s.jsx)(n.code,{children:"<percentage>"}),"，或 ",(0,s.jsx)(n.code,{children:"top"}),"、",(0,s.jsx)(n.code,{children:"center"}),"、 ",(0,s.jsx)(n.code,{children:"bottom"})," 关键字中的一个。"]}),"\n",(0,s.jsxs)(n.li,{children:["三个值：前两个值和只有两个值时的用法相同；第三个值必须是 ",(0,s.jsx)(n.code,{children:"<length>"}),"。它始终代表 ",(0,s.jsx)(n.code,{children:"z"})," 轴偏移量。"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"/* 一个值 */\ntransform-origin: 2px;\ntransform-origin: bottom;\n​\n/* 两个值 */\n/* x-offset | y-offset */\ntransform-origin: 3cm 2px;\n​\n/* x-offset-keyword | y-offset */\ntransform-origin: left 2px;\n​\n/* x-offset-keyword | y-offset-keyword */\ntransform-origin: right top;\n​\n/* y-offset-keyword | x-offset-keyword */\ntransform-origin: top right;\n​\n/* 三个值 */\n/* x-offset | y-offset | z-offset */\ntransform-origin: 2px 30% 10px;\n​\n/* x-offset-keyword | y-offset | z-offset */\ntransform-origin: left 5px -3px;\n​\n/* x-offset-keyword | y-offset-keyword | z-offset */\ntransform-origin: right bottom 2cm;\n​\n/* y-offset-keyword | x-offset-keyword | z-offset */\ntransform-origin: bottom right 2cm;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["你可以尝试改变示例中的选项值，查看 ",(0,s.jsx)(n.code,{children:"transform-origin"})," 给旋转元素带来的变化："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/PoXZYeq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PoXZYeq"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["也可以在下面示例中的虚线矩形框中任意位置按下鼠标左键，查看 ",(0,s.jsx)(n.code,{children:"transform-origin"})," 的变化，以及其对旋转元素的影响："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/YzdwKJm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzdwKJm"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"transform-origin"})," 属性同样可以作用于单个变换属性，并且总是以相同的顺序应用（即 ",(0,s.jsx)(n.code,{children:"translate"})," ➟ ",(0,s.jsx)(n.code,{children:"rotate"})," ➟ ",(0,s.jsx)(n.code,{children:"scale"})," ），并且它们发生在 ",(0,s.jsx)(n.code,{children:"transform"})," 属性中的所有内容之前："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/LYMGPMv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYMGPMv"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["同样的，",(0,s.jsx)(n.code,{children:"transform-origin"})," 属性对 ",(0,s.jsx)(n.code,{children:"offset-rotate"})," 也是有相应影响的，比如下面这个路径动画，",(0,s.jsx)(n.code,{children:"transform-origin"})," 为 ",(0,s.jsx)(n.code,{children:"50% 50%"})," 和 ",(0,s.jsx)(n.code,{children:"0% 0%"})," 的视觉效果是有一定差异的："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/zYyrOeJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYyrOeJ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"使用-css-自定义属性来模拟单个变换属性",children:["使用 CSS 自定义属性来模拟单个变换属性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-css-自定义属性来模拟单个变换属性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["虽然 CSS 引入了 ",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"})," 三个单个变换属性，但并没有相应的 ",(0,s.jsx)(n.code,{children:"skew"})," 属性。可我们在实际生产过程中，会需要更多的单个变换属性功能。庆幸的是，在 CSS 中有种方法可以从 ",(0,s.jsx)(n.code,{children:"transform"})," 属性中分离出单个变换函数。拿旋转为例吧，Web 开发人员希望能够在不影响先前设置的变换情况之下重新设置新的旋转。就目前为止，除了使用新的单个变换属性之外，还有另外一种方法，即 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7249357815410589733",target:"_blank",rel:"noopener noreferrer",children:"CSS 原生自定义属性"})})," ",(0,s.jsx)(n.strong,{children:"或"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668493158023205",target:"_blank",rel:"noopener noreferrer",children:"CSS Houdini 自定义属性"})})," 。接下来，我们来看看自定义属性和实际单个变换属性之间有何差异。"]}),"\n",(0,s.jsxs)(n.h3,{id:"实际单个变换属性",children:["实际单个变换属性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实际单个变换属性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先来看真正的单个变换属性，即 ",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"})," ，它们可以单独处理，因此也可以分别进行动画和变换。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".individual--transform {\n    translate: 40px 66vmin;\n    rotate: 45deg;\n    scale: 1.5;\n}\n\n.one--transform {\n    transform: translate(40px, 66vmin) rotate(45deg) scale(1.5);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["就上面代码而言，这两个规则集的效果是等同的。现在，无论何时我们想要修改变换，比如悬浮状态下调整 ",(0,s.jsx)(n.code,{children:"scale"})," 的值，我们只需要更改所需的变换属性即可："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".individual--transform {\n    translate: 40px 66vmin;\n    rotate: 45deg;\n    scale: 1.5;\n}\n\n.individual--transform:hover {\n    scale: .9;\n}\n\n.one--transform {\n    transform: translate(40px, 66vmin) rotate(45deg) scale(1.5);\n}\n\n.one--transform:hover {\n    transform: translate(40px, 66vmin) rotate(45deg) scale(.9);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"它的优点是："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"语法简单"}),"\n",(0,s.jsx)(n.li,{children:"可以独立改变变换"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"缺点是："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["没有独立的扭曲变换 ",(0,s.jsx)(n.code,{children:"skew"})," 和矩阵变换 ",(0,s.jsx)(n.code,{children:"matrix"})]}),"\n",(0,s.jsxs)(n.li,{children:["每个独立的变换属性只能使用一次，如果需要多次使用同一个变换，则必须使用 ",(0,s.jsx)(n.code,{children:"transform"})," 属性"]}),"\n",(0,s.jsxs)(n.li,{children:["总是按以下顺序应用变换： ",(0,s.jsx)(n.code,{children:"translate"})," ➟ ",(0,s.jsx)(n.code,{children:"rotate"})," ➟ ",(0,s.jsx)(n.code,{children:"scale"})," ，如果你需要一个不同的变换顺序，也必须使用 ",(0,s.jsx)(n.code,{children:"transform"})," 属性"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"css-自定义属性",children:["CSS 自定义属性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-自定义属性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们在介绍 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7249357815410589733",target:"_blank",rel:"noopener noreferrer",children:"CSS 原生自定义属性"}),"的时候，曾介绍过 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7252964839705247755",target:"_blank",rel:"noopener noreferrer",children:"CSS 自定义属性的一个特性"}),"，它可以用来分解简写属性。拿 ",(0,s.jsx)(n.code,{children:"box-shadow"})," 属性为例，它并没有相应的子属性，比如 ",(0,s.jsx)(n.code,{children:"box-shadow-color"})," 来改变阴影颜色。不过，我们可以使用 CSS 自定义属性来模拟："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".box-shadow {\n \xa0 \xa0--shadow-x: .2em;\n \xa0 \xa0--shadow-y: .2em;\n \xa0 \xa0--shadow-blue: .2em;\n \xa0 \xa0--shadow-spread: .2em;\n \xa0 \xa0--shadow-color: rgb(0 0 0);\n \xa0 \xa0\n \xa0 \xa0box-shadow: var(--shadow-x) var(--shadow-y) var(--shadow-spread) var(--shadow-color);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"此时，你希望在悬浮状态下改变阴影颜色时，只需要这样做即可："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".box-shadow {\n \xa0 \xa0--shadow-x: .2em;\n \xa0 \xa0--shadow-y: .2em;\n \xa0 \xa0--shadow-blue: .2em;\n \xa0 \xa0--shadow-spread: .2em;\n \xa0 \xa0--shadow-color: rgb(0 0 0);\n \xa0 \xa0\n \xa0 \xa0box-shadow: var(--shadow-x) var(--shadow-y) var(--shadow-spread) var(--shadow-color);\n \xa0 \xa0\n \xa0  &:hover {\n \xa0 \xa0 \xa0 \xa0--shadow-color: rgb(120 0 0 / .5);\n \xa0  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这个思路同样可以运用于 ",(0,s.jsx)(n.code,{children:"transform"})," 属性上，这样一来，我们就可以指定变换的顺序，也可以做任意多的变换。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".using-custom-properties {\n \xa0 \xa0--translate-x: 40px;\n \xa0 \xa0--translate-y: 10vmin;\n \xa0 \xa0--rotate: 45deg;\n \xa0 \xa0--scale: .9;\n​\n \xa0 \xa0transform:\n \xa0 \xa0 \xa0 \xa0translateX(var(--translate-x, 0))\n \xa0 \xa0 \xa0 \xa0translateY(var(--translate-y, 0))\n \xa0 \xa0 \xa0 \xa0rotate(var(--rotate, 0deg))\n \xa0 \xa0 \xa0 \xa0scale(var(--scale, 1))\n \xa0 \xa0 \xa0 \xa0translateX(var(--end-translate-x, 0));\n}\n​\n.using-custom-properties:hover {\n \xa0 \xa0--end-translate-x: 5px;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们甚至可以在 ",(0,s.jsx)(n.code,{children:"transition"})," 上使用单个变换，这样就可以使 ",(0,s.jsx)(n.code,{children:"transform"})," 有一个特别的过渡（",(0,s.jsx)(n.code,{children:"transition"}),"）效果，例如给缩放、旋转设置不是的持续时间（",(0,s.jsx)(n.code,{children:"transition-duration"}),"）、过渡函数（",(0,s.jsx)(n.code,{children:"transition-timing-function"}),"）和延迟时间（",(0,s.jsx)(n.code,{children:"transition-delay"}),"）。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:" .using-custom-properties {\n    --translate-x: 40px;\n    --translate-y: 10vmin;\n    --rotate: 45deg;\n    --scale: .9;\n\n    transform:\n        translateX(var(--translate-x, 0))\n        translateY(var(--translate-y, 0))\n        rotate(var(--rotate, 0deg))\n        scale(var(--scale, 1))\n        translateX(var(--end-translate-x, 0));\n    transition:\n        var(--rotate) 2s cubic-bezier(0.9, -0.48, 1, 1),\n        var(--scale) 1s linear 1s;\n}\n\n.using-custom-properties:hover {\n    --end-translate-x: 5px;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"我们来看一个真实的示例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"/* 不符合预期的效果，后面的 transfrom 会覆盖前面的 transform */\n@layer transform.actual {\n    .actual {\n        transform: translateY(-150%);\n    \n        &:hover {\n            transform: scale(0.8);\n        }\n    \n        &:active {\n            transform: rotate(-5deg);\n        }\n    }\n}\n\n/* 以下是符合预期的效果 */\n\n/* 方案一： 使用 transform, 不同状态需要复制变换函数 */\n@layer transform.transform {\n    .transform {\n        transform: translateY(-150%);\n    \n        &:hover {\n            transform: translateY(-150%) scale(0.8);\n        }\n    \n        &:active {\n            transform: translateY(-150%) scale(1) rotate(-5deg);\n        }\n    }\n}\n\n/* 方案二：单个变换属性 translate、rotate 和 scale */\n@layer transform.individual-transform {\n    .individual--transform {\n        translate: 0 -150%;\n    \n        transition: \n            translate 125ms ease-out, \n            scale 125ms ease-out,\n            rotate 125ms ease-out;\n    \n        &:hover {\n            scale: 0.8 0.8;\n        }\n    \n        &:active {\n            rotate: -5deg;\n        }\n    }\n}\n\n/* 方案三：CSS 自定义属性模拟单个变换属性 */\n@layer transform.custom-property {\n    .custom-property {\n        --y: -150%;\n        --scale: 1;\n        --rotation: 0deg;\n    \n        transform: translateY(var(--y)) scale(var(--scale)) rotate(var(--rotation));\n        \n        &:hover {\n            --scale: 0.8;\n        }\n        \n        &:active {\n            --rotation: -5deg;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/JjwGjjV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjwGjjV"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这个方案的优点是："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"允许任意数量的变换"}),"\n",(0,s.jsx)(n.li,{children:"没有顺序的限制，你想用什么顺序都行"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"其缺点是："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"需要预先考虑所有潜在的变换"}),"\n",(0,s.jsxs)(n.li,{children:["在 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 和 WAAPI 中无法正常工作"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["CSS 自定义属性在 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中无法正常工作这一点在小册的《",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7258870477462962236",target:"_blank",rel:"noopener noreferrer",children:"36 | CSS 自定义属性：@property"}),"》一节课中做过详细阐述。来看一个简单示例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".animation {\n \xa0 \xa0--translateY: 0px;\n \xa0 \xa0--scale: 1;\n \xa0 \xa0--rotate: 0deg;\n \xa0 \xa0transform: translateY(var(--translateY)) scale(var(--scale)) rotate(var(--rotate));\n \xa0 \xa0animation: move-it 1000ms linear both\n}\n​\n@keyframes move-it {\n \xa0 \xa025% {\n \xa0 \xa0 \xa0 \xa0--translateY: 20vmin;\n \xa0  }\n \xa0 \xa0\n \xa0 \xa050% {\n \xa0 \xa0 \xa0 \xa0--scale: 1;\n \xa0  }\n \xa0\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0--scale: .8;\n \xa0 \xa0 \xa0 \xa0--rotate: 90deg;\n \xa0  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"整个动画效果是非常生硬的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/yLGeyam",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLGeyam"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以使用 ",(0,s.jsx)(n.code,{children:"@property"})," 或 ",(0,s.jsx)(n.code,{children:"CSS.registerProperty()"})," 来定义自定义属性，并且指定其值类型，自定义属性在 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中得到较好的工作，也可以很容易地修复上面示例所碰到的现象。比如下面这个示例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"CSS.registerProperty({\n \xa0 \xa0name: '--translate',\n \xa0 \xa0syntax: '<length>',\n \xa0 \xa0inherits: false,\n \xa0 \xa0initialValue: '0px'\n});\n​\nCSS.registerProperty({\n \xa0 \xa0name: '--rotate',\n \xa0 \xa0syntax: '<angle>',\n \xa0 \xa0inherits: false,\n \xa0 \xa0initialValue: '0deg'\n});\n​\nCSS.registerProperty({\n \xa0 \xa0name: '--scale',\n \xa0 \xa0syntax: '<number>',\n \xa0 \xa0inherits: false,\n \xa0 \xa0initialValue: '1'\n});\n@layer animation {\n \xa0 \xa0@keyframes move {\n \xa0 \xa0 \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0--translate: 75vmin;\n \xa0 \xa0 \xa0  }\n \xa0  }\n \xa0 \xa0\n \xa0 \xa0@keyframes other {\n \xa0 \xa0 \xa0 \xa050% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0--scale: 0.8;\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa075% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0--rotate: 180deg;\n \xa0 \xa0 \xa0  }\n \xa0 \xa0 \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0--rotate: 120deg;\n \xa0 \xa0 \xa0  }\n \xa0  }\n \xa0 \xa0\n \xa0  .animation {\n \xa0 \xa0 \xa0 \xa0--scale: 1;\n \xa0 \xa0 \xa0 \xa0--translate: 0vmin;\n \xa0 \xa0 \xa0 \xa0--rotate: 0deg;\n \xa0 \xa0 \xa0 \xa0\n \xa0 \xa0 \xa0 \xa0transform: \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0scale(var(--scale)) \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0translateX(var(--translate))\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0translateY(calc(var(--translate) / 2)) \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0rotate(var(--rotate));\n \xa0 \xa0 \xa0 \xa0animation: \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0move 2000ms infinite alternate ease-in-out,\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0other 1400ms infinite alternate ease-in-out;\n \xa0 \xa0 \xa0 \xa0animation-composition: accumulate;\n \xa0  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/PoXZwpB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PoXZwpB"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"使用-css-变换的三种方式",children:["使用 CSS 变换的三种方式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-css-变换的三种方式",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"如此一来，你在 CSS 中可以下面这样使用 CSS 的变换。"}),"\n",(0,s.jsxs)(n.p,{children:["第一种，CSS 的 ",(0,s.jsx)(n.code,{children:"transform"})," ："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".box {\n    animation: chained 2s both;\n    transform-origin: 100% 100%;\n}\n\n\n@keyframes chained {\n    0% {\n        transform: translate(-200%, 0) rotate(0deg);\n    }\n    40% {\n        transform: translate(0, 0) rotate(0deg);\n    }\n    60% {\n        transform: translate(0, 0) rotate(90deg);\n    }\n    100% {\n        transform: translate(200%, 0) rotate(90deg);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/rNoxaKM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNoxaKM"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"第二种，CSS 自定义属性，如果在动画中使用变换，最好是 CSS Houdini 注册的自定义属性。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@property --x {\n \xa0 \xa0syntax: '<length-percentage>';\n \xa0 \xa0initial-value: -200%;\n \xa0 \xa0inherits: false;\n}\n​\n@property --y {\n \xa0 \xa0syntax: '<length-percentage>';\n \xa0 \xa0initial-value: 0;\n \xa0 \xa0inherits: false;\n}\n​\n@property --r {\n \xa0 \xa0syntax: '<angle>';\n \xa0 \xa0initial-value: 0deg;\n \xa0 \xa0inherits: false;\n}\n​\n.box {\n \xa0 \xa0animation: chained 2s both;\n \xa0 \xa0transform: translateX(var(--x)) rotate(var(--r)) translateY(var(--y));\n \xa0 \xa0transform-origin: 100% 100%;\n}\n​\n​\n@keyframes chained {\n \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0--x: -200%;\n \xa0 \xa0 \xa0 \xa0--y: 0;\n \xa0 \xa0 \xa0 \xa0--r: 0deg;\n \xa0  }\n \xa0 \xa040% {\n \xa0 \xa0 \xa0 \xa0--x: 0;\n \xa0 \xa0 \xa0 \xa0--y: 0;\n \xa0 \xa0 \xa0 \xa0--r: 0deg;\n \xa0  }\n \xa0 \xa060% {\n \xa0 \xa0 \xa0 \xa0--x: 0;\n \xa0 \xa0 \xa0 \xa0--y: 0;\n \xa0 \xa0 \xa0 \xa0--r: 90deg;\n \xa0  }\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0--x: 0;\n \xa0 \xa0 \xa0 \xa0--y: -200%;\n \xa0 \xa0 \xa0 \xa0--r: 90deg;\n \xa0  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/MWZKYqK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWZKYqK"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["第三种就是 CSS 单个变换属性，即 ",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"})," ："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".box {\n \xa0 \xa0animation: composed 2s both;\n \xa0 \xa0transform-origin: 100% 100%;\n}\n​\n@keyframes composed {\n \xa0 \xa00% {\n \xa0 \xa0 \xa0 \xa0rotate: 0deg;\n \xa0 \xa0 \xa0 \xa0translate: -200% 0;\n \xa0  }\n \xa0 \xa040% {\n \xa0 \xa0 \xa0 \xa0rotate: 0deg;\n \xa0 \xa0 \xa0 \xa0translate: 0 0;\n \xa0  }\n \xa0 \xa060% {\n \xa0 \xa0 \xa0 \xa0translate: 0 0;\n \xa0 \xa0 \xa0 \xa0rotate: 90deg;\n \xa0  }\n \xa0 \xa0100% {\n \xa0 \xa0 \xa0 \xa0translate: 200% 0;\n \xa0 \xa0 \xa0 \xa0rotate: 90deg;\n \xa0  }\n  }\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"img"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/XWoXJxp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWoXJxp"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"你会发现，这三种不同方式制作出来的效果都是一样的。前面我们也花了很多篇幅介绍了他们之间的差异，最终在实际生产中如何使用，还是应该具体问题具体分析，找到最适合的方式。"}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["变换（",(0,s.jsx)(n.code,{children:"transform"}),"）一直以来都是 CSS 的一个基本特性，而且常与 CSS 的 ",(0,s.jsx)(n.code,{children:"animation"})," 一起用来构建 Web 的动效。随着单个变换属性的引入（",(0,s.jsx)(n.code,{children:"translate"})," 、",(0,s.jsx)(n.code,{children:"rotate"})," 和 ",(0,s.jsx)(n.code,{children:"scale"}),"），动画和变换的界限可能会进一步扩大。"]}),"\n",(0,s.jsx)(n.p,{children:"正如课程中所描述的那样，单个变换属性给 Web 开发者带来两个关键好处："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"使用变换和制作动画更简单"}),"\n",(0,s.jsx)(n.li,{children:"代码变得更清晰，更易于维护"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"由于这两个原因，单个变换属性将会是 Web 开发者喜欢的属性之一。"}),"\n",(0,s.jsxs)(n.p,{children:["虽然 CSS 单个变换属性给 Web 开发者带来较大的便利，但并不能说明它们就可以用来替代 ",(0,s.jsx)(n.code,{children:"transform"})," ，毕竟单个变换属性无法完全替代 ",(0,s.jsx)(n.code,{children:"transform"})," 所有的功能，而且它自身也有一定的限制，比如无法多次使用，顺序不能更改等。因此，在未来，你可能会在代码中看到它们一起共舞！"]})]})}function K(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(B,{...e})}):B(e)}let T=K;K.__RSPRESS_PAGE_META={},K.__RSPRESS_PAGE_META["%E7%8E%B0%E4%BB%A3CSS%2F%E7%AC%AC37%E7%AB%A0%E2%80%94CSS%E5%8F%98%E6%8D%A2%E4%B9%8B%E5%8D%95%E4%B8%AA%E5%8F%98%E6%8D%A2.md"]={toc:[{text:"回顾 CSS 的变换属性 transform",id:"回顾-css-的变换属性-transform",depth:2},{text:"transform 属性的局限性",id:"transform-属性的局限性",depth:2},{text:"单个变换属性的简介",id:"单个变换属性的简介",depth:2},{text:"单个变换属性的使用",id:"单个变换属性的使用",depth:2},{text:"缩放：scale",id:"缩放scale",depth:3},{text:"平移：translate",id:"平移translate",depth:3},{text:"旋转：rotate",id:"旋转rotate",depth:3},{text:"单个变换属性的优势",id:"单个变换属性的优势",depth:2},{text:"单个变换属性的限制",id:"单个变换属性的限制",depth:2},{text:"单个变换属性的 transform-origin",id:"单个变换属性的-transform-origin",depth:2},{text:"使用 CSS 自定义属性来模拟单个变换属性",id:"使用-css-自定义属性来模拟单个变换属性",depth:2},{text:"实际单个变换属性",id:"实际单个变换属性",depth:3},{text:"CSS 自定义属性",id:"css-自定义属性",depth:3},{text:"使用 CSS 变换的三种方式",id:"使用-css-变换的三种方式",depth:2},{text:"小结",id:"小结",depth:2}],title:"第37章—CSS变换之单个变换",headingTitle:"第37章—CSS变换之单个变换",frontmatter:{}}}}]);