"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["47610"],{623915:function(e,n,s){s.r(n),s.d(n,{default:()=>b});var c=s(552676),a=s(740453);let r=s.p+"static/image/7a9a059fae4683713698bd6732c084df.d8c517c9.webp",l=s.p+"static/image/596f4f53adebe16a25e3f9820d5377c6.c6987b4b.webp",d=s.p+"static/image/a09c56db3cb83df698098b77b98588bc.ba041437.webp",i=s.p+"static/image/5fc04ba9df0ddc2333e5aab92b0e23bc.d95cb213.webp",t=s.p+"static/image/ad2dee14cb14b5a766f2554b08c5c057.9a4a0935.webp",o=s.p+"static/image/1a0080c2b386de9812ca95181be1beb4.c56b6279.webp",h=s.p+"static/image/b58d49f8f7b6afa5731a0d1f0c68eac5.dbf19d07.webp",p=s.p+"static/image/70896aa4eff329ea9cdc0194aa2e1f75.94c2bb15.webp",x=s.p+"static/image/a21ba6a9683b21e86119baf053d6d139.b3af58ee.webp",j=s.p+"static/image/0f678d51b4dac5915e20210f97ed4b43.b2adf540.webp",m=s.p+"static/image/9b3682f78d1196693f3790a42b591701.e8a6be22.webp";function u(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",blockquote:"blockquote",h4:"h4",code:"code",img:"img",pre:"pre"},(0,a.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"15前端实战登录注册页面",children:["15.前端实战：登录注册页面",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#15前端实战登录注册页面",children:"#"})]}),"\n",(0,c.jsxs)(n.h2,{id:"前言",children:["前言",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"上一章节我们实现了底部导航栏，并且创建了三个主页面，这三个页面是需要展示底部导航栏，而我们本章节要制作的「登录注册页面」便是不需要底部导航栏的单独页面。"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["本教程已有线上地址",(0,c.jsx)(n.a,{href:"http://cost.chennick.wang",target:"_blank",rel:"noopener noreferrer",children:"在线地址"}),"，同学们可以在实战部分，对照着线上页面进行学习。"]}),"\n"]}),"\n",(0,c.jsxs)(n.h4,{id:"知识点",children:["知识点",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#知识点",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["组件：",(0,c.jsx)(n.code,{children:"Cell"}),"、",(0,c.jsx)(n.code,{children:"Input"}),"、",(0,c.jsx)(n.code,{children:"Button"}),"、",(0,c.jsx)(n.code,{children:"CheckBox"}),"。"]}),"\n",(0,c.jsxs)(n.h2,{id:"注册页面",children:["注册页面",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注册页面",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"我们的系统是面向多用户的，换句话说也就是一个纯正的 C 端项目，任何人都可以通过网站，注册一个新的账号。接下来开始注册页面的编写。"}),"\n",(0,c.jsxs)(n.p,{children:["首先新建 ",(0,c.jsx)(n.code,{children:"Login"})," 文件夹，在文件夹内添加两个文件 ",(0,c.jsx)(n.code,{children:"index.jsx"})," 和 ",(0,c.jsx)(n.code,{children:"style.module.less"}),"，我们先把注册页面的静态页面切出来，首先给 ",(0,c.jsx)(n.code,{children:"index.jsx"})," 添加如下代码："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"import React from 'react'\n\nimport s from './style.module.less'\n\nconst Login = () => {\n  return <div className={s.auth}>\n    注册\n  </div>\n}\n\nexport default Login\n"})}),"\n",(0,c.jsxs)(n.p,{children:["为它添加一个路由配置，打开 ",(0,c.jsx)(n.code,{children:"router/index.js"})," 添加如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"import Login from '@/container/Login'\n...\n{\n  path: \"/login\",\n  component: Login\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"重启项目，如下所示代表登录注册页面创建成功了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["接下来为 ",(0,c.jsx)(n.code,{children:"Login/index.jsx"})," 添加静态页面代码："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'import React from \'react\'\nimport { Cell, Input, Button, Checkbox } from \'zarm\'\nimport CustomIcon from \'@/components/CustomIcon\'\n\nimport s from \'./style.module.less\'\n\nconst Login = () => {\n  return <div className={s.auth}>\n    <div className={s.head} />\n    <div className={s.tab}>\n      <span>注册</span>\n    </div>\n    <div className={s.form}>\n      <Cell icon={<CustomIcon type="zhanghao" />}>\n        <Input\n          clearable\n          type="text"\n          placeholder="请输入账号"\n        />\n      </Cell>\n      <Cell icon={<CustomIcon type="mima" />}>\n        <Input\n          clearable\n          type="password"\n          placeholder="请输入密码"\n        />\n      </Cell>\n      <Cell icon={<CustomIcon type="mima" />}>\n          <Input\n            clearable\n            type="text"\n            placeholder="请输入验证码"\n          />\n        </Cell>\n    </div>\n    <div className={s.operation}>\n      <div className={s.agree}>\n        <Checkbox />\n        <label className="text-light">阅读并同意<a>《掘掘手札条款》</a></label>\n      </div>\n      <Button block theme="primary">注册</Button>\n    </div>\n  </div>\n}\n\nexport default Login\n'})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"文末已为同学们提供下本章节 demo 代码，样式部分不再详细说明。"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"上述代码中，关键部分是账号输入、密码输入、验证码输入，这三个输入框是需要获取数据作为接口的参数提交上去的。"}),"\n",(0,c.jsxs)(n.p,{children:["很多时候，服务端没有开发好接口的时候，我们前端要做的任务就是先还原 ",(0,c.jsx)(n.code,{children:"UI"})," 稿，把该切的页面都切出来，并且预留好需要给接口提交的数据交互，比如上述三个输入框。"]}),"\n",(0,c.jsxs)(n.p,{children:["样式编写部分，要注意的一点是 ",(0,c.jsx)(n.code,{children:":global"})," 这个关键词。由于我们采用的是 ",(0,c.jsx)(n.code,{children:"CSS Module"})," 的形式进行开发，也就是你在页面中声明的类名都会根据当前页面，打一个唯一的 ",(0,c.jsx)(n.code,{children:"hash"})," 值，比如我们页面中声明的 ",(0,c.jsx)(n.code,{children:"className={s.form}"}),"，最终在浏览器中显示的是这样的："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"_form_kpur3_30"})," 是已经被编译过的样式，这样做的目的是避免和别的页面的样式重名，这是目前样式管理的一个诟病，当多人参与项目开发的时候，很难做到不污染全局样式名称，除非很小心的命名样式名称。"]}),"\n",(0,c.jsxs)(n.p,{children:["所以经过编译之后，想要修改 ",(0,c.jsx)(n.code,{children:".form"})," 下的 ",(0,c.jsx)(n.code,{children:".za-cell"}),"，如下写法，将无法修改成功："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-css",children:".form {\n  .za-cell {\n    color: red;\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["原因是，上述写法，",(0,c.jsx)(n.code,{children:".za-cell"})," 会被编译加上 ",(0,c.jsx)(n.code,{children:"hash"}),"，组件库 ",(0,c.jsx)(n.code,{children:"Zarm"})," 内的 ",(0,c.jsx)(n.code,{children:"dom"})," 类名还是叫 ",(0,c.jsx)(n.code,{children:"za-cell"}),"，如上图所示。所以为了不加 ",(0,c.jsx)(n.code,{children:"hash"}),"，就需要这样操作："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-css",children:".form {\n  :global {\n    .za-cell {\n      color: red;\n    }\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["这样 ",(0,c.jsx)(n.code,{children:".za-cell"})," 就不会被加上 ",(0,c.jsx)(n.code,{children:"hash"}),"，如下图所示："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"完成上述页面布局之后，你会看到这样一个效果："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["少了一个验证码，我们使用插件 ",(0,c.jsx)(n.code,{children:"react-captcha-code"}),"，我们通过 ",(0,c.jsx)(n.code,{children:"npm"})," 下载它："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"npm i react-captcha-code -S\n"})}),"\n",(0,c.jsx)(n.p,{children:"在代码中引入："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'...\nimport Captcha from "react-captcha-code"\n...\n<Input\n  clearable\n  type="text"\n  placeholder="请输入验证码"\n  onChange={(value) => setVerify(value)}\n/>\n<Captcha charNum={4} />\n'})}),"\n",(0,c.jsx)(n.p,{children:"浏览器展示如下所示："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"此时我们已经切完注册页面需要的内容。"}),"\n",(0,c.jsx)(n.p,{children:"我们给页面加上相应的逻辑，首先是账号、密码、验证码："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'...\nconst [username, setUsername] = useState(\'\'); // 账号\nconst [password, setPassword] = useState(\'\'); // 密码\nconst [verify, setVerify] = useState(\'\'); // 验证码\n...\n<Input\n  clearable\n  type="text"\n  placeholder="请输入账号"\n  onChange={(value) => setUsername(value)}\n/>\n...\n<Input\n  clearable\n  type="password"\n  placeholder="请输入密码"\n  onChange={(value) => setPassword(value)}\n/>\n...\n<Input\n  clearable\n  type="text"\n  placeholder="请输入验证码"\n  onChange={(value) => setVerify(value)}\n/>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["当输入框内容修改的时候，",(0,c.jsx)(n.code,{children:"onChange"})," 会被触发，接受的回调函数参数，便是变化的输入值，此时我们将其保存在声明的变量中。"]}),"\n",(0,c.jsx)(n.p,{children:"我们输入的验证码是需要和验证码图片里的验证码匹配的，所以我们还需要拿到图片里的验证码，我们作如下操作："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"import React, { useCallback } from 'react'\n...\nconst [captcha, setCaptcha] = useState(''); // 验证码变化后存储值\n//  验证码变化，回调方法\nconst handleChange = useCallback((captcha) => {\n  console.log('captcha', captcha)\n  setCaptcha(captcha)\n}, []);\n...\n<Captcha charNum={4} onChange={handleChange} />\n"})}),"\n",(0,c.jsx)(n.p,{children:"当验证码变化的时候，便能获取到相应的值。修改完上述代码，我们不妨测试一下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"到此，注册需要的参数都有了，我们开始编写注册方法："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"import { Cell, Input, Button, Checkbox, Toast } from 'zarm'\nimport { post } from '@/utils'\n...\nconst onSubmit = async () => {\n  if (!username) {\n    Toast.show('请输入账号')\n    return\n  }\n  if (!password) {\n    Toast.show('请输入密码')\n    return\n  }\n  if (!verify) {\n    Toast.show('请输入验证码')\n    return\n  };\n  if (verify != captcha) {\n    Toast.show('验证码错误')\n    return\n  };\n  try {\n    const { data } = await post('/api/user/register', {\n      username,\n      password\n    });\n    Toast.show('注册成功');\n  } catch (error) {\n    Toast.show('系统错误');\n  }\n};\n...\n<Button onClick={onSubmit} block theme=\"primary\">注册</Button>\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上述代码中，因为我们使用的是 ",(0,c.jsx)(n.code,{children:"async await"})," 做异步处理，所以需要通过 ",(0,c.jsx)(n.code,{children:"try catch"})," 来捕获异步处理过程中出现的错误，如果使用 ",(0,c.jsx)(n.code,{children:"Promise"})," 的回调函数，则无需使用 ",(0,c.jsx)(n.code,{children:"try catch"}),"，改动如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"post('/api/user/register', {\n  username,\n  password\n}).then(res => {\n  // do something\n})\n"})}),"\n",(0,c.jsx)(n.p,{children:"尝试使用之前注册过的用户名，注册一个账号："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"服务端给出正确的报错，我们再用一个未注册过的用户名："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["此时我们大致将注册功能实现了。这里我不再展开讲样式部分，因为这样会使得文章中出现过多的重复代码，不以阅读，大家尽量根据标签的类名去查找 ",(0,c.jsx)(n.code,{children:"css"})," 样式部分。"]}),"\n",(0,c.jsxs)(n.h2,{id:"登录页面",children:["登录页面",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#登录页面",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["登录页面的逻辑我们直接做到同一个页面中，通过一个 ",(0,c.jsx)(n.code,{children:"type"})," 参数作为判断条件，判断当前状态是登录页面或是注册页面。"]}),"\n",(0,c.jsx)(n.p,{children:"话不多说我们添加代码如下："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"...\nimport cx from 'classnames'\n...\n\nconst Login = () => {\n  ...\n  const [type, setType] = useState('login'); // 登录注册类型\n\n  return <div className={s.auth}>\n    ...\n    <div className={s.tab}>\n      <span className={cx({ [s.avtive]: type == 'login' })} onClick={() => setType('login')}>登录</span>\n      <span className={cx({ [s.avtive]: type == 'register' })} onClick={() => setType('register')}>注册</span>\n    </div>\n  </div>\n  <div className={s.form}>\n    ...\n    {\n      type == 'register' ? <Cell icon={<CustomIcon type=\"mima\" />}>\n        <Input\n          clearable\n          type=\"text\"\n          placeholder=\"请输入验证码\"\n          onChange={(value) => setVerify(value)}\n        />\n        <Captcha ref={captchaRef} charNum={4} onChange={handleChange} />\n      </Cell> : null\n    }\n  </div>\n  <div className={s.operation}>\n    {\n      type == 'register' ? <div className={s.agree}>\n        <Checkbox />\n        <label className=\"text-light\">阅读并同意<a>《掘掘手札条款》</a></label>\n      </div> : null\n    }\n    <Button onClick={onSubmit} block theme=\"primary\">{type == 'login' ? '登录' : '注册'}</Button>\n  </div>\n}\n"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"注意，如果引入了新的工具包，请自行安装，如上述代码就需要安装 classnames。可以通过 npm i classnames -S 指令"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"代码分析："}),"\n",(0,c.jsxs)(n.p,{children:["上述代码中，通过 ",(0,c.jsx)(n.code,{children:"type"})," 属性区分注册和登录。"]}),"\n",(0,c.jsxs)(n.p,{children:["首先是 ",(0,c.jsx)(n.code,{children:"tab"})," 切换，通过 ",(0,c.jsx)(n.code,{children:"classname"})," 来判断是否是当前高亮，用于样式控制。"]}),"\n",(0,c.jsxs)(n.p,{children:["其次，当 ",(0,c.jsx)(n.code,{children:"type == 'register'"})," 的时候，才把验证码展示出来，因为登录这边咱们就不设置验证码，只在注册的时候显示。"]}),"\n",(0,c.jsxs)(n.p,{children:["最后是事件的判断，如果 ",(0,c.jsx)(n.code,{children:"type == 'login'"}),"，则按钮文案显示为 ",(0,c.jsx)(n.code,{children:"登录"}),"，否则为 ",(0,c.jsx)(n.code,{children:"注册"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["此时点击触发的 ",(0,c.jsx)(n.code,{children:"onSubmit"})," 事件也很关键，同样需要通过 ",(0,c.jsx)(n.code,{children:"type"})," 判断是登录还是注册，修改代码如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const onSubmit = async () => {\n  if (!username) {\n    Toast.show('请输入账号')\n    return\n  }\n  if (!password) {\n    Toast.show('请输入密码')\n    return\n  }\n  try {\n    // 判断是否是登录状态\n    if (type == 'login') {\n      // 执行登录接口，获取 token\n      const { data } = await post('/api/user/login', {\n        username,\n        password\n      });\n      // 将 token 写入 localStorage\n      localStorage.setItem('token', data.token);\n    } else {\n      if (!verify) {\n        Toast.show('请输入验证码')\n        return\n      };\n      if (verify != captcha) {\n        Toast.show('验证码错误')\n        return\n      };\n      const { data } = await post('/api/user/register', {\n        username,\n        password\n      });\n      Toast.show('注册成功');\n      // 注册成功，自动将 tab 切换到 login 状态\n      setType('login');\n    }\n  } catch (error) {\n    Toast.show('系统错误');\n  }\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["由于登录注册的账号和密码是同一参数，我们这边就直接复用了逻辑，并通过 ",(0,c.jsx)(n.code,{children:"type"})," 判断调用哪一个接口。"]}),"\n",(0,c.jsxs)(n.p,{children:["重启项目，验证登录接口是否成功，如果成功则会返回 ",(0,c.jsx)(n.code,{children:"token"})," 信息，如下图所示："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["此时，我们本地的 ",(0,c.jsx)(n.code,{children:"localStorage"})," 里，已经存下了 ",(0,c.jsx)(n.code,{children:"token"}),"，如下图所示："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["保存 ",(0,c.jsx)(n.code,{children:"token"})," 的形式有很多，你可以引入状态管理插件来对这些数据进行存储，但是这里我们对其进行简单处理，减少项目多余的负担，保证课程的完成度。有时候，成功的将课程完成，也是一种成就感。"]}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["到此，我们的登录注册页面算是完成了，我们拿到的 ",(0,c.jsx)(n.code,{children:"token"})," 是有时效性的，我在后台设置的是 24 小时的时效，如果过期了，请求其他接口时，就会报错，从而通过逻辑判断重新回到登录页面。下一章节，我会详细分析这块内容。"]})]})}function g(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(u,{...e})}):u(e)}let b=g;g.__RSPRESS_PAGE_META={},g.__RSPRESS_PAGE_META["Node%20%2B%20React%20%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E8%AE%B0%E8%B4%A6%E6%9C%AC%2F15.%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"知识点",id:"知识点",depth:4},{text:"注册页面",id:"注册页面",depth:2},{text:"登录页面",id:"登录页面",depth:2},{text:"总结",id:"总结",depth:2}],title:"15.前端实战：登录注册页面",headingTitle:"15.前端实战：登录注册页面",frontmatter:{}}}}]);