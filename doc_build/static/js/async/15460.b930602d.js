"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["15460"],{266324:function(e,n,r){r.r(n),r.d(n,{default:()=>i});var s=r(552676),c=r(740453);function o(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",strong:"strong",h3:"h3"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"17promise-对象",children:["17.Promise 对象",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#17promise-对象",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"promise-的含义",children:["Promise 的含义",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promise-的含义",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了",(0,s.jsx)(n.code,{children:"Promise"}),"对象。"]}),"\n",(0,s.jsxs)(n.p,{children:["所谓",(0,s.jsx)(n.code,{children:"Promise"}),"，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"}),"对象有以下两个特点。"]}),"\n",(0,s.jsxs)(n.p,{children:["（1）对象的状态不受外界影响。",(0,s.jsx)(n.code,{children:"Promise"}),"对象代表一个异步操作，有三种状态：",(0,s.jsx)(n.code,{children:"pending"}),"（进行中）、",(0,s.jsx)(n.code,{children:"fulfilled"}),"（已成功）和",(0,s.jsx)(n.code,{children:"rejected"}),"（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是",(0,s.jsx)(n.code,{children:"Promise"}),"这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。"]}),"\n",(0,s.jsxs)(n.p,{children:["（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。",(0,s.jsx)(n.code,{children:"Promise"}),"对象的状态改变，只有两种可能：从",(0,s.jsx)(n.code,{children:"pending"}),"变为",(0,s.jsx)(n.code,{children:"fulfilled"}),"和从",(0,s.jsx)(n.code,{children:"pending"}),"变为",(0,s.jsx)(n.code,{children:"rejected"}),"。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对",(0,s.jsx)(n.code,{children:"Promise"}),"对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，为了行文方便，本章后面的",(0,s.jsx)(n.code,{children:"resolved"}),"统一只指",(0,s.jsx)(n.code,{children:"fulfilled"}),"状态，不包含",(0,s.jsx)(n.code,{children:"rejected"}),"状态。"]}),"\n",(0,s.jsxs)(n.p,{children:["有了",(0,s.jsx)(n.code,{children:"Promise"}),"对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，",(0,s.jsx)(n.code,{children:"Promise"}),"对象提供统一的接口，使得控制异步操作更加容易。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"}),"也有一些缺点。首先，无法取消",(0,s.jsx)(n.code,{children:"Promise"}),"，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，",(0,s.jsx)(n.code,{children:"Promise"}),"内部抛出的错误，不会反应到外部。第三，当处于",(0,s.jsx)(n.code,{children:"pending"}),"状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果某些事件不断地反复发生，一般来说，使用 ",(0,s.jsx)(n.a,{href:"https://nodejs.org/api/stream.html",target:"_blank",rel:"noopener noreferrer",children:"Stream"})," 模式是比部署",(0,s.jsx)(n.code,{children:"Promise"}),"更好的选择。"]}),"\n",(0,s.jsxs)(n.h2,{id:"基本用法",children:["基本用法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本用法",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 规定，",(0,s.jsx)(n.code,{children:"Promise"}),"对象是一个构造函数，用来生成",(0,s.jsx)(n.code,{children:"Promise"}),"实例。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面代码创造了一个",(0,s.jsx)(n.code,{children:"Promise"}),"实例。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"}),"构造函数接受一个函数作为参数，该函数的两个参数分别是",(0,s.jsx)(n.code,{children:"resolve"}),"和",(0,s.jsx)(n.code,{children:"reject"}),"。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"resolve"}),"函数的作用是，将",(0,s.jsx)(n.code,{children:"Promise"}),"对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；",(0,s.jsx)(n.code,{children:"reject"}),"函数的作用是，将",(0,s.jsx)(n.code,{children:"Promise"}),"对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"}),"实例生成以后，可以用",(0,s.jsx)(n.code,{children:"then"}),"方法分别指定",(0,s.jsx)(n.code,{children:"resolved"}),"状态和",(0,s.jsx)(n.code,{children:"rejected"}),"状态的回调函数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"promise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"then"}),"方法可以接受两个回调函数作为参数。第一个回调函数是",(0,s.jsx)(n.code,{children:"Promise"}),"对象的状态变为",(0,s.jsx)(n.code,{children:"resolved"}),"时调用，第二个回调函数是",(0,s.jsx)(n.code,{children:"Promise"}),"对象的状态变为",(0,s.jsx)(n.code,{children:"rejected"}),"时调用。这两个函数都是可选的，不一定要提供。它们都接受",(0,s.jsx)(n.code,{children:"Promise"}),"对象传出的值作为参数。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面是一个",(0,s.jsx)(n.code,{children:"Promise"}),"对象的简单例子。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, 'done');\n  });\n}\n\ntimeout(100).then((value) => {\n  console.log(value);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"timeout"}),"方法返回一个",(0,s.jsx)(n.code,{children:"Promise"}),"实例，表示一段时间以后才会发生的结果。过了指定的时间（",(0,s.jsx)(n.code,{children:"ms"}),"参数）以后，",(0,s.jsx)(n.code,{children:"Promise"}),"实例的状态变为",(0,s.jsx)(n.code,{children:"resolved"}),"，就会触发",(0,s.jsx)(n.code,{children:"then"}),"方法绑定的回调函数。"]}),"\n",(0,s.jsx)(n.p,{children:"Promise 新建后就会立即执行。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let promise = new Promise(function(resolve, reject) {\n  console.log('Promise');\n  resolve();\n});\n\npromise.then(function() {\n  console.log('resolved');\n});\n\nconsole.log('Hi!');\n\n// Promise\n// Hi!\n// resolved\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，Promise 新建后立即执行，所以首先输出的是",(0,s.jsx)(n.code,{children:"Promise"}),"。然后，",(0,s.jsx)(n.code,{children:"then"}),"方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以",(0,s.jsx)(n.code,{children:"resolved"}),"最后输出。"]}),"\n",(0,s.jsx)(n.p,{children:"下面是异步加载图片的例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image();\n\n    image.onload = function() {\n      resolve(image);\n    };\n\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url));\n    };\n\n    image.src = url;\n  });\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，使用",(0,s.jsx)(n.code,{children:"Promise"}),"包装了一个图片加载的异步操作。如果加载成功，就调用",(0,s.jsx)(n.code,{children:"resolve"}),"方法，否则就调用",(0,s.jsx)(n.code,{children:"reject"}),"方法。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面是一个用",(0,s.jsx)(n.code,{children:"Promise"}),"对象实现的 Ajax 操作的例子。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const getJSON = function(url) {\n  const promise = new Promise(function(resolve, reject){\n    const handler = function() {\n      if (this.readyState !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    const client = new XMLHttpRequest();\n    client.open("GET", url);\n    client.onreadystatechange = handler;\n    client.responseType = "json";\n    client.setRequestHeader("Accept", "application/json");\n    client.send();\n\n  });\n\n  return promise;\n};\n\ngetJSON("/posts.json").then(function(json) {\n  console.log(\'Contents: \' + json);\n}, function(error) {\n  console.error(\'出错了\', error);\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"getJSON"}),"是对 XMLHttpRequest 对象的封装，用于发出一个针对 JSON 数据的 HTTP 请求，并且返回一个",(0,s.jsx)(n.code,{children:"Promise"}),"对象。需要注意的是，在",(0,s.jsx)(n.code,{children:"getJSON"}),"内部，",(0,s.jsx)(n.code,{children:"resolve"}),"函数和",(0,s.jsx)(n.code,{children:"reject"}),"函数调用时，都带有参数。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果调用",(0,s.jsx)(n.code,{children:"resolve"}),"函数和",(0,s.jsx)(n.code,{children:"reject"}),"函数时带有参数，那么它们的参数会被传递给回调函数。",(0,s.jsx)(n.code,{children:"reject"}),"函数的参数通常是",(0,s.jsx)(n.code,{children:"Error"}),"对象的实例，表示抛出的错误；",(0,s.jsx)(n.code,{children:"resolve"}),"函数的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const p1 = new Promise(function (resolve, reject) {\n  // ...\n});\n\nconst p2 = new Promise(function (resolve, reject) {\n  // ...\n  resolve(p1);\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"p1"}),"和",(0,s.jsx)(n.code,{children:"p2"}),"都是 Promise 的实例，但是",(0,s.jsx)(n.code,{children:"p2"}),"的",(0,s.jsx)(n.code,{children:"resolve"}),"方法将",(0,s.jsx)(n.code,{children:"p1"}),"作为参数，即一个异步操作的结果是返回另一个异步操作。"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，这时",(0,s.jsx)(n.code,{children:"p1"}),"的状态就会传递给",(0,s.jsx)(n.code,{children:"p2"}),"，也就是说，",(0,s.jsx)(n.code,{children:"p1"}),"的状态决定了",(0,s.jsx)(n.code,{children:"p2"}),"的状态。如果",(0,s.jsx)(n.code,{children:"p1"}),"的状态是",(0,s.jsx)(n.code,{children:"pending"}),"，那么",(0,s.jsx)(n.code,{children:"p2"}),"的回调函数就会等待",(0,s.jsx)(n.code,{children:"p1"}),"的状态改变；如果",(0,s.jsx)(n.code,{children:"p1"}),"的状态已经是",(0,s.jsx)(n.code,{children:"resolved"}),"或者",(0,s.jsx)(n.code,{children:"rejected"}),"，那么",(0,s.jsx)(n.code,{children:"p2"}),"的回调函数将会立刻执行。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const p1 = new Promise(function (resolve, reject) {\n  setTimeout(() => reject(new Error('fail')), 3000)\n})\n\nconst p2 = new Promise(function (resolve, reject) {\n  setTimeout(() => resolve(p1), 1000)\n})\n\np2\n  .then(result => console.log(result))\n  .catch(error => console.log(error))\n// Error: fail\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"p1"}),"是一个 Promise，3 秒之后变为",(0,s.jsx)(n.code,{children:"rejected"}),"。",(0,s.jsx)(n.code,{children:"p2"}),"的状态在 1 秒之后改变，",(0,s.jsx)(n.code,{children:"resolve"}),"方法返回的是",(0,s.jsx)(n.code,{children:"p1"}),"。由于",(0,s.jsx)(n.code,{children:"p2"}),"返回的是另一个 Promise，导致",(0,s.jsx)(n.code,{children:"p2"}),"自己的状态无效了，由",(0,s.jsx)(n.code,{children:"p1"}),"的状态决定",(0,s.jsx)(n.code,{children:"p2"}),"的状态。所以，后面的",(0,s.jsx)(n.code,{children:"then"}),"语句都变成针对后者（",(0,s.jsx)(n.code,{children:"p1"}),"）。又过了 2 秒，",(0,s.jsx)(n.code,{children:"p1"}),"变为",(0,s.jsx)(n.code,{children:"rejected"}),"，导致触发",(0,s.jsx)(n.code,{children:"catch"}),"方法指定的回调函数。"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，调用",(0,s.jsx)(n.code,{children:"resolve"}),"或",(0,s.jsx)(n.code,{children:"reject"}),"并不会终结 Promise 的参数函数的执行。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"new Promise((resolve, reject) => {\n  resolve(1);\n  console.log(2);\n}).then(r => {\n  console.log(r);\n});\n// 2\n// 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，调用",(0,s.jsx)(n.code,{children:"resolve(1)"}),"以后，后面的",(0,s.jsx)(n.code,{children:"console.log(2)"}),"还是会执行，并且会首先打印出来。这是因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。"]}),"\n",(0,s.jsxs)(n.p,{children:["一般来说，调用",(0,s.jsx)(n.code,{children:"resolve"}),"或",(0,s.jsx)(n.code,{children:"reject"}),"以后，Promise 的使命就完成了，后继操作应该放到",(0,s.jsx)(n.code,{children:"then"}),"方法里面，而不应该直接写在",(0,s.jsx)(n.code,{children:"resolve"}),"或",(0,s.jsx)(n.code,{children:"reject"}),"的后面。所以，最好在它们前面加上",(0,s.jsx)(n.code,{children:"return"}),"语句，这样就不会有意外。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"new Promise((resolve, reject) => {\n  return resolve(1);\n  // 后面的语句不会执行\n  console.log(2);\n})\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"promiseprototypethen",children:["Promise.prototype.then()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseprototypethen",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Promise 实例具有",(0,s.jsx)(n.code,{children:"then"}),"方法，也就是说，",(0,s.jsx)(n.code,{children:"then"}),"方法是定义在原型对象",(0,s.jsx)(n.code,{children:"Promise.prototype"}),"上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，",(0,s.jsx)(n.code,{children:"then"}),"方法的第一个参数是",(0,s.jsx)(n.code,{children:"resolved"}),"状态的回调函数，第二个参数是",(0,s.jsx)(n.code,{children:"rejected"}),"状态的回调函数，它们都是可选的。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"then"}),"方法返回的是一个新的",(0,s.jsx)(n.code,{children:"Promise"}),"实例（注意，不是原来那个",(0,s.jsx)(n.code,{children:"Promise"}),"实例）。因此可以采用链式写法，即",(0,s.jsx)(n.code,{children:"then"}),"方法后面再调用另一个",(0,s.jsx)(n.code,{children:"then"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'getJSON("/posts.json").then(function(json) {\n  return json.post;\n}).then(function(post) {\n  // ...\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面的代码使用",(0,s.jsx)(n.code,{children:"then"}),"方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。"]}),"\n",(0,s.jsxs)(n.p,{children:["采用链式的",(0,s.jsx)(n.code,{children:"then"}),"，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个",(0,s.jsx)(n.code,{children:"Promise"}),"对象（即有异步操作），这时后一个回调函数，就会等待该",(0,s.jsx)(n.code,{children:"Promise"}),"对象的状态发生变化，才会被调用。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'getJSON("/post/1.json").then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function (comments) {\n  console.log("resolved: ", comments);\n}, function (err){\n  console.log("rejected: ", err);\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，第一个",(0,s.jsx)(n.code,{children:"then"}),"方法指定的回调函数，返回的是另一个",(0,s.jsx)(n.code,{children:"Promise"}),"对象。这时，第二个",(0,s.jsx)(n.code,{children:"then"}),"方法指定的回调函数，就会等待这个新的",(0,s.jsx)(n.code,{children:"Promise"}),"对象状态发生变化。如果变为",(0,s.jsx)(n.code,{children:"resolved"}),"，就调用第一个回调函数，如果状态变为",(0,s.jsx)(n.code,{children:"rejected"}),"，就调用第二个回调函数。"]}),"\n",(0,s.jsx)(n.p,{children:"如果采用箭头函数，上面的代码可以写得更简洁。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'getJSON("/post/1.json").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log("resolved: ", comments),\n  err => console.log("rejected: ", err)\n);\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"promiseprototypecatch",children:["Promise.prototype.catch()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseprototypecatch",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.prototype.catch()"}),"方法是",(0,s.jsx)(n.code,{children:".then(null, rejection)"}),"或",(0,s.jsx)(n.code,{children:".then(undefined, rejection)"}),"的别名，用于指定发生错误时的回调函数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"getJSON('/posts.json').then(function(posts) {\n  // ...\n}).catch(function(error) {\n  // 处理 getJSON 和 前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"getJSON()"}),"方法返回一个 Promise 对象，如果该对象状态变为",(0,s.jsx)(n.code,{children:"resolved"}),"，则会调用",(0,s.jsx)(n.code,{children:"then()"}),"方法指定的回调函数；如果异步操作抛出错误，状态就会变为",(0,s.jsx)(n.code,{children:"rejected"}),"，就会调用",(0,s.jsx)(n.code,{children:"catch()"}),"方法指定的回调函数，处理这个错误。另外，",(0,s.jsx)(n.code,{children:"then()"}),"方法指定的回调函数，如果运行中抛出错误，也会被",(0,s.jsx)(n.code,{children:"catch()"}),"方法捕获。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"p.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\n"})}),"\n",(0,s.jsx)(n.p,{children:"下面是一个例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const promise = new Promise(function(resolve, reject) {\n  throw new Error('test');\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n// Error: test\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"promise"}),"抛出一个错误，就被",(0,s.jsx)(n.code,{children:"catch()"}),"方法指定的回调函数捕获。注意，上面的写法与下面两种写法是等价的。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 写法一\nconst promise = new Promise(function(resolve, reject) {\n  try {\n    throw new Error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n// 写法二\nconst promise = new Promise(function(resolve, reject) {\n  reject(new Error('test'));\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["比较上面两种写法，可以发现",(0,s.jsx)(n.code,{children:"reject()"}),"方法的作用，等同于抛出错误。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果 Promise 状态已经变成",(0,s.jsx)(n.code,{children:"resolved"}),"，再抛出错误是无效的。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const promise = new Promise(function(resolve, reject) {\n  resolve('ok');\n  throw new Error('test');\n});\npromise\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，Promise 在",(0,s.jsx)(n.code,{children:"resolve"}),"语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。"]}),"\n",(0,s.jsxs)(n.p,{children:["Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个",(0,s.jsx)(n.code,{children:"catch"}),"语句捕获。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"getJSON('/post/1.json').then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function(comments) {\n  // some code\n}).catch(function(error) {\n  // 处理前面三个Promise产生的错误\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，一共有三个 Promise 对象：一个由",(0,s.jsx)(n.code,{children:"getJSON()"}),"产生，两个由",(0,s.jsx)(n.code,{children:"then()"}),"产生。它们之中任何一个抛出的错误，都会被最后一个",(0,s.jsx)(n.code,{children:"catch()"}),"捕获。"]}),"\n",(0,s.jsxs)(n.p,{children:["一般来说，不要在",(0,s.jsx)(n.code,{children:"then()"}),"方法里面定义 Reject 状态的回调函数（即",(0,s.jsx)(n.code,{children:"then"}),"的第二个参数），总是使用",(0,s.jsx)(n.code,{children:"catch"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// bad\npromise\n  .then(function(data) {\n    // success\n  }, function(err) {\n    // error\n  });\n\n// good\npromise\n  .then(function(data) { //cb\n    // success\n  })\n  .catch(function(err) {\n    // error\n  });\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面",(0,s.jsx)(n.code,{children:"then"}),"方法执行中的错误，也更接近同步的写法（",(0,s.jsx)(n.code,{children:"try/catch"}),"）。因此，建议总是使用",(0,s.jsx)(n.code,{children:"catch()"}),"方法，而不使用",(0,s.jsx)(n.code,{children:"then()"}),"方法的第二个参数。"]}),"\n",(0,s.jsxs)(n.p,{children:["跟传统的",(0,s.jsx)(n.code,{children:"try/catch"}),"代码块不同的是，如果没有使用",(0,s.jsx)(n.code,{children:"catch()"}),"方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const someAsyncThing = function() {\n  return new Promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeAsyncThing().then(function() {\n  console.log('everything is great');\n});\n\nsetTimeout(() => { console.log(123) }, 2000);\n// Uncaught (in promise) ReferenceError: x is not defined\n// 123\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"someAsyncThing()"}),"函数产生的 Promise 对象，内部有语法错误。浏览器运行到这一行，会打印出错误提示",(0,s.jsx)(n.code,{children:"ReferenceError: x is not defined"}),"，但是不会退出进程、终止脚本执行，2 秒之后还是会输出",(0,s.jsx)(n.code,{children:"123"}),"。这就是说，Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。"]}),"\n",(0,s.jsxs)(n.p,{children:["这个脚本放在服务器执行，退出码就是",(0,s.jsx)(n.code,{children:"0"}),"（即表示执行成功）。不过，Node.js 有一个",(0,s.jsx)(n.code,{children:"unhandledRejection"}),"事件，专门监听未捕获的",(0,s.jsx)(n.code,{children:"reject"}),"错误，上面的脚本会触发这个事件的监听函数，可以在监听函数里面抛出错误。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"process.on('unhandledRejection', function (err, p) {\n  throw err;\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"unhandledRejection"}),"事件的监听函数有两个参数，第一个是错误对象，第二个是报错的 Promise 实例，它可以用来了解发生错误的环境信息。"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，Node 有计划在未来废除",(0,s.jsx)(n.code,{children:"unhandledRejection"}),"事件。如果 Promise 内部有未捕获的错误，会直接终止进程，并且进程的退出码不为 0。"]}),"\n",(0,s.jsx)(n.p,{children:"再看下面的例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const promise = new Promise(function (resolve, reject) {\n  resolve('ok');\n  setTimeout(function () { throw new Error('test') }, 0)\n});\npromise.then(function (value) { console.log(value) });\n// ok\n// Uncaught Error: test\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码中，Promise 指定在下一轮“事件循环”再抛出错误。到了那个时候，Promise 的运行已经结束了，所以这个错误是在 Promise 函数体外抛出的，会冒泡到最外层，成了未捕获的错误。"}),"\n",(0,s.jsxs)(n.p,{children:["一般总是建议，Promise 对象后面要跟",(0,s.jsx)(n.code,{children:"catch()"}),"方法，这样可以处理 Promise 内部发生的错误。",(0,s.jsx)(n.code,{children:"catch()"}),"方法返回的还是一个 Promise 对象，因此后面还可以接着调用",(0,s.jsx)(n.code,{children:"then()"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const someAsyncThing = function() {\n  return new Promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeAsyncThing()\n.catch(function(error) {\n  console.log('oh no', error);\n})\n.then(function() {\n  console.log('carry on');\n});\n// oh no [ReferenceError: x is not defined]\n// carry on\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码运行完",(0,s.jsx)(n.code,{children:"catch()"}),"方法指定的回调函数，会接着运行后面那个",(0,s.jsx)(n.code,{children:"then()"}),"方法指定的回调函数。如果没有报错，则会跳过",(0,s.jsx)(n.code,{children:"catch()"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Promise.resolve()\n.catch(function(error) {\n  console.log('oh no', error);\n})\n.then(function() {\n  console.log('carry on');\n});\n// carry on\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面的代码因为没有报错，跳过了",(0,s.jsx)(n.code,{children:"catch()"}),"方法，直接执行后面的",(0,s.jsx)(n.code,{children:"then()"}),"方法。此时，要是",(0,s.jsx)(n.code,{children:"then()"}),"方法里面报错，就与前面的",(0,s.jsx)(n.code,{children:"catch()"}),"无关了。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"catch()"}),"方法之中，还能再抛出错误。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const someAsyncThing = function() {\n  return new Promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeAsyncThing().then(function() {\n  return someOtherAsyncThing();\n}).catch(function(error) {\n  console.log('oh no', error);\n  // 下面一行会报错，因为 y 没有声明\n  y + 2;\n}).then(function() {\n  console.log('carry on');\n});\n// oh no [ReferenceError: x is not defined]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"catch()"}),"方法抛出一个错误，因为后面没有别的",(0,s.jsx)(n.code,{children:"catch()"}),"方法了，导致这个错误不会被捕获，也不会传递到外层。如果改写一下，结果就不一样了。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"someAsyncThing().then(function() {\n  return someOtherAsyncThing();\n}).catch(function(error) {\n  console.log('oh no', error);\n  // 下面一行会报错，因为y没有声明\n  y + 2;\n}).catch(function(error) {\n  console.log('carry on', error);\n});\n// oh no [ReferenceError: x is not defined]\n// carry on [ReferenceError: y is not defined]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，第二个",(0,s.jsx)(n.code,{children:"catch()"}),"方法用来捕获前一个",(0,s.jsx)(n.code,{children:"catch()"}),"方法抛出的错误。"]}),"\n",(0,s.jsxs)(n.h2,{id:"promiseprototypefinally",children:["Promise.prototype.finally()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseprototypefinally",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"finally()"}),"方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"promise\n.then(result => {\xb7\xb7\xb7})\n.catch(error => {\xb7\xb7\xb7})\n.finally(() => {\xb7\xb7\xb7});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，不管",(0,s.jsx)(n.code,{children:"promise"}),"最后的状态，在执行完",(0,s.jsx)(n.code,{children:"then"}),"或",(0,s.jsx)(n.code,{children:"catch"}),"指定的回调函数以后，都会执行",(0,s.jsx)(n.code,{children:"finally"}),"方法指定的回调函数。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面是一个例子，服务器使用 Promise 处理请求，然后使用",(0,s.jsx)(n.code,{children:"finally"}),"方法关掉服务器。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"server.listen(port)\n  .then(function () {\n    // ...\n  })\n  .finally(server.stop);\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"finally"}),"方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是",(0,s.jsx)(n.code,{children:"fulfilled"}),"还是",(0,s.jsx)(n.code,{children:"rejected"}),"。这表明，",(0,s.jsx)(n.code,{children:"finally"}),"方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"finally"}),"本质上是",(0,s.jsx)(n.code,{children:"then"}),"方法的特例。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"promise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，如果不使用",(0,s.jsx)(n.code,{children:"finally"}),"方法，同样的语句需要为成功和失败两种情况各写一次。有了",(0,s.jsx)(n.code,{children:"finally"}),"方法，则只需要写一次。"]}),"\n",(0,s.jsx)(n.p,{children:"它的实现也很简单。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Promise.prototype.finally = function (callback) {\n  let P = this.constructor;\n  return this.then(\n    value  => P.resolve(callback()).then(() => value),\n    reason => P.resolve(callback()).then(() => { throw reason })\n  );\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，不管前面的 Promise 是",(0,s.jsx)(n.code,{children:"fulfilled"}),"还是",(0,s.jsx)(n.code,{children:"rejected"}),"，都会执行回调函数",(0,s.jsx)(n.code,{children:"callback"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["从上面的实现还可以看到，",(0,s.jsx)(n.code,{children:"finally"}),"方法总是会返回原来的值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// resolve 的值是 undefined\nPromise.resolve(2).then(() => {}, () => {})\n\n// resolve 的值是 2\nPromise.resolve(2).finally(() => {})\n\n// reject 的值是 undefined\nPromise.reject(3).then(() => {}, () => {})\n\n// reject 的值是 3\nPromise.reject(3).finally(() => {})\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"promiseall",children:["Promise.all()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseall",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.all()"}),"方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const p = Promise.all([p1, p2, p3]);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Promise.all()"}),"方法接受一个数组作为参数，",(0,s.jsx)(n.code,{children:"p1"}),"、",(0,s.jsx)(n.code,{children:"p2"}),"、",(0,s.jsx)(n.code,{children:"p3"}),"都是 Promise 实例，如果不是，就会先调用下面讲到的",(0,s.jsx)(n.code,{children:"Promise.resolve"}),"方法，将参数转为 Promise 实例，再进一步处理。另外，",(0,s.jsx)(n.code,{children:"Promise.all()"}),"方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"p"}),"的状态由",(0,s.jsx)(n.code,{children:"p1"}),"、",(0,s.jsx)(n.code,{children:"p2"}),"、",(0,s.jsx)(n.code,{children:"p3"}),"决定，分成两种情况。"]}),"\n",(0,s.jsxs)(n.p,{children:["（1）只有",(0,s.jsx)(n.code,{children:"p1"}),"、",(0,s.jsx)(n.code,{children:"p2"}),"、",(0,s.jsx)(n.code,{children:"p3"}),"的状态都变成",(0,s.jsx)(n.code,{children:"fulfilled"}),"，",(0,s.jsx)(n.code,{children:"p"}),"的状态才会变成",(0,s.jsx)(n.code,{children:"fulfilled"}),"，此时",(0,s.jsx)(n.code,{children:"p1"}),"、",(0,s.jsx)(n.code,{children:"p2"}),"、",(0,s.jsx)(n.code,{children:"p3"}),"的返回值组成一个数组，传递给",(0,s.jsx)(n.code,{children:"p"}),"的回调函数。"]}),"\n",(0,s.jsxs)(n.p,{children:["（2）只要",(0,s.jsx)(n.code,{children:"p1"}),"、",(0,s.jsx)(n.code,{children:"p2"}),"、",(0,s.jsx)(n.code,{children:"p3"}),"之中有一个被",(0,s.jsx)(n.code,{children:"rejected"}),"，",(0,s.jsx)(n.code,{children:"p"}),"的状态就变成",(0,s.jsx)(n.code,{children:"rejected"}),"，此时第一个被",(0,s.jsx)(n.code,{children:"reject"}),"的实例的返回值，会传递给",(0,s.jsx)(n.code,{children:"p"}),"的回调函数。"]}),"\n",(0,s.jsx)(n.p,{children:"下面是一个具体的例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 生成一个Promise对象的数组\nconst promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"promises"}),"是包含 6 个 Promise 实例的数组，只有这 6 个实例的状态都变成",(0,s.jsx)(n.code,{children:"fulfilled"}),"，或者其中有一个变为",(0,s.jsx)(n.code,{children:"rejected"}),"，才会调用",(0,s.jsx)(n.code,{children:"Promise.all"}),"方法后面的回调函数。"]}),"\n",(0,s.jsx)(n.p,{children:"下面是另一个例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const databasePromise = connectDatabase();\n\nconst booksPromise = databasePromise\n  .then(findAllBooks);\n\nconst userPromise = databasePromise\n  .then(getCurrentUser);\n\nPromise.all([\n  booksPromise,\n  userPromise\n])\n.then(([books, user]) => pickTopRecommendations(books, user));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"booksPromise"}),"和",(0,s.jsx)(n.code,{children:"userPromise"}),"是两个异步操作，只有等到它们的结果都返回了，才会触发",(0,s.jsx)(n.code,{children:"pickTopRecommendations"}),"这个回调函数。"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，如果作为参数的 Promise 实例，自己定义了",(0,s.jsx)(n.code,{children:"catch"}),"方法，那么它一旦被",(0,s.jsx)(n.code,{children:"rejected"}),"，并不会触发",(0,s.jsx)(n.code,{children:"Promise.all()"}),"的",(0,s.jsx)(n.code,{children:"catch"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"p1"}),"会",(0,s.jsx)(n.code,{children:"resolved"}),"，",(0,s.jsx)(n.code,{children:"p2"}),"首先会",(0,s.jsx)(n.code,{children:"rejected"}),"，但是",(0,s.jsx)(n.code,{children:"p2"}),"有自己的",(0,s.jsx)(n.code,{children:"catch"}),"方法，该方法返回的是一个新的 Promise 实例，",(0,s.jsx)(n.code,{children:"p2"}),"指向的实际上是这个实例。该实例执行完",(0,s.jsx)(n.code,{children:"catch"}),"方法后，也会变成",(0,s.jsx)(n.code,{children:"resolved"}),"，导致",(0,s.jsx)(n.code,{children:"Promise.all()"}),"方法参数里面的两个实例都会",(0,s.jsx)(n.code,{children:"resolved"}),"，因此会调用",(0,s.jsx)(n.code,{children:"then"}),"方法指定的回调函数，而不会调用",(0,s.jsx)(n.code,{children:"catch"}),"方法指定的回调函数。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果",(0,s.jsx)(n.code,{children:"p2"}),"没有自己的",(0,s.jsx)(n.code,{children:"catch"}),"方法，就会调用",(0,s.jsx)(n.code,{children:"Promise.all()"}),"的",(0,s.jsx)(n.code,{children:"catch"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// Error: 报错了\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"promiserace",children:["Promise.race()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promiserace",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.race()"}),"方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const p = Promise.race([p1, p2, p3]);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，只要",(0,s.jsx)(n.code,{children:"p1"}),"、",(0,s.jsx)(n.code,{children:"p2"}),"、",(0,s.jsx)(n.code,{children:"p3"}),"之中有一个实例率先改变状态，",(0,s.jsx)(n.code,{children:"p"}),"的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给",(0,s.jsx)(n.code,{children:"p"}),"的回调函数。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.race()"}),"方法的参数与",(0,s.jsx)(n.code,{children:"Promise.all()"}),"方法一样，如果不是 Promise 实例，就会先调用下面讲到的",(0,s.jsx)(n.code,{children:"Promise.resolve()"}),"方法，将参数转为 Promise 实例，再进一步处理。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面是一个例子，如果指定时间内没有获得结果，就将 Promise 的状态变为",(0,s.jsx)(n.code,{children:"reject"}),"，否则变为",(0,s.jsx)(n.code,{children:"resolve"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const p = Promise.race([\n  fetch('/resource-that-may-take-a-while'),\n  new Promise(function (resolve, reject) {\n    setTimeout(() => reject(new Error('request timeout')), 5000)\n  })\n]);\n\np\n.then(console.log)\n.catch(console.error);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，如果 5 秒之内",(0,s.jsx)(n.code,{children:"fetch"}),"方法无法返回结果，变量",(0,s.jsx)(n.code,{children:"p"}),"的状态就会变为",(0,s.jsx)(n.code,{children:"rejected"}),"，从而触发",(0,s.jsx)(n.code,{children:"catch"}),"方法指定的回调函数。"]}),"\n",(0,s.jsxs)(n.h2,{id:"promiseallsettled",children:["Promise.allSettled()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseallsettled",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"有时候，我们希望等到一组异步操作都结束了，不管每一个操作是成功还是失败，再进行下一步操作。但是，现有的 Promise 方法很难实现这个要求。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.all()"}),"方法只适合所有异步操作都成功的情况，如果有一个操作失败，就无法满足要求。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const urls = [url_1, url_2, url_3];\nconst requests = urls.map(x => fetch(x));\n\ntry {\n  await Promise.all(requests);\n  console.log('所有请求都成功。');\n} catch {\n  console.log('至少一个请求失败，其他请求可能还没结束。');\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面示例中，",(0,s.jsx)(n.code,{children:"Promise.all()"}),"可以确定所有请求都成功了，但是只要有一个请求失败，它就会报错，而不管另外的请求是否结束。"]}),"\n",(0,s.jsxs)(n.p,{children:["为了解决这个问题，",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-promise-allSettled",target:"_blank",rel:"noopener noreferrer",children:"ES2020"})," 引入了",(0,s.jsx)(n.code,{children:"Promise.allSettled()"}),"方法，用来确定一组异步操作是否都结束了（不管成功或失败）。所以，它的名字叫做”Settled“，包含了”fulfilled“和”rejected“两种情况。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.allSettled()"}),"方法接受一个数组作为参数，数组的每个成员都是一个 Promise 对象，并返回一个新的 Promise 对象。只有等到参数数组的所有 Promise 对象都发生状态变更（不管是",(0,s.jsx)(n.code,{children:"fulfilled"}),"还是",(0,s.jsx)(n.code,{children:"rejected"}),"），返回的 Promise 对象才会发生状态变更。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const promises = [\n  fetch('/api-1'),\n  fetch('/api-2'),\n  fetch('/api-3'),\n];\n\nawait Promise.allSettled(promises);\nremoveLoadingIndicator();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面示例中，数组",(0,s.jsx)(n.code,{children:"promises"}),"包含了三个请求，只有等到这三个请求都结束了（不管请求成功还是失败），",(0,s.jsx)(n.code,{children:"removeLoadingIndicator()"}),"才会执行。"]}),"\n",(0,s.jsxs)(n.p,{children:["该方法返回的新的 Promise 实例，一旦发生状态变更，状态总是",(0,s.jsx)(n.code,{children:"fulfilled"}),"，不会变成",(0,s.jsx)(n.code,{children:"rejected"}),"。状态变成",(0,s.jsx)(n.code,{children:"fulfilled"}),"后，它的回调函数会接收到一个数组作为参数，该数组的每个成员对应前面数组的每个 Promise 对象。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const resolved = Promise.resolve(42);\nconst rejected = Promise.reject(-1);\n\nconst allSettledPromise = Promise.allSettled([resolved, rejected]);\n\nallSettledPromise.then(function (results) {\n  console.log(results);\n});\n// [\n//    { status: 'fulfilled', value: 42 },\n//    { status: 'rejected', reason: -1 }\n// ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Promise.allSettled()"}),"的返回值",(0,s.jsx)(n.code,{children:"allSettledPromise"}),"，状态只可能变成",(0,s.jsx)(n.code,{children:"fulfilled"}),"。它的回调函数接收到的参数是数组",(0,s.jsx)(n.code,{children:"results"}),"。该数组的每个成员都是一个对象，对应传入",(0,s.jsx)(n.code,{children:"Promise.allSettled()"}),"的数组里面的两个 Promise 对象。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"results"}),"的每个成员是一个对象，对象的格式是固定的，对应异步操作的结果。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 异步操作成功时\n{status: 'fulfilled', value: value}\n\n// 异步操作失败时\n{status: 'rejected', reason: reason}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["成员对象的",(0,s.jsx)(n.code,{children:"status"}),"属性的值只可能是字符串",(0,s.jsx)(n.code,{children:"fulfilled"}),"或字符串",(0,s.jsx)(n.code,{children:"rejected"}),"，用来区分异步操作是成功还是失败。如果是成功（",(0,s.jsx)(n.code,{children:"fulfilled"}),"），对象会有",(0,s.jsx)(n.code,{children:"value"}),"属性，如果是失败（",(0,s.jsx)(n.code,{children:"rejected"}),"），会有",(0,s.jsx)(n.code,{children:"reason"}),"属性，对应两种状态时前面异步操作的返回值。"]}),"\n",(0,s.jsx)(n.p,{children:"下面是返回值的用法例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const promises = [ fetch('index.html'), fetch('https://does-not-exist/') ];\nconst results = await Promise.allSettled(promises);\n\n// 过滤出成功的请求\nconst successfulPromises = results.filter(p => p.status === 'fulfilled');\n\n// 过滤出失败的请求，并输出原因\nconst errors = results\n  .filter(p => p.status === 'rejected')\n  .map(p => p.reason);\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"promiseany",children:["Promise.any()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseany",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ES2021 引入了",(0,s.jsxs)(n.a,{href:"https://github.com/tc39/proposal-promise-any",target:"_blank",rel:"noopener noreferrer",children:[(0,s.jsx)(n.code,{children:"Promise.any()"}),"方法"]}),"。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Promise.any([\n  fetch('https://v8.dev/').then(() => 'home'),\n  fetch('https://v8.dev/blog').then(() => 'blog'),\n  fetch('https://v8.dev/docs').then(() => 'docs')\n]).then((first) => {  // 只要有一个 fetch() 请求成功\n  console.log(first);\n}).catch((error) => { // 所有三个 fetch() 全部请求失败\n  console.log(error);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["只要参数实例有一个变成",(0,s.jsx)(n.code,{children:"fulfilled"}),"状态，包装实例就会变成",(0,s.jsx)(n.code,{children:"fulfilled"}),"状态；如果所有参数实例都变成",(0,s.jsx)(n.code,{children:"rejected"}),"状态，包装实例就会变成",(0,s.jsx)(n.code,{children:"rejected"}),"状态。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.any()"}),"跟",(0,s.jsx)(n.code,{children:"Promise.race()"}),"方法很像，只有一点不同，就是",(0,s.jsx)(n.code,{children:"Promise.any()"}),"不会因为某个 Promise 变成",(0,s.jsx)(n.code,{children:"rejected"}),"状态而结束，必须等到所有参数 Promise 变成",(0,s.jsx)(n.code,{children:"rejected"}),"状态才会结束。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面是",(0,s.jsx)(n.code,{children:"Promise()"}),"与",(0,s.jsx)(n.code,{children:"await"}),"命令结合使用的例子。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const promises = [\n  fetch('/endpoint-a').then(() => 'a'),\n  fetch('/endpoint-b').then(() => 'b'),\n  fetch('/endpoint-c').then(() => 'c'),\n];\n\ntry {\n  const first = await Promise.any(promises);\n  console.log(first);\n} catch (error) {\n  console.log(error);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Promise.any()"}),"方法的参数数组包含三个 Promise 操作。其中只要有一个变成",(0,s.jsx)(n.code,{children:"fulfilled"}),"，",(0,s.jsx)(n.code,{children:"Promise.any()"}),"返回的 Promise 对象就变成",(0,s.jsx)(n.code,{children:"fulfilled"}),"。如果所有三个操作都变成",(0,s.jsx)(n.code,{children:"rejected"}),"，那么",(0,s.jsx)(n.code,{children:"await"}),"命令就会抛出错误。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.any()"}),"抛出的错误是一个 AggregateError 实例（详见《对象的扩展》一章），这个 AggregateError 实例对象的",(0,s.jsx)(n.code,{children:"errors"}),"属性是一个数组，包含了所有成员的错误。"]}),"\n",(0,s.jsx)(n.p,{children:"下面是一个例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var resolved = Promise.resolve(42);\nvar rejected = Promise.reject(-1);\nvar alsoRejected = Promise.reject(Infinity);\n\nPromise.any([resolved, rejected, alsoRejected]).then(function (result) {\n  console.log(result); // 42\n});\n\nPromise.any([rejected, alsoRejected]).catch(function (results) {\n  console.log(results instanceof AggregateError); // true\n  console.log(results.errors); // [-1, Infinity]\n});\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"promiseresolve",children:["Promise.resolve()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promiseresolve",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["有时需要将现有对象转为 Promise 对象，",(0,s.jsx)(n.code,{children:"Promise.resolve()"}),"方法就起到这个作用。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const jsPromise = Promise.resolve($.ajax('/whatever.json'));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码将 jQuery 生成的",(0,s.jsx)(n.code,{children:"deferred"}),"对象，转为一个新的 Promise 对象。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.resolve()"}),"等价于下面的写法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Promise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.resolve()"}),"方法的参数分成四种情况。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（1）参数是一个 Promise 实例"})}),"\n",(0,s.jsxs)(n.p,{children:["如果参数是 Promise 实例，那么",(0,s.jsx)(n.code,{children:"Promise.resolve"}),"将不做任何修改、原封不动地返回这个实例。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["（2）参数是一个",(0,s.jsx)(n.code,{children:"thenable"}),"对象"]})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"thenable"}),"对象指的是具有",(0,s.jsx)(n.code,{children:"then"}),"方法的对象，比如下面这个对象。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.resolve()"}),"方法会将这个对象转为 Promise 对象，然后就立即执行",(0,s.jsx)(n.code,{children:"thenable"}),"对象的",(0,s.jsx)(n.code,{children:"then()"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n\nlet p1 = Promise.resolve(thenable);\np1.then(function (value) {\n  console.log(value);  // 42\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"thenable"}),"对象的",(0,s.jsx)(n.code,{children:"then()"}),"方法执行后，对象",(0,s.jsx)(n.code,{children:"p1"}),"的状态就变为",(0,s.jsx)(n.code,{children:"resolved"}),"，从而立即执行最后那个",(0,s.jsx)(n.code,{children:"then()"}),"方法指定的回调函数，输出42。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["（3）参数不是具有",(0,s.jsx)(n.code,{children:"then()"}),"方法的对象，或根本就不是对象"]})}),"\n",(0,s.jsxs)(n.p,{children:["如果参数是一个原始值，或者是一个不具有",(0,s.jsx)(n.code,{children:"then()"}),"方法的对象，则",(0,s.jsx)(n.code,{children:"Promise.resolve()"}),"方法返回一个新的 Promise 对象，状态为",(0,s.jsx)(n.code,{children:"resolved"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const p = Promise.resolve('Hello');\n\np.then(function (s) {\n  console.log(s)\n});\n// Hello\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码生成一个新的 Promise 对象的实例",(0,s.jsx)(n.code,{children:"p"}),"。由于字符串",(0,s.jsx)(n.code,{children:"Hello"}),"不属于异步操作（判断方法是字符串对象不具有 then 方法），返回 Promise 实例的状态从一生成就是",(0,s.jsx)(n.code,{children:"resolved"}),"，所以回调函数会立即执行。",(0,s.jsx)(n.code,{children:"Promise.resolve()"}),"方法的参数，会同时传给回调函数。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（4）不带有任何参数"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.resolve()"}),"方法允许调用时不带参数，直接返回一个",(0,s.jsx)(n.code,{children:"resolved"}),"状态的 Promise 对象。"]}),"\n",(0,s.jsxs)(n.p,{children:["所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用",(0,s.jsx)(n.code,{children:"Promise.resolve()"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const p = Promise.resolve();\n\np.then(function () {\n  // ...\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码的变量",(0,s.jsx)(n.code,{children:"p"}),"就是一个 Promise 对象。"]}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的是，立即",(0,s.jsx)(n.code,{children:"resolve()"}),"的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"setTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"setTimeout(fn, 0)"}),"在下一轮“事件循环”开始时执行，",(0,s.jsx)(n.code,{children:"Promise.resolve()"}),"在本轮“事件循环”结束时执行，",(0,s.jsx)(n.code,{children:"console.log('one')"}),"则是立即执行，因此最先输出。"]}),"\n",(0,s.jsxs)(n.h2,{id:"promisereject",children:["Promise.reject()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promisereject",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.reject(reason)"}),"方法也会返回一个新的 Promise 实例，该实例的状态为",(0,s.jsx)(n.code,{children:"rejected"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const p = Promise.reject('出错了');\n// 等同于\nconst p = new Promise((resolve, reject) => reject('出错了'))\n\np.then(null, function (s) {\n  console.log(s)\n});\n// 出错了\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码生成一个 Promise 对象的实例",(0,s.jsx)(n.code,{children:"p"}),"，状态为",(0,s.jsx)(n.code,{children:"rejected"}),"，回调函数会立即执行。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise.reject()"}),"方法的参数，会原封不动地作为",(0,s.jsx)(n.code,{children:"reject"}),"的理由，变成后续方法的参数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Promise.reject('出错了')\n.catch(e => {\n  console.log(e === '出错了')\n})\n// true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Promise.reject()"}),"方法的参数是一个字符串，后面",(0,s.jsx)(n.code,{children:"catch()"}),"方法的参数",(0,s.jsx)(n.code,{children:"e"}),"就是这个字符串。"]}),"\n",(0,s.jsxs)(n.h2,{id:"应用",children:["应用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#应用",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"加载图片",children:["加载图片",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#加载图片",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以将图片的加载写成一个",(0,s.jsx)(n.code,{children:"Promise"}),"，一旦加载完成，",(0,s.jsx)(n.code,{children:"Promise"}),"的状态就发生变化。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    const image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"generator-函数与-promise-的结合",children:["Generator 函数与 Promise 的结合",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#generator-函数与-promise-的结合",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["使用 Generator 函数管理流程，遇到异步操作的时候，通常返回一个",(0,s.jsx)(n.code,{children:"Promise"}),"对象。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function getFoo () {\n  return new Promise(function (resolve, reject){\n    resolve('foo');\n  });\n}\n\nconst g = function* () {\n  try {\n    const foo = yield getFoo();\n    console.log(foo);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nfunction run (generator) {\n  const it = generator();\n\n  function go(result) {\n    if (result.done) return result.value;\n\n    return result.value.then(function (value) {\n      return go(it.next(value));\n    }, function (error) {\n      return go(it.throw(error));\n    });\n  }\n\n  go(it.next());\n}\n\nrun(g);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码的 Generator 函数",(0,s.jsx)(n.code,{children:"g"}),"之中，有一个异步操作",(0,s.jsx)(n.code,{children:"getFoo"}),"，它返回的就是一个",(0,s.jsx)(n.code,{children:"Promise"}),"对象。函数",(0,s.jsx)(n.code,{children:"run"}),"用来处理这个",(0,s.jsx)(n.code,{children:"Promise"}),"对象，并调用下一个",(0,s.jsx)(n.code,{children:"next"}),"方法。"]}),"\n",(0,s.jsxs)(n.h2,{id:"promisetry",children:["Promise.try()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promisetry",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["实际开发中，经常遇到一种情况：不知道或者不想区分，函数",(0,s.jsx)(n.code,{children:"f"}),"是同步函数还是异步操作，但是想用 Promise 来处理它。因为这样就可以不管",(0,s.jsx)(n.code,{children:"f"}),"是否包含异步操作，都用",(0,s.jsx)(n.code,{children:"then"}),"方法指定下一步流程，用",(0,s.jsx)(n.code,{children:"catch"}),"方法处理",(0,s.jsx)(n.code,{children:"f"}),"抛出的错误。一般就会采用下面的写法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Promise.resolve().then(f)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面的写法有一个缺点，就是如果",(0,s.jsx)(n.code,{children:"f"}),"是同步函数，那么它会在本轮事件循环的末尾执行。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const f = () => console.log('now');\nPromise.resolve().then(f);\nconsole.log('next');\n// next\n// now\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，函数",(0,s.jsx)(n.code,{children:"f"}),"是同步的，但是用 Promise 包装了以后，就变成异步执行了。"]}),"\n",(0,s.jsxs)(n.p,{children:["那么有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API 呢？回答是可以的，并且还有两种写法。第一种写法是用",(0,s.jsx)(n.code,{children:"async"}),"函数来写。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const f = () => console.log('now');\n(async () => f())();\nconsole.log('next');\n// now\n// next\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，第二行是一个立即执行的匿名函数，会立即执行里面的",(0,s.jsx)(n.code,{children:"async"}),"函数，因此如果",(0,s.jsx)(n.code,{children:"f"}),"是同步的，就会得到同步的结果；如果",(0,s.jsx)(n.code,{children:"f"}),"是异步的，就可以用",(0,s.jsx)(n.code,{children:"then"}),"指定下一步，就像下面的写法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"(async () => f())()\n.then(...)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的是，",(0,s.jsx)(n.code,{children:"async () => f()"}),"会吃掉",(0,s.jsx)(n.code,{children:"f()"}),"抛出的错误。所以，如果想捕获错误，要使用",(0,s.jsx)(n.code,{children:"promise.catch"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"(async () => f())()\n.then(...)\n.catch(...)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["第二种写法是使用",(0,s.jsx)(n.code,{children:"new Promise()"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const f = () => console.log('now');\n(\n  () => new Promise(\n    resolve => resolve(f())\n  )\n)();\nconsole.log('next');\n// now\n// next\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码也是使用立即执行的匿名函数，执行",(0,s.jsx)(n.code,{children:"new Promise()"}),"。这种情况下，同步函数也是同步执行的。"]}),"\n",(0,s.jsxs)(n.p,{children:["鉴于这是一个很常见的需求，所以现在有一个",(0,s.jsx)(n.a,{href:"https://github.com/ljharb/proposal-promise-try",target:"_blank",rel:"noopener noreferrer",children:"提案"}),"，提供",(0,s.jsx)(n.code,{children:"Promise.try"}),"方法替代上面的写法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const f = () => console.log('now');\nPromise.try(f);\nconsole.log('next');\n// now\n// next\n"})}),"\n",(0,s.jsxs)(n.p,{children:["事实上，",(0,s.jsx)(n.code,{children:"Promise.try"}),"存在已久，Promise 库",(0,s.jsx)(n.a,{href:"http://bluebirdjs.com/docs/api/promise.try.html",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"Bluebird"})}),"、",(0,s.jsx)(n.a,{href:"https://github.com/kriskowal/q/wiki/API-Reference#promisefcallargs",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"Q"})}),"和",(0,s.jsx)(n.a,{href:"https://github.com/cujojs/when/blob/master/docs/api.md#whentry",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"when"})}),"，早就提供了这个方法。"]}),"\n",(0,s.jsxs)(n.p,{children:["由于",(0,s.jsx)(n.code,{children:"Promise.try"}),"为所有操作提供了统一的处理机制，所以如果想用",(0,s.jsx)(n.code,{children:"then"}),"方法管理流程，最好都用",(0,s.jsx)(n.code,{children:"Promise.try"}),"包装一下。这样有",(0,s.jsx)(n.a,{href:"http://cryto.net/~joepie91/blog/2016/05/11/what-is-promise-try-and-why-does-it-matter/",target:"_blank",rel:"noopener noreferrer",children:"许多好处"}),"，其中一点就是可以更好地管理异常。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function getUsername(userId) {\n  return database.users.get({id: userId})\n  .then(function(user) {\n    return user.name;\n  });\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"database.users.get()"}),"返回一个 Promise 对象，如果抛出异步错误，可以用",(0,s.jsx)(n.code,{children:"catch"}),"方法捕获，就像下面这样写。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"database.users.get({id: userId})\n.then(...)\n.catch(...)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["但是",(0,s.jsx)(n.code,{children:"database.users.get()"}),"可能还会抛出同步错误（比如数据库连接错误，具体要看实现方法），这时你就不得不用",(0,s.jsx)(n.code,{children:"try...catch"}),"去捕获。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"try {\n  database.users.get({id: userId})\n  .then(...)\n  .catch(...)\n} catch (e) {\n  // ...\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面这样的写法就很笨拙了，这时就可以统一用",(0,s.jsx)(n.code,{children:"promise.catch()"}),"捕获所有同步和异步的错误。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Promise.try(() => database.users.get({id: userId}))\n  .then(...)\n  .catch(...)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["事实上，",(0,s.jsx)(n.code,{children:"Promise.try"}),"就是模拟",(0,s.jsx)(n.code,{children:"try"}),"代码块，就像",(0,s.jsx)(n.code,{children:"promise.catch"}),"模拟的是",(0,s.jsx)(n.code,{children:"catch"}),"代码块。"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}let i=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F17.Promise%20%E5%AF%B9%E8%B1%A1.md"]={toc:[{text:"Promise 的含义",id:"promise-的含义",depth:2},{text:"基本用法",id:"基本用法",depth:2},{text:"Promise.prototype.then()",id:"promiseprototypethen",depth:2},{text:"Promise.prototype.catch()",id:"promiseprototypecatch",depth:2},{text:"Promise.prototype.finally()",id:"promiseprototypefinally",depth:2},{text:"Promise.all()",id:"promiseall",depth:2},{text:"Promise.race()",id:"promiserace",depth:2},{text:"Promise.allSettled()",id:"promiseallsettled",depth:2},{text:"Promise.any()",id:"promiseany",depth:2},{text:"Promise.resolve()",id:"promiseresolve",depth:2},{text:"Promise.reject()",id:"promisereject",depth:2},{text:"应用",id:"应用",depth:2},{text:"加载图片",id:"加载图片",depth:3},{text:"Generator 函数与 Promise 的结合",id:"generator-函数与-promise-的结合",depth:3},{text:"Promise.try()",id:"promisetry",depth:2}],title:"17.Promise 对象",headingTitle:"17.Promise 对象",frontmatter:{}}}}]);