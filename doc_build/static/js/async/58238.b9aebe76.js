"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["58238"],{876784:function(e,n,l){l.r(n),l.d(n,{default:()=>h});var s=l(552676),r=l(740453);let i=l.p+"static/image/2bd2e2a8a1549c3c7a3811ab4e36d05d.383a1e2d.png",a=l.p+"static/image/bb1f9f5ff02b002874599be4684704a8.b8a79234.png",c=l.p+"static/image/116ecaf9ccc7f6df85b5c586f9da46e0.eae66674.png",d=l.p+"static/image/0e8badc108675b61e3aa297ab5b7e5b2.b26623d4.png";function o(e){let n=Object.assign({p:"p",blockquote:"blockquote",h2:"h2",a:"a",img:"img",pre:"pre",code:"code",ul:"ul",li:"li",h3:"h3"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"在 Chrome 浏览器的 Blink 渲染引擎中，通过嵌入 V8 来实现 JS 的解释执行。本课程主要讲解如何在 C++ 应用中嵌入 V8。为了掌握 V8 源码的编译和使用，首先需要了解 C++ 的基础知识，因此本课程还会讲解 C++ 的编译以及如何制作和使用 C++ 库。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：如果你是 Windows 使用者，那么以下示例需要额外寻找 Windows 对应的编译工具。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"c-编译工具",children:["C++ 编译工具",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#c-编译工具",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"JavaScript 是一门动态语言，而 C++ 是一门静态语言。JavaScript 可以直接在浏览器中解释执行和 JIT 动态编译，编译时和运行时不分离。C++ 则需要先通过编译器进行编译，编译成可执行文件后才能运行，如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["为了输出最终的可执行文件，C++ 需要使用相应的编译工具进行编译。在 Mac 上默认自带了 C++ 的编译工具 ",(0,s.jsx)(n.a,{href:"https://clang.llvm.org/",target:"_blank",rel:"noopener noreferrer",children:"Clang"}),"，通过以下命令可以查看是否已经支持："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"g++ -v\ngcc -v\nclang -v\nclang++ -v\nc++ -v\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：感兴趣的同学可以了解一下什么是 ",(0,s.jsx)(n.a,{href:"https://gcc.gnu.org/",target:"_blank",rel:"noopener noreferrer",children:"GCC"})," 、gcc 、g++ 、为什么 Apple 需要自研 clang 编译器、",(0,s.jsx)(n.a,{href:"https://clang.llvm.org/get_started.html",target:"_blank",rel:"noopener noreferrer",children:"clang"})," 和 ",(0,s.jsx)(n.a,{href:"https://llvm.org/",target:"_blank",rel:"noopener noreferrer",children:"LLVM"})," 有什么联系。推荐阅读 ",(0,s.jsx)(n.a,{href:"https://www.alibabacloud.com/blog/gcc-vs--clangllvm-an-in-depth-comparison-of-cc%2B%2B-compilers_595309",target:"_blank",rel:"noopener noreferrer",children:"GCC vs. Clang/LLVM: An In-Depth Comparison of C/C++ Compilers"}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"如果有详细的信息输出，则说明当前电脑已经具备该编译器，例如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Apple clang version 13.1.6 (clang-1316.0.21.2.5)\nTarget: x86_64-apple-darwin21.2.0\nThread model: posix\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\n"})}),"\n",(0,s.jsxs)(n.p,{children:["也可以进入 Mac 电脑的 ",(0,s.jsx)(n.code,{children:"/Library/Developer/CommandLineTools/usr/bin"})," 目录查看有哪些编译工具："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"gcc（clang 别名）"}),"\n",(0,s.jsx)(n.li,{children:"g++（clang++ 别名）"}),"\n",(0,s.jsx)(n.li,{children:"clang"}),"\n",(0,s.jsx)(n.li,{children:"clang++"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：如果通过常规途径安装 ",(0,s.jsx)(n.a,{href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer",children:"Homebrew"})," ，则会自动安装 XCode 的 Command Line Tools 工具从而间接获得 Clang。如果你觉得 XCode 太大，则可以通过 ",(0,s.jsx)(n.code,{children:"xcode-select --install"}),"命令进行 Command Line Tools 工具的快速安装。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"编译-c",children:["编译 C++",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译-c",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在了解 C++ 的编译工具之后，可以尝试使用编译工具编译下述 C++ 示例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// hello.cpp\n\n// 引入 c++ 标准库\n// include 可以简单理解为 Web 前端 ES6 中的 import\n#include <iostream>\n\n// main() 是 c++ 程序入口\nint main() {\n    int a = 1;\n    int b = 2;\n    // cout 是 std 命名空间下的对象，用于标准输出\n    // 简单理解为 Web 前端中的 console.log(a+b)\n    std::cout << a+b <<  std::endl;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"使用 g++ 编译工具进行源代码编译，如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 50.原理进阶：V8 的嵌入实践\ng++ hello.cpp -o hello\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：查看",(0,s.jsx)(n.a,{href:"http://www.shanghai.ws/gnu/gcc_1.htm",target:"_blank",rel:"noopener noreferrer",children:" GNU GCC 手册1"})," 了解更多 ",(0,s.jsx)(n.code,{children:"g++"})," 的编译参数。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["上述编译命令将 ",(0,s.jsx)(n.code,{children:"hello.cpp"})," 编译成 ",(0,s.jsx)(n.code,{children:"hello"})," 可执行文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 执行\n./hello\n\n# 输出结果\n3\n"})}),"\n",(0,s.jsx)(n.p,{children:"需要注意使用 g++ 编译工具（将 gcc 默认语言设为 C++ 的特殊版本）默认会链接到 C++ 标准库，如果使用 gcc 编译工具编译 C++ ，则需要指定链接的 C++ 标准库，如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# -lstdc++ 表明链接到 c++ 标准库\n# -lstdc++11 则表明链接到 c++11 的标准库\n# -l 是 gcc 的链接参数\ngcc hello.cpp -lstdc++ -o hello\n"})}),"\n",(0,s.jsxs)(n.p,{children:["其中 ",(0,s.jsx)(n.code,{children:"-l"})," 参数除了可以链接到 C++ 标准库，也可以链接到开发者自定义的库。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：在 Web 前端的 TypeScript 开发中，可以通过在 ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," 中设置 ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/tsconfig#lib",target:"_blank",rel:"noopener noreferrer",children:"lib"})," 字段来指定支持的 JavaScript 标准（例如 ES5、ES2015、ES6 和 ES7 等）。在 C++ 的开发中，gcc 编译器可以通过设置 ",(0,s.jsx)(n.code,{children:"-l"})," 参数来指定支持的 C++ 标准库，g++ 编译器则可以通过设置 ",(0,s.jsx)(n.code,{children:"-std"})," 参数来指定 C++ 标准。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"制作和使用-c-库",children:["制作和使用 C++ 库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#制作和使用-c-库",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：示例源码可以从 embed-v8 的\xa0",(0,s.jsx)(n.a,{href:"https://github.com/ziyi2/embed-v8/tree/demo/lib",target:"_blank",rel:"noopener noreferrer",children:"demo/lib"}),"\xa0分支获取。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"在 Web 前端的开发中，我们经常会发布通用的工具库和组件库，并在项目中通过 NPM 包管理工具进行安装和使用。在 C++ 的开发中也可以将通用的代码制作成库供其他开发者引入复用，粗略的流程如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"接下来演示如何制作 C++ 库，项目的结构如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"├── lib             # 库源码\n│   ├── add.cpp        \n│   └── add.h\n└── main.cpp        # 应用源码\n"})}),"\n",(0,s.jsxs)(n.p,{children:["其中 ",(0,s.jsx)(n.code,{children:"lib"})," 目录是需要制作的库源码，主要实现一个 ",(0,s.jsx)(n.code,{children:"add"})," 函数："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// add.h\n\n// 用于防止被多次 include，类似于 #pragma once\n#ifndef _LIB_H\n#define _LIB_H\n\n// 类似于 TypeScript 里的函数声明\nint add(int a, int b);\n\n#endif\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'// add.cpp\n\n#include "add.h"\n\n// lib.h 中的函数声明对应的函数实现\nint add(int a, int b) {\n    return a + b;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["接下来重点讲解如何将 ",(0,s.jsx)(n.code,{children:"lib"})," 目录下的 ",(0,s.jsx)(n.code,{children:"add.cpp"})," 制作成静态库或者动态库，并可以在应用程序集 ",(0,s.jsx)(n.code,{children:"main.cpp"})," 中引入使用。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：在引入 V8 时也是类似的步骤，首先需要将 V8 源码编译成可被复用的静态库或者动态库。关于静态库和动态库，在 Web 前端的概念中可以简单类比成发布 NPM 包和发布 CDN （可能这个比喻不是特别恰当），感兴趣的同学可以自行查阅两者的区别。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"静态库",children:["静态库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静态库",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["为了将 ",(0,s.jsx)(n.code,{children:"lib"})," 下的 ",(0,s.jsx)(n.code,{children:"add.cpp"})," 制作成静态库，首先需要编译成 ",(0,s.jsx)(n.code,{children:".o"})," 后缀的目标文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 进入 lib 所在目录\ncd lib\n# 执行编译\ng++ -c add.cpp\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后通过 ar 工具生成 ",(0,s.jsx)(n.code,{children:".a"})," 为后缀的静态库文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ar -crv libadd.a add.o\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"libadd.a"})," 是生成的静态库文件，此时的目录如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"├── lib            # 库源码\n│   ├── add.cpp        \n│   ├── add.h\n│   ├── add.o\n│   └── libadd.a   # 静态库\n└── main.cpp       # 应用源码\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"main.cpp"})," 中通过引入 ",(0,s.jsx)(n.code,{children:"add.h"})," 来识别库中声明的 ",(0,s.jsx)(n.code,{children:"add"})," 函数："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'#include <iostream>\n\n// 引入库对应的头文件，在 TypeScript 中你可以理解为识别声明文件\n// 注意 add.h 在 lib 目录下，默认情况下是找不到该头文件的，需要在编译时指定 -I 参数\n#include "add.h"\n\nint main() {\n    std::cout  << add(1,2) << std::endl;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["接着编译 ",(0,s.jsx)(n.code,{children:"main.cpp"}),"并链接静态库 ",(0,s.jsx)(n.code,{children:"libadd.a"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 回退到 main.cpp 所在目录\ncd ..\n# 执行编译链接\n# -I：指定头文件的搜索目录，默认会优先从 -I 指定的目录开始搜索头文件\n# -L：指定静态库的搜索目录\n# -l：指定链接的静态库，-ladd 会链接 libadd.a 静态库，-l 可以省略 lib 前缀和 .a 后缀\ng++ main.cpp -Ilib -Llib -ladd -o main\n# 执行\n./main\n# 输出结果\n3\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"动态库",children:["动态库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动态库",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["动态库的制作和静态库类似，首先需要编译成 ",(0,s.jsx)(n.code,{children:".o"})," 后缀的目标文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 进入 lib 所在目录\ncd lib\n\n# 执行编译\n# -fPIC：要求编译生成与绝对地址无关的程序\ng++ -fPIC -c add.cpp\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后生成 ",(0,s.jsx)(n.code,{children:".so"})," 为后缀的动态库："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# -shared：指定生成动态链接库\ng++ -shared -o libadd.so add.o\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：不同的操作系统的动态库后缀不同，例如 Windows 的",(0,s.jsx)(n.code,{children:".dll"}),"、Linux 的 ",(0,s.jsx)(n.code,{children:".so"})," 和 Mac 的",(0,s.jsx)(n.code,{children:".dylib"}),"。感兴趣的同学可以了解一下为什么在 Mac 上能支持 ",(0,s.jsx)(n.code,{children:".so"})," 后缀的动态库。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["接着编译 ",(0,s.jsx)(n.code,{children:"main.cpp"})," 并链接动态库 ",(0,s.jsx)(n.code,{children:"libadd.so"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 回退到 main.cpp 所在目录\ncd ..\n# 执行编译链接\n# -l：指定链接的动态库，-ladd 会链接 libadd.so 动态库\ng++ main.cpp -Ilib -Llib -ladd -o main\n# 执行\n./main\n"})}),"\n",(0,s.jsxs)(n.p,{children:["可以成功编译 ",(0,s.jsx)(n.code,{children:"main"})," 可执行文件，但是运行报错："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dyld[1605]: Library not loaded: libadd.so\n  Referenced from: /Users/xxx/Desktop/xxx/embed-v8/main\n  Reason: tried: 'libadd.so' (no such file), '/usr/local/lib/libadd.so' (no such file), '/usr/lib/libadd.so' (no such file), '/Users/xxx/Desktop/xxx/embed-v8/libadd.so' (no such file), '/usr/local/lib/libadd.so' (no such file), '/usr/lib/libadd.so' (no such file)\nAbort trap: 6\n"})}),"\n",(0,s.jsx)(n.p,{children:"上述报错说明没有找到被链接的动态库地址，同时错误信息提示了寻找动态库地址的规则："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"'/usr/local/lib/libadd.so'\n'/usr/lib/libadd.so'\n# 猜测为 main.cpp 可执行文件所在的目录\n'/Users/xxx/Desktop/xxx/embed-v8/libadd.so'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["将 ",(0,s.jsx)(n.code,{children:"lib/libadd.so"})," 复制到 ",(0,s.jsx)(n.code,{children:"main.cpp"})," 所在的目录，并重新执行："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 拷贝\ncp lib/libadd.so libadd.so\n# 执行\n./main\n# 输出结果\n3\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"v8-静态库编译",children:["V8 静态库编译",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#v8-静态库编译",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["上述静态库和动态库的制作非常简单，是因为 ",(0,s.jsx)(n.code,{children:"lib"})," 目录只有一个 ",(0,s.jsx)(n.code,{children:"add.cpp"})," 源文件，而 V8 的源码包含多个目录多个源文件，只使用简单的 ",(0,s.jsx)(n.code,{children:"g++"})," 编译工具已经不能满足编译诉求。在 V8 中主要通过 ",(0,s.jsx)(n.a,{href:"https://gn.googlesource.com/gn/",target:"_blank",rel:"noopener noreferrer",children:"GN"})," 构建套件来完成 V8 源代码的编译工作，接下来将使用 GN 工具并参考官方文档实现 V8 源码的下载、静态库编译和使用。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：如果熟悉 TypeScript 开发，可以将 ",(0,s.jsx)(n.code,{children:"g++"})," 简单比作 ",(0,s.jsx)(n.code,{children:"tsc"})," 转译编译器，将 GN 简单比作 ",(0,s.jsx)(n.code,{children:"Webpack"})," 或者 ",(0,s.jsx)(n.code,{children:"ESBuild"})," 等编译套件，在项目的 TypeScript 文件较多时，使用单条 ",(0,s.jsx)(n.code,{children:"tsc"})," 编译命令很难满足编译诉求。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在 V8 官方文档的 ",(0,s.jsx)(n.a,{href:"http://v8.js.cn/docs/embed/",target:"_blank",rel:"noopener noreferrer",children:"Getting started with embedding V8"})," 中给出了编译 V8 源代码以及运行 V8 嵌入示例 ",(0,s.jsx)(n.a,{href:"https://chromium.googlesource.com/v8/v8/+/branch-heads/6.8/samples/hello-world.cc",target:"_blank",rel:"noopener noreferrer",children:"Hello World"})," 的详细步骤，主要分为以下几步："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"下载-xcode",children:["下载 XCode",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#下载-xcode",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["V8 的官方文档 ",(0,s.jsx)(n.a,{href:"http://v8.js.cn/docs/embed/",target:"_blank",rel:"noopener noreferrer",children:"Getting started with embedding V8"})," 没有指明安装 V8 的编译依赖 Xcode ，如果不安装那么尝试编译 V8 时会报错，并且该错误没有明确指向 Xcode："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 使用 python 脚本生成 ninja 的构建配置（先不用理解该命令的作用）\ntools/dev/v8gen.py x64.release.sample\n\n# 打印错误信息\nHint: You can raise verbosity (-vv) to see the output of failed commands.\n\nTraceback (most recent call last):\n  File \"tools/dev/v8gen.py\", line 309, in <module>\n    sys.exit(gen.main())\n  File \"tools/dev/v8gen.py\", line 303, in main\n    return self._options.func()\n  File \"tools/dev/v8gen.py\", line 162, in cmd_gen\n    self._call_cmd([\n  File \"tools/dev/v8gen.py\", line 211, in _call_cmd\n    output = subprocess.check_output(\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/subprocess.py\", line 415, in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/subprocess.py\", line 516, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['/Library/Developer/CommandLineTools/usr/bin/python3', '-u', 'tools/mb/mb.py', 'gen', '-f', 'infra/mb/mb_config.pyl', '-m', 'developer_default', '-b', 'x64.release.sample', 'out.gn/x64.release.sample']' returned non-zero exit status 1.\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：如果使用官方的一键编译命令 ",(0,s.jsx)(n.code,{children:"tools/dev/gm.py x64.release"})," 则会明确看到关于 Xcode 的相关的错误信息。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在",(0,s.jsx)(n.a,{href:"http://v8.js.cn/docs/build/",target:"_blank",rel:"noopener noreferrer",children:"构建 V8 源码"}),"中明确指出需要安装 Xcode，本质上是依赖了 Xcode 的 CommandLineTools 工具集，该工具集具备跨平台编译的能力。需要注意在下载 Xcode 之前如果安装了 Homebrew，该工具也会自动安装 CommandLineTools 工具集，恰好作者在下载之前安装了 Homebrew，可以通过 Xcode 的工具命令查看工具集所在位置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# xcode-select 可以查看当前系统活跃的 CommandLineTools 路径\nxcode-select --print-path\n# 打印\n/Library/Developer/CommandLineTools\n"})}),"\n",(0,s.jsx)(n.p,{children:"如果发现目录如上所示，则需要先删除该工具："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 删除当前系统活跃的 CommandLineTools 工具地址\nsudo rm -rf /Library/Developer/CommandLineTools\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后通过 App Store 安装 Xcode，安装的过程是非常缓慢的，如果你想查看安装的进度，可以通过 Mac 控制台查看 App Store 的安装进度。如果已经安装了 Xcode，但是发现地址为 ",(0,s.jsx)(n.code,{children:"/Library/Developer/CommandLineTools"}),"，那么可以通过如下设置进行更改："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"下载-depot_tools",children:["下载 depot_tools",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#下载-depot_tools",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["下载 V8 源码需要依赖官方指定的 ",(0,s.jsx)(n.a,{href:"https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up",target:"_blank",rel:"noopener noreferrer",children:"depot_tools"})," 工具，打开命令终端并寻找合适的位置克隆 depot_tools："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 需要科学上网\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\n"})}),"\n",(0,s.jsxs)(n.p,{children:["克隆之后内部有大量的可执行命令，因此需要将 ",(0,s.jsx)(n.code,{children:"depot_tools"})," 目录添加到 Mac 终端的系统环境变量，方便后续可以通过终端直接访问 depot_tools 内部的命令："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:" export PATH=/path/to/depot_tools:$PATH\n"})}),"\n",(0,s.jsxs)(n.p,{children:["需要注意 ",(0,s.jsx)(n.code,{children:"/path/to/depot_tools"})," 是指",(0,s.jsx)(n.code,{children:"depot_tools"}),"的完整路径，例如本机路径："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export PATH=/Users/zhuxiankang/Desktop/ziyi/depot_tools:$PATH\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果使用不高频，则可以在每次打开终端的时候执行上述命令进行临时的环境变量添加，如果想永久使得 ",(0,s.jsx)(n.code,{children:"depot_tools"})," 目录内的可执行命令在终端生效，可以将上述命令添加到 ",(0,s.jsx)(n.code,{children:"~/.bashrc"})," 或者 ",(0,s.jsx)(n.code,{children:"~/.zshrc"})," 中，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 本机默认使用 zsh\n# 进入 ~ 目录\ncd ~\n# 查看所有文件目录\nls -al\n# 如果发现有 .zshrc 则可以直接打开并修改\nopen .zshrc\n# 如果没有 .zshrc，则可以使用 vim 进行添加，需要熟悉一下 vim 的编辑和保存操作\nvim .zshrc\n# 修改后执行，使得环境变量生效\nsource ~/.zhsrc\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["接下来可以尝试 ",(0,s.jsx)(n.code,{children:"depot_tools"})," 内部的命令 ",(0,s.jsx)(n.code,{children:"gclient"}),"，用于更新当前的 ",(0,s.jsx)(n.code,{children:"depot_tools"}),"工具："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gclient\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"下载-v8-源码",children:["下载 V8 源码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#下载-v8-源码",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["下载 ",(0,s.jsx)(n.code,{children:"depot_tools"})," 工具之后，可以使用工具配合 ",(0,s.jsx)(n.a,{href:"http://v8.js.cn/docs/source-code/#using-git",target:"_blank",rel:"noopener noreferrer",children:"Checking out the V8 source code "}),"中指出的步骤下载 V8 源码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 创建目录\nmkdir ~/v8\n# 进入目录\ncd ~/v8\n# 需要科学上网，拉取 v8 源码，时间较长，需要耐心等待\nfetch v8\n# 进入 v8 源码\ncd v8\n# 更新 V8 的仓库信息\ngit pull\n# 更新 V8 的依赖\ngclient sync\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"编译-v8-静态库",children:["编译 V8 静态库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译-v8-静态库",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["V8 源码下载和更新完成后，接下来可以通过 ",(0,s.jsx)(n.a,{href:"http://v8.js.cn/docs/embed/#run-the-example",target:"_blank",rel:"noopener noreferrer",children:"Getting started with embedding V8 / Run the example"})," 中指出的步骤来编译静态库。具体如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 推荐使用最新的版本进行编译，例如这里使用 10.7.75 版本\ngit checkout 10.7.75\n# 使用 python 脚本生成 ninja 的构建配置\ntools/dev/v8gen.py x64.release.sample\n# 使用 ninjia 构建 V8 静态库\nninja -C out.gn/x64.release.sample v8_monolith\n# 以下是打印信息，在 out.gn/x64.release.sample/obj/ 目录下生成 v8 静态库 libv8_monolith.a\nninja: Entering directory `out.gn/x64.release.sample'\n[1830/1830] AR obj/libv8_monolith.a\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：",(0,s.jsx)(n.a,{href:"https://ninja-build.org/",target:"_blank",rel:"noopener noreferrer",children:"ninja"})," 是一个注重构建速度的构建工具，更多构建相关的工具也可以查看 ",(0,s.jsx)(n.a,{href:"https://github.com/ninja-build/ninja/wiki/List-of-generators-producing-ninja-build-files",target:"_blank",rel:"noopener noreferrer",children:"List of generators producing ninja build files"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["也可以通过 ",(0,s.jsx)(n.a,{href:"http://v8.js.cn/docs/build-gn/#manual",target:"_blank",rel:"noopener noreferrer",children:"Building V8 with GN"})," 中给出的步骤进行一键编译："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 推荐使用最新的版本进行编译，例如这里使用 10.7.75 版本\ngit checkout 10.7.75\n# 确保在 v8 源码的根目录，一键编译静态库\ntools/dev/gm.py x64.release \n"})}),"\n",(0,s.jsx)(n.p,{children:"编译完成后的目录结构如下所示（这里只展示静态库相关的目录结构）："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"└── v8                                        # mkdir v8 创建                                        \n    └── v8/                                   # fetch v8 创建的目录\n         ├── include/                         # V8 库的头文件目录\n         ├── out.gn/x64.release.sample/obj/   # 编译的目标目录（静态库在此目录下）        \n         └── samples/                         # 示例代码目录\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"使用-v8-静态库",children:["使用 V8 静态库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-v8-静态库",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["使用官方的示例来链接 V8 静态库，官方",(0,s.jsx)(n.a,{href:"https://github.com/v8/v8/blob/10.7.75/samples/hello-world.cc",target:"_blank",rel:"noopener noreferrer",children:" 10.7.75 版本"})," 的源代码如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'// Copyright 2015 the V8 project authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include "include/libplatform/libplatform.h"\n#include "include/v8-context.h"\n#include "include/v8-initialization.h"\n#include "include/v8-isolate.h"\n#include "include/v8-local-handle.h"\n#include "include/v8-primitive.h"\n#include "include/v8-script.h"\n\nint main(int argc, char* argv[]) {\n  // Initialize V8.\n  v8::V8::InitializeICUDefaultLocation(argv[0]);\n  v8::V8::InitializeExternalStartupData(argv[0]);\n  std::unique_ptr<v8::Platform> platform = v8::platform::NewDefaultPlatform();\n  v8::V8::InitializePlatform(platform.get());\n  v8::V8::Initialize();\n\n  // Create a new Isolate and make it the current one.\n  v8::Isolate::CreateParams create_params;\n  create_params.array_buffer_allocator =\n      v8::ArrayBuffer::Allocator::NewDefaultAllocator();\n  v8::Isolate* isolate = v8::Isolate::New(create_params);\n  {\n    v8::Isolate::Scope isolate_scope(isolate);\n\n    // Create a stack-allocated handle scope.\n    v8::HandleScope handle_scope(isolate);\n\n    // Create a new context.\n    v8::Local<v8::Context> context = v8::Context::New(isolate);\n\n    // Enter the context for compiling and running the hello world script.\n    v8::Context::Scope context_scope(context);\n\n    {\n      // Create a string containing the JavaScript source code.\n      v8::Local<v8::String> source =\n          v8::String::NewFromUtf8Literal(isolate, "\'Hello\' + \', World!\'");\n\n      // Compile the source code.\n      v8::Local<v8::Script> script =\n          v8::Script::Compile(context, source).ToLocalChecked();\n\n      // Run the script to get the result.\n      v8::Local<v8::Value> result = script->Run(context).ToLocalChecked();\n\n      // Convert the result to an UTF8 string and print it.\n      v8::String::Utf8Value utf8(isolate, result);\n      printf("%s\\n", *utf8);\n    }\n\n    {\n      // Use the JavaScript API to generate a WebAssembly module.\n      //\n      // |bytes| contains the binary format for the following module:\n      //\n      //     (func (export "add") (param i32 i32) (result i32)\n      //       get_local 0\n      //       get_local 1\n      //       i32.add)\n      //\n      const char csource[] = R"(\n        let bytes = new Uint8Array([\n          0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x07, 0x01,\n          0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x03, 0x02, 0x01, 0x00, 0x07,\n          0x07, 0x01, 0x03, 0x61, 0x64, 0x64, 0x00, 0x00, 0x0a, 0x09, 0x01,\n          0x07, 0x00, 0x20, 0x00, 0x20, 0x01, 0x6a, 0x0b\n        ]);\n        let module = new WebAssembly.Module(bytes);\n        let instance = new WebAssembly.Instance(module);\n        instance.exports.add(3, 4);\n      )";\n\n      // Create a string containing the JavaScript source code.\n      v8::Local<v8::String> source =\n          v8::String::NewFromUtf8Literal(isolate, csource);\n\n      // Compile the source code.\n      v8::Local<v8::Script> script =\n          v8::Script::Compile(context, source).ToLocalChecked();\n\n      // Run the script to get the result.\n      v8::Local<v8::Value> result = script->Run(context).ToLocalChecked();\n\n      // Convert the result to a uint32 and print it.\n      uint32_t number = result->Uint32Value(context).ToChecked();\n      printf("3 + 4 = %u\\n", number);\n    }\n  }\n\n  // Dispose the isolate and tear down V8.\n  isolate->Dispose();\n  v8::V8::Dispose();\n  v8::V8::DisposePlatform();\n  delete create_params.array_buffer_allocator;\n  return 0;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"使用下述命令链接 V8 静态库："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# -I：搜索 include 目录下的 v8 头文件\n# -l：查找 libv8_monolith 静态库\n# -L：在 out.gn/x64.release.sample/obj/ 下查找静态库\n# -std：使用 c++14 标准 \n# -D：编译宏定义，宏定义 V8_COMPRESS_POINTERS，开启内部的指针压缩代码\n# 编译 samples/hello-world.cc 示例代码，生成 hello_world 二进制可执行文件\ng++ -I. -Iinclude samples/hello-world.cc -o hello_world -lv8_monolith -Lout.gn/x64.release.sample/obj/ -pthread -std=c++14 -DV8_COMPRESS_POINTERS\n"})}),"\n",(0,s.jsx)(n.p,{children:"执行以后报如下错误："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"2022-09-02 17:59:31.211 xcodebuild[790:13724] Requested but did not find extension point with identifier Xcode.IDEKit.ExtensionSentinelHostApplications for extension Xcode.DebuggerFoundation.AppExtensionHosts.watchOS of plug-in com.apple.dt.IDEWatchSupportCore\n2022-09-02 17:59:31.213 xcodebuild[790:13724] Requested but did not find extension point with identifier Xcode.IDEKit.ExtensionPointIdentifierToBundleIdentifier for extension Xcode.DebuggerFoundation.AppExtensionToBundleIdentifierMap.watchOS of plug-in com.apple.dt.IDEWatchSupportCore\nIn file included from samples/hello-world.cc:10:\nIn file included from ./include/v8-context.h:10:\nIn file included from include/v8-data.h:8:\nIn file included from include/v8-local-handle.h:12:\ninclude/v8-internal.h:471:30: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\nSHARED_EXTERNAL_POINTER_TAGS(CHECK_SHARED_EXTERNAL_POINTER_TAGS)\n                             ^\ninclude/v8-internal.h:471:30: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:471:30: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:471:30: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:471:30: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\nPER_ISOLATE_EXTERNAL_POINTER_TAGS(CHECK_NON_SHARED_EXTERNAL_POINTER_TAGS)\n                                  ^\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:472:35: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\ninclude/v8-internal.h:657:61: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\n    static_assert(kJSObjectType + 1 == kFirstJSApiObjectType);\n                                                            ^\n                                                            , \"\"\ninclude/v8-internal.h:658:55: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\n    static_assert(kJSObjectType < kLastJSApiObjectType);\n                                                      ^\n                                                      , \"\"\ninclude/v8-internal.h:659:63: warning: 'static_assert' with no message is a C++17 extension [-Wc++17-extensions]\n    static_assert(kFirstJSApiObjectType < kLastJSApiObjectType);\n                                                              ^\n                                                              , \"\"\nIn file included from samples/hello-world.cc:11:\nIn file included from ./include/v8-initialization.h:11:\nIn file included from include/v8-callbacks.h:15:\nIn file included from include/v8-promise.h:9:\nIn file included from include/v8-object.h:9:\ninclude/v8-maybe.h:106:45: error: no template named 'is_lvalue_reference_v' in namespace 'std'; did you mean 'is_lvalue_reference'?\n  template <class U, std::enable_if_t<!std::is_lvalue_reference_v<U>>*>\n                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~\n                                            is_lvalue_reference\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/type_traits:910:29: note: 'is_lvalue_reference' declared here\nstruct _LIBCPP_TEMPLATE_VIS is_lvalue_reference : _BoolConstant<__is_lvalue_reference(_Tp)> { };\n                            ^\nIn file included from samples/hello-world.cc:11:\nIn file included from ./include/v8-initialization.h:11:\nIn file included from include/v8-callbacks.h:15:\nIn file included from include/v8-promise.h:9:\nIn file included from include/v8-object.h:9:\ninclude/v8-maybe.h:106:69: error: expected '(' for function-style cast or type construction\n  template <class U, std::enable_if_t<!std::is_lvalue_reference_v<U>>*>\n                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\ninclude/v8-maybe.h:123:43: error: no template named 'is_lvalue_reference_v' in namespace 'std'; did you mean 'is_lvalue_reference'?\ntemplate <class T, std::enable_if_t<!std::is_lvalue_reference_v<T>>* = nullptr>\n                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~\n                                          is_lvalue_reference\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/type_traits:910:29: note: 'is_lvalue_reference' declared here\nstruct _LIBCPP_TEMPLATE_VIS is_lvalue_reference : _BoolConstant<__is_lvalue_reference(_Tp)> { };\n                            ^\nIn file included from samples/hello-world.cc:11:\nIn file included from ./include/v8-initialization.h:11:\nIn file included from include/v8-callbacks.h:15:\nIn file included from include/v8-promise.h:9:\nIn file included from include/v8-object.h:9:\ninclude/v8-maybe.h:123:67: error: expected '(' for function-style cast or type construction\ntemplate <class T, std::enable_if_t<!std::is_lvalue_reference_v<T>>* = nullptr>\n                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n19 warnings and 4 errors generated.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["从以上报错的 4 个信息可以发现 ",(0,s.jsx)(n.code,{children:"std::is_lvalue_reference_v"})," 在 ",(0,s.jsx)(n.code,{children:"std"})," 空间下不存在，在 Goolge 中直接搜索 ",(0,s.jsx)(n.code,{children:"std::is_lvalue_reference_v"})," 并找到 C++ API 文档 ",(0,s.jsx)(n.code,{children:"std::is_lvalue_reference"}),"，可以发现 ",(0,s.jsx)(n.code,{children:"std::is_lvalue_reference_v"})," 是 C++17 才开始支持，而官方的编译命令使用 C++14 版本，因此更改编译命令重新编译："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# -std：使用 c++17 标准 \ng++ -I. -Iinclude samples/hello-world.cc -o hello_world -lv8_monolith -Lout.gn/x64.release.sample/obj/ -pthread -std=c++17 -DV8_COMPRESS_POINTERS\n"})}),"\n",(0,s.jsxs)(n.p,{children:["此时可以在 ",(0,s.jsx)(n.code,{children:"v8"})," 目录下生成可执行文件 ",(0,s.jsx)(n.code,{children:"hello_world"}),"，执行该文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./hello_world\n# 打印\n#\n# Fatal error in , line 0\n# Embedder-vs-V8 build configuration mismatch. On embedder side sandbox is DISABLED while on V8 side it's ENABLED.\n#\n#\n#\n#FailureMessage Object: 0x7ff7b854cd40\n==== C stack trace ===============================\n\n    0   hello_world                         0x00000001079cb9c3 v8::base::debug::StackTrace::StackTrace() + 19\n    1   hello_world                         0x00000001079d261b v8::platform::(anonymous namespace)::PrintStackTrace() + 27\n    2   hello_world                         0x00000001079bdd83 V8_Fatal(char const*, ...) + 323\n    3   hello_world                         0x00000001079fff3e v8::V8::Initialize(int) + 126\n    4   hello_world                         0x00000001079b3dc6 main + 198\n    5   dyld                                0x000000010c3e84fe start + 462\nzsh: abort      ./hello_world\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上述提示表明我们的构建配置和运行时的配置有差异（V8 的沙箱配置），在 ",(0,s.jsx)(n.a,{href:"http://v8.js.cn/docs/embed/",target:"_blank",rel:"noopener noreferrer",children:"Getting started with embedding V8"})," 中说明可以通过如下命令查看 V8 的编译配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'gn args out.gn/x64.release.sample\n\n# 配置信息如下\ndcheck_always_on = false\nis_component_build = false\nis_debug = false\ntarget_cpu = "x64"\nuse_custom_libcxx = false\n# 开启了沙箱\nv8_enable_sandbox = true\nv8_monolithic = true\nv8_use_external_startup_data = false\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在 V8 的源码中搜索 ",(0,s.jsx)(n.code,{children:"v8_enable_sandbox"})," 配置，可以发现在 ",(0,s.jsx)(n.code,{children:"v8"})," 根目录的 ",(0,s.jsx)(n.code,{children:"BUILD.gn"}),"中可以搜索到如下信息："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"# Enable the experimental V8 sandbox.\n# Sets -DV8_ENABLE_SANDBOX.\n\n# 你可以在 V8 的源码下继续搜索 V8_ENABLE_SANDBOX，看看哪些地方有使用该宏定义\n"})}),"\n",(0,s.jsxs)(n.p,{children:["关于 -D 参数这里做个详细说明，例如在 ",(0,s.jsx)(n.code,{children:"main.cpp"}),"中存在如下代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"int main() {\n    int a; \n    int b;\n    #ifdef V8_ENABLE_SANDBOX\n        a += b;\n    #endif\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"如果默认没有任何宏定义处理，例如执行："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 预编译\n# -E：进行预编译，处理 # 号的定义命令或语句，生成 .i 后缀的文件\ng++ main.cpp -E -o main.i\n"})}),"\n",(0,s.jsxs)(n.p,{children:["此时代码中没有定义 ",(0,s.jsx)(n.code,{children:"V8_ENABLE_SANDBOX"}),"，查看 ",(0,s.jsx)(n.code,{children:"main.i"})," 文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'# 1 "main.cpp"\n# 1 "<built-in>" 1\n# 1 "<built-in>" 3\n# 384 "<built-in>" 3\n# 1 "<command line>" 1\n# 1 "<built-in>" 2\n# 1 "main.cpp" 2\nint main() {\n    int a;\n    int b;\n\n\n\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["如果在编译参数中加入宏定义 ",(0,s.jsx)(n.code,{children:"V8_ENABLE_SANDBOX"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 预编译（宏定义）\n# -D： 编译宏定义，宏定义 V8_ENABLE_SANDBOX\ng++ main.cpp -E -o main.i -DV8_ENABLE_SANDBOX\n"})}),"\n",(0,s.jsxs)(n.p,{children:["查看 ",(0,s.jsx)(n.code,{children:"main.i"})," 文件，会发现预编译后包含了宏定义内的代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'# 1 "main.cpp"\n    # 1 "<built-in>" 1\n    # 1 "<built-in>" 3\n    # 384 "<built-in>" 3\n    # 1 "<command line>" 1\n    # 1 "<built-in>" 2\n    # 1 "main.cpp" 2\nint main() {\n    int a;\n    int b;\n\n    a += b;\n\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示： 预编译的过程会去除没有定义的代码，有点类似于 Web 前端的 ",(0,s.jsx)(n.a,{href:"https://webpack.docschina.org/guides/tree-shaking/#root",target:"_blank",rel:"noopener noreferrer",children:"Tree Shaking"}),"。在开发的过程中使用 DEBUG 宏定义参数去处理一些调试信息或者环境变量是一个不错的选择。在编译代码的过程中，我们可以看到官方的指令默认有 ",(0,s.jsx)(n.code,{children:"-DV8_COMPRESS_POINTERS"}),"，这是一个指针压缩的开关，指针压缩主要用于节省 V8 的运行内存，详细信息可以查看 ",(0,s.jsx)(n.a,{href:"http://v8.js.cn/blog/pointer-compression/",target:"_blank",rel:"noopener noreferrer",children:"V8 中的指针压缩"}),"。可以在 V8 的源码中通过搜索 ",(0,s.jsx)(n.code,{children:"V8_COMPRESS_POINTERS"})," 发现大量的宏定义代码块。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"了解了宏定义之后，我们继续回到 V8 的编译，修改编译命令，如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# -DV8_ENABLE_SANDBOX\ng++ -I. -Iinclude samples/hello-world.cc -o hello_world -lv8_monolith -Lout.gn/x64.release.sample/obj/ -pthread -std=c++17 -DV8_COMPRESS_POINTERS -DV8_ENABLE_SANDBOX\n"})}),"\n",(0,s.jsxs)(n.p,{children:["重新执行生成的二进制文件 ",(0,s.jsx)(n.code,{children:"hello_world"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 执行\n./hello_world \n# 打印\nHello, World!\n3 + 4 = 7\n"})}),"\n",(0,s.jsx)(n.p,{children:"至此，V8 的源码下载、静态库的制作以及 V8 嵌入示例全部跑通。"}),"\n",(0,s.jsxs)(n.h2,{id:"v8-动态库下载使用",children:["V8 动态库下载使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#v8-动态库下载使用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"V8 静态库的制作过程相对复杂，在制作的过程中可能会遇到一些意想不到的错误。为了方便起见，可以直接下载别人已经编译好的 V8 动态库引入使用。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：如果是用于生产模式，建议使用官方的 V8 源码进行库制作，版本可控并且安全可靠。下述示例代码可以在 embed-v8 的 ",(0,s.jsx)(n.a,{href:"https://github.com/ziyi2/embed-v8/tree/demo/v8-dylib",target:"_blank",rel:"noopener noreferrer",children:"demo/v8-dylib"})," 分支中获取。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"下载-homebrew",children:["下载 Homebrew",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#下载-homebrew",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 Mac 中经常会用到 ",(0,s.jsx)(n.a,{href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer",children:"Homebrew"})," 包管理工具（类比 Web 前端中的 NPM 包管理工具），它可以协助 Mac 安装软件（例如 Git、Node）以及命令行工具，在这里主要用于下载 V8 库。可以通过官网提供的命令进行 Homebrew 安装："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# 需要科学上网\n/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：在 Web 前端的开发中我们可以将 NPM 切换成淘宝镜像源从而加快安装速度，Homebrew 也可以通过类似的方式进行加速安装，感兴趣的同学可以自行查阅一下。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"下载-v8-库",children:["下载 V8 库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#下载-v8-库",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"使用安装好的 Homebrew 下载 V8 库："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# https://formulae.brew.sh/formula/v8\n# 版本：10.2.154.4\nbrew install v8\n# 查看 V8 库的安装目录\nbrew list v8\n# /usr/local/Cellar/v8/10.2.154.4/bin/d8\n# /usr/local/Cellar/v8/10.2.154.4/include/ (67 files)\n# /usr/local/Cellar/v8/10.2.154.4/lib/ (3 files)\n# /usr/local/Cellar/v8/10.2.154.4/libexec/include/ (112 files)\n# /usr/local/Cellar/v8/10.2.154.4/libexec/ (8 files)\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：示例代码提供了默认下载好的 V8 动态库，如果使用示例代码存在问题，很可能是 Mac 不同的 CPU 架构导致，此时建议重新下载 V8 库运行。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"在-c-应用中引入-v8-库",children:["在 C++ 应用中引入 V8 库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在-c-应用中引入-v8-库",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"为了使用下载的 V8 动态库，首先创建一个简单的 C++ 项目，项目的目录结构如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"├── v8/        # V8 库存放的目录\n└── main.cpp   # 应用源码\n"})}),"\n",(0,s.jsx)(n.p,{children:"将 Homebrew 下载的 V8 动态库拷贝到 C++ 项目目录，如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 进入项目目录\n# ./v8 是拷贝的目标目录\ncp -R /usr/local/Cellar/v8/10.2.154.4/  ./v8\n"})}),"\n",(0,s.jsx)(n.p,{children:"拷贝后的目录结构如下所示（ V8 目录只罗列了项目中需要使用的文件）："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"├── v8                                                                                                 \n│   ├── inclide/                              # 头文件\n│   │   ├── libplatform/                         \n│   │   │   └── libplatform.h        \n│   │   └── v8.h                                                \n│   └── lib/                                  # 动态库\n│        ├── libv8.dylib         \n│        └── libv8_libplatform.dylib                                                \n└── main.cpp                                  # 应用程序\n"})}),"\n",(0,s.jsxs)(n.p,{children:["将 V8 官方 10.2.154.4 版本（对应 V8 动态库版本）的 ",(0,s.jsx)(n.a,{href:"https://github.com/v8/v8/blob/10.2.154.4/samples/hello-world.cc",target:"_blank",rel:"noopener noreferrer",children:"Hello World Example"})," 引入 ",(0,s.jsx)(n.code,{children:"main.cpp"})," 中使用："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// 不需要使用 include/libplatform/libplatform.h\n#include "libplatform/libplatform.h"\n\n// #include "include/v8-context.h"\n// #include "include/v8-initialization.h"\n// #include "include/v8-isolate.h"\n// #include "include/v8-local-handle.h"\n// #include "include/v8-primitive.h"\n\n// 引入总头文件 v8.h，会包含上述所有被注释的头文件\n// 注意在编译时会指定头文件的搜索目录 -I 为 ./v8/include，因此不需要使用 include/v8.h\n#include "v8.h"\n\nint main(int argc, char* argv[]) {\n  // Initialize V8.\n  v8::V8::InitializeICUDefaultLocation(argv[0]);\n  v8::V8::InitializeExternalStartupData(argv[0]);\n  std::unique_ptr<v8::Platform> platform = v8::platform::NewDefaultPlatform();\n  v8::V8::InitializePlatform(platform.get());\n#ifdef V8_SANDBOX\n  if (!v8::V8::InitializeSandbox()) {\n    fprintf(stderr, "Error initializing the V8 sandbox\\n");\n    return 1;\n  }\n#endif\n  v8::V8::Initialize();\n\n  // Create a new Isolate and make it the current one.\n  v8::Isolate::CreateParams create_params;\n  create_params.array_buffer_allocator =\n      v8::ArrayBuffer::Allocator::NewDefaultAllocator();\n  v8::Isolate* isolate = v8::Isolate::New(create_params);\n  {\n    v8::Isolate::Scope isolate_scope(isolate);\n\n    // Create a stack-allocated handle scope.\n    v8::HandleScope handle_scope(isolate);\n\n    // Create a new context.\n    v8::Local<v8::Context> context = v8::Context::New(isolate);\n\n    // Enter the context for compiling and running the hello world script.\n    v8::Context::Scope context_scope(context);\n\n    {\n      // Create a string containing the JavaScript source code.\n      v8::Local<v8::String> source =\n          v8::String::NewFromUtf8Literal(isolate, "\'Hello\' + \', World!\'");\n\n      // Compile the source code.\n      v8::Local<v8::Script> script =\n          v8::Script::Compile(context, source).ToLocalChecked();\n\n      // Run the script to get the result.\n      v8::Local<v8::Value> result = script->Run(context).ToLocalChecked();\n\n      // Convert the result to an UTF8 string and print it.\n      v8::String::Utf8Value utf8(isolate, result);\n      printf("%s\\n", *utf8);\n    }\n  }\n\n  // Dispose the isolate and tear down V8.\n  isolate->Dispose();\n  v8::V8::Dispose();\n  v8::V8::DisposePlatform();\n  delete create_params.array_buffer_allocator;\n  return 0;\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：去除了 ",(0,s.jsx)(n.a,{href:"https://github.com/v8/v8/blob/10.2.154.4/samples/hello-world.cc",target:"_blank",rel:"noopener noreferrer",children:"Hello World Example"})," 中的 WebAssembly 示例代码。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"mian.cpp"})," 引入 V8 头文件后，需要执行链接编译，使得源代码可以识别 V8 动态库："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 编译\n# -I：搜索头文件时搜索当前项目的 v8 目录下的头文件，因此 include/v8.h 可以被识别\n# -L：指定动态库的搜索目录为 v8/lib\n# -l：链接 lib 目录下的 libv8.dylib 和 libv8_libplatform.dylib 两个动态库\n# -std：使用 c++17 标准\n# -D：编译时宏定义 V8_COMPRESS_POINTERS，开启 V8 的指针压缩\ng++ main.cpp -o main -Iv8/include -Lv8/lib -lv8 -lv8_libplatform -std=c++17 -DV8_COMPRESS_POINTERS -DV8_ENABLE_SANDBOX\n# 执行\n./main\n# 打印\nHello, World!\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"使用-cmake-编译-c-应用",children:["使用 CMake 编译 C++ 应用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-cmake-编译-c-应用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当 C++ 项目越来越庞大时，使用单条 g++ 命令可能无法满足我们的编译诉求，因此可以使用 ",(0,s.jsx)(n.a,{href:"https://cmake.org/",target:"_blank",rel:"noopener noreferrer",children:"CMake"})," 来编译项目，首先需要安装 CMake："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["方式一：",(0,s.jsx)(n.a,{href:"https://cmake.org/download/",target:"_blank",rel:"noopener noreferrer",children:"官方下载地址"})]}),"\n",(0,s.jsx)(n.li,{children:"方式二：使用 Homebrew 安装"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["本项目使用 Homebrew 的安装命令 ",(0,s.jsx)(n.code,{children:"brew install cmake"})," 安装一键搞定。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：例如 TypeScript 中的 tsc 命令，当项目复杂后，需要使用类似 Gulp 或者 Webpack 的编译工具，在 C++ 中也可以通过 CMake 来管理复杂项目。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["安装完成后，在项目根目录下新建 ",(0,s.jsx)(n.code,{children:"CMakeLists.txt"})," 配置文件，配置如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 最低要求版本\ncmake_minimum_required(VERSION 3.2)\n\n# 设置项目名称\nproject(main)\n\n# 设置 C++17 保准，类似于 g++ 中的 -std 参数\nset(CMAKE_CXX_STANDARD 17)\n\n# 设置生成的可执行文件，类似于 g++ 中的 -o 参数\nadd_executable(main main.cpp)\n\n# 设置 V8 头文件的搜索目录，类似于 g++ 中的 -I 参数\ninclude_directories(./v8/include)\n\n# 设置 V8 的预处理宏定义，类似于 g++ 中的 -D 参数\ntarget_compile_definitions(main PRIVATE V8_COMPRESS_POINTERS V8_ENABLE_SANDBOX)\n\n# 设置动态库的查找地址，类似于 g++ 中的 -L 参数\ntarget_link_directories(main PRIVATE ./v8/lib)\n\n# 设置需要链接的 V8 动态库，类似于 g++ 中的 -l 参数\ntarget_link_libraries(main PRIVATE v8 v8_libplatform)\n"})}),"\n",(0,s.jsx)(n.p,{children:"进行编译和执行："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 进入项目根目录，生成 MakeFile\ncmake .\n# 编译\nmake\n# 执行\n./main\n# 打印\nHello, World!\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"小节",children:["小节",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小节",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本课程主要讲解了 C++ 的基础知识，包括编译工具以及库制作。重点讲解了 V8 静态库的制作使用和动态库的下载使用。在下一节课程中，会基于 V8 的官方示例讲解 V8 的基础概念。"})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}let h=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F50.%E5%8E%9F%E7%90%86%E8%BF%9B%E9%98%B6%EF%BC%9AV8%20%E7%9A%84%E5%B5%8C%E5%85%A5%E5%AE%9E%E8%B7%B5.md"]={toc:[{text:"C++ 编译工具",id:"c-编译工具",depth:2},{text:"编译 C++",id:"编译-c",depth:2},{text:"制作和使用 C++ 库",id:"制作和使用-c-库",depth:2},{text:"静态库",id:"静态库",depth:3},{text:"动态库",id:"动态库",depth:3},{text:"V8 静态库编译",id:"v8-静态库编译",depth:2},{text:"下载 XCode",id:"下载-xcode",depth:3},{text:"下载 depot_tools",id:"下载-depot_tools",depth:3},{text:"下载 V8 源码",id:"下载-v8-源码",depth:3},{text:"编译 V8 静态库",id:"编译-v8-静态库",depth:3},{text:"使用 V8 静态库",id:"使用-v8-静态库",depth:3},{text:"V8 动态库下载使用",id:"v8-动态库下载使用",depth:2},{text:"下载 Homebrew",id:"下载-homebrew",depth:3},{text:"下载 V8 库",id:"下载-v8-库",depth:3},{text:"在 C++ 应用中引入 V8 库",id:"在-c-应用中引入-v8-库",depth:3},{text:"使用 CMake 编译 C++ 应用",id:"使用-cmake-编译-c-应用",depth:3},{text:"小节",id:"小节",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);