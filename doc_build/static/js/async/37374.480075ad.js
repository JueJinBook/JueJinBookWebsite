"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["37374"],{482921:function(e,t,r){r.r(t),r.d(t,{default:()=>h});var n=r(552676),i=r(740453);let l=r.p+"static/image/7b45cc1da4caa3a1718f41d1c004d464.d7ae6674.webp",a=r.p+"static/image/dfdeeb1be09f28dd28b6dd3e51b2f5f1.1b50ea59.webp",s=r.p+"static/image/418148689bfd2d9a0594b64a967787ac.9c3d908e.webp",p=r.p+"static/image/9b9e48a7bae22b78629d66e69adeacf7.25965bdc.webp",o=r.p+"static/image/21cb4635eb252dca75c927f78fa29a58.9c8f22be.webp";function d(e){let t=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",pre:"pre",code:"code",h2:"h2",h3:"h3",img:"img",strong:"strong",h4:"h4"},(0,i.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.h1,{id:"17spring-boot-实践之文件上传处理",children:["17.Spring Boot 实践之文件上传处理",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#17spring-boot-实践之文件上传处理",children:"#"})]}),"\n",(0,n.jsx)(t.p,{children:"文件上传是比较常见和被用户熟知的功能模块，常用场景有头像设置、产品预览图、报表文件保存等等，在这些场景中都需要使用到文件上传功能，本篇文章将会对文件上传的大致流程及功能设计进行详细的介绍，并结合实践案例讲解如何使用 Spring Boot 实现文件上传及相关注意事项，对文件上传的整个流程进行闭环。"}),"\n",(0,n.jsx)(t.p,{children:"本篇文章所涉及到的知识点如下："}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Spring MVC 文件上传流程解读"}),"\n",(0,n.jsx)(t.li,{children:"Spring Boot 文件上传功能实现"}),"\n",(0,n.jsx)(t.li,{children:"Spring Boot 文件上传路径回显"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tip",children:"本篇文章中所涉及的源码已经整理好并上传到百度云，地址和提取密码如下：\n链接: https://pan.baidu.com/s/1Qg7sWcCT56wLhnikZeG3-Q \n提取码: c2p5\n"})}),"\n",(0,n.jsxs)(t.h2,{id:"spring-mvc-文件上传流程",children:["Spring MVC 文件上传流程",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#spring-mvc-文件上传流程",children:"#"})]}),"\n",(0,n.jsx)(t.p,{children:"在模块功能实现前，十三先通过源码分析，具体介绍下 Spring MVC 是如何进行文件上传处理的，其中包括源码代码调用过程以及对 Spring MVC 框架里文件处理部分代码的解析。"}),"\n",(0,n.jsxs)(t.h3,{id:"源码调用链",children:["源码调用链",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#源码调用链",children:"#"})]}),"\n",(0,n.jsx)(t.p,{children:"利用 Spring MVC 实现文件上传功能，离不开对 MultipartResolver 的设置，MultipartResolver 这个类你可以将其视为 Spring MVC 实现文件上传功能时的工具类，这个类也只会在文件上传中发挥作用。在配置了具体实现类之后，Spring MVC 中的 DispatcherServlet 在处理请求时会调用 MultipartResolver 中的方法判断此请求是不是文件上传请求。如果是，DispatcherServlet 将调用 MultipartResolver 的 resolveMultipart(request) 方法对该请求对象进行装饰并返回一个新的 MultipartHttpServletRequest 供后继处理流程使用。注意，此时的请求对象会由 HttpServletRequest 类型转换成 MultipartHttpServletRequest 类型（或者 MultipartHttpServletRequest 的实现类），这个类中会包含所上传的文件对象，可供后续流程直接使用，而无需自行在代码中实现对文件内容的读取逻辑。"}),"\n",(0,n.jsx)(t.p,{children:"根据这一过程，十三绘制了如下代码调用时序图："}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)("img",{src:o,alt:"multipart-source"})}),"\n",(0,n.jsx)(t.p,{children:"如上图所示，当收到请求时，DispatcherServlet 的 checkMultipart() 方法会调用 MultipartResolver 的 isMultipart() 方法判断请求中是否包含文件。"}),"\n",(0,n.jsx)(t.p,{children:"如果请求数据中包含文件，则调用 MultipartResolver 的 resolveMultipart() 方法对请求的数据进行解析，然后将文件数据解析成 MultipartFile 并封装在 MultipartHttpServletRequest（继承了 HttpServletRequest）对象中，最后传递给 Controller 控制器。"}),"\n",(0,n.jsxs)(t.h3,{id:"源码分析",children:["源码分析",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#源码分析",children:"#"})]}),"\n",(0,n.jsx)(t.p,{children:"从上面的时序图中，可以看出我们选用的 MultipartResolver 是 StandardServletMultipartResolver 实现类："}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"//StandardServletMultipartResolver实现了MultipartResolver接口，是它的一个具体实现类\n\npublic class StandardServletMultipartResolver implements MultipartResolver{\n   ....\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"接下来，我们更进一步，深入到源码中，具体分析时序图所展示的、实现文件上传的代码调用过程。"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"首先，我们看下 DispatcherServlet 收到 Request 请求后的执行步骤。"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"首先分析判断 HttpServletRequest 请求，判断此对象中是否包含文件信息。"}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"如果包含文件，则调用相应的方法将文件对象封装到 HttpServletRequest 对象中，源码如下："}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'	protected HttpServletRequest checkMultipart(HttpServletRequest request) throws MultipartException {\n    	//1.判断是否包含文件\n		if (this.multipartResolver != null && this.multipartResolver.isMultipart(request)) {\n			if (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != null) {\n				if (request.getDispatcherType().equals(DispatcherType.REQUEST)) {\n					logger.trace("Request already resolved to MultipartHttpServletRequest, e.g. by MultipartFilter");\n				}\n			}\n			else if (hasMultipartException(request) ) {\n				logger.debug("Multipart resolution previously failed for current request - " +\n						"skipping re-resolution for undisturbed error rendering");\n			}\n			else {\n				try {\n					//2.将文件对象封装到Request中\n					return this.multipartResolver.resolveMultipart(request);\n				}\n				catch (MultipartException ex) {\n					if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != null) {\n						logger.debug("Multipart resolution failed for error dispatch", ex);\n						// Keep processing error dispatch with regular request handle below\n					}\n					else {\n						throw ex;\n					}\n				}\n			}\n		}\n		// If not returned before: return original request.\n		return request;\n	}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["其中 ",(0,n.jsx)(t.code,{children:"this.multipartResolver.isMultipart(request)"})," 则是调用 StandardServletMultipartResolver 的 ",(0,n.jsx)(t.code,{children:"isMultipart()"})," 方法，源码如下："]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'	public boolean isMultipart(HttpServletRequest request) {\n		return StringUtils.startsWithIgnoreCase(request.getContentType(), "multipart/");\n	}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["对请求头中的 contentType 对象进行判断，请求的 contentType 不为空且 contentType 的值以 ",(0,n.jsx)(t.code,{children:"multipart/"})," 开头，此时会返回 true，否则将不会将这次请求标示为文件上传请求。"]}),"\n",(0,n.jsxs)(t.p,{children:["返回 true 后，表明此次请求中含有文件，接下来 DispatcherServlet 将会调用 ",(0,n.jsx)(t.code,{children:"resolveMultipart(request)"})," 重新封装 Request 对象，实际调用的是 StandardServletMultipartResolver  的 ",(0,n.jsx)(t.code,{children:"resolveMultipart()"})," 方法，源码如下："]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"	public MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) throws MultipartException {\n		return new StandardMultipartHttpServletRequest(request, this.resolveLazily);\n	}\n"})}),"\n",(0,n.jsx)(t.p,{children:"跟踪源码调用链，得出最终调用的方法是："}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'	public StandardMultipartHttpServletRequest(HttpServletRequest request, boolean lazyParsing)\n			throws MultipartException {\n\n		super(request);\n		if (!lazyParsing) {\n			parseRequest(request);\n		}\n	}\n\n\n	private void parseRequest(HttpServletRequest request) {\n		try {\n			Collection<Part> parts = request.getParts();\n			this.multipartParameterNames = new LinkedHashSet<>(parts.size());\n			MultiValueMap<String, MultipartFile> files = new LinkedMultiValueMap<>(parts.size());\n			for (Part part : parts) {\n				String headerValue = part.getHeader(HttpHeaders.CONTENT_DISPOSITION);\n				ContentDisposition disposition = ContentDisposition.parse(headerValue);\n				String filename = disposition.getFilename();\n				if (filename != null) {\n					if (filename.startsWith("=?") && filename.endsWith("?=")) {\n						filename = MimeDelegate.decode(filename);\n					}\n					files.add(part.getName(), new StandardMultipartFile(part, filename));\n				}\n				else {\n					this.multipartParameterNames.add(part.getName());\n				}\n			}\n			setMultipartFiles(files);\n		}\n		catch (Throwable ex) {\n			handleParseFailure(ex);\n		}\n	}\n'})}),"\n",(0,n.jsx)(t.p,{children:"由上面代码可以看出，该方法是对请求对象中的文件参数进行解析和处理，文件解析最终的实现方法是 Request 类中的 getParts() 方法，由于篇幅限制就不再继续贴代码了，通过阅读源码我们可以得知，checkMultipart() 方法最终会得到一个 StandardMultipartHttpServletRequest 对象，该对象是 MultipartHttpServletRequest 接口类的一个实现类，同时该类中含有已经解析的文件对象，之后就可以在具体的 Controller 类中直接使用文件对象，而不用自行实现文件对象的解析了。"}),"\n",(0,n.jsxs)(t.h2,{id:"spring-boot-文件上传功能实现",children:["Spring Boot 文件上传功能实现",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#spring-boot-文件上传功能实现",children:"#"})]}),"\n",(0,n.jsx)(t.p,{children:"这一小节将会通过一个文件上传案例的实现来讲解如何使用 Spring Boot 进行文件上传功能。"}),"\n",(0,n.jsx)(t.p,{children:"在 Spring Boot 中也是通过 MultipartResolver 类进行文件上传，与普通的 Spring web 项目不同的是，Spring Boot 在自动配置 DispatcherServlet 时已经配置好了 MultipartResolver ，这个知识点在前文的自动配置讲解中也有提到，因此无需再像原来那样在 SpringMVC 配置文件中增加文件上传配置的 bean。"}),"\n",(0,n.jsxs)(t.h3,{id:"常用配置",children:["常用配置",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#常用配置",children:"#"})]}),"\n",(0,n.jsx)(t.p,{children:"由于 Spring Boot 自动配置机制的存在，我们并不需要进行多余的设置，只要已经在 pom 文件中引入了 web starter 模块即可直接进行文件上传功能，在前面的实验中我们已经将 web 模块整合到项目中，因此无需再进行整合。虽然不用配置也可以使用文件上传，但是有些开发者可能会在文件上传时有一些特殊的需求，因此也需要对 Spring Boot 中 MultipartFile 的常用设置进行介绍，配置和默认值如下："}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)("img",{src:p,alt:"multipart-config"})}),"\n",(0,n.jsx)(t.p,{children:"配置含义注释："}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"spring.servlet.multipart.enabled"})}),"\n",(0,n.jsx)(t.p,{children:"是否支持 multipart 上传文件，默认支持"}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"spring.servlet.multipart.file-size-threshold"})}),"\n",(0,n.jsx)(t.p,{children:"文件大小阈值，当大于这个阈值时将写入到磁盘，否则存在内存中，（默认值 0 ，一般情况下不用特意修改）"}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"spring.servlet.multipart.location"})}),"\n",(0,n.jsx)(t.p,{children:"上传文件的临时目录"}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"spring.servlet.multipart.max-file-size"})}),"\n",(0,n.jsx)(t.p,{children:"最大支持文件大小，默认 1 M ，该值可适当的调整"}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"**spring.servlet.multipart.max-request-size=10Mb **"}),"\n",(0,n.jsx)(t.p,{children:"最大支持请求大小，默认 10 M"}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"spring.servlet.multipart.resolve-lazily"})}),"\n",(0,n.jsx)(t.p,{children:"判断是否要延迟解析文件（相当于懒加载，一般情况下不用特意修改）"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.h3,{id:"上传功能实现",children:["上传功能实现",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#上传功能实现",children:"#"})]}),"\n",(0,n.jsxs)(t.h4,{id:"新建文件上传页面",children:["新建文件上传页面",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#新建文件上传页面",children:"#"})]}),"\n",(0,n.jsx)(t.p,{children:"在 static 目录中新建 upload-test.html，上传页面代码如下："}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Spring Boot 文件上传测试</title>\n</head>\n<body>\n<form action="/upload" method="post" enctype="multipart/form-data">\n    <input type="file" name="file" />\n    <input type="submit" value="文件上传" />\n</form>\n</body>\n</html>\n'})}),"\n",(0,n.jsx)(t.p,{children:'这应该是大家都很熟悉的一个文件上传页面 demo ，文件上传的请求地址为 /upload，请求方法为 post，需要注意的是在文件上传时要设置 enctype="multipart/form-data"，页面中包含一个文件选择框和一个提交框，如下所示：'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)("img",{src:s,alt:"upload-test"})}),"\n",(0,n.jsxs)(t.h4,{id:"新建文件上传处理-controller",children:["新建文件上传处理 Controller",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#新建文件上传处理-controller",children:"#"})]}),"\n",(0,n.jsx)(t.p,{children:"在 controller 包下新建 UploadController 并编写实际的文件上传逻辑代码，代码如下："}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'package ltd.newbee.mall.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Random;\n\n@Controller\npublic class UploadController {\n    // 文件保存路径为 D 盘下的 upload 文件夹，可以按照自己的习惯来修改\n    private final static String FILE_UPLOAD_PATH = "D:\\\\upload\\\\";\n    @RequestMapping(value = "/upload", method = RequestMethod.POST)\n    @ResponseBody\n    public String upload(@RequestParam("file") MultipartFile file) {\n        if (file.isEmpty()) {\n            return "上传失败";\n        }\n        String fileName = file.getOriginalFilename();\n        String suffixName = fileName.substring(fileName.lastIndexOf("."));\n        //生成文件名称通用方法\n        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd_HHmmss");\n        Random r = new Random();\n        StringBuilder tempName = new StringBuilder();\n        tempName.append(sdf.format(new Date())).append(r.nextInt(100)).append(suffixName);\n        String newFileName = tempName.toString();\n        try {\n            // 保存文件\n            byte[] bytes = file.getBytes();\n            Path path = Paths.get(FILE_UPLOAD_PATH + newFileName);\n            Files.write(path, bytes);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return "上传成功";\n    }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["由于已经 Spring Boot 已经自动配置了 MultipartFile ，因此能够直接在控制器方法中使用 MultipartFile 读取文件信息， ",(0,n.jsx)(t.strong,{children:"@RequestParam"})," 中的文件名称需要与文件上传前端页面设置的 name 属性一致，如果文件为空则返回上传失败，如果不为空则生成一个新的文件名，之后读取文件流并写入到指定的上传路径中，最后返回上传成功。"]}),"\n",(0,n.jsxs)(t.h3,{id:"上传路径",children:["上传路径",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#上传路径",children:"#"})]}),"\n",(0,n.jsxs)(t.p,{children:["需要注意的是文件上传路径的设置，我们在代码中设置的文件保存路径为 ",(0,n.jsx)(t.code,{children:'"D:\\\\upload\\\\"'})," ，即 D 盘下的 upload 文件夹，当然，你也可以按照自己的习惯来修改为其他的目录。这种写法是 Windows 系统下的路径写法，如果你是 Linux 系统的话，写法与此不同，比如我们想把文件上传到 ",(0,n.jsx)(t.code,{children:'"/opt/newbee/upload"'})," 目录下，就需要把路径设置代码改为 ",(0,n.jsx)(t.code,{children:'private final static String FILE_UPLOAD_PATH = "/opt/newbee/upload/"'}),"，这一点需要大家注意，两种系统的写法存在一些差异。"]}),"\n",(0,n.jsx)(t.p,{children:"回到本次文件上传测试中，如果文件存储目录还没有创建的话，首先需要创建该目录，之后我们启动项目进行文件上传测试。"}),"\n",(0,n.jsxs)(t.h4,{id:"文件上传功能测试",children:["文件上传功能测试",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#文件上传功能测试",children:"#"})]}),"\n",(0,n.jsx)(t.p,{children:"之后我们启动 spring-boot 项目，在启动成功后打开浏览器并输入测试页面地址 /upload-test.html，在该页面选择需要上传的文件并进行点击上传按钮，之后可以等待后端业务处理了，如果看到上传成功的提示，并且在 upload 目录中看到保存的新文件文件则表示功能实现成功，如果文件较大可以适当调整配置项的值。"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)("img",{src:a,alt:"upload-test"})}),"\n",(0,n.jsx)(t.p,{children:"之后我们需要确认文件是否已经上传到既设定的文件目录中，只需要查看 upload 目录下是否存在该文件即可，文件上传测试完成！"}),"\n",(0,n.jsxs)(t.h2,{id:"spring-boot-文件上传路径回显",children:["Spring Boot 文件上传路径回显",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#spring-boot-文件上传路径回显",children:"#"})]}),"\n",(0,n.jsxs)(t.p,{children:["网上很多的 Spring Boot 文件上传教程，通常只讲如何实现上传功能，之后就不再继续讲解了，虽然也给了教程和代码，但是正常情况下，我们上传文件是要实际应用到业务中的，比如图片上传，上传后我们需要知道它的路径，最好能够在页面中直接看到它的回显效果，像前一个步骤中，我们只是成功的完成了文件上传，但是如何去访问这个文件还不得而知。Spring Boot 不像普通的 web 项目可以上传到 webapp 指定目录中，通常的做法是",(0,n.jsx)(t.strong,{children:"使用自定义静态资源映射目录，以此来实现文件上传整个流程的闭环"}),"，比如前一小节中的实际案例，在文件上传到 upload 目录后，增加一个自定义静态资源映射，使得 upload 下的静态资源可以通过该映射地址被访问到，新建 config 包，并在包中新增 SpringBootWebMvcConfigurer 类，实现方法如下："]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'package ltd.newbee.mall.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class NeeBeeMallWebMvcConfigurer implements WebMvcConfigurer {\n\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler("/upload/**").addResourceLocations("file:D:\\\\upload\\\\");\n    }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"通过该设置，所有以 /upload/ 开头的静态资源请求都会映射到 D 盘的 upload 目录下，与前面上传文件时设置目录类似，不同的系统比如 Linux 和 Windows，文件路径的写法不同。"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"注意：路径前需要添加"})," ",(0,n.jsx)(t.code,{children:"file:"})," ",(0,n.jsx)(t.strong,{children:"前缀。"})]}),"\n",(0,n.jsx)(t.p,{children:"之后修改一下文件上传时的返回信息，把路径拼装并返回到页面上，以便于我们进行测试，UploadController 代码修改如下："}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'return "上传成功，图片地址为：/upload/" + newFileName;\n'})}),"\n",(0,n.jsx)(t.p,{children:"接下来我们来测试一下上传的文件能否被访问到，重启项目并进行文件上传，过程如下："}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)("img",{src:l,alt:"upload-test2"})}),"\n",(0,n.jsx)(t.p,{children:"这样，一个简单的文件上传和回显的案例就完成了，首先将文件上传到指定文件夹中，之后设置静态资源映射规则使得一部分请求返回指定文件夹中的资源进行文件路径回显。"}),"\n",(0,n.jsxs)(t.h2,{id:"实验总结",children:["实验总结",(0,n.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#实验总结",children:"#"})]}),"\n",(0,n.jsx)(t.p,{children:"本篇文章首先对文件上传的流程及功能设计进行了介绍，之后结合实践案例讲解如何使用 Spring Boot 实现文件上传以及如何对已上传的文件进行路径回显，希望通过本实验的讲解，大家都能够掌握如何使用 Spring Boot 进行文件上传，本文演示时都是使用的图片文件，同学们在练习时也可以使用其他格式的文件进行测试，希望大家多多动手练习，以更快的掌握该知识点，后续在图片管理模块实践中我们会继续对该功能进行拓展讲解。"})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}let h=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F17.Spring%20Boot%20%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%84%E7%90%86.md"]={toc:[{text:"Spring MVC 文件上传流程",id:"spring-mvc-文件上传流程",depth:2},{text:"源码调用链",id:"源码调用链",depth:3},{text:"源码分析",id:"源码分析",depth:3},{text:"Spring Boot 文件上传功能实现",id:"spring-boot-文件上传功能实现",depth:2},{text:"常用配置",id:"常用配置",depth:3},{text:"上传功能实现",id:"上传功能实现",depth:3},{text:"新建文件上传页面",id:"新建文件上传页面",depth:4},{text:"新建文件上传处理 Controller",id:"新建文件上传处理-controller",depth:4},{text:"上传路径",id:"上传路径",depth:3},{text:"文件上传功能测试",id:"文件上传功能测试",depth:4},{text:"Spring Boot 文件上传路径回显",id:"spring-boot-文件上传路径回显",depth:2},{text:"实验总结",id:"实验总结",depth:2}],title:"17.Spring Boot 实践之文件上传处理",headingTitle:"17.Spring Boot 实践之文件上传处理",frontmatter:{}}}}]);