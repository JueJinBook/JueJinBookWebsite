"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["37430"],{717403:function(e,n,c){c.r(n),c.d(n,{default:()=>x});var r=c(552676),s=c(740453);let d=c.p+"static/image/0d4553b31aca0ee049c53aaa38e28a7c.b83023c9.webp",a=c.p+"static/image/bbfb58992031f6a5bea514be627753ef.598433a1.webp",h=c.p+"static/image/f030fd34a1ed411fc639fff6d0ef5af6.957f8d01.webp",i=c.p+"static/image/6210e30afa3ec9c7b2274fe974692382.e7dea5bd.webp",t=c.p+"static/image/32d42d6516a79b9493d76ee037be9143.92984785.webp",l=c.p+"static/image/560c85271b97063d707b9a9e20583756.b45aac26.webp";function o(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",img:"img",h3:"h3",pre:"pre",code:"code",blockquote:"blockquote"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"7福利篇换一种角度用户操作与-http-缓存",children:["7.福利篇：换一种角度——用户操作与 HTTP 缓存",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7福利篇换一种角度用户操作与-http-缓存",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["作为一名 Web 程序开发人员，我们脱离不了对浏览器的使用，在开发过程中时常需要",(0,r.jsx)(n.strong,{children:"刷新网页"}),"、",(0,r.jsx)(n.strong,{children:"清理浏览器缓存"}),"、",(0,r.jsx)(n.strong,{children:"打开控制台调试"}),"等等，即便作为一名普通的用户，其也离不开对浏览器的依赖，经常需要",(0,r.jsx)(n.strong,{children:"在浏览器地址栏输入对应的网址"}),"进行“网上冲浪”。"]}),"\n",(0,r.jsx)(n.p,{children:"上述种种行为其实换一种角度来看，都可以和缓存有关，在认清上述行为与缓存的关系之前，我们有必要先吃透行为的载体——浏览器（以 Chrome 为例）。"}),"\n",(0,r.jsxs)(n.h2,{id:"chrome-的三种加载模式",children:["Chrome 的三种加载模式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chrome-的三种加载模式",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Chrome 具备三种加载模式，除了通过快捷键的方式触发，这三种模式只在开发者工具打开时才能够使用，此时我们打开开发者工具，在浏览器刷新按钮上右键鼠标便会展示这几种模式，如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"20210907141210.jpg"})}),"\n",(0,r.jsx)(n.p,{children:"下面我们依次来进行介绍这三种模式："}),"\n",(0,r.jsxs)(n.h3,{id:"模式一正常重新加载",children:["模式一：正常重新加载",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#模式一正常重新加载",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// 快捷键\nMac: Command + R\nWindows: Ctrl + R（等同于直接按 F5）\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"正常重新加载"}),"这种模式对于浏览器的用户来说都很熟悉，也是我们常说的“刷新网页”，和直接点击浏览器上的刷新按钮效果一样，用户触发该模式在控制台可以看到大多数资源会命中强缓存："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"20210907143905.jpg"})}),"\n",(0,r.jsxs)(n.p,{children:["上图中刷新页面后大部分资源直接会从浏览器内存缓存（memory cache）中读取，这一现象我们会在后续章节中介绍。",(0,r.jsx)(n.strong,{children:"由此我们可以得出“正常重新加载”模式会优先读取缓存。"})]}),"\n",(0,r.jsxs)(n.h3,{id:"模式二硬性重新加载",children:["模式二：硬性重新加载",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#模式二硬性重新加载",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// 快捷键\nMac: Command + Shift + R\nWindows: Ctrl + Shift + R（等同于直接按 Ctrl + F5）\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"硬性重新加载"}),"模式强调的是“硬性”，可以理解为我们常说的“强制刷新网页”，比如当代码部署到服务器上后仍然访问的是“旧”页面时，很多人会习惯性的强制刷新一下（Ctrl + F5）便好了，而使用“正常重新加载”却无法解决。于是我们会以为硬性重新加载会清空缓存重新向服务器请求，这是一个误区，我们来观察下硬性重新加载后的控制台："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"20210907152933.jpg"})}),"\n",(0,r.jsxs)(n.p,{children:["可以看到所有资源都重新向服务器获取，这个没有问题，但是检查下请求报头我们会发现，使用硬性重新加载后所有资源的请求首部都被加上了 ",(0,r.jsx)(n.code,{children:"cache-control: no-cache"})," 和 ",(0,r.jsx)(n.code,{children:"pragma: no-cache"}),"，两者的作用都表示告知（代理）服务器不直接使用缓存，要求向源服务器发起请求，而 pragma 则是为了兼容 HTTP/1.0。"]}),"\n",(0,r.jsxs)(n.p,{children:["因此",(0,r.jsx)(n.strong,{children:"硬性重新加载并没有清空缓存，而是禁用缓存"}),"，其效果类似于在开发者工具 Network 面板勾选了 ",(0,r.jsx)(n.code,{children:"Disable cache"})," 选项："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"20210907172651.jpg"})}),"\n",(0,r.jsxs)(n.h3,{id:"模式三清空缓存并硬性重新加载",children:["模式三：清空缓存并硬性重新加载",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#模式三清空缓存并硬性重新加载",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["该模式顾名思义，其比硬性重新加载多了清空缓存的操作，因此",(0,r.jsx)(n.strong,{children:"触发该操作会将浏览器存储的本地缓存都清空掉后再重新向服务器发送请求"}),"，同时其影响的并不是当前网站，所有访问过的网站缓存都将被清除。"]}),"\n",(0,r.jsxs)(n.p,{children:["介绍完了 Chrome 的三种加载模式，相信也顺其自然解释了用户的一些操作和缓存的密切联系，接着笔者又要开始提问了：",(0,r.jsx)(n.strong,{children:"有时候当我们使用硬性重新加载（Ctrl + F5）时，为什么有个别资源还是走了强缓存？"})]}),"\n",(0,r.jsx)(n.p,{children:"读者可以在此思考一番，如果实在没有头绪就接着往下阅读。"}),"\n",(0,r.jsxs)(n.h2,{id:"为什么-ctrl--f5-还是命中了缓存",children:["为什么 Ctrl + F5 还是命中了缓存",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么-ctrl--f5-还是命中了缓存",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["上述介绍了硬性重新加载时资源请求报头会加上特定的两个首部来重新向服务器发起请求，从而绕过了读取浏览器缓存，",(0,r.jsx)(n.strong,{children:"那么换种思路，如果资源在硬性重新加载后还是命中缓存，是不是就说明请求报头上并没有加上特定的两个首部？"})]}),"\n",(0,r.jsx)(n.p,{children:"笔者通过观察和分析，发现那些命中缓存的资源都是随着页面渲染而加载的，而不走缓存的则是等待页面加载完通过脚本异步插入到 DOM 中去的，于是便得到了资源异步加载命中缓存不受硬性重新加载控制的猜想。为了验证这个猜想，我们不妨写一个 Demo 来进行试验："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Demo</title>\n</head>\n<body>\n    <div id="cache">异步资源</div>\n    <script>\n        window.onload = (function() {\n            setTimeout(function() {\n                // 异步加载背景图片\n                var a = document.getElementById("cache");\n                    a.style.backgroundImage= \'url(https://aecpm.alicdn.com/simba/img/TB183NQapLM8KJjSZFBSutJHVXa.jpg)\';\n                \n                // 异步插入 JS 资源\n                var s = document.createElement(\'script\');\n                    s.type = \'text/javascript\';\n                    s.async = true;\n                    s.src = \'https://g.alicdn.com/mm/tanx-cdn/t/tanxssp.js?v=2\';\n                    var x = document.getElementsByTagName(\'script\')[0];\n                    x.parentNode.insertBefore(s, x);\n            }, 1000)\n        })\n    <\/script>\n</body>\n</html>\n'})}),"\n",(0,r.jsx)(n.p,{children:"上述代码我们通过一个 1 秒的延时器异步加载了一张背景图片和一个 JS 资源，当在确保浏览器已经缓存了以上资源的前提下，我们采用硬性重新加载后来观察 Network 面板："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"20211102144051.jpg"})}),"\n",(0,r.jsxs)(n.p,{children:["发现两者都命中了强缓存，同时两者的请求报头发现都没有被加上 ",(0,r.jsx)(n.code,{children:"cache-control: no-cache"})," 和 ",(0,r.jsx)(n.code,{children:"pragma: no-cache"})," 两个首部，于是猜想成立。"]}),"\n",(0,r.jsx)(n.p,{children:"其实原因也很简单，因为硬性重新加载并没有清空缓存，当异步资源在页面加载完后插入时，其加载时仍然优先读取缓存，如果使用清空缓存并硬性重新加载便不会出现这种现象。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["tips：如果采用开发者工具 Network 面板勾选 ",(0,r.jsx)(n.code,{children:"Disable cache"})," 选项方式，那么异步资源也不会读取缓存，原因是缓存被提前禁用了，这与硬性重新加载不同。"]})}),"\n",(0,r.jsxs)(n.p,{children:["最后细心的读者还会发现，还有一种资源比异步资源更加“顽固”，几乎永远都是 ",(0,r.jsx)(n.code,{children:"from memory cache"}),"，不管是首次加载还是清空缓存都不奏效，它便是 ",(0,r.jsx)(n.code,{children:"base64"})," 图片。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"20210908214505.jpg"})}),"\n",(0,r.jsx)(n.p,{children:"这一现象可以这样解释：从本质上看 base64 图片其实就是一堆字符串，其伴随着页面的渲染而加载，浏览器会对其进行解析，会损耗一定的性能。按照浏览器的“节约原则”，我们可以得出以下结论："}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Base64 格式的图片被塞进 memory cache 可以视作浏览器为节省渲染开销的“自保行为”。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"结语",children:["结语",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结语",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本文从用户实际操作出发，以 Chrome 为例介绍了其三种加载模式与 HTTP 缓存间的关系。作为一名开发者，希望以上知识点能够帮助大家在日常的开发过程中进一步了解上述浏览器操作背后的秘密，正所谓“知己知彼，百战不殆”，只有吃透了行为的载体、缓存的宿主，遇到缓存带来的问题时才能够应对自如。"})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}let x=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90%2F7.%E7%A6%8F%E5%88%A9%E7%AF%87%EF%BC%9A%E6%8D%A2%E4%B8%80%E7%A7%8D%E8%A7%92%E5%BA%A6%E2%80%94%E2%80%94%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C%E4%B8%8E%20HTTP%20%E7%BC%93%E5%AD%98.md"]={toc:[{text:"Chrome 的三种加载模式",id:"chrome-的三种加载模式",depth:2},{text:"模式一：正常重新加载",id:"模式一正常重新加载",depth:3},{text:"模式二：硬性重新加载",id:"模式二硬性重新加载",depth:3},{text:"模式三：清空缓存并硬性重新加载",id:"模式三清空缓存并硬性重新加载",depth:3},{text:"为什么 Ctrl + F5 还是命中了缓存",id:"为什么-ctrl--f5-还是命中了缓存",depth:2},{text:"结语",id:"结语",depth:2}],title:"7.福利篇：换一种角度——用户操作与 HTTP 缓存",headingTitle:"7.福利篇：换一种角度——用户操作与 HTTP 缓存",frontmatter:{}}}}]);