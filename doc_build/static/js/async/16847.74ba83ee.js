"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["16847"],{887035:function(e,n,s){s.r(n),s.d(n,{default:()=>M});var r=s(552676),c=s(740453);let d=s.p+"static/image/df2e9247b08ce8babf4ab40b7b5a229a.eaf1e4ae.webp",i=s.p+"static/image/fec6aeb4f3bcb83749e3c8d8533cbf03.1feef490.webp",o=s.p+"static/image/cde9acbe0d46dff2faee2705fe84b1cb.539dc754.webp",l=s.p+"static/image/525dc7cbabc0d121806896d91edf292f.605811ef.webp",t=s.p+"static/image/efcdc5f518865aee445f0da353ae2ae3.d3dc4124.webp",a=s.p+"static/image/960c77f6860c54705a377383ab6ff6e1.b3cf3ae7.webp",h=s.p+"static/image/997a681b3421ffee61dae9273cdf6184.4b71bade.webp",j=s.p+"static/image/ea6d9939017fed3bbcf28c02786df35d.4eb3c07a.webp",x=s.p+"static/image/80832f80a26fd890f857bd09d1a4a210.05c87709.webp",p=s.p+"static/image/206bcd9ee4fd69b7fcbe2cbeb759126b.cc32e5e1.webp",g=s.p+"static/image/df65c3ac65b48443ac082d8f396a85c8.2b20a192.webp",m=s.p+"static/image/8c134bc80bb948cf20fafefa28d42fba.fb823c9c.webp",b=s.p+"static/image/b479d21b974c68d73f23cbceaf000019.96e9df25.webp",f=s.p+"static/image/984e5657acd0f8fde19d3894a816ef2f.8453dee1.webp",u=s.p+"static/image/a5000641537f76e6dbf10b108a4a5ea1.bb07199e.webp";function k(e){let n=Object.assign({p:"p",blockquote:"blockquote",strong:"strong",h2:"h2",a:"a",ul:"ul",li:"li",code:"code",pre:"pre",img:"img",h4:"h4",ol:"ol"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"本章开始将进行服务端的实战开发，包含了 Devops、服务端以及其他涉及到的中间件的模块。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["由于 ",(0,r.jsx)(n.strong,{children:"NestJS"})," 的文档非常完善以及之前有写过比较完整的 ",(0,r.jsx)(n.strong,{children:"NestJS"})," 的小册，如果对 ",(0,r.jsx)(n.strong,{children:"NestJS"})," 非常熟悉的同学可以快速跳过本章，另外整个实战篇的代码都会按照流程进行开发，只有重点的部分会拿出来单独讲解，如果有同学感觉哪块的内容不足够的话，请留言或者与加群沟通，我会在设计篇补充完整，理论上看完设计就应该能写出大体的框架而不是要在具体的代码中再去理解，",(0,r.jsx)(n.strong,{children:"所以如果有疑问那就是我设计篇没有写好，需要重新补充内容"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"环境搭建",children:["环境搭建",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#环境搭建",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在之前的 ",(0,r.jsx)(n.strong,{children:"Demo"})," 中，我们一直都在服务器或者虚拟机上直接安装所需要的软件服务，但这样并不利于迁移以及要解决各种复杂的环境配置问题，所以这次我们将采用基于 ",(0,r.jsx)(n.strong,{children:"Docker Compose"})," 的方式来快速搭建所需的开发环境，但这需要你熟悉 ",(0,r.jsx)(n.strong,{children:"Docker"})," 以及 ",(0,r.jsx)(n.strong,{children:"Docker Compose"})," 的使用。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["安装 ",(0,r.jsx)(n.strong,{children:"Docker"}),":\xa0",(0,r.jsx)(n.a,{href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer",children:"https://docs.docker.com/engine/install/"})]}),"\n",(0,r.jsxs)(n.li,{children:["安装 ",(0,r.jsx)(n.strong,{children:"Docker Compose"}),":\xa0",(0,r.jsx)(n.a,{href:"https://docs.docker.com/compose/install/",target:"_blank",rel:"noopener noreferrer",children:"https://docs.docker.com/compose/install/"})]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["安装过程自己查看文档，嫌麻烦 ",(0,r.jsx)(n.strong,{children:"Mac"})," 与 ",(0,r.jsx)(n.strong,{children:"Windows"})," 同学可以直接下载 ",(0,r.jsx)(n.strong,{children:"Dockers Desktop"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在任意目录下新建 ",(0,r.jsx)(n.code,{children:"docker-compose.yml"})," 文件，并填入以下内容："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-docker",children:"version: '3.3'\n\nvolumes:\n  mongodb_data:\n  mysql_data:\n\nservices:\n  mongo:\n    image: bitnami/mongodb:5.0.8\n    volumes:\n      - 'mongodb_data:/Users/Shared/mongodb'\n    ports:\n      - \"27017:27017\"\n\n  mysql:\n    image: bitnami/mysql:8.0\n    environment:\n      - MYSQL_ROOT_PASSWORD=123456\n    volumes:\n      - 'mysql_data:/Users/Shared/mysql'\n    ports:\n      - \"3306:3306\"\n"})}),"\n",(0,r.jsxs)(n.p,{children:["运行 ",(0,r.jsx)(n.code,{children:"docker-compose up"})," 启动服务："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"如果你本地没有对应的镜像，则会开始拉取对应的镜像。"}),"\n",(0,r.jsxs)(n.p,{children:["如果想后台启动的话，则使用 ",(0,r.jsx)(n.code,{children:"docker-compose up -d"})," 脚本，启动完毕之后如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["如果出现上图的问题，代表此镜像与 ",(0,r.jsx)(n.strong,{children:"M1"})," 芯片不兼容，最简单的解决办法就是切换 ",(0,r.jsx)(n.strong,{children:"mongodb"})," 的镜像为 ",(0,r.jsx)(n.strong,{children:"mongo:5.0.0-focal"})," 即可。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"接下来我们可以使用客户端去验证对应的数据库是否正常启动。"}),"\n",(0,r.jsxs)(n.h4,{id:"数据库可视化客户端",children:["数据库可视化客户端",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据库可视化客户端",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"MongoDB"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Robo 3T"}),"：这是一个免费的 ",(0,r.jsx)(n.strong,{children:"MongoDB"})," 客户端，提供了一个直观的界面来管理 ",(0,r.jsx)(n.strong,{children:"MongoDB"})," 数据库并支持 ",(0,r.jsx)(n.strong,{children:"Windows"}),"、",(0,r.jsx)(n.strong,{children:"MacOS"})," 和 ",(0,r.jsx)(n.strong,{children:"Linux"})," 平台；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mongo Management Studio"}),"：这是一个开源的 ",(0,r.jsx)(n.strong,{children:"MongoDB"})," 客户端，它提供了一个直观的界面来管理 ",(0,r.jsx)(n.strong,{children:"MongoDB"})," 数据库。支持 ",(0,r.jsx)(n.strong,{children:"Windows"}),"、",(0,r.jsx)(n.strong,{children:"MacOS"})," 和 ",(0,r.jsx)(n.strong,{children:"Linux"})," 平台；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mongo Express"}),"：这是一个基于 ",(0,r.jsx)(n.strong,{children:"Web"})," 的 ",(0,r.jsx)(n.strong,{children:"MongoDB"})," 客户端，支持 ",(0,r.jsx)(n.strong,{children:"Windows"}),"、",(0,r.jsx)(n.strong,{children:"MacOS"})," 和 ",(0,r.jsx)(n.strong,{children:"Linux"})," 平台。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我个人比较习惯 ",(0,r.jsx)(n.strong,{children:"Robo 3T"}),"，至于其他你们随意就好，下面就是正常连接了 ",(0,r.jsx)(n.strong,{children:"MongoDB"})," 的样子"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"MYSQL"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DBeaver"}),"：",(0,r.jsx)(n.strong,{children:"DBeaver"})," 是一款开源的通用数据库管理工具，支持 ",(0,r.jsx)(n.strong,{children:"MySQL"}),"、",(0,r.jsx)(n.strong,{children:"PostgreSQL"}),"、",(0,r.jsx)(n.strong,{children:"Oracle"}),"、",(0,r.jsx)(n.strong,{children:"DB2"})," 等多种数据库系统；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HeidiSQL"}),"：提供图形化界面，支持 ",(0,r.jsx)(n.strong,{children:"Windows"})," 操作系统；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MySQL Workbench"}),"：",(0,r.jsx)(n.strong,{children:"MySQL Workbench"})," 是 ",(0,r.jsx)(n.strong,{children:"MySQL"})," 官方提供的免费的数据库管理工具，提供图形化界面并支持 ",(0,r.jsx)(n.strong,{children:"Windows"}),"、",(0,r.jsx)(n.strong,{children:"MacOS"})," 和 ",(0,r.jsx)(n.strong,{children:"Linux"})," 平台"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我个人比较习惯 ",(0,r.jsx)(n.strong,{children:"MySQL Workbench"}),"，至于其他你们随意就好，下面就是正常连接了 ",(0,r.jsx)(n.strong,{children:"MYSQL"})," 的样子："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["对应的，其他的中间件比如 ",(0,r.jsx)(n.strong,{children:"Redis"})," 都可以采用此方式进行启动，除了一些基础的配置需要特殊处理之外，无需特别关注环境问题，对于 ",(0,r.jsx)(n.strong,{children:"Docker"})," 不熟悉的同学可以关注工程化的专栏，里面有一些相关的知识可以配合看看。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"nestjs-项目初始化",children:["NestJS 项目初始化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#nestjs-项目初始化",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["因为之前有些同学初始化的过程中遇到过坑，所以这次又是一次全新的初始化过程，采用最新的 ",(0,r.jsx)(n.strong,{children:"@nestjs/cli"})," 版本以及依赖进行项目初始化。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h4,{id:"项目初始化",children:["项目初始化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#项目初始化",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"执行初始化脚本："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"nest new low-code-test\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"项目目录结构如下所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["可以将上述的 ",(0,r.jsx)(n.code,{children:"docker-compose.yml"})," 文件移动到此项目的根目录。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"输入如下脚本即可运行工程："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"pnpm start\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h4,{id:"项目拆分",children:["项目拆分",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#项目拆分",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在之前的项目设计中，我们将整个服务拆解成立多个微服务，但同时创建多个工程从项目维护上来说是非常不便的，同时多工程之间的共用依赖维护也是一个头疼的问题，所以我们将采用 ",(0,r.jsx)(n.strong,{children:"Monorepo"})," 的模式来开发整个后端服务。"]}),"\n",(0,r.jsxs)(n.p,{children:["执行以下命令创建新的子应用 ",(0,r.jsx)(n.code,{children:"devops"}),"，同时将常规工程转化为 ",(0,r.jsx)(n.strong,{children:"Monorepo"})," 模式："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"nest generate app devops\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["新的目录结构如下所示，",(0,r.jsx)(n.code,{children:"devops"})," 与 ",(0,r.jsx)(n.code,{children:"low-code-test"})," 两个工程都被收拢到了 ",(0,r.jsx)(n.code,{children:"apps"})," 目录下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"此时脚本的启动命令也变成如下所示："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"nest start // 启动默认的项目\nnest start devops  // 启动 devops 子模块\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["直接运行如上的脚本，当然会出现端口重复的错误，我们需要修改 ",(0,r.jsx)(n.strong,{children:"devops"})," 子项目的启动端口："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"# 13.服务端实战：初始化项目\nimport { NestFactory } from '@nestjs/core';\nimport { DevopsModule } from './devops.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(DevopsModule);\n-  await app.listen(3000);\n+  await app.listen(3001);\n}\nbootstrap();\n"})}),"\n",(0,r.jsx)(n.p,{children:"重新启动出现如下图所示即代表成功："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"1684657269109.jpg"})}),"\n",(0,r.jsxs)(n.h4,{id:"turborepo-管理-monorepo",children:["Turborepo 管理 Monorepo",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#turborepo-管理-monorepo",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["每个子应用都存在互相调用的情况，开多个窗口运行也是一件非常麻烦的时候，所以我们需要借助 ",(0,r.jsx)(n.code,{children:"turbo"})," 来帮助一次性启动所有的子应用。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Turborepo"})," 是一个用于管理基于 ",(0,r.jsx)(n.strong,{children:"Monorepo"})," 的 ",(0,r.jsx)(n.strong,{children:"Node.js"})," 项目的工具。使用 ",(0,r.jsx)(n.strong,{children:"Turborepo"}),"，你可以将多个 ",(0,r.jsx)(n.strong,{children:"Node.js"})," 项目存储在单个 ",(0,r.jsx)(n.strong,{children:"Monorepo"})," 存储库中，并使用一个命令来管理这些项目。",(0,r.jsx)(n.strong,{children:"Turborepo"})," 提供了一些命令，例如\xa0",(0,r.jsx)(n.code,{children:"turborepo add"}),"，",(0,r.jsx)(n.code,{children:"turborepo build"}),"，",(0,r.jsx)(n.code,{children:"turborepo test"}),"，",(0,r.jsx)(n.code,{children:"turborepo lint"}),"\xa0等，用于管理 ",(0,r.jsx)(n.strong,{children:"Monorepo"})," 中所有项目的构建，测试和代码质量控制。"]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["项目根目录添加 ",(0,r.jsx)(n.code,{children:"pnpm-workspace.yaml"})," 将项目转成 ",(0,r.jsx)(n.code,{children:"pnpm workspace"})," 模式："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'packages:\n  - "apps/*"\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["使用以下命令安装 ",(0,r.jsx)(n.strong,{children:"Turborepo"}),"："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"pnpm i -w turbo \n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["项目根目录添加 ",(0,r.jsx)(n.code,{children:"turbo.json"})," 配置文件"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "$schema": "https://turborepo.org/schema.json",\n  "pipeline": {\n    "dev": {\n      "cache": false\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:["子应用添加对应的 ",(0,r.jsx)(n.code,{children:"package.json"}),"，添加对应的启动命令："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'# 文件目录 `low-code-test\\apps\\devops`\n{\n  "name": "devops",\n  "version": "0.0.1",\n  "scripts": {\n    "dev": "cd .. && pnpm start:devops"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'# 文件目录 `low-code-test\\apps\\low-code-test`\n{\n  "name": "low-code-test",\n  "version": "0.0.1",\n  "scripts": {\n    "dev": "cd .. && pnpm start:lowcode"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:"修改项目根目录的启动命令："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'- "start": "nest start",\n+ "start": "turbo run dev",\n+ "start:lowcode": "nest start",\n+ "start:devops": "nest start devops",\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsxs)(n.li,{children:["执行启动脚本 ",(0,r.jsx)(n.code,{children:"pnpm start"}),"，出现如下图所示即可："]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h4,{id:"创建公共库",children:["创建公共库",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建公共库",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["每个子服务之间也会有一些公共的功能会重复，在 ",(0,r.jsx)(n.strong,{children:"Monorepos"})," 项目中，我们可以使用 ",(0,r.jsx)(n.strong,{children:"NestJS"})," 提供的 ",(0,r.jsx)(n.strong,{children:"library"})," 能力来实现（标准模式项目可以使用\xa0",(0,r.jsx)(n.strong,{children:"npm"}),"\xa0包实现类似的功能）。"]}),"\n",(0,r.jsxs)(n.p,{children:["输入以下指令添加公用的 ",(0,r.jsx)(n.strong,{children:"library"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"nest g library comm\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"写在最后",children:["写在最后",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"至此整个项目的前置工作已完成，后续会基于此工程进行业务开发，实战的过程就是如此枯燥且朴实无华，如果有同学哪块不清楚可以留言反馈，我们每一条留言都会有反馈的。"}),"\n",(0,r.jsx)(n.p,{children:"如果你有什么疑问或者更好的建议，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function w(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(k,{...e})}):k(e)}let M=w;w.__RSPRESS_PAGE_META={},w.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F13.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE.md"]={toc:[{text:"环境搭建",id:"环境搭建",depth:2},{text:"数据库可视化客户端",id:"数据库可视化客户端",depth:4},{text:"NestJS 项目初始化",id:"nestjs-项目初始化",depth:2},{text:"项目初始化",id:"项目初始化",depth:4},{text:"项目拆分",id:"项目拆分",depth:4},{text:"Turborepo 管理 Monorepo",id:"turborepo-管理-monorepo",depth:4},{text:"创建公共库",id:"创建公共库",depth:4},{text:"写在最后",id:"写在最后",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);