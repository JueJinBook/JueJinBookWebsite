"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["73966"],{887389:function(e,n,s){s.r(n),s.d(n,{default:()=>o});var d=s(552676),i=s(740453);let r=s.p+"static/image/503941cf886cddb8982434bf8a6282ca.5e29cf6a.webp",c=s.p+"static/image/97079580bf268f781b5795df4ffcccff.3ade652d.webp",h=s.p+"static/image/cc6af71589896ffe5efdf601da54b757.ef3af5f0.webp",l=s.p+"static/image/1fd1bf18abd1e05d3ba30992ff117719.c0c4bd8a.webp",j=s.p+"static/image/93dc416e1a2c3f52b4ce3dbcade57f80.76ceb41d.webp",x=s.p+"static/image/59b4b2daa4c5d7cc47c1fca8aa1f6026.c282c30f.webp";function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h4:"h4",img:"img",code:"code",ul:"ul",li:"li",strong:"strong"},(0,i.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"5后端实战数据库表的设计",children:["5.后端实战：数据库表的设计",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5后端实战数据库表的设计",children:"#"})]}),"\n",(0,d.jsxs)(n.h2,{id:"前言",children:["前言",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"数据库设计，在整个软件工程的流程中，是非常重要的一环。前期的铺垫，都是为了后期开发项目时，能够顺畅一些。包括后续的迭代，都需要在数据库表设计中留下可扩展的可能性。"}),"\n",(0,d.jsx)(n.p,{children:"我们整个「记账本」项目有两个核心模块，第一个是「用户模块」，另外一个是「账单模块」。并且配置了三张数据表，表虽然不多，但是基础功能都有涉及到，所以有后续的需求，可以举一反三，进行拓展。"}),"\n",(0,d.jsx)(n.p,{children:"现在我以一个产品经理提出需求的过程，推演整个数据库设计的思路。"}),"\n",(0,d.jsxs)(n.h2,{id:"数据库设计的原则",children:["数据库设计的原则",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据库设计的原则",children:"#"})]}),"\n",(0,d.jsxs)(n.h4,{id:"1设计数据库的时间要充沛",children:["1、设计数据库的时间要充沛",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1设计数据库的时间要充沛",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"数据库是用户需求的映射，设计初衷要以用户需求为中心，尽量与用户保持沟通，这里的用户可以指产品经理，亦或是提需求的人。如果遇到需求不明确的地方，设计表时就要事先预留出可变通的字段，这便是所谓的“未雨绸缪”。"}),"\n",(0,d.jsxs)(n.h4,{id:"2多考虑一些性能和优化",children:["2、多考虑一些性能和优化",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2多考虑一些性能和优化",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"提前预判哪些数据将会是比较大的，对于这类数据的表结构，设计的时候往往是粗粒度的，以达到用最少的表，最弱的关系去存储大量的数据。"}),"\n",(0,d.jsxs)(n.h4,{id:"3添加必要的冗余字段",children:["3、添加必要的（冗余）字段",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3添加必要的冗余字段",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"像“创建时间”、“修改时间”、“备注”、“操作用户IP”和一些用于其他需求（如统计）的字段等，在每张表中必须都要有，不是说只有系统中用到的数据才会存到数据库中，一些冗余字段是为了便于日后维护、分析、拓展而添加的，这点是非常重要的，比如黑客攻击，篡改了数据，我们便就可以根据修改时间和操作用户IP来查找定位。"}),"\n",(0,d.jsxs)(n.h4,{id:"4设计合理的表关联",children:["4、设计合理的表关联",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4设计合理的表关联",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"表与表之间的关系复杂的情况下，建议采用第三张映射表来维系两张张复杂表之间的关系，达到降低表之间的直接耦合度。"}),"\n",(0,d.jsx)(n.p,{children:"若多张表涉及到大数据量的问题，表结构尽量简单，关联也要尽可能避免。"}),"\n",(0,d.jsx)(n.p,{children:"接下来我们便来设计本次项目所需要用到的数据表。"}),"\n",(0,d.jsxs)(n.h2,{id:"用户表-user",children:["用户表 user",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户表-user",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:x,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["整个记账本项目是一个面向多人注册的 ",(0,d.jsx)(n.code,{children:"C"})," 端项目，所以需要一个「个人中心」模块，用户可以设置自己的头像、个性签名。但是用户名不能修改，因为用户名是用于登录使用，目前系统没有手机验证码的概念，所以这里用户名相当于用户的唯一标示。在编写注册接口的时候，也会先检验数据库中是否存在相同的用户名。这里需要再给一个创建时间，用户后续扩展业务功能，如用户使用系统的年限、根据时间划分登记等等需求。"]}),"\n",(0,d.jsxs)(n.p,{children:["根据上述需求分析，我们可以设计如下 ",(0,d.jsx)(n.code,{children:"user"})," 表："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"id"}),"：",(0,d.jsx)(n.code,{children:"id"})," 字段设置为自增字段，避免认为操作导致数据重复。设置为自增之后，每次往 ",(0,d.jsx)(n.code,{children:"user"})," 表里新增数据，都会默认 ",(0,d.jsx)(n.code,{children:"id"})," 加 1，就算你删除了前面的数据，是不会影响到 ",(0,d.jsx)(n.code,{children:"id"})," 的自增。后续我们通过鉴权，生成用户信息。账单表的存储，都会以用户作为出发点。相当于 ",(0,d.jsx)(n.code,{children:"A"})," 用户，存储自己的账单时，都会将 ",(0,d.jsx)(n.code,{children:"A"})," 用户的 ",(0,d.jsx)(n.code,{children:"id"})," 带上，相当于这份账单标记了用户 ",(0,d.jsx)(n.code,{children:"A"})," 的 ",(0,d.jsx)(n.code,{children:"id"})," 。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"username"}),"：用于存储用户登录名称。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"password"}),"：用于存储用户登录密码。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"signature"}),"：根据上图，我们还需要一个 ",(0,d.jsx)(n.code,{children:"signature"})," 字段作为个性签名。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"avatar"}),"：用于存储用户头像信息。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"ctime"}),"：用于存储用户创建时间字段。"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"新建项目数据库",children:["新建项目数据库",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#新建项目数据库",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["我们打开 ",(0,d.jsx)(n.code,{children:"DBevaer"})," 选择本地数据库 ",(0,d.jsx)(n.code,{children:"localhost"}),"，新建一个 ",(0,d.jsx)(n.code,{children:"juejue-cost"})," 用于本次项目的开发数据库。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:j,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["创建好之后，在 ",(0,d.jsx)(n.code,{children:"juejue-cost"})," 下创建一张 ",(0,d.jsx)(n.code,{children:"user"})," 表，表属性就是我们上述提到的六个字段，如下所示："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:l,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["创建的过程不再赘述，可前往第 4 章，查看创建表的相关工作。这里要注意的是，一定要给表设置好主键，我们这里设置 ",(0,d.jsx)(n.code,{children:"id"})," 为主键。设置主键点击「约束」，在面板右键选择「新建约束」，选择要设置的属性。"]}),"\n",(0,d.jsxs)(n.h2,{id:"账单表-bill",children:["账单表 bill",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#账单表-bill",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:h,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"上图为账单首页，首页顶部有两个信息，代表当月「总支出」和「总收入」。一笔账单记为一项，每一项账单包括几个关键属性，分别是账单的类型（收入或指出）、账单的种类（服饰、交通、奖金等）、账单的金额、账单的日期时间、账单的备注（当种类无法描述清楚时使用）。"}),"\n",(0,d.jsxs)(n.p,{children:["根据上述的需求分析，我们可以这样设计 ",(0,d.jsx)(n.code,{children:"bill"})," 表："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"id"}),"：每张表都需要一个主键，我们照旧，用 ",(0,d.jsx)(n.code,{children:"id"})," 作为「账单表」的属性。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"pay_type"}),"：账单类型，账单无非就是两种类型，支出和收入，我们用 ",(0,d.jsx)(n.code,{children:"pay_type"})," 作为类型字段，这里约定好 ",(0,d.jsx)(n.code,{children:"1"})," 为支出，",(0,d.jsx)(n.code,{children:"2"})," 为收入。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"amount"}),"：账单价格，每个账单都需有一个价格属性，表示该笔账单你消费或收入了多少钱。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"date"}),"：账单日期，日期可自由选择，以时间戳的形式存储。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"type_id"}),"：账单标签 id，如餐饮、交通、日用、学习、购物等。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"type_name"}),"：账单标签名称，如餐饮、交通、日用、学习、购物等。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"user_id"}),"：账单归属的用户 ",(0,d.jsx)(n.code,{children:"id"}),"，本小册制作的是多用户项目，相当于可以有多个用户来注册使用，所以存储账单的时候，需要将用户的 ",(0,d.jsx)(n.code,{children:"id"})," 带上，便于后面查询账单列表之时，过滤出该用户的账单。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"remark"}),"：账单备注。"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"新建账单表",children:["新建账单表",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#新建账单表",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["我们在上述 ",(0,d.jsx)(n.code,{children:"juejue-cost"})," 的基础上，新建一张 ",(0,d.jsx)(n.code,{children:"bill"})," 表，如下所示："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:c,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["保存并执行，",(0,d.jsx)(n.code,{children:"bill"})," 表生效。"]}),"\n",(0,d.jsxs)(n.h2,{id:"标签表-type",children:["标签表 type",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#标签表-type",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["一开始我是想在前端把标签定死，比如服饰、交通、医疗等等这类账单种类，写成一个静态的对象，供前端项目使用。但是这样做有一个不好的地方，后续如果希望让用户自己添加自定义标签，就不好拓展。所以这里我们在数据库中设置一张 ",(0,d.jsx)(n.code,{children:"type"})," 表，让用户可以灵活的设置属于自己的自定义标签。"]}),"\n",(0,d.jsx)(n.p,{children:"我们需要给标签表设置下列属性："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"id"}),"：唯一标识，设为主键。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"name"}),"：标签名称，如餐饮、交通、日用、学习、购物等。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"type"}),"：标签类型，默认 ",(0,d.jsx)(n.code,{children:"1"})," 为收入，",(0,d.jsx)(n.code,{children:"2"})," 为支出。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"user_id"}),"：保留字段，设置该标签的用户归属，默认 0 为全部用户可见，某个用户单独设置的标签，",(0,d.jsx)(n.code,{children:"user_id"})," 就是该用户的用户 ",(0,d.jsx)(n.code,{children:"id"}),"，在获取列表的时候，方便过滤。"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"新建标签表",children:["新建标签表",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#新建标签表",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["我们在数据 ",(0,d.jsx)(n.code,{children:"juejue-cost"})," 中新建 ",(0,d.jsx)(n.code,{children:"type"})," 表，如下所示："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:r,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"我们的简表工作，基本上完成了。"}),"\n",(0,d.jsxs)(n.h2,{id:"总结",children:["总结",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["一套系统，最重要的就是用户鉴权，只要用户鉴权实现之后，围绕用户可以展开多个模块的增删改查，目前就是设置一张账单表进行增删改查的演示，后续的拓展可以根据自己的需要来，比如我还可以再加一张表，叫 ",(0,d.jsx)(n.code,{children:"note"})," 表，专门用于日记的记录，此时也就是对 ",(0,d.jsx)(n.code,{children:"note"})," 表的增删改查。我一再强调举一反三的能力，是因为没有人会把所有的东西一五一十的告诉你，多数情况下需要靠自己领悟和拓展，否则你永远只能停留在初级。"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}let o=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["Node%20%2B%20React%20%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E8%AE%B0%E8%B4%A6%E6%9C%AC%2F5.%E5%90%8E%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"数据库设计的原则",id:"数据库设计的原则",depth:2},{text:"1、设计数据库的时间要充沛",id:"1设计数据库的时间要充沛",depth:4},{text:"2、多考虑一些性能和优化",id:"2多考虑一些性能和优化",depth:4},{text:"3、添加必要的（冗余）字段",id:"3添加必要的冗余字段",depth:4},{text:"4、设计合理的表关联",id:"4设计合理的表关联",depth:4},{text:"用户表 user",id:"用户表-user",depth:2},{text:"新建项目数据库",id:"新建项目数据库",depth:4},{text:"账单表 bill",id:"账单表-bill",depth:2},{text:"新建账单表",id:"新建账单表",depth:4},{text:"标签表 type",id:"标签表-type",depth:2},{text:"新建标签表",id:"新建标签表",depth:4},{text:"总结",id:"总结",depth:2}],title:"5.后端实战：数据库表的设计",headingTitle:"5.后端实战：数据库表的设计",frontmatter:{}}}}]);