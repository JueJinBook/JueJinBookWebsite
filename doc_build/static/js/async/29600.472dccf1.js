"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["29600"],{877998:function(n,e,s){s.r(e),s.d(e,{default:()=>d});var c=s(552676),r=s(740453);function t(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",pre:"pre",code:"code",blockquote:"blockquote",h3:"h3"},(0,r.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"22class-的基本语法",children:["22.Class 的基本语法",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#22class-的基本语法",children:"#"})]}),"\n",(0,c.jsxs)(e.h2,{id:"类的由来",children:["类的由来",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#类的由来",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。"}),"\n",(0,c.jsxs)(e.p,{children:["ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过",(0,c.jsx)(e.code,{children:"class"}),"关键字，可以定义类。"]}),"\n",(0,c.jsxs)(e.p,{children:["基本上，ES6 的",(0,c.jsx)(e.code,{children:"class"}),"可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的",(0,c.jsx)(e.code,{children:"class"}),"写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的",(0,c.jsx)(e.code,{children:"class"}),"改写，就是下面这样。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码定义了一个“类”，可以看到里面有一个",(0,c.jsx)(e.code,{children:"constructor()"}),"方法，这就是构造方法，而",(0,c.jsx)(e.code,{children:"this"}),"关键字则代表实例对象。这种新的 Class 写法，本质上与本章开头的 ES5 的构造函数",(0,c.jsx)(e.code,{children:"Point"}),"是一致的。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"Point"}),"类除了构造方法，还定义了一个",(0,c.jsx)(e.code,{children:"toString()"}),"方法。注意，定义",(0,c.jsx)(e.code,{children:"toString()"}),"方法的时候，前面不需要加上",(0,c.jsx)(e.code,{children:"function"}),"这个关键字，直接把函数定义放进去了就可以了。另外，方法与方法之间不需要逗号分隔，加了会报错。"]}),"\n",(0,c.jsx)(e.p,{children:"ES6 的类，完全可以看作构造函数的另一种写法。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'class Point {\n  // ...\n}\n\ntypeof Point // "function"\nPoint === Point.prototype.constructor // true\n'})}),"\n",(0,c.jsx)(e.p,{children:"上面代码表明，类的数据类型就是函数，类本身就指向构造函数。"}),"\n",(0,c.jsxs)(e.p,{children:["使用的时候，也是直接对类使用",(0,c.jsx)(e.code,{children:"new"}),"命令，跟构造函数的用法完全一致。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Bar {\n  doStuff() {\n    console.log('stuff');\n  }\n}\n\nconst b = new Bar();\nb.doStuff() // \"stuff\"\n"})}),"\n",(0,c.jsxs)(e.p,{children:["构造函数的",(0,c.jsx)(e.code,{children:"prototype"}),"属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的",(0,c.jsx)(e.code,{children:"prototype"}),"属性上面。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Point {\n  constructor() {\n    // ...\n  }\n\n  toString() {\n    // ...\n  }\n\n  toValue() {\n    // ...\n  }\n}\n\n// 等同于\n\nPoint.prototype = {\n  constructor() {},\n  toString() {},\n  toValue() {},\n};\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"constructor()"}),"、",(0,c.jsx)(e.code,{children:"toString()"}),"、",(0,c.jsx)(e.code,{children:"toValue()"}),"这三个方法，其实都是定义在",(0,c.jsx)(e.code,{children:"Point.prototype"}),"上面。"]}),"\n",(0,c.jsx)(e.p,{children:"因此，在类的实例上面调用方法，其实就是调用原型上的方法。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class B {}\nconst b = new B();\n\nb.constructor === B.prototype.constructor // true\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"b"}),"是",(0,c.jsx)(e.code,{children:"B"}),"类的实例，它的",(0,c.jsx)(e.code,{children:"constructor()"}),"方法就是",(0,c.jsx)(e.code,{children:"B"}),"类原型的",(0,c.jsx)(e.code,{children:"constructor()"}),"方法。"]}),"\n",(0,c.jsxs)(e.p,{children:["由于类的方法都定义在",(0,c.jsx)(e.code,{children:"prototype"}),"对象上面，所以类的新方法可以添加在",(0,c.jsx)(e.code,{children:"prototype"}),"对象上面。",(0,c.jsx)(e.code,{children:"Object.assign()"}),"方法可以很方便地一次向类添加多个方法。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Point {\n  constructor(){\n    // ...\n  }\n}\n\nObject.assign(Point.prototype, {\n  toString(){},\n  toValue(){}\n});\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"prototype"}),"对象的",(0,c.jsx)(e.code,{children:"constructor"}),"属性，直接指向“类”的本身，这与 ES5 的行为是一致的。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"Point.prototype.constructor === Point // true\n"})}),"\n",(0,c.jsx)(e.p,{children:"另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'class Point {\n  constructor(x, y) {\n    // ...\n  }\n\n  toString() {\n    // ...\n  }\n}\n\nObject.keys(Point.prototype)\n// []\nObject.getOwnPropertyNames(Point.prototype)\n// ["constructor","toString"]\n'})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"toString()"}),"方法是",(0,c.jsx)(e.code,{children:"Point"}),"类内部定义的方法，它是不可枚举的。这一点与 ES5 的行为不一致。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'var Point = function (x, y) {\n  // ...\n};\n\nPoint.prototype.toString = function () {\n  // ...\n};\n\nObject.keys(Point.prototype)\n// ["toString"]\nObject.getOwnPropertyNames(Point.prototype)\n// ["constructor","toString"]\n'})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码采用 ES5 的写法，",(0,c.jsx)(e.code,{children:"toString()"}),"方法就是可枚举的。"]}),"\n",(0,c.jsxs)(e.h2,{id:"constructor-方法",children:["constructor() 方法",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#constructor-方法",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"constructor()"}),"方法是类的默认方法，通过",(0,c.jsx)(e.code,{children:"new"}),"命令生成对象实例时，自动调用该方法。一个类必须有",(0,c.jsx)(e.code,{children:"constructor()"}),"方法，如果没有显式定义，一个空的",(0,c.jsx)(e.code,{children:"constructor()"}),"方法会被默认添加。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Point {\n}\n\n// 等同于\nclass Point {\n  constructor() {}\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，定义了一个空的类",(0,c.jsx)(e.code,{children:"Point"}),"，JavaScript 引擎会自动为它添加一个空的",(0,c.jsx)(e.code,{children:"constructor()"}),"方法。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"constructor()"}),"方法默认返回实例对象（即",(0,c.jsx)(e.code,{children:"this"}),"），完全可以指定返回另外一个对象。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Foo {\n  constructor() {\n    return Object.create(null);\n  }\n}\n\nnew Foo() instanceof Foo\n// false\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"constructor()"}),"函数返回一个全新的对象，结果导致实例对象不是",(0,c.jsx)(e.code,{children:"Foo"}),"类的实例。"]}),"\n",(0,c.jsxs)(e.p,{children:["类必须使用",(0,c.jsx)(e.code,{children:"new"}),"调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用",(0,c.jsx)(e.code,{children:"new"}),"也可以执行。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Foo {\n  constructor() {\n    return Object.create(null);\n  }\n}\n\nFoo()\n// TypeError: Class constructor Foo cannot be invoked without 'new'\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"类的实例",children:["类的实例",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#类的实例",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["生成类的实例的写法，与 ES5 完全一样，也是使用",(0,c.jsx)(e.code,{children:"new"}),"命令。前面说过，如果忘记加上",(0,c.jsx)(e.code,{children:"new"}),"，像函数那样调用",(0,c.jsx)(e.code,{children:"Class()"}),"，将会报错。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Point {\n  // ...\n}\n\n// 报错\nvar point = Point(2, 3);\n\n// 正确\nvar point = new Point(2, 3);\n"})}),"\n",(0,c.jsxs)(e.p,{children:["类的属性和方法，除非显式定义在其本身（即定义在",(0,c.jsx)(e.code,{children:"this"}),"对象上），否则都是定义在原型上（即定义在",(0,c.jsx)(e.code,{children:"class"}),"上）。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n\nvar point = new Point(2, 3);\n\npoint.toString() // (2, 3)\n\npoint.hasOwnProperty('x') // true\npoint.hasOwnProperty('y') // true\npoint.hasOwnProperty('toString') // false\npoint.__proto__.hasOwnProperty('toString') // true\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"x"}),"和",(0,c.jsx)(e.code,{children:"y"}),"都是实例对象",(0,c.jsx)(e.code,{children:"point"}),"自身的属性（因为定义在",(0,c.jsx)(e.code,{children:"this"}),"对象上），所以",(0,c.jsx)(e.code,{children:"hasOwnProperty()"}),"方法返回",(0,c.jsx)(e.code,{children:"true"}),"，而",(0,c.jsx)(e.code,{children:"toString()"}),"是原型对象的属性（因为定义在",(0,c.jsx)(e.code,{children:"Point"}),"类上），所以",(0,c.jsx)(e.code,{children:"hasOwnProperty()"}),"方法返回",(0,c.jsx)(e.code,{children:"false"}),"。这些都与 ES5 的行为保持一致。"]}),"\n",(0,c.jsx)(e.p,{children:"与 ES5 一样，类的所有实例共享一个原型对象。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"var p1 = new Point(2,3);\nvar p2 = new Point(3,2);\n\np1.__proto__ === p2.__proto__\n//true\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"p1"}),"和",(0,c.jsx)(e.code,{children:"p2"}),"都是",(0,c.jsx)(e.code,{children:"Point"}),"的实例，它们的原型都是",(0,c.jsx)(e.code,{children:"Point.prototype"}),"，所以",(0,c.jsx)(e.code,{children:"__proto__"}),"属性是相等的。"]}),"\n",(0,c.jsxs)(e.p,{children:["这也意味着，可以通过实例的",(0,c.jsx)(e.code,{children:"__proto__"}),"属性为“类”添加方法。"]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"__proto__"})," 并不是语言本身的特性，这是各大厂商具体实现时添加的私有属性，虽然目前很多现代浏览器的 JS 引擎中都提供了这个私有属性，但依旧不建议在生产中使用该属性，避免对环境产生依赖。生产环境中，我们可以使用 ",(0,c.jsx)(e.code,{children:"Object.getPrototypeOf()"})," 方法来获取实例对象的原型，然后再来为原型添加方法/属性。"]}),"\n"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'var p1 = new Point(2,3);\nvar p2 = new Point(3,2);\n\np1.__proto__.printName = function () { return \'Oops\' };\n\np1.printName() // "Oops"\np2.printName() // "Oops"\n\nvar p3 = new Point(4,2);\np3.printName() // "Oops"\n'})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码在",(0,c.jsx)(e.code,{children:"p1"}),"的原型上添加了一个",(0,c.jsx)(e.code,{children:"printName()"}),"方法，由于",(0,c.jsx)(e.code,{children:"p1"}),"的原型就是",(0,c.jsx)(e.code,{children:"p2"}),"的原型，因此",(0,c.jsx)(e.code,{children:"p2"}),"也可以调用这个方法。而且，此后新建的实例",(0,c.jsx)(e.code,{children:"p3"}),"也可以调用这个方法。这意味着，使用实例的",(0,c.jsx)(e.code,{children:"__proto__"}),"属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。"]}),"\n",(0,c.jsxs)(e.h2,{id:"实例属性的新写法",children:["实例属性的新写法",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实例属性的新写法",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.a,{href:"https://github.com/tc39/proposal-class-fields",target:"_blank",rel:"noopener noreferrer",children:"ES2022"})," 为类的实例属性，又规定了一种新写法。实例属性现在除了可以定义在",(0,c.jsx)(e.code,{children:"constructor()"}),"方法里面的",(0,c.jsx)(e.code,{children:"this"}),"上面，也可以定义在类内部的最顶层。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 原来的写法\nclass IncreasingCounter {\n  constructor() {\n    this._count = 0;\n  }\n  get value() {\n    console.log('Getting the current value!');\n    return this._count;\n  }\n  increment() {\n    this._count++;\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面示例中，实例属性",(0,c.jsx)(e.code,{children:"_count"}),"定义在",(0,c.jsx)(e.code,{children:"constructor()"}),"方法里面的",(0,c.jsx)(e.code,{children:"this"}),"上面。"]}),"\n",(0,c.jsx)(e.p,{children:"现在的新写法是，这个属性也可以定义在类的最顶层，其他都不变。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class IncreasingCounter {\n  _count = 0;\n  get value() {\n    console.log('Getting the current value!');\n    return this._count;\n  }\n  increment() {\n    this._count++;\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，实例属性",(0,c.jsx)(e.code,{children:"_count"}),"与取值函数",(0,c.jsx)(e.code,{children:"value()"}),"和",(0,c.jsx)(e.code,{children:"increment()"}),"方法，处于同一个层级。这时，不需要在实例属性前面加上",(0,c.jsx)(e.code,{children:"this"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"注意，新写法定义的属性是实例对象自身的属性，而不是定义在实例对象的原型上面。"}),"\n",(0,c.jsx)(e.p,{children:"这种新写法的好处是，所有实例对象自身的属性都定义在类的头部，看上去比较整齐，一眼就能看出这个类有哪些实例属性。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class foo {\n  bar = 'hello';\n  baz = 'world';\n\n  constructor() {\n    // ...\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面的代码，一眼就能看出，",(0,c.jsx)(e.code,{children:"foo"}),"类有两个实例属性，一目了然。另外，写起来也比较简洁。"]}),"\n",(0,c.jsxs)(e.h2,{id:"取值函数getter和存值函数setter",children:["取值函数（getter）和存值函数（setter）",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#取值函数getter和存值函数setter",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["与 ES5 一样，在“类”的内部可以使用",(0,c.jsx)(e.code,{children:"get"}),"和",(0,c.jsx)(e.code,{children:"set"}),"关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class MyClass {\n  constructor() {\n    // ...\n  }\n  get prop() {\n    return 'getter';\n  }\n  set prop(value) {\n    console.log('setter: '+value);\n  }\n}\n\nlet inst = new MyClass();\n\ninst.prop = 123;\n// setter: 123\n\ninst.prop\n// 'getter'\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"prop"}),"属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。"]}),"\n",(0,c.jsx)(e.p,{children:"存值函数和取值函数是设置在属性的 Descriptor 对象上的。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'class CustomHTMLElement {\n  constructor(element) {\n    this.element = element;\n  }\n\n  get html() {\n    return this.element.innerHTML;\n  }\n\n  set html(value) {\n    this.element.innerHTML = value;\n  }\n}\n\nvar descriptor = Object.getOwnPropertyDescriptor(\n  CustomHTMLElement.prototype, "html"\n);\n\n"get" in descriptor  // true\n"set" in descriptor  // true\n'})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，存值函数和取值函数是定义在",(0,c.jsx)(e.code,{children:"html"}),"属性的描述对象上面，这与 ES5 完全一致。"]}),"\n",(0,c.jsxs)(e.h2,{id:"属性表达式",children:["属性表达式",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#属性表达式",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"类的属性名，可以采用表达式。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let methodName = 'getArea';\n\nclass Square {\n  constructor(length) {\n    // ...\n  }\n\n  [methodName]() {\n    // ...\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"Square"}),"类的方法名",(0,c.jsx)(e.code,{children:"getArea"}),"，是从表达式得到的。"]}),"\n",(0,c.jsxs)(e.h2,{id:"class-表达式",children:["Class 表达式",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#class-表达式",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"与函数一样，类也可以使用表达式的形式定义。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const MyClass = class Me {\n  getClassName() {\n    return Me.name;\n  }\n};\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是",(0,c.jsx)(e.code,{children:"Me"}),"，但是",(0,c.jsx)(e.code,{children:"Me"}),"只在 Class 的内部可用，指代当前类。在 Class 外部，这个类只能用",(0,c.jsx)(e.code,{children:"MyClass"}),"引用。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let inst = new MyClass();\ninst.getClassName() // Me\nMe.name // ReferenceError: Me is not defined\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码表示，",(0,c.jsx)(e.code,{children:"Me"}),"只在 Class 内部有定义。"]}),"\n",(0,c.jsxs)(e.p,{children:["如果类的内部没用到的话，可以省略",(0,c.jsx)(e.code,{children:"Me"}),"，也就是可以写成下面的形式。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const MyClass = class { /* ... */ };\n"})}),"\n",(0,c.jsx)(e.p,{children:"采用 Class 表达式，可以写出立即执行的 Class。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let person = new class {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayName() {\n    console.log(this.name);\n  }\n}('张三');\n\nperson.sayName(); // \"张三\"\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"person"}),"是一个立即执行的类的实例。"]}),"\n",(0,c.jsxs)(e.h2,{id:"静态方法",children:["静态方法",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#静态方法",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上",(0,c.jsx)(e.code,{children:"static"}),"关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nFoo.classMethod() // 'hello'\n\nvar foo = new Foo();\nfoo.classMethod()\n// TypeError: foo.classMethod is not a function\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"Foo"}),"类的",(0,c.jsx)(e.code,{children:"classMethod"}),"方法前有",(0,c.jsx)(e.code,{children:"static"}),"关键字，表明该方法是一个静态方法，可以直接在",(0,c.jsx)(e.code,{children:"Foo"}),"类上调用（",(0,c.jsx)(e.code,{children:"Foo.classMethod()"}),"），而不是在",(0,c.jsx)(e.code,{children:"Foo"}),"类的实例上调用。如果在实例上调用静态方法，会抛出一个错误，表示不存在该方法。"]}),"\n",(0,c.jsxs)(e.p,{children:["注意，如果静态方法包含",(0,c.jsx)(e.code,{children:"this"}),"关键字，这个",(0,c.jsx)(e.code,{children:"this"}),"指的是类，而不是实例。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Foo {\n  static bar() {\n    this.baz();\n  }\n  static baz() {\n    console.log('hello');\n  }\n  baz() {\n    console.log('world');\n  }\n}\n\nFoo.bar() // hello\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，静态方法",(0,c.jsx)(e.code,{children:"bar"}),"调用了",(0,c.jsx)(e.code,{children:"this.baz"}),"，这里的",(0,c.jsx)(e.code,{children:"this"}),"指的是",(0,c.jsx)(e.code,{children:"Foo"}),"类，而不是",(0,c.jsx)(e.code,{children:"Foo"}),"的实例，等同于调用",(0,c.jsx)(e.code,{children:"Foo.baz"}),"。另外，从这个例子还可以看出，静态方法可以与非静态方法重名。"]}),"\n",(0,c.jsx)(e.p,{children:"父类的静态方法，可以被子类继承。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nclass Bar extends Foo {\n}\n\nBar.classMethod() // 'hello'\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，父类",(0,c.jsx)(e.code,{children:"Foo"}),"有一个静态方法，子类",(0,c.jsx)(e.code,{children:"Bar"}),"可以调用这个方法。"]}),"\n",(0,c.jsxs)(e.p,{children:["静态方法也是可以从",(0,c.jsx)(e.code,{children:"super"}),"对象上调用的。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nclass Bar extends Foo {\n  static classMethod() {\n    return super.classMethod() + ', too';\n  }\n}\n\nBar.classMethod() // \"hello, too\"\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"静态属性",children:["静态属性",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#静态属性",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["静态属性指的是 Class 本身的属性，即",(0,c.jsx)(e.code,{children:"Class.propName"}),"，而不是定义在实例对象（",(0,c.jsx)(e.code,{children:"this"}),"）上的属性。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Foo {\n}\n\nFoo.prop = 1;\nFoo.prop // 1\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面的写法为",(0,c.jsx)(e.code,{children:"Foo"}),"类定义了一个静态属性",(0,c.jsx)(e.code,{children:"prop"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["目前，只有这种写法可行，因为 ES6 明确规定，Class 内部只有静态方法，没有静态属性。现在有一个",(0,c.jsx)(e.a,{href:"https://github.com/tc39/proposal-class-fields",target:"_blank",rel:"noopener noreferrer",children:"提案"}),"提供了类的静态属性，写法是在实例属性的前面，加上",(0,c.jsx)(e.code,{children:"static"}),"关键字。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class MyClass {\n  static myStaticProp = 42;\n\n  constructor() {\n    console.log(MyClass.myStaticProp); // 42\n  }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"这个新写法大大方便了静态属性的表达。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"// 老写法\nclass Foo {\n  // ...\n}\nFoo.prop = 1;\n\n// 新写法\nclass Foo {\n  static prop = 1;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面代码中，老写法的静态属性定义在类的外部。整个类生成以后，再生成静态属性。这样让人很容易忽略这个静态属性，也不符合相关代码应该放在一起的代码组织原则。另外，新写法是显式声明（declarative），而不是赋值处理，语义更好。"}),"\n",(0,c.jsxs)(e.h2,{id:"私有方法和私有属性",children:["私有方法和私有属性",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#私有方法和私有属性",children:"#"})]}),"\n",(0,c.jsxs)(e.h3,{id:"早期解决方案",children:["早期解决方案",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#早期解决方案",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"私有方法和私有属性，是只能在类的内部访问的方法和属性，外部不能访问。这是常见需求，有利于代码的封装，但早期的 ES6 不提供，只能通过变通方法模拟实现。"}),"\n",(0,c.jsx)(e.p,{children:"一种做法是在命名上加以区别。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Widget {\n\n  // 公有方法\n  foo (baz) {\n    this._bar(baz);\n  }\n\n  // 私有方法\n  _bar(baz) {\n    return this.snaf = baz;\n  }\n\n  // ...\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"_bar()"}),"方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。"]}),"\n",(0,c.jsx)(e.p,{children:"另一种方法就是索性将私有方法移出类，因为类内部的所有方法都是对外可见的。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Widget {\n  foo (baz) {\n    bar.call(this, baz);\n  }\n\n  // ...\n}\n\nfunction bar(baz) {\n  return this.snaf = baz;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"foo"}),"是公开方法，内部调用了",(0,c.jsx)(e.code,{children:"bar.call(this, baz)"}),"。这使得",(0,c.jsx)(e.code,{children:"bar()"}),"实际上成为了当前类的私有方法。"]}),"\n",(0,c.jsxs)(e.p,{children:["还有一种方法是利用",(0,c.jsx)(e.code,{children:"Symbol"}),"值的唯一性，将私有方法的名字命名为一个",(0,c.jsx)(e.code,{children:"Symbol"}),"值。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const bar = Symbol('bar');\nconst snaf = Symbol('snaf');\n\nexport default class myClass{\n\n  // 公有方法\n  foo(baz) {\n    this[bar](baz);\n  }\n\n  // 私有方法\n  [bar](baz) {\n    return this[snaf] = baz;\n  }\n\n  // ...\n};\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"bar"}),"和",(0,c.jsx)(e.code,{children:"snaf"}),"都是",(0,c.jsx)(e.code,{children:"Symbol"}),"值，一般情况下无法获取到它们，因此达到了私有方法和私有属性的效果。但是也不是绝对不行，",(0,c.jsx)(e.code,{children:"Reflect.ownKeys()"}),"依然可以拿到它们。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const inst = new myClass();\n\nReflect.ownKeys(myClass.prototype)\n// [ 'constructor', 'foo', Symbol(bar) ]\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面代码中，Symbol 值的属性名依然可以从类的外部拿到。"}),"\n",(0,c.jsxs)(e.h3,{id:"私有属性的正式写法",children:["私有属性的正式写法",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#私有属性的正式写法",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.a,{href:"https://github.com/tc39/proposal-class-fields",target:"_blank",rel:"noopener noreferrer",children:"ES2022"}),"正式为",(0,c.jsx)(e.code,{children:"class"}),"添加了私有属性，方法是在属性名之前使用",(0,c.jsx)(e.code,{children:"#"}),"表示。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class IncreasingCounter {\n  #count = 0;\n  get value() {\n    console.log('Getting the current value!');\n    return this.#count;\n  }\n  increment() {\n    this.#count++;\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"#count"}),"就是私有属性，只能在类的内部使用（",(0,c.jsx)(e.code,{children:"this.#count"}),"）。如果在类的外部使用，就会报错。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const counter = new IncreasingCounter();\ncounter.#count // 报错\ncounter.#count = 42 // 报错\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面示例中，在类的外部，读取或写入私有属性",(0,c.jsx)(e.code,{children:"#count"}),"，都会报错。"]}),"\n",(0,c.jsxs)(e.p,{children:["注意，",(0,c.jsx)(e.a,{href:"https://developer.chrome.com/blog/new-in-devtools-111/#misc",target:"_blank",rel:"noopener noreferrer",children:"从 Chrome 111 开始"}),"，开发者工具里面可以读写私有属性，不会报错，原因是 Chrome 团队认为这样方便调试。"]}),"\n",(0,c.jsxs)(e.p,{children:["另外，不管在类的内部或外部，读取一个不存在的私有属性，也都会报错。这跟公开属性的行为完全不同，如果读取一个不存在的公开属性，不会报错，只会返回",(0,c.jsx)(e.code,{children:"undefined"}),"。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class IncreasingCounter {\n  #count = 0;\n  get value() {\n    console.log('Getting the current value!');\n    return this.#myCount; // 报错\n  }\n  increment() {\n    this.#count++;\n  }\n}\n\nconst counter = new IncreasingCounter();\ncounter.#myCount // 报错\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面示例中，",(0,c.jsx)(e.code,{children:"#myCount"}),"是一个不存在的私有属性，不管在函数内部或外部，读取该属性都会导致报错。"]}),"\n",(0,c.jsxs)(e.p,{children:["注意，私有属性的属性名必须包括",(0,c.jsx)(e.code,{children:"#"}),"，如果不带",(0,c.jsx)(e.code,{children:"#"}),"，会被当作另一个属性。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Point {\n  #x;\n\n  constructor(x = 0) {\n    this.#x = +x;\n  }\n\n  get x() {\n    return this.#x;\n  }\n\n  set x(value) {\n    this.#x = +value;\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"#x"}),"就是私有属性，在",(0,c.jsx)(e.code,{children:"Point"}),"类之外是读取不到这个属性的。由于井号",(0,c.jsx)(e.code,{children:"#"}),"是属性名的一部分，使用时必须带有",(0,c.jsx)(e.code,{children:"#"}),"一起使用，所以",(0,c.jsx)(e.code,{children:"#x"}),"和",(0,c.jsx)(e.code,{children:"x"}),"是两个不同的属性。"]}),"\n",(0,c.jsx)(e.p,{children:"这种写法不仅可以写私有属性，还可以用来写私有方法。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Foo {\n  #a;\n  #b;\n  constructor(a, b) {\n    this.#a = a;\n    this.#b = b;\n  }\n  #sum() {\n    return this.#a + this.#b;\n  }\n  printSum() {\n    console.log(this.#sum());\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面示例中，",(0,c.jsx)(e.code,{children:"#sum()"}),"就是一个私有方法。"]}),"\n",(0,c.jsx)(e.p,{children:"另外，私有属性也可以设置 getter 和 setter 方法。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Counter {\n  #xValue = 0;\n\n  constructor() {\n    console.log(this.#x);\n  }\n\n  get #x() { return this.#xValue; }\n  set #x(value) {\n    this.#xValue = value;\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"#x"}),"是一个私有属性，它的读写都通过",(0,c.jsx)(e.code,{children:"get #x()"}),"和",(0,c.jsx)(e.code,{children:"set #x()"}),"操作另一个私有属性",(0,c.jsx)(e.code,{children:"#xValue"}),"来完成。"]}),"\n",(0,c.jsxs)(e.p,{children:["私有属性不限于从",(0,c.jsx)(e.code,{children:"this"}),"引用，只要是在类的内部，实例也可以引用私有属性。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Foo {\n  #privateValue = 42;\n  static getPrivateValue(foo) {\n    return foo.#privateValue;\n  }\n}\n\nFoo.getPrivateValue(new Foo()); // 42\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码允许从实例",(0,c.jsx)(e.code,{children:"foo"}),"上面引用私有属性。"]}),"\n",(0,c.jsxs)(e.p,{children:["私有属性和私有方法前面，也可以加上",(0,c.jsx)(e.code,{children:"static"}),"关键字，表示这是一个静态的私有属性或私有方法。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class FakeMath {\n  static PI = 22 / 7;\n  static #totallyRandomNumber = 4;\n\n  static #computeRandomNumber() {\n    return FakeMath.#totallyRandomNumber;\n  }\n\n  static random() {\n    console.log('I heard you like random numbers…')\n    return FakeMath.#computeRandomNumber();\n  }\n}\n\nFakeMath.PI // 3.142857142857143\nFakeMath.random()\n// I heard you like random numbers…\n// 4\nFakeMath.#totallyRandomNumber // 报错\nFakeMath.#computeRandomNumber() // 报错\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"#totallyRandomNumber"}),"是私有属性，",(0,c.jsx)(e.code,{children:"#computeRandomNumber()"}),"是私有方法，只能在",(0,c.jsx)(e.code,{children:"FakeMath"}),"这个类的内部调用，外部调用就会报错。"]}),"\n",(0,c.jsxs)(e.h3,{id:"in-运算符",children:["in 运算符",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#in-运算符",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"前面说过，直接访问某个类不存在的私有属性会报错，但是访问不存在的公开属性不会报错。这个特性可以用来判断，某个对象是否为类的实例。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class C {\n  #brand;\n\n  static isC(obj) {\n    try {\n      obj.#brand;\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面示例中，类",(0,c.jsx)(e.code,{children:"C"}),"的静态方法",(0,c.jsx)(e.code,{children:"isC()"}),"就用来判断，某个对象是否为",(0,c.jsx)(e.code,{children:"C"}),"的实例。它采用的方法就是，访问该对象的私有属性",(0,c.jsx)(e.code,{children:"#brand"}),"。如果不报错，就会返回",(0,c.jsx)(e.code,{children:"true"}),"；如果报错，就说明该对象不是当前类的实例，从而",(0,c.jsx)(e.code,{children:"catch"}),"部分返回",(0,c.jsx)(e.code,{children:"false"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["因此，",(0,c.jsx)(e.code,{children:"try...catch"}),"结构可以用来判断某个私有属性是否存在。但是，这样的写法很麻烦，代码可读性很差，",(0,c.jsx)(e.a,{href:"https://github.com/tc39/proposal-private-fields-in-in",target:"_blank",rel:"noopener noreferrer",children:"ES2022"})," 改进了",(0,c.jsx)(e.code,{children:"in"}),"运算符，使它也可以用来判断私有属性。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class C {\n  #brand;\n\n  static isC(obj) {\n    if (#brand in obj) {\n      // 私有属性 #brand 存在\n      return true;\n    } else {\n      // 私有属性 #foo 不存在\n      return false;\n    }\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面示例中，",(0,c.jsx)(e.code,{children:"in"}),"运算符判断某个对象是否有私有属性",(0,c.jsx)(e.code,{children:"#brand"}),"。它不会报错，而是返回一个布尔值。"]}),"\n",(0,c.jsxs)(e.p,{children:["这种用法的",(0,c.jsx)(e.code,{children:"in"}),"，也可以跟",(0,c.jsx)(e.code,{children:"this"}),"一起配合使用。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class A {\n  #foo = 0;\n  m() {\n    console.log(#foo in this); // true\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["注意，判断私有属性时，",(0,c.jsx)(e.code,{children:"in"}),"只能用在类的内部。另外，判断所针对的私有属性，一定要先声明，否则会报错。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class A {\n  m() {\n    console.log(#foo in this); // 报错\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面示例中，私有属性",(0,c.jsx)(e.code,{children:"#foo"}),"没有声明，就直接用于",(0,c.jsx)(e.code,{children:"in"}),"运算符的判断，导致报错。"]}),"\n",(0,c.jsxs)(e.h2,{id:"静态块",children:["静态块",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#静态块",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["静态属性的一个问题是，如果它有初始化逻辑，这个逻辑要么写在类的外部，要么写在",(0,c.jsx)(e.code,{children:"constructor()"}),"方法里面。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class C {\n  static x = 234;\n  static y;\n  static z;\n}\n\ntry {\n  const obj = doSomethingWith(C.x);\n  C.y = obj.y\n  C.z = obj.z;\n} catch {\n  C.y = ...;\n  C.z = ...;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面示例中，静态属性",(0,c.jsx)(e.code,{children:"y"}),"和",(0,c.jsx)(e.code,{children:"z"}),"的值依赖于静态属性",(0,c.jsx)(e.code,{children:"x"}),"的运算结果，这段初始化逻辑写在类的外部（上例的",(0,c.jsx)(e.code,{children:"try...catch"}),"代码块）。另一种方法是写到类的",(0,c.jsx)(e.code,{children:"constructor()"}),"方法里面。这两种方法都不是很理想，前者是将类的内部逻辑写到了外部，后者则是每次新建实例都会运行一次。"]}),"\n",(0,c.jsxs)(e.p,{children:["为了解决这个问题，ES2022 引入了",(0,c.jsx)(e.a,{href:"https://github.com/tc39/proposal-class-static-block",target:"_blank",rel:"noopener noreferrer",children:"静态块"}),"（static block），允许在类的内部设置一个代码块，在类生成时运行且只运行一次，主要作用是对静态属性进行初始化。以后，新建类的实例时，这个块就不运行了。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class C {\n  static x = ...;\n  static y;\n  static z;\n\n  static {\n    try {\n      const obj = doSomethingWith(this.x);\n      this.y = obj.y;\n      this.z = obj.z;\n    }\n    catch {\n      this.y = ...;\n      this.z = ...;\n    }\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，类的内部有一个 static 代码块，这就是静态块。它的好处是将静态属性",(0,c.jsx)(e.code,{children:"y"}),"和",(0,c.jsx)(e.code,{children:"z"}),"的初始化逻辑，写入了类的内部，而且只运行一次。"]}),"\n",(0,c.jsxs)(e.p,{children:["每个类允许有多个静态块，每个静态块中只能访问之前声明的静态属性。另外，静态块的内部不能有",(0,c.jsx)(e.code,{children:"return"}),"语句。"]}),"\n",(0,c.jsxs)(e.p,{children:["静态块内部可以使用类名或",(0,c.jsx)(e.code,{children:"this"}),"，指代当前类。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class C {\n  static x = 1;\n  static {\n    this.x; // 1\n    // 或者\n    C.x; // 1\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面示例中，",(0,c.jsx)(e.code,{children:"this.x"}),"和",(0,c.jsx)(e.code,{children:"C.x"}),"都能获取静态属性",(0,c.jsx)(e.code,{children:"x"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"除了静态属性的初始化，静态块还有一个作用，就是将私有属性与类的外部代码分享。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let getX;\n\nexport class C {\n  #x = 1;\n  static {\n    getX = obj => obj.#x;\n  }\n}\n\nconsole.log(getX(new C())); // 1\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面示例中，",(0,c.jsx)(e.code,{children:"#x"}),"是类的私有属性，如果类外部的",(0,c.jsx)(e.code,{children:"getX()"}),"方法希望获取这个属性，以前是要写在类的",(0,c.jsx)(e.code,{children:"constructor()"}),"方法里面，这样的话，每次新建实例都会定义一次",(0,c.jsx)(e.code,{children:"getX()"}),"方法。现在可以写在静态块里面，这样的话，只在类生成时定义一次。"]}),"\n",(0,c.jsxs)(e.h2,{id:"类的注意点",children:["类的注意点",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#类的注意点",children:"#"})]}),"\n",(0,c.jsxs)(e.h3,{id:"严格模式",children:["严格模式",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#严格模式",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["类和模块的内部，默认就是严格模式，所以不需要使用",(0,c.jsx)(e.code,{children:"use strict"}),"指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。"]}),"\n",(0,c.jsxs)(e.h3,{id:"不存在提升",children:["不存在提升",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#不存在提升",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"类不存在变量提升（hoist），这一点与 ES5 完全不同。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"new Foo(); // ReferenceError\nclass Foo {}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"Foo"}),"类使用在前，定义在后，这样会报错，因为 ES6 不会把类的声明提升到代码头部。这种规定的原因与下文要提到的继承有关，必须保证子类在父类之后定义。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"{\n  let Foo = class {};\n  class Bar extends Foo {\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面的代码不会报错，因为",(0,c.jsx)(e.code,{children:"Bar"}),"继承",(0,c.jsx)(e.code,{children:"Foo"}),"的时候，",(0,c.jsx)(e.code,{children:"Foo"}),"已经有定义了。但是，如果存在",(0,c.jsx)(e.code,{children:"class"}),"的提升，上面代码就会报错，因为",(0,c.jsx)(e.code,{children:"class"}),"会被提升到代码头部，而定义",(0,c.jsx)(e.code,{children:"Foo"}),"的那一行没有提升，导致",(0,c.jsx)(e.code,{children:"Bar"}),"继承",(0,c.jsx)(e.code,{children:"Foo"}),"的时候，",(0,c.jsx)(e.code,{children:"Foo"}),"还没有定义。"]}),"\n",(0,c.jsxs)(e.h3,{id:"name-属性",children:["name 属性",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#name-属性",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["由于本质上，ES6 的类只是 ES5 的构造函数的一层包装，所以函数的许多特性都被",(0,c.jsx)(e.code,{children:"Class"}),"继承，包括",(0,c.jsx)(e.code,{children:"name"}),"属性。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'class Point {}\nPoint.name // "Point"\n'})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"name"}),"属性总是返回紧跟在",(0,c.jsx)(e.code,{children:"class"}),"关键字后面的类名。"]}),"\n",(0,c.jsxs)(e.h3,{id:"generator-方法",children:["Generator 方法",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#generator-方法",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["如果某个方法之前加上星号（",(0,c.jsx)(e.code,{children:"*"}),"），就表示该方法是一个 Generator 函数。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Foo {\n  constructor(...args) {\n    this.args = args;\n  }\n  * [Symbol.iterator]() {\n    for (let arg of this.args) {\n      yield arg;\n    }\n  }\n}\n\nfor (let x of new Foo('hello', 'world')) {\n  console.log(x);\n}\n// hello\n// world\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"Foo"}),"类的",(0,c.jsx)(e.code,{children:"Symbol.iterator"}),"方法前有一个星号，表示该方法是一个 Generator 函数。",(0,c.jsx)(e.code,{children:"Symbol.iterator"}),"方法返回一个",(0,c.jsx)(e.code,{children:"Foo"}),"类的默认遍历器，",(0,c.jsx)(e.code,{children:"for...of"}),"循环会自动调用这个遍历器。"]}),"\n",(0,c.jsxs)(e.h3,{id:"this-的指向",children:["this 的指向",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#this-的指向",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["类的方法内部如果含有",(0,c.jsx)(e.code,{children:"this"}),"，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Logger {\n  printName(name = 'there') {\n    this.print(`Hello ${name}`);\n  }\n\n  print(text) {\n    console.log(text);\n  }\n}\n\nconst logger = new Logger();\nconst { printName } = logger;\nprintName(); // TypeError: Cannot read property 'print' of undefined\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"printName"}),"方法中的",(0,c.jsx)(e.code,{children:"this"}),"，默认指向",(0,c.jsx)(e.code,{children:"Logger"}),"类的实例。但是，如果将这个方法提取出来单独使用，",(0,c.jsx)(e.code,{children:"this"}),"会指向该方法运行时所在的环境（由于 class 内部是严格模式，所以 this 实际指向的是",(0,c.jsx)(e.code,{children:"undefined"}),"），从而导致找不到",(0,c.jsx)(e.code,{children:"print"}),"方法而报错。"]}),"\n",(0,c.jsxs)(e.p,{children:["一个比较简单的解决方法是，在构造方法中绑定",(0,c.jsx)(e.code,{children:"this"}),"，这样就不会找不到",(0,c.jsx)(e.code,{children:"print"}),"方法了。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Logger {\n  constructor() {\n    this.printName = this.printName.bind(this);\n  }\n\n  // ...\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"另一种解决方法是使用箭头函数。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Obj {\n  constructor() {\n    this.getThis = () => this;\n  }\n}\n\nconst myObj = new Obj();\nmyObj.getThis() === myObj // true\n"})}),"\n",(0,c.jsxs)(e.p,{children:["箭头函数内部的",(0,c.jsx)(e.code,{children:"this"}),"总是指向定义时所在的对象。上面代码中，箭头函数位于构造函数内部，它的定义生效的时候，是在构造函数执行的时候。这时，箭头函数所在的运行环境，肯定是实例对象，所以",(0,c.jsx)(e.code,{children:"this"}),"会总是指向实例对象。"]}),"\n",(0,c.jsxs)(e.p,{children:["还有一种解决方法是使用",(0,c.jsx)(e.code,{children:"Proxy"}),"，获取方法的时候，自动绑定",(0,c.jsx)(e.code,{children:"this"}),"。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"function selfish (target) {\n  const cache = new WeakMap();\n  const handler = {\n    get (target, key) {\n      const value = Reflect.get(target, key);\n      if (typeof value !== 'function') {\n        return value;\n      }\n      if (!cache.has(value)) {\n        cache.set(value, value.bind(target));\n      }\n      return cache.get(value);\n    }\n  };\n  const proxy = new Proxy(target, handler);\n  return proxy;\n}\n\nconst logger = selfish(new Logger());\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"newtarget-属性",children:["new.target 属性",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#newtarget-属性",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"new"}),"是从构造函数生成实例对象的命令。ES6 为",(0,c.jsx)(e.code,{children:"new"}),"命令引入了一个",(0,c.jsx)(e.code,{children:"new.target"}),"属性，该属性一般用在构造函数之中，返回",(0,c.jsx)(e.code,{children:"new"}),"命令作用于的那个构造函数。如果构造函数不是通过",(0,c.jsx)(e.code,{children:"new"}),"命令或",(0,c.jsx)(e.code,{children:"Reflect.construct()"}),"调用的，",(0,c.jsx)(e.code,{children:"new.target"}),"会返回",(0,c.jsx)(e.code,{children:"undefined"}),"，因此这个属性可以用来确定构造函数是怎么调用的。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"function Person(name) {\n  if (new.target !== undefined) {\n    this.name = name;\n  } else {\n    throw new Error('必须使用 new 命令生成实例');\n  }\n}\n\n// 另一种写法\nfunction Person(name) {\n  if (new.target === Person) {\n    this.name = name;\n  } else {\n    throw new Error('必须使用 new 命令生成实例');\n  }\n}\n\nvar person = new Person('张三'); // 正确\nvar notAPerson = Person.call(person, '张三');  // 报错\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码确保构造函数只能通过",(0,c.jsx)(e.code,{children:"new"}),"命令调用。"]}),"\n",(0,c.jsxs)(e.p,{children:["Class 内部调用",(0,c.jsx)(e.code,{children:"new.target"}),"，返回当前 Class。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Rectangle {\n  constructor(length, width) {\n    console.log(new.target === Rectangle);\n    this.length = length;\n    this.width = width;\n  }\n}\n\nvar obj = new Rectangle(3, 4); // 输出 true\n"})}),"\n",(0,c.jsxs)(e.p,{children:["需要注意的是，子类继承父类时，",(0,c.jsx)(e.code,{children:"new.target"}),"会返回子类。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Rectangle {\n  constructor(length, width) {\n    console.log(new.target === Rectangle);\n    // ...\n  }\n}\n\nclass Square extends Rectangle {\n  constructor(length, width) {\n    super(length, width);\n  }\n}\n\nvar obj = new Square(3); // 输出 false\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"new.target"}),"会返回子类。"]}),"\n",(0,c.jsx)(e.p,{children:"利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"class Shape {\n  constructor() {\n    if (new.target === Shape) {\n      throw new Error('本类不能实例化');\n    }\n  }\n}\n\nclass Rectangle extends Shape {\n  constructor(length, width) {\n    super();\n    // ...\n  }\n}\n\nvar x = new Shape();  // 报错\nvar y = new Rectangle(3, 4);  // 正确\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"Shape"}),"类不能被实例化，只能用于继承。"]}),"\n",(0,c.jsxs)(e.p,{children:["注意，在函数外部，使用",(0,c.jsx)(e.code,{children:"new.target"}),"会报错。"]})]})}function o(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(t,{...n})}):t(n)}let d=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F22.Class%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.md"]={toc:[{text:"类的由来",id:"类的由来",depth:2},{text:"constructor() 方法",id:"constructor-方法",depth:2},{text:"类的实例",id:"类的实例",depth:2},{text:"实例属性的新写法",id:"实例属性的新写法",depth:2},{text:"取值函数（getter）和存值函数（setter）",id:"取值函数getter和存值函数setter",depth:2},{text:"属性表达式",id:"属性表达式",depth:2},{text:"Class 表达式",id:"class-表达式",depth:2},{text:"静态方法",id:"静态方法",depth:2},{text:"静态属性",id:"静态属性",depth:2},{text:"私有方法和私有属性",id:"私有方法和私有属性",depth:2},{text:"早期解决方案",id:"早期解决方案",depth:3},{text:"私有属性的正式写法",id:"私有属性的正式写法",depth:3},{text:"in 运算符",id:"in-运算符",depth:3},{text:"静态块",id:"静态块",depth:2},{text:"类的注意点",id:"类的注意点",depth:2},{text:"严格模式",id:"严格模式",depth:3},{text:"不存在提升",id:"不存在提升",depth:3},{text:"name 属性",id:"name-属性",depth:3},{text:"Generator 方法",id:"generator-方法",depth:3},{text:"this 的指向",id:"this-的指向",depth:3},{text:"new.target 属性",id:"newtarget-属性",depth:2}],title:"22.Class 的基本语法",headingTitle:"22.Class 的基本语法",frontmatter:{}}}}]);