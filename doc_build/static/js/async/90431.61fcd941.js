"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["90431"],{204572:function(e,n,r){r.r(n),r.d(n,{default:()=>o});var s=r(552676),d=r(740453);function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",p:"p",strong:"strong",code:"code",pre:"pre",ol:"ol"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"8基础-5初始化-mysql-数据库并建立连接",children:["8基础 5：初始化 MySQL 数据库并建立连接",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8基础-5初始化-mysql-数据库并建立连接",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"本节核心内容",children:["本节核心内容",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本节核心内容",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Go ORM 数量众多，本小册介绍一个笔者认为比较好的 ORM 包，并给出原因"}),"\n",(0,s.jsx)(n.li,{children:"介绍如何初始化数据库"}),"\n",(0,s.jsx)(n.li,{children:"介绍如何连接数据库"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["本小节源码下载路径：",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo04",target:"_blank",rel:"noopener noreferrer",children:"demo04"})]}),"\n",(0,s.jsx)(n.p,{children:"可先下载源码到本地，结合源码理解后续内容，边学边练。"}),"\n",(0,s.jsxs)(n.p,{children:["本小节的代码是基于 ",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo03",target:"_blank",rel:"noopener noreferrer",children:"demo03"})," 来开发的。"]}),"\n",(0,s.jsxs)(n.p,{children:["apiserver 用的 ORM 是 GitHub 上 star 数最多的 ",(0,s.jsx)(n.a,{href:"https://github.com/jinzhu/gorm",target:"_blank",rel:"noopener noreferrer",children:"gorm"}),"，相较于其他 ORM，它用起来更方便，更稳定，社区也更活跃。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"初始化数据库",children:["初始化数据库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化数据库",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["在 ",(0,s.jsx)(n.code,{children:"model/init.go"})," 中添加数据初始化代码"]})}),"\n",(0,s.jsxs)(n.p,{children:["因为一个 API 服务器可能需要同时访问多个数据库，为了对多个数据库进行初始化和连接管理，这里定义了一个叫 ",(0,s.jsx)(n.code,{children:"Database"})," 的 struct："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"type Database struct {\n    Self   *gorm.DB\n    Docker *gorm.DB\n} \n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Database"})," 结构体有个 ",(0,s.jsx)(n.code,{children:"Init()"})," 方法用来初始化连接："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"func (db *Database) Init() {\n    DB = &Database {\n        Self:   GetSelfDB(),\n        Docker: GetDockerDB(),\n    }\n} \n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Init()"})," 函数会调用 ",(0,s.jsx)(n.code,{children:"GetSelfDB()"})," 和 ",(0,s.jsx)(n.code,{children:"GetDockerDB()"})," 方法来同时创建两个 ",(0,s.jsx)(n.code,{children:"Database"})," 的数据库对象。这两个 Get 方法最终都会调用 ",(0,s.jsx)(n.code,{children:"func openDB(username, password, addr, name string) *gorm.DB"})," 方法来建立数据库连接，不同数据库实例传入不同的 username、password、addr 和名字信息，从而建立不同的数据库连接。",(0,s.jsx)(n.code,{children:"openDB"})," 函数为："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'func openDB(username, password, addr, name string) *gorm.DB {\n    config := fmt.Sprintf("%s:%s@tcp(%s)/%s?charset=utf8&parseTime=%t&loc=%s",\n        username,   \n        password,   \n        addr,\n        name,\n        true,\n        //"Asia/Shanghai"),\n        "Local")    \n       \n    db, err := gorm.Open("mysql", config)\n    if err != nil { \n        log.Errorf(err, "Database connection failed. Database name: %s", name)\n    }  \n       \n    // set for db connection\n    setupDB(db)     \n       \n    return db\n}      \n'})}),"\n",(0,s.jsxs)(n.p,{children:["可以看到，",(0,s.jsx)(n.code,{children:"openDB()"})," 最终调用 ",(0,s.jsx)(n.code,{children:"gorm.Open()"})," 来建立一个数据库连接。"]}),"\n",(0,s.jsxs)(n.p,{children:["完整的 model/init.go 源码文件请参考 ",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo04",target:"_blank",rel:"noopener noreferrer",children:"demo04/model/init.go"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"主函数中增加数据库初始化入口"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n        \nimport (\n    ...\n    "apiserver/model"\n        \n    ...\n)       \n        \n...      \n        \nfunc main() {\n    ...\n    \n    // init db\n    model.DB.Init()\n    defer model.DB.Close()\n        \n    ...\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["通过 ",(0,s.jsx)(n.code,{children:"model.DB.Init()"})," 来建立数据库连接，通过 ",(0,s.jsx)(n.code,{children:"defer model.DB.Close()"})," 来关闭数据库连接。"]}),"\n",(0,s.jsxs)(n.h2,{id:"编译并运行",children:["编译并运行",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译并运行",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"下载 apiserver_demos 源码包（如前面已经下载过，请忽略此步骤）"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ git clone https://github.com/lexkong/apiserver_demos\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["将",(0,s.jsx)(n.code,{children:"apiserver_demos/demo04"}),"复制为",(0,s.jsx)(n.code,{children:"$GOPATH/src/apiserver"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ cp -a apiserver_demos/demo04/ $GOPATH/src/apiserver\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"在 apiserver 目录下编译源码"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ cd $GOPATH/src/apiserver\n$ gofmt -w .\n$ go tool vet .\n$ go build -v .\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["本小结介绍了如何用 ",(0,s.jsx)(n.code,{children:"gorm"})," 建立数据库连接，为之后的业务逻辑处理作准备。至于具体怎么使用 ",(0,s.jsx)(n.code,{children:"gorm"})," 来进行增删改查等操作，请参考 ",(0,s.jsx)(n.a,{href:"http://gorm.io/zh_CN/docs/index.html",target:"_blank",rel:"noopener noreferrer",children:"GORM 指南"}),"。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"本小节只是介绍了如何初始化数据库，至于怎么对数据库做 CURD 操作，请参考第 12 节：用户业务逻辑处理。"}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let o=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F8%E5%9F%BA%E7%A1%80%205%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%20MySQL%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5.md"]={toc:[{text:"本节核心内容",id:"本节核心内容",depth:2},{text:"初始化数据库",id:"初始化数据库",depth:2},{text:"编译并运行",id:"编译并运行",depth:2},{text:"小结",id:"小结",depth:2}],title:"8基础 5：初始化 MySQL 数据库并建立连接",headingTitle:"8基础 5：初始化 MySQL 数据库并建立连接",frontmatter:{}}}}]);