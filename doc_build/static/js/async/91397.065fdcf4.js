"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["91397"],{845167:function(n,e,s){s.r(e),s.d(e,{default:()=>m});var r=s(552676),t=s(740453);let o=s.p+"static/image/e2a67351b035c091346ca98bc1aefd02.437559b3.webp",d=s.p+"static/image/6c4a3f5716a6082f0a6b4f29a6e3d74b.d2299777.webp",c=s.p+"static/image/42c73de320e0852d86181e25fafb0c01.3b9fcce9.webp",i=s.p+"static/image/8d77895ca8bce779c4d60b01c3498373.f1d94c39.webp",l=s.p+"static/image/7ddea337b2ca06c1c2c9b34af1fcfe48.a7120464.webp",a=s.p+"static/image/dbf274adf92e6422974ecd4fd34deab5.f4aef6c3.webp",h=s.p+"static/image/1b2f7499dd6faa5a628614c484a71747.becd6f89.webp",x=s.p+"static/image/99f108fd11a057c544f68cdc71fe61fa.b3c75347.webp",p=s.p+"static/image/d3180c037ebf14b73447af701304bcb2.bacb29ac.webp";function j(n){let e=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",h2:"h2",img:"img",h3:"h3",pre:"pre",code:"code",blockquote:"blockquote"},(0,t.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"46项目进阶消息通信-事件联动",children:["46.项目进阶：消息通信-事件联动",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#46项目进阶消息通信-事件联动",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"上一章节中，实现了如何在低代码平台中编写代码模块并完成运行时的构建的模块加载。接下来就需要来实现模块与页面视图的联动相关的逻辑。"}),"\n",(0,r.jsx)(e.p,{children:"在代码开发中，大多数情况下都会通过组件的事件来改变视图的状态。那么通过在线平台如何实现这一环节的可视化呈现呢？目前而言分为两种："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"逻辑编排"}),"：通过组装流程Pipeline来编排事件逻辑，一般呈现方式使用图编辑引擎在完成，在不同节点和环节完成事件操作行为，在实现端中，只需要解析图编辑引擎节点的枚举来执行不同的逻辑操作即可。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"代码模块"}),"：使用在线代码编辑的形式，和本地开发一样，通过在线编辑器中实现对对应的方法，然后执行使用即可完成事件的逻辑操作。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"在之前，已经通过代码模块的方式，代码编辑器实现完成了，接下来就主要是实现事件管理器与模块之间的交互逻辑。"}),"\n",(0,r.jsxs)(e.h2,{id:"实现思路",children:["实现思路",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现思路",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"整体的实现思路如下图所示："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"物料组件"}),"：在物料组件阶段中，需要声明挂载当前支持的事件列表，以此在编辑器中进行挂载。"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"事件管理器"}),"：接收到物料组件注册的事件，并提供组件事件的新增和移除操作。"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"绑定模块函数"}),"：在之前已经实现了模块的挂载，那么在事件管理器中自然需要为物料组件提供的事件列表属性绑定对应的模块执行函数。"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"withComponet解析"}),"：事件管理器也是一个",(0,r.jsx)(e.strong,{children:"setter组件"}),"，它会将绑定事件的名称和模块函数保存到",(0,r.jsx)(e.strong,{children:"props"}),"的 ",(0,r.jsx)(e.strong,{children:(0,r.jsx)(e.strong,{children:"event"})})," 当中进行管理，在",(0,r.jsx)(e.strong,{children:"withComponent"}),"中，会对事件做一层解析，将其转换 为代码模块挂载空间中的逻辑函数，最终透传给组件的props，实现事件的逻辑运行。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsxs)(e.h2,{id:"实现过程",children:["实现过程",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现过程",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"那么接下来就来基于思路将其逻辑功能先实现一次，完成一个小闭环，在此基础之上优化扩展。"}),"\n",(0,r.jsxs)(e.h3,{id:"物料组件",children:["物料组件",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#物料组件",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.strong,{children:"createReactMaterial"}),"创建物料方法当中，对custom对象属性内部注册eventOptions事件列表。\n如下代码所示，在 ",(0,r.jsx)(e.strong,{children:(0,r.jsx)(e.strong,{children:"ArcoButton"})})," 组件中，定义了",(0,r.jsx)(e.strong,{children:"onClick"}),"和",(0,r.jsx)(e.strong,{children:"onChange"}),"事件"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { createReactMaterial } from '@huos/core'\nimport { ButtonView } from './view'\nimport { Panel } from './panel'\n\nexport const __ArcoButton__ = createReactMaterial(ButtonView, {\n  displayName: '按钮',\n  custom: {\n    useResize: false,\n    eventOptions: [\n      {\n        label: \"(onClick)点击事件\",\n        value: \"onClick\",\n      },\n      {\n        label: \"(onChange)修改事件\",\n        value: \"onChange\",\n      },\n    ]\n  },\n  related: {\n    settingRender: Panel,\n  }\n})\n"})}),"\n",(0,r.jsxs)(e.p,{children:["物料组件注册后，使用",(0,r.jsx)(e.strong,{children:"useEditor"}),"可以通过当前Id获取到组件自定义的事件列表，如下代码所示："]}),"\n",(0,r.jsxs)(e.p,{children:["获取",(0,r.jsx)(e.strong,{children:"data?.custom?.eventOptions"}),"配置后，即可在事件管理器中进行选择。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"const {\n    id: nodeId,\n    events,\n    actions,\n    eventOptions\n  } = useEditor((state) => {\n    const [currentNodeId] = state.events.selected;\n\n    if (currentNodeId) {\n      const { data } = state.nodes[currentNodeId];\n\n      console.log(data, 'data')\n\n      return {\n        id: currentNodeId,\n        events: data.props?.__events,\n        eventOptions: data?.custom?.eventOptions || []\n      };\n    }\n  });\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"mountevents",children:["MountEvents",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#mountevents",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.strong,{children:"mount-events.tsx"}),"文件中创建",(0,r.jsx)(e.strong,{children:"MountEvents"}),"组件模块，整体效果如下图所示："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"在上节中，已经实现了物料组件的事件导出下一步就是在事件管理器展示了。如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.strong,{children:"MountEvents"}),"组件中，使用",(0,r.jsx)(e.strong,{children:"ProFormList"}),"创建一个列表，并且添加列表项的复制和删除功能。分别配置",(0,r.jsx)(e.strong,{children:"creatorButtonProps"}),"、",(0,r.jsx)(e.strong,{children:"copyIconProps"}),"、",(0,r.jsx)(e.strong,{children:"deleteIconProps"}),"即可。"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.code,{children:"ProFormList 是@ant-design/pro-components的组件"})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'<ProForm\n      style={{\n        height: "100%",\n      }}\n      layout="horizontal"\n      onValuesChange={handleBindEventChange}\n      submitter={false}\n      form={form}\n    >\n      <ProFormList\n        name="events"\n        tooltip="在这里可以为当前组件绑定相关的注册事件和自定义函数"\n        creatorButtonProps={{\n          creatorButtonText: "添加事件",\n        }}\n        copyIconProps={{\n          tooltipText: "复制此项到末尾",\n        }}\n        deleteIconProps={{\n          tooltipText: "不需要这行了",\n        }}\n        itemRender={({ listDom, action }, meta) => {\n          console.log(meta, "meta");\n          return (\n            <ProCard\n              collapsible\n              defaultCollapsed={true}\n              bordered\n              size="small"\n              title={`事件${meta.index + 1}`}\n              style={{ marginBlockEnd: 8 }}\n              extra={action}\n              bodyStyle={{ paddingBlockEnd: 0 }}\n            >\n              {listDom}\n            </ProCard>\n          );\n        }}\n        creatorRecord={{\n          eventName: "handle$Event",\n        }}\n      >\n        // 子项目\n      </ProFormList>\n    </ProForm>\n'})}),"\n",(0,r.jsx)(e.p,{children:"创建好组件的展示后，如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:["将其放入列表子项目中展示，在这里我们使用",(0,r.jsx)(e.strong,{children:"AutoComplete"}),"组件来进行事件名称和绑定事件的展示。将之前使用",(0,r.jsx)(e.strong,{children:"useEditor"}),"获取到的",(0,r.jsx)(e.strong,{children:"eventOptions"}),"放入到绑定事件组件的Options当中。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'<ProFormItem style={{ padding: 0 }}\n          name="eventName"\n          label="事件名称" >\n          <AutoComplete onSearch={handleOnMoudleSearch} options={methodOptions}  />\n        </ProFormItem>\n        <ProFormItem style={{ padding: 0 }}\n          name="propName"\n          label="绑定事件"\n           >\n          <AutoComplete options={eventOptions} />\n        </ProFormItem>\n'})}),"\n",(0,r.jsxs)(e.p,{children:["事件名称通过",(0,r.jsx)(e.strong,{children:"AutoComplete"}),"在输入的时候搜索进行展示，为",(0,r.jsx)(e.strong,{children:"onSearch"}),"绑定了",(0,r.jsx)(e.strong,{children:"handleOnMoudleSearch"}),"方法，在输入时，会使用",(0,r.jsx)(e.strong,{children:"getHuosScopeJsModule"}),"获取挂载的模块空间内容，将",(0,r.jsx)(e.strong,{children:"key"}),"提取后使用",(0,r.jsx)(e.strong,{children:"includes"}),"做一个属性名称的简单匹配查询，并将结果展示到",(0,r.jsx)(e.strong,{children:"options"}),"当中。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:" const [methodOptions, setMethodOptions] = React.useState<any[]>([])\n\nconst handleOnMoudleSearch = (searchVal: string) => {\n   try {\n    console.log('handleOnMoudleSearch')\n    const jsMoudle =  getHuosScopeJsModule() || {}\n    const moudleKeys = Object.keys(jsMoudle)\n\n    const optionkeys = filter(moudleKeys, (key: string) => key.includes(searchVal))\n\n    setMethodOptions(toOptions(optionkeys))\n   } catch (error) {\n    console.log(error)\n   }\n  }\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"绑定事件",children:["绑定事件",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#绑定事件",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["当事件添加发生改变的时候，会触发",(0,r.jsx)(e.strong,{children:"ProForm"}),"的",(0,r.jsx)(e.strong,{children:"onValuesChange"}),"事件，在此时可以通过实现",(0,r.jsx)(e.strong,{children:"handleBindEventChange"}),"函数来将当前变化的数据保存到画布组件的",(0,r.jsx)(e.strong,{children:"__events"}),"属性当中进行使用。"]}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.strong,{children:"handleBindEventChange"}),"中使用",(0,r.jsx)(e.strong,{children:"actions.setProp"}),"设置当前表单数据中的",(0,r.jsx)(e.strong,{children:"events"}),"给 ",(0,r.jsx)(e.strong,{children:"__events"})," 属性，将其保存在组件",(0,r.jsx)(e.strong,{children:"props"}),"当中。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'const handleBindEventChange = (_: any, allValues: any) => {\n    \n    actions.setProp(nodeId, (setterProps) => {\n      setterProps.__events = allValues.events\n    })\n  }\n  \n  \n \n  <ProForm\n      style={{\n        height: "100%",\n      }}\n      layout="horizontal"\n      // onChange事件\n      onValuesChange={handleBindEventChange}\n      submitter={false}\n      form={form}\n    >\n'})}),"\n",(0,r.jsx)(e.p,{children:"与组件属性一样，在切换组件的时候会进行初始化并且重新加载表单属性，以此来展示不同组件的事件管理相关的数据显示。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// 当前编辑的组件发生改变，nodeId副作用更新了\n  React.useEffect(() => {\n    if (nodeId) {\n\n      /** 切换组件清除setter配置 */\n      form.resetFields()\n\n      /** 设置新组件内容属性配置 */\n      form.setFieldsValue({\n        events\n      })\n\n      console.log()\n    }\n  }, [nodeId])\n"})}),"\n",(0,r.jsx)(e.p,{children:"到此，我们就实现了如下图所示的效果，能够为组件协议添加事件绑定的函数处理。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsxs)(e.h3,{id:"withcomponent",children:["WithComponent",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#withcomponent",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在实现完事件管理器相关的逻辑后，接下来就是对",(0,r.jsx)(e.strong,{children:"__events"}),"进行解析，将其转换为事件属性执行。"]}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:["将__events事件单独解构出来，使用",(0,r.jsx)(e.strong,{children:"React.useMemo"}),"进行事件计算，",(0,r.jsx)(e.strong,{children:"getHuosScopeJsModule"}),"可以获取当前所有挂载的模块，通过",(0,r.jsx)(e.strong,{children:"lodash.forEach"}),"循环遍历 ",(0,r.jsx)(e.strong,{children:"__events"})," ，如果当前事件名称和绑定事件都存在的话，就将其添加到",(0,r.jsx)(e.strong,{children:"eventMap"}),"当中，最后返回",(0,r.jsx)(e.strong,{children:"eventMap"}),"对象将其作为",(0,r.jsx)(e.strong,{children:"eventProps"}),"传递给画布组件使用。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"/**\n * 将UI组件和装饰器\n * @param { React.FunctionComponent } WrappedComponent 设计组件\n */\nconst withConnectNode = (\n  WrappedComponent: React.ForwardRefExoticComponent<React.RefAttributes<any>>,\n): ReactMaterialComponent => {\n  return function ({ children, __events = [], ...props }: Record<string, any>) {\n    const {\n      connectors: { connect, drag },\n      id,\n      custom\n    } = useNode((evt) => ({\n      custom: evt.data.custom\n    }));\n    const memoizdProps = useParseBinding(props, id);\n\n    const jsModule = getHuosScopeJsModule()\n\n    const eventProps = React.useMemo(() => {\n      let eventMap: Record<string, Function> = {}\n      forEach(__events, (item) => {\n        if (item.propName && item.eventName) {\n          eventMap[item.propName] = jsModule?.[item.eventName] as Function\n        }\n      })\n      return eventMap\n    }, [__events])\n\n    return (\n      <ErrorBoundary fallbackRender={fallbackRender} >\n        <WrappedComponent ref={(dom) => {\n          if (custom.useResize) {\n            connect(dom)\n          } else {\n            connect(drag(dom))\n          }\n        }} {...memoizdProps} {...eventProps} >{children}</WrappedComponent>\n      </ErrorBoundary>\n    );\n  }\n};\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"先做展示，后面复杂的情况下需要为执行函数指定上下文。"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"使用",children:["使用",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"基于上述功能的实现，整个代码模块和事件管理器的通信就实现了，接下来通过一个示例来看看整体的效果吧："}),"\n",(0,r.jsxs)(e.h3,{id:"创建模块函数",children:["创建模块函数",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#创建模块函数",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["如下图所示，在JS模块编辑器中创建一个函数，并且使用",(0,r.jsx)(e.strong,{children:"export导出"}),"，内部实现一个",(0,r.jsx)(e.strong,{children:"alert"}),"的弹窗逻辑。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"具体的代码实现："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'export const onAlert = () => {\n    alert("我是js模块中绑定的alert事件")\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"绑定事件-1",children:["绑定事件",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#绑定事件-1",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["创建好",(0,r.jsx)(e.strong,{children:"JS模块"}),"并且保存完成之后，拖动 一个按钮组件到画布中，为其指定一个",(0,r.jsx)(e.strong,{children:"onClick事件"}),"的元素，将刚才声明好的",(0,r.jsx)(e.strong,{children:"onAlert"}),"为其绑定。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["此时此时控制台调试",(0,r.jsx)(e.strong,{children:"eventProps"}),"的输出就会发现， ",(0,r.jsx)(e.strong,{children:"__events"})," 已经转换成为了对应的模块函数。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(e.h3,{id:"执行",children:["执行",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#执行",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["当",(0,r.jsx)(e.strong,{children:"eventProps"}),"透传到画布组件的时候，此时",(0,r.jsx)(e.strong,{children:"onClick"}),"已经转换为对应的事件函数，点击按钮后会在页面当中",(0,r.jsx)(e.strong,{children:"alert"}),"我们当前函数内的提示。"]}),"\n",(0,r.jsx)(e.p,{children:"如下图所示："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(e.h2,{id:"依赖管理",children:["依赖管理",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#依赖管理",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在日常开发过程中，我们有很多",(0,r.jsx)(e.strong,{children:"第三方npm包"}),"能够帮助我们处理业务相关的逻辑，那么JS模块必然不能缺少这方面的实现。"]}),"\n",(0,r.jsx)(e.p,{children:"如下图所示："}),"\n",(0,r.jsxs)(e.p,{children:["我想在JS模块中使用",(0,r.jsx)(e.strong,{children:"lodash"}),"，但是编译的时候发现",(0,r.jsx)(e.strong,{children:"lodash"}),"没找到，"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["在此基础之上，可以使用",(0,r.jsx)(e.strong,{children:"compileModuleResolve"}),"传递第二个属性将定义好的依赖传递给编译函数，从而来完成",(0,r.jsx)(e.strong,{children:"npm的加载和自定义包的内容"}),"。"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"需要注意的是，这里一般是不推荐你直接传递本地的npm包的，在之前已经实现了远程依赖的加载，一般而言compileModuleResolve的来源都是在线安装的依赖包。后面要实现的就是基于容器的在线依赖安装，从而将代码模块逐步完善到接近本地开发级别的体验操作。"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"useAsyncEffect(async () => {\n    const cjsCode = await sucraseTransformCode(jsMoudleCode)\n    console.log(cjsCode, 'cjsCode')\n    const { exports  } = compileModuleResolve(cjsCode, {\n      dayjs,\n      \"@huso/store\": {\n        getState: () => {\n          console.log('我是get方法')\n        },\n        setState: () => {\n          console.log(\"我是set方法\")\n        }\n      }\n    });\n    (window as any)[ScopeMoudleId] = {\n      jsMoudle: exports\n    }\n  }, [jsMoudleCode])\n"})}),"\n",(0,r.jsxs)(e.p,{children:["如下图所示，当前通过",(0,r.jsx)(e.strong,{children:"import引入"}),"进来的模块就可以被编译好的",(0,r.jsx)(e.strong,{children:"commonjs导出函数"}),"识别，并且成功执行加载。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"需要注意的是，事件的上下文需要做特殊处理。"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"到此，整个消息通信的内容第一阶段就已经完成了，目前而言基本打通了整个组件的事件通信系统，主要分为几个节点模块："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"模块编译"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"模块挂载"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"组件注册"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"事件执行"})}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"基于以上的一些流程链路，基本上能够满足大部分事件的处理，在JS模块当中可以将之前实现的状态管理相关的实现通过虚拟模块的形式引入进来，从而实现事件与状态的通信联动。"}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"getState、setState"}),"的实现为",(0,r.jsx)(e.strong,{children:"redux"}),"或者是",(0,r.jsx)(e.strong,{children:"zustand"}),"状态管理获取状态和 设置状态的实例方法。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { getState, setState } from '@huso/store'\n"})}),"\n",(0,r.jsx)(e.p,{children:"通过此手段即可达到事件改变状态，引导视图发生改变，控制不同组件绑定状态属性的展示。\n在此基础之上，就可以根据相应的逻辑来逐步扩展代码模块的能力，从而实现整个编辑器页面所有组件的一个逻辑处理联动和消息通信。"})]})}function g(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(j,{...n})}):j(n)}let m=g;g.__RSPRESS_PAGE_META={},g.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F46.%E9%A1%B9%E7%9B%AE%E8%BF%9B%E9%98%B6%EF%BC%9A%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1-%E4%BA%8B%E4%BB%B6%E8%81%94%E5%8A%A8.md"]={toc:[{text:"实现思路",id:"实现思路",depth:2},{text:"实现过程",id:"实现过程",depth:2},{text:"物料组件",id:"物料组件",depth:3},{text:"MountEvents",id:"mountevents",depth:3},{text:"绑定事件",id:"绑定事件",depth:3},{text:"WithComponent",id:"withcomponent",depth:3},{text:"使用",id:"使用",depth:3},{text:"创建模块函数",id:"创建模块函数",depth:3},{text:"绑定事件",id:"绑定事件-1",depth:3},{text:"执行",id:"执行",depth:3},{text:"依赖管理",id:"依赖管理",depth:2},{text:"总结",id:"总结",depth:2}],title:"46.项目进阶：消息通信-事件联动",headingTitle:"46.项目进阶：消息通信-事件联动",frontmatter:{}}}}]);