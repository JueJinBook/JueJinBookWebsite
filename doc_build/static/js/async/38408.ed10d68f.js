"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["38408"],{799710:function(e,n,r){r.r(n),r.d(n,{default:()=>k});var a=r(552676),s=r(740453);let i=r.p+"static/image/6db1f9940375e04b3821c4ef4068641d.c2deffbc.webp",c=r.p+"static/image/f697d8a625d5d16065949dc8cd23d023.018676fa.webp",t=r.p+"static/image/fbb84f505459a11ee8482fc73cede13b.b7670356.webp",d=r.p+"static/image/0f05a25df2a15fc8749530dc3d7e52b4.016cbafb.webp",l=r.p+"static/image/7e00cbb6077f4098c1e089704f3b0748.36f52fee.webp",p=r.p+"static/image/38d47810af05009b86494df9035417ed.3ed8ac87.webp",j=r.p+"static/image/a4dd9f36a0ba34d2889f6e547965bfcd.f05506d4.webp",m=r.p+"static/image/47e279b12fa003ea225273676ac17631.63afa651.webp",o=r.p+"static/image/133d885cd738c83aaa379a9c1ed70ded.a5c69cc5.webp",h=r.p+"static/image/e74b085cf4051ca33109dbf727442524.cdb16f0a.webp",x=r.p+"static/image/2c5a069c41abf4a04baa701daf23ca45.1079d05b.webp",b=r.p+"static/image/688f9fb00bfb237b0f648a1177d3251f.041a17b6.webp",f=r.p+"static/image/ca7526cdf1abc530287e0f7020ac5148.b7d38e62.webp",g=r.p+"static/image/6e07cfdb3375cf95d40b92f6adc794e9.d4028ed9.webp",v=r.p+"static/image/7263bd6f35d6244bbe9d33378dfb8f1a.85b812a0.webp",u=r.p+"static/image/78ce9b57c682fa537caaefa131c843d0.d6761ce6.webp",E=r.p+"static/image/0c14de124b199199b525dafd3818bfb5.e0b07ccf.webp",w=r.p+"static/image/61e47360d8b93f0941b2fe627caa53f7.ffe5d685.webp",S=r.p+"static/image/4be280d05fce0c3a6bd27aa7132daa05.9da30719.webp",A=r.p+"static/image/1236db0c1c453e3d13b9b0bceb43fe74.fc94b9ca.webp",B=r.p+"static/image/d8cf62a2052990cb0c449d3c69578f59.aa7de5f1.webp",M=r.p+"static/image/df33b1a8711ca0d6aecc78649336ed43.f50e96b6.webp",N=r.p+"static/image/0a8860723c380a7e6f68cfff142f60ad.af89cff3.webp";function _(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"93-nest-里如何实现事件通信",children:["93. Nest 里如何实现事件通信？",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#93-nest-里如何实现事件通信",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"后端应用中会有很多业务模块，这些业务模块之间会有互相调用的关系。"}),"\n",(0,a.jsx)(n.p,{children:"但是把一个业务模块作为依赖注入的别的业务模块也不大好。"}),"\n",(0,a.jsx)(n.p,{children:"比如下单送优惠券的活动，订单模块在订单完成后调用优惠券模块下发优惠券。"}),"\n",(0,a.jsx)(n.p,{children:"这种如果直接把优惠券模块注入到订单模块里就不大好，因为是两个独立的业务模块。"}),"\n",(0,a.jsx)(n.p,{children:"有没有别的通信方式呢？"}),"\n",(0,a.jsx)(n.p,{children:"有，比如通过 event emitter 通信。"}),"\n",(0,a.jsx)(n.p,{children:"我们试一下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"nest new event-emitter-test\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:N,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm i --save @nestjs/event-emitter\n"})}),"\n",(0,a.jsx)(n.p,{children:"在 AppModule 引入下 EventEmitterModule："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\n\n@Module({\n  imports: [\n    EventEmitterModule.forRoot(),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后创建两个 module："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:M,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:B,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:A,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"访问下 aaa 和 bbb 的接口："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:S,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:w,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,a.jsx)(n.p,{children:"然后我们想在 aaa 模块的查询触发的时候，调用 bbb 模块记录一条日志呢？"}),"\n",(0,a.jsx)(n.p,{children:"这时候就可以用 Event Emitter 来做。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:E,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Inject(EventEmitter2)\nprivate eventEmitter: EventEmitter2;\n\nfindAll() {\n    this.eventEmitter.emit('aaa.find',{\n      data: 'xxxx'\n    })\n    return `This action returns all aaa`;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"在 AaaService 里注入 EventEmitter2，然后调用它的 emit 方法发送一个事件。"}),"\n",(0,a.jsx)(n.p,{children:"然后在 BbbService 里监听下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:u,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@OnEvent('aaa.find')\nhandleAaaFind(data) {\n    console.log('aaa find 调用', data)\n    this.create(new CreateBbbDto());\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"试一下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:v,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以看到 AaaService 的 findAll 调用的时候，自动触发了 BbbService 里的方法调用。"}),"\n",(0,a.jsx)(n.p,{children:"是不是很方便？"}),"\n",(0,a.jsx)(n.p,{children:"如果你没感觉出来，那想一下不通过事件怎么做呢？"}),"\n",(0,a.jsx)(n.p,{children:"是不是需要在 BbbModule 里把 BbbService 放到 exports 里声明，然后在 AaaModule 里引入之后 BbbModule 之后，注入它的 BbbService 来用呢？"}),"\n",(0,a.jsx)(n.p,{children:"或者通过全局模块，把 BbbModule 通过 @Global 声明为全局模块，然后在 AaaService 里注入 BbbService 来调用呢？"}),"\n",(0,a.jsx)(n.p,{children:"不管哪种都很麻烦。"}),"\n",(0,a.jsx)(n.p,{children:"而通过事件的方式就简单太多了。"}),"\n",(0,a.jsx)(n.p,{children:"此外，EventEmitterModule 还支持一些配置："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:f,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"wildcard 是允许通配符 *。"}),"\n",(0,a.jsx)(n.p,{children:"delimiter 是 namespace 和事件名的分隔符。"}),"\n",(0,a.jsx)(n.p,{children:"配置之后就可以这样用了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:b,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"findAll() {\n    this.eventEmitter.emit('aaa.find',{\n      data: 'xxxx'\n    })\n\n    this.eventEmitter.emit('aaa.find2',{\n      data: 'xxxx2'\n    })\n    return `This action returns all aaa`;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"BbbService 里可以用 aaa.* 通配符匹配："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:x,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"event emitter 用起来很简单，但却很有用，比直接引入模块注入依赖的方式方便太多了。"}),"\n",(0,a.jsx)(n.p,{children:"我们来做个具体案例，用户注册成功之后，通知模块里发送欢迎邮件："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"nest g resource user --no-spec\nnest g resource notification --no-spec\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:m,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:j,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"nest g module email\nnest g service email --no-spec\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"创建 user 用户模块、notification 通知模块，email 邮件模块。"}),"\n",(0,a.jsx)(n.p,{children:"先来写下邮件模块："}),"\n",(0,a.jsx)(n.p,{children:"安装 nodemailer 包："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install --save nodemailer\n"})}),"\n",(0,a.jsx)(n.p,{children:"写下 EmailService："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Injectable } from \'@nestjs/common\';\nimport { createTransport, Transporter} from \'nodemailer\';\n\n@Injectable()\nexport class EmailService {\n\n    transporter: Transporter\n    \n    constructor() {\n      this.transporter = createTransport({\n          host: "smtp.qq.com",\n          port: 587,\n          secure: false,\n          auth: {\n              user: "你的用户名",\n              pass: "你的授权码"\n          },\n      });\n    }\n\n    async sendMail({ to, subject, html }) {\n      await this.transporter.sendMail({\n        from: {\n          name: \'系统邮件\',\n          address: "你的邮箱地址"\n        },\n        to,\n        subject,\n        html\n      });\n    }\n\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["如何获取授权码看 ",(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7226988578700525605/section/7247327089496424505",target:"_blank",rel:"noopener noreferrer",children:"node 发邮件"}),"那节。"]}),"\n",(0,a.jsx)(n.p,{children:"然后把 EmailModule 声明为全局模块："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { Global, Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\n\n@Global()\n@Module({\n  providers: [EmailService],\n  exports: [EmailService]\n})\nexport class EmailModule {}\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"这样 NotificationService 里就可以直接注入 EmailService 了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Inject(EmailService)\nprivate emailService: EmailService\n\n@OnEvent(\"user.register\")\nasync hanldeUserRegister(data) {\n    console.log('user.register');\n\n    await this.emailService.sendMail({\n      to: data.email,\n      subject: '欢迎' + data.username,\n      html: '欢迎新人'\n    })\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后在 CreateUserDto 添加两个属性："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export class CreateUserDto {\n    username: string;\n    email: string;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"在 create 的时候调用下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Inject(EventEmitter2)\nprivate eventEmitter: EventEmitter2;\n\ncreate(createUserDto: CreateUserDto) {\n    this.eventEmitter.emit('user.register', {\n      username: createUserDto.username,\n      email: createUserDto.email\n    })\n\n    return 'This action adds a new user';\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"在 postman 里调用下 create 接口："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:t,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"通知成功了！"}),"\n",(0,a.jsxs)(n.p,{children:["案例代码上传了",(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/event-emitter-test",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,a.jsxs)(n.h2,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"多个业务模块之间可能会有互相调用的关系，但是也不方便直接注入别的业务模块的 Service 进来。"}),"\n",(0,a.jsx)(n.p,{children:"这种就可以通过 EventEmitter 来实现。"}),"\n",(0,a.jsx)(n.p,{children:"在一个 service 里 emit 事件和 data，另一个 service 里 @OnEvent 监听这个事件就可以了。"}),"\n",(0,a.jsx)(n.p,{children:"用起来很简单，但比起注入别的模块的 service 方便太多了。"})]})}function C(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(_,{...e})}):_(e)}let k=C;C.__RSPRESS_PAGE_META={},C.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F93.%20Nest%20%E9%87%8C%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BA%8B%E4%BB%B6%E9%80%9A%E4%BF%A1%EF%BC%9F.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"93. Nest 里如何实现事件通信？",headingTitle:"93. Nest 里如何实现事件通信？",frontmatter:{}}}}]);