"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["11789"],{808286:function(e,n,t){e.exports=t.p+"static/image/0e5571907546ecbd1473d674acbedd12.72f53b6a.webp"},347533:function(e,n,t){e.exports=t.p+"static/image/457e87ae3d93ebfbd06fb768781787b7.08eaac4e.webp"},316418:function(e,n,t){e.exports=t.p+"static/image/4bd5644d7506ef47a4149b02d15a947b.1b5921a2.webp"},213207:function(e,n,t){e.exports=t.p+"static/image/51efac33d0dc06d6eefb489b383e5197.1c98b066.gif"},864734:function(e,n,t){e.exports=t.p+"static/image/f6d9852d32a4d7ed1353a46e6b012c22.d829dcba.webp"},31227:function(e,n,t){t.r(n),t.d(n,{default:()=>H});var i=t(552676),r=t(740453),s=t(213207);let a=t.p+"static/image/934234511d734b36093b5af78c43e886.ab754554.webp";var o=t(347533),d=t(316418),c=t(864734);let p=t.p+"static/image/e956685529534c103ef2e5bb4319ffcd.f3375256.webp",m=t.p+"static/image/982e354399238a8eea389f56b3a6f349.19717770.webp",u=t.p+"static/image/4ff112e9694b26a8e8f8321693b49b73.bf23da5b.gif",l=t.p+"static/image/86e39740ddaf8ec70fb9d40a41feb343.36e08852.webp",h=t.p+"static/image/14d7a72effd7232a78bffae158fd7aa7.56511a8a.webp",g=t.p+"static/image/a0f0e88c7c9056a0e36a998eb2928721.365bad51.webp",f=t.p+"static/image/e68f82287bdfffe252a4fa7fb6bd825b.b1660580.webp",x=t.p+"static/image/1a0a2e44126f59961615a1d156cb15e2.677dc6df.webp",b=t.p+"static/image/3b9242721f686656c38a579824c659e7.20609950.webp",j=t.p+"static/image/cb457aaa5ae4ba82ad68214b006fc24a.e51f5f4f.webp",v=t.p+"static/image/d16abe230515f33e5928a105317d2b12.d994b604.webp",w=t.p+"static/image/1e7e4c8ef6fa650d2e95056f7b78f286.831d517f.webp",k=t.p+"static/image/e90954804d1a9507e32d4bd970a9d110.27cb873b.webp",O=t.p+"static/image/46d71af18f3deb82c029d2304c9beecc.9fea6ef2.webp",W=t.p+"static/image/a20cf04c21da6ae0cf16ede389f2a4b0.abebd028.webp",q=t.p+"static/image/0bed09dab67d001ce4e4627d97f19935.3634d88a.webp",S=t.p+"static/image/d20e85fdeb040c47db989dbb6ae460fc.712e2981.webp",y=t.p+"static/image/f93c637238c6267579a94b2b81978a78.26ba3007.webp",E=t.p+"static/image/3fa0e138604096b7d3a009ae419bad1a.e8599563.webp",N=t.p+"static/image/67068a90a865b4ea3de544e1ab741dfe.92d8fb13.webp";var z=t(808286);let C=t.p+"static/image/76d309714f6f8d3dd4b054310c95718f.faa5dffd.webp",P=t.p+"static/image/174b06a97115f94ce134a85f075fad9c.7538cfe2.webp",L=t.p+"static/image/96a0e4156603806f1697521e7d6a9837.54048d36.webp",R=t.p+"static/image/553ad8007d495264f0b52f90105ee1ac.142fba35.webp",M=t.p+"static/image/b1a0a104404552fdfbf20439b13d0fcd.2f592714.webp",A=t.p+"static/image/a6268bf45778a75156b218a5164949e4.601ea199.webp",B=t.p+"static/image/b475119679f19e4621de2692d1732119.d3207b9d.webp",D=t.p+"static/image/b22a700c94c6309780155e540d7f2ed1.4706db83.webp",I=t.p+"static/image/d9f0e96d6c1c65ee4e2f6e7742276854.ac2f1e27.webp",$=t.p+"static/image/879ea6c939afdac365896c507365c756.5d7475cf.webp",T=t.p+"static/image/389098d1cd09cba8cd95285d51221cd6.9b57ccd5.webp",F=t.p+"static/image/c9f4a3d16e9566379a4b2249f15e0e8c.48a3aa00.webp";function Q(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",strong:"strong",pre:"pre",code:"code",h2:"h2"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"第18章组件实战watermark防删除水印组件",children:["第18章—组件实战：Watermark防删除水印组件",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第18章组件实战watermark防删除水印组件",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\uFEFF很多网页会加上水印，用于版权标识、防止盗用等。"}),"\n",(0,i.jsx)(n.p,{children:"比如这样："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:F,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://ant.design/components/watermark-cn/",target:"_blank",rel:"noopener noreferrer",children:"ant design"})," 和 ",(0,i.jsx)(n.a,{href:"https://arco.design/react/components/watermark",target:"_blank",rel:"noopener noreferrer",children:"arco design"})," 都提供了 Watermark 水印组件。"]}),"\n",(0,i.jsx)(n.p,{children:"这种水印是咋实现的呢？"}),"\n",(0,i.jsx)(n.p,{children:"调试下就知道了："}),"\n",(0,i.jsx)(n.p,{children:"arco design 的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"ant desigin 的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:$,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"首先，有一个 div 覆盖在需要加水印的区域，宽高 100%，绝对定位，设置 pointer-events:none 也就是不响应鼠标事件。"}),"\n",(0,i.jsx)(n.p,{children:"然后 background 设置 repeat，用 background image 平铺。"}),"\n",(0,i.jsx)(n.p,{children:"那这个 image 是什么呢？"}),"\n",(0,i.jsx)(n.p,{children:"点击这个 data url："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:I,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:D,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"是个包含文字的图片。"}),"\n",(0,i.jsx)(n.p,{children:"而我们并没有传入图片作为参数："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以说要用 canvas 画出来，做一些旋转，并导出 base64 的图片，作为这个 div 的背景就好了。"}),"\n",(0,i.jsx)(n.p,{children:"当然，也可以传入图片作为水印："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:M,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"同样是用 canvas 画出来。"}),"\n",(0,i.jsx)(n.p,{children:"那怎么画呢？"}),"\n",(0,i.jsxs)(n.p,{children:["根据",(0,i.jsx)(n.a,{href:"https://ant.design/components/watermark-cn#watermark",target:"_blank",rel:"noopener noreferrer",children:"传入的参数"}),"来画："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"上面是 antd 的 Watermark 组件的参数。"}),"\n",(0,i.jsx)(n.p,{children:"可以传入宽高、旋转角度、字体样式、水印间距、水印偏移等。"}),"\n",(0,i.jsx)(n.p,{children:"虽然参数很多，但只是一些细节。"}),"\n",(0,i.jsx)(n.p,{children:"arco design 的 Watermark 组件画出的图片是上面的样子，所以 repeat 之后是这样的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:L,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"如果仔细看你会发现 ant design 的 Watermark 组件是这样的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:P,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"交错排列的。"}),"\n",(0,i.jsx)(n.p,{children:"这是因为它 canvas 画的内容就是交错的 2 个："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["整体思路是很清晰的：",(0,i.jsx)(n.strong,{children:"用 canvas 把文字或者图片画出来，导出 base64 的 data url 设置为 div 的重复背景，这个 div 整个覆盖在需要加水印的元素上，设置 pointer-events 是 none。"})]}),"\n",(0,i.jsx)(n.p,{children:"此外，上节还讲过通过 MutationObserver 监听 dom 的修改，改了之后重新添加水印。"}),"\n",(0,i.jsx)(n.p,{children:"antd 就是这么做的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:z,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"思路理清了，我们来写下代码："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"npx create-vite\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:N,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"去掉 index.css 和 StrictMode："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后写下 Watermark/index.tsx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { useRef, PropsWithChildren, CSSProperties, FC } from 'react';\n\nexport interface WatermarkProps extends PropsWithChildren {\n    style?: CSSProperties;\n    className?: string;\n    zIndex?: string | number;\n    width?: number;\n    height?: number;\n    rotate?: number;\n    image?: string;\n    content?: string | string[];\n    fontStyle?: {\n      color?: string;\n      fontFamily?: string;\n      fontSize?: number | string;\n      fontWeight?: number | string;\n    };\n    gap?: [number, number];\n    offset?: [number, number];\n    getContainer?: () => HTMLElement;\n}\n  \n\nconst Watermark: FC<WatermarkProps>  = (props) => {\n\n    const {\n        className,\n        style,\n        zIndex,\n        width,\n        height,\n        rotate,\n        image,\n        content,\n        fontStyle,\n        gap,\n        offset\n    } = props;\n\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    return props.children ? (\n        <div\n            className={className}\n            style={style}\n            ref={containerRef}\n        >\n            {props.children}\n        </div>\n    ) : null;\n}\n\nexport default Watermark;\n"})}),"\n",(0,i.jsx)(n.p,{children:"style、className 就不用解释了。"}),"\n",(0,i.jsx)(n.p,{children:"width、height、rotate、offset、gap 等都是水印的参数："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"gap 是两个水印之间的空白距离。"}),"\n",(0,i.jsx)(n.p,{children:"offset 是水印相对于 container 容器的偏移量，也就是左上角的空白距离。"}),"\n",(0,i.jsx)(n.p,{children:"然后我们封装个 useWatermark 的自定义 hook 来绘制水印："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { useRef, PropsWithChildren, CSSProperties, FC, useCallback, useEffect } from 'react';\nimport useWatermark from './useWatermark';\n\nexport interface WatermarkProps extends PropsWithChildren {\n    style?: CSSProperties;\n    className?: string;\n    zIndex?: string | number;\n    width?: number;\n    height?: number;\n    rotate?: number;\n    image?: string;\n    content?: string | string[];\n    fontStyle?: {\n      color?: string;\n      fontFamily?: string;\n      fontSize?: number | string;\n      fontWeight?: number | string;\n    };\n    gap?: [number, number];\n    offset?: [number, number];\n    getContainer?: () => HTMLElement;\n}\n\nconst Watermark: FC<WatermarkProps>  = (props) => {\n\n    const {\n        className,\n        style,\n        zIndex,\n        width,\n        height,\n        rotate,\n        image,\n        content,\n        fontStyle,\n        gap,\n        offset\n    } = props;\n\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const getContainer = useCallback(() => {\n        return props.getContainer ? props.getContainer() : containerRef.current!;\n    }, [containerRef.current, props.getContainer]);\n\n    const { generateWatermark } = useWatermark({\n        zIndex,\n        width,\n        height,\n        rotate,\n        image,\n        content,\n        fontStyle,\n        gap,\n        offset,\n        getContainer,\n    });\n\n    useEffect(() => {\n        generateWatermark({\n            zIndex,\n            width,\n            height,\n            rotate,\n            image,\n            content,\n            fontStyle,\n            gap,\n            offset,\n            getContainer,\n        });\n    }, [\n        zIndex,\n        width,\n        height,\n        rotate,\n        image,\n        content,\n        JSON.stringify(props.fontStyle),\n        JSON.stringify(props.gap),\n        JSON.stringify(props.offset),\n        getContainer,\n    ]);\n\n    return props.children ? (\n        <div\n            className={className}\n            style={style}\n            ref={containerRef}\n        >\n            {props.children}\n        </div>\n    ) : null;\n}\n\nexport default Watermark;\n"})}),"\n",(0,i.jsx)(n.p,{children:"getContainer 默认用 containerRef.current，或者传入的 props.getContainer。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"调用 useWatermark，返回 generateWatermark 方法。"}),"\n",(0,i.jsx)(n.p,{children:"然后当参数变化的时候，重新调用 generateWatermark 绘制水印。"}),"\n",(0,i.jsx)(n.p,{children:"getContainer 我们加了 useCallback 避免每次都变，对象参数（fontSize）、数组参数（gap、offset）用 JSON.stringify 序列化后再放到 deps 数组里："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:q,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后来实现 useWatermark 的 hook。"}),"\n",(0,i.jsx)(n.p,{children:"新建 Watermark/useWatermark.ts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { useEffect, useState } from 'react';\nimport { WatermarkProps } from '.';\nimport { merge } from 'lodash-es';\n\nexport type WatermarkOptions = Omit<WatermarkProps, 'className' | 'style' | 'children'>; \n\nexport default function useWatermark(params: WatermarkOptions) {\n  const [options, setOptions] = useState(params || {});\n  \n  function drawWatermark() {\n\n  }\n\n  useEffect(() => {\n    drawWatermark();\n  }, [options]);\n\n  return {\n    generateWatermark: (newOptions: Partial<WatermarkOptions>) => {\n      setOptions(merge({}, options, newOptions));\n    },\n    destroy: () => {\n    },\n  };\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"参数就是 WatermarkProps 去了 style、className、children。"}),"\n",(0,i.jsx)(n.p,{children:"把传入的参数保存到 options 的 state，根据它渲染。"}),"\n",(0,i.jsx)(n.p,{children:"调用返回的 generateWatermark 的时候设置 options 触发重绘。"}),"\n",(0,i.jsx)(n.p,{children:"这里用到了 lodash-es 包的 merge 来合并参数。"}),"\n",(0,i.jsx)(n.p,{children:"安装下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"npm install --save lodash-es\n\nnpm i --save-dev @types/lodash-es\n"})}),"\n",(0,i.jsx)(n.p,{children:"然后来处理下 options，和默认 options 做下合并："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:W,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这里的 toNumber 会把第一个参数转为 number，如果不是数字的话就返回第二个参数的默认值："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:O,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"具体的合并逻辑是这样的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:w,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"先合并传入的 options"}),"\n",(0,i.jsx)(n.p,{children:"然后如果没有传入的会用默认值。"}),"\n",(0,i.jsx)(n.p,{children:"fontStyle 是默认 fontStyle 和传入的 fontStyle 的合并"}),"\n",(0,i.jsx)(n.p,{children:"width 的默认值，如果是图片就用默认 width，否则 undefined，因为后面文字宽度是动态算的。"}),"\n",(0,i.jsx)(n.p,{children:"offset 的默认值是 0。"}),"\n",(0,i.jsx)(n.p,{children:"因为处理完之后肯定是有值的，所以断言为 Required<WatermarkOptions> 类型。"}),"\n",(0,i.jsx)(n.p,{children:"这个 Required 是去掉可选用的，相对的，Partial 是给属性添加可选修饰。"}),"\n",(0,i.jsx)(n.p,{children:"合并完之后，就拿到绘制的 options 了。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { useEffect, useRef, useState } from 'react';\nimport { WatermarkProps } from '.';\nimport { merge } from 'lodash-es';\n\nexport type WatermarkOptions = Omit<WatermarkProps, 'className' | 'style' | 'children'>; \n\nexport function isNumber(obj: any): obj is number {\n  return Object.prototype.toString.call(obj) === '[object Number]' && obj === obj;\n}\n\nconst toNumber = (value?: string | number, defaultValue?: number) => {\n  if(value === undefined) {\n    return defaultValue;\n  }\n  if (isNumber(value)) {\n    return value;\n  }\n  const numberVal = parseFloat(value);\n  return isNumber(numberVal) ? numberVal : defaultValue;\n};\n\nconst defaultOptions = {\n  rotate: -20,\n  zIndex: 1,\n  width: 100,\n  gap: [100, 100],\n  fontStyle: {\n    fontSize: '16px',\n    color: 'rgba(0, 0, 0, 0.15)',\n    fontFamily: 'sans-serif',\n    fontWeight: 'normal',\n  },\n  getContainer: () => document.body,\n};\n\nconst getMergedOptions = (o: Partial<WatermarkOptions>) => {\n  const options = o || {};\n\n  const mergedOptions = {\n    ...options,\n    rotate: options.rotate || defaultOptions.rotate,\n    zIndex: options.zIndex || defaultOptions.zIndex,\n    fontStyle: { ...defaultOptions.fontStyle, ...options.fontStyle },\n    width: toNumber(options.width, options.image ? defaultOptions.width : undefined),\n    height: toNumber(options.height, undefined)!,\n    getContainer: options.getContainer!,\n    gap: [\n      toNumber(options.gap?.[0], defaultOptions.gap[0]),\n      toNumber(options.gap?.[1] || options.gap?.[0], defaultOptions.gap[1]),\n    ],\n  } as Required<WatermarkOptions>;\n\n  const mergedOffsetX = toNumber(mergedOptions.offset?.[0], 0)!;\n  const mergedOffsetY = toNumber(mergedOptions.offset?.[1] || mergedOptions.offset?.[0], 0)!;\n  mergedOptions.offset = [ mergedOffsetX, mergedOffsetY ];\n\n  return mergedOptions;\n};\n\nexport default function useWatermark(params: WatermarkOptions) {\n  const [options, setOptions] = useState(params || {});\n\n  const mergedOptions = getMergedOptions(options);\n\n  function drawWatermark() {\n\n  }\n\n  useEffect(() => {\n    drawWatermark();\n  }, [options]);\n\n  return {\n    generateWatermark: (newOptions: Partial<WatermarkOptions>) => {\n      setOptions(merge({}, options, newOptions));\n    },\n    destroy: () => {\n    },\n  };\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"有了 options，接下来创建 dom，开始绘制："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"用 useRef 保存水印元素的 dom。"}),"\n",(0,i.jsx)(n.p,{children:"调用 getCanvasData 方法来绘制，返回 base64Url、width、height 这些信息。"}),"\n",(0,i.jsx)(n.p,{children:"生成水印的 dom 元素，挂载到 container 下，设置 style。"}),"\n",(0,i.jsx)(n.p,{children:"注意 background-size 是 gap + width、gap + height 算出的。"}),"\n",(0,i.jsx)(n.p,{children:"接下来只要实现 getCanvasData 方法，用 cavas 画出水印就好了。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { useEffect, useRef, useState } from 'react';\nimport { WatermarkProps } from '.';\nimport { merge } from 'lodash-es';\n\nexport type WatermarkOptions = Omit<WatermarkProps, 'className' | 'style' | 'children'>; \n\nexport function isNumber(obj: any): obj is number {\n  return Object.prototype.toString.call(obj) === '[object Number]' && obj === obj;\n}\n\nconst toNumber = (value?: string | number, defaultValue?: number) => {\n  if(!value) {\n    return defaultValue;\n  }\n  if (isNumber(value)) {\n    return value;\n  }\n  const numberVal = parseFloat(value);\n  return isNumber(numberVal) ? numberVal : defaultValue;\n};\n\nconst defaultOptions = {\n  rotate: -20,\n  zIndex: 1,\n  width: 100,\n  gap: [100, 100],\n  fontStyle: {\n    fontSize: '16px',\n    color: 'rgba(0, 0, 0, 0.15)',\n    fontFamily: 'sans-serif',\n    fontWeight: 'normal',\n  },\n  getContainer: () => document.body,\n};\n\nconst getMergedOptions = (o: Partial<WatermarkOptions>) => {\n  const options = o || {};\n\n  const mergedOptions = {\n    ...options,\n    rotate: options.rotate || defaultOptions.rotate,\n    zIndex: options.zIndex || defaultOptions.zIndex,\n    fontStyle: { ...defaultOptions.fontStyle, ...options.fontStyle },\n    width: toNumber(options.width, options.image ? defaultOptions.width : undefined),\n    height: toNumber(options.height, undefined)!,\n    getContainer: options.getContainer!,\n    gap: [\n      toNumber(options.gap?.[0], defaultOptions.gap[0]),\n      toNumber(options.gap?.[1] || options.gap?.[0], defaultOptions.gap[1]),\n    ],\n  } as Required<WatermarkOptions>;\n\n  const mergedOffsetX = toNumber(mergedOptions.offset?.[0], 0)!;\n  const mergedOffsetY = toNumber(mergedOptions.offset?.[1] || mergedOptions.offset?.[0], 0)!;\n  mergedOptions.offset = [ mergedOffsetX, mergedOffsetY ];\n\n  return mergedOptions;\n};\n\n\n\nconst getCanvasData = async (\n  options: Required<WatermarkOptions>,\n): Promise<{ width: number; height: number; base64Url: string }> => {\n\n};\n\n\n\nexport default function useWatermark(params: WatermarkOptions) {\n  const [options, setOptions] = useState(params || {});\n\n  const mergedOptions = getMergedOptions(options);\n  const watermarkDiv = useRef<HTMLDivElement>();\n\n  const container = mergedOptions.getContainer();\n  const { zIndex, gap } = mergedOptions;\n\n  function drawWatermark() {\n    if (!container) {\n      return;\n    }\n\n    getCanvasData(mergedOptions).then(({ base64Url, width, height }) => {\n      const wmStyle = `\n      width:100%;\n      height:100%;\n      position:absolute;\n      top:0;\n      left:0;\n      bottom:0;\n      right:0;\n      pointer-events: none;\n      z-index:${zIndex};\n      background-position: 0 0;\n      background-size:${gap[0] + width}px ${gap[1] + height}px;\n      background-repeat: repeat;\n      background-image:url(${base64Url})`;\n\n      if (!watermarkDiv.current) {\n        const div = document.createElement('div');\n        watermarkDiv.current = div;\n        container.append(div);\n        container.style.position = 'relative';\n      }\n\n      watermarkDiv.current?.setAttribute('style', wmStyle.trim());\n    });\n  }\n\n  useEffect(() => {\n    drawWatermark();\n  }, [options]);\n\n  return {\n    generateWatermark: (newOptions: Partial<WatermarkOptions>) => {\n      setOptions(merge({}, options, newOptions));\n    },\n    destroy: () => {\n    },\n  };\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"接下来实现 getCanvasData 方法。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"创建个 canvas 元素，拿到画图用的 context。"}),"\n",(0,i.jsx)(n.p,{children:"封装 drawText、drawImage 两个方法，优先绘制 image。"}),"\n",(0,i.jsx)(n.p,{children:"然后封装个 configCanvas 方法，用来设置 canvas 的宽高、rotate、scale："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"宽高同样是 gap + width、gap + height。"}),"\n",(0,i.jsx)(n.p,{children:"用 tanslate 移动中心点到 宽高的一半的位置再 schale、rotate。"}),"\n",(0,i.jsx)(n.p,{children:"因为不同屏幕的设备像素比不一样，也就是 1px 对应的物理像素不一样，所以要在单位后面乘以 devicePixelRatio。"}),"\n",(0,i.jsx)(n.p,{children:"我们设置了 scale 放大 devicePixelRatio 倍，这样接下来绘制尺寸就不用乘以设备像素比了。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const getCanvasData = async (\n  options: Required<WatermarkOptions>,\n): Promise<{ width: number; height: number; base64Url: string }> => {\n\n  const { rotate, image, content, fontStyle, gap } = options;\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  \n  const ratio = window.devicePixelRatio;\n\n  const configCanvas = (size: { width: number, height: number }) => {\n    const canvasWidth = gap[0] + size.width;\n    const canvasHeight = gap[1] + size.height;\n\n    canvas.setAttribute('width', `${canvasWidth * ratio}px`);\n    canvas.setAttribute('height', `${canvasHeight * ratio}px`);\n    canvas.style.width = `${canvasWidth}px`;\n    canvas.style.height = `${canvasHeight}px`;\n\n    ctx.translate((canvasWidth * ratio) / 2, (canvasHeight * ratio) / 2);\n    ctx.scale(ratio, ratio);\n\n    const RotateAngle = (rotate * Math.PI) / 180;\n    ctx.rotate(RotateAngle);\n  };\n\n  const drawText = () => {\n    \n  };\n\n  function drawImage() {\n  \n  }\n  \n  return image ? drawImage() : drawText();\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"先来实现 drawImage："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function drawImage() {\n  return new Promise<{ width: number; height: number; base64Url: string }>((resolve) => {\n    const img = new Image();\n    img.crossOrigin = 'anonymous';\n    img.referrerPolicy = 'no-referrer';\n\n    img.src = image;\n    img.onload = () => {\n      let { width, height } = options;\n      if (!width || !height) {\n        if (width) {\n          height = (img.height / img.width) * +width;\n        } else {\n          width = (img.width / img.height) * +height;\n        }\n      }\n      configCanvas({ width, height });\n\n      ctx.drawImage(img, -width / 2, -height / 2, width, height);\n      return resolve({ base64Url: canvas.toDataURL(), width, height });\n    };\n    img.onerror = () => {\n      return drawText();\n    };\n  });\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"new Image 指定 src 加载图片。"}),"\n",(0,i.jsx)(n.p,{children:"onload 的时候，对于没有设置 width 或 height 的时候，根据图片宽高比算出另一个值。"}),"\n",(0,i.jsx)(n.p,{children:"然后调用 configCanvas 修改 canvas 的宽高、缩放、旋转。"}),"\n",(0,i.jsx)(n.p,{children:"之后在中心点绘制一张图片，返回 base64 的结果。"}),"\n",(0,i.jsx)(n.p,{children:"当加载失败时，onerror 里绘制文本。"}),"\n",(0,i.jsx)(n.p,{children:"这里的 crssOrign 设置 anonymous 是跨域的时候不携带 cookie，而 refererPolicy 设置 no-referrer 是不携带 referer，都是安全相关的。"}),"\n",(0,i.jsx)(n.p,{children:"然后实现 drawText："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const drawText = () => {\n  const { fontSize, color, fontWeight, fontFamily } = fontStyle;\n  const realFontSize = toNumber(fontSize, 0) || fontStyle.fontSize;\n\n  ctx.font = `${fontWeight} ${realFontSize}px ${fontFamily}`;\n  const measureSize = measureTextSize(ctx, [...content], rotate);\n\n  const width = options.width || measureSize.width;\n  const height = options.height || measureSize.height;\n\n  configCanvas({ width, height });\n\n  ctx.fillStyle = color!;\n  ctx.font = `${fontWeight} ${realFontSize}px ${fontFamily}`;\n  ctx.textBaseline = 'top';\n\n  [...content].forEach((item, index) => {\n    const { height: lineHeight, width: lineWidth } = measureSize.lineSize[index];\n\n    const xStartPoint = -lineWidth / 2;\n    const yStartPoint = -(options.height || measureSize.originHeight) / 2 + lineHeight * index;\n\n    ctx.fillText(\n      item,\n      xStartPoint,\n      yStartPoint,\n      options.width || measureSize.originWidth\n    );\n  });\n  return Promise.resolve({ base64Url: canvas.toDataURL(), height, width });\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"fontSize 转为 number。"}),"\n",(0,i.jsx)(n.p,{children:"如果没有传入 width、height 就自己计算，这个 measureTextSize 待会实现。"}),"\n",(0,i.jsx)(n.p,{children:"设置 textBaseline 为 top，顶部对齐。"}),"\n",(0,i.jsx)(n.p,{children:"然后依次绘制文字。"}),"\n",(0,i.jsx)(n.p,{children:"绘制文字要按照坐标来，在 measureTextSize 里计算出每一行的 lineSize，也就是行高、行宽。"}),"\n",(0,i.jsx)(n.p,{children:"在行宽的一半的地方开始绘制文字，行内每个文字的位置是行高的一半 * index。"}),"\n",(0,i.jsx)(n.p,{children:"然后实现 measureTextSize 方法："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const measureTextSize = (\n  ctx: CanvasRenderingContext2D,\n  content: string[],\n  rotate: number\n) => {\n  let width = 0;\n  let height = 0;\n  const lineSize: Array<{width: number, height: number}> = [];\n\n  content.forEach((item) => {\n    const {\n      width: textWidth,\n      fontBoundingBoxAscent,\n      fontBoundingBoxDescent,\n    } = ctx.measureText(item);\n\n    const textHeight = fontBoundingBoxAscent + fontBoundingBoxDescent;\n\n    if (textWidth > width) {\n      width = textWidth;\n    }\n\n    height += textHeight;\n    lineSize.push({ height: textHeight, width: textWidth });\n  });\n\n  const angle = (rotate * Math.PI) / 180;\n\n  return {\n    originWidth: width,\n    originHeight: height,\n    width: Math.ceil(Math.abs(Math.sin(angle) * height) + Math.abs(Math.cos(angle) * width)),\n    height: Math.ceil(Math.abs(Math.sin(angle) * width) + Math.abs(height * Math.cos(angle))),\n    lineSize,\n  };\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"ctx.measureText 是用来测量文字尺寸的。"}),"\n",(0,i.jsx)(n.p,{children:"fontBoudingAscent 是 baseline 到顶部的距离，而 fontBoundingBoxDescent 是到底部的距离："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"加起来就是行高。"}),"\n",(0,i.jsx)(n.p,{children:"然后如果有旋转的话，要用 sin、cos 函数算出旋转后的宽高。"}),"\n",(0,i.jsx)(n.p,{children:"这样经过计算和绘制，文字和图片的水印就都完成了。"}),"\n",(0,i.jsx)(n.p,{children:"我们测试下："}),"\n",(0,i.jsx)(n.p,{children:"改下 App.tsx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import Watermark from \"./Watermark\";\n\nconst App = () => {\n  return <Watermark\n    content={['测试水印', '神说要有光']}\n  >\n   <div style={{height: 800}}>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n   </div>\n  </Watermark>\n};\n\nexport default App;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"把 gap 设为 0："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import Watermark from \"./Watermark\";\n\nconst App = () => {\n  return <Watermark\n    content={['测试水印', '神说要有光']}\n    gap={[0, 0]}\n    fontStyle={{\n        color: 'green'\n    }}\n  >\n   <div style={{height: 800}}>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n   </div>\n  </Watermark>\n};\n\nexport default App;\n"})}),"\n",(0,i.jsx)(n.p,{children:"也没问题："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"只是现在 offset 还没有支持，也就是左上角的空白距离。"}),"\n",(0,i.jsx)(n.p,{children:"这个就是改下 left、top 的值就好了，当然，width、height 也要从 100% 减去这块距离。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const offsetLeft = mergedOptions.offset[0] + 'px';\nconst offsetTop = mergedOptions.offset[1] + 'px';\n\nconst wmStyle = `\nwidth:calc(100% - ${offsetLeft});\nheight:calc(100% - ${offsetTop});\nposition:absolute;\ntop:${offsetTop};\nleft:${offsetLeft};\nbottom:0;\nright:0;\npointer-events: none;\nz-index:${zIndex};\nbackground-position: 0 0;\nbackground-size:${gap[0] + width}px ${gap[1] + height}px;\nbackground-repeat: repeat;\nbackground-image:url(${base64Url})`;\n"})}),"\n",(0,i.jsx)(n.p,{children:"测试下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import Watermark from \"./Watermark\";\n\nconst App = () => {\n  return <Watermark\n    content={['测试水印', '神说要有光']}\n    gap={[0, 0]}\n    offset={[50, 100]}\n    fontStyle={{\n        color: 'green'\n    }}\n  >\n   <div style={{height: 800}}>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n   </div>\n  </Watermark>\n};\n\nexport default App;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这样水印组件就完成了。"}),"\n",(0,i.jsx)(n.p,{children:"但现在的水印组件作用并不大，因为只要打开 devtools 就能轻易删掉。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"我们要加上防删功能，前面讲过，用 MutationObserver："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"创建完水印节点后，首先 disnonnect 去掉之前的 MutationObserver 的监听，然后创建新的 MutationObserver 监听 container 的变动。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"export default function useWatermark(params: WatermarkOptions) {\n  const [options, setOptions] = useState(params || {});\n\n  const mergedOptions = getMergedOptions(options);\n  const watermarkDiv = useRef<HTMLDivElement>();\n  const mutationObserver = useRef<MutationObserver>();\n\n  const container = mergedOptions.getContainer();\n  const { zIndex, gap } = mergedOptions;\n\n  function drawWatermark() {\n    if (!container) {\n      return;\n    }\n\n    getCanvasData(mergedOptions).then(({ base64Url, width, height }) => {\n\n      const offsetLeft = mergedOptions.offset[0] + 'px';\n      const offsetTop = mergedOptions.offset[1] + 'px';\n\n      const wmStyle = `\n      width:calc(100% - ${offsetLeft});\n      height:calc(100% - ${offsetTop});\n      position:absolute;\n      top:${offsetTop};\n      left:${offsetLeft};\n      bottom:0;\n      right:0;\n      pointer-events: none;\n      z-index:${zIndex};\n      background-position: 0 0;\n      background-size:${gap[0] + width}px ${gap[1] + height}px;\n      background-repeat: repeat;\n      background-image:url(${base64Url})`;\n\n      if (!watermarkDiv.current) {\n        const div = document.createElement('div');\n        watermarkDiv.current = div;\n        container.append(div);\n        container.style.position = 'relative';\n      }\n\n      watermarkDiv.current?.setAttribute('style', wmStyle.trim());\n\n      if (container) {\n        mutationObserver.current?.disconnect();\n\n        mutationObserver.current = new MutationObserver((mutations) => {\n          const isChanged = mutations.some((mutation) => {\n            let flag = false;\n            if (mutation.removedNodes.length) {\n              flag = Array.from(mutation.removedNodes).some((node) => node === watermarkDiv.current);\n            }\n            if (mutation.type === 'attributes' && mutation.target === watermarkDiv.current) {\n              flag = true;\n            }\n            return flag;\n          });\n          if (isChanged) {\n            watermarkDiv.current = undefined;\n            drawWatermark();\n          }\n        });\n\n        mutationObserver.current.observe(container, {\n          attributes: true,\n          subtree: true,\n          childList: true,\n        });\n      }\n    });\n  }\n\n  useEffect(() => {\n    drawWatermark();\n  }, [options]);\n\n  return {\n    generateWatermark: (newOptions: Partial<WatermarkOptions>) => {\n      setOptions(merge({}, options, newOptions));\n    },\n    destroy: () => {\n    },\n  };\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"上节讲过，MutationObserver 可以监听子节点的变动和节点属性变动："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以我们判断水印是否删除是通过判断是否修改了 watermark 节点的属性，是否增删了 watermark 节点："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"是的话，就把 watermarkDiv.current 置空然后重新绘制。"}),"\n",(0,i.jsx)(n.p,{children:"测试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:s,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"现在修改节点属性，或者删掉水印节点的时候，就会绘制一个新的。"}),"\n",(0,i.jsx)(n.p,{children:"这样，就达到了防止删除水印的功能。"}),"\n",(0,i.jsxs)(n.p,{children:["案例代码上传了",(0,i.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/watermark-component",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"这节我们实现了 Watermark 水印组件。"}),"\n",(0,i.jsx)(n.p,{children:"水印的实现原理就是加一个和目标元素宽高一样的 div 覆盖在上面，设置 pointer-events:none 不响应鼠标事件。"}),"\n",(0,i.jsx)(n.p,{children:"然后背景用水印图片 repeat 实现。"}),"\n",(0,i.jsx)(n.p,{children:"这个水印图片是用 canvas 画的，传入文字或者图片，会计算 gap、文字宽高等，在正确的位置绘制出来。"}),"\n",(0,i.jsx)(n.p,{children:"之后转成 base64 之后设置为 background-image。"}),"\n",(0,i.jsx)(n.p,{children:"此外，还要支持防删除功能，也就是用 MutationObserver 监听水印节点的属性变动、节点删除等，有变化就重新绘制一个。"}),"\n",(0,i.jsx)(n.p,{children:"这样，我们就实现了有防删功能的 Watermark 水印组件。"})]})}function _(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Q,{...e})}):Q(e)}let H=_;_.__RSPRESS_PAGE_META={},_.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC18%E7%AB%A0%E2%80%94%E7%BB%84%E4%BB%B6%E5%AE%9E%E6%88%98%EF%BC%9AWatermark%E9%98%B2%E5%88%A0%E9%99%A4%E6%B0%B4%E5%8D%B0%E7%BB%84%E4%BB%B6.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第18章—组件实战：Watermark防删除水印组件",headingTitle:"第18章—组件实战：Watermark防删除水印组件",frontmatter:{}}}}]);