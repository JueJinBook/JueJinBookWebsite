"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["3048"],{603790:function(e,n,s){e.exports=s.p+"static/image/364b5960fd041aa3bcbca25943631da5.660ccd19.webp"},166665:function(e,n,s){e.exports=s.p+"static/image/f979515ef4c430b70d489fb20102444d.3b527ca2.webp"},840083:function(e,n,s){s.r(n),s.d(n,{default:()=>y});var c=s(552676),a=s(740453);let t=s.p+"static/image/22ce29206de389c2308b4541d6b2bcaf.cc591305.webp",r=s.p+"static/image/5635293050e57799e2f77893370ac87c.3c498e80.webp",i=s.p+"static/image/508466860d9c000ea5ec046a74848f86.12e44a1d.webp",d=s.p+"static/image/4fb6be3e43e965177ee23f6dcd1a520e.d758f05d.webp",l=s.p+"static/image/4b3aa0862fa426e8efc7f1662a8c898f.1ba76566.webp",o=s.p+"static/image/995bc976c92f8a07004aeadeab950f41.0910262a.gif",p=s.p+"static/image/8dcb59300da77bed2e2712e69d3cc666.d0220e31.webp",h=s.p+"static/image/90b602c320bdf8f029fe1ffc012328dd.d1580361.webp",j=s.p+"static/image/52b12bc9b9a13dce0db60e825c89643a.c2f7a2fd.webp",x=s.p+"static/image/1f0540b29d8811e91545764a7155cc2c.6f7905ec.webp",b=s.p+"static/image/c2dd819b8b0abed58a12eb5809c1ee80.72b87f2d.webp",g=s.p+"static/image/28083da7be541bc524966ad24de6b68a.a2779077.webp",m=s.p+"static/image/8e1516633b66a36ff7c19c2373d204f5.85f2589f.webp",f=s.p+"static/image/3e9ab4c511e40867c897ca19faa4dee6.4aa04978.webp",u=s.p+"static/image/5ced875a954c3ef3d8eca8bf4c349e42.aed919e5.webp",k=s.p+"static/image/d501235cad18a9b42f4dfe3917b2d090.95d6ed70.webp",S=s.p+"static/image/e73e21a37ad841d8e7e02f8f13adf558.83b6a2b6.webp";var v=s(166665),w=s(603790);let A=s.p+"static/image/81861200ccb8dbd8eb7c2571dcf3c7e2.de2b17c7.webp";function N(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2",ul:"ul",li:"li"},(0,a.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"173-nest-开发-websocket-服务",children:["173. Nest 开发 WebSocket 服务",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#173-nest-开发-websocket-服务",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"我们最常用的网络协议是 HTTP，它是一问一答的模式，客户端发送请求，服务端返回响应。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:A,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"有时候也会用 Server Sent Event，它是基于 HTTP 的，客户端发送请求，服务端返回 text/event-stream 类型的响应，可以多次返回数据。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"但是 HTTP 不能服务端向客户端推送数据，SSE 适合一次请求之后服务端多次推送数据的场景。"}),"\n",(0,c.jsx)(n.p,{children:"类似聊天室这种，需要实时的双向通信的场景，还是得用 WebSocket。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"在 Nest 里实现 WebSocket 的服务还是很简单的。"}),"\n",(0,c.jsx)(n.p,{children:"我们创建个项目："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"nest new nest-websocket\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"进入项目，安装用到的包："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm i --save @nestjs/websockets @nestjs/platform-socket.io\n"})}),"\n",(0,c.jsx)(n.p,{children:"然后创建个 websocket 模块："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"nest g resource aaa\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"生成的代码很容易看懂："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"@WebSocketGateWay 声明这是一个处理 weboscket 的类。"}),"\n",(0,c.jsx)(n.p,{children:"默认的端口和 http 服务 app.listen 的那个端口一样。"}),"\n",(0,c.jsx)(n.p,{children:"然后 @SubscribeMessage 是指定处理的消息。"}),"\n",(0,c.jsx)(n.p,{children:"通过 @MessageBody 取出传过来的消息内容。"}),"\n",(0,c.jsx)(n.p,{children:"分别声明了 find、create、update、remove 这些 CRUD 的消息类型。"}),"\n",(0,c.jsx)(n.p,{children:"具体的实现在 AaaService 里："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"然后我们加一下客户端代码，跑起来试试。"}),"\n",(0,c.jsx)(n.p,{children:"添加 pages/index.html"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:"<html>\n  <head>\n    <script src=\"https://cdn.socket.io/4.3.2/socket.io.min.js\" integrity=\"sha384-KAZ4DtjNhLChOB/hxXuKqhMLYvx3b5MlT55xPEiNmREKRzeEm+RVPlTnAn0ajQNs\" crossorigin=\"anonymous\"><\/script>\n    <script>\n      const socket = io('http://localhost:3000');\n      socket.on('connect', function() {\n        console.log('Connected');\n\n        socket.emit('findAllAaa', response =>\n          console.log('findAllAaa', response),\n        );\n\n        socket.emit('findOneAaa', 1, response =>\n          console.log('findOneAaa', response),\n        );\n\n        socket.emit('createAaa', {name: 'guang'},response =>\n          console.log('createAaa', response),\n        );\n\n        socket.emit('updateAaa',{id: 2, name: 'dong'},response =>\n          console.log('updateAaa', response),\n        );\n\n        socket.emit('removeAaa', 2,response =>\n          console.log('removeAaa', response),\n        );\n      });\n      socket.on('disconnect', function() {\n        console.log('Disconnected');\n      });\n    <\/script>\n  </head>\n\n  <body></body>\n</html>\n"})}),"\n",(0,c.jsx)(n.p,{children:"这段代码也比较容易看懂，就是用 socket.io 来连接 ws 服务端。"}),"\n",(0,c.jsx)(n.p,{children:"connect 之后，分别发送 find、remove、update 等消息。"}),"\n",(0,c.jsx)(n.p,{children:"然后在 main.ts 里支持下这个 pages 静态目录的访问："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { NestApplication, NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { NestExpressApplication } from '@nestjs/platform-express';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(AppModule);\n\n  app.useStaticAssets('pages');\n  await app.listen(3000);\n}\nbootstrap();\n"})}),"\n",(0,c.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["浏览器访问下 ",(0,c.jsx)(n.a,{href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"可以看到，CRUD 方法都有了正确的响应。"}),"\n",(0,c.jsx)(n.p,{children:"在 Nest 里写 WebSocket 服务就这么简单。"}),"\n",(0,c.jsx)(n.p,{children:"那如果响应接受和返回消息不想用同样的名字呢？"}),"\n",(0,c.jsx)(n.p,{children:"这样："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"分别指定 event 和 data。"}),"\n",(0,c.jsx)(n.p,{children:"这时候原来的代码就收不到 findAll 返回的消息了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"因为返回的消息是 guang，可以加一下这个事件的监听："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"socket.on('guang', function(data) {\n    console.log('guang', data);\n});\n"})}),"\n",(0,c.jsx)(n.p,{children:"这样就收到消息了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"那如果我不是马上发送消息，而是过几秒再发呢？"}),"\n",(0,c.jsx)(n.p,{children:"这就要返回 rxjs 的 Observer 了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"@SubscribeMessage('findAllAaa')\nfindAll() {\n    return new Observable((observer) => {\n      observer.next({ event: 'guang', data: { msg: 'aaa'} });\n\n      setTimeout(() => {\n        observer.next({ event: 'guang', data: { msg: 'bbb'} });\n      }, 2000);\n\n      setTimeout(() => {\n        observer.next({ event: 'guang', data: { msg: 'ccc'} });\n      }, 5000);\n    });\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"测试下："}),"\n",(0,c.jsx)(n.p,{children:"可以看到，2s、5s 的时候，收到了服务端传过来的消息。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"有这些就足够用了，websocket 是用来双向实时通信的。"}),"\n",(0,c.jsx)(n.p,{children:"当然，如果你想用具体平台的 api，也可以注入实例。"}),"\n",(0,c.jsx)(n.p,{children:"安装 socket.io（Nest 默认使用 socket.io 包实现 WebSocket 功能）"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install socket.io\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"@SubscribeMessage('findOneAaa')\nfindOne(@MessageBody() id: number, @ConnectedSocket() server: Server) {\n\n    server.emit('guang', 666);\n    return this.aaaService.findOne(id);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这样也可以，但是和具体的平台耦合了，不建议这样写。"}),"\n",(0,c.jsx)(n.p,{children:"除了 @ConnectedSocket 装饰器注入实例，也可以用 @WebSocketServer 注入实例："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"@WebSocketServer()\nserver: Server;\n\n@SubscribeMessage('createAaa')\ncreate(@MessageBody() createAaaDto: CreateAaaDto) {\n    this.server.emit('guang', 777);\n    return this.aaaService.create(createAaaDto);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"同样，也是不建议用的。"}),"\n",(0,c.jsx)(n.p,{children:"此外，服务端也有 connected、disconnected 等生命周期函数："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"@WebSocketGateway()\nexport class AaaGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect{\n\n  handleDisconnect(client: Server) {\n  }\n\n  handleConnection(client: Server, ...args: any[]) {\n  }\n    \n  afterInit(server: Server) {\n  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"分别实现 OnGatewayInit、OnGatewayConnection、OnGatewayDisconnect 接口。"}),"\n",(0,c.jsx)(n.p,{children:"在生命周期函数里可以拿到实例对象。"}),"\n",(0,c.jsxs)(n.p,{children:["案例代码上传了",(0,c.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/nest-websocket",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"这节我们学习了 Nest 实现 WebSocket 服务。"}),"\n",(0,c.jsx)(n.p,{children:"需要用到 @nestjs/websockets 和 @nestjs/platform-socket.io 包。"}),"\n",(0,c.jsx)(n.p,{children:"涉及到这些装饰器："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"@WebSocketGateWay：声明这是一个处理 weboscket 的类。"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"@SubscribeMessage：声明处理的消息。"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"@MessageBody：取出传过来的消息内容。"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"@WebSocketServer：取出 Socket 实例对象"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"@ConnectedSocket：取出 Socket 实例对象注入方法"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"客户端也是使用 socket.io 来连接。"}),"\n",(0,c.jsx)(n.p,{children:"如果想异步返回消息，就通过 rxjs 的 Observer 来异步多次返回。"}),"\n",(0,c.jsx)(n.p,{children:"整体来说，Nest 里用 WebSocket 来做实时通信还是比较简单的。"})]})}function E(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(N,{...e})}):N(e)}let y=E;E.__RSPRESS_PAGE_META={},E.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F173.%20Nest%20%E5%BC%80%E5%8F%91%20WebSocket%20%E6%9C%8D%E5%8A%A1.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"173. Nest 开发 WebSocket 服务",headingTitle:"173. Nest 开发 WebSocket 服务",frontmatter:{}}}}]);