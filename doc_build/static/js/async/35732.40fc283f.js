"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["35732"],{867609:function(e,n,r){r.r(n),r.d(n,{default:()=>q});var a=r(552676),s=r(740453);let t=r.p+"static/image/086e9dae902b87042d6b8763a9e3c67b.6a3b411e.gif",i=r.p+"static/image/8be02876acecec5af0913956f8810e30.a3d9e641.gif",c=r.p+"static/image/77c6a09efeeaf80a52535e2eac76fdec.04bc2923.webp",l=r.p+"static/image/86b0568fa43b0cfa357f395d75d5cf3c.23a4edae.webp",o=r.p+"static/image/8a07091f96270f2e74c4c8854e9bbe10.1cce9d91.webp",d=r.p+"static/image/ce9faf39ccd49111e4f7c51dcf538103.d008b6df.webp",m=r.p+"static/image/3d232aa6471aa44fac38302c231f53eb.69c088c5.webp",p=r.p+"static/image/37cbbafe80ec4c9995b7106403251cf3.3d8a72bc.webp",u=r.p+"static/image/70be804333647bb6e2963873fe2db1af.4bd52db4.webp",h=r.p+"static/image/27e82b3c373fda5a3de842251dd1eb29.90950cf9.webp",x=r.p+"static/image/02fef037bf2622cf7bc2746abb06f991.ef4f32f7.gif",f=r.p+"static/image/0617638fe0a5cb105856874de1f849d4.5efcb230.webp",j=r.p+"static/image/342901ae5d4b6ba90513ccd0088cf2af.ae3ae3a0.webp",g=r.p+"static/image/3dfdd92e5d450007117c25d1ca99b2f1.c0b4fefe.webp",F=r.p+"static/image/4c651972aab4eabcf938545ee77973ff.abaa3155.webp",b=r.p+"static/image/63931964a649749e00a418c3e77582ab.15ae2f57.webp",v=r.p+"static/image/87cdc5e31bf08db676cbc51bf249c5f1.66b8f66b.webp",y=r.p+"static/image/495284640859658b2416fd7e6e8dcad3.042cee66.webp",R=r.p+"static/image/2a000b425c7998a8f2a261c6d9c97563.02083686.webp",C=r.p+"static/image/dff311348c0cc794372a44636bcf0b5b.6fb85ac2.webp",I=r.p+"static/image/e6e788a3761599e83e77b73e8ddaca95.47282333.webp",E=r.p+"static/image/b0cb13edd0bc0e127939013c580723cd.f2c6baa3.webp",V=r.p+"static/image/bc2df80615c2d481cd878775c73aabaa.564cd6a7.webp",S=r.p+"static/image/31f693a90a80a4ac2953312c3d67c0b0.9066ce92.webp",N=r.p+"static/image/82cd692148711be5b0e16bc443e96b7a.d440a556.webp",k=r.p+"static/image/14f558e3298f59c1dc90cf2921a73e63.ada0b2be.webp",w=r.p+"static/image/703a4fd4d46f2239068915d5b84ced85.0436b4b7.webp",P=r.p+"static/image/1aacb7b672ed44c3fbbcafeb026803a5.dd82b2c4.webp",B=r.p+"static/image/0f2251685e11c66a6978d257cf422178.6ce8d430.webp",A=r.p+"static/image/c4a92fd88a08a581f5ec5c3d5079b964.f1a07ef4.webp",M=r.p+"static/image/4039da6a9e667bb8aede7557aea0ed3d.43f28953.webp",T=r.p+"static/image/ac0d81a270023947794a073755255789.a8fa1663.webp",_=r.p+"static/image/7f0b1388eb9b6f7bd626f095179304a9.563d761d.webp",L=r.p+"static/image/873f4c3d064b6ee2930109f210b087e5.3771125d.gif";function H(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"第38章组件实战form表单组件",children:["第38章—组件实战：Form表单组件",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第38章组件实战form表单组件",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"\uFEFF大家写中后台系统的时候，应该都用过 Ant Design 的 Form 组件："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:L,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:_,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"用 Form.Item 包裹 Input、Checkbox 等表单项，可以定义 rules，也就是每个表单项的校验规则。"}),"\n",(0,a.jsx)(n.p,{children:"外层 Form 定义 initialValues 初始值，onFinish 当提交时的回调，onFinishFailed 当提交有错误时的回调。"}),"\n",(0,a.jsx)(n.p,{children:"Form 组件每天都在用，那它是怎么实现的呢？"}),"\n",(0,a.jsx)(n.p,{children:"其实原理不复杂。"}),"\n",(0,a.jsx)(n.p,{children:"每个表单项都有 value 和 onChange 参数，我们只要在 Item 组件里给 children 传入这俩参数，把值收集到全局的 Store 里。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:T,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样在 Store 里就存储了所有表单项的值，在 submit 时就可以取出来传入 onFinish 回调。"}),"\n",(0,a.jsx)(n.p,{children:"并且，还可以用 async-validator 对表单项做校验，如果有错误，就把错误收集起来传入 onFinishFailed 回调。"}),"\n",(0,a.jsx)(n.p,{children:"那这些 Item 是怎么拿到 Store 来同步表单值的呢？"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:M,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"用 Context。"}),"\n",(0,a.jsx)(n.p,{children:"在 Form 里保存 Store 到 Context，然后在 Item 里取出 Context 的 Store 来，同步表单值到 Store。"}),"\n",(0,a.jsx)(n.p,{children:"我们来写下试试："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npx create-vite\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:A,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"安装依赖，改下 main.tsx"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:B,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后创建 Form/FormContext.ts"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { createContext } from 'react';\n\nexport interface FormContextProps {\n  values?: Record<string, any>;\n  setValues?: (values: Record<string, any>) => void;\n  onValueChange?: (key: string, value: any) => void;\n  validateRegister?: (name:string, cb: Function) => void;\n}\n\nexport default createContext<FormContextProps>({})\n"})}),"\n",(0,a.jsx)(n.p,{children:"在 context 里保存 values 也就是 Store 的值。"}),"\n",(0,a.jsx)(n.p,{children:"然后添加 setValues 来修改 values"}),"\n",(0,a.jsx)(n.p,{children:"onValueChange 监听 value 变化"}),"\n",(0,a.jsx)(n.p,{children:"validateRegister 用来注册表单项的校验规则，也就是 rules 指定的那些。"}),"\n",(0,a.jsx)(n.p,{children:"然后写下 Form 组件 Form/Form.tsx"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:P,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"参数传入初始值 initialValues、点击提交的回调 onFinish、点击提交有错误时的回调 onFinishFailed。"}),"\n",(0,a.jsx)(n.p,{children:"这里的 Record<string,any> 是 ts 的类型，任意的对象的意思。"}),"\n",(0,a.jsx)(n.p,{children:"用 useState 保存 values，用 useRef 保存 errors 和 validator"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:w,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"为什么不都用 useState 呢？"}),"\n",(0,a.jsx)(n.p,{children:"因为修改 state 调用 setState 的时候会触发重新渲染。"}),"\n",(0,a.jsx)(n.p,{children:"而 ref 的值保存在 current 属性上，修改它不会触发重新渲染。"}),"\n",(0,a.jsx)(n.p,{children:"errors、validator 这种就是不需要触发重新渲染的数据。"}),"\n",(0,a.jsx)(n.p,{children:"然后 onValueChange 的时候就是修改 values 的值。"}),"\n",(0,a.jsx)(n.p,{children:"submit 的时候调用 onFinish，传入 values，再调用所有 validator 对值做校验，如果有错误，调用 onFinishFailed 回调："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:k,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后把这些方法保存到 context 中，并且给原生 form 元素添加 onSubmit 的处理："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:N,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import React, { CSSProperties, useState, useRef, FormEvent, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport FormContext from './FormContext';\n\nexport interface FormProps extends React.HTMLAttributes<HTMLFormElement> {\n    className?: string;\n    style?: CSSProperties;\n    onFinish?: (values: Record<string, any>) => void;\n    onFinishFailed?: (errors: Record<string, any>) => void;\n    initialValues?: Record<string, any>;\n    children?: ReactNode\n}\n\nconst Form = (props: FormProps) => {\n    const { \n        className, \n        style,\n        children, \n        onFinish,\n        onFinishFailed,\n        initialValues,\n        ...others \n    } = props;\n\n    const [values, setValues] = useState<Record<string, any>>(initialValues || {});\n\n    const validatorMap = useRef(new Map<string, Function>());\n\n    const errors = useRef<Record<string, any>>({});\n\n    const onValueChange = (key: string, value: any) => {\n        values[key] = value;\n    }\n\n    const handleSubmit = (e: FormEvent) => {\n        e.preventDefault();\n\n        for (let [key, callbackFunc] of validatorMap.current) {\n            if (typeof callbackFunc === 'function') {\n                errors.current[key] = callbackFunc();\n            }\n        }\n\n        const errorList = Object.keys(errors.current).map(key => {\n                return errors.current[key]\n        }).filter(Boolean);\n\n        if (errorList.length) {\n            onFinishFailed?.(errors.current);\n        } else {\n            onFinish?.(values);\n        }\n    }\n\n    const handleValidateRegister = (name: string, cb: Function) => {\n        validatorMap.current.set(name, cb);\n    }\n\n    const cls = classNames('ant-form', className);\n\n    return (\n        <FormContext.Provider\n            value={{\n                onValueChange,\n                values,\n                setValues: (v) => setValues(v),\n                validateRegister: handleValidateRegister\n            }}\n        >\n            <form {...others} className={cls} style={style} onSubmit={handleSubmit}>{children}</form>\n        </FormContext.Provider>\n    );\n}\n\nexport default Form;\n"})}),"\n",(0,a.jsx)(n.p,{children:"这里用到了 classnames 包要安装下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install --save classnames\n"})}),"\n",(0,a.jsx)(n.p,{children:"接下来添加 Form/Item.tsx，也就是包装表单项用的组件："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:S,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"首先是参数，可以传入 label、name、valuePropName、rules 等："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:V,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"valuePropName 默认是 value，当 checkbox 等表单项就要取 checked 属性了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:E,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这里 children 类型为 ReactElement 而不是 ReactNode。"}),"\n",(0,a.jsx)(n.p,{children:"因为 ReactNode 除了包含 ReactElement 外，还有 string、number 等："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:I,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"而作为 Form.Item 组件的 children，只能是 ReactElement。"}),"\n",(0,a.jsx)(n.p,{children:"然后实现下 Item 组件："}),"\n",(0,a.jsx)(n.p,{children:"如果没有传入 name 参数，那就直接返回 children。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:C,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"比如这种就不需要包装："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:R,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"创建两个 state，分别存储表单值 value 和 error。"}),"\n",(0,a.jsx)(n.p,{children:"从 context 中读取对应 name 的 values 的值，同步设置 value："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:y,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后 React.cloneElement 复制 chilren，额外传入 value、onChange 等参数："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:v,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"onChange 回调里设置 value，并且修改 context 里的 values 的值："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:b,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这里的 getValueFromEvent 是根据表单项类型来获取 value："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:F,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后是校验 rules，这个是用 async-validator 这个包："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在 context 注册 name 对应的 validator 函数："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:j,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后 Item 组件渲染 label、children、error"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:f,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import React, { ReactNode, CSSProperties, useState, useContext, ReactElement, useEffect, PropsWithChildren, ChangeEvent } from 'react';\nimport classNames from 'classnames';\nimport Schema, { Rules } from 'async-validator';\n\nimport FormContext from './FormContext';\n\nexport interface ItemProps{\n    className?: string;\n    style?: CSSProperties;\n    label?: ReactNode;\n    name?: string;\n    valuePropName?: string;\n    rules?: Array<Record<string, any>>;\n    children?: ReactElement\n}\n\nconst getValueFromEvent = (e: ChangeEvent<HTMLInputElement>) => {\n    const { target } = e;\n    if (target.type === 'checkbox') {\n        return target.checked;\n    } else if (target.type === 'radio') {\n        return target.value;\n    }\n\n    return target.value;\n}\n\nconst Item = (props: ItemProps) => {\n    const { \n        className,\n        label,\n        children,\n        style,\n        name,\n        valuePropName,\n        rules,\n    } = props;\n\n    if(!name) {\n        return children;\n    }\n\n    const [value, setValue] = useState<string | number | boolean>();\n    const [error, setError] = useState('');\n\n    const { onValueChange, values, validateRegister } = useContext(FormContext);\n\n    useEffect(() => {\n        if (value !== values?.[name]) {\n            setValue(values?.[name]);\n        }\n    }, [values, values?.[name]])\n\n    const handleValidate = (value: any) => {\n        let errorMsg = null;\n        if (Array.isArray(rules) && rules.length) {\n            const validator = new Schema({\n                [name]: rules.map(rule => {\n                    return {\n                        type: 'string',\n                        ...rule\n                    }\n                })\n            });\n\n            validator.validate({ [name]:value }, (errors) => {\n                if (errors) {\n                    if (errors?.length) {\n                        setError(errors[0].message!);\n                        errorMsg = errors[0].message;\n                    }\n                } else {\n                    setError('');\n                    errorMsg = null;\n                }\n            });\n\n        }\n\n        return errorMsg;\n    }\n\n    useEffect(() => {\n        validateRegister?.(name, () => handleValidate(value));\n    }, [value]);\n\n    const propsName: Record<string, any> = {};\n    if (valuePropName) {\n        propsName[valuePropName] = value;\n    } else {\n        propsName.value = value;\n    }\n\n    const childEle = React.Children.toArray(children).length > 1 ? children: React.cloneElement(children!, {\n        ...propsName,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => {\n            const value = getValueFromEvent(e);\n            setValue(value);\n            onValueChange?.(name, value);\n\n            handleValidate(value);\n        }\n    });\n\n    const cls = classNames('ant-form-item', className);\n\n    return (\n        <div className={cls} style={style}>\n            <div>\n                {\n                    label && <label>{label}</label>\n                }\n            </div>\n            <div>\n                {childEle}\n                {error && <div style={{color: 'red'}}>{error}</div>}\n            </div>\n        </div>\n    )\n}\n\nexport default Item;\n"})}),"\n",(0,a.jsx)(n.p,{children:"安装用到的 async-validator："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"npm install --save async-validator\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后在 Form/index.tsx 导出下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import InternalForm from './Form';\nimport Item from './Item';\n\ntype InternalFormType = typeof InternalForm;\n\ninterface FormInterface extends InternalFormType {\n  Item: typeof Item;\n} \n\nconst Form = InternalForm as FormInterface;\n\nForm.Item = Item;\n\nexport default Form;\n"})}),"\n",(0,a.jsx)(n.p,{children:"主要是把 Item 挂在 Form 下。"}),"\n",(0,a.jsx)(n.p,{children:"在 App.tsx 测试下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Button, Checkbox, Input } from "antd";\nimport Form from "./Form/index";\n\nconst Basic: React.FC = () => {\n  const onFinish = (values: any) => {\n    console.log(\'Success:\', values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\'Failed:\', errorInfo);\n  };\n\n  return (\n    <Form\n      initialValues={{ remember: true, username: \'神说要有光\' }}\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n    >\n      <Form.Item\n        label="Username"\n        name="username"\n        rules={[\n          { required: true, message: \'请输入用户名!\' },\n          { max: 6, message: \'长度不能大于 6\' }\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label="Password"\n        name="password"\n        rules={[{ required: true, message: \'请输入密码!\' }]}\n      >\n        <Input.TextArea />\n      </Form.Item>\n\n      <Form.Item name="remember" valuePropName="checked">\n        <Checkbox>记住我</Checkbox>\n      </Form.Item>\n\n      <Form.Item>\n        <div>\n          <Button type="primary" htmlType="submit" >\n            登录\n          </Button>\n        </div>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default Basic;\n'})}),"\n",(0,a.jsx)(n.p,{children:"除了 Form 外，具体表单项用的 antd 的组件。"}),"\n",(0,a.jsx)(n.p,{children:"试一下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:x,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"form 的 initialValues 的设置、表单的值的保存，规则的校验和错误显示，都没问题。"}),"\n",(0,a.jsx)(n.p,{children:"这样，Form 组件的核心功能就完成了。"}),"\n",(0,a.jsx)(n.p,{children:"核心就是一个 Store 来保存表单的值，然后用 Item 组件包裹具体表单，设置 value 和 onChange 来同步表单的值。"}),"\n",(0,a.jsx)(n.p,{children:"当值变化以及 submit 的时候用 async-validator 来校验。"}),"\n",(0,a.jsx)(n.p,{children:"那 antd 的 Form 也是这样实现的么？"}),"\n",(0,a.jsx)(n.p,{children:"基本是一样的。"}),"\n",(0,a.jsx)(n.p,{children:"我们来看下源码："}),"\n",(0,a.jsx)(n.p,{children:"antd 的 Form 有个叫 FormStore 的类："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"它的 store 属性保存表单值，然后暴露 getFieldValue、setFieldValue 等方法来读写 store。"}),"\n",(0,a.jsx)(n.p,{children:"然后它提供了一个 useForm 的 hook 来创建 store："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:u,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"用的时候这样用："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样，Form 组件里就可以通过传进来的 store 的 api 来读写 store 了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:m,alt:""})}),"\n",(0,a.jsxs)(n.p,{children:["当然，它会通过 context 把 store 传递下去：\n",(0,a.jsx)("img",{src:d,alt:""})]}),"\n",(0,a.jsx)(n.p,{children:"在 Field 也就是 Item 组件里就通过 context 取出 store 的 api 来读写 store："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"和我们的实现有区别么？"}),"\n",(0,a.jsx)(n.p,{children:"有点区别，antd 的 FormStore 是可以独立出来的，通过 useForm 创建好传入 Form 组件。"}),"\n",(0,a.jsx)(n.p,{children:"而我们的 Store 没有分离出来，直接内置在 Form 组件里了。"}),"\n",(0,a.jsx)(n.p,{children:"但是实现的思路都是一样的。"}),"\n",(0,a.jsx)(n.p,{children:"提供个 useForm 的 api 的好处是，外界可以拿到 store 的 api 来自己修改 store。"}),"\n",(0,a.jsx)(n.p,{children:"当然，我们也可以通过 ref 来做这个："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import React, { CSSProperties, useState, useRef, FormEvent, ReactNode, ForwardRefRenderFunction, useImperativeHandle, forwardRef } from 'react';\nimport classNames from 'classnames';\nimport FormContext from './FormContext';\n\nexport interface FormProps extends React.HTMLAttributes<HTMLFormElement> {\n    className?: string;\n    style?: CSSProperties;\n    onFinish?: (values: Record<string, any>) => void;\n    onFinishFailed?: (errors: Record<string, any>) => void;\n    initialValues?: Record<string, any>;\n    children?: ReactNode\n}\n\nexport interface FormRefApi {\n    getFieldsValue: () => Record<string, any>,\n    setFieldsValue: (values: Record<string, any>) => void,\n}\n\nconst Form= forwardRef<FormRefApi, FormProps>((props: FormProps, ref) => {\n    const { \n        className, \n        style,\n        children, \n        onFinish,\n        onFinishFailed,\n        initialValues,\n        ...others \n    } = props;\n\n    const [values, setValues] = useState<Record<string, any>>(initialValues || {});\n\n    useImperativeHandle(ref, () => {\n        return {\n            getFieldsValue() {\n                return values;\n            },\n            setFieldsValue(fieldValues) {\n                setValues({...values, ...fieldValues});\n            }\n        }\n    }, []);\n\n    const validatorMap = useRef(new Map<string, Function>());\n\n    const errors = useRef<Record<string, any>>({});\n\n    const onValueChange = (key: string, value: any) => {\n        values[key] = value;\n    }\n\n    const handleSubmit = (e: FormEvent) => {\n        e.preventDefault();\n\n        for (let [key, callbackFunc] of validatorMap.current) {\n            if (typeof callbackFunc === 'function') {\n                errors.current[key] = callbackFunc();\n            }\n        }\n\n        const errorList = Object.keys(errors.current).map(key => {\n                return errors.current[key]\n        }).filter(Boolean);\n\n        if (errorList.length) {\n            onFinishFailed?.(errors.current);\n        } else {\n            onFinish?.(values);\n        }\n    }\n\n    const handleValidateRegister = (name: string, cb: Function) => {\n        validatorMap.current.set(name, cb);\n    }\n\n    const cls = classNames('ant-form', className);\n\n    return (\n        <FormContext.Provider\n            value={{\n                onValueChange,\n                values,\n                setValues: (v) => setValues(v),\n                validateRegister: handleValidateRegister\n            }}\n        >\n            <form {...others} className={cls} style={style} onSubmit={handleSubmit}>{children}</form>\n        </FormContext.Provider>\n    );\n})\n\nexport default Form;\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后在 App.tsx 试试："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Button, Checkbox, Input } from "antd";\nimport Form from "./Form/index";\nimport { useEffect, useRef } from "react";\nimport { FormRefApi } from "./Form/Form";\n\nconst Basic: React.FC = () => {\n  const onFinish = (values: any) => {\n    console.log(\'Success:\', values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\'Failed:\', errorInfo);\n  };\n\n  const form = useRef<FormRefApi>(null);\n\n  return (\n    <>\n      <Button type="primary" onClick={() => {\n        console.log(form.current?.getFieldsValue())\n      }}>打印表单值</Button>\n\n      <Button type="primary" onClick={() => {\n        form.current?.setFieldsValue({\n          username: \'东东东\'\n        })\n      }}>设置表单值</Button>\n\n      <Form\n        ref={form}\n        initialValues={{ remember: true, username: \'神说要有光\' }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label="Username"\n          name="username"\n          rules={[\n            { required: true, message: \'请输入用户名!\' },\n            { max: 6, message: \'长度不能大于 6\' }\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label="Password"\n          name="password"\n          rules={[{ required: true, message: \'请输入密码!\' }]}\n        >\n          <Input.TextArea />\n        </Form.Item>\n\n        <Form.Item name="remember" valuePropName="checked">\n          <Checkbox>记住我</Checkbox>\n        </Form.Item>\n\n        <Form.Item>\n          <div>\n            <Button type="primary" htmlType="submit" >\n              登录\n            </Button>\n          </div>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default Basic;\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:t,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"当然，你也可以把 store 的 api 处理出来，然后封装个 useForm 的 hook 来传入 Form 组件。"}),"\n",(0,a.jsx)(n.p,{children:"这样，用法比 ref 的方式简单点。"}),"\n",(0,a.jsx)(n.p,{children:"至此，我们就实现了 antd 的 Form 的功能。"}),"\n",(0,a.jsxs)(n.p,{children:["案例代码上传了 ",(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/form-component",target:"_blank",rel:"noopener noreferrer",children:"react 小册仓库"})]}),"\n",(0,a.jsxs)(n.h2,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"我们每天都在用 antd 的 Form 组件，今天自己实现了下。"}),"\n",(0,a.jsx)(n.p,{children:"其实原理不复杂，就是把 Form 的表单项的值存储到 Store 中。"}),"\n",(0,a.jsx)(n.p,{children:"在 Form 组件里把 Store 放到 Context，在 Item 组件里取出来。"}),"\n",(0,a.jsx)(n.p,{children:"用 Item 组件包裹表单项，传入 value、onChange 参数用来同步表单值到 Store。"}),"\n",(0,a.jsx)(n.p,{children:"这样，表单项的值变化或者 submit 的时候，就可以根据 rules 用 async-validator 来校验。"}),"\n",(0,a.jsx)(n.p,{children:"此外，我们还通过 ref 暴露出了 setFieldsValue、getFieldsValue 等 store 的 api。"}),"\n",(0,a.jsx)(n.p,{children:"当然，在 antd 的 Form 里是通过 useForm 这个 hook 来创建 store，然后把它传入 Form 组件来用的。"}),"\n",(0,a.jsx)(n.p,{children:"两种实现方式都可以。"}),"\n",(0,a.jsx)(n.p,{children:"每天都用 antd 的 Form 组件，不如自己手写一个吧！"})]})}function D(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(H,{...e})}):H(e)}let q=D;D.__RSPRESS_PAGE_META={},D.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC38%E7%AB%A0%E2%80%94%E7%BB%84%E4%BB%B6%E5%AE%9E%E6%88%98%EF%BC%9AForm%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第38章—组件实战：Form表单组件",headingTitle:"第38章—组件实战：Form表单组件",frontmatter:{}}}}]);