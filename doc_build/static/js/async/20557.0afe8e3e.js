"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["20557"],{117651:function(e,n,s){s.r(n),s.d(n,{default:()=>w});var r=s(552676),t=s(740453);let i=s.p+"static/image/7cbb67f3bb50a7dd7327296c5bedd584.beeaaabc.gif",a=s.p+"static/image/eda173ae7f2d6a0b622c0842f9a6902a.f8a91ee2.webp",c=s.p+"static/image/8cf10b205b5a7fc661406278ec0580f2.eab3bc5d.webp",l=s.p+"static/image/8f1985cd1318b59947f152523db680f0.5b9f963f.webp",p=s.p+"static/image/803ebb10252bbe3fe25efffb678707a5.b294e89b.webp",h=s.p+"static/image/5b7e0151b187f953dfcb482eb59e6caa.54efb964.webp",d=s.p+"static/image/4186467b1772976250fd773a2cb5fd8c.43bea762.webp",o=s.p+"static/image/655ca2d35bb4fce8d0f7661212247009.15837cc3.webp",b=s.p+"static/image/d480560a17606dbcc0e0e43286e52fe3.8eac89e5.webp",j=s.p+"static/image/b027b50fa5297a3284419cf780b489ba.a7dea372.webp",g=s.p+"static/image/896a1cd97449c68307bb80fe641fea80.63fa94aa.webp",u=s.p+"static/image/e6cbd50f215b9761cd4ac1fc5e1df799.565d65ca.webp",x=s.p+"static/image/bce959d8646b33e831f696eb29f64aa3.a94598f9.webp";function m(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"74-passport-实现-github-三方账号登录",children:["74. passport 实现 GitHub 三方账号登录",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#74-passport-实现-github-三方账号登录",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们每天都会登录各种网站，这些网站除了用户名、密码登录外，一般也都支持三方登录。"}),"\n",(0,r.jsx)(n.p,{children:"比如 google 登录、github 登录："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样免去了输入用户名密码的麻烦，直接用别的账号来登录当前网站。"}),"\n",(0,r.jsx)(n.p,{children:"那这种三方登录是怎么实现的呢？"}),"\n",(0,r.jsx)(n.p,{children:"今天我们做一下基于 github 的登录来体验下。"}),"\n",(0,r.jsx)(n.p,{children:"我们还是用 passport 这个包。"}),"\n",(0,r.jsxs)(n.p,{children:["它提供了非常多的",(0,r.jsx)(n.a,{href:"https://www.passportjs.org/packages/",target:"_blank",rel:"noopener noreferrer",children:"策略"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"上节我们用的 passport-local（用户名密码认证）、passport-jwt（jwt 认证）只是最基础的。"}),"\n",(0,r.jsxs)(n.p,{children:["这节用 ",(0,r.jsx)(n.a,{href:"https://www.passportjs.org/packages/passport-github2/",target:"_blank",rel:"noopener noreferrer",children:"passport-github2"})," 来实现基于 github 的三方登录。"]}),"\n",(0,r.jsx)(n.p,{children:"这个的关键是要拿到 client id 和 secret。"}),"\n",(0,r.jsx)(n.p,{children:"我们来生成一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"点击 settings > developer settings > new OAuth App"}),"\n",(0,r.jsx)(n.p,{children:"填入信息后，点击 register application："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"现在 client id 有了，点击生成 secret"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"提示你了，这里的 secret 只能看见这一次，复制保存下来（当然，丢了也没啥，可以再次生成）："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"有了 client id 和 secret 之后，就能实现 github 登录了。"}),"\n",(0,r.jsx)(n.p,{children:"我们新建个 nest 项目："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest new github-login\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"进入项目，安装 passport 的包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save passport @nestjs/passport\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后安装 passport-github2 的策略："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save passport-github2\nnpm install --save-dev @types/passport-github2\n"})}),"\n",(0,r.jsx)(n.p,{children:"生成一个 auth 模块："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g module auth\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后添加 auth/auth.strategy.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy } from 'passport-github2';\n\n@Injectable()\nexport class GithubStrategy extends PassportStrategy(Strategy, 'github') {\n  constructor() {\n    super({\n      clientID: 'Ov23liPsg7pxupYsMXah',\n      clientSecret: 'ad3604a0147924406fcd2f597fb234a188cae1f9',\n      callbackURL: 'http://localhost:3000/callback',\n      scope: ['public_profile'],\n    });\n  }\n\n  async validate(accessToken: string, refreshToken: string, profile: Profile) {\n    return profile;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"这里的 clientID 和 clientSecret 要换成你自己的。"}),"\n",(0,r.jsx)(n.p,{children:"callbackURL 是登录成功后回调的 url。"}),"\n",(0,r.jsx)(n.p,{children:"scope 是请求的数据的范围。"}),"\n",(0,r.jsx)(n.p,{children:"在 AuthModule 引入下这个 GithubStategy："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { GithubStrategy } from './auth.strategy';\n\n@Module({\n    providers: [GithubStrategy]\n})\nexport class AuthModule {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后在 AppController 添加两个路由："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"\nimport { Controller, Get, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('')\nexport class AppController {\n  constructor(private appService: AppService) {}\n\n  @Get('login')\n  @UseGuards(AuthGuard('github'))\n  async login() {\n  }\n\n  @Get('callback')\n  @UseGuards(AuthGuard('github'))\n  async authCallback(@Req() req) {\n    return req.user;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"login 是触发 github 登录的，然后 callback 是回调的 url。"}),"\n",(0,r.jsx)(n.p,{children:"前面讲过 passport 的策略会在验证过后把 validate 的返回值放在 request.user 上。"}),"\n",(0,r.jsx)(n.p,{children:"所以这里可以从 req.user 取到返回的用户信息。"}),"\n",(0,r.jsx)(n.p,{children:"跑一下："}),"\n",(0,r.jsxs)(n.p,{children:["当你访问 ",(0,r.jsx)(n.a,{href:"http://localhost:3000/login",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/login"})," ，会跳转 github 登录授权页面："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后点击 authorize，会回调 callback 接口："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样我们拿到 id 就可以唯一标识这个用户。"}),"\n",(0,r.jsx)(n.p,{children:"可以在用户表里添加一个 githubId 的字段，第一次用 github 登录的时候，记录返回的 id、username、avater 等信息，然后打开一个页面让用户完善其他信息，比如 email、password 等，。"}),"\n",(0,r.jsx)(n.p,{children:"然后后续用 github 登录的时候，直接根据 githubId 来查询用户即可。"}),"\n",(0,r.jsx)(n.p,{children:"我们改下 AppService："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\n\nconst users = [\n  {\n    username: 'guangguang',\n    githubId: '80755847',\n    email: 'yyy@163.com',\n    hobbies: ['sleep', 'writting']\n  }, \n  {\n    username: 'dongdong',\n    email: 'xxx@xx.com',\n    hobbies: ['swimming']\n  }\n]\n\n@Injectable()\nexport class AppService {\n\n  findUserByGithubId(githubId: string){\n    return users.find(item => item.githubId === githubId);\n  }\n\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"guanggaung 用户用 github 登录过，记录了他的 githubId。"}),"\n",(0,r.jsx)(n.p,{children:"然后在 AppController 里取出 github 返回的 id 来，查询用户信息，即可登录。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Get('callback')\n@UseGuards(AuthGuard('github'))\nasync authCallback(@Req() req) {\n    return this.appService.findUserByGithubId(req.user.id);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["可以看到，现在访问 ",(0,r.jsx)(n.a,{href:"http://localhost:3000/login",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/login"})," 会跳转 github 登录，然后授权后访问 callback，我们根据 id 查询出了用户信息返回。"]}),"\n",(0,r.jsx)(n.p,{children:"这样就实现了 github 的登录。"}),"\n",(0,r.jsx)(n.p,{children:"当然，这里应该是返回 jwt，然后后续直接用 jwt 来认证就好了。"}),"\n",(0,r.jsxs)(n.p,{children:["案例代码上传了",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/github-login",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"很多网站都支持三方登录，这样，不用每次都输入用户名密码，可以用别的账号来登录。"}),"\n",(0,r.jsx)(n.p,{children:"我们基于 passport 的 GitHub 策略实现了三方登录。"}),"\n",(0,r.jsx)(n.p,{children:"它核心就是要获取 clientID、clientSecret。"}),"\n",(0,r.jsx)(n.p,{children:"然后在 GithubStrategy 的构造函数传入这些信息，在 validate 方法里就可以拿到返回的 profile。"}),"\n",(0,r.jsx)(n.p,{children:"我们只要在用户表存一个 githubId 的字段，用 github 登录之后根据 id 查询用户信息，实现登录就好了。"}),"\n",(0,r.jsx)(n.p,{children:"这样就免去了每次登录都输入用户名密码的麻烦。"}),"\n",(0,r.jsx)(n.p,{children:"你平时用的三方登录就是这么实现的。"})]})}function f(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}let w=f;f.__RSPRESS_PAGE_META={},f.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F74.%20passport%20%E5%AE%9E%E7%8E%B0%20GitHub%20%E4%B8%89%E6%96%B9%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"74. passport 实现 GitHub 三方账号登录",headingTitle:"74. passport 实现 GitHub 三方账号登录",frontmatter:{}}}}]);