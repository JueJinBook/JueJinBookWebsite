"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["54675"],{39688:function(e,n,t){t.r(n),t.d(n,{default:()=>f});var r=t(552676),s=t(740453);let a=t.p+"static/image/cecafa9651a3f2397d6f3639b2e7e9ea.b79293a8.webp",i=t.p+"static/image/5e1ecdb9bc6f4b40839f40b59a36c7a1.07213e08.webp",o=t.p+"static/image/7e618b39d9398f15c2ebf60a8bc077b9.67702ff0.webp",l=t.p+"static/image/5862f7e9881e0393dbbad51eab943038.7ff6c310.webp",c=t.p+"static/image/e3d2b488b9f97e9b6f1e42f4744912f6.5da68c37.webp",d=t.p+"static/image/8dbc085436fe264cd38c0a3a46a99653.74d03943.webp",m=t.p+"static/image/57692b1035c9aa0f9cc96e061fe416fe.1cfd23a8.webp";function p(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",img:"img",code:"code",pre:"pre",ol:"ol",li:"li"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"34-实战篇--创建任务",children:["34-实战篇 ❘ 创建任务",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34-实战篇--创建任务",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"推荐学习指数：⭐️️⭐️️⭐️️"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"1-前言",children:["1. 前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本篇我们实现任务的创建和状态修改。效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"2-创建任务",children:["2. 创建任务",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-创建任务",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["我们先实现任务的创建。修改 ",(0,r.jsx)(n.code,{children:"prisma/schema.prisma"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'generator client {\n    provider = "prisma-client-js"\n}\n\ndatasource db {\n    provider = "mysql"\n    url      = env("DATABASE_URL")\n}\n\nmodel List {\n    id        Int      @id @default(autoincrement())\n    name      String\n    userId    String\n    color     String\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    tasks Task[]\n}\n\n\nmodel Task {\n    id        Int       @id @default(autoincrement())\n    content   String\n    userId    String\n    done      Boolean   @default(false)\n    expiresAt DateTime?\n    createdAt DateTime  @default(now())\n\n    ListId Int\n    list   List @relation(fields: [ListId], references: [id], onDelete: Cascade)\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"我们加上了 Task 表用于存储任务相关的信息，并将 Task 与 List 做了关联。"}),"\n",(0,r.jsx)(n.p,{children:"修改 Schema 后需要运行以下命令同步数据库并更新客户端："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"npx prisma migrate dev\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"注：如果更新后依然出现了 TypeScript 错误，那就重启一下 TS Server"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"src/lib/schema/createTask.ts"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\n\nexport const createTaskSchema = z.object({\n  listId: z.number().nonnegative(),\n  content: z.string().min(1, {\n    message: "请填写任务内容",\n  }),\n  expiresAt: z.string().optional(),\n});\n\nexport type CreateTaskSchema = typeof createTaskSchema;\n'})}),"\n",(0,r.jsx)(n.p,{children:"在这段代码中，我们声明了表单验证的 Schema。"}),"\n",(0,r.jsxs)(n.p,{children:["接下来是与上篇类似的 Superforms 和表单的处理流程。修改 ",(0,r.jsx)(n.code,{children:"src/routes/+page.server.ts"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"import type { PageServerLoad, Actions } from './$types.js';\nimport { superValidate } from 'sveltekit-superforms';\nimport { createListSchema } from '$lib/schema/createList';\n+import { createTaskSchema } from '$lib/schema/createTask';\nimport { zod } from 'sveltekit-superforms/adapters';\nimport { fail, error } from '@sveltejs/kit';\nimport { type List } from '@prisma/client';\nimport prisma from '$lib/prisma';\n\nexport const load: PageServerLoad = async ({ locals }) => {\n  const userId = locals.session.userId;\n  if (!userId) {\n    error(401, '尚未登录，请先登录');\n  }\n\n  try {\n    const checkLists: List[] = await prisma.list.findMany({\n      where: {\n        userId\n      }\n    });\n\n    return {\n      createListForm: await superValidate(zod(createListSchema)),\n+     createTaskForm: await superValidate(zod(createTaskSchema)),\n      checkLists\n    };\n  } catch (e) {\n    console.error(e);\n    error(401, '清单获取失败');\n  }\n};\n\n// ...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"src/lib/components/ListFooter.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"<script lang=\"ts\">\n  import {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogTrigger\n  } from '$lib/components/ui/alert-dialog';\n  import { enhance } from '$app/forms';\n  import { Separator } from '$lib/components/ui/separator';\n  import { Button } from '$lib/components/ui/button';\n  import { Trash2, CirclePlus } from 'lucide-svelte';\n  import { type List } from '@prisma/client';\n  import { toast } from 'svelte-sonner';\n  import CreateTaskModal from '$lib/components/CreateTaskModal.svelte';\n\n  const { checkList }: { checkList: List } = $props();\n  const { createdAt, id } = checkList;\n\n  let loading = $state(false);\n<\/script>\n\n<Separator class=\"dark:bg-white\" />\n<footer class=\"flex h-[60px] w-full items-center justify-between text-sm text-white\">\n  <p>创建于 {createdAt?.toLocaleDateString('zh-CN')}</p>\n  <div class=\"flex flex-row\">\n    <CreateTaskModal {checkList} />\n    <AlertDialog>\n      <AlertDialogTrigger asChild let:builder>\n        <Button builders={[builder]} size={'icon'} variant={'ghost'}>\n          <Trash2 />\n        </Button>\n      </AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>确定要删除吗？</AlertDialogTitle>\n          <AlertDialogDescription>该操作无法撤回</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel>取消</AlertDialogCancel>\n          <form\n            method=\"POST\"\n            action=\"?/deleteList\"\n            use:enhance={() => {\n              loading = true;\n              return async ({ result, update }) => {\n                loading = false;\n                if (result.type === 'success') {\n                  toast.success('清单删除成功！');\n                } else {\n                  console.log(result);\n                  toast.error('清单删除失败！');\n                }\n                update();\n              };\n            }}\n          >\n            <input type=\"hidden\" name=\"id\" value={id} />\n            <AlertDialogAction type=\"submit\" disabled={loading}>确定</AlertDialogAction>\n          </form>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  </div>\n</footer>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在这段代码中，我们抽离出一个 ",(0,r.jsx)(n.code,{children:"<CreateTaskModal>"}),"组件专门用于处理创建任务的 Modal："]}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"src/lib/components/CreateTaskModal.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"<script lang=\"ts\">\n  import {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogHeader,\n    DialogTitle,\n    DialogTrigger\n  } from '$lib/components/ui/dialog';\n  import {\n    FormControl,\n    FormField,\n    FormLabel,\n    FieldErrors,\n    FormButton\n  } from '$lib/components/ui/form';\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import { Popover, PopoverContent, PopoverTrigger } from '$lib/components/ui/popover';\n  import { Calendar } from '$lib/components/ui/calendar';\n  import { toast } from 'svelte-sonner';\n  import { CalendarDays, CirclePlus } from 'lucide-svelte';\n  import { type List } from '@prisma/client';\n  import {\n    CalendarDate,\n    DateFormatter,\n    type DateValue,\n    getLocalTimeZone,\n    parseDate,\n    today\n  } from '@internationalized/date';\n  import { createTaskSchema, type CreateTaskSchema } from '$lib/schema/createTask';\n  import { type SuperValidated, type Infer, superForm } from 'sveltekit-superforms';\n  import { zodClient } from 'sveltekit-superforms/adapters';\n  import { ListMap } from '$lib/const';\n  import { cn } from '$lib/utils';\n  import { page } from '$app/stores';\n\n  const { checkList }: { checkList: List } = $props();\n  const { id, name, color } = checkList;\n\n  let open = $state(false);\n\n  let data: SuperValidated<Infer<CreateTaskSchema>> = $page.data.createTaskForm;\n\n  const form = superForm(data, {\n    validators: zodClient(createTaskSchema),\n    onResult({ result }) {\n      if (result.type === 'success') {\n        toast.success('任务创建成功！');\n        open = false;\n      } else {\n        toast.error('任务创建失败!请稍后重试');\n      }\n    }\n  });\n\n  const { form: formData, enhance, submitting, reset } = form;\n\n  const onOpenChange = (open: boolean) => {\n    open = open;\n    reset();\n  };\n\n  const df = new DateFormatter('zh-CN', {\n    dateStyle: 'long'\n  });\n\n  let value: DateValue | undefined = $state(undefined);\n\n  $effect(() => {\n    value = $formData.expiresAt ? parseDate($formData.expiresAt) : undefined;\n  });\n\n  let placeholder: DateValue = $state(today(getLocalTimeZone()));\n<\/script>\n\n<Dialog bind:open {onOpenChange}>\n  <DialogTrigger asChild let:builder>\n    <Button builders={[builder]} size={'icon'} variant={'ghost'}>\n      <CirclePlus />\n    </Button>\n  </DialogTrigger>\n  <DialogContent class=\"sm:max-w-[425px]\">\n    <DialogHeader>\n      <DialogTitle>添加任务</DialogTitle>\n      <DialogDescription>任务将添加到 「{name}」 清单</DialogDescription>\n    </DialogHeader>\n    <div class=\"grid gap-4 py-4\">\n      <form method=\"POST\" action=\"?/addTask\" use:enhance>\n        <FormField {form} name=\"content\">\n          <FormControl let:attrs>\n            <FormLabel>任务内容：</FormLabel>\n            <Input class=\"col-span-3\" {...attrs} bind:value={$formData.content} />\n            <FieldErrors />\n          </FormControl>\n        </FormField>\n        <FormField {form} name=\"expiresAt\">\n          <FormControl let:attrs>\n            <FormLabel>截止日期：</FormLabel>\n            <Popover>\n              <PopoverTrigger asChild let:builder>\n                <Button\n                  variant={'outline'}\n                  class={cn(\n                    'w-full justify-start text-left font-normal',\n                    !value && 'text-muted-foreground'\n                  )}\n                  builders={[builder]}\n                >\n                  <CalendarDays class=\"mr-2 h-4 w-4\" />\n                  {value ? df.format(value.toDate(getLocalTimeZone())) : '选择完成日期'}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent>\n                <Calendar\n                  {value}\n                  bind:placeholder\n                  initialFocus\n                  onValueChange={(v) => {\n                    if (v) {\n                      $formData.expiresAt = v.toString();\n                    } else {\n                      $formData.expiresAt = '';\n                    }\n                  }}\n                />\n              </PopoverContent>\n            </Popover>\n            <FieldErrors />\n            <input hidden value={$formData.expiresAt} name={attrs.name} />\n            <input hidden value={id} name=\"listId\" />\n          </FormControl>\n        </FormField>\n        <FormButton\n          disabled={$submitting}\n          class={cn('mt-4 w-full text-white dark:text-white', ListMap.get(color))}\n        >\n          确认\n        </FormButton>\n      </form>\n    </div>\n  </DialogContent>\n</Dialog>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这段代码就是实现主要的前端交互，实现方式与上篇类似，主要是时间的处理看起来比较复杂，之所以使用 ",(0,r.jsx)(n.code,{children:"@internationalized/date"}),"是因为 Calendar 组件底层依赖的就是这个组件，我们添加 Calendar 组件的时候，会安装此工具库。"]}),"\n",(0,r.jsxs)(n.p,{children:["最后修改 ",(0,r.jsx)(n.code,{children:"src/routes/+page.server.ts"}),"，完整代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import type { PageServerLoad, Actions } from "./$types.js";\nimport { superValidate } from "sveltekit-superforms";\nimport { createListSchema } from "$lib/schema/createList";\nimport { createTaskSchema } from "$lib/schema/createTask";\nimport { zod } from "sveltekit-superforms/adapters";\nimport { fail, error } from "@sveltejs/kit";\nimport { type List } from "@prisma/client";\nimport prisma from "$lib/prisma";\n\nexport const load: PageServerLoad = async ({ locals }) => {\n  const userId = locals.session.userId;\n  if (!userId) {\n    error(401, "尚未登录，请先登录");\n  }\n\n  try {\n    const checkLists: List[] = await prisma.list.findMany({\n      where: {\n        userId,\n      },\n    });\n\n    return {\n      createListForm: await superValidate(zod(createListSchema)),\n      createTaskForm: await superValidate(zod(createTaskSchema)),\n      checkLists,\n    };\n  } catch (e) {\n    console.error(e);\n    error(401, "清单获取失败");\n  }\n};\n\nexport const actions: Actions = {\n  addList: async (event) => {\n    const form = await superValidate(event, zod(createListSchema));\n\n    if (!form.valid) {\n      return fail(400, {\n        form,\n      });\n    }\n\n    try {\n      const userId = event.locals.session.userId;\n      // 创建清单\n      await prisma.list.create({\n        data: {\n          userId,\n          color: form.data.color,\n          name: form.data.name,\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        form,\n        message: "清单创建失败~",\n      });\n    }\n\n    console.log(form);\n    return {\n      form,\n    };\n  },\n  deleteList: async (event) => {\n    try {\n      const userId = event.locals.session.userId;\n      const data = await event.request.formData();\n      const id = Number(data.get("id"));\n      await prisma.list.delete({\n        where: {\n          id,\n          userId,\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        message: "删除清单失败",\n      });\n    }\n  },\n  addTask: async (event) => {\n    const form = await superValidate(event, zod(createTaskSchema));\n\n    if (!form.valid) {\n      return fail(400, {\n        form,\n      });\n    }\n\n    try {\n      const userId = event.locals.session.userId;\n      const { content, expiresAt, listId } = form.data;\n\n      await prisma.task.create({\n        data: {\n          userId,\n          content,\n          expiresAt: expiresAt ? new Date(expiresAt) : null,\n          list: {\n            connect: {\n              id: listId,\n            },\n          },\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        message: "添加任务失败",\n        form,\n      });\n    }\n\n    console.log(form);\n\n    return {\n      form,\n    };\n  },\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"在这段代码中，我们添加了 addTask 这个 Form action。"}),"\n",(0,r.jsx)(n.p,{children:"此时浏览器效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"查看数据库，检查数据是否成功写入："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"3-展示任务",children:["3. 展示任务",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-展示任务",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"此时数据应该成功写入，我们在页面加载的时候将该数据查询出来。"}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"src/routes/+page.server.ts"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"import type { PageServerLoad, Actions } from './$types.js';\nimport { superValidate } from 'sveltekit-superforms';\nimport { createListSchema } from '$lib/schema/createList';\nimport { createTaskSchema } from '$lib/schema/createTask';\nimport { zod } from 'sveltekit-superforms/adapters';\nimport { fail, error } from '@sveltejs/kit';\nimport { type List } from '@prisma/client';\nimport prisma from '$lib/prisma';\n\nexport const load: PageServerLoad = async ({ locals }) => {\n  const userId = locals.session.userId;\n  if (!userId) {\n    error(401, '尚未登录，请先登录');\n  }\n\n  try {\n    const checkLists: List[] = await prisma.list.findMany({\n      where: {\n        userId\n      },\n+     include: {\n+       tasks: true\n+     }\n    });\n\n    return {\n      createListForm: await superValidate(zod(createListSchema)),\n      createTaskForm: await superValidate(zod(createTaskSchema)),\n      checkLists\n    };\n  } catch (e) {\n    console.error(e);\n    error(401, '清单获取失败');\n  }\n};\n\nexport const actions: Actions = {\n  addList: async (event) => {\n    const form = await superValidate(event, zod(createListSchema));\n\n    if (!form.valid) {\n      return fail(400, {\n        form\n      });\n    }\n\n    try {\n      const userId = event.locals.session.userId;\n      // 创建清单\n      await prisma.list.create({\n        data: {\n          userId,\n          color: form.data.color,\n          name: form.data.name\n        }\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        form,\n        message: '清单创建失败~'\n      });\n    }\n\n    console.log(form);\n    return {\n      form\n    };\n  },\n  deleteList: async (event) => {\n    try {\n      const userId = event.locals.session.userId;\n      const data = await event.request.formData();\n      const id = Number(data.get('id'));\n      await prisma.list.delete({\n        where: {\n          id,\n          userId\n        }\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        message: '删除清单失败'\n      });\n    }\n  },\n  addTask: async (event) => {\n    const form = await superValidate(event, zod(createTaskSchema));\n\n    if (!form.valid) {\n      return fail(400, {\n        form\n      });\n    }\n\n    try {\n      const userId = event.locals.session.userId;\n      const { content, expiresAt, listId } = form.data;\n\n      await prisma.task.create({\n        data: {\n          userId,\n          content,\n          expiresAt: expiresAt ? new Date(expiresAt) : null,\n          list: {\n            connect: {\n              id: listId\n            }\n          }\n        }\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        message: '添加任务失败',\n        form\n      });\n    }\n\n    console.log(form);\n\n    return {\n      form\n    };\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["现在修改主页的样式，修改 ",(0,r.jsx)(n.code,{children:"src/routes/+page.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<script lang=\"ts\">\n  import type { PageData } from './$types.js';\n  import SignedIn from 'clerk-sveltekit/client/SignedIn.svelte';\n  import ClerkLoading from 'clerk-sveltekit/client/ClerkLoading.svelte';\n\n  import {\n    Card,\n    CardDescription,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n    CardContent\n  } from '$lib/components/ui/card';\n  import { Skeleton } from '$lib/components/ui/skeleton';\n  import CreateListModal from '$lib/components/CreateListModal.svelte';\n  import ListFooter from '$lib/components/ListFooter.svelte';\n  import TaskItem from '$lib/components/TaskItem.svelte';\n  import { ListMap } from '$lib/const';\n  import { cn } from '$lib/utils';\n\n  const { data }: { data: PageData } = $props();\n<\/script>\n\n<Card class=\"mx-4\">\n  <CardHeader class=\"pb-3\">\n    <CardTitle class=\"text-lg\">\n      <SignedIn let:user>\n        欢迎 {user?.fullName}!\n      </SignedIn>\n      <ClerkLoading>\n        <Skeleton class=\"h-7 w-[150px]\" />\n      </ClerkLoading>\n    </CardTitle>\n    <CardDescription class=\"text-primary max-w-lg text-balance leading-relaxed\">\n      道虽迩，不行不至；事虽小，不为不成\n    </CardDescription>\n  </CardHeader>\n  <CardFooter>\n    <CreateListModal />\n  </CardFooter>\n</Card>\n\n<div class=\"mx-4 mt-6 flex flex-col gap-4\">\n  {#if data.checkLists.length > 0}\n    {#each data.checkLists as { id, name, color, tasks }, index (id)}\n      <Card class={cn('w-full text-white sm:col-span-2', ListMap.get(color))}>\n        <CardHeader>\n          <CardTitle>{name}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {#if tasks && tasks.length === 0}\n            <p>目前没有任务</p>\n          {:else if tasks && tasks.length > 0}\n            <div>\n              {#each tasks as task (task.id)}\n                <TaskItem {task} />\n              {/each}\n            </div>\n          {/if}\n        </CardContent>\n        <CardFooter class=\"flex-col pb-2\">\n          <ListFooter checkList={data.checkLists[index]} />\n        </CardFooter>\n      </Card>\n    {/each}\n  {:else}\n    <span class=\"text-center\">尚未创建清单，快创建一个吧</span>\n  {/if}\n</div>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"src/lib/components/TaskItem.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"<script lang=\"ts\">\n  import { Checkbox } from '$lib/components/ui/checkbox';\n  import { type Task } from '@prisma/client';\n  import { cn } from '$lib/utils';\n  const { task }: { task: Task } = $props();\n<\/script>\n\n<div class=\"flex items-center gap-2\">\n  <Checkbox id={task.id.toString()} class=\"bg-white\" checked={task.done} />\n  <label\n    for={task.id.toString()}\n    class={cn('flex flex-row items-center gap-2', task.done && 'line-through')}\n  >\n    {task.content}\n    {#if task.expiresAt}\n      <p\n        class={cn('text-xs text-white', {\n          'text-red-800': Date.now() - task.expiresAt.getTime() > 0\n        })}\n      >\n        {task.expiresAt.toLocaleDateString()}\n      </p>\n    {/if}\n  </label>\n</div>\n"})}),"\n",(0,r.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"4-修改任务状态",children:["4. 修改任务状态",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-修改任务状态",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现在我们实现任务状态的修改，即点击复选框的时候，修改任务的完整状态。"}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"src/routes/+page.server.ts"}),"，完整代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import type { PageServerLoad, Actions } from "./$types.js";\nimport { superValidate } from "sveltekit-superforms";\nimport { createListSchema } from "$lib/schema/createList";\nimport { createTaskSchema } from "$lib/schema/createTask";\nimport { zod } from "sveltekit-superforms/adapters";\nimport { fail, error } from "@sveltejs/kit";\nimport { Prisma } from "@prisma/client";\nimport prisma from "$lib/prisma";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst listWithTasks = Prisma.validator<Prisma.ListDefaultArgs>()({\n  include: { tasks: true },\n});\ntype ListWithTask = Prisma.ListGetPayload<typeof listWithTasks>;\n\nexport const load: PageServerLoad = async ({ locals }) => {\n  const userId = locals.session.userId;\n  if (!userId) {\n    error(401, "尚未登录，请先登录");\n  }\n\n  try {\n    const checkLists: ListWithTask[] = await prisma.list.findMany({\n      where: {\n        userId,\n      },\n      include: {\n        tasks: true,\n      },\n    });\n\n    return {\n      createListForm: await superValidate(zod(createListSchema)),\n      createTaskForm: await superValidate(zod(createTaskSchema)),\n      checkLists,\n    };\n  } catch (e) {\n    console.error(e);\n    error(401, "清单获取失败");\n  }\n};\n\nexport const actions: Actions = {\n  addList: async (event) => {\n    const form = await superValidate(event, zod(createListSchema));\n\n    if (!form.valid) {\n      return fail(400, {\n        form,\n      });\n    }\n\n    try {\n      const userId = event.locals.session.userId;\n      // 创建清单\n      await prisma.list.create({\n        data: {\n          userId,\n          color: form.data.color,\n          name: form.data.name,\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        form,\n        message: "清单创建失败~",\n      });\n    }\n\n    console.log(form);\n    return {\n      form,\n    };\n  },\n  deleteList: async (event) => {\n    try {\n      const userId = event.locals.session.userId;\n      const data = await event.request.formData();\n      const id = Number(data.get("id"));\n      await prisma.list.delete({\n        where: {\n          id,\n          userId,\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        message: "删除清单失败",\n      });\n    }\n  },\n  addTask: async (event) => {\n    const form = await superValidate(event, zod(createTaskSchema));\n\n    if (!form.valid) {\n      return fail(400, {\n        form,\n      });\n    }\n\n    try {\n      const userId = event.locals.session.userId;\n      const { content, expiresAt, listId } = form.data;\n\n      await prisma.task.create({\n        data: {\n          userId,\n          content,\n          expiresAt: expiresAt ? new Date(expiresAt) : null,\n          list: {\n            connect: {\n              id: listId,\n            },\n          },\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        message: "添加任务失败",\n        form,\n      });\n    }\n\n    console.log(form);\n\n    return {\n      form,\n    };\n  },\n  setTask: async (event) => {\n    try {\n      const data = await event.request.formData();\n      const taskId = data.get("taskId") as string;\n      const checked = data.get("checked") as string;\n      const userId = event.locals.session.userId;\n\n      await prisma.task.update({\n        where: {\n          id: +taskId,\n          userId,\n        },\n        data: {\n          done: checked == "true" ? true : false,\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        message: "修改任务失败",\n      });\n    }\n  },\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"主要是添加一个 setTask Form Action。"}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"src/lib/components/TaskItem.svelte"}),"，完整代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"<script lang=\"ts\">\n  import { Checkbox } from '$lib/components/ui/checkbox';\n  import { type Task } from '@prisma/client';\n  import { cn } from '$lib/utils';\n  const { task }: { task: Task } = $props();\n  import { enhance, applyAction, deserialize } from '$app/forms';\n  import type { ActionResult } from '@sveltejs/kit';\n  import { invalidateAll } from '$app/navigation';\n  import { toast } from 'svelte-sonner';\n\n  let taskChecked: boolean = $state(task.done);\n  $effect(() => {\n    taskChecked = task.done;\n  });\n<\/script>\n\n<div class=\"flex items-center gap-2\">\n  <Checkbox\n    id={task.id.toString()}\n    class=\"bg-white\"\n    bind:checked={taskChecked}\n    onCheckedChange={async (checked) => {\n      const formData = new FormData();\n      formData.append('taskId', String(task.id));\n      formData.append('checked', String(checked));\n\n      const response = await fetch('?/setTask', {\n        method: 'POST',\n        body: formData\n      });\n\n      const result: ActionResult = deserialize(await response.text());\n      console.log(result);\n      if (result.type === 'success' && checked) {\n        toast.success('恭喜完成任务');\n      } else if (result.type === 'failure' || result.type == 'error') {\n        toast.error('修改任务失败！');\n      }\n      await invalidateAll();\n      applyAction(result);\n    }}\n  />\n  <label\n    for={task.id.toString()}\n    class={cn('flex flex-row items-center gap-2', task.done && 'line-through')}\n  >\n    {task.content}\n    {#if task.expiresAt}\n      <p\n        class={cn('text-xs text-white', {\n          'text-red-800': Date.now() - task.expiresAt.getTime() > 0\n        })}\n      >\n        {task.expiresAt.toLocaleDateString()}\n      </p>\n    {/if}\n  </label>\n</div>\n"})}),"\n",(0,r.jsx)(n.p,{children:"此时浏览器效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"5-构建",children:["5. 构建",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-构建",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现在我们已经完成了项目。在正式构建之前，要检查一下是否有错误，运行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run check\n"})}),"\n",(0,r.jsx)(n.p,{children:"可以看到有一个 lodash.merge 的类型错误："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"解决也很简单，运行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"npm i --save-dev @types/lodash.merge\n"})}),"\n",(0,r.jsx)(n.p,{children:"再次检查："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"最后，我们将代码提交："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'git add -A && git commit -m "Add Task"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["此时可以运行 ",(0,r.jsx)(n.code,{children:"npm run build"}),"进行构建，运行 ",(0,r.jsx)(n.code,{children:"npm run preview"}),"进行预览。"]}),"\n",(0,r.jsx)(n.p,{children:"具体的部署参考构建与部署篇选择合适的适配器部署即可。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["仓库源码：",(0,r.jsx)(n.code,{children:"git clone git@github.com:mqyqingfeng/learn-svelte.git"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"6-恭喜你",children:["6. 恭喜你！",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-恭喜你",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"看到这里，恭喜你完成了第三阶段 —— 项目实战："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"第一阶段：Svelte 5 \uD83C\uDF89"}),"\n",(0,r.jsx)(n.li,{children:"第二阶段：SvelteKit \uD83C\uDF89"}),"\n",(0,r.jsx)(n.li,{children:"第三阶段：项目实战 \uD83C\uDF89"}),"\n",(0,r.jsx)(n.li,{children:"第四阶段：Svelte 原理"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"此时你应该对如何开发 Svelte 项目有了一个认知。"}),"\n",(0,r.jsx)(n.p,{children:"接下来我们进入最后一章，也就是 Svelte 原理篇，了解 Svelte 响应式的奥秘。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}let f=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Svelte%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F34-%E5%AE%9E%E6%88%98%E7%AF%87%20%E2%9D%98%20%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1.md"]={toc:[{text:"1. 前言",id:"1-前言",depth:2},{text:"2. 创建任务",id:"2-创建任务",depth:2},{text:"3. 展示任务",id:"3-展示任务",depth:2},{text:"4. 修改任务状态",id:"4-修改任务状态",depth:2},{text:"5. 构建",id:"5-构建",depth:2},{text:"6. 恭喜你！",id:"6-恭喜你",depth:2}],title:"34-实战篇 ❘ 创建任务",headingTitle:"34-实战篇 ❘ 创建任务",frontmatter:{}}}}]);