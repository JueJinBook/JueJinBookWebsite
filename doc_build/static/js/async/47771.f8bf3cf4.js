"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["47771"],{757871:function(e,s,c){c.r(s),c.d(s,{default:()=>i});var d=c(552676),r=c(740453);function n(e){let s=Object.assign({h1:"h1",a:"a",p:"p",code:"code",pre:"pre",blockquote:"blockquote",h2:"h2",img:"img",ol:"ol",li:"li"},(0,r.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(s.h1,{id:"16高级-7reset-的本质不止可以撤销提交",children:["16高级 7：reset 的本质——不止可以撤销提交",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#16高级-7reset-的本质不止可以撤销提交",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["前面讲到，在最新的 ",(0,d.jsx)(s.code,{children:"commit"})," 写错时，可以用 ",(0,d.jsx)(s.code,{children:"reset --hard"})," 来把 ",(0,d.jsx)(s.code,{children:"commit"})," 撤销："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git reset --hard HEAD^\n"})}),"\n",(0,d.jsxs)(s.blockquote,{children:["\n",(0,d.jsxs)(s.p,{children:["用这行代码可以撤销掉当前 ",(0,d.jsx)(s.code,{children:"commit"})]}),"\n"]}),"\n",(0,d.jsxs)(s.p,{children:["在这节里，就对 ",(0,d.jsx)(s.code,{children:"reset"})," 多说点，说说它的本质，说说它在撤销提交之外的用途。"]}),"\n",(0,d.jsxs)(s.h2,{id:"reset-的本质移动-head-以及它所指向的-branch",children:["reset 的本质：移动 HEAD 以及它所指向的 branch",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#reset-的本质移动-head-以及它所指向的-branch",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["实质上，",(0,d.jsx)(s.code,{children:"reset"})," 这个指令虽然可以用来撤销 ",(0,d.jsx)(s.code,{children:"commit"})," ，但它的实质行为并不是撤销，而是移动 ",(0,d.jsx)(s.code,{children:"HEAD"})," ，并且「捎带」上 ",(0,d.jsx)(s.code,{children:"HEAD"})," 所指向的 ",(0,d.jsx)(s.code,{children:"branch"}),"（如果有的话）。也就是说，",(0,d.jsx)(s.code,{children:"reset"}),' 这个指令的行为其实和它的字面意思 "reset"（重置）十分相符：它是用来重置 ',(0,d.jsx)(s.code,{children:"HEAD"})," 以及它所指向的 ",(0,d.jsx)(s.code,{children:"branch"})," 的位置的。"]}),"\n",(0,d.jsxs)(s.p,{children:["而 ",(0,d.jsx)(s.code,{children:"reset --hard HEAD^"})," 之所以起到了撤销 ",(0,d.jsx)(s.code,{children:"commit"})," 的效果，是因为它把 ",(0,d.jsx)(s.code,{children:"HEAD"})," 和它所指向的 ",(0,d.jsx)(s.code,{children:"branch"})," 一起移动到了当前 ",(0,d.jsx)(s.code,{children:"commit"})," 的父 ",(0,d.jsx)(s.code,{children:"commit"})," 上，从而起到了「撤销」的效果："]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe19c8a3235853?w=466&h=262&f=gif&s=120940",alt:""})}),"\n",(0,d.jsxs)(s.blockquote,{children:["\n",(0,d.jsxs)(s.p,{children:["Git 的历史只能往回看，不能向未来看，所以把 ",(0,d.jsx)(s.code,{children:"HEAD"})," 和 ",(0,d.jsx)(s.code,{children:"branch"})," 往回移动，就能起到撤回 ",(0,d.jsx)(s.code,{children:"commit"})," 的效果。"]}),"\n"]}),"\n",(0,d.jsxs)(s.p,{children:["所以同理，",(0,d.jsx)(s.code,{children:"reset --hard"})," 不仅可以撤销提交，还可以用来把 ",(0,d.jsx)(s.code,{children:"HEAD"})," 和 ",(0,d.jsx)(s.code,{children:"branch"})," 移动到其他的任何地方。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git reset --hard branch2\n"})}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe333cb605b0de?w=434&h=642&f=gif&s=154560",alt:""})}),"\n",(0,d.jsxs)(s.p,{children:["不过……",(0,d.jsx)(s.code,{children:"reset"})," 后面总是跟着的那个 ",(0,d.jsx)(s.code,{children:"--hard"})," 是什么意思呢？"]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"reset"})," 指令可以重置 ",(0,d.jsx)(s.code,{children:"HEAD"})," 和 ",(0,d.jsx)(s.code,{children:"branch"})," 的位置，不过在重置它们的同时，对工作目录可以选择不同的操作，而对工作目录的操作的不同，就是通过 ",(0,d.jsx)(s.code,{children:"reset"})," 后面跟的参数来确定的。"]}),"\n",(0,d.jsxs)(s.h2,{id:"reset---hard重置工作目录",children:["reset --hard：重置工作目录",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#reset---hard重置工作目录",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"reset --hard"})," 会在重置 ",(0,d.jsx)(s.code,{children:"HEAD"})," 和 ",(0,d.jsx)(s.code,{children:"branch"})," 的同时，重置工作目录里的内容。当你在 ",(0,d.jsx)(s.code,{children:"reset"})," 后面加了 ",(0,d.jsx)(s.code,{children:"--hard"})," 参数时，你的工作目录里的内容会被完全重置为和 ",(0,d.jsx)(s.code,{children:"HEAD"})," 的新位置相同的内容。换句话说，就是你的未提交的修改会被全部擦掉。"]}),"\n",(0,d.jsxs)(s.p,{children:["例如你在上次 ",(0,d.jsx)(s.code,{children:"commit"})," 之后又对文件做了一些改动："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git status\n"})}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe333cb5a0e894?w=621&h=236&f=jpeg&s=71681",alt:""})}),"\n",(0,d.jsxs)(s.p,{children:["然后，你执行了 ",(0,d.jsx)(s.code,{children:"reset"})," 并附上了 ",(0,d.jsx)(s.code,{children:"--hard"})," 参数："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git reset --hard HEAD^\n"})}),"\n",(0,d.jsxs)(s.p,{children:["你的 ",(0,d.jsx)(s.code,{children:"HEAD"})," 和当前 ",(0,d.jsx)(s.code,{children:"branch"})," 切到上一条 ",(0,d.jsx)(s.code,{children:"commit"})," 的同时，你工作目录里的新改动也一起全都消失了，不管它们是否被放进暂存区："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git status\n"})}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe333cb5dbef68?w=355&h=59&f=jpeg&s=20692",alt:""})}),"\n",(0,d.jsxs)(s.p,{children:["可以看到，在 ",(0,d.jsx)(s.code,{children:"reset --hard"})," 后，所有的改动都被擦掉了。"]}),"\n",(0,d.jsxs)(s.h2,{id:"reset---soft保留工作目录",children:["reset --soft：保留工作目录",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#reset---soft保留工作目录",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"reset --soft"})," 会在重置 ",(0,d.jsx)(s.code,{children:"HEAD"})," 和 ",(0,d.jsx)(s.code,{children:"branch"})," 时，保留工作目录和暂存区中的内容，并把重置 ",(0,d.jsx)(s.code,{children:"HEAD"})," 所带来的新的差异放进暂存区。"]}),"\n",(0,d.jsxs)(s.p,{children:["什么是「重置 ",(0,d.jsx)(s.code,{children:"HEAD"})," 所带来的新的差异」？就是这里："]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe333cb5c6a249?w=478&h=290&f=gif&s=202343",alt:""})}),"\n",(0,d.jsxs)(s.p,{children:["由于 ",(0,d.jsx)(s.code,{children:"HEAD"})," 从 ",(0,d.jsx)(s.code,{children:"4"})," 移动到了 ",(0,d.jsx)(s.code,{children:"3"}),"，而且在 ",(0,d.jsx)(s.code,{children:"reset"})," 的过程中工作目录的内容没有被清理掉，所以 ",(0,d.jsx)(s.code,{children:"4"})," 中的改动在 ",(0,d.jsx)(s.code,{children:"reset"})," 后就也成了工作目录新增的「工作目录和 ",(0,d.jsx)(s.code,{children:"HEAD"})," 的差异」。这就是上面一段中所说的「重置 ",(0,d.jsx)(s.code,{children:"HEAD"})," 所带来的差异」。"]}),"\n",(0,d.jsx)(s.p,{children:"所以在同样的情况下："}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git status\n"})}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe333cb5a0e894?w=621&h=236&f=jpeg&s=71681",alt:""})}),"\n",(0,d.jsxs)(s.p,{children:["假设此时当前 ",(0,d.jsx)(s.code,{children:"commit"})," 的改动内容是新增了 ",(0,d.jsx)(s.code,{children:"laughters.txt"})," 文件："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git show --stat\n"})}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe333cb7cdd727?w=533&h=180&f=jpeg&s=47095",alt:""})}),"\n",(0,d.jsx)(s.p,{children:"如果这时你执行："}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git reset --soft HEAD^\n"})}),"\n",(0,d.jsxs)(s.p,{children:["那么除了 ",(0,d.jsx)(s.code,{children:"HEAD"})," 和它所指向的 ",(0,d.jsx)(s.code,{children:"branch1"})," 被移动到 ",(0,d.jsx)(s.code,{children:"HEAD^"})," 之外，原先 ",(0,d.jsx)(s.code,{children:"HEAD"})," 处 ",(0,d.jsx)(s.code,{children:"commit"})," 的改动（也就是那个 ",(0,d.jsx)(s.code,{children:"laughters.txt"})," 文件）也会被放进暂存区："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git status\n"})}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe333cb7e6e40b?w=626&h=278&f=jpeg&s=90747",alt:""})}),"\n",(0,d.jsxs)(s.p,{children:["这就是 ",(0,d.jsx)(s.code,{children:"--soft"})," 和 ",(0,d.jsx)(s.code,{children:"--hard"})," 的区别：",(0,d.jsx)(s.code,{children:"--hard"})," 会清空工作目录的改动，而 ",(0,d.jsx)(s.code,{children:"--soft"})," 则会保留工作目录的内容，并把因为保留工作目录内容所带来的新的文件差异放进暂存区。"]}),"\n",(0,d.jsxs)(s.h2,{id:"reset-不加参数保留工作目录并清空暂存区",children:["reset 不加参数：保留工作目录，并清空暂存区",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#reset-不加参数保留工作目录并清空暂存区",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"reset"})," 如果不加参数，那么默认使用 ",(0,d.jsx)(s.code,{children:"--mixed"})," 参数。它的行为是：保留工作目录，并且清空暂存区。也就是说，工作目录的修改、暂存区的内容以及由 ",(0,d.jsx)(s.code,{children:"reset"})," 所导致的新的文件差异，都会被放进工作目录。简而言之，就是「把所有差异都混合（mixed）放在工作目录中」。"]}),"\n",(0,d.jsx)(s.p,{children:"还以同样的情况为例："}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git status\n"})}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe333cb5a0e894?w=621&h=236&f=jpeg&s=71681",alt:""})}),"\n",(0,d.jsxs)(s.blockquote,{children:["\n",(0,d.jsxs)(s.p,{children:["修改了 ",(0,d.jsx)(s.code,{children:"games.txt"})," 和 ",(0,d.jsx)(s.code,{children:"shopping list.txt"}),"，并把 ",(0,d.jsx)(s.code,{children:"games.txt"})," 放进了暂存区。"]}),"\n"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git show --stat\n"})}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe333cb7cdd727?w=533&h=180&f=jpeg&s=47095",alt:""})}),"\n",(0,d.jsxs)(s.blockquote,{children:["\n",(0,d.jsxs)(s.p,{children:["最新的 ",(0,d.jsx)(s.code,{children:"commit"})," 中新增了 ",(0,d.jsx)(s.code,{children:"laughters.txt"})," 文件。"]}),"\n"]}),"\n",(0,d.jsxs)(s.p,{children:["这时如果你执行无参数的 ",(0,d.jsx)(s.code,{children:"reset"}),"："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git reset HEAD^\n"})}),"\n",(0,d.jsxs)(s.p,{children:["工作目录的内容和 ",(0,d.jsx)(s.code,{children:"--soft"})," 一样会被保留，但和 ",(0,d.jsx)(s.code,{children:"--soft"})," 的区别在于，它会把暂存区清空："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-shell",children:"git status\n"})}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe333d086f9754?w=625&h=256&f=jpeg&s=70740",alt:""})}),"\n",(0,d.jsxs)(s.h2,{id:"小结",children:["小结",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["本节内容讲了 ",(0,d.jsx)(s.code,{children:"reset"})," 指令的本质：重置 ",(0,d.jsx)(s.code,{children:"HEAD"})," 以及它所指向的 ",(0,d.jsx)(s.code,{children:"branch"})," 的位置。同时，介绍了 ",(0,d.jsx)(s.code,{children:"reset"})," 的三种参数："]}),"\n",(0,d.jsxs)(s.ol,{children:["\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"--hard"}),"：重置位置的同时，清空工作目录的所有改动；"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"--soft"}),"：重置位置的同时，保留工作目录和暂存区的内容，并把重置 ",(0,d.jsx)(s.code,{children:"HEAD"})," 的位置所导致的新的文件差异放进暂存区。"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.code,{children:"--mixed"}),"（默认）：重置位置的同时，保留工作目录的内容，并清空暂存区。"]}),"\n"]}),"\n",(0,d.jsxs)(s.p,{children:["除了上面这三种参数，还有一些没有列出的较为不常用的参数；另外除了我讲的功能外，",(0,d.jsx)(s.code,{children:"reset"})," 其实也还有一些别的功能和用法。不过 ",(0,d.jsx)(s.code,{children:"reset"})," 最关键的功能、用法和本质原理就是上面这些了，想了解更多的话，可以去官网了解一下。"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,r.ah)(),e.components);return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(n,{...e})}):n(e)}let i=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Git%20%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%2F16%E9%AB%98%E7%BA%A7%207%EF%BC%9Areset%20%E7%9A%84%E6%9C%AC%E8%B4%A8%E2%80%94%E2%80%94%E4%B8%8D%E6%AD%A2%E5%8F%AF%E4%BB%A5%E6%92%A4%E9%94%80%E6%8F%90%E4%BA%A4.md"]={toc:[{text:"reset 的本质：移动 HEAD 以及它所指向的 branch",id:"reset-的本质移动-head-以及它所指向的-branch",depth:2},{text:"reset --hard：重置工作目录",id:"reset---hard重置工作目录",depth:2},{text:"reset --soft：保留工作目录",id:"reset---soft保留工作目录",depth:2},{text:"reset 不加参数：保留工作目录，并清空暂存区",id:"reset-不加参数保留工作目录并清空暂存区",depth:2},{text:"小结",id:"小结",depth:2}],title:"16高级 7：reset 的本质——不止可以撤销提交",headingTitle:"16高级 7：reset 的本质——不止可以撤销提交",frontmatter:{}}}}]);