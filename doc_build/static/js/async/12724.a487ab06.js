"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["12724"],{620638:function(n,e,a){a.r(e),a.d(e,{default:()=>m});var t=a(552676),s=a(740453);let i=a.p+"static/image/6ff2e0ccf68e5126f028efe9213451db.dcab5d71.gif",r=a.p+"static/image/a841aca804900fdfcdca69ed7d4c83fd.0fe85a7d.gif",l=a.p+"static/image/b83d8fa2d5bdefcd24a2f74725e23648.25010627.gif",c=a.p+"static/image/727cfe2fd0144bc4ac179340eab183d2.58875bf9.gif",o=a.p+"static/image/3d77ec714bb8ff59d4b8e0850bdfefc4.9899d66b.gif",d=a.p+"static/image/70931714824dc533347217f303f7dbff.f07b68bc.gif",p=a.p+"static/image/e590659f20dcacec38fdccfd62256681.4cedbc8e.webp",g=a.p+"static/image/c574df1972504dcc9901c4dcd35cde9a.3919ab3e.webp",h=a.p+"static/image/1989b3238be0bbafb9df191ee64d0267.d7f2cda0.gif";function x(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",img:"img",code:"code",h3:"h3",pre:"pre",blockquote:"blockquote",ol:"ol",li:"li"},(0,s.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"55实战篇-_-博客-_-i18n",children:["55.实战篇 _ 博客 _ i18n",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#55实战篇-_-博客-_-i18n",children:"#"})]}),"\n",(0,t.jsxs)(e.h2,{id:"前言",children:["前言",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["在",(0,t.jsx)(e.a,{href:"https://juejin.cn/book/7307859898316881957/section/7308914342949290022",target:"_blank",rel:"noopener noreferrer",children:"《路由篇 | 国际化》"}),"我们讲解了国际化的基本原理，但在实际开发中，我们往往会使用 react-i18next 或者 next-intl 辅助我们开发。在",(0,t.jsx)(e.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309112133474582578#heading-0",target:"_blank",rel:"noopener noreferrer",children:"《实战篇 | React Notes | 国际化》"}),"中，我们分别对这两种技术选型进行了讲解。"]}),"\n",(0,t.jsx)(e.p,{children:"其中， react-i18next 自由度高，但配置相对繁琐。next-intl 自由度低，但配置简单省事。本篇我们使用 react-i18next 来实现国际化。"}),"\n",(0,t.jsx)(e.p,{children:"我们想要实现的效果如下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:h,alt:"7.gif"})}),"\n",(0,t.jsxs)(e.p,{children:["页面右上角添加一个语言切换器，有中文和英文两种语言，默认是中文。以博客列表页面地址为例，中文页面地址是 ",(0,t.jsx)(e.code,{children:"http://localhost:3000/posts"}),"，英文页面地址为 ",(0,t.jsx)(e.code,{children:"http://localhost:3000/en/posts"}),"。当点击切换语言的时候，页面无刷新，直接实现切换。"]}),"\n",(0,t.jsxs)(e.h2,{id:"react-i18next",children:["react-i18next",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#react-i18next",children:"#"})]}),"\n",(0,t.jsxs)(e.h3,{id:"1-新建文件夹",children:["1. 新建文件夹",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-新建文件夹",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["在 ",(0,t.jsx)(e.code,{children:"app"})," 目录下添加一个名为  ",(0,t.jsx)(e.code,{children:"[lng]"}),"  的文件夹，将 ",(0,t.jsx)(e.code,{children:"favicon.ico"})," 以外的文件，移动到该文件夹下："]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,t.jsxs)(e.p,{children:["因为加了一层动态路由，如果要访问原本的博客列表页面，需要访问 ",(0,t.jsx)(e.a,{href:"http://localhost:3000/xxx/posts%EF%BC%8C%E6%AF%94%E5%A6%82%EF%BC%9A",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/xxx/posts，比如："})]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,t.jsxs)(e.p,{children:["因为文章标题的页面链接地址还是之前的，所以点击链接跳转会出现错误。我们修改下 ",(0,t.jsx)(e.code,{children:"app/[lng]/posts/page.js"}),"，修改代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'// ...\n\nfunction PostCard({ lng, ...post }) {\n  return (\n    <div className="mb-8">\n      <h2 className="mb-1 text-xl">\n        <Link\n          href={`/${lng}${post.url}`}\n          className="text-blue-700 hover:text-blue-900 dark:text-blue-400"\n        >\n          {post.title}\n        </Link>\n      </h2>\n      <time dateTime={post.date} className="mb-2 block text-xs text-gray-600">\n        {dayjs(post.date).format("DD/MM/YYYY")}\n      </time>\n    </div>\n  );\n}\n\nexport default function Home({ params: { lng } }) {\n  return (\n    <div className="mx-auto max-w-xl py-8">\n      <h1 className="mb-8 text-center text-2xl font-black">My Blog List</h1>\n      {allPosts.map((post, idx) => (\n        <PostCard key={idx} lng={lng} {...post} />\n      ))}\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"此时页面正常跳转："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:d,alt:"8.gif"})}),"\n",(0,t.jsxs)(e.h3,{id:"2-添加全局-i18n-配置",children:["2. 添加全局 i18n 配置",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-添加全局-i18n-配置",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["修改 ",(0,t.jsx)(e.code,{children:"data/siteMetadata.js"}),"，添加 language 配置项："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const siteMetadata = {\n  siteUrl: 'https://yayujs.com',\n  title: '冴羽的技术博客',\n  description: '冴羽的技术博客，分享技术、个人成长等内容',\n  author: '冴羽',\n  socialBanner: 'https://cdna.artstation.com/p/assets/images/images/028/138/058/large/z-w-gu-bandageb5f.jpg?1593594749',\n  languages: ['zh', 'en'],\n  fallbackLanguage: \"zh\"\n}\n\nexport default siteMetadata\n"})}),"\n",(0,t.jsx)(e.p,{children:"我们新建了 2 个字段，languages 用于指定 i18n 支持的语言，并据此生成语言切换器。fallbackLanguage 用于指定默认语言。"}),"\n",(0,t.jsx)(e.p,{children:"安装依赖项 i18next："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"npm i i18next\n"})}),"\n",(0,t.jsxs)(e.p,{children:["修改 ",(0,t.jsx)(e.code,{children:"app/[lng]/layout.js"}),"，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"// ...\nimport { dir } from 'i18next'\n\n// 添加静态路由\nexport async function generateStaticParams() {\n  return siteMetadata.languages.map((lng) => ({ lng }))\n}\n\n// 为 html 元素添加 lang、dir 属性\nexport default function RootLayout({ children, params: { lng } }) {\n  return (\n    <html lang={lng} dir={dir(lng)} suppressHydrationWarning>\n      <body>\n        <ThemeProviders>\n          <header className=\"flex justify-end\">\n            <ThemeSwitch />\n            <LangSwitch />\n          </header>\n          {children}\n        </ThemeProviders>\n      </body>\n    </html>\n  );\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"3-中间件设置",children:["3. 中间件设置",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-中间件设置",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["安装依赖项 ",(0,t.jsx)(e.a,{href:"https://www.npmjs.com/package/accept-language",target:"_blank",rel:"noopener noreferrer",children:"accept-language"}),"："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"npm i accept-language\n"})}),"\n",(0,t.jsx)(e.p,{children:"这是一个帮助我们匹配语言的库。它的基本用法如下："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import acceptLanguage from 'accept-language';\nacceptLanguage.languages(['en-US', 'zh-CN']);\nconsole.log(acceptLanguage.get('en-GB,en;q=0.8,sv'));\n/* 'en-US' */\n"})}),"\n",(0,t.jsxs)(e.p,{children:["在这段代码中，",(0,t.jsx)(e.code,{children:"['en-US', 'zh-CN']"}),"表示我们支持的语言，",(0,t.jsx)(e.code,{children:"'en-GB,en;q=0.8,sv'"}),"表示 HTTP 的 Accept-Language 标头。调用 get 方法会从支持语言中匹配出合适的语言。"]}),"\n",(0,t.jsxs)(e.p,{children:["项目根目录新建 ",(0,t.jsx)(e.code,{children:"middleware.js"}),"，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { NextResponse } from 'next/server'\nimport acceptLanguage from 'accept-language'\nimport siteMetadata from './data/siteMetadata'\n\nconst { fallbackLanguage, languages } = siteMetadata\nacceptLanguage.languages(languages)\n\nconst publicFile = /\\.(.*)$/\nconst excludeFile = []\n\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|assets|favicon.ico|sw.js|site.webmanifest).*)']\n}\n\nfunction getLocale(req) { \n  let language = acceptLanguage.get(req.headers.get('Accept-Language'))\n  if (!language) language = fallbackLanguage\n  return language\n }\n \nexport function middleware(request) {\n  const { pathname } = request.nextUrl\n\n  // 判断路径中是否存在支持的语言\n  const filtedLanguage = languages.filter((locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`)\n\n  if (filtedLanguage.length > 0) {\n    if (filtedLanguage[0] === fallbackLanguage) {\n      // /zh/xxx 重定向到 `/xxx`\n      const url = pathname.replace(`/${fallbackLanguage}`, '');\n      return NextResponse.redirect(new URL(url ? url : '/', request.url))\n    }\n    // 其他跳过\n    return\n  }\n\n  // 如果是 public 文件，不重定向\n  if (publicFile.test(pathname) && excludeFile.indexOf(pathname.substr(1)) == -1) return\n \n  // 获取匹配的 locale\n  const locale = getLocale(request)\n  request.nextUrl.pathname = `/${locale}${pathname}`\n\n  // 默认语言不重定向\n  if (locale == fallbackLanguage) {\n    return NextResponse.rewrite(request.nextUrl)\n  }\n  // 重定向，如 /products 重定向到 /en/products\n  return Response.redirect(request.nextUrl)\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["这里我们自定义了一些逻辑，访问 ",(0,t.jsx)(e.code,{children:"http://localhost:3000/zh"}),"会重定向到 ",(0,t.jsx)(e.code,{children:"http://localhost:3000/"}),"，访问 ",(0,t.jsx)(e.code,{children:"http://localhost:3000"}),"因为重写到 ",(0,t.jsx)(e.code,{children:"http://localhost:3000/zh"}),"，所以可以正常访问，不会出现 404 错误。具体效果如下："]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:o,alt:"9.gif"})}),"\n",(0,t.jsxs)(e.h3,{id:"4-配置翻译文件",children:["4. 配置翻译文件",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4-配置翻译文件",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"路由的配置已经完成，接下来配置翻译相关的文件。"}),"\n",(0,t.jsx)(e.p,{children:"安装依赖项："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npm i i18next i18next-resources-to-backend react-i18next\n"})}),"\n",(0,t.jsxs)(e.p,{children:["新建 ",(0,t.jsx)(e.code,{children:"next-blog/app/i18n/index.js"}),"，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { createInstance } from 'i18next'\nimport resourcesToBackend from 'i18next-resources-to-backend'\nimport { initReactI18next } from 'react-i18next/initReactI18next'\nimport siteMetadata from '@/data/siteMetadata'\n\nconst { fallbackLanguage, languages } = siteMetadata\n\nconst initI18next = async (lng = fallbackLanguage, ns = 'basic') => {\n  const i18nInstance = createInstance()\n  await i18nInstance\n    .use(initReactI18next)\n    .use(resourcesToBackend((language, namespace) => import(`./locales/${language}/${namespace}.json`)))\n    .init({\n      // debug: true,\n      supportedLngs: languages,\n      fallbackLng: fallbackLanguage,\n      lng,\n      fallbackNS: 'basic',\n      defaultNS: 'basic',\n      ns\n    })\n  return i18nInstance\n}\n\nexport async function useTranslation(lng, ns, options = {}) {\n  const i18nextInstance = await initI18next(lng, ns)\n  return {\n    t: i18nextInstance.getFixedT(lng, Array.isArray(ns) ? ns[0] : ns, options.keyPrefix),\n    i18n: i18nextInstance\n  }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"准备翻译文件："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-markdown",children:"app                      \n└─ i18n                  \n   ├─ locales            \n   │  ├─ en              \n   │  │  └─ basic.json  \n   │  └─ zh              \n   │     └─ basic.json        \n   └─ index.js\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"zh/basic.json"}),"代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'{\n  "blogList": "我的博客列表",\n  "like": "喜欢"\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"en/basic.json"}),"代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'{\n  "blogList": "My Blog List",\n  "like": "like"\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["为了方便引入 useTranslation，修改 ",(0,t.jsx)(e.code,{children:"jsconfig.json"}),"，添加代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "@/data/*": ["data/*"],\n      "@/components/*": ["components/*"],\n      "@/*": ["/*"],\n      "contentlayer/generated": ["./.contentlayer/generated"]\n    }\n  },\n  "include": [\n    "next-env.d.js",\n    "**/*.js",\n    "**/*.jsx",\n    ".next/types/**/*.js",\n    ".contentlayer/generated"\n  ]\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"5-服务端组件使用翻译",children:["5. 服务端组件使用翻译",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5-服务端组件使用翻译",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["修改 ",(0,t.jsx)(e.code,{children:"app/[lng]/posts/page.js"}),"，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import Link from \'next/link\'\nimport { allPosts } from \'contentlayer/generated\'\nimport dayjs from "dayjs";\nimport { useTranslation } from "@/app/i18n/index.js"\nimport Like from \'./like\';\n\nexport const generateMetadata = ({ params }) => {\n  return { \n    title: "博客列表",\n    description: "这是博客列表页面",\n    openGraph: {\n      title: \'博客列表\',\n      description: \'这是博客列表页面\'\n    }\n  }\n}\n\nfunction PostCard({lng, ...post}) {\n  return (\n    <div className="mb-8">\n      <h2 className="mb-1 text-xl">\n        <Link href={`/${lng}${post.url}`} className="text-blue-700 hover:text-blue-900 dark:text-blue-400">\n          {post.title}\n        </Link>\n      </h2>\n      <time dateTime={post.date} className="mb-2 block text-xs text-gray-600">\n        {dayjs(post.date).format(\'DD/MM/YYYY\')}\n      </time>\n    </div>\n  )\n}\n\nexport default async function Home({ params: { lng } }) {\n  const { t } = await useTranslation(lng)\n  return (\n    <div className="mx-auto max-w-xl py-8">\n      <h1 className="mb-8 text-center text-2xl font-black">{t(\'blogList\')}</h1>\n      {allPosts.map((post, idx) => (\n        <PostCard key={idx} {...post} lng={lng} />\n      ))}\n    </div>\n  )\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"此时博客列表页面已经成功渲染，同时能根据路由切换翻译："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:c,alt:"10.gif"})}),"\n",(0,t.jsxs)(e.h3,{id:"6-客户端组件使用翻译",children:["6. 客户端组件使用翻译",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#6-客户端组件使用翻译",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"刚才的使用方式适合服务端组件，尽可能使用服务端组件的方式。但如果需要在客户端组件中使用呢？"}),"\n",(0,t.jsx)(e.p,{children:"安装用到的库："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npm i react-cookie i18next-browser-languagedetector\n"})}),"\n",(0,t.jsxs)(e.p,{children:["新建 ",(0,t.jsx)(e.code,{children:"app/i18n/client.js"})," ，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"'use client'\n\nimport { useEffect, useState } from 'react'\nimport i18next from 'i18next'\nimport { initReactI18next, useTranslation as useTranslationOrg } from 'react-i18next'\nimport { useCookies } from 'react-cookie'\nimport resourcesToBackend from 'i18next-resources-to-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport siteMetadata from '@/data/siteMetadata'\n\nconst { fallbackLanguage: defaultLocale, languages: locales } = siteMetadata\nexport const cookieName = 'i18next'\n\nconst runsOnServerSide = typeof window === 'undefined'\n\ni18next\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .use(resourcesToBackend((language, namespace) => import(`./locales/${language}/${namespace}.json`)))\n  .init({\n    supportedLngs: locales,\n    fallbackLng: defaultLocale,\n    lng: defaultLocale,\n    fallbackNS: 'basic',\n    defaultNS: 'basic',\n    ns: 'basic',\n    lng: undefined,\n    detection: {\n      order: ['path', 'htmlTag', 'cookie', 'navigator'],\n    },\n    preload: runsOnServerSide ? locales : []\n  })\n\nexport function useTranslation(lng, ns, options) {\n  const [cookies, setCookie] = useCookies([cookieName])\n  const ret = useTranslationOrg(ns, options)\n  const { i18n } = ret\n  if (runsOnServerSide && lng && i18n.resolvedLanguage !== lng) {\n    i18n.changeLanguage(lng)\n  } else {\n    const [activeLng, setActiveLng] = useState(i18n.resolvedLanguage)\n    useEffect(() => {\n      if (activeLng === i18n.resolvedLanguage) return\n      setActiveLng(i18n.resolvedLanguage)\n    }, [activeLng, i18n.resolvedLanguage])\n    useEffect(() => {\n      if (!lng || i18n.resolvedLanguage === lng) return\n      i18n.changeLanguage(lng)\n    }, [lng, i18n])\n    useEffect(() => {\n      if (cookies.i18next === lng) return\n      setCookie(cookieName, lng, { path: '/' })\n    }, [lng, cookies.i18next])\n  }\n  return ret\n}\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["新建 ",(0,t.jsx)(e.code,{children:"app/[lng]/posts/like.js"}),"，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"'use client';\n\nimport { useTranslation } from \"@/app/i18n/client.js\"\nexport default function Like({lng}) {\n  const { t } = useTranslation(lng, 'basic')\n  return <button>{t('like')}</button>\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["修改 ",(0,t.jsx)(e.code,{children:"app/[lng]/posts/page.js"}),"，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import Link from \'next/link\'\nimport { allPosts } from \'contentlayer/generated\'\nimport dayjs from "dayjs";\nimport { useTranslation } from "@/app/i18n/index.js"\nimport Like from \'./like\';\n\nexport const generateMetadata = ({ params }) => {\n  return {\n    title: "博客列表",\n    description: "这是博客列表页面",\n    openGraph: {\n      title: \'博客列表\',\n      description: \'这是博客列表页面\'\n    }\n  }\n}\n\nfunction PostCard({ lng, ...post }) {\n  return (\n    <div className="mb-8">\n      <h2 className="mb-1 text-xl">\n        <Link href={`/${lng}${post.url}`} className="text-blue-700 hover:text-blue-900 dark:text-blue-400">\n          {post.title}\n        </Link>\n      </h2>\n      <time dateTime={post.date} className="mb-2 block text-xs text-gray-600">\n        {dayjs(post.date).format(\'DD/MM/YYYY\')}\n      </time>\n      <Like lng={lng} />\n    </div>\n  )\n}\n\nexport default async function Home({ params: { lng } }) {\n  const { t } = await useTranslation(lng)\n  return (\n    <div className="mx-auto max-w-xl py-8">\n      <h1 className="mb-8 text-center text-2xl font-black">{t(\'blogList\')}</h1>\n      {allPosts.map((post, idx) => (\n        <PostCard key={idx} {...post} lng={lng} />\n      ))}\n    </div>\n  )\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"我们添加了一个点赞按钮用于客户端组件的示例（尽管我们并没有添加任何事件），此时效果如下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:l,alt:"11.gif"})}),"\n",(0,t.jsx)(e.p,{children:"不同语言下的使用也没有问题。"}),"\n",(0,t.jsxs)(e.h3,{id:"7-添加语言切换器",children:["7. 添加语言切换器",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#7-添加语言切换器",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["新建 ",(0,t.jsx)(e.code,{children:"components/LangSwitch.js"}),"，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'"use client";\n\nimport { useState, useRef, Fragment, useEffect } from "react";\nimport {\n  usePathname,\n  useParams,\n  useRouter,\n  useSelectedLayoutSegments,\n} from "next/navigation";\nimport siteMetadata from "@/data/siteMetadata";\nimport { Menu, Transition, RadioGroup } from "@headlessui/react";\n\nconst { languages } = siteMetadata;\n\nconst LangSwitch = () => {\n  const urlSegments = useSelectedLayoutSegments();\n  const router = useRouter();\n  const params = useParams();\n  const [locale, setLocal] = useState(params?.lng);\n\n\n  const handleLocaleChange = (newLocale) => {\n    const newUrl = `/${newLocale}/${urlSegments.join("/")}`;\n    return newUrl;\n  };\n\n  const handleLinkClick = (newLocale) => {\n    const resolvedUrl = handleLocaleChange(newLocale);\n    router.push(resolvedUrl);\n  };\n\n  return (\n    <div className="relative inline-block text-left mr-5">\n      <Menu>\n        <div>\n          <Menu.Button>\n            {locale.charAt(0).toUpperCase() + locale.slice(1)}\n          </Menu.Button>\n        </div>\n        <Transition\n          as={Fragment}\n          enter="transition-all ease-out duration-300"\n          enterFrom="opacity-0 scale-95 translate-y-[-10px]"\n          enterTo="opacity-100 scale-100 translate-y-0"\n          leave="transition-all ease-in duration-200"\n          leaveFrom="opacity-100 scale-100 translate-y-0"\n          leaveTo="opacity-0 scale-95 translate-y-[10px]"\n          >\n          <Menu.Items className="absolute right-0 z-50 mt-2 w-12 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800">\n            <RadioGroup value={locale} onChange={handleLinkClick}>\n              <div className="py-1">\n                {languages.map((newLocale) => (\n            <RadioGroup.Option key={newLocale} value={newLocale}>\n              <Menu.Item>\n                <button className="group flex w-full items-center rounded-md px-2 py-2 text-sm">\n                  {newLocale.charAt(0).toUpperCase() + newLocale.slice(1)}\n                </button>\n              </Menu.Item>\n            </RadioGroup.Option>\n          ))}\n              </div>\n            </RadioGroup>\n          </Menu.Items>\n        </Transition>\n      </Menu>\n    </div>\n  );\n};\n\nexport default LangSwitch;\n\n'})}),"\n",(0,t.jsxs)(e.p,{children:["修改 ",(0,t.jsx)(e.code,{children:"app/[lng]/layout.js"}),"，引入 LangSwitch 组件，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"// ...\nimport LangSwitch from '@/components/LangSwitch';\n\n// ...\n\nexport default function RootLayout({ children, params: { lng } }) {\n  return (\n    <html lang={lng} dir={dir(lng)} suppressHydrationWarning>\n      <body>\n        <ThemeProviders>\n          <header className=\"flex justify-end\">\n            <ThemeSwitch />\n            <LangSwitch />\n          </header>\n          {children}\n        </ThemeProviders>\n      </body>\n    </html>\n  );\n}\n\n"})}),"\n",(0,t.jsx)(e.p,{children:"此时效果如下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:r,alt:"12.gif"})}),"\n",(0,t.jsxs)(e.h3,{id:"8-metadata-如何生成",children:["8. Metadata 如何生成？",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#8-metadata-如何生成",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"metadata 如何根据国际化生成呢？其实用法跟服务端组件一样。"}),"\n",(0,t.jsxs)(e.p,{children:["我们为博客列表页面添加一个单独的翻译文件。新建 ",(0,t.jsx)(e.code,{children:"app/i18n/locales/en/posts.json"}),"，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'{\n  "title": "My Blog List",\n  "description": "This is My blog list description"\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["新建 ",(0,t.jsx)(e.code,{children:"app/i18n/locales/zh/posts.json"}),"，代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'{\n  "title": "我的博客列表",\n  "description": "这是我的博客列表页面的描述"\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["修改 ",(0,t.jsx)(e.code,{children:"app/[lng]/posts/page.js"}),"，完整代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'import Link from \'next/link\'\nimport { allPosts } from \'contentlayer/generated\'\nimport dayjs from "dayjs";\nimport { useTranslation } from "@/app/i18n/index.js"\nimport Like from \'./like\';\n\nexport const generateMetadata = async ({ params: { lng } }) => {\n  const { t } = await useTranslation(lng, \'posts\')\n  return {\n    title: t("title"),\n    description: t("description"),\n    openGraph: {\n      title: \'博客列表\',\n      description: \'这是博客列表页面\'\n    }\n  }\n}\n\nfunction PostCard({ lng, ...post }) {\n  return (\n    <div className="mb-8">\n      <h2 className="mb-1 text-xl">\n        <Link href={`/${lng}${post.url}`} className="text-blue-700 hover:text-blue-900 dark:text-blue-400">\n          {post.title}\n        </Link>\n      </h2>\n      <time dateTime={post.date} className="mb-2 block text-xs text-gray-600">\n        {dayjs(post.date).format(\'DD/MM/YYYY\')}\n      </time>\n      <Like lng={lng} />\n    </div>\n  )\n}\n\nexport default async function Home({ params: { lng } }) {\n  const { t } = await useTranslation(lng)\n  return (\n    <div className="mx-auto max-w-xl py-8">\n      <h1 className="mb-8 text-center text-2xl font-black">{t(\'blogList\')}</h1>\n      {allPosts.map((post, idx) => (\n        <PostCard key={idx} {...post} lng={lng} />\n      ))}\n    </div>\n  )\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"此时效果如下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:i,alt:"13.gif"})}),"\n",(0,t.jsx)(e.p,{children:"可以看到，页面的元数据也随之发生了改变。"}),"\n",(0,t.jsxs)(e.h2,{id:"项目源码",children:["项目源码",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#项目源码",children:"#"})]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"功能实现：博客支持国际化"}),"\n",(0,t.jsxs)(e.li,{children:["源码地址：",(0,t.jsx)(e.a,{href:"https://github.com/mqyqingfeng/next-app-demo/tree/next-blog-4",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/mqyqingfeng/next-app-demo/tree/next-blog-4"})]}),"\n",(0,t.jsxs)(e.li,{children:["下载代码：",(0,t.jsx)(e.code,{children:"git clone -b next-blog-4 git@github.com:mqyqingfeng/next-app-demo.git"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.h2,{id:"总结",children:["总结",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["其实本篇跟",(0,t.jsx)(e.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309112133474582578#heading-0",target:"_blank",rel:"noopener noreferrer",children:"《实战篇 | React Notes | 国际化》"}),"中的实现代码非常类似。使用 react-i18next 虽然配置繁琐，但自由度更高，可以根据自己的需求自定义效果。"]})]})}function u(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(x,{...n})}):x(n)}let m=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F55.%E5%AE%9E%E6%88%98%E7%AF%87%20_%20%E5%8D%9A%E5%AE%A2%20_%20i18n.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"react-i18next",id:"react-i18next",depth:2},{text:"1. 新建文件夹",id:"1-新建文件夹",depth:3},{text:"2. 添加全局 i18n 配置",id:"2-添加全局-i18n-配置",depth:3},{text:"3. 中间件设置",id:"3-中间件设置",depth:3},{text:"4. 配置翻译文件",id:"4-配置翻译文件",depth:3},{text:"5. 服务端组件使用翻译",id:"5-服务端组件使用翻译",depth:3},{text:"6. 客户端组件使用翻译",id:"6-客户端组件使用翻译",depth:3},{text:"7. 添加语言切换器",id:"7-添加语言切换器",depth:3},{text:"8. Metadata 如何生成？",id:"8-metadata-如何生成",depth:3},{text:"项目源码",id:"项目源码",depth:2},{text:"总结",id:"总结",depth:2}],title:"55.实战篇 _ 博客 _ i18n",headingTitle:"55.实战篇 _ 博客 _ i18n",frontmatter:{}}}}]);