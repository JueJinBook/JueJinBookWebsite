"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["28808"],{456599:function(e,n,t){t.r(n),t.d(n,{default:()=>i});var s=t(552676),r=t(740453);function c(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",blockquote:"blockquote",h3:"h3",pre:"pre",code:"code",strong:"strong",ul:"ul",li:"li",h4:"h4"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"93客服消息",children:["93.客服消息",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#93客服消息",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"138-客服消息",children:["13.8 客服消息",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#138-客服消息",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在前面的章节，我们已经在小程序端将button 组件open-type 的值设置为 contact ，点击button就可以进入客服消息。不过这个客服消息使用的是官方的后台，没法进行深度的定制，我们可以使用云开发作为后台来自定义客服消息来实现快捷回复、添加常用回答等功能。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"如果是使用传统的开发方式，需要填写服务器地址（URL）、令牌（Token） 和 消息加密密钥（EncodingAESKey）等信息，然后结合将token、timestamp、nonce三个参数进行字典序排序、拼接、并进行sha1加密，然后将加密后的字符串与signature对比来验证消息的确来自微信服务器，之后再来进行接收消息和事件的处理，可谓十分繁琐，而使用云开发相对简单很多。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"1381-客服消息的配置与说明",children:["13.8.1 客服消息的配置与说明",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1381-客服消息的配置与说明",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"使用开发者工具新建一个云函数，比如customer，在config.json里，设置以下权限后部署上传到服务端。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "permissions": {\n    "openapi": [\n      "customerServiceMessage.send",\n      "customerServiceMessage.getTempMedia",\n      "customerServiceMessage.setTyping",\n      "customerServiceMessage.uploadTempMedia"\n    ]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["然后再打开云开发控制台，点击右上角的",(0,s.jsx)(n.strong,{children:"设置"}),"，选择",(0,s.jsx)(n.strong,{children:"全局设置"}),"，开启",(0,s.jsx)(n.strong,{children:"云函数接收消息推送"}),"，添加消息推送配置。为了学习方便我们将所有的消息类型都指定推送到customer云函数里。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"text，文本消息"}),"\n",(0,s.jsx)(n.li,{children:"image，图片消息"}),"\n",(0,s.jsx)(n.li,{children:"miniprogram，小程序卡片"}),"\n",(0,s.jsx)(n.li,{children:"event，事件类型user_enter_tempsession，进入客服消息时就会触发\n以上有四种消息类型，但是发送客服消息的customerServiceMessage.send的msgtype属性的合法值有text、image、link（图文链接消息）、miniprogrampage四种，也就是我们还可以发图文链接消息。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"1382-自动回复文本消息和链接",children:["13.8.2 自动回复文本消息和链接",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1382-自动回复文本消息和链接",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"1自动回复文本消息",children:["1、自动回复文本消息",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1自动回复文本消息",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"使用开发者工具新建一个页面，比如customer，然后在customer.wxml里输入以下按钮，"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<button open-type="contact" >进入客服</button>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["当用户通过button进入到客服消息之后，在聊天界面回复信息，就能触发设置好的customer云函数，比如下面的例子就是当用户发一条消息（包括表情）到客服消息会话界面，云函数就会给调用customerServiceMessage.send接口给用户回复两条文本消息（一次性可以回复多条），内容分别为",(0,s.jsx)(n.code,{children:"等候您多时啦"}),"和",(0,s.jsx)(n.code,{children:"欢迎关注云开发技术训练营"}),"，一个云函数里也是可以多次调用接口的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\nexports.main = async (event, context) => {\n  const wxContext = cloud.getWXContext() \n  try {\n    const result = await cloud.openapi.customerServiceMessage.send({\n      touser: wxContext.OPENID,\n      msgtype: 'text',\n      text: {\n        content: '等候您多时啦'\n      }\n    })\n    \n    const result2 = await cloud.openapi.customerServiceMessage.send({\n      touser: wxContext.OPENID,\n      msgtype: 'text',\n      text: {\n        content: '欢迎关注云开发技术训练营'\n      }\n    }) \n\n    return event    \n  } catch (err) {\n    console.log(err)\n    return err\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"发送文本消息时，支持插入跳小程序的文字链接的，比如我们把上面的文本消息改为以下代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'content: \'欢迎浏览<a href="http://www.qq.com" data-miniprogram-appid="你的appid" data-miniprogram-path="pages/index/index">点击跳小程序</a>\' \n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"data-miniprogram-appid 项，填写小程序appid，则表示该链接跳小程序；"}),"\n",(0,s.jsx)(n.li,{children:"data-miniprogram-path项，填写小程序路径，路径与app.json中保持一致，可带参数；"}),"\n",(0,s.jsx)(n.li,{children:"对于不支持data-miniprogram-appid 项的客户端版本，如果有herf项，则仍然保持跳href中的网页链接；"}),"\n",(0,s.jsx)(n.li,{children:"data-miniprogram-appid对应的小程序必须与公众号有绑定关系。"}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"2自动回复链接",children:["2、自动回复链接",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2自动回复链接",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们还可以给用户回复链接，我们可以把customer云函数修改为以下代码，当用户向微信聊天对话界面发送一条消息时，就会回复给用户一个链接，这个链接可以是外部链接哦。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\nexports.main = async (event, context) => {\n  const wxContext = cloud.getWXContext() \n  try {\n    const result = await cloud.openapi.customerServiceMessage.send({\n      touser: wxContext.OPENID,\n      msgtype: 'link',\n      link: {\n        title: '快来加入云开发技术训练营',\n        description: '零基础也能在10天内学会开发一个小程序',\n        url: 'https://cloud.tencent.com/',\n        thumbUrl: 'https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/love.png'\n      }\n    }) \n  return event    \n\n  } catch (err) {\n    console.log(err)\n    return err\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"3根据关键词来回复用户",children:["3、根据关键词来回复用户",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3根据关键词来回复用户",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"将上面的云函数部署之后，当用户向客服消息的聊天会话里输入内容时，不管用户发送的是什么内容，云函数都会回给用户相同的内容，这未免有点过于死板，客服消息能否根据用户发送的关键词回复用户不同的内容呢？要做到这一点我们需要能够获取到用户发送的内容。"}),"\n",(0,s.jsx)(n.p,{children:"我们可以留意云开发控制台云函数日志里看到，customer云函数返回的event对象里的Content属性就会记录用户发到聊天会话里的内容："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{"Content":"请问怎么加入云开发训练营",\n"CreateTime":1582877109,\n"FromUserName":"oUL-mu...XbuEDsn8",\n"MsgId":22661351901594052,\n"MsgType":"text",\n"ToUserName":"gh_b2bbe22535e4",\n"userInfo":{"appId":"wxda99ae4531b57046","openId":"oUL-m5FuRmuVmxvbYOGuXbuEDsn8"}}\n'})}),"\n",(0,s.jsx)(n.p,{children:"由于Content是字符串，那这个关键词既可以是非常精准的，比如“训练营”，或“云开发训练营”，还可以是非常模糊的“请问怎么加入云开发训练营”，我们只需要对字符串进行正则匹配处理即可，比如当用户只要发的内容包含“训练营”，就会收到链接："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\nexports.main = async (event, context) => {\n  const wxContext = cloud.getWXContext() \n  const keyword = event.Content\n  try {\n    if(keyword.search(/训练营/i)!=-1){\n      const result = await cloud.openapi.customerServiceMessage.send({\n        touser: wxContext.OPENID,\n        msgtype: 'link',\n        link: {\n          title: '快来加入云开发技术训练营',\n          description: '零基础也能在10天内学会开发一个小程序',\n          url: 'https://cloud.tencent.com/',\n          thumbUrl: 'https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/love.png'\n        }\n      })  \n    } \n    return event\n  } catch (err) {\n    console.log(err)\n    return err\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["在前面的案例里，我们都是使用",(0,s.jsx)(n.code,{children:"touser: wxContext.OPENID,"}),"，这个是用户在小程序端点击组件触发事件处理函数从而调用云函数，云函数在获取到的微信用户调用时的上下文里就有用户的openid。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"1382-自动触发event事件",children:["13.8.2 自动触发event事件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1382-自动触发event事件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"要触发event事件，我们可以将customer.wxml的按钮改为如下代码，这里的session-from是用户从该按钮进入客服消息会话界面时，开发者将收到带上本参数的事件推送，可用于区分用户进入客服会话的来源。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<button open-type="contact" bindcontact="onCustomerServiceButtonClick" session-from="文章详情的客服按钮">进入客服</button>\n'})}),"\n",(0,s.jsx)(n.p,{children:"由于我们开启了event类型的客服消息，事件类型的值为user_enter_tempsession，当用户点击button进入客服时，就会触发云函数，不用用户发消息就能触发，同时我们返回event对象."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\nexports.main = async (event, context) => {\n  const wxContext = cloud.getWXContext() \n  try {\n    const result = await cloud.openapi.customerServiceMessage.send({\n      touser: wxContext.OPENID,\n      msgtype: 'text',\n      text: {\n        content: '欢迎来到等候您多时啦'\n      }\n    })\n    return event\n  } catch (err) {\n    console.log(err)\n    return err\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"我们可以去云开发控制台查看返回的event对象"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{"CreateTime":1582876587,\n"Event":"user_enter_tempsession",\n"FromUserName":"oUL-m5F...8",\n"MsgType":"event",\n"SessionFrom":"文章详情的客服按钮",\n"ToUserName":"gh_b2bbe22535e4",\n"userInfo":{"appId":"wxda9...57046",\n"openId":"oUL-m5FuRmuVmx...sn8"}}\n'})}),"\n",(0,s.jsx)(n.p,{children:"在云函数端，我们是可以通过event.SessionFrom来获取到用户到底是点击了哪个按钮从而进入客服对话的，也可以根据用户进入客服会话的来源不同，给用户推送不同类型，比如我们可以给session-from的值设置为“训练营”，当用户进入客服消息会话就能推送相关的信息给到用户。"}),"\n",(0,s.jsx)(n.p,{children:"还有一点就是，bindcontact是给客服按钮绑定了了一个事件处理函数，这里为onCustomerServiceButtonClick，通过事件处理函数我们可以在小程序端做很多事情，比如记录用户点击了多少次带有标记（比如session-from的值设置为“训练营”）的客服消息的按钮等功能。"}),"\n",(0,s.jsxs)(n.h3,{id:"1383-自动回复图片",children:["13.8.3 自动回复图片",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1383-自动回复图片",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"要在客服消息里给用户回复图片，这个图片的来源只能是来源于微信服务器，我们需要先使用customerServiceMessage.uploadTempMedia，把图片文件上传到微信服务器，获取到mediaId（有点类似于微信服务器的fileID）,然后才能在客服消息里使用。"}),"\n",(0,s.jsx)(n.p,{children:"在customer云函数的index.js里输入以下代码并部署上线，我们将获取到的mediaId使用cloud.openapi.customerServiceMessage.send发给用户："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\nexports.main = async (event, context) => {\n  const wxContext = cloud.getWXContext() \n  try {\n    //我们通常会将云存储的图片作为客服消息媒体文件的素材\n    const fileID = 'cloud://xly-xrlur.786c-xly-xrlur-1300446086/1572315793628-366.png'\n \n    //uploadTempMedia的图片类型为Buffer，而从存储下载的图片格式也是Buffer\n    const res = await cloud.downloadFile({\n      fileID: fileID,\n    })\n    const Buffer = res.fileContent  \n    const result = await cloud.openapi.customerServiceMessage.uploadTempMedia({\n      type: 'image',\n      media: {\n        contentType: 'image/png',\n        value: Buffer\n      }\n    })\n\n    console.log(result.mediaId)\n    const mediaId = result.mediaId\n    const wxContext = cloud.getWXContext() \n    const result2 = await cloud.openapi.customerServiceMessage.send({\n      touser: wxContext.OPENID,\n      msgtype: 'image',\n      image: {\n        mediaId: mediaId\n      }\n    })\n  \n    return event\n  } catch (err) {\n    console.log(err)\n    return err\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"客服消息还能给用户回复小程序消息卡片，以及客服当前的输入状态给用户（使用customerServiceMessage.setTyping接口）。"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}let i=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F93.%E5%AE%A2%E6%9C%8D%E6%B6%88%E6%81%AF.md"]={toc:[{text:"13.8 客服消息",id:"138-客服消息",depth:2},{text:"13.8.1 客服消息的配置与说明",id:"1381-客服消息的配置与说明",depth:3},{text:"13.8.2 自动回复文本消息和链接",id:"1382-自动回复文本消息和链接",depth:3},{text:"1、自动回复文本消息",id:"1自动回复文本消息",depth:4},{text:"2、自动回复链接",id:"2自动回复链接",depth:4},{text:"3、根据关键词来回复用户",id:"3根据关键词来回复用户",depth:4},{text:"13.8.2 自动触发event事件",id:"1382-自动触发event事件",depth:3},{text:"13.8.3 自动回复图片",id:"1383-自动回复图片",depth:3}],title:"93.客服消息",headingTitle:"93.客服消息",frontmatter:{}}}}]);