"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["29325"],{299620:function(e,n,i){e.exports=i.p+"static/image/2afd053cc3aabba818bc53a18db3ba9d.0340e6b6.webp"},35789:function(e,n,i){e.exports=i.p+"static/image/332aafafbb39042c79d2f1deedf36593.77cf3e35.gif"},316510:function(e,n,i){e.exports=i.p+"static/image/3386dcdff415dd06cacb5f3e4f59a691.6e5c0786.gif"},404150:function(e,n,i){e.exports=i.p+"static/image/35bb21b02948791703f4414f2ebe64db.1e9a4c87.webp"},15531:function(e,n,i){e.exports=i.p+"static/image/44b6e78ad5ec079cc00752dab1ae2702.b584e2de.gif"},207671:function(e,n,i){e.exports=i.p+"static/image/7386be520e1f20179015adb34236fb15.82ce6bbc.webp"},88686:function(e,n,i){e.exports=i.p+"static/image/7860e4162a98cf423618057eb1680f2e.9b10500d.gif"},843597:function(e,n,i){e.exports=i.p+"static/image/9003b41c76ac7489834e59c07031d248.62d08e89.gif"},937309:function(e,n,i){e.exports=i.p+"static/image/93a6c08c2a907e5af38d87f3a60fc400.98b2c723.webp"},887151:function(e,n,i){e.exports=i.p+"static/image/a90cfedea85421a5997053f41150dd97.5b28c339.gif"},716616:function(e,n,i){e.exports=i.p+"static/image/d5c54398ad9bee7003cc3c30a397d7bc.68e50759.webp"},81437:function(e,n,i){i.r(n),i.d(n,{default:()=>v});var c=i(552676),s=i(740453),r=i(843597),t=i(887151),d=i(88686),a=i(716616),l=i(15531),p=i(316510),o=i(35789),j=i(299620),x=i(937309),h=i(404150),f=i(207671);let m=i.p+"static/image/2be5729582b3153fb767648495c45d4f.08c1b565.gif",g=i.p+"static/image/4d5eb86856c8ac253381ab83975f360e.9d1420b2.gif",b=i.p+"static/image/1f01f30b8f809a00ef8f25f3f5be89d0.b9a8ec54.gif",u=i.p+"static/image/58723cc5205942f4293317502cd1171a.6eab2f2d.gif",E=i.p+"static/image/ced2896d475216255a6835c95a871c83.b5011696.gif",B=i.p+"static/image/038dbcec2a6ff00d725122c9dbf5d22b.75942302.gif",w=i.p+"static/image/46c3b2bc3e992b70743f70482ac072d8.c774f6b4.gif",_=i.p+"static/image/db20b960125a11c83c9a0ac1189e1fc7.99cd98b4.gif",A=i.p+"static/image/97eceb0cb8f0f7c90f4a0dd2a7797a30.5cf011b0.gif",C=i.p+"static/image/20e5509448ddcaf0d914c31691f50e3e.3638221d.gif",F=i.p+"static/image/f1447621be8709d25c18a91b39ea4d1f.57600c7a.gif",S=i.p+"static/image/d0b8a7bb933fcced189c55e80cf5c065.686abb4b.gif";function k(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"第79章低代码编辑器项目总结",children:["第79章—低代码编辑器：项目总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第79章低代码编辑器项目总结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"\uFEFF我们从 0 到 1 实现了一个低代码编辑器，和 amis 功能类似。"}),"\n",(0,c.jsx)(n.p,{children:"先过一下整体功能："}),"\n",(0,c.jsx)(n.p,{children:"可以拖拽物料组件到画布区，可以放在任意层次："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"并且组件还可以拖拽改变位置："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:F,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"组件选中之后可以编辑属性："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"编辑样式："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:A,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"还可以绑定事件："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"事件可以绑定不同的动作，比如跳转链接、消息提示、自定义 JS、或者调用其他组件的方法："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"可以编辑、删除事件绑定的动作："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:B,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"可以切换大纲、源码视图："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"编辑完之后可以预览："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这就是低代码编辑器的全部功能。"}),"\n",(0,c.jsx)(n.p,{children:"其实大多数低代码编辑器都是这样做的。"}),"\n",(0,c.jsxs)(n.p,{children:["比如我们看下百度的 ",(0,c.jsx)(n.a,{href:"https://aisuda.github.io/amis-editor-demo/#/edit/0",target:"_blank",rel:"noopener noreferrer",children:"amis"}),"："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["阿里的 ",(0,c.jsx)(n.a,{href:"https://lowcode-engine.cn/demo/demo-general/index.html",target:"_blank",rel:"noopener noreferrer"}),"："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["华为的 ",(0,c.jsx)(n.a,{href:"https://opentiny.design/tiny-engine#/tiny-engine-editor",target:"_blank",rel:"noopener noreferrer",children:"tiny engine"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"功能大同小异。"}),"\n",(0,c.jsx)(n.p,{children:"当然，我们的低代码编辑器内置的物料组件不多，你完全可以自己扩展物料，支持各种场景的搭建。"}),"\n",(0,c.jsx)(n.p,{children:"回顾下我们开发的过程："}),"\n",(0,c.jsx)(n.p,{children:"首先，我们分析了低代码的核心就是一个 json 的数据结构。"}),"\n",(0,c.jsx)(n.p,{children:"这个 json 就是一个通过 children 属性串联的组件对象树。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"从物料区拖拽组件到画布区，就是在 json 的某一层级加了一个组件对象。"}),"\n",(0,c.jsx)(n.p,{children:"选中组件在右侧编辑属性，就是修改 json 里某个组件对象的属性。"}),"\n",(0,c.jsx)(n.p,{children:"大纲就是把这个 json 用树形展示。"}),"\n",(0,c.jsx)(n.p,{children:"然后我们写了下代码，用 allomet 实现了 split pane 布局，用 tailwind 来写样式，引入 zustand 来做全局 store。"}),"\n",(0,c.jsx)(n.p,{children:"在 store 中定义了 components 和对应的 add、update、delete 方法。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"然后实现了拖拽组件到画布，也就是拖拽编辑 json。"}),"\n",(0,c.jsx)(n.p,{children:"我们添加了 Button 和 Container 组件，并创建了 componentConfig 的全局 store，用来保存组件配置。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"然后实现了 renderComponents，它就是递归渲染 component，用到的组件配置从 componentConfig 取。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"之后引入 react-dnd 实现了拖拽编辑，左侧的物料添加 useDrag，画布里的组件添加 useDrop，然后当 drop 的时候，在对应 id 下添加一个对应的类型的组件。"}),"\n",(0,c.jsx)(n.p,{children:"还要处理下 didDrop，保证只 drop 一次。"}),"\n",(0,c.jsx)(n.p,{children:"之后我们实现了下编辑的时候的交互，实现了 hover 时的高亮框，和点击时的编辑框。"}),"\n",(0,c.jsx)(n.p,{children:"在每个组件渲染的时候加上了 data-component-id，然后在画布区根组件监听 mouseover、click 事件，通过触发事件的元素一层层往上找，找到 component-id。"}),"\n",(0,c.jsx)(n.p,{children:"然后 getBoudingClientRect 拿到这个元素的 width、height、left、top 等信息，和画布区根元素的位置做计算，算出高亮框、编辑框的位置。"}),"\n",(0,c.jsx)(n.p,{children:"接下来实现了属性和样式的编辑。"}),"\n",(0,c.jsx)(n.p,{children:"在 componentConfig 里加了 setter、stylesSetter 来保存不同组件的属性、样式表单配置。"}),"\n",(0,c.jsx)(n.p,{children:"然后在 Setting 区域渲染对应的表单。"}),"\n",(0,c.jsxs)(n.p,{children:["表单变化的时候，修改 components 里对应的 styles、props 信息，传入组件渲染。\n",(0,c.jsx)("img",{src:o,alt:""})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"然后实现了源码、大纲、预览的功能。"}),"\n",(0,c.jsx)(n.p,{children:"源码和大纲比较简单，就是 json 的不同形式的展示，分别用 @monaco-editor/react 和 Tree 组件来做。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"预览功能也是递归渲染 json 为组件树，但是组件不一样，预览和编辑状态的组件要分开写。"}),"\n",(0,c.jsx)(n.p,{children:"我们在 store 加了一个 mode 的状态，切换 mode 来切换渲染的内容。"}),"\n",(0,c.jsx)(n.p,{children:"然后实现了事件绑定："}),"\n",(0,c.jsx)(n.p,{children:"在 comonentConfig 里配置组件可以绑定的事件，然后在 Setting 区事件面板里展示。"}),"\n",(0,c.jsx)(n.p,{children:"可以选择绑定的动作，比如跳转链接，显示提示，输入一些参数之后，就会保存到 json 里。"}),"\n",(0,c.jsx)(n.p,{children:"然后渲染 Preview 的时候根据这些信息来绑定事件。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"但直接在 Setting 区域展示的动作表单，动作多了以后不好展示，于是我们实现了动作选择弹窗。"}),"\n",(0,c.jsx)(n.p,{children:"主流低代码编辑器绑定动作的交互都是这么做的。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"然后我们实现了自定义 JS 的动作："}),"\n",(0,c.jsx)(n.p,{children:"通过 monaco editor 来输入代码，然后通过 new Function 来动态执行代码，执行的代码可以访问 context，传入一些属性方法。"}),"\n",(0,c.jsx)(n.p,{children:"实现了组件联动，也就是一个组件可以调用另一个组件的方法。"}),"\n",(0,c.jsx)(n.p,{children:"原理就是组件通过 forwardRef + useImperativeHandle 暴露一些方法，然后在 action 里配置 componentId、method。"}),"\n",(0,c.jsx)(n.p,{children:"这样预览的时候收集所有组件的 ref，事件触发的时候根据配置调用对应 componentId 的对应 method。"}),"\n",(0,c.jsx)(n.p,{children:"综上，我们支持了内置动作、自定义 JS、组件联动，事件绑定的功能就比较完整了。"}),"\n",(0,c.jsx)(n.p,{children:"然后加了 Table、Form 等物料组件。"}),"\n",(0,c.jsx)(n.p,{children:"Table 组件可以配置 url，然后拖拽 TableColumn 进来，TableColumn 可以配置字段信息。"}),"\n",(0,c.jsx)(n.p,{children:"Preview 渲染的时候，根据 url 请求接口，然后根据 columns 的配置来渲染数据。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"Form 组件和 Table 组件一样，通过 FormItem 来配置字段，FormItem 本身不渲染内容。"}),"\n",(0,c.jsx)(n.p,{children:"Form 暴露了 submit 方法，并且支持绑定 onFinish 事件。"}),"\n",(0,c.jsx)(n.p,{children:"我们可以通过 Button 的点击事件触发 Form 的 submit，然后给 Form 的 onFinish 事件绑定一个发请求的动作，这样就实现了提交表单保存到服务端。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"你可以基于这个低代码编辑器扩展一些物料、动作，支持某些场景的搭建。"}),"\n",(0,c.jsx)(n.p,{children:"这个项目也有挺多技术亮点的："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"基于 react-dnd 实现了拖拽，可以拖拽物料到组件树的任意层级"}),"\n",(0,c.jsx)(n.li,{children:"通过 zustand 实现了全局 store 的存储，比如组件树、组件配置等，并用 persist 中间件做了持久化"}),"\n",(0,c.jsx)(n.li,{children:"通过 tailwind 来写样式，不需要写 css 文件"}),"\n",(0,c.jsx)(n.li,{children:"通过 getBoudingClientRect 拿到 hover、click 的组件边界，动态计算编辑框位置"}),"\n",(0,c.jsx)(n.li,{children:"通过 json 递归渲染组件，基于 React.cloneElement 来修改组件 props"}),"\n",(0,c.jsx)(n.li,{children:"通过 ref 实现了组件联动，组件通过 forwardRef + useImperativeHandle 暴露方法，然后全局注册，供别的组件调用"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"其实整体做下来，实现一个低代码编辑器并不是很难，难点大概在实现各种物料组件、支持各种属性配置吧 \uD83E\uDD14️"}),"\n",(0,c.jsx)(n.p,{children:"很多公司都有团队在做专职做低代码业务，学会这个项目，写在简历上，或许能给你增加一些机会。"})]})}function R(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(k,{...e})}):k(e)}let v=R;R.__RSPRESS_PAGE_META={},R.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC79%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93.md"]={toc:[],title:"第79章—低代码编辑器：项目总结",headingTitle:"第79章—低代码编辑器：项目总结",frontmatter:{}}}}]);