"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["52325"],{978524:function(n,s,e){e.r(s),e.d(s,{default:()=>l});var h=e(552676),a=e(740453);let c=e.p+"static/image/8e5948dbdd7d60794a8325c74185f124.582adbfd.webp",t=e.p+"static/image/a531e0335a0c893320e79246b9b72029.cd0f89ae.webp",i=e.p+"static/image/a4a0334f447f012eab221a900e177de3.60edc2a4.webp";function r(n){let s=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",img:"img",strong:"strong",ul:"ul",li:"li",pre:"pre",h3:"h3"},(0,a.ah)(),n.components);return(0,h.jsxs)(h.Fragment,{children:[(0,h.jsxs)(s.h1,{id:"6应用篇从理论到实际http-缓存方案解析",children:["6.应用篇：从理论到实际——HTTP 缓存方案解析",(0,h.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#6应用篇从理论到实际http-缓存方案解析",children:"#"})]}),"\n",(0,h.jsx)(s.p,{children:"习文至此，相信大家已经基本掌握了 HTTP 缓存中强缓存与协商缓存的知识点，也应该对于主人公缓存有了一定的见解和体会，那么接下来我们将从理念出发，从缓存技术到缓存方案，一步步解析关于 HTTP 缓存相关的前端方案。"}),"\n",(0,h.jsxs)(s.h2,{id:"前端应用中的-http-缓存方案",children:["前端应用中的 HTTP 缓存方案",(0,h.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#前端应用中的-http-缓存方案",children:"#"})]}),"\n",(0,h.jsxs)(s.p,{children:["目前最流行的前端框架比如 ",(0,h.jsx)(s.code,{children:"Vue"}),"、",(0,h.jsx)(s.code,{children:"React"})," 等都以单页应用（",(0,h.jsx)(s.code,{children:"SPA"}),"）的开发模式著称，关于单页应用的概念相信大家已经烂熟于心，所谓单页指的是应用由一个 HTML 文件组成，页面之间的跳转通过异步加载 JS 等资源文件的形式进行渲染，比如某宝 network 面板加载资源的形式："]}),"\n",(0,h.jsx)(s.p,{children:(0,h.jsx)("img",{src:i,alt:"20211016164419.jpg"})}),"\n",(0,h.jsx)(s.p,{children:"当我们访问首页时，浏览器率先加载的便是 HTML 文件，后续继续加载一些首页渲染需要以及公共的资源文件，当我们跳转页面时会异步加载下一个页面所需的资源，实现页面的组装及逻辑处理。"}),"\n",(0,h.jsxs)(s.p,{children:["上图中我们观察仔细的读者会发现，",(0,h.jsx)(s.strong,{children:"刷新页面或再次访问时大部分资源都命中了强缓存，唯独率先加载的 HTML 资源走了协商缓存，这是为什么？"})]}),"\n",(0,h.jsxs)(s.p,{children:["当你吃透了 HTTP 缓存的相关知识点后，原因其实很容易解释，因为像 JS、CSS 等资源经过像 ",(0,h.jsx)(s.code,{children:"webpack"})," 这样的打包工具打包后可以自动生成 ",(0,h.jsx)(s.code,{children:"hash"})," 文件名，每次部署到服务器上后发生变化的资源 hash 名会更新，浏览器会当作一个新的资源去向服务器请求，没有更新的资源便会优先读取浏览器缓存。"]}),"\n",(0,h.jsx)(s.p,{children:"而 HTML 不同，其文件名不会改变，我们期望浏览器每次加载时都应该向服务器询问是否更新，否则会出现新版本发布后浏览器读取缓存 HTML 文件导致页面空白报错（旧资源被删除）或应用没有更新（读取了旧资源）的问题。"}),"\n",(0,h.jsx)(s.p,{children:"根据 HTTP 缓存的规则最终我们便可以总结出如下缓存方案："}),"\n",(0,h.jsxs)(s.ul,{children:["\n",(0,h.jsx)(s.li,{children:(0,h.jsx)(s.strong,{children:"频繁变动的资源，比如 HTML， 采用协商缓存"})}),"\n",(0,h.jsx)(s.li,{children:(0,h.jsx)(s.strong,{children:"CSS、JS、图片资源等采用强缓存，使用 hash 命名"})}),"\n"]}),"\n",(0,h.jsxs)(s.p,{children:["以上缓存方案也解释了在单页应用出现之前的一种现象，比如 ",(0,h.jsx)(s.code,{children:"jQuery"})," 时代我们的资源文件一般通过在 HTML 中直接引入的方式来进行加载，同时会加上一段时间戳或者版本号代码："]}),"\n",(0,h.jsx)(s.pre,{children:(0,h.jsx)(s.code,{className:"language-html",children:'<script src="./js/demo.js?ver=1.0"><\/script>\n'})}),"\n",(0,h.jsx)(s.p,{children:"因为浏览器会缓存之前的 JS、CSS 版本，通过上述添加类似于 hash 值的方式能够让浏览器加载我们最新的版本。"}),"\n",(0,h.jsxs)(s.p,{children:["那么关于如何让 HTML 文件走协商缓存，",(0,h.jsx)(s.strong,{children:"前提得先让浏览器强缓存失效"}),"，可以设置如下服务器响应报头："]}),"\n",(0,h.jsx)(s.pre,{children:(0,h.jsx)(s.code,{children:"Cache-Control: max-age=0\nLast-Modified: Sat, 04 Sep 2021 08:59:40 GMT\n"})}),"\n",(0,h.jsxs)(s.p,{children:["在资源 0 秒就失效的情况下存在协商缓存触发条件的 ",(0,h.jsx)(s.code,{children:"Last-Modified"})," 标识，这样每次访问加载的 HTML 资源就会确保是最新的，解决了 HTML 怕被浏览器强缓存的烦恼。"]}),"\n",(0,h.jsxs)(s.h2,{id:"webpack-中的-hash-模式",children:["Webpack 中的 Hash 模式",(0,h.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-中的-hash-模式",children:"#"})]}),"\n",(0,h.jsxs)(s.p,{children:["通过上述介绍的前端应用中 HTTP 缓存方案，我们从中了解了资源 hash 命名的重要性。然而这里所谓的 “hash” 其实是一个统称，在 webpack 中 hash 可以分为三种类型：",(0,h.jsx)(s.strong,{children:"hash、chunkhash、contenthash"}),"，每一种类型 hash 的生成规则和作用也不同。正因为 hash 存在着上述的几种类型，所以它的使用也是有讲究的，下面笔者将依次给大家进行介绍。"]}),"\n",(0,h.jsxs)(s.h3,{id:"hash",children:["hash",(0,h.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#hash",children:"#"})]}),"\n",(0,h.jsxs)(s.p,{children:[(0,h.jsx)(s.code,{children:"hash"})," 属于项目级别的 hash，意思就是整个项目中只要有文件改变该 hash 值就会变化，同时所有文件也都共用该 hash 值。"]}),"\n",(0,h.jsx)(s.p,{children:"webpack 的简单配置如下："}),"\n",(0,h.jsx)(s.pre,{children:(0,h.jsx)(s.code,{className:"language-javascript",children:"module.exports = {    \n    output: {\n        path: config.build.assetsRoot,\n        filename: utils.assetsPath('js/[name].[hash:8].js'),\n        chunkFilename: utils.assetsPath('js/[name].[hash:8].min.js'),\n    },\n    plugins:[ \n        // 将 js 中引入的 css 进行分离\n        new ExtractTextPlugin({ filename: utils.assetsPath('css/[name].[hash:8].css'), allChunks: true }),\n    ]\n}\n"})}),"\n",(0,h.jsx)(s.p,{children:"最终打包输出的资源文件名 hash 值都一样，按照缓存策略进行分析，浏览器加载所有资源都将重新请求服务器，导致没有改动资源的加载浪费，因此不建议在项目中采用这种方式进行构建。"}),"\n",(0,h.jsxs)(s.h3,{id:"chunkhash",children:["chunkhash",(0,h.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#chunkhash",children:"#"})]}),"\n",(0,h.jsxs)(s.p,{children:[(0,h.jsx)(s.code,{children:"chunkhash"})," 与 hash 不同，其属于入口文件级别的 hash，会根据入口文件（entry）的依赖进行打包，同时为了避免一些公共库、插件被打包至入口文件中，我们可以借助 ",(0,h.jsx)(s.code,{children:"CommonsChunkPlugin"})," 插件进行公共模块的提取："]}),"\n",(0,h.jsx)(s.pre,{children:(0,h.jsx)(s.code,{className:"language-javascript",children:"module.exports = {\n    entry: utils.getEntries(),\n    output: {\n        path: config.build.assetsRoot,\n        filename: utils.assetsPath('js/[name].[chunkhash:8].js'),\n        chunkFilename: utils.assetsPath('js/[name].[chunkhash:8].min.js'),\n    },\n    plugins:[ \n        // 将 js 中引入的 css 进行分离\n        new ExtractTextPlugin({ filename: utils.assetsPath('css/[name].[chunkhash:8].css') }),\n        // 分离公共 js 到 vendor 中\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'vendor', //文件名\n            minChunks: function(module, count) {\n                // 声明公共的模块来自 node_modules 文件夹，把 node_modules、common 文件夹以及使用了2次依赖的都抽出来\n                return (\n                    module.resource &&\n                    (/\\.js$/.test(module.resource) || /\\.vue$/.test(module.resource)) &&\n                    (module.resource.indexOf(path.join(__dirname, '../node_modules')) === 0 || module.resource.indexOf(path.join(__dirname, '../src/common')) === 0 || count >= 2)\n                );\n            }\n        }),\n        // 将运行时代码提取到单独的 manifest 文件中，防止其影响 vendor.js\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'runtime',\n            chunks: ['vendor']\n        })\n    ]\n}\n"})}),"\n",(0,h.jsxs)(s.p,{children:["上述配置我们将需要抽离的公共模块提取到了 vendor.js 中，同时也将 webpack 运行文件提取到了 runtime.js 中，",(0,h.jsx)(s.strong,{children:"这些公共模块一般除了升级版本外永远不会改动，我们希望浏览器能够将其存入强缓存中，不受其他业务模块的修改导致文件 chunkhash 名称变动的影响。"})]}),"\n",(0,h.jsx)(s.p,{children:"最终我们打包出的模块拥有不同的 chunkhash 名称，重新打包只会影响有变动的模块重新生成 chunkhash，这里大家先重点关注下 home.js 文件。"}),"\n",(0,h.jsx)(s.p,{children:(0,h.jsx)("img",{src:t,alt:"图片1.png"})}),"\n",(0,h.jsxs)(s.h3,{id:"contenthash",children:["contenthash",(0,h.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#contenthash",children:"#"})]}),"\n",(0,h.jsxs)(s.p,{children:[(0,h.jsx)(s.code,{children:"contenthash"})," 是属于文件内容级别的 hash，其会根据文件内容的变化而变化，一般用于解决以下问题："]}),"\n",(0,h.jsx)(s.p,{children:"比如上方的 home.js 中单独引入了 home.css 文件，那么当 js 文件被修改后，就算 css 文件并没有被修改，由于该模块发生了改变，同样会导致 css 文件也被重复构建。此时，针对 css 使用 contenthash 后，只要其内容不变就不会被重复构建。"}),"\n",(0,h.jsx)(s.pre,{children:(0,h.jsx)(s.code,{className:"language-javascript",children:"module.exports = {    \n    output: {\n        path: config.build.assetsRoot,\n        filename: utils.assetsPath('js/[name].[chunkhash:8].js'),\n        chunkFilename: utils.assetsPath('js/[name].[chunkhash:8].min.js'),\n    },\n    plugins:[ \n        // 将 js 中引入的 css 进行分离，使用 contenthash 判断内容的改变\n        new ExtractTextPlugin({ filename: utils.assetsPath('css/[name].[contenthash:8].css'), allChunks: true }),\n    ]\n}\n"})}),"\n",(0,h.jsx)(s.p,{children:"最终构建出的 css 文件拥有了其自己的 contenthash 值："}),"\n",(0,h.jsx)(s.p,{children:(0,h.jsx)("img",{src:c,alt:"图片2.png"})}),"\n",(0,h.jsx)(s.p,{children:(0,h.jsx)(s.strong,{children:"tips：当在 module 中使用 loader 设置图片或者字体的文件名时，如包含 hash 或 chunkhash 都是不生效的，默认会使用 contenthash。"})}),"\n",(0,h.jsx)(s.pre,{children:(0,h.jsx)(s.code,{className:"language-javascript",children:"module.exports = {\n    module: {\n        rules: [{\n            test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n            loader: 'url-loader',\n            options: {\n                limit: 5,\n                name: utils.assetsPath('img/[name].[hash:8].[ext]') // 设置的 hash 值不会生效\n            }\n        },\n        {\n            test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n            loader: 'url-loader',\n            options: {\n                limit: 2,\n                name: utils.assetsPath('fonts/[name].[hash:8].[ext]') // 设置的 hash 值不会生效\n            }\n        }]\n    }\n}\n"})}),"\n",(0,h.jsxs)(s.p,{children:["经过一番推敲，回归 HTTP 缓存，上述的 3 种 hash 模式如何使用想必大家心里已经有了答案：",(0,h.jsx)(s.strong,{children:"将 chunkhash 和 contenthash 组合使用才能最大化的利用 HTTP 缓存中强缓存的优势，减少不必要的资源重复请求，提升网页的整体打开速度。"})]}),"\n",(0,h.jsxs)(s.h2,{id:"结语",children:["结语",(0,h.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#结语",children:"#"})]}),"\n",(0,h.jsx)(s.p,{children:"本文在强缓存与协商缓存技术的基础上，从 HTTP 缓存的特性出发，介绍了在前端开发过程中如何有效的利用技术进行网页打开速度及性能的优化，将理论回归技术，将技术整合成方案，将方案一步步解析，最终形成了通俗易懂的知识点。"}),"\n",(0,h.jsx)(s.p,{children:"至此，HTTP 缓存的方案篇也已经完结，期望大家这时候停下脚步，多回头看看，回顾一下前面几节内容，相信会有不一样的收获。"})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,a.ah)(),n.components);return s?(0,h.jsx)(s,{...n,children:(0,h.jsx)(r,{...n})}):r(n)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90%2F6.%E5%BA%94%E7%94%A8%E7%AF%87%EF%BC%9A%E4%BB%8E%E7%90%86%E8%AE%BA%E5%88%B0%E5%AE%9E%E9%99%85%E2%80%94%E2%80%94HTTP%20%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90.md"]={toc:[{text:"前端应用中的 HTTP 缓存方案",id:"前端应用中的-http-缓存方案",depth:2},{text:"Webpack 中的 Hash 模式",id:"webpack-中的-hash-模式",depth:2},{text:"hash",id:"hash",depth:3},{text:"chunkhash",id:"chunkhash",depth:3},{text:"contenthash",id:"contenthash",depth:3},{text:"结语",id:"结语",depth:2}],title:"6.应用篇：从理论到实际——HTTP 缓存方案解析",headingTitle:"6.应用篇：从理论到实际——HTTP 缓存方案解析",frontmatter:{}}}}]);