"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["33726"],{656054:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var s=r(552676),d=r(740453);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",h2:"h2",ol:"ol",h3:"h3",h4:"h4",em:"em",pre:"pre",code:"code",blockquote:"blockquote"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"28-函数式编程沉思录下从数学理论到编码实践",children:["28 函数式编程沉思录（下）：从数学理论到编码实践",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#28-函数式编程沉思录下从数学理论到编码实践",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"函数式编程是一门有着复杂数学背景的学问，它背靠的数学理论非常多，但在笔者看来，最关键的理论无外乎以下三个："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Lambda 演算"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"组合子"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"范畴论"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"接下来我们就展开聊聊这些理论的内涵，一起看看它们是如何被映射为实用的编码套路的。"}),"\n",(0,s.jsxs)(n.h2,{id:"lambda演算",children:["Lambda演算",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#lambda演算",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Lambda 演算是一种简洁的数学模型"}),"，它涉及的概念包括变量绑定、α-转换、β-归约等等等等 ",(0,s.jsx)(n.strong,{children:"......"})," 这些理论别说大家没听说过，我自己看了也头大 ",(0,s.jsx)(n.strong,{children:"。"})," 所幸，Lambda 演算的核心概念经过扩展和演变，已经形成了我们今天在函数式编程中喜闻乐见的编码特性，其中最为核心两个特性分别是："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"函数是一等公民"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"匿名函数"})}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"函数是一等公民缘起何处",children:["“函数是一等公民”缘起何处？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数是一等公民缘起何处",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"lambda-演算溯源",children:["Lambda 演算溯源",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#lambda-演算溯源",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在前面的学习中，我们不止一次地解读和重申过“函数是一等公民”之于函数式编程的重要性。那么，这么重要的特性到底是谁“发明”出来的呢？"}),"\n",(0,s.jsxs)(n.p,{children:["其实，在追溯“函数是一等公民”的概念时，我们很难找到一个特定的作者或时间点。不过，我们倒是可以将其与 Lisp 语言的出现联系起来——",(0,s.jsx)(n.strong,{children:"Lisp 是第一种将函数视为一等公民的编程语言"}),"，而 Lisp 语言及其后继者们（如 Scheme 和 Clojure）都深受 Lambda 演算的影响，强调函数在计算过程中的重要性。"]}),"\n",(0,s.jsxs)(n.p,{children:["因此我们可以认为， ",(0,s.jsx)(n.strong,{children:"“函数是一等公民”是 Lambda 演算对函数式编程最重要的影响之一"}),"。"]}),"\n",(0,s.jsxs)(n.h4,{id:"lambda-演算中的函数是一等公民",children:["Lambda 演算中的“函数是一等公民”",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#lambda-演算中的函数是一等公民",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Lambda 演算的核心思想是：",(0,s.jsx)(n.strong,{children:"所有的计算都是通过函数来表示的，没有其他基本构建块（如变量或对象）"})," ——就这个核心思想，已经充分体现了“函数是一等公民”的要义。"]}),"\n",(0,s.jsxs)(n.p,{children:["回到数学层面的应用上来看，Lambda 演算使用一种特殊的表示法（即 ",(0,s.jsx)(n.strong,{children:"Lambda 表达式"}),"）来定义和应用函数。Lambda 表达式使用希腊字母 ",(0,s.jsx)(n.strong,{children:"λ（Lambda）"})," 作为一个前缀，表示我们正在",(0,s.jsx)(n.strong,{children:"定义一个抽象函数"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"我们可以使用 λx 表示一个关于变量 x 的抽象函数，并且可以在 λ 后面跟上一个表达式来表示函数体。举个例子，λx.(x + 1) \xa0就表示一个将输入的数值加1的抽象函数。"}),"\n",(0,s.jsx)(n.p,{children:"当将一个参数应用于一个 Lambda 函数时，我们只需将参数放在函数后面，用空格隔开。举个例子，(λx.(x + 1)) 2 表示给我们之前定义的抽象函数传入一个值为2的参数，其对应的计算结果为3。"}),"\n",(0,s.jsxs)(n.p,{children:["在 Lambda 计算中，我们只能够像上面这样，",(0,s.jsx)(n.strong,{children:"定义和应用函数"}),"，",(0,s.jsx)(n.strong,{children:"使用函数来表达所有的计算"}),"，",(0,s.jsx)(n.strong,{children:"而不能够定义和应用函数之外的任何构建块"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"Lambda 运算中的函数可以作为参数传递给其他函数，也可以作为其他函数的返回值。"}),"\n",(0,s.jsxs)(n.p,{children:["因此，",(0,s.jsx)(n.strong,{children:"Lambda 演算中不存在其他数据类型或结构（如变量、对象等），所有计算都是通过函数及其组合来表示的。这，就是“函数是一等公民”在数学世界的内涵。"})]}),"\n",(0,s.jsxs)(n.h4,{id:"函数是一等公民背景下的数学应用",children:["“函数是一等公民”背景下的数学应用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数是一等公民背景下的数学应用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"基于“函数是一等公民”这一内涵，Lambda 运算能够支持非常多样化的函数应用方式。高阶函数和函数组合是其中最经典的 case："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"高阶函数"}),"：它的数学背景可以映射到“Lambda 演算中的函数可以接受其他函数作为参数”这一点。例如，我们可以定义一个函数 λf.λx.(f (f x))，它接受一个函数 f 作为参数，并将函数 f 应用两次于参数 x。现在我们可以将之前定义的 λx.(x + 1) 函数作为参数传递给这个高阶函数：(λf.λx.(f (f x))) (λx.(x + 1))。这将产生一个新的函数，将输入值加 2。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"函数组合"}),"：在 Lambda 演算中，我们可以通过函数组合来构建更复杂的计算。例如，我们可以将两个函数 f 和 g 组合成一个新函数 λx.(f (g x))：给定函数 f = λx.(x + 1) 和 g = λx.(x * 2) ",(0,s.jsx)(n.em,{children:"，"})," 我们可以创建一个新函数 λx.((x * 2) + 1)，它会先将输入值乘以 2，然后加 1。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["通过这两个示例，我们可以看出，在 Lambda 演算中，函数确实是所有计算和操作的核心 ",(0,s.jsx)(n.strong,{children:"。作为一等公民，函数可以像其他值一样被传递、组合和操作，实现高度抽象和灵活的计算模型。"})]}),"\n",(0,s.jsxs)(n.p,{children:["总结一下：",(0,s.jsx)(n.strong,{children:"函数式编程背靠 Lambda 演算，沿用了“函数是一等公民”这一核心原则，这一原则恰恰就是我们将高阶函数、函数组合等数学技巧转化为编码实践的理论背景。"})]}),"\n",(0,s.jsxs)(n.h3,{id:"匿名函数",children:["匿名函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#匿名函数",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"相比于“函数是一等公民”的抽象理念，“匿名函数”是一个更具体、更好理解的东西。"}),"\n",(0,s.jsxs)(n.p,{children:["顾名思义，“匿名函数”当然就是没有名字的函数。在 Lambda 演算中，",(0,s.jsx)(n.strong,{children:"匿名函数指的其实就是 Lambda 表达式"}),"。在我们楼上的示例中，函数组合中的 f = λx.(x + 1) \xa0和 g = λx.(x * 2) 都是具名函数。但如果我们把 f、g 这两个名字拿掉，那么 λx.(x + 1) \xa0和 λx.(x * 2) \xa0这两个函数就都是匿名函数了。"]}),"\n",(0,s.jsx)(n.p,{children:"在编程语言（如 JavaScript）中，匿名函数的内涵仍然是“没有名字”这么简单。例如，我们可以像这样创建一个没有名称的匿名函数："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function(x) { return x + 1 }\n"})}),"\n",(0,s.jsx)(n.p,{children:"或者使用 ES6 的箭头函数语法创建一个匿名函数："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"(x) => x + 1\n"})}),"\n",(0,s.jsx)(n.p,{children:"匿名函数看似是一个非常小的知识点，但它在函数式编程中的应用其实是非常广泛的。"}),"\n",(0,s.jsx)(n.p,{children:"匿名函数可以使代码看起来更简洁，尤其是在某些场景下（例如传递一个小型函数作为参数、或者创建一个立即执行函数来限制作用域等），匿名函数的应用尤为普遍。"}),"\n",(0,s.jsx)(n.p,{children:"当然啦，这并不是说具名函数不能实现这样的功能，只是说在这些情况下，使用匿名函数可以让代码更简洁。"}),"\n",(0,s.jsxs)(n.h2,{id:"组合子",children:["组合子",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组合子",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["组合子在数学中是一种特殊类型的函数，它只依赖于它的输入参数，而不依赖于外部环境或内部状态。",(0,s.jsx)(n.strong,{children:"组合子的主要作用是将其他函数或参数组合在一起，产生新的函数或结果。"})]}),"\n",(0,s.jsxs)(n.h4,{id:"数学中的组合子",children:["数学中的组合子",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数学中的组合子",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:'两个典型的组合子例子是 "S" 和 "K" 组合子。这里给出它们的定义：'}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["K 组合子：",(0,s.jsx)(n.code,{children:"Kxy = x"})]}),"\n",(0,s.jsxs)(n.li,{children:["S 组合子：",(0,s.jsx)(n.code,{children:"Sxyz = xz(yz)"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"首先，我们来看 K 组合子。它是一个接受两个参数的函数，总是返回第一个参数。如下面的表达式所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"K(3, 5) = 3"})}),"\n",(0,s.jsx)(n.p,{children:"S 组合子稍微复杂一些。它接受三个参数 x、y 和 z，并将 z 应用于 x 和 y，然后将 x 和 y 的结果相互应用。如下面的表达式所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"S(f, g, x) = f(x)(g(x))"})}),"\n",(0,s.jsx)(n.p,{children:"在这个表达式里，f 和 g 是函数，x 是任意输入。S 组合子将 x 传递给 f 和 g，然后将 g 的结果传递给 f。"}),"\n",(0,s.jsxs)(n.p,{children:["从 K 组合子的设定，我们可以注意到，数学中的组合子并不仅仅是用来组合函数的，它也可以用来组合参数。然而，",(0,s.jsx)(n.strong,{children:"在函数式编程的实际应用中，组合子的主要用途确实就是组合函数"}),"。"]}),"\n",(0,s.jsxs)(n.h4,{id:"compose组合子",children:[(0,s.jsx)(n.code,{children:"compose"}),"组合子",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#compose组合子",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 JavaScript 中，我们完全可以将数学中的组合子编码化，然后用这些组合子来实现对函数的加工和组合。下面是对 S、B、C 几个数学组合子编码化的例子："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 组合子 S，接受三个参数f、g和x，返回f(x)(g(x))\nconst S = (f, g, x) => f(x)(g(x))  \n\n// 组合子 B，接受三个参数f、g和x，返回f(g(x))\nconst B = (f, g, x) => f(g(x))\n\n// 组合子 C，接受一个参数f，返回一个函数，该函数接受两个参数x和y，返回f(y)(x)\nconst C = f => x => y => f(y)(x)\n"})}),"\n",(0,s.jsx)(n.p,{children:"在这个例子中，我们定义了组合子函数 S、B 和 C，它们分别对应于 Lambda 演算中的 S、B 和 C 组合子。这些组合子能够实现几种不同方式的函数复合。其中 B 组合子最为经典，有心的同学可以看出来，它其实就是我们在 21 节曾经实现过的“compose 的最小单元函数”。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["通过嵌套地调用 B 组合子，我们可以实现任意多个函数的组合，这恰恰就是函数式编程中",(0,s.jsx)(n.code,{children:"compose"})," 函数的内涵"]}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["也就是说，我们完全可以把 ",(0,s.jsx)(n.code,{children:"compose"}),"函数可以看作是基于 B 组合子派生出来的一个组合子——没错，",(0,s.jsx)(n.code,{children:"compose"}),(0,s.jsx)(n.strong,{children:"就是一个组合子"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["除了 ",(0,s.jsx)(n.code,{children:"compose"})," 组合子之外，在 JavaScript 函数式编程中，还有一些其他常见的组合子可以使用。下面我将分别介绍这些组合子的使用方法和代码实现。"]}),"\n",(0,s.jsxs)(n.h4,{id:"pipe-组合子",children:[(0,s.jsx)(n.code,{children:"pipe"})," 组合子",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pipe-组合子",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["与 ",(0,s.jsx)(n.code,{children:"compose"})," 组合子类似，",(0,s.jsx)(n.code,{children:"pipe"})," 组合子也可以将多个函数组合成一个新函数。不同的是，",(0,s.jsx)(n.code,{children:"pipe"})," 组合子的函数组合顺序是从左到右，而 ",(0,s.jsx)(n.code,{children:"compose"})," 组合子的函数组合顺序是从右到左。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const pipe = (...fns) => x => fns.reduce((acc, fn) => fn(acc), x)\n\nconst addOne = x => x + 1\nconst double = x => x * 2\nconst addOneThenDouble = pipe(addOne, double)\n\n// 输出: 8\nconsole.log(addOneThenDouble(3))\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在这个例子中，我们定义了一个 ",(0,s.jsx)(n.code,{children:"pipe"})," 组合子，它接受多个函数作为参数，并返回一个新的函数。这个新函数的行为是将输入值依次传递给这些函数，然后将最终的结果返回。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们还定义了两个简单的函数 ",(0,s.jsx)(n.code,{children:"addOne"})," 和 ",(0,s.jsx)(n.code,{children:"double"}),"，然后使用 ",(0,s.jsx)(n.code,{children:"pipe"})," 创建了一个新的函数 ",(0,s.jsx)(n.code,{children:"addOneThenDouble"}),"，它将输入值加 1，然后将结果乘以 2。与 ",(0,s.jsx)(n.code,{children:"compose"})," 相反，",(0,s.jsx)(n.code,{children:"pipe"})," 的函数组合顺序是从左到右。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注：pipe 和 compose 的推导过程，在",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7175422922192846907",target:"_blank",rel:"noopener noreferrer",children:"第14节"}),"有详尽的分析，此处仅作复习，不多赘述。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"curry-组合子",children:[(0,s.jsx)(n.code,{children:"curry"})," 组合子",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#curry-组合子",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"curry"})," 组合子可以将一个多参数函数转化为一系列嵌套的单参数函数。下面是一个 ",(0,s.jsx)(n.code,{children:"curry"})," 组合子的例子："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// curry 函数借助 Function.length 读取函数元数\nfunction curry(func, arity=func.length) {\n  // 定义一个递归式 generateCurried\n  function generateCurried(prevArgs) {\n    // generateCurried 函数必定返回一层嵌套\n    return function curried(nextArg) {\n      // 统计目前“已记忆”+“未记忆”的参数\n      const args = [...prevArgs, nextArg]  \n      // 若 “已记忆”+“未记忆”的参数数量 >= 回调函数元数，则认为已经记忆了所有的参数\n      if(args.length >= arity) {\n        // 触碰递归边界，传入所有参数，调用回调函数\n        return func(...args)\n      } else {\n        // 未触碰递归边界，则递归调用 generateCurried 自身，创造新一层的嵌套\n        return generateCurried(args)\n      }\n    }\n  }\n  // 调用 generateCurried，起始传参为空数组，表示“目前还没有记住任何参数”\n  return generateCurried([])\n}\n\nconst add = (a, b) => a + b\nconst curriedAdd = curry(add)\n\n// 3\nconsole.log(curriedAdd(1)(2))\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在这个例子中，我们定义了一个 ",(0,s.jsx)(n.code,{children:"curry"})," 组合子，它接受一个多参数函数作为参数，并返回一个新的函数。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们还定义了一个简单的函数 ",(0,s.jsx)(n.code,{children:"add"}),"，然后使用 ",(0,s.jsx)(n.code,{children:"curry"})," 创建了一个新的函数 ",(0,s.jsx)(n.code,{children:"curriedAdd"}),"。通过使用 ",(0,s.jsx)(n.code,{children:"curriedAdd"}),"，我们可以将 ",(0,s.jsx)(n.code,{children:"add"})," 函数转化为一系列单参数函数的组合形式，从而使其更容易被组合和复用。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注：curry 的推导过程，在",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7175422948306583611",target:"_blank",rel:"noopener noreferrer",children:"第16节"}),"有详尽的分析，此处仅作复习，不多赘述。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"flip-组合子",children:[(0,s.jsx)(n.code,{children:"flip"})," 组合子 \xa0",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#flip-组合子",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"flip"})," 组合子可以将一个多参数函数的参数顺序翻转。下面代码是一个 ",(0,s.jsx)(n.code,{children:"flip"})," 组合子的例子："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const flip = fn => (a, b, ...args) => fn(b, a, ...args)\n\nconst subtract = (a, b) => a - b\nconst flippedSubtract = flip(subtract)\n\n// 输出：2\nconsole.log(flippedSubtract(3, 5))\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在这个例子中，我们定义了一个 ",(0,s.jsx)(n.code,{children:"flip"})," 组合子，它接受一个多参数函数作为参数，并返回一个新的函数。这个新函数的行为是：将原函数的前两个参数顺序翻转，然后将剩余的参数传递给原函数。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们还定义了一个简单的函数 ",(0,s.jsx)(n.code,{children:"subtract"}),"，然后使用 ",(0,s.jsx)(n.code,{children:"flip"})," 创建了一个新的函数 ",(0,s.jsx)(n.code,{children:"flippedSubtract"}),"。通过使用 ",(0,s.jsx)(n.code,{children:"flippedSubtract"}),"，我们可以将 ",(0,s.jsx)(n.code,{children:"subtract"})," 函数的参数顺序翻转，从而使其更容易被组合和复用。"]}),"\n",(0,s.jsxs)(n.h3,{id:"补充组合子与纯函数的辨析",children:["补充：组合子与纯函数的辨析",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#补充组合子与纯函数的辨析",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"最后，让我们来回顾一下组合子的定义：组合子在数学中是一种特殊类型的函数，它只依赖于它的输入参数，而不依赖于外部环境或内部状态。"}),"\n",(0,s.jsx)(n.p,{children:"单看这个定义的话，你可能很容易联想到函数式编程中的另一个重要概念——纯函数。"}),"\n",(0,s.jsxs)(n.p,{children:["确实，组合子和纯函数在定义上都强调了函数的纯度。但在实际的编程实践中，组合子主要关注",(0,s.jsx)(n.strong,{children:"函数操作和组合"}),"，而纯函数关注无副作用和相同输入产生相同输出；",(0,s.jsx)(n.strong,{children:"组合子通常具有纯函数的特性，但并非所有纯函数都是组合子"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"程序世界的范畴理论",children:["程序世界的范畴理论",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#程序世界的范畴理论",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在本书的 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7175422979646423098",target:"_blank",rel:"noopener noreferrer",children:"17"}),"-",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7175421412075634725",target:"_blank",rel:"noopener noreferrer",children:"21 节"}),"，我们系统地学习了范畴论中的核心实践方法。作为函数式编程中的关键数学依据，我们在本节仍然有必要对范畴论作整体的回顾和总结。"]}),"\n",(0,s.jsxs)(n.h3,{id:"当我们谈论范畴论时我们在谈论什么",children:["当我们谈论范畴论时，我们在谈论什么",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#当我们谈论范畴论时我们在谈论什么",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["对于本书来说， ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7175422979646423098",target:"_blank",rel:"noopener noreferrer",children:"17"}),"-",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7175421412075634725",target:"_blank",rel:"noopener noreferrer",children:"21 节"}),"是相对独立的一块内容。一些同学反馈说从 17 节开始就“顶不住了”，这其实也是非常正常的现象。并不是因为你不行，而是因为范畴理论本身的学习曲线就非常陡峭，它涉及更高层次的抽象和复杂的数学概念。"]}),"\n",(0,s.jsxs)(n.p,{children:["但正如我在小册开篇（第1节）和第17节中反复强调的，对于复杂的数学理论，我们不必执着于理论本身，而是应该",(0,s.jsx)(n.strong,{children:"从代码去推导数学"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["具体来说，Functor 听上去是一个唬人的新名词，但数组 ",(0,s.jsx)(n.code,{children:"Array"})," 至少算是你的老朋友了；Monad 看上去面目有些狰狞，但 ",(0,s.jsx)(n.code,{children:"RxJS"})," 可是我们做状态管理的好帮手；Semigroup 和 Monoid 太抽象，那么 ",(0,s.jsx)(n.code,{children:"compose"})," 总不算抽象吧。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"细看之下，这些晦涩的名词包裹的其实仍然是一些非常实用的编程方法和实践模式。很多时候，劝退大家的并不是理论本身，而是一种“这个东西好陌生“带来的疏离感。"})}),"\n",(0,s.jsx)(n.p,{children:"当我们在函数式编程的语境中谈论范畴论时，数学理论本身是最不重要的一个部分。我希望所有在 17-21 节被理论知识劝退过的朋友，都能重新打开这几节，好好琢磨一下其中的代码示例。很多时候，只要你理解了代码的内涵，理论的问题就会迎刃而解了。"}),"\n",(0,s.jsxs)(n.h3,{id:"从范畴论到-js-函数式编程实践",children:["从范畴论到 JS 函数式编程实践",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#从范畴论到-js-函数式编程实践",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 JavaScript 函数式编程中，范畴论的实践主要体现在对 Functor、Monad、Semigroup 和 Monoid 这四种结构的应用。下面我将结合具体的代码，和大家一起对这四种结构的特征进行回顾。"}),"\n",(0,s.jsxs)(n.h4,{id:"functor函子",children:["Functor（函子）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#functor函子",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Functor 是一个实现了 ",(0,s.jsx)(n.code,{children:"map"})," 方法的容器。",(0,s.jsx)(n.code,{children:"map"})," 方法接收一个函数 ",(0,s.jsx)(n.code,{children:"f"}),"，并将 ",(0,s.jsx)(n.code,{children:"f"})," 应用于容器中的值。Functor 可以帮助我们将普通函数应用于特定的容器，如数组、对象等。在 JS 函数式编程中，数组是最常见的 Functor："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const double = x => x * 2\n // 结果是 [2, 4, 6]\nconst result = [1, 2, 3].map(double)\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"monad单子",children:["Monad（单子）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#monad单子",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Monad 是一个特殊的 Functor，它提供了一种将值装入容器的方法（通常称为 ",(0,s.jsx)(n.code,{children:"of"})," 或 ",(0,s.jsx)(n.code,{children:"unit"}),"），以及一种将嵌套的容器扁平化的方法（通常称为 ",(0,s.jsx)(n.code,{children:"flatMap"})," 、",(0,s.jsx)(n.code,{children:"bind"}),"、",(0,s.jsx)(n.code,{children:"join"})," 或 ",(0,s.jsx)(n.code,{children:"chain"})," 等）。"]}),"\n",(0,s.jsxs)(n.p,{children:["常见的 Monad 示例除了嵌套盒子计算、",(0,s.jsx)(n.code,{children:"RxJS"})," 中 ",(0,s.jsx)(n.code,{children:"Observable"})," 盒子之外，还有 ",(0,s.jsx)(n.code,{children:"Task"}),"—— ",(0,s.jsx)(n.code,{children:"Task"})," \xa0也是非常经典的对副作用的封装，下面是一个使用 ",(0,s.jsx)(n.code,{children:"Task"})," Monad 处理异步操作的示例，注释中包含了对 ",(0,s.jsx)(n.code,{children:"Task"})," Monad 实现思路的解读："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Task Monad 构造函数\nconst Task = run => ({\n  run,\n  // map 方法：接收一个函数 f，并将其应用于 Task Monad 包装的值，返回一个新的 Task Monad\n  map: f => Task((resolve, reject) => run(value => resolve(f(value)), reject)),\n  // flatMap 方法：接收一个函数 f，并将其应用于 Task Monad 包装的值，\n  // f 返回一个新的 Task Monad 实例\n  flatMap: f => Task((resolve, reject) => run(value => f(value).run(resolve, reject), reject)),\n  // fork 方法：开始执行 Task Monad，并根据结果执行成功或失败的回调函数\n  fork: (resolve, reject) => run(resolve, reject)\n})\n\n// 创建一个包含值的 Task 实例\nTask.of = value => Task((resolve) => resolve(value))\n\n// 封装一个返回 Task Monad 实例的异步请求函数\nconst fetchUrl = url => Task((resolve, reject) => {\n  fetch(url)\n    .then(response => response.json())\n    .then(data => resolve(data))\n    .catch(error => reject(error))\n})\n\n// 模拟获取用户基本信息的函数，异步\nconst getUser = id => Task((resolve, reject) => {\n  setTimeout(() => {\n    resolve({id: id, name: 'Xiu Yan'})\n  }, 1000)\n})\n\n// 模拟获取用户职业的函数，异步\nconst getJob = user => Task((resolve, reject) => {\n  setTimeout(() => {\n    if (user.id === 1) {\n      resolve('programmer')\n    } else {\n      reject('Job not found')\n    }\n  }, 1000)\n})\n\nconst userId = 1\n\n// 使用 flatMap 实现链式异步操作\ngetUser(userId)\n  .flatMap(user => getJob(user))\n  .fork(\n    // 成功回调：输出获取到的工作信息\n    job => console.log('Job:', job),\n    // 失败回调：输出错误信息\n    error => console.error('Error:', error)\n  )\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"semigroup半群",children:["Semigroup（半群）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#semigroup半群",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Semigroup 是一种具有关联性二元运算的集合，它的代表方法是 ",(0,s.jsx)(n.code,{children:"concat()"}),"。在 JS 函数式编程中，常见的 Semigroup 包括字符串、数组等。这些数据类型都有一个具有关联性的二元运算（例如，字符串的拼接和数组的合并）。下面是一个字符串 Semigroup 的实现实例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 定义一个字符串 Semigroup\nconst StringSemigroup = s1 => ({\n  value: s1,\n  concat: s2 => StringSemigroup(s1 + s2.value)\n})\n\n// 创建两个字符串 Semigroup\nconst str1 = StringSemigroup('Hello, ')\nconst str2 = StringSemigroup('world!')  \n\n// 拼接字符串\nconst str3 = str1.concat(str2);\n\n// 输出：\"Hello, world!\"\nconsole.log(str3.value)\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"monoid幺半群",children:["Monoid（幺半群）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#monoid幺半群",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Monoid 是一个特殊的 Semigroup，它的代表方法除了 ",(0,s.jsx)(n.code,{children:"concat()"})," ，还有",(0,s.jsx)(n.code,{children:"empty()"}),"（单位元）。单位元与任何其他元素结合进行运算时，结果都保持不变。以下是一个简单的 Monoid 示例，它展示了数组的求和过程，这个示例足以体现特定场景下单位元的重要性："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 将一个值映射为一个 Sum Monoid\nconst Sum = (value) => ({\n  value,\n  concat: (other) => Sum(value + other.value)\n})\n\n// 单位元：数字 0\nSum.empty = () => Sum(0)\n\n// foldMap 实现\nconst foldMap = (f, list) => \n                  list.map(f).reduce((acc, x) => acc.concat(x), f.empty())\n\n// 使用 foldMap 计算数组元素之和\nconst array = [1, 2, 3, 4, 5]\nconst sumArray = (arr) => foldMap(Sum, arr).value\n\n// 输出: 15\nconsole.log(sumArray(array)) \n// 输出: 0\nconsole.log(sumArray([]))\n"})}),"\n",(0,s.jsx)(n.p,{children:"在函数式编程实践中，这四种结构都非常重要。它们帮助开发者以更加抽象和通用的方式处理各种操作和数据结构，从而简化代码、提高代码的可读性和可维护性。同时，它们在一定程度上也促进了代码的模块化和复用。"}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本节，我们回溯分析了函数式编程中的三种主要数学理论。这个过程既加深了我们对这些数学理论的理解，也让我们从全新的视角重新串联了各种已学知识。"}),"\n",(0,s.jsx)(n.p,{children:"事实上，无论是编程语言的特性还是数学理论，它们最终的效用都是为了更好地支持软件开发和前端工程实践。"}),"\n",(0,s.jsx)(n.p,{children:"在前端工程实践中，函数式编程已经变得越来越受欢迎。许多现代前端框架/库都倾向于采用函数式编程的原则。这些框架/库包括但不限于我们已经讨论过的 React、Redux、RxJS 等等。下一节，我们就将放眼整个前端生态，对生产级别的函数式编程实践做一个整体的分析和总结。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}let a=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["JavaScript%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F28%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%B2%89%E6%80%9D%E5%BD%95%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E4%BB%8E%E6%95%B0%E5%AD%A6%E7%90%86%E8%AE%BA%E5%88%B0%E7%BC%96%E7%A0%81%E5%AE%9E%E8%B7%B5.md"]={toc:[{text:"Lambda演算",id:"lambda演算",depth:2},{text:"“函数是一等公民”缘起何处？",id:"函数是一等公民缘起何处",depth:3},{text:"Lambda 演算溯源",id:"lambda-演算溯源",depth:4},{text:"Lambda 演算中的“函数是一等公民”",id:"lambda-演算中的函数是一等公民",depth:4},{text:"“函数是一等公民”背景下的数学应用",id:"函数是一等公民背景下的数学应用",depth:4},{text:"匿名函数",id:"匿名函数",depth:3},{text:"组合子",id:"组合子",depth:2},{text:"数学中的组合子",id:"数学中的组合子",depth:4},{text:"`compose`组合子",id:"compose组合子",depth:4},{text:"`pipe` 组合子",id:"pipe-组合子",depth:4},{text:"`curry` 组合子",id:"curry-组合子",depth:4},{text:"`flip` 组合子",id:"flip-组合子",depth:4},{text:"补充：组合子与纯函数的辨析",id:"补充组合子与纯函数的辨析",depth:3},{text:"程序世界的范畴理论",id:"程序世界的范畴理论",depth:2},{text:"当我们谈论范畴论时，我们在谈论什么",id:"当我们谈论范畴论时我们在谈论什么",depth:3},{text:"从范畴论到 JS 函数式编程实践",id:"从范畴论到-js-函数式编程实践",depth:3},{text:"Functor（函子）",id:"functor函子",depth:4},{text:"Monad（单子）",id:"monad单子",depth:4},{text:"Semigroup（半群）",id:"semigroup半群",depth:4},{text:"Monoid（幺半群）",id:"monoid幺半群",depth:4},{text:"小结",id:"小结",depth:2}],title:"28 函数式编程沉思录（下）：从数学理论到编码实践",headingTitle:"28 函数式编程沉思录（下）：从数学理论到编码实践",frontmatter:{}}}}]);