"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["6145"],{352810:function(e,n,t){t.r(n),t.d(n,{default:()=>h});var r=t(552676),l=t(740453);let a=t.p+"static/image/1c25722b7616d2f9d5b8e9879f924b0f.a3b89d54.webp",s=t.p+"static/image/eaadf5024707e9107712ada349f7c488.53c7c7cf.webp",c=t.p+"static/image/365efff7778a13593424c1a77c0ea83e.ceaffa9b.webp",i=t.p+"static/image/08b5025794131f85aa98e2d6ac38a243.10078b3b.webp";function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",h4:"h4",ul:"ul",li:"li",pre:"pre",img:"img",strong:"strong",blockquote:"blockquote"},(0,l.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"36vue3-实战之分类管理多级共用-table",children:["36.Vue3 实战之分类管理（多级共用 Table）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#36vue3-实战之分类管理多级共用-table",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["认真学完上一节的同学，基本上对 ",(0,r.jsx)(n.code,{children:"Element Plus"})," 组件创建 ",(0,r.jsx)(n.code,{children:"Table"})," 已经是轻车熟路了。路由监听这块知识点，在平时业务开发中使用的频率极高，建议大家去看看 ",(0,r.jsx)(n.code,{children:"vue-router"})," 的",(0,r.jsx)(n.a,{href:"https://next.router.vuejs.org/zh/index.html",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"，已经有小伙伴将最新的文档翻译成中文了，对英文文档不感冒的同学非常友好，",(0,r.jsx)(n.code,{children:"Vue"})," 的生态非常繁荣。"]}),"\n",(0,r.jsxs)(n.p,{children:["本小节我们继续来学习一个新的知识点，当然主要也是围绕 ",(0,r.jsx)(n.code,{children:"Table"})," 组件这块知识。我们在业务开发中时常会碰到这样的需求，一级表格页面，点击详情后，对应的是一级表格的二级表格。点击二级表格详情，进入到三级表格。并且还不能切换左侧的菜单栏，也就是在同一个菜单栏下，渲染三个相同的 ",(0,r.jsx)(n.code,{children:"Table"})," 列表页。这就是后台管理系统的二级、三级页面。"]}),"\n",(0,r.jsxs)(n.h4,{id:"本章节知识点",children:["本章节知识点",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章节知识点",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"通过路径判断，设置返回按钮。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"多路径公用同一个组件。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"新建分类页",children:["新建分类页",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#新建分类页",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["先打开 ",(0,r.jsx)(n.code,{children:"App.vue"})," 设置好对应的菜单，我们需要在代码中设置一个新的一级菜单，如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'\x3c!--App.vue--\x3e\n...\n<el-sub-menu index="3">\n  <template #title>\n    <span>模块管理</span>\n  </template>\n  <el-menu-item-group>\n    <el-menu-item index="/category"><el-icon><Menu /></el-icon>分类管理</el-menu-item>\n  </el-menu-item-group>\n</el-sub-menu>\n...\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"index"})," 设置为 3，分类管理路径设置为 ",(0,r.jsx)(n.code,{children:"/category"}),"，此时需要在默认打开的参数下，把 3 添加进去："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"defaultOpen: ['1', '2', '3'],\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后，在 ",(0,r.jsx)(n.code,{children:"src/views"})," 下，新建一个 ",(0,r.jsx)(n.code,{children:"Category.vue"})," 文件，用于分类页面的开发。"]}),"\n",(0,r.jsxs)(n.p,{children:["最后前往 ",(0,r.jsx)(n.code,{children:"/src/router.js"})," 文件中，配置好路由相关参数，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import Category from '@/views/Category.vue'\n...\n{\n  path: '/category',\n  name: 'category',\n  component: Category\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["还有一个地方不要忘了，需要在 ",(0,r.jsx)(n.code,{children:"src/utils/index.js"})," 文件中添加对应的头部名称："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export const pathMap = {\n  index: '首页',\n  login: '登录',\n  add: '添加商品',\n  swiper: '轮播图配置',\n  hot: '热销商品配置',\n  new: '新品上线配置',\n  recommend: '为你推荐配置',\n  category: '分类管理',\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"重启项目，显示效果如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"api-数据接入",children:["API 数据接入",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-数据接入",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["完成上述操作后，打开 ",(0,r.jsx)(n.code,{children:"Category.vue"})," 文件，进行模板文件的代码编写，如下所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"template"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<template>\n  <el-card class="category-container">\n    <el-table\n      :load="state.loading"\n      ref="multipleTable"\n      :data="tableData"\n      tooltip-effect="dark"\n      style="width: 100%"\n      @selection-change="handleSelectionChange">\n      <el-table-column\n        type="selection"\n        width="55"\n      >\n      </el-table-column>\n      <el-table-column\n        prop="categoryName"\n        label="分类名称"\n      >\n      </el-table-column>\n      <el-table-column\n        prop="categoryRank"\n        label="排序值"\n        width="120"\n      >\n      </el-table-column>\n      <el-table-column\n        prop="createTime"\n        label="添加时间"\n        width="200"\n      >\n      </el-table-column>\n      <el-table-column\n        label="操作"\n        width="220"\n      >\n        <template #default="scope">\n          <a style="cursor: pointer; margin-right: 10px" @click="handleEdit(scope.row.categoryId)">修改</a>\n          <a style="cursor: pointer; margin-right: 10px" @click="handleNext(scope.row)">下级分类</a>\n          <el-popconfirm\n            title="确定删除吗？"\n            @confirm="handleDeleteOne(scope.row.categoryId)"\n          >\n            <template #reference>\n              <a style="cursor: pointer">删除</a>\n            </template>\n          </el-popconfirm>\n        </template>\n      </el-table-column>\n    </el-table>\n    \x3c!--总数超过一页，再展示分页器--\x3e\n    <el-pagination\n      background\n      layout="prev, pager, next"\n      :total="state.total"\n      :page-size="state.pageSize"\n      :current-page="state.currentPage"\n      @current-change="changePage"\n    />\n  </el-card>\n</template>\n'})}),"\n",(0,r.jsx)(n.p,{children:"同样，先引入列表数据，之后再编写一些添加删除修改操作，列表接入逻辑的代码如下所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"script"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport { onMounted, onUnmounted, reactive, ref } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { Plus, Delete } from '@element-plus/icons-vue'\nimport axios from '@/utils/axios'\n\nconst router = useRouter() // 声明路由实例\nconst route = useRoute() // 获取路由参数\nconst state = reactive({\n  loading: false,\n  tableData: [], // 数据列表\n  total: 0, // 总条数\n  currentPage: 1, // 当前页\n  pageSize: 10, // 分页大小\n  type: 'add', // 操作类型\n  level: 1,\n  parent_id: 0\n})\nonMounted(() => {\n  getCategory()\n})\n// 获取分类列表\nconst getCategory = () => {\n  const { level = 1, parent_id = 0 } = route.query\n  state.loading = true\n  axios.get('/categories', {\n    params: {\n      pageNumber: state.currentPage,\n      pageSize: state.pageSize,\n      categoryLevel: level,\n      parentId: parent_id\n    }\n  }).then(res => {\n    state.tableData = res.list\n    state.total = res.totalCount\n    state.currentPage = res.currPage\n    state.loading = false\n    state.level = level\n    state.parentId = parent_id\n  })\n}\nconst changePage = (val) => {\n  state.currentPage = val\n  getCategory()\n}\n<\/script>\n"})}),"\n",(0,r.jsx)(n.p,{children:"此时我们查看浏览器，列表数据已经可以正常展示，效果如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["温馨提示，如果列表数据没有的话，可能是有些调皮的家伙登录了admin账号，在线上将分类数据都删除了，大家可以进入线上地址，自行添加一些数据。地址如下：",(0,r.jsx)(n.a,{href:"http://vue3-admin.newbee.ltd%EF%BC%8C%E8%B4%A6%E5%8F%B7%EF%BC%9Aadmin%EF%BC%8C%E5%AF%86%E7%A0%81%EF%BC%9A123456%E3%80%82",target:"_blank",rel:"noopener noreferrer",children:"http://vue3-admin.newbee.ltd，账号：admin，密码：123456。"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"二级页面",children:["二级页面",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二级页面",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"接下来完成二级页面的功能制作，点击下一级分类，进入到二级页面。"}),"\n",(0,r.jsxs)(n.p,{children:["首先，我们需要创建一个二级的子路由，路由配置项内，可以设置二级子路由，需要在 ",(0,r.jsx)(n.code,{children:"/src/router/index.js"})," 做如下配置："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"{\n  path: '/category',\n  name: 'category',\n  component: Category,\n  children: [\n    {\n      path: '/category/level2',\n      name: 'level2',\n      component: Category,\n    },\n    {\n      path: '/category/level3',\n      name: 'level3',\n      component: Category,\n    }\n  ]\n},\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"/category"})," 路径下，可以配置 ",(0,r.jsx)(n.code,{children:"children"})," 属性，它是一个数组类型，数组内便是上级路由的子路由，我们此处将 ",(0,r.jsx)(n.code,{children:"name"})," 设置成 ",(0,r.jsx)(n.code,{children:"level2"}),"、",(0,r.jsx)(n.code,{children:"level3"}),"，它们都是子路由，这样的编码便于后续的路由监听操作。"]}),"\n",(0,r.jsxs)(n.p,{children:["设置完之后，进入 ",(0,r.jsx)(n.code,{children:"Category.vue"})," 组件，添加路由监听逻辑，代码如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script setup>\n...\nconst unwatch = router.afterEach((to) => {\n  // 每次路由变化的时候，都会触发监听时间，重新获取列表数据\n  if (['category', 'level2', 'level3'].includes(to.name)) {\n    getCategory()\n  }\n})\nonUnmounted(() => {\n  unwatch()\n})\n<\/script>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时我们点击「下一级分类」时，需要切换路由，并且写上等级参数和父级的 ",(0,r.jsx)(n.code,{children:"id"})," 属性。因为每一级请求的数据，需要发送的参数都不一样。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"一级分类：level = 1；parent_id = 0。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"二级分类：level = 2；parent_id = 一级分类 id"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"三级分类：level = 3; parent_id = 二级分类 id"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["按照这样的逻辑，我们编写 ",(0,r.jsx)(n.code,{children:"handleNext"})," 方法如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const handleNext = (item) => {\n  const levelNumber = item.categoryLevel + 1\n  if (levelNumber == 4) {\n    ElMessage.error('没有下一级')\n    return\n  }\n  router.push({\n    name: `level${levelNumber}`,\n    query: {\n      level: levelNumber,\n      parent_id: item.categoryId\n    }\n  })\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"item"})," 是列表的单项数据，",(0,r.jsx)(n.code,{children:"categoryLevel"})," 为当前分类的等级。比如，我在一级分类点击「下一级分类」，下一级分类需要的 ",(0,r.jsx)(n.code,{children:"level"})," 参数是 2，所以这个声明了 ",(0,r.jsx)(n.code,{children:"const levelNumber = item.categoryLevel + 1"}),"，如果 ",(0,r.jsx)(n.code,{children:"levelNumber"})," 为 4 时，说明当前等级已经是 3，我们需要 return 这个方法，并且提示没有下一级分类。亦或是在第三级的列表，隐藏掉「下一级分类」按钮。"]}),"\n",(0,r.jsxs)(n.p,{children:["然后通过 ",(0,r.jsx)(n.code,{children:"router.push"})," 的形式修改浏览器地址路径，",(0,r.jsx)(n.code,{children:"router.afterEach"})," 就能监听到，并且触发 ",(0,r.jsx)(n.code,{children:"getCategory"})," 方法，重新获取列表数据，并且 ",(0,r.jsx)(n.code,{children:"getCategory"})," 方法内，通过 ",(0,r.jsx)(n.code,{children:"route"})," 去获取浏览器地址栏上的查询参数，如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const { level = 1, parent_id = 0 } = route.query // 默认没有的情况下，level 为 1，parent_id 为 0\n"})}),"\n",(0,r.jsxs)(n.p,{children:["还有头部名称配置别忘了，打开 ",(0,r.jsx)(n.code,{children:"/src/utils/index.js"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export const pathMap = {\n  index: '首页',\n  login: '登录',\n  add: '添加商品',\n  swiper: '轮播图配置',\n  hot: '热销商品配置',\n  new: '新品上线配置',\n  recommend: '为你推荐配置',\n  category: '分类管理',\n  level2: '分类二级管理',\n  level3: '分类三级管理',\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"刷新浏览器，查看功能是否正常，切换效果如下图所示则代表成功了。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["注意左上角，进入二级页面后，需要添加一个返回按钮，方便回到上级页面。此时我们需要给 ",(0,r.jsx)(n.code,{children:"components/Header.vue"})," 添加一些逻辑，首先是模板部分："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"template"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'<div class="left">\n+  <el-icon class="back" v-if="state.hasBack" @click="back"><Back /></el-icon>\n  <span style="font-size: 20px">{{ state.name }}</span>\n</div>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"script"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script>\n  export default {\n    setup() {\n      const state = reactive({\n        ...\n        hasBack: false, // 是否展示返回icon\n      })\n\n      router.afterEach((to) => {\n        const { id } = to.query\n        state.name = pathMap[to.name]\n        // level2 和 level3 需要展示返回icon\n        state.hasBack = ['level2', 'level3'].includes(to.name)\n      })\n      // 返回方法\n      const back = () => {\n        router.back()\n      }\n\n      return {\n        ...\n        back\n      }\n    }\n  }\n<\/script>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"css"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:".header .left .back {\n  border: 1px solid #e9e9e9;\n  padding: 5px;\n  border-radius: 50%;\n  margin-right: 5px;\n  cursor: pointer;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"观察浏览器网页变化，如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"新增修改删除逻辑",children:["新增、修改、删除逻辑",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#新增修改删除逻辑",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这部分的新增修改逻辑和上一节的弹窗类似，但是弹窗内容不同，所以不建议将弹窗都封装成同一个组件。"}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"/src/components"})," 文件夹下新建一个弹窗组件 ",(0,r.jsx)(n.code,{children:"DialogAddCategory.vue"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<template>\n  <el-dialog\n    :title=\"state.type == 'add' ? '添加分类' : '修改分类'\"\n    v-model=\"state.visible\"\n    width=\"400px\"\n  >\n    <el-form :model=\"state.ruleForm\" :rules=\"state.rules\" ref=\"formRef\" label-width=\"100px\" class=\"good-form\">\n      <el-form-item label=\"商品名称\" prop=\"name\">\n        <el-input type=\"text\" v-model=\"state.ruleForm.name\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"排序值\" prop=\"rank\">\n        <el-input type=\"number\" v-model=\"state.ruleForm.rank\"></el-input>\n      </el-form-item>\n    </el-form>\n    <template #footer>\n      <span class=\"dialog-footer\">\n        <el-button @click=\"state.visible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\n      </span>\n    </template>\n  </el-dialog>\n</template>\n\n<script setup>\nimport { reactive, ref } from 'vue'\nimport { useRoute } from 'vue-router'\nimport axios from '@/utils/axios'\nimport { ElMessage } from 'element-plus'\n\nconst props = defineProps({\n  type: String, // 用于判断是添加还是编辑\n  reload: Function // 添加或修改完后，刷新列表页\n})\n\nconst formRef = ref(null)\nconst route = useRoute()\nconst state = reactive({\n  visible: false,\n  categoryLevel: 1,\n  parentId: 0,\n  ruleForm: {\n    name: '',\n    rank: ''\n  },\n  rules: {\n    name: [\n      { required: 'true', message: '名称不能为空', trigger: ['change'] }\n    ],\n    rank: [\n      { required: 'true', message: '编号不能为空', trigger: ['change'] }\n    ]\n  },\n  id: ''\n})\n// 获取详情\nconst getDetail = (id) => {\n  axios.get(`/categories/${id}`).then(res => {\n    state.ruleForm = {\n      name: res.categoryName,\n      rank: res.categoryRank\n    }\n    state.parentId = res.parentId\n    state.categoryLevel = res.categoryLevel\n  })\n}\n// 开启弹窗\nconst open = (id) => {\n  state.visible = true\n  if (id) {\n    state.id = id\n    // 如果是有 id 传入，证明是修改模式\n    getDetail(id)\n  } else {\n    // 否则为新增模式\n    // 新增类目，从路由获取分类 level 级别和父分类 id\n    const { level = 1, parent_id = 0 } = route.query\n    state.ruleForm = {\n      name: '',\n      rank: ''\n    }\n    state.parentId = parent_id\n    state.categoryLevel = level\n  }\n}\n// 关闭弹窗\nconst close = () => {\n  state.visible = false\n}\nconst submitForm = () => {\n  formRef.value.validate((valid) => {\n    if (valid) {\n      if (props.type == 'add') {\n        // 添加方法\n        axios.post('/categories', {\n          categoryLevel: state.categoryLevel, // 分类等级\n          parentId: state.parentId, // 当前分类的父分类 id\n          categoryName: state.ruleForm.name, // 分类名称\n          categoryRank: state.ruleForm.rank // 分类权重\n        }).then(() => {\n          ElMessage.success('添加成功')\n          state.visible = false\n          // 接口回调之后，运行重新获取列表方法 reload\n          if (props.reload) props.reload()\n        })\n      } else {\n        // 修改方法\n        axios.put('/categories', {\n          categoryId: state.id,\n          categoryLevel: state.categoryLevel,\n          parentId: state.categoryLevel,\n          categoryName: state.ruleForm.name,\n          categoryRank: state.ruleForm.rank\n        }).then(() => {\n          ElMessage.success('修改成功')\n          state.visible = false\n          // 接口回调之后，运行重新获取列表方法 reload\n          if (props.reload) props.reload()\n        })\n      }\n    }\n  })\n}\n<\/script>\n"})}),"\n",(0,r.jsx)(n.p,{children:"弹窗的关键逻辑，都已经在代码中进行注释。要注意的是父组件是可以通过 ref 方法，拿到弹窗组件的所有 return 的方法。"}),"\n",(0,r.jsxs)(n.p,{children:["学习过程中如果遇到代码执行错误等问题，请注意检查是否是 ",(0,r.jsx)(n.code,{children:"Element Plus"})," 的版本升级所致，实在找不出，请到本小节文章底部下载本节源码，对比学习。"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来我们把 ",(0,r.jsx)(n.code,{children:"Table"})," 的头部加上，",(0,r.jsx)(n.code,{children:"el-card"})," 支持具名插槽 ",(0,r.jsx)(n.code,{children:"#header"}),"，在插槽内编写内容，就会展示在 ",(0,r.jsx)(n.code,{children:"el-card"})," 组件的头部。"]}),"\n",(0,r.jsxs)(n.p,{children:["打开 ",(0,r.jsx)(n.code,{children:"Category.vue"})," 文件，在模板下添加如下代码："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"template"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<template>\n  <el-card class="category-container">\n    <template #header>\n      <div class="header">\n        <el-button type="primary" :icon="Plus" @click="handleAdd">增加</el-button>\n        <el-popconfirm\n          title="确定删除吗？"\n          confirmButtonText=\'确定\'\n          cancelButtonText=\'取消\'\n          @confirm="handleDelete"\n        >\n          <template #reference>\n            <el-button type="danger" :icon="Delete">批量删除</el-button>\n          </template>\n        </el-popconfirm>\n      </div>\n    </template>\n    ...\n    <DialogAddCategory ref=\'addCate\' :reload="getCategory" :type="state.type" />\n  <el-card>\n</template>\n'})}),"\n",(0,r.jsx)(n.p,{children:"业务逻辑添加情况如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"script"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport DialogAddCategory from '@/components/DialogAddCategory.vue'\n\nconst addCate = ref(null)\nconst state = reactive({\n  ...\n  multipleSelection: [], // 选中项\n})\n...\n// 添加分类\nconst handleAdd = () => {\n  state.type = 'add' // 传入弹窗组件用于弹窗 title 判断\n  addCate.value.open()\n}\n// 修改分类\nconst handleEdit = (id) => {\n  state.type = 'edit' // 传入弹窗组件用于弹窗 title 判断\n  addCate.value.open(id)\n}\n// 选择项\nconst handleSelectionChange = (val) => {\n  // 多选 checkbox\n  state.multipleSelection = val\n}\n// 批量删除\nconst handleDelete = () => {\n  if (!state.multipleSelection.length) {\n    ElMessage.error('请选择项')\n    return\n  }\n  axios.delete('/categories', {\n    data: {\n      ids: state.multipleSelection.map(i => i.categoryId)\n    }\n  }).then(() => {\n    ElMessage.success('删除成功')\n    getCategory()\n  })\n}\n// 单个删除\nconst handleDeleteOne = (id) => {\n  axios.delete('/categories', {\n    data: {\n      ids: [id]\n    }\n  }).then(() => {\n    ElMessage.success('删除成功')\n    getCategory()\n  })\n}\n<\/script>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这里要注意的是 ",(0,r.jsx)(n.code,{children:"multipleSelection"})," 用于选项的存储，",(0,r.jsx)(n.code,{children:"@selection-change"})," 方法是 ",(0,r.jsx)(n.code,{children:"el-table"})," 组件的 ",(0,r.jsx)(n.code,{children:"checkbox"})," 发生变化时触发的方法。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果遇到页面方法点击报错的情况，多半是声明后，没有 ",(0,r.jsx)(n.code,{children:"return"})," 所致，别问我是怎么知道的，我踩了无数次这样的坑。"]}),"\n",(0,r.jsx)(n.p,{children:"##总结"}),"\n",(0,r.jsxs)(n.p,{children:["本小节和上一小节的内容相比，页面虽然都是用同一个，但是上一个是三个不同的 ",(0,r.jsx)(n.code,{children:"menu"}),"，而本小节的是在同一个 ",(0,r.jsx)(n.code,{children:"menu"})," 下，分别加载不同的数据内容。"]}),"\n",(0,r.jsxs)(n.p,{children:["涉及到了子路由的知识点，并且再次巩固了 ",(0,r.jsx)(n.code,{children:"Table"})," 组件的使用。"]}),"\n",(0,r.jsxs)(n.h4,{id:"本章源码地址",children:["本章源码地址",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章源码地址",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://s.yezgea02.com/1663555654865/admin05.zip",target:"_blank",rel:"noopener noreferrer",children:"点击下载"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"文档最近更新时间：2022 年 9 月 20 日。"}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let h=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F36.Vue3%20%E5%AE%9E%E6%88%98%E4%B9%8B%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86%EF%BC%88%E5%A4%9A%E7%BA%A7%E5%85%B1%E7%94%A8%20Table%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"本章节知识点",id:"本章节知识点",depth:4},{text:"新建分类页",id:"新建分类页",depth:2},{text:"API 数据接入",id:"api-数据接入",depth:2},{text:"二级页面",id:"二级页面",depth:2},{text:"新增、修改、删除逻辑",id:"新增修改删除逻辑",depth:2},{text:"本章源码地址",id:"本章源码地址",depth:4}],title:"36.Vue3 实战之分类管理（多级共用 Table）",headingTitle:"36.Vue3 实战之分类管理（多级共用 Table）",frontmatter:{}}}}]);