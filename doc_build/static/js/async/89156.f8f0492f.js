"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["89156"],{897926:function(e,n,s){s.r(n),s.d(n,{default:()=>c});var r=s(552676),i=s(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ol:"ol",li:"li",strong:"strong",pre:"pre",code:"code",img:"img",ul:"ul"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"1基础万丈高楼平地起--redis-基础数据结构",children:["1基础：万丈高楼平地起 —— Redis 基础数据结构",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1基础万丈高楼平地起--redis-基础数据结构",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。"}),"\n",(0,r.jsxs)(n.p,{children:["由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章",(0,r.jsx)(n.a,{href:"https://juejin.im/post/5b53ee7e5188251aaa2d2e16",target:"_blank",rel:"noopener noreferrer",children:"《Redis 数据结构基础教程》"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"要体验 Redis，我们先从 Redis 安装说起。"}),"\n",(0,r.jsxs)(n.h2,{id:"redis-安装",children:["Redis 安装",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redis-安装",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"使用 Docker 安装。"}),"\n",(0,r.jsx)(n.li,{children:"通过 Github 源码编译。"}),"\n",(0,r.jsx)(n.li,{children:"直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。"}),"\n",(0,r.jsxs)(n.li,{children:["如果读者懒于安装操作，也可以使用网页版的 ",(0,r.jsx)(n.a,{href:"https://try.redis.io/",target:"_blank",rel:"noopener noreferrer",children:"Web Redis"})," 直接体验。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"具体操作如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Docker 方式"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# 拉取 redis 镜像\n> docker pull redis\n# 运行 redis 容器\n> docker run --name myredis -d -p6379:6379 redis\n# 执行容器中的 redis-cli，可以直接使用命令行操作 redis\n> docker exec -it myredis redis-cli\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Github 源码编译方式"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# 下载源码\n> git clone --branch 2.8 --depth 1 git@github.com:antirez/redis.git\n> cd redis\n# 编译\n> make\n> cd src\n# 运行服务器，daemonize表示在后台运行\n> ./redis-server --daemonize yes\n# 运行命令行\n> ./redis-cli\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"直接安装方式"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# mac\n> brew install redis\n# ubuntu\n> apt-get install redis\n# redhat\n> yum install redis\n# 运行客户端\n> redis-cli\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"redis-基础数据结构",children:["Redis 基础数据结构",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redis-基础数据结构",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。"}),"\n",(0,r.jsx)(n.p,{children:"本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。"}),"\n",(0,r.jsxs)(n.h2,{id:"string-字符串",children:["string (字符串)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#string-字符串",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?w=400&h=90&f=gif&s=8003",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?w=572&h=169&f=png&s=8854",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过  1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"键值对"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'> set name codehole\nOK\n> get name\n"codehole"\n> exists name\n(integer) 1\n> del name\n(integer) 1\n> get name\n(nil)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"批量键值对"})}),"\n",(0,r.jsx)(n.p,{children:"可以批量对多个字符串进行读写，节省网络耗时开销。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'> set name1 codehole\nOK\n> set name2 holycoder\nOK\n> mget name1 name2 name3 # 返回一个列表\n1) "codehole"\n2) "holycoder"\n3) (nil)\n> mset name1 boy name2 girl name3 unknown\n> mget name1 name2 name3\n1) "boy"\n2) "girl"\n3) "unknown"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"过期和 set 命令扩展"})}),"\n",(0,r.jsxs)(n.p,{children:["可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节",(0,r.jsx)(n.a,{href:"https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251",target:"_blank",rel:"noopener noreferrer",children:"《朝生暮死——过期策略》"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'> set name codehole\n> get name\n"codehole"\n> expire name 5  # 5s 后过期\n...  # wait for 5s\n> get name\n(nil)\n\n> setex name 5 codehole  # 5s 后过期，等价于 set+expire\n> get name\n"codehole"\n... # wait for 5s\n> get name\n(nil)\n\n> setnx name codehole  # 如果 name 不存在就执行 set 创建\n(integer) 1\n> get name\n"codehole"\n> setnx name holycoder\n(integer) 0  # 因为 name 已经存在，所以 set 创建不成功\n> get name\n"codehole"  # 没有改变\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"计数"})}),"\n",(0,r.jsx)(n.p,{children:"如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"> set age 30\nOK\n> incr age\n(integer) 31\n> incrby age 5\n(integer) 36\n> incrby age -5\n(integer) 31\n> set codehole 9223372036854775807  # Long.Max\nOK\n> incr codehole\n(error) ERR increment or decrement would overflow\n"})}),"\n",(0,r.jsx)(n.p,{children:"字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。"}),"\n",(0,r.jsxs)(n.p,{children:["关于字符串的内部结构实现，请阅读第 32 节",(0,r.jsx)(n.a,{href:"https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada",target:"_blank",rel:"noopener noreferrer",children:"《极度深寒 —— 探索「字符串」内部》"})]}),"\n",(0,r.jsxs)(n.h2,{id:"list-列表",children:["list (列表)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#list-列表",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。"}),"\n",(0,r.jsx)(n.p,{children:"当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?w=484&h=120&f=gif&s=122736",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"右边进左边出：队列"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'> rpush books python java golang\n(integer) 3\n> llen books\n(integer) 3\n> lpop books\n"python"\n> lpop books\n"java"\n> lpop books\n"golang"\n> lpop books\n(nil)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"右边进右边出：栈"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'> rpush books python java golang\n(integer) 3\n> rpop books\n"golang"\n> rpop books\n"java"\n> rpop books\n"python"\n> rpop books\n(nil)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"慢操作"})}),"\n",(0,r.jsxs)(n.p,{children:["lindex 相当于 Java 链表的",(0,r.jsx)(n.code,{children:"get(int index)"}),"方法，它需要对链表进行遍历，性能随着参数",(0,r.jsx)(n.code,{children:"index"}),"增大而变差。"]}),"\n",(0,r.jsxs)(n.p,{children:["ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数",(0,r.jsx)(n.code,{children:"start_index"}),"和",(0,r.jsx)(n.code,{children:"end_index"}),"定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。"]}),"\n",(0,r.jsxs)(n.p,{children:["index 可以为负数，",(0,r.jsx)(n.code,{children:"index=-1"}),"表示倒数第一个元素，同样",(0,r.jsx)(n.code,{children:"index=-2"}),"表示倒数第二个元素。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'> rpush books python java golang\n(integer) 3\n> lindex books 1  # O(n) 慎用\n"java"\n> lrange books 0 -1  # 获取所有元素，O(n) 慎用\n1) "python"\n2) "java"\n3) "golang"\n> ltrim books 1 -1 # O(n) 慎用\nOK\n> lrange books 0 -1\n1) "java"\n2) "golang"\n> ltrim books 1 0 # 这其实是清空了整个列表，因为区间范围长度为负\nOK\n> llen books\n(integer) 0\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"快速列表"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/27/164d975cac9559c5?w=1568&h=148&f=png&s=17643",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的 ",(0,r.jsx)(n.code,{children:"linkedlist"}),"，而是称之为快速链表 ",(0,r.jsx)(n.code,{children:"quicklist"})," 的一个结构。"]}),"\n",(0,r.jsxs)(n.p,{children:["首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 ",(0,r.jsx)(n.code,{children:"ziplist"}),"，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成 ",(0,r.jsx)(n.code,{children:"quicklist"}),"。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是 ",(0,r.jsx)(n.code,{children:"int"})," 类型的数据，结构上还需要两个额外的指针 ",(0,r.jsx)(n.code,{children:"prev"})," 和 ",(0,r.jsx)(n.code,{children:"next"})," 。所以 Redis 将链表和 ",(0,r.jsx)(n.code,{children:"ziplist"})," 结合起来组成了 ",(0,r.jsx)(n.code,{children:"quicklist"}),"。也就是将多个 ",(0,r.jsx)(n.code,{children:"ziplist"})," 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。"]}),"\n",(0,r.jsxs)(n.p,{children:["关于列表的内部结构实现，请阅读第 34 节",(0,r.jsx)(n.a,{href:"https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6",target:"_blank",rel:"noopener noreferrer",children:"《极度深寒 —— 探索「压缩列表」内部》"}),"和第 35 节",(0,r.jsx)(n.a,{href:"https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e",target:"_blank",rel:"noopener noreferrer",children:"《极度深寒 —— 探索「快速列表」内部》"})]}),"\n",(0,r.jsxs)(n.h2,{id:"hash-字典",children:["hash (字典)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#hash-字典",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/9/1647e419af9e3a87?w=579&h=277&f=png&s=11839",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。"}),"\n",(0,r.jsx)(n.p,{children:"当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?w=450&h=160&f=gif&s=100250",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。"}),"\n",(0,r.jsx)(n.p,{children:"hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'> hset books java "think in java"  # 命令行的字符串如果包含空格，要用引号括起来\n(integer) 1\n> hset books golang "concurrency in go"\n(integer) 1\n> hset books python "python cookbook"\n(integer) 1\n> hgetall books  # entries()，key 和 value 间隔出现\n1) "java"\n2) "think in java"\n3) "golang"\n4) "concurrency in go"\n5) "python"\n6) "python cookbook"\n> hlen books\n(integer) 3\n> hget books java\n"think in java"\n> hset books golang "learning go programming"  # 因为是更新操作，所以返回 0\n(integer) 0\n> hget books golang\n"learning go programming"\n> hmset books java "effective java" python "learning python" golang "modern golang programming"  # 批量 set\nOK\n'})}),"\n",(0,r.jsxs)(n.p,{children:["同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是 ",(0,r.jsx)(n.code,{children:"hincrby"}),"，和 ",(0,r.jsx)(n.code,{children:"incr"})," 使用基本一样。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# 老钱又老了一岁\n> hincrby user-laoqian age 1\n(integer) 30\n"})}),"\n",(0,r.jsxs)(n.p,{children:["关于字典的内部结构实现，请阅读第 33 节",(0,r.jsx)(n.a,{href:"https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7",target:"_blank",rel:"noopener noreferrer",children:"《极度深寒 —— 探索「字典」内部》"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"set-集合",children:["set (集合)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#set-集合",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值",(0,r.jsx)(n.code,{children:"NULL"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/2/16458e2da04f1a2d?w=484&h=200&f=gif&s=127699",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'> sadd books python\n(integer) 1\n> sadd books python  #  重复\n(integer) 0\n> sadd books java golang\n(integer) 2\n> smembers books  # 注意顺序，和插入的并不一致，因为 set 是无序的\n1) "java"\n2) "python"\n3) "golang"\n> sismember books java  # 查询某个 value 是否存在，相当于 contains(o)\n(integer) 1\n> sismember books rust\n(integer) 0\n> scard books  # 获取长度相当于 count()\n(integer) 3\n> spop books  # 弹出一个\n"java"\n'})}),"\n",(0,r.jsxs)(n.h1,{id:"zset-有序集合",children:["zset (有序集合)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#zset-有序集合",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。"}),"\n",(0,r.jsx)(n.p,{children:"zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?w=400&h=160&f=gif&s=68631",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。"}),"\n",(0,r.jsx)(n.p,{children:"zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'> zadd books 9.0 "think in java"\n(integer) 1\n> zadd books 8.9 "java concurrency"\n(integer) 1\n> zadd books 8.6 "java cookbook"\n(integer) 1\n> zrange books 0 -1  # 按 score 排序列出，参数区间为排名范围\n1) "java cookbook"\n2) "java concurrency"\n3) "think in java"\n> zrevrange books 0 -1  # 按 score 逆序列出，参数区间为排名范围\n1) "think in java"\n2) "java concurrency"\n3) "java cookbook"\n> zcard books  # 相当于 count()\n(integer) 3\n> zscore books "java concurrency"  # 获取指定 value 的 score\n"8.9000000000000004"  # 内部 score 使用 double 类型进行存储，所以存在小数点精度问题\n> zrank books "java concurrency"  # 排名\n(integer) 1\n> zrangebyscore books 0 8.91  # 根据分值区间遍历 zset\n1) "java cookbook"\n2) "java concurrency"\n> zrangebyscore books -inf 8.91 withscores # 根据分值区间 (-∞, 8.91] 遍历 zset，同时返回分值。inf 代表 infinite，无穷大的意思。\n1) "java cookbook"\n2) "8.5999999999999996"\n3) "java concurrency"\n4) "8.9000000000000004"\n> zrem books "java concurrency"  # 删除 value\n(integer) 1\n> zrange books 0 -1\n1) "java cookbook"\n2) "think in java"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"跳跃列表"})}),"\n",(0,r.jsx)(n.p,{children:"zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。"}),"\n",(0,r.jsx)(n.p,{children:"因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/23/164c5a90442cd51a?w=2032&h=174&f=png&s=25070",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？"}),"\n",(0,r.jsx)(n.p,{children:"想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。"}),"\n",(0,r.jsx)(n.p,{children:"跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。"}),"\n",(0,r.jsx)(n.p,{children:"想想你老家在世界地图中的位置：亚洲--\x3e中国->安徽省->安庆市->枞阳县->汤沟镇->田间村->xxxx号，也是这样一个类似的结构。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/23/164c5bb13c6da230?w=1151&h=225&f=png&s=17916",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。"}),"\n",(0,r.jsx)(n.p,{children:"定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？"}),"\n",(0,r.jsx)(n.p,{children:"跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。"}),"\n",(0,r.jsx)(n.p,{children:"首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。"}),"\n",(0,r.jsx)(n.p,{children:"这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。"}),"\n",(0,r.jsxs)(n.p,{children:["关于跳跃列表的内部结构实现，请阅读第 36 节",(0,r.jsx)(n.a,{href:"https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c",target:"_blank",rel:"noopener noreferrer",children:"《极度深寒 —— 探索「跳跃列表」内部结构》"})]}),"\n",(0,r.jsxs)(n.h2,{id:"容器型数据结构的通用规则",children:["容器型数据结构的通用规则",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#容器型数据结构的通用规则",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"create if not exists"}),"\n",(0,r.jsx)(n.p,{children:"如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"drop if no elements"}),"\n",(0,r.jsx)(n.p,{children:"如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"过期时间",children:["过期时间",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#过期时间",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。"}),"\n",(0,r.jsx)(n.p,{children:"还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"127.0.0.1:6379> set codehole yoyo\nOK\n127.0.0.1:6379> expire codehole 600\n(integer) 1\n127.0.0.1:6379> ttl codehole\n(integer) 597\n127.0.0.1:6379> set codehole yoyo\nOK\n127.0.0.1:6379> ttl codehole\n(integer) -1\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"思考--作业",children:["思考 & 作业",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考--作业",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["如果你是 Java 用户，请定义一个用户信息结构体，然后使用 ",(0,r.jsx)(n.code,{children:"fastjson"})," 对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"想想平时还有哪些指令你平时用过而本小节没有提到的？"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"回想一下掘金社区的功能模块中分别会使用到哪些数据结构？"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"扩展阅读",children:["扩展阅读",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展阅读",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://stackoverflow.com/questions/16375188/redis-strings-vs-redis-hashes-to-represent-json-efficiency",target:"_blank",rel:"noopener noreferrer",children:"《存结构体信息到底该使用 hash 还是 string？》"})}),"\n"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let c=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Redis%20%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F1%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%B8%87%E4%B8%88%E9%AB%98%E6%A5%BC%E5%B9%B3%E5%9C%B0%E8%B5%B7%20%E2%80%94%E2%80%94%20Redis%20%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md"]={toc:[{text:"Redis 安装",id:"redis-安装",depth:2},{text:"Redis 基础数据结构",id:"redis-基础数据结构",depth:2},{text:"string (字符串)",id:"string-字符串",depth:2},{text:"list (列表)",id:"list-列表",depth:2},{text:"hash (字典)",id:"hash-字典",depth:2},{text:"set (集合)",id:"set-集合",depth:2},{text:"容器型数据结构的通用规则",id:"容器型数据结构的通用规则",depth:2},{text:"过期时间",id:"过期时间",depth:2},{text:"思考 & 作业",id:"思考--作业",depth:2},{text:"扩展阅读",id:"扩展阅读",depth:2}],title:"zset (有序集合)",headingTitle:"zset (有序集合)",frontmatter:{}}}}]);