"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["12943"],{924582:function(e,a,n){n.r(a),n.d(a,{default:()=>x});var i=n(552676),l=n(740453);let c=n.p+"static/image/97b29c2e75d328e01e93860750e602ea.86b3b66d.webp",t=n.p+"static/image/60438bfd217c976bc72cb2d47e08d54b.560616b8.webp",s=n.p+"static/image/ff4eb0cd7f858514658be075bdb66bc9.321b1f9e.webp",p=n.p+"static/image/6799959b0aa7c7ef30dc1143d684d73b.1aed755d.webp",r=n.p+"static/image/dd02a4c55bc665ceefaf71e1a46a8886.3c44dbac.webp",d=n.p+"static/image/64f078dbdeabb9f97da895bbf2218bb8.ec0e88bb.webp",o=n.p+"static/image/7154537fa7855622b42f0c507f9d7f55.05304868.webp";function h(e){let a=Object.assign({h1:"h1",a:"a",p:"p",code:"code",img:"img",h2:"h2",strong:"strong",pre:"pre",h3:"h3",ol:"ol",li:"li"},(0,l.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a.h1,{id:"8具体实现api-用途分析",children:["8.具体实现：API 用途分析",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#8具体实现api-用途分析",children:"#"})]}),"\n",(0,i.jsxs)(a.p,{children:["通过第 ",(0,i.jsx)(a.code,{children:"6"})," 节和第 ",(0,i.jsx)(a.code,{children:"7"})," 节课程的学习，我们掌握了如何分析 Import 节点并判定 API 调用，今天这一节我们主要讲解如何分析 API 的具体用途并记录相关调用信息，也就是 ",(0,i.jsx)(a.code,{children:"step5"})," 的最后一小步。"]}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(a.p,{children:"我们的分析目标是，了解项目对于目标依赖真实的 API 调用情况，所以在分析每个代码文件时，需要在 API 调用判定成功后记录相关调用信息，这样在分析完所有文件后，才可以得到统计型的分析结果。"}),"\n",(0,i.jsxs)(a.h2,{id:"api-调用信息统计",children:["API 调用信息统计",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#api-调用信息统计",children:"#"})]}),"\n",(0,i.jsx)(a.p,{children:"要了解 API 调用情况，我们需要记录以下信息："}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"apiName："})," API 在代码中的完整调用名（Map key）"]}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"callNum："})," API 调用总次数"]}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"callOrigin："})," API 本名，通过 as 导入的API会存在此项"]}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"callFiles："})," API 调用分布情况（Map）"]}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"filePath："})," 存在 API 调用的代码文件路径信息（Map key）"]}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"projectName："})," 存在 API 调用的代码文件所在的项目"]}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"httpRepo："})," 用于在代码分析报告展示在线浏览代码文件的http链接前缀"]}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"lines："})," 代码文件中出现 API 调用的代码行信息（数组）"]}),"\n",(0,i.jsxs)(a.p,{children:["我们实现一个名为 ",(0,i.jsx)(a.code,{children:"isApiCheck"})," 的函数，执行后会在 ",(0,i.jsx)(a.code,{children:"codeAnalysis"})," 分析实例上挂载一个名为 apiMap 的对象，然后以 ",(0,i.jsx)(a.strong,{children:"apiName"})," 为 key ，用键值对的形式记录相关调用信息，具体代码如下："]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"const mapName = 'apiMap';\n\n// context : codeAnalysis分析实例上下文\n// tsCompiler : typescript编译器\n// node : 基准分析节点baseNode\n// depth : 链式调用深度\n// apiName : api完整调用名（含链式调用）\n// matchImportItem : API调用在import节点中的声明信息\n// filePath : 代码文件路径\n// projectName : 待分析代码文件所在的项目名称\n// line : API调用所在代码文件中的行信息\nfunction isApiCheck (context, tsCompiler, node, depth, apiName, matchImportItem, filePath, projectName, httpRepo, line) {\n    if (!context[mapName][apiName]) {\n        context[mapName][apiName] = {};\n        context[mapName][apiName].callNum = 1;\n        context[mapName][apiName].callOrigin = matchImportItem.origin;\n        context[mapName][apiName].callFiles = {};\n        context[mapName][apiName].callFiles[filePath] = {};\n        context[mapName][apiName].callFiles[filePath].projectName = projectName;\n        context[mapName][apiName].callFiles[filePath].httpRepo = httpRepo;\n        context[mapName][apiName].callFiles[filePath].lines = [];\n        context[mapName][apiName].callFiles[filePath].lines.push(line);\n    } else {\n        context[mapName][apiName].callNum++;\n        if (!Object.keys(context[mapName][apiName].callFiles).includes(filePath)) {\n            context[mapName][apiName].callFiles[filePath] = {};\n            context[mapName][apiName].callFiles[filePath].projectName = projectName;\n            context[mapName][apiName].callFiles[filePath].httpRepo = httpRepo;\n            context[mapName][apiName].callFiles[filePath].lines = [];\n            context[mapName][apiName].callFiles[filePath].lines.push(line);\n        }else{\n            context[mapName][apiName].callFiles[filePath].lines.push(line);\n        }\n    }                                                                               \n}\n"})}),"\n",(0,i.jsxs)(a.p,{children:["那么应该在什么时候记录呢？对，在 ",(0,i.jsx)(a.code,{children:"_dealAST"})," 函数判定 API 调用成功后（即在 step5 第二个小步骤判定完成后）执行 ",(0,i.jsx)(a.code,{children:"isApiCheck"})," 记录相关调用信息，简化版演示代码如下："]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"_dealAST() {\n    ......\n    const that = this;\n    // 遍历AST\n    function walk(node) {\n        ......\n        tsCompiler.forEachChild(node, walk);\n        // 获取基础分析节点信息\n        const { baseNode, depth, apiName } = that._checkPropertyAccess();                                                            \n        \n        // API调用信息统计\n        isApiCheck(baseNode, depth, apiName, ...)\n        ......         \n    }\n    walk(ast);\n    ......\n}\n"})}),"\n",(0,i.jsx)(a.p,{children:"最后在全部代码文件分析完成后，通过 apiMap 属性即可获取分析数据，举个例子："}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-json",children:'"apiMap": {\n    "loader": {\n        "callNum": 3,\n        "callOrigin": null,\n        "callFiles": {\n            "Order&src/pages/BasicSettings.vue": {\n                "projectName": "Order",\n                "httpRepo": "",\n                "lines": [\n                    84,\n                    97\n                ]\n            },\n            "Order&src/pages/Index.vue": {\n                "projectName": "Order",\n                "httpRepo": "",\n                "lines": [\n                    32\n                ]\n            }\n        }\n    },\n    "Util.getUser": {\n        "callNum": 1,\n        "callOrigin": null,\n        "callFiles": {\n            "Order&src/api/index.ts": {\n                "projectName": "Order",\n                "httpRepo": "",\n                "lines": [\n                    13\n                ]\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(a.p,{children:["通过 ",(0,i.jsx)(a.code,{children:"apiMap"}),"，我们了解到从 framework 中导入并使用了 ",(0,i.jsx)(a.code,{children:"loader"}),"、",(0,i.jsx)(a.code,{children:"Util"})," 这两个 API。其中 ",(0,i.jsx)(a.code,{children:"loader"})," 被调用了 3 次，分别位于 src/pages/BasicSettings.vue 文件中的 ",(0,i.jsx)(a.code,{children:"84"})," 和 ",(0,i.jsx)(a.code,{children:"97"})," 行，以及 src/pages/Index.vue 文件中的 ",(0,i.jsx)(a.code,{children:"32"})," 行。",(0,i.jsx)(a.code,{children:"Util"})," 以链式调用 ",(0,i.jsx)(a.code,{children:"Util.getUser"})," 的方式被调用了 1 次，位于 src/api/index.ts 文件中的 ",(0,i.jsx)(a.code,{children:"13"})," 行。"]}),"\n",(0,i.jsxs)(a.p,{children:["但是我们还不清楚这些 API 是 ",(0,i.jsx)(a.code,{children:"方法"}),"，还是",(0,i.jsx)(a.code,{children:"类型"}),"，或是",(0,i.jsx)(a.code,{children:"只读属性"}),"，又或是其它类型，想要对 API 进行用途分析，可以先来观察下 API 在不同用途场景中 AST 的结构特征："]}),"\n",(0,i.jsxs)(a.h2,{id:"method-api-分析",children:["Method API 分析",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#method-api-分析",children:"#"})]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"import { loader, app } from 'framework';\n\nloader('user');\napp.localStorage.set('store', 'iceman');\n"})}),"\n",(0,i.jsxs)(a.p,{children:["将上述代码放入 ",(0,i.jsx)(a.a,{href:"https://ts-ast-viewer.com/#code/JYWwDg9gTgLgBAbzgGwgQwCYFMoBo5phhwC+cAZlBCHAOSVohYDu0A1rQNwBQ3qmOABS0ArgGcctAJQ9CYAHSoAxmmQBlGNDQBzLPIkxhYzVCy18tYEqwg0AO2k8gA",target:"_blank",rel:"noopener noreferrer",children:"TypeScript AST Viewer"}),"，通过观察 AST 我们发现："]}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsxs)(a.p,{children:["可以通过判断 ",(0,i.jsx)(a.code,{children:"baseNode"})," 基准节点的父级节点是否为 ",(0,i.jsx)(a.code,{children:"CallExpression"})," 类型来判定 API 是否属于 ",(0,i.jsx)(a.code,{children:"Method API"}),"，不过需要排除一种干扰因素，举个例子："]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"import { loader, app } from 'framework';\n\nloader('user');\napp.localStorage.set('store', 'iceman');\ngetUserInfo(app.info);    // 需要排除被当成方法入参被调用的场景\n"})}),"\n",(0,i.jsxs)(a.p,{children:["将上面的代码放入 ",(0,i.jsx)(a.a,{href:"https://ts-ast-viewer.com/#code/JYWwDg9gTgLgBAbzgGwgQwCYFMoBo5phhwC+cAZlBCHAOSVohYDu0A1rQNwBQ3qmOABS0ArgGcctAJQ9CYAHSoAxmmQBlGNDQBzLPIkxhYzVCy18tYEqwg0AO2k9dMAKoSoASTvkIgufOBvCBkgA",target:"_blank",rel:"noopener noreferrer",children:"TypeScript AST Viewer "}),"："]}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsxs)(a.p,{children:["观察后可以发现虽然 ",(0,i.jsx)(a.code,{children:"baseNode"})," 基准节点的父级节点是 ",(0,i.jsx)(a.code,{children:"CallExpression"})," 类型，但此时 API 是被当成方法入参被调用的。CallExpression 类型节点的 ",(0,i.jsx)(a.code,{children:"expression"})," 属性表示方法名，",(0,i.jsx)(a.code,{children:"arguments"})," 属性表示方法入参，所以判断 API 是否属于",(0,i.jsx)(a.code,{children:"方法"}),"调用，除了判断父级节点是否为 CallExpression 类型外，还需要保证 ",(0,i.jsx)(a.code,{children:"baseNode"})," 在父节点的 expression 属性中而非 arguments 属性中，这一点可以通过判断父节点 expression 属性的 pos 和 end 值与基准节点的 pos 和 end 值是否一致来判定。因此，",(0,i.jsx)(a.code,{children:"Method API"})," 检测的分析代码这样实现："]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"const mapName = 'methodMap';\n\n// context : codeAnalysis分析实例上下文\n// tsCompiler : typescript编译器\n// node : 基准分析节点baseNode\n// depth : 链式调用深度\n// apiName : api完整调用名\n// matchImportItem : API调用在import节点中的声明信息\n// filePath : 代码文件路径\n// projectName : 待分析代码文件所在的项目名称\n// line : API调用所在代码文件中的行信息\nfunction isMethodCheck (context, tsCompiler, node, depth, apiName, matchImportItem, filePath, projectName, httpRepo, line) {\n    if(node.parent && tsCompiler.isCallExpression(node.parent)){ // 存在于函数调用表达式中\n        if(node.parent.expression.pos == node.pos \n            && node.parent.expression.end == node.end){  // 命中函数名method检测\n            if (!context[mapName][apiName]) {\n                context[mapName][apiName] = {};\n                context[mapName][apiName].callNum = 1;\n                context[mapName][apiName].callOrigin = matchImportItem.origin;\n                context[mapName][apiName].callFiles = {};\n                context[mapName][apiName].callFiles[filePath] = {};\n                context[mapName][apiName].callFiles[filePath].projectName = projectName;\n                context[mapName][apiName].callFiles[filePath].httpRepo = httpRepo;\n                context[mapName][apiName].callFiles[filePath].lines = [];\n                context[mapName][apiName].callFiles[filePath].lines.push(line);\n            } else {\n                context[mapName][apiName].callNum++;\n                if (!Object.keys(context[mapName][apiName].callFiles).includes(filePath)) {\n                    context[mapName][apiName].callFiles[filePath] = {};\n                    context[mapName][apiName].callFiles[filePath].projectName = projectName;\n                    context[mapName][apiName].callFiles[filePath].httpRepo = httpRepo;\n                    context[mapName][apiName].callFiles[filePath].lines = [];\n                    context[mapName][apiName].callFiles[filePath].lines.push(line);\n                }else{\n                    context[mapName][apiName].callFiles[filePath].lines.push(line);\n                }\n            }                                                                         \n        }           \n    }                                                                      \n}\n"})}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.code,{children:"isMethodCheck"})," 函数在判定 API 属于 ",(0,i.jsx)(a.code,{children:"Method API"})," 后，会将相关的信息记录在 codeAnalysis 实例的 methodMap 属性中，这样在分析完所有代码文件后，可以通过 methodMap 了解到项目从目标依赖中引入了哪些",(0,i.jsx)(a.code,{children:"方法 API"}),"，以及它们的具体调用信息。"]}),"\n",(0,i.jsxs)(a.h2,{id:"type-api-分析",children:["Type API 分析",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#type-api-分析",children:"#"})]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"import { RequestType } from 'framework';\n\nconst data : RequestType = { show : 2 };\nconst arr : Array<RequestType> = [];\n"})}),"\n",(0,i.jsxs)(a.p,{children:["同理，将上述代码放入 ",(0,i.jsx)(a.a,{href:"https://ts-ast-viewer.com/#code/JYWwDg9gTgLgBAbzgJQKYEcCuqDOMAqAnmKnAL5wBmUEIcA5NQIYioDu0A1vQNwBQfAMYQAdnjgATJjCZwAXCgzY8REnAC8iODgAWENvLgAmcv2Fj4TKFEMBBa00IAeNFlwFiqAHwa4AbQBdHiA",target:"_blank",rel:"noopener noreferrer",children:"TypeScript AST Viewer"}),"，通过观察 AST 我们发现："]}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)("img",{src:s,alt:""})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsxs)(a.p,{children:["不论是普通类型还是泛型，只需要判断基准节点 ",(0,i.jsx)(a.code,{children:"baseNode"})," 的父级节点是否为 ",(0,i.jsx)(a.code,{children:"TypeReference"})," 类型，即可判定 API 是否属于 ",(0,i.jsx)(a.code,{children:"Type API"}),"，检测的分析代码这样实现："]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"const mapName = 'typeMap';\n\n// context : codeAnalysis分析实例上下文\n// tsCompiler : typescript编译器\n// node : 基准分析节点baseNode\n// depth : 链式调用深度\n// apiName : api完整调用名\n// matchImportItem : API调用在import节点中的声明信息\n// filePath : 代码文件路径\n// projectName : 待分析代码文件所在的项目名称\n// line : API调用所在代码文件中的行信息\nfunction isTypeCheck (context, tsCompiler, node, depth, apiName, matchImportItem, filePath, projectName, httpRepo, line) {\n    if(node.parent && tsCompiler.isTypeReferenceNode(node.parent)){                        // 命中Type检测\n        if (!context[mapName][apiName]) {\n            context[mapName][apiName] = {};\n            context[mapName][apiName].callNum = 1;\n            context[mapName][apiName].callOrigin = matchImportItem.origin;\n            context[mapName][apiName].callFiles = {};\n            context[mapName][apiName].callFiles[filePath] = {};\n            context[mapName][apiName].callFiles[filePath].projectName = projectName;\n            context[mapName][apiName].callFiles[filePath].httpRepo = httpRepo;\n            context[mapName][apiName].callFiles[filePath].lines = [];\n            context[mapName][apiName].callFiles[filePath].lines.push(line);\n        } else {\n            context[mapName][apiName].callNum++;\n            if (!Object.keys(context[mapName][apiName].callFiles).includes(filePath)) {\n                context[mapName][apiName].callFiles[filePath] = {};\n                context[mapName][apiName].callFiles[filePath].projectName = projectName;\n                context[mapName][apiName].callFiles[filePath].httpRepo = httpRepo;\n                context[mapName][apiName].callFiles[filePath].lines = [];\n                context[mapName][apiName].callFiles[filePath].lines.push(line);\n            }else{\n                context[mapName][apiName].callFiles[filePath].lines.push(line);\n            }\n        }                                                                           \n    }                                                                      \n}\n"})}),"\n",(0,i.jsxs)(a.p,{children:["同样，在分析完所有代码文件后，我们可以通过 typeMap 了解到项目从目标依赖中导入了哪些",(0,i.jsx)(a.code,{children:"类型 API"})," ，以及它们的具体调用信息。"]}),"\n",(0,i.jsxs)(a.h2,{id:"代码结构问题",children:["代码结构问题",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#代码结构问题",children:"#"})]}),"\n",(0,i.jsx)(a.p,{children:"上述用途分析的策略都是将 baseNode 基准节点以及相关信息作为入参来执行一个判定函数，然后将满足判定条件的 API 及调用信息记录到 Map 结构中，等全部文件分析完成后即可从特定 Map 中获取分析结果。"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"_dealAST() {\n    ......\n    const that = this;\n    // 遍历AST\n    function walk(node) {\n        ......\n        tsCompiler.forEachChild(node, walk);\n        // 获取基础分析节点信息\n        const { baseNode, depth, apiName } = that._checkPropertyAccess();                                                            \n        \n        // API 调用各种分析指标的判定函数\n        isApiCheck(baseNode, depth, apiName, ...)\n        isMethodCheck(baseNode, depth, apiName, ...)\n        isTypeCheck(baseNode, depth, apiName, ...)\n        ......         \n    }\n    walk(ast);\n    ......\n}\n"})}),"\n",(0,i.jsxs)(a.p,{children:["按照这种思路，每实现一种分析指标就需要在 ",(0,i.jsx)(a.code,{children:"_dealAST"})," 中添加一个新的判定函数，这么做会有什么问题呢？"]}),"\n",(0,i.jsxs)(a.h3,{id:"可维护性变差",children:["可维护性变差",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#可维护性变差",children:"#"})]}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.code,{children:"_dealAST"})," 函数是 codeAnalysis 基础类执行分析时遍历 AST 的核心方法，按照目前的代码结构及分析策略，新增判定函数会让 analysis 模块越来越臃肿，同时判定函数需要不断地调试并验证其准确性，这就意味着后续迭代需要不断的变更 analysis 模块，可维护性也逐步变差。"]}),"\n",(0,i.jsxs)(a.h3,{id:"执行性能变差",children:["执行性能变差",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#执行性能变差",children:"#"})]}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsxs)(a.p,{children:["如果一个 API 属于 ",(0,i.jsx)(a.code,{children:"Method API"})," ，那它就不会是 ",(0,i.jsx)(a.code,{children:"Type API"}),"，也就是说用途判定具有 ",(0,i.jsx)(a.code,{children:"互斥性"}),"，即一个 API 如果属于方法调用，那么它在执行并命中 ",(0,i.jsx)(a.code,{children:"Method API"})," 的判定函数后就没必要执行其它判定函数了。"]}),"\n",(0,i.jsxs)(a.p,{children:["但是目前的代码结构导致每个 ",(0,i.jsx)(a.code,{children:"baseNode"})," 基准节点都必须依次执行所有判定函数，且无法动态调整各个判定函数的执行次序，代码的执行性能很差。"]}),"\n",(0,i.jsx)(a.p,{children:"那么如何解决这些问题呢？下一节课我们会学习如何通过插件方案来解决主程序与子程序之间的代码结构问题。"}),"\n",(0,i.jsxs)(a.h2,{id:"小结",children:["小结",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsx)(a.p,{children:"这一小节我们学习了如何实现 API 用途分析，需要大家掌握以下知识点："}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsx)(a.li,{children:"想要了解项目对于目标依赖真实的 API 调用情况，需要在分析每个代码文件时记录 API 调用的相关信息，这样在所有文件分析完成后，才可以得到统计型的分析结果。"}),"\n",(0,i.jsxs)(a.li,{children:["可以通过判断基准节点的父级节点是否为 ",(0,i.jsx)(a.code,{children:"CallExpression"})," 类型来判定 API 是否属于",(0,i.jsx)(a.code,{children:"方法"}),"调用，不过需要排除被当成方法入参调用的场景。"]}),"\n",(0,i.jsxs)(a.li,{children:["不论是普通类型还是泛型，都可以通过判断其基准节点的父级节点是否为 ",(0,i.jsx)(a.code,{children:"TypeReference"})," 类型来判定该 API 是否属于",(0,i.jsx)(a.code,{children:"类型"}),"调用。"]}),"\n",(0,i.jsxs)(a.li,{children:["目前的代码结构及分析策略会导致 ",(0,i.jsx)(a.code,{children:"analysis"})," 模块越来越臃肿，可维护性变差，每个基准节点必须依次执行所有判定函数，代码执行性能很差。"]}),"\n"]})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:a}=Object.assign({},(0,l.ah)(),e.components);return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}let x=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E4%BE%9D%E8%B5%96%E6%B2%BB%E7%90%86%EF%BC%9A%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%2F8.%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%EF%BC%9AAPI%20%E7%94%A8%E9%80%94%E5%88%86%E6%9E%90.md"]={toc:[{text:"API 调用信息统计",id:"api-调用信息统计",depth:2},{text:"Method API 分析",id:"method-api-分析",depth:2},{text:"Type API 分析",id:"type-api-分析",depth:2},{text:"代码结构问题",id:"代码结构问题",depth:2},{text:"可维护性变差",id:"可维护性变差",depth:3},{text:"执行性能变差",id:"执行性能变差",depth:3},{text:"小结",id:"小结",depth:2}],title:"8.具体实现：API 用途分析",headingTitle:"8.具体实现：API 用途分析",frontmatter:{}}}}]);