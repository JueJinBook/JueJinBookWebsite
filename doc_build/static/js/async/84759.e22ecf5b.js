"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["84759"],{113362:function(e,n,s){e.exports=s.p+"static/image/e761dac4d92b7bd3459a1ef4041770f0.b23673ad.webp"},142719:function(e,n,s){s.r(n),s.d(n,{default:()=>t});var d=s(552676),r=s(740453);let c=s.p+"static/image/716157826d5bb489c37a6d0dd4244830.b3e143b1.webp";var i=s(113362);let o=s.p+"static/image/cf154986213b281df6aa1a7157ce199a.1e9e18d6.webp",l=s.p+"static/image/49295b2805d1db92e29c79aad2de8f4a.af432c19.webp",j=s.p+"static/image/53d6ba16c4c08c8f703043ad33b343d9.e4e515fb.webp";function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",img:"img",em:"em",ul:"ul",li:"li",h2:"h2",code:"code",pre:"pre"},(0,r.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"1-什么是-nodejs",children:["1 什么是 Node.js？",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-什么是-nodejs",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"在 Node.js 出现之前，最常见的 JavaScript 运行时环境是浏览器，也叫做 JavaScript 的宿主环境。浏览器为 JavaScript 提供了 DOM API，能够让 JavaScript 操作浏览器环境（JS 环境）。"}),"\n",(0,d.jsxs)(n.p,{children:["2009 年初 Node.js 出现了，它是由 Ryan Dahl 基于 Chrome V8 引擎开发的 JavaScript ",(0,d.jsx)(n.strong,{children:"运行时环境"}),"，所以 Node.js 也是 JavaScript  的一种宿主环境。而它的底层就是我们所熟悉的 Chrome 浏览器的 JavaScript 引擎，因此本质上和在 Chrome 浏览器中运行的 JavaScript 并没有什么区别。"]}),"\n",(0,d.jsxs)(n.p,{children:["但是，",(0,d.jsx)(n.strong,{children:"Node.js 的运行环境和浏览器的运行环境还是不一样的"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)("img",{src:j,alt:""}),"\n",(0,d.jsx)(n.em,{children:"Node.js、V8与Chrome浏览器的关系"})]}),"\n",(0,d.jsxs)(n.p,{children:["因为 Node.js 不是浏览器，所以它",(0,d.jsx)(n.strong,{children:"不具有浏览器提供的 DOM API"}),"，比如 Window 对象、Location 对象、Document 对象、HTMLElement 对象、Cookie 对象等等。但是，Node.js 提供了自己特有的 API，比如全局的 global 对象，也提供了当前进程信息的 Process 对象，操作文件的 fs 模块，以及创建 Web 服务的 http 模块等等。这些 API 能够让我们使用 JavaScript 操作计算机，所以我们可以用 Node.js 平台开发 web 服务器。"]}),"\n",(0,d.jsx)(n.p,{children:"也有一些对象是 Node.js 和浏览器共有的，如 JavaScript 引擎的内置对象，它们由 V8 引擎提供。常见的还有："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"基本的常量 undefined、null、NaN、Infinity；"}),"\n",(0,d.jsx)(n.li,{children:"内置对象 Boolean、Number、String、Object、Symbol、Function、Array、Regexp、Set、Map、Promise、Proxy；"}),"\n",(0,d.jsx)(n.li,{children:"全局函数 eval、encodeURIComponent、decodeURIComponent等等。"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"此外，还有一些方法不属于引擎内置 API，但是两者都能实现，比如 setTimeout、setInterval 方法，Console 对象等等。"}),"\n",(0,d.jsxs)(n.h2,{id:"nodejs-的基本架构",children:["Node.js 的基本架构",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#nodejs-的基本架构",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)("img",{src:l,alt:""}),"\n",(0,d.jsxs)(n.em,{children:["图片来源：",(0,d.jsx)(n.a,{href:"https://medium.com/@chathuranga94/nodejs-architecture-concurrency-model-f71da5f53d1d",target:"_blank",rel:"noopener noreferrer",children:"medium.com"})]})]}),"\n",(0,d.jsx)(n.p,{children:"上图是 Node.js 的基本架构，我们可以看到，Node.js 是运行在操作系统之上的，它底层由 V8 JavaScript 引擎，以及一些 C/C++ 写的库构成，包括 libUV 库、c-ares、llhttp/http-parser、open-ssl、zlib 等等。"}),"\n",(0,d.jsx)(n.p,{children:"其中，libUV 负责处理事件循环，c-ares、llhttp/http-parser、open-ssl、zlib 等库提供 DNS 解析、HTTP 协议、HTTPS 和文件压缩等功能。"}),"\n",(0,d.jsxs)(n.p,{children:["在这些模块的上一层是中间层，中间层包括",(0,d.jsx)(n.code,{children:"Node.js Bindings"}),"、",(0,d.jsx)(n.code,{children:"Node.js Standard Library"}),"以及",(0,d.jsx)(n.code,{children:"C/C++ AddOns"}),"。",(0,d.jsx)(n.code,{children:"Node.js Bindings"}),"层的作用是将底层那些用 C/C++ 写的库接口暴露给 JS 环境，而",(0,d.jsx)(n.code,{children:"Node.js Standard Library"}),"是 Node.js 本身的核心模块。至于",(0,d.jsx)(n.code,{children:"C/C++ AddOns"}),"，它可以让用户自己的 C/C++ 模块通过桥接的方式提供给",(0,d.jsx)(n.code,{children:"Node.js"}),"。"]}),"\n",(0,d.jsx)(n.p,{children:"中间层之上就是 Node.js 的 API 层了，我们使用 Node.js 开发应用，主要是使用 Node.js 的 API 层，所以 Node.js 的应用最终就运行在 Node.js 的 API 层之上。"}),"\n",(0,d.jsxs)(n.h2,{id:"nodejs-可以做什么",children:["Node.js 可以做什么？",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#nodejs-可以做什么",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"Node.js 是运行在操作系统中的 JavaScript 运行时环境，提供了一系列操作系统的 API，通过它们我们可以执行操作系统指令、读写文件、建立网络连接、调用操作系统中的其他服务等等。"}),"\n",(0,d.jsx)(n.p,{children:"Node.js 内置的模块比较丰富，常用的主要是以下几个。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"File System 模块：这是操作系统的目录和文件的模块，提供文件和目录的读、写、创建、删除、权限设置等等。"}),"\n",(0,d.jsx)(n.li,{children:"Net 模块：提供网络套接字 socket，用来创建 TCP 连接，TCP 连接可以用来访问后台数据库和其他持久化服务。"}),"\n",(0,d.jsx)(n.li,{children:"HTTP 模块：提供创建 HTTP 连接的能力，可以用来创建 Web 服务，也是 Node.js 在前端最常用的核心模块。"}),"\n",(0,d.jsx)(n.li,{children:"URL 模块：用来处理客户端请求的 URL 信息的辅助模块，可以解析 URL 字符串。"}),"\n",(0,d.jsx)(n.li,{children:"Path 模块：用来处理文件路径信息的辅助模块，可以解析文件路径的字符串。"}),"\n",(0,d.jsx)(n.li,{children:"Process 模块：用来获取进程信息。"}),"\n",(0,d.jsx)(n.li,{children:"Buffer 模块：用来处理二进制数据。"}),"\n",(0,d.jsx)(n.li,{children:"Console 模块：控制台模块，同浏览器的Console模块，用来输出信息到控制台。"}),"\n",(0,d.jsx)(n.li,{children:"Crypto 加密解密模块：用来处理需要用户授权的服务。"}),"\n",(0,d.jsx)(n.li,{children:"Events 模块：用来监听和派发用户事件。"}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["以上这些模块在后续课程中我们都会用到，这里咱们有个大概印象就行了。除此之外，Node.js 还有其他的模块，有兴趣的同学可以访问",(0,d.jsx)(n.a,{href:"https://nodejs.org/dist/latest-v6.x/docs/api/http.html",target:"_blank",rel:"noopener noreferrer",children:"Node.js官方文档"}),"查看这些模块的介绍。"]}),"\n",(0,d.jsx)(n.p,{children:"除了上述核心模块外，Node.js 的社区生态也非常活跃，有大量的第三方模块可以使用，它们都可以用 NPM 包管理工具来安装，我们也会在后面的课程介绍一些。"}),"\n",(0,d.jsx)(n.p,{children:"话不多说，现在我们一起安装 Node.js 到我们的系统中，然后写一个小例子来体验一下 Node.js 的使用吧!"}),"\n",(0,d.jsxs)(n.h2,{id:"安装-nodejs",children:["安装 Node.js",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装-nodejs",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["我们可以在 Node.js 官网 ",(0,d.jsx)(n.a,{href:"https://nodejs.org",target:"_blank",rel:"noopener noreferrer",children:(0,d.jsx)(n.a,{href:"https://nodejs.org",target:"_blank",rel:"noopener noreferrer",children:"https://nodejs.org"})})," 上下载适合我们操作系统的 Node.js。不论是 MacOS、Linux 系统还是 X86 或 64 位 windows 系统，都有对应的版本可以安装。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:o,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"这里有两个可以选择的版本，一个是 LTS 版本，叫做 Long Term Support 版，也就是官方推荐的比较成熟稳定的版本，目前是 16.16.0。另一个是 Current 版本，也就是当前发布的最新版，没有那么成熟，但是包含最多的新特性。"}),"\n",(0,d.jsxs)(n.p,{children:["一般来说，如果要开发一个在线 Web 应用，为了稳定性通常",(0,d.jsx)(n.strong,{children:"优先选择 LTS 版本"}),"，我们的课程就选择这个版本。下载对应版本后，解压安装即可。安装完成后，打开命令行终端，执行命令 ",(0,d.jsx)(n.code,{children:"node -v"}),"，可以查看当前安装的 Node.js 的版本号。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-bash",children:"$ node -v\nv16.16.0\n"})}),"\n",(0,d.jsxs)(n.p,{children:["接下来，我们可以在命令行终端的任意目录下，创建我们 js 文件。我们先来尝试创建一个文件",(0,d.jsx)(n.code,{children:"ziyue.js"}),"。编辑这个文件的内容如下："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"const template = (text) => `\n                 __._                                   \n                / ___)_                                 \n               (_/Y ===\\\\                            __ \n               |||.==. =).                            | \n               |((| o |p|      |  ${text}\n            _./| \\\\(  /=\\\\ )     |__                    \n          /  |@\\\\ ||||||||.                             \n         /    \\\\@\\\\ ||||||||\\\\                          \n        /   \\\\  \\\\@\\\\ ||||||//\\\\                        \n       (     Y  \\\\@\\\\|||| // _\\\\                        \n       |    -\\\\   \\\\@\\\\ \\\\\\\\//    \\\\                    \n       |     -\\\\__.-./ //\\\\.---.^__                        \n       | \\\\    /  |@|__/\\\\_|@|  |  |                         \n       \\\\__\\\\      |@||| |||@|     |                    \n       <@@@|     |@||| |||@|    /                       \n      / ---|     /@||| |||@|   /                                 \n     |    /|    /@/ || |||@|  /|                        \n     |   //|   /@/  ||_|||@| / |                        \n     |  // \\\\ ||@|   /|=|||@| | |                       \n     \\\\ //   \\\\||@|  / |/|||@| \\\\ |                     \n     |//     ||@| /  ,/|||@|   |                        \n     //      ||@|/  /|/||/@/   |                        \n    //|   ,  ||//  /\\\\|/\\\\/@/  / /                      \n   //\\\\   /   \\\\|/  /H\\\\|/H\\\\/  /_/                     \n  // |\\\\_/     |__/|H\\\\|/H|\\\\_/                         \n |/  |\\\\        /  |H===H| |                            \n     ||\\\\      /|  |H|||H| |                            \n     ||______/ |  |H|||H| |                             \n      \\\\_/ _/  _/  |L|||J| \\\\_                          \n      _/  ___/   ___\\\\__/___ '-._                       \n     /__________/===\\\\__/===\\\\---'                      \n                                                        \n`;\n\nconst argv = process.argv;\nconsole.log(template(argv[2] || '有朋自远方来，不亦乐乎！'));\n"})}),"\n",(0,d.jsx)(n.p,{children:"然后我们在控制台上，进入这个项目目录，运行 node 命令："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-bash",children:"node ziyue.js\n"})}),"\n",(0,d.jsx)(n.p,{children:"然后，我们就可以看到控制台上的输出内容了。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,d.jsxs)(n.p,{children:["接下来，我们看一下上面这段代码做了什么。这个代码和浏览器的 JS 没有什么区别，我们定义了一个输出模板字符串的函数",(0,d.jsx)(n.code,{children:"template"}),"，它接受一个",(0,d.jsx)(n.code,{children:"text"}),"参数，然后用它解析模板字符串，最终通过",(0,d.jsx)(n.code,{children:"console.log"}),"得到输出结果。"]}),"\n",(0,d.jsxs)(n.p,{children:["注意，我们的 console.log 中给 text 一个默认值，但是实际上还有一个",(0,d.jsx)(n.code,{children:"process.argv[2]"}),"的变量，这个是做什么用的呢？"]}),"\n",(0,d.jsxs)(n.p,{children:["实际上，process.argv 可以获得命令行调用的信息，以空格分隔。所以，按照我们执行",(0,d.jsx)(n.code,{children:"node ziyue.js"}),"的命令，这时候",(0,d.jsx)(n.code,{children:"process.argv"}),"的值是数组",(0,d.jsx)(n.code,{children:"['node', 'ziyue.js']"}),"，所以",(0,d.jsx)(n.code,{children:"process.argv[2]"}),"的值是 undefined，结果就输出了默认值。"]}),"\n",(0,d.jsx)(n.p,{children:"现在我们换一种方式调用："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-bash",children:"node ziyue.js 三人行必有我师焉\n"})}),"\n",(0,d.jsx)(n.p,{children:"得到如下输出。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:c,alt:""})}),"\n",(0,d.jsxs)(n.h2,{id:"总结",children:["总结",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"Node.js 不是一种新语言而是一个平台，为 JavaScript 提供了浏览器之外的运行时环境。它提供了丰富的内置模块，包括 File System 模块、Net 模块、HTTP 模块、URL 模块、Process 模块等等。这些模块能够让 JavaScript 操作我们的计算机，建立 Web 服务器。"}),"\n",(0,d.jsx)(n.p,{children:"那这一节课，我们安装了 Node.js 并浅浅体验了它的基本用法，在后续的课程中，我们将深入了解 Node.js 的更多使用场景和使用方法。"}),"\n",(0,d.jsx)(n.p,{children:"需要注意的是，除了一部分 API 不同以外，Node.js 和浏览器有一个比较大的差别，那就是 Node.js 默认是模块化的。下一节课，我们就将介绍 Node.js 非常重要的模块管理机制，并学习如何加载和调用模块。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}let t=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%E5%85%A8%E6%A0%88%2F1%20%E4%BB%80%E4%B9%88%E6%98%AF%20Node.js%EF%BC%9F.md"]={toc:[{text:"Node.js 的基本架构",id:"nodejs-的基本架构",depth:2},{text:"Node.js 可以做什么？",id:"nodejs-可以做什么",depth:2},{text:"安装 Node.js",id:"安装-nodejs",depth:2},{text:"总结",id:"总结",depth:2}],title:"1 什么是 Node.js？",headingTitle:"1 什么是 Node.js？",frontmatter:{}}}}]);