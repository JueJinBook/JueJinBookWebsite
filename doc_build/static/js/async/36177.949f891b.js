"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["36177"],{467633:function(e,n,r){r.r(n),r.d(n,{default:()=>t});var s=r(552676),d=r(740453);let i=r.p+"static/image/9c8c24c4950047e2c48eb167ad7502ce.36667bb7.png";function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",code:"code",h2:"h2",h3:"h3",pre:"pre",ol:"ol",strong:"strong",img:"img",h4:"h4",blockquote:"blockquote"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"第14章实战篇electron实现屏幕截图",children:["第14章—实战篇：Electron实现屏幕截图",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第14章实战篇electron实现屏幕截图",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"\uFEFF## 前言\n桌面端截图功能是大多数桌面端应用都具备的功能，在 Electron中，实现截图方案一般有两种。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["一种是通过 Electron 提供的截取屏幕 API ",(0,s.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/api/desktop-capturer",target:"_blank",rel:"noopener noreferrer",children:"desktopCapturer"}),"，获取每个屏幕（存在外接显示器的情况）和每个窗口的图像信息，传递给浏览器的 ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en/docs/Web/API/MediaDevices/getUserMedia",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"navigator.mediaDevices.getUserMedia"})}),"\xa0API 获取桌面视频的媒体源的信息，在获取到整个屏幕图像后再通过 canvas 标签绘制截图区域。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"第二种方式是使用操作系统自带的截图功能或者调用三方可执行截图文件（比如 Windows 的 .exe 文件）来实现屏幕的截图。"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"接下来，我们详细介绍这两种截图方式的实现原理。"}),"\n",(0,s.jsxs)(n.h2,{id:"electron-手动实现截图能力",children:["Electron 手动实现截图能力",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#electron-手动实现截图能力",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在介绍实现截图功能前，我们首先需要认识两个 API。"}),"\n",(0,s.jsxs)(n.h3,{id:"desktopcapturer-api",children:["desktopCapturer API",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#desktopcapturer-api",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Electron 中的 ",(0,s.jsx)(n.code,{children:"desktopCapturer"})," 对象是一个用于获取屏幕截图和视频流的 API。它允许你从用户的屏幕上捕获图像，并且可以用于创建截图工具、屏幕录制应用程序等。"]}),"\n",(0,s.jsxs)(n.p,{children:["这个对象返回了\xa0",(0,s.jsx)(n.code,{children:"Promise<DesktopCapturerSource[]>"}),"\xa0这样一个结果，其中 ",(0,s.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/api/structures/desktop-capturer-source",target:"_blank",rel:"noopener noreferrer",children:"DesktopCapturerSource"}),"\xa0是一个对象类型的数组，每个\xa0",(0,s.jsx)(n.code,{children:"DesktopCapturerSource"}),"\xa0代表一个屏幕或一个可以被捕获的独立窗口。"]}),"\n",(0,s.jsxs)(n.h3,{id:"navigatormediadevicesgetusermedia",children:["navigator.mediaDevices.getUserMedia",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#navigatormediadevicesgetusermedia",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"navigator.mediaDevices.getUserMedia()"})," 是一个 Web API，允许网页或应用程序访问用户的摄像头和麦克风，以便获取视频流、音频流或者二者的组合。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getUserMedia()"}),"\xa0的第一个参数是一个对象，用于指定你要访问的每种媒体类型的详细信息和要求。例如，如果你要访问摄像头，第一个参数应为\xa0",(0,s.jsx)(n.code,{children:"{video: true}"}),"。要同时使用麦克风和摄像头，第一个参数为",(0,s.jsx)(n.code,{children:"{video: true, audio: true}"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<video style=\"width: 100vw;height: 100vh\" autoplay></video>\n\n<script>\n  navigator.mediaDevices.getUserMedia({video: true}).then((stream) => {\n    const video = document.querySelector('video');\n    // 为 video 标签添加实时视频流\n    video.srcObject = stream;\n  \n    // 当浏览器已经获取了视频的基本元数据（比如视频的长度、尺寸、帧率等信息），并已准备好开始播放时，这个事件就会被触发。\n    video.onloadedmetadata = function(e) {\n      // todo\n    };\n  }).catch((e) => {\n    // 异常处理\n    console.log('Reeeejected!', e);\n  });\n<\/script>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["通过以上代码，我们就可以实现实时捕捉电脑摄像头的音视频并播放到 ",(0,s.jsx)(n.code,{children:"<video>"})," 标签中。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getUserMedia()"}),"\xa0的第一个参数还可用于指定对返回的媒体流的更多要求（或限制条件）。例如，你还可以通过 ",(0,s.jsx)(n.code,{children:"video.mandatory"})," 参数指定视频的来源和尺寸："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"navigator.mediaDevices.getUserMedia({\n  audio: false,\n  video: {\n    mandatory: {\n      // 视频源来自 desktop\n      chromeMediaSource: 'desktop',\n      // 屏幕 id\n      chromeMediaSourceId: id,\n      // 指定尺寸\n      minWidth: 1280,  \n      maxWidth: 1280,  \n      minHeight: 720,  \n      maxHeight: 720\n    }\n  }\n})\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"结合-desktopcapturer-和-getusermedia",children:["结合 desktopCapturer 和 getUserMedia",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结合-desktopcapturer-和-getusermedia",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"通过以上的介绍，我们大致了解了这两个 API 的用处，下面我们就来详细介绍一下截屏的思路："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["首先通过调用 ",(0,s.jsx)(n.code,{children:"desktopCapturer"})," API 来获取所有屏幕信息。"]}),"\n",(0,s.jsxs)(n.li,{children:["将 ",(0,s.jsx)(n.code,{children:"desktopCapturer"})," 返回结果中的 ",(0,s.jsx)(n.code,{children:"sourceId"}),"（一个 window 或者 screen 的唯一标识）传递给 ",(0,s.jsx)(n.code,{children:"getUserMedia"}),"，作为 ",(0,s.jsx)(n.code,{children:"chromeMediaSourceId"})," 的约束条件。"]}),"\n",(0,s.jsxs)(n.li,{children:["调用 ",(0,s.jsx)(n.code,{children:"getUserMedia"})," API 来实时获取桌面屏幕视频流。"]}),"\n",(0,s.jsx)(n.li,{children:"获取视频流第一帧的图像进行截图操作。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"其中，1-3 比较好实现，我们一起来看一下代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<template>\n  <video style=\"width: 100vw;height: 100vh;\" />\n</template>\n\n<script setup>\nimport {desktopCapturer, screen} from '@electron/remote';\n\n// 获取屏幕列表\nconst displays = screen.getAllDisplays();\n\ndesktopCapturer.getSources({ types: ['screen'] }).then(async sources => {\n  for (const source of sources) {\n    // 找到屏幕信息\n    const display = displays.filter((d) => +source.display_id === d.id)[0]\n    try {\n      // 获取屏幕视频流\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: {\n          mandatory: {\n            chromeMediaSource: 'desktop',\n            chromeMediaSourceId: source.id,\n            minWidth: display.bounds.width,\n            maxWidth: display.bounds.width * display.scaleFactor,\n            minHeight: display.bounds.height,\n            maxHeight: display.bounds.height * display.scaleFactor\n          }\n        }\n      })\n      handleStream(stream)\n    } catch (e) {\n      handleError(e)\n    }\n  }\n  function handleStream (stream) {\n    const video = document.querySelector('video')\n    video.srcObject = stream\n    // 播放视频流\n    video.onloadedmetadata = () => video.play()\n  }\n  \n  function handleError (e) {\n    console.log(e)\n  }\n})\n<\/script>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["以上代码的作用是获取屏幕信息，使用 ",(0,s.jsx)(n.code,{children:"navigator.mediaDevices.getUserMedia"})," 捕获屏幕视频流，并将视频流显示在 ",(0,s.jsx)(n.code,{children:"<video>"})," 元素中，效果如下："]}),"\n",(0,s.jsx)(n.p,{children:"接下来就是第 4 步，要开始截图了，先说一下原理："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"窗口层："})," 为每个显示器创建一个透明的、全屏的、置顶的 BrwoserWindow 窗口。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"图像层："})," 然后将 ",(0,s.jsx)(n.code,{children:"getUserMedia"})," 捕捉的图像信息生成图片后传递到 ",(0,s.jsx)(n.code,{children:"BrwoserWindow"})," 窗口中的 ",(0,s.jsx)(n.code,{children:"<img>"})," 标签中，这样就会模拟出一个虚拟桌面。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"蒙版层："})," 在图片上再覆盖一层灰色透明的蒙版，模拟截图黑屏的效果。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"操作层："})," 全屏窗口中监听 ",(0,s.jsx)(n.code,{children:"mousedown"}),"、",(0,s.jsx)(n.code,{children:"mousemove"})," 事件，然后通过一个 canvas 动态绘制截图区域，并展示出对应的操作（比如文字标注、区域尺寸）。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"以上步骤如果理解起来比较困难，我制作了一个表述层级关系的效果图来帮助你理解："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"对应到代码实现："}),"\n",(0,s.jsxs)(n.h4,{id:"1-创建透明的全屏的置顶的-brwoserwindow-窗口",children:["1. 创建透明的、全屏的、置顶的 BrwoserWindow 窗口",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-创建透明的全屏的置顶的-brwoserwindow-窗口",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 主进程中\nfunction createWindow() {\n  // 获取屏幕数\n  let displays = screen.getAllDisplays();\n  \n  mainWindows = displays.map(display => {\n    let winOption = {\n      // 全屏\n      fullscreen: true,\n      width: display.bounds.width,\n      height: display.bounds.height,\n      // 设置位置\n      x: display.bounds.x,\n      y: display.bounds.y,\n      // 透明无边框\n      frame: false,\n      transparent: true,\n      // 不允许尺寸调整\n      movable: false,\n      resizable: false,\n      hasShadow: false,\n      enableLargerThanScreen: true,\n      webPreferences: {\n        // 允许html中运行nodejs\n        nodeIntegration: true,\n        sandbox: false,\n        webSecurity: false,\n        contextIsolation: false,\n      }\n    }\n    \n    // 对Windows的基本主题和高对比度主题单独处理，因为它不支持transparent\n    if (iswin32) {\n      winOption.opacity = 0.0;\n    }\n    \n    let mainWindow = new BrowserWindow(winOption);\n    \n    // 置顶\n    mainWindow.setAlwaysOnTop(true);\n    // 加载一个模拟桌面页面\n    mainWindow.loadURL(winURL);\n    return mainWindow;\n  });\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"以上代码核心功能就是创建了多个透明的 Electron 窗口，每个窗口对应一个显示器，窗口的大小和位置需要正好覆盖完整个显示器。"}),"\n",(0,s.jsxs)(n.h4,{id:"2-生成图像",children:["2. 生成图像",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-生成图像",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const ratio = window.devicePixelRatio || 1;\n// 获取图像层\nconst imgDom = doucment.body.getElementById('screenImg');\n\nfunction handleStream(stream) {\n  let video = document.createElement('video');\n  \n  video.addEventListener('loadedmetadata', () => {\n    video.play();\n    // 创建canvas\n    let canvas = document.createElement('canvas');\n    // 高清处理\n    canvas.width = currentWidth * ratio;\n    canvas.height = currentHeight * ratio;\n    canvas.style.width = currentWidth + 'px';\n    canvas.style.height = currentWidth + 'px';\n    \n    let ctx = canvas.getContext('2d');\n    ctx.scale(ratio, ratio)\n    \n    // 视频流绘制到 canvas 中\n    ctx.drawImage(video, 0, 0, currentWidth, currentHeight);\n    video.remove();\n    \n    // 生成 img base64 格式图像并设置到图像层\n    imgDom.src = canvas.toDataURL();\n    \n    // ...\n    \n  }, false);\n  \n  video.srcObject = stream;\n  video.style.visibility = 'hidden';\n  document.body.appendChild(video);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这段代码的主要目的是将通过 ",(0,s.jsx)(n.code,{children:"getUserMedia"})," 获取到的屏幕视频流以 ",(0,s.jsx)(n.code,{children:"<video>"})," 的形式加载，然后在 Canvas 中绘制视频帧，并将绘制后的图像以 base64 格式设置到页面的图像层上显示。"]}),"\n",(0,s.jsxs)(n.h4,{id:"3-模拟截图桌面",children:["3. 模拟截图桌面",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-模拟截图桌面",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'\x3c!--蒙版层--\x3e\n<div id="mask" class="mask"></div>\n\x3c!--操作层--\x3e\n<canvas id="canvas" class="canvas"></canvas>\n\x3c!--图像层--\x3e\n<img id="screenImg" class="screen-img" src="">\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这里的蒙版层是一个固定定位具有透明度的全屏 ",(0,s.jsx)(n.code,{children:"div"})," 标签："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".mask {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: #000;\n  z-index: 10;\n  opacity: .3;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["操作层 ",(0,s.jsx)(n.code,{children:"canvas"})," 默认是隐藏的，需要等到用户触发鼠标动作后动态显示区域大小："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".canvas {\n  position: fixed;\n  z-index: 30;\n  background: #fff;\n  display: none;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"图像层是在蒙版层和操作层之间的内容，主要用来加载一个全屏桌面的图片："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".screen-img{\n  position: fixed;\n  left: 0;\n  top: 0;\n  opacity: .7;\n  z-index: 20;\n  cursor: crosshair;\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"4-模拟截图鼠标动作",children:["4. 模拟截图鼠标动作",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-模拟截图鼠标动作",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:" document.addEventListener('mousedown', mousedownFun, false);\n document.addEventListener('mousemove', mousemoveFun, false);\n document.addEventListener('mouseup', mouseupFun, false);\n \n// 拿 mousemoveFun 举例\nmousemoveFun = e => {\n e.stopPropagation();\n e.preventDefault();\n \n // 定义起点坐标\n let nowX = e.clientX;\n let nowY = e.clientY;\n\n // 边界控制，不允许从一个屏幕滑到另一个屏幕\n if(nowX >= currentWidth) {\n  nowX = currentWidth;\n }\n if(nowY >= currentHeight) {\n  nowY = currentHeight;\n }\n // 移动canvas\n if (canMove) {\n  // 计算移动量\n  let left = nowX - moveStartX;\n  let top = nowY - moveStartY;\n\n  // 边界控制\n  left = limit(left, top, canvasWidth, canvasHeight).left;\n  top = limit(left, top, canvasWidth, canvasHeight).top;\n\n  // 显示操作层位置\n  canvasDom.style.cssText += 'left: ' + left + 'px; top: ' + top + 'px;';\n  // 绘制区域图像\n  canvasDomCtx.drawImage(imgDom, -left * ratio, -top * ratio);\n }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码也很简单，当鼠标 ",(0,s.jsx)(n.code,{children:"mousemove"})," 的时候，动态计算需要截屏的大小，并将区域矩形图片传递给 ",(0,s.jsx)(n.code,{children:"canvas"})," 进行动态绘制，以模拟出截屏的效果："]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["完整代码见：",(0,s.jsx)(n.a,{href:"https://github.com/muwoo/desktop-capture-demo",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/muwoo/desktop-capture-demo"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这样，我们就实现了一个“模拟截图的功能”，这个“模拟截图”因为是纯前端绘制，所以最大的优势就是我们可以自定义一些操作层的使用方式，比如画笔、取色、文案绘制……但也会有一些其他问题的产生："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"每次截图都需要创建模拟窗口，对于 Electron 而言，创建窗口是需要耗时的。（可以用窗口池解决，提前预先创建窗口，但容易占用不少内存。）"}),"\n",(0,s.jsxs)(n.li,{children:["Linux 只支持单屏幕截图。由于 Chrome 内核的原因，Linux 系统无法区分多个屏幕，它所有的屏幕 ID 都是 ",(0,s.jsx)(n.code,{children:"0:0"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:["使用 ",(0,s.jsx)(n.code,{children:"Canvas"})," 绘制的屏幕在高分辨率的显示器中，图片总是会模糊。"]}),"\n",(0,s.jsxs)(n.li,{children:["使用 ",(0,s.jsx)(n.code,{children:"Canavs"})," 生成图像层的时候，比较耗时，越高分辨率耗时越高。"]}),"\n",(0,s.jsx)(n.li,{children:"毕竟是模拟窗口，在 macOS 上，还是可以对窗口进行滑屏操作，体验非常不好。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"接下来我们接着介绍另外一种截图实现方式。"}),"\n",(0,s.jsxs)(n.h2,{id:"使用三方能力",children:["使用三方能力",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用三方能力",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["使用三方能力是一种取巧的方式，利用的是 Electron 可以通过 ",(0,s.jsx)(n.code,{children:"nodejs"})," 调用 ",(0,s.jsx)(n.code,{children:"Shell"})," 脚本的方式来执行命令行命令。"]}),"\n",(0,s.jsxs)(n.h3,{id:"macos",children:["MacOS",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#macos",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"MacOS"})," 中，我们调用系统自带的 ",(0,s.jsx)(n.code,{children:"screencapture"})," 命令来实现截图："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { clipboard, app } from 'electron'\nconst { execFile, exec } = require('child_process')\n\n// 截图方法mac\nexport const handleScreenShots = () => {\n  // 这里咱们设置-c将截图保存到剪切板上\n  exec('screencapture -i -U -c', (error, stdout, stderr) => {\n    // 从剪切板上取到图片\n    const pngs = clipboard.readImage().toPNG()\n    const imgs = 'data:image/png;base64,' + pngs.toString('base64')\n    // mainWin是窗口实例，这里是将图片传给渲染进程\n    mainWin.webContents.send('captureScreen', imgs)\n  })\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"screencapture"})," 是 macOS 系统中的命令行工具，用于捕获屏幕截图或录制屏幕视频。代码中："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-i"}),"：表示进行交互式捕获，允许你选择捕获的区域。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-U"}),"：指示在捕获之前将屏幕图像缓存刷新，以确保最新的屏幕内容。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-c"}),"：将捕获的屏幕图像复制到剪贴板中，而不是保存为文件。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"windows",children:["Windows",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#windows",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"Windows"})," 中，我们可以通过 ",(0,s.jsx)(n.code,{children:"node"})," 调用一些三方提供的截图应用程序，比如 ",(0,s.jsx)(n.a,{href:"https://github.com/xland/ScreenCapture",target:"_blank",rel:"noopener noreferrer",children:"ScreenCapture.exe"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 截图方法windows\nexport const screenWindow = (cb) => {\n  // 内置 ScreenCapture.exe 文件\n  const url = path.resolve(__static, 'ScreenCapture.exe');\n  const screen_window = execFile(url);\n  screen_window.on('exit', (code) => {\n    if (code) {\n      const image = clipboard.readImage();\n      cb && cb(image.isEmpty() ? '' : image.toDataURL());\n    }\n  });\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"效果如下："}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注意：我们在打包的时候，注意不要将 ",(0,s.jsx)(n.code,{children:".exe"})," 文件一起打包到 ",(0,s.jsx)(n.code,{children:".asar"})," 文件中，需要额外地告诉打包工程在打包的时候需要排除 ",(0,s.jsx)(n.code,{children:".exe"})," 文件，详细的操作见：",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304842389166751754",target:"_blank",rel:"noopener noreferrer",children:"《通用篇：electron 应用打包》"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本小节我们详细介绍了 Electron 实现截图的两种方式，一种是通过前端“模拟”截图操作，这种操作最大的优势就是前端可以自定义一些图像操作，但缺点就是性能不佳，体验也不是很好。还有一种就是借助三方能力，虽然解决了性能问题，但是没有办法自定义一些样式和功能。"}),"\n",(0,s.jsx)(n.p,{children:"本小节主要为没有原生开发能力的小伙伴提供了一种折中式的解决方案，如果既想要性能优秀、体验完美、可自定义样式的截图工具，还是需要祭出原生开发的方式。"})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}let t=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC14%E7%AB%A0%E2%80%94%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%9AElectron%E5%AE%9E%E7%8E%B0%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.md"]={toc:[{text:"Electron 手动实现截图能力",id:"electron-手动实现截图能力",depth:2},{text:"desktopCapturer API",id:"desktopcapturer-api",depth:3},{text:"navigator.mediaDevices.getUserMedia",id:"navigatormediadevicesgetusermedia",depth:3},{text:"结合 desktopCapturer 和 getUserMedia",id:"结合-desktopcapturer-和-getusermedia",depth:3},{text:"1. 创建透明的、全屏的、置顶的 BrwoserWindow 窗口",id:"1-创建透明的全屏的置顶的-brwoserwindow-窗口",depth:4},{text:"2. 生成图像",id:"2-生成图像",depth:4},{text:"3. 模拟截图桌面",id:"3-模拟截图桌面",depth:4},{text:"4. 模拟截图鼠标动作",id:"4-模拟截图鼠标动作",depth:4},{text:"使用三方能力",id:"使用三方能力",depth:2},{text:"MacOS",id:"macos",depth:3},{text:"Windows",id:"windows",depth:3},{text:"总结",id:"总结",depth:2}],title:"第14章—实战篇：Electron实现屏幕截图",headingTitle:"第14章—实战篇：Electron实现屏幕截图",frontmatter:{}}}}]);