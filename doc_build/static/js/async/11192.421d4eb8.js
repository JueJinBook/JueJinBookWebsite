"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["11192"],{365133:function(e,r,n){n.r(r),n.d(r,{default:()=>c});var h=n(552676),d=n(740453);let s=n.p+"static/image/851924423422ca6d338195d96d8dea8b.c0ce8c2b.png";function i(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",img:"img",h4:"h4",code:"code",strong:"strong"},(0,d.ah)(),e.components);return(0,h.jsxs)(h.Fragment,{children:[(0,h.jsxs)(r.h1,{id:"54云开发的数据处理",children:["54.云开发的数据处理",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#54云开发的数据处理",children:"#"})]}),"\n",(0,h.jsxs)(r.h2,{id:"84-云开发的数据处理",children:["8.4 云开发的数据处理",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#84-云开发的数据处理",children:"#"})]}),"\n",(0,h.jsx)(r.p,{children:"对于应用开发而言，数据扮演着至关重要的角色，云开发集成了应用开发常用的用户体系、存储服务、数据库服务、云函数后端服务等，在小程序开发时，这些多元化的数据来源又是如何获取，如何与小程序的文件系统、缓存等交互，又是如何被渲染的呢？要开始一个云开发项目应该注意什么问题？"}),"\n",(0,h.jsxs)(r.h3,{id:"841-数据获取的方式",children:["8.4.1 数据获取的方式",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#841-数据获取的方式",children:"#"})]}),"\n",(0,h.jsx)(r.p,{children:"就小程序开发来说，云开发有运行在小程序端的SDK，以及运行在云函数端的SDK，它们都可以对云数据库进行增删改查、对云存储进行文件的上传、下载、删除等，也都可以调用云函数，以及对第三方API发起请求。一个简单的项目甚至我们只需使用到小程序端的SDK就够了，比如上一章创建了一个完整的相册小程序项目，就没有使用云函数。"}),"\n",(0,h.jsx)(r.p,{children:(0,h.jsx)("img",{src:s,alt:"云开发的数据获取"})}),"\n",(0,h.jsx)(r.p,{children:"小程序端SDK获取的数据，以及小程序端调用云函数返回的数据，都会存储到小程序的文件系统、缓存以及数据对象里，以用于功能的实现。因此在我们设计小程序的技术架构时，也要考虑到到底什么时候使用小程序端SDK，什么时候使用云函数端SDK。"}),"\n",(0,h.jsxs)(r.h3,{id:"842-小程序端与云函数端",children:["8.4.2 小程序端与云函数端",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#842-小程序端与云函数端",children:"#"})]}),"\n",(0,h.jsx)(r.p,{children:"小程序端SDK与云函数端SDK虽然有很多相似之处，不过有不少不同的地方，具体表现如下："}),"\n",(0,h.jsxs)(r.h4,{id:"1权限体系",children:["1、权限体系",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1权限体系",children:"#"})]}),"\n",(0,h.jsx)(r.p,{children:"小程序端自带微信用户鉴权和安全规则，用户可以免鉴权登录小程序，在对数据库、云存储操作时受简易权限或安全规则的控制，比如权限设置为仅创建者可读写时，用户A就无法看到或修改用户B创建的数据，保证了小程序端SDK操作云存储、云数据库和云函数等资源时的安全性；而云函数端SDK则拥有云开发资源的最高权限（管理员权限），不受简易权限或安全规则的影响，用户A调用云函数时也能增删改查用户B创建的数据（可以使用云函数的逻辑来限制）。"}),"\n",(0,h.jsx)(r.p,{children:"值得一提的是，只有小程序端SDK调用云函数才能获取用户的登录态，管理端（控制台、云函数）调用云函数是获取不到用户的openid的（如果有需要，可以使用数据库等方式将openid作为参数传入）。"}),"\n",(0,h.jsxs)(r.h4,{id:"2对数据库的增删改查",children:["2、对数据库的增删改查",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#2对数据库的增删改查",children:"#"})]}),"\n",(0,h.jsx)(r.p,{children:"在小程序端直接使用SDK增删改查数据库，相比先调用云函数，再通过云函数来操作数据库来说，前者无论是在速度上（直接对数据库进行crud速度大概快100ms左右），还是在云函数的资源消耗上（后者会消耗云函数的资源使用量GBs、外网出流量）都更优。一般情况下，更加建议使用这种方案。"}),"\n",(0,h.jsx)(r.p,{children:"不过通过云函数来操作数据库相比小程序直接操作数据库来说，一是更加安全（小程序端代码容易被逆向），二是处理更灵活（比如小程序的修改都需要发布并通过审核而云函数端不会），三是更容易跨端（多个小程序可以共用一个云开发环境里的一套云函数代码）。"}),"\n",(0,h.jsx)(r.p,{children:"通常情况下来说，能用小程序端SDK处理的就尽量使用小程序端SDK，将数据的处理放在小程序端可以有效的减轻云函数的压力，提升处理速度，也降低使用成本。"}),"\n",(0,h.jsxs)(r.h4,{id:"3api的支持",children:["3、API的支持",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#3api的支持",children:"#"})]}),"\n",(0,h.jsx)(r.p,{children:"比如实时数据推送watch方法只支持小程序端SDK，而聚合查询里的联表查询lookup就只能在云函数端进行；如果数据库使用的是简易权限控制，小程序端就无法对数据库进行批量更新或删除（where.update、where.remove）。"}),"\n",(0,h.jsxs)(r.h4,{id:"4网络请求",children:["4、网络请求",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#4网络请求",children:"#"})]}),"\n",(0,h.jsxs)(r.p,{children:["在小程序端使用",(0,h.jsx)(r.code,{children:"wx.request()"}),"发起的网络请求只支持https，不支持http和ip，且域名需要备案，而在云函数端，我们可以使用axios、got等第三方模块发起网络请求，它不仅支持https、http、ip等，而且域名也不需要备案。此外，云函数也可以有固定的ip，尤其是数据库、公众号开发等对ip白名单有一定要求的情况。"]}),"\n",(0,h.jsxs)(r.h4,{id:"5云调用以及定时触发器",children:["5、云调用以及定时触发器",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#5云调用以及定时触发器",children:"#"})]}),"\n",(0,h.jsx)(r.p,{children:"云调用是云开发提供的基于云函数使用小程序、腾讯云开放接口的能力，比如订阅消息、云支付、图像处理等，尽管云调用也有https调用，不过云调用更加安全方便。"}),"\n",(0,h.jsx)(r.p,{children:"小程序端SDK的调用只有在用户打开和使用小程序的情况下才能执行，而云函数可以脱离小程序，在定时触发器的作用下定时/定期的执行一些任务。"}),"\n",(0,h.jsxs)(r.h4,{id:"6后端服务",children:["6、后端服务",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#6后端服务",children:"#"})]}),"\n",(0,h.jsx)(r.p,{children:"云函数不仅可以在wx-server-sdk模块的支持下使用云函数端SDK调用云开发环境里的资源，还可以安装一些Node.js的模块，来为小程序提供一些后端服务，比如收发邮件、短信、通知消息，连接MySQL、Redis等数据库，进行图像、音视频等的处理等等（在《用云函数实现后端能力》会介绍）。"}),"\n",(0,h.jsxs)(r.h3,{id:"843-云开发的数据规划",children:["8.4.3 云开发的数据规划",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#843-云开发的数据规划",children:"#"})]}),"\n",(0,h.jsx)(r.p,{children:"当我们要开发一个功能比较复杂的小程序时，首先就要对功能函数模块和数据、数据库进行一个合理的规划与设计。"}),"\n",(0,h.jsxs)(r.p,{children:["在相册小程序，我们使用了数据库的反范式化设计，将单个用户所需要的数据都嵌套在一个文档里，不过这种数据库的设计方式不适用于关系比较复杂的项目，比如博客、商城、CRM等相关的小程序。这时，我们需要将数据分散到不同的集合里，不同的集合可以通过唯一的ID来相互引用（使用联表查询或跨表多次查询），也就是",(0,h.jsx)(r.strong,{children:"范式化设计"}),"。"]}),"\n",(0,h.jsxs)(r.p,{children:["当我们要进行范式化设计时，就需要和关系型数据库一样，需要先确定",(0,h.jsx)(r.strong,{children:"实体"}),"（比如博客的文章、用户）、",(0,h.jsx)(r.strong,{children:"实体的属性"}),"（比如文章的标题，用户的用户名）、",(0,h.jsx)(r.strong,{children:"实体之间的联系"}),"（比如用户与文章的关系，是不是作者、收藏者、评论者以及指定唯一标识的字段，如_id、id、openid等）以及",(0,h.jsx)(r.strong,{children:"实体与联系之间的约束"}),"（比如只有登录的用户才能评论），并做出理清了实体、属性、关系等联系的E-R图，E-R图做出来之后，基础的集合与记录的结构就清晰了，最后根据E-R图来建立集合。文档型数据库并不需要像关系型数据库一样需先建好字段并约束字段的长度、类型等；也可以不必建立专门的联系表。"]}),"\n",(0,h.jsx)(r.p,{children:"当然我们不可过度追求范式化，范式化会降低数据的读取速度，会出现为了读取数据需要跨多表甚至要要联表的情况。根据实际情况采取一定的反范式化设计，而反范式化就会增加一些冗余字段，用空间换取时间的做法在一些情况下是有必要的。反范式化的设计在数据一致性的处理上会比较麻烦，同时嵌套数组、对象有时候则要借助于聚合操作才能获取到值。在后面数据库的高阶用法章节里，我们还会提到数据库的设计的问题。"}),"\n",(0,h.jsx)(r.p,{children:"云开发数据库这种文档型的非关系型数据库，我们在设计时，即使是采用范式化设计，也并不需要像关系型数据库那样将所有的关系都分散成二维表，也就是不会做绝对的范式化，根据功能需要我们既可以将有些数据分散到多个集合里，也可以将有些数据以内嵌数组或对象的形式存储到集合的一个字段里，相比于关系型数据库来说，处理起来非常灵活。而我们到底应该怎么安排这些数据，取决于你对小程序功能的规划、控制数据访问的安全模式以及如何更有效提高数据请求的性能。"}),"\n",(0,h.jsxs)(r.h3,{id:"844-小程序的工程化",children:["8.4.4 小程序的工程化",(0,h.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#844-小程序的工程化",children:"#"})]}),"\n",(0,h.jsxs)(r.p,{children:["要开发一个相对比较复杂的小程序项目，在我们对小程序的数据流、交互功能、数据库设计有了清晰的认识后，就需要了解小程序的工程化，工程化主要包含",(0,h.jsx)(r.strong,{children:"规范化"}),"、",(0,h.jsx)(r.strong,{children:"组件化"}),"、",(0,h.jsx)(r.strong,{children:"模块化"}),"。"]}),"\n",(0,h.jsx)(r.p,{children:"在我们进行正式的小程序开发之前，就应该对项目的目录结构、文件命名、函数命名、接口封装、代码格式等制定一个规范，这样的规范化有助于我们实际开发时就不致于混乱。"}),"\n",(0,h.jsxs)(r.p,{children:["当页面的逻辑越来越多，一个小程序页面的代码过于复杂，或者同样的页面逻辑会在不同的页面重复使用，这个时候就需要我们会页面的功能或逻辑进行拆分，拆分时注意权衡细粒度与通用性，这方面的具体内容可以参考小程序技术文档里的",(0,h.jsx)(r.a,{href:"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/",target:"_blank",rel:"noopener noreferrer",children:"自定义组件"}),"。"]}),"\n",(0,h.jsx)(r.p,{children:"而模块化指的是将功能复杂的函数代码、CSS代码等划分成各司其职且又相互依赖的模块，比如前面介绍的js模块化（通过module.exports暴露接口和require引入公共代码）等。"})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,d.ah)(),e.components);return r?(0,h.jsx)(r,{...e,children:(0,h.jsx)(i,{...e})}):i(e)}let c=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F54.%E4%BA%91%E5%BC%80%E5%8F%91%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.md"]={toc:[{text:"8.4 云开发的数据处理",id:"84-云开发的数据处理",depth:2},{text:"8.4.1 数据获取的方式",id:"841-数据获取的方式",depth:3},{text:"8.4.2 小程序端与云函数端",id:"842-小程序端与云函数端",depth:3},{text:"1、权限体系",id:"1权限体系",depth:4},{text:"2、对数据库的增删改查",id:"2对数据库的增删改查",depth:4},{text:"3、API的支持",id:"3api的支持",depth:4},{text:"4、网络请求",id:"4网络请求",depth:4},{text:"5、云调用以及定时触发器",id:"5云调用以及定时触发器",depth:4},{text:"6、后端服务",id:"6后端服务",depth:4},{text:"8.4.3 云开发的数据规划",id:"843-云开发的数据规划",depth:3},{text:"8.4.4 小程序的工程化",id:"844-小程序的工程化",depth:3}],title:"54.云开发的数据处理",headingTitle:"54.云开发的数据处理",frontmatter:{}}}}]);