"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["92348"],{746341:function(e,n,c){e.exports=c.p+"static/image/1e0309c5ad61943648a2e43791744978.c1df9187.webp"},93696:function(e,n,c){e.exports=c.p+"static/image/665849c1cb28dc61387a2f9636c05691.fe811354.webp"},234684:function(e,n,c){e.exports=c.p+"static/image/be23631286693935a179bad5468db147.6f57c6a4.webp"},124315:function(e,n,c){e.exports=c.p+"static/image/be4bd2a92acbd8bc868f680005a56475.eab4fec1.webp"},79334:function(e,n,c){c.r(n),c.d(n,{default:()=>F});var i=c(552676),r=c(740453);let t=c.p+"static/image/4b26a0c86a28150daee893084c29297a.aa69b756.webp",s=c.p+"static/image/6a19728bd09786270950df9ce7e75f8d.67b67249.webp",a=c.p+"static/image/02f448c04459ae5bb0162646a6d0ddd9.da3e8312.webp",l=c.p+"static/image/1c92ef4e461c3d02a06e0d91e8c3d1e4.e2681df8.webp",d=c.p+"static/image/70f3f2ba2f672adf698b437ff3ffaad1.1568c177.webp",p=c.p+"static/image/3e6fb34a3569e2de7ec755a3697b1c81.4a724f95.webp",h=c.p+"static/image/6426bd9a95fdcf07367f89c1709c8a53.c09e9ca3.webp",b=c.p+"static/image/54777c3e8b4b11423081005c4d2fa682.749c2e58.webp",j=c.p+"static/image/d6d4e52ec8eb70d4a6e2f995d47701aa.a03e2adb.webp";var x=c(746341);let f=c.p+"static/image/f993334683f75740c4590c759b8a261f.dff4a7fe.gif",o=c.p+"static/image/7990241370783457cd6ea2ee36aeb553.26a5c4e1.webp",m=c.p+"static/image/4626ce694eea455b9c86201758de3f04.649abe52.gif",g=c.p+"static/image/4b59746ebc72859562348207218678ac.28deccd0.webp";var u=c(93696);let R=c.p+"static/image/6d6c521d591266ddf241fb454d436b1e.b9cccaf5.webp",E=c.p+"static/image/61b821da71bf11a947dbd85e93e1a2ab.5d2a524d.webp";var w=c(234684);let k=c.p+"static/image/dede72c9c50672b04f189b6fb5994b23.5bc49c64.webp",_=c.p+"static/image/9881a9fbf884710bf98b7fbe7a072b7d.eb277f28.webp";var v=c(124315);let A=c.p+"static/image/1dc7132d8c786a9f1a55100cf0b24522.6c3b9ada.webp",S=c.p+"static/image/fa297eb4e09cf9144ec3bfd44b743846.795450de.webp";function M(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",strong:"strong",ul:"ul",li:"li",h2:"h2"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"第62章手写minireact思路分析",children:["第62章—手写MiniReact：思路分析",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第62章手写minireact思路分析",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\uFEFF我们写了很多 React 组件，也学了一些 React 生态的库，用 React 这方面没啥问题了。"}),"\n",(0,i.jsx)(n.p,{children:"但想要深入掌握 React，理解它的实现原理也是必要的。"}),"\n",(0,i.jsx)(n.p,{children:"而理解 React 实现原理的最好方式就是写一个 Mini React。"}),"\n",(0,i.jsx)(n.p,{children:"这节我们先来分析下思路。"}),"\n",(0,i.jsx)(n.p,{children:"我们在组件里通过 JSX 描述页面："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"jsx 会被 babel 或者 tsc 等编译器编译成 render function，也就是类似 React.createElement 这种："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以之前写 React 组件都必须有一行 import * as React from 'react'，因为编译后会用到 React 的 api。"}),"\n",(0,i.jsxs)(n.p,{children:["你可以在 ",(0,i.jsx)(n.a,{href:"https://babeljs.io/repl",target:"_blank",rel:"noopener noreferrer",children:"babel 的 playground"})," 试一下。"]}),"\n",(0,i.jsx)(n.p,{children:"但后来改为了这种 render function："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"由 babel、tsc 等编译工具自动引入一个 react/jsx-runtime 的包，"}),"\n",(0,i.jsx)(n.p,{children:"把这里的 React Runtime 切换成自动引入的就可以看到："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以现在写组件就可以不引入 React 了。"}),"\n",(0,i.jsx)(n.p,{children:"然后 render function 执行后产生 React Element 对象，也就是常说的虚拟 dom。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"也就是这样的流程："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"vdom （React Element）是一个通过 chilren 串联起来的树。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"之后 React 会把 React Element 树转换为 fiber 结构，它是一个链表："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"React Element 只有 children 属性来链接父子节点，但是转为 fiber 结构之后就有了 child、sibling、return 属性来关联父子、兄弟节点。"}),"\n",(0,i.jsx)(n.p,{children:"有同学说，这 fiber 结构看起来不也是一棵树么，为啥叫链表？"}),"\n",(0,i.jsx)(n.p,{children:"因为按照 child、sibling、sibling、return、sibling、return 之类的遍历顺序，可以把整个 vdom 树变成线性的链表结构："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这样一个循环就可以处理完。"}),"\n",(0,i.jsx)(n.p,{children:"react 在处理 fiber 链表的时候通过一个叫 workInProgress 的指针指向当前 fiber 节点。"}),"\n",(0,i.jsx)(n.p,{children:"而 react 之所以能实现并发特性，就是基于 fiber 的链表结构。"}),"\n",(0,i.jsx)(n.p,{children:"因为之前的 React Element 树里只有 children，没有 parent、sibling 信息，这样只能一次性处理完，不然中断了就找不到它的 parent 和 sibling 节点了。"}),"\n",(0,i.jsx)(n.p,{children:"但是 fiber 不同，它额外保存了 return、sibling 节点，这样就算打断了也可以找到下一个节点继续处理。"}),"\n",(0,i.jsx)(n.p,{children:"所以现在完全可以先处理这个 fiber 树的某几个节点，然后暂停，处理其它的 fiber 树，之后再回来继续处理："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这也就是 React 所谓的并发。"}),"\n",(0,i.jsx)(n.p,{children:"浏览器里是通过 Event Loop 跑一个个 task。"}),"\n",(0,i.jsx)(n.p,{children:"如果某个 task 执行时间过长，就会阻塞渲染，导致丢帧，也就是页面卡顿。"}),"\n",(0,i.jsx)(n.p,{children:"之前直接基于 React Element 递归渲染的时候，很容易计算量过多导致页面卡顿。"}),"\n",(0,i.jsx)(n.p,{children:"而改成 fiber 结构再渲染之后，可以在每次渲染 fiber 节点之前判断是否超过一定的时间间隔，是的话就放到下个任务里跑，这样就不会阻塞渲染了。"}),"\n",(0,i.jsx)(n.p,{children:"有个两种架构对比的例子，我们来试一下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://claudiopro.github.io/react-fiber-vs-stack-demo/stack.html",target:"_blank",rel:"noopener noreferrer",children:"https://claudiopro.github.io/react-fiber-vs-stack-demo/stack.html"})}),"\n",(0,i.jsx)(n.p,{children:"先看下之前的："}),"\n",(0,i.jsx)(n.p,{children:"用 Performance 录制下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"可以看到有很多超过 50ms 的长任务："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"再看下 fiber 架构版本的 react"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://claudiopro.github.io/react-fiber-vs-stack-demo/fiber.html",target:"_blank",rel:"noopener noreferrer",children:"https://claudiopro.github.io/react-fiber-vs-stack-demo/fiber.html"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"可以看到，每个任务都是固定的时间内跑完的。"}),"\n",(0,i.jsx)(n.p,{children:"这就是 react 的时间分片机制。"}),"\n",(0,i.jsx)(n.p,{children:"怎么实现的呢？"}),"\n",(0,i.jsx)(n.p,{children:"很简单，fiber 链表的处理是可以打断的，每次处理一个节点："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后处理下个节点之前判断下当前时间片还有没有空余时间，有的话继续 performUnitOfWork 处理下个 fiber 节点。"}),"\n",(0,i.jsx)(n.p,{children:"否则放到下一次任务里跑。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这个时间片的判断就是通过当前时间和任务开始时间点的差值。"}),"\n",(0,i.jsx)(n.p,{children:"体会到 fiber 架构的好处了么？"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"通过记录 parent、slibling 信息，让树变成链表，可以打断。每次处理一个 fiber 节点，处理每个 fiber 节点前判断是否到了固定的时间间隔，也就是时间分片，通过时间分片把处理 fiber 的过程放到多个任务里跑，这样页面内容多了也不会导致卡顿。"})}),"\n",(0,i.jsx)(n.p,{children:"我们实现 Mini React 的话，这个时间分片机制可以直接用浏览器的 requestIdleCallback 的 api 来做。"}),"\n",(0,i.jsx)(n.p,{children:"知道了 fiber 架构的好处之后，我们继续来看 React 渲染流程。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"JSX 通过 babel、tsc 等编译成 render function，执行后变成 React Element 的树。"}),"\n",(0,i.jsx)(n.p,{children:"然后 React Element 转成 fiber 结构，这个过程叫做 reconcile。"}),"\n",(0,i.jsx)(n.p,{children:"之前 React Element 是这样的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"会变成这样的 fiber 节点："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"之后会根据 fiber 的类型做不同的处理："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"function 组件、Provider、Lazy 组件等类型的 fiber 节点，都会做相应的处理。"}),"\n",(0,i.jsx)(n.p,{children:"比如 function 组件的 fiber 节点，会调用函数，拿到返回值，之后继续 reconcile 它的 children："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"当然，reconcile 并不只是创建新的 fiber 节点，当更新的时候，还会和之前的 fiber 节点做 diff，判断是新增、修改、还是删除，然后打上对应的标记。"}),"\n",(0,i.jsx)(n.p,{children:"reconcile 完之后，fiber 链表也就构建好了，并且在每个 fiber 节点上保存了当前一些额外的信息。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:s,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"比如 function 组件要执行的 effect 函数。"}),"\n",(0,i.jsx)(n.p,{children:"之后会再次遍历构建好的这个 fiber 链表，处理其中的 effect，根据增删改的标记来更新 dom，这个阶段叫做 commit。"}),"\n",(0,i.jsx)(n.p,{children:"这样，React 的渲染流程就结束了。"}),"\n",(0,i.jsx)(n.p,{children:"整体分为两大阶段："}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"render 阶段"}),"：把 React Element 树（也可以叫 vdom） 转成 fiber 链表的 reconcile 过程，由 Scheduler 负责调度，通过时间分片来把计算分到多个任务里去。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"commit 阶段"}),"：reconcile 结束就有了完整的 fiber 链表，再次遍历这个 fiber 链表，执行其中的 effect、增删改 dom等。"]}),"\n",(0,i.jsx)(n.p,{children:"其实 commit 阶段也分成了三个小阶段："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"before mutation"}),"：操作 dom 之前"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"mutation"}),"：操作 dom"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"layout"}),"：操作 dom 之后。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"比如 useEffect 的 effect 函数会在 before mutation 前异步调度执行，而 useLayoutEffect 的 effect 函数是在 layout 阶段同步执行。"}),"\n",(0,i.jsx)(n.p,{children:"React 团队按照操作 dom 前后来分了三个小阶段，更清晰了一点。"}),"\n",(0,i.jsx)(n.p,{children:"再就是 ref，在 mutaion 阶段更新了 dom，所以在 layout 阶段就可以拿到 ref 了。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"当然，我们实现的时候对 commit 阶段不用分的那么细。"}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"这节我们简单分析了下 React 的渲染流程。"}),"\n",(0,i.jsx)(n.p,{children:"JSX 通过 babel、tsc 等编译器编译成 render function，然后执行后产生 React Element 的树。"}),"\n",(0,i.jsx)(n.p,{children:"React Element 的树会转成 fiber 链表，这个过程叫做 reconcile，由 React 的 Scheduler 调度。"}),"\n",(0,i.jsx)(n.p,{children:"reconcile 每次只处理一个 fiber 节点，通过时间分片把 reconcile 的过程分到多个任务跑，这样  fiber 树再大也不会阻塞渲染。"}),"\n",(0,i.jsx)(n.p,{children:"reconcile + schedule 这个过程叫做 render 阶段，而之后会进入 commit 阶段。"}),"\n",(0,i.jsx)(n.p,{children:"commit 阶段会遍历构建好的 fiber 链表，执行 dom 操作，还有函数组件的 effect 等。"}),"\n",(0,i.jsx)(n.p,{children:"它按照更新 dom 前后，分了 before mutation、mutation、layout 三个小阶段。"}),"\n",(0,i.jsx)(n.p,{children:"这就是 React 的 fiber 架构的好处和渲染流程，下节我们按照这个流程来写下 Mini React。"})]})}function y(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(M,{...e})}):M(e)}let F=y;y.__RSPRESS_PAGE_META={},y.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC62%E7%AB%A0%E2%80%94%E6%89%8B%E5%86%99MiniReact%EF%BC%9A%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第62章—手写MiniReact：思路分析",headingTitle:"第62章—手写MiniReact：思路分析",frontmatter:{}}}}]);