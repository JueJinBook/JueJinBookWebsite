"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["18768"],{345466:function(e,n,i){i.r(n),i.d(n,{default:()=>c});var r=i(552676),s=i(740453);function l(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",ol:"ol",pre:"pre",blockquote:"blockquote"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"3go-api-开发环境配置",children:["3Go API 开发环境配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3go-api-开发环境配置",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"go-命令安装",children:["Go 命令安装",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#go-命令安装",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Go 有多种安装方式，比如 Go 源码安装、Go 标准包安装、第三方工具（yum、apt-get 等）安装。本小册 API 运行在 Linux 服务器上，选择通过标准包来安装 Go 编译环境。Go 提供了每个平台打好包的一键安装，这些包默认会安装到如下目录：",(0,r.jsx)(n.code,{children:"/usr/local/go"}),"。当然你可以改变它们的安装位置，但是改变之后你必须在你的环境变量中设置如下两个环境变量："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"GOROOT：GOROOT 就是 Go 的安装路径"}),"\n",(0,r.jsx)(n.li,{children:"GOPATH：GOPATH 是作为编译后二进制的存放目的地和 import 包时的搜索路径"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["假定你想要安装 Go 的目录为 ",(0,r.jsx)(n.code,{children:"$GO_INSTALL_DIR"}),"，后面替换为相应的目录路径，安装步骤如下。"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"下载安装包"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["安装包下载地址为 ",(0,r.jsx)(n.a,{href:"https://golang.org/dl/",target:"_blank",rel:"noopener noreferrer",children:"golang.org"}),"，如果打不开可以使用这个地址：",(0,r.jsx)(n.a,{href:"https://golang.google.cn/dl/",target:"_blank",rel:"noopener noreferrer",children:"golang.google.cn"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["Linux 版本选择 goxxxxx.linux-amd64.tar.gz 格式的安装包，这里在 Linux 服务器上直接用 ",(0,r.jsx)(n.code,{children:"wget"})," 命令下载："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ wget https://dl.google.com/go/go1.10.2.linux-amd64.tar.gz\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"设置安装目录"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ export GO_INSTALL_DIR=$HOME\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"这里我们安装到用户主目录下。"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"解压 Go 安装包"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ tar -xvzf go1.10.2.linux-amd64.tar.gz -C $GO_INSTALL_DIR\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"设置环境变量"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ export GO_INSTALL_DIR=$HOME\r\n$ export GOROOT=$GO_INSTALL_DIR/go\r\n$ export GOPATH=$HOME/mygo\r\n$ export PATH=$GOPATH/bin:$PATH:$GO_INSTALL_DIR/go/bin\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果不想每次登录系统都设置一次环境变量，可以将上面 4 行追加到 ",(0,r.jsx)(n.code,{children:"$HOME/.bashrc"})," 文件中。"]}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsxs)(n.li,{children:["执行 ",(0,r.jsx)(n.code,{children:"go version"})," 检查 Go 是否成功安装"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ go version\r\ngo version go1.10.2 linux/amd64\n"})}),"\n",(0,r.jsxs)(n.p,{children:["看到 ",(0,r.jsx)(n.code,{children:"go version"})," 命令输出 go 版本号 ",(0,r.jsx)(n.code,{children:"go1.10.2 linux/amd64"}),"，说明 go 命令安装成功。"]}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsxs)(n.li,{children:["创建 ",(0,r.jsx)(n.code,{children:"$GOPATH/src"})," 目录"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$GOPATH/src"})," 是 Go 源码存放的目录，所以在正式开始编码前要先确保 ",(0,r.jsx)(n.code,{children:"$GOPATH/src"})," 目录存在，执行命令："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ mkdir -p $GOPATH/src\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"vim-配置",children:["Vim 配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vim-配置",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"因为 Vim 是 Linux 下开发的最基本工具，为了通用这里基于 Vim 来配置开发环境。如果要配置一个 Vim IDE 有很多步骤需要一步一步去做，笔者调研了很多 Go vim ide 的配置方法，编写了一个安装工具，这里直接用该工具来配置，具体配置步骤如下。"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"下载 Vim 配置工具"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ git clone https://github.com/lexkong/lexVim\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"进入 lexVim 目录，下载 go ide 需要的二进制文件："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ cd lexVim\r\n$ git clone https://github.com/lexkong/vim-go-ide-bin\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"都是二进制文件，大概有 141MB，请耐心等待 :-)"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"启动安装脚本："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ ./start_vim.sh\n"})}),"\n",(0,r.jsxs)(n.p,{children:["启动后，会进入一个交互环境，依次输入： ",(0,r.jsx)(n.code,{children:"1 -> yourname -> youremail@qq.com"}),"，脚本最后输出 ",(0,r.jsx)(n.code,{children:"this vim config is success !"}),"说明安装成功。很简单，只需 3 个选择即可安装成功，配置 IDE so easy。"]}),"\n",(0,r.jsxs)(n.h2,{id:"vim-ide-常用功能",children:["Vim IDE 常用功能",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vim-ide-常用功能",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在 Go 项目开发中最常用的功能是："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"gd"})," 或者",(0,r.jsx)(n.code,{children:"ctrl + ]"})," 跳转到对应的函数定义处"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ctrl + t"})," 标签退栈"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ctrl + o"})," 跳转到前一个位置"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<F4>"})," 最近文件列表"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<F5>"})," 在 Vim 的上面打开文件查找窗口"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<F9>"})," 生成供函数跳转的 tag"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<F2>"})," 打开目录窗口，再按会关闭目录窗口"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<F6>"})," 添加函数注释"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["在代码间跳来跳去，将光标放在某个函数调用上，按 ",(0,r.jsx)(n.code,{children:"ctl + ]"})," 就会跳到函数的定义处，按 ",(0,r.jsx)(n.code,{children:"ctrl + o"})," 就会跳回来。"]}),"\n",(0,r.jsxs)(n.p,{children:["更多 Go vim ide 功能请参考 ",(0,r.jsx)(n.a,{href:"https://github.com/lexkong/lexVim/blob/master/doc/ide.md",target:"_blank",rel:"noopener noreferrer",children:"Vim IDE 功能"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"“工欲善其事，必先利其器。”在开始 Go 开发之前，需要安装基本的 Go 编译工具，设置基本的环境变量。如果有一个顺手的开发工具就更好了。该小节向读者介绍了："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"如何安装 Go 编译环境"}),"\n",(0,r.jsx)(n.li,{children:"如何配置 Vim IDE"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"开头的这 4 小节介绍了 API 开发的一些基本的知识，并做了开发前的准备工作，接下来开始 API 开发实战，一步一步教你构建一个账号管理的 API 服务，满满的干货等你来 Get。"})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F3Go%20API%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.md"]={toc:[{text:"Go 命令安装",id:"go-命令安装",depth:2},{text:"Vim 配置",id:"vim-配置",depth:2},{text:"Vim IDE 常用功能",id:"vim-ide-常用功能",depth:2},{text:"小结",id:"小结",depth:2}],title:"3Go API 开发环境配置",headingTitle:"3Go API 开发环境配置",frontmatter:{}}}}]);