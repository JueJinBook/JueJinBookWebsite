"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["8020"],{90754:function(e,n,t){t.r(n),t.d(n,{default:()=>l});var a=t(552676),r=t(740453);function o(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",code:"code",h3:"h3",pre:"pre",br:"br",ul:"ul",li:"li"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"6-prompt构建可复用的-prompt-template",children:["6-Prompt：构建可复用的 Prompt Template",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-prompt构建可复用的-prompt-template",children:"#"})]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["本章对应源代码：",(0,a.jsx)(n.a,{href:"https://github.com/RealKai42/langchainjs-juejin/blob/main/prompt-template.ipynb",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/RealKai42/langchainjs-juejin/blob/main/prompt-template.ipynb"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Prompt 是大模型的核心，传统方式我们一般使用字符串拼接或者模版字符串来构造 prompt，而有了 langchain 后，我们可以构建可复用的 prompt 来让我们更工程化的管理和构建 prompt，从而制作更复杂的 chat bot"}),"\n",(0,a.jsxs)(n.h2,{id:"基础-prompt",children:["基础 prompt",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础-prompt",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["首先我们学习基础的 ",(0,a.jsx)(n.code,{children:"PromptTemplate"})," 来理解 langchain 中是如何构建和管理 prompt template。"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"PromptTemplate"})," 是帮助我们定义一个包含变量的字符串模版，我们可以通过向该类的对象输入不同的变量值来生成模版渲染的结果。 这可以方便的让我们定义一组 prompt 模板，然后在运行时根据用户的输入动态地填充变量从而生成 prompt。"]}),"\n",(0,a.jsxs)(n.h3,{id:"无变量-template",children:["无变量 template",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#无变量-template",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"我们先从最基础的无变量 template 来逐步上手和理解"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { PromptTemplate } from "@langchain/core/prompts";\n\nconst greetingPrompt = new PromptTemplate({\n  inputVariables: [],\n  template: "hello world",\n});\nconst formattedGreetingPrompt = await greetingPrompt.format();\n\nconsole.log(formattedGreetingPrompt);\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"PromptTemplate"})," 就是最基础的 template，我们不传入任何变量（",(0,a.jsx)(n.code,{children:"inputVariables: []"}),"），这跟硬编码一个字符串没任何区别。 调用 prompt template 的方式就是 ",(0,a.jsx)(n.code,{children:"format"}),"，因为我们没有任何变量，也就没有任何参数。"]}),"\n",(0,a.jsx)(n.p,{children:"没有变量的 prompt template 使用的很少，这里主要以此帮助大家理解 template 的概念。"}),"\n",(0,a.jsxs)(n.h3,{id:"含变量的-template",children:["含变量的 template",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#含变量的-template",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const personalizedGreetingPrompt = new PromptTemplate({\n  inputVariables: ["name"],\n  template: "hello，{name}",\n});\nconst formattedPersonalizedGreeting = await personalizedGreetingPrompt.format({\n  name: "Kai",\n});\n\nconsole.log(formattedPersonalizedGreeting);\n// hello，Kai\n'})}),"\n",(0,a.jsxs)(n.p,{children:["其 API 比较容易理解，使用 ",(0,a.jsx)(n.code,{children:"{}"})," 来包裹住变量，然后在 ",(0,a.jsx)(n.code,{children:"inputVariables"})," 声明用到的变量名称。因为有了变量，所以在调用 ",(0,a.jsx)(n.code,{children:"format()"})," 就需要传入对应的变量。"]}),"\n",(0,a.jsx)(n.p,{children:"同样的多变量的 template 也是类似的"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const multiVariableGreetingPrompt = new PromptTemplate({\n  inputVariables: ["timeOfDay", "name"],\n  template: "good {timeOfDay}, {name}",\n});\nconst formattedMultiVariableGreeting = await multiVariableGreetingPrompt.format({\n  timeOfDay: "morning",\n  name: "Kai",\n});\n\nconsole.log(formattedMultiVariableGreeting);\n// good morning, Kai\n'})}),"\n",(0,a.jsxs)(n.p,{children:["唯一需要注意的就是，如果你的 prompt 需要 ",(0,a.jsx)(n.code,{children:"{}"}),"，可以这么转义",(0,a.jsx)(n.code,{children:"{{}}"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const multiVariableGreetingPrompt = new PromptTemplate({\n  inputVariables: ["timeOfDay", "name"],\n  template: "good {timeOfDay}, {name} {{test}}",\n});\nconst formattedMultiVariableGreeting = await multiVariableGreetingPrompt.format({\n  timeOfDay: "morning",\n  name: "Kai",\n});\n\nconsole.log(formattedMultiVariableGreeting);\n// good morning, Kai {test}\n'})}),"\n",(0,a.jsx)(n.p,{children:"这么创建 template 有点繁琐， langchain 也提供了简便的创建方式"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const autoInferTemplate = PromptTemplate.fromTemplate("good {timeOfDay}, {name}");\nconsole.log(autoInferTemplate.inputVariables);\n// [\'timeOfDay\', \'name\']\n\nconst formattedAutoInferTemplate = await autoInferTemplate.format({\n  timeOfDay: "morning",\n  name: "Kai",\n});\nconsole.log(formattedAutoInferTemplate)\n// good morning, Kai\n'})}),"\n",(0,a.jsx)(n.p,{children:"这样创建 prompt 的时候，会自动从字符串中推测出需要输入的变量。"}),"\n",(0,a.jsxs)(n.h3,{id:"使用部分参数创建-template",children:["使用部分参数创建 template",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用部分参数创建-template",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"我们并不需要一次性把所有变量都输入进去，在工程中，我们可能先获得某个参数，之后才能获得另一个参数。这里类似于函数式编程的概念，我们给 需要两个参数的 prompt template 传递一个参数后，就会生成需要一个参数的 prompt template。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const initialPrompt = new PromptTemplate({\n  template: "这是一个{type}，它是{item}。",\n  inputVariables: ["type", "item"],\n});\n\n\nconst partialedPrompt = await initialPrompt.partial({\n  type: "工具",\n});\n\nconst formattedPrompt = await partialedPrompt.format({\n  item: "锤子",\n});\n\nconsole.log(formattedPrompt);\n// 这是一个工具，它是锤子。\n\nconst formattedPrompt2 = await partialedPrompt.format({\n  item: "改锥",\n});\n\nconsole.log(formattedPrompt2)\n// 这是一个工具，它是改锥。\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"使用动态填充参数",children:["使用动态填充参数",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用动态填充参数",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["当我们需要，一个 prompt template 被 ",(0,a.jsx)(n.code,{children:"format"})," 时，实时地动态生成参数时，我们可以使用函数来对 template 部分参数进行指定。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const getCurrentDateStr = () => {\n  return new Date().toLocaleDateString();\n};\n\nconst promptWithDate = new PromptTemplate({\n  template: "今天是{date}，{activity}。",\n  inputVariables: ["date", "activity"],\n});\n\nconst partialedPromptWithDate = await promptWithDate.partial({\n  date: getCurrentDateStr,\n});\n\nconst formattedPromptWithDate = await partialedPromptWithDate.format({\n  activity: "我们去爬山",\n});\n\nconsole.log(formattedPromptWithDate);\n// 输出: 今天是2023/7/13，我们去爬山。\n'})}),"\n",(0,a.jsxs)(n.p,{children:["注意，函数 ",(0,a.jsx)(n.code,{children:"getCurrentDateStr"})," 是在 ",(0,a.jsx)(n.code,{children:"format"})," 被调用的时候实时运行的，也就是可以在被渲染成字符串时获取到最新的外部信息。 目前这里不支持传入参数，如果需要参数，可以用 js 的闭包进行参数的传递。",(0,a.jsx)(n.br,{}),"\n","假设我们有一个根据时间段（morning, afternoon, evening）返回不同问候语，并且需要带上当前时间的需求"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const getCurrentDateStr = () => {\n  return new Date().toLocaleDateString();\n};\n\nfunction generateGreeting(timeOfDay) {\n  return () => {\n    const date = getCurrentDateStr()\n    switch (timeOfDay) {\n      case 'morning':\n        return date + ' 早上好';\n      case 'afternoon':\n        return date + ' 下午好';\n      case 'evening':\n        return date + ' 晚上好';\n      default:\n        return date + ' 你好';\n    }\n  };\n}\n\nconst prompt = new PromptTemplate({\n  template: \"{greeting}!\",\n  inputVariables: [\"greeting\"],\n});\n\nconst currentTimeOfDay = 'afternoon';\nconst partialPrompt = await prompt.partial({\n  greeting: generateGreeting(currentTimeOfDay),\n});\n\nconst formattedPrompt = await partialPrompt.format();\n\nconsole.log(formattedPrompt);\n// 输出: 3/21/2024 下午好!\n"})}),"\n",(0,a.jsx)(n.p,{children:"得益于 js 的灵活性，我们是可以实现官方 API 不支持的玩法。"}),"\n",(0,a.jsxs)(n.h2,{id:"chat-prompt",children:["chat prompt",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chat-prompt",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["基础的 prompt template 算是开胃菜，因为 chat API 是目前跟 llm 交互的主流形式，",(0,a.jsx)(n.code,{children:"ChatPromptTemplate"})," 是最常用的工具。"]}),"\n",(0,a.jsx)(n.p,{children:"在跟各种聊天模型交互的时候，在构建聊天信息时，不仅仅包含了像上文中的文本内容，也需要与每条消息关联的角色信息。 例如这条信息是由 人类、AI、还是给 chatbot 指定的 system 信息，这种结构化的消息输入有助于模型更好地理解对话的上下文和流程，从而生成更准确、更自然的回应。"}),"\n",(0,a.jsxs)(n.p,{children:["为了方便地构建和处理这种结构化的聊天消息，LangChain 提供了几种与聊天相关的提示模板类，如 ",(0,a.jsx)(n.code,{children:"ChatPromptTemplate"}),"、",(0,a.jsx)(n.code,{children:"SystemMessagePromptTemplate"}),"、",(0,a.jsx)(n.code,{children:"AIMessagePromptTemplate"})," 和 ",(0,a.jsx)(n.code,{children:"HumanMessagePromptTemplate"}),"。"]}),"\n",(0,a.jsx)(n.p,{children:"其中后面三个分别对应了一段 ChatMessage 不同的角色。在 OpenAI 的定义中，每一条消息都需要跟一个 role 关联，标识消息的发送者。角色的概念对 LLM 理解和构建整个对话流程非常重要，相同的内容由不同的 role 发送出来的意义是不同的。"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"system"})," 角色的消息通常用于设置对话的上下文或指定模型采取特定的行为模式。这些消息不会直接显示在对话中，但它们对模型的行为有指导作用。 可以理解成模型的元信息，权重非常高，在这里有效的构建 prompt 能取得非常好的效果。"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"user"})," 角色代表真实用户在对话中的发言。这些消息通常是问题、指令或者评论，反映了用户的意图和需求。"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"assistant"})," 角色的消息代表AI模型的回复。这些消息是模型根据system的指示和user的输入生成的。"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"我们以一个基础的翻译 chatbot 来讲解这几个常见 chat template，我们先构建一个 system message 来给 llm 指定核心的准则"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { SystemMessagePromptTemplate } from "@langchain/core/prompts";\n\nconst translateInstructionTemplate = SystemMessagePromptTemplate.fromTemplate(`你是一个专\n业的翻译员，你的任务是将文本从{source_lang}翻译成{target_lang}。`);\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"然后构建一个用户输入的信息"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { HumanMessagePromptTemplate } from "@langchain/core/prompts";\n\nconst userQuestionTemplate = HumanMessagePromptTemplate.fromTemplate("请翻译这句话：{text}")\n'})}),"\n",(0,a.jsx)(n.p,{children:"然后将这两个信息组合起来，形成一个对话信息"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { ChatPromptTemplate } from "@langchain/core/prompts";\n\nconst chatPrompt = ChatPromptTemplate.fromMessages([\n  translateInstructionTemplate,\n  userQuestionTemplate,\n]);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["然后我们就可以用一个 ",(0,a.jsx)(n.code,{children:"fromMessages"})," 来格式化整个对话信息"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const formattedChatPrompt = await chatPrompt.formatMessages({\n  source_lang: "中文",\n  target_lang: "法语",\n  text: "你好，世界",\n});\n\nconsole.log(formattedChatPrompt)\n'})}),"\n",(0,a.jsx)(n.p,{children:"就是一个这样的结构"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'[\n  SystemMessage {\n    lc_serializable: true,\n    lc_kwargs: {\n      content: "你是一个专业的翻译员，你的任务是将文本从中文翻译成法语。",\n      additional_kwargs: {},\n      response_metadata: {}\n    },\n    lc_namespace: [ "langchain_core", "messages" ],\n    content: "你是一个专业的翻译员，你的任务是将文本从中文翻译成法语。",\n    name: undefined,\n    additional_kwargs: {},\n    response_metadata: {}\n  },\n  HumanMessage {\n    lc_serializable: true,\n    lc_kwargs: {\n      content: "请翻译这句话：你好，世界",\n      additional_kwargs: {},\n      response_metadata: {}\n    },\n    lc_namespace: [ "langchain_core", "messages" ],\n    content: "请翻译这句话：你好，世界",\n    name: undefined,\n    additional_kwargs: {},\n    response_metadata: {}\n  }\n]\n'})}),"\n",(0,a.jsx)(n.p,{children:"构建了一个数组，每一个元素都是一个 Message。 同样的 chatPrompt 也有简便写法的语法糖"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const systemTemplate = "你是一个专业的翻译员，你的任务是将文本从{source_lang}翻译成{target_lang}。";\nconst humanTemplate = "请翻译这句话：{text}";\n\nconst chatPrompt = ChatPromptTemplate.fromMessages([\n  ["system", systemTemplate],\n  ["human", humanTemplate],\n]);\n'})}),"\n",(0,a.jsx)(n.p,{children:"然后我们就可以快速组装起一个简单的 chain 来测试一下"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { load } from "dotenv";\nimport { ChatOpenAI } from "@langchain/openai";\nimport { StringOutputParser } from "@langchain/core/output_parsers";\n\nconst env = await load();\nconst process = {\n    env\n}\n\nconst chatModel = new ChatOpenAI();\nconst outputPraser = new StringOutputParser();\n\nconst chain = chatPrompt.pipe(chatModel).pipe(outputPraser);\n\nawait chain.invoke({\n  source_lang: "中文",\n  target_lang: "法语",\n  text: "你好，世界",\n})\n// "Bonjour, le monde"\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"组合多个-prompt",children:["组合多个 Prompt",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组合多个-prompt",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["在实际工程中，我们可能会根据多个变量，根据多个外界环境去构造一个很复杂的 prompt，这里就是",(0,a.jsx)(n.code,{children:"PipelinePromptTemplate"})," 的应用场景。 我可以用将多个独立的 template 构建成一个完整且复杂的 prompt，这样可以提高独立 prompt 的复用性，进一步增强模块化带来的优势。"]}),"\n",(0,a.jsxs)(n.p,{children:["在 ",(0,a.jsx)(n.code,{children:"PipelinePromptTemplate"})," 有两个核心的概念："]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"pipelinePrompts"}),"，一组 object，每个 object 表示 ",(0,a.jsx)(n.code,{children:"prompt"})," 运行后赋值给 ",(0,a.jsx)(n.code,{children:"name"})," 变量"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"finalPrompt"}),"，表示最终输出的 prompt"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"我们还是少废话，直接看代码"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import {\n  PromptTemplate,\n  PipelinePromptTemplate,\n} from "@langchain/core/prompts";\n\nconst getCurrentDateStr = () => {\n  return new Date().toLocaleDateString();\n};\n\nconst fullPrompt = PromptTemplate.fromTemplate(`\n你是一个智能管家，今天是 {date}，你的主人的信息是{info}, \n根据上下文，完成主人的需求\n{task}`);\n\nconst datePrompt = PromptTemplate.fromTemplate("{date}，现在是 {period}")\nconst periodPrompt = await datePrompt.partial({\n    date: getCurrentDateStr\n})\n\nconst infoPrompt =  PromptTemplate.fromTemplate("姓名是 {name}, 性别是 {gender}");\n\nconst taskPrompt = PromptTemplate.fromTemplate(`\n我想吃 {period} 的 {food}。 \n再重复一遍我的信息 {info}`);\n\nconst composedPrompt = new PipelinePromptTemplate({\n  pipelinePrompts: [\n    {\n      name: "date",\n      prompt: periodPrompt,\n    },\n    {\n      name: "info",\n      prompt: infoPrompt,\n    },\n    {\n      name: "task",\n      prompt: taskPrompt,\n    },\n  ],\n  finalPrompt: fullPrompt,\n});\n\nconst formattedPrompt = await composedPrompt.format({\n    period: "早上",\n    name: "张三",\n    gender: "male",\n    food: "lemon"\n});\n\nconsole.log(formattedPrompt)\n'})}),"\n",(0,a.jsx)(n.p,{children:"输出"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"你是一个智能管家，今天是 3/21/2024，现在是 早上，你的主人的信息是姓名是 张三, 性别是 male, \n根据上下文，完成主人的需求\n\n我想吃 早上 的 lemon。 \n再重复一遍我的信息 姓名是 张三, 性别是 male\n"})}),"\n",(0,a.jsx)(n.p,{children:"这里有几个需要注意的地方"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["一个变量可以多次复用，例如外界输入的 ",(0,a.jsx)(n.code,{children:"period"})," 在 ",(0,a.jsx)(n.code,{children:"periodPrompt"})," 和 ",(0,a.jsx)(n.code,{children:"taskPrompt"})," 都被使用了"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"pipelinePrompts"})," 中的变量可以被引用，例如我们在 ",(0,a.jsx)(n.code,{children:"taskPrompt"})," 使用了 ",(0,a.jsx)(n.code,{children:"infoPrompt"})," 的运行结果"]}),"\n",(0,a.jsx)(n.li,{children:"支持动态自定义和 partial。例子中我们也涉及到了这两种特殊的 template"}),"\n",(0,a.jsx)(n.li,{children:"langchain 会自动分析 pipeline 之间的依赖关系，尽可能的进行并行化来提高运行速度"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["有了 ",(0,a.jsx)(n.code,{children:"pipelinePrompts"})," 我们可以极大程度的复用和管理我们的 prompt template，从而让 llm app 的开发更加工程化。"]}),"\n",(0,a.jsxs)(n.h2,{id:"小结",children:["小结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"prompt 是 llm app 最核心的价值，并且会经常修改。所以通过我们本节课介绍的各种 prompt template，我们可以更灵活的使用、管理和组装多种 prompt template！打造出最合适当前场景和对话的 prompt，从而更好地激发 llm 的能力。"})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}let l=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%20AI%EF%BC%9ALangChain.js%20%E5%85%A5%E9%97%A8%E5%92%8C%E5%AE%9E%E6%88%98_online%2F6-Prompt%EF%BC%9A%E6%9E%84%E5%BB%BA%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%20Prompt%20Template.md"]={toc:[{text:"基础 prompt",id:"基础-prompt",depth:2},{text:"无变量 template",id:"无变量-template",depth:3},{text:"含变量的 template",id:"含变量的-template",depth:3},{text:"使用部分参数创建 template",id:"使用部分参数创建-template",depth:3},{text:"使用动态填充参数",id:"使用动态填充参数",depth:3},{text:"chat prompt",id:"chat-prompt",depth:2},{text:"组合多个 Prompt",id:"组合多个-prompt",depth:2},{text:"小结",id:"小结",depth:2}],title:"6-Prompt：构建可复用的 Prompt Template",headingTitle:"6-Prompt：构建可复用的 Prompt Template",frontmatter:{}}}}]);