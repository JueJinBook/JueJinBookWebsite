"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["84067"],{48868:function(e,a,n){n.r(a),n.d(a,{default:()=>_});var s=n(552676),r=n(740453);let c=n.p+"static/image/9862dd4e2edd2fd28508b25fc08cc4cc.b5d25933.webp",l=n.p+"static/image/5644863e9e59630b56242388c6103402.813f1316.webp",i=n.p+"static/image/8ffa2dcb0f4fe4f866bbe53875177492.43f42594.webp",d=n.p+"static/image/2703bdf1a7acc9fb1cb0dd03d7b4e9ce.8f2fa848.webp",p=n.p+"static/image/c7cdae85439869e290613c69604abba7.7703d023.webp",t=n.p+"static/image/42f46c2fbc19f3d86b35aa7d4b0b9937.88fbd48e.webp",b=n.p+"static/image/23901a8cc24a3667644d404112973783.70592870.webp",h=n.p+"static/image/081107ab7c5aff3e7a5b5aa1792539f3.f92e4ff6.webp",j=n.p+"static/image/cd8b3741279b68b26c8db7f041490164.5b147b7f.webp",o=n.p+"static/image/54dafdaf0c0de0b14f0196671f0e8193.8e6c2d83.webp",x=n.p+"static/image/d2e9ed4114ec89294f9324b6ddefc7ca.568e2250.webp",g=n.p+"static/image/a4f7411a9f652ecc853ab61a098ad86c.ec6914fa.webp",m=n.p+"static/image/00327c79e6ea5371bfb2ecd65068810b.ec6914fa.webp",f=n.p+"static/image/ef2daae0992b7c49a2156cdb9e664ce2.a62f6539.webp",u=n.p+"static/image/4c458abdc4d230e427ac9f28d2e1ddcd.e45a34e6.webp",w=n.p+"static/image/212da56c8dddf9243a472df6d4a5bf85.11283237.webp",E=n.p+"static/image/5c818e0096a7f7d6bf67f5412e005958.284435a8.webp",A=n.p+"static/image/8303577d6f9987a8ad01e11ec16c2e77.5eb0a6b6.webp";function B(e){let a=Object.assign({h1:"h1",a:"a",p:"p",img:"img",ul:"ul",li:"li",pre:"pre",code:"code",h2:"h2"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a.h1,{id:"19实战案例调试-babel-源码",children:["19.实战案例：调试 Babel 源码",(0,s.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#19实战案例调试-babel-源码",children:"#"})]}),"\n",(0,s.jsx)(a.p,{children:"Babel 是一个 JS 的编译器，用于把高版本语法的代码转成低版本的，并且添加 polyfill。"}),"\n",(0,s.jsx)(a.p,{children:"它有很多插件，插件还进一步封装成了预设（preset），开箱即用。"}),"\n",(0,s.jsx)(a.p,{children:"此外，我们还可以写 Babel 插件来完成一些特定的代码转换。"}),"\n",(0,s.jsx)(a.p,{children:"Babel 是前端领域高频用到的工具，自然有必要去深入它的原理。所以这节我们就来调试下 Babel 的源码。"}),"\n",(0,s.jsx)(a.p,{children:"Babel 也是个命令行工具，也是有命令行和 api 两种形式的入口。今天我们通过 api 的方式来调试它。"}),"\n",(0,s.jsx)(a.p,{children:"它的编译流程分为三个阶段："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:"parse：把源码转成 AST"}),"\n",(0,s.jsx)(a.li,{children:"traverse：对 AST 做遍历，遍历过程中做增删改"}),"\n",(0,s.jsx)(a.li,{children:"generate：生成目标代码和 sourcemap"}),"\n"]}),"\n",(0,s.jsx)(a.p,{children:"这三个阶段分别对应 @babel/parser、@babel/traverse、@babel/generator 三个包。"}),"\n",(0,s.jsx)(a.p,{children:"它的 API 是这样用的："}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-javascript",children:"const parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\n\nconst source = `\n    (async function() {\n        console.log('hello guangguang');\n    })();\n`;\n\nconst ast = parser.parse(source);\n\ntraverse(ast, {\n    StringLiteral(path) {\n        path.node.value = path.node.value.replace('guangguang', 'dongdong')\n    }\n});\n\nconst { code, map} = generate(ast, {\n    sourceMaps: true\n});\n\nconsole.log(code);\nconsole.log(JSON.stringify(map));\n"})}),"\n",(0,s.jsx)(a.p,{children:"理解了编译流程，这段代码还是很容易看懂的。就是 parse、traverse、generate 三个步骤。"}),"\n",(0,s.jsxs)(a.p,{children:["traverse 过程中要声明对什么 AST 做什么修改， AST 可以在 ",(0,s.jsx)(a.a,{href:"https://www.astexplorer.net/#/gist/228d4ae6991065e13d9efe353ade9e6c/2772707aa4a88cf45ffa2a5cf24ad4db8bca1451",target:"_blank",rel:"noopener noreferrer",children:"astexplorer.net"})," 来查看。"]}),"\n",(0,s.jsx)(a.p,{children:"比如可以看到这部分是 StringLiteral 字符串字面量，修改它的 value 即可。"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"我们安装依赖之后跑一下："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"可以看到打印了修改以后的代码和 sourcemap。"}),"\n",(0,s.jsx)(a.p,{children:"我们的目标不是学怎么用 Babel 的 api，而是学怎么调试它的源码。"}),"\n",(0,s.jsx)(a.p,{children:"接下来我们创建个调试配置："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"调试的配置也是 node 执行 index.js，指定 console 为内置的 terminal。"}),"\n",(0,s.jsx)(a.p,{children:"打几个断点，然后跑调试："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"可以看到 parse 之后的 AST，遍历修改时的节点，生成的目标代码。"}),"\n",(0,s.jsx)(a.p,{children:"然后我们进入这几个包内部看下源码。"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"你会发现调试的是这几个包编译之后的代码："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"如果有 generator、async await 之类的，调试编译后的代码根本绕不明白。"}),"\n",(0,s.jsx)(a.p,{children:"怎么调试最初的源码呢？"}),"\n",(0,s.jsx)(a.p,{children:"sourcemap！"}),"\n",(0,s.jsx)(a.p,{children:"但是你去 node_modules 下看下这些包，会发现它们已经有 sourcemap 了，而且也关联了："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"那为什么调试的时候调试的不是源码呢？"}),"\n",(0,s.jsx)(a.p,{children:"这是因为 VSCode 的一个默认配置导致 sourcemap 不会生效。"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"resolveSourceMapLocations 是配置去哪里查找 sourcemap，VSCode Node Debugger 默认不会查找 node_modules 下的 sourcemap。"}),"\n",(0,s.jsx)(a.p,{children:"所以就算 babel 的包里带了 sourcemap 也不会生效。"}),"\n",(0,s.jsx)(a.p,{children:"把它去掉之后再跑一下："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"你会发现现在调试的就是 babel 的 ts 源码了。"}),"\n",(0,s.jsx)(a.p,{children:"直接调试可读性更强的 ts 源码，理清它的实现逻辑就简单很多了。"}),"\n",(0,s.jsx)(a.p,{children:"而且，你还可以更进一步，调试 babel 源码的时候让 VSCode 直接定位到源码的目录："}),"\n",(0,s.jsx)(a.p,{children:"这个只要 sourcemap 到的文件路径在当前 workspace 下就行。"}),"\n",(0,s.jsx)(a.p,{children:"看下现在的路径："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"虽然调试的是源码的 ts 了，但是路径是 node_modules 包下的。"}),"\n",(0,s.jsx)(a.p,{children:"我们可以把 babel 项目下下来和测试项目放在一个 workspace 下："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"然后去 node_modules 下手动替换下 sourcemap 的 sources 路径："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"我这里是把 ../src/ 替换成了 /Users/guang/code/babel-debug/babel/packages/babel-parser/src/"}),"\n",(0,s.jsx)(a.p,{children:"然后在新的 workspace 创建个调试配置，这时目录改了，要指定下 cwd："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"再跑调试："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"你就会发现现在 sourcemap 到的路径直接是 babel 源码下的文件路径了，然后调试的时候 VSCode 也会直接打开对应文件。"}),"\n",(0,s.jsx)(a.p,{children:"更重要的是，现在你可以直接在 babel 源码里打断点了，代码执行到那里就会断住："}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(a.p,{children:"至此，我们就能愉快的调试 babel 源码了。"}),"\n",(0,s.jsx)(a.p,{children:"我们调试了 @babel/parser 包的源码，其余的包也是一样的方式。"}),"\n",(0,s.jsxs)(a.h2,{id:"总结",children:["总结",(0,s.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(a.p,{children:"这节我们通过 API 的方式调试了 Babel 的源码。"}),"\n",(0,s.jsx)(a.p,{children:"Babel 分为 parse、traverse（或者叫 transform）、generate 三个阶段，分别对应 @babel/parser、@babel/traverse、@babel/generator 的包。"}),"\n",(0,s.jsx)(a.p,{children:"直接断点调试会发现调试的是编译后的代码，但是 node_modules 下的这几个包都是有 sourcemap 的。"}),"\n",(0,s.jsx)(a.p,{children:"这是因为默认 resolveSourceMapLocations 排除了 node_modules 下的 sourcemap，去掉它重新跑调试，就可以直接调试 ts 源码了。"}),"\n",(0,s.jsx)(a.p,{children:"如果想调试的时候直接调试 babel 源码目录的文件，可以把测试项目和 babel 项目放到一个 workspace，然后改下 sourcemap 文件里的 sources 路径就可以了。这样就可以直接在 babel 源码里打断点。"}),"\n",(0,s.jsx)(a.p,{children:"当你对 babel 某部分功能的实现感兴趣的时候，就可以自己调试源码了！"})]})}function S(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:a}=Object.assign({},(0,r.ah)(),e.components);return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(B,{...e})}):B(e)}let _=S;S.__RSPRESS_PAGE_META={},S.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F19.%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%B0%83%E8%AF%95%20Babel%20%E6%BA%90%E7%A0%81.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"19.实战案例：调试 Babel 源码",headingTitle:"19.实战案例：调试 Babel 源码",frontmatter:{}}}}]);