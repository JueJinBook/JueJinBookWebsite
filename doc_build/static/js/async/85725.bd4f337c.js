"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["85725"],{993076:function(e,n,s){s.r(n),s.d(n,{default:()=>I});var r=s(552676),c=s(740453);let d=s.p+"static/image/302426b348cd4b887af4a725d2892540.58f8dce1.gif",t=s.p+"static/image/dad6d7cd13e93f83cf7b593b232e4e1b.27bad9ed.webp",l=s.p+"static/image/11fdf0f43180802a254515b9b9e262fa.145616c2.gif",i=s.p+"static/image/895b360a64ef8b6aabbb24854564c07f.8461f325.webp",h=s.p+"static/image/5b42031235bb0d71a39e9a7d0006ac0a.a5110712.gif",o=s.p+"static/image/28623b97e43954e77c38eee66ae3c41f.d4d1e600.webp",x=s.p+"static/image/31fad5c58d6aa003102a86990993fa51.97fc82ed.webp",a=s.p+"static/image/243671caa44c8de78404efe626bfbccf.3e48587a.webp",j=s.p+"static/image/7ea1c0127423cc1d1c31fccbac7941df.2e9b4ecc.webp",p=s.p+"static/image/b094a828689a0a8d171944dd7cccf403.166f97b8.webp",f=s.p+"static/image/bc156cb374809d0629be60f90480c440.dd0692d3.webp",g=s.p+"static/image/bb1a64c748bba3bd53cc1953cc66e528.fe38452c.webp",b=s.p+"static/image/d3cf57245172699bc2f8d88acb7e8b50.70d33e4b.webp",m=s.p+"static/image/c2b4dac1d60a6f97e6888f464604be57.0250b125.webp",u=s.p+"static/image/209ef3a32b241eab9f9ad4eff5cea608.fc32c890.webp",v=s.p+"static/image/3709c6af8f8e99772e4845b402f6f35d.9c2684a1.gif",w=s.p+"static/image/1918be46a74be85a64becda2dc890a74.5ebc138c.gif",S=s.p+"static/image/469bc0fe65c28d37c6f729e4027f18e6.1bdb9bac.gif",k=s.p+"static/image/e8103a00214fe8963a7bbdceea1569b9.cae45b57.webp",y=s.p+"static/image/0a8415d73012661a577c28578c9146d1.5efe257c.webp",V=s.p+"static/image/b9f0221ecec510f189c82f120168e534.acc9d4e2.webp",G=s.p+"static/image/74ef225ce1207e14c07bde010d543c30.b7fad3d4.gif",C=s.p+"static/image/cf713348f436db64a085aab0f83f936a.92e18d02.gif",M=s.p+"static/image/919222af5b993bad1278f328764ea49d.57f15bb9.gif",_=s.p+"static/image/944550c3a13b78e109f7aa92dcb42e25.be07695d.webp",N=s.p+"static/image/ab246d86d2c1f6eb6e580cb5861e4769.cc5c632d.gif",L=s.p+"static/image/5add9f0c974337608f107608d7af32f1.d39619ce.gif",E=s.p+"static/image/91fa5180ca16a02721944998cba9dc31.ebdaec4d.webp",B=s.p+"static/image/18d1f87121476693ad6c37a25607b77f.04e15b82.webp",P=s.p+"static/image/c88ffed4856e931a5e90c09e11d84dfb.5741e29d.gif",q=s.p+"static/image/37a51e9b951ac5880af760d5d45afb8f.bf66ce1d.webp",D=s.p+"static/image/a55972c9aa7d7bccc33352f8c63b81d8.ef033c4f.gif",z=s.p+"static/image/97b2eecd86197fb63d2bcb8072d02888.f62c95d4.gif",X=s.p+"static/image/c2fa8d34cc3243848baad36cc39b4b2e.d909b144.webp",R=s.p+"static/image/684ce33d4dff1ab3aecd2d243ba81cb3.38144449.webp",A=s.p+"static/image/b6ab28ab29b07872bc4eae318b5f47b3.cf3a012b.webp",O=s.p+"static/image/74d9c4997ddbc198c3c39e70cdf34983.f67025ff.webp",T=s.p+"static/image/7b944010a94afe684c01e87898e67266.3f9c62e3.webp",W=s.p+"static/image/a771038033626bc24775102436c49d1c.661ba148.webp",Y=s.p+"static/image/e517f2385a72c20dc3696b74916be31a.8ba74eb2.gif",J=s.p+"static/image/040ab402604172046dc1fd4acaf21152.abc340ea.webp",F=s.p+"static/image/99d860e4af5edac34e56453c8c8d1f4d.0517b7b7.gif",H=s.p+"static/image/f7303a61c56104302af02a4c83b737fe.a3c41160.webp",Q=s.p+"static/image/43827da0a7dbfe4e0f0b5554ec0ac459.c544034d.webp";function Z(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",code:"code",ul:"ul",li:"li",strong:"strong",h3:"h3",blockquote:"blockquote",pre:"pre"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"8-初级篇svg-文本元素",children:["8-初级篇：SVG 文本元素",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-初级篇svg-文本元素",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在 SVG 中，文本元素是不可或缺的一部分，它使得我们能够向图形中添加文字或文本内容，从而丰富了图形的信息传达和可读性。SVG 文本元素的灵活性和可定制性使其成为 Web 设计师、开发者和数据可视化专家的首选工具之一。"}),"\n",(0,r.jsxs)(n.p,{children:["通过 SVG 文本元素，我们可以控制文本的位置、大小、字体、颜色和对齐方式，使其与",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345813971552698406",target:"_blank",rel:"noopener noreferrer",children:"图形元素"}),"完美融合。无论是创建数据可视化图表、设计个性化图标还是制作交互式地图，SVG 文本元素都扮演着关键的角色。它们为我们提供了展示创意、传达信息和提升用户体验的重要手段。"]}),"\n",(0,r.jsx)(n.p,{children:"在这节课中，我们将深入探讨 SVG 文本元素的各种用法和技巧。我们将学习如何使用 SVG 文本元素创建各种样式的文本，包括普通文本、路径文本和文本样式化。我们还将探讨如何利用 SVG 文本元素创建动态文本效果和交互文本元素，以及如何优化文本在不同设备和分辨率下的显示效果。"}),"\n",(0,r.jsx)(n.p,{children:"无论你是初学者还是有经验的开发者，这节课都将为你提供有关于 SVG 文本元素的全面指南。让我们一起探索 SVG 文本元素的世界，并发现它们在创意设计和数据可视化中的无限潜力！"}),"\n",(0,r.jsxs)(n.h2,{id:"svg-文本元素简介",children:["SVG 文本元素简介",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-文本元素简介",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Q,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"SVG 中的文本元素提供了在矢量图形中添加文字或文本内容的功能，从而丰富了图形的信息传达和可读性。尽管 SVG 主要用于图形，但它也支持文本元素，允许在图形中直接嵌入文本。"}),"\n",(0,r.jsxs)(n.p,{children:["SVG 中的文本元素主要包括 ",(0,r.jsx)(n.code,{children:"<text>"}),"、",(0,r.jsx)(n.code,{children:"<tspan>"})," 和 ",(0,r.jsx)(n.code,{children:"<textPath>"})," ："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"<text>"})})," ",(0,r.jsx)(n.strong,{children:"元素"}),"：用于在 SVG 中创建单行或多行文本。它定义了一个文本区域，可以在其中添加文本内容，并通过属性控制文本的位置、大小、字体、颜色等样式。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"<tspan>"})})," ",(0,r.jsx)(n.strong,{children:"元素"}),"：用于在文本中创建子文本块，可以在其中独立设置样式或调整位置。通过在 ",(0,r.jsx)(n.code,{children:"<text>"})," 或其他 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 元素内部使用 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 元素，可以创建复杂的文本样式或布局。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"<textPath>"})})," ",(0,r.jsx)(n.strong,{children:"元素"}),"：用于沿着路径排列文本。它将文本沿着指定的路径进行排列，并通过路径的 ID 和其他属性来控制文本的样式和布局。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这些文本元素可以与其他 SVG 元素结合使用，例如图形、线条等，从而创建出丰富多彩的图形效果。通过灵活运用这些文本元素，我们可以实现各种各样的文本样式和布局，为图形设计和数据可视化提供更多可能性。"}),"\n",(0,r.jsxs)(n.h2,{id:"基本概念",children:["基本概念",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本概念",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在深入讨论 SVG 的 ",(0,r.jsx)(n.code,{children:"<text>"})," 、",(0,r.jsx)(n.code,{children:"<tspan>"})," 和 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 元素之前，我们先来了解与文本相关的几个基本概念：",(0,r.jsx)(n.strong,{children:"字符、字形、字体和 EM 盒"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"字符",children:["字符",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字符",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"字符是文本中的基本单位，通常表示为字母、数字、标点符号或其他符号。在计算机科学中，字符是使用数字编码表示的，例如 Unicode 编码。每个字符都有一个唯一的编码，使得计算机能够识别和处理文本中的不同符号。字符是构成文字和语言的基本组成部分，用于表达和传达信息。"}),"\n",(0,r.jsx)(n.p,{children:"SVG 文本由一系列字符定义，这就是为什么它可以被搜索和选中的原因。"}),"\n",(0,r.jsxs)(n.h3,{id:"字形",children:["字形",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字形",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["字形是指字符的视觉表示形式，通常是字体的外观和样式。同一个字符可以有不同的字形，例如，字母 ",(0,r.jsx)(n.code,{children:"a"})," 可以以不同的字体、大小、粗细和样式呈现出来，每种呈现形式都被称为一个字形。字形包括了字母的形状、笔画和结构，这些元素共同决定了字符的外观。在设计和排版中，选择合适的字形可以影响文本的可读性、视觉效果和美观度。"]}),"\n",(0,r.jsxs)(n.h3,{id:"字体",children:["字体",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字体",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"字体是字形的集合，是指一组具有相似风格和设计特点的字形集合。它包括了字母、数字、标点符号和其他符号的完整集合，以及它们的不同变体和样式。字体通常由字形、字重、字宽、字间距等元素组成。"}),"\n",(0,r.jsx)(n.p,{children:"在字体设计中，字形是指每个字符的具体形态，而字体则是包含了多种字形的整体集合。字体可以根据不同的设计风格和排版要求进行分类，例如衬线体、非衬线体、手写体、黑体等。不同的字体具有不同的特点和风格，可以用于不同的设计目的，如文档排片，Logo 设计、广告制作等。选择合适的字体可以提升文本的可读性、吸引力和视觉效果。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"字形和字体表的集合称为字体数据"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"简而言之，字符是文本中的基本单位，字形是字符的可视化形式，而字体是包含了多种字形的集合。通过理解它们之间的区别，我们可以更好地掌握字体设计和排版的基本概念，从而更有效地处理文本内容。"}),"\n",(0,r.jsxs)(n.h3,{id:"em-盒子",children:["EM 盒子",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#em-盒子",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:H,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"EM 盒子是字体排印中常见的概念，用于确定字符的尺寸和定位。"}),"\n",(0,r.jsxs)(n.p,{children:["简单来说，EM 盒子是一个虚拟的方框，用于包围字体中的字符或字形。它的大小相对于当前字体的 ",(0,r.jsx)(n.code,{children:"em"})," 单位而言，通常等于字体中大写字母 ",(0,r.jsx)(n.code,{children:"M"})," 的宽度和高度。主要用于确定字符或字形的尺寸和定位，是计算字符大小、行高和字间距的重要参考。在排版过程中，EM 盒子的尺寸和位置决定了文本整体布局的外观。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345677438053810214",target:"_blank",rel:"noopener noreferrer",children:"在之前的课程中"}),"，我们已经了解了在 SVG 画布上绘制图形的坐标系以及通过视口查看画布的不同坐标系，如用户坐标系（",(0,r.jsx)(n.code,{children:"viewBox"}),"）。"]}),"\n",(0,r.jsxs)(n.p,{children:["实际上，字体还有一个特定的坐标系。不同字体的几何特性是在基于 EM 盒子的坐标系内表示的。每个字形周围的盒子高度和宽度都是 ",(0,r.jsx)(n.code,{children:"1em"}),"。该盒子称为设计空间，该坐标系称为设计空间坐标系。"]}),"\n",(0,r.jsxs)(n.p,{children:["通过将 EM 盒子分割成每个 ",(0,r.jsx)(n.code,{children:"em"})," 单位的数量来确定具体的坐标。该数字是字体的一个特征，包含在字体表的信息中。"]}),"\n",(0,r.jsxs)(n.p,{children:["通常，该坐标系中的 ",(0,r.jsx)(n.code,{children:"(0,0)"})," 点位于盒子的左边缘，但通常不在左下角。例如，罗马大写字母的底部通常位于 ",(0,r.jsx)(n.code,{children:"y=0"})," 坐标处。某些字母，如小写字母 ",(0,r.jsx)(n.code,{children:"g"})," 或 ",(0,r.jsx)(n.code,{children:"y"}),"，其下沉部分仍然包含在设计空间内，但其 ",(0,r.jsx)(n.code,{children:"y"})," 坐标将为负值。这导致 ",(0,r.jsx)(n.code,{children:"y=0"})," 成为设计空间底部的某个值。"]}),"\n",(0,r.jsx)(n.p,{children:"SVG 假设字体表将提供至少三个字体特征："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["上升：从字体的 ",(0,r.jsx)(n.code,{children:"(0,0)"})," 点到 EM 盒的顶部的距离"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["下降：从字体的 ",(0,r.jsx)(n.code,{children:"(0,0)"})," 点到 EM 盒的底部的距离"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"基线表：设计空间坐标系中一个或多个基线的位置"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"至少，字体表告诉 SVG 如何定位字体内的字形，虽然它可能还包括关于字体粗细等的信息。"}),"\n",(0,r.jsx)(n.p,{children:"由于 SVG 文本元素与文本排版和渲染相关，因此有必要向大家简单介绍一下这几个基本概念。了解完这几个基本概念之后，我们可以开始进入 SVG 的文本元素世界中。"}),"\n",(0,r.jsxs)(n.h2,{id:"text-元素",children:[(0,r.jsx)(n.code,{children:"<text>"})," 元素",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#text-元素",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在SVG中，你可以通过使用 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素来创建文本。该元素定义了一个由文本组成的图形元素，并提供了许多属性选项，例如",(0,r.jsx)(n.code,{children:"x"}),"、",(0,r.jsx)(n.code,{children:"y"}),"、",(0,r.jsx)(n.code,{children:"dx"}),"、",(0,r.jsx)(n.code,{children:"dy"}),"、",(0,r.jsx)(n.code,{children:"rotate"}),"、",(0,r.jsx)(n.code,{children:"textLength"}),"、",(0,r.jsx)(n.code,{children:"lengthAdjust"}),"等等。你可以利用这些属性将文本应用于渐变、图案、剪切路径、蒙板或滤镜。此外，你也可以像使用其他基本图形元素一样对文本进行填充、添加描边等操作。"]}),"\n",(0,r.jsxs)(n.h3,{id:"基本属性-x-y-dx-和-dy",children:["基本属性 ：x 、y 、dx 和 dy",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本属性-x-y-dx-和-dy",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在深入了解这些内容之前，让我们从一个简单的示例开始。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text x="0" y="0" fill="#ED6E46">Hello! SVG Text!</text>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["上面的代码中，我们在 ",(0,r.jsx)(n.code,{children:"<svg>"})," 元素内嵌套了一个 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素，并设置了 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 属性的值为",(0,r.jsx)(n.code,{children:"0"})," ，以便文本在 SVG 视口的原点处呈现。在 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的开始和结束标签之间，你可以添加你想要在 SVG 中显示的文本内容。这就是创建 SVG 文本的简单方式。"]}),"\n",(0,r.jsxs)(n.p,{children:["使用 CSS 给 ",(0,r.jsx)(n.code,{children:"<svg>"})," 元素和 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素添加一些基本样式，以便于大家更好的观看 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素绘制的文本在 SVG 视口中（或用户坐标系中）呈现的效果。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .text {\n        display: block;\n        width: 40vw;\n        outline: 1px dashed #fff;\n        height: auto;\n        --overflow: visible;\n        overflow: var(--overflow);\n        \n        text {\n            font-family:'Leckerli One', cursive;\n            font-size: 4rem;\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/JjVbGpj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjVbGpj"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["请注意文本显示的位置。你可能猜到文本会出现在 SVG 视口的左边缘，但我敢打赌你没想到文本会出现在 SVG 视口的上方。如果在 CSS 中没有将 ",(0,r.jsx)(n.code,{children:"svg"})," 元素的 ",(0,r.jsx)(n.code,{children:"overflow"})," 属性重置为 ",(0,r.jsx)(n.code,{children:"visible"})," （客户端默认将 ",(0,r.jsx)(n.code,{children:"svg"})," 元素的 ",(0,r.jsx)(n.code,{children:"overflow"})," 设置为 ",(0,r.jsx)(n.code,{children:"hidden"})," ， 溢出视口的图形不可见），你都可能看不到 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素绘制的文本内容。"]}),"\n",(0,r.jsxs)(n.p,{children:["造成这种现象的主要原因是 ",(0,r.jsx)(n.code,{children:"y"})," 表示文本基线的位置，基线包含在字体表中，回忆一下前面所说的 EM 盒子（SVG 中，字体还有一个特定的坐标系）："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:J,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["我们可以通过调整 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 值来改变文本在 SVG 视口中的位置。如果你希望文本向右移动，可以给 ",(0,r.jsx)(n.code,{children:"x"})," 设置正值，反之则设置负值；如果希望文本向下移动，可以给 ",(0,r.jsx)(n.code,{children:"y"})," 设置正值，反之则设置负值。一般情况下，如果想让文本在 SVG 视口中呈现，你会给 ",(0,r.jsx)(n.code,{children:"y"})," 设置一个和 ",(0,r.jsx)(n.code,{children:"font-size"})," 相等的值："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text x="0" y="100" fill="#ED6E46" id="text">Hello! SVG Text!</text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Y,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/poBNgXY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poBNgXY"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 不仅仅用于设置文本的起始位置，它们还可以接受一个列表值（以逗号或空格分隔的 ",(0,r.jsx)(n.code,{children:"n"})," 个 ",(0,r.jsx)(n.code,{children:"<length>"})," 的列表）。列表中的第一个坐标是文本的第一个字符的位置，第二个坐标是第二个字符的位置，以此类推。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text x="0" y="100" fill="#ED6E46">Hello! SVG Text!</text>\n    <text x="0,60,100,140,180,220" y="240" fill="lime">Hello! SVG Text!</text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:W,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/rNbWeNN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNbWeNN"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在上述示例中，绿色文本的 ",(0,r.jsx)(n.code,{children:"x"})," 属性设置了一个坐标列表。列表中的第一个坐标（",(0,r.jsx)(n.code,{children:"0"}),"）对应于字符 “H” 的 ",(0,r.jsx)(n.code,{children:"x"})," 位置，而第二个坐标（",(0,r.jsx)(n.code,{children:"60"}),"）对应于字符 “e” 的 ",(0,r.jsx)(n.code,{children:"x"})," 位置，以此类推。一旦坐标列表结束，任何剩余的字符将按照自然顺序跟随在前一个字符之后显示。"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来这个示例中，同时给 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 属性都设置了一个列表值："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text \n        x="0,50,80,100,120,140,130,170,220,280,310,350, 380, 414, 460,480" \n        y="100, 130, 180,240, 280,340,280,280,280,290,330,330,330,350,380,360"  \n        fill="#ED6E46">Hello! SVG Text!</text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/VwNmaeW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwNmaeW"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这种方式使你能够绘制出更具创意的文本效果。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["在 SVG 视口中设置文本位置并不仅限于使用 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 属性。在 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素中，除了 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 属性外，还可以使用 ",(0,r.jsx)(n.code,{children:"dx"})," 和 ",(0,r.jsx)(n.code,{children:"dy"})," 属性。这些属性类似于 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"}),"，但它们表示的是相对于前一个字符的偏移量，而不是相对于视口的绝对位置。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    \x3c!-- 使用绝对位置，起始坐标点是 (50, 300) --\x3e\n    <text x="50" y="300"  fill="#ED6E46">Hello! SVG Text!</text>\n \n    \x3c!-- 在绝对位置 (50,300) 上向右移动 150，向下移动 100，其起始位置相当于 (200, 400) --\x3e\n    <text x="50" y="300" dx="150" dy="100" fill="lime">Hello! SVG Text!</text>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在上面的示例中，橙色文本仅使用 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 属性设置位置，起始位置为 ",(0,r.jsx)(n.code,{children:"(50, 300)"}),"。而绿色文本在橙色文本的基础上增加了 ",(0,r.jsx)(n.code,{children:"dx"})," 和 ",(0,r.jsx)(n.code,{children:"dy"})," 属性的设置，它相当于在 ",(0,r.jsx)(n.code,{children:"(50, 300)"})," 的位置向右移动了 ",(0,r.jsx)(n.code,{children:"150"})," 个单位（",(0,r.jsx)(n.code,{children:'dx="150"'}),"），向下移动了 ",(0,r.jsx)(n.code,{children:"100"})," 个单位（",(0,r.jsx)(n.code,{children:'dy="100"'}),"）。因此，绿色文本的起点位置是 ",(0,r.jsx)(n.code,{children:"(200, 400)"})," 。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/oNOYxJE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNOYxJE"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["与 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 类似，",(0,r.jsx)(n.code,{children:"dx"})," 和 ",(0,r.jsx)(n.code,{children:"dy"})," 的值也可以是一个列表值。例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text x="0" y="100" dx="10, 20, 30, 40, 50, 60" dy="20, 30, 40, 50, 60, 70, -30, -40, -50, -60" fill="#ED6E46">Hello! SVG Text!</text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/jORVrPW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jORVrPW"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在这里，",(0,r.jsx)(n.code,{children:"dx"})," 和 ",(0,r.jsx)(n.code,{children:"dy"})," 上设置了一系列长度值。请注意，随着值的增加，到下一个字符的距离也在增加。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["注意，",(0,r.jsx)(n.code,{children:"<text>"})," 文本内容中的空格也会被算作字符！"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"旋转字符rotate",children:["旋转字符：rotate",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#旋转字符rotate",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["你可以在 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素上使用 ",(0,r.jsx)(n.code,{children:"rotate"})," 属性来旋转字符，它接受一个数字列表，每个数字表示一个特定的字符。如果你设置的旋转值数量与字符数量不匹配，则未设置单独值的字符将遵循最后的设置值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text x="0" y="100" rotate="0, 15, 30, 45"  fill="#ED6E46">Hello! SVG Text!</text>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在这里，字符 “H” 将旋转 ",(0,r.jsx)(n.code,{children:"0deg"})," ，“e” 将旋转 ",(0,r.jsx)(n.code,{children:"15deg"}),' ，“l" 将旋转 ',(0,r.jsx)(n.code,{children:"30deg"})," ，依此类推，直到我们达到列表的末尾，所有剩余字符将旋转 ",(0,r.jsx)(n.code,{children:"45deg"})," （遵循 ",(0,r.jsx)(n.code,{children:"rotate"})," 属性的最后的设置值）："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:X,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/qBwqNqK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBwqNqK"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，使用 ",(0,r.jsx)(n.code,{children:"rotate"})," 属性只会旋转单个字符，而不是整个文本字符串。如果需要旋转整个字符串，则需要使用 ",(0,r.jsx)(n.code,{children:"transform"})," 属性。"]}),"\n",(0,r.jsxs)(n.h3,{id:"文本长度textlength",children:["文本长度：textLength",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文本长度textlength",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"textLength"})," 属性允许你将文本的长度设置为特定的值，而且不用管容器的大小如何："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text x="0" y="100" dx="0" dy="50" textLength="1200" fill="#ED6E46" id="text">Hello! SVG Text!</text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:z,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/GRLNqyK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRLNqyK"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在上面的示例中，如果将 ",(0,r.jsx)(n.code,{children:"textLength"})," 设置为与 ",(0,r.jsx)(n.code,{children:"viewBox"})," 相同的宽度，整个文本将会横跨整个视口的宽度，从一端延伸到另一端。字符会自动间隔开，以填满整个空间。但如果你愿意，你也可以将 ",(0,r.jsx)(n.code,{children:"textLength"})," 设置为一个比所需空间小的长度，这样就会使字符挤在一起。"]}),"\n",(0,r.jsxs)(n.p,{children:["值得注意的是，",(0,r.jsx)(n.code,{children:"textLength"})," 调整的是字符之间的间距，而不是字符本身的大小。"]}),"\n",(0,r.jsxs)(n.h3,{id:"调整字符宽度lengthadjust",children:["调整字符宽度：lengthAdjust",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#调整字符宽度lengthadjust",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["SVG 中的 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"lengthAdjust"})," 属性用于控制文本在指定的长度（由 ",(0,r.jsx)(n.code,{children:"textLength"})," 属性定义）内的拉伸方式。",(0,r.jsx)(n.code,{children:"lengthAdjust"})," 属性有两个可能的值："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"spacing"})}),"：在这种模式下，只调整字符之间的间距，而字符本身的大小保持不变。这意味着字符之间的间距会根据所定义的长度进行调整，但字符的形状和大小不会改变。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"spacingAndGlyphs"})}),"：在这种模式下，不仅会调整字符之间的间距，还会根据所定义的长度拉伸或压缩字符本身，使文本填充指定的长度。这意味着字符的间距和字符本身都会根据所定义的长度进行调整。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在这两个值中，",(0,r.jsx)(n.code,{children:"spacing"})," 是默认值。因此，在之前的示例中，当使用 ",(0,r.jsx)(n.code,{children:"textLength"})," 属性时，文本只会调整字符之间的间距，而不会改变字符本身的大小。然而，如果你将 ",(0,r.jsx)(n.code,{children:"lengthAdjust"})," 属性设置为 ",(0,r.jsx)(n.code,{children:"spacingAndGlyphs"}),"，你会发现字符会被拉伸，而不仅仅是调整字符之间的间距。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text lengthAdjust="spacingAndGlyphs" x="0" y="100" dx="0" dy="50" textLength="1200" fill="#ED6E46" id="text">Hello! SVG Text!</text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/OJGbRyb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJGbRyb"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["通过设置 ",(0,r.jsx)(n.code,{children:"lengthAdjust"})," 属性，可以控制文本在指定长度内的拉伸方式，从而实现不同的文本布局效果。"]}),"\n",(0,r.jsxs)(n.h2,{id:"tspan-元素",children:[(0,r.jsx)(n.code,{children:"<tspan>"})," 元素",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tspan-元素",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["SVG 的 ",(0,r.jsx)(n.code,{children:"<text>"})," 文本元素提供了定位和样式化文本的简单方式，但如果你想对文本的不同部分进行不同的定位和样式化，你需要创建多个 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素吗？其实不需要。在 SVG 中有一种更简单的方法可以实现。"]}),"\n",(0,r.jsxs)(n.p,{children:["除了 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素之外，还有一个 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 元素，你可以将其视为 SVG 文本的 ",(0,r.jsx)(n.code,{children:"<span>"}),"。通过将部分或全部 SVG 文本嵌套在 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 元素中，你可以更好地控制文本的呈现，并相对于彼此定位不同样式或文本片段。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text x="15" y="150" fill="#e13137">Coca-Cola \n        <tspan y="200" fill="gold" font-size="80">is</tspan>\n        <tspan dy="50" dx="30" font-size="120">Cool!</tspan>\n    </text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:q,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/oNOYzZg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNOYzZg"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<tspan>"})," 中的文本会依次显示在一起，就像它们直接在 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素中显示一样，它们之间有一个空格。"]}),"\n",(0,r.jsxs)(n.p,{children:["要知道的是，可用于 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的属性同样也适用于 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 元素。例如，上面示例中的第一个 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 元素的 ",(0,r.jsx)(n.code,{children:"y"})," 坐标改变黄色文本在 ",(0,r.jsx)(n.code,{children:"y"})," 轴的位置；第二个 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 元素设置了 ",(0,r.jsx)(n.code,{children:"dx"})," 和 ",(0,r.jsx)(n.code,{children:"dy"})," ，它会相对于第一个 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 元素定位。"]}),"\n",(0,r.jsxs)(n.p,{children:["通常情况之下，用于 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 会继续其父元素样式，例如 ",(0,r.jsx)(n.code,{children:"rotate"})," 、",(0,r.jsx)(n.code,{children:"textLength"})," 、",(0,r.jsx)(n.code,{children:"lengthAdjust"})," 、",(0,r.jsx)(n.code,{children:"fill"})," 等。例如下面这个示例，改变 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"textLength"})," 和 ",(0,r.jsx)(n.code,{children:"lengthAdjust"})," 属性时，其子元素 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 同样会受到影响："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text textLength="1200" lengthAdjust="spacing" x="15" y="200" fill="#fff" stroke="#e13137" stroke-width="4" id="text">\n        Coca-Cola \n        <tspan dx="-30" y="280" fill="gold" font-size="60" >is</tspan>\n        <tspan  y="280" dx="-30" dy="100" font-size="80" fill="#e13137" stroke="#fff">Cool!</tspan>\n    </text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/zYXoKRQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYXoKRQ"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"可用于-svg-文本的属性",children:["可用于 SVG 文本的属性",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可用于-svg-文本的属性",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"svg-字体属性",children:["SVG 字体属性",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-字体属性",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["以下是你可以在 SVG 中使用的所有字体属性列表。你可以将它们中的任何一个作为 ",(0,r.jsx)(n.code,{children:"<text>"})," 或 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 元素的属性使用。你也可以将它们设置为 CSS 属性："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"font-family"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"font-style"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"font-variant"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"font-weight"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"font-size"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"font-size-adjust"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"font-stretch"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"font"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["其中 ",(0,r.jsx)(n.code,{children:"font"})," 仅作为 CSS 属性提供，不能作为 SVG 元素的属性使用。在使用 SVG 时需要注意的一点是行高（",(0,r.jsx)(n.code,{children:"line-height"}),"）对其没有影响。在 SVG 中，它被假定为与字体大小相同。"]}),"\n",(0,r.jsxs)(n.p,{children:["当谈及到字体在 CSS 中的使用时，你可能会立即想到 ",(0,r.jsx)(n.code,{children:"font-family"})," 、",(0,r.jsx)(n.code,{children:"font-size"})," 、",(0,r.jsx)(n.code,{children:"font-weight"})," 、",(0,r.jsx)(n.code,{children:"font-style"})," 和 ",(0,r.jsx)(n.code,{children:"font-variant"})," 这些属性，因为它们是常见且熟悉的。相较之下，",(0,r.jsx)(n.code,{children:"font-variant"})," 可能对你来说稍显陌生，但如果提到 CSS 中的可变字体特性，你可能会马上联想到它。如果你对 CSS 中的可变字体特性不太熟悉，我建议你阅读一下《",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7246384512219742266",target:"_blank",rel:"noopener noreferrer",children:"Web 上的可变字体"}),"》，它介绍了这个非常有趣的 ",(0,r.jsx)(n.a,{href:"https://s.juejin.cn/ds/iFmyeAww/",target:"_blank",rel:"noopener noreferrer",children:"CSS 现代特性"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["在下面的示例中，我重复了文本“Coca-Cola is Cool!”四次，每次使用不同的字体（",(0,r.jsx)(n.code,{children:"font-family"}),"），并且在每个字体上调整了额外的字体属性，以便你可以看到它们的效果。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text x="10" y="100" fill="lime"  font-family="Palatino" font-variant="small-caps">coca-cola is cool!</text>\n    <text x="10" y="220" fill="gold" font-family="Helvetica" font-style="italic">Coca-Cola is Cool!</text>\n    <text x="10" y="340" fill="pink"  font-family="Georgia" font-weight="bold">Coca-Cola is Cool!</text>\n    <text x="10" y="480" fill="#e13137" font-family="Verdana" font-size="8em">Coca-Cola is Cool!</text>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["第一个 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"font-family"})," 为 ",(0,r.jsx)(n.code,{children:"Palatino"})," ，同时 ",(0,r.jsx)(n.code,{children:"font-variant"})," 的值是 ",(0,r.jsx)(n.code,{children:"small-caps"})," ，注意该元素的文本字符都是小写。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["第二个 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"font-family"})," 为 ",(0,r.jsx)(n.code,{children:"Helvetica"})," ，同时 ",(0,r.jsx)(n.code,{children:"font-style"})," 的值是 ",(0,r.jsx)(n.code,{children:"italic"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["第三个 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"font-family"})," 为 ",(0,r.jsx)(n.code,{children:"Georgia"})," ， 同时 ",(0,r.jsx)(n.code,{children:"font-weight"})," 的值是 ",(0,r.jsx)(n.code,{children:"bold"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["第四个 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"font-family"})," 为 ",(0,r.jsx)(n.code,{children:"Verdana"})," ，同时 ",(0,r.jsx)(n.code,{children:"font-size"})," 的值是 ",(0,r.jsx)(n.code,{children:"8em"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我还在 CSS 中为前三个 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素设置了 ",(0,r.jsx)(n.code,{children:"font-size"})," 为 ",(0,r.jsx)(n.code,{children:"100px"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"text:not(:last-child) {\n    font-size: 100px;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/JjVbMoz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjVbMoz"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["你可能已经发现它们之间的差异了。以第一个 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素为例，尽管元素字符都是小写，但元素设置了 ",(0,r.jsx)(n.code,{children:"font-variant: small-caps"})," ，最终呈现给你的结果是，元素所有字符都变成了大写。"]}),"\n",(0,r.jsxs)(n.p,{children:["需要知道的是，这些属性在 CSS 中设置也是有效的，但在这里它们都作为 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的属性设置。"]}),"\n",(0,r.jsxs)(n.p,{children:["相对而言，可能大家对 ",(0,r.jsx)(n.code,{children:"font-size-adjust"})," 和 ",(0,r.jsx)(n.code,{children:"font-stretch"})," 会略感陌生，因此多花一点时间来聊一下这两个属性。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"font-stretch"})," 属性为字体定义一个正常或经过伸缩变形的字体外观，这个属性并不会通过扩展或压缩而改为字体的几何外形，如 ",(0,r.jsx)(n.code,{children:"font-feature-settings 和 font-variant 属性"}),"，它仅仅意味着当有多种字体可供选择时，会为字体选择最适合的大小。"]}),"\n",(0,r.jsxs)(n.p,{children:["虽然你可能从未使用过它，但 ",(0,r.jsx)(n.code,{children:"font-stretch"})," 是一个有效的 CSS 属性，具有以下可能的值。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"normal"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"wider"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"narrower"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"ultra-condensed"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"extra-condensed"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"condensed"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"semi-condensed"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"semi-expanded"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"expanded"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"extra-expanded"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"ultra-expanded"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"inherit"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["你可能认为该属性确实如其所说，可以拉伸或压缩你正在使用的任何字体，但事实并非如此。",(0,r.jsx)(n.code,{children:"font-stretch"})," 属性适用于带有几个字形的字体，并且根据该属性设置的值，替换最佳字形。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text font-stretch="expanded" lengthAdjust="spacing" x="0" y="100" dx="0" dy="50" textLength="1200" fill="#ED6E46" id="text">Hello! SVG Text!</text>\n  </svg>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:'@font-face {\n    font-family: "Roboto Flex";\n    src: url("https://digitalupgrade.com/images/misc/RobotoFlex-VariableFont_GRADXTRAYOPQYTASYTDEYTFIYTLCYTUCopszslntwdthwght.woff2")\n    format("woff2-variations");\n    font-weight: 1 999;\n    font-style: oblique -10deg 360deg;\n    font-stretch: 0% 999%;\n}\n\ntext {\n    font-family: "Roboto Flex", sans-serif;\n    font-weight: 800;\n    font-style: italic;\n    font-variation-settings: "SSTR" 183, "INLN" 648, "TSHR" 460, "TRSB" 312, "TWRM" 638, "SINL" 557, "TOIL" 333, "TINL" 526, "WORM" 523;\n    font-size: 100px;\n    transition: all 0.3s ease;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/qBwqpaz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBwqpaz"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，要使 ",(0,r.jsx)(n.code,{children:"font-stretch"})," 生效，需要给文本应用一个可变字体。你可以参阅《",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7246384512219742266#heading-3",target:"_blank",rel:"noopener noreferrer",children:"Web 上可变字体"}),"》一文给文本设置一个可变字体。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"font-size-adjust"})," 属性提供了一种修改小写字母大小相对于大写字母大小的方式，以定义整体字体大小。",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7243643072888700985#heading-9",target:"_blank",rel:"noopener noreferrer",children:"在字体回退可能发生的性况下"}),"，这个属性非常有用。"]}),"\n",(0,r.jsxs)(n.p,{children:["字首选字体不可用，并且其替代回退字体具有明显不同的外观值（小写 ",(0,r.jsx)(n.code,{children:"x"})," 字母高度除以字体大小）时，即该字体的小写字母 ",(0,r.jsx)(n.code,{children:"x"})," 和大写字母 ",(0,r.jsx)(n.code,{children:"X"})," 之间的大小差异，可读性可能会成为一个问题。字体的可读性，特别是在小字号时，更多取决于小写字母 ",(0,r.jsx)(n.code,{children:"x"})," 的大小而不是大写字母 ",(0,r.jsx)(n.code,{children:"X"})," 的大小。",(0,r.jsx)(n.code,{children:"font-size-adjust"})," 属性有助于调整回退字体的字号，以保持字体之间的外观值一致，确保文本无论使用何种字体，看起来都类似。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text font-stretch="expanded" font-size-adjust="0.42" lengthAdjust="spacing" x="0" y="100" dx="0" dy="50" textLength="1200" fill="#ED6E46" id="text">Hello! SVG Text XxX!</text>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"字距调整",children:["字距调整",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字距调整",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"大多数情况下，字符和单词之间的默认间距是完全可以接受的，但在处理标题和副标题中的显示类型时，你可能希望调整文本中的间距。SVG提供了一种方法来实现这一点。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["字母间距（",(0,r.jsx)(n.code,{children:"letter-spacing"}),"）：调整所有字母之间的空间。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["单词间距（",(0,r.jsx)(n.code,{children:"word-spacing"}),"）：调整单词之间的空间，而不是单个字符。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"你可能已经熟悉并在 CSS 中使用过这两个属性，即字母间距和单词间距。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text font-stretch="expanded" letter-spacing="20" word-spacing="20" lengthAdjust="spacing" x="0" y="100" dx="0" dy="50" textLength="1200" fill="#ED6E46" id="text">Coca-Cola is Cool!</text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/yLrVpbE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLrVpbE"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"文本装饰",children:["文本装饰",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文本装饰",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在 SVG 中，你可以使用 ",(0,r.jsx)(n.code,{children:"text-decoration"})," 为文本添加上划线（",(0,r.jsx)(n.code,{children:"overline"}),"）、删除线（",(0,r.jsx)(n.code,{children:"line-through"}),"）和下划线（`underline）："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text  x="0" y="200" fill="#ED6E46">\n        <tspan text-decoration="overline">Hello!</tspan>  \n        <tspan text-decoration="underline">SVG</tspan>\n        <tspan text-decoration="line-through">Text!</tspan>\n    </text>\n  \n    <text x="0" y="400" text-decoration="overline line-through underline" fill="lime">Coca-Cola is Cool!</text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/VwNmQrM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwNmQrM"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我原以为 CSS 的 ",(0,r.jsx)(n.code,{children:"text-decoration"})," 相关的特性也可以应用于 SVG 文本中，但我尝试了一下，并没有预期的好。你可以通过下面这个案例体验一下 CSS 的 ",(0,r.jsx)(n.code,{children:"text-decoration"})," 属性给文本设置装饰的效果："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/OJVEQRo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJVEQRo"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"text-anchor-属性",children:["text-anchor 属性",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#text-anchor-属性",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["默认情况下，当你定位 SVG 文本时，你指定的位置与文本的左边缘和基线对齐。SVG 的 ",(0,r.jsx)(n.code,{children:"text-anchor"})," 属性允许你在 EM 框的开始（",(0,r.jsx)(n.code,{children:"start"}),"）、中间（",(0,r.jsx)(n.code,{children:"middle"}),"）或结束（",(0,r.jsx)(n.code,{children:"end"}),"）水平对齐文本。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"text-anchor"})," 属性应用于给定 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素中的每个单独的文本块。每个文本块都有一个初始的当前文本位置，它代表了用户坐标系中的一个点，该点由以下情况（具体取决于上下文）决定：",(0,r.jsx)(n.code,{children:"<text>"})," 元素上的 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 属性的应用，分配给文本块中第一个呈现字符的任何 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 或 ",(0,r.jsx)(n.code,{children:"<tref>"})," 元素（注意，该元素已在 SVG2 中删除）上的 ",(0,r.jsx)(n.code,{children:"x"})," 或 ",(0,r.jsx)(n.code,{children:"y"})," 属性值，或者确定 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 元素的初始当前文本位置。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text   text-anchor="start" font-stretch="expanded" lengthAdjust="spacing" x="0" y="100" dx="0" dy="50" textLength="1200" letter-spacing="20" word-spacing="20" fill="#ED6E46" id="text">Coca-Cola is Cool! </text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/jORVZBR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jORVZBR"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"基线对齐",children:["基线对齐",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基线对齐",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"不同的字体可以具有不同的基线，因此在 EM 框内具有不同的位置："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"对于水平书写，表意文字（汉字、片假名、平假名和韩文字母）的基线对齐到字形的底部附近。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"字母基础的文字（拉丁文、西里尔文、希伯来文、阿拉伯文）的基线对齐到大多数字形的底部，但某些字形会下降到基线以下。"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"印度基础的文字则在字形顶部附近对齐。"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"如果你始终使用单一字体，就没有问题，但如果在一行中更换字体，则可能会出现问题。实际上，更换字体可能比你想象的更常见。"}),"\n",(0,r.jsx)(n.p,{children:"例如，一个 Logo 中的两个词使用不同的字体并不少见，或者你可能会在句子中间切换到等宽字体以显示代码。根据所涉及的字体，它们可能无法沿着相同的基线对齐。"}),"\n",(0,r.jsx)(n.p,{children:"在 SVG 中，它提供了几个基线对齐属性，允许你调整不同的基线："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"dominant-baseline"}),"：用于确定或重新确定缩放的基线表。它可以采用以下任何值：",(0,r.jsx)(n.code,{children:"auto"}),"、",(0,r.jsx)(n.code,{children:"use-script"}),"、",(0,r.jsx)(n.code,{children:"no-change"}),"、",(0,r.jsx)(n.code,{children:"reset-size"}),"、",(0,r.jsx)(n.code,{children:"ideographic"}),"、",(0,r.jsx)(n.code,{children:"alphabetic"}),"、",(0,r.jsx)(n.code,{children:"hanging"}),"、",(0,r.jsx)(n.code,{children:"mathematical"}),"、",(0,r.jsx)(n.code,{children:"central"}),"、",(0,r.jsx)(n.code,{children:"middle"}),"、",(0,r.jsx)(n.code,{children:"text-after-edge"}),"、",(0,r.jsx)(n.code,{children:"text-before-edge"}),"、",(0,r.jsx)(n.code,{children:"inherit"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"alignment-baseline"}),"：指定要与父元素的相应基线对齐的基线，它接受类似于 ",(0,r.jsx)(n.code,{children:"dominant-baseline"})," 属性的一组值。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"baseline-shift"}),"：允许重新定位相对于父元素的基线的基线，它接受 ",(0,r.jsx)(n.code,{children:"sub"}),"、",(0,r.jsx)(n.code,{children:"super"}),"、",(0,r.jsx)(n.code,{children:"<percent>"}),"、",(0,r.jsx)(n.code,{children:"<length>"})," 四个值，对于后两个值，正值向上移动文本（",(0,r.jsx)(n.code,{children:"super"}),"），负值向下移动文本（",(0,r.jsx)(n.code,{children:"sub"}),"）。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text  dominant-baseline="middle" alignment-baseline="middle" text-anchor="start" font-stretch="expanded" lengthAdjust="spacing" x="0" y="100" dx="0" dy="50" textLength="1200" letter-spacing="20" word-spacing="20" fill="#ED6E46" id="text">\n        Coca-Cola is Cool! \n        <tspan font-size="60" dx="-50" dy="0" fill="lime" baseline-shift="super" id="tspan">TM</tspan>\n    </text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:G,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/poBNaQv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poBNaQv"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"svg-文本沿着路径布局",children:["SVG 文本沿着路径布局",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-文本沿着路径布局",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:V,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"除了在直线上布置文本之外，SVG 在你创建的任何路径上布局文本。这为显示文本打开了许多可能性。"}),"\n",(0,r.jsxs)(n.p,{children:["要创建沿路径的 SVG 文本，你需要将 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 和 ",(0,r.jsx)(n.code,{children:"<path>"})," 组合起来使用："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<path>"})," 绘制一条路径，并且给该路径定义一个 ",(0,r.jsx)(n.code,{children:"id"})," 名"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<textPath>"})," 元素通过 ",(0,r.jsx)(n.code,{children:"xlink:href"})," 来引用 ",(0,r.jsx)(n.code,{children:"path"})," 中的 ",(0,r.jsx)(n.code,{children:"id"})," ，即引用路径。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，SVG 2 删除了 ",(0,r.jsx)(n.code,{children:"xlink:"})," ，直接使用 ",(0,r.jsx)(n.code,{children:"href"})," 属性来引用路径。"]}),"\n",(0,r.jsx)(n.p,{children:"接下来，我们通过一个示例来向大家展示，SVG 中如何将文本放置在指定的路径上。"}),"\n",(0,r.jsxs)(n.p,{children:["首先，使用 SVG 的 ",(0,r.jsx)(n.code,{children:"<path>"})," 元素创建一个路径，例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="svgwave" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 301 21">\n    <path id="wavepath"  d="M0,.5c30.0978,0,30.0978,20,60.1956,20S90.2948.5,120.394.5s30.1,20,60.2,20c30.1015,0,30.1015-20,60.203-20s30.1014,20,60.2029,20" fill="none" stroke="#fefefe" stroke-width="1" stroke-dasharray="8" stroke-dashoffset="4" stroke-miterlimit="6" />\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["记得要给 ",(0,r.jsx)(n.code,{children:"<path>"})," 定义一个 ",(0,r.jsx)(n.code,{children:"id"})," 名，这里给它命名为 ",(0,r.jsx)(n.code,{children:"wavepath"})," ，因为稍后这个 ",(0,r.jsx)(n.code,{children:"id"})," 名要被引用。你将看到一条类似波浪形的路径："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["如果你觉得使用 ",(0,r.jsx)(n.code,{children:"<path>"})," 元素的命令绘制路径感到困难，那么你可以考虑使用诸如 Figma 这样的图形设计软件或 ",(0,r.jsx)(n.a,{href:"https://codepen.io/anthonydugois/full/mewdyZ/",target:"_blank",rel:"noopener noreferrer",children:"SVG Path Builder"})," 在线工具来获取路径的数据（",(0,r.jsx)(n.code,{children:"d"})," 属性的值）。这里假设你能轻易获得各种你喜欢的路径数据，或者移步阅读《",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345813971552698406",target:"_blank",rel:"noopener noreferrer",children:"初级篇：SVG图形基本元素"}),"》一课，了解如何获取路径。"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，使用 ",(0,r.jsx)(n.code,{children:"<text>"})," 和 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 元素创建文本，其中 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 嵌套在 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素中。最为关键的是在 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 元素上设置 ",(0,r.jsx)(n.code,{children:"xlink:href"})," （SVG 2 可以直接使用 ",(0,r.jsx)(n.code,{children:"href"}),"）引用已创建的 ",(0,r.jsx)(n.code,{children:"<path>"})," 的 ",(0,r.jsx)(n.code,{children:"id"})," ，即引用路径："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="svgwave" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 301 21">\n     <path id="wavepath" d="M0,.5c30.0978,0,30.0978,20,60.1956,20S90.2948.5,120.394.5s30.1,20,60.2,20c30.1015,0,30.1015-20,60.203-20s30.1014,20,60.2029,20" fill="none" stroke="#fefefe" stroke-width="1" stroke-dasharray="8" stroke-dashoffset="4" stroke-miterlimit="6" />\n\n    <text text-anchor="middle" fill="#e13137">\n        <textPath class="my-text" href="#wavepath" startOffset="50%">My text is on a wavy path!</textPath>\n    </text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/ZEZBxzp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZEZBxzp"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你不希望路径在 SVG 画布中呈现，最简单的方式是将 ",(0,r.jsx)(n.code,{children:"<path>"})," 放置在 ",(0,r.jsx)(n.code,{children:"<defs>"})," 元素内："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="svgwave" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 301 21">\n    <defs>\n        <path id="wavepath" d="M0,.5c30.0978,0,30.0978,20,60.1956,20S90.2948.5,120.394.5s30.1,20,60.2,20c30.1015,0,30.1015-20,60.203-20s30.1014,20,60.2029,20" fill="none" stroke="#fefefe" stroke-width="1" stroke-dasharray="8" stroke-dashoffset="4" stroke-miterlimit="6" />\n    </defs>\n    <text text-anchor="middle" fill="#e13137">\n        <textPath class="my-text" href="#wavepath" startOffset="50%">\n          My text is on a wavy path!\n        </textPath>\n    </text>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/QWPGmpy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWPGmpy"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["你可能已经注意到了，示例中的 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 元素除了使用了 ",(0,r.jsx)(n.code,{children:"href"})," 属性来引用路径之外，还设置了一个 ",(0,r.jsx)(n.code,{children:"startOffset"})," 属性。",(0,r.jsx)(n.code,{children:"startOffset"})," 属性允许你偏移路径的起点以获得初始文本位置。它采用长度作为值，可以是百分比或数字。如果使用后者，则数字表示当前坐标系中的路径距离。"]}),"\n",(0,r.jsxs)(n.p,{children:["你可以尝试着拖动下面示例中的滑块，调整 ",(0,r.jsx)(n.code,{children:"startOffset"})," 的值，这样你就可以看到它的工作原理："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/MWRbVGo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWRbVGo"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["实际上，你可以不使用 ",(0,r.jsx)(n.code,{children:"startOffset"})," 来偏移路径。将 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 上的 ",(0,r.jsx)(n.code,{children:"startOffset"})," 属性删除，并在它的父元素 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素上设置 ",(0,r.jsx)(n.code,{children:"x"})," 的坐标："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="svgwave" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 301 21">\n    <path id="wavepath" d="M0,.5c30.0978,0,30.0978,20,60.1956,20S90.2948.5,120.394.5s30.1,20,60.2,20c30.1015,0,30.1015-20,60.203-20s30.1014,20,60.2029,20" fill="none" stroke="#fefefe" stroke-width="1" stroke-dasharray="8" stroke-dashoffset="4" stroke-miterlimit="6" />\n    <text text-anchor="start" fill="#e13137">\n        <textPath id="textPath"  href="#wavepath" startOffset="0%">\n          My text is on a wavy path!\n        </textPath>\n    </text>\n    \n    <text text-anchor="start" fill="lime" fill-opacity="0.5" x="0%" id="text">\n        <textPath href="#wavepath">\n          My text is on a wavy path!\n        </textPath>\n    </text>\n\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/pen/vYMyRZb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/pen/vYMyRZb"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["上面这个示例中，红色文本是通过改变 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 的 ",(0,r.jsx)(n.code,{children:"startOffset"})," 属性来设置文本在路径上的起始偏移位置；带透明度的绿色文本则是通过改变 ",(0,r.jsx)(n.code,{children:"<text>"})," 的 ",(0,r.jsx)(n.code,{children:"x"})," 坐标来设置文本在路径上的起始偏移位置。你会发现它们的效果看起来是相同的。请注意，示例中只给 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素设置了 ",(0,r.jsx)(n.code,{children:"x"})," 的值，但文本在 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 方向上都沿着路径移动。",(0,r.jsx)(n.code,{children:"x"})," 的值沿着路径平移文本，不要将其视为水平和垂直，而应该视为平行和垂直于路径。"]}),"\n",(0,r.jsxs)(n.p,{children:["这意味着，使用 ",(0,r.jsx)(n.code,{children:"<animate>"})," 你可以制作一个文本沿指定路径运动的动画效果："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="svgwave" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 301 21">\n    <path id="wavepath" d="M0,.5c30.0978,0,30.0978,20,60.1956,20S90.2948.5,120.394.5s30.1,20,60.2,20c30.1015,0,30.1015-20,60.203-20s30.1014,20,60.2029,20" fill="none" stroke="#fefefe" stroke-width="1" stroke-dasharray="8" stroke-dashoffset="4" stroke-miterlimit="6" />\n\n    <text text-anchor="middle" fill="#e13137">\n        <textPath class="my-text" href="#wavepath" startOffset="50%">\n            <animate attributeName="startOffset" from="-50%" to="150%" begin="0s" dur="3s" repeatCount="indefinite" />\n          My text is on a wavy path!\n        </textPath>\n    </text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/qBwqoQQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBwqoQQ"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，",(0,r.jsx)(n.code,{children:"<animate>"})," 涉及到 SVG 动画相关的知识，小册后面会专门介绍这方面的知识。如果你现在迫切就想知道 SVG 动画相关的知识，建议你移步阅读《",(0,r.jsx)(n.a,{href:"https://s.juejin.cn/ds/iFukErqx/",target:"_blank",rel:"noopener noreferrer",children:"Web 动画之旅"}),"》关于 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7308623638335815692",target:"_blank",rel:"noopener noreferrer",children:"SVG 动画那部分课程"}),"！另外，",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7308623339038670860",target:"_blank",rel:"noopener noreferrer",children:"CSS 中的 offset-path 和 offset-distance 结合"}),"在一起也可以创建文本沿着指定路径运动的动画效果。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<textPath>"})," 元素的另两个属性是 ",(0,r.jsx)(n.code,{children:"method"})," 和 ",(0,r.jsx)(n.code,{children:"spacing"})," ，你可能不会经常使用这两个属性。因为它们都是用来细化文本（或间距）在路径上的呈现方式的。"]}),"\n",(0,r.jsx)(n.p,{children:"这里简单的介绍一下它们："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"method"})," ：它允许你指定字形应如何沿路径呈现的两种方式之一。它接受 ",(0,r.jsx)(n.code,{children:"align"})," 和 ",(0,r.jsx)(n.code,{children:"stretch"})," 两个值，其中 ",(0,r.jsx)(n.code,{children:"align"})," 是默认值。",(0,r.jsx)(n.code,{children:"align"})," 值使用简单的 ",(0,r.jsx)(n.code,{children:"2\xd73"})," 转换方式呈现字形，使得字形既不拉伸也不扭曲。",(0,r.jsx)(n.code,{children:"stretch"})," 值将拉伸并可能扭曲字形，但根据路径的不同，可能看起来更好。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"spacing"})," ：它类似地调整了沿路径渲染的文本（或文本间距）。它接受 ",(0,r.jsx)(n.code,{children:"exact"})," 和 ",(0,r.jsx)(n.code,{children:"auto"})," 两个值，其中 ",(0,r.jsx)(n.code,{children:"exact"})," 是默认值。",(0,r.jsx)(n.code,{children:"exact"})," 值会告诉浏览器按照文本在路径上的布局规则精确呈现字形。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["另外，在 SVG 2 中，",(0,r.jsx)(n.code,{children:"<textPath>"})," 还新增了 ",(0,r.jsx)(n.code,{children:"d"})," 和 ",(0,r.jsx)(n.code,{children:"side"})," 两个属性："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"d"})," 属性与你用于设置路径的 ",(0,r.jsx)(n.code,{children:"d"})," 属性相同。SVG 2 将允许你直接在 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 元素上设置它，这样就不需要在 SVG 文档中额外使用 ",(0,r.jsx)(n.code,{children:"<path>"})," 元素来设定路径。如果一个 ",(0,r.jsx)(n.code,{children:"<texgtPath>"})," 元素同时包含 ",(0,r.jsx)(n.code,{children:"d"})," 属性和 ",(0,r.jsx)(n.code,{children:"href"})," 属性，那么 ",(0,r.jsx)(n.code,{children:"href"})," 属性将会被忽略，而在 ",(0,r.jsx)(n.code,{children:"d"})," 上设置的路径将是文本呈现的路径。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"side"})," 属性将采用 ",(0,r.jsx)(n.code,{children:"left"})," （默认值） 或 ",(0,r.jsx)(n.code,{children:"right"})," 值，它有效地反转路径"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"svg-文本案例",children:["SVG 文本案例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-文本案例",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"通过上面的学习，我想你对 SVG 文本有了一定的认识。接下来，通过几个具体的案例来加强你对 SVG 文本的理解。"}),"\n",(0,r.jsxs)(n.h3,{id:"文本描边效果",children:["文本描边效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文本描边效果",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["文本描边的效果是 Web 应用或页面上常见的文本效果。在 CSS 中通常会使用 ",(0,r.jsx)(n.code,{children:"text-shadow"})," 或 ",(0,r.jsx)(n.code,{children:"text-stroke"})," 给文本添加描边效果。但使用 SVG 文本可能会创建出最好看的文本描边效果。除了效果好之外，使用也非常简单。你只需要在 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素设置 ",(0,r.jsx)(n.code,{children:"stroke"})," 和 ",(0,r.jsx)(n.code,{children:"stroke-width"})," 两个属性值即可，前者设置描边颜色，后者设置描边的粗细。当然，你也可以给 ",(0,r.jsx)(n.code,{children:"<text>"})," 设置一个 ",(0,r.jsx)(n.code,{children:"fill"})," 属性，给文本设置一个填充色："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="text" viewBox="0 0 1200 600">\n    <text x="15" y="150" fill="#e13137" stroke="lime" stroke-width="4">Coca-Cola is Cool!\n  </text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/yLrVjBp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLrVjBp"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"使用 SVG 描边创建双重轮廓或多重轮廓文本效果也非常简单，只需对上面的代码进行几处修改即可："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg  viewBox="0 0 800 600" class="text">\n    \x3c!--   创建双重描边 --\x3e\n    <g>\n        <text stroke="#e13137" stroke-width="12" x="50%" y="40%">Coca-Cola is Cool!</text>\n        <text stroke="dodgerblue" stroke-width="4" x="50%" y="40%">Coca-Cola is Cool!</text>\n    </g>\n    \n    \x3c!-- 创建多重描边  --\x3e\n    <g>\n        <text stroke="#e13137" stroke-width="20" x="50%" y="70%">Coca-Cola is Cool!</text>\n        <text stroke="dodgerblue" stroke-width="12" x="50%" y="70%">Coca-Cola is Cool!</text>\n        <text stroke="orange" stroke-width="4" x="50%" y="70%">Coca-Cola is Cool!</text>\n    </g>\n</svg>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'text {\n    font-family: "Leckerli One", cursive;\n    font-size: 120px;\n    text-anchor: middle;\n    fill: none;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/yLrVjev",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLrVjev"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["只需在 SVG 中添加多个带有不同描边值的 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素即可。请注意，要从最粗的描边开始，逐渐使用较细的描边值（",(0,r.jsx)(n.code,{children:"stroke-width"}),"）。因为文本元素将叠加在彼此之上，形成多重描边文本效果。"]}),"\n",(0,r.jsx)(n.p,{children:"你甚至还可以借助 SVG 滤镜来创建描边的效果："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600" class="text">\n    <defs>\n        <filter id="stroke-text-svg-filter">\n            <feMorphology operator="dilate" radius="2"></feMorphology>\n            <feComposite operator="xor" in="SourceGraphic" />\n        </filter>\n    </defs>\n\n    <text fill="red" filter="url(#stroke-text-svg-filter)" x="50%" y="50%">Coca-Cola is Cool!</text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/OJGbZmp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJGbZmp"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"SVG 滤镜具有很多神奇的功能，它允许你创作很多与众不同的文本效果，例如下面这个示例，使用 SVG 滤镜制作出一个带有玻璃效果的文本："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600" class="text">\n    <defs>\n        <filter id="distortion">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" result="turbulence" />\n            <feDisplacementMap in2="turbulence" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n\n        <filter id="textFilter">\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="dark_edge_01" />\n            <feOffset dx="5" dy="5" in="dark_edge_01" result="dark_edge_03" />\n            <feFlood flood-color="rgba(0,0,0,.5)" result="dark_edge_04" />\n            <feComposite in="dark_edge_04" in2="dark_edge_03" operator="in" result="dark_edge" />\n          \n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="light_edge_01" />\n            <feOffset dx="-2" dy="-2" in="light_edge_01" result="light_edge_03" />\n            <feFlood flood-color="rgba(255,255,255,.5)" result="light_edge_04" />\n            <feComposite in="light_edge_04" in2="light_edge_03" operator="in" result="light_edge" />\n          \n            <feMerge result="edges">\n                <feMergeNode in="dark_edge" />\n                <feMergeNode in="light_edge" />\n            </feMerge>\n            <feComposite in="edges" in2="SourceGraphic" operator="out" result="edges_complete" />\n    \n            <feGaussianBlur stdDeviation="5" result="bevel_blur" />\n            <feSpecularLighting result="bevel_lighting" in="bevel_blur" specularConstant="2.4" specularExponent="13" lighting-color="rgba(60,60,60,.4)">\n                <feDistantLight azimuth="25" elevation="40" />\n            </feSpecularLighting>\n            <feComposite in="bevel_lighting" in2="SourceGraphic" operator="in" result="bevel_complete" />\n    \n            <feMerge result="complete">\n                <feMergeNode in="edges_complete" />\n                <feMergeNode in="bevel_complete" />\n            </feMerge>\n\n        </filter>\n    </defs>\n    \n    <clipPath id="clip">\n        <text x="50%" y ="50%" dominant-baseline="middle" text-anchor="middle">Coca-Cola is Cool!</text>\n    </clipPath>\n    \n    <image href="https://picsum.photos/1920/1024?random=1" x="-50%" y="-50%" />\n    <image href="https://picsum.photos/1920/1024?random=1" x="-50%" y="-50%" clip-path="url(#clip)" filter= "url(#distortion)" />\n        \n    <text x="50%" y ="50%" dominant-baseline="middle" text-anchor="middle" filter="url(#textFilter)">Coca-Cola is Cool!</text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/wvZojrq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvZojrq"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"会不会因为看到这些神奇的 SVG 标签元素感到恐惧，不用担心，随着后续课程的学习，你会明白这些标签起什么作用，你也能使用这些标签元素创作出更精美的图形效果。"}),"\n",(0,r.jsxs)(n.h3,{id:"web-中不规则形状的文本",children:["Web 中不规则形状的文本",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#web-中不规则形状的文本",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"通常情况下，在 Web 开发过程中涉及将不规则形状的文本时会使用图片。然而，使用 SVG 可以创建动态、响应式和可访问的图形。"}),"\n",(0,r.jsxs)(n.p,{children:["在 SVG 中你只需要将 ",(0,r.jsx)(n.code,{children:"<path>"})," 和 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 结合起来使用，你就可以将文本放置在任何不规则的形状上。例如下面这种将文本放置在不规则的丝带上的效果："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"首先，你可以使用诸如 Figma 这样的图形设计软件来获得所需要的丝带图形，并为每个图形添加一个路径，用于放置文本，如下图中手虚线，就是放置文本所需要的路径："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"对应的 SVG 代码如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 691.3 201.8" class="text">\n    \x3c!-- 丝带一 --\x3e\n    <g id="banner">\n        <path d="M148.6 79.6V21.7c-6.6-3.1-13.7-5.6-20.7-7.7C86.6 1.7 42.7-1.8 0 3.7c25.3 17.2 47.2 39.5 64.1 65.1-20.7 9.5-39.2 23.8-53.6 41.4C52 112.3 93 123.8 129.3 144l19.3-64.4zM549.7 121.8v57.9c45 16.4 94 22 141.6 16.2-27.4-15.1-50.8-37.4-67.1-64 13.4-3.9 26.3-9.4 38-16.9 10.6-6.7 20.2-15.1 28-24.8-39-3.5-77.1-15.7-114.3-28.4l-26.2 60z" fill="#139faa"/>\n        <path d="M105 46c0-13.7 11.2-24.8 24.9-24.6l18.7.3v46.5c-13.5-4.8-26.5-11.1-38.5-18.8L105 46zM549.7 179.7v-39.9c14.8 5.8 28.9 13.3 41.7 22.6 0 9.6-7.8 17.4-17.4 17.4h-24.3z" fill="#01686b"/>\n        <path d="M591.3 160.8v1.6c-26.5-19.1-58.4-31-90.9-35.1-45.1-5.7-91.4 3-133.2 20.8-35.8 15.2-69 37-106.5 47.3-52.4 14.5-111 4-155.7-26.8V46.1C149.7 77 208.2 87.4 260.7 73c37.5-10.3 70.7-32.1 106.5-47.3C409.1 7.8 455.3-.9 500.4 4.8c32.5 4.1 64.4 16 90.9 35.1v120.9z" fill="#3dc0d1"/>\n      </g>\n      \n      \x3c!-- 放置文本的路径 --\x3e\n      <path id="text-path" d="M108.7 124.1c44.2 29 101 38.4 152 24.4 37.5-10.3 70.7-32.1 106.5-47.3 41.9-17.8 88.1-26.4 133.2-20.8 31.7 4 62.7 15.3 88.7 33.6" fill="none" stroke="#333" stroke-width="2" stroke-dasharray="8" stroke-dashoffset="4" stroke-miterlimit="6"/>\n</svg>\n\n<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 691.3 201.8" class="text">\n    \x3c!-- 丝带二 --\x3e\n    <g id="banner-02">\n        <path d="M106.7 59.6C60.4 68.4 21.1 89.5 3.6 100c21.2 10 43.4 18 66.1 24-9.1 23-17.3 46.3-24.5 70 27.7-13.9 94.4-44.2 172.9-56.6.9-11.7-2.6-23.6-9.7-32.9L106.7 59.6z" fill="#139faa"/>\n        <path d="M218.1 137.4c-.2 0-.3 0-.5.1l-2.1.3c-.3 0-.6.1-1 .1-11 1.6-46.1 6-89.2 1.2 28.3-11.8 58.2-20.1 88.4-25.8 3.5 7.5 5 15.9 4.4 24.1z" fill="#01686b"/>\n        <path d="M584.5 59.6c46.3 8.8 85.6 30 103.1 40.5-21.2 10-43.4 18-66.1 24 9.1 23 17.3 46.3 24.5 70-27.7-13.9-94.4-44.2-172.9-56.6-.9-11.7 2.6-23.6 9.7-32.9l101.7-45z" fill="#139faa"/>\n        <path d="M345.6 104.3c46.5 0 81.1-.1 124.9 7.7 32.6 5.8 64.9 14.4 95.5 27.1 6.5-19.7 23.2-70.3 32.7-99.4-35.6-13.2-73.2-22.1-111.2-28.1C437.8 3.9 398.4 4 345.6 4c-52.8 0-92.2-.1-141.9 7.7-38.1 6-75.7 14.9-111.2 28.1 9.6 29 26.2 79.7 32.7 99.4 30.6-12.7 62.9-21.3 95.5-27.1 43.8-7.9 78.5-7.8 124.9-7.8z" fill="#3dc0d1"/>\n        <path d="M473.1 137.4c.2 0 .3 0 .5.1l2.1.3c.3 0 .6.1 1 .1 11 1.6 46.1 6 89.2 1.2-28.3-11.8-58.2-20.1-88.4-25.8-3.4 7.5-5 15.9-4.4 24.1z" fill="#01686b"/>\n    </g>\n    \x3c!-- 放置文本路径 --\x3e\n    <path id="text-path-02"  d="M116.7 96.2c28.3-8.8 57.6-15.2 87.1-19.9 49.7-7.8 89.1-7.7 141.9-7.7 52.8 0 92.2-.1 141.9 7.7 30.2 4.7 60.1 11.3 88.9 20.4" fill="none" stroke="#333" stroke-width="2" stroke-dasharray="8" stroke-dashoffset="4" stroke-miterlimit="6" />\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["注意，上面两点黑色虚线的 ",(0,r.jsx)(n.code,{children:"<path>"})," 仅是为了能更好的向大家展示，后面可以将 ",(0,r.jsx)(n.code,{children:"#text-path"})," 和 ",(0,r.jsx)(n.code,{children:"#text-path-02"})," 两个 ",(0,r.jsx)(n.code,{children:"<path>"})," 元素放到 ",(0,r.jsx)(n.code,{children:"<defs>"})," 标签中。"]}),"\n",(0,r.jsxs)(n.p,{children:["接着添加所需要的文本，并在 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 元素上使用 ",(0,r.jsx)(n.code,{children:"href"})," 引入文本所需路径："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 691.3 201.8" class="text">\n    <defs>\n        \x3c!-- 放置文本所需的路径 --\x3e\n        <path id="text-path" d="M108.7 124.1c44.2 29 101 38.4 152 24.4 37.5-10.3 70.7-32.1 106.5-47.3 41.9-17.8 88.1-26.4 133.2-20.8 31.7 4 62.7 15.3 88.7 33.6" fill="none" stroke="#333" stroke-width="2" stroke-dasharray="8" stroke-dashoffset="4" stroke-miterlimit="6" />\n    </defs>\n    <g id="banner">\x3c!-- 丝带 --\x3e</g>\n\n    \x3c!-- 需要放置的文本 --\x3e\n    <text>\n        <textPath href="#text-path" startOffset="50%">Coca-Cola is Cool!</textPath>\n    </text>\n</svg>\n\n<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 691.3 201.8" class="text">\n    <defs>\n        \x3c!-- 放置文本所需的路径 --\x3e\n        <path id="text-path-02" d="M116.7 96.2c28.3-8.8 57.6-15.2 87.1-19.9 49.7-7.8 89.1-7.7 141.9-7.7 52.8 0 92.2-.1 141.9 7.7 30.2 4.7 60.1 11.3 88.9 20.4" fill="none" stroke="#333" stroke-width="2" stroke-dasharray="8" stroke-dashoffset="4" stroke-miterlimit="6" />\n    </defs>\n    <g id="banner-02">\x3c!-- 丝带 --\x3e</g>\n\n    \x3c!-- 需要放置的文本 --\x3e\n    <text>\n        <textPath href="#text-path-02" startOffset="50%">Coca-Cola is Cool!</textPath>\n    </text>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["使用 CSS 给 ",(0,r.jsx)(n.code,{children:"textPath"})," 添加一点样式："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:'textPath {\n    font-family: "Leckerli One", cursive;\n    fill: oklch(0.35 0.07 194.63);\n    font-size: 325%;\n    font-weight: 800;\n    letter-spacing: 0.02em;\n    text-anchor: middle;\n    text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"最终你所看到的效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/bGJBKBm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGJBKBm"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://codepen.io/wheatup/full/rXJrYm",target:"_blank",rel:"noopener noreferrer",children:"@Wheatup 在 CodePen 上提供了一个与 Web UI 结合的更紧密的案例"}),"，采用与上面思路一样的方案，在将文本放大卡片背景不规则形状（也类似一个丝带）上："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/wheatup/full/rXJrYm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/wheatup/full/rXJrYm"})," （来源于 ",(0,r.jsx)(n.a,{href:"https://codepen.io/wheatup/full/rXJrYm",target:"_blank",rel:"noopener noreferrer",children:"@Wheatup "}),"）"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"web-上的圆形文本",children:["Web 上的圆形文本",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#web-上的圆形文本",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"你是否曾经有过这样的需求，将文本放置在一个圆环。面对这样的一个需求，你是还在使用图片做为解决方案呢？还是思考着更优雅，更完美的方案呢？"}),"\n",(0,r.jsxs)(n.p,{children:["我想告诉大家的是，当下要实现这样的需求并不是件难事，有多种不同的解决方案可以帮助你实现，例如，使用 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7252964839705247755",target:"_blank",rel:"noopener noreferrer",children:"CSS 自定义属性"}),"和 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7242216512176521277",target:"_blank",rel:"noopener noreferrer",children:"CSS 的三角函数"}),"，你可以完全拥有一个纯 CSS 的解决方案。例如 ",(0,r.jsx)(n.a,{href:"https://codepen.io/jh3y",target:"_blank",rel:"noopener noreferrer",children:"@Jhey"})," 在 CodePen 上提供的这个解决方案："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/jh3y/full/QWVwppw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/jh3y/full/QWVwppw"})," （来源于 ",(0,r.jsx)(n.a,{href:"https://codepen.io/jh3y",target:"_blank",rel:"noopener noreferrer",children:"@Jhey"})," ）"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["除了纯 CSS 的解决方案之外，还可以使用 SVG 的 ",(0,r.jsx)(n.code,{children:"textPath"})," 来实现。你只需要将文本放置在一个圆形的路径上即可："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" class="text">\n    <path id="circlePath" fill="none" stroke-width="2" stroke="hsl(10 100% 50% / 0.5)" d=" M 10, 50 a 40,40 0 1,1 80,0 a 40,40 0 1,1 -80,0 " />\n    <text id="text"  font-size="14" font-weight="bold" fill="hsl(0 100% 50%)">\n        <textPath id="textPath" href="#circlePath">Coca-Cola is Cool! Coca-Cola is Cool!</textPath>\n    </text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/KKYNBPp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKYNBPp"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["这种方案有两点需要注意。第一点就是你不能直接使用 ",(0,r.jsx)(n.code,{children:"<circle>"})," 绘制的圆形当作 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 路径。这意味着你需要将一个圆（",(0,r.jsx)(n.code,{children:"<circle>"}),"）转换为一个路径（",(0,r.jsx)(n.code,{children:"<path>"}),"）。你可以采用下面这种方式快速将圆转换为路径："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<circle id="MyPath"  fill="none"  stroke="red"  cx="50"  cy="50"   r="25"  />\n\n\x3c!-- \n    转换为路径\n    CX 对应的是 circle 元素的 cx\n    CY 对应的是 circle 元素的 cy\n    R 对应的是 circle 元素的 r    \n--\x3e\n<path d="\n    M (CX - R), CY\n    a R,R 0 1,0 (R * 2),0\n    a R,R 0 1,0 -(R * 2),0\n   "\n/>\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"注意，如果你不喜欢这种转换方式，你可以通过 Figma 将圆转换为路径！"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["另外一点就是，你需要选择是否使用 ",(0,r.jsx)(n.code,{children:"textPath"})," 的 ",(0,r.jsx)(n.code,{children:"textLength"})," 属性。这可以将文本沿着路径分布。它的值将是圆的周长："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<textPath href="#circularPath" textLength={Math.floor(Math.PI * 2 * RADIUS)}</textPath>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["下面这个案例，你可以更改文本并查看 ",(0,r.jsx)(n.code,{children:"textLength"})," 的使用方式。你可以更改半径和字体大小。另一个功能是文本将遵循路径方向。这使得文本很容易在路径内（圆内）或路径外（圆外）相互翻转："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/jh3y/full/ZEMYebW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/jh3y/full/ZEMYebW"})," （来源于 ",(0,r.jsx)(n.a,{href:"https://codepen.io/jh3y",target:"_blank",rel:"noopener noreferrer",children:"@Jhey"})," ）"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"感兴趣的小伙伴，或者想挑战一下自己的，可以尝试实现下图这个效果："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"给文本添加动画效果",children:["给文本添加动画效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#给文本添加动画效果",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["SVG 的 ",(0,r.jsx)(n.code,{children:"<text>"})," 文本还可以结合其他的 SVG 特性与 CSS 相关特性，给 SVG 文本添加动画效果。例如下面这个示例，将 ",(0,r.jsx)(n.code,{children:"<text>"})," 嵌套在 ",(0,r.jsx)(n.code,{children:"<clipPath>"})," 中，再将多个不同路径作为剪切文本的填充物，然后使用 CSS 动画，轻易让你实现很有创意的 Blob 动效："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/MWRbBbb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWRbBbb"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"详细代码请查看案例源代码！"}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"SVG 文本元素是用于在 SVG 图像中呈现文本的重要组成部分。SVG 文本元素允许在图形中插入文本内容，并且可以通过多种方式进行定位、样式化和控制。"}),"\n",(0,r.jsxs)(n.p,{children:["首先，SVG 文本元素可以通过 ",(0,r.jsx)(n.code,{children:"<text>"})," 标签嵌入到 SVG 图像中。这个标签允许我们直接在 SVG 图形中插入文本内容，并且可以通过 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 属性来定位文本的起始点。此外，还可以通过设置 ",(0,r.jsx)(n.code,{children:"font-family"}),"、",(0,r.jsx)(n.code,{children:"font-size"}),"、",(0,r.jsx)(n.code,{children:"font-weight"}),"、",(0,r.jsx)(n.code,{children:"text-anchor"})," 等属性来控制文本的字体、大小、粗细和对齐方式等。"]}),"\n",(0,r.jsxs)(n.p,{children:["其次，SVG 文本元素支持使用 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 标签来创建多行文本或者在文本中应用不同的样式。通过 ",(0,r.jsx)(n.code,{children:"<tspan>"})," 标签，我们可以将文本内容分成多行，并且可以为每一行设置不同的样式，例如不同的字体、大小或颜色。"]}),"\n",(0,r.jsxs)(n.p,{children:["此外，SVG 文本元素还支持在曲线、路径或自定义形状上布局文本。通过使用 ",(0,r.jsx)(n.code,{children:"<textPath>"})," 元素，我们可以将文本沿着指定的路径进行排列，实现沿着曲线或路径绘制文本的效果。这为设计师提供了更加灵活的排版选择，可以创造出各种独特的文本效果。"]}),"\n",(0,r.jsx)(n.p,{children:"总的来说，SVG 文本元素是 SVG 图形中的重要组成部分，它提供了丰富的功能和灵活的控制选项，可以帮助设计师实现各种各样的文本效果，并且在创建可缩放的矢量图形时起着关键作用。通过合理地利用 SVG 文本元素的各种属性和特性，设计师可以创造出更加生动、丰富和具有创意的 SVG 图形。"})]})}function K(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Z,{...e})}):Z(e)}let I=K;K.__RSPRESS_PAGE_META={},K.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F8-%E5%88%9D%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E6%96%87%E6%9C%AC%E5%85%83%E7%B4%A0.md"]={toc:[{text:"SVG 文本元素简介",id:"svg-文本元素简介",depth:2},{text:"基本概念",id:"基本概念",depth:2},{text:"字符",id:"字符",depth:3},{text:"字形",id:"字形",depth:3},{text:"字体",id:"字体",depth:3},{text:"EM 盒子",id:"em-盒子",depth:3},{text:"`<text>` 元素",id:"text-元素",depth:2},{text:"基本属性 ：x 、y 、dx 和 dy",id:"基本属性-x-y-dx-和-dy",depth:3},{text:"旋转字符：rotate",id:"旋转字符rotate",depth:3},{text:"文本长度：textLength",id:"文本长度textlength",depth:3},{text:"调整字符宽度：lengthAdjust",id:"调整字符宽度lengthadjust",depth:3},{text:"`<tspan>` 元素",id:"tspan-元素",depth:2},{text:"可用于 SVG 文本的属性",id:"可用于-svg-文本的属性",depth:2},{text:"SVG 字体属性",id:"svg-字体属性",depth:3},{text:"字距调整",id:"字距调整",depth:3},{text:"文本装饰",id:"文本装饰",depth:3},{text:"text-anchor 属性",id:"text-anchor-属性",depth:3},{text:"基线对齐",id:"基线对齐",depth:3},{text:"SVG 文本沿着路径布局",id:"svg-文本沿着路径布局",depth:2},{text:"SVG 文本案例",id:"svg-文本案例",depth:2},{text:"文本描边效果",id:"文本描边效果",depth:3},{text:"Web 中不规则形状的文本",id:"web-中不规则形状的文本",depth:3},{text:"Web 上的圆形文本",id:"web-上的圆形文本",depth:3},{text:"给文本添加动画效果",id:"给文本添加动画效果",depth:3},{text:"小结",id:"小结",depth:2}],title:"8-初级篇：SVG 文本元素",headingTitle:"8-初级篇：SVG 文本元素",frontmatter:{}}}}]);