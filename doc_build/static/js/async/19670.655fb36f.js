"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["19670"],{686254:function(e,n,i){i.r(n),i.d(n,{default:()=>m});var r=i(552676),c=i(740453);let t=i.p+"static/image/6ff543bd2f1328bacb07ab63253fb44e.3b1ec28a.webp",s=i.p+"static/image/02d7cdee66982b7d66511ace10da6119.803ef4a5.webp",d=i.p+"static/image/3d708277399de08980439afcd8478384.4aea706e.webp",o=i.p+"static/image/2f9afbb485a33286d6f058b651bde092.914a4cad.webp",l=i.p+"static/image/60b888701e6c60771441ce6506668ff7.ab81b9fe.webp",a=i.p+"static/image/680a7a47f60fdca380b6f954cd4f3afb.2212d5d2.webp",p=i.p+"static/image/7b277ce5ee15f4f00eb5a63e407fbd80.4cba557f.webp",h=i.p+"static/image/0f3da8b190a47c854cbe06611f6c43ec.21ca65f8.webp",u=i.p+"static/image/9b24bd39c484b1a4677fa099f0bd4b77.c5280dae.webp",x=i.p+"static/image/54bce5636c9eb39f4b2fcf3dcb4257ef.ba048b83.webp";function j(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",img:"img",blockquote:"blockquote",strong:"strong",ul:"ul",li:"li",h3:"h3"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"第08章画中画css的picture-in-picture伪类",children:["第08章—画中画：CSS的：picture-in-picture伪类",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第08章画中画css的picture-in-picture伪类",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["\uFEFF在 ",(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/selectors-4/",target:"_blank",rel:"noopener noreferrer",children:"CSS 选择器的 Level4 （Selectors Level 4）"}),"中，有一个专门用来匹配当前处于画中画模式的元素的 CSS 伪类 ",(0,r.jsx)(n.code,{children:":picture-in-picture"})," 。你可以使用它来选择正在显示画中画的视频元素，并为其添加一些样式，例如将播放器控件隐藏、设置画中画窗口的位置和大小、背景色、字体大小、文本对齐方式等。"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，我们一起来简单了解一下画中画是什么，可以使用 ",(0,r.jsx)(n.code,{children:":picture-in-picture"})," 伪类做些什么。"]}),"\n",(0,r.jsxs)(n.h2,{id:"画中画简介",children:["画中画简介",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#画中画简介",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["视频和图片都是 Web 应用或页面的重要媒介之一，我们可以使用 HTML 的 ",(0,r.jsx)(n.code,{children:"<video>"})," 标签在 Web 应用或页面向用户呈现一个视频。例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<video autoplay muted playsinline loop src="https://storage.googleapis.com/media-session/caminandes/short.mp4"></video>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/xxyWEgv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxyWEgv"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"你在 Web 中浏览视频的时候，可以选择“画中画”的模式播放视频："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:"img"})}),"\n",(0,r.jsx)(n.p,{children:"正如上图所示，画中画是一种视频技术，可以在同一个屏幕上同时显示两个视频。其中一个视频通常在主屏幕上，而另一个视频则是较小的子画面，可以显示其他内容。用户可以根据需要调整子画面的位置和大小，以兼顾查看两个视频。"}),"\n",(0,r.jsx)(n.p,{children:"画中画技术相对来说比较实用，经常运用于电视、电影等行业，尤其在多任务处理和同时观看不同角度视频时非常有用。比如在观看体育比赛时，可以在主屏幕上观看比赛，在子画面中观看其他相关播报，更多地了解比赛状况。"}),"\n",(0,r.jsx)(n.p,{children:"最近，许多操作系统和应用程序也开始支持画中画技术，例如在桌面电脑或移动设备上的视频播放器、通话软件或浏览器等，这些应用程序可以让用户同时查看多个窗口或屏幕，以便完成更多任务。"}),"\n",(0,r.jsxs)(n.h2,{id:"画中画picture-in-pictureweb-api",children:["画中画（Picture-in-Picture）Web API",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#画中画picture-in-pictureweb-api",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["时至今日，W3C 规范为 Web 开发者提供了相应的 API，即 ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/picture-in-picture/",target:"_blank",rel:"noopener noreferrer",children:"Picture-In-Picture"})})," ，简称 ",(0,r.jsx)(n.strong,{children:"PIP"}),"。该 API 允许网站总是在其他窗口之上创建一个浮动的视频，以便用户在其他内容站点或者设备上的应用程序交互时可以继续播放视频。"]}),"\n",(0,r.jsx)(n.p,{children:"换句话说，画中画 API 允许网站创建一块可浮动、可缩放、可拖拽的视频播放区域，该区域永远至于窗口顶层，用户可以在操作其他任务时继续观看视频，大大提升桌面空间利用率与用户时间效率。"}),"\n",(0,r.jsxs)(n.p,{children:["除此之外，W3C 规范还提供了一个“文档画中画”，即 ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://wicg.github.io/document-picture-in-picture/",target:"_blank",rel:"noopener noreferrer",children:"Document Picture-in-Picture"})}),"，简称 ",(0,r.jsx)(n.strong,{children:"DPIP"}),"。该 API 允许你打开一个始终置顶的窗口，该窗口可以装入任意 HTML 内容。它扩展了现有的用于 ",(0,r.jsx)(n.code,{children:"<video>"})," 的画中画（PIP）Web API，因为画中画 Web API 只允许你将 HTML 的 ",(0,r.jsx)(n.code,{children:"<video>"})," 元素放入画中画窗口中。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://document-picture-in-picture-api.glitch.me/",target:"_blank",rel:"noopener noreferrer",children:"https://document-picture-in-picture-api.glitch.me/"})," （请使用 Chrome 浏览器打开，该 Demo 来源于 《",(0,r.jsx)(n.a,{href:"https://developer.chrome.com/docs/web-platform/document-picture-in-picture/",target:"_blank",rel:"noopener noreferrer",children:"Picture-in-Picture for any Element, not just "}),"》一文。）"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，在文档画中画 API 中，画中画窗口类似于通过 ",(0,r.jsx)(n.code,{children:"window.open()"})," 打开的同源空白窗口，但也有一些差异："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"画中画窗口浮在其他窗口上面。"}),"\n",(0,r.jsx)(n.li,{children:"画中画窗口不会超过打开窗口的寿命而继续存在。"}),"\n",(0,r.jsx)(n.li,{children:"画中画窗口无法打开其他窗口。"}),"\n",(0,r.jsx)(n.li,{children:"画中画窗口无法被导航。"}),"\n",(0,r.jsx)(n.li,{children:"网站无法设置画中画窗口的位置。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["不过，在这里我们只简单的聊一下画中画 Web API，如果你对文档画中画 API 感兴趣的话，建议你花时间阅读一下 ",(0,r.jsx)(n.a,{href:"https://developer.chrome.com/authors/beaufortfrancois/",target:"_blank",rel:"noopener noreferrer",children:"@Fran\xe7ois Beaufort"})," 发表在 Chrome 开发者平台上的 《",(0,r.jsx)(n.a,{href:"https://developer.chrome.com/docs/web-platform/document-picture-in-picture/",target:"_blank",rel:"noopener noreferrer",children:"Picture-in-Picture for any Element, not just "}),"》。"]}),"\n",(0,r.jsxs)(n.h2,{id:"如何使用画中画picture-in-picture-web-api",children:["如何使用画中画（Picture-In-Picture） Web API",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何使用画中画picture-in-picture-web-api",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在 W3C 的 Picture-In-Picture 规范中详细介绍了画中画 Web API 应该如何使用，这节课就不详细阐述了，因为已经超出这节课的范畴，但我将以一个简单的实例来告诉大家如何使用画中画 Web API。"}),"\n",(0,r.jsxs)(n.p,{children:["首先，在你的 HTML 中要有一个视频元素（",(0,r.jsx)(n.code,{children:"<video>"}),"），一个切换按钮（",(0,r.jsx)(n.code,{children:"<button>"}),"），它们分别用来："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<video>"})," 用来展示视频；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<button>"})," ，使用画中画 Web API 替换浏览器中进入画中画模式的默认方法。例如，点击按钮时启用画中画模式。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<video autoplay muted playsinline loop src="https://storage.googleapis.com/media-session/caminandes/short.mp4"></video>\n<button id="togglePipButton" class="button">进入画中画模式</button>\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"进入画中画模式",children:["进入画中画模式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#进入画中画模式",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["你要以在视频元素（",(0,r.jsx)(n.code,{children:"<video>"}),"）上调用 ",(0,r.jsx)(n.code,{children:"requestPictureInPicture()"})," ，请求用户代理（比如浏览器）将视频切换为画中画模式。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"const video = document.querySelector('video');\nconst togglePipButton = document.getElementById('togglePipButton');\n\ntogglePipButton.addEventListener('click', () => {\n    video.requestPictureInPicture()\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:"这个时候，你点击按钮，视频就进入了画中画的模式："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["当视频进入画中画模式时，你可以使用画中画的另一个 API ，即给视频元素（",(0,r.jsx)(n.code,{children:"<video>"}),"）绑定一个 ",(0,r.jsx)(n.code,{children:"enterpictureinpicture"})," 事件（画中画的事件）。这样一来，你可以做一些其他的事情。例如，改变按钮的颜色和文本内容："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"video.addEventListener('enterpictureinpicture', () => {\n    togglePipButton.textContent = '退出画中画模式';\n    togglePipButton.classList.add(\"button--secondary\")\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/poxLNez",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poxLNez"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"退出画中画模式",children:["退出画中画模式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#退出画中画模式",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"当视频进入画中画模式播放的时候，客户端（如浏览器）会提供一个“关闭按钮”，用户可以点击这个“关闭”按钮退出画中画的模式。如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"img"})}),"\n",(0,r.jsx)(n.p,{children:"除此之外，还可以提供另一种方式退出画中画模式。例如，点击按钮退出画中画模式。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"const video = document.querySelector('video');\nconst togglePipButton = document.getElementById('togglePipButton');\n\ntogglePipButton.addEventListener('click', () => {\n    document.exitPictureInPicture()\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["点击按钮时，给文档（",(0,r.jsx)(n.code,{children:"document"}),"）调用一个 ",(0,r.jsx)(n.code,{children:"exitPictureInPicture()"})," 方法，然后退出画中画模式。当然，你可以做得更好些，在调用 ",(0,r.jsx)(n.code,{children:"exitPictureInPicture()"})," 方法时，使用画中画 API 中的另一个 API 做个判断，即 ",(0,r.jsx)(n.code,{children:"document.pictureInPictureElement"})," 。它会告诉你当前在画中画窗口中显示哪个元素。如果为 ",(0,r.jsx)(n.code,{children:"null"})," ，则此文档没有节点处于画中画模式："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"const video = document.querySelector('video');\nconst togglePipButton = document.getElementById('togglePipButton');\n\ntogglePipButton.addEventListener('click', () => {\n    if (document.pictureInPictureElement) {\n        document.exitPictureInPicture() // 退出画中画模式\n    } else {\n        video.requestPictureInPicture() // 进入画中画模式\n    }\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["和进入画中画模式相似，你在退出画中画模式时，可以给 ",(0,r.jsx)(n.code,{children:"video"})," 绑定一个 ",(0,r.jsx)(n.code,{children:"leavepictureinpicture"})," 事件，在该事件中做一些你想做的事情："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"video.addEventListener('leavepictureinpicture', () => {\n    togglePipButton.textContent = '进入画中画模式';\n    togglePipButton.classList.remove(\"button--secondary\")\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/eYPMBog",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYPMBog"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["需要注意的是，",(0,r.jsx)(n.code,{children:"requestPictureInPicture()"})," 和 ",(0,r.jsx)(n.code,{children:"exitPictureInPicture()"})," 会返回一个 ",(0,r.jsx)(n.code,{children:"promise"})," ，如果视频的元数据尚未加载或视频上存在 ",(0,r.jsx)(n.code,{children:"disablePictureInPicture"})," 属性，那么该 ",(0,r.jsx)(n.code,{children:"promise"})," 可能会拒绝（",(0,r.jsx)(n.code,{children:"reject"}),"）。我们可以添加一个 ",(0,r.jsx)(n.code,{children:"catch"})," 块来捕获这个潜在的错误，并告诉用户发生了什么？例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"togglePipButton.addEventListener('click', () => {\n    if (document.pictureInPictureElement) {\n        document.exitPictureInPicture().catch(error => {\n            // 错误处理\n        })\n    } else {\n        video.requestPictureInPicture().catch(error => {\n            // 错误处理\n        });\n    }\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["或者将 ",(0,r.jsx)(n.code,{children:"async"})," 和 ",(0,r.jsx)(n.code,{children:"await"})," 结合起来使用，使你的代码更健壮一些。例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:'togglePipButton.addEventListener("click", async (event) => {\n    try {\n        if (video !== document.pictureInPictureElement) {\n            await video.requestPictureInPicture();\n        } else {\n            await document.exitPictureInPicture();\n        }\n    } finally {\n        // ...\n    }\n});\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/qBJoLbz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBJoLbz"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"你还可以使用该技术，将 Web 摄像头视频在画中画显示，这对于视频会议 Web 应用程序非常有用。比如下面这个示例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<button class="button" id="button">Web 摄像头视频在画中画中呈现</button>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:'const button = document.getElementById("button");\n\nbutton.addEventListener("click", async () => {\n    const video = document.createElement("video");\n    video.muted = true;\n    video.srcObject = await navigator.mediaDevices.getUserMedia({ \n        video: true \n    });\n    video.play();\n    video.addEventListener("loadedmetadata", () => {\n        video.requestPictureInPicture().catch(console.error);\n    });\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/NWOYeBY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWOYeBY"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你不想让视频在画中画窗口中弹出，可以为其添加 ",(0,r.jsx)(n.code,{children:"disablePictureInPicture"})," 属性，像这样："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<video disablePictureInPicture autoplay muted playsinline loop src="https://storage.googleapis.com/media-session/caminandes/short.mp4"></video>\n'})}),"\n",(0,r.jsx)(n.p,{children:"这就是画中画 Web API 的关键部分，如果希望更深入研究，建议阅读 W3C 上有关于画中画 Web API 的相关规范。"}),"\n",(0,r.jsxs)(n.h2,{id:"画中画伪类-picture-in-picture",children:["画中画伪类 :picture-in-picture",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#画中画伪类-picture-in-picture",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["我们花了较长的篇幅向大家介绍了画中画相关的概念和 API。有了这个背景之后，我们就可以了解一下 CSS 的画中画伪类，即 ",(0,r.jsx)(n.code,{children:":picture-in-picture"})," ，它的主要作用是",(0,r.jsx)(n.strong,{children:"允许你给视频的画中画添加样式"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["简单地说，当视频以画中画模式播放时，视频的占位符会切换到 ",(0,r.jsx)(n.code,{children:":picture-in-picture"})," 状态。",(0,r.jsx)(n.code,{children:":picture-in-picture"})," 伪类允许你配置样式表，以便视频在画中画或者传统播放模式来回切换时自动调整内容的大小、样式或布局。"]}),"\n",(0,r.jsx)(n.p,{children:"它的使用很简单，例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":picture-in-picture {\n    opacity: 0.3;\n    filter: blur(5px);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["当视频进入画中画模式时，上面的代码会使原视频元素 ",(0,r.jsx)(n.code,{children:"<video>"})," 变得模糊："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/LYgdMqN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYgdMqN"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["你也可以使用 ",(0,r.jsx)(n.code,{children:":has()"})," 、",(0,r.jsx)(n.code,{children:":not()"})," 等伪类函数与 ",(0,r.jsx)(n.code,{children:":picture-in-picture"})," 伪类结合起来使用，给视频画中画添加不一样的样式。例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<div class="video__container">\n    <video autoplay muted playsinline loop src="https://storage.googleapis.com/media-session/caminandes/short.mp4"></video>\n</div>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:'video {\n    display: block;\n    aspect-ratio: 16 / 9;\n    will-change: opacity;\n}\n\nvideo:not([controls]):picture-in-picture {\n    opacity: 0;\n}\n\n.video__container {\n    background-color: rgb(0 0 0 / 0.65);\n    position: relative;\n    backdrop-filter: blur(20px);\n    background-image: \n        linear-gradient(135deg, rgb(0 0 0 / 0.8), rgb(0 0 0 / 0.5)),\n        linear-gradient(to right in oklab,oklch(70% 0.5 340) 0%,oklch(90% 0.5 200) 100%),\n        linear-gradient(to bottom left in oklab,oklch(55% 0.45 350) 0%,oklch(100% 0.4 95) 100%),\n        linear-gradient(to top right in oklab,#fff 0%,#000 0% 20%,#fff 0% 40%,#000 0% 60%,#fff 0% 80%,#000 0% 100%);\n    background-blend-mode: multiply, luminosity, exclusion, hard-light;\n    background-size: cover, cover, cover, 3rem 3rem;\n    border-radius: 6px;\n    box-shadow: 0 0 0.2em 0.2em rgb(0 0 0 / 0.15);\n}\n\n.video__container:has(video:picture-in-picture)::before {\n    content: "视频现在在画中画窗口中播放";\n    position: absolute;\n    right: 20px;\n    bottom: 20px;\n    color: #ddd;\n    font-size: clamp(1.5rem, 5cqw + 2rem, 2.25rem);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/poxLGzY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poxLGzY"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["CSS 画中画伪类 ",(0,r.jsx)(n.code,{children:":picture-in-picture"})," 和画中画 Web API 是用于实现 Web 页面中画中画效果的技术。"]}),"\n",(0,r.jsxs)(n.p,{children:["通过使用 ",(0,r.jsx)(n.code,{children:":picture-in-picture"})," 伪类，开发者可以为网页中正在播放的画中画视频添加自定义样式，使其更加个性化和美观。"]}),"\n",(0,r.jsx)(n.p,{children:"而使用画中画 Web API，则可以实现更加丰富和定制化的画中画效果。API 提供了许多方法和属性，包括在画中画模式下调整视频大小和位置、控制画中画窗口的行为等等。"}),"\n",(0,r.jsx)(n.p,{children:"需要注意的是，目前仅有少数浏览器支持这些功能，因此在使用时需要进行兼容性考虑。但是，随着技术的不断发展，这些功能在未来将会得到更广泛的支持，成为网页视频播放体验的重要组成部分。"})]})}function g(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(j,{...e})}):j(e)}let m=g;g.__RSPRESS_PAGE_META={},g.__RSPRESS_PAGE_META["%E7%8E%B0%E4%BB%A3CSS%2F%E7%AC%AC08%E7%AB%A0%E2%80%94%E7%94%BB%E4%B8%AD%E7%94%BB%EF%BC%9ACSS%E7%9A%84%EF%BC%9Apicture-in-picture%E4%BC%AA%E7%B1%BB.md"]={toc:[{text:"画中画简介",id:"画中画简介",depth:2},{text:"画中画（Picture-in-Picture）Web API",id:"画中画picture-in-pictureweb-api",depth:2},{text:"如何使用画中画（Picture-In-Picture） Web API",id:"如何使用画中画picture-in-picture-web-api",depth:2},{text:"进入画中画模式",id:"进入画中画模式",depth:3},{text:"退出画中画模式",id:"退出画中画模式",depth:3},{text:"画中画伪类 :picture-in-picture",id:"画中画伪类-picture-in-picture",depth:2},{text:"小结",id:"小结",depth:2}],title:"第08章—画中画：CSS的：picture-in-picture伪类",headingTitle:"第08章—画中画：CSS的：picture-in-picture伪类",frontmatter:{}}}}]);