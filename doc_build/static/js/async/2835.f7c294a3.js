"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["2835"],{198160:function(e,n,r){r.r(n),r.d(n,{default:()=>m});var s=r(552676),l=r(740453);let d=r.p+"static/image/9a3a15bc14b6d2aa7ff45908f3ae5fa7.eaef8673.webp",i=r.p+"static/image/b812863de52ff09fa18b14ece09cf5b9.0b38f267.webp",t=r.p+"static/image/5e30d5b4d1f48c00839f60577ef90164.5ae802f0.webp",a=r.p+"static/image/3ebbbced4e1115dcb6876f68f9c89cf3.3cf04c91.webp",c=r.p+"static/image/61487a58c860054daf56f00b47f63ec7.397b61ef.webp";function h(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ul:"ul",li:"li",h3:"h3",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",pre:"pre",img:"img"},(0,l.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"27实践篇-表单验证下",children:["27.实践篇-表单验证下",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#27实践篇-表单验证下",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"一-前言",children:["一 前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一-前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上一章节主要讲了 Form 表单的设计原则，以及状态管理 FormStore 和自定义 hooks useForm 的编写，本章节将继续上一章节没有讲完的部分。"}),"\n",(0,s.jsx)(n.p,{children:"通过本章节的学习，你将收获以下知识点："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Form 设计及其编写。"}),"\n",(0,s.jsx)(n.li,{children:"FormItem 设计及其编写。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"二-form-编写",children:["二 Form 编写",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二-form-编写",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"1-属性分析",children:["1 属性分析",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-属性分析",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"属性设定"})}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"属性名称"}),"\n",(0,s.jsx)(n.th,{children:"作用"}),"\n",(0,s.jsx)(n.th,{children:"类型"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"form"})}),"\n",(0,s.jsxs)(n.td,{children:["传入",(0,s.jsx)(n.code,{children:"useForm"})," 创建的 ",(0,s.jsx)(n.code,{children:"FormStore"}),"实例"]}),"\n",(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"FormStore"})," 实例对象"]}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onFinish"})}),"\n",(0,s.jsx)(n.td,{children:"表单提交成功调用"}),"\n",(0,s.jsx)(n.td,{children:"function ，一个参数，为表单的数据层"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onFinishFailed"})}),"\n",(0,s.jsx)(n.td,{children:"表单提交失败调用"}),"\n",(0,s.jsx)(n.td,{children:"function ，一个参数，为表单的数据层"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"initialValues"})}),"\n",(0,s.jsx)(n.td,{children:"设置表单初始化的值"}),"\n",(0,s.jsx)(n.td,{children:"object"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"细节问题"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Form 接收类似 ",(0,s.jsx)(n.code,{children:"onFinish"})," ｜ ",(0,s.jsx)(n.code,{children:"onFinishFailed"})," 监听回调函数。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Form 可以被 ref 标记，ref 可以获取 ",(0,s.jsx)(n.code,{children:"FormStore"})," 核心方法。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Form 要保留原生的 form 属性，当 submit 或者 reset 触发，自动校验/重置。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-代码实现",children:["2 代码实现",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-代码实现",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["创建 context 保存 ",(0,s.jsx)(n.code,{children:"FormStore"})," 核心 Api"]}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import {  createContext  } from 'react'\n/* 创建一个 FormContext */\nconst  FormContext = createContext()\n\nexport default FormContext\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["创建一个 context 用来保存 ",(0,s.jsx)(n.code,{children:"FormStore"})," 的核心 API 。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["接下来就是重点 ",(0,s.jsx)(n.code,{children:"Form"})," 编写"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function Form ({\n    form,\n    onFinish,\n    onFinishFailed,\n    initialValues,\n    children\n},ref){\n    /* 创建 form 状态管理实例 */\n    const formInstance = useForm(form,initialValues)\n    /* 抽离属性 -> 抽离 dispatch ｜ setCallback 这两个方法不能对外提供。  */\n    const { setCallback, dispatch  ,...providerFormInstance } = formInstance\n\n    /* 向 form 中注册回调函数 */\n    setCallback({\n        onFinish,\n        onFinishFailed\n    })\n\n    /* Form 能够被 ref 标记，并操作实例。 */\n    useImperativeHandle(ref,() => providerFormInstance , [])\n    /* 传递 */\n    const RenderChildren = <FormContext.Provider value={formInstance} > {children} </FormContext.Provider>\n\n    return <form\n        onReset={(e)=>{\n            e.preventDefault()\n            e.stopPropagation()\n            formInstance.resetFields() /* 重置表单 */\n        }}\n        onSubmit={(e)=>{\n            e.preventDefault()\n            e.stopPropagation()\n            formInstance.submit()      /* 提交表单 */\n        }}\n           >\n           {RenderChildren}\n        </form>\n}\n\nexport default forwardRef(Form)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Form 实现细节分析："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["首先通过 useForm 创建一个 ",(0,s.jsx)(n.code,{children:"formInstance"})," ，里面保存着操纵表单状态的方法，比如 ",(0,s.jsx)(n.code,{children:"getFieldValue"})," ， ",(0,s.jsx)(n.code,{children:"setFieldsValue"})," 等。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["从 ",(0,s.jsx)(n.code,{children:"formInstance"})," 抽离出 setCallback ，dispatch 等方法，得到 ",(0,s.jsx)(n.code,{children:"providerFormInstance"})," ，因为这些 api 不期望直接给开发者使用。通过 forwardRef + useImperativeHandle 来转发 ref， 将 providerFormInstance 赋值给 ref ， 开发者通过 ref 标记 Form ，本质上就是获取的 providerFormInstance 对象。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["通过 Context.Provider 将 ",(0,s.jsx)(n.code,{children:"formInstance"})," 传递下去，提供给 ",(0,s.jsx)(n.code,{children:"FormItem"})," 使用。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["创建原生 form 标签，绑定 React 事件 —— ",(0,s.jsx)(n.code,{children:"onReset"})," 和 ",(0,s.jsx)(n.code,{children:"onSubmit"}),"，在事件内部分别调用， 重置表单状态的 ",(0,s.jsx)(n.code,{children:"resetFields"})," 和提交表单的 ",(0,s.jsx)(n.code,{children:"onSubmit"}),"方法。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"三-formitem-编写",children:["三 FormItem 编写",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三-formitem-编写",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["接下来就是 ",(0,s.jsx)(n.code,{children:"FormItem"})," 的具体实现细节。"]}),"\n",(0,s.jsxs)(n.h3,{id:"1-属性分析-1",children:["1 属性分析",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-属性分析-1",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"相比 antd 中的 FormItem ，属性要精简的多，这里我保留了一些核心的属性。"}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"属性名称"}),"\n",(0,s.jsx)(n.th,{children:"作用"}),"\n",(0,s.jsx)(n.th,{children:"类型"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"name"})," (重要属性)"]}),"\n",(0,s.jsx)(n.td,{children:"证明表单单元项的键 name"}),"\n",(0,s.jsx)(n.td,{children:"string"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"label"})}),"\n",(0,s.jsx)(n.td,{children:"表单标签属性"}),"\n",(0,s.jsx)(n.td,{children:"string"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"height"})}),"\n",(0,s.jsx)(n.td,{children:"表单单元项高度"}),"\n",(0,s.jsx)(n.td,{children:"number"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"labelWidth"})}),"\n",(0,s.jsx)(n.td,{children:"lable 宽度"}),"\n",(0,s.jsx)(n.td,{children:"number"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"required"})}),"\n",(0,s.jsx)(n.td,{children:"是否必填"}),"\n",(0,s.jsx)(n.td,{children:"boolean"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"trigger"})}),"\n",(0,s.jsx)(n.td,{children:"收集字段值变更的方法"}),"\n",(0,s.jsx)(n.td,{children:"string ， 默认为 onChange"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"validateTrigger"})}),"\n",(0,s.jsx)(n.td,{children:"验证校验触发的方法"}),"\n",(0,s.jsx)(n.td,{children:"string，默认为 onChange"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"rules"})}),"\n",(0,s.jsx)(n.td,{children:"验证信息"}),"\n",(0,s.jsx)(n.td,{children:"里面包括验证方法 rule 和 验证失败提示文案 message"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-代码实现-1",children:["2 代码实现",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-代码实现-1",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"接下来就是 FormItem 的代码实现。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function FormItem ({\n    name,\n    children,\n    label,\n    height = 50 ,\n    labelWidth,\n    required = false ,\n    rules = {},\n    trigger = 'onChange',\n    validateTrigger = 'onChange'\n}){\n    const formInstance  = useContext(FormContext)\n    const { registerValidateFields , dispatch , unRegisterValidate } = formInstance\n    const [ , forceUpdate ] = useState({})\n    const onStoreChange = useMemo(()=>{\n        /* 管理层改变 => 通知表单项 */\n        const onStoreChange = {\n            changeValue(){\n                forceUpdate({})\n            }\n         }\n        return onStoreChange\n\n    },[ formInstance ])\n    useEffect(()=>{\n         /* 注册表单 */\n        name && registerValidateFields(name,onStoreChange,{ ...rules , required })\n        return function(){\n            /* 卸载表单 */\n           name &&  unRegisterValidate(name)\n        }\n    },[ onStoreChange ])\n     /* 使表单控件变成可控制的 */\n    const getControlled = (child)=> {\n        const mergeChildrenProps = { ...child.props }\n        if(!name) return mergeChildrenProps\n         /* 改变表单单元项的值 */\n        const handleChange  = (e)=> {\n             const value = e.target.value\n              /* 设置表单的值 */\n             dispatch({ type:'setFieldsValue' },name ,value)\n         }\n        mergeChildrenProps[trigger] = handleChange\n        if(required || rules ){\n             /* 验证表单单元项的值 */\n            mergeChildrenProps[validateTrigger] = (e) => {\n                 /* 当改变值和验证表单，用统一一个事件 */\n                if(validateTrigger === trigger){\n                    handleChange(e)\n                }\n                /* 触发表单验证 */\n                dispatch({ type:'validateFieldValue' },name)\n            }\n        }\n        /* 获取 value */\n        mergeChildrenProps.value = dispatch({ type:'getFieldValue' }, name) || ''\n        return mergeChildrenProps\n    }\n    let renderChildren\n    if(isValidElement(children)){\n        /* 获取 | 合并 ｜ 转发 | =>  props  */\n        renderChildren = cloneElement(children, getControlled(children))\n    }else{\n        renderChildren = children\n    }\n    return <Label\n        height={height}\n        label={label}\n        labelWidth={labelWidth}\n        required={required}\n           >\n         {renderChildren}\n         <Message\n             name={name}\n             {...dispatch({ type :'getFieldModel'},name)}\n         />\n     </Label>\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"FormItem"})," 的流程比较复杂，接下来我将一一讲解其流程。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"第一步： FormItem 会通过 useContext 获取到表单实例下的方法。"}),"\n",(0,s.jsx)(n.li,{children:"第二步： 创建一个 useState 作为 FormItem 的更新函数 onStoreChange。"}),"\n",(0,s.jsxs)(n.li,{children:["第三步： 在 useEffect 中调用 ",(0,s.jsx)(n.code,{children:"registerValidateFields"})," 注册表单项。此时的 FormItem 的更新函数 onStoreChange 会传入到 FormStore 中，上一章节讲到过，更新方法最终会注册到 FormStore 的 control 属性下，这样 FormStore 就可以选择性的让对应的 FormItem 更新。在 useEffect 销毁函数中，解绑表单项。"]}),"\n",(0,s.jsxs)(n.li,{children:["第四步： 让 FormItem 包裹的表单控件变成受控的， 通过 ",(0,s.jsx)(n.code,{children:"cloneElement"})," 向表单控件（ 比如 Input ） props 中，注册监听值变化的方法，默认为 onChange ，以及表单验证触发的方法 ，默认也是 onChange ，比如如下例子\uD83C\uDF30："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'   <FormItem\n        label="请输入小册名称"\n        labelWidth={150}\n        name="name"\n        required\n        rules={{\n            rule:/^[a-zA-Z0-9_\\u4e00-\\u9fa5]{4,32}$/,\n            message:\'名称仅支持中文、英文字母、数字和下划线，长度限制4~32个字\'\n        }}\n        trigger="onChange"\n        validateTrigger="onBlur"\n    >\n        <Input\n            placeholder="小册名称"\n        />\n    </FormItem>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["如上，向 FormItem 中， 绑定监听变化的事件为 ",(0,s.jsx)(n.code,{children:"onChange"}),"，表单验证的事件为 ",(0,s.jsx)(n.code,{children:"onBlur"})," 。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"更新流程"})," ：那么整个流程，当组件值改变的时候，会触发 ",(0,s.jsx)(n.code,{children:"onChange"})," 事件，本质上被上面的 ",(0,s.jsx)(n.code,{children:"getControlled"})," 拦截，实质用 dispatch 触发 setFieldsValue ，改变 FormStore 表单的值，然后 FormStore 会用 onStoreChange 下的 changeValue 通知当前 FormItem 更新，FormItem 更新通过 dispatch 调用 getFieldValue 获取表单的最新值，并渲染视图。这样完成整个受控组件状态更新流程。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"验证流程："})," 当触发 ",(0,s.jsx)(n.code,{children:"onBlur"})," 本质上用 dispatch 调用 validateFieldValue 事件，验证表单，然后 FormStore 会下发验证状态（是否验证通过）。"]}),"\n",(0,s.jsxs)(n.p,{children:["完成",(0,s.jsx)(n.strong,{children:"更新/验证"}),"流程。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["第五步：渲染 ",(0,s.jsx)(n.code,{children:"Label"})," 和 ",(0,s.jsx)(n.code,{children:"Message"})," UI 视图。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"四-index文件及其他组件",children:["四 I\bndex文件及其他组件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#四-index文件及其他组件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"还有一些负责 UI 渲染的组件，以及表单控件，这里就简单介绍一下："}),"\n",(0,s.jsxs)(n.h3,{id:"label",children:["Label",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#label",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function Label({ children , label ,labelWidth , required ,height}){\n    return <div className=\"form-label\"\n        style={{ height:height + 'px'  }}\n           >\n       <div\n           className=\"form-label-name\"\n           style={{ width : `${labelWidth}px` }}\n       >\n           {required ? <span style={{ color:'red' }} >*</span> : null}\n           {label}:\n        </div>  {children}\n    </div>\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Label 的作用就是渲染表单的标签。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"message",children:["Message",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#message",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function Message(props){\n    const { status , message , required , name , value } = props\n    let showMessage = ''\n    let color = '#fff'\n    if(required && !value && status === 'reject'  ){\n        showMessage = `${name} 为必填项`\n        color = 'red'\n    }else if(status === 'reject'){\n        showMessage = message\n        color = 'red'\n    }else if(status === 'pendding'  ){\n        showMessage = null\n    }else if( status === 'resolve' ){\n        showMessage = '校验通过'\n        color = 'green'\n    }\n    return <div className=\"form-message\" >\n       <span style={{ color  }}  >{showMessage}</span>\n    </div>\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"message 显示表单验证的状态，比如失败时候的提示文案等，成功时候的提示文案。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"input",children:["Input",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#input",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const Input = (props) => {\n    return <input\n        className="form-input"\n        {...props}\n           />\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Input 本质上就是 input 标签。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"select-组件",children:["Select 组件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#select-组件",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function Select({ children,...props }){\n    return <select {...props}\n        className="form-input"\n           >\n        <option label={props.placeholder}\n            value={null}\n        >{props.placeholder}</option>\n        {children}\n    </select>\n}\n/* 绑定静态属性   */\nSelect.Option = function ( props ){\n    return <option {...props}\n        className=""\n        label={props.children}\n           ></option>\n}\n\nexport default Select\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"index文件",children:["Index文件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#index文件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Index 文件对组件整理，并暴露给开发者使用。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import Form from './component/Form'\nimport FormItem from './component/FormItem'\nimport Input from './component/Input'\nimport Select from './component/Select'\n\nForm.FormItem = FormItem\n\nexport {\n    Form,\n    Select,\n    Input,\n    FormItem\n}\n\nexport default Form\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"五-验证功能",children:["五 验证功能",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#五-验证功能",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"验证-demo-编写",children:["验证 demo 编写",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#验证-demo-编写",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import React , { useRef , useEffect } from \'react\'\n\nimport Form , { Input , Select } from \'./form\'\n\nconst FormItem = Form.FormItem\nconst Option = Select.Option\n\nfunction Index(){\n    const form = useRef(null)\n    useEffect(()=>{\n        console.log(form.current,\'form.current\')\n    },[])\n    const handleClick = () => {\n         form.current.submit((res)=>{\n             console.log(res)\n         })\n    }\n    const handleGetValue = ()=>{\n        console.log( form.current , \'form.current \' )\n    }\n    return <div style={{ marginTop:\'50px\' }} >\n        <Form  initialValues={{ author : \'我不是外星人\' }}\n            ref={form}\n        >\n            <FormItem\n                label="请输入小册名称"\n                labelWidth={150}\n                name="name"\n                required\n                rules={{\n                    rule:/^[a-zA-Z0-9_\\u4e00-\\u9fa5]{4,32}$/,\n                    message:\'名称仅支持中文、英文字母、数字和下划线，长度限制4~32个字\'\n                }}\n                validateTrigger="onBlur"\n            >\n                 <Input\n                     placeholder="小册名称"\n                 />\n            </FormItem>\n            <FormItem\n                label="作者"\n                labelWidth={150}\n                name="author"\n                required\n                validateTrigger="onBlur"\n            >\n                 <Input\n                     placeholder="请输入作者"\n                 />\n            </FormItem>\n            <FormItem label="邮箱"\n                labelWidth={150}\n                name="email"\n                rules={{ rule: /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/ ,message:\'邮箱格式错误！\'  }}\n                validateTrigger="onBlur"\n            >\n                <Input\n                    placeholder="请输入邮箱"\n                />\n            </FormItem>\n            <FormItem label="手机"\n                labelWidth={150}\n                name="phone"\n                rules={{ rule: /^1[3-9]\\d{9}$/ ,message:\'手机格式错误！\'  }}\n                validateTrigger="onBlur"\n            >\n                <Input\n                    placeholder="请输入邮箱"\n                />\n            </FormItem>\n            <FormItem label="简介"\n                labelWidth={150}\n                name="des"\n                rules={{ rule: (value=\'\') => value.length < 5   ,message:\'简介不超过五个字符\'  }}\n                validateTrigger="onBlur"\n            >\n                <Input placeholder="输入简介"  />\n            </FormItem>\n            <FormItem label="你最喜欢的前端框架"\n                labelWidth={150}\n                name="likes"\n                required\n            >\n                <Select  defaultValue={null}\n                    placeholder="请选择"\n                    width={120}\n                >\n                    <Option\n                        value={1}\n                    > React.js </Option>\n                    <Option value={2} > Vue.js </Option>\n                    <Option value={3} > Angular.js </Option>\n                </Select>\n            </FormItem>\n            <button className="searchbtn"\n                onClick={handleClick}\n                type="button"\n            >提交</button>\n            <button className="concellbtn"\n                type="reset"\n            >重置</button>\n        </Form>\n       <div style={{ marginTop:\'20px\' }} >\n            <span>验证表单功能</span>\n            <button className="searchbtn"\n                onClick={handleGetValue}\n                style={{ background:\'green\' }}\n            >获取表单数层</button>\n            <button className="searchbtn"\n                onClick={()=> form.current.validateFields((res)=>{ console.log(\'是否通过验证：\' ,res ) })}\n                style={{ background:\'orange\' }}\n            >动态验证表单</button>\n            <button className="searchbtn" onClick={() => { form.current.setFieldsValue(\'des\',{\n                    rule: (value=\'\') => value.length < 10,\n                    message:\'简介不超过十个字符\'\n                }) }}\n                style={{ background:\'purple\' }}\n            >动态设置校验规则</button>\n       </div>\n    </div>\n}\n\nexport default Index\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"验证效果",children:["验证效果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#验证效果",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"接下来就是验证环节："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"① 表单验证未通过"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"fail.gif"})}),"\n",(0,s.jsx)(n.p,{children:"调用 submit ，验证失败的情况。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"② 表单验证通过"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"success.gif"})}),"\n",(0,s.jsx)(n.p,{children:"验证成功！"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"③ 获取表单的数据层"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"get.gif"})}),"\n",(0,s.jsx)(n.p,{children:"通过 getFieldsValue 获取表单数据层。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"④ 重置表单的数据层"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"reset.gif"})}),"\n",(0,s.jsx)(n.p,{children:"通过 resetFields 重置表单。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"⑤ 动态添加表单验证规则"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"dongtai.gif"})}),"\n",(0,s.jsx)(n.p,{children:"通过 setFieldsValue 动态设置规则。"}),"\n",(0,s.jsxs)(n.p,{children:["之前规则和提示文案 ",(0,s.jsx)(n.code,{children:"{ rule: (value='') => value.length < 5   ,message:'简介不超过五个字符'  }"})]}),"\n",(0,s.jsxs)(n.p,{children:["动态设置规则 ",(0,s.jsx)(n.code,{children:"{ rule: (value='') => value.length < 10, message:'简介不超过十个字符' } "})]}),"\n",(0,s.jsxs)(n.h2,{id:"六-总结",children:["六 总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#六-总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"以上就是从 0 到 1 设计的表单验证系统，希望读者能够对着项目 demo 敲一遍，在实现过程中，我相信会有很多收获。"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}let m=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["React%20%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F27.%E5%AE%9E%E8%B7%B5%E7%AF%87-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E4%B8%8B.md"]={toc:[{text:"一 前言",id:"一-前言",depth:2},{text:"二 Form 编写",id:"二-form-编写",depth:2},{text:"1 属性分析",id:"1-属性分析",depth:3},{text:"2 代码实现",id:"2-代码实现",depth:3},{text:"三 FormItem 编写",id:"三-formitem-编写",depth:2},{text:"1 属性分析",id:"1-属性分析-1",depth:3},{text:"2 代码实现",id:"2-代码实现-1",depth:3},{text:"四 I\bndex文件及其他组件",id:"四-index文件及其他组件",depth:2},{text:"Label",id:"label",depth:3},{text:"Message",id:"message",depth:3},{text:"Input",id:"input",depth:3},{text:"Select 组件",id:"select-组件",depth:3},{text:"Index文件",id:"index文件",depth:3},{text:"五 验证功能",id:"五-验证功能",depth:2},{text:"验证 demo 编写",id:"验证-demo-编写",depth:3},{text:"验证效果",id:"验证效果",depth:3},{text:"六 总结",id:"六-总结",depth:2}],title:"27.实践篇-表单验证下",headingTitle:"27.实践篇-表单验证下",frontmatter:{}}}}]);