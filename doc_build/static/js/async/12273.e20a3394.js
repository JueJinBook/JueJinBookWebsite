"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["12273"],{825502:function(e,n,i){i.r(n),i.d(n,{default:()=>et});var c=i(552676),d=i(740453);let r=i.p+"static/image/6c43f7bb2106739fa64181116a3953a9.d57f4b43.webp",s=i.p+"static/image/7753497092cc574a903e537c31f5fd37.2deed408.webp",l=i.p+"static/image/8506620cf98127d8c36cb5c37cde00ba.0c216b55.webp",h=i.p+"static/image/35d3ce269ee967e5cd32873ab2db07d2.954b765f.webp",o=i.p+"static/image/6a0a3bc08be5317f7599814542296af1.133f930b.webp",t=i.p+"static/image/d361e22cb6be2ef7e8cb15b961ca13b1.1a4e9917.webp",x=i.p+"static/image/6572e42018f45ab2c16a8da9090b331a.014f3741.webp",j=i.p+"static/image/63eab5c3d4fd7a5752d9efc2e99e7ab3.3b18acea.webp",a=i.p+"static/image/25925816e348f718ffc8efdd626bc64f.b56d67ea.webp",p=i.p+"static/image/270dffc1227211ae2a01b0a534e0c69b.04856d1b.webp",f=i.p+"static/image/ada6ce531c103e78a5736d7966efa41e.4d516b31.gif",g=i.p+"static/image/d834cf25448f1f86b599dd3420423554.165428d7.gif",u=i.p+"static/image/93037e9d4509bb0ef0dd02c5c7d9eb8f.96a07ad4.webp",m=i.p+"static/image/cdcd59635976786e5aad7db2c50ce82c.e4dc77a3.webp",b=i.p+"static/image/206056aec670642277e1980274676b7b.886c28d5.gif",S=i.p+"static/image/8763c0d24177387943ddb10a7adce755.02a666d4.webp",v=i.p+"static/image/518094eeb31ff91868cca523fb7a0aa5.b9620aa5.gif",y=i.p+"static/image/50edfcb18d2f3d0fe6e4ca85ea6d364d.33124aa2.webp",w=i.p+"static/image/801ca512afb2b3b2f58a9c8eec7986c3.3a0249e8.webp",M=i.p+"static/image/9f8458577c60731f68c70f7631636d1e.c709e522.webp",G=i.p+"static/image/860b759b8cc193f389f925494bc71357.97e90407.webp",B=i.p+"static/image/7fffc89bd0260bf977e708d474319b53.11c56403.webp",k=i.p+"static/image/bea2b9d6703caf520dc0f3916cc0e20b.3652567a.webp",C=i.p+"static/image/0c83ced1b530d11bdf116f4ec1a09d13.19d45011.webp",U=i.p+"static/image/0db7069668e12bbf7cea3324622bc08c.07d0cdb1.webp",L=i.p+"static/image/a0e9eef087277509243efc35c62f4b9f.55de5be7.webp",N=i.p+"static/image/4ba905a85ac807a34f8ff8bb9f5ad7bd.bb7b20cc.webp",D=i.p+"static/image/31dfdaca53ef3a18318075310ac578ed.c6c838f9.webp",F=i.p+"static/image/057f44c531e25bcef9ac6dbf5d60ab0f.ea30b2d4.webp",V=i.p+"static/image/b7cd25b2d10d127de56bd0648666c9d6.2ca756d1.webp",A=i.p+"static/image/e7009d667b010b863bdc890ca32d6cc0.6ba0d6af.gif",O=i.p+"static/image/1f7f849dcfb6eca794851153fd611ac6.71d6559b.webp",R=i.p+"static/image/929848a090a1f0df11d6a62be5fc8f41.006bece4.webp",T=i.p+"static/image/4208482048816304734b56dd219d3d7f.3f87e393.webp",q=i.p+"static/image/73e4561f1fda30b422090fb692834f29.a2350162.webp",_=i.p+"static/image/d9bd62bba23e1791473b87fc02943441.2b0dcef3.gif",X=i.p+"static/image/b22b5c6d04fdd311c12077f758fdae63.e5a6cde7.webp",P=i.p+"static/image/0ca23dcbf04e6455bd0766ad5a4238e0.260a5593.webp",E=i.p+"static/image/9b38cf66117094df3b453b00a89652f1.3deb14fb.webp",Y=i.p+"static/image/cb7a4e869e358fd7b3add641f4034f97.508a8cbb.webp",I=i.p+"static/image/992eea30c3c6cc894d76f7379434bf8e.dd58a8bc.gif",z=i.p+"static/image/a93bdd43d43facbbd5ccd163ed526405.1901a9d0.gif",W=i.p+"static/image/5918eb82d0706ba8f87842a645ebdb58.2c0e9178.webp",J=i.p+"static/image/d76fd15b1a9ffc14f8b1a4eff6e2caf6.0e4ef5b6.webp",Z=i.p+"static/image/3bc64162f4f101d6d8a11c013f71d714.00ccf4ac.webp",K=i.p+"static/image/4a5b2d0d49870ddaf67aacc7a2ffae0f.8b0a8b01.webp",Q=i.p+"static/image/7f777aa89828e389450bebc0b9270c34.57ae6562.webp",H=i.p+"static/image/0ae7474040127ddba706161c5d6b5b95.e28508c7.webp",$=i.p+"static/image/077d96030858e33a20a40a5e1e0faf72.6db9ced8.webp",ee=i.p+"static/image/6fea626f170a3870c28a51e347d64ac2.6e6e6634.webp",en=i.p+"static/image/2a74401745393afd9487da0d710fcb65.18c65dfc.webp",ei=i.p+"static/image/f832ecd8467a5112dd950845c28f1c12.4299f858.webp",ec=i.p+"static/image/b9ba0d3867577f94053c7e44c7281d11.1748de0a.gif",ed=i.p+"static/image/477ca27d2d5e9d817345b347339c5da7.e831e070.webp",er=i.p+"static/image/99299fd1d7e483a2b51b3575cf3e6c2a.1f6c68ca.webp",es=i.p+"static/image/e63408e09a6357ce293e317a4797bccb.94402019.webp",el=i.p+"static/image/3a32a2137faf485b29f0c27fd0d11d03.f31a8d72.webp";function eh(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",img:"img",blockquote:"blockquote",pre:"pre",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",em:"em",h3:"h3"},(0,d.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"23--中级篇初探-svg-滤镜",children:["23- 中级篇：初探 SVG 滤镜",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23--中级篇初探-svg-滤镜",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在当今的 Web 世界中，创新的视觉呈现已经成为吸引和留住用户的关键因素。然而，要实现引人注目的视觉效果，",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259669043622690853",target:"_blank",rel:"noopener noreferrer",children:"我们需要精通各种图形处理技术"}),"。在这方面，CSS 滤镜和 SVG 滤镜发挥着至关重要的作用。SVG 滤镜作为一种强大的工具，为我们提供了多种丰富的视觉效果实现方式，而 CSS 滤镜则是其中之一。"]}),"\n",(0,c.jsx)(n.p,{children:"与我们熟悉的 CSS 滤镜不同，SVG 滤镜的独特之处在于其灵活性和多样性。它不仅可以应用于 SVG 元素，还可以用于 HTML 元素，并且能够实时地对图形进行处理。SVG 滤镜提供了更加丰富和动态的视觉效果，使得元素可以呈现出生动活泼的外观，为用户带来沉浸式的视觉体验。"}),"\n",(0,c.jsx)(n.p,{children:"这节课将以 CSS 滤镜为起点，为你介绍 SVG 滤镜技术的基础理论和工作原理。我们将从基本的滤镜效果如模糊、颜色偏移开始讲解，逐步深入到更高级的效果如光照模拟和复合操作。每一种效果都将通过示例详细展示，以确保你能够逐步学会如何运用 SVG 滤镜，实现出色的视觉效果，为你的 Web 项目增添新的魅力和创意。"}),"\n",(0,c.jsx)(n.p,{children:"通过学习，你将不仅掌握 SVG 滤镜的理论和实践，还将激发你的创造力，为未来的设计项目注入独特的视觉魅力。让我们一起踏上探索视觉创意之美的旅程吧！"}),"\n",(0,c.jsxs)(n.h2,{id:"css-滤镜",children:["CSS 滤镜",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-滤镜",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"滤镜就好像是一种魔法工具，接受图形输入，施加变化，然后呈现出新的结果。在现代浏览器中，我们拥有两种主要类型的滤镜：CSS 滤镜和 SVG 滤镜，其中 CSS 滤镜是 SVG 滤镜的一个子集。SVG 滤镜提供了更广泛的功能和范围。与诸如 Photoshop 等图形软件相比，浏览器滤镜可以实现同样的效果。然而，浏览器滤镜有两个明显的优势：它们可以被动画化，也可以与用户进行交互。"}),"\n",(0,c.jsx)(n.p,{children:"CSS 滤镜目前为我们提供了三种主要应用方式："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"filter"})," 属性：这是一个 CSS 属性，可以直接应用于任何 HTML 元素上。通过 ",(0,c.jsx)(n.code,{children:"filter"})," 属性，我们可以实现各种效果，如模糊、亮度调整、对比度增强、饱和度控制等。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"filter()"})," 函数：这是一个 CSS 函数，用于在特定属性值中应用滤镜效果。它只能用于值为 ",(0,c.jsx)(n.code,{children:"<image>"})," 类型的属性上，比如 ",(0,c.jsx)(n.code,{children:"background-image"}),"。使用 ",(0,c.jsx)(n.code,{children:"filter()"})," 函数可以将多个滤镜效果组合在一起，创造更加复杂的背景效果。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"backdrop-filter"})," 属性：与 ",(0,c.jsx)(n.code,{children:"filter"})," 属性相似，",(0,c.jsx)(n.code,{children:"backdrop-filter"})," 也可以应用滤镜效果，但它仅会影响元素的背景，而不影响元素本身。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"CSS 滤镜提供了大约 11 种不同的滤镜函数，可以实现多种效果，从简单的模糊到改变颜色对比度和饱和度等。这些功能丰富的滤镜函数为开发人员提供了丰富的选择，可以根据具体需求创建出色的视觉效果。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:el,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLKeeg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLKeeg"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["尽管 CSS 滤镜功能强大且非常方便，但也有很大的局限性。我们能够创建的效果通常适用于图像，并且仅限于颜色调整和基本模糊化。例如，使用 ",(0,c.jsx)(n.code,{children:"blur()"})," 滤镜函数模糊元素，其效果将在应用于该元素的图像上创建一个统一的高斯模糊。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"img {\n    filter: blur(6px);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:es,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/zYQYLGa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYQYLGa"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中的 ",(0,c.jsx)(n.code,{children:"blur(6px)"})," 创建的模糊效果在图像上均匀的应用于 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 方向。但是，此函数只是 SVG 中可用的模糊滤镜基元的简化和有限的快捷方式，该基于允许我们对图像进行模糊处理，可以是统一的，也可以沿 ",(0,c.jsx)(n.code,{children:"x"})," 或 ",(0,c.jsx)(n.code,{children:"y"})," 轴之一应用单向模糊效果："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="blur">\n            <feGaussianBlur stdDeviation="6"></feGaussianBlur>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"img {\n    filter: url(#blur);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:er,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/LYoYBZa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYoYBZa"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"正如你所看到的，SVG 滤镜只需几行代码就能够创建类似于 诸如 Photoshop 图像编辑软件中滤镜级别的效果。"}),"\n",(0,c.jsxs)(n.h2,{id:"svg-滤镜",children:["SVG 滤镜",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-滤镜",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["SVG 滤镜（以及 CSS 滤镜）通常被认为是通过模糊效果或颜色操作来提升位图的一种方法。然而，它们的功能远不止于此。与 CSS 规则类似，SVG 滤镜是一系列指令的集合，可以在元素对象（例如图像、文本和 HTML 元素等）上创建视觉层。通过将这些效果应用于对象的 ",(0,c.jsx)(n.code,{children:"filter"})," 属性，我们可以实现各种视觉效果。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:ed,alt:""})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"输入（Source）"})," ：通常是 SVG 元素或 HTML 元素"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"滤镜构造器"}),"：使用 SVG 的 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素和一个或多个滤镜基元（",(0,c.jsx)(n.strong,{children:"Filter Primitive"}),"）组成"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"输出（Result）"})," ：通过 ",(0,c.jsx)(n.code,{children:"filter"})," 属性引用定义好的滤镜构造器，最终在浏览器呈现应用滤镜之后的结果。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"我们可以通过下面这个代码来描述这三者之间的关系："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg>\n    <defs>\n        <filter id="myFilter">\n            \x3c!-- 滤镜基元 --\x3e\n        </filter>\n    </defs>\n    \x3c!-- 使用 filter 属性将滤镜应用到 SVG 元素 --\x3e\n    <image href="example.jpg" filter="url(#myFilter)" class="filtered" />\n</svg>\n\n\x3c!-- 使用 CSS 的 filter 属性将滤镜应用到 HTML 元素 --\x3e\n<img class="filtered" src="example.jpg" alt="Filtered Image" />\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".filtered {\n    filter: url(#myFilter);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["正如上面代码所示。在 SVG 中，滤镜通过 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素来定义，该元素通常包含一个或多个滤镜基元，每个滤镜基元负责执行特定的滤镜操作。然后，可以通过 ",(0,c.jsx)(n.code,{children:"filter"})," 属性将 ",(0,c.jsx)(n.code,{children:"<fiter>"})," 定义好的滤镜应用到 HTML 或 SVG 元素上。"]}),"\n",(0,c.jsxs)(n.p,{children:["需要知道的是，如果 SVG 元素在 CSS 中同时应用了 ",(0,c.jsx)(n.code,{children:"filter"})," 属性，那么 CSS 中的 ",(0,c.jsx)(n.code,{children:"filter"})," 属性将会覆盖 SVG 元素自身的 ",(0,c.jsx)(n.code,{children:"filter"})," 属性。"]}),"\n",(0,c.jsxs)(n.p,{children:["相对于 CSS 滤镜而言，理解 SVG 滤镜确实具有一定挑战性。SVG 滤镜的语法通常更为复杂和冗长，即使是实现简单效果如阴影也是如此。例如，一些常见的滤镜效果，如 ",(0,c.jsx)(n.code,{children:"feColorMatrix"})," 和 ",(0,c.jsx)(n.code,{children:"feComposite"}),"，需要对数学和色彩理论有一定的了解才能理解其原理和应用方式。然而，尽管初始学习可能会有些困难，但不必担心，随着深入学习，你将能够更好地理解和掌握 SVG 滤镜的概念和技术。逐步探索和实践将帮助你逐渐熟悉 SVG 滤镜的语法和用法，并最终能够运用它们创造出各种令人惊叹的视觉效果。"]}),"\n",(0,c.jsxs)(n.h2,{id:"svg-的-filter-元素",children:["SVG 的 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-的-filter-元素",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["SVG 的 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素是用于创建滤镜效果的关键元素。它允许你定义一个或多个滤镜基元，并通过 ",(0,c.jsx)(n.code,{children:"filter"})," 属性将它们应用于 SVG 图形元素或 HTML 元素，从而实现各种视觉效果，例如模糊、颜色调整、阴影等。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<filter>"})," 元素的使用与 SVG 中的",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7354948936039137289",target:"_blank",rel:"noopener noreferrer",children:"渐变"}),"（",(0,c.jsx)(n.code,{children:"<linearGradieng>"})," 或 ",(0,c.jsx)(n.code,{children:"<radialGradient>"}),"）、",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7355510532712955954",target:"_blank",rel:"noopener noreferrer",children:"图案"}),"（",(0,c.jsx)(n.code,{children:"<pattern>"}),"）、",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7362748816769941540",target:"_blank",rel:"noopener noreferrer",children:"剪切"}),"（",(0,c.jsx)(n.code,{children:"<clipPath>"}),"）和",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423813296165",target:"_blank",rel:"noopener noreferrer",children:"遮罩"}),"（",(0,c.jsx)(n.code,{children:"<mask>"}),"）等元素类似。通常情况下，",(0,c.jsx)(n.code,{children:"<filter>"})," 在 SVG 中的 ",(0,c.jsx)(n.code,{children:"<defs>"})," 元素内被定义为可重复使用的模板，但并非必须如此。无论你是否将 ",(0,c.jsx)(n.code,{children:"<filter>"})," 放置在 ",(0,c.jsx)(n.code,{children:"<defs>"})," 元素内，它都不会直接呈现在页面上。这是因为滤镜需要一个源图像来工作，除非你显式地在该源图像上调用滤镜，否则它不会产生任何可见效果。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg>\n    <defs>\n        <filter \n            id="filter" \n            x="-20%" \n            y="-20%" \n            width="140%" \n            height="140%" \n            filterUnits="objectBoundingBox" \n            primitiveUnits="userSpaceOnUse">\n            \x3c!-- 滤镜基元放在这里 --\x3e\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["与其他 SVG 元素相似，",(0,c.jsx)(n.code,{children:"<filter>"})," 元素也包含了一些常见的属性，例如 ",(0,c.jsx)(n.code,{children:"x"})," 、",(0,c.jsx)(n.code,{children:"y"})," 、",(0,c.jsx)(n.code,{children:"width"})," 、",(0,c.jsx)(n.code,{children:"height"})," 、",(0,c.jsx)(n.code,{children:"id"})," 、",(0,c.jsx)(n.code,{children:"filterUnits"})," 和 ",(0,c.jsx)(n.code,{children:"primitiveUnits"})," 等。这些属性主要用于控制滤镜效果的位置（",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," ）、尺寸（",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"}),"）、标识符（",(0,c.jsx)(n.code,{children:"id"}),"）以及滤镜效果的单元类型（",(0,c.jsx)(n.code,{children:"filterUnits"}),"）和滤镜基元中各种长度值以及定义滤镜基元子区域的属性所采用的坐标系统（",(0,c.jsx)(n.code,{children:"primitiveUnits"}),"）。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<filter>"})," 元素的 ",(0,c.jsx)(n.code,{children:"id"})," 属性非常重要，因为它是指定滤镜的唯一标识符，以便被 ",(0,c.jsx)(n.code,{children:"filter"})," 属性的 ",(0,c.jsx)(n.code,{children:"url()"})," 引用，例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".filtered {\n    filter: url(#myFilter);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<filter>"})," 元素的 ",(0,c.jsx)(n.code,{children:"filterUnits"})," 属性类似于 ",(0,c.jsx)(n.code,{children:"<clipPath>"})," 的 ",(0,c.jsx)(n.code,{children:"clipPathUnits"})," 属性，它定义了 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素的 ",(0,c.jsx)(n.code,{children:"x"})," 、",(0,c.jsx)(n.code,{children:"y"})," 、",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 属性的坐标系统。它有两个可选值：",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," 和 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," ："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," ：",(0,c.jsx)(n.code,{children:"x"})," 、",(0,c.jsx)(n.code,{children:"y"})," 、",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 表示在引用 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素在当前用户坐标系统中的位置和大小。例如，通过 ",(0,c.jsx)(n.code,{children:"filter"})," 属性引用 ",(0,c.jsx)(n.code,{children:"<filter>"})," 的元素的用户坐标系统"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"objectBoundingBox"})," ：",(0,c.jsx)(n.code,{children:"x"})," 、",(0,c.jsx)(n.code,{children:"y"})," 、",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 表示引用元素的边界框（bbox）的部分或百分比"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果 ",(0,c.jsx)(n.code,{children:"filterUnits"})," 属性未指定，那么效果如同指定了值为 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["需要知道的是，",(0,c.jsx)(n.code,{children:"x"})," 、",(0,c.jsx)(n.code,{children:"y"})," 、",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 四个属性定义了滤镜在画布上的矩形区域，该矩形区域的大小将取决于 ",(0,c.jsx)(n.code,{children:"filterUnits"})," 的值。而且，该矩形的边界充当给定 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素包含的每个滤镜基元的硬剪切区域。因此，如果给定滤镜基元的效果超出该矩形的边界（当 ",(0,c.jsx)(n.code,{children:"<feGaussianBlur>"})," 基元的 ",(0,c.jsx)(n.code,{children:"stdDeviation"})," 使用非常大的值时，有时会发生这种情况），那么滤镜的部分效果将被裁剪掉。如果未指定 ",(0,c.jsx)(n.code,{children:"x"})," 或 ",(0,c.jsx)(n.code,{children:"y"})," ，则效果就像指定了值为 ",(0,c.jsx)(n.code,{children:"-20%"})," 一样；同样地，如果未指定 ",(0,c.jsx)(n.code,{children:"width"})," 或 ",(0,c.jsx)(n.code,{children:"height"})," ，则效果就像指定了值为 ",(0,c.jsx)(n.code,{children:"140%"})," 一样。"]}),"\n",(0,c.jsxs)(n.p,{children:["这意味着，通常需要提供填充空间，因为滤镜效果可能会超出给定对象边界框。出于这些目的，可以为 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 提供负百分比值，并为 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 提供大于 ",(0,c.jsx)(n.code,{children:"100%"})," 的百分比值。这就是为什么示例代码的 ",(0,c.jsx)(n.code,{children:"<filter>"})," 的设置 ",(0,c.jsx)(n.code,{children:'x="-20%"'})," 、",(0,c.jsx)(n.code,{children:'y="-20%"'})," 、",(0,c.jsx)(n.code,{children:'width="140%"'})," 和 ",(0,c.jsx)(n.code,{children:'height="140%"'})," 的原因。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<filter>"})," 的 ",(0,c.jsx)(n.code,{children:"primitiveUnits"})," 类似于 ",(0,c.jsx)(n.code,{children:"<mask>"})," 元素的 ",(0,c.jsx)(n.code,{children:"maskContentUnits"})," 属性，它主要用于给滤镜基元以及其子域中的各种各样的长度单位指定坐标系统。这个属性决定了在滤镜基元以及定义滤镜基元子区域的属性使用的长度单位是相对于用户坐标系统还是相对于对象边界框的百分比。",(0,c.jsx)(n.code,{children:"primitiveUnits"})," 属性与 ",(0,c.jsx)(n.code,{children:"filterUnits"})," 相似，有两个可选的值："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"userSpaceOnUse"}),"：表示滤镜基元的长度单位是相对于引用滤镜的元素的用户坐标系统。在这种模式下，滤镜基元的坐标和尺寸使用用户坐标系统的值。这意味着无论引用 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素的对象尺寸如何，滤镜的效果都会保持一致。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"objectBoundingBox"}),"：表示滤镜基元的长度单位是相对于引用滤镜的元素的边界框的百分比。在这种模式下，滤镜基元的坐标和尺寸是相对于引用它的元素的边界框的百分比。这意味着滤镜的效果会根据引用 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素的对象的边界框的尺寸而变化。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果未指定 ",(0,c.jsx)(n.code,{children:"primitiveUnits"})," 属性，默认值是 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 中，",(0,c.jsx)(n.code,{children:"primitiveUnits"})," 属性通常与 ",(0,c.jsx)(n.code,{children:"filter"})," 元素一起使用，用于指定滤镜基元的坐标系统，从而影响滤镜效果的表现方式。"]}),"\n",(0,c.jsxs)(n.p,{children:["介绍完 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素的常用属性之后，请继续回到我们的示例代码中来："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg>\n    <defs>\n        <filter \n            id="filter" \n            x="-20%" \n            y="-20%" \n            width="140%" \n            height="140%" \n            filterUnits="objectBoundingBox" \n            primitiveUnits="userSpaceOnUse">\n            \x3c!-- 滤镜基元放在这里 --\x3e\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".filtered {\n    filter: url(#myFilter);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上述代码示例中，虽然我们使用 ",(0,c.jsx)(n.code,{children:"<filter>"})," 创建一个名为 ",(0,c.jsx)(n.code,{children:"#myFilter"})," 的滤镜，并且通过 CSS 的 ",(0,c.jsx)(n.code,{children:"filter"})," 属性将其应用于 ",(0,c.jsx)(n.code,{children:".filtered"})," 元素上，但它并没有给 ",(0,c.jsx)(n.code,{children:".filtered"})," 元素带来任何效果。这是因为，上述代码中的滤镜什么也没有（它是空的）。"]}),"\n",(0,c.jsxs)(n.p,{children:["为了要使 ",(0,c.jsx)(n.code,{children:"<filter>"})," 创建的滤镜有相应的效果，则需要在 ",(0,c.jsx)(n.code,{children:"<filter>"})," 内空义一个或多个滤镜基元，这些滤镜基元会根据你设置的参数，创建出相应的滤镜效果。换句话说，",(0,c.jsx)(n.code,{children:"<filter>"})," 元素只是一系列滤镜基元的容器，只有结合这些滤镜基元，才会有实打实的滤镜效果。例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg>\n    <defs>\n        <filter \n            id="filter" \n            x="-20%" \n            y="-20%" \n            width="140%" \n            height="140%" \n            filterUnits="objectBoundingBox" \n            primitiveUnits="userSpaceOnUse">\n            \x3c!-- 高期模糊 --\x3e\n            <feGaussianBlur stdDeviation="3 10" x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" edgeMode="none" result="blur" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:ec,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdWZmd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdWZmd"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["正如你所看到的，",(0,c.jsx)(n.code,{children:"<filter>"})," 元素需要通过一系列滤镜基元来构建所需的效果。这些滤镜基元是在 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素的内部定义的。这些滤镜基元可以在 SVG 中通过 ",(0,c.jsx)(n.code,{children:"<fe>"})," 开头的标签来使用，共有十七个滤镜基元："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feGaussianBlur"})})," ",(0,c.jsx)(n.strong,{children:"（高斯模糊）"})," ：用于对图像进行高斯模糊处理。可以通过调整 ",(0,c.jsx)(n.code,{children:"stdDeviation"})," 属性来控制模糊的程度。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feDropShadow"})})," ",(0,c.jsx)(n.strong,{children:"（投影阴影）"})," ：用于创建对象的投影阴影效果。可以通过调整 ",(0,c.jsx)(n.code,{children:"dx"}),"、",(0,c.jsx)(n.code,{children:"dy"}),"、",(0,c.jsx)(n.code,{children:"stdDeviation"})," 和 ",(0,c.jsx)(n.code,{children:"flood-color"})," 属性来控制阴影的位置、模糊程度和颜色。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feMorphology"})})," ",(0,c.jsx)(n.strong,{children:"（形态学）"})," ：用于对图像进行形态学处理，如膨胀或腐蚀。可以通过调整 ",(0,c.jsx)(n.code,{children:"operator"})," 和 ",(0,c.jsx)(n.code,{children:"radius"})," 属性来控制形态学处理的类型和半径。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feDisplacementMap"})})," ",(0,c.jsx)(n.strong,{children:"（位移映射）"})," ：用于根据位移图像对图像进行变形。可以通过调整 ",(0,c.jsx)(n.code,{children:"scale"})," 和 ",(0,c.jsx)(n.code,{children:"xChannelSelector/yChannelSelector"})," 属性来控制变形的程度和方向。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feBlend"})})," ",(0,c.jsx)(n.strong,{children:"（混合）"})," ：用于对两个图像进行混合。可以通过调整 ",(0,c.jsx)(n.code,{children:"mode"})," 属性来控制混合模式，如叠加、正片叠底等。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feColorMatrix"})})," ",(0,c.jsx)(n.strong,{children:"（颜色矩阵）"})," ：用于对图像进行颜色矩阵变换。可以通过调整矩阵的值来实现颜色调整、色彩转换等效果。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feConvolveMatrix"})})," ",(0,c.jsx)(n.strong,{children:"（卷积矩阵）"})," ：用于对图像进行卷积处理，如边缘检测、模糊等。可以通过调整 ",(0,c.jsx)(n.code,{children:"kernelMatrix"})," 属性来定义卷积核。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feComponentTransfer"})})," ",(0,c.jsx)(n.strong,{children:"（组件传输）"})," ：该滤镜基元用于对图像的不同颜色通道进行传输处理。可以通过调整 ",(0,c.jsx)(n.code,{children:"type"})," 和 ",(0,c.jsx)(n.code,{children:"table-values"})," 属性来控制传输类型和值。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feSpecularLighting"})})," ",(0,c.jsx)(n.strong,{children:"（镜面光照）"})," ：用于模拟镜面光照效果。可以通过调整 ",(0,c.jsx)(n.code,{children:"surfaceScale"}),"、",(0,c.jsx)(n.code,{children:"specularConstant"})," 和 ",(0,c.jsx)(n.code,{children:"specularExponent"})," 属性来控制光照的强度和方向。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feDiffuseLighting"})})," ",(0,c.jsx)(n.strong,{children:"（漫反射光照）"})," ：用于模拟漫反射光照效果。可以通过调整 ",(0,c.jsx)(n.code,{children:"surfaceScale"}),"、",(0,c.jsx)(n.code,{children:"diffuseConstant"})," 和 ",(0,c.jsx)(n.code,{children:"kernelUnitLength"})," 属性来控制光照的强度和方向。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feFlood"})})," ",(0,c.jsx)(n.strong,{children:"（填充）"})," ：用于在图像上创建一个填充区域。可以通过调整 ",(0,c.jsx)(n.code,{children:"flood-color"})," 和 ",(0,c.jsx)(n.code,{children:"flood-opacity"})," 属性来控制填充的颜色和不透明度。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feTurbulence"})})," ",(0,c.jsx)(n.strong,{children:"（湍流）"})," ：用于创建湍流纹理。可以通过调整 ",(0,c.jsx)(n.code,{children:"type"}),"、",(0,c.jsx)(n.code,{children:"baseFrequency"})," 和 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 属性来控制湍流的类型、频率和数量。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feImage"})})," ",(0,c.jsx)(n.strong,{children:"（图像）"})," ：用于在图像中嵌入外部图像。可以通过调整 ",(0,c.jsx)(n.code,{children:"xlink:href"})," 和 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性来控制外部图像的路径和保持方面比。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feTile"})})," ",(0,c.jsx)(n.strong,{children:"（平铺）"})," ：用于对图像进行平铺处理。可以通过调整 ",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"result"})," 属性来控制输入和输出的图像。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feOffset"})})," ",(0,c.jsx)(n.strong,{children:"（偏移）"})," ：用于对图像进行偏移处理。可以通过调整 ",(0,c.jsx)(n.code,{children:"dx"})," 和 ",(0,c.jsx)(n.code,{children:"dy"})," 属性来控制水平和垂直方向的偏移量。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feComposite"})})," ",(0,c.jsx)(n.strong,{children:"（合成）"})," ：用于对多个图像进行合成处理。可以通过调整 ",(0,c.jsx)(n.code,{children:"operator"}),"、",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"result"})," 属性来控制合成的方式和输入输出。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feMerge"})})," ",(0,c.jsx)(n.strong,{children:"（合并）"})," ：用于将多个图像合并为一个图像。可以通过调整 ",(0,c.jsx)(n.code,{children:"in"})," 子元素来控制输入图像。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"这些滤镜基元可以单独使用或组合使用，以创建各种复杂的图形效果。通过调整它们的属性值和组合方式，可以实现各种视觉效果，如模糊、阴影、颜色调整等。"}),"\n",(0,c.jsxs)(n.h2,{id:"svg-滤镜基元",children:["SVG 滤镜基元",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-滤镜基元",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 中，每个 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素包含一组滤镜基元作为其子元素。每个滤镜基元对一个或多个输入执行单个基本图形操作，产生一个图形结果。"]}),"\n",(0,c.jsxs)(n.p,{children:["滤镜基元的命名与其执行的图形操作相对应。例如，将高期模糊效果应用于源图形的基元称为 ",(0,c.jsx)(n.code,{children:"feGaussianBlur"})," 。所有滤镜基元都共享相前的前缀：",(0,c.jsx)(n.code,{children:"fe"})," ，即滤镜效果（Filter Effect）。到目前为止，",(0,c.jsx)(n.a,{href:"https://www.w3.org/TR/filter-effects-1/#FilterPrimitivesOverview",target:"_blank",rel:"noopener noreferrer",children:"SVG 滤镜规范定义了 17 种不同的滤镜基元"}),"，能够实现各种不同的图形效果，包括但不限于噪声和纹理生成、光照效果、颜色操作等。"]}),"\n",(0,c.jsxs)(n.table,{children:["\n",(0,c.jsxs)(n.thead,{children:["\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.th,{children:(0,c.jsx)(n.strong,{children:"滤镜基元名称"})}),"\n",(0,c.jsx)(n.th,{children:(0,c.jsx)(n.strong,{children:"滤镜基元描述"})}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.tbody,{children:["\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feBlend"})})})}),"\n",(0,c.jsx)(n.td,{children:"混合两个图层。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feColorMatrix"})})})}),"\n",(0,c.jsx)(n.td,{children:"改变输入颜色。用于控制色调、饱和度和亮度。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feComponentTransfer"})})})}),"\n",(0,c.jsxs)(n.td,{children:["为每个像素重新映射颜色。用于调整亮度、对比度、色彩平衡和阈值。与 ",(0,c.jsx)(n.code,{children:"feFuncA"}),"、",(0,c.jsx)(n.code,{children:"feFuncR"}),"、",(0,c.jsx)(n.code,{children:"feFuncG"}),"、",(0,c.jsx)(n.code,{children:"feFuncB"})," 一起使用。",(0,c.jsx)(n.code,{children:"feFuncA"}),"、",(0,c.jsx)(n.code,{children:"feFuncR"}),"、",(0,c.jsx)(n.code,{children:"feFuncG"}),"、",(0,c.jsx)(n.code,{children:"feFuncB"}),"：定义输入图形的 Alpha、红、绿和蓝分量的转换函数。输入图形在 ",(0,c.jsx)(n.code,{children:"feComponentTransfer"})," 中定义。"]}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feComposite"})})})}),"\n",(0,c.jsxs)(n.td,{children:["组合 2 个输入","   ",(0,c.jsx)(n.code,{children:"over"}),"：",(0,c.jsx)(n.code,{children:"in"})," 放在 ",(0,c.jsx)(n.code,{children:"in2"})," 的前面。"," ",(0,c.jsx)(n.code,{children:"in"}),"：",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"in2"})," 的重叠部分渲染 ",(0,c.jsx)(n.code,{children:"in"})," 图形。",(0,c.jsx)(n.code,{children:"atop"}),"：",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"in2"})," 的重叠部分渲染 ",(0,c.jsx)(n.code,{children:"in"})," 图形。不重叠的 ",(0,c.jsx)(n.code,{children:"in2"})," 区域被渲染。",(0,c.jsx)(n.code,{children:"out"}),"：不重叠 ",(0,c.jsx)(n.code,{children:"in2"})," 的 ",(0,c.jsx)(n.code,{children:"in"})," 区域被渲染。 ",(0,c.jsx)(n.code,{children:"xor"}),"：不重叠的 ",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"in2"})," 区域被渲染。<br/ > ",(0,c.jsx)(n.code,{children:"lighter"}),"：",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"in2"})," 的总和被渲染。"," ",(0,c.jsx)(n.code,{children:"arithmetic"}),"：用于将 ",(0,c.jsx)(n.code,{children:"feDiffuseLighting"})," 和 ",(0,c.jsx)(n.code,{children:"feSpecularLighting"})," 滤镜的输出与纹理数据组合在一起。每个像素的计算公式为：",(0,c.jsx)(n.code,{children:"result = k1i1i2 + k2i1 + k3i2 + k4"}),"。",(0,c.jsx)(n.code,{children:"i1"})," 和 ",(0,c.jsx)(n.code,{children:"i2"})," 分别表示输入图像的相应像素通道值，它们映射到 ",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"in2"}),"。",(0,c.jsx)(n.code,{children:"k1"}),"、",(0,c.jsx)(n.code,{children:"k2"}),"、",(0,c.jsx)(n.code,{children:"k3"})," 和 ",(0,c.jsx)(n.code,{children:"k4"})," 表示具有相同名称的属性的值。"]}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feConvolveMatrix"})})})}),"\n",(0,c.jsx)(n.td,{children:"将输入图像的像素与相邻像素组合。用于模糊、锐化、浮雕和斜面。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feDiffuseLighting"})})})}),"\n",(0,c.jsxs)(n.td,{children:["使用 Alpha 通道作为凹凸图来照亮图像。与 ",(0,c.jsx)(n.code,{children:"fePointlight"})," 和 ",(0,c.jsx)(n.code,{children:"feSpotlight"})," 一起使用。","   ",(0,c.jsx)(n.code,{children:"fePointlight"}),"：定义光源，可以创建点光源效果。"," ",(0,c.jsx)(n.code,{children:"feSpotlight"}),"：定义光源。"]}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feDisplacementMap"})})})}),"\n",(0,c.jsx)(n.td,{children:"用于将图像轮廓到纹理。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feDropShadow"})})})}),"\n",(0,c.jsx)(n.td,{children:"对输入图像进行投影阴影处理。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feFlood"})})})}),"\n",(0,c.jsx)(n.td,{children:"用颜色填充滤镜区域。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feGaussianBlur"})})})}),"\n",(0,c.jsx)(n.td,{children:"对输入图像进行模糊处理。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feImage"})})})}),"\n",(0,c.jsx)(n.td,{children:"图像元素的滤镜版本（具有相同的属性）。它从外部源获取图像数据，并提供像素数据作为输出（如果外部源是 SVG，则对其进行栅格化）。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feMerge"})})})}),"\n",(0,c.jsxs)(n.td,{children:["同时应用滤镜效果，而不是顺序应用。与 ",(0,c.jsx)(n.code,{children:"feMergeNode"})," 一起使用。",(0,c.jsx)(n.code,{children:"feMergeNode"})," 获取另一个滤镜的结果。"]}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feMorphology"})})})}),"\n",(0,c.jsx)(n.td,{children:"侵蚀或膨胀输入图像。用于增大或减小。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feOffset"})})})}),"\n",(0,c.jsx)(n.td,{children:"平移图像。用于创建阴影。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feSpecularLighting"})})})}),"\n",(0,c.jsxs)(n.td,{children:["使用 Alpha 通道作为凹凸图来照亮图像。生成的图像是基于光线颜色的 RGBA 图像。光照计算遵循 Phong 光照模型的标准镜面成分。生成的图像取决于光线颜色、光线位置和输入凹凸图的表面几何形状。光照计算的结果被添加。滤镜基元假定观察者在 ",(0,c.jsx)(n.code,{children:"z"})," 方向上处于无限远处。生成的图像包含光照计算的镜面反射部分。与使用算术 ",(0,c.jsx)(n.code,{children:"feComposite"})," 方法的添加项纹理一起使用。与 ",(0,c.jsx)(n.code,{children:"fePointlight"})," 和 ",(0,c.jsx)(n.code,{children:"feSpotlight"})," 一起使用。",(0,c.jsx)(n.code,{children:"fePointlight"})," 定义了一个光源，可以创建点光源效果。",(0,c.jsx)(n.code,{children:"feSpotlight"})," 定义了一个光源。"]}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feTile"})})})}),"\n",(0,c.jsx)(n.td,{children:"用输入图像的重复平铺模式填充目标矩形。"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:(0,c.jsx)(n.em,{children:(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"feTurbulence"})})})}),"\n",(0,c.jsx)(n.td,{children:"使用 Perlin 涡流函数创建图像。用于制作纹理。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"每个滤镜基元通过接收一个源图形作为输入，并输出另一个源图形来工作。一个滤镜效果的输出可以用作另一个效果的输入。这非常重要和强大，因为这意味着你几乎可以无限组合滤镜效果，从而创建几乎无限数量的图形效果。"}),"\n",(0,c.jsxs)(n.p,{children:["每个滤镜基元可以接受一个或两个输入，并且仅输出一个结果。滤镜基元的输入在名为 ",(0,c.jsx)(n.code,{children:"in"})," 的属性中定义。操作的结果在 ",(0,c.jsx)(n.code,{children:"result"})," 属性中定义。如果滤镜效果需要第二个输入，则将第二个输入设置在 ",(0,c.jsx)(n.code,{children:"in2"})," 属性中。操作的结果可以用作任何其他操作的输入，但是如果操作的输入未在 ",(0,c.jsx)(n.code,{children:"in"})," 属性中指定，则自动使用前一个操作的结果作为输入。如果不指定基元的结果，则其结果将自动用作接下来的基元的输入。"]}),"\n",(0,c.jsx)(n.p,{children:"除了使用其他基元的结果作为输入外，滤镜基元还接受其他类型的输入，其中最重要的是："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"SourceGraphic"}),"：将整个滤镜应用于的元素；例如，一个图像或一段文本。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"SourceAlpha"}),"：与",(0,c.jsx)(n.code,{children:"SourceGraphic"}),"相同，只是这个图形仅包含元素的Alpha通道。例如，对于JPEG图像，它是一个大小与图像本身相同的黑色矩形。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"你会发现，有时你会想要使用源图形作为输入，有时只想使用其Alpha通道。"}),"\n",(0,c.jsx)(n.p,{children:"接下来，我们通过简单的实例来解释这些滤镜基元。注意，在这里我们不会对每个滤镜基元做很详细的阐述，但将会通过真实案例，告诉大家每个基础的使用以及效果。不过，在小册后面还会有很多章节向大家阐述 SVG 滤镜的高级功能。"}),"\n",(0,c.jsx)(n.p,{children:"在开始之前，我为大家准备了下面这段代码："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<svg width="0" height="0">\n    <defs>\n        <filter \n            id="替换成滤镜基元的名称,当然也可以是任意你喜欢的名称" \n            x="-20%" \n            y="-20%" \n            width="140%" \n            height="140%" \n            filterUnits="objectBoundingBox" \n            primitiveUnits="userSpaceOnUse">\n            \x3c!-- 每个滤镜基元的代码将会放置在这里 --\x3e\n        </filter>\n    </defs>\n</svg>\n\n\x3c!-- 应用滤镜的元素 --\x3e\n<div class="wrapper">\n    <img src="https://picsum.photos/id/124/800/600" alt="" class="filtered" />\n    <div class="text">\n        <h2 class="filtered">I ❣️ SVG</h2>\n    </div>\n</div>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".filtered {\n    filter: url(#filterIdName);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["注意，接下来的示例，请将 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素中的 ",(0,c.jsx)(n.code,{children:"id"})," 属性替换成滤镜基元的名称或你自己喜欢的名称，同时在 CSS 中将 ",(0,c.jsx)(n.code,{children:"filter"})," 属性 ",(0,c.jsx)(n.code,{children:"url()"})," 函数中的 ",(0,c.jsx)(n.code,{children:"#filterIdName"})," 替换为 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素的 ",(0,c.jsx)(n.code,{children:"id"})," 值。另外，每个滤镜基元的具体属性参数可以参考 ",(0,c.jsx)(n.a,{href:"https://yoksel.github.io/svg-filters/#/",target:"_blank",rel:"noopener noreferrer",children:"SVG Filters 在线工具"}),"："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:ei,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["URL: ",(0,c.jsx)(n.a,{href:"https://yoksel.github.io/svg-filters",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/svg-filters"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"高斯模糊fegaussianblur",children:["高斯模糊：feGaussianBlur",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高斯模糊fegaussianblur",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["高斯模糊（",(0,c.jsx)(n.code,{children:"<feGaussianBlur>"}),"）滤镜是以已故数学家卡尔\xb7弗里德里希\xb7高斯命名，并应用数学函数来模糊图像。它会对输入图像执行高斯模糊。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feGaussianBlur" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feGaussianBlur \n                stdDeviation="3 10" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                in="SourceGraphic" \n                edgeMode="none" \n                result="blur" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面的代码中，我们在 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素内嵌套了高斯模糊 ",(0,c.jsx)(n.code,{children:"<feGaussianBlur>"})," ，该滤镜基元的一些属性将会影响产生的模糊效果。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"stdDeviation"})," ：用于调整模糊的程度。如果提供了两个值，第一个数字表示沿滤镜元素的 ",(0,c.jsx)(n.code,{children:"x"})," 轴方向的模糊值；第二个数字则表示沿滤镜元素的 ",(0,c.jsx)(n.code,{children:"y"})," 轴方向的模糊值。如果只提供一个数字，则表示 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 轴的值相同。",(0,c.jsx)(n.code,{children:"x"})," 或 ",(0,c.jsx)(n.code,{children:"y"})," 轴中有一个值为 ",(0,c.jsx)(n.code,{children:"0"})," ，则表示模糊只在滤镜元素的一个方向上进行。负值或零值会禁用给定滤镜基元的效果。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"edgeMode"})," ：确定如何根据需要使用颜色值扩展输入图像，以便在内核位于输入图像的边缘或附近时可以应用矩阵操作。它可选的值有 ",(0,c.jsx)(n.code,{children:"duplicate"})," （表示必要时沿着输入图像的每个边界通过复制给定边的颜色值来扩展输入图像） 、 ",(0,c.jsx)(n.code,{children:"wrap"})," （表示通过从图像的相反边获取颜色值来扩展输入图像）和 ",(0,c.jsx)(n.code,{children:"none"})," （表示使用零的像素值对输入图像进行扩展，",(0,c.jsx)(n.code,{children:"R"}),"、",(0,c.jsx)(n.code,{children:"G"}),"、",(0,c.jsx)(n.code,{children:"B"})," 和 ",(0,c.jsx)(n.code,{children:"A"})," 均为零）"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"in"})," ：定义了滤镜将被应用到的位置。它有六个值可选（",(0,c.jsx)(n.code,{children:"SourceGraphic"})," 、 ",(0,c.jsx)(n.code,{children:"SourceAlpha"})," 、 ",(0,c.jsx)(n.code,{children:"BackgroundImage"})," 、 ",(0,c.jsx)(n.code,{children:"BackgroundAlpha"})," 、 ",(0,c.jsx)(n.code,{children:"FillPaint"})," 、 ",(0,c.jsx)(n.code,{children:"StrokePaint"})," 和 ",(0,c.jsx)(n.code,{children:"<filter-primitive-reference>"}),"）。如果未提供值且这是第一个滤镜基元，则此滤镜基元将使用 ",(0,c.jsx)(n.code,{children:"SourceGraphic"})," 作为其输入。如果未提供值且这是后续滤镜基元，则此滤镜基元将使用先前滤镜基元的结果作为其输入。如果未提供值且这是后续滤镜基元，则此滤镜基元将使用先前滤镜基元的结果作为其输入。如果 ",(0,c.jsx)(n.code,{children:"result"})," 的值在给定滤镜元素中出现多次，则对该结果的引用将使用具有给定结果属性值的最近的前一个滤镜基元。不允许对结果进行前向引用，且将被视为未指定结果。对不存在的结果的引用将被视为未指定结果。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"result"})," ：我们用它来命名滤镜。这在使用多个滤镜时作为",(0,c.jsx)(n.code,{children:"in"})," 的参考很有用。如果未提供值，则仅当该滤镜基元为其 ",(0,c.jsx)(n.code,{children:"in"})," 属性提供值时，输出才可用于作为下一个滤镜基元的隐式输入重复使用 ",(0,c.jsx)(n.code,{children:"feGaussianBlur"})," 滤镜。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"应用高斯模糊滤镜的效果如下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:en,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/QWRwWVO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWRwWVO"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，CSS 的 ",(0,c.jsx)(n.code,{children:"filter"})," 中的 ",(0,c.jsx)(n.code,{children:"blur()"})," 是该滤镜的快捷和简化方式。"]}),"\n",(0,c.jsxs)(n.h3,{id:"投影阴影fedropshadow",children:["投影阴影：feDropShadow",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#投影阴影fedropshadow",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"这个滤镜比较简单，它将在元素后面添加一个投影阴影："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feDropShadow" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feDropShadow \n                stdDeviation="5 5" \n                in="SourceGraphic" \n                dx="20" \n                dy="20" \n                flood-color="#f36" \n                flood-opacity=".8" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                result="dropShadow"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面的代码中，我们在 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素内嵌套了高斯模糊 ",(0,c.jsx)(n.code,{children:"<feDropShadow>"})," ，该滤镜基元的一些属性将会影响产生的投影阴影效果。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"stdDeviation"})," ：与 ",(0,c.jsx)(n.code,{children:"<feGaussianBlur>"})," 滤镜基元的 ",(0,c.jsx)(n.code,{children:"stdDeviation"})," 属性相似。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"dx"})," ：投影阴影的 ",(0,c.jsx)(n.code,{children:"x"})," 偏移量。此属性将转发到内部 ",(0,c.jsx)(n.code,{children:"feOffset"})," 元素的 ",(0,c.jsx)(n.code,{children:"dx"})," 属性。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"dy"})," ：投影阴影的 ",(0,c.jsx)(n.code,{children:"y"})," 偏移量。此属性将转发到内部 ",(0,c.jsx)(n.code,{children:"feOffset"})," 元素的 ",(0,c.jsx)(n.code,{children:"dy"})," 属性。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"flood-color"})," ：投影阴影的颜色。此属性将转发到内部 ",(0,c.jsx)(n.code,{children:"feFlood"})," 元素的 ",(0,c.jsx)(n.code,{children:" flood-color  "}),"属性。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"flood-opacity"})," ：投影阴影的不透明度。此属性将转发到内部 ",(0,c.jsx)(n.code,{children:"feFlood"})," 元素的 ",(0,c.jsx)(n.code,{children:"flood-opacity"})," 属性。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"in"})," ：与 ",(0,c.jsx)(n.code,{children:"<feGaussianBlur>"})," 滤镜基元的 ",(0,c.jsx)(n.code,{children:"in"})," 属性相似"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"result"})," ：如果提供，则由于处理此滤镜基元而产生的图形可以由同一滤镜元素中后续滤镜基元的 ",(0,c.jsx)(n.code,{children:"in"})," 属性引用。如果未提供值，则仅当该滤镜基元为其 ",(0,c.jsx)(n.code,{children:"in"})," 属性提供值时，输出才可用于作为下一个滤镜基元的隐式输入重复使用 ",(0,c.jsx)(n.code,{children:"FeDropShadow"})," 滤镜"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:ee,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/zYQxYgX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYQxYgX"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"形态学femorphology",children:["形态学：feMorphology",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#形态学femorphology",children:"#"})]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"形态学是研究形状和结构的学科"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feMorphology>"})," 主要用于改变图形元素的形状，例如通过膨胀（Dilation）或腐蚀（Erosion）操作来调整边缘或整体形态。它特别适用于增大或减小 Alpha 通道。其主要属性有："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"operator"})," ：该属性可接受的值有 ",(0,c.jsx)(n.code,{children:"dilate"})," 和 ",(0,c.jsx)(n.code,{children:"erode"})," 以及一个半径，用于定义膨胀（变胖）或腐蚀（变瘦）的程度。膨胀（或腐蚀）核是一个宽度为 ",(0,c.jsx)(n.code,{children:"2*x"})," 半径，高度为 ",(0,c.jsx)(n.code,{children:"2*y"})," 半径的矩形。在膨胀中，输出像素是输入图像核矩形中相应 ",(0,c.jsx)(n.code,{children:"R"}),"、",(0,c.jsx)(n.code,{children:"G"}),"、",(0,c.jsx)(n.code,{children:"B"}),"、",(0,c.jsx)(n.code,{children:"A"})," 值的分量最大值。在腐蚀中，输出像素是输入图像核矩形中相应 ",(0,c.jsx)(n.code,{children:"R"}),"、",(0,c.jsx)(n.code,{children:"G"}),"、",(0,c.jsx)(n.code,{children:"B"}),"、",(0,c.jsx)(n.code,{children:"A"})," 值的分量最小值。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"radius"})," ：操作的半径（或半径）。如果提供两个数值，第一个数字表示 ",(0,c.jsx)(n.code,{children:"x"})," 半径，第二个值表示 ",(0,c.jsx)(n.code,{children:"y"})," 半径。如果提供一个数字，则该值用于 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"}),"。如果未指定属性，则效果就像指定了值为 ",(0,c.jsx)(n.code,{children:"0"})," 一样。负值或零值将禁用给定滤镜基元的效果。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"in"})," ：与 ",(0,c.jsx)(n.code,{children:"feGaussianBlur"})," 的 ",(0,c.jsx)(n.code,{children:"in"})," 属性类似"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"result"})," ：与 ",(0,c.jsx)(n.code,{children:"feGaussianBlur"})," 的 ",(0,c.jsx)(n.code,{children:"result"})," 类似"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["我们首先来看膨胀的效果，即 ",(0,c.jsx)(n.code,{children:'operator="dilate"'})," ："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feMorphology" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feMorphology \n                operator="dilate" \n                radius="3 3" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                in="SourceGraphic" \n                result="morphology"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:$,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/OJYPPpz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJYPPpz"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["将上面示例中 ",(0,c.jsx)(n.code,{children:"operator"})," 替换为 ",(0,c.jsx)(n.code,{children:"erode"})," ，就是腐蚀的效果："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feMorphology" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feMorphology \n                operator="erode" \n                radius="3 3" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                in="SourceGraphic" \n                result="morphology"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:H,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/JjqooyG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjqooyG"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"从这些结果中，我们可以看到，与侵蚀产生的变暗而低调的图像相比，膨胀产生了一个更加生动的图像。亮度是由于图像的像素扩展导致的，反之亦然。拿示例中的文本为例，膨胀和侵蚀使文本变得更胖或更瘦："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:Q,alt:""})}),"\n",(0,c.jsxs)(n.h3,{id:"湍流-feturbulence",children:[(0,c.jsx)(n.strong,{children:"湍流："})," feTurbulence",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#湍流-feturbulence",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 用于在图形中生成类似紊乱、波动或湍流效果的纹理。即，它会生成随机噪声图案，常用于创造自然的纹理外观，如云朵、火焰或水流的效果。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feTurbulence" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feTurbulence \n                type="turbulence" \n                baseFrequency="0.01 0.02" \n                numOctaves="1" \n                result="turbulence" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:K,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/vYwEEpZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYwEEpZ"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["上面这个示例，仅在 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 中使用了",(0,c.jsx)(n.code,{children:"baseFrequency"})," 和 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 两个属性。其中，",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性控制 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 方向的扭曲或噪声量。较高的 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 值会减小扭曲图案的大小。它可以包含两个值，如果只使用一个值，则覆盖 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 轴。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:Z,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"numOctaves"})," 也是一个噪声函数，控制滤镜效果中的八度数（八度音阶）。使用 ",(0,c.jsx)(n.code,{children:'"0.01 0.02"'})," 的",(0,c.jsx)(n.code,{children:"baseFrequency"}),"，我们得到以下结果："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:J,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<FeTurbulence>"})," 除了",(0,c.jsx)(n.code,{children:"baseFrequency"})," 和 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 两个属性之外，还有其他几个常用属性："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"seed"})," ：伪随机数生成器的起始数字，起始值为 ",(0,c.jsx)(n.code,{children:"0"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"stitchTiles"})," ：可选 值为 ",(0,c.jsx)(n.code,{children:"stitch"})," 和 ",(0,c.jsx)(n.code,{children:"noStitch"})," 。如果值为 ",(0,c.jsx)(n.code,{children:"noStitch"}),"，则不会尝试在包含湍流函数的图块的边界上实现平滑过渡。有时结果会在图块边界显示明显的不连续性。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"type"}),"：指示滤镜基元应执行噪声还是湍流函数。可选的值：",(0,c.jsx)(n.code,{children:"fractalNoise"})," 和 ",(0,c.jsx)(n.code,{children:"turbulence"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"result"})," ：与前面所介绍的滤镜基元的 ",(0,c.jsx)(n.code,{children:"result"})," 属性相似"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"位移映射fedisplacementmap",children:["位移映射：feDisplacementMap",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#位移映射fedisplacementmap",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 用于根据一个图像（即所谓的位移图）来改变另一个图像像素的位置，从而实现视觉上的扭曲或位移效果，常用于创造水波纹、烟雾、波动文字等动态或失真视觉效果。"]}),"\n",(0,c.jsxs)(n.p,{children:["对于这个 SVG 滤镜基元，我们需要两个输入： ",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"in2"})," ，其中一个保存原始图形，另一个作为位移图的图像。它会使用来自 ",(0,c.jsx)(n.code,{children:"in2"})," 图像的像素值来空间位移来自 ",(0,c.jsx)(n.code,{children:"in"})," 的图像："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feDisplacementMap" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feTurbulence \n                type="turbulence" \n                baseFrequency="0.01 0.02" \n                numOctaves="1" \n                result="noise" />\n            <feDisplacementMap \n                in="SourceGraphic" \n                in2="noise" \n                scale="50" \n                xChannelSelector="R" \n                yChannelSelector="B" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                result="displacementMap"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:W,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/RwmNPZe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwmNPZe"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在这个示例中，我们应用了两个滤镜基元，其中将 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜基元创建的效果作为 ",(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 滤镜基元的 ",(0,c.jsx)(n.code,{children:"in2"})," 值（位移图的图像）。你看到的效果，图像将会遵循 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜基元创建的扭曲图案。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 滤镜基元除了",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"in2"})," 属性之外，还包括下面这些常见属性："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"scale"})," ：位移比例因子。当此属性的值为 ",(0,c.jsx)(n.code,{children:"0"})," 时，此操作对源图像没有影响。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"xChannelSelector"})," ：值为 ",(0,c.jsx)(n.code,{children:"R"})," 、",(0,c.jsx)(n.code,{children:"G"})," 、 ",(0,c.jsx)(n.code,{children:"B"})," 和 ",(0,c.jsx)(n.code,{children:"A"})," ，指定要使用来自 ",(0,c.jsx)(n.code,{children:"in2"})," 的哪个通道来沿 ",(0,c.jsx)(n.code,{children:"x"})," 轴位移 ",(0,c.jsx)(n.code,{children:"in"})," 中的像素。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"yChannelSelector"})," ：类似于 ",(0,c.jsx)(n.code,{children:"xChannelSelector"})," ，它用来指定要使用来自 ",(0,c.jsx)(n.code,{children:"in2"})," 的哪个通道来沿 ",(0,c.jsx)(n.code,{children:"y"})," 轴位移 ",(0,c.jsx)(n.code,{children:"in"})," 中的像素。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在此基础上，我们还可以使用 SVG 的 ",(0,c.jsx)(n.code,{children:"<animate>"})," 让 ",(0,c.jsx)(n.code,{children:"feDisplacementMap"})," 创建的水波纹动起来："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feDisplacementMap" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feTurbulence \n                id="turbulence" \n                type="turbulence" \n                baseFrequency="0.01 0.02" \n                numOctaves="1" \n                result="noise" />\n            <feDisplacementMap \n                in="SourceGraphic" \n                in2="noise" \n                scale="50" \n                xChannelSelector="R" \n                yChannelSelector="B" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                result="displacementMap"/>\n            <animate \n                xlink:href="#turbulence" \n                attributeName="baseFrequency" \n                dur="60s" \n                keyTimes="0;0.5;1"\n                values="0.01 0.02;0.02 0.04;0.01 0.02" \n                repeatCount="indefinite" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["注意，",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜基元有一个 ",(0,c.jsx)(n.code,{children:"id"})," ，我们使用 ",(0,c.jsx)(n.code,{children:"<animate>"})," 的 ",(0,c.jsx)(n.code,{children:"xlink:href"})," 引用了 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜基元的 ",(0,c.jsx)(n.code,{children:"id"})," ，将对该滤镜进行动画化处理。然后是 ",(0,c.jsx)(n.code,{children:"attributeName"})," 属性，指定对 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜基元的 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性进行动画处理。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:z,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/pomvjrd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/pomvjrd"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["你可能会好奇，这个水波纹怎么就动起来了是吧。在这个示例中，动画效果都来源于 SVG 的 ",(0,c.jsx)(n.code,{children:"<animate>"})," 元素，它的各属性控制了整个动画效果。你现在不明白示例中 ",(0,c.jsx)(n.code,{children:"<animate>"})," 元素每个属性的功能，并不要紧，小册后续会有专门的课程向大家阐述，到时你也可以轻易使用它来制作你想要的动画效果。"]}),"\n",(0,c.jsxs)(n.h3,{id:"颜色矩阵fecolormatrix",children:["颜色矩阵：feColorMatrix",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#颜色矩阵fecolormatrix",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜基元通过输入图形的每个像素上的 RGBA 颜色和 Alpha 修正 应用矩阵变换，以产生具有新的RGBA 颜色和 Alpha 值集合的结果。简单地说，它是通过矩阵运算来调整图像颜色。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:I,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜基元包括 ",(0,c.jsx)(n.code,{children:"in"})," 、",(0,c.jsx)(n.code,{children:"result"})," 、 ",(0,c.jsx)(n.code,{children:"type"})," 和 ",(0,c.jsx)(n.code,{children:"value"})," 等属性值，其中 ",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"result"})," 与前面所介绍的滤镜基元是相似的，这里单独将 ",(0,c.jsx)(n.code,{children:"type"})," 和 ",(0,c.jsx)(n.code,{children:"value"})," 拎出来介绍 ："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"type"})," ：可选值包括 ",(0,c.jsx)(n.code,{children:"matrix"}),"、",(0,c.jsx)(n.code,{children:"saturate"}),"、",(0,c.jsx)(n.code,{children:"hueRotate"})," 和 ",(0,c.jsx)(n.code,{children:"luminaceToAlpha"})," 。主要用于指定颜色矩阵操作的类型。其中关键字 ",(0,c.jsx)(n.code,{children:"matrix"})," 表示将提供完整的 ",(0,c.jsx)(n.code,{children:"5x4"})," 值矩阵。其他关键字代表方便的快捷方式，允许执行常用的颜色操作，而无需指定完整的矩阵。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"values"})," ：其内容取决于 ",(0,c.jsx)(n.code,{children:"type"})," 属性的值。对于 ",(0,c.jsx)(n.code,{children:"matrix"}),"，",(0,c.jsx)(n.code,{children:"values"})," 是由空格和 ",(0,c.jsx)(n.code,{children:"/"})," 或逗号分隔的 ",(0,c.jsx)(n.code,{children:"20"})," 个矩阵值的列表（",(0,c.jsx)(n.code,{children:"5x4"})," 值矩阵）；对于 ",(0,c.jsx)(n.code,{children:"hueRotate"}),"，",(0,c.jsx)(n.code,{children:"values"})," 是一个实数值（度数）；对于 ",(0,c.jsx)(n.code,{children:"luminanceToAlpha"}),"，",(0,c.jsx)(n.code,{children:"values"})," 不适用。如果未指定属性，则默认行为取决于属性 ",(0,c.jsx)(n.code,{children:"type"})," 的值。如果是 ",(0,c.jsx)(n.code,{children:"matrix"}),"，则此属性默认为单位矩阵。如果是 ",(0,c.jsx)(n.code,{children:"saturate"}),"，则此属性默认为值 ",(0,c.jsx)(n.code,{children:"1"}),"，这会产生单位矩阵。如果是 ",(0,c.jsx)(n.code,{children:"hueRotate"}),"，则此属性默认为值 ",(0,c.jsx)(n.code,{children:"0"}),"，这会产生单位矩阵。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["首先来看 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"matrix"})," 值的效果（它是 ",(0,c.jsx)(n.code,{children:"type"})," 的默认值，也是最复杂的一种操作类型）："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feColorMatrix" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feColorMatrix \n                type="matrix" \n                values="1 0 0 0 0\n                        0 1 0 0 0\n                        0 0 1 0 0\n                        0 0 0 1 0" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                in="SourceGraphic" \n                result="colormatrix"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"乍一看语法似乎相当复杂，但将其可视化如下可能会有所帮助："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:Y,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["色彩矩阵网格 ",(0,c.jsx)(n.code,{children:"x"})," 轴代表我们原始图像的通道（",(0,c.jsx)(n.code,{children:"R"}),"、",(0,c.jsx)(n.code,{children:"G"}),"、",(0,c.jsx)(n.code,{children:"B"})," 和 ",(0,c.jsx)(n.code,{children:"A"}),"），",(0,c.jsx)(n.code,{children:"y"})," 轴代表我们可以添加或移除这些通道的颜色。",(0,c.jsx)(n.code,{children:"x"})," 轴上的最后一个值是乘法因子，目前我们暂时不必太担心它。"]}),"\n",(0,c.jsxs)(n.p,{children:["正如上图所示，这是一个未编辑的普通图像的矩阵。",(0,c.jsx)(n.code,{children:"R"})," 、",(0,c.jsx)(n.code,{children:"G"})," 、",(0,c.jsx)(n.code,{children:"B"})," 和 ",(0,c.jsx)(n.code,{children:"A"})," 值都在它们各自的通道中，所以红色像素保持红色，绿色像素保持绿色，以此类推。最终你会发现，上面这个滤镜，并不会改变图像的颜色："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/WNBbQMO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNBbQMO"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["为了给图像着色，我们可以在其他通道中引入不同量的红（",(0,c.jsx)(n.code,{children:"R"}),"）、绿（",(0,c.jsx)(n.code,{children:"G"}),"）或蓝（",(0,c.jsx)(n.code,{children:"B"}),"）。例如，我们可以通过从所有通道中移除除了一个之外的红、绿、蓝，将彩色图像转为灰阶："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feColorMatrix" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feColorMatrix \n                type="matrix" \n                values="1 0 0 0 0\n                        1 0 0 0 0\n                        1 0 0 0 0\n                        0 0 0 1 0" \n                 x="0%" \n                 y="0%" \n                 width="100%" \n                 height="100%" \n                 in="SourceGraphic" \n                 result="colormatrix"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:P,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这个时候你看到的图像呈灰色状态："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:X,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/VwOYeyp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwOYeyp"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果你不想花太多心思去了解这些数学计算的话，那么可以尝试使用 ",(0,c.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/LYamwrz",target:"_blank",rel:"noopener noreferrer",children:"@Ana Tudor 写的小工具"}),"，该工具可以使你快速获得想要的颜色滤镜效果："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["URL：",(0,c.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/LYamwrz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/thebabydino/full/LYamwrz"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["当然，你也可以尝试着手动调整 ",(0,c.jsx)(n.code,{children:"feColorMatrix"})," 的 ",(0,c.jsx)(n.code,{children:"values"})," 的值，看看你能得到什么颜色！"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"feColorMatrix"})," 的 ",(0,c.jsx)(n.code,{children:"type"})," 除了 ",(0,c.jsx)(n.code,{children:"matrix"})," 之外，还有 ",(0,c.jsx)(n.code,{children:"saturate"})," 、",(0,c.jsx)(n.code,{children:"hueRotate"})," 和 ",(0,c.jsx)(n.code,{children:"luminaceToAlpha"})," ，相比而言，它们要比 ",(0,c.jsx)(n.code,{children:"matrix"})," 简单地多。"]}),"\n",(0,c.jsxs)(n.p,{children:["例如 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"saturate"})," 。它会使用 ",(0,c.jsx)(n.code,{children:"0 ~ 1"})," 之间的值来控制图像中黑白的数量："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feColorMatrix" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feColorMatrix \n                type="saturate" \n                values=".5" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                in="SourceGraphic" \n                result="colormatrix"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:q,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/ExzaPJy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ExzaPJy"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["接下来是 ",(0,c.jsx)(n.code,{children:"hueRotate"}),"。该属性按照颜色的色相值来调整颜色，其值为 ",(0,c.jsx)(n.code,{children:"0 ~ 360"})," 度 ："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:T,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["例如，",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"hueRotate"})," 时，",(0,c.jsx)(n.code,{children:"values"})," 的值为 ",(0,c.jsx)(n.code,{children:"60"})," ，则表示图像中的每种颜色的色相旋转 ",(0,c.jsx)(n.code,{children:"60"})," 度："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feColorMatrix" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feColorMatrix \n                type="hueRotate" \n                values="60" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                in="SourceGraphic" \n                result="colormatrix" />\n        </filter>\n    </defs>\n</svg> \n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:R,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/ZENYWEG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZENYWEG"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["最后一种类型是 ",(0,c.jsx)(n.code,{children:"luminaceToAlpha"}),"。这基本上是通过移除 Alpha 通道，使图像变成半透明的负片效果。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feColorMatrix" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feColorMatrix \n                type="luminanceToAlpha" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                in="SourceGraphic" \n                result="colormatrix" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:O,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/qBGEZEj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBGEZEj"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"卷积矩阵feconvolvematrix",children:["卷积矩阵：feConvolveMatrix",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#卷积矩阵feconvolvematrix",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feConvolveMatrix>"})," 应用卷积矩阵将输入图像中的像素与相邻像素结合，产生结果图像。通过卷积矩阵滤镜可以实现各种图像操作，包括模糊、边缘检测、锐化、浮雕等效果。"]}),"\n",(0,c.jsxs)(n.p,{children:["卷积矩阵基于一个 ",(0,c.jsx)(n.code,{children:"n \xd7 m"})," 矩阵（卷积核），描述了如何将输入图像中的给定像素值与其相邻像素值结合以产生结果像素值。每个结果像素由将核矩阵应用于相应的源像素及其相邻像素确定。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:A,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"例如："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feConvolveMatrix" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feConvolveMatrix \n                order="3 3" \n                kernelMatrix="1 -4 1 \n                              1 0 -8 \n                              1 0 -4" \n                divisor="2" \n                bias="1.2" \n                targetX="1" \n                targetY="1" \n                edgeMode="duplicate" \n                preserveAlpha="true" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                in="SourceGraphic" \n                result="convolveMatrix"  />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:V,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRgxjG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRgxjG"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feConvolveMatrix>"})," 滤镜基元的主要属性有："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"order"})," ：指示 ",(0,c.jsx)(n.code,{children:"kernelMatrix"})," 中每个维度的单元格数。提供的值必须是大于零的整数。不是整数的值将被截断，即四舍五入为最接近零的整数值。第一个数字 ",(0,c.jsx)(n.code,{children:"<orderX>"})," 表示矩阵中的列数。第二个数字 ",(0,c.jsx)(n.code,{children:"<orderY>"})," 表示矩阵中的行数。如果未提供 ",(0,c.jsx)(n.code,{children:"<orderY>"}),"，则默认为 ",(0,c.jsx)(n.code,{children:"<orderX>"}),"。建议仅使用较小的值（例如 ",(0,c.jsx)(n.code,{children:"3"}),"）；较高的值可能导致非常高的 CPU 开销，并且通常不会产生能够证明对性能影响的结果。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"kernelMatrix"})," ：构成卷积核矩阵的数字列表。值由空格字符和 ",(0,c.jsx)(n.code,{children:"/"})," 或逗号分隔。列表中的条目数必须等于 ",(0,c.jsx)(n.code,{children:"<orderX>"})," 乘以 ",(0,c.jsx)(n.code,{children:"<orderY>"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"divisor"})," ：将 ",(0,c.jsx)(n.code,{children:"kernelMatrix"})," 应用于输入图像以产生数字后，将该数字除以除数以产生最终的目标颜色值。除数是所有矩阵值的总和，往往会对结果的整体颜色强度产生均衡效果。如果指定的除数为零，则将使用默认值。缺省值为 ",(0,c.jsx)(n.code,{children:"kernelMatrix"})," 中所有值的总和，但如果总和为零，则除数将设置为 ",(0,c.jsx)(n.code,{children:"1"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"bias"})," ：将 ",(0,c.jsx)(n.code,{children:"kernelMatrix"})," 应用于输入图像以产生数字并应用除数后，将偏差属性添加到每个分量。偏差的一种应用是当希望 ",(0,c.jsx)(n.code,{children:".5"})," 灰度值成为滤镜的零响应时。偏差属性调整了滤镜的范围。这允许表示否则将被限制为 ",(0,c.jsx)(n.code,{children:"0"})," 或 ",(0,c.jsx)(n.code,{children:"1"})," 的值。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"targetX"})," ：确定卷积矩阵在给定输入图像中的目标像素相对于 ",(0,c.jsx)(n.code,{children:"x"})," 的定位。矩阵的最左列是列号零。该值必须满足：",(0,c.jsx)(n.code,{children:"0 <= targetX < orderX"}),"。默认情况下，卷积矩阵在 ",(0,c.jsx)(n.code,{children:"x"})," 上居中于输入图像的每个像素上（即，",(0,c.jsx)(n.code,{children:"targetX = floor(orderX / 2)"}),"）。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"targetY"})," ：确定卷积矩阵在给定输入图像中的目标像素相对于 ",(0,c.jsx)(n.code,{children:"y"})," 的定位。矩阵的最顶行是行号零。该值必须满足：",(0,c.jsx)(n.code,{children:"0 <= targetY < orderY"}),"。默认情况下，卷积矩阵在 ",(0,c.jsx)(n.code,{children:"y"})," 上居中于输入图像的每个像素上（即，",(0,c.jsx)(n.code,{children:"targetY = floor(orderY / 2)"}),"）。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"edgeMode"})," ：可选的值有 ",(0,c.jsx)(n.code,{children:"duplicate"})," 、 ",(0,c.jsx)(n.code,{children:"wrap"})," 和 ",(0,c.jsx)(n.code,{children:"none"})," 。确定在必要时如何扩展输入图像以使得在卷积核定位在或接近输入图像边缘时可以应用矩阵操作。",(0,c.jsx)(n.code,{children:"duplicate"})," 表示根据需要沿着输入图像的每个边界扩展输入图像，通过复制输入图像给定边缘的颜色值来实现；",(0,c.jsx)(n.code,{children:"wrap"})," 表示通过从图像的相反边缘获取颜色值来扩展输入图像；",(0,c.jsx)(n.code,{children:"none"})," 表示使用 ",(0,c.jsx)(n.code,{children:"R"}),"、",(0,c.jsx)(n.code,{children:"G"}),"、",(0,c.jsx)(n.code,{children:"B"})," 和 ",(0,c.jsx)(n.code,{children:"A"})," 的零像素值来扩展输入图像。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"preserveAlpha"})," ：可选值为 ",(0,c.jsx)(n.code,{children:"false"})," 或 ",(0,c.jsx)(n.code,{children:"true"})," 。",(0,c.jsx)(n.code,{children:"false"})," 表示卷积将应用于所有通道，包括 Alpha 通道；",(0,c.jsx)(n.code,{children:"true"})," 表示卷积将仅应用于颜色通道。在这种情况下，滤镜将临时解除颜色组件值的预乘并应用核。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"组件转移fecomponenttransfer",children:["组件转移：feComponentTransfer",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件转移fecomponenttransfer",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feComponentTransfer>"})," 滤镜基元有点类似于 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," ，但每个颜色通道（RGBA）都是一个单独的函数，通过操作这些通道上的颜色值来实现诸如亮度调整、对比度变化、色彩平衡或阈值等效果。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feComponentTransfer" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feComponentTransfer x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" result="componentTransfer">\n                <feFuncR type="discrete" tableValues="0 0.5 0 1" />\n                <feFuncG type="discrete" tableValues="0 0.5 0 1" />\n                <feFuncB type="discrete" tableValues="0 0.5 0 1" />\n                <feFuncA type="discrete" tableValues="0 0.5 0 1" />\n            </feComponentTransfer>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:F,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/zYQxqjd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYQxqjd"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feComponentTransfer>"})," 滤镜基元将会按照以下方式执行数据的逐分量重新映射："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"R = feFuncR( R )\nG = feFuncG( G )\nB = feFuncB( B )\nA = feFuncA( A )\n"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"feFuncR"})," ：输入图形的红色分量的传输函数"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"feFuncG"})," ：输入图形的绿色分量的传输函数"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"feFuncB"})," ：输入图形的蓝色分量的传输函数"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"feFuncA"})," ：输入图形的 Alpha 分量的传输函数"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"feFuncR"}),"、",(0,c.jsx)(n.code,{children:"feFuncG"}),"、",(0,c.jsx)(n.code,{children:"feFuncB"}),"、",(0,c.jsx)(n.code,{children:"feFuncA"})," 元素的集合也称为传输函数元素。对于每个像素。它允许进行亮度调整、对比度调整、颜色平衡或阈值处理等操作。例如上面示例："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<feFuncR type="discrete" tableValues="0 0.5 0 1" />\n<feFuncG type="discrete" tableValues="0 0.5 0 1" />\n<feFuncB type="discrete" tableValues="0 0.5 0 1" />\n<feFuncA type="discrete" tableValues="0 0.5 0 1" />\n'})}),"\n",(0,c.jsxs)(n.p,{children:["例如，在红色通道中（",(0,c.jsx)(n.code,{children:"feFuncR"}),"），颜色强度范围是 ",(0,c.jsx)(n.code,{children:"0 ~ 1"})," 。我们选择了四个值，所以 ",(0,c.jsx)(n.code,{children:"1"})," 被除以 ",(0,c.jsx)(n.code,{children:"4"})," 。现在我们有四个相等的红色范围： ",(0,c.jsx)(n.code,{children:"0 ~ 0.25"})," （被分配为 ",(0,c.jsx)(n.code,{children:"0"}),"）、",(0,c.jsx)(n.code,{children:"0.25 ~ 0.5"})," (被分配为 ",(0,c.jsx)(n.code,{children:"0.5"}),") 、",(0,c.jsx)(n.code,{children:"0.5 ~ 0.75"})," （被分配为 ",(0,c.jsx)(n.code,{children:"0"}),"） 和 ",(0,c.jsx)(n.code,{children:"0.75 ~ 1"})," （被分配为 ",(0,c.jsx)(n.code,{children:"1"}),"）。"]}),"\n",(0,c.jsxs)(n.p,{children:["在 ",(0,c.jsx)(n.code,{children:"0 ~ 0.25"})," 的任何红色值都会被分配到表值中的第一个值，依此类推。对于多达 ",(0,c.jsx)(n.code,{children:"10"})," 个值，使用相同的原理。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，",(0,c.jsx)(n.code,{children:"feFuncR"}),"、",(0,c.jsx)(n.code,{children:"feFuncG"}),"、",(0,c.jsx)(n.code,{children:"feFuncB"}),"、",(0,c.jsx)(n.code,{children:"feFuncA"})," 元素的属性会随着 ",(0,c.jsx)(n.code,{children:"type"})," 属性值不同，也会有所差异："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<feFuncR type="table" tableValues="0 0.5 0 1"/>\n<feFuncG type="discrete" tableValues="0 0.5 0 1"/>\n<feFuncB type="linear" slope="1" intercept="0"/>\n<feFuncA type="gamma" amplitude="1" exponent="1" offset="0"/>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:D,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLWyMaQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLWyMaQ"})]}),"\n"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"tableValues"})," ：当 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"table"})," 或 ",(0,c.jsx)(n.code,{children:"discrete"})," 时，由空格和 ",(0,c.jsx)(n.code,{children:"/"})," 或逗号分隔的数值列表，定义了查找表。空列表将导致一个身份传输函数（等同于 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"identity"}),"）。如果未指定该属性，则效果等同于提供了一个空列表。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"slope"})," ：当 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"linear"})," 时，线性函数的斜率。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"intercept"})," ：当 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"linear"})," 时，线性函数的截距。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"amplitude"})," ：当 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"gamma"})," 时，伽马函数的振幅。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"exponent"})," ：当 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"gamma"})," 时，伽马函数的指数。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"offset"})," ：当 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"gamma"})," 时，伽马函数的偏移量。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["相比而言，",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"table"})," 时，它对图像的对比度会进行更细微的更改。例如，使用上面相同的 ",(0,c.jsx)(n.code,{children:"tableValues"})," 值，只将 ",(0,c.jsx)(n.code,{children:"type"})," 从 ",(0,c.jsx)(n.code,{children:"discrete"})," 调整为 ",(0,c.jsx)(n.code,{children:"table"})," ："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feComponentTransfer" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feComponentTransfer x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" result="componentTransfer">\n                <feFuncR type="table" tableValues="0 0.5 0 1" />\n                <feFuncG type="table" tableValues="0 0.5 0 1" />\n                <feFuncB type="table" tableValues="0 0.5 0 1" />\n                <feFuncA type="table" tableValues="0 0.5 0 1" />\n            </feComponentTransfer>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"效果如下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/wvbBJgy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvbBJgy"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["我们可以使用这个滤镜基元创建双色调效果。双色调意味着两种颜色，因此我们在 ",(0,c.jsx)(n.code,{children:"tableValues"})," 中为每个通道使用两个颜色值。"]}),"\n",(0,c.jsxs)(n.p,{children:["我们需要两种颜色，让我们选择 ",(0,c.jsx)(n.code,{children:"#A91C93"})," （相当于 ",(0,c.jsx)(n.code,{children:"rgb(169 28 147)"}),"）和 ",(0,c.jsx)(n.code,{children:"#8EE3FF"})," （相当于 ",(0,c.jsx)(n.code,{children:"rgb(255 142 227)"}),"）。接下来，我们需要将 ",(0,c.jsx)(n.code,{children:"R"}),"、",(0,c.jsx)(n.code,{children:"G"})," 和 ",(0,c.jsx)(n.code,{children:"B"})," 值除以 ",(0,c.jsx)(n.code,{children:"255"}),"，以获得 ",(0,c.jsx)(n.code,{children:"0 ~ 1"})," 范围内的值。这些值将放入 ",(0,c.jsx)(n.code,{children:"tableValues"})," 中。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feComponentTransfer" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feComponentTransfer x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" result="componentTransfer">\n                <feFuncR type="table" tableValues="0.662745098 1" />\n                <feFuncG type="table" tableValues="0.109803922 0.556862745" />\n                <feFuncB type="table" tableValues="0.576470588 0.890196078" />\n            </feComponentTransfer>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"然后我们得到了这个："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:L,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/QWRwppB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWRwppB"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"以此类推，可以创建更多颜色调的效果。"}),"\n",(0,c.jsxs)(n.p,{children:["还有第三种控制图像对比度的方法，那就是 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"gamma"}),"。此时，它带有另外三个属性：",(0,c.jsx)(n.code,{children:"exponent"}),"、",(0,c.jsx)(n.code,{children:"amplitude"})," 和 ",(0,c.jsx)(n.code,{children:"offset"}),"。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"amplitude"})," ：增加该指数会使图像中亮的区域变得更亮"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"exponent"})," ：增加该指数值为会使图像中暗的区域变得更暗"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"offset"})," ：它会为图像添加白色调，其值介于 ",(0,c.jsx)(n.code,{children:"0 ~ 1"})," 之间"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"增加指数会使图像中变暗的区域变得更加黑暗。而振幅则相反，会增亮图像中已经亮的区域。"}),"\n",(0,c.jsx)(n.p,{children:"偏移量会为图像添加白色色调，其值介于 0 和 1 之间。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feComponentTransfer" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feComponentTransfer x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" result="componentTransfer">\n                <feFuncR type="gamma" exponent="1.9" amplitude="1.9" offset="0" />\n                <feFuncG type="gamma" exponent="1.9" amplitude="1.9" offset="0" />\n                <feFuncB type="gamma" exponent="1.9" amplitude="1.9" offset="0" />\n            </feComponentTransfer>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:U,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/pomverq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/pomverq"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["除此之外，还可以将 ",(0,c.jsx)(n.code,{children:"type"})," 指定为 ",(0,c.jsx)(n.code,{children:"linear"})," ，通过调整斜率（",(0,c.jsx)(n.code,{children:"slope"}),"）和截距（",(0,c.jsx)(n.code,{children:"intercept"}),"）来改变图像的颜色和对比度，从而产生视觉上的效果变化。具体来说："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["斜率（",(0,c.jsx)(n.code,{children:"slope"}),"）：斜率决定了线性函数的变化速率。在颜色通道的线性组件转换中，斜率决定了颜色通道的增益或衰减速度。斜率越大，颜色通道的变化速率就越快，图像的对比度也会增加；斜率越小，颜色通道的变化速率就越慢，图像的对比度也会减少。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["截距（",(0,c.jsx)(n.code,{children:"intercept"}),"）：截距决定了线性函数在坐标轴上的截距位置。在颜色通道的线性组件转换中，截距决定了颜色通道的亮度偏移量。截距为正数时，图像的亮度会增加；截距为负数时，图像的亮度会减少。截距的绝对值越大，对图像亮度的影响越显著。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feComponentTransfer" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feComponentTransfer x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" result="componentTransfer">\n                <feFuncR type="linear" slope="1.2" intercept="0.2" />\n                <feFuncG type="linear" slope="1.2" intercept="0.4" />\n                <feFuncB type="linear" slope="0.6" intercept="-0.6" />\n            </feComponentTransfer>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/NWVPpwB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWVPpwB"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"偏移feoffset",children:["偏移：feOffset",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#偏移feoffset",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feOffset>"})," 滤镜基元相对比较简单，它通过指定的向量将输入图像相对于图像空间中的当前位置进行偏移。其主要属性："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"dx"})," ：沿 ",(0,c.jsx)(n.code,{children:"x"})," 轴偏移输入图形的量。如果未指定该属性，则效果等同于指定了值 ",(0,c.jsx)(n.code,{children:"0"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"dy"})," ：沿 ",(0,c.jsx)(n.code,{children:"y"})," 轴偏移输入图形的量。如果未指定该属性，则效果等同于指定了值 ",(0,c.jsx)(n.code,{children:"0"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feOffset" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feOffset \n                dx="20" \n                dy="20" \n                x="0%" \n                y="0%" \n                width="100%" \n                height="100%" \n                in="SourceGraphic" \n                result="offset"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/GRagWyM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRagWyM"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["可以使用 ",(0,c.jsx)(n.code,{children:"<feOffset>"})," 和 ",(0,c.jsx)(n.code,{children:"<feGaussianBlur>"})," 元素结合起来创建一个美观的滤镜效果，比如阴影效果。下面是一个示例代码："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feOffset" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            \x3c!-- 先进行偏移 --\x3e\n            <feOffset dx="5" dy="5" in="SourceAlpha" result="offsetResult" />\n    \n            \x3c!-- 对偏移后的图像进行高斯模糊 --\x3e\n            <feGaussianBlur in="offsetResult" stdDeviation="3" result="blurResult" />\n    \n            \x3c!-- 将模糊后的图像与原始图像叠加，产生阴影效果 --\x3e\n            <feMerge>\n                <feMergeNode in="blurResult" />\n                <feMergeNode in="SourceGraphic" />\n            </feMerge>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"在这个示例中："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feOffset>"})," 用于对输入图像进行偏移，创建阴影的偏移效果。在此示例中，",(0,c.jsx)(n.code,{children:'dx="5"'})," 和 ",(0,c.jsx)(n.code,{children:'dy="5"'})," 分别指定了阴影在水平和垂直方向的偏移量。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feGaussianBlur>"})," 用于对偏移后的图像进行高斯模糊处理，使阴影看起来更加柔和。",(0,c.jsx)(n.code,{children:"stdDeviation"})," 属性指定了模糊的程度。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["最后，使用 ",(0,c.jsx)(n.code,{children:"<feMerge>"})," 将模糊后的图像与原始图像叠加，产生最终的阴影效果。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:B,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/JjqoNEy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjqoNEy"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"合并femerge",children:["合并：feMerge",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#合并femerge",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feMerge>"})," 滤镜基元正如其名，在 SVG 中用于将多个滤镜效果合并到一起。换句话说，它可以将两个或多个元素层叠在一起。每一个层都是主要 ",(0,c.jsx)(n.code,{children:"<feMerge>"})," 基元内的一个 ",(0,c.jsx)(n.code,{children:"<feMergeNode>"})," 。进一步说，它使用覆盖运算符将输入图像层叠在彼此之上，其中 ",(0,c.jsx)(n.code,{children:"input1"})," （对应于第一个 ",(0,c.jsx)(n.code,{children:"<feMergeNode>"})," 子元素）位于底部，而最后指定的输入 ",(0,c.jsx)(n.code,{children:"inputN"})," （对应于最后一个 ",(0,c.jsx)(n.code,{children:"<feMergeNode>"})," 子元素）位于顶部。许多效果会产生一些中间层，以创建最终的输出图像。"]}),"\n",(0,c.jsxs)(n.p,{children:["也就是说，每个 ",(0,c.jsx)(n.code,{children:"<feMerge>"})," 元素可以具有任意数量的 ",(0,c.jsx)(n.code,{children:"<feMergeNode>"})," 子元素，每个子元素都有一个 ",(0,c.jsx)(n.code,{children:"in"})," 属性。"]}),"\n",(0,c.jsx)(n.p,{children:"我们来看一个实例。"}),"\n",(0,c.jsxs)(n.p,{children:["首先将 ",(0,c.jsx)(n.code,{children:"<feOffset>"})," 滤镜基元的 ",(0,c.jsx)(n.code,{children:"in"})," 属性指定为 ",(0,c.jsx)(n.code,{children:"SourceAlpha"})," ，它将创建一个与图像尺寸相同的黑色矩形，利用这一点可以为图像创建阴影效果："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<filter id="feMerge" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n    \x3c!-- 先进行偏移 --\x3e\n    <feOffset dx="15" dy="15" in="SourceAlpha" result="offsetResult" />\n</filter>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["接下来，将应用高斯模糊 ",(0,c.jsx)(n.code,{children:"<feGaussianBlur>"})," 和颜色矩阵 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 来改变阴影的模糊程度和不透明度："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<feOffset dx="15" dy="15" in="SourceAlpha" result="offsetResult" />\n<feGaussianBlur in="offsetResult" stdDeviation="10" result="blur" />\n<feColorMatrix type="matrix" in="blur" result="dropshadow" \n    values="1 0 0 0 0\n            1 1 0 0 0\n            1 0 1 0 0\n            0 0 0 0.5 0" />\n'})}),"\n",(0,c.jsx)(n.p,{children:"此时，我们有一个模糊的半透明图形："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:G,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["最后，使用 ",(0,c.jsx)(n.code,{children:"<feMerge>"})," 进行图层合并，第一个 ",(0,c.jsx)(n.code,{children:"<feMergeNode>"})," 将是顶层，其他的将按照这个顺序进行，最终图形会放在这个阴影之上。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feMerge" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feOffset dx="15" dy="15" in="SourceAlpha" result="offsetResult" />\n            <feGaussianBlur in="offsetResult" stdDeviation="10" result="blur" />\n            <feColorMatrix type="matrix" in="blur" result="dropshadow" \n                values="1 0 0 0 0\n                        1 1 0 0 0\n                        1 0 1 0 0\n                        0 0 0 0.5 0" />\n            <feMerge>\n                <feMergeNode in="dropshadow" />\n                <feMergeNode in="SourceGraphic" />\n            </feMerge>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"现在，通过组合四个 SVG 滤镜，我们得到了一个更好的阴影！"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:M,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/xxNbdrL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxNbdrL"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"填充feflood",children:["填充：feFlood",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#填充feflood",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feFlood>"})," 滤镜将创建一个矩形，填充了来自 ",(0,c.jsx)(n.code,{children:"flood-color"})," 和 ",(0,c.jsx)(n.code,{children:"flood-opacity"})," 属性指定的颜色和不透明度值。该矩形的大小与由 ",(0,c.jsx)(n.code,{children:"<feFlood>"})," 元素建立的滤镜基元子区域一样大。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"flood-color"})," ：指定要用于填充当前滤镜基元子区域的颜色。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"flood-opacity"})," ：定义了要在整个滤镜基元子区域中使用的不透明度值。如果 ",(0,c.jsx)(n.code,{children:"flood-color"})," 值包括 Alpha 通道，则 Alpha 通道会与 ",(0,c.jsx)(n.code,{children:"flood-opacity"})," 属性的计算值相乘。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feFlood" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            \x3c!-- 使用 feFlood 创建一个填充整个区域的矩形，并设置颜色和不透明度 --\x3e\n            <feFlood flood-color="#ff0000" flood-opacity="0.5" />\n          \n            \x3c!-- 将 feFlood 产生的矩形与源图像叠加 --\x3e\n            <feComposite in2="SourceGraphic" operator="lighter" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["在这个示例中，",(0,c.jsx)(n.code,{children:"<feFlood>"})," 元素创建了一个填充整个区域的矩形，并设置了颜色为红色 (",(0,c.jsx)(n.code,{children:"#ff0000"}),")，不透明度为 ",(0,c.jsx)(n.code,{children:"0.5"}),"。然后使用 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 将这个矩形与源图像叠加，产生了一个渐变效果。你可以根据需要调整 ",(0,c.jsx)(n.code,{children:"<feFlood>"})," 元素的属性来创建不同的颜色和不透明度的渐变效果，以实现不同的视觉效果。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLwmod",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLwmod"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"合成fecomposite",children:["合成：feComposite",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#合成fecomposite",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feComposite>"})," 滤镜基元会在图像空间中以像素为单位将两个输入图像的合成在一起。合成操作方式主要有："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["应用 Porter-Duff 合成操作之一：",(0,c.jsx)(n.code,{children:"over"}),"、",(0,c.jsx)(n.code,{children:"in"}),"、",(0,c.jsx)(n.code,{children:"atop"}),"、",(0,c.jsx)(n.code,{children:"out"}),"、",(0,c.jsx)(n.code,{children:"xor"}),"、",(0,c.jsx)(n.code,{children:"lighter"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["应用一个分量级的算术运算（",(0,c.jsx)(n.code,{children:"arithmetic"}),"），其结果会限制在 ",(0,c.jsx)(n.code,{children:"0 ~ 1"})," 范围内"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["算术运算对于将 ",(0,c.jsx)(n.code,{children:"<feDiffuseLighting>"})," 和 ",(0,c.jsx)(n.code,{children:"<feSpecularLighting>"})," 滤镜的输出与纹理数据进行组合非常有用。它也可用于实现溶解效果。"]}),"\n",(0,c.jsx)(n.p,{children:"其主要属性有："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"operator"})," ：指定合成方式，可选的值有 ",(0,c.jsx)(n.code,{children:"over"}),"、",(0,c.jsx)(n.code,{children:"in"}),"、",(0,c.jsx)(n.code,{children:"atop"}),"、",(0,c.jsx)(n.code,{children:"out"}),"、",(0,c.jsx)(n.code,{children:"xor"}),"、",(0,c.jsx)(n.code,{children:"lighter"})," 和 ",(0,c.jsx)(n.code,{children:"arithmetic"}),"，其默认值为 ",(0,c.jsx)(n.code,{children:"over"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"k1"}),"、",(0,c.jsx)(n.code,{children:"k2"}),"、",(0,c.jsx)(n.code,{children:"k3"}),"、",(0,c.jsx)(n.code,{children:"k4"})," 等属性只适用于 ",(0,c.jsx)(n.code,{children:"operator"})," 为 ",(0,c.jsx)(n.code,{children:"arithmetic"})," 的情况。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 可以创建吸引人的滤镜效果，比如结合 ",(0,c.jsx)(n.code,{children:"<feFlood>"})," 和 ",(0,c.jsx)(n.code,{children:"<feMorphology>"}),"，来创建文本镂空的效果："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feComposite" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feMorphology operator="dilate" radius="2" in="sourceGraphic" result="dilate" />\n            <feFlood flood-color="#301934" flood-opacity="0.5" result="flood" />\n            <feComposite operator="out" in="flood" in2="dilate" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"简单解释一下上面这段代码："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feMorphology>"})," 滤镜基元使用膨胀（",(0,c.jsx)(n.code,{children:"dilate"}),"）操作符扩展了输入图形（",(0,c.jsx)(n.code,{children:"sourceGraphic"}),"）的边界，半径为 ",(0,c.jsx)(n.code,{children:"2"})," 像素，结果保存在名为 ",(0,c.jsx)(n.code,{children:"dilate"})," 的图像中。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feFlood>"})," 滤镜基元创建了一个填充整个区域的矩形，填充颜色为 ",(0,c.jsx)(n.code,{children:"#301934"}),"，不透明度为 ",(0,c.jsx)(n.code,{children:"0.5"}),"，结果保存在名为 ",(0,c.jsx)(n.code,{children:"flood"})," 的图像中。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feComposite>"}),"滤镜基元执行了一个合成操作，将 ",(0,c.jsx)(n.code,{children:"<feFlood>"})," 产生的填充矩形 ",(0,c.jsx)(n.code,{children:"floo"}),'" 和 ',(0,c.jsx)(n.code,{children:"<feMorphology>"})," 产生的扩展图像 ",(0,c.jsx)(n.code,{children:"dilate"})," 进行组合。在这里使用了 ",(0,c.jsx)(n.code,{children:"out"})," 操作符，意味着结果图像将是 ",(0,c.jsx)(n.code,{children:"flood"})," 中不与 ",(0,c.jsx)(n.code,{children:"dilate"})," 重叠的部分。这样，最终的效果将是一个带有填充颜色的扩展边界。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"整个效果如下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRgWay",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRgWay"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["你可以根据需要调整 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 元素的属性，比如 ",(0,c.jsx)(n.code,{children:"operator"})," 属性，来实现不同的混合效果，从而创建吸引人的滤镜效果。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["我们可以使用 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 来合成两个图像，并且通过控制一个图像的透明度来模拟溶解的效果。以下是一个示例代码："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feComposite" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            \x3c!-- 将第一个图像作为输入 --\x3e\n            <feImage xlink:href="https://picsum.photos/id/124/1422/800" result="inputImage1" />\n            \x3c!-- 将第二个图像作为输入 --\x3e\n            <feImage xlink:href="https://picsum.photos/id/143/1422/800" result="inputImage2" />\n            \x3c!-- 将两个图像通过混合操作符 "arithmetic" 进行合成 --\x3e\n            <feComposite in="inputImage1" in2="inputImage2" operator="arithmetic" k1="0" k2="12" k3="-0.5" k4="-0.5" x="0%" y="0%" width="100%" height="100%" result="composite"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["在这个示例中，我们使用 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 元素将两个图像 ",(0,c.jsx)(n.code,{children:"https://picsum.photos/id/124/1422/800"})," 和 ",(0,c.jsx)(n.code,{children:"https://picsum.photos/id/143/1422/800"})," 进行合成。通过将 ",(0,c.jsx)(n.code,{children:"operator"})," 属性设置为 ",(0,c.jsx)(n.code,{children:"arithmetic"}),"，我们告诉浏览器要进行溶解效果的合成。通过调整 ",(0,c.jsx)(n.code,{children:"k1"})," 、 ",(0,c.jsx)(n.code,{children:"k2"})," 、",(0,c.jsx)(n.code,{children:"k3"})," 和 ",(0,c.jsx)(n.code,{children:"k4"})," 属性值，我们可以控制两个图像之间的溶解程度。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRgWra",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRgWra"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"图像feimage",children:["图像：feImage",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#图像feimage",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feImage>"})," 滤镜基元引用了一个与该滤镜元素外部的图形，它可以是一张外部的图像，也可以是另一个 SVG 片段的引用。该图形被加载或渲染成 RGBA 光栅，并成为滤镜基元的结果。它生成的图像类似于内置的图像源 ",(0,c.jsx)(n.code,{children:"SourceGraphic"}),"，唯一的区别在于图形来自外部源。"]}),"\n",(0,c.jsxs)(n.p,{children:["如果 ",(0,c.jsx)(n.code,{children:"xlink:href"})," 或 ",(0,c.jsx)(n.code,{children:"href"})," 引用了一个独立的图像资源，比如 JPEG、PNG 或 SVG 文件，那么图像资源将根据 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素的行为进行渲染；否则，引用的资源将根据 SVG 元素的行为进行渲染。无论哪种情况，当前用户坐标系取决于滤镜元素上的 ",(0,c.jsx)(n.code,{children:"primitiveUnits"})," 属性的值。",(0,c.jsx)(n.code,{children:"<feImage>"})," 元素上的 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性的处理与 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素的处理相同。"]}),"\n",(0,c.jsxs)(n.p,{children:["如果 ",(0,c.jsx)(n.code,{children:"xlink:href"})," 或 ",(0,c.jsx)(n.code,{children:"href"})," 引用的是一个空图像（宽度或高度为零）、下载失败、不存在或无法显示（例如，因为它不是支持的图像格式），则会用透明的黑色填充滤镜基元的子区域。"]}),"\n",(0,c.jsxs)(n.p,{children:["前面，我们演示了利用 ",(0,c.jsx)(n.code,{children:"<feFlooad>"})," 和 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 制作了一个镂空文本的滤镜效果。如果我们把 ",(0,c.jsx)(n.code,{children:"<feFood>"})," 滤镜基元替换成 ",(0,c.jsx)(n.code,{children:"<feImage>"})," 基元，就可以制作一个图片填充文本的效果，有点类似于 ",(0,c.jsx)(n.code,{children:"background-clip: text"})," 的效果："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feImage" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feImage href="https://picsum.photos/id/124/1422/800"  x="0" y="0"preserveAspectRatio="xMidYMid meet" crossOrigin="anonymous" result="image"/>\n            <feComposite operator="in" in="image" in2="SourceGraphic" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/JjqoJrw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjqoJrw"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["我们还可以使用 ",(0,c.jsx)(n.code,{children:"<feImage>"})," 滤镜基元与其他滤镜结合起来制作出一个吸引人的滤镜。以下是一个示例代码，演示了如何使用 ",(0,c.jsx)(n.code,{children:"<feImage>"})," 、",(0,c.jsx)(n.code,{children:"<feComposite>"})," 和 ",(0,c.jsx)(n.code,{children:"<feBlend>"})," 来创建一个吸引人的滤镜效果："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        \x3c!-- 定义一个引人注目的外部图像 --\x3e\n        <image id="externalImage" href="https://picsum.photos/id/110/1422/800" x="0" y="0" preserveAspectRatio="xMidYMid meet"  />\n        \n        <filter id="feImage" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            \x3c!-- 使用外部图像作为第一个输入 --\x3e\n            <feImage href="#externalImage" result="externalImage" x="0" y="0" preserveAspectRatio="xMidYMid meet" />\n            \n            \x3c!-- 使用内部图像作为第二输入 --\x3e\n            <feImage href="https://picsum.photos/id/144/1422/800" result="internalImage" x="0" y="0" preserveAspectRatio="xMidYMid meet" />\n            \n            \x3c!-- 将两个图像通过合成操作符 "arithmetic" 进行合成 --\x3e\n            <feComposite in="externalImage" in2="internalImage" operator="arithmetic" k1="0" k2="12" k3="-0.5" k4="-0.5" x="0%" y="0%" width="100%" height="100%" result="composite"/>\n            \n            \x3c!-- 使用 feBlend 来将合成图形与 SourceGraphic 做混合处理 --\x3e\n            <feBlend mode="exclusion" in="composite" in2="SourceGraphic"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["在这个示例中，我们首先引入了一张由 ",(0,c.jsx)(n.code,{children:"<image>"})," 元素引入的外部图像，并使用 ",(0,c.jsx)(n.code,{children:"id"})," 属性为其命名为 ",(0,c.jsx)(n.code,{children:"externalImage"})," 。然后，我们定义了一个滤镜效果，其中包含了两个 ",(0,c.jsx)(n.code,{children:"<feImage>"})," 元素，第一个引用 ",(0,c.jsx)(n.code,{children:"<Image>"})," 元素引入的图像，并将其结果命名为 ",(0,c.jsx)(n.code,{children:"externalImage"})," ，第二个 ",(0,c.jsx)(n.code,{children:"<feImage>"})," 直接引用外部一张图像，并将其结果命名为 ",(0,c.jsx)(n.code,{children:"internalImage"})," 。接着，使用 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 元素将 ",(0,c.jsx)(n.code,{children:"externalImage"})," 当作第一个输入源（",(0,c.jsx)(n.code,{children:"in"}),"）和 ",(0,c.jsx)(n.code,{children:"internalImage"})," 当作第二个输入源 （",(0,c.jsx)(n.code,{children:"in2"}),"）进行合成，其操作符 ",(0,c.jsx)(n.code,{children:"arithmetic"})," ，并反合成结果命名为 ",(0,c.jsx)(n.code,{children:"composite"}),"。最后，使用 ",(0,c.jsx)(n.code,{children:"<feBlend>"})," 元素将 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 元素合成结果 ",(0,c.jsx)(n.code,{children:"composite"})," 与当前图形（",(0,c.jsx)(n.code,{children:"SourceGraphic"}),"）进行混合模式处理，混合模式设置为 ",(0,c.jsx)(n.code,{children:"exclusion"})," 。最终效果如下："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/pomvwad",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/pomvwad"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"混合feblend",children:["混合：feBlend",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#混合feblend",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feBlend>"})," 滤镜基元类似于 CSS 的 ",(0,c.jsx)(n.code,{children:"mix-blend-mode"})," 和 ",(0,c.jsx)(n.code,{children:"background-blend-mode"})," ，它会将两个对象混合在一起，即它对两个输入图像（",(0,c.jsx)(n.code,{children:"in"})," 和 ",(0,c.jsx)(n.code,{children:"in2"}),"）进行逐像素的混合。"]}),"\n",(0,c.jsxs)(n.p,{children:["其混合模式有 ",(0,c.jsx)(n.code,{children:"mode"})," 属性决定，它的值包括 ",(0,c.jsx)(n.code,{children:"normal"})," 、",(0,c.jsx)(n.code,{children:"darken"})," 、",(0,c.jsx)(n.code,{children:"multiply"})," 、",(0,c.jsx)(n.code,{children:"color-burn"})," 、",(0,c.jsx)(n.code,{children:"lighten"})," 、",(0,c.jsx)(n.code,{children:"screen"})," 、",(0,c.jsx)(n.code,{children:"color-dodge"})," 、 ",(0,c.jsx)(n.code,{children:"overlay"})," 、",(0,c.jsx)(n.code,{children:"soft-light"})," 、",(0,c.jsx)(n.code,{children:"hard-light"})," 、 ",(0,c.jsx)(n.code,{children:"difference"})," 、",(0,c.jsx)(n.code,{children:"exclusion"})," 、",(0,c.jsx)(n.code,{children:"hue"})," 、",(0,c.jsx)(n.code,{children:"saturation"})," 、",(0,c.jsx)(n.code,{children:"color"})," 和 ",(0,c.jsx)(n.code,{children:"luminosity"})," 。其中默认值为 ",(0,c.jsx)(n.code,{children:"normal"})," 。"]}),"\n",(0,c.jsxs)(n.p,{children:["下面这个示例，首先使用 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 创建了一个噪音效果，并将其图像做了一个叠加的混合操作："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feBlend" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feTurbulence width="1000px" in="SourceGraphic" id="turbulence" type="turbulence" baseFrequency="0.01 0.02" numOctaves="3" result="noise" />\n            <feBlend in="SourceGraphic" in2="noise" mode="multiply" result="blend" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/dyEPRLP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dyEPRLP"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["你也可以尝试着调整 ",(0,c.jsx)(n.code,{children:"<feBlend>"})," 的 ",(0,c.jsx)(n.code,{children:"mode"})," 属性的值，查看不同混合模式下的效果："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/dyEPRLP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dyEPRLP"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"<animate>"})," 对 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 添加点动效，整个效果将又完全不一样："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feBlend" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feTurbulence width="1000px" in="SourceGraphic" id="turbulence" type="turbulence" baseFrequency="0.01 0.02" numOctaves="3" result="noise" />\n            <feBlend in="SourceGraphic" in2="noise" mode="multiply" result="blend" />\n            <animate href="#turbulence" attributeName="baseFrequency" dur="60s" keyTimes="0;0.5;1" values="0.01 0.02;0.02 0.04;0.01 0.02" repeatCount="indefinite" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLWyoLq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLWyoLq"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"漫反射光照fediffuselighting",children:["漫反射光照：feDiffuseLighting",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#漫反射光照fediffuselighting",children:"#"})]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"漫反射光是来自一个大的外部光源的光线。"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feDiffuseLighting>"})," 滤镜基元使用图像的Alpha 通道作为凹凸贴图（一种向图像添加纹理的图形方法）来照亮图像。这个滤镜基元产生的光图可以使用算术 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 合成方法的乘法项与纹理图像相结合。可以通过在应用于纹理图像之前将多个这些光图相加来模拟多个光源。"]}),"\n",(0,c.jsxs)(n.p,{children:["光源由 ",(0,c.jsx)(n.code,{children:"<feDistantLight>"}),"、",(0,c.jsx)(n.code,{children:"<fePointLight>"})," 或 ",(0,c.jsx)(n.code,{children:"<feSpotLight>"})," 中的一个子元素定义。光颜色由属性 ",(0,c.jsx)(n.code,{children:"lighting-color"})," 指定。"]}),"\n",(0,c.jsx)(n.p,{children:"该滤镜基元的常见属性包括："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"surfaceScale"})," ：设置表面的高度。如果未指定该属性，则效果相当于指定了值 ",(0,c.jsx)(n.code,{children:"1"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"diffuseConstant"})," ：冯氏光照模型中的 ",(0,c.jsx)(n.code,{children:"kd"}),"。这可以是任何非负数。如果未指定该属性，则效果相当于指定了值 ",(0,c.jsx)(n.code,{children:"1"}),"。较低的值会使光变暗。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"flood-color"})," ：光的颜色。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，它的子元素 ",(0,c.jsx)(n.code,{children:"<feDistantLight>"}),"、",(0,c.jsx)(n.code,{children:"<fePointLight>"})," 或 ",(0,c.jsx)(n.code,{children:"<feSpotLight>"})," 具有自己不同的属性。"]}),"\n",(0,c.jsxs)(n.p,{children:["首先来看 ",(0,c.jsx)(n.code,{children:"<feDistantLight>"})," 光源，它定义了一个来自远处的光源。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feDiffuseLighting" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n          <feDiffuseLighting in="SourceGraphic" lighting-color="#00c2cb" diffuseConstant="2">\n               <feDistantLight azimuth="100" elevation="15" />\n          </feDiffuseLighting>\n          <feComposite in="SourceGraphic" operator="arithmetic" k1="1" k2="0" k3="0" k4="0" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中应用了两个滤镜基元：",(0,c.jsx)(n.code,{children:"<feDiffuseLighting>"})," 和 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," ："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feDiffuseLighting>"})," 滤镜基元用于模拟光照效果，根据光源的位置和方向对图像进行光照。在这个代码片段中，",(0,c.jsx)(n.code,{children:"<feDiffuseLighting>"})," 的输入是 ",(0,c.jsx)(n.code,{children:"SourceGraphic"}),"（即原始图形），光照颜色（",(0,c.jsx)(n.code,{children:"lighting-color"}),"）为 ",(0,c.jsx)(n.code,{children:"#00c2cb"}),"（一种蓝绿色），漫反射常数（",(0,c.jsx)(n.code,{children:"diffuseConstant"}),"）为 ",(0,c.jsx)(n.code,{children:"2"}),"。光源是一个 ",(0,c.jsx)(n.code,{children:"<feDistantLight>"})," ，它的方位角（",(0,c.jsx)(n.code,{children:"azimuth"}),"）为 ",(0,c.jsx)(n.code,{children:"100"})," 度，俯仰角（",(0,c.jsx)(n.code,{children:"elevation"}),"）为 ",(0,c.jsx)(n.code,{children:"15"})," 度。这个 ",(0,c.jsx)(n.code,{children:"<feDiffuseLighting>"})," 效果创建了一个仿佛有光源照射的图像。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feComposite>"})," 滤镜基元用于将两个图像合成为一个。在这个代码片段中，它的输入是 ",(0,c.jsx)(n.code,{children:"SourceGraphic"}),"（原始图形）和上一个滤镜基元产生的光照效果。操作符（",(0,c.jsx)(n.code,{children:"operator"}),"）是 ",(0,c.jsx)(n.code,{children:"arithmetic"}),"，通过参数 ",(0,c.jsx)(n.code,{children:"k1"}),"、",(0,c.jsx)(n.code,{children:"k2"}),"、",(0,c.jsx)(n.code,{children:"k3"})," 和 ",(0,c.jsx)(n.code,{children:"k4"})," 控制算术运算。这个 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 效果主要用于创建一个阴影效果，其中原始图形与光照效果进行合成，但没有发生任何颜色变化。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"整体来说，这段代码创建了一个具有光照效果的图形，并在原始图形上添加了一层阴影效果，使得图形看起来更加立体和生动。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/PovwKGK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PovwKGK"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["上面示例，在 ",(0,c.jsx)(n.code,{children:"<feDistantLight>"})," 元素上应用了 ",(0,c.jsx)(n.code,{children:"azimuth"})," 和 ",(0,c.jsx)(n.code,{children:"elevation"})," 两个属性："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"azimuth"})," ：指定光源在 ",(0,c.jsx)(n.code,{children:"XY"})," 平面上的方向角度（顺时针），以度为单位，相对于 ",(0,c.jsx)(n.code,{children:"x"})," 轴。即指定光源方位角的度数"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"elevation"})," ：指定光源从 ",(0,c.jsx)(n.code,{children:"XY"})," 平面指向 ",(0,c.jsx)(n.code,{children:"z"})," 轴的方向角度，以度为单位。即指定光源俯仰角的度数。注意，正 ",(0,c.jsx)(n.code,{children:"z"})," 轴指向观察者"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["接下来看 ",(0,c.jsx)(n.code,{children:"<fePointLight>"})," 光源。它可以用于模拟一个点光源。点光源是一种光源，其光线从一个点向外辐射，沿着所有方向发射光线。在 SVG 中，",(0,c.jsx)(n.code,{children:"<fePointLight>"})," 可以用来创建一个在三维空间中具有位置的光源，从而产生更加真实的光照效果。"]}),"\n",(0,c.jsxs)(n.p,{children:["例如，我们沿着 ",(0,c.jsx)(n.code,{children:"x"})," 、 ",(0,c.jsx)(n.code,{children:"y"})," 和 ",(0,c.jsx)(n.code,{children:"z"})," 轴移动光线："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feDiffuseLighting" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feDiffuseLighting in="SourceGraphic" lighting-color="#00c2cb" diffuseConstant="2">\n                <fePointLight x="380" y="100" z="40"/>\n            </feDiffuseLighting>\n            <feComposite in="SourceGraphic" operator="arithmetic" k1="1" k2="0" k3="0" k4="0" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中的 ",(0,c.jsx)(n.code,{children:"<fePointLight>"})," 元素分别指定了光源的 ",(0,c.jsx)(n.code,{children:"x"})," 坐标为 ",(0,c.jsx)(n.code,{children:"380"})," 、",(0,c.jsx)(n.code,{children:"y"})," 轴坐标为 ",(0,c.jsx)(n.code,{children:"100"})," 和 ",(0,c.jsx)(n.code,{children:"z"})," 轴坐标为 ",(0,c.jsx)(n.code,{children:"40"})," ，通过这三个坐标，指定光源位置在三维空间中模拟光照，从而产生一种具有立体感的光照效果："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/rNgazmg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNgazmg"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<fePointLight>"})," 元素的主要属性包括："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"x"})," ：指定光源在滤镜元素上 ",(0,c.jsx)(n.code,{children:"x"})," 轴的位置，默认值为 ",(0,c.jsx)(n.code,{children:"0"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"y"})," ：指定光源在滤镜元素上 ",(0,c.jsx)(n.code,{children:"y"})," 轴的位置，默认值为 ",(0,c.jsx)(n.code,{children:"0"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"z"})," ：指定光源在滤镜元素上 ",(0,c.jsx)(n.code,{children:"z"})," 轴的位置，默认值为 ",(0,c.jsx)(n.code,{children:"0"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["最后一个光源是 ",(0,c.jsx)(n.code,{children:"<feSpotLight>"}),"。它用于模拟聚光灯效果。它创建了一个具有聚焦特性的光源，可以在指定位置上模拟聚光灯的光照效果。其主要属性包括："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"x"}),"：光源在过滤器元素上 ",(0,c.jsx)(n.code,{children:"x"})," 轴的位置。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"y"}),"：光源在过滤器元素上 ",(0,c.jsx)(n.code,{children:"y"})," 轴的位置。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"z"}),"：光源在过滤器元素上 ",(0,c.jsx)(n.code,{children:"z"})," 轴的位置。这决定了光源的远近。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"pointsAtX"}),"：光源所指向的位置的 ",(0,c.jsx)(n.code,{children:"x"})," 坐标。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"pointsAtY"}),"：光源所指向的位置的 ",(0,c.jsx)(n.code,{children:"y"})," 坐标。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"pointsAtZ"}),"：光源所指向的位置的 ",(0,c.jsx)(n.code,{children:"z"})," 坐标。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"specularExponent"}),"：指定了光的聚焦强度，控制光照的锐度和强度。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"limitingConeAngle"}),"：限制光投射的锥形角度，超出这个角度范围的地方将不受光照影响。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"<feSpotLight>"}),"，可以实现更精细的光照效果，如在某一区域内产生明亮的光斑，而在其他区域则较暗。通过调整不同的参数，可以实现不同的聚光灯效果，为 SVG 图形增添立体感和视觉效果。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feDiffuseLighting" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feDiffuseLighting in="SourceGraphic" lighting-color="#00c2cb" diffuseConstant="2">\n                <feSpotLight \n                    x="680" \n                    y="20" \n                    z="30" \n                    limitingConeAngle="60" \n                    pointsAtX="100" \n                    pointsAtY="100"\n                    pointsAtZ="0" />\n            </feDiffuseLighting>\n            <feComposite in="SourceGraphic" operator="arithmetic" k1="1" k2="0" k3="0" k4="0" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRgeqz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRgeqz"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"镜面光照fespecularlighting",children:["镜面光照：feSpecularLighting",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#镜面光照fespecularlighting",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feSpecularLighting>"})," 滤镜基元用于通过将光照效果添加到源图形上来创建高光效果。它使用源图形的 Alpha 通道作为凸起图，并根据光的颜色、光源位置以及输入凸起图的表面几何形状计算光照效果。简单地说，它用于模拟三维物体表面在光源作用下的镜面反射效果，这种效果通常会使图像看起来更加立体和真实。通过定义光源的位置、反射强度和其他属性，可以控制好光线如何与图形表面交互，从而创造出丰富的视觉效果。例如，创建表面上的光泽、高光或镜面反射等效果。"]}),"\n",(0,c.jsxs)(n.p,{children:["以下是 ",(0,c.jsx)(n.code,{children:"<feSpecularLighting>"})," 的一些关键属性："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"surfaceScale"}),"：此属性控制表面的高度。它影响了光的高光效果的强度。较大的值会导致更明显的高光效果，而较小的值会产生更柔和的效果。默认值为 ",(0,c.jsx)(n.code,{children:"1"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"specularConstant"}),"：这是高光项的常数，类似于 Phong 光照模型中的 ",(0,c.jsx)(n.code,{children:"kd"}),"（漫反射系数）。它影响了高光的整体亮度。默认值为 ",(0,c.jsx)(n.code,{children:"1"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"specularExponent"}),"：这是高光项的指数，用于控制高光的焦散程度。指数值越高，高光越集中，看起来越尖锐。默认值为 ",(0,c.jsx)(n.code,{children:"1"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["此外，",(0,c.jsx)(n.code,{children:"<feSpecularLighting>"})," 滤镜基元使用与 ",(0,c.jsx)(n.code,{children:"<feDiffuseLighting>"})," 滤镜基元相同的光源："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feSpecularLighting" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feSpecularLighting specularExponent="5" lighting-color="#00c2cb" surfaceScale="1" in="SourceGraphic" specularConstant="1.5">\n                <fePointLight x="570" y="100" z="200" />\n            </feSpecularLighting>\n            <feComposite in="SourceGraphic" operator="arithmetic" k1="1" k2="0" k3="0" k4="0" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/rNgazPa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNgazPa"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["总的来说，",(0,c.jsx)(n.code,{children:"<feSpecularLighting>"})," 通过模拟光照效果，以及源图形的表面形状和光源的位置，来创建出具有高光效果的图像。在这个示例中，我们使用的是 ",(0,c.jsx)(n.code,{children:"<fePointLight>"})," 定义的光源，要是你感兴趣的话，可以尝试着调整光源类型，获得不同的效果！"]}),"\n",(0,c.jsxs)(n.h3,{id:"平铺fetile",children:["平铺：feTile",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#平铺fetile",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feTile>"})," 滤镜基元使输入图像以重复平铺模式填充目标矩形，目标矩形的大小与 ",(0,c.jsx)(n.code,{children:"<feTile>"})," 元素建立的滤镜基元区域一样大。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"x"})," 限制给定滤镜基元的计算和渲染的子区域的最小 ",(0,c.jsx)(n.code,{children:"x"})," 坐标。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"y"})," 限制给定滤镜基元的计算和渲染的子区域的最小 ",(0,c.jsx)(n.code,{children:"y"})," 坐标。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"width"})," 限制给定滤镜基元的计算和渲染的子区域的宽度。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"height"})," 限制给定滤镜基元的计算和渲染的子区域的高度。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"例如，下面这个示例，在元素上创建一个重复的图案，就像地板上的瓷砖一样："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="feTile" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feTile in="SourceGraphic" x="50" y="50" width="50" height="50" />\n            <feTile />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/WNBbZxB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNBbZxB"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"svg-滤镜综合案例",children:["SVG 滤镜综合案例",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-滤镜综合案例",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["上一节，我们花了很长的篇幅向大家介绍了 SVG 滤镜中的所有滤镜基元。正如我们所了解的，滤镜基元是 SVG 构建滤镜效果的最基础单元（或模块）。换句话说，滤镜要生效，那么至少需要一个滤镜基元。即 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素中至少要包含一个滤镜基元。"]}),"\n",(0,c.jsxs)(n.p,{children:["需要知道的是，在同一个 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素中可以同时应用多个滤镜基元，通过组合多个不同的滤镜基元，可以构造出更为出色的滤镜效果。接下来，以一个简单的示例，一步一步向大家如何通过多个滤镜基元构造出更出色的效果。"]}),"\n",(0,c.jsx)(n.p,{children:"例如："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<h2 class="filtered">svg awesome! I Love SVG!</h2>\n\n<svg width="0" height="0">\n    <defs>\n        <filter id="filter" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            \x3c!-- 没有任何滤镜基元 --\x3e\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".filtered {\n    filter: url(#filter);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["这是最初始阶段，虽然使用 ",(0,c.jsx)(n.code,{children:"<filter>"})," 创建了一个 ",(0,c.jsx)(n.code,{children:"id"})," 名为 ",(0,c.jsx)(n.code,{children:"filter"})," 的滤镜，并且在 CSS 中通过 ",(0,c.jsx)(n.code,{children:"filter"})," 属性的 ",(0,c.jsx)(n.code,{children:"url()"})," 函数引用了该滤镜，但 ",(0,c.jsx)(n.code,{children:".filtered"})," 无事并没有任何滤镜效果。这是因为，在 ",(0,c.jsx)(n.code,{children:"<filter>"})," 中没有任何滤镜基元，也就是说，没有创建任何滤镜效果："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["接下来，我们一步一步往 ",(0,c.jsx)(n.code,{children:"<filter>"})," 元素中添加具体的滤镜基元！"]}),"\n",(0,c.jsxs)(n.p,{children:["首先，我们使用形态学滤镜基元 ",(0,c.jsx)(n.code,{children:"<feMorphology>"})," ，将其 ",(0,c.jsx)(n.code,{children:"operator"})," 设置为 ",(0,c.jsx)(n.code,{children:"dilate"})," 使文本变粗："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="filter" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="dilate" />\n        </filter>\n    </defs>\n</svg>         \n'})}),"\n",(0,c.jsxs)(n.p,{children:["我们将输入源 ",(0,c.jsx)(n.code,{children:"in"})," 设置为 ",(0,c.jsx)(n.code,{children:"SourceAlpha"})," ， 将其视为填充为黑色的源图形。这个时候，你看到的效果如下："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["接着，继续往 ",(0,c.jsx)(n.code,{children:"<filter>"})," 中添加一个 ",(0,c.jsx)(n.code,{children:"<feConvolveMatrix>"})," 滤镜基元，创建一个 ",(0,c.jsx)(n.code,{children:"45"})," 度，深度为 ",(0,c.jsx)(n.code,{children:"3px"})," 的凸出效果。注意，将上一个滤镜的结果 ",(0,c.jsx)(n.code,{children:"dilate"})," 作为这个滤镜基础的第一输入源，并将该滤镜的结果命名为 ",(0,c.jsx)(n.code,{children:"convolveMatrix"})," ："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="filter" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n          <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="dilate" />\n          <feConvolveMatrix order="3,3" in="dilate" result="convolveMatrix"\n              kernelMatrix="1 0 0 \n                            0 1 0\n                            0 0 1"  />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"继续往里面添加滤镜基元："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="filter" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="dilate" />\n            <feConvolveMatrix order="3,3" in="dilate" result="convolveMatrix" \n                kernelMatrix="1 0 0 \n                              0 1 0\n                              0 0 1"  />\n            <feOffset dx="4" dy="4" in="convolveMatrix" result="offset"/>\n            <feComposite operator="out" in="convolveMatrix" in2="offset" result="composite" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"<feOffset>"})," 做了个位移处理，同时使用 ",(0,c.jsx)(n.code,{children:"<feComposite>"})," 滤镜基元，将 ",(0,c.jsx)(n.code,{children:"convolveMatrix"})," 和 ",(0,c.jsx)(n.code,{children:"offset"})," 进行合成处理。并且将合成的结果命名为 ",(0,c.jsx)(n.code,{children:"composite"})," ："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["发挥你的才智，可以继续往 ",(0,c.jsx)(n.code,{children:"<filter>"})," 中添加任何你想要的滤镜基元："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="0" height="0">\n    <defs>\n        <filter id="filter" x="0%" y="0%" width="100%" height="100%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse">\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="dilate" />\n            <feConvolveMatrix order="3,3" kernelMatrix="1 0 0  0 1 0 0 0 1" in="dilate" result="convolveMatrix" />\n            <feOffset dx="4" dy="4" in="convolveMatrix" result="offset" />\n            <feComposite operator="out" in="convolveMatrix" in2="offset" result="composite" />\n            <feFlood flood-color="#deface" result="flood" />\n            <feComposite in="flood" in2="composite" operator="in" result="composite2" />\n            <feMerge result="merge">\n                <feMergeNode in="composite2" />\n                <feMergeNode in="SourceGraphic" />\n            </feMerge>\n            <feTurbulence result="turbulence" baseFrequency="0.08" numOctaves="1.5" seed="0.21" />\n            <feGaussianBlur stdDeviation="5" in="merge" result="blur" />\n            <feSpecularLighting surfaceScale="160" specularConstant="180" specularExponent="5" lighting-color="#aec" in="turbulence" result="specular">\n                <fePointLight x="140" y="-130" z="100" />\n            </feSpecularLighting>\n            <feComposite operator="in" in="specular" in2="turbulence" result="composite3" />\n            <feMerge>\n                <feMergeNode in="SourceGraphic" />\n                <feMergeNode in="merge" />\n                <feMergeNode in="specular" />\n                <feMergeNode in="SourceAlpha" />\n                <feMergeNode in="composite3" />\n            </feMerge>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"上面代码，最终呈现的效果如下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRgGeE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRgGeE"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"小结",children:["小结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"现在我们已经介绍了 SVG 滤镜的基础知识以及如何创建和应用滤镜，这仅仅是 SVG 滤镜的最基础部分。在小册后续的课程中，将还会与大家更深入的探讨 SVG 滤镜的一些高级技巧。"})]})}function eo(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(eh,{...e})}):eh(e)}let et=eo;eo.__RSPRESS_PAGE_META={},eo.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F23-%20%E4%B8%AD%E7%BA%A7%E7%AF%87%EF%BC%9A%E5%88%9D%E6%8E%A2%20SVG%20%E6%BB%A4%E9%95%9C.md"]={toc:[{text:"CSS 滤镜",id:"css-滤镜",depth:2},{text:"SVG 滤镜",id:"svg-滤镜",depth:2},{text:"SVG 的 `<filter>` 元素",id:"svg-的-filter-元素",depth:2},{text:"SVG 滤镜基元",id:"svg-滤镜基元",depth:2},{text:"高斯模糊：feGaussianBlur",id:"高斯模糊fegaussianblur",depth:3},{text:"投影阴影：feDropShadow",id:"投影阴影fedropshadow",depth:3},{text:"形态学：feMorphology",id:"形态学femorphology",depth:3},{text:"**湍流：** feTurbulence",id:"湍流-feturbulence",depth:3},{text:"位移映射：feDisplacementMap",id:"位移映射fedisplacementmap",depth:3},{text:"颜色矩阵：feColorMatrix",id:"颜色矩阵fecolormatrix",depth:3},{text:"卷积矩阵：feConvolveMatrix",id:"卷积矩阵feconvolvematrix",depth:3},{text:"组件转移：feComponentTransfer",id:"组件转移fecomponenttransfer",depth:3},{text:"偏移：feOffset",id:"偏移feoffset",depth:3},{text:"合并：feMerge",id:"合并femerge",depth:3},{text:"填充：feFlood",id:"填充feflood",depth:3},{text:"合成：feComposite",id:"合成fecomposite",depth:3},{text:"图像：feImage",id:"图像feimage",depth:3},{text:"混合：feBlend",id:"混合feblend",depth:3},{text:"漫反射光照：feDiffuseLighting",id:"漫反射光照fediffuselighting",depth:3},{text:"镜面光照：feSpecularLighting",id:"镜面光照fespecularlighting",depth:3},{text:"平铺：feTile",id:"平铺fetile",depth:3},{text:"SVG 滤镜综合案例",id:"svg-滤镜综合案例",depth:2},{text:"小结",id:"小结",depth:2}],title:"23- 中级篇：初探 SVG 滤镜",headingTitle:"23- 中级篇：初探 SVG 滤镜",frontmatter:{}}}}]);