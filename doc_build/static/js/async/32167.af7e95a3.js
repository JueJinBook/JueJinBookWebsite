"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["32167"],{630573:function(e,n,c){c.r(n),c.d(n,{default:()=>eA});var d=c(552676),s=c(740453);let r=c.p+"static/image/ac2f8723a4ea113e2b6752a198362c39.dfc17203.gif",l=c.p+"static/image/01268e35c76fadc1d45434150a143db9.9a57c01c.gif",i=c.p+"static/image/e2da6bcbf8619cf9647760cda1707e68.cb3b3802.gif",h=c.p+"static/image/7ece68f8fbf5d7171e7c4e2f75ed0a3f.f7a56faf.gif",x=c.p+"static/image/fc656065087b27c5838a777058265eb5.5c9b9563.webp",j=c.p+"static/image/6f13d7b86e3b4e85c2b5e806f58dccf2.c364b1be.webp",o=c.p+"static/image/e320508ab06ee5c3b19238815fe7d51f.91fbc5f6.gif",a=c.p+"static/image/005fa005502706d56e0e2c52fa5298de.4be19623.gif",t=c.p+"static/image/dea6132498b9c4bba483d3eb2fddf5e3.f475131f.webp",p=c.p+"static/image/f3f006cbd329debfb5a88e7c5d0d4300.3d075b24.webp",f=c.p+"static/image/588e572f852dcb162dbd87c654507cfe.674ff409.webp",g=c.p+"static/image/64ed990313ce410a61edbc253f796943.f2613e01.webp",b=c.p+"static/image/50573ae154db7adae0c1e7f973049eca.aa020378.gif",m=c.p+"static/image/8c55443fe1bdd2a25138d5e223656198.1739f510.gif",u=c.p+"static/image/5d39c8f38b41aaea3650275b6e57af25.ee7a61f6.webp",y=c.p+"static/image/742f611f6ada552f0da01785d56df8b6.d5abd171.gif",M=c.p+"static/image/a5f3e6f3f5062f8ab0494c076bdbb555.3d54cc99.webp",v=c.p+"static/image/9271ce588ee5d74c81eb636415bab622.9e937ca3.gif",k=c.p+"static/image/e8c239cc85a733d3f876b2611355e4c6.4814cca1.gif",S=c.p+"static/image/419cbdfedd063b4c50224bb4b59b876d.1aa7f5ab.webp",P=c.p+"static/image/7dde1c7c4136e20135e32b57c51653b3.5cd16701.webp",w=c.p+"static/image/3fa30aabb2818c0f1372e1563750d9f9.d4281ddc.webp",L=c.p+"static/image/2e33d396b2830dbae257ff6da4d437f0.1fb928eb.gif",V=c.p+"static/image/b35ac5b20e83059260d8a664ffb5772f.744398a5.webp",G=c.p+"static/image/8e3c5098378c2269ec562c6ffc60fe09.695ef08a.gif",N=c.p+"static/image/54428c52758dcc534d1b40b2dce7678a.143e412e.webp",q=c.p+"static/image/87a194cc83e4c8646b7be402909afdd0.d6cf9493.gif",C=c.p+"static/image/c52cba712db2441a2a6f63a547dcdfa3.7e597620.gif",A=c.p+"static/image/63435e464a69b3962f141db14d5bfd21.37cd5641.webp",B=c.p+"static/image/8bb1a85219b030522aed7b3314fc3745.b4482c5f.webp",z=c.p+"static/image/76f578aa73935199cca58d9080f3e025.ae7df2ef.gif",X=c.p+"static/image/3c6d5a7634d5e67c5bcfaf4f801db02d.3f13a7a1.webp",_=c.p+"static/image/c9a2a7712b1da48ef2858caf619510f5.5dceac83.webp",Z=c.p+"static/image/1b6f79068001b0788faab244bd8a19c4.2c9c58af.webp",E=c.p+"static/image/f7130519dfdbd1f832c339db40e75682.1225c3ea.gif",Q=c.p+"static/image/fac2b81f7becfa9aad0788c3ff3f540c.62c78ac1.webp",D=c.p+"static/image/ee308d68b1b593ec11765f2c487c5d79.e5e3265a.webp",Y=c.p+"static/image/461b1a4c326c3c0ba325ae54e8bb15b8.f78e6966.webp",T=c.p+"static/image/d271d5f8cdf1fc7f92487de6e1e74860.bbce6203.webp",W=c.p+"static/image/872a4d2235157aa90fcea4e2aa127dee.8547c5dd.webp",H=c.p+"static/image/f341f85c5d607ef0ebb92842285ef84e.21e9a396.webp",R=c.p+"static/image/4b0f0d77f6e0f2085b6ab637c28d37e8.84b9bc07.gif",J=c.p+"static/image/bd20852815dcc3bf9e0e934419558bd4.23703efd.webp",O=c.p+"static/image/03440932620ffb1277029fd8a1143c19.6624cb67.webp",F=c.p+"static/image/d50ae1f13bafb46cfa4fc248ab27ef2f.de4d2aec.gif",K=c.p+"static/image/730a13ec2c28b4fc52885636a64fa9cb.4ef6d228.webp",U=c.p+"static/image/82520adb93c4623fda63c824f930e5b3.e587b63f.gif",I=c.p+"static/image/c3df81d427bf1fccc48731d74a41ae72.a3d511ea.gif",$=c.p+"static/image/2994612dc137134aa4506b5b619a80db.ee567e4d.gif",ee=c.p+"static/image/473969280632e68daf2ecb218d49779c.c118861d.webp",en=c.p+"static/image/cd1beeb339fc89c4c4a4c14abe1fa84e.13f3fa37.gif",ec=c.p+"static/image/fa64f7bd9c9b72d7e1c7f860f4053ab7.ee3d3475.webp",ed=c.p+"static/image/d8645f7b0732bc249bf59aba9517c1a5.d8ea1c15.webp",es=c.p+"static/image/03bea6326324054119015826553f05de.0e5ae1f3.gif",er=c.p+"static/image/b08bd1f4f362ed6e49257efaf4c88ecf.ea00174d.gif",el=c.p+"static/image/31a4bc02742acf9f34766586b27e6a08.b240f6da.webp",ei=c.p+"static/image/a6164d0d8ebebfa644afde158436dc2d.f22109fb.webp",eh=c.p+"static/image/4008b1ec9a241bfce92550b0485ae38c.48cda54a.webp",ex=c.p+"static/image/bb5972d1bec2d4de55351c67ffd8c9dc.0a184bb5.webp",ej=c.p+"static/image/2bc8b67d9f889a9d868abc64cda0fb5b.ff220c36.gif",eo=c.p+"static/image/dde6332a8b720f4bb4ead91524cf27e2.5b3d7479.webp",ea=c.p+"static/image/41b0ee2ba93a97e6ffee1ddaf6e3b701.646674df.webp",et=c.p+"static/image/74b6b2535ca276de9220170e4876881a.6dcba8c7.webp",ep=c.p+"static/image/5f7e9ebb187df746ce367ece9f015ff5.5b57d446.webp",ef=c.p+"static/image/53d5864c4e48330e71952abc75d7c7fd.ee3d3475.webp",eg=c.p+"static/image/f4164b71fcd9414d3893bfc982f5baa1.82eef3c7.webp",eb=c.p+"static/image/2fe128da4d29327912fd281d3221024b.f6b6bb2f.gif",em=c.p+"static/image/f27dee1bdef4a505d72f3ab64a0f056f.86d710af.gif",eu=c.p+"static/image/e44f653ba71b8d9d14210d494da96df8.46486e0f.webp",ey=c.p+"static/image/d7f00af6f953c364a9b4b14bc7a8afda.8ea92547.webp",eM=c.p+"static/image/93112f23ac7dc74b20a8c39a7e2f8fc2.af5a32f5.gif",ev=c.p+"static/image/ca3be52303533eaafee855aaf6b0508f.22420693.gif",ek=c.p+"static/image/369d8cd10e12e1cfa8103ae96b968203.99851a3c.webp",eS=c.p+"static/image/4f80ef53e593eb5c411c7eee645df146.c137c223.gif",eP=c.p+"static/image/b9254ff84ff62fef50c0319d3298e34c.3a8873e1.webp",ew=c.p+"static/image/74d3ed10a9dfb61aaa6e665dd0240278.ea86ca6f.webp",eL=c.p+"static/image/ac4c6ca8ef65752cca74e41a0face6f7.f967046d.gif",eV=c.p+"static/image/86e447fe92726242308cdc51c5d1c907.575ae86e.webp",eG=c.p+"static/image/aabd172398de792d80e47f2a159bcb66.a71d0fda.webp",eN=c.p+"static/image/bbe40ca5ca1a0cfad9bc29bed0724939.73316597.gif";function eq(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",img:"img",ul:"ul",li:"li",strong:"strong",h2:"h2",pre:"pre",h3:"h3",h4:"h4",blockquote:"blockquote"},(0,s.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"35-高级篇svg-路径的高级技术",children:["35-高级篇：SVG 路径的高级技术",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#35-高级篇svg-路径的高级技术",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["SVG路径（",(0,d.jsx)(n.code,{children:"<path>"}),"）是一种基于数学描述的矢量图形技术，通过一系列路径命令定义节点、直线和曲线，实现各种复杂的图形和动画效果。在现代 Web 开发中，SVG 路径技术至关重要。然而，许多开发者常忽视这一技术，偏向图形编辑器生成复杂路径。"]}),"\n",(0,d.jsx)(n.p,{children:"尽管图形编辑器在某些情况下更为便捷，但有些任务更适合在代码中完成。尤其是当需要对生成路径进行定制修改时，SVG路径技术尤为重要。简而言之，掌握这些技术的内在工作原理将大大提升你的前端技能水平，使你能实现前所未有的创意。正如下面的动画所展示的，深入了解和掌握SVG路径的高级技术可创造引人注目的视觉效果和交互体验。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eN,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"因此，小册单独设置了SVG路径的高级技术一节，旨在深入探讨SVG路径的高级应用，包括路径命令、贝塞尔曲线和路径动画等："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"路径命令："})," SVG路径命令是指令序列，包括移动到（",(0,d.jsx)(n.code,{children:"M/m"}),"）、线段到（",(0,d.jsx)(n.code,{children:"L/l"}),"）、水平线到（",(0,d.jsx)(n.code,{children:"H/h"}),"）、垂直线到（",(0,d.jsx)(n.code,{children:"V/v"}),"）、曲线到（",(0,d.jsx)(n.code,{children:"C/c"}),"、",(0,d.jsx)(n.code,{children:"S/s"}),"、",(0,d.jsx)(n.code,{children:"Q/q"}),"、",(0,d.jsx)(n.code,{children:"T/t"}),"）、椭圆曲线到（",(0,d.jsx)(n.code,{children:"A/a"}),"）和闭合路径（",(0,d.jsx)(n.code,{children:"Z/z"}),"）。精通这些命令及其使用可以精确控制路径形状和行为。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"贝塞尔曲线："})," 在SVG路径中常见的贝塞尔曲线通过控制点定义曲线形状。SVG有线性、二次、三次和四次贝塞尔曲线。了解如何使用这些曲线及其控制点可以创造各种引人注目的曲线效果。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"动画和交互："})," SVG路径可通过CSS或JavaScript进行动画和交互。使用CSS可实现平滑的动画效果，而JavaScript可实现更复杂的交互行为，如拖拽、缩放和旋转。深入了解SVG路径动画和交互技术可为Web应用程序和用户界面创造生动引人的交互体验。"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"深入了解和掌握 SVG 路径的高级技术可以帮助你创建出令人印象深刻的视觉效果和交互体验。通过深入了解贝塞尔曲线、路径命令以及动画和交互技术，你可以更好地利用 SVG 路径的潜力，为其 Web 应用程序和用户界面带来独特的魅力和吸引力。"}),"\n",(0,d.jsxs)(n.h2,{id:"svg-路径path简介",children:["SVG 路径（",(0,d.jsx)(n.code,{children:"<path>"}),"）简介",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-路径path简介",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eG,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345813971552698406#heading-8",target:"_blank",rel:"noopener noreferrer",children:"在介绍 SVG 基本图形元素时"}),"，就曾向大家介绍过 SVG 的 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素。SVG 中的 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素是 ",(0,d.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345813971552698406#heading-8",target:"_blank",rel:"noopener noreferrer",children:"SVG 基本形状"}),"中最强大的一个，甚至是绘制的终极元素。它可以绘制出你想要的任何形状！据我所知，SVG 内部的所有其他图形绘制元素，比如直线（",(0,d.jsx)(n.code,{children:"<line>"}),"）、矩形（",(0,d.jsx)(n.code,{children:"<rect>"}),"）、圆（",(0,d.jsx)(n.code,{children:"<circle>"}),"）、椭圆（",(0,d.jsx)(n.code,{children:"<ellipse>"}),"）、折线（",(0,d.jsx)(n.code,{children:"<polyline>"}),"）和多边形（",(0,d.jsx)(n.code,{children:"<polygon>"}),"），最终都是通过路径元素（",(0,d.jsx)(n.code,{children:"<path>"}),"）来实现的。"]}),"\n",(0,d.jsxs)(n.p,{children:["另外，",(0,d.jsx)(n.code,{children:"<path>"})," 只需要设定很少的点，就可以创建平流畅的线条（比如曲线）。虽然 ",(0,d.jsx)(n.code,{children:"<polyline>"})," 元素也能实现类似的效果，但是必须设置大量的点（点越密集，越接近连续，看起来越平滑流畅），并且这种做法不能够放大（放大后，点的离散更明显）。所以在绘制 SVG 图形时，对路径的良好理解很重要。虽然不建议使用文本编辑器创建复杂的路径，但了解它的工作方式将助于识别和修复 SVG 中的显示问题。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"<path>"})," 元素是通过 ",(0,d.jsx)(n.code,{children:"d"})," 属性来描述它所绘制的内容。",(0,d.jsx)(n.code,{children:"d"})," 属性的值是一个独特的迷你语法。它可能看起来相当晦涩。这是一大堆数字和字母组合成的长字符串。像计算机上的任何东西一样，这也有它的道理。我在这方面不是专家，但我觉得挖掘一下会很有趣。"]}),"\n",(0,d.jsx)(n.p,{children:"例如，Web 设计师在诸如 Figma 图形设计软件中绘制了一条曲线，如下图所示："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eV,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["导出的 SVG 就是一个由 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素绘制的图形："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<svg fill="none" viewBox="0 0 1810 467">\n    <path fill="#000" d="M1.899 450.384c-2.892 5.027-1.162 11.446 3.865 14.338 5.026 2.892 11.445 1.162 14.337-3.865L1.9 450.384ZM487 15.621l1.887 10.329L487 15.62Zm672 374.5.3 10.495-.3-10.495Zm538.5-321c0 30.928 25.07 56 56 56s56-25.072 56-56-25.07-56-56-56-56 25.072-56 56ZM11 455.62c9.101 5.236 9.1 5.237 9.102 5.235l.005-.009.027-.047.115-.198.475-.816a516.71 516.71 0 0 1 1.913-3.244 952.213 952.213 0 0 1 7.545-12.459c6.633-10.779 16.402-26.256 28.907-44.984 25.02-37.47 60.94-87.873 104.559-139.653 43.644-51.81 94.824-104.792 150.331-147.565 55.577-42.828 114.915-74.97 174.908-85.931l-3.774-20.658c-64.517 11.786-126.934 46.017-183.952 89.955-57.089 43.991-109.346 98.166-153.574 150.669-44.253 52.534-80.642 103.6-105.963 141.522-12.665 18.968-22.575 34.667-29.327 45.64a964.231 964.231 0 0 0-7.714 12.738 562.348 562.348 0 0 0-2.501 4.252l-.133.229-.035.062-.01.017c-.003.005-.005.008 9.096 5.245ZM488.887 25.95C630.246.125 719.36 90.87 813.492 192.994c92.66 100.527 190.028 212.124 345.808 207.622l-.6-20.991c-144.53 4.176-235.389-98.473-329.767-200.864C736.028 77.968 639.296-22.876 485.113 5.291l3.774 20.659ZM1159.3 400.616c135.15-3.905 285.96-85.781 401.79-165.193 58.18-39.89 108.04-79.521 143.36-109.176 17.66-14.833 31.7-27.18 41.34-35.833 4.82-4.327 8.53-7.73 11.06-10.059a608.93 608.93 0 0 0 2.87-2.668c.32-.304.57-.537.74-.695.08-.079.15-.14.19-.18.02-.022.04-.038.05-.05.01-.005.01-.01.01-.013.01-.003.01-.006-7.21-7.628l-7.22-7.621c0 .001-.01.004-.01.008-.01.007-.02.02-.04.037-.04.034-.09.087-.17.159-.15.143-.38.36-.69.65l-2.77 2.575c-2.46 2.265-6.1 5.602-10.84 9.86-9.49 8.515-23.35 20.71-40.81 35.375-34.95 29.342-84.26 68.531-141.74 107.939-115.49 79.183-261.92 157.806-390.51 161.522l.6 20.991Z"/>\n</svg>\n'})}),"\n",(0,d.jsx)(n.p,{children:"这是一个中等复杂度路径的示例："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path fill="#000" d="M1.899 450.384c-2.892 5.027-1.162 11.446 3.865 14.338 5.026 2.892 11.445 1.162 14.337-3.865L1.9 450.384ZM487 15.621l1.887 10.329L487 15.62Zm672 374.5.3 10.495-.3-10.495Zm538.5-321c0 30.928 25.07 56 56 56s56-25.072 56-56-25.07-56-56-56-56 25.072-56 56ZM11 455.62c9.101 5.236 9.1 5.237 9.102 5.235l.005-.009.027-.047.115-.198.475-.816a516.71 516.71 0 0 1 1.913-3.244 952.213 952.213 0 0 1 7.545-12.459c6.633-10.779 16.402-26.256 28.907-44.984 25.02-37.47 60.94-87.873 104.559-139.653 43.644-51.81 94.824-104.792 150.331-147.565 55.577-42.828 114.915-74.97 174.908-85.931l-3.774-20.658c-64.517 11.786-126.934 46.017-183.952 89.955-57.089 43.991-109.346 98.166-153.574 150.669-44.253 52.534-80.642 103.6-105.963 141.522-12.665 18.968-22.575 34.667-29.327 45.64a964.231 964.231 0 0 0-7.714 12.738 562.348 562.348 0 0 0-2.501 4.252l-.133.229-.035.062-.01.017c-.003.005-.005.008 9.096 5.245ZM488.887 25.95C630.246.125 719.36 90.87 813.492 192.994c92.66 100.527 190.028 212.124 345.808 207.622l-.6-20.991c-144.53 4.176-235.389-98.473-329.767-200.864C736.028 77.968 639.296-22.876 485.113 5.291l3.774 20.659ZM1159.3 400.616c135.15-3.905 285.96-85.781 401.79-165.193 58.18-39.89 108.04-79.521 143.36-109.176 17.66-14.833 31.7-27.18 41.34-35.833 4.82-4.327 8.53-7.73 11.06-10.059a608.93 608.93 0 0 0 2.87-2.668c.32-.304.57-.537.74-.695.08-.079.15-.14.19-.18.02-.022.04-.038.05-.05.01-.005.01-.01.01-.013.01-.003.01-.006-7.21-7.628l-7.22-7.621c0 .001-.01.004-.01.008-.01.007-.02.02-.04.037-.04.034-.09.087-.17.159-.15.143-.38.36-.69.65l-2.77 2.575c-2.46 2.265-6.1 5.602-10.84 9.86-9.49 8.515-23.35 20.71-40.81 35.375-34.95 29.342-84.26 68.531-141.74 107.939-115.49 79.183-261.92 157.806-390.51 161.522l.6 20.991Z"/>\n'})}),"\n",(0,d.jsx)(n.p,{children:"我们可以重新格式化它，开始理解它（仍然是有效的代码）："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path fill="#000" \n    d="\n        M1.899 450.384\n        c-2.892 5.027-1.162 11.446 3.865 14.338 5.026 2.892 11.445 1.162 14.337-3.865\n        L1.9 450.384Z\n        M487 15.621l1.887 10.329L487 15.62\n        Z\n        m672 374.5.3 10.495-.3-10.495Z\n        m538.5-321\n        c0 30.928 25.07 56 56 56\n        s56-25.072 56-56-25.07-56-56-56-56 25.072-56 56\n        Z\n        M11 455.62\n        c9.101 5.236 9.1 5.237 9.102 5.235\n        l.005-.009.027-.047.115-.198.475-.816\n        a516.71 516.71 0 0 1 1.913-3.244 952.213 952.213 0 0 1 7.545-12.459\n        c6.633-10.779 16.402-26.256 28.907-44.984 25.02-37.47 60.94-87.873 104.559-139.653 43.644-51.81 94.824-104.792 150.331-147.565 55.577-42.828 114.915-74.97 174.908-85.931\n        l-3.774-20.658c-64.517 11.786-126.934 46.017-183.952 89.955-57.089 43.991-109.346 98.166-153.574 150.669-44.253 52.534-80.642 103.6-105.963 141.522-12.665 18.968-22.575 34.667-29.327 45.64a964.231 964.231 0 0 0-7.714 12.738 562.348 562.348 0 0 0-2.501 4.252\n        l-.133.229-.035.062-.01.017\n        c-.003.005-.005.008 9.096 5.245\n        Z\n        M488.887 25.95\n        C630.246.125 719.36 90.87 813.492 192.994\n        c92.66 100.527 190.028 212.124 345.808 207.622\n        l-.6-20.991c-144.53 4.176-235.389-98.473-329.767-200.864\n        C736.028 77.968 639.296-22.876 485.113 5.291l3.774 20.659\n        Z\n        M1159.3 400.616\n        c135.15-3.905 285.96-85.781 401.79-165.193 58.18-39.89 108.04-79.521 143.36-109.176 17.66-14.833 31.7-27.18 41.34-35.833 4.82-4.327 8.53-7.73 11.06-10.059a608.93 608.93 0 0 0 2.87-2.668c.32-.304.57-.537.74-.695.08-.079.15-.14.19-.18.02-.022.04-.038.05-.05.01-.005.01-.01.01-.013.01-.003.01-.006-7.21-7.628l-7.22-7.621\n        c0 .001-.01.004-.01.008-.01.007-.02.02-.04.037-.04.034-.09.087-.17.159-.15.143-.38.36-.69.65l-2.77 2.575c-2.46 2.265-6.1 5.602-10.84 9.86-9.49 8.515-23.35 20.71-40.81 35.375-34.95 29.342-84.26 68.531-141.74 107.939-115.49 79.183-261.92 157.806-390.51 161.522\n        l.6 20.991\n        Z"/>\n'})}),"\n",(0,d.jsxs)(n.p,{children:["正如你所看到的，",(0,d.jsx)(n.code,{children:"d"})," 属性包含的是一些字母和数字。其实这些字母和数字就是一个“命令 + 参数”的序列。其中，这些字母是命令，数字是传递给这些命令的值（参数）。所有空格都是可选的（它们也可以是逗号）。"]}),"\n",(0,d.jsxs)(n.p,{children:["例如，上面代码中的 ",(0,d.jsx)(n.code,{children:"M1.899 450.384"})," ，字母 ",(0,d.jsx)(n.code,{children:"M"})," 表示的是“移到”（Move to）命令，当解析器读到这个命令时，它就知道你是打算移动到某个点。跟在命令字母后面的，是你需要移动到的那个点的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 轴坐标。因此 ",(0,d.jsx)(n.code,{children:"M1.899 450.384"})," 命令表示的是移动到 ",(0,d.jsx)(n.code,{children:"(1.899,450.384)"})," 这个点。这一段字符结束后，解析器就会去读下一段命令。每一个命令都有两种表示方式，一种是用大写字母，表示采用绝对定位。另一种是用小写字母，表示采用相对定位。"]}),"\n",(0,d.jsxs)(n.p,{children:["这意味着，要掌握 SVG 的 ",(0,d.jsx)(n.code,{children:"<path>"})," ，首先要知道它有哪些命令可用，以及如何使用它们来绘制各种图形。接下来，我们将讲解这些可用的命令，并且展示一些示例。"]}),"\n",(0,d.jsx)(n.p,{children:"让我们开始吧！"}),"\n",(0,d.jsxs)(n.h2,{id:"了解-svg-路径的命令",children:["了解 SVG 路径的命令",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#了解-svg-路径的命令",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["大多 Web 开发者看到 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,d.jsx)(n.code,{children:"d"})," 属性的值时，或多或少都会有种头皮发麻的感觉，甚至对其有种说不出，道不明的恐惧感。它看起来就像是某种神奇的咒语。事实上，它只是一系列的命令，告诉浏览器路径应该如何绘制。如果我们稍微整理一下 ",(0,d.jsx)(n.code,{children:"d"})," 属性，这一点会更加明显："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M12.07.2\n    C10.55.68.15.26.36.7\n    C4.58.14.210.65.712.4\n    L12.018.3\n    L18.312.4\n    C19.710.619.58.117.76.7\n    C15.85.213.45.612.07.2\n    Z" />\n'})}),"\n",(0,d.jsx)(n.p,{children:"上面的代码，将会绘制一个“心形”图形。为了绘制这个图形，浏览器按顺序执行这些路径命令，每个命令绘制路径的一小段："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eL,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"并不难发现，所有路径命令都遵循相同的基本语法——一个字母后面紧跟一系列数字。字母表示的是命令类型，而数字则作为命令的参数。"}),"\n",(0,d.jsx)(n.p,{children:"在某种程度上，你可以将这些命令看作函数调用，其中字母是函数名称，而数字是函数的参数："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-JavaScript",children:"M(12, 7.2);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"路径命令类型",children:["路径命令类型",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#路径命令类型",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["上面所提到的 ",(0,d.jsx)(n.code,{children:"M"})," 命令中是众多路径命令中的一个。据我统计，它大概有 ",(0,d.jsx)(n.code,{children:"20"})," 个不同类型的命令："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ew,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["注意，以上命令用于 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,d.jsx)(n.code,{children:"d"})," 属性中。同样的语法也用于描述 ",(0,d.jsx)(n.code,{children:"<animateMotion>"})," （SVG 路径动画）和 ",(0,d.jsx)(n.code,{children:"<textPath>"})," 元素（文本路径）的 ",(0,d.jsx)(n.code,{children:"path"})," 属性中的几何路径。该语法还适用于 CSS 的 ",(0,d.jsx)(n.code,{children:"path()"})," 函数和 HTML 的 ",(0,d.jsx)(n.code,{children:"<canvas>"})," 元素。"]}),"\n",(0,d.jsx)(n.p,{children:"对于所有命令，大写字母后面跟随绝对坐标，而小写字母后面跟随相对坐标（偏移值）。每个路径段从上一个命令的终点或目的地开始。如果路径数据包含错误，浏览器会绘制直到错误之前的所有路径段。这使得调试稍微容易一些。"}),"\n",(0,d.jsxs)(n.p,{children:["以下命令用于 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,d.jsx)(n.code,{children:"d"})," 属性中。同样的语法也用于描述 ",(0,d.jsx)(n.code,{children:"<animateMotion>"})," 和 (在 SVG 2 中) ",(0,d.jsx)(n.code,{children:"<textPath>"})," 元素的 ",(0,d.jsx)(n.code,{children:"path"})," 属性中的路径几何。该语法还用于 CSS 的 ",(0,d.jsx)(n.code,{children:"path()"})," 函数和 HTML 画布方法中。"]}),"\n",(0,d.jsx)(n.p,{children:"在这里，我们先简单的描述一下这些命令的功能，具体的使用稍后会逐个介绍："}),"\n",(0,d.jsxs)(n.h4,{id:"移动到move-to命令m-x-y-和-m-dx-dy",children:["移动到（Move To）命令：",(0,d.jsx)(n.code,{children:"M x y"})," 和 ",(0,d.jsx)(n.code,{children:"m dx dy"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#移动到move-to命令m-x-y-和-m-dx-dy",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"移动“笔”的位置而不绘制任何内容。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["后面跟随两个数字，分别表示目的地的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 坐标（对于 ",(0,d.jsx)(n.code,{children:"M"}),"）或相对位移 ",(0,d.jsx)(n.code,{children:"dx"})," 和 ",(0,d.jsx)(n.code,{children:"dy"})," （对于 ",(0,d.jsx)(n.code,{children:"m"}),"）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["额外的坐标对将被解释为直线到（Line To）命令，其中 ",(0,d.jsx)(n.code,{children:"M"})," 对应 ",(0,d.jsx)(n.code,{children:"L"}),"，",(0,d.jsx)(n.code,{children:"m"})," 对应 ",(0,d.jsx)(n.code,{children:"l"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"奇数个坐标列表是无效的，会导致错误"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"所有路径必须以移动到命令开始"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["如果路径以相对的 ",(0,d.jsx)(n.code,{children:"m"})," 命令开始，则其起始点相对于 ",(0,d.jsx)(n.code,{children:"(0,0)"})," 原点计算"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"直线到line-to命令l-x-y-和-l-dx-dy",children:["直线到（Line To）命令：",(0,d.jsx)(n.code,{children:"L x y"})," 和 ",(0,d.jsx)(n.code,{children:"l dx dy"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#直线到line-to命令l-x-y-和-l-dx-dy",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"绘制直线。从当前位置绘制一条直线到指定的点。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["后面跟随两个数字，分别表示目的地的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 坐标（对于 ",(0,d.jsx)(n.code,{children:"L"}),"）或相对位移 ",(0,d.jsx)(n.code,{children:"dx"})," 和 ",(0,d.jsx)(n.code,{children:"dy"})," （对于 ",(0,d.jsx)(n.code,{children:"l"}),"）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"额外的坐标对会继续绘制更多的直线段"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["对于多个相对线段（",(0,d.jsx)(n.code,{children:"l"}),"），每段线的起点都会重新计算"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"奇数个坐标列表是无效的，会导致错误"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"水平线到horizontal-line-to命令h-x-和-h-dx",children:["水平线到（Horizontal Line To）命令：",(0,d.jsx)(n.code,{children:"H x"})," 和 ",(0,d.jsx)(n.code,{children:"h dx"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#水平线到horizontal-line-to命令h-x-和-h-dx",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"绘制水平线。从当前位置绘制一条水平直线到指定位置。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["后面跟一个数字，表示目的地的 ",(0,d.jsx)(n.code,{children:"x"})," 坐标（对于 ",(0,d.jsx)(n.code,{children:"H"}),"）或相对位移 ",(0,d.jsx)(n.code,{children:"dx"}),"（对于 ",(0,d.jsx)(n.code,{children:"h"}),"）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"额外的数字会继续绘制更多的水平线段"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["对于多个相对水平线段（",(0,d.jsx)(n.code,{children:"h"}),"），每段线的起点都会重新计算"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"垂直线到vertical-line-to命令v-y-和-v-dy",children:["垂直线到（Vertical Line To）命令：",(0,d.jsx)(n.code,{children:"V y"})," 和 ",(0,d.jsx)(n.code,{children:"v dy"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#垂直线到vertical-line-to命令v-y-和-v-dy",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"绘制垂直线。从当前位置绘制一条直线到指定的垂直位置。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["后面跟一个数字，表示目的地的 ",(0,d.jsx)(n.code,{children:"y"})," 坐标（对于 ",(0,d.jsx)(n.code,{children:"V"}),"）或相对位移 ",(0,d.jsx)(n.code,{children:"dy"}),"（对于 ",(0,d.jsx)(n.code,{children:"v"}),"）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"多出的数字会绘制额外的线段"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["对于多个相对垂直线（",(0,d.jsx)(n.code,{children:"v"}),"），每条线段都会重新计算相对点"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"二次贝塞尔曲线quadratic-bezier-curve命令q-x1-y1-x-y-和-q-dx1-dy1-dx-dy",children:["二次贝塞尔曲线（Quadratic Bezier Curve）命令：",(0,d.jsx)(n.code,{children:"Q x1 y1, x y"})," 和 ",(0,d.jsx)(n.code,{children:"q dx1 dy1, dx dy"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二次贝塞尔曲线quadratic-bezier-curve命令q-x1-y1-x-y-和-q-dx1-dy1-dx-dy",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"绘制二次贝塞尔曲线，使用指定的控制点，绘制到指定的结束点。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["后面跟着四个数字：前两个是控制点的 ",(0,d.jsx)(n.code,{children:"x1"})," 和 ",(0,d.jsx)(n.code,{children:"y1"})," 坐标（对于 ",(0,d.jsx)(n.code,{children:"Q"})," ）或偏移量 ",(0,d.jsx)(n.code,{children:"dx1"})," 和 ",(0,d.jsx)(n.code,{children:"dy1"})," （对于 ",(0,d.jsx)(n.code,{children:"q"}),"） ，后两个是结束点的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 坐标（对于 ",(0,d.jsx)(n.code,{children:"Q"})," ）或偏移量 ",(0,d.jsx)(n.code,{children:"dx"})," 和 ",(0,d.jsx)(n.code,{children:"dy"})," （对于 ",(0,d.jsx)(n.code,{children:"q"})," ）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"额外的四个数字组成的集合会绘制额外的曲线段"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"相对位置是相对于每段曲线的起点计算的，对于控制点和结束点都是如此"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"无法分组为四个一组的坐标列表是错误的"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"平滑二次贝塞尔曲线smooth-quadratic-bezier-curve命令t-x-y-和-t-dx-dy",children:["平滑二次贝塞尔曲线（Smooth Quadratic Bezier Curve）命令：",(0,d.jsx)(n.code,{children:"T x y"})," 和 ",(0,d.jsx)(n.code,{children:"t dx dy"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#平滑二次贝塞尔曲线smooth-quadratic-bezier-curve命令t-x-y-和-t-dx-dy",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"绘制二次贝塞尔曲线到指定的结束点，自动计算控制点，以确保与前一段曲线的连接平滑。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["后面跟着两个数字，表示目的地点的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 坐标（对于 ",(0,d.jsx)(n.code,{children:"T"}),"）或偏移量 ",(0,d.jsx)(n.code,{children:"dx"})," 和 ",(0,d.jsx)(n.code,{children:"dy"}),"（对于 ",(0,d.jsx)(n.code,{children:"t"}),"）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"控制点的位置由前一段曲线的控制点到其结束点的位置关系决定，以保持平滑连接"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"如果前一个路径段不是二次曲线，则新的控制点将设置为起始点"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"多出的数字对会绘制额外的曲线"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["对于多个曲线，控制点的位置计算和 ",(0,d.jsx)(n.code,{children:"t"})," 命令的结束点的相对位置都基于前一段路径"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"奇数个坐标列表是错误的"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"三次贝塞尔曲线cubic-bezier-curve命令c-x1-y1-x2-y2-x-y-和-c-dx1-dy1-dx2-dy2-dx-dy",children:["三次贝塞尔曲线（Cubic Bezier Curve）命令：",(0,d.jsx)(n.code,{children:"C x1 y1, x2 y2, x y"})," 和 ",(0,d.jsx)(n.code,{children:"c dx1 dy1, dx2 dy2, dx dy"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三次贝塞尔曲线cubic-bezier-curve命令c-x1-y1-x2-y2-x-y-和-c-dx1-dy1-dx2-dy2-dx-dy",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"绘制三次贝塞尔曲线，使用指定的控制点，绘制到指定的结束点。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["后跟六个数字：前两个是第一个控制点的 ",(0,d.jsx)(n.code,{children:"x1"})," 和 ",(0,d.jsx)(n.code,{children:"y1"})," 坐标（对于 ",(0,d.jsx)(n.code,{children:"C"}),"）或偏移量 ",(0,d.jsx)(n.code,{children:"dx1"})," 和 ",(0,d.jsx)(n.code,{children:"dy1"})," （对于 ",(0,d.jsx)(n.code,{children:"c"}),"），接下来两个是第二个控制点的位置 ",(0,d.jsx)(n.code,{children:"x2"})," 和 ",(0,d.jsx)(n.code,{children:" y2"})," 或偏移量 ",(0,d.jsx)(n.code,{children:"dx2"})," 和 ",(0,d.jsx)(n.code,{children:"dy2"}),"，最后一对定义了结束点的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 坐标或偏移量 ",(0,d.jsx)(n.code,{children:"dx"})," 和 ",(0,d.jsx)(n.code,{children:"dy"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"额外的六个数字组成的集合会绘制额外的曲线段"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"控制点和结束点的相对位置都是相对于每段曲线的起点计算的"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"无法分组为六个一组的坐标列表是错误的"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"平滑三次贝塞尔曲线smooth-cubic-bezier-curve命令s-x2-y2-x-y-和-s-dx2-dy2-dx-d",children:["平滑三次贝塞尔曲线（Smooth Cubic Bezier Curve）命令：",(0,d.jsx)(n.code,{children:"S x2 y2, x y"})," 和 ",(0,d.jsx)(n.code,{children:"s dx2 dy2, dx d"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#平滑三次贝塞尔曲线smooth-cubic-bezier-curve命令s-x2-y2-x-y-和-s-dx2-dy2-dx-d",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"绘制三次贝塞尔曲线到指定的结束点，自动计算第一个控制点，以确保与前一段三次曲线的连接平滑，并使用指定的第二个控制点。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["后面跟着四个数字：前两个是第二个控制点的 ",(0,d.jsx)(n.code,{children:"x2"})," 和 ",(0,d.jsx)(n.code,{children:"y2"})," 坐标（对于 ",(0,d.jsx)(n.code,{children:"S"}),"）或偏移量 ",(0,d.jsx)(n.code,{children:"dx2"})," 和 ",(0,d.jsx)(n.code,{children:"dy2"})," （对于 ",(0,d.jsx)(n.code,{children:"s"}),"），最后一对定义了结束点的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 坐标或偏移量 ",(0,d.jsx)(n.code,{children:"dx"})," 和 ",(0,d.jsx)(n.code,{children:"dy"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["第一个控制点通过确定从前一段曲线的控制点到其结束点的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 偏移量来计算，然后再次添加这些偏移量"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"如果前一个路径段不是三次曲线，则新的控制点将设置为起始点"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"额外的四个数字组成的集合会绘制额外的曲线"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["对于多个曲线，控制点的位置计算和 ",(0,d.jsx)(n.code,{children:"s"})," 命令的所有点的相对位置都基于前一段路径"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"无法分组为四个一组的坐标列表是错误的"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"椭圆曲线到arc-to命令a-rx-ry-x-axis-rotation-large-arc-flag-sweep-flag-x-y-和-a-rx-ry-x-axis-rotation-large-arc-flag-sweep-flag-dx-dy",children:["椭圆曲线到（Arc To）命令：",(0,d.jsx)(n.code,{children:"A rx ry x-axis-rotation large-arc-flag sweep-flag x y"})," 和 ",(0,d.jsx)(n.code,{children:"a rx ry x-axis-rotation large-arc-flag sweep-flag dx dy"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#椭圆曲线到arc-to命令a-rx-ry-x-axis-rotation-large-arc-flag-sweep-flag-x-y-和-a-rx-ry-x-axis-rotation-large-arc-flag-sweep-flag-dx-dy",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"绘制椭圆弧线段到指定的结束点，使用指定的参数构造弧线。后跟着七个数字，如下所示："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"rx"})," 表示椭圆的 ",(0,d.jsx)(n.code,{children:"x"})," 轴半径"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"ry"})," 表示椭圆的 ",(0,d.jsx)(n.code,{children:"y"})," 轴半径"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"x-axis-rotation"})," 表示椭圆 ",(0,d.jsx)(n.code,{children:"x"})," 轴相对于路径 ",(0,d.jsx)(n.code,{children:"x"})," 轴的旋转角度，以度数表示"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"large-arc-flag"})," 表示大弧或小弧标志，其中 ",(0,d.jsx)(n.code,{children:"1"})," 表示大弧，",(0,d.jsx)(n.code,{children:"0"})," 表示小弧"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"sweep-flag"})," 表示顺时针或逆时针标志，其中 ",(0,d.jsx)(n.code,{children:"1"})," 表示顺时针，",(0,d.jsx)(n.code,{children:"0"})," 表示逆时针"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["结束点的 ",(0,d.jsx)(n.code,{children:"x"})," 位置（对于 ",(0,d.jsx)(n.code,{children:"A"}),"）或偏移量 ",(0,d.jsx)(n.code,{children:"dx"}),"（对于 ",(0,d.jsx)(n.code,{children:"a"}),"）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["结束点的 ",(0,d.jsx)(n.code,{children:"y"})," 位置（对于 ",(0,d.jsx)(n.code,{children:"A"}),"）或偏移量 ",(0,d.jsx)(n.code,{children:"dy"}),"（对于 ",(0,d.jsx)(n.code,{children:"a"}),"）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"额外的七个数字组成的集合会创建额外的弧线"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"无法分组为七个一组的坐标列表是错误的"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["标志参数的值为除 ",(0,d.jsx)(n.code,{children:"1"})," 或 ",(0,d.jsx)(n.code,{children:"0"})," 之外的任何值都是错误的"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"闭合路径close-path命令z-和-z",children:["闭合路径（Close Path）命令：",(0,d.jsx)(n.code,{children:"Z"})," 和 ",(0,d.jsx)(n.code,{children:"z"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#闭合路径close-path命令z-和-z",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"从当前位置绘制一条直线（如果需要），连接到最近的移动到命令定义的点，并将两条线段连接成一条线段。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"在闭合路径命令之后的任何数字都是错误的"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["唯一可以在闭合路径之后的命令是移动到 ",(0,d.jsx)(n.code,{children:"M"})," 或 ",(0,d.jsx)(n.code,{children:"m"})]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"这些枯燥的文字可能并没有解决你的实际问题，甚至可能让你更加困惑。你可能还不清楚如何使用这些命令来绘制、调试和修复你的图形。别担心，我们会在接下来详细介绍这些命令的用法，帮助你精确地绘制各种形状和曲线，甚至让你在网页上创建丰富多彩且复杂的图形。当然，如果你对这些理论性的描述不感兴趣，你可以直接跳到你感兴趣的内容。但我会尽力帮助更多的Web开发者了解SVG路径命令集。"}),"\n",(0,d.jsxs)(n.h3,{id:"绝对和相对命令",children:["绝对和相对命令",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#绝对和相对命令",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["SVG 路径中的命令分为绝对命令和相对命令，它们是定义路径的关键部分，决定了图形如何绘制和移动。绝对命令是以大写字母表示的，比如 ",(0,d.jsx)(n.code,{children:"M"}),"、",(0,d.jsx)(n.code,{children:"L"}),"、",(0,d.jsx)(n.code,{children:"H"}),"、",(0,d.jsx)(n.code,{children:"V"}),"、",(0,d.jsx)(n.code,{children:"C"}),"、",(0,d.jsx)(n.code,{children:"S"}),"、",(0,d.jsx)(n.code,{children:"Q"}),"、",(0,d.jsx)(n.code,{children:"T"}),"、",(0,d.jsx)(n.code,{children:"A"}),"、",(0,d.jsx)(n.code,{children:"Z"})," ，这些命令使用绝对坐标值来指定路径的位置和形状，这意味着它们的参数是相对于坐标原点 ",(0,d.jsx)(n.code,{children:"(0,0)"})," 的。而相对命令则是以小写字母表示的，比如",(0,d.jsx)(n.code,{children:"m"}),"、",(0,d.jsx)(n.code,{children:"l"}),"、",(0,d.jsx)(n.code,{children:"h"}),"、",(0,d.jsx)(n.code,{children:"v"}),"、",(0,d.jsx)(n.code,{children:"c"}),"、",(0,d.jsx)(n.code,{children:"s"}),"、",(0,d.jsx)(n.code,{children:"q"}),"、",(0,d.jsx)(n.code,{children:"t"}),"、",(0,d.jsx)(n.code,{children:"a"})," 、 ",(0,d.jsx)(n.code,{children:"z"})," ，这些命令使用相对坐标值来指定路径的位置和形状，这意味着它们的参数是相对前一个命令的终点的。"]}),"\n",(0,d.jsx)(n.p,{children:"请看以下命令："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 10.0 10.0\n    L 5.0 5.0" stroke="hsl(206 100% 50%)" />\n<path d="\n    M 10.0 10.0\n    l 5.0 5.0" stroke="hsl(151 55% 41.5%)" />\n'})}),"\n",(0,d.jsxs)(n.p,{children:["这里，我们有两条线都从相同的点 ",(0,d.jsx)(n.code,{children:"(10, 10)"})," 开始，参数也都是 ",(0,d.jsx)(n.code,{children:"5 5"}),"。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eP,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/ZENeRBQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZENeRBQ"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["注意，由大写 ",(0,d.jsx)(n.code,{children:"L"})," 命令绘制的线最终停在 ",(0,d.jsx)(n.code,{children:"(5,5)"})," 位置，而由小写 ",(0,d.jsx)(n.code,{children:"l"})," 命令绘制的线最终停在 ",(0,d.jsx)(n.code,{children:"(15,15)"})," 位置。不难发现，示例中绝对命令的参数位置都是相对 ",(0,d.jsx)(n.code,{children:"(0,0)"})," 坐标计算，而相对命令的参数相对于起点位置计算。"]}),"\n",(0,d.jsx)(n.p,{children:"你可能会感到好奇，为什么 SVG 的路径命令在设计的时候会提供绝对命令和相对命令呢？这样设计的原因主要是为了提供更灵活、更方便的路径绘制方式，以满足不同的需求和工作流程。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"灵活性"}),"：绝对命令和相对命令允许 Web 开发者以不同的方式定义路径。绝对命令直接使用绝对坐标值，使得路径的位置和形状能够准确地相对于画布或其他参考点进行定位。而相对命令则相对于当前路径的位置进行移动和绘制，更适合描述相对复杂的路径结构。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"简洁性"}),"：相对命令通常比绝对命令更简洁，因为它可以相对于当前位置来指定路径的位置和形状。这种相对性质可以减少冗余的坐标值，使得路径描述更加紧凑，代码更易于理解和维护。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"适应性"}),"：绝对命令和相对命令的选择取决于 Web 开发者的需求和习惯。有些情况下，绝对命令更直观、更易于掌握，特别是在需要精确控制路径位置和形状时。而在需要描述相对移动或绘制的情况下，相对命令则更加适用。"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"在实际应用中，你可以根据需要混合使用这两种类型的命令，以实现更复杂的路径绘制效果。"}),"\n",(0,d.jsxs)(n.p,{children:["需要知道的是，在某些情景之下，例如将路径作为剪切路径或遮罩的时候，相对命令的路径将会更灵活一些。当路径所有命令都是相对的时候，移动路径就像简单地操作其初始的 ",(0,d.jsx)(n.code,{children:"M"})," 命令一样，其余部分会自动调整，因为这是相对命令的全部意义。同样的，对路径的其他部分操作也是如此，剩下的部分会自动调整。这很美妙。"]}),"\n",(0,d.jsxs)(n.p,{children:["另外，在实际应用中，SVG 的绝对命令和相对命令是可以相互转换的。我们可以使用一些在线工具来对它们进行转换。例如：",(0,d.jsx)(n.a,{href:"https://thednp.github.io/svg-path-commander/index.html",target:"_blank",rel:"noopener noreferrer",children:"SVG Path Commander"})," 就是这样的一款工具："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eS,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["URL：",(0,d.jsx)(n.a,{href:"https://thednp.github.io/svg-path-commander/index.html",target:"_blank",rel:"noopener noreferrer",children:"https://thednp.github.io/svg-path-commander/index.html"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["你也可以使用 ",(0,d.jsx)(n.a,{href:"https://yoksel.github.io/relative-clip-path/",target:"_blank",rel:"noopener noreferrer",children:"Convert SVG absolute clip-path to relative 工具"}),"对路径进行转换："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ek,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["URL:",(0,d.jsx)(n.a,{href:"https://yoksel.github.io/relative-clip-path/",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/relative-clip-path/"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"简单地小结一下："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"<path>"})," 元素中的 ",(0,d.jsx)(n.code,{children:"d"})," 属性是一系列命令加参数"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"路径是通过按照顺序执行这些命令来绘制的"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"命令以一个单字母开，后面紧跟一个或多个数字"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"命令分绝对命令，大写字母表示的是绝对命令，小写字母表示的是相对命令，通过工具两者可以相互转换"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"关于命令的整体介绍就到这里。现在让我们深入了解不同类型的命令吧！"}),"\n",(0,d.jsxs)(n.h2,{id:"如何使用-svg-路径命令",children:["如何使用 SVG 路径命令",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何使用-svg-路径命令",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"接下来，我们开始进入实战阶段，通过具体实例来了解如何使用 SVG 的路径命令来绘制各种形状。"}),"\n",(0,d.jsxs)(n.h3,{id:"光标",children:["光标",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#光标",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"SVG 路径中的光标是一个重要概念，它代表了当前绘制的位置。在路径中，光标会随着每个路径命令的执行而移动，以确定下一个命令从何处开始绘制。光标的位置决定了路径的形状和轨迹，因此在绘制复杂图形时，正确控制光标的位置至关重要。通过移动光标，可以在 SVG 中精确地控制路径的起始点和终止点，从而绘制出各种复杂的形状和曲线。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ev,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"上图中，移动的蓝点就是 SVG 中的光标。"}),"\n",(0,d.jsx)(n.p,{children:"我们来看一个简单的示例："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5.0 5.0\n    v 5.0 \n    L 10.0 15.0\n    h 5.0"\n/>\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eM,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/bGyqjNV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGyqjNV"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"请注意上图中移动的蓝色点（它代表的就是光标）。"}),"\n",(0,d.jsxs)(n.p,{children:["通常情况下，光标最初的位置位于坐标原点 ",(0,d.jsx)(n.code,{children:"(0,0)"})," ，然后根据 SVG 的命令来改变光标的位置。在这个示例中，光标会按照下面的命令来改变位置："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["1️⃣：",(0,d.jsx)(n.code,{children:"M 5 5"})," 将光标移动到 ",(0,d.jsx)(n.code,{children:"(5,5)"})," 位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["2️⃣：",(0,d.jsx)(n.code,{children:"v 5"})," 绘制一条长度为 ",(0,d.jsx)(n.code,{children:"5"})," 的垂直线，将光标移动到 ",(0,d.jsx)(n.code,{children:"(5, 10)"})," 位置。注意，",(0,d.jsx)(n.code,{children:"v"})," 是相对命令，它相对于上一个点 ",(0,d.jsx)(n.code,{children:"(5,5)"})," 计算"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["3️⃣：",(0,d.jsx)(n.code,{children:"L 10 15"})," 绘制一条到 ",(0,d.jsx)(n.code,{children:"(10, 15)"})," 的直线，将光标移动到 ",(0,d.jsx)(n.code,{children:"(10,15)"})," 位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["4️⃣：",(0,d.jsx)(n.code,{children:"h 5"})," 绘制一条长度为 ",(0,d.jsx)(n.code,{children:"5"})," 的水平线，将光标移动到 ",(0,d.jsx)(n.code,{children:"(15,15)"})," 位置 。注意，",(0,d.jsx)(n.code,{children:"h"})," 是相对命令，它相对于上一个点 ",(0,d.jsx)(n.code,{children:"(10, 15)"})," 计算"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"最初，光标位于左上角，即原点 (0, 0)。然后，这三个命令按如下方式改变光标的位置："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"M 5 5"})," 将光标移动到 (5, 5)；"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"v 5"})," 绘制一条长度为5的垂直线，将光标移动到 (5, 10)；"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"L 10 15"})," 绘制一条到 (10, 15) 的线，将光标移动到 (10, 15)；"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"h 5"})," 绘制一条长度为5的水平线，将光标移动到 (15, 15)。"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"一般来说，光标会停留在当前路径“段”结束的位置。毕竟，大多数的时候，你还是希望路径中的各“段”能相互连接。"}),"\n",(0,d.jsxs)(n.p,{children:["当前路径“段”结束位置取决于命令是绝对的还是相对的。对于绝对命令，光标将停留在命令的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 值处。例如，上面代码中的 ",(0,d.jsx)(n.code,{children:"L 10 15"})," ，不管光标当前位于何处，它会将光标移动到 ",(0,d.jsx)(n.code,{children:"(10,15)"})," ："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5.0 5.0\n    L 10.0 15.0" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ey,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["正如你所看到的，光标将从 ",(0,d.jsx)(n.code,{children:"(5, 5)"})," 移动到 ",(0,d.jsx)(n.code,{children:"(10, 15)"}),"。"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/rNgyrWJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNgyrWJ"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["对于相对命令，光标会移动到当前光标位置加上命令的 ",(0,d.jsx)(n.code,{children:"dx"})," 和 ",(0,d.jsx)(n.code,{children:"dy"})," 值。例如，如果光标当前在 ",(0,d.jsx)(n.code,{children:"(15, 5)"}),"，那么 ",(0,d.jsx)(n.code,{children:"l 10 15"})," 会将光标移动到 ",(0,d.jsx)(n.code,{children:"(25, 20)"}),"。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 15.0 5.0\n    l 10.0 15.0" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eu,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/VwOpBpN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwOpBpN"})]}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"移动到命令m-和-m",children:["移动到命令：",(0,d.jsx)(n.code,{children:"M"})," 和 ",(0,d.jsx)(n.code,{children:"m"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#移动到命令m-和-m",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["SVG 移动到命令 ",(0,d.jsx)(n.code,{children:"M"})," 和 ",(0,d.jsx)(n.code,{children:"m"})," 是一个特殊的命令，它只移动光标不绘制任何东西。例如你在 Figma 图形编辑器，使用钢笔工具时，你可以将光标在画布中任意移动："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:em,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"移动到命令的语法格式如下："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"绝对命令  \uD83D\uDC49  M <x> <y>\n相对命令  \uD83D\uDC49  m <dx> <dy>\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"绝对命令"})," ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"M x y"})})," ：将光标移动到指定的绝对坐标位置 ",(0,d.jsx)(n.code,{children:"(x,y)"})," ，例如， ",(0,d.jsx)(n.code,{children:"M 100 100"})," 命令将光标移动到 ",(0,d.jsx)(n.code,{children:"(100,100)"})," 位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"相对命令"})," ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"m dx dy"})})," ：将光标移动到相对于当前光标位置的偏移位置，即 ",(0,d.jsx)(n.code,{children:"(x + dx, y + dy)"})," ，例如 ",(0,d.jsx)(n.code,{children:"M 50 50 m 10 20"})," ，其中 ",(0,d.jsx)(n.code,{children:"m 10 20"})," 命令将光标移动到 ",(0,d.jsx)(n.code,{children:"(60, 70)"})," 位置。"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["需要知道的是，SVG 的所有路径必须以 ",(0,d.jsx)(n.code,{children:"M"})," 或 ",(0,d.jsx)(n.code,{children:"m"})," 命令开始，以确定初始光标位置，而且在同一次路径的定义中，可以多次使用 ",(0,d.jsx)(n.code,{children:"M"})," 或 ",(0,d.jsx)(n.code,{children:"m"})," 命令来重新定位光标位置。"]}),"\n",(0,d.jsxs)(n.p,{children:["还有，",(0,d.jsx)(n.code,{children:"M"})," 和 ",(0,d.jsx)(n.code,{children:"m"})," 命令后可以跟随多个数字，例如 ",(0,d.jsx)(n.code,{children:"M x1 y1 x2 y2 ..."})," 或 ",(0,d.jsx)(n.code,{children:"m dx1 dy1 dx2 dy2 ..."})," 。此时，它会被解释为额外的直线到命令 ",(0,d.jsx)(n.code,{children:"L"})," 或 ",(0,d.jsx)(n.code,{children:"l"})," 。这意味着以下命令："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="M 10 10 20 20 30 30" />\n'})}),"\n",(0,d.jsx)(n.p,{children:"实际上等于同："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="M 10 10 L 20 20 L 30 30" />\n'})}),"\n",(0,d.jsx)(n.p,{children:"另外，如果命令参数数量不对，浏览器会忽略出错后的部分，只绘制到错误发生前的部分。这有助于调试路径命令。"}),"\n",(0,d.jsxs)(n.p,{children:["当你想绘制不相连的路径时，移动到命令 ",(0,d.jsx)(n.code,{children:"M"})," 和 ",(0,d.jsx)(n.code,{children:"m"})," 就非常有用。例如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 3.0 5.5\n    q 2.0 2.0 0.0 4.0\n    m 3.0 -6.0\n    q 4.0 4.0 0.0 8.0\n    m 3.0 -10.0\n    q 4.0 6.0 0.0 12.0"\n/>\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eb,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/RwmpBJN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwmpBJN"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["通过掌握 ",(0,d.jsx)(n.code,{children:"M"})," 和 ",(0,d.jsx)(n.code,{children:"m"})," 命令，你可以精确地控制 SVG 路径的起始位置及其后续的路径绘制。请尝试着，使用 ",(0,d.jsx)(n.code,{children:"M"})," 和 ",(0,d.jsx)(n.code,{children:"m"})," 命令，将光标移动到下图中黑圆圈所示位置："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eg,alt:""})}),"\n",(0,d.jsxs)(n.h3,{id:"直线命令l-l-h-h-v-和-v",children:["直线命令：",(0,d.jsx)(n.code,{children:"L"})," 、",(0,d.jsx)(n.code,{children:"l"})," 、",(0,d.jsx)(n.code,{children:"H"})," 、",(0,d.jsx)(n.code,{children:"h"})," 、",(0,d.jsx)(n.code,{children:"V"})," 和 ",(0,d.jsx)(n.code,{children:"v"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#直线命令l-l-h-h-v-和-v",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["现在，我们知道在画布是怎么通过 ",(0,d.jsx)(n.code,{children:"M"})," 或 ",(0,d.jsx)(n.code,{children:"m"})," 命令将光标移动到所需要的位置。接下来，我们开始使用路径的命令来绘制图形。先从最简单的直线开始。"]}),"\n",(0,d.jsxs)(n.p,{children:["众所周知，任意两点相连就能构成一条直线，例如点 ",(0,d.jsx)(n.code,{children:"P1"})," 和 ",(0,d.jsx)(n.code,{children:"P2"})," 相连就构建了一条直线："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ef,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["假设 ",(0,d.jsx)(n.code,{children:"P1"})," 点的坐标是 ",(0,d.jsx)(n.code,{children:"(5,5)"}),"，",(0,d.jsx)(n.code,{children:"P2"})," 点的坐标是 ",(0,d.jsx)(n.code,{children:"(15,10)"})," 。现在，我们需要使用路径命令来绘制这条直线。"]}),"\n",(0,d.jsxs)(n.p,{children:["首先，使用 ",(0,d.jsx)(n.code,{children:"M"})," 或 ",(0,d.jsx)(n.code,{children:"m"})," 命令将光标移动到 ",(0,d.jsx)(n.code,{children:"P1"})," 点："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5 5\n" />\n'})}),"\n",(0,d.jsxs)(n.p,{children:["注意，",(0,d.jsx)(n.code,{children:"M"})," 命令只是移动光标，它不会绘制任何内容，所以在画布上看不到任何图形。但是，为了更好的向大家展示，",(0,d.jsx)(n.code,{children:"M 5 5"})," 已将光标移动到了 ",(0,d.jsx)(n.code,{children:"P1"})," 点位置，我使用其他元素在画布中将其标注出来了。我要强调的是，",(0,d.jsx)(n.code,{children:'<path d="M 5 5" />'})," 并不会在画布上显示。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ep,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["要想通过路径绘制出直线，还是需要使用直线命令，它可以绘制从当前位置（",(0,d.jsx)(n.code,{children:"P1"}),"）到指定位置（",(0,d.jsx)(n.code,{children:"P2"})," ）的直线。直线命令包括 ",(0,d.jsx)(n.code,{children:"L"})," （",(0,d.jsx)(n.code,{children:"l"}),"）、",(0,d.jsx)(n.code,{children:"H"})," （",(0,d.jsx)(n.code,{children:"h"}),"）和 ",(0,d.jsx)(n.code,{children:"V"})," （",(0,d.jsx)(n.code,{children:"v"}),"）。"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"L x y"})," ：从当前光标位置绘制一条直线到指定的绝对坐标位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"H x"})," ：从当前光标位置绘制一条水平线到指定的 ",(0,d.jsx)(n.code,{children:"x"})," 坐标位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"V y"})," ：从当前光标位置绘制一条垂直线到指定的 ",(0,d.jsx)(n.code,{children:"y"})," 坐标位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"l dx dy"})," ：从当前光标位置绘制一条直线到相对于当前光标位置的偏移位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"h dx"})," ：从当前光标位置绘制一条水平线到相对于当前光标位置的 ",(0,d.jsx)(n.code,{children:"x"})," 坐标偏移位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"v dy"})," ：从当前光标位置绘制一条垂直线到相对于当前光标位置的 ",(0,d.jsx)(n.code,{children:"y"})," 坐标偏移位置"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["其中最通用的是 ",(0,d.jsx)(n.code,{children:"L"})," 命令，它将一条直线绘制到特定的 ",(0,d.jsx)(n.code,{children:"(x,y)"})," 坐标。例如，上面未绘制完成的示例，现在可以使用 ",(0,d.jsx)(n.code,{children:"L"})," 命令，绘制 ",(0,d.jsx)(n.code,{children:"P1"})," 点到 ",(0,d.jsx)(n.code,{children:"P2"})," 点之间的直线："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5 5\n    L 15 10" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:et,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/XWwMBwo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWwMBwo"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["就像 ",(0,d.jsx)(n.code,{children:"m"})," 命令相对于当前位置移动光标一样，我们也可以使用小写字母 ",(0,d.jsx)(n.code,{children:"l"})," 命令绘制出 ",(0,d.jsx)(n.code,{children:"P1P2"})," 相连的直线，只不过 ",(0,d.jsx)(n.code,{children:"l"})," 命令绘制一条相当于当前光标位置的直线："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'\x3c!-- 绝对命令 --\x3e\n<path d="\n    M 5 5\n    L 15 10" stoke="rgb(0 145 255) " />\n    \n\x3c!-- 相对命令绘制 --\x3e\n<path d="\n    M 5 5\n    l 10 5" stoke="rgb(10 145 255 / .5) " />\n    \n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ea,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["你会发现，这个时候两条直线完全重叠在一起。注意，上面代码中的 ",(0,d.jsx)(n.code,{children:"l 10 5"})," 是一个相对命令，它相对于 ",(0,d.jsx)(n.code,{children:"M 5 5"})," 来计算 ",(0,d.jsx)(n.code,{children:"P2"})," 点的位置，即 ",(0,d.jsx)(n.code,{children:"x' = x + dx = 10 + 5"})," ，",(0,d.jsx)(n.code,{children:"y' = y + dy = 5 + 5"})," 。"]}),"\n",(0,d.jsxs)(n.p,{children:["如果使用 ",(0,d.jsx)(n.code,{children:"l"})," 命令绘制直线时，后面紧跟的参数不改变的话，它将绘制出另一条直线："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'\x3c!-- 绝对命令 --\x3e\n<path d="\n    M 5 5\n    L 15 10" stoke="rgb(0 145 255) " />\n    \n\x3c!-- 相对命令绘制 --\x3e\n<path d="\n    M 5 5\n    l 15 10" stoke="rgb(10 145 255 / .5) " />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eo,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/wvbJEJp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvbJEJp"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["你可以使用 ",(0,d.jsx)(n.code,{children:"H"})," 和 ",(0,d.jsx)(n.code,{children:"V"})," 命令在特定方向上绘制直线。",(0,d.jsx)(n.code,{children:"H"})," 绘制水平线，而 ",(0,d.jsx)(n.code,{children:"V"})," 绘制垂直线："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 13.0 5.0\n    h -6.0\n    V 15.0\n    H 13.0\n    M 7.0 10.0\n    h 4.0" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ej,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/NWVpLgM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWVpLgM"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"上面示例仅仅是展示了如何使用直线命令来绘制直线。"}),"\n",(0,d.jsx)(n.p,{children:"你也可以在同一条路径中组合使用多个直线命令和其他路径命令来绘制复杂的图形。例如下面的示例，我们使用多个移动命令和直线命令绘制了几个我们常用的 Icon 图标。例如，“汉堡图标”、剪头图标、关闭图标等："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5 5 h 7\n    M 5 8 h 7\n    M 5 11 h 7" fill="none" stroke="#fff" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" />\n\n<path d="\n    M 20 5 \n    l 4 6 \n    l 4 -6" fill="none" stroke="#fff" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" />\n\n<path d="\n    M 36 11 \n    l 4 -6 \n    l 4 6" fill="none" stroke="#fff" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" />\n\n<path d="\n    M 5 20 \n    l 7 3 \n    l -7 3" fill="none" stroke="#fff" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" />\n\n<path d="\n    M 27 20 \n    l -7 3 \n    l 7 3" fill="none" stroke="#fff" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" />\n    \n<path d="\n    M 37 20 \n    l 6 6 M 43 20 \n    l -6 6" fill="none" stroke="#fff" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" />\n    \n<path d="\n    M 5 40 \n    L 20 40 \n    L 15 35 \n    M 20 40 L 15 45" fill="none" stroke="#fff" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" />\n\n<path d="\n    M 45 40 \n    h -12 \n    l 5 -5 \n    m -5 5 \n    l 5 5 " fill="none" stroke="#fff" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ex,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"正如你所看到的，我们使用简单的几个命令就可以绘制出常见的一些图标。它与一些平台的的 SVG 图标相比，数据要简单的多，以“汉堡图标”为例，大多数平台导出来 SVG 代码如下："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">\n    <path d="M0 96C0 78.3 14.3 64 32 64H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 128 0 113.7 0 96zM0 256c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z"/>\n</svg>\n'})}),"\n",(0,d.jsx)(n.p,{children:"对比一下，自己使用路径命令绘制的汉堡图标："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<svg>\n    <path d="M 5 5 h 7 M 5 8 h 7 M 5 11 h 7" />\n</svg>    \n'})}),"\n",(0,d.jsxs)(n.p,{children:["我想你现在应该知道如何使用直线命令了。想象一下，你现在可以使用已熟悉的直线命令，绘制出直线（",(0,d.jsx)(n.code,{children:"<line>"}),"）、矩形（",(0,d.jsx)(n.code,{children:"<rect>"}),"）、折线（",(0,d.jsx)(n.code,{children:"<polyline>"}),"）和多边形（",(0,d.jsx)(n.code,{children:"<polygon>"}),"）等元素可绘制的任何形状。"]}),"\n",(0,d.jsxs)(n.h3,{id:"关闭命令z-和-z",children:["关闭命令：",(0,d.jsx)(n.code,{children:"Z"})," 和 ",(0,d.jsx)(n.code,{children:"z"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#关闭命令z-和-z",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在 SVG 路径命令中，关闭命令用于将当前路径的终点与起点连接起来，从而形成一个闭合的图形。这个命令在绘制多边形、封闭曲线等形状时非常有用。关闭命令有两种形式：",(0,d.jsx)(n.code,{children:"Z"})," 和 ",(0,d.jsx)(n.code,{children:"z"}),"，它们的功能是相同的，都是将路径闭合。有趣的是，由于它不接受任何参数，所以在功能上 ",(0,d.jsx)(n.code,{children:"Z"})," 和 ",(0,d.jsx)(n.code,{children:"z"})," 没有区别。"]}),"\n",(0,d.jsx)(n.p,{children:"如果我告诉你，关闭命令是最后一种线条命令，你是不是会感到很惊讶，它怎么就变成一种线条命令了呢？原因很简单，因为关闭路径的主要功能是将一条直线从当前光标位置绘制到路径的起点，从而使路径成为一个闭合的形状。"}),"\n",(0,d.jsxs)(n.p,{children:["例如，假设你正在使用 ",(0,d.jsx)(n.code,{children:"<path>"})," 来绘制一个三角形。你可能会使用直线命令，你可能会使用直线命令绘制三条直线拼接而成。例如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 10.0 5.0 \n    l -5.0 10.0 \n    h 10.0 \n    l -5.0 -10.0" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:eh,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/pomexLj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/pomexLj"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["事实上，对于三角形而言，我们只需要绘制两条直线，然后通过使用 ",(0,d.jsx)(n.code,{children:"Z"})," 命令来自动关闭路径，它会从光标当前位置与路径起点连接起来成为一条直线，而不是像上面代码那样，显式地使用一条直线命令来关闭形状："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 10.0 5.0\n    l -5.0 10.0\n    h 10.0\n    Z" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ei,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbZJRJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbZJRJ"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"有趣的是，即使光标已经回到路径的起点位置，关闭命令也会“关闭”路径。例如下面这个“心形”图形："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 11.995 7.23319\n    C 10.5455 5.60999 8.12832 5.17335 6.31215 6.65972\n    C 4.4959 8.14609 4.2403 10.6312 5.66654 12.3892\n    L 11.995 18.25\n    L 18.3235 12.3892\n    C 19.7498 10.6312 19.5253 8.13046 17.6779 6.65972\n    C 15.8305 5.18899 13.4446 5.60999 11.995 7.23319" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:el,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/pomexGb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/pomexGb"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["请注意，在上面这个示例中，心形开始位置（红色光标点）和结束点位置（蓝色光标点）在同一个位置。这是否意味着，不需要使用关闭命令 ",(0,d.jsx)(n.code,{children:"Z"})," 来关闭图形呢？"]}),"\n",(0,d.jsx)(n.p,{children:"请仔细观察，这个心形图形有一个小小的问题，如果我们将心形图形放大，很容易发现起点和结束曲线相交的地方有一个小小的缺口："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:er,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["我们可能通过在路径的末尾添加 ",(0,d.jsx)(n.code,{children:"Z"})," 命令来关闭图形，使这个点起来更平滑："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 11.995 7.23319\n    C 10.5455 5.60999 8.12832 5.17335 6.31215 6.65972\n    C 4.4959 8.14609 4.2403 10.6312 5.66654 12.3892\n    L 11.995 18.25\n    L 18.3235 12.3892\n    C 19.7498 10.6312 19.5253 8.13046 17.6779 6.65972\n    C 15.8305 5.18899 13.4446 5.60999 11.995 7.23319\n    Z" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:es,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/GRaWwKa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRaWwKa"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["注意，尽管这里使用了 ",(0,d.jsx)(n.code,{children:"Z"})," 命令，但并不会添加新的线条（起点和终点都在同一个点），但它会告诉浏览器路径是“闭合的”，从而使其能够正确的绘制路径。"]}),"\n",(0,d.jsxs)(n.h3,{id:"曲线命令",children:["曲线命令",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#曲线命令",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"SVG 路径真正的威力在于能够绘制复杂的曲线。使用 SVG 路径可以绘制三种类型的曲线：二次贝塞尔曲线、三次贝塞尔曲线和弧线。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ed,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"上图从上往下依次对应的是 SVG 路径绘制的二次贝塞尔曲线、三次贝塞尔曲线和弧线。"}),"\n",(0,d.jsx)(n.p,{children:"SVG 路径分别为这三种曲线提供了不同的命令："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["绘制二次贝塞尔曲线的路径命令有 ",(0,d.jsx)(n.code,{children:"Q"})," （",(0,d.jsx)(n.code,{children:"q"}),"）和 ",(0,d.jsx)(n.code,{children:"T"})," （",(0,d.jsx)(n.code,{children:"t"}),"）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["绘制三次贝塞尔曲线的路径命令有 ",(0,d.jsx)(n.code,{children:"C"})," （",(0,d.jsx)(n.code,{children:"c"}),"）和 ",(0,d.jsx)(n.code,{children:"S"})," （",(0,d.jsx)(n.code,{children:"s"}),"）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["绘制弧线的路径命令有 ",(0,d.jsx)(n.code,{children:"A"})," 和 ",(0,d.jsx)(n.code,{children:"a"})]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"我们将把这些讨论分为三部分，先从二次贝塞尔曲线开始。但是在开始之前，有必要向大家介绍一下贝塞尔曲线。"}),"\n",(0,d.jsxs)(n.h4,{id:"贝塞尔曲线的基本原理",children:["贝塞尔曲线的基本原理",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#贝塞尔曲线的基本原理",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ec,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["众所周知，直线只由起点（",(0,d.jsx)(n.code,{children:"P1"}),"）和终点（",(0,d.jsx)(n.code,{children:"P2"}),"）定义，但贝塞尔曲线除了起点和终点之外，还由一个或多个控制点定义。贝塞尔曲线方程的次数或最高指数决定了控制点的数量。顾名思义，二次贝塞尔曲线的次数为 ",(0,d.jsx)(n.code,{children:"2"})," （共 ",(0,d.jsx)(n.code,{children:"3"})," 点，即起点、终点和控制点），三次贝塞尔曲线的次数为 ",(0,d.jsx)(n.code,{children:"3"})," （共 ",(0,d.jsx)(n.code,{children:"4"})," 个点，即起点、终点和两个控制点）。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:en,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"在连接的贝塞尔曲线中，通常会有两个手柄从一个控制点延伸出来。这些手柄可以精确控制曲线的方向。贝塞尔手柄的角度和长度可以是镜像的、不对称的，甚至是断开的，用来定义所需的形状。每种模式都会导致连接点的不同行为。诸如 Sketch 和 Figma 等设计工具提供了在这些手柄模式之间切换的灵活性，使用户能够快速创建更复杂的形状和图案。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:ee,alt:""})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"当手柄是镜像模式时，其角度和长度始终是对称的，这样可以使连接的曲线在大多数情况下保持平滑"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"当手柄是非对称模式时，手柄的角度保持不变，但长度可以变化，从而允许创建更具动态的形状"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"当手柄是断开模式时，手柄可以独立移动，从而在创建复杂曲线和形状时提供更大的灵活性和精确度"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"另外，贝塞尔曲线上的控制点越多，曲线就越复杂。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:$,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"正如你所看到的，三次贝塞尔曲线（上图中下方的曲线）相比于二次贝塞尔曲线（上图中上方的曲线），在形状上有更多的自由度。"}),"\n",(0,d.jsx)(n.p,{children:"我觉得你现在对贝塞尔曲线已经有了一些了解，但其实贝塞尔曲线背后有一整套严谨的数学原理支撑着。在这里，我会尽量以简单的方式解释这些数学原理，让大家对贝塞尔曲线的工作方式有一个更全面、更深入的理解，为接下来学习 SVG 路径命令中的贝塞尔曲线打下基础。"}),"\n",(0,d.jsx)(n.p,{children:"之前我们提到过，贝塞尔曲线是由一组控制点定义的曲线。我们可以从最简单的形式开始探索贝塞尔曲线，以理解这些“控制点”的作用，然后逐渐深入，了解更复杂的三次贝塞尔曲线。"}),"\n",(0,d.jsxs)(n.p,{children:["我们考虑两个不同的点 ",(0,d.jsx)(n.code,{children:"P0"})," 和 ",(0,d.jsx)(n.code,{children:"P1"})," ，以及另一个位于它们之间的点 ",(0,d.jsx)(n.code,{children:"P"})," 。在这种情况下，",(0,d.jsx)(n.code,{children:"P0"})," 和 ",(0,d.jsx)(n.code,{children:"P1"})," 是曲线的控制点，而 ",(0,d.jsx)(n.code,{children:"P"})," 是在它们之间移动的点。我们可以用一个介于 ",(0,d.jsx)(n.code,{children:"0"})," 和 ",(0,d.jsx)(n.code,{children:"1"})," 之间的值 ",(0,d.jsx)(n.code,{children:"t"})," 来定义 ",(0,d.jsx)(n.code,{children:"P"})," 的位置，类似于百分比："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["如果 ",(0,d.jsx)(n.code,{children:"t = 1"})," ，",(0,d.jsx)(n.code,{children:"P"})," 将移动到 ",(0,d.jsx)(n.code,{children:"P1"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["如果 ",(0,d.jsx)(n.code,{children:"t = 0"})," ，",(0,d.jsx)(n.code,{children:"P"})," 将移动到 ",(0,d.jsx)(n.code,{children:"P0"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["介于 ",(0,d.jsx)(n.code,{children:"0"})," 和 ",(0,d.jsx)(n.code,{children:"1"})," 之间的任何值都将是 ",(0,d.jsx)(n.code,{children:"P0"})," 和 ",(0,d.jsx)(n.code,{children:"P1"})," 的“混合”"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:I,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["如上图所示，其中 ",(0,d.jsx)(n.code,{children:"P0"})," 和 ",(0,d.jsx)(n.code,{children:"P1"})," 位于曲线的两端，而 ",(0,d.jsx)(n.code,{children:"P"})," 是在它们之间移动的蓝点。你会看到 ",(0,d.jsx)(n.code,{children:"t"})," 越接近 ",(0,d.jsx)(n.code,{children:"1"})," ，",(0,d.jsx)(n.code,{children:"P"})," 距离曲线的末端（",(0,d.jsx)(n.code,{children:"P1"}),"）就越近。"]}),"\n",(0,d.jsxs)(n.p,{children:["这被称为“线性插值”。在线性插值的情况下，我们可以使用下面这个公式计算出 ",(0,d.jsx)(n.code,{children:"P"})," 的位置："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"P = (1 - t) \xd7 P0 + t \xd7 P1\n"})}),"\n",(0,d.jsxs)(n.p,{children:["你可以尝试将 ",(0,d.jsx)(n.code,{children:"t"})," 替换为 ",(0,d.jsx)(n.code,{children:"0"})," 或 ",(0,d.jsx)(n.code,{children:"1"})," ，其计算出来的结果将会与上面描述的结果一样："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"t = 0\nP = (1 - t) \xd7 P0 + t \xd7 P1 = (1 - 0) \xd7 P0 + 0 \xd7 P1 = P0 \uD83D\uDC49 P 移动到 P0\n\nt = 1\nP = (1 - t) \xd7 P0 + t \xd7 P1 = (1 - 1) \xd7 P0 + 1 \xd7 P1 = P1 \uD83D\uDC49 P 移动到 P1\n"})}),"\n",(0,d.jsxs)(n.p,{children:["现在，我们再添加一个点 ",(0,d.jsx)(n.code,{children:"P2"})," ！这样就可以有两个插值点，分别在每个线段之间移动，即分别沿着 ",(0,d.jsx)(n.code,{children:"P0 \uD83D\uDC49 P1"})," 和 ",(0,d.jsx)(n.code,{children:"P1 \uD83D\uDC49 P2"})," 移动。如果我们用一条线段连接这两个点（下图中红色点），并在其上也放置一个插值（蓝色点），我们将得到一些非常有趣的东西："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:U,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["你会看到蓝点沿着一条类似曲线的路径移动。这个特定的路径称为二次贝塞尔曲线。我们可以通过一些数学知识，推导出给定时间 ",(0,d.jsx)(n.code,{children:"t"})," 时蓝点位置的方程式。"]}),"\n",(0,d.jsx)(n.p,{children:"首先，我们使用上面的公式分解红点的位置。这两个红点的位置可以被描述为两个不同的线性插值："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"A = (1 - t) \xd7 P0 + t \xd7 P1\nB = (1 - t) \xd7 P1 + t \xd7 P2\n"})}),"\n",(0,d.jsxs)(n.p,{children:["我们也可以描述蓝点的位置，但这次是在点 ",(0,d.jsx)(n.code,{children:"A"})," 和点 ",(0,d.jsx)(n.code,{children:"B"})," 之间进行线性插值："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"P = (1 - t) \xd7 A + t \xd7 B\n"})}),"\n",(0,d.jsxs)(n.p,{children:["然后，我们替换 ",(0,d.jsx)(n.code,{children:"A"})," 和 ",(0,d.jsx)(n.code,{children:"B"})," ："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"P = (1 - t) \xd7 ((1 - t) \xd7 P0 + t \xd7 P1) + t \xd7 ((1 - t) \xd7 P1 + t \xd7 P2)\n  = (1 - t) \xd7 (1 - t) \xd7 P0 + (1 - t) \xd7 t \xd7 P1 + t \xd7 (1 - t) \xd7 P1 + t \xd7 t \xd7 P2\n"})}),"\n",(0,d.jsx)(n.p,{children:"我们将得到二次贝塞尔曲线的公式："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:K,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["基于上面这个公式，我们可以编写 JavaScript 脚本来获取蓝点移动时每个位置的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 坐标值，并以每秒 ",(0,d.jsx)(n.code,{children:"60"})," 帧的速度在 ",(0,d.jsx)(n.code,{children:"1s"})," 内绘制出上面的曲线："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-JavaScript",children:"const quadratic = (P0, P1, P2) => {\n    const x0 = P0.x;\n    const y0 = P0.y;\n    const x1 = P1.x;\n    const y1 = P1.y;\n    const x2 = P2.x;\n    const y2 = P2.y;\n\n    const x = (t) => Math.pow(1 - t, 2) * x0 + 2 * (1 - t) * t * x1 + Math.pow(t, 2) * x2;\n    const y = (t) => Math.pow(1 - t, 2) * y0 + 2 * (1 - t) * t * y1 + Math.pow(t, 2) * y2;\n  \n    const res = [];\n\n    // 以每秒 60 帧持续 15 秒的速度获得所有的过渡点\n    for (let t = 0; t <= 1; t = t + 1 / 60) {\n        const valX = x(t);\n        const valY = y(t);\n        \n        res.push({ \n            x: valX, \n            y: valY \n        });\n    }\n\n    res.push({ x: 1, y: 0 });\n\n    return res;\n};\n"})}),"\n",(0,d.jsxs)(n.p,{children:["接着再添加第四个点。此时，我们有四个控制点，它们分别是 ",(0,d.jsx)(n.code,{children:"P0"})," 、",(0,d.jsx)(n.code,{children:"P1"})," 、",(0,d.jsx)(n.code,{children:"P2"})," 和 ",(0,d.jsx)(n.code,{children:"P3"})," ，这样我们就可以按照前面的过程来添加插值点。"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["首先在连接四个点的每一段线（即 ",(0,d.jsx)(n.code,{children:"P0 \uD83D\uDC49 P1"})," 、",(0,d.jsx)(n.code,{children:"P1 \uD83D\uDC49 P2"})," 和 ",(0,d.jsx)(n.code,{children:"P2 \uD83D\uDC49 P3"}),"）之间添加一个插值点（如下图中的红点所示）。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"然后将三个红点（插值点）连接起来，将会得到两条新线段，并在新获得的每个线段上定义一个新的插值点（如下图中的绿点所示）。"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"按同样的方式，再次连接绿点，将得到一条新线段，并在该线段上定义一个新的插值点（如下图中蓝点所示）："}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:F,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"图中的三个红点的位置可以被描述为三个不同的线性插值："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"A = (1 - t) \xd7 P0 + t \xd7 P1\nB = (1 - t) \xd7 P1 + t \xd7 P2\nC = (1 - t) \xd7 P2 + t \xd7 P3\n"})}),"\n",(0,d.jsxs)(n.p,{children:["我们可以使用 ",(0,d.jsx)(n.code,{children:"A"})," 、",(0,d.jsx)(n.code,{children:"B"})," 和 ",(0,d.jsx)(n.code,{children:"C"})," 来描述图中绿点的插值 ",(0,d.jsx)(n.code,{children:"D"})," 和 ",(0,d.jsx)(n.code,{children:"E"})," ："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"D = (1 - t) \xd7 A + t \xd7 B\nE = (1 - t) \xd7 B + t \xd7 C\n"})}),"\n",(0,d.jsxs)(n.p,{children:["再使用 ",(0,d.jsx)(n.code,{children:"D"})," 和 ",(0,d.jsx)(n.code,{children:"E"})," 来描述蓝点："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"P = (1 - t) \xd7 D + t \xd7 E\n"})}),"\n",(0,d.jsxs)(n.p,{children:["将上面公式中的 ",(0,d.jsx)(n.code,{children:"D"})," 和 ",(0,d.jsx)(n.code,{children:"E"})," 替换成 ",(0,d.jsx)(n.code,{children:"A"})," 、",(0,d.jsx)(n.code,{children:"B"})," 和 ",(0,d.jsx)(n.code,{children:"C"})," ："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"P = (1 - t) \xd7 ((1 - t) \xd7 A + t \xd7 B) + t \xd7 ((1 - t) \xd7 B + t \xd7 C)\n  = (1 - t) \xd7 (1 - t) \xd7 A + (1 - t) \xd7 t \xd7 B) + t \xd7 (1 - t) \xd7 B + t \xd7 t \xd7 C\n  = (1 - t) \xd7 (1 - t) \xd7 A  + 2 \xd7 (1 - t) \xd7 t \xd7 B + t \xd7 t \xd7 C\n"})}),"\n",(0,d.jsxs)(n.p,{children:["继续将 ",(0,d.jsx)(n.code,{children:"A"})," 、",(0,d.jsx)(n.code,{children:"B"})," 和 ",(0,d.jsx)(n.code,{children:"C"})," 替换掉："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"P = (1 - t) \xd7 (1 - t) \xd7 ((1 - t) \xd7 P0 + t \xd7 P1)  + 2 \xd7 (1 - t) \xd7 t \xd7 ((1 - t) \xd7 P1 + t \xd7 P2) + t \xd7 t \xd7 ((1 - t) \xd7 P2 + t \xd7 P3)\n  = (1 - t) \xd7 (1 - t) \xd7 (1 - t) \xd7 P0 + (1 - t) \xd7 (1 - t) \xd7 t \xd7 P1 + 2 \xd7 (1 - t) \xd7 t \xd7 (1 - t) \xd7 P1 + 2 \xd7 ( 1 - t) \xd7 t \xd7 t \xd7 P2 + t \xd7 t \xd7 (1 - t) \xd7 P2 + t \xd7 t \xd7 t \xd7 P3\n  = (1 - t) \xd7 (1 - t) \xd7 (1 - t) \xd7 P0 + 3 \xd7 (1 - t) \xd7 (1 - t) \xd7 t \xd7 P1 + 3 \xd7 (1 - t) \xd7 t \xd7 t \xd7 P2 + t \xd7 t \xd7 t \xd7 P3\n"})}),"\n",(0,d.jsx)(n.p,{children:"这样就获得三次贝塞尔曲线的计算公式："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:O,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["和二次贝塞尔曲线一样，使用 JavaScript 可以获取三次贝塞尔曲线上蓝点位置移动时每个点的 ",(0,d.jsx)(n.code,{children:"x"})," 和 ",(0,d.jsx)(n.code,{children:"y"})," 坐标，并以每秒 ",(0,d.jsx)(n.code,{children:"60"})," 帧的速度在 ",(0,d.jsx)(n.code,{children:"1s"})," 内绘制出上面的曲线："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-JavaScript",children:"const cubic = (P0, P1, P2, P3) => {\n    const x0 = P0.x;\n    const y0 = P0.y;\n    const x1 = P1.x;\n    const y1 = P1.y;\n    const x2 = P2.x;\n    const y2 = P2.y;\n    const x3 = P3.x;\n    const y3 = P3.y;\n\n    const y = (t) => Math.pow(1 - t, 3) * y0 + 3 * Math.pow(1 - t, 2) * t * y1 + 3 * (1 - t) * Math.pow(t, 2) * y2 + Math.pow(t, 3) * y3;\n    const x = (t) => Math.pow(1 - t, 3) * x0 + 3 * Math.pow(1 - t, 2) * t * x1 + 3 * (1 - t) * Math.pow(t, 2) * x2 + Math.pow(t, 3) * x3;\n\n    const res = [];\n  \n    for (let t = 0; t <= 1; t = t + 1 / 60) {\n        const valX = x(t);\n        const valY = y(t);\n        res.push({ x: valX, y: valY });\n    }\n  \n    res.push({ x: 1, y: 0 });\n    return res;\n};\n"})}),"\n",(0,d.jsx)(n.p,{children:"这就是贝塞尔曲线背后的数学原理。"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["注意，贝塞尔曲线是 Web 前端必须掌握的一个技术点。它不仅仅用于 SVG 路径命令中，它还用于 Web 动画的缓动函数中。这里仅介绍了贝塞尔曲线最基础的部分，人个强烈建议你花点时间阅读《",(0,d.jsx)(n.a,{href:"https://jamie-wong.com/post/bezier-curves/",target:"_blank",rel:"noopener noreferrer",children:"Bezier Curves from the Ground Up"}),"》、《",(0,d.jsx)(n.a,{href:"https://pomax.github.io/bezierinfo/",target:"_blank",rel:"noopener noreferrer",children:"A Primer on B\xe9zier Curves"}),"》和《",(0,d.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/B%C3%A9zier_curve",target:"_blank",rel:"noopener noreferrer",children:"B\xe9zier curve"}),"》，进一步深入的理解贝塞尔曲线相关的知识，这有助于你更好的应用于构建丰富的交互式组件，打开创造性的可能，激发你创作出更多有趣和丰富的作品。"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"现在，我们把注意力重新拉回到 SVG 的路径命令中来。"}),"\n",(0,d.jsxs)(n.h4,{id:"二次贝塞尔曲线命令q-q和-t-t",children:["二次贝塞尔曲线命令：",(0,d.jsx)(n.code,{children:"Q"})," （",(0,d.jsx)(n.code,{children:"q"}),"）和 ",(0,d.jsx)(n.code,{children:"T"})," （",(0,d.jsx)(n.code,{children:"t"}),"）",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二次贝塞尔曲线命令q-q和-t-t",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["虽然三次贝塞尔曲线更灵活，但二次贝塞尔曲线更容易书写，因此在不需要额外形状时更可取。SVG 路径命令中的二次贝塞尔曲线命令使用 ",(0,d.jsx)(n.code,{children:"Q"})," 和 ",(0,d.jsx)(n.code,{children:"q"})," 表示。它允许在 SVG 路径中绘制二次贝塞尔曲线，这种曲线由两个点控制，一个是控制点，另一个是结束点。其中控制点用来确定起点和终点的曲线斜率。因此，它需要两组参数，控制点和终点坐标："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"Q controlX controlY endX endY\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"controlX"})," 和 ",(0,d.jsx)(n.code,{children:"controlY"})," 是控制点的绝对坐标"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"endX"})," 和 ",(0,d.jsx)(n.code,{children:"endY"})," 是二次贝塞尔曲线的结束点的绝对坐标"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["注意，在这里你可能会感到疑惑。二次贝塞尔曲线不是由三个点：起点（",(0,d.jsx)(n.code,{children:"P0"}),"）、终点（",(0,d.jsx)(n.code,{children:"P2"}),"）和控制点（",(0,d.jsx)(n.code,{children:"P1"}),"）组成吗？怎么这里就变成由两个点控制呢？其实很简单，在 SVG 路径中，使用二次贝塞尔命令绘制曲线时，起点是由 ",(0,d.jsx)(n.code,{children:"M"})," 或 ",(0,d.jsx)(n.code,{children:"m"})," 命令决定，二次贝塞尔曲线则是由控制点 ",(0,d.jsx)(n.code,{children:"(controlX, controlY)"})," 和终点 ",(0,d.jsx)(n.code,{children:"(endX,endY)"})," 来控制。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:J,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["当你改变 ",(0,d.jsx)(n.code,{children:"Q"})," 命令控制点和终点位置时，将得到不同形状的曲线："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:R,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"我们来看一个简单的示例，使用二次贝塞尔命令创建一个圆角："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5.0 0.0\n    v 5.0\n    Q 5.0 15.0 15.0 15.0\n    h 5.0" />\n'})}),"\n",(0,d.jsx)(n.p,{children:"简单解释一下上面的代码："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["1️⃣：",(0,d.jsx)(n.code,{children:"M 5.0 0.0"})," 将光标移动到 ",(0,d.jsx)(n.code,{children:"(5.0,0.0)"})," 位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["2️⃣：",(0,d.jsx)(n.code,{children:"v 5.0"})," 绘制一条垂直直线到 ",(0,d.jsx)(n.code,{children:"(5.0,5.0)"})," 位置，该点也是二次贝塞尔曲线的起点位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["3️⃣：",(0,d.jsx)(n.code,{children:"Q 5.0 15.0 15.0 15.0"})," 绘制一条曲线，其中控制点位置是 ",(0,d.jsx)(n.code,{children:"(5.0, 15.0)"})," ，终点位置是 ",(0,d.jsx)(n.code,{children:"(15.0, 15.0)"})," 。这条二次贝塞尔曲线的起点 ",(0,d.jsx)(n.code,{children:"P0 = (5.0,5.0)"})," 、控制点 ",(0,d.jsx)(n.code,{children:"P1 =(5.0,15.0)"})," 和终点 ",(0,d.jsx)(n.code,{children:"P2=(15.0,15.0)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["4️⃣：",(0,d.jsx)(n.code,{children:"h 5.0"})," 绘制一条水平直线到 ",(0,d.jsx)(n.code,{children:"(20.0, 15.0)"})," 位置"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"最终绘制的图形如下图所示："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:H,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/OJYprYE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJYprYE"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"掌握了这个命令之后，就可以使用它来绘制内凹角："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<<path d="\n    M 5.0 8.0\n    v 9.0\n    q 3 0 3 3\n    h 9.0 \n    q 0 -3 3 -3 \n    v -9 q -3 0 -3 -3 \n    h -9 q 0 3 -3 3 \n    z" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:W,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/jOoBoyg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOoBoyg"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["绘制出来的内凹角图形，就可以结合前面所介绍的",(0,d.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7362748816769941540",target:"_blank",rel:"noopener noreferrer",children:"剪切"}),"和",(0,d.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423813296165",target:"_blank",rel:"noopener noreferrer",children:"遮罩"}),"特性，将其应用于实际生产中："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'<div class="card">\n    <img src="http://i.pravatar.cc/500?img=7" alt="">\n    <h3>SVG Awesome</h3>\n</div>\n\n<svg class="mask" width="0" height="0" style="position: absolute">\n    <mask id="mask" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n        <path d="M0,0.2 V0.8 Q0.2,0.8,0.2,1 H0.8 Q0.8,0.8,1,0.8 V0.2 Q0.8,0.2,0.8,0 H0.2 Q0.2,0.2,0,0.2" fill="#fff" />\n    </mask>\n</svg>\n'})}),"\n",(0,d.jsxs)(n.p,{children:["注意，代码中的 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,d.jsx)(n.code,{children:"d"})," 属性值是使用了",(0,d.jsx)(n.a,{href:"https://yoksel.github.io/relative-clip-path/",target:"_blank",rel:"noopener noreferrer",children:"路径转换工具"}),"，将路径所有坐标转换为用户对象框坐标范围呢（即 ",(0,d.jsx)(n.code,{children:"[0,]"}),"）。具体原因，在",(0,d.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7362748816769941540",target:"_blank",rel:"noopener noreferrer",children:"剪切"}),"和",(0,d.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423813296165",target:"_blank",rel:"noopener noreferrer",children:"遮罩"}),"有介绍过，这里不重复阐述："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:T,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["URL:",(0,d.jsx)(n.a,{href:"https://yoksel.github.io/relative-clip-path/",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/relative-clip-path/"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["接下来，将 ",(0,d.jsx)(n.code,{children:"<mask>"})," 定义的遮罩用于 ",(0,d.jsx)(n.code,{children:".card"})," 元素："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".card {\n    mask: url(#mask);\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:["浏览器呈现给你的卡片就是你使用 ",(0,d.jsx)(n.code,{children:"<path>"})," 路径命令绘制的内凹角形状："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:Y,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/OJYpYBY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJYpYBY"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"请继续！"}),"\n",(0,d.jsx)(n.p,{children:"假设你现在需要绘制多个连续的二次贝塞尔曲线："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:D,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/rNgygEw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNgygEw"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["你可能会想到连续使用多个 ",(0,d.jsx)(n.code,{children:"Q"})," 命令来绘制，例如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5.0 5.0\n    Q 5 10 10 10\n    Q 15 10 15 15" />\n'})}),"\n",(0,d.jsxs)(n.p,{children:["虽然这样也可以，但有一种更简单的方法——使用 ",(0,d.jsx)(n.code,{children:"T"})," 或 ",(0,d.jsx)(n.code,{children:"t"})," 命令。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5.0 5.0\n    Q 5.0 10.0 10.0 10.0\n    T 15.0 15.0" />\n'})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"M"})})," ",(0,d.jsx)(n.strong,{children:"命令"}),"：移动到起始点 ",(0,d.jsx)(n.code,{children:"(5, 5）"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"Q"})})," ",(0,d.jsx)(n.strong,{children:"命令"}),"：绘制一条二次贝塞尔曲线，从起点 ",(0,d.jsx)(n.code,{children:"(5, 5)"})," 到终点 ",(0,d.jsx)(n.code,{children:"(10, 10)"})," ，控制点为 ",(0,d.jsx)(n.code,{children:"(5, 10)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"T"})})," ",(0,d.jsx)(n.strong,{children:"命令"}),"：绘制一条新的二次贝塞尔曲线，终点为 ",(0,d.jsx)(n.code,{children:"(15, 15)"}),"，使用前一个曲线的控制点的反射点"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"T"})," 或 ",(0,d.jsx)(n.code,{children:"t"})," 命令将使用前一条曲线的控制点的反射来绘制新的二次贝塞尔曲线。相当于第一条曲线的终点（",(0,d.jsx)(n.code,{children:"P2 = (10.0,10.0)"}),"）是第二条曲线的起点（",(0,d.jsx)(n.code,{children:"P0 = (10.0,10.0)"}),"）；第一条曲线的控制点 ",(0,d.jsx)(n.code,{children:"P1 = (5.0,10)"})," 的反射点则为第二条曲线的控制点 ",(0,d.jsx)(n.code,{children:"P1 = (15.0,10)"})," ；第二条曲线的终点 ",(0,d.jsx)(n.code,{children:"P2"})," 则为 ",(0,d.jsx)(n.code,{children:"T"})," 或 ",(0,d.jsx)(n.code,{children:"t"})," 命令的坐标点或偏移量，即 ",(0,d.jsx)(n.code,{children:"P2 = （15.0，15.0）"})," ："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:Q,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"你可以尝试着改变第一条曲线的控制点，观察第二个曲线如何变化："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:E,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["这种方法（即 ",(0,d.jsx)(n.code,{children:"T"})," 或 ",(0,d.jsx)(n.code,{children:"t"})," 命令）也常称为平滑二次贝塞尔曲线，它可以帮助你简化代码，并使路径更易于管理。但请要注意，这种方法只有在反射点确实是你需要的点时才有效（前面提到过，手柄反射点有三种模式，镜像模式、非对称模式和断裂模式，这里使用的是“镜像模式”），如果不是，你极需要使用完整的 ",(0,d.jsx)(n.code,{children:"Q"})," 或 ",(0,d.jsx)(n.code,{children:"q"})," 命令来绘制二次贝塞尔曲线。"]}),"\n",(0,d.jsxs)(n.p,{children:["有关于二次贝塞尔曲线命令 ",(0,d.jsx)(n.code,{children:"Q"})," 或 ",(0,d.jsx)(n.code,{children:"q"})," 和平滑二次贝塞尔曲线命令 ",(0,d.jsx)(n.code,{children:"T"})," 或 ",(0,d.jsx)(n.code,{children:"t"})," ，就介绍到这里。如果你感兴趣，可以挑战一下自己，应用前面所学的知识，使用 ",(0,d.jsx)(n.code,{children:"<path>"})," 命令绘制出下图的形状："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:Z,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdpNgX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdpNgX"})]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"三次贝塞尔曲线命令c-c和-s-s",children:["三次贝塞尔曲线命令：",(0,d.jsx)(n.code,{children:"C"})," （",(0,d.jsx)(n.code,{children:"c"}),"）和 ",(0,d.jsx)(n.code,{children:"S"})," （",(0,d.jsx)(n.code,{children:"s"}),"）",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三次贝塞尔曲线命令c-c和-s-s",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"虽然二次贝塞尔曲线很棒，但它也有一些限制——只有一个控制点，能绘制的形状有限。例如，使用二次贝塞尔曲线绘制的药丸形状并不太完美："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5.0 5.0\n    h 5.0\n    q 5.0 2.5 0.0 5.0\n    h -5.0\n    q -5.0 -2.5 0.0 -5.0\n    Z" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:_,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"但是，如果我们将二次曲线改为三次曲线，我们会得到一个更加平滑的药丸形状："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5.05.0\n    h 5.0\n    c 4.0 0.0 4.0 5.0 0.0 5.0\n    h -5.0\n    c -4.0 0.0 -4.0 -5.0 0.0 -5.0\n    Z" />\n'})}),"\n",(0,d.jsx)(n.p,{children:"我们能够使曲线看起来更好，是因为我们有一个额外的控制点来使用。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:X,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"与二次贝塞尔曲线相比，三次贝塞尔曲线多了一个控制点，因此能绘制出更多样化，更复杂的形状："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:z,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["三次贝塞尔曲线命令使用 ",(0,d.jsx)(n.code,{children:"C"}),"（大写）表示绝对命令，使用 ",(0,d.jsx)(n.code,{children:"c"}),"（小写）表示相对命令。其基本语法如下："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"C control1X control1Y control2X control2Y endX endY\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"control1X control1Y"}),"：第一个控制点的绝对坐标"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"control2X control2Y"}),"：第二个控制点的绝对坐标"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"endX endY"}),"：曲线终点的绝对坐标"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"c dx1 dy1 dx2 dy2 dx dy\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"dx1 dy1"}),"：相对于当前点的第一个控制点的偏移量"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"dx2 dy2"}),"：相对于当前点的第二个控制点的偏移量"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"dx dy"}),"：相对于当前点的终点的偏移量"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:B,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["它看上去和二次贝塞尔曲线命令有点类似，但是有一个额外的坐标对用于第二个控制点 ",(0,d.jsx)(n.code,{children:"P2"})," 。例如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5.0 13.0\n    C 0.0 5.0 20.0 5.0 15.0 13.0" />\n'})}),"\n",(0,d.jsxs)(n.p,{children:["这段代码创建了一条从 ",(0,d.jsx)(n.code,{children:"(5.0, 13.0)"})," 开始，到 ",(0,d.jsx)(n.code,{children:"(15.0, 13.0)"})," 结束的三次贝塞尔曲线。两个控制点分别是 ",(0,d.jsx)(n.code,{children:"(0.0, 5.0)"})," 和 ",(0,d.jsx)(n.code,{children:"(20.0, 5.0)"}),"，它们共同决定了曲线的形状。该路径绘制顺序为先移动光标，然后根据控制点绘制曲线。"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"M 5.0 13.0"}),"：光标移动到起点 ",(0,d.jsx)(n.code,{children:"(5.0, 13.0)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"C 0.0 5.0 20.0 5.0 15.0 13.0"}),"：从 ",(0,d.jsx)(n.code,{children:"(5.0, 13.0)"})," 开始，使用控制点 ",(0,d.jsx)(n.code,{children:"(0.0, 5.0)"})," 和 ",(0,d.jsx)(n.code,{children:"(20.0, 5.0)"})," 绘制一条三次贝塞尔曲线，终点为 ",(0,d.jsx)(n.code,{children:"(15.0, 13.0)"})]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:A,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/GRaWVxv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRaWVxv"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"我们可以通过改变两个控制点和终点位置，获得不同的形状的曲线："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:C,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"你可以把三次贝塞尔曲线看作是二次贝塞尔曲线的“升级版”——只要把控制点放在正确的位置，每条二次曲线都能用三次曲线来表示。"}),"\n",(0,d.jsx)(n.p,{children:"你可以尝试着，使三次贝塞尔曲线的两个控制点在同一个位置（模拟二次贝塞尔曲线的一个控制点），这个时候就相当于使用三次贝塞尔命令绘制了一条二次贝塞尔曲线："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:q,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["上图中灰色曲线是使用 ",(0,d.jsx)(n.code,{children:"Q"})," 命令绘制的曲线，黑色是 ",(0,d.jsx)(n.code,{children:"C"})," 命令绘制的曲线："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 5 13\n    Q 10 5 15 13" stroke="gray" />\n    \n<path d="\n    M 5 13\n    C 10 5 10 5 15 13" stroke="black" />\n'})}),"\n",(0,d.jsx)(n.p,{children:"有趣的是，当两个控制点在同一位置时，这两条曲线并不会对齐！"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:N,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/ExzWqzV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ExzWqzV"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"反之，当两条曲线对齐时，即使用三次贝塞尔命令绘制一条与使用二次贝塞尔命令绘制出来的相同曲线，三次贝塞尔曲线的控制点并不会在同一个位置："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:G,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/zYQwOGr",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYQwOGr"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["像就二次贝塞尔曲线可以使用 ",(0,d.jsx)(n.code,{children:"S"})," 或 ",(0,d.jsx)(n.code,{children:"s"})," 命令，将若干个三次贝塞尔曲线连起来，从而创建出一条很长的平滑曲线。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"绝对命令 \uD83D\uDC49\uD83D\uDC49\uD83D\uDC49 S x2 y2, x y\n\n相对命令 \uD83D\uDC49\uD83D\uDC49\uD83D\uDC49 s dx2 dy2, dx dy\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"x2 y2"}),"：第二个控制点的绝对坐标"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"x y"}),"：曲线终点的绝对坐标"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"dx2 dy2"}),"：相对于当前点的第二个控制点的坐标偏移"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"dx dy"}),"：相对于当前点的终点的坐标偏移。"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"通常情况下，一个点某一侧的控制点是它另一侧的控制点的对称（以保持斜率不变）："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:V,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/WNBjewm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNBjewm"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["如上图所示，如果 ",(0,d.jsx)(n.code,{children:"S"})," 或 ",(0,d.jsx)(n.code,{children:"s"})," 命令跟在一个 ",(0,d.jsx)(n.code,{children:"C"})," （或 ",(0,d.jsx)(n.code,{children:"c"}),"）或 ",(0,d.jsx)(n.code,{children:"S"})," （或 ",(0,d.jsx)(n.code,{children:"s"}),"）命令后面，则它的第一个控制点会被假设成前一个命令曲线的第二个控制点的镜像点。如果 ",(0,d.jsx)(n.code,{children:"S"})," 或 ",(0,d.jsx)(n.code,{children:"s"})," 命令单独使用，前面没有 ",(0,d.jsx)(n.code,{children:"C"})," （或 ",(0,d.jsx)(n.code,{children:"c"}),"）或 ",(0,d.jsx)(n.code,{children:"S"})," （或 ",(0,d.jsx)(n.code,{children:"s"}),"）命令，那当前点将作为第一个控制点。"]}),"\n",(0,d.jsxs)(n.p,{children:["使用 ",(0,d.jsx)(n.code,{children:"S"})," 或 ",(0,d.jsx)(n.code,{children:"s"})," 可以绘制出更复杂的形状，例如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 6.0 10.0\n    C 6.0 8.0 4.0 10.0 4.0 5.0\n    S 11.0 0.0 11.0 5.0\n    S 9.0 8.0 9.0 10.0\n    Z\n    M 6.3 10.0\n    v 1.5\n    h -0.3\n    v 1.0\n    q 0.0 1.0 1.0 1.0\n    h 1.0\n    q 1.0 0.0 1.0 -1.0\n    v -1.0\n    h -3.0\n    m 2.8 0.0\n    v -1.5 " />\n'})}),"\n",(0,d.jsx)(n.p,{children:"简单解释一下上面的命令执行顺序："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"M 6.0 10.0"}),"：光标移动到 ",(0,d.jsx)(n.code,{children:"(6, 10)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"C 6.0 8.0 4.0 10.0 4.0 5.0"}),"：绘制一条三次贝塞尔曲线，控制点为 ",(0,d.jsx)(n.code,{children:"(6, 8)"})," 和 ",(0,d.jsx)(n.code,{children:"(4, 10)"}),"，终点为 ",(0,d.jsx)(n.code,{children:"(4, 5)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"S 11.0 0.0 11.0 5.0"}),"：绘制第二条三次贝塞尔曲线，起点为上一个终点 ",(0,d.jsx)(n.code,{children:"(4, 5)"}),"，第一个控制点为上一个控制点的反射点，第二个控制点为 ",(0,d.jsx)(n.code,{children:"(11, 0)"}),"，终点为 ",(0,d.jsx)(n.code,{children:"(11, 5)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"S 9.0 8.0 9.0 10.0"}),"：绘制第三条三次贝塞尔曲线，起点为上一个终点 ",(0,d.jsx)(n.code,{children:"(11, 5)"}),"，第一个控制点为上一个控制点的反射点，第二个控制点为 ",(0,d.jsx)(n.code,{children:"(9, 8)"}),"，终点为 ",(0,d.jsx)(n.code,{children:"(9, 10)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Z"}),"：关闭路径"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"M 6.3 10.0"}),"：光标重新移动到 ",(0,d.jsx)(n.code,{children:"(6.3, 10)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"v 1.5"}),"：垂直向下移动 ",(0,d.jsx)(n.code,{children:"1.5"})," ，绘制一条垂直直线"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"h -0.3"}),"：水平向左移动 ",(0,d.jsx)(n.code,{children:"0.3"})," ，绘制一条水平直线"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"v 1.0"}),"：垂直向下移动 ",(0,d.jsx)(n.code,{children:"1.0"})," ，绘制一条垂直直线"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"q 0.0 1.0 1.0 1.0"}),"：绘制一条二次贝塞尔曲线，控制点为 ",(0,d.jsx)(n.code,{children:"(0.0, 1.0)"}),"，终点为 ",(0,d.jsx)(n.code,{children:"(1.0, 1.0)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"h 1.0"}),"：水平向右移动 ",(0,d.jsx)(n.code,{children:"1.0"}),"，绘制一条水平直线"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"q 1.0 0.0 1.0 -1.0"}),"：绘制一条二次贝塞尔曲线，控制点为 ",(0,d.jsx)(n.code,{children:"(1.0, 0.0)"}),"，终点为 ",(0,d.jsx)(n.code,{children:"(1.0, -1.0)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"v -1.0"}),"：垂直向上移动 ",(0,d.jsx)(n.code,{children:"1.0"}),"，绘制一条垂直直线"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"h -3.0"}),"：水平向左移动 ",(0,d.jsx)(n.code,{children:"3.0"})," ，绘制一条水平直线"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"m 2.8 0.0"}),"：光标移动到相对位置 ",(0,d.jsx)(n.code,{children:"(2.8, 0)"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"v -1.5"}),"：垂直向上移动 ",(0,d.jsx)(n.code,{children:"1.5"}),"，绘制一条垂直直线"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:L,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/BaeRBXB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaeRBXB"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"挑战一下自己，使用已掌握的路径命令绘制一系列的天气图标："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:w,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["QWeather Icons: ",(0,d.jsx)(n.a,{href:"https://icons.qweather.com/en/",target:"_blank",rel:"noopener noreferrer",children:"https://icons.qweather.com/en/"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"以下雨的图标为例："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:P,alt:""})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M10.0 18.0\n    c -10.0 -1.0 -10.0 -14.00.0 -15.0\n    q 6.0 -0.8 8.0 5.0\n    c 7.0 0.0 7.0 10.0 0.0 10.0\n    m -1.0 -2.0\n    v 6.0\n    m- 2.0 -4.5\n    v 6.0\n    m -2.0 -6.0\n    v 6.0\n    m -2.0 -7.5\n    v 6.0" />\n'})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/ZENKEYK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZENKEYK"})]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"弧形命令a-和-a",children:["弧形命令：",(0,d.jsx)(n.code,{children:"A"})," 和 ",(0,d.jsx)(n.code,{children:"a"}),(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#弧形命令a-和-a",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["弧形命令 ",(0,d.jsx)(n.code,{children:"A"})," 或 ",(0,d.jsx)(n.code,{children:"a"})," 是另一个创建 SVG 曲线的命令。基本上，弧形可以视为圆形或椭圆形的一部分。假设，已知椭圆形的长轴半径和短轴半径，并且已知两个点（在椭圆上），根据半径和两点，可以画出两个椭圆，在每个椭圆上根据两点都可以画出两种弧形。所以，仅仅根据半径和两点，可以画出四种弧形。为了保证创建的弧形唯一，",(0,d.jsx)(n.code,{children:"A"})," 或 ",(0,d.jsx)(n.code,{children:"a"})," 命令需要用到比较多的参数："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"绝对命令 \uD83D\uDC49\uD83D\uDC49\uD83D\uDC49 A rx ry x-axis-rotation large-arc-flag sweep-flag x y\n相对命令 \uD83D\uDC49\uD83D\uDC49\uD83D\uDC49 a rx ry x-axis-rotation large-arc-flag sweep-flag dx dy\n"})}),"\n",(0,d.jsx)(n.p,{children:"它应该是 SVG 所有命令中包含参数最多的一个命令，相对而言，理解弧形命令会更困难一些。我们就先从其参数开始吧："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"rx"})}),"：",(0,d.jsx)(n.code,{children:"X"})," 轴方向的半径"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"ry"})}),"：",(0,d.jsx)(n.code,{children:"Y"})," 轴方向的半径"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"x-axis-rotation"})}),"：",(0,d.jsx)(n.code,{children:"X"})," 轴旋转角度，定义椭圆的旋转"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"large-arc-flag"})}),"：弧度大小标志，取值为 ",(0,d.jsx)(n.code,{children:"0"})," 或 ",(0,d.jsx)(n.code,{children:"1"}),"。决定弧的大小：",(0,d.jsx)(n.code,{children:"0"})," 表示绘制小于或等于 ",(0,d.jsx)(n.code,{children:"180"}),"度的弧；",(0,d.jsx)(n.code,{children:"1"})," 表示绘制大于 ",(0,d.jsx)(n.code,{children:"180"})," 度的弧"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"sweep-flag"})}),"：弧线方向标志，取值为 ",(0,d.jsx)(n.code,{children:"0"})," 或 ",(0,d.jsx)(n.code,{children:"1"}),"。决定弧线的方向：",(0,d.jsx)(n.code,{children:"0"})," 表示逆时针方向绘制；",(0,d.jsx)(n.code,{children:"1"})," 表示顺时针方向绘制"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"x"})})," 和 ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"y"})})," （或 ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"dx"})})," 和 ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"dy"})})," ）：弧的终点坐标。绝对命令使用绝对坐标，相对命令使用相对坐标。"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"例如，你可以像下面这样绘制一条弧线："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 3 10\n    A 10 7.5 0 0 0 20 15" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:S,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/BaeRaxz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaeRaxz"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["上面代码中，",(0,d.jsx)(n.code,{children:"A 10 7.5 0 0 0 20 15"})," 绘制了这条弧线，你可以仔细观察下图，先对 ",(0,d.jsx)(n.code,{children:"A"})," 或 ",(0,d.jsx)(n.code,{children:"a"})," 命令中的每个参数有一个初步的认识："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:k,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"它的维制过程如下图所示："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:v,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["接下来，我们就来聊聊 ",(0,d.jsx)(n.code,{children:"A 10 7.5 0 0 0 20 15"})," 这里面的每个参数的功能与作用。先把 ",(0,d.jsx)(n.code,{children:"A"})," 命令这后面的一大串数字与其参数匹配起来："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:M,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["首先看命令和第一对和最后一对坐标：",(0,d.jsx)(n.code,{children:"(rx,ry)"})," 和 ",(0,d.jsx)(n.code,{children:"(x,y)"})," 。这些点，连同初始光标位置（例如上面代码中的 ",(0,d.jsx)(n.code,{children:"M 3 10"}),"），一起决定了绘制弧线的椭圆形状。简单地说，为了绘制一条弧线，浏览器将取这三个点，并尝试找到一个适合的椭圆。即一个椭圆，其半径为 ",(0,d.jsx)(n.code,{children:"rx"})," 和 ",(0,d.jsx)(n.code,{children:"ry"})," ，并且两个点（光标的初点位置和弧线的终点位置）都在其周长上。"]}),"\n",(0,d.jsxs)(n.p,{children:["这意味着，已知椭圆的半径（",(0,d.jsx)(n.code,{children:"rx"})," 和 ",(0,d.jsx)(n.code,{children:"ry"}),"），并且已知椭圆上的两个点（光标初始位置和弧线终点位置），根据半径和两点，可以画出一个椭圆。例如，当你更改 ",(0,d.jsx)(n.code,{children:"A"})," 命令中的 ",(0,d.jsx)(n.code,{children:"rx"})," 、",(0,d.jsx)(n.code,{children:"ry"})," 以及起点和终点的位置时，椭圆将始终更改以适应这两个点和提供的半径："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:y,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["从上图中不难发现，当改变 ",(0,d.jsx)(n.code,{children:"A"})," 命令中的 ",(0,d.jsx)(n.code,{children:"rx"})," 和 ",(0,d.jsx)(n.code,{children:"ry"})," 时，光标的初始位置和弧线的终点位置，并不总是在 ",(0,d.jsx)(n.code,{children:"rx"})," 和 ",(0,d.jsx)(n.code,{children:"ry"})," 所绘制的椭圆上。例如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 3 10\n    A 10 7.5 0 0 0 20 17" />\n'})}),"\n",(0,d.jsxs)(n.p,{children:["把上面代码中 ",(0,d.jsx)(n.code,{children:"rx"})," 调小至 ",(0,d.jsx)(n.code,{children:"6.5"})," ，即："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 3 10\n    A 6.5 7.5 0 0 0 20 17" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:u,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLmpPY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLmpPY"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["请注意，当我们仅把椭圆的 ",(0,d.jsx)(n.code,{children:"rx"})," 半径从 ",(0,d.jsx)(n.code,{children:"10"})," 调整到 ",(0,d.jsx)(n.code,{children:"6.5"})," 时，椭圆形状是发生了变化的，水平椭圆（上图红色椭圆）变成垂直椭圆（上图中白色椭圆）。从上图中不难发现，弧线的起点 ",(0,d.jsx)(n.code,{children:"M 3 10"})," 和终点 ",(0,d.jsx)(n.code,{children:"(20, 17)"})," 在没有调整的情况下，即便椭圆（白色椭圆）不够大以适应弧线的点时，弧线并不会受到影响。它仍然沿着椭圆的曲线走。这表示椭圆隐式地被缩放以适应弧线。请留意下图中的椭圆 ",(0,d.jsx)(n.code,{children:"rx"})," 半径调小之后，",(0,d.jsx)(n.code,{children:"A"})," 命令绘制的弧线变化："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:m,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["你可以尝试调整 ",(0,d.jsx)(n.code,{children:"ry"})," 的值，它与 ",(0,d.jsx)(n.code,{children:"rx"})," 是一样的，会使椭圆隐式地被缩放，但弧线始终会沿着椭圆的曲线走。"]}),"\n",(0,d.jsxs)(n.p,{children:["接下来，我们来调整 ",(0,d.jsx)(n.code,{children:"x"})," 轴的旋转角度，即 ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"x-axis-rotation"})})," 参数值。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<path d="\n    M 3 10\n    A 10 7.5 30 0 0 20 17" />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:b,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["如上图所示，这个值将椭圆沿着其 ",(0,d.jsx)(n.code,{children:"x"})," 轴（或水平轴）旋转，以确定弧线的最终方向和形状。它对弧线的影响主要体现在以下几个方面："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["旋转椭圆：",(0,d.jsx)(n.code,{children:"rx"})," 和 ",(0,d.jsx)(n.code,{children:"ry"})," 定义了椭圆的半径，分别沿 ",(0,d.jsx)(n.code,{children:"x"})," 轴和 ",(0,d.jsx)(n.code,{children:"y"})," 轴；",(0,d.jsx)(n.code,{children:"x-axis-rotation"})," 是旋转角度，以度为单位。它表示椭圆围绕其中心逆时针旋转的角度。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["影响弧线的形状：通过旋转椭圆，可以改变弧线的形状。未旋转的椭圆会沿 ",(0,d.jsx)(n.code,{children:"x"})," 轴和 ",(0,d.jsx)(n.code,{children:"y"})," 轴对齐。如果对其进行旋转，那么椭圆的主轴（长轴和短轴）就会倾斜，从而影响弧线的形状。"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"影响弧线的方向：旋转椭圆会改变弧线的开始和结束方向。当你指定弧线的起点和终点时，旋转的角度会影响从起点到终点的弧线走向。"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"为了更好地理解这个参数，以下是一个示例："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<svg>\n  \x3c!-- 弧线没有旋转 --\x3e\n  <path d="\n      M 5 5 \n      A 5 3 0 0 1 15 5" stroke="red" />\n  \n  \x3c!-- 弧线旋转45度 --\x3e\n  <path d="\n      M 5 10 \n      A 5 3 45 0 1 15 10" stroke="orange" />\n  \n  \x3c!-- 弧线旋转90度 --\x3e\n  <path d="\n      M 5 15 \n      A 5 3 90 0 1 15 15" stroke="green" />\n</svg>\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:g,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/QWRvgby",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWRvgby"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"在这个示例中："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["第一条红色弧线的 ",(0,d.jsx)(n.code,{children:"x-axis-rotation"})," 为 ",(0,d.jsx)(n.code,{children:"0"}),"，即没有旋转"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["第二条橙色弧线的 ",(0,d.jsx)(n.code,{children:"x-axis-rotation"})," 为 ",(0,d.jsx)(n.code,{children:"45"}),"，即椭圆旋转了",(0,d.jsx)(n.code,{children:"45"}),"度"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["第三条绿色弧线的 ",(0,d.jsx)(n.code,{children:"x-axis-rotation"})," 为 ",(0,d.jsx)(n.code,{children:"90"}),"，即椭圆旋转了",(0,d.jsx)(n.code,{children:"90"}),"度"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"可以看到，随着旋转角度的增加，弧线的形状和方向会发生变化。具体地："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"0"}),"度时，椭圆的主轴平行于 ",(0,d.jsx)(n.code,{children:"x"})," 轴和 ",(0,d.jsx)(n.code,{children:"y"})," 轴"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"45"}),"度时，椭圆的主轴倾斜 ",(0,d.jsx)(n.code,{children:"45"})," 度，导致弧线的形状和方向也发生变化"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"90"}),"度时，椭圆的主轴垂直于最初的位置，弧线形状变得更为垂直"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"A"})," 或 ",(0,d.jsx)(n.code,{children:"a"})," 命令的最后两个参数是 ",(0,d.jsx)(n.code,{children:"large-arc-flag"})," 和 ",(0,d.jsx)(n.code,{children:"sweep-flag"})," ，它们看起来像是数字，但实际上它是标志，它们的值只有 ",(0,d.jsx)(n.code,{children:"0"})," 和 ",(0,d.jsx)(n.code,{children:"1"})," 。这是 ",(0,d.jsx)(n.code,{children:"A"})," 或 ",(0,d.jsx)(n.code,{children:"a"})," 命令中非常重要的两个参数，用于决定弧线的外观和方向。虽然它们的官方名称分别是“大弧线标志”（",(0,d.jsx)(n.code,{children:"large-arc-flag"}),"）和“扫描标志”（",(0,d.jsx)(n.code,{children:"sweep-flag"}),"），但我更喜欢称它们为大弧线和顺时针标志。"]}),"\n",(0,d.jsx)(n.p,{children:"接下来，我们来解释一下这两个参数。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"large-arc-flag"})," 决定弧线是否应该是大于或小于 ",(0,d.jsx)(n.code,{children:"180"})," 度的弧，其中 ",(0,d.jsx)(n.code,{children:"0"})," 表示选择小于或等于 ",(0,d.jsx)(n.code,{children:"180"})," 度的弧（小弧），",(0,d.jsx)(n.code,{children:"1"})," 表示选择大于 ",(0,d.jsx)(n.code,{children:"180"})," 度的弧（大弧）"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"sweep-flag"})," 决定弧线的绘制方向是顺时针还是逆时针，其中 ",(0,d.jsx)(n.code,{children:"0"})," 表示逆时针方向，",(0,d.jsx)(n.code,{children:"1"})," 表示顺时针方向"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["假设，我们有一个起点 ",(0,d.jsx)(n.code,{children:"(7,7)"})," 和终点 ",(0,d.jsx)(n.code,{children:"(18,18)"})," ，并且使用半径为 ",(0,d.jsx)(n.code,{children:"8"})," 的椭圆绘制弧线。我们可以通过不同的 ",(0,d.jsx)(n.code,{children:"large-arc-flag"})," 和 ",(0,d.jsx)(n.code,{children:"sweep-flag"})," 参数来控制弧线的形状和方向。以下是四种不同的组合："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'\x3c!-- large-arc-flag=0 和 sweep-flag=0 （小弧，逆时针方向）--\x3e\n<path d="\n    M 7 7\n    A 8 8 0 0 0 18 18" stroke="red" />\n    \n\x3c!-- large-arc-flag=1 和 sweep-flag=0（大弧，逆时针方向） --\x3e    \n<path d="\n    M 7 7\n    A 8 8 0 1 0 18 18" stroke="lime" />\n    \n\x3c!-- large-arc-flag=0 和 sweep-flag=1（小弧，顺时针方向） --\x3e  \n<path d="\n    M 7 7\n    A 8 8 0 0 1 18 18" stroke="orange" />  \n    \n\x3c!-- large-arc-flag=1 和 sweep-flag=1（大弧，顺时针方向） --\x3e    \n<path d="\n    M 7 7\n    A 8 8 0 1 1 18 18"  stroke="yellow />\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:f,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/yLWbXzX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLWbXzX"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"如上图所示："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"小弧"}),": 当 ",(0,d.jsx)(n.code,{children:"large-arc-flag"})," 为 ",(0,d.jsx)(n.code,{children:"0"})," 时，弧的角度小于或等于 ",(0,d.jsx)(n.code,{children:"180"})," 度"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"大弧"}),": 当 ",(0,d.jsx)(n.code,{children:"large-arc-flag"})," 为 ",(0,d.jsx)(n.code,{children:"1"})," 时，弧的角度大于 ",(0,d.jsx)(n.code,{children:"180"})," 度"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"sweep-flag"})}),": 控制弧线的方向，",(0,d.jsx)(n.code,{children:"0"})," 代表逆时针方向（图中黑色虚线），",(0,d.jsx)(n.code,{children:"1"})," 代表顺时针方向（图中白色虚线）"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["通过这个示例，可以清楚地看到 ",(0,d.jsx)(n.code,{children:"large-arc-flag"})," 和 ",(0,d.jsx)(n.code,{children:"sweep-flag"})," 如何影响弧线的形状和方向。理解这两个参数能够帮助你更好地利用 SVG 绘制出各种所需的弧线。"]}),"\n",(0,d.jsx)(n.p,{children:"最后，以下图来对 SVG 路径的命令做一个简短的小结："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:p,alt:""})}),"\n",(0,d.jsxs)(n.h2,{id:"svg-路径实践",children:["SVG 路径实践",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-路径实践",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"前面主要与大家探讨了 SVG 路径命令的类型和使用，都是以理论为基础。接下来，我们来看几个简单的案例，向大家展示 SVG 路径在 Web 中的应用。"}),"\n",(0,d.jsxs)(n.h3,{id:"案例一使用-css-动态化-svg-路径数据",children:["案例一：使用 CSS 动态化 SVG 路径数据",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#案例一使用-css-动态化-svg-路径数据",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:t,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["我想，你现在应该可以应用前面所学的内容，使用 ",(0,d.jsx)(n.code,{children:"path"})," 相关命令绘制出上图所示的各种形状。"]}),"\n",(0,d.jsx)(n.p,{children:"你会发现，上图中有很多形状是相似的，只是方向改变了，看上去有点像是镜像出来的图形。我们以第二对为例（上三角和下三角）。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'\x3c!-- 上三角 --\x3e\n<svg viewBox="0 0 10 10" class="path">\n    <path d="M 2 8 L 5 2 L 8 8" />\n</svg>\n\n\x3c!-- 下三角 --\x3e\n<svg viewBox="0 0 10 10" class="path">\n    <path d="M 2 2 L 5 8 L 8 2" />\n</svg>\n'})}),"\n",(0,d.jsxs)(n.p,{children:["很简单，就是使用 ",(0,d.jsx)(n.code,{children:"M"})," 和 ",(0,d.jsx)(n.code,{children:"L"})," 命令分别绘制了两条直线。"]}),"\n",(0,d.jsxs)(n.p,{children:["在这里，这么设计是接下来要向大家展示，CSS 是如何动态修改 SVG 路径数据，即 ",(0,d.jsx)(n.code,{children:"d"})," 属性。在现代 CSS 中，我们可以直接在 CSS 中使用 ",(0,d.jsx)(n.code,{children:"d"})," 属性来覆盖 SVG 的 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,d.jsx)(n.code,{children:"d"})," 属性值。我们把上面的代码稍微调整一下，在每个 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素中设置一个自定义属性，其值是 ",(0,d.jsx)(n.code,{children:"path('...')"})," ："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 10 10" class="path">\n    <path d="M 2 8 L 5 2 L 8 8"  style="--d:path(\'M 2 2 L 5 8 L 8 2\')"/>\n</svg>\n\n<svg viewBox="0 0 10 10" class="path">\n    <path d="M 2 2 L 5 8 L 8 2" style="--d:path(\'M 2 8 L 5 2 L 8 8\')" />\n</svg>\n'})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"path()"})," 函数中的值将 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,d.jsx)(n.code,{children:"d"})," 属性的值相互互换了一下。并且在鼠标悬浮的时候，通过 ",(0,d.jsx)(n.code,{children:"d"})," 属性改变 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,d.jsx)(n.code,{children:"d"})," 属性的值，并且给它添加了过渡属性，使路径数据在变化的时候有一个平滑过渡的效果："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".path path {\n     transition: d .35s;\n }\n  \n.path:hover path {\n    d: var(--d);\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:"这个时候，你将鼠标悬浮在图标上，看到的效果如下："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:a,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/vYwmebz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYwmebz"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["注意，实现这个效果有一个关键，路径数据需要相同的类型、相同数量的点等，否则在形状变形时，不会有平滑过渡的效果。当你无法准确确定这些关键信息时，那么建议你使用 ",(0,d.jsx)(n.a,{href:"https://gsap.com/docs/v3/Plugins/MorphSVGPlugin",target:"_blank",rel:"noopener noreferrer",children:"GSAP 的 MorphSVG 插件"}),"或 ",(0,d.jsx)(n.a,{href:"https://www.bram.us/2017/06/21/smooth-svg-path-morphing-with-flubber/",target:"_blank",rel:"noopener noreferrer",children:"Flubber 库"}),"来实现。例如下面这个效果，就是 GSAP 的 MorphSVG 实现的 SVG 图形变形动画效果："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:o,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/GreenSock/full/gagNeR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/GreenSock/full/gagNeR"})]}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"案例二带弧形边框的用户头像",children:["案例二：带弧形边框的用户头像",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#案例二带弧形边框的用户头像",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.a,{href:"https://css-tricks.com/design-v17/",target:"_blank",rel:"noopener noreferrer",children:"CSS-Tricks 网站的第 17 版设计"}),"，有很多不规则的 UI 形状。如下图所示："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:j,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"如果只是使用 CSS 来实现这些弧形和曲线，那么还是是很棘手的。要是，换作 SVG 来说实现的话，再简单不过了。接下来，我们以用户头像的弧形边框为例："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:x,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"实现上图中用户头像的边框效果，你可以需要一个类似下面这样的 HTML 结构："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'<div class="avatar">\n    <img src="http://i.pravatar.cc/500?img=2" alt="">\n    <svg viewBox="-10 -10 20 20">\n        \x3c!-- 重点是这里 --\x3e\n    </svg>\n</div>\n'})}),"\n",(0,d.jsxs)(n.p,{children:["我们的重点是 ",(0,d.jsx)(n.code,{children:"<svg>"})," 元素里面的内容。在开始之前，先使用 CSS 给用户头像设置一些基本样式："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".avatar {\n    width: var(--size, 50vh);\n    aspect-ratio: 1;\n    display: grid;\n    place-content: center;\n    position: relative;\n    place-self: center;\n    transition: all .2s linear;\n\n    img {\n        display: block;\n        width: 85%;\n        aspect-ratio: 1;\n        border-radius: 50%;\n        place-self: center;\n    }\n\n    svg {\n        position: absolute;\n        stroke-linecap: round;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        width: 100%;\n        overflow: visible;\n        outline: 1px dashed;\n    }\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:h,alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["注意，由于现在 ",(0,d.jsx)(n.code,{children:"<svg>"})," 中什么内容都没有，所以在样式中添加了一个 ",(0,d.jsx)(n.code,{children:"outline"})," 样式来表示 ",(0,d.jsx)(n.code,{children:"<svg>"})," 。我们要的效果是，用户头像是具有响应式效果的，它能随容器大小变化自动适配。"]}),"\n",(0,d.jsxs)(n.p,{children:["从设计图的效果来看，用户头像的边框效果是一个带有渐变的半圆效果。它刚好与 ",(0,d.jsx)(n.code,{children:"<path>"})," 命令中的 ",(0,d.jsx)(n.code,{children:"A"})," 或 ",(0,d.jsx)(n.code,{children:"a"})," 命令所匹配。因为 ",(0,d.jsx)(n.code,{children:"A"})," 或 ",(0,d.jsx)(n.code,{children:"a"})," 命令，可以绘制一个半圆形的弧线。根据课程前面介绍的内容，我们在 ",(0,d.jsx)(n.code,{children:"<svg>"})," 中添加一个 ",(0,d.jsx)(n.code,{children:"<path>"})," 元素，并给其 ",(0,d.jsx)(n.code,{children:"d"})," 属性设置相应的值。即绘制类似半圆的弧线："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-10 -10 20 20">\n    <path d="M -10 0 A 10 10 0 0 0 10 0" stroke="#fff" stroke-width="1.4" fill="none" /> \n</svg>    \n'})}),"\n",(0,d.jsxs)(n.p,{children:["简单的解释一下 ",(0,d.jsx)(n.code,{children:"d"})," 属性的值 ",(0,d.jsx)(n.code,{children:"M -10 0 A 10 10 0 0 0 10 0"}),"："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"M -10 0"})," 命令把光标移动到画布的 ",(0,d.jsx)(n.code,{children:"(-10,0)"})," 位置"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"A 10 10 0 0 0 10 0"})," 命令在一个半径为 ",(0,d.jsx)(n.code,{children:"rx = ry = 10"})," 的椭圆上，按顺时针方向，从 ",(0,d.jsx)(n.code,{children:"(-10,0)"})," 位置（弧线的起点位置）到 ",(0,d.jsx)(n.code,{children:"(10,0)"})," 位置（弧线的终点位置）绘制了一个小弧线"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"现在，你能看到用户头像底部有一个类似圆形的白色边框，它能随容器大小进行缩放："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:i,alt:""})}),"\n",(0,d.jsx)(n.p,{children:"离目标效果已经非常接近了。现在就只需要将白色弧形边框变成渐变填充的边框。"}),"\n",(0,d.jsxs)(n.p,{children:["在 SVG 中，我们可以使用 SVG 的 ",(0,d.jsx)(n.code,{children:"<linearGradient>"})," 定义一个渐变效果，并且将其填充到 ",(0,d.jsx)(n.code,{children:"<path>"})," 绘制的形状中："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'<div class="avatar">\n    <img src="http://i.pravatar.cc/1024?img=2" alt="">\n    <svg viewBox="-10 -10 20 20">\n        <linearGradient id="orange-to-pink" x1="0" x2="0" y1="1" y2="0">\n            <stop offset="0" stop-color="#DA1B60" />\n            <stop offset="1" stop-color="#ff8a00" />\n        </linearGradient> \n        <path d="M -10 0 A 10 10 0 0 0 10 0" stroke="url(#orange-to-pink)" stroke-width="1.4" fill="none" /> \n    </svg>\n</div>\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:l,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/VwObrbg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwObrbg"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"很棒，一个带有响应式效果的渐变弧形边框的用户头像 UI 效果就实现了。"}),"\n",(0,d.jsx)(n.p,{children:"在这个基础上，你还可以给弧形渐变边框添加一点调料。当用户鼠标悬停在头像上时，有一个动画效果："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"@keyframes offset {\n    0% {\n        stroke-dashoffset: -64px;\n        stroke-dasharray: 12 8 12;\n    }\n    50% {\n        stroke-dashoffset: 0;\n        stroke-dasharray: 12 4 12;\n    }\n    100% {\n        stroke-dashoffset: 64px;\n        stroke-dasharray: 12 8 12;\n    }\n}\n\n.avatar {\n    cursor: pointer;\n\n    path {\n        stroke-dashoffset: 0;\n    }\n\n    &:hover path {\n        animation: offset 6s linear(\n              0 0%,\n              0 2.27%,\n              0.02 4.53%,\n              0.04 6.8%,\n              0.06 9.07%,\n              0.1 11.33%,\n              0.14 13.6%,\n              0.25 18.15%,\n              0.39 22.7%,\n              0.56 27.25%,\n              0.77 31.8%,\n              1 36.35%,\n              0.89 40.9%,\n              0.85 43.18%,\n              0.81 45.45%,\n              0.79 47.72%,\n              0.77 50%,\n              0.75 52.27%,\n              0.75 54.55%,\n              0.75 56.82%,\n              0.77 59.1%,\n              0.79 61.38%,\n              0.81 63.65%,\n              0.85 65.93%,\n              0.89 68.2%,\n              1 72.7%,\n              0.97 74.98%,\n              0.95 77.25%,\n              0.94 79.53%,\n              0.94 81.8%,\n              0.94 84.08%,\n              0.95 86.35%,\n              0.97 88.63%,\n              1 90.9%,\n              0.99 93.18%,\n              0.98 95.45%,\n              0.99 97.73%,\n              1 100%) infinite alternate;\n    }\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:r,alt:""})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/dyEWZwE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dyEWZwE"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"感兴趣的同学可以挑战一下自己，设计稿上其他的不曲线效果如何实现？"}),"\n",(0,d.jsxs)(n.h2,{id:"小结",children:["小结",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"通过学习 SVG 路径的高级技术，我们能够更好地利用 SVG 的强大功能来创建复杂而精美的图形。从贝塞尔曲线和椭圆弧，到路径动画和平滑曲线，再到路径变形和布尔操作，这些技术为我们提供了丰富的工具来实现创意设计。同时，路径的简化和优化技术确保了我们所创建的图形在性能上也能保持高效。"}),"\n",(0,d.jsx)(n.p,{children:"掌握这些高级技术，不仅能够提升我们的图形设计水平，还能在实际应用中提高 SVG 图形的可维护性和响应速度。希望通过这节课，你能深入理解并灵活运用这些 SVG 路径技术，创作出更加生动、复杂且优化的图形作品。继续探索和实践，SVG的世界充满了无限可能！"})]})}function eC(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(eq,{...e})}):eq(e)}let eA=eC;eC.__RSPRESS_PAGE_META={},eC.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F35-%E9%AB%98%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E8%B7%AF%E5%BE%84%E7%9A%84%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF.md"]={toc:[{text:"SVG 路径（`<path>`）简介",id:"svg-路径path简介",depth:2},{text:"了解 SVG 路径的命令",id:"了解-svg-路径的命令",depth:2},{text:"路径命令类型",id:"路径命令类型",depth:3},{text:"移动到（Move To）命令：`M x y` 和 `m dx dy`",id:"移动到move-to命令m-x-y-和-m-dx-dy",depth:4},{text:"直线到（Line To）命令：`L x y` 和 `l dx dy`",id:"直线到line-to命令l-x-y-和-l-dx-dy",depth:4},{text:"水平线到（Horizontal Line To）命令：`H x` 和 `h dx`",id:"水平线到horizontal-line-to命令h-x-和-h-dx",depth:4},{text:"垂直线到（Vertical Line To）命令：`V y` 和 `v dy`",id:"垂直线到vertical-line-to命令v-y-和-v-dy",depth:4},{text:"二次贝塞尔曲线（Quadratic Bezier Curve）命令：`Q x1 y1, x y` 和 `q dx1 dy1, dx dy`",id:"二次贝塞尔曲线quadratic-bezier-curve命令q-x1-y1-x-y-和-q-dx1-dy1-dx-dy",depth:4},{text:"平滑二次贝塞尔曲线（Smooth Quadratic Bezier Curve）命令：`T x y` 和 `t dx dy`",id:"平滑二次贝塞尔曲线smooth-quadratic-bezier-curve命令t-x-y-和-t-dx-dy",depth:4},{text:"三次贝塞尔曲线（Cubic Bezier Curve）命令：`C x1 y1, x2 y2, x y` 和 `c dx1 dy1, dx2 dy2, dx dy`",id:"三次贝塞尔曲线cubic-bezier-curve命令c-x1-y1-x2-y2-x-y-和-c-dx1-dy1-dx2-dy2-dx-dy",depth:4},{text:"平滑三次贝塞尔曲线（Smooth Cubic Bezier Curve）命令：`S x2 y2, x y` 和 `s dx2 dy2, dx d`",id:"平滑三次贝塞尔曲线smooth-cubic-bezier-curve命令s-x2-y2-x-y-和-s-dx2-dy2-dx-d",depth:4},{text:"椭圆曲线到（Arc To）命令：`A rx ry x-axis-rotation large-arc-flag sweep-flag x y` 和 `a rx ry x-axis-rotation large-arc-flag sweep-flag dx dy`",id:"椭圆曲线到arc-to命令a-rx-ry-x-axis-rotation-large-arc-flag-sweep-flag-x-y-和-a-rx-ry-x-axis-rotation-large-arc-flag-sweep-flag-dx-dy",depth:4},{text:"闭合路径（Close Path）命令：`Z` 和 `z`",id:"闭合路径close-path命令z-和-z",depth:4},{text:"绝对和相对命令",id:"绝对和相对命令",depth:3},{text:"如何使用 SVG 路径命令",id:"如何使用-svg-路径命令",depth:2},{text:"光标",id:"光标",depth:3},{text:"移动到命令：`M` 和 `m`",id:"移动到命令m-和-m",depth:3},{text:"直线命令：`L` 、`l` 、`H` 、`h` 、`V` 和 `v`",id:"直线命令l-l-h-h-v-和-v",depth:3},{text:"关闭命令：`Z` 和 `z`",id:"关闭命令z-和-z",depth:3},{text:"曲线命令",id:"曲线命令",depth:3},{text:"贝塞尔曲线的基本原理",id:"贝塞尔曲线的基本原理",depth:4},{text:"二次贝塞尔曲线命令：`Q` （`q`）和 `T` （`t`）",id:"二次贝塞尔曲线命令q-q和-t-t",depth:4},{text:"三次贝塞尔曲线命令：`C` （`c`）和 `S` （`s`）",id:"三次贝塞尔曲线命令c-c和-s-s",depth:4},{text:"弧形命令：`A` 和 `a`",id:"弧形命令a-和-a",depth:4},{text:"SVG 路径实践",id:"svg-路径实践",depth:2},{text:"案例一：使用 CSS 动态化 SVG 路径数据",id:"案例一使用-css-动态化-svg-路径数据",depth:3},{text:"案例二：带弧形边框的用户头像",id:"案例二带弧形边框的用户头像",depth:3},{text:"小结",id:"小结",depth:2}],title:"35-高级篇：SVG 路径的高级技术",headingTitle:"35-高级篇：SVG 路径的高级技术",frontmatter:{}}}}]);