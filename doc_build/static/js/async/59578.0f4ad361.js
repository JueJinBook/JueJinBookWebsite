"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["59578"],{715506:function(n,e,s){n.exports=s.p+"static/image/43a4319499419bd0009739090d346d7e.8d5d85d5.webp"},958422:function(n,e,s){n.exports=s.p+"static/image/4532e87a65b669ab206bf426909be9d1.755ecdb1.webp"},52103:function(n,e,s){s.r(e),s.d(e,{default:()=>E});var r=s(552676),a=s(740453);let t=s.p+"static/image/2e92c309280085ff1d1be2467e16141b.13b2c05a.gif",i=s.p+"static/image/90e6148af3945b5ef8403111096a807a.ea3a141e.webp",c=s.p+"static/image/31b420b3ea95c714d1345250e150753e.652f736e.webp",o=s.p+"static/image/7a0ad8bc781a864b5c27621bbc64c551.8bad2992.webp",l=s.p+"static/image/23957f44f6a3c08c600bf730d6c39a47.113ed34d.gif",d=s.p+"static/image/8af1ad08b363c8f6f12a7fb8368060db.341d8375.webp",p=s.p+"static/image/1ee61a4d97b4dc61affe029dba0ab0d3.29ae20c4.webp",m=s.p+"static/image/c86f60b13eb42ee931876916ef314c25.7b419275.webp",h=s.p+"static/image/8888cd31eb5c43fabdd70777c726f036.d25b909f.webp",x=s.p+"static/image/711261ffeb909adabb96780e81b0cfd4.7823d4e9.webp";var g=s(715506);let u=s.p+"static/image/4ddf65d04869bc9732370db8404771de.cafe3a9c.webp",j=s.p+"static/image/3c86e3b888a5e4417301dc8939ff2124.3ade63d1.webp",f=s.p+"static/image/f8e00ead56d1948e46a76348b152c2cf.68b287eb.gif",b=s.p+"static/image/35a4bb0358705c9043fa62f9118019cf.3c216081.webp",w=s.p+"static/image/3ec39de4633fa8f9bd1831b0305c9dce.c99cba37.webp",v=s.p+"static/image/dd2a4841057f962a6ffb00877fcf6d7b.d90ca30e.webp";var F=s(958422);function y(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"30-图书管理系统用户模块前端开发",children:["30. 图书管理系统：用户模块前端开发",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#30-图书管理系统用户模块前端开发",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"后端接口写完后，我们来写前端页面。"}),"\n",(0,r.jsx)(e.p,{children:"先写登录、注册页面："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"用 create-vite 新建个 react 项目："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npx create-vite book-management-system-frontend\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"进入项目目录，把开发服务跑起来："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install\nnpm run dev\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"浏览器访问下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后我们添加 router："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install --save react-router-dom\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 main.tsx 加上路由的配置："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import ReactDOM from 'react-dom/client';\nimport { RouterProvider, createBrowserRouter} from 'react-router-dom';\n\nfunction BookManage() {\n  return <div>book</div>;\n}\n\nfunction Login(){\n  return <div>login</div>;\n}\n\nfunction Register(){\n  return <div>register</div>;\n}\n\nconst routes = [\n  {\n    path: \"/login\",\n    element: <Login/>,\n  },\n  {\n    path: \"/register\",\n    element: <Register/>,\n  },\n  {\n    path: \"/\",\n    element: <BookManage/>,\n  },\n];\n\nconst router = createBrowserRouter(routes);\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(<RouterProvider router={router}/>);\n"})}),"\n",(0,r.jsx)(e.p,{children:"配置了 3 个路由："}),"\n",(0,r.jsx)(e.p,{children:"访问 / 的时候，渲染 BookManage 组件。"}),"\n",(0,r.jsx)(e.p,{children:"访问 /login 的时候，渲染 Login 组件。"}),"\n",(0,r.jsx)(e.p,{children:"访问 /register 的时候，渲染 Register 组件。"}),"\n",(0,r.jsx)(e.p,{children:"测试下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"都没问题。"}),"\n",(0,r.jsx)(e.p,{children:"然后在 src 下创建 3 个组件：Login、Register、BookManage，把其余无用文件去掉："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后来写 Register 页面："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"引入 Ant Design 组件库："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install antd --save\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 Login 组件引入 Button 组件："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import { Button } from "antd";\n\nexport function Login(){\n    return <div>\n        login\n        <Button type="primary">按钮</Button>\n    </div>\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题，说明 antd 引入成功了。"}),"\n",(0,r.jsx)(e.p,{children:"然后我们把注册页面写一下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import { Button, Form, Input } from \'antd\';\nimport \'./index.css\';\n\ninterface RegisterUser {\n    username: string;\n    password: string;\n    password2: string;\n}\n\nconst onFinish = (values: RegisterUser) => {\n    console.log(values);\n};\n\nconst layout1 = {\n    labelCol: { span: 4 },\n    wrapperCol: { span: 20 }\n}\n\nconst layout2 = {\n    labelCol: { span: 0 },\n    wrapperCol: { span: 24 }\n}\n\nexport function Register() {\n    return <div id="register-container">\n        <h1>图书管理系统</h1>\n        <Form\n            {...layout1}\n            onFinish={onFinish}\n            colon={false}\n            autoComplete="off"\n        >\n            <Form.Item\n                label="用户名"\n                name="username"\n                rules={[{ required: true, message: \'请输入用户名!\' }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label="密码"\n                name="password"\n                rules={[{ required: true, message: \'请输入密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                label="确认密码"\n                name="password2"\n                rules={[{ required: true, message: \'请输入确认密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                {...layout2}\n            >\n                <div className=\'links\'>\n                    <a href=\'/login\'>已有账号？去登录</a>\n                </div>\n            </Form.Item>\n\n            <Form.Item\n                {...layout2}\n            >\n                <Button className=\'btn\' type="primary" htmlType="submit">\n                    注册\n                </Button>\n            </Form.Item>\n        </Form>\n    </div>   \n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"layout 是指定 label 和 input 部分的比例分配的，总共是 24。"}),"\n",(0,r.jsx)(e.p,{children:"写下 index.css 的样式："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:"#register-container {\n    width: 400px;\n    margin: 100px auto 0 auto;\n    text-align: center;\n}\n\n#register-container .links {\n    display: flex;\n    justify-content: center;\n}\n\n#register-container .btn {\n    width: 100%;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"看下现在的注册页面："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"输入用户名、密码、确认密码，点击注册："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"控制台打印了拿到的表单值。"}),"\n",(0,r.jsx)(e.p,{children:"然后我们调用下后端接口，安装下 axios："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install --save axios\n"})}),"\n",(0,r.jsx)(e.p,{children:"创建 interfaces/index.ts"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import axios from \"axios\";\n\nconst axiosInstance = axios.create({\n    baseURL: 'http://localhost:3000/',\n    timeout: 3000\n});\n\nexport async function register(username: string, password: string) {\n    return await axiosInstance.post('/user/register', {\n        username, password\n    });\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"在这里集中管理接口。"}),"\n",(0,r.jsx)(e.p,{children:"暴露 register 方法，里面调用 /user/register 接口。"}),"\n",(0,r.jsx)(e.p,{children:"然后在 Register 组件的 onFinish 里调用："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const onFinish = async (values: RegisterUser) => {\n\n    if(values.password !== values.password2) {\n        message.error('两次密码不一致');\n        return;\n    }\n\n    try {\n        const res = await register(values.username, values.password);\n\n        if(res.status === 201 || res.status === 200) {\n            message.success('注册成功');\n\n            setTimeout(() => {\n                window.location.href = '/login';\n            }, 1000);\n        }\n    } catch(e: any) {\n        message.error(e.response.data.message);\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"两次密码不一致提示错误。"}),"\n",(0,r.jsx)(e.p,{children:"然后请求注册接口，如果有错误就提示错误，注册成功跳转登录页。"}),"\n",(0,r.jsx)(e.p,{children:"注册下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"提示跨域。"}),"\n",(0,r.jsx)(e.p,{children:"在后端项目支持下跨域访问："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"再试下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(e.p,{children:"这样，注册就完成了。"}),"\n",(0,r.jsx)(e.p,{children:"我们再来写下登录页面："}),"\n",(0,r.jsx)(e.p,{children:"修改下 Login/index.tsx"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import { Button, Form, Input, message } from \'antd\';\nimport \'./index.css\';\n\ninterface LoginUser {\n    username: string;\n    password: string;\n}\n\nconst onFinish = async (values: LoginUser) => {\n    console.log(values);\n}\n\nconst layout1 = {\n    labelCol: { span: 4 },\n    wrapperCol: { span: 20 }\n}\n\nconst layout2 = {\n    labelCol: { span: 0 },\n    wrapperCol: { span: 24 }\n}\n\nexport function Login() {\n    return <div id="login-container">\n        <h1>图书管理系统</h1>\n        <Form\n            {...layout1}\n            onFinish={onFinish}\n            colon={false}\n            autoComplete="off"\n        >\n            <Form.Item\n                label="用户名"\n                name="username"\n                rules={[{ required: true, message: \'请输入用户名!\' }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label="密码"\n                name="password"\n                rules={[{ required: true, message: \'请输入密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                {...layout2}\n            >\n                <div className=\'links\'>\n                    <a href=\'/register\'>没有账号？去注册</a>\n                </div>\n            </Form.Item>\n\n            <Form.Item\n                {...layout2}\n            >\n                <Button className=\'btn\' type="primary" htmlType="submit">\n                    登录\n                </Button>\n            </Form.Item>\n        </Form>\n    </div>\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"还有样式 index.css"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:"#login-container {\n    width: 400px;\n    margin: 100px auto 0 auto;\n    text-align: center;\n}\n\n#login-container .links {\n    display: flex;\n    justify-content: center;\n}\n\n#login-container .btn {\n    width: 100%;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"试一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(e.p,{children:"然后在 interfaces/index.ts 里添加 login 接口："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"export async function login(username: string, password: string) {\n    return await axiosInstance.post('/user/login', {\n        username, password\n    });\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"在页面调用下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const onFinish = async (values: LoginUser) => {\n    try {\n        const res = await login(values.username, values.password);\n\n        if(res.status === 201 || res.status === 200) {\n            message.success('登录成功');\n\n            setTimeout(() => {\n                window.location.href = '/';\n            }, 1000);\n        }\n    } catch(e: any) {\n        message.error(e.response.data.message);\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"试下效果："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"至此，注册、登录的前后端都完成了。"}),"\n",(0,r.jsxs)(e.p,{children:["案例代码上传了",(0,r.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/book-management-system-frontend/",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"这节我们写了下注册、登录的前端页面。"}),"\n",(0,r.jsx)(e.p,{children:"通过 create-vite 创建项目，引入了 react-router-dom 实现了路由，然后使用 antd 作为组件库，引入了 axios 发请求。"}),"\n",(0,r.jsx)(e.p,{children:"在后端项目开启跨域之后，在前端项目里调用登录、注册接口来实现功能。"}),"\n",(0,r.jsx)(e.p,{children:"下节，我们继续写其他前端页面。"})]})}function B(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(y,{...n})}):y(n)}let E=B;B.__RSPRESS_PAGE_META={},B.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F30.%20%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"30. 图书管理系统：用户模块前端开发",headingTitle:"30. 图书管理系统：用户模块前端开发",frontmatter:{}}}}]);