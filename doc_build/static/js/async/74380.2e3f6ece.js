"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["74380"],{965030:function(e,n,s){s.r(n),s.d(n,{default:()=>p});var r=s(552676),c=s(740453);let d=s.p+"static/image/4fd2f98e024dc93506ebaf6ec3a5fb6d.76cc538b.webp",i=s.p+"static/image/a4970eaf6e77caa8fbc7d98098c344cc.5f757630.webp",t=s.p+"static/image/a70e3c34e77243a27e28c832dfc62f40.0677d66a.webp",l=s.p+"static/image/98bdc3bc76689d2837ccc8d25c951ced.f12b8499.webp",o=s.p+"static/image/f98525145733b83861679b3e15c6d188.26d6a3f0.webp";function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",h4:"h4",ul:"ul",li:"li",strong:"strong",pre:"pre",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"34vue3-实战之首页大盘数据-echarts-5",children:["34.Vue3 实战之首页大盘数据 （Echarts 5）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34vue3-实战之首页大盘数据-echarts-5",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["上一节，我们学习了登录注册鉴权这块知识，有个细节要注意，将 ",(0,r.jsx)(n.code,{children:"token"})," 存入 ",(0,r.jsx)(n.code,{children:"localStorage"})," 之后，要通过 ",(0,r.jsx)(n.code,{children:"window.location.href"})," 方法刷新刷新页面，否则 ",(0,r.jsx)(n.code,{children:"axios.js"})," 文件内，",(0,r.jsx)(n.code,{children:"axios.defaults.headers"})," 是拿不到最新的 ",(0,r.jsx)(n.code,{children:"token"})," 信息的。"]}),"\n",(0,r.jsx)(n.p,{children:"本小节为大家制作头部个人信息，及首页的大盘模拟数据。"}),"\n",(0,r.jsx)(n.p,{children:"页面显示效果如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsxs)(n.h4,{id:"本章节知识点",children:["本章节知识点",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章节知识点",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["需要注册的组件：",(0,r.jsx)(n.code,{children:"ElPopover"}),"、",(0,r.jsx)(n.code,{children:"ElTag"}),"、",(0,r.jsx)(n.code,{children:"ElCard"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Echarts 5.0"})," 图表差插件的引入及使用。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"个人信息弹窗显示。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"个人信息页面制作",children:["个人信息页面制作",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#个人信息页面制作",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["首先，打开 ",(0,r.jsx)(n.code,{children:"components/Header.vue"})," 文件源码，在 ",(0,r.jsx)(n.code,{children:"template"})," 部分做如下修改："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"template"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'...\n<div class="right">\n  <el-popover\n    placement="bottom"\n    :width="320"\n    trigger="click"\n    popper-class="popper-user-box"\n  >\n    <template #reference>\n      <div class="author">\n        <i class="icon el-icon-s-custom" />\n        {{ state.userInfo && state.userInfo.nickName || \'\' }}\n        <i class="el-icon-caret-bottom" />\n      </div>\n    </template>\n    <div class="nickname">\n      <p>登录名：{{ state.userInfo && state.userInfo.loginUserName || \'\' }}</p>\n      <p>昵称：{{ state.userInfo && state.userInfo.nickName || \'\' }}</p>\n      <el-tag size="small" effect="dark" class="logout" @click="logout">退出</el-tag>\n    </div>\n  </el-popover>\n</div>\n...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["模板部分通过 ",(0,r.jsx)(n.code,{children:"el-popover"})," 组件实现一个点击弹出弹窗组件，将个人信息放入弹窗内部。",(0,r.jsx)(n.code,{children:"el-popover"})," 提供了插槽 ",(0,r.jsx)(n.code,{children:"reference"}),"，这个是具名插槽，",(0,r.jsx)(n.code,{children:"Vue 2.0"})," 的具名插槽的书写形式为 ",(0,r.jsx)(n.code,{children:"v-slot:reference"}),"，而 ",(0,r.jsx)(n.code,{children:"Vue3"})," 则变为 ",(0,r.jsx)(n.code,{children:"#reference"}),"，",(0,r.jsx)(n.code,{children:"#"})," 代替了之前的 ",(0,r.jsx)(n.code,{children:"v-slot:"}),"，这里的差异大家一定要注意。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"el-popover"})," 具体的使用文档在下面："]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://element-plus.gitee.io/#/zh-CN/component/popover",target:"_blank",rel:"noopener noreferrer",children:"https://element-plus.gitee.io/#/zh-CN/component/popover"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["使用组件时遇到问题，第一时间去看文档，而不是去搜索引擎去搜。因为搜出来的结果五花八门的，还有时效性的问题，所以建议大家一定要先看文档。如果文档没有解决，再去对应的组件库 ",(0,r.jsx)(n.code,{children:"Github"})," 仓库内的 ",(0,r.jsx)(n.code,{children:"issue"})," 搜是否有人遇到了同样的问题，如果有，肯定有人会进行解答。"]}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"script"})," 下通过接口获取用户信息，代码如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"script"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport { onMounted, reactive, toRefs } from 'vue'\nimport { useRouter } from 'vue-router'\nimport axios from '@/utils/axios'\nimport { localRemove, pathMap } from '@/utils'\nconst router = useRouter()\nconst state = reactive({\n  name: 'dashboard',\n  userInfo: null, // 用户信息变量\n})\n// 初始化执行方法\n  onMounted(() => {\n  const pathname = window.location.hash.split('/')[1] || ''\n  if (!['login'].includes(pathname)) {\n    getUserInfo()\n  }\n})\n// 获取用户信息\nconst getUserInfo = async () => {\n  const userInfo = await axios.get('/adminUser/profile')\n  state.userInfo = userInfo\n}\n// 退出登录\nconst logout = () => {\n  axios.delete('/logout').then(() => {\n    // 退出之后，将本地保存的 token  清理掉\n    localRemove('token')\n    // 回到登录页\n    router.push({ path: '/login' })\n  })\n}\n\nrouter.afterEach((to) => {\n  console.log('to', to)\n  const { id } = to.query\n  state.name = pathMap[to.name]\n})\n<\/script>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["逻辑部分，在 ",(0,r.jsx)(n.code,{children:"reactive"})," 内声明 ",(0,r.jsx)(n.code,{children:"userInfo"})," 变量，用于存放用户个人信息。从 ",(0,r.jsx)(n.code,{children:"vue"})," 中解构出 ",(0,r.jsx)(n.code,{children:"onMounted"}),"，用于项目初始化请求，与之对应的是 ",(0,r.jsx)(n.code,{children:"Vue 2.0"})," 的 ",(0,r.jsx)(n.code,{children:"mounted"})," 选项，每次加载组件，只运行一次。"]}),"\n",(0,r.jsxs)(n.p,{children:["声明 ",(0,r.jsx)(n.code,{children:"logout()"})," 方法的时候要注意，先要将 ",(0,r.jsx)(n.code,{children:"token"})," 在本地进行清理，否则执行 ",(0,r.jsx)(n.code,{children:" axios.delete('/logout')"})," 请求后，当前存在 ",(0,r.jsx)(n.code,{children:"localStorage"})," 里的 ",(0,r.jsx)(n.code,{children:"token"})," 字段就已经失效了，如果不进行清理，后续可能会出现一些问题。清除完之后，回到登录页面 ",(0,r.jsx)(n.code,{children:"/login"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"样式部分如下所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"style"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:"<style scoped>\n  .right > div > .icon{\n    font-size: 18px;\n    margin-right: 6px;\n  }\n  .author {\n    margin-left: 10px;\n    cursor: pointer;\n  }\n</style>\n<style>\n  .popper-user-box {\n    background: url('https://s.yezgea02.com/lingling-h5/static/account-banner-bg.png') 50% 50% no-repeat!important;\n    background-size: cover!important;\n    border-radius: 0!important;\n  }\n   .popper-user-box .nickname {\n    position: relative;\n    color: #ffffff;\n  }\n  .popper-user-box .nickname .logout {\n    position: absolute;\n    right: 0;\n    top: 0;\n    cursor: pointer;\n  }\n</style>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["样式部分要注意一点，",(0,r.jsx)(n.code,{children:"el-popover"})," 的弹窗，被定义在了根节点的外面："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["控制台如上图所示，红框部分 ",(0,r.jsx)(n.code,{children:"app"})," 节点和 ",(0,r.jsx)(n.code,{children:"el-popover"})," 节点是并排的，",(0,r.jsx)(n.code,{children:"el-popover"})," 节点并不在 ",(0,r.jsx)(n.code,{children:"right"})," div 内部，所以不能在 ",(0,r.jsx)(n.code,{children:"<style scoped></style>"})," 内定义 ",(0,r.jsx)(n.code,{children:"popper-user-box"})," 样式，只能重新写一个 ",(0,r.jsx)(n.code,{children:"<style></style>"})," 标签，在其内部定义 ",(0,r.jsx)(n.code,{children:"popper-user-box"}),"，这样写出来的样式，是作用在全局样式的，所以定义类名的时候一定要语义化一些，尽量避免后面类名重复。"]}),"\n",(0,r.jsx)(n.p,{children:"后面要写的弹窗等组件，也都会出现这样的情况，大家要注意。"}),"\n",(0,r.jsx)(n.p,{children:"最后头部组件呈现的效果如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"首页大盘数据",children:["首页大盘数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#首页大盘数据",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["一般情况下，后台管理系统都会在首页进行 C 端产品的数据展示。以当前这个 Vue3 的后台管理系统来举例，首页就需要展现数据，比如今日订单数、今日日活、订单转化率等，将一些数据用图形的方式进行可视化，下面我们就通过 ",(0,r.jsx)(n.code,{children:"Echarts 5.0"})," 来将数据可视化操作。"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来就要进入内页的组件编写了，也就是右边栏的 ",(0,r.jsx)(n.code,{children:"content"})," 部分。首先明确一点，内页的布局，外框采用的是 ",(0,r.jsx)(n.code,{children:"Element Plus"})," 的 ",(0,r.jsx)(n.code,{children:"ElCard"})," 组件，该组件已经提前定义好了一些样式，这里就直接用它作为外框。"]}),"\n",(0,r.jsxs)(n.h4,{id:"订单信息-flex-布局",children:["订单信息 Flex 布局",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#订单信息-flex-布局",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，打开 ",(0,r.jsx)(n.code,{children:"views/Index.vue"}),"，先来制作头部的三个数据，如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"实现代码如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"template"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<template>\n  <el-card class="introduce">\n    <div class="order">\n      <el-card class="order-item">\n        <template #header>\n          <div class="card-header">\n            <span>今日订单数</span>\n          </div>\n        </template>\n        <div class="item">1888</div>\n      </el-card>\n      <el-card class="order-item">\n        <template #header>\n          <div class="card-header">\n            <span>今日日活</span>\n          </div>\n        </template>\n        <div class="item">36271</div>\n      </el-card>\n      <el-card class="order-item">\n        <template #header>\n          <div class="card-header">\n            <span>转化率</span>\n          </div>\n        </template>\n        <div class="item">20%</div>\n      </el-card>\n    </div>\n  </el-card>\n</template>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"style"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:" .introduce .order {\n    display: flex;\n    margin-bottom: 50px;\n  }\n  .introduce .order .order-item {\n    flex: 1;\n    margin-right: 20px;\n  }\n  .introduce .order .order-item:last-child{\n    margin-right: 0;\n  }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如上述代码所示，这是一个经典的 ",(0,r.jsx)(n.code,{children:"flex"})," 布局。",(0,r.jsx)(n.code,{children:".order"})," 作为父级，内部有三个 ",(0,r.jsx)(n.code,{children:".order-item"})," 作为子级，当 ",(0,r.jsx)(n.code,{children:".order"})," 设置为 ",(0,r.jsx)(n.code,{children:"display: flex"})," 时，下面三个子节点将会横向排布，再将 ",(0,r.jsx)(n.code,{children:".order-item"})," 设置为 ",(0,r.jsx)(n.code,{children:"flex: 1"}),"，则会让每一个子节点的宽度设置为父节点的 1/3。"]}),"\n",(0,r.jsxs)(n.h4,{id:"订单信息折线图布局",children:["订单信息折线图布局",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#订单信息折线图布局",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["引入图表插件，一般情况下都会使用 ",(0,r.jsx)(n.code,{children:"npm i echarts"})," ，通过安装 npm 包的的形式引入。本次我们采用的是静态资源引入的形式，如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'\x3c!--index.html--\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <link rel="icon" href="/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script src="https://s.yezgea02.com/1609305532675/echarts.js"><\/script>\n    <script type="module" src="/src/main.js"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["之所以采用这种形式，是因为后续的构建打包，会将第三方资源打成一个 ",(0,r.jsx)(n.code,{children:"vendor.js"})," 文件，我不希望在 ",(0,r.jsx)(n.code,{children:"vendor.js"})," 内部加入 ",(0,r.jsx)(n.code,{children:"echart"})," 的代码，这样会使得 ",(0,r.jsx)(n.code,{children:"vendor.js"})," 变得很臃肿，毕竟 ",(0,r.jsx)(n.code,{children:"echart"})," 文件很大，几百 KB 的大小，有些无法接受。"]}),"\n",(0,r.jsxs)(n.p,{children:["这里如果采用 ",(0,r.jsx)(n.code,{children:"script"})," 的形式引入，",(0,r.jsx)(n.code,{children:"echart"})," 资源就会另行加载，还是会挂载到 ",(0,r.jsx)(n.code,{children:"window"})," 全局变量下。"]}),"\n",(0,r.jsx)(n.p,{children:"接下来编写模板，代码如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"template"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<template>\n  <el-card class=\"introduce\">\n    ...\n    <div id='zoom'></div>\n  </el-card>\n</template>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"script"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport { onMounted, onUnmounted } from 'vue'\n\nlet myChart = null\n\nonMounted(() => {\n  if (window.echarts) {\n    // 基于准备好的dom，初始化echarts实例\n    myChart = window.echarts.init(document.getElementById('zoom'))\n\n    // 指定图表的配置项和数据\n    const option = {\n      title: {\n        text: '系统折线图'\n      },\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n          label: {\n            backgroundColor: '#6a7985'\n          }\n        }\n      },\n      legend: {\n        data: ['新增注册', '付费用户', '活跃用户', '订单数', '当日总收入']\n      },\n      toolbox: {\n        feature: {\n          saveAsImage: {}\n        }\n      },\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      },\n      xAxis: [\n        {\n          type: 'category',\n          boundaryGap: false,\n          data: ['2021-03-11', '2021-03-12', '2021-03-13', '2021-03-14', '2021-03-15', '2021-03-16', '2021-03-17']\n        }\n      ],\n      yAxis: [\n        {\n          type: 'value'\n        }\n      ],\n      series: [\n        {\n          name: '新增注册',\n          type: 'line',\n          stack: '总量',\n          areaStyle: {},\n          emphasis: {\n            focus: 'series'\n          },\n          data: [120, 132, 101, 134, 90, 230, 210]\n        },\n        {\n          name: '付费用户',\n          type: 'line',\n          stack: '总量',\n          areaStyle: {},\n          emphasis: {\n            focus: 'series'\n          },\n          data: [220, 182, 191, 234, 290, 330, 310]\n        },\n        {\n          name: '活跃用户',\n          type: 'line',\n          stack: '总量',\n          areaStyle: {},\n          emphasis: {\n            focus: 'series'\n          },\n          data: [150, 232, 201, 154, 190, 330, 410]\n        },\n        {\n          name: '订单数',\n          type: 'line',\n          stack: '总量',\n          areaStyle: {},\n          emphasis: {\n            focus: 'series'\n          },\n          data: [320, 332, 301, 334, 390, 330, 320]\n        },\n        {\n          name: '当日总收入',\n          type: 'line',\n          stack: '总量',\n          label: {\n            show: true,\n            position: 'top'\n          },\n          areaStyle: {},\n          emphasis: {\n            focus: 'series'\n          },\n          data: [820, 932, 901, 934, 1290, 1330, 1320]\n        }\n      ]\n    }\n\n    // 使用刚指定的配置项和数据显示图表。\n    myChart.setOption(option)\n  } \n})\nonUnmounted(() => {\n  myChart.dispose()\n})\n<\/script>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["首先判断 ",(0,r.jsx)(n.code,{children:"window.echarts"})," 是否存在，如果存在则通过 ",(0,r.jsx)(n.code,{children:"myChart = window.echarts.init(document.getElementById('zoom'))"})," 初始化图标要渲染在哪个 ",(0,r.jsx)(n.code,{children:"div"})," 下，拿到 ",(0,r.jsx)(n.code,{children:"echarts.init"})," 返回的实例后，通过 ",(0,r.jsx)(n.code,{children:"myChart.setOption(option)"})," 引入设置好的 ",(0,r.jsx)(n.code,{children:"option"})," 配置项便可，",(0,r.jsx)(n.code,{children:"option"})," 配置项文档如下："]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://echarts.apache.org/zh/option.html#title",target:"_blank",rel:"noopener noreferrer",children:"https://echarts.apache.org/zh/option.html#title"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"你可以设置折线图、柱状图、饼图、散点图、雷达图、K线图等等等等。经常写可视化配置的同学，也难免遇到一些配置问题，碰到问题一定要查阅文档。"}),"\n",(0,r.jsxs)(n.p,{children:["最后，在组件卸载的时候，通过 ",(0,r.jsx)(n.code,{children:"onUnmounted"})," 方法将实例释放掉，否则后续加载会有问题。"]}),"\n",(0,r.jsxs)(n.p,{children:["刷新页面，你会发现没有出来图表，这是因为代码中少加了一个样式，需要为 ",(0,r.jsx)(n.code,{children:"#zoom"})," 节点设置一个高度："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:"#zoom {\n   min-height: 300px;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"刷新页面，如下所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["本章节完善了公用头部的个人信息部分，将个人信息放在公用头部的右侧位置，这样做的目的是无论后续切换什么页面，都不会再次请求个人信息接口，因为 ",(0,r.jsx)(n.code,{children:"Header.vue"})," 只会被加载一次。况且个人信息接口也不用频繁的去重新获取，一般情况下是不会做大变动。"]}),"\n",(0,r.jsxs)(n.p,{children:["简单阐述了 ",(0,r.jsx)(n.code,{children:"Echarts"})," 的使用，大多数情况下，都需要开发者去文档中搜索需要的配置。建议大家去",(0,r.jsx)(n.a,{href:"https://echarts.apache.org/examples/zh/index.html",target:"_blank",rel:"noopener noreferrer",children:"官方示例"}),"部分先找一下适合的可视化图形，之后慢慢地在线调试，最后去配置项手册寻找对应的配置。一个需求的成型，何尝不是经过辛勤的汗水，一块一块的搬砖呢？"]}),"\n",(0,r.jsxs)(n.h4,{id:"本章源码地址",children:["本章源码地址",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章源码地址",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://s.yezgea02.com/1663310969598/admin03.zip",target:"_blank",rel:"noopener noreferrer",children:"点击下载"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"文档最近更新时间：2022 年 9 月 20 日。"}),"\n"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}let p=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F34.Vue3%20%E5%AE%9E%E6%88%98%E4%B9%8B%E9%A6%96%E9%A1%B5%E5%A4%A7%E7%9B%98%E6%95%B0%E6%8D%AE%20%EF%BC%88Echarts%205%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"本章节知识点",id:"本章节知识点",depth:4},{text:"个人信息页面制作",id:"个人信息页面制作",depth:2},{text:"首页大盘数据",id:"首页大盘数据",depth:2},{text:"订单信息 Flex 布局",id:"订单信息-flex-布局",depth:4},{text:"订单信息折线图布局",id:"订单信息折线图布局",depth:4},{text:"总结",id:"总结",depth:2},{text:"本章源码地址",id:"本章源码地址",depth:4}],title:"34.Vue3 实战之首页大盘数据 （Echarts 5）",headingTitle:"34.Vue3 实战之首页大盘数据 （Echarts 5）",frontmatter:{}}}}]);