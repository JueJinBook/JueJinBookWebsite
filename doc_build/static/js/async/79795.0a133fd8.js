"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79795"],{780188:function(e,n,c){c.r(n),c.d(n,{default:()=>l});var r=c(552676),s=c(740453);function i(e){let n=Object.assign({h2:"h2",a:"a",p:"p",code:"code",h3:"h3",ul:"ul",li:"li",pre:"pre",ol:"ol",h4:"h4"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在桌面端应用中，我们在操作文件进行鼠标右击的时候，经常会看到一些应用的快捷菜单，将应用添加到右击菜单可以让用户以自己非常熟悉的操作习惯来启动我们的应用，大幅提高软件的使用效率。比如在 macOS 上："}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"Windows"})," 系统中："]}),"\n",(0,r.jsx)(n.p,{children:"如果你对如何将你的 Electron 应用也注入到右击菜单中启动比较感兴趣，那么本小节将是一个非常契合你兴趣的章节。下面，我们一起来探索和实现将 Electron 应用添加到电脑的右击菜单当中启动的功能。"}),"\n",(0,r.jsxs)(n.h2,{id:"基础知识介绍",children:["基础知识介绍",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础知识介绍",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-windows-的注册表",children:["1. windows 的注册表",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-windows-的注册表",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Windows 的注册表是一个重要的系统数据库，用于存储操作系统和安装的应用程序的配置信息、系统设置、用户偏好和硬件信息等。它以树状结构组织，类似于文件系统的目录结构，包含多个键（keys）和值（values）。"}),"\n",(0,r.jsx)(n.p,{children:"注册表包括多个主要分支："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HKEY_CLASSES_ROOT"}),"：包含文件关联和注册的程序类信息。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HKEY_CURRENT_USER"}),"：存储当前用户的配置信息，包括桌面设置、用户偏好等。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HKEY_LOCAL_MACHINE"}),"：存储计算机的硬件和操作系统配置信息。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HKEY_USERS"}),"：包含所有用户配置信息，每个用户拥有一个分支。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HKEY_CURRENT_CONFIG"}),"：存储当前计算机的硬件配置信息。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["注册表中的键和值可以影响系统和应用程序的行为，包括启动项、文件关联、软件安装信息等。我们在使用 windows 的时候，可以通过 ",(0,r.jsx)(n.code,{children:"Win + R"})," 然后输入 ",(0,r.jsx)(n.code,{children:"regedit"})," 来打开注册表："]}),"\n",(0,r.jsx)(n.p,{children:"在注册表中，有两个比较重要的目录。"}),"\n",(0,r.jsxs)(n.p,{children:["一个是 ",(0,r.jsx)(n.code,{children:"HKEY_CLASSES_ROOT\\*\\shell"})," 目录：",(0,r.jsx)(n.code,{children:"HKEY_CLASSES_ROOT/*/shell"})," 这个路径下的键存储了在右键单击特定类型的文件时在上下文菜单（右键菜单）中显示的命令列表（",(0,r.jsx)(n.code,{children:"*"})," 是一个通配符，表示匹配任何文件类型或文件扩展名）。每个命令都有一个子键，并且这些子键的名称将显示为右键菜单中的命令项，比如 ",(0,r.jsx)(n.code,{children:"picgo"})," 的配置项："]}),"\n",(0,r.jsxs)(n.p,{children:["右击文件时，其中 ",(0,r.jsx)(n.code,{children:"Upload pictures w&ith PicGo"})," 就会出现在系统右击菜单上："]}),"\n",(0,r.jsxs)(n.p,{children:["还有一类是 ",(0,r.jsx)(n.code,{children:"HKEY_CLASSES_ROOT\\Directory\\shell"})," 目录，指定了只有右键单击文件夹类型的内容才会出现在右击菜单上，比如 ",(0,r.jsx)(n.code,{children:"git gui"}),"："]}),"\n",(0,r.jsxs)(n.p,{children:["当右击文件夹时，",(0,r.jsx)(n.code,{children:"Git &GUI Here"})," 就会出现在系统右击菜单上："]}),"\n",(0,r.jsxs)(n.p,{children:["上面两类目录下，都有一个 ",(0,r.jsx)(n.code,{children:"command"})," 目录，这个目录的作用就是点击右击菜单中对应的项目后执行的脚本。在 ",(0,r.jsx)(n.code,{children:"git gui"})," 的目录 ",(0,r.jsx)(n.code,{children:"command"})," 下，我们看到如下数据："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'"C:\\Program Files\\Git\\cmd\\git-gui.exe" "--working-dir" "%1"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["其中 ",(0,r.jsx)(n.code,{children:"--working-dir"})," 是启动 ",(0,r.jsx)(n.code,{children:"git-gui.exe"})," 程序的启动参数，",(0,r.jsx)(n.code,{children:"%1"})," 是作为当前文件夹路径参数传给 ",(0,r.jsx)(n.code,{children:"git-gui.exe"})," 的。"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-nsis",children:["2. NSIS",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-nsis",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"NSIS"})," 是 Nullsoft Scriptable Install System 的缩写，是一个开源的脚本化安装系统，用于创建 Windows 平台上的安装程序。NSIS 提供了一种灵活、强大的方式来制作自定义的软件安装程序，使开发者能够通过编写脚本来创建 Windows 软件的安装和卸载程序。"]}),"\n",(0,r.jsxs)(n.p,{children:["NSIS 脚本文件的拓展名是 ",(0,r.jsx)(n.code,{children:".nsi"}),"。",(0,r.jsx)(n.code,{children:".nsh"})," 是 NSIS 中的脚本包含文件，用于组织和包含一组 NSIS 脚本命令，这些文件可以被引入到主 NSIS 脚本文件（",(0,r.jsx)(n.code,{children:".nsi"})," 文件）中，允许在多个安装程序脚本中重用相同的命令和功能，提高代码的可重用性和可维护性。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你不理解上面的介绍也没关系，你只需要知道它是用来生成 ",(0,r.jsx)(n.code,{children:"Windows"})," 安装界面的一门脚本语言，你可以通过它来控制安装（卸载）界面都有哪些元素。并且它可以接入安装的生命周期，做一些操作，比如写入注册表："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"WriteRegStr <reg-path> <your-reg-path> <attr-name> <value>\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-automator",children:["3. Automator",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-automator",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Automator"})," 是 macOS 操作系统中的一个强大的自动化工具，旨在帮助用户快速、简便地创建自定义的自动化工作流程。它允许用户通过简单的拖放操作来组装一系列的动作，从而创建自动化任务。"]}),"\n",(0,r.jsxs)(n.p,{children:["通过 ",(0,r.jsx)(n.code,{children:"Automator"})," 创建的自动化任务可以被添加到 ",(0,r.jsx)(n.code,{children:"MacOS"})," 的右击菜单 ",(0,r.jsx)(n.code,{children:"快速操作"})," 项目中。"]}),"\n",(0,r.jsxs)(n.h2,{id:"实现添加-electron-应用到系统右击菜单",children:["实现添加 Electron 应用到系统右击菜单",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现添加-electron-应用到系统右击菜单",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-windows",children:["1. Windows",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-windows",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"根据上面的一些基础知识，我们一起来捋一下在 Windows 中实现注册 Electron 应用到系统右击菜单步骤："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"注册命令行启动程序到注册表中；"}),"\n",(0,r.jsx)(n.li,{children:"应用程序实现命令行启动功能。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"接下来我们分别介绍每一步实现的细节。"}),"\n",(0,r.jsxs)(n.h4,{id:"11-注册命令行启动程序到注册表中",children:["1.1 注册命令行启动程序到注册表中",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-注册命令行启动程序到注册表中",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["因为我们使用的是 ",(0,r.jsx)(n.code,{children:"electron-builder"})," 作为 Electron 应用程序的打包工具，在 ",(0,r.jsx)(n.code,{children:"electron-builder"})," 中，为 ",(0,r.jsx)(n.code,{children:"Windows"})," 平台提供了很多安装包打包方案，默认使用的就是 NSIS。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"electron-builder"})," 可以通过编写 ",(0,r.jsx)(n.code,{children:".nsh"})," 脚本文件的方式来实现自定义操作注册表的功能，给开发暴露的 ",(0,r.jsx)(n.code,{children:"NSIS"})," 钩子主要有",(0,r.jsx)(n.code,{children:"customHeader"}),"、",(0,r.jsx)(n.code,{children:"preInit"}),"、\xa0",(0,r.jsx)(n.code,{children:"customInit"}),"、\xa0",(0,r.jsx)(n.code,{children:"customInstall"}),"、\xa0",(0,r.jsx)(n.code,{children:"customUnInstall"}),"，等等。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'!macro customHeader\n  !system "echo \'\' > ${BUILD_RESOURCES_DIR}/customHeader"\n!macroend\n\n!macro preInit\n  ; This macro is inserted at the beginning of the NSIS .OnInit callback\n  !system "echo \'\' > ${BUILD_RESOURCES_DIR}/preInit"\n!macroend\n\n!macro customInit\n  !system "echo \'\' > ${BUILD_RESOURCES_DIR}/customInit"\n!macroend\n\n!macro customInstall\n  !system "echo \'\' > ${BUILD_RESOURCES_DIR}/customInstall"\n!macroend\n\n!macro customInstallMode\n  # set $isForceMachineInstall or $isForceCurrentInstall\n  # to enforce one or the other modes.\n!macroend\n\n!macro customWelcomePage\n  # Welcome Page is not added by default for installer.\n  !insertMacro MUI_PAGE_WELCOME\n!macroend\n\n!macro customUnWelcomePage\n  !define MUI_WELCOMEPAGE_TITLE "custom title for uninstaller welcome page"\n  !define MUI_WELCOMEPAGE_TEXT "custom text for uninstaller welcome page $\\r$\\n more"\n  !insertmacro MUI_UNPAGE_WELCOME\n!macroend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["对于 ",(0,r.jsx)(n.code,{children:"Rubick"})," 而言，我们需要实现将 ",(0,r.jsx)(n.code,{children:"Rubick"})," 添加到 Windows 系统菜单中识别右击文件的功能，那么我们需要编写这样的一个 ",(0,r.jsx)(n.code,{children:"installer.nsh"})," 脚本："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# 第15章—实战：Electron应用注入到系统右键菜单\n!macro customInstall\n   # 64 位操作\n   SetRegView 64\n   WriteRegStr HKCR "*\\shell\\rubick" "" "open w&ith rubick"\n   WriteRegStr HKCR "*\\shell\\rubick" "Icon" "$INSTDIR\\rubick.exe"\n   WriteRegStr HKCR "*\\shell\\rubick\\command" "" \'"$INSTDIR\\rubick.exe" "search" "%1"\'\n   # 32 位操作\n   SetRegView 32\n   WriteRegStr HKCR "*\\shell\\rubick" "" "open w&ith rubick"\n   WriteRegStr HKCR "*\\shell\\rubick" "Icon" "$INSTDIR\\rubick.exe"\n   WriteRegStr HKCR "*\\shell\\rubick\\command" "" \'"$INSTDIR\\rubick.exe" "search" "%1"\'\n!macroend\n# 卸载时删除\n!macro customUninstall\n   DeleteRegKey HKCR "*\\shell\\rubick"\n!macroend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["其中，",(0,r.jsx)(n.code,{children:"!macro customInstall"})," 和 ",(0,r.jsx)(n.code,{children:"!macroend"})," 之间的部分定义了一个自定义的安装宏。这个宏包含了在安装时向注册表写入相关条目的指令。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SetRegView"})," 用于设置注册表视图，",(0,r.jsx)(n.code,{children:"64"})," 和 ",(0,r.jsx)(n.code,{children:"32"})," 分别表示 64 位和 32 位系统。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WriteRegStr"})," 用于在注册表中写入字符串值。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HKCR"})," 是 ",(0,r.jsx)(n.code,{children:"HKEY_CLASSES_ROOT"})," 的缩写，是注册表中的根键，表示文件关联信息。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"*\\shell\\rubick"})," 是一个注册表路径，用于定义右键菜单中的 ",(0,r.jsx)(n.code,{children:"open with rubick"})," 选项。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Icon"})," 用于定义右键菜单中的图标，",(0,r.jsx)(n.code,{children:"$INSTDIR"})," 代表的是应用程序安装的路径。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"*\\shell\\rubick\\command"})," 定义了右键菜单选项对应的执行命令。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在安装时，该脚本会在注册表中创建一个名为 ",(0,r.jsx)(n.code,{children:"rubick"})," 的右键菜单选项，允许用户使用 ",(0,r.jsx)(n.code,{children:"rubick.exe"})," 打开特定类型的文件。在卸载时，脚本会删除注册表中与 ",(0,r.jsx)(n.code,{children:"rubick"})," 相关的条目，以清理注册表。"]}),"\n",(0,r.jsxs)(n.p,{children:["最后，为了让 ",(0,r.jsx)(n.code,{children:"electron-builder"})," 在打包时可以引入这段脚本，以 ",(0,r.jsx)(n.code,{children:"vue-cli-electron-builder"})," 举例，我们需要在构建配置中添加如下设置："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// vue.config.js\nnsis: {\n  // ...\n  include: 'public/installer.nsh',\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"最后，当我们安装完打包后的应用程序后，就会在注册表内出现如下内容："}),"\n",(0,r.jsxs)(n.h4,{id:"12-应用程序实现命令行启动功能",children:["1.2 应用程序实现命令行启动功能",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-应用程序实现命令行启动功能",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["我们知道，注册表中写入的 ",(0,r.jsx)(n.code,{children:"command"})," 是一段命令行脚本程序，用于启动应用程序。命令行启动应用程序会涉及到一个问题：有的时候我们的应用是个「单例应用」，也就是不能「多开」。"]}),"\n",(0,r.jsxs)(n.p,{children:["这个时候，我们就需要用到 ",(0,r.jsx)(n.code,{children:"Electron app"})," 模块下的一个非常重要的钩子：",(0,r.jsx)(n.code,{children:"second-instance"}),"。这个钩子是一个应用尝试打开第二个实例时触发，因此，当我们应用程序启动后，右击菜单中点击应用程序选项就会触发这个钩子函数，所以我们可以在这个钩子函数中添加执行动作："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"app.on('second-instance', (event, commandLine, workingDirectory) => {\n  // 当运行第二个实例时,将会聚焦到 mainWindow 这个窗口\n  if (mainWindow) {\n    // 显示窗口\n    if (mainWindow.isMinimized()) {\n      mainWindow.restore();\n    }\n    mainWindow.focus();\n    mainWindow.show();\n    // ...\n    // 这里可以通过 commandLine 和 workingDirectory 自定义执行逻辑\n  }\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["注意 ",(0,r.jsx)(n.code,{children:"second-instance"})," 这个事件的回调函数里，有 ",(0,r.jsx)(n.code,{children:"commandLine"})," 和",(0,r.jsx)(n.code,{children:"workingDeirectory"}),"，它们分别对应命令行参数中的 ",(0,r.jsx)(n.code,{children:"process.argv"})," 和对应的",(0,r.jsx)(n.code,{children:"cwd"}),"（执行路径）。"]}),"\n",(0,r.jsx)(n.p,{children:"以上我们就实现了点击系统右击菜单中的选项唤起应用程序特点功能的能力。"}),"\n",(0,r.jsxs)(n.h3,{id:"2-macos",children:["2. MacOS",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-macos",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在 MacOS 下要实现右击菜单，需要依赖的就是前面介绍的 ",(0,r.jsx)(n.code,{children:"Automator"})," 工具，首先，找到 automator 工具并打开："]}),"\n",(0,r.jsx)(n.p,{children:"然后新建一个快速操作："}),"\n",(0,r.jsxs)(n.p,{children:["其中，快速操作中的工作流程代表的是右击文件的类型，可以是图像文件、文件夹、PDF 等，可以根据需要选取，如果不限制品类，可以选择",(0,r.jsx)(n.code,{children:"没有输入"}),"，并位于 ",(0,r.jsx)(n.code,{children:"任何应用程序"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["接着将 ",(0,r.jsx)(n.code,{children:"shell"})," 选择成 ",(0,r.jsx)(n.code,{children:"/bin/bash"}),"，传递输入选成 ",(0,r.jsx)(n.code,{children:"作为自变量"}),"："]}),"\n",(0,r.jsx)(n.p,{children:"然后，将输入内容改成："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'/Applications/rubick.app/Contents/MacOS/rubick search "$@" > /dev/null 2>&1 &\n'})}),"\n",(0,r.jsxs)(n.p,{children:["其中，",(0,r.jsx)(n.code,{children:"/Applications/rubick.app/Contents/MacOS/rubick"})," 表示以命令行的方式启动 rubick 应用程序，",(0,r.jsx)(n.code,{children:'"$@"'})," 用于传递所有的参数给 ",(0,r.jsx)(n.code,{children:"rubick"})," 应用程序。"]}),"\n",(0,r.jsxs)(n.p,{children:["然后，保存这个快速操作到 ",(0,r.jsx)(n.code,{children:"~/Library/Services"})," 这个目录，可以看到一个 ",(0,r.jsx)(n.code,{children:"rubick.workflow"})," 的应用程序，然后通过右击菜单中的“自定”功能将快捷方式添加到右击菜单面板中："]}),"\n",(0,r.jsxs)(n.p,{children:["但是，作为一个应用程序，总不能每次让用户自己制作一个 ",(0,r.jsx)(n.code,{children:".workflow"})," 文件，然后手动把该文件添加到 ",(0,r.jsx)(n.code,{children:"~/Library/Services"})," 吧。所以我们提前将制作好的 ",(0,r.jsx)(n.code,{children:"rubick.workflow"})," 文件打包进入应用程序，然后再写一个脚本文件，在 Electron 应用程序启时检测 ",(0,r.jsx)(n.code,{children:"~/Library/Services"})," 目录中是否包含 ",(0,r.jsx)(n.code,{children:"rubick.workflow"})," 文件，如果没有，则拷贝这个文件到 ",(0,r.jsx)(n.code,{children:"~/Library/Services"})," 目录下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import os from 'os';\n\nconst copyFileOutsideOfElectronAsar = function (\n  sourceInAsarArchive,\n  destOutsideAsarArchive\n) {\n  if (fs.existsSync(sourceInAsarArchive)) {\n    // file will be copied\n    if (fs.statSync(sourceInAsarArchive).isFile()) {\n      const file = destOutsideAsarArchive;\n      const dir = path.dirname(file);\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n      }\n      fs.writeFileSync(file, fs.readFileSync(sourceInAsarArchive));\n    }\n\n    // dir is browsed\n    else if (fs.statSync(sourceInAsarArchive).isDirectory()) {\n      fs.readdirSync(sourceInAsarArchive).forEach(function (fileOrFolderName) {\n        copyFileOutsideOfElectronAsar(\n          sourceInAsarArchive + '/' + fileOrFolderName,\n          destOutsideAsarArchive + '/' + fileOrFolderName\n        );\n      });\n    }\n  }\n};\n\nconst dest = `${os.homedir}/Library/Services/rubick.workflow`;\nif (fs.existsSync(dest)) {\n  // 判断是否存在\n  return true;\n} else {\n  // 如果不存在就复制过去\n  try {\n    copyFileOutsideOfElectronAsar(\n      path.join(__static, 'rubick.workflow'),\n      dest\n    );\n  } catch (e) {\n    console.log(e);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["其中， ",(0,r.jsx)(n.code,{children:"copyFileOutsideOfElectronAsar"})," 函数的作用是将打包到 ",(0,r.jsx)(n.code,{children:".asar"})," 文件中的 ",(0,r.jsx)(n.code,{children:"rubick.workflow"})," 文件复制到 ",(0,r.jsx)(n.code,{children:"dest"})," 目录，之所以不直接使用 ",(0,r.jsx)(n.code,{children:"fs.copy()"})," 函数，主要是因为打包后的 ",(0,r.jsx)(n.code,{children:".asar"})," 是一个并不存在虚拟目录。关于这块的问题也有一个 ",(0,r.jsx)(n.a,{href:"https://github.com/electron/electron/issues/14320",target:"_blank",rel:"noopener noreferrer",children:"issue: fs.copyFile (and possibly other operations) Fails Once Built With ASAR"})," 说明。"]}),"\n",(0,r.jsx)(n.p,{children:"后续通过右击菜单点击应用程序选项触发命令行唤起应用程序的操作就和 Windows 的处理方式一模一样了，就不再赘述。"}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本小节，我们完成了将应用程序添加到系统右击菜单中的功能，这样便可以通过识别用户右击的文件唤起我们的应用程序特点功能的目的。但是在系统右击菜单中，如果每个应用程序都加入到了右击菜单，那么菜单栏目将会变得非常冗余，很难一眼就找到需要使用的应用程序，而且系统菜单的样式也没法自定义。"}),"\n",(0,r.jsx)(n.p,{children:"所以，你如果有打算自己实现一个系统级别的菜单栏，我们接着阅读下一小节来实现一个超级面板。"})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC15%E7%AB%A0%E2%80%94%E5%AE%9E%E6%88%98%EF%BC%9AElectron%E5%BA%94%E7%94%A8%E6%B3%A8%E5%85%A5%E5%88%B0%E7%B3%BB%E7%BB%9F%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"基础知识介绍",id:"基础知识介绍",depth:2},{text:"1. windows 的注册表",id:"1-windows-的注册表",depth:3},{text:"2. NSIS",id:"2-nsis",depth:3},{text:"3. Automator",id:"3-automator",depth:3},{text:"实现添加 Electron 应用到系统右击菜单",id:"实现添加-electron-应用到系统右击菜单",depth:2},{text:"1. Windows",id:"1-windows",depth:3},{text:"1.1 注册命令行启动程序到注册表中",id:"11-注册命令行启动程序到注册表中",depth:4},{text:"1.2 应用程序实现命令行启动功能",id:"12-应用程序实现命令行启动功能",depth:4},{text:"2. MacOS",id:"2-macos",depth:3},{text:"总结",id:"总结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);