"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["69871"],{699998:function(e,n,t){t.r(n),t.d(n,{default:()=>l});var s=t(552676),a=t(740453);let i=t.p+"static/image/46b5d3c4e2994f5255a967cfecd332bd.7c585e18.webp",d=t.p+"static/image/21dfa515ae5b4429525e7a83b8a3a659.ede2f1f7.webp";function r(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",blockquote:"blockquote",ol:"ol",li:"li",h3:"h3",code:"code",ul:"ul",pre:"pre",img:"img"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"12业务篇-简历制作之导出pdf",children:["12.业务篇-简历制作之导出PDF",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12业务篇-简历制作之导出pdf",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["上一章节，我们完成了数据的录入与展示，接下来到了平台应用生死关键时刻：",(0,s.jsx)(n.strong,{children:"如何将我们网页中写好的简历模版导出成 PDF"}),"，毕竟不能为我们所用，那么这个平台将没有任何的使用价值。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"如果对这块熟悉的同学，本章可以快速阅读或跳过，如果对导出 PDF 感兴趣且不熟悉的同学，希望本章节可以给你一些启发。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"导出-pdf",children:["导出 PDF",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#导出-pdf",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在前端将 HTML 网页转成 PDF 有多种方式，例如："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"生成图片再转 PDF：html2canvas + jsPdf"}),"\n",(0,s.jsx)(n.li,{children:"使用 pdfmake 实现 PDF 的导出"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"当然还有许多方法可以实现 html 转 pdf，在此项目中，主要讨论这两种方法的优缺点"}),"\n",(0,s.jsxs)(n.h3,{id:"html2canvas--jspdf",children:["html2canvas + jspdf",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html2canvas--jspdf",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/MrRio/jsPDF",target:"_blank",rel:"noopener noreferrer",children:"jsPdf"})," 是一个将 html 转 pdf 的插件，目前在 github 上拥有 22.1k 的 star，从数据上来看，还是比较受欢迎的，但该库作者是个外国人，并未支持国际化，所以如果内容方面是中文语言，导出就有问题。"]}),"\n",(0,s.jsxs)(n.p,{children:["没办法，我们只能曲线救国，换种方式实现，由于 jsPdf 提供一个 API，叫做 ",(0,s.jsx)(n.code,{children:"addImage"}),"，我们不禁思考，能否 将 html 页面，变成一张图片？换种说法，我们能否将 html 转成 canvas？再通过 canvas 提供的 toDataURL API 得到一张 base64 编码的 dataURL 呢？"]}),"\n",(0,s.jsxs)(n.p,{children:["要实现 html 转 canvas，目前相对热门的是 ",(0,s.jsx)(n.a,{href:"https://github.com/niklasvh/html2canvas",target:"_blank",rel:"noopener noreferrer",children:"html2canvas"})," ，该库目前还在维护，并且 github 上也拥有 23.5k 的 star。通过 html2canvas 结合 jspdf，就能轻松实现我们的功能。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"优点：对我而言，简单上手，并且网上大部分都采用此方式实现，遇到问题也能快速响应"}),"\n",(0,s.jsx)(n.li,{children:"缺点：jsPdf 对中文支持不够友好，html2canvas 转图片后可能出现模糊，需要定位解决。导出的 PDF 中文字无法复制、修改等，因为它本质就是一张图片"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"pdfmake",children:["pdfmake",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pdfmake",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"目前在 GitHub 上拥有 9.2k 的 star，从数据上看，也算很多人使用了。该库的亮点在于支持中文内容，既然能支持中文内容，我们就不需要将 html 转成 canvas 了。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"优点：支持中文内容，支持与后端交互，官方表示上手简单"}),"\n",(0,s.jsx)(n.li,{children:"缺点：并未使用过，可能存在未知坑"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"二选一",children:["二选一",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二选一",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"两种方案各有优点，只是在选择上，我们需要考虑其他的成本，如使用成本、业务场景等。"}),"\n",(0,s.jsx)(n.p,{children:"对于 pdfmake 我听过，但未实际使用过，可预知的是我并不知道会存在什么坑需要我去填，所以在时间成本考虑上，我会优先选择第一种；对于业务场景来讲，导出 pdf 之后，如果发现有错别字，内容输入有误等，只需要将内容更正，再点击一个“导出”按钮即可，相比直接在 pdf 中更正内容，貌似就多了个点击按钮操作。我想这也合乎情理，为了省略一步骤去折腾 pdfmake，是否真的有必要？"}),"\n",(0,s.jsxs)(n.p,{children:["最终采用方案一：html2canvas + jsPdf 实现，",(0,s.jsx)(n.strong,{children:"当然不喜该方案的小伙伴可以私下自行采用其他方案哈"})]}),"\n",(0,s.jsxs)(n.h3,{id:"代码实现",children:["代码实现",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码实现",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们进入 /common/utils 文件夹下，新增 htmlToPdf.ts 文件，编写我们的导出逻辑"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/renderer/common/utils/htmlToPdf.ts\nimport JsPdf from 'jspdf';\nimport html2canvas from 'html2canvas';\nconst A4Width = 592.28;\nconst A4Height = 841.89;\n\n/**\n * @description 导出PDF文件，暂时支持单页\n * @param {string} resumeName 导出文件名\n */\nexport function toPrintPdf(resumeName?: string) {\n  let name = resumeName || '未命名文件';\n  // \uD83D\uDC47 记住每个模版都需要在根容器组件添加 id\n  const dom: HTMLElement | any = document.querySelector('#visPdf');\n  if (dom) {\n    html2canvas(dom, {\n      allowTaint: true,\n    }).then((canvas) => {\n      let contentWidth = canvas.width;\n      let contentHeight = canvas.height;\n      // 一页pdf显示html页面生成的canvas高度，等比缩放\n      let pageHeight = (contentWidth / A4Width) * A4Height;\n      let leftHeight = contentHeight;\n      // 页面偏移\n      let position = 0;\n      let imgWidth = A4Width;\n      let imgHeight = (A4Width / contentWidth) * contentHeight;\n      let pageData = canvas.toDataURL('image/jpeg', 1.0);\n      // 这里的第一个参数表示方向，这里一定要选择 portrait\n      // 具体可看文档 https://artskydj.github.io/jsPDF/docs/jsPDF.html\n      let PDF = new JsPdf('portrait', 'pt', 'a4');\n      if (leftHeight < pageHeight) {\n        PDF.addImage(pageData, 'JPEG', 0, 0, imgWidth, imgHeight);\n      } else {\n        while (leftHeight > 0) {\n          PDF.addImage(pageData, 'JPEG', 0, position, imgWidth, imgHeight);\n          leftHeight -= pageHeight;\n          position -= A4Height;\n          if (leftHeight > 0) {\n            PDF.addPage();\n          }\n        }\n      }\n      PDF.save(name + '.pdf');\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"在业务使用时，就只需要调用此方法即可"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { toPrintPdf } from \'@common/utils/htmlToPdf\';\n\nfunction ResumeAction() {\n  const base: TSResume.Base = useSelector((state: any) => state.resumeModel.base);\n  const work: TSResume.Work = useSelector((state: any) => state.resumeModel.work);\n\n  // 导出PDF，格式为：姓名+学校+岗位\n  const onExport = () => {\n    toPrintPdf(`${base?.username}+${base?.school}+${work?.job}`);\n  };\n\n  return (\n    <div styleName="actions">\n      <MyButton size="middle" className="export-btn" onClick={onExport}>\n        导出PDF\n      </MyButton>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"效果",children:["效果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#效果",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"导出之后，图片清晰度也能接受"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本章节主要以导出 PDF 功能为主，分析两种解决方案，在时间成本与业务场景的考虑之下，最终采用 html2canvas 与 jsPdf 方式实现该功能。如果你有更好的方案，欢迎评论区指出。"}),"\n",(0,s.jsxs)(n.p,{children:["导出相关代码：",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/blob/chapter-11/app/renderer/common/utils/htmlToPdf.ts",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 htmlToPdf"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"如果您在边阅读边实践时，发现代码报错或者 TS 报错，那么小伙伴们可以根据报错信息，去线上看看相应的代码。"})}),"\n",(0,s.jsx)(n.p,{children:"如果对本章节存在疑问，欢迎在评论区留言。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}let l=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Electron%20%2B%20React%20%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8E%86%E5%B9%B3%E5%8F%B0%E5%AE%9E%E6%88%98%2F12.%E4%B8%9A%E5%8A%A1%E7%AF%87-%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%E4%B9%8B%E5%AF%BC%E5%87%BAPDF.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"导出 PDF",id:"导出-pdf",depth:2},{text:"html2canvas + jspdf",id:"html2canvas--jspdf",depth:3},{text:"pdfmake",id:"pdfmake",depth:3},{text:"二选一",id:"二选一",depth:3},{text:"代码实现",id:"代码实现",depth:3},{text:"效果",id:"效果",depth:3},{text:"总结",id:"总结",depth:2}],title:"12.业务篇-简历制作之导出PDF",headingTitle:"12.业务篇-简历制作之导出PDF",frontmatter:{}}}}]);