"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["51696"],{813572:function(e,n,s){s.r(n),s.d(n,{default:()=>c});var r=s(552676),t=s(740453);let i=s.p+"static/image/d904100b618d52105ae27e6b149d2e2a.17de7f76.webp",a=s.p+"static/image/0bb9258434d41c9ff1953fdf1098e7dc.d7a4c731.webp";function l(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",pre:"pre",code:"code",strong:"strong",h3:"h3",img:"img",ul:"ul"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"18样式篇-_-tailwind-csscss-in-js-与-sass",children:["18.样式篇 _ Tailwind CSS、CSS-in-JS 与 Sass",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#18样式篇-_-tailwind-csscss-in-js-与-sass",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Next.js 支持多种方式添加样式："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"内联 CSS"}),"\n",(0,r.jsx)(n.li,{children:"CSS 模块：创建局部 CSS 避免命名冲突，提升可维护性"}),"\n",(0,r.jsx)(n.li,{children:"全局 CSS"}),"\n",(0,r.jsx)(n.li,{children:"外部样式表"}),"\n",(0,r.jsx)(n.li,{children:"Tailwind CSS：一个 CSS 框架，通过组合的方式声明样式"}),"\n",(0,r.jsx)(n.li,{children:"CSS-in-JS：将 CSS 直接嵌入到 JavaScript 组件中，实现动态和局部样式"}),"\n",(0,r.jsx)(n.li,{children:"Sass：最流行的 CSS 预处理器"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"让我们来一一讲解。"}),"\n",(0,r.jsxs)(n.h2,{id:"1-内联-css",children:["1. 内联 CSS",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-内联-css",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"最基础的添加样式的方式便是使用内联 CSS，举个例子："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/about/page.js\nexport default function About() {\n  return (\n    <h1 style={{\n      color: red;\n    }}>Hello About!</h1>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"2-css-模块",children:["2. CSS 模块",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-css-模块",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Next.js 内置了对 CSS 模块的支持。使用 CSS 模块，你只需要使用 ",(0,r.jsx)(n.code,{children:".module.css"}),"作为文件后缀名，Next.js 就会自动进行处理。"]}),"\n",(0,r.jsx)(n.p,{children:"CSS 模块的作用在于实现局部 CSS，本质是创建一个不会重复的类名。这样你就可以在不同的文件里使用相同的类名，而不用担心发生样式冲突。这是最理想的实现组件级别 CSS 的方式。"}),"\n",(0,r.jsx)(n.p,{children:"让我们举个例子："}),"\n",(0,r.jsxs)(n.p,{children:["首先，创建一个 ",(0,r.jsx)(n.code,{children:"styles.module.css"}),"文件，样式书写方式如同正常的 CSS 文件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/dashboard/styles.module.css\n.dashboard {\n  padding: 24px;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后，CSS 模块可以被导入到 ",(0,r.jsx)(n.code,{children:"app"})," 目录下的任意文件，让我们导入并使用该样式："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/dashboard/layout.js\nimport styles from './styles.module.css'\n \nexport default function DashboardLayout({ children }) {\n  return <section className={styles.dashboard}>{children}</section>\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"3-全局样式",children:["3. 全局样式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-全局样式",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["全局样式，顾名思义，应用到所有路由的样式，像我们传统写页面 CSS 的时候，都会引入 ",(0,r.jsx)(n.code,{children:"normalize.css"})," 或者 ",(0,r.jsx)(n.code,{children:"reset.css"}),"等，这种场景就适合使用全局样式。"]}),"\n",(0,r.jsxs)(n.p,{children:["全局样式可以被导入 ",(0,r.jsx)(n.code,{children:"app"})," 目录下的任意 layout、page 或者组件中。（为什么总是强调任意呢？因为在 ",(0,r.jsx)(n.code,{children:"pages"})," 目录下，也就是之前的 Pages Router 模式，全局样式只能被导入到 ",(0,r.jsx)(n.code,{children:"_app.js"})," 文件，这是一个新的改变。）"]}),"\n",(0,r.jsx)(n.p,{children:"具体怎么使用呢？让我们举个例子："}),"\n",(0,r.jsxs)(n.p,{children:["首先，创建一个 ",(0,r.jsx)(n.code,{children:"app/global.css"}),"  样式文件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"body {\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后，在根布局（",(0,r.jsx)(n.code,{children:"app/layout.js"}),"）导入 ",(0,r.jsx)(n.code,{children:"global.css"}),"，该样式会被应用于应用里的每个路由："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js\nimport './global.css'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"4-外部样式表",children:["4. 外部样式表",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-外部样式表",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"你也可以通过导入外部包的方式添加样式，举个例子："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// app/layout.js\nimport \'bootstrap/dist/css/bootstrap.css\'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang="en">\n      <body className="container">{children}</body>\n    </html>\n  )\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"不过要注意，该外部包必须是从 npm 包直接导入或者下载完和你的代码放在一起。"}),"\n",(0,r.jsxs)(n.p,{children:["如果我想引用外部 CDN CSS 文件呢？就比如",(0,r.jsx)(n.a,{href:"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css",target:"_blank",rel:"noopener noreferrer",children:"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"})," 这种文件？"]}),"\n",(0,r.jsxs)(n.p,{children:["那你可以使用 ",(0,r.jsx)(n.code,{children:"<link>"})," 标签添加在 Root Layout 中，就像这样："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'// app/layout.js\nimport "./globals.css";\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang="en">\n      <head>\n        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />\n      </head>\n      <body>{ children }</body>\n    </html>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"使用样式的时候要注意："}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"即时刷新："})," 在本地使用",(0,r.jsx)(n.code,{children:"next dev"})," 运行项目的时候，本地样式（无论是全局样式还是 CSS 模块），都会在你保存更改后立刻刷新，你可以即时看到样式变化。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"打包构建"})," ：当使用 ",(0,r.jsx)(n.code,{children:"next build"})," 的时候，CSS 文件会被打包成更少的压缩 ",(0,r.jsx)(n.code,{children:".css"})," 文件，这是为了减少网络请求，从而提高加载速度，所以不用担心创建多个 css 文件而影响了性能。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"禁用 JS："})," 当你禁用 JavaScript 的时候，在生产版本（",(0,r.jsx)(n.code,{children:"next start"}),"），样式依然会被加载。也就是说，打包构建后的代码中的 CSS 并不是通过 JS 注入的。但是开发的时候（",(0,r.jsx)(n.code,{children:"next dev"}),"），为了开启快速刷新，JavaScript 依然是有必要的。"]}),"\n",(0,r.jsxs)(n.h2,{id:"5-tailwind-css",children:["5. Tailwind CSS",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-tailwind-css",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://tailwindcss.com/",target:"_blank",rel:"noopener noreferrer",children:"Tailwind CSS"})," 是一个非常知名的 CSS 框架，本质是一个工具集，包含了大量比如 ",(0,r.jsx)(n.code,{children:"flex"}),"、",(0,r.jsx)(n.code,{children:"pt-4"}),"、",(0,r.jsx)(n.code,{children:"text-center"}),"、",(0,r.jsx)(n.code,{children:"rotate-90"}),"等工具类，可以组合使用并直接在 HTML 代码上实现任何 UI 设计。与 Next.js 搭配使用非常顺手。Next.js 官方便是用的 Tailwind CSS。"]}),"\n",(0,r.jsxs)(n.p,{children:["在使用 ",(0,r.jsx)(n.code,{children:"create-next-app"}),"创建项目的时候，如果你在命令行中选择了使用 Tailwind CSS，则相关配置都会自动生成，可以直接使用。如果没有选择，希望引入 Tailwind CSS，可以参考此步骤。其实 Tailwind CSS 官方也提供了针对各个框架的",(0,r.jsx)(n.a,{href:"https://tailwindcss.com/docs/installation/framework-guides",target:"_blank",rel:"noopener noreferrer",children:"使用指南："})]}),"\n",(0,r.jsxs)(n.h3,{id:"51-安装",children:["5.1. 安装",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#51-安装",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在项目根目录执行以下命令："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n"})}),"\n",(0,r.jsxs)(n.p,{children:["会同时生成 ",(0,r.jsx)(n.code,{children:"tailwind.config.js"}),"和 ",(0,r.jsx)(n.code,{children:"postcss.config.js"}),"文件。"]}),"\n",(0,r.jsxs)(n.h3,{id:"52-配置-tailwind",children:["5.2. 配置 Tailwind",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#52-配置-tailwind",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"postcss.config.js"})," 不需要修改。在 ",(0,r.jsx)(n.code,{children:"tailwind.config.js"})," 中添加使用 Tailwind CSS 类名的文件路径："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// tailwind.config.js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n \n    // 嫌麻烦，你也可以直接使用 `src` 目录\n    './src/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"53-导入样式",children:["5.3. 导入样式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#53-导入样式",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"添加 Tailwind CSS 指令，将 Tailwind 的样式注入到全局样式中。使用方式如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/globals.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在根布局（",(0,r.jsx)(n.code,{children:"app/layout.tsx"}),"），导入 ",(0,r.jsx)(n.code,{children:"globals.css"})," ："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js \nimport './globals.css'\n \nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"54-使用类名",children:["5.4. 使用类名",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#54-使用类名",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"然后你就可以在应用里使用 Tailwind 的工具类名："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// app/page.js\nexport default function Page() {\n  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"55-辅助使用",children:["5.5. 辅助使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#55-辅助使用",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在 VSCode 中使用的时候，可以安装 ",(0,r.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss",target:"_blank",rel:"noopener noreferrer",children:"Tailwind CSS IntelliSense "}),"这个插件，提供自动功能、语法校验、悬停预览等功能。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["Tailwind CSS 中的工具类众多，记不清的时候也可以查询这个",(0,r.jsx)(n.a,{href:"https://tailwindcomponents.com/cheatsheet/",target:"_blank",rel:"noopener noreferrer",children:"速查表"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"6-css-in-js",children:["6. CSS-in-JS",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-css-in-js",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"61-介绍",children:["6.1. 介绍",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#61-介绍",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["CSS-in-JS，顾名思义，将 CSS 写在 JS 文件里，而不是单独新建如 ",(0,r.jsx)(n.code,{children:".css"}),"、",(0,r.jsx)(n.code,{children:".scss"}),"等文件。这样就可以在 CSS 中使用 JS 的变量定义、函数调用、条件判断等功能。"]}),"\n",(0,r.jsx)(n.p,{children:"之所以能够流行，也跟 React、Vue 等框架的流行有关，“组件”的概念开始深入人心。因为 Vue 本身有自己的 CSS 方案，React 没有，所以 CSS-in-JS 也多在 React 社区中讨论。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"实现 CSS-in-JS 的库有很多，每个库的实现、使用方式、语法也不尽相同。目前 Next.js 客户端组件中支持使用的库有："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://kuma-ui.com/",target:"_blank",rel:"noopener noreferrer",children:"kuma-ui"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://mui.com/material-ui/guides/next-js-app-router/",target:"_blank",rel:"noopener noreferrer",children:"@mui/material"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://panda-css.com/",target:"_blank",rel:"noopener noreferrer",children:"pandacss"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/styling/css-in-js#styled-jsx",target:"_blank",rel:"noopener noreferrer",children:"styled-jsx"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/styling/css-in-js#styled-components",target:"_blank",rel:"noopener noreferrer",children:"styled-components"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/johanholmerin/style9",target:"_blank",rel:"noopener noreferrer",children:"style9"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://tamagui.dev/docs/guides/next-js#server-components",target:"_blank",rel:"noopener noreferrer",children:"tamagui"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://tss-react.dev/",target:"_blank",rel:"noopener noreferrer",children:"tss-react"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/vercel/next.js/tree/canary/examples/with-vanilla-extract",target:"_blank",rel:"noopener noreferrer",children:"vanilla-extract"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/emotion-js/emotion/issues/2928",target:"_blank",rel:"noopener noreferrer",children:"emotion"})," 正在支持中……"]}),"\n",(0,r.jsx)(n.p,{children:"如果你希望设置服务端组件的样式，推荐使用 CSS 模块或者其他输出 CSS 文件的解决方案比如 PostCSS 或者 Tailwind CSS。"}),"\n",(0,r.jsxs)(n.h3,{id:"62-配置方式",children:["6.2. 配置方式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#62-配置方式",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在 Next.js 中配置 CSS-in-JS 的基本原理分为三步："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"在渲染的时候有一个包含所有 CSS 规则的样式注册表"}),"\n",(0,r.jsxs)(n.li,{children:["使用 ",(0,r.jsx)(n.code,{children:"useServerInsertedHTML"}),"hook 在内容被使用前注入样式规则"]}),"\n",(0,r.jsx)(n.li,{children:"使用包含样式注册表的客户端组件包裹应用"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"63-styled-jsx",children:["6.3. styled-jsx",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#63-styled-jsx",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["这三步听起来有些复杂，让我们以 ",(0,r.jsx)(n.code,{children:"styled-jsx"})," 为例进行讲解。注意在客户端组件使用 ",(0,r.jsx)(n.code,{children:"styled-jsx"}),"至少需要使用 ",(0,r.jsx)(n.code,{children:"v5.1.0"}),"版本。"]}),"\n",(0,r.jsx)(n.p,{children:"首先创建一个新的注册表："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/registry.js\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\n \nexport default function StyledJsxRegistry({ children }) {\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\n \n  useServerInsertedHTML(() => {\n    const styles = jsxStyleRegistry.styles()\n    jsxStyleRegistry.flush()\n    return <>{styles}</>\n  })\n \n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后用此包含注册表的组件包裹根组件的 ",(0,r.jsx)(n.code,{children:"children"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js\nimport StyledJsxRegistry from './registry'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后你就可以在 ",(0,r.jsx)(n.code,{children:"page.js"})," 中使用："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'export default function Page() {\n  return (\n    <div>\n      <div className="container">text\n      </div>\n\n      <style jsx>{`\n        .container {\n          display: grid;\n          grid-template-columns: repeat(1, minmax(0, 1fr));\n          gap: 1.5rem /* 24px */;\n        }\n\n        @media (min-width: 1024px) {\n          .container {\n            grid-template-columns: repeat(3, minmax(0, 1fr));\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["示例代码地址：",(0,r.jsx)(n.a,{href:"https://github.com/vercel/app-playground/tree/main/app/styling/styled-jsx",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/vercel/app-playground/tree/main/app/styling/styled-jsx"})]}),"\n",(0,r.jsxs)(n.h3,{id:"64-styled-components",children:["6.4. Styled Components",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#64-styled-components",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Styled Components 的配置也大致如此，注意使用 ",(0,r.jsx)(n.code,{children:"styled-components@6"})," 或者更高版本。"]}),"\n",(0,r.jsx)(n.p,{children:"首先，创建一个全局注册表："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// lib/registry.js\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\n \nexport default function StyledComponentsRegistry({ children }) {\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())\n \n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement()\n    styledComponentsStyleSheet.instance.clearTag()\n    return <>{styles}</>\n  })\n \n  if (typeof window !== 'undefined') return <>{children}</>\n \n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后用此包含注册表的组件包裹根组件的 ",(0,r.jsx)(n.code,{children:"children"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js\nimport StyledComponentsRegistry from './lib/registry'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>\n      </body>\n    </html>\n  )\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后你就可以在 page.js 中使用："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use client';\n\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, minmax(0, 1fr));\n  gap: 1.5rem /* 24px */;\n`;\n\nconst SkeletonInner = styled.div`\n  padding: 1rem /* 16px */;\n  background-color: rgb(24 24 27 / 0.8);\n  border-radius: 1rem /* 16px */;\n`;\n\nconst SkeletonImg = styled.div`\n  height: 3.5rem /* 56px */;\n  border-radius: 0.5rem /* 8px */;\n  background-color: rgb(63 63 70 / 1);\n`;\n\nconst SkeletonBtn = styled.div`\n  margin-top: 0.75rem /* 12px */;\n  width: 25%;\n  height: 0.75rem /* 12px */;\n  border-radius: 0.5rem /* 8px */;\n  background-color: rgb(255 0 128 / 1);\n`;\n\nconst Skeleton = () => (\n  <SkeletonInner>\n    <SkeletonImg />\n    <SkeletonBtn />\n  </SkeletonInner>\n);\n\nexport default function Page() {\n  return (\n    <div className=\"space-y-4\">\n      <h1 className=\"text-xl font-medium text-gray-400/80\">\n        Styled with Styled Components\n      </h1>\n      <Container>\n        <Skeleton />\n        <Skeleton />\n        <Skeleton />\n      </Container>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["示例代码地址：",(0,r.jsx)(n.a,{href:"https://github.com/vercel/app-playground/tree/main/app/styling/styled-components",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/vercel/app-playground/tree/main/app/styling/styled-components"})]}),"\n",(0,r.jsxs)(n.h2,{id:"7-sass",children:["7. Sass",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-sass",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"71-sass-使用",children:["7.1. Sass 使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#71-sass-使用",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Sass 作为知名的 CSS 预处理器已无须过多介绍。Next.js 内置了对 Sass 文件的支持，你需要使用 ",(0,r.jsx)(n.code,{children:".scss"}),"和 ",(0,r.jsx)(n.code,{children:".sass"}),"作为文件后缀。"]}),"\n",(0,r.jsxs)(n.p,{children:["你也可以结合 CSS 模块使用组件级别的 Sass， 你需要使用",(0,r.jsx)(n.code,{children:".module.scss"}),"或者 ",(0,r.jsx)(n.code,{children:".module.sass"}),"作为文件后缀。"]}),"\n",(0,r.jsxs)(n.p,{children:["使用 sass，你需要首先安装 ",(0,r.jsx)(n.a,{href:"https://github.com/sass/sass",target:"_blank",rel:"noopener noreferrer",children:"sass"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"npm install --save-dev sass\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"72-自定义配置",children:["7.2. 自定义配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#72-自定义配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果你希望配置 Sass 编译器，使用 ",(0,r.jsx)(n.code,{children:"next.config.js"})," 的 ",(0,r.jsx)(n.code,{children:"sassOptions"}),"选项："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// next.config.js\nconst path = require('path')\n \nmodule.exports = {\n  sassOptions: {\n    includePaths: [path.join(__dirname, 'styles')],\n  },\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"73-sass-变量",children:["7.3 Sass 变量",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#73-sass-变量",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Next.js 支持从 CSS 模块文件导出 Sass 变量。这是一个示例代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/variables.module.scss\n$primary-color: #64ff00;\n \n:export {\n  primaryColor: $primary-color;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\n// maps to root `/` URL\n \nimport variables from './variables.module.scss'\n \nexport default function Page() {\n  return <h1 style={{ color: variables.primaryColor }}>Hello, Next.js!</h1>\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/styling/css-modules",target:"_blank",rel:"noopener noreferrer",children:"Styling: CSS Modules"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/styling/tailwind-css",target:"_blank",rel:"noopener noreferrer",children:"Styling: Tailwind CSS"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/styling/css-in-js",target:"_blank",rel:"noopener noreferrer",children:"Styling: CSS-in-JS"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/styling/sass",target:"_blank",rel:"noopener noreferrer",children:"Styling: Sass"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://2023.stateofcss.com/zh-Hans/css-in-js/",target:"_blank",rel:"noopener noreferrer",children:"State of CSS 2023: CSS-in-JS"})}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F18.%E6%A0%B7%E5%BC%8F%E7%AF%87%20_%20Tailwind%20CSS%E3%80%81CSS-in-JS%20%E4%B8%8E%20Sass.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. 内联 CSS",id:"1-内联-css",depth:2},{text:"2. CSS 模块",id:"2-css-模块",depth:2},{text:"3. 全局样式",id:"3-全局样式",depth:2},{text:"4. 外部样式表",id:"4-外部样式表",depth:2},{text:"5. Tailwind CSS",id:"5-tailwind-css",depth:2},{text:"5.1. 安装",id:"51-安装",depth:3},{text:"5.2. 配置 Tailwind",id:"52-配置-tailwind",depth:3},{text:"5.3. 导入样式",id:"53-导入样式",depth:3},{text:"5.4. 使用类名",id:"54-使用类名",depth:3},{text:"5.5. 辅助使用",id:"55-辅助使用",depth:3},{text:"6. CSS-in-JS",id:"6-css-in-js",depth:2},{text:"6.1. 介绍",id:"61-介绍",depth:3},{text:"6.2. 配置方式",id:"62-配置方式",depth:3},{text:"6.3. styled-jsx",id:"63-styled-jsx",depth:3},{text:"6.4. Styled Components",id:"64-styled-components",depth:3},{text:"7. Sass",id:"7-sass",depth:2},{text:"7.1. Sass 使用",id:"71-sass-使用",depth:3},{text:"7.2. 自定义配置",id:"72-自定义配置",depth:3},{text:"7.3 Sass 变量",id:"73-sass-变量",depth:3},{text:"参考链接",id:"参考链接",depth:2}],title:"18.样式篇 _ Tailwind CSS、CSS-in-JS 与 Sass",headingTitle:"18.样式篇 _ Tailwind CSS、CSS-in-JS 与 Sass",frontmatter:{}}}}]);