"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["65069"],{406275:function(e,n,s){s.r(n),s.d(n,{default:()=>R});var r=s(552676),i=s(740453);let c=s.p+"static/image/304bbc05c3a7cdff735a0488c9cadceb.20fc53c1.webp",t=s.p+"static/image/00fd67f25c80312774dd60de18d9a147.a1399b84.webp",a=s.p+"static/image/b808295647f32c038f0134bc92e41559.e6788341.webp",d=s.p+"static/image/66b7e246ecb7d220a603384e1a755252.be0f3c68.webp",l=s.p+"static/image/dd687492a5f451105d81ac83a1b23390.0f0db3d5.webp",o=s.p+"static/image/3a097601cde73d00bd09fd6b7f4fcd70.bd3a894c.webp",p=s.p+"static/image/ec1b4db0b5ed34a22f2b69fb01ab5ff0.f0679237.webp",j=s.p+"static/image/e53e4e11c8d237cd655b091ad7a9e34a.e762c155.webp",h=s.p+"static/image/942e06ebfc85180ec5bacb016acd630b.de8c0fc5.webp",x=s.p+"static/image/0e133d5887c9e0c13fbfbc5a3767b21f.cea86834.webp",m=s.p+"static/image/e539d70fa3f004cbc07f8c2b7b4049fc.1ef2b68c.webp",g=s.p+"static/image/f4a0d06c4a6ed48f4bebf2a64770b6ac.46f58e15.webp",b=s.p+"static/image/bf2043e60c1115f734772235fcc592d1.b61406ce.webp",u=s.p+"static/image/74c3dfebd4b0365dc309abeb3285e9e1.4ed0b62d.webp",f=s.p+"static/image/7549316a8850b3dcdea255e236ec864c.ccc91636.webp",w=s.p+"static/image/3ff0d90b227a47c8474534c2763ddc08.985dbb47.webp",v=s.p+"static/image/915e101e4a4df227ba2324eecc432582.ad05ecf0.webp",D=s.p+"static/image/6b2dea3afa9951ee0f17c425cdd363c0.c441a438.webp",U=s.p+"static/image/32b01466106b25472199983be661ca08.eb877342.webp",E=s.p+"static/image/7c8cfeca29c9a66778e1ffa50b52d2ff.3176db67.webp",S=s.p+"static/image/dfc1a8e746cb36f1ce87c52b59ed717b.b33e9e0c.webp",N=s.p+"static/image/1e648bf00750d1f9db74b49c0f971d60.afcc01f3.webp",y=s.p+"static/image/e61bdb6bd306226493abe30869b599e4.59f23dcf.webp",B=s.p+"static/image/8c83c1143a12461b05777dd0c78954e8.68362ab6.webp",P=s.p+"static/image/fe6d843a78ca61a20033e05fc5ce77a9.2ebee852.webp",M=s.p+"static/image/d8bc936b38ccb96be14e2d6bb2e04128.bd370bd8.webp",O=s.p+"static/image/ffe38cec439ef7cfd8c65fc50e2a5acd.c3905848.webp";function A(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"28-图书管理系统用户模块后端开发",children:["28. 图书管理系统：用户模块后端开发",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#28-图书管理系统用户模块后端开发",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们做了需求分析，并画了原型图，这节开始写下后端代码。"}),"\n",(0,r.jsx)(n.p,{children:"创建个 nest 项目："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest new book-management-system-backend\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"进入项目，把服务跑起来："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"浏览器访问下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"服务跑起来了。"}),"\n",(0,r.jsx)(n.p,{children:"然后我们先实现下登录、注册。"}),"\n",(0,r.jsx)(n.p,{children:"创建一个 user 模块："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g resource user --no-spec\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"--no-spec 是不生成单测代码。"}),"\n",(0,r.jsx)(n.p,{children:"可以看到，src 下多了 user 模块的代码，并自动在 AppModule 里引入了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后我们在 UserConstructor 添加注册接口："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Post, Body} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { RegisterUserDto } from './dto/register-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('register')\n  register(@Body() registerUserDto: RegisterUserDto) {\n    console.log(registerUserDto);\n    return 'done';\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"路由是 /user/register 的 POST 接口。"}),"\n",(0,r.jsx)(n.p,{children:"创建 dto/register-user.dto.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export class RegisterUserDto {\n    username: string;\n    password: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后在 postman 里调用下这个接口："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，服务端接收到了请求体的参数，并且返回了响应。"}),"\n",(0,r.jsx)(n.p,{children:"我们还要对参数做一些校验，校验请求体的参数需要用到 ValidationPipe"}),"\n",(0,r.jsx)(n.p,{children:"在 main.ts 里全局启用 ValidationPipe："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"app.useGlobalPipes(new ValidationPipe());\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后安装用到的包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save class-transformer class-validator\n"})}),"\n",(0,r.jsx)(n.p,{children:"之后就可以在 dto 里添加 class-validator 的校验规则了："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { IsNotEmpty, MinLength } from \"class-validator\";\n\nexport class RegisterUserDto {\n    @IsNotEmpty({ message: '用户名不能为空' })\n    username: string;\n\n    @IsNotEmpty({ message: '密码不能为空' })\n    @MinLength(6, { message: '密码最少 6 位'})\n    password: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"试一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:U,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"校验生效了。"}),"\n",(0,r.jsx)(n.p,{children:"现在接收到的参数是普通对象："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 ValidationPipe 指定 transform: true 之后，就会转为 dto 的实例了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后我们来实现下具体的注册逻辑。"}),"\n",(0,r.jsx)(n.p,{children:"我们还没有学习数据库，这里就用 json 文件来存储数据吧。"}),"\n",(0,r.jsx)(n.p,{children:"创建一个 db 模块："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g module db\nnest g service db\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这里没指定 --no-spec 也没生成单测文件是因为我在 nest-cli.json 里配了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们希望 DbModule 用的时候可以传入 json 文件的存储路径："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 UserModule 里用的时候，path 是 users.json，在 BookModule 用的时候，path 是 books.json"}),"\n",(0,r.jsx)(n.p,{children:"这种需要传参的模块就是动态模块了。"}),"\n",(0,r.jsx)(n.p,{children:"而且不同模块里用传不同的参数，我们会用 register 作为方法名。"}),"\n",(0,r.jsx)(n.p,{children:"写下 db.module.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { DynamicModule, Module } from '@nestjs/common';\nimport { DbService } from './db.service';\n\nexport interface DbModuleOptions {\n  path: string\n}\n\n@Module({})\nexport class DbModule {\n  static register(options: DbModuleOptions ): DynamicModule {\n    return {\n      module: DbModule,\n      providers: [\n        {\n          provide: 'OPTIONS',\n          useValue: options,\n        },\n        DbService,\n      ],\n      exports: [DbService]\n    };\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 register 方法里接收 options 参数，返回 providers、exports 等模块配置。"}),"\n",(0,r.jsx)(n.p,{children:"把传入的 options 用 useValue 来声明为 provider，token 为 OPTIONS。"}),"\n",(0,r.jsx)(n.p,{children:"在 DbService 里实现下 read、write 方法："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Inject, Injectable } from '@nestjs/common';\nimport { DbModuleOptions } from './db.module';\nimport { access, readFile, writeFile } from 'fs/promises';\n\n@Injectable()\nexport class DbService {\n\n    @Inject('OPTIONS')\n    private options: DbModuleOptions;\n\n    async read() {\n        const filePath  = this.options.path;\n\n        try {\n            await access(filePath)\n        } catch(e) {\n            return [];\n        }\n\n        const str = await readFile(filePath, {\n            encoding: 'utf-8'\n        });\n        \n        if(!str) {\n            return []\n        }\n\n        return JSON.parse(str);\n        \n    }\n\n    async write(obj: Record<string, any>) {\n        await writeFile(this.options.path, JSON.stringify(obj || []), {\n            encoding: 'utf-8'\n        });\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"read 方法就是读取文件内容，然后 JSON.parse 一下转为对象。如果文件不存在就返回孔数组"}),"\n",(0,r.jsx)(n.p,{children:"write 方法是 JSON.stringify 之后写入文件。"}),"\n",(0,r.jsx)(n.p,{children:"DbModule 封装好了，接下来就可以继续写注册逻辑了："}),"\n",(0,r.jsx)(n.p,{children:"在 UserController 里调用下 UserService 的 register 方法："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Post('register')\nasync register(@Body() registerUserDto: RegisterUserDto) {\n    return this.userService.register(registerUserDto);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后在 UserService 里实现这个方法："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { DbService } from 'src/db/db.service';\nimport { User } from './entities/user.entity';\n\n@Injectable()\nexport class UserService {\n\n    @Inject(DbService)\n    dbService: DbService;\n\n    async register(registerUserDto: RegisterUserDto) {\n        const users: User[] = await this.dbService.read();\n        \n        const foundUser = users.find(item => item.username === registerUserDto.username);\n\n        if(foundUser) {\n            throw new BadRequestException('该用户已经注册');\n        }\n\n        const user = new User();\n        user.username = registerUserDto.username;\n        user.password = registerUserDto.password;\n        users.push(user);\n\n        await this.dbService.write(users);\n        return user;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"注入 DbService 来读写数据。"}),"\n",(0,r.jsx)(n.p,{children:"首先读取出 users 的数据，如果找到当前 username，那就返回 400 的响应提示用户已注册。"}),"\n",(0,r.jsx)(n.p,{children:"否则创建一个新的用户，写入文件中。"}),"\n",(0,r.jsx)(n.p,{children:"user.entity.ts 也要改下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export class User {\n    username: string;\n    password: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 postman 里调用下试试："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"注册成功，创建了 users.json 文件，并写入了数据。"}),"\n",(0,r.jsx)(n.p,{children:"再注册一个："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"也没问题。"}),"\n",(0,r.jsx)(n.p,{children:"再次注册同样的 username 会返回 400"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"注册完成了，然后再实现下登录："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Post('login')\nasync login(@Body() loginUserDto: LoginUserDto) {\n  return this.userService.login(loginUserDto);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"添加 user/dto/login-user.dto.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { IsNotEmpty, MinLength } from \"class-validator\";\n\nexport class LoginUserDto {\n    @IsNotEmpty({ message: '用户名不能为空' })\n    username: string;\n\n    @IsNotEmpty({ message: '密码不能为空' })\n    @MinLength(6, { message: '密码最少 6 位'})\n    password: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"和注册的校验规则一样。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"async login(loginUserDto: LoginUserDto) {\n    const users: User[] = await this.dbService.read();\n\n    const foundUser = users.find(item => item.username === loginUserDto.username);\n\n    if(!foundUser) {\n        throw new BadRequestException('用户不存在');\n    }\n\n    if(foundUser.password !== loginUserDto.password) {\n        throw new BadRequestException('密码不正确');\n    }\n\n    return foundUser;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"测试下："}),"\n",(0,r.jsxs)(n.p,{children:["当不满足校验规则时：\n",(0,r.jsx)("img",{src:d,alt:""})]}),"\n",(0,r.jsx)(n.p,{children:"当用户不存在时："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"当密码不正确时："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"登录成功时："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样，我们登录注册就都完成了。"}),"\n",(0,r.jsxs)(n.p,{children:["案例代码上传了",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/book-management-system-backend/",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这节我们实现了用户模块的登录、注册功能。"}),"\n",(0,r.jsx)(n.p,{children:"通过读写文件实现了数据存储，封装了一个动态模块，用到时候传入 path，然后模块内的 service 里会读写这个文件的内容，通过 JSON.parse、JSON.stringify 和对象互转。"}),"\n",(0,r.jsx)(n.p,{children:"通过 ValidationPipe + class-validator 实现了 dto 的校验。"}),"\n",(0,r.jsx)(n.p,{children:"然后实现了注册和登录的业务逻辑。"}),"\n",(0,r.jsx)(n.p,{children:"这样，用户模块的功能就完成了。"})]})}function I(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(A,{...e})}):A(e)}let R=I;I.__RSPRESS_PAGE_META={},I.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F28.%20%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"28. 图书管理系统：用户模块后端开发",headingTitle:"28. 图书管理系统：用户模块后端开发",frontmatter:{}}}}]);