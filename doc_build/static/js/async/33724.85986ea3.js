"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["33724"],{540211:function(n,e,s){s.r(e),s.d(e,{default:()=>t});var r=s(552676),c=s(740453);function a(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",strong:"strong",code:"code",pre:"pre"},(0,c.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"26编程风格",children:["26.编程风格",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#26编程风格",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。"}),"\n",(0,r.jsxs)(e.p,{children:["多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 ",(0,r.jsx)(e.a,{href:"https://github.com/airbnb/javascript",target:"_blank",rel:"noopener noreferrer",children:"Airbnb"})," 公司的 JavaScript 风格规范。"]}),"\n",(0,r.jsxs)(e.h2,{id:"块级作用域",children:["块级作用域",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#块级作用域",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"（1）let 取代 var"})}),"\n",(0,r.jsxs)(e.p,{children:["ES6 提出了两个新的声明变量的命令：",(0,r.jsx)(e.code,{children:"let"}),"和",(0,r.jsx)(e.code,{children:"const"}),"。其中，",(0,r.jsx)(e.code,{children:"let"}),"完全可以取代",(0,r.jsx)(e.code,{children:"var"}),"，因为两者语义相同，而且",(0,r.jsx)(e.code,{children:"let"}),"没有副作用。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"'use strict';\n\nif (true) {\n  let x = 'hello';\n}\n\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["上面代码如果用",(0,r.jsx)(e.code,{children:"var"}),"替代",(0,r.jsx)(e.code,{children:"let"}),"，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，",(0,r.jsx)(e.code,{children:"var"}),"命令做不到这一点。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"var"}),"命令存在变量提升效用，",(0,r.jsx)(e.code,{children:"let"}),"命令没有这个问题。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"'use strict';\n\nif (true) {\n  console.log(x); // ReferenceError\n  let x = 'hello';\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["上面代码如果使用",(0,r.jsx)(e.code,{children:"var"}),"替代",(0,r.jsx)(e.code,{children:"let"}),"，",(0,r.jsx)(e.code,{children:"console.log"}),"那一行就不会报错，而是会输出",(0,r.jsx)(e.code,{children:"undefined"}),"，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。"]}),"\n",(0,r.jsxs)(e.p,{children:["所以，建议不再使用",(0,r.jsx)(e.code,{children:"var"}),"命令，而是使用",(0,r.jsx)(e.code,{children:"let"}),"命令取代。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"（2）全局常量和线程安全"})}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.code,{children:"let"}),"和",(0,r.jsx)(e.code,{children:"const"}),"之间，建议优先使用",(0,r.jsx)(e.code,{children:"const"}),"，尤其是在全局环境，不应该设置变量，只应设置常量。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"const"}),"优于",(0,r.jsx)(e.code,{children:"let"}),"有几个原因。一个是",(0,r.jsx)(e.code,{children:"const"}),"可以提醒阅读程序的人，这个变量不应该改变；另一个是",(0,r.jsx)(e.code,{children:"const"}),"比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对",(0,r.jsx)(e.code,{children:"const"}),"进行优化，所以多使用",(0,r.jsx)(e.code,{children:"const"}),"，有利于提高程序的运行效率，也就是说",(0,r.jsx)(e.code,{children:"let"}),"和",(0,r.jsx)(e.code,{children:"const"}),"的本质区别，其实是编译器内部的处理不同。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nvar a = 1, b = 2, c = 3;\n\n// good\nconst a = 1;\nconst b = 2;\nconst c = 3;\n\n// best\nconst [a, b, c] = [1, 2, 3];\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"const"}),"声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。"]}),"\n",(0,r.jsx)(e.p,{children:"所有的函数都应该设置为常量。"}),"\n",(0,r.jsxs)(e.p,{children:["长远来看，JavaScript 可能会有多线程的实现（比如 Intel 公司的 River Trail 那一类的项目），这时",(0,r.jsx)(e.code,{children:"let"}),"表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。"]}),"\n",(0,r.jsxs)(e.h2,{id:"字符串",children:["字符串",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nconst a = \"foobar\";\nconst b = 'foo' + a + 'bar';\n\n// acceptable\nconst c = `foobar`;\n\n// good\nconst a = 'foobar';\nconst b = `foo${a}bar`;\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"解构赋值",children:["解构赋值",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#解构赋值",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"使用数组成员对变量赋值时，优先使用解构赋值。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const arr = [1, 2, 3, 4];\n\n// bad\nconst first = arr[0];\nconst second = arr[1];\n\n// good\nconst [first, second] = arr;\n"})}),"\n",(0,r.jsx)(e.p,{children:"函数的参数如果是对象的成员，优先使用解构赋值。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n\n// good\nfunction getFullName(obj) {\n  const { firstName, lastName } = obj;\n}\n\n// best\nfunction getFullName({ firstName, lastName }) {\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n\n// good\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\n\nconst { left, right } = processInput(input);\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"对象",children:["对象",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#对象",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nconst a = { k1: v1, k2: v2, };\nconst b = {\n  k1: v1,\n  k2: v2\n};\n\n// good\nconst a = { k1: v1, k2: v2 };\nconst b = {\n  k1: v1,\n  k2: v2,\n};\n"})}),"\n",(0,r.jsxs)(e.p,{children:["对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用",(0,r.jsx)(e.code,{children:"Object.assign"}),"方法。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nconst a = {};\na.x = 3;\n\n// if reshape unavoidable\nconst a = {};\nObject.assign(a, { x: 3 });\n\n// good\nconst a = { x: null };\na.x = 3;\n"})}),"\n",(0,r.jsx)(e.p,{children:"如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n};\nobj[getKey('enabled')] = true;\n\n// good\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n  [getKey('enabled')]: true,\n};\n"})}),"\n",(0,r.jsxs)(e.p,{children:["上面代码中，对象",(0,r.jsx)(e.code,{children:"obj"}),"的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建",(0,r.jsx)(e.code,{children:"obj"}),"的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。"]}),"\n",(0,r.jsx)(e.p,{children:"另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"var ref = 'some value';\n\n// bad\nconst atom = {\n  ref: ref,\n\n  value: 1,\n\n  addValue: function (value) {\n    return atom.value + value;\n  },\n};\n\n// good\nconst atom = {\n  ref,\n\n  value: 1,\n\n  addValue(value) {\n    return atom.value + value;\n  },\n};\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"数组",children:["数组",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数组",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"使用扩展运算符（...）拷贝数组。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nconst len = items.length;\nconst itemsCopy = [];\nlet i;\n\nfor (i = 0; i < len; i++) {\n  itemsCopy[i] = items[i];\n}\n\n// good\nconst itemsCopy = [...items];\n"})}),"\n",(0,r.jsx)(e.p,{children:"使用 Array.from 方法，将类似数组的对象转为数组。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const foo = document.querySelectorAll('.foo');\nconst nodes = Array.from(foo);\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"函数",children:["函数",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"立即执行函数可以写成箭头函数的形式。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"(() => {\n  console.log('Welcome to the Internet.');\n})();\n"})}),"\n",(0,r.jsx)(e.p,{children:"那些使用匿名函数当作参数的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\n[1, 2, 3].map(function (x) {\n  return x * x;\n});\n\n// good\n[1, 2, 3].map((x) => {\n  return x * x;\n});\n\n// best\n[1, 2, 3].map(x => x * x);\n"})}),"\n",(0,r.jsxs)(e.p,{children:["箭头函数取代",(0,r.jsx)(e.code,{children:"Function.prototype.bind"}),"，不应再用 self/_this/that 绑定 this。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nconst self = this;\nconst boundMethod = function(...params) {\n  return method.apply(self, params);\n}\n\n// acceptable\nconst boundMethod = method.bind(this);\n\n// best\nconst boundMethod = (...params) => method.apply(this, params);\n"})}),"\n",(0,r.jsx)(e.p,{children:"简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。"}),"\n",(0,r.jsx)(e.p,{children:"所有配置项都应该集中在一个对象，放在最后一个参数，布尔值最好不要直接作为参数，因为代码语义会很差，也不利于将来增加其他配置项。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nfunction divide(a, b, option = false ) {\n}\n\n// good\nfunction divide(a, b, { option = false } = {}) {\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"不要在函数体内使用 arguments 变量，使用 rest 运算符（...）代替。因为 rest 运算符显式表明你想要获取参数，而且 arguments 是一个类似数组的对象，而 rest 运算符可以提供一个真正的数组。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join('');\n}\n\n// good\nfunction concatenateAll(...args) {\n  return args.join('');\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"使用默认值语法设置函数参数的默认值。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nfunction handleThings(opts) {\n  opts = opts || {};\n}\n\n// good\nfunction handleThings(opts = {}) {\n  // ...\n}\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"map-结构",children:["Map 结构",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#map-结构",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["注意区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。如果只是需要",(0,r.jsx)(e.code,{children:"key: value"}),"的数据结构，使用 Map 结构。因为 Map 有内建的遍历机制。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"let map = new Map(arr);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"class",children:["Class",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#class",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"总是用 Class，取代需要 prototype 的操作。因为 Class 的写法更简洁，更易于理解。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nfunction Queue(contents = []) {\n  this._queue = [...contents];\n}\nQueue.prototype.pop = function() {\n  const value = this._queue[0];\n  this._queue.splice(0, 1);\n  return value;\n}\n\n// good\nclass Queue {\n  constructor(contents = []) {\n    this._queue = [...contents];\n  }\n  pop() {\n    const value = this._queue[0];\n    this._queue.splice(0, 1);\n    return value;\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["使用",(0,r.jsx)(e.code,{children:"extends"}),"实现继承，因为这样更简单，不会有破坏",(0,r.jsx)(e.code,{children:"instanceof"}),"运算的危险。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bad\nconst inherits = require('inherits');\nfunction PeekableQueue(contents) {\n  Queue.apply(this, contents);\n}\ninherits(PeekableQueue, Queue);\nPeekableQueue.prototype.peek = function() {\n  return this._queue[0];\n}\n\n// good\nclass PeekableQueue extends Queue {\n  peek() {\n    return this._queue[0];\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"模块",children:["模块",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#模块",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"ES6 模块语法是 JavaScript 模块的标准写法，坚持使用这种写法，取代 Node.js 的 CommonJS 语法。"}),"\n",(0,r.jsxs)(e.p,{children:["首先，使用",(0,r.jsx)(e.code,{children:"import"}),"取代",(0,r.jsx)(e.code,{children:"require()"}),"。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// CommonJS 的写法\nconst moduleA = require('moduleA');\nconst func1 = moduleA.func1;\nconst func2 = moduleA.func2;\n\n// ES6 的写法\nimport { func1, func2 } from 'moduleA';\n"})}),"\n",(0,r.jsxs)(e.p,{children:["其次，使用",(0,r.jsx)(e.code,{children:"export"}),"取代",(0,r.jsx)(e.code,{children:"module.exports"}),"。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// commonJS 的写法\nvar React = require('react');\n\nvar Breadcrumbs = React.createClass({\n  render() {\n    return <nav />;\n  }\n});\n\nmodule.exports = Breadcrumbs;\n\n// ES6 的写法\nimport React from 'react';\n\nclass Breadcrumbs extends React.Component {\n  render() {\n    return <nav />;\n  }\n};\n\nexport default Breadcrumbs;\n"})}),"\n",(0,r.jsxs)(e.p,{children:["如果模块只有一个输出值，就使用",(0,r.jsx)(e.code,{children:"export default"}),"，如果模块有多个输出值，除非其中某个输出值特别重要，否则建议不要使用",(0,r.jsx)(e.code,{children:"export default"}),"，即多个输出值如果是平等关系，",(0,r.jsx)(e.code,{children:"export default"}),"与普通的",(0,r.jsx)(e.code,{children:"export"}),"就不要同时使用。"]}),"\n",(0,r.jsx)(e.p,{children:"如果模块默认输出一个函数，函数名的首字母应该小写，表示这是一个工具方法。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"function makeStyleGuide() {\n}\n\nexport default makeStyleGuide;\n"})}),"\n",(0,r.jsx)(e.p,{children:"如果模块默认输出一个对象，对象名的首字母应该大写，表示这是一个配置值对象。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const StyleGuide = {\n  es6: {\n  }\n};\n\nexport default StyleGuide;\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"eslint-的使用",children:["ESLint 的使用",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#eslint-的使用",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"ESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。"}),"\n",(0,r.jsx)(e.p,{children:"首先，在项目的根目录安装 ESLint。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"$ npm install --save-dev eslint\n"})}),"\n",(0,r.jsx)(e.p,{children:"然后，安装 Airbnb 语法规则，以及 import、a11y、react 插件。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"$ npm install --save-dev eslint-config-airbnb\n$ npm install --save-dev eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react\n"})}),"\n",(0,r.jsxs)(e.p,{children:["最后，在项目的根目录下新建一个",(0,r.jsx)(e.code,{children:".eslintrc"}),"文件，配置 ESLint。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'{\n  "extends": "eslint-config-airbnb"\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"现在就可以检查，当前项目的代码是否符合预设的规则。"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"index.js"}),"文件的代码如下。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"var unused = 'I have no purpose!';\n\nfunction greet() {\n    var message = 'Hello, World!';\n    console.log(message);\n}\n\ngreet();\n"})}),"\n",(0,r.jsx)(e.p,{children:"使用 ESLint 检查这个文件，就会报出错误。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"$ npx eslint index.js\nindex.js\n  1:1  error  Unexpected var, use let or const instead          no-var\n  1:5  error  unused is defined but never used                 no-unused-vars\n  4:5  error  Expected indentation of 2 characters but found 4  indent\n  4:5  error  Unexpected var, use let or const instead          no-var\n  5:5  error  Expected indentation of 2 characters but found 4  indent\n\n✖ 5 problems (5 errors, 0 warnings)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["上面代码说明，原文件有五个错误，其中两个是不应该使用",(0,r.jsx)(e.code,{children:"var"}),"命令，而要使用",(0,r.jsx)(e.code,{children:"let"}),"或",(0,r.jsx)(e.code,{children:"const"}),"；一个是定义了变量，却没有使用；另外两个是行首缩进为 4 个空格，而不是规定的 2 个空格。"]})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}let t=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F26.%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC.md"]={toc:[{text:"块级作用域",id:"块级作用域",depth:2},{text:"字符串",id:"字符串",depth:2},{text:"解构赋值",id:"解构赋值",depth:2},{text:"对象",id:"对象",depth:2},{text:"数组",id:"数组",depth:2},{text:"函数",id:"函数",depth:2},{text:"Map 结构",id:"map-结构",depth:2},{text:"Class",id:"class",depth:2},{text:"模块",id:"模块",depth:2},{text:"ESLint 的使用",id:"eslint-的使用",depth:2}],title:"26.编程风格",headingTitle:"26.编程风格",frontmatter:{}}}}]);