"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["55786"],{300927:function(e,r,n){n.r(r),n.d(r,{default:()=>T});var c=n(552676),o=n(740453);let l=n.p+"static/image/62ca894911b1ada2361ed54e3a81dbe4.89917411.webp",i=n.p+"static/image/bbb40c617fb9a9bb34da3a7b29332e8f.704baaa3.webp",d=n.p+"static/image/c779f356ddb3f2dbe5249375b07d4bcc.8fc5b34e.webp",s=n.p+"static/image/74eeef1970524795a00a2c363a13dc42.f777061e.webp",a=n.p+"static/image/af82c4c5e3a08a02c32786d31511672e.925e2710.webp",h=n.p+"static/image/66a5f1bb973465cffaa360420ac409b7.3c2c2b39.webp",x=n.p+"static/image/13d06fecec00186df4fa5ec77ed55e7f.1cca3c55.webp",j=n.p+"static/image/b44a4e1193bd2726fe3c82692e57775a.d59f90e3.webp",t=n.p+"static/image/5f145e0964ec1adbfdfc0347365ac740.ec385930.webp",p=n.p+"static/image/d9a327c8e4fd59a92d975204ab1d4fe7.8e811f9e.webp",m=n.p+"static/image/ab5bfd21628731dad9d850c992092570.7d7dc263.webp",b=n.p+"static/image/16e1ae2001bd55dad8c5b8a5750a1461.11d6f8c1.webp",g=n.p+"static/image/816729a1dd8b3401089580c9b92c19a6.ccabc2e1.webp",u=n.p+"static/image/096584a473c647bdbda9c4c0f8233e0c.37e65d4a.webp",f=n.p+"static/image/f70da41c1679117914ac2fffbee7d831.0209330d.webp",k=n.p+"static/image/ff883e234baf465bbb795e3394e99252.dc3ce8b1.webp",S=n.p+"static/image/8482a9e64c875077d2ffa1a01a6d9598.2adb5be2.webp",v=n.p+"static/image/ef9b76c23459636d518baafa1f00b445.fe05b045.webp",y=n.p+"static/image/fee97e881c2016e5538ce4eee208edbf.168c22ca.webp",w=n.p+"static/image/c33951d5786dbdce0913198b812125d2.5db054e4.webp",C=n.p+"static/image/394a56da567b95f8f769b39cfb537555.334e0683.webp",N=n.p+"static/image/af91b5de9a3e11211b3fa590329752f5.f6b3b1cc.webp",_=n.p+"static/image/0a30d28a63d0c2614569d3fdb41922b4.28e4fe11.webp",B=n.p+"static/image/092a3104fc042a102d7abdadc463c51f.dafc8b1b.webp",q=n.p+"static/image/b75fe1da733a0557d6da9de1d56c65b1.626bd019.webp",R=n.p+"static/image/23d95a9c3ca01d5a8b2dfd1b39ad6217.a9101486.webp",W=n.p+"static/image/28f09f8cfe8e1b631f276d473bc18e51.656d2e0c.webp",z=n.p+"static/image/e99287e1543665b3fe54d2865c6fcc49.c0c78282.webp",Y=n.p+"static/image/e0e374e3085962c6514c356faa117516.f50dcfb5.webp",D=n.p+"static/image/49e73c998f2d5c722b9d17766707b549.192713d5.webp",G=n.p+"static/image/e232865fabab333b24892ac3093ba644.a6819ab5.webp",L=n.p+"static/image/a99e3bfa39ccab6cacaef0efd16e111f.5fe93532.webp",X=n.p+"static/image/3f02a5a767b9334ab421e6b66e98391f.2da27835.webp",P=n.p+"static/image/2b523fd8a7c96d5fcb04ff034422b5e4.e428e8ae.webp",E=n.p+"static/image/35cf7a76f253eea9bc88182696e04e9c.b47fd614.webp",A=n.p+"static/image/ae818a4496fa34aa5852f041d8d88754.c49167e0.webp",O=n.p+"static/image/70b0c9d80f8c381878cd96480c365b0f.cd06d2e8.webp",V=n.p+"static/image/9c77fbd471d2936d020a7a732f97b480.63696d41.webp",H=n.p+"static/image/f93fb7cdc77458d51fe88cee6dcd6872.8f461002.webp",J=n.p+"static/image/83d48ee493322c7dadf3aa3a07a6da3d.3dd25b1e.webp";function Z(e){let r=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",img:"img",pre:"pre",strong:"strong",blockquote:"blockquote",ul:"ul",li:"li",h3:"h3"},(0,o.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(r.h1,{id:"第13章css的混合颜色color-mix",children:["第13章—CSS的混合颜色：color-mix()",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#第13章css的混合颜色color-mix",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["\uFEFF现实生活的经验告诉我们，如果将两种或多种颜色混合在一起，就可以得到一种新的颜色。在日常生活中我们看到的颜色，大多是通过颜色混合得来的。事实上，这种日常生活的常识也可以运用于 Web 上。而且，一直以来，Web 开发者都在以不同的方式处理颜色的混合，以得到新的颜色。庆幸的是，CSS 中提供了一个专门处理混合颜色的函数，即 ",(0,c.jsx)(r.code,{children:"color-mix()"})," ，它直接允许你混合两种颜色得到一种新的颜色。这是一个开创性的功能，将改变我们在项目和设计系统中处理颜色的方式。"]}),"\n",(0,c.jsxs)(r.p,{children:["接下来，我将以我的角度讨论 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数，并提供相应的示例来展示这个创新性 CSS 函数的多功能性和潜力。此外，我们还将探索将 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 与 Design Token（设计令牌）一起纳入设计系统的好处，展示处理颜色及其透明度值的示例，以及如何使用它来创建一个调色板。"]}),"\n",(0,c.jsxs)(r.h2,{id:"css-中的混合颜色",children:["CSS 中的混合颜色",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#css-中的混合颜色",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:J,alt:"img"})}),"\n",(0,c.jsxs)(r.p,{children:["正如上图所示，蓝色（",(0,c.jsx)(r.code,{children:"blue"}),"）加上红色（",(0,c.jsx)(r.code,{children:"red"}),"）就会得到一个紫色（",(0,c.jsx)(r.code,{children:"purple"}),"）。这在日常生活中很常见，但在 CSS 中有什么表达方式呢？一般都是使用 ",(0,c.jsx)(r.code,{children:"calc()"})," 来操作的，例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".color-mixing {\n    --lightness: 50%;\n    --red: hsl(0 50% var(--lightness));\n\n    /* 通过增加 25% 的亮度通道将“白色”添加到红色中 */\n    --lightered: hsl(0 50% calc(var(--lightness) + 25%);\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["现在，使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 要简单得多，例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".color-mixing {\n      --red-white-mix: color-mix(in oklab, red, white);\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["你肯定想一探 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 的究竟，但先不用着急，我想先花一点点时间和大家简单说说混合颜色。"]}),"\n",(0,c.jsxs)(r.p,{children:["简单地说，",(0,c.jsx)(r.strong,{children:"混合颜色通常指的是将两种或多种颜色混合在一起，得到一种新颜色"}),"。而 CSS 的混合颜色会在指定的颜色空间中进行插值计算，例如从 ",(0,c.jsx)(r.code,{children:"blue"})," 过渡到 ",(0,c.jsx)(r.code,{children:"red"})," ："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    background-color: blue;\n    transition: background-color 1s linear;\n}\n\n.element:hover {\n    background-color: red;\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:"或者："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    background-color: blue;\n    animation: mix-color 8s both linear infinite alternate;\n}\n\n@keyframes mix-color {\n    to {\n        background-color: red;\n    }\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:H,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/YzJdbrJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzJdbrJ"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["你可能已经发现了，上面这个动画，蓝色 ",(0,c.jsx)(r.code,{children:"blue"})," 向红色 ",(0,c.jsx)(r.code,{children:"red"})," 过渡中会出现紫色 ",(0,c.jsx)(r.code,{children:"purple"})," 。"]}),"\n",(0,c.jsxs)(r.p,{children:["如果这个动画运行到一半的时候暂停动画呢？我们可以通过设置 ",(0,c.jsx)(r.code,{children:"animation-delay"})," 的值为 ",(0,c.jsx)(r.code,{children:"-4s"})," 来实现它（动画持续时间是 ",(0,c.jsx)(r.code,{children:"8s"})," ，它的一半刚好是 ",(0,c.jsx)(r.code,{children:"4s"}),"）。你会发现刚好是紫色 ",(0,c.jsx)(r.code,{children:"purple"})," 介于蓝色 ",(0,c.jsx)(r.code,{children:"blue"})," 和红色 ",(0,c.jsx)(r.code,{children:"red"})," 之间："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    animation: mix-color 8s -4s linear both paused;\n}\n\n@keyframes mix-color {\n    from {\n        background-color: blue;\n    }\n    to {\n        background-color: red;\n    }\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:V,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/BaqvemX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaqvemX"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["注意，",(0,c.jsx)(r.code,{children:"animation-delay"})," 的值，就相当于用来指定两种颜色的百分比。你可以尝试着拖动下面示例中的滑块，来改变 ",(0,c.jsx)(r.code,{children:"animation-delay"})," 的值，从而调整两种颜色的百分比。",(0,c.jsx)(r.code,{children:"animation-delay"})," 的值不同时，得到的混合颜色也不一样："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:O,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/dygwEEa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dygwEEa"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["现在，你对 CSS 中的混合颜色应该已经有了一个基本的认识了。简单地说，就是两种颜色按一定的比例进行插值计算。有关于颜色插值更详细的介绍，可以阅读小册前面的课程《",(0,c.jsx)(r.a,{href:"https://juejin.cn/book/7223230325122400288/section/7233227753909125178",target:"_blank",rel:"noopener noreferrer",children:"11 | 新的 CSS 颜色空间：为 Web 设置高清颜色"}),"》，这里不再重复阐述。"]}),"\n",(0,c.jsxs)(r.h2,{id:"css-的-color-mix",children:["CSS 的 color-mix()",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#css-的-color-mix",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"color-mix()"})," 函数是 ",(0,c.jsx)(r.strong,{children:(0,c.jsx)(r.a,{href:"https://www.w3.org/TR/css-color-5/#color-mix",target:"_blank",rel:"noopener noreferrer",children:"CSS 颜色模块 Level5"})})," 新增的一个颜色函数，主要用于混合两种颜色值的 CSS 函数。它采用两个颜色值作为参数，并根据所指定的颜色空间和混合比例来返回混合后的颜色值。相对于传统的颜色混合方法（比如，简单平均值、线性加权平均值等），",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数提供了更灵活的混合方式。除此之外，它可以在不同的颜色空间进行混合，例如 sRGB、HSL 和 LCH 等，这在调整颜色时更加灵活，并且可以根据需要选择合适的颜色空间进行混合。"]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:A,alt:"img"})}),"\n",(0,c.jsxs)(r.p,{children:["上图所示是 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数最基础的使用方式，函数中各参数的含义分别是："]}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsx)(r.li,{children:"指定生成的颜色空间是 HSL；"}),"\n",(0,c.jsxs)(r.li,{children:["底色（基色）是 ",(0,c.jsx)(r.code,{children:"blue"})," ；"]}),"\n",(0,c.jsxs)(r.li,{children:["底色的百分比是 ",(0,c.jsx)(r.code,{children:"50%"})," ；"]}),"\n",(0,c.jsxs)(r.li,{children:["混合色是 ",(0,c.jsx)(r.code,{children:"red"})," ；"]}),"\n",(0,c.jsxs)(r.li,{children:["混合色的百分比是 ",(0,c.jsx)(r.code,{children:"50%"})," 。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["正如下面这个示例所示，",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数会根据相应的参数给你输出一个新的颜色（混合色）值："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:E,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/zYmygJr",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYmygJr"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["总之，",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数是一种非常有用的 CSS 函数，可以帮助你快速混合两种颜色值，并在不同的颜色空间中进行调整。"]}),"\n",(0,c.jsxs)(r.h2,{id:"color-mix-语法",children:["color-mix() 语法",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#color-mix-语法",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["CSS 的 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数接受两个 ",(0,c.jsx)(r.code,{children:"<color>"})," 值，并通过指定的数量，在给定的 ",(0,c.jsx)(r.code,{children:"<color-space>"})," 中将它们混合，然后返回一个新的颜色值，它看上去像下面这样："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"color-mix() = color(\n    <color-interpolation-method>, [<color> && <percentage [0, 100]>?]#{2}\n)\n"})}),"\n",(0,c.jsxs)(r.p,{children:["其中 ",(0,c.jsx)(r.code,{children:"<color-interpolation-methon>"})," 等于："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"<color-interpolation-method> = in [ <rectangular-color-space> | <polar-color-space> <hue-interpolation-method>? ]\n"})}),"\n",(0,c.jsx)(r.p,{children:"该表达式中的对应参数分别等于："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"<rectangular-color-space> = srgb | srgb-linear | lab | oklab | xyz | xyz-d50 | xyz-d65\n<polar-color-space> = hsl | hwb | lch | oklch\n<hue-interpolation-method> = [ shorter | longer | increasing | decreasing ] hue\n"})}),"\n",(0,c.jsxs)(r.p,{children:["而 ",(0,c.jsx)(r.code,{children:"<color>"})," 等于："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"<color> = <absolute-color-base> | currentcolor | <system-color> \n<absolute-color-base> = <hex-color> | <absolute-color-function> | <named-color> | transparent\n<absolute-color-function> = <rgb()> | <rgba()> |<hsl()> | <hsla()> | <hwb()> |<lab()> | <lch()> | <oklab()> | <oklch()> |<color()>\n"})}),"\n",(0,c.jsxs)(r.p,{children:["其中基色和混合色的百分比的值是 ",(0,c.jsx)(r.code,{children:"0% ~ 100%"})," 。例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --mix-color-srgb: color-mix(in srgb, blue, red);\n    --mix-color-srgb-linear: color-mix(in srgb-linear, blue, red);\n    --mix-color-lab: color-mix(in lab, blue, red);\n    --mix-color-oklab: color-mix(in oklab, blue, red);\n    --mix-color-xyz: color-mix(in xyz, blue, red);\n    --mix-color-xyz-d50: color-mix(in xyz-d50, blue, red);\n    --mix-color-xyz-d65: color-mix(in xyz-d65, blue, red);\n    --mix-color-hsl: color-mix(in hsl, blue, red);\n    --mix-color-hwb: color-mix(in hwb, blue, red);\n    --mix-color-lch: color-mix(in lch, blue, red);\n    --mix-color-oklch: color-mix(in oklch, blue, red);\n    \n    --mix-color-shorter: color-mix(in oklch shorter hue, blue, red);\n    --mix-color-longer: color-mix(in oklch longer hue, blue, red);\n    --mix-color-increasing: color-mix(in oklch increasing hue, blue, red);\n    --mix-color-decreasing: color-mix(in oklch decreasing hue, blue, red);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:P,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/rNqPBeW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNqPBeW"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["你也可以尝试使用",(0,c.jsx)(r.a,{href:"https://color-mix.style/",target:"_blank",rel:"noopener noreferrer",children:" @Adam Argyle 提供的 color-mix() 工具（color-mix.style）"}),"进行交互："]}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsx)(r.li,{children:"探索每个颜色空间的效果；"}),"\n",(0,c.jsxs)(r.li,{children:["探索在圆柱形颜色空间（",(0,c.jsx)(r.code,{children:"lch"})," 、",(0,c.jsx)(r.code,{children:"oklch"})," 、",(0,c.jsx)(r.code,{children:"hsl"})," 和 ",(0,c.jsx)(r.code,{children:"hwb"}),"）中混合时的色调插值效果；"]}),"\n",(0,c.jsx)(r.li,{children:"通过点击顶部的两个颜色框中的任意一个来改变混合的颜色；"}),"\n",(0,c.jsx)(r.li,{children:"使用滑块来改变混合比例。"}),"\n"]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:X,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"color-mix()"})," 工具地址：",(0,c.jsx)(r.a,{href:"https://color-mix.style/",target:"_blank",rel:"noopener noreferrer",children:"https://color-mix.style/"})]}),"\n"]}),"\n",(0,c.jsx)(r.p,{children:"不难发现，不同的颜色空间可以大幅改变混合颜色的结果。"}),"\n",(0,c.jsxs)(r.h2,{id:"color-mix-背后的计算",children:["color-mix() 背后的计算",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#color-mix-背后的计算",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["乍看 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 也就那么一回事，将两个颜色按比例在指定的颜色空间进行混合，即可得到一个新的颜色。看上去很棒也很简单，可事实上并非如此，因为 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数背后有一些数学计算。我们只有了解其背后的原理，才能用好 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 。"]}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["特别声明，接下来的内容，有些示例来自于 ",(0,c.jsx)(r.strong,{children:(0,c.jsx)(r.a,{href:"https://www.w3.org/TR/css-color-5/#color-mix",target:"_blank",rel:"noopener noreferrer",children:"W3C 的颜色模块 Level5 规范"})}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(r.h3,{id:"混合颜色的百分比归一化",children:["混合颜色的百分比归一化",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#混合颜色的百分比归一化",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["从 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数的语法规则中，我们不难知道，两个颜是按比例进行混合的，而这个比例是一个 ",(0,c.jsx)(r.code,{children:"0% ~ 100%"})," 范围内的值。在实际使用的时候，两个颜色的百分比值的和有可能："]}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:["等于 ",(0,c.jsx)(r.code,{children:"100%"})," ，比如 ",(0,c.jsx)(r.code,{children:"color-mix(in hsl, blue 50%, red 50%)"})]}),"\n",(0,c.jsxs)(r.li,{children:["小于 ",(0,c.jsx)(r.code,{children:"100%"})," ，比如 ",(0,c.jsx)(r.code,{children:"color-mix(in hsl, blue 25%, red 30%)"})]}),"\n",(0,c.jsxs)(r.li,{children:["大于 ",(0,c.jsx)(r.code,{children:"100%"})," ，比如 ",(0,c.jsx)(r.code,{children:"color-mix(in hsl, blue 65% , red 75%)"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["针对于上述所列现象，规范中都有明确的处理方式，也就是",(0,c.jsx)(r.a,{href:"https://www.w3.org/TR/css-color-5/#color-mix-percent-norm",target:"_blank",rel:"noopener noreferrer",children:"规范中所说的“百分比的归一化处理”"}),"。"]}),"\n",(0,c.jsxs)(r.p,{children:["假设 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数中基色的混合百分比是 ",(0,c.jsx)(r.code,{children:"p1"})," ，混合色的百分比是 ",(0,c.jsx)(r.code,{children:"p2"})," ，即："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:"color-mix(in hsl, blue p1, red p2)\n"})}),"\n",(0,c.jsxs)(r.p,{children:["在实际使用的过程中，如果两个百分比都被省略，那么两个颜色的混合百分比都等于 ",(0,c.jsx)(r.code,{children:"50%"})," ，即 ",(0,c.jsx)(r.code,{children:"p1 = p2 = 50%"})," ，表示两种颜色平均混合。例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color: color-mix(in hsl, blue, red);\n}\n\n/* 等同于 */\n.element {\n    color: color-mix(in hsl, blue 50%, red 50%);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:L,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/YzJBzwo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzJBzwo"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["如果仅省略了 ",(0,c.jsx)(r.code,{children:"p2"})," ，则 ",(0,c.jsx)(r.code,{children:"p2 = 100% - p1"})," ；如果仅省略了 ",(0,c.jsx)(r.code,{children:"p1"})," ，则 ",(0,c.jsx)(r.code,{children:"p1 = 100% - p2"})," 。例如下面代码所示都是等同的："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color: color-mix(in lch, blue 50%, red 50%);\n    color: color-mix(in lch, 50% blue, 50% red);\n    color: color-mix(in lch, blue 50%, red);\n    color: color-mix(in lch, 50% blue, red);\n    color: color-mix(in lch, blue, red 50%);\n    color: color-mix(in lch, blue, 50% red);\n    color: color-mix(in lch, blue, red);\n    color: color-mix(in lch, red, blue);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:G,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/oNamNer",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNamNer"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["如果两个颜色的百分比都提供并且总和大于 ",(0,c.jsx)(r.code,{children:"100%"})," ，它们就会按比例缩放，以便总和等于 ",(0,c.jsx)(r.code,{children:"100%"})," 。例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color: color-mix(in hsl, blue 60%, red 80%); \n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["上面示例中的 ",(0,c.jsx)(r.code,{children:"p1 = 60%"})," ，",(0,c.jsx)(r.code,{children:"p2 = 80%"})," ，",(0,c.jsx)(r.code,{children:"p1 + p2 = 60% + 80% = 140%"})," ，即 ",(0,c.jsx)(r.code,{children:"p1"})," 和 ",(0,c.jsx)(r.code,{children:"p2"})," 的总和大于 ",(0,c.jsx)(r.code,{children:"100%"})," 。此时，我们需要按下面的公式重新对 ",(0,c.jsx)(r.code,{children:"p1"})," 和 ",(0,c.jsx)(r.code,{children:"p2"})," 分配百分比值："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"p1' = p1 \xf7 (p1 + p2)\np2' = p2 \xf7 (p1 + p2)\n"})}),"\n",(0,c.jsx)(r.p,{children:"即："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"p1' = 60% \xf7 (60% + 80%) = 60% \xf7 140% = (60 \xf7 140) \xd7 100% = 42.86%\np2' = 80% \xf7 (60% + 80%) = 80% \xf7 140% = (80 \xf7 140) \xd7 100% = 57.14%\n"})}),"\n",(0,c.jsx)(r.p,{children:"也就是说，下面两种 CSS 规则是等效的："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color: color-mix(in hsl, blue 60%, red 80%); \n}\n\n/* 等同于 */\n.element {\n    /**\n    *    p1 = 60% \n    *    p2 = 80%\n    *    p1 + p2 = 140% > 100%\n    *    p1' = 60% \xf7 (60% + 80%) = 42.86%\n    *    p2' = 80% \xf7 (60% + 80%) = 57.14%\n    */\n    color: color-mix(in hsl, blue 42.86%, red 57.14%); \n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:D,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/WNaPNWM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNaPNWM"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["如果两个百分比总和小于 ",(0,c.jsx)(r.code,{children:"100%"})," ，则该总和将保存为 ",(0,c.jsx)(r.code,{children:"α"})," 乘数，该 ",(0,c.jsx)(r.code,{children:"α"})," 在此称为倍增器，其中 ",(0,c.jsx)(r.code,{children:"1 = 100"}),"。然后，它们按比例缩放，以便它们总和为 ",(0,c.jsx)(r.code,{children:"100%"})," 。即："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"α = (p1 + p2) \xd7 100\np1' = p1 \xd7 100 \xf7 α\np2' = p2 \xd7 100 \xf7 α\n"})}),"\n",(0,c.jsx)(r.p,{children:"例如："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color: color-mix(in hsl, blue 20%, red 60%);\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["在这个例子中，",(0,c.jsx)(r.code,{children:"p1"})," 的百分比为 ",(0,c.jsx)(r.code,{children:"20%"}),"，",(0,c.jsx)(r.code,{children:"p2"})," 的百分比为 ",(0,c.jsx)(r.code,{children:"60%"}),"，总计为 ",(0,c.jsx)(r.code,{children:"80%"}),"。这给我们带来了所谓的 ",(0,c.jsx)(r.code,{children:"α"})," 倍增器 的值为 ",(0,c.jsx)(r.code,{children:"80％"})," （即 ",(0,c.jsx)(r.code,{children:"0.8"}),"）。根据上面公式，可以计算出 ",(0,c.jsx)(r.code,{children:"p1'"})," 的 ",(0,c.jsx)(r.code,{children:"p2'"})," 的值："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"α = (p1 + p2) \xd7 100 = (20% + 60%) \xd7 100 = 80\np1' = p1 \xd7 100 \xf7 α = 20% \xd7 100 \xf7 80 = 25%\np2' = p2 \xd7 100 \xf7 α = 60% \xd7 100 \xf7 80 = 75%\n"})}),"\n",(0,c.jsxs)(r.p,{children:["其实，我们也可以按 ",(0,c.jsx)(r.code,{children:"p1 + p2 > 100%"})," 的公式进行计算，这样易于统一，即："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"p1' = 20% \xf7 (20% + 60%) = 20% \xf7 80% = (20 \xf7 80) \xd7 100% = 25%\np2' = 60% \xf7 (20% + 60%) = 60% \xf7 80% = (60 \xf7 80) \xd7 100% = 75%\n"})}),"\n",(0,c.jsxs)(r.p,{children:["不过需要注意的是，",(0,c.jsx)(r.code,{children:"color-mix(in hsl, blue 20%, red 80%)"})," 混合出来的颜色透明度将会小于 ",(0,c.jsx)(r.code,{children:"1"})," ，即 ",(0,c.jsx)(r.code,{children:"80%"})," 。对应的 ",(0,c.jsx)(r.code,{children:"blue"})," 将转换成 ",(0,c.jsx)(r.code,{children:"hsl(240deg 100% 50% ``/ 80%``)"}),"，",(0,c.jsx)(r.code,{children:"red"})," 会转换成 ",(0,c.jsx)(r.code,{children:"hsl(0deg 100% 50% ``/ 80%``)"})," 。即："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color: color-mix(in hsl, blue 20%, red 60%);\n}\n\n/* 等同于 */\n.element {\n    color: color-mix(in hsl, hsl(240deg 100% 50% / 80%) 25%, hsl(0deg 100% 50% / 80%) 75%);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:Y,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址： ",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/XWxOJRr",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWxOJRr"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["注意，这是一个复杂的计算过程，稍后我们还会继续聊到它们。如果你想先睹为快，",(0,c.jsx)(r.a,{href:"https://www.w3.org/TR/css-color-5/#color-mix-with-alpha",target:"_blank",rel:"noopener noreferrer",children:"可以阅读规范相对应的文档"}),"。"]}),"\n",(0,c.jsxs)(r.p,{children:["如果两个百分比总和为 ",(0,c.jsx)(r.code,{children:"0"})," ，则 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 会无效。例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:"/* 无效 CSS 规则 */\n.void-css {\n    color: color-mix(in hsl, red 0%, blue 0%);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:"而且，百分比也不能是负值。如果是负值，同样会被视为无效 CSS 规则："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".void-css {\n    color: color-mix(in hsl, red -20%, blue -80%);\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["正如你所看到的，",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数中的两个颜色的混合百分比 ",(0,c.jsx)(r.code,{children:"p1"})," 和 ",(0,c.jsx)(r.code,{children:"p2"})," 值的背后计算是复杂的。如果你不想深入了解它们之间的计算原理，那么下面这个示例就比较适合你，你只需要调整基色和混合色的百分比就可以查看到 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 的结果："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:z,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/NWOoGVX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWOoGVX"})]}),"\n"]}),"\n",(0,c.jsxs)(r.h3,{id:"color-mix-函数结果是如何计算的",children:["color-mix() 函数结果是如何计算的",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#color-mix-函数结果是如何计算的",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"color-mix()"})," 函数将两个颜色混合百分比归一化之后，其产生的结果（定义的颜色）会通过以下算法计算。"]}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:["Step ①：两个颜色都转换为指定的颜色空间（",(0,c.jsx)(r.code,{children:"<color-space>"}),"）。如果指定的颜色空间无法表示颜色（例如，",(0,c.jsx)(r.code,{children:"hsl"})," 和 ",(0,c.jsx)(r.code,{children:"hwb"})," 空间无法表示 sRGB 色域之外的颜色），则会进行色域映射。"]}),"\n",(0,c.jsxs)(r.li,{children:["Step ②：接着在指定的颜色空间中进行",(0,c.jsx)(r.a,{href:"https://juejin.cn/book/7223230325122400288/section/7233227753909125178",target:"_blank",rel:"noopener noreferrer",children:"颜色插值计算"}),"。如果指定的颜色空间是圆柱极坐标空间，则 ",(0,c.jsx)(r.code,{children:"<hue-interpolation-method>"})," 控制色调的插值；如果没有显式指定 ",(0,c.jsx)(r.code,{children:"<hue-interpolation-method>"}),"，则就像指定了 ",(0,c.jsx)(r.code,{children:"shorter"})," 值 ；如果指定的颜色空间是矩形直角颜色空间，则指定 ",(0,c.jsx)(r.code,{children:"<hue-interpolation-method>"})," 是一个错误。"]}),"\n",(0,c.jsxs)(r.li,{children:["Step ③：如果在百分比归一化期间产生了 ",(0,c.jsx)(r.code,{children:"α"})," 乘数，则插值结果的 ",(0,c.jsx)(r.code,{children:"α"})," 分量会乘以 ",(0,c.jsx)(r.code,{children:"α"})," 乘数。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"color-mix()"})," 所产生的结果是从第二个颜色到第一个颜色的进度中指定百分比处的颜色。"]}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["注意：作为推论，",(0,c.jsx)(r.code,{children:"0%"})," 的百分比返回的是另一种转换为指定颜色空间的颜色，而 ",(0,c.jsx)(r.code,{children:"100%"})," 的百分比返回的是转换为指定颜色空间的相同颜色。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["W3C 规范提供了相关的示例来解释 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数结果是如何计算的。先来看第一个示例，"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color: color-mix(in lch, peru 40%, palegoldenrod);\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["上面代码将 ",(0,c.jsx)(r.code,{children:"40%"})," 的 ",(0,c.jsx)(r.code,{children:"peru"})," 色和 ",(0,c.jsx)(r.code,{children:"60%"})," 的 ",(0,c.jsx)(r.code,{children:"palegoldenrod"})," 进行混合，将产生一个新的颜色，即 ",(0,c.jsx)(r.code,{children:"lch(79.7256 40.448 84.771)"})," ："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:W,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/XWxOVdw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWxOVdw"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["这个示例的混合是在 ",(0,c.jsx)(r.code,{children:"lch"})," 颜色空间中完成。这是一个自上而下沿着 ",(0,c.jsx)(r.code,{children:"L"})," 轴的视图："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:R,alt:"img"})}),"\n",(0,c.jsxs)(r.p,{children:["上图所展示的是，秘鲁色(",(0,c.jsx)(r.code,{children:"peru"}),")和淡黄菊色(",(0,c.jsx)(r.code,{children:"palegoldenrod"}),")的混合。",(0,c.jsx)(r.code,{children:"peru"})," 的色相角（从正 ",(0,c.jsx)(r.code,{children:"a"})," 轴测量）为 ",(0,c.jsx)(r.code,{children:"63.677"})," 度，而 ",(0,c.jsx)(r.code,{children:"palegoldenrod"})," 的色相角为 ",(0,c.jsx)(r.code,{children:"98.834"})," 度。",(0,c.jsx)(r.code,{children:"peru"})," 的浓度（或距离中心轴心的距离）为 ",(0,c.jsx)(r.code,{children:"54.011"}),"，而 ",(0,c.jsx)(r.code,{children:"palegoldenrod"})," 的浓度为 ",(0,c.jsx)(r.code,{children:"31.406"}),"。混合物位于曲线上。"]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"color-mix(in lch, peru 40%, palegoldenrod)"})," 的计算方法如下："]}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:["秘鲁色（",(0,c.jsx)(r.code,{children:"peru"}),"）转换为 ",(0,c.jsx)(r.code,{children:"lch"})," 空间的颜色是 ",(0,c.jsx)(r.code,{children:"lch(62.253％ 54.011 63.677)"})," ；"]}),"\n",(0,c.jsxs)(r.li,{children:["淡黄菊色（",(0,c.jsx)(r.code,{children:"palegoldenrod"}),"）转换为 ",(0,c.jsx)(r.code,{children:"lch"})," 空间的颜色是 ",(0,c.jsx)(r.code,{children:"lch(91.374％ 31.406 98.834)"})," ；"]}),"\n",(0,c.jsxs)(r.li,{children:["混合物（颜色）的亮度： ",(0,c.jsx)(r.code,{children:"L =  62.253 \xd7 40 \xf7 100 + 91.374 \xd7 (100 - 40)  \xf7  100 = 79.7256"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["混合物（颜色）的饱和度：",(0,c.jsx)(r.code,{children:"C = 54.011 \xd7 40 \xf7 100 + 31.406 \xd7 (100 - 40) \xf7 100 = 40.448"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["混合物（颜色）的色调：",(0,c.jsx)(r.code,{children:"H = 63.677 \xd7 40 \xf7 100 + 98.834 \xd7 (100-40) \xf7 100 = 84.771"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"color-mix(in lch, peru 40%, palegoldenrod)"})," 的最终计算出的结果是 ",(0,c.jsx)(r.code,{children:"lch(79.7256 40.448 84.771)"})," 。"]}),"\n",(0,c.jsxs)(r.h3,{id:"在各种颜色空间中的混合颜色",children:["在各种颜色空间中的混合颜色",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#在各种颜色空间中的混合颜色",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["混合颜色的默认颜色空间是 OKLAB，它提供了一致的结果。当然，使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 允许指定替代的颜色空间。如此一来，你可以根据自己的需求定制混合颜色。下面，让我们看一下各颜色空间混合颜色的示例。"]}),"\n",(0,c.jsx)(r.p,{children:"首先来看在 sRGB 颜色空间中混合 RGB 颜色。例如："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --base-color: rgb(0 145 255);\n    --blend-color: rgb(0 0 255);\n    --mix-color: color-mix(in srgb, var(--base-color) 50%, var(--blend-color));\n}\n\n.element {\n    background-color: var(--mix-color);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:q,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/MWPLrMW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWPLrMW"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["在这个例子中，我们在 sRGB 颜色空间中混合相等比例饱和度较高的蔚蓝和蓝色（各 ",(0,c.jsx)(r.code,{children:"50%"}),"）。最终的颜色将是霓虹蓝。"]}),"\n",(0,c.jsxs)(r.p,{children:["在 sRGB 颜色空间中混合 RGB 颜色可以通过以下方式进行。首先将 Color1 和 Color2 的每个颜色通道（红色 R、绿色 G 和 蓝色 B）值限制 ",(0,c.jsx)(r.code,{children:"0 ~ 255"})," 的范围内："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"color1 = rgb(0 145 255) → R1 = 0, G1 = 145, B1 = 255\n\ncolor2 = rgb(0 0 255) → R2 = 0, G2 = 0, B2 = 255\n"})}),"\n",(0,c.jsxs)(r.p,{children:["接着将每个通道的值除以 ",(0,c.jsx)(r.code,{children:"255"})," ，将它们归一化为 ",(0,c.jsx)(r.code,{children:"0 ~ 1"})," 范围内的数值："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"color1 = rgb(0 145 255) → R1 = 0, G1 = 145, B1 = 255\nR1 = 0 \xf7 255 = 0\nG1 = 145 \xf7 255 = 0.56863\nB1 = 255 \xf7 255 = 1\n\ncolor2 = rgb(0 0 255) → R2 = 0, G2 = 0, B2 = 255\nR2 = 0 \xf7 255 = 0\nG2 = 0 \xf7 255 = 0\nB2 = 255 \xf7 255 = 1 \n"})}),"\n",(0,c.jsx)(r.p,{children:"这样就可以计算出混合颜色的每个颜色通道的值："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"R' = R1 \xd7 p1 + R2 \xd7 p2 = 0 \xd7 50 \xf7 100 + 0 \xd7 50 \xf7 100 = 0\nG' = G1 \xd7 p1 + G2 \xd7 p2 = 0.56863 \xd7 50 \xf7 100 + 0 \xd7 50 \xf7 100 = 0.284315\nB' = B1 \xd7 p1 + B2 \xd7 p2 = 1 \xd7 50 \xf7 100 + 1 \xd7 50 \xf7 100 = 1\n"})}),"\n",(0,c.jsxs)(r.p,{children:["这样就得到混合颜色 ",(0,c.jsx)(r.code,{children:"--mix-color"})," 的值，即 ",(0,c.jsx)(r.code,{children:"color(srgb 0 0.284315 1)"}),"，在此基础上，可以将每个通道的加权平均值乘以 ",(0,c.jsx)(r.code,{children:"255"}),"，以将其重新归一化为 ",(0,c.jsx)(r.code,{children:"0 ~ 255"})," 范围内的数值。"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-Shell",children:"R' = 0 \xd7 255 = 0;\nG' = 0.284315 \xd7 255 = 72.50\nB' = 1 \xd7 255 = 255\n"})}),"\n",(0,c.jsxs)(r.p,{children:["最终得到混合颜色就是 ",(0,c.jsx)(r.code,{children:"rgb(0 72.50 255)"})," 。我们再来看 HSL 颜色空间混合 LCH 颜色。例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --base-color: hsl(0 100% 50%);\n    --blend-color: hsl(240 100% 50%);\n    --mix-color: color-mix(in lch, var(--base-color) 70%, var(--blend-color) 30%);\n}\n\n.element {\n    background-color: var(--mix-color);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:B,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/abRXqBW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abRXqBW"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["这个示例中，我们在 LCH 颜色空间中混合  ",(0,c.jsx)(r.code,{children:"70%"})," 的红色和 ",(0,c.jsx)(r.code,{children:"30%"})," 的蓝色，其中红色和蓝色是 HSL 颜色空间中的颜色。最终的颜色将是一个充满活力的带粉红色调的红色。"]}),"\n",(0,c.jsxs)(r.p,{children:["上面两个示例不怎么能看得出混合颜色因颜色空间不同所带来的差异。我们来看另一个示例，基色 ",(0,c.jsx)(r.code,{children:"black"})," 和混合色 ",(0,c.jsx)(r.code,{children:"white"})," 各占 ",(0,c.jsx)(r.code,{children:"50%"})," 的混合比，在不同颜色空间中混合颜色："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --base-color: black;\n    --blend-color: white;\n    \n    --mix-color-in-srgb: color-mix(in srgb, black, white);\n    --mix-color-in-srgb-linear: color-mix(in srgb-linear, black, white);\n    --mix-color-in-lab: color-mix(in lab, black, white);\n    --mix-color-in-oklab: color-mix(in oklab, black, white);\n    --mix-color-in-xyz: color-mix(in xyz, black, white);\n    --mix-color-in-xyz-d50: color-mix(in xyz-d50, black, white);\n    --mix-color-in-xyz-d65: color-mix(in xyz-d65, black, white);\n    --mix-color-in-hsl: color-mix(in hsl, black, white);\n    --mix-color-in-hwb: color-mix(in hwb, black, white);\n    --mix-color-in-lch: color-mix(in lch, black, white);\n    --mix-color-in-oklch: color-mix(in srgb, black, white);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:_,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/gOBqvdy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOBqvdy"})]}),"\n"]}),"\n",(0,c.jsx)(r.p,{children:"确实会有很大的影响！"}),"\n",(0,c.jsx)(r.p,{children:"再举一个例子：蓝色和白色。我特意选择这个例子，因为这是一个颜色空间可能会影响结果的情况。在这种情况下，大多数颜色空间都会在从白色到蓝色的过程中变成紫色。它还展示了 OKLAB 如何在颜色空间进行混合，它最接近于大多数人混合白色和蓝色的期望（没有紫色）。"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --base-color: blue;\n    --blend-color: white;\n    \n    --mix-color-in-srgb: color-mix(in srgb, black, white);\n    --mix-color-in-srgb-linear: color-mix(in srgb-linear, black, white);\n    --mix-color-in-lab: color-mix(in lab, black, white);\n    --mix-color-in-oklab: color-mix(in oklab, black, white);\n    --mix-color-in-xyz: color-mix(in xyz, black, white);\n    --mix-color-in-xyz-d50: color-mix(in xyz-d50, black, white);\n    --mix-color-in-xyz-d65: color-mix(in xyz-d65, black, white);\n    --mix-color-in-hsl: color-mix(in hsl, black, white);\n    --mix-color-in-hwb: color-mix(in hwb, black, white);\n    --mix-color-in-lch: color-mix(in lch, black, white);\n    --mix-color-in-oklch: color-mix(in srgb, black, white);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:N,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/zYmeWaM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYmeWaM"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["如果你想知道哪种颜色空间是“最好”的，我的回答是没有。这就是为什么存在这么多选项的原因！如果有一个“最好”的颜色空间，也就不会有新的颜色空间被发明了 （比如 ",(0,c.jsx)(r.a,{href:"https://juejin.cn/book/7223230325122400288/section/7235205520154427429",target:"_blank",rel:"noopener noreferrer",children:"OKLAB 和 OKLCH"}),"）。每种颜色空间都可以有自己独特的光芒，我们应该根据自已的需求来做出正确的选择。"]}),"\n",(0,c.jsxs)(r.p,{children:["例如，如果你想要一个鲜艳的混合结果，可以使用 ",(0,c.jsx)(r.code,{children:"hsl"})," 或 ",(0,c.jsx)(r.code,{children:"hwb"}),"。在以下演示中，将两种鲜艳的颜色（品红和青柠）混合在一起，",(0,c.jsx)(r.code,{children:"hsl"})," 和 ",(0,c.jsx)(r.code,{children:"hwb"})," 都产生了鲜艳的混合结果，而 ",(0,c.jsx)(r.code,{children:"srgb"})," 和 ",(0,c.jsx)(r.code,{children:"oklab"})," 产生了不饱和的颜色。"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --p1: 50%;\n    --p2: 50%;\n    --base-color: magenta;\n    --blend-color: lime;\n \n  \n    --mix-color-in-srgb: color-mix(in srgb, var(--base-color), var(--blend-color));\n    --mix-color-in-oklab: color-mix(in oklab, var(--base-color), var(--blend-color));\n    --mix-color-in-hsl: color-mix(in hsl, var(--base-color), var(--blend-color));\n    --mix-color-in-hwb: color-mix(in hwb, var(--base-color), var(--blend-color));\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:C,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/VwEgXVY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwEgXVY"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["如果你想要一种微妙的混合结果，可以使用 OKLAB。在以下演示中，将蓝色和黑色混合在一起，",(0,c.jsx)(r.code,{children:"hsl"})," 和 ",(0,c.jsx)(r.code,{children:"hwb"})," 会产生过于鲜艳和色调改变的颜色，而 ",(0,c.jsx)(r.code,{children:"srgb"})," 和 ",(0,c.jsx)(r.code,{children:"oklab"})," 则会产生较暗的蓝色。"]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:w,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/mdzvxvP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdzvxvP"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["上面这几个示例，再次向大家验证了",(0,c.jsx)(r.strong,{children:"混合颜色空间的选择可能会对最终结果产生很大影响"}),"。"]}),"\n",(0,c.jsxs)(r.p,{children:["除了指定颜色空间对混合颜色之外，你还可以调整色调的插值。如果你选择在一个圆柱形颜色空间（即 ",(0,c.jsx)(r.code,{children:"hsl"}),"  、 ",(0,c.jsx)(r.code,{children:"hwb"}),"  、 ",(0,c.jsx)(r.code,{children:"lch"})," 和 ",(0,c.jsx)(r.code,{children:"oklch"}),"）进行混合，你可以指定插值为 ",(0,c.jsx)(r.code,{children:"shorter"})," 、 ",(0,c.jsx)(r.code,{children:"longer"})," 、 ",(0,c.jsx)(r.code,{children:"increasing"})," 和 ",(0,c.jsx)(r.code,{children:"decreasing"})," 。比如下面这个示例，使用不同色调插值方法的圆柱形空间颜色混合的效果："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --p1: 50%;\n    --p2: 50%;\n    --base-color: blue;\n    --blend-color: white;\n    \n    --shorter-space: shorter hue;\n    --longer-space: longer hue;\n    --increasing-space: increasing hue;\n    --decreasing-space: decreasing hue;\n  \n    --mix-color-lch: color-mix(in lch var(--shorter-space), var(--base-color) var(--p1), var(--blend-color) var(--p2));\n    --mix-color-oklch: color-mix(in oklch var(--longer-space), var(--base-color) var(--p1), var(--blend-color) var(--p2));\n    --mix-color-hsl: color-mix(in hsl var(--increasing-space), var(--base-color) var(--p1), var(--blend-color) var(--p2));\n    --mix-color-hwb: color-mix(in hwb var(--decreasing-space), var(--base-color) var(--p1), var(--blend-color) var(--p2));\n} \n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:y,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/rNqPdgo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNqPdgo"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["注意，它们之间也会涉及一些计算。比如 ",(0,c.jsx)(r.a,{href:"https://www.w3.org/TR/css-color-5/#color-mix-color-space-effect",target:"_blank",rel:"noopener noreferrer",children:"W3C 规范中提供的这个示例"}),"，向大家阐述了它背景的计算。比如下面这个示例，使用了三个不同的颜色空间，将白色（",(0,c.jsx)(r.code,{children:"white"}),"）和黑色（",(0,c.jsx)(r.code,{children:"black"}),"）进行 ",(0,c.jsx)(r.code,{children:"50%"})," 的混合："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --base-color: white;\n    --blend-color: black;\n    --mix-color-in-lch: color-mix(in lch, var(--base-color), var(--blend-color));\n    --mix-color-in-xyz: color-mix(in xyz, var(--base-color), var(--blend-color));\n    --mix-color-in-srgb: color-mix(in srgb, var(--base-color), var(--blend-color));\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:v,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/RwevyKp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwevyKp"})]}),"\n"]}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:["在 LCH 颜色空间中进行混合的结果是 ",(0,c.jsx)(r.code,{children:"lch(50% 0 0)"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["在 XYZ 颜色空间中混合的结果是 ",(0,c.jsx)(r.code,{children:"lch(76% 0 0)"}),"，较灰；"]}),"\n",(0,c.jsxs)(r.li,{children:["在 sRGB 颜色空间中混合的结果是 ",(0,c.jsx)(r.code,{children:"lch(53.4% 0 0)"}),"，略微偏亮。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["在 LCH 中进行混合得到 ",(0,c.jsx)(r.code,{children:"50%"})," 的 ",(0,c.jsx)(r.code,{children:"L"})," 值，就是完美的中性灰色，与预期完全一致（在 LAB 中进行混合会得到相同的结果，因为 LCH 和 LAB 中的亮度轴 ",(0,c.jsx)(r.code,{children:"L"})," 是相同的）。在 XYZ 中进行混合得到的结果太浅了，因为 XYZ 是线性光，但不是感知均匀的；在 sRGB 中进行混合得到的结果略微偏亮，因为 sRGB 既不是感知均匀的，也不是线性光。"]}),"\n",(0,c.jsxs)(r.p,{children:["再来看一个示例，在 XYZ 颜色空间，将 ",(0,c.jsx)(r.code,{children:"75.23%"})," 的红色和 ",(0,c.jsx)(r.code,{children:"24.77%"})," 的蓝色混合在一起："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color-mix(in xyz, rgb(82.02% 30.21% 35.02%) 75.23%, rgb(5.64% 55.94% 85.31%));\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:"它的计算过程如下所示。"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"rgb(82.02% 30.21% 35.02%)"})," 是 ",(0,c.jsx)(r.code,{children:"lch(52% 58.1 22.7)"})," ，对应的 XYZ 是 ",(0,c.jsx)(r.code,{children:"X=0.3214"}),"，",(0,c.jsx)(r.code,{children:"Y=0.2014"}),"，",(0,c.jsx)(r.code,{children:"Z=0.0879"}),"。"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"rgb(5.64% 55.94% 85.31%)"})," 是 ",(0,c.jsx)(r.code,{children:"lch(56% 49.1 257.1)"}),"，对应的 XYZ 是 ",(0,c.jsx)(r.code,{children:"X=0.2070"}),"，",(0,c.jsx)(r.code,{children:"Y=0.2391"}),"，",(0,c.jsx)(r.code,{children:"Z=0.5249"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["在此基础上计算出混合颜色的 ",(0,c.jsx)(r.code,{children:"X"})," 、",(0,c.jsx)(r.code,{children:"Y"})," 和 ",(0,c.jsx)(r.code,{children:"Z"})," 的值："]}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:["混合结果的 ",(0,c.jsx)(r.code,{children:"X"})," 值为 ",(0,c.jsx)(r.code,{children:"(0.3214 \xd7 0.7523) + (0.2070 \xd7 (1 - 0.7523)) = 0.29306"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["混合结果的 ",(0,c.jsx)(r.code,{children:"Y"})," 值为 ",(0,c.jsx)(r.code,{children:"(0.2014 \xd7 0.7523) + (0.2391 \xd7 (1 - 0.7523)) = 0.21074"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["混合结果的 ",(0,c.jsx)(r.code,{children:"Z"})," 值为 ",(0,c.jsx)(r.code,{children:"(0.0879 \xd7 0.7523) + (0.5249 \xd7 (1 - 0.7523)) = 0.19614"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["最终得到混合结果是 ",(0,c.jsx)(r.code,{children:"lch(53.0304% 38.9346, 352.8138)"})," ，对应的 RGB 是 ",(0,c.jsx)(r.code,{children:"rgb(72.300% 38.639% 53.557%)"}),"。"]}),"\n",(0,c.jsxs)(r.p,{children:["前面我们所展示的都是同类型颜色的混合，比如混合了 CSS 英文词命名的颜色（",(0,c.jsx)(r.code,{children:"white"})," 和 ",(0,c.jsx)(r.code,{children:"black"}),"），混合了同类型的颜色（",(0,c.jsx)(r.code,{children:"rgb"})," 与 ",(0,c.jsx)(r.code,{children:"rgb"})," 或 ",(0,c.jsx)(r.code,{children:"hsl"})," 与 ",(0,c.jsx)(r.code,{children:"hsl"}),"）。其实，在使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 的时候，还可以混合来自两种不同颜色空间的颜色。例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color: color-mix(in hsl, color(display-p3 0 1 0) 80%, yellow);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:"在上述示例中，其计算过程如下所示。"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"color(display-p3 0 1 0)"})," 是 ",(0,c.jsx)(r.code,{children:"color(srgb -0.5116 1.01827 -0.3107)"}),"，位于 sRGB 色域之外。首先会对它做 CSS 色域的映射，CSS 色域映射后，新的颜色是 ",(0,c.jsx)(r.code,{children:"color(srgb 0 0.99797 0)"}),"，然后可以将其转换为 ",(0,c.jsx)(r.code,{children:"hsl"}),"，结果为 ",(0,c.jsx)(r.code,{children:"hsl(120 100% 49.898%)"}),"。"]}),"\n",(0,c.jsxs)(r.li,{children:["黄色（",(0,c.jsx)(r.code,{children:"yellow"}),"）对应的颜色是 ",(0,c.jsx)(r.code,{children:"hsl(60 100% 50%)"}),"。"]}),"\n",(0,c.jsxs)(r.li,{children:["混合颜色的色相是 ",(0,c.jsx)(r.code,{children:"120 \xd7 0.8 + 60 \xd7 0.2 = 108"}),"。"]}),"\n",(0,c.jsxs)(r.li,{children:["混合颜色的饱和度是 ",(0,c.jsx)(r.code,{children:"100%"}),"。"]}),"\n",(0,c.jsxs)(r.li,{children:["混合颜色的亮度是 ",(0,c.jsx)(r.code,{children:"49.898 \xd7 0.8 + 50 \xd7 0.2 = 49.9184"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["最终混合结果是 ",(0,c.jsx)(r.code,{children:"hsl(108 100% 49.9184%)"}),"，对应的色彩空间是 ",(0,c.jsx)(r.code,{children:"color(display-p3 0.48903 0.98415 0.29889)"}),"。"]}),"\n",(0,c.jsxs)(r.h3,{id:"透明度对-color-mix-的影响",children:["透明度对 color-mix() 的影响",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#透明度对-color-mix-的影响",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["到目前为止，所有的 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 示例都使用了完全不透明的颜色。那么我们来看看，带有一定透明度的颜色混合在一起，又会发生什么？比如，下面这个示例，我们在 sRGB 颜色空间中混合相等比例，并且带有 ",(0,c.jsx)(r.code,{children:"50%"})," 透明度的红色和蓝色："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --base-color: rgb(255 0 0 / 0.5);\n    --blend-color: rgb(0 0 255 / 0.5);\n    --mix-color: color-mix(in srgb, var(--base-color), var(--blend-color));\n}\n\n.element {\n    background-color: var(--min-color);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:S,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/rNqPvgV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNqPvgV"})]}),"\n"]}),"\n",(0,c.jsx)(r.p,{children:"正如你所看到的，最终的颜色是一个半透明的紫色。"}),"\n",(0,c.jsxs)(r.p,{children:["带有透明度的颜色进行混合时，它背后的计算相对而言要复杂得多，将会涉及预乘、插值和取消预乘步骤等。在 ",(0,c.jsx)(r.a,{href:"https://www.w3.org/TR/css-color-5/#color-mix-with-alpha",target:"_blank",rel:"noopener noreferrer",children:"W3C 规范中有相关的示例"}),"，我直接搬过来向大家展示它背景计算的复杂性。"]}),"\n",(0,c.jsx)(r.p,{children:"例如："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color: color-mix(in srgb, rgb(100% 0% 0% / 0.7) 25%, rgb(0% 100% 0% / 0.2));\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:"其计算过程如下："}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"rgb(100% 0% 0% / 0.7)"})," 在预乘的情况下等于 ",(0,c.jsx)(r.code,{children:"[0.7，0，0]"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"rgb(0% 100% 0% / 0.2)"})," 在预乘的情况下等于 ",(0,c.jsx)(r.code,{children:"[0,0.2,0]"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["预乘、插值的结果为 ",(0,c.jsx)(r.code,{children:"[0.7 \xd7 0.25 + 0 \xd7 (1 - 0.25)，0 \xd7 0.25 + 0.2 \xd7 (1-0.25)，0 \xd7 0.25 + 0 \xd7 (1-0.25)]"}),"，即",(0,c.jsx)(r.code,{children:"[0.175，0.150，0]"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["插值后的 Alpha 值为 ",(0,c.jsx)(r.code,{children:"0.7 \xd7 0.25 + 0.2 \xd7 (1-0.25) = 0.325"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["取消预乘后的结果为 ",(0,c.jsx)(r.code,{children:"[0.175/0.325，0.150/0.325，0/0.325]"}),"，即 ",(0,c.jsx)(r.code,{children:"[0.53846，0.46154，0]"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["因此，混合颜色为 ",(0,c.jsx)(r.code,{children:"color(srgb 0.53846 0.46154 0 / 0.325)"}),"。"]}),"\n",(0,c.jsx)(r.p,{children:"错误的计算方法是："}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:["插值的结果为 ",(0,c.jsx)(r.code,{children:"[10.25 + 0 \xd7 (1-0.25)，0 \xd7 0.25 + 1 \xd7 (1-0.25)，0 \xd7 0.25 + 0 \xd7 (1-0.25)]"}),"，即 ",(0,c.jsx)(r.code,{children:"[0.25，0.75，0]"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["因此，错误的混合颜色是 ",(0,c.jsx)(r.code,{children:"color(srgb 0.25 0.75 0 / 0.325)"}),"。"]}),"\n",(0,c.jsxs)(r.p,{children:["由此可见，这是一个巨大的差异；正确结果和错误结果之间的 ",(0,c.jsx)(r.code,{children:"ΔE2000"})," 为 ",(0,c.jsx)(r.code,{children:"30.7"}),"！"]}),"\n",(0,c.jsxs)(r.p,{children:["再来看第二个示例。它与上一个示例类似，以 ",(0,c.jsx)(r.code,{children:"25%"})," 半透明的红色和 ",(0,c.jsx)(r.code,{children:"75%"})," 半透明的绿色在 sRGB 中混合。但是，在这种情况下，百分比是指定第一个颜色的 ",(0,c.jsx)(r.code,{children:"20%"})," ，第二个颜色的 ",(0,c.jsx)(r.code,{children:"60%"}),"。这两个颜色相加为 ",(0,c.jsx)(r.code,{children:"80%"})," ，因此 ",(0,c.jsx)(r.code,{children:"α"})," （Alpha）乘数为 ",(0,c.jsx)(r.code,{children:"0.8"}),"。"]}),"\n",(0,c.jsxs)(r.p,{children:["然后将混合百分比缩放 ",(0,c.jsx)(r.code,{children:"100/80"})," 的因子："]}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"20% * 100/80 = 25%"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"60% * 100/80 = 75%"}),"。"]}),"\n"]}),"\n",(0,c.jsx)(r.p,{children:"给出了与先前示例相同的最终混合百分比。"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    color: color-mix(in srgb, rgb(100% 0% 0% / 0.7) 20%, rgb(0% 100% 0% / 0.2) 60%);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:"计算过程如下："}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"rgb(100% 0% 0% / 0.7)"})," 在预乘的情况下等于 ",(0,c.jsx)(r.code,{children:"[0.7，0，0]"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"rgb(0% 100% 0% / 0.2)"})," 在预乘的情况下等于 ",(0,c.jsx)(r.code,{children:"[0,0.2,0]"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["预乘、插值的结果为 ",(0,c.jsx)(r.code,{children:"[0.7 \xd7 0.25 + 0 \xd7 (1 - 0.25)，0 \xd7 0.25 + 0.2 \xd7 (1 - 0.25)，0 \xd7 0.25 + 0 \xd7 (1 - 0.25)]"})," ，即 ",(0,c.jsx)(r.code,{children:"[0.175，0.150，0]"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["插值后的 ",(0,c.jsx)(r.code,{children:"α"})," （Alpha）值为 ",(0,c.jsx)(r.code,{children:"0.7 \xd7 0.25 + 0.2 \xd7 (1 - 0.25)=0.325"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:["取消预乘后的结果为 ",(0,c.jsx)(r.code,{children:"[0.175/0.325，0.150/0.325，0/0.325]"}),"，即 ",(0,c.jsx)(r.code,{children:"[0.53846，0.46154，0]"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["因此，混合颜色应该是 ",(0,c.jsx)(r.code,{children:"color(srgb 0.53846 0.46154 0 / 0.325)"}),"。"]}),"\n",(0,c.jsxs)(r.p,{children:["有一个 ",(0,c.jsx)(r.code,{children:"0.8"})," 的 ",(0,c.jsx)(r.code,{children:"α"})," （Alpha）乘数，因此混合结果的 Alpha 实际上是 ",(0,c.jsx)(r.code,{children:"0.325 * 0.8=0.260"}),"，因此混合颜色实际上是 ",(0,c.jsx)(r.code,{children:"color(srgb 0.53846 0.46154 0 / 0.260)"}),"。"]}),"\n",(0,c.jsx)(r.p,{children:"这个计算过程很复杂，但经过试验，带有透明度的颜色混合看起来与不带透明度的混合百分比类似。例如："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --base-opacity: 50%;\n    --blend-opacity: 50%;\n    --base-color: rgb(255 0 0 / var(--base-opacity));\n    --blend-color: rgb(0 0 255 / var(--blend-opacity));\n    --mix-color: color-mix(in lch, var(--base-color) 50%, var(--blend-color));\n}\n\n.element {\n    background-color: var(--mix-color);\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["在这个示例中，基色为红色，混合色为蓝色。在正常情况下，这些颜色会混合成粉色。然而，每个颜色都是使用 ",(0,c.jsx)(r.code,{children:"rgb"}),"和 ",(0,c.jsx)(r.code,{children:"50%"})," 的不透明度定义的。结果是预期的粉色调，但具有平均的不透明度。如果基本不透明度为 ",(0,c.jsx)(r.code,{children:"100%"}),"，混合不透明度为 ",(0,c.jsx)(r.code,{children:"0%"}),"，则得到的不透明度将为 ",(0,c.jsx)(r.code,{children:"50%"}),"。但无论得到的不透明度如何，",(0,c.jsx)(r.code,{children:"50/50"})," 的颜色混合保持着一致的粉色调。"]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:k,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/wvYNXrb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvYNXrb"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["不知你是否还记得，前面展示了一个示例，当两个颜色的混合百分比总和小于 ",(0,c.jsx)(r.code,{children:"100%"})," 时，最终混合的颜色也是一个带有透明度的颜色："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:f,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 在址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/NWOoGVX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWOoGVX"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["更有趣的是，我们可以将一个不带任何透明度的基色与 ",(0,c.jsx)(r.code,{children:"transparent"})," 关键词进行混合，这样做只是为了使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 改变基色，使其带有一定的透明度。例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --base-color: lightseagreen;\n    --blend-color: transparent;\n    --mix-color: color-mix(in oklab, var(--base-color), var(--blend-color) 75%);\n}\n\n.element {\n    background-color: var(--mix-color);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:u,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/NWOoBPN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWOoBPN"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["在这个示例中，我们将一个 ",(0,c.jsx)(r.code,{children:"75%"})," 透明度的无色（",(0,c.jsx)(r.code,{children:"transparent"}),"）混合颜色和一个完全不透明的浅海洋绿色（",(0,c.jsx)(r.code,{children:"lightseagreen"}),"）混合，结果是具有 ",(0,c.jsx)(r.code,{children:"25%"})," 不透明度的浅海洋绿色（",(0,c.jsx)(r.code,{children:"lightseagreen"}),"）。",(0,c.jsx)(r.code,{children:"25%"})," 是因为在混合过程中指定了透明色在混合中占据 ",(0,c.jsx)(r.code,{children:"75%"})," ，为浅海洋绿色（",(0,c.jsx)(r.code,{children:"lightseagreen"}),"）留下了 ",(0,c.jsx)(r.code,{children:"25%"})," 的不透明度。"]}),"\n",(0,c.jsxs)(r.p,{children:["以下是另一个例子。让这个浅海洋绿色（",(0,c.jsx)(r.code,{children:"lightseagreen"}),"）更加透明，降低它的透明度一半。"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    background-color: color-mix(in srgb, rgb(32 178 170 / 10%), transparent 75%);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:g,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址： ",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/XWxOBdZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWxOBdZ"})]}),"\n"]}),"\n",(0,c.jsxs)(r.h2,{id:"嵌套-color-mix",children:["嵌套 color-mix()",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#嵌套-color-mix",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["CSS 的 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数与其他颜色函数有一点不相同，它支持 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 的嵌套，即在 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 中嵌套 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 。例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    background-color: color-mix(in lch, purple 40%, color-mix(in oklch, plum, white 60%));\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:b,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/vYVbapY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYVbapY"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.code,{children:"color-mix()"})," 函数嵌套时，内部的 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数会首先解析，并将其值返回给其父函数（",(0,c.jsx)(r.code,{children:"color-mix()"}),"）。你可以在 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数中嵌套你需要的次数，以获得所需的结果。只不过嵌套的层级越深，你的代码就会变得越复杂。在实际使用的时候，还是需要考虑代码的可阅读性，个人建议，即使要使用嵌套的 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数，层级也不应该过深。"]}),"\n",(0,c.jsxs)(r.h2,{id:"color-mix-可用来做些什么",children:["color-mix() 可用来做些什么？",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#color-mix-可用来做些什么",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["阅读到这里，大家对于 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 是什么肯定比较清楚了。此时，你更想知道的应该是，在实际开发项目的时候，我们可以使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 做些什么？"]}),"\n",(0,c.jsxs)(r.p,{children:["简单地说，",(0,c.jsx)(r.code,{children:"color-mix()"})," 主要可以应用于设计系统中，用于定义和管理一组连贯的设计属性，比如主题色或者调色板。换句话说，通过将 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数纳入设计系统中，我们可以增强颜色管理的灵活性和适应性。主要有下面一些优点。"]}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"动态颜色操作"})," ：",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数允许设计师基于预定义的颜色 Token 创建各种颜色变化，这种灵活性使得在设计系统内管理和调整颜色更加容易，减少了手动颜色调整的需求。"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"适应性颜色主题"})," ：通过混合不同比例的基础颜色，",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数可以用于生成适应不同环境的颜色主题，如暗黑模式。这种适应性简化了在上下文感知的设计中的颜色主题创建，并确保在不同环境下保持视觉一致性。"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"改进的颜色一致性"})," ：使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数混合颜色可以确保设计系统中的一致性，因为这些颜色源自一组预定义的 Token。这种一致性使得设计师更容易在整个项目中保持一致的视觉语言。"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"高效的颜色探索"})," ：",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数使设计师能够快速探索各种颜色组合，并找到适合他们设计的完美平衡点。这减少了试错的时间，让设计师能够更多地关注设计流程的其他方面。"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"更轻松的协作"})," ：将 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数集成到设计系统中，可以更有效地共享和协作颜色方案。这种集成促进了一种统一的颜色管理方法，并有助于在涉及多个设计师的大型项目中保持视觉连贯性。"]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["总之，将 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数纳入设计系统可以极大地增强设计流程，使设计师更容易管理颜色、创建适应性主题和保持视觉一致性。通过利用这个强大的功能，设计师可以专注于提供更加完美和连贯的用户体验。"]}),"\n",(0,c.jsx)(r.p,{children:"接下来，我们一起来看几个真实场景的用例。"}),"\n",(0,c.jsxs)(r.h3,{id:"使用-color-mix-简化你的调色板",children:["使用 color-mix() 简化你的调色板",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-color-mix-简化你的调色板",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["在设计中，一个简单的颜色调色板通常会比一个杂乱的、不经意的颜色调色板表现得更好。CSS 的 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数是一个简单而强大的工具，可以将你现有的颜色混合在一起，创造出新的颜色等级和更多的颜色组合。例如，我们在创建一个颜色调色板时，首先会定义好一个主色调："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --primary-color-1:＃ff0;\n    --primary-color-2:＃f00;\n    --primary-color-3:＃00f;\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["在主色调的基础上，我们可以使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 来创建二级（次要）颜色："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    /* 一级颜色（主色调）*/\n    --primary-color-1:＃ff0;\n    --primary-color-2:＃f00;\n    --primary-color-3:＃00f;\n    \n    /* 使用 color-mix() 函数，基于主色调创建二级颜色 */\n    --secondary-color-1: color-mix(in srgb, var(--primary-color-1) 50%, var(--primary-color-2));\n    --secondary-color-2: color-mix(in srgb, var(--primary-color-2) 50%, var(--primary-color-3));\n    --secondary-color-3: color-mix(in srgb, var(--primary-color-3) 50%, var(--primary-color-1));\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:"最后，基于主色调和二级颜色创建第三级颜色："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    /* 一级颜色（主色调）*/\n    --primary-color-1:#ff0;\n    --primary-color-2:#f00;\n    --primary-color-3:#00f;\n    \n    /* 使用 color-mix() 函数，基于主色调创建二级颜色 */\n    --secondary-color-1: color-mix(in srgb, var(--primary-color-1) 50%, var(--primary-color-2));\n    --secondary-color-2: color-mix(in srgb, var(--primary-color-2) 50%, var(--primary-color-3));\n    --secondary-color-3: color-mix(in srgb, var(--primary-color-3) 50%, var(--primary-color-1));\n    \n    /* 使用 color-mix() 函数，基于一级颜色和二级颜色来创建三级颜色 */\n    --tertiary-color-1: color-mix(in srgb, var(--primary-color-1) 50%, var(--secondary-color-1));\n    --tertiary-color-2: color-mix(in srgb, var(--secondary-color-1) 50%, var(--primary-color-2));\n    --tertiary-color-3: color-mix(in srgb, var(--primary-color-2) 50%, var(--secondary-color-2));\n    --tertiary-color-4: color-mix(in srgb, var(--secondary-color-2) 50%, var(--primary-color-3));\n    --tertiary-color-5: color-mix(in srgb, var(--primary-color-3) 50%, var(--secondary-color-3));\n    --tertiary-color-6: color-mix(in srgb, var(--secondary-color-3) 50%, var(--primary-color-1));\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:m,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/wvYOGjb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvYOGjb"})]}),"\n"]}),"\n",(0,c.jsx)(r.p,{children:"示例中的颜色只是一个展示性的颜色，你完全可以根据类似的方法构建符合你需求的调色板。另外，示例中使用的是 sRGB 颜色空间，你甚至可以改变相应的颜色空间，为你自己的调色板提供更广泛的，更鲜艳的色调，为最新屏幕技术提供更多的颜色。你可以尝试，下面这个示例中，调整颜色空间，查看调色板相应的变化："}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:p,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/NWOJNeW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWOJNeW"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["我们再来看一个更真实的案例，比如基于 ",(0,c.jsx)(r.code,{children:"--primary-color"})," 、",(0,c.jsx)(r.code,{children:"--success-color"})," 和 ",(0,c.jsx)(r.code,{children:"--warning-color"})," ，通过 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数创建适合于信息警告框（",(0,c.jsx)(r.code,{children:".alert--info"}),"）和错误警告信息框（",(0,c.jsx)(r.code,{children:".alert--error"}),"）的背景颜色："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --primary-color: #0074D9;\n    --success-color: #2ECC40;\n    --warning-color: #FFDC00;\n\n    --info-color: color-mix(in oklab,var(--primary-color), color-mix(in oklab, var(--success-color),var(--warning-color)));\n    --error-color: color-mix(in oklab,var(--warning-color), color-mix(in oklab, var(--primary-color), var(--warning-color)));\n }\n \n .alert--info {\n     background-color: var(--info-color);\n }\n \n .alert-error {\n     background-color: var(--error-color);\n }\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:t,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/YzJgqoR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzJgqoR"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["正如你所看到的，通过使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数，我们可以轻松地创建新的颜色变体，而不需要明确地定义每种颜色的变体。这使得我们可以更轻松地管理一个简单的颜色调色板，同时保持这些颜色的可变性。"]}),"\n",(0,c.jsxs)(r.p,{children:["除了创建新颜色以外，",(0,c.jsx)(r.code,{children:"color-mix()"})," 还可以用于创建动态颜色方案，如 ",(0,c.jsx)(r.code,{children:":hover"})," 和 ",(0,c.jsx)(r.code,{children:":active"})," 状态，以及创建渐变色。通过使用这个小巧而强大的功能，你可以轻松快速地创建灵活的、灵活的设计系统。例如下面这个示例，使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数创建按钮 ",(0,c.jsx)(r.code,{children:":hover"})," 和 ",(0,c.jsx)(r.code,{children:":active"})," 状态的颜色："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --primary-color: #dedbd2;\n}\n\n.button {\n    --button-bg: #087e8b;\n    --button-bg-hover: color-mix(in srgb, var(--button-bg) 75%, var(--primary-color));\n    --button-bg-active: color-mix(in srgb, var(--button-bg-hover) 80%, var(--primary-color));\n    \n    background-color: var(--button-bg);\n}\n\n.button:hover {\n    background-color: var(--button-bg-hover);\n}\n\n.button:active {\n    background-color: var(--button-bg-active);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:j,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/oNaVLLQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNaVLLQ"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["在这个示例中，通过将 ",(0,c.jsx)(r.code,{children:"--button-bg"})," 的 ",(0,c.jsx)(r.code,{children:"75%"})," 混合到 ",(0,c.jsx)(r.code,{children:"--primary-color"})," 中来定义 ",(0,c.jsx)(r.code,{children:"--button-bg-hover"})," 的值。然后，通过再次将 ",(0,c.jsx)(r.code,{children:"--button-bg-hover"})," 的 ",(0,c.jsx)(r.code,{children:"80%"})," 混合到 ",(0,c.jsx)(r.code,{children:"--primary-color"})," 中来设置 ",(0,c.jsx)(r.code,{children:"--button-bg-active"})," 。这样可以轻松地为元素的各个状态（如 ",(0,c.jsx)(r.code,{children:":hover"})," 和 ",(0,c.jsx)(r.code,{children:":active"})," 状态）定义新的颜色，它和 Sass 中的 ",(0,c.jsx)(r.code,{children:"darken()"})," 和 ",(0,c.jsx)(r.code,{children:"lighten()"})," 函数不同之处是，",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数在如何调整颜色方面提供更大的和更精细的控制，并且它是 CSS 本身的一部分，毕竟是 CSS 原生的特性。"]}),"\n",(0,c.jsxs)(r.h3,{id:"使用-color-mix-构建颜色主题",children:["使用 color-mix() 构建颜色主题",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-color-mix-构建颜色主题",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["接下来，我们一起来看一个使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 构建颜色主题的案例。"]}),"\n",(0,c.jsxs)(r.p,{children:["我们基于一个十六进制的品牌颜色（例如，",(0,c.jsx)(r.code,{children:"#0af"}),"）为 Web 应用或页面创建一个浅色和深色主题。首先，使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 为 Web 创建浅色主题，浅色主题为文本颜色（",(0,c.jsx)(r.code,{children:"color"}),"）创建了两个深蓝色和一个非常明亮的白色背景颜色："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    /* 十六进制表示的品牌色 */\n    --brand-color: #0af;\n    \n    /* 浅色主题*/\n    \n    /* 两个深蓝的文本颜色 */\n    --text-primary: color-mix(in oklab, var(--brand-color) 25%, black);\n    --text-secondary: color-mix(in oklab, var(--brand-color) 40%, black);\n    \n    /* 非常明亮的白色背景色 */\n    --surface-primary: color-mix(in oklab, var(--brand-color) 5%, white);\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["然后，再基于 CSS 的媒体查询，为 Web 创建一个深色主题，我们只需要在 ",(0,c.jsx)(r.code,{children:"@media (prefers-color-scheme：dark) {}"})," 中调整自定义属性的值（即使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数为自定义属性重新分配新的颜色值），以便背景是暗色，而文本颜色是浅色："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    /* 十六进制表示的品牌色 */\n    --brand-color: #0af;\n    \n    /* 浅色主题*/\n    \n    /* 两个深蓝的文本颜色 */\n    --text-primary: color-mix(in oklab, var(--brand-color) 25%, black);\n    --text-secondary: color-mix(in oklab, var(--brand-color) 40%, black);\n    \n    /* 非常明亮的白色背景色 */\n    --surface-primary: color-mix(in oklab, var(--brand-color) 5%, white);\n}\n\n/* 创建暗色主题 */\n@media (prefers-color-scheme：dark) {\n    :root {\n        --text-primary: color-mix(in oklab, var(--brand-color) 15%, white);\n        --text-secondary: color-mix(in oklab, var(--brand-color) 40%, white);\n        --surface-primary: color-mix(in oklab, var(--brand-color) 5%, black);\n    }\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["再借助一下 ",(0,c.jsx)(r.a,{href:"https://juejin.cn/book/7223230325122400288/section/7224404685615005728",target:"_blank",rel:"noopener noreferrer",children:"CSS 的 :has() 选择器"}),"的功能以及 ",(0,c.jsx)(r.a,{href:"https://juejin.cn/book/7161370789680250917/section/7164357178164248612",target:"_blank",rel:"noopener noreferrer",children:"CSS 的样式查询功能"}),"，你就可以完全不依赖任何 JavaScript 脚本，完成 Web 应用或页面主题之间的切换，而且主题颜色是通过 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 完成的。最终的 CSS 代码如下："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:':where(html) {\n    --darkmode: 0;\n    container-name: root;\n    container-type: normal;\n    color-scheme: light dark;\n}\n\nbody {\n    /* 十六进制表示的品牌色 */\n    --brand-color: #0af;\n\n    /* 浅色主题*/\n\n    /* 两个深蓝的文本颜色 */\n    --text-primary: color-mix(in oklab, var(--brand-color) 25%, black);\n    --text-secondary: color-mix(in oklab, var(--brand-color) 40%, black);\n\n    /* 非常明亮的白色背景色 */\n    --surface-primary: color-mix(in oklab, var(--brand-color) 5%, white);\n    --surface-secondary: color-mix(in oklab, var(--brand-color) 20%, white);\n}\n\n/* 创建暗色主题 */\n@media (prefers-color-scheme：dark) {\n    body {\n        --text-primary: color-mix(in oklab, var(--brand-color) 15%, white);\n        --text-secondary: color-mix(in oklab, var(--brand-color) 40%, white);\n        --surface-primary: color-mix(in oklab, var(--brand-color) 5%, black);\n        --surface-secondary: color-mix(in oklab, var(--brand-color) 20%, black);\n    }\n}\n\n@media (prefers-color-scheme: dark) {\n    html {\n        --darkmode: 1;\n        color-scheme: dark;\n    }\n}\n@media (prefers-color-scheme: light) {\n    html {\n        --darkmode: 0;\n    }\n}\n\nhtml:has(#color-scheme-light:checked) {\n    --darkmode: 0;\n}\nhtml:has(#color-scheme-dark:checked) {\n    --darkmode: 1;\n}\n\n@container root style(--darkmode: 1) {\n    body {\n        --text-primary: color-mix(in oklab, var(--brand-color) 15%, white);\n        --text-secondary: color-mix(in oklab, var(--brand-color) 40%, white);\n        --surface-primary: color-mix(in oklab, var(--brand-color) 5%, black);\n        --surface-secondary: color-mix(in oklab, var(--brand-color) 20%, black);\n    }\n}\n\nbody {\n    background: var(--surface-primary);\n    color: var(--text-primary);\n    color-scheme: light dark;\n  \n    background-color: var(--surface-primary);\n    background-image:linear-gradient(\n        130deg,\n        transparent 0%,\n        transparent 86%,\n        var(--surface-primary) 86%,\n        var(--surface-primary) 87%,\n        transparent 87%,\n        transparent 91%,\n        var(--text-primary) 91%,\n        var(--text-primary) 95%,\n        var(--text-secondary) 95%,\n        var(--text-secondary) 100%\n        ),\n        url(\'data:image/svg+xml,<svg width="42" height="44" viewBox="0 0 42 44" xmlns="http://www.w3.org/2000/svg"><g id="Page-1" fill="none" fill-rule="evenodd"><g id="brick-wall" fill="%239C92AC" fill-opacity="0.4"><path d="M0 0h42v44H0V0zm1 1h40v20H1V1zM0 23h20v20H0V23zm22 0h20v20H22V23z"/></g></g></svg>\');\n}\n\np {\n    color: var(--text-secondary);\n}\n\n.toggle-group {\n    border: 2px solid var(--text-primary);\n}\n\n.toggle-group label:has(input:checked) {\n    background-color: var(--surface-secondary);\n    color: var(--text-secondary);\n}\n'})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:x,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/LYgagNx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYgagNx"})]}),"\n"]}),"\n",(0,c.jsxs)(r.h3,{id:"使用-color-mix-调整颜色透明度",children:["使用 color-mix() 调整颜色透明度",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-color-mix-调整颜色透明度",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["在学习 ",(0,c.jsx)(r.a,{href:"https://juejin.cn/book/7223230325122400288/section/7231515598088306720",target:"_blank",rel:"noopener noreferrer",children:"CSS 的相对颜色"}),"的时候，我们知道了 CSS 可以使用相对语法来调整一个十六进制颜色的透明。例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --theme-primary: #8832CC;\n}\n.bg-primary-100 {\n    background-color: hsl(from var(--theme-primary) h s 90%);\n}\n\n.bg-primary-200 {\n    background-color: hsl(from var(--theme-primary) h s 80%);\n}\n\n.bg-primary-300 {\n    background-color: hsl(from var(--theme-primary) h s 70%);\n}\n\n.bg-primary-400 {\n    background-color: hsl(from var(--theme-primary) h s 60%);\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["有意思的是，CSS 的 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 也可以用来调整颜色的不透明度。假设你要创建品牌颜色的半透明版本，可以使用 ",(0,c.jsx)(r.code,{children:"transparent"})," 与品牌色混合，并且调整 ",(0,c.jsx)(r.code,{children:"transparent"})," （透明颜色）的混合比例。它看起来有点像这样："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:":root {\n    --brand-color: #8832CC;\n    \n    --brand-color-a10: color-mix(in oklch, var(--brand-color), transparent 90%);\n    --brand-color-a20: color-mix(in oklch, var(--brand-color), transparent 80%);\n    --brand-color-a30: color-mix(in oklch, var(--brand-color), transparent 70%);\n    --brand-color-a40: color-mix(in oklch, var(--brand-color), transparent 60%);\n    --brand-color-a50: color-mix(in oklch, var(--brand-color), transparent 50%);\n    --brand-color-a60: color-mix(in oklch, var(--brand-color), transparent 40%);\n    --brand-color-a70: color-mix(in oklch, var(--brand-color), transparent 30%);\n    --brand-color-a80: color-mix(in oklch, var(--brand-color), transparent 20%);\n    --brand-color-a90: color-mix(in oklch, var(--brand-color), transparent 10%);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:h,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/eYPXPrZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYPXPrZ"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["这种使用 ",(0,c.jsx)(r.code,{children:"color-mix"})," 函数的方式，可以在保留品牌颜色的同时调整透明度。"]}),"\n",(0,c.jsxs)(r.h2,{id:"color-mix-与-currentcolor",children:["color-mix() 与 currentColor",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#color-mix-与-currentcolor",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["在 CSS 中给颜色属性设置颜色时，还可以使用 ",(0,c.jsx)(r.code,{children:"currentColor"})," ，而且 ",(0,c.jsx)(r.code,{children:"currentColor"})," 是一个很有意思的属性，它可以根据元素当前的 ",(0,c.jsx)(r.code,{children:"color"})," 或其父元素（或祖先元素）来决定 ",(0,c.jsx)(r.code,{children:"currentColor"})," 的值。换句话说，在一些场景中使用 ",(0,c.jsx)(r.code,{children:"currentColor"})," 作为颜色属性的值时，可以根据 ",(0,c.jsx)(r.code,{children:"color"})," 来动态匹配颜色值。"]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:a,alt:"img"})}),"\n",(0,c.jsxs)(r.p,{children:["这个相对变量 ",(0,c.jsx)(r.code,{children:"currentColor"})," 同样也能与 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 一起使用。例如："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".box {\n    color: red;\n    border: 5px solid color-mix(in srgb, currentColor 30%, white);\n    background-color: color-mix(in srgb, currentColor 30%, black);\n    outline: 5px solid currentColor;\n    outline-offset: 5px;\n}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["在 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数中使用 ",(0,c.jsx)(r.code,{children:"currentColor"})," 的效果如下所示："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:s,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/GRYewKz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRYewKz"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["也就是说，在 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数中使用相对变量 ",(0,c.jsx)(r.code,{children:"currentColor"})," 可以相对于某个颜色进行混合，有点类似于 CSS 相对颜色特性。"]}),"\n",(0,c.jsxs)(r.p,{children:["不过有些地方曾经阐述过，在 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数中使用 ",(0,c.jsx)(r.code,{children:"currentColor"})," 是不起作用的，但我实测下来是有效果。只不过，在 Chrome 调试器中改变 ",(0,c.jsx)(r.code,{children:"color"})," 值时，并没看到 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 有相应变化："]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:d,alt:"img"})}),"\n",(0,c.jsxs)(r.p,{children:["你可能已经发现了，在 Chrome 浏览器中，可以使用开发者工具查看 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数的结果，也可以使用它来调试 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数。它可以识别并突出显示语法，在样式面板的样式旁边创建混合预览，并允许选择替代颜色。"]}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:i,alt:"img"})}),"\n",(0,c.jsxs)(r.h2,{id:"color-mix-的降级处理",children:["color-mix() 的降级处理",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#color-mix-的降级处理",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["由于 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数是 CSS 规范的一个相对较新的特性，虽然截至目前为止（2023年 06 月），",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数已得到主流浏览器的支持，但是要在项目中使用，还是需要考虑旧版本浏览器兼容性问题。"]}),"\n",(0,c.jsxs)(r.p,{children:["你可以像使用 ",(0,c.jsx)(r.code,{children:"color()"})," 函数那样，在使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数时，对其进行降级处理。首先使用备用样式，为不支持 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数的浏览器提供替代的颜色。在 CSS 中使用 ",(0,c.jsx)(r.code,{children:"@supports"})," 规则检测函数支持情况，并相应地应用备用样式："]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:".element {\n    background-color: purple; /* 不支持的浏览器的备用颜色 */\n}\n\n@supports (background-color: color-mix(in srgb, red, blue)) {\n    .element {\n        background-color: color-mix(in srgb, red 50%, blue);\n    }\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:"其次也可以有效使用自定义属性的无效变量，例如："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-CSS",children:"@supports (background-color: color-mix(in srgb, red, blue)) {\n    :root {\n        --mix-color: ; /* 冒号(:)和分号(;) 之间有一个空格符 */\n    }\n}\n\n.element {\n    --mixing-color: var(--mix-color) color-mix(in srgb, red 50%, blue);\n    --primary-color: var(--mixing-color, purple);\n    background-color: var(--primary-color);\n}\n"})}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)("img",{src:l,alt:"img"})}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["Demo 地址：",(0,c.jsx)(r.a,{href:"https://codepen.io/airen/full/WNamYPp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNamYPp"})]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["你也可以采用渐进增强的处理方式，首先设计基本的颜色方案，以在所有浏览器上运行良好，然后增强 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数在支持它的浏览器上的使用。这种方法确保所有用户都拥有一个功能强大且外观吸引人的体验，而不管的浏览器能力如何。"]}),"\n",(0,c.jsxs)(r.p,{children:["最后就是采用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数的 Polyfill 了，只不过到目前为止还没有相应的 Polyfill 出现，但你可以持续关注这方面的进展。如果有相应的 Polyfill，就可以为不支持的浏览器提供 JavaScript 实现函数，来填补浏览器支持的差距。当然，你也可以使用相关的 PostCSS 插件，这样无需增加额外的精力来处理 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数的兼容性。"]}),"\n",(0,c.jsxs)(r.h2,{id:"小结",children:["小结",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["CSS 的 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数主要特性是可以将两种颜色按比例混合出新的颜色，除此之外，它可以像相对颜色一样，改变颜色的透明度。虽然它的表现上似乎复制了 Sass 处理器中的 ",(0,c.jsx)(r.code,{children:"light()"})," 和 ",(0,c.jsx)(r.code,{children:"darken()"})," 函数，但它在如何调整颜色方面提供了更大、更精细的控制，并且它是 CSS 的一部分，是 CSS 原生的特性。"]}),"\n",(0,c.jsxs)(r.p,{children:["在实际开发的过程中，我们可以使用 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数来制作 Web 应用或页面的主题，也可以用它来制作主题色的调色板等。"]}),"\n",(0,c.jsxs)(r.p,{children:["虽然目前仅有现代浏览器支持 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数，但采用备用样式和渐进增强等策略，可以确保你的设计在不同的浏览器上保持视觉一致性和功能性。随着对 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 函数的支持不断改进，它预计成为 Web 设计师和开发人员创建动态和适应性颜色方案的宝贵工具。"]}),"\n",(0,c.jsxs)(r.p,{children:["就我个人而言，将 ",(0,c.jsx)(r.code,{children:"color-mix()"})," 与 ",(0,c.jsx)(r.code,{children:"color-contrast()"})," 结合起来是一个特别令人兴奋的领域，可以帮助我们制作出一个可访问性更强的应用，也能给用户一个更佳的体验。"]})]})}function M(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,o.ah)(),e.components);return r?(0,c.jsx)(r,{...e,children:(0,c.jsx)(Z,{...e})}):Z(e)}let T=M;M.__RSPRESS_PAGE_META={},M.__RSPRESS_PAGE_META["%E7%8E%B0%E4%BB%A3CSS%2F%E7%AC%AC13%E7%AB%A0%E2%80%94CSS%E7%9A%84%E6%B7%B7%E5%90%88%E9%A2%9C%E8%89%B2%EF%BC%9Acolor-mix().md"]={toc:[{text:"CSS 中的混合颜色",id:"css-中的混合颜色",depth:2},{text:"CSS 的 color-mix()",id:"css-的-color-mix",depth:2},{text:"color-mix() 语法",id:"color-mix-语法",depth:2},{text:"color-mix() 背后的计算",id:"color-mix-背后的计算",depth:2},{text:"混合颜色的百分比归一化",id:"混合颜色的百分比归一化",depth:3},{text:"color-mix() 函数结果是如何计算的",id:"color-mix-函数结果是如何计算的",depth:3},{text:"在各种颜色空间中的混合颜色",id:"在各种颜色空间中的混合颜色",depth:3},{text:"透明度对 color-mix() 的影响",id:"透明度对-color-mix-的影响",depth:3},{text:"嵌套 color-mix()",id:"嵌套-color-mix",depth:2},{text:"color-mix() 可用来做些什么？",id:"color-mix-可用来做些什么",depth:2},{text:"使用 color-mix() 简化你的调色板",id:"使用-color-mix-简化你的调色板",depth:3},{text:"使用 color-mix() 构建颜色主题",id:"使用-color-mix-构建颜色主题",depth:3},{text:"使用 color-mix() 调整颜色透明度",id:"使用-color-mix-调整颜色透明度",depth:3},{text:"color-mix() 与 currentColor",id:"color-mix-与-currentcolor",depth:2},{text:"color-mix() 的降级处理",id:"color-mix-的降级处理",depth:2},{text:"小结",id:"小结",depth:2}],title:"第13章—CSS的混合颜色：color-mix()",headingTitle:"第13章—CSS的混合颜色：color-mix()",frontmatter:{}}}}]);