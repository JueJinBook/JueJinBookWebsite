"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["84065"],{993710:function(e,n,r){r.r(n),r.d(n,{default:()=>p});var t=r(552676),i=r(740453);let o=r.p+"static/image/9647401893ae35847f3e7546dc52cc03.1cefe71a.webp",s=r.p+"static/image/488f4721acdeb5d473f31c0223f1335b.bf49035f.webp",a=r.p+"static/image/63160b3e28edbfd3dbdcefc7990260c1.06d91eb5.webp",c=r.p+"static/image/8f3ebc82a64528ec276813ad1fd30b87.880bf182.webp";function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",strong:"strong",img:"img",blockquote:"blockquote",pre:"pre",code:"code",ul:"ul",h3:"h3"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"39组件实战表单组件开发",children:["39.组件实战：表单组件开发",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#39组件实战表单组件开发",children:"#"})]}),"\n",(0,t.jsxs)(n.h2,{id:"简介",children:["简介",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在中后台项目中，表单是非常常见的场景。为了提高开发效率并确保一致性，可以使用低代码平台来收敛表单开发。在企业内部的设计系统框架的约束下，也能够很好的保证页面整体风格的一致性。"}),"\n",(0,t.jsx)(n.p,{children:"以下是几个重要的表单场景，可以通过低代码平台来实现："}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"编排"}),"：低代码平台通常提供栅格化布局功能，可以方便地进行表单的编排。你可以选择一行三个、一行两个等布局形式，根据需要灵活调整表单控件的排列方式。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"检查"}),"：低代码平台支持对每个输入内容进行检查，以确保满足业务字段的属性要求。你可以定义校验规则，比如必填字段、长度限制、格式验证等，以便在用户填写表单时进行验证并给出相应的提示。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"逻辑"}),"：低代码平台提供了数据联动的能力，可以在表单控件之间建立关联关系。例如，当某个控件的值发生变化时，可以触发其他控件的联动操作，如显示/隐藏、禁用/启用等。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"提交"}),"：低代码平台可以帮助你将填写好的表单内容进行提交。你可以定义提交的方式，如保存到数据库、发送到后端接口等，以完成表单数据的持久化或后续处理。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"通过使用低代码平台，可以以较小的成本快速构建符合业务需求的表单，提高杂项事务的效率，降低开发沟通成本。"}),"\n",(0,t.jsx)(n.p,{children:"如下图所示："}),"\n",(0,t.jsx)(n.p,{children:"整个表单组件包含表单容器和表单控件都可以排列，通过配合之前实现的栅格化容器组件能够比较方便的完成相应的布局。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["通过简单的配置面板给 ",(0,t.jsx)(n.strong,{children:"Input"})," 组件绑定 ",(0,t.jsx)(n.strong,{children:"label"})," 和 ",(0,t.jsx)(n.strong,{children:"name"})," 。如果使用过antd的同学都知道，被",(0,t.jsx)(n.strong,{children:"FormItem"}),"组件包裹的控件发生变化的时候 ",(0,t.jsx)(n.strong,{children:"（执行onChange）"}),"，会触发最外层",(0,t.jsx)(n.strong,{children:"Form容器"}),"的",(0,t.jsx)(n.strong,{children:"onValuesChange"}),"方法，点击提交按钮会执行",(0,t.jsx)(n.strong,{children:"onFinish"}),"，在这两个方法回调中都可以拿到当前表单容器内的值。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"以上就是整个表单组件的基本使用，接下来的内容就是来实现一系列的物料组件，完善表单相关的控件。内容相对简单，如果搞懂了之前的物料篇内容，实现起来是没有任何压力的。"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"form容器",children:["Form容器",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#form容器",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Form组件"}),"是表单的最外层，也就是说它是一个容器组件。"]}),"\n",(0,t.jsxs)(n.p,{children:["如下代码所示，使用",(0,t.jsx)(n.strong,{children:"ProFrom"}),"创建",(0,t.jsx)(n.strong,{children:"FormView视图组件"}),"，并进行ref绑定支持拖放和与画布连接，并将属性面板配置的",(0,t.jsx)(n.strong,{children:"props"}),"传入到组件当中。"]}),"\n",(0,t.jsxs)(n.p,{children:["在",(0,t.jsx)(n.strong,{children:"materials"}),"物料包下，创建",(0,t.jsx)(n.strong,{children:"form"}),"文件夹，用于管理整个表单体系的控件内容。如下图文件目录所示，在之前设计篇的时候有提过。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tree",children:"src\n├── form\n│   ├── input\n│   │   ├── settings.tsx\n│   │   ├── input.tsx\n│   │   └── view.tsx\n│   ├── select\n│   │   ├── settings.tsx\n│   │   ├── input.tsx\n│   │   └── view.tsx\n│   ├── radio\n│   │   ├── settings.tsx\n│   │   ├── input.tsx\n│   │   └── view.tsx\n│   └── checkbox\n│       ├── settings.tsx\n│       ├── input.tsx\n│       └── view.tsx\n├── index.tsx\n├── view.tsx\n└── settings.tsx\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["如下代码所示，在",(0,t.jsx)(n.strong,{children:"view.ts"}),"中主要是为了实现",(0,t.jsx)(n.strong,{children:"FormView"}),"和",(0,t.jsx)(n.strong,{children:"FormItemView"}),"两个容器组件。"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"FormView"}),"：表单容器组件，接管表单内部操作和状态的中心容器。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"FormItemView"}),"：用于自定义表单的内容，然后来进行绑定，需要注意的是这里还需要一定的处理，因为要保证",(0,t.jsx)(n.strong,{children:"FormItem"}),"的元素具备",(0,t.jsx)(n.strong,{children:"onChange"}),"和",(0,t.jsx)(n.strong,{children:"value"}),"的组合范式才能具备状态相互绑定。"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["在这里，使用了",(0,t.jsx)(n.code,{children:"Slot"}),"来为空内容进行一定的占位。"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport type { FormItemProps } from "antd";\nimport { Form } from "antd";\nimport { Slot } from "..";\nimport { ProForm, ProFormText } from "@ant-design/pro-components";\n\nexport const FormView = React.forwardRef<HTMLDivElement, any>((props, ref) => {\n  const [form] = Form.useForm();\n  return (\n    <div ref={ref}>\n      <ProForm\n        form={form}\n        {...props}\n        onValuesChange={(changeValues) => console.log(changeValues)}\n        onFinish={(v) => {\n          console.log(v, "onValuesChange");\n        }}\n      >\n        <Slot>{props.children as any}</Slot>\n      </ProForm>\n    </div>\n  );\n});\n\nexport const FormItemView = React.forwardRef<HTMLDivElement, FormItemProps>(\n  (props, ref) => {\n    return (\n      <div ref={ref}>\n        <Form.Item>\n          <Slot>{props.children as any}</Slot>\n        </Form.Item>\n      </div>\n    );\n  }\n);\n'})}),"\n",(0,t.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,t.jsxs)(n.p,{children:["实现",(0,t.jsx)(n.strong,{children:"Form"}),"容器组件后，接下来就是将其与属性设置面板混装成对应的物料组件。最终将",(0,t.jsx)(n.strong,{children:"Form"}),"和",(0,t.jsx)(n.strong,{children:"FormItem"}),"导出提供给编辑器使用。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import type * as React from 'react'\nimport { createReactMaterial, withMaterialNode } from '@lgnition-lowcode/core'\nimport TitleSettings from './settings'\nimport { FormView, FormItemView } from './view'\n\nexport const Form = createReactMaterial(withMaterialNode<React.ComponentProps<typeof FormView>>(FormView), {\n  displayName: 'Form',\n  related: {\n    settingRender: TitleSettings\n  },\n})\n\nexport const FormItem = createReactMaterial(withMaterialNode<React.ComponentProps<typeof FormItemView>>(FormItemView), {\n  displayName: 'FormItem',\n  related: {\n    settingRender: TitleSettings\n  },\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["需要注意的是，现在还没有明确分类，由于是容器组件所以需要在外部包裹一层Element组件来传递",(0,t.jsx)(n.strong,{children:"props.children"}),"属性。在这里简单的判断下组件支持，后续做组件套件区分的时候会重新修正。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:'{\n          (props.list || []).map((item) => {\n            const { key, component } = item\n            let value = React.createElement(component);\n            if (["Container"].includes(key)) {\n              value = <Element canvas is={component} initialHeight={100} initialWidth={"10%"} style={{\n                background: token.colorPrimary\n              }} />;\n            }\n\n+            if (["Form", "FormItem"].includes(key)) {\n+              console.log("TableView")\n+              value = <Element canvas is={component} />\n+            }\n\n            if (!item?.component?.craft?.displayName) return null\n\n            return (\n              <Col span={8} key={item.key}\n                ref={(ref: HTMLDivElement) => connectors.create(ref, value)} >\n                <CardItem name={item?.component?.craft?.displayName} />\n              </Col>\n            )\n          })\n        }\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"form控件",children:["Form控件",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#form控件",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Form"}),"控件提供了表单数据录入的基础功能，不同的表单控件能够给用户更好的输入体验。",(0,t.jsx)(n.strong,{children:"@ant-design/pro-components"})," 是一个功能强大的组件库，可以帮助您快速构建出具有丰富功能和良好用户体验的表单控件。下面我来基于**@ant-design/pro-components**组件库完成Form控件物料化示例。"]}),"\n",(0,t.jsxs)(n.h3,{id:"input组件",children:["Input组件",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#input组件",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"当需要收信息时，例如电子邮件地址、电话号码、地址等都需要使用输入框控件来完成，不同的输入框在不同的场景下往往发挥意想不到的作用，接下来就来实现一些基础输入框的物料。"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input"}),"：用于接收用户输入的常见文本。它可以用于输入用户名、电子邮件、地址等信息。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"InputNumber"}),"：用于接收数值类型的输入。它可以用于输入年龄、数量、价格等需要数值输入的场景。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TextArea"}),"：用于接收多行文本信息。它适用于用户输入较长的文本内容，如评论、描述等。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Password"}),"：用于接收用户输入的密码。它会将输入内容隐藏为圆点或星号，以保护用户的密码安全。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"实现如下代码所示："}),"\n",(0,t.jsxs)(n.p,{children:["基于",(0,t.jsx)(n.strong,{children:"ProFormText"}),", ",(0,t.jsx)(n.strong,{children:"ProFormTextArea"}),", ",(0,t.jsx)(n.strong,{children:"ProFormDigit"}),"这些高阶组件，基本可以0成本接入。实现方式与Form容器相同，都是通过创建view层，然后进行导出。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { ProFormText, ProFormTextArea, ProFormDigit } from "@ant-design/pro-components";\n\nexport const InputView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormText>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormText {...props} />\n    </div>\n  );\n});\n\nexport const TextAreaView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormTextArea>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormTextArea {...props} />\n    </div>\n  );\n});\n\nexport const InputPasswordView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormText.Password>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormText.Password {...props} />\n    </div>\n  );\n});\n\nexport const InputNumber = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormDigit>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormDigit {...props} />\n    </div>\n  );\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"如下代码将创建好的input组件引入后，进行物料创建导出。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import type * as React from "react";\nimport { createReactMaterial, withMaterialNode } from "@lgnition-lowcode/core";\nimport TitleSettings from "./settings";\nimport {\n  InputView,\n  TextAreaView,\n  InputPasswordView,\n  InputNumber,\n} from "./view";\n\nexport const _Input = createReactMaterial(\n  withMaterialNode<React.ComponentProps<typeof InputView>>(InputView),\n  {\n    displayName: "Input",\n    related: {\n      settingRender: TitleSettings,\n    },\n  }\n);\n\nexport const _InputTextArea = createReactMaterial(\n  withMaterialNode<React.ComponentProps<typeof TextAreaView>>(TextAreaView),\n  {\n    displayName: "TextArea",\n    related: {\n      settingRender: TitleSettings,\n    },\n  }\n);\n\nexport const _InputPasswordView = createReactMaterial(\n  withMaterialNode<React.ComponentProps<typeof InputPasswordView>>(\n    InputPasswordView\n  ),\n  {\n    displayName: "Password",\n    related: {\n      settingRender: TitleSettings,\n    },\n  }\n);\n\nexport const _InputNumber = createReactMaterial(\n  withMaterialNode<React.ComponentProps<typeof InputNumber>>(InputNumber),\n  {\n    displayName: "InputNumber",\n    related: {\n      settingRender: TitleSettings,\n    },\n  }\n);\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:""})}),"\n",(0,t.jsxs)(n.h3,{id:"逻辑交互性控件",children:["逻辑交互性控件",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#逻辑交互性控件",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["逻辑交互性控件指的是",(0,t.jsx)(n.strong,{children:"Switch"}),"、",(0,t.jsx)(n.strong,{children:"Radio"}),"、",(0,t.jsx)(n.strong,{children:"Checkbox"}),"等提供给用户互斥或者多选等含义组件，具有一定的提示和表达性，器特点就是交互性强。接下来就来实现相关物料的实现："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Segmented"}),"（分段选择器）：用于在多个选项之间进行选择，以水平按钮或标签的形式呈现。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Switch"}),"（开关）：用于切换开关状态，通常以滑动按钮的形式呈现。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Slider"}),"（滑块）：用于在范围内选择数值或位置，以滑动条的形式呈现。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Checkbox"}),"（复选框）：用于从预定义选项中选择多个选项，以方框和标签的形式呈现。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Radio"}),"（单选框）：用于从预定义选项中选择单个选项，以单选按钮的形式呈现。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,t.jsx)(n.p,{children:"同样以和输入框相同的手段将其包装成为物料组件使用，方法是一致的。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { ProFormCheckbox, ProFormSlider, ProFormSwitch, ProFormSegmented, ProFormRadio } from "@ant-design/pro-components";\n\nexport const SegmentedView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormSegmented>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormSegmented {...props} />\n    </div>\n  );\n});\n\nexport const SwitchView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormSwitch>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormSwitch {...props} />\n    </div>\n  );\n});\n\nexport const SliderView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormSlider>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormSlider {...props} />\n    </div>\n  );\n});\n\nexport const CheckboxView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormCheckbox>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormCheckbox {...props} />\n    </div>\n  );\n});\n\nexport const RadioGroupView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormRadio.Group>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormRadio.Group {...props} />\n    </div>\n  );\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"导出物料实现如下："}),"\n",(0,t.jsxs)(n.p,{children:["基于这类交互性组件，推荐在",(0,t.jsx)(n.strong,{children:"props"}),"中设置一定的默认值和默认配置，避免在视图显示为空时产生错误的歧义。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import type * as React from 'react'\nimport { createReactMaterial, withMaterialNode } from '@lgnition-lowcode/core'\nimport TitleSettings from './settings'\nimport { SliderView, SwitchView, CheckboxView, SegmentedView, RadioGroupView } from './view'\n\nexport const Segmented = createReactMaterial(withMaterialNode<React.ComponentProps<typeof SegmentedView>>(SegmentedView), {\n  displayName: 'Segmented',\n  related: {\n    settingRender: TitleSettings\n  },\n})\n\nexport const Checkbox= createReactMaterial(withMaterialNode<React.ComponentProps<typeof CheckboxView>>(CheckboxView), {\n  displayName: 'Checkbox',\n  related: {\n    settingRender: TitleSettings\n  },\n})\n\nexport const Switch = createReactMaterial(withMaterialNode<React.ComponentProps<typeof SwitchView>>(SwitchView), {\n  displayName: 'Switch',\n  related: {\n    settingRender: TitleSettings\n  },\n})\n\nexport const Slider = createReactMaterial(withMaterialNode<React.ComponentProps<typeof SliderView>>(SliderView), {\n  displayName: 'Slider',\n  related: {\n    settingRender: TitleSettings\n  },\n})\n\nexport const RadioGroup = createReactMaterial(withMaterialNode<React.ComponentProps<typeof RadioGroupView>>(RadioGroupView), {\n  displayName: 'RadioGroup',\n  related: {\n    settingRender: TitleSettings\n  },\n})\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"日期时间选择器",children:["日期时间选择器",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#日期时间选择器",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"日期时间选择器是指在表单中需要用户提供特定日期信息的情况，包括生日、预约/预订日期、事件日期、任务截止日期等一些与日期和时间相关的场景，想比如输入框而言，日期时间控件能够更加直观的准确的约束用户填写的信息准确度，大体上将其分为几下几种常见的场景："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DatePicker"}),"：用于选择日期的表单控件，通过日历视图方便地选择特定的日期。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DateTimePicker"}),"：用于选择日期和时间的表单控件，结合日历视图和时间选择器，方便选择特定的日期和时间。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DateRangePicker"}),"：用于选择日期范围的表单控件，通过日历视图选择起始日期和结束日期，适用于选择预订酒店入住和离店日期等场景。"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DateTimeRangePicker"}),"：用于选择日期和时间范围的表单控件，结合日历视图和时间选择器选择起始日期和结束日期的范围。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,t.jsxs)(n.p,{children:["与上述物料的实现并没有太大的区分，都是创建",(0,t.jsx)(n.strong,{children:"View层"}),"然后在",(0,t.jsx)(n.strong,{children:"index.ts"}),"将其包装成为物料组件返回。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { ProFormDatePicker, ProFormDateTimePicker, ProFormDateRangePicker, ProFormDateTimeRangePicker } from "@ant-design/pro-components";\n\nexport const DatePickerView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormDatePicker>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormDatePicker {...props} />\n    </div>\n  );\n});\n\nexport const DateTimePickerView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormDateTimePicker>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormDateTimePicker {...props} />\n    </div>\n  );\n});\n\nexport const DateRangePickerView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormDateRangePicker>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormDateRangePicker {...props} />\n    </div>\n  );\n});\n\nexport const DateTimeRangePickerView = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ProFormDateTimeRangePicker>\n>((props, ref) => {\n  return (\n    <div ref={ref}>\n      <ProFormDateTimeRangePicker {...props} />\n    </div>\n  );\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"导出物料实现如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import type * as React from "react";\nimport { createReactMaterial, withMaterialNode } from "@lgnition-lowcode/core";\nimport TitleSettings from "./settings";\nimport {\n  DatePickerView,\n  DateTimePickerView,\n  DateRangePickerView,\n  DateTimeRangePickerView,\n} from "./view";\n\nexport const DatePicker = createReactMaterial(\n  withMaterialNode<React.ComponentProps<typeof DatePickerView>>(DatePickerView),\n  {\n    displayName: "日期",\n    related: {\n      settingRender: TitleSettings,\n    },\n  }\n);\n\nexport const DateTimePicker = createReactMaterial(\n  withMaterialNode<React.ComponentProps<typeof DateTimePickerView>>(\n    DateTimePickerView\n  ),\n  {\n    displayName: "日期时间",\n    related: {\n      settingRender: TitleSettings,\n    },\n  }\n);\n\nexport const DateRangePicker = createReactMaterial(\n  withMaterialNode<React.ComponentProps<typeof DateRangePickerView>>(\n    DateRangePickerView\n  ),\n  {\n    displayName: "日期区间",\n    related: {\n      settingRender: TitleSettings,\n    },\n  }\n);\n\nexport const DateTimeRangePicker = createReactMaterial(\n  withMaterialNode<React.ComponentProps<typeof DateTimeRangePickerView>>(\n    DateTimeRangePickerView\n  ),\n  {\n    displayName: "日期时间区间",\n    related: {\n      settingRender: TitleSettings,\n    },\n  }\n);\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["通过以上基于 ",(0,t.jsx)(n.strong,{children:"@ant-design/pro-components"})," 的",(0,t.jsx)(n.strong,{children:"Form容器"}),"和一些",(0,t.jsx)(n.strong,{children:"Form"}),"控件的实现，我相信大部分同学对于物料的开发或许应该不会太陌生了，大多数物料实现的方式都比较一致，除了一些比较复杂的区块物料会涉及到部分逻辑外，80%基于",(0,t.jsx)(n.strong,{children:"React.forwardRef"}),"的组件都可以无缝的通过",(0,t.jsx)(n.strong,{children:"createReactMaterial"}),"来 进行创建，从而避免太多开源组件二开的心智负担烦恼。"]}),"\n",(0,t.jsx)(n.p,{children:"将本节中的一些示例代码都实现后，基本上物料的开发是完全没有问题的，在后续实践中，部分高阶组件就需要在这基础之上进行一定程度的改造接入，从而完成组件的配置。"}),"\n",(0,t.jsx)(n.p,{children:"如下图所示："}),"\n",(0,t.jsx)(n.p,{children:"这就是本节实现的一些表单控件，在页面上基于自定义的属性面板可以设置对应的展示效果。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"在组件篇中，我尽可能通过常见的物料组件和较为常用且复杂的一些场景来封装物料组件，后续会进行统一的重构，并根据业务特点划为出不同范围的物料组件，用于在页面展示。"}),"\n"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}let p=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F39.%E7%BB%84%E4%BB%B6%E5%AE%9E%E6%88%98%EF%BC%9A%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91.md"]={toc:[{text:"简介",id:"简介",depth:2},{text:"Form容器",id:"form容器",depth:2},{text:"Form控件",id:"form控件",depth:2},{text:"Input组件",id:"input组件",depth:3},{text:"逻辑交互性控件",id:"逻辑交互性控件",depth:3},{text:"日期时间选择器",id:"日期时间选择器",depth:3},{text:"总结",id:"总结",depth:2}],title:"39.组件实战：表单组件开发",headingTitle:"39.组件实战：表单组件开发",frontmatter:{}}}}]);