"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["98023"],{937095:function(e,n,i){i.r(n),i.d(n,{default:()=>a});var t=i(552676),s=i(740453);let r=i.p+"static/image/7ac908c9dd0141ddd7668e029fcc355e.3874c4e9.webp",c=i.p+"static/image/3925f39cb00afb9e356a97924eb59836.869e203c.webp",d=i.p+"static/image/3b15c4e0d66bdb15015ec36b5caeca00.7b8db1d8.webp";function l(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",code:"code",img:"img",ul:"ul",pre:"pre"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"7视图转动",children:["7.视图转动",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7视图转动",children:"#"})]}),"\n",(0,t.jsxs)(n.h2,{id:"前言",children:["前言",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在这一章中你将学到以下知识点："}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"实现魔方视图转动功能；"}),"\n",(0,t.jsx)(n.li,{children:"魔方整体转动分析及实现。"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"概述",children:["概述",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#概述",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"视图转动"}),"如下图所示："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["示例代码在",(0,t.jsx)(n.a,{href:"https://github.com/newbieYoung/Threejs_rubik/tree/master/lesson/demo5",target:"_blank",rel:"noopener noreferrer",children:"Threejs_rubik"}),"项目中；"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsxs)(n.h2,{id:"实现",children:["实现",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"视图转动也就是魔方整体转动和转动魔方某一层其实只有两点区别；"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"转动魔方某一层的操作区域在魔方表面而魔方整体转动的操作区域在魔方外部；"}),"\n",(0,t.jsx)(n.li,{children:"转动魔方某一层只涉及特定一层的小方块而魔方整体转动涉及组成魔方的全部小方块。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"兼容这两个差异之后，魔方整体转动和转动魔方某一层其实是等价的，如图："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:r,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["在魔方区域外部的屏幕上操作时整个区域可以通过",(0,t.jsx)(n.code,{children:"X轴"}),"和",(0,t.jsx)(n.code,{children:"Y轴"}),"以及两条和 X 轴夹角为 30 度的",(0,t.jsx)(n.code,{children:"辅助虚线"}),"划分为",(0,t.jsx)(n.code,{children:"a"}),"、",(0,t.jsx)(n.code,{children:"b"}),"、",(0,t.jsx)(n.code,{children:"e"}),"、",(0,t.jsx)(n.code,{children:"f"}),"、",(0,t.jsx)(n.code,{children:"g"}),"、",(0,t.jsx)(n.code,{children:"d"}),"六个区域，这六个区域分别对应魔方整体转动的六种类型；"]}),"\n",(0,t.jsxs)(n.p,{children:["需要注意的是这六个区域并不是触摸点和滑动点的坐标区域而是触摸点和滑动点组成向量的区域，比如从",(0,t.jsx)(n.code,{children:"R点"}),"滑动到",(0,t.jsx)(n.code,{children:"S点"}),"，虽然两个点坐标都在",(0,t.jsx)(n.code,{children:"d"}),"区域，但是它们组成的向量的区域在",(0,t.jsx)(n.code,{children:"a"}),"区域，因此这个滑动也属于",(0,t.jsx)(n.code,{children:"a"}),"区域滑动；"]}),"\n",(0,t.jsxs)(n.p,{children:["在",(0,t.jsx)(n.code,{children:"a"}),"区域，向右滑动，比如",(0,t.jsx)(n.code,{children:"OA"}),"对应魔方的",(0,t.jsx)(n.code,{children:"HJ"}),"转动；如果在",(0,t.jsx)(n.code,{children:"a"}),"区域，向左滑动，比如",(0,t.jsx)(n.code,{children:"AO"}),"则对应魔方的",(0,t.jsx)(n.code,{children:"JH"}),"转动，屏幕滑动和魔方整体转动的对应关系如下："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"OA"}),":",(0,t.jsx)(n.code,{children:"HJ"}),"；"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"OD"}),":",(0,t.jsx)(n.code,{children:"HI"}),"；"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"OB"}),":",(0,t.jsx)(n.code,{children:"HK"}),"；"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"OF"}),":",(0,t.jsx)(n.code,{children:"LN"}),"；"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"OG"}),":",(0,t.jsx)(n.code,{children:"LM"}),"；"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"OE"}),":",(0,t.jsx)(n.code,{children:"LP"}),"；"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["对于魔方的",(0,t.jsx)(n.code,{children:"HJ"}),"、",(0,t.jsx)(n.code,{children:"HI"}),"、",(0,t.jsx)(n.code,{children:"HK"}),"、",(0,t.jsx)(n.code,{children:"LN"}),"、",(0,t.jsx)(n.code,{children:"LM"}),"、",(0,t.jsx)(n.code,{children:"LP"}),"的转动在上一章已经处理过了，接下来需要处理的是判断魔方区域外部屏幕上的滑动属于哪种情况，以",(0,t.jsx)(n.code,{children:"d"}),"区域的",(0,t.jsx)(n.code,{children:"OD"}),"滑动来说："]}),"\n",(0,t.jsx)(n.p,{children:"当触摸点处于右半边屏幕且向斜上方滑动，对应代码："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/* main.js 第251行至第254行 */\nvar direction;\nvar rad = 30 * Math.PI / 180;\nvar lenX = movePoint.x - startPoint.x;\nvar lenY = movePoint.y - startPoint.y;\n\n/* main.js 第256行至第270行 */\nif(startPoint.x>window.innerWidth/2){\n    if (Math.abs(lenY) > Math.abs(lenX) * Math.tan(rad)){\n        if(lenY<0){\n            direction = 2.1;\n        }else{\n            direction = 3.1;\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"movePoint"}),"和",(0,t.jsx)(n.code,{children:"startPoint"}),"表示滑动点和触摸点，",(0,t.jsx)(n.code,{children:"startPoint.x>window.innerWidth/2"}),"则表示触摸点处于右半边屏幕，",(0,t.jsx)(n.code,{children:"Math.abs(lenY) > Math.abs(lenX) * Math.tan(30/180*Math.PI)"}),"意味着滑动点和触摸点组成的向量和 X 轴的夹角大于 30 度，也就是此次滑动要么属于",(0,t.jsx)(n.code,{children:"d"}),"区域，要么属于",(0,t.jsx)(n.code,{children:"b"}),"区域；"]}),"\n",(0,t.jsxs)(n.p,{children:["最后通过",(0,t.jsx)(n.code,{children:"lenY"}),"也就是滑动点和触摸点 y 值的差的正负判断是向上还是向下，如果是向下则此次滑动属于",(0,t.jsx)(n.code,{children:"b"}),"区域对应魔方的",(0,t.jsx)(n.code,{children:"HK"}),"转动也就是",(0,t.jsx)(n.code,{children:"direction=2.1"}),"，表示向 Y 轴正方向旋转 90 度，且触摸平面是 Z 轴正平面。"]}),"\n",(0,t.jsx)(n.p,{children:"获得视图转动方向函数完整代码如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/* main.js 第250行至第317行 */\ngetViewDirection(type,startPoint,movePoint){\n    var direction;\n    var rad = 30*Math.PI/180;\n    var lenX = movePoint.x - startPoint.x;\n    var lenY = movePoint.y - startPoint.y;\n    if(type==this.frontViewName){\n        if(startPoint.x>window.innerWidth/2){\n            if (Math.abs(lenY) > Math.abs(lenX) * Math.tan(rad)){\n                if(lenY<0){\n                    direction = 2.1;\n                }else{\n                    direction = 3.1;\n                }\n            }else{\n                if(lenX>0){\n                    direction = 0.3;\n                }else{\n                    direction = 1.3;\n                }\n            }\n        }else{\n            if (Math.abs(lenY) > Math.abs(lenX) * Math.tan(rad)) {\n                if (lenY < 0) {\n                    direction = 2.4;\n                } else {\n                    direction = 3.4;\n                }\n            } else {\n                if (lenX > 0) {\n                    direction = 4.4;\n                } else {\n                    direction = 5.4;\n                }\n            }\n        }\n    }else{\n        if (startPoint.x > window.innerWidth / 2) {\n            if (Math.abs(lenY) > Math.abs(lenX) * Math.tan(rad)) {\n                if (lenY < 0) {\n                    direction = 2.2;\n                } else {\n                    direction = 3.2;\n                }\n            } else {\n                if (lenX > 0) {\n                    direction = 1.4;\n                } else {\n                    direction = 0.4;\n                }\n            }\n        } else {\n            if (Math.abs(lenY) > Math.abs(lenX) * Math.tan(rad)) {\n                if (lenY < 0) {\n                    direction = 2.3;\n                } else {\n                    direction = 3.3;\n                }\n            } else {\n                if (lenX > 0) {\n                    direction = 5.3;\n                } else {\n                    direction = 4.3;\n                }\n            }\n        }\n    }\n    return direction;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"处理完滑动方向的映射关系之后，还需要确定小方块序号，选取正视角魔方或者反视角魔方中水平方向的两个面相交处任意小方块均可；"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/* main.js 第239行至第245行 */\ngetViewRotateCubeIndex(type){\n    if (type == this.frontViewName){\n        return 10;\n    }else{\n        return 65;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"当我们把魔方区域外的滑动映射为魔方区域上的滑动，且明确了转动方向和小方块序号，就可以编写魔方整体转动函数了；"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/* Rubik.js 第459行至第473行 */\nrotateMoveWhole(cubeIndex, direction, callback, totalTime){\n    if(cubeIndex!=null&&direction!=null){\n        var self = this;\n        totalTime = totalTime ? totalTime : this.defaultTotalTime;\n        var elements = this.cubes;\n        requestAnimationFrame(function (timestamp) {\n            self.rotateAnimation(elements, direction, timestamp, 0, 0, function () {\n                self.updateCubeIndex(elements);\n                if (callback) {\n                    callback();\n                }\n            }, totalTime);\n        });\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["和转动魔方某一层函数唯一的区别就是转动元素为全部小方块",(0,t.jsx)(n.code,{children:"var elements = this.cubes"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["魔方整体转动触摸点和滑动点坐标直接使用屏幕坐标就好了，因此需要在触摸开始事件回调函数",(0,t.jsx)(n.code,{children:"touchStart"}),"以及触摸移动事件回调函数",(0,t.jsx)(n.code,{children:"touchMove"}),"中和转动魔方某一层的触摸点以及滑动点坐标区分开："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/* main.js 第125行至第127行 */\nif (!this.isRotating && !this.intersect){//触摸点没在魔方上\n    this.startPoint = new THREE.Vector2(touch.clientX, touch.clientY);\n}\n\n/* main.js 第149行至第154行 */\nif (!this.isRotating && this.startPoint && !this.intersect){//触摸点没在魔方上\n    this.movePoint = new THREE.Vector2(touch.clientX, touch.clientY);\n    if (!this.movePoint.equals(this.startPoint)) {\n        this.rotateView();\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["当触摸点没在魔方上且魔方没有转动时，执行",(0,t.jsx)(n.code,{children:"rotateView"}),"函数转动魔方整体，调整视图。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/* main.js 第193行至第213行 */\nrotateView(){\n    var self = this;\n    if (this.startPoint.y < this.touchLine.screenRect.top){\n        this.targetRubik = this.frontRubik;\n        this.anotherRubik = this.endRubik;\n    } else if (this.startPoint.y > this.touchLine.screenRect.top + this.touchLine.screenRect.height){\n        this.targetRubik = this.endRubik;\n        this.anotherRubik = this.frontRubik;\n    }\n    if (this.targetRubik && this.anotherRubik){\n        this.isRotating = true;//转动标识置为true\n        //计算整体转动方向\n        var targetType = this.targetRubik.group.childType;\n        var cubeIndex = this.getViewRotateCubeIndex(targetType);\n        var direction = this.getViewDirection(targetType, this.startPoint, this.movePoint);\n        this.targetRubik.rotateMoveWhole(cubeIndex, direction);\n        this.anotherRubik.rotateMoveWhole(cubeIndex, direction, function () {\n            self.resetRotateParams();\n        });\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"整个流程为先判断目标魔方，然后把屏幕上魔方区域外的滑动映射为魔方上的滑动，兼容处理转动元素为全部小方块，然后执行转动动画即可。"}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在不支持视图转动之前，虽说也能看到魔方全部六个面，但是对于我这种空间想象能力不够的人来说，查看两种视图然后相互映射比转一下直接查看要慢很多，因此这里加上了视图转动；实现这个功能只需要想",(0,t.jsx)(n.code,{children:"清楚操作类型划分"}),"以及",(0,t.jsx)(n.code,{children:"合理利用已有功能"}),"就可以了。"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}let a=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20ThreeJS%20%E6%A1%86%E6%9E%B6%E7%9A%84%E9%AD%94%E6%96%B9%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%AE%9E%E8%B7%B5%2F7.%E8%A7%86%E5%9B%BE%E8%BD%AC%E5%8A%A8.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"概述",id:"概述",depth:2},{text:"实现",id:"实现",depth:2},{text:"总结",id:"总结",depth:2}],title:"7.视图转动",headingTitle:"7.视图转动",frontmatter:{}}}}]);