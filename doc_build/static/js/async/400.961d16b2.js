"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["400"],{564511:function(e,n,c){c.r(n),c.d(n,{default:()=>W});var i=c(552676),a=c(740453);let s=c.p+"static/image/e450bda807583f0c54e149b032769371.246ed807.webp",d=c.p+"static/image/509dd49166d1325b9d01b72816bc22f8.6a33c5b6.webp",l=c.p+"static/image/fa8cf86ff7d594b850c6ae7ccdf9d9ef.f7d3b542.webp",r=c.p+"static/image/8db19e648bd739c0d20b17f23105ca96.046aec4e.webp",p=c.p+"static/image/8f433c5e2ea2da759d32ef403c0bdb56.f84c82d9.webp",t=c.p+"static/image/646995492c5cfc7392820e01347d2329.8af8da1a.webp",j=c.p+"static/image/27c4e9f793a5b83d19a584a9b39db99c.cbe1b0ea.webp",x=c.p+"static/image/f439330f65cec61cff19987b1e3a5ee8.e23995dc.webp",h=c.p+"static/image/248cf5b085117f67bfbf997d4a4e2c7e.6fc2af34.webp",m=c.p+"static/image/a1dc70356774fe6b3165d5ceda09e81c.4560b3c4.webp",b=c.p+"static/image/89372a0d7cc288a4f4b32b76f000845e.17234643.webp",f=c.p+"static/image/f11df2e1e928197e916d7fc2986e31f6.109912bc.webp",g=c.p+"static/image/f52091c30160d7b2540a4a222441f5d3.00253d92.webp",E=c.p+"static/image/a9bc3a3d5be63ce26293fa7697af003b.9b4fbeb7.webp",N=c.p+"static/image/479e5a87f28bac8143bce0432f296099.ff5d3c1e.webp",o=c.p+"static/image/ae65851d85c37d9c193f10b4bee5ef3c.8fea93d6.webp",A=c.p+"static/image/c8002891c54483e6f19dc1fc76032f25.bd9cd9a1.webp",w=c.p+"static/image/24676f19ffbfa433811ed9a4043a89d6.a5a59638.webp",T=c.p+"static/image/efd807349b0efb67c366f751f32977cf.cb40a1b9.webp",_=c.p+"static/image/3b63d76f9f0e6bcf342a26715bee00da.3d604b92.webp",u=c.p+"static/image/4590e4f6f06514b2509833f9ff9cfe55.7519d75c.webp",O=c.p+"static/image/686128193e79195adde40eb2b26819ce.9695a90a.webp",I=c.p+"static/image/ec54845a083b4c2efc465e9a9e93a2cd.eb709aa2.webp",R=c.p+"static/image/eff41c04aa8a07ae8762eccdb3d3b75e.4db96c4e.webp",L=c.p+"static/image/8085635c2321f206fb1abf6487579494.4fa025f6.webp",S=c.p+"static/image/f68d03e20455f712756caaafeba77229.d0c77a8a.webp",q=c.p+"static/image/1bbf89df70c1585b31a02081dff765c4.7c959b9b.webp",C=c.p+"static/image/203ef5d5b03c02911215a78dfcf39f77.78261e66.webp",y=c.p+"static/image/ab64d9ca03e8ef48077734e996471775.e774f70c.webp",U=c.p+"static/image/85702350b767b63f074ee21f6d9fd94a.e0fb656f.webp",B=c.p+"static/image/8c80a21a6c84d094710906a0f0bc8ab9.c18d9ef5.webp",J=c.p+"static/image/8b615b06b26e13b6dba35ab6ff6d48ec.2c62fffe.webp",k=c.p+"static/image/28565c7ff75c80f08c80603ec8d73c82.e82c9a0b.webp",H=c.p+"static/image/22dc22e9f0297ad3cf113cda1b89c8ac.a3c97c01.webp",M=c.p+"static/image/a1fa447d51758c9cddf671ee85fa7540.763ee21d.webp",V=c.p+"static/image/d8bd338b3bab2a4dd2575077e89c02ad.89626d79.webp",F=c.p+"static/image/19819071a034726d069acc8f074e86f4.58a57ad1.webp",P=c.p+"static/image/60445eeb9ab432354d006aaf1b1d89bb.013cf080.webp",D=c.p+"static/image/c8133dd222aec39363e4fee88400a8dd.7f4f15ae.webp",G=c.p+"static/image/0bd29b03ecf5002faa43d4dc20a7d21f.21bac75c.webp",Y=c.p+"static/image/c05fcff5739cc419355c02956618011a.87ab41d8.webp";function v(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",strong:"strong",h2:"h2"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"48-一对多多对多关系的表设计",children:["48. 一对多、多对多关系的表设计",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#48-一对多多对多关系的表设计",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"上节我们学了一对一，这节继续来学习一对多和多对多。"}),"\n",(0,i.jsx)(n.p,{children:"一对多关系在生活中随处可见："}),"\n",(0,i.jsx)(n.p,{children:"一个作者可以写多篇文章，而每篇文章只属于一个作者。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:Y,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"一个订单有多个商品，而商品只属于一个订单。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:G,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"一个部门有多个员工，员工只属于一个部门。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:D,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"多对多的关系也是随处可见："}),"\n",(0,i.jsx)(n.p,{children:"一篇文章可以有多个标签，一个标签可以多篇文章都有。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"一个学生可以选修多门课程，一门课程可以被多个学生选修。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:P,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"一个用户可以有多个角色，一个角色可能多个用户都有。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:F,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"那在数据库里如何建模这种关系呢？"}),"\n",(0,i.jsx)(n.p,{children:"我们分别来看一下："}),"\n",(0,i.jsx)(n.p,{children:"一对多的关系，比如一个部门有多个员工。"}),"\n",(0,i.jsx)(n.p,{children:"我们会有一个部门表和一个员工表："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:V,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"在员工表添加外键 department_id 来表明这种多对一关系："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"其实和一对一关系的数据表设计是一样的。"}),"\n",(0,i.jsx)(n.p,{children:"我们添加这两个表。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:M,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"分别指定 id 是 INT，约束为 primary key、not null、 auto increment 。"}),"\n",(0,i.jsx)(n.p,{children:"name 是 VARCHAR(45)，约束为 not null。"}),"\n",(0,i.jsx)(n.p,{children:"点击 apply。"}),"\n",(0,i.jsx)(n.p,{children:"建表 sql 如下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:H,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"同样的方式创建 employee 表："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"添加 id、name、department_id 这 3 列。"}),"\n",(0,i.jsx)(n.p,{children:"然后添加一个外键约束，department_id 列引用 department 的 id 列。"}),"\n",(0,i.jsx)(n.p,{children:"设置级联删除和更新为 SET NULL。"}),"\n",(0,i.jsx)(n.p,{children:"因为部门没了员工不一定也没了，可能还会分配到别的部门。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:J,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"点击 apply 就创建成功了。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"sql 的最后这段，就是创建了一个外键约束，department_id 引用了 department 表的 id，设置级联删除和更新方式为 SET NULL。"}),"\n",(0,i.jsx)(n.p,{children:"我们往部门表插入几条数据："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INSERT INTO `department` (`id`, `name`) \n    VALUES \n        (1, '人事部'),\n        (2, '财务部'),\n        (3, '市场部'),\n        (4, '技术部'),\n        (5, '销售部'),\n        (6, '客服部'),\n        (7, '采购部'),\n        (8, '行政部'),\n        (9, '品控部'),\n        (10, '研发部');\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:U,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"查询下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"插入成功了。"}),"\n",(0,i.jsx)(n.p,{children:"再往员工表里插入几条数据："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INSERT INTO `employee` (`id`, `name`, `department_id`)\n    VALUES \n        (1, '张三', 1),\n        (2, '李四', 2), \n        (3, '王五', 3),\n        (4, '赵六', 4),\n        (5, '钱七', 5),\n        (6, '孙八', 5),\n        (7, '周九', 5),\n        (8, '吴十', 8),\n        (9, '郑十一', 9),\n        (10, '王十二', 10);\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"查询下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:q,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"同样插入成功了。"}),"\n",(0,i.jsx)(n.p,{children:"我们通过 JOIN ON 关联查询下 id 为 5 的部门的所有员工："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select * from department\n    join employee on department.id = employee.department_id\n    where department.id = 5\n"})}),"\n",(0,i.jsx)(n.p,{children:"可以看到，正确查找出了销售部的 3 个员工："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"JOIN ON 默认是 INNER JOIN。"}),"\n",(0,i.jsx)(n.p,{children:"我们再来试试 LEFT JOIN 和 RIGHT JOIN："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select * from department\n    left join employee on department.id = employee.department_id\n"})}),"\n",(0,i.jsx)(n.p,{children:"from 后的是左表，可以看到两个还没有员工的部门也显示在了结果里："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:L,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后是 RIGHT JOIN："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select * from department\n    right join employee on department.id = employee.department_id\n"})}),"\n",(0,i.jsx)(n.p,{children:"因为所有的员工都是有部门的，所以和 inner join 结果一样："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后把 id 为 5 的部门删掉："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:I,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"点击 apply。"}),"\n",(0,i.jsx)(n.p,{children:"再查看下员工表，可以看到销售部下的 3 个员工的部门被设置为 null 了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:O,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这就是 set null 的级联删除处理。"}),"\n",(0,i.jsx)(n.p,{children:"一对多是不是还挺简单的？"}),"\n",(0,i.jsx)(n.p,{children:"确实，它和一对一没啥本质的区别。"}),"\n",(0,i.jsx)(n.p,{children:"接下来我们来看多对多。"}),"\n",(0,i.jsx)(n.p,{children:"比如文章和标签："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"之前一对多关系是通过在多的一方添加外键来引用一的一方的 id。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"但是现在是多对多了，每一方都是多的一方。这时候是不是双方都要添加外键呢？"}),"\n",(0,i.jsx)(n.p,{children:"一般我们是这样设计："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"文章一个表、标签一个表，这两个表都不保存外键，然后添加一个中间表来保存双方的外键。"}),"\n",(0,i.jsx)(n.p,{children:"这样文章和标签的关联关系就都被保存到了这个中间表里。"}),"\n",(0,i.jsx)(n.p,{children:"我们试一下："}),"\n",(0,i.jsx)(n.p,{children:"这次我们就直接通过 sql 建表了："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE `article` (\n `id` INT NOT NULL AUTO_INCREMENT,\n `title` VARCHAR(50) NOT NULL,\n `content` TEXT NOT NULL,\n PRIMARY KEY (`id`)\n) CHARSET=utf8mb4;\n"})}),"\n",(0,i.jsx)(n.p,{children:"这里的 TEXT 是长文本类型，可以存储 65535 长度的字符串。"}),"\n",(0,i.jsx)(n.p,{children:"执行这个建表 sql："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"查询下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"插入几条数据："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INSERT INTO `article` (`title`, `content`)\n    VALUES\n            ('文章1', '这是文章1的内容。'),\n            ('文章2', '这是文章2的内容。'),\n            ('文章3', '这是文章3的内容。'),\n            ('文章4', '这是文章4的内容。'),\n            ('文章5', '这是文章5的内容。');\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"再查询下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:N,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后创建标签表："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE `tag` (\n `id` INT NOT NULL AUTO_INCREMENT,\n `name` VARCHAR(50) NOT NULL,\n PRIMARY KEY (`id`)\n);\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"插入几条数据："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INSERT INTO `tag` (`name`)\n    VALUES\n            ('标签1'),\n            ('标签2'),\n            ('标签3'),\n            ('标签4'),\n            ('标签5');\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后查询下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"可以看到，建表和插入数据都成功了。"}),"\n",(0,i.jsx)(n.p,{children:"然后创建中间表："}),"\n",(0,i.jsx)(n.p,{children:"中间表还是通过可视化的方式创建吧："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"点击创建表，添加 article_id、tag_id 这俩列，设置为 NOT NULL。"}),"\n",(0,i.jsx)(n.p,{children:"注意，这里同时指定这两列为 primary key，也就是复合主键。"}),"\n",(0,i.jsx)(n.p,{children:"添加 article_id 和 tag_id 的外键引用："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"中间表的级联方式要设置为 CASCADE，这个是固定的。"})}),"\n",(0,i.jsx)(n.p,{children:"因为它就是用来保存关系的，如果关联的记录都没了，这个关系也就没存在的意义了。"}),"\n",(0,i.jsx)(n.p,{children:"点击 apply，可以看到生成的 sql："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"primary key (article_id, tag_id) 是指定复合主键。"}),"\n",(0,i.jsx)(n.p,{children:"后面分别是添加两个外键约束。"}),"\n",(0,i.jsx)(n.p,{children:"建表 sql 能看懂即可，不需要手写。"}),"\n",(0,i.jsx)(n.p,{children:"然后插入几条数据："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INSERT INTO `article_tag` (`article_id`, `tag_id`)\n    VALUES\n    (1,1), (1,2), (1,3),\n    (2,2), (2,3), (2,4),\n    (3,3), (3,4), (3,5),\n    (4,4), (4,5), (4,1),\n    (5,5), (5,1), (5,2);\n"})}),"\n",(0,i.jsx)(n.p,{children:"点击左上角按钮，新建一条 sql："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"输入 sql 后点击执行。"}),"\n",(0,i.jsx)(n.p,{children:"然后就可以看到插入的数据了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"那现在有了 article、tag、article_tag 3 个表了，怎么关联查询呢？"}),"\n",(0,i.jsx)(n.p,{children:"JOIN 3 个表呀！"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM article a \n    JOIN article_tag at ON a.id = at.article_id\n    JOIN tag t ON t.id = at.tag_id\n    WHERE a.id = 1\n"})}),"\n",(0,i.jsx)(n.p,{children:"这样查询出的就是 id 为 1 的 article 的所有标签："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"当然，一般我们会指定返回的列："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT t.name AS 标签名, a.title AS 文章标题\n    FROM article a \n    JOIN article_tag at ON a.id = at.article_id\n    JOIN tag t ON t.id = at.tag_id\n    WHERE a.id = 1\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"此外，我们把文章1 删除试试："}),"\n",(0,i.jsx)(n.p,{children:"选中这条 sql 执行："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"delete from article where id = 1;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后再执行下面的查询："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"可以看到关系也被级联删除了，这就是 CASCADE 的作用。"}),"\n",(0,i.jsx)(n.p,{children:"当然，删除的只是关系，并不影响 id=1 的标签："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:s,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这就是多对多数据的表设计、关联查询和级联方式。"}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"现实生活中有很多的一对多、多对多关系。"}),"\n",(0,i.jsx)(n.p,{children:"我们创建了部门、员工表，并在员工表添加了引用部门 id 的外键 department_id 来保存这种一堆多关系。"}),"\n",(0,i.jsx)(n.p,{children:"并且设置了级联方式为 set null。"}),"\n",(0,i.jsx)(n.p,{children:"创建了文章表、标签表、文章标签表来保存多堆多关系，多对多不需要在双方保存彼此的外键，只要在中间表里维护这种关系即可。"}),"\n",(0,i.jsx)(n.p,{children:"中间表的外键级联方式一定为 CASCADE，因为数据没了关系就没必要还留着了。"}),"\n",(0,i.jsx)(n.p,{children:"此外，多对多的 join 需要连接 3 个表来查询。"}),"\n",(0,i.jsx)(n.p,{children:"一对多、多对多是非常常见的表之间的关系，要好好掌握它们的外键设置、关联查询、级联方式。"})]})}function K(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(v,{...e})}):v(e)}let W=K;K.__RSPRESS_PAGE_META={},K.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F48.%20%E4%B8%80%E5%AF%B9%E5%A4%9A%E3%80%81%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E7%9A%84%E8%A1%A8%E8%AE%BE%E8%AE%A1.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"48. 一对多、多对多关系的表设计",headingTitle:"48. 一对多、多对多关系的表设计",frontmatter:{}}}}]);