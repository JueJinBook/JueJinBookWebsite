"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["86286"],{664448:function(e,n,d){e.exports=d.p+"static/image/4101095859f9692c2064f220c9f49a49.740b6f55.webp"},828563:function(e,n,d){d.r(n),d.d(n,{default:()=>c});var s=d(552676),r=d(740453);let t=d.p+"static/image/78f17867c6fe10ceecf951c64c24531d.9ff72c0c.webp",l=d.p+"static/image/f20f7718a6ed6c74d97ebd1b4b8873dc.63ab6d36.webp";var o=d(664448);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",h3:"h3",code:"code",strong:"strong",ul:"ul",li:"li",pre:"pre",h4:"h4",h2:"h2"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"23-热更新基于-esm-的毫秒级-hmr-的实现揭秘",children:["23. 热更新：基于 ESM 的毫秒级 HMR 的实现揭秘",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-热更新基于-esm-的毫秒级-hmr-的实现揭秘",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7050063811973218341/section/7065976180020609032",target:"_blank",rel:"noopener noreferrer",children:"第 13 小节"})," 中，我们学习过 Vite 中 HMR 的 API 使用，同时也介绍了基于 HMR Boundary (HMR 边界)的更新模式，即当一个模块发生变动时，Vite 会自动寻找更新边界，然后更新边界模块，如下图所示:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"那么，在 Vite 内部，服务端究竟是如何定位到 HMR 边界模块，以及客户端是如何接受更新并加载最新模块内容的呢？"}),"\n",(0,s.jsx)(n.p,{children:"接下来的内容中，我就来和你一起深入 Vite 的底层实现，梳理 HMR 的各个实现要点，让你对 Vite 的 HMR 实现原理有比较深入的认识。"}),"\n",(0,s.jsxs)(n.h3,{id:"创建模块依赖图",children:["创建模块依赖图",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建模块依赖图",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["为了方便管理各个模块之间的依赖关系，Vite 在 Dev Server 中创建了模块依赖图的数据结构，即",(0,s.jsx)(n.code,{children:"ModuleGraph"}),"类，",(0,s.jsx)(n.a,{href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/server/moduleGraph.ts",target:"_blank",rel:"noopener noreferrer",children:"点击查看实现源码"}),"，Vite 中 HMR 边界模块的判定会依靠这个类来实现。"]}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们从以下几个维度看看这个图结构的创建过程。",(0,s.jsx)(n.strong,{children:"创建依赖图"}),"主要分为三个步骤:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"初始化依赖图实例"}),"\n",(0,s.jsx)(n.li,{children:"创建依赖图节点"}),"\n",(0,s.jsx)(n.li,{children:"绑定各个模块节点的依赖关系"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"首先，Vite 在 Dev Server 启动时会初始化 ModuleGraph 的实例:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// pacakges/vite/src/node/server/index.ts\nconst moduleGraph: ModuleGraph = new ModuleGraph((url) =>\n  container.resolveId(url)\n);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接下来我们具体查看",(0,s.jsx)(n.code,{children:"ModuleGraph"}),"这个类的实现。其中定义了若干个 Map，用来记录模块信息:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 由原始请求 url 到模块节点的映射，如 /src/index.tsx\nurlToModuleMap = new Map<string, ModuleNode>()\n// 由模块 id 到模块节点的映射，其中 id 与原始请求 url，为经过 resolveId 钩子解析后的结果\nidToModuleMap = new Map<string, ModuleNode>()\n// 由文件到模块节点的映射，由于单文件可能包含多个模块，如 .vue 文件，因此 Map 的 value 值为一个集合\nfileToModulesMap = new Map<string, Set<ModuleNode>>()\n"})}),"\n",(0,s.jsx)(n.p,{children:"ModuleNode 对象即代表模块节点的具体信息，我们可以来看看它的数据结构:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"class ModuleNode {\n  // 原始请求 url\n  url: string\n  // 文件绝对路径 + query\n  id: string | null = null\n  // 文件绝对路径\n  file: string | null = null\n  type: 'js' | 'css'\n  info?: ModuleInfo\n  // resolveId 钩子返回结果中的元数据\n  meta?: Record<string, any>\n  // 该模块的引用方\n  importers = new Set<ModuleNode>()\n  // 该模块所依赖的模块\n  importedModules = new Set<ModuleNode>()\n  // 接受更新的模块\n  acceptedHmrDeps = new Set<ModuleNode>()\n  // 是否为`接受自身模块`的更新\n  isSelfAccepting = false\n  // 经过 transform 钩子后的编译结果\n  transformResult: TransformResult | null = null\n  // SSR 过程中经过 transform 钩子后的编译结果\n  ssrTransformResult: TransformResult | null = null\n  // SSR 过程中的模块信息\n  ssrModule: Record<string, any> | null = null\n  // 上一次热更新的时间戳\n  lastHMRTimestamp = 0\n\n  constructor(url: string) {\n    this.url = url\n    this.type = isDirectCSSRequest(url) ? 'css' : 'js'\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["ModuleNode 中包含的信息比较多，你需要重点关注的是 ",(0,s.jsx)(n.code,{children:"importers"})," 和",(0,s.jsx)(n.code,{children:"importedModules"}),"，这两条信息分别代表了当前模块被哪些模块引用以及它依赖了哪些模块，是构建整个模块依赖图的根基所在。"]}),"\n",(0,s.jsxs)(n.p,{children:["那么，Vite 是在什么时候创建 ModuleNode 节点的呢？我们可以到 Vite Dev Server 中的",(0,s.jsx)(n.code,{children:"transform"}),"中间件一探究竟:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// packages/vite/src/node/server/middlewares/transform.ts\n// 核心转换逻辑\nconst result = await transformRequest(url, server, {\n  html: req.headers.accept?.includes('text/html')\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["可以看到，",(0,s.jsx)(n.code,{children:"transform"}),"中间件的主要逻辑是调用 ",(0,s.jsx)(n.code,{children:"transformRequest"}),"方法，我们来进一步查看这个方法的核心代码实现:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// packages/vite/src/node/server/transformRequest.ts\n// 从 ModuleGraph 查找模块节点信息\nconst module = await server.moduleGraph.getModuleByUrl(url)\n// 如果有则命中缓存\nconst cached =\n  module && (ssr ? module.ssrTransformResult : module.transformResult)\nif (cached) {\n  return cached\n}\n// 否则调用 PluginContainer 的 resolveId 和 load 方法对进行模块加载\nconst id = (await pluginContainer.resolveId(url))?.id || url\nconst loadResult = await pluginContainer.load(id, { ssr })\n// 然后通过调用 ensureEntryFromUrl 方法创建 ModuleNode\nconst mod = await moduleGraph.ensureEntryFromUrl(url)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接着我们看看 ",(0,s.jsx)(n.code,{children:"ensureEntryFromUrl"})," 方法如何",(0,s.jsx)(n.strong,{children:"创建新的 ModuleNode 节点"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"async ensureEntryFromUrl(rawUrl: string): Promise<ModuleNode> {\n  // 实质是调用各个插件的 resolveId 钩子得到路径信息\n  const [url, resolvedId, meta] = await this.resolveUrl(rawUrl)\n  let mod = this.urlToModuleMap.get(url)\n  if (!mod) {\n    // 如果没有缓存，就创建新的 ModuleNode 对象\n    // 并记录到 urlToModuleMap、idToModuleMap、fileToModulesMap 这三张表中\n    mod = new ModuleNode(url)\n    if (meta) mod.meta = meta\n    this.urlToModuleMap.set(url, mod)\n    mod.id = resolvedId\n    this.idToModuleMap.set(resolvedId, mod)\n    const file = (mod.file = cleanUrl(resolvedId))\n    let fileMappedModules = this.fileToModulesMap.get(file)\n    if (!fileMappedModules) {\n      fileMappedModules = new Set()\n      this.fileToModulesMap.set(file, fileMappedModules)\n    }\n    fileMappedModules.add(mod)\n  }\n  return mod\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"现在你应该明白了模块依赖图中各个 ModuleNode 节点是如何创建出来的，那么，各个节点的依赖关系是在什么时候绑定的呢？"}),"\n",(0,s.jsxs)(n.p,{children:["我们不妨把目光集中到",(0,s.jsx)(n.code,{children:"vite:import-analysis"}),"插件当中，在这个插件的 transform 钩子中，会对模块代码中的 import 语句进行分析，得到如下的一些信息:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"importedUrls"}),": 当前模块的依赖模块 url 集合。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"acceptedUrls"}),": 当前模块中通过 import.meta.hot.accept 声明的依赖模块 url 集合。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isSelfAccepting"}),": 分析 import.meta.hot.accept 的用法，标记是否为",(0,s.jsx)(n.code,{children:"接受自身更新"}),"的类型。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["接下来会进入核心的",(0,s.jsx)(n.code,{children:"模块依赖关系绑定"}),"的环节，核心代码如下:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 引用方模块\nconst importerModule = moduleGraph.getModuleById(importer)\nawait moduleGraph.updateModuleInfo(\n  importerModule,\n  importedUrls,\n  normalizedAcceptedUrls,\n  isSelfAccepting\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["可以看到，绑定依赖关系的逻辑主要由",(0,s.jsx)(n.code,{children:"ModuleGraph"}),"对象的",(0,s.jsx)(n.code,{children:"updateModuleInfo"}),"方法实现，核心代码如下:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"async updateModuleInfo(\n  mod: ModuleNode,\n  importedModules: Set<string | ModuleNode>,\n  acceptedModules: Set<string | ModuleNode>,\n  isSelfAccepting: boolean\n) {\n  mod.isSelfAccepting = isSelfAccepting\n  mod.importedModules = new Set()\n  // 绑定节点依赖关系\n  for (const imported of importedModules) {\n    const dep =\n      typeof imported === 'string'\n        ? await this.ensureEntryFromUrl(imported)\n        : imported\n    dep.importers.add(mod)\n    mod.importedModules.add(dep)\n  }\n\n  // 更新 acceptHmrDeps 信息\n  const deps = (mod.acceptedHmrDeps = new Set())\n  for (const accepted of acceptedModules) {\n    const dep =\n      typeof accepted === 'string'\n        ? await this.ensureEntryFromUrl(accepted)\n        : accepted\n    deps.add(dep)\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["至此，模块间的依赖关系就成功进行绑定了。随着越来越多的模块经过 ",(0,s.jsx)(n.code,{children:"vite:import-analysis"}),"的 transform 钩子处理，所有模块之间的依赖关系会被记录下来，整个依赖图的信息也就被补充完整了。"]}),"\n",(0,s.jsxs)(n.h3,{id:"服务端收集更新模块",children:["服务端收集更新模块",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#服务端收集更新模块",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"刚才我们分析了模块依赖图的实现，接下来再看看 Vite 服务端如何根据这个图结构收集更新模块。"}),"\n",(0,s.jsxs)(n.p,{children:["首先， Vite 在服务启动时会通过 ",(0,s.jsx)(n.code,{children:"chokidar"})," 新建文件监听器:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// packages/vite/src/node/server/index.ts\nimport chokidar from 'chokidar'\n\n// 监听根目录下的文件\nconst watcher = chokidar.watch(path.resolve(root));\n// 修改文件\nwatcher.on('change', async (file) => {\n  file = normalizePath(file)\n  moduleGraph.onFileChange(file)\n  await handleHMRUpdate(file, server)\n})\n// 新增文件\nwatcher.on('add', (file) => {\n  handleFileAddUnlink(normalizePath(file), server)\n})\n// 删除文件\nwatcher.on('unlink', (file) => {\n  handleFileAddUnlink(normalizePath(file), server, true)\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后，我们分别以修改文件、新增文件和删除文件这几个方面来介绍 HMR 在服务端的逻辑。"}),"\n",(0,s.jsxs)(n.h4,{id:"1-修改文件",children:["1. 修改文件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-修改文件",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当业务代码中某个文件被修改时，Vite 首先会调用",(0,s.jsx)(n.code,{children:"moduleGraph"}),"的",(0,s.jsx)(n.code,{children:"onFileChange"}),"对模块图中的对应节点进行",(0,s.jsx)(n.code,{children:"清除缓存"}),"的操作:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"class ModuleGraph {\n  onFileChange(file: string): void {\n    const mods = this.getModulesByFile(file)\n    if (mods) {\n      const seen = new Set<ModuleNode>()\n      // 将模块的缓存信息去除\n      mods.forEach((mod) => {\n        this.invalidateModule(mod, seen)\n      })\n    }\n  }\n\n  invalidateModule(mod: ModuleNode, seen: Set<ModuleNode> = new Set()): void {\n    mod.info = undefined\n    mod.transformResult = null\n    mod.ssrTransformResult = null\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后正式进入 HMR 收集更新的阶段，主要逻辑在",(0,s.jsx)(n.code,{children:"handleHMRUpdate"}),"函数中，代码简化后如下:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// packages/vite/src/node/server/hmr.ts\nexport async function handleHMRUpdate(\n  file: string,\n  server: ViteDevServer\n): Promise<any> {\n  const { ws, config, moduleGraph } = server\n  const shortFile = getShortName(file, config.root)\n\n  // 1. 配置文件/环境变量声明文件变化，直接重启服务\n  // 代码省略\n\n  // 2. 客户端注入的文件(vite/dist/client/client.mjs)更改\n  // 给客户端发送 full-reload 信号，使之刷新页面\n  if (file.startsWith(normalizedClientDir)) {\n    ws.send({\n      type: 'full-reload',\n      path: '*'\n    })\n    return\n  }\n  // 3. 普通文件变动\n  // 获取需要更新的模块\n  const mods = moduleGraph.getModulesByFile(file)\n  const timestamp = Date.now()\n  // 初始化 HMR 上下文对象\n  const hmrContext: HmrContext = {\n    file,\n    timestamp,\n    modules: mods ? [...mods] : [],\n    read: () => readModifiedFile(file),\n    server\n  }\n  // 依次执行插件的 handleHotUpdate 钩子，拿到插件处理后的 HMR 模块\n  for (const plugin of config.plugins) {\n    if (plugin.handleHotUpdate) {\n      const filteredModules = await plugin.handleHotUpdate(hmrContext)\n      if (filteredModules) {\n        hmrContext.modules = filteredModules\n      }\n    }\n  }\n  // updateModules——核心处理逻辑\n  updateModules(shortFile, hmrContext.modules, timestamp, server)\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"从中可以看到，Vite 对于不同类型的文件，热更新的策略有所不同："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"对于配置文件和环境变量声明文件的改动，Vite 会直接重启服务器。"}),"\n",(0,s.jsxs)(n.li,{children:["对于客户端注入的文件(vite/dist/client/client.mjs)的改动，Vite 会给客户端发送",(0,s.jsx)(n.code,{children:"full-reload"}),"信号，让客户端刷新页面。"]}),"\n",(0,s.jsx)(n.li,{children:"对于普通文件改动，Vite 首先会获取需要热更新的模块，然后对这些模块依次查找热更新边界，然后将模块更新的信息传给客户端。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["其中，对于普通文件的热更新边界查找的逻辑，主要集中在",(0,s.jsx)(n.code,{children:"updateModules"}),"函数中，让我们来看看具体的实现:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function updateModules(\n  file: string,\n  modules: ModuleNode[],\n  timestamp: number,\n  { config, ws }: ViteDevServer\n) {\n  const updates: Update[] = []\n  const invalidatedModules = new Set<ModuleNode>()\n  let needFullReload = false\n  // 遍历需要热更新的模块\n  for (const mod of modules) {\n    invalidate(mod, timestamp, invalidatedModules)\n    if (needFullReload) {\n      continue\n    }\n    // 初始化热更新边界集合\n    const boundaries = new Set<{\n      boundary: ModuleNode\n      acceptedVia: ModuleNode\n    }>()\n    // 调用 propagateUpdate 函数，收集热更新边界\n    const hasDeadEnd = propagateUpdate(mod, boundaries)\n    // 返回值为 true 表示需要刷新页面，否则局部热更新即可\n    if (hasDeadEnd) {\n      needFullReload = true\n      continue\n    }\n    // 记录热更新边界信息\n    updates.push(\n      ...[...boundaries].map(({ boundary, acceptedVia }) => ({\n        type: `${boundary.type}-update` as Update['type'],\n        timestamp,\n        path: boundary.url,\n        acceptedPath: acceptedVia.url\n      }))\n    )\n  }\n  // 如果被打上 full-reload 标识，则让客户端强制刷新页面\n  if (needFullReload) {\n    ws.send({\n      type: 'full-reload'\n    })\n  } else {\n    config.logger.info(\n      updates\n        .map(({ path }) => chalk.green(`hmr update `) + chalk.dim(path))\n        .join('\\n'),\n      { clear: true, timestamp: true }\n    )\n    ws.send({\n      type: 'update',\n      updates\n    })\n  }\n}\n\n// 热更新边界收集\nfunction propagateUpdate(\n  node: ModuleNode,\n  boundaries: Set<{\n    boundary: ModuleNode\n    acceptedVia: ModuleNode\n  }>,\n  currentChain: ModuleNode[] = [node]\n): boolean {\n   // 接受自身模块更新\n   if (node.isSelfAccepting) {\n    boundaries.add({\n      boundary: node,\n      acceptedVia: node\n    })\n    return false\n  }\n  // 入口模块\n  if (!node.importers.size) {\n    return true\n  }\n  // 遍历引用方\n  for (const importer of node.importers) {\n    const subChain = currentChain.concat(importer)\n    // 如果某个引用方模块接受了当前模块的更新\n    // 那么将这个引用方模块作为热更新的边界\n    if (importer.acceptedHmrDeps.has(node)) {\n      boundaries.add({\n        boundary: importer,\n        acceptedVia: node\n      })\n      continue\n    }\n\n    if (currentChain.includes(importer)) {\n      // 出现循环依赖，需要强制刷新页面\n      return true\n    }\n    // 递归向更上层的引用方寻找热更新边界\n    if (propagateUpdate(importer, boundaries, subChain)) {\n      return true\n    }\n  }\n  return false\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，当热更新边界的信息收集完成后，服务端会将这些信息推送给客户端，从而完成局部的模块更新。"}),"\n",(0,s.jsxs)(n.h4,{id:"2-新增和删除文件",children:["2. 新增和删除文件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-新增和删除文件",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["对于新增和删除文件，Vite 也通过",(0,s.jsx)(n.code,{children:"chokidar"}),"监听了相应的事件:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"watcher.on('add', (file) => {\n  handleFileAddUnlink(normalizePath(file), server)\n})\n\nwatcher.on('unlink', (file) => {\n  handleFileAddUnlink(normalizePath(file), server, true)\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们就来浏览一下",(0,s.jsx)(n.code,{children:"handleFileAddUnlink"}),"的逻辑，代码简化后如下:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export async function handleFileAddUnlink(\n  file: string,\n  server: ViteDevServer,\n  isUnlink = false\n): Promise<void> {\n  const modules = [...(server.moduleGraph.getModulesByFile(file) ?? [])]\n\n  if (modules.length > 0) {\n    updateModules(\n      getShortName(file, server.config.root),\n      modules,\n      Date.now(),\n      server\n    )\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["不难发现，这个函数同样是调用",(0,s.jsx)(n.code,{children:"updateModules"}),"完成模块热更新边界的查找和更新信息的推送，而",(0,s.jsx)(n.code,{children:"updateModules"}),"在上文中已经分析过，这里就不再赘述了。"]}),"\n",(0,s.jsxs)(n.h3,{id:"客户端派发更新",children:["客户端派发更新",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#客户端派发更新",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"好，从前面的内容中，我们知道，服务端会监听文件的改动，然后计算出对应的热更新信息，通过 WebSocket 将更新信息传递给客户端，具体来说，会给客户端发送如下的数据:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  type: "update",\n  update: [\n    {\n      // 更新类型，也可能是 `css-update`\n      type: "js-update",\n      // 更新时间戳\n      timestamp: 1650702020986,\n      // 热更模块路径\n      path: "/src/main.ts",\n      // 接受的子模块路径\n      acceptedPath: "/src/render.ts"\n    }\n  ]\n}\n// 或者 full-reload 信号\n{\n  type: "full-reload"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"那么客户端是如何接受这些信息并进行模块更新的呢？"}),"\n",(0,s.jsx)(n.p,{children:"从上一节我们知道，Vite 在开发阶段会默认在 HTML 中注入一段客户端的脚本，即:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<script type="module" src="/@vite/client"><\/script>\n'})}),"\n",(0,s.jsx)(n.p,{children:"在启动任意一个 Vite 项目后，我们可以在浏览器查看具体的脚本内容:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["从中你可以发现，客户端的脚本中创建了 WebSocket 客户端，并与 Vite Dev Server 中的 WebSocket 服务端(",(0,s.jsx)(n.a,{href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/server/ws.ts#L21",target:"_blank",rel:"noopener noreferrer",children:"点击查看实现"}),")建立双向连接:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const socketProtocol = null || (location.protocol === 'https:' ? 'wss' : 'ws');\nconst socketHost = `${null || location.hostname}:${\"3000\"}`;\nconst socket = new WebSocket(`${socketProtocol}://${socketHost}`, 'vite-hmr');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["随后会监听 socket 实例的",(0,s.jsx)(n.code,{children:"message"}),"事件，接收到服务端传来的更新信息:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"socket.addEventListener('message', async ({ data }) => {\n  handleMessage(JSON.parse(data));\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接下来让我们把目光集中在 ",(0,s.jsx)(n.code,{children:"handleMessage"})," 函数中:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"async function handleMessage(payload: HMRPayload) {\n  switch (payload.type) {\n    case 'connected':\n      console.log(`[vite] connected.`)\n      // 心跳检测\n      setInterval(() => socket.send('ping'), __HMR_TIMEOUT__)\n      break\n    case 'update':\n      payload.updates.forEach((update) => {\n        if (update.type === 'js-update') {\n          queueUpdate(fetchUpdate(update))\n        } else {\n          // css-update\n          // 省略实现\n          console.log(`[vite] css hot updated: ${path}`)\n        }\n      })\n      break\n    case 'full-reload':\n      // 刷新页面\n      location.reload()\n    // 省略其它消息类型\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"其中，我们重点关注 js 的更新逻辑，即下面这行代码:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"queueUpdate(fetchUpdate(update))\n"})}),"\n",(0,s.jsx)(n.p,{children:"到底做了些什么。"}),"\n",(0,s.jsxs)(n.p,{children:["我们先来看看",(0,s.jsx)(n.code,{children:"queueUpdate"}),"和",(0,s.jsx)(n.code,{children:"fetchUpdate"}),"这两个函数的实现:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"let pending = false\nlet queued: Promise<(() => void) | undefined>[] = []\n\n// 批量任务处理，不与具体的热更新行为挂钩，主要起任务调度作用\nasync function queueUpdate(p: Promise<(() => void) | undefined>) {\n  queued.push(p)\n  if (!pending) {\n    pending = true\n    await Promise.resolve()\n    pending = false\n    const loading = [...queued]\n    queued = []\n    ;(await Promise.all(loading)).forEach((fn) => fn && fn())\n  }\n}\n\n// 派发热更新的主要逻辑\nasync function fetchUpdate({ path, acceptedPath, timestamp }: Update) {\n  // 后文会介绍 hotModuleMap 的作用，你暂且不用纠结实现，可以理解为 HMR 边界模块相关的信息\n  const mod = hotModulesMap.get(path)\n  const moduleMap = new Map()\n  const isSelfUpdate = path === acceptedPath\n\n  // 1. 整理需要更新的模块集合\n  const modulesToUpdate = new Set<string>()\n  if (isSelfUpdate) {\n    // 接受自身更新\n    modulesToUpdate.add(path)\n  } else {\n    // 接受子模块更新\n    for (const { deps } of mod.callbacks) {\n      deps.forEach((dep) => {\n        if (acceptedPath === dep) {\n          modulesToUpdate.add(dep)\n        }\n      })\n    }\n  }\n  // 2. 整理需要执行的更新回调函数\n  // 注： mod.callbacks 为 import.meta.hot.accept 中绑定的更新回调函数，后文会介绍\n  const qualifiedCallbacks = mod.callbacks.filter(({ deps }) => {\n    return deps.some((dep) => modulesToUpdate.has(dep))\n  })\n  // 3. 对将要更新的模块进行失活操作，并通过动态 import 拉取最新的模块信息\n  await Promise.all(\n    Array.from(modulesToUpdate).map(async (dep) => {\n      const disposer = disposeMap.get(dep)\n      if (disposer) await disposer(dataMap.get(dep))\n      const [path, query] = dep.split(`?`)\n      try {\n        const newMod = await import(\n          /* @vite-ignore */\n          base +\n            path.slice(1) +\n            `?import&t=${timestamp}${query ? `&${query}` : ''}`\n        )\n        moduleMap.set(dep, newMod)\n      } catch (e) {\n        warnFailedFetch(e, dep)\n      }\n    })\n  )\n  // 4. 返回一个函数，用来执行所有的更新回调\n  return () => {\n    for (const { deps, fn } of qualifiedCallbacks) {\n      fn(deps.map((dep) => moduleMap.get(dep)))\n    }\n    const loggedPath = isSelfUpdate ? path : `${acceptedPath} via ${path}`\n    console.log(`[vite] hot updated: ${loggedPath}`)\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"对热更新的边界模块来讲，我们需要在客户端获取这些信息:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"边界模块所接受(accept)的模块"}),"\n",(0,s.jsx)(n.li,{children:"accept 的模块触发更新后的回调"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们知道，在 ",(0,s.jsx)(n.code,{children:"vite:import-analysis"})," 插件中，会给包含热更新逻辑的模块注入一些工具代码，如下图所示:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"createHotContext"})," 同样是客户端脚本中的一个工具函数，我们来看看它主要的实现:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const hotModulesMap = new Map<string, HotModule>()\n\nexport const createHotContext = (ownerPath: string) => {\n  // 将当前模块的接收模块信息和更新回调注册到 hotModulesMap\n  function acceptDeps(deps: string[], callback: HotCallback['fn'] = () => {}) {\n    const mod: HotModule = hotModulesMap.get(ownerPath) || {\n      id: ownerPath,\n      callbacks: []\n    }\n    mod.callbacks.push({\n      deps,\n      fn: callback\n    })\n    hotModulesMap.set(ownerPath, mod)\n  }\n  return {\n    // import.meta.hot.accept\n    accept(deps: any, callback?: any) {\n      if (typeof deps === 'function' || !deps) {\n        acceptDeps([ownerPath], ([mod]) => deps && deps(mod))\n      } else if (typeof deps === 'string') {\n        acceptDeps([deps], ([mod]) => callback && callback(mod))\n      } else if (Array.isArray(deps)) {\n        acceptDeps(deps, callback)\n      } else {\n        throw new Error(`invalid hot.accept() usage.`)\n      }\n    },\n    // import.meta.hot.dispose\n    // import.meta.hot.invalidate\n    // 省略更多方法的实现\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"因此，Vite 给每个热更新边界模块注入的工具代码主要有两个作用:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"注入 import.meta.hot 对象的实现"}),"\n",(0,s.jsx)(n.li,{children:"将当前模块 accept 过的模块和更新回调函数记录到 hotModulesMap 表中"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["而前面所说的 ",(0,s.jsx)(n.code,{children:"fetchUpdate"})," 函数则是通过 ",(0,s.jsx)(n.code,{children:"hotModuleMap"})," 来获取边界模块的相关信息，在 accept 的模块发生变动后，通过动态 import 拉取最新的模块内容，然后返回更新回调，让",(0,s.jsx)(n.code,{children:"queueUpdate"}),"这个调度函数执行更新回调，从而完成",(0,s.jsx)(n.strong,{children:"派发更新"}),"的过程。至此，HMR 的过程就结束了。"]}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["好，本小节的内容就到这里。你需要重点掌握 Vite 中的",(0,s.jsx)(n.strong,{children:"模块依赖图实现"}),"、",(0,s.jsx)(n.strong,{children:"服务端收集更新模块"}),"和",(0,s.jsx)(n.strong,{children:"客户端派发更新"}),"的原理。"]}),"\n",(0,s.jsx)(n.p,{children:"首先，Vite 为了更方便地管理模块之间的关系，创建了模块依赖图的数据结构，在 HMR 过程中，服务端会根据这张图来寻找 HMR 边界模块。"}),"\n",(0,s.jsx)(n.p,{children:"其次，HMR 更新由客户端和服务端配合完成，两者通过 WebSocket 进行数据传输。在服务端，Vite 通过查找模块依赖图确定热更新的边界，并将局部更新的信息传递给客户端，而客户端接收到热更信息后，会通过动态 import 请求并加载最新模块的内容，并执行派发更新的回调，即 import.meta.hot.accept 中定义的回调函数，从而完成完整的热更新过程。"}),"\n",(0,s.jsxs)(n.p,{children:["最后，欢迎你在评论区记录本节的学习心得，也恭喜你完成了",(0,s.jsx)(n.strong,{children:"源码精读章节"}),"的学习，让我们下一章再见！"]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20Vite%2F23.%20%E7%83%AD%E6%9B%B4%E6%96%B0%EF%BC%9A%E5%9F%BA%E4%BA%8E%20ESM%20%E7%9A%84%E6%AF%AB%E7%A7%92%E7%BA%A7%20HMR%20%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%8F%AD%E7%A7%98.md"]={toc:[{text:"创建模块依赖图",id:"创建模块依赖图",depth:3},{text:"服务端收集更新模块",id:"服务端收集更新模块",depth:3},{text:"1. 修改文件",id:"1-修改文件",depth:4},{text:"2. 新增和删除文件",id:"2-新增和删除文件",depth:4},{text:"客户端派发更新",id:"客户端派发更新",depth:3},{text:"小结",id:"小结",depth:2}],title:"23. 热更新：基于 ESM 的毫秒级 HMR 的实现揭秘",headingTitle:"23. 热更新：基于 ESM 的毫秒级 HMR 的实现揭秘",frontmatter:{}}}}]);