"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["80405"],{887151:function(e,n,a){e.exports=a.p+"static/image/a90cfedea85421a5997053f41150dd97.5b28c339.gif"},562878:function(e,n,a){a.r(n),a.d(n,{default:()=>G});var t=a(552676),r=a(740453);let s=a.p+"static/image/724798bbf1a72db2d34521dc2b0f2ca1.45790ec1.webp";var c=a(887151);let i=a.p+"static/image/7ec9de039587641e973639b6a3ab096e.ce499c56.webp",d=a.p+"static/image/1d80ee3c56833f72fcd6247f363adadd.944ae8f7.webp",l=a.p+"static/image/c442417d48e52fbad5b2a4b9204c31c7.89cecbb0.webp",o=a.p+"static/image/db7c36db4d6dc97a4a1b158fc6dbddb2.c19b472a.webp",p=a.p+"static/image/6ad1bcad65c852e6b70ed2efbfb4dbef.cbee7710.webp",m=a.p+"static/image/46f4ae26385953e97290efcc6203896f.dd63c659.webp",b=a.p+"static/image/a241cffe8adcc861282411cc6607d0ed.bbebf7c0.webp",x=a.p+"static/image/aa2c4bb574baf763cd2c32793ae76a1e.e0750a95.webp",j=a.p+"static/image/c3eb1e239fe4f689dfe4dca4031cceb4.88c35f71.webp",f=a.p+"static/image/815845bf293651f9701ccf3faaa60e8d.aac170e7.gif",h=a.p+"static/image/a73fd7345c4c6d88e11e1e2e1eb376cf.b3e585bd.webp",g=a.p+"static/image/8aa930228eaa92098bc4917493b16f42.e1b3ddd8.gif",u=a.p+"static/image/b7ce0be5e50b63bd4de512778a0d2ec2.aee1712e.webp",T=a.p+"static/image/395d9bc190e36f10748e57190f0ca6ee.77bfddae.webp",C=a.p+"static/image/2c93bbbc6808fd3b926e4e9feb01e9b5.d2ec8919.gif",v=a.p+"static/image/95cdc6d02b045fc6aac44537c43ab1f9.af52b62b.webp",D=a.p+"static/image/1047378906501e7d177c14a9d05531ac.d6585a5c.webp",y=a.p+"static/image/f0fdf771f8b3280d3f088ce86c226860.aeb7618d.webp",w=a.p+"static/image/ea11e5282748cdc7020dd3234ea29dc4.d6e5614a.webp",E=a.p+"static/image/ea130605696fb4e6517373f4fd768443.42835adb.webp",B=a.p+"static/image/5ab9875c992942834739ad02af4e3010.b9ffcf8e.webp",R=a.p+"static/image/8189eb3f01c916f19addcc64720f61e3.1e312100.gif",A=a.p+"static/image/7409c545c3887fb4939de0324e5469ef.7107bad0.webp",_=a.p+"static/image/1ad8d62bbdb47fd33ebde5aa441b3071.9c32deef.gif",M=a.p+"static/image/5f455485862662a4ac4528dd8cd381a8.eab6ae88.webp",P=a.p+"static/image/00f9f17857e4c021e150751d59dd43f9.e9c7fa2a.webp",N=a.p+"static/image/a81d4a6f9ab68c4b1059c792cb6b0029.741bc2fc.gif",S=a.p+"static/image/34e8e6085468efb3ceb6e53f9ecf1d68.c456085e.webp",k=a.p+"static/image/86cc1ab8f5a0994255349183e0910714.e77d02dd.gif",I=a.p+"static/image/ee5e9cb8687d86a71e43fb1b7822ea31.5e3bb62a.gif";function F(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"第77章低代码编辑器拖拽优化table组件",children:["第77章—低代码编辑器：拖拽优化、Table组件",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第77章低代码编辑器拖拽优化table组件",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["\uFEFF在 ",(0,t.jsx)(n.a,{href:"https://aisuda.github.io/amis-editor-demo/#/edit/0",target:"_blank",rel:"noopener noreferrer",children:"amis"})," 编辑器里，物料拖动到画布区后，还可以拖动改变位置："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:I,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"现在我们的编辑器没有支持拖动改变位置："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:k,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们来实现下："}),"\n",(0,t.jsx)(n.p,{children:"其实这个也很简单，就是给物料也加上 useDrag 就可以了。"}),"\n",(0,t.jsx)(n.p,{children:"比如给 Button 加一下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:S,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const [_, drag] = useDrag({\n  type: 'Button',\n  item: {\n      type: 'Button'\n  }\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:N,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"现在是能拖动了，但是和从物料区拖过来的 drop 逻辑一样，都是新增组件。"}),"\n",(0,t.jsx)(n.p,{children:"我们得区分下两者。"}),"\n",(0,t.jsx)(n.p,{children:"加上 dragType 属性，然后带上当前拖拽的组件 id："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:P,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"在 useDrop 的时候判断下 dragTag，如果是 move，那就先 delete 再 add"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:M,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { useDrop } from \"react-dnd\";\nimport { useComponentConfigStore } from \"../stores/component-config\";\nimport { getComponentById, useComponetsStore } from \"../stores/components\";\n\nexport interface ItemType {\n  type: string;\n  dragType?: 'move' | 'add',\n  id: number\n}\n\nexport function useMaterailDrop(accept: string[], id: number) {\n    const { addComponent, deleteComponent, components } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n\n    const [{ canDrop }, drop] = useDrop(() => ({\n        accept,\n        drop: (item: ItemType, monitor) => {\n            const didDrop = monitor.didDrop()\n            if (didDrop) {\n              return;\n            }\n\n            if(item.dragType === 'move') {\n              const component = getComponentById(item.id, components)!;\n\n              deleteComponent(item.id);\n\n              addComponent(component, id)\n            } else {\n              const config = componentConfig[item.type];\n\n              addComponent({\n                id: new Date().getTime(),\n                name: item.type,\n                desc: config.desc,\n                props: config.defaultProps\n              }, id)\n            }\n        },\n        collect: (monitor) => ({\n          canDrop: monitor.canDrop(),\n        }),\n    }));\n\n    return { canDrop, drop }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:_,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样就实现了拖拽改变位置。"}),"\n",(0,t.jsx)(n.p,{children:"在 Container 组件也加上 useDrag："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:A,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这里因为要同时给 div 绑定 drag、drop 的处理，所以用 useRef 拿到 ref 之后再绑定。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { useDrag } from 'react-dnd';\nimport { useMaterailDrop } from '../../hooks/useMaterailDrop';\nimport { CommonComponentProps } from '../../interface';\nimport { useEffect, useRef } from 'react';\n\nconst Container = ({ id, name, children, styles }: CommonComponentProps) => {\n\n    const {canDrop, drop } = useMaterailDrop(['Button', 'Container'], id);\n\n    const divRef = useRef<HTMLDivElement>(null);\n\n    const [_, drag] = useDrag({\n        type: name,\n        item: {\n            type: name,\n            dragType: 'move',\n            id: id\n        }\n    });\n\n    useEffect(() => {\n        drop(divRef);\n        drag(divRef);\n    }, []);\n    \n    return (\n        <div \n            data-component-id={id}\n            ref={divRef}\n            style={styles}\n            className={`min-h-[100px] p-[20px] ${ canDrop ? 'border-[2px] border-[blue]' : 'border-[1px] border-[#000]'}`}\n        >{children}</div>\n    )\n}\n\nexport default Container;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:R,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"接下来我们加一下 Table 的物料组件："}),"\n",(0,t.jsx)(n.p,{children:"materials/Table/dev.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Table as AntdTable } from 'antd';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { CommonComponentProps } from '../../interface';\nimport { useMaterailDrop } from '../../hooks/useMaterailDrop';\nimport { useDrag } from 'react-dnd';\n\nfunction Table({ id, name, children, styles }: CommonComponentProps) {\n\n    const {canDrop, drop } = useMaterailDrop(['TableColumn'], id);\n    \n    const divRef = useRef<HTMLDivElement>(null);\n\n    const [_, drag] = useDrag({\n        type: name,\n        item: {\n            type: name,\n            dragType: 'move',\n            id: id\n        }\n    });\n\n    useEffect(() => {\n        drop(divRef);\n        drag(divRef);\n    }, []);\n\n    const columns = useMemo(() => {\n        return React.Children.map(children, (item: any) => {\n            return {\n                title: <div className='m-[-16px] p-[16px]' data-component-id={item.props?.id}>{item.props?.title}</div>,\n                dataIndex: item.props?.dataIndex,\n                key: item\n            }\n        })\n    }, [children]);\n\n    return (\n        <div\n            className={`w-[100%] ${canDrop ? 'border-[2px] border-[blue]' : 'border-[1px] border-[#000]'}`}\n            ref={divRef}\n            data-component-id={id}\n            style={styles}\n        >\n            <AntdTable\n                columns={columns}\n                dataSource={[]}\n                pagination={false}\n            />\n        </div>\n    );\n}\n\nexport default Table;\n"})}),"\n",(0,t.jsx)(n.p,{children:"添加 drop、drag 的处理，用 antd 的 table 来渲染。"}),"\n",(0,t.jsx)(n.p,{children:"这里 columns 的处理比较巧妙："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:B,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们拖拽 TableColumn 组件过来的时候，用 React.Children 遍历，把它变为 columns 配置。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:E,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"当然，这个 TableColumn 组件还没写。"}),"\n",(0,t.jsx)(n.p,{children:"在 componentConfig 添加 Table 组件的配置："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:w,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"Table: {\n    name: 'Table',\n    defaultProps: {},\n    desc: '表格',\n    setter: [\n        {\n          name: 'url',\n          label: 'url',\n          type: 'input',\n        },\n    ],\n    dev: TableDev,\n    prod: TableDev\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后在 Page、Modal、Container 组件里支持下 Table 的 drop："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:D,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"试一下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:C,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:T,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,t.jsx)(n.p,{children:"然后再实现下 TableColumn 组件："}),"\n",(0,t.jsx)(n.p,{children:"materials/TableColumn/dev.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const TableColumn = () => {\n  return <></>\n}\n\nexport default TableColumn;\n"})}),"\n",(0,t.jsx)(n.p,{children:"materials/TableColumn/prod.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const TableColumn = () => {\n    return <></>\n}\n\nexport default TableColumn;\n"})}),"\n",(0,t.jsx)(n.p,{children:"这只是我们做 column 配置用的，不需要渲染内容。"}),"\n",(0,t.jsx)(n.p,{children:"在 ColumnConfig 加一下配置："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"TableColumn: {\n    name: 'TableColumn',\n    desc: '表格列',\n    defaultProps: {\n        dataIndex:`col_${new Date().getTime()}`,\n        title: '列名'\n    },\n    setter: [\n        {\n          name: 'type',\n          label: '类型',\n          type: 'select',\n          options: [\n            {\n              label: '文本',\n              value: 'text',\n            },\n            {\n              label: '日期',\n              value: 'date',\n            },\n          ],\n        },\n        {\n          name: 'title',\n          label: '标题',\n          type: 'input',\n        },\n        {\n          name: 'dataIndex',\n          label: '字段',\n          type: 'input',\n        },\n      ],\n    dev: TableColumnDev,\n    prod: TableColumnProd,\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"试下效果："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们用 TableColumn 组件来配置字段。"}),"\n",(0,t.jsx)(n.p,{children:"然后再来实现 Table 组件的 prod 版本："}),"\n",(0,t.jsx)(n.p,{children:"materials/Table/prod.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Table as AntdTable } from 'antd';\nimport dayjs from 'dayjs';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport axios from 'axios';\nimport { CommonComponentProps } from '../../interface';\n\nconst Table = ({ url, children }: CommonComponentProps) => {\n\n  const [data, setData] = useState<Array<Record<string, any>>>([]);\n  const [loading, setLoading] = useState(false);\n\n  const getData = async () => {\n    if (url) {\n      setLoading(true);\n\n      const { data } = await axios.get(url);\n      setData(data);\n\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const columns = useMemo(() => {\n    return React.Children.map(children, (item: any) => {\n        if (item?.props?.type === 'date') {\n            return {\n                title: item.props?.title,\n                dataIndex: item.props?.dataIndex,\n                render: (value: any) => value ? dayjs(value).format('YYYY-MM-DD') : null,\n            }\n        } else {\n            return {\n                title: item.props?.title,\n                dataIndex: item.props?.dataIndex,\n            }\n        }\n    })\n  }, [children]);\n\n  return (\n    <AntdTable\n      columns={columns}\n      dataSource={data}\n      pagination={false}\n      rowKey=\"id\"\n      loading={loading}\n    />\n  );\n}\n\nexport default Table;\n"})}),"\n",(0,t.jsx)(n.p,{children:"生产环境的 Table 需要请求 url，拿到数据后设置到 table。"}),"\n",(0,t.jsx)(n.p,{children:"并且渲染列的时候，如果是 date，要用 dayjs 做下格式化。"}),"\n",(0,t.jsx)(n.p,{children:"安装下用到的包："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install --save axios\nnpm install --save dayjs\n"})}),"\n",(0,t.jsx)(n.p,{children:"改下 componentConfig 里的组件："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"试一下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，确实发请求了。"}),"\n",(0,t.jsx)(n.p,{children:"只不过现在没这个接口。"}),"\n",(0,t.jsx)(n.p,{children:"我们用 nest 创建一个后端服务："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npx @nestjs/cli new lowcode-demo-backend\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"改下 AppController，加一个接口："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Get('data')\ndata() {\n    return [\n      { name: '光光', sex: '男', birthday: new Date('1994-07-07').getTime() },\n      { name: '东东', sex: '男', birthday: new Date('1995-06-06').getTime() },\n      { name: '小红', sex: '女', birthday: new Date('1996-08-08').getTime() }\n    ]\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"在 main.ts 开启跨域："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"浏览器访问下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样接口就有了。"}),"\n",(0,t.jsx)(n.p,{children:"我们再来试下 Table 组件："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"添加三个 TableColumn，配置下字段。"}),"\n",(0,t.jsx)(n.p,{children:"然后在 Table 配置下 url："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"再点击预览："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样，Table 组件就会请求 url，然后根据配置渲染表格"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["案例代码上传了",(0,t.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git reset --hard 3df08cf3e09d69817f1bc75bf1b0f9f5e8cb41c4\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"这节我们实现了物料组件拖拽改变位置，并实现了 Table 组件。"}),"\n",(0,t.jsx)(n.p,{children:"拖拽改变位置只要在物料组件上加上 useDrag 就可以了，要注意区分 add 和 move 的情况，加上标识，分别做处理。"}),"\n",(0,t.jsx)(n.p,{children:"Table 组件可以配置 url，然后拖拽 TableColumn 进来，TableColumn 可以配置字段信息。"}),"\n",(0,t.jsx)(n.p,{children:"Preview 渲染的时候，根据 url 请求接口，然后根据 columns 的配置来渲染数据。"}),"\n",(0,t.jsx)(n.p,{children:"这样，Table 的物料组件就完成了。"})]})}function L(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(F,{...e})}):F(e)}let G=L;L.__RSPRESS_PAGE_META={},L.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC77%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E6%8B%96%E6%8B%BD%E4%BC%98%E5%8C%96%E3%80%81Table%E7%BB%84%E4%BB%B6.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第77章—低代码编辑器：拖拽优化、Table组件",headingTitle:"第77章—低代码编辑器：拖拽优化、Table组件",frontmatter:{}}}}]);