"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["91652"],{794300:function(e,n,r){r.r(n),r.d(n,{default:()=>T});var s=r(552676),c=r(740453);let i=r.p+"static/image/67302ddc4f9188f32571226edbd63633.18af966c.png",a=r.p+"static/image/302bc6f00314378d2c6a034e9f664af3.0095f483.png",t=r.p+"static/image/55effe8fe98fb615e64a9dc951450d3c.0a50fbea.png",d=r.p+"static/image/7a0cff18639553fa56de999589c482f2.938c8091.png",o=r.p+"static/image/bc70c6ce3d5d149a6112803568fda6f7.308bbc11.png",l=r.p+"static/image/d4f8ccdddbf2aa282e61c55a30474dbd.bd518347.png",h=r.p+"static/image/a7466f8e576c7c79beb3e41794794948.66378592.png",p=r.p+"static/image/2f9a93347fec4098aff2b55cf10862c9.bc835968.png",x=r.p+"static/image/8f4bea3429a4208576e0c3b6ba4fdb77.d3a5790b.png",g=r.p+"static/image/38ced69c1e0262ac42f4b8608b7e5ca5.db78c8d4.png",u=r.p+"static/image/b02b8b652d0f167960dc8a8245332ef4.db312577.png",j=r.p+"static/image/920af47505646321c9e50c0237a74ebd.4542a422.png",m=r.p+"static/image/817165ba20a3b5dc75d9e086ccb199b4.3a425f0d.gif",f=r.p+"static/image/45d74454561e8ab2297b2605add2b381.2a5d5ae9.png",k=r.p+"static/image/5a24fda4cc704b698575977ec39e0d9a.eb821377.png",b=r.p+"static/image/30fea949f0f9ce596293f988b6396499.439aa9d5.png",w=r.p+"static/image/a6a70b77fe5c9aab823436a57f9f966a.a84d3448.png",v=r.p+"static/image/9a3dabe3ce1c192d1c1b711d5d47412b.dc54ba37.png",A=r.p+"static/image/d16c5dbd3329f1d388423028725bc7ce.fd6e28f2.png",E=r.p+"static/image/d39f103476c9cec39b1b51d0ef265cfb.d00cdded.png",P=r.p+"static/image/e76935b242b8b0e6a25881be85491784.b0ad893c.png";function D(e){let n=Object.assign({p:"p",img:"img",h2:"h2",a:"a",ul:"ul",li:"li",blockquote:"blockquote",h3:"h3",pre:"pre",code:"code",strong:"strong"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"通常而言组件库或工具库都需要提供使用文档，文档的内容包括库的特性说明、安装使用说明、API 介绍、更新日志以及 FAQ 等信息，本课程接下来重点讲解如何利用工具快速生成和部署开发者文档。在之前的课程中我们已经讲解了如何利用工具生成更新日志，在本课程中我们会重点讲解如何快速生成静态网站、如何快速生成 API 文档以及如何在静态网站中快速集成更新日志和 API 文档。为了使得大家更好的理解课程设计，接下来会按照以下内容进行讲解："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:"yuque_diagram (3).jpg"})}),"\n",(0,s.jsxs)(n.h2,{id:"静态网站生成器",children:["静态网站生成器",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静态网站生成器",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["熟悉 Vue 框架的开发者会发现很多 Vue 生态的文档网站都是同一种主题风格，例如 ",(0,s.jsx)(n.a,{href:"https://cli.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer",children:"Vue CLI"})," 和 ",(0,s.jsx)(n.a,{href:"https://vue-loader.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer",children:"Vue Loader"}),"  ："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["类似的文档站点都使用了 ",(0,s.jsx)(n.a,{href:"https://vuepress.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer",children:"VuePress"})," （静态网站生成器）快速生成，当然 VuePress 本身的文档指南也是类似的风格。VuePress 的特点如下所示："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"拥抱 Markdown 生态，可基于 Markdown 快速生成 HTML"}),"\n",(0,s.jsx)(n.li,{children:"内置了很多 Markdown 拓展"}),"\n",(0,s.jsx)(n.li,{children:"支持 Vue & Webpack 开发，并可以在 Markdown 中使用 Vue 组件"}),"\n",(0,s.jsx)(n.li,{children:"支持自定义主题或者共享别人已经发布的主题"}),"\n",(0,s.jsx)(n.li,{children:"可以安装 Vuepress 插件"}),"\n",(0,s.jsx)(n.li,{children:"可以启动本地开发态展示文档，也可以一键构建需要部署的文档资源"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：前端开发通常喜欢使用 Markdown 格式进行文档设计，如果不采用 VuePress 等静态网站生成器，并且希望将 Markdown 转换成 HTML 进行网页显示，那么需要使用 ",(0,s.jsx)(n.a,{href:"https://github.com/markdown-it/markdown-it",target:"_blank",rel:"noopener noreferrer",children:"markdown-it"})," 等更加底层的工具。VuePress 将 markdown-it 和 Vue 的生态整合在一起，从而可以更加高效的生成网站文档。React 也有相应的静态站点生成器，例如 ",(0,s.jsx)(n.a,{href:"https://d.umijs.org/guide",target:"_blank",rel:"noopener noreferrer",children:"dumi"}),"、",(0,s.jsx)(n.a,{href:"https://github.com/rexxars/react-markdown#readme",target:"_blank",rel:"noopener noreferrer",children:"react-markdown"}),"、",(0,s.jsx)(n.a,{href:"https://github.com/react-static/react-static",target:"_blank",rel:"noopener noreferrer",children:"react-static"})," 等，感兴趣的同学可以自行了解。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"快速生成文档",children:["快速生成文档",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#快速生成文档",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["组件库 Element UI 采用 ",(0,s.jsx)(n.a,{href:"https://github.com/QingWei-Li/vue-markdown-loader#with-vue-cli-3",target:"_blank",rel:"noopener noreferrer",children:"vue-markdown-loader"})," (Convert Markdown file to Vue Component using markdown-it) 进行组件的演示文档设计，但是配置相对复杂，更简单的方式是配合 ",(0,s.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.vuepress.cn%2F",title:"https://www.vuepress.cn/",target:"_blank",rel:"noopener noreferrer",children:"Vuepress"})," 进行设计，它的功能非常强大，也不需要过多熟悉 Vue 语法，除非你需要非常复杂的文档演示功能。我们可以先按照官方的\xa0",(0,s.jsx)(n.a,{href:"https://www.vuepress.cn/guide/getting-started.html#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B",target:"_blank",rel:"noopener noreferrer",children:"快速上手"}),"\xa0文档进行依赖安装和 npm scripts 脚本设置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 36.工程设计：文档设计\nnpm install -D vuepress\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：示例源码可以从\xa0",(0,s.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/vuepress",target:"_blank",rel:"noopener noreferrer",children:"demo/vuepress"}),"\xa0分支获取。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["按照 Vuepress 官网",(0,s.jsx)(n.strong,{children:"约定优于配置"}),"的原则进行演示文档的",(0,s.jsx)(n.a,{href:"https://www.vuepress.cn/guide/directory-structure.html",target:"_blank",rel:"noopener noreferrer",children:"目录结构"}),"设计，官方的文档可能一下子难以理解，可以先设计一个最简单的目录："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:".\n├── docs\n│   ├── .vuepress\n│   │   └── config.js       # 配置文件\n│   ├── guide\n│   │   └── README.md       # 快速开始\n│   └── README.md           # 文档首页\n└── package.json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["根据",(0,s.jsx)(n.a,{href:"https://www.vuepress.cn/theme/default-theme-config.html#%E9%A6%96%E9%A1%B5",target:"_blank",rel:"noopener noreferrer",children:"默认主题 / 首页"}),"在\xa0",(0,s.jsx)(n.code,{children:"docs/README.md"}),"\xa0进行首页设计："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-MD",children:"---\nhome: true\n# heroImage: /hero.png\nheroText: Micro Framework\ntagline: 基于 iframe 的微前端框架\nactionText: 开发指南->\nactionLink: /guide/\nfeatures:\n  - title: 原生隔离\n    details: 基于 iframe 隔离，天然的隔离能力\n  - title: 极速体验\n    details: 支持预加载、预渲染，应用切换丝滑\n  - title: 开箱即用\n    details: 提供 Vue 和 React 配套的解决方案\nfooter: MIT Licensed | Copyright \xa9 2023-present 子弈\n---\n"})}),"\n",(0,s.jsxs)(n.p,{children:["根据",(0,s.jsx)(n.a,{href:"https://www.vuepress.cn/config",target:"_blank",rel:"noopener noreferrer",children:"配置"}),"\xa0对\xa0",(0,s.jsx)(n.code,{children:"docs/.vuepress/config.js"}),"\xa0文件进行基本配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// 获取包描述信息\nconst packageJson = require("../../package.json");\n\nmodule.exports = {\n  // 配置网站标题\n  title: packageJson.name,\n  // 配置网站描述\n  description: packageJson.description,\n  // 配置基本路径\n  base: "/micro-framework/",\n  // 配置基本端口\n  port: "8080",\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["执行 ",(0,s.jsx)(n.code,{children:"npm run docs:dev"})," 启动文档站点进行预览："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 执行\nnpm run docs:dev\n# 最终打印\nsuccess [20:15:53] Build a3e889 finished in 84 ms! ( http://localhost:8080/micro-framework/ )\n"})}),"\n",(0,s.jsx)(n.p,{children:"此时我们可以打开地址进行访问，可以发现框架库的文档首页基本上就设计出来了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["当然，如果希望点击开发指南可以跳转相应的文档，我们可以在 ",(0,s.jsx)(n.code,{children:"docs/guide/README.md"})," 中写入指南信息："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-md",children:"## 介绍\n\nMicro Framwork 是[深入浅出微前端课程](https://juejin.cn/book/7258893482318626868)衍生出来的一个示例框架，该框架主要基于 iframe 进行隔离设计，提供：\n\n- 快照 & iframe 隔离能力\n- 预加载、预渲染等性能优化手段\n- Vue & React 微前端解决方案\n\nMicro Framwork 仅仅是一个示例框架，切勿将其投入生产使用，该框架旨在帮助大家了前端设计的各个方面，包括微前端知识、工程化知识、浏览器底层原理知识等等。\n\n\n## 安装\n\nnpm i micro-framework --save\n\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：Vuepress 默认将 ",(0,s.jsx)(n.code,{children:"docs"})," 目录作为文档的根目录，内置了一套默认的路由规则，例如 ",(0,s.jsx)(n.code,{children:"/guide/"})," 路由对应的文件路径为 ",(0,s.jsx)(n.code,{children:"docs/guide/README.md"}),"、",(0,s.jsx)(n.code,{children:"/changelog.html"})," 路由地址则对应了 ",(0,s.jsx)(n.code,{children:"docs/changelog.md"}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"此时我们点击开发指南，默认可以跳转到对应的文档："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:"VuePress初步演示.gif"})}),"\n",(0,s.jsxs)(n.p,{children:["当然除了以上设计的首页和开发指南页面，还可以设计",(0,s.jsx)(n.a,{href:"https://www.vuepress.cn/theme/default-theme-config.html#%E5%AF%BC%E8%88%AA%E6%A0%8F",target:"_blank",rel:"noopener noreferrer",children:"导航栏"}),"、",(0,s.jsx)(n.a,{href:"https://www.vuepress.cn/theme/default-theme-config.html#%E4%BE%A7%E8%BE%B9%E6%A0%8F",target:"_blank",rel:"noopener noreferrer",children:"侧边栏"}),"、使用",(0,s.jsx)(n.a,{href:"https://www.vuepress.cn/plugin/",target:"_blank",rel:"noopener noreferrer",children:"插件"}),"、",(0,s.jsx)(n.a,{href:"https://www.vuepress.cn/guide/using-vue.html#%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6",target:"_blank",rel:"noopener noreferrer",children:"使用组件"}),"等。"]}),"\n",(0,s.jsxs)(n.h3,{id:"导航栏配置",children:["导航栏配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#导航栏配置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["以导航栏为例，我们希望开发者可以快速点击 API 查看详细的使用介绍、可以找到对应的 Github 地址，并可以快速查看变更日志，则可以在 ",(0,s.jsx)(n.code,{children:".vueress/config.js"})," 中添加相应的导航链接："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'module.exports = {\n  // ...\n  themeConfig: {\n    // 配置导航链接\n    nav: [\n      { text: "开发指南", link: "/guide/" },\n      { text: "API", link: "/api/" },\n      { text: "变更日志", link: "/changelog.html" },\n      // 导航还可以配置下拉列表, 例如不同的版本如果有不同的文档地址\n      {\n        text: "v2.x",\n        items: [\n          { text: "v1.x", link: "https://xxx/1" },\n          { text: "v0.x", link: "https://xxx/0" },\n        ],\n      },\n      { text: "Github", link: "https://github.com/ziyi2/micro-framework" },\n    ],\n  },\n};\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"配置后的效果如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:"Vuepress导航.gif"})}),"\n",(0,s.jsxs)(n.p,{children:["在",(0,s.jsx)(n.strong,{children:"工程设计：变更日志"}),"中我们通过工具自动生成了 CHANGELOG.md 文件，此时我们可以更改命令将该文件放入 ",(0,s.jsx)(n.code,{children:"docs/CHANGELOG.md"})," 中，从而可以被路由 ",(0,s.jsx)(n.code,{children:"/changelog.html"})," 进行访问："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'  "scripts": {\n    // 将变更日志放入 Vuepress 的 docs 目录中，此时可以\n    "changelog": "conventional-changelog -p angular -i docs/CHANGELOG.md -s -r 0",\n    // 每次启动时先进行日志覆盖\n    "docs:dev": "npm run changelog && vuepress dev docs",\n    "docs:build": "npm run changelog && vuepress build docs"\n  }\n'})}),"\n",(0,s.jsx)(n.p,{children:"此时重新启动默认可以在变更日志中查看详细信息："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h3,{id:"侧边栏配置",children:["侧边栏配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#侧边栏配置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们希望开发指南的侧边可以展示介绍和安装使用等信息，则可以在 ",(0,s.jsx)(n.code,{children:".vueress/config.js"})," 中进行如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// 获取包描述信息\nconst packageJson = require("../../package.json");\n\nmodule.exports = {\n  // ...\n  themeConfig: {\n    // 配置导航链接\n    nav: [\n      { text: "开发指南", link: "/guide/introduction" },\n      { text: "API", link: "/api/" },\n      { text: "变更日志", link: "/changelog.html" },\n      // 导航还可以配置下拉列表, 例如不同的版本如果有不同的文档地址\n      {\n        text: "v2.x",\n        items: [\n          { text: "v1.x", link: "https://xxx/1" },\n          { text: "v0.x", link: "https://xxx/0" },\n        ],\n      },\n      { text: "Github", link: "https://github.com/ziyi2/micro-framework" },\n    ],\n\n    // 注意使用多个侧边栏，否则顶部导航切换的时候侧边栏一直存在\n    // https://www.vuepress.cn/theme/default-theme-config.html#%E5%A4%9A%E4%B8%AA%E4%BE%A7%E8%BE%B9%E6%A0%8F\n    sidebar: {\n      // 跳转到开发指南的时候展示侧边栏\n      "/guide/": [\n        {\n          title: "开发指南",\n          collapsable: false,\n          children: ["/guide/introduction", "/guide/install", "/guide/use"],\n        },\n      ],\n      \n      // 注意和以下形式的区别\n      //   "/guide/": ["introduction", "install", "use"],\n    },\n  },\n};\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["然后在 ",(0,s.jsx)(n.code,{children:"guide/introduction.md"}),"、",(0,s.jsx)(n.code,{children:"guide/install.md"})," 以及 ",(0,s.jsx)(n.code,{children:"guide/use.md"})," 中写入相应的文档信息，之后便会在网站中展示相应的侧边栏导航，并且只有点击顶部的开发指南时才会展示侧边栏导航，如下所示："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:"VuePress侧边栏.gif"})}),"\n",(0,s.jsxs)(n.h3,{id:"插件配置",children:["插件配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#插件配置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["VuePress 社区提供了一系列",(0,s.jsx)(n.a,{href:"https://vuepress-community.netlify.app/zh/",target:"_blank",rel:"noopener noreferrer",children:"插件生态"}),"，除此之外，也可以通过 Awesome VuePress 查看列举的",(0,s.jsx)(n.a,{href:"https://github.com/vuepress/awesome-vuepress/blob/main/v1.md#plugins",target:"_blank",rel:"noopener noreferrer",children:"插件"}),"，例如实用的插件包括："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"vuepress-plugin-copyright：处理 VuePress 中的复制操作"}),"\n",(0,s.jsx)(n.li,{children:"vuepress-plugin-zooming：使 VuePress 中的图片支持缩放"}),"\n",(0,s.jsx)(n.li,{children:"vuepress-plugin-typescript：在 VuePress 中支持 TypeScript"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["例如这里配置一个有趣的插件，可以在 ",(0,s.jsx)(n.code,{children:".vueress/config.js"})," 中进行如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'module.exports = {\n  // 配置插件（需要安装依赖）\n  plugins: ["vuepress-plugin-cat"],\n};\n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:"VuePress撸猫.gif"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：感兴趣的同学可以了解一下 VuePress 插件系统的设计原理。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"在-markdown-中使用-vue",children:["在 Markdown 中使用 Vue",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在-markdown-中使用-vue",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"如果只是单纯的设计使用文档，那么之前的配置已经可以满足开发诉求。但是如果希望在文档中演示 Vue 组件的功能或者演示 API 动态运行结果（例如提供输入框可供开发者输入参数进行实时计算并输出结果），此时需要使用在 Markdown 中使用 Vue 代码，例如："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"上述文档会在浏览器中进行如下展示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["当然如果在实际的开发中默认的 Webpack 配置不能满足开发诉求，那么也可以在 ",(0,s.jsx)(n.code,{children:".vuepress/config.js"})," 中进行设置，如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'module.exports = {\n  // ...\n  \n  // https://vuepress.vuejs.org/zh/config/#chainwebpack\n  chainWebpack: (config) => {\n    // 可以额外进行 Webpack 配置，使用 webpack-chain 进行链式操作\n    // 例如希望可以直接引入 public 目录下的图片，那么可以进行路径映射\n    // config.resolve.alias.set("image", path.resolve(__dirname, "public"));\n  },\n    \n  // https://vuepress.vuejs.org/zh/config/#configurewebpack\n  configureWebpack: (config, isServer) => {\n    if (!isServer) {\n      // 修改客户端的 webpack 配置\n    }\n  },\n};\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：更多关于 webpack-chain 的信息可以查看",(0,s.jsx)(n.a,{href:"https://github.com/neutrinojs/webpack-chain",target:"_blank",rel:"noopener noreferrer",children:"仓库说明"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"makdown-lint",children:["Makdown Lint",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#makdown-lint",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["通常在书写文档的时候很多同学都不注重文档的洁癖，其实书写文档和书写代码一样需要一些格式规范。",(0,s.jsx)(n.a,{href:"https://github.com/DavidAnson/markdownlint",target:"_blank",rel:"noopener noreferrer",children:"markdownlint"})," 是类似于 ESLint 的 Markdown 格式校验工具，通过它可以更好的规范我们书写的文档。当然 Markdown 的格式校验不需要像 ESLint 或者 Prettier 校验那样进行强约束，简单的能够做到提示和 Save Auto Fix 即可。"]}),"\n",(0,s.jsxs)(n.p,{children:["通过安装 Vs Code 插件\xa0",(0,s.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint",target:"_blank",rel:"noopener noreferrer",children:"markdownlint"}),"\xa0并进行 Save Auto Fix 配置（在插件中明确列出了哪些规则是可以被 Fix 的）。安装完成后查看刚刚进行的测试文件："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:"markdownlint.gif"})}),"\n",(0,s.jsxs)(n.p,{children:["此时会发现保存会自动格式化文档。VuePress 支持在 Markdown 中使用 Vue，但是 markdownlint 的默认规则不允许在文档中使用 HTML，如果需要在 VuePress 中使用 Vue，可以通过\xa0",(0,s.jsx)(n.code,{children:".markdownlint.json"}),"\xa0文件将相应的规则屏蔽掉。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// .markdownlint.json\n{\n  // no-inline-html\xa0- Inline HTML\n  "MD033": false\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：如果你希望在代码提交之前或文档构建之前能够进行 Markdown 格式校验，则可以尝试它的命令行接口 ",(0,s.jsx)(n.a,{href:"https://github.com/igorshubovych/markdownlint-cli",target:"_blank",rel:"noopener noreferrer",children:"markdownlint-cli"}),"。除此之外，如果对文档的设计没有想法或者不清楚如何书写好的技术文档，可以查看 ",(0,s.jsx)(n.a,{href:"https://juejin.im/post/5ecbdff6e51d45783e17a7a1",target:"_blank",rel:"noopener noreferrer",children:"技术文章的写作技巧分享"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"api-文档",children:["API 文档",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-文档",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"注释标准",children:["注释标准",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注释标准",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在变更日志中，我们讲解了符合 Angular 规范的提交说明可以自动生成变更日志。同理，为了可以通过工具自动生成 API 文档，首先需要了解辅助生成文档的注释标准，可以可以基于规范的注释标准自动生成 API 文档。由于本课程的框架库会采用 TypeScript 进行开发，因此首先需要了解相应的注释标准。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://tsdoc.org/",target:"_blank",rel:"noopener noreferrer",children:"TSDoc"})," 是微软提出的 TypeScript 代码注释规范，它的特点如下所示："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["专为 TypeScript 设计，同时保持 ",(0,s.jsx)(n.a,{href:"https://github.com/jsdoc/jsdoc",target:"_blank",rel:"noopener noreferrer",children:"JSDoc"})," 的兼容性"]}),"\n",(0,s.jsxs)(n.li,{children:["注释可以包含富文本元素的 ",(0,s.jsx)(n.a,{href:"https://commonmark.org/",target:"_blank",rel:"noopener noreferrer",children:"CommonMark"})," 符号，例如代码块示例、粗体、表格等"]}),"\n",(0,s.jsxs)(n.li,{children:["具备大部分 IDE 或者其它工具支持的通用标签（例如 ",(0,s.jsx)(n.code,{children:"@param"}),"、",(0,s.jsx)(n.code,{children:"@returns"}),"），兼容性高"]}),"\n",(0,s.jsx)(n.li,{children:"具备扩展性，工具可以通过扩展自定义标签来补充通用标签"}),"\n",(0,s.jsx)(n.li,{children:"保证自定义标签不会干扰其他内容的解析，并且消除了 Markdown 语法的歧义"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：JSDoc 本身还是一个 API 文档生成器，但是 TSDoc 只是一个注释标准，并没有提供 API 文档生成器，只是提供了用于解析 TSDoc 注释标准的注释信息解析器 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@microsoft/tsdoc",target:"_blank",rel:"noopener noreferrer",children:"@microsoft/tsdoc"}),"，该解析器用于制作 API 文档生成器，例如 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@microsoft/api-extractor",target:"_blank",rel:"noopener noreferrer",children:"@microsoft/api-extractor"})," 和 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@microsoft/api-documenter",target:"_blank",rel:"noopener noreferrer",children:"@microsoft/api-documenter"}),"，除此之外，它还用于 ESLint 校验，例如 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/eslint-plugin-tsdoc",target:"_blank",rel:"noopener noreferrer",children:"eslint-plugin-tsdoc"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"注释标签",children:["注释标签",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注释标签",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["TSDoc / JS Doc 通过在注释代码中使用标签来提供代码的详细信息，我们以 ",(0,s.jsx)(n.code,{children:"core.ts"})," 中的代码为例进行说明："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// TSDoc 标签说明\n// @param: https://tsdoc.org/pages/tags/param/\n// @returns: https://tsdoc.org/pages/tags/returns/\n\nexport function core(str: string) {\n  return `Hello ${str}`;\n}\n\n// 为了被 TSDoc 和 JSDoc 解析器识别，每个注释都必须以 /** 开头\n// 以 /*、/*** 或者更多 * 开头的注释都被被忽略\n\n/**\n * 返回一个根据入参拼接 Hello 前缀的字符串\n *\n * @param str - 需要拼接的字符串\n * @returns 拼接 Hello 前缀后的字符串\n */\nexport function hello(str: string) {\n  return `Hello ${str}`;\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：TSDoc 和 JSDoc 的 ",(0,s.jsx)(n.code,{children:"@param"})," 标签存在差异，在 JSDoc 中需要标注 JavaScript 的变量类型，例如 ",(0,s.jsx)(n.code,{children:"@param {string} str"}),"，而 TSDoc 主要针对 TypeScript 代码进行注释，本身已经具备变量的类型声明信息，因此不需要在注释中加入变量类型说明。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们根据 TSDoc 规范在函数 ",(0,s.jsx)(n.code,{children:"hello"})," 上进行注释，详细说明了函数的功能、入参 ",(0,s.jsx)(n.a,{href:"https://tsdoc.org/pages/tags/param/",target:"_blank",rel:"noopener noreferrer",children:"@param"})," 和返回结果 ",(0,s.jsx)(n.a,{href:"https://tsdoc.org/pages/tags/returns/",target:"_blank",rel:"noopener noreferrer",children:"@returns"})," 等信息，此时如果我们在调用函数时可以通过 VS Code 查看 API 的详细说明："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"TSDoc注释.gif"})}),"\n",(0,s.jsxs)(n.p,{children:["从上述演示可以发现，具备注释的 ",(0,s.jsx)(n.code,{children:"hello"})," 函数可以在使用时提示更加详细的信息，但是没有注释的 ",(0,s.jsx)(n.code,{children:"core"})," 则只有函数的声明信息。在 TSDoc 中标签可以分为三类，包括块标签、修饰符标签和内联标签，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// 块标签\n// 例如：@param、@returns、@example\n// 特点：块标签通常放在注释行的开头，理论上应该是当前行唯一的信息\n// 例如 @remarks，但是也有例外，例如 @example\n\n// @remarks：用于备注 API 的详细信息，例如注意事项，兼容性，历史变更原因等等\n// @param：用于说明 API 的入参信息\n// @example：用于说明 API 的使用示例\n\n/**\n * 返回一个根据入参拼接 Hello 前缀的字符串\n *\n * @remarks\n * 该方法只能传入一个参数，不支持传入多个参数\n * 参数的类型只能是字符串\n *\n * @param str - 需要拼接的字符串\n * @returns 拼接 Hello 前缀后的字符串\n *\n * @example 调用示例\n * ```ts\n * hello('ziyi');\n * ```\n */\n \n \n// 修饰符标签\n// 例如：@public、@readonly、@override、@sealed\n// 特点：修饰符标签通用用于描述 API 的特性，修饰符标签后不需要跟标签内容\n// 修饰符应该放在注释的最底部，并且多个修饰符同时存在时应该放在同一行注释上\n\n// @public 表明类中的方法是公有方法\n// @virtual 表明是一个虚接口，需要被子类实现\n// @sealed 表明子类不能重写该方法\n// @override 表明该方法覆盖了父类的同名方法\n\nabstract class Base {\n  /**\n   * @public @virtual\n   */\n  public abstract hello(str: string): string;\n\n  /**\n   * @public @sealed\n   */\n  public initialize(): void {\n    console.log(\"initialize\");\n  }\n}\n\nexport class Core extends Base {\n  /**\n   * 返回一个根据入参拼接 Hello 前缀的字符串\n   *\n   * @remarks\n   * remarks 标签用于描述更加详细的说明，\n   * 例如 API 的历史变更原因、兼容性、注意事项等等\n   *\n   * @param str - 需要拼接的字符串\n   * @returns 拼接 Hello 前缀后的字符串\n   *\n   * @override\n   */\n  hello(str: string) {\n    return `Core ${str}`;\n  }\n}\n\n\n// 内联标签\n// 例如：@link、@inheritDoc\n// 特点：内联标签总是被 { 和 } 字符包围\n\n// @link：除了可以提供 URL 链接，link 标签也可以链接到内部的某个 API 或者类\n\n/**\n * 返回一个根据入参拼接 Hello 前缀的字符串\n *\n * @remarks\n * 该方法只能传入一个参数，不支持传入多个参数\n * 参数的类型只能是字符串\n * 更多详情信息可以查看 {@link https://github.com/microsoft/tsdoc | tsdoc 文档}\n *\n * @param str - 需要拼接的字符串\n * @returns 拼接 Hello 前缀后的字符串\n *\n * @example 调用示例\n * ```ts\n * hello('ziyi');\n * ```\n */\nexport function hello(str: string) {\n  return `Hello ${str}`;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["内联标签的 ",(0,s.jsx)(n.code,{children:"@link"})," 可以使得 API 注释中的链接直接通过浏览器进行访问，如果本身已经建设好了 API 文档，并且某些 API 需要通过文档站点查看更加详细的说明信息，那么内联标签 ",(0,s.jsx)(n.code,{children:"@link"})," 会非常有用，例如："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"TSDoc内联标签.gif"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：更多关于 TSDoc 标签的使用详细说明可以查看 ",(0,s.jsx)(n.a,{href:"https://tsdoc.org/pages/tags/alpha/",target:"_blank",rel:"noopener noreferrer",children:"TSDoc / Tags"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"注释工具",children:["注释工具",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注释工具",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["为了可以快速生成 API 的注释，我们可以在 VS Code 中使用 ",(0,s.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=oouo-diogo-perdigao.docthis",target:"_blank",rel:"noopener noreferrer",children:"Document This"})," 插件，该插件可以自动为 TypeScript 和 JavaScript 生成 JSDoc 注释。由于 TSDoc 可以兼容 JSDoc 注释，因此可以使用 Document This 插件来生成 TypeScript 注释，由于 JSDoc 和 TSDoc 存在少许差异，因此我们可以通过 Document This 的配置来抹平这些差异，例如："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["使用 ",(0,s.jsx)(n.code,{children:"@param str"}),"，默认不配置会生成 ",(0,s.jsx)(n.code,{children:"@param {string} str"})]}),"\n",(0,s.jsxs)(n.li,{children:["使用 ",(0,s.jsx)(n.code,{children:"@returns"})," 代替 ",(0,s.jsx)(n.code,{children:"@return"}),"（TSDoc 和 JSDoc 中都使用 ",(0,s.jsx)(n.code,{children:"@returns"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：需要注意用户设置和工作区设置的区别，工作区只为当前项目进行配置。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["配置完成后我们需要将光标停留在需要生成注释的函数体内或者函数上方，然后通过快捷键 ",(0,s.jsx)(n.code,{children:"Ctrl+Alt+D"}),"（两遍）快速生成注释，如下所示："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"DocumentThis.gif"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：Document This 有很多配置信息，例如在注释上自动添加开发者 ",(0,s.jsx)(n.code,{children:"@author"}),"、时间 ",(0,s.jsx)(n.code,{children:"@date"}),"、描述 ",(0,s.jsx)(n.code,{children:"@description"})," 等标签信息。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"文档生成器",children:["文档生成器",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文档生成器",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当我们通过 Document This 自动生成注释并填写了符合 TSDoc 规范的注释信息后，可以通过工具来自动生成 API 文档。我们可以使用 ",(0,s.jsx)(n.a,{href:"https://github.com/TypeStrong/typedoc",target:"_blank",rel:"noopener noreferrer",children:"TypeDoc"})," 来自动生成文档，TypeDoc 能够解析所有符合 TSDoc 标准的注释，但是它不强制要求遵循该规范，除此之外，它还可以兼容 JSDoc 规范的注释项目。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：如果希望项目严格遵循 TSDoc 规范，可以使用 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@microsoft/api-extractor",target:"_blank",rel:"noopener noreferrer",children:"@microsoft/api-extractor"})," 和 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@microsoft/api-documenter",target:"_blank",rel:"noopener noreferrer",children:"@microsoft/api-documenter"})," 来生成文档。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"我们可以通过安装 TypeDoc CLI 工具来测试一下是否可以生成 API 文档："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 安装\nnpm install typedoc --save-dev\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：示例源码可以从\xa0",(0,s.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/vuepress-typedoc",target:"_blank",rel:"noopener noreferrer",children:"demo/vuepress-typedoc"}),"\xa0分支获取。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["安装完成后我们需要在 ",(0,s.jsx)(n.code,{children:"package.json"})," 中添加执行命令，如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'  "scripts": {\n    // 将自动生成的文档放入 tsdoc 目录中\n    "docs:api": "typedoc src/index.ts --out tsdoc",\n  },\n'})}),"\n",(0,s.jsxs)(n.p,{children:["此时我们可以执行命令 ",(0,s.jsx)(n.code,{children:"npm run docs:api"})," 自动生成文档，如下所示："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"TypeDoc生成.gif"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：示例源码可以从\xa0",(0,s.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/tsdoc",target:"_blank",rel:"noopener noreferrer",children:"demo/tsdoc"}),"\xa0分支获取。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["TypeDoc 可以生成 HTML 从而可以在浏览器中直接打开，如果只有 API 文档说明，那么我们可以直接通过 TypeDoc 来生成文档进行部署，但是在本课程中我们使用了 VuePress 进行文档站点生成，因此需要将 TypeDoc 生成的文档集成到 VuePress 中。TypeDoc 除了可以生成 HTML 也可以生成 Markdown，从而生成可以被 VuePress 消费的文档，为此我们可以使用 ",(0,s.jsx)(n.a,{href:"https://github.com/tgreyuk/typedoc-plugin-markdown/tree/master/packages/typedoc-plugin-markdown#typedoc-plugin-markdown",target:"_blank",rel:"noopener noreferrer",children:"typedoc-plugin-markdown"})," 插件来实现。安装插件，在 ",(0,s.jsx)(n.code,{children:"package.json"})," 中进行如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"scripts": {\n    "docs:api": "typedoc --plugin typedoc-plugin-markdown --hideBreadcrumbs --hideInPageTOC --out docs/api src/index.ts",\n    "docs:dev": "npm run changelog && npm run docs:api && vuepress dev docs",\n    "docs:build": "npm run changelog && npm run docs:api && vuepress build docs"\n  },\n'})}),"\n",(0,s.jsxs)(n.p,{children:["其中 ",(0,s.jsx)(n.code,{children:"--hideBreadcrumbs"})," 和 ",(0,s.jsx)(n.code,{children:"--hideInPageTOC"})," 需要视情况而定，在本文中为了简洁，去除了面包屑和 TOC 展示。执行 ",(0,s.jsx)(n.code,{children:"npm run docs:api"})," 后默认会在 ",(0,s.jsx)(n.code,{children:"docs/api"})," 目录下生成 Markdown 文档："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 执行\nnpm run docs:api\n\n# 打印\n> micro-framework@1.0.6 docs:api\n> typedoc --plugin typedoc-plugin-markdown --hideBreadcrumbs --hideInPageTOC --out docs/api src/index.ts\n\n[info] Loaded plugin typedoc-plugin-markdown\n[info] Documentation generated at ./docs/api\n"})}),"\n",(0,s.jsxs)(n.p,{children:["此时我们需要配置 API 文档的访问链接，在 ",(0,s.jsx)(n.code,{children:".vuepress/config.js"})," 中进行如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'\nmodule.exports = {\n \n  themeConfig: {\n    nav: [\n      { text: "开发指南", link: "/guide/introduction" },\n      // 新增 API 文档链接\n      { text: "API", link: "/api/modules" },\n      { text: "变更日志", link: "/changelog.html" },\n      {\n        text: "v2.x",\n        items: [\n          { text: "v1.x", link: "https://xxx/1" },\n          { text: "v0.x", link: "https://xxx/0" },\n        ],\n      },\n      { text: "Github", link: "https://github.com/ziyi2/micro-framework" },\n    ],\n\n  // ...\n};\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"此时重新启动 VuePress 服务后就可以访问 API 文档了，具体如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"VuePressAPI.gif"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：感兴趣的同学可以使用 ",(0,s.jsx)(n.a,{href:"https://github.com/tgreyuk/typedoc-plugin-markdown/tree/master/packages/vuepress-plugin-typedoc#vuepress-plugin-typedoc",target:"_blank",rel:"noopener noreferrer",children:"vuepress-plugin-typedoc"})," 来尝试集成 TypeDoc 文档。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"文档部署",children:["文档部署",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文档部署",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["VuePress 文档设计完成后，我们可以通过 Github 来 ",(0,s.jsx)(n.a,{href:"https://docs.github.com/zh/pages",target:"_blank",rel:"noopener noreferrer",children:"托管和发布"})," VuePress 网页。为了和主项目的代码区分开，我们可以使用新的分支来单独托管文档产物（这样可以将源代码和文档区分开），首先我们创建一个 ",(0,s.jsx)(n.code,{children:"gh-pages"})," 分支，其次我们将 VuePress 构建后的产物放入该分支进行提交："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"然后进行项目的设置页面，设置 Pages 托管的分支和目录："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["托管成功后，可以通过 ",(0,s.jsx)(n.a,{href:"https://ziyi2.github.io/micro-framework/",target:"_blank",rel:"noopener noreferrer",children:"https://ziyi2.github.io/micro-framework/"})," 进行访问："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：这里为了演示如何使用 Github 进行网页托管，采用手动执行的方式进行网页托管操作。在下一个课程中会重点讲解如何利用 CI / CD 自动进行网页托管。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"小节",children:["小节",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小节",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本课程讲解了如何使用 VuePress 静态网站生成器来设计框架库的文档站点，详细讲解了 VuePress 的配置以及如何利用 TSDoc 注释规范来自动生成 API 文档。在下一个课程中，我们会将之前所有的工程化配置通过 CI / CD 的形式进行自动执行、部署和发布操作。"})]})}function _(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(D,{...e})}):D(e)}let T=_;_.__RSPRESS_PAGE_META={},_.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F36.%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%96%87%E6%A1%A3%E8%AE%BE%E8%AE%A1.md"]={toc:[{text:"静态网站生成器",id:"静态网站生成器",depth:2},{text:"快速生成文档",id:"快速生成文档",depth:3},{text:"导航栏配置",id:"导航栏配置",depth:3},{text:"侧边栏配置",id:"侧边栏配置",depth:3},{text:"插件配置",id:"插件配置",depth:3},{text:"在 Markdown 中使用 Vue",id:"在-markdown-中使用-vue",depth:3},{text:"Makdown Lint",id:"makdown-lint",depth:2},{text:"API 文档",id:"api-文档",depth:2},{text:"注释标准",id:"注释标准",depth:3},{text:"注释标签",id:"注释标签",depth:3},{text:"注释工具",id:"注释工具",depth:2},{text:"文档生成器",id:"文档生成器",depth:2},{text:"文档部署",id:"文档部署",depth:2},{text:"小节",id:"小节",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);