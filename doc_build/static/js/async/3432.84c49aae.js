"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["3432"],{607460:function(n,e,s){n.exports=s.p+"static/image/04d5d837375548045e24dc0e4c728c5d.8b56b755.webp"},205925:function(n,e,s){n.exports=s.p+"static/image/1c0f0a22ca4116981b044b5fde2fccce.b10c6240.webp"},310049:function(n,e,s){n.exports=s.p+"static/image/337cdf300930740aa2edc476c447f068.1110650a.webp"},642029:function(n,e,s){n.exports=s.p+"static/image/439bcfef75d79bbccc88d12df36853f3.a9631bf2.webp"},718244:function(n,e,s){n.exports=s.p+"static/image/4edfdbf42217bea6b9967a126eb5e105.9fa5f978.webp"},685304:function(n,e,s){n.exports=s.p+"static/image/86c050c2c4c190f647ba05a80f065c46.c14f26ff.gif"},9115:function(n,e,s){n.exports=s.p+"static/image/8e45e8a333164a30bbe52e6abe9ac4ca.e2fa88c9.webp"},729680:function(n,e,s){n.exports=s.p+"static/image/a0a77072f30e1be07f894ed9e9e2229b.9173293d.webp"},32526:function(n,e,s){n.exports=s.p+"static/image/ab2a98ed778664eebacf9cf83d5d07a6.f4a8d74e.webp"},43174:function(n,e,s){n.exports=s.p+"static/image/b0d09aaf17894c517fe81e2a28e09ef5.1415a929.webp"},971395:function(n,e,s){n.exports=s.p+"static/image/be67b5293f2ae1cb885a1c631b51b999.a19f1db3.webp"},712154:function(n,e,s){n.exports=s.p+"static/image/ecef596a735554315310a07cb95e4b6e.d71a06ca.webp"},71551:function(n,e,s){n.exports=s.p+"static/image/f50e7b8202d024b7c947a50879c40ed4.1316b5de.webp"},492633:function(n,e,s){s.r(e),s.d(e,{default:()=>U});var r=s(552676),a=s(740453),t=s(205925);let i=s.p+"static/image/ee40c5e6bcdc4302b7c56ca4219a687b.cd9892ac.webp",c=s.p+"static/image/afd816ef7cabb3260f78396124468f42.3456e4b5.webp",o=s.p+"static/image/db140e1be789e2cfe11d32d082abe1ed.f72bb5e7.gif",l=s.p+"static/image/529629198d6bc1f4e8853fbcc416965d.0ee2b463.webp",d=s.p+"static/image/c3b4a5ae47d006347c2023ac265f6572.34f54e72.gif";var p=s(971395),m=s(718244);let h=s.p+"static/image/3eaa0e711f13798945717fe4ea761400.076c80c8.webp";var x=s(43174);let u=s.p+"static/image/79cc7bee6e511e9b6987421d8326b062.18b9b98e.webp";var g=s(9115);let j=s.p+"static/image/89cde24832e30488ed2e12888570a21e.3c912356.gif",f=s.p+"static/image/6a929be942f6825b6d54a0c8186a4d30.5b3097ad.gif",b=s.p+"static/image/a90f26ebf37382a95f2db2d5160cdaf0.a02e1ea9.webp",v=s.p+"static/image/338a9ca9d9ea606a775e6e9a8caaed3f.b4732446.webp",w=s.p+"static/image/32168b046b42022bd663902d0f405f9e.aac4b30b.webp",y=s.p+"static/image/87f1d3c4e9ade1f5a46165f73cac98f6.9342076e.webp";var F=s(607460),I=s(310049),k=s(642029),R=s(729680),E=s(71551),N=s(685304),B=s(712154),P=s(32526);let L=s.p+"static/image/14d029db113da7c718dc47d6115d8511.94166549.webp";function A(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"182-聊天室登录注册页面开发",children:["182. 聊天室：登录、注册页面开发",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#182-聊天室登录注册页面开发",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"先不着急开发聊天功能，我们先来写一下前端页面。"}),"\n",(0,r.jsxs)(e.p,{children:["先来写下用户注册、登录这两个：\n",(0,r.jsx)(e.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92544eb78f6d416faeca213b2a74b637~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1656&h=1184&s=70208&e=png&b=ffffff",alt:""})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bad2a2f6ff742cb9f96eabd32062fe4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1592&h=1002&s=52642&e=png&b=ffffff",alt:""})}),"\n",(0,r.jsx)(e.p,{children:"新建个 react 项目："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npx create-vite chat-room-frontend\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"进入项目目录，把开发服务跑起来："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install\nnpm run dev\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["浏览器访问 ",(0,r.jsx)(e.a,{href:"http://localhost:5173",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:5173"})," 可以看到这个界面："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"就说明 react 项目成功跑起来了。"}),"\n",(0,r.jsx)(e.p,{children:"然后我们添加 router："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install --save react-router-dom\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 main.tsx 加上路由的配置："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import ReactDOM from \'react-dom/client\';\nimport { RouterProvider, createBrowserRouter, Link, Outlet } from \'react-router-dom\';\n\nfunction Aaa() {\n  return <div>aaa</div>;\n}\n\nfunction Bbb(){\n  return <div>bbb</div>;\n}\n\nfunction Layout() {\n  return <div>\n    <div><Link to="/aaa">to aaa</Link></div>\n    <div><Link to="/bbb">to bbb</Link></div>\n    <div>\n      <Outlet/>\n    </div>\n  </div>\n}\n\nconst routes = [\n  {\n    path: "/",\n    element: <Layout/>,\n    children: [\n      {\n        path: "aaa",\n        element: <Aaa />,\n      },\n      {\n        path: "bbb",\n        element: <Bbb />,\n      }    \n    ],\n  }\n];\nconst router = createBrowserRouter(routes);\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\'root\') as HTMLElement\n);\n\nroot.render(<RouterProvider router={router}/>);\n'})}),"\n",(0,r.jsx)(e.p,{children:"配置了 3 个路由："}),"\n",(0,r.jsx)(e.p,{children:"访问 / 的时候，渲染 Layout 组件。"}),"\n",(0,r.jsx)(e.p,{children:"访问 /aaa 的时候，渲染 Aaa 组件。"}),"\n",(0,r.jsx)(e.p,{children:"访问 /bbb 的时候，渲染 Bbb 组件。"}),"\n",(0,r.jsx)(e.p,{children:"以及出错的时候，渲染 ErrorPage 组件。"}),"\n",(0,r.jsx)(e.p,{children:"其中，aaa 和 bbb 是 / 的子路由，渲染在 Layout 组件的 Outlet 的地方。"}),"\n",(0,r.jsx)(e.p,{children:"这就是 React Router 的基本用法。"}),"\n",(0,r.jsx)(e.p,{children:"测试下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"都没问题。"}),"\n",(0,r.jsx)(e.p,{children:"然后创建 3 个组件：Login、Register、UpdatePassword"}),"\n",(0,r.jsx)(e.p,{children:"pages/Login/index.tsx"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"export function Login() {\n    return <div>login</div>   \n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"pages/Register/index.tsx"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"export function Register() {\n    return <div>register</div>\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"pages/UpdatePassword/index.tsx"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"export function UpdatePassword() {\n    return <div>UpdatePassword</div>\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"改下 index.tsx 配置对应的路由："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import ReactDOM from 'react-dom/client';\nimport { RouterProvider, createBrowserRouter } from 'react-router-dom';\nimport { Register } from './pages/Register';\nimport { Login } from './pages/Login';\nimport { UpdatePassword } from './pages/UpdatePassword';\n\nconst routes = [\n  {\n    path: \"/\",\n    element: <div>index</div>,\n  },\n  {\n    path: \"login\",\n    element: <Login />,\n  },\n  {\n    path: \"register\",\n    element: <Register />,\n  },\n  {\n    path: \"update_password\",\n    element: <UpdatePassword />,\n  }\n];\nconst router = createBrowserRouter(routes);\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(<RouterProvider router={router}/>);\n"})}),"\n",(0,r.jsx)(e.p,{children:"测试下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:I,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"都没啥问题。"}),"\n",(0,r.jsx)(e.p,{children:"然后来写 Login 页面，也就是这个："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bad2a2f6ff742cb9f96eabd32062fe4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1592&h=1002&s=52642&e=png&b=ffffff",alt:""})}),"\n",(0,r.jsx)(e.p,{children:"引入 Ant Design 组件库："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install antd --save\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 Login 组件引入 DatePicker 组件："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import { DatePicker } from "antd";\n\nexport function Login() {\n    return <div><DatePicker/></div>   \n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题，说明 antd 引入成功了。"}),"\n",(0,r.jsx)(e.p,{children:"然后我们把登录页面写一下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Button, Checkbox, Form, Input } from 'antd';\nimport './index.css';\n\ninterface LoginUser {\n    username: string;\n    password: string;\n}\n\nconst onFinish = (values: LoginUser) => {\n    console.log(values);\n};\n\n\nconst layout1 = {\n    labelCol: { span: 4 },\n    wrapperCol: { span: 20 }\n}\n\nconst layout2 = {\n    labelCol: { span: 0 },\n    wrapperCol: { span: 24 }\n}\n\nexport function Login() {\n    return <div id=\"login-container\">\n        <h1>聊天室</h1>\n        <Form\n            {...layout1}\n            onFinish={onFinish}\n            colon={false}\n            autoComplete=\"off\"\n        >\n            <Form.Item\n                label=\"用户名\"\n                name=\"username\"\n                rules={[{ required: true, message: '请输入用户名!' }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label=\"密码\"\n                name=\"password\"\n                rules={[{ required: true, message: '请输入密码!' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                {...layout2}\n            >\n                <div className='links'>\n                    <a href='/register'>创建账号</a>\n                    <a href='/update_password'>忘记密码</a>\n                </div>\n            </Form.Item>\n\n            <Form.Item\n                {...layout2}\n            >\n                <Button className='btn' type=\"primary\" htmlType=\"submit\">\n                    登录\n                </Button>\n            </Form.Item>\n        </Form>\n    </div>   \n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"其中，layout 是 label 和 wrapper 的比例分配，antd 的栅格系统一共分了 24 份。"}),"\n",(0,r.jsx)(e.p,{children:"上面两个 Form.Item 是 label 4 份，wrapper 20 份。"}),"\n",(0,r.jsx)(e.p,{children:"下面两个 Form.Item 是 label 0 份，wrapper 24 份。"}),"\n",(0,r.jsx)(e.p,{children:"colon 为 false 是去掉 label 后的冒号"}),"\n",(0,r.jsx)(e.p,{children:"然后 css 部分如下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:"#login-container {\n    width: 400px;\n    margin: 100px auto 0 auto;\n    text-align: center;\n}\n#login-container .links {\n    display: flex;\n    justify-content: space-between;\n}\n#login-container .btn {\n    width: 100%;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"访问 /login，可以看到现在的登录页面："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"输入用户名、密码，点击登录："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"控制台打印了拿到的表单值。"}),"\n",(0,r.jsx)(e.p,{children:"我们在前端项目安装下 axios："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install --save axios\n"})}),"\n",(0,r.jsx)(e.p,{children:"我们把后端服务端口改为 3005，并且开启跨域："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后把后端项目跑起来："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"在前端项目创建个 interfaces/index.ts"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import axios from \"axios\";\n\nconst axiosInstance = axios.create({\n    baseURL: 'http://localhost:3005/',\n    timeout: 3000\n});\n\nexport async function login(username: string, password: string) {\n    return await axiosInstance.post('/user/login', {\n        username, password\n    });\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"在这里集中管理接口。"}),"\n",(0,r.jsx)(e.p,{children:"然后在 Login 组件 onFinish 里调用："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const onFinish = async (values: LoginUser) => {\n    try {\n        const res = await login(values.username, values.password);\n        if(res.status === 201 || res.status === 200) {\n            message.success('登录成功');\n\n            console.log(res.data);\n        } \n    } catch(e: any){\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:"登录下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后完善下 onFinish 方法："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const onFinish = async (values: LoginUser) => {\n    try {\n        const res = await login(values.username, values.password);\n        if(res.status === 201 || res.status === 200) {\n            message.success('登录成功');\n\n            localStorage.setItem('token', res.data.token);\n            localStorage.setItem('userInfo', JSON.stringify(res.data.user));\n        } \n    } catch(e: any){\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:"返回 success 的时候，把 token 和 userInfo 存入 localStorage"}),"\n",(0,r.jsx)(e.p,{children:"测试下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这样，登录的前后端功能就都完成了。"}),"\n",(0,r.jsx)(e.p,{children:"然后来写下注册："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92544eb78f6d416faeca213b2a74b637~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1656&h=1184&s=70208&e=png&b=ffffff",alt:""})}),"\n",(0,r.jsx)(e.p,{children:"实现下 Register 页面组件："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import { Button, Form, Input, message } from \'antd\';\nimport \'./index.css\';\nimport { useForm } from \'antd/es/form/Form\';\n\nexport interface RegisterUser {\n    username: string;\n    nickName: string;\n    password: string;\n    confirmPassword: string;\n    email: string;\n    captcha: string;\n}\n\nconst onFinish = async (values: RegisterUser) => {\n    console.log(values);\n};\n\n\nconst layout1 = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\n\nconst layout2 = {\n    labelCol: { span: 0 },\n    wrapperCol: { span: 24 }\n}\n\nexport function Register() {\n    const [form] = useForm();\n\n    return <div id="register-container">\n        <h1>聊天室</h1>\n        <Form\n            form={form}\n            {...layout1}\n            onFinish={onFinish}\n            colon={false}\n            autoComplete="off"\n        >\n            <Form.Item\n                label="用户名"\n                name="username"\n                rules={[{ required: true, message: \'请输入用户名!\' }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label="昵称"\n                name="nickName"\n                rules={[{ required: true, message: \'请输入昵称!\' }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label="密码"\n                name="password"\n                rules={[{ required: true, message: \'请输入密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                label="确认密码"\n                name="confirmPassword"\n                rules={[{ required: true, message: \'请输入确认密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                label="邮箱"\n                name="email"\n                rules={[\n                    { required: true, message: \'请输入邮箱!\' },\n                    { type: "email", message: \'请输入合法邮箱地址!\'}\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <div className=\'captcha-wrapper\'>\n                <Form.Item\n                    label="验证码"\n                    name="captcha"\n                    rules={[{ required: true, message: \'请输入验证码!\' }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Button type="primary">发送验证码</Button>\n            </div>\n\n            <Form.Item\n                {...layout2}\n            >\n                <div className=\'links\'>\n                    已有账号？去<a href=\'/login\'>登录</a>\n                </div>\n            </Form.Item>\n\n            <Form.Item\n                {...layout1}\n                label=" "\n            >\n                <Button className=\'btn\' type="primary" htmlType="submit">\n                    注册\n                </Button>\n            </Form.Item>\n        </Form>\n    </div>   \n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"和登录页面差不多，只不过多了一个验证码。"}),"\n",(0,r.jsx)(e.p,{children:"对应的 register.css 如下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:"#register-container {\n    width: 400px;\n    margin: 100px auto 0 auto;\n    text-align: center;\n}\n#register-container .links {\n    display: flex;\n    justify-content: flex-end;\n}\n#register-container .btn {\n    width: 100%;\n}\n#register-container .captcha-wrapper {\n    display: flex;\n    justify-content: flex-end;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"浏览器访问下"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"填入信息，点击注册，控制台会打印表单值："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后来调用下注册接口和发送验证码的接口。"}),"\n",(0,r.jsx)(e.p,{children:"在 interfaces 里添加这两个接口："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"export async function registerCaptcha(email: string) {\n    return await axiosInstance.get('/user/register-captcha', {\n        params: {\n            address: email\n        }\n    });\n}\n\nexport async function register(registerUser: RegisterUser) {\n    return await axiosInstance.post('/user/register', registerUser);\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"先调用发送验证码接口："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"绑定点击事件。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"使用 useForm 来拿到 form 的 api"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"async function sendCaptcha() {\n    const address = form.getFieldValue('email');\n    if(!address) {\n        return message.error('请输入邮箱地址');\n    }\n\n    try {\n        const res = await registerCaptcha(address);\n        if(res.status === 201 || res.status === 200) {\n            message.success('发送成功');\n        }\n    } catch(e: any) {\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 sendCaptcha 里调用接口发送验证码。"}),"\n",(0,r.jsx)(e.p,{children:"测试下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(e.p,{children:"然后再来调用注册接口："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const onFinish = async (values: RegisterUser) => {\n    if(values.password !== values.confirmPassword) {\n        return message.error('两次密码不一致');\n    }\n    const res = await register(values);\n\n    if(res.status === 201 || res.status === 200) {\n        message.success('注册成功');\n\n    } else {\n        message.error(res.data.data || '系统繁忙，请稍后再试');\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"测试下："}),"\n",(0,r.jsx)(e.p,{children:"填入信息，点击发送验证码："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"去邮箱里看一下验证码："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"填入验证码，点击注册："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"注册成功，数据库里也看到了这条记录："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这样，注册的前后端流程就走完了。"}),"\n",(0,r.jsx)(e.p,{children:"然后调用 useNavigate 的 navigate 方法，注册成功后导航到登录页："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const onFinish = async (values: RegisterUser) => {\n    if(values.password !== values.confirmPassword) {\n        return message.error('两次密码不一致');\n    }\n    try {\n    const res = await register(values);\n\n    if(res.status === 201 || res.status === 200) {\n        message.success('注册成功');\n        setTimeout(() => {\n            navigate('/login');\n        }, 1000);\n    } \n    } catch(e: any) {\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"同理，login 成功也要加上跳转逻辑："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这样，登录和注册的前后端功能就都完成了。"}),"\n",(0,r.jsx)(e.p,{children:"案例代码在小册仓库："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-frontend",target:"_blank",rel:"noopener noreferrer",children:"前端代码"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-backend",target:"_blank",rel:"noopener noreferrer",children:"后端代码"})}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"这节我们打通了前后端，加上了登录、注册、首页等页面。"}),"\n",(0,r.jsx)(e.p,{children:"首先，引入了 React Router 来做路由，引入了 antd 来做 UI 组件库。"}),"\n",(0,r.jsx)(e.p,{children:"然后，引入了 axios 来发请求。"}),"\n",(0,r.jsx)(e.p,{children:"发送邮件验证码正常，注册之后数据库也多了记录，登录成功之后 localStorage 也有了用户信息。"}),"\n",(0,r.jsx)(e.p,{children:"这样，注册登录就实现了完整的前后端功能。"})]})}function C(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(A,{...n})}):A(n)}let U=C;C.__RSPRESS_PAGE_META={},C.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F182.%20%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%9A%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"182. 聊天室：登录、注册页面开发",headingTitle:"182. 聊天室：登录、注册页面开发",frontmatter:{}}}}]);