"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["3466"],{131455:function(e,n,s){s.r(n),s.d(n,{default:()=>c});var r=s(552676),a=s(740453);function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",h4:"h4",code:"code",pre:"pre",strong:"strong",ul:"ul",li:"li",br:"br",blockquote:"blockquote"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"91订阅消息",children:["91.订阅消息",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#91订阅消息",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"136-订阅消息",children:["13.6 订阅消息",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#136-订阅消息",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"订阅消息是小程序能力中的重要组成，当用户自主订阅之后，可以向用户以服务通知的方式发送消息的能力，当用户点击订阅消息卡片可以跳转到小程序的页面，这样就可以实现服务的闭环和更优的体验，提高活跃度和用户粘性。"}),"\n",(0,r.jsxs)(n.h3,{id:"1361-获取订阅消息授权",children:["13.6.1 获取订阅消息授权",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1361-获取订阅消息授权",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1小程序端获取订阅消息授权次数",children:["1、小程序端获取订阅消息授权次数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1小程序端获取订阅消息授权次数",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["要获取订阅消息授权，首先要调用接口wx.requestSubscribeMessage，这个接口会调起小程序订阅消息界面，返回用户订阅消息的操作结果。注意这个接口只能在小程序端使用tap点击或支付完成后触发。如果是使用页面加载或其他非用户点击类的事件来调用这个接口，就会报",(0,r.jsx)(n.code,{children:"requestSubscribeMessage:fail can only be invoked by user TAP gesture"}),"的错误。"]}),"\n",(0,r.jsx)(n.p,{children:"要调用wx.requestSubscribeMessage，需要我们首先要有订阅消息的模板ID，一次性模板 id 和永久模板 id 不可同时使用，基础库2.8.4之后一次性可以调起3个模板ID（不能多于3个）。"}),"\n",(0,r.jsx)(n.p,{children:"使用开发者工具新建一个页面，如subscribe，然后在subscribe.wxml里输入以下代码，我们通过点击tap来触发事件处理函数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<button bindtap="subscribeMessage">订阅订阅消息</button>\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后再在subscribe.js里输入以下代码，我们在事件处理函数subscribeMessage里调用wx.requestSubscribeMessage接口："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'subscribeMessage() {\n  wx.requestSubscribeMessage({\n    tmplIds: [\n      "qY7MhvZOnL0QsRzK_C7FFsXTT7Kz0-knXMwkF1ewY44",//模板\n      "RCg8DiM_y1erbOXR9DzW_jKs-qSSJ9KF0h8lbKKmoFU",\n      "EGKyfjAO2-mrlJQ1u6H9mZS8QquxutBux1QbnfDDtj0"\n    ],\n    success(res) {\n      console.log("订阅消息API调用成功：",res)\n    },\n    fail(res) {\n      console.log("订阅消息API调用失败：",res)\n    }\n  })\n},\n'})}),"\n",(0,r.jsxs)(n.p,{children:["建议大家在手机上进行",(0,r.jsx)(n.strong,{children:"真机调试"}),"这个接口，点击订阅消息button，就能弹出授权弹窗。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["当用户点击“允许”就会累积一次授权，如果点击N次允许就能累积N次授权，这个授权是长期的，没有时间限制，你可以在一天内发完N次授权，也可以在未来分批次发完；也就是说这个虽然是一次性订阅消息，但是只要用户授权了N次，我们在短时间就可以发N次，而不是只能发一次；累积了多少次就可以发送多少次。发送一次就会消耗一次，累积的授权次数被消耗完之后，还继续发，就会报错",(0,r.jsx)(n.code,{children:'"errcode":"43101","errmsg":"user refuse to accept the msg hint..."'}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["当用户勾选了订阅面板中的“总是保持以上选择，不再询问”时，且允许或拒绝之后，",(0,r.jsx)(n.strong,{children:"订阅消息的授权弹窗则永远不会再弹出"}),"，订阅消息也会被添加到用户的小程序设置页，我们可以通过 ",(0,r.jsx)(n.strong,{children:"wx.getSetting"})," 接口可获取用户对相关模板消息的订阅状态。wx.getSetting的withSubscriptions可以获取用户订阅消息的订阅状态，当然",(0,r.jsx)(n.strong,{children:"只能返回"}),"用户勾选过订阅面板中的“总是保持以上选择，不再询问”的订阅消息。"]}),"\n",(0,r.jsxs)(n.li,{children:["如果用户勾选了总是允许，那由于用户点击按钮都不会弹出授权弹窗，用户点击了授权按钮仍然会累积授权，起到一个静默收集授权次数的效果。也就是说，如果你通过wx.getSetting的withSubscriptions获取到用户对某条模板消息勾选了“总是保持以上选择，不再询问”，那你可以",(0,r.jsx)(n.strong,{children:"设置一个静默收集用户授权次数的button"}),"，用户不会弹出授权弹窗，但是会累积授权次数。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"注意该接口调用成功之后返回的对象，[TEMPLATE_ID]是动态的键，即模板id，值包括'accept'、'reject'、'ban'。'accept'表示用户同意订阅该条id对应的模板消息，'reject'表示用户拒绝订阅该条id对应的模板消息，'ban'表示已被后台封禁，如下所示（以下值仅为案例）："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{errMsg: "requestSubscribeMessage:ok", RCg8DiM_y1erbOXR9DzW_jKs-qSSJ9KF0h8lbKKmoFU: "accept", qY7MhvZOnL0QsRzK_C7FFsXTT7Kz0-knXMwkF1ewY44: "reject", EGKyfjAO2-mrlJQ1u6H9mZS8QquxutBux1QbnfDDtj0: "accept"}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"订阅消息的累积次数决定了我们是否可以给用户发送订阅消息，也决定了可以发送几次"}),"，因此记录用户给某个模板ID授权了多少次这个也就显得很重要了，比如我们可以结合接口返回的res对象和inc原子自增在数据库里记录订阅次数，当发送一次也会消耗一次，再用inc自减："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'  subscribeMessage() {\n    const tmplIds= [\n      "qY7MhvZOnL0QsRzK_C7FFsXTT7Kz0-knXMwkF1ewY44",\n      "RCg8DiM_y1erbOXR9DzW_jKs-qSSJ9KF0h8lbKKmoFU",\n      "EGKyfjAO2-mrlJQ1u6H9mZS8QquxutBux1QbnfDDtj0"\n    ];\n    wx.requestSubscribeMessage({\n      tmplIds:tmplIds,\n      success(res) {\n        console.log("订阅消息API调用成功：",res)    \n        tmplIds.map(function(item,index){\n          if(res[item] === "accept"){\n            console.log("该模板ID用户同意了",item)\n            //可以使用原子自增操作符inc往数据库里某个记录授权次数的字段+1\n          }\n        })\n      },\n      fail(res) {\n        console.log("订阅消息API调用失败：",res)\n      }\n    })\n  },\n'})}),"\n",(0,r.jsx)(n.p,{children:"wx.requestSubscribeMessage的参数tmplIds是数组可以容纳3个模板ID，当用户点击授权弹窗，三个模板ID都是默认勾选的，只要用户点击允许，就会同时给三个模板ID累积次数；如果用户取消勾选了其中一个模板ID，并点击总是允许，那另外两个勾选的模板ID将不会再有授权弹窗。"}),"\n",(0,r.jsxs)(n.h4,{id:"2订阅消息授权与次数累积实践",children:["2、订阅消息授权与次数累积实践",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2订阅消息授权与次数累积实践",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"订阅消息最核心的在于用户的授权与授权次数，也就是你在写订阅消息代码时或在发送订阅消息之前，最好是先用数据库记录用户是否已经授权以及授权的次数，关于订阅消息的授权次数的累积需要再说明的是："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"只能在小程序端"}),"通过调用wx.requestSubscribeMessage来进行授权以及累积授权次数，wx.requestSubscribeMessage也不能写在云函数端；"]}),"\n",(0,r.jsxs)(n.li,{children:["只能记录和累积",(0,r.jsx)(n.strong,{children:"当前用户"}),"的授权与授权次数，这个要注意分清楚，比如我们希望学生点击之后通知老师、老师点击之后通知学生，这个前提始终是",(0,r.jsx)(n.strong,{children:"你要通知谁，谁必须有授权或授权次数才能通知；通知谁就会消耗谁的授权次数"}),"。比如要做到学生完成作业点击按钮就可以通知老师，此时学生不必有授权次数，老师必须有，而订阅消息的通知则需要在云函数端进行；"]}),"\n",(0,r.jsxs)(n.li,{children:["授权次数",(0,r.jsx)(n.strong,{children:"只能增不能减"}),"，如果你想实现用户订阅了订阅消息之后（使用的是wx.requestSubscribeMessage接口），又取消了该订阅消息的通知（不需要使用wx.requestSubscribeMessage接口），你可以在数据库里记录，不再发消息给用户，但是用户的授权次数并没有减少。所以取消订阅我们可以使用布尔型字段，而授权次数我们可以使用整数方便原子操作。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"订阅消息的种类很多，比如有的订阅消息用户接收一次之后就不会再接收，这时我们侧重于记录订阅消息是否被用户同意就可以了；但是有的订阅消息记录用户授权的次数有利于我们可以更好的为用户服务，比如日报、周报、活动消息等一些与用户交互比较频繁的信息。在前面我们已经多次强调了云数据库的原子操作，这里再以订阅消息次数累积的增加（授权只能增加）为例，来看原子操作是如何处理的。"}),"\n",(0,r.jsx)(n.p,{children:"使用云开发控制台新建一个messages集合，messages集合的记录结构如下所示，在设计上我们把同一个用户多个不同类型的订阅消息内嵌到一个数组templs里面。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'_id:""  //可以直接为用户的openid，这样我们可以使用db.collection(\'messages\').doc(openid)来处理；不过我们的案例的_id不是openid\n_openid:""  //云开发自动生成的openid\ntempls:[{  //把用户授权过的模板列表都记录在这里\n  templateId:"qY7MhvZOnL0QsRzK_C7FFsXTT7Kz0-knXMwkF1ewY44",//订阅\n  page:"",  \n  data:{},             //订阅消息内容对象，建议内嵌到里面，免得查两次\n  status:1,            //用户对该条模板消息是否接受\'accept\'、\'reject\'、\'ban\'，\n  subStyle:"daily",   //订阅类型，比如是每天daily，还是每周weekly\n  done:false,         //本次是否发送了\n  subNum:22,          //该条订阅消息用户授权累积的次数；  \n},{\n}]\n'})}),"\n",(0,r.jsx)(n.p,{children:"下面是用户在小程序端点击订阅消息之后的完整代码，记录不同的订阅消息被用户点击之后，次数的累积。代码没有记录用户是否拒绝reject，如果业务上有需要也是可以记录的，不过拒绝不存在累积次数的问题。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'subscribeMessage() {\n  const that = this\n  //模板ID建议放置在数据库中，便于以后修改\n  const tmplIds= [\n    "qY7MhvZOnL0QsRzK_C7FFsXTT7Kz0-knXMwkF1ewY44",\n    "RCg8DiM_y1erbOXR9DzW_jKs-qSSJ9KF0h8lbKKmoFU",\n    "EGKyfjAO2-mrlJQ1u6H9mZS8QquxutBux1QbnfDDtj0"\n  ];\n  wx.requestSubscribeMessage({\n    tmplIds:tmplIds,\n    success: res => {\n      console.log("订阅消息API调用成功：",res)\n      that.addMessages().then( id =>{\n        tmplIds.map(function(item,index){\n          if(res[item] === "accept"){\n            console.log("该模板ID用户同意了",item)  \n            that.subscribeNum(item,id)\n          }\n        })\n      })     \n\n    },\n    fail(res) {\n      console.log("订阅消息API调用失败：",res)\n    }\n  })\n},\n\nasync addMessages(){\n  //查询用户订阅过的订阅消息，只会有一条记录，所以没有limit等限制\n  const messages = await db.collection(\'messages\').where({\n    _openid:\'{openid}\'\n  }).get()  \n\n  //如果用户没有订阅过订阅消息，就创建一条记录\n  if(messages.data.length == 0){  \n    var newMsg = await db.collection(\'messages\').add({\n      data:{\n        templs:[]\n      }\n    })\n  } \n  var id = messages.data[0] ? messages.data[0]._id : newMsg._id  \n  return id\n},\n\nasync subscribeNum(item,id){\n  //注意传入的item是遍历，id为addMessages的id\n  const subs = await db.collection(\'messages\').where({  \n    _openid:\'{openid}\',\n    "templs":_.elemMatch({\n      templateId:item\n    })\n  }).get()\n  \n  console.log(\'用户订阅列表\',subs)\n  //如果用户之前没有订阅过订阅消息就创建一个订阅消息的记录\n  if(subs.data.length == 0){  \n    db.collection(\'messages\').doc(id).update({\n      data: {\n        templs:_.push({\n          each:[{templateId:item,//订阅\n            page:"",  \n            data:{},            \n            status:1,           \n            subStyle:"daily", \n            done:false,         \n            subNum:1}],\n          position:2                  \n        })\n      }\n    })    \n  }else{\n    db.collection(\'messages\').where({\n      _id:id,\n      "templs.templateId":item\n    })      \n    .update({\n      data:{\n        "templs.$.subNum":_.inc(1)\n      }\n    })\n  }       \n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这里的",(0,r.jsx)(n.code,{children:'"templs.$.subNum":_.inc(1)'}),"就是当用于同意哪条订阅消息，就会给该订阅消息的授权次数进行原子加1。"]}),"\n",(0,r.jsxs)(n.h3,{id:"1332-发送订阅消息方式说明",children:["13.3.2 发送订阅消息方式说明",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1332-发送订阅消息方式说明",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"当我们在小程序端累积了某个模板ID的授权次数之后，就可以通过云函数来调用subscribeMessage.send接口发送订阅消息了。而这个云函数我们可以在小程序端调用，也可以使用云函数来调用云函数，还能使用定时触发器来调用云函数。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"小程序端发送订阅消息，有些业务需要在用户在小程序内完成了某个操作之后，就需要向用户发送订阅消息，比如打卡、签到、支付、发表成功等，这些业务都依赖于用户的操作，当操作完成之后就可以在回调函数里调用发送订阅消息的云函数；"}),"\n",(0,r.jsx)(n.li,{children:"还有一种就是，如果你是小程序的管理员，订阅消息的管理界面也在小程序里，当管理员在小程序端点击定点或群发订阅消息时，也可以调用云函数来发送订阅消息；"}),"\n",(0,r.jsx)(n.li,{children:"使用定时触发器发送订阅消息，这时订阅消息就可以周期性、定时发送，不再需要用户/管理员点击就可以结合业务场景发送。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"云函数调用subscribeMessage.send接口的方式有两种，一种是HTTPS调用，还有一种就是云调用，建议使用云调用。调用subscribeMessage.send接口时有很多细节需要注意，尤其是data格式，必须符合格式要求。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"订阅消息的data必须与模板消息一一对应"}),(0,r.jsx)(n.br,{}),"\n","比如我们申请到一个",(0,r.jsx)(n.strong,{children:"订阅课程开课提醒"}),"的模板，它的格式如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"姓名{{phrase1.DATA}}\n课程标题{{thing2.DATA}}\n课程内容{{thing3.DATA}}\n时间{{date5.DATA}}\n课程进度{{character_string6.DATA}}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["与之相应的data的写法如下phrase1、thing2、thing3、date5、character_string6，这些需要一一对应，参数不能多也不能少，参数后面的数字比如date5不能改成date6，否则会报",(0,r.jsx)(n.code,{children:'"openapi.subscribeMessage.send:fail argument invalid! hint:'}),"的错误，也就是模板里有什么参数，你就只能按部就班写什么参数："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'data: {\n  "phrase1": {\n    "value": \'李东\'\n  },\n  "thing2": {\n    "value": \'零基础云开发技术训练营第7课\'\n  },\n  "thing3": {\n    "value": \'列表渲染与条件渲染\'\n  },\n  "date5": {\n    "value": \'2019年10月20日 20:00\'\n  },\n  "character_string6": {\n    "value": 3\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"订阅消息参数值的内容格式必须要符合要求"}),(0,r.jsx)(n.br,{}),"\n","在技术文档里，有一个关于订阅消息参数值的内容格式要求，这个在写订阅消息内容的时候需要严格的一一对应，否则会出现格式错误。"]}),"\n",(0,r.jsx)(n.p,{children:"下面列举一些在使用过程中容易犯的错误："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["可能已有的模板消息的格式和你想要的不一致，比如你希望发送的消息是用户的昵称，而不是",(0,r.jsx)(n.code,{children:"姓名{{phrase1.DATA}}"}),",因为姓名只能是中文，且必须5个字以内，那你就没法擅自改动，只能去申请或复用其他的模板ID；"]}),"\n",(0,r.jsx)(n.li,{children:"每个格式对字符串的长度和类型都有严格的要求，比如thing，要求必须是20个以内的字符，不能超过20个字符；有些只能是数字或字母，就不能是其他格式"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"1363-使用云调用发送订阅消息",children:["13.6.3 使用云调用发送订阅消息",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1363-使用云调用发送订阅消息",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在前面我们说过，在小程序端",(0,r.jsx)(n.strong,{children:"哪个用户"}),"点击授权就只会给",(0,r.jsx)(n.strong,{children:"哪个用户"}),"增加授权次数，而借助于云函数发送订阅消息则用户可以",(0,r.jsx)(n.strong,{children:"给任何人"}),"发送订阅消息，发给哪个人就需要哪个人有授权次数，就会减少哪个人的授权次数，这一点要注意区分。"]}),"\n",(0,r.jsxs)(n.h4,{id:"1发送单条订阅消息",children:["1、发送单条订阅消息",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1发送单条订阅消息",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"新建一个云函数比如subscribeMessage，然后再在config.json的添加subscribeMessage.send权限，使用云函数增量上传更新这个配置文件。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  "permissions": {\n    "openapi": [\n      "subscribeMessage.send"\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后再在index.js里输入以下代码，注意这里的openid，是用户自己的，这种适用于用户在小程序端完成某个业务操作之后，就给用户自己发订阅消息；当然这里的openid可以是其他累积了授权次数的用户的，也就是当我们在小程序端调用该云函数就能给其他人发订阅消息了，这主要适用于管理员："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const cloud = require(\'wx-server-sdk\')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\nexports.main = async (event, context) => {\n  const { OPENID } = cloud.getWXContext()\n  try {\n    const result = await cloud.openapi.subscribeMessage.send({\n      touser: "oUL-m5FuRmuVmxvbYOGuXbuEDsn8",\n      page: \'index\',\n      templateId: "qY7MhvZOnL0QsRzK_C7FFsXTT7Kz0-knXMwkF1ewY44",\n      data: {\n        "phrase1": {\n          "value": \'小明\'\n        },\n        "thing2": {\n          "value": \'零基础云开发技术训练营第7课\'\n        },\n        "thing3": {\n          "value": \'列表渲染与条件渲染\'\n        },\n        "date5": {\n          "value": \'2019年10月20日 20:00\'\n        },\n        "character_string6": {\n          "value": 3\n        }\n    }\n    })\n    return result\n  } catch (err) {\n    console.log(err)\n    return err\n  }\n} \n'})}),"\n",(0,r.jsxs)(n.h4,{id:"2批量发送订阅消息",children:["2、批量发送订阅消息",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2批量发送订阅消息",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"由于subscribeMessage.send的参数templateId和touser都是字符串，因此执行一次subscribeMessage.send只能给一个用户发送一条订阅消息，那要给更多用户比如1000人以内（云函数一次可以获取到1000条数据）发订阅消息，则需要结合数据库的查询数据库内所有有授权次数的用户然后循环执行来发消息，并在发完之后使用inc自减来减去授权次数。"}),"\n",(0,r.jsx)(n.p,{children:"由于我们把用户授权的所有订阅消息内嵌到templs这个数组里，而要发送的订阅消息的内容则来自templs数组里符合条件的对象，这里涉及到相对比较复杂的数组的处理，因此数据分析处理神器聚合就派上用场了（当然我们也可以使用普通查询，普通查询得到的是记录列表，再使用一些数组方法如filter、map等取出列表里的templs嵌套的对象列表）。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV\n})\nconst db = cloud.database()\nconst _ = db.command\nconst $ = db.command.aggregate\nexports.main = async (event, context) => {\n  const templateId =\"qY7MhvZOnL0QsRzK_C7FFsXTT7Kz0-knXMwkF1ewY44\"\n  try {\n    const messages = (await db.collection('messages').aggregate()\n      .match({   //使用match匹配查询\n        \"templs.templateId\":templateId,  //注意这里templs.templateId的写法\n        \"done\":false,\n        \"status\":1 \n      })   \n      .project({\n        _id:0,\n        templs: $.filter({  //从嵌套的templs数组里取出模板ID满足条件的对象\n          input: '$templs',\n          as: 'item',\n          cond: $.eq(['$$item.templateId',templateId])\n        })\n      })\n      .project({   \n        message:$.arrayElemAt(['$templs', 0]), //符号条件的是只有1个对象的数组，取出这个对象\n      })\n      .end()).list  //使用聚合查询到的是一个list对象\n\n    const tasks = []\n    for (let item in messages) {\n      const promise = cloud.openapi.subscribeMessage.send({\n        touser: item.message._openid,\n        page: 'index',\n        templateId: item.message.templateId,\n        data: item.message.data\n      })\n      tasks.push(promise)\n    }\n    return (await Promise.all(tasks)).reduce((acc, cur) => {\n      return {\n        data: acc.data.concat(cur.data),\n        errMsg: acc.errMsg,\n      }\n    })\n\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"特别注意的是，不要把查询数据库的语句放到循环里面，也就是我们可以一次性取出1000条需要发订阅消息的用户，然后再结合map和Promise.all方法给这1000个用户发送订阅消息，然后再一次性给所有这1000条数据进行原子自增，不能一条一条处理，否则会造成数据库性能的极大浪费以及超出最大连接数，而且也会导致云函数在最高60s的生命周期里也发送不了几百条订阅消息。"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"1364-使用定时触发器发订阅消息",children:["13.6.4 使用定时触发器发订阅消息",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1364-使用定时触发器发订阅消息",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"但是当要发送订阅消息的用户有几十万几百万，那应该怎么处理呢？如果全部让云函数来执行，即使将云函数的执行超时时间修改为60s，也应该会超时，这时候我们可以结合定时器来发送订阅消息。\n使用定时触发器来发送订阅消息，也就是在小程序的云开发服务端，用定时触发器调用订阅消息的云调用接口openapi.subscribeMessage.send。当我们每天要给数十万人定时发送订阅消息时，这时候定时触发器就不仅仅需要比如每天早上9点触发，而且还需要在9点之后能够每隔一段时间比如40s,就来执行一次云函数以便给数十万用户发送订阅消息。"}),"\n",(0,r.jsx)(n.p,{children:"这时候Cron表达式可以这样写，意思是每天早上9点到11点每隔40s执行一次云函数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"0/40 * 9-11 * * * *\n"})}),"\n",(0,r.jsx)(n.p,{children:"当然这里的周期设置可以结合云函数实际执行的时间来定，要充分考虑到云函数的超时时间。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["云调用还支持组合模板并添加至帐号下的个人模板库的接口",(0,r.jsx)(n.code,{children:"subscribeMessage.addTemplate"}),"、删除帐号下的个人模板",(0,r.jsx)(n.code,{children:"subscribeMessage.deleteTemplate"}),"、获取小程序账号的类目",(0,r.jsx)(n.code,{children:"subscribeMessage.getCategory"}),"、获取当前帐号下的个人模板列表",(0,r.jsx)(n.code,{children:"subscribeMessage.getTemplateList"}),"等等接口，这里就不一一介绍啦。"]}),"\n"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let c=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F91.%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF.md"]={toc:[{text:"13.6 订阅消息",id:"136-订阅消息",depth:2},{text:"13.6.1 获取订阅消息授权",id:"1361-获取订阅消息授权",depth:3},{text:"1、小程序端获取订阅消息授权次数",id:"1小程序端获取订阅消息授权次数",depth:4},{text:"2、订阅消息授权与次数累积实践",id:"2订阅消息授权与次数累积实践",depth:4},{text:"13.3.2 发送订阅消息方式说明",id:"1332-发送订阅消息方式说明",depth:3},{text:"13.6.3 使用云调用发送订阅消息",id:"1363-使用云调用发送订阅消息",depth:3},{text:"1、发送单条订阅消息",id:"1发送单条订阅消息",depth:4},{text:"2、批量发送订阅消息",id:"2批量发送订阅消息",depth:4},{text:"13.6.4 使用定时触发器发订阅消息",id:"1364-使用定时触发器发订阅消息",depth:3}],title:"91.订阅消息",headingTitle:"91.订阅消息",frontmatter:{}}}}]);