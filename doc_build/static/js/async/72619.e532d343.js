"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["72619"],{33312:function(e,n,d){d.r(n),d.d(n,{default:()=>c});var l=d(552676),t=d(740453);function o(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",ol:"ol",li:"li",strong:"strong",pre:"pre",h3:"h3"},(0,t.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.h1,{id:"20特殊元素指令双向绑定是如何实现的",children:["20.特殊元素&指令：双向绑定是如何实现的？",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#20特殊元素指令双向绑定是如何实现的",children:"#"})]}),"\n",(0,l.jsxs)(n.h2,{id:"前言",children:["前言",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["有些小伙伴在理解 ",(0,l.jsx)(n.code,{children:"Vue"})," 的响应式原理的时候，可能会认为 ",(0,l.jsx)(n.code,{children:"Vue"})," 的响应式是双向绑定的，但实际上这是不准确的，所谓数据的双向绑定可以体现为以下两部分："]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["数据流向 ",(0,l.jsx)(n.code,{children:"DOM"})," 的绑定：数据的更新最终映射到对应的视图更新。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"DOM"})," 流向数据的绑定：操作 ",(0,l.jsx)(n.code,{children:"DOM"})," 的变化引起数据的更新。"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["我们在前面的章节花了不少篇幅介绍了响应式原理，其实这块就是着重在介绍数据流向 ",(0,l.jsx)(n.code,{children:"DOM"})," 的过程。"]}),"\n",(0,l.jsxs)(n.p,{children:["在 ",(0,l.jsx)(n.code,{children:"Vuejs"})," 中，我们则会经常通过 ",(0,l.jsx)(n.code,{children:"v-model"})," 指令来实现数据的 “双向绑定”。 ",(0,l.jsx)(n.code,{children:"v-model"})," 指令既可以作用在普通表单元素，也可以作用在一些组件上。接下来我们将分别介绍这两种情况的实现原理。"]}),"\n",(0,l.jsxs)(n.h2,{id:"表单元素",children:["表单元素",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单元素",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["在使用 ",(0,l.jsx)(n.code,{children:"Vuejs"})," 编写表单类的 ",(0,l.jsx)(n.code,{children:"UI"})," 控件时，经常会使用 ",(0,l.jsx)(n.code,{children:"v-model"})," 指令来为 ",(0,l.jsx)(n.code,{children:"<input>"}),"、",(0,l.jsx)(n.code,{children:"<select>"}),"、",(0,l.jsx)(n.code,{children:"<textarea>"})," 进行数据的双向绑定。"]}),"\n",(0,l.jsxs)(n.p,{children:["我们使用 ",(0,l.jsx)(n.code,{children:"Vue"})," 提供的官方",(0,l.jsx)(n.a,{href:"https://vue-next-template-explorer.netlify.app/",target:"_blank",rel:"noopener noreferrer",children:"模版转换工具"}),"来尝试一下在 ",(0,l.jsx)(n.code,{children:"<input>"}),"、",(0,l.jsx)(n.code,{children:"<select>"}),"、",(0,l.jsx)(n.code,{children:"<textarea>"})," 输入类型的表单中使用 ",(0,l.jsx)(n.code,{children:"v-model"})," 指令会被编译成什么样子："]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"模版："})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"<input v-model='value1' />\n<textarea v-model='value2' />\n<select v-model='value3' />\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"编译结果"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, vModelSelect as _vModelSelect, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue"\n\nconst _hoisted_1 = ["onUpdate:modelValue"]\nconst _hoisted_2 = ["onUpdate:modelValue"]\nconst _hoisted_3 = ["onUpdate:modelValue"]\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _withDirectives(_createElementVNode("input", {\n      "onUpdate:modelValue": $event => ((_ctx.value1) = $event)\n    }, null, 8 /* PROPS */, _hoisted_1), [\n      [_vModelText, _ctx.value1]\n    ]),\n    _withDirectives(_createElementVNode("textarea", {\n      "onUpdate:modelValue": $event => ((_ctx.value2) = $event)\n    }, null, 8 /* PROPS */, _hoisted_2), [\n      [_vModelText, _ctx.value2]\n    ]),\n    _withDirectives(_createElementVNode("select", {\n      "onUpdate:modelValue": $event => ((_ctx.value3) = $event)\n    }, null, 8 /* PROPS */, _hoisted_3), [\n      [_vModelSelect, _ctx.value3]\n    ])\n  ], 64 /* STABLE_FRAGMENT */))\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["可以看到通过 ",(0,l.jsx)(n.code,{children:"v-model"})," 绑定的元素，在转成渲染函数的时候，最外层都被套上了一个 ",(0,l.jsx)(n.code,{children:"withDirectives"})," 函数，这个函数传入了两个变量，一个通过 ",(0,l.jsx)(n.code,{children:"createElementVNode"})," 创建的 ",(0,l.jsx)(n.code,{children:"vnode"})," 节点，另一个是一个数组类型的参 ",(0,l.jsx)(n.code,{children:"directives"}),"，这个我们后面再介绍。我们先来简单看一下 ",(0,l.jsx)(n.code,{children:"withDirectives"})," 这个函数的实现："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"export function withDirectives(vnode, directives) {\n  const internalInstance = currentRenderingInstance\n  if (internalInstance === null) {\n    return vnode\n  }\n  const instance = getExposeProxy(internalInstance) || internalInstance.proxy\n  // 获取指令集\n  const bindings = vnode.dirs || (vnode.dirs = [])\n  // 遍历 directives\n  for (let i = 0; i < directives.length; i++) {\n    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i]\n    // 如果存在指令\n    if (dir) {\n      // 指令是个函数，构造 mounted、updated 钩子\n      if (isFunction(dir)) {\n        dir = {\n          mounted: dir,\n          updated: dir\n        }\n      }\n      // 存在 deep 属性，遍历访问每个属性\n      if (dir.deep) {\n        traverse(value)\n      }\n      // bindings 中添加构造好的指令元素\n      bindings.push({\n        dir,\n        instance,\n        value,\n        oldValue: void 0,\n        arg,\n        modifiers\n      })\n    }\n  }\n  return vnode\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["可以看到 ",(0,l.jsx)(n.code,{children:"withDirectives"})," 函数主要就是为 ",(0,l.jsx)(n.code,{children:"vnode"})," 节点上添加 ",(0,l.jsx)(n.code,{children:"dirs"})," 属性，对于我们示例中的 ",(0,l.jsx)(n.code,{children:"<input>"})," 节点而言，生成的 ",(0,l.jsx)(n.code,{children:"dir"})," 内容大致为（ ",(0,l.jsx)(n.code,{children:"select"})," 节点类似，这里就不再介绍了，有兴趣的可以在源码详细了解）："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"{\n  dir: vModelText,\n  value: _ctx.value1,\n  ...\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["其中 ",(0,l.jsx)(n.code,{children:"vModelText"})," 是一个对象，内置了 ",(0,l.jsx)(n.code,{children:"v-model"})," 指令相关的生命周期的实现："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"export const vModelText = {\n  // created 生命周期\n  created(el, { modifiers: { lazy, trim, number } }, vnode) {\n    // 获取 props 上 onUpdate:modelValue 函数\n    el._assign = getModelAssigner(vnode)\n    const castToNumber =\n      number || (vnode.props && vnode.props.type === 'number')\n    // 注册 input/change 事件  \n    addEventListener(el, lazy ? 'change' : 'input', e => {\n      // ...\n      let domValue = el.value\n      // .trim 修饰符\n      if (trim) {\n        domValue = domValue.trim()\n      }\n      if (castToNumber) {\n        domValue = looseToNumber(domValue)\n      }\n      // 执行 onUpdate:modelValue 函数\n      el._assign(domValue)\n    })\n    if (trim) {\n      addEventListener(el, 'change', () => {\n        el.value = el.value.trim()\n      })\n    }\n    // ...\n  },\n  mounted(el, { value }) {\n    // 赋值\n    el.value = value == null ? '' : value\n  },\n  beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {\n    // 更新 el._assign\n    el._assign = getModelAssigner(vnode)\n    if (el.composing) return\n    if (document.activeElement === el && el.type !== 'range') {\n      if (lazy) {\n        return\n      }\n      if (trim && el.value.trim() === value) {\n        return\n      }\n      if (\n        (number || el.type === 'number') &&\n        looseToNumber(el.value) === value\n      ) {\n        return\n      }\n    }\n    // 更新值\n    const newValue = value == null ? '' : value\n    if (el.value !== newValue) {\n      el.value = newValue\n    }\n  }\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["可以看到 ",(0,l.jsx)(n.code,{children:"vModelText"})," 内置了 ",(0,l.jsx)(n.code,{children:"created"}),"、",(0,l.jsx)(n.code,{children:"mounted"}),"、",(0,l.jsx)(n.code,{children:"beforeUpdate"})," 钩子函数。"]}),"\n",(0,l.jsxs)(n.p,{children:["在 ",(0,l.jsx)(n.code,{children:"created"})," 的时候，会从 ",(0,l.jsx)(n.code,{children:"pops"})," 上获取 ",(0,l.jsx)(n.code,{children:"onUpdate:modelValue"})," 函数，这个函数也就是我们在遇到 ",(0,l.jsx)(n.code,{children:"v-model"})," 指令后，",(0,l.jsx)(n.code,{children:"Vue"})," 的编译器自动转换生成的。然后再监听对应 ",(0,l.jsx)(n.code,{children:"DOM"})," 上的 ",(0,l.jsx)(n.code,{children:"change"})," 或者 ",(0,l.jsx)(n.code,{children:"input"})," 事件，事件触发时再回调执行 ",(0,l.jsx)(n.code,{children:"onUpdate:modelValue"})," 函数。"]}),"\n",(0,l.jsxs)(n.p,{children:["在 ",(0,l.jsx)(n.code,{children:"mounted"})," 的时候，会将当前的值 ",(0,l.jsx)(n.code,{children:"value"})," 赋值给 ",(0,l.jsx)(n.code,{children:"el.value"}),"。"]}),"\n",(0,l.jsxs)(n.h3,{id:"指令生命周期的触发",children:["指令生命周期的触发",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#指令生命周期的触发",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["前面我们提到了 ",(0,l.jsx)(n.code,{children:"v-model"})," 注册的指令节点，会生成一个带有 ",(0,l.jsx)(n.code,{children:"dirs"})," 的属性，属性中会包含类似于 ",(0,l.jsx)(n.code,{children:"vModelText"})," 这样的对象，这个对象内部包含了一些生命周期函数，那这些生命周期函数又是在何时执行的呢？再回到我们之前的 ",(0,l.jsx)(n.code,{children:"mountElement"})," 函数内，这次我们着重看一下与指令相关的代码实现："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\n  // ...\n  const { type, props, shapeFlag, transition, dirs } = vnode\n\n  if (dirs) {\n    // 执行 created 钩子函数\n    invokeDirectiveHook(vnode, null, parentComponent, 'created')\n  }\n  // ...\n  if (props) {\n    // 处理 props，比如 class、style、event 等属性\n  }\n  if (dirs) {\n    // 执行 beforeMount 钩子函数\n    invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount')\n  }\n  // 挂载 dom\n  hostInsert(el, container, anchor)\n  \n  if (\n    (vnodeHook = props && props.onVnodeMounted) ||\n    needCallTransitionHooks ||\n    dirs\n  ) {\n    queuePostRenderEffect(() => {\n      vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode)\n      needCallTransitionHooks && transition!.enter(el)\n      // 执行 mounted 钩子函数\n      dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted')\n    }, parentSuspense)\n  }\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["可以看到指令相关的钩子函数在进行 ",(0,l.jsx)(n.code,{children:"vnode"})," 初始化挂载的时候，会在挂载的各个阶段被分别调用，从而完成生命周期函数的执行过程。"]}),"\n",(0,l.jsxs)(n.h2,{id:"组件",children:["组件",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["我们首先来看一下，",(0,l.jsx)(n.code,{children:"v-model"})," 在组件中一些常规的使用方式："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<Component v-model="value1" />\n<Component v-model:title="bookTitle" />\n<Component v-model:first-name="first" v-model:last-name="last" />\n'})}),"\n",(0,l.jsxs)(n.p,{children:["在组件上，",(0,l.jsx)(n.code,{children:"v-model"}),"\xa0不仅仅可以使用\xa0",(0,l.jsx)(n.code,{children:"modelValue"}),"\xa0作为 ",(0,l.jsx)(n.code,{children:"prop"}),"，以\xa0",(0,l.jsx)(n.code,{children:"update:modelValue"}),"\xa0作为对应的事件，还支持了给 ",(0,l.jsx)(n.code,{children:"v-model"})," 一个自定义参数来更改这些名字。因为有了自定义参数的功能，所以也就支持了一个组件多个 ",(0,l.jsx)(n.code,{children:"v-model"})," 绑定的功能。"]}),"\n",(0,l.jsxs)(n.p,{children:["接下来再看看通过 ",(0,l.jsx)(n.a,{href:"https://vue-next-template-explorer.netlify.app/",target:"_blank",rel:"noopener noreferrer",children:"Vue 3 Template Explorer"})," 将上述模版转出来的渲染函数的表达形式："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'import { resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Component = _resolveComponent("Component")\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_Component, {\n      modelValue: _ctx.value1,\n      "onUpdate:modelValue": $event => ((_ctx.value1) = $event)\n    }, null, 8 /* PROPS */, ["modelValue", "onUpdate:modelValue"]),\n    _createVNode(_component_Component, {\n      title: _ctx.bookTitle,\n      "onUpdate:title": $event => ((_ctx.bookTitle) = $event)\n    }, null, 8 /* PROPS */, ["title", "onUpdate:title"]),\n    _createVNode(_component_Component, {\n      "first-name": _ctx.first,\n      "onUpdate:firstName": $event => ((_ctx.first) = $event),\n      "last-name": _ctx.last,\n      "onUpdate:lastName": $event => ((_ctx.last) = $event)\n    }, null, 8 /* PROPS */, ["first-name", "onUpdate:firstName", "last-name", "onUpdate:lastName"])\n  ], 64 /* STABLE_FRAGMENT */))\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["可以看到，编译器在处理组件带有 ",(0,l.jsx)(n.code,{children:"v-model"})," 指令的时候，会将其根据相关参数进行解析，最后组成一个 ",(0,l.jsx)(n.code,{children:"props"})," 传入组件中。拿一个 ",(0,l.jsx)(n.code,{children:"v-model:title = 'bookTitle'"})," 举例，生成的 ",(0,l.jsx)(n.code,{children:"props"})," 大致是这样的："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'{\n  title: value,\n  "onUpdate:title": $event => _ctx.bookTitle = $event\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["所以这也解释了为什么组件内部需要定义一个 ",(0,l.jsx)(n.code,{children:"props"})," 用来承接 ",(0,l.jsx)(n.code,{children:"title"})," 的值；定义一个 ",(0,l.jsx)(n.code,{children:"emit"}),"，在 ",(0,l.jsx)(n.code,{children:"title"})," 值变化的时候，用来触发 ",(0,l.jsx)(n.code,{children:"onUpdate:title"}),"，并传入更新后的值。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:"\x3c!-- Component.vue --\x3e\n<script setup>\ndefineProps(['title'])\ndefineEmits(['update:title'])\n<\/script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"title\"\n    @input=\"$emit('update:title', $event.target.value)\"\n  />\n</template>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["接下来我们再看看这个 ",(0,l.jsx)(n.code,{children:"$emit"})," 是如何触发 ",(0,l.jsx)(n.code,{children:"onUpdate:title"})," 函数的执行的。先来看看 ",(0,l.jsx)(n.code,{children:"$emit"})," 函数的实现："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"export function emit(instance, event, ...rawArgs) {\n  if (instance.isUnmounted) return\n  const props = instance.vnode.props || EMPTY_OBJ\n  \n  let args = rawArgs\n  \n  // 定义事件名称\n  let handlerName\n  // update:xxx => onUpdate:xxx\n  let handler =\n    props[(handlerName = toHandlerKey(event))] ||\n    props[(handlerName = toHandlerKey(camelize(event)))]\n  // 找到了 handler 触发调用\n  if (handler) {\n    callWithAsyncErrorHandling(\n      handler,\n      instance,\n      ErrorCodes.COMPONENT_EVENT_HANDLER,\n      args\n    )\n  }\n  // ...\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["其中第一个参数是当前组件实例，",(0,l.jsx)(n.code,{children:"$emit"})," 自动为我们绑定了当前组件，",(0,l.jsx)(n.code,{children:"event"})," 为事件名称，",(0,l.jsx)(n.code,{children:"rawArgs"})," 就是传入的一些参数。整个函数逻辑还是很清晰的，就是将传入的 ",(0,l.jsx)(n.code,{children:"event"})," 名称转成 ",(0,l.jsx)(n.code,{children:"onUpdate:xxx"})," 的写法，然后在 ",(0,l.jsx)(n.code,{children:"props"})," 上找对应的函数，也就是我们传入的那个事件函数。找到了后就通过 ",(0,l.jsx)(n.code,{children:"callWithAsyncErrorHandling"})," 方法进行调用，完成事件的执行。"]}),"\n",(0,l.jsxs)(n.h2,{id:"总结",children:["总结",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"v-model"})," 不管是在表单元素还是在组件元素上都会被编译器转成一个 ",(0,l.jsx)(n.code,{children:"props"})," 对象，在表单元素上是这样的："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'{\n  "onUpdate:modelValue": $event => _ctx.bookTitle = $event\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"而在组件时则会编译成："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'{\n  title: value,\n  "onUpdate:title": $event => _ctx.bookTitle = $event\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["那么，所谓的双向数据绑定的 ",(0,l.jsx)(n.code,{children:"DOM"})," 操作触发数据的更新就可以理解为："]}),"\n",(0,l.jsxs)(n.p,{children:["在表单元素上，事件名 ",(0,l.jsx)(n.code,{children:"modelValue"})," 是默认的，通过 ",(0,l.jsx)(n.code,{children:"vModelText"})," 函数在内部实现了一个监听 ",(0,l.jsx)(n.code,{children:"DOM"})," 变更的事件 ",(0,l.jsx)(n.code,{children:"change/input"})," 来实现对数据值的更新操作。"]}),"\n",(0,l.jsx)(n.p,{children:"在组件元素上，则是通过组件内部自定义值接受和事件派发机制完成对数据的更新操作。"})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}let c=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["Vue%203%20%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%2F20.%E7%89%B9%E6%AE%8A%E5%85%83%E7%B4%A0%26%E6%8C%87%E4%BB%A4%EF%BC%9A%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"表单元素",id:"表单元素",depth:2},{text:"指令生命周期的触发",id:"指令生命周期的触发",depth:3},{text:"组件",id:"组件",depth:2},{text:"总结",id:"总结",depth:2}],title:"20.特殊元素&指令：双向绑定是如何实现的？",headingTitle:"20.特殊元素&指令：双向绑定是如何实现的？",frontmatter:{}}}}]);