"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["57450"],{246012:function(e,n,r){r.r(n),r.d(n,{default:()=>Q});var i=r(552676),l=r(740453);let c=r.p+"static/image/79994f0524a2ff39066ab11118fdf66a.6f262d25.gif",s=r.p+"static/image/8c09090d5c8c0c660f1b8b305d7c56c7.e1970fdd.webp",d=r.p+"static/image/d038f446ebf5bc0782814225a0f351dc.92adeb50.gif",o=r.p+"static/image/77aef12788e3b1b7b146e7b6d4eceb12.48cd0c79.gif",a=r.p+"static/image/9bd150a21d464bfc5e3fe454b380bd93.11b6182a.gif",t=r.p+"static/image/90f48039844f7b4de1c4ca172c875c75.1f9a11d5.gif",h=r.p+"static/image/a978623ea3fedcfc2ba5142ea02add21.7f7c58ee.webp",x=r.p+"static/image/1da1f561481a22e4df7c80485e4594d4.3c4843f1.gif",j=r.p+"static/image/567eb9316dd00221f6f29f41a4bc8176.763661d9.gif",p=r.p+"static/image/411088ef6614c9e3768051955b30b423.88942334.webp",f=r.p+"static/image/b16383de6400259d3201a48425f45c06.23b67d31.gif",g=r.p+"static/image/fb815e906be2a11b3523fd715e3cbf0f.ce51d04e.gif",m=r.p+"static/image/f8cb4df4037ac883a8b79e22fb220f6d.73d4c673.webp",b=r.p+"static/image/2c27c438f59e3f9759541113c61f7eef.40d1a833.gif",u=r.p+"static/image/e7f6684a451066f56095d1e9e01ce214.c10f986a.gif",G=r.p+"static/image/2b7a47346a41c1d947658430104bcc2c.abc59796.gif",R=r.p+"static/image/41577d6f9bdaeb55a4afb780bbf07427.9ef6f9d2.gif",B=r.p+"static/image/b08c0191df31fe82eb5735c6d0b7b548.a47e3ec8.gif",M=r.p+"static/image/85a75afc5bbf4a183ac736b7bb6c4301.fe75ebab.gif",C=r.p+"static/image/5fe872170baf184cf985c54e1e4bdfa5.32402dbe.gif",y=r.p+"static/image/f16c1185fdabaed8789d8172d2283b2b.32402dbe.gif",A=r.p+"static/image/6536ab441f83605e5e109329d93923d6.35c1a45c.gif",k=r.p+"static/image/25e76a260bb532282b9feac914c550e4.2500f6b2.gif",S=r.p+"static/image/e6d87cc9e906b11684bb0f87ca4e9d88.38c865bb.gif",v=r.p+"static/image/a499838451cc96b6d80704856a27b1d5.92f3b394.webp",N=r.p+"static/image/bae68497880de100f65f968b1a6776b0.300628fb.webp",_=r.p+"static/image/87698d597b50c9da78cfacadd79fb340.20241bf9.webp",q=r.p+"static/image/52bf917f8f8cbdf09005b50cc112eaea.b0cde213.webp",w=r.p+"static/image/c61fa55f33882ba8693d7aa03037065b.3fe20ee8.webp",E=r.p+"static/image/8f81c55c8c8dcfcb72abf92b9fc9f086.09fdab44.gif",L=r.p+"static/image/523f0e93294fcd103f6083dd07149577.d6f4140f.webp",V=r.p+"static/image/b386b14e6d916f8c881fee4693e27c52.213e314f.webp",X=r.p+"static/image/f479b0807d2c1de54262a26292b23882.4d7209f8.gif",D=r.p+"static/image/7602918eab473967bd3c3f218bcf0da6.f9835053.webp",W=r.p+"static/image/c18d11a51a8edecc8d46e122804e286b.81ca1da5.webp",J=r.p+"static/image/3e0b3a75170d90c42400b8531639cae8.baedc09a.gif",O=r.p+"static/image/8bc180d40791c11320d3c6d4257785ef.22f150d5.gif",T=r.p+"static/image/6c02424dcad50dd0983ed3cc2dc3059d.09f0f3ea.webp",P=r.p+"static/image/27de5d7931d924c9846f395fc3e550f9.b70f9f8e.gif",F=r.p+"static/image/6d9d0ba569537eb9c5633d53ed339ef6.af2def13.gif",Z=r.p+"static/image/539268e5104b4e3b5780e0787bc0a72d.5a9ef3ad.webp";function z(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",img:"img",blockquote:"blockquote",ul:"ul",li:"li",strong:"strong",pre:"pre",h3:"h3"},(0,l.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"36-高级篇svg-滤镜的进阶之高阶颜色矩阵",children:["36-高级篇：SVG 滤镜的进阶之高阶颜色矩阵",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#36-高级篇svg-滤镜的进阶之高阶颜色矩阵",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["在之前的《",(0,i.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423746187273",target:"_blank",rel:"noopener noreferrer",children:"初探 SVG 滤镜"}),"》课程中，我们已经领略了 SVG 滤镜的神奇之处，包括如何定义和运用这些滤镜效果。今天，我们将迈入 SVG 滤镜的高级领域——高阶颜色矩阵，即 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜。"]}),"\n",(0,i.jsxs)(n.p,{children:["SVG 滤镜为我们打开了图像效果的全新境界，但我想在这节课中着重介绍 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜。它允许我们以矩阵的形式精确地转换图像的每个像素的颜色。换句话说，它赋予了我们通过向图像的红色（R）、绿色（G）、蓝色（B）和 Alpha 通道添加不同量的红色、绿色、蓝色或 Alpha 来操纵图像通道的能力。"]}),"\n",(0,i.jsxs)(n.p,{children:["这意味着 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜为我们提供了更多的控制权，将 CSS 滤镜的能力提升到了一个新的水平，让我们能够更加显著地操控图像处理和特效。通过该滤镜，我们可以实现各种颜色效果，包括色彩校正、颜色偏移、色彩平衡等。"]}),"\n",(0,i.jsx)(n.p,{children:"在接下来的内容中，我将带领你深入了解高阶颜色矩阵的工作原理和用法，包括如何构建和应用自定义矩阵，以及如何利用这种强大的技术实现各种令人惊叹的图像效果。让我们一起开始这段探索之旅吧！"}),"\n",(0,i.jsxs)(n.h2,{id:"css-滤镜和混合模式不足之处",children:["CSS 滤镜和混合模式不足之处",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-滤镜和混合模式不足之处",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"通常情况之下，说到滤镜，大家首先想到的是在 Photoshop 图形编辑软件。因为，最初通过滤镜来处理图像效果，基本上都是在 Photoshop 中完成。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:Z,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"在 Photoshop 图形编辑器中通过滤镜给图像添加艺术效果，这并没有任何问题。但对于大多数 Web 开发者来说是件棘手的事情。而且，你要是想根据用户的互动开启或关闭某个图形效果时，你不得不为此导出两张不同的图像文件，并通过 CSS 或 JavaScript 来切换它们。"}),"\n",(0,i.jsxs)(n.p,{children:["庆幸的是，首先在 SVG 中有了类似 Photoshop 图像编辑器中的滤镜功能。现在，在 CSS 中也具备了这方面的能力。如果你经常编写 CSS ，",(0,i.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259669043622690853",target:"_blank",rel:"noopener noreferrer",children:"很有可能你已经接触过滤镜（filter）和混合模式（mix-blend-mode 或 background-blend-mode）"}),"。例如，CSS 的混合模式允许我们将背景和前景元素混合在一起，并且在图像上使用时可以创建一些有趣的效果，类似于 Photoshop 等图像编辑器的效果。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:F,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRWMYP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRWMYP"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"另外，CSS 滤镜在混合模式无法完全满足我们需求的地方提供了更多的功能。你可以将多个滤镜组合在一起，来调整图片的效果："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:P,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/RwmVyEV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwmVyEV"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["一个最为常见且有用的技巧是使用 ",(0,i.jsx)(n.code,{children:"grayscale(100%)"})," 或 ",(0,i.jsx)(n.code,{children:"saturate(0%)"})," 将彩色图像转换为黑白的，这在某些特殊的场合之下是非常有用的："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"相反呢？你能告诉浏览器给一张黑白的图像上色吗？"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["一张黑白的 JPG 图像的文件大小通常比等效的彩色照片小 ",(0,i.jsx)(n.code,{children:"5% ~ 25%"})," （这取决于图片的压缩比例，JPG 对颜色通道的压缩要比亮度细节大得多）。对于无损图像格式，比如 PNG，文件大小的变化可能会更大。当性能成为问题时，这些额外的千字节可能很重要。想象一下，如果你有一个页面充满了个人头像。用户只会看到其中一些是彩色的，那为什么要消耗他们的数据流星发送彩色照片呢？滤镜还需要 CPU 进行处理和内存进行存储。只对个别照片进行滤镜处理，将其余部分保持为正常状态，难道不香吗？"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"虽然，使用 CSS 混合模式与其他颜色或图像相互混合，可以将一张黑白照片变成彩色照片，但这种融合的效果，很难达到你喜欢的颜色。这应该是 CSS 滤镜和混合模式的一大缺陷吧。这是因为 CSS 的滤镜和混合模式缺少一个关键特性，它们不能对颜色的每个通道进行单独操作。虽然 CSS 滤镜和混合模式是一种极好的工具，使用也非常方便，但它们只是从 SVG 滤镜派生出来的一种简捷方式，因此无法控制 RGBA 通道。"}),"\n",(0,i.jsxs)(n.p,{children:["这意味着，要完全控制我们的图像，还是需要使用 SVG 滤镜。SVG 滤镜，尤其是 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜赋予我们更多能力，让我们能够将 CSS 滤镜和混合模式提升到一个新的层次，对图像处理和特效提供了更显著的控制权。"]}),"\n",(0,i.jsxs)(n.h2,{id:"回顾一下-fecolormatrix-滤镜",children:["回顾一下 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#回顾一下-fecolormatrix-滤镜",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜是 ",(0,i.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423746187273#heading-9",target:"_blank",rel:"noopener noreferrer",children:"SVG 滤镜"}),"家族中的重要一员（SVG 滤镜共有 17 种不同类型）。当涉及到颜色操作时，",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 是你的最佳选择。它允许我们通过向图像的红色、绿色、蓝色和 Alpha 通道添加不同量的红色、绿色、蓝色或 Alpha 来操纵图像的每个像素，实现高度细致的颜色调整。"]}),"\n",(0,i.jsxs)(n.p,{children:["简单来说，",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜可以对图像的每个像素进行颜色变换，允许我们对图像进行高度细致的颜色调整，例如色彩校正、色调分离、颜色偏移等效果。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜包括 ",(0,i.jsx)(n.code,{children:"in"})," 、",(0,i.jsx)(n.code,{children:"result"})," 、 ",(0,i.jsx)(n.code,{children:"type"})," 和 ",(0,i.jsx)(n.code,{children:"value"})," 等属性值："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"in"})})," ：指定输入图像，可以是前一个滤镜效果的输出，也可以是图像本身"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"result"})}),"：为当前滤镜操作的输出命名，这样可以在后续的滤镜操作中引用该结果"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"type"})})," ：可选值包括 ",(0,i.jsx)(n.code,{children:"matrix"}),"、",(0,i.jsx)(n.code,{children:"saturate"}),"、",(0,i.jsx)(n.code,{children:"hueRotate"})," 和 ",(0,i.jsx)(n.code,{children:"luminaceToAlpha"})," 。主要用于指定颜色矩阵操作的类型。其中关键字 ",(0,i.jsx)(n.code,{children:"matrix"})," 将提供完整的 ",(0,i.jsx)(n.code,{children:"5x4"})," 值矩阵，允许你对图像的每个像素进行变换； ",(0,i.jsx)(n.code,{children:"saturate"})," 允许你调整图像的饱和度，它的值在 ",(0,i.jsx)(n.code,{children:"0 ~ 1"})," 之间；",(0,i.jsx)(n.code,{children:"hueRotate"})," 允许你调整图像的色相，它的值在 ",(0,i.jsx)(n.code,{children:"0 ~ 360"})," 度之间；",(0,i.jsx)(n.code,{children:"luminanceToAlpha"})," 允许你将图像的亮度值转换为 Alpha 通道值。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"values"})})," ：其内容取决于 ",(0,i.jsx)(n.code,{children:"type"})," 属性的值。对于 ",(0,i.jsx)(n.code,{children:"matrix"}),"，",(0,i.jsx)(n.code,{children:"values"})," 是由空格和 ",(0,i.jsx)(n.code,{children:"/"})," 或逗号分隔的 ",(0,i.jsx)(n.code,{children:"20"})," 个矩阵值的列表（",(0,i.jsx)(n.code,{children:"5x4"})," 值矩阵）；对于 ",(0,i.jsx)(n.code,{children:"hueRotate"}),"，",(0,i.jsx)(n.code,{children:"values"})," 是一个实数值（度数）；对于 ",(0,i.jsx)(n.code,{children:"luminanceToAlpha"}),"，",(0,i.jsx)(n.code,{children:"values"})," 不适用。如果未指定属性，则默认行为取决于属性 ",(0,i.jsx)(n.code,{children:"type"})," 的值。如果是 ",(0,i.jsx)(n.code,{children:"matrix"}),"，则此属性默认为单位矩阵。如果是 ",(0,i.jsx)(n.code,{children:"saturate"}),"，则此属性默认为值 ",(0,i.jsx)(n.code,{children:"1"}),"，这会产生单位矩阵。如果是 ",(0,i.jsx)(n.code,{children:"hueRotate"}),"，则此属性默认为值 ",(0,i.jsx)(n.code,{children:"0"}),"，这会产生单位矩阵。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["在这节课，我们将以 ",(0,i.jsx)(n.code,{children:"type"})," 为 ",(0,i.jsx)(n.code,{children:"matrix"})," 为主。例如，下面这个示例，我们使用 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜定义 CSS 滤镜中的 ",(0,i.jsx)(n.code,{children:"sepia()"})," 的效果。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <def>\n        <filter id="sepia">\n           <feColorMatrix \n               values="0.393  0.769  0.189  0  0\n                       0.349  0.686  0.168  0  0\n                       0.272  0.534  0.131  0  0\n                       0      0      0      1  0" \n               type="matrix"/>\n        </filter>\n    </def>\n</svg>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["上面的代码定义了一个 ",(0,i.jsx)(n.code,{children:"100%"})," 褐色调的 SVG 滤镜效果（下图中右图的效果）。你可以对比一下，它与 CSS 滤镜中 ",(0,i.jsx)(n.code,{children:"sepia(1)"})," 的效果（下图中左图的效果）的差异："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:O,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/rNgmbbE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNgmbbE"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["简单易行，对吧！你只需要调整 ",(0,i.jsx)(n.code,{children:"matrix"})," 属性中的几个数字，就可以得到各种不同的图像效果："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:J,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/bGyWjZB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGyWjZB"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"再对比一下下图："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:W,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["左侧是未使用任何滤镜的原始图片效果，右侧是使用了 SVG 的 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜的效果。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="primitive">\n            <feColorMatrix \n                type="matrix"\n                values="1 0 0 0 0\n                        0 1 0 0 0\n                        0 0 1 0 0\n                        0 0 0 1 0 "/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["从效果上来看，两者并没有任何差异。事实却是如此，因为原始图像中",(0,i.jsx)(n.code,{children:"R"})," 、",(0,i.jsx)(n.code,{children:"G"}),"、",(0,i.jsx)(n.code,{children:"B"})," 、",(0,i.jsx)(n.code,{children:"A"})," 通道的值默认都是 ",(0,i.jsx)(n.code,{children:"1"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["这个时候，我想你有一点困惑了，既然调整 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜的 ",(0,i.jsx)(n.code,{children:"matrix"})," 中的几个数值就能给图像着色，那么这个数字怎么调整？为了回答这个问题，我们接下来进入 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜中的颜色矩阵世界。"]}),"\n",(0,i.jsxs)(n.h2,{id:"理解-fecolormatrix-的颜色矩阵",children:["理解 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 的颜色矩阵",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#理解-fecolormatrix-的颜色矩阵",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["关于 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," ，你需要理解的第一件事情就是，",(0,i.jsx)(n.code,{children:"values"})," 中的数字列表，它被称为“变换矩阵”，用于数学上表示维度或空间时使用，是一种非常复杂的、将数字和符号排列成矩形形状的行列。具体来说，是一个五列四行的矩阵："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:D,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"简单的解释一下上图。"}),"\n",(0,i.jsx)(n.p,{children:"上图表示的是一个四行（分别代表 RGBA 四个颜色通道）五列（前三列代表 RGB 输入颜色，第四列代表 Alpha 通道，第五列代表常数）的矩阵。图中每个单元格中的数字代表颜色矩阵中的一个元素，用于决定每个颜色通道如何转换。"}),"\n",(0,i.jsxs)(n.p,{children:["或者说，",(0,i.jsx)(n.code,{children:"x"})," 轴（行）代表输入图像（原始图像）的通道（",(0,i.jsx)(n.code,{children:"R"}),"、",(0,i.jsx)(n.code,{children:"G"}),"、",(0,i.jsx)(n.code,{children:"B"})," 和 ",(0,i.jsx)(n.code,{children:"A"}),"），",(0,i.jsx)(n.code,{children:"y"})," 轴（列）代表我们可以从这些通道中添加或移除的颜色。"]}),"\n",(0,i.jsx)(n.p,{children:"对于任何像素，输出颜色是通过将该矩阵与输入像素相乘得到的。"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["顺便说一句：这仅适用于 ",(0,i.jsx)(n.code,{children:'type="matrix"'}),"。其他类型选项是 ",(0,i.jsx)(n.code,{children:"saturate"})," 和 ",(0,i.jsx)(n.code,{children:"hue-rotate"}),"，它们采用单个数字值，以及 ",(0,i.jsx)(n.code,{children:"luminanceToAlpha"}),"，它不采用任何值。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"注意，接下来的内容将会涉及到一些数学知识，例如矩阵乘法计算。如果你因为时间太久远，对这方面的知识略感模糊，可以借助下图来帮助你快速回忆这方面的知识："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:X,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"http://matrixmultiplication.xyz/",target:"_blank",rel:"noopener noreferrer",children:"http://matrixmultiplication.xyz/"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["需要知道的是，",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜是通过将 RGBA 输入颜色表示为一个向量，其中每个通道的值都已缩放到 ",(0,i.jsx)(n.code,{children:"0 ~ 1"})," 的范围创建的。该向量与矩阵相乘，然后结果被转换为回来创建 RGBA 输出颜色。每个向量和矩阵都给出了额外的行和列，以便你可以按照固定量移动颜色。"]}),"\n",(0,i.jsx)(n.p,{children:"颜色矩阵滤镜是通过将RGBa输入颜色表示为一个向量，其中每个通道的值都已缩放到0-1的范围来创建的。该向量与矩阵相乘，然后结果被转换回来创建RGBa输出颜色。每个向量和矩阵都给出了额外的行/列，以便您可以按固定量移动颜色，如果需要的话。"}),"\n",(0,i.jsxs)(n.p,{children:["现在，我们使用矩阵方程式来描述 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜，看起来像这样："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:V,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["最后一行的结果是 ",(0,i.jsx)(n.code,{children:"1"})," ，因此你可以安全地忽略它。 在 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 属性中也会被忽略，因为它只指定了矩形的前四行（",(0,i.jsx)(n.code,{children:"4 \xd7 5"})," 即四行五列矩阵）。"]}),"\n",(0,i.jsxs)(n.p,{children:["对于其他行，你正在创建每个 RGBA 输出值（",(0,i.jsx)(n.code,{children:"R2"})," 、",(0,i.jsx)(n.code,{children:"G2"})," 、",(0,i.jsx)(n.code,{children:"B2"})," 和 ",(0,i.jsx)(n.code,{children:"A2"}),"），作为 RGBA输入值（",(0,i.jsx)(n.code,{children:"R1"})," 、",(0,i.jsx)(n.code,{children:"G1"})," 、",(0,i.jsx)(n.code,{children:"B1"})," 和 ",(0,i.jsx)(n.code,{children:"A1"})," ）与相应矩阵值相乘后加上一个常数的和。"]}),"\n",(0,i.jsxs)(n.p,{children:["通过这种方法，我们可以为任何具有 RGBA 值的颜色创建一个颜色滤镜！例如 ",(0,i.jsx)(n.code,{children:"#09ec2f"})," 颜色，它对应的 RGBA 值是 ",(0,i.jsx)(n.code,{children:"rgb(9 236 47)"})," ，即 ",(0,i.jsx)(n.code,{children:"R = 9"})," 、",(0,i.jsx)(n.code,{children:"G = 236"})," 、 ",(0,i.jsx)(n.code,{children:"B = 47"})," 和 ",(0,i.jsx)(n.code,{children:"A = 1"})," 。 这些颜色通道的值都是在 ",(0,i.jsx)(n.code,{children:"0 ~ 255"})," 之间的整数。在计算机中，这个范围是一个八位字节可以提供的范围。通过将这些颜色通道的值除以 ",(0,i.jsx)(n.code,{children:"255"}),"，将得到相应的向量值（",(0,i.jsx)(n.code,{children:"0 ~ 1"}),"）："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"#09ec2f \uD83D\uDC49\uD83D\uDC49\uD83D\uDC49  rgb(9 236 47)\nR = 9   \uD83D\uDC49\uD83D\uDC49\uD83D\uDC49 R = 9 \xf7 255 = 0.035\nG = 236 \uD83D\uDC49\uD83D\uDC49\uD83D\uDC49 G = 236 \xf7 255 = 0.925\nB = 47  \uD83D\uDC49\uD83D\uDC49\uD83D\uDC49 B = 47 \xf7 255 = 0.184\n"})}),"\n",(0,i.jsxs)(n.p,{children:["我们可以将这些向量值应用到 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜中："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:L,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            <feColorMatrix \n                type="matrix"\n                values="0.035 0      0     0 0\n                        0     0.925  0     0 0\n                        0     0      0.184 0 0\n                        0     0      0     1 0 "/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/BaeZaXz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaeZaXz"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"正如你所看到的一样，图像应用了这个滤镜之后，变成了绿色的！"}),"\n",(0,i.jsx)(n.p,{children:"我们再来看一个高亮到透明（luminanceToAlpha）的颜色矩阵示例："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="luminanceToAlpha">\n    <feColorMatrix values="\n         0       0        0       0  0\n         0       0        0       0  0\n         0       0        0       0  0\n         0.2126  0.7152   0.0722  0  0" type="matrix" />\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:"它相当于以下矩阵："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["因为前三行的值都是 ",(0,i.jsx)(n.code,{children:"0"})," ，所以红色、绿色和蓝色通道的输出值也都是 ",(0,i.jsx)(n.code,{children:"0"})," （即黑色）。Alpha 通道的输出是基于三个输入颜色通道的函数生成的：主要来自绿色，少量来自红色，以及来自蓝色的一点点。"]}),"\n",(0,i.jsxs)(n.p,{children:["此时，如果输入颜色是纯白色，即 ",(0,i.jsx)(n.code,{children:"R1"})," 、",(0,i.jsx)(n.code,{children:"G1"})," 、",(0,i.jsx)(n.code,{children:"B1"})," 和 ",(0,i.jsx)(n.code,{children:"A1"})," 的值都是 ",(0,i.jsx)(n.code,{children:"1"})," ，那么 Alpha 通道值为 ",(0,i.jsx)(n.code,{children:"1"})," ："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:q,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["则完全不透明。反之，如果输入的颜色是纯黑色，即 ",(0,i.jsx)(n.code,{children:"R1"})," 、",(0,i.jsx)(n.code,{children:"G1"})," 和 ",(0,i.jsx)(n.code,{children:"B1"})," 的值都为 ",(0,i.jsx)(n.code,{children:"0"})," ，那么 Alpha 值为 ",(0,i.jsx)(n.code,{children:"0"})," ："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"换句话说，就是完全透明。任何其他颜色都会在透明度上产生介于这两者之间的值。较亮的颜色会变得更不透明，而较暗的颜色会变得更透明。分配给 RGB 通道的具体数字旨在反映强烈红色、强烈绿色和强烈蓝色之间的亮度差异。"}),"\n",(0,i.jsx)(n.p,{children:"所以，回到开头的棕褐色矩阵，它是一个更为复杂的颜色矩阵："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="sepia">\n    <feColorMatrix type="matrix"\n        values="\n            0.393  0.769  0.189  0  0\n            0.349  0.686  0.168  0  0\n            0.272  0.534  0.131  0  0\n            0      0      0      1  0" />\n </filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:N,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["这个颜色矩阵有两个作用：它将彩色图像变为灰度图像（带有亮度调整），然后将该灰度图像着色成黄色。Alpha 通道不会改变：输出 ",(0,i.jsx)(n.code,{children:"A2"})," 值恰好是输入 ",(0,i.jsx)(n.code,{children:"A1"})," 通道的 ",(0,i.jsx)(n.code,{children:"1"})," 倍。"]}),"\n",(0,i.jsxs)(n.p,{children:["当输入颜色为黑色时，输出仍然是黑色，因为所有数字都将乘以",(0,i.jsx)(n.code,{children:"0"}),"。但是，当输入颜色为白色时，输出如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"R2 = 0.393 \xd7 1 + 0.769 \xd7 1 + 0.189 \xd7 1 = 1.351\nG2 = 0.349 \xd7 1 + 0.686 \xd7 1 + 0.168 \xd7 1 = 1.203\nB2 = 0.272 \xd7 1 + 0.534 \xd7 1 + 0.131 \xd7 1 = 0.937\n"})}),"\n",(0,i.jsxs)(n.p,{children:["因此，颜色是 ",(0,i.jsx)(n.code,{children:" rgb(135.1% 120% 93.7%  / 100%)"})," 。"]}),"\n",(0,i.jsxs)(n.p,{children:["注意，此时颜色的 ",(0,i.jsx)(n.code,{children:"R"})," 和 ",(0,i.jsx)(n.code,{children:"G"})," 通道的值超出来 ",(0,i.jsx)(n.code,{children:"1"})," （即 ",(0,i.jsx)(n.code,{children:"100%"}),"），它们会被压缩以 ",(0,i.jsx)(n.code,{children:"100%"})," ，结果就是白色的部分被转换为浅黄色。"]}),"\n",(0,i.jsxs)(n.p,{children:["如果稍微降低输入值，直到输出下降到 ",(0,i.jsx)(n.code,{children:"1"})," 以下，将看不到红色和绿色通道的减少，因此你仍然会得到黄色，但不会那么苍白（因为蓝色通道将可见地减少）。"]}),"\n",(0,i.jsxs)(n.p,{children:["对于中等输入，每个通道的缩放值为 ",(0,i.jsx)(n.code,{children:"0.5"}),"，输出颜色将如下计算："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"R2 = 0.393 \xd7 0.5 + 0.769 \xd7 0.5 + 0.189 \xd7 0.5 = 0.6755\nG2 = 0.349 \xd7 0.5 + 0.686 \xd7 0.5 + 0.168 \xd7 0.5 = 0.6015\nB2 = 0.272 \xd7 0.5 + 0.534 \xd7 0.5 + 0.131 \xd7 0.5 = 0.4685\n"})}),"\n",(0,i.jsxs)(n.p,{children:["换句话说，它将是一种橙黄色的灰色，即 ",(0,i.jsx)(n.code,{children:" rgb(67.55% 60.15% 46.85%  / 100%)"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["如果你对颜色相关很熟悉，你可能会注意到中灰色（",(0,i.jsx)(n.code,{children:"gray"}),"）输入的输出值恰好是白色输入的输出值的一半。当输入图片是灰色调时，红色、绿色和蓝色输入通道的值始终相同。因此，你可以通过将它写成以下形式来简化这个数学问题："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"R2 = 1.351 \xd7 gray\nG2 = 1.203 \xd7 gray\nB2 = 0.937 \xd7 gray\n"})}),"\n",(0,i.jsx)(n.p,{children:"为了创建具有相同结果的颜色矩阵，你可以将每个行中的一个 RGB 列设置为这些值，并将其他值设置为零："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"只要输入图像是灰度的，这些将与原始的棕褐色滤镜矩阵产生完全相同的结果。"}),"\n",(0,i.jsxs)(n.p,{children:["在开始进入实战之前，有一个细节需要注意。你可能认为，为了创建一个 RGB 输入向量，每个通道的值为 ",(0,i.jsx)(n.code,{children:"0.5"})," ，你应该使用 ",(0,i.jsx)(n.code,{children:"rgb(50% 50% 50%)"})," （即 ",(0,i.jsx)(n.code,{children:"#888"})," 或 ",(0,i.jsx)(n.code,{children:"gray"})," ）。这对于 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜而言，没有任何问题，但对于 CSS ",(0,i.jsx)(n.code,{children:"filter"})," 的 ",(0,i.jsx)(n.code,{children:"sepia()"})," 函数是不对的。这是因为简写滤镜都使用 ",(0,i.jsx)(n.code,{children:"sRGB"})," 颜色空间输入颜色缩放为计算中使用的值。"]}),"\n",(0,i.jsx)(n.p,{children:"相较之下，SVG 滤镜默认使用输入RGB 值与矩阵数学中使用的值之间的直接数学转换"}),"\n",(0,i.jsxs)(n.p,{children:["在我们回到演示之前，我应该插入一个警告。你可能认为，为了创建一个RGB输入向量，每个通道的值为 ",(0,i.jsx)(n.code,{children:"0.5"}),"，你应该使用",(0,i.jsx)(n.code,{children:"rgb(50%，50%，50%)"}),"或",(0,i.jsx)(n.code,{children:"＃888"}),"或",(0,i.jsx)(n.code,{children:"gray"}),"。如果你使用的是",(0,i.jsx)(n.code,{children:"<feColorMatrix>"}),"滤镜，你是对的，但如果你使用的是sepia()简写函数，你是错误的。这相是因为简写滤镜都使用sRGB颜色模型将输入颜色缩放为计算中使用的值。"]}),"\n",(0,i.jsxs)(n.p,{children:["当你使用 SVG 滤镜时，它默认会直接用输入的 RGB 值进行数学转换。这些值的转换方式可以通过 ",(0,i.jsx)(n.code,{children:"color-interpolation-filters"})," 属性来控制。这个属性可以作为滤镜的一个属性或者一个可以继承的CSS属性来设置。它有两个选项：",(0,i.jsx)(n.code,{children:"linearRGB"})," 和 ",(0,i.jsx)(n.code,{children:"sRGB"})," ："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"linearRGB"}),"：表示用线性 RGB 颜色空间来进行转换，这种方式通常更准确"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"sRGB"}),"：表示用标准RGB颜色空间来进行转换，这种方式更常见"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["接下来的示例将使用 ",(0,i.jsx)(n.code,{children:"sRGB"}),"。",(0,i.jsx)(n.code,{children:"sRGB"})," 模式最有效地保留了输入图像各部分之间的亮度差异感知，但它对结果有显著影响，所以如果你使用相同的数值却得到了非常不同的效果，那可能就是原因所在。这也意味着颜色不能轻易地通过手工计算得出。特别是在定义精确生成特定中灰色输出颜色的滤镜时，这尤其棘手。如果你在浏览器中玩弄滤镜，这通常不是问题。然而，如果你试图在你的网页设计中匹配特定的颜色，你可能需要测试 ",(0,i.jsx)(n.code,{children:"color-interpolation-filters: linearRGB;"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"fecolormatrix-滤镜的使用",children:[(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜的使用",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fecolormatrix-滤镜的使用",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["了解完 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜的颜色矩阵的转换之后，我们来看一些实际的使用用例。先从改变颜色通道值开始，我们尽可能的由简到复杂来深入了解它的使用方式。"]}),"\n",(0,i.jsxs)(n.h3,{id:"改变-rgb-值",children:["改变 RGB 值",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#改变-rgb-值",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["前面我们提到过，任何图像默认之下，它的 RGB 通道值都是 ",(0,i.jsx)(n.code,{children:"1"})," 。这意味着，如果像下面这样使用 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜不会给图像带来任何变化："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="primitive" color-interpolation-filters="sRGB">\n    <feColorMatrix type="matrix"\n        values="1   0   0   0   0\n                0   1   0   0   0\n                0   0   1   0   0\n                0   0   0   1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:"一旦你通过省略或混合颜色通道值，就可以对图像进行颜色化处理，例如："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'\x3c!-- 缺少 B 和 G 通道（只有 R 为 1） --\x3e\n<filter id="red" color-interpolation-filters="sRGB">\n    <feColorMatrix type="matrix" \n        values="1   0   0   0   0\n                0   0   0   0   0\n                0   0   0   0   0\n                0   0   0   1   0 "/>\n</filter>\n\n\x3c!-- 缺少 R 和 G 通道（只有 B 为 1） --\x3e\n<filter id="blue" color-interpolation-filters="sRGB">\n   <feColorMatrix type="matrix" \n       values="0   0   0   0   0\n                0   0   0   0   0\n                0   0   1   0   0\n                0   0   0   1   0 "/>\n</filter>\n\n\x3c!-- 缺少 R 和 B 通道（只有 G 为 1） --\x3e\n<filter id="green" color-interpolation-filters="sRGB">\n    <feColorMatrix  type="matrix"\n        values="0   0   0   0   0\n                0   1   0   0   0\n                0   0   0   0   0\n                0   0   0   1   0 "/>\n</filter>\n\n\x3c!-- 缺少 B 通道（R 和 G 的混合）: 红 + 绿 = 黄--\x3e\n<filter id="yellow" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   0   0   0   0\n                0   1   0   0   0\n                0   0   0   0   0\n                0   0   0   1   0 "/>\n</filter>\n\n\x3c!-- 缺少 G 通道（R 和 B 的混合）:红 + 蓝 = 洋红 --\x3e\n<filter id="magenta" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   0   0   0   0\n                0   0   0   0   0\n                0   0   1   0   0\n                0   0   0   1   0 "/>\n</filter>\n\n\x3c!-- 缺少 R 通道（G 和 B 的混合）:绿 + 蓝 = 青 --\x3e\n<filter id="cyan" color-interpolation-filters="sRGB" >\n    <feColorMatrix  type="matrix" \n        values="0   0   0   0   0\n                0   1   0   0   0\n                0   0   1   0   0\n                0   0   0   1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/abrwWNO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abrwWNO"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"不难发现，RGB通道中某个通道去除之后，另外两个通道会保留，例如去除红色通道会保留着绿色和蓝色通道。当绿色和蓝色混合时，它们产生青色；红色和蓝色混合时产生洋红色；红色和绿色混合时产生黄色。"}),"\n",(0,i.jsx)(n.p,{children:"需要知道的是，当一个值缺失时，另外两个值会取而代之。因此，现在没有了绿色通道，就没有了白色、青色或黄色。然而，这些颜色实际上并没有消失，因为它们的亮度（或 Alpha）值尚未被触及。让我们看看下一步操作这些 alpha 通道会发生什么。"}),"\n",(0,i.jsxs)(n.h3,{id:"改变-alpha-值",children:["改变 Alpha 值",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#改变-alpha-值",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们可以通过 Alpha 通道（第四列）调整阴影和高光色调。第四行影响整体 Alpha 通道，而第四列则影响每个通道的亮度。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'\x3c!-- 0.5 的不透明滤镜 --\x3e\n<filter id="alpha" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   0   0   0   0\n                0   1   0   0   0\n                0   0   1   0   0\n                0   0   0   .5  0 "/>\n</filter>\n\n\x3c!-- 增加绿色不透明度，使其达到整体不透明度的水平 --\x3e\n<filter id="hard-green" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   0   0   0   0\n                0   1   0   1   0\n                0   0   1   0   0\n                0   0   0   1   0 "/>\n</filter>\n\n\x3c!-- 增加红色和绿色不透明度，使其达到整体不透明度的水平 --\x3e\n<filter id="hard-yellow" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   0   0   1   0\n                0   1   0   1   0\n                0   0   1   0   0\n                0   0   0   1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/QWRgMKM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWRgMKM"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"上面几个滤镜效果，仅是调整 Alpha 通道的效果。"}),"\n",(0,i.jsx)(n.p,{children:"在实际使用的时候，我们可以将上面两个示例的方式混合起来使用。例如，在缺少某个颜色通道的同时还可以调整 Alpha 通道。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="blue-shadow-magenta-highlight" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   0   0   0   0\n                0   0   0   0   0\n                0   0   1   1   0\n                0   0   0   1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["非常明显，上面的代码缺省了绿色通道（",(0,i.jsx)(n.code,{children:"G=0"}),"），并在蓝色级别添加了 ",(0,i.jsx)(n.code,{children:"100%"})," 的 Alpha 通道。我们保留了红色值，但覆盖了阴影部分中的所有红色，因此暗色全部变为蓝色，而最亮的值中包含红色的部分变为蓝色和红色的混合色（洋红色）："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/abrwyLM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abrwyLM"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["如果我们把蓝色级别的 Alpha 通道的值设置为一个小于 ",(0,i.jsx)(n.code,{children:"0"})," 的值，比如 ",(0,i.jsx)(n.code,{children:"-1"})," ，那么情况则相反。阴影部分会变成红色而不是蓝色："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="highlight" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   0   0   0   0\n                0   0   0   0   0\n                0   0   1   -1   0\n                0   0   0   1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/OJYgjvp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJYgjvp"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"这个效果与只有红色通道的效果是相同的："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="highlight" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   0   0   0   0\n                0   0   0   0   0\n                0   0   0   0   0\n                0   0   0   1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbQxvw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbQxvw"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["然而，将蓝色级别的 Alpha 通道的值改为 ",(0,i.jsx)(n.code,{children:"0.5"})," 而不是 ",(0,i.jsx)(n.code,{children:"-1"}),"，可以让我们看到暗色中的颜色混合："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="filter" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   0   0   0   0\n                0   0   0   0   0\n                0   0   1  .5   0\n                0   0   0   1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:M,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/ZENyJjm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZENyJjm"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"通道溢出",children:["通道溢出",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#通道溢出",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们可以通过第四行影响各个通道的整体 Alpha 值。例如，将一个或多个颜色通道的值设置得过高，以至于超出了正常范围，导致图像中的这些通道丢失细节并产生高亮区域。如下所示："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="filter" color-interpolation-filters="sRGB">\n    <feColorMatrix type="matrix"  \n        values="1   0   0   0   0\n                0   1   0   0   0\n                0   0   1   0   0\n                0   0  -2   1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/yLWXoGR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLWXoGR"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"处后的图片，看上去有点像相机底片的效果。这里还有一些通道混合的示例："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="no-g-red" color-interpolation-filters="sRGB" >\n    <feColorMatrix  type="matrix" \n        values="1   1   0   0   0\n                0   0   0   0   0\n                0   0   1   0   0\n                0   0   0   1   0 "/>\n</filter>\n\n<filter id="no-g-magenta" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   1   0   0   0\n                0   0   0   0   0\n                0   1   1   0   0\n                0   0   0   1   0 "/>\n</filter>\n\n<filter id="yes-g-colorized-magenta" color-interpolation-filters="sRGB" >\n    <feColorMatrix  type="matrix" \n        values="1   1   0   0   0\n                0   1   0   0   0\n                0   1   1   0   0\n                0   0   0   1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdovRZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdovRZ"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"变亮和变暗",children:[(0,i.jsx)(n.strong,{children:"变亮和变暗"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#变亮和变暗",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["通过将每个通道的 RGB 值设置为小于 ",(0,i.jsx)(n.code,{children:"1"}),"（即全自然强度）的值，可以创建变暗效果。要变亮，则将值增加到大于 ",(0,i.jsx)(n.code,{children:"1"}),"。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="darken" color-interpolation-filters="sRGB" >\n    <feColorMatrix  type="matrix" \n        values=" 0.5   0     0     0   0\n                 0     0.5   0     0   0\n                 0     0     0.5   0   0\n                 0     0     0     1   0 "/>\n</filter>\n\n<filter id="lighten" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1.5   0     0     0   0\n                0     1.5   0     0   0\n                0     0     1.5   0   0\n                0     0     0     1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:G,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/WNBOZNy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNBOZNy"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"灰度",children:[(0,i.jsx)(n.strong,{children:"灰度"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#灰度",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"通过仅接受某一阴影的像素值列，可以创建灰度效果。基于所应用的活动级别，有不同的灰度效果。这里我们进行通道操作，因为我们正在将图像灰度化。考虑以下示例："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="gray-on-light" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="1   0   0   0   0\n                1   0   0   0   0\n                1   0   0   0   0\n                0   0   0   1   0 "/>\n</filter>\n\n<filter id="gray-on-mid" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="0   1   0   0   0\n                0   1   0   0   0\n                0   1   0   0   0\n                0   0   0   1   0 "/>\n</filter>\n\n<filter id="gray-on-dark" color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix" \n        values="0   0   1   0   0\n                0   0   1   0   0\n                0   0   1   0   0\n                0   0   0   1   0 "/>\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/pomwWJq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/pomwWJq"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"单色着色",children:["单色着色",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单色着色",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"上面案例主要展示了如何通过改变颜色通道来调整图像的颜色。接下来的内容将会更具体一点。比如，单色着色。"}),"\n",(0,i.jsxs)(n.p,{children:["假设你需要创建一个单色着色滤镜。例如，要创建一个从黑色到浅橙色 ",(0,i.jsx)(n.code,{children:"#ffcca6"}),"（大约为 ",(0,i.jsx)(n.code,{children:"rgb(100% 80% 65%)"}),"）的滤镜。你可以使用如下代码："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="monochrome"  color-interpolation-filters="sRGB">\n    <feColorMatrix type="matrix"\n        values="1.00  0  0  0  0 \n                0.80  0  0  0  0 \n                0.65  0  0  0  0 \n                0     0  0  1  0" />\n</filter>\n\n\x3c!-- 或者 --\x3e\n<filter id="monochrome"  color-interpolation-filters="sRGB">\n    <feColorMatrix type="matrix"\n        values="1.00  0     0     0  0 \n                0     0.80  0     0  0 \n                0     0     0.65  0  0 \n                0     0     0     1  0" />\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRwGLz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRwGLz"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"如果你熟悉单色打印图像，这种效果实际上可能与单色图像的概念相反。在打印时，你通常控制图像暗部的颜色。因此，打印的单色图像会有一个从深色到白色的过渡。要在 RGB 彩色显示器上实现这种效果，我们需要回到基础的颜色矩阵方程："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"R2 = Rr \xd7 R1 + Gr \xd7 G1 + Br \xd7 B1 + Ar \xd7 A1 + Mr \xd7 1\nG2 = Rg \xd7 R1 + Gg \xd7 G1 + Bg \xd7 B1 + Ag \xd7 A1 + Mg \xd7 1\nB2 = Rb \xd7 R1 + Gb \xd7 G1 + Bb \xd7 B1 + Ab \xd7 A1 + Mb \xd7 1\nA2 = Ra \xd7 R1 + Ga \xd7 G1 + Ba \xd7 B1 + Aa \xd7 A1 + Ma \xd7 1\n1 =  0  \xd7 R1 +  0 \xd7 G1 +  0 \xd7 B1 +  0 \xd7 A1 + 1 \xd7 1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["当输入颜色是黑色时，矩阵列中的 RGB 通道的值都会消失（与 RGB 输入通道中的 ",(0,i.jsx)(n.code,{children:"0"})," 值相乘，其值为 ",(0,i.jsx)(n.code,{children:"0"}),"）。这个时候，你唯一可以控制的是最后一列的常数，即 ",(0,i.jsx)(n.code,{children:"M"})," 列的值。所以你想要图像的暗部显示为浅橙色 ",(0,i.jsx)(n.code,{children:"rgb(100% 80% 65%)"})," ，你需要一个看起来像下面这样的矩阵："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["矩阵中 ",(0,i.jsx)(n.code,{children:"?"})," 位置的数字在输入为黑色时没有任何影响。它们控制图像其余部分的效果。如果它们全为 ",(0,i.jsx)(n.code,{children:"0"})," ，每个输入像素都会有相同的恒定输出，整个图像将变成 ",(0,i.jsx)(n.code,{children:"#ffcca6"})," 颜色："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="filter1"  color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix"\n        values="0 0 0 0 1.00 \n                0 0 0 0 0.80 \n                0 0 0 0 0.65 \n                0 0 0 1 0" />\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["这和 CSS 创建一个 ",(0,i.jsx)(n.code,{children:"#ffcca6"})," 颜色填充区没有差异，所以这不是我们所期望的效果。"]}),"\n",(0,i.jsxs)(n.p,{children:["我们希望当输入为白色时输出颜色为白色（全为 ",(0,i.jsx)(n.code,{children:"1"})," ），所以你可能会认为可以用 ",(0,i.jsx)(n.code,{children:"1"})," 替换每个 ",(0,i.jsx)(n.code,{children:"?"}),"。然而，每个像素都有这些常数添加进去。添加这些常数后，你会得到一张曝光过度的图像，大部分较亮的细节都被洗掉了。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="filter1"  color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix"\n        values="1 1 1 0 1.00 \n                1 1 1 0 0.80 \n                1 1 1 0 0.65 \n                0 0 0 1 0" />\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"可以说，这个效果也不是我们所期望的。"}),"\n",(0,i.jsxs)(n.p,{children:["相反，你需要计算为白色输入值创建白色最终值所需添加到每个通道的量。换句话说，",(0,i.jsx)(n.code,{children:"?"})," 被 ",(0,i.jsx)(n.code,{children:"1"})," 减去用于黑色的常数颜色所代替："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="filter1"  color-interpolation-filters="sRGB">\n    <feColorMatrix type="matrix"\n        values="0    0 0 0 1.00 \n                0.20 0 0 0 0.80 \n                0.35 0 0 0 0.65 \n                0    0 0 1 0" />\n</filter>\n\n\x3c!-- 或者 --\x3e\n<filter id="filter2"  color-interpolation-filters="sRGB">\n    <feColorMatrix type="matrix"\n     values="0 0    0     0 1.00 \n             0 0.20 0     0 0.80 \n             0 0    0.35  0 0.65 \n             0 0    0     1 0" />\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:"使用这个矩阵，结果如下所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/QWRgqJR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWRgqJR"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["你可以尝试着在下面的示例中调整颜色，查看 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜给图像着色（单色）的效果："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/gOJRXbZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOJRXbZ"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"双色调着色",children:["双色调着色",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#双色调着色",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"前面，我们已经尝试了使用颜色矩阵滤镜创建了从黑到彩色的单色效果和彩色到白色的单色效果。接下来，我们来创建彩色到彩色的效果，即双色调着色。"}),"\n",(0,i.jsx)(n.p,{children:"实现这个效果的方法与彩色到白色矩阵的方法相同。你需要做的是将矩阵的常数列（最后一列）设置为你想要输入图像黑色部分显示的颜色值，然后将矩阵的其他列设置为这些颜色值与白色部分显示的颜色值之间的差值。这样可以实现黑色部分和白色部分在输出图像中的颜色转换。"}),"\n",(0,i.jsxs)(n.p,{children:["例如，你要创建一个深蓝色 ",(0,i.jsx)(n.code,{children:"#0d2680"})," （即 ",(0,i.jsx)(n.code,{children:"rgb(5% 15% 50%)"}),"）到浅橙色 ",(0,i.jsx)(n.code,{children:"#f2a626"})," （即 ",(0,i.jsx)(n.code,{children:"rgb(95% 65% 15%)"}),"）的双色调滤镜效果，你可以使用像下面这样的矩阵："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="filter"  color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix"\n        values="0.95 0 0 0 0.05 \n                0.65 0 0 0 0.15 \n                0.15 0 0 0 0.50 \n                0    0 0 1 0" />\n</filter>\n\n\x3c!-- 或者 --\x3e\n<filter id="filter"  color-interpolation-filters="sRGB" >\n    <feColorMatrix type="matrix"\n        values="0.95 0    0    0 0.05 \n                0    0.65 0    0 0.15 \n                0    0    0.15 0 0.50 \n                0    0    0    1 0" />\n</filter>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["白色点将变成 ",(0,i.jsx)(n.code,{children:"rgb(95%+5%, 65%+15%, 15%+50%)"}),"。这与之前的浅橙色相同。然而，所有的中间灰色将介于该颜色和深蓝色之间。效果如下："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/OJYgOrP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJYgOrP"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"你也可以尝试在下面这个案例上选择你喜欢的颜色，查看图像应用不同颜色的双色调滤镜效果："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/JjqJOVm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjqJOVm"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["当然，你选择的白点和黑点颜色不必是可以实现的颜色。你可以像“通道溢出”中展示的案例一样，将某个通道过度溢出或“欠曝光”（即负值）来调整颜色。例如下面这个示例，每个可选值都将在 ",(0,i.jsx)(n.code,{children:"-10 ~ 10"})," 的范围，尝试调整每个通道的值，查看滤镜给图像带来的变化："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/bGyWjZB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGyWjZB"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"伽马校正着色",children:["伽马校正着色",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#伽马校正着色",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"伽马校正是数字图像处理中常见的操作，用于对亮度或颜色强度进行非线性调整。通过对所有颜色通道应用相同的伽马校正，可以调整中间调的亮度，而不会使亮部或暗部过度曝光或欠曝光。如果分别对每个颜色通道进行伽马校正，可以在保持黑白平衡的同时，改变图像的整体色彩平衡。"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 的双色调着色可以看作是 ",(0,i.jsx)(n.code,{children:"sRGB"})," 颜色空间中选择两种颜色，并在它们之间画一条直线。所有的灰度都映射到这条线上的一个值。如果你对这条线应用颜色特定的伽马因子，你可以在三维颜色空间中创建一条曲线。它可以从黑色开始，最终到达白色，但在此过程中可以通过红色、蓝色或绿色，而不是纯灰色。"]}),"\n",(0,i.jsxs)(n.p,{children:["不过，在 SVG 滤镜中，",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 是不能应用伽马因子。庆幸的是，你可以使用 SVG 中的 ",(0,i.jsx)(n.code,{children:"<feComponentTransfer>"})," 滤镜来实现。它支持对颜色通道进行各种不同的函数操作，但每次只能对一个通道进行操作。每个通道都有自己的元素来描述将要应用的转换函数：",(0,i.jsx)(n.code,{children:"<feFuncR>"}),"、",(0,i.jsx)(n.code,{children:"<feFuncG>"}),"、",(0,i.jsx)(n.code,{children:"<feFuncB>"})," 和 ",(0,i.jsx)(n.code,{children:"<feFuncA>"}),"。每个函数元素都有一个 ",(0,i.jsx)(n.code,{children:"type"})," 属性来描述将使用的数学运算，然后各种其他属性提供每种类型的参数。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["URL：",(0,i.jsx)(n.a,{href:"https://yoksel.github.io/svg-filters/#/",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/svg-filters/#/"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"对应的代码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<filter id="filter" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="sRGB">\n    <feComponentTransfer x="0%" y="0%" width="100%" height="100%" in="SourceGraphic" result="componentTransfer">\n        <feFuncR type="identity"/>\n        <feFuncG type="table" tableValues="0 1 0"/>\n        <feFuncB type="linear" slope="1" intercept="0"/>\n        <feFuncA type="identity"/>\n    </feComponentTransfer>\n</filter>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["在这节课，我们不会对 ",(0,i.jsx)(n.code,{children:"<feComponentTransfer>"})," 滤镜做更多的阐述。小册后面有一节课，将与大家一起探讨这个滤镜的使用。"]}),"\n",(0,i.jsxs)(n.h2,{id:"fecolormatrix-滤镜的其他使用方式",children:[(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜的其他使用方式",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fecolormatrix-滤镜的其他使用方式",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["在介绍 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜的时候，我们提到过，它的 ",(0,i.jsx)(n.code,{children:"type"})," 有多个值，除了上面聊的 ",(0,i.jsx)(n.code,{children:"matrix"})," 值之外，还有 ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"saturate"})})," 、",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"hueRotate"})})," 和 ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"luminanceToAlpha"})}),"："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"saturate"})}),"：用来调整图像的饱和度。你可以通过一个参数值（",(0,i.jsx)(n.code,{children:"0 ~ 1"})," 之间）指定饱和度的程度。",(0,i.jsx)(n.code,{children:" 0  "}),"表示完全去饱和（灰度），",(0,i.jsx)(n.code,{children:"1"})," 表示不改变饱和度。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"hueRotate"})}),"：用于旋转图像的色相。你可以通过一个角度值（单位是度）指定旋转的角度。这种方式可以改变图像的整体色调。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"luminanceToAlpha"})}),"：将图像的亮度值映射到 Alpha 通道，并将 RGB 通道设置为 ",(0,i.jsx)(n.code,{children:"0"}),"。这个效果通常用于将图像的亮度信息转化为透明度信息。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"这三种类型的使用方式相对而言要简单的多，这里就不详细阐述，通过下面这个工具向大家展示它们的用法："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:s,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["URL：",(0,i.jsx)(n.a,{href:"https://yoksel.github.io/svg-filters/#/",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/svg-filters/#/"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"分别为这三个类型创建滤镜："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'\x3c!-- saturate --\x3e\n<filter id="saturate" color-interpolation-filters="sRGB">\n    <feColorMatrix type="saturate" values="6" in="SourceGraphic" />\n</filter>\n\n\x3c!-- hueRotate --\x3e\n<filter id="hueRotate" color-interpolation-filters="sRGB">\n    <feColorMatrix type="hueRotate" values="183" in="SourceGraphic" />\n</filter>\n\n\x3c!-- luminanceToAlpha --\x3e\n<filter id="luminanceToAlpha" color-interpolation-filters="sRGB">\n    <feColorMatrix type="luminanceToAlpha" in="SourceGraphic" />\n</filter>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Demo 地址：",(0,i.jsx)(n.a,{href:"https://codepen.io/airen/full/gOJRvjK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOJRvjK"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"小结",children:["小结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["SVG 滤镜是改变 Web 上图像效果的一种强大工具，尤其是通过 ",(0,i.jsx)(n.code,{children:"<feColorMatrix>"})," ，可以进行复杂的颜色操作。相比之下，CSS 的滤镜（",(0,i.jsx)(n.code,{children:"filter"}),"）、混合模式（",(0,i.jsx)(n.code,{children:"mix-blend-mode"}),"）和遮罩（",(0,i.jsx)(n.code,{children:"mask"}),"）也能实现类似效果，且实现更为简便。选择使用哪种方法时，需要根据项目实际需求来选择最为合适的的实现方式。"]})]})}function Y(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(z,{...e})}):z(e)}let Q=Y;Y.__RSPRESS_PAGE_META={},Y.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F36-%E9%AB%98%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E6%BB%A4%E9%95%9C%E7%9A%84%E8%BF%9B%E9%98%B6%E4%B9%8B%E9%AB%98%E9%98%B6%E9%A2%9C%E8%89%B2%E7%9F%A9%E9%98%B5.md"]={toc:[{text:"CSS 滤镜和混合模式不足之处",id:"css-滤镜和混合模式不足之处",depth:2},{text:"回顾一下 `<feColorMatrix>` 滤镜",id:"回顾一下-fecolormatrix-滤镜",depth:2},{text:"理解 `<feColorMatrix>` 的颜色矩阵",id:"理解-fecolormatrix-的颜色矩阵",depth:2},{text:"`<feColorMatrix>` 滤镜的使用",id:"fecolormatrix-滤镜的使用",depth:2},{text:"改变 RGB 值",id:"改变-rgb-值",depth:3},{text:"改变 Alpha 值",id:"改变-alpha-值",depth:3},{text:"通道溢出",id:"通道溢出",depth:3},{text:"**变亮和变暗**",id:"变亮和变暗",depth:3},{text:"**灰度**",id:"灰度",depth:3},{text:"单色着色",id:"单色着色",depth:3},{text:"双色调着色",id:"双色调着色",depth:3},{text:"伽马校正着色",id:"伽马校正着色",depth:2},{text:"`<feColorMatrix>` 滤镜的其他使用方式",id:"fecolormatrix-滤镜的其他使用方式",depth:2},{text:"小结",id:"小结",depth:2}],title:"36-高级篇：SVG 滤镜的进阶之高阶颜色矩阵",headingTitle:"36-高级篇：SVG 滤镜的进阶之高阶颜色矩阵",frontmatter:{}}}}]);