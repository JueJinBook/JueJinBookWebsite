"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["28897"],{947228:function(e,n,s){e.exports=s.p+"static/image/0feef6a10c1589d0eef46c32345ad739.e23577b7.webp"},990759:function(e,n,s){e.exports=s.p+"static/image/1cef5a7be09cc113c1acd2e1886ac620.3d0094e5.webp"},106087:function(e,n,s){e.exports=s.p+"static/image/533ce56f189c1a64a8b497e96d151b6f.5e4fdf48.webp"},452931:function(e,n,s){e.exports=s.p+"static/image/5d54ec371415f2cdfad0e3f3fa1914d4.afd4c925.webp"},370324:function(e,n,s){e.exports=s.p+"static/image/6b2af0da96d8f01f1fa53e86f72ba9c3.58d338ff.webp"},39010:function(e,n,s){e.exports=s.p+"static/image/b16f959e3b546c63c0fcef13d400c788.7c734daa.webp"},626432:function(e,n,s){e.exports=s.p+"static/image/c5defc9b9231f722d368a2425ad6b866.e86d6cd8.webp"},431218:function(e,n,s){e.exports=s.p+"static/image/dd0a7e6fdf9dfc047e391bb784dcc63f.14295757.gif"},901338:function(e,n,s){s.r(n),s.d(n,{default:()=>L});var t=s(552676),r=s(740453),i=s(947228),a=s(626432);let c=s.p+"static/image/c55eb75c865304047f1aa52e16a047f1.bbb9c601.gif";var l=s(431218),o=s(106087);let p=s.p+"static/image/ae890b949f74122832cf12e719e9e44d.43dfe730.webp",d=s.p+"static/image/9da13b6aeaef1572e833ca21a4f53ac8.5eac648f.webp",m=s.p+"static/image/da7857413bbb50b8138903e30ea0669a.46586a67.webp",f=s.p+"static/image/28a966e76615ecfcd2ca8806e56a5c67.22c14e7f.webp",x=s.p+"static/image/0aca50d82c60df180d5e28f62b073450.4b114e02.webp",h=s.p+"static/image/d18cb8d8d36913d80916e00cd621d1b0.46976b75.webp",j=s.p+"static/image/4cdc15e0723f6883324d4f869251b4b7.86cacb0a.webp";var b=s(990759);let u=s.p+"static/image/fc87ca92cac4ebda2f5101ff47ca41a8.fb0f910d.webp",g=s.p+"static/image/4827e4601dab40c6f9c388329d0ab235.9b8ac3d5.webp",E=s.p+"static/image/223be6ba4a2808ff1f2c4dc35249e95c.5bf591aa.webp",y=s.p+"static/image/9cc1efbc21348a2c7a687b4f107b7604.da9ec888.webp",v=s.p+"static/image/31ad6267b960d98c8f9d128d5495249e.fafeac8e.webp";var _=s(370324);let A=s.p+"static/image/9f566e6b95c3493dfbc9254edb7e3ec4.29d2daa3.webp";var w=s(39010),R=s(452931);let C=s.p+"static/image/5c438b9e457e1d8dc54606618baf7940.f12f713b.webp",P=s.p+"static/image/8b71784ff80bd4ae1038cb96a984aa34.91b797a4.gif",N=s.p+"static/image/65feb746479d04254d35675195e0523f.7c54bc35.gif";function F(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",ul:"ul",li:"li",h2:"h2"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"第56章reactplayground项目实战babel编译iframe预览",children:["第56章—ReactPlayground项目实战：babel编译、iframe预览",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第56章reactplayground项目实战babel编译iframe预览",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"\uFEFF我们实现了多文件的切换、文件内容编辑："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:N,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"左边部分可以告一段落。"}),"\n",(0,t.jsx)(n.p,{children:"这节我们开始写右边部分，也就是文件的编译，还有 iframe 预览。"}),"\n",(0,t.jsx)(n.p,{children:"编译前面讲过，用 @babel/standalone 这个包。"}),"\n",(0,t.jsx)(n.p,{children:"安装下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install --save @babel/standalone\n\nnpm install --save-dev @types/babel__standalone\n"})}),"\n",(0,t.jsx)(n.p,{children:"在 Preview 目录下新建 compiler.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { transform } from '@babel/standalone'\nimport { Files } from '../../PlaygroundContext'\nimport { ENTRY_FILE_NAME } from '../../files'\n\nexport const babelTransform = (filename: string, code: string, files: Files) => {\n  let result = ''\n  try {\n    result = transform(code, {\n      presets: ['react', 'typescript'],\n      filename,\n      plugins: [],\n      retainLines: true\n    }).code!\n  } catch (e) {\n    console.error('编译出错', e);\n  }\n  return result\n}\n\nexport const compile = (files: Files) => {\n  const main = files[ENTRY_FILE_NAME]\n  return babelTransform(ENTRY_FILE_NAME, main.value, files)\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"调用 babel 的 transform 方法进行编译。"}),"\n",(0,t.jsx)(n.p,{children:"presets 指定 react 和 typescript，也就是对 jsx 和 ts 语法做处理。"}),"\n",(0,t.jsx)(n.p,{children:"retainLines 是编译后保持原有行列号不变。"}),"\n",(0,t.jsx)(n.p,{children:"在 compile 方法里，对 main.tsx 的内容做编译，返回编译后的代码。"}),"\n",(0,t.jsx)(n.p,{children:"在 Preview 组件里调用下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { useContext, useEffect, useState } from \"react\"\nimport { PlaygroundContext } from \"../../PlaygroundContext\"\nimport Editor from \"../CodeEditor/Editor\";\nimport { compile } from \"./compiler\";\n\nexport default function Preview() {\n\n    const { files} = useContext(PlaygroundContext)\n    const [compiledCode, setCompiledCode] = useState('')\n\n    useEffect(() => {\n        const res = compile(files);\n        setCompiledCode(res);\n    }, [files]);\n\n    return <div style={{height: '100%'}}>\n        <Editor file={{\n            name: 'dist.js',\n            value: compiledCode,\n            language: 'javascript'\n        }}/>\n    </div>\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"在 files 变化的时候，对 main.tsx 内容做编译，然后展示编译后的代码。"}),"\n",(0,t.jsx)(n.p,{children:"看下效果："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:P,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，右边展示了编译后的代码，并且左边编辑的时候，右边会实时展示编译的结果。"}),"\n",(0,t.jsx)(n.p,{children:"这样编译后的代码能直接放到 iframe 里跑么？"}),"\n",(0,t.jsx)(n.p,{children:"明显不能，我们只编译了 main.tsx，它引入的模块没有做处理。"}),"\n",(0,t.jsx)(n.p,{children:"前面讲过，可以通过 babel 插件来处理 import 语句，转换成 blob url 的方式。"}),"\n",(0,t.jsx)(n.p,{children:"我们来写下这个插件："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:C,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function customResolver(files: Files): PluginObj {\n    return {\n      visitor: {\n        ImportDeclaration(path) {\n           path.node.source.value = '23333';\n        },\n      },\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"babel 的编译流程分为 parse、transform、generate 三个阶段："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:R,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["通过 ",(0,t.jsx)(n.a,{href:"https://astexplorer.net/#/gist/6f01ee950445813f623214fb2c7abba9/b45fffd5a735f829d15098efa4f860438c3a070e",target:"_blank",rel:"noopener noreferrer",children:"astexplorer.net"})," 看下对应的 AST："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:w,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们要改的就是 ImportDeclaration 节点的 source.value 的内容。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:A,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，确实被替换了。"}),"\n",(0,t.jsx)(n.p,{children:"那替换成什么样还不是我们说了算。"}),"\n",(0,t.jsx)(n.p,{children:"我们分别对 css、json 还有 tsx、ts 等后缀名的 import 做下替换："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:_,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"首先，我们要对路径做下处理，比如 ./App.css 这种路径提取出 App.css 部分"}),"\n",(0,t.jsx)(n.p,{children:"万一输入的是 ./App 这种路径，也要能查找到对应的 App.tsx 模块："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"如果去掉 ./ 之后，剩下的不包含 . 比如 ./App 这种，那就要补全 App 为 App.tsx 等。"}),"\n",(0,t.jsx)(n.p,{children:"过滤下 files 里的 js、jsx、ts、tsx 文件，如果包含这个名字的模块，那就按照补全后的模块名来查找 file。"}),"\n",(0,t.jsx)(n.p,{children:"之后把 file.value 也就是文件内容转成对应的 blob url："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"ts 文件的处理就是用 babel 编译下，然后用 URL.createObjectURL 把编译后的文件内容作为 url。"}),"\n",(0,t.jsx)(n.p,{children:"而 css 和 json 文件则是要再做一下处理："}),"\n",(0,t.jsx)(n.p,{children:"json 文件的处理比较简单，就是把 export 一下这个 json，然后作为 blob url 即可："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:E,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"而 css 文件，则是要通过 js 代码把它添加到 head 里的 style 标签里："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"全部代码如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { transform } from '@babel/standalone'\nimport { File, Files } from '../../PlaygroundContext'\nimport { ENTRY_FILE_NAME } from '../../files'\nimport { PluginObj } from '@babel/core';\n\nexport const babelTransform = (filename: string, code: string, files: Files) => {\n  let result = ''\n  try {\n    result = transform(code, {\n      presets: ['react', 'typescript'],\n      filename,\n      plugins: [customResolver(files)],\n      retainLines: true\n    }).code!\n  } catch (e) {\n    console.error('编译出错', e);\n  }\n  return result\n}\n\nconst getModuleFile = (files: Files, modulePath: string) => {\n    let moduleName = modulePath.split('./').pop() || ''\n    if (!moduleName.includes('.')) {\n        const realModuleName = Object.keys(files).filter(key => {\n            return key.endsWith('.ts') \n                || key.endsWith('.tsx') \n                || key.endsWith('.js')\n                || key.endsWith('.jsx')\n        }).find((key) => {\n            return key.split('.').includes(moduleName)\n        })\n        if (realModuleName) {\n            moduleName = realModuleName\n        }\n      }\n    return files[moduleName]\n}\n\nconst json2Js = (file: File) => {\n    const js = `export default ${file.value}`\n    return URL.createObjectURL(new Blob([js], { type: 'application/javascript' }))\n}\n\nconst css2Js = (file: File) => {\n    const randomId = new Date().getTime()\n    const js = `\n(() => {\n    const stylesheet = document.createElement('style')\n    stylesheet.setAttribute('id', 'style_${randomId}_${file.name}')\n    document.head.appendChild(stylesheet)\n\n    const styles = document.createTextNode(\\`${file.value}\\`)\n    stylesheet.innerHTML = ''\n    stylesheet.appendChild(styles)\n})()\n    `\n    return URL.createObjectURL(new Blob([js], { type: 'application/javascript' }))\n}\n\nfunction customResolver(files: Files): PluginObj {\n    return {\n        visitor: {\n            ImportDeclaration(path) {\n                const modulePath = path.node.source.value\n                if(modulePath.startsWith('.')) {\n                    const file = getModuleFile(files, modulePath)\n                    if(!file) \n                        return\n\n                    if (file.name.endsWith('.css')) {\n                        path.node.source.value = css2Js(file)\n                    } else if (file.name.endsWith('.json')) {\n                        path.node.source.value = json2Js(file)\n                    } else {\n                        path.node.source.value = URL.createObjectURL(\n                            new Blob([babelTransform(file.name, file.value, files)], {\n                                type: 'application/javascript',\n                            })\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport const compile = (files: Files) => {\n  const main = files[ENTRY_FILE_NAME]\n  return babelTransform(ENTRY_FILE_NAME, main.value, files)\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"看下效果："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，./App 的模块内容编译之后变为了 blob url。"}),"\n",(0,t.jsx)(n.p,{children:"我们引入 ./App.css 试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，css 模块也变为了 blob url。"}),"\n",(0,t.jsx)(n.p,{children:"我们在 devtools 里 fetch 下 blob url 可以看到它的内容："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'fetch("blob:http://localhost:5173/xxxx")\n  .then(response => response.text())\n  .then(text => {\n    console.log(text);\n  });\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，./App.tsx 的内容是 babel 编译过后的。"}),"\n",(0,t.jsx)(n.p,{children:"./App.css 的内容也是我们做的转换。"}),"\n",(0,t.jsx)(n.p,{children:"而上面的 react、react-dom/client 的包是通过 import maps 引入："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"其实还有一个问题要处理："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"比如 App.tsx 的 jsx 内容编译后变成了 React.createElement，但是我们并没有引入 React，这样运行会报错。"}),"\n",(0,t.jsx)(n.p,{children:"处理下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"babel 编译之前，判断下文件内容有没有 import React，没有就 import 一下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export const beforeTransformCode = (filename: string, code: string) => {\n    let _code = code\n    const regexReact = /import\\s+React/g\n    if ((filename.endsWith('.jsx') || filename.endsWith('.tsx')) && !regexReact.test(code)) {\n      _code = `import React from 'react';\\n${code}`\n    }\n    return _code\n}\n\nexport const babelTransform = (filename: string, code: string, files: Files) => {\n    let _code = beforeTransformCode(filename, code);\n    let result = ''\n    try {\n        result = transform(_code, {\n        presets: ['react', 'typescript'],\n        filename,\n        plugins: [customResolver(files)],\n        retainLines: true\n        }).code!\n    } catch (e) {\n        console.error('编译出错', e);\n    }\n    return result\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"现在，如果没引入 React 就会自动引入："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"至此， main.tsx 的所有依赖都引入了："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"react、react-dom/client 的包通过 import maps 引入"}),"\n",(0,t.jsx)(n.li,{children:"./App.tsx、./App.css 或者 xx.json 之类的依赖通过 blob url 引入"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"这样，编译过后的这段代码就可以直接在浏览器里跑了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们加个 iframe 来跑下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"加一个 iframe 标签，src url 同样是用 blob url 的方式。"}),"\n",(0,t.jsx)(n.p,{children:"用 ?raw 的 import 引入 iframe.html的文件内容："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8"/>\n  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>\n  <title>Preview</title>\n</head>\n<body>\n<script type="importmap"><\/script>\n<script type="module" id="appSrc"><\/script>\n<div id="root"></div>\n</body>\n</html>\n'})}),"\n",(0,t.jsx)(n.p,{children:"替换其中的 import maps 和 src 的内容。"}),"\n",(0,t.jsx)(n.p,{children:"之后创建 blob url 设置到 iframe 的 src。"}),"\n",(0,t.jsx)(n.p,{children:"当 import maps 的内容或者 compiledCode 的内容变化的时候，就重新生成 blob url。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { useContext, useEffect, useState } from \"react\"\nimport { PlaygroundContext } from \"../../PlaygroundContext\"\nimport Editor from \"../CodeEditor/Editor\";\nimport { compile } from \"./compiler\";\nimport iframeRaw from './iframe.html?raw'\nimport { IMPORT_MAP_FILE_NAME } from \"../../files\";\n\nexport default function Preview() {\n\n    const { files} = useContext(PlaygroundContext)\n    const [compiledCode, setCompiledCode] = useState('')\n    const [iframeUrl, setIframeUrl] = useState(getIframeUrl());\n\n    useEffect(() => {\n        const res = compile(files);\n        setCompiledCode(res);\n    }, [files]);\n\n    const getIframeUrl = () => {\n        const res = iframeRaw.replace(\n            '<script type=\"importmap\"><\/script>', \n            `<script type=\"importmap\">${\n                files[IMPORT_MAP_FILE_NAME].value\n            }<\/script>`\n        ).replace(\n            '<script type=\"module\" id=\"appSrc\"><\/script>',\n            `<script type=\"module\" id=\"appSrc\">${compiledCode}<\/script>`,\n        )\n        return URL.createObjectURL(new Blob([res], { type: 'text/html' }))\n    }\n\n    useEffect(() => {\n        setIframeUrl(getIframeUrl())\n    }, [files[IMPORT_MAP_FILE_NAME].value, compiledCode]);\n\n    return <div style={{height: '100%'}}>\n        <iframe\n            src={iframeUrl}\n            style={{\n                width: '100%',\n                height: '100%',\n                padding: 0,\n                border: 'none',\n            }}\n        />\n        {/* <Editor file={{\n            name: 'dist.js',\n            value: compiledCode,\n            language: 'javascript'\n        }}/> */}\n    </div>\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"看下效果："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"看下 iframe 的内容："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,t.jsx)(n.p,{children:"预览功能完成！"}),"\n",(0,t.jsxs)(n.p,{children:["案例代码上传了",(0,t.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/react-playground-project",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git reset --hard a02195cfa12948e969bb9dc9cf01cdbe79331ab4\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"前面章节实现了代码编辑，这节我们实现了编译以及在 iframe 里预览。"}),"\n",(0,t.jsx)(n.p,{children:"使用 @babel/standalone 做的 tsx 代码的编译，编译过程中需要对 .tsx、.css、.json 等模块的 import 做处理，变成 blob url 的方式。"}),"\n",(0,t.jsx)(n.p,{children:"tsx 模块直接用 babel 编译，css 模块包一层代码加到 head 的 style 标签里，json 包一层代码直接 export 即可。"}),"\n",(0,t.jsx)(n.p,{children:"对于 react、react-dom/client 这种，用浏览器的 import maps 来引入。"}),"\n",(0,t.jsx)(n.p,{children:"之后把 iframe.html 的内容替换 import maps 和 src 部分后，同样用 blob url 设置为 iframe 的 src 就可以了。"}),"\n",(0,t.jsx)(n.p,{children:"这样就能实现浏览器里的编译和预览。"})]})}function T(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(F,{...e})}):F(e)}let L=T;T.__RSPRESS_PAGE_META={},T.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC56%E7%AB%A0%E2%80%94ReactPlayground%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9Ababel%E7%BC%96%E8%AF%91%E3%80%81iframe%E9%A2%84%E8%A7%88.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第56章—ReactPlayground项目实战：babel编译、iframe预览",headingTitle:"第56章—ReactPlayground项目实战：babel编译、iframe预览",frontmatter:{}}}}]);