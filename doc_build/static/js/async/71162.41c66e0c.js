"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["71162"],{654090:function(e,r,n){n.r(r),n.d(r,{default:()=>p});var a=n(552676),s=n(740453);let d=n.p+"static/image/6d5df0b815fd028b4894ad1949afc176.368f1861.png",i=n.p+"static/image/9c313ea2d4022a8e9cde0829080d6692.ace049c6.png",c=n.p+"static/image/5c873d3da5491b9f37ff9b9c75e27dc4.94abc12c.png",h=n.p+"static/image/fe3de95e94d2b250ef0754ea9681ba08.aefdddcd.png";function l(e){let r=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",blockquote:"blockquote",ul:"ul",li:"li",img:"img",h3:"h3",code:"code",strong:"strong",h4:"h4"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.h1,{id:"2babel-的编译流程",children:["2.Babel 的编译流程",(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#2babel-的编译流程",children:"#"})]}),"\n",(0,a.jsx)(r.p,{children:"上一节我们讲到了 babel 是一个转译器，那么什么是转译器呢，转译器的编译流程是什么？"}),"\n",(0,a.jsxs)(r.h2,{id:"编译器和转译器",children:["编译器和转译器",(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#编译器和转译器",children:"#"})]}),"\n",(0,a.jsx)(r.p,{children:"编译的定义就是从一种编程语言转成另一种编程语言。主要指的是高级语言到低级语言。"}),"\n",(0,a.jsxs)(r.blockquote,{children:["\n",(0,a.jsx)(r.p,{children:"高级语言：有很多用于描述逻辑的语言特性，比如分支、循环、函数、面向对象等，接近人的思维，可以让开发者快速的通过它来表达各种逻辑。比如 c++、javascript。"}),"\n"]}),"\n",(0,a.jsxs)(r.blockquote,{children:["\n",(0,a.jsx)(r.p,{children:"低级语言：与硬件和执行细节有关，会操作寄存器、内存，具体做内存与寄存器之间的复制，需要开发者理解熟悉计算机的工作原理，熟悉具体的执行细节。比如汇编语言、机器语言。"}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"一般编译器 Compiler 是指高级语言到低级语言的转换工具。而从高级语言到高级语言的转换工具，被叫做转换编译器，简称转译器 (Transpiler)。"}),"\n",(0,a.jsx)(r.p,{children:"babel 就是一个 Javascript Transpiler。"}),"\n",(0,a.jsxs)(r.h2,{id:"babel-的编译流程",children:["babel 的编译流程",(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#babel-的编译流程",children:"#"})]}),"\n",(0,a.jsx)(r.p,{children:"babel 是 source to source 的转换，整体编译流程分为三步："}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"parse：通过 parser 把源码转成抽象语法树（AST）"}),"\n",(0,a.jsx)(r.li,{children:"transform：遍历 AST，调用各种 transform 插件对 AST 进行增删改"}),"\n",(0,a.jsx)(r.li,{children:"generate：把转换后的 AST 打印成目标代码，并生成 sourcemap"}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsxs)(r.h3,{id:"为什么会分为这三步",children:["为什么会分为这三步",(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么会分为这三步",children:"#"})]}),"\n",(0,a.jsx)(r.p,{children:"为什么 babel 的编译流程会分 parse、transform、generate 这 3 步呢？"}),"\n",(0,a.jsx)(r.p,{children:"源码是一串按照语法格式来组织的字符串，人能够认识，但是计算机并不认识，想让计算机认识就要转成一种数据结构，通过不同的对象来保存不同的数据，并且按照依赖关系组织起来，这种数据结构就是抽象语法树（abstract syntax tree）。"}),"\n",(0,a.jsxs)(r.p,{children:["之所以叫“抽象”语法树是因为数据结构中省略掉了一些无具体意义的分隔符比如 ",(0,a.jsx)(r.code,{children:";"}),"  ",(0,a.jsx)(r.code,{children:"{"})," ",(0,a.jsx)(r.code,{children:"}"})," 等。"]}),"\n",(0,a.jsx)(r.p,{children:"有了 AST，计算机就能理解源码字符串的意思，而理解是能够转换的前提，所以编译的第一步需要把源码 parse 成 AST。"}),"\n",(0,a.jsx)(r.p,{children:"转成 AST 之后就可以通过修改 AST 的方式来修改代码，这一步会遍历 AST 并进行各种增删改，这一步也是 babel 最核心的部分。"}),"\n",(0,a.jsx)(r.p,{children:"经过转换以后的 AST 就是符合要求的代码，就可以再转回字符串，转回字符串的过程中把之前删掉的一些分隔符再加回来。"}),"\n",(0,a.jsxs)(r.p,{children:["简单总结一下就是：",(0,a.jsx)(r.strong,{children:"为了让计算机理解代码需要先对源码字符串进行 parse，生成 AST，把对代码的修改转为对 AST 的增删改，转换完 AST 之后再打印成目标代码字符串。"})]}),"\n",(0,a.jsxs)(r.h3,{id:"这三步都做了什么",children:["这三步都做了什么？",(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#这三步都做了什么",children:"#"})]}),"\n",(0,a.jsx)(r.p,{children:"知道了为什么 babel 要分为这样的 3 步，那这 3 步具体都做了什么呢？"}),"\n",(0,a.jsxs)(r.h4,{id:"parse",children:["parse",(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#parse",children:"#"})]}),"\n",(0,a.jsx)(r.p,{children:"parse 阶段的目的是把源码字符串转换成机器能够理解的 AST，这个过程分为词法分析、语法分析。"}),"\n",(0,a.jsxs)(r.p,{children:["比如 ",(0,a.jsx)(r.code,{children:"let name = 'guang';"})," 这样一段源码，我们要先把它分成一个个不能细分的单词（token），也就是 ",(0,a.jsx)(r.code,{children:"let"}),", ",(0,a.jsx)(r.code,{children:"name"}),", ",(0,a.jsx)(r.code,{children:"="}),", ",(0,a.jsx)(r.code,{children:"'guang'"}),"，这个过程是词法分析，按照单词的构成规则来拆分字符串成单词。"]}),"\n",(0,a.jsx)(r.p,{children:"之后要把 token 进行递归的组装，生成 AST，这个过程是语法分析，按照不同的语法结构，来把一组单词组合成对象，比如声明语句、赋值表达式等都有对应的 AST 节点。"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsxs)(r.h4,{id:"transform",children:["transform",(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#transform",children:"#"})]}),"\n",(0,a.jsx)(r.p,{children:"transform 阶段是对 parse 生成的 AST 的处理，会进行 AST 的遍历，遍历的过程中处理到不同的 AST 节点会调用注册的相应的 visitor 函数，visitor 函数里可以对 AST 节点进行增删改，返回新的 AST（可以指定是否继续遍历新生成的 AST）。这样遍历完一遍 AST 之后就完成了对代码的修改。"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsxs)(r.h4,{id:"generate",children:["generate",(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#generate",children:"#"})]}),"\n",(0,a.jsxs)(r.p,{children:["generate 阶段会把 AST 打印成目标代码字符串，并且会生成 sourcemap。不同的 AST 对应的不同结构的字符串。比如 ",(0,a.jsx)(r.code,{children:"IfStatement"})," 就可以打印成  ",(0,a.jsx)(r.code,{children:"if(test) {}"})," 格式的代码。这样从 AST 根节点进行递归的字符串拼接，就可以生成目标代码的字符串。"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(r.p,{children:"sourcemap 记录了源码到目标代码的转换关系，通过它我们可以找到目标代码中每一个节点对应的源码位置，用于调试的时候把编译后的代码映射回源码，或者线上报错的时候把报错位置映射到源码。"}),"\n",(0,a.jsxs)(r.h2,{id:"总结",children:["总结",(0,a.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(r.p,{children:"我们了解了编译和转译的区别，明确了 babel 是一个 js transpiler。然后学习了 babel 编译流程的三个步骤 parse、transform、generate，为什么会有这三步，每一步都干了什么（ parse 生成 ast，transform 对 ast 进行转换，generate 打印 ast 成目标代码并生成 sourcemap）。"}),"\n",(0,a.jsx)(r.p,{children:"这一节对整体流程有了一个认识，这是后续深入学习 babel 的基础，后面会分别学习每一个步骤。"})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,s.ah)(),e.components);return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}let p=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["Babel%20%E6%8F%92%E4%BB%B6%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F2.Babel%20%E7%9A%84%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B.md"]={toc:[{text:"编译器和转译器",id:"编译器和转译器",depth:2},{text:"babel 的编译流程",id:"babel-的编译流程",depth:2},{text:"为什么会分为这三步",id:"为什么会分为这三步",depth:3},{text:"这三步都做了什么？",id:"这三步都做了什么",depth:3},{text:"parse",id:"parse",depth:4},{text:"transform",id:"transform",depth:4},{text:"generate",id:"generate",depth:4},{text:"总结",id:"总结",depth:2}],title:"2.Babel 的编译流程",headingTitle:"2.Babel 的编译流程",frontmatter:{}}}}]);