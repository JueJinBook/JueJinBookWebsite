"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["14221"],{215709:function(n,e,r){r.r(e),r.d(e,{default:()=>d});var c=r(552676),s=r(740453);function i(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",blockquote:"blockquote",h2:"h2",pre:"pre",code:"code",h3:"h3",em:"em",ul:"ul",li:"li"},(0,s.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"3进入类型的世界理解原始类型与对象类型",children:["3.进入类型的世界：理解原始类型与对象类型",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3进入类型的世界理解原始类型与对象类型",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"通常来说，学习一件新事物的较好方式是和你已掌握的做对比，通过二者之间通用的概念帮你快速熟悉新的事物。比如，在掌握了 Vue 以后再去学习 React，对于组件通信、状态管理、插槽等这些二者共有的概念，你会感到非常熟悉。同样的，这一章我们会从 JavaScript 的既有概念开始学习，详细讲解 TypeScript 所有原始类型、数组以及对象的类型标注，让你能快速对 TypeScript 的功能、语法有一个基础认知。"}),"\n",(0,c.jsxs)(e.p,{children:["这一章会包含几乎所有与原始类型、对象类型、数组等强相关的知识点，这么设计主要是因为它们之间的内容环环相扣，而且也不难，放在一起能帮助你一次性建立",(0,c.jsx)(e.strong,{children:"相对完整的知识体系"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"如果你已经对这一章的知识点有基本了解或者非常熟悉了，那我建议你利用它来查缺补漏，为后面的学习打好基础，比如元组就是一个很容易被大家忽视的知识点。"}),"\n",(0,c.jsx)(e.p,{children:"话不多说，跟着我一起往下看吧！"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["本节代码见：",(0,c.jsx)(e.a,{href:"https://github.com/linbudu599/TypeScript-Tiny-Book/tree/main/packages/01-primitive-and-object",target:"_blank",rel:"noopener noreferrer",children:"Primitive and Object"})]}),"\n"]}),"\n",(0,c.jsxs)(e.h2,{id:"原始类型的类型标注",children:["原始类型的类型标注",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#原始类型的类型标注",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["首先，我们来看 ",(0,c.jsx)(e.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%8E%9F%E5%A7%8B%E5%80%BC_primitive_values",target:"_blank",rel:"noopener noreferrer",children:"JavaScript的内置原始类型"}),"。除了最常见的 number / string / boolean / null / undefined， ECMAScript 2015（ES6）、2020 (ES11) 又分别引入了 2 个新的原始类型：symbol 与 bigint 。在 TypeScript 中它们都有对应的类型注解："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const name: string = 'linbudu';\nconst age: number = 24;\nconst male: boolean = false;\nconst undef: undefined = undefined;\nconst nul: null = null;\nconst obj: object = { name, age, male };\nconst bigintVar1: bigint = 9007199254740991n;\nconst bigintVar2: bigint = BigInt(9007199254740991);\nconst symbolVar: symbol = Symbol('unique');\n"})}),"\n",(0,c.jsx)(e.p,{children:"其中，除了 null 与 undefined 以外，余下的类型基本上可以完全对应到 JavaScript 中的数据类型概念，因此这里我们只对 null 与 undefined 展开介绍。"}),"\n",(0,c.jsxs)(e.h3,{id:"null-与-undefined",children:["null 与 undefined",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#null-与-undefined",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["在 JavaScript 中，null 与 undefined 分别表示“",(0,c.jsx)(e.strong,{children:"这里有值，但是个空值"}),"”和“",(0,c.jsx)(e.strong,{children:"这里没有值"}),"”。而在 TypeScript 中，null 与 undefined 类型都是",(0,c.jsx)(e.strong,{children:"有具体意义的类型"}),"。也就是说，它们作为类型时，表示的是一个有意义的具体类型值。这两者在没有开启 ",(0,c.jsx)(e.code,{children:"strictNullChecks"})," 检查的情况下，会",(0,c.jsx)(e.strong,{children:"被视作其他类型的子类型"}),"，比如 string 类型会被认为包含了 null 与 undefined 类型："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const tmp1: null = null;\nconst tmp2: undefined = undefined;\n\nconst tmp3: string = null; // 仅在关闭 strictNullChecks 时成立，下同\nconst tmp4: string = undefined;\n"})}),"\n",(0,c.jsx)(e.p,{children:"除了上面介绍的原始类型以及 null、undefined 类型以外，在 TypeScript 中还存在着一个特殊的类型：void，它和 JavaScript 中的 void 同样不是一回事，我们接着往下看。"}),"\n",(0,c.jsxs)(e.h3,{id:"void",children:["void",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#void",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"你是否看到过以下的 JavaScript 代码呢？"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:'<a href="javascript:void(0)">清除缓存</a>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["这里的 ",(0,c.jsx)(e.code,{children:"void(0)"})," 等价于 ",(0,c.jsx)(e.code,{children:"void 0"}),"，即 ",(0,c.jsx)(e.code,{children:"void expression"})," 的语法。void 操作符会执行后面跟着的表达式并返回一个 undefined，如你可以使用它来执行一个立即执行函数（IIFE）："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:'void function iife() {\n  console.log("Invoked!");\n}();\n'})}),"\n",(0,c.jsxs)(e.p,{children:["能这么做是因为，void 操作符强制",(0,c.jsx)(e.strong,{children:"将后面的函数声明转化为了表达式"}),"，因此整体其实相当于：",(0,c.jsx)(e.code,{children:"void((function iife(){})())"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"事实上，TypeScript 的原始类型标注中也有 void，但与 JavaScript 中不同的是，这里的 void 用于描述一个内部没有 return 语句，或者没有显式 return 一个值的函数的返回值，如："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"function func1() {}\nfunction func2() {\n  return;\n}\nfunction func3() {\n  return undefined;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"在这里，func1 与 func2 的返回值类型都会被隐式推导为 void，只有显式返回了 undefined 值的 func3 其返回值类型才被推导为了 undefined。但在实际的代码执行中，func1 与 func2 的返回值均是 undefined。"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"虽然 func3 的返回值类型会被推导为 undefined，但是你仍然可以使用 void 类型进行标注，因为在类型层面 func1、func2、func3 都表示“没有返回一个有意义的值”。"}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["这里可能有点绕，你可以认为 void 表示一个空类型，而 null 与 undefined 都是一个具有意义的实际类型（注意与它们在 JavaScript 中的意义区分）。而 undefined 能够被赋值给 void 类型的变量，就像在 JavaScript 中一个没有返回值的函数会默认返回一个 undefined 。null 类型也可以，但需要在关闭 ",(0,c.jsx)(e.code,{children:"strictNullChecks"})," 配置的情况下才能成立。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const voidVar1: void = undefined;\n\nconst voidVar2: void = null; // 需要关闭 strictNullChecks\n"})}),"\n",(0,c.jsx)(e.p,{children:"到这里，我们了解了 JavaScript 中原始数据类型到 TypeScript 原始类型概念地映射，你应当能感觉到 TypeScript 对 JavaScript 开发者的友好，大部分概念都能比较自然地过渡，下面的数组与对象的类型标注同样如此。"}),"\n",(0,c.jsxs)(e.h2,{id:"数组的类型标注",children:["数组的类型标注",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数组的类型标注",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"数组同样是我们最常用的类型之一，在 TypeScript 中有两种方式来声明一个数组类型："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const arr1: string[] = [];\n\nconst arr2: Array<string> = [];\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这两种方式是完全等价的，但其实更多是以前者为主，如果你将鼠标悬浮在 ",(0,c.jsx)(e.code,{children:"arr2"})," 上，会发现它显示的类型签名是 ",(0,c.jsx)(e.code,{children:"string[]"}),"。数组是我们在日常开发大量使用的数据结构，但在某些情况下，使用 ",(0,c.jsx)(e.strong,{children:"元组（Tuple）"})," 来代替数组要更加妥当，比如一个数组中只存放固定长度的变量，但我们进行了超出长度地访问："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const arr3: string[] = ['lin', 'bu', 'du'];\n\nconsole.log(arr3[599]);\n"})}),"\n",(0,c.jsx)(e.p,{children:"这种情况肯定是不符合预期的，因为我们能确定这个数组中只有三个成员，并希望在越界访问时给出类型报错。这时我们可以使用元组类型进行类型标注："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const arr4: [string, string, string] = ['lin', 'bu', 'du'];\n\nconsole.log(arr4[599]);\n"})}),"\n",(0,c.jsxs)(e.p,{children:["此时将会产生一个类型错误：",(0,c.jsx)(e.em,{children:(0,c.jsx)(e.strong,{children:"长度为“3”的元组类型“[string, string, string]”在索引“599“处没有元素"})}),"。除了同类型的元素以外，元组内部也可以声明多个与其位置强绑定的，不同类型的元素："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const arr5: [string, number, boolean] = ['linbudu', 599, true];\n"})}),"\n",(0,c.jsx)(e.p,{children:"在这种情况下，对数组合法边界内的索引访问（即 0、1、2）将精确地获得对应位置上的类型。同时元组也支持了在某一个位置上的可选成员："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const arr6: [string, number?, boolean?] = ['linbudu'];\n// 下面这么写也可以\n// const arr6: [string, number?, boolean?] = ['linbudu', , ,];\n"})}),"\n",(0,c.jsxs)(e.p,{children:["对于标记为可选的成员，在 ",(0,c.jsx)(e.code,{children:"--strictNullCheckes"})," 配置下会被视为一个 ",(0,c.jsx)(e.code,{children:"string | undefined"})," 的类型。此时元组的长度属性也会发生变化，比如上面的元组 arr6 ，其长度的类型为 ",(0,c.jsx)(e.code,{children:"1 | 2 | 3"}),"："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"type TupleLength = typeof arr6.length; // 1 | 2 | 3\n"})}),"\n",(0,c.jsx)(e.p,{children:"也就是说，这个元组的长度可能为 1、2、3。"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"关于类型别名（type）、类型查询（typeof）以及联合类型，我们会在后面讲到，这里你只需要简单了解即可。"}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["你可能会觉得，元组的可读性实际上并不好。比如对于 ",(0,c.jsx)(e.code,{children:"[string, number, boolean]"}),"来说，你并不能直接知道这三个元素都代表什么，还不如使用对象的形式。而在 TypeScript 4.0 中，有了具名元组（",(0,c.jsx)(e.a,{href:"https://github.com/Microsoft/TypeScript/issues/28259",target:"_blank",rel:"noopener noreferrer",children:"Labeled Tuple Elements"}),"）的支持，使得我们可以为元组中的元素打上类似属性的标记："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const arr7: [name: string, age: number, male: boolean] = ['linbudu', 599, true];\n"})}),"\n",(0,c.jsx)(e.p,{children:"有没有很酷？考虑到某些拼装对象太麻烦，我们完全可以使用具名元组来做简单替换。具名元组可选元素的修饰符将成为以下形式："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const arr7: [name: string, age: number, male?: boolean] = ['linbudu', 599, true];\n"})}),"\n",(0,c.jsx)(e.p,{children:"实际上除了显式地越界访问，还可能存在隐式地越界访问，如通过解构赋值的形式："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const arr1: string[] = [];\n\nconst [ele1, ele2, ...rest] = arr1;\n"})}),"\n",(0,c.jsx)(e.p,{children:"对于数组，此时仍然无法检查出是否存在隐式访问，因为类型层面并不知道它到底有多少个元素。但对于元组，隐式的越界访问也能够被揪出来给一个警告："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:'const arr5: [string, number, boolean] = [\'linbudu\', 599, true];\n\n// 长度为 "3" 的元组类型 "[string, number, boolean]" 在索引 "3" 处没有元素。\nconst [name, age, male, other] = arr5;\n'})}),"\n",(0,c.jsxs)(e.p,{children:["JavaScript 的开发者对元组 Tuple 的概念可能比较陌生，毕竟在 JavaScript 中我们很少声明定长的数组。但使用元组确实能帮助我们进一步提升",(0,c.jsx)(e.strong,{children:"数组结构的严谨性"}),"，包括基于位置的类型标注、避免出现越界访问等等。除了通过数组类型提升数组结构的严谨性，TypeScript 中的对象类型也能帮助我们提升对象结构的严谨性。接下来我们就一起来看看。"]}),"\n",(0,c.jsxs)(e.h2,{id:"对象的类型标注",children:["对象的类型标注",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#对象的类型标注",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["作为 JavaScript 中使用最频繁的数据结构，对象的类型标注是我们本节要重点关注的部分。接下来我们会学习如何在 TypeScript 中声明对象、修饰对象属性，以及了解可能存在的使用误区。这些内容能够帮助你建立起对 TypeScript 中立体类型（我们可以理解为前面的原始类型是“",(0,c.jsx)(e.strong,{children:"平面类型"}),"”）的了解，正式入门 TypeScript 。"]}),"\n",(0,c.jsx)(e.p,{children:"类似于数组类型，在 TypeScript 中我们也需要特殊的类型标注来描述对象类型，即 interface ，你可以理解为它代表了这个对象对外提供的接口结构。"}),"\n",(0,c.jsx)(e.p,{children:"首先我们使用 interface 声明一个结构，然后使用这个结构来作为一个对象的类型标注即可："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"interface IDescription {\n  name: string;\n  age: number;\n  male: boolean;\n}\n\nconst obj1: IDescription = {\n  name: 'linbudu',\n  age: 599,\n  male: true,\n};\n"})}),"\n",(0,c.jsx)(e.p,{children:"这里的“描述”指："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["每一个属性的值必须",(0,c.jsx)(e.strong,{children:"一一对应"}),"到接口的属性类型"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["不能有多的属性，也不能有少的属性，包括直接在对象内部声明，或是 ",(0,c.jsx)(e.code,{children:"obj1.other = 'xxx'"})," 这样属性访问赋值的形式"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["除了声明属性以及属性的类型以外，我们还可以对属性进行修饰，常见的修饰包括",(0,c.jsx)(e.strong,{children:"可选（Optional）"})," 与 ",(0,c.jsx)(e.strong,{children:"只读（Readonly）"})," 这两种。"]}),"\n",(0,c.jsxs)(e.h3,{id:"修饰接口属性",children:["修饰接口属性",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#修饰接口属性",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["类似于上面的元组可选，在接口结构中同样通过 ",(0,c.jsx)(e.code,{children:"?"})," 来标记一个属性为可选："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"interface IDescription {\n  name: string;\n  age: number;\n  male?: boolean;\n  func?: Function;\n}\n\nconst obj2: IDescription = {\n  name: 'linbudu',\n  age: 599,\n  male: true,\n  // 无需实现 func 也是合法的\n};\n"})}),"\n",(0,c.jsxs)(e.p,{children:["在这种情况下，即使你在 obj2 中定义了 male 属性，但当你访问 ",(0,c.jsx)(e.code,{children:"obj2.male"})," 时，它的类型仍然会是 ",(0,c.jsx)(e.code,{children:"boolean | undefined"}),"，因为毕竟这是我们自己定义的类型嘛。"]}),"\n",(0,c.jsxs)(e.p,{children:["假设新增一个可选的函数类型属性，然后进行调用：",(0,c.jsx)(e.code,{children:"obj2.func()"})," ，此时将会产生一个类型报错：",(0,c.jsx)(e.em,{children:(0,c.jsx)(e.strong,{children:"不能调用可能是未定义的方法"})}),"。但可选属性标记不会影响你对这个属性进行赋值，如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"obj2.male = false;\nobj2.func = () => {};\n"})}),"\n",(0,c.jsxs)(e.p,{children:["即使你对可选属性进行了赋值，TypeScript 仍然会使用",(0,c.jsx)(e.strong,{children:"接口的描述为准"}),"进行类型检查，你可以使用类型断言、非空断言或可选链解决（别急，我们在后面会讲到）。"]}),"\n",(0,c.jsxs)(e.p,{children:["除了标记一个属性为可选以外，你还可以标记这个属性为只读：",(0,c.jsx)(e.code,{children:"readonly"}),"。很多同学对这一关键字比较陌生，因为以往 JavaScript 中并没有这一类概念，它的作用是",(0,c.jsx)(e.strong,{children:"防止对象的属性被再次赋值"}),"。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:'interface IDescription {\n  readonly name: string;\n  age: number;\n}\n\nconst obj3: IDescription = {\n  name: \'linbudu\',\n  age: 599,\n};\n\n// 无法分配到 "name" ，因为它是只读属性\nobj3.name = "林不渡";\n'})}),"\n",(0,c.jsx)(e.p,{children:"其实在数组与元组层面也有着只读的修饰，但与对象类型有着两处不同。"}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"你只能将整个数组/元组标记为只读，而不能像对象那样标记某个属性为只读。"}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["一旦被标记为只读，那这个只读数组/元组的类型上，将不再具有 push、pop 等方法（即会修改原数组的方法），因此报错信息也将是",(0,c.jsx)(e.strong,{children:"类型 xxx 上不存在属性“push”这种"}),"。这一实现的本质是",(0,c.jsx)(e.strong,{children:"只读数组与只读元组的类型实际上变成了 ReadonlyArray，而不再是 Array。"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.h3,{id:"type-与-interface",children:["type 与 interface",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#type-与-interface",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["我也知道，很多同学更喜欢用 type（Type Alias，类型别名）来代替接口结构描述对象，而我更推荐的方式是，interface 用来描述",(0,c.jsx)(e.strong,{children:"对象、类的结构"}),"，而类型别名用来",(0,c.jsx)(e.strong,{children:"将一个函数签名、一组联合类型、一个工具类型等等抽离成一个完整独立的类型"}),"。但大部分场景下接口结构都可以被类型别名所取代，因此，只要你觉得统一使用类型别名让你觉得更整齐，也没什么问题。"]}),"\n",(0,c.jsxs)(e.h3,{id:"objectobject-以及--",children:["object、Object 以及 { }",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#objectobject-以及--",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"object"}),"、",(0,c.jsx)(e.code,{children:"Object"})," 以及",(0,c.jsx)(e.code,{children:"{}"}),"（一个空对象）这三者的使用可能也会让部分同学感到困惑，所以我也专门解释下。"]}),"\n",(0,c.jsx)(e.p,{children:"首先是 Object 的使用。被 JavaScript 原型链折磨过的同学应该记得，原型链的顶端是 Object 以及 Function，这也就意味着所有的原始类型与对象类型最终都指向 Object，在 TypeScript 中就表现为 Object 包含了所有的类型："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"// 对于 undefined、null、void 0 ，需要关闭 strictNullChecks\nconst tmp1: Object = undefined;\nconst tmp2: Object = null;\nconst tmp3: Object = void 0;\n\nconst tmp4: Object = 'linbudu';\nconst tmp5: Object = 599;\nconst tmp6: Object = { name: 'linbudu' };\nconst tmp7: Object = () => {};\nconst tmp8: Object = [];\n"})}),"\n",(0,c.jsxs)(e.p,{children:["和 Object 类似的还有 Boolean、Number、String、Symbol，这几个",(0,c.jsx)(e.strong,{children:"装箱类型（Boxed Types）"})," 同样包含了一些超出预期的类型。以 String 为例，它同样包括 undefined、null、void，以及代表的 ",(0,c.jsx)(e.strong,{children:"拆箱类型（Unboxed Types）"})," string，但并不包括其他装箱类型对应的拆箱类型，如 boolean 与 基本对象类型，我们看以下的代码："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const tmp9: String = undefined;\nconst tmp10: String = null;\nconst tmp11: String = void 0;\nconst tmp12: String = 'linbudu';\n\n// 以下不成立，因为不是字符串类型的拆箱类型\nconst tmp13: String = 599; // X\nconst tmp14: String = { name: 'linbudu' }; // X\nconst tmp15: String = () => {}; // X\nconst tmp16: String = []; // X\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"在任何情况下，你都不应该使用这些装箱类型。"})}),"\n",(0,c.jsxs)(e.p,{children:["object 的引入就是为了解决对 Object 类型的错误使用，它代表",(0,c.jsx)(e.strong,{children:"所有非原始类型的类型，即数组、对象与函数类型这些"}),"："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const tmp17: object = undefined;\nconst tmp18: object = null;\nconst tmp19: object = void 0;\n\nconst tmp20: object = 'linbudu';  // X 不成立，值为原始类型\nconst tmp21: object = 599; // X 不成立，值为原始类型\n\nconst tmp22: object = { name: 'linbudu' };\nconst tmp23: object = () => {};\nconst tmp24: object = [];\n"})}),"\n",(0,c.jsxs)(e.p,{children:["最后是",(0,c.jsx)(e.code,{children:"{}"}),"，一个奇奇怪怪的空对象，如果你了解过字面量类型，可以认为",(0,c.jsx)(e.code,{children:"{}"}),"就是一个对象字面量类型（对应到字符串字面量类型这样）。否则，你可以认为使用",(0,c.jsx)(e.code,{children:"{}"}),"作为类型签名就是一个合法的，但",(0,c.jsx)(e.strong,{children:"内部无属性定义的空对象"}),"，这类似于 Object（想想 ",(0,c.jsx)(e.code,{children:"new Object()"}),"），它意味着任何非 null / undefined 的值："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"\nconst tmp25: {} = undefined; // 仅在关闭 strictNullChecks 时成立，下同\nconst tmp26: {} = null;\nconst tmp27: {} = void 0; // void 0 等价于 undefined\n\nconst tmp28: {} = 'linbudu';\nconst tmp29: {} = 599;\nconst tmp30: {} = { name: 'linbudu' };\nconst tmp31: {} = () => {};\nconst tmp32: {} = [];\n"})}),"\n",(0,c.jsxs)(e.p,{children:["虽然能够将其作为变量的类型，但你实际上",(0,c.jsx)(e.strong,{children:"无法对这个变量进行任何赋值操作"}),"："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"const tmp30: {} = { name: 'linbudu' };\n\ntmp30.age = 18; // X 类型“{}”上不存在属性“age”。\n"})}),"\n",(0,c.jsx)(e.p,{children:"这是因为它就是纯洁的像一张白纸一样的空对象，上面没有任何的属性（除了 toString 这种与生俱来的）。在类型层级一节我们还会再次见到它，不过那个时候它已经被称为“万物的起源”了。"}),"\n",(0,c.jsxs)(e.p,{children:["最后，为了更好地区分 ",(0,c.jsx)(e.code,{children:"Object"}),"、",(0,c.jsx)(e.code,{children:"object"})," 以及",(0,c.jsx)(e.code,{children:"{}"}),"这三个具有迷惑性的类型，我们再做下总结："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["在任何时候都",(0,c.jsx)(e.strong,{children:"不要，不要，不要使用"})," Object 以及类似的装箱类型。"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["当你不确定某个变量的具体类型，但能确定它不是原始类型，可以使用 object。但我更推荐进一步区分，也就是使用 ",(0,c.jsx)(e.code,{children:"Record<string, unknown>"})," 或 ",(0,c.jsx)(e.code,{children:"Record<string, any>"})," 表示对象，",(0,c.jsx)(e.code,{children:"unknown[]"})," 或 ",(0,c.jsx)(e.code,{children:"any[]"})," 表示数组，",(0,c.jsx)(e.code,{children:"(...args: any[]) => any"}),"表示函数这样。"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["我们同样要避免使用",(0,c.jsx)(e.code,{children:"{}"}),"。",(0,c.jsx)(e.code,{children:"{}"}),"意味着任何非 ",(0,c.jsx)(e.code,{children:"null / undefined"})," 的值，从这个层面上看，使用它和使用 ",(0,c.jsx)(e.code,{children:"any"})," 一样恶劣。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.h2,{id:"总结与预告",children:["总结与预告",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结与预告",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"这一节，我们一起学习了 TypeScript 中原始类型、对象类型、数组（元组）的类型标注，以及对数组的只读、对象类型属性的访问性修饰。这里的知识其实可以分为两类："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["与 JavaScript 概念基本一致的部分，如原始类型与数组类型需要重点掌握，但因为思维方式基本没有变化，所以你可以认为你就是在写",(0,c.jsx)(e.strong,{children:"更严格一些的 JavaScript"}),"。"]}),"\n",(0,c.jsx)(e.li,{children:"一些全新的概念，比如元组与 readonly 修饰等，这一部分你可能不会很快适应，需要稍微转换一下思维方式。我建议你可以从现在开始，有意识地在日常开发中去多多使用它们。"}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"另外，对于 readonly 这一修饰符，JavaScript 开发者可能需要一定的时间来理解和习惯，但它在工程层面确实是非常推荐的一种实践，可以使用只读标记来避免数组和对象被错误修改。当然，TypeScript 目前只能够帮助你在编译时做检查，类型信息在编译后都会被擦除，所以 readonly 并不会在实际运行时报错。"}),"\n",(0,c.jsx)(e.p,{children:"学习完这一小节后，不妨找出你曾经的 JavaScript 项目，试试用本章学到的知识为这些 JavaScript 代码添加一些类型，再把某些场景下的数组换成元组，为部分对象类型的属性添加 readonly，来感受 TypeScript 代码的严格之美。"}),"\n",(0,c.jsx)(e.p,{children:"在下一节我们要介绍的字面量类型以及枚举，在某些方面其实可以理解为是原始类型与对象类型的进一步延伸，也同样是日常会被重度使用的语法。在完成下一节的学习后，你就可以开始进一步地改造你的 JavaScript 项目，让那些类型变得更精确一些！"}),"\n",(0,c.jsxs)(e.h2,{id:"扩展阅读",children:["扩展阅读",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展阅读",children:"#"})]}),"\n",(0,c.jsxs)(e.h3,{id:"unique-symbol",children:["unique symbol",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#unique-symbol",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"Symbol 在 JavaScript 中代表着一个唯一的值类型，它类似于字符串类型，可以作为对象的属性名，并用于避免错误修改 对象 / Class 内部属性的情况。而在 TypeScript 中，symbol 类型并不具有这一特性，一百个具有 symbol 类型的对象，它们的 symbol 类型指的都是 TypeScript 中的同一个类型。为了实现“独一无二”这个特性，TypeScript 中支持了 unique symbol 这一类型声明，它是 symbol 类型的子类型，每一个 unique symbol 类型都是独一无二的。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:'const uniqueSymbolFoo: unique symbol = Symbol("linbudu")\n\n// 类型不兼容\nconst uniqueSymbolBar: unique symbol = uniqueSymbolFoo\n'})}),"\n",(0,c.jsxs)(e.p,{children:["在 JavaScript 中，我们可以用 ",(0,c.jsx)(e.code,{children:"Symbol.for"})," 方法来复用已创建的 Symbol，如 ",(0,c.jsx)(e.code,{children:'Symbol.for("linbudu")'})," 会首先查找全局是否已经有使用 ",(0,c.jsx)(e.code,{children:"linbudu"})," 作为 key 的 Symbol 注册，如果有，则返回这个 Symbol，否则才会创建新的 Symbol 。"]}),"\n",(0,c.jsx)(e.p,{children:"在 TypeScript 中，如果要引用已创建的 unique symbol 类型，则需要使用类型查询操作符 typeof ："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-typescript",children:"declare const uniqueSymbolFoo: unique symbol;\n\nconst uniqueSymbolBaz: typeof uniqueSymbolFoo = uniqueSymbolFoo\n"})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"以上代码实际执行时会报错，这是因为 uniqueSymbolFoo 是一个仅存在于类型空间的值，这里只是为了进行示例~"}),"\n"]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"这里的 declare、typeof 等使用，都会在后面有详细地讲解。同时 unique symbol 在日常开发的使用非常少见，这里做了解就好~"}),"\n"]})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(i,{...n})}):i(n)}let d=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["TypeScript%20%E5%85%A8%E9%9D%A2%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%2F3.%E8%BF%9B%E5%85%A5%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%B8%96%E7%95%8C%EF%BC%9A%E7%90%86%E8%A7%A3%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B.md"]={toc:[{text:"原始类型的类型标注",id:"原始类型的类型标注",depth:2},{text:"null 与 undefined",id:"null-与-undefined",depth:3},{text:"void",id:"void",depth:3},{text:"数组的类型标注",id:"数组的类型标注",depth:2},{text:"对象的类型标注",id:"对象的类型标注",depth:2},{text:"修饰接口属性",id:"修饰接口属性",depth:3},{text:"type 与 interface",id:"type-与-interface",depth:3},{text:"object、Object 以及 { }",id:"objectobject-以及--",depth:3},{text:"总结与预告",id:"总结与预告",depth:2},{text:"扩展阅读",id:"扩展阅读",depth:2},{text:"unique symbol",id:"unique-symbol",depth:3}],title:"3.进入类型的世界：理解原始类型与对象类型",headingTitle:"3.进入类型的世界：理解原始类型与对象类型",frontmatter:{}}}}]);