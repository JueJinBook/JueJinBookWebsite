"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["39823"],{596117:function(e,n,t){t.r(n),t.d(n,{default:()=>D});var i=t(552676),s=t(740453);let r=t.p+"static/image/7ba679871b74eb451027fe21b8948b37.d34f4568.gif",o=t.p+"static/image/e6eca5a30e527168322e77cfb384bdaf.b0eac1d7.gif",a=t.p+"static/image/2b8a5b02e51aba8aca3a6f9943fd9c48.b1035d7b.gif",l=t.p+"static/image/4e9e91f191c134f8914cd69684e6600b.bbe2fa47.webp",d=t.p+"static/image/c2e075a0a6d0b221f7a5a597b9fbe6d6.b60d3b6d.webp",c=t.p+"static/image/daf1331b66d4fddd69e1674080c83760.30ae22ad.gif",h=t.p+"static/image/3beb326095999a325590a71d8c0b01bc.611dffd4.webp",m=t.p+"static/image/7506643071a67f8db9f1c2a6a83ebb58.76806ca3.webp",u=t.p+"static/image/0e2a0935d9c0aedfa29e16f38609373e.5d4e17f2.webp",p=t.p+"static/image/20f5fd56cc7d924714e34cc6d7ee3dce.7e9540d8.webp",x=t.p+"static/image/5b024b7dc7fa3ae6c3dba0dfc4cf2f84.23a3459c.gif",j=t.p+"static/image/d3267bd117ba58203d55d6e21e583dc4.7bab5f4e.gif",f=t.p+"static/image/ad7a005029ce0c1e2df7829931873eba.e780ec11.gif",g=t.p+"static/image/ed9a510ca96ee3719053d126b203b229.aa802e05.webp",v=t.p+"static/image/6b82620e2daeeece4382d27d7188706b.eb31c0e0.webp",N=t.p+"static/image/0258082aa36a355d20f5f20cfa627a17.c34fa565.webp",b=t.p+"static/image/b6671487cff01e1e1e3dc7dbd16aee09.a5142d4e.webp",y=t.p+"static/image/d19f44cd0ca7812dadc21e5e16760503.a9104a0c.webp",S=t.p+"static/image/d7db0dd26befbeb8bd3544049631833e.880b4e7f.webp",$=t.p+"static/image/06a42923556977e4353f11dc7b4eeb81.9af71575.webp";function k(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",pre:"pre",h3:"h3",blockquote:"blockquote",strong:"strong",ul:"ul",li:"li",ol:"ol"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"40实战篇-_-react-notes-_-笔记编辑界面",children:["40.实战篇 _ React Notes _ 笔记编辑界面",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#40实战篇-_-react-notes-_-笔记编辑界面",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"前言",children:["前言",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"本篇我们来实现右侧笔记编辑部分。"}),"\n",(0,i.jsxs)(n.h2,{id:"笔记编辑界面",children:["笔记编辑界面",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#笔记编辑界面",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["当点击 ",(0,i.jsx)(n.code,{children:"New"})," 按钮的时候进入编辑界面："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:$,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["当点击具体笔记的 ",(0,i.jsx)(n.code,{children:"Edit"})," 按钮的时候进入该笔记的编辑页面："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:S,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["回忆下之前的路由设计，当点击 ",(0,i.jsx)(n.code,{children:"New"})," 的时候，导航至 ",(0,i.jsx)(n.code,{children:"/note/edit"}),"路由，当点击 ",(0,i.jsx)(n.code,{children:"Edit"})," 的时候，导航至 ",(0,i.jsx)(n.code,{children:"/note/edit/xxxx"})," 路由。"]}),"\n",(0,i.jsx)(n.p,{children:"那么我们开始动手吧！"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"/app/note/edit/page.js"}),"代码如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import NoteEditor from \'@/components/NoteEditor\'\n\nexport default async function EditPage() {\n  return <NoteEditor note={null} initialTitle="Untitled" initialBody="" />\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"/app/note/edit/loading.js"}),"代码如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'export default function EditSkeleton() {\n  return (\n    <div\n      className="note-editor skeleton-container"\n      role="progressbar"\n      aria-busy="true"\n    >\n      <div className="note-editor-form">\n        <div className="skeleton v-stack" style={{ height: \'3rem\' }} />\n        <div className="skeleton v-stack" style={{ height: \'100%\' }} />\n      </div>\n      <div className="note-editor-preview">\n        <div className="note-editor-menu">\n          <div\n            className="skeleton skeleton--button"\n            style={{ width: \'8em\', height: \'2.5em\' }}\n          />\n          <div\n            className="skeleton skeleton--button"\n            style={{ width: \'8em\', height: \'2.5em\', marginInline: \'12px 0\' }}\n          />\n        </div>\n        <div\n          className="note-title skeleton"\n          style={{ height: \'3rem\', width: \'65%\', marginInline: \'12px 1em\' }}\n        />\n        <div className="note-preview">\n          <div className="skeleton v-stack" style={{ height: \'1.5em\' }} />\n          <div className="skeleton v-stack" style={{ height: \'1.5em\' }} />\n          <div className="skeleton v-stack" style={{ height: \'1.5em\' }} />\n          <div className="skeleton v-stack" style={{ height: \'1.5em\' }} />\n          <div className="skeleton v-stack" style={{ height: \'1.5em\' }} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["你可能会问，同级的 ",(0,i.jsx)(n.code,{children:"page.js"})," 又没有数据请求，添加 ",(0,i.jsx)(n.code,{children:"loading.js"})," 有什么用？"]}),"\n",(0,i.jsxs)(n.p,{children:["同级的",(0,i.jsx)(n.code,{children:"page.js"}),"确实没有请求，但 ",(0,i.jsx)(n.code,{children:"loading.js"}),"会将 ",(0,i.jsx)(n.code,{children:"page.js"})," 和其 ",(0,i.jsx)(n.code,{children:"children"})," 都包裹在 ",(0,i.jsx)(n.code,{children:"<Suspense>"})," 中，所以 ",(0,i.jsx)(n.code,{children:"/app/note/edit/[id]/page.js"}),"中的请求也会触发该 ",(0,i.jsx)(n.code,{children:"loading.js"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"/app/note/edit/[id]/page.js"}),"代码如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import NoteEditor from '@/components/NoteEditor'\nimport {getNote} from '@/lib/redis';\n\nexport default async function EditPage({ params }) {\n  const noteId = params.id;\n  const note = await getNote(noteId)\n\n  // 让效果更明显\n  const sleep = ms => new Promise(r => setTimeout(r, ms));\n  await sleep(5000);\n\n  if (note === null) {\n    return (\n      <div className=\"note--empty-state\">\n        <span className=\"note-text--empty-state\">\n          Click a note on the left to view something! \uD83E\uDD7A\n        </span>\n      </div>\n    )\n  }\n\n  return <NoteEditor noteId={noteId} initialTitle={note.title} initialBody={note.content} />\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["我们抽离了一个 ",(0,i.jsx)(n.code,{children:"<NoteEditor>"})," 组件用于实现编辑功能，",(0,i.jsx)(n.code,{children:"/components/NoteEditor.js"})," 代码如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'\'use client\'\n\nimport { useState } from \'react\'\nimport NotePreview from \'@/components/NotePreview\'\nimport { useFormStatus } from \'react-dom\'\n\nexport default function NoteEditor({\n  noteId,\n  initialTitle,\n  initialBody\n}) {\n\n  const { pending } = useFormStatus()\n  const [title, setTitle] = useState(initialTitle)\n  const [body, setBody] = useState(initialBody)\n  const isDraft = !noteId\n\n  return (\n    <div className="note-editor">\n      <form className="note-editor-form" autoComplete="off">\n        <label className="offscreen" htmlFor="note-title-input">\n          Enter a title for your note\n        </label>\n        <input\n          id="note-title-input"\n          type="text"\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value)\n          }}\n        />\n        <label className="offscreen" htmlFor="note-body-input">\n          Enter the body for your note\n        </label>\n        <textarea\n          value={body}\n          id="note-body-input"\n          onChange={(e) => setBody(e.target.value)}\n        />\n      </form>\n      <div className="note-editor-preview">\n        <form className="note-editor-menu" role="menubar">\n          <button\n            className="note-editor-done"\n            disabled={pending}\n            type="submit"\n            role="menuitem"\n          >\n            <img\n              src="/checkmark.svg"\n              width="14px"\n              height="10px"\n              alt=""\n              role="presentation"\n            />\n            Done\n          </button>\n          {!isDraft && (\n            <button\n              className="note-editor-delete"\n              disabled={pending}\n              role="menuitem"\n            >\n              <img\n                src="/cross.svg"\n                width="10px"\n                height="10px"\n                alt=""\n                role="presentation"\n              />\n              Delete\n            </button>\n          )}\n        </form>\n        <div className="label label--preview" role="status">\n          Preview\n        </div>\n        <h1 className="note-title">{title}</h1>\n        <NotePreview>{body}</NotePreview>\n      </div>\n    </div>\n  )\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["因为需要控制输入框的状态，所以 ",(0,i.jsx)(n.code,{children:"<NoteEditor>"})," 使用了客户端组件，我们在 ",(0,i.jsx)(n.code,{children:"<NotePreview>"})," 中引用了 ",(0,i.jsx)(n.code,{children:"<NotePreview>"}),"组件，用于实现编辑时的实时预览功能。"]}),"\n",(0,i.jsx)(n.p,{children:"此时编辑页面应该已经可以正常显示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:y,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["此时 ",(0,i.jsx)(n.code,{children:"Done"})," 和 ",(0,i.jsx)(n.code,{children:"Delete"})," 按钮还不能使用，这里我们使用 Server Actions 来实现。但实现之前，我们先看下目前的实现中一些要注意的点。"]}),"\n",(0,i.jsxs)(n.h3,{id:"服务端组件和客户端组件",children:["服务端组件和客户端组件",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#服务端组件和客户端组件",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"前面我们讲到关于服务端组件和客户端组件的使用指南，其中有一条："}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"服务端组件可以导入客户端组件，但客户端组件不能导入服务端组件"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["但是这个例子中就很奇怪了。",(0,i.jsx)(n.code,{children:"<NoteEditor>"})," 是客户端组件，",(0,i.jsx)(n.code,{children:"<NotePreview>"}),"是服务端组件，但我们却在 ",(0,i.jsx)(n.code,{children:"<NoteEditor>"})," 中引用了 ",(0,i.jsx)(n.code,{children:"<NotePreview>"}),"组件，不是说不可以吗？怎么还成功渲染了！"]}),"\n",(0,i.jsxs)(n.p,{children:["这是一个初学者经常会遇到的误区。让我们回忆下",(0,i.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309076661532622885#heading-19",target:"_blank",rel:"noopener noreferrer",children:"《渲染篇 | 服务端组件和客户端组件》"}),"中是如何定义客户端组件的："]}),"\n",(0,i.jsxs)(n.p,{children:["我们会在文件顶部添加一个 ",(0,i.jsx)(n.code,{children:"'use client'"})," 声明。但准确的说，",(0,i.jsx)(n.code,{children:"'use client'"})," 声明的是服务端和客户端组件之间的边界，这意味着，当你在文件中定义了一个 ",(0,i.jsx)(n.code,{children:"'use client'"}),"，导入的其他模块包括子组件，都会被视为客户端 bundle 的一部分。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["换句话说，所有组件都是服务器组件，除非它使用了 ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"'use client'"})})," 指令，或者被导入到 ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"'use client'"})})," 模块中。此时它们会被视为客户端组件。视为客户端组件，就意味着它的代码要被打包到客户端 bundle 中。"]})}),"\n",(0,i.jsxs)(n.p,{children:["比如这里的 ",(0,i.jsx)(n.code,{children:"<NotePreview>"}),"，它被导入到 ",(0,i.jsx)(n.code,{children:"<NoteEditor>"}),"这个客户端组件中，它就变成了客户端组件。变成客户端组件，意味着 ",(0,i.jsx)(n.code,{children:"<NotePreview>"}),"中的代码，包括用到的 ",(0,i.jsx)(n.code,{children:"marked"})," 和 ",(0,i.jsx)(n.code,{children:"sanitize-html"}),"库也要被打包到客户端中，要知道，这两个库没压缩前可是有几百 kB 的。"]}),"\n",(0,i.jsx)(n.p,{children:"所以我们才要将服务端组件通过 props 的形式传给客户端组件，当通过这种形式的时候，组件还是服务端组件，会在服务端执行渲染，代码也不会打包到客户端中。当然在这个例子中，我们就是需要在客户端渲染 markdown 文件，所以代码就是要打包到客户端中的，没有办法避免。"}),"\n",(0,i.jsxs)(n.p,{children:["让我们查看下 ",(0,i.jsx)(n.code,{children:"http://localhost:3000/note/1702459188837"}),"此时的源代码："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:"截屏2023-12-18 下午4.57.17.png"})}),"\n",(0,i.jsxs)(n.p,{children:["预览的时候，我们虽然用了 ",(0,i.jsx)(n.code,{children:"<NotePreview>"})," 这个组件，但是代码没有打包到客户端中。但是当我们打开 ",(0,i.jsx)(n.code,{children:"http://localhost:3000/note/edit/1702459188837"}),"："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:N,alt:"截屏2023-12-18 下午4.58.35.png"})}),"\n",(0,i.jsxs)(n.p,{children:["你会发现，下载了客户端组件 ",(0,i.jsx)(n.code,{children:"<NoteEditor>"})," 和 ",(0,i.jsx)(n.code,{children:"<NotePreview>"}),"，对应也使用了很多库。",(0,i.jsx)(n.code,{children:"page.js"})," 也变大了很多（424 kB）："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:"截屏2023-12-18 下午5.02.22.png"})}),"\n",(0,i.jsxs)(n.p,{children:["最后再说说使用客户端组件时的一个注意事项，那就是不要使用 ",(0,i.jsx)(n.code,{children:"async/await"}),"，可能会出现报错："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,i.jsxs)(n.h2,{id:"笔记编辑和删除",children:["笔记编辑和删除",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#笔记编辑和删除",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["当点击 ",(0,i.jsx)(n.code,{children:"Done"})," 的时候，导航至对应的笔记预览页面 ",(0,i.jsx)(n.code,{children:"/note/xxxx"}),"。当点击 ",(0,i.jsx)(n.code,{children:"Delete"})," 的时候，导航至首页。"]}),"\n",(0,i.jsx)(n.p,{children:"正常开发笔记的增加、更新和删除功能，为了实现前后端交互，可能要写多个接口来实现，比如当点击删除的时候，调用删除接口，接口返回成功，前端跳转至首页。但既然我们都用了 Next.js 14 了，没必要这么麻烦，Server Actions 直接搞定，省的一个个写接口了。"}),"\n",(0,i.jsxs)(n.p,{children:["修改 ",(0,i.jsx)(n.code,{children:"/components/NoteEditor.js"})," 代码："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'\'use client\'\n\n// ...\nimport { deleteNote, saveNote } from \'../app/actions\'\n\nexport default function NoteEditor({\n  noteId,\n  initialTitle,\n  initialBody\n}) {\n	//...\n  return (\n    <div className="note-editor">\n    	// ...\n      <div className="note-editor-preview">\n        <form className="note-editor-menu" role="menubar">\n          <button\n            className="note-editor-done"\n            disabled={pending}\n            type="submit"\n            formAction={() => saveNote(noteId, title, body)}\n            role="menuitem"\n          >\n            // ...\n            Done\n          </button>\n          {!isDraft && (\n            <button\n              className="note-editor-delete"\n              disabled={pending}\n              formAction={() => deleteNote(noteId)}\n              role="menuitem"\n            >\n              // ...\n              Delete\n            </button>\n          )}\n        </form>\n      	// ...\n      </div>\n    </div>\n  )\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"其中最为核心的代码就是："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<form className="note-editor-menu" role="menubar">\n  <button formAction={() => saveNote(noteId, title, body)}>\n    Done\n  </button>\n  <button formAction={() => deleteNote(noteId)} >\n    Delete\n  </button>\n</form>\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"app/actions.js"}),"的代码如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"'use server'\n\nimport { redirect } from 'next/navigation'\nimport {addNote, updateNote, delNote} from '@/lib/redis';\n\nexport async function saveNote(noteId, title, body) {\n  \n  const data = JSON.stringify({\n    title,\n    content: body,\n    updateTime: new Date()\n  })\n\n  if (noteId) {\n    updateNote(noteId, data)\n    redirect(`/note/${noteId}`)\n  } else {\n    const res = await addNote(data)\n    redirect(`/note/${res}`)\n  }\n\n}\n\nexport async function deleteNote(noteId) {\n  delNote(noteId)\n  redirect('/')\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"此时新增和删除看似可以“正常运行”了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:"添加文章.gif"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:"删除文章.gif"})}),"\n",(0,i.jsx)(n.p,{children:"注：写这个 demo 的时候可能会遇到点了按钮没有反应，卡顿 5s 的情况，这是因为之前的 demo 里我们有在多个组件里写 sleep 5s，删除相应的代码即可。"}),"\n",(0,i.jsxs)(n.h2,{id:"server-actions",children:["Server Actions",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#server-actions",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"借助 Server Actions，我们很简单的就实现了笔记的新增和删除效果，但其实目前的代码中还有很多问题。"}),"\n",(0,i.jsxs)(n.h3,{id:"1-完整路由缓存与-revalidate",children:["1. 完整路由缓存与 revalidate",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-完整路由缓存与-revalidate",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"比如当我们连续 2 次新增笔记时，观察左侧的笔记列表变化："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:"多次新增出现问题.gif"})}),"\n",(0,i.jsx)(n.p,{children:"笔记列表初始有 3 条，新增第 1 条笔记后，左侧的笔记列表显示 4 条，但当我们新增第 2 条笔记的时候，左侧的笔记列表又变成了 3 条，新增第 2 条笔记后，左侧的笔记列表显示 5 条。"}),"\n",(0,i.jsxs)(n.p,{children:["如果你导航至首页 ",(0,i.jsx)(n.code,{children:"/"}),"，你会发现还是 3 条，而且哪怕你清空缓存并硬性重新加载，还是 3 条，这是为什么呢？"]}),"\n",(0,i.jsxs)(n.p,{children:["这就是",(0,i.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309077169735958565#heading-13",target:"_blank",rel:"noopener noreferrer",children:"完整路由缓存"}),"。以 ",(0,i.jsx)(n.code,{children:"/note/edit"}),"为例，路由默认是静态渲染，也就是说，会在构建的时候，读取数据，然后将编译后的 HTML 和 RSC Payload 缓存，构建的时候，数据库里有 3 条数据，所以 HTML 中也只有 3 条数据，所以后续打开 ",(0,i.jsx)(n.code,{children:"/note/edit"}),"也都是 3 条数据。"]}),"\n",(0,i.jsx)(n.p,{children:"还记得如何让完整路由缓存失效吗？"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"有两种方式可以使完整路由缓存失效："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"重新验证数据：重新验证数据缓存将使完整路由缓存失效，毕竟渲染输出依赖于数据"}),"\n",(0,i.jsx)(n.li,{children:"重新部署：数据缓存是可以跨部署的，但完整路由缓存会在重新部署中被清除"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"此外，客户端路由缓存的失效也需要借助 revalidate："}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"有两种方法可以让路由缓存失效："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["在 Server Action 中：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["通过 ",(0,i.jsx)(n.code,{children:"revalidatePath"})," 或 ",(0,i.jsx)(n.code,{children:"revalidateTag"})," 重新验证数据"]}),"\n",(0,i.jsxs)(n.li,{children:["使用 ",(0,i.jsx)(n.code,{children:"cookies.set"})," 或者 ",(0,i.jsx)(n.code,{children:"cookies.delete"})," 会使路由缓存失效"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["调用 ",(0,i.jsx)(n.code,{children:"router.refresh"})," 会使路由缓存失效并发起一个重新获取当前路由的请求"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["所以在进行数据处理的时候，一定要记得重新验证数据，也就是 ",(0,i.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079586296791050#heading-12",target:"_blank",rel:"noopener noreferrer",children:"revalidatePath"})," 和 ",(0,i.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079586296791050#heading-23",target:"_blank",rel:"noopener noreferrer",children:"revalidateTag"}),"。现在我们修改下 ",(0,i.jsx)(n.code,{children:"app/actions.js"}),"："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"'use server'\n\nimport { redirect } from 'next/navigation'\nimport {addNote, updateNote, delNote} from '@/lib/redis';\nimport { revalidatePath } from 'next/cache';\n\nexport async function saveNote(noteId, title, body) {\n  \n  const data = JSON.stringify({\n    title,\n    content: body,\n    updateTime: new Date()\n  })\n\n  if (noteId) {\n    updateNote(noteId, data)\n    revalidatePath('/', 'layout')\n    redirect(`/note/${noteId}`)\n  } else {\n    const res = await addNote(data)\n    revalidatePath('/', 'layout')\n    redirect(`/note/${res}`)\n  }\n\n}\n\nexport async function deleteNote(noteId) {\n  delNote(noteId)\n  revalidatePath('/', 'layout')\n  redirect('/')\n}\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"这里我们简单粗暴了清除了所有缓存，此时新增、编辑、删除应该都运行正常了。"}),"\n",(0,i.jsxs)(n.h3,{id:"2-实现原理",children:["2. 实现原理",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-实现原理",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["现在让我们来看看当我们点击 ",(0,i.jsx)(n.code,{children:"Done"})," 按钮的时候做了什么？"]}),"\n",(0,i.jsxs)(n.p,{children:["我们先注释掉 ",(0,i.jsx)(n.code,{children:"actions.js"})," 中的 ",(0,i.jsx)(n.code,{children:"redirect"}),"，这样当更新笔记的时候，不会发生重定向。然后我们编辑一条笔记，然后点击 ",(0,i.jsx)(n.code,{children:"Done"}),"，可以看到页面发送了一条 POST 请求："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"请求地址是当前页面，请求方法为 POST。请求内容正是我们传入的内容："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"响应内容为："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["如果我们不注释掉 ",(0,i.jsx)(n.code,{children:"actions.js"})," 中的 ",(0,i.jsx)(n.code,{children:"redirect"}),"，然后我们编辑一条笔记，然后点击 ",(0,i.jsx)(n.code,{children:"Done"}),"，可以看到页面发送了一条 POST 请求："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"因为有重定向，所以请求状态变成了 303。响应内容为："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'3:I[5613,[],""]\n5:I[1778,[],""]\n4:["id","1702459182837","d"]\n0:["SN0qCiPbAaKKSAlQfIuYC",[[["",{"children":["note",{"children":[["id","1702459182837","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",{"children":["note",{"children":[["id","1702459182837","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","note","children","$4","children"],"loading":["$","div",null,{"className":"note skeleton-container","role":"progressbar","aria-busy":"true","children":[["$","div",null,{"className":"note-header","children":[["$","div",null,{"className":"note-title skeleton","style":{"height":"3rem","width":"65%","marginInline":"12px 1em"}}],["$","div",null,{"className":"skeleton skeleton--button","style":{"width":"8em","height":"2.5em"}}]]}],["$","div",null,{"className":"note-preview","children":[["$","div",null,{"className":"skeleton v-stack","style":{"height":"1.5em"}}],["$","div",null,{"className":"skeleton v-stack","style":{"height":"1.5em"}}],["$","div",null,{"className":"skeleton v-stack","style":{"height":"1.5em"}}],["$","div",null,{"className":"skeleton v-stack","style":{"height":"1.5em"}}],["$","div",null,{"className":"skeleton v-stack","style":{"height":"1.5em"}}]]}]]}],"loadingStyles":[],"loadingScripts":[],"hasLoading":true,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","note","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,"$L6",null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/10169c963ccea784.css","precedence":"next","crossOrigin":"$undefined"}]],"$L7"]]]]\n9:I[5250,["250","static/chunks/250-3c648b94097e3c7b.js","156","static/chunks/app/note/%5Bid%5D/page-5070a024863ac55b.js"],""]\n6:["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","div",null,{"className":"container","children":["$","div",null,{"className":"main","children":["$L8",["$","section",null,{"className":"col note-viewer","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\\"Segoe UI\\",Roboto,Helvetica,Arial,sans-serif,\\"Apple Color Emoji\\",\\"Segoe UI Emoji\\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]}]}]}]\n7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]\n1:null\n2:["$","div",null,{"className":"note","children":[["$","div",null,{"className":"note-header","children":[["$","h1",null,{"className":"note-title","children":"3qui est"}],["$","div",null,{"className":"note-menu","role":"menubar","children":[["$","small",null,{"className":"note-updated-at","role":"status","children":["Last updated on ","2023-12-19 05:33:09"]}],["$","$L9",null,{"href":"/note/edit/1702459182837","className":"link--unstyled","children":["$","button",null,{"className":"edit-button edit-button--outline","role":"menuitem","children":"Edit"}]}]]}]]}],["$","div",null,{"className":"note-preview","children":["$","div",null,{"className":"text-with-markdown","dangerouslySetInnerHTML":{"__html":"<p>est rerum tempore vitae sequi sint</p>\\n"}}]}]]}]\na:"$Sreact.suspense"\n8:["$","section",null,{"className":"col sidebar","children":[["$","$L9",null,{"href":"/","className":"link--unstyled","children":["$","section",null,{"className":"sidebar-header","children":[["$","img",null,{"className":"logo","src":"/logo.svg","width":"22px","height":"20px","alt":"","role":"presentation"}],["$","strong",null,{"children":"React Notes"}]]}]}],["$","section",null,{"className":"sidebar-menu","role":"menubar","children":["$","$L9",null,{"href":"/note/edit/","className":"link--unstyled","children":["$","button",null,{"className":"edit-button edit-button--solid","role":"menuitem","children":"New"}]}]}],["$","nav",null,{"children":["$","$a",null,{"fallback":["$","div",null,{"children":["$","ul",null,{"className":"notes-list skeleton-container","children":[["$","li",null,{"className":"v-stack","children":["$","div",null,{"className":"sidebar-note-list-item skeleton","style":{"height":"5em"}}]}],["$","li",null,{"className":"v-stack","children":["$","div",null,{"className":"sidebar-note-list-item skeleton","style":{"height":"5em"}}]}],["$","li",null,{"className":"v-stack","children":["$","div",null,{"className":"sidebar-note-list-item skeleton","style":{"height":"5em"}}]}]]}]}],"children":"$Lb"}]}]]}]\nc:I[610,["250","static/chunks/250-3c648b94097e3c7b.js","185","static/chunks/app/layout-7bae744084688543.js"],""]\nb:["$","ul",null,{"className":"notes-list","children":[["$","li","1702459182837",{"children":["$","$Lc",null,{"id":"1702459182837","title":"3qui est","expandedChildren":["$","p",null,{"className":"sidebar-note-excerpt","children":"est rerum tempore vi"}],"children":["$","header",null,{"className":"sidebar-note-header","children":[["$","strong",null,{"children":"3qui est"}],["$","small",null,{"children":"2023-12-19 05:33:09"}]]}]}]}],["$","li","1702459181837",{"children":["$","$Lc",null,{"id":"1702459181837","title":"sunt aut","expandedChildren":["$","p",null,{"className":"sidebar-note-excerpt","children":"quia et suscipit sus"}],"children":["$","header",null,{"className":"sidebar-note-header","children":[["$","strong",null,{"children":"sunt aut"}],["$","small",null,{"children":"2023-12-13 05:19:48"}]]}]}]}],["$","li","1702459188837",{"children":["$","$Lc",null,{"id":"1702459188837","title":"ea molestias","expandedChildren":["$","p",null,{"className":"sidebar-note-excerpt","children":"et iusto sed quo iur"}],"children":["$","header",null,{"className":"sidebar-note-header","children":[["$","strong",null,{"children":"ea molestias"}],["$","small",null,{"children":"2023-12-13 05:19:48"}]]}]}]}]]}]\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["此时重定向地址为 ",(0,i.jsx)(n.code,{children:"/note/1702459182837"}),"，从响应的内容中可以看出，其中包含了渲染后的笔记列表和此条笔记的具体内容。该内容也是流式加载的，所以内容会逐步渲染出来。比如我们把  ",(0,i.jsx)(n.code,{children:"/note/[id]/page.js"}),"的 ",(0,i.jsx)(n.code,{children:"sleep"})," 设置为 10s，",(0,i.jsx)(n.code,{children:"/components/SidebarNoteList.js"}),"的 sleep 设置为 3s，效果如下："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:"ReactNotes更新流式渲染.gif"})}),"\n",(0,i.jsx)(n.p,{children:"点击后，左侧笔记列表 3s 后发生了变化，右侧笔记预览 10s 后发生了变化。"}),"\n",(0,i.jsx)(n.p,{children:"所以当提交表单的时候发生了什么呢？其实就是将数据以 POST 请求提交给当前页面，服务端根据 Server Actions 中的定义进行处理。Next.js 怎么实现的呢？其实就相当于替你写了原本用于交互的接口。"}),"\n",(0,i.jsxs)(n.h3,{id:"3-渐进式增强",children:["3. 渐进式增强",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-渐进式增强",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["使用 Server Actions 的一大好处就是渐进式增强，也就是说，即便你禁用了 JavaScript，照样可以生效。现在让我们查看 ",(0,i.jsx)(n.code,{children:"Done"}),"和 ",(0,i.jsx)(n.code,{children:"Delete"}),"按钮的源码："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["按钮的 ",(0,i.jsx)(n.code,{children:"formaction"})," 属性变成了："]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you're trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')\""}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"这说明……代码写的有问题……"}),"\n",(0,i.jsx)(n.p,{children:"现在我们提交表单的代码为："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<form className="note-editor-menu" role="menubar">\n  <button formAction={() => saveNote(noteId, title, body)}>\n    Done\n  </button>\n</form>\n'})}),"\n",(0,i.jsx)(n.p,{children:"虽然这种写法也可以生效，但在禁用 JavaScript 的时候会失效，为了避免这个错误，最好是像下面这样写："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<form className="note-editor-menu" role="menubar">\n  <button formAction={saveNote}>\n    Done\n  </button>\n</form>\n'})}),"\n",(0,i.jsx)(n.p,{children:"那么 noteId 该如何传入呢？我们可以使用传统的隐藏 input："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<input type="hidden" name="noteId" value={noteId} />\n'})}),"\n",(0,i.jsxs)(n.p,{children:["现在让我们重新写下 ",(0,i.jsx)(n.code,{children:"components/NoteEditor.js"})," 的代码："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'\'use client\'\n\nimport { useState } from \'react\'\nimport NotePreview from \'@/components/NotePreview\'\nimport { useFormStatus } from \'react-dom\'\nimport { deleteNote, saveNote } from \'../app/actions\'\n\nexport default function NoteEditor({\n  noteId,\n  initialTitle,\n  initialBody\n}) {\n\n  const { pending } = useFormStatus()\n  const [title, setTitle] = useState(initialTitle)\n  const [body, setBody] = useState(initialBody)\n  const isDraft = !noteId\n\n  return (\n    <div className="note-editor">\n      <form className="note-editor-form" autoComplete="off">\n        <div className="note-editor-menu" role="menubar">\n          <input type="hidden" name="noteId" value={noteId} />\n          <button\n            className="note-editor-done"\n            disabled={pending}\n            type="submit"\n            formAction={saveNote}\n            role="menuitem"\n          >\n            <img\n              src="/checkmark.svg"\n              width="14px"\n              height="10px"\n              alt=""\n              role="presentation"\n            />\n            Done\n          </button>\n          {!isDraft && (\n            <button\n              className="note-editor-delete"\n              disabled={pending}\n              formAction={deleteNote}\n              role="menuitem"\n            >\n              <img\n                src="/cross.svg"\n                width="10px"\n                height="10px"\n                alt=""\n                role="presentation"\n              />\n              Delete\n            </button>\n          )}\n        </div>\n        <label className="offscreen" htmlFor="note-title-input">\n          Enter a title for your note\n        </label>\n        <input\n          id="note-title-input"\n          type="text"\n          name="title"\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value)\n          }}\n        />\n        <label className="offscreen" htmlFor="note-body-input">\n          Enter the body for your note\n        </label>\n        <textarea\n          name="body"\n          value={body}\n          id="note-body-input"\n          onChange={(e) => setBody(e.target.value)}\n        />\n      </form>\n      <div className="note-editor-preview">\n        <div className="label label--preview" role="status">\n          Preview\n        </div>\n        <h1 className="note-title">{title}</h1>\n        <NotePreview>{body}</NotePreview>\n      </div>\n    </div>\n  )\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"app/actions.js"}),"的代码为："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"'use server'\n\nimport { redirect } from 'next/navigation'\nimport {addNote, updateNote, delNote} from '@/lib/redis';\nimport { revalidatePath } from 'next/cache';\n\nexport async function saveNote(formData) {\n\n  const noteId = formData.get('noteId')\n\n  const data = JSON.stringify({\n    title: formData.get('title'),\n    content: formData.get('body'),\n    updateTime: new Date()\n  })\n\n  if (noteId) {\n    updateNote(noteId, data)\n    revalidatePath('/', 'layout')\n    redirect(`/note/${noteId}`)\n  } else {\n    const res = await addNote(data)\n    revalidatePath('/', 'layout')\n    redirect(`/note/${res}`)\n  }\n\n}\n\nexport async function deleteNote(formData) {\n  const noteId = formData.get('noteId')\n\n  delNote(noteId)\n  revalidatePath('/', 'layout')\n  redirect('/')\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["此时再查看 ",(0,i.jsx)(n.code,{children:"Done"})," 和 ",(0,i.jsx)(n.code,{children:"Delete"})," 按钮元素："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"此时就没有刚才的错误信息了。现在让我们在开发者工具中禁用 JavaScript，你会发现表单依然能用："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:"ReactNotes停用JS.gif"})}),"\n",(0,i.jsx)(n.p,{children:"当然在这个例子中，因为禁用了 JavaScript，所以左侧的笔记列表加载不出来，更改内容的时候右边也不会实时渲染，但至少表单提交成功了。"}),"\n",(0,i.jsxs)(n.h3,{id:"4-useformstate-与-useformstatus",children:["4. useFormState 与 useFormStatus",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-useformstate-与-useformstatus",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["React 的 ",(0,i.jsx)(n.a,{href:"https://react.dev/reference/react-dom/hooks/useFormState",target:"_blank",rel:"noopener noreferrer",children:"useFormState"})," 和 ",(0,i.jsx)(n.a,{href:"/useFormStatus",children:"useFormStatus"})," 非常适合搭配 Server Actions 使用。",(0,i.jsx)(n.code,{children:"useFormState"})," 用于根据 form action 的结果更新表单状态，",(0,i.jsx)(n.code,{children:"useFormStatus"})," 用于在提交表单时显示待处理状态。"]}),"\n",(0,i.jsxs)(n.p,{children:["比如使用 ",(0,i.jsx)(n.code,{children:"useFormStatus"})," 实现表单提交时按钮的禁用效果："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"export default function NoteEditor() {\n  const { pending } = useFormStatus()\n\n  return (\n    <button disabled={pending}> Done </button>\n  )\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["又或者在提交的时候按钮的文字变成 ",(0,i.jsx)(n.code,{children:"Saving"}),"："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"export default function NoteEditor() {\n  const { pending } = useFormStatus()\n\n  return (\n    <button> { pending ? 'Saving' : 'Done' } </button>\n  )\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["注意使用 ",(0,i.jsx)(n.code,{children:"useFormStatus"})," 的时候，建议将按钮抽离成单独的组件，在组件中使用 ",(0,i.jsx)(n.code,{children:"useFormStatus"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["现在让我们修改下项目的效果，当点击 ",(0,i.jsx)(n.code,{children:"Done"})," 的时候，不再重定向，而是出现 ",(0,i.jsx)(n.code,{children:"Add Success!"}),"提示，我们再加入 ",(0,i.jsx)(n.code,{children:"useFormState"}),"重写下 ",(0,i.jsx)(n.code,{children:"components/NoteEditor.js"})," 的代码："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'\'use client\'\n\nimport { useState } from \'react\'\nimport NotePreview from \'@/components/NotePreview\'\nimport { useFormState } from \'react-dom\'\nimport { deleteNote, saveNote } from \'../app/actions\'\nimport SaveButton from \'@/components/SaveButton\'\nimport DeleteButton from \'@/components/DeleteButton\'\n\nconst initialState = {\n  message: null,\n}\n\nexport default function NoteEditor({\n  noteId,\n  initialTitle,\n  initialBody\n}) {\n\n  const [saveState, saveFormAction] = useFormState(saveNote, initialState)\n  const [delState, delFormAction] = useFormState(deleteNote, initialState)\n\n  const [title, setTitle] = useState(initialTitle)\n  const [body, setBody] = useState(initialBody)\n  \n  const isDraft = !noteId\n\n  return (\n    <div className="note-editor">\n      <form className="note-editor-form" autoComplete="off">\n        <div className="note-editor-menu" role="menubar">\n          <input type="hidden" name="noteId" value={noteId} />\n          <SaveButton formAction={saveFormAction} />\n          <DeleteButton isDraft={isDraft} formAction={delFormAction} />\n        </div>\n        <div className="note-editor-menu">\n          { saveState?.message }\n        </div>\n        <label className="offscreen" htmlFor="note-title-input">\n          Enter a title for your note\n        </label>\n        <input\n          id="note-title-input"\n          type="text"\n          name="title"\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value)\n          }}\n        />\n        <label className="offscreen" htmlFor="note-body-input">\n          Enter the body for your note\n        </label>\n        <textarea\n          name="body"\n          value={body}\n          id="note-body-input"\n          onChange={(e) => setBody(e.target.value)}\n        />\n      </form>\n      <div className="note-editor-preview">\n        <div className="label label--preview" role="status">\n          Preview\n        </div>\n        <h1 className="note-title">{title}</h1>\n        <NotePreview>{body}</NotePreview>\n      </div>\n    </div>\n  )\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"我们将 Done 和 Delete 按钮抽离成了两个组件。"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"components/SaveButton.js"}),"代码如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { useFormStatus } from \'react-dom\'\n\nexport default function EditButton({ formAction }) {\n  const { pending } = useFormStatus()\n  return (\n    <button\n      className="note-editor-done"\n      type="submit"\n      formAction={formAction}\n      disabled={pending}\n      role="menuitem"\n    >\n      <img\n        src="/checkmark.svg"\n        width="14px"\n        height="10px"\n        alt=""\n        role="presentation"\n      />\n      {pending ? \'Saving\' : \'Done\'}\n    </button>\n  );\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"components/DeleteButton.js"}),"代码如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { useFormStatus } from \'react-dom\'\n\nexport default function DeleteButton({ isDraft, formAction }) {\n  const { pending } = useFormStatus()\n  return !isDraft && (\n      <button\n        className="note-editor-delete"\n        disabled={pending}\n        formAction={formAction}\n        role="menuitem"\n      >\n        <img\n          src="/cross.svg"\n          width="10px"\n          height="10px"\n          alt=""\n          role="presentation"\n        />\n        Delete\n      </button>\n    )\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"app/actions.js"}),"的代码为："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"'use server'\n\nimport { redirect } from 'next/navigation'\nimport {addNote, updateNote, delNote} from '@/lib/redis';\nimport { revalidatePath } from 'next/cache';\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\n\nexport async function saveNote(prevState, formData) {\n\n  const noteId = formData.get('noteId')\n\n  const data = JSON.stringify({\n    title: formData.get('title'),\n    content: formData.get('body'),\n    updateTime: new Date()\n  })\n\n  // 为了让效果更明显\n  await sleep(2000)\n\n  if (noteId) {\n    updateNote(noteId, data)\n    revalidatePath('/', 'layout')\n  } else {\n    const res = await addNote(data)\n    revalidatePath('/', 'layout')\n  }\n  return { message: `Add Success!` }\n}\n\nexport async function deleteNote(prevState, formData) {\n  const noteId = formData.get('noteId')\n  delNote(noteId)\n  revalidatePath('/', 'layout')\n  redirect('/')\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["此时再点击 ",(0,i.jsx)(n.code,{children:"Done"})," 按钮："]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("img",{src:o,alt:"ReactNotes-useForm.gif"}),"\n当点击 ",(0,i.jsx)(n.code,{children:"Done"})," 按钮的时候，",(0,i.jsx)(n.code,{children:"Done"})," 和 ",(0,i.jsx)(n.code,{children:"Delete"})," 按钮都出现了 disabled 样式（毕竟这两个按钮在一个表单内），2s 后，出现 Add Success! 提示。"]}),"\n",(0,i.jsxs)(n.h3,{id:"5-数据校验",children:["5. 数据校验",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-数据校验",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["如果需要对数据进行校验，Next.js 推荐使用 ",(0,i.jsx)(n.a,{href:"https://zod.dev/README_ZH",target:"_blank",rel:"noopener noreferrer",children:"zod"}),"，我们使用  zod 修改下 ",(0,i.jsx)(n.code,{children:"/app/actions.js"}),"："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"'use server'\n\nimport { redirect } from 'next/navigation'\nimport {addNote, updateNote, delNote} from '@/lib/redis';\nimport { revalidatePath } from 'next/cache';\nimport { z } from \"zod\";\n\nconst schema = z.object({\n  title: z.string(),\n  content: z.string().min(1, '请填写内容').max(100, '字数最多 100')\n});\n\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\n\nexport async function saveNote(prevState, formData) {\n\n  // 获取 noteId\n  const noteId = formData.get('noteId')\n  const data = {\n    title: formData.get('title'),\n    content: formData.get('body'),\n    updateTime: new Date()\n  }\n\n  // 校验数据\n  const validated = schema.safeParse(data)\n  if (!validated.success) {\n    return {\n      errors: validated.error.issues,\n    }\n  }\n\n  // 模拟请求时间\n  await sleep(2000)\n\n  // 更新数据库\n  if (noteId) {\n    await updateNote(noteId, JSON.stringify(data))\n    revalidatePath('/', 'layout')\n  } else {\n    await addNote(JSON.stringify(data))\n    revalidatePath('/', 'layout')\n  }\n  \n  return { message: `Add Success!` }\n}\n\nexport async function deleteNote(prevState, formData) {\n  const noteId = formData.get('noteId')\n  delNote(noteId)\n  revalidatePath('/', 'layout')\n  redirect('/')\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"components/NoteEditor.js"}),"代码如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'\'use client\'\n\nimport { useEffect, useRef, useState } from \'react\'\nimport NotePreview from \'@/components/NotePreview\'\nimport { useFormState } from \'react-dom\'\nimport { deleteNote, saveNote } from \'../app/actions\'\nimport SaveButton from \'@/components/SaveButton\'\nimport DeleteButton from \'@/components/DeleteButton\'\n\nconst initialState = {\n  message: null,\n}\n\nexport default function NoteEditor({\n  noteId,\n  initialTitle,\n  initialBody\n}) {\n\n  const [saveState, saveFormAction] = useFormState(saveNote, initialState)\n  const [delState, delFormAction] = useFormState(deleteNote, initialState)\n\n  const [title, setTitle] = useState(initialTitle)\n  const [body, setBody] = useState(initialBody)\n\n  const isDraft = !noteId\n\n  useEffect(() => {\n    if (saveState.errors) {\n      // 处理错误\n      console.log(saveState.errors)\n    }\n  }, [saveState])\n\n  return (\n    <div className="note-editor">\n      <form className="note-editor-form" autoComplete="off">\n        <input type="hidden" name="noteId" value={noteId || \'\'} />\n        <div className="note-editor-menu" role="menubar">\n          <SaveButton formAction={saveFormAction} />\n          <DeleteButton isDraft={isDraft} formAction={delFormAction} />\n        </div>\n        <div className="note-editor-menu">\n          { saveState?.message }\n          { saveState.errors && saveState.errors[0].message }\n        </div>\n        <label className="offscreen" htmlFor="note-title-input">\n          Enter a title for your note\n        </label>\n        <input\n          id="note-title-input"\n          type="text"\n          name="title"\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value)\n          }}\n        />\n        <label className="offscreen" htmlFor="note-body-input">\n          Enter the body for your note\n        </label>\n        <textarea\n          name="body"\n          value={body}\n          id="note-body-input"\n          onChange={(e) => setBody(e.target.value)}\n        />\n      </form>\n      <div className="note-editor-preview">\n        <div className="label label--preview" role="status">\n          Preview\n        </div>\n        <h1 className="note-title">{title}</h1>\n        <NotePreview>{body}</NotePreview>\n      </div>\n    </div>\n  )\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"实现效果如下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:"ReactNotes-zod.gif"})}),"\n",(0,i.jsxs)(n.h3,{id:"6-最佳实践server-actions",children:["6. 最佳实践：Server Actions",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-最佳实践server-actions",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"写 Server Actions 基本要注意的点就这些了，定义在 actions 的代码要注意："}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["从 ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/FormData",target:"_blank",rel:"noopener noreferrer",children:"formData"})," 中获取提交的数据"]}),"\n",(0,i.jsxs)(n.li,{children:["使用 ",(0,i.jsx)(n.a,{href:"https://zod.dev/README_ZH",target:"_blank",rel:"noopener noreferrer",children:"zod"})," 进行数据校验"]}),"\n",(0,i.jsxs)(n.li,{children:["使用 ",(0,i.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079586296791050#heading-12",target:"_blank",rel:"noopener noreferrer",children:"revalidate"})," 更新数据缓存"]}),"\n",(0,i.jsx)(n.li,{children:"返回合适的信息"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"定义表单的代码要注意："}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["搭配使用 ",(0,i.jsx)(n.a,{href:"https://react.dev/reference/react-dom/hooks/useFormState",target:"_blank",rel:"noopener noreferrer",children:"useFormState"})," 和 ",(0,i.jsx)(n.a,{href:"/useFormStatus",children:"useFormStatus"})]}),"\n",(0,i.jsx)(n.li,{children:"特殊数据使用隐藏 input 提交"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"那么今天的内容就结束了，本篇我们完善了笔记的编辑效果，了解了客户端组件与服务端组件的划分以及在实战中使用 Server Actions，学习书写 Server Actions 时的注意事项和最佳实践。"}),"\n",(0,i.jsxs)(n.p,{children:["本篇的代码我已经上传到",(0,i.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/main",target:"_blank",rel:"noopener noreferrer",children:"代码仓库"}),"的 Day 4 分支：",(0,i.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/day4",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/day4"}),"，本篇的不同版本以不同的 commit 进行了提交，此外直接使用的时候不要忘记在本地开启 Redis。"]})]})}function w(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(k,{...e})}):k(e)}let D=w;w.__RSPRESS_PAGE_META={},w.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F40.%E5%AE%9E%E6%88%98%E7%AF%87%20_%20React%20Notes%20_%20%E7%AC%94%E8%AE%B0%E7%BC%96%E8%BE%91%E7%95%8C%E9%9D%A2.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"笔记编辑界面",id:"笔记编辑界面",depth:2},{text:"服务端组件和客户端组件",id:"服务端组件和客户端组件",depth:3},{text:"笔记编辑和删除",id:"笔记编辑和删除",depth:2},{text:"Server Actions",id:"server-actions",depth:2},{text:"1. 完整路由缓存与 revalidate",id:"1-完整路由缓存与-revalidate",depth:3},{text:"2. 实现原理",id:"2-实现原理",depth:3},{text:"3. 渐进式增强",id:"3-渐进式增强",depth:3},{text:"4. useFormState 与 useFormStatus",id:"4-useformstate-与-useformstatus",depth:3},{text:"5. 数据校验",id:"5-数据校验",depth:3},{text:"6. 最佳实践：Server Actions",id:"6-最佳实践server-actions",depth:3},{text:"总结",id:"总结",depth:2}],title:"40.实战篇 _ React Notes _ 笔记编辑界面",headingTitle:"40.实战篇 _ React Notes _ 笔记编辑界面",frontmatter:{}}}}]);