"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["52724"],{720694:function(e,n,r){r.r(n),r.d(n,{default:()=>i});var s=r(552676),c=r(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",code:"code",blockquote:"blockquote",pre:"pre",h4:"h4",ul:"ul",li:"li",strong:"strong"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"第22章通用篇electron应用安全性指南",children:["第22章—通用篇：Electron应用安全性指南",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第22章通用篇electron应用安全性指南",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"\uFEFF## 前言\n当我们聊到 Electron 安全性问题的时候，我们可以从两个方面来谈谈安全性问题，一个为 Electron 源码安全性的防护，一个是 Electron 应用安全性的防护。"}),"\n",(0,s.jsx)(n.p,{children:"接下来，我们一起来详细探讨一下这两个方面的安全性措施。"}),"\n",(0,s.jsxs)(n.h2,{id:"electron-的应用安全性",children:["Electron 的应用安全性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#electron-的应用安全性",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"如果你构建的 Electron 应用目的主要显示本地内容，所有代码都是本地受信任的，即使有远程内容也是无 Node 的、受信任的、安全的内容，那么你可以不用太在意这部分的安全性内容。"}),"\n",(0,s.jsx)(n.p,{children:"但如果你需要加载三方不受信任的来源网站且为这些网站提供了可以访问、操作文件系统，用户 shell 等能力和权限那么可能会造成重大的安全风险。"}),"\n",(0,s.jsxs)(n.h3,{id:"1-说明",children:["1. 说明",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-说明",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Electron 的最大优势之一基于 ",(0,s.jsx)(n.code,{children:"Node.js + Chromium"})," 可以快速构建跨平台的桌面端应用，但这也是它最大的安全风险所在。"]}),"\n",(0,s.jsxs)(n.p,{children:["首先，Electron 是基于 ",(0,s.jsx)(n.code,{children:"Chromium"}),"，那么就会面对基本的 ",(0,s.jsx)(n.code,{children:"Web"})," 安全风险。常见的 web 攻击方式有 ",(0,s.jsx)(n.code,{children:"XSS"})," 和 ",(0,s.jsx)(n.code,{children:"CSRF"})," 两种，这里的内容就是作为前端的我们经常碰到和需要处理的地方，网上也有很多教程和防范方式，不在本节中做过多介绍。"]}),"\n",(0,s.jsxs)(n.p,{children:["其次，也是因为集成了 ",(0,s.jsx)(n.code,{children:"Node.js"})," 的缘故，导致了一些安全性问题，在 Electron v5 版本之前，Electron 的应用程序是这样的一种架构模式："]}),"\n",(0,s.jsxs)(n.p,{children:["其中，渲染进程和主进程之间的主要沟通桥梁是 ",(0,s.jsx)(n.code,{children:"remote"})," 模块和 ",(0,s.jsx)(n.code,{children:"nodeIntegration"}),"，集成 Node 是使 Electron 功能强大的原因之一，但也使其极易受到黑客攻击。在渲染进程中集成 Node 加载三方网站或者资源的时候，就会极易收到 ",(0,s.jsx)(n.code,{children:"RCE"}),"（remote command/code execute） 攻击。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"RCE（远程代码执行）攻击是一种恶意行为，指的是攻击者通过远程的方式成功在目标系统上执行自己的代码。这种攻击通常利用安全漏洞或弱点，使攻击者能够远程执行恶意代码，从而控制目标系统、窃取敏感信息或对系统造成损害。RCE 攻击对系统安全构成严重威胁，因为它允许攻击者在远程环境下实施任意代码，从而影响系统的功能和安全性。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["举个例子，比如我们通过 Electron 的 ",(0,s.jsx)(n.code,{children:"BrowserWindow"})," 模块加载了一个三方网站，然后这个网站中存在着这样的一段代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<img onerror=\"require('child_process').exec('rm -rf *')\" />\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这种三方网站不受信任的代码就会造成对计算机的伤害。所以如何防止这样问题的发生，那就是不要授予这些网站直接操作 ",(0,s.jsx)(n.code,{children:"node"})," 的能力，也就意味着遵循最小权限原则，只赋予应用程序所需的最低限度权限。"]}),"\n",(0,s.jsx)(n.p,{children:"所以，从 Electron v5 开始，Electron 默认关闭这些不安全的选项，并默认选择更安全的选项。渲染器和主进程之间的通信被解耦，变得更加安全："}),"\n",(0,s.jsx)(n.p,{children:"IPC 可用于在主进程和渲染进程之间通信，而 preload 脚本可以扩展渲染进程的功能，提供必要的操作权限，这种责任分离使我们能够应用最小权限原则。"}),"\n",(0,s.jsxs)(n.h3,{id:"2-常见措施",children:["2. 常见措施",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-常见措施",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"21-使用-preloadjs-扩展渲染进程能力",children:["2.1 使用 preload.js 扩展渲染进程能力",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-使用-preloadjs-扩展渲染进程能力",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 Electron 最新版本中，默认都是关闭了渲染进程对 ",(0,s.jsx)(n.code,{children:"node"})," 的集成，如果你需要渲染进程调用和执行 ",(0,s.jsx)(n.code,{children:"node"})," 脚本，那么可以通过 ",(0,s.jsx)(n.code,{children:"preload.js"})," 的方式进行集成："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const mainWindow = new BrowserWindow({\n  webPreferences: {\n    preload: path.join(app.getAppPath(), 'preload.js')\n  }\n})\n\nmainWindow.loadURL('https://example.com')\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"22-开启上下文隔离",children:["2.2 开启上下文隔离",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-开启上下文隔离",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["上下文隔离是从安全角度考量的，即不允许\xa0",(0,s.jsxs)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/api/web-contents",target:"_blank",rel:"noopener noreferrer",children:[(0,s.jsx)(n.code,{children:"webcontent"}),"\xa0(opens new window)"]})," 网页使用 Electron 内部组件与预加载脚本可访问的高等级权限的 API ， 默认情况下 electron 是开启上下文隔离的。"]}),"\n",(0,s.jsxs)(n.p,{children:["开启上下文隔离后，渲染进程和 ",(0,s.jsx)(n.code,{children:"preload.js"})," 将不会共享 ",(0,s.jsx)(n.code,{children:"window"})," 对象，比如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// preload.js\n// 上下文隔离情况下使用预加载\nwindow.myAPI = {\n  doAThing: () => {}\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// renderer.js\n// 在渲染器进程使用导出的 API 将会报错\nwindow.myAPI.doAThing()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果你可以确认加载的三方内容是可信的，你希望关闭上下文隔离，可以通过 ",(0,s.jsx)(n.code,{children:"contextIsolation: false"})," 来设置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// main.js\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    webPreferences: {\n      contextIsolation: false\n    }\n  })\n  win.loadURL('https://example.com')\n})\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"23-开启进程沙盒化",children:["2.3 开启进程沙盒化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-开启进程沙盒化",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当 Electron 中的渲染进程被沙盒化后，它的功能就和普通 Chrome 浏览器一样了，同时也不会有 ",(0,s.jsx)(n.code,{children:"Node"})," 环境。在沙盒中，渲染进程只能通过 ",(0,s.jsx)(n.code,{children:"preload.js"}),"（预加载脚本）中 IPC（进程间通信）的方式委派任务给主进程来执行需权限的任务（例如：文件系统交互，对系统进行更改或生成子进程）。"]}),"\n",(0,s.jsxs)(n.p,{children:["启用沙盒化后，为了让渲染进程能与主进程通信，附属于沙盒化的渲染进程的 ",(0,s.jsx)(n.code,{children:"preload.js"})," 脚本中仍可使用一部分以 Polyfill 形式实现的 Node.js API。有一个与 Node 中类似的\xa0",(0,s.jsx)(n.code,{children:"require"}),"\xa0函数提供了出来，但只能载入 Electron 和 Node 内置模块的一个子集，比如："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"electron"})," 中渲染进程可使用的模块"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nodejs.org/api/events.html",target:"_blank",rel:"noopener noreferrer",children:"events"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nodejs.org/api/timers.html",target:"_blank",rel:"noopener noreferrer",children:"timers"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nodejs.org/api/url.html",target:"_blank",rel:"noopener noreferrer",children:"url"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["比如，我们在沙盒化的渲染进程的 ",(0,s.jsx)(n.code,{children:"preload.js"})," 文件中使用 ",(0,s.jsx)(n.code,{children:"Node fs"})," 模块："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// preload.js\nimport fs from 'fs';\n"})}),"\n",(0,s.jsx)(n.p,{children:"那么不出意外就会报以下错误："}),"\n",(0,s.jsxs)(n.p,{children:["从 Electron 20 开始，渲染进程默认启用了沙盒，无需进一步配置，如果你可以确认加载的三方内容是可信的，你希望关闭沙盒，可以通过 ",(0,s.jsx)(n.code,{children:"sandbox: false"})," 来设置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// main.js\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    webPreferences: {\n      sandbox: false\n    }\n  })\n  win.loadURL('https://example.com')\n})\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"24-开启-websecurity",children:["2.4 开启 ",(0,s.jsx)(n.code,{children:"webSecurity"}),(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24-开启-websecurity",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["开启 ",(0,s.jsx)(n.code,{children:"webSecurity"})," 会启用浏览器的同源策略，比如一些跨域资源请求将会被拦截；除此之外，也会将 ",(0,s.jsx)(n.code,{children:"allowRunningInsecureContent"})," 设置为 ",(0,s.jsx)(n.code,{children:"true"}),"，这就意味着 Electron 将允许网站在 ",(0,s.jsx)(n.code,{children:"HTTPS"})," 中加载或执行非安全源(",(0,s.jsx)(n.code,{children:"HTTP"}),") 中的 js 代码、CSS 或插件。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果你加载网站希望突破跨域请求限制，你可以通过如下设置来关闭 ",(0,s.jsx)(n.code,{children:"webSecurity"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// main.js\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    webSecurity: false\n  }\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["但是，如果仅仅是为了突破跨域请求限制，在 Electron 中还有别的方法，我们知道请求",(0,s.jsx)(n.strong,{children:"不同源跨域"}),"的原因是：当我们使用浏览器来向一个服务网站发送请求，服务网站响应请求后，浏览器会检查我们的请求域名是否在 ",(0,s.jsx)(n.code,{children:"Access-Control-Allow-Origin"})," 白名单中，如果不在，就会产生跨域限制："]}),"\n",(0,s.jsxs)(n.p,{children:["所以，如果在浏览器进行 ",(0,s.jsx)(n.code,{children:"Access-Control-Allow-Origin"})," 检查之前，我们修改它，让浏览器误以为服务器已经同意了我们的请求，这样会起作用吗？答案是肯定的，在 Electron 中我们可以这样修改："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {\n    callback({\n      responseHeaders: {\n        // 通过请求源校验\n        'Access-Control-Allow-Origin': ['*'],\n        ...details.responseHeaders,\n      },\n    });\n  });\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们可以通过控制台看到，响应的 ",(0,s.jsx)(n.code,{children:"Access-Control-Allow-Origin"})," 已经被修改："]}),"\n",(0,s.jsxs)(n.h4,{id:"25-限制网页跳转",children:["2.5 限制网页跳转",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#25-限制网页跳转",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"若你的应用无需导航功能或只需前往已知页面，最好将导航严格限制在特定范围内，禁止其他任何类型的导航。一种常见的攻击模式是，攻击者通过链接、插件或其他用户生成的内容诱导你应用的用户与应用互动，并可能导航至攻击者构建的页面。"}),"\n",(0,s.jsxs)(n.p,{children:["可以通过 ",(0,s.jsx)(n.code,{children:"will-navigate"})," 钩子中调用 ",(0,s.jsx)(n.code,{children:"event.preventDefault()"})," 函数来阻断导航跳转："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// main.js\nconst { URL } = require('url')\nconst { app } = require('electron')\n\napp.on('web-contents-created', (event, contents) => {\n  contents.on('will-navigate', (event, navigationUrl) => {\n    const parsedUrl = new URL(navigationUrl)\n\n    if (parsedUrl.origin !== 'https://example.com') {\n      event.preventDefault()\n    }\n  })\n})\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-小结",children:["3. 小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-小结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Electron 安全性的原则是基于最小化权限的原则为前提的，我们需要为我们的应用保持最小化权限只为受信任的内容开启需要用到的能力。安全性防护措施部分，我们从 Electron 官网“",(0,s.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/tutorial/security",target:"_blank",rel:"noopener noreferrer",children:"安全最佳实践"}),"”部分抽取了具有代表性的几个部分，更多内容也建议你翻阅官方文档进行查阅。"]}),"\n",(0,s.jsxs)(n.h2,{id:"electron-的源码安全性",children:["Electron 的源码安全性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#electron-的源码安全性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 Electron 应用打包篇介绍了我们写的 Electron 业务代码在没有特殊声明的情况下都会被打包进入 ",(0,s.jsx)(n.code,{children:".asar"})," 文件中。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"asar"})," 是一种文件归档方式，做的仅仅是把多个目录和文件合并在一起，打包成 ",(0,s.jsx)(n.code,{children:"asar"})," 文件只能避免一些简单的源码分析工具来分析你的代码，可以通过 ",(0,s.jsx)(n.a,{href:"https://github.com/electron/asar",target:"_blank",rel:"noopener noreferrer",children:"@electron/asar"})," 这个包来轻松对 ",(0,s.jsx)(n.code,{children:"asar"})," 文件进行解压。解压后的文件目录和代码就是我们通过 ",(0,s.jsx)(n.code,{children:"webpack"})," 打包后的东西。"]}),"\n",(0,s.jsx)(n.p,{children:"为了避免黑客对我们的应用程序进行解包、修改逻辑破解商业化限制、重新打包，再重新分发破解版，我们需要对代码进行加固，避免解包、篡改、二次打包、二次分发。"}),"\n",(0,s.jsx)(n.p,{children:"接下来介绍几种常用的源码保护措施。"}),"\n",(0,s.jsxs)(n.h3,{id:"1-保护-asar-不被解压",children:["1. 保护 asar 不被解压",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-保护-asar-不被解压",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Electron 是将打包后的文件按照一定的规则和算法拼接成一个 ",(0,s.jsx)(n.code,{children:".asar"})," 文件："]}),"\n",(0,s.jsx)(n.p,{children:"其中："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"header_size"}),"\xa0区域：表示 header 区域占用的字节数。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"header"}),"\xa0区域：用 JSON 记录了 asar 内所有文件的信息。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file"}),"\xa0区域：保存了文件内容。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["但是，对于 Electron 的 asar 而言，其读取和生成 ",(0,s.jsx)(n.code,{children:".asar"})," 文件的方式和内容都是公开透明的，业界有很多可以解压 ",(0,s.jsx)(n.code,{children:"asar"})," 文件的方法，如果想要 ",(0,s.jsx)(n.code,{children:"asar"})," 文件不被解压，那么只能对其进行加密：将 Electron ",(0,s.jsx)(n.code,{children:"asar"})," 文件进行加密，并修改 Electron 源代码，在读取 ",(0,s.jsx)(n.code,{children:"asar"})," 文件之前对其解密后再运行。"]}),"\n",(0,s.jsx)(n.p,{children:"可是修改 Electron 源码的事情，也是成本非常高！"}),"\n",(0,s.jsxs)(n.h3,{id:"2-保护业务代码",children:["2. 保护业务代码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-保护业务代码",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["修改 Electron 对 ",(0,s.jsx)(n.code,{children:"asar"})," 文件的解密还是比较复杂和困难的，如果无法完成对 ",(0,s.jsx)(n.code,{children:"asar"})," 文件的解密，那么就只能对业务代码进行保护。"]}),"\n",(0,s.jsx)(n.p,{children:"常见的手段有："}),"\n",(0,s.jsxs)(n.h4,{id:"21-对源码的压缩混淆",children:["2.1 对源码的压缩混淆",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-对源码的压缩混淆",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"源码的压缩混淆是前端开发经常使用的对代码保护的方式之一。"}),"\n",(0,s.jsxs)(n.p,{children:["源码压缩主要是通过消除不必要的空格、注释、换行以及缩短变量名等方式，减少代码文件的体积，加快文件加载速度。常用的压缩工具有 ",(0,s.jsx)(n.a,{href:"https://link.zhihu.com/?target=https%3A//github.com/terser/terser",target:"_blank",rel:"noopener noreferrer",children:"terser"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"比如这段代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// example.js\nvar x = {\n    baz_: 0,\n    foo_: 1,\n    calc: function() {\n        return this.foo_ + this.baz_;\n    }\n};\nx.bar_ = 2;\nx["baz_"] = 3;\nconsole.log(x.calc());\n'})}),"\n",(0,s.jsx)(n.p,{children:"压缩后变成了："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"var x={o:3,t:1,i:function(){return this.t+this.o},s:2};console.log(x.i());\n"})}),"\n",(0,s.jsx)(n.p,{children:"这仅仅在很小的程度上保护了源码，降低了可读性和调试性。"}),"\n",(0,s.jsxs)(n.p,{children:["源码混淆则是通过重命名变量和函数名、替换常量为表达式等手段，使得代码难以阅读和理解。同时引入无意义的代码逻辑，增加代码的复杂度，使得恶意用户难以逆向工程或窃取关键信息。常用的混淆工具有 ",(0,s.jsx)(n.a,{href:"https://obfuscator.io/",target:"_blank",rel:"noopener noreferrer",children:"obfuscator"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"比如这段代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function hi() {\n  console.log("Hello World!");\n}\nhi();\n'})}),"\n",(0,s.jsx)(n.p,{children:"在混淆后变成了："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"(function(_0xad372b,_0x3b4951){var _0x175d8f=_0x2960,_0x1de143=_0xad372b();while(!![]){try{var _0x16ee06=parseInt(_0x175d8f(0xde))/0x1*(-parseInt(_0x175d8f(0xd8))/0x2)+parseInt(_0x175d8f(0xdf))/0x3*(parseInt(_0x175d8f(0xda))/0x4)+parseInt(_0x175d8f(0xe2))/0x5+-parseInt(_0x175d8f(0xdb))/0x6+parseInt(_0x175d8f(0xd9))/0x7+-parseInt(_0x175d8f(0xe0))/0x8+parseInt(_0x175d8f(0xe1))/0x9*(-parseInt(_0x175d8f(0xdd))/0xa);if(_0x16ee06===_0x3b4951)break;else _0x1de143['push'](_0x1de143['shift']());}catch(_0x2505be){_0x1de143['push'](_0x1de143['shift']());}}}(_0x3e9a,0x763ae));function _0x2960(_0x2e2777,_0x3c8841){var _0x3e9aee=_0x3e9a();return _0x2960=function(_0x2960fb,_0x4ab4ac){_0x2960fb=_0x2960fb-0xd8;var _0x1b2a99=_0x3e9aee[_0x2960fb];return _0x1b2a99;},_0x2960(_0x2e2777,_0x3c8841);}function hi(){var _0x228f31=_0x2960;console[_0x228f31(0xe3)](_0x228f31(0xdc));}hi();function _0x3e9a(){var _0x4828cb=['74miVIYO','3085670pOvcLX','58244Owrwws','551034csRwNb','Hello\\x20World!','10HmgHsf','9794nzEtTH','147mDhoCB','91560dSXtiz','3648915RpwQuz','1005340vxJhhO','log'];_0x3e9a=function(){return _0x4828cb;};return _0x3e9a();}\n"})}),"\n",(0,s.jsx)(n.p,{children:"可以看到混淆后极大降低了源码的可读性和可调试性，但是代码体积增加了不少且额外带来了不同程度上的性能损耗。但依然可以为源码注入恶意程序，进行二次打包。"}),"\n",(0,s.jsxs)(n.h4,{id:"22-使用-native-加密",children:["2.2 使用 Native 加密",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-使用-native-加密",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们知道，Electron 可以调用和执行一些 ",(0,s.jsx)(n.code,{children:"Node"})," 原生模块和 ",(0,s.jsx)(n.code,{children:"Node"})," 扩展程序，因此，我们可以将一些业务核心代码（证书、秘钥、加解密）通过 ",(0,s.jsx)(n.code,{children:"C++"})," 编写，然后通过 ",(0,s.jsx)(n.code,{children:"node-gyp"})," 构建成 ",(0,s.jsx)(n.code,{children:".node"})," 的二进制文件再提供给应用程序使用。"]}),"\n",(0,s.jsxs)(n.p,{children:["这个方法确实能解决对核心业务的安全防护能力，但是需要一定的 ",(0,s.jsx)(n.code,{children:"C++"})," 开发经验。"]}),"\n",(0,s.jsxs)(n.h4,{id:"23-v8-字节码",children:["2.3 V8 字节码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-v8-字节码",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["通过 Node 标准库里的\xa0",(0,s.jsx)(n.code,{children:"vm"}),"\xa0模块，可以从 script 对象中生成其缓存数据（",(0,s.jsx)(n.a,{href:"https://nodejs.org/api/vm.html#vm_script_createcacheddata",target:"_blank",rel:"noopener noreferrer",children:"参考 vm_script_createcacheddata"}),"）。该缓存数据可以理解为 v8 的字节码，该方案通过分发字节码的形式来达到源代码保护的目的。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"V8 字节码是 V8 JavaScript 引擎的一种形式，它是用于优化和执行 JavaScript 代码的一种中间表示形式。当 JavaScript 代码在 V8 引擎中执行时，它首先经历了解析和编译阶段，然后被转换成字节码以供执行。"}),"\n",(0,s.jsx)(n.p,{children:"字节码是一种介于高级源代码和底层机器代码之间的中间表示形式。它比源代码更接近底层机器代码，但仍具有某种程度的可移植性和可读性。V8 引擎将 JavaScript 代码编译成字节码，以便更高效地执行代码。字节码可以被即时编译器（JIT）进一步优化，转换为本地机器代码以加速执行过程。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"所以，如果我们通过 V8 字节码运行代码，不仅能够起到代码保护作用，还对性能有一定的提升。"}),"\n",(0,s.jsxs)(n.p,{children:["如果你用的是 ",(0,s.jsx)(n.a,{href:"https://cn.electron-vite.org/guide/source-code-protection",target:"_blank",rel:"noopener noreferrer",children:"electron-vite"})," 作为脚手架来构建你的应用程序，那么你可以通过 ",(0,s.jsx)(n.code,{children:"bytecodePlugin"})," 插件来开启字节码保护："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// electron.vite.config.js\nimport { defineConfig, bytecodePlugin } from 'electron-vite'\n\nexport default defineConfig({\n  main: {\n    plugins: [bytecodePlugin()]\n  },\n  preload: {\n    plugins: [bytecodePlugin()]\n  },\n  renderer: {\n    // ...\n  }\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["但是开启 V8 字节码后也会有一些缺陷产生，比如：",(0,s.jsx)(n.code,{children:"Function.prototype.toString"})," 代码转字节码后会导致程序异常，所以尽量不要在项目中使用这个方法或依赖了使用这个方法的库，这通常有点难~"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"盾和矛孰强孰劣，自古以来都有边界，没有绝对的安全可言，当恶意用户攻破你的系统所付出的成本远大于他们能获得的收益时，我们就认为这个系统是安全的。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let i=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC22%E7%AB%A0%E2%80%94%E9%80%9A%E7%94%A8%E7%AF%87%EF%BC%9AElectron%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E6%80%A7%E6%8C%87%E5%8D%97.md"]={toc:[{text:"Electron 的应用安全性",id:"electron-的应用安全性",depth:2},{text:"1. 说明",id:"1-说明",depth:3},{text:"2. 常见措施",id:"2-常见措施",depth:3},{text:"2.1 使用 preload.js 扩展渲染进程能力",id:"21-使用-preloadjs-扩展渲染进程能力",depth:4},{text:"2.2 开启上下文隔离",id:"22-开启上下文隔离",depth:4},{text:"2.3 开启进程沙盒化",id:"23-开启进程沙盒化",depth:4},{text:"2.4 开启 `webSecurity`",id:"24-开启-websecurity",depth:4},{text:"2.5 限制网页跳转",id:"25-限制网页跳转",depth:4},{text:"3. 小结",id:"3-小结",depth:3},{text:"Electron 的源码安全性",id:"electron-的源码安全性",depth:2},{text:"1. 保护 asar 不被解压",id:"1-保护-asar-不被解压",depth:3},{text:"2. 保护业务代码",id:"2-保护业务代码",depth:3},{text:"2.1 对源码的压缩混淆",id:"21-对源码的压缩混淆",depth:4},{text:"2.2 使用 Native 加密",id:"22-使用-native-加密",depth:4},{text:"2.3 V8 字节码",id:"23-v8-字节码",depth:4},{text:"总结",id:"总结",depth:2}],title:"第22章—通用篇：Electron应用安全性指南",headingTitle:"第22章—通用篇：Electron应用安全性指南",frontmatter:{}}}}]);