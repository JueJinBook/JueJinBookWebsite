"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["49530"],{174322:function(e,c,s){s.r(c),s.d(c,{default:()=>Q});var n=s(552676),i=s(740453);let d=s.p+"static/image/7bcc1e200d808f09256373451d7bfb80.2b5980ee.webp",a=s.p+"static/image/426e39dbd9da07055dae75deed368334.6ce05ce7.webp",p=s.p+"static/image/7f7bafaf085638ac67f9b91aa15df84c.e627c598.webp",r=s.p+"static/image/6f6c372aa74f232edd66c589ed050038.db2e5058.webp",t=s.p+"static/image/f698a88bf083267c96adc336a17930a4.019a5fce.webp",l=s.p+"static/image/be783b32b0d76e40b459222171df5f21.c3845fa1.webp",j=s.p+"static/image/2b2509ffae463adac8963c1517059b45.5700d2c0.webp",x=s.p+"static/image/3f6577b51b03162a6ccb7f170619f70b.194cc91e.webp",h=s.p+"static/image/2850a86e4eda5f7fb779fee0934d1db6.5b8e9540.webp",b=s.p+"static/image/9758e7ca9c991370f445eccbf8c9f545.4a2f0817.webp",f=s.p+"static/image/72cc9e090f59843c54173859330b138a.a891f9a8.webp",m=s.p+"static/image/2d329632e3d6c5c1494bd89a16035ed3.3fb12ef0.webp",g=s.p+"static/image/8ea30ee865a484438916acb77f15542b.9ce2ec0a.webp",o=s.p+"static/image/bf6cce25dd2f71a7ef27ea5d4772db48.02ca123c.webp",S=s.p+"static/image/1f1c88ad03f24994d4e8edff6e832ad2.d96620aa.webp",J=s.p+"static/image/5c7609d24a3cbddea7fc09ad5884c368.df445ae3.webp",w=s.p+"static/image/7471048dfdc0dedbd326097b82031989.44c3eeaa.webp",D=s.p+"static/image/f22a69e53f392ca6c124d6878b371cd8.26020d50.webp",u=s.p+"static/image/9ce2ce426fbdbf9e744492e2fb302de2.74470d85.webp",y=s.p+"static/image/944640a9dddcb5b2bdc6f9da3517e0da.d8ac003a.webp",E=s.p+"static/image/804174b26450a2f2f7834aabd1a1b347.21c5a6b9.webp",T=s.p+"static/image/b3f734730ee7999502b9c54d48085bc6.fd56bbb5.webp",_=s.p+"static/image/cf2d8b9e9d5ea541ebead108c9c60781.c25f14cc.webp",v=s.p+"static/image/3c984d8a3de061e068ee6bd8463688c1.0775114c.webp",k=s.p+"static/image/32256b29bbf3d11e6c5300b369fc9fc0.5592ee23.webp",B=s.p+"static/image/be60647cdd3ca295efeae405140c7977.09c2a452.webp",A=s.p+"static/image/e609de671bed5e00f3defb97891f2828.4afe4bc8.webp",C=s.p+"static/image/4f13afafa04dcefb03bd47bf79cb593b.cd2231ea.webp",F=s.p+"static/image/323910105dd6ee43242a6b77be1e991e.f130a14f.webp",N=s.p+"static/image/329996bd79579ca999f52b6a70012dc1.038680bd.webp",P=s.p+"static/image/d8b4994c8864aeaf0c5c1ef5729d3d35.1b186435.webp",R=s.p+"static/image/e7254881e1a14d3c3372bffdaaed3091.d3e13fae.webp",G=s.p+"static/image/e892ae9b0d823bc83d7e43388c9fecd8.82b9ba43.webp",M=s.p+"static/image/3ba1dcec517ff71a64e822eaaba4246a.12ff3205.webp",O=s.p+"static/image/6a8ba2e42aff35997f81757426ff184e.e23dd6d9.webp",V=s.p+"static/image/0acb353fa9144ea8f43dc041542d17f2.84927bda.webp",q=s.p+"static/image/4c8984e68dfdceb02f74b1e7c9a6443c.9d28ccdf.webp",z=s.p+"static/image/a9ed55d46169e6234c4a57506376b35c.c224064f.webp",H=s.p+"static/image/34e6bafed71e960061d888e4020fa077.20a1730d.webp",I=s.p+"static/image/861d6c9f93151a44bb60c328704132e2.dfe1e2a5.webp";function K(e){let c=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",strong:"strong",h2:"h2"},(0,i.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(c.h1,{id:"28加餐jsdoc-真能取代-typescript",children:["28.加餐：JSDoc 真能取代 TypeScript？",(0,n.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#28加餐jsdoc-真能取代-typescript",children:"#"})]}),"\n",(0,n.jsx)(c.p,{children:"这几个月，想必大家都听到过一个新闻："}),"\n",(0,n.jsx)(c.p,{children:"Svelte 弃用 TypeScript，改用 JSDoc 了。"}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:I,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"TypeScript 我们知道，是用来给 JS 加上类型的，可以实现类型提示和编译时的类型检查。"}),"\n",(0,n.jsx)(c.p,{children:"那 JSDoc 能够完成一样的功能么？Svelte 是出于什么原因弃用 TS 的呢？"}),"\n",(0,n.jsx)(c.p,{children:"先不着急回答这个问题。"}),"\n",(0,n.jsx)(c.p,{children:"我们总得先了解下 JSDoc："}),"\n",(0,n.jsx)(c.p,{children:"可能大家认为的 JSDoc 是这个东西："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:H,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"在代码的注释上加上类型的标识，然后通过 jsdoc 命令行工具，就可以直接生成文档。"}),"\n",(0,n.jsx)(c.p,{children:"比如这样的文档："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:z,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"确实，这个是 JSDoc 最初的含义。"}),"\n",(0,n.jsx)(c.p,{children:"但我们说的 JSDoc 并不是这个，而是 TS 基于 JSDoc 语法实现的，在注释里给代码添加类型的语法。"}),"\n",(0,n.jsxs)(c.p,{children:["文档在",(0,n.jsx)(c.a,{href:"https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#type",target:"_blank",rel:"noopener noreferrer",children:"这里"}),"："]}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:q,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"ts 支持在 js 文件的注释里，通过 JSDoc 的语法给它加上类型。"}),"\n",(0,n.jsx)(c.p,{children:"至于有什么意义，那可就太多了。"}),"\n",(0,n.jsx)(c.p,{children:"比如一个 JS 的配置文件，你想在写配置的时候能有提示，就可以用 JSDoc："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:V,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"这里注释里的 @type 就是 JSDoc 声明类型的语法。"}),"\n",(0,n.jsx)(c.p,{children:"在 vite 文档里，你可以看到对 JSDoc 的支持："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:O,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"我们自己试一下："}),"\n",(0,n.jsx)(c.pre,{children:(0,n.jsx)(c.code,{children:"mkdir jsdoc-test\ncd jsdoc-test\nnpm init -y\n"})}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:M,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"创建项目和 package.json。"}),"\n",(0,n.jsx)(c.p,{children:"然后安装 typescript："}),"\n",(0,n.jsx)(c.pre,{children:(0,n.jsx)(c.code,{children:"npm install --save-dev typescript\n"})}),"\n",(0,n.jsx)(c.p,{children:"创建 tsconfig.json 文件："}),"\n",(0,n.jsx)(c.pre,{children:(0,n.jsx)(c.code,{children:"npx tsc --init\n"})}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:G,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"生成的 tscconfig.json 太多注释了，我们删一下："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:R,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"然后创建 src/index.ts"}),"\n",(0,n.jsx)(c.pre,{children:(0,n.jsx)(c.code,{className:"language-javascript",children:"function add(a: number, b: number) {\n    return a + b;\n}\n"})}),"\n",(0,n.jsx)(c.p,{children:"这样在用到这个 add 的时候，就会做类型检查："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:P,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"在 tsconfig.json 里 include 一下："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:N,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"之后执行编译："}),"\n",(0,n.jsx)(c.pre,{children:(0,n.jsx)(c.code,{children:"npx tsc\n"})}),"\n",(0,n.jsx)(c.p,{children:"生成的代码是这样的："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:F,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"这个是 ts 的编译流程，大家都很熟悉。"}),"\n",(0,n.jsx)(c.p,{children:"现在问题来了，我有一个 src/index2.js，怎么实现一样的类型检查呢？"}),"\n",(0,n.jsx)(c.p,{children:"这样写："}),"\n",(0,n.jsx)(c.pre,{children:(0,n.jsx)(c.code,{className:"language-javascript",children:"/**\n * @param {number} a  参数aaa\n * @param {number} b  参数bbb\n */\nfunction add2(a, b) {\n    return a + b;\n}\n"})}),"\n",(0,n.jsx)(c.p,{children:"注释里的就是 JSDoc 的语法。"}),"\n",(0,n.jsx)(c.p,{children:"但现在并没有报类型错误："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:C,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"需要在 tsconfig 里开启："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:A,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"allowJS 是允许编译 JS，checkJS 是在编译 JS 的时候也做类型检查。"}),"\n",(0,n.jsx)(c.p,{children:"开启后你就会发现，js 文件里也会做类型检查了："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:B,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"hover 上去的时候，会提示类型信息："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:k,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"注意，这可不是用 ts 语法声明的类型，而是用 JSDoc 写的。"}),"\n",(0,n.jsx)(c.p,{children:"然后我们开启 dts："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:v,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"再编译："}),"\n",(0,n.jsx)(c.pre,{children:(0,n.jsx)(c.code,{children:"npx tsc\n"})}),"\n",(0,n.jsx)(c.p,{children:"可以看到同样能产出 d.ts 类型声明文件："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:_,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"而这时候产物的 JS 代码和源码差别不大："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:T,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"因为本来 JSDoc 就是在注释里的，类型检查也好、生成 dts 也好，都不用改动源码。"}),"\n",(0,n.jsxs)(c.p,{children:["这就是 JSDoc 最大的好处：",(0,n.jsx)(c.strong,{children:"无侵入的给 JS 加上类型，拥有和 ts 一样的类型检查、类型提示、生成 dts 等功能，但却不需要编译，因为 JS 代码可以直接跑。"})]}),"\n",(0,n.jsx)(c.p,{children:"有同学可能会说，就声明个函数类型就和 ts 一样了？"}),"\n",(0,n.jsx)(c.p,{children:"那肯定不止这么点语法，我们再看几个："}),"\n",(0,n.jsx)(c.p,{children:"比如可以用 @type 给变量声明类型："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:E,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"这里可以是各种类型，比如函数类型："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:y,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"如果类型被多处用到，可以用 @typedef 抽出来，单独命名："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:u,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"你还可以把这个类型放到 dts 文件里，在这里 import 进来用："}),"\n",(0,n.jsx)(c.p,{children:"比如我把它放到 guang.d.ts 里："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:D,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"然后这样引入用："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:w,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"这样就避免了在 @typedef 里写大段类型定义了，不然代码写多了就不好维护了。"}),"\n",(0,n.jsx)(c.p,{children:"这样就可以在 dts 里定义类型，然后在 js 里通过 JSDoc 引入来用。"}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)(c.strong,{children:"dts + JSDoc 是绝佳搭配。"})}),"\n",(0,n.jsx)(c.p,{children:"然后我们继续看 JSDoc 的函数类型定义："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:J,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"这分别是可选参数、参数默认值、返回值类型的语法。"}),"\n",(0,n.jsx)(c.p,{children:"还有同学说，那 ts 的泛型呢？这个 JSDoc 不支持的吧？"}),"\n",(0,n.jsx)(c.p,{children:"当然也是支持的，这样写："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:S,alt:""})}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:o,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"通过 @template 声明类型参数，然后下面就可以用了。"}),"\n",(0,n.jsx)(c.p,{children:"泛型都可以用，那基于泛型的类型编程，也就是类型体操当然也可以玩："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:g,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"一般这种复杂类型还是抽离到 dts 里，然后 @type {import('xxx').xxx} 引入比较好。"}),"\n",(0,n.jsx)(c.p,{children:"再就是 class 了，这个自然也是支持的。"}),"\n",(0,n.jsx)(c.p,{children:"比如声明一个泛型类："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:m,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"这段类型大家能看懂么？"}),"\n",(0,n.jsx)(c.p,{children:"就是声明了一个泛型类，有一个类型参数 T。它通过 @extends 继承了 Set<T> 类型。"}),"\n",(0,n.jsx)(c.p,{children:"它有个 name 属性的类型为 T，并且还声明了构造器和 sleep 方法的类型。"}),"\n",(0,n.jsx)(c.p,{children:"用一下试试："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:f,alt:""})}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:b,alt:""})}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:h,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"name 和 sleep 的类型，继承的 Set 的类型，都没问题。"}),"\n",(0,n.jsx)(c.p,{children:"这就是 JSDoc 定义 class 类型的方式。"}),"\n",(0,n.jsx)(c.p,{children:"综上，用 JSDoc 可以定义变量、函数、class、泛型等，可以从别的 dts 文件引入类型。"}),"\n",(0,n.jsx)(c.p,{children:"基本上 ts 能做的，JSDoc 也都可以。"}),"\n",(0,n.jsx)(c.p,{children:"但是，JSDoc 语法毕竟是在注释里的，多了一大坨东西，而且写起来也不如 ts 语法直观。"}),"\n",(0,n.jsx)(c.p,{children:"所以，一般没必要这样写，除非你是给 JS 加类型。"}),"\n",(0,n.jsx)(c.p,{children:"那 svelte 是出于什么原因选择了 JSDoc 的方式呢？"}),"\n",(0,n.jsx)(c.p,{children:"看下那个 pr 就知道了："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:x,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"直接看官方回复："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:j,alt:""})}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:l,alt:""})}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:t,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"也就是说，用 ts 的语法，需要编译后才能调试，这样需要再 sourcemap 一次才能对应到源码。"}),"\n",(0,n.jsx)(c.p,{children:"但是用 JSDoc 的方式，不用编译就可以直接调试。"}),"\n",(0,n.jsx)(c.p,{children:"估计是遇到了啥 VSCode 调试上的问题。"}),"\n",(0,n.jsx)(c.p,{children:"然后下面还有个 VSCode 调试器的维护者评论说，有任何调试相关的问题可以找我："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:r,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"总之，svelte 选择从 ts 转成 JSDoc + dts 并不是因为 ts 有啥问题，主要是为了调试方便。"}),"\n",(0,n.jsx)(c.p,{children:"那我们再看下它怎么用的吧："}),"\n",(0,n.jsx)(c.p,{children:"可以看到，是 js 文件里用 JSDoc 来声明类型："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:p,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"然后复杂类型在 dts 里定义，然后这里引入："}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:a,alt:""})}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)("img",{src:d,alt:""})}),"\n",(0,n.jsx)(c.p,{children:"就和我们刚才测试的一样。"}),"\n",(0,n.jsxs)(c.h2,{id:"总结",children:["总结",(0,n.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,n.jsx)(c.p,{children:"这几个月经常听到知名开源项目抛弃 ts 拥抱 JSDoc 的新闻，我们一起探究了一下。"}),"\n",(0,n.jsx)(c.p,{children:"JSDoc 是在 js 的注释里通过 @type、@typedef、@template、@param 等来定义类型，然后开启 checkJS 和 allowJS 的配置之后，tsc 就可以对 js 做类型检查。"}),"\n",(0,n.jsx)(c.p,{children:"ts 里可以定义的类型，在 JSDoc 里都可以定义，比如变量、函数、class、泛型，甚至类型编程等。复杂的类型还可以抽离到 dts 里，在 @type 里引入。"}),"\n",(0,n.jsx)(c.p,{children:"也就是说 JSDoc 确实可以替代 ts。"}),"\n",(0,n.jsx)(c.p,{children:"然后我们看了 svelte 选择 JSDoc 的原因，只是为了调试方便。这样不用编译就可以直接跑 js 代码，可以直接定位到源码。而且这样也能利用 ts 的类型提示和检查的能力。"}),"\n",(0,n.jsx)(c.p,{children:"所以很多人就说 svelte 抛弃了 ts。"}),"\n",(0,n.jsx)(c.p,{children:"这叫抛弃么？"}),"\n",(0,n.jsx)(c.p,{children:"并不是，JSDoc 只是另一种使用 ts 的方式而已。"})]})}function L(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:c}=Object.assign({},(0,i.ah)(),e.components);return c?(0,n.jsx)(c,{...e,children:(0,n.jsx)(K,{...e})}):K(e)}let Q=L;L.__RSPRESS_PAGE_META={},L.__RSPRESS_PAGE_META["TypeScript%20%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F28.%E5%8A%A0%E9%A4%90%EF%BC%9AJSDoc%20%E7%9C%9F%E8%83%BD%E5%8F%96%E4%BB%A3%20TypeScript%EF%BC%9F.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"28.加餐：JSDoc 真能取代 TypeScript？",headingTitle:"28.加餐：JSDoc 真能取代 TypeScript？",frontmatter:{}}}}]);