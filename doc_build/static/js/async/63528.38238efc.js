"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["63528"],{750289:function(e,n,s){s.r(n),s.d(n,{default:()=>p});var c=s(552676),d=s(740453);let r=s.p+"static/image/ea09bc023525317db47e07c4fc36d0d5.093a8bea.webp",l=s.p+"static/image/c4589ed2393f37548d422097a472da96.c03633a7.webp",h=s.p+"static/image/bbf1e2b1157421ec320c2aba1e4db335.8d57e498.webp",i=s.p+"static/image/d023e543c3cc0b70dc7650c5dbde49c4.586177cf.webp",t=s.p+"static/image/8b2553b5bdba745c4e494bdc5b8e8952.ed751b14.webp",a=s.p+"static/image/f9ad944adc55156745d9dd7b31305e6b.5cfd604b.webp",o=s.p+"static/image/7ab50208c77a6985f962e83b06409600.4cd3908c.webp";function j(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h3:"h3",code:"code",strong:"strong",img:"img",h5:"h5",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",ul:"ul",li:"li",input:"input"},(0,d.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"16单元测试类库模块编码完毕如何保障运行质量",children:["16.单元测试：类库模块编码完毕，如何保障运行质量？",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#16单元测试类库模块编码完毕如何保障运行质量",children:"#"})]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"技术要点：Jest"}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"前言",children:["前言",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["对于一个标准的",(0,c.jsx)(n.code,{children:"前端工程化"}),"项目，开发与测试两不误。可能有同学会说，不是还有",(0,c.jsx)(n.code,{children:"QA"}),"吗，何必浪费时间搞测试？",(0,c.jsx)(n.code,{children:"QA"}),"是为应用的",(0,c.jsx)(n.code,{children:"测试环境"}),"与",(0,c.jsx)(n.code,{children:"生产环境"}),"而服务，偏向测试应用的界面与功能，结合交互文档与设计文档找出应用的",(0,c.jsx)(n.code,{children:"Bug"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["应用由依赖、类库、模块、构建代码、业务代码等代码块组成，有第三方封装的代码块，也有自己封装的代码块。在",(0,c.jsx)(n.code,{children:"QA"}),"看来，他们可不会区分得这么细，应用出问题就是出问题，管你在哪里报错，通通提单。"]}),"\n",(0,c.jsxs)(n.p,{children:["他们的工作任务更多是找出应用在线上可能出现的交互问题，至于底层代码可能导致的",(0,c.jsx)(n.code,{children:"Bug"}),"，他们可能无法直接测试出来，只有当底层代码的逻辑运行到某种特殊条件才可能触发，例如",(0,c.jsx)(n.code,{children:"边界"}),"、",(0,c.jsx)(n.code,{children:"空值"}),"、",(0,c.jsx)(n.code,{children:"溢出"}),"、",(0,c.jsx)(n.code,{children:"多重条件组合"}),"等情况。"]}),"\n",(0,c.jsxs)(n.p,{children:["这些问题很难通过测试用例模拟出来，因此更多时候是在开发阶段找出这些因为",(0,c.jsx)(n.code,{children:"边界"}),"、",(0,c.jsx)(n.code,{children:"空值"}),"、",(0,c.jsx)(n.code,{children:"溢出"}),"、",(0,c.jsx)(n.code,{children:"多重条件组合"}),"等情况导致的问题，这样才能保障应用在生产环境中稳定运行。"]}),"\n",(0,c.jsxs)(n.p,{children:["针对这些底层代码，一般都是自己封装的类库，有条件能在开发阶段接入测试工具走一遍测试流程，保障代码块的稳定性与准确性，是一件很棒的事情，绝对能让你负责的应用在生产环境中少一份担忧。本章将带领你",(0,c.jsx)(n.strong,{children:"基于Jest为类库编写测试用例"}),"，通过一步一步上手",(0,c.jsx)(n.code,{children:"jest"}),"，为工具库添加",(0,c.jsx)(n.code,{children:"单元测试"}),"与",(0,c.jsx)(n.code,{children:"代码覆盖测试"}),"，保障高质量的代码设计与高质量的代码。"]}),"\n",(0,c.jsxs)(n.h3,{id:"背景单元测试是什么",children:["背景：单元测试是什么",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#背景单元测试是什么",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["测试代码块的可行性通常都使用",(0,c.jsx)(n.code,{children:"单元测试"}),"。",(0,c.jsx)(n.strong,{children:"单元测试"}),"指检查与验证软件中最小可测试单元。对于",(0,c.jsx)(n.code,{children:"单元测试"}),"中单元定义，一般来说要根据实际情况判定其具体含义。"]}),"\n",(0,c.jsxs)(n.p,{children:["例如",(0,c.jsx)(n.code,{children:"JS"}),"中单元指一个函数，",(0,c.jsx)(n.code,{children:"Java"}),"中单元指一个类，",(0,c.jsx)(n.code,{children:"GUI"}),"中单元指一个",(0,c.jsx)(n.code,{children:"窗口"}),"等。简而言之，单元就是人为规定最小的被测功能模块。",(0,c.jsx)(n.code,{children:"单元测试"}),"是软件开发时要进行的最低级别测试活动，独立单元将在与程序其他部分隔离的情况下进行测试。"]}),"\n",(0,c.jsxs)(n.p,{children:["近几年前端技术高速发展，系统功能变得越来越复杂，这对",(0,c.jsx)(n.code,{children:"前端工程化"}),"的能力提出更高要求，听到工程化的第一反应必然是高质量的代码设计与高质量的代码实现。如何确保这些环节的稳定，那",(0,c.jsx)(n.code,{children:"单元测试"}),"就必须得应用起来了。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"单元测试"}),"的四大特性就完美诠释了其重要作用。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:"单元测试特性"})}),"\n",(0,c.jsxs)(n.p,{children:["像一些大型前端项目，例如",(0,c.jsx)(n.code,{children:"react"}),"、",(0,c.jsx)(n.code,{children:"vue"}),"、",(0,c.jsx)(n.code,{children:"babel"}),"、",(0,c.jsx)(n.code,{children:"webpack"}),"等都会接入",(0,c.jsx)(n.code,{children:"单元测试"}),"，可见",(0,c.jsx)(n.code,{children:"单元测试"}),"对于这些明星项目来说是多重要的。因为这些大型前端项目需处理大规模的产品及其频繁迭代的功能，这种可持续化的迭代方式迫使它们必须引入",(0,c.jsx)(n.code,{children:"自动化测试"}),"。进一步看，",(0,c.jsx)(n.code,{children:"单元测试"}),"有助于增强整体质量与减少运维成本。"]}),"\n",(0,c.jsxs)(n.p,{children:["目前主流的",(0,c.jsx)(n.code,{children:"前端单元测试框架"}),"主要有",(0,c.jsx)(n.code,{children:"jest"}),"与",(0,c.jsx)(n.code,{children:"mocha"}),"，但更推荐使用",(0,c.jsx)(n.code,{children:"jest"}),", 因为",(0,c.jsx)(n.code,{children:"jest"}),"与",(0,c.jsx)(n.code,{children:"mocha"}),"从多方面对比都有更明显的优势。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:"单元测试框架对比"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"jest"}),"作为一款优秀的",(0,c.jsx)(n.code,{children:"前端单元测试框架"}),"，有着简单易用、高性能、易配置和多功能的特性，内置监控、断言、快照、模拟、覆盖率等功能，这些功能都能开箱即用，因此是作为类库测试的首选工具。"]}),"\n",(0,c.jsxs)(n.h5,{id:"expect与test",children:["expect与test",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#expect与test",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"单元测试"}),"有两个很重要的概念函数，分别是",(0,c.jsx)(n.code,{children:"expect()"}),"与",(0,c.jsx)(n.code,{children:"test()"}),"。",(0,c.jsx)(n.code,{children:"expect()"}),"表示期望得到的运行结果，简称期望结果；",(0,c.jsx)(n.code,{children:"test()"}),"表示测试结果是否通过预期，简称通过状态。以下从一个简单示例了解这两个函数的工作原理。"]}),"\n",(0,c.jsxs)(n.p,{children:["声明一个简单的功能函数",(0,c.jsx)(n.code,{children:"Sum()"}),"，用于累加入参。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"function Sum(...vals) {\n	return vals.reduce((t, v) => t + v, 0);\n}\n\nSum(1, 2, 3); // 6\n"})}),"\n",(0,c.jsxs)(n.p,{children:["若",(0,c.jsx)(n.code,{children:"Sum()"}),"不小心写错把累加写成累乘，当直接在业务代码中使用该函数就会带来无法预期的",(0,c.jsx)(n.code,{children:"Bug"}),"，需对该函数进行",(0,c.jsx)(n.code,{children:"自动化测试"}),"，确保无问题再打包为",(0,c.jsx)(n.code,{children:"bundle文件"}),"供业务组件调用，这样就保障该函数的准确性。"]}),"\n",(0,c.jsxs)(n.p,{children:["执行以下代码若发现未报错，则表示代码运行结果符合预期。这就是",(0,c.jsx)(n.code,{children:"自动化测试"}),"最原始的雏形，是一个最简单的",(0,c.jsx)(n.code,{children:"单元测试"}),"的测试用例。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const result = Sum(1, 2, 3);\nconst expect = 6;\n\nif (result !== expect) {\n	throw new Error(`期望是${expect}，结果是${result}`);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"把代码改造下变成以下形式，是不是感觉更简洁？"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"expect(Sum(1, 2, 3)).toBe(6); // 是否等于9\nexpect(Sum(1, 2, 3)).toBe(9); // 是否等于10\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"expect()"}),"的实现原理也很简单，入参一个值再返回一个",(0,c.jsx)(n.code,{children:"toBe()"}),"，当然也可返回更多自定义的期望函数。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"function expect(result) {\n	return {\n		toBe(expect) {\n			if (result !== expect) {\n				throw new Error(`期望是${expect}，结果是${result}`);\n			}\n		}\n	};\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["运行上述两行",(0,c.jsx)(n.code,{children:"expect().toBe()"}),"代码，结果第二行代码报错。虽然实现了",(0,c.jsx)(n.code,{children:"expect()"}),"，但报错内容始终一样，不知具体哪个函数出现问题。为了强化",(0,c.jsx)(n.code,{children:"expect()"}),"的功能，需对其做进一步改良，若在",(0,c.jsx)(n.code,{children:"expect()"}),"外部再包装一层函数就可传递更多信息进来。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("期望结果是6", () => {\n	expect(Sum(1, 2, 3)).toBe(6);\n});\ntest("期望结果是9", () => {\n	expect(Sum(1, 2, 3)).toBe(9);\n});\n'})}),"\n",(0,c.jsx)(n.p,{children:"上述封装既能得到运行结果是否符合期望，又能得到详细的自定义测试描述。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"function test(desc, fn) {\n	try {\n		fn && fn();\n		console.log(`${desc} 通过测试`);\n	} catch {\n		console.log(`${desc} 未通过测试`);\n	}\n}\n"})}),"\n",(0,c.jsxs)(n.h5,{id:"自动化测试",children:["自动化测试",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自动化测试",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["从上述分析可知，",(0,c.jsx)(n.code,{children:"自动化测试"}),"其实就是编写一些测试函数，通过测试函数运行业务代码，判断实际结果与期望结果是否相符，是则通过，否则不通过，整个过程都是通过预设脚本",(0,c.jsx)(n.code,{children:"自动化"}),"处理。"]}),"\n",(0,c.jsxs)(n.p,{children:["上述",(0,c.jsx)(n.code,{children:"expect()"}),"与",(0,c.jsx)(n.code,{children:"test()"}),"都是主流的",(0,c.jsx)(n.code,{children:"前端单元测试框架"}),"的内置函数，其语法完全一样，它们在不同",(0,c.jsx)(n.code,{children:"前端单元测试框架"}),"中的实现原理也大同小异。"]}),"\n",(0,c.jsxs)(n.h3,{id:"方案基于jest为类库编写测试用例",children:["方案：基于Jest为类库编写测试用例",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#方案基于jest为类库编写测试用例",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["以第15章开发的工具库为例，通过一步一步上手",(0,c.jsx)(n.code,{children:"jest"}),"，为",(0,c.jsx)(n.code,{children:"bruce-us"}),"的每个工具函数加入",(0,c.jsx)(n.code,{children:"单元测试"}),"的测试用例。"]}),"\n",(0,c.jsxs)(n.h5,{id:"安装",children:["安装",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["因为使用",(0,c.jsx)(n.code,{children:"typescript"}),"编码，所以安装",(0,c.jsx)(n.code,{children:"jest"}),"时也需把",(0,c.jsx)(n.code,{children:"typescript"}),"相关依赖一起安装。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"npm i -D @types/jest jest ts-jest\n"})}),"\n",(0,c.jsxs)(n.p,{children:["在根目录中创建",(0,c.jsx)(n.code,{children:"jest.config.js"}),"文件，用于配置",(0,c.jsx)(n.code,{children:"jest"}),"测试配置。",(0,c.jsx)(n.code,{children:"jest"}),"整体配置简洁明了，可查看",(0,c.jsx)(n.a,{href:"https://jestjs.io/zh-Hans",target:"_blank",rel:"noopener noreferrer",children:"Jest官网"}),"，主要用到的配置选项包括",(0,c.jsx)(n.code,{children:"preset"}),"与",(0,c.jsx)(n.code,{children:"testEnvironment"}),"。",(0,c.jsx)(n.code,{children:"preset"}),"表示预设模板，使用安装好的",(0,c.jsx)(n.code,{children:"ts-jest"}),"模板；",(0,c.jsx)(n.code,{children:"testEnvironment"}),"表示测试环境，可选",(0,c.jsx)(n.code,{children:"web/node"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"ts-jest"}),"为",(0,c.jsx)(n.code,{children:"jest"}),"与",(0,c.jsx)(n.code,{children:"typescript"}),"环境中的",(0,c.jsx)(n.code,{children:"单元测试"}),"提供类型检查支持与预处理。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'module.exports = {\n	preset: "ts-jest",\n	testEnvironment: "node"\n};\n'})}),"\n",(0,c.jsxs)(n.p,{children:["在",(0,c.jsx)(n.code,{children:"package.json"}),"中指定",(0,c.jsx)(n.code,{children:"scripts"}),"，加入测试命令。",(0,c.jsx)(n.code,{children:"--no-cache"}),"表示每次启动测试脚本不使用缓存；",(0,c.jsx)(n.code,{children:"--watchAlls"}),"表示监听所有",(0,c.jsx)(n.code,{children:"单元测试"}),"，若发生更新则重新执行脚本。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'{\n	"scripts": {\n		"test": "jest --no-cache --watchAll"\n	}\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["在",(0,c.jsx)(n.code,{children:"tsconfig.json"}),"中指定",(0,c.jsx)(n.code,{children:"types"}),"，加入",(0,c.jsx)(n.code,{children:"@types/jest"}),"。",(0,c.jsx)(n.code,{children:"@types/jest"}),"提供了",(0,c.jsx)(n.code,{children:"expect()"}),"与",(0,c.jsx)(n.code,{children:"test()"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'{\n	"compilerOptions": {\n		"types": [\n			"@types/jest"\n		]\n	},\n	"exclude": [\n		"jest.config.js"\n	]\n}\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"单元测试",children:["单元测试",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单元测试",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在根目录中创建",(0,c.jsx)(n.code,{children:"test"}),"文件夹。",(0,c.jsx)(n.code,{children:"test"}),"文件夹内部的目录结构可参照",(0,c.jsx)(n.code,{children:"src"}),"文件夹，保持源码与测试脚本的目录结构一样，方便后续迭代与维护。",(0,c.jsx)(n.code,{children:"单元测试"}),"的测试用例使用",(0,c.jsx)(n.code,{children:"xyz.spec.ts"}),"的方式命名。因为文件众多，那些非重要的文件就不展示了。另外",(0,c.jsx)(n.code,{children:"src"}),"文件夹中的",(0,c.jsx)(n.code,{children:"index.ts"}),"、",(0,c.jsx)(n.code,{children:"node.ts"}),"和",(0,c.jsx)(n.code,{children:"web.ts"}),"三种文件是供",(0,c.jsx)(n.code,{children:"rollup"}),"识别入口，因此无需加入对应测试用例文件。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-txt",children:"bruce-us\n├─ src\n│  ├─ common\n│  │  ├─ array.ts\n│  │  ├─ boolean.ts\n│  │  ├─ date.ts\n│  │  ├─ function.ts\n│  │  ├─ number.ts\n│  │  ├─ object.ts\n│  │  ├─ regexp.ts\n│  │  └─ string.ts\n│  ├─ node\n│  │  ├─ fs.ts\n│  │  ├─ os.ts\n│  │  ├─ process.ts\n│  │  └─ type.ts\n│  └─ web\n│     ├─ cookie.ts\n│     ├─ dom.ts\n│     ├─ function.ts\n│     ├─ storage.ts\n│     ├─ type.ts\n│     └─ url.ts\n├─ test\n│  ├─ common\n│  │  ├─ array.spec.ts\n│  │  ├─ boolean.spec.ts\n│  │  ├─ date.spec.ts\n│  │  ├─ function.spec.ts\n│  │  ├─ number.spec.ts\n│  │  ├─ object.spec.ts\n│  │  ├─ regexp.spec.ts\n│  │  └─ string.spec.ts\n│  ├─ node\n│  │  ├─ fs.spec.ts\n│  │  ├─ os.spec.ts\n│  │  ├─ process.spec.ts\n│  │  └─ type.spec.ts\n|  └─ web\n|     ├─ cookie.spec.ts\n|     ├─ dom.spec.ts\n|     ├─ function.spec.ts\n|     ├─ storage.spec.ts\n|     ├─ type.spec.ts\n|     └─ url.spec.ts\n"})}),"\n",(0,c.jsxs)(n.p,{children:["先将上述",(0,c.jsx)(n.code,{children:"Sum()"}),"走一次测试用例。在",(0,c.jsx)(n.code,{children:"test"}),"文件夹中创建",(0,c.jsx)(n.code,{children:"index.spec.ts"}),"文件，加入以下内容。打开",(0,c.jsx)(n.code,{children:"CMD工具"}),"，执行",(0,c.jsx)(n.code,{children:"npm run test"}),"，输出以下信息表示测试通过。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:'function Sum(...vals: number[]): number {\n	return vals.reduce((t, v) => t + v, 0);\n}\n\ntest("期望结果是6", () => {\n	expect(Sum(1, 2, 3)).toBe(6);\n});\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:"单元测试-1"})}),"\n",(0,c.jsxs)(n.p,{children:["加入以下代码，测试脚本会重新执行，输出以下信息表示测试不通过。第二段",(0,c.jsx)(n.code,{children:"expect().toBe()"}),"测试不通过，期待结果是",(0,c.jsx)(n.code,{children:"9"}),"，运行结果是",(0,c.jsx)(n.code,{children:"6"}),"。当修正期待结果就会自动通过测试了。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:'test("期望结果是9", () => {\n	expect(Sum(1, 2, 3)).toBe(9);\n});\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:"单元测试-2"})}),"\n",(0,c.jsxs)(n.p,{children:["通过上述操作说明",(0,c.jsx)(n.code,{children:"jest"}),"已被部署到",(0,c.jsx)(n.code,{children:"bruce-us"}),"中了。因为工具函数众多，因此选取一个工具函数为例，后续有时间可一起完善",(0,c.jsx)(n.code,{children:"bruce-us"}),"的测试用例。"]}),"\n",(0,c.jsxs)(n.h5,{id:"代码覆盖测试",children:["代码覆盖测试",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码覆盖测试",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["上述",(0,c.jsx)(n.code,{children:"单元测试"}),"只不过是验证运行结果是否符合预期，着重于结果。若产生一个运行结果的过程可能存在多个分支，例如以下加强版的",(0,c.jsx)(n.code,{children:"Sum()"}),"，总共有3个分支，",(0,c.jsx)(n.code,{children:"Sum(1, 2, 3)"}),"只满足其中一个分支，验证完毕也只占整个函数的",(0,c.jsx)(n.code,{children:"33.33%"}),"，剩下",(0,c.jsx)(n.code,{children:"66.66%"}),"的代码还未能验证，那就不能百分百认为该",(0,c.jsx)(n.code,{children:"单元测试"}),"成功通过。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"function Sum(...vals: number[]): number {\n	if (vals.length === 0) {\n		return -1;\n	} else if (vals.length === 1) {\n		return 0;\n	} else {\n		return vals.reduce((t, v) => t + v, 0);\n	}\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["若要将整个",(0,c.jsx)(n.code,{children:"Sum()"}),"验证完毕，必须将所有",(0,c.jsx)(n.code,{children:"if-else"}),"语句验证一遍，当全部满足条件才能百分百认为该",(0,c.jsx)(n.code,{children:"单元测试"}),"成功通过。这就引入一个测试概念，",(0,c.jsx)(n.code,{children:"代码覆盖测试"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"代码覆盖测试"}),"指程序源码被测试的比例与程度的所得比例。",(0,c.jsx)(n.code,{children:"代码覆盖测试"}),"生成的指标称为",(0,c.jsx)(n.code,{children:"代码覆盖率"}),"，它作为一个指导性指标，可在一定程度上反应测试的完备程度，是软件质量度量的重要手段。",(0,c.jsx)(n.code,{children:"100%"}),"覆盖率的代码并不意味着",(0,c.jsx)(n.code,{children:"100%"}),"无",(0,c.jsx)(n.code,{children:"Bug"}),"，",(0,c.jsx)(n.code,{children:"代码覆盖率"}),"作为质量目标无任何意义，应把它作为一种发现未被测试覆盖的代码的检查手段。简而言之，",(0,c.jsx)(n.code,{children:"代码覆盖测试"}),"更注重测试过程，而测试结果只是测试过程的一个表现。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"jest"}),"本身内置",(0,c.jsx)(n.code,{children:"代码覆盖测试"}),"，改良上述配置就能运行",(0,c.jsx)(n.code,{children:"代码覆盖测试"}),"了。修改",(0,c.jsx)(n.code,{children:"jest.config.js"}),"的配置，追加",(0,c.jsx)(n.code,{children:"coverage"}),"相关配置。修改",(0,c.jsx)(n.code,{children:"package.json"}),"中",(0,c.jsx)(n.code,{children:"scripts"}),"的",(0,c.jsx)(n.code,{children:"test"}),"，追加",(0,c.jsx)(n.code,{children:"--coverage"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'module.exports = {\n	coverageDirectory: "coverage",\n	coverageProvider: "v8",\n	coverageThreshold: {\n		global: {\n			branches: 100,\n			functions: 100,\n			lines: 100,\n			statements: 100\n		}\n	},\n	preset: "ts-jest",\n	testEnvironment: "node"\n};\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'{\n	"scripts": {\n		"test": "jest --no-cache --watchAll --coverage"\n	}\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["改动",(0,c.jsx)(n.a,{href:"https://github.com/JowayYoung/bruce/blob/main/packages/us/test/index.spec.ts",target:"_blank",rel:"noopener noreferrer",children:"test/index.spec.ts"}),"的代码，因为代码改动较大就不贴出来了。测试脚本会重新执行，输出以下信息表示测试通过，但覆盖率未完全通过。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:"代码覆盖测试"})}),"\n",(0,c.jsxs)(n.p,{children:["这是一个关于测试覆盖率的说明，从中可知四个测试用例都通过，但覆盖率只有",(0,c.jsx)(n.code,{children:"76.19%"}),"，不通过的部分集中在",(0,c.jsx)(n.code,{children:"Branch"}),"。那这些带有",(0,c.jsx)(n.code,{children:"%"}),"的参数表示什么含义？"]}),"\n",(0,c.jsxs)(n.table,{children:["\n",(0,c.jsxs)(n.thead,{children:["\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.th,{align:"center",children:"参数"}),"\n",(0,c.jsx)(n.th,{align:"center",children:"说明"}),"\n",(0,c.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"%Stmts"}),"|语句覆盖率|是否每个语句都执行\n",(0,c.jsx)(n.strong,{children:"%Branch"}),"|分支覆盖率|是否每个条件都执行\n",(0,c.jsx)(n.strong,{children:"%Funcs"}),"|函数覆盖率|是否每个函数都调用\n",(0,c.jsx)(n.strong,{children:"%Lines"}),"|行覆盖率|是否每行代码都执行"]}),"\n",(0,c.jsxs)(n.p,{children:["其中",(0,c.jsx)(n.code,{children:"%Stmts"}),"与",(0,c.jsx)(n.code,{children:"%Lines"}),"可能有些歧义，有缩写代码或压缩代码的情况下，",(0,c.jsx)(n.code,{children:"行覆盖率"}),"的颗粒度可能大于",(0,c.jsx)(n.code,{children:"语句覆盖率"}),"，因为可允许一行代码包括多条语句。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"function Sum(...vals: number[]): number {\n	if (vals.length === 0) { return -1; } else if (vals.length === 1) { return 0; } else { return vals.reduce((t, v) => t + v, 0); }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["除了在控制台输出图表信息，还会生成一个",(0,c.jsx)(n.code,{children:"coverage"}),"文件夹，点击",(0,c.jsx)(n.code,{children:"index.html"}),"就会打开一个详细的测试报告，可根据测试报告的详细信息完善",(0,c.jsx)(n.code,{children:"单元测试"}),"的细节。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:"覆盖测试目录"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:"覆盖测试网页"})}),"\n",(0,c.jsxs)(n.h3,{id:"使用认识常见匹配器",children:["使用：认识常见匹配器",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用认识常见匹配器",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["上述代码都有用到",(0,c.jsx)(n.code,{children:"expect()"}),"、",(0,c.jsx)(n.code,{children:"test()"}),"和",(0,c.jsx)(n.code,{children:"toBe()"}),"三个函数，它们组合起来表示一个测试用例中运行结果匹配期待结果，检验是否符合某种匹配状态。该匹配状态又称",(0,c.jsx)(n.code,{children:"匹配器"}),"，可能是",(0,c.jsx)(n.code,{children:"值相等"}),"、",(0,c.jsx)(n.code,{children:"值全等"}),"、",(0,c.jsx)(n.code,{children:"满足范围值"}),"等。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"toBe()"}),"是一个使用频率很高的匹配器，除了它，",(0,c.jsx)(n.code,{children:"jest"}),"还提供一些很好用的匹配器。"]}),"\n",(0,c.jsxs)(n.h5,{id:"tobe",children:["toBe()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tobe",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象是否全等某值，类似",(0,c.jsx)(n.code,{children:"==="}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("值是否相等3", () => {\n	expect(1 + 2).toBe(3); // 通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tobelessthan",children:["toBeLessThan()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tobelessthan",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象是否小于某值，类似",(0,c.jsx)(n.code,{children:"<"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("值是否小于3", () => {\n	expect(1 + 2).toBeLessThan(3); // 不通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tobegreaterthan",children:["toBeGreaterThan()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tobegreaterthan",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象是否大于某值，类似",(0,c.jsx)(n.code,{children:">"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("值是否大于3", () => {\n	expect(1 + 2).toBeGreaterThan(3); // 不通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tobelessthanorequal",children:["toBeLessThanOrEqual()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tobelessthanorequal",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象是否小于等于某值，类似",(0,c.jsx)(n.code,{children:"<="}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("值是否小于等于3", () => {\n	expect(1 + 2).toBeLessThanOrEqual(3); // 通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tobegreaterthanorequal",children:["toBeGreaterThanOrEqual()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tobegreaterthanorequal",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象是否大于等于某值，类似",(0,c.jsx)(n.code,{children:">="}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("值是否大于等于3", () => {\n	expect(1 + 2).toBeGreaterThanOrEqual(3); // 通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tobecloseto",children:["toBeCloseTo()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tobecloseto",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象是否约等于某值，类似",(0,c.jsx)(n.code,{children:"≈"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("0.1+0.2是否约等于0.3", () => {\n	expect(0.1 + 0.2).toBe(0.3); // 不通过\n	expect(0.1 + 0.2).toBeCloseTo(0.3); // 通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"toequal",children:["toEqual()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#toequal",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["测试两个对象的值是否相等，只对比值，不对比引用地址。该函数用在",(0,c.jsx)(n.code,{children:"引用类型"}),"中更佳，例如",(0,c.jsx)(n.code,{children:"数组"}),"与",(0,c.jsx)(n.code,{children:"对象"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("两数组的内容是否相等", () => {\n	const arr1 = [0, 1, 2];\n	const arr2 = [0, 1, 2];\n	expect(arr1).toEqual(arr2); // 通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tobeundefined",children:["toBeUndefined()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tobeundefined",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象是否为",(0,c.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("值是否为undefined", () => {\n	const val = undefined;\n	expect(val).toBeUndefined(); // 通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tobenull",children:["toBeNull()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tobenull",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象是否为",(0,c.jsx)(n.code,{children:"null"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("值是否为null", () => {\n	const val = null;\n	expect(val).toBeNull(); // 通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tobetruthy",children:["toBeTruthy()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tobetruthy",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象转换为布尔后是否为",(0,c.jsx)(n.code,{children:"true"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("转换值是否为true", () => {\n	expect(undefined).toBeTruthy(); // 不通过\n	expect(null).toBeTruthy(); // 不通过\n	expect("").toBeTruthy(); // 不通过\n	expect(0).toBeTruthy(); // 不通过\n	expect(false).toBeTruthy(); // 不通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tobefalsy",children:["toBeFalsy()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tobefalsy",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象转换为布尔后是否为",(0,c.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("转换值是否为false", () => {\n	expect(undefined).toBeFalsy(); // 通过\n	expect(null).toBeFalsy(); // 通过\n	expect("").toBeFalsy(); // 通过\n	expect(0).toBeFalsy(); // 通过\n	expect(false).toBeFalsy(); // 通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tomatch",children:["toMatch()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tomatch",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象是否包括字符串或匹配正则，类似字符串的",(0,c.jsx)(n.code,{children:"includes()"}),"与",(0,c.jsx)(n.code,{children:"match()"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("值是否被匹配", () => {\n	expect("https://yangzw.vip").toMatch("yangzw"); // 通过\n	expect("https://yangzw.vip").toMatch(/^https/); // 通过\n});\n'})}),"\n",(0,c.jsxs)(n.h5,{id:"tocontain",children:["toContain()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tocontain",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["检查对象是否被数组包括，类似数组的",(0,c.jsx)(n.code,{children:"includes()"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'test("值是否被包括", () => {\n	const list = [0, 1, 2];\n	expect(list).toContain(1); // 通过\n});\n'})}),"\n",(0,c.jsxs)(n.p,{children:["基本上掌握上述函数就能应付很多需求，当然想了解更多期望函数，可查看",(0,c.jsx)(n.a,{href:"https://jestjs.io/zh-Hans/docs/expect",target:"_blank",rel:"noopener noreferrer",children:"Jest预期函数"}),"。"]}),"\n",(0,c.jsxs)(n.h3,{id:"结语",children:["结语",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结语",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"单元测试"}),"在",(0,c.jsx)(n.code,{children:"前端工程化"}),"中完善起来较吃力，毕竟编写测试用例需花很多时间，即使是大厂前端团队也会衡量该成本是否在预算范围内。对于一些",(0,c.jsx)(n.code,{children:"大型项目"}),"或",(0,c.jsx)(n.code,{children:"开源项目"}),"，",(0,c.jsx)(n.code,{children:"单元测试"}),"还是很有必要接入的；对于一些小型项目或",(0,c.jsx)(n.code,{children:"KPI项目"}),"，就需考虑考虑了。"]}),"\n",(0,c.jsxs)(n.p,{children:["像组件库与工具库这些业务性较强的类库，还是建议花费一些时间对接上",(0,c.jsx)(n.code,{children:"单元测试"}),"，毕竟开发它们是基于",(0,c.jsx)(n.code,{children:"模块化"}),"与",(0,c.jsx)(n.code,{children:"组件化"}),"，最终目的是应用到不同项目中，那对代码设计与代码实现肯定相比业务代码会更高，那",(0,c.jsx)(n.code,{children:"单元测试"}),"就是改善代码质量与要求的最佳方案。"]}),"\n",(0,c.jsx)(n.p,{children:"本章内容到此为止，希望能对你有所启发，欢迎你把自己的学习心得打到评论区！"}),"\n",(0,c.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,c.jsxs)(n.li,{className:"task-list-item",children:[(0,c.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","示例项目：",(0,c.jsx)(n.a,{href:"https://github.com/JowayYoung/fe-engineering",target:"_blank",rel:"noopener noreferrer",children:"fe-engineering"})]}),"\n",(0,c.jsxs)(n.li,{className:"task-list-item",children:[(0,c.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ","正式项目：",(0,c.jsx)(n.a,{href:"https://github.com/JowayYoung/bruce",target:"_blank",rel:"noopener noreferrer",children:"bruce"})]}),"\n"]})]})}function x(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(j,{...e})}):j(e)}let p=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E5%88%B0%201%20%E8%90%BD%E5%9C%B0%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%2F16.%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%9A%E7%B1%BB%E5%BA%93%E6%A8%A1%E5%9D%97%E7%BC%96%E7%A0%81%E5%AE%8C%E6%AF%95%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E8%BF%90%E8%A1%8C%E8%B4%A8%E9%87%8F%EF%BC%9F.md"]={toc:[{text:"前言",id:"前言",depth:3},{text:"背景：单元测试是什么",id:"背景单元测试是什么",depth:3},{text:"方案：基于Jest为类库编写测试用例",id:"方案基于jest为类库编写测试用例",depth:3},{text:"使用：认识常见匹配器",id:"使用认识常见匹配器",depth:3},{text:"结语",id:"结语",depth:3}],title:"16.单元测试：类库模块编码完毕，如何保障运行质量？",headingTitle:"16.单元测试：类库模块编码完毕，如何保障运行质量？",frontmatter:{}}}}]);