"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["11420"],{381368:function(e,n,d){e.exports=d.p+"static/image/f9e6608ed85ceb7cb5e7594dbc648826.8cad990e.webp"},715683:function(e,n,d){d.r(n),d.d(n,{default:()=>a});var c=d(552676),r=d(740453);let s=d.p+"static/image/d2c3b2bc4e296e5c2262da5242045a50.9fe16067.webp";var i=d(381368);function h(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",h3:"h3",pre:"pre",ol:"ol",li:"li"},(0,r.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"22结语再回首纵观-vue-3-实现",children:["22.结语：再回首，纵观 Vue 3 实现",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22结语再回首纵观-vue-3-实现",children:"#"})]}),"\n",(0,c.jsxs)(n.h2,{id:"再看-vue-3-设计",children:["再看 Vue 3 设计",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#再看-vue-3-设计",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["前面的章节，我们分别学完了 ",(0,c.jsx)(n.code,{children:"渲染器"}),"、",(0,c.jsx)(n.code,{children:"响应式原理"}),"、",(0,c.jsx)(n.code,{children:"编译器"}),"、",(0,c.jsx)(n.code,{children:"内置组件"}),"、",(0,c.jsx)(n.code,{children:"特殊元素&指令"})," 这五大部分的内容，也大致清楚了各个部分的设计细节和原理，现在，让我们再把这些知识串联，回顾本课程开篇中的那张核心运行机制图："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"相信这个时候我们再看这张图，相对而言理解起来就比较容易了。那么让我们再来宏观的梳理一遍整体的运作流程吧："}),"\n",(0,c.jsxs)(n.h3,{id:"1-渲染器",children:["1. 渲染器",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-渲染器",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["我们通常在使用\xa0",(0,c.jsx)(n.code,{children:"Vue.js"}),"\xa0的时候，最开始的入口使用大多数场景如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n"})}),"\n",(0,c.jsxs)(n.p,{children:["我们通过\xa0",(0,c.jsx)(n.code,{children:"createApp"}),"\xa0的方式创建了一个渲染器对象\xa0",(0,c.jsx)(n.code,{children:"renderer"}),"，所谓渲染器，就是是用来执行渲染任务的，另外也能够进行框架跨平台能力的渲染任务，而这里我们讨论的是渲染器针对于浏览器端渲染成真实\xa0",(0,c.jsx)(n.code,{children:"DOM"}),"\xa0的场景。"]}),"\n",(0,c.jsxs)(n.p,{children:["渲染器在初始化挂载阶段，通过渲染器内部的 ",(0,c.jsx)(n.code,{children:"patch"})," 函数进行初始化挂载任务。将编译器输出的\xa0",(0,c.jsx)(n.code,{children:"render"}),"\xa0函数执行后生成 ",(0,c.jsx)(n.code,{children:"vnode"})," 节点，然后再将 ",(0,c.jsx)(n.code,{children:"vnode"})," 渲染成真实的\xa0",(0,c.jsx)(n.code,{children:"DOM"}),"\xa0挂载到指定容器中。"]}),"\n",(0,c.jsxs)(n.p,{children:["渲染器在更新阶段，则会根据编译器中输出的标记 ",(0,c.jsx)(n.code,{children:"PatchFlags"})," 和 ",(0,c.jsx)(n.code,{children:"dynamicChildren"})," 在 ",(0,c.jsx)(n.code,{children:"patch"})," 时做到靶向更新。"]}),"\n",(0,c.jsxs)(n.h3,{id:"2-编译器",children:["2. 编译器",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-编译器",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["编译器的作用简单概括就是将源代码\xa0",(0,c.jsx)(n.code,{children:"A"}),"\xa0转换成目标代码\xa0",(0,c.jsx)(n.code,{children:"B"}),"。",(0,c.jsx)(n.code,{children:"Vue.js"}),"\xa0的源代码就是我们写的\xa0",(0,c.jsx)(n.code,{children:"template"}),"\xa0函数，编译器的目标代码就是渲染函数："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"编译器的核心流程经历了："}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"parse"}),"：接收字符串模板作为参数，并将解析后得到的\xa0",(0,c.jsx)(n.code,{children:"模版 AST"}),"\xa0作为返回值返回。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"transform"}),"：接受\xa0",(0,c.jsx)(n.code,{children:"模板 AST"}),"\xa0做为参数，语义化转换为\xa0",(0,c.jsx)(n.code,{children:"JavaScript AST"}),"\xa0并返回。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"generate"}),"：接受\xa0",(0,c.jsx)(n.code,{children:"JavaScript AST"}),"\xa0生成渲染函数并返回。"]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"3-响应式",children:["3. 响应式",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-响应式",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["响应式是\xa0",(0,c.jsx)(n.code,{children:"Vue.js"}),"\xa0的核心部分，简而言之，响应式就是为了实现对需要侦测的状态数据进行监听，当状态数据变化时反馈给与状态数据相关的副作用函数重新执行。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Vue 3"}),"\xa0通过\xa0",(0,c.jsx)(n.code,{children:"proxy API"}),"\xa0完成了对响应式状态数据的定义，当在副作用函数中访问响应式数据时，进行副作用函数的收集（这里的副作用函数也可以是渲染函数）。当触发响应式状态数据更新时，再重新执行副作用函数。"]}),"\n",(0,c.jsxs)(n.p,{children:["针对于渲染函数（",(0,c.jsx)(n.code,{children:"render"}),"）这种副作用函数而言，在重新执行的时候，则会比对新老的\xa0",(0,c.jsx)(n.code,{children:"vnode"}),"\xa0节点情况进行选择性更新（",(0,c.jsx)(n.code,{children:"diff"}),"）。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const render = (vnode, container) => {\n  if (vnode == null) {\n    // 销毁组件\n    if (container._vnode) {\n      unmount(container._vnode, null, null, true)\n    }\n  } else {\n    // 创建或者更新组件\n    patch(container._vnode || null, vnode, container)\n  }\n  // 缓存 vnode 节点，表示已经渲染\n  container._vnode = vnode\n}\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"4-性能优化",children:["4. 性能优化",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-性能优化",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["另外值得一提的是，",(0,c.jsx)(n.code,{children:"Vue 3"}),"\xa0不管是在编译时还是在运行时都做了大量的性能优化。例如在编译时，",(0,c.jsx)(n.code,{children:"Vue 3"}),"\xa0通过标记\xa0",(0,c.jsx)(n.code,{children:"/*#__PURE__*/"}),"\xa0来为打包工具提供良好的\xa0",(0,c.jsx)(n.code,{children:"Tree-Shaking"}),"\xa0机制，通过\xa0",(0,c.jsx)(n.code,{children:"静态提升"}),"\xa0机制，避免了大量静态节点的重复渲染执行；在运行时又通过批量队列更新机制优化了更新性能，通过\xa0",(0,c.jsx)(n.code,{children:"PatchFlags"}),"\xa0和\xa0",(0,c.jsx)(n.code,{children:"dynamicChildren"}),"\xa0进行了\xa0",(0,c.jsx)(n.code,{children:"diff"}),"\xa0的靶向更新..."]}),"\n",(0,c.jsxs)(n.p,{children:["通过这些精细的设计，我们可以在不了解\xa0",(0,c.jsx)(n.code,{children:"Vue.js"}),"\xa0运行原理的基础上，写出性能卓越的前端代码，降低了开发者的心智负担。"]}),"\n",(0,c.jsxs)(n.h2,{id:"一些说明",children:["一些说明",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一些说明",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["本课程的内容核心是介绍 ",(0,c.jsx)(n.code,{children:"Vue 3"})," 设计和实现原理，帮助小伙伴们构建起对 ",(0,c.jsx)(n.code,{children:"Vue 3"})," 运行机制的广度和深度认知。课程里面呢有部分内容会和 ",(0,c.jsx)(n.code,{children:"Vue 2.x"})," 进行一些比较，如果小伙伴们不熟悉不了解 ",(0,c.jsx)(n.code,{children:"Vue 2.x"})," 的设计原理，可以选择性屏蔽这块的知识点，只看 ",(0,c.jsx)(n.code,{children:"Vue 3"})," 的相关内容就可以了，毕竟 ",(0,c.jsx)(n.code,{children:"Vue 3"})," 才是面向未来的。但如果你对 ",(0,c.jsx)(n.code,{children:"Vue 2.x"})," 的设计和实现原理非常感兴趣，想再深入了解一下的话，也可以参考阅读作者之前相关体系的开源文章：",(0,c.jsx)(n.a,{href:"https://github.com/muwoo/blogs",target:"_blank",rel:"noopener noreferrer",children:"Vue 2.x 技术揭秘。"})]}),"\n",(0,c.jsxs)(n.h2,{id:"最后",children:["最后",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最后",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"漫无目的的干啃源码的过程是非常枯燥乏味的，非常容易让我们半途而废，但是如果大家一起组队打 “boss”，并且在打怪升级的过程中有大量的沟通和交流，那么这个过程将会变得非常有趣，吸取的知识点也会更加饱满和充实。本课程内的一些章节结尾会有一些问题的引入，这些问题并没有直接给出答案，也希望在学习源码的你可以给到一些自己的见解和小伙伴们充分沟通讨论。"}),"\n",(0,c.jsxs)(n.p,{children:["另外，无论何时我们都应该保持一颗辩证的心态看待问题，任何理论上的观点和技术实现都可能不是最优解，所以我们可以在阅读源码和课程的过程中，多问问自己 ",(0,c.jsx)(n.code,{children:"“为什么要这么实现？还有没有最优的解决方案？”"}),"。如果有新的体验和心得，也可在评论区里面留言，让组队打怪的队友一同思考，增加 “游戏” 的趣味性！"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Vue 3"})," 是非常优秀的开源框架，里面的每行代码都汇集了业界最顶尖大佬的思考，如果我们的没有串联上下文和设计背景，可能有些晦涩难懂的代码读一遍很难理解其中的设计意图，所以非常建议小伙伴在看本课程的同时，自己打开 ",(0,c.jsx)(n.code,{children:"Vue 3"})," 源码，对于晦涩难懂的地方，一边看一边调试。"]}),"\n",(0,c.jsx)(n.p,{children:"最后，给阅读完本小册的你，点个赞吧\uD83D\uDC4D\uD83C\uDFFB！"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["Vue%203%20%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%2F22.%E7%BB%93%E8%AF%AD%EF%BC%9A%E5%86%8D%E5%9B%9E%E9%A6%96%EF%BC%8C%E7%BA%B5%E8%A7%82%20Vue%203%20%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"再看 Vue 3 设计",id:"再看-vue-3-设计",depth:2},{text:"1. 渲染器",id:"1-渲染器",depth:3},{text:"2. 编译器",id:"2-编译器",depth:3},{text:"3. 响应式",id:"3-响应式",depth:3},{text:"4. 性能优化",id:"4-性能优化",depth:3},{text:"一些说明",id:"一些说明",depth:2},{text:"最后",id:"最后",depth:2}],title:"22.结语：再回首，纵观 Vue 3 实现",headingTitle:"22.结语：再回首，纵观 Vue 3 实现",frontmatter:{}}}}]);