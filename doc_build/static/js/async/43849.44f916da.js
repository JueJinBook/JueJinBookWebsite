"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["43849"],{189554:function(e,n,c){c.r(n),c.d(n,{default:()=>Q});var s=c(552676),r=c(740453);let i=c.p+"static/image/ff41c3324e77319363208d1fc5cff548.213647c1.gif",d=c.p+"static/image/fc7fe8ec6bc47386bf577264ec213146.ed02977f.gif",a=c.p+"static/image/02914a84de6c46727563c1d6c182bf3e.c3311589.webp",l=c.p+"static/image/78719ac9dfb42ccba3fea8c5ba0201d6.6660e4d7.webp",o=c.p+"static/image/60026fbc1b160a0dad7bd3bb945b9f45.3608d9d3.webp",t=c.p+"static/image/de7860fe24c2e8062a2a46de13252ba6.05bca514.webp",h=c.p+"static/image/18f48cd1aca453afc71c98386e6e1dd8.b5ed29dc.gif",x=c.p+"static/image/fe75d4adca9af04c87300d4872e8cc62.1494dd05.webp",p=c.p+"static/image/d9e664263e74e4be9acbdecbdd95c1b0.69bfbf66.webp",j=c.p+"static/image/781c8a1969b5a552c68544aa12bdb7ad.a196919c.webp",m=c.p+"static/image/3a19e742ceaca674993fa3f5443140b3.1e563117.webp",g=c.p+"static/image/3d913850aefe97e72c3c3235bbf6bd46.6873cbb6.webp",b=c.p+"static/image/b932dba9f8bbc3726deefcc8b8fee4fc.3c72c619.webp",f=c.p+"static/image/64ebceaae51cda963bbf88eef2d2bd1c.ca67de9c.webp",k=c.p+"static/image/6b8cf5b287d278f79b34c99b84d4ad16.108e6680.webp",u=c.p+"static/image/1dea408743844b9c999c06f0973223e6.644aca98.webp",v=c.p+"static/image/8981de419b3347dfcfe4d25e971582b5.f7d05832.gif",S=c.p+"static/image/7dc42cd8482cbb4b6e35671dec9be706.dd26aeea.webp",C=c.p+"static/image/d875dfb8b214da767e964ff3c996c382.50cfc1f1.gif",B=c.p+"static/image/db69a5981daa264d7d156ac322580720.23567904.webp",w=c.p+"static/image/9fbfcdfc8d40966ae22cb8d908094214.ecad206e.webp",y=c.p+"static/image/2d7941e55321c17b6738648ba954adad.9976b1c8.gif",V=c.p+"static/image/71b592a575a8fe4c1cf12a7984d20c31.a369f464.gif",G=c.p+"static/image/ba6e8d192dd4a13546293daae24eabfa.770ff91f.webp",U=c.p+"static/image/228e999e23ff4b3d888f1a730ce67688.3bb37b4e.webp",z=c.p+"static/image/21dc89bc9ed3e9db7ef387eb150cf7b5.19fa11e1.gif",_=c.p+"static/image/9230ebcc79057806691f5407ba9674d8.7e2a4743.webp",N=c.p+"static/image/e0f1657c4e974923feada0644c64290c.c6e010c0.gif",A=c.p+"static/image/86ffdd905131b8b9414ff59de0af9142.2cab6983.gif",q=c.p+"static/image/11bc0c10717ebb7dd1d03c168d9522d6.67fff3a9.gif",M=c.p+"static/image/37a98d5e4ecce65aebdbfee53f5f6374.6667bcec.webp",L=c.p+"static/image/72213238cc53f48ef2a4c08edfa99ffb.9580a8b1.gif",W=c.p+"static/image/9745ec2d37e31d043f1fc5a8f11c1da8.1d1892d6.gif",P=c.p+"static/image/5c45c4862e2065d85e3b4bba585ffc84.34d299bd.webp",D=c.p+"static/image/9612023b906273d76c9b904b1140d0d8.4f25c1ba.gif",O=c.p+"static/image/e4d5450eafec57791638739fb730c597.9a73a14f.gif",E=c.p+"static/image/ba0e6e9598763eeb1abf3af126a8da74.add4dc71.webp",R=c.p+"static/image/464efd07951c13102bb0d9b48696d1b7.e67bb299.webp",K=c.p+"static/image/4bd2d1c487a732d24367bdc5f8836d85.81b9ecc9.webp",H=c.p+"static/image/4a801d39042d82b8a1dfe4f1d0201eeb.68657b94.webp",T=c.p+"static/image/bb5def3f30dc86c71563aaf1c7ededbe.f64bf1ae.webp";function I(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",img:"img",ul:"ul",li:"li",strong:"strong",pre:"pre",blockquote:"blockquote",h3:"h3"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"22-中级篇svg-遮罩",children:["22-中级篇：SVG 遮罩",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-中级篇svg-遮罩",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在现代 Web 开发中，遮罩（Masking）技术是实现各种视觉效果的重要工具之一。",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7362748816769941540",target:"_blank",rel:"noopener noreferrer",children:"与剪切技术相似"}),"，在 Web 开发中，我们可以使用 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668885224456252#heading-9",target:"_blank",rel:"noopener noreferrer",children:"CSS 遮罩"}),"和 SVG 遮罩来实现各种有创意的视觉效果和动画效果。CSS 遮罩通过 ",(0,s.jsx)(n.code,{children:"mask"})," 属性实现，可以使用 PNG 图片、CSS 渐变或 SVG 元素来定义遮罩效果，而 SVG 遮罩则使用 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素，提供了更大的灵活性和自定义能力。"]}),"\n",(0,s.jsxs)(n.p,{children:["首先，我们将简要回顾 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668885224456252#heading-9",target:"_blank",rel:"noopener noreferrer",children:"CSS 遮罩的相关特性"}),"，然后深入探讨 SVG 遮罩。SVG 遮罩提供了更多的控制和自定义选项，可以实现更复杂的遮罩效果。我们将学习如何创建 SVG 遮罩元素，并结合 SVG 图形和滤镜效果，实现各种独特的遮罩效果。"]}),"\n",(0,s.jsx)(n.p,{children:"通过本节课的学习，你将掌握两种遮罩技术的基本原理和实际应用方法，能够灵活运用它们来实现各种炫酷的视觉效果。无论你是新手还是经验丰富的开发者，本节课都将为你提供有价值的知识和实用技能，帮助你在 Web 开发中更加游刃有余。"}),"\n",(0,s.jsxs)(n.h2,{id:"web-上的遮罩",children:["Web 上的遮罩",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#web-上的遮罩",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 Web 上，遮罩技术通常使用剪切（Clipping）或遮罩（Masking）来实现。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["剪切（Clipping）：剪切是一种通过在图像或元素上放置闭合的矢量形状（如圆形或多边形）来隐藏或显示图像或元素的部分区域的技术。这个开头被称为剪切路径。任何位于形状后面的图像部分将可见，而超出边界的部分将被隐藏。我们可以使用 ",(0,s.jsx)(n.code,{children:"clip-path"})," 属性来创建和控制，对于剪切路径（形状）还可以使用 SVG 的 ",(0,s.jsx)(n.code,{children:"<clipPath>"})," 元素来创建。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["遮罩（Masking）：遮罩技术允许你使用 PNG 图像、CSS 渐变或 SVG 元素来隐藏图像或元素的特定部分，而显示其他部分。在 CSS 中，你可以使用 ",(0,s.jsx)(n.code,{children:"mask"})," 属性来定义遮罩效果。你可以通过一个遮罩图像或一个 SVG 元素来创建遮罩效果，从而实现在元素上的特定区域的透明度或可见性效果。此外，SVG 中的 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素也是一种常见的遮罩技术，它允许你以更灵活的方式定义遮罩效果，例如使用 SVG 图形和滤镜效果来创建复杂的遮罩效果。这种技术可以为 Web 设计师和开发者提供更大的创作自由度和灵活性。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"简单地说，剪切（Clipping）主要用于路径，而遮罩（Masking）用于图像或渐变。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"剪切需要一个剪切路径，剪切路径可以是一个闭合矢量路径、形状或多边形；剪切路径是一个区域，该区域内部的所有内容都可以显示出来，外部的所有内容将被剪切掉，在页面上不可见；"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"遮罩需要一个高亮或 Alpha 遮罩层，将源和遮罩层合在一起会创建一个缓冲区域，在合层阶段之前，亮度和 Alpha 遮罩会影响这个缓冲区的透明度，从而实现完全或部分遮罩源的部分"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这两种技术之间存在着微妙的区别。将剪切路径视为“硬遮罩”，其中被删除的剪切对象是一个没有任何透明或不透明像素显示的形状。而遮罩则由每个像素的不同透明度和不透明度组成，以一种非常细微的方式来显示或隐藏部分内容。课程后面，我们将会讨论这两种技术应该如何选择？"}),"\n",(0,s.jsxs)(n.h2,{id:"遮罩是什么",children:["遮罩是什么？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#遮罩是什么",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"简单来说，遮罩就是在不删除元素的情况下隐藏其部分内容。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:H,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"如上图所示，我们有一张图像以及一个遮罩（白色图形）。在诸如 Figma 这样的图形设计软件中，我们可以将图像插入白色的形状中，这将导致产生一个被遮罩的图片。即白色图形底部区域的照片会显示，而图形之外的区域则被隐藏起来。"}),"\n",(0,s.jsx)(n.p,{children:"遮罩的原理是通过隐藏图片的某些部分，而不是擦除它（它们仍然存在，但被隐藏了）。这就是遮罩的核心概念，即使用形状来显示和隐藏元素的部分内容。"}),"\n",(0,s.jsxs)(n.p,{children:["根据遮罩层的不同，遮罩分为",(0,s.jsx)(n.strong,{children:"高亮"}),"和 ",(0,s.jsx)(n.strong,{children:"Alpha"})," 两种模式："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:K,alt:""})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"高亮模式使用图像的亮度值作为遮罩值，上图中白色遮罩层对应区域将会显示出来，透明区域将会被隐藏。根据遮罩层图形的亮度来确定遮罩层的透明度"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Alpha 模式带有 Alpha 通道的图像（遮罩图层），Alpha 通道包含在每个像素数据中的透明信息。上图中黑色遮罩层对应区域将会显示出来，透明区域内容将会被隐藏。根据遮罩层图形的透明度信息来确定遮罩层的透明度"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"为了能更好展示遮罩层透明信息对遮罩效果的影响，我们以一个带有渐变的遮罩图形为例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<img src="https://picsum.photos/id/19/800/800" alt="" class="masking--svg">\n<img src="https://picsum.photos/id/19/800/800" alt="" class="masking--css">\n\n<svg class="sr-only">\n  <defs>\n    <mask maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox" id="mask">\n      <linearGradient id="grad" gradientUnits="objectBoundingBox" x2="1" y2="0">\n        <stop stop-color="black" offset="0" />\n        <stop stop-color="white" offset=".25" />\n        <stop stop-color="white" offset=".75" />\n        <stop stop-color="black" offset="1" />\n      </linearGradient>\n      <rect width="100%" height="100%" fill="url(#grad)" />\n    </mask>\n  </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".masking--svg {\n    mask: url(#mask);\n}\n\n.masking--css {\n    mask: linear-gradient(to right, transparent, white 25%, white 75%,transparent 100%);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/wvZLBvb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvZLBvb"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正如你所看到的，在渐变中，有填充和透明像素。填充像素是元素部分可见的地方，而透明像素则是隐藏部分的地方。"}),"\n",(0,s.jsx)(n.p,{children:"再来看来个示例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="wrapper">\n    <h3>clip-path</h3>\n    <img src="https://picsum.photos/id/199/800/800" alt="">\n</div>\n<div class="wrapper">\n    <h3>mask: luminance</h3>\n    <img src="https://picsum.photos/id/199/800/800" alt="">\n</div>\n<div class="wrapper">\n    <h3>mask: Alpha</h3>\n    <img src="https://picsum.photos/id/199/800/800" alt="">\n</div>\n<div class="wrapper">\n    <h3>mask: Gradient</h3>\n    <img src="https://picsum.photos/id/199/800/800" alt="">\n</div>\n\n<svg class="sr-only">\n    <defs>\n        <path d="M0.976,0.205 C0.96,0.165,0.938,0.129,0.91,0.098 C0.882,0.067,0.849,0.043,0.813,0.026 C0.775,0.009,0.735,0,0.694,0 C0.637,0,0.581,0.017,0.533,0.05 C0.521,0.058,0.51,0.067,0.5,0.076 C0.49,0.067,0.479,0.058,0.467,0.05 C0.419,0.017,0.363,0,0.306,0 C0.265,0,0.225,0.009,0.187,0.026 C0.151,0.043,0.118,0.067,0.09,0.098 C0.062,0.129,0.04,0.165,0.024,0.205 C0.008,0.247,0,0.291,0,0.337 C0,0.38,0.008,0.424,0.023,0.47 C0.037,0.508,0.055,0.548,0.079,0.588 C0.117,0.651,0.169,0.717,0.234,0.784 C0.342,0.894,0.448,0.971,0.453,0.974 L0.48,0.994 C0.492,1,0.508,1,0.52,0.994 L0.547,0.974 C0.552,0.971,0.658,0.894,0.766,0.784 C0.831,0.717,0.883,0.651,0.921,0.588 C0.945,0.548,0.964,0.508,0.977,0.47 C0.992,0.424,1,0.38,1,0.337 C1,0.291,0.992,0.247,0.976,0.205" id="heart" />\n        \n        <linearGradient id="linearGradient" x1="0" y1="0" x2="0%" y2="100%">\n            <stop offset="0%" stop-color="white" />\n            <stop offset="100%" stop-color="black" />\n        </linearGradient>\n        \n        <clipPath id="clip" clipPathUnits="objectBoundingBox">\n            <use href="#heart" />\n        </clipPath>\n        \n        <mask maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox" id="mask1" mask-type="luminance">\n            <use href="#heart" fill="#fff" />\n        </mask>\n        <mask maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox" id="mask2" mask-type="alpha">\n            <use href="#heart" fill="#000" />\n        </mask>\n        <mask maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox" id="mask3">\n            <use href="#heart" fill="url(#linearGradient)" />\n        </mask>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/abxgbRp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abxgbRp"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正如上图所示："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"遮罩（Masking）：可以使用透明度来表达。它可以使用遮罩图像的亮度作为透明度的亮度蒙版，也可以使用只包含透明度信息的 Alpha 遮罩。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"剪切（Clipping）：无法使用透明度来表达"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"也就是说，在需要使用透明度表达的情况下，通常会选择遮罩，而在需要清晰轮廓的情况下，则会选择剪切。"}),"\n",(0,s.jsx)(n.p,{children:"前面提到过，在 Web 开发中，我们既可以使用 CSS 遮罩（或剪切），也可以使用 SVG 遮罩（或剪切）。它们很多时候能帮助我们创建出相似的效果。理论上它们有很多特性也是相似的，只不过 SVG 的遮罩要更灵活，更强大一些，它允许你创建出更强大的遮罩效果。"}),"\n",(0,s.jsx)(n.p,{children:"为了能让大家更好的理解 SVG 遮罩，我们先从熟悉的 CSS 遮罩开始！"}),"\n",(0,s.jsxs)(n.h2,{id:"css-遮罩",children:["CSS 遮罩",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-遮罩",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 CSS 中，有几种方式可以对元素进行遮罩："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["CSS 的 ",(0,s.jsx)(n.code,{children:"clip-path"})," 属性，也可以结合 SVG 的 ",(0,s.jsx)(n.code,{children:"<clipPath>"})," 定义的剪切路径一起使用"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["CSS 的 ",(0,s.jsx)(n.code,{children:"mask"})," 属性，也可以结合 SVG 的 ",(0,s.jsx)(n.code,{children:"<mask>"})," 定义的遮罩一起使用"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["对于文本遮罩，还可以使用 CSS 的 ",(0,s.jsx)(n.code,{children:"background-clip:text"})," 。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["特别声明，",(0,s.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7362748816769941540",target:"_blank",rel:"noopener noreferrer",children:["我们在上一节课一起探讨了 clip-path 和 ",(0,s.jsx)(n.code,{children:"<clipPath>"})," 如何对元素进行遮罩（裁剪）"]}),"。另外，我曾在《",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668885224456252",target:"_blank",rel:"noopener noreferrer",children:"CSS 的 Clipping 和 Masking"}),"》课程中详细阐述了 CSS 的 ",(0,s.jsx)(n.code,{children:"clip-path"})," 和 ",(0,s.jsx)(n.code,{children:"mask"})," 是如何对元素进行遮罩！"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们先重温一下 CSS 的 ",(0,s.jsx)(n.code,{children:"mask"})," 属性，然后再进入 SVG 的 ",(0,s.jsx)(n.code,{children:"<mask>"})," 。"]}),"\n",(0,s.jsxs)(n.p,{children:["CSS 的 ",(0,s.jsx)(n.code,{children:"mask"})," 属性是一系列独立属性的简写，它的大部功能的工作原理与 CSS 的 ",(0,s.jsx)(n.code,{children:"background"})," 属性非常相似："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mask-image"})," ：设置遮罩层的图像。可以是 PNG 图片、SVG 文件、CSS 渐变或得对 SVG ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素的引用。类似于 CSS 的 ",(0,s.jsx)(n.code,{children:"background-image"})," 属性的工作原理"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mask-mode"})," ：设置遮罩层图像的模式，可以是 ",(0,s.jsx)(n.code,{children:"alpha"})," （使用图像的 Alpha 通道作为遮罩值）或 ",(0,s.jsx)(n.code,{children:"luminance"})," （使用图像的亮度值作为遮罩值）"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mask-repeat"})," ：设置遮罩层图像的重复方式，可以是 ",(0,s.jsx)(n.code,{children:"no-repeat"})," 、",(0,s.jsx)(n.code,{children:"repeat"})," 、",(0,s.jsx)(n.code,{children:"space"})," 或 ",(0,s.jsx)(n.code,{children:"round"})," 等。类似于 CSS 的 ",(0,s.jsx)(n.code,{children:"background-repeat"})," 属性的工作原理"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mask-position"})," ：设置遮罩层图像的位置。类似于 CSS 的 ",(0,s.jsx)(n.code,{children:"background-position"})," 属性的工作原理"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mask-size"})," ：设置遮罩层图像的大小。类似于 CSS 的 ",(0,s.jsx)(n.code,{children:"background-size"})," 属性的工作原理"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mask-origin"})," ：设置遮罩层图像相对于元素框的位置，它的值可以是 ",(0,s.jsx)(n.code,{children:"border-box"})," 、",(0,s.jsx)(n.code,{children:"padding-box"})," 或 ",(0,s.jsx)(n.code,{children:"content-box"})," 。类似于 CSS 的 ",(0,s.jsx)(n.code,{children:"background-origin"})," 属性的工作原理"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mask-clip"})," ：设置遮罩层图像的裁剪区域，即确定了遮罩层图像的可见区域。类似于 CSS 的 ",(0,s.jsx)(n.code,{children:"background-clip"})," 属性的工作原理"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mask-composite"})," ：用于合成多个遮罩层的效果。它定义了不同遮罩层之间的组合方式。常见的值有 ",(0,s.jsx)(n.code,{children:"add"})," 、",(0,s.jsx)(n.code,{children:"subtract"})," 、",(0,s.jsx)(n.code,{children:"intersect"})," 和 ",(0,s.jsx)(n.code,{children:"exclude"})," 等"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mask"})," 也可以像 ",(0,s.jsx)(n.code,{children:"background"})," 一样，同时使用多个遮罩层。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'.mask {\n    mask: url("mask1.png"), url("mask2.svg"), linear-gradient(45deg, #000, rgb(0 0 0 / 0));\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://codepen.io/t_afif/full/MWBjraa",target:"_blank",rel:"noopener noreferrer",children:"以 @Temani Afif 在 Codepen 提供的用户头像效果为例"}),"，来看看 CSS ",(0,s.jsx)(n.code,{children:"mask"})," 是如何工作的："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:O,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/t_afif/full/MWBjraa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/t_afif/full/MWBjraa"})," （来源于 @Temani Afif）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这个效果非常类似于著名的 Porky Pig 动画中，他在一系列红色圆环中挥手告别时的效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/Kilian/full/yLJBymR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/Kilian/full/yLJBymR"})," （来源于 @Kilian Valkhof）"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["当用户将鼠标悬停在用户头像上时，会出现一种效果，仿佛用户头像穿过一个圆形或洞口。用户头像会放大，同时其背景会缩小，最令人瞩目的是，用户头像仿佛从圆圈中弹出来一样。这种悬停效果既酷炫又实用，而且可以通过 CSS 的 ",(0,s.jsx)(n.code,{children:"mask"})," 属性轻松实现。"]}),"\n",(0,s.jsx)(n.p,{children:"实现该效果，你需要一张像下面这样的带有透明背景的正方形图片（用户头像）。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们来挑战在一个 ",(0,s.jsx)(n.code,{children:"img"})," 元素上实现这个效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<img src="avatar.png" alt="" />\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在开始编写具体的 CSS 代码之前，我们先来剖析一下这个效果。当用户将鼠标悬停在图像上时，它会放大，因此我们需要使用 ",(0,s.jsx)(n.code,{children:"transform: scale()"})," 或 ",(0,s.jsx)(n.code,{children:"scale"})," 来实现这一效果。图像后面有一个圆圈，我们可以利用径向渐变（",(0,s.jsx)(n.code,{children:"radial-gradient()"}),"）来创建。最关键的是，我们需要找到一种方法，让用户的头像部分视觉上穿过同一个圆圈，即头像部分被圆圈遮盖，同时圆圈部分也被头像遮盖。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .avatar {\n        --size: 280px; \n        --border-width: 5px;\n        --border-color: #C02942;\n        --bg-circle: #ECD078;\n        width: var(--size);\n        aspect-ratio: 1;\n        cursor: pointer;\n        transition: 0.5s;\n        background:radial-gradient(\n            circle closest-side,\n            var(--bg-circle) calc(99% - var(--border-width)),\n            var(--border-color) calc(100% - var(--border-width)) 99%,\n            #0000\n        );\n        \n        &:hover {\n            scale: 1.35;\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["注意，代码中的 ",(0,s.jsx)(n.code,{children:"--border-width"})," 变量。虽然它表示“边框”的粗细，但实际上只是用来定义径向渐变中红色的在渐变轴上的停止位置。"]}),"\n",(0,s.jsx)(n.p,{children:"现在，你看到的效果是，用户头像和圆圈会同时随用户鼠标悬停放大和缩小："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:W,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们需要调整这个效果。当鼠标悬停时，我们要调整渐变的大小，以确保圆圈保持不变，而图像增大。但是，由于我们应用了 ",(0,s.jsx)(n.code,{children:"scale"})," 变换，实际上我们需要减小圆圈的大小，以确保它不会随着头像的增大而缩放。因此，当图像增大时，我们需要让渐变缩小。"]}),"\n",(0,s.jsxs)(n.p,{children:["同样的，使用一个 CSS 变量来定义这个缩放因子，例如 ",(0,s.jsx)(n.code,{children:"--f"})," ，并将其用于设置圆圈（径向渐变）的大小。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .avatar {\n        --size: 280px;\n        --border-width: 5px;\n        --border-color: #c02942;\n        --bg-circle: #ecd078;\n        --f: 1;\n        width: var(--size);\n        aspect-ratio: 1;\n        cursor: pointer;\n        transition: 0.5s;\n    \n        background: radial-gradient(\n            circle closest-side,\n            var(--bg-circle) calc(99% - var(--border-width)),\n            var(--border-color) calc(100% - var(--border-width)) 99%,\n            lightblue\n          )\n          50% / calc(100% / var(--f)) 100% no-repeat;\n        scale: var(--f);\n        \n        &:hover {\n          --f: 1.35;\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们使用 ",(0,s.jsx)(n.code,{children:"1"})," 作为 ",(0,s.jsx)(n.code,{children:"--f"})," 的默认值，它是图像和圆圈变换的初始比例。另外在径向渐变中添加了一个 ",(0,s.jsx)(n.code,{children:"lightblue"})," 颜色，以便在悬停时更好地识别渐变区域。最为关键的是，将渐变背景放置在中心位置，即 ",(0,s.jsx)(n.code,{children:"background-position"})," 为 ",(0,s.jsx)(n.code,{children:"center"})," （或 ",(0,s.jsx)(n.code,{children:"50%"}),"），同时使用 ",(0,s.jsx)(n.code,{children:"background-size"})," 调整径向渐变的尺寸，它的宽度等于 ",(0,s.jsx)(n.code,{children:" calc(100%  ``/ var(--f)``)"})," ，高度等于 ",(0,s.jsx)(n.code,{children:"100%"})," 。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".avatar {\n    background: radial-gradient(\n        circle closest-side,\n        var(--bg-circle) calc(99% - var(--border-width)),\n        var(--border-color) calc(100% - var(--border-width)) 99%,\n        lightblue\n     )\n     50% / calc(100% / var(--f)) 100% no-repeat;\n}\n\n/* 等同于 */\n.avatar {\n    background-image: radial-gradient(\n        circle closest-side,\n        var(--bg-circle) calc(99% - var(--border-width)),\n        var(--border-color) calc(100% - var(--border-width)) 99%,\n        lightblue\n     );\n     background-position: 50%; \n     background-size: calc(100% / var(--f)) 100%;\n     background-repeat: no-repeat;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["当 ",(0,s.jsx)(n.code,{children:"--f"})," 等于 ",(0,s.jsx)(n.code,{children:"1"})," 时，没有任何缩放（这是初始缩放）。与此同时，渐变占据了容器的整个宽度。当我们在悬停时调整 ",(0,s.jsx)(n.code,{children:"--f"})," 的缩放比例时，例如 ",(0,s.jsx)(n.code,{children:"--f: 1.35"})," ，元素的大小会增加，而渐变的大小则会减小："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:L,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["正如你所看到的，现在圆圈整个边框都在用户头像的底下。接下来需要将圆圈边框的另一部分放置在用户头像的上面。我们可以通过 CSS 的 ",(0,s.jsx)(n.code,{children:"outline"})," 和 ",(0,s.jsx)(n.code,{children:"outline-offset"})," 来实现它。这意味着，我们要在图像上设置一个 ",(0,s.jsx)(n.code,{children:"outline"})," ，并通过 ",(0,s.jsx)(n.code,{children:"outline-offset"})," 来调整其偏移量来创建底部边框（遮盖在用户图像的边框）。不过，我们需要通过一些计算才能获得这个偏移量："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["默认情况之下，",(0,s.jsx)(n.code,{children:"outline"})," 是在元素框的外部绘制的。就这个示例而言，我们需要将它（",(0,s.jsx)(n.code,{children:"outline"})," 绘制的轮廓）重叠在元素上。更准确地说，我们需要它跟随渐变创建的圆圈。"]}),"\n",(0,s.jsxs)(n.p,{children:["当我们缩放元素时，我们会看到圆圈和边缘之间的空间。不要忘记，想法是在缩放变换后保持圆圈的大小不变，这使得我们可以根据上图中所列公式计算出 ",(0,s.jsx)(n.code,{children:"outline-offset"})," 的值（偏移量）。但不要忘记第二个元素被缩放，所以我们的结果也被缩放。这意味着我们需要将结果除以 ",(0,s.jsx)(n.code,{children:"f"})," 获得实际的偏移值："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"outline-offset = ((f - 1) \xd7 Size \xf7 2) \xf7 f = (1 - 1 \xf7 f) \xd7 Size \xf7 2\n"})}),"\n",(0,s.jsx)(n.p,{children:"注意，我们需要的是一个负偏移值，因此要给上面的公式加上负号："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"outline-offset = -1 \xd7 ((f - 1) \xd7 Size \xf7 2) \xf7 f = -1 \xd7 (1 - 1 \xf7 f) \xd7 Size \xf7 2 = (1 \xf7 f - 1) \xd7 Size \xf7 2\n\n--o = calc((1/var(--f) - 1)*var(--size)/2);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["将计算获得的 ",(0,s.jsx)(n.code,{children:"--o"})," 用于 ",(0,s.jsx)(n.code,{children:"outline-offset"})," ："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .avatar {\n        --size: 280px;\n        --border-width: 5px;\n        --border-color: #c02942;\n        --bg-circle: #ecd078;\n        --f: 1;\n        --o: calc((1 / var(--f) - 1) * var(--size) / 2);\n        \n        width: var(--size);\n        aspect-ratio: 1;\n        cursor: pointer;\n        transition: 0.5s;\n        border-radius: 0 0 999px 999px;\n        outline: var(--border-width) solid var(--border-color);\n        outline-offset:var(--o);\n        background: radial-gradient(\n            circle closest-side,\n            var(--bg-circle) calc(99% - var(--border-width)),\n            var(--border-color) calc(100% - var(--border-width)) 99%,\n            lightblue\n          )\n          50% / calc(100% / var(--f)) 100% no-repeat;\n        scale: var(--f);\n        \n        &:hover {\n            --f: 1.35;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["不能发现，",(0,s.jsx)(n.code,{children:"outline"})," 绘制的轮廓与径向渐变的绘制圆圈边框并不完全重叠。我们可以通过从偏移量中移除边框的大小来实现："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".avatar {\n    --o: calc((1 / var(--f) - 1) * var(--size) / 2);\n    --_o: calc(var(--o) - var(--border-width));\n    outline-offset: var(--_o);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["现在我们需要找到如何从轮廓中移除顶部部分。也就是说，我们需要想办法确保轮廓不会触及头像的顶部。我们可以通过给元素设置一个 ",(0,s.jsx)(n.code,{children:"padding-top"})," 定义这个空间，并且将径向渐变的初始位置设置为 ",(0,s.jsx)(n.code,{children:"content-box"})," ，这样做是只是希望径向渐变仅填充在元素的内容框为止："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".avatar {\n    background: radial-gradient(\n        circle closest-side,\n        var(--bg-circle) calc(99% - var(--border-width)),\n        var(--border-color) calc(100% - var(--border-width)) 99%,\n        lightblue \n      )\n      50% / calc(100% / var(--f)) 100% no-repeat content-box;\n    padding-top: calc(var(--size) / 5);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["注意，这个 ",(0,s.jsx)(n.code,{children:"padding-top"})," 没有特定的逻辑，只是用来确保轮廓不会触及头像的顶部。另外，由于我们添加了 ",(0,s.jsx)(n.code,{children:"padding-top"})," ，因此需要将背景的 ",(0,s.jsx)(n.code,{children:"background-origin"})," 设置为 ",(0,s.jsx)(n.code,{children:"content-box"})," ，以确保背景只在元素内容框中填充。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注意，需要将元素的 ",(0,s.jsx)(n.code,{children:"box-sizing"})," 设置为 ",(0,s.jsx)(n.code,{children:"content-box"})," 。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["现在，我们离最终目标效果只差最后一步！我们需要使用 CSS 的 ",(0,s.jsx)(n.code,{children:"mask"})," 来隐藏一部分内容。注意，这里我们使用 CSS 渐变作为遮罩层的图像。下图展示了我们需要隐藏的部分，或者更准确地说，我们需要展示的部分："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["上图中左侧部分展示了我们当前的状态，右侧的图像则是我们最终想要的结果。绿色部分说明了我们必须对原始图像应用的 ",(0,s.jsx)(n.code,{children:"mask"})," ，即遮罩层图像。我们可以将遮罩图分成两个部分："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"顶部的矩形部分覆盖了轮廓内部的区域。请注意，轮廓位于顶部绿色区域的外部，这是最重要的部分，因为它允许将轮廓裁剪，以便仅可见底部部分"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"底部圆形部分，尺寸和曲率与我们用来创建头像后面的圆圈径向渐变相同"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"它对应的 CSS 代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".avatar {\n    mask: \n        linear-gradient(#000 0 0) no-repeat 50% calc(1px - var(--_o)) / calc(100% / var(--f) - 2 * var(--border-width) - 2px) 50%,\n        radial-gradient(circle closest-side, #000 99%, #0000) var(--_g);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"最终得到我们想要的效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:z,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/eYoqGqQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYoqGqQ"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"最终核心代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .avatar {\n        --size: 280px;\n        --border-width: 5px;\n        --border-color: #c02942;\n        --bg-circle: #ecd078;\n        --f: 1;\n        --o: calc((1 / var(--f) - 1) * var(--size) / 2);\n        --_o: calc((1 / var(--f) - 1) * var(--size) / 2 - var(--border-width));\n        --_g: 50% / calc(100% / var(--f)) 100% no-repeat content-box;\n        \n        display: block;\n        box-sizing: content-box; /* 这个很重要 */\n        width: var(--size);\n        outline: var(--border-width) solid var(--border-color);\n        outline-offset: var(--_o);\n        aspect-ratio: 1;\n        cursor: pointer;\n        transition: 0.5s;\n        border-radius: 0 0 999px 999px;\n        background: radial-gradient(\n            circle closest-side,\n            var(--bg-circle) calc(99% - var(--border-width)),\n            var(--border-color) calc(100% - var(--border-width)) 99%,\n            #0000\n          )\n          var(--_g);\n        scale: var(--f);\n        padding-top: calc(var(--size) / 5);\n        mask: linear-gradient(#000 0 0) no-repeat 50% calc(1px - var(--_o)) /\n            calc(100% / var(--f) - 2 * var(--border-width) - 2px) 50%,\n          radial-gradient(circle closest-side, #000 99%, #0000) var(--_g);\n    \n        &:hover {\n            --f: 1.35;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"再来看一个模拟 Chrome 浏览器标签选项卡的 UI 效果。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"先来看一个比较老的解决方案，即利用 CSS 的伪元素来制作选项卡底部圆角："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<ul id="tab--lists" class="tabs">\n    <li><a href="#">Home</a></li>\n    <li><a href="#">About</a></li>\n    <li class="active"><a href="#">Contact</a></li>\n    <li><a href="#">Dashboard</a></li>\n</ul>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:':root {\n    --circle: 20px;\n    --square: calc(var(--circle) / 2);\n    --bg-color: #000;\n    --bg-tab-color: #ddc385;\n    --bg-tab-color-active: #fff;\n    --tab-text-color: #000;\n    --tab-text-color-active: #000;\n}\n\n.tabs {\n    padding: 1rem 1rem 0;\n    list-style: none;\n    display: flex;\n    justify-content: flex-start;\n    border-bottom: 2px solid;\n\n    li {\n        position: relative;\n\n        &::before,\n        &::after {\n            position: absolute;\n            bottom: 0;\n            background: var(--bg-tab-color);\n            width: var(--square);\n            aspect-ratio: 1;\n        }\n\n        &::before {\n            left: calc(-1 * var(--square));\n        }\n\n        &::after {\n            right: calc(-1 * var(--square));\n        }\n        \n        &:last-child {\n            &::after {\n                content: "";\n            }\n            a::after {\n                content: "";\n            }\n        }\n        \n        &:first-child {\n            &::before {\n                content: "";\n            }\n            a:before {\n                content: "";\n            }\n        }\n\n        &:first-child.active a::before,\n        &:last-child.active a::after {\n            background: var(--bg-color);\n        }\n    }\n\n    a {\n        display: inline-flex;\n        padding: 10px 40px;\n        text-decoration: none;\n        color: var(--tab-text-color);\n        background: var(--bg-tab-color);\n        border-top-left-radius: 15px;\n        border-top-right-radius: 15px;\n\n        &::before,\n        &::after {\n            position: absolute;\n            bottom: 0;\n            width: var(--circle);\n            aspect-ratio: 1;\n            border-radius: 50%;\n            background: var(--bg-color);\n            z-index: 2;\n        }\n\n        &::before {\n            left: calc(-1 * var(--circle));\n        }\n\n        &::after {\n            right: calc(-1 * var(--circle));\n        }\n    }\n\n    .active {\n        z-index: 3;\n      \n        &::before,\n        &::after {\n            content: "";\n            background: var(--bg-tab-color-active);\n            z-index: 1;\n        }\n      \n        a {\n            background: var(--bg-tab-color-active);\n            color: var(--tab-text-color-active);\n            \n            &::before,\n            &::after {\n                content: "";\n                background: var(--bg-tab-color);\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/vYMoVaY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYMoVaY"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["上面这个示例，通过使用多个伪元素来实现。其实，采用 CSS 的 ",(0,s.jsx)(n.code,{children:"mask"})," 将会是一个更好的方案。"]}),"\n",(0,s.jsx)(n.p,{children:"我们想要实现的形状是一个正方形和一个圆形的交集："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["正如上图所示，我们需要两个遮罩图，一个正方形，一个圆形，其中使用 ",(0,s.jsx)(n.code,{children:"linear-gradient()"})," 绘制正方形，",(0,s.jsx)(n.code,{children:"radial-gradient()"})," 绘制圆形，然后应用 ",(0,s.jsx)(n.code,{children:"mask"})," 的多层遮罩特性。最为关键的是，需要使用 ",(0,s.jsx)(n.code,{children:"mask-composite"})," 属性对它们进行合成操作。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n    width: 480px;\n    aspect-ratio: 1;\n    background-image: \n        linear-gradient(to top, rgb(190 90 90 / .5), rgb(190 90 90 / .5)),\n        radial-gradient(circle 300px at center, rgb(90 190 190 / .5) 80%, transparent 81%);\n    background-size: 240px 240px, 100%;\n    background-position: bottom left, center;\n    background-repeat: no-repeat, repeat;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["前面我们提到过，CSS 的 ",(0,s.jsx)(n.code,{children:"mask"})," 的使用与 ",(0,s.jsx)(n.code,{children:"background"})," 是非常相似的。换句话说，我们把上面的 ",(0,s.jsx)(n.code,{children:"background-*"})," 相关属性替换成 ",(0,s.jsx)(n.code,{children:"mask-*"})," 属性就完成了多层遮罩。只不过，在这个示例中，我们需要用到 ",(0,s.jsx)(n.code,{children:"mask-composite"})," 属性，对两个渐变遮罩层进行合成，才能得到我们需要的图形："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".element {\n    width: 480px;\n    aspect-ratio: 1;\n    background-color: var(--active-bg, red);\n    mask-image: linear-gradient(\n        to top,\n        rgb(190 90 90),\n        rgb(190 90 90)\n    ),\n    radial-gradient(\n        circle 300px at center,\n        rgb(90 190 190) 80%,\n        transparent 81%\n    );\n    mask-size: 240px 240px, 100%;\n    mask-position: bottom left, center;\n    mask-repeat: no-repeat, repeat;\n    mask-composite: subtract; /* 这个很关键 */\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"注意，记得将渐变颜色中的透明度去掉，因为它会影响遮罩的效果。以上是一个右侧的形状，在此基础上只需调整遮罩图片位置，就可以得到左侧形状："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'.element {\n    --bg-color-active: #09f;\n    --text-color: #fff;\n    --size: 32px;\n    --square-size: calc(var(--size) / 2);\n    --circle-size: calc(var(--size) / 2 * 1.25);\n    --square-color: red;\n    --circle-color: green;\n    --mask-image: \n        linear-gradient(to top,var(--square-color),var(--square-color)),\n        radial-gradient(circle var(--circle-size) at center,var(--circle-color) 80%,transparent 81%);\n  \n    display: inline-flex;\n    border-radius: 0.5em 0.5em 0 0;\n    font-size: 1.25rem;\n    padding: 1em 1.5em;\n    background-color: var(--bg-color-active);\n    color: var(--text-color);\n    position: relative;\n\n    &::before,\n    &::after {\n        content: "";\n        position: absolute;\n        width: var(--size);\n        aspect-ratio: 1;\n        bottom: 0;\n        background-color: var(--bg-color-active);\n        mask-image: var(--mask-image);\n        mask-size: var(--square-size) var(--square-size), 100%;\n        mask-position: bottom left, center;\n        mask-repeat: no-repeat, repeat;\n        mask-composite: subtract;\n    }\n\n    &::before {\n        right: 100%;\n        mask-position: bottom right, center;\n    }\n  \n    &::after {\n        left: 100%;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"把这个代码应用到前面的示例中，就可以得到一个 Chrome 浏览器选项卡的 UI 效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/mdYbbKy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdYbbKy"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["还记得上一节课，我们",(0,s.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7362748816769941540",target:"_blank",rel:"noopener noreferrer",children:["使用 SVG 的 ",(0,s.jsx)(n.code,{children:"<clipPath>"})," 和 ",(0,s.jsx)(n.code,{children:"clip-path"})," 实现带徽章的用户头像"]}),"吗？"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/JjVVvJe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjVVvJe"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["就这个效果而言，我们可以使用 CSS 的 ",(0,s.jsx)(n.code,{children:"mask"})," 实现相似的效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'@layer demo {\n    @property --s {\n        syntax: "<length>";\n        initial-value: 0px;\n        inherits: true;\n    }\n\n    .avatar {\n        --w: 200px; /* 用户头像尺寸 */\n        --s: 10px; /* 控制指示器尺寸 */\n        --g: 1.5px; /* 控制间隙(+默认间隙) */\n        display: block;\n        object-fit: cover;\n        object-position: center;\n        width: var(--w);\n        aspect-ratio: 1;\n        outline: var(--s) solid oklch(0.81 0.3 138.55);\n        outline-offset: -9e9q;\n        mask: radial-gradient(#000 calc(var(--s) - 1px), #0000 var(--s)),\n              radial-gradient(#000 70%, #0000 71%) content-box subtract,\n              radial-gradient( #000 calc(sqrt(2) * var(--s) + var(--g)), #0000 calc(sqrt(2) * var(--s) + var(--g) + 1px) );\n        /* 仅用于减少鼠标交互区域 */\n        clip-path: circle(calc(var(--w) / 2 + var(--s))) content-box;\n        cursor: pointer;\n        transition: --s 0.5s;\n        box-sizing: content-box;\n        \n        &:hover {\n            --s: 16px;\n        }\n    \n        &:nth-child(1) {\n            padding: 0 calc(var(--w) / sqrt(2)) calc(var(--w) / sqrt(2)) 0;\n            margin: 0 calc(-1 * var(--w) / sqrt(2)) calc(-1 * var(--w) / sqrt(2)) 0;\n        }\n        \n        &:nth-child(2) {\n            padding: 0 0 calc(var(--w)/sqrt(2)) calc(var(--w)/sqrt(2));\n            margin: 0 0 calc(-1*var(--w)/sqrt(2)) calc(-1*var(--w)/sqrt(2));\n        }\n        \n        &:nth-child(3) {\n            padding: calc(var(--w)/sqrt(2)) calc(var(--w)/sqrt(2)) 0 0;\n            margin: calc(-1*var(--w)/sqrt(2)) calc(-1*var(--w)/sqrt(2)) 0 0;\n        }\n        \n        &:nth-child(4) {\n            padding: calc(var(--w)/sqrt(2)) 0 0 calc(var(--w)/sqrt(2));\n            margin: calc(-1*var(--w)/sqrt(2)) 0 0 calc(-1*var(--w)/sqrt(2));\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/OJYLJVp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJYLJVp"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["这里展示的只是 CSS ",(0,s.jsx)(n.code,{children:"mask"})," 的一小部分应用案例，实际上，在前端开发中，",(0,s.jsx)(n.code,{children:"mask"})," 有着广泛的应用场景。除了已经展示的功能外，我们还可以利用 ",(0,s.jsx)(n.code,{children:"mask"})," 实现更多复杂的图形效果、遮罩效果和动画效果。例如，利用 ",(0,s.jsx)(n.code,{children:"mask"})," 可以实现图片的不规则裁剪、创建有趣的按钮效果、制作炫酷的文字动画，甚至可以用于创建复杂的图形背景等。只要有创意，",(0,s.jsx)(n.code,{children:"mask"})," 的潜力是无限的，它可以让你的网页更加生动、丰富多彩。"]}),"\n",(0,s.jsxs)(n.p,{children:["不过，这节课的主题是 SVG 遮罩，因此，有关于 CSS 的遮罩（",(0,s.jsx)(n.code,{children:"mask"}),"）相关的讨论就到此为止。接下来，我们一起进入到 SVG 遮罩的世界。"]}),"\n",(0,s.jsxs)(n.h2,{id:"svg-遮罩",children:["SVG 遮罩",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-遮罩",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 SVG 中，我们可以使用 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素创建遮罩效果。类似于 ",(0,s.jsx)(n.code,{children:"<clipPath>"})," 元素，",(0,s.jsx)(n.code,{children:"<mask>"})," 允许在内部使用各种形状（如 ",(0,s.jsx)(n.code,{children:"<rect>"}),"、",(0,s.jsx)(n.code,{children:"<circle>"}),"、",(0,s.jsx)(n.code,{children:"<polygon>"}),"、",(0,s.jsx)(n.code,{children:"<path>"}),"）和渐变等来绘制遮罩图形。接着，通过 ",(0,s.jsx)(n.code,{children:"mask"})," 属性，将 ",(0,s.jsx)(n.code,{children:"<mask>"})," 中定义的遮罩效果应用于 SVG 或 HTML 元素，从而为它们添加遮罩效果。这为你创造各种复杂的遮罩效果提供了可能性。"]}),"\n",(0,s.jsxs)(n.p,{children:["以下是一个在 ",(0,s.jsx)(n.code,{children:"<mask>"})," 中使用 ",(0,s.jsx)(n.code,{children:"<path>"})," 创建的遮罩图形："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <mask id="fingerprint"  mask-type="luminance" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <path id="test" fill="#fff" d="M0.094,0.508 c0,-0.228,0.182,-0.413,0.406,-0.413 c0.123,0,0.234,0.056,0.308,0.144 c0.017,0.02,0.046,0.022,0.066,0.005 s0.022,-0.047,0.005,-0.067 C0.788,0.069,0.652,0,0.5,0 C0.224,0,0,0.227,0,0.508 v0.079 c0,0.026,0.021,0.048,0.047,0.048 s0.047,-0.021,0.047,-0.048 v-0.079 m0.895,-0.105 c-0.005,-0.026,-0.03,-0.042,-0.055,-0.037 s-0.042,0.031,-0.036,0.056 c0.006,0.028,0.009,0.056,0.009,0.086 v0.079 c0,0.026,0.021,0.048,0.047,0.048 s0.047,-0.021,0.047,-0.048 V0.508 c0,-0.036,-0.004,-0.071,-0.011,-0.105 M0.5,0.159 c-0.037,0,-0.073,0.006,-0.106,0.017 c-0.03,0.01,-0.037,0.047,-0.016,0.071 c0.014,0.016,0.037,0.021,0.057,0.016 c0.021,-0.006,0.043,-0.009,0.065,-0.009 c0.138,0,0.25,0.114,0.25,0.254 v0.049 c0,0.05,-0.003,0.1,-0.009,0.149 c-0.003,0.029,0.018,0.055,0.047,0.055 c0.023,0,0.043,-0.017,0.045,-0.04 c0.006,-0.054,0.01,-0.109,0.01,-0.164 v-0.05 c0,-0.193,-0.154,-0.349,-0.344,-0.349 m-0.206,0.136 c-0.018,-0.021,-0.049,-0.023,-0.066,-0.001 C0.183,0.353,0.156,0.427,0.156,0.508 v0.049 c0,0.048,-0.005,0.096,-0.015,0.143 c-0.007,0.031,0.015,0.062,0.047,0.062 c0.021,0,0.039,-0.014,0.043,-0.034 c0.012,-0.056,0.019,-0.113,0.019,-0.17 V0.508 c0,-0.054,0.017,-0.104,0.045,-0.145 c0.014,-0.021,0.016,-0.049,0,-0.068 M0.5,0.317 c-0.103,0,-0.187,0.085,-0.187,0.19 v0.049 c0,0.071,-0.009,0.142,-0.027,0.211 c-0.007,0.028,0.013,0.058,0.042,0.058 c0.019,0,0.035,-0.012,0.04,-0.031 c0.021,-0.077,0.031,-0.157,0.031,-0.238 V0.508 c0,-0.057,0.045,-0.103,0.102,-0.103 s0.102,0.046,0.102,0.103 v0.049 c0,0.072,-0.007,0.144,-0.02,0.214 c-0.005,0.028,0.015,0.054,0.043,0.054 c0.02,0,0.037,-0.014,0.041,-0.034 c0.015,-0.077,0.023,-0.155,0.023,-0.234 V0.508 c0,-0.105,-0.084,-0.19,-0.187,-0.19 m0.047,0.19 c0,-0.026,-0.021,-0.048,-0.047,-0.048 s-0.047,0.021,-0.047,0.048 v0.049 c0,0.119,-0.021,0.237,-0.063,0.348 l-0.012,0.03 c-0.009,0.025,0.003,0.052,0.027,0.062 s0.051,-0.003,0.061,-0.027 l0.012,-0.03 A1,1,0,0,0,0.547,0.557 V0.508"/>\n        </mask> \n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<path>"})," 路径绘制了一个类似指纹的图形："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 512 512">\n    <path d="M48 256c0-114.9 93.1-208 208-208 63.1 0 119.6 28.1 157.8 72.5 8.6 10.1 23.8 11.2 33.8 2.6s11.2-23.8 2.6-33.8C403.3 34.6 333.7 0 256 0 114.6 0 0 114.6 0 256v40c0 13.3 10.7 24 24 24s24-10.7 24-24v-40zm458.5-52.9c-2.7-13-15.5-21.3-28.4-18.5s-21.3 15.5-18.5 28.4c2.9 13.9 4.5 28.3 4.5 43.1v40c0 13.3 10.7 24 24 24s24-10.7 24-24V256c0-18.1-1.9-35.8-5.5-52.9zM256 80c-19 0-37.4 3-54.5 8.6-15.2 5-18.7 23.7-8.3 35.9 7.1 8.3 18.8 10.8 29.4 7.9 10.6-2.9 21.8-4.4 33.4-4.4 70.7 0 128 57.3 128 128v24.9c0 25.2-1.5 50.3-4.4 75.3-1.7 14.6 9.4 27.8 24.2 27.8 11.8 0 21.9-8.6 23.3-20.3 3.3-27.4 5-55 5-82.7v-25c0-97.2-78.8-176-176-176zm-105.3 68.7c-9.1-10.6-25.3-11.4-33.9-.4C93.7 178 80 215.4 80 256v24.9c0 24.2-2.6 48.4-7.8 71.9-3.4 15.6 7.9 31.2 23.9 31.2 10.5 0 19.9-7 22.2-17.3 6.4-28.1 9.7-56.8 9.7-85.8V256c0-27.2 8.5-52.4 22.9-73.1 7.2-10.4 8-24.6-.2-34.2zM256 160c-53 0-96 43-96 96v24.9c0 35.9-4.6 71.5-13.8 106.1-3.8 14.3 6.7 29 21.5 29 9.5 0 17.9-6.2 20.4-15.4 10.5-39 15.9-79.2 15.9-119.7V256c0-28.7 23.3-52 52-52s52 23.3 52 52v24.9c0 36.3-3.5 72.4-10.4 107.9-2.7 13.9 7.7 27.2 21.8 27.2 10.2 0 19-7 21-17 7.7-38.8 11.6-78.3 11.6-118.1V256c0-53-43-96-96-96zm24 96c0-13.3-10.7-24-24-24s-24 10.7-24 24v24.9c0 59.9-11 119.3-32.5 175.2l-5.9 15.3c-4.8 12.4 1.4 26.3 13.8 31s26.3-1.4 31-13.8l5.9-15.3A536.19 536.19 0 0 0 280 280.9V256z"/>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["注意，需要将 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,s.jsx)(n.code,{children:"d"})," 属性值转换为相对值，然后再将其应用于 ",(0,s.jsx)(n.code,{children:"<mask>"})," 中的 ",(0,s.jsx)(n.code,{children:"<path>"})," 。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们分别将 ",(0,s.jsx)(n.code,{children:"<mask>"})," 定义的遮罩分别应用于 HTML 元素 ",(0,s.jsx)(n.code,{children:"<img>"})," 和 SVG 的 ",(0,s.jsx)(n.code,{children:"<image>"})," 元素上："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<img src="https://picsum.photos/id/19/800/800" alt="" class="mask">\n<svg class="element" viewBox="0 0 800 800" width="800" height="800">\n    <image href="https://picsum.photos/id/19/800/800" mask="url(#fingerprint)"/>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".mask {\n    mask: url(#fingerprint);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["正如你所见，对于 HTML 元素，我们使用 CSS 的 ",(0,s.jsx)(n.code,{children:"mask"})," 属性引用 ",(0,s.jsx)(n.code,{children:"<mask>"})," 定义的遮罩图形；对于 SVG 元素，则是使用相应元素的 ",(0,s.jsx)(n.code,{children:"mask"})," 属性来引用 ",(0,s.jsx)(n.code,{children:"<mask>"})," 定义的遮罩图形。它们的最终效果非常相似："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/QWRLKGP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWRLKGP"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["你可能已经发现了，我们在 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素上设置了 ",(0,s.jsx)(n.code,{children:"id"})," 、",(0,s.jsx)(n.code,{children:"maskUnits"})," 、",(0,s.jsx)(n.code,{children:"maskContentUnits"})," 和 ",(0,s.jsx)(n.code,{children:"mask-type"})," 等属性。 这些属性对于 ",(0,s.jsx)(n.code,{children:"<mask>"})," 来说非常重要。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"id"})," ：定义遮罩的唯一标识符"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maskUnits"})," ：指定遮罩的坐标系统，默认为 ",(0,s.jsx)(n.code,{children:"userSpaceOnUse"})," ，即使用用户坐标系统；另一个选项是 ",(0,s.jsx)(n.code,{children:"objectBoundingBox"})," ，表示使用目标元素的边界框作为坐标系统"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maskContentUnits"})," ：指定遮罩内容的坐标系统，类似于 ",(0,s.jsx)(n.code,{children:"maskUnits"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mask-type"})," ：指定遮罩的类型，确定了遮罩是作为亮度遮罩（",(0,s.jsx)(n.code,{children:"luminance"}),"）还是透明（",(0,s.jsx)(n.code,{children:"alpha"}),"）度遮罩进行处理"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的是，",(0,s.jsx)(n.code,{children:"<mask>"})," 元素内部的内容（嵌套的元素）可以包括各种图形元素、渐变、滤镜等。通常情况下，它会被放置在 ",(0,s.jsx)(n.code,{children:"<defs>"})," 元素中，以便在需要时重复引用。"]}),"\n",(0,s.jsxs)(n.p,{children:["此外，",(0,s.jsx)(n.code,{children:"<mask>"})," 元素定义的遮罩默认不会在 SVG 画布上显示，而是需要通过在目标元素的 ",(0,s.jsx)(n.code,{children:"mask"})," 属性中引用遮罩的 ID，即 ",(0,s.jsx)(n.code,{children:"url(#maskIdName)"}),"，才能将遮罩应用到目标元素上。"]}),"\n",(0,s.jsxs)(n.p,{children:["通过使用 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素，你可以创建各种视觉效果，如镂空文本、图像淡出、图形遮罩等。这使得 SVG 具有了更多的设计和创意可能性，可以用来打造生动丰富的网页内容。在实际操作之前，我们有必要先了解 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素的几个重要属性及其功能。"]}),"\n",(0,s.jsxs)(n.h3,{id:"maskunits-属性",children:["maskUnits 属性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#maskunits-属性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<mask>"})," 元素的 ",(0,s.jsx)(n.code,{children:"maskUnits"})," 属性与 ",(0,s.jsx)(n.code,{children:"<clipPath>"})," 元素的 ",(0,s.jsx)(n.code,{children:"clipPathUnits"})," 属性非常相似。对于 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素， ",(0,s.jsx)(n.code,{children:"maskUnits"})," 属性定义了元素几何属性（",(0,s.jsx)(n.code,{children:"x"})," 、",(0,s.jsx)(n.code,{children:"y"})," 、",(0,s.jsx)(n.code,{children:"width"})," 和 ",(0,s.jsx)(n.code,{children:"height"}),"）所使用的坐标系统，即指定了遮罩的坐标系统。这个属性决定了定义遮罩的坐标空间，即确定了遮罩元素内部的坐标系统。",(0,s.jsx)(n.code,{children:"maskUnits"})," 属性有两个值可选：",(0,s.jsx)(n.code,{children:"objectBoundingBox"})," 和 ",(0,s.jsx)(n.code,{children:"userSpaceOnUse"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"objectBoundingBox"}),"：这是 ",(0,s.jsx)(n.code,{children:"maskUnits"})," 的默认值。当使用 ",(0,s.jsx)(n.code,{children:"objectBoundingBox"})," 时，遮罩元素的大小会相对于所应用的元素的边界框进行缩放。也就是说，坐标（",(0,s.jsx)(n.code,{children:"x"})," 和 ",(0,s.jsx)(n.code,{children:"y"}),"）和尺寸（",(0,s.jsx)(n.code,{children:"width"})," 和 ",(0,s.jsx)(n.code,{children:"height"}),"）是相对于所应用的元素的边界框（bbox）的，边界框可以被视为与 ",(0,s.jsx)(n.code,{children:'viewBox="0 0 1 1"'})," 绑定的 ",(0,s.jsx)(n.code,{children:"<mask>"})," 内容相同。例如，如果一个矩形元素的宽度是 ",(0,s.jsx)(n.code,{children:"100%"}),"，而 ",(0,s.jsx)(n.code,{children:"maskUnits"})," 被设置为 ",(0,s.jsx)(n.code,{children:"objectBoundingBox"}),"，那么遮罩的宽度也将等于这个矩形元素的宽度。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"userSpaceOnUse"}),"：当使用 ",(0,s.jsx)(n.code,{children:"userSpaceOnUse"})," 时，遮罩元素的大小将相对于整个用户坐标系统（用户空间）来确定。这意味着遮罩元素的坐标和尺寸将是相对于 SVG 画布的。使用这个值时，遮罩的大小和位置不会随所应用的元素的大小和位置而变化，而是保持不变。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["需要知道的是，通过诸如 Figma 设计软件获得的遮罩图形，其使用的单位是绝对值。如果 ",(0,s.jsx)(n.code,{children:"maskUnits"})," 被设置为 ",(0,s.jsx)(n.code,{children:"objectBoundingBox"})," ，那么需要使用前面提到的转换工具，将其转换为相对坐标。换句话说，遮罩图形的 ",(0,s.jsx)(n.code,{children:"x"})," 、",(0,s.jsx)(n.code,{children:"y"})," 、",(0,s.jsx)(n.code,{children:"width"})," 和 ",(0,s.jsx)(n.code,{children:"height"})," 的值都在 ",(0,s.jsx)(n.code,{children:"[0,1]"})," 分值范围内。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面这个示例， ",(0,s.jsx)(n.code,{children:"maskUnits"})," 属性的值分别为 ",(0,s.jsx)(n.code,{children:"objectBoundingBox"})," 和 ",(0,s.jsx)(n.code,{children:"userSpaceOnUse"})," ："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n      <mask id="objectBoundingBox"  mask-type="luminance" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n          <path  fill="#fff" d="M0.094,0.508 c0,-0.228,0.182,-0.413,0.406,-0.413 c0.123,0,0.234,0.056,0.308,0.144 c0.017,0.02,0.046,0.022,0.066,0.005 s0.022,-0.047,0.005,-0.067 C0.788,0.069,0.652,0,0.5,0 C0.224,0,0,0.227,0,0.508 v0.079 c0,0.026,0.021,0.048,0.047,0.048 s0.047,-0.021,0.047,-0.048 v-0.079 m0.895,-0.105 c-0.005,-0.026,-0.03,-0.042,-0.055,-0.037 s-0.042,0.031,-0.036,0.056 c0.006,0.028,0.009,0.056,0.009,0.086 v0.079 c0,0.026,0.021,0.048,0.047,0.048 s0.047,-0.021,0.047,-0.048 V0.508 c0,-0.036,-0.004,-0.071,-0.011,-0.105 M0.5,0.159 c-0.037,0,-0.073,0.006,-0.106,0.017 c-0.03,0.01,-0.037,0.047,-0.016,0.071 c0.014,0.016,0.037,0.021,0.057,0.016 c0.021,-0.006,0.043,-0.009,0.065,-0.009 c0.138,0,0.25,0.114,0.25,0.254 v0.049 c0,0.05,-0.003,0.1,-0.009,0.149 c-0.003,0.029,0.018,0.055,0.047,0.055 c0.023,0,0.043,-0.017,0.045,-0.04 c0.006,-0.054,0.01,-0.109,0.01,-0.164 v-0.05 c0,-0.193,-0.154,-0.349,-0.344,-0.349 m-0.206,0.136 c-0.018,-0.021,-0.049,-0.023,-0.066,-0.001 C0.183,0.353,0.156,0.427,0.156,0.508 v0.049 c0,0.048,-0.005,0.096,-0.015,0.143 c-0.007,0.031,0.015,0.062,0.047,0.062 c0.021,0,0.039,-0.014,0.043,-0.034 c0.012,-0.056,0.019,-0.113,0.019,-0.17 V0.508 c0,-0.054,0.017,-0.104,0.045,-0.145 c0.014,-0.021,0.016,-0.049,0,-0.068 M0.5,0.317 c-0.103,0,-0.187,0.085,-0.187,0.19 v0.049 c0,0.071,-0.009,0.142,-0.027,0.211 c-0.007,0.028,0.013,0.058,0.042,0.058 c0.019,0,0.035,-0.012,0.04,-0.031 c0.021,-0.077,0.031,-0.157,0.031,-0.238 V0.508 c0,-0.057,0.045,-0.103,0.102,-0.103 s0.102,0.046,0.102,0.103 v0.049 c0,0.072,-0.007,0.144,-0.02,0.214 c-0.005,0.028,0.015,0.054,0.043,0.054 c0.02,0,0.037,-0.014,0.041,-0.034 c0.015,-0.077,0.023,-0.155,0.023,-0.234 V0.508 c0,-0.105,-0.084,-0.19,-0.187,-0.19 m0.047,0.19 c0,-0.026,-0.021,-0.048,-0.047,-0.048 s-0.047,0.021,-0.047,0.048 v0.049 c0,0.119,-0.021,0.237,-0.063,0.348 l-0.012,0.03 c-0.009,0.025,0.003,0.052,0.027,0.062 s0.051,-0.003,0.061,-0.027 l0.012,-0.03 A1,1,0,0,0,0.547,0.557 V0.508"/>\n      </mask>\n      \n      <mask id="objectBoundingBox" mask-type="luminance" maskUnits="userSpaceOnUse" maskContentUnits="userSpaceOnUse">\n          <path  fill="#fff" d="M48 256c0-114.9 93.1-208 208-208 63.1 0 119.6 28.1 157.8 72.5 8.6 10.1 23.8 11.2 33.8 2.6s11.2-23.8 2.6-33.8C403.3 34.6 333.7 0 256 0 114.6 0 0 114.6 0 256v40c0 13.3 10.7 24 24 24s24-10.7 24-24v-40zm458.5-52.9c-2.7-13-15.5-21.3-28.4-18.5s-21.3 15.5-18.5 28.4c2.9 13.9 4.5 28.3 4.5 43.1v40c0 13.3 10.7 24 24 24s24-10.7 24-24V256c0-18.1-1.9-35.8-5.5-52.9zM256 80c-19 0-37.4 3-54.5 8.6-15.2 5-18.7 23.7-8.3 35.9 7.1 8.3 18.8 10.8 29.4 7.9 10.6-2.9 21.8-4.4 33.4-4.4 70.7 0 128 57.3 128 128v24.9c0 25.2-1.5 50.3-4.4 75.3-1.7 14.6 9.4 27.8 24.2 27.8 11.8 0 21.9-8.6 23.3-20.3 3.3-27.4 5-55 5-82.7v-25c0-97.2-78.8-176-176-176zm-105.3 68.7c-9.1-10.6-25.3-11.4-33.9-.4C93.7 178 80 215.4 80 256v24.9c0 24.2-2.6 48.4-7.8 71.9-3.4 15.6 7.9 31.2 23.9 31.2 10.5 0 19.9-7 22.2-17.3 6.4-28.1 9.7-56.8 9.7-85.8V256c0-27.2 8.5-52.4 22.9-73.1 7.2-10.4 8-24.6-.2-34.2zM256 160c-53 0-96 43-96 96v24.9c0 35.9-4.6 71.5-13.8 106.1-3.8 14.3 6.7 29 21.5 29 9.5 0 17.9-6.2 20.4-15.4 10.5-39 15.9-79.2 15.9-119.7V256c0-28.7 23.3-52 52-52s52 23.3 52 52v24.9c0 36.3-3.5 72.4-10.4 107.9-2.7 13.9 7.7 27.2 21.8 27.2 10.2 0 19-7 21-17 7.7-38.8 11.6-78.3 11.6-118.1V256c0-53-43-96-96-96zm24 96c0-13.3-10.7-24-24-24s-24 10.7-24 24v24.9c0 59.9-11 119.3-32.5 175.2l-5.9 15.3c-4.8 12.4 1.4 26.3 13.8 31s26.3-1.4 31-13.8l5.9-15.3A536.19 536.19 0 0 0 280 280.9V256z"/>\n      </mask>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLPQdz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLPQdz"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在实际应用中，你可以根据具体需求选择适合的 ",(0,s.jsx)(n.code,{children:"maskUnits"})," 值。",(0,s.jsx)(n.code,{children:"objectBoundingBox"})," 可以使得遮罩元素与所应用元素保持一致的缩放比例，而 ",(0,s.jsx)(n.code,{children:"userSpaceOnUse"})," 则可以让你更灵活地控制遮罩元素的大小和位置，独立于所应用元素。"]}),"\n",(0,s.jsxs)(n.h3,{id:"maskcontentunits-属性",children:["maskContentUnits 属性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#maskcontentunits-属性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maskContentUnits"})," 属性用于指定 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素中内容的坐标系统。它决定了 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素内部定义的图形的尺寸单位。与 ",(0,s.jsx)(n.code,{children:"maskUnits"})," 类似，它也接受 ",(0,s.jsx)(n.code,{children:"userSpaceOnUse"})," 或 ",(0,s.jsx)(n.code,{children:"objectBoundingBox"})," 作为值。如果没有传递值，则默认使用 ",(0,s.jsx)(n.code,{children:"userSpaceOnUse"})," 值。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"userSpaceOnUse"})," ：当 ",(0,s.jsx)(n.code,{children:"maskContentUnits"})," 设置为 ",(0,s.jsx)(n.code,{children:"userSpaceOnUse"})," 时，表示 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素内部定义的图形的坐标使用用户坐标系统。这意味着图形的尺寸将以像素或其他用户定义的单位进行测量，不受外部容器的影响。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"objectBoundingBox"})," ：当 ",(0,s.jsx)(n.code,{children:"maskContentUnits"})," 设置为 ",(0,s.jsx)(n.code,{children:"objectBoundingBox"})," 时，表示 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素内部定义的图形的坐标相对于元素的边界框进行定位。这意味着图形的尺寸将相对于元素的宽度和高度的百分比进行定义，范围从 ",(0,s.jsx)(n.code,{children:"0 ~ 1"}),"，其中 ",(0,s.jsx)(n.code,{children:"0"})," 表示边界框的起始位置，",(0,s.jsx)(n.code,{children:"1"})," 表示边界框的结束位置。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"mask-type-属性",children:["mask-type 属性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mask-type-属性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["前面我们提到过，遮罩可以分为",(0,s.jsx)(n.code,{children:"luminance"})," （高亮）遮罩和 ",(0,s.jsx)(n.code,{children:"alpha"})," （带有 Alpha 通道）遮罩。SVG 的 ",(0,s.jsx)(n.code,{children:"mask-type"})," 属性就是用于确定一个 SVG ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素是被视为 ",(0,s.jsx)(n.code,{children:"luminance"})," 遮罩还是 ",(0,s.jsx)(n.code,{children:"alpha"})," 遮罩。这个属性适用于 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素本身。"]}),"\n",(0,s.jsxs)(n.p,{children:["那么，在实际使用的时候，我们应该如何给 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素设置一个适合的 ",(0,s.jsx)(n.code,{children:"mask-type"})," 属性值呢？在回答这个问题之前，我们有必要更深入的了解高亮遮罩和带有 Alpha 通道遮罩的工作原理。"]}),"\n",(0,s.jsxs)(n.p,{children:["假设你使用 SVG 的 ",(0,s.jsx)(n.code,{children:"<path>"})," 绘制了一个类似下图的遮罩图形，分别填充了黑色（",(0,s.jsx)(n.code,{children:"#000"}),"）、白色（",(0,s.jsx)(n.code,{children:"#fff"}),"）和一个线渐渐变色(",(0,s.jsx)(n.code,{children:"linear-gradient(to bottom, #000, transparent, #fff)"}),")："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.code,{children:"<mask>"})," 分别将它们定义为三个不同的遮罩："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <linearGradient id="linearGradient" x2="0" y2="1">\n            <stop offset="0" stop-color="#000" />\n            <stop offset="0.5" stop-color="#0000" />\n            <stop offset="1" stop-color="#fff" />\n        </linearGradient>\n    \n        <mask id="maskBlack" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <use href="#mPath" fill="#000" />\n        </mask>\n        <mask id="maskWhite" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <use href="#mPath" fill="#fff" />\n        </mask>\n        <mask id="maskLinearGradient" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <use href="#mPath" fill="url(#linearGradient)" />\n        </mask>\n        <path id="mPath" d="M0.142,0.135 C0.103,0.161,0.03,0.064,0.03,0.117 c0,0.031,0.052,0.038,0.039,0.065 c-0.012,0.026,-0.046,-0.02,-0.064,0 c-0.026,0.03,0.055,0.039,0.064,0.081 c0.004,0.021,0.008,0.035,0,0.054 c-0.007,0.016,-0.029,0.012,-0.029,0.029 c0.001,0.021,0.029,0.004,0.043,0.017 c0.038,0.037,-0.084,0.061,-0.078,0.119 c0.003,0.026,0.008,0.043,0.025,0.06 c0.04,0.041,0.073,-0.107,0.118,-0.076 c0.013,0.009,0.022,0.015,0.027,0.031 c0.011,0.035,-0.065,0.033,-0.056,0.068 c0.005,0.018,0.014,0.028,0.029,0.036 c0.02,0.011,0.047,-0.032,0.056,-0.008 c0.006,0.015,-0.004,0.026,-0.009,0.042 c-0.028,0.099,-0.2,0.085,-0.165,0.18 c0.01,0.026,0.015,0.053,0.039,0.057 c0.024,0.004,0.026,-0.045,0.051,-0.043 c0.017,0.001,0.031,0.007,0.038,0.025 c0.01,0.027,-0.042,0.031,-0.038,0.06 c0.003,0.024,0.02,0.03,0.038,0.043 c0.062,0.048,0.113,-0.062,0.184,-0.043 c0.025,0.006,0.052,-0.002,0.061,0.026 c0.012,0.037,-0.099,0.012,-0.078,0.043 c0.015,0.021,0.035,0.014,0.058,0.011 c0.027,-0.004,0.036,-0.032,0.064,-0.037 c0.036,-0.007,0.054,0.022,0.091,0.026 c0.122,0.013,0.163,-0.144,0.284,-0.155 c0.069,-0.006,0.2,0.102,0.175,0.025 c-0.011,-0.035,-0.044,-0.034,-0.057,-0.068 c-0.016,-0.041,0.015,-0.074,0,-0.115 c-0.011,-0.03,-0.033,-0.034,-0.045,-0.064 c-0.01,-0.024,0,-0.045,-0.014,-0.065 c-0.026,-0.037,-0.091,0.046,-0.104,0 c-0.008,-0.03,0.022,-0.044,0.023,-0.076 c0.001,-0.035,-0.002,-0.062,-0.023,-0.085 c-0.038,-0.042,-0.125,0.11,-0.127,0.048 c-0.002,-0.041,0.047,-0.043,0.052,-0.084 c0.006,-0.05,-0.063,-0.065,-0.052,-0.113 c0.005,-0.024,0.031,-0.027,0.03,-0.051 c-0.001,-0.023,-0.012,-0.037,-0.03,-0.047 c-0.027,-0.015,-0.041,0.04,-0.07,0.036 c-0.029,-0.004,-0.054,-0.02,-0.061,-0.054 c-0.01,-0.048,0.094,-0.042,0.077,-0.087 C0.581,-0.004,0.549,0.004,0.518,0 C0.429,-0.01,0.39,0.217,0.325,0.145 c-0.009,-0.01,-0.01,-0.02,-0.019,-0.028 c-0.023,-0.019,-0.044,0.005,-0.071,0 c-0.023,-0.004,-0.036,-0.029,-0.058,-0.02 c-0.017,0.007,-0.018,0.028,-0.034,0.039" />\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["将这三个遮罩应用于 ",(0,s.jsx)(n.code,{children:"img"})," 元素上："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<img style="--mask: url(#maskBlack)" src="https://picsum.photos/id/19/800/800" alt="" class="mask" />\n<img style="--mask: url(#maskWhite)" src="https://picsum.photos/id/19/800/800" alt="" class="mask" />\n<img style="--mask: url(#maskLinearGradient)" src="https://picsum.photos/id/19/800/800" alt="" class="mask" />\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".mask {\n    mask: var(--mask);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["你会发现，遮罩图形 ",(0,s.jsx)(n.code,{children:"<path>"})," 的 ",(0,s.jsx)(n.code,{children:"fill"})," 为 ",(0,s.jsx)(n.code,{children:"#000"})," （黑色）时，整个图像都不可见："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/zYQORWW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYQORWW"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["一旦我们将 ",(0,s.jsx)(n.code,{children:"<mask>"})," 的 ",(0,s.jsx)(n.code,{children:"mask-type"})," 设置为 ",(0,s.jsx)(n.code,{children:"alpha"})," 时，整个效果又将不同："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <linearGradient id="linearGradient" x2="0" y2="1">\n            <stop offset="0" stop-color="#000" />\n            <stop offset="0.5" stop-color="#0000" />\n            <stop offset="1" stop-color="#fff" />\n        </linearGradient>\n    \n        <mask id="maskBlack" mask-type="alpha" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <use href="#mPath" fill="#000" />\n        </mask>\n        <mask id="maskWhite" mask-type="alpha" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <use href="#mPath" fill="#fff" />\n        </mask>\n        <mask id="maskLinearGradient" mask-type="alpha" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <use href="#mPath" fill="url(#linearGradient)" />\n        </mask>\n        <path id="mPath" d="M0.142,0.135 C0.103,0.161,0.03,0.064,0.03,0.117 c0,0.031,0.052,0.038,0.039,0.065 c-0.012,0.026,-0.046,-0.02,-0.064,0 c-0.026,0.03,0.055,0.039,0.064,0.081 c0.004,0.021,0.008,0.035,0,0.054 c-0.007,0.016,-0.029,0.012,-0.029,0.029 c0.001,0.021,0.029,0.004,0.043,0.017 c0.038,0.037,-0.084,0.061,-0.078,0.119 c0.003,0.026,0.008,0.043,0.025,0.06 c0.04,0.041,0.073,-0.107,0.118,-0.076 c0.013,0.009,0.022,0.015,0.027,0.031 c0.011,0.035,-0.065,0.033,-0.056,0.068 c0.005,0.018,0.014,0.028,0.029,0.036 c0.02,0.011,0.047,-0.032,0.056,-0.008 c0.006,0.015,-0.004,0.026,-0.009,0.042 c-0.028,0.099,-0.2,0.085,-0.165,0.18 c0.01,0.026,0.015,0.053,0.039,0.057 c0.024,0.004,0.026,-0.045,0.051,-0.043 c0.017,0.001,0.031,0.007,0.038,0.025 c0.01,0.027,-0.042,0.031,-0.038,0.06 c0.003,0.024,0.02,0.03,0.038,0.043 c0.062,0.048,0.113,-0.062,0.184,-0.043 c0.025,0.006,0.052,-0.002,0.061,0.026 c0.012,0.037,-0.099,0.012,-0.078,0.043 c0.015,0.021,0.035,0.014,0.058,0.011 c0.027,-0.004,0.036,-0.032,0.064,-0.037 c0.036,-0.007,0.054,0.022,0.091,0.026 c0.122,0.013,0.163,-0.144,0.284,-0.155 c0.069,-0.006,0.2,0.102,0.175,0.025 c-0.011,-0.035,-0.044,-0.034,-0.057,-0.068 c-0.016,-0.041,0.015,-0.074,0,-0.115 c-0.011,-0.03,-0.033,-0.034,-0.045,-0.064 c-0.01,-0.024,0,-0.045,-0.014,-0.065 c-0.026,-0.037,-0.091,0.046,-0.104,0 c-0.008,-0.03,0.022,-0.044,0.023,-0.076 c0.001,-0.035,-0.002,-0.062,-0.023,-0.085 c-0.038,-0.042,-0.125,0.11,-0.127,0.048 c-0.002,-0.041,0.047,-0.043,0.052,-0.084 c0.006,-0.05,-0.063,-0.065,-0.052,-0.113 c0.005,-0.024,0.031,-0.027,0.03,-0.051 c-0.001,-0.023,-0.012,-0.037,-0.03,-0.047 c-0.027,-0.015,-0.041,0.04,-0.07,0.036 c-0.029,-0.004,-0.054,-0.02,-0.061,-0.054 c-0.01,-0.048,0.094,-0.042,0.077,-0.087 C0.581,-0.004,0.549,0.004,0.518,0 C0.429,-0.01,0.39,0.217,0.325,0.145 c-0.009,-0.01,-0.01,-0.02,-0.019,-0.028 c-0.023,-0.019,-0.044,0.005,-0.071,0 c-0.023,-0.004,-0.036,-0.029,-0.058,-0.02 c-0.017,0.007,-0.018,0.028,-0.034,0.039" />\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdgGWd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdgGWd"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，",(0,s.jsx)(n.code,{children:"mask-type"})," 属性的默认值为 ",(0,s.jsx)(n.code,{children:"luminance"})," 。"]}),"\n",(0,s.jsxs)(n.p,{children:["很奇怪，是吧！当 ",(0,s.jsx)(n.code,{children:"mask-type"})," 属性为 ",(0,s.jsx)(n.code,{children:"luminance"})," 时，填充色越接近亮色（如白色），越可见；反之则越不可见。当 ",(0,s.jsx)(n.code,{children:"mask-type"})," 属性为 ",(0,s.jsx)(n.code,{children:"alpha"})," 时，透明度值越接近 ",(0,s.jsx)(n.code,{children:"1"})," （完全可见）时，越可见；反之则越不可见。简单地说："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"luminance"}),"：表示关联的遮罩图像是亮度遮罩，即在应用遮罩时要使用其相对亮度值"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"alpha"}),"：表示关联的遮罩图像是 Alpha 遮罩，即在应用遮罩时要使用其 alpha 通道值"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"简单地解释一下。"}),"\n",(0,s.jsx)(n.p,{children:"遮罩为高亮遮罩时，应该使用图像的亮度值。它的意思是，当使用高亮遮罩时，给定点的遮罩值首先会从颜色通道值计算亮度，然后将计算的亮度值乘以相应的 Alpha 值来产生遮罩值。其中，亮度值由遮罩的 RGB 值和亮度系数来确定："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"luma =（0.2126 * R + 0.7152 * G + 0.0722 * B）\n"})}),"\n",(0,s.jsxs)(n.p,{children:["为了确定对象的透明度，然后将对象的 Alpha 通道乘以亮度值和遮罩的 Alpha 通道。这意味着，在高亮遮罩中，颜色和 Alpha 值都很重要。当 Alpha 值为 ",(0,s.jsx)(n.code,{children:"0"})," (即完全透明)时，元素会被隐藏；当 Alpha 值为 ",(0,s.jsx)(n.code,{children:"1"})," 时，遮罩值取决于像素的颜色通道，即根据颜色通道值计算出来的亮度值。这也就是，为什么 ",(0,s.jsx)(n.code,{children:"mask-type"})," 为 ",(0,s.jsx)(n.code,{children:"luminance"})," 时，遮罩图形颜色为白色时，元素可见；遮罩图形为黑色时，元素不可见。"]}),"\n",(0,s.jsx)(n.p,{children:"注意，高亮遮罩图形的填充颜色可以是任何颜色，只不过，颜色不同，计算出来的亮度值也将不同，会最终影响遮罩效果。亮度值越高，元素越可见；反之则越不可见！"}),"\n",(0,s.jsxs)(n.p,{children:["Alpha 遮罩与高亮遮罩不同的是，它以遮罩图形的 Alpha 值作为遮罩值。在图形学中，图像由像素组成，每个像素包含颜色值。有些颜色值包含 Alpha 通道，用于设置颜色的透明度。具有 Alpha 通道的图像可以是 Alpha 遮罩，例如上面示例中的渐变遮罩，黑色和白色区域的 Alpha 值为 ",(0,s.jsx)(n.code,{children:"1"}),"，透明区域的 Alpha 值为 ",(0,s.jsx)(n.code,{children:"0"}),"。当 Alpha 值越接近 ",(0,s.jsx)(n.code,{children:"1"})," 时，元素越可见，反之越接近 ",(0,s.jsx)(n.code,{children:"0"})," 时，元素越不可见。"]}),"\n",(0,s.jsxs)(n.p,{children:["另外，在简单的遮罩操作中，我们有一个元素和一个放置在其上方的遮罩图像。遮罩图像中每个像素的 Alpha 值将与元素中对应的像素进行合并。如果 Alpha值为 ",(0,s.jsx)(n.code,{children:"0"}),"（即透明），则它获胜，并且元素的那部分被遮罩（即隐藏）；Alpha值为 ",(0,s.jsx)(n.code,{children:"1"}),"（即完全不透明）时，显示这些像素；Alpha值介于 ",(0,s.jsx)(n.code,{children:"0 ~ 1"})," 之间（例如 ",(0,s.jsx)(n.code,{children:"0.5"}),"）时，像素可见，但具有一定的透明度。"]}),"\n",(0,s.jsxs)(n.p,{children:["总之，给定点的遮罩值是遮罩图像该点处的 Alpha通道值。如果该点完全透明（即 Alpha 值为 ",(0,s.jsx)(n.code,{children:"0"}),"），则不会显示。反之，如果完全不透明（即 Alpha 值为 ",(0,s.jsx)(n.code,{children:"1"}),"），则该点完全显示。"]}),"\n",(0,s.jsxs)(n.p,{children:["有一点尤其重要，当你在 CSS 中显式设置了 ",(0,s.jsx)(n.code,{children:"mask-mode"})," 属性值时，它将会覆盖 SVG 的 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素上 ",(0,s.jsx)(n.code,{children:"mask-type"})," 属性的值。CSS 的 ",(0,s.jsx)(n.code,{children:"mask-mode"})," 与应用于 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素的 ",(0,s.jsx)(n.code,{children:"mask-type"})," 属性所起的作用是相似的，也是用来确定遮罩是作为高亮遮罩还是 Alpha 遮罩。",(0,s.jsx)(n.code,{children:"alpha"})," 值控制了遮罩允许的透明度程度，而 ",(0,s.jsx)(n.code,{children:"luminance"})," 值则控制了发出的光的强度。"]}),"\n",(0,s.jsxs)(n.p,{children:["这意味着，你既可以在 SVG 的 ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素上使用 ",(0,s.jsx)(n.code,{children:"mask-type"})," 属性，也可以在 CSS 中使用 ",(0,s.jsx)(n.code,{children:"mask-mode"})," 属性来确定遮罩是作为高亮遮罩还是 Alpha 遮罩。"]}),"\n",(0,s.jsxs)(n.h2,{id:"svg-遮罩案例",children:["SVG 遮罩案例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-遮罩案例",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在之前的学习中，你已经对 SVG 遮罩的理论知识有了一定的了解。现在，我们将通过实际案例进一步探索 SVG 遮罩的应用。作为一种强大的技术，SVG 遮罩可以实现各种视觉效果和图形处理。在接下来的案例中，我们将深入探讨如何利用 SVG 遮罩来创建镂空效果、图像淡出以及光影效果等。通过这些实际案例，你将更全面地了解 SVG 遮罩的潜力，以及如何在 Web 开发中巧妙运用它，为网站增添更多的视觉吸引力。"}),"\n",(0,s.jsxs)(n.h3,{id:"镂空效果",children:["镂空效果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#镂空效果",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"镂空效果是 Web 中常见的一种效果。"}),"\n",(0,s.jsxs)(n.p,{children:["我们结合 SVG 的 ",(0,s.jsx)(n.code,{children:"<mask>"})," 和 CSS 的 ",(0,s.jsx)(n.code,{children:"mask-*"})," 相关特性，可以实现很多有创意的镂空效果，例如优惠卷 UI，就是其中典型案例之一："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["首先，我们可以使用 SVG 的 ",(0,s.jsx)(n.code,{children:"<mask>"})," 来创建遮罩图形，它比 CSS 的渐变要灵活得多："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1 1">\n    <defs>\n        <mask id="maskDots" mask-type="alpha" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <use href="#dots" />\n        </mask>\n        <mask id="maskRect" mask-type="alpha" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <rect width="1" height="1" fill="rgb(210 210 10 / 1)">\n        </mask>\n        <g id="dots">\n            <g id="top" fill="rgb(210 210 10 / 1)">\n                <circle cx="0" cy="0" r=".05" />\n                <circle cx=".20" cy="0" r=".05" />\n                <circle cx=".40" cy="0" r=".05" />\n                <circle cx=".60" cy="0" r=".05" />\n                <circle cx=".80" cy="0" r=".05" />\n                <circle cx="1" cy="0" r=".05" />\n            </g>\n    \n            <g id="bottom" fill="rgb(210 210 10 / 1)">\n                <circle cx="0" cy="1" r=".05" />\n                <circle cx=".20" cy="1" r=".05" />\n                <circle cx=".40" cy="1" r=".05" />\n                <circle cx=".60" cy="1" r=".05" />\n                <circle cx=".80" cy="1" r=".05" />\n                <circle cx="1" cy="1" r=".05" />\n            </g>\n    \n            <g id="left" fill="rgb(210 210 10 / 1)">\n                <circle cy="0" cx="0" r=".05" />\n                <circle cy=".20" cx="0" r=".05" />\n                <circle cy=".40" cx="0" r=".05" />\n                <circle cy=".60" cx="0" r=".05" />\n                <circle cy=".80" cx="0" r=".05" />\n                <circle cy="1" cx="0" r=".05" />\n            </g>\n    \n            <g id="right" fill="rgb(210 210 10 / 1)">\n                <circle cy="0" cx="1" r=".05" />\n                <circle cy=".20" cx="1" r=".05" />\n                <circle cy=".40" cx="1" r=".05" />\n                <circle cy=".60" cx="1" r=".05" />\n                <circle cy=".80" cx="1" r=".05" />\n                <circle cy="1" cx="1" r=".05" />\n            </g>\n        </g>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中创建了两个遮罩图像，其中一个遮罩图像由很多个 ",(0,s.jsx)(n.code,{children:"<circle>"})," 构成，最终的形状有点类似于我们生活中的邮票边缘的效果，另外一个遮罩层由一个 ",(0,s.jsx)(n.code,{children:"<rect>"})," 构成。然后将它们同时应用于一个 ",(0,s.jsx)(n.code,{children:"<img>"})," 元素上："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".mask {\n    mask: url(#maskDots), url(#maskRect);\n    mask-composite: exclude;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["注意，我们使用了多个遮罩层，并且使用 ",(0,s.jsx)(n.code,{children:"mask-composite"})," 对多个遮罩成进行合成处理。最终呈现给你的效果如下："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/NWVKOvx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWVKOvx"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正如你所看到的，按相似的方法，只需要调整遮罩一中的图形，就可以获得各式各样的优惠券 UI 效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/xxNKyWJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxNKyWJ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["其次，还可以在 SVG ",(0,s.jsx)(n.code,{children:"<mask>"})," 元素内放置 ",(0,s.jsx)(n.code,{children:"<text>"})," ，就可以实现文本镂空的效果。类似于 ",(0,s.jsx)(n.code,{children:"background-clip: text"})," 的效果，但它将比 ",(0,s.jsx)(n.code,{children:"background-clip:text"})," 更强大。比如，可以将一个视频填充到文本中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="container">\n    <video loop muted autoplay>\n        <source src="https://livefiredev.com/wp-content/uploads/2022/09/size_reduced_fire_bg_video.mp4" type="video/mp4">\n    </video>\n  \n    <div class="text">\n        <svg>\n            <defs>\n                <mask id="mask" x="0" y="0" width="100%" height="100%">\n                    <text id="title" x="50%" y="0" dy="2em">SVG + CSS</text>\n                </mask>\n            </defs>\n        </svg>\n    </div>\n</div>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .container {\n        display: grid;\n        width: 50vw;\n        aspect-ratio: 21 / 9;\n        outline: 1px dashed;\n    \n        > * {\n            grid-area: 1 / 1 / -1 / -1;\n        }\n    \n        video {\n            display: block;\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            object-position: bottom;\n            mask: url(#mask);\n            z-index: 2;\n        }\n        \n        svg {\n            display: block;\n            width: 100%;\n            height: inherit;\n        }\n        \n        text {\n            text-anchor: middle;\n            fill: #fff;\n            letter-spacing: -2px;\n            font-size: 10vw;\n            font-weight: 900;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/QWRWwEJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWRWwEJ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"不规则-ui",children:["不规则 UI",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#不规则-ui",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们在 Web 开发过程中，经常会碰到一些不规则 UI 效果，如下图中的红包 UI："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["正如你所看到的，上图中的红包 UI 顶部有一个不规则的形状。就这个 UI 效果而言，可能很多 Web 开发者都会使用图片来替代。事实上，我们只需要一个该图形形状的 ",(0,s.jsx)(n.code,{children:"<mask>"})," 就可以轻易实现。它与图片相比的优势是，除了适配性更灵活之外，在样式更新上也更具优势，例如，当你不需要金黄色的顶盖时，只需要调整渐变颜色即可。"]}),"\n",(0,s.jsxs)(n.p,{children:["实现该效果，首先需要使用 ",(0,s.jsx)(n.code,{children:"<mask>"})," 创建类似下图这样的遮罩图形："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["我们使用 SVG 的 ",(0,s.jsx)(n.code,{children:"<path>"})," 可以轻易实现该形状："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <mask id="mask">\n            <path fill="#fff"  clip-rule="evenodd" fill-rule="evenodd" d="M63.5 68c20.235 0 39.456 2.96 56.785 8.282C133.899 44.928 165.139 23 201.5 23c36.638 0 68.076 22.264 81.523 54h1.411c17.916-5.772 37.939-9 59.066-9 19.736 0 38.508 2.817 55.5 7.893V61c0-11.046-8.954-20-20-20h-91.169C267.011 15.95 235.618 0 200.5 0s-66.511 15.95-87.331 41H24C12.954 41 4 49.954 4 61v16h.434c17.916-5.772 37.939-9 59.066-9Z" />  \n        </mask>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["接下来，在 CSS 中将 ",(0,s.jsx)(n.code,{children:"#mask"})," 遮罩应用于相应的元素上即可："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="card">\n    <div class="card__circle"><span>领</span></div>\n</div>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'@layer demo {\n    .card {\n        width: 395px;\n        min-height: 386px;\n        background: linear-gradient(180deg, #e86969 0%, #c60606 111.4%);\n        border-radius: 20px;\n        position: relative;\n    \n        &::before,\n        &::after {\n            content: "";\n            position: absolute;\n            width: 403px;\n            height: 85px;\n            left: 50%;\n            translate: -50%;\n            mask: url(#mask);\n            mask-size: cover;\n        }\n    \n        &::before {\n            top: -42px;\n            background: linear-gradient(180deg, #fff6d8 0%, #ffcf52 100%);\n            z-index: 2;\n        }\n    \n        &::after {\n            background: rgb(0 0 0 / 0.25);\n            top: -38px;\n            z-index: 1;\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["注意，上面示例中，同时在 ",(0,s.jsx)(n.code,{children:".card"})," 的伪元素 ",(0,s.jsx)(n.code,{children:"::before"})," 和 ",(0,s.jsx)(n.code,{children:"::after"})," 上应用了 ",(0,s.jsx)(n.code,{children:"#mask"})," 遮罩图形。这样做是因为，金黄色不规则 UI 有一个阴影效果，由于应用了 ",(0,s.jsx)(n.code,{children:"mask"})," ，元素上直接应用阴影将被隐藏，因此这里通过 ",(0,s.jsx)(n.code,{children:"::after"})," 伪元素来模拟其阴影效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/yLWBZRo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLWBZRo"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"是不是很简单！"}),"\n",(0,s.jsxs)(n.h3,{id:"渐变图标",children:["渐变图标",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#渐变图标",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在介绍 SVG 渐变的时候，我们一起探索了如何使用 SVG 渐变创建渐变图标的效果。其实，",(0,s.jsx)(n.code,{children:"<mask>"})," 和 CSS 的渐变相互结合，也可以轻易创建出带有渐变效果的图标："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/VwOwKvP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwOwKvP"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"假设你需要创建一个带有渐变效果的图标集，那么可以按照下面的方式来制作。"}),"\n",(0,s.jsxs)(n.p,{children:["首先，使用 SVG 的 ",(0,s.jsx)(n.code,{children:"<symbol>"})," 为图标集中的每个图标创建一个实例，有一点需要的是，为了让图标能较好的适应元素的尺寸，在创建图标集的时候，最好使用相对单位。",(0,s.jsx)(n.a,{href:"https://yoksel.github.io/relative-clip-path/",target:"_blank",rel:"noopener noreferrer",children:"我们可以使用诸如 Convert SVG absolute clip-path to relative 工具将图标路径的绝对坐标转换为相对坐标"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <symbol id="gost">\n            <path d="m0.104,0.912,-0.029,0.018 c-0.008,0.005,-0.018,0.008,-0.029,0.008 C0.021,0.938,0,0.922,0,0.903 V0.375 C0,0.168,0.224,0,0.5,0 s0.5,0.168,0.5,0.375 v0.528 c0,0.019,-0.021,0.035,-0.046,0.035 c-0.01,0,-0.021,-0.003,-0.029,-0.008 l-0.029,-0.018 c-0.035,-0.021,-0.085,-0.018,-0.115,0.008 l-0.079,0.068 c-0.009,0.007,-0.021,0.012,-0.035,0.012 s-0.026,-0.004,-0.035,-0.012 l-0.069,-0.06 c-0.033,-0.029,-0.092,-0.029,-0.126,0 L0.368,0.988 c-0.009,0.007,-0.021,0.012,-0.035,0.012 s-0.026,-0.004,-0.035,-0.012 l-0.079,-0.068 c-0.029,-0.025,-0.08,-0.029,-0.115,-0.008 M0.417,0.375 a0.083,0.063,0,1,0,-0.167,0 a0.083,0.063,0,1,0,0.167,0 m0.25,0.063 a0.083,0.063,0,1,0,0,-0.125 a0.083,0.063,0,1,0,0,0.125" />\n        </symbol>\n        <symbol id="dragon">\n            <path d="m0.55,0.243,-0.081,-0.025 c-0.01,-0.003,-0.018,-0.014,-0.019,-0.027 s0.004,-0.026,0.014,-0.031 l0.064,-0.04,-0.067,-0.063 c-0.009,-0.008,-0.012,-0.022,-0.009,-0.035 S0.464,0,0.475,0 h0.25 c0.047,0,0.092,0.028,0.12,0.075 l0.09,0.15 c0.01,0.016,0.015,0.036,0.015,0.056 c0,0.052,-0.034,0.094,-0.075,0.094 h-0.034 c-0.027,0,-0.052,-0.013,-0.071,-0.037 L0.75,0.313 h-0.05 v0.042 c0,0.048,0.02,0.094,0.053,0.119 l0.167,0.13 c0.05,0.039,0.081,0.108,0.081,0.182 c0,0.118,-0.077,0.214,-0.172,0.214 H0.05 c-0.005,0,-0.01,-0.001,-0.015,-0.003 c-0.014,-0.005,-0.026,-0.019,-0.032,-0.036 C0.002,0.954,0,0.948,0,0.94 c0,-0.007,0,-0.014,0.002,-0.021 c0.004,-0.018,0.015,-0.033,0.029,-0.04 c0.005,-0.002,0.01,-0.004,0.015,-0.004 L0.677,0.805 c0.013,-0.001,0.023,-0.015,0.023,-0.031 c0,-0.008,-0.003,-0.016,-0.007,-0.022 l-0.069,-0.087 c-0.047,-0.059,-0.073,-0.138,-0.073,-0.221 V0.243 m0.25,-0.102 v-0.001,0.001 m-0.002,0.014,-0.072,-0.023 c0,0.003,0,0.005,0,0.008 c0,0.026,0.017,0.047,0.037,0.047 c0.017,0,0.03,-0.013,0.035,-0.032 m-0.593,0.072 c0.025,-0.028,0.063,-0.032,0.091,-0.008 l0.204,0.17 V0.443 c0,0.064,0.013,0.127,0.037,0.182 H0.175 c-0.01,0,-0.02,-0.008,-0.023,-0.02 s-0.001,-0.026,0.007,-0.035 l0.108,-0.116,-0.238,0.046 c-0.011,0.002,-0.022,-0.005,-0.026,-0.018 S0,0.454,0.008,0.445 l0.196,-0.218" />\n        </symbol>\n        <symbol id="crossbones">\n            <path d="M0.817,0.25 C0.817,0.337,0.76,0.413,0.674,0.458 V0.5 C0.674,0.535,0.642,0.563,0.603,0.563 H0.389 C0.349,0.563,0.317,0.535,0.317,0.5 V0.458 C0.231,0.413,0.174,0.337,0.174,0.25 C0.174,0.112,0.318,0,0.496,0 S0.817,0.112,0.817,0.25 M0.371,0.344 A0.071,0.063,0,1,0,0.371,0.219 A0.071,0.063,0,1,0,0.371,0.344 M0.692,0.281 A0.071,0.063,0,1,0,0.549,0.281 A0.071,0.063,0,1,0,0.692,0.281 M0.003,0.535 C0.021,0.504,0.064,0.491,0.099,0.507 L0.496,0.68 L0.892,0.507 C0.928,0.491,0.97,0.504,0.988,0.535 S0.991,0.603,0.956,0.618 L0.655,0.75 L0.956,0.882 C0.992,0.897,1,0.935,0.988,0.965 S0.928,1,0.892,0.993 L0.496,0.82,0.099,0.993 C0.064,1,0.021,0.996,0.003,0.965 S0,0.897,0.035,0.882 L0.336,0.75,0.035,0.618 C0,0.603,-0.014,0.565,0.003,0.535" />\n        </symbol>\n        \x3c!-- 其他 Icon 图标 --\x3e\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["接着在 ",(0,s.jsx)(n.code,{children:"<mask>"})," 中使用 ",(0,s.jsx)(n.code,{children:"<use>"})," 引用 ",(0,s.jsx)(n.code,{children:"<symbol>"})," 创建的图标实例，将每个图标定义为遮罩图形："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <mask id="maskGost" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <use href="#gost" fill="#fff" />\n        </mask>\n        \n        <mask id="maskDragon" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <use href="#dragon" fill="#fff" />\n        </mask>\n        \n        <mask id="maskCrossbones" maskUnits="objectBoundingBox" maskContentUnits="objectBoundingBox">\n            <use href="#crossbones" fill="#fff" />\n        </mask>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["注意，需要将 ",(0,s.jsx)(n.code,{children:"<mask>"})," 的 ",(0,s.jsx)(n.code,{children:"maskUnits"})," 和 ",(0,s.jsx)(n.code,{children:"maskContentUnits"})," 的值设置为 ",(0,s.jsx)(n.code,{children:"objectBoundingBox"})," 。这样做的好处是，可以使 ",(0,s.jsx)(n.code,{children:"<mask>"})," 创建的遮罩图根据应用遮罩图的元素尺寸进行适配："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .icon--gradient:nth-child(1) {\n        background-image: linear-gradient(\n            to right in lch,\n            color(display-p3 25% 25% 100%) 0%,\n            color(display-p3 100% 85% 30%) 100%\n        );\n        mask: url(#maskGost);\n    }\n\n    .icon--gradient:nth-child(2) {\n        background-image: conic-gradient(\n            from 0deg at 50% 50% in oklch longer hue,\n            oklch(70% 0.3 0) 0%,\n            oklch(70% 0.3 0) 100%\n        );\n        mask: url(#maskDragon);\n    }\n\n    .icon--gradient:nth-child(3) {\n        background-image: linear-gradient(\n            293deg in oklch,\n            oklch(70% 0.5 340) 0%,\n            oklch(90% 0.3 200) 100%\n        );\n        mask: url(#maskCrossbones);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"与 SVG 的渐变制作渐变图标相比，这种方式要更为灵活，毕竟 CSS 的渐变要给 SVG 的渐变更简便，灵活性，可定制定要更高。"}),"\n",(0,s.jsxs)(n.h3,{id:"带有滤镜的遮罩效果",children:["带有滤镜的遮罩效果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#带有滤镜的遮罩效果",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["SVG 的 ",(0,s.jsx)(n.code,{children:"<mask>"})," 有一个强大功能，它可以与 SVG 的 ",(0,s.jsx)(n.code,{children:"<filter>"})," 相结合，创建出各种更具创意的视觉效果。例如下面这几个效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/supah/full/poxmKPQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/supah/full/poxmKPQ"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/supah",target:"_blank",rel:"noopener noreferrer",children:"@Fabio Ottaviani"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/iremlopsum/full/VQOvOW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/iremlopsum/full/VQOvOW"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/iremlopsum",target:"_blank",rel:"noopener noreferrer",children:"@Irem Lopsum"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"还有更多更有创意和吸引人的效果，这里就不一一展示了。"}),"\n",(0,s.jsx)(n.p,{children:"你可能会感到好奇？为什么这两个案例不详加阐述呢？这里简单的说一下，因为它们用到了 SVG 的滤镜特性，而且这个特性在前面的课程中都未有做过任何阐述。为了让大家能更好的应用好滤镜，接下来的这节课，我将与大家开始进入 SVG 滤镜的世界！"})]})}function J(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(I,{...e})}):I(e)}let Q=J;J.__RSPRESS_PAGE_META={},J.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F22-%E4%B8%AD%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E9%81%AE%E7%BD%A9.md"]={toc:[{text:"Web 上的遮罩",id:"web-上的遮罩",depth:2},{text:"遮罩是什么？",id:"遮罩是什么",depth:2},{text:"CSS 遮罩",id:"css-遮罩",depth:2},{text:"SVG 遮罩",id:"svg-遮罩",depth:2},{text:"maskUnits 属性",id:"maskunits-属性",depth:3},{text:"maskContentUnits 属性",id:"maskcontentunits-属性",depth:3},{text:"mask-type 属性",id:"mask-type-属性",depth:3},{text:"SVG 遮罩案例",id:"svg-遮罩案例",depth:2},{text:"镂空效果",id:"镂空效果",depth:3},{text:"不规则 UI",id:"不规则-ui",depth:3},{text:"渐变图标",id:"渐变图标",depth:3},{text:"带有滤镜的遮罩效果",id:"带有滤镜的遮罩效果",depth:3}],title:"22-中级篇：SVG 遮罩",headingTitle:"22-中级篇：SVG 遮罩",frontmatter:{}}}}]);