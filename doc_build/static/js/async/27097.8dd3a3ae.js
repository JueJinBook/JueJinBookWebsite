"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["27097"],{96230:function(e,n,r){r.r(n),r.d(n,{default:()=>$});var c=r(552676),s=r(740453);let l=r.p+"static/image/2b7bcf8370eb7d62d7fe216900e6c040.1b9e6e9e.gif",i=r.p+"static/image/a2a39d3c1b2fd949694c5e3c110c25c7.c074fd7d.webp",d=r.p+"static/image/96bca3234af243912e6334bbbab4f045.1b9e6e9e.gif",t=r.p+"static/image/d21be814a3608429e96c42a62d1445a2.a3247194.gif",a=r.p+"static/image/76cbcd0da371ba85db17eb670f58f31e.9506acb4.gif",o=r.p+"static/image/c3abf7a22ab85258c0bae2d2963361bb.d900e149.gif",h=r.p+"static/image/45ec7287e77b783f6dce09df1485f675.a8539fb8.gif",x=r.p+"static/image/bf0cdbe0cc265be27662965228ab0fb2.e7c457e3.webp",j=r.p+"static/image/4846890d4458b178042355c43b8d905a.a860a929.webp",p=r.p+"static/image/1bace718b9f14c362ce10c531c47b8da.db472f18.webp",f=r.p+"static/image/be619291c2cf2eeb944a91a50c414183.a8539fb8.gif",u=r.p+"static/image/93d3012f384d833f441da4826677c665.8ac99c25.webp",b=r.p+"static/image/6c4f4916520eefec91b35fdd4c664871.5c51dafd.webp",g=r.p+"static/image/c59e7414dd8ab853e56b54d72664c4cb.3c318db6.webp",m=r.p+"static/image/43c99329bfcaec0136791f853d3e457f.2b6d0e16.webp",y=r.p+"static/image/93e063465a35f0229e32e006a1757cb3.e7d1f774.webp",E=r.p+"static/image/9eff7238b4ba7710e9378968bac9aef8.93b5a0f6.webp",T=r.p+"static/image/9eec1909e5c8294410132612104e1cb6.e7962903.webp",_=r.p+"static/image/870a56fa7590220cae66b855fb2eea4b.93b5a0f6.webp",v=r.p+"static/image/50fe2fa240794bb3531af1f9464bc986.562e3bda.webp",N=r.p+"static/image/1691b57c368049a9eaab91e816fb7814.bbdfde78.webp",U=r.p+"static/image/ba023f8634d67e350a8a38caad7a5460.58d46e03.webp",B=r.p+"static/image/af229fa5aba530bba4533cb864c43c93.4bf352e3.webp",S=r.p+"static/image/843d74fe18e7a57bd7d8064f1e436448.b59ff008.webp",k=r.p+"static/image/4180bded23e3c18a5caf1dbc2defc1f2.de3c8455.webp",q=r.p+"static/image/ae483cabf364db7e275142b512d830a6.58d46e03.webp",C=r.p+"static/image/f442861e422f1e8288a0ff0210625252.7f7c58ee.webp",L=r.p+"static/image/3626cf2ad726c51ba704481da59b9028.522de406.webp",G=r.p+"static/image/5f64ac85d357ce18db4a723d01914443.328d91e4.webp",R=r.p+"static/image/26599bd48959e0f4693a84220057dc07.ced9b83c.webp",F=r.p+"static/image/1f6110b942b1915737233394e600638d.414e845b.webp",O=r.p+"static/image/a03cd4619b751c3f51a5b825ca5ec5e9.d1977585.gif",M=r.p+"static/image/b0540f14c3e59333e5052a012dfd43e5.e7fa879b.webp",w=r.p+"static/image/8e31d9567d3574cb46975eb82bc0116d.1b0eb5da.gif",D=r.p+"static/image/e3854c1c5d3bbb0db2563f0da95461f1.0e42b737.gif",V=r.p+"static/image/51f90770f80f6342fe8eefe3de5bfedd.035c7c21.gif",A=r.p+"static/image/874a3ef1b67c9e038a42411385e59e13.bae7f2e2.gif",X=r.p+"static/image/08d51d497d68b2cc443e8d2aa5331742.0d317802.gif",Y=r.p+"static/image/88f90931c1501e38b25d856be464752f.b201ba5d.gif",P=r.p+"static/image/ddf6c3b069958a76f735d8af63f157f3.9fae4070.gif",z=r.p+"static/image/fee139556af9af0fb5e651a51c1ca4ea.b10c6c24.gif",Q=r.p+"static/image/151c68bbf80d8056e5dbe734551c5fac.2c56cc1c.webp",W=r.p+"static/image/80e2105906807d3d17787e67e663c601.c182c068.gif",J=r.p+"static/image/99b86911c859ced3b4679227b1087c72.17ebd81e.webp",K=r.p+"static/image/b2add4f1e35bf89f288cc87fb14e8cfa.97138265.webp",Z=r.p+"static/image/2365e7bd6791dbc2d656d7af0625fd09.a4a19992.webp";function H(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",img:"img",blockquote:"blockquote",pre:"pre",ul:"ul",li:"li",strong:"strong",h3:"h3"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"40-高级篇svg-滤镜的进阶之创造纹理",children:["40-高级篇：SVG 滤镜的进阶之创造纹理",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#40-高级篇svg-滤镜的进阶之创造纹理",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318262368534578",target:"_blank",rel:"noopener noreferrer",children:"在上一节课的示例中"}),"，我们展示了如何将 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜生成的噪声图案用作位移滤镜 ",(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 的位移图像，从而实现了引人注目的立体感扭曲效果。事实上，在 SVG 的世界里， ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜犹如一颗闪亮的明珠，为我们打开了创造丰富纹理的大门。这个滤镜不仅是一个简单的噪声生成器，更是一个神奇的工具，可以创造出独特而复杂的纹理。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜可以与其他滤镜效果结合，例如模糊（",(0,c.jsx)(n.code,{children:"<feGaussianBlur>"}),"）、",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318058076569638",target:"_blank",rel:"noopener noreferrer",children:"高阶颜色矩阵"}),"（",(0,c.jsx)(n.code,{children:"<feColorMatrix>"}),"）、",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318225756454962",target:"_blank",rel:"noopener noreferrer",children:"颜色变换"}),"（",(0,c.jsx)(n.code,{children:"<feComponentTransfer>"}),"）和",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318262368534578",target:"_blank",rel:"noopener noreferrer",children:"位移"}),"（",(0,c.jsx)(n.code,{children:"<feDisplacementMap>"}),"） ，可以创造出更加丰富多彩的视觉效果。在这节课中，我们将深入探讨 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜基元的各种参数和技巧，带你进阶使用 SVG 滤镜，创造出令人惊叹的视觉效果。"]}),"\n",(0,c.jsxs)(n.p,{children:["通过本课程的学习，你将掌握高级的 SVG 滤镜技巧和方法，为你的设计和创意项目注入新的活力和魅力。让我们一起探索 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的无限可能，创造出令人惊叹的纹理效果吧！"]}),"\n",(0,c.jsxs)(n.h2,{id:"feturbulence-滤镜简介",children:[(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜简介",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#feturbulence-滤镜简介",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["现如今，我们可以使用",(0,c.jsx)(n.a,{href:"https://s.juejin.cn/ds/ijgrvS9y/",target:"_blank",rel:"noopener noreferrer",children:"现代 CSS"})," 相关特性制作一些简单的图案："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:Z,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["MagicPattern：",(0,c.jsx)(n.a,{href:"https://www.magicpattern.design/tools/css-backgrounds",target:"_blank",rel:"noopener noreferrer",children:"https://www.magicpattern.design/tools/css-backgrounds"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["并且在 ",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7355510532712955954",target:"_blank",rel:"noopener noreferrer",children:"SVG Pattern"})," 的加持之下，可以制作出一些更复杂的图案："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:K,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["PatternMonster： ",(0,c.jsx)(n.a,{href:"https://pattern.monster/",target:"_blank",rel:"noopener noreferrer",children:"https://pattern.monster/"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"但要制作出一些看起来比较自然的图案（例如模拟火焰、树丛、云朵、木纹等），几乎是不太可能。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:J,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"以往在 Web 的开发中，Web 上的自然质感的视觉表现通常是使用外部图像，但外部图像是额外的依赖项，它们引入了新的复杂性，例如适配、性能等。而且更换图片的内容成本也比较高，例如有一朵云的图片，想要让这个图片中的云朵随风飘动，就很难实现。"}),"\n",(0,c.jsxs)(n.p,{children:["现在，这些问题的很大一部分可以用几行 SVG 代码来解决，那就是 SVG 滤镜中的 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜基元。它的特殊之处在于它不需要输入任何图像，就能生成图像。它可以用来实现诸如云、火和烟等几种自然现象以及生成复杂的纹理（如大理石或花岗岩）等很多很酷的效果。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜基元正如其名“Turbulence”（湍流），会使图像生成类似紊乱、波动或湍流效果的纹理。其背后采用了一种被称为 Perlin 湍流函数算法，可以生成 Perlin 噪声。Perlin 噪声在计算机生成的图形中被广泛使用，用于创建各种纹理。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Perlin_noise",target:"_blank",rel:"noopener noreferrer",children:"Perlin 噪声"}),"（Perlin Noise）是一种在计算机图形学中广泛使用的渐变噪声算法，由 Ken Perlin 在 1983 年开发。它被设计用来生成自然且平滑的随机纹理，是一种伪随机函数，主要应用于纹理生成、程序化内容创作和特效制作。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这意味着，",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 带有创建多种类型的噪声纹理的选项，每种类型有数百万种变化。它在模拟诸如云、火焰、烟雾等几种自然现象以及生成复杂的纹理（如大理石、花岗岩、木纹、纸张等）时非常有用。使用",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的时候，我们可以通过调整参数直观地看到效果。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:W,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["SVG Filters：",(0,c.jsx)(n.a,{href:"https://yoksel.github.io/svg-filters/#/",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/svg-filters/#/"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["需要注意的是，我们使用的是一种随机噪声生成器。因此，大多数情况下，生成纹理是一个试验和调试的过程，直到你获得满意的结果。随着经验的积累，预测纹理的外观会变得稍微容易一些。这也意味着，对于初次接触 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的开发者来说，通过视觉上调整其属性是理解其功能的最佳方式。"]}),"\n",(0,c.jsxs)(n.p,{children:["在接下来的内容中，我将尽可能以视觉方式解释 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜，并提供一些交互演示，帮助大家更好地学习和掌握它。这样，你不仅可以更直观地理解每个属性的作用，还能通过实践快速上手，创造出理想的纹理效果。"]}),"\n",(0,c.jsxs)(n.h2,{id:"feturbulence-滤镜的属性和功能",children:[(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的属性和功能",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#feturbulence-滤镜的属性和功能",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜基元类似于 ",(0,c.jsx)(n.code,{children:"<feFlood>"})," ，都能为滤镜区域填充新的内容。例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB">\n            <feTurbulence \n                type="fractalNoise" \n                baseFrequency=".006" \n                numOctaves="2" \n                seed="8" \n                stitchTiles="stitch"\n                in="SourceGraphic"\n                result="TURBULENCE" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:Q,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbEWLY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbEWLY"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["与 ",(0,c.jsx)(n.code,{children:"<feFlood>"})," 提供纯色填充不同，",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 生成随机噪声图案。通过调整其属性参数，可以实现从细腻的砂岩纹理到波涛汹涌的海面等各种视觉效果。它有以下五个主要属性："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"type"})})," （类型）：确定噪声的类型，可以是 ",(0,c.jsx)(n.code,{children:"turbulence"})," （会生成湍流效果的噪声）或 ",(0,c.jsx)(n.code,{children:"fractalNoise"})," （会生成分形噪声）"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"baseFrequency"})})," （基础频率）：控制噪声的频率。低频率会生成较大的噪声波形，高频率会生成较小的噪声波形"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"numOctaves"})}),"（层级数量）：也称为八度数，用于控制噪声层级数量。更多的层级会增加细节，使噪声看起来更加复杂"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"seed"})})," （种子）：设置噪声的随机种子值。不同的种子值会生成不同的噪声图案"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"stichTiles"})})," （平铺）：决定噪声图案是否在边缘拼接，以便生成平铺效果。它有两个值可选，",(0,c.jsx)(n.code,{children:"stitch"})," 会生成无缝拼接的噪声图案，",(0,c.jsx)(n.code,{children:"noStitch"})," 则不会"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在接下来的内容中，我们将通过实际示例展示每个属性如何影响视觉效果，但不会深入研究函数的技术细节。你会发现，大多数情况下，你只面要关注其中的三个属性：",(0,c.jsx)(n.code,{children:"type"})," （类型）、",(0,c.jsx)(n.code,{children:"baseFrequency"})," （基础频率）和层数（",(0,c.jsx)(n.code,{children:"numOctaves"}),"）。"]}),"\n",(0,c.jsxs)(n.p,{children:["我们先从最重要的 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性开始！"]}),"\n",(0,c.jsxs)(n.h3,{id:"基础频率basefrequency",children:["基础频率：baseFrequency",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础频率basefrequency",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性对于 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜非常重要，因为它是创建图案所必需的。甚至是，",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜只需要 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性就可以生成噪声。基础频率会影响生成的噪声大小（或比例）和颗粒度。你可以尝试着拖动下面示例中的滑块更改 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 的值，并看到它如何实时影响生成的噪声："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:z,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/vYwWXLV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYwWXLV"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["你会注意到，随着 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性值的增加或减少，生成的图案会保持完整，当它变小或变大时，看起来就像是在左上角的原点放大和缩小一样。"]}),"\n",(0,c.jsxs)(n.p,{children:["较小的 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 值（如 ",(0,c.jsx)(n.code,{children:"0.001"}),"）会生成较大的图案，而较大的值（例如 ",(0,c.jsx)(n.code,{children:"0.5"}),"）则会生成较小的图案。该属性的值可以从 ",(0,c.jsx)(n.code,{children:"0"})," 开始向上增加，不允许使用负值，其中 ",(0,c.jsx)(n.code,{children:"0"})," 表示没有频率，也就不会生成图案。另外，在 ",(0,c.jsx)(n.code,{children:"0.01 ~ 1"})," 之间是一个合理的区间，并且在 ",(0,c.jsx)(n.code,{children:"0.02 ~ 0.2"})," 之间内的值对于大多数纹理来说是有用的起始点。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，",(0,c.jsx)(n.code,{children:"<feFrequency>"})," 生成的噪声没有背景颜色。也就是说，你能够透过噪声看到其背景颜色。例如，你尝试着调整上面示例中 ",(0,c.jsx)(n.code,{children:"body"})," 的背景颜色，所呈现的图案在视觉上也会有所不同："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:P,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/bGyYwqG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGyYwqG"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性还可以接受两个值。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["当你提供一个值时，则 ",(0,c.jsx)(n.code,{children:"x"})," 轴和 ",(0,c.jsx)(n.code,{children:"y"})," 轴定义的频率相同"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["当你提供两个值时，第一个值将用于 ",(0,c.jsx)(n.code,{children:"x"})," 轴的频率，而第二个值将对应 ",(0,c.jsx)(n.code,{children:"y"})," 轴频率"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 提供两个不同的值，那么会生成水平或垂直的噪声，这可以用来实现一些奇妙的噪声效果。下面这个示例，为 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性提供了两个不同的值，并且你可以拖动滑块，调整它们的值，并注意当你给它们不同的值时，生成的图案是如何沿着 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 轴变化："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB">\n            <feTurbulence \n                baseFrequency=".06 .03" \n                in="SourceGraphic"\n                result="TURBULENCE" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:Y,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdObKV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdObKV"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["你会发现，",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 频率之间差异越大，图案就会变得越“拉长”。例如，当 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 值相对较小时（比如 ",(0,c.jsx)(n.code,{children:"0.01"}),"），将会使水平方向的图案更大（就像被拉伸了一样）。如果进一步减少它（比如到 ",(0,c.jsx)(n.code,{children:"0.001"}),"），你会看到水平方向的图案变得更像是线条："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:X,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"注意，垂直方向亦是如此！"}),"\n",(0,c.jsxs)(n.h3,{id:"噪声类型type",children:["噪声类型：type",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#噪声类型type",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["顾名思义，",(0,c.jsx)(n.code,{children:"type"})," 属性是用来指定 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜生成噪声（图案）的类型。该属性有两个值可选：",(0,c.jsx)(n.code,{children:"turbulence"})," 和 ",(0,c.jsx)(n.code,{children:"fractalNoise"})," 。这两个值决定了噪声的外观和生成方式："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"turbulence"})," 类型的噪声是指将柏林函数进行合成时，只取函数的绝对值，合成后的函数在 ",(0,c.jsx)(n.code,{children:"0"})," 处不可导。它声明的是基于随机数的噪声，看起来更像是云层或者流体的运动。通常用于模拟自然界中的不规则纹理，例如水面波纹、云层或者火焰效果"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"fractalNoise"})," 类型的噪声是由多个频率的噪声叠加而成的，即在原来的噪声中叠加白色噪声，让最终的结果呈现出高斯模糊的效果，看起来更加平滑且具有连续性。通常用于创建复杂的纹理，例如木纹、纸张的粗糙表面或者其他自然材质"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["你可以基于相同的频率下调整 ",(0,c.jsx)(n.code,{children:"type"})," 的类型，查看生成的图案效果："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB">\n            <feTurbulence \n                baseFrequency=".06 .03" \n                type="turbulence"\n                in="SourceGraphic"\n                result="TURBULENCE" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:A,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/zYQPoPe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYQPoPe"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"层级数量numoctaves",children:["层级数量：numOctaves",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#层级数量numoctaves",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"numOctaves"})," 根据单词“Octaves”的意思，又被称为“八度”。如果你喜欢音乐，那么“八度”这个概念对你而言，不会感到陌生。在音乐中，八度是指音高之间的关系，其中较高的音的频率是较低音的频率的两倍。即两个相邻音组中的同名音之间的音高差距是一个八度，这两个音振动图像相似，高八度的音的振动频率刚好是低八度的两倍。相关八度的两个音同时弹响的时候，可以产生细节更加丰富的音。这种概念可以帮助我们理解 SVG 滤镜 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 的 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 属性。"]}),"\n",(0,c.jsxs)(n.p,{children:["在 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜中，",(0,c.jsx)(n.code,{children:"numOctaves"})," 属性定义了在 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," （频率）上渲染的八度数。换句话说，",(0,c.jsx)(n.code,{children:"numOctaves"})," 主要用于指定生成噪声时叠加的噪声层数，每一层噪声的频率是前一层的两倍。这个类似于音乐中的八度，因为每个新的噪声层相当于在前一层的基础上增加了一个“八度”，即频率加倍。"]}),"\n",(0,c.jsxs)(n.p,{children:["多个八度的组合（较高的 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 值）可以生成更为复杂和自然的纹理。例如，",(0,c.jsx)(n.code,{children:"numOctaves = 1"})," 时只有一层基础噪声，",(0,c.jsx)(n.code,{children:"numOctaves = 3"})," 时则包含三层噪声，每一层的频率是前一层的两倍，产生的效果更为细致和复杂。"]}),"\n",(0,c.jsxs)(n.p,{children:["默认的 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 值为 ",(0,c.jsx)(n.code,{children:"1"}),"，这意味着它以基础频率渲染噪声。任何额外的八度都会使频率加倍并减半振幅。这个数字越高，其效果就越不明显。此外，更多的八度意味着更多的计算，可能会影响性能。我通常使用 ",(0,c.jsx)(n.code,{children:"1 ~ 5"}),"之间的值，仅用于完善图案。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB">\n            <feTurbulence \n                baseFrequency=".06 .03" \n                type="turbulence"\n                numOctaves="3"          \n                in="SourceGraphic"\n                result="TURBULENCE" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:V,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/dyEZNyp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dyEZNyp"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["正如上图所示，随着 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 不断增加，生成的图像大致形状与 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 值等于 ",(0,c.jsx)(n.code,{children:"1"})," 的时候一样，但是细节在不断增加。当 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 值增加到一定程度后，图像的差异就变得不太明显，具体这个值多大，与 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性的值密切相关。"]}),"\n",(0,c.jsxs)(n.p,{children:["有一点需要知道提，",(0,c.jsx)(n.code,{children:"numOctaves"})," 值大到一定程度后，例如 ",(0,c.jsx)(n.code,{children:"5"})," 或 ",(0,c.jsx)(n.code,{children:"6"})," ，生成的图像就看不到明显变化，但这并不代表着 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 属性的值达到了某个阈值之后，八度叠加就不生效了，而是叠加之后产生的变化更加细小，需要拿个放大镜放大看了。"]}),"\n",(0,c.jsxs)(n.h3,{id:"种子seed",children:["种子：seed",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#种子seed",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 的 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜中，",(0,c.jsx)(n.code,{children:"seed"})," 属性用于指定生成噪声的随机种子，即“伪随机数生成器的起始数字”。换句话说，它为用于生成我们的随机噪声的随机函数提供了一个不同的起始数字。注意，",(0,c.jsx)(n.code,{children:"seed"})," 属性表示的是 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜效果中伪随机数生成的起始值，并不是随机数量。因此，不同数量的 ",(0,c.jsx)(n.code,{children:"seed"})," 不会改变噪声的频率和密度，改变的是噪声的形状和位置。"]}),"\n",(0,c.jsxs)(n.p,{children:["这意味着，",(0,c.jsx)(n.code,{children:"seed"})," 属性会创建不同的噪声实例，并作为噪声生成器的起始数字，该生成器在内部生成伪随机数。如果定义了 ",(0,c.jsx)(n.code,{children:"seed"})," 属性值，则会出现一个不同的噪声实例，但具有相同的特性。它非常适合添加图案的独特性。例如，可以在访问页面时生成一个随机种子（",(0,c.jsx)(n.code,{children:"seed"}),"），以便每位访问者都会获得稍微不同的图案。由于一些技术细节和单精度浮点数，生成随机种子的实际区间是从 ",(0,c.jsx)(n.code,{children:"0"})," 到 ",(0,c.jsx)(n.code,{children:"9999999"}),"。但是，这仍然是千万个不同的实例。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB">\n            <feTurbulence \n                baseFrequency=".06 .03" \n                type="turbulence"\n                numOctaves="3"     \n                seed="2"\n                in="SourceGraphic"\n                result="TURBULENCE" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:D,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/bGyYgaQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGyYgaQ"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"平铺stitchtiles",children:["平铺：stitchTiles",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#平铺stitchtiles",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"stitchTiles"})," 属性有点类似于 CSS 的 ",(0,c.jsx)(n.code,{children:"background-repeat"})," 属性，主要用于控制生成的噪声图案是否可以平铺。正如规范所述，有时噪声生成的结果会在“瓷砖”边界处显示出明显的不连续性。你可告诉浏览器尝试平滑处理结果，使两个瓷砖看起来“拼接”在一起。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"stitchTiles"})," 属性可以接受两个值：",(0,c.jsx)(n.code,{children:"stitch"})," 和 ",(0,c.jsx)(n.code,{children:"noStitch"})," ："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"stitch"}),"：生成的噪声图案会在边界处平滑衔接，从而可以无缝平铺"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"noStitch"}),"：生成的噪声图案不会在边界处衔接，直接平铺时可能会有明显的接缝"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["我们通过下面这个示例来展示 ",(0,c.jsx)(n.code,{children:"stitch"})," 和 ",(0,c.jsx)(n.code,{children:"noStitch"})," 。注意，我们在四个 ",(0,c.jsx)(n.code,{children:".box"})," 元素中应用了相同的一个滤镜，这个滤镜是由 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜生成的噪声图："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<div class="boxes">\n    <div class="box"></div>\n    <div class="box"></div>\n    <div class="box"></div>\n    <div class="box"></div>\n</div>\n\n<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n            <feTurbulence \n                baseFrequency=".06 .03" \n                type="turbulence"\n                numOctaves="3"     \n                seed="2"\n                stitchTiles="noStitch"\n                in="SourceGraphic"\n                result="TURBULENCE" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["使用 CSS 网格布局，将四个 ",(0,c.jsx)(n.code,{children:".box"})," 拼接在一起。此时，你可以整滤镜 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 的 ",(0,c.jsx)(n.code,{children:"stitchTies"})," 属性的值，查看四个 ",(0,c.jsx)(n.code,{children:".box"})," 的边缘连接处的噪声图案差异。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLWPgGy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLWPgGy"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["很明显，当 ",(0,c.jsx)(n.code,{children:"stitchTiles"})," 属性的值为 ",(0,c.jsx)(n.code,{children:"noStitch"})," 时，在各个 ",(0,c.jsx)(n.code,{children:".box"})," 元素的边界处噪声图案各自为政，因此，连接处的纹理有明显的断裂感；而 ",(0,c.jsx)(n.code,{children:"stitch"})," 则不一样，它会自动调整坐标，让下一个噪声图形应用上一个噪声图形的宽高等数据，使元素连接处纹理有平滑感："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:M,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["正如我之前提到的，你最有可能使用的只有三个属性是 ",(0,c.jsx)(n.code,{children:"type"}),"、",(0,c.jsx)(n.code,{children:"baseFrequency"})," 和 ",(0,c.jsx)(n.code,{children:"numOctaves"}),"。因此，我们将在接下来重点关注这三个属性。"]}),"\n",(0,c.jsxs)(n.h2,{id:"案例一制作精美图案",children:["案例一：制作精美图案",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#案例一制作精美图案",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["我想你现在对 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜有所了解了，也知道每个属性的功能。但对于大部分 Web 开发者来说，依旧不知道从何下手，才能使用相关的滤镜制作出自己喜欢的图案效果。接下来，我们通过几个简单且真实的案例，向大家展示 SVG 的 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜是如何与其他滤镜相结合，制作出精美的图案。"]}),"\n",(0,c.jsxs)(n.h3,{id:"星空图案",children:["星空图案",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#星空图案",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:O,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/gOJXmBY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOJXmBY"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这是一个由 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 和 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 两个滤镜基元相结合制作的一个星空图案效果。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜负责生成噪声图案"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜改变 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 生所的图案的像素颜色"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"具体代码如下："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n          <feTurbulence baseFrequency=".25 .12" in="SourceGraphic" result="TURBULENCE" />\n          <feColorMatrix values="\n                    0 0 0 9 -5\n                    0 0 0 9 -5\n                    0 0 0 9 -5\n                    0 0 0 0 1" in="TURBULENCE" result="STARS" type="matrix" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"简单解释一下上面的代码。"}),"\n",(0,c.jsxs)(n.p,{children:["首先，使用 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜生成了一个噪声图案，在这里通过 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性指定了噪声的基础频率，其中水平方向的基础频率是 ",(0,c.jsx)(n.code,{children:"0.25"})," ，垂直方向的频率是 ",(0,c.jsx)(n.code,{children:"0.12"})," 。并且将该滤镜的结果命名为 ",(0,c.jsx)(n.code,{children:"TURBULENCE"})," ，方便被接下来的 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜引用。该滤镜生了一个大致如下图这样的噪声图案："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:F,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"很显然，这并不是我们所期望的星空图案。这是一张彩色的图案，其中的点你可以想象它是夜空中的星星。但我们通常看过的星空，应该只有两种颜色，即可黑色和白色。其中黑色代表天空，白色代表最亮的星星。"}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 中，要将一张彩色图转换为黑白图，",(0,c.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318058076569638",target:"_blank",rel:"noopener noreferrer",children:["我们可以应用之前介绍的 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜来实现"]}),"。该滤镜提供了一个高阶颜色矩阵，可以通过调整图像颜色的 RGBA 通道的值来生成所需的图像："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:R,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["需要注意的是，RGBA 值是浮点数，范围从 ",(0,c.jsx)(n.code,{children:"[0, 1]"}),"（包括边界），而不是从 ",(0,c.jsx)(n.code,{children:"[0, 255]"})," 的整数，这可能与预期的有所不同。权重可以是任何浮点数，尽管在计算结束时，任何小于 ",(0,c.jsx)(n.code,{children:"0"})," 的结果将被限制为 ",(0,c.jsx)(n.code,{children:"0"}),"，而任何大于 ",(0,c.jsx)(n.code,{children:"1"})," 的结果将被限制为 ",(0,c.jsx)(n.code,{children:"1"}),"。星空图案依赖于这种限制，因为它的矩阵如下所示："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:G,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["我们在 RGB 通道上使用相同的公式，这意味着我们生成了一幅灰度图像。这个公式将 A 通道的值乘以九，然后减去五。请记住，即使在 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 的输出中，Alpha 值也会有所变化。大多数结果值不会落在 ",(0,c.jsx)(n.code,{children:"0 ~ 1"})," 的范围内，因此它们会被限制在这个范围内。在第四行中，我们将 Alpha 通道设置为常数 ",(0,c.jsx)(n.code,{children:"1"}),"，意味着图像完全不透明。"]}),"\n",(0,c.jsxs)(n.p,{children:["最终 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜将噪声的 Alpha 通道增强并将其余部分设为黑色，从而得到星空的图案效果。"]}),"\n",(0,c.jsxs)(n.p,{children:["在此基础上，我们还可以通过 JavaScript 脚本动态调整 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的 ",(0,c.jsx)(n.code,{children:"seed"})," 属性值，使每次刷新页面都能看到不同的星空效果。"]}),"\n",(0,c.jsxs)(n.h3,{id:"木纹图案",children:["木纹图案",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#木纹图案",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:L,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/NWVwjQM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWVwjQM"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"这个图案的实现与刚才的星空效果并没有太大不同。只是在噪声图案生成和颜色矩形转换上略有差异："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n            <feTurbulence baseFrequency=".002 .3" type="fractalNoise" in="SourceGraphic" result="TURBULENCE__10" />\n            <feColorMatrix values="\n                    0.05 0 0 0 0.95\n                    0.15 0 0 0 0.65\n                    0.5  0 0 0 0.15\n                    0    0 0 0 1" in="TURBULENCE__10" result="TURBULENCE__20" type="matrix" />\n          \n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["为了模仿木纹的图案，我给 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 的 ",(0,c.jsx)(n.code,{children:"x"})," 轴设置了一个较小的值，",(0,c.jsx)(n.code,{children:"y"})," 轴设置了一个较大的值，创建出拉伸的噪声图案。此外，我们设置了 ",(0,c.jsx)(n.code,{children:"type"})," 为 ",(0,c.jsx)(n.code,{children:"fractalNoise"})," ，使噪声图案带有模糊效果。"]}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 只是重新给噪声图案着色。与星空示例不同之处是，这里将原始色 ",(0,c.jsx)(n.code,{children:"#0d2680"})," （即 ",(0,c.jsx)(n.code,{children:"rgb(5% 15% 50%)"}),"）转换为目标色 ",(0,c.jsx)(n.code,{children:"#f2a626"})," （即 ",(0,c.jsx)(n.code,{children:"rgb(95% 65% 15%)"}),"）："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这确保了图像的所有像素保持在某个颜色范围内。找到最佳颜色范围需要稍微调整一下值。"}),"\n",(0,c.jsxs)(n.h3,{id:"迷彩服图案",children:["迷彩服图案",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#迷彩服图案",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:q,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbEQLE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbEQLE"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"前面我们制作了木纹图案，接一下来我们来制作布料方面的图案，例如迷彩服图案。该图案通常由四种颜色组成：深绿色作为背景、棕色作为形状，黄绿色作为斑块，黑色则点缀为小斑点。"}),"\n",(0,c.jsxs)(n.p,{children:["使用 SVG 滤镜制作类似上图这样的迷彩服图案，我们可能会用到 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜、",(0,c.jsx)(n.code,{children:"<feComponentTransfer>"})," 和 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 等滤镜。具体代码如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n            <feTurbulence type="fractalNoise" baseFrequency="0.015" numOctaves="4" in="SourceGraphic" result="TURBULENCE__10" />\n            <feComponentTransfer in="TURBULENCE__10" result="TURBULENCE__20">\n                <feFuncR type="discrete" tableValues="0 0 1" />\n                <feFuncG type="discrete" tableValues="0 0 0 1 1" />\n                <feFuncB type="discrete" tableValues="0 1" />\n            </feComponentTransfer>    \n            <feColorMatrix values="\n                1   0   0  0  0\n                -1  1   0  0  0\n                -1  -1  1  0  0\n                0   0   0  0  1" in="TURBULENCE__20" result="TURBULENCE__30" type="matrix" />\n            <feColorMatrix values="\n                -.08  .42  .09   0  .08\n                -.17  .35  -.08  0  .17\n                -.08  .15  -.04  0  .08\n                0     0    0     0  1" in="TURBULENCE__30" result="TURBULENCE__40" type="matrix" />\n   \n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["与之前几个效果相比，在这个效果中，",(0,c.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318225756454962",target:"_blank",rel:"noopener noreferrer",children:["我们还使用了 ",(0,c.jsx)(n.code,{children:"<feComponentTransfer>"})," 滤镜"]}),"。通过它的分量元素的离散函数类型，精确控制图案中红色、绿色和蓝色，它们的切割点分别是 ",(0,c.jsx)(n.code,{children:"66.67%"}),"、",(0,c.jsx)(n.code,{children:"60%"})," 和 ",(0,c.jsx)(n.code,{children:"50%"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["上图左侧是 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 生成的噪声图案，右则是 ",(0,c.jsx)(n.code,{children:"<feComponentTransfer>"})," 滤镜对噪声图案中像素的 R、G 和 B 通道的线性值映射到一个离散区间范围。有关于这方面更详细的介绍，请移步阅读《",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318225756454962",target:"_blank",rel:"noopener noreferrer",children:"SVG 滤镜的进阶之创建图像特效"}),"》！"]}),"\n",(0,c.jsxs)(n.p,{children:["如果你仔细看，你会发现，每一层上的斑块在某些地方重叠，导致我们不想要的颜色出现。这些其他颜色为我们将噪声图案转换为迷彩图增添了不少的障碍。因此，这里使用 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜来消除这些障碍："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"对于红色，我们定义恒等函数"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"对于绿色，我们的起点是恒等函数，但从中减去红色"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"对于蓝色，我们的起点也是恒等函数，但从中减去红色和绿色"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这些规则意味着红色保留在红色和绿色及/或蓝色曾经重叠的地方；绿色保留在绿色和蓝色重叠的地方。生成的图像包含四种类型的像素：红色、绿色、蓝色或黑色。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:B,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["接着再使用第二个 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 重新着色所有内容："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"黑色部分通过恒定权重变成深绿色"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"红色部分通过反向恒定权重变成黑色"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"绿色部分通过绿色通道的附加权重变成黄绿色"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"蓝色部分通过蓝色通道的附加权重变成棕色"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"最终得到一个我们想的类似迷彩服的图案："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:U,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbEQLE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbEQLE"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"很多时候，你往往只需要改为一些参数，将获得很多不同的图案效果。例如："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n            <feTurbulence type="fractalNoise" baseFrequency="0.005" numOctaves="6" in="SourceGraphic" result="TURBULENCE__10" />\n            <feColorMatrix values="\n                1 0 0 0 0\n                1 0 0 0 0\n                1 0 0 0 0\n                0 0 0 0 1" type="matrix" in="TURBULENCE__10" result="TURBULENCE__20"/>\n            <feComponentTransfer in="TURBULENCE__20" result="TURBULENCE__30">\n                <feFuncR type="table" tableValues="0 .02 .03 .03 .09 .12 .27 .91 .3 .03 0 0"/>\n                <feFuncG type="table" tableValues=".01 .09 .16 .18 .38 .48 .54 .73 .33 .09 .01 .01"/>\n                <feFuncB type="table" tableValues=".03 .17 .3 .25 .37 .42 .42 .6 .17 .01 0 0"/>\n            </feComponentTransfer>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbExpO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbExpO"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"看上去是不是很像岛屿地图！"}),"\n",(0,c.jsxs)(n.h3,{id:"大理石图案",children:["大理石图案",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#大理石图案",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/jOoaLYr",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOoaLYr"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["类似大理石纹理的图案制作相对而言要简单的多，你只需要使用 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜，多调试几遍 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性的值，直到符合自己期望的噪声图案，剩下的就是使用 ",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 或 ",(0,c.jsx)(n.code,{children:"<feComponentTransfer>"})," 给图案着色。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n    <filter id="filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n        <feTurbulence baseFrequency="0.01"  in="SourceGraphic" result="TURBULENCE__10" />\n        <feColorMatrix type="matrix" values="\n            1 1 1 0 0\n            1 1 1 0 0\n            1 1 1 0 0\n            0 1 0 1 0 " in="TURBULENCE__10" result="TURBULENCE__20"/>\n        <feColorMatrix type="matrix" values="\n            .59 0 0 0 0.24\n            .67 0 0 0 0.19\n            .75 0 0 0 0.19\n            0   0 0 1 1 " in="TURBULENCE__20" result="TURBULENCE__30"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["不难发现，这里所展示的几个图案，他的制作方法和思路都是一样的。这意味着，你只要愿意去尝试，基于 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"}),"、",(0,c.jsx)(n.code,{children:"<feColorMatrix>"})," 或 ",(0,c.jsx)(n.code,{children:"<feComponentTransfer>"})," 滤镜你可以创作出各式各样的精美图案！"]}),"\n",(0,c.jsxs)(n.h3,{id:"纸张图案",children:["纸张图案",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#纸张图案",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"关于图案的制作，我们再来看一个类似纸张纹理的图案。这个图案的制作过程与前面所展示的几个案例都略有不同，因为我们将要使用 SVG 的光源方面的滤镜。例如："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feDiffuseLighting> 滤镜"}),"：用于在 SVG 图像中创建漫反射光照效果。它模拟了光线在粗糙表面上的散射，使图像看起来更加自然和真实"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<feSpecularLighting> 滤镜"}),"：用于在 SVG 图像中创建镜面反射光照效果。它模拟了光线在光滑表面上的反射，使图像看起来有高光和反光点"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"简单地说，这两个滤镜基元都通过使用图像的 Alpha 通道作为凹凸贴图来照亮对象或图像。透明的部分保持平坦，而不透明的部分则凸起，形成被更明显照亮的高峰。"}),"\n",(0,c.jsxs)(n.p,{children:["换句话说，光源滤镜使用输入图像的 Alpha 通道来提供深度信息：更不透明的区域会向观众凸起，而更透明的区域则会凹陷远离观众。这意味着输入图像中像素的 Alpha 值被用作该像素在 ",(0,c.jsx)(n.code,{children:"z"})," 维度上的高度，滤镜使用该高度来计算虚拟表面，从而反射特定量的光。这是一项非常强大的功能！"]}),"\n",(0,c.jsxs)(n.p,{children:["这两种光源滤镜都接受一个称为 ",(0,c.jsx)(n.code,{children:"surfaceScale"})," 的属性，它实际上是一个 ",(0,c.jsx)(n.code,{children:"z"})," 轴比例因子。如果增加这个值，表面纹理的“坡度”会变得更陡。由于 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜生成的噪声图案，其 Alpha 通道充满了从 ",(0,c.jsx)(n.code,{children:"0 ~ 1"})," 的噪声值，当我们照射光源时，它会产生一个很好的可变 ",(0,c.jsx)(n.code,{children:"Z"})," 地形，创建出高光效果。"]}),"\n",(0,c.jsx)(n.p,{children:"在 SVG 中有三种光源："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"feDistantLight"}),"：表示远程光源，其距离是任意远的，因此以与目标的角度来指定。这是表示阳光的最合适方式"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"fePointLight"}),"：表示从特定点发出的点光源，该点表示为三维 ",(0,c.jsx)(n.code,{children:"x/y/z"})," 坐标。这类似于房间内或场景内的光源"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"feSpotLight"}),"：表示聚光灯，其行为类似于点光源，但其光束可以缩小到锥形，而光线可以旋转到其他目标"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"这三种光源中的每一种都有其自己的属性，用于通过指定 3D 空间中源的位置来定制其生成的光。这些属性超出了这节课的范围，但不用担心，我们后续的课程中会详细介绍这些属性。"}),"\n",(0,c.jsxs)(n.p,{children:["在这里，你只需要知道，在 SVG 中创建和应用光效果，你需要将源嵌套在光类型中。因此，你首先要选择所需的光类型，然后选择要从中发出光线的源，最后需要指定光的颜色。",(0,c.jsx)(n.code,{children:"lighting-color"})," 属性用于定义 ",(0,c.jsx)(n.code,{children:"<feDiffuseLighting>"})," 和 ",(0,c.jsx)(n.code,{children:"<feSpecularLighting>"})," 的光源颜色。"]}),"\n",(0,c.jsx)(n.p,{children:"了解了这些基础知识之后，我们就可以使用这些滤镜来制作像下图这样的纸张图案："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/jOoaGOm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOoaGOm"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"这个效果对应的代码如下："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n            <feTurbulence type="fractalNoise" baseFrequency="0.04" numOctaves="5" in="SourceGraphic" result="TURBULENCE__10" />\n            <feDiffuseLighting lighting-color="white" surfaceScale="2" in=\'TURBULENCE__10\' result="TURBULENCE__20" >\n                <feDistantLight azimuth="45"  elevation="60"/>\n            </feDiffuseLighting>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["首先，我们使用 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜生成像下图这样的一个噪声图案："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:T,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["为了避免纸面上在光源作用下出现锐利的线条，我们将 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的噪声类型（",(0,c.jsx)(n.code,{children:"type"}),"）设置 ",(0,c.jsx)(n.code,{children:"fractalNoise"})," ，它会使噪声图案带点模糊效果。与此同时，为了增加纸张的“粗糙感”，我们增加了 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 值，增加其中微小细节的量，从而使纸张看起来更粗糙。"]}),"\n",(0,c.jsxs)(n.p,{children:["之后，将类似太阳的光用于噪声图案上。这意味着我们将使用白色漫反射光，该光源从远处发出。方位角（",(0,c.jsx)(n.code,{children:'azimuth="45"'}),"）和仰角（",(0,c.jsx)(n.code,{children:'elevation="60"'}),"）确定了光源在 3D 空间中的位置。并且使用 ",(0,c.jsx)(n.code,{children:"surfaceScale"})," 属性设置了 ",(0,c.jsx)(n.code,{children:"z"})," 轴高度放大的倍数，在这个示例中放大两倍。将这个光源应用于噪声图案上，就制作出了我们想要的纸张图案："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/jOoaGOm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOoaGOm"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["你也可以调整光源颜色，例如将白色光源替换成带有一点橙色调的泛黄，即 ",(0,c.jsx)(n.code,{children:"#FFEFD5"})," 。你可以迅速调整纸张的颜色："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/NWVwaya",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWVwaya"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果你愿意，还可以通过调整光源的源和距离来进一步微调效果。例如，将光源的仰角（",(0,c.jsx)(n.code,{children:"elevation"}),"）从 ",(0,c.jsx)(n.code,{children:"60"})," 降到 ",(0,c.jsx)(n.code,{children:"40"})," 。看到的效果将会像下图这样："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRoGyg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRoGyg"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["有意思的是，我在尝试将光源的仰角（",(0,c.jsx)(n.code,{children:"elevation"}),"）直接从代码中删除时，让我意外的获得了类似于岩石的图案效果："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/gOJXGjg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOJXGjg"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"非常有意思吧！"}),"\n",(0,c.jsxs)(n.p,{children:["除此之外，你还可以在纸张上添加点别的东西，例如 ",(0,c.jsx)(n.a,{href:"https://codepen.io/raczo/full/KKVbQmV",target:"_blank",rel:"noopener noreferrer",children:"@Oscar Salazar 在 Codepen 上提供的一个案例"}),"，在纸张上放了几颗水珠："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/BaemPdV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaemPdV"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"案例二制作水波纹",children:["案例二：制作水波纹",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#案例二制作水波纹",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318262368534578",target:"_blank",rel:"noopener noreferrer",children:"通过之前的课程学习"}),"，我们知道 ",(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 滤镜可以让图形按照 R、G 和 B 通道的颜色进行位置的偏移，从而让图形产生各种变形的效果。而且用作位移图的图像可以是任何图像，包括 SVG 滤镜生成的图形，例如 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 生成的噪声图。例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB" x="0%" y="0%" width="100%" height="100%">\n            <feTurbulence baseFrequency="0.01 0.4" result="TURBULENCE__10" numOctaves="2" />\n            <feDisplacementMap in="SourceGraphic" in2="TURBULENCE__10" result="TURBULENCE__20" scale="20" xChannelSelector="R" yChannelSelector="R" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLyXLx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLyXLx"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["由于 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜可以创建随机的噪声图案，因此，当它与 ",(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 滤镜相互结合使用时，就会使图形或图像有符合自然效果的扭曲效果。例如下面这个水波效果："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbEExx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbEExx"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这个水波的效果是不是很逼真。这个效果是通过 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 和 ",(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 滤镜使下面这张静态位图中的水动起来："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["URL: ",(0,c.jsx)(n.a,{href:"https://picsum.photos/id/716/1920/1024",target:"_blank",rel:"noopener noreferrer",children:"https://picsum.photos/id/716/1920/1024"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["首先，使用 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜生成了噪声图案："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB" x="-20%" y="-20%" width="140%" height="140%">\n            <feTurbulence id="feturbulence" type="fractalNoise" baseFrequency="0.001 .01" numOctaves="2" result="TURBULENCE__10"  />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["通过调整 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性的值，使纹理拉伸变形，并调整 ",(0,c.jsx)(n.code,{children:"numOctaves"})," 增加纹理的密度："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["我们可以将生成的噪声图作为 ",(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 滤镜的位移图，并使用位移图的绿色通道控制水平方向位移，用蓝色通道控制垂直方向位移，与此同时调整扭曲的强度："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB" x="-20%" y="-20%" width="140%" height="140%">\n            <feTurbulence id="feturbulence" type="fractalNoise" baseFrequency="0.001 .01" numOctaves="2" result="TURBULENCE__10"  />\n            <feDisplacementMap in="SourceGraphic" in2="TURBULENCE__10" result="TURBULENCE__20" xChannelSelector="G" yChannelSelector="B" scale="20" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["到现在为止，经过 SVG 滤镜处理之后的图像同样是静止的，而且看上去和原图没有太多差异。要让这个图动起来，我们需要对 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性进行动画化处理。我样可以使用像下面这样使用 ",(0,c.jsx)(n.code,{children:"<animate>"})," 对 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性进行动画化处理："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB" x="-20%" y="-20%" width="140%" height="140%">\n            <feTurbulence id="feturbulence" type="fractalNoise" baseFrequency="0.001 .01" numOctaves="2" result="TURBULENCE__10">\n                <animate attributeName="baseFrequency" from="0.0015 0.0016" to="0.015 0.016" dur="8s" repeatCount="indefinite" />\n            </feTurbulence>\n            <feDisplacementMap in="SourceGraphic" in2="TURBULENCE__10" result="TURBULENCE__20" xChannelSelector="G" yChannelSelector="B" scale="20" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["也可以使用 JavaScript 脚本动态调整 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性的值："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-JavaScript",children:'const turbulenceElement = document.querySelector("feTurbulence");\nvar startTime = null;\n\nconst animate = (time) => {\n    if (!startTime) startTime = time;\n    var progress = (time - startTime) / 8000;\n    var bfX = (progress % 2) * 0.005 + 0.015;\n    var bfY = (progress % 2) * 0.05 + 0.01;\n    var bfStr = bfX.toString() + " " + bfY.toString();\n    turbulenceElement.setAttribute("baseFrequency", bfStr);\n\n    requestAnimationFrame(animate);\n};\n\nrequestAnimationFrame(animate);\n'})}),"\n",(0,c.jsx)(n.p,{children:"在我们这个示例中，使用的是 JavaScript 方案。经过脚本处理之后，静态的水就动起来了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbEExx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbEExx"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"是不是很有魔性！"}),"\n",(0,c.jsx)(n.p,{children:"在上面示例的基础上，稍微调整一下，我们就可以获得水中倒影的效果："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/eYaejzw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYaejzw"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"案例三故障效果",children:["案例三：故障效果",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#案例三故障效果",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在之前的课程中，我们介绍了",(0,c.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318262368534578#heading-3",target:"_blank",rel:"noopener noreferrer",children:["如何使用 ",(0,c.jsx)(n.code,{children:"<feFlood>"})," 、",(0,c.jsx)(n.code,{children:"<feMerge>"})," 和 ",(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 等滤镜制作故障效果"]}),"。接下来，我们来看看 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 和 ",(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 滤镜又是如何实现故障效果。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/PovOBxd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PovOBxd"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"上面这个效果对应的滤镜代码很简单："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB">\n            <feTurbulence type="fractalNoise" baseFrequency="0 0.000001" result="TURBULENCE__10" in="SourceGraphic" numOctaves="2"/>\n            <feDisplacementMap in="SourceGraphic" in2="TURBULENCE__10" scale="30" xChannelSelector="R" yChannelSelector="R" result="TURBULENCE__20" />  \n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"与之类似的代码前面已经展示过多次了。这里就不详细介绍了。"}),"\n",(0,c.jsxs)(n.p,{children:["就这个效果而言，我们的目标是使按钮水平扭曲，但又不希望扭曲效果太过戏剧性，因此我们将 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性的值设置为 ",(0,c.jsx)(n.code,{children:"0 0.000001"})," 。在这个状态下，你基本上看不到按钮带有扭曲变形的效果。接下来，我们使用 ",(0,c.jsx)(n.a,{href:"https://gsap.com/",target:"_blank",rel:"noopener noreferrer",children:"GSAP"})," 来动画化 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 属性值到 ",(0,c.jsx)(n.code,{children:"0 0.2"})," ，然后再返回到 ",(0,c.jsx)(n.code,{children:"0 0.000001"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-JavaScript",children:'const turbulenceElement = document.querySelector("feTurbulence");\nvar button = document.querySelector(".button"),\n    turbVal = { val: 0.000001 },\n    buttonTl = new TimelineLite({\n        paused: true,\n        onUpdate: function () {\n            turbulenceElement.setAttribute("baseFrequency", "0 " + turbVal.val);\n        }\n    });\n\nbuttonTl.to(turbVal, 0.2, { val: 0.2 }).to(turbVal, 0.2, { val: 0.000001 });\n\nbutton.addEventListener("click", () => {\n    buttonTl.restart();\n});\n'})}),"\n",(0,c.jsxs)(n.p,{children:["就这样，一个带有故障动画效果的按钮就实现了。如果你对这种交互效果感兴趣的话，还可以看看 ",(0,c.jsx)(n.a,{href:"https://tympanus.net/Development/DistortedButtonEffects/",target:"_blank",rel:"noopener noreferrer",children:"@Adrien Denat 提供的案例"}),"，在这个案例中提供了多种不同的按钮变形动画效果，虽然效果上有所差异，但它们的实现原理与上面这个故障按钮动画效果是相同的。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://tympanus.net/Development/DistortedButtonEffects/",target:"_blank",rel:"noopener noreferrer",children:"https://tympanus.net/Development/DistortedButtonEffects/"})," （",(0,c.jsx)(n.a,{href:"https://github.com/codrops/DistortedButtonEffects/tree/master",target:"_blank",rel:"noopener noreferrer",children:"源码点击这里获取"}),"）"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"就是这样，真的。你可以在这里玩耍实时演示："}),"\n",(0,c.jsxs)(n.p,{children:["之前案例中应用的动画效果，基本上是借助于 JavaScript 脚本动态调整 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 或 ",(0,c.jsx)(n.code,{children:"seed"})," 属性实现的。接下来，这个案例是在 CSS 的 ",(0,c.jsx)(n.code,{children:"@keyframes"})," 中应用多个 SVG 滤镜实现的。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/gOJXdOQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOJXdOQ"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["首先使用 SVG 的 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 和 ",(0,c.jsx)(n.code,{children:"<feDisplacementMap>"})," 滤镜，定义了多个不同的扭曲效果："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="squiggly-0" color-interpolation-filters="linearRGB">\n            <feTurbulence baseFrequency="0.02" numOctaves="3" result="noise" seed="0" in="SourceGraphic" result="TURBULENCE__10"/>\n            <feDisplacementMap in="SourceGraphic" in2="TURBULENCE__10" scale="6" result="TURBULENCE__20"/>\n        </filter>\n        \n        <filter id="squiggly-1" color-interpolation-filters="linearRGB">\n            <feTurbulence baseFrequency="0.02" numOctaves="3" result="noise" seed="1" in="SourceGraphic" result="TURBULENCE__30"/>\n            <feDisplacementMap in="SourceGraphic" in2="TURBULENCE__30" scale="8" result="TURBULENCE__40"/>\n        </filter>\n    \n        <filter id="squiggly-2" color-interpolation-filters="linearRGB">\n            <feTurbulence baseFrequency="0.02" numOctaves="3" result="noise" seed="2" in="SourceGraphic" result="TURBULENCE__50"/>\n            <feDisplacementMap in="SourceGraphic" in2="TURBULENCE__50" scale="6" result="TURBULENCE__60" />\n        </filter>\n        <filter id="squiggly-3" color-interpolation-filters="linearRGB">\n            <feTurbulence baseFrequency="0.02" numOctaves="3" result="noise" seed="3" in="SourceGraphic" result="TURBULENCE__70"/>\n            <feDisplacementMap in="SourceGraphic" in2="TURBULENCE__70" scale="8" result="TURBULENCE__80"/>\n        </filter>\n    \n        <filter id="squiggly-4" color-interpolation-filters="linearRGB">\n            <feTurbulence baseFrequency="0.02" numOctaves="3" result="noise" seed="4" in="SourceGraphic" result="TURBULENCE__90"/>\n            <feDisplacementMap in="SourceGraphic" in2="TURBULENCE__90" scale="6" result="TURBULENCE__100"/>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["你会发现，这四个滤镜的效果差异不是很夸张，如果你愿意，你可以调整 ",(0,c.jsx)(n.code,{children:"baseFrequency"})," 的值，使其变得夸张一些。"]}),"\n",(0,c.jsxs)(n.p,{children:["接下来，我们在 CSS 中使用 ",(0,c.jsx)(n.code,{children:"@keyframes"})," 将这四个滤镜定义为一个帧动画，并应用到文本上："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:'@layer demo {\n    @keyframes squiggly-anim {\n        0% {\n            filter: url("#")\n        }\n        25% {\n            filter: url("#squiggly-1");\n        }\n        50% {\n            filter: url("#squiggly-2");\n        }\n        75% {\n            filter: url("#squiggly-3");\n        }\n        100% {\n            filter: url("#squiggly-4");\n        }\n    }\n\n    h3 {\n        animation: squiggly-anim 0.34s linear infinite;\n    }\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:"这样就实现了最终的效果："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/gOJXdOQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOJXdOQ"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"小结",children:["小结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"哇，终于完成了！"}),"\n",(0,c.jsxs)(n.p,{children:["我们不仅看到了许多精美的图案，还体验了一些有趣且吸引人的动画效果。最重要的是，我们学到了很多关于 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的知识，包括它的各种参数和如何以有趣的方式操控它们。"]}),"\n",(0,c.jsxs)(n.p,{children:["我坚信 ",(0,c.jsx)(n.code,{children:"<feTurbulence>"})," 是一种你会想要反复试验的滤镜。通过研究和拆解别人的代码，你可以更深入地了解它。我自己经常猜测纹理会是什么样子。因为当我们与其他滤镜结合使用时，仅靠一个纹理就可以制作出很多效果，几乎有无限种可能性。我强烈建议你看看别人的作品，并通过拆解来学习更多内容。"]}),"\n",(0,c.jsx)(n.p,{children:"最后，我希望这节课能激发你的灵感，打开你的想象之门，看看你可以用 SVG 滤镜做出什么样的创意作品。"})]})}function I(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(H,{...e})}):H(e)}let $=I;I.__RSPRESS_PAGE_META={},I.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F40-%E9%AB%98%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E6%BB%A4%E9%95%9C%E7%9A%84%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%88%9B%E9%80%A0%E7%BA%B9%E7%90%86.md"]={toc:[{text:"`<feTurbulence>` 滤镜简介",id:"feturbulence-滤镜简介",depth:2},{text:"`<feTurbulence>` 滤镜的属性和功能",id:"feturbulence-滤镜的属性和功能",depth:2},{text:"基础频率：baseFrequency",id:"基础频率basefrequency",depth:3},{text:"噪声类型：type",id:"噪声类型type",depth:3},{text:"层级数量：numOctaves",id:"层级数量numoctaves",depth:3},{text:"种子：seed",id:"种子seed",depth:3},{text:"平铺：stitchTiles",id:"平铺stitchtiles",depth:3},{text:"案例一：制作精美图案",id:"案例一制作精美图案",depth:2},{text:"星空图案",id:"星空图案",depth:3},{text:"木纹图案",id:"木纹图案",depth:3},{text:"迷彩服图案",id:"迷彩服图案",depth:3},{text:"大理石图案",id:"大理石图案",depth:3},{text:"纸张图案",id:"纸张图案",depth:3},{text:"案例二：制作水波纹",id:"案例二制作水波纹",depth:2},{text:"案例三：故障效果",id:"案例三故障效果",depth:2},{text:"小结",id:"小结",depth:2}],title:"40-高级篇：SVG 滤镜的进阶之创造纹理",headingTitle:"40-高级篇：SVG 滤镜的进阶之创造纹理",frontmatter:{}}}}]);