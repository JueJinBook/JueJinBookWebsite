"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["43953"],{255181:function(e,n,s){e.exports=s.p+"static/image/6002649e0928cd38534a51ac9f6cb0ab.db79eba1.webp"},466290:function(e,n,s){e.exports=s.p+"static/image/e48918fff1784c1b08032e901f670d25.86326746.webp"},919493:function(e,n,s){s.r(n),s.d(n,{default:()=>K});var r=s(552676),t=s(740453),a=s(255181),i=s(466290);let c=s.p+"static/image/493c65c86c64e1eed8687984b7b69f54.97145755.webp",d=s.p+"static/image/0eb973a118149afc7ab6828dbc1f9f54.88a5de39.webp",p=s.p+"static/image/f12b863241488968322ae06a00374b2b.781d1211.webp",l=s.p+"static/image/344ba62ac68f9d43207263da707b6215.5db11e3d.webp",o=s.p+"static/image/2f0a0ca99883823ae3c3747a0d29ef5c.e847564c.webp",j=s.p+"static/image/62be3a4ca16bb1b9e57290dab1f04cbb.a8bbedbd.webp",h=s.p+"static/image/8fd84d7dd1b7eec0934dc13944187381.cdd7572c.webp",x=s.p+"static/image/cbfec11caa8c7f5cd56df1e857be844e.3c88a7c2.webp",m=s.p+"static/image/25ff432871c524365bd55345e63b6910.5449f858.webp",g=s.p+"static/image/a4424f01ce58106459c78cf1a7fa661a.db79eba1.webp",u=s.p+"static/image/d8a1e69cb085d2df9400f4d4ccd1b2c2.338bf7c5.webp",b=s.p+"static/image/ee31d4f9d71450ad63d1d9a50a4a2f45.3687686a.webp",f=s.p+"static/image/c9fa1ce260c373dfb88295a55a4d774e.5449f858.webp",w=s.p+"static/image/ccfa251842caf63c97c86687bf13dcd4.7f417765.webp",y=s.p+"static/image/36f365f8b8d9b00da9091d32e4d232a3.7287efe8.webp",v=s.p+"static/image/27b704e27af08c827bfde17b8e571f47.727291df.webp",U=s.p+"static/image/dd6125fdee0e3d3188171c2add1fa268.d6e0d5ab.webp",E=s.p+"static/image/ea64bee3a6ffef8ac0cc24c24c9fa137.fe7ac218.webp",C=s.p+"static/image/3b8254e5e9456709470f65b769e7ddea.bd108a03.webp",R=s.p+"static/image/7ae3513dc1eef8106d3b97a409931dce.08095bc2.webp",S=s.p+"static/image/fee749b4d9c47ffff300dd0f206a5562.c111b1f2.webp",A=s.p+"static/image/b9008129bdd087de3c3b81b68b72c6d8.2408809c.webp",T=s.p+"static/image/04cb0ff8b041019ed5e45aad6ddb0209.512385b4.webp",D=s.p+"static/image/7c583aaf3913c4c2efc89458fd3f41b4.27ff361e.webp",k=s.p+"static/image/32c610c3ad21ef62de45d49bb0837c0b.c5c6e1a0.webp",M=s.p+"static/image/2806b1c8dd94678adb8b58c503626ad3.56bba7d1.webp",N=s.p+"static/image/f20f8c2d53c4a991eb1f60855b836f6f.e99a4ed5.webp",P=s.p+"static/image/5783ef78be8444c664dfae83b0737e59.7d75adab.webp",_=s.p+"static/image/eddfc292773d85396bae66de860580cb.3b930b15.webp",G=s.p+"static/image/6c5018dcd6a5c2f55957ae9008465955.fa917b96.webp",L=s.p+"static/image/b4c403b87c185c9e52c2669d0d209b01.aee3e58f.webp",q=s.p+"static/image/df0aea7cf81a1907795e9e88c3c544b6.7bc24de9.webp",B=s.p+"static/image/4cbac1da6b27df1e310cd275bcf0a92f.0c02842f.webp",I=s.p+"static/image/d72f2716142085a7805ebdeee9c9e8bd.a823431b.webp",O=s.p+"static/image/fe8c9b1f7a1bc895beae7f8d721acda9.30887d5a.webp",H=s.p+"static/image/db88105cb982dc5ed1556a85d21f36ff.ea2ca5e1.webp",z=s.p+"static/image/c74d65f9b0e1240c2bde3c296fc6ab97.7877efc2.webp",J=s.p+"static/image/c42e2d82a884cd5123c05aff538b9161.d6a1d8e4.webp",V=s.p+"static/image/25be0b73106abb52a8a275433626a227.f6406bb3.webp",F=s.p+"static/image/17852f13c49e1cf11767c2d354d165f9.e3df6e6c.webp",Q=s.p+"static/image/08f3c12d5206c4f41a2019294dc0b19e.4d4c8a1b.webp";function W(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",ul:"ul",li:"li",h2:"h2"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"68-mysql--typeorm--jwt-实现登录注册",children:["68. MySQL + TypeORM + JWT 实现登录注册",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#68-mysql--typeorm--jwt-实现登录注册",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"学完了 mysql、typeorm、jwt/session 之后，我们来做个综合案例：登录注册。"}),"\n",(0,r.jsx)(n.p,{children:"首先，创建个新的 database："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE SCHEMA login_test DEFAULT CHARACTER SET utf8mb4;\n"})}),"\n",(0,r.jsx)(n.p,{children:"create schema 或者 create database 都可以，一个意思。"}),"\n",(0,r.jsx)(n.p,{children:"指定默认字符集 ，这样创建表的时候就不用指定字符集了。"}),"\n",(0,r.jsx)(n.p,{children:"utf8 最多存 3 个字节的字符，而 utf8mb4 最多 4 个字符，可以存储一些 emoji 等特殊字符。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Q,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"刷新后就可以看到这个数据库了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后我们创建个 nest 项目："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest new login-and-register -p npm\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:V,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"安装 typeorm 相关的包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save @nestjs/typeorm typeorm mysql2\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后在 AppModule 里引入 TypeOrmModule，传入 option："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [ \n    TypeOrmModule.forRoot({\n      type: \"mysql\",\n      host: \"localhost\",\n      port: 3306,\n      username: \"root\",\n      password: \"guang\",\n      database: \"login_test\",\n      synchronize: true,\n      logging: true,\n      entities: [],\n      poolSize: 10,\n      connectorPackage: 'mysql2',\n      extra: {\n          authPlugin: 'sha256_password',\n      }\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"之后创建个 user 的 CRUD 模块："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g resource user\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:J,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"引入 User 的 entity："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:z,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后给 User 添加一些属性："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class User {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        length: 50,\n        comment: '用户名'\n    })\n    username: string;\n\n    @Column({\n        length:50,\n        comment: '密码'\n    })\n    password: string;\n\n    @CreateDateColumn({\n        comment: '创建时间'\n    })\n    createTime: Date;\n\n    @UpdateDateColumn({\n        comment: '更新时间'\n    })\n    updateTime: Date;\n\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"id 列是主键、自动递增。"}),"\n",(0,r.jsx)(n.p,{children:"username 和 password 是用户名和密码，类型是 VARCHAR(50)。"}),"\n",(0,r.jsx)(n.p,{children:"createTime 是创建时间，updateTime 是更新时间。"}),"\n",(0,r.jsx)(n.p,{children:"这里的 @CreateDateColumn 和 @UpdateDateColumn 都是 datetime 类型。"}),"\n",(0,r.jsx)(n.p,{children:"@CreateDateColumn 会在第一次保存的时候设置一个时间戳，之后一直不变。"}),"\n",(0,r.jsx)(n.p,{children:"而 @UpdateDateColumn 则是每次更新都会修改这个时间戳。"}),"\n",(0,r.jsx)(n.p,{children:"用来保存创建时间和更新时间很方便。"}),"\n",(0,r.jsx)(n.p,{children:"然后我们跑一下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsx)(n.p,{children:"npm run start:dev 就是 nest start --watch："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:H,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到打印了 create table 的建表 sql："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"用 mysql workbench 可以看到生成的表是对的："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:I,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后我们在 UserModule 引入 TypeOrm.forFeature 动态模块，传入 User 的 entity。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样模块内就可以注入 User 对应的 Repository 了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:q,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后就可以实现 User 的增删改查。"}),"\n",(0,r.jsx)(n.p,{children:"我们在 UserController 里添加两个 handler："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UserService } from './user.service';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('login')\n  login() {\n\n  }\n\n  @Post('register')\n  register() {\n\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"其余的 handler 用不到，都可以去掉。"}),"\n",(0,r.jsx)(n.p,{children:"然后添加两个 dto："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export class LoginDto {\n    username: string;\n    password: string;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export class RegisterDto {\n    username: string;\n    password: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 handler 里使用这两个 dto 来接收参数："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:G,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们先在 postman 里测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"post 请求 /user/login 接口，body 传入用户信息。"}),"\n",(0,r.jsx)(n.p,{children:"服务端打印了收到的 user："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后 post 请求 /user/register："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"也是一样的。"}),"\n",(0,r.jsx)(n.p,{children:"虽然都是 user，但是 login 和 register 的处理不同："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"register 是把用户信息存到数据库里"}),"\n",(0,r.jsx)(n.li,{children:"login 是根据 username 和 password 取匹配是否有这个 user"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"先实现注册："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Post('register')\nasync register(@Body() user: RegisterDto) {\n    return await this.userService.register(user);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 UserSerice 里实现 register 方法："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { RegisterDto } from './dto/register.dto';\nimport { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport * as crypto from 'crypto';\n\nfunction md5(str) {\n  const hash = crypto.createHash('md5');\n  hash.update(str);\n  return hash.digest('hex');\n}\n\n@Injectable()\nexport class UserService {\n\n  private logger = new Logger();\n\n  @InjectRepository(User)\n  private userRepository: Repository<User>;\n\n\n  async register(user: RegisterDto) {\n    const foundUser = await this.userRepository.findOneBy({\n      username: user.username\n    });\n\n    if(foundUser) {\n      throw new HttpException('用户已存在', 200);\n    }\n\n    const newUser = new User();\n    newUser.username = user.username;\n    newUser.password = md5(user.password);\n\n    try {\n      await this.userRepository.save(newUser);\n      return '注册成功';\n    } catch(e) {\n      this.logger.error(e, UserService);\n      return '注册失败';\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"先根据 username 查找下，如果找到了，说明用户已存在，抛一个 HttpException 让 exception filter 处理。"}),"\n",(0,r.jsx)(n.p,{children:"否则，创建 User 对象，调用 userRepository 的 save 方法保存。"}),"\n",(0,r.jsx)(n.p,{children:"password 需要加密，这里使用 node 内置的 crypto 包来实现。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"服务返回了注册成功，并且打印了 insert 的 sql："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，数据库 user 表插入了这个用户的信息，并且指定了 createTime 和 udpateTime。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后我们再次调用："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"会提示用户已经存在。"}),"\n",(0,r.jsx)(n.p,{children:"这就是注册。"}),"\n",(0,r.jsx)(n.p,{children:"然后再实现下登录："}),"\n",(0,r.jsx)(n.p,{children:"添加一个 handler："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Post('login')\nasync login(@Body() user: LoginDto) {\n    const foundUser = await this.userService.login(user);\n\n    if(foundUser) {\n      return 'login success';\n    } else {\n      return 'login fail';\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后再添加对应的 service："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"async login(user: LoginDto) {\n    const foundUser = await this.userRepository.findOneBy({\n      username: user.username,\n    });\n\n    if(!foundUser) {\n      throw new HttpException('用户名不存在', 200);\n    }\n    if(foundUser.password !== md5(user.password)) {\n      throw new HttpException('密码错误', 200);\n    }\n    return foundUser;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"根据用户名查找用户，没找到就抛出用户不存在的 HttpException、找到但是密码不对就抛出密码错误的 HttpException。"}),"\n",(0,r.jsx)(n.p,{children:"否则，返回找到的用户。"}),"\n",(0,r.jsx)(n.p,{children:"我们试一下："}),"\n",(0,r.jsx)(n.p,{children:"用户名、密码正确："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["用户名不存在：\n",(0,r.jsx)("img",{src:R,alt:""})]}),"\n",(0,r.jsx)(n.p,{children:"用户名存在但密码错误："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，服务端打印了 3 条 select 的 sql："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"登录成功之后我们要把用户信息放在 jwt 或者 session 中一份，这样后面再请求就知道已经登录了。"}),"\n",(0,r.jsx)(n.p,{children:"安装 @nestjs/jwt 的包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install @nestjs/jwt\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 AppModule 里引入 JwtModule："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:U,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"global:true 声明为全局模块，这样就不用每个模块都引入它了，指定加密密钥，token 过期时间。"}),"\n",(0,r.jsx)(n.p,{children:"在 UserController 里注入 JwtService："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后在登录成功后，把 user 信息放到 jwt 通过 header 里返回。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Post('login')\nasync login(@Body() user: LoginDto,  @Res({passthrough: true}) res: Response) {\n    const foundUser = await this.userService.login(user);\n\n    if(foundUser) {\n      const token = await this.jwtService.signAsync({\n        user: {\n          id: foundUser.id,\n          username: foundUser.username\n        }\n      })\n      res.setHeader('token', token);\n      return 'login success';\n    } else {\n      return 'login fail';\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"再次访问："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"登录成功之后返回了 jwt 的 token。"}),"\n",(0,r.jsx)(n.p,{children:"我们有一些接口是只有登录才能访问的。"}),"\n",(0,r.jsx)(n.p,{children:"我们在 AppController 里添加两个路由："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Get('aaa')\naaa() {\n    return 'aaa';\n}\n\n@Get('bbb')\nbbb() {\n    return 'bbb';\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"现在不需要登录就可以访问："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们可以加个 Guard 来限制访问："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g guard login --no-spec --flat\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后实现 jwt 校验的逻辑："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { JwtService } from '@nestjs/jwt';\nimport { CanActivate, ExecutionContext, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class LoginGuard implements CanActivate {\n  @Inject(JwtService)\n  private jwtService: JwtService;\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const request: Request = context.switchToHttp().getRequest();\n\n    const authorization = request.header('authorization') || '';\n\n    const bearer = authorization.split(' ');\n    \n    if(!bearer || bearer.length < 2) {\n      throw new UnauthorizedException('登录 token 错误');\n    }\n\n    const token = bearer[1];\n\n    try {\n      const info = this.jwtService.verify(token);\n      (request as any).user = info.user;\n      return true;\n    } catch(e) {\n      throw new UnauthorizedException('登录 token 失效，请重新登录');\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"取出 authorization 的 header，验证 token 是否有效，token 有效返回 true，无效的话就返回 UnauthorizedException。"}),"\n",(0,r.jsx)(n.p,{children:"把这个 Guard 应用到 handler："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Get('aaa')\n@UseGuards(LoginGuard)\naaa() {\n    return 'aaa';\n}\n\n@Get('bbb')\n@UseGuards(LoginGuard)\nbbb() {\n    return 'bbb';\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们先登录一下，拿到 token："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后请求 /aaa 的时候通过 authorization 的 header 带上 token："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"访问成功。"}),"\n",(0,r.jsx)(n.p,{children:"如果不带 token，就失败了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样我们就实现了登录注册的流程。"}),"\n",(0,r.jsx)(n.p,{children:"但是，现在我们并没有对参数做校验，这个用 ValidationPipe + class-validator 来做。"}),"\n",(0,r.jsx)(n.p,{children:"安装 class-validator 和 class-transformer 的包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install class-validator class-transformer\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后给 /user/login 和 /user/register 接口添加 ValidationPipe："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 dto 里声明参数的约束："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { IsNotEmpty, IsString, Length, Matches } from \"class-validator\";\n\nexport class RegisterDto {\n    @IsString()\n    @IsNotEmpty()\n    @Length(6, 30)\n    @Matches(/^[a-zA-Z0-9#$%_-]+$/, {\n        message: '用户名只能是字母、数字或者 #、$、%、_、- 这些字符'\n    })\n    username: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @Length(6, 30)\n    password: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"注册的时候，用户名密码不能为空，长度为 6-30，并且限定了不能是特殊字符。"}),"\n",(0,r.jsx)(n.p,{children:"登录就不用限制了，只要不为空就行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { IsNotEmpty } from "class-validator";\n\nexport class LoginDto{\n    @IsNotEmpty()\n    username: string;\n\n    @IsNotEmpty()\n    password: string;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"我们测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"ValidationPipe 生效了。"}),"\n",(0,r.jsx)(n.p,{children:"这样，我们就实现了登录、注册和鉴权的完整功能。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["案例代码在",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/login-and-register",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这节我们通过 mysql + typeorm + jwt + ValidationPipe 实现了登录注册的功能。"}),"\n",(0,r.jsx)(n.p,{children:"typeorm 通过 @PrimaryGeneratedKey、@Column、@CreateDateColumn、@UpdateDateColumn 声明和数据库表的映射。"}),"\n",(0,r.jsx)(n.p,{children:"通过 TypeOrmModule.forRoot、TypeOrmModule.forFeature 的动态模块添加数据源，拿到 User 的 Repository。"}),"\n",(0,r.jsx)(n.p,{children:"然后用 Repository 来做增删改查，实现注册和登录的功能。"}),"\n",(0,r.jsx)(n.p,{children:"登录之后，把用户信息通过 jwt 的方式放在 authorization 的 header 里返回。"}),"\n",(0,r.jsx)(n.p,{children:"然后 LoginGuard 里面取出 header 来做验证，token 正确的话才放行。"}),"\n",(0,r.jsx)(n.p,{children:"此外，参数的校验使用 ValidationPipe + class-validator 来实现。"}),"\n",(0,r.jsx)(n.p,{children:"这样，就实现了注册和基于 JWT 的登录功能。"})]})}function $(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(W,{...e})}):W(e)}let K=$;$.__RSPRESS_PAGE_META={},$.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F68.%20MySQL%20%2B%20TypeORM%20%2B%20JWT%20%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"68. MySQL + TypeORM + JWT 实现登录注册",headingTitle:"68. MySQL + TypeORM + JWT 实现登录注册",frontmatter:{}}}}]);