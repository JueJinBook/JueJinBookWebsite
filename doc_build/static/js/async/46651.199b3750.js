"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["46651"],{370196:function(e,n,r){r.r(n),r.d(n,{default:()=>b});var t=r(552676),s=r(740453);let i=r.p+"static/image/457526faf8e1d2ba33f82acdf2f57b1b.0be493f6.png",a=r.p+"static/image/44148f7095f34c4fb337863b0992f9d7.dcf9f092.png",c=r.p+"static/image/2444fe88e21cea81a663d2ab20ef9231.82ddfef8.png",o=r.p+"static/image/4ff73b451f1d8eb1e4266a7da343c6f8.8e870edf.png",l=r.p+"static/image/221e59d7241d1de4f59b82cf38d91b0e.7520a822.png",d=r.p+"static/image/1a4c99978c16c3d6ddcd04c41c4d6b00.947656bf.png",p=r.p+"static/image/62ae89c7beead8a89f95d41d1da2a8e5.838d8876.png",h=r.p+"static/image/1ffec31921539cc173a6e8a6dc5286aa.311bac35.png",m=r.p+"static/image/2989fd5708e378c99464521afb2f76da.035ce2b0.png",f=r.p+"static/image/b6bcda143109db087bdd20c066fef614.2850472b.png",x=r.p+"static/image/3f4b353f5ca65ee2048c888ab63a4f82.ebc9c8c6.png",u=r.p+"static/image/04882b29d3f69e4bdcee5d75b37a7d7e.384fb32a.png";function g(e){let n=Object.assign({h1:"h1",a:"a",p:"p",blockquote:"blockquote",h2:"h2",img:"img",ul:"ul",li:"li",code:"code",h3:"h3",pre:"pre"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"16原理解析性能优化",children:["16.原理解析：性能优化",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#16原理解析性能优化",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"前端应用进行性能优化的方式有很多，例如浏览器为了提升应用的加载性能，不断开放了 Resource Hints（DNS Prefetch、Preconnect、Prefetch、Prerender）、Early Hints 等功能。在应用缓存方面可以做到多级缓存设计，包括 Service Worker & Cache、HTTP 缓存、 HTTP2 / Push 缓存、CDN 缓存和代理缓存等。除此之外，还可以从工程化和应用逻辑层面出发进行优化，包括加载资源优化（公共代码切割 Split Chunks、共享远程依赖库 Module Federation）、预加载和预渲染等。本课程接下来将简单演示部分优化技术在微前端场景中的使用。"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"温馨提示：本课程不会讲解 Web 前端性能优化相关的指标（例如 FCP、TTI）和性能检测工具（例如 Lighthouse、Chrome DevTools），感兴趣的同学需要自行了解。"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"http-缓存",children:["HTTP 缓存",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#http-缓存",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"不管是主应用还是微应用，我们都需要对资源进行缓存处理。浏览器支持的缓存能力如下所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Expires"})," & ",(0,t.jsx)(n.code,{children:"Cache-Control"}),"：HTTP 请求后的资源会缓存在浏览器本地，再次加载资源时，如果资源没有过期，直接使用本地缓存，不会向服务器发送请求"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Last-Modified"})," & ",(0,t.jsx)(n.code,{children:"Etag"}),"：如果本地缓存的资源过期，浏览器会重新请求服务端，服务器会对资源的缓存有效性进行校验，如果缓存有效，则响应 304 告诉浏览器继续使用本地缓存，否则会响应 200 并返回新的资源"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：",(0,t.jsx)(n.code,{children:"Expires"})," & ",(0,t.jsx)(n.code,{children:"Cache-Control"})," 在大部分的科普文章中被称为强缓存，",(0,t.jsx)(n.code,{children:"Last-Modified"})," & ",(0,t.jsx)(n.code,{children:"Etag"}),"被称为协商缓存，但是在 HTTP 1.1 协议中没有发现类似的概述，大家可以自行查阅和理解。"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"expires--cache-control",children:[(0,t.jsx)(n.code,{children:"Expires"})," & ",(0,t.jsx)(n.code,{children:"Cache-Control"}),(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#expires--cache-control",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["本地缓存可以分为 HTTP / 1.0 的 ",(0,t.jsx)(n.code,{children:"Expires"})," 和 HTTP / 1.1 的 ",(0,t.jsx)(n.code,{children:"Cache-Control"}),"，其中 ",(0,t.jsx)(n.code,{children:'"Expires" ":" HTTP-date'})," 指定了响应过期的绝对时间，其计算规则如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c++",children:"// https://httpwg.org/specs/rfc7234.html#calculating.freshness.lifetime\n// 缓存的新鲜度期限，从响应发送日期开始的时间差\n// 响应头的 Expires 绝对时间 - 响应头 Date 的绝对时间\n// 注意此种计算方式不会受到时钟偏差的影响，因为所有信息都来自于源服务器\nfreshness_lifetime = expires - date;\n\n// https://httpwg.org/specs/rfc7234.html#age.calculations\n// 从缓存中获取响应后到现在的时间差（计算过程比较复杂）\napparent_age = max(0, response_time - date_value);\nresponse_delay = response_time - request_time;\ncorrected_age_value = age_value + response_delay;  \ncorrected_initial_age = max(apparent_age, corrected_age_value);\nresident_time = now - response_time;\ncurrent_age = corrected_initial_age + resident_time;\n\n// 响应是否刷新\nresponse_is_fresh = (freshness_lifetime > current_age)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["我们可以简单看一个示例，该示例中 ",(0,t.jsx)(n.code,{children:"freshness_lifetime"})," 设置为 5s，页面加载完成后第一次刷新直接响应 200 返回服务器资源，再次刷新由于超过 5s，也是从服务器响应 200 返回资源，紧接着立即刷新会从浏览器缓存中获取数据："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：示例源码可以从 micro-framework 的 ",(0,t.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/http-cache-expires",target:"_blank",rel:"noopener noreferrer",children:"demo/http-cache-expires"})," 分支获取。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["实现上述功能需要在服务代码中设置 ",(0,t.jsx)(n.code,{children:"Expires"})," 响应头，如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// micro-server.js\nimport express from "express";\nimport morgan from "morgan";\nimport path from "path";\nimport config from "./config.js";\nconst app = express();\nconst { port, host } = config;\n\n// 打印请求日志\napp.use(morgan("dev"));\n\napp.use(\n  express.static(path.join("public", "micro"), {\n    // 禁用 cache-control，HTTP / 1.1 的缓存能力\n    cacheControl: false,\n    etag: false,\n    lastModified: false,\n    setHeaders: (res) => {\n      // 5 秒后缓存失效，注意使用 GMT 格式时间\n      res.set("Expires", new Date(Date.now() + 5 * 1000).toGMTString());\n    },\n  })\n);\n\n// 启动 Node 服务\napp.listen(port.micro, host);\nconsole.log(`server start at http://${host}:${port.micro}/`);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["由于 Expires 使用了服务器的绝对时间，结合 HTTP / 1.1 协议标准和 ",(0,t.jsx)(n.a,{href:"https://github.com/chromium/chromium/blob/main/net/http/http_response_headers.cc",target:"_blank",rel:"noopener noreferrer",children:"Chromium 的源码实现"}),"，我们会发现："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c++",children:'// From RFC 2616 section 13.2.4:\n//\n// The max-age directive takes priority over Expires, so if max-age is present\n// in a response, the calculation is simply:\n//\n//   freshness_lifetime = max_age_value\n//\n// Otherwise, if Expires is present in the response, the calculation is:\n//\n//   freshness_lifetime = expires_value - date_value\n//\n// Note that neither of these calculations is vulnerable to clock skew, since\n// all of the information comes from the origin server.\n//\n// Also, if the response does have a Last-Modified time, the heuristic\n// expiration value SHOULD be no more than some fraction of the interval since\n// that time. A typical setting of this fraction might be 10%:\n//\n//   freshness_lifetime = (date_value - last_modified_value) * 0.10\n//\n// If the stale-while-revalidate directive is present, then it is used to set\n// the |staleness| time, unless it overridden by another directive.\n//\nHttpResponseHeaders::FreshnessLifetimes\nHttpResponseHeaders::GetFreshnessLifetimes(const Time& response_time) const {\n  FreshnessLifetimes lifetimes;\n  // Check for headers that force a response to never be fresh.  For backwards\n  // compat, we treat "Pragma: no-cache" as a synonym for "Cache-Control:\n  // no-cache" even though RFC 2616 does not specify it.\n  if (HasHeaderValue("cache-control", "no-cache") ||\n      HasHeaderValue("cache-control", "no-store") ||\n      HasHeaderValue("pragma", "no-cache")) {\n    return lifetimes;\n  }\n\n  // Cache-Control directive must_revalidate overrides stale-while-revalidate.\n  bool must_revalidate = HasHeaderValue("cache-control", "must-revalidate");\n\n  if (must_revalidate || !GetStaleWhileRevalidateValue(&lifetimes.staleness)) {\n    DCHECK_EQ(base::TimeDelta(), lifetimes.staleness);\n  }\n\n  // NOTE: "Cache-Control: max-age" overrides Expires, so we only check the\n  // Expires header after checking for max-age in GetFreshnessLifetimes.  This\n  // is important since "Expires: <date in the past>" means not fresh, but\n  // it should not trump a max-age value.\n  if (GetMaxAgeValue(&lifetimes.freshness))\n    return lifetimes;\n\n  // If there is no Date header, then assume that the server response was\n  // generated at the time when we received the response.\n  Time date_value;\n  // 如果没有收到响应头 Date，那么假设服务器响应的时间是我们接收到响应时浏览器产生的绝对时间\n  if (!GetDateValue(&date_value))\n    date_value = response_time;\n\n  Time expires_value;\n  if (GetExpiresValue(&expires_value)) {\n    // The expires value can be a date in the past!\n    if (expires_value > date_value) {\n      lifetimes.freshness = expires_value - date_value;\n      return lifetimes;\n    }\n\n    DCHECK_EQ(base::TimeDelta(), lifetimes.freshness);\n    return lifetimes;\n  }\n  \n  // 剩余代码未展示\n}\n\nbool HttpResponseHeaders::GetDateValue(Time* result) const {\n  return GetTimeValuedHeader("Date", result);\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["如果服务器没有返回响应头 ",(0,t.jsx)(n.code,{children:"Date"}),"，那么 ",(0,t.jsx)(n.code,{children:"date_value"})," 使用的是客户端产生的绝对时间，此时因为 Expires 使用服务器产生的绝对时间，如果两者的时钟本身存在偏差，那么会产生缓存计算偏差，从而可能导致缓存失效。为了解决两者时钟不一致的问题，HTTP / 1.1 使用 ",(0,t.jsx)(n.code,{children:"Cache-Control"})," 进行缓存，并且设置的不再是绝对时间："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c++",children:"// 缓存的新鲜度期限（注意这里如果是 s-maxage，则 s-maxage 优先，s-maxage 只对共享缓存生效）\n// 感兴趣的同学可以了解一下共享缓存和私有缓存的区别\nfreshness_lifetime = maxAge\n"})}),"\n",(0,t.jsxs)(n.p,{children:["我们可以看个示例，该示例中设置了 20s（",(0,t.jsx)(n.code,{children:"max-age = 20000"})," ）的缓存时间，并且保留了原有的 ",(0,t.jsx)(n.code,{children:"Expires"}),"，可以发现原有 5s 的缓存时间失效，因此 ",(0,t.jsx)(n.code,{children:"Cache-Control"})," 设置的 ",(0,t.jsx)(n.code,{children:"max-age"})," 优先级高于 ",(0,t.jsx)(n.code,{children:"Expires"}),"："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：示例源码可以从 micro-framework 的 ",(0,t.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/http-max-age",target:"_blank",rel:"noopener noreferrer",children:"demo/http-max-age"})," 分支获取。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["实现上述功能需要在服务代码中设置 ",(0,t.jsx)(n.code,{children:"max-age"})," 缓存，如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// micro-server.js\nimport express from "express";\nimport morgan from "morgan";\nimport path from "path";\nimport config from "./config.js";\nconst app = express();\nconst { port, host } = config;\n\n// 打印请求日志\napp.use(morgan("dev"));\n\napp.use(\n  express.static(path.join("public", "micro"), {\n    // 默认为 true\n    // 使用 cache-control，HTTP / 1.1 的缓存能力\n    cacheControl: true,\n    // 内部会封装成 Cache-Control 响应头的形式进行响应\n    // 单位是 ms，这里设置 20s\n    maxAge: 20000,\n    etag: false,\n    lastModified: false,\n    setHeaders: (res) => {\n      // 5 秒后缓存失效，注意使用 GMT 格式时间\n      res.set("Expires", new Date(Date.now() + 5 * 1000).toGMTString());\n    },\n  })\n);\n\n// 启动 Node 服务\napp.listen(port.micro, host);\nconsole.log(`server start at http://${host}:${port.micro}/`);\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"温馨提示：Cache-Control: no-cache 和 Cache-Control: no-store 有什么区别？"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["尽管 ",(0,t.jsx)(n.code,{children:"Expires"})," 和 ",(0,t.jsx)(n.code,{children:"Cache-Control"})," 可以控制本地缓存的失效时间，但是如果服务端的资源没有任何变化，此时浏览器缓存失效仍然会重新请求资源。那么能否有一种方式，就算是浏览器本地缓存失效，如果服务端资源没有任何变化，我们可以延长本地缓存的有效期。为了实现该功能，HTTP 请求可以通过 ",(0,t.jsx)(n.code,{children:"Last-Modified"})," 和 ",(0,t.jsx)(n.code,{children:"Etag"})," 来校验服务器资源是否发生了变更，如果资源没有变化，那么可以返回 304 （不需要携带资源）告诉浏览器继续使用本地缓存。"]}),"\n",(0,t.jsxs)(n.h3,{id:"last-modified--etag",children:[(0,t.jsx)(n.code,{children:"Last-Modified"})," & ",(0,t.jsx)(n.code,{children:"Etag"}),(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#last-modified--etag",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Last-Modified"})," 的示例如下所示，在这个示例中我们使用了 ",(0,t.jsx)(n.code,{children:"Cache-Control"})," 来设置本地缓存，使用 ",(0,t.jsx)(n.code,{children:"Last-Modified"})," 来设置服务器文件的缓存有效性校验。如果",(0,t.jsx)(n.code,{children:"Cache-Control"})," 设置的本地缓存失效，浏览器会向服务器发送缓存校验的请求，此时浏览器会通过发送请求头 ",(0,t.jsx)(n.code,{children:"If-Modified-Since"})," （第一次获取文件资源时服务器的响应头 ",(0,t.jsx)(n.code,{children:"Last-Modified"})," 值）给服务器进行缓存校验，服务器获取 ",(0,t.jsx)(n.code,{children:"If-Modified-Since"})," 响应头后会再次获取文件的修改时间来比对文件是否发生改变，如果服务器的文件没有改动（或者早于 ",(0,t.jsx)(n.code,{children:"If-Modified-Since"})," 修改时间 ），那么请求会返回 304 告诉浏览器继续使用本地缓存，如果服务器文件发生了改动，那么服务器会返回 200 和新的文件并促使浏览器重新刷新本地的缓存资源。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["实现上述功能需要在服务代码中开启 ",(0,t.jsx)(n.code,{children:"Last-Modified"})," 校验，如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// micro-server.js\nimport express from "express";\nimport morgan from "morgan";\nimport path from "path";\nimport config from "./config.js";\nconst app = express();\nconst { port, host } = config;\n\n// 打印请求日志\napp.use(morgan("dev"));\n\napp.use(\n  express.static(path.join("public", "micro"), {\n    // 使用 cache-control，HTTP / 1.1 的缓存能力\n    cacheControl: true,\n    // 单位是 ms，这里设置 5s\n    maxAge: 5000,\n    etag: false,\n    lastModified: true,\n    setHeaders: (res) => {\n      // 1 秒后缓存失效，注意使用 GMT 格式时间\n      res.set("Expires", new Date(Date.now() + 1 * 1000).toGMTString());\n    },\n  })\n);\n\n// 启动 Node 服务\napp.listen(port.micro, host);\nconsole.log(`server start at http://${host}:${port.micro}/`);\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Last-Modified"})," 服务器校验会存在如下问题："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"缓存校验的时间精度是秒，如果一秒内服务器文件进行了多次刷新，尽管文件内容发生了变化，但是由于文件修改时间不变，导致客户端请求时返回的仍然是 304，当然这也可能是服务器正好想要的效果，不想频繁更新"}),"\n",(0,t.jsx)(n.li,{children:"缓存的文件内容不变，但是修改时间发生了变化，此时会导致服务器返回 200 从而产生不必要的文件刷新"}),"\n",(0,t.jsx)(n.li,{children:"服务器不方便保存文件的修改时间"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["为了应对上述 ",(0,t.jsx)(n.code,{children:"Last-Modified"})," 产生的问题，可以使用 ",(0,t.jsx)(n.code,{children:"Etag"})," 来进行校验。",(0,t.jsx)(n.code,{children:"Etag"})," 可用于代表源服务器文件的唯一性，例如根据源服务器的文件内容生成 Hash 值，当文件不变时 Hash 值不变，当文件内容变化时 Hash 值也会跟着变化，从而可用于校验文件内容是否改变。当浏览器接收到 ",(0,t.jsx)(n.code,{children:"Etag"})," 响应头时，如果缓存文件过期，再次发送请求时会携带 ",(0,t.jsx)(n.code,{children:"If-None-Match"})," （之前响应的 ",(0,t.jsx)(n.code,{children:"Etag"})," 值）请求头向服务器进行验证，服务器会重新计算文件的 ",(0,t.jsx)(n.code,{children:"Etag"})," 值并和 ",(0,t.jsx)(n.code,{children:"If-None-Match"})," 比对，如果比对一致则返回 304 告诉浏览器本地缓存仍然有效。如下所示："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["实现上述功能需要在服务代码中开启 ",(0,t.jsx)(n.code,{children:"Etag"})," 校验，如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// micro-server.js\nimport express from "express";\nimport morgan from "morgan";\nimport path from "path";\nimport config from "./config.js";\nconst app = express();\nconst { port, host } = config;\n\n// 打印请求日志\napp.use(morgan("dev"));\n\napp.use(\n  express.static(path.join("public", "micro"), {\n    cacheControl: true,\n    maxAge: 5000,\n    etag: true,\n    // 如果设置为 true，那么上述示例中访问拷贝的文件是返回 304 还是 200 呢？\n    lastModified: false,\n    setHeaders: (res) => {\n      // 1 秒后缓存失效，注意使用 GMT 格式时间\n      res.set("Expires", new Date(Date.now() + 1 * 1000).toGMTString());\n    },\n  })\n);\n\n// 启动 Node 服务\napp.listen(port.micro, host);\nconsole.log(`server start at http://${host}:${port.micro}/`);\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：",(0,t.jsx)(n.code,{children:"Etag"})," 存在强校验和弱校验，",(0,t.jsx)(n.code,{children:"Last-Modified"})," 属于弱校验。由于在 Express 中 ",(0,t.jsx)(n.code,{children:"Etag"})," 默认开启弱校验，并且在计算时添加了文件的修改时间，因此拷贝文件（修改时间变化但内容不变）时，仍然会刷新缓存。本课程为了帮助大家验证 ",(0,t.jsx)(n.code,{children:"Etag"})," 可以做到访问拷贝文件仍然使用缓存，更改了底层的 ",(0,t.jsx)(n.code,{children:"Etag"})," 计算逻辑。感兴趣的同学可以查看 Express 依赖的 ",(0,t.jsx)(n.code,{children:"etag"})," 和 ",(0,t.jsx)(n.code,{children:"fresh"})," 库，从而了解底层的校验算法。除此之外，如果对 ",(0,t.jsx)(n.code,{children:"Etag"})," 强弱校验感兴趣，可以查看 ",(0,t.jsx)(n.a,{href:"https://httpwg.org/specs/rfc7232.html#weak.and.strong.validators",target:"_blank",rel:"noopener noreferrer",children:"Weak versus Strong"}),"。"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"resource-hints",children:["Resource Hints",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#resource-hints",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Resource Hints 可分为 DNS Prefetch、Preconnect、Prefetch、Prerender，如下所示："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["DNS Prefetch：提前处理需要 DNS 解析的域名，可以很好的解决移动设备 DNS 的高延迟解析问题，主要作用是将域名提前解析成相应的 IP 地址，浏览器的兼容性可以查看 ",(0,t.jsx)(n.a,{href:"https://caniuse.com/?search=dns-prefetch",target:"_blank",rel:"noopener noreferrer",children:"dns-prefetch"}),"；"]}),"\n",(0,t.jsxs)(n.li,{children:["Preconnect：提前为 URL 建立请求连接，包括进行 DNS 解析、TPC 协议三次握手甚至是 SSL / TLS 协议握手，浏览器兼容性可以查看 ",(0,t.jsx)(n.a,{href:"https://caniuse.com/?search=preconnect",target:"_blank",rel:"noopener noreferrer",children:"preconnect"}),"；"]}),"\n",(0,t.jsxs)(n.li,{children:["Prefetch：除了提前为 URL 建立请求连接，还会请求资源并进行缓存处理，浏览器兼容性可以查看 ",(0,t.jsx)(n.a,{href:"https://caniuse.com/?search=prefetch",target:"_blank",rel:"noopener noreferrer",children:"prefetch"}),"；"]}),"\n",(0,t.jsxs)(n.li,{children:["Prerender：除了提前请求并缓存资源，还可以进行应用预渲染，预渲染可以理解为在隐藏的标签页中进行应用的渲染工作，浏览器兼容性可以查看 ",(0,t.jsx)(n.a,{href:"https://caniuse.com/?search=prerender",target:"_blank",rel:"noopener noreferrer",children:"prerender"}),"。"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"温馨提示：需要注意，如果在 SPA 应用中使用微前端，并且应用本身是通过 JS 进行加载，那么无法使用 Prerender。除此之外，感兴趣的同学可以额外了解 Preload 的作用。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"如果应用本身能够准确预测接下来的用户行为，那么使用 Resource Hints 是一个非常不错的选择，因为 Resource Hints 允许浏览器在空闲时进行稍后可能需要进行的动作，从而提升用户的访问性能。当然，如果预测失败，也会带来副作用，例如 Prefetch 额外产生了流量损耗，而 Prerender 更是占用了浏览器的内存以及 CPU，对电池也会产生更多的消耗。"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"温馨提示：举一个相对明显的例子，当用户访问管理后台的登录页时，此时能够预测用户需要登录管理后台首页，因此可以对登录后的首页进行访问性能优化。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"在 SPA 的微前端应用中，可以通过 Prefetch 来提升用户访问应用的性能。以 TO B 类型的管理后台应用为例，应用本身的 PV / UV 体量小，因此使用 Prefetch 不需要过多担心带宽和流量的问题。当然如果需要在意流量问题，但是仍然想做一些访问性能优化，可以先在应用中进行菜单埋点，后期通过收集用户的点击行为进行菜单访问数据分析，从而为高频的菜单应用进行性能优化处理。"}),"\n",(0,t.jsx)(n.p,{children:"Prefetch 的实现示例如下所示，在之前的 HTTP 缓存示例的基础上新增 Prefetch 处理，可以发现刷新的时候默认会请求微应用的资源。当真正点击微应用加载资源时会从 prefetch cache 中直接获取资源，从而不需要从服务端获取资源："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:"prefetch.gif"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：示例源码可以从 micro-framework 的 ",(0,t.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/prefetch",target:"_blank",rel:"noopener noreferrer",children:"demo/prefetch"})," 分支获取。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Prefetch 的功能主要在前端进行设计，如下所示（重点关注注释部分的代码）："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'\x3c!-- public/main/index.html --\x3e\n\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Document</title>\n    <style>\n      h1 {\n        color: red;\n      }\n    </style>\n  </head>\n\n  <body>\n    <h1>Hello，Dynamic Script!</h1>\n    <div id="nav"></div>\n    <div class="container">\n      <div id="micro-app-slot"></div>\n    </div>\n\n    <script type="text/javascript">\n      class UtilsManager {\n        constructor() {}\n\n        getMicroApps() {\n          return window\n            .fetch("/microapps", {\n              method: "post",\n            })\n            .then((res) => res.json())\n            .catch((err) => {\n              console.error(err);\n            });\n        }\n\n        isSupportPrefetch() {\n          const link = document.createElement("link");\n          const relList = link?.relList;\n          return relList && relList.supports && relList.supports("prefetch");\n        }\n\n        // 预请求资源，注意只是请求资源，但是不会解析和执行\n        prefetchStatic(href, as) {\n          // prefetch 浏览器支持检测\n          if (!this.isSupportPrefetch()) {\n            return;\n          }\n          const $link = document.createElement("link");\n          $link.rel = "prefetch";\n          $link.as = as;\n          $link.href = href;\n          document.head.appendChild($link);\n        }\n\n        loadScript({ script, id }) {\n          return new Promise((resolve, reject) => {\n            const $script = document.createElement("script");\n            $script.src = script;\n            $script.setAttribute("micro-script", id);\n            $script.onload = resolve;\n            $script.onerror = reject;\n            document.body.appendChild($script);\n          });\n        }\n\n        loadStyle({ style, id }) {\n          return new Promise((resolve, reject) => {\n            const $style = document.createElement("link");\n            $style.href = style;\n            $style.setAttribute("micro-style", id);\n            $style.rel = "stylesheet";\n            $style.onload = resolve;\n            $style.onerror = reject;\n            document.body.appendChild($style);\n          });\n        }\n\n        removeStyle({ id }) {\n          const $style = document.querySelector(`[micro-style=${id}]`);\n          $style && $style?.parentNode?.removeChild($style);\n        }\n\n        removeScript({id}) {\n          const $script = document.querySelector(`[micro-script=${id}]`);\n          $script && $script?.parentNode?.removeChild($script);\n        }\n\n        hasLoadScript({ id }) {\n          const $script = document.querySelector(`[micro-script=${id}]`);\n          return !!$script;\n        }\n\n        hasLoadStyle({ id }) {\n          const $style = document.querySelector(`[micro-style=${id}]`);\n          return !!$style;\n        }\n      }\n    <\/script>\n\n    <script type="text/javascript">\n      class MicroAppManager extends UtilsManager {\n        micrpApps = [];\n\n        constructor() {\n          super();\n          this.init();\n        }\n\n        init() {\n          this.processMicroApps();\n          this.navClickListener();\n          this.hashChangeListener();\n        }\n\n        processMicroApps() {\n          this.getMicroApps().then((res) => {\n            this.microApps = res;\n            this.prefetchMicroAppStatic();\n            this.createMicroAppNav();\n          });\n        }\n        \n        // 新增 prefetch 处理，浏览器会在空闲时自动请求相应的资源\n        prefetchMicroAppStatic() {\n          const prefetchMicroApps = this.microApps?.filter(\n            (microapp) => microapp.prefetch\n          );\n          prefetchMicroApps?.forEach((microApp) => {\n            microApp.script && this.prefetchStatic(microApp.script, "script");\n            microApp.style && this.prefetchStatic(microApp.style, "style");\n          });\n        }\n\n        createMicroAppNav(microApps) {\n          const fragment = new DocumentFragment();\n          this.microApps?.forEach((microApp) => {\n            const button = document.createElement("button");\n            button.textContent = microApp.name;\n            button.id = microApp.id;\n            fragment.appendChild(button);\n          });\n          nav.appendChild(fragment);\n        }\n\n        navClickListener() {\n          const nav = document.getElementById("nav");\n          nav.addEventListener("click", (e) => {\n            window.location.hash = event?.target?.id;\n          });\n        }\n\n        hashChangeListener() {\n          window.addEventListener("hashchange", () => {\n            this.microApps?.forEach(async (microApp) => {\n              if (microApp.id === window.location.hash.replace("#", "")) {\n                console.time(`fetch microapp ${microApp.name} static`);\n                await this.loadStyle(microApp);\n                await this.loadScript(microApp);\n                console.timeEnd(`fetch microapp ${microApp.name} static`);\n                window?.[microApp.mount]?.("#micro-app-slot");\n              } else {\n                this.removeStyle(microApp);\n                this.removeScript(microApp);\n                window?.[microApp.unmount]?.();\n              }\n            });\n          });\n        }\n      }\n\n      new MicroAppManager();\n    <\/script>\n  </body>\n</html>\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"如果浏览器自身不兼容 Prefetch 的能力或者资源需要通过 Ajax 请求进行手动隔离执行时，我们也可以在浏览器空闲的时候通过 JS 进行资源的 Ajax 预请求处理。"}),"\n",(0,t.jsxs)(n.h2,{id:"应用预渲染",children:["应用预渲染",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#应用预渲染",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在 Resource Hints 中我们演示了 Prefetch 的功能，该功能可以在我们真正想要渲染应用时节省资源的请求时间。同时我们也知道浏览器的 Prerender 功能可以提前进行应用的预渲染，从而节省资源的解析和渲染时间，但是 Prerender 必须传入完整的 HTML 地址，对于 MPA 的应用相对合适。如果我们的微前端运行在 SPA 模式下，并且我们的微应用需要手动处理隔离，那么我们需要通过 Ajax 的形式对资源进行提前请求（手动实现 Prefetch 能力），并通过手动执行的方式实现应用的预渲染。需要注意，预渲染需要微前端具备隔离能力，因为同一时刻会存在两个甚至多个同时运行的微应用，此时快照隔离无法满足预渲染的能力诉求。"}),"\n",(0,t.jsx)(n.p,{children:"除此之外，使用浏览器自带的 Prefetch 命中的缓存能力是浏览器自身的控制能力，而手动实现 Prefetch 的缓存能力则完全可以由开发者自行决定，可以是 SessionStorage 缓存，也可以是 LocalStorage 缓存（属于黑科技），当然最常见的是当前应用执行期间的临时缓存能力。"}),"\n",(0,t.jsxs)(n.p,{children:["由于需要手动在浏览器空闲时执行 Prefetch 和 Prerender，我们需要使用 ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback",target:"_blank",rel:"noopener noreferrer",children:"requestIdleCallback"}),"，该 API 将在浏览器主线程空闲时被调用，执行时机如下所示："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：图片来源于 ",(0,t.jsx)(n.a,{href:"https://aerotwist.com/blog/the-anatomy-of-a-frame/",target:"_blank",rel:"noopener noreferrer",children:"The Anatomy of a Frame"}),"。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["从上图可以发现，在当前一帧完成用户的输入处理、页面的渲染信息计算以及合成之后，如果下一帧 Frame Start 未开始（感兴趣的同学可以了解一下 Vsync 信号）、用户没有进行输入或者队列中没有可执行的任务，此时浏览器会进入空闲时间，从而会执行 ",(0,t.jsx)(n.code,{children:"requestIdleCallback"}),"，可以来看个示例："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'console.log("start");\n\nfunction runMicroTask() {\n    Promise.resolve().then(() => {\n        console.log("run microtask");\n    });\n}\n\nrunMicroTask();\n\nfunction loopRaf() {\n    // requestAnimationFrame 回调中的 requestAnimationFrame 是在当前帧还是下一帧执行？\n    requestAnimationFrame(() => {\n        console.log("loop requestAnimationFrame");\n        runMicroTask();\n        loopRaf();\n    });\n}\n\nloopRaf();\n\nfunction loopRic() {\n    // requestIdleCallback 回调中的 requestIdleCallback 是在当前帧还是下一帧执行？\n    requestIdleCallback(() => {\n        console.log("loop requestIdleCallback");\n        runMicroTask();\n        loopRic();\n    });\n}\n\nloopRic();\n'})}),"\n",(0,t.jsx)(n.p,{children:"正确的打印顺序如下所示："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"start\n// 微任务立即执行\nrun microtask\nloop requestAnimationFrame\n// requestAnimationFrame 中回调的微任务立即执行\nrun microtask\nloop requestIdleCallback\n// requestIdleCallback 中回调的微任务立即执行\nrun microtask\nloop requestAnimationFrame\nrun microtask\nloop requestIdleCallback\n...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["从 Chrome DevTools 的 Performance 面板可以发现，",(0,t.jsx)(n.code,{children:"requestIdleCallback"})," 的执行时机和上图相符："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：如果加上浏览器自带的 Prefetch 功能，再通过 Chrome DevTools 的 Performance 面板进行观察，你能发现浏览器自带 Prefetch 的空闲时间和 ",(0,t.jsx)(n.code,{children:"requestIdleCallback"})," 空闲时间有什么区别吗？"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"requestIdleCallback"})," 可以通过回调参数来查看当前浏览器空闲的剩余时间，具体如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'function loopRic() {\n    requestIdleCallback((idleDeadline) => {\n        console.log("loop requestIdleCallback");\n        // 查看浏览器当前的剩余空闲时间\n        console.log("timeRemaining: ", idleDeadline.timeRemaining());\n        loopRic();\n    });\n}\n\nloopRic();\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:"rIC测试.gif"})}),"\n",(0,t.jsxs)(n.p,{children:["从上图可以发现，如果浏览器的主线程处于空闲状态，例如没有 Frame 刷新，那么 ",(0,t.jsx)(n.code,{children:"requestIdleCallback"})," 可执行的空闲时间最长可达 50ms。如果有用户的输入事件、动画、microTasks、tasks 等需要执行，那么主线程可执行的空闲时间会变短。通过 ",(0,t.jsx)(n.a,{href:"https://web.dev/rail/",target:"_blank",rel:"noopener noreferrer",children:"RAIL 性能模型"})," 可以发现 0 ~ 100ms 内响应用户的操作会让用户觉得体验良好，可执行的空闲时间最长可达 50ms 的情况下，建议在剩余的 50ms 内尽快处理用户响应，如下所示："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：图片来源于",(0,t.jsx)(n.a,{href:"https://web.dev/rail/",target:"_blank",rel:"noopener noreferrer",children:"使用 RAIL 模型衡量性能"}),"，上图是在浏览器主线程空闲时的情况。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["除此之外，通过上述基础知识我们会发现，在 ",(0,t.jsx)(n.code,{children:"requestIdleCallback"})," 中："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"单次执行任务的时间尽量不要超过 50ms，否则可能会影响用户的交互体验"}),"\n",(0,t.jsx)(n.li,{children:"如果任务执行时间长，可以通过类似于 React 任务调度的方式实现时间切片来分段执行"}),"\n",(0,t.jsxs)(n.li,{children:["浏览器非空闲时尽量不要进行 DOM 更改的操作，防止当前一帧需要",(0,t.jsx)(n.a,{href:"https://developer.chrome.com/blog/using-requestidlecallback/#using-requestidlecallback-to-make-dom-changes",target:"_blank",rel:"noopener noreferrer",children:"重新计算页面布局"})]}),"\n",(0,t.jsx)(n.li,{children:"浏览器非空闲时尽量避免在回调中使用 Promise，因为会在回调结束后立即执行，从而可能会影响下一帧，此时可以通过 Task 执行任务，从而让出浏览器主线程的执行权"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：在 ",(0,t.jsx)(n.code,{children:"requestAnimationFrame"})," 中更改 DOM 合适吗？可以阅读 ",(0,t.jsx)(n.a,{href:"https://developer.chrome.com/blog/using-requestidlecallback/",target:"_blank",rel:"noopener noreferrer",children:"Using requestIdleCallback"})," 获取答案。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["了解了 ",(0,t.jsx)(n.code,{children:"requestIdleCallback"})," 的功能之后，接下来就可以利用该 API 来模拟 Resource Hints 中的 Prefetch 和 Prerender 功能了，首先来看下未实现预渲染和实现了预渲染的差异效果："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:"fast3g测试.gif"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:"fast3g预渲染.gif"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：由于本地网络速度较快，这里采用了 Fast 3G 进行测试。除此之外，这里的示例模拟了首次加载应用的情况，禁用了网络的缓存处理。大家也可以对上述示例进行真实业务代码的测试，并通过 Chrome DevTools 的 Performance 面板进行分析，从而做一些深度优化处理。示例源码可以从 micro-framework 的 ",(0,t.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/prerender",target:"_blank",rel:"noopener noreferrer",children:"demo/prerender"})," 分支获取。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"从上述效果可以发现，应用预渲染后节省了网络请求和应用解析时间，从而提升了应用的访问速度。预渲染基本上不需要对服务端和微应用进行改造，我们重点看下前端主应用的代码实现："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'\x3c!-- public/main/index.html --\x3e\n\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Main App Document</title>\n  </head>\n\n  <body>\n    <h1>Hello，Sandbox Script!</h1>\n\n    <div id="nav"></div>\n\n    <div id="container"></div>\n\n    <script type="text/javascript">\n      class IframeSandbox {\n        options = null;\n        iframe = null;\n        iframeWindow = null;\n        execScriptFlag = false;\n\n        constructor(options) {\n          this.options = options;\n          this.iframe = this.createIframe();\n          this.iframeWindow = this.iframe.contentWindow;\n          this.proxyIframeWindow();\n        }\n\n        createIframe() {\n          const { rootElm, id, url } = this.options;\n          const iframe = window.document.createElement("iframe");\n          const attrs = {\n            src: "about:blank",\n            "app-id": id,\n            "app-src": url,\n            style: "border:none;width:100%;height:100%;",\n          };\n          Object.keys(attrs).forEach((name) => {\n            iframe.setAttribute(name, attrs[name]);\n          });\n          rootElm?.appendChild(iframe);\n          return iframe;\n        }\n\n        isBoundedFunction(fn) {\n          return (\n            fn.name.indexOf("bound ") === 0 && !fn.hasOwnProperty("prototype")\n          );\n        }\n\n        isConstructable(fn) {\n          return (\n            fn.prototype &&\n            fn.prototype.constructor === fn &&\n            Object.getOwnPropertyNames(fn.prototype).length > 1\n          );\n        }\n\n        getTargetValue(target, prop) {\n          const value = target[prop];\n\n          if (\n            typeof value === "function" &&\n            !this.isBoundedFunction(value) &&\n            !this.isConstructable(value)\n          ) {\n            console.log("修正 this: ", prop);\n            const boundValue = Function.prototype.bind.call(value, target);\n            for (const key in value) {\n              boundValue[key] = value[key];\n            }\n            if (\n              value.hasOwnProperty("prototype") &&\n              !boundValue.hasOwnProperty("prototype")\n            ) {\n              boundValue.prototype = value.prototye;\n            }\n            return boundValue;\n          }\n          return value;\n        }\n\n        proxyIframeWindow() {\n          this.iframeWindow.proxy = new Proxy(this.iframeWindow, {\n            get: (target, prop) => {\n              if (prop === "history" || prop === "location") {\n                return window[prop];\n              }\n\n              if (prop === "window" || prop === "self") {\n                return this.iframeWindow.proxy;\n              }\n\n              return this.getTargetValue(target, prop);\n            },\n\n            set: (target, prop, value) => {\n              target[prop] = value;\n              return true;\n            },\n\n            has: (target, prop) => true,\n          });\n        }\n\n        execScript() {\n          const scriptElement =\n            this.iframeWindow.document.createElement("script");\n          scriptElement.textContent = `\n              (function(window) {\n                with(window) {\n                  ${this.options.scriptText}\n                }\n              }).bind(window.proxy)(window.proxy);\n              `;\n          this.iframeWindow.document.head.appendChild(scriptElement);\n        }\n\n        async active() {\n          this.iframe.style.display = "block";\n          if (this.execScriptFlag) return;\n          this.execScript();\n          this.execScriptFlag = true;\n        }\n\n        // 预渲染\n        prerender() {\n          this.iframe.style.display = "none";\n          // 如果已经通过 Script 加载并执行过 JS，则无需重新加载处理\n          if (this.execScriptFlag) return;\n          this.execScript();\n          this.execScriptFlag = true;\n        }\n\n        inactive() {\n          this.iframe.style.display = "none";\n        }\n\n        destroy() {\n          this.options = null;\n          this.exec = false;\n          if (this.iframe) {\n            this.iframe.parentNode?.removeChild(this.iframe);\n          }\n          this.iframe = null;\n        }\n      }\n\n      class MicroAppManager {\n        scriptText = "";\n        sandbox = null;\n        rootElm = null;\n\n        constructor(rootElm, app) {\n          this.rootElm = rootElm;\n          this.app = app;\n        }\n\n        async fetchScript() {\n          try {\n            const res = await window.fetch(this.app.script);\n            return await res.text();\n          } catch (err) {\n            console.error(err);\n          }\n        }\n\n        // 预渲染\n        rerender() {\n          // 当前主线程中存在多个并行执行的 requestIdleCallback 时，浏览器会根据空闲时间来决定要在当前 Frame 还是下一个 Frame 执行\n          requestIdleCallback(async () => {\n            // 预请求资源\n            this.scriptText = await this.fetchScript();\n            // 预渲染处理\n            this.idlePrerender();\n          });\n        }\n\n        idlePrerender() {\n          // 预渲染\n          requestIdleCallback((dealline) => {\n            console.log("deadline: ", dealline.timeRemaining());\n            // 这里只有在浏览器非常空闲时才可以进行操作\n            if (dealline.timeRemaining() > 40) {\n              // TODO: active 中还可以根据 Performance 性能面板进行再分析，如果内部的某些操作比较耗时，可能会影响下一帧的渲染，则可以放入新的 requestIdleCallback 中进行处理\n              // 除此之外，例如在子应用中可以先生成虚拟 DOM 树，预渲染不做 DOM 更改处理，真正切换应用的时候进行 DOM 挂载\n              // 也可以在挂载应用的时候放入 raF 中进行处理\n              this.active(true);\n            } else {\n              this.idlePrerender();\n            }\n          });\n        }\n\n        async active(isPrerender) {\n          if (!this.scriptText) {\n            this.scriptText = await this.fetchScript();\n          }\n          \n          if (!this.sandbox) {\n            this.sandbox = new IframeSandbox({\n              rootElm: this.rootElm,\n              scriptText: this.scriptText,\n              url: this.app.script,\n              id: this.app.id,\n            });\n          }\n\n          isPrerender ? this.sandbox.prerender() : this.sandbox.active();\n        }\n\n        inactive() {\n          this.sandbox?.inactive();\n        }\n      }\n\n      class MicroManager {\n        appsMap = new Map();\n        rootElm = null;\n\n        constructor(rootElm, apps) {\n          this.rootElm = rootElm;\n          this.initApps(apps);\n        }\n\n        initApps(apps) {\n          apps.forEach((app) => {\n            const appManager = new MicroAppManager(this.rootElm, app);\n            this.appsMap.set(app.id, appManager);\n            // 通过服务端配置来决定是否需要开启微应用的预渲染\n            if (app.prerender) {\n              appManager.rerender();\n            }\n          });\n        }\n\n        activeApp(id) {\n          const current = this.appsMap.get(id);\n          current && current.active();\n        }\n\n        inactiveApp(id) {\n          const current = this.appsMap.get(id);\n          current && current.inactive();\n        }\n      }\n\n      class MainApp {\n        microApps = [];\n        microManager = null;\n\n        constructor() {\n          this.init();\n        }\n\n        async init() {\n          this.microApps = await this.fetchMicroApps();\n          this.createNav();\n          this.navClickListener();\n          this.hashChangeListener();\n          this.microManager = new MicroManager(\n            document.getElementById("container"),\n            this.microApps\n          );\n        }\n\n        async fetchMicroApps() {\n          try {\n            const res = await window.fetch("/microapps", {\n              method: "post",\n            });\n            return await res.json();\n          } catch (err) {\n            console.error(err);\n          }\n        }\n\n        createNav(microApps) {\n          const fragment = new DocumentFragment();\n          this.microApps?.forEach((microApp) => {\n            const button = document.createElement("button");\n            button.textContent = microApp.name;\n            button.id = microApp.id;\n            fragment.appendChild(button);\n          });\n          nav.appendChild(fragment);\n        }\n\n        navClickListener() {\n          const nav = document.getElementById("nav");\n          nav.addEventListener("click", (e) => {\n            window.location.hash = event?.target?.id;\n          });\n        }\n\n        hashChangeListener() {\n          window.addEventListener("hashchange", () => {\n            this.microApps?.forEach(async ({ id }) => {\n              id === window.location.hash.replace("#", "")\n                ? this.microManager.activeApp(id)\n                : this.microManager.inactiveApp(id);\n            });\n          });\n        }\n      }\n\n      new MainApp();\n    <\/script>\n  </body>\n</html>\n\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"温馨提示：真正在框架的设计中需要考虑微应用的运行状态，对运行状态进行防冲突处理，例如当前预渲染正在进行中，但是用户直接点击应用进行加载，需要处理两者的状态冲突问题，防止应用产生不必要的渲染。"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"小结",children:["小结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本课程主要讲解了如何在微前端中进行性能优化，本质上都是围绕微应用进行优化处理，除了上述所讲的微应用资源缓存、预请求和预渲染等，还可以从工程化角度入手进行优化，例如将同一工程内多个微应用的公共代码进行切割，以及通过 Module Federation 创建所有微应用可共享的公共依赖库，从而减少微应用的加载体积。"})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}let b=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F16.%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%9A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md"]={toc:[{text:"HTTP 缓存",id:"http-缓存",depth:2},{text:"`Expires` & `Cache-Control`",id:"expires--cache-control",depth:3},{text:"`Last-Modified` & `Etag`",id:"last-modified--etag",depth:3},{text:"Resource Hints",id:"resource-hints",depth:2},{text:"应用预渲染",id:"应用预渲染",depth:2},{text:"小结",id:"小结",depth:2}],title:"16.原理解析：性能优化",headingTitle:"16.原理解析：性能优化",frontmatter:{}}}}]);