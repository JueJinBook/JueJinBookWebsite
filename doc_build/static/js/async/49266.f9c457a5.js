"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["49266"],{170314:function(e,n,r){e.exports=r.p+"static/image/4c5a38f877c86ef87aae1ead06ca22be.246bcccf.webp"},843597:function(e,n,r){e.exports=r.p+"static/image/9003b41c76ac7489834e59c07031d248.62d08e89.gif"},763792:function(e,n,r){r.r(n),r.d(n,{default:()=>k});var a=r(552676),t=r(740453);let s=r.p+"static/image/8cda786a71b8990d4e197486fd12b5f5.1b893a0f.gif",i=r.p+"static/image/596efc80d297ef64c7ac8bf932a4d33e.9b1ba591.webp";var c=r(170314);let m=r.p+"static/image/687f6730b4607d7a1a91e6a365c45129.225eb8e4.webp",o=r.p+"static/image/8c322d437a0237c5ec29b94af6217d36.bf96633f.gif",d=r.p+"static/image/f46c674a527dcf20188b91ff55631416.d4101738.webp",l=r.p+"static/image/2f600ca0988c9dffe63e96d0e26a80d0.08c1aeac.webp";var p=r(843597);let f=r.p+"static/image/cfacd7ea7955e218fae031ac95a42cff.04bab8a1.webp",h=r.p+"static/image/8a91622e262d89e661c02b2a1b34d43b.2812a481.webp",j=r.p+"static/image/dd9d285ba5c8129dc8ede1b31beea3db.92864f05.gif",x=r.p+"static/image/ec9ce15f62ca15aca4d834914dbdb993.697a9809.gif",b=r.p+"static/image/0d11cb39f456765ed24716e3d2bb5817.79e62c69.gif",u=r.p+"static/image/f199d80915b314305047eba05a7ef796.b7f2add4.gif",g=r.p+"static/image/eb0737a966bc7bb0489238198dfe0937.767a46af.webp",F=r.p+"static/image/78fb355936540a710f00732f7f50ba70.02fbb666.gif",v=r.p+"static/image/b1387b4b60864c8b651cff5e1e7b2406.49d5fda5.webp",y=r.p+"static/image/a2b04974fb5f3df8a8bf8218d92136df.841c1bd9.gif",E=r.p+"static/image/ae9d27f7e2487f23f3d8cf9533f7d7a8.6260eb59.webp",I=r.p+"static/image/21ae01ebf681e85dc8e90440ca984f41.c6eadf12.webp",C=r.p+"static/image/4037e67b6be35b17e8e1456b1d8e120f.f5f40c29.webp",w=r.p+"static/image/b2750b2fbef9f4c751606fe0b6fdfd2b.358dfb3c.webp";function A(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,t.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"第78章低代码编辑器form组件store持久化",children:["第78章—低代码编辑器：Form组件、store持久化",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第78章低代码编辑器form组件store持久化",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"\uFEFF上节实现了 Table 的物料组件，这节继续来实现 Form 组件。"}),"\n",(0,a.jsx)(n.p,{children:"创建 materails/Form/dev.tsx"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { Form as AntdForm, Input } from 'antd';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { useMaterailDrop } from '../../hooks/useMaterailDrop';\nimport { CommonComponentProps } from '../../interface';\nimport { useDrag } from 'react-dnd';\n\nfunction Form({ id, name, children, onFinish }: CommonComponentProps) {\n    const [form] = AntdForm.useForm();\n\n    const {canDrop, drop } = useMaterailDrop(['FormItem'], id);\n\n    const divRef = useRef<HTMLDivElement>(null);\n\n    const [_, drag] = useDrag({\n        type: name,\n        item: {\n            type: name,\n            dragType: 'move',\n            id: id\n        }\n    });\n\n    useEffect(() => {\n        drop(divRef);\n        drag(divRef);\n    }, []);\n\n    const formItems = useMemo(() => {\n        return React.Children.map(children, (item: any) => {\n            return {\n                label: item.props?.label,\n                name: item.props?.name,\n                type: item.props?.type,\n                id: item.props?.id,\n            }\n        });\n    }, [children]);\n\n    return <div\n        className={`w-[100%] p-[20px] min-h-[100px] ${canDrop ? 'border-[2px] border-[blue]' : 'border-[1px] border-[#000]'}`}\n        ref={divRef}\n        data-component-id={id}\n    >\n        <AntdForm labelCol={{ span: 6 }} wrapperCol={{ span: 18 }} form={form} onFinish={(values) =>{\n            onFinish && onFinish(values)\n        }}>\n            {formItems.map((item: any) => {\n                return <AntdForm.Item key={item.name} data-component-id={item.id} name={item.name} label={item.label} >\n                    <Input style={{pointerEvents: 'none'}}/>\n                </AntdForm.Item>\n            })}\n        </AntdForm>\n    </div>\n}\n\nexport default Form;\n"})}),"\n",(0,a.jsx)(n.p,{children:"和 Table 的实现方式差不多，可以拖拽 FormItem 进来，然后通过 React.Children.map 变成表单项配置，之后遍历渲染 Form.Item"}),"\n",(0,a.jsx)(n.p,{children:"注意要加上 pointerEvent:none，因为编辑时 Input 不需要输入内容"}),"\n",(0,a.jsx)(n.p,{children:"在 Page、Container、Modal 组件里支持 Form 组件的 drop："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:w,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:C,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:I,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在 componentConfig 里添加 Form 组件的配置："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:E,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"Form: {\n    name: 'Form',\n    defaultProps: {},\n    desc: '表单',\n    setter: [\n        {\n            name: 'title',\n            label: '标题',\n            type: 'input',\n        },\n    ],\n    events: [\n        {\n            name: 'onFinish',\n            label: '提交事件',\n        }\n    ],\n    dev: FormDev,\n    prod: FormDev\n},\n"})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:y,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,a.jsx)(n.p,{children:"然后我们实现 FormItem 组件："}),"\n",(0,a.jsx)(n.p,{children:"materials/FormItem/dev.tsx"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const FormItem = () => <></>;\n\nexport default FormItem;\n"})}),"\n",(0,a.jsx)(n.p,{children:"materials/FormItem/prod.tsx"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const FormItem = () => <></>;\n\nexport default FormItem;\n"})}),"\n",(0,a.jsx)(n.p,{children:"和 TableColumn 一样，它只是用于配置的，不需要渲染啥。"}),"\n",(0,a.jsx)(n.p,{children:"在 componentConfig 里配置下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:v,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"FormItem: {\n    name: 'FormItem',\n    desc: '表单项',\n    defaultProps: {\n        name: new Date().getTime(),\n        label: '姓名'\n    },\n    dev: FormItemDev,\n    prod: FormItemProd,\n    setter: [\n      {\n        name: 'type',\n        label: '类型',\n        type: 'select',\n        options: [\n          {\n            label: '文本',\n            value: 'input',\n          },\n          {\n            label: '日期',\n            value: 'date',\n          },\n        ],\n      },\n      {\n        name: 'label',\n        label: '标题',\n        type: 'input',\n      },\n      {\n        name: 'name',\n        label: '字段',\n        type: 'input',\n      },\n      {\n        name: 'rules',\n        label: '校验',\n        type: 'select',\n        options: [\n          {\n            label: '必填',\n            value: 'required',\n          },\n        ],\n      }\n    ]\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:F,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后实现下 prod 的 Form 组件："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { Form as AntdForm, DatePicker, Input } from 'antd';\nimport React, { forwardRef, ForwardRefRenderFunction, useEffect, useImperativeHandle, useMemo } from 'react';\nimport { CommonComponentProps } from '../../interface';\nimport dayjs from 'dayjs';\n\nexport interface FormRef {\n    submit: () => void\n}\n\nconst Form: ForwardRefRenderFunction<FormRef, CommonComponentProps> = ({ children, onFinish }, ref)  => {\n    const [form] = AntdForm.useForm();\n\n    useImperativeHandle(ref, () => {\n        return {\n            submit: () => {\n                form.submit();\n            }\n        }\n    }, [form]);\n\n    const formItems = useMemo(() => {\n        return React.Children.map(children, (item: any) => {\n            return {\n                label: item.props?.label,\n                name: item.props?.name,\n                type: item.props?.type,\n                id: item.props?.id,\n                rules: item.props?.rules,\n            }\n        });\n    }, [children]);\n\n\n    async function save(values: any) {\n        Object.keys(values).forEach(key => {\n            if (dayjs.isDayjs(values[key])) {\n                values[key] = values[key].format('YYYY-MM-DD')\n            }\n        })\n\n        onFinish(values);\n    }\n\n    return <AntdForm name='form' labelCol={{ span: 5 }} wrapperCol={{ span: 18 }} form={form} onFinish={save}>\n        {formItems.map((item: any) => {\n            return (\n                <AntdForm.Item\n                    key={item.name}\n                    name={item.name}\n                    label={item.label}\n                    rules={\n                        item.rules === 'required' ? [{\n                            required: true,\n                            message: '不能为空'\n                        }] : []\n                    }\n                >\n                    {item.type === 'input' && <Input />}\n                    {item.type === 'date' && <DatePicker />}\n                </AntdForm.Item>\n            )\n        })}\n    </AntdForm>\n}\n\nexport default forwardRef(Form);\n"})}),"\n",(0,a.jsx)(n.p,{children:"用 React.Children.map 拿到要渲染的 formItems 信息，然后遍历渲染表单项 From.Item，根据类型渲染不同表单。"}),"\n",(0,a.jsx)(n.p,{children:"onFinish 的时候，需要对 DatePicker 的 value 做下处理，因为值是 dayjs 对象，需要 format 一下拿到字符串值。"}),"\n",(0,a.jsx)(n.p,{children:"我们还通过 forwardRef + useImperativeHandle 暴露了 submit 方法，需要在 componentConfig 里注册下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"methods: [\n    {\n        name: 'submit',\n        label: '提交',\n    }\n],\n"})}),"\n",(0,a.jsx)(n.p,{children:"并且修改 prod 为刚才写的组件。"}),"\n",(0,a.jsx)(n.p,{children:"测试下看看："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:u,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:b,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后我们加一个按钮来触发表单提交。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:x,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:j,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"我们应该能在事件处理函数里拿到传过来的 values："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在 Preview 绑定事件的时候加一下参数："}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)("img",{src:f,alt:""}),"\n测试下："]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const values = args[0];\n\nalert(JSON.stringify(values))\n"})}),"\n",(0,a.jsx)(n.p,{children:"点击按钮触发表单提交的动作。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"表单提交触发脚本执行的动作。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"我们可以再加一个发送请求的动作，根据传入的 values 来发送创建请求，之后调用 Table 的刷新方法就好了。"}),"\n",(0,a.jsx)(n.p,{children:"现在我们编辑完的画布，一刷新就没有了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样体验不好，我们最好做一下持久化。"}),"\n",(0,a.jsx)(n.p,{children:"这是 zustand 自带的功能，用 persist 中间件实现就行："}),"\n",(0,a.jsx)(n.p,{children:"我们做拖拽版 todolist 那个案例的时候用过："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:m,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"用了 ts + middleware 的时候，create 要换种写法。"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/pmndrs/zustand/blob/main/docs/guides/typescript.md",target:"_blank",rel:"noopener noreferrer",children:"文档的解释"}),"是为了更好的处理类型："]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"不影响功能。"}),"\n",(0,a.jsx)(n.p,{children:"我们加一下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const creator: StateCreator<State & Action> = (set, get) => ({\n    //...\n});\n\nexport const useComponetsStore = create<State & Action>()(persist(creator, {\n  name: 'xxx'\n}));\n"})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:s,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样刷新后依然保存着编辑的内容。"}),"\n",(0,a.jsxs)(n.p,{children:["案例代码上传了",(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,a.jsxs)(n.h2,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"这节我们实现了 Form 组件，并做了 store 的持久化。"}),"\n",(0,a.jsx)(n.p,{children:"Form 组件和 Table 组件一样，通过 FormItem 来配置字段，FormItem 本身不渲染内容。"}),"\n",(0,a.jsx)(n.p,{children:"Form 暴露了 submit 方法，并且支持绑定 onFinish 事件。"}),"\n",(0,a.jsx)(n.p,{children:"我们可以通过 Button 的点击事件触发 Form 的 submit，然后给 Form 的 onFinish 事件绑定一个发请求的动作，这样就实现了提交表单保存到服务端。"}),"\n",(0,a.jsx)(n.p,{children:"至此，我们的低代码编辑器就比较完善了，物料、动作都可以根据需要自己添加。"})]})}function R(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(A,{...e})}):A(e)}let k=R;R.__RSPRESS_PAGE_META={},R.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC78%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9AForm%E7%BB%84%E4%BB%B6%E3%80%81store%E6%8C%81%E4%B9%85%E5%8C%96.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第78章—低代码编辑器：Form组件、store持久化",headingTitle:"第78章—低代码编辑器：Form组件、store持久化",frontmatter:{}}}}]);