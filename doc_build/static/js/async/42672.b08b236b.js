"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["42672"],{254539:function(e,n,s){s.r(n),s.d(n,{default:()=>W});var c=s(552676),r=s(740453);let i=s.p+"static/image/0edb6540c0da2008e99d50016030d2dd.98cf0ed5.gif",l=s.p+"static/image/de0731c99a441bf261a028f393a1c8e3.4438130d.gif",d=s.p+"static/image/f4014645fb309929c058a62ddf5222a9.cfc9c486.gif",h=s.p+"static/image/b9ab98bfc2712fe8316bc580565adfa4.a0e20959.webp",t=s.p+"static/image/c068f8f12f5743c2ef3469c86a410cd3.028ff879.webp",x=s.p+"static/image/c01a3c4052b7b8edd5bf0e4e27391a9e.f34c9d2e.webp",o=s.p+"static/image/f5633825268facff60c4c501a7e0113b.718d7261.webp",a=s.p+"static/image/00bac2629cb578091090702aab5a4aab.788c9f48.webp",j=s.p+"static/image/74cb1445359066a241a481688c80a193.84ef6b25.webp",p=s.p+"static/image/677ef95c6a15b1272fa83d01a8dc8cd5.15049953.webp",g=s.p+"static/image/b94c9fbf8b65ec36523b3f134bfce8ea.5c8636f0.webp",f=s.p+"static/image/3fcf2aa953411fdd3f9643459ffd31db.8fd50f5a.webp",y=s.p+"static/image/aebd7d4b961959e249ce25e928e3c95d.4542f1c0.webp",m=s.p+"static/image/5956eba9594498293da2131815baaff4.221704a7.webp",b=s.p+"static/image/3e7db1ba42e5f1c9140dea0855052b76.37e327a3.gif",u=s.p+"static/image/52ada0c43d807b84f343000a51ad7999.c17b8649.webp",v=s.p+"static/image/8cad59413e8aae3cca4df7cb829b4c6f.5d42736f.gif",w=s.p+"static/image/8351932ca6c70bc621e8515111e29352.760377df.gif",k=s.p+"static/image/5ab19f27b74970255fa31d2fdcbc444e.50f0a162.webp",S=s.p+"static/image/2d9791e890c05f4059d1a2b4955a218f.cf73b21d.gif",G=s.p+"static/image/39046635813c6d5b8f2bf992900ddb5f.6aa6ca15.webp",V=s.p+"static/image/f404071918537e3db2eddcd1c28f1624.d62eb16d.gif",B=s.p+"static/image/707d8a094acf8e5bf7b527d1c3a113e8.4bac1c86.webp",E=s.p+"static/image/2835bba83c76bee963a1cf600b8a6932.1c555ec9.gif",M=s.p+"static/image/142e3fe9472a09b5ee634cf3b0d25d3e.b55c6026.webp",D=s.p+"static/image/2d5872bbecfd65ad75201b8d6a2970f7.b7128fcf.gif",N=s.p+"static/image/1911d3a990315de2fc43179af32b5d9a.79eec6e1.gif",A=s.p+"static/image/552693ef5ff39a7210553ecf526b0e49.6ae95e2f.webp",L=s.p+"static/image/15a410d61a136ae65412878da8542067.b4da7060.webp",_=s.p+"static/image/c8bd980078f91ac30038d10e7fe7962e.2da803cf.gif",X=s.p+"static/image/f7ae5317be18012e448c4a4a08502304.1930ed9c.webp",C=s.p+"static/image/40a78f0af13e82052058e6801af5b294.abf79d7e.webp",O=s.p+"static/image/85afa558b6ddc4d1a0ec4ee5701b6ceb.e2d262ba.webp",F=s.p+"static/image/c5989eb14e8b5216bb7990a127f2ed41.b7f0af86.webp",q=s.p+"static/image/1b1b326d21aa9ad85c1fedabd0da98dd.710ebf8c.webp",z=s.p+"static/image/27457d088c9a47c92e3eceb76e51ceff.adcbb4d9.webp",R=s.p+"static/image/7a0d30f38372fb20097b89e8e305f9e5.e0ae9e99.webp";function T(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",img:"img",ul:"ul",li:"li",strong:"strong",h3:"h3",pre:"pre",blockquote:"blockquote"},(0,r.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"7-初级篇svg-基本图形元素",children:["7-初级篇：SVG 基本图形元素",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-初级篇svg-基本图形元素",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["SVG 是一种用于在 Web 上创建可缩放矢量图形的技术，它通过数学和几何原理实现了图形的绘制和渲染。在 SVG 中，可以使用多种基本图形元素来绘制各种形状，例如矩形（",(0,c.jsx)(n.code,{children:"<rect>"}),"）、圆（",(0,c.jsx)(n.code,{children:"<circle>"}),"）、椭圆（",(0,c.jsx)(n.code,{children:"<ellipse>"}),"）、直线（",(0,c.jsx)(n.code,{children:"<line>"}),"）、开放式线段（",(0,c.jsx)(n.code,{children:"<polyline>"}),"）、多边形（",(0,c.jsx)(n.code,{children:"<polygon>"}),"）等。这些基本图形元素提供了灵活而简单的方式来创建各种图形，而无需依赖复杂的图形编辑软件。除了这些基本图形元素之外，SVG 还提供了路径（",(0,c.jsx)(n.code,{children:"<path>"}),"）元素，用于创建各种复杂的图形。"]}),"\n",(0,c.jsx)(n.p,{children:"这节课将带领你深入了解 SVG 图形元素的绘制，探索如何使用 SVG 的基本图形元素来创建各种形状。通过详细的示例和实践操作，你将逐步掌握如何使用这些基本元素绘制各种形状，从而为你的项目增添更多创意和想象空间。"}),"\n",(0,c.jsx)(n.p,{children:"在这个过程中，我们还将分享一些实用的技巧和窍门，帮助你更加高效地利用 SVG 来实现你的设计目标。同时，还将帮助你了解图形设计软件如何生成 SVG，让你更仔细地了解使用图形设计软件绘制图形和生成 SVG 的过程以及如何将其运用到自己项目中。如此一来，无论你是想创建简单的图标，还是复杂的艺术品，SVG 都能够满足你的需求，并为你的项目增添独特的视觉效果。"}),"\n",(0,c.jsx)(n.p,{children:"最后，还将展示一些实际应用案例，让你了解 SVG 图形元素在 Web 设计和开发中的真实应用场景。通过这些案例，你将更加深入地理解 SVG 的潜力和优势，为你的下一个项目注入新的灵感和创造力。"}),"\n",(0,c.jsx)(n.p,{children:"无论你是刚入门的新手还是经验丰富的专业人士，这节课都将为你提供全面而易懂的指导，帮助你掌握 SVG 图形元素的绘制技巧，从而成为一名更加出色的设计师和开发者。让我们一起开始这段充满创意和挑战的旅程吧！"}),"\n",(0,c.jsxs)(n.h2,{id:"svg-图形元素简介",children:["SVG 图形元素简介",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-图形元素简介",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:R,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"在图形设计软件中（例如 Figma），形状通常指几何图形，它们可以被用于各种用途。Figma 提供了五种预设形状供你使用，它们分别是矩形、椭圆、多边形、星形和箭头。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:z,alt:""})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["矩形：创建一个具有 ",(0,c.jsx)(n.code,{children:"4"})," 个点的四边形矢量对象。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["椭圆：创建一个具有 ",(0,c.jsx)(n.code,{children:"4"})," 个点的圆形矢量对象。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["多边形：创建一个具有 ",(0,c.jsx)(n.code,{children:"3"})," 个点的三角形矢量对象。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["星形：创建一个具有 ",(0,c.jsx)(n.code,{children:"5"})," 个点的星形矢量对象。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["箭头：创建一个具有 ",(0,c.jsx)(n.code,{children:"2"})," 个点的箭头线条。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["线条：创建一个至少包含 ",(0,c.jsx)(n.code,{children:"2"})," 个顶点的线条，但你可以继续创建额外的顶点，它将在你点击的位置创建更多线条。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"每种形状都有自己的用途。除此之外，Figma 还为你提供了使用线条（铅笔）工具和形状（钢笔）工具创建任何你想要的形状的功能。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:q,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"SVG 与 图形设计软件 Figma 类似，它也提供了矩形、圆形、椭圆、直线、折线、多边形等基本图形元素，这些基本元素允许你绘制基本形状："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"矩形（"})," ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"<rect>"})})," ",(0,c.jsx)(n.strong,{children:"）"})," ：用于创建矩形形状的元素，可以定义矩形的位置、宽度、高度和圆角半径等属性。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"圆形（"})," ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"<circle>"})})," ",(0,c.jsx)(n.strong,{children:"）"})," ：用于创建圆形形状的元素，通过指定圆心坐标和半径来定义圆的大小和位置。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"椭圆（"})," ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"<ellipse>"})})," ",(0,c.jsx)(n.strong,{children:"）"})," ：用于创建椭圆形状的元素，可以定义椭圆的中心坐标、水平半径和垂直半径。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"直线（"})," ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"<line>"})})," ",(0,c.jsx)(n.strong,{children:"）"})," ：用于创建直线的元素，通过指定起点和终点坐标来定义直线的位置和长度。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"折线（"})," ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"<polyline>"})})," ",(0,c.jsx)(n.strong,{children:"）"})," ：用于创建折线形状的元素，通过指定多个点的坐标来定义折线的路径。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"多边形（"})," ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"<polygon>"})})," ",(0,c.jsx)(n.strong,{children:"）"})," ：用于创建多边形形状的元素，通过指定多个顶点的坐标来定义多边形的边界。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 中，图形元素是创建图形的基本单元，它们是 SVG 中用于创建这些基本形状的标签或元素。它们提供了一种灵活而简单的方式来绘制各种形状，无需深入的数学计算或复杂的路径定义。从数学上讲，这些形状元素相当于构建相同形状的 "," 元素。它们可以用于描边、填充或作为裁剪的路径（所有适用于 path 元素的属性也适用于基本形状）。这些形状元素拥有各自的属性和方法，可以通过 SVG 标记语言在 Web 上直接创建和使用。"]}),"\n",(0,c.jsxs)(n.h2,{id:"如何使用图形元素绘制图形",children:["如何使用图形元素绘制图形",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何使用图形元素绘制图形",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:F,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"探索 SVG 图形元素的绘制过程是理解 SVG 的关键一环。SVG 提供了一系列基本的图形元素，包括矩形、圆形、椭圆、直线等，借助这些元素，我们可以轻松创建各种形状和图案。接下来，让我们一起深入了解如何运用这些图形元素，绘制出你所需的形状吧！"}),"\n",(0,c.jsxs)(n.h3,{id:"矩形",children:["矩形",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#矩形",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 中，我们可以使用 ",(0,c.jsx)(n.code,{children:"<rect>"})," 元素创建一个矩形（长方形或正方形）："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    <rect x="100" y="100" width="400" height="300" fill="#DB7092" stroke="#B82E5A" stroke-width="10" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"其属性包括："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 设置了矩形的左上角在用户坐标系中的位置，其中 ",(0,c.jsx)(n.code,{children:"x"})," 表示左上角水平位置，",(0,c.jsx)(n.code,{children:"y"})," 表示左上角的垂直位置"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 设置矩形的尺寸，其中 ",(0,c.jsx)(n.code,{children:"width"})," 表示矩形的宽度，",(0,c.jsx)(n.code,{children:"height"})," 表示矩形的高度"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:O,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["除此之外，",(0,c.jsx)(n.code,{children:"<rect>"})," 元素还提供了两个可选属性 ",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," ："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"rx"})," 定义了水平圆角半径"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"ry"})," 定义了垂直圆角半径"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"如果这两个属性设置了一个，那么另一个属性将取相同的值："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    <rect x="100" y="100" width="400" height="300" rx="10" fill="#DB7092" stroke="#B82E5A" stroke-width="10" />\n</svg>\n\n\x3c!-- 或者 --\x3e\n<svg viewBox="0 0 800 600">\n    <rect x="100" y="100" width="400" height="300" ry="10" fill="#DB7092" stroke="#B82E5A" stroke-width="10" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["如果使用 ",(0,c.jsx)(n.code,{children:"<rect>"})," 绘制的矩形，它的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 相等（绘制的是一个正方形），并且 ",(0,c.jsx)(n.code,{children:"rx"})," 或 ",(0,c.jsx)(n.code,{children:"ry"})," 的值大于或等于 ",(0,c.jsx)(n.code,{children:"width"})," 或 ",(0,c.jsx)(n.code,{children:"height"})," 的一半时，将会绘制一个圆形："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:X,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["如果使用 ",(0,c.jsx)(n.code,{children:"<rect>"})," 绘制的矩形，它的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 不相等（绘制的是一个长方形），并且 ",(0,c.jsx)(n.code,{children:"rx"})," 或 ",(0,c.jsx)(n.code,{children:"ry"})," 的值大于或等于 ",(0,c.jsx)(n.code,{children:"width"})," 或 ",(0,c.jsx)(n.code,{children:"height"})," 时，将会绘制一个椭圆形："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/qBwabMa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBwabMa"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["与此同时，在 SVG 中，",(0,c.jsx)(n.code,{children:"<rect>"})," 元素的圆角可以同时由 ",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," 定义。它们允许我们创建具有椭圆形："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    <rect x="100" y="100" width="400" height="300" rx="200" ry="150" fill="#DB7092" stroke="#B82E5A" stroke-width="10" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:L,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/rNbMeEz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNbMeEz"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 中，矩形元素（",(0,c.jsx)(n.code,{children:"<rect>"}),"）中的 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 属性可以是负值，但是 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 属性的值不能是负值。如果其中任何一个维度的计算值为",(0,c.jsx)(n.code,{children:"0"}),"，则不会呈现该元素。"]}),"\n",(0,c.jsxs)(n.p,{children:["对于具有圆角的矩形，",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," 属性的计算值定义了圆角矩形角落（矩形的四个角）的椭圆弧的 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 轴的半径。椭圆弧始终沿水平和垂直轴对称；如果要创建具有不同大小圆角的矩形，需要使用路径元素（",(0,c.jsx)(n.code,{children:"<path>"}),"）来定义。"]}),"\n",(0,c.jsxs)(n.p,{children:["此外，如果 ",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," 中的任何一个维度的计算值为 ",(0,c.jsx)(n.code,{children:"0"}),"，或者两个维度的计算值都为 ",(0,c.jsx)(n.code,{children:"auto"}),"，将导致矩形没有圆角。",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 轴圆角半径的使用值可以隐含地由另一个维度（使用",(0,c.jsx)(n.code,{children:"auto"}),"）确定，并且也受到约束，以确保矩形的直线段长度永远不会为负。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," 的使用值由以下步骤按顺序确定："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["如果 ",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," 均具有 ",(0,c.jsx)(n.code,{children:"auto"})," 的计算值，它们的使用值将都为 ",(0,c.jsx)(n.code,{children:"0"}),"，这将导致矩形的四个角都是直角。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"否则，按照以下方式将指定的值转换为绝对值："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["如果",(0,c.jsx)(n.code,{children:"rx"})," 设置为长度值或百分比，但 ",(0,c.jsx)(n.code,{children:"ry"})," 为 ",(0,c.jsx)(n.code,{children:"auto"}),"，则计算等效于 ",(0,c.jsx)(n.code,{children:"rx"})," 的绝对长度，百分比相对于矩形的宽度计算；",(0,c.jsx)(n.code,{children:"ry"}),"的绝对值相同。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["如果",(0,c.jsx)(n.code,{children:"ry"}),"设置为长度值或百分比，但",(0,c.jsx)(n.code,{children:"rx"}),"为auto，则计算等效于",(0,c.jsx)(n.code,{children:"ry"}),"的绝对长度，百分比相对于矩形的高度计算；",(0,c.jsx)(n.code,{children:"rx"}),"的绝对值相同。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["如果",(0,c.jsx)(n.code,{children:"rx"}),"和",(0,c.jsx)(n.code,{children:"ry"}),"均设置为长度或百分比，将分别生成绝对值，将",(0,c.jsx)(n.code,{children:"rx"}),"百分比相对于矩形宽度计算，将",(0,c.jsx)(n.code,{children:"ry"}),"百分比相对于矩形高度计算。"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"最后，应用约束生成使用值："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["如果绝对值 ",(0,c.jsx)(n.code,{children:"rx"})," 大于使用宽度的一半，则 ",(0,c.jsx)(n.code,{children:"rx"})," 的使用值为使用宽度的一半。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["如果绝对值 ",(0,c.jsx)(n.code,{children:"ry"})," 大于使用高度的一半，则 ",(0,c.jsx)(n.code,{children:"ry"})," 的使用值为使用高度的一半。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["否则，",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," 的使用值为先前计算的绝对值。"]}),"\n",(0,c.jsxs)(n.h3,{id:"椭圆和圆",children:["椭圆和圆",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#椭圆和圆",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 中，我们可以使用 ",(0,c.jsx)(n.code,{children:"<ellipse>"})," 元素来绘制一个椭圆，由椭圆中心的坐标（",(0,c.jsx)(n.code,{children:"cx"})," 和 ",(0,c.jsx)(n.code,{children:"cy"}),"）以及两个半径（",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," ）定义："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    <ellipse cx="200" cy="100" rx="150" ry="80" fill="#DB7092" stroke="#B82E5A" stroke-width="10" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:A,alt:""})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"cx"})," 和 ",(0,c.jsx)(n.code,{children:"cy"})," 属性定义了椭圆的中心点，其中 ",(0,c.jsx)(n.code,{children:"cx"})," 表示水平中心，",(0,c.jsx)(n.code,{children:"cy"})," 表示垂直中心"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," 属性定义了椭圆的 ",(0,c.jsx)(n.code,{children:"x"})," 轴（水平）和 ",(0,c.jsx)(n.code,{children:"y"})," 轴（垂直）半径。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/BaELjod",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaELjod"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["椭圆中心 ",(0,c.jsx)(n.code,{children:"cx"})," 和 ",(0,c.jsx)(n.code,{children:"cy"})," 属性可以是一个负值，但椭圆的半径 ",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," 的值不能是负值。"]}),"\n",(0,c.jsxs)(n.p,{children:["另外，当 ",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," 任一维度的计算值为 ",(0,c.jsx)(n.code,{children:"0"})," ，或者对于两个维度的计算值为 ",(0,c.jsx)(n.code,{children:"auto"})," ，则 ",(0,c.jsx)(n.code,{children:"<ellipse>"})," 元素不会被渲染。对于 ",(0,c.jsx)(n.code,{children:"rx"})," 或 ",(0,c.jsx)(n.code,{children:"ry"})," 的 ",(0,c.jsx)(n.code,{children:"auto"})," 值会转换为一个使用过的值，遵循上述矩形的规则（但不会基于宽度或高度做限制）。实际上，",(0,c.jsx)(n.code,{children:"auto"})," 值会创建一个圆形，其半径仅过一个维的值来定义；这允许创建一个半径根据以下之一的值来定义的圆："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["相对于坐标系宽度的百分比；即 ",(0,c.jsx)(n.code,{children:"rx"})," 的百分比值和 ",(0,c.jsx)(n.code,{children:"ry"})," 的 ",(0,c.jsx)(n.code,{children:"auto"})," 值。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["相对于坐标系高度的百分比；即 ",(0,c.jsx)(n.code,{children:"rx"})," 的 ",(0,c.jsx)(n.code,{children:"auto"})," 值和 ",(0,c.jsx)(n.code,{children:"ry"})," 的百分比值。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    <ellipse cx="400" cy="300" rx="150" fill="#DB7092" stroke="#B82E5A" stroke-width="10" />\n</svg>\n \n\x3c!-- 或者 --\x3e\n<svg viewBox="0 0 800 600">\n    <ellipse cx="400" cy="300" ry="150" fill="#DB7092" stroke="#B82E5A" stroke-width="10" />\n</svg> \n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:D,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/RwOGRKX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwOGRKX"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["而且，椭圆的 ",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"})," 具有相等的值时，",(0,c.jsx)(n.code,{children:"<ellipse>"})," 就会绘制出一个圆形："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    <ellipse cx="400" cy="300" ry="150" rx="150" fill="#DB7092" stroke="#B82E5A" stroke-width="10" />\n</svg> \n'})}),"\n",(0,c.jsxs)(n.p,{children:["甚至可以说，圆形是一个特殊的椭圆。不过，SVG 中有一个专门绘制圆形的元素 ",(0,c.jsx)(n.code,{children:"<circle>"})," 。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 600">\n    <circle cx="400" cy="300" r="150" fill="#DB7092" stroke="#B82E5A" stroke-width="10" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:M,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["其属性包括 ",(0,c.jsx)(n.code,{children:"r"})," 代表圆的半径，",(0,c.jsx)(n.code,{children:"cx"})," 和 ",(0,c.jsx)(n.code,{children:"cy"})," 代表圆的中心，其中 ",(0,c.jsx)(n.code,{children:"cx"})," 代表圆的水平中心，",(0,c.jsx)(n.code,{children:"cy"})," 代表圆的垂直中心。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/ExJgyXp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ExJgyXp"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"直线",children:["直线",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#直线",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["直线是 SVG 中最简单的基本图形，通过两点就能绘制出一条简单的直线，例如从点 ",(0,c.jsx)(n.code,{children:"A"})," 到点 ",(0,c.jsx)(n.code,{children:"B"})," 。在 SVG 中，我们可以使用 ",(0,c.jsx)(n.code,{children:"<line>"})," 元素绘制直线。它有四个必需的属性："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"x1"})," 和 ",(0,c.jsx)(n.code,{children:"y1"})," 确定点 ",(0,c.jsx)(n.code,{children:"A"})," （起点）坐标，其中 ",(0,c.jsx)(n.code,{children:"x1"})," 用于指定起点的水平位置，",(0,c.jsx)(n.code,{children:"y1"})," 用于指定起点的垂直位置"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"x2"})," 和 ",(0,c.jsx)(n.code,{children:"y2"})," 确定点 ",(0,c.jsx)(n.code,{children:"B"})," （终点）坐标，其中 ",(0,c.jsx)(n.code,{children:"x2"})," 用于指定终点的水平位置，",(0,c.jsx)(n.code,{children:"y2"})," 用于指定终点的垂直位置"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:B,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg  viewBox="0 0 800 600">\n    <line x1="100" y1="150" x2="450" y2="500"  stroke="#B82E5A" stroke-width="10" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:V,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/JjVRRRj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjVRRRj"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"折线",children:["折线",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#折线",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["折线是一系列相连的直线段。在 SVG 中，可以通过使用 ",(0,c.jsx)(n.code,{children:"<polyline>"})," 元素来绘制折线。 ",(0,c.jsx)(n.code,{children:"<polyline>"})," 元素使用 ",(0,c.jsx)(n.code,{children:"points"})," 属性进行控制，该属性是一个包含所有折线点坐标的列表。每个点由其水平位置 ",(0,c.jsx)(n.code,{children:"x"})," 和垂直位置 ",(0,c.jsx)(n.code,{children:"y"})," 定义。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:G,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg  viewBox="0 0 800 600">\n    <polyline points="0,0 300,300 50,400 500, 600" stroke="#B82E5A" stroke-width="10" fill="none" />\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["注意，",(0,c.jsx)(n.code,{children:"points"})," 属性中每个点的 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 之间使用逗号分隔，相邻两个点之间有空格符进行分隔。每个点的坐标值（",(0,c.jsx)(n.code,{children:"x"})," 或 ",(0,c.jsx)(n.code,{children:"y"}),"）可以是负值："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/vYMXXzZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYMXXzZ"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"多边形",children:["多边形",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#多边形",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<polygon>"})," 元素是 SVG 中绘制图形的最后个基本图形元素，它可以绘制由多段直线构成的闭合形状，例如星形或六边形。你也可以将其视为闭合的折线。",(0,c.jsx)(n.code,{children:"<polygon>"})," 元素的语法实际上与 ",(0,c.jsx)(n.code,{children:"<polyline>"})," 相同，也是通过 ",(0,c.jsx)(n.code,{children:"points"})," 属性进行控制。它与折线（",(0,c.jsx)(n.code,{children:"<polyline>"}),"）主要区别在于，在 ",(0,c.jsx)(n.code,{children:"<polygon>"})," 中，列表中的最后个点始终与第一个点连接，以形成一个闭合的形状："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg  viewBox="0 0 800 600">\n    <polygon points="0,0 300,300 50,400 500, 600" stroke="#B82E5A" stroke-width="10" fill="#70DB8E" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/mdgrORj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdgrORj"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["重要的是要记住，SVG 的 ",(0,c.jsx)(n.code,{children:"<polygon>"})," 元素可以用于任何多边形，无论是规则的还是不规则的创作。只不过，在使用 ",(0,c.jsx)(n.code,{children:"<polygon>"})," 绘制一些图形时（例如星形，正多边形等），需要一些数学计算。例如下面这个星星图形："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:"<svg viewBox='-250 -250 500 500'>\n    <polygon points='250,0 20,20 0,250 -20,20 -250,0 -20,-20 0,-250 20,-20'/>\n</svg>\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址： ",(0,c.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/WvjOYQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/thebabydino/full/WvjOYQ"})," （来源于 ",(0,c.jsx)(n.a,{href:"https://codepen.io/thebabydino",target:"_blank",rel:"noopener noreferrer",children:"@Ana Tudor"})," ）"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["上面这个示例中的 ",(0,c.jsx)(n.code,{children:"polygon"})," 中的每个坐标就是通过计算获得的："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsxs)(n.h2,{id:"使用设计软件绘制图形",children:["使用设计软件绘制图形",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用设计软件绘制图形",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"SVG 图形与传统的图形格式（如 JPG 或 PNG 等）最大的区别在于它是一种基于 XML 的标记语言。就像其他编程语言一样，SVG 可以在文本编辑器中编写和编辑。理论上来说，我们无需任何图形设计软件就可以创建 SVG 图形。然而，在实际情况下，大多数情况下还是需要使用图形设计软件。"}),"\n",(0,c.jsx)(n.p,{children:"虽然在文本编辑器中处理复杂形状和图形是完全可能的，但通常会非常复杂和繁琐。因此，通常的做法是使用诸如 Figma 这样的图形设计软件，通过可视化界面绘制图形，然后将其导出为 SVG 格式。"}),"\n",(0,c.jsx)(n.p,{children:"因此，无论你是一位擅长编码的 Web 开发者还是注重设计的设计师，要熟练掌握 SVG 需要一定的设计工具和 SVG 语言本身的知识。正如本课程所述，使用诸如 Figma 等图形设计软件，可以快速绘制出各种基本图形，并生成相应的 SVG 代码。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"正如上图所示，使用图形设计软件提供的一些工具，你可以快速获得所需的图形。然后将其导出 SVG 代码："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg width="1733" height="953" viewBox="0 0 1733 953" fill="none" xmlns="http://www.w3.org/2000/svg">\n    <rect width="492" height="364" fill="#D9D9D9"/>\n    <line x1="742.269" y1="72.5782" x2="1177.27" y2="349.578" stroke="black"/>\n    <ellipse cx="171.5" cy="801" rx="168.5" ry="136" fill="#D9D9D9"/>\n    <circle cx="992" cy="801" r="152" fill="#D9D9D9"/>\n    <path d="M1602 532L1732.77 799H1471.23L1602 532Z" fill="#D9D9D9"/>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["小册的《",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7343645889896022050",target:"_blank",rel:"noopener noreferrer",children:"初级篇：如何获得 SVG"}),"》一课中曾详细介绍了如何从设计软件（例如 Figma）导出 SVG，这里就不再重复阐述！"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["需要知道的是，不同的图形设计软件，导出的 SVG 代码是有所差异的。例如，Illustrator 和 Sketch 会将折线转换为 ",(0,c.jsx)(n.code,{children:"<polyline>"})," 元素，而 Figma 则将折线导出为 ",(0,c.jsx)(n.code,{children:"<path>"})," 元素。"]}),"\n",(0,c.jsxs)(n.h2,{id:"svg-路径",children:["SVG 路径",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-路径",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<path>"})," 是 SVG 中最灵活的元素。它可以用于绘制任何可能的线条和形状，包括但不限于上面列出的所有基本形状。事实上，每个基本形状（",(0,c.jsx)(n.code,{children:"<rect>"})," 、",(0,c.jsx)(n.code,{children:"<ellipse>"})," 、",(0,c.jsx)(n.code,{children:"<line>"})," 、",(0,c.jsx)(n.code,{children:"<polyline>"})," 和 ",(0,c.jsx)(n.code,{children:"<polygon>"})," ）都可以使用 ",(0,c.jsx)(n.code,{children:"<path>"})," 来绘制。此外，有许多形状可以使用 ",(0,c.jsx)(n.code,{children:"<path>"})," 创建，但无法使用其他任何 SVG 元素创建。"]}),"\n",(0,c.jsxs)(n.p,{children:["换句话说，SVG 的 ",(0,c.jsx)(n.code,{children:"<path>"})," 元素是用于绘制任何形状的通用元素，它的 ",(0,c.jsx)(n.code,{children:"d"})," 属性是一堆数字和字母拼接在一起形成的路径数据。以下是一个 ",(0,c.jsx)(n.code,{children:"<path>"})," 绘制的心形图形："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 502 502" class="heart">\n      <path d="M 140,20 C 73,20 20,74 20,140 c 0,135 136,170 228,303 c 88,-132 229,-173 229,-303 c 0,-66 -54,-120 -120,-120 c -48,0 -90,28 -109,69 c -19,-41 -60,-69 -108,-69 Z" stroke="#B82E5A" stroke-width="10" fill="#70DB8E" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/rNbMrgZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNbMrgZ"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"我们可以对其进行重新格式化以便更好地理解（仍然是有效的代码）："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 502 502" class="heart">\n      <path \n          d="\n              M 140,20\n              C 73,20 20,74 20,140\n              c 0,135 136,170 228,303\n              c 88,-132 229,-173 229,-303\n              c 0,-66 -54,-120 -120,-120\n              c -48,0 -90,28 -109,69\n              c -19,-41 -60,-69 -108,-69\n              Z" \n          stroke="#B82E5A" \n          stroke-width="10" \n          fill="#70DB8E" />\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"d"})," 属性中有很多字母和数字，例如 ",(0,c.jsx)(n.code,{children:"M"})," 、",(0,c.jsx)(n.code,{children:"C"})," 、",(0,c.jsx)(n.code,{children:"c"})," 和 ",(0,c.jsx)(n.code,{children:"Z"})," 等，还有一些数字，例如 ",(0,c.jsx)(n.code,{children:"140,20"})," 。这些字母表示的是命令，数字是传递给这些命令的值。所有逗号都是可选的（它们可以是空格）。"]}),"\n",(0,c.jsx)(n.p,{children:"以上面示例来说："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"M 140,20"})," ：拿起笔并将其移动到 ",(0,c.jsx)(n.code,{children:"{ x: 140, y: 20 }"})," 位置。暂时不要绘制任何东西，只是移动笔的位置。这样，如果其他命令要绘制图形，它现在就从这个位置开始。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"C 73,20 20,74 20,140"})," ：放下笔并从当前点绘制贝塞尔曲线到新点 ",(0,c.jsx)(n.code,{children:"{ x: 20, y: 140 }"})," ；起始控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 73, y: 20 }"}),"，结束控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 20, y: 74 }"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"c 0,135 136,170 228,303"})," ：从当前点绘制贝塞尔曲线到新点 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 + 228, y: 上一个点 + 303 }"})," ；起始控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 + 0, y: 上一个点 + 135 }"}),"，结束控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 + 136, y: 上一个点 + 170 }"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"c 88,-132 229,-173 229,-303"})," ：从当前点绘制贝塞尔曲线到新点 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 + 229, y: 上一个点 - 303 }"})," ；起始控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 + 88, y: 上一个点 - 132 }"}),"，结束控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 + 229, y: 上一个点 - 173 }"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"c 0,-66 -54,-120 -120,-120"})," ：从当前点绘制贝塞尔曲线到新点 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 - 120, y: 上一个点 - 120 }"})," ；起始控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 + 0, y: 上一个点 - 66 }"}),"，结束控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 - 54, y: 上一个点 - 120 }"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"c -48,0 -90,28 -109,69"})," ：从当前点绘制贝塞尔曲线到新点 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 - 109, y: 上一个点 + 69 }"})," ；起始控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 - 48, y: 上一个点 + 0 }"}),"，结束控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 - 90, y: 上一个点 + 28 }"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"c -19,-41 -60,-69 -108,-69"})," ：从当前点绘制贝塞尔曲线到新点 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 - 108, y: 上一个点 - 69 }"})," ；起始控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 - 19, y: 上一个点 - 41 }"}),"，结束控制点是 ",(0,c.jsx)(n.code,{children:"{ x: 上一个点 - 60, y: 上一个点 - 69 }"})]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Z"})," ：直线返回到起点"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["上面所看到的 ",(0,c.jsx)(n.code,{children:"M"})," 、",(0,c.jsx)(n.code,{children:"C"})," 、",(0,c.jsx)(n.code,{children:"c"})," 和 ",(0,c.jsx)(n.code,{children:"Z"})," 中是众多路径命中的一个。据我的统计，它共有 ",(0,c.jsx)(n.code,{children:"18"})," 个命令："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"M"})," 或 ",(0,c.jsx)(n.code,{children:"m"}),"：将路径的起始点移动到指定的坐标位置。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"L"})," 或 ",(0,c.jsx)(n.code,{children:"l"}),"：从当前点绘制一条直线到指定的坐标位置。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"H"})," 或 ",(0,c.jsx)(n.code,{children:"h"}),"：从当前点水平绘制一条直线到指定的 ",(0,c.jsx)(n.code,{children:"x"})," 坐标位置。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"V"})," 或 ",(0,c.jsx)(n.code,{children:"v"}),"：从当前点垂直绘制一条直线到指定的 ",(0,c.jsx)(n.code,{children:"y"})," 坐标位置。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"C"})," 或 ",(0,c.jsx)(n.code,{children:"c"}),"：绘制一条三次贝塞尔曲线，使用两个控制点来确定曲线的形状。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"S"})," 或 ",(0,c.jsx)(n.code,{children:"s"}),"：绘制一条平滑的三次贝塞尔曲线，只需要一个控制点，前一个控制点会被假设为上一条曲线的结束点的镜像。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Q"})," 或 ",(0,c.jsx)(n.code,{children:"q"}),"：绘制一条二次贝塞尔曲线，使用一个控制点来确定曲线的形状。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"T"})," 或 ",(0,c.jsx)(n.code,{children:"t"}),"：绘制一条平滑的二次贝塞尔曲线，只需要一个控制点，前一个控制点会被假设为上一条曲线的结束点的镜像。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"A"})," 或 ",(0,c.jsx)(n.code,{children:"a"}),"：绘制一条弧线，用于绘制椭圆的一部分。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Z"})," 或 ",(0,c.jsx)(n.code,{children:"z"}),"：闭合路径，从当前点绘制一条直线到路径的起始点，形成一个闭合的形状。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"你可能已经发现了，上面这个命令都是成对出现的，一个大写版本和一个小写版本，但这并不意味着路径的命令都是以成对方式存在。SVG 路径命令中的大写版本和小写版本之间的区别主要在于坐标值的解释方式："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"大写版本（绝对坐标）"})," ：大写命令表示路径坐标是绝对的，即相对于 SVG 视图的原点（左上角）来定义的。例如，大写命令 ",(0,c.jsx)(n.code,{children:"M"})," 表示将路径的起始点移动到绝对坐标位置。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"小写版本（相对坐标）"})," ：小写命令表示路径坐标是相对于当前点的位置来定义的。换句话说，它们是相对于上一个点的坐标偏移量。例如，小写命令 ",(0,c.jsx)(n.code,{children:"m"})," 表示将路径的起始点移动到相对坐标位置。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"因此，大写命令会将路径的起始点重新设置到指定的绝对位置，而小写命令会将路径的起始点移动相对于当前点的指定偏移量。这些命令可以组合在一起，以描述复杂的路径形状，从简单的直线到曲线和弧线等各种形状都可以用这些命令来绘制。"}),"\n",(0,c.jsxs)(n.p,{children:["例如下面这个示例，使用 ",(0,c.jsx)(n.code,{children:"<path>"})," 绘制一个十字架图标："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 5 5" class="plus">\n    <path d="M2 1 h1 v1 h1 v1 h-1 v1 h-1 v-1 h-1 v-1 h1 z" stroke="gold" stroke-width=".1" fill="gold" stroke-linejoin="round" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/BaELOVY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaELOVY"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"这个示例，是使用相对坐标绘制的，你会发现代码量极少。"}),"\n",(0,c.jsxs)(n.h2,{id:"图形元素的-dom-接口",children:["图形元素的 DOM 接口",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#图形元素的-dom-接口",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"在之前的学习中，我们已经了解了如何在 SVG 文档中使用图形元素来绘制图形。除此之外，SVG 还为这些图形元素提供了对应的 DOM 接口。通过 JavaScript 脚本，我们可以访问这些图形元素的 DOM 接口。"}),"\n",(0,c.jsx)(n.p,{children:"SVG 基本图形元素的 DOM 接口定义了用于操作这些图形的方法和属性。以下是 SVG 基本图形元素的 DOM 接口："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"SVGRectElement（矩形元素）"})," ：用于创建矩形。可以通过指定位置（",(0,c.jsx)(n.code,{children:"x"}),"、",(0,c.jsx)(n.code,{children:"y"}),"）、宽度（",(0,c.jsx)(n.code,{children:"width"}),"）、高度（",(0,c.jsx)(n.code,{children:"height"}),"）以及圆角（",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"}),"）来定义矩形的形状和样式。通过创建 ",(0,c.jsx)(n.code,{children:"<rect>"})," 元素，并设置其属性来定义矩形的位置、大小和圆角属性。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"SVGCircleElement（圆形元素）"})," ：用于创建圆形。可以通过指定圆心位置（",(0,c.jsx)(n.code,{children:"cx"}),"、",(0,c.jsx)(n.code,{children:"cy"}),"）和半径（",(0,c.jsx)(n.code,{children:"r"}),"）来定义圆的形状和样式。通过创建 ",(0,c.jsx)(n.code,{children:"<circle>"})," 元素，并设置其属性来定义圆的位置和半径。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"SVGEllipseElement（椭圆元素）"})," ：用于创建椭圆。可以通过指定中心点位置（",(0,c.jsx)(n.code,{children:"cx"}),"、",(0,c.jsx)(n.code,{children:"cy"}),"）和两个轴的半径（",(0,c.jsx)(n.code,{children:"rx"})," 和 ",(0,c.jsx)(n.code,{children:"ry"}),"）来定义椭圆的形状和样式。通过创建 ",(0,c.jsx)(n.code,{children:"<ellipse>"})," 元素，并设置其属性来定义椭圆的位置和轴的半径。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"SVGLineElement（直线元素）"})," ：用于创建直线。可以通过指定起点（",(0,c.jsx)(n.code,{children:"x1"}),"、",(0,c.jsx)(n.code,{children:"y1"}),"）和终点（",(0,c.jsx)(n.code,{children:"x2"}),"、",(0,c.jsx)(n.code,{children:"y2"}),"）来定义直线的形状和样式。通过创建 ",(0,c.jsx)(n.code,{children:"<line>"})," 元素，并设置其属性来定义直线的起点和终点。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"SVGPolygonElement（多边形元素）"})," ：用于创建多边形。可以通过指定多个顶点的坐标（",(0,c.jsx)(n.code,{children:"points"}),"）来定义多边形的形状和样式。通过创建 ",(0,c.jsx)(n.code,{children:"<polygon>"})," 元素，并设置其属性来定义多边形的顶点坐标。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"SVGPolylineElement（折线元素）"})," ：用于创建折线。与多边形类似，可以通过指定多个顶点的坐标（",(0,c.jsx)(n.code,{children:"points"}),"）来定义折线的形状和样式。通过创建 ",(0,c.jsx)(n.code,{children:"<polyline>"})," 元素，并设置其属性来定义折线的顶点坐标。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"这些 DOM 接口提供了一种通过 JavaScript 操作 SVG 基本图形元素的方式，可以动态地创建、修改和删除这些元素，从而实现对 SVG 图形的动态渲染和交互。"}),"\n",(0,c.jsx)(n.p,{children:"以下是一个使用 SVG 基本图形元素 DOM 接口的示例，展示了如何通过 JavaScript 动态创建 SVG 图形："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg id="svg-container" width="400" height="200">\n    \x3c!-- SVG图形将在这里动态创建 --\x3e\n</svg>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-JavaScript",children:'const svgEle = document.getElementById("svg-container");\n// 创建矩形元素\nconst rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");\nrect.setAttribute("x", "50");\nrect.setAttribute("y", "50");\nrect.setAttribute("width", "100");\nrect.setAttribute("height", "50");\nrect.setAttribute("fill", "blue");\nsvgEle.appendChild(rect);\n\n// 创建圆形元素\nconst circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");\ncircle.setAttribute("cx", "250");\ncircle.setAttribute("cy", "100");\ncircle.setAttribute("r", "30");\ncircle.setAttribute("fill", "green");\nsvgEle.appendChild(circle);\n\n// 创建椭圆元素\nconst ellipse = document.createElementNS("http://www.w3.org/2000/svg", "ellipse");\nellipse.setAttribute("cx", "150");\nellipse.setAttribute("cy", "150");\nellipse.setAttribute("rx", "80");\nellipse.setAttribute("ry", "40");\nellipse.setAttribute("fill", "yellow");\nsvgEle.appendChild(ellipse);\n\n// 创建直线元素\nconst line = document.createElementNS("http://www.w3.org/2000/svg", "line");\nline.setAttribute("x1", "200");\nline.setAttribute("y1", "50");\nline.setAttribute("x2", "300");\nline.setAttribute("y2", "150");\nline.setAttribute("stroke", "red");\nline.setAttribute("stroke-width", "2");\nsvgEle.appendChild(line);\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/YzMGJeL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzMGJeL"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"案例",children:["案例",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#案例",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"接下来，我们使用 SVG 基本图形元素来绘制一些图形。"}),"\n",(0,c.jsxs)(n.h3,{id:"绘制圣诞装饰品",children:["绘制圣诞装饰品",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#绘制圣诞装饰品",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"先从一个简单的圣诞装饰品开始。在这里我们使用一个矩形和两个圆来绘制一个圣诞装饰品的简单图形。"}),"\n",(0,c.jsxs)(n.p,{children:["首先，使用 ",(0,c.jsx)(n.code,{children:"<circle>"})," 绘制圣诞装饰品的主体部分。我们可以使用 SVG 的 ",(0,c.jsx)(n.code,{children:"<circle>"})," 元素来绘制这个圆："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-200 -200 400 400">\n  <circle cx="0" cy="40" r="140" fill="#D1495B" />\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["然后，使用 ",(0,c.jsx)(n.code,{children:"<rect>"})," 元素绘制一个矩形作为圣诞装饰品的顶部帽子。在这种情况下，我们必须设置矩形的左上角位置以及其大小。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-200 -200 400 400" class="christmas">\n    <circle cx="0" cy="40" r="140" fill="#D1495B" />\n    <rect x="-35" y="-134" width="70" height="40" fill="#F79257" />\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["最后，我们在顶部添加另一个圆作为吊钩。请注意，我们使用相同的 ",(0,c.jsx)(n.code,{children:"<circle>"})," 元素，但具有不同的属性。我们将 ",(0,c.jsx)(n.code,{children:"fill"})," 属性设置为 ",(0,c.jsx)(n.code,{children:"none"}),"，并使用 ",(0,c.jsx)(n.code,{children:"stroke"})," 和 ",(0,c.jsx)(n.code,{children:"stroke-width"})," 属性为形状设置边框。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-200 -200 400 400" class="christmas">\n    <circle cx="0" cy="40" r="140" fill="#D1495B" />\n    <rect x="-35" y="-134" width="70" height="40" fill="#F79257" />\n    <circle cx="0" cy="-156" r="25" fill="none" stroke="#F79257" stroke-width="4" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"最终呈现的效果如下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/mdgrzjz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdgrzjz"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["上面是最基础的图形效果。如果你感兴趣的话，还可以给这个装饰品添加一些其他的效果。例如，使用 ",(0,c.jsx)(n.code,{children:"<polyline>"})," 给主体（大的红色圆形）添加简单的花纹装饰："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-200 -200 400 400" class="christmas">\n    <circle cx="0" cy="40" r="140" fill="#D1495B" />\n    <polyline points="-240 80 -160 0 -80 80 0 0 80 80 160 0 240 80" fill="none" stroke="gold" stroke-width="10" />\n    <polyline points="-260 40 -160 -40 -80 40 0 -40 80 40 160 -40 240 40" fill="none" stroke="gold" stroke-width="10" />\n    <rect x="-35" y="-134" width="70" height="40" fill="#F79257" />\n    <circle cx="0" cy="-156" r="25" fill="none" stroke="#F79257" stroke-width="4" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["你可能已经发现了，",(0,c.jsx)(n.code,{children:"<polyline>"})," 绘制的黄色条纹线超出主圆的位置。为了使黄色条纹看上去和主圆是一体的，我们需要应用一点我们这节课没介绍的内容，即使用 SVG 的剪切（`","），裁剪条纹超出圆的那部分："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-200 -200 400 400" class="christmas">\n    <defs>\n        <clipPath id="ball">\n            <circle cx="0" cy="40" r="140" />\n        </clipPath>\n    </defs>\n\n    <circle cx="0" cy="40" r="140" fill="#D1495B" />\n    <polyline clip-path="url(#ball)" points="-240 80 -160 0 -80 80 0 0 80 80 160 0 240 80" fill="none" stroke="gold" stroke-width="10" />\n    <polyline clip-path="url(#ball)" points="-260 40 -160 -40 -80 40 0 -40 80 40 160 -40 240 40" fill="none" stroke="gold" stroke-width="10" />\n    <rect x="-35" y="-134" width="70" height="40" fill="#F79257" />\n    <circle cx="0" cy="-156" r="25" fill="none" stroke="#F79257" stroke-width="4" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/oNOzamd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNOzamd"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"绘制图表",children:["绘制图表",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#绘制图表",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["SVG 图形另一个被应用的重要领域是数据图可视化图表，对于一些简单的数据可视化图表，可以在不依赖任何图表库（例如 ",(0,c.jsx)(n.a,{href:"https://echarts.apache.org/zh/index.html",target:"_blank",rel:"noopener noreferrer",children:"Echarts"}),"、 ",(0,c.jsx)(n.a,{href:"https://d3js.org/",target:"_blank",rel:"noopener noreferrer",children:"D3"})," 等），只使用基本图形元素也可以绘制出来。例如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 960 400" class="chart">\n    <g transform="translate(50, 20)">\n        <g class="axis" transform="translate( -10, 0 )">\n            <g class="tick" transform="translate(0,360)">\n                <line x1="-2" y1="0" x2="6" y2="0" />\n                <text dy=".32em" x="-12" y="0">0</text>\n            </g>\n            <g class="tick" transform="translate(0,317.6470588235294)">\n                <line x1="-2" y1="0" x2="6" y2="0" />\n                <text dy=".32em" x="-12" y="0">2</text>\n            </g>\n            <g class="tick" transform="translate(0,275.2941176470588)">\n                <line x1="-2" y1="0" x2="6" y2="0" />\n                <text dy=".32em" x="-12" y="0">4</text>\n            </g>\n            <g class="tick" transform="translate(0,232.9411764705882)">\n                <line x1="-2" y1="0" x2="6" y2="0" />\n                <text dy=".32em" x="-12" y="0">6</text>\n            </g>\n            <g class="tick" transform="translate(0,190.58823529411765)">\n                <line x1="-2" y1="0" x2="6" y2="0" />\n                <text dy=".32em" x="-12" y="0">8</text>\n            </g>\n            <g class="tick" transform="translate(0,148.23529411764704)">\n                <line x1="-2" y1="0" x2="6" y2="0" />\n                <text dy=".32em" x="-12" y="0">10</text>\n            </g>\n            <g class="tick" transform="translate(0,105.88235294117645)">\n                <line x1="-2" y1="0" x2="6" y2="0" />\n                <text dy=".32em" x="-12" y="0">12</text>\n            </g>\n            <g class="tick" transform="translate(0,63.5294117647059)">\n                <line x1="-2" y1="0" x2="6" y2="0" />\n                <text dy=".32em" x="-12" y="0">14</text>\n            </g>\n            <g class="tick" transform="translate(0,21.176470588235297)">\n                <line x1="-2" y1="0" x2="6" y2="0" />\n                <text dy=".32em" x="-12" y="0">16</text>\n            </g>\n            <path class="domain" d="M-2,0H0V360H-2" />\n        </g>\n        \n        <rect class="items" x="4" y="338.8235294117647" height="21.176470588235293" width="73" fill="#6d68d8" />\n        <rect class="items" x="95" y="317.6470588235294" height="42.35294117647059" width="73" fill="#766ccb" />\n        <rect class="items" x="186" y="232.94117647058823" height="127.05882352941177" width="73" fill="#9b7b95" />\n        <rect class="items" x="277" y="63.52941176470591" height="296.4705882352941" width="73" fill="#e49a29" />\n        <rect class="items" x="368" y="254.11764705882354" height="105.88235294117648" width="73" fill="#9277a2" />\n        <rect class="items" x="459" y="0" height="360" width="73" fill="#ffa500" />\n        <rect class="items" x="550" y="296.47058823529414" height="63.529411764705884" width="73" fill="#7f6fbd" />\n        <rect class="items" x="641" y="232.94117647058823" height="127.05882352941177" width="73" fill="#9b7b95" />\n        <rect class="items" x="732" y="169.41176470588235" height="190.58823529411765" width="73" fill="#b6866c" />\n        <rect class="items" x="823" y="317.6470588235294" height="42.35294117647059" width="73" fill="#766ccb" />\n    </g>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面示例中，使用 ",(0,c.jsx)(n.code,{children:"<line>"})," 绘制 ",(0,c.jsx)(n.code,{children:"y"})," 轴的刻度，使用 ",(0,c.jsx)(n.code,{children:"<rect>"})," 绘制图表的柱状。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/jORMQyV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jORMQyV"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"非矩形页头",children:["非矩形页头",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#非矩形页头",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"在 Web 应用或页面上，Web 设计师有时候为了追求创意与效果，会设计一些不规则的页头风格。这些不规则的页头效果对于 Web 开发者来说，还是很棘手的，有时候甚至的令人头痛的。"}),"\n",(0,c.jsx)(n.p,{children:"相对于应用图片而言，使用内联的 SVG 更加高效，易于实现响应式，并且易于迭代设计。事实上，对于大多数情况下，我个人还是使用内联 SVG 多一些，因为它的优势非常明显：多功能、跨浏览器、矢量化、可交互，还可以添加一些特殊效果，例如滤镜效果，遮罩效果等。"}),"\n",(0,c.jsxs)(n.p,{children:["我们来看一个简单的示例，SVG 路径（",(0,c.jsx)(n.code,{children:"<path>"}),"）绘制的水波纹应用于卡片 UI 上的效果："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<div class="card">\n    <div class="colour">\n        <img src="http://i.pravatar.cc/500?img=3" alt="" />\n        <div class="svg">\n            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 48.2">\n                <path fill="#ffffff" d="M115.2 29.2C72.4 16.9 40.9.1 0 .1v14.8c15.8 0 40.6 13.6 72.3 23.4 16.1-2.8 29.9-6 42.9-9.1zm175.3-19.1c3.5-.6 6.7-.9 9.5-.9V0s-3.2 4.3-9.5 10.1z" class="ripple0" />\n                <path fill="#ffffff" d="M236.3 25.8c-17.6-4-36.9-7-55.1-6.8-23.8.2-43.6 4.9-65.9 10.2 19.6 5.6 41.5 10.4 67.8 12.1 18.2-4.3 36.4-10 53.2-15.5z" class="ripple1" />\n                <path fill="#ffffff" d="M132.4 48.1c16.2 0 33.4-2.7 50.6-6.8-26.3-1.8-48.2-6.5-67.8-12.1-13 3.1-26.9 6.3-42.9 9 18 5.6 38.1 9.9 60.1 9.9z" class="ripple2" />\n                <path fill="#ffffff" d="M290.5 10.1c-13.9 2.3-32.9 8.8-54.2 15.7 7.5 1.7 14.7 3.6 21.4 5.6 14.8-6.5 25.8-14.8 32.8-21.3z" class="ripple3" />\n                <path fill="#ffffff" d="M257.6 31.4A409 409 0 0 1 300 46.2v-37c-2.8 0-6 .3-9.5.9-7 6.5-18 14.8-32.9 21.3zM0 14.9V44c29.1 0 52.4-2.4 72.3-5.7C40.6 28.4 15.8 14.9 0 14.9z" class="ripple2" />\n                <path fill="#ffffff" d="M205.4 42.1c20.9 0 38.3-4.5 52.2-10.6-6.7-1.9-13.9-3.9-21.4-5.6-16.8 5.4-35 11.2-53.2 15.5 7.2.4 14.6.7 22.4.7z" class="ripple4" />\n                <path fill="#ffffff" d="M300 46.3s-17.6-7.6-42.4-14.8c-13.9 6.1-31.3 10.6-52.2 10.6-7.8 0-15.3-.3-22.4-.7-17.2 4-34.5 6.8-50.6 6.8H300v-1.9zm-167.6 1.8c-22 0-42.1-4.3-60.1-9.9-19.9 3.3-43.2 5.7-72.3 5.7v4.2h132.4z" class="ripple5" />\n            </svg>\n        </div>\n    </div>\n    \n    <div class="text">\n        <h3>Etiam Fusce Ornare</h3>\n        <p class="date">8 April 2016</p>\n        <div class="author">\n            <img src="http://i.pravatar.cc/500?img=3" alt="" />\n            <p>Laura Clark</p>\n        </div>\n        <p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames.</p>\n    </div>\n</div>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:".ripple0 {\n    opacity: 0.29;\n}\n\n.ripple1 {\n    opacity: 0.5;\n}\n\n.ripple2 {\n    opacity: 0.7;\n}\n\n.ripple3 {\n    opacity: 0.54;\n}\n\n.ripple4 {\n    opacity: 0.75;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/mdgrQge",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdgrQge"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"注意，像上面这样的水波纹，在文本编辑器中使用 SVG 代码来编辑的话，会损耗你大把精力。所以我建议你使用诸如 Figma 的图形编辑软件来制作，然后导出相应的 SVG 代码，然后将导出的 SVG 代码内联到 HTML 中。或者你可以使用一些在线工具来帮助你获取相似的 SVG 代码。例如："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://getwaves.io/",target:"_blank",rel:"noopener noreferrer",children:"GetWaves"})," 或 ",(0,c.jsx)(n.a,{href:"https://svgwave.in/",target:"_blank",rel:"noopener noreferrer",children:"SVGwave"})," 生成SVG波浪"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://www.blobmaker.app/",target:"_blank",rel:"noopener noreferrer",children:"Blobmaker"}),"生成一些花哨的斑点"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://www.shapedivider.app/",target:"_blank",rel:"noopener noreferrer",children:"ShapeDivider"})," 生成自定义形状的分隔符"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果你需要一个更高级的编辑器来生成 SVG 资源，从分层波浪到堆叠波浪和斑点场景，",(0,c.jsx)(n.a,{href:"https://app.haikei.app/",target:"_blank",rel:"noopener noreferrer",children:"Haikei"})," 是一个功能齐全的工具，拥有各种生成器，提供 SVG 和 PNG 格式的资源。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["URL：",(0,c.jsx)(n.a,{href:"https://app.haikei.app/",target:"_blank",rel:"noopener noreferrer",children:"https://app.haikei.app/"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"菜单切换按钮",children:["菜单切换按钮",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#菜单切换按钮",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["再来看一个带交互效果的 SVG 图形案例。“汉堡”图标切换为关闭图标，这个效果在 Web 应用上（尤其是移动端上）很常见。接下来，我们使用三个 ",(0,c.jsx)(n.code,{children:"<rect>"})," 元素来绘类似“汉堡”的图标，当用户点击它时，它会动画化切换到关闭按钮："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-HTML",children:'<button>\n    <svg aria-hidden="true" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="none">\n        <rect width="18" height="1.5" fill=red ry="0.75" x="3" y="6.25" />\n        <rect width="18" height="1.5" fill=red ry="0.75" x="3" y="11.25" />\n        <rect width="18" height="1.5" fill=red ry="0.75" x="3" y="16.25" />\n    </svg>\n</button>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:'@layer demo {\n    button {\n        width: 280px;\n        aspect-ratio: 1;\n        display: grid;\n        place-items: center;\n        padding: 0;\n        scale: 1;\n        background: transparent;\n        border: 0;\n        border-radius: 50%;\n        transition: background 0.2s;\n        cursor: pointer;\n    }\n\n    button:is(:hover, :focus-visible) {\n        background: hsl(0 0% 16%);\n    }\n\n    button:is(:focus-visible) {\n        outline-color: hsl(320 80% 50% / 0.5);\n        outline-offset: 1rem;\n        outline-width: 4px;\n    }\n\n    button svg:first-of-type {\n        width: 65%;\n    }\n\n    button rect {\n        transform-box: fill-box;\n        transform-origin: 50% 50%;\n        fill: hsl(0 0% 98%);\n    }\n\n    [aria-pressed="true"] rect {\n        transition: translate 0.2s, rotate 0.2s 0.3s;\n    }\n    \n    rect {\n         transition: rotate 0.2s 0s, translate 0.2s 0.2s;\n    }\n\n    [aria-pressed="true"] rect:nth-of-type(1) {\n        translate: 0 333%;\n        rotate: -45deg;\n    }\n    \n    [aria-pressed="true"] rect:nth-of-type(2) {\n        rotate: 45deg;\n    }\n  \n    [aria-pressed="true"] rect:nth-of-type(3) {\n        translate: 0 -333%;\n        rotate: 45deg;\n    }\n    \n    [aria-pressed="true"] svg {\n        rotate: 90deg;\n        transition: rotate 1s 0.4s;\n    }\n\n    @supports (--custom: linear()) {\n        :root {\n            --elastic-out: linear(\n                0,\n                0.2178 2.1%,\n                1.1144 8.49%,\n                1.2959 10.7%,\n                1.3463 11.81%,\n                1.3705 12.94%,\n                1.3726,\n                1.3643 14.48%,\n                1.3151 16.2%,\n                1.0317 21.81%,\n                0.941 24.01%,\n                0.8912 25.91%,\n                0.8694 27.84%,\n                0.8698 29.21%,\n                0.8824 30.71%,\n                1.0122 38.33%,\n                1.0357,\n                1.046 42.71%,\n                1.0416 45.7%,\n                0.9961 53.26%,\n                0.9839 57.54%,\n                0.9853 60.71%,\n                1.0012 68.14%,\n                1.0056 72.24%,\n                0.9981 86.66%,\n                1\n              );\n            --elastic-in-out: linear(\n                0,\n                0.0009 8.51%,\n                -0.0047 19.22%,\n                0.0016 22.39%,\n                0.023 27.81%,\n                0.0237 30.08%,\n                0.0144 31.81%,\n                -0.0051 33.48%,\n                -0.1116 39.25%,\n                -0.1181 40.59%,\n                -0.1058 41.79%,\n                -0.0455,\n                0.0701 45.34%,\n                0.9702 55.19%,\n                1.0696 56.97%,\n                1.0987 57.88%,\n                1.1146 58.82%,\n                1.1181 59.83%,\n                1.1092 60.95%,\n                1.0057 66.48%,\n                0.986 68.14%,\n                0.9765 69.84%,\n                0.9769 72.16%,\n                0.9984 77.61%,\n                1.0047 80.79%,\n                0.9991 91.48%,\n                1\n              );\n        }\n        [aria-pressed="true"] svg {\n            transition-timing-function: var(--elastic-out);\n        }\n    }\n}\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-JavaScript",children:"const TOGGLE = document.querySelector('button')\n\nconst HANDLE_TOGGLE = () => {\n    TOGGLE.setAttribute('aria-pressed', TOGGLE.matches('[aria-pressed=true]') ? false : true)\n}\n\nTOGGLE.addEventListener('click', HANDLE_TOGGLE)\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/jORMXLK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jORMXLK"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"loading-动效",children:["Loading 动效",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#loading-动效",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["URL：",(0,c.jsx)(n.a,{href:"https://loading.io/",target:"_blank",rel:"noopener noreferrer",children:"https://loading.io/"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"正如上图所示，Web 页面加载指示器可以使用 SVG 来创建，这些指示器可以基于 SVG 基本图形元素，然后添加一些 CSS ，就可以构建出一个效果完美的 Loading 动效。例如下面这个示例："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 700 350" class="loading">\n    <defs>\n        <filter id="goo">\n            <feGaussianBlur id="SvgjsFeGaussianBlur1000" result="SvgjsFeGaussianBlur1000" in="SourceGraphic" stdDeviation="10" />\n            <feColorMatrix id="SvgjsFeColorMatrix1001" result="SvgjsFeColorMatrix1001" in="SvgjsFeGaussianBlur1000" values=" 1 0 0 0 0   0 1 0 0 0   0 0 1 0 0   0 0 0 30 -10" type="matrix" />\n            <feComposite id="SvgjsFeComposite1002" result="SvgjsFeComposite1002" in="SvgjsFeColorMatrix1001" operator="atop" />\n        </filter>\n        <linearGradient id="g" x1="100%" x2="0" y1="0" y2="80%" gradientTransform="rotate(10)">\n            <stop offset="10%" stop-color="hsl(10, 90%, 50%)" />\n            <stop offset="22%" stop-color="hsl(35, 90%, 50%)" />\n            <stop offset="38%" stop-color="hsl(45, 90%, 50%)" />\n            <stop offset="50%" stop-color="hsl(180, 90%, 50%)" />\n            <stop offset="70%" stop-color="hsl(210, 90%, 50%)" />\n            <stop offset="84%" stop-color="hsl(280, 90%, 50%)" />\n            <stop offset="100%" stop-color="hsl(320, 90%, 50%)" />\n        </linearGradient>\n        <mask id="mask">\n            <g>\n                <circle cx="50" cy="25" r="25"  />\n                <line x1="50" x2="50" y1="100" y2="250"  />\n                <circle cx="50" cy="325" r="25"  />\n            </g>\n            <g>\n                <circle cx="150" cy="25" r="25"  />\n                <line x1="150" x2="150" y1="100" y2="250"  />\n                <circle cx="150" cy="325" r="25"  />\n            </g>\n            <g>\n                <circle cx="250" cy="25" r="25"  />\n                <line x1="250" x2="250" y1="100" y2="250"  />\n                <circle cx="250" cy="325" r="25"  />\n            </g>\n            <g>\n                <circle cx="350" cy="25" r="25"  />\n                <line x1="350" x2="350" y1="100" y2="250"  />\n                <circle cx="350" cy="325" r="25"  />\n            </g>\n            <g>\n                <circle cx="450" cy="25" r="25" />\n                <line x1="450" x2="450" y1="100" y2="250"  />\n                <circle cx="450" cy="325" r="25" />\n            </g>\n            <g>\n                <circle cx="550" cy="25" r="25" />\n                <line x1="550" x2="550" y1="100" y2="250"  />\n                <circle cx="550" cy="325" r="25"  />\n            </g>\n            <g>\n                <circle cx="650" cy="25" r="25"  />\n                <line x1="650" x2="650" y1="100" y2="250"  />\n                <circle cx="650" cy="325" r="25"  />\n            </g>\n        </mask>\n    </defs>\n    <g filter="url(#goo)">\n        <rect x="0" y="0" width="100%" height="100%" fill="url(#g)" mask="url(#mask)" />\n    </g>\n</svg>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    @keyframes drop {\n        0%,\n        5% {\n            translate: 0 -50%;\n        }\n        95%,\n        100% {\n            translate: 0 50%;\n        }\n    }\n\n    @keyframes pulse {\n        0%,\n        20% {\n            transform: scale(1);\n        }\n        50%,\n        100% {\n            transform: scale(0);\n        }\n    }\n    \n    :root {\n        --speed: 0.875s;\n        --fill-color: white;\n        --stroke-width: 50;\n        --stroke-color: white;    \n    }\n\n    .loading {\n        display: block;\n        width: 50vmin;\n        height: auto;\n    \n        g {\n            &:nth-of-type(1) {\n                --delay: 0.35;\n            }\n            \n            &:nth-of-type(2) {\n                --delay: 0.5;\n            }\n            \n            &:nth-of-type(3) {\n                --delay: 0.75;\n            }\n            \n            &:nth-of-type(4) {\n                --delay: 1;\n            }\n            \n            &:nth-of-type(5) {\n                --delay: 0.75;\n            }\n            \n            &:nth-of-type(6) {\n                --delay: 0.5;\n            }\n            \n            &:nth-of-type(7) {\n                --delay: 0.35;\n            }\n        }\n        \n        line {\n            stroke-width: var(--stroke-width);\n            stroke: var(--stroke-color);\n            stroke-linecap: round;\n            transform-origin: 50% 50%;\n            translate: 0 -50%;\n            animation: drop var(--speed) calc((sin(var(--delay)) * -1s)) infinite\n            alternate ease-in-out;\n        }\n        line,\n        circle {\n            transform-box: fill-box;\n        }\n    \n        circle {\n            fill: var(--fill-color);\n            \n            &:first-of-type {\n                transform-origin: 50% 100%;\n                animation: pulse calc(var(--speed) * 2) calc((sin(var(--delay)) * -1s))\n              infinite ease-in-out;\n            }\n            \n            &:last-of-type {\n                transform-origin: 50% 0%;\n                animation: pulse calc(var(--speed) * 2)\n              calc(((sin(var(--delay)) * -1s) + (var(--speed) * -1))) infinite\n              ease-in-out;\n            }\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/KKYgbGb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKYgbGb"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"<line>"})," 和 ",(0,c.jsx)(n.code,{children:"<circle>"})," 绘制了 Loading 中的图形，图形还应用了 SVG 的滤镜、遮罩和渐变等效果。Loading 的动画则是由 CSS 控制的。"]}),"\n",(0,c.jsxs)(n.h2,{id:"小结",children:["小结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 SVG 中，可以使用一些基本图形元素来绘制各种形状，包括矩形（",(0,c.jsx)(n.code,{children:"<rect>"}),"）、圆形（",(0,c.jsx)(n.code,{children:"<circle>"}),"）、椭圆（",(0,c.jsx)(n.code,{children:"<ellipse>"}),"）、直线（",(0,c.jsx)(n.code,{children:"<line>"}),"）、折线（",(0,c.jsx)(n.code,{children:"<polyline>"}),"）和多边形（",(0,c.jsx)(n.code,{children:"<polygon>"}),"）等。这些基本图形都可以使用 ",(0,c.jsx)(n.code,{children:"<path>"})," 元素来绘制，而且 ",(0,c.jsx)(n.code,{children:"<path>"})," 元素是 SVG 中最灵活的一个元素，你可以使用它绘制出任何你想要的图形。可以说，它只有你想不到的，没有它做不到的。"]}),"\n",(0,c.jsx)(n.p,{children:"这些基本图形元素可以通过设置属性（如位置、大小、颜色、边框等）来创建各种形状，并且可以与 CSS 和 JavaScript 进行交互。SVG 的可扩展性和灵活性使其成为在 Web 上绘制图形和图表的理想选择。"})]})}function J(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(T,{...e})}):T(e)}let W=J;J.__RSPRESS_PAGE_META={},J.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F7-%E5%88%9D%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E5%85%83%E7%B4%A0.md"]={toc:[{text:"SVG 图形元素简介",id:"svg-图形元素简介",depth:2},{text:"如何使用图形元素绘制图形",id:"如何使用图形元素绘制图形",depth:2},{text:"矩形",id:"矩形",depth:3},{text:"椭圆和圆",id:"椭圆和圆",depth:3},{text:"直线",id:"直线",depth:3},{text:"折线",id:"折线",depth:3},{text:"多边形",id:"多边形",depth:3},{text:"使用设计软件绘制图形",id:"使用设计软件绘制图形",depth:2},{text:"SVG 路径",id:"svg-路径",depth:2},{text:"图形元素的 DOM 接口",id:"图形元素的-dom-接口",depth:2},{text:"案例",id:"案例",depth:2},{text:"绘制圣诞装饰品",id:"绘制圣诞装饰品",depth:3},{text:"绘制图表",id:"绘制图表",depth:3},{text:"非矩形页头",id:"非矩形页头",depth:3},{text:"菜单切换按钮",id:"菜单切换按钮",depth:3},{text:"Loading 动效",id:"loading-动效",depth:3},{text:"小结",id:"小结",depth:2}],title:"7-初级篇：SVG 基本图形元素",headingTitle:"7-初级篇：SVG 基本图形元素",frontmatter:{}}}}]);