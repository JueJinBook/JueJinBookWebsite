"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["44531"],{156578:function(e,n,i){e.exports=i.p+"static/image/146c348d454ae8f0fc58d0c7d39088c3.6b4dc768.png"},170010:function(e,n,i){e.exports=i.p+"static/image/58b2ea1b03830b653240fc8f31125b09.a2f1815a.png"},157886:function(e,n,i){e.exports=i.p+"static/image/fe0affc6469ddc22a3ac923d9458cad5.01c386e5.png"},349305:function(e,n,i){i.r(n),i.d(n,{default:()=>o});var r=i(552676),s=i(740453);let d=i.p+"static/image/3f9be8ebdce7dffb58220e932fde613f.abfd94af.png";var c=i(170010);let t=i.p+"static/image/33f22baff60071322241f5d950ca7fd8.4c125dc1.png";var h=i(157886),l=i(156578);let a=i.p+"static/image/dd3925992aec86988b36248b362e6a40.08fd47d4.png";function x(e){let n=Object.assign({p:"p",h2:"h2",a:"a",strong:"strong",ul:"ul",li:"li",blockquote:"blockquote",img:"img",pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"在解析了社区框架的原理之后，接下来需要基于微前端原理并参考社区框架进行通用的 JavaScript 框架设计。在此之前，首先需要考虑通用库的工程化设计。因此在接下来的几节课程中会讲解通用库的工程化设计以及相关的原理知识，为框架设计做工程化准备。"}),"\n",(0,r.jsxs)(n.h2,{id:"设计要素",children:["设计要素",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#设计要素",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在",(0,r.jsx)(n.strong,{children:"框架原理：设计要素"}),"中讲解了微前端框架的作用，主要是为了辅助微前端中的主应用可以快速集成相应的微应用，该框架本质上是一个通用的 JavaScript 库。在 Web 前端的开发中，通用库都会发布成 NPM 库包，从而可以在各个不同的主应用中引入使用。为了提升库的设计质量，一般需要考虑以下设计要素："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"构建工具："})," 通过构建工具进行库构建，构建 ES5 兼容性代码和输出规范"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"按需加载："})," NPM 包可以支持按需引入或 Tree Shaking，减少业务应用的引入体积"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"版本发布："})," 基于构建产物进行库包的版本发布和安装使用"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"代码检查："})," 开发态代码有统一的检查工具，确保上传到仓库的代码没有 ESLint 错误"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"代码格式："})," 开发态代码有统一的格式工具，提升团队 Code Review 的效率"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"提交规范："})," 对代码进行提交时的拦截设计，包括 ESLint 校验、单元测试等"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"更新日志："})," 可以根据规范的提交说明自动生成版本日志"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"单元测试："})," 在提交代码时单元测试可以确保代码的正确性和稳定性"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"文档指南："})," 提供配套的 API 说明文档，提升开发者的开发效率"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CI / CD："})," 可以对代码进行持续集成和持续部署"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"README 说明："})," 供当前库包的介绍、安装指南和使用说明等"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"一般在库的设计过程中，需要考虑如何使库的设计更加规范、高效和稳定，而在库的使用过程中，则需要考虑业务的引入体验，确保使用的高效和稳定。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"温馨提示：也可以在业务应用的开发中使用部分工程化设计，从而提升应用的开发质量。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"构建工具",children:["构建工具",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建工具",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在",(0,r.jsx)(n.strong,{children:"方案了解：NPM 方案"}),"中已经重点讲解了为什么需要使用构建工具（简化主应用的构建配置、提升主应用的构建速度、适配浏览器环境），一般会将主应用引入的 NPM 库包进行 ES5 兼容性和模块化标准处理，采用构建工具进行库构建的优势在于："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"开发态提效："})," 框架库的开发态可以使用最新的 ES 标准以及 TypeScript 语法设计"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"模块化标准："})," 如果主应用的打包工具支持 ES Module 的引入方式并支持 TreeShaking 特性，那么可以通过构建工具将框架库构建出 ES Module 标准，当然也可以构建出 CommonJS、UMD 等多种标准，从而可以适配不同的主应用环境"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"代码智能提示："})," 采用 TypeScript 进行设计后，可以通过构建工具自动生成 TypeScript 声明文件，当主应用引入框架库时，可以自动提示框架库的 API ，包括函数功能说明、出参入参格式、对象的属性等，并可以支持 ESLint 的校验工作"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在",(0,r.jsx)(n.strong,{children:"方案了解：NPM 方案"}),"中已经重点讲解了构建工具的作用，本课程在工程化设计中将继续讲解构建相关的实践知识，从而方便大家了解 Web 应用和框架（通用）库的构建差异。"]}),"\n",(0,r.jsxs)(n.h2,{id:"按需加载",children:["按需加载",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#按需加载",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在应用中经常会考虑组件库的按需加载，例如在主应用中如果只需要使用 Antd 的 Button 组件，在设计代码时不应该将 Button 组件以外的其他组件代码打包到主应用，从而增加不必要的应用体积。为了使得主应用可以在引入微前端框架时能够按需加载，往往都需要将框架的库功能按维度进行拆分，例如："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"NPM 包："})," 将设计要素通过 Monorepo 的方式拆分成不同的 NPM 包实现按需引入"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"目标文件："})," 将设计要素拆分成不同的文件夹，通过引入 NPM 包下的文件夹实现按需引入"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"本课程接下来会重点讲解按目标文件引入的设计方案，并实现相应的构建脚本设计。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"温馨提示：如果需要设计类似于 Lodash 的工具库，那么按需引入的设计非常有用。因为在业务中使用工具方法时，往往希望按需使用。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"版本发布",children:["版本发布",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#版本发布",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在多人协作的情况下，如何确保发布的产物和版本符合开发者约定的规范。本课程会重点讲解基于按需加载构建产物的自动化发布脚本设计，该脚本："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"支持发布前的构建产物预处理"}),"\n",(0,r.jsx)(n.li,{children:"支持发布前的检测处理（可以是开发者约定的发布规范）"}),"\n",(0,r.jsx)(n.li,{children:"支持一键发布处理"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"代码检测--代码格式",children:["代码检测 & 代码格式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码检测--代码格式",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在框架库的设计过程中，如何确保设计的代码符合社区的标准规范。本课程接下来会重点讲解 ESLint 和 Prettier 相关的知识点，包括："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"如何支持项目的 TypeScript 进行代码校验"}),"\n",(0,r.jsx)(n.li,{children:"ESLint 知识点：层叠配置、自定义解释器、插件以及共享配置等"}),"\n",(0,r.jsx)(n.li,{children:"Prettier 和 ESLint 的关系"}),"\n",(0,r.jsx)(n.li,{children:"如何配置 ESLint 和 Prettier 的 VS Code 保存自动格式化功能"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"提交规范",children:["提交规范",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#提交规范",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在多人协作的开发过程中，并不是所有的开发者都会自动开启 ESLint 和 Prettier 功能进行实时检查和格式修复，这会导致提交的代码不符合检查标准和格式规范。为了防止不符合校验规范的代码被提交到远程仓库，可以在提交代码时使用工具进行检测，本课程接下来会重点讲解提交检测相关的知识原理和工具，从而帮助大家在多人协作的设计过程中确保提交规范的代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 27.工程设计：引言\ngit add .  \n# 执行\ngit commit -m \"feat: add lint git hook\"\n✔ Preparing lint-staged...\n❯ Running tasks for staged files...\n  # 可以发现读取了 .lintstagedrc.js 文件\n  ❯ .lintstagedrc.js — 6 files\n    ❯ src/**/*.ts — 1 file\n      # 校验失败\n      ✖ eslint [FAILED]\n↓ Skipped because of errors from tasks. [SKIPPED]\n✔ Reverting to original state because of errors...\n✔ Cleaning up temporary files...\n\n✖ eslint:\n\n/Users/zhuxiankang/Desktop/Github/micro-framework/src/index.ts\n  15:3   error  Unsafe return of an `any` typed value                                                   @typescript-eslint/no-unsafe-return\n  15:10  error  Operands of '+' operation with any is possible only with string, number, bigint or any  @typescript-eslint/restrict-plus-operands\n\n✖ 2 problems (2 errors, 0 warnings)\n\n# husky 中的退出执行（git commit 失败）\nhusky - pre-commit hook exited with code 1 (error)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"变更日志",children:["变更日志",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#变更日志",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"版本的更新日志可以帮助大家更好的了解微前端框架库设计的版本功能信息，当微前端框架有变更时，大家可能希望通过更新日志了解变更的内容是什么、为什么要进行变更、以及如何进行变更，本课程接下来将重点讲解如何生成规范的 Commit 提交说明，以及如何利用工具自动生成更新日志："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"单元测试",children:["单元测试",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单元测试",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"单元测试可以模仿开发者对于 API 的调用过程，并且可以通过边界情况来测试 API 是否存在异常情况，确保 API 的设计可得到预期的结果，从而提升代码质量。当我们对 API 进行重构或者优化时，可以通过单元测试的测试案例来确保代码的改动不会影响最终的运行结果，从而提升代码设计的稳定性。"}),"\n",(0,r.jsx)(n.p,{children:"本课程会讲解如何利用 Jest 进行单元测试，包括开发前的测试配置准备、开发中的实时查看测试情况以及开发后的测试钩子配置，从而确保单元测试可以覆盖整个开发链路，最终可以提升框架库的版本发布稳定性："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"Jest显示.gif"})}),"\n",(0,r.jsxs)(n.h2,{id:"文档指南",children:["文档指南",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文档指南",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"开发通用的框架库往往需要配套相应的文档指南，从而使开发者了解如何使用该框架。本课程会讲解如何使用 VuePress 静态网站生成器来设计框架库的文档站点，包括 VuePress 的配置以及如何利用 TSDoc 注释规范来自动生成 API 文档。如下所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"ci--cd",children:["CI / CD",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ci--cd",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"当我们实现了按需构建、版本发布、代码检查、代码格式校验、生成变更日志、单元测试以及文档设计之后，接下来会讲解如何通过自动化来自动串联和执行上述设计功能，从而提高代码集成和发布的效率。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:"GithubActionsCI.gif"})}),"\n",(0,r.jsxs)(n.h2,{id:"readme-说明",children:["README 说明",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#readme-说明",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["主要讲解了如何在项目中编写规范的 README 说明文档，并详细讲解了如何在\xa0",(0,r.jsx)(n.code,{children:"README.md"}),"\xa0中添加徽章。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本节课主要讲解微前端框架的工程化设计要素，接下来将逐一讲解各个设计要素的功能实现和部分设计要素的工作原理，旨在帮助大家更好的理解通用库的工程化设计实践。"})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}let o=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F27.%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%BC%95%E8%A8%80.md"]={toc:[{text:"设计要素",id:"设计要素",depth:2},{text:"构建工具",id:"构建工具",depth:2},{text:"按需加载",id:"按需加载",depth:2},{text:"版本发布",id:"版本发布",depth:2},{text:"代码检测 & 代码格式",id:"代码检测--代码格式",depth:2},{text:"提交规范",id:"提交规范",depth:2},{text:"变更日志",id:"变更日志",depth:2},{text:"单元测试",id:"单元测试",depth:2},{text:"文档指南",id:"文档指南",depth:2},{text:"CI / CD",id:"ci--cd",depth:2},{text:"README 说明",id:"readme-说明",depth:2},{text:"小结",id:"小结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);