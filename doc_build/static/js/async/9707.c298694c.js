"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["9707"],{400174:function(n,r,e){e.r(r),e.d(r,{default:()=>c});var s=e(552676),l=e(740453);function i(n){let r=Object.assign({h1:"h1",a:"a",p:"p",ol:"ol",li:"li",h2:"h2",pre:"pre",code:"code",strong:"strong",blockquote:"blockquote",br:"br",ul:"ul"},(0,l.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"第09章数组切片和集合二探索一组数据",children:["第09章—数组、切片和集合二｜探索一组数据",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#第09章数组切片和集合二探索一组数据",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"\uFEFF上一讲我们介绍了Go语言中的容器，即数组、切片和集合变量，并掌握了它们各自的声明和赋值技巧。我们都知道，为某个变量赋值，最终是为了使用它。那么，这一节我们会继续深入，介绍如下内容："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"获取数组、切片和集合的元素个数"}),"\n",(0,s.jsx)(r.li,{children:"获取和修改数组、切片和集合的元素的值"}),"\n",(0,s.jsx)(r.li,{children:"数组、切片和集合的循环遍历"}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"获取元素个数",children:["获取元素个数",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#获取元素个数",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"相信朋友们还记得那个查找素数的例子，在上一讲中我们实现了查找范围是10以内的素数。现在要求变了，需要查找1000以内素数的个数。"}),"\n",(0,s.jsx)(r.p,{children:"为了方便阅读，我把上一讲中的代码示例搬了过来："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"func main() {\r\n   var resultSlice []int\r\n   for i := 2; i < 10; i++ {\r\n      //假定i为素数\r\n      flag := true\r\n      for j := 2; j < i; j++ {\r\n         if i%j == 0 {\r\n            //当i能被某个整数整除时，不是素数\r\n            flag = false\r\n         }\r\n      }\r\n      //如果依旧为true，则i为素数\r\n      if flag {\r\n         //将素数存放到resultArray数组中\r\n         resultSlice = append(resultSlice, i)\r\n      }\r\n   }\r\n   fmt.Println(resultSlice)\r\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"本例使用了切片而非数组或集合，为什么这样做呢？"}),"\n",(0,s.jsx)(r.p,{children:"因为我们不清楚容器内到底有多少个元素，因此数组不合适。查找到的结果是若干正整数，无需“键-值对”这样的数据结构，因此集合也不合适。"}),"\n",(0,s.jsx)(r.p,{children:"若要改变查找范围为1000以内，只需要修改最外层for循环的终止条件：将i < 10改为i < 1000即可。但运行后发现，输出实在是太多了。10以内的素数仅有4个，看一眼便可得出结论。但1000以内的话，简直无法数得清。"}),"\n",(0,s.jsxs)(r.p,{children:["幸好Go语言内置了获取容器内元素个数的函数，这个函数",(0,s.jsx)(r.strong,{children:"对数组、切片和集合都有效，且用法相同"}),"，调用格式为："]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"len(variable)\n"})}),"\n",(0,s.jsx)(r.p,{children:"其中，len()表示调用函数，是固定写法；variable被称为“参数”，表示向函数中“传递”的变量；调用后，函数将返回元素个数，返回值的类型是int。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"\uD83D\uDCA1 提示： 有关函数的更多内容，将在下一讲中详述，这里仅需做到了解、会用即可。"})}),"\n",(0,s.jsx)(r.p,{children:"对于本例而言，获取素数个数只需编写如下代码即可实现："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"fmt.Println(len(resultSlice))\n"})}),"\n",(0,s.jsx)(r.p,{children:"下面，将这句代码添加到原有代码中，再次运行程序即可看到控制台上输出元素个数了。"}),"\n",(0,s.jsxs)(r.p,{children:["在实际工作中，对于函数的调用是很常见的做法。通过本例能体会到，作为函数的调用者，",(0,s.jsx)(r.strong,{children:"无需关注函数内部"}),"是如何实现的（如本例中统计容器内元素个数的具体实现）。这一机制极大降低了重复功能的代码量，还能在一定程度上降低Bug的数量。"]}),"\n",(0,s.jsxs)(r.p,{children:["但劣势也很明显，当我们不清楚函数在做什么时，就没有信心调用它了。此时，可以通过",(0,s.jsx)(r.strong,{children:"函数名"}),"（如本例的len()函数，对应英文单词的length，表示容器的长度，也就是容器内元素的个数）、阅读",(0,s.jsx)(r.strong,{children:"函数注释"}),"等方法来了解（回忆一下曾经讲过的“",(0,s.jsx)(r.strong,{children:"代码规范"}),"”，在",(0,s.jsx)(r.a,{href:"https://juejin.cn/book/7039174186522116131/section/7047596606715068430",target:"_blank",rel:"noopener noreferrer",children:"第5讲 附录二"}),"）。"]}),"\n",(0,s.jsx)(r.p,{children:"此外，对于陌生的函数，还可以在已知结果的前提下进行初步验证。对于本例而言，就可以先保持“查找10以内的素数”这一条件不变。然后调用len()函数获取resultSlice切片变量的元素个数，看看是不是4。如此，便可初步验证len()函数的作用和正确性了。"}),"\n",(0,s.jsx)(r.p,{children:"当然，这样的验证做得越多，结果越可信。这种“验证”的思路还可用于代码测试，鉴于小册的内容结构，这部分暂不展开详述，在后续的章节中再做介绍。"}),"\n",(0,s.jsxs)(r.h2,{id:"获取修改元素的值",children:["获取/修改元素的值",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#获取修改元素的值",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"有些时候，我们还需要获取和/或修改某个特定元素的值。我们还是用查找素数作为例子，这次的要求是逐个输出10以内整数是否为素数。结果如下："}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["0 false",(0,s.jsx)(r.br,{}),"\n","1 false",(0,s.jsx)(r.br,{}),"\n","2 true",(0,s.jsx)(r.br,{}),"\n","3 true",(0,s.jsx)(r.br,{}),"\n","4 false",(0,s.jsx)(r.br,{}),"\n","5 true",(0,s.jsx)(r.br,{}),"\n","6 false",(0,s.jsx)(r.br,{}),"\n","7 true",(0,s.jsx)(r.br,{}),"\n","8 false",(0,s.jsx)(r.br,{}),"\n","9 false",(0,s.jsx)(r.br,{}),"\n","10 false"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"可以看到，第3、4、6、8个元素（索引值为2、3、5、7）的值为true，它们都是素数，其它元素值为false，不是素数。请大家想想看，如何实现呢？"}),"\n",(0,s.jsx)(r.p,{children:"为了讲解元素值的修改方法，在此给各位提供一个实现思路，一共分为三个步骤："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"声明元素个数为11，值类型为bool的数组。并附所有元素初值为false，假定所有元素皆非素数；"}),"\n",(0,s.jsx)(r.li,{children:"判断2-10范围内的素数，若是素数，将数组相应索引表示的值改为true；"}),"\n",(0,s.jsx)(r.li,{children:"输出数组元素的索引和索引表示的值。"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"接下来实现上面三个步骤。"}),"\n",(0,s.jsx)(r.p,{children:"声明并赋初值是上一讲的内容，使用for循环实现："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"// 声明元素类型为bool的数组。索引表示正整数；值表示是否为素数，true为是。\r\nvar resultArray [11]bool\r\n// 赋初值，皆为false\r\nfor i := 0; i < 11; i++ {\r\n   resultArray[i] = false\r\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"接着，修改查找素数的逻辑如下："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"// 素数判定\r\nfor i := 2; i < 10; i++ {\r\n   //假定i为素数\r\n   flag := true\r\n   for j := 2; j < i; j++ {\r\n      if i%j == 0 {\r\n         //当i能被某个整数整除时，不是素数\r\n         flag = false\r\n      }\r\n   }\r\n   //如果依旧为true，则i为素数\r\n   if flag {\r\n      resultArray[i] = true\r\n   }\r\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"由于0和1不是素数，因此无需理会，循环依旧从2开始。当查找到素数时，将resultArray数组中相应索引所表示的值改为true。如：2是素数，resultArray[2]的值将被改为true。"}),"\n",(0,s.jsx)(r.p,{children:"最后，使用循环依次输出resultArray的索引和索引表示的值："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"for i := 0; i < 11; i++ {\r\n   fmt.Println(i, resultArray[i])\r\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"将上述三个步骤依次结合起来，并运行程序，最终将得到所要求的输出结果。"}),"\n",(0,s.jsx)(r.p,{children:"在实现的过程中不难发现，访问数组中元素时，代码为：resultArray[i]；修改数组中元素的值实际和赋值相同。"}),"\n",(0,s.jsx)(r.p,{children:"由此我们归纳出如下规律："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"修改数组、切片和集合中的值，方法与赋值相同"}),"；"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"获取数组或切片的值，格式为variable[index]"}),"。variable表示数组或切片的变量名；index表示索引值。"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"获取集合的值，格式为variable[key_value]"}),"。variable表示集合的变量名；key_value表示键的值。"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"循环遍历",children:["循环遍历",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#循环遍历",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"在上一个例子中，我们使用了for循环实现了resultArray数组的赋值和输出。"}),"\n",(0,s.jsx)(r.p,{children:"对于数组和切片而言，使用for循环是实现遍历的途径之一，但往往无法适用于集合。"}),"\n",(0,s.jsx)(r.p,{children:"对于数组和切片而言，索引是从0开始的整数，可以使用索引作为循环条件。但集合的的取值方式是通过“键”，而键的值就不一定是数字了。非数字的键，往往会是字符串。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"❗️ 注意： 数组和切片是有序存储的，因此可用索引来循环；集合是无序的，在使用时要格外小心。"})}),"\n",(0,s.jsx)(r.p,{children:"我们还是回顾上一讲中使用过的集合示例："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'func main() {\r\n   var studentInfos = make(map[string]string)\r\n   studentInfos["0001"] = "王小红"\r\n   studentInfos["0002"] = "李小明"\r\n   studentInfos["0003"] = "张三丰"\r\n   studentInfos["0004"] = "孙小贝"\r\n   studentInfos["0005"] = "何明明"\r\n   // 输出语句\r\n   fmt.Println(studentInfos)\r\n}\n'})}),"\n",(0,s.jsx)(r.p,{children:"运行后，控制台会一口气依次输出所有studentInfos集合的键值对，如下所示："}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"map[0001:王小红 0002:李小明 0003:张三丰 0004:孙小贝 0005:何明明]"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"现在，需要输出更易于使用者理解的格式，具体如下："}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["学号： 0004 姓名： 孙小贝",(0,s.jsx)(r.br,{}),"\n","学号： 0005 姓名： 何明明",(0,s.jsx)(r.br,{}),"\n","学号： 0001 姓名： 王小红",(0,s.jsx)(r.br,{}),"\n","学号： 0002 姓名： 李小明",(0,s.jsx)(r.br,{}),"\n","学号： 0003 姓名： 张三丰"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"显然，需要逐个获取集合中的键值对了。"}),"\n",(0,s.jsx)(r.p,{children:"除了for循环外，Go语言还提供了range关键字。与for结合，也可以实现循环遍历，其使用格式如下："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"for index, value := range variable {\r\n    // 循环体\r\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"其中，index表示索引或键的值；value表示元素的值；variable表示数组、切片或集合变量；由大括号包裹的部分是循环体，可以使用index和value变量。"}),"\n",(0,s.jsx)(r.p,{children:"对于本例，可以如下实现："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'for key, value := range studentInfos {\r\n   fmt.Println("学号：", key, "姓名：", value)\r\n}\n'})}),"\n",(0,s.jsx)(r.p,{children:"再次运行，即可得到所要求的输出结果了。"}),"\n",(0,s.jsxs)(r.p,{children:["这种for与range结合实现循环遍历的结构，也被称为",(0,s.jsx)(r.strong,{children:"for-range结构"}),"。这种结构同样适用于数组和切片。"]}),"\n",(0,s.jsxs)(r.h2,{id:"小结",children:["小结",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"\uD83C\uDF89 恭喜，您完成了本次课程的学习！"}),"\n",(0,s.jsx)(r.p,{children:"\uD83D\uDCCC 以下是本次课程的重点内容总结："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"获取数组、切片和集合的元素个数"}),"\n",(0,s.jsx)(r.li,{children:"获取和修改数组、切片和集合的元素的值"}),"\n",(0,s.jsx)(r.li,{children:"数组、切片和集合的循环遍历"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"在实际使用数组、切片和集合时，往往是综合本讲和上一讲内容中的知识点一起使用的。"}),"\n",(0,s.jsx)(r.p,{children:"比如，在使用for循环遍历数组时，需要首先获取元素个数，然后将其作为循环结束的条件。否则，将会引发下表越界错误，导致程序出错。"}),"\n",(0,s.jsx)(r.p,{children:"再比如，使用for-range循环，再循环体内使用元素的值参与其它运算，抑或是根据元素值或集合中键的值进行元素筛选，等等。"}),"\n",(0,s.jsx)(r.p,{children:"➡️ 在下次课程中，我们会介绍如下内容："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Go语言中的“函数”，包括：","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"函数的定义"}),"\n",(0,s.jsx)(r.li,{children:"函数的调用"}),"\n"]}),"\n"]}),"\n"]})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,l.ah)(),n.components);return r?(0,s.jsx)(r,{...n,children:(0,s.jsx)(i,{...n})}):i(n)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E9%9B%B6%E5%9F%BA%E7%A1%80%E9%80%9A%E5%85%B3Go%E8%AF%AD%E8%A8%80%2F%E7%AC%AC09%E7%AB%A0%E2%80%94%E6%95%B0%E7%BB%84%E3%80%81%E5%88%87%E7%89%87%E5%92%8C%E9%9B%86%E5%90%88%E4%BA%8C%EF%BD%9C%E6%8E%A2%E7%B4%A2%E4%B8%80%E7%BB%84%E6%95%B0%E6%8D%AE.md"]={toc:[{text:"获取元素个数",id:"获取元素个数",depth:2},{text:"获取/修改元素的值",id:"获取修改元素的值",depth:2},{text:"循环遍历",id:"循环遍历",depth:2},{text:"小结",id:"小结",depth:2}],title:"第09章—数组、切片和集合二｜探索一组数据",headingTitle:"第09章—数组、切片和集合二｜探索一组数据",frontmatter:{}}}}]);