"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["80078"],{791877:function(e,n,s){s.r(n),s.d(n,{default:()=>g});var r=s(552676),c=s(740453);let i=s.p+"static/image/a83791f072039cfcfb52ae404094b57b.d67ad86c.webp",o=s.p+"static/image/ec44a84598fd4e743e61fb819b76a634.a97fe4f8.webp",a=s.p+"static/image/89b1fb39ba028bb1906dfca858b2181f.dae7bf09.webp",d=s.p+"static/image/fe58e29b52a6b5e22c36c94686f349cd.31f5bc4a.webp",l=s.p+"static/image/ad6e5973f85b3a79d56beffb32a4f5f1.9f2d4a84.webp",t=s.p+"static/image/c20f9ee38a0fd3cf47fe9c3a73c6d271.38071e17.webp",h=s.p+"static/image/4587df84a4ad44060624d884c1566d76.ee959cda.webp",p=s.p+"static/image/d7d59f21a2d1279321b0cab6ce4ff6a0.b0907b05.webp",j=s.p+"static/image/e117428aecb5f73a2e3cff736e8b3234.1befc503.webp",x=s.p+"static/image/3a59b23d521567b5195e04bda4a1b288.ca12b5ba.webp";function m(e){let n=Object.assign({p:"p",ul:"ul",li:"li",code:"code",h2:"h2",a:"a",pre:"pre",blockquote:"blockquote",strong:"strong",img:"img",ol:"ol"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"前面章节我们已经详细探讨 Webpack 中如何使用分包、代码压缩提升应用执行性能。除此之外，还有不少普适、细碎的方法，能够有效降低应用体积，提升网络分发性能，包括："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"使用动态加载，减少首屏资源加载量；"}),"\n",(0,r.jsxs)(n.li,{children:["使用 ",(0,r.jsx)(n.code,{children:"externals"}),"、Tree-Shaking、Scope Hoisting 特性，减少应用体积；"]}),"\n",(0,r.jsxs)(n.li,{children:["正确使用 ",(0,r.jsx)(n.code,{children:"[hash]"})," 占位符，优化 HTTP 资源缓存效率；"]}),"\n",(0,r.jsx)(n.li,{children:"等等。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"下面我们一一展开，解释每条最佳实践以及背后的逻辑。"}),"\n",(0,r.jsxs)(n.h2,{id:"动态加载",children:["动态加载",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动态加载",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Webpack 默认会将同一个 Entry 下的所有模块全部打包成一个产物文件 —— 包括那些与页面 ",(0,r.jsx)(n.a,{href:"https://web.dev/critical-rendering-path/",target:"_blank",rel:"noopener noreferrer",children:"关键渲染路径"})," 无关的代码，这会导致页面初始化时需要花费多余时间去下载这部分暂时用不上的代码，影响首屏渲染性能，例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import someBigMethod from "./someBigMethod";\n\ndocument.getElementById("someButton").addEventListener("click", () => {\n  someBigMethod();\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["逻辑上，直到点击页面的 ",(0,r.jsx)(n.code,{children:"someButton"})," 按钮时才会调用 ",(0,r.jsx)(n.code,{children:"someBigMethod"})," 方法，因此这部分代码没必要出现在首屏资源列表中，此时我们可以使用 Webpack 的动态加载功能将该模块更改为异步导入，修改上述代码："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'document.getElementById("someButton").addEventListener("click", async () => {\n  // 使用 `import("module")` 动态加载模块\n  const someBigMethod = await import("./someBigMethod");\n  someBigMethod();\n});\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：示例代码已上传到 ",(0,r.jsx)(n.a,{href:"https://github.com/Tecvan-fe/webpack-book-samples/tree/main/perf-lazy-load",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["此时，重新构建将产生额外的产物文件 ",(0,r.jsx)(n.code,{children:"src_someBigMethod_js.js"}),"，这个文件直到执行 ",(0,r.jsx)(n.code,{children:"import"})," 语句时 —— 也就是上例 ",(0,r.jsx)(n.code,{children:"someButton"})," 被点击时才被加载到浏览器，也就不会影响到关键渲染路径了。"]}),"\n",(0,r.jsxs)(n.p,{children:["动态加载是 Webpack 内置能力之一，我们不需要做任何额外配置就可以通过动态导入语句(",(0,r.jsx)(n.code,{children:"import"}),"、",(0,r.jsx)(n.code,{children:"require.ensure"}),")轻易实现。但请 注意，这一特性有时候反而会带来一些新的性能问题：",(0,r.jsx)(n.strong,{children:"一是过度使用会使产物变得过度细碎，产物文件过多，运行时 HTTP 通讯次数也会变多"}),"，在 HTTP 1.x 环境下这可能反而会降低网络性能，得不偿失；",(0,r.jsx)(n.strong,{children:"二是使用时 Webpack 需要在客户端注入一大段用于支持动态加载特性的 Runtime"}),"："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"这段代码即使经过压缩也高达 2.5KB 左右，如果动态导入的代码量少于这段 Runtime 代码的体积，那就完全是一笔赔本买卖了。"}),"\n",(0,r.jsx)(n.p,{children:"因此，请务必慎重，多数情况下我们没必要为小模块使用动态加载能力！目前社区比较常见的用法是配合 SPA 的前端路由能力实现页面级别的动态加载，例如在 Vue 中："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { createRouter, createWebHashHistory } from "vue-router";\n\nconst Home = () => import("./Home.vue");\nconst Foo = () => import(/* webpackChunkName: "sub-pages" */ "./Foo.vue");\nconst Bar = () => import(/* webpackChunkName: "sub-pages" */ "./Bar.vue");\n\n// 基础页面\nconst routes = [\n  { path: "/bar", name: "Bar", component: Bar },\n  { path: "/foo", name: "Foo", component: Foo },\n  { path: "/", name: "Home", component: Home },\n];\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n});\n\nexport default router;\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：示例已上传到 ",(0,r.jsx)(n.a,{href:"https://github.com/Tecvan-fe/webpack-book-samples/tree/main/perf-vue-lazy-load",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，建议 Clone 到本地运行，观察开发者工具 Network 面板的网络通讯情况。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["示例中，",(0,r.jsx)(n.code,{children:"Home/Foo/Bar"})," 三个组件均通过 ",(0,r.jsx)(n.code,{children:"import()"})," 语句动态导入，这使得仅当页面切换到相应路由时才会加载对应组件代码。另外，",(0,r.jsx)(n.code,{children:"Foo"})," 与 ",(0,r.jsx)(n.code,{children:"Bar"})," 组件的导入语句比较特殊："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import(/* webpackChunkName: "sub-pages" */ "./Bar.vue");\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"webpackChunkName"})," 用于指定该异步模块的 Chunk 名称，相同 Chunk 名称的模块最终会打包在一起，这一特性能帮助开发者将一些关联度较高，或比较细碎的模块合并到同一个产物文件，能够用于管理最终产物数量。"]}),"\n",(0,r.jsxs)(n.h2,{id:"http-缓存优化",children:["HTTP 缓存优化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#http-缓存优化",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["注意，Webpack 只是一个工程化构建工具，没有能力决定应用最终在网络分发时的缓存规则，但我们可以调整产物文件的名称(通过 Hash)与内容(通过 ",(0,r.jsx)(n.a,{href:"https://webpack.js.org/guides/code-splitting/",target:"_blank",rel:"noopener noreferrer",children:"Code Splitting"}),")，使其更适配 HTTP 持久化缓存策略。Code Splitting 相关知识已经在 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7115598540721618944/section/7119035452643868672",target:"_blank",rel:"noopener noreferrer",children:"前面章节"})," 做了详尽介绍，本文接着聊聊文件名 Hash 规则。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"提示：Hash 是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数，不同明文计算出的摘要值不同，所以常常被用作内容唯一标识。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Webpack 提供了一种模板字符串(",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/output/#template-strings",target:"_blank",rel:"noopener noreferrer",children:"Template String"}),")能力，用于根据构建情况动态拼接产物文件名称(",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/output/#outputfilename",target:"_blank",rel:"noopener noreferrer",children:"output.filename"}),")，规则稍微有点复杂，但从性能角度看，比较值得关注的是其中的几个 Hash 占位符，包括："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[fullhash]"}),"：整个项目的内容 Hash 值，项目中任意模块变化都会产生新的 ",(0,r.jsx)(n.code,{children:"fullhash"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[chunkhash]"}),"：产物对应 Chunk 的 Hash，Chunk 中任意模块变化都会产生新的 ",(0,r.jsx)(n.code,{children:"chunkhash"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[contenthash]"}),"：产物内容 Hash 值，仅当产物内容发生变化时才会产生新的 ",(0,r.jsx)(n.code,{children:"contenthash"}),"，因此实用性较高。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["用法很简单，只需要在 ",(0,r.jsx)(n.code,{children:"output.filename"})," 值中插入相应占位符即可，如 ",(0,r.jsx)(n.code,{children:'"[name]-[contenthash].js"'}),"。我们来看个完整例子，假设对于下述源码结构："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"src/\n├── index.css\n├── index.js\n└── foo.js\n"})}),"\n",(0,r.jsx)(n.p,{children:"之后，使用下述配置："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  // ...\n  entry: { index: "./src/index.js", foo: "./src/foo.js" },\n  output: {\n    filename: "[name]-[contenthash].js",\n    path: path.resolve(__dirname, "dist"),\n  },\n  plugins: [new MiniCssExtractPlugin({ filename: "[name]-[contenthash].css" })],\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：示例代码已上传到 ",(0,r.jsx)(n.a,{href:"https://github.com/Tecvan-fe/webpack-book-samples/tree/main/perf-hash",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["示例包含 ",(0,r.jsx)(n.code,{children:"index.js"})," 与 ",(0,r.jsx)(n.code,{children:"foo.js"})," 两个入口，且分别在 ",(0,r.jsx)(n.code,{children:"ouput.filename"})," 与 ",(0,r.jsx)(n.code,{children:"MiniCssExtractPlugin.filename"})," 中使用 ",(0,r.jsx)(n.code,{children:"[contenthash]"})," 占位符，最终构建结果："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：也可以通过占位符传入 Hash 位数，如 ",(0,r.jsx)(n.code,{children:"[contenthash:7]"})," ，即可限定生成的 Hash 长度。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["可以看到每个产物文件名都会带上一段由产物内容计算出的唯一 Hash 值，文件内容不变，Hash 也不会变化，这就很适合用作 HTTP ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#expires_or_max-age",target:"_blank",rel:"noopener noreferrer",children:"持久缓存"})," 资源："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# 18.还有哪些值得学习的应用性能极致优化技巧？\n\nCache-Control: max-age=31536000\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时，产物文件不会被重复下载，一直到文件内容发生变化，引起 Hash 变化生成不同 URL 路径之后，才需要请求新的资源文件，能有效提升网络性能，因此，生产环境下应尽量使用 ",(0,r.jsx)(n.code,{children:"[contenthash]"})," 生成有版本意义的文件名。"]}),"\n",(0,r.jsxs)(n.p,{children:["Hash 规则很好用，不过有一个边际 Case 需要注意：",(0,r.jsx)(n.strong,{children:"异步模块变化会引起主 Chunk Hash 同步发生变化"}),"，例如对于下面这种模块关系："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["构建后将生成入口 ",(0,r.jsx)(n.code,{children:"index.js"})," 与异步模块 ",(0,r.jsx)(n.code,{children:"async-a.js"})," 两个 Chunk 对应的产物："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：示例代码已上传 ",(0,r.jsx)(n.a,{href:"https://github.com/Tecvan-fe/webpack-book-samples/tree/main/perf-hash-case1",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["此时，若异步模块 ",(0,r.jsx)(n.code,{children:"async-a"})," 或其子模块 ",(0,r.jsx)(n.code,{children:"sync-c"})," 发生变化，理论上应该只会影响 ",(0,r.jsx)(n.code,{children:"src_async-a"})," 的 Hash 值，但实际效果却是："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["父级 Chunk(",(0,r.jsx)(n.code,{children:"index"}),")也受到了影响，生成新的 Hash 值，这是因为在 ",(0,r.jsx)(n.code,{children:"index"})," 中需要记录异步 Chunk 的真实路径："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["异步 Chunk 的路径变化自然也就导致了父级 Chunk 内容变化，此时可以用 ",(0,r.jsx)(n.code,{children:"optimization.runtimeChunk"})," 将这部分代码抽取为单独的 Runtime Chunk，例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  entry: { index: "./src/index.js" },\n  mode: "development",\n  devtool: false,\n  output: {\n    filename: "[name]-[contenthash].js",\n    path: path.resolve(__dirname, "dist")\n  },\n  // 将运行时代码抽取到 `runtime` 文件中\n  optimization: { runtimeChunk: { name: "runtime" } },\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"提示：后续章节中我们会专门讲解 Initial Chunk、Async Chunk、Runtime Chunk 三种概念。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["之后，",(0,r.jsx)(n.code,{children:"async-a.js"})," 模块的变更只会影响 Runtime Chunk 内容，不再影响主 Chunk。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["综上，建议至少为生成环境启动 ",(0,r.jsx)(n.code,{children:"[contenthash]"})," 功能，并搭配 ",(0,r.jsx)(n.code,{children:"optimization.runtimeChunk"})," 将运行时代码抽离为单独产物文件。"]}),"\n",(0,r.jsxs)(n.h2,{id:"使用外置依赖",children:["使用外置依赖",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用外置依赖",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["设想一个场景，假如我们手头上有 10 个用 React 构建的 SPA 应用，这 10 个应用都需要各自安装、打包、部署、分发同一套相似的 React 基础依赖，最终用户在访问这些应用时也需要重复加载相同基础包代码，那有没有办法节省这部分流量呢？有 —— 使用 Webpack 的 ",(0,r.jsx)(n.code,{children:"externals"})," 特性。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"externals"})," 的主要作用是将部分模块排除在 Webpack 打包系统之外，例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  // ...\n  externals: {\n    lodash: "_",\n  },\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["使用上述配置后，Webpack 会 ",(0,r.jsx)(n.strong,{children:"预设"})," 运行环境中已经内置 Lodash 库 —— 无论是通过 CDN 还是其它方式注入，所以不需要再将这些模块打包到产物中："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：",(0,r.jsx)(n.code,{children:"externals"})," 不仅适用于优化产物性能，在特定环境下还能用于跳过若干运行时模块，例如 Node 中的 ",(0,r.jsx)(n.code,{children:"fs/net"})," 等，避免将这部分源码错误打包进 Bundle，详情可参考 ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/webpack-node-externals",target:"_blank",rel:"noopener noreferrer",children:"webpack-node-externals"})," 工具。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，使用 ",(0,r.jsx)(n.code,{children:"externals"})," 时必须确保这些外置依赖代码已经被正确注入到上下文环境中，这在 Web 应用中通常可以通过 CDN 方式实现，例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  // ...\n  externals: {\n    react: "React",\n    lodash: "_",\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      templateContent: `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>Webpack App</title>\n  <script defer crossorigin src="//unpkg.com/react@18/umd/react.development.js"><\/script>\n  <script defer crossorigin src="//unpkg.com/lodash@4.17.21/lodash.min.js"><\/script>\n</head>\n<body>\n  <div id="app" />\n</body>\n</html>\n  `,\n    }),\n  ],\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["示例中，",(0,r.jsx)(n.code,{children:"externals"})," 声明了 ",(0,r.jsx)(n.code,{children:"react"})," 与 ",(0,r.jsx)(n.code,{children:"lodash"})," 两个外置依赖，并在后续的 ",(0,r.jsx)(n.code,{children:"html-webpack-plugin"})," 模板中注入这两个模块的 CDN 引用，以此构成完整 Web 应用。"]}),"\n",(0,r.jsx)(n.p,{children:"虽然结果上看浏览器还是得消耗这部分流量，但结合 CDN 系统特性，一是能够就近获取资源，缩短网络通讯链路；二是能够将资源分发任务前置到节点服务器，减轻原服务器 QPS 负担；三是用户访问不同站点能共享同一份 CDN 资源副本。所以网络性能效果往往会比重复打包好很多。"}),"\n",(0,r.jsxs)(n.h2,{id:"使用-tree-shaking-删除多余模块导出",children:["使用 Tree-Shaking 删除多余模块导出",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-tree-shaking-删除多余模块导出",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Tree-Shaking 较早前由 ",(0,r.jsx)(n.a,{href:"https://github.com/Rich-Harris",target:"_blank",rel:"noopener noreferrer",children:"Rich Harris"})," 在 Rollup 中率先实现，Webpack 自 2.0 版本开始接入，是一种基于 ES Module 规范的 Dead Code Elimination 技术，它会在运行过程中静态分析模块之间的导入导出，判断哪些模块导出值没有被其它模块使用 —— 相当于模块层面的 Dead Code，并将其删除。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"6e31845d-7b51-422d-8822-83126c613d7b.gif"})}),"\n",(0,r.jsx)(n.p,{children:"在 Webpack 中，启动 Tree Shaking 功能必须同时满足两个条件："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["配置 ",(0,r.jsx)(n.code,{children:"optimization.usedExports"})," 为 ",(0,r.jsx)(n.code,{children:"true"}),"，标记模块导入导出列表；"]}),"\n",(0,r.jsxs)(n.li,{children:["启动代码优化功能，可以通过如下方式实现：","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["配置 ",(0,r.jsx)(n.code,{children:"mode = production"})]}),"\n",(0,r.jsxs)(n.li,{children:["配置 ",(0,r.jsx)(n.code,{children:"optimization.minimize = true"})]}),"\n",(0,r.jsxs)(n.li,{children:["提供 ",(0,r.jsx)(n.code,{children:"optimization.minimizer"})," 数组"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// webpack.config.js\nmodule.exports = {\n  mode: "production",\n  optimization: {\n    usedExports: true,\n  },\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"之后，Webpack 会对所有使用 ESM 方案的模块启动 Tree-Shaking，例如对于下面的代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// index.js\nimport {bar} from './bar';\nconsole.log(bar);\n\n// bar.js\nexport const bar = 'bar';\nexport const foo = 'foo';\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bar.js"})," 模块导出了 ",(0,r.jsx)(n.code,{children:"bar"})," 、",(0,r.jsx)(n.code,{children:"foo"})," ，但只有 ",(0,r.jsx)(n.code,{children:"bar"})," 值被 ",(0,r.jsx)(n.code,{children:"index"})," 模块使用，经过 Tree Shaking 处理后，",(0,r.jsx)(n.code,{children:"foo"})," 变量会被视作无用代码删除，最终有效的代码结构："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// index.js\nimport {bar} from './bar';\nconsole.log(bar);\n\n// bar.js\nexport const bar = 'bar';\n"})}),"\n",(0,r.jsx)(n.p,{children:"在后面章节中我们会展开讲解 Tree-Shaking 的实现细节及注意事项，此处先略过。"}),"\n",(0,r.jsxs)(n.h2,{id:"使用-scope-hoisting-合并模块",children:["使用 Scope Hoisting 合并模块",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-scope-hoisting-合并模块",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"默认情况下 Webpack 会将模块打包成一个个单独的函数，例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// common.js\nexport default \"common\";\n\n// index.js\nimport common from './common';\nconsole.log(common);\n"})}),"\n",(0,r.jsx)(n.p,{children:"经过 Webpack 打包后会生成："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'"./src/common.js":\n  ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n     const __WEBPACK_DEFAULT_EXPORT__ = ("common");\n     __webpack_require__.d(__webpack_exports__, {\n      /* harmony export */\n      "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n      /* harmony export */\n    });\n  }),\n"./src/index.js":\n  ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n      var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__( /*! ./common */ "./src/common.js");\n      console.log(_common__WEBPACK_IMPORTED_MODULE_0__)\n  })\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这种处理方式需要将每一个模块都包裹进一段相似的函数模板代码中，好看是好看，但浪费网络流量啊。为此，Webpack 提供了 Scope Hoisting 功能，用于 ",(0,r.jsx)(n.strong,{children:"将符合条件的多个模块合并到同一个函数空间"})," 中，从而减少产物体积，优化性能。例如上述示例经过 Scope Hoisting 优化后，生成代码："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n    ;// CONCATENATED MODULE: ./src/common.js\n    /* harmony default export */ const common = ("common");\n    \n    ;// CONCATENATED MODULE: ./src/index.js\n    console.log(common);\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"Webpack 提供了三种开启 Scope Hoisting 的方法："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["使用 ",(0,r.jsx)(n.code,{children:"mode = 'production'"})," 开启生产模式；"]}),"\n",(0,r.jsxs)(n.li,{children:["使用 ",(0,r.jsx)(n.code,{children:"optimization.concatenateModules"})," 配置项；"]}),"\n",(0,r.jsxs)(n.li,{children:["直接使用 ",(0,r.jsx)(n.code,{children:"ModuleConcatenationPlugin"})," 插件。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const ModuleConcatenationPlugin = require('webpack/lib/optimize/ModuleConcatenationPlugin');\n\nmodule.exports = {\n    // 方法1： 将 `mode` 设置为 production，即可开启\n    mode: \"production\",\n    // 方法2： 将 `optimization.concatenateModules` 设置为 true\n    optimization: {\n        concatenateModules: true,\n        usedExports: true,\n        providedExports: true,\n    },\n    // 方法3： 直接使用 `ModuleConcatenationPlugin` 插件\n    plugins: [new ModuleConcatenationPlugin()]\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["三种方法最终都会调用 ",(0,r.jsx)(n.code,{children:"ModuleConcatenationPlugin"})," 完成模块分析与合并操作。"]}),"\n",(0,r.jsxs)(n.p,{children:["与 Tree-Shaking 类似，Scope Hoisting 底层基于 ES Module 方案的 ",(0,r.jsx)(n.a,{href:"https://stackoverflow.com/questions/52965907/what-is-the-meaning-of-static-import-in-es6",target:"_blank",rel:"noopener noreferrer",children:"静态特性"}),"，推断模块之间的依赖关系，并进一步判断模块与模块能否合并，因此在以下场景下会失效："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"非 ESM 模块"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["遇到 AMD、CMD 一类模块时，由于导入导出内容的动态性，Webpack 无法确保模块合并后不会产生意料之外的副作用，因此会关闭 Scope Hoisting 功能。这一问题在导入 NPM 包尤其常见，许多框架都会自行打包后再上传到 NPM，并且默认导出的是兼容性更佳的 CommonJS 包，因而无法使用 Scope Hoisting 功能，此时可通过 ",(0,r.jsx)(n.code,{children:"mainFileds"})," 属性尝试引入框架的 ESM 版本："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  resolve: {\n    // 优先使用 jsnext:main 中指向的 ES6 模块化语法的文件\n    mainFields: ['jsnext:main', 'browser', 'main']\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"模块被多个 Chunk 引用"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"如果一个模块被多个 Chunk 同时引用，为避免重复打包，Scope Hoisting 同样会失效，例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// common.js\nexport default \"common\"\n\n// async.js\nimport common from './common';\n\n// index.js \nimport common from './common';\nimport(\"./async\");\n"})}),"\n",(0,r.jsxs)(n.p,{children:["示例中，入口 ",(0,r.jsx)(n.code,{children:"index.js"})," 与异步模块 ",(0,r.jsx)(n.code,{children:"async.js"})," 同时依赖 ",(0,r.jsx)(n.code,{children:"common.js"})," 文件，",(0,r.jsx)(n.code,{children:"common.js"})," 无法被合并入任一 Chunk，而是作为生成为单独的作用域，最终打包结果："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:' "./src/common.js":\n  (() => {\n    var __WEBPACK_DEFAULT_EXPORT__ = ("common");\n  }),\n "./src/index.js":\n  (() => {\n    var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__( /*! ./common */ "./src/common.js");\n    __webpack_require__.e( /*! import() */ "src_async_js").then(__webpack_require__.bind(__webpack_require__, /*! ./async */ "./src/async.js"));\n  }),  \n'})}),"\n",(0,r.jsxs)(n.h2,{id:"监控产物体积",children:["监控产物体积",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#监控产物体积",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"综合最近几章讨论的 Code Splitting、压缩、缓存优化、Tree-Shaking 等技术，不难看出所谓的应用性能优化几乎都与网络有关，这是因为现代计算机网络环境非常复杂、不稳定，虽然有堪比本地磁盘吞吐速度的 5G 网络，但也还存在大量低速 2G、3G 网络用户，整体而言通过网络实现异地数据交换依然是一种相对低效的 IO 手段，有可能成为 Web 应用执行链条中最大的性能瓶颈。"}),"\n",(0,r.jsxs)(n.p,{children:["因此，站在生产者角度我们有必要尽可能优化代码在网络上分发的效率，用尽可能少的网络流量交付应用功能。所幸 Webpack 专门为此提供了一套 ",(0,r.jsx)(n.a,{href:"https://github.com/webpack/webpack/issues/3216",target:"_blank",rel:"noopener noreferrer",children:"性能监控方案"}),"，当构建生成的产物体积超过阈值时抛出异常警告，以此帮助我们时刻关注资源体积，避免因项目迭代增长带来过大的网络传输，用法："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  // ...\n  performance: {    \n    // 设置所有产物体积阈值\n    maxAssetSize: 172 * 1024,\n    // 设置 entry 产物体积阈值\n    maxEntrypointSize: 244 * 1024,\n    // 报错方式，支持 `error` | `warning` | false\n    hints: "error",\n    // 过滤需要监控的文件类型\n    assetFilter: function (assetFilename) {\n      return assetFilename.endsWith(".js");\n    },\n  },\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：示例代码已上传 ",(0,r.jsx)(n.a,{href:"https://github.com/Tecvan-fe/webpack-book-samples/tree/main/perf-budget",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"若此时产物体积超过 172KB，则报错："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"提示：这里的报错不会阻断构建功能， 依然能正常打包出应用产物。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["那么我们应该设置多大的阈值呢？这取决于项目具体场景，不过，一个比较好的 ",(0,r.jsx)(n.a,{href:"https://web.dev/your-first-performance-budget/#budget-for-quantity-based-metrics",target:"_blank",rel:"noopener noreferrer",children:"经验法则"})," 是确保 ",(0,r.jsx)(n.a,{href:"https://web.dev/critical-rendering-path/",target:"_blank",rel:"noopener noreferrer",children:"关键路径"})," 资源体积始终小于 170KB，超过这个体积就应该使用上面介绍的若干方法做好裁剪优化。"]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["压缩、Tree-Shaking、Scope Hoisting 都在减少产物体积；Code Splitting、外置依赖、",(0,r.jsx)(n.code,{children:"[hash]"})," 则有助于提升 HTTP 缓存效率；动态加载则能够确保关键路径最小资源依赖。种种措施各自从不同角度努力优化应用代码在网络上的分发效率，毕竟网络通讯有时候真的很贵！"]}),"\n",(0,r.jsxs)(n.p,{children:["不过软件世界没有银弹，过度的优化有时候可能带来反效果，建议大家参考 ",(0,r.jsx)(n.a,{href:"https://web.dev/vitals/",target:"_blank",rel:"noopener noreferrer",children:"Web Vitals"})," 模型，始终关注、对比应用的线上表现，确保最佳用户体验。"]}),"\n",(0,r.jsxs)(n.h2,{id:"思考题",children:["思考题",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"为何 Tree-Shaking 强依赖于 ESM 模块方案？ESM 与其它方案如 AMD、CMD 等，有何区别？"})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}let g=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["Webpack5%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F18.%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC%E5%BE%97%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E6%9E%81%E8%87%B4%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7%EF%BC%9F.md"]={toc:[{text:"动态加载",id:"动态加载",depth:2},{text:"HTTP 缓存优化",id:"http-缓存优化",depth:2},{text:"使用外置依赖",id:"使用外置依赖",depth:2},{text:"使用 Tree-Shaking 删除多余模块导出",id:"使用-tree-shaking-删除多余模块导出",depth:2},{text:"使用 Scope Hoisting 合并模块",id:"使用-scope-hoisting-合并模块",depth:2},{text:"监控产物体积",id:"监控产物体积",depth:2},{text:"总结",id:"总结",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);