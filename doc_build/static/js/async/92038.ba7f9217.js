"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["92038"],{629287:function(e,r,n){n.r(r),n.d(r,{default:()=>c});var d=n(552676),s=n(740453);function i(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",p:"p",img:"img",code:"code",pre:"pre",br:"br",ol:"ol",strong:"strong"},(0,s.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(r.h1,{id:"12基础-9http-调用添加自定义处理逻辑",children:["12基础 9：HTTP 调用添加自定义处理逻辑",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#12基础-9http-调用添加自定义处理逻辑",children:"#"})]}),"\n",(0,d.jsxs)(r.h2,{id:"本节核心内容",children:["本节核心内容",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#本节核心内容",children:"#"})]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"介绍 gin middleware 基本用法"}),"\n",(0,d.jsx)(r.li,{children:"介绍如何用 gin middleware 特性给 API 添加唯一请求 ID 和记录请求信息"}),"\n"]}),"\n",(0,d.jsxs)(r.blockquote,{children:["\n",(0,d.jsxs)(r.p,{children:["本小节源码下载路径：",(0,d.jsx)(r.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo08",target:"_blank",rel:"noopener noreferrer",children:"demo08"})]}),"\n",(0,d.jsx)(r.p,{children:"可先下载源码到本地，结合源码理解后续内容，边学边练。"}),"\n",(0,d.jsxs)(r.p,{children:["本小节的代码是基于 ",(0,d.jsx)(r.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo07",target:"_blank",rel:"noopener noreferrer",children:"demo07"})," 来开发的。"]}),"\n"]}),"\n",(0,d.jsxs)(r.h2,{id:"需求背景",children:["需求背景",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#需求背景",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"在实际开发中，我们可能需要对每个请求/返回做一些特定的操作，比如记录请求的 log 信息，在返回中插入一个 Header，对部分接口进行鉴权，这些都需要一个统一的入口，逻辑如下："}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/6/6/163d48f5200db6e1?w=1761&h=1214&f=png&s=99186",alt:""})}),"\n",(0,d.jsxs)(r.p,{children:["这个功能可以通过引入 middleware 中间件来解决。Go 的 ",(0,d.jsx)(r.code,{children:"net/http"})," 设计的一大特点是特别容易构建中间件。apiserver 所使用的 gin 框架也提供了类似的中间件。"]}),"\n",(0,d.jsxs)(r.h2,{id:"gin-middleware-中间件",children:["gin middleware 中间件",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#gin-middleware-中间件",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"在 gin 中，可以通过如下方法使用 middleware："}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-go",children:"g := gin.New()\r\ng.Use(middleware.AuthMiddleware())\n"})}),"\n",(0,d.jsxs)(r.p,{children:["其中 ",(0,d.jsx)(r.code,{children:"middleware.AuthMiddleware()"})," 是 ",(0,d.jsx)(r.code,{children:"func(*gin.Context)"})," 类型的函数。中间件只对注册过的路由函数起作用。"]}),"\n",(0,d.jsx)(r.p,{children:"在 gin 中可以设置 3 种类型的 middleware："}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"全局中间件"}),"\n",(0,d.jsx)(r.li,{children:"单个路由中间件"}),"\n",(0,d.jsx)(r.li,{children:"群组中间件"}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"这里通过一个例子来说明这 3 种中间件。"}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/6/6/163d4a97c4d6c438?w=1369&h=830&f=png&s=68458",alt:""})}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"全局中间件：注册中间件的过程之前设置的路由，将不会受注册的中间件所影响。只有注册了中间件之后代码的路由函数规则，才会被中间件装饰。"}),"\n",(0,d.jsxs)(r.li,{children:["单个路由中间件：需要在注册路由时注册中间件",(0,d.jsx)(r.br,{}),"\n",(0,d.jsx)(r.code,{children:'r.GET("/benchmark", MyBenchLogger(), benchEndpoint)'})]}),"\n",(0,d.jsx)(r.li,{children:"群组中间件：只要在群组路由上注册中间件函数即可。"}),"\n"]}),"\n",(0,d.jsxs)(r.h2,{id:"中间件实践",children:["中间件实践",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#中间件实践",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"为了演示中间件的功能，这里给 apiserver 新增两个功能："}),"\n",(0,d.jsxs)(r.ol,{children:["\n",(0,d.jsxs)(r.li,{children:["在请求和返回的 Header 中插入 ",(0,d.jsx)(r.code,{children:"X-Request-Id"}),"（",(0,d.jsx)(r.code,{children:"X-Request-Id"})," 值为 32 位的 UUID，用于唯一标识一次 HTTP 请求）"]}),"\n",(0,d.jsx)(r.li,{children:"日志记录每一个收到的请求"}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsxs)(r.strong,{children:["插入 ",(0,d.jsx)(r.code,{children:"X-Request-Id"})]})}),"\n",(0,d.jsxs)(r.p,{children:["首先需要实现 ",(0,d.jsx)(r.code,{children:"middleware.RequestId()"})," 中间件，在 ",(0,d.jsx)(r.code,{children:"router/middleware"})," 目录下新建一个 Go 源文件 requestid.go，内容为（详见 ",(0,d.jsx)(r.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo08/router/middleware/requestid.go",target:"_blank",rel:"noopener noreferrer",children:"demo08/router/middleware/requestid.go"}),"）："]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-go",children:'package middleware\r\n\r\nimport (\r\n	"github.com/gin-gonic/gin"\r\n	"github.com/satori/go.uuid"\r\n)\r\n\r\nfunc RequestId() gin.HandlerFunc {\r\n	return func(c *gin.Context) {\r\n		// Check for incoming header, use it if exists\r\n		requestId := c.Request.Header.Get("X-Request-Id")\r\n\r\n		// Create request id with UUID4\r\n		if requestId == "" {\r\n			u4, _ := uuid.NewV4()\r\n			requestId = u4.String()\r\n		}\r\n\r\n		// Expose it for use in the application\r\n		c.Set("X-Request-Id", requestId)\r\n\r\n		// Set X-Request-Id header\r\n		c.Writer.Header().Set("X-Request-Id", requestId)\r\n		c.Next()\r\n	}\r\n}\n'})}),"\n",(0,d.jsxs)(r.p,{children:["该中间件调用 ",(0,d.jsx)(r.code,{children:"github.com/satori/go.uuid"})," 包生成一个 32 位的 UUID，并通过 ",(0,d.jsx)(r.code,{children:'c.Writer.Header().Set("X-Request-Id", requestId)'})," 设置在返回包的 Header 中。"]}),"\n",(0,d.jsxs)(r.p,{children:["该中间件是个全局中间件，需要在 ",(0,d.jsx)(r.code,{children:"main"})," 函数中通过 ",(0,d.jsx)(r.code,{children:"g.Use()"})," 函数加载："]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-go",children:"func main() {\r\n    ...\r\n    // Routes.\r\n    router.Load(\r\n        // Cores.\r\n        g,  \r\n            \r\n        // Middlwares.\r\n        middleware.RequestId(),\r\n    )       \r\n    ...\r\n}\n"})}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.code,{children:"main"})," 函数调用 ",(0,d.jsx)(r.code,{children:"router.Load()"}),"，函数 ",(0,d.jsx)(r.code,{children:"router.Load()"})," 最终调用 ",(0,d.jsx)(r.code,{children:"g.Use()"})," 加载该中间件。"]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)(r.strong,{children:"日志记录请求"})}),"\n",(0,d.jsxs)(r.p,{children:["同样，需要先实现日志请求中间件 ",(0,d.jsx)(r.code,{children:"middleware.Logging()"}),"，然后在 ",(0,d.jsx)(r.code,{children:"main"})," 函数中通过 ",(0,d.jsx)(r.code,{children:"g.Use()"})," 加载该中间件："]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-go",children:"func main() {\r\n    ...\r\n    // Routes.\r\n    router.Load(\r\n        // Cores.\r\n        g,  \r\n            \r\n        // Middlwares.\r\n        middleware.Logging(),\r\n    )       \r\n    ...\r\n}\n"})}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.code,{children:"middleware.Logging()"})," 实现稍微复杂点，读者可以直接参考源码实现：",(0,d.jsx)(r.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo08//router/middleware/logging.go",target:"_blank",rel:"noopener noreferrer",children:"demo08/router/middleware/logging.go"}),"。"]}),"\n",(0,d.jsx)(r.p,{children:"这里有几点需要说明："}),"\n",(0,d.jsxs)(r.ol,{children:["\n",(0,d.jsx)(r.li,{children:"该中间件需要截获 HTTP 的请求信息，然后打印请求信息，因为 HTTP 的请求 Body，在读取过后会被置空，所以这里读取完后会重新赋值："}),"\n"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-go",children:"var bodyBytes []byte\r\nif c.Request.Body != nil {\r\n    bodyBytes, _ = ioutil.ReadAll(c.Request.Body)\r\n}             \r\n\r\n// Restore the io.ReadCloser to its original state\r\nc.Request.Body = ioutil.NopCloser(bytes.NewBuffer(bodyBytes))\n"})}),"\n",(0,d.jsxs)(r.ol,{start:"2",children:["\n",(0,d.jsx)(r.li,{children:"截获 HTTP 的 Response 更麻烦些，原理是重定向 HTTP 的 Response 到指定的 IO 流，详见源码文件。"}),"\n",(0,d.jsxs)(r.li,{children:["截获 HTTP 的 Request 和 Response 后，就可以获取需要的信息，最终程序通过 ",(0,d.jsx)(r.code,{children:"log.Infof()"})," 记录 HTTP 的请求信息。"]}),"\n",(0,d.jsx)(r.li,{children:"该中间件只记录业务请求，比如 /v1/user 和 /login 路径。"}),"\n"]}),"\n",(0,d.jsxs)(r.h2,{id:"编译并测试",children:["编译并测试",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#编译并测试",children:"#"})]}),"\n",(0,d.jsxs)(r.ol,{children:["\n",(0,d.jsx)(r.li,{children:"下载 apiserver_demos 源码包（如前面已经下载过，请忽略此步骤）"}),"\n"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{children:"$ git clone https://github.com/lexkong/apiserver_demos\n"})}),"\n",(0,d.jsxs)(r.ol,{start:"2",children:["\n",(0,d.jsxs)(r.li,{children:["将 ",(0,d.jsx)(r.code,{children:"apiserver_demos/demo08"})," 复制为 ",(0,d.jsx)(r.code,{children:"$GOPATH/src/apiserver"})]}),"\n"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{children:"$ cp -a apiserver_demos/demo08 $GOPATH/src/apiserver\n"})}),"\n",(0,d.jsxs)(r.ol,{start:"3",children:["\n",(0,d.jsx)(r.li,{children:"在 apiserver 目录下编译源码"}),"\n"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{children:"$ cd $GOPATH/src/apiserver\r\n$ gofmt -w .\r\n$ go tool vet .\r\n$ go build -v .\n"})}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsxs)(r.strong,{children:["测试 ",(0,d.jsx)(r.code,{children:"middleware.RequestId()"})," 中间件"]})}),"\n",(0,d.jsx)(r.p,{children:"发送 HTTP 请求 —— 查询用户列表："}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/6/6/163d4c476135f3fe?w=1900&h=661&f=png&s=81367",alt:""})}),"\n",(0,d.jsxs)(r.p,{children:["可以看到，HTTP 返回的 Header 有 32 位的 UUID：",(0,d.jsx)(r.code,{children:"X-Request-Id: 1f8b1ae2-8009-4921-b354-86f25022dfa0"}),"。"]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsxs)(r.strong,{children:["测试 ",(0,d.jsx)(r.code,{children:"middleware.Logging()"})," 中间件"]})}),"\n",(0,d.jsx)(r.p,{children:"在 API 日志中，可以看到有 HTTP 请求记录："}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/6/6/163d4c93ba35c6a4?w=1916&h=858&f=png&s=146763",alt:""})}),"\n",(0,d.jsx)(r.p,{children:"日志记录了 HTTP 请求的如下信息，依次为："}),"\n",(0,d.jsxs)(r.ol,{children:["\n",(0,d.jsx)(r.li,{children:"耗时"}),"\n",(0,d.jsx)(r.li,{children:"请求 IP"}),"\n",(0,d.jsx)(r.li,{children:"HTTP 方法 HTTP 路径"}),"\n",(0,d.jsx)(r.li,{children:"返回的 Code 和 Message"}),"\n"]}),"\n",(0,d.jsxs)(r.h2,{id:"小结",children:["小结",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,d.jsx)(r.p,{children:"本小节通过具体实例展示，如何通过 gin 的 middleware 特性来对 HTTP 请求进行必要的逻辑处理。下一小节即是基于 gin 中间件实现的。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,s.ah)(),e.components);return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(i,{...e})}):i(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F12%E5%9F%BA%E7%A1%80%209%EF%BC%9AHTTP%20%E8%B0%83%E7%94%A8%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91.md"]={toc:[{text:"本节核心内容",id:"本节核心内容",depth:2},{text:"需求背景",id:"需求背景",depth:2},{text:"gin middleware 中间件",id:"gin-middleware-中间件",depth:2},{text:"中间件实践",id:"中间件实践",depth:2},{text:"编译并测试",id:"编译并测试",depth:2},{text:"小结",id:"小结",depth:2}],title:"12基础 9：HTTP 调用添加自定义处理逻辑",headingTitle:"12基础 9：HTTP 调用添加自定义处理逻辑",frontmatter:{}}}}]);