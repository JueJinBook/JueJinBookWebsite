"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["32857"],{947649:function(n,e,r){n.exports=r.p+"static/image/32e2c1b005721b4b45839fe5ed19d58b.bbaa6203.webp"},540660:function(n,e,r){r.r(e),r.d(e,{default:()=>C});var s=r(552676),i=r(740453);let d=r.p+"static/image/d09408c221bb7b7f00a02cb27f5b733e.cfc12e6f.webp";var c=r(947649);let t=r.p+"static/image/6ffcc5dc58a2bf7d12702b10152d9f0c.4be9db7b.webp",o=r.p+"static/image/5df516c97f56dc6eda761aab5da50f34.b0816520.webp",l=r.p+"static/image/48af5933b9e58b847e818b82e7105da5.85fad5ec.webp",a=r.p+"static/image/840c0072648d05e9cb6ced05f61196a9.00ea940c.webp",h=r.p+"static/image/173a0ad084e8cc34ec2bc1ec3d37fffb.36509b5f.webp",p=r.p+"static/image/65fed0d6f7889c0815b856f87f092657.8038c26b.webp",x=r.p+"static/image/acedab633bfa4d1e8acfc1f398fc55fd.6e8b0a0d.webp",j=r.p+"static/image/f59f4ff2c4db799c1d7cc33320c683e0.76c5a625.webp";function m(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",h3:"h3",img:"img",ul:"ul",li:"li",code:"code",pre:"pre",h4:"h4"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"10基础篇-高阶组件",children:["10.基础篇-高阶组件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#10基础篇-高阶组件",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"一前言",children:["一前言",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一前言",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["本节是 React 进阶系列基础篇的最后一节，主要给大家讲解 React 高阶组件- HOC。最近调研了很多同学对高阶组件的使用与理解，大部分同学给我的回复是，知道高阶组件，也会用一些优秀的开源库中的高阶组件，但是自己遇到业务场景的时候，",(0,s.jsx)(e.strong,{children:"想不到用高阶组件解决问题"}),"或者",(0,s.jsx)(e.strong,{children:"不知道怎么编写高阶组件"}),"？"]}),"\n",(0,s.jsxs)(e.p,{children:["从小伙伴们的回答中，我找到了本章节重点的讨论方向，就是 ",(0,s.jsx)(e.strong,{children:"HOC 解决什么问题，什么时候用到 HOC，以及如何编写 HOC ?"})]}),"\n",(0,s.jsxs)(e.h2,{id:"二高阶组件基本介绍-能解决什么问题",children:["二高阶组件基本介绍-能解决什么问题？",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#二高阶组件基本介绍-能解决什么问题",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"1-高阶组件能解决什么问题",children:["1 高阶组件能解决什么问题",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-高阶组件能解决什么问题",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"高级组件到底能够解决什么问题？举一个特别简单的例子，话说小明负责开发一个 web 应用，应用的结构如下所示，而且这个功能小明已经开发完了。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:j,alt:"hoc2.jpg"})}),"\n",(0,s.jsx)(e.p,{children:"但是，有一天老板突然提出了一个权限隔离的需求，就是部分模块组件受到权限控制，后台的数据交互的结果权限控制着模块展示与否，而且没有权限会默认展示无权限提示页面。（如下图，黄色部分是受到权限控制的组件模块）"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:x,alt:"hoc3.jpg"})}),"\n",(0,s.jsx)(e.p,{children:"那么小明面临的问题是，如何给需要权限隔离的模块，绑定权限呢？那第一种思路是把所有的需要权限隔离的模块重新绑定权限，通过权限来判断组件是否展示。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:"hoc4.jpg"})}),"\n",(0,s.jsx)(e.p,{children:"这样无疑会给小明带来很多的工作量，而且后续项目可能还有受权限控制的页面或者组件，都需要手动绑定权限。那么如何解决这个问题呢，思考一下，既然是判断权限，那么可以把逻辑都写在一个容器里，然后将每个需要权限的组件通过容器包装一层，这样不就不需要逐一手动绑定权限了吗？所以 HOC 可以合理的解决这个问题，通过 HOC 模式结构如下图所示："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:"hoc5.jpg"})}),"\n",(0,s.jsx)(e.p,{children:"综上所述，HOC的产生根本作用就是解决大量的代码复用，逻辑复用问题。既然说到了逻辑复用，那么具体复用了哪些逻辑呢？"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"首先第一种就是像上述的拦截问题，本质上是对渲染的控制，对渲染的控制可不仅仅指是否渲染组件，还可以像 dva 中 dynamic 那样懒加载/动态加载组件。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"还有一种场景，比如项目中想让一个非 Route 组件，也能通过 props 获取路由实现跳转，但是不想通过父级路由组件层层绑定 props ，这个时候就需要一个 HOC 把改变路由的 history 对象混入 props 中，于是 withRoute 诞生了。所以 HOC 还有一个重要的作用就是让 props 中混入一些你需要的东西。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["还有一种情况，如果不想改变组件，只是监控组件的内部状态，对组件做一些赋能，HOC 也是一个不错的选择，比如对组件内的点击事件做一些监控，或者加一次额外的生命周期，我之前写过一个开源项目 ",(0,s.jsx)(e.code,{children:"react-keepalive-router"}),"，可以缓存页面，项目中的 keepaliveLifeCycle 就是通过 HOC 方式，给业务组件增加了额外的生命周期。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"高阶组件基础概念",children:["高阶组件基础概念",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#高阶组件基础概念",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"高阶组件真的很好理解，都知道高阶函数就是一个将函数作为参数并且返回值也是函数的函数。高阶组件是以组件作为参数，返回组件的函数。返回的组件把传进去的组件进行功能强化。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:"hoc6.jpg"})}),"\n",(0,s.jsxs)(e.h3,{id:"两种不同的高阶组件",children:["两种不同的高阶组件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#两种不同的高阶组件",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["常用的高阶组件有",(0,s.jsx)(e.strong,{children:"属性代理"}),"和",(0,s.jsx)(e.strong,{children:"反向继承"}),"两种，两者之间有一些共性和区别。接下来分别介绍一下两种模式下的高阶组件。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"属性代理"})}),"\n",(0,s.jsx)(e.p,{children:"属性代理，就是用组件包裹一层代理组件，在代理组件上，可以做一些，对源组件的强化操作。这里注意属性代理返回的是一个新组件，被包裹的原始组件，将在新的组件里被挂载。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function HOC(WrapComponent){\n    return class Advance extends React.Component{\n       state={\n           name:'alien'\n       }\n       render(){\n           return <WrapComponent  { ...this.props } { ...this.state }  />\n       }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"优点："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"① 属性代理可以和业务组件低耦合，零耦合，对于条件渲染和 props 属性增强，只负责控制子组件渲染和传递额外的 props 就可以了，所以无须知道，业务组件做了些什么。所以正向属性代理，更适合做一些开源项目的 HOC ，目前开源的 HOC 基本都是通过这个模式实现的。"}),"\n",(0,s.jsx)(e.li,{children:"② 同样适用于类组件和函数组件。"}),"\n",(0,s.jsx)(e.li,{children:"③ 可以完全隔离业务组件的渲染，因为属性代理说白了是一个新的组件，相比反向继承，可以完全控制业务组件是否渲染。"}),"\n",(0,s.jsx)(e.li,{children:"④ 可以嵌套使用，多个 HOC 是可以嵌套使用的，而且一般不会限制包装 HOC 的先后顺序。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"缺点："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"① 一般无法直接获取原始组件的状态，如果想要获取，需要 ref 获取组件实例。"}),"\n",(0,s.jsx)(e.li,{children:"② 无法直接继承静态属性。如果需要继承需要手动处理，或者引入第三方库。"}),"\n",(0,s.jsx)(e.li,{children:"③ 因为本质上是产生了一个新组件，所以需要配合 forwardRef 来转发 ref。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"反向继承"})}),"\n",(0,s.jsx)(e.p,{children:"反向继承和属性代理有一定的区别，在于包装后的组件继承了原始组件本身，所以此时无须再去挂载业务组件。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"class Index extends React.Component{\n  render(){\n    return <div> hello,world  </div>\n  }\n}\nfunction HOC(Component){\n    return class wrapComponent extends Component{ /* 直接继承需要包装的组件 */\n        \n    }\n}\nexport default HOC(Index) \n"})}),"\n",(0,s.jsx)(e.p,{children:"优点："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"① 方便获取组件内部状态，比如 state ，props ，生命周期，绑定的事件函数等。"}),"\n",(0,s.jsx)(e.li,{children:"② es6继承可以良好继承静态属性。所以无须对静态属性和方法进行额外的处理。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"缺点："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"① 函数组件无法使用。"}),"\n",(0,s.jsx)(e.li,{children:"② 和被包装的组件耦合度高，需要知道被包装的原始组件的内部状态，具体做了些什么？"}),"\n",(0,s.jsx)(e.li,{children:"③ 如果多个反向继承 HOC 嵌套在一起，当前状态会覆盖上一个状态。这样带来的隐患是非常大的，比如说有多个 componentDidMount ，当前 componentDidMount 会覆盖上一个 componentDidMount 。这样副作用串联起来，影响很大。"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"三-高阶组件功能说明-如何编写高阶组件",children:["三 高阶组件功能说明-如何编写高阶组件？",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#三-高阶组件功能说明-如何编写高阶组件",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"1-强化props",children:["1 强化props",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-强化props",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"强化 props 就是在原始组件的 props 基础上，加入一些其他的 props ，强化原始组件功能。举个例子，为了让组件也可以获取到路由对象，进行路由跳转等操作，所以 React Router 提供了类似 withRouter 的 HOC 。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function withRouter(Component) {\n  const displayName = `withRouter(${Component.displayName || Component.name})`;\n  const C = props => {\n      /*  获取 */\n    const { wrappedComponentRef, ...remainingProps } = props;\n    return (\n      <RouterContext.Consumer>\n        {context => {\n          return (\n            <Component\n              {...remainingProps} // 组件原始的props \n              {...context}        // 存在路由对象的上下文，history  location 等 \n              ref={wrappedComponentRef}\n            />\n          );\n        }}\n      </RouterContext.Consumer>\n    );\n  };\n\n  C.displayName = displayName;\n  C.WrappedComponent = Component;\n  /* 继承静态属性 */\n  return hoistStatics(C, Component);\n}\nexport default withRouter\n"})}),"\n",(0,s.jsx)(e.p,{children:"流程分析："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"分离出 props 中 wrappedComponentRef 和 remainingProps ， remainingProps 是原始组件真正的 props， wrappedComponentRef 用于转发 ref。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"用 Context.Consumer 上下文模式获取保存的路由信息。（ React Router 中路由状态是通过 context 上下文保存传递的）"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"将路由对象和原始 props 传递给原始组件，所以可以在原始组件中获取 history ，location 等信息。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"2-控制渲染",children:["2 控制渲染",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-控制渲染",children:"#"})]}),"\n",(0,s.jsxs)(e.h4,{id:"渲染劫持",children:["渲染劫持",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#渲染劫持",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"HOC 反向继承模式，可以通过 super.render() 得到 render 之后的内容，利用这一点，可以做渲染劫持 ，更有甚者可以修改 render 之后的 React element 对象。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"const HOC = (WrapComponent) =>\n  class Index  extends WrapComponent {\n    render() {\n      if (this.props.visible) {\n        return super.render()\n      } else {\n        return <div>暂无数据</div>\n      }\n    }\n  }\n\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"修改渲染树"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"class Index extends React.Component{\n  render(){\n    return <div>\n       <ul>\n         <li>react</li>\n         <li>vue</li>\n         <li>Angular</li>\n       </ul>\n    </div>\n  }\n}\nfunction HOC (Component){\n  return class Advance extends Component {\n    render() {\n      const element = super.render()\n      const otherProps = {\n        name:'alien'\n      }\n      /* 替换 Angular 元素节点 */\n      const appendElement = React.createElement('li' ,{} , `hello ,world , my name  is ${ otherProps.name }` )\n      const newchild =  React.Children.map(element.props.children.props.children,(child,index)=>{\n           if(index === 2) return appendElement\n           return  child\n      }) \n      return  React.cloneElement(element, element.props, newchild)\n    }\n  }\n}\nexport  default HOC(Index)\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"效果"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:"40D6BF30-9B4C-4EC9-B089-1E757DAC15DF.jpg"})}),"\n",(0,s.jsxs)(e.h4,{id:"动态加载",children:["动态加载",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#动态加载",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"dva 中 dynamic 就是配合 import ，实现组件的动态加载的，而且每次切换路由，都会有 Loading 效果，接下来看看大致的实现思路。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"编写"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default function dynamicHoc(loadRouter) {\n  return class Content extends React.Component {\n    state = {Component: null}\n    componentDidMount() {\n      if (this.state.Component) return\n      loadRouter()\n        .then(module => module.default) // 动态加载 component 组件\n        .then(Component => this.setState({Component},\n         ))\n    }\n    render() {\n      const {Component} = this.state\n      return Component ? <Component {\n      ...this.props\n      }\n      /> : <Loading />\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"使用"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"const Index = AsyncRouter(()=>import('../pages/index'))\n"})}),"\n",(0,s.jsx)(e.p,{children:"实现思路："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Index 组件中，在 componentDidMount 生命周期动态加载上述的路由组件Component，如果在切换路由或者没有加载完毕时，显示的是 Loading 效果。"}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"3-组件赋能",children:["3 组件赋能",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-组件赋能",children:"#"})]}),"\n",(0,s.jsxs)(e.h4,{id:"ref获取实例",children:["ref获取实例",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#ref获取实例",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"对于属性代理虽然不能直接获取组件内的状态，但是可以通过 ref 获取组件实例，获取到组件实例，就可以获取组件的一些状态，或是手动触发一些事件，进一步强化组件，但是注意的是：类组件才存在实例，函数组件不存在实例。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function Hoc(Component){\n  return class WrapComponent extends React.Component{\n      constructor(){\n        super()\n        this.node = null /* 获取实例，可以做一些其他的操作。 */\n      }\n      render(){\n        return <Component {...this.props}  ref={(node) => this.node = node }  />\n      }\n  }\n}\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"事件监控",children:["事件监控",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#事件监控",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["HOC 不一定非要对组件本身做些什么？也可以单纯增加一些事件监听，错误监控。接下来，接下来做一个 ",(0,s.jsx)(e.code,{children:"HOC"})," ，只对组件内的点击事件做一个监听效果。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function ClickHoc (Component){\n  return  function Wrap(props){\n    const dom = useRef(null)\n    useEffect(()=>{\n       const handerClick = () => console.log('发生点击事件') \n       dom.current.addEventListener('click',handerClick)\n     return () => dom.current.removeEventListener('click',handerClick)\n    },[])\n    return  <div ref={dom}  ><Component  {...props} /></div>\n  }\n}\n\n@ClickHoc\nclass Index extends React.Component{\n   render(){\n     return <div className='index'  >\n       <p>hello，world</p>\n       <button>组件内部点击</button>\n    </div>\n   }\n}\nexport default ()=>{\n  return <div className='box'  >\n     <Index />\n     <button>组件外部点击</button>\n  </div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"效果"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:"click.gif"})}),"\n",(0,s.jsxs)(e.h3,{id:"4-总结",children:["4 总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4-总结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"下面对 HOC 具体能实现那些功能，和如何编写做一下总结："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"1 强化 props ，可以通过 HOC ，向原始组件混入一些状态。"}),"\n",(0,s.jsx)(e.li,{children:"2 渲染劫持，可以利用 HOC ，动态挂载原始组件，还可以先获取原始组件的渲染树，进行可控性修改。"}),"\n",(0,s.jsx)(e.li,{children:"3 可以配合 import 等 api ，实现动态加载组件，实现代码分割，加入 loading 效果。"}),"\n",(0,s.jsx)(e.li,{children:"4 可以通过 ref 来获取原始组件实例，操作实例下的属性和方法。"}),"\n",(0,s.jsx)(e.li,{children:"5 可以对原始组件做一些事件监听，错误监控等。"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"四-高价组件注意事项",children:["四 高价组件注意事项",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#四-高价组件注意事项",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"1-谨慎修改原型链",children:["1 谨慎修改原型链",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-谨慎修改原型链",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function HOC (Component){\n  const proDidMount = Component.prototype.componentDidMount \n  Component.prototype.componentDidMount = function(){\n     console.log('劫持生命周期：componentDidMount')\n     proDidMount.call(this)\n  }\n  return  Component\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"如上 HOC 作用仅仅是修改了原来组件原型链上的 componentDidMount 生命周期。但是这样有一个弊端就是如果再用另外一个 HOC 修改原型链上的 componentDidMount ，那么这个HOC的功能即将失效。"}),"\n",(0,s.jsxs)(e.h3,{id:"2-不要在函数组件内部或类组件render函数中使用hoc",children:["2 不要在函数组件内部或类组件render函数中使用HOC",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-不要在函数组件内部或类组件render函数中使用hoc",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"类组件中\uD83D\uDE45错误写法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"class Index extends React.Component{\n  render(){\n     const WrapHome = HOC(Home)\n     return <WrapHome />\n  }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"函数组件中\uD83D\uDE45错误写法："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function Index(){\n     const WrapHome = HOC(Home)\n     return  <WrapHome />\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["这么写的话每一次类组件触发 render 或者函数组件执行都会产生一个新的WrapHome，",(0,s.jsx)(e.code,{children:"react diff"})," 会判定两次不是同一个组件，那么就会卸载老组件，重新挂载新组件，老组件内部的真实 DOM 节点，都不会合理的复用，从而造成了性能的浪费，而且原始组件会被初始化多次。"]}),"\n",(0,s.jsxs)(e.h3,{id:"3-ref的处理",children:["3 ref的处理",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-ref的处理",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["高阶组件的约定是将所有 props 传递给被包装组件，但这对于 ref 并不适用。那是因为 ref 实际上并不是一个 prop ， 就像 key 一样，对于 ref 属性它是由 React 专门处理的。那么如何通过 ref 正常获取到原始组件的实例呢？在 ref 章节已经讲到，可以用 ",(0,s.jsx)(e.code,{children:"forwardRef"}),"做 ref 的转发处理。"]}),"\n",(0,s.jsxs)(e.h3,{id:"4-注意多个hoc嵌套顺序问题",children:["4 注意多个HOC嵌套顺序问题",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4-注意多个hoc嵌套顺序问题",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"多个HOC嵌套，应该留意一下HOC的顺序，还要分析出要各个 HOC 之间是否有依赖关系。"}),"\n",(0,s.jsx)(e.p,{children:"对于 class 声明的类组件，可以用装饰器模式，对类组件进行包装："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"@HOC1(styles)\n@HOC2\n@HOC3\nclass Index extends React.Componen{\n    /* ... */\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"对于函数组件："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function Index(){\n    /* .... */\n}\nexport default HOC1(styles)(HOC2( HOC3(Index) )) \n"})}),"\n",(0,s.jsx)(e.p,{children:"HOC1 -> HOC2 -> HOC3 -> Index"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:"hoc1.jpg"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsxs)(e.strong,{children:["要注意一下包装顺序，越靠近 ",(0,s.jsx)(e.code,{children:"Index"})," 组件的，就是越内层的 HOC ,离组件 ",(0,s.jsx)(e.code,{children:"Index"})," 也就越近。"]})}),"\n",(0,s.jsx)(e.p,{children:"还有一些其他的小细节："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"1 如果2个 HOC 相互之间有依赖。比如 HOC1 依赖 HOC2 ，那么 HOC1 应该在 HOC2 内部。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"2 如果想通过 HOC 方式给原始组件添加一些额外生命周期，因为涉及到获取原始组件的实例 instance ，那么当前的 HOC 要离原始组件最近。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"5-继承静态属性",children:["5 继承静态属性",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5-继承静态属性",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"上述讲到在属性代理 HOC 本质上返回了一个新的 component ，那么如果给原来的 component 绑定一些静态属性方法，如果不处理，新的 component 上就会丢失这些静态属性方法。那么如何解决这个问题呢。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"手动继承"})}),"\n",(0,s.jsx)(e.p,{children:"当然可以手动将原始组件的静态方法 copy 到 HOC 组件上来，但前提是必须准确知道应该拷贝哪些方法。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function HOC(Component) {\n  class WrappedComponent extends React.Component {\n      /*...*/\n  }\n  // 必须准确知道应该拷贝哪些方法 \n  WrappedComponent.staticMethod = Component.staticMethod\n  return WrappedComponent\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"引入第三方库"})}),"\n",(0,s.jsxs)(e.p,{children:["每个静态属性方法都手动绑定会很累，尤其对于开源的 HOC ，对原生组件的静态方法是未知 ，为了解决这个问题可以使用 ",(0,s.jsx)(e.code,{children:"hoist-non-react-statics"})," 自动拷贝所有的静态方法:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"import hoistNonReactStatic from 'hoist-non-react-statics'\nfunction HOC(Component) {\n  class WrappedComponent extends React.Component {\n      /*...*/\n  }\n  hoistNonReactStatic(WrappedComponent,Component)\n  return WrappedComponent\n}\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"五-进阶实践-权限拦截",children:["五 进阶实践-权限拦截",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#五-进阶实践-权限拦截",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"下面解决刚开始小明遇到的权限拦截问题。具体可以参考如下 demo ，没有绑定效果如下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:"hoc6.gif"})}),"\n",(0,s.jsx)(e.p,{children:"假设期望的效果是："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"1 将文档管理和标签管理模块，配置成权限拦截的页面。"}),"\n",(0,s.jsx)(e.li,{children:"2 模拟数据交互，返回模拟数据拦截文档录入和标签录入两个页面。（因为这节主要讲 HOC ，所以不必过多在意其他细节）"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"思路："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"1 需要权限的页面或者组件，用 HOC 包裹，并输入唯一的权限签名。"}),"\n",(0,s.jsx)(e.li,{children:"2 用 Context 上下文保存全局的权限菜单列表，用 Provider 注入异步获取到的权限菜单。"}),"\n",(0,s.jsx)(e.li,{children:"3 HOC 中用 Consumer 获取权限列表，并且和签名做匹配，如果有权限，就展示，如果没有权限，展示默认没有权限组件。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"第一步，在根部注入权限。"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export const Permission = React.createContext([]) \n\nexport default function Index(){\n    const [ rootPermission , setRootPermission ] = React.useState([])\n    React.useEffect(()=>{\n        /* 获取权限列表 */\n        getRootPermission().then(res=>{\n            const { code , data } = res as any\n            code === 200 && setRootPermission(data) //  [ 'docList'  , 'tagList' ]\n        }) \n    },[])\n    return <Permission.Provider value={rootPermission} >\n         <RootRouter/>\n    </Permission.Provider>\n}\n\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"useState 用于动态注入获取的权限列表。"}),"\n",(0,s.jsxs)(e.li,{children:["根组件通过 Context.Provider 包裹。权限列表改变，所有消费权限列表的组件重新更新。\n（假设一下数据交互返回的权限列表",(0,s.jsx)(e.code,{children:"[ 'docList'  , 'tagList' ]"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"第二步：重点编写HOC"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"/* 没有权限 */\nfunction NoPermission (){\n    return <div>您暂时没有权限，请联系管理员开通权限！</div>\n}\n/* 编写HOC */\nexport function PermissionHoc(authorization){\n    return function(Component){ \n        return function Home (props){\n            const matchPermission =(value,list)=> list.indexOf(value) /* 匹配权限 */\n            return <Permission.Consumer>\n                {\n                    (permissionList) => matchPermission(authorization,permissionList) >= 0 ? <Component  {...props} /> : <NoPermission />\n                }\n            </Permission.Consumer>\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"HOC 编写："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"1 用两层包装函数的 HOC，第一层用于获取 HOC 绑定的当前组件的权限签名，因为要用这个权限签名和权限列表做匹配。第二层接受的原始组件。"}),"\n",(0,s.jsx)(e.li,{children:"2 在 HOC 中用 Context.Consumer 接收权限列表，做权限匹配。组件有权限展示，没有权限展示无权限组件。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"第三部：绑定权限"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"@PermissionHoc('writeDoc')  // 绑定文档录入页面\nexport default class Index extends React.Component{}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default PermissionHoc('writeTag')(index) //绑定标签录入页面\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default PermissionHoc('tagList')(index) //绑定标签列表页面\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"export default PermissionHoc('docList')(Index) // 绑定文档列表页面\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"对于业务组件进行权限 HOC 的包裹。"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["因为上述模拟数据返回的是",(0,s.jsx)(e.code,{children:"[ 'docList'  , 'tagList' ]"}),"，所以最终只能看到 标签列表 和 文档列表 页面。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"第四部：验证效果"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:"hoc7.gif"})}),"\n",(0,s.jsx)(e.p,{children:"完美实现效果，正常开发可能考虑的因素要比 demo 中的多，demo 实践给大家提供一个思路，具体实现还要看具体的业务需求。"}),"\n",(0,s.jsxs)(e.h2,{id:"六总结",children:["六总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#六总结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"这节主要学习了："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"1 HOC 解决什么问题，诞生的初衷，两种不同的 HOC 。"}),"\n",(0,s.jsx)(e.li,{children:"2 如何编写 HOC 。"}),"\n",(0,s.jsx)(e.li,{children:"3 编写 HOC 的注意事项。"}),"\n",(0,s.jsx)(e.li,{children:"4 HOC 实现权限隔离的实践。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"下一节，将一起进入React优化篇."})]})}function u(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(m,{...n})}):m(n)}let C=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["React%20%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F10.%E5%9F%BA%E7%A1%80%E7%AF%87-%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6.md"]={toc:[{text:"一前言",id:"一前言",depth:2},{text:"二高阶组件基本介绍-能解决什么问题？",id:"二高阶组件基本介绍-能解决什么问题",depth:2},{text:"1 高阶组件能解决什么问题",id:"1-高阶组件能解决什么问题",depth:3},{text:"高阶组件基础概念",id:"高阶组件基础概念",depth:3},{text:"两种不同的高阶组件",id:"两种不同的高阶组件",depth:3},{text:"三 高阶组件功能说明-如何编写高阶组件？",id:"三-高阶组件功能说明-如何编写高阶组件",depth:2},{text:"1 强化props",id:"1-强化props",depth:3},{text:"2 控制渲染",id:"2-控制渲染",depth:3},{text:"渲染劫持",id:"渲染劫持",depth:4},{text:"动态加载",id:"动态加载",depth:4},{text:"3 组件赋能",id:"3-组件赋能",depth:3},{text:"ref获取实例",id:"ref获取实例",depth:4},{text:"事件监控",id:"事件监控",depth:4},{text:"4 总结",id:"4-总结",depth:3},{text:"四 高价组件注意事项",id:"四-高价组件注意事项",depth:2},{text:"1 谨慎修改原型链",id:"1-谨慎修改原型链",depth:3},{text:"2 不要在函数组件内部或类组件render函数中使用HOC",id:"2-不要在函数组件内部或类组件render函数中使用hoc",depth:3},{text:"3 ref的处理",id:"3-ref的处理",depth:3},{text:"4 注意多个HOC嵌套顺序问题",id:"4-注意多个hoc嵌套顺序问题",depth:3},{text:"5 继承静态属性",id:"5-继承静态属性",depth:3},{text:"五 进阶实践-权限拦截",id:"五-进阶实践-权限拦截",depth:2},{text:"六总结",id:"六总结",depth:2}],title:"10.基础篇-高阶组件",headingTitle:"10.基础篇-高阶组件",frontmatter:{}}}}]);