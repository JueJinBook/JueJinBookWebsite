"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["71529"],{932222:function(n,e,r){r.r(e),r.d(e,{default:()=>g});var s=r(552676),a=r(740453);let c=r.p+"static/image/c389c40466bb3a836a2beeaf08cbc18d.b9d536b9.webp",i=r.p+"static/image/7ba124e2e613105a9b650976e7ce8399.507b6f33.webp",l=r.p+"static/image/24c8201ed743b660975228fa5295439b.ed8684d2.webp",o=r.p+"static/image/2ec0206ef34a47cb1a22602d292aa235.19b988f0.webp",t=r.p+"static/image/0c7c5af38aec81eb20d18b06ba9e465f.c6c27646.webp",d=r.p+"static/image/e6e8910f5e06830097fead249ddface2.17334baa.webp",h=r.p+"static/image/4dfdbd5d79a4b1e014f1ecbff4233733.9e38ed43.webp",p=r.p+"static/image/e2b825462458a91dee464929af67e27a.9d7bda87.webp",j=r.p+"static/image/a56420c22c22e688b9cd1ae41c88e407.34188056.webp";function x(n){let e=Object.assign({p:"p",code:"code",blockquote:"blockquote",a:"a",h2:"h2",h3:"h3",pre:"pre",img:"img",ol:"ol",li:"li",strong:"strong"},(0,a.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["上一节课的应用实践是从",(0,s.jsx)(e.code,{children:"依赖调用方"}),"角度展开的，学习了如何通过代码分析工具拦截业务代码中的",(0,s.jsx)(e.code,{children:"“脏调用”"}),"，以及如何通过 CI 自动化实现代码告警、分析报告推送等。这一节我们从",(0,s.jsx)(e.code,{children:"依赖提供方"}),"角度出发，学习如何实现微前端业务全应用层面的代码分析，帮助开发者了解基础项目导出的 API 在全部子应用项目中真实的调用情况，从而更好的评估上下线影响，更好的管控框架重构进度。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["本课程的示例项目在 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/all-projects-analysis",target:"_blank",rel:"noopener noreferrer",children:"all-projects-analysis"}),"，建议大家 clone 到本地，对照代码来学习。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"全应用代码分析报告",children:["全应用代码分析报告",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#全应用代码分析报告",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"全应用代码分析报告对于评估 API 上/下 线影响，把控基础库升级进度等有着非常重要的意义。"}),"\n",(0,s.jsxs)(e.h3,{id:"实现原理",children:["实现原理",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现原理",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["想要获取全局层面的 API 调用信息，需要分析所有",(0,s.jsx)(e.code,{children:"依赖调用方"}),"的项目代码，分析工具配置文件中 ",(0,s.jsx)(e.code,{children:"scanSource"})," 配置项是数组结构，是支持多扫描源配置的。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"......\nscanSource：[\n    {\n        name: 'ProjectA',\n        path: ['code/ProjectA/src'],\n        packageFile: 'code/ProjectA/package.json',\n        format: (str) => {  // 分析报告中展示路径的fotmat处理，排除多项目对于展示结果的影响\n            return str.replace('code/ProjectA/','');\n        }\n    },\n    {\n        name: 'ProjectB',\n        path: ['code/ProjectB/src'],\n        packageFile: 'code/ProjectB/package.json',\n        format: (str) => {  // 分析报告中展示路径的fotmat处理，排除多项目对于展示结果的影响\n            return str.replace('code/ProjectB/','');\n        }\n    },\n    {\n        name: 'ProjectC',\n        path: ['code/ProjectC/src'],\n        packageFile: 'code/ProjectC/package.json',\n        format: (str) => {  // 分析报告中展示路径的fotmat处理，排除多项目对于展示结果的影响\n            return str.replace('code/ProjectC/','');\n        }\n    }\n]\n......\n"})}),"\n",(0,s.jsxs)(e.p,{children:["但 ",(0,s.jsx)(e.code,{children:"scanSource"})," 配置中的 ",(0,s.jsx)(e.code,{children:"path"})," 属性是确定路径，也就是说分析工具需要所有待扫描的项目代码在一些指定路径下，但不同项目来自不同的 GitLab repo，所以我们需要主动给分析工具创造一个多项目的工作环境。"]}),"\n",(0,s.jsxs)(e.p,{children:["我们的方案是创建一个独立仓库（如：",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/all-projects-analysis",target:"_blank",rel:"noopener noreferrer",children:"all-projects-analysis"}),"），在分析前先把所有需要分析的项目代码通过脚本下载到该仓库指定目录下，然后根据这个目录来生成 ",(0,s.jsx)(e.code,{children:"scanSource"})," 配置，最后再执行代码分析。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"方案优点"}),"：全应用代码分析不会影响到各个子应用项目，而且可以在独立的项目中配置 ",(0,s.jsx)(e.code,{children:"GitLab CI"}),"，用于自动化分析，推送全应用分析报告等。"]}),"\n",(0,s.jsxs)(e.h3,{id:"相关代码",children:["相关代码",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#相关代码",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/all-projects-analysis/blob/main/repo.js",target:"_blank",rel:"noopener noreferrer",children:"repo.js"}),"：配置多个项目的项目名、repo 信息、分支信息。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// 子应用repo信息\nexports.repoInfos = [\n    {   \n        name: 'ProjectA',\n        repo: 'https://github.com/liangxin199045/project-app1.git',\n        branch: 'main'\n    },\n    {\n        name: 'ProjectB',\n        repo: 'https://github.com/liangxin199045/project-app2.git',\n        branch: 'main'\n    },\n    {\n        name: 'ProjectC',\n        repo: 'https://github.com/liangxin199045/project-app3.git',\n        branch: 'main'\n    },\n    {\n        name: 'ProjectD',\n        repo: 'https://github.com/liangxin199045/project-app4.git',\n        branch: 'main'\n    }\n]\n// 代码下载目录\nexports.downloadDir = 'codes';\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/all-projects-analysis/blob/main/download.js",target:"_blank",rel:"noopener noreferrer",children:"download.js"}),"：拉取子应用项目代码的可执行脚本。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"const { repoInfos, downloadDir } = require('./repo.js');            // Repo信息\nconst { execSync } = require('child_process');                      // 子进程操作\nconst fs = require('fs');                                           // 文件处理\nconst path = require('path');                                       // 路径处理\nconst chalk = require('chalk');                                     // 美化输出\nconst ora = require('ora');                                         // 美化命令行\nconst download = require('download-git-repo');                      // 代码下载器\n\n\n// 删除指定目录及目录下所有文件\nfunction rmDir(dirPath) {\n    try{\n        if( fs.existsSync(dirPath) ) {                                      // 判断给定的路径是否存在\n            const files = fs.readdirSync(dirPath);                          // 返回文件和子目录的数组\n            files.forEach(function(file){\n                var curPath = path.join(dirPath, file);\n                    \n                if(fs.statSync(curPath).isDirectory()) {                    // 如果是文件夹，则继续\n                    rmDir(curPath);\n                } else {    \n                    fs.unlinkSync(curPath);                                 // 如果是文件，则删除\n                }\n                    \n            });\n            fs.rmdirSync(dirPath);                                          // 清除文件夹\n        }\n    }catch(e){\n        throw e;\n    }\n}\n\nfunction downloadItem(project) {\n    return new Promise((resolve, reject) => {\n        const spinner = ora(chalk.blue('download start: ' + project.name)).start();\n        download(`direct:${project.repo}#${project.branch}`, `${downloadDir}/${project.name}`, {clone: true}, function (err) {\n            if(err){\n                console.log(err);\n                spinner.fail(chalk.red(project.name+' download fail'));\n                reject(err);\n            }else{\n                spinner.succeed(chalk.green(project.name + ' download success'));\n                resolve();\n            }\n        })\n    });\n}\n\nasync function downloadAll(repoInfos){\n    if(repoInfos.length >0){\n        const codePath =path.join(process.cwd(),downloadDir);\n        // 代码下载目录存在则先删除\n        rmDir(codePath);\n        // 下载所有子应用代码仓库\n        await Promise.allSettled(repoInfos.map((item) => {\n            return downloadItem(item);\n        }));\n        // 判定下载情况\n        if(fs.existsSync(codePath)){\n            let modules = fs.readdirSync(downloadDir);\n            // console.log(modules);\n            if(modules.length>0){\n                console.log(chalk.green('=== download finish ==='));\n            }else{\n                console.log(chalk.red('error : 待分析代码目录不存在文件'));        // 输出错误信息\n                process.exit(1);\n            }\n        }else{\n            console.log(chalk.red('\\nerror : 待分析代码目录为空'));        // 输出错误信息\n            process.exit(1);\n        }\n    }else{\n        console.log(chalk.red('error : repoInfos为空'));        // 输出错误信息\n        process.exit(1);\n    }\n}\n\ndownloadAll(repoInfos);\n"})}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["在 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/all-projects-analysis",target:"_blank",rel:"noopener noreferrer",children:"all-projects-analysis"})," 项目中执行 ",(0,s.jsx)(e.code,{children:"npm install"})," 安装依赖后，执行 ",(0,s.jsx)(e.code,{children:"npm run download"}),"："]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["PS：download 可能会遇到无权限等原因导致拉取失败，那是因为 ",(0,s.jsx)(e.a,{href:"https://www.npmjs.com/package/download-git-repo",target:"_blank",rel:"noopener noreferrer",children:"download-git-repo"})," 这个工具包是以 ",(0,s.jsx)(e.code,{children:"child_process"})," 子进程的形式来执行 ",(0,s.jsx)(e.code,{children:"git clone"})," 操作，所以需要相应的 GitLab 账户有所有子应用仓库的拉取权限。"]}),"\n",(0,s.jsxs)(e.p,{children:["建议将所有的子应用仓库放在同一个 ",(0,s.jsx)(e.code,{children:"Group"})," 下，账户只要有这个 ",(0,s.jsx)(e.code,{children:"Group"})," 的权限即可，另外在 CI 拉取时推荐配置一个有全部仓库拉取权限的公共账户。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/all-projects-analysis/blob/main/analysis.config.js",target:"_blank",rel:"noopener noreferrer",children:"analysis.config.js"}),"：多扫描源场景的配置文件，会根据工作目录生成 ",(0,s.jsx)(e.code,{children:"scanSource"})," 配置，因为是全项目分析，所以配置文件中关闭了代码评分与告警配置项。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"const { repoInfos, downloadDir } = require('./repo.js');            // Repo信息\nconst path = require('path');                                       // 路径处理\nconst fs = require('fs');                                           // 文件处理\n\nlet scanSource = [];                                                \n// httpRepo处理\nfunction httpRepoDeal (name) {\n    let tempIndex = '';\n    let httpRepo = '';\n    let branch = '';\n    repoInfos.forEach((item)=>{\n        if(item.name == name){\n            tempIndex = item.repo.indexOf('.git');\n            httpRepo = item.repo.substring(0, tempIndex);\n            branch = item.branch;\n        }\n    })\n    return httpRepo + '/blob/' + branch + '/';\n}\n// 模块代码存放目录\nconst codePath = path.join(process.cwd(), downloadDir);\n// scanSource动态处理\nif(fs.existsSync(codePath)){\n    const modules = fs.readdirSync(downloadDir);                             \n    if(modules.length>0){\n        scanSource = modules.map((item)=>{\n            return {\n                name: item,\n                path: [downloadDir + '/' + item + '/src'],\n                packageFile: downloadDir + '/' + item + '/package.json',\n                format: (str) => {\n                    return str.replace(downloadDir + '/' + item + '/','');\n                },\n                httpRepo: httpRepoDeal(item)\n            }                  \n        })\n    }\n}\n// console.log(scanSource);\n\nmodule.exports ={\n    scanSource: scanSource,                                           // 必须，待扫描源码的配置信息                                                                 \n    analysisTarget: 'framework',                                      // 必须，要分析的目标依赖名\n    analysisPlugins: [],                                              // 可选，自定义分析插件，默认为空数组\n    blackList: ['window.FB.login', 'app.localStorage.set'],           // 可选，需要标记的黑名单api，默认为空数组\n    browserApis: ['window','document','history','location'],          // 可选，要分析的BrowserApi，默认为空数组\n    reportDir: 'docs',                                                // 可选，生成代码分析报告的目录，默认为report\n    reportTitle: '全项目依赖(framework)分析报告',                       // 可选，代码分析报告标题，默认为'代码依赖分析报告'\n    isScanVue: true,                                                  // 可选，是否要扫描分析vue中的ts代码，默认为false\n    scorePlugin: null,                                                // 可选，评分插件: Function|'default'|null, default表示运行默认插件，null表示不评分\n    alarmThreshold: null                                              // 可选，开启代码告警及阈值分数(0-100)，默认为null即关闭告警逻辑 (CLI模式生效)\n}\n"})}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["然后在项目 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/all-projects-analysis",target:"_blank",rel:"noopener noreferrer",children:"all-projects-analysis"})," 中执行 ",(0,s.jsx)(e.code,{children:"npm run analysis"})," 即可。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"自动化配置",children:["自动化配置",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#自动化配置",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:".gitlab-ci.yml"})," 配置与单项目类似，这里就不再赘述了，可以参考 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/all-projects-analysis",target:"_blank",rel:"noopener noreferrer",children:"all-projects-analysis"})," 中的 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/all-projects-analysis/blob/main/.gitlab-ci.yml",target:"_blank",rel:"noopener noreferrer",children:".gitlab-ci.yml"})," 文件："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"# 16.应用场景：微前端业务全应用代码分析\nimage: node 14\n\n# 流水线有2个阶段，先执行analysis阶段的任务，然后执行depoly阶段的任务\nstages:\n  - analysis\n  - depoly\n\n# 在每个任务开始之前需要执行的命令\nbefore_script:\n  - npm install\n\n# 执行代码分析\nwork:                       # job name\n  stage: analysis           # 归属于analysis阶段\n  only:\n    - master                # master分支发生变化时触发Pipeline\n  script:\n    - npm run download      # 下载代码脚本\n    - npm run analysis      # 代码分析脚本\n  artifacts:\n    paths:                  # 缓存文件夹，可以在CI流水线任务 UI 界面中下载\n      - docs                # 代码分析报告生成目录，与analysis.config.js配置保持一致\n\n# 部署GitLab pages\npages:                           # job name\n  stage: depoly                  # 归属于deploy阶段\n  only:\n    - master                     # master分支发生变化时触发Pipeline\n  script:\n    - mkdir -p public            # 执行脚本创建public目录\n    - mv docs/* public           # 执行脚本将docs目录下的代码分析报告相关静态文件复制到public目录\n    - bash ./notification.sh     # 推送代码分析报告消息\n  dependencies:\n    - work                       # 依赖work job\n  artifacts:\n    paths:\n      - public                   # 声明GitLab Pages静态资源目录\n"})}),"\n",(0,s.jsxs)(e.p,{children:["同样，CI 定时任务会在代码分析结束后推送分析报告，这里以 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/all-projects-analysis",target:"_blank",rel:"noopener noreferrer",children:"all-projects-analysis"})," 项目的 ",(0,s.jsx)(e.a,{href:"https://liangxin199045.github.io/all-projects-analysis/",target:"_blank",rel:"noopener noreferrer",children:"分析报告"})," 为例："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"全应用代码分析平台",children:["全应用代码分析平台",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#全应用代码分析平台",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"CLI 模式"}),"配合 ",(0,s.jsx)(e.code,{children:"GitLab CI"})," 这种方案的优点是简单便捷，但存在一些缺陷："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"每次分析都是在特定时间针对特定代码版本进行的一次性分析，分析结果之间彼此孤立。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"GitLab Pages 没有持久存储能力，新的分析报告部署后，旧的会被覆盖，无法追溯历史。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"代码分析配置文件放在代码仓库内，修改分析配置需要修改仓库文件，很不灵活。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"无法针对特定时间段内的分析结果二次分析，所以无法追踪 API 调用趋势变化。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"分析工具默认的分析报告模板无法满足使用者丰富的可视化交互需求，无法按需检索。"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"那我们怎么解决这些问题呢？"}),"\n",(0,s.jsxs)(e.h3,{id:"方案设计",children:["方案设计",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#方案设计",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["搭建一个代码分析平台，后端服务以 ",(0,s.jsx)(e.code,{children:"API模式"})," 集成代码分析工具的分析能力，然后在前端 Admin 创建针对全项目的定时分析任务，分析任务会从 GitLab server 拉取相关项目的代码并进行分析，在分析完成后将分析结果入库存储，在前端 Admin 可以按各种检索条件查看项目的分析结果，也可以查看选定时间段内某些 API 的调用趋势变化。"]}),"\n",(0,s.jsx)(e.p,{children:"下面是代码分析平台的技术方案："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"平台示例",children:["平台示例",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#平台示例",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["查看 ",(0,s.jsx)(e.code,{children:"Project A"})," 项目中 ",(0,s.jsx)(e.code,{children:"app.localStorage.get"})," 这个 API 真实的调用及分布情况："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"查看各个子应用项目的代码评分及分析详情："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["查看 ",(0,s.jsx)(e.code,{children:"app.localStorage.set"})," 这个 API 在全应用项目中的调用趋势变化："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"分析意义",children:["分析意义",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#分析意义",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"帮助基础架构团队优化 API 导出，减少冗余设计，评估 API 上/下线的影响，评估高频 API 的变更影响。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"对子应用代码进行评分，督促其优化调用方式，杜绝“脏调用”，减少非建议调用，推进新 API 的普及进度。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"基础框架重构是一个长期线性的过程，开发者可以定期跟踪新 / 旧 API 在各个子应用中的调用趋势变化，从而更好的把控重构进度。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"小结",children:["小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"这一小节我们学习了如何实现微前端业务全应用代码分析，需要大家掌握以下知识点："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"分析工具支持多扫描源分析，前提是所有待扫描的项目代码必须在指定路径下，但不同项目来自不同的 gitlab repo，所以需要给分析工具创造一个多项目的工作环境。"}),"\n",(0,s.jsxs)(e.li,{children:["通过 ",(0,s.jsx)(e.code,{children:"CLI 模式"}),"生成全应用分析报告需要几个步骤，首先通过脚步拉取全部子应用的项目代码到指定工作目录，然后根据工作目录生成 ",(0,s.jsx)(e.code,{children:"analysis.config.js"})," 配置文件，最后执行代码分析脚步。"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"CLI + gitLab CI"})," 这种分析方案简单便捷，但存在缺陷，无法持久存储分析数据，我们可以搭建一个",(0,s.jsx)(e.code,{children:"代码分析平台"}),"来处理更多维度的分析数据，实现更精细的数据消费。"]}),"\n"]})]})}function m(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(x,{...n})}):x(n)}let g=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E4%BE%9D%E8%B5%96%E6%B2%BB%E7%90%86%EF%BC%9A%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%2F16.%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9A%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B8%9A%E5%8A%A1%E5%85%A8%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.md"]={toc:[{text:"全应用代码分析报告",id:"全应用代码分析报告",depth:2},{text:"实现原理",id:"实现原理",depth:3},{text:"相关代码",id:"相关代码",depth:3},{text:"自动化配置",id:"自动化配置",depth:3},{text:"全应用代码分析平台",id:"全应用代码分析平台",depth:2},{text:"方案设计",id:"方案设计",depth:3},{text:"平台示例",id:"平台示例",depth:3},{text:"分析意义",id:"分析意义",depth:3},{text:"小结",id:"小结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);