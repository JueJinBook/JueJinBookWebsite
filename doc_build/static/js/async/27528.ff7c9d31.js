"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["27528"],{426171:function(e,n,r){e.exports=r.p+"static/image/257da19e859170ab850f8a39f964f044.09540e4b.webp"},945002:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var t=r(552676),s=r(740453);let a=r.p+"static/image/2c20d5e8fe6374614e403c4648fcc705.6b5e03de.webp",i=r.p+"static/image/23537b015bb00c2c2df8d446d3a30f39.6130a552.webp";var o=r(426171);let l=r.p+"static/image/4cee28f02779ccf42bfcb095efe7e8bb.ec52435b.webp",c=r.p+"static/image/e7a9f9c780d4722cded876c8c118b0a4.69acecb3.webp",d=r.p+"static/image/8c0524ffb02cc19f65ef8e903b38ea1f.7b115327.webp";function p(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",img:"img",h3:"h3",code:"code",pre:"pre"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"33-实战篇--创建清单",children:["33-实战篇 ❘ 创建清单",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-实战篇--创建清单",children:"#"})]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"推荐学习指数：⭐️️⭐️️⭐️️"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"1-前言",children:["1. 前言",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本篇我们实现清单的创建、查询和删除。效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsxs)(n.h2,{id:"2-前端交互实现",children:["2. 前端交互实现",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-前端交互实现",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"21-接入-superforms--zod",children:["2.1. 接入 Superforms + Zod",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-接入-superforms--zod",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在上篇接入 Shadcn UI 的时候，我们已经安装了 Superforms + Zod，所以我们可以直接使用。"}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/lib/const.ts"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'export const ListMap = new Map([\n  ["rose", ["bg-rose-500", "玫瑰"]],\n  ["amber", ["bg-amber-500", "琥珀"]],\n  ["orange", ["bg-orange-500", "橘橙"]],\n  ["green", ["bg-lime-500", "草绿"]],\n  ["cyan", ["bg-sky-500", "天蓝"]],\n  ["indigo", ["bg-indigo-500", "葡紫"]],\n  ["pink", ["bg-pink-500", "粉粉"]],\n  ["black", ["bg-black", "黑色"]],\n]);\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"contst.ts"}),"，顾名思义，主要是存放一些常量。这里我们声明了一个清单颜色和显示名称、对应色值的映射关系。"]}),"\n",(0,t.jsxs)(n.p,{children:["当涉及到表单时，第一步往往是声明表单校验 Schema。新建 ",(0,t.jsx)(n.code,{children:"src/lib/schema/createList.ts"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { z } from "zod";\nimport { ListMap } from "$lib/const";\n\nexport const createListSchema = z.object({\n  name: z\n    .string()\n    .min(1, {\n      message: "请输入清单名称",\n    })\n    .min(2, {\n      message: "清单名称至少2个字符",\n    }),\n  color: z.string().refine((color) => [...ListMap.keys()].includes(color), {\n    message: "请选择清单颜色",\n  }),\n});\n\nexport type CreateListSchema = typeof createListSchema;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/routes/+page.server.ts"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import type { PageServerLoad, Actions } from "./$types.js";\nimport { superValidate } from "sveltekit-superforms";\nimport { createListSchema } from "$lib/schema/createList";\nimport { zod } from "sveltekit-superforms/adapters";\nimport { fail, error } from "@sveltejs/kit";\n\nexport const load: PageServerLoad = async ({ locals }) => {\n  const userId = locals.session.userId;\n  if (!userId) {\n    error(401, "尚未登录，请先登录");\n  }\n\n  return {\n    createListForm: await superValidate(zod(createListSchema)),\n  };\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Clerk-SvelteKit 会将用户数据放到 ",(0,t.jsx)(n.code,{children:"locals.session"})," 中，但此时会有 TypeScript 错误提示："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["为了修复该错误，修改 ",(0,t.jsx)(n.code,{children:"src/app.d.ts"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// See https://kit.svelte.dev/docs/types#app\n// for information about these interfaces\ndeclare global {\n  namespace App {\n    interface Locals {\n      session: {\n        userId: 'string';\n      };\n    }\n    // interface PageData {}\n    // interface PageState {}\n    // interface Platform {}\n  }\n}\n\nexport {};\n"})}),"\n",(0,t.jsx)(n.p,{children:"此时错误消失。"}),"\n",(0,t.jsxs)(n.h3,{id:"22-添加-toaster",children:["2.2. 添加 toaster",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-添加-toaster",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"当出现错误的时候，我们使用 toast 提示错误。安装 toaster，运行："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"npx shadcn-svelte@latest add sonner\n"})}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"src/routes/+layout.svelte"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:'<script lang="ts">\n  import UserButton from \'clerk-sveltekit/client/UserButton.svelte\';\n  import SignedIn from \'clerk-sveltekit/client/SignedIn.svelte\';\n  import SignedOut from \'clerk-sveltekit/client/SignedOut.svelte\';\n  import ClerkLoading from \'clerk-sveltekit/client/ClerkLoading.svelte\';\n\n  import \'../app.css\';\n\n  import ModeSwitcher from \'$lib/components/ModeSwitcher.svelte\';\n+	import { Toaster } from \'$lib/components/ui/sonner\';\n<\/script>\n\n<nav class="flex h-[60px] w-full items-center justify-between p-4">\n  <h1><a href="/" data-sveltekit-reload>嗒嗒清单</a></h1>\n  <div class="flex items-center gap-2">\n    <ClerkLoading>\n      <div>加载中...</div>\n    </ClerkLoading>\n    <SignedIn>\n      <UserButton afterSignOutUrl="/" />\n    </SignedIn>\n    <SignedOut>\n      <a href="/signin">登录</a> <span>|</span> <a href="/signup">注册</a>\n    </SignedOut>\n    <ModeSwitcher />\n  </div>\n</nav>\n\n+<Toaster position="top-right" richColors />\n\n<slot />\n\n<style>\n  :global(.cl-internal-b3fm6y),\n  :global(.cl-userButtonPopoverFooter),\n  :global(.cl-profileSection__connectedAccounts .cl-internal-fqx4fd) {\n    display: none;\n  }\n</style>\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"23-侧边栏",children:["2.3. 侧边栏",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-侧边栏",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"src/routes/+page.svelte"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"<script>\n  import SignedIn from 'clerk-sveltekit/client/SignedIn.svelte';\n  import ClerkLoading from 'clerk-sveltekit/client/ClerkLoading.svelte';\n\n  import {\n    Card,\n    CardDescription,\n    CardFooter,\n    CardHeader,\n    CardTitle\n  } from '$lib/components/ui/card';\n  import { Skeleton } from '$lib/components/ui/skeleton';\n  import CreateListModal from '$lib/components/CreateListModal.svelte';\n<\/script>\n\n<Card class=\"mx-4\">\n  <CardHeader class=\"pb-3\">\n    <CardTitle class=\"text-lg\">\n      <SignedIn let:user>\n        欢迎 {user?.fullName}!\n      </SignedIn>\n      <ClerkLoading>\n        <Skeleton class=\"h-7 w-[150px]\" />\n      </ClerkLoading>\n    </CardTitle>\n    <CardDescription class=\"text-primary max-w-lg text-balance leading-relaxed\">\n      道虽迩，不行不至；事虽小，不为不成\n    </CardDescription>\n  </CardHeader>\n  <CardFooter>\n    <CreateListModal />\n  </CardFooter>\n</Card>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["我们将创建清单的按钮连同侧边栏一同放在 ",(0,t.jsx)(n.code,{children:"<CreateListModal>"})," 组件中。"]}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/lib/components/CreateListModal.svelte"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"<script lang=\"ts\">\n  import { Button } from '$lib/components/ui/button';\n  import { Input } from '$lib/components/ui/input';\n  import {\n    Sheet,\n    SheetContent,\n    SheetDescription,\n    SheetHeader,\n    SheetTitle,\n    SheetTrigger\n  } from '$lib/components/ui/sheet';\n  import * as Form from '$lib/components/ui/form';\n  import {\n    Select,\n    SelectContent,\n    SelectGroup,\n    SelectItem,\n    SelectTrigger,\n    SelectValue\n  } from '$lib/components/ui/select';\n  import { createListSchema, type CreateListSchema } from '$lib/schema/createList';\n  import { cn } from '$lib/utils';\n  import { ListMap } from '$lib/const';\n  import { type SuperValidated, type Infer, superForm } from 'sveltekit-superforms';\n  import { zodClient } from 'sveltekit-superforms/adapters';\n  import { page } from '$app/stores';\n  import { toast } from 'svelte-sonner';\n\n  let open = $state(false);\n\n  let data: SuperValidated<Infer<CreateListSchema>> = $page.data.createListForm;\n\n  const form = superForm(data, {\n    validators: zodClient(createListSchema),\n    onUpdated: ({ form: f }) => {\n      if (!f.valid) {\n        toast.error('请先检查数据');\n      }\n    },\n    onResult({ result, cancel }) {\n      if (result.type === 'success') {\n        toast.success('清单创建成功！');\n        open = false;\n      } else {\n        if ('data' in result && result.data) {\n          toast.error(result.data.message);\n        } else {\n          toast.error('清单创建失败!');\n        }\n        cancel();\n      }\n    }\n  });\n\n  const { form: formData, enhance, submitting, reset } = form;\n\n  const onOpenChange = (open: boolean) => {\n    open = open;\n    reset();\n  };\n<\/script>\n\n<Sheet bind:open {onOpenChange}>\n  <SheetTrigger asChild let:builder>\n    <Button builders={[builder]}>添加清单</Button>\n  </SheetTrigger>\n  <SheetContent>\n    <SheetHeader>\n      <SheetTitle>添加清单</SheetTitle>\n      <SheetDescription>清单是任务的集合，比如“工作”、“生活”、“副业”</SheetDescription>\n    </SheetHeader>\n    <form method=\"POST\" action=\"?/addList\" use:enhance>\n      <Form.Field {form} name=\"name\">\n        <Form.Control let:attrs>\n          <Form.Label>设置清单的名称：</Form.Label>\n          <Input {...attrs} bind:value={$formData.name} />\n        </Form.Control>\n        <Form.FieldErrors />\n      </Form.Field>\n      <Form.Field {form} name=\"color\">\n        <Form.Control let:attrs>\n          <Form.Label>选择清单的背景色：</Form.Label>\n          <Select\n            selected={$formData.color\n              ? {\n                  value: $formData.color,\n                  label: ListMap.get($formData.color)![1]\n                }\n              : undefined}\n            onSelectedChange={(v) => {\n              v && ($formData.color = v.value);\n            }}\n          >\n            <SelectTrigger\n              {...attrs}\n              class={cn('w-[180px]', ListMap.get($formData.color), {\n                'text-white': !!attrs.name\n              })}\n            >\n              <SelectValue placeholder=\"颜色\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectGroup>\n                {#each [...ListMap.entries()] as [color, [className, name]]}\n                  <SelectItem\n                    value={color}\n                    label={name}\n                    class={cn(\n                      'my-1 w-full rounded-md text-white ring-black hover:font-bold hover:ring-2 data-[highlighted]:text-white dark:ring-white',\n                      className,\n                      `data-[highlighted]:${className}`\n                    )}\n                  >\n                    {name}\n                  </SelectItem>\n                {/each}\n              </SelectGroup>\n            </SelectContent>\n          </Select>\n          <input hidden bind:value={$formData.color} name={attrs.name} />\n        </Form.Control>\n        <Form.FieldErrors />\n      </Form.Field>\n      <Form.Button class=\"w-full\" disabled={$submitting}>创建</Form.Button>\n    </form>\n  </SheetContent>\n</Sheet>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["接下来我们添加 Form Actions，修改 ",(0,t.jsx)(n.code,{children:"src/routes/+page.server.ts"}),"，完整代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import type { PageServerLoad, Actions } from "./$types.js";\nimport { superValidate } from "sveltekit-superforms";\nimport { createListSchema } from "$lib/schema/createList";\nimport { zod } from "sveltekit-superforms/adapters";\nimport { fail, error } from "@sveltejs/kit";\n\nexport const load: PageServerLoad = async ({ locals }) => {\n  const userId = locals.session.userId;\n  if (!userId) {\n    error(401, "尚未登录，请先登录");\n  }\n\n  return {\n    createListForm: await superValidate(zod(createListSchema)),\n  };\n};\n\nexport const actions: Actions = {\n  addList: async (event) => {\n    const form = await superValidate(event, zod(createListSchema));\n\n    if (!form.valid) {\n      return fail(400, {\n        form,\n      });\n    }\n\n    try {\n      const userId = event.locals.session.userId;\n      // 创建清单\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        form,\n        message: "清单创建失败~",\n      });\n    }\n\n    console.log(form);\n    return {\n      form,\n    };\n  },\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"此时主要的交互形式已经实现，浏览器效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsxs)(n.h2,{id:"3-后端实现",children:["3. 后端实现",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-后端实现",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"31-接入-prisma",children:["3.1. 接入 Prisma",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-接入-prisma",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"安装 Prisma："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"npm install prisma @prisma/client\n"})}),"\n",(0,t.jsx)(n.p,{children:"初始化 Prisma："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"npx prisma init\n"})}),"\n",(0,t.jsxs)(n.p,{children:["此时会创建一个 ",(0,t.jsx)(n.code,{children:"prisma/schema.prisma"}),"文件，修改代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\nmodel List {\n    id        Int      @id @default(autoincrement())\n    name      String\n    userId    String\n    color     String\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["开启 MySQL 数据库，新建一个数据库，假设名为 ",(0,t.jsx)(n.code,{children:"svelteNotes"}),"，对应修改 ",(0,t.jsx)(n.code,{children:".env"}),"中的 DATABASE_URL 为："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'DATABASE_URL="mysql://root:admin@localhost:3306/svelteNotes";\n'})}),"\n",(0,t.jsxs)(n.p,{children:["运行 ",(0,t.jsx)(n.code,{children:"npx prisma migrate dev"}),"，然后给这次 migrate 起一个名字（这个名字无所谓，一个标识而已）："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"此时会完成 Prisma Schema 和数据库的同步，可以看到生成了一个 List 表："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/lib/prisma.ts"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// 代码来源于官方文档：https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/nextjs-prisma-client-dev-practices\n\nimport { PrismaClient } from '@prisma/client';\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient();\n};\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton();\n\nexport default prisma;\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma;\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"32-后端实现",children:["3.2. 后端实现",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-后端实现",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"现在让我们开始实现前后端交互。"}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"src/routes/+page.server.ts"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import type { PageServerLoad, Actions } from "./$types.js";\nimport { superValidate } from "sveltekit-superforms";\nimport { createListSchema } from "$lib/schema/createList";\nimport { zod } from "sveltekit-superforms/adapters";\nimport { fail, error } from "@sveltejs/kit";\nimport { type List } from "@prisma/client";\nimport prisma from "$lib/prisma";\n\nexport const load: PageServerLoad = async ({ locals }) => {\n  const userId = locals.session.userId;\n  if (!userId) {\n    error(401, "尚未登录，请先登录");\n  }\n\n  try {\n    const checkLists: List[] = await prisma.list.findMany({\n      where: {\n        userId,\n      },\n    });\n\n    return {\n      createListForm: await superValidate(zod(createListSchema)),\n      checkLists,\n    };\n  } catch (e) {\n    console.error(e);\n    error(401, "清单获取失败");\n  }\n};\n\nexport const actions: Actions = {\n  addList: async (event) => {\n    const form = await superValidate(event, zod(createListSchema));\n\n    if (!form.valid) {\n      return fail(400, {\n        form,\n      });\n    }\n\n    try {\n      const userId = event.locals.session.userId;\n      // 创建清单\n      await prisma.list.create({\n        data: {\n          userId,\n          color: form.data.color,\n          name: form.data.name,\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        form,\n        message: "清单创建失败~",\n      });\n    }\n\n    console.log(form);\n    return {\n      form,\n    };\n  },\n  deleteList: async (event) => {\n    try {\n      const userId = event.locals.session.userId;\n      const data = await event.request.formData();\n      const id = Number(data.get("id"));\n      await prisma.list.delete({\n        where: {\n          id,\n          userId,\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      return fail(400, {\n        message: "删除清单失败",\n      });\n    }\n  },\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"这里我们实现了清单的创建、删除以及 load 时的清单查询。"}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"src/routes/+page.svelte"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"<script lang=\"ts\">\n  import type { PageData } from './$types.js';\n  import SignedIn from 'clerk-sveltekit/client/SignedIn.svelte';\n  import ClerkLoading from 'clerk-sveltekit/client/ClerkLoading.svelte';\n\n  import {\n    Card,\n    CardDescription,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n    CardContent\n  } from '$lib/components/ui/card';\n  import { Skeleton } from '$lib/components/ui/skeleton';\n  import CreateListModal from '$lib/components/CreateListModal.svelte';\n  import ListFooter from '$lib/components/ListFooter.svelte';\n  import { ListMap } from '$lib/const';\n  import { cn } from '$lib/utils';\n\n  const { data }: { data: PageData } = $props();\n<\/script>\n\n<Card class=\"mx-4\">\n  <CardHeader class=\"pb-3\">\n    <CardTitle class=\"text-lg\">\n      <SignedIn let:user>\n        欢迎 {user?.fullName}!\n      </SignedIn>\n      <ClerkLoading>\n        <Skeleton class=\"h-7 w-[150px]\" />\n      </ClerkLoading>\n    </CardTitle>\n    <CardDescription class=\"text-primary max-w-lg text-balance leading-relaxed\">\n      道虽迩，不行不至；事虽小，不为不成\n    </CardDescription>\n  </CardHeader>\n  <CardFooter>\n    <CreateListModal />\n  </CardFooter>\n</Card>\n\n<div class=\"mx-4 mt-6 flex flex-col gap-4\">\n  {#if data.checkLists.length > 0}\n    {#each data.checkLists as { id, name, color }, index (id)}\n      <Card class={cn('w-full text-white sm:col-span-2', ListMap.get(color))}>\n        <CardHeader>\n          <CardTitle>{name}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>目前没有任务</p>\n        </CardContent>\n        <CardFooter class=\"flex-col pb-2\">\n          <ListFooter checkList={data.checkLists[index]} />\n        </CardFooter>\n      </Card>\n    {/each}\n  {:else}\n    <span class=\"text-center\">尚未创建清单，快创建一个吧</span>\n  {/if}\n</div>\n"})}),"\n",(0,t.jsx)(n.p,{children:"我们在首页渲染清单。"}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"src/lib/components/ListFooter.svelte"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"<script lang=\"ts\">\n  import {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogTrigger\n  } from '$lib/components/ui/alert-dialog';\n  import { enhance } from '$app/forms';\n  import { Separator } from '$lib/components/ui/separator';\n  import { Button } from '$lib/components/ui/button';\n  import { Trash2, CirclePlus } from 'lucide-svelte';\n  import { type List } from '@prisma/client';\n  import { toast } from 'svelte-sonner';\n\n  const { checkList }: { checkList: List } = $props();\n  const { createdAt, id } = checkList;\n\n  let loading = $state(false);\n<\/script>\n\n<Separator class=\"dark:bg-white\" />\n<footer class=\"flex h-[60px] w-full items-center justify-between text-sm text-white\">\n  <p>创建于 {createdAt?.toLocaleDateString('zh-CN')}</p>\n  <div class=\"flex flex-row\">\n    <Button size={'icon'} variant={'ghost'}>\n      <CirclePlus />\n    </Button>\n    <AlertDialog>\n      <AlertDialogTrigger asChild let:builder>\n        <Button builders={[builder]} size={'icon'} variant={'ghost'}>\n          <Trash2 />\n        </Button>\n      </AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>确定要删除吗？</AlertDialogTitle>\n          <AlertDialogDescription>该操作无法撤回</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel>取消</AlertDialogCancel>\n          <form\n            method=\"POST\"\n            action=\"?/deleteList\"\n            use:enhance={() => {\n              loading = true;\n              return async ({ result, update }) => {\n                loading = false;\n                if (result.type === 'success') {\n                  toast.success('清单删除成功！');\n                } else {\n                  console.log(result);\n                  toast.error('清单删除失败！');\n                }\n                update();\n              };\n            }}\n          >\n            <input type=\"hidden\" name=\"id\" value={id} />\n            <AlertDialogAction type=\"submit\" disabled={loading}>确定</AlertDialogAction>\n          </form>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  </div>\n</footer>\n"})}),"\n",(0,t.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"最后，我们将代码提交："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'git add -A && git commit -m "Add List"\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"4-最后",children:["4. 最后",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-最后",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本篇我们实现了清单的查询、创建和删除功能。我们使用 Shadcn Svelte 实现前端界面，使用 Prisma 做数据库数据写入，使用 Superforms + Zod 做数据验证。Shadcn Svelte 不同于 Shadcn 的地方在于虽然样式相同，但背后的实现却是借助 Svelte 的生态，而且你可以在 Shadcn Svelte 的文档中看到与 Superforms + Zod 搭配使用的例子，所以遇到使用问题的时候，可以多看看文档，看有没有相关的示例代码。"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["仓库源码：",(0,t.jsx)(n.code,{children:"git clone git@github.com:mqyqingfeng/learn-svelte.git"})]}),"\n"]})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}let h=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["Svelte%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F33-%E5%AE%9E%E6%88%98%E7%AF%87%20%E2%9D%98%20%E5%88%9B%E5%BB%BA%E6%B8%85%E5%8D%95.md"]={toc:[{text:"1. 前言",id:"1-前言",depth:2},{text:"2. 前端交互实现",id:"2-前端交互实现",depth:2},{text:"2.1. 接入 Superforms + Zod",id:"21-接入-superforms--zod",depth:3},{text:"2.2. 添加 toaster",id:"22-添加-toaster",depth:3},{text:"2.3. 侧边栏",id:"23-侧边栏",depth:3},{text:"3. 后端实现",id:"3-后端实现",depth:2},{text:"3.1. 接入 Prisma",id:"31-接入-prisma",depth:3},{text:"3.2. 后端实现",id:"32-后端实现",depth:3},{text:"4. 最后",id:"4-最后",depth:2}],title:"33-实战篇 ❘ 创建清单",headingTitle:"33-实战篇 ❘ 创建清单",frontmatter:{}}}}]);