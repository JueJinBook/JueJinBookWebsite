"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["38739"],{191984:function(n,e,r){r.r(e),r.d(e,{default:()=>G});var c=r(552676),s=r(740453);let i=r.p+"static/image/fefbfcb2fe8edbee2f8e910a201c1cf8.46ccb55a.gif",o=r.p+"static/image/34b8cf6c470b535cfb389df8b5e0ddca.14cf7d9a.gif",l=r.p+"static/image/0bf48c24d0751750524cd36739825003.70c6cd29.gif",a=r.p+"static/image/fd19060de5fab8ab992cf6482b91b6ce.9e94fb83.gif",t=r.p+"static/image/66b36dfc263ec78c742c8a2a5211f342.ff3345c1.gif",d=r.p+"static/image/239b69fe2a34fba9175bdb0a14e81dba.e0831b74.gif",h=r.p+"static/image/1c839c04d8c93c6daeb1a5af77fd252b.8e5d0231.gif",p=r.p+"static/image/1bb7fe9d92095109d37c7af2582acdf8.3b747cc4.gif",x=r.p+"static/image/20fd98725ff605459f422c4ecf0a3581.3991a0d7.gif",j=r.p+"static/image/1910c071e4abfae7e1aa943c2d455fb9.4d2806f7.gif",f=r.p+"static/image/d00e8b0082ef846ac368644d8b9681e1.433cb929.gif",m=r.p+"static/image/4ada306baf6fce4ae5d6f9b32400e075.0c157f2e.gif",g=r.p+"static/image/f7d7f145390f8d820c5ba06339f2bf30.0c157f2e.gif",u=r.p+"static/image/357fb23324f13640484bd4adad8a424d.ababbdd7.gif",b=r.p+"static/image/e257b86fa398d85615b8a212d61e88bb.ababbdd7.gif",v=r.p+"static/image/0507a6204782b7d50aebf449d4e6ce7c.f0f9ff26.gif",S=r.p+"static/image/e2657e828c0f70b6f4fa7408ebed719d.b85356fa.gif",k=r.p+"static/image/2a64dbac5c25a07bb24493ec0203ed7d.e9d6f91a.gif",y=r.p+"static/image/523d6b7d1e05976150c9a2ff48f4f12f.e9fb3913.gif",C=r.p+"static/image/3a67ce774abd5a5241f2a1286d169e43.3080a817.gif",w=r.p+"static/image/2be5c7e7218dd64227770b2f7a8c9eae.f2fd8561.gif",_=r.p+"static/image/5f7fc9d6d0c7badea1e08f711ddbadc3.60549338.gif",M=r.p+"static/image/dd04a6d36f78419d5469a5c1c20a196f.eecf7054.gif",N=r.p+"static/image/7a4082ce69ec22763bf1d07366c6e39f.b9ce28c3.gif",T=r.p+"static/image/a35660638329acd320086c0e7365759f.8b205a29.gif",W=r.p+"static/image/53dd5573c7b2da00f4c0851aba241612.e8f6ae4a.gif",L=r.p+"static/image/53e8dadef505199c94938e79f7f3f582.b942d6c9.gif",q=r.p+"static/image/b51c496fdd31040c5bda826c6fe81081.b5477bb4.gif",H=r.p+"static/image/488cdbdf7e86297feceb2c35a725e94c.a227cf8e.gif",D=r.p+"static/image/d1d4c1b451c4a84c4caa493a50b1a0b1.1daa9d29.gif",P=r.p+"static/image/f7abe442b8b4081ad6f108824b7849be.01eb8805.gif",E=r.p+"static/image/16e0346e8d752417afc98f36cb63f94e.b4f9a3f4.gif",z=r.p+"static/image/b769a656f4c0b0d2f5c441035bb7c5b4.a0a680a0.gif",J=r.p+"static/image/ec8960a9f73770ffbd735bb00cfc2f87.4f1f0ced.gif",R=r.p+"static/image/bb3fd31cda00d9a215764e6976ec5ab1.6c32d4e6.gif",B=r.p+"static/image/e6fb8cc1d69c03df2e8900997e1e5bef.836e38c0.webp",A=r.p+"static/image/90eeb3ef383c7ab435ddd4ab27ad4681.92904ed7.gif",I=r.p+"static/image/144e4d5c97b21b277d09d2c414cc6c8c.b907f70a.webp",X=r.p+"static/image/1ca6619a7cf6fc4d1faa8738e3d22653.9e111bd8.webp",O=r.p+"static/image/a3aea065e7bc40ec56213e8729282e2f.93f7a256.gif",Z=r.p+"static/image/6cda53a6070a91eb0bffed9039aea520.5c802ccf.gif";function K(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",code:"code",h2:"h2",img:"img",pre:"pre",blockquote:"blockquote",ul:"ul",li:"li",h3:"h3"},(0,s.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"第47章css锚点定位探索下一代web布局",children:["第47章—CSS锚点定位：探索下一代Web布局",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第47章css锚点定位探索下一代web布局",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["\uFEFF在 Web 开发中，元素的精准定位对于 Web 开发者一直都是一个挑战。无论是为了创建交互式菜单、信息提示框、弹出式窗口还是实现复杂的 Web 布局效果，Web 开发人员通常需要借助 JavaScript 等技术手段来实现元素的位置控制。然而，随着 CSS 的不断发展和创新，一种全新的方法正在崭露头角，为 Web 开发者提供了更简单、更灵活的元素定位方式，那就是 ",(0,c.jsx)(e.strong,{children:"CSS 锚点定位"}),"（",(0,c.jsx)(e.strong,{children:"CSS Anchor Positioning"}),"）。"]}),"\n",(0,c.jsxs)(e.p,{children:["传统的 ",(0,c.jsx)(e.a,{href:"https://www.w3.org/TR/css-position-3/#position-property",target:"_blank",rel:"noopener noreferrer",children:"CSS 定位机制"}),"（",(0,c.jsx)(e.code,{children:"position"}),"）为我们提供了绝对定位（",(0,c.jsx)(e.code,{children:"absolute"}),"）的能力，使我们可以将元素精确放置在页面上的任何位置。这种灵活性为 Web 设计师和开发人员带来了巨大的便利，但与此同时，它也带来了挑战。特别是在创建",(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7161370789680250917/section/7165845190614188062",target:"_blank",rel:"noopener noreferrer",children:"响应式 Web 布局"}),"或需要相对于其他元素进行定位的情况下，传统的 CSS 定位可能显得复杂和限制多多。"]}),"\n",(0,c.jsx)(e.p,{children:"CSS 锚点定位（CSS Anchor Positioning）是一项创新性的功能，它为我们带来了元素定位的全新范式。通过 CSS 锚点定位，我们能够将元素与其他元素关联起来，实现相对于其他元素的精确定位，而无需繁琐的 JavaScript 计算或额外的 HTML 标记。这一功能的出现，为我们提供了更多灵活性、更简单的实现方式，以及更好的性能。"}),"\n",(0,c.jsx)(e.p,{children:"在这节课中，我们将深入探讨 CSS 锚点定位的概念、基本原理、用法和最佳实践。我们将探讨如何使用锚点定位将元素精确定位到其他元素附近，以及如何应对各种复杂的定位需求。无论你是初学者还是经验丰富的开发人员，这节课都将帮助你更好地理解和利用 CSS 锚点定位，以提升你的网页设计和开发技能。让我们一起探索这个令人兴奋的新特性，为 Web 布局和定位带来全新的可能性！"}),"\n",(0,c.jsxs)(e.h2,{id:"传统的-css-定位的挑战",children:["传统的 CSS 定位的挑战",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#传统的-css-定位的挑战",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["菜单（",(0,c.jsx)(e.code,{children:"Menus"}),"）、工具提示（",(0,c.jsx)(e.code,{children:"Tooltips"}),"）、日期选择器（",(0,c.jsx)(e.code,{children:"DataPickers"}),"）、对话框（",(0,c.jsx)(e.code,{children:"Dialog"}),"）和弹出窗口（",(0,c.jsx)(e.code,{children:"Popover"}),"）等在 Web 上随处可见。尽管这些组件如此常见，但大多数情况下都没有原生的 HTML 元素（对话框 ",(0,c.jsx)(e.code,{children:"Dialog"})," 除外）。它们的实现通常需要复杂的 CSS 技巧或基于 JavaScript 的计算。"]}),"\n",(0,c.jsxs)(e.p,{children:["拿维基百科的工具提示（",(0,c.jsx)(e.code,{children:"Tooltips"}),"）为例："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:Z,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"目前为止，你可能会考虑下面这种做法，将一个元素与另一个元素关联起来，并且会使用传统的 CSS 定位来追踪它们的位置："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="tooltips">\n    <a href="#" class="anchor">Hove Me</a>\n    <span class="anchored">Sample text for your tooltip!</span>\n</div>\n'})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".tooltips {\n    position: relative;\n\n    .anchored {\n        position: absolute;\n        left: 50%;\n        translate: -50% calc(100% + 5vh);\n        opacity: 0;\n        transition: all .2s linear;\n    }\n\n    &:hover .anchored {\n        translate: -50% -100%;\n        opacity: 1;\n        animation: shake 500ms ease-in-out forwards;\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:O,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/mdaQwPN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdaQwPN"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["事实上，该方案并不理想。因为，传统的 CSS 定位有一个最常见的困难，那就是实现复杂和精确的布局，尤其是在处理动态内容或响应式设计时。基于静态坐标定位元素可能导致在不同设备和屏幕尺寸上布局不一致。例如，如果你打开工具提示（",(0,c.jsx)(e.code,{children:"Tooltips"}),"），并且它被视口裁剪，这可能不是一个很好的用户体验。你希望工具提示（",(0,c.jsx)(e.code,{children:"Tooltips"}),"）能够自适应。另外，你还希望与页面进行交互时不会破坏工具提示（",(0,c.jsx)(e.code,{children:"Tooltips"}),"），例如，如果用户滚动页面或调整视图大小，工具提示能自动调整位置。为了避免这些现象，你不得不使用更为复杂的 CSS 技巧或使用 JavaScript 来计算。"]}),"\n",(0,c.jsx)(e.p,{children:"换句话说，根据元素关系定位元素对于传统的 CSS 定位是非常棘手的，甚至可能需要 JavaScript 进行干预。这也将引发一些问题，比如："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"何时计算样式？"}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"如何计算样式？"}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"多久计算一次样式？"}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"等等..."}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"这样做，对于你的使用情况可能有效，但这种变通方法可能容易出错，耗时，并且根据你的使用方式可能会影响到 Web 页面的性能。此外，处理滚动和固定定位可能会很麻烦，特别是在复杂的布局中。"}),"\n",(0,c.jsx)(e.p,{children:"也就是说，如果你只想将一个元素锚定到另一个元素。在理想情况下，你的解决方案将会自动调整并对其周围环境作出反应。CSS 锚点定位特性可以使你轻易地解决上面提到的这些问题。"}),"\n",(0,c.jsxs)(e.h2,{id:"css-锚点定位简介",children:["CSS 锚点定位简介",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#css-锚点定位简介",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["CSS 锚点定位（CSS Anchor Positioning）是一种用于在 Web 页面上定位元素的新方法，它是 CSS 的一个新特性。",(0,c.jsx)(e.a,{href:"https://www.w3.org/TR/css-anchor-position-1/#intro",target:"_blank",rel:"noopener noreferrer",children:"W3C 规范是这样描述"}),"的：“通过锚点定位（通过锚定位函数 ",(0,c.jsx)(e.code,{children:"anchor()"})," 和 ",(0,c.jsx)(e.code,{children:"anchor-size()"}),"）可以将一个绝对定位的元素与页面上的一个或多个其他元素锚定在一起，同时还允许他们尝试多种可能的位置，以找到避免重叠和溢出的最佳位置”。"]}),"\n",(0,c.jsx)(e.p,{children:"简单地说，CSS 锚点定位提高了元素绝对定位的能力，Web 开发者可以使用一种更简单、更自然的方式来定位元素之间的关系，使得页面元素能够根据其包含块内的其他元素的位置和大小进行定位和调整。该功能的出现为 Web 开发人员提供了更多的控制权和灵活性，同时减少了对 JavaScript 依赖，使页面的性能更加优化。"}),"\n",(0,c.jsx)(e.p,{children:"CSS 锚点定位通过引入一组属性和值，使元素能够与彼此连接，为 Web 布局中的定位提供了一种全新的范式："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["首先，使用 ",(0,c.jsx)(e.code,{children:"anchor-name"})," 来定义一个锚点，经过标记的元素会作为绝对定位的基准目标"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["其次，将 ",(0,c.jsx)(e.code,{children:"anchor()"})," 或 ",(0,c.jsx)(e.code,{children:"anchor-size()"})," 函数用作被定位元素的内嵌属性（",(0,c.jsx)(e.code,{children:"top"})," 、",(0,c.jsx)(e.code,{children:"right"})," 、",(0,c.jsx)(e.code,{children:"bottom"})," 、",(0,c.jsx)(e.code,{children:"left"})," 或它们的逻辑等效属性）的值"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["最后，使用 ",(0,c.jsx)(e.code,{children:"@position-fallback"})," 规则为锚点定位提供回退机制，即设置多套不同的锚点定位规则，以适应更为复杂的 Web 布局"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["除此之外，",(0,c.jsx)(e.a,{href:"https://drafts.csswg.org/css-anchor-position-1/",target:"_blank",rel:"noopener noreferrer",children:"CSS 锚点定位草案还引入了几个扩展了 Web 布局可能性的功能"}),"："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"锚定边缘（"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"anchor-edge"})})," ",(0,c.jsx)(e.strong,{children:"）"})," ：允许 Web 开发人员定义元素应该锚定到哪些确切边缘，从而提供了对位置的精确控制"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"锚定外边距（"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"anchor-margin"})})," ",(0,c.jsx)(e.strong,{children:"）"})," ：允许 Web 开发人员指定在被定位元素周围的额外边距"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"滚动锚定（"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"overflow-anchor"})})," ",(0,c.jsx)(e.strong,{children:"）"})," ：当元素动态添加或从文档中移除时，它有助于保持滚动位置不变。它防止页面跳跃，为用户提供更平滑的滚动体验"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"注意，这几个新扩展的特性可能会随着后续规范的完善有所改变，甚至是有可能被废弃！未来应该以正式规范为主！"}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"如果从功能上来说，它主要包含以下几个方面："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"定位元素相对于锚点元素"}),"：允许 Web 开发人员将一个元素相对于页面上的其他元素进行定位。这使得元素的位置可以根据锚点元素的位置来确定"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"灵活的定位"})," ：允许尝试多种可能的位置来找到避免重叠和溢出的最佳位置。这增加了 Web 布局的灵活性"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"无需依赖 JavaScript 脚本"}),"：与传统的 JavaScript 相比，CSS 锚点定位不需要使用 JavaScript 来实现元素的定位"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"自适应性"}),"：可以自动适应不同屏幕尺寸和视窗大小，确保元素的位置始终合适，不会被遮挡。这在响应式 Web 设计中尤其有用"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"降低依赖性"}),"：减少了对 JavaScript 库和第三方依赖项的需求，使 Web 页面更轻量级，性能更佳"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"适用于顶层元素"}),"：可以与位于 Web 页面的顶层元素一起使用，不受其他元素的影响"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"总之，CSS 锚点定位是一项令人兴奋的新功能，它为 Web 布局和元素定位提供了一种更简单、更灵活的方式，使得 Web 开发人员能够更轻松地实现各种复杂的布局效果，而无需依赖复杂 JavaScript 计算。"}),"\n",(0,c.jsxs)(e.h2,{id:"css-锚点定位的使用",children:["CSS 锚点定位的使用",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#css-锚点定位的使用",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["由于 CSS 锚点定位是 CSS 新特性之一，它仍处于实验阶段，为了确保你在浏览器中能看到示例展示的效果，请使用 Chrome 或 Chrome Canary 浏览器，并且在地址栏中输入 ",(0,c.jsx)(e.code,{children:"chrome://flags"}),' ，然后启用"实验性Web平台功能"标志。']}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:X,alt:""})}),"\n",(0,c.jsxs)(e.p,{children:["你也可以使用 ",(0,c.jsx)(e.a,{href:"https://www.oddbird.net/",target:"_blank",rel:"noopener noreferrer",children:"OddBird"})," 团队为 CSS 锚点定位提供的 Polyfill （",(0,c.jsx)(e.a,{href:"https://anchor-polyfill.netlify.app/",target:"_blank",rel:"noopener noreferrer",children:"CSS Anchor Positioning Polyfill"}),"）。当然，",(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7258822669154877480",target:"_blank",rel:"noopener noreferrer",children:"还可以使用 @supports 对 CSS 锚点定位做检测"}),"，检测你使用的浏览器是否支持该特性："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@supports (anchor-name: --foo) {\n    /* CSS ... */\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"接下来，我们就可以开始进入 CSS 锚点定位的世界！"}),"\n",(0,c.jsx)(e.p,{children:"为了能让大家对 CSS 锚点定位有一个更形象的认识，我们先从传统的 CSS 绝对定位着手。例如："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="container">\n    <div class="anchor"></div>\n    <span class="anchored"></span>\n    <span class="anchored"></span>\n    <span class="anchored"></span>\n    <span class="anchored"></span>\n</div>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["这是一段很简单的 HTML 的结构。接着使用 CSS 将 ",(0,c.jsx)(e.code,{children:".container"})," 变为一个相对容器，而 ",(0,c.jsx)(e.code,{children:".anchored"})," 则是需要被定位的元素，即应用了绝对定位的元素："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".container {\n    position: relative;\n    \n    .anchored {\n        position: absolute;\n        \n        &:nth-child(1) {\n            top: 0;\n            left: 0;\n        }\n        \n        &:nth-child(2) {\n            top: 0;\n            right: 0;\n        }\n        \n        &:nth-child(3) {\n            left: 0;\n            bottom: 0;\n        }\n        \n        &:nth-child(4) {\n            right: 0;\n            bottom: 0;\n        }\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["稍微对 CSS 的定位有所了解的开发者都知道，四个绝对定位元素（",(0,c.jsx)(e.code,{children:".anchored"}),"）相对于其父容器 ",(0,c.jsx)(e.code,{children:".container"})," 进行定位，它们分别位于 ",(0,c.jsx)(e.code,{children:".container"})," 容器的四个角落："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:I,alt:""})}),"\n",(0,c.jsxs)(e.p,{children:["CSS 锚点定位还没出现之前，希望绝对定位元素（",(0,c.jsx)(e.code,{children:".anchored"}),"）相对于兄弟元素 ",(0,c.jsx)(e.code,{children:".anchor"})," 定位是需要 JavaScript 计算才能完成的。现在，Web 开发者可以使用 CSS 锚点定位按下面步骤来实现。"]}),"\n",(0,c.jsxs)(e.h3,{id:"定义一个锚点",children:["定义一个锚点",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#定义一个锚点",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"要使用 CSS 锚点定位，你首先需要定义一个锚点，以便用于定位其他元素。可以通过 CSS 或 HTML 两种方式来定义锚点。"}),"\n",(0,c.jsxs)(e.p,{children:["你可以在 CSS 中定义锚点，方法是在锚点元素上设置 ",(0,c.jsx)(e.code,{children:"anchor-name"})," 属性，例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".anchor {\n    anchor-name: --my-anchor;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"anchor-name"})," 属性接受类似 ",(0,c.jsx)(e.code,{children:"--my-anchor"})," 的横杠标识符值（",(0,c.jsx)(e.code,{children:"<dashed-ident>"}),"）。接下来，你可以使用 ",(0,c.jsx)(e.code,{children:"anchor-default"})," 属性将另一个元素连接到你定义的锚点上。例如下面这个示例："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<a href="#" class="anchor">Hove Me</a>\n<span class="anchored">Sample text for your tooltip!</span>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["使用 ",(0,c.jsx)(e.code,{children:"anchor-name"})," 属性将 ",(0,c.jsx)(e.code,{children:".anchor"})," 元素定义为一个锚点，然后使用 ",(0,c.jsx)(e.code,{children:"anchor-default"})," 属性将 ",(0,c.jsx)(e.code,{children:".anchored"})," 元素连接到 ",(0,c.jsx)(e.code,{children:".anchor"})," 锚点上："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".anchor {\n    anchor-name: --my-anchor;\n}\n\n.anchored {\n    position: absolute;\n    anchor-default: --my-anchor;\n    left: anchor(--my-anchor 50%);\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:A,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/ZEVmgGM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZEVmgGM"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["正如你所看到的，定位元素（",(0,c.jsx)(e.code,{children:".anchored"}),"）将会相对于已定义的锚点元素（",(0,c.jsx)(e.code,{children:".anchor"}),"）定位，不再是相对于离其最近的设置了非 ",(0,c.jsx)(e.code,{children:"static"})," 值的 ",(0,c.jsx)(e.code,{children:"position"})," 属性容器。"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:B,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"这也是 CSS 锚点定位与传统 CSS 定位的主要区别之一："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:R,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/PoXxMZW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PoXxMZW"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["或者，你可以在 HTML 中使用 ",(0,c.jsx)(e.code,{children:"anchor"})," 属性定义一个锚点，",(0,c.jsx)(e.code,{children:"anchor"})," 属性的值是锚点元素的 ",(0,c.jsx)(e.code,{children:"ID"})," ，从而创建了一个隐式锚点。例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<a href="#" class="anchor" id="my-anchor">Hove Me</a>\n<span class="anchored" anchor="my-anchor">Sample text for your tooltip!</span>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["上面的代码中，我们给 ",(0,c.jsx)(e.code,{children:".anchor"})," 元素分配了一个名为 ",(0,c.jsx)(e.code,{children:"my-anchor"})," 的 ",(0,c.jsx)(e.code,{children:"ID"})," 值，并且在 ",(0,c.jsx)(e.code,{children:"anchored"})," 元素使用 ",(0,c.jsx)(e.code,{children:"anchor"})," 属性来指定它应该被连接到 ",(0,c.jsx)(e.code,{children:"my-anchor"})," 锚点上。这个有点类似于 HTML 的 ",(0,c.jsx)(e.code,{children:"<label>"})," 元素的 ",(0,c.jsx)(e.code,{children:"for"})," 属性与 ",(0,c.jsx)(e.code,{children:"<input>"})," 元素的 ",(0,c.jsx)(e.code,{children:"ID"})," 属性之间的关系。"]}),"\n",(0,c.jsxs)(e.p,{children:["如此一来，",(0,c.jsx)(e.code,{children:".anchored"})," 元素也将相对于锚点元素 ",(0,c.jsx)(e.code,{children:".anchor"})," 进行定位："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".anchored {\n    position: absolute;\n    left: anchor(50%);\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:J,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/YzdRmQW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzdRmQW"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["在 HTML 中使用 ",(0,c.jsx)(e.code,{children:"anchor"})," 属性定义的锚点与 CSS 中使用 ",(0,c.jsx)(e.code,{children:"anchor-name"})," 属性定义的锚点是等效的。不同的是，HTML 定义的锚点是一个隐式锚点。"]}),"\n",(0,c.jsxs)(e.h3,{id:"使用锚点函数定位元素",children:["使用锚点函数定位元素",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用锚点函数定位元素",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["一旦定义了锚点，绝对定位的元素可以在其 ",(0,c.jsx)(e.code,{children:"inset"})," 属性中使用锚点函数 ",(0,c.jsx)(e.code,{children:"anchor()"})," 引用一个或多个锚点元素的位置。",(0,c.jsx)(e.code,{children:"anchor()"})," 函数可接受三个参数："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"<anchor()> = anchor( <anchor-element>? <anchor-side>, <length-percentage>? ) \n\n<anchor-element> = <dashed-ident> | implicit \n<anchor-side> = auto | auto-same | top | left | right | bottom | start | end | self-start | self-end | <percentage> | center\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"anchor()"})," 函数的三个参数值的具体含义是："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"锚点元素（"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"<anchor-element>"})})," ",(0,c.jsx)(e.strong,{children:"）"})," ：要使用的锚点的锚点名称，或者你可以省略该值以使用隐式锚点。它可以通过 HTML 关系（",(0,c.jsx)(e.code,{children:"anchor"})," 属性与 ",(0,c.jsx)(e.code,{children:"id"})," 关连在一起）或带有锚点名称（",(0,c.jsx)(e.code,{children:"anchor-name"}),"）值的 ",(0,c.jsx)(e.code,{children:"anchor-default"})," 属性来定义，可以是 ",(0,c.jsx)(e.code,{children:"<dashed-ident>"})," （比如 ",(0,c.jsx)(e.code,{children:"--my-anchor"}),"）或 ",(0,c.jsx)(e.code,{children:"implicit"})," （隐式锚点）。该参数值指定了定位元素从哪个锚点元素获取定位信息。"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"锚点位置（"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"<achor-side>"})})," ",(0,c.jsx)(e.strong,{children:"）"})," ：指的是目标锚点元素相应边缘的位置，即你要使用的位置的关键字。它的值可以是："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"auto"})," 和 ",(0,c.jsx)(e.code,{children:"auto-same"})," ：根据在哪个 ",(0,c.jsx)(e.code,{children:"inset"})," 属性中使用它来解析为锚点元素的一侧，触发自动回退行为"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"top"})," 、",(0,c.jsx)(e.code,{children:"right"})," 、",(0,c.jsx)(e.code,{children:"bottom"})," 和 ",(0,c.jsx)(e.code,{children:"left"})," ：引用锚点元素指定边缘。注意，这些只能在匹配轴上的 ",(0,c.jsx)(e.code,{children:"inset"})," 属性中使用"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"start"})," 、",(0,c.jsx)(e.code,{children:"end"})," 、",(0,c.jsx)(e.code,{children:"self-start"})," 和 ",(0,c.jsx)(e.code,{children:"self-end"})," ：通过将关键词与定位元素的书写模式（对于 ",(0,c.jsx)(e.code,{children:"self-start"})," 和 ",(0,c.jsx)(e.code,{children:"self-end"}),"）或定位元素包含块（对于 ",(0,c.jsx)(e.code,{children:"start"})," 和 ",(0,c.jsx)(e.code,{children:"end"})," ）的书写模式相匹配，引用与 ",(0,c.jsx)(e.code,{children:"inset"})," 属性相同轴上的锚点元素的一侧"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"<percentage>"})," 和 ",(0,c.jsx)(e.code,{children:"center"})," ：引用与开始或结束边缘之间对应百分比之间的位置，其中 ",(0,c.jsx)(e.code,{children:"0%"})," 等同于 ",(0,c.jsx)(e.code,{children:"start"})," ，",(0,c.jsx)(e.code,{children:"100%"})," 等同于 ",(0,c.jsx)(e.code,{children:"end"})," 。",(0,c.jsx)(e.code,{children:"center"})," 等同于 ",(0,c.jsx)(e.code,{children:"50%"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"回退值（"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"<length-percentage>"})})," ",(0,c.jsx)(e.strong,{children:"）"})," ：指定如果它是无效的锚点函数，函数应该解析为什么。这是一个可选的回退值，接受长度或百分比。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["也就是说，在传统的 CSS 定位中，只能给 ",(0,c.jsx)(e.code,{children:"inset"})," 属性（即 ",(0,c.jsx)(e.code,{children:"top"})," 、",(0,c.jsx)(e.code,{children:"right"})," 、",(0,c.jsx)(e.code,{children:"bottom"})," 、",(0,c.jsx)(e.code,{children:"left"})," 或它们的逻辑等效属性）设置长度或百分比值，它们是相对于定位容器盒子边缘定位。在 CSS 锚点定位中，是将锚点函数（",(0,c.jsx)(e.code,{children:"anchor()"}),"）作为定位元素的 ",(0,c.jsx)(e.code,{children:"inset"})," 属性的值，将会相对于锚点元素盒子边缘定位。例如前面示例中的代码所示："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".anchored {\n    left: anchor(--my-anchor 50%);\n}\n\n/* 使用 anchor-default 的替代方法 */\n.anchored {\n    anchor-default: --my-anchor;\n    left: anchor(50%);\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"来看一个简单的案例。"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:z,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/qBLLWEq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBLLWEq"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["示例中每个 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 都是相对于锚点元素定位的。我在这里使用了单个 HTML 元素来实现的 ",(0,c.jsx)(e.code,{children:"Tooltips"})," ："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<p>Do you like <span data-tooltip="like this one" tabindex="0" style="--anchor: --tooltip-1;">tooltips</span>? Do want to use them <span data-tooltip="well do you?" tabindex="0" style="--anchor: --tooltip-2;">without a hassle</span>? <span data-tooltip="also known as smart CSS" tabindex="0" style="--anchor: --tooltip-3;">Effortless Style</span> is here to help you!</p>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["使用了内联 CSS ，将每个 ",(0,c.jsx)(e.code,{children:"span[data-tooltip]"})," 定义为锚点元素，例如 ",(0,c.jsx)(e.code,{children:"--anchor: --tooltip-1"})," 。",(0,c.jsx)(e.code,{children:"Tooltips"})," 的 UI 是使用锚点元素的伪元素 ",(0,c.jsx)(e.code,{children:"::before"})," 和 ",(0,c.jsx)(e.code,{children:"::after"})," 实现的，并且其内容通过 ",(0,c.jsx)(e.code,{children:"content"})," 属性的 ",(0,c.jsx)(e.code,{children:"attr()"})," 函数获取元素的 ",(0,c.jsx)(e.code,{children:"data-tooltip"})," 属性的值。"]}),"\n",(0,c.jsxs)(e.p,{children:["最为关键的是，每个 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 的定位是根据相应的锚点来定位的："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    [data-tooltip] {\n        anchor-name: var(--anchor);\n    \n        &::before,\n        &::after {\n            position: absolute;\n            left: anchor(var(--anchor) center);\n            bottom: anchor(var(--anchor) bottom);\n        }\n    \n        :is(&:hover, &:focus-visible) {\n            &::before,\n            &::after {\n                bottom: anchor(var(--anchor) top);\n          }\n        }\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["你还可以在 ",(0,c.jsx)(e.code,{children:"calc()"})," 函数中使用锚点函数。例如，把上面示例中的 ",(0,c.jsx)(e.code,{children:"bottom"})," 属性的值调整为："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    [data-tooltip] {\n        anchor-name: var(--anchor);\n    \n        &::before,\n        &::after {\n            position: absolute;\n            anchor-default: var(--anchor);\n            left: anchor(center);\n            bottom: calc(-5cqb - anchor(top));\n        }\n    \n        :is(&:hover, &:focus-visible) {\n            &::before,\n            &::after {\n                bottom: anchor(top);\n            }\n        }\n    }\n}\n\n/* 等同于 */\n@layer anchor {\n    [data-tooltip] {\n        anchor-name: var(--anchor);\n    \n        &::before,\n        &::after {\n            position: absolute;\n            /* anchor-default: var(--anchor); */\n            left: anchor(center);\n            bottom: calc(-5cqb - anchor(var(--anchor) top));\n        }\n    \n        :is(&:hover, &:focus-visible) {\n            &::before,\n            &::after {\n                bottom: anchor(var(--anchor) top);\n            }\n        }\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这样做可以使得 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 组件的 ",(0,c.jsx)(e.code,{children:"bottom"})," 属性的初始值与终点值相差较大，使得 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 组件明显的从下面往上移入，有点类似于 ",(0,c.jsx)(e.code,{children:"slideInUp"})," 的动画效果："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/GRPPRpa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRPPRpa"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["不难发现，每个 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 组件在水平方向都是位于锚点元素的正中间（它与锚点元素水平居中对齐）。因为 ",(0,c.jsx)(e.code,{children:"left"})," 的值为 ",(0,c.jsx)(e.code,{children:"anchor(center)"})," ，并且使用 ",(0,c.jsx)(e.code,{children:"translate"})," 属性沿着 ",(0,c.jsx)(e.code,{children:"x"})," 轴向左拉回 ",(0,c.jsx)(e.code,{children:"50%"})," ："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"[data-tooltip] {\n    &::before,\n    &::after {\n        left: anchor(center); /* 相当于 left: 50%;*/\n    }\n    \n    &::before {\n        translate: -50% 10px;\n    }\n    \n    &::after {\n        translate: -50% 0;\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["如果你知道或者说显式给 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 组件定义了宽度，那么还可以像下面这样编写 CSS ，使 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 组件依旧相对于锚点元素水平居中："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    [data-tooltip] {\n        --inline-size: 120px;\n        anchor-name: var(--anchor);\n        \n        &::before,\n        &::after {\n            position: absolute;\n            anchor-default: var(--anchor);\n            width: var(--inline-size);\n          \n            /* left: anchor(center); */\n            left: calc(anchor(center) - var(--inline-size) * .5);\n            bottom: calc(-5cqb - anchor(top));\n        }\n        \n        &::before {\n            --inline-size: 10px;\n            bottom: calc(-5cqb - anchor(top) - 10px);\n        }\n        \n        :is(&:hover, &:focus-visible) {\n            &::before {\n                bottom: calc(anchor(top) - 10px);\n            }\n          \n            &::after {\n                bottom: anchor(top);\n            }\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:P,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/Jjwwjya",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/Jjwwjya"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["上面示例是显式定义定位元素的尺寸。但是，如果你希望根据锚点元素的大小来确定定位元素的大小，那么就可以使用 ",(0,c.jsx)(e.code,{children:"anchor-size()"})," 函数，而不是自己计算。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"anchor-size()"})," 函数类似于 ",(0,c.jsx)(e.code,{children:"anchor()"}),"，并接受相同的参数，只是 ",(0,c.jsx)(e.code,{children:"<anchor-side>"})," 关键字被 ",(0,c.jsx)(e.code,{children:"<anchor-size>"})," 替换，它指的是两个相对边之间的距离："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"anchor-size() = anchor( <anchor-element>? <anchor-size>, <length-percentage>? )\n\n<anchor-element> = <dashed-ident> | implicit \n<anchor-size> = width | height | block | inline | self-block | self-inline\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"<anchor-size>"})," 分为物理和逻辑关键词："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["物理关键词（",(0,c.jsx)(e.code,{children:"width"})," 和 ",(0,c.jsx)(e.code,{children:"height"}),"）分别指的是锚点元素的宽度（",(0,c.jsx)(e.code,{children:"width"}),"）和高度（",(0,c.jsx)(e.code,{children:"height"}),"）。与 ",(0,c.jsx)(e.code,{children:"anchor()"})," 函数不同的是，它没有必须匹配轴的限制；例如， ",(0,c.jsx)(e.code,{children:"width: anchor-size(--my-anchor height)"})," 是有效的"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["逻辑关键词（",(0,c.jsx)(e.code,{children:"block"})," 、",(0,c.jsx)(e.code,{children:"inline"})," 、",(0,c.jsx)(e.code,{children:"self-block"})," 和 ",(0,c.jsx)(e.code,{children:"self-inline"}),"）根据元素的书写模式（对于 ",(0,c.jsx)(e.code,{children:"self-block"})," 和 ",(0,c.jsx)(e.code,{children:"self-inline"})," ）或元素的包含块的书写模式（对于 ",(0,c.jsx)(e.code,{children:"block"})," 和 ",(0,c.jsx)(e.code,{children:"inline"}),"）之一，映射到物理关键词之一"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["表示有效锚点大小函数的 ",(0,c.jsx)(e.code,{children:"anchor-size()"})," 函数会解析为锚点元素的相关边缘（左和右，或顶部和底部，取决于指定的轴）之间的 ",(0,c.jsx)(e.code,{children:"<length>"})," 。"]}),"\n",(0,c.jsxs)(e.p,{children:["需要注意的是，只有在满足以下所有条件的情况下，",(0,c.jsx)(e.code,{children:"anchor-size()"})," 函数才是有效的："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"它在绝对定位元素的尺寸属性中使用"}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["存在该元素的目标锚点元素，并指定了函数中的 ",(0,c.jsx)(e.code,{children:"<anchor-element>"})," 值"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["如果上面两条件中任何一条件为假（",(0,c.jsx)(e.code,{children:"false"}),"），则 ",(0,c.jsx)(e.code,{children:"anchor-size()"})," 函数会解析为其指定的回退值（",(0,c.jsx)(e.code,{children:"<length-percentage>"}),"）。如果未指定回退值，则 ",(0,c.jsx)(e.code,{children:"anchor-size()"})," 函数会解析为 ",(0,c.jsx)(e.code,{children:"0px"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["继续拿上面的 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 组件为例，假设要使 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 组件的宽度是锚点元素宽度的两倍，那么可以像下面这样编写 CSS ："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    [data-tooltip] {\n        anchor-name: var(--anchor);\n        \n        &::before,\n        &::after {\n            position: absolute;\n            anchor-default: var(--anchor);\n            left: anchor(center);\n            bottom: calc(-5cqb - anchor(var(--anchor) top));\n            translate: -50% 0;\n        }\n        \n        &::before {\n            width: 10px;\n            bottom: calc(-5cqb - anchor(top) - 10px);\n        }\n        \n        &::after {\n            /* 等于锚点元素宽度的两倍 */\n            width: calc(anchor-size(var(--anchor) width) * 2);\n        }\n        \n        :is(&:hover, &:focus-visible) {\n            &::before {\n                bottom: calc(anchor(top) - 10px);\n            }\n            \n            &::after {\n                bottom: anchor(top);\n            }\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:D,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/WNLLbvZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNLLbvZ"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["前面示例中锚点元素都是静态元素（",(0,c.jsx)(e.code,{children:"position: static"}),"）。接下来，我们来看一个定位元素锚定到具有绝对定位的元素上，即锚点元素元素应用了绝对定位。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="draggable anchor">\n    \x3c!-- 锚点元素应用了绝对定位 --\x3e\n</div>\n\n\x3c!-- 锚定元素，相对于锚点元素 anchor 绝对定位 --\x3e\n<span class="anchored">Please Drag Me Around The Screen!</span>\n'})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    .anchor {\n        position: absolute;\n        anchor-name: --tooltips;\n    }\n  \n    .anchored {\n        position: absolute;\n        anchor-default: --tooltips;\n        bottom: calc(anchor(top) + 10px);\n        left: anchor(center);\n        translate: -50% 0;\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:H,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/xxmmGRR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxmmGRR"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["拖动图标时，",(0,c.jsx)(e.code,{children:"Tooltips"})," 也会随着锚点元素移动，但它始终是相对于锚点元素 ",(0,c.jsx)(e.code,{children:".anchor"})," 定位。不过，在这种情况下，建议用一个元素将锚点元素 ",(0,c.jsx)(e.code,{children:".anchor"})," 包裹起来，并且将其 ",(0,c.jsx)(e.code,{children:"position"})," 属性的值设置为 ",(0,c.jsx)(e.code,{children:"relative"})," ："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="anchor--wrapper">\n    <div class="draggable anchor">\n        \x3c!-- 锚点元素应用了绝对定位 --\x3e\n    </div>\n    \n    \x3c!-- 锚定元素，相对于锚点元素 anchor 绝对定位 --\x3e\n    <span class="anchored">Please Drag Me Around The Screen!</span>\n</div>\n'})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".anchor--wrapper {\n    position: relative;\n}\n"})}),"\n",(0,c.jsxs)(e.h3,{id:"跟踪滚动位置",children:["跟踪滚动位置",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#跟踪滚动位置",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"在某些情况下，你的锚定元素（绝对定位的元素）可能位于滚动容器内。同时，你的锚定元素可能位于容器之外。例如："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="scroll--container">\n    <h1>What is Lorem Ipsum?</h1>\n    <p>Lorem Ipsum is <span class="tooltips anchor" style="--anchor-name: --tooltips-1">simply dummy<div class="tooltips__content anchored" style="--anchor:--tooltips-1">Wet slippery thing.</div></span> text of the printing and <span class="tooltips" style="--anchor-name: --tooltips-2">typesetting industry</span>. </p>\n</div>\n<div class="tooltips__content anchored" style="--anchor: --tooltips-2">Formal attire. 007?</div>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["由于出于性能原因，布局通常在与滚动不同的线程中执行，但 ",(0,c.jsx)(e.code,{children:"anchor()"})," 可能会导致定位更改（可以在滚动线程中处理）和布局更改（无法处理），因此 ",(0,c.jsx)(e.code,{children:"anchor()"})," 被定义为锚点元素和锚定元素（绝对定位元素）的容器之间的所有滚动容器都处于初始滚动位置。这意味着如果滚动容器处于非初始位置，锚定元素将无法与其锚点元素对齐。"]}),"\n",(0,c.jsxs)(e.p,{children:["基于上述原因，你需要一种追踪滚动位置的方法。CSS 的 ",(0,c.jsx)(e.code,{children:"anchor-scroll"})," 属性可以做到这一点，你可以在锚定的元素上设置它，并将其值设为你想要追踪的锚点。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".anchored {\n    anchor-scroll: var(--anchor);\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:q,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/ZEVVKMW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZEVVKMW"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["你可能注意到了 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 是如何跟踪其各自的锚点元素的。你可以调整滚动容器的大小，",(0,c.jsx)(e.code,{children:"Tooltips"})," 位置也会随着锚点元素位置改变而更新。"]}),"\n",(0,c.jsxs)(e.p,{children:["也就是说，",(0,c.jsx)(e.code,{children:"anchor-scroll"})," 属性允许 Web 开发者在不不丧独立滚动线程的性能优势情况下进行补偿，只要绝对定位元素（锚定元素）锚定到相应的锚点即可。该属性有三个不同的值："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"anchor-scroll = none | default | <anchor-element>\n"})}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"none"})," ：无效果，不会追踪滚动位置"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"default"})," ：与 ",(0,c.jsx)(e.code,{children:"<anchor-element>"})," 完全相同，但其值来自元素上的 ",(0,c.jsx)(e.code,{children:"anchor-default"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"<anchor-element>"})," ：选择与 ",(0,c.jsx)(e.code,{children:"anchor()"})," 相同的目标锚点元素，将在定位和回退中进行补偿"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["需要注意的是，当元素使用 ",(0,c.jsx)(e.code,{children:"anchor-default"})," 或具有隐式锚点元素时，Web 开发者通常可以避免显式设置 ",(0,c.jsx)(e.code,{children:"anchor-scroll"})," 属性值，因为该属性的初始值为 ",(0,c.jsx)(e.code,{children:"default"})," 。"]}),"\n",(0,c.jsx)(e.p,{children:"另外，你可能从上面的示例中发现了，绝对定位元素（锚定元素）无法检测到已跟踪的锚点元素是否超出滚动容器视口。但是，它仍然会跟踪锚点的位置。到目前为止，还没有一种方法可以在锚点元素超出滚动容器时将锚定的元素裁剪。"}),"\n",(0,c.jsxs)(e.p,{children:["有的时候，我们可以利用这个特性（锚定元素溢出容器无法被裁剪）来解决一些溢出问题。比如，在《",(0,c.jsx)(e.a,{href:"https://s.juejin.cn/ds/idjSE3Nr/",target:"_blank",rel:"noopener noreferrer",children:"防御式 CSS"}),"》的《",(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7199571709102391328/section/7213705145954074679#heading-12",target:"_blank",rel:"noopener noreferrer",children:"溢出常见问题与排查"}),"》中",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/ExeMRvJ",target:"_blank",rel:"noopener noreferrer",children:"有一个是定位元素超出容器被裁剪的案例"}),"："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:L,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/ExeMRvJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ExeMRvJ"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"除了传统的 CSS 解决方案（增加额外的 HTML 标签）之外，现在可以使用 CSS 的锚点定位来解决："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    .anchor {\n        --anchor-name: --tooltips;\n    \n        & [data-title] {\n            anchor-name: var(--anchor-name);\n    \n            &::before,\n            &::after {\n                anchor-default: var(--anchor-name);\n                anchor-scroll: var(--anchor-name);\n                left: anchor(center);\n            }\n    \n            &::before {\n                bottom: calc(anchor(top) + 8px);\n            }\n    \n            &::after {\n                bottom: calc(anchor(top) + 4px);\n            }\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:W,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/xxmmdoP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxmmdoP"})]}),"\n"]}),"\n",(0,c.jsxs)(e.h3,{id:"位置回退和自动定位",children:["位置回退和自动定位",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#位置回退和自动定位",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"尽管 CSS 锚点定位功能强大，但也可能是不可预测的。锚点元素可能位于页面的任何位置，因此以任何特定方式定位元素（例如在锚点上方或锚点右侧）可能导致定位元素溢出其包含块或部分定位在屏幕外。"}),"\n",(0,c.jsxs)(e.p,{children:["为了改善这一点，绝对定位的元素可以使用 ",(0,c.jsx)(e.code,{children:"position-fallback"})," 属性引用 ",(0,c.jsx)(e.code,{children:"@position-fallback"})," 中规则。该规则提供了一系列要尝试的可能样式规则，每个样式规则依次应用于元素，第一个不会导致元素溢出其包含块的规则被视为获胜者。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"@position-fallback"})," 规则定义了一个具有给定名称的位置回退列表，它指定了一个或多个包含在 ",(0,c.jsx)(e.code,{children:"@try"})," 块内的定位属性集，这些属性集将应用于一个元素，每个后续的属性集都作为前一个属性集在元素溢出其包含块的情况下的回退。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"@position-fallback"})," 规则的语法如下："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@position-fallback <dashed-ident> {\n    @try { \n        <declaration-list> \n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"@position-fallback"})," 规则仅接受 ",(0,c.jsx)(e.code,{children:"@try"})," 规则。在前导部分中指定的 ",(0,c.jsx)(e.code,{children:"<dashed-ident>"})," 是规则的名称。如果多个 ",(0,c.jsx)(e.code,{children:"@position-fallback"})," 规则使用相同的名称声明，那么文档顺序中的最后一个规则将获胜。它有点类似于 ",(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7258870477462962236#heading-1",target:"_blank",rel:"noopener noreferrer",children:"CSS 的 @property 规则命名"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"@try"})," 规则仅接受以下属性："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"inset"})," 属性"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["尺寸属性，比如 ",(0,c.jsx)(e.code,{children:"width"})," 、",(0,c.jsx)(e.code,{children:"height"})," 、",(0,c.jsx)(e.code,{children:"min-width"})," 、",(0,c.jsx)(e.code,{children:"min-height"})," 、",(0,c.jsx)(e.code,{children:"max-width"})," 、",(0,c.jsx)(e.code,{children:"max-height"})," 以及它们同等效果的逻辑属性"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["盒对齐属性，比如 ",(0,c.jsx)(e.code,{children:"justify-content"})," 、",(0,c.jsx)(e.code,{children:"align-content"})," 、",(0,c.jsx)(e.code,{children:"justify-self"})," 、",(0,c.jsx)(e.code,{children:"align-self"})," 、",(0,c.jsx)(e.code,{children:"justify-items"})," 和 ",(0,c.jsx)(e.code,{children:"align-items"})," 等"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"@position-fallback"})," 内部的 ",(0,c.jsx)(e.code,{children:"@try"})," 规则指定了一个位置回退列表，其中每个条目由每个 ",(0,c.jsx)(e.code,{children:"@try"})," 规则中指定的属性组成，按顺序排列。"]}),"\n",(0,c.jsxs)(e.p,{children:["注意，如果多个使用不同锚点的元素想要使用相同的回退定位，只是相对于它们各自的锚点元素，可以在 ",(0,c.jsx)(e.code,{children:"anchor()"})," 中省略 ",(0,c.jsx)(e.code,{children:"<anchor-element>"})," 并将每个元素的锚点在 ",(0,c.jsx)(e.code,{children:"anchor-default"})," 中指定。"]}),"\n",(0,c.jsxs)(e.p,{children:["CSS 的 ",(0,c.jsx)(e.code,{children:"position-fallback"})," 和 ",(0,c.jsx)(e.code,{children:"@position-fallback"})," 是 CSS 锚点定位的一个更高级别的功能。简单地说，",(0,c.jsx)(e.code,{children:"position-fallback"})," 可以基于你提供的 ",(0,c.jsx)(e.code,{children:"@position-fallback"})," 规则集（回退集合）来定位你的锚定元素（要定位的元素）。你定义的这个回退集合将会引导浏览器自动计算出最适用的一个位置。"]}),"\n",(0,c.jsxs)(e.p,{children:["比如上面的 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 组件，要是它在锚点的上方或下方之间切换显示，将会给用户带来更好的体验。例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    .anchor {\n        anchor-name: var(--anchor-name);\n    }\n  \n    .anchored {\n        position: absolute;\n        anchor-default: var(--anchor);\n        anchor-scroll: var(--anchor);\n        position-fallback: --fallback;    \n        inset: auto;\n    }\n  \n    @position-fallback --fallback {\n        @try {\n            bottom: anchor(top);\n            left: calc(anchor(left) - (anchor(center) - anchor(left)));\n        }\n        \n        @try {\n            top: anchor(bottom);\n            left: calc(anchor(left) - (anchor(center) - anchor(left)));\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:T,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/wvRRqJq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvRRqJq"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["如果你滚动了容器，你可能会注意到那些被锚定的工具提示（",(0,c.jsx)(e.code,{children:"Tooltips"}),"）跳动了。这是因为它们的锚点接近视口边界时发生的。在那一刻，",(0,c.jsx)(e.code,{children:"Tooltips"})," 正在尝试调整以保持在视口中。"]}),"\n",(0,c.jsxs)(e.p,{children:["在创建显式的位置回退之前，锚定定位还提供了自动定位。你可以通过在锚定函数和相反的插入属性中都使用 ",(0,c.jsx)(e.code,{children:"auto"})," 值来免费获得翻转效果。例如，如果你使用 ",(0,c.jsx)(e.code,{children:"anchor()"})," 用于底部，将 ",(0,c.jsx)(e.code,{children:"top"})," 设置为 ",(0,c.jsx)(e.code,{children:"auto"}),"。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".tooltips {\n    position: absolute;\n    bottom: anchor(--my-anchor auto);\n    top: auto;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["注意，上面这种方式也是最常见的回退定位类型（通常将定位元素放在锚点元素的一侧，但如果需要翻转到相反的一侧）可以通过在 ",(0,c.jsx)(e.code,{children:"anchor()"})," 函数中使用 ",(0,c.jsx)(e.code,{children:"auto"})," 或 ",(0,c.jsx)(e.code,{children:"auto-side"})," 。",(0,c.jsx)(e.a,{href:"https://drafts.csswg.org/css-anchor-position-1/#automatic-anchor-positioning",target:"_blank",rel:"noopener noreferrer",children:"你可以查阅 W3C 规范，更深入的了解有关于自动定位规则的详细信息"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"与自动定位相反的选择是使用显式的位置回退。这需要你定义一个位置回退集合。浏览器将遍历这些回退选项，直到找到一个可以使用的选项，然后用于该定位。如果找不到可行的选项，它将默认使用第一个定义的选项。"}),"\n",(0,c.jsxs)(e.p,{children:["继续拿 ",(0,c.jsx)(e.code,{children:"Tooltips"})," 组件为例："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    .anchor {\n        anchor-name: var(--anchor-name);\n    }\n\n    .anchored {\n        position: absolute;\n        anchor-default: var(--anchor);\n        anchor-scroll: var(--anchor);\n        position-fallback: --fallback;\n    }\n\n    @position-fallback --fallback {\n        @try {\n          bottom: anchor(top);\n          left: anchor(center);\n        }\n    \n        @try {\n          top: anchor(bottom);\n          left: anchor(center);\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/jOXXLoQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOXXLoQ"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["使用 ",(0,c.jsx)(e.code,{children:"anchor-default"})," 意味着你可以将位置回退用于其他元素。你还可以使用作用域定制属性来设置 ",(0,c.jsx)(e.code,{children:"anchor-default"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["请注意，某些用户代理样式可能会为你设置 ",(0,c.jsx)(e.code,{children:"inset"})," 属性。在这些情况下，你可能希望在定义位置回退之前取消这些设置。比如使用 ",(0,c.jsx)(e.code,{children:"popover"})," 属性的元素，就应该先将 ",(0,c.jsx)(e.code,{children:"inset"})," 属性的值重置为 ",(0,c.jsx)(e.code,{children:"unset"}),"。"]}),"\n",(0,c.jsxs)(e.h3,{id:"锚点定位的其他特性",children:["锚点定位的其他特性",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#锚点定位的其他特性",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"CSS 锚点定位除了上提到的特性之外，CSS 锚点定位的草案还引入了几个扩展 Web 布局可能性的功能。"}),"\n",(0,c.jsxs)(e.p,{children:["首先，CSS 锚点定位规范引入了锚定边缘（",(0,c.jsx)(e.code,{children:"anchor-edge"}),"）的概念，允许 Web 开发人员定义元素应该锚定到哪些精确的边缘。这提供了对位置精确控制。例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".element {\n    anchor-edge: left top;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面的代码将会使 ",(0,c.jsx)(e.code,{children:".element"})," 元素锚定到其包含块的左上角。"]}),"\n",(0,c.jsxs)(e.p,{children:["引入的第二个概念是锚定边距（",(0,c.jsx)(e.code,{children:"anchor-margin"}),"），允许 Web 开发人员指定锚定元素周围的附加边距。在处理重叠元素时，这个特别有用。例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".element {\n    anchor-margin: 20px;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["在这里，",(0,c.jsx)(e.code,{children:".element"})," 元素有额外的 ",(0,c.jsx)(e.code,{children:"20px"})," 边距。"]}),"\n",(0,c.jsx)(e.p,{children:"还有一个就是滚动锚定。滚动锚定是一项功能，帮助在文档中动态添加或删除元素时维护滚动位置。它防止页面跳跃，为用户提供更流畅的滚动体验。滚动锚定是默认开启的，如果你有需要，可以像下面这样禁用它："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"html {\n    overflow-anchor: none;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面代码禁用了整个 HTML 文档的滚动锚定行为。"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"注意，这里主要阐述了 CSS 锚点定位的主要特性，但目前有些特性还处于规范的草案阶段，它们有可能会因规范的变更而有所差异。最终将以 W3C 发布的规范为准！"}),"\n"]}),"\n",(0,c.jsxs)(e.h2,{id:"css-锚点定位用例",children:["CSS 锚点定位用例",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#css-锚点定位用例",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"阅读到这里，我想你对 CSS 锚点定位有了一定的认识。接下来，我们一起来看一些有趣的案例。这些案例旨在激发你的创意，同时这些案例将告诉你可以如何使用 CSS 锚点定位，并且通过这些真实案例的学习，你将对 CSS 锚点定位的特性会有更进一步的了解。"}),"\n",(0,c.jsxs)(e.h3,{id:"熔岩灯菜单lava-lamp-menu",children:["熔岩灯菜单（Lava Lamp Menu）",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#熔岩灯菜单lava-lamp-menu",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"我们先从熔岩灯菜单（Lava Lamp Menu）开始！"}),"\n",(0,c.jsx)(e.p,{children:"熔岩灯菜单是 Web 页面设计中的一种经典导航菜单效果，通常在菜单项之间添加流动的动画效果，使当前选定的菜单项看起来像熔岩灯一样流动或高亮显示，以表示当前活动页面或选项。如下所示："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:M,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/ghosh/details/KKxKqEw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/ghosh/details/KKxKqEw"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/F12/full/DmvVWW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/F12/full/DmvVWW"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"以往要实现熔岩灯菜单效果，我们不得不依赖 JavaScript 脚本来完成。现在，我们可以使用 CSS 锚点定位来实现它。例如："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/RwEpMxM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwEpMxM"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["HTML 部分很简单，就是一个包含链接元素 ",(0,c.jsx)(e.code,{children:"<a>"})," 的无序列表 ",(0,c.jsx)(e.code,{children:"<ul>"})," ："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<ul class="nav">\n    <li><a href="">Home</a></li>\n    \x3c!-- 省略其他的导航菜单项 --\x3e\n    <li><a href="">Contact us</a></li>\n</ul>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["鼠标悬停在菜单项时有一个粉红色的圆环（类似焦点环效果）出现，我们把这个称为“熔岩灯”，它是列表（",(0,c.jsx)(e.code,{children:"ul"}),"）的 ",(0,c.jsx)(e.code,{children:"::before"})," 伪元素构建的（通常很多 Web 开发者喜欢添加一个名为 ",(0,c.jsx)(e.code,{children:".lava"})," 的元素）。我们可以利用 CSS 锚点定位的特性，将 ",(0,c.jsx)(e.code,{children:"ul::before"})," 锚定到不同的菜单项（ ",(0,c.jsx)(e.code,{children:"a"})," 元素）上。因此，我们需要先给每个菜单项（锚点元素）指定 ",(0,c.jsx)(e.code,{children:"anchor-name"})," ："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".nav {\n\n    & li {\n        &:nth-child(1) {\n            --is: --item-1;\n        }\n        \n        &:nth-child(2) {\n            --is: --item-2;\n        }\n        \n        &:nth-child(3) {\n            --is: --item-3;\n        }\n        \n        &:nth-child(4) {\n            --is: --item-4;\n        }\n        \n        &:nth-child(5) {\n            --is: --item-5;\n        }\n    }\n    \n    & a {\n        anchor-name: var(--is);\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["你也可以考虑直接在 HTML 的 ",(0,c.jsx)(e.code,{children:"<a>"})," 元素以内联的方式定义 ",(0,c.jsx)(e.code,{children:"--is"})," 的值："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<ul class="nav">\n    <li><a href="" style="--is: item-1">Home</a></li>\n    \x3c!-- 省略其他的导航菜单项 --\x3e\n    <li><a href="" style="--is: item-5">Contact us</a></li>\n</ul>\n'})}),"\n",(0,c.jsx)(e.p,{children:"这两种方式都可以，看你自己喜好！"}),"\n",(0,c.jsxs)(e.p,{children:["我们使用一个名为 ",(0,c.jsx)(e.code,{children:"--target"})," 的 CSS 变量来控制伪元素 ",(0,c.jsx)(e.code,{children:"::before"})," 的锚点。我们的锚定元素（",(0,c.jsx)(e.code,{children:"ul::before"}),"）使用了 ",(0,c.jsx)(e.code,{children:"anchor()"})," 函数定位："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".nav {\n    anchor-name: --nav-menu;\n    --target: --nav-menu;\n\n    &::before {\n        position: absolute;\n        top: anchor(var(--target) top);\n        left: anchor(var(--target) left);\n        right: anchor(var(--target) right);\n        bottom: anchor(var(--target) bottom);\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["默认情况下，将列表 ",(0,c.jsx)(e.code,{children:"ul.nav"})," 作为目标，使初始过渡来自项目的“周围”。然后，对定位（实际上是对 ",(0,c.jsx)(e.code,{children:"top"}),"、",(0,c.jsx)(e.code,{children:"right"}),"、",(0,c.jsx)(e.code,{children:"bottom"}),"、",(0,c.jsx)(e.code,{children:"left"})," 属性的动画过渡）和其他可视效果使用了过渡效果。"]}),"\n",(0,c.jsxs)(e.p,{children:["接下来，鼠标悬浮在每个列表项（",(0,c.jsx)(e.code,{children:"li"}),"）时，锚定元素 ",(0,c.jsx)(e.code,{children:"ul::before"})," 需要滑到相应的锚点位置（鼠标悬浮对应的列表项）。我们可以通过 CSS 的 ",(0,c.jsx)(e.code,{children:":has()"})," 选择器来检测列表项中是否有被悬停或聚焦的链接，如果有，将此项目分配为 ",(0,c.jsx)(e.code,{children:"--target"})," ："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".nav {\n    &:has(:nth-child(1) > a:is(:hover, :focus-visible)) {\n        --target: --item-1;\n    }\n    \n    &:has(:nth-child(2) > a:is(:hover, :focus-visible)) {\n        --target: --item-2;\n    }\n    \n    &:has(:nth-child(3) > a:is(:hover, :focus-visible)) {\n        --target: --item-3;\n    }\n    \n    &:has(:nth-child(4) > a:is(:hover, :focus-visible)) {\n        --target: --item-4;\n    }\n    \n    &:has(:nth-child(5) > a:is(:hover, :focus-visible)) {\n        --target: --item-5;\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["同样的，你可以使用 ",(0,c.jsx)(e.code,{children:":not()"})," 选择器来设置检测列表项中没有被悬停或聚焦的链接时，将锚定元素 ",(0,c.jsx)(e.code,{children:"ul::before"})," 从视觉上隐藏起来："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".nav {\n    &:not(:has(a:is(:hover, :focus-visible)))::before {\n        visibility: hidden;\n        opacity: 0;\n        filter: blur(2em);\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"将所有代码结合起来，就能看到一个熔岩灯菜单效果，而且其过渡效果是那么的优雅（几乎能和 JavaScript 版本媲美）："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    .nav {\n        anchor-name: --nav-menu;\n        --target: --nav-menu;\n    \n        &::before {\n            position: absolute;\n            top: anchor(var(--target) top);\n            left: anchor(var(--target) left);\n            right: anchor(var(--target) right);\n            bottom: anchor(var(--target) bottom);\n\n            transition: all 0.3s;\n        }\n    \n        & li {\n            &:nth-child(1) {\n                --is: --item-1;\n            }\n            \n            &:nth-child(2) {\n                --is: --item-2;\n            }\n            \n            &:nth-child(3) {\n                --is: --item-3;\n            }\n            \n            &:nth-child(4) {\n                --is: --item-4;\n            }\n            \n            &:nth-child(5) {\n                --is: --item-5;\n            }\n        }\n    \n        & a {\n            anchor-name: var(--is);\n        }\n    \n        &:not(:has(a:is(:hover, :focus-visible)))::before {\n            visibility: hidden;\n            opacity: 0;\n            filter: blur(2em);\n        }\n    \n        &:has(:nth-child(1) > a:is(:hover, :focus-visible)) {\n            --target: --item-1;\n        }\n        \n        &:has(:nth-child(2) > a:is(:hover, :focus-visible)) {\n            --target: --item-2;\n        }\n        \n        &:has(:nth-child(3) > a:is(:hover, :focus-visible)) {\n            --target: --item-3;\n        }\n        \n        &:has(:nth-child(4) > a:is(:hover, :focus-visible)) {\n            --target: --item-4;\n        }\n        \n        &:has(:nth-child(5) > a:is(:hover, :focus-visible)) {\n            --target: --item-5;\n        }\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["基于上面这个示例，你只需要调整锚定元素 ",(0,c.jsx)(e.code,{children:"ul::before"})," 的 UI 效果，就可以得到很多不同风格的熔岩灯导航菜单："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/PoXpRxx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PoXpRxx"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.a,{href:"https://codepen.io/jh3y/full/ExOMvwW",target:"_blank",rel:"noopener noreferrer",children:"@Jhey 在 CodePen 提供了一个案例"}),"，将 CSS 锚点定位和 ",(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259272255786450981",target:"_blank",rel:"noopener noreferrer",children:"CSS 滚动驱动动效"})," 结合在一起，使得熔岩灯菜单的动效可以由页面滚动来驱动，使得效果与交互更完美的结合在一起："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/jh3y/full/ExOMvwW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/jh3y/full/ExOMvwW"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"详细代码请查看 Demo 源码！"}),"\n",(0,c.jsxs)(e.h3,{id:"圆环菜单radial-menu",children:["圆环菜单（Radial Menu）",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#圆环菜单radial-menu",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["在介绍 ",(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7242216512176521277",target:"_blank",rel:"noopener noreferrer",children:"CSS 三角函数的时候"}),"，我就举过圆环菜单的例子："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/pen/KKrpBrQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/pen/KKrpBrQ"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["这里将继续以圆环形菜单为例，向大家阐述如何使用 CSS 锚点定位来构建一个圆环形导航菜单。不过，接下来这个圆环形导航菜单将会使用到 CSS 锚点定位和 ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.a,{href:"https://html.spec.whatwg.org/dev/popover.html#the-popover-attribute",target:"_blank",rel:"noopener noreferrer",children:"Popover API"})}),"。"]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"Popover API （弹出框 API）为 Web 开发人员提供了一种标准、一致、灵活的机制，用于在 Web 页面内容之上显示弹出框内容。弹出框内容可以通过 HTML 属性进行声明性控制，也可以通过 JavaScript 进行控制。"}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["我们将在示例中使用 Popover API 相关的 HTML 属性进行声明性控制，比如 ",(0,c.jsx)(e.code,{children:"popovertarget"})," 、",(0,c.jsx)(e.code,{children:"popover"})," 和 ",(0,c.jsx)(e.code,{children:"popovertargetaction"})," 。另外通过 HTML 的 ",(0,c.jsx)(e.code,{children:"anchor"})," 属性与锚点元素的 ",(0,c.jsx)(e.code,{children:"ID"})," 来创建隐式的锚点。具体的 HTML 代码如下所示："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="menu">\n    \x3c!-- 锚点元素 --\x3e\n    <button tabindex=1 class="menu-toggle" id="menu-toggle" popovertarget="menu-items">\n        <span aria-hidden="true">\n            <svg class="icon icon--share" aria-hidden="true">\n                <use xlink:href="#share" />\n            </svg>\n        </span>\n        <span class="sr-only">Share</span>\n    </button>\n    \n    \x3c!-- 锚定元素 --\x3e\n    <ul class="menu-items" id="menu-items" popover anchor="menu-toggle" role="menu">\n        <li class="item">\n            <button role="menuitem">\n                <span aria-hidden="true">\n                    <svg class="icon icon--facebook" aria-hidden="true">\n                        <use xlink:href="#facebook" />\n                    </svg>\n                </span>\n                <span class="sr-only">Facebook</span>\n            </button>\n        </li>\n        \x3c!-- 省略圆形菜单中其他选项 --\x3e\n        \n        \x3c!-- 关闭按钮 --\x3e\n        <li class="item">\n            <button popovertargetaction="hide" popovertarget="menu-items-1" class="hidden-close">\n                <span aria-hidden="true"> </span>\n                <span class="sr-only">close menu</span>\n            </button>\n        </li>\n    </ul>\n</div>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["我们同样使用 CSS 的三角函数结合 CSS 的变换，使菜单项围绕着锚点元素 ",(0,c.jsx)(e.code,{children:".menu-toggle"})," 。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".item {\n    --radius: calc(var(--btn-size) + var(--extra-space));\n    translate: \n        calc(cos(var(--angle)) * var(--radius))\n        calc(sin(var(--angle) * -1) * var(--radius));\n    rotate: 0deg;\n\n    &:nth-child(1) {\n      --angle: 0deg;\n    }\n\n    &:nth-child(2) {\n      --angle: 45deg;\n    }\n\n    &:nth-child(3) {\n      --angle: 90deg;\n    }\n\n    &:nth-child(4) {\n      --angle: 135deg;\n    }\n\n    &:nth-child(5) {\n      --angle: 180deg;\n    }\n\n    &:nth-child(6) {\n      --angle: 225deg;\n    }\n\n    &:nth-child(7) {\n      --angle: 270deg;\n    }\n\n    &:nth-child(8) {\n      --angle: 315deg;\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"接下来，使用 CSS 锚点定位，使菜单项相对于锚点元素进行定位："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".menu-items {\n    bottom: anchor(bottom);\n    left: anchor(center);\n    translate: -50% 0;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["注意，我们在 HTML 中已经通过 ",(0,c.jsx)(e.code,{children:"anchor"})," 属性和锚点元素的 ",(0,c.jsx)(e.code,{children:"ID"})," 相互绑定，创建了一个隐式的锚点，因此我们可以使用 ",(0,c.jsx)(e.code,{children:"anchor()"})," 函数使菜单相对于锚点定位。"]}),"\n",(0,c.jsx)(e.p,{children:"最后，利用 Popover API 的特性，控制菜单项的展开与折叠："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".menu-items:not(:popover-open) .item {\n    --radius: 0;\n    --angle: 0;\n    rotate: 45deg;\n}\n\n:popover-open .item {\n    opacity: 1;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"你就制作出像下面这样的一个圆环导航菜单："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/Bavvmbz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/Bavvmbz"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["如果你正在开发一个图片分享相关的 Web 应用，希望在每张图片上添加像上面这样的圆形分享菜单，那使用这种方法再好不过了。唯一需要注意的是，",(0,c.jsx)(e.code,{children:"anchor"})," 和 ",(0,c.jsx)(e.code,{children:"popovertarget"})," 需要绑定不同的 ",(0,c.jsx)(e.code,{children:"ID"})," 名称："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'\x3c!-- 将弹出窗口链接到锚按钮 --\x3e\n<ul anchor="anchor-btn-01" id="menu-items-01" popover class="menu" role="menu">  \n    <li>...</li>  \n    <li>...</li>\n</ul>\n\n\x3c!-- 给锚点一个 ID 名 --\x3e\n<button id="anchor-btn-01" popovertarget="menu-items-01" role="menuitem">  \n    <span aria-hidden="true">\n        <svg class="icon icon--share" aria-hidden="true">\n            <use xlink:href="#share" />\n        </svg>\n    </span>  \n    <span class="sr-only">Share</span>\n</button>\n'})}),"\n",(0,c.jsx)(e.p,{children:"具体效果如下："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/xxmmQmy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxmmQmy"})," （详细代码请查看 Demo 源码）"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["再来看一个圆环形导航菜单，不过接下来的这个圆环形导航菜单在前面的示例基础上新增了另一个特性，即 ",(0,c.jsx)(e.code,{children:"<selectmenu>"})," 。也就是说，接下来我们会基于 ",(0,c.jsx)(e.code,{children:"<selectmenu>"})," 元素、CSS 的锚点定位和 Popover API 来构建接下来的这个圆形导航菜单："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/smashingmag/full/XWxxPgN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/smashingmag/full/XWxxPgN"})," （该案例由 ",(0,c.jsx)(e.a,{href:"https://twitter.com/utilitybend",target:"_blank",rel:"noopener noreferrer",children:"@Brecht "}),"提供）"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["额外提一下，",(0,c.jsx)(e.code,{children:"<selectmenu> 是一个新的 HTML 元素"}),"（现已更名为 ",(0,c.jsx)(e.code,{children:"<selectlist>"}),"），它将大大改善对这种类型的表单控件进行样式设置的方式。该元素是由 Open UI 社区推出的（",(0,c.jsx)(e.a,{href:"https://open-ui.org/",target:"_blank",rel:"noopener noreferrer",children:"Open UI"})," 是一个 ",(0,c.jsx)(e.a,{href:"https://www.w3.org/community/open-ui/",target:"_blank",rel:"noopener noreferrer",children:"W3C 社区小组"}),"，旨在为我们提供更多更好的样式和扩展原生 HTML 元素和表单控件的方法 ）。"]}),"\n",(0,c.jsxs)(e.p,{children:["对于 Web 开发者而言，要给 ",(0,c.jsx)(e.code,{children:"<select>"})," 菜单设置样式一直以来是件棘手的事情，通常需要依赖 JavaScript 才能完成。在这个示例中，我们将以 ",(0,c.jsx)(e.code,{children:"<selectmenu>"})," 元素来创建一个圆形选择菜单，它是使用 CSS 来完成的。在构建该选择菜单中还将使用 CSS 的锚点定位和 HTML 的 Popover API。"]}),"\n",(0,c.jsx)(e.p,{children:"构建它需要一个像下面这样的 HTML 结构："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<selectmenu class="potion-select" id="potion-select">\n    <button class="potion-equipped" slot="button" behavior="button">\n        <div class="potion-equipped-icon"></div>\n        <span behavior="selected-value" class="selected-value"></span>\n    </button>\n    <div slot="listbox">\n        <div popover behavior="listbox">\n            <option value="health">\n                <div class="potion-holder">\n                    <svg class="icon icon-health" aria-hidden="true">\n                        <use xlink:href="#potion" />\n                    </svg>\n                </div>\n                <span>Health</span>\n            </option>\n            <option value="mana">\n                <div class="potion-holder">\n                    <svg class="icon icon-mana" aria-hidden="true">\n                        <use xlink:href="#potion" />\n                    </svg>\n                </div>\n                <span>Mana</span>\n            </option>\n            \x3c!-- 省略其他的 option 选项 --\x3e\n        </div>\n    </div>\n</selectmenu>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["首先使用 ",(0,c.jsx)(e.code,{children:"anchor-name"})," 将 ",(0,c.jsx)(e.code,{children:".selected-button"})," 定义为一个锚点元素："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".selected-button {\n    anchor-name: --selectmenu;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["接着使用 ",(0,c.jsx)(e.code,{children:"anchor()"})," 函数使菜单列表相对于锚点元素 ",(0,c.jsx)(e.code,{children:".selected-button"})," 定位："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"[popover] {\n    position: relative;\n    top: anchor(--selectmenu center);\n    left: anchor(--selectmenu center);\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["最后就是通过一些计算，将每个选项（",(0,c.jsx)(e.code,{children:"option"}),"）围绕着中心排列，使它们形成一个圆形。在这个示例中，",(0,c.jsx)(e.a,{href:"https://twitter.com/utilitybend",target:"_blank",rel:"noopener noreferrer",children:"@Brecht"})," 是根据可用选项的数量（",(0,c.jsx)(e.code,{children:"option"})," 的数量）来控制选项的位置。例如，如果选择菜单有六个选项，它们将以一种方式排列，如果选择菜单有三个选项，它们将以另一种方式排列，依此类推。"]}),"\n",(0,c.jsxs)(e.p,{children:["在弹出框打开时，我们可以按下面的公式给每个选项设置 ",(0,c.jsx)(e.code,{children:"transform"})," 值："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"[popover]:popover-open option {\n    /* 圆形尺寸一半，即圆的半径 * /\n    --half-circle : calc ( var (--circle-size) / - 2 );  transform:\n        rotate(var(--deg))\n        translate(var(--half-circle))\n        rotate(var(--negative-deg));\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["现在，当触发 ",(0,c.jsx)(e.code,{children:"popover-open"})," 状态时，我们将旋转每个选项一定数量的度数，沿着两个轴平移它们半个圆的大小，并再次旋转它们负数度数的度数。注意，",(0,c.jsx)(e.code,{children:"transform"})," 属性值列表的顺序很重要！"]}),"\n",(0,c.jsxs)(e.p,{children:["让我们将这些内容添加到我们的 ",(0,c.jsx)(e.code,{children:"popover"})," 样式规则中："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"[popover] {\n    --rotation-divide: calc(180deg / 2);\n\n    /* 省略其他 CSS 代码 */\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这将是我们的默认旋转，对于仅有一个选项的情况是一个特殊情况，在其他情况下使用 ",(0,c.jsx)(e.code,{children:"360deg"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["现在，我们可以选择第一个选项并在其上设置 ",(0,c.jsx)(e.code,{children:"--rotation-divide"})," 变量："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"option:nth-child(1) {\n    --deg: var(--rotation-divide);\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"接下来，对其他选项进行样式设置需要一些工作，因为我们必须："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"将圆圈分成可用选项的数量；"}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"为每个选项乘以该结果。"}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["我们使用 CSS 中的 ",(0,c.jsx)(e.code,{children:"calc()"})," 函数来帮助我们做到这一点："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"[popover]:has(option:nth-child(2)) {\n    --rotation-divide: calc(360deg / 2);\n}\n\n[popover]:has(option:nth-child(3)) {\n    --rotation-divide: calc(360deg / 3);\n}\n\n[popover]:has(option:nth-child(4)) {\n    --rotation-divide: calc(360deg / 4);\n}\n\n[popover]:has(option:nth-child(5)) {\n    --rotation-divide: calc(360deg / 5);\n}\n\n[popover]:has(option:nth-child(6)) {\n    --rotation-divide: calc(360deg / 6);\n}\n\noption:nth-child(1) {\n    --deg: var(--rotation-divide);\n}\n\noption:nth-child(2) {\n    --deg: calc(var(--rotation-divide) * 2);\n}\n\noption:nth-child(3) {\n    --deg: calc(var(--rotation-divide) * 3);\n}\n\noption:nth-child(4) {\n    --deg: calc(var(--rotation-divide) * 4);\n}\n\noption:nth-child(5) {\n    --deg: calc(var(--rotation-divide) * 5);\n}\n\noption:nth-child(6) {\n    --deg: calc(var(--rotation-divide) * 6);\n}\n\n/* 你有足够的选择了 */\noption:nth-child(1n + 7) {\n    display: none;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["其实，你也可以像前面那两个圆形导航菜单一样，使用 **",(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7242216512176521277",target:"_blank",rel:"noopener noreferrer",children:"CSS 的三角函数"}),"**来设置每个菜单选项的位置。感兴趣的同学自己可以尝试一下。"]}),"\n",(0,c.jsxs)(e.p,{children:["另外，我们可以借助 CSS 特性和简单的几行 JavaScript 代码，根据菜单选项的数量来计算 ",(0,c.jsx)(e.code,{children:"--rotation-divide"})," 和 ",(0,c.jsx)(e.code,{children:"--negative"})," 自定义属性的值。例如，可以向具有 ",(0,c.jsx)(e.code,{children:"popover"})," 属性的元素添加一个 ",(0,c.jsx)(e.code,{children:"ID"})," ，并计算它包含的子元素（",(0,c.jsx)(e.code,{children:"option"}),"）数量："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-JavaScript",children:"const optionAmount = document.getElementById('popoverlistbox').childElementCount;\npopoverlistbox.style.setProperty('--children', optionAmount);\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这样，我们可以用更简洁的样式替代所有的 ",(0,c.jsx)(e.code,{children:":has()"})," 实例："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"option {\n    --rotation-divide: calc(360deg / var(--children));\n    --negative: calc(var(--deg) / -1);\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["如果你的菜单选项数量不确定时，这种方式要比 ",(0,c.jsx)(e.code,{children:":has()"})," 方便的多。"]}),"\n",(0,c.jsxs)(e.p,{children:["接着，通过JavaScript 脚本，我们可以选择 ",(0,c.jsx)(e.code,{children:"<selectmenu>"})," 元素的 ",(0,c.jsx)(e.code,{children:"innerHTML"})," 并将其传递给我 ",(0,c.jsx)(e.code,{children:".selected-value"})," 按钮："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-JavaScript",children:'const selectMenus = document.querySelectorAll("selectmenu");\nselectMenus.forEach((menu) => {\n    const selectedvalue = menu.querySelector(".selected-value");\n    selectedvalue.innerHTML = menu.selectedOption.innerHTML;\n    menu.addEventListener("change", () => {\n        selectedvalue.innerHTML = menu.selectedOption.innerHTML;\n    });\n});\n'})}),"\n",(0,c.jsxs)(e.p,{children:["这个脚本会在页面上找到所有的 ",(0,c.jsx)(e.code,{children:"<selectmenu>"})," 元素，然后为每个元素找到 ",(0,c.jsx)(e.code,{children:".selected-value"})," 按钮，将其 ",(0,c.jsx)(e.code,{children:"innerHTML"})," 设置为所选选项的 ",(0,c.jsx)(e.code,{children:"innerHTML"}),"。接着，它会监听 ",(0,c.jsx)(e.code,{children:"<selectmenu>"})," 的 ",(0,c.jsx)(e.code,{children:"change"})," 事件，以在选择不同选项时更新 ",(0,c.jsx)(e.code,{children:".selected-value"})," 按钮的内容。"]}),"\n",(0,c.jsx)(e.p,{children:"注意，这是一个增强型功能，你可以根据需要来选择。"}),"\n",(0,c.jsx)(e.p,{children:"最后，你再给圆形菜单添加一点 CSS 动画，就能看到像下面这样的一个效果了："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/MWZZZpX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWZZZpX"})," （详细代码请查看 Demo 源码）"]}),"\n"]}),"\n",(0,c.jsxs)(e.h3,{id:"上下文菜单",children:["上下文菜单",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#上下文菜单",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/jh3y/details/qBMWLOK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/jh3y/details/qBMWLOK"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.a,{href:"https://codepen.io/jh3y/details/qBMWLOK",target:"_blank",rel:"noopener noreferrer",children:"这个案例是由 @Jhey 提供的"}),"。使用 Popover API 创建的一个上下文菜单。单击带有箭头的按钮将显示上下文菜单。该菜单将有其自身的子菜单以展开选项。"]}),"\n",(0,c.jsxs)(e.p,{children:["与上一个 @Brecht 提供的圆形导航菜单相似，在 HTML 中有三个按钮都使用了 ",(0,c.jsx)(e.code,{children:"popovertarget"}),"。然后有三个元素使用了 ",(0,c.jsx)(e.code,{children:"popover"})," 属性。这使你能够在没有任何 JavaScript 的情况下打开上下文菜单。可能如下所示："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<button popovertarget="context">Toggle Menu</button>        \n<div popover="auto" id="context">\n    <ul>\n        <li><button>Save to your Liked Songs</button></li>\n        <li>\n            <button popovertarget="playlist">Add to Playlist</button>\n        </li>\n        <li>\n            <button popovertarget="share">Share</button>\n        </li>\n    </ul>\n</div>\n<div popover="auto" id="share">...</div>\n<div popover="auto" id="playlist">...</div>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["现在，你可以定义一个 ",(0,c.jsx)(e.code,{children:"position-fallback"})," 并在上下文菜单之间共享它。我们确保取消设置任何弹出菜单的 ",(0,c.jsx)(e.code,{children:"inset"})," 样式。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:'[popovertarget="share"] {\n    anchor-name: --share;\n}\n\n[popovertarget="playlist"] {\n    anchor-name: --playlist;\n}\n\n[popovertarget="context"] {\n    anchor-name: --context;\n}\n\n#share {\n    anchor-default: --share;\n    position-fallback: --aligned;\n}\n\n#playlist {\n    anchor-default: --playlist;\n    position-fallback: --aligned;\n}\n\n#context {\n    anchor-default: --context;\n    position-fallback: --flip;\n}\n\n@position-fallback --aligned {\n    @try {\n        top: anchor(top);\n        left: anchor(right);\n    }\n\n    @try {\n        top: anchor(bottom);\n        left: anchor(right);\n    }\n\n    @try {\n        top: anchor(top);\n        right: anchor(left);\n    }\n\n    @try {\n        bottom: anchor(bottom);\n        left: anchor(right);\n    }\n\n    @try {\n        right: anchor(left);\n        bottom: anchor(bottom);\n    }\n}\n\n@position-fallback --flip {\n    @try {\n        bottom: anchor(top);\n        left: anchor(left);\n    }\n\n    @try {\n        right: anchor(right);\n        bottom: anchor(top);\n    }\n\n    @try {\n        top: anchor(bottom);\n        left: anchor(left);\n    }\n\n    @try {\n        top: anchor(bottom);\n        right: anchor(right);\n    }\n}\n'})}),"\n",(0,c.jsx)(e.p,{children:"这为你提供了一个自适应的嵌套上下文菜单界面。尝试使用选择框更改内容位置。你选择的选项会更新网格对齐方式。这会影响到锚定定位如何定位弹出菜单。"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/poqqGdM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poqqGdM"})]}),"\n"]}),"\n",(0,c.jsxs)(e.h3,{id:"交叉引用",children:["交叉引用",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#交叉引用",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/jOXXdzj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOXXdzj"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"正如你所看到的，这是将悬念或焦点状态从一个元素传递到另一个元素的能力，突出显示可能位于页面上不同位置的上下文。使用 CSS 锚点定位可以很容易实现。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<p>Which <em tabindex="0" style="--for: --property">property</em> corresponds with which <em tabindex="0" style="--for: --value">value</em>?</p>\n<div class="container">\n    <ol style="--is: --property">\n        <li style="--for: --none" tabindex="0">\n            <code style="--is: --display">display</code>\n        </li>\n        <li style="--for: --hidden" tabindex="0">\n            <code style="--is: --visibility">visibility</code>\n        </li>\n        <li style="--for: --zero" tabindex="0">\n            <code style="--is: --opacity">opacity</code>\n        </li>\n    </ol>\n    <ol style="--is: --value">\n        <li style="--for: --visibility" tabindex="0">\n            <code style="--is: --hidden">hidden</code>\n        </li>\n        <li style="--for: --opacity" tabindex="0">\n            <code style="--is: --zero">0</code>\n        </li>\n        <li style="--for: --display" tabindex="0">\n            <code style="--is: --none">none</code>\n        </li>\n    </ol>\n</div>\n'})}),"\n",(0,c.jsx)(e.p,{children:"注意 HTML 标记中的行内样式声明的 CSS 自定义属性，因为它们在 CSS 中将会使用到。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:'@layer anchor {\n    [style*="--is:"] {\n        anchor-name: var(--is);\n    }\n\n    [style*="--for:"]:is(:hover, :focus-visible)::after {\n        content: "";\n    \n        position: absolute;\n        top: anchor(var(--for) top);\n        right: anchor(var(--for) right);\n        bottom: anchor(var(--for) bottom);\n        left: anchor(var(--for) left);\n    \n        box-shadow: 0 0 0 4px hotpink;\n    }\n}\n'})}),"\n",(0,c.jsx)(e.p,{children:"就是这么简单。"}),"\n",(0,c.jsx)(e.p,{children:"这种视觉技巧使得更容易发现项目之间的联系，而且经常在实际应用中使用，比如页面上的脚注就是一个很典型的案例。"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/bGOOzyP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGOOzyP"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["还可以实现类似 ",(0,c.jsx)(e.a,{href:"https://cssday.nl/2023",target:"_blank",rel:"noopener noreferrer",children:"CSS Day 网站的的效果，悬停在演讲者的名字和照片上看效果"}),"："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"现在我们会用 CSS 锚点定位来实现该效果。"}),"\n",(0,c.jsx)(e.p,{children:"你需要一个像下面这样的 HTML 结构："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="container">\n    \x3c!-- 演讲者头像 --\x3e\n    <ul class="avatars">\n        <li style="--for:--manuel-name;">\n            <img style="--is: --manuel-avatar;" src="https://cssday.nl/_img/2023/speakers/manuel.jpg" alt="manuel">\n        </li>\n        <li style="--for:--sophie-name;">\n            <img style="--is: --sophie-avatar;" src="https://cssday.nl/_img/2023/speakers/sophie.jpg" alt="sophie">\n        </li>\n        \x3c!-- 省略其他 li --\x3e\n    </ul>\n    \x3c!-- 演讲者信息 --\x3e\n    <ul class="links">\n        <li style="--for: --manuel-avatar; --bg:url(\'https://cssday.nl/_img/2023/speakers/manuel.jpg\')">\n            <a href="#" style="--is:--manuel-name">Manuel Matuzović</a>: Structuring &amp; Restructuring\n        </li>\n        <li style="--for: --sophie-avatar; --bg:url(\'https://cssday.nl/_img/2023/speakers/sophie.jpg\')">\n            <a href="#" style="--is:--sophie-name">Sophie Koonin</a>: Personal Websites\n        </li>\n        \x3c!-- 省略其他 li --\x3e\n    </ul>\n</div>    \n'})}),"\n",(0,c.jsxs)(e.p,{children:["注意内联定义的 ",(0,c.jsx)(e.code,{children:"--for"})," 和 ",(0,c.jsx)(e.code,{children:"--is"})," 的值，两个列表的值刚好是相互交叉的，其次在演讲者列表项中，定义了 ",(0,c.jsx)(e.code,{children:"--bg"})," 属性，它的值刚好是演讲者的用户头像。"]}),"\n",(0,c.jsxs)(e.p,{children:["利用 CSS 锚点定位的特性，分别处理列表项伪元素 ",(0,c.jsx)(e.code,{children:"::after"})," 的样式以及定位："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:'@layer anchor {\n    [style*="--is:"] {\n        anchor-name: var(--is);\n    }\n\n    [style*="--for:"]:is(:hover, :focus-visible)::after {\n        content: "";\n        \n        /* 锚点定位 */\n        position: absolute;\n        top: anchor(var(--for) top);\n        right: anchor(var(--for) right);\n        bottom: anchor(var(--for) bottom);\n        left: anchor(var(--for) left);\n    }\n\n    /* 演讲者头像悬停或焦点状态下，伪元素 ::after 的样式，相对于演讲者主题定位 */\n    .avatars [style*="--for:"]:is(:hover, :focus-visible)::after {\n        background: darkorchid;\n        mix-blend-mode: difference;\n        filter: hue-rotate(300deg);\n        animation: lightSpeedInLeft 0.28s ease-out alternate both;\n    }\n\n    /* 演讲者主题悬停或焦点状态下，伪元素 ::after 的样式，相对于演讲者头像定位 */\n    .links [style*="--for:"]:is(:hover, :focus-visible)::after {\n        background: var(--bg) no-repeat center / cover;\n        border-radius: 5px;\n        animation: zoomIn 0.28s linear alternate both;\n    }\n\n    @keyframes zoomIn {\n        from {\n            scale: 0;\n            opacity: 0;\n        }\n        to {\n            scale: 2;\n            opacity: 1;\n        }\n    }\n\n    @keyframes lightSpeedInLeft {\n        from {\n            transform: translate3d(-100%, 0, 0) skewX(30deg);\n            opacity: 0;\n        }\n    \n        60% {\n            transform: skewX(-20deg);\n            opacity: 1;\n        }\n    \n        80% {\n            transform: skewX(5deg);\n        }\n    \n        to {\n            transform: translate3d(0, 0, 0);\n        }\n    }\n}\n'})}),"\n",(0,c.jsx)(e.p,{children:"最终效果如下："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/QWzzoGj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWzzoGj"})]}),"\n"]}),"\n",(0,c.jsxs)(e.h3,{id:"模拟粒子碰撞的效果",children:["模拟粒子碰撞的效果",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#模拟粒子碰撞的效果",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["前段时间 ",(0,c.jsx)(e.a,{href:"https://codepen.io/Chokcoco/full/WNYVmBo",target:"_blank",rel:"noopener noreferrer",children:"@Chokcoco 老师使用 CSS 写了一个检测碰撞的动画效果"}),"："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/Chokcoco/full/WNYVmBo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/Chokcoco/full/WNYVmBo"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"接下来，我们使用这节课学到的知识，使用 CSS 锚点定位来实现一个相似的效果："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="container">\n    <div class="target start"></div>\n    <div class="target end"></div>\n    <div class="connection"></div>\n</div>\n'})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    @keyframes horizontal {\n        from {\n            left: 0;\n        }\n        to {\n            left: 100%;\n            filter: hue-rotate(2185deg);\n        }\n    }\n    \n    @keyframes vertical {\n        from {\n            top: 0;\n        }\n        to {\n            top: 100cqh;\n            filter: hue-rotate(1769deg);\n        }\n    }\n\n    .container {\n        --height-times: 2.5;\n        --width-times: 4.5;\n        --seconds-per-100px: 0.5s;\n    }\n\n    .target {\n        --delay: 0s;\n        --width-variation: 0s;\n        --height-variation: 0s;\n        --height-duration: calc(var(--height-times) * var(--seconds-per-100px));\n        --width-duration: calc(var(--width-times) * var(--seconds-per-100px));\n        \n        translate: -50% -50%;\n        animation: linear infinite alternate;\n        animation-name: horizontal, vertical;\n        animation-delay: var(--delay);\n        animation-duration: \n            calc(var(--width-duration) + var(--width-variation)),\n            calc(var(--height-duration) + var(--height-variation));\n    }\n\n    .start {\n        --is: --start;\n        --width-variation: 0.14s;\n        --height-variation: 0.12s;\n        --delay: -19.6s;\n    }\n  \n    .end {\n        --is: --end;\n        --width-variation: 0.37s;\n        --height-variation: 1s;\n        --delay: -24.1s;\n    }\n    \n    .connection {\n        --_from: var(--from, --start);\n        --_to: var(--to, --end);\n        position: absolute;\n        translate: -0.5em -0.5em;\n        top: anchor(var(--_from) center);\n        left: anchor(var(--_from) center);\n        right: anchor(var(--_to) center);\n        bottom: anchor(var(--_to) center);\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"你将看到一个像下面这样的效果："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/wvRRZEP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvRRZEP"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"还可以像下面这样做："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="container" tabindex="0">\n    <div class="target start"></div>\n    <div class="target end"></div>\n\n    <div class="connection"></div>\n    <div class="connection connection--flip-x"></div>\n    <div class="connection connection--flip-y"></div>\n    <div class="connection connection--flip-x connection--flip-y"></div>\n</div>\n'})}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    @keyframes horizontal {\n        from {\n            left: 0;\n        }\n        to {\n            left: 100%;\n            filter: hue-rotate(2185deg);\n        }\n    }\n    \n    @keyframes vertical {\n        from {\n            top: 0;\n        }\n        to {\n            top: 100cqh;\n            filter: hue-rotate(1769deg);\n        }\n    }\n\n    .container {\n        --height-times: 2.5;\n        --width-times: 4.5;\n        --seconds-per-100px: 0.5s;\n    }\n\n    .target {\n        --delay: 0s;\n        --width-variation: 0s;\n        --height-variation: 0s;\n        --height-duration: calc(var(--height-times) * var(--seconds-per-100px));\n        --width-duration: calc(var(--width-times) * var(--seconds-per-100px));\n        \n        translate: -50% -50%;\n        animation: linear infinite alternate;\n        animation-name: horizontal, vertical;\n        animation-delay: var(--delay);\n        animation-duration: \n            calc(var(--width-duration) + var(--width-variation)),\n            calc(var(--height-duration) + var(--height-variation));\n    }\n\n    .start {\n        --is: --start;\n        --width-variation: 0.14s;\n        --height-variation: 0.12s;\n        --delay: -19.6s;\n    }\n\n    .end {\n        --is: --end;\n        --width-variation: 0.37s;\n        --height-variation: 1s;\n        --delay: -24.1s;\n    }\n\n    .connection {\n        --_from: var(--from, --start);\n        --_to: var(--to, --end);\n        --min: 0px;\n        --flip-x: 0;\n        --flip-y: 0;\n    \n        position: absolute;\n        top: calc(anchor(var(--_from) center) - var(--min));\n        right: calc(anchor(var(--_to) center) - var(--min));\n        bottom: calc(anchor(var(--_to) center) - var(--min));\n        left: calc(anchor(var(--_from) center) - var(--min));\n    \n        translate: -0.5em -0.5em;\n        scale: calc(1 - 2 * var(--flip-x)) calc(1 - 2 * var(--flip-y));\n    \n        &.connection--flip-x {\n            --flip-x: 1;\n            left: calc(anchor(var(--_to) center) - var(--min));\n            right: calc(anchor(var(--_from) center) - var(--min));\n        }\n        \n        &.connection--flip-y {\n            --flip-y: 1;\n            top: calc(anchor(var(--_to) center) - var(--min));\n            bottom: calc(anchor(var(--_from) center) - var(--min));\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/oNJJRBZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNJJRBZ"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"利用这些连接器，我们还可以做很多有意思的东西。比如像下面这样的拓扑图："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/oNJJrRV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNJJrRV"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["在这个案例中，我们还利用了 ",(0,c.jsxs)(e.a,{href:"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-details-element",target:"_blank",rel:"noopener noreferrer",children:["HTML 的 ",(0,c.jsx)(e.code,{children:"<details>"})," 元素"]}),"和它的",(0,c.jsxs)(e.a,{href:"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-summary-element",target:"_blank",rel:"noopener noreferrer",children:["子元素 ",(0,c.jsx)(e.code,{children:"<summary>"})," "]}),"来控制树形展开与折叠："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<ul class="tree">\n    <li class="tree-item" style="--is: --node-1">\n        <details role="group" class="tree-item-details" open="">\n            <summary class="tree-item-label">CSS selectors</summary>\n            <ul class="tree" style="--to: --node-1">\n                <li class="tree-item" style="--is: --node-1-1">\n                    <details role="group" class="tree-item-details" open="">\n                        <summary class="tree-item-label">Basic selectors</summary>\n                        <ul class="tree" style="--to: --node-1-1">\n                            <li class="tree-item" style="--is: --node-1-1-1">\n                                <p class="tree-item-label"><a  href="#">Universal</a></p>\n                            </li>\n                            \x3c!-- 省略其他 li --\x3e\n                        </ul>\n                    </details>\n                </li>\n                \x3c!-- 省略其他 li --\x3e\n            </ul>\n        </details>\n    </li>\n</ul>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["内联定义的 ",(0,c.jsx)(e.code,{children:"--is"})," 和 ",(0,c.jsx)(e.code,{children:"--to"})," 主要用于锚点函数 ",(0,c.jsx)(e.code,{children:"anchor()"})," ："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer anchor {\n    .tree-item-details {\n        &:not([open])::before {\n            position: absolute;\n            left: anchor(var(--is) right);\n        }\n    }\n\n    .tree-item-label {\n        anchor-name: var(--is);\n    \n        &::before,\n        &::after {\n            position: absolute;\n            left: anchor(var(--to) right);\n            right: anchor(var(--is) left);\n        }\n    \n        &::before {\n            top: calc(anchor(var(--to) top) + 0.5 * var(--lh));\n            bottom: anchor(var(--is) center);\n        }\n    \n        &::after {\n            bottom: calc(anchor(var(--to) top) - 0.5 * var(--lh));\n            top: anchor(var(--is) center);\n            transform: scaleY(-1);\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"你可能会对示例中的连接线感兴趣，这里是实现它的关键代码："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".tree-item-label {\n    --link-underline-position: bottom 12%;\n    \n    hyphens: none;\n    line-height: var(--lh);\n    cursor: pointer;\n    text-decoration: underline;\n    text-decoration-style: dashed;\n    text-decoration-thickness: 1px;\n    text-underline-offset: 2px;\n    text-shadow: none;\n    user-select: none;\n    \n    &::marker {\n        content: \"\";\n    }\n    \n    &::before,\n    &::after {\n        content: \"\";\n        background: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' preserveAspectRatio='none'%3E%3Cpath d='M0 0c25 0 50 50 50 50s25 50 50 50' stroke='currentColor' vector-effect='non-scaling-stroke' fill='none' /%3E%3C/svg%3E\")\n        no-repeat var(--offset) 0 / calc(100% - var(--offset) * 2) 100%;\n        pointer-events: none;\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"是不是很酷，更详细的代码请参阅 Demo 源码！"}),"\n",(0,c.jsxs)(e.h3,{id:"模拟-resize-效果",children:["模拟 resize 效果",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#模拟-resize-效果",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["稍微对 CSS 有所了解的同学都知道，在元素上设置 ",(0,c.jsx)(e.code,{children:"resize"})," 属性之后，元素盒子右下角会有一个拖动手柄，可以用来改变元素的尺寸（",(0,c.jsx)(e.code,{children:"width"})," 和 ",(0,c.jsx)(e.code,{children:"height"}),"）。现在，我想告诉你的是，我们现在可以使用 CSS 锚点定位来给它添加多个 ",(0,c.jsx)(e.code,{children:"resize"})," 手柄。比如下面这个由 ",(0,c.jsx)(e.a,{href:"https://codepen.io/web-dot-dev/full/ZEMpBzP",target:"_blank",rel:"noopener noreferrer",children:"@Jhey 在 CodePen 提供的案例"}),"："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/web-dot-dev/full/ZEMpBzP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/web-dot-dev/full/ZEMpBzP"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["这个案例和前面所看到的案例都有所不同。它展示了",(0,c.jsx)(e.a,{href:"https://xiaochengh.github.io/Explainers/css-anchor-position/explainer.html#",target:"_blank",rel:"noopener noreferrer",children:"一个元素上如何使用多个锚点"}),"。CSS 的 ",(0,c.jsx)(e.code,{children:"anchor()"})," 和 ",(0,c.jsx)(e.code,{children:"anchor-size()"})," 函数可以选择接受一个锚点名称参数，以便它们相对于提供的锚点进行解析，而不是默认锚点。这允许我们将元素锚定到多个元素并创建更复杂的布局："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".max-indicator {\n    position: absolute;\n    left: anchor(--chart right);\n    bottom: max(\n        anchor(--anchor-1 top),\n        anchor(--anchor-2 top),\n        anchor(--anchor-3 top)\n    );\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"@Jhey 提供的这个案例，就采用了该特性，可以用它来调整元素的大小。"}),"\n",(0,c.jsx)(e.p,{children:"它的 HTML 结构很简单："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="controls">\n    <button class="resize-handle">\n        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">\n            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 19.5l-15-15m0 0v11.25m0-11.25h11.25" />\n        </svg>\n    </button>\n    <button class="resize-handle">\n        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">\n            <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 4.5l15 15m0 0V8.25m0 11.25H8.25" />\n        </svg>\n    </button>\n</div>\n\n<div class="container">\n    <img src="https://picsum.photos/1080/1080?random=12" alt="">\n</div>\n'})}),"\n",(0,c.jsxs)(e.p,{children:["其中两个 ",(0,c.jsx)(e.code,{children:"button"})," 是拖动手柄，拖动任何一个手柄都将调整容器 ",(0,c.jsx)(e.code,{children:".container"})," 的大小。关键的 CSS 代码如下："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer demo {\n    .container {\n        position: absolute;\n        inset: \n            anchor(--handle-1 top) \n            anchor(--handle-2 right)\n            anchor(--handle-2 bottom) \n            anchor(--handle-1 left);\n    }\n\n    .resize-handle:first-of-type {\n        anchor-name: --handle-1;\n    }\n     \n    .resize-handle:last-of-type {\n        anchor-name: --handle-2;\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"使用该特性，你还可以实现下面这样的效果："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/web-dot-dev/full/PoeNKXJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/web-dot-dev/full/PoeNKXJ"})," （详细代码请参阅 Demo 源码）"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["除了上述所展示的效果之外，只要你发挥你的才智，利用好 HTML 和 CSS 的新特性，你还可以使用 CSS 锚点定位构建出更有创意，更复杂的交互动效。最后再向在大家展示一个由 ",(0,c.jsx)(e.a,{href:"https://codepen.io/jh3y/full/PoxjQRX",target:"_blank",rel:"noopener noreferrer",children:"@Jehy 在 CodePen 上提供的案例"}),"："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:i,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址： ",(0,c.jsx)(e.a,{href:"https://codepen.io/jh3y/full/PoxjQRX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/jh3y/full/PoxjQRX"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"详细代码不在这里展示，如果你感兴趣的话可以阅读 Demo 源码。"}),"\n",(0,c.jsx)(e.p,{children:"在这个示例中，使用到了小册中很多节课的知识，比如："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:(0,c.jsxs)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7226251495276609569",target:"_blank",rel:"noopener noreferrer",children:[(0,c.jsx)(e.code,{children:":has()"})," 和 ",(0,c.jsx)(e.code,{children:":not()"})," 选择器的结合使用"]})}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:(0,c.jsxs)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7226251495069450278",target:"_blank",rel:"noopener noreferrer",children:["CSS 的 ",(0,c.jsx)(e.code,{children:":is()"})," 选择器"]})}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668032165773368",target:"_blank",rel:"noopener noreferrer",children:"CSS 容器查询中的尺寸查询"})}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:(0,c.jsxs)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668771856941111",target:"_blank",rel:"noopener noreferrer",children:["CSS 的锥形渐变：",(0,c.jsx)(e.code,{children:"conic-gradient()"})]})}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:(0,c.jsxs)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668885224456252",target:"_blank",rel:"noopener noreferrer",children:["CSS 的遮罩：",(0,c.jsx)(e.code,{children:"mask"})]})}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7252964839705247755",target:"_blank",rel:"noopener noreferrer",children:"CSS 自定义属性"})}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:(0,c.jsxs)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259316040151236666",target:"_blank",rel:"noopener noreferrer",children:["CSS 的宽高比：",(0,c.jsx)(e.code,{children:"aspect-ratio"})]})}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"等等..."}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.h2,{id:"小结",children:["小结",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"CSS 锚点定位为 Web 布局提供了一个令人兴奋的新范式，使 Web 开发人员能够更快速、高效地实现复杂布局。通过将元素相互连接，CSS 锚定消除了繁琐的解决方案和计算的需求，简化了响应式和动态 Web 设计的过程。"}),"\n",(0,c.jsx)(e.p,{children:"随着 CSS 锚点定位功能的不断演进，保持对最新规范和浏览器支持的了解至关重要。虽然它具有巨大的潜力，但也必须考虑它当前的局限性并进行相应的规划。CSS 锚点定位将重新定义我们处理 Web 布局的方式，为 Web 开发人员提供了更直观和强大的工具，以创建出色的用户体验。"})]})}function Q(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(K,{...n})}):K(n)}let G=Q;Q.__RSPRESS_PAGE_META={},Q.__RSPRESS_PAGE_META["%E7%8E%B0%E4%BB%A3CSS%2F%E7%AC%AC47%E7%AB%A0%E2%80%94CSS%E9%94%9A%E7%82%B9%E5%AE%9A%E4%BD%8D%EF%BC%9A%E6%8E%A2%E7%B4%A2%E4%B8%8B%E4%B8%80%E4%BB%A3Web%E5%B8%83%E5%B1%80.md"]={toc:[{text:"传统的 CSS 定位的挑战",id:"传统的-css-定位的挑战",depth:2},{text:"CSS 锚点定位简介",id:"css-锚点定位简介",depth:2},{text:"CSS 锚点定位的使用",id:"css-锚点定位的使用",depth:2},{text:"定义一个锚点",id:"定义一个锚点",depth:3},{text:"使用锚点函数定位元素",id:"使用锚点函数定位元素",depth:3},{text:"跟踪滚动位置",id:"跟踪滚动位置",depth:3},{text:"位置回退和自动定位",id:"位置回退和自动定位",depth:3},{text:"锚点定位的其他特性",id:"锚点定位的其他特性",depth:3},{text:"CSS 锚点定位用例",id:"css-锚点定位用例",depth:2},{text:"熔岩灯菜单（Lava Lamp Menu）",id:"熔岩灯菜单lava-lamp-menu",depth:3},{text:"圆环菜单（Radial Menu）",id:"圆环菜单radial-menu",depth:3},{text:"上下文菜单",id:"上下文菜单",depth:3},{text:"交叉引用",id:"交叉引用",depth:3},{text:"模拟粒子碰撞的效果",id:"模拟粒子碰撞的效果",depth:3},{text:"模拟 resize 效果",id:"模拟-resize-效果",depth:3},{text:"小结",id:"小结",depth:2}],title:"第47章—CSS锚点定位：探索下一代Web布局",headingTitle:"第47章—CSS锚点定位：探索下一代Web布局",frontmatter:{}}}}]);