"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["3262"],{861421:function(e,n,r){r.r(n),r.d(n,{default:()=>o});var s=r(552676),i=r(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",p:"p",strong:"strong",img:"img",ol:"ol",code:"code",pre:"pre"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"13基础-10api-身份验证",children:["13基础 10：API 身份验证",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#13基础-10api-身份验证",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"本节核心内容",children:["本节核心内容",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本节核心内容",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"介绍 API 身份验证的常用机制"}),"\n",(0,s.jsx)(n.li,{children:"介绍如何进行 API 身份验证"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["本小节源码下载路径：",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo09",target:"_blank",rel:"noopener noreferrer",children:"demo09"})]}),"\n",(0,s.jsx)(n.p,{children:"可先下载源码到本地，结合源码理解后续内容，边学边练。"}),"\n",(0,s.jsxs)(n.p,{children:["本小节的代码是基于 ",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo08",target:"_blank",rel:"noopener noreferrer",children:"demo08"})," 来开发的。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"api-身份验证",children:["API 身份验证",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-身份验证",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在典型业务场景中，为了区分用户和安全保密，必须对 API 请求进行鉴权，\r\n但是不能要求每一个请求都进行登录操作。合理做法是，在第一次登录之后产生一个有一定有效期的 token，并将其存储于浏览器的 Cookie 或 LocalStorage 之中，之后的请求都携带该 token ，请求到达服务器端后，服务器端用该 token 对请求进行鉴权。在第一次登录之后，服务器会将这个 token 用文件、数据库或缓存服务器等方法存下来，用于之后请求中的比对。或者，更简单的方法是，直接用密钥对用户信息和时间戳进行签名对称加密，这样就可以省下额外的存储，也可以减少每一次请求时对数据库的查询压力。这种方式，在业界已经有一种标准的实现方式，该方式被称为 JSON Web Token（JWT，音同 jot，详见 ",(0,s.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc7519",target:"_blank",rel:"noopener noreferrer",children:"JWT RFC 7519"}),"）。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"token 的意思是“令牌”，里面包含了用于认证的信息。这里的 token 是指 JSON Web Token（JWT）。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"jwt-简介",children:["JWT 简介",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jwt-简介",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"JWT 认证流程"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/6/18/164107dc88e79a61?w=1833&h=1431&f=png&s=89827",alt:""})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"客户端使用用户名和密码请求登录"}),"\n",(0,s.jsx)(n.li,{children:"服务端收到请求后会去验证用户名和密码，如果用户名和密码跟数据库记录不一致则验证失败，如果一致则验证通过，服务端会签发一个 Token 返回给客户端"}),"\n",(0,s.jsx)(n.li,{children:"客户端收到请求后会将 Token 缓存起来，比如放在浏览器 Cookie 中或者本地存储中，之后每次请求都会携带该 Token"}),"\n",(0,s.jsx)(n.li,{children:"服务端收到请求后会验证请求中携带的 Token，验证通过则进行业务逻辑处理并成功返回数据"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在 JWT 中，Token 有三部分组成，中间用 ",(0,s.jsx)(n.code,{children:"."})," 隔开，并使用 Base64 编码："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"header"}),"\n",(0,s.jsx)(n.li,{children:"payload"}),"\n",(0,s.jsx)(n.li,{children:"signature"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"如下是 JWT 中的一个 Token 示例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"header 介绍"})}),"\n",(0,s.jsx)(n.p,{children:"JWT Token 的 header 中，包含两部分信息："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Token 的类型"}),"\n",(0,s.jsx)(n.li,{children:"Token 所使用的加密算法"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"例如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "typ": "JWT",\r\n  "alg": "HS256"\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"该例说明 Token 类型是 JWT，加密算法是 HS256（alg 算法可以有多种）。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Payload 载荷介绍"})}),"\n",(0,s.jsx)(n.p,{children:"Payload 中携带 Token 的具体内容，里面有一些标准的字段，当然你也可以添加额外的字段，来表达更丰富的信息，可以用这些信息来做更丰富的处理，比如记录请求用户名，标准字段有："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"iss：JWT Token 的签发者"}),"\n",(0,s.jsx)(n.li,{children:"sub：主题"}),"\n",(0,s.jsx)(n.li,{children:"exp：JWT Token 过期时间"}),"\n",(0,s.jsx)(n.li,{children:"aud：接收 JWT Token 的一方"}),"\n",(0,s.jsx)(n.li,{children:"iat：JWT Token 签发时间"}),"\n",(0,s.jsx)(n.li,{children:"nbf：JWT Token 生效时间"}),"\n",(0,s.jsx)(n.li,{children:"jti：JWT Token ID"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"本例中的 payload 内容为："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n "id": 2,\r\n "username": "kong",\r\n "nbf": 1527931805,\r\n "iat": 1527931805\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Signature 签名介绍"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Signature"})," 是 Token 的签名部分，通过如下方式生成："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"用 Base64 对 header.payload 进行编码"}),"\n",(0,s.jsxs)(n.li,{children:["用 Secret 对编码后的内容进行加密，加密后的内容即为 ",(0,s.jsx)(n.code,{children:"Signature"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Secret 相当于一个密码，存储在服务端，一般通过配置文件来配置 Secret 的值，本例中是配置在 ",(0,s.jsx)(n.code,{children:"conf/config.yaml"})," 配置文件中:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/6/2/163bfc8ea855234a?w=1939&h=729&f=png&s=79670",alt:""})}),"\n",(0,s.jsx)(n.p,{children:"最后生成的 Token 像这样："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ\n"})}),"\n",(0,s.jsxs)(n.p,{children:["签名后服务端会返回生成的 Token，客户端下次请求会携带该 Token，服务端收到 Token 后会解析出 header.payload，然后用相同的加密算法和密码对 header.payload 再进行一次加密，并对比加密后的 Token 和收到的 Token 是否相同，如果相同则验证通过，不相同则返回 ",(0,s.jsx)(n.code,{children:"HTTP 401 Unauthorized"})," 的错误。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["详细的 JWT 介绍参考 ",(0,s.jsx)(n.a,{href:"https://blog.csdn.net/qq_28098067/article/details/52036493",target:"_blank",rel:"noopener noreferrer",children:"JWT – 基于 Token 的身份验证"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"如何进行-api-身份验证",children:["如何进行 API 身份验证",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何进行-api-身份验证",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"API 身份认证包括两步："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"签发 token"}),"\n",(0,s.jsx)(n.li,{children:"API 添加认证 middleware"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"签发 token"})}),"\n",(0,s.jsxs)(n.p,{children:["首先要实现登录接口。在登录接口中采用明文校验用户名密码的方式，登录成功之后再产生 token。在 ",(0,s.jsx)(n.code,{children:"router/router.go"})," 文件中添加登录入口："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// api for authentication functionalities\r\ng.POST("/login", user.Login)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"handler/user/login.go"}),"（详见 ",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo09/handler/user/login.go",target:"_blank",rel:"noopener noreferrer",children:"demo09/handler/user/login.go"}),"）中添加 login 的具体实现："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"解析用户名和密码"}),"\n",(0,s.jsxs)(n.li,{children:["通过 ",(0,s.jsx)(n.code,{children:"auth.Compare()"})," 对比密码是否是数据库保存的密码，如果不是，返回 ",(0,s.jsx)(n.code,{children:"errno.ErrPasswordIncorrect"})," 错误"]}),"\n",(0,s.jsxs)(n.li,{children:["如果相同，授权通过，通过 ",(0,s.jsx)(n.code,{children:"token.Sign()"})," 签发 token 并返回"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"auth.Compare()"})," 的实现详见 ",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo09/pkg/auth/auth.go",target:"_blank",rel:"noopener noreferrer",children:"demo09/pkg/auth/auth.go"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"token.Sign()"})," 的实现详见 ",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo09/pkg/token/token.go",target:"_blank",rel:"noopener noreferrer",children:"demo09/pkg/token/token.go"}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"API 添加认证 middleware"})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"router/router.go"})," 中对 user handler 添加授权 middleware："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/6/2/163bfbb7b2c4758a?w=1755&h=594&f=png&s=45796",alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["通过该 middleware，所有对 ",(0,s.jsx)(n.code,{children:"/v1/user"})," 路径的请求，都会经过 ",(0,s.jsx)(n.code,{children:"middleware.AuthMiddleware()"})," 中间件的处理：token 校验。",(0,s.jsx)(n.code,{children:"middleware.AuthMiddleware()"})," 函数是通过调用 ",(0,s.jsx)(n.code,{children:"token.ParseRequest()"})," 来进行 token 校验的。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"middleware.AuthMiddleware()"})," 实现详见 ",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo09/router/middleware/auth.go",target:"_blank",rel:"noopener noreferrer",children:"demo09/router/middleware/auth.go"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"token.ParseRequest()"})," 实现详见 ",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo09/pkg/token/token.go",target:"_blank",rel:"noopener noreferrer",children:"demo09/pkg/token/token.go"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"编译并测试",children:["编译并测试",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译并测试",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"下载 apiserver_demos 源码包（如前面已经下载过，请忽略此步骤）"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ git clone https://github.com/lexkong/apiserver_demos\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["将 ",(0,s.jsx)(n.code,{children:"apiserver_demos/demo09"})," 复制为",(0,s.jsx)(n.code,{children:" $GOPATH/src/apiserver"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ cp -a apiserver_demos/demo09/ $GOPATH/src/apiserver\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"在 apiserver 目录下编译源码"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ cd $GOPATH/src/apiserver\r\n$ gofmt -w .\r\n$ go tool vet .\r\n$ go build -v .\n"})}),"\n",(0,s.jsx)(n.p,{children:"上文已经介绍过，API 身份验证首先需要登录，登录成功后会签发 token，之后请求时在 HTTP Header 中带上 token 即可。"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"用户登录"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ curl -XPOST -H "Content-Type: application/json" http://127.0.0.1:8080/login -d\'{"username":"admin","password":"admin"}\'\r\n\r\n{\r\n  "code": 0,\r\n  "message": "OK",\r\n  "data": {\r\n    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ"\r\n  }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["返回的 token 为 ",(0,s.jsx)(n.code,{children:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ"}),"。"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"请求时如果不携带签发的 token，会禁止请求"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ curl -XPOST -H "Content-Type: application/json" http://127.0.0.1:8080/v1/user -d\'{"username":"user1","password":"user1234"}\'\r\n\r\n{\r\n  "code": 20103,\r\n  "message": "The token was invalid.",\r\n  "data": null\r\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"请求时携带 token"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ curl -XPOST -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ" -H "Content-Type: application/json" http://127.0.0.1:8080/v1/user -d\'{"username":"user1","password":"user1234"}\'\r\n\r\n{\r\n  "code": 0,\r\n  "message": "OK",\r\n  "data": {\r\n    "username": "user1"\r\n  }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["可以看到携带 token 后验证通过，成功创建用户。通过 HTTP Header ",(0,s.jsx)(n.code,{children:"Authorization: Bearer $token"})," 来携带 token。携带 token 后不需要再次查询数据库核对密码，即可完成授权。"]}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本小节介绍了 API 身份验证的相关知识。apiserver 采用的认证方式为 JWT，小节简单介绍了 JWT 的认证流程，并通过实例展示了具体如何进行 JWT 认证。"}),"\n",(0,s.jsx)(n.p,{children:"通过以上小节的学习，读者已经可以进行基本的 API 开发了，下一节开始介绍 API 开发的进阶内容。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let o=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F13%E5%9F%BA%E7%A1%80%2010%EF%BC%9AAPI%20%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81.md"]={toc:[{text:"本节核心内容",id:"本节核心内容",depth:2},{text:"API 身份验证",id:"api-身份验证",depth:2},{text:"JWT 简介",id:"jwt-简介",depth:2},{text:"如何进行 API 身份验证",id:"如何进行-api-身份验证",depth:2},{text:"编译并测试",id:"编译并测试",depth:2},{text:"小结",id:"小结",depth:2}],title:"13基础 10：API 身份验证",headingTitle:"13基础 10：API 身份验证",frontmatter:{}}}}]);