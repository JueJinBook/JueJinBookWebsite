"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["86688"],{730117:function(n,e,s){s.r(e),s.d(e,{default:()=>l});var i=s(552676),r=s(740453);function c(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",strong:"strong",ol:"ol",li:"li",pre:"pre",code:"code",h3:"h3",blockquote:"blockquote",ul:"ul"},(0,r.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"23-工程化创建工程化实战项目",children:["23 工程化：创建工程化实战项目",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#23-工程化创建工程化实战项目",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"从这一章开始，我们进入课程的第三部分：工程化。"}),"\n",(0,i.jsx)(e.p,{children:"我们之前说过，Node.js 有三个比较大的使用场景。一是编写运行在操作系统中的命令行程序，比如我们前面学习过的文章生成器。二是编写 HTTP 服务端程序，这里包含两部分：实现 HTTP 服务器，包括静态和动态服务器，以及基于 HTTP 服务器实现业务逻辑。而第三个使用场景就是这部分要介绍的内容，即作为前端开发的工程化工具使用。"}),"\n",(0,i.jsx)(e.p,{children:"那么，什么是前端工程化呢？"}),"\n",(0,i.jsxs)(e.h2,{id:"什么是前端工程化",children:["什么是前端工程化？",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是前端工程化",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"前端工程本质上是软件工程的一种，关注的是性能、稳定性、可用性、可维护性等方面，注重基本的开发效率、运行效率的同时，思考维护效率。一切以这些为目标的工作都是“前端工程化”。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"工程化是一种思想而不是某种技术。"})}),"\n",(0,i.jsx)(e.p,{children:"如果我们只是用 JS 编写一小段程序，让它跑在我们自己选定的运行时环境，比如某个确定版本的浏览器，或者确定版本的 Node.js 运行时中，可能并不需要前端工程化。但如果我们实现一个比较复杂的 Web 应用，需要让代码跑在不同的环境，以及与多人一同协作，考虑工程化就非常有必要了。"}),"\n",(0,i.jsx)(e.p,{children:"前端工程化通常要解决以下问题。"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["模块化和组件化：如何让我们编写的代码能够被其他人、其他应用、其他模块所",(0,i.jsx)(e.strong,{children:"复用"}),"（这一部分可以参考《",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/6891929939616989188/section",target:"_blank",rel:"noopener noreferrer",children:"前端工程师进阶 10 日谈"}),"》）。"]}),"\n",(0,i.jsx)(e.li,{children:"兼容性和跨平台性：如何让我们编写的代码在不同的平台、不同的环境中正确运行。"}),"\n",(0,i.jsx)(e.li,{children:"规范化和标准化：如何保持代码风格的统一、接口设计的标准、模型和范式的规范，以保证项目的可维护性。"}),"\n",(0,i.jsx)(e.li,{children:"自动化测试和持续集成：如何让我们的代码能够被自动测试，并在发布时通过 CI/CD 验证，以保证代码的稳定性和可靠性。"}),"\n",(0,i.jsx)(e.li,{children:"处理静态资源：将 HTML 压缩，CSS 和 JS 上传到 CDN，以优化网页访问速度。"}),"\n",(0,i.jsx)(e.li,{children:"解决安全性问题：防止 CSRF 和 XSS 等。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"在这一部分，我将带你一步一步学习如何运用前端工程化思想，使用 Node.js 作为基础工具，解决以上这些问题。"}),"\n",(0,i.jsxs)(e.h2,{id:"工程化实战项目",children:["工程化实战项目",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#工程化实战项目",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"工程化是一个实践的过程，为了能够清晰讲解工程化的操作过程，我们从一个实战项目（即，“涂鸦板”）开始入手，创建我们的工程开发环境，通过这个相对较复杂的项目，你能够清楚明白工程化究竟该如何做。"}),"\n",(0,i.jsx)(e.p,{children:"本课程最后一部分的“涂鸦板”项目是一个完整的 Web 应用，比较复杂，包含几个目录和模块。在这里我们先搭建项目的整体目录结构，然后一步步安装和配置工程化脚本与工具。"}),"\n",(0,i.jsx)(e.p,{children:"那么这个项目是什么样的结构呢？"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"isketch\n├── src\n| \xa0 ├── graphics // 绘图模块\n| \xa0 ├── math  // 数学运算库\n│\xa0\xa0 ├── ...  // 其他工具库\n│\xa0\xa0 └── ...\n├── lib // 编译后的代码\n├── server // HTTP服务器模块\n├── static // 静态资源目录\n├── .babelrc // babel编译配置\n├── .eslintrc.js // eslint配置\n├── .gitignore  // git忽略文件配置\n├── .npmignore // npm忽略文件配置\n├── dist // 打包后的文件\n├── test // 测试目录\n├── examples // 示例目录\n├── typings // 类型声明目录\n├── README.md // 项目说明文档\n├── package.json // 项目配置文件\n└── rollup.config.js // rollup配置文件\n"})}),"\n",(0,i.jsxs)(e.p,{children:["如上目录所示，一个 Web 项目有许多模块，我们将一些功能模块放在",(0,i.jsx)(e.code,{children:"src"}),"目录下，HTTP 服务器放在",(0,i.jsx)(e.code,{children:"server"}),"目录下，静态资源放在",(0,i.jsx)(e.code,{children:"static"}),"目录下，编译后的文件放在",(0,i.jsx)(e.code,{children:"lib"}),"目录下，测试文件放在",(0,i.jsx)(e.code,{children:"test"}),"目录下，示例文件放在",(0,i.jsx)(e.code,{children:"examples"}),"目录下，类型声明文件放在",(0,i.jsx)(e.code,{children:"typings"}),"目录下，项目说明文档放在",(0,i.jsx)(e.code,{children:"README.md"}),"文件中，项目配置文件放在",(0,i.jsx)(e.code,{children:"package.json"}),"文件中，rollup配置文件放在",(0,i.jsx)(e.code,{children:"rollup.config.js"}),"文件中。"]}),"\n",(0,i.jsx)(e.p,{children:"这里有那么多目录和文件，可能你会有些困惑，但是不要紧，我们将在后续章节里由浅入深，一步步来构建这些内容，同时通过实例说明这些文件的作用和目的。"}),"\n",(0,i.jsx)(e.p,{children:"下面，我们就开始我们的工程化之旅吧！"}),"\n",(0,i.jsxs)(e.h2,{id:"初始化-npm-环境",children:["初始化 NPM 环境",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化-npm-环境",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"因为我们是使用 Node.js 来开发项目的，要实现工程化，离不开使用 NPM 的配置文件 —— package.json。在前面的章节中我们零零碎碎介绍了一些这个文件的配置，这里我们将对这个文件的配置进行再一次的梳理。"}),"\n",(0,i.jsx)(e.p,{children:"package.json 是一个配置文件，它的目的是告诉模块的使用者，这个模块的名字、版本、模块的描述性文字、模块的主入口是哪个文件、模块的所有依赖包、以及与这个模块相关的脚本命令。"}),"\n",(0,i.jsxs)(e.h3,{id:"创建-packagejson-文件",children:["创建 package.json 文件",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-packagejson-文件",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["首先，我们创建",(0,i.jsx)(e.code,{children:"isketch"}),"目录，进入该目录，在目录下运行",(0,i.jsx)(e.code,{children:"npm init -y"}),"命令。这样，Node.js 会在目录下创建一个初始的 package.json 文件，内容如下："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'{\n \xa0"name": "isketch",\n \xa0"version": "1.0.0",\n \xa0"description": "",\n \xa0"main": "index.js",\n \xa0"scripts": {\n \xa0 \xa0"test": "echo "Error: no test specified" && exit 1"\n  },\n \xa0"keywords": [],\n \xa0"author": "",\n \xa0"license": "ISC"\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"如上代码所示，name 是项目的包名，version 是版本号，description 是描述，main 是包默认的入口文件，scripts 是 NPM 脚本，我们工程化的重点就是创建这些脚本。keywords 是搜索关键字，让开发者在 NPM 上能够更好地搜索到我们的模块。author 是作者，license 是开源协议。"}),"\n",(0,i.jsx)(e.p,{children:"接下来，我们针对项目配置这个文件的内容："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'{\n \xa0"name": "isketch",\n \xa0"version": "0.0.1",\n \xa0"description": "A SVG doodle for sketching",\n \xa0"main": "dist/index.js",\n \xa0"module": "src/index.js",\n \xa0"scripts": {\n \xa0 \xa0"test": "echo "Error: no test specified" && exit 1"\n  },\n \xa0"keywords": [],\n \xa0"author": "junyux",\n \xa0"license": "MIT"\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"version"}),"字段我们设置为",(0,i.jsx)(e.code,{children:"0.0.1"}),"，NPM 包通常遵循",(0,i.jsx)(e.a,{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer",children:"Semver 规范"}),"，即版本号格式为",(0,i.jsx)(e.code,{children:"主版本号.次版本号.修订号"}),"。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"main"}),"和",(0,i.jsx)(e.code,{children:"module"}),"字段是模块的入口，设置这个值之后，如果该模块被其他模块依赖，用户在自己的代码中",(0,i.jsx)(e.code,{children:"import isketch"}),"就可以自动",(0,i.jsx)(e.code,{children:"import isketch/src/index.js"}),"。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"module"}),"字段的设置也告诉 Webpack 或 Rollup 等打包工具使用哪个目录下的文件进行打包。在上面的配置中，我们告诉打包器使用",(0,i.jsx)(e.code,{children:"src/index.js"}),"文件来打包。如果这个字段没有设置，默认情况下，打包工具会采用",(0,i.jsx)(e.code,{children:"main"}),"字段的值来打包，也就是采用",(0,i.jsx)(e.code,{children:"lib/index.js"}),"文件来打包。"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"⚠️这里需要注意的是，lib 目录下的文件是编译好的文件，src 目录下的文件是源文件。因为 Webpack 等打包工具会通过 Babel 插件自己编译源文件，所以一般来说，打包工具都是使用源文件进行打包，而不是使用编译好的文件来打包。"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["其他的",(0,i.jsx)(e.code,{children:"descript"}),"、",(0,i.jsx)(e.code,{children:"anthor"}),"我们也相应修改，开源协议修改为比",(0,i.jsx)(e.code,{children:"ISC"}),"更友好的",(0,i.jsx)(e.code,{children:"MIT"}),"。"]}),"\n",(0,i.jsxs)(e.h2,{id:"设计-npm-scripts",children:["设计 NPM Scripts",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#设计-npm-scripts",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"接下来，我们重点说一说 script 字段。script 字段指定了模块能执行的一些脚本，这些指令脚本就是安装在 node_modules 下的模块中的 .bin 下的执行文件。"}),"\n",(0,i.jsx)(e.p,{children:"比如说我们安装 ESlint，它会被安装到 node_modules/eslint 目录下，如果我们如下配置 script："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.code,{children:'"lint": "eslint ./src/**/*.js"'})}),"\n",(0,i.jsxs)(e.p,{children:["当我们执行",(0,i.jsx)(e.code,{children:"npm run lint"}),"，就会执行",(0,i.jsx)(e.code,{children:"node_modules/eslint/.bin/index.js"}),"这个脚本文件。"]}),"\n",(0,i.jsx)(e.p,{children:"现在，我们想给项目添加如下几个常用的脚本命令："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'{\n \xa0...\n \xa0"scripts": {\n \xa0 \xa0"start": "...",\n \xa0 \xa0"lint": "...",\n \xa0 \xa0"compile": "...",\n \xa0 \xa0"build": "...",\n \xa0 \xa0"deploy": "...",\n \xa0 \xa0"test": "...",\n \xa0 \xa0"prepublishOnly": "..."\n  },\n \xa0...\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"一般的项目工程化 NPM Scripts 主要包括以下脚本。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"npm start: 运行开发 HTTP 服务，以执行 examples，用来验证所开发的功能。"}),"\n",(0,i.jsx)(e.li,{children:"npm run lint: 运行代码风格检查并修复不符合规范的代码。"}),"\n",(0,i.jsx)(e.li,{children:"npm run compile: 运行编译命令，将 src 下的 JS 编译后输出到 lib 下。"}),"\n",(0,i.jsx)(e.li,{children:"npm run build: 运行构建命令，将脚本通过打包器打包。"}),"\n",(0,i.jsx)(e.li,{children:"npm run deploy: 运行部署命令，将打包后的脚本发布到 CDN 上。"}),"\n",(0,i.jsx)(e.li,{children:"npm test: 运行单元测试。"}),"\n",(0,i.jsxs)(e.li,{children:["npm run prepublishOnly: 执行",(0,i.jsx)(e.code,{children:"npm publish"}),"发布模块前的预执行指令。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"现在这些脚本暂时都为空，别着急，我们一步一步来补充它们。"}),"\n",(0,i.jsxs)(e.h2,{id:"小结",children:["小结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"前端工程化是一种软件工程的思想，利用各种技术或工具，提高复杂项目的性能、稳定性、可用性和可维护性。工程化的内容包括了："}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"代码的模块化和组件化；"}),"\n",(0,i.jsx)(e.li,{children:"让项目具有兼容性和跨平台性；"}),"\n",(0,i.jsx)(e.li,{children:"规范化和标准化代码风格、接口设计、模型和范式的规范；"}),"\n",(0,i.jsx)(e.li,{children:"自动化测试和持续集成；"}),"\n",(0,i.jsx)(e.li,{children:"优化静态资源，提高网页的访问速度；"}),"\n",(0,i.jsx)(e.li,{children:"防止 CSRF 和 XSS 等安全性问题。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"不同项目或应用的工程化的过程和使用的工具是不一样的。比如：针对 JavaScript 库的工程化和针对 Web 应用项目的工程化操作是不一样的。后者比前者要复杂一些。而这部分，我们将重点介绍一个完整的 Web 应用项目的工程化实现，让你对工程化的思想和操作有一个清晰而完整的理解。"}),"\n",(0,i.jsx)(e.p,{children:"这一章节介绍的 package.json 是项目的配置文件，也是一些工程化工具的配置文件。明白这个文件后，下一章节，我们将学习工程化中如何规范化和标准化项目的代码、接口等。"})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%E5%85%A8%E6%A0%88%2F23%20%E5%B7%A5%E7%A8%8B%E5%8C%96%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE.md"]={toc:[{text:"什么是前端工程化？",id:"什么是前端工程化",depth:2},{text:"工程化实战项目",id:"工程化实战项目",depth:2},{text:"初始化 NPM 环境",id:"初始化-npm-环境",depth:2},{text:"创建 package.json 文件",id:"创建-packagejson-文件",depth:3},{text:"设计 NPM Scripts",id:"设计-npm-scripts",depth:2},{text:"小结",id:"小结",depth:2}],title:"23 工程化：创建工程化实战项目",headingTitle:"23 工程化：创建工程化实战项目",frontmatter:{}}}}]);