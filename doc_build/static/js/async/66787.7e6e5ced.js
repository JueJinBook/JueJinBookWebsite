"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["66787"],{204709:function(e,n,s){e.exports=s.p+"static/image/102cc7e33556e8850b9f884323ce3e86.ff1be489.webp"},161660:function(e,n,s){e.exports=s.p+"static/image/5f8651b018d4b205eedccc5581f80509.f198e016.webp"},590971:function(e,n,s){e.exports=s.p+"static/image/77a25c7f1273b202a60309cbbcf27ccd.4e79d643.webp"},613606:function(e,n,s){e.exports=s.p+"static/image/ee2848c6d9bb849bfdb93dd69b440234.75e196b0.webp"},746036:function(e,n,s){s.r(n),s.d(n,{default:()=>eh});var a=s(552676),r=s(740453);let c=s.p+"static/image/0e5005bd8d42c0ab56c335067e085649.657312f4.webp";var i=s(161660);let t=s.p+"static/image/5386776a1d8fef5b86d365b41a112ed4.51707eb6.webp",d=s.p+"static/image/cad58bffd112fd8bc2fa3c663a2c5638.5d2a4e9d.webp",l=s.p+"static/image/40e29fe3f5d9f5324020423e7dd5650c.d3fdb395.webp",p=s.p+"static/image/52d21cae1d142548d9c9e40de66d4f14.bc2179f1.webp",o=s.p+"static/image/c941cfd73c5c3dca0ed303f589c850c2.8cef6a4c.webp",m=s.p+"static/image/a8e8c24d9673a7d0011f6c0787f78c69.78ac0475.webp",x=s.p+"static/image/18d39f7ba12ae7498f729fd7d1949db9.b8e99143.webp",h=s.p+"static/image/f9835ad2677d694e5c82932ba493af70.612d1b61.webp",j=s.p+"static/image/090ac40d6a7cf8cf3d9458997af46b28.8e9ffec1.webp",f=s.p+"static/image/919cb616be532f7a2d0df493967ce5a5.2b3459a6.webp",u=s.p+"static/image/d9c0143c9a7692b1b6df5cc57f5fcfa4.064672ac.webp",g=s.p+"static/image/f5d0846665da1d8a61680be6b37f716d.c851b55e.webp",b=s.p+"static/image/c0b7304eeb344c07636850d5db4a9112.d560a334.webp",w=s.p+"static/image/c91f178514e83330f57690c300bc19dd.0f01de90.webp",I=s.p+"static/image/fd93c6185e564a7cb721621710c73b00.863c9722.webp",v=s.p+"static/image/5f9b07c9c863e0c59906923f7d185b36.82c70c4a.webp",k=s.p+"static/image/0adf711cecc35bda027fb02a26992e13.e637f4a2.webp",y=s.p+"static/image/85348659218c8b6116b7df08f9a3164d.6ddf73a0.webp",F=s.p+"static/image/25a1789d5f77462453f2272fb8f1f76c.0c1bdbef.webp",E=s.p+"static/image/f586c886a5f63942ca7a16ce6de72c7f.afdf1bd7.webp",_=s.p+"static/image/4cfa90a020a05d7f0aef3ced1084601f.34ba7879.webp",N=s.p+"static/image/256ddbcf7640c4332079732965e455fd.2a7b8e8a.webp",A=s.p+"static/image/1d4c6b91d1dc7f79a0ae7772f269a5f3.1951c50d.webp",P=s.p+"static/image/299eb80d84d87859d5548cd1f6ad439f.d491f045.webp",C=s.p+"static/image/64630a6b69522e695d702fb7421d1407.d4f06326.webp",B=s.p+"static/image/ed5381bff4b8e29641a3bda0079499b9.2c9b43c6.webp",U=s.p+"static/image/43e42087301926da3ff7cc4d9b80d52f.771e4781.webp",q=s.p+"static/image/817d56c43022e4bb9dd9ee1a5a5765f1.58c2c870.webp",T=s.p+"static/image/687e308ed0d22d2b8a0bd299bd1813fa.c99c6161.webp",S=s.p+"static/image/6f5906c8e790a299672b74e0137c900f.eed8a1d8.webp";var R=s(204709);let O=s.p+"static/image/4b73aa00356348b7b3a8546c80f728fa.0aafafdf.webp",D=s.p+"static/image/db8074dee43715eb5ae727f6c4686532.cce0e6f2.webp",G=s.p+"static/image/9a7dc4ec52071638cbf81e8148495bf2.cbab5698.webp",L=s.p+"static/image/38f098ea7097cf7ebe315ead83c826ef.058e2e47.webp",V=s.p+"static/image/43ce38762d440f806a97d0670ba47143.8077b938.webp";var z=s(613606);let Q=s.p+"static/image/fa22734ce44db7b00bbacd58aa0ed629.4901ba91.webp",H=s.p+"static/image/7fd17fc543083301826b6cc5d8e3ab80.c13d8206.webp",M=s.p+"static/image/8f40845b59ccad80a0e8daf73c389a92.f67b274d.webp",J=s.p+"static/image/ad2177c2c5edc4d5266161fa2a258e52.e83f50dd.webp",K=s.p+"static/image/29631f49bcd314632f9701fd1fa8a027.3942941e.webp",W=s.p+"static/image/fd285d7c1f92e4c25c41ca0f0a03fc1d.70731308.webp",X=s.p+"static/image/3bcec6bd9a8c546435dc2810a15b2dd2.3e9886f9.webp",Y=s.p+"static/image/521aaf0a9d96c1d4d9467513255f23ed.8377f599.webp",Z=s.p+"static/image/8cac8cbf6723486ea995e4411b054d0b.aedef4aa.webp",$=s.p+"static/image/884b260bc770999bfae6394b4c1f34d5.3911dce3.webp",ee=s.p+"static/image/2334cd6f804c002ce62afa33b9fa773a.6c639b70.webp",en=s.p+"static/image/49e40611257b27f6a9df145d04b9a312.76df9e22.webp",es=s.p+"static/image/c245fb731ff9a9cee794d795428ec335.179aa87c.webp",ea=s.p+"static/image/1b32627fe43e6cf3f5e552f2b00f9c73.c4edb59a.webp",er=s.p+"static/image/976f79d1fb633d2976c1b0a9a7ebebf9.80398305.webp",ec=s.p+"static/image/458864301105c2992672174c950b77d2.f8f3e624.webp",ei=s.p+"static/image/923c059e8de282a87f9a93ac4efd3e35.406eb055.webp",et=s.p+"static/image/1acddf3f98b433cd142d78520bac08ad.74bbc7fa.webp",ed=s.p+"static/image/efdd1d98b355881e3b8f29cc1e17ae44.d6cb054e.webp",el=s.p+"static/image/62f9463ae646e703fd7f950232e5e3be.2b81ed0a.webp",ep=s.p+"static/image/c1154fd142e690cf37ab810615f4c7b8.97057435.webp";var eo=s(590971);function em(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",ul:"ul",li:"li",h2:"h2"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"117-会议室预订系统用户管理模块---用户端信息修改页面",children:["117. 会议室预订系统：用户管理模块-- 用户端信息修改页面",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#117-会议室预订系统用户管理模块---用户端信息修改页面",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"用户相关的页面还剩下两个，这节我们来写一下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:eo,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:z,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"首先是修改密码的页面，把注册页面的表单拿过来改改就行："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Button, Form, Input, message } from \'antd\';\nimport { useForm } from \'antd/es/form/Form\';\nimport \'./update_password.css\';\nimport { useCallback } from \'react\';\nimport { Link, useNavigate } from \'react-router-dom\';\n\nexport interface UpdatePassword {\n    email: string;\n    captcha: string;\n    password: string;\n    confirmPassword: string;\n}\n\nconst layout1 = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\n\nconst layout2 = {\n    labelCol: { span: 0 },\n    wrapperCol: { span: 24 }\n}\n\nexport function UpdatePassword() {\n    const [form] = useForm();\n    const navigate = useNavigate();\n\n    const onFinish = useCallback(async (values: UpdatePassword) => {\n        console.log(values);\n    }, []);\n\n    const sendCaptcha = useCallback(async function () {\n        console.log(\'send captcha\')\n    }, []);\n    \n\n    return <div id="updatePassword-container">\n        <h1>会议室预订系统</h1>\n        <Form\n            form={form}\n            {...layout1}\n            onFinish={onFinish}\n            colon={false}\n            autoComplete="off"\n        >\n            <Form.Item\n                label="邮箱"\n                name="email"\n                rules={[\n                    { required: true, message: \'请输入邮箱!\' },\n                    { type: "email", message: \'请输入合法邮箱地址!\'}\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <div className=\'captcha-wrapper\'>\n                <Form.Item\n                    label="验证码"\n                    name="captcha"\n                    rules={[{ required: true, message: \'请输入验证码!\' }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Button type="primary" onClick={sendCaptcha}>发送验证码</Button>\n            </div>\n\n            <Form.Item\n                label="密码"\n                name="password"\n                rules={[{ required: true, message: \'请输入密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                label="确认密码"\n                name="confirmPassword"\n                rules={[{ required: true, message: \'请输入确认密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                {...layout1}\n                label=" "\n            >\n                <Button className=\'btn\' type="primary" htmlType="submit">\n                    修改\n                </Button>\n            </Form.Item>\n        </Form>\n    </div>   \n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"css 部分如下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"#updatePassword-container {\n    width: 400px;\n    margin: 100px auto 0 auto;\n    text-align: center;\n}\n#updatePassword-container .btn {\n    width: 100%;\n}\n#updatePassword-container .captcha-wrapper {\n    display: flex;\n    justify-content: flex-end;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"跑起来是这样的："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ep,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后再调用下后端接口。"}),"\n",(0,a.jsx)(n.p,{children:"这时我发现一个问题："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:el,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"之前写的 update_password 接口需要登录，然后用 @UserInfo 从 reqeust.user 取 userId。"}),"\n",(0,a.jsx)(n.p,{children:"但其实这个页面是从这里点进来的："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ed,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这时候并没有登录，只是通过邮箱验证身份，然后修改密码。"}),"\n",(0,a.jsx)(n.p,{children:"但是邮箱我们并没有添加唯一约束，只有 username 是在注册的时候做了唯一检查："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:et,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"所以需要通过 username 来找到修改密码的用户。"}),"\n",(0,a.jsx)(n.p,{children:"可以改成前端传 username，然后后端验证过邮箱验证码之后，再根据 username 查询摇改密码的用户。"}),"\n",(0,a.jsx)(n.p,{children:"此外，我们在 User 的 entity 这里给 username 添加唯一约束："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ei,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后可以看到 typeorm 确实给 username 添加了唯一索引："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ec,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在 mysql workbench 里也可以看到："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:er,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后修改下 update_password 接口："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ea,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"把 @RequireLogin、@ApiBearAuth 还有 @UsrInfo 去掉。"}),"\n",(0,a.jsx)(n.p,{children:"修改 UpdatePasswordDto，添加 username 属性："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:es,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@IsNotEmpty({\n    message: '用户名不能为空'\n})\n@ApiProperty()\nusername: string;\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后改下 UserService 的 updatePassword 方法："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:en,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"改成根据 username 查询用户，并且还要验证下邮箱是否正确。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const foundUser = await this.userRepository.findOneBy({\n  username: passwordDto.username\n});\n\nif(foundUser.email !== passwordDto.email) {\n    throw new HttpException('邮箱不正确', HttpStatus.BAD_REQUEST);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"还有，发送验证码接口的 @RequireLogin 和 @ApiBearerAuth 也要去掉："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ee,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:"请求 /user/update_password/captcha 接口发送验证码："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:$,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:Z,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后请求 /user/update_password 接口："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:Y,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"提示修改密码成功。"}),"\n",(0,a.jsx)(n.p,{children:"我们在页面登录下试试："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:X,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"用最新密码登录，提示登录成功。"}),"\n",(0,a.jsx)(n.p,{children:"postman 里跑通流程之后，我们在页面里加一下。"}),"\n",(0,a.jsx)(n.p,{children:"在更改密码页面加上 username 表单项："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:W,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<Form.Item\n    label="用户名"\n    name="username"\n    rules={[\n        { required: true, message: \'请输入用户名!\' },\n    ]}\n>\n    <Input />\n</Form.Item>\n'})}),"\n",(0,a.jsx)(n.p,{children:"类型中也加上 username："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:K,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后在 interfaces.ts 添加这两个接口："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export async function updatePasswordCaptcha(email: string) {\n    return await axiosInstance.get('/user/update_password/captcha', {\n        params: {\n            address: email\n        }\n    });\n}\n\nexport async function updatePassword(data: UpdatePassword) {\n    return await axiosInstance.post('/user/update_password', data);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"更改密码页面里调用下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const sendCaptcha = useCallback(async function () {\n    const address = form.getFieldValue('email');\n    if(!address) {\n        return message.error('请输入邮箱地址');\n    }\n\n    const res = await updatePasswordCaptcha(address);\n    if(res.status === 201 || res.status === 200) {\n        message.success(res.data.data);\n    } else {\n        message.error('系统繁忙，请稍后再试');\n    }\n}, []);\n"})}),"\n",(0,a.jsx)(n.p,{children:"发送验证码接口的调用逻辑和注册时一模一样。"}),"\n",(0,a.jsx)(n.p,{children:"更改密码接口的调用逻辑也和注册差不多："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const onFinish = useCallback(async (values: UpdatePassword) => {\n    if(values.password !== values.confirmPassword) {\n        return message.error('两次密码不一致');\n    }\n    const res = await updatePassword(values);\n\n    const { message: msg, data} = res.data;\n\n    if(res.status === 201 || res.status === 200) {\n        message.success('密码修改成功');\n        setTimeout(() => {\n            navigate('/login');\n        }, 1500);\n    } else {\n        message.error(data || '系统繁忙，请稍后再试');\n    }\n}, []);\n"})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:J,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"填入邮箱，点击发送验证码。"}),"\n",(0,a.jsx)(n.p,{children:"提示发送成功。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:M,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"邮箱里也收到了这个验证码。"}),"\n",(0,a.jsx)(n.p,{children:"然后填入新密码，点击修改密码按钮："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:H,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"提示修改成功，然后会跳到登录页面："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:Q,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在登录页面用新密码登录，提示登录成功。"}),"\n",(0,a.jsx)(n.p,{children:"这样，修改密码功能的前后端就都完成了。"}),"\n",(0,a.jsx)(n.p,{children:"然后还有一个更改个人信息的页面。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:z,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这个页面有所不同。"}),"\n",(0,a.jsx)(n.p,{children:"前面几个功能都是未登录时的，而这个修改个人信息的功能需要登录之后才能用。"}),"\n",(0,a.jsx)(n.p,{children:"而且界面上方是有公共的导航栏的。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:V,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"所以这个页面要声明一个 /index 的路由作为父级路由，然后 /index/update_info 作为子路由。"}),"\n",(0,a.jsx)(n.p,{children:"添加一个 index/index.tsx 页面"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { UserOutlined } from "@ant-design/icons";\nimport { Outlet } from "react-router-dom";\nimport \'./index.css\';\n\nexport function Index() {\n    return <div id="index-container">\n        <div className="header">\n            <h1>会议室预定系统</h1>\n            <UserOutlined className="icon"/>\n        </div>\n        <div className="body">\n            <Outlet></Outlet>\n        </div>\n    </div>\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"这里用到了 antd 的 icon 组件，需要安装用到的包："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install @ant-design/icons --save\n"})}),"\n",(0,a.jsx)(n.p,{children:"css 如下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"#index-container{\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n#index-container .header{\n    height: 80px;\n    border-bottom: 1px solid #aaa;\n    line-height: 80px;\n    display: flex;\n    justify-content: space-between;\n    padding: 0 20px;\n}\n#index-container h1{\n    margin: 0;\n}\n\n#index-container .icon {\n    font-size: 40px;\n    margin-top: 20px;\n}\n#index-container .body{\n    flex: 1;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"整体是竖直的 flex 布局，高度 100vh，上面 80px 下面 flex:1"}),"\n",(0,a.jsx)(n.p,{children:"然后 header 部分是 水平的 flex 布局。"}),"\n",(0,a.jsx)(n.p,{children:"把它添加到 /index 的路由，并且添加两个子路由："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:L,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"{\n    path: \"/\",\n    element: <Index></Index>,\n    errorElement: <ErrorPage />,\n    children: [\n      {\n        path: 'aaa',\n        element: <div>aaa</div>\n      },\n      {\n        path: 'bbb',\n        element: <div>bbb</div>\n      }\n    ]\n},\n"})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:G,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:D,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:O,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,a.jsx)(n.p,{children:"然后在下面添加 update_info 路由，并实现 page/update_info/UpdateInfo 组件："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:R,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Button, Form, Input, message } from \'antd\';\nimport { useForm } from \'antd/es/form/Form\';\nimport { useCallback } from \'react\';\nimport \'./update_info.css\';\nimport { useNavigate } from \'react-router-dom\';\n\nexport interface UserInfo {\n    headPic: string;\n    nickName: string;\n    email: string;\n    captcha: string;\n}\n\nconst layout1 = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\n\nexport function UpdateInfo() {\n    const [form] = useForm();\n    const navigate = useNavigate();\n\n    const onFinish = useCallback(async (values: UserInfo) => {\n        \n    }, []);\n\n    const sendCaptcha = useCallback(async function () {\n    }, []);\n\n    return <div id="updateInfo-container">\n        <Form\n            form={form}\n            {...layout1}\n            onFinish={onFinish}\n            colon={false}\n            autoComplete="off"\n        >\n            <Form.Item\n                label="头像"\n                name="headPic"\n                rules={[\n                    { required: true, message: \'请输入头像!\' },\n                ]}\n            >\n                <Input/>\n            </Form.Item>\n\n            <Form.Item\n                label="昵称"\n                name="nickName"\n                rules={[\n                    { required: true, message: \'请输入昵称!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label="邮箱"\n                name="email"\n                rules={[\n                    { required: true, message: \'请输入邮箱!\' },\n                    { type: "email", message: \'请输入合法邮箱地址!\'}\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <div className=\'captcha-wrapper\'>\n                <Form.Item\n                    label="验证码"\n                    name="captcha"\n                    rules={[{ required: true, message: \'请输入验证码!\' }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Button type="primary" onClick={sendCaptcha}>发送验证码</Button>\n            </div>\n\n            <Form.Item\n                {...layout1}\n                label=" "\n            >\n                <Button className=\'btn\' type="primary" htmlType="submit">\n                    修改\n                </Button>\n            </Form.Item>\n        </Form>\n    </div>   \n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"和前几个页面差不多。"}),"\n",(0,a.jsx)(n.p,{children:"css："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"#updateInfo-container {\n    width: 400px;\n    margin: 50px auto 0 auto;\n    text-align: center;\n}\n#updateInfo-container .btn {\n    width: 100%;\n}\n#updateInfo-container .captcha-wrapper {\n    display: flex;\n    justify-content: flex-end;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"访问 /update_info 可以看到这个页面："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:S,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这个页面涉及到 3 个接口："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"/user/info 查询用户信息的接口，用来回显数据"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"/user/update 修改用户信息的接口，用来做修改"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"/user/update/captcha 发送验证码的接口"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"我们看下 swagger 接口文档："}),"\n",(0,a.jsx)(n.p,{children:"/user/info 接口没有参数，但是需要登录："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:T,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"/user/update 接口需要在 body 传这么几个参数："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:q,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"/user/update/captcha 需要传一个邮箱地址："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:U,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"不知道有没有同学发现这里有点不太合理："}),"\n",(0,a.jsx)(n.p,{children:"邮箱是用户自己传的，那如果传的不是注册用的邮箱呢？"}),"\n",(0,a.jsx)(n.p,{children:"前面发送验证码需要传邮箱地址，是因为那是注册或者修改密码用，没有登录。"}),"\n",(0,a.jsx)(n.p,{children:"而现在已经登录了，就不应该再传邮箱地址了，应该是放在 jwt 里，然后在 LoginGuard 里取出来注入 controller。"}),"\n",(0,a.jsx)(n.p,{children:"我们改一下："}),"\n",(0,a.jsx)(n.p,{children:"改一下这个 login 接口，在 jwt 里放 email 的信息："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:B,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:C,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"同时 refresh 接口也要改下放在 jwt 里的信息："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:P,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:A,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这里要取 user.email，需要在 UserService 的 findUserById 方法里返回下 email："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:N,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后在 LoginGuard 里从 jwt 里取出 email 来："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:_,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:E,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后在 /user/update/captcha 就可以直接从 request.user 里拿 email 信息了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:F,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"把参数的标注去掉，其余的都不用变，这样就是从 jwt 里取登录用户的 email 来发邮件了。"}),"\n",(0,a.jsx)(n.p,{children:"我们测试下："}),"\n",(0,a.jsx)(n.p,{children:"先登录："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:y,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后用这个 accessToken 访问下发送验证码接口："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:k,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"发送成功，收到了这个验证码："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:v,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后调用下查询用户信息的接口："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:I,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"之后调用修改接口："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:w,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在数据库里看下，用户信息已经改过来了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:b,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"postman 里接口的流程跑通之后，我们在页面调用下。"}),"\n",(0,a.jsx)(n.p,{children:"首先在 interfaces.ts 里添加这 3 个接口："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export async function getUserInfo() {\n    return await axiosInstance.get('/user/info');\n}\n\nexport async function updateInfo(data: UserInfo) {\n    return await axiosInstance.post('/user/update', data);\n}\n\nexport async function updateUserInfoCaptcha() {\n    return await axiosInstance.get('/user/update/captcha');\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后我们先做用户信息的回显："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"\nuseEffect(() => {\n    async function query() {\n        const res = await getUserInfo();\n\n        const { data } = res.data;\n\n        if(res.status === 201 || res.status === 200) {\n            console.log(data);\n        }\n    }\n    query();\n}, []);\n"})}),"\n",(0,a.jsx)(n.p,{children:"调用 getUserInfo 接口，返回数据后打印下。"}),"\n",(0,a.jsx)(n.p,{children:"这个接口的访问需要登录，也就是要从 localStorage 里取出 accessToken 放到 header 里。"}),"\n",(0,a.jsx)(n.p,{children:"这种携带 header 的通用逻辑可以放在 axios 的 interceptor 里做。"}),"\n",(0,a.jsx)(n.p,{children:"并且还有 token 过期之后调用 refresh 刷新 token 的逻辑。"}),"\n",(0,a.jsx)(n.p,{children:"这个我们前面写过，直接拿过来放在 interfaces.ts 里："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { message } from \"antd\";\n\nconst axiosInstance = axios.create({\n    baseURL: 'http://localhost:3005/',\n    timeout: 3000\n});\n\naxiosInstance.interceptors.request.use(function (config) {\n    const accessToken = localStorage.getItem('access_token');\n\n    if(accessToken) {\n        config.headers.authorization = 'Bearer ' + accessToken;\n    }\n    return config;\n})\n\ninterface PendingTask {\n    config: AxiosRequestConfig\n    resolve: Function\n  }\nlet refreshing = false;\nconst queue: PendingTask[] = [];\n\naxiosInstance.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    async (error) => {\n        if(!error.response) {\n            return Promise.reject(error);\n        }\n        let { data, config } = error.response;\n\n        if(refreshing) {\n            return new Promise((resolve) => {\n                queue.push({\n                    config,\n                    resolve\n                });\n            });\n        }\n\n        if (data.code === 401 && !config.url.includes('/user/refresh')) {\n            \n            refreshing = true;\n\n            const res = await refreshToken();\n\n            refreshing = false;\n\n            if(res.status === 200 || res.status === 201) {\n\n                queue.forEach(({config, resolve}) => {\n                    resolve(axiosInstance(config))\n                })\n\n                return axiosInstance(config);\n            } else {\n                message.error(res.data);\n\n                setTimeout(() => {\n                    window.location.href = '/login';\n                }, 1500);\n            }\n            \n        } else {\n            return error.response;\n        }\n    }\n)\n\nasync function refreshToken() {\n    const res = await axiosInstance.get('/user/refresh', {\n        params: {\n          refresh_token: localStorage.getItem('refresh_token')\n        }\n    });\n    localStorage.setItem('access_token', res.data.access_token || '');\n    localStorage.setItem('refresh_token', res.data.refresh_token || '');\n    return res;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"这段逻辑就是在每次发请求之前，在 header 里加上 authorization，带上 access_token。"}),"\n",(0,a.jsx)(n.p,{children:"当响应码是 401 的时候，就刷新 token，刷新失败提示错误信息，然后跳到登录页。"}),"\n",(0,a.jsx)(n.p,{children:"并且通过 refreshing 的标记和 task 队列实现了并发请求只刷新一次。"}),"\n",(0,a.jsx)(n.p,{children:"这部分看不明白的同学建议回头看下 access_token 和 refresh_token 无感刷新那节。"}),"\n",(0,a.jsx)(n.p,{children:"其中，这代码代码可能有同学有疑问："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"if(!error.response) {\n    return Promise.reject(error);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"是为了请求没有发送成功的情况的："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"请求没有发送成功时，错误对象没有 response 属性。"}),"\n",(0,a.jsx)(n.p,{children:"接下来，我们先登录下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:u,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"给用户图标添加跳到 /update_info 的链接："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:f,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:j,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后可以看到控制台打印了当前登录用户的信息："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后我们做下回显："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:x,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"form.setFieldValue('headPic', data.headPic);\nform.setFieldValue('nickName', data.nickName);\nform.setFieldValue('email', data.email);\n"})}),"\n",(0,a.jsx)(n.p,{children:"这样，回显的数据就有了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:m,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后实现发送验证码："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const sendCaptcha = useCallback(async function () {\n    const res = await updateUserInfoCaptcha();\n    if(res.status === 201 || res.status === 200) {\n        message.success(res.data.data);\n    } else {\n        message.error('系统繁忙，请稍后再试');\n    }\n}, []);\n"})}),"\n",(0,a.jsx)(n.p,{children:"这里不需要填邮箱地址，服务端会从 jwt 里取。"}),"\n",(0,a.jsx)(n.p,{children:"那这里的邮箱也是不应该修改的，给它加个 disabled："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"点击发送验证码。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"提示发送成功，邮箱里也收到了这个验证码："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"接下来就差更新接口了，我们调用下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const onFinish = useCallback(async (values: UserInfo) => {\n    const res = await updateInfo(values);\n\n    if(res.status === 201 || res.status === 200) {\n        const { message: msg, data} = res.data;\n        if(msg === 'success') {\n            message.success('用户信息更新成功');\n        } else {\n            message.error(data);\n        }\n    } else {\n        message.error('系统繁忙，请稍后再试');\n    }\n}, []);\n"})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:t,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"修改信息，点击发送验证码："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"填入验证码，点击修改，提示用户信息更新成功。"}),"\n",(0,a.jsx)(n.p,{children:"去数据库里看一下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"确实修改成功了。"}),"\n",(0,a.jsx)(n.p,{children:"这样，修改用户信息的流程就走完了。"}),"\n",(0,a.jsx)(n.p,{children:"案例代码在小册仓库："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_frontend_user",target:"_blank",rel:"noopener noreferrer",children:"用户端前端代码"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"后端代码"})}),"\n",(0,a.jsxs)(n.h2,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"这节我们实现了修改密码和修改个人信息这两个页面。"}),"\n",(0,a.jsx)(n.p,{children:"修改密码页面不需要登录，但我们当时的接口是需要登录的，所以改了一下。"}),"\n",(0,a.jsx)(n.p,{children:"并且给 username 加上了唯一约束，通过 username 来查询用户，然后修改。"}),"\n",(0,a.jsx)(n.p,{children:"修改个人信息页面是登录后的，我们通过 React Router 的路由嵌套写了多级页面。"}),"\n",(0,a.jsx)(n.p,{children:"实现了用户信息的回显和更新的功能。"}),"\n",(0,a.jsx)(n.p,{children:"此外，我们还添加了 axios 拦截器来实现自动携带 token 和刷新 token，饼在 refreshToken 过期时跳转登录页。"}),"\n",(0,a.jsx)(n.p,{children:"这样，用户端的用户相关功能就都完成了。"})]})}function ex(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(em,{...e})}):em(e)}let eh=ex;ex.__RSPRESS_PAGE_META={},ex.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F117.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E8%AE%A2%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97--%20%E7%94%A8%E6%88%B7%E7%AB%AF%E4%BF%A1%E6%81%AF%E4%BF%AE%E6%94%B9%E9%A1%B5%E9%9D%A2.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"117. 会议室预订系统：用户管理模块-- 用户端信息修改页面",headingTitle:"117. 会议室预订系统：用户管理模块-- 用户端信息修改页面",frontmatter:{}}}}]);