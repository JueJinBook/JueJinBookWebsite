"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["69793"],{133456:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var s=r(552676),a=r(740453);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",code:"code",h2:"h2",pre:"pre",ol:"ol",li:"li",ul:"ul"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"30-拓展盒子模式在现代前端生态中的实践",children:["30 拓展：盒子模式在现代前端生态中的实践",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#30-拓展盒子模式在现代前端生态中的实践",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当下，",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7175422979646423098",target:"_blank",rel:"noopener noreferrer",children:"盒子模式"}),"在前端函数式编程的实践主要有两个方向：一是",(0,s.jsx)(n.strong,{children:"响应式编程库"}),"，如 RxJS、Bacon.js 和 Most.js 等库，它们将异步数据流视为盒子；另一类则是",(0,s.jsx)(n.strong,{children:"函数式编程工具库"}),"，如 fp-ts、Folktale 和 Sanctuary 等库，它们提供了对 Functor、Monad 等抽象的数据结构和相关操作的实现。"]}),"\n",(0,s.jsxs)(n.p,{children:["在本册",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7207809625310117927",target:"_blank",rel:"noopener noreferrer",children:"第26节"}),"，我们已经对盒子模式在 RxJS 中的应用有了一定的探讨和分析。实际上，",(0,s.jsx)(n.strong,{children:"像 RxJS 这样的响应式编程库，一般都会实践盒子模式，因为它们需要借助盒子模式实现流（Stream）的抽象"}),"——流（Stream）通常会被封装为一个盒子，如 RxJS 中的 ",(0,s.jsx)(n.code,{children:"Observable"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["市面上受欢迎的响应式编程库，除了 RxJS 之外，还有 ",(0,s.jsx)(n.a,{href:"https://baconjs.github.io/",target:"_blank",rel:"noopener noreferrer",children:"Bacon.js"})," 和 ",(0,s.jsx)(n.a,{href:"https://github.com/cujojs/most",target:"_blank",rel:"noopener noreferrer",children:"Most.js"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"封装流对象的盒子以-baconjs-与-mostjs-为例",children:["封装“流”对象的盒子：以 Bacon.js 与 Most.js 为例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#封装流对象的盒子以-baconjs-与-mostjs-为例",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["通过",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7207809625310117927",target:"_blank",rel:"noopener noreferrer",children:"第26节"}),"的学习， 我们已经知道，",(0,s.jsx)(n.strong,{children:"RxJS 中的"})," ",(0,s.jsx)(n.code,{children:"Observable"})," ",(0,s.jsx)(n.strong,{children:"既是一个 Functor，也是一个 Monad"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["其实，",(0,s.jsx)(n.code,{children:"Observable"})," ",(0,s.jsx)(n.strong,{children:"只是“流”在 RxJS 中的一种表现形式"}),"。在响应式编程库的设计中，对“流”的抽象是最为关键的一步。而“流”的抽象思路又往往是比较接近的：",(0,s.jsx)(n.strong,{children:"它们总是会被封装在一个既是 Functor、又是 Monad 的盒子里——RxJS 是如此，Bacon.js 和 Most.js 也是如此"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"首先，我们来看一下 Bacon.js 和 Most.js 如何体现 Functor 的特征："}),"\n",(0,s.jsx)(n.p,{children:"Bacon.js 的核心流对象是 Bacon.Observable，它有两个子类：Bacon.EventStream 和 Bacon.Property。这三种类型都既是 Monad，又是 Functor。这里我以 Bacon.EventStream 为例，通过代码证明这一点（解析在注释里）："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import * as Bacon from "baconjs"  \n\n// 借助 fromArray 接口，创建一个 Bacon.EventStream 对象\nconst eventStreamBox = Bacon.fromArray([1, 2, 3])\n\n// 定义一个简单的函数 f，用于转换 Stream 对象中的值\nconst f = x => x + 1    \n// Bacon.Observable 是一个 Functor，实现了 map 接口\nconst mappedEventStreamBox = eventStreamBox.map(f)  \n\n// 定义一个简单的函数 g，它接收一个参数 x，将 x 乘以 2，然后将结果包装在一个 Bacon.js EventStream 对象中。\n// Bacon.once 函数创建一个只发出一个事件（传入的值 x * 2）然后立即结束的 EventStream\nconst g = x => Bacon.once(x * 2)\n// Bacon.Observable 是一个 Monad,，实现了 flatMap 接口  \nconst flatMappedEventStreamBox = eventStreamBox.flatMap(g)\n\n// 通过 onValue 对盒子里面的值进行输出\nmappedEventStreamBox.onValue(value => console.log(`Mapped value: ${value}`))\nflatMappedEventStreamBox.onValue(value => console.log(`flatMapped value: ${value}`))\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在 Most.js 中，也有类似于 ",(0,s.jsx)(n.code,{children:"Observable"}),"的流对象存在，叫做 ",(0,s.jsx)(n.code,{children:"Stream"}),"。如下面代码所示，",(0,s.jsx)(n.code,{children:"Stream"}),"既是一个 Functor，也是一个 Monad："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { from } from 'most'\n\n// 创建一个简单的 Stream 对象\nconst stream = from([1, 2, 3])\n\n// 定义一个简单的函数 f，用于转换 Stream 对象中的值\nconst f = x => x + 1\n\n// Stream 是一个 Functor，它实现了 map 接口\nconst mappedStream = stream.map(f)\n\n// 定义一个简单的函数 g，用于将一个值乘以2后包装在一个 Stream 对象中\nconst g = x => from([x * 2])\n\n// Stream 是一个 Monad，它实现了和 flatMap 同一性质的 chain 接口\nconst chainedStream = stream.chain(g)   \n\n\n// 订阅 mappedStream，输出盒子里的值\nmappedStream.forEach((value) => console.log(`Mapped value: ${value}`))\n\n// 订阅 chainedStream，输出盒子里的值\nchainedStream.forEach((value) => console.log(`Chained value: ${value}`))\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"函数式编程工具库中的盒子模式",children:["函数式编程工具库中的盒子模式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数式编程工具库中的盒子模式",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["提起函数式编程工具库，大家可能首先想到的还是本文开篇介绍的 Ramda 和 Lodash-fp。其实，",(0,s.jsx)(n.strong,{children:"尽管 Ramda 和 Lodash-fp 都是充分体现了函数式编程的基本特性，但它们都没有涉足盒子模式相关的实现"}),"——正如大家学习过程中所感受到的那样，盒子模式是一套相对进阶的知识体系，它对开发者提出了更高的要求，因此对于一些普适的工具库而言，它确实不是主要的关注点。"]}),"\n",(0,s.jsxs)(n.h2,{id:"盒子模式的实践规律",children:["盒子模式的实践规律",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#盒子模式的实践规律",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"不过，我们仍然可以看到一些更加专注于垂直领域的函数式编程库，它们提供了更丰富的功能，并且囊括了对盒子模式的实现。这些库包括但不限于："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"fp-ts"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Sanctuary"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Folktale"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Crocks"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Fluture"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"monet.js"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsx)(n.p,{children:"这些库在社区各自都有不少的拥趸，也是大家从实践层面学习盒子模式的绝佳素材。"}),"\n",(0,s.jsx)(n.p,{children:"这里我列出这几个有代表性的盒子模式工具库，主要的用意还是引导大家横向地去对比这些库之间的异同，进而发现一些实践的规律。比如说，通过逐个阅读这些库的源码，我就发现它们之间至少有着这样的一些共性："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"尽管每个库的侧重点不同，但它们都提供了 Maybe/Option 和 Either 这两类盒子来处理可能不存在的值和可能存在错误的操作。"}),"\n",(0,s.jsx)(n.li,{children:"它们都实现了 Functor 和 Monad 相关的一些最基本的接口，比如 map、chain、fold 等。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"当然啦，在共性之外，更多的是差异："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"不同库提供的实用函数数量和覆盖面有所不同。例如，Sanctuary 包含了大量的实用函数，甚至包括一些 Ramda 的函数，而其它的库（比如 monet.js ）提供的实用函数就相对较少。"}),"\n",(0,s.jsx)(n.li,{children:"某些库专注于特定领域，如 Fluture 专注于异步操作，提供了 Future 盒子；而 fp-ts 则强调类型安全，基于 TypeScript 编写。"}),"\n",(0,s.jsx)(n.li,{children:"接口名的差异：比如尽管不同的库都实现了 Either，但 Folktale 执行 Either 判断的接口叫 matchWith，而 Crocks 中用于实现相同功能的接口则叫 either。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"..."}),"\n",(0,s.jsxs)(n.p,{children:["不过，比起数不清的差异，我更关注的还是共性，因为",(0,s.jsx)(n.strong,{children:"共性中蕴含着实践的规律"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"认识-either-盒子",children:["认识 Either 盒子",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#认识-either-盒子",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在我提到的这两个最明显的共性中， ",(0,s.jsx)(n.strong,{children:"“都提供了 Maybe/Option 和 Either 这两类盒子"}),"”是一个很有趣的点。Maybe 盒子我们在",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7175423056620290103",target:"_blank",rel:"noopener noreferrer",children:"第18节"}),"已经介绍过，接下来我们通过一个例子来认识一下 Either 盒子:"]}),"\n",(0,s.jsx)(n.p,{children:"需求：实现一个 divide 函数，该函数接受两个参数，返回它们的商。由于除数为零时除法是不合法的，我们可以使用 Either 盒子来处理这个错误。"}),"\n",(0,s.jsx)(n.p,{children:"Either 盒子编码实现如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"//  Right 意味着正确，正确的情况下向右拐\nclass Right {\n  constructor(value) {\n    this.value = value\n  }\n\n  // 核心函数 map\n  map(fn) {\n    return new Right(fn(this.value))\n  }\n}\n\n// Left 意味着错误，错误的情况下向左拐\nclass Left {\n  constructor(value) {\n    this.value = value\n  }\n\n  map(fn) {\n    // 不进行任何操作，直接返回自身\n    return this\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们可以实现并调用 ",(0,s.jsx)(n.code,{children:"divide"})," 函数，该函数使用 Either 盒子处理除数为零的错误："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// 定义 "divide" 函数，使用 Either 盒子处理除数为零的错误\nfunction divide(a, b) {\n  if (b === 0) {\n    return new Left("除数不能为零")\n  } else {\n    return new Right(a / b)\n  }\n}  \n\n// 使用 "divide" 函数，通过映射（map）等操作处理结果\n// result1: Right(2)\nconst result1 = divide(4, 2) \n// result2: Left("除数不能为零")\nconst result2 = divide(4, 0) \n\n// 输出 Right(4)\nresult1.map(value => value * 2)   \n// 输出 Left("除数不能为零")\nresult2.map(value => value * 2) \n'})}),"\n",(0,s.jsx)(n.p,{children:"在这个例子中，通过使用 Either 盒子，我们可以显式地表示函数执行的两种结果（成功/失败），同时保持函数的纯粹性。这使得函数更易于组合、重用和维护。"}),"\n",(0,s.jsxs)(n.h2,{id:"maybe--either盒子模式对于控制流的巧思",children:["Maybe & Either：盒子模式对于控制流的巧思",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#maybe--either盒子模式对于控制流的巧思",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Maybe 盒子代表一个可能存在也可能不存在的值，用于避免 null 或 undefined 值对代码的影响；Either 盒子代表一个或成功或失败的结果，它通过使用左值和右值来表示这两种情况。这两个盒子都指向了同一个程序设计概念——",(0,s.jsx)(n.strong,{children:"控制流"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["程序的目的通常是解决问题，而解决问题往往需要多个步骤和多个条件判断，这就需要对程序的执行流程进行控制，才能达到预期的结果。因此，",(0,s.jsx)(n.strong,{children:"控制流的实现可以被视作是程序之本"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["而在函数式编程中，",(0,s.jsx)(n.strong,{children:"Maybe 和 Either 恰恰体现了盒子模式对于控制流的巧思"}),"——Maybe 和 Either 都是对控制流的封装，这层封装允许我们",(0,s.jsx)(n.strong,{children:"将函数的控制流处理与实际的业务逻辑解耦"}),"，使得函数更加纯粹、更容易推理和测试。"]}),"\n",(0,s.jsx)(n.p,{children:"在 Maybe 和 Either 的加持下，我们可以将程序中的不确定性和可能的失败场景转化为可操作的数据结构，以一种更结构化的方式来管理程序的执行路径。在这种模式下，我们将关注点集中在业务逻辑上，而非纠结于繁琐的错误处理细节。"}),"\n",(0,s.jsxs)(n.p,{children:["这也解释了为什么尽管工具库的定位各不相同，但在盒子模式的实现方面，它们总会不约而同地以 Maybe 和 Either 作为盒子类型的“基线”——",(0,s.jsx)(n.strong,{children:"Maybe 和 Either 之于盒子模式，正如控制流之于程序设计：它们是构建程序的基础，也是实现业务逻辑的关键"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["JavaScript%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F30%20%E6%8B%93%E5%B1%95%EF%BC%9A%E7%9B%92%E5%AD%90%E6%A8%A1%E5%BC%8F%E5%9C%A8%E7%8E%B0%E4%BB%A3%E5%89%8D%E7%AB%AF%E7%94%9F%E6%80%81%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5.md"]={toc:[{text:"封装“流”对象的盒子：以 Bacon.js 与 Most.js 为例",id:"封装流对象的盒子以-baconjs-与-mostjs-为例",depth:2},{text:"函数式编程工具库中的盒子模式",id:"函数式编程工具库中的盒子模式",depth:2},{text:"盒子模式的实践规律",id:"盒子模式的实践规律",depth:2},{text:"认识 Either 盒子",id:"认识-either-盒子",depth:2},{text:"Maybe & Either：盒子模式对于控制流的巧思",id:"maybe--either盒子模式对于控制流的巧思",depth:2}],title:"30 拓展：盒子模式在现代前端生态中的实践",headingTitle:"30 拓展：盒子模式在现代前端生态中的实践",frontmatter:{}}}}]);