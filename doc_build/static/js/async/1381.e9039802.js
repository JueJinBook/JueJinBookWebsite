"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["1381"],{832225:function(e,r,c){c.r(r),c.d(r,{default:()=>p});var d=c(552676),i=c(740453);let n=c.p+"static/image/ccc71914a4ddec00ce9061647662b35b.1645da67.webp",s=c.p+"static/image/458fdbe35b55adb28f743d97b5b7d4af.afc5c800.webp",h=c.p+"static/image/09bd96ed6d6460572b940545898b0e82.a4762cc3.webp",t=c.p+"static/image/bdd0723736257a3e5a42ebab5112f487.2849f2d4.webp",a=c.p+"static/image/7188fa6a654b0f0252952ccd80a4bbea.b95becaf.webp",l=c.p+"static/image/ac9f353fa0b87a24949c627f012bc1d8.48372670.webp",o=c.p+"static/image/6d7a4c2e422189101a3bcd0ac6d71dee.39eb4c09.webp";function x(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",img:"img",blockquote:"blockquote"},(0,i.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(r.h1,{id:"13network-篇---network-的骚操作",children:["13.Network 篇 - Network 的骚操作",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#13network-篇---network-的骚操作",children:"#"})]}),"\n",(0,d.jsxs)(r.h2,{id:"前言",children:["前言",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.code,{children:"Network"})," 作为我们经常调试的 ",(0,d.jsx)(r.code,{children:"Chrome"})," 面板，你知道它有哪些使用技巧吗？"]}),"\n",(0,d.jsxs)(r.h2,{id:"1-隐藏-network-overview",children:["1. 隐藏 network overview",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1-隐藏-network-overview",children:"#"})]}),"\n",(0,d.jsxs)(r.p,{children:["你经常查看 ",(0,d.jsx)(r.code,{children:"Network"})," 面板是为了:"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"我想看看请求的时间轴信息"}),"\n",(0,d.jsx)(r.li,{children:"我就想看看请求列表- 确认下请求状态，资源大小和响应结果呢"}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:["我赌你是后者，如果是这样，那么 ",(0,d.jsx)(r.code,{children:"Overview"})," 的部分就没有任何理由占用 ",(0,d.jsx)(r.code,{children:"Network"})," 接近一半的空间。隐藏它！"]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:o,alt:""})}),"\n",(0,d.jsxs)(r.h2,{id:"2-request-initiator-显示了调用堆栈信息",children:["2. Request initiator 显示了调用堆栈信息",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#2-request-initiator-显示了调用堆栈信息",children:"#"})]}),"\n",(0,d.jsxs)(r.blockquote,{children:["\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.code,{children:"initiator"})," 可以翻译为 启动器，但是太过生硬，大家理解意思就好。"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.code,{children:"Network"})," 面板中的 ",(0,d.jsx)(r.code,{children:"initiator"})," 这一列显明了是哪个脚本的哪一行触发了请求。它显示了在调用堆栈中触发请求的最后一步。但如果你用的是，例如：一个本地化的 ",(0,d.jsx)(r.code,{children:"fetch"})," API， 那它将会指向一些低层级的类库的代码 - 例如 当我们在 ",(0,d.jsx)(r.code,{children:"Angular"})," 配合使用 ",(0,d.jsx)(r.code,{children:"Axios"})," 或者 ",(0,d.jsx)(r.code,{children:"zone.js"})," 的时候，这时指向的是 ",(0,d.jsx)(r.code,{children:"xhr.js"})]}),"\n",(0,d.jsxs)(r.p,{children:["除了这些外部库之外，如果你希望查看代码的哪一部分触发了请求。 将鼠标悬停在显示的 ",(0,d.jsx)(r.code,{children:"initiator"}),"（例如 外部库）上，你将看到完整的调用堆栈，包括你的文件："]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:l,alt:""})}),"\n",(0,d.jsxs)(r.h2,{id:"3-请求过滤",children:["3. 请求过滤",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#3-请求过滤",children:"#"})]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.code,{children:"Network"})," 面板中的过滤器输入框接受字符串或正则表达式，对应显示匹配的请求。 但是你也可以使用它来过滤很多属性。"]}),"\n",(0,d.jsxs)(r.p,{children:["只需输入 例如 ",(0,d.jsx)(r.code,{children:"method"})," 或者 ",(0,d.jsx)(r.code,{children:"mime-type"})," :"]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:a,alt:""})}),"\n",(0,d.jsxs)(r.p,{children:["如果想要显示所有可能的关键字，在空白的输入框按下 ",(0,d.jsx)(r.code,{children:"[ctrl] + [space]"})]}),"\n",(0,d.jsxs)(r.h2,{id:"4-自定义请求表",children:["4. 自定义请求表",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#4-自定义请求表",children:"#"})]}),"\n",(0,d.jsxs)(r.p,{children:["在请求表中，你可以看到有关每个请求的几条信息，例如：",(0,d.jsx)(r.code,{children:"Status"}),"， ",(0,d.jsx)(r.code,{children:"Type"}),"， ",(0,d.jsx)(r.code,{children:"Initiator"}),"， ",(0,d.jsx)(r.code,{children:"Size"})," 和 ",(0,d.jsx)(r.code,{children:"Time"}),"。但是你同样可以添加更多(例如 我经常添加 ",(0,d.jsx)(r.code,{children:"Method"}),")。更多："]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:t,alt:""})}),"\n",(0,d.jsxs)(r.blockquote,{children:["\n",(0,d.jsxs)(r.p,{children:["你可以添加所有 ",(0,d.jsx)(r.code,{children:"Network"})," 面板里展示出来的信息。"]}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"要自定义显示哪些列，右键单击请求表标题上的任意位置。"}),"\n",(0,d.jsxs)(r.blockquote,{children:["\n",(0,d.jsxs)(r.p,{children:["请注意，",(0,d.jsx)(r.code,{children:"Response Headers"})," 是一个有更多选项的完整的子菜单，甚至可以定义你自己的选项。"]}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:h,alt:""})}),"\n",(0,d.jsxs)(r.h2,{id:"5-重新发送-xhr-的请求",children:["5. 重新发送 ",(0,d.jsx)(r.code,{children:"XHR"})," 的请求",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#5-重新发送-xhr-的请求",children:"#"})]}),"\n",(0,d.jsxs)(r.p,{children:["如何重新发送 ",(0,d.jsx)(r.code,{children:"XHR"})," 的请求？刷新页面？太老套了，试试这么做："]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:s,alt:""})}),"\n",(0,d.jsxs)(r.h2,{id:"6-xhrfetch-断点",children:["6. XHR/fetch 断点",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#6-xhrfetch-断点",children:"#"})]}),"\n",(0,d.jsxs)(r.p,{children:["在某一特定时刻，你想要对已发送的 ",(0,d.jsx)(r.code,{children:"“ajax”"})," 请求进行捕获怎么做呢？\n可以使用 ",(0,d.jsx)(r.code,{children:"XHR/fetch breakpoint"})," 。"]}),"\n",(0,d.jsxs)(r.blockquote,{children:["\n",(0,d.jsxs)(r.p,{children:["这些只能在 ",(0,d.jsx)(r.code,{children:"Source"})," 面板中设置。（我也同样希望可以直接在 ",(0,d.jsx)(r.code,{children:"Network"})," 面板中设置，但事实并非如此）"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:["你可以添加部分 ",(0,d.jsx)(r.code,{children:"URL"})," 作为触发器或监听任何请求："]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)("img",{src:n,alt:""})})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),e.components);return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(x,{...e})}):x(e)}let p=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20Chrome%20%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%2F13.Network%20%E7%AF%87%20-%20Network%20%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. 隐藏 network overview",id:"1-隐藏-network-overview",depth:2},{text:"2. Request initiator 显示了调用堆栈信息",id:"2-request-initiator-显示了调用堆栈信息",depth:2},{text:"3. 请求过滤",id:"3-请求过滤",depth:2},{text:"4. 自定义请求表",id:"4-自定义请求表",depth:2},{text:"5. 重新发送 `XHR` 的请求",id:"5-重新发送-xhr-的请求",depth:2},{text:"6. XHR/fetch 断点",id:"6-xhrfetch-断点",depth:2}],title:"13.Network 篇 - Network 的骚操作",headingTitle:"13.Network 篇 - Network 的骚操作",frontmatter:{}}}}]);