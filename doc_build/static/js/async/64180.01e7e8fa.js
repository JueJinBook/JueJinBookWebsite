"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["64180"],{61106:function(n,e,t){n.exports=t.p+"static/image/c483d5fc3f3d6794d49894796612db54.06d1d32b.gif"},212726:function(n,e,t){t.r(e),t.d(e,{default:()=>J});var o=t(552676),c=t(740453);let i=t.p+"static/image/4c1fcad61fd83fde24d4b809b5cdb083.4d40352f.gif",s=t.p+"static/image/b890042eab9117901c2f2cd64290d331.72ce7d4e.webp",a=t.p+"static/image/47a9e564a1b6704ddea837e051062744.7b35b8a4.gif",r=t.p+"static/image/39fa3362ab0ad66dd707f798c3dbcdda.eaa36707.webp",d=t.p+"static/image/4efc9b089b2051b7af451b16c73cd9f7.3688f16b.webp",p=t.p+"static/image/f23cae6cc2bcbca13d264f40bfd77c4c.38f2517a.gif",l=t.p+"static/image/43b992d529370968edf43b0a629f6faf.3e2e50d4.webp",m=t.p+"static/image/d143196c42756a11937e85008dc923a2.440a4454.webp",f=t.p+"static/image/57e058d1873902d8698772007c86b2dd.dc076ddc.webp",h=t.p+"static/image/764e7690e41080f61bba4482af1c470c.59ebf1d9.webp",b=t.p+"static/image/df5238c0bc7bab280be515f1fa2a540e.b5000389.webp",u=t.p+"static/image/240948b14df1a2e1cb284d652c9c8554.03740c5c.webp",x=t.p+"static/image/4ab8e60d1b579dc514a1c1de50627363.910346f6.webp",j=t.p+"static/image/3838204a30e9ff4ba90c3786e9108cf6.ad50a847.webp",g=t.p+"static/image/438f48873cdab0e25d898967e1d98043.80d80cd8.webp",C=t.p+"static/image/895f5699af046de5282499994622f4d2.cf2b29c7.gif",I=t.p+"static/image/2464b9d12004e2eeefa0962e19ba2048.a0787b1d.gif",v=t.p+"static/image/a6b04fcaca515ebbfe73649c94028930.d3feef21.webp",w=t.p+"static/image/e19ac654bc524bc26982ddeb5de80174.be1ee13f.webp",k=t.p+"static/image/10fadaed7d55ae214333a069e4ca7f19.07e533fc.gif",S=t.p+"static/image/cd9f0b53b7df0126b44e2d1a80c03a63.af8ee9ed.gif",E=t.p+"static/image/5aab8ad70db26ababe9fc1f558b2c2e7.0efd6d30.gif",M=t.p+"static/image/52ada156442f79e833a3eb037e8ebb5c.9ecfa5b3.webp",P=t.p+"static/image/95f99f9497140168bcf50d1396adb5b3.9d1d5575.webp",T=t.p+"static/image/181b2738e3df5a0fec4ac4dace3b2431.205e6532.gif",y=t.p+"static/image/dc2c726a4d27cc48fb4786879def78d1.c2e82ed6.gif",N=t.p+"static/image/e27e60fa6d6283ddc1faa5f2d9d85f46.6672b7eb.webp",B=t.p+"static/image/5f2c7b51bc8fffda06a23941cdf42943.5b42865f.gif",A=t.p+"static/image/4bed2fad717e5a8ffa10dcdca4413085.d0f0f1c9.webp",H=t.p+"static/image/9939980f9fb8a01922c06021dd973fa3.8d339d5e.webp",L=t.p+"static/image/c751349c33c6c950f99c856ac5b3bf71.dad0b5ce.webp",R=t.p+"static/image/0cd188f0f7607283a4cd0285dee43449.6801e2a4.webp",D=t.p+"static/image/b71fb3246a8361bfa73fe3dbee92d7ee.1e35c597.webp",_=t.p+"static/image/3cd2291b3cf3aa21cc0e89d5bc582d6d.f58a19e2.webp",z=t.p+"static/image/21fb7929216852a93f8b7a9c76da801c.7bd3cd01.webp",O=t.p+"static/image/6c3572e929107dabc668760e05ba3a21.6828119d.webp",W=t.p+"static/image/bcb8c8bd24b2695c51121dbc830a98f0.a49ecbbe.gif",q=t.p+"static/image/1e88eed781037114c403bcbb194eda43.6ec28b30.webp";var F=t(61106);let $=t.p+"static/image/3304fdd3b2944641b4b5ce8d49862c27.c17c1532.gif";function G(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,c.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"第70章低代码编辑器画布区click展示编辑框",children:["第70章—低代码编辑器：画布区click展示编辑框",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第70章低代码编辑器画布区click展示编辑框",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"\uFEFF上节实现了 hover 时展示高亮框和组件名的效果："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:$,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这节我们来实现 click 时展示编辑框，以及组件删除："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:F,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"hover 时记录了 hoverComponentId："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:q,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"click 时同样也要记录。"}),"\n",(0,o.jsx)(e.p,{children:"但是 hover 时不一样，click 选中的组件除了展示编辑框，还要在右侧属性区展示对应的组件属性："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:W,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"所以我们要把它记录到全局 store 里。"}),"\n",(0,o.jsx)(e.p,{children:"我们加一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:O,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:z,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"interface State {\n  components: Component[];\n  curComponentId?: number | null;\n  curComponent: Component | null;\n}\n\ninterface Action {\n  addComponent: (component: Component, parentId?: number) => void;\n  deleteComponent: (componentId: number) => void;\n  updateComponentProps: (componentId: number, props: any) => void;\n  setCurComponentId: (componentId: number | null) => void;\n}\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"curComponentId: null,\ncurComponent: null,\nsetCurComponentId: (componentId) =>\n  set((state) => ({\n    curComponentId: componentId,\n    curComponent: getComponentById(componentId, state.components),\n  })),\n"})}),"\n",(0,o.jsx)(e.p,{children:"同样，click 事件也是绑定在画布区根组件 EditArea 上的："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:_,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:D,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import React, { MouseEventHandler, useEffect, useState } from "react";\nimport { useComponentConfigStore } from "../../stores/component-config";\nimport { Component, useComponetsStore } from "../../stores/components"\nimport HoverMask from "../HoverMask";\nimport SelectedMask from "../SelectedMask";\n\nexport function EditArea() {\n    const { components, curComponentId, setCurComponentId} = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n\n    function renderComponents(components: Component[]): React.ReactNode {\n        return components.map((component: Component) => {\n            const config = componentConfig?.[component.name]\n\n            if (!config?.component) {\n                return null;\n            }\n            \n            return React.createElement(\n                config.component,\n                {\n                    key: component.id,\n                    id: component.id,\n                    name: component.name,\n                    ...config.defaultProps,\n                    ...component.props,\n                },\n                renderComponents(component.children || [])\n            )\n        })\n    }\n\n    const [hoverComponentId, setHoverComponentId] = useState<number>();\n\n    const handleMouseOver: MouseEventHandler = (e)  => {\n        const path = e.nativeEvent.composedPath();\n\n        for (let i = 0; i < path.length; i += 1) {\n            const ele = path[i] as HTMLElement;\n\n            const componentId = ele.dataset?.componentId;\n            if (componentId) {\n                setHoverComponentId(+componentId);\n                return;\n            }\n        }\n    }\n  \n    const handleClick: MouseEventHandler = (e) => {\n        const path = e.nativeEvent.composedPath();\n\n        for (let i = 0; i < path.length; i += 1) {\n            const ele = path[i] as HTMLElement;\n\n            const componentId = ele.dataset?.componentId;\n            if (componentId) {\n                setCurComponentId(+componentId);\n                return;\n            }\n        }\n    }\n\n    return <div className="h-[100%] edit-area" onMouseOver={handleMouseOver} onMouseLeave={() => {\n        setHoverComponentId(undefined);\n    }} onClick={handleClick}>\n        {renderComponents(components)}\n        {hoverComponentId && (\n            <HoverMask\n                portalWrapperClassName=\'portal-wrapper\'\n                containerClassName=\'edit-area\'\n                componentId={hoverComponentId}\n            />\n        )}\n        {curComponentId && (\n            <SelectedMask\n                portalWrapperClassName=\'portal-wrapper\'\n                containerClassName=\'edit-area\'\n                componentId={curComponentId}\n            />\n        )}\n        <div className="portal-wrapper"></div>\n    </div>\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"点击事件触发时，找到元素对应的 component id，设置为 curComponentId。"}),"\n",(0,o.jsx)(e.p,{children:"然后渲染 curComponentId 对应的 SelectedMask。"}),"\n",(0,o.jsx)(e.p,{children:"实现下这个 SelectedMask 组件："}),"\n",(0,o.jsx)(e.p,{children:"editor/components/SelectedMask/index.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import {\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport { getComponentById, useComponetsStore } from '../../stores/components';\nimport { Popconfirm, Space } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\n\ninterface SelectedMaskProps {\n  portalWrapperClassName: string\n  containerClassName: string\n  componentId: number;\n}\n\nfunction SelectedMask({ containerClassName, portalWrapperClassName, componentId }: SelectedMaskProps) {\n\n  const [position, setPosition] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    labelTop: 0,\n    labelLeft: 0,\n  });\n\n  const { components, curComponentId } = useComponetsStore();\n\n  useEffect(() => {\n    updatePosition();\n  }, [componentId]);\n\n  function updatePosition() {\n    if (!componentId) return;\n\n    const container = document.querySelector(`.${containerClassName}`);\n    if (!container) return;\n\n    const node = document.querySelector(`[data-component-id=\"${componentId}\"]`);\n    if (!node) return;\n\n    const { top, left, width, height } = node.getBoundingClientRect();\n    const { top: containerTop, left: containerLeft } = container.getBoundingClientRect();\n\n    let labelTop = top - containerTop + container.scrollTop;\n    let labelLeft = left - containerLeft + width;\n\n    if (labelTop <= 0) {\n      labelTop -= -20;\n    }\n  \n    setPosition({\n      top: top - containerTop + container.scrollTop,\n      left: left - containerLeft + container.scrollTop,\n      width,\n      height,\n      labelTop,\n      labelLeft,\n    });\n  }\n\n  const el = useMemo(() => {\n      return document.querySelector(`.${portalWrapperClassName}`)!\n  }, []);\n\n  const curComponent = useMemo(() => {\n    return getComponentById(componentId, components);\n  }, [componentId]);\n\n  function handleDelete() {\n\n  }\n\n  return createPortal((\n    <>\n      <div\n        style={{\n          position: \"absolute\",\n          left: position.left,\n          top: position.top,\n          backgroundColor: \"rgba(0, 0, 255, 0.1)\",\n          border: \"1px dashed blue\",\n          pointerEvents: \"none\",\n          width: position.width,\n          height: position.height,\n          zIndex: 12,\n          borderRadius: 4,\n          boxSizing: 'border-box',\n        }}\n      />\n      <div\n          style={{\n            position: \"absolute\",\n            left: position.labelLeft,\n            top: position.labelTop,\n            fontSize: \"14px\",\n            zIndex: 13,\n            display: (!position.width || position.width < 10) ? \"none\" : \"inline\",\n            transform: 'translate(-100%, -100%)',\n          }}\n        >\n          <Space>\n            <div\n              style={{\n                padding: '0 8px',\n                backgroundColor: 'blue',\n                borderRadius: 4,\n                color: '#fff',\n                cursor: \"pointer\",\n                whiteSpace: 'nowrap',\n              }}\n            >\n              {curComponent?.name}\n            </div>\n            {curComponentId !== 1 && (\n              <div style={{ padding: '0 8px', backgroundColor: 'blue' }}>\n                <Popconfirm\n                  title=\"确认删除？\"\n                  okText={'确认'}\n                  cancelText={'取消'}\n                  onConfirm={handleDelete}\n                >\n                  <DeleteOutlined style={{ color: '#fff' }}/>\n                </Popconfirm>\n              </div>\n            )}\n          </Space>\n        </div>\n    </>\n  ), el)\n}\n\nexport default SelectedMask;\n"})}),"\n",(0,o.jsx)(e.p,{children:"和 HoverMask 区别不大，主要这几点区别："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:R,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"从 store 取出 curComponentId 来。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:L,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"如果 id 不为 1，说明不是 Page 组件，就显示删除按钮。"}),"\n",(0,o.jsx)(e.p,{children:"点击的时候删除组件："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:H,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"再就是编辑框的颜色稍微深一点："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:A,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:B,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"点击时显示了编辑框，并且点击删除能删除组件。"}),"\n",(0,o.jsx)(e.p,{children:"只是会和 HoverMask 重合。"}),"\n",(0,o.jsx)(e.p,{children:"我们处理下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:N,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"hoverComponentId 和 curComponentId 一样的时候，就不显示高亮框。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:y,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样就好了。"}),"\n",(0,o.jsx)(e.p,{children:"amis 的编辑器还有这个功能："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:T,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"组件会展示它所有的父组件，点击就会选中该父组件。"}),"\n",(0,o.jsx)(e.p,{children:"我们也实现下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:P,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"每个组件都有 component.parentId，用来找父组件也很简单，不断向上找，放到一个数组里就行。"}),"\n",(0,o.jsx)(e.p,{children:"然后用 DropDown 组件展示下拉列表："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:M,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"点击 item 的时候切换 curComponentId。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import {\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport { getComponentById, useComponetsStore } from '../../stores/components';\nimport { Dropdown, Popconfirm, Space } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\n\ninterface SelectedMaskProps {\n  portalWrapperClassName: string\n  containerClassName: string\n  componentId: number;\n}\n\nfunction SelectedMask({ containerClassName, portalWrapperClassName, componentId }: SelectedMaskProps) {\n\n  const [position, setPosition] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    labelTop: 0,\n    labelLeft: 0,\n  });\n\n  const { components, curComponentId, curComponent, deleteComponent, setCurComponentId } = useComponetsStore();\n\n  useEffect(() => {\n    updatePosition();\n  }, [componentId]);\n\n  function updatePosition() {\n    if (!componentId) return;\n\n    const container = document.querySelector(`.${containerClassName}`);\n    if (!container) return;\n\n    const node = document.querySelector(`[data-component-id=\"${componentId}\"]`);\n    if (!node) return;\n\n    const { top, left, width, height } = node.getBoundingClientRect();\n    const { top: containerTop, left: containerLeft } = container.getBoundingClientRect();\n\n    let labelTop = top - containerTop + container.scrollTop;\n    let labelLeft = left - containerLeft + width;\n\n    if (labelTop <= 0) {\n      labelTop -= -20;\n    }\n  \n    setPosition({\n      top: top - containerTop + container.scrollTop,\n      left: left - containerLeft + container.scrollTop,\n      width,\n      height,\n      labelTop,\n      labelLeft,\n    });\n  }\n\n  const el = useMemo(() => {\n      return document.querySelector(`.${portalWrapperClassName}`)!\n  }, []);\n\n  const curSelectedComponent = useMemo(() => {\n    return getComponentById(componentId, components);\n  }, [componentId]);\n\n  function handleDelete() {\n    deleteComponent(curComponentId!);\n    setCurComponentId(null);\n  }\n\n  const parentComponents = useMemo(() => {\n    const parentComponents = [];\n    let component = curComponent;\n\n    while (component?.parentId) {\n      component = getComponentById(component.parentId, components)!;\n      parentComponents.push(component);\n    }\n\n    return parentComponents;\n\n  }, [curComponent]);\n\n  return createPortal((\n    <>\n      <div\n        style={{\n          position: \"absolute\",\n          left: position.left,\n          top: position.top,\n          backgroundColor: \"rgba(0, 0, 255, 0.1)\",\n          border: \"1px dashed blue\",\n          pointerEvents: \"none\",\n          width: position.width,\n          height: position.height,\n          zIndex: 12,\n          borderRadius: 4,\n          boxSizing: 'border-box',\n        }}\n      />\n      <div\n          style={{\n            position: \"absolute\",\n            left: position.labelLeft,\n            top: position.labelTop,\n            fontSize: \"14px\",\n            zIndex: 13,\n            display: (!position.width || position.width < 10) ? \"none\" : \"inline\",\n            transform: 'translate(-100%, -100%)',\n          }}\n        >\n          <Space>\n            <Dropdown\n              menu={{\n                items: parentComponents.map(item => ({\n                  key: item.id,\n                  label: item.name,\n                })),\n                onClick: ({ key }) => {\n                  setCurComponentId(+key);\n                }\n              }}\n              disabled={parentComponents.length === 0}\n            >\n              <div\n                style={{\n                  padding: '0 8px',\n                  backgroundColor: 'blue',\n                  borderRadius: 4,\n                  color: '#fff',\n                  cursor: \"pointer\",\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {curSelectedComponent?.name}\n              </div>\n            </Dropdown>\n            {curComponentId !== 1 && (\n              <div style={{ padding: '0 8px', backgroundColor: 'blue' }}>\n                <Popconfirm\n                  title=\"确认删除？\"\n                  okText={'确认'}\n                  cancelText={'取消'}\n                  onConfirm={handleDelete}\n                >\n                  <DeleteOutlined style={{ color: '#fff' }}/>\n                </Popconfirm>\n              </div>\n            )}\n          </Space>\n        </div>\n    </>\n  ), el)\n}\n\nexport default SelectedMask;\n"})}),"\n",(0,o.jsx)(e.p,{children:"试一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:E,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样，选中父组件的功能就完成了。"}),"\n",(0,o.jsx)(e.p,{children:"但现在有个问题："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:S,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"删除组件后会触发它父组件的 hover，但这时候高亮框的高度是没删除元素的高度，会多出一块。"}),"\n",(0,o.jsx)(e.p,{children:"还有，click 选中的组件再添加组件的时候编辑框高度不会变化："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:k,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这个问题也好解决，在 components 变化后调用下 updatePosition 就好了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:w,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:v,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"useEffect(() => {\n    updatePosition();\n}, [components]);\n"})}),"\n",(0,o.jsx)(e.p,{children:"SelectedMask 和 HoverMask 都处理下。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:I,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:C,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样就好了。"}),"\n",(0,o.jsx)(e.p,{children:"此外，amis 编辑器左边物料和选中时的编辑框都是展示的组件描述，而我们直接展示组件名："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:g,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:j,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样不大好，我们改一下："}),"\n",(0,o.jsx)(e.p,{children:"在 Component 类型加一下 desc："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:x,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"ComponentConfig 也加一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:u,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"addComponent 的时候从 config 取出组件的 desc："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:b,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"然后展示的时候展示 desc 就好了："}),"\n",(0,o.jsx)(e.p,{children:"左边的 MaterialItem 传入 desc："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:h,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"显示的文案改成 desc："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:f,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"HoverMask 和 SelectedMask 也显示 desc："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:m,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:l,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:p,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,o.jsx)(e.p,{children:"然后左边不需要展示页面组件，过滤下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:d,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:r,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"还有，使用者是可能调整窗口大小的，这时候编辑框没有重新计算位置："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:a,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"做下处理："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:s,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"useEffect(() => {\n    const resizeHandler = () => {\n      updatePosition();\n    }\n    window.addEventListener('resize', resizeHandler)\n    return () => {\n      window.removeEventListener('resize', resizeHandler)\n    }\n}, []);\n"})}),"\n",(0,o.jsx)(e.p,{children:"这样就好了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:i,alt:""})}),"\n",(0,o.jsxs)(e.p,{children:["案例代码上传了",(0,o.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"git reset --hard f8f0cd06dc5c08f6df2f5dcb5d5327c4bb11d94b\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"总结",children:["总结",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"这节我们实现了点击时的编辑框。"}),"\n",(0,o.jsx)(e.p,{children:"首先在 components 的 store 里保存了 curComponentId。"}),"\n",(0,o.jsx)(e.p,{children:"然后在 EditArea 添加 click 事件，点击的时候拿到 data-component-id 设置到 curComponentId。"}),"\n",(0,o.jsx)(e.p,{children:"根据 curComponentId 渲染 SelectedMask。"}),"\n",(0,o.jsx)(e.p,{children:"SelctedMask 展示删除按钮，可以调用 deleteComponent 删除组件，展示父组件的列表，可以切换选中父组件。"}),"\n",(0,o.jsx)(e.p,{children:"渲染 SelectedMask 的时候要隐藏掉 HoverMask。"}),"\n",(0,o.jsx)(e.p,{children:"还要做 components 变化、window resize 的时候的 udpatePosition 处理。"}),"\n",(0,o.jsx)(e.p,{children:"此外，我们还把展示的 component.name 换成了 component.desc"}),"\n",(0,o.jsx)(e.p,{children:"这样，画布区的交互就完成了。"})]})}function Q(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(G,{...n})}):G(n)}let J=Q;Q.__RSPRESS_PAGE_META={},Q.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC70%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E7%94%BB%E5%B8%83%E5%8C%BAclick%E5%B1%95%E7%A4%BA%E7%BC%96%E8%BE%91%E6%A1%86.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第70章—低代码编辑器：画布区click展示编辑框",headingTitle:"第70章—低代码编辑器：画布区click展示编辑框",frontmatter:{}}}}]);