"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["74295"],{777819:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var i=r(552676),s=r(740453);function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",img:"img",h2:"h2",pre:"pre",code:"code",ol:"ol",li:"li"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"2应用-1千帆竞发--分布式锁",children:["2应用 1：千帆竞发 —— 分布式锁",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2应用-1千帆竞发--分布式锁",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"分布式应用进行逻辑处理时经常会遇到并发问题。"}),"\n",(0,i.jsxs)(n.p,{children:["比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓",(0,i.jsx)(n.strong,{children:"原子操作"}),"是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?w=1156&h=482&f=png&s=48904",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。"}),"\n",(0,i.jsxs)(n.h2,{id:"分布式锁",children:["分布式锁",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分布式锁",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。"}),"\n",(0,i.jsx)(n.p,{children:"占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占，\n用完了，再调用 del 指令释放茅坑。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// 这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解\n> setnx lock:codehole true\nOK\n... do something critical ...\n> del lock:codehole\n(integer) 1\n"})}),"\n",(0,i.jsx)(n.p,{children:"但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。"}),"\n",(0,i.jsx)(n.p,{children:"于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"> setnx lock:codehole true\nOK\n> expire lock:codehole 5\n... do something critical ...\n> del lock:codehole\n(integer) 1\n"})}),"\n",(0,i.jsx)(n.p,{children:"但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。"}),"\n",(0,i.jsx)(n.p,{children:"这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。"}),"\n",(0,i.jsx)(n.p,{children:"为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/2/16459b393843f7ae?w=512&h=200&f=gif&s=218111",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"> set lock:codehole true ex 5 nx\nOK\n... do something critical ...\n> del lock:codehole\n"})}),"\n",(0,i.jsx)(n.p,{children:"上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。"}),"\n",(0,i.jsxs)(n.h2,{id:"超时问题",children:["超时问题",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#超时问题",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。"}),"\n",(0,i.jsx)(n.p,{children:"为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"tag = random.nextint()  # 随机数\nif redis.set(key, tag, nx=True, ex=5):\n    do_something()\n    redis.delifequals(key, tag)  # 假想的 delifequals 指令\n"})}),"\n",(0,i.jsxs)(n.p,{children:["有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。\n但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于",(0,i.jsx)(n.code,{children:"delifequals"}),"这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'# delifequals\nif redis.call("get",KEYS[1]) == ARGV[1] then\n    return redis.call("del",KEYS[1])\nelse\n    return 0\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:"但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。"}),"\n",(0,i.jsxs)(n.h2,{id:"可重入性",children:["可重入性",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可重入性",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'# -*- coding: utf-8\nimport redis\nimport threading\n\n\nlocks = threading.local()\nlocks.redis = {}\n\ndef key_for(user_id):\n    return "account_{}".format(user_id)\n\ndef _lock(client, key):\n    return bool(client.set(key, True, nx=True, ex=5))\n\ndef _unlock(client, key):\n    client.delete(key)\n\ndef lock(client, user_id):\n    key = key_for(user_id)\n    if key in locks.redis:\n        locks.redis[key] += 1\n        return True\n    ok = _lock(client, key)\n    if not ok:\n        return False\n    locks.redis[key] = 1\n    return True\n\ndef unlock(client, user_id):\n    key = key_for(user_id)\n    if key in locks.redis:\n        locks.redis[key] -= 1\n        if locks.redis[key] <= 0:\n            del locks.redis[key]\n            self._unlock(key)\n        return True\n    return False\n\nclient = redis.StrictRedis()\nprint "lock", lock(client, "codehole")\nprint "lock", lock(client, "codehole")\nprint "unlock", unlock(client, "codehole")\nprint "unlock", unlock(client, "codehole")\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class RedisWithReentrantLock {\n\n  private ThreadLocal<Map<String, Integer>> lockers = new ThreadLocal<>();\n\n  private Jedis jedis;\n\n  public RedisWithReentrantLock(Jedis jedis) {\n    this.jedis = jedis;\n  }\n\n  private boolean _lock(String key) {\n    return jedis.set(key, "", "nx", "ex", 5L) != null;\n  }\n\n  private void _unlock(String key) {\n    jedis.del(key);\n  }\n\n  private Map<String, Integer> currentLockers() {\n    Map<String, Integer> refs = lockers.get();\n    if (refs != null) {\n      return refs;\n    }\n    lockers.set(new HashMap<>());\n    return lockers.get();\n  }\n\n  public boolean lock(String key) {\n    Map<String, Integer> refs = currentLockers();\n    Integer refCnt = refs.get(key);\n    if (refCnt != null) {\n      refs.put(key, refCnt + 1);\n      return true;\n    }\n    boolean ok = this._lock(key);\n    if (!ok) {\n      return false;\n    }\n    refs.put(key, 1);\n    return true;\n  }\n\n  public boolean unlock(String key) {\n    Map<String, Integer> refs = currentLockers();\n    Integer refCnt = refs.get(key);\n    if (refCnt == null) {\n      return false;\n    }\n    refCnt -= 1;\n    if (refCnt > 0) {\n      refs.put(key, refCnt);\n    } else {\n      refs.remove(key);\n      this._unlock(key);\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    Jedis jedis = new Jedis();\n    RedisWithReentrantLock redis = new RedisWithReentrantLock(jedis);\n    System.out.println(redis.lock("codehole"));\n    System.out.println(redis.lock("codehole"));\n    System.out.println(redis.unlock("codehole"));\n    System.out.println(redis.unlock("codehole"));\n  }\n\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。"}),"\n",(0,i.jsxs)(n.p,{children:["以上还不是分布式锁的全部，在小册的拓展篇",(0,i.jsx)(n.a,{href:"https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1",target:"_blank",rel:"noopener noreferrer",children:"《拾遗漏补 —— 再谈分布式锁》"}),"，我们还会继续对分布式锁做进一步的深入理解。"]}),"\n",(0,i.jsxs)(n.h2,{id:"思考题",children:["思考题",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？"}),"\n",(0,i.jsx)(n.li,{children:"如果你还没用过分布式锁，想想自己的项目中是否可以用上？"}),"\n"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}let c=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["Redis%20%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F2%E5%BA%94%E7%94%A8%201%EF%BC%9A%E5%8D%83%E5%B8%86%E7%AB%9E%E5%8F%91%20%E2%80%94%E2%80%94%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.md"]={toc:[{text:"分布式锁",id:"分布式锁",depth:2},{text:"超时问题",id:"超时问题",depth:2},{text:"可重入性",id:"可重入性",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"2应用 1：千帆竞发 —— 分布式锁",headingTitle:"2应用 1：千帆竞发 —— 分布式锁",frontmatter:{}}}}]);