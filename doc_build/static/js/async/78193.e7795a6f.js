"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["78193"],{607777:function(e,a,n){n.r(a),n.d(a,{default:()=>c});var l=n(552676),r=n(740453);function s(e){let a=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",h4:"h4",code:"code",pre:"pre",img:"img"},(0,r.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(a.h1,{id:"59表单的提交与渲染",children:["59.表单的提交与渲染",(0,l.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#59表单的提交与渲染",children:"#"})]}),"\n",(0,l.jsxs)(a.h2,{id:"93-表单的提交与渲染",children:["9.3 表单的提交与渲染",(0,l.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#93-表单的提交与渲染",children:"#"})]}),"\n",(0,l.jsx)(a.p,{children:"几乎所有的应用都有用户的资料管理这一功能，它允许用户可以随时修改自己的资料，这个功能就包含表单数据是如何提交到数据库，又是如何从数据库获取数据并渲染到小程序端的完整过程。"}),"\n",(0,l.jsxs)(a.h3,{id:"931-表单数据的提交",children:["9.3.1 表单数据的提交",(0,l.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#931-表单数据的提交",children:"#"})]}),"\n",(0,l.jsxs)(a.h4,{id:"1获取表单数据",children:["1、获取表单数据",(0,l.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#1获取表单数据",children:"#"})]}),"\n",(0,l.jsxs)(a.p,{children:["要将表单里面的数据存储到数据库，首先我们需要了解不同的表单组件在用户提交表单后返回的数据结构，这些数据是怎么和一个个表单组件联系的。在前面我们了解到，用户填写在表单的数据都会在bindsubmit绑定的事件处理函数formSubmit的",(0,l.jsx)(a.code,{children:"e.detail.value"}),"里，而每个组件的数据都可以通过该组件的name来获取。"]}),"\n",(0,l.jsx)(a.p,{children:"使用开发者工具新建一个user页面，然后再user.wxml里输入以下代码，这里我们将一些常用的表单组件都罗列了出来："}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-xml",children:'<form bindsubmit="formSubmit">\n  <view>姓名</view>\n  <input name="name" placeholder="请输入你的姓名" />\n  <view>您的个人简介：</view>\n  <textarea name="desc" placeholder="请简短介绍一下你自己" auto-height auto-focus />\n  <view>联系方式</view>\n    <input name="email" placeholder="请输入你的邮箱" />\n    <view>婚姻状况</view>\n    <radio-group name="marriage">\n      <label><radio value="1" />单身</label>\n      <label><radio value="2" />未婚</label>\n      <label><radio value="3" />已婚</label>\n    </radio-group>\n\n    <picker name="birth" mode="date" start="1970-01-01" end="2005-01-01" bindchange="birthChange" >\n      <view>你的生日：{{userData.birth}}</view>\n    </picker>\n\n    <picker name="region" mode="region" bindchange="regionChange" value="{{userData.region}}" custom-item="{{customItem}}">\n      <view class="picker">\n        当前选择：{{userData.region[0]}}，{{userData.region[1]}}，{{userData.region[2]}}\n      </view>\n    </picker>\n\n    <view>训练营学习进度</view>\n    <slider name="process" show-value></slider>\n    <view>请勾选你喜欢的话题：</view>\n    <checkbox-group name="talks">\n      <label><checkbox value="talk1"/>前端</label>\n      <label><checkbox value="talk2"/>后端</label>\n      <label><checkbox value="talk3"/>开发工具</label>\n      <label><checkbox value="talk4"/>小程序</label>\n      <label><checkbox value="talk5"/>iOS</label>\n      <label><checkbox value="talk6"/>安卓</label>\n    </checkbox-group>\n  <view>是否接受新消息通知：</view>\n  <switch name="message"/>\n  <button form-type="submit">提交</button>\n</form>\n'})}),"\n",(0,l.jsx)(a.p,{children:"然后在user.js里输入formSubmit事件处理函数，以及为了让生日和地址picker选择的日期和地址能够实时渲染在前端，用到了birthChange、regionChange事件处理函数，下面需要重点关注的是当我们填写表单之后，表单返回的事件对象："}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-javascript",children:'const db = wx.cloud.database()\nconst _ = db.command\nPage({\n  data:{\n    userData:{\n      birth:"1995-01-01",\n      region:["广东省","深圳市","福田区"],\n    }\n  },\n  async onLoad(){\n  },\n\n  async formSubmit(e) {\n    console.log(\'表单携带的事件对象\',e)\n    console.log(\'表单携带的数据为：\', e.detail.value)\n  },\n\n  birthChange(e){\n    console.log("生日选择",e.detail.value)\n    this.setData({\n      "userData.birth":e.detail.value\n    })\n\n  },\n\n  regionChange(e){\n    console.log("地址选择",e.detail.value)\n    this.setData({\n      "userData.region":e.detail.value\n    })\n  }\n})\n'})}),"\n",(0,l.jsxs)(a.p,{children:["填完数据后，点击“提交”的button，就能在console控制台看到如下日志，可以看到表单所收集的数据都会在事件处理函数的e.detail.value对象里，值的属性key与表单组件的name是一一对应的。\n",(0,l.jsx)(a.img,{src:"https://i.hackweek.org/img//9/WX20201005-164811@2x.png",alt:"获取表单数据"})]}),"\n",(0,l.jsxs)(a.h4,{id:"2记录的创建",children:["2、记录的创建",(0,l.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#2记录的创建",children:"#"})]}),"\n",(0,l.jsx)(a.p,{children:"用户填写的表单数据要存储到数据库之前，我们需要先梳理清楚数据库的设计。比如我们可以使用集合user来存储所有用户的信息，每个用户都会在user集合里有且仅有一个记录，用户填写的表单数据都会存储到记录里："}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-javascript",children:'{\n  "_id":"e656fa635f74524d00d9f6a45c1c7644",\n  "_openid":"oUL-m5FuRm...sn8",\n  "name":"李东bbsky",\n  "desc":"致力于互联网技术技能的普及",\n  "email":"344169902@qq.com",\n  "marriage":"1",\n  "process":97.0,\n  "birth": "2000-01-01",\n  "region":["广东省", "深圳市", "南山区"],\n  "talks":["talk2","talk3","talk4"],\n  "message":true,\n}\n'})}),"\n",(0,l.jsx)(a.p,{children:"打开云开发控制台的数据库标签，新建一个集合user并自定义权限（使用安全规则）为“仅创建者可读写”。而记录的创建可以在用户登录小程序时先判断该用户是否在数据库有记录，如果没有就创建，我们可以在user.js的onLoad生命周期函数里输入如下代码："}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-javascript",children:"async onLoad(){\n  const that = this\n  const data = (await db.collection('user').where({\n    _openid:'{openid}'\n  }).get()).data\n\n  console.log(\"获取到的用户信息\",data)\n  console.log(data.length)\n  if(data.length === 0){ //如果没有用户就创建记录\n    db.collection('user').add({\n      data:{\n        //一些数据可以从getUserInfo里获取并新增到数据库\n      }\n    })\n  }\n\n  const userData = data[0]\n  console.log(userData)\n  that.setData({ //将获取的用户数据使用setData赋值给data\n    userData:Object.assign(that.data.userData,userData) //将data里原有的userData对象和从数据库里取出来的userData对象合并，避免数据库里的userData为空时，setData会清空data里的userData值\n  })\n  console.log(\"userData的数据\",this.data.userData)  \n},\n"})}),"\n",(0,l.jsxs)(a.h4,{id:"3用户数据的提交",children:["3、用户数据的提交",(0,l.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#3用户数据的提交",children:"#"})]}),"\n",(0,l.jsx)(a.p,{children:"当用户提交表单的数据时，我们可以直接使用数据库update请求将e.detail.value里的整个对象更新到用户的记录里，不需要做额外的处理，这时候每个表单组件的name就转化成了数据库记录里的字段名："}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-javascript",children:"async formSubmit(e) {\n  console.log('表单携带的数据为：', e.detail.value)\n  const result = await db.collection('user')\n  .where({\n    _openid:'{openid}'  //获取用户在集合里的记录，只会有一条记录\n  })\n  .update({\n    data:e.detail.value\n  })\n  console.log(result)\n},\n"})}),"\n",(0,l.jsxs)(a.h3,{id:"932-表单的渲染",children:["9.3.2 表单的渲染",(0,l.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#932-表单的渲染",children:"#"})]}),"\n",(0,l.jsxs)(a.p,{children:["从前面我们可以了解到，要将数据渲染到表单，可以通过设置value的值来实现，而用户在每个表单组件提交的数据都可以通过name来获取，这样在渲染时，我们就可以使用",(0,l.jsx)(a.code,{children:"{{userData.组件的name}}"}),"来渲染每个组件的值了。"]}),"\n",(0,l.jsxs)(a.h4,{id:"1表单数据的渲染",children:["1、表单数据的渲染",(0,l.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#1表单数据的渲染",children:"#"})]}),"\n",(0,l.jsxs)(a.p,{children:["在前面我们已经将用户在表单填写的数据更新到了数据库，并且将数据库里的表单数据请求之后赋值给了data里的userData，在form.wxml使用",(0,l.jsx)(a.code,{children:"{{userData.组件的name}}"}),"就能将数据给渲染出来了，代码如下:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-xml",children:'<input name="name" placeholder="请输入你的姓名" value="{{userData.name}}" />\n<textarea name="desc" placeholder="请简短介绍一下你自己" value="{{userData.desc}}" auto-height auto-focus />\n<input name="email" placeholder="请输入你的邮箱" value="{{userData.email}}"/>\n<slider name="process" show-value value="{{userData.process}}"></slider>\n<switch name="message" checked="{{userData.message}}" />\n'})}),"\n",(0,l.jsx)(a.p,{children:"其中switch没有value属性，填写checked属性即可；而picker组件的数据渲染我们用的是picker绑定的事件处理函数，通过setData的方式来渲染的，picker的value表示是滚动表单选中的时间或地址等。"}),"\n",(0,l.jsxs)(a.h4,{id:"2单选和多选的渲染",children:["2、单选和多选的渲染",(0,l.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#2单选和多选的渲染",children:"#"})]}),"\n",(0,l.jsxs)(a.p,{children:["单选或多选组件的选择状态都是通过checked这个属性值的true或false来实现的，在前面用户提交的单选的数据结果为radio-group的name和选择radio的value构成的键值对，比如",(0,l.jsx)(a.code,{children:"marriage:2"}),"，表示选择的是第二项，这样我们就能通过比较来判断用户是否选择了这个选项："]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-javascript",children:'<radio-group name="marriage">\n  <label><radio value="1" checked="{{userData.marriage==1}}" />单身</label>\n  <label><radio value="2" checked="{{userData.marriage==2}}" />未婚</label>\n  <label><radio value="3" checked="{{userData.marriage==3}}" />已婚</label>\n</radio-group>\n'})}),"\n",(0,l.jsxs)(a.p,{children:["当用户勾选了多选的其中几个选项时，所提交的数据结果为checkbox-group的name和选项的数组构成的键值对，比如",(0,l.jsx)(a.code,{children:'talks:["talk5","talk4","talk6"]'}),"表示用户先勾选的第5项、再勾选了talk4，最后勾选了talk6，要把数据给渲染出来可以使用wxs脚本："]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-xml",children:'<wxs module="check">\nvar getBoolean = function(array,value) {\n  if(array.indexOf(value) === -1){\n    return false\n  }else {\n    return true\n  }\n}\nmodule.exports.getBoolean = getBoolean\n</wxs>\n\n<checkbox-group name="talks" >\n  <label><checkbox value="talk1" checked="{{check.getBoolean(userData.talks,\'talk1\')}}" />前端</label>\n  <label><checkbox value="talk2" checked="{{check.getBoolean(userData.talks,\'talk2\')}}" />后端</label>\n  <label><checkbox value="talk3" checked="{{check.getBoolean(userData.talks,\'talk3\')}}" />开发工具</label>\n  <label><checkbox value="talk4" checked="{{check.getBoolean(userData.talks,\'talk4\')}}" />小程序</label>\n  <label><checkbox value="talk5" checked="{{check.getBoolean(userData.talks,\'talk5\')}}" />iOS</label>\n  <label><checkbox value="talk6" checked="{{check.getBoolean(userData.talks,\'talk6\')}}" />安卓</label>\n</checkbox-group>\n'})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:a}=Object.assign({},(0,r.ah)(),e.components);return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(s,{...e})}):s(e)}let c=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F59.%E8%A1%A8%E5%8D%95%E7%9A%84%E6%8F%90%E4%BA%A4%E4%B8%8E%E6%B8%B2%E6%9F%93.md"]={toc:[{text:"9.3 表单的提交与渲染",id:"93-表单的提交与渲染",depth:2},{text:"9.3.1 表单数据的提交",id:"931-表单数据的提交",depth:3},{text:"1、获取表单数据",id:"1获取表单数据",depth:4},{text:"2、记录的创建",id:"2记录的创建",depth:4},{text:"3、用户数据的提交",id:"3用户数据的提交",depth:4},{text:"9.3.2 表单的渲染",id:"932-表单的渲染",depth:3},{text:"1、表单数据的渲染",id:"1表单数据的渲染",depth:4},{text:"2、单选和多选的渲染",id:"2单选和多选的渲染",depth:4}],title:"59.表单的提交与渲染",headingTitle:"59.表单的提交与渲染",frontmatter:{}}}}]);