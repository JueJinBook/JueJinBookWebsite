"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["81652"],{767196:function(n,e,r){r.r(e),r.d(e,{default:()=>d});var t=r(552676),o=r(740453);let a=r.p+"static/image/b05fadf4104ba4dc791e12554b2554a1.27ac13b7.webp",s=r.p+"static/image/6cb8490ef4b3641860c17225840d9af9.71546fc5.webp",i=r.p+"static/image/e61b272c43bc468914315bbb274c0881.5a65d507.webp",l=r.p+"static/image/82746eaaed1609aa30948270039e56ca.131d0fa8.webp";function p(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",img:"img",pre:"pre",code:"code"},(0,o.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"22服务端实战物料服务开发",children:["22.服务端实战：物料服务开发",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#22服务端实战物料服务开发",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"本章开始将进入物料服务端的开发章节，很多内容都会稍微有点枯燥且会有很多代码，我会按照之前的物料设计一步步来展示对应的代码编写。"}),"\n",(0,t.jsxs)(e.p,{children:["进过之前的锻炼，目前应该已经对 ",(0,t.jsx)(e.strong,{children:"NestJS"})," 开发代码比较熟练了，常规的 ",(0,t.jsx)(e.strong,{children:"CURD"})," 理论山来说应该非常熟悉，所以一些常规的用法本章也不会继续讲解了，可以看看基础篇以及数据库实操回顾一下。"]}),"\n",(0,t.jsxs)(e.h2,{id:"group",children:["Group",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#group",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["因为这是一份通用性的物料系统，所以设计会较为复杂一些，再团队规模稍大的团队，一般都会根据不同的业务属性来来区分不同的物料使用，所以我们首先需要来开发 ",(0,t.jsx)(e.strong,{children:"Group"})," 模块。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,t.jsxs)(e.p,{children:["如上图所示，",(0,t.jsx)(e.strong,{children:"Group"})," 由 ",(0,t.jsx)(e.strong,{children:"3"})," 个子模块组成，分别是代码模板（",(0,t.jsx)(e.strong,{children:"code"}),"）、虚拟物料（",(0,t.jsx)(e.strong,{children:"monorepo"}),"）以及实体物料组成（",(0,t.jsx)(e.strong,{children:"multrerpo"}),"），由于每个模块的设计不同所以底层分为 ",(0,t.jsx)(e.strong,{children:"3"})," 种不同的表结构，但提供统一的 ",(0,t.jsx)(e.strong,{children:"controller"})," 给前端使用。"]}),"\n",(0,t.jsxs)(e.p,{children:["当然你依然可以设计一张通用性的表 ",(0,t.jsx)(e.strong,{children:"Group"})," 来存储分类的数据，这个依看个人的编码风格与习惯，并非一定是最好的设计。"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"CodeGroup"})," 代码类型表设计"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"import {\n  Entity,\n  Column,\n  CreateDateColumn,\n  ObjectIdColumn,\n  ObjectId,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class CodeGroup {\n  @ObjectIdColumn()\n  id: ObjectId;\n\n  @Column({ default: null })\n  name: string;\n\n  @Column({ default: null })\n  desc: string;\n\n  @Column()\n  creatorName: string;\n\n  @Column()\n  creatorId: number;\n\n  @CreateDateColumn()\n  createDate: string;\n\n  @UpdateDateColumn()\n  updateDate: string;\n\n  @Column()\n  status: number;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"MultrepoGroup"})," 多仓表设计"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"import {\n  Entity,\n  Column,\n  CreateDateColumn,\n  ObjectIdColumn,\n  ObjectId,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MultrepoGroup {\n  @ObjectIdColumn()\n  id: ObjectId;\n\n  @Column({ default: null })\n  name: string;\n\n  @Column({ default: null })\n  desc: string;\n\n  @Column()\n  creatorName: string;\n\n  @Column()\n  creatorId: number;\n\n  @CreateDateColumn()\n  createDate: string;\n\n  @UpdateDateColumn()\n  updateDate: string;\n\n  @Column()\n  status: number;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"MonorepoGroup"})," 单仓类型表设计"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-import",meta:"{",children:"  Entity,\n  Column,\n  CreateDateColumn,\n  ObjectIdColumn,\n  ObjectId,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MonorepoGroup {\n  @ObjectIdColumn()\n  id: ObjectId;\n\n  @Column({ default: null })\n  name: string;\n\n  @Column()\n  projectId: number;\n\n  @Column({ default: null })\n  desc: string;\n\n  @Column()\n  devVersion: string;\n\n  @Column()\n  testVersion: string;\n\n  @Column()\n  fixVersion: string;\n\n  @Column()\n  releaseVersion: string;\n\n  @Column()\n  alphaVersion: number;\n\n  @Column()\n  betaVersion: number;\n\n  @Column()\n  gammaVersion: number;\n\n  @Column()\n  currentVersion: string;\n\n  @Column()\n  lastVersion: string;\n\n  @CreateDateColumn()\n  createDate: string;\n\n  @UpdateDateColumn()\n  updateDate: string;\n\n  @UpdateDateColumn()\n  updateUser: string;\n\n  @Column()\n  creatorName: string;\n\n  @Column()\n  creatorId: number;\n\n  @Column()\n  status: number;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"在之前的物料设计中有提过为何如此设计，但由于小册的跨度非常长，所以在这里重新提一下物料系统的设计概念。"}),"\n",(0,t.jsxs)(e.p,{children:["首先考虑接入物料系统中的代码仓库管理模式采用\xa0",(0,t.jsx)(e.strong,{children:"monorepo"}),"\xa0还是\xa0",(0,t.jsx)(e.strong,{children:"multirepo"}),"，这两种管理模式也是各有千秋，没有绝对的压倒性优势。"]}),"\n",(0,t.jsxs)(e.p,{children:["常规的物料系统一般都是采用\xa0",(0,t.jsx)(e.strong,{children:"multirepo"}),"\xa0管理产物，这样方便数据管理产物的构建与版本。对于",(0,t.jsx)(e.strong,{children:"业务组件库"}),"这种本身就有领域壁垒的类型产物，以\xa0",(0,t.jsx)(e.strong,{children:"multirepo"}),"\xa0的模式来管理非常方便，也能够让大部分的开发所接受。"]}),"\n",(0,t.jsxs)(e.p,{children:["如果采用\xa0",(0,t.jsx)(e.strong,{children:"multirepo"}),"\xa0来管理",(0,t.jsx)(e.strong,{children:"基础组件库"}),"，对开发来说就非常难受。因为基础组件库本身有不少的逻辑与基础能力可以复用，但\xa0",(0,t.jsx)(e.strong,{children:"multirepo"}),"\xa0模式会把它拆得比较零碎，所以对于基础组件库常见的管理模式是\xa0",(0,t.jsx)(e.strong,{children:"monorepo"}),"。"]}),"\n",(0,t.jsxs)(e.p,{children:["所以 ",(0,t.jsx)(e.strong,{children:"multirepo"}),"\xa0的管理模式在物料系统中可以有唯一的映射，每一次的项目构建的产物结果都具备唯一性，但是\xa0",(0,t.jsx)(e.strong,{children:"monorepo"}),"\xa0的构建产物不具备唯一性，每次的构建产物结果可能存在多个。"]}),"\n",(0,t.jsxs)(e.p,{children:["为了解决这个问题，在我们物料系统中，引入",(0,t.jsx)(e.strong,{children:"虚拟物料的概念"}),"，也就是\xa0",(0,t.jsx)(e.strong,{children:"monorepo"}),"\xa0模式管理的工程，可以手动在系统中申明，在构建环境不再关注构建产物的具体结果，根据构建的版本统一升级所有虚拟物料的版本即可。"]}),"\n",(0,t.jsxs)(e.p,{children:["可以看出 ",(0,t.jsx)(e.strong,{children:"code"})," 与 ",(0,t.jsx)(e.strong,{children:"multrepo"})," 的表结构基本一致，因为这两种类型所需要的额外数据可以分散在物料配置的子表里面，而 ",(0,t.jsx)(e.strong,{children:"monorepo"})," 则需要记录更多的仓库信息。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"import { Controller, Post, Get, Body } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { PayloadUser } from '@app/common';\nimport { MonorepoGroupService } from './monorepo/monorepoGroup.service';\nimport { MultrepoGroupService } from './multrepo/multrepoGroup.service';\nimport { TaskService } from '../task/task.service';\nimport { addGroupDto, getGroupDto } from './multrepo/multrepoGroup.dto';\nimport { addMonorepoGroupDto } from './monorepo/monorepoGroup.dto';\nimport { PublishStatus } from '../task/task.mongo.entity';\nimport {\n  ProcessNodes,\n  PublishDto,\n  versionMap,\n  versionTypeMap,\n} from '../material/physical/physical.dto';\nimport { CodeGroupService } from './code/code.service';\n\n@ApiTags('物料库配置')\n@Controller('group')\nexport class GroupController {\n  constructor(\n    private monorepoGroupService: MonorepoGroupService,\n    private multrepoGroupService: MultrepoGroupService,\n    private codeGroupService: CodeGroupService,\n    private taskService: TaskService,\n  ) { }\n\n  @Post('save/multrepo')\n  SaveMultrepo(@Body() params: addGroupDto, @PayloadUser() user: Payload) {\n    return this.multrepoGroupService.save({\n      ...params,\n      creatorName: user.username,\n      creatorId: user.userId,\n    });\n  }\n\n  @Post('save/code')\n  saveCode(@Body() params: addGroupDto, @PayloadUser() user: Payload) {\n    return this.codeGroupService.save({\n      ...params,\n      creatorName: user.username,\n      creatorId: user.userId,\n    });\n  }\n\n  @Post('save/monorepo')\n  async saveMonorepo(\n    @Body() params: addMonorepoGroupDto,\n    @PayloadUser() user: Payload,\n  ) {\n    return this.monorepoGroupService.save({\n      ...params,\n      creatorName: user.username,\n      creatorId: user.userId,\n    });\n  }\n\n  @Post('publish')\n  async publish(@Body() publishDto: PublishDto, @PayloadUser() user: Payload) {\n    const { id, branch, version, environment, desc } = publishDto;\n\n    const material = await this.monorepoGroupService.findOne(id);\n\n    let deployVersion = version;\n    let deployNum = 1;\n\n    if (environment !== ProcessNodes.production) {\n      if (\n        version !== material.currentVersion ||\n        !material[versionMap[environment]]\n      ) {\n        deployVersion = `${deployVersion}-${versionTypeMap[environment]}.1`;\n      } else {\n        deployVersion = `${deployVersion}-${versionTypeMap[environment]}.${material[versionMap[environment]] + 1\n          }`;\n        deployNum = material[versionMap[environment]] + 1;\n      }\n    }\n\n    const task = await this.taskService.save({\n      branch,\n      groupId: String(material.id),\n      status: PublishStatus.unpublished,\n      env: environment,\n      creatorName: user.name,\n      creatorId: user.userId,\n      desc,\n      deployNum,\n      deployVersion,\n      version,\n      currentVersion: material.currentVersion,\n    });\n\n    return task;\n  }\n\n  @Post('getList')\n  async getList() {\n    const multrepo = await this.multrepoGroupService.getListByParams({});\n    const monorepo = await this.monorepoGroupService.getListByParams({});\n    return [...multrepo, ...monorepo];\n  }\n\n  @Post('getMonorepoDetail')\n  async getMonorepoGroupDetail(@Body() params: getGroupDto) {\n    const monorepo = await this.monorepoGroupService.findOne(params.id);\n    return {\n      ...monorepo,\n    };\n  }\n\n  @Post('del')\n  del(@Body() params: getGroupDto) {\n    return this.multrepoGroupService.del(params.id);\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["其中需要注意的是 ",(0,t.jsx)(e.strong,{children:"publish"})," 这个方法，这里的主要是虚拟物料调用，为了少查询数据而放在这，但实际上放在物料表中更为合理。"]}),"\n",(0,t.jsxs)(e.h2,{id:"material",children:["material",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#material",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"物料表存储的是具体的物料信息，根据之前的设计又分为虚拟物料表以及实体物料表。"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"MaterialConfig"})," 主要保留物料的版本信息，每个版本的功能都是类似，所以可以抽出来作为具体的表。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"import { Entity, Column, ObjectIdColumn, ObjectId } from 'typeorm';\nimport { ProcessNodes } from '../physical/physical.dto';\n\nexport enum MATERIAL_TYPE {\n  'cdn' = 0,\n  'npm' = 1,\n  'code' = 2,\n}\n\n@Entity()\nexport class MaterialConfig {\n  @ObjectIdColumn()\n  id: ObjectId;\n\n  @Column()\n  materialId: string;\n\n  @Column()\n  env: ProcessNodes;\n\n  @Column()\n  version: string;\n\n  @Column({ type: 'simple-json' })\n  contain?: string;\n\n  @Column()\n  cdn?: string;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"PhysicalMaterial"})," 实体物料表："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"import {\n  Entity,\n  Column,\n  CreateDateColumn,\n  ObjectIdColumn,\n  ObjectId,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum MATERIAL_TYPE {\n  'cdn' = 0,\n  'npm' = 1,\n  'code' = 2,\n}\n\n@Entity()\nexport class PhysicalMaterial {\n  @ObjectIdColumn()\n  id: ObjectId;\n\n  @Column()\n  groupId: string;\n\n  @Column()\n  type: string;\n\n  @Column()\n  devVersion: string;\n\n  @Column()\n  testVersion: string;\n\n  @Column()\n  fixVersion: string;\n\n  @Column()\n  releaseVersion: string;\n\n  @Column()\n  alphaVersion: number;\n\n  @Column()\n  betaVersion: number;\n\n  @Column()\n  gammaVersion: number;\n\n  @Column()\n  currentVersion: string;\n\n  @Column()\n  lastVersion: string;\n\n  @CreateDateColumn()\n  createDate: string;\n\n  @UpdateDateColumn()\n  updateDate: string;\n\n  @UpdateDateColumn()\n  updateUser: string;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"PhysicalMaterial"})," 虚拟物料表："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"import {\n  Entity,\n  Column,\n  CreateDateColumn,\n  ObjectIdColumn,\n  ObjectId,\n  UpdateDateColumn\n} from 'typeorm';\n\nexport enum MATERIAL_TYPE {\n  'cdn' = 0,\n  'npm' = 1,\n  'code' = 2,\n}\n\n@Entity()\nexport class VirtualMaterial {\n  @ObjectIdColumn()\n  id: ObjectId;\n\n  @Column()\n  zhName: string;\n\n  @Column()\n  usName: string;\n\n  @Column()\n  desc: string;\n\n  @Column()\n  groupId: string;\n\n  @CreateDateColumn()\n  createDate: string;\n\n  @UpdateDateColumn()\n  updateDate: string;\n\n  @UpdateDateColumn()\n  updateUser: string;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["从这两张表可以看出，",(0,t.jsx)(e.strong,{children:"physical"})," + ",(0,t.jsx)(e.strong,{children:"multrepo"})," 与 ",(0,t.jsx)(e.strong,{children:"virtual"})," + ",(0,t.jsx)(e.strong,{children:"monorepo"})," 总体的信息量是基本保持着一致的，两者合二为一都有对应的仓库信息以及物料的基础信息，而版本信息则共用 ",(0,t.jsx)(e.strong,{children:"materialConfig"})," 来保存。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"import { Controller, Post, Body } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { PayloadUser } from '@app/common';\nimport {\n  addMaterialDto,\n  editMaterialDetailDto,\n  ProcessNodes,\n  PublishDto,\n  searchMaterialByIdsDto,\n  searchMaterialDetailDto,\n  searchMaterialDto,\n} from './physical/physical.dto';\nimport { MultrepoGroupService } from '../group/multrepo/multrepoGroup.service';\nimport { MaterialConfigService } from './config/materialConfig.service';\nimport { VirtualMaterialService } from './virtual/virtual.service';\nimport { MonorepoGroupService } from '../group/monorepo/monorepoGroup.service';\n\nimport {\n  versionTypeMap,\n  versionMap,\n  ProcessMap,\n} from './physical/physical.dto';\nimport { Public } from '@app/common';\nimport { MessagePattern, Payload as MicroPayload } from '@nestjs/microservices';\nimport { CodeGroupService } from '../group/code/code.service';\nimport { TaskService } from '../task/task.service';\nimport { PhysicalMaterialService } from './physical/physical.service';\nimport { PublishStatus } from '../task/task.mongo.entity';\n\n@ApiTags('物料')\n@Controller('material')\nexport class MaterialController {\n  constructor(\n    private multrepoGroupService: MultrepoGroupService,\n    private groupService: CodeGroupService,\n    private monorepoGroupService: MonorepoGroupService,\n    private materialConfigService: MaterialConfigService,\n    private virtualMaterialService: VirtualMaterialService,\n    private physicalMaterialService: PhysicalMaterialService,\n    private taskService: TaskService,\n  ) { }\n\n  @Post('savePhysical')\n  async save(@Body() params: addMaterialDto, @PayloadUser() user: Payload) {\n    const { type, groupId, ...rest } = params;\n\n    return this.physicalMaterialService.save({\n      type,\n      groupId,\n      updateUser: user.username,\n    });\n  }\n\n  @Post('saveVirtual')\n  async saveVirtual(\n    @Body() params: addMaterialDto,\n    @PayloadUser() user: Payload,\n  ) {\n    return this.virtualMaterialService.save({\n      ...params,\n      updateUser: user.username,\n    });\n  }\n\n  @Post('editVirtual')\n  async editVirtual(\n    @Body() params: editMaterialDetailDto,\n    @PayloadUser() user: Payload,\n  ) {\n    const { id, ...res } = params;\n    return this.virtualMaterialService.updateOne(id, {\n      ...res,\n      updateUser: user.username,\n    });\n  }\n\n  @Post('edit')\n  async edit(\n    @Body() params: editMaterialDetailDto,\n    @PayloadUser() user: Payload,\n  ) {\n    const { id, type, groupId, ...res } = params;\n    const material = await this.physicalMaterialService.findOne(params.id);\n    return this.physicalMaterialService.updateOne(id, {\n      type,\n      groupId,\n      updateUser: user.username,\n    });\n  }\n\n  @Post('getVirtualList')\n  async getVirtualList(@Body() params: searchMaterialDto) {\n    const materialList = await this.virtualMaterialService.getList(params);\n    const monorepoGroup = await this.monorepoGroupService.findOne(\n      params.groupId,\n    );\n    for (const [idx, material] of materialList.entries()) {\n      materialList[idx] = {\n        ...material,\n      };\n    }\n    return materialList;\n  }\n\n  @Post('getList')\n  async getList(@Body() params: searchMaterialDto) {\n    const materialList = await this.physicalMaterialService.getList(\n      params.groupId ? params : '',\n    );\n    for (const [idx, material] of materialList.entries()) {\n      materialList[idx] = {\n        ...material,\n      };\n    }\n    return materialList;\n  }\n\n  @Post('getListByIds')\n  async getListByBizIds(@Body() params: searchMaterialByIdsDto) {\n    const { env, groupIds } = params;\n    const groupList: any = await this.groupService.getListByIds(groupIds);\n    const changeEev = ProcessMap[env];\n    for (const [gIdx, group] of groupList.entries()) {\n      const materialList = await this.physicalMaterialService.getList({\n        groupId: String(group.id),\n      });\n      for (const [idx, material] of materialList.entries()) {\n        const config = await this.materialConfigService.findOne(\n          material[changeEev],\n        );\n        materialList[idx] = {\n          ...material,\n          // config,\n        };\n      }\n      groupList[gIdx] = {\n        ...group,\n        materialList,\n      };\n    }\n    return groupList;\n  }\n\n  @Post('getDetail')\n  async getDetail(@Body() params: searchMaterialDetailDto) {\n    const material = await this.physicalMaterialService.findOne(params.id);\n    return {\n      ...material,\n    };\n  }\n\n  @Public()\n  @MessagePattern('material.project.getDetail')\n  getDetailMicro(@MicroPayload() projectDetailDto: searchMaterialDetailDto) {\n    return this.physicalMaterialService.findOneByProjectId(\n      projectDetailDto.projectId,\n    );\n  }\n\n  @Post('publish')\n  async publish(@Body() publishDto: PublishDto, @PayloadUser() user: Payload) {\n    const { id, branch, version, environment, desc } = publishDto;\n    const material = await this.physicalMaterialService.findOne(id);\n\n    let deployVersion = version;\n    let deployNum = 1;\n\n    if (environment !== ProcessNodes.production) {\n      if (\n        version !== material.currentVersion ||\n        !material[versionMap[environment]]\n      ) {\n        deployVersion = `${deployVersion}-${versionTypeMap[environment]}.1`;\n      } else {\n        deployVersion = `${deployVersion}-${versionTypeMap[environment]}.${material[versionMap[environment]] + 1\n          }`;\n        deployNum = material[versionMap[environment]] + 1;\n      }\n    }\n\n    const task = await this.taskService.save({\n      branch,\n      materialId: String(material.id),\n      status: PublishStatus.unpublished,\n      env: environment,\n      creatorName: user.name,\n      creatorId: user.userId,\n      desc,\n      deployNum,\n      deployVersion,\n      version,\n      currentVersion: material.currentVersion,\n    });\n\n    /**\n     * @description: 缺少真实调用构建逻辑\n     */\n    return task;\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["物料的 ",(0,t.jsx)(e.strong,{children:"Controller"})," 也是非常中规中矩的 ",(0,t.jsx)(e.strong,{children:"CURD"})," 模型，只有 ",(0,t.jsx)(e.strong,{children:"publish"})," 有点特殊要处理一些版本校验逻辑，因为实体物料可以从对应的物料表获取对应的仓库信息，所以这里的 ",(0,t.jsx)(e.strong,{children:"publish"})," 方法暂时针对于实体物料的。"]}),"\n",(0,t.jsxs)(e.h2,{id:"task",children:["Task",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#task",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,t.jsxs)(e.p,{children:["任务列表是本系统比较独立的一块，但作为物料系统与 ",(0,t.jsx)(e.strong,{children:"devops"})," 系统的关联，也是非常关键的一环。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"import {\n  Entity,\n  ObjectIdColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ObjectId,\n} from 'typeorm';\n\nimport { ProcessNodes } from '../material/physical/physical.dto';\n\nexport enum PublishStatus {\n  'unpublished' = 0,\n  'publishing' = 1,\n  'publish_success' = 2,\n  'publish_failed' = 3,\n}\n\n@Entity()\nexport class Task {\n  @ObjectIdColumn()\n  id?: ObjectId;\n\n  @Column({ default: null })\n  materialId?: string;\n\n  @Column({ default: null })\n  groupId?: string;\n\n  @Column()\n  deployNum: number;\n\n  @Column()\n  branch: string;\n\n  @Column()\n  deployVersion: string;\n\n  @Column()\n  version: string;\n\n  @Column()\n  currentVersion: string;\n\n  @Column({ default: PublishStatus.unpublished })\n  status: PublishStatus;\n\n  @Column()\n  env: ProcessNodes;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  startTime?: string;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  endTime?: string;\n\n  @Column()\n  creatorName: string;\n\n  @Column()\n  creatorId: number;\n\n  @Column()\n  queueId?: number;\n\n  @Column({ default: null })\n  buildId?: number;\n\n  @Column({ type: 'text', default: null })\n  desc?: string;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["任务的实体类主要记录 ",(0,t.jsx)(e.strong,{children:"devops"})," 的发布信息以及时间等内容，部分字段为了后续的回滚等操作做了一些冗余。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"\nimport { Body, Controller, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\nimport { TaskService } from './task.service';\nimport { PublishStatus, Task } from './task.mongo.entity';\n\nimport { ListWithPaginationDto, UpdateTaskDto } from './task.dto';\n\nimport { Public } from '@app/common';\nimport { Pagination } from 'nestjs-typeorm-paginate';\n\nimport {\n  ProcessMap,\n  versionMap,\n  ProcessNodes,\n} from '../material/physical/physical.dto';\n\nimport { PhysicalMaterialService } from '../material/physical/physical.service';\nimport { MaterialConfigService } from '../material/config/materialConfig.service';\nimport { MonorepoGroupService } from '../group/monorepo/monorepoGroup.service';\n\n@ApiTags('任务')\n@Controller('task')\nexport class TaskController {\n  constructor(\n    private taskService: TaskService,\n    private materialService: PhysicalMaterialService,\n    private materialConfigService: MaterialConfigService,\n    private monorepoGroupService: MonorepoGroupService,\n  ) { }\n\n  @Post('updateTaskStatus')\n  @Public()\n  async updateTask(@Body() updateTaskDto: UpdateTaskDto) {\n    const { id, status = PublishStatus.unpublished, buildId } = updateTaskDto;\n    const task: Task = await this.taskService.findById(id);\n    const numberedStatus = Number(status);\n    const { id: taskId, ...restTask } = task;\n    let material: any = {};\n\n    if (task.materialId) {\n      material = await this.materialService.findOne(task.materialId);\n    }\n\n    if (task.groupId) {\n      material = await this.monorepoGroupService.findOne(task.groupId);\n    }\n\n    if (numberedStatus === PublishStatus.publish_success) {\n      const updateConfig: any = {\n        version: task.deployVersion,\n        env: task.env,\n      };\n\n      const config = await this.materialConfigService.save(updateConfig);\n      const changeEev = ProcessMap[task.env];\n\n      const materialUpdate: any = {\n        [changeEev]: String(config.id),\n        currentVersion: task.version,\n        lastVersion:\n          task.env === ProcessNodes.production\n            ? task.deployVersion\n            : material.lastVersion,\n      };\n\n      versionMap[task.env] &&\n        (materialUpdate[versionMap[task.env]] = task.deployNum);\n\n      if (task.env === ProcessNodes.production) {\n        materialUpdate.alphaVersion = 1;\n        materialUpdate.betaVersion = 1;\n        materialUpdate.gammaVersion = 1;\n      }\n\n      if (task.materialId) {\n        this.materialService.updateOne(task.materialId, materialUpdate);\n      }\n\n      if (task.groupId) {\n        this.monorepoGroupService.updateOne(task.groupId, materialUpdate);\n      }\n    }\n\n    const updatedTask = { ...restTask, buildId };\n    numberedStatus && (updatedTask.status = numberedStatus);\n    updatedTask.endTime = new Date().toLocaleTimeString();\n    this.taskService.updateById(taskId, updatedTask);\n  }\n\n  @ApiOperation({\n    summary: '获取task详情',\n  })\n  @Post('detail')\n  async getSingle(@Body() singleDto: { taskId: number }): Promise<Task> {\n    const { taskId } = singleDto;\n    return await this.taskService.findById(taskId);\n  }\n\n  @ApiOperation({\n    summary: '任务列表（分页）',\n  })\n  @Post('list/pagination')\n  async listWithPagination(\n    @Body() listWithPaginationDto: ListWithPaginationDto,\n  ): Promise<Pagination<Task, CustomPaginationMeta>> {\n    const { page, ...searchCondition } = listWithPaginationDto;\n    return await this.taskService.paginate(searchCondition, page);\n  }\n\n  @ApiOperation({\n    summary: '回滚',\n  })\n  @Post('rollback')\n  rollback() {\n    return null;\n  }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"请注意，这里的任务回调会根据实体还是虚拟物料的不同而作区分，因为更新的逻辑与内容也不一样。"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,t.jsxs)(e.h2,{id:"写在最后",children:["写在最后",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["这套物料系统的设计目前是有缺陷的，首先他的环境是与物料表绑定的，采用 ",(0,t.jsx)(e.strong,{children:"devVersion"}),"、",(0,t.jsx)(e.strong,{children:"testVersion"}),"、",(0,t.jsx)(e.strong,{children:"fixVersion"})," 以及 ",(0,t.jsx)(e.strong,{children:"releaseVersion"})," 来区分发布的环境，也就意味着无法自由的去定制需要的环境，只能在写好的的四个环境流转，但对于一般的小团队来说其实也足够使用，暂时无需多虑，后期项目整体联调的时候会再重新优化一个版本，变得更为通用。"]}),"\n",(0,t.jsxs)(e.p,{children:["另外本章并未提供对应的前端，是因为大部分的接口模型都是标准的 ",(0,t.jsx)(e.strong,{children:"CURD"})," 模式，交互非常的少也较为简单，所以物料系统的前端代码比较适合使用 MMF 的模式来搭建，所以后期整体项目串联的时候，可以使用搭建服务直接生成物料系统的前端工程。"]}),"\n",(0,t.jsxs)(e.p,{children:["此外，整个物料系统里面用到了 ",(0,t.jsx)(e.strong,{children:"User"})," 与 ",(0,t.jsx)(e.strong,{children:"Devops"})," 的模块，打算使用微服务的模式，由用户系统提供权限、用户信息，",(0,t.jsx)(e.strong,{children:"Devops"})," 提供 ",(0,t.jsx)(e.strong,{children:"CICD"})," 等基础的功能，为了快速开发所以有些内容是预留与 ",(0,t.jsx)(e.strong,{children:"mock"}),"，这一块在后期串联的时候也会重点讲述。"]}),"\n",(0,t.jsxs)(e.p,{children:["所有项目打算尽可能在年底完结，目前主要为进度而快速开发的模式，还会根据项目进度以及设计在进行优化，所以服务端的内容大家可以关注一下 ",(0,t.jsx)(e.a,{href:"https://github.com/Ignition-Space/ignition",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/Ignition-Space/ignition"})," 这个项目。"]}),"\n",(0,t.jsx)(e.p,{children:"最后感谢各位读者的担待，确实因为工作较忙而项目又比较大，更新的慢请见谅。"})]})}function c(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}let d=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F22.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E7%89%A9%E6%96%99%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91.md"]={toc:[{text:"Group",id:"group",depth:2},{text:"material",id:"material",depth:2},{text:"Task",id:"task",depth:2},{text:"写在最后",id:"写在最后",depth:2}],title:"22.服务端实战：物料服务开发",headingTitle:"22.服务端实战：物料服务开发",frontmatter:{}}}}]);