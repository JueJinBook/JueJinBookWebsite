"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["99265"],{499913:function(e,n,s){e.exports=s.p+"static/image/222c35eebfc68dab375209b0dd2f3bbb.8814b2a4.gif"},323916:function(e,n,s){e.exports=s.p+"static/image/c5385f9be7b39dd5c9377b0f1f9c515f.71d7165c.webp"},742239:function(e,n,s){e.exports=s.p+"static/image/d523a8a0a209f2e18e6043f1c20a083d.0d6a1733.webp"},987254:function(e,n,s){s.r(n),s.d(n,{default:()=>er});var r=s(552676),i=s(740453);let c=s.p+"static/image/e5ba15444319ab19ec4cf8f0d1ad93fe.c1e1d7a4.webp",a=s.p+"static/image/363cffb465e0c0471d3bb0b91f761738.e1e2edc8.webp",t=s.p+"static/image/b57d150afc4ea7c8adbcdf8949709ab5.21a04842.webp",o=s.p+"static/image/82cb8520821911945dea1284abe6a4da.55ac7032.gif",l=s.p+"static/image/4ffe31852de095c809719c26b02d891f.eeade730.webp",d=s.p+"static/image/5fd3a014c79da88ea48063807bb7ff2e.2bf465cf.webp",p=s.p+"static/image/1570ee574d0cc7add8b358fcdbc6deb5.10686691.webp";var g=s(742239),h=s(499913);let j=s.p+"static/image/2fc1b4d44b4205c259b050977f498568.8d9df15d.webp",m=s.p+"static/image/69a0976b3912dba42212da204669c50d.6f3e7ca1.gif",x=s.p+"static/image/cd0e2689252873786342ea58b96caa7e.db490dbe.webp",u=s.p+"static/image/9945e32c5dd4baf137f2146a3e34ff99.80a87683.webp",f=s.p+"static/image/14fd2ac73c9774b4e307143d961f62c6.d6cc5ac9.webp",b=s.p+"static/image/1bca681e79b1d33c08ef6306679dfda2.8ad85e57.webp",w=s.p+"static/image/a1a3066a6598507f05091585e466bb5e.1078dd2f.gif",v=s.p+"static/image/486bdc07d38f47875f6b9a02e373e2e2.8b0674af.webp",k=s.p+"static/image/2e15159ecbed96c98ef31f4503d29cb0.b0c6122e.webp",y=s.p+"static/image/e15eb66edc8c2c34587bdfc0e357f914.9304abe3.webp",U=s.p+"static/image/282d97ddd931bec3cc37fb1babfa0db7.c5c6a8d7.webp",_=s.p+"static/image/e8d09a7fe27ed9f572d968cfea8c51ba.4bc05d6f.webp",I=s.p+"static/image/30ef7f3be8457811f78fe910bb9c38d3.9e0cf21c.webp",S=s.p+"static/image/4a3faa4309ce9a44d28b429254244529.471ff045.webp",E=s.p+"static/image/9f824c95b0a95373399228c529778b1f.ca052351.webp",A=s.p+"static/image/c498778b7811fcb7daf064ec42cb049a.73483733.webp",N=s.p+"static/image/116e096927a439ae71397c63502f3180.55d900c1.webp",T=s.p+"static/image/3b7ae375d9a92f5bf94f031069336adb.814fc85c.webp",G=s.p+"static/image/2453dc1d01c8b79408b5f9e7aae4de05.fdd4512a.gif",B=s.p+"static/image/3711a650e168358cc6c5586d2235eada.f600e676.webp",q=s.p+"static/image/b7e2506ac95fd89d71dd5892bfe06a7c.4d81292e.webp",P=s.p+"static/image/f1fa25059b121279851d753b6f2cfa63.443c656a.webp",R=s.p+"static/image/04f6ef2a1b165a62001bb184490e8cc2.7c3265eb.webp";var F=s(323916);let L=s.p+"static/image/22412fcdc0cd3c243cb9b3fa166e58e8.7c5b3528.gif",C=s.p+"static/image/d88e4e124c221cdd19a8f082a558f944.c9e9f546.webp",O=s.p+"static/image/4180540179baea8f5cb88206f00f11ca.851351af.webp",z=s.p+"static/image/4f0e58c4e0d661032fed415e6a3272e2.4368e917.webp",M=s.p+"static/image/2ace327cf3156caa4c4ab521f68965d5.544a1db5.webp",D=s.p+"static/image/c0225fe27771cb23f82e8243c7d4d57c.85fce58f.webp",J=s.p+"static/image/44511f3d0b9ae8eb81730351fb889138.1990fad4.webp",V=s.p+"static/image/d7cba9c6835ba86cca2b987931c3f423.c97e69b9.webp",Q=s.p+"static/image/35604feef9a145f2de1d88bf2767f140.9a357802.webp",H=s.p+"static/image/5476a34c05789879bb2263cf50e6c325.e08e5ce6.webp",W=s.p+"static/image/48ea3e59b59f02b47bc8411205018fcc.9af28d6b.gif",X=s.p+"static/image/e764d9423b85bd915200cd05b512066b.17ac493b.webp",Z=s.p+"static/image/6f36ecf3637bdec961a55dd843b94bd0.8d76d13a.webp",K=s.p+"static/image/53f6052c1996561b6a39276b2a4c9654.2ed5650d.gif",Y=s.p+"static/image/593d1590974bc8a415431175d9dd44c6.b1bf5c78.webp",$=s.p+"static/image/d2e084a68fe17e4455528310b5dab9b9.2b100a5e.webp",ee=s.p+"static/image/27fea37176a771022d7b2a2a853baedb.c6ab18cd.webp";function en(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"133-会议室预定系统google-账号登录后端开发",children:["133. 会议室预定系统：Google 账号登录后端开发",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#133-会议室预定系统google-账号登录后端开发",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们的网站实现了用户名密码登录，用户忘记了密码也可以通过邮箱验证码来修改密码，之后再登录。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:ee,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:$,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样功能上没问题，但是不方便。"}),"\n",(0,r.jsx)(n.p,{children:"用户会访问很多个网站，如果每个网站都需要注册一个账号，那对于不常用的网站，很容易忘记账号密码。"}),"\n",(0,r.jsx)(n.p,{children:"解决方式就是支持三方账号登录。"}),"\n",(0,r.jsxs)(n.p,{children:["比如 ",(0,r.jsx)(n.a,{href:"https://login.docker.com/u/login",target:"_blank",rel:"noopener noreferrer",children:"dockerhub 的登录"}),"："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"你可以登录 google、github 账号，然后授权，这样 dockerhub 网站就可以自动登录了。"}),"\n",(0,r.jsx)(n.p,{children:"根本不需要单独的账号密码。"}),"\n",(0,r.jsx)(n.p,{children:"原理就是他用你 github、google 的信息来给你创建了一个账号，之后只要是同样的 github、google 信息就可以自动登录了。"}),"\n",(0,r.jsx)(n.p,{children:"当你第一次授权的时候："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:K,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"会跳到这个页面："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Z,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"因为缺少了 username 的信息，你填上之后就可以注册了。"}),"\n",(0,r.jsx)(n.p,{children:"并且它还自动给你登录了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:X,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后退出登录用 google 账号登录一次："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:W,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"因为你授权过，短时间内不需要再次授权，于是就直接登录了。"}),"\n",(0,r.jsx)(n.p,{children:"感受下现在的登录体验。"}),"\n",(0,r.jsx)(n.p,{children:"需要记住用户名密码么？"}),"\n",(0,r.jsx)(n.p,{children:"不需要。"}),"\n",(0,r.jsx)(n.p,{children:"你只需要点下 google 登录，然后授权，就自动登录了。"}),"\n",(0,r.jsx)(n.p,{children:"我们也在会议室预定系统里集成下 google 登录。"}),"\n",(0,r.jsx)(n.p,{children:"会用到 passport-google 的策略来做三方登录，所以要集成 passport。"}),"\n",(0,r.jsx)(n.p,{children:"进入 backend 项目，安装 passport 的包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save @nestjs/passport passport\n"})}),"\n",(0,r.jsx)(n.p,{children:"安装用户名密码认证的 passport-local 策略包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save passport-local\nnpm install --save-dev @types/passport-local\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后创建一个认证模块："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g module auth\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:H,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"添加用户名密码认证的策略 auth/local.strategy.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n\n  async validate(username: string, password: string) {\n    \n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"这里需要用到 UserService，在 UserModule 导出一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Q,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后 AuthModule 引入 UserModule："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:V,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"并把 LocalStrategy 声明为 provider。"}),"\n",(0,r.jsx)(n.p,{children:"LocalStrategy 里直接复用 userService.login 来做登录认证："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:J,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"passport 会把返回的 user 信息放在 request.user 上。"}),"\n",(0,r.jsx)(n.p,{children:"然后 user/login 里就不需要手动调用 userService 了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"改成这样，用 AuthGuard('local') 来做处理即可，处理完从 reqeust.user 里拿 user 信息："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:z,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后进入 frontend_user 也把开发服务跑起来："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start\n"})}),"\n",(0,r.jsx)(n.p,{children:"当用户不存在："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"当密码错误："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"用户名密码都正确时："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(n.p,{children:"这样，我们的 passport 就集成成功了。"}),"\n",(0,r.jsx)(n.p,{children:"当然，passport-local、passport-jwt 都不集成也可以，直接用 passport-google 和 passport-github 就行。"}),"\n",(0,r.jsx)(n.p,{children:"各个策略都是独立的，可以单独使用。"}),"\n",(0,r.jsx)(n.p,{children:"下面我们来实现 google 和 github 登录："}),"\n",(0,r.jsx)(n.p,{children:"上节我们实现了 Github 登录，这节继续来实现下 Google 登录。"}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.a,{href:"https://www.passportjs.org/packages/",target:"_blank",rel:"noopener noreferrer",children:"passport 的网站"}),"搜索："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"找下载量最多的那个。"}),"\n",(0,r.jsx)(n.p,{children:"然后安装下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save passport-google-oauth20\nnpm install --save-dev @types/passport-google-oauth20\n"})}),"\n",(0,r.jsxs)(n.p,{children:["获取 client id 和 client secret 的步骤",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7226988578700525605/section/7376480527337193482",target:"_blank",rel:"noopener noreferrer",children:"前面章节"}),"讲过。"]}),"\n",(0,r.jsx)(n.p,{children:"授权的域名、callback url 要和应用中的对应才行，否则就重新搞一个。"}),"\n",(0,r.jsx)(n.p,{children:"我这里重新注册了一个应用，拿到了 client id："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"创建 auth/google.strategy.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-google-oauth20';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: '535538293892-fso0juek6ag5eupus679gnrgt3g5gknq.apps.googleusercontent.com',\n      clientSecret: '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',\n      callbackURL: 'http://localhost:3005/user/callback/google',\n      scope: ['email', 'profile'],\n    });\n  }\n\n  validate (accessToken: string, refreshToken: string, profile: any) {\n    const { name, emails, photos } = profile\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n      accessToken\n    }\n    return user;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"这里填入刚刚的 clientID、clientSecret、callbackURL。"}),"\n",(0,r.jsx)(n.p,{children:"在 AuthModule 引入："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:q,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"之后在 UserController 添加两个路由："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Get('google')\n@UseGuards(AuthGuard('google'))\nasync googleAuth() {}\n\n@Get('callback/google')\n@UseGuards(AuthGuard('google'))\ngoogleAuthRedirect(@Req() req) {\n    if (!req.user) {\n      return 'No user from google'\n    }\n\n    return {\n      message: 'User information from google',\n      user: req.user\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"一个是触发登录的，一个是回调的。"}),"\n",(0,r.jsx)(n.p,{children:"测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:G,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，google 的用户信息拿到了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"那我们只要在拿到用户信息的时候自动注册下就好了。"}),"\n",(0,r.jsx)(n.p,{children:"在 user.entity.ts 添加 loginType 字段："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Column({\n    type: 'int',\n    comment: '登录类型, 0 用户名密码登录, 1 Google 登录, 2 Github 登录',\n    default: 0\n})\nloginType: LoginType;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export enum LoginType {\n    USERNAME_PASSWORD = 0,\n    GOOGLE = 1,\n    GITHUB = 2\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"默认是用户名密码登录，值是 0，当 google 或者 github 登录时，loginType 是 1 和 2。"}),"\n",(0,r.jsx)(n.p,{children:"因为前几节我们把 synchronize 关掉了，所以现在并不会自动创建这一列："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们通过 migration:generate 生成个迁移："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run migration:generate src/migrations/add-user-loginType-column\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"生成的迁移类没问题："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"跑一下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run migration:run\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:I,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在数据库看一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:U,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"loginType 列添加成功了。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"migrations 表也记录了这条执行记录。"}),"\n",(0,r.jsx)(n.p,{children:"然后补充下 google 授权后自动注册的逻辑："}),"\n",(0,r.jsx)(n.p,{children:"在 UserService 里添加 registerByGoogleInfo 方法："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"async registerByGoogleInfo(email: string, nickName: string, headPic: string) {\n    const newUser = new User();\n    newUser.email = email;\n    newUser.nickName = nickName;\n    newUser.headPic = headPic;\n    newUser.password = '';\n    newUser.username = email + Math.random().toString().slice(2, 10);\n    newUser.loginType = LoginType.GOOGLE;\n    newUser.isAdmin = false;\n\n    return this.userRepository.save(newUser);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"email、nickName、headPic 都是基于 google 返回的信息。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"username 我们就用 email + 随机数的方式生成，反正也不需要用用户名密码登录，保证唯一就行。"}),"\n",(0,r.jsx)(n.p,{children:"passport 也是一样。"}),"\n",(0,r.jsx)(n.p,{children:"在 UserController 调用下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Get('callback/google')\n@UseGuards(AuthGuard('google'))\nasync googleAuthRedirect(@Req() req) {\n  if (!req.user) {\n    throw new BadRequestException('google 登录失败');\n  }\n  const user = await this.userService.registerByGoogleInfo(\n    req.user.email, \n    req.user.firstName + ' ' + req.user.lastName,\n    req.user.picture\n  );\n\n  const vo = new LoginUserVo();\n  vo.userInfo = {\n      id: user.id,\n      username: user.username,\n      nickName: user.nickName,\n      email: user.email,\n      phoneNumber: user.phoneNumber,\n      headPic: user.headPic,\n      createTime: user.createTime.getTime(),\n      isFrozen: user.isFrozen,\n      isAdmin: user.isAdmin,\n      roles: [],\n      permissions: []\n  }\n\n  vo.accessToken = this.jwtService.sign({\n    userId: vo.userInfo.id,\n    username: vo.userInfo.username,\n    email: vo.userInfo.email,\n    roles: vo.userInfo.roles,\n    permissions: vo.userInfo.permissions\n  }, {\n    expiresIn: this.configService.get('jwt_access_token_expires_time') || '30m'\n  });\n\n  vo.refreshToken = this.jwtService.sign({\n    userId: vo.userInfo.id\n  }, {\n    expiresIn: this.configService.get('jwt_refresh_token_expres_time') || '7d'\n  });\n\n  return vo;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"就是用 google 返回的信息来自动注册，并且自动登录，返回 accessToken 和 refreshToken。"}),"\n",(0,r.jsx)(n.p,{children:"测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，google 授权之后，自动注册并返回了 token 信息，这样带上这个访问就是登录状态了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"数据库里 user 表也插入了该用户的记录："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"nickName、headPic、username、loginType 都是对的。"}),"\n",(0,r.jsx)(n.p,{children:"后续 refreshToken 的流程不受影响，因为它只是取出 jwt 里的 userId 来查询用户信息并重新生成 token 返回："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后继续处理 google 登录："}),"\n",(0,r.jsx)(n.p,{children:"google 第一次账号授权会自动注册并登录，但是后续就不需要注册了。"}),"\n",(0,r.jsx)(n.p,{children:"所以我们要加个判断："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"如果 email 能查到用户，那就直接登录："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Get('callback/google')\n@UseGuards(AuthGuard('google'))\nasync googleAuthRedirect(@Req() req) {\n  if (!req.user) {\n    throw new BadRequestException('google 登录失败');\n  }\n\n  const foundUser = await this.userService.findUserByEmail(req.user.email);\n\n  if(foundUser) {\n    const vo = new LoginUserVo();\n    vo.userInfo = {\n        id: foundUser.id,\n        username: foundUser.username,\n        nickName: foundUser.nickName,\n        email: foundUser.email,\n        phoneNumber: foundUser.phoneNumber,\n        headPic: foundUser.headPic,\n        createTime: foundUser.createTime.getTime(),\n        isFrozen: foundUser.isFrozen,\n        isAdmin: foundUser.isAdmin,\n        roles: foundUser.roles.map(item => item.name),\n        permissions: foundUser.roles.reduce((arr, item) => {\n            item.permissions.forEach(permission => {\n                if(arr.indexOf(permission) === -1) {\n                    arr.push(permission);\n                }\n            })\n            return arr;\n        }, [])\n    }\n    vo.accessToken = this.jwtService.sign({\n      userId: vo.userInfo.id,\n      username: vo.userInfo.username,\n      email: vo.userInfo.email,\n      roles: vo.userInfo.roles,\n      permissions: vo.userInfo.permissions\n    }, {\n      expiresIn: this.configService.get('jwt_access_token_expires_time') || '30m'\n    });\n\n    vo.refreshToken = this.jwtService.sign({\n      userId: vo.userInfo.id\n    }, {\n      expiresIn: this.configService.get('jwt_refresh_token_expres_time') || '7d'\n    });\n  \n    return vo;\n  } else {\n    const user = await this.userService.registerByGoogleInfo(\n      req.user.email, \n      req.user.firstName + ' ' + req.user.lastName,\n      req.user.picture\n    );\n\n    const vo = new LoginUserVo();\n    vo.userInfo = {\n        id: user.id,\n        username: user.username,\n        nickName: user.nickName,\n        email: user.email,\n        phoneNumber: user.phoneNumber,\n        headPic: user.headPic,\n        createTime: user.createTime.getTime(),\n        isFrozen: user.isFrozen,\n        isAdmin: user.isAdmin,\n        roles: [],\n        permissions: []\n    }\n\n    vo.accessToken = this.jwtService.sign({\n      userId: vo.userInfo.id,\n      username: vo.userInfo.username,\n      email: vo.userInfo.email,\n      roles: vo.userInfo.roles,\n      permissions: vo.userInfo.permissions\n    }, {\n      expiresIn: this.configService.get('jwt_access_token_expires_time') || '30m'\n    });\n\n    vo.refreshToken = this.jwtService.sign({\n      userId: vo.userInfo.id\n    }, {\n      expiresIn: this.configService.get('jwt_refresh_token_expres_time') || '7d'\n    });\n  \n    return vo;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 UserService 实现 findUserByEmail 方法："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"async findUserByEmail(email: string) {\n    const user =  await this.userRepository.findOne({\n        where: {\n            email: email,\n            isAdmin: false,\n        },\n        relations: [ 'roles', 'roles.permissions']\n    });\n\n    return user;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"数据库已经注册了这个 google 账号对应的 user，再次授权，会查询注册的用户信息返回。"}),"\n",(0,r.jsx)(n.p,{children:"可以看到，只执行了 select 语句："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"但网站登录后一般都会重定向到首页："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["这时候一般都是用 cookie 返回 token 的，比如 ",(0,r.jsx)(n.a,{href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer",children:"https://hub.docker.com"})," 就是这么做的："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，它并不是直接返回 jwt 的 token，而是重定向回首页，在 cookie 里携带 token。"}),"\n",(0,r.jsx)(n.p,{children:"前端只要判断下如果 cookie 里有这些 token 就自动登录就好了。"}),"\n",(0,r.jsx)(n.p,{children:"我们也处理下："}),"\n",(0,r.jsx)(n.p,{children:"操作 cookie 需要用到 cookie-parser 中间件："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save cookie-parser\n\nnpm install --save-dev @types/cookie-parser\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 main.ts 启用下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 callback/google 里注入 Response，设置 cookie："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后重定向："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"试一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"重定向没问题。"}),"\n",(0,r.jsx)(n.p,{children:"cookie 也没问题："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"此外，我们还要处理下普通的登录，用户名密码登录的时候要过滤下 loginType："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"google 登录的账号是不能通过用户名密码登录的。"}),"\n",(0,r.jsx)(n.p,{children:"这样，google 登录的后端部分就完成了。"}),"\n",(0,r.jsxs)(n.p,{children:["案例代码上传了",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们的应用之前只支持用户名密码登录，今天实现了 google 登录的后端部分。"}),"\n",(0,r.jsx)(n.p,{children:"首先我们把用户名密码的身份认证改成了用 passport。"}),"\n",(0,r.jsx)(n.p,{children:"当然，这不是必须的，每个策略都是可以独立用的。"}),"\n",(0,r.jsx)(n.p,{children:"然后我们创建了新的 google 应用，拿到 client id 和 client secret。"}),"\n",(0,r.jsx)(n.p,{children:"用 passport-google-oauth20 的策略来实现了 google 登录。"}),"\n",(0,r.jsx)(n.p,{children:"在 callback 的路由里，基于 google 返回的信息做了自动注册，如果用户已经注册过，就直接返回登录信息。"}),"\n",(0,r.jsx)(n.p,{children:"google 登录的 callback 里重定向到网站首页，然后通过 cookie 携带 userInfo、accessToken、refreshToken 等信息。"}),"\n",(0,r.jsx)(n.p,{children:"前端代码再处理下 cookie，同步登录状态就好了。"})]})}function es(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(en,{...e})}):en(e)}let er=es;es.__RSPRESS_PAGE_META={},es.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F133.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E5%AE%9A%E7%B3%BB%E7%BB%9F%EF%BC%9AGoogle%20%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"133. 会议室预定系统：Google 账号登录后端开发",headingTitle:"133. 会议室预定系统：Google 账号登录后端开发",frontmatter:{}}}}]);