"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["92299"],{259737:function(n,e,r){r.r(e),r.d(e,{default:()=>o});var a=r(552676),i=r(740453);let s=r.p+"static/image/185553bb10d32499f4e17c7ff16bacd1.648676ee.png",t=r.p+"static/image/35fb6adac6f7570dce6180ff6f04719c.4e73959c.png",c=r.p+"static/image/33ca662e116a2eec31b468309f656bf5.40f55d78.png",d=r.p+"static/image/71a7178d2a61d2b58ba1e14e4273a450.ff4d5fc2.png",l=r.p+"static/image/27a6f7b897370e1048a1a7ef95c0d3a6.d1192480.png";function h(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",ul:"ul",li:"li",pre:"pre",code:"code",img:"img",h4:"h4"},(0,i.ah)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"21实战案例_-压缩混淆",children:["21.实战案例_ 压缩混淆",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#21实战案例_-压缩混淆",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"压缩混淆工具是前端必用的工具之一，代码在上线之间需要经过压缩来减小体积，并且会做一些简单的混淆来防止源码直接泄漏。前端工程师可能每天都在用这种工具，可你有想过它的实现原理么？"}),"\n",(0,a.jsx)(e.p,{children:"代码的压缩和混淆都是对代码做转换，但是转换前后要保持语义一致，就是不能转完之后代码逻辑改变了。"}),"\n",(0,a.jsx)(e.p,{children:"之所以能做这些转换是因为计算机执行代码并不需要换行、也不需要变量名多么易懂，那都是给人看的，可以简化掉，而且有的不会被执行到的代码也可以删掉。压缩和混淆就是分析代码中的这种代码，进行分析和转换，达到转换前后执行逻辑一致，但是代码体积更小、可读性更差的目的。"}),"\n",(0,a.jsx)(e.p,{children:"我们分别来实现一下压缩和混淆。"}),"\n",(0,a.jsxs)(e.h2,{id:"混淆",children:["混淆",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#混淆",children:"#"})]}),"\n",(0,a.jsxs)(e.h3,{id:"思路分析",children:["思路分析",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#思路分析",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"混淆就是把代码变得难以阅读，让怀有恶意目的的人很难通过代码理清逻辑，但是不能改变执行的结果。要做等价转换。"}),"\n",(0,a.jsx)(e.p,{children:"这种转换包括两方面："}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"名字转换。变量名、函数名这些我们会注意命名要有含义，但是编译后的代码就不需要了，可以把各种 identifier 的 name 重命名为没有含义的 abcd，修改作用域中某个变量的名字，同时还要修改用到它的地方，这个可以通过 path.scope.rename 的 api。"}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"逻辑转换。if 的逻辑可以用 switch 来代替，for 的逻辑可以用 while 来代替，这都是等价的，把一种方式实现的代码转成另一种等价的形式就可以达到混淆的目的。做混淆工具主要是要找到这种等价的变化，而且后者一定要特别复杂难以分析，然后实现这种转换，就达到了混淆的目的。"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"这里我们只实现下名字的混淆。"}),"\n",(0,a.jsxs)(e.p,{children:["目的是为了找出所有的声明，那就要遍历所有会生成作用域的节点，包括 FunctionDeclaration、BlockStatement 等，而这些节点有一个别名，叫 Scopable（所有的别名可以在",(0,a.jsx)(e.a,{href:"https://github.com/babel/babel/blob/main/packages/babel-types/src/ast-types/generated/index.ts#L2489-L2535",target:"_blank",rel:"noopener noreferrer",children:"这里"}),"查，详见第七节），然后对每一个声明（binding）都重命名为无意义的名字，并且更新所有引用这个声明的地方，这个逻辑在 path.scope.rename 已经实现了，直接调用这个 api 即可。"]}),"\n",(0,a.jsxs)(e.h3,{id:"代码实现",children:["代码实现",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码实现",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"依然先写好插件的结构："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const { declare } = require('@babel/helper-plugin-utils');\n\nconst mangle = declare((api, options, dirname) => {\n    api.assertVersion(7);\n\n    return {\n        pre(file) {\n            file.set('uid', 0);\n        },\n        visitor: {\n            Scopable: {\n               \n            }\n        }\n    }\n});\n\nmodule.exports = mangle;\n"})}),"\n",(0,a.jsx)(e.p,{children:"这里在 file 放了一个 uid 是为了获取唯一 id 的，后面会用到。"}),"\n",(0,a.jsx)(e.p,{children:"我们基于这个 uid 来获取唯一的名字，因为不能以数字开头，所以用 A-Z、a-z、$ 和 _ 这 54 个字符来生成。"}),"\n",(0,a.jsx)(e.p,{children:"根据传入的 num 来取对应下标的字符组成字符串："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'const base54 = (function(){\n    var DIGITS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_";\n    return function(num) {\n            var ret = "";\n            do {\n                    ret = DIGITS.charAt(num % 54) + ret;\n                    num = Math.floor(num / 54);\n            } while (num > 0);\n            return ret;\n    };\n})();\n'})}),"\n",(0,a.jsx)(e.p,{children:"然后就是替换所有的声明（binding） 的名字了："}),"\n",(0,a.jsx)(e.p,{children:"首先取出 path.scope.bindings，遍历每一个 binding，然后通过 rename 的 api 来进行改名。"}),"\n",(0,a.jsx)(e.p,{children:"并且处理过后的声明加个标记，再次处理到的时候就跳过。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"Scopable: {\n    exit(path, state) {\n        let uid = state.file.get('uid');\n        Object.entries(path.scope.bindings).forEach(([key, binding]) => {\n            if(binding.mangled) return;\n            binding.mangled = true;\n            const newName = path.scope.generateUid(base54(uid++));\n            binding.path.scope.rename(key, newName)\n        });\n        state.file.set('uid', uid);\n    }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"试下效果，当输入代码为："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function func() {\n    const num1 = 1;\n    const num2 = 2;\n    const num3 = /*@__PURE__*/add(1, 2);\n    const num4 = add(3, 4);\n    console.log(num2);\n    return num2;\n    console.log(num1);\n    function add (aaa, bbb) {\n        return aaa + bbb;\n    }\n}\nfunc();\n"})}),"\n",(0,a.jsx)(e.p,{children:"输出为："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsx)(e.p,{children:"至此，我们实现了变量名的混淆！"}),"\n",(0,a.jsxs)(e.h2,{id:"压缩",children:["压缩",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#压缩",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"压缩就是要去掉代码中执行不到的部分，比如 return 语句后的一些语句和没有意义的部分，包括注释、换行等。"}),"\n",(0,a.jsx)(e.p,{children:"基于 AST 的转换做压缩要处理的情况特别多，这里我们只实现两种情况的压缩："}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"删除 return 之后的不会执行到的语句"}),"\n",(0,a.jsx)(e.li,{children:"删除没有被使用的变量声明（死代码删除 Dead Code Elemation，简称 DCE）"}),"\n"]}),"\n",(0,a.jsxs)(e.h3,{id:"删除-return-之后的语句",children:["删除 return 之后的语句",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#删除-return-之后的语句",children:"#"})]}),"\n",(0,a.jsxs)(e.h4,{id:"思路分析-1",children:["思路分析",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#思路分析-1",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"删除 return 之后的语句，就是要找到函数声明 FunctionDeclaration 的函数体，遍历一遍 body 的 AST，如果是 return 之后就打个标记之后删除。"}),"\n",(0,a.jsx)(e.p,{children:"但是要注意，return 之后是可以有函数声明的，会做变量提升，还有如果是 var 声明的变量，也会做提升，所以要去掉这两种情况。"}),"\n",(0,a.jsxs)(e.h4,{id:"代码实现-1",children:["代码实现",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码实现-1",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"拿到 BlockStatement 的 body 中的每一个节点，如果是在 return、throw 等语句之后，就准备删除，但是要排除函数声明语句和 var 的变量声明语句。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"BlockStatement(path) {\n    const statementPaths = path.get('body');\n    let purge = false;\n    for (let i = 0; i < statementPaths.length; i++) {\n\n        if (statementPaths[i].isCompletionStatement()) {\n            purge = true;\n            continue;\n        }\n\n        if (purge && !canExistAfterCompletion(statementPaths[i])) {\n            statementPaths[i].remove();\n        } \n    }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"这里的 CompletionStatement 可以通过前面提到的 alias 来查， CompletionStatement 也是一个别名。"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(e.p,{children:"然后判断是否可以删除的 canExistAfterCompletion 方法是："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'function canExistAfterCompletion(path) {\n    return path.isFunctionDeclaration() || path.isVariableDeclaration({\n        kind: "var"\n    });\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"测试下效果："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(e.p,{children:"这样就达到了删除不会执行到的代码的目的。"}),"\n",(0,a.jsxs)(e.h3,{id:"删除没被使用的变量声明",children:["删除没被使用的变量声明",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#删除没被使用的变量声明",children:"#"})]}),"\n",(0,a.jsxs)(e.h4,{id:"思路分析-2",children:["思路分析",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#思路分析-2",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"变量声明也就是 path.scope 中的 binding，可以通过  references 的数量或者 referenced 是否是 true 来判断是否被引用，如果没有被引用，那么就可以删除。"}),"\n",(0,a.jsx)(e.p,{children:"但是这里也有种特殊情况，就是如果初始化的值是函数调用，那么就不能直接删除，因为可能有副作用，比如："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function a {\n    console.log('a');\n    return 'aa';\n}\n\nconst b = a();\n"})}),"\n",(0,a.jsx)(e.p,{children:"这里的 b 没有被用到，但是这个 a() 的函数调用却不能直接删除，因为是有副作用的，只能转成这种："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function a {\n    console.log('a');\n    return 'aa';\n}\n\na();\n"})}),"\n",(0,a.jsx)(e.p,{children:"只把声明的变量去掉，但是保留函数调用语句。"}),"\n",(0,a.jsx)(e.p,{children:"那么如果该节点确实没有副作用怎么办呢？"}),"\n",(0,a.jsx)(e.p,{children:"babel 提供了一个 path.scope.isPure 的 api，可以判断一些 AST 节点是否是纯的，也就是是否是没有副作用的，可以判断各种 AST 是否可以放心的删除。"}),"\n",(0,a.jsx)(e.p,{children:"但是函数调用他是分析不了的，可以采用 terser 的方案，通过注释来标注纯函数。"}),"\n",(0,a.jsx)(e.p,{children:"大家可能见到过这样的代码："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:" /*#__PURE__*/ React.creatElement('div');\n"})}),"\n",(0,a.jsx)(e.p,{children:"这里的 pure 注释就是告诉 terser 这个函数没有副作用，如果没用到就直接删除就行。"}),"\n",(0,a.jsx)(e.p,{children:"我们这里也采用相同的方案，如果函数调用之前有 PURE 注释，则直接删除，否则保留。"}),"\n",(0,a.jsxs)(e.h4,{id:"代码实现-2",children:["代码实现",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码实现-2",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"首先拿到每一个 binding，判断下有没有被引用。"}),"\n",(0,a.jsx)(e.p,{children:"如果没有被引用，那就判断下初始化值是否是函数调用语句，如果是，还要判断有没有 PURE 的注释，有就直接删。"}),"\n",(0,a.jsx)(e.p,{children:"然后用 isPure 判断节点是否是没有副作用的，比如 StringLiteral、Identifer 这种就没副作用，可以直接删除。否则就保留右边的部分，把声明删除。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"Scopable(path) {\n      Object.entries(path.scope.bindings).forEach(([key, binding]) => {\n            if (!binding.referenced) {//没有被引用\n                if (binding.path.get('init').isCallExpression()) {\n                    const comments = binding.path.get('init').node.leadingComments;//拿到节点前的注释\n                    if(comments && comments[0]) {\n                        if (comments[0].value.includes('PURE')) {//有 PURE 注释就删除\n                            binding.path.remove();\n                            return;\n                        }\n                    }\n                }\n                if (!path.scope.isPure(binding.path.node.init)) {//如果是纯的，就直接删除，否则替换为右边部分\n                    binding.path.parentPath.replaceWith(api.types.expressionStatement(binding.path.node.init));\n                } else {\n                    binding.path.remove();\n                }\n            }\n        });\n    }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"试下效果："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:t,alt:""})}),"\n",(0,a.jsx)(e.p,{children:"如图，num3 和 num4 都没有被使用，但是 num3因为标记了 PURE，所以当作纯函数删除了，而 num4 则保留了该函数调用。"}),"\n",(0,a.jsxs)(e.h2,{id:"效果演示",children:["效果演示",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#效果演示",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"我们把压缩和混淆的功能整体跑一下:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const { transformFromAstSync } = require('@babel/core');\nconst  parser = require('@babel/parser');\nconst manglePlugin = require('./plugin/mangle');\nconst compressPlugin = require('./plugin/compress');\n\nconst sourceCode = `\n    function func() {\n        const num1 = 1;\n        const num2 = 2;\n        const num3 = /*@__PURE__*/add(1, 2);\n        const num4 = add(3, 4);\n        console.log(num2);\n        return num2;\n        console.log(num1);\n        function add (aaa, bbb) {\n            return aaa + bbb;\n        }\n    }\n    func();\n`;\n\nconst ast = parser.parse(sourceCode, {\n    sourceType: 'unambiguous',\n    comments: true\n});\n\nconst { code } = transformFromAstSync(ast, sourceCode, {\n    plugins: [\n        [manglePlugin], \n        [compressPlugin]\n    ],\n    generatorOpts: {\n        comments: false,\n        compact: true\n    }\n});\nconsole.log(code);\n"})}),"\n",(0,a.jsx)(e.p,{children:"通过 generaotrOpts 来让 generator 去掉 comments、去掉空格。"}),"\n",(0,a.jsx)(e.p,{children:"效果如下："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:s,alt:""})}),"\n",(0,a.jsxs)(e.h2,{id:"总结",children:["总结",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"压缩混淆也是对代码做转换，但是做的是等价转换，变量名换成无意义的名字，代码结构转成更难读但是执行效果一样的形式，没用到的代码（return 后的、没被引用的声明）删除掉。等等。"}),"\n",(0,a.jsx)(e.p,{children:"具体的 case 可能很多，但是思路和目的都是一致的，就是在等价的前提下，让代码体积更小，可读性更差。"}),"\n",(0,a.jsx)(e.p,{children:"有些要对代码做保护的场景是要自己做混淆的实现的，就是要找各种等价的形式，然后实现转换。除了这个之外，了解压缩混淆的原理也可以让我们更好的使用类似工具，比如 terser。"}),"\n",(0,a.jsxs)(e.p,{children:["（代码在",(0,a.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/babel-plugin-exercize",target:"_blank",rel:"noopener noreferrer",children:"这里"}),"，建议 git clone 下来通过 node 跑一下）"]})]})}function p(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(h,{...n})}):h(n)}let o=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["Babel%20%E6%8F%92%E4%BB%B6%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F21.%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B_%20%E5%8E%8B%E7%BC%A9%E6%B7%B7%E6%B7%86.md"]={toc:[{text:"混淆",id:"混淆",depth:2},{text:"思路分析",id:"思路分析",depth:3},{text:"代码实现",id:"代码实现",depth:3},{text:"压缩",id:"压缩",depth:2},{text:"删除 return 之后的语句",id:"删除-return-之后的语句",depth:3},{text:"思路分析",id:"思路分析-1",depth:4},{text:"代码实现",id:"代码实现-1",depth:4},{text:"删除没被使用的变量声明",id:"删除没被使用的变量声明",depth:3},{text:"思路分析",id:"思路分析-2",depth:4},{text:"代码实现",id:"代码实现-2",depth:4},{text:"效果演示",id:"效果演示",depth:2},{text:"总结",id:"总结",depth:2}],title:"21.实战案例_ 压缩混淆",headingTitle:"21.实战案例_ 压缩混淆",frontmatter:{}}}}]);