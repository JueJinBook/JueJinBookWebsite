"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["32172"],{259530:function(e,r,d){d.r(r),d.d(r,{default:()=>t});var n=d(552676),i=d(740453);let s=d.p+"static/image/1f645d71d5f0eef38a3fc8a3b3f353cd.dd80f82c.webp",h=d.p+"static/image/fa79b57312c9ef92389ae2d0a38a93ef.e77536cb.webp",c=d.p+"static/image/eac84580ea68c2135fd12085893731e6.2ecaba1f.webp",a=d.p+"static/image/7ee940e0df368e3629adef0df9483940.2e4ffcd7.webp";function l(e){let r=Object.assign({h1:"h1",a:"a",pre:"pre",code:"code",p:"p",strong:"strong",ul:"ul",li:"li",h2:"h2",ol:"ol",h3:"h3",img:"img",h4:"h4"},(0,i.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.h1,{id:"13浏览器缓存机制",children:["13.浏览器缓存机制",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#13浏览器缓存机制",children:"#"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-!",children:"注意：该知识点属于性能优化领域，并且整一章节都是一个面试题。\n"})}),"\n",(0,n.jsxs)(r.p,{children:["缓存可以说是性能优化中",(0,n.jsx)(r.strong,{children:"简单高效"}),"的一种优化方式了，它可以",(0,n.jsx)(r.strong,{children:"显著减少网络传输所带来的损耗"}),"。"]}),"\n",(0,n.jsx)(r.p,{children:"对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。"}),"\n",(0,n.jsx)(r.p,{children:"接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制："}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"缓存位置"}),"\n",(0,n.jsx)(r.li,{children:"缓存策略"}),"\n",(0,n.jsx)(r.li,{children:"实际场景应用缓存策略"}),"\n"]}),"\n",(0,n.jsxs)(r.h2,{id:"缓存位置",children:["缓存位置",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#缓存位置",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["从缓存位置上来说分为四种，并且各自有",(0,n.jsx)(r.strong,{children:"优先级"}),"，当依次查找缓存且都没有命中的时候，才会去请求网络"]}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsx)(r.li,{children:"Service Worker"}),"\n",(0,n.jsx)(r.li,{children:"Memory Cache"}),"\n",(0,n.jsx)(r.li,{children:"Disk Cache"}),"\n",(0,n.jsx)(r.li,{children:"Push Cache"}),"\n",(0,n.jsx)(r.li,{children:"网络请求"}),"\n"]}),"\n",(0,n.jsxs)(r.h3,{id:"service-worker",children:["Service Worker",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#service-worker",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"在上一章节中我们已经介绍了 Service Worker 的内容，这里就不演示相关的代码了。"}),"\n",(0,n.jsxs)(r.p,{children:["Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们",(0,n.jsx)(r.strong,{children:"自由控制"}),"缓存哪些文件、如何匹配缓存、如何读取缓存，并且",(0,n.jsx)(r.strong,{children:"缓存是持续性的"}),"。"]}),"\n",(0,n.jsxs)(r.p,{children:["当 Service Worker 没有命中缓存的时候，我们需要去调用 ",(0,n.jsx)(r.code,{children:"fetch"})," 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。",(0,n.jsx)(r.strong,{children:"但是不管我们是从 Memory Cache  中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。"})]}),"\n",(0,n.jsxs)(r.h3,{id:"memory-cache",children:["Memory Cache",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#memory-cache",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。",(0,n.jsx)(r.strong,{children:"但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。"})," 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。"]}),"\n",(0,n.jsx)(r.p,{children:"当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:a,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？"}),"\n",(0,n.jsxs)(r.p,{children:["先说结论，这是",(0,n.jsx)(r.strong,{children:"不可能"}),"的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JSS、HTML、CSS、图片等等。但是浏览器会把哪些文件丢进内存这个过程就很",(0,n.jsx)(r.strong,{children:"玄学"}),"了，我查阅了很多资料都没有一个定论。"]}),"\n",(0,n.jsx)(r.p,{children:"当然，我通过一些实践和猜测也得出了一些结论："}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"对于大文件来说，大概率是不存储在内存中的，反之优先"}),"\n",(0,n.jsx)(r.li,{children:"当前系统内存使用率高的话，文件优先存储进硬盘"}),"\n"]}),"\n",(0,n.jsxs)(r.h3,{id:"disk-cache",children:["Disk Cache",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#disk-cache",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache ",(0,n.jsx)(r.strong,{children:"胜在容量和存储时效性上。"})]}),"\n",(0,n.jsxs)(r.p,{children:["在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。",(0,n.jsx)(r.strong,{children:"并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。"})]}),"\n",(0,n.jsxs)(r.h3,{id:"push-cache",children:["Push Cache",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#push-cache",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。",(0,n.jsx)(r.strong,{children:"并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。"})]}),"\n",(0,n.jsxs)(r.p,{children:["Push Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后的一个趋势。这里推荐阅读 ",(0,n.jsx)(r.a,{href:"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/",target:"_blank",rel:"noopener noreferrer",children:"HTTP/2 push is tougher than I thought"})," 这篇文章，但是内容是英文的，我翻译一下文章中的几个结论，有能力的同学还是推荐自己阅读"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好"}),"\n",(0,n.jsxs)(r.li,{children:["可以推送 ",(0,n.jsx)(r.code,{children:"no-cache"})," 和 ",(0,n.jsx)(r.code,{children:"no-store"})," 的资源"]}),"\n",(0,n.jsx)(r.li,{children:"一旦连接被关闭，Push Cache 就被释放"}),"\n",(0,n.jsx)(r.li,{children:"多个页面可以使用相同的 HTTP/2  连接，也就是说能使用同样的缓存"}),"\n",(0,n.jsx)(r.li,{children:"Push Cache 中的缓存只能被使用一次"}),"\n",(0,n.jsx)(r.li,{children:"浏览器可以拒绝接受已经存在的资源推送"}),"\n",(0,n.jsx)(r.li,{children:"你可以给其他域名推送资源"}),"\n"]}),"\n",(0,n.jsxs)(r.h3,{id:"网络请求",children:["网络请求",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#网络请求",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。"}),"\n",(0,n.jsx)(r.p,{children:"那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容。"}),"\n",(0,n.jsxs)(r.h2,{id:"缓存策略",children:["缓存策略",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#缓存策略",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["通常浏览器缓存策略分为两种：",(0,n.jsx)(r.strong,{children:"强缓存"}),"和",(0,n.jsx)(r.strong,{children:"协商缓存"}),"，并且缓存策略都是通过设置 HTTP Header 来实现的。"]}),"\n",(0,n.jsxs)(r.h3,{id:"强缓存",children:["强缓存",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#强缓存",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["强缓存可以通过设置两种  HTTP Header 实现：",(0,n.jsx)(r.code,{children:"Expires"})," 和 ",(0,n.jsx)(r.code,{children:"Cache-Control"})," 。强缓存表示在缓存期间不需要请求，",(0,n.jsx)(r.code,{children:"state code"})," 为 200。"]}),"\n",(0,n.jsxs)(r.h4,{id:"expires",children:["Expires",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#expires",children:"#"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-http",children:"Expires: Wed, 22 Oct 2018 08:41:00 GMT\n"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"Expires"})," 是 HTTP/1 的产物，表示资源会在  ",(0,n.jsx)(r.code,{children:"Wed, 22 Oct 2018 08:41:00 GMT"}),"  后过期，需要再次请求。并且 ",(0,n.jsx)(r.code,{children:"Expires"})," ",(0,n.jsx)(r.strong,{children:"受限于本地时间"}),"，如果修改了本地时间，可能会造成缓存失效。"]}),"\n",(0,n.jsxs)(r.h4,{id:"cache-control",children:["Cache-control",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#cache-control",children:"#"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-http",children:"Cache-control: max-age=30\n"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"Cache-Control"})," 出现于 HTTP/1.1，",(0,n.jsxs)(r.strong,{children:["优先级高于 ",(0,n.jsx)(r.code,{children:"Expires"})]})," 。该属性值表示资源会在 30 秒后过期，需要再次请求。"]}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"Cache-Control"})," ",(0,n.jsx)(r.strong,{children:"可以在请求头或者响应头中设置"}),"，并且可以组合使用多种指令"]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:c,alt:""})}),"\n",(0,n.jsxs)(r.p,{children:["从图中我们可以看到，我们可以将",(0,n.jsx)(r.strong,{children:"多个指令配合起来一起使用"}),"，达到多个目的。比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等等。"]}),"\n",(0,n.jsx)(r.p,{children:"接下来我们就来学习一些常见指令的作用"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:h,alt:""})}),"\n",(0,n.jsxs)(r.h3,{id:"协商缓存",children:["协商缓存",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#协商缓存",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种  HTTP Header 实现：",(0,n.jsx)(r.code,{children:"Last-Modified"})," 和 ",(0,n.jsx)(r.code,{children:"ETag"})," 。"]}),"\n",(0,n.jsx)(r.p,{children:"当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:s,alt:""})}),"\n",(0,n.jsxs)(r.h4,{id:"last-modified-和-if-modified-since",children:["Last-Modified 和 If-Modified-Since",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#last-modified-和-if-modified-since",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"Last-Modified"})," 表示本地文件最后修改日期，",(0,n.jsx)(r.code,{children:"If-Modified-Since"})," 会将 ",(0,n.jsx)(r.code,{children:"Last-Modified"})," 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。"]}),"\n",(0,n.jsxs)(r.p,{children:["但是 ",(0,n.jsx)(r.code,{children:"Last-Modified"})," 存在一些弊端："]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 ",(0,n.jsx)(r.code,{children:"Last-Modified"})," 被修改，服务端不能命中缓存导致发送相同的资源"]}),"\n",(0,n.jsxs)(r.li,{children:["因为 ",(0,n.jsx)(r.code,{children:"Last-Modified"})," 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源"]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["因为以上这些弊端，所以在 HTTP / 1.1 出现了 ",(0,n.jsx)(r.code,{children:"ETag"})," 。"]}),"\n",(0,n.jsxs)(r.h4,{id:"etag-和-if-none-match",children:["ETag 和 If-None-Match",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#etag-和-if-none-match",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"ETag"})," 类似于文件指纹，",(0,n.jsx)(r.code,{children:"If-None-Match"})," 会将当前 ",(0,n.jsx)(r.code,{children:"ETag"})," 发送给服务器，询问该资源 ",(0,n.jsx)(r.code,{children:"ETag"})," 是否变动，有变动的话就将新的资源发送回来。并且 ",(0,n.jsx)(r.code,{children:"ETag"})," 优先级比 ",(0,n.jsx)(r.code,{children:"Last-Modified"})," 高。"]}),"\n",(0,n.jsxs)(r.p,{children:["以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。",(0,n.jsx)(r.strong,{children:"如果什么缓存策略都没设置，那么浏览器会怎么处理？"})]}),"\n",(0,n.jsxs)(r.p,{children:["对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 ",(0,n.jsx)(r.code,{children:"Date"})," 减去 ",(0,n.jsx)(r.code,{children:"Last-Modified"})," 值的 10% 作为缓存时间。"]}),"\n",(0,n.jsxs)(r.h2,{id:"实际场景应用缓存策略",children:["实际场景应用缓存策略",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#实际场景应用缓存策略",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"单纯了解理论而不付诸于实践是没有意义的，接下来我们来通过几个场景学习下如何使用这些理论。"}),"\n",(0,n.jsxs)(r.h3,{id:"频繁变动的资源",children:["频繁变动的资源",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#频繁变动的资源",children:"#"})]}),"\n",(0,n.jsxs)(r.p,{children:["对于频繁变动的资源，首先需要使用 ",(0,n.jsx)(r.code,{children:"Cache-Control: no-cache"})," 使浏览器每次都请求服务器，然后配合 ",(0,n.jsx)(r.code,{children:"ETag"})," 或者 ",(0,n.jsx)(r.code,{children:"Last-Modified"})," 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。"]}),"\n",(0,n.jsxs)(r.h3,{id:"代码文件",children:["代码文件",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#代码文件",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。"}),"\n",(0,n.jsxs)(r.p,{children:["一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 ",(0,n.jsx)(r.code,{children:"Cache-Control: max-age=31536000"}),"，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。"]}),"\n",(0,n.jsxs)(r.h2,{id:"小结",children:["小结",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"在这一章节中我们了解了浏览器的缓存机制，并且列举了几个场景来实践我们学习到的理论。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。"})]})}function x(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),e.components);return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}let t=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%2F13.%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.md"]={toc:[{text:"缓存位置",id:"缓存位置",depth:2},{text:"Service Worker",id:"service-worker",depth:3},{text:"Memory Cache",id:"memory-cache",depth:3},{text:"Disk Cache",id:"disk-cache",depth:3},{text:"Push Cache",id:"push-cache",depth:3},{text:"网络请求",id:"网络请求",depth:3},{text:"缓存策略",id:"缓存策略",depth:2},{text:"强缓存",id:"强缓存",depth:3},{text:"Expires",id:"expires",depth:4},{text:"Cache-control",id:"cache-control",depth:4},{text:"协商缓存",id:"协商缓存",depth:3},{text:"Last-Modified 和 If-Modified-Since",id:"last-modified-和-if-modified-since",depth:4},{text:"ETag 和 If-None-Match",id:"etag-和-if-none-match",depth:4},{text:"实际场景应用缓存策略",id:"实际场景应用缓存策略",depth:2},{text:"频繁变动的资源",id:"频繁变动的资源",depth:3},{text:"代码文件",id:"代码文件",depth:3},{text:"小结",id:"小结",depth:2}],title:"13.浏览器缓存机制",headingTitle:"13.浏览器缓存机制",frontmatter:{}}}}]);