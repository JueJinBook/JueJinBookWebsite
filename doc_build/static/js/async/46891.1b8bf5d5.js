"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["46891"],{143496:function(n,e,s){s.r(e),s.d(e,{default:()=>l});var c=s(552676),r=s(740453);let i=s.p+"static/image/347fdeeb805b47af9dc37a96cfe5f6e9~tplv-k3u1fbpfcp-zoom-1.image.98e785ab.png";function d(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",pre:"pre",code:"code",ol:"ol",li:"li",h4:"h4",strong:"strong",blockquote:"blockquote",ul:"ul",img:"img",em:"em",br:"br"},(0,r.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"20-连点成线的艺术semigroup半群-与-monoid幺半群",children:["20 连点成线的艺术：Semigroup（半群） 与 Monoid（幺半群）",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#20-连点成线的艺术semigroup半群-与-monoid幺半群",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"和 Functor（函子）、Monad（单子）一样，Semigroup（半群）和 Monoid（幺半群）也是正经八百的范畴论名词。"}),"\n",(0,c.jsx)(e.p,{children:"名字很恐怖，逻辑很经典，代码很简单。"}),"\n",(0,c.jsx)(e.p,{children:"其中，Semigroup（半群）可以通过我们最熟悉的加法乘法来推导，而 Monoid（幺半群）又可以基于 Semigroup 来推导。"}),"\n",(0,c.jsx)(e.p,{children:"也就是说，只要你学过小学数学，你就必然能理解啥是 Semigroup、啥是 Monoid。"}),"\n",(0,c.jsx)(e.p,{children:"话不多说，我们首先来推导一波 Semigroup。"}),"\n",(0,c.jsxs)(e.h2,{id:"semigroup半群-的数学背景",children:["Semigroup（半群） 的数学背景",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#semigroup半群-的数学背景",children:"#"})]}),"\n",(0,c.jsxs)(e.h3,{id:"理解结合律与闭合",children:["理解“结合律”与“闭合”",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#理解结合律与闭合",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"我们首先来看两个非常简单的小学算式："}),"\n",(0,c.jsx)(e.p,{children:"加法算式："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"1 + 2 + 3 \n"})}),"\n",(0,c.jsx)(e.p,{children:"乘法算式 ："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"1 * 2 * 3 \n"})}),"\n",(0,c.jsx)(e.p,{children:"加法和乘法有两个关键的共性："}),"\n",(0,c.jsxs)(e.ol,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"它们都满足结合律。"}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsx)(e.p,{children:"它们都是闭合的。"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"这两个共性，也正是 Semigroup 必须满足的性质。"}),"\n",(0,c.jsxs)(e.h4,{id:"结合律",children:["结合律",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#结合律",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["在数学中，结合律是指：只要运算数字的",(0,c.jsx)(e.strong,{children:"位置"}),"没有发生改变，运算顺序的调整不会改变运算的结果。"]}),"\n",(0,c.jsx)(e.p,{children:"以加法运算为例："}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"三个数相加，先把前面两个数相加，再加第三个数，或者先把后面两个数相加，再和第一个数相加，它们的和不变。——引自人教版《小学数学》四年级课本"}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"加法运算的结合律，用数学算式表达如下："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"(1 + 2) + 3 = 1 + (2 + 3) = 6\n"})}),"\n",(0,c.jsx)(e.p,{children:"以乘法运算为例："}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"三个数相乘，先把前两个数相乘，或先把后两个数相乘，积不变。 ——引自人教版《小学数学》四年级课本"}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"乘法运算的结合律，用数学算式表达如下："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"(1 * 2) * 3 = 1 * (2 * 3) = 6\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"在加法和乘法运算中，在各个数字位置不变的情况下，重新排列表达式中的括号，并不会影响最终的计算结果。 这样的运算就是符合结合律的。"})}),"\n",(0,c.jsxs)(e.h4,{id:"闭合",children:["闭合",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#闭合",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"在数学中，闭合意味着我们对某个集合的成员进行运算后，生成的仍然是这个集合的成员。"})}),"\n",(0,c.jsx)(e.p,{children:"以加法运算为例："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"1 + 2 + 3 = 6\n"})}),"\n",(0,c.jsx)(e.p,{children:"在这个算式中，“集合”就是整数类型数据。"}),"\n",(0,c.jsx)(e.p,{children:"1、2、3 三个整数做完加法后，得到的计算结果 6 也是一个整数。这也就是所谓的“闭合”。"}),"\n",(0,c.jsx)(e.p,{children:"对于任意的整数来说，它们之间的加法运算总是能算出一个新的整数，所以我们就说，整数在加法下是闭合的。"}),"\n",(0,c.jsx)(e.p,{children:"以乘法运算为例："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"1 * 2 * 3\n"})}),"\n",(0,c.jsx)(e.p,{children:"1 * 2 * 3 三个整数做完乘法后，得到的计算结果 6 也是一个整数。"}),"\n",(0,c.jsx)(e.p,{children:"类似的，对于任意的整数来说，它们之间的乘法运算总是能算出一个新的整数。所以我们就说，整数在乘法下也是闭合的。"}),"\n",(0,c.jsxs)(e.h4,{id:"理解数学中的-semigroup",children:["理解数学中的 Semigroup",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#理解数学中的-semigroup",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["理解了“",(0,c.jsx)(e.strong,{children:"结合律"}),"”和“",(0,c.jsx)(e.strong,{children:"闭合"}),"”，其实也就理解了什么是数学中的 ",(0,c.jsx)(e.strong,{children:"Semigroup"}),"："]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"在数学中，半群是闭合于结合性二元运算之下的集合 S 构成的代数结构。——wikipedia"}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["【划重点】：",(0,c.jsx)(e.strong,{children:"闭合、结合性、二元运算"})]}),"\n",(0,c.jsxs)(e.p,{children:["其中闭合和结合律我们楼上已经解释得透透的了，这里我想要强调的是“",(0,c.jsx)(e.strong,{children:"二元运算"}),"”。"]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["作者注：“二元运算”这里的“元”，映射到程序里就是指函数参数的数量。这一点我们在",(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7173591403639865377/section/7175423003319074876",target:"_blank",rel:"noopener noreferrer",children:"第15节"}),"有过详细的探讨。"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["我们前面学习过 Functor（函子）盒子，学习过 Monad（单子）盒子，这两个盒子有一个明显的共性——它们的计算单元都是",(0,c.jsx)(e.strong,{children:"一元函数"}),"："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"// Identity Functor\nconst Identity = x => ({\n  // functor 盒子的 map 方法，预期计算单元是一元函数\n  map: f => Identity(f(x)),\n  valueOf: () => x\n})   \n\n// 上一节实现的 Monad \nconst Monad = x => ({\n  map: f => Monad(f(x)),\n  // Monad 盒子的 flatMap 方法，预期计算单元是一元函数\n  flatMap: f => f(x),\n\n  valueOf: () => x,\n  inspect: () => `Monad {${x}}`,\n})\n"})}),"\n",(0,c.jsx)(e.p,{children:"而 Semigroup 直接把“二元运算”打在了公屏上，明牌告诉咱们 Semigroup 盒子的“基本行为”函数应该是一个二元函数。"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"小细节，大进步。"})}),"\n",(0,c.jsx)(e.p,{children:"具体进步在哪了，这里先按下不表（但其实标题中已经“表”过了，哈哈），我们一步一步来。"}),"\n",(0,c.jsxs)(e.h2,{id:"semigroup-在函数式编程中的形态",children:["Semigroup 在函数式编程中的形态",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#semigroup-在函数式编程中的形态",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"以加法/乘法运算为例，我们来重新捋一捋数学中形成 Semigroup 的逻辑："}),"\n",(0,c.jsx)(e.p,{children:"在整数运算的加法/乘法中，+/* 是一个运算符，可以用来计算两个任意的整数以获得另一个整数。因此，加法运算/乘法运算在所有可能的整数集合上形成一个 Semigroup。"}),"\n",(0,c.jsxs)(e.p,{children:["这个逻辑其实是可以直接往 JS 中做映射的——在 JS 中，我们同样有",(0,c.jsx)(e.strong,{children:"运算符"}),"、有包括整数在内的各种",(0,c.jsx)(e.strong,{children:"数据类型"}),"，同样可以实现各种各样的",(0,c.jsx)(e.strong,{children:"计算过程"}),"。"]}),"\n",(0,c.jsxs)(e.h3,{id:"js-语言中的-semigroup",children:["JS 语言中的 Semigroup",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#js-语言中的-semigroup",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"因此，首先我们可以明确的是，整数的加法和乘法运算即便是到了 JS 里面，也是标准的 Semigroup。"}),"\n",(0,c.jsx)(e.p,{children:"除了整数的加法和乘法之外，常见的几个 JS 中的 Semigroup 还包括："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"(boolean, &&)，布尔值的“与”运算"}),"\n",(0,c.jsx)(e.li,{children:"(boolean, ||)，布尔值的“或”运算"}),"\n",(0,c.jsx)(e.li,{children:"(string, +/concat) ，字符串的拼接（并集）运算。"}),"\n",(0,c.jsx)(e.li,{children:"(Array, concat)，数组的拼接（并集）运算"}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["接下来我会分别对着四种运算进行举例，这其中，尤其需要引起大家关注的是",(0,c.jsx)(e.strong,{children:"字符串和数组的拼接（并集）运算"}),"。"]}),"\n",(0,c.jsxs)(e.h4,{id:"布尔值的与或运算",children:["布尔值的“与”、“或”运算",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#布尔值的与或运算",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"示例3个布尔值如下："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"true \nfalse \ntrue\n"})}),"\n",(0,c.jsx)(e.p,{children:"验证结合律&闭合原则代码如下："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"const a = true\nconst b = false\nconst c = true\n\n// 与运算结果\nconst resOfAnd = a && b && c \n\n// 或运算结果\nconst resOfOr = a || b || c \n\n\n// 验证与运算是否符合结合律\nconst isAndAssociative = ((a && b) && c) === (a && (b && c))\n// 验证或运算是否符合结合律\nconst isOrAssociative = ((a || b) || c) === (a || (b || c))\n\n// 验证与运算是否符合闭合原则\nconst isAndClosed = (typeof resOfAnd) === 'boolean'  \n// 验证或运算是否符合闭合原则\nconst isOrClosed = (typeof resOfOr) === 'boolean'  \n\n// true true true true\nconsole.log(\n  isAndAssociative, \n  isOrAssociative,\n  isAndClosed,\n  isOrClosed\n)  \n"})}),"\n",(0,c.jsxs)(e.h4,{id:"字符串的拼接并集运算",children:["字符串的拼接（并集）运算",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串的拼接并集运算",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"示例字符串拼接（取并集）运算如下："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"'xiuyan' + 'is' + 'handsome'\n"})}),"\n",(0,c.jsx)(e.p,{children:"验证结合律&闭合原则代码如下："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"const a = 'xiuyan'  \nconst b = 'is'  \nconst c = 'handsome'    \n\nconst res = a + b + c \n\n// 验证是否符合结合律\nconst isAssociative = (a + b) + c === a + (b + c)       \n\n// 验证是否符合闭合原则\nconst isClosed = (typeof res) === 'string'\n\n// true true\nconsole.log(isAssociative, isClosed)  \n"})}),"\n",(0,c.jsxs)(e.p,{children:["这个示例使用了 ",(0,c.jsx)(e.code,{children:"+"})," 运算符来做字符串拼接，这其实也是许多同学在业务代码中最习惯使用的一种字符串拼接姿势。但是在这里，我更想要引出的其实是另一个东西： ",(0,c.jsx)(e.code,{children:"String.prototype.concat()"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["上面的 + 运算符示例可以用 ",(0,c.jsx)(e.code,{children:"String.prototype.concat()"}),"改写如下："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"const a = 'xiuyan'  \nconst b = 'is'  \nconst c = 'handsome'    \n\n// 等价于 a + b + c\nconst res = a.concat(b).concat(c)    \n\n\n// 验证是否符合结合律\nconst isAssociative = a.concat(b).concat(c) === a.concat(b.concat(c))\n\n// 验证是否符合闭合原则\nconst isClosed = (typeof res) === 'string'\n\n// true true\nconsole.log(isAssociative, isClosed)  \n"})}),"\n",(0,c.jsxs)(e.p,{children:["对于 JS 字符串来说，要想达到“取并集”的目的，使用 + 运算符和 ",(0,c.jsx)(e.code,{children:"concat()"}),"都是可行的。"]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsx)(e.p,{children:"作者注：字符串“取并集”本身也是一道经典的笔试题，它的解法并不止 + 和 concat() 这两种。考虑到其它解法和本文主题的关联度不高，此处不多赘述。"}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["但是对于数组来说，",(0,c.jsx)(e.code,{children:"+"})," 运算符是走不通的。实现数组的“取并集”，我们可以借助 ",(0,c.jsx)(e.code,{children:"..."})," 运算符，也可以借助 ",(0,c.jsx)(e.code,{children:"Array.prototype.reduce()"}),"。但是最为直接的解法，还得是 ",(0,c.jsx)(e.code,{children:"Array.prototype.concat()"})," 。"]}),"\n",(0,c.jsxs)(e.h4,{id:"数组的拼接并集运算",children:["数组的拼接（并集）运算",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数组的拼接并集运算",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"考虑这样一个数组拼接（取并集）的算式："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"[1, 2] + [3, 4] + [5, 6]\n"})}),"\n",(0,c.jsx)(e.p,{children:"验证结合律&闭合原则代码如下："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"const a = [1, 2]\nconst b = [3, 4]\nconst c = [5, 6]\n\n// a + b + c\nconst res = a.concat(b).concat(c)    \n\n\n// 验证是否符合结合律\n// 注意，这里我们判断的是数组的内容是否相等，而不是引用是否相等\nconst isAssociative = a.concat(b).concat(c).toString() == a.concat(b.concat(c)).toString()\n\n// 验证是否符合闭合原则\nconst isClosed = res instanceof Array\n\n// true true\nconsole.log(isAssociative, isClosed)  \n"})}),"\n",(0,c.jsx)(e.p,{children:"也就是说呀，JS 中数组和字符串的”取并集“运算，都属于是 Semigroup。"}),"\n",(0,c.jsx)(e.p,{children:"行文至此，我们不妨小小地总结一下数组和字符串表现出来的共性："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"数组取并集运算能够形成一个 Semigroup（半群），字符串取并集运算也能够形成一个 Semigroup（半群）。"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"数组取并集的方法是"})," ",(0,c.jsx)(e.code,{children:"concat()"}),(0,c.jsx)(e.strong,{children:"，字符串取并集的方法也是"})," ",(0,c.jsx)(e.code,{children:"concat()"}),(0,c.jsx)(e.strong,{children:"。"})]}),"\n",(0,c.jsx)(e.p,{children:"这也太巧了吧！缘，妙不可言！"}),"\n",(0,c.jsxs)(e.p,{children:["但与其说这是一种巧合，不如说这是一种",(0,c.jsx)(e.strong,{children:"模式"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["因为在函数式编程的实践中，",(0,c.jsxs)(e.strong,{children:["Semigroup 盒子的接口方法（也就是我们常说的“基础行为”）正是这个 ",(0,c.jsx)(e.code,{children:"concat()"}),"！"]})]}),"\n",(0,c.jsxs)(e.h3,{id:"函数式编程中的-semigroup-盒子",children:["函数式编程中的 Semigroup 盒子",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数式编程中的-semigroup-盒子",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"学到这里我们已经知道，Semigroup 中总是有以下两个要素："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.strong,{children:"运算数"}),"：参与运算的数据。比如加法运算中的 1、2、3，与运算中的 true、false 等。"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.strong,{children:"运算符"}),"：执行运算的符号。比如 +、*、||、&& 等等等等......"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["映射到函数式编程来看的话，运算数可以理解为",(0,c.jsx)(e.strong,{children:"函数的入参"}),"，运算符则可以被抽象为",(0,c.jsx)(e.strong,{children:"一个 concat() 函数"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"接下来我们就以加法运算为例，演示一下这个从数学映射到代码的过程："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"// 定义一个类型为 Add 的 Semigroup 盒子\nconst Add = (value) => ({\n  value,  \n  // concat 接收一个类型为 Add 的 Semigroup 盒子作为入参\n  concat: (box) => Add(value + box.value)\n})   \n\n// 输出一个 value=6 的 Add 盒子\nAdd(1).concat(Add(2)).concat(Add(3))\n"})}),"\n",(0,c.jsxs)(e.p,{children:["在这段代码中，我们将运算符 ",(0,c.jsx)(e.code,{children:"concat()"})," 和运算数 ",(0,c.jsx)(e.code,{children:"value"})," 都包裹在了一个名为 ",(0,c.jsx)(e.code,{children:"Add"})," 的盒子中。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"concat()"})," 接口能够同时拿到",(0,c.jsx)(e.strong,{children:"当前盒子"}),"的运算数 ",(0,c.jsx)(e.code,{children:"value"}),"和",(0,c.jsx)(e.strong,{children:"下一个盒子"}),"的运算数 ",(0,c.jsx)(e.code,{children:"box.value"}),"，它会基于这两个运算数执行",(0,c.jsx)(e.strong,{children:"二元运算"}),"，最后把",(0,c.jsx)(e.strong,{children:"二元运算"}),"的结果包裹在一个新的 ",(0,c.jsx)(e.code,{children:"Add"})," 盒子中返回。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"concat()"})," 接口是 Semigroup 盒子的核心，它能够消化任何可能的 Semigroup 运算。本节标题中的“连点成线”描述的就是 ",(0,c.jsx)(e.code,{children:"concat()"}),"接口的特征：",(0,c.jsxs)(e.strong,{children:[(0,c.jsx)(e.code,{children:"concat()"}),"接口宛如一条【线】，它能够将链式调用中前后相邻的两个【点】（也就是“盒子”）串联起来，进行盒子间的二元运算。"]})]}),"\n",(0,c.jsxs)(e.p,{children:["我们可以用",(0,c.jsx)(e.code,{children:"Semigroup(x).concat(Semigroup(y))"})," 来表示一个最小的二元运算单元，一个 Semigroup 盒子的二元运算过程就如图所示："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:i,alt:""})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"concat()"}),"函数能够消化任何可能的 Semigroup 运算。我们把加法盒子 ",(0,c.jsx)(e.code,{children:"Add"})," 中的 ",(0,c.jsx)(e.code,{children:"concat()"})," 函数稍作调整，把加号替换为乘号，就能够得到一个乘法运算的 Semigroup 盒子："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"// 定义一个类型为 Multi 的 Semigroup 盒子\nconst Multi = (value) => ({\n  value,  \n  // concat 接收一个类型为 Multi 的Semigroup 盒子作为入参\n  concat: (box) => Multi(value * box.value)\n})   \n\n// 输出一个 value=60 的 Multi 盒子\nMulti(3).concat(Multi(4)).concat(Multi(5))\n"})}),"\n",(0,c.jsxs)(e.p,{children:["形如 Add 盒子、Multi 盒子这样，实现了 ",(0,c.jsx)(e.code,{children:"concat()"}),"接口的盒子，就是 ",(0,c.jsx)(e.strong,{children:"Semigroup"}),"（半群）盒子。"]}),"\n",(0,c.jsxs)(e.h2,{id:"由-semigroup-推导-monoid",children:["由 Semigroup 推导 Monoid",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#由-semigroup-推导-monoid",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"理解了 Semigroup（半群），也就理解了 Monoid（幺半群）。"}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["A ",(0,c.jsx)(e.em,{children:"monoid"})," is an algebraic structure intermediate between ",(0,c.jsx)(e.em,{children:"semigroups"})," and groups, and is a ",(0,c.jsx)(e.em,{children:"semigroup"})," having an identity element. ——Wikipedia",(0,c.jsx)(e.br,{}),"\n","修言直译：Monoid 是一种介于 Semigroup 和 group 之间的代数结构，它是一个拥有了 identity element 的半群。"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["【划重点】：Monoid 是一个拥有了 identity element 的半群——",(0,c.jsx)(e.strong,{children:"Monoid = Semigroup + identity element"})]}),"\n",(0,c.jsx)(e.p,{children:"那么什么是 identity element 呢？"}),"\n",(0,c.jsxs)(e.p,{children:["这个东西在数学上叫做“单位元”。 单位元的特点在于，",(0,c.jsx)(e.strong,{children:"它和任何运算数相结合时，都不会改变那个运算数"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["在函数式编程中，单位元也是一个函数，我们一般把它记为“",(0,c.jsx)(e.code,{children:"empty()"})," 函数”。"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsxs)(e.strong,{children:["也就是说，Monoid = Semigroup + ",(0,c.jsx)(e.code,{children:"empty()"})," 函数。"]})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"empty()"})," 函数的实现取决于运算符的特征。比如说，加法运算的单位元，就是一个恒定返回 Add(0) 的函数："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"// 定义一个类型为 Add 的 Semigroup 盒子\nconst Add = (value) => ({\n  value,  \n  // concat 接收一个类型为 Add 的 Semigroup 盒子作为入参\n  concat: (box) => Add(value + box.value)\n})   \n\n\n// 这个 empty() 函数就是加法运算的单位元\nAdd.empty = () => Add(0)\n\n// 输出一个 value=3 的 Add 盒子\nAdd.empty().concat(Add(1)).concat(Add(2))\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"empty()"})," 是单位元的代码形态。单位元的特点在于，",(0,c.jsx)(e.strong,{children:"它和任何运算数相结合时，都不会改变那个运算数"}),"。 也就是说，",(0,c.jsx)(e.code,{children:"empty()"}),(0,c.jsx)(e.strong,{children:"函数的返回值和任何运算数相结合时，也都不会改变那个运算数。"})]}),"\n",(0,c.jsxs)(e.p,{children:["以加法运算为例，无论我是把 ",(0,c.jsx)(e.code,{children:"empty()"})," 放在 ",(0,c.jsx)(e.code,{children:"concat()"}),"运算符的右边："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"const testValue = 1  \nconst testBox = Add(testValue)  \n\n// 验证右侧的 identity（恒等性），rightIdentity 结果为 true\nconst rightIdentity = testBox.concat(Add.empty()).value === testValue\n"})}),"\n",(0,c.jsxs)(e.p,{children:["还是把 ",(0,c.jsx)(e.code,{children:"empty()"}),"放在 ",(0,c.jsx)(e.code,{children:"concat()"}),"运算符的左边："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"const testValue = 1  \nconst testBox = Add(testValue)    \n\n// 验证左侧的 identity（恒等性），leftIdentity 结果为 true\nconst leftIdentity = Add.empty().concat(testBox).value === testValue\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"empty()"})," 总是不会改变运算符另一侧的 ",(0,c.jsx)(e.code,{children:"testBox"})," 盒子的值，这就是“单位元”特征的体现。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"任意一个 Semigroup 盒子与"})," ",(0,c.jsx)(e.code,{children:"empty()"}),(0,c.jsxs)(e.strong,{children:["一起进行",(0,c.jsx)(e.code,{children:"concat()"}),"二元运算时，其运算结果都一定恒等于那个 Semigroup 盒子本身的值。"]})]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"形如这样的"})," ",(0,c.jsx)(e.code,{children:"empty()"}),(0,c.jsx)(e.strong,{children:"函数，就是“单位元”思想在函数式编程中的实践。"})]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"而实现了"})," ",(0,c.jsx)(e.code,{children:"empty()"}),(0,c.jsx)(e.strong,{children:"函数的 Semigroup 盒子，就是 Monoid 盒子。"})]}),"\n",(0,c.jsxs)(e.h2,{id:"小结",children:["小结",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["本节，我们从最简单的小学数学算式开始，一步一步地从数学中的“群论”推导出了 Semigroup 盒子，接着又基于 Semigroup 推导出了 Monoid 这个更为强大的盒子。相信学到这里，你已经对“Semigroup 和 Monoid ",(0,c.jsx)(e.strong,{children:"是什么"}),"”的问题了然于胸了。"]}),"\n",(0,c.jsx)(e.p,{children:"不过，此时此刻，你脑海中一定还有许多新的问题。"}),"\n",(0,c.jsxs)(e.p,{children:["比如：",(0,c.jsx)(e.code,{children:"concat()"})," 接口除了能做做加法乘法、求个并集之外，还有什么别的神通吗？"]}),"\n",(0,c.jsxs)(e.p,{children:["再比如：Monoid 盒子比起 Semigroup 仅仅是多了一个 ",(0,c.jsx)(e.code,{children:"empty()"})," 函数，这个单薄的",(0,c.jsx)(e.code,{children:"empty()"}),"函数真的有存在的必要吗？"]}),"\n",(0,c.jsx)(e.p,{children:"以及，本文中首次提到了盒子模式下的“二元运算”，这“二元运算”背后又有着什么样的玄机呢？"}),"\n",(0,c.jsx)(e.p,{children:"要想理解到这个层面，我们还需要从实践的角度出发，对 Monoid 作更进一步的探讨。"}),"\n",(0,c.jsx)(e.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function o(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(d,{...n})}):d(n)}let l=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["JavaScript%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F20%20%E8%BF%9E%E7%82%B9%E6%88%90%E7%BA%BF%E7%9A%84%E8%89%BA%E6%9C%AF%EF%BC%9ASemigroup%EF%BC%88%E5%8D%8A%E7%BE%A4%EF%BC%89%20%E4%B8%8E%20Monoid%EF%BC%88%E5%B9%BA%E5%8D%8A%E7%BE%A4%EF%BC%89.md"]={toc:[{text:"Semigroup（半群） 的数学背景",id:"semigroup半群-的数学背景",depth:2},{text:"理解“结合律”与“闭合”",id:"理解结合律与闭合",depth:3},{text:"结合律",id:"结合律",depth:4},{text:"闭合",id:"闭合",depth:4},{text:"理解数学中的 Semigroup",id:"理解数学中的-semigroup",depth:4},{text:"Semigroup 在函数式编程中的形态",id:"semigroup-在函数式编程中的形态",depth:2},{text:"JS 语言中的 Semigroup",id:"js-语言中的-semigroup",depth:3},{text:"布尔值的“与”、“或”运算",id:"布尔值的与或运算",depth:4},{text:"字符串的拼接（并集）运算",id:"字符串的拼接并集运算",depth:4},{text:"数组的拼接（并集）运算",id:"数组的拼接并集运算",depth:4},{text:"函数式编程中的 Semigroup 盒子",id:"函数式编程中的-semigroup-盒子",depth:3},{text:"由 Semigroup 推导 Monoid",id:"由-semigroup-推导-monoid",depth:2},{text:"小结",id:"小结",depth:2}],title:"20 连点成线的艺术：Semigroup（半群） 与 Monoid（幺半群）",headingTitle:"20 连点成线的艺术：Semigroup（半群） 与 Monoid（幺半群）",frontmatter:{}}}}]);