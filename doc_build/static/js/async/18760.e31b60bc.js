"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["18760"],{393549:function(e,n,r){r.r(n),r.d(n,{default:()=>k});var s=r(552676),a=r(740453);let i=r.p+"static/image/a12a6ddc8cb9710f7f98b4170c010f88.088074c9.gif",d=r.p+"static/image/1fde925f7942b6ea37d0be1311e51d37.086b841d.gif",t=r.p+"static/image/e6b2f769708a215c2717d4dec93ef611.72f7efe5.webp",c=r.p+"static/image/4c6443418d5c84edad95175f00f22e65.200ee490.webp",l=r.p+"static/image/7d4e2cb5deda217f13a327162c352f18.e3091332.webp",o=r.p+"static/image/b4fb16d7507983599f61ab0b3354c84d.b3c61c29.webp",h=r.p+"static/image/c0220b86dbe1026c59b863881971476a.40400b15.webp",x=r.p+"static/image/7d9312c248840100fdae5b719e0beeb3.6cafdc1a.webp",m=r.p+"static/image/5f59378db79dfb1313533b51948e7b0c.15e859bb.webp",p=r.p+"static/image/0f40c2e081561f28a87c75abf27ddaae.1a7f9fdd.webp",j=r.p+"static/image/aebd1695fc0b710f91a7fa09a9fcb893.6d7e8df5.webp",g=r.p+"static/image/60287edb0b3aeb82cd244d6afb515d64.b2d402ac.webp",u=r.p+"static/image/88d40da18af7dd261f5090bfb3fa6ba2.c4f8fe35.webp",f=r.p+"static/image/c4175f3d4c1535c73703ee7c320d6494.b81ace04.webp",w=r.p+"static/image/088bc84e57700448237ceef9f7447c64.5b804d54.webp",b=r.p+"static/image/7c1983fbd59d857928d7edce51367ff6.636d05b8.webp",I=r.p+"static/image/bdabfbac43e7acf6471c3a325f7aa70d.2ec1cff8.webp";function E(e){let n=Object.assign({h1:"h1",a:"a",p:"p",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",img:"img",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"166-考试系统答卷微服务",children:["166. 考试系统：答卷微服务",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#166-考试系统答卷微服务",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节回过头来继续写答卷微服务。"}),"\n",(0,s.jsx)(n.p,{children:"首先创建答卷表："}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"字段名"}),"\n",(0,s.jsx)(n.th,{children:"数据类型"}),"\n",(0,s.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"id"}),"\n",(0,s.jsx)(n.td,{children:"INT"}),"\n",(0,s.jsx)(n.td,{children:"答卷ID"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"answererId"}),"\n",(0,s.jsx)(n.td,{children:"INT"}),"\n",(0,s.jsx)(n.td,{children:"答题人ID"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"examId"}),"\n",(0,s.jsx)(n.td,{children:"INT"}),"\n",(0,s.jsx)(n.td,{children:"答卷ID"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"content"}),"\n",(0,s.jsx)(n.td,{children:"TEXT"}),"\n",(0,s.jsx)(n.td,{children:"答卷JSON"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"score"}),"\n",(0,s.jsx)(n.td,{children:"INT"}),"\n",(0,s.jsx)(n.td,{children:"分数"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"create_time"}),"\n",(0,s.jsx)(n.td,{children:"DATETIME"}),"\n",(0,s.jsx)(n.td,{children:"创建时间"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"update_time"}),"\n",(0,s.jsx)(n.td,{children:"DATETIME"}),"\n",(0,s.jsx)(n.td,{children:"更新时间"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"改下 schema 文件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:"image.png"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"\nmodel User {\n  id  Int @id @default(autoincrement())\n  username String @db.VarChar(50) @unique\n  password String @db.VarChar(50)\n  email String @db.VarChar(50)\n  createTime DateTime @default(now())\n  updateTime DateTime @updatedAt\n\n  exams  Exam[]\n  answers Answer[]\n}\n\nmodel Exam {\n  id  Int @id @default(autoincrement())\n  name String @db.VarChar(50)\n  isPublish Boolean @default(false)\n  isDelete Boolean @default(false)\n  content String @db.Text \n  createTime DateTime @default(now())\n  updateTime DateTime @updatedAt\n\n  createUserId Int\n  createUser     User  @relation(fields: [createUserId], references: [id])\n\n  answers Answer[]\n}\n\n\nmodel Answer {\n  id  Int @id @default(autoincrement())\n  content String @db.Text \n  score Int\n  createTime DateTime @default(now())\n  updateTime DateTime @updatedAt\n\n  answererId Int\n  answerer     User  @relation(fields: [answererId], references: [id])\n\n  examId Int\n  exam     Exam  @relation(fields: [examId], references: [id])\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"answer 和 user 还有 exam 都是多对一关系。"}),"\n",(0,s.jsx)(n.p,{children:"所以在 User、Exam 的 modal 里都有个 answer 数组。"}),"\n",(0,s.jsx)(n.p,{children:"创建这个表："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npx prisma migrate dev --name answer\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"生成的 sql 没问题。"}),"\n",(0,s.jsx)(n.p,{children:"数据库里也多了这个表："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"然后来实现接口："}),"\n",(0,s.jsx)(n.p,{children:"有这些接口："}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"接口路径"}),"\n",(0,s.jsx)(n.th,{children:"请求方式"}),"\n",(0,s.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/answer/add"}),"\n",(0,s.jsx)(n.td,{children:"POST"}),"\n",(0,s.jsx)(n.td,{children:"添加答卷"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/answer/list"}),"\n",(0,s.jsx)(n.td,{children:"GET"}),"\n",(0,s.jsx)(n.td,{children:"答卷列表"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"/answer/export"}),"\n",(0,s.jsx)(n.td,{children:"GET"}),"\n",(0,s.jsx)(n.td,{children:"导出答卷列表为 excel"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"先实现添加答卷，在 AnswerController 加一个路由："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Post('add')\n@RequireLogin()\nasync add(@Body() addDto: AnswerAddDto, @UserInfo('userId') userId: number){\n    return this.answerService.add(addDto, userId)\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"创建用到的 dto："}),"\n",(0,s.jsx)(n.p,{children:"dto/answer-add.dto.ts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class AnswerAddDto {\n    @IsNotEmpty({message: '答卷内容不能为空'})\n    @IsString()\n    content: string;\n\n    @IsNotEmpty()\n    examId: number;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后在 AnswerService 实现下 add 方法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Inject(PrismaService)\nprivate prismaService: PrismaService;\n\nasync add(dto: AnswerAddDto, userId: number) {\n    return this.prismaService.answer.create({\n      data: {\n        content: dto.content,\n        score: 0,\n        answerer: {\n          connect: {\n              id: userId\n          }\n        },\n        exam: {\n          connect: {\n              id: dto.examId\n          }\n        }\n      },\n    })\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里用到了 PrismaService，并且还需要登录。"}),"\n",(0,s.jsx)(n.p,{children:"我们引入下 PrismaModule 和 CommonModule 模块，注册全局 Guard："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { AnswerController } from './answer.controller';\nimport { AnswerService } from './answer.service';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { PrismaModule } from '@app/prisma';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthGuard, CommonModule } from '@app/common';\n\n@Module({\n  imports: [\n    PrismaModule,\n    CommonModule,\n    ClientsModule.register([\n      {\n        name: 'EXAM_SERVICE',\n        transport: Transport.TCP,\n        options: {\n          port: 8888,\n        },\n      },\n    ])\n  ],\n  controllers: [AnswerController],\n  providers: [AnswerService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard\n    }\n  ],\n})\nexport class AnswerModule {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后在 main.ts 里启用下 ValidationPipe"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"app.enableCors();\napp.useGlobalPipes(new ValidationPipe({ transform: true }));\n"})}),"\n",(0,s.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev answer\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"添加成功。"}),"\n",(0,s.jsx)(n.p,{children:"然后我们实现下 list 和 find 接口："}),"\n",(0,s.jsx)(n.p,{children:"添加两个路由："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Get('list')\n@RequireLogin()\nasync list(@Query('examId') examId: string){\n    if(!examId) {\n      throw new BadRequestException('examId 不能为空');\n    }\n    return this.answerService.list(+examId)\n}\n\n@Get('find/:id')\n@RequireLogin()\nasync find(@Param('id') id: string){\n    return this.answerService.find(+id)\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"实现下 service："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async list(examId: number) {\n    return this.prismaService.answer.findMany({\n      where: {\n        examId\n      },\n      include: {\n        exam: true,\n        answerer: true\n      }\n    })\n}\n\nasync find(id: number) {\n    return this.prismaService.answer.findUnique({\n      where: {\n        id\n      },\n      include: {\n        exam: true,\n        answerer: true\n      }\n    })\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里关联查出 exam 和 answerer 的信息。"}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"list 和 find 接口都没问题。"}),"\n",(0,s.jsx)(n.p,{children:"然后再实现导出 excel 的接口："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Get('export')\nasync export(@Query('examId') examId: string){\n    if(!examId) {\n      throw new BadRequestException('examId 不能为空');\n    }\n    return this.answerService.export(+examId)\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里用到 excel 的功能，创建个 lib："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g lib excel\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save exceljs\n"})}),"\n",(0,s.jsx)(n.p,{children:"改下 ExcelService："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable, StreamableFile } from '@nestjs/common';\nimport { Workbook } from 'exceljs';\nimport { PassThrough } from 'stream';\n\n@Injectable()\nexport class ExcelService {\n\n    async export() {\n        const workbook = new Workbook();\n\n        const worksheet = workbook.addWorksheet('guang111');\n    \n        worksheet.columns = [\n            { header: 'ID', key: 'id', width: 20 },\n            { header: '姓名', key: 'name', width: 30 },\n            { header: '出生日期', key: 'birthday', width: 30},\n            { header: '手机号', key: 'phone', width: 50 }\n        ];\n    \n        const data = [\n            { id: 1, name: '光光', birthday: new Date('1994-07-07'), phone: '13255555555' },\n            { id: 2, name: '东东', birthday: new Date('1994-04-14'), phone: '13222222222' },\n            { id: 3, name: '小刚', birthday: new Date('1995-08-08'), phone: '13211111111' }\n        ]\n        worksheet.addRows(data);\n\n        const stream = new PassThrough();\n\n        await workbook.xlsx.write(stream);\n\n        return new StreamableFile(stream, {\n            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n            disposition: 'attachment; filename=exported-data.xlsx'\n        });\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里 stream 是 node 内置模块，new PassThrough 创建一个流。"}),"\n",(0,s.jsx)(n.p,{children:"然后返回 StreamalbeFile，这个处理了 transfer-encoding:chunked，也就是支持流式传输。"}),"\n",(0,s.jsx)(n.p,{children:"在 answer 微服务引入这个模块："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Inject(ExcelService)\nexcelService: ExcelService;\n\n@Get('export')\nasync export(@Query('examId') examId: string){\n    if(!examId) {\n      throw new BadRequestException('examId 不能为空');\n    }\n\n    return this.excelService.export()\n}\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"试一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"2024-08-27 09.50.27.gif"})}),"\n",(0,s.jsx)(n.p,{children:"导出成功。"}),"\n",(0,s.jsx)(n.p,{children:"然后我们传入具体的参数："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable, StreamableFile } from '@nestjs/common';\nimport { Column, Workbook } from 'exceljs';\nimport { PassThrough } from 'stream';\n\n@Injectable()\nexport class ExcelService {\n\n    async export(columns: Partial<Column>[], data: Array<Record<string, any>>, filename: string) {\n        const workbook = new Workbook();\n\n        const worksheet = workbook.addWorksheet('guang111');\n    \n        worksheet.columns = columns;\n\n        worksheet.addRows(data);\n\n        const stream = new PassThrough();\n\n        await workbook.xlsx.write(stream);\n\n        return new StreamableFile(stream, {\n            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n            disposition: 'attachment; filename=' + filename\n        });\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"传入 columns、data 和 filename，来动态生成 excel。"}),"\n",(0,s.jsx)(n.p,{children:"调用的地方传下参数："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Get('export')\nasync export(@Query('examId') examId: string){\n    if(!examId) {\n      throw new BadRequestException('examId 不能为空');\n    }\n\n    const data = await this.answerService.list(+examId);\n\n    const columns = [\n        { header: 'ID', key: 'id', width: 20 },\n        { header: '分数', key: 'score', width: 30 },\n        { header: '答题人', key: 'answerer', width: 30 },\n        { header: '试卷', key: 'exam', width: 30 },\n        { header: '创建时间', key: 'createTime', width: 30},\n    ]\n\n    const res = data.map(item => {\n      return {\n        id: item.id,\n        score: item.score,\n        answerer: item.answerer.username,\n        exam: item.exam.name,\n        createTime: item.createTime\n      }\n    })\n    return this.excelService.export(columns, res, 'answers.xlsx')\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"试一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"导出成功。"}),"\n",(0,s.jsx)(n.p,{children:"案例代码在小册仓库："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/exam-system",target:"_blank",rel:"noopener noreferrer",children:"后端代码"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节我们实现了答卷微服务，包括创建答卷、答卷列表、答卷详情接口，导出答卷列表 excel。"}),"\n",(0,s.jsx)(n.p,{children:"并且封装了 excel 的 lib。"}),"\n",(0,s.jsx)(n.p,{children:"这样，答卷微服务就完成了。"})]})}function v(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(E,{...e})}):E(e)}let k=v;v.__RSPRESS_PAGE_META={},v.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F166.%20%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%AD%94%E5%8D%B7%E5%BE%AE%E6%9C%8D%E5%8A%A1.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"166. 考试系统：答卷微服务",headingTitle:"166. 考试系统：答卷微服务",frontmatter:{}}}}]);