"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["31318"],{728580:function(e,i,r){r.r(i),r.d(i,{default:()=>g});var n=r(552676),s=r(740453);let c=r.p+"static/image/b088e420525bb109431e87aa126e7915.fb5bc3ef.webp",l=r.p+"static/image/f58d3e5afaedf5ee0d8610b06b6ba367.4eccffa3.webp",h=r.p+"static/image/c9d31cc0c80162d3a962b2f9ab58e814.bec2ad39.webp",t=r.p+"static/image/399a715c780936dbcce6cc891107790a.d98b5b3b.webp",a=r.p+"static/image/4219c6eab20e3968b71d5f07dc3128c2.567f9a9a.webp",d=r.p+"static/image/b3956e6f24e2aca99110274c3a134bc4.372e012b.webp",p=r.p+"static/image/5406b7f21fc83ecd3c3cf8cfef097100.0bc97993.webp",x=r.p+"static/image/a3ea832b62767c69655d1295c40ef52e.9fc5f1a4.webp",j=r.p+"static/image/a3f35bd0fcbbabe6483e65a4e3fcb674.65913b8e.webp",o=r.p+"static/image/5796a714f240b6e34e0b54663dffb491.ee7f8f0e.webp";function b(e){let i=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",h2:"h2",ol:"ol",strong:"strong",img:"img",h3:"h3",pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.h1,{id:"14文档部署-用-vercel-部署你的线上文档",children:["14.文档部署： 用 Vercel 部署你的线上文档",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#14文档部署-用-vercel-部署你的线上文档",children:"#"})]}),"\n",(0,n.jsx)(i.p,{children:"文档网站需要发布到互联网上才能让更多的人知道。传统的发布方法需要做以下准备。"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Linux服务器；"}),"\n",(0,n.jsx)(i.li,{children:"网页服务软件 Nginx；"}),"\n",(0,n.jsx)(i.li,{children:"购买域名 + 实名认证；"}),"\n",(0,n.jsx)(i.li,{children:"HTTPS 证书；"}),"\n",(0,n.jsx)(i.li,{children:"Sftp 上传工具；"}),"\n",(0,n.jsx)(i.li,{children:"Github Action CI 自动发布最新文档。"}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"这里面租用服务器和域名需要一笔花费。安装 Linux、Nginx，配置域名与 HTTPS 证书需要相应的服务器端知识。注册 HTTPS 证书和实名认证都需要准备和寄送材料，传统的部署方式可以说是费时费力。假设你只想简单的发布一个静态网页，完全没有必要采用这个方案。"}),"\n",(0,n.jsx)(i.p,{children:"目前，最佳的解决方案是使用 Serverless 页面托管云服务。这些云服务只需简单配置就可以自动发布 Github 上面的页面；图形化界面操作省去了学习服务器端知识；分配二级 HTTPS 域名无需购买域名和实名认证，可以说是省时省力。"}),"\n",(0,n.jsx)(i.p,{children:"目前比较推荐的有 Github Pages、Vercel、Netlify。"}),"\n",(0,n.jsxs)(i.h2,{id:"方案选型",children:["方案选型",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#方案选型",children:"#"})]}),"\n",(0,n.jsx)(i.p,{children:"备选三款分别是 Github Pages、Vercel、Netlify。这三个托管服务其实大同小异。"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.strong,{children:"Github Pages"})}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"首先，Github Pages 使用最为方便，因为是 Github 内置的。但是我不满意的有三点。"}),"\n",(0,n.jsx)(i.p,{children:"首先，每个 repo 只能发布一个网站。我们的项目是一个 monorepo 项目，后续还会把 admin 演示网页等其他网站放上去，所以这个就存在问题。"}),"\n",(0,n.jsx)(i.p,{children:"其次，只能发布根目录和 docs 文件夹，这个对于我来说，还需要进一步重构我的目录结构。虽然目前推出了自定义 Action 功能可以解决，但我还是希望找到更方便的解决方案。"}),"\n",(0,n.jsx)(i.p,{children:"最后就是访问速度较慢的问题。"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)("img",{src:o,alt:"img"})}),"\n",(0,n.jsxs)(i.ol,{start:"2",children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.strong,{children:"Netlify"})}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Netlify 总部也是位于旧金山， 在 2021.11.17 日完成了 D 轮 1.05 亿美元的融资，估值达到 20 亿美金。Netlify 创建是为了解决 Github Page 的一些问题。你可以认为它是一个体验更好速度更快的 Github Pages。而且 Netlify 付费后可以承担企业级的 Web 访问业务。"}),"\n",(0,n.jsxs)(i.ol,{start:"3",children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.strong,{children:"Vercel"})}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["Vercel 总部也位于旧金山，在 2021.11.23 完成了D 轮 1.5 亿美金的融资，估值达到 25 亿美金，由 GGV Capital 领投。Vercel 的创始人 Guillermo Rauch 也是 Next.js、 ",(0,n.jsxs)(i.a,{href:"http://socket.io",target:"_blank",rel:"noopener noreferrer",children:[(0,n.jsx)(i.a,{href:"http://socket.io",target:"_blank",rel:"noopener noreferrer",children:"http://socket.io"})," "]}),"等开源项目的发起人。"]}),"\n",(0,n.jsxs)(i.p,{children:["Next.js 和 ",(0,n.jsx)(i.a,{href:"http://socket.io",target:"_blank",rel:"noopener noreferrer",children:"http://socket.io"})," 都是明星级别的开源项目。 这个非常重要，首先证明 Vercel 财大气粗，免费额度很够用。再者就是由于创始人和前端的亲缘关系，促使 Vercel 对前端工程师非常友好。比如： Vercel 可以自动识别项目的构建工具和框架并进行自动配置。"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)("img",{src:j,alt:"img"})}),"\n",(0,n.jsx)(i.p,{children:"除此之外， Guillermo 根据自己过往丰富的 Web 应用开发经验。 它提供的 Vercel 云服务可以帮助前端开发者屏蔽掉那些烦人的非业务问题。比如域名、DNS、SSL 证书。Vercel 还支持了 Node 运行时环境。自带 CI/CD 功能，并且自带 CDN ，网页速度能够得到非常好的保证。"}),"\n",(0,n.jsx)(i.p,{children:"相比之下 Netlify 就差了一些。最终难以抵挡 Vercel 的诱惑，选择它。"}),"\n",(0,n.jsx)(i.p,{children:"其实这三个都可以完成简单的静态页面发布的功能，只是实现的成本和体验问题。如果选择 Github Pages，就不得不将原有代码进行重构。将 docs 的位置移动到根目录中。而且需要更新时手动 build 文档页面。或者花时间去学习 Github Action。"}),"\n",(0,n.jsx)(i.p,{children:"如果选择 Netlify ，虽然它内置了简单的 CI 工具，但是现阶段版本还不支持 pnpm。 如果要解决这个问题还需要自己编写第三方脚本。而 Vercel 完全没有以上的问题，基本上通过 UI 界面就可以搞定，设定参数符合前端工程师体验。这个大家看下文就可以体会。"}),"\n",(0,n.jsx)(i.p,{children:"当然这三个服务也会不断发展，也会互相取长补短。等到大家读到的时候也许情况已经不一样了。"}),"\n",(0,n.jsxs)(i.h2,{id:"用户故事userstory",children:["用户故事(UserStory)",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#用户故事userstory",children:"#"})]}),"\n",(0,n.jsx)(i.p,{children:"发布组件库文档网站，使用持续集成，随时同步最新版文档网站。"}),"\n",(0,n.jsxs)(i.h2,{id:"任务分解task",children:["任务分解(Task)",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#任务分解task",children:"#"})]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"部署文档网站；"}),"\n",(0,n.jsx)(i.li,{children:"实现 CD 自动更新；"}),"\n",(0,n.jsx)(i.li,{children:"添加 Github Home Page。"}),"\n"]}),"\n",(0,n.jsxs)(i.h3,{id:"部署文档网站",children:["部署文档网站",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#部署文档网站",children:"#"})]}),"\n",(0,n.jsxs)(i.p,{children:["首先需要登录 ",(0,n.jsx)(i.a,{href:"https://vercel.com/",target:"_blank",rel:"noopener noreferrer",children:"https://vercel.com/"})," 网站，使用 Github 账号第三方登录。这个时候 Vercel 会要求你提供 Github 数据读取授权。你可以认为 Vercel 这个时候充当的是一个 CI 服务器，它需要随时调用 Github API 随时监听项目的变化，并且获取最新的代码。"]}),"\n",(0,n.jsx)(i.p,{children:"选择 New Project 添加一个项目。"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)("img",{src:x,alt:"img"})}),"\n",(0,n.jsx)(i.p,{children:"从 Github 列表中选择 smarty-admin。"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)("img",{src:p,alt:"img"})}),"\n",(0,n.jsx)(i.p,{children:"添加 Build 配置，这个步骤相当于以前的 CI 过程的图形化。相当于在 Vercel 的 CI 服务器上执行一遍文档编译过程。这个步骤和我们学过的 Github Action 类似。只是那个时候是使用 Yaml 文件进行配置，而现在换成了图形界面。"}),"\n",(0,n.jsx)(i.p,{children:"首先先回忆一遍在开发机上的过程，然后根据这个过程填写相应的参数。"}),"\n",(0,n.jsx)(i.p,{children:"生成文档网站需要执行："}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"pnpm i \ncd packages/smarty-ui-vite\npnpm docs:build\n"})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)("img",{src:d,alt:"img"})}),"\n",(0,n.jsx)(i.p,{children:"页面会生成在 packages/samrty-ui-vite/docs/.vitepress/dist 中。"}),"\n",(0,n.jsx)(i.p,{children:"这时候对号入座，就可以很容易地把下面的参数填出来了。"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)("img",{src:a,alt:"img"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"BUILD COMMAND ： pnpm docs:build (vitepress 导出指令)；"}),"\n",(0,n.jsx)(i.li,{children:"OUTPUT DIRECTORY : docs/.vitepress/dist (vitepress 静态页面位置)；"}),"\n",(0,n.jsx)(i.li,{children:"INSTALL COMMAND： pnpm install 软件包安装。"}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"点击 Deploy 开始构建，这相当于启动了CI 服务。这个时候， Vercel 的 CI 服务会提取 Github 代码执行安装和导出流程，并且会将页面发布上线。"}),"\n",(0,n.jsxs)(i.p,{children:["在几分钟的等待后就，访问 ",(0,n.jsx)(i.a,{href:"https://smarty-admin.vercel.app/",target:"_blank",rel:"noopener noreferrer",children:"https://smarty-admin.vercel.app/"})," 网站就发布好了。"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)("img",{src:t,alt:"img"})}),"\n",(0,n.jsxs)(i.h3,{id:"实现-ci-自动更新",children:["实现 CI 自动更新",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#实现-ci-自动更新",children:"#"})]}),"\n",(0,n.jsx)(i.p,{children:"下面要考虑的就是，如果有文档更新如何自动实现推送。当然这个 Vercel 已经默认提供这个功能。但是作为工程化，这个是需要大家考虑的一个问题。我们可以在 Deployments 中看到每次 Vercel 更新的记录，这表明 CI 工作正常。"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)("img",{src:h,alt:"img"})}),"\n",(0,n.jsxs)(i.h3,{id:"添加-homepage-配置",children:["添加 HomePage 配置",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#添加-homepage-配置",children:"#"})]}),"\n",(0,n.jsx)(i.p,{children:"下面将发布后的地址填写到 package.json 中去，这一步的属性可以让 Github 页面中显示相应的主页链接。后续发布到 Npm 上也会有主页链接。"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)("img",{src:l,alt:"img"})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)("img",{src:c,alt:"img"})}),"\n",(0,n.jsxs)(i.h2,{id:"复盘",children:["复盘",(0,n.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#复盘",children:"#"})]}),"\n",(0,n.jsx)(i.p,{children:"这节课的主要内容是为组件库部署文档网站，我们选用了 Serverless 网站托管服务完成。相比于传统部署形式，前端程序员无需了解过多的服务端知识和繁琐的搭建过程就可以部署上线。"}),"\n",(0,n.jsx)(i.p,{children:"另外，类似 Vercel 这种托管服务还内置了 CI/CD 工具可以实现自动更新功能。 文档网站部署属于一个 CD 持续交付，也正好趁这次机会体验了 Github Action 以外的另外一个 CI/CD 服务。 本次部署选择了 Vercel ，其实其他两个服务也各有特点，尤其是 Github Pages，这个非常常用，也请大家课下体验一下。"}),"\n",(0,n.jsx)(i.p,{children:"最后留一些思考题帮助大家复习，也欢迎在留言区讨论。"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"如何使用 Vercel 部署前端项目？"}),"\n",(0,n.jsx)(i.li,{children:"Github Page 与 Vercel 的区别 ？"}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"下节课，我们将给大家讲解如何编写标准的README文档，下节课见。"})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:i}=Object.assign({},(0,s.ah)(),e.components);return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(b,{...e})}):b(e)}let g=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Vite%20%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98%2F14.%E6%96%87%E6%A1%A3%E9%83%A8%E7%BD%B2%EF%BC%9A%20%E7%94%A8%20Vercel%20%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84%E7%BA%BF%E4%B8%8A%E6%96%87%E6%A1%A3.md"]={toc:[{text:"方案选型",id:"方案选型",depth:2},{text:"用户故事(UserStory)",id:"用户故事userstory",depth:2},{text:"任务分解(Task)",id:"任务分解task",depth:2},{text:"部署文档网站",id:"部署文档网站",depth:3},{text:"实现 CI 自动更新",id:"实现-ci-自动更新",depth:3},{text:"添加 HomePage 配置",id:"添加-homepage-配置",depth:3},{text:"复盘",id:"复盘",depth:2}],title:"14.文档部署： 用 Vercel 部署你的线上文档",headingTitle:"14.文档部署： 用 Vercel 部署你的线上文档",frontmatter:{}}}}]);