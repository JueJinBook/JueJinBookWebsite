"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["88407"],{722671:function(n,e,t){n.exports=t.p+"static/image/be0420b5460ed37f2afc21f7bed75f8b.1a7f31ab.gif"},511931:function(n,e,t){n.exports=t.p+"static/image/e6d9dfa370fddd621e6fc74543644c0c.6347f2c9.gif"},177308:function(n,e,t){t.r(e),t.d(e,{default:()=>Z});var r=t(552676),c=t(740453),s=t(722671);let a=t.p+"static/image/770affa71b950b2dc404c8c010eb2e0f.c87bac81.webp",i=t.p+"static/image/6db404bcf42e0dbfe2ac163cbb24fcf2.f3a43a46.webp",o=t.p+"static/image/dbfae3bb069cc5a0d216c69c99d574ce.75c24299.webp",d=t.p+"static/image/c8743f23caaf02afe398e4cc8d8e1b0b.26a113c6.webp",p=t.p+"static/image/cb41f84c00171c6380e82635d84e8532.753e4fe0.gif",l=t.p+"static/image/ca0382ebbf57d0e2cd909fc44e58683d.7b4e7e96.webp",m=t.p+"static/image/4aa2eb5b6315853083a3879940c377c2.8914e699.gif",h=t.p+"static/image/4597cbc8cc6824aa150e16ecf879c424.c4e2bbfa.gif",g=t.p+"static/image/05877e32e19a30d2dd09f07846760b8e.c52041a1.webp",x=t.p+"static/image/6f83df5de1dc678c1e0b7673764d52d3.49ec8c3e.webp",u=t.p+"static/image/5b22d22d787631afe773351eba82c490.f3b86354.gif",f=t.p+"static/image/3de419c5c5a671c625b14eefb53a3e13.ec835c31.gif",b=t.p+"static/image/c61a125bab158ed669bfa4f5ab2bf9db.0830fcfa.webp",j=t.p+"static/image/ddbf435de78e01df92d0b8bb7b351eab.927e655e.webp",S=t.p+"static/image/71b0a13334037d85b9b284f159a0bc79.fd476e24.webp",w=t.p+"static/image/51a7f01f4170f4a14e87ca2a2d1aceb3.d7dc4d43.webp",k=t.p+"static/image/0f688cb775814b9b764d2ae0980276ba.96330f63.webp",B=t.p+"static/image/71c7c2c5a4582434d38113f2bfb3e123.079d9508.webp",E=t.p+"static/image/fcc3e38bc36fa75989e2e852dc6916c7.9f261956.webp",C=t.p+"static/image/e92bca1bac2ffcbdd26741c33dbba189.8e2d8ccd.webp",v=t.p+"static/image/95e7fcb5d8d456c1f9bded1d8534f7d7.7c39d9fc.webp",y=t.p+"static/image/5c784e9b86a38d4673dc3ca81a871cd7.15473792.webp",M=t.p+"static/image/2353189136298a50154347ac1eebe2d1.1e8a0234.webp",P=t.p+"static/image/5d226177ae3ed5201f52f9cbbf8d7997.25ed762b.webp",R=t.p+"static/image/8f0534dd12fd11de67bff801df9e6c01.f7e8f83b.webp",N=t.p+"static/image/a7685acb3a2fa2792e3921a0c2e6b848.3309e4ff.webp",T=t.p+"static/image/2969466e335aedc21c4d302d042b4e93.52d9d832.webp",F=t.p+"static/image/f7988cdfa724ad533bc4df18b353ae45.7e47ae94.webp",O=t.p+"static/image/a95dd3f998c6e1433bdf157bd08c3cde.1b143a94.webp",A=t.p+"static/image/53445001eb65299831d02ada80b6e6bf.af732a4b.webp",L=t.p+"static/image/9737cbf8d6bf028baffe892a78f2b7ed.841b3eb2.webp",_=t.p+"static/image/647ac54aff707b075f45a14571720866.80a6513a.webp",H=t.p+"static/image/47302486159fb46dda204414d1e3163f.507527ac.webp",I=t.p+"static/image/e32f69f92d62855fd6c721f98e94d25c.a767850b.webp",W=t.p+"static/image/c7967720b832d6dd499cfe81f2a05637.f3f94f42.webp",D=t.p+"static/image/f48031849a3da998084c943ee461906f.49e391c2.gif",z=t.p+"static/image/69dbef56de4c766b05b64c94e5a837b7.2fdd795d.webp",V=t.p+"static/image/6ce5badfca2e08c8d3c501552ef3458d.a0a23910.webp",G=t.p+"static/image/5b76e0d89441f9c85463593ca60a470e.a1e14ea1.webp",Q=t.p+"static/image/ed4f44c27f27cbb1798c661fd1a53fb6.77f29970.gif",q=t.p+"static/image/9d2bce855610897d8b870a1d629aa46d.d34d3ca7.webp",J=t.p+"static/image/2c117f4a97584956ec2093573c605301.c3df41eb.gif",K=t.p+"static/image/8d55b7be33eb0ed6cda359bc85b5dce6.ec181e39.gif";var U=t(511931);function X(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,c.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"第36章组件实战onboarding漫游式引导组件",children:["第36章—组件实战：onBoarding漫游式引导组件",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第36章组件实战onboarding漫游式引导组件",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"\uFEFF当应用加了新功能的时候，都会通过这种方式来告诉用户怎么用："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:U,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这种组件叫做 OnBoarding 或者 Tour。"}),"\n",(0,r.jsx)(e.p,{children:"在 antd5 也加入了这种组件:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:K,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"那它是怎么实现的呢？"}),"\n",(0,r.jsx)(e.p,{children:"调试下可以发现，遮罩层由 4 个 rect 元素组成。"}),"\n",(0,r.jsx)(e.p,{children:"当点击上一步、下一步的时候，遮罩层的宽高会变化："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:J,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"加上 transition，就产生了上面的动画效果。"}),"\n",(0,r.jsx)(e.p,{children:"其实还可以进一步简化一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:q,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:Q,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"用一个 div，设置 width、height 还有上下左右不同的 border-width。"}),"\n",(0,r.jsx)(e.p,{children:"点击上一步、下一步的时候，修改 width、height、border-width，也能达到一样的效果。"}),"\n",(0,r.jsx)(e.p,{children:"比起 antd 用 4 个 rect 来实现，更简洁一些。"}),"\n",(0,r.jsx)(e.p,{children:"原理就是这样，还是挺简单的。"}),"\n",(0,r.jsx)(e.p,{children:"下面我们来写一下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"npx create-vite\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:G,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"创建个 vite + react 的项目。"}),"\n",(0,r.jsx)(e.p,{children:"进入项目，把 index.css 的样式去掉："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:V,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后新建 OnBoarding/Mask.tsx"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import React, { CSSProperties, useEffect, useState } from 'react';\nimport { getMaskStyle } from './getMaskStyle'\n\ninterface MaskProps {\n  element: HTMLElement;\n\n  container?: HTMLElement;\n\n  renderMaskContent?: (wrapper: React.ReactNode) => React.ReactNode;\n}\n\nexport const Mask: React.FC<MaskProps> = (props) => {\n  const {\n    element,\n    renderMaskContent,\n    container\n  } = props;\n\n  const [style, setStyle] = useState<CSSProperties>({});\n\n  useEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    element.scrollIntoView({\n        block: 'center',\n        inline: 'center'\n    });\n  \n    const style = getMaskStyle(element, container || document.documentElement);\n  \n    setStyle(style);\n    \n  }, [element, container]);\n\n  const getContent = () => {\n    if (!renderMaskContent) {\n      return null;\n    }\n    return renderMaskContent(\n      <div className={'mask-content'} style={{ width: '100%', height: '100%' }} />\n    );\n  };\n\n  return (\n    <div\n      style={style}\n      className='mask'>\n      {getContent()}\n    </div>\n  );\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:"这里传入的 element、container 分别是目标元素、遮罩层所在的容器。"}),"\n",(0,r.jsx)(e.p,{children:"而 getMaskContent 是用来定制这部分内容的："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:z,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"可以是 Popover 也可以是别的。"}),"\n",(0,r.jsx)(e.p,{children:"前面分析过，主要是确定目标元素的 width、height、border-width。"}),"\n",(0,r.jsx)(e.p,{children:"首先，把目标元素滚动到可视区域："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这个用 scrollIntoView 方法实现："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:W,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["在 ",(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView",target:"_blank",rel:"noopener noreferrer",children:"MDN"})," 上可以看到它的介绍："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:I,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"设置  block、inline 为 center 是把元素中心滚动到可视区域中心的意思："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:H,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"滚动完成后，就可以拿到元素的位置，计算 width、height、border-width 的样式了："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"新建 OnBoarding/getMaskStyle.ts"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"export const getMaskStyle = (element: HTMLElement, container: HTMLElement) => {\n    if (!element) {\n      return {};\n    }\n\n    const { height, width, left, top } = element.getBoundingClientRect();\n\n    const elementTopWithScroll = container.scrollTop + top;\n    const elementLeftWithScroll = container.scrollLeft + left;\n\n    return {\n      width: container.scrollWidth,\n      height: container.scrollHeight,\n      borderTopWidth: Math.max(elementTopWithScroll, 0),\n      borderLeftWidth: Math.max(elementLeftWithScroll, 0),\n      borderBottomWidth: Math.max(container.scrollHeight - height - elementTopWithScroll, 0),\n      borderRightWidth: Math.max(container.scrollWidth - width - elementLeftWithScroll, 0)\n    };\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:"width、height 就是容器的包含滚动区域的宽高。"}),"\n",(0,r.jsx)(e.p,{children:"然后 border-width  分为上下左右 4 个方向："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"top 和 left 的分别用 scrollTop、scrollLeft 和元素在可视区域里的 left、top 相加计算出来。"}),"\n",(0,r.jsx)(e.p,{children:"bottom 和 right 的就用容器的包含滚动区域的高度宽度 scrollHeight、scrollWidth 减去 height、width 再减去 scrollTop、scrollLeft 计算出来。"}),"\n",(0,r.jsx)(e.p,{children:"然后我们在内部又加了一个宽高为 100% 的 div，把它暴露出去，外部就可以用它来加 Popover 或者其他内容："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后在 OnBoarding/index.scss 里写下样式："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:".mask {\n    position: absolute;\n    left: 0;\n    top: 0;\n\n    z-index: 999;\n\n    border-style: solid;\n    box-sizing: border-box;\n    border-color: rgba(0, 0, 0, 0.6);\n\n    transition: all 0.2s ease-in-out;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"mask 要绝对定位，然后设置下 border 的颜色。"}),"\n",(0,r.jsx)(e.p,{children:"我们先测试下现在的 Mark 组件："}),"\n",(0,r.jsx)(e.p,{children:"把开发服务跑起来："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"npm install\nnpm run dev\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"我们就在 logo 上试一下吧："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"<Mask\n    element={document.getElementById('xxx')!}\n    renderMaskContent={(wrapper) => {\n      return wrapper\n    }}\n></Mask>\n"})}),"\n",(0,r.jsx)(e.p,{children:"container 就是默认的根元素。"}),"\n",(0,r.jsx)(e.p,{children:"内容我们先不加 Popover。"}),"\n",(0,r.jsx)(e.p,{children:"看一下效果:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(e.p,{children:"然后加上 Popover 试试。"}),"\n",(0,r.jsx)(e.p,{children:"安装 antd："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm install --save antd\n"})}),"\n",(0,r.jsx)(e.p,{children:"然后引入下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"<Mask\n    element={document.getElementById('xxx')!}\n    renderMaskContent={(wrapper) => {\n      return <Popover\n        content={\n          <div style={{width: 300}}>\n            <p>hello</p>\n            <Button type='primary'>下一步</Button>\n          </div>\n        }\n        open={true}\n      >{wrapper}</Popover>\n    }}\n></Mask>\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(e.p,{children:"接下来在外面包装一层，改下 Popover 的样式就行了。"}),"\n",(0,r.jsx)(e.p,{children:"我们希望 OnBoarding 组件可以这么用："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"传入 steps，包含每一步在哪个元素（selector），显示什么内容（renderConent），在什么方位（placement）。"}),"\n",(0,r.jsx)(e.p,{children:"所以类型这样写："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"并且还有 beforeForward、beforeBack 也就是点上一步、下一步的回调。"}),"\n",(0,r.jsx)(e.p,{children:"step 是可以直接指定显示第几步。"}),"\n",(0,r.jsx)(e.p,{children:"onStepsEnd 是在全部完成后的回调。"}),"\n",(0,r.jsx)(e.p,{children:"内部有一个 state 来记录 currentStep，点击上一步、下一步会切换："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"在切换前也会调用 beforeBack、beforeForward 的回调。"}),"\n",(0,r.jsx)(e.p,{children:"然后准备下 Popover 的内容："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"渲染下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这里用 createPortal 把 mask 渲染到容器元素下，比如 document.body。"}),"\n",(0,r.jsx)(e.p,{children:"注意，我们要给元素加上引导，那得元素渲染完才行。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"所以这里加个 setState，在 useEffect 里执行。"}),"\n",(0,r.jsx)(e.p,{children:"效果就是在 dom 渲染完之后，触发重新渲染，从而渲染这个 OnBoarding 组件："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"第一次渲染的时候，元素是 null，触发重新渲染之后，就会渲染下面的 Mask 了："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"Onboarding/index.tsx 的全部代码如下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import React, { FC, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Button, Popover } from 'antd';\nimport { Mask } from './Mask'\nimport { TooltipPlacement } from 'antd/es/tooltip';\nimport './index.scss';\n\nexport interface OnBoardingStepConfig {\n    selector: () => HTMLElement | null;\n  \n    placement?: TooltipPlacement;\n  \n    renderContent?: (currentStep: number) => React.ReactNode;\n  \n    beforeForward?: (currentStep: number) => void;\n  \n    beforeBack?: (currentStep: number) => void;\n}\n\n  \nexport interface OnBoardingProps {\n  step?: number;\n\n  steps: OnBoardingStepConfig[];\n\n  getContainer?: () => HTMLElement;\n\n  onStepsEnd?: () => void;\n}\n\nexport const OnBoarding:FC<OnBoardingProps> = (props) => {\n  const {\n    step = 0,\n    steps,\n    onStepsEnd,\n    getContainer\n  } = props;\n\n  const [currentStep, setCurrentStep] = useState<number>(0);\n\n  const currentSelectedElement = steps[currentStep]?.selector();\n\n  const currentContainerElement = getContainer?.() || document.documentElement;\n\n  const getCurrentStep = () => {\n    return steps[currentStep];\n  };\n\n  const back = async () => {\n    if (currentStep === 0) {\n      return;\n    }\n\n    const { beforeBack } = getCurrentStep();\n    await beforeBack?.(currentStep);\n    setCurrentStep(currentStep - 1);\n  };\n\n  const forward = async () => {\n    if (currentStep === steps.length - 1) {\n      await onStepsEnd?.();\n      return;\n    }\n\n    const { beforeForward } = getCurrentStep();\n    await beforeForward?.(currentStep);\n    setCurrentStep(currentStep + 1);\n  };\n\n  useEffect(() => {\n    setCurrentStep(step!);\n  }, [step]);\n\n  const renderPopover = (wrapper: React.ReactNode) => {\n    const config = getCurrentStep();\n    if (!config) {\n      return wrapper;\n    }\n\n    const { renderContent } = config;\n    const content = renderContent ? renderContent(currentStep) : null;\n\n    const operation = (\n      <div className={'onboarding-operation'}>\n        {\n          currentStep !== 0 && \n            <Button\n                className={'back'}\n                onClick={() => back()}>\n                {'上一步'}\n            </Button>\n        }\n        <Button\n          className={'forward'}\n          type={'primary'}\n          onClick={() => forward()}>\n          {currentStep === steps.length - 1 ? '我知道了' : '下一步'}\n        </Button>\n      </div>\n    );\n\n    return (\n      <Popover\n        content={<div>\n            {content}\n            {operation}\n        </div>}\n        open={true}\n        placement={getCurrentStep()?.placement}>\n        {wrapper}\n      </Popover>\n    );\n  };\n\n  const [, setRenderTick] = useState<number>(0);\n\n  useEffect(() => {\n    setRenderTick(1)    \n  }, []);\n  \n  if(!currentSelectedElement) {\n    return null;\n  }\n\n  const mask = <Mask\n    container={currentContainerElement}\n    element={currentSelectedElement}\n    renderMaskContent={(wrapper) => renderPopover(wrapper)}\n  />;\n\n  return createPortal(mask, currentContainerElement);\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"其实这个组件主要就是切换上一步下一步用的。"}),"\n",(0,r.jsx)(e.p,{children:"然后加下上一步下一步按钮的样式："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:".onboarding-operation {\n    width: 100%;\n    display: flex;\n    justify-content: flex-end;\n    margin-top: 12px;\n\n    .back {\n        margin-right: 12px;\n        min-width: 80px;\n    }\n\n    .forward {\n        min-width: 80px;\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 App.tsx 里测试下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import { OnBoarding } from \'./OnBoarding\'\nimport { Button, Flex } from \'antd\';\n\nfunction App() {\n\n  return <div className=\'App\'>\n    <Flex gap="small" wrap="wrap" id="btn-group1">\n      <Button type="primary">Primary Button</Button>\n      <Button>Default Button</Button>\n      <Button type="dashed">Dashed Button</Button>\n      <Button type="text">Text Button</Button>\n      <Button type="link">Link Button</Button>\n    </Flex>\n\n  <div style={{height: \'1000px\'}}></div>\n\n  <Flex wrap="wrap" gap="small">\n    <Button type="primary" danger>\n      Primary\n    </Button>\n    <Button danger>Default</Button>\n    <Button type="dashed" danger  id="btn-group2">\n      Dashed\n    </Button>\n    <Button type="text" danger>\n      Text\n    </Button>\n    <Button type="link" danger>\n      Link\n    </Button>\n  </Flex>\n\n  <div style={{height: \'500px\'}}></div>\n\n  <Flex wrap="wrap" gap="small">\n    <Button type="primary" ghost>\n      Primary\n    </Button>\n    <Button ghost>Default</Button>\n    <Button type="dashed" ghost>\n      Dashed\n    </Button>\n    <Button type="primary" danger ghost id="btn-group3">\n      Danger\n    </Button>\n  </Flex>\n\n  <OnBoarding\n      steps={\n        [\n          {\n            selector: () => {\n              return document.getElementById(\'btn-group1\');\n            },\n            renderContent: () => {\n              return "神说要有光";\n            },\n            placement: \'bottom\'\n          },\n          {\n            selector: () => {\n              return document.getElementById(\'btn-group2\');\n            },\n            renderContent: () => {\n              return "于是就有了光";\n            },\n            placement: \'bottom\'\n          },\n          {\n            selector: () => {\n              return document.getElementById(\'btn-group3\');\n            },\n            renderContent: () => {\n              return "你相信光么";\n            },\n            placement: \'bottom\'\n          }\n        ]\n      } />\n  </div>\n}\n\nexport default App\n'})}),"\n",(0,r.jsx)(e.p,{children:"我用 id 选中了三个元素："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"指定三步的元素和渲染的内容："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"跑一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"没啥问题，选中的元素、mask 的样式都是对的。"}),"\n",(0,r.jsx)(e.p,{children:"只是现在结束后，mask 不会消失："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这个加个状态标识就好了："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"此外，还有两个小问题："}),"\n",(0,r.jsx)(e.p,{children:"一个是在窗口改变大小的时候，没有重新计算 mask 样式："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这个在 Mask 组件里用 ResizeObserver 监听下 container 大小改变就好了："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"useEffect(() => {\n    const observer = new ResizeObserver(() => {\n      const style = getMaskStyle(element, container || document.documentElement);\n\n      setStyle(style);\n    });\n    observer.observe(container || document.documentElement);\n}, []);\n"})}),"\n",(0,r.jsx)(e.p,{children:"变了重新计算和设置 mask 的 style。"}),"\n",(0,r.jsx)(e.p,{children:"再就是现在 popover 位置会闪一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"那是因为 mask 的样式变化有个动画的过程，要等动画结束计算的 style 才准确。"}),"\n",(0,r.jsx)(e.p,{children:"所以给 Mask 组件加一个动画开始和结束的回调："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import React, { CSSProperties, useEffect, useState } from 'react';\nimport { getMaskStyle } from './getMaskStyle'\n\nimport './index.scss';\n\ninterface MaskProps {\n  element: HTMLElement;\n\n  container?: HTMLElement;\n\n  renderMaskContent?: (wrapper: React.ReactNode) => React.ReactNode;\n\n  onAnimationStart?: () => void;\n\n  onAnimationEnd?: () => void;\n}\n\nexport const Mask: React.FC<MaskProps> = (props) => {\n  const {\n    element,\n    renderMaskContent,\n    container,\n    onAnimationStart,\n    onAnimationEnd\n  } = props;\n\n  useEffect(() => {\n    onAnimationStart?.();\n    const timer = setTimeout(() => {\n      onAnimationEnd?.();\n    }, 200);\n\n    return () => {\n      window.clearTimeout(timer);\n    };\n  }, [element]);\n\n  const [style, setStyle] = useState<CSSProperties>({});\n\n  useEffect(() => {\n    const observer = new ResizeObserver(() => {\n      const style = getMaskStyle(element, container || document.documentElement);\n  \n      setStyle(style);\n    });\n    observer.observe(container || document.documentElement);\n  }, []);\n\n  useEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    element.scrollIntoView({\n        block: 'center',\n        inline: 'center'\n    });\n  \n    const style = getMaskStyle(element, container || document.documentElement);\n  \n    setStyle(style);\n    \n  }, [element, container]);\n\n  const getContent = () => {\n    if (!renderMaskContent) {\n      return null;\n    }\n    return renderMaskContent(\n      <div className={'mask-content'} style={{ width: '100%', height: '100%' }} />\n    );\n  };\n\n  return (\n    <div\n      style={style}\n      className='mask'>\n      {getContent()}\n    </div>\n  );\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:"然后在 OnBoarding 组件加一个 state："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"动画开始和结束修改这个 state："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"动画结束才会渲染 Popover："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这样 Popover 位置就不会闪了："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:s,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import React, { FC, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Button, Popover } from 'antd';\nimport { Mask } from './Mask'\nimport { TooltipPlacement } from 'antd/es/tooltip';\n\nexport interface OnBoardingStepConfig {\n    selector: () => HTMLElement | null;\n  \n    placement?: TooltipPlacement;\n  \n    renderContent?: (currentStep: number) => React.ReactNode;\n  \n    beforeForward?: (currentStep: number) => void;\n  \n    beforeBack?: (currentStep: number) => void;\n}\n\n  \nexport interface OnBoardingProps {\n  step?: number;\n\n  steps: OnBoardingStepConfig[];\n\n  getContainer?: () => HTMLElement;\n\n  onStepsEnd?: () => void;\n}\n\nexport const OnBoarding:FC<OnBoardingProps> = (props) => {\n  const {\n    step = 0,\n    steps,\n    onStepsEnd,\n    getContainer\n  } = props;\n\n  const [currentStep, setCurrentStep] = useState<number>(0);\n\n  const currentSelectedElement = steps[currentStep]?.selector();\n\n  const currentContainerElement = getContainer?.() || document.documentElement;\n\n  const [done, setDone] = useState(false);\n\n  const [isMaskMoving, setIsMaskMoving] = useState<boolean>(false);\n\n  const getCurrentStep = () => {\n    return steps[currentStep];\n  };\n\n  const back = async () => {\n    if (currentStep === 0) {\n      return;\n    }\n\n    const { beforeBack } = getCurrentStep();\n    await beforeBack?.(currentStep);\n    setCurrentStep(currentStep - 1);\n  };\n\n  const forward = async () => {\n    if (currentStep === steps.length - 1) {\n      await onStepsEnd?.();\n      setDone(true);\n      return;\n    }\n\n    const { beforeForward } = getCurrentStep();\n    await beforeForward?.(currentStep);\n    setCurrentStep(currentStep + 1);\n  };\n\n  useEffect(() => {\n    setCurrentStep(step!);\n  }, [step]);\n\n  const renderPopover = (wrapper: React.ReactNode) => {\n    const config = getCurrentStep();\n\n    if (!config) {\n      return wrapper;\n    }\n\n    const { renderContent } = config;\n    const content = renderContent ? renderContent(currentStep) : null;\n\n    const operation = (\n      <div className={'onboarding-operation'}>\n        {\n          currentStep !== 0 && \n            <Button\n                className={'back'}\n                onClick={() => back()}>\n                {'上一步'}\n            </Button>\n        }\n        <Button\n          className={'forward'}\n          type={'primary'}\n          onClick={() => forward()}>\n          {currentStep === steps.length - 1 ? '我知道了' : '下一步'}\n        </Button>\n      </div>\n    );\n\n    return (\n      isMaskMoving ? wrapper : <Popover\n        content={<div>\n            {content}\n            {operation}\n        </div>}\n        open={true}\n        placement={getCurrentStep()?.placement}>\n        {wrapper}\n      </Popover>\n    );\n  };\n\n  const [, setRenderTick] = useState<number>(0);\n\n  useEffect(() => {\n    setRenderTick(1)    \n  }, []);\n  \n  if(!currentSelectedElement || done) {\n    return null;\n  }\n\n  const mask = <Mask\n    onAnimationStart={() => {\n        setIsMaskMoving(true);\n    }}\n    onAnimationEnd={() => {\n        setIsMaskMoving(false);\n    }}\n    container={currentContainerElement}\n    element={currentSelectedElement}\n    renderMaskContent={(wrapper) => renderPopover(wrapper)}\n  />;\n\n  return createPortal(mask, currentContainerElement);\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"组件外部通过 step 的 props 来切换上一步下一步。"}),"\n",(0,r.jsx)(e.p,{children:"那如果想直接调用 forward、back 的方法来切换上一步下一步呢？"}),"\n",(0,r.jsx)(e.p,{children:"这种可以通过 forwardRef + useImperativeHandle 来暴露 api 出去。"}),"\n",(0,r.jsxs)(e.p,{children:["案例代码上传了",(0,r.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/onboarding-component",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"今天我们实现了 OnBoarding 组件，就是 antd5 里加的 Tour 组件。"}),"\n",(0,r.jsx)(e.p,{children:"antd 里是用 4 个 rect 元素实现的，我们是用一个 div 设置 width、height、四个方向不同的 border-width 实现的。"}),"\n",(0,r.jsx)(e.p,{children:"通过设置 transition，然后改变 width、height、border-width 就可以实现 mask 移动的动画。"}),"\n",(0,r.jsx)(e.p,{children:"然后我们在外层封装了一层，加上了上一步下一步的切换。"}),"\n",(0,r.jsx)(e.p,{children:"并且用 ResizeObserver 在窗口改变的时候重新计算 mask 样式。"}),"\n",(0,r.jsx)(e.p,{children:"此外，还要注意，mask 需要在 dom 树渲染完之后才能拿到 dom 来计算样式，所以需要 useEffect + setState 来触发一次额外渲染。"}),"\n",(0,r.jsx)(e.p,{children:"这样，OnBoarding 组件就完成了。"})]})}function Y(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(X,{...n})}):X(n)}let Z=Y;Y.__RSPRESS_PAGE_META={},Y.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC36%E7%AB%A0%E2%80%94%E7%BB%84%E4%BB%B6%E5%AE%9E%E6%88%98%EF%BC%9AonBoarding%E6%BC%AB%E6%B8%B8%E5%BC%8F%E5%BC%95%E5%AF%BC%E7%BB%84%E4%BB%B6.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第36章—组件实战：onBoarding漫游式引导组件",headingTitle:"第36章—组件实战：onBoarding漫游式引导组件",frontmatter:{}}}}]);