"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["25745"],{700528:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var r=s(552676),i=s(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",pre:"pre",code:"code",strong:"strong"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"9应用-8近水楼台--geohash",children:["9应用 8：近水楼台 —— GeoHash",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9应用-8近水楼台--geohash",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Redis 在 3.2 版本以后增加了地理位置 GEO 模块，意味着我们可以使用 Redis 来实现摩拜单车「附近的 Mobike」、美团和饿了么「附近的餐馆」这样的功能了。"}),"\n",(0,r.jsxs)(n.h2,{id:"用数据库来算附近的人",children:["用数据库来算附近的人",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用数据库来算附近的人",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"地图元素的位置数据使用二维的经纬度表示，经度范围 (-180, 180]，纬度范围 (-90, 90]，纬度正负以赤道为界，北正南负，经度正负以本初子午线 (英国格林尼治天文台) 为界，东正西负。比如掘金办公室在望京 SOHO，它的经纬度坐标是 (116.48105,39.996794)，都是正数，因为中国位于东北半球。"}),"\n",(0,r.jsx)(n.p,{children:"当两个元素的距离不是很远时，可以直接使用勾股定理就能算得元素之间的距离。我们平时使用的「附近的人」的功能，元素距离都不是很大，勾股定理算距离足矣。不过需要注意的是，经纬度坐标的密度不一样 (地球是一个椭圆)，勾股定律计算平方差时之后再求和时，需要按一定的系数比加权求和，如果不求精确的话，也可以不必加权。"}),"\n",(0,r.jsx)(n.p,{children:"问题：经度总共360度，维度总共只有180度，为什么距离密度不是2:1？"}),"\n",(0,r.jsx)(n.p,{children:"现在，如果要计算「附近的人」，也就是给定一个元素的坐标，然后计算这个坐标附近的其它元素，按照距离进行排序，该如何下手？"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/4/1646385f96a0f91f?w=657&h=334&f=png&s=17950",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"如果现在元素的经纬度坐标使用关系数据库 (元素 id, 经度 x, 纬度 y) 存储，你该如何计算？"}),"\n",(0,r.jsx)(n.p,{children:"首先，你不可能通过遍历来计算所有的元素和目标元素的距离然后再进行排序，这个计算量太大了，性能指标肯定无法满足。一般的方法都是通过矩形区域来限定元素的数量，然后对区域内的元素进行全量距离计算再排序。这样可以明显减少计算量。如何划分矩形区域呢？可以指定一个半径 r，使用一条 SQL 就可以圈出来。当用户对筛出来的结果不满意，那就扩大半径继续筛选。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"select id from positions where x0-r < x < x0+r and y0-r < y < y0+r\n"})}),"\n",(0,r.jsx)(n.p,{children:"为了满足高性能的矩形区域算法，数据表需要在经纬度坐标加上双向复合索引 (x, y)，这样可以最大优化查询性能。"}),"\n",(0,r.jsx)(n.p,{children:"但是数据库查询性能毕竟有限，如果「附近的人」查询请求非常多，在高并发场合，这可能并不是一个很好的方案。"}),"\n",(0,r.jsxs)(n.h2,{id:"geohash-算法",children:["GeoHash 算法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#geohash-算法",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"业界比较通用的地理位置距离排序算法是 GeoHash 算法，Redis 也使用 GeoHash 算法。GeoHash 算法将二维的经纬度数据映射到一维的整数，这样所有的元素都将在挂载到一条线上，距离靠近的二维坐标映射到一维后的点之间距离也会很接近。当我们想要计算「附近的人时」，首先将目标位置映射到这条线上，然后在这个一维的线上获取附近的点就行了。"}),"\n",(0,r.jsx)(n.p,{children:"那这个映射算法具体是怎样的呢？它将整个地球看成一个二维平面，然后划分成了一系列正方形的方格，就好比围棋棋盘。所有的地图元素坐标都将放置于唯一的方格中。方格越小，坐标越精确。然后对这些方格进行整数编码，越是靠近的方格编码越是接近。那如何编码呢？一个最简单的方案就是切蛋糕法。设想一个正方形的蛋糕摆在你面前，二刀下去均分分成四块小正方形，这四个小正方形可以分别标记为 00,01,10,11 四个二进制整数。然后对每一个小正方形继续用二刀法切割一下，这时每个小小正方形就可以使用 4bit 的二进制整数予以表示。然后继续切下去，正方形就会越来越小，二进制整数也会越来越长，精确度就会越来越高。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/4/1646397a223e2019?w=400&h=400&f=gif&s=172282",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"上面的例子中使用的是二刀法，真实算法中还会有很多其它刀法，最终编码出来的整数数字也都不一样。"}),"\n",(0,r.jsx)(n.p,{children:"编码之后，每个地图元素的坐标都将变成一个整数，通过这个整数可以还原出元素的坐标，整数越长，还原出来的坐标值的损失程度就越小。对于「附近的人」这个功能而言，损失的一点精确度可以忽略不计。"}),"\n",(0,r.jsx)(n.p,{children:"GeoHash 算法会继续对这个整数做一次 base32 编码 (0-9,a-z 去掉 a,i,l,o 四个字母) 变成一个字符串。在 Redis 里面，经纬度使用 52 位的整数进行编码，放进了 zset 里面，zset 的 value 是元素的 key，score 是 GeoHash 的 52 位整数值。zset 的 score 虽然是浮点数，但是对于 52 位的整数值，它可以无损存储。"}),"\n",(0,r.jsx)(n.p,{children:"在使用 Redis 进行 Geo 查询时，我们要时刻想到它的内部结构实际上只是一个 zset(skiplist)。通过 zset 的 score 排序就可以得到坐标附近的其它元素 (实际情况要复杂一些，不过这样理解足够了)，通过将 score 还原成坐标值就可以得到元素的原始坐标。"}),"\n",(0,r.jsxs)(n.h2,{id:"redis-的-geo-指令基本使用",children:["Redis 的 Geo 指令基本使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redis-的-geo-指令基本使用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Redis 提供的 Geo 指令只有 6 个，读者们瞬间就可以掌握。使用时，读者务必再次想起，它只是一个普通的 zset 结构。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/4/1646429f124a8aac?w=484&h=247&f=png&s=21537",alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"增加"})}),"\n",(0,r.jsx)(n.p,{children:"geoadd 指令携带集合名称以及多个经纬度名称三元组，注意这里可以加入多个三元组"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"127.0.0.1:6379> geoadd company 116.48105 39.996794 juejin\n(integer) 1\n127.0.0.1:6379> geoadd company 116.514203 39.905409 ireader\n(integer) 1\n127.0.0.1:6379> geoadd company 116.489033 40.007669 meituan\n(integer) 1\n127.0.0.1:6379> geoadd company 116.562108 39.787602 jd 116.334255 40.027400 xiaomi\n(integer) 2\n"})}),"\n",(0,r.jsx)(n.p,{children:"也许你会问为什么 Redis 没有提供 geo 删除指令？前面我们提到 geo 存储结构上使用的是 zset，意味着我们可以使用 zset 相关的指令来操作 geo 数据，所以删除指令可以直接使用 zrem 指令即可。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"距离"})}),"\n",(0,r.jsx)(n.p,{children:"geodist 指令可以用来计算两个元素之间的距离，携带集合名称、2 个名称和距离单位。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'127.0.0.1:6379> geodist company juejin ireader km\n"10.5501"\n127.0.0.1:6379> geodist company juejin meituan km\n"1.3878"\n127.0.0.1:6379> geodist company juejin jd km\n"24.2739"\n127.0.0.1:6379> geodist company juejin xiaomi km\n"12.9606"\n127.0.0.1:6379> geodist company juejin juejin km\n"0.0000"\n'})}),"\n",(0,r.jsx)(n.p,{children:"我们可以看到掘金离美团最近，因为它们都在望京。距离单位可以是 m、km、ml、ft，分别代表米、千米、英里和尺。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"获取元素位置"})}),"\n",(0,r.jsx)(n.p,{children:"geopos 指令可以获取集合中任意元素的经纬度坐标，可以一次获取多个。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'127.0.0.1:6379> geopos company juejin\n1) 1) "116.48104995489120483"\n   2) "39.99679348858259686"\n127.0.0.1:6379> geopos company ireader\n1) 1) "116.5142020583152771"\n   2) "39.90540918662494363"\n127.0.0.1:6379> geopos company juejin ireader\n1) 1) "116.48104995489120483"\n   2) "39.99679348858259686"\n2) 1) "116.5142020583152771"\n   2) "39.90540918662494363"\n'})}),"\n",(0,r.jsx)(n.p,{children:"我们观察到获取的经纬度坐标和 geoadd 进去的坐标有轻微的误差，原因是 geohash 对二维坐标进行的一维映射是有损的，通过映射再还原回来的值会出现较小的差别。对于「附近的人」这种功能来说，这点误差根本不是事。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"获取元素的 hash 值"})}),"\n",(0,r.jsxs)(n.p,{children:["geohash 可以获取元素的经纬度编码字符串，上面已经提到，它是 base32 编码。\n你可以使用这个编码值去 ",(0,r.jsx)(n.a,{href:"http://geohash.org/$%7Bhash%7D%E4%B8%AD%E8%BF%9B%E8%A1%8C%E7%9B%B4%E6%8E%A5%E5%AE%9A%E4%BD%8D%EF%BC%8C%E5%AE%83%E6%98%AF",target:"_blank",rel:"noopener noreferrer",children:"http://geohash.org/${hash}中进行直接定位，它是"})," geohash 的标准编码值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'127.0.0.1:6379> geohash company ireader\n1) "wx4g52e1ce0"\n127.0.0.1:6379> geohash company juejin\n1) "wx4gd94yjn0"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["让我们打开地址 ",(0,r.jsx)(n.a,{href:"http://geohash.org/wx4g52e1ce0%EF%BC%8C%E8%A7%82%E5%AF%9F%E5%9C%B0%E5%9B%BE%E6%8C%87%E5%90%91%E7%9A%84%E4%BD%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE%E3%80%82",target:"_blank",rel:"noopener noreferrer",children:"http://geohash.org/wx4g52e1ce0，观察地图指向的位置是否正确。"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/4/16463ea81a176326?w=716&h=693&f=png&s=307562",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"很好，就是这个位置，非常准确。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"附近的公司"})}),"\n",(0,r.jsx)(n.p,{children:"georadiusbymember 指令是最为关键的指令，它可以用来查询指定元素附近的其它元素，它的参数非常复杂。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'# 范围 20 公里以内最多 3 个元素按距离正排，它不会排除自身\n127.0.0.1:6379> georadiusbymember company ireader 20 km count 3 asc\n1) "ireader"\n2) "juejin"\n3) "meituan"\n# 范围 20 公里以内最多 3 个元素按距离倒排\n127.0.0.1:6379> georadiusbymember company ireader 20 km count 3 desc\n1) "jd"\n2) "meituan"\n3) "juejin"\n# 三个可选参数 withcoord withdist withhash 用来携带附加参数\n# withdist 很有用，它可以用来显示距离\n127.0.0.1:6379> georadiusbymember company ireader 20 km withcoord withdist withhash count 3 asc\n1) 1) "ireader"\n   2) "0.0000"\n   3) (integer) 4069886008361398\n   4) 1) "116.5142020583152771"\n      2) "39.90540918662494363"\n2) 1) "juejin"\n   2) "10.5501"\n   3) (integer) 4069887154388167\n   4) 1) "116.48104995489120483"\n      2) "39.99679348858259686"\n3) 1) "meituan"\n   2) "11.5748"\n   3) (integer) 4069887179083478\n   4) 1) "116.48903220891952515"\n      2) "40.00766997707732031"\n'})}),"\n",(0,r.jsx)(n.p,{children:"除了 georadiusbymember 指令根据元素查询附近的元素，Redis 还提供了根据坐标值来查询附近的元素，这个指令更加有用，它可以根据用户的定位来计算「附近的车」，「附近的餐馆」等。它的参数和 georadiusbymember 基本一致，除了将目标元素改成经纬度坐标值。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'127.0.0.1:6379> georadius company 116.514202 39.905409 20 km withdist count 3 asc\n1) 1) "ireader"\n   2) "0.0000"\n2) 1) "juejin"\n   2) "10.5501"\n3) 1) "meituan"\n   2) "11.5748"\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"小结--注意事项",children:["小结 & 注意事项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结--注意事项",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在一个地图应用中，车的数据、餐馆的数据、人的数据可能会有百万千万条，如果使用 Redis 的 Geo 数据结构，它们将全部放在一个 zset 集合中。在 Redis 的集群环境中，集合可能会从一个节点迁移到另一个节点，如果单个 key 的数据过大，会对集群的迁移工作造成较大的影响，在集群环境中单个 key 对应的数据量不宜超过 1M，否则会导致集群迁移出现卡顿现象，影响线上服务的正常运行。"}),"\n",(0,r.jsx)(n.p,{children:"所以，这里建议 Geo 的数据使用单独的 Redis 实例部署，不使用集群环境。"}),"\n",(0,r.jsx)(n.p,{children:"如果数据量过亿甚至更大，就需要对 Geo 数据进行拆分，按国家拆分、按省拆分，按市拆分，在人口特大城市甚至可以按区拆分。这样就可以显著降低单个 zset 集合的大小。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let a=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Redis%20%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F9%E5%BA%94%E7%94%A8%208%EF%BC%9A%E8%BF%91%E6%B0%B4%E6%A5%BC%E5%8F%B0%20%E2%80%94%E2%80%94%20GeoHash.md"]={toc:[{text:"用数据库来算附近的人",id:"用数据库来算附近的人",depth:2},{text:"GeoHash 算法",id:"geohash-算法",depth:2},{text:"Redis 的 Geo 指令基本使用",id:"redis-的-geo-指令基本使用",depth:2},{text:"小结 & 注意事项",id:"小结--注意事项",depth:2}],title:"9应用 8：近水楼台 —— GeoHash",headingTitle:"9应用 8：近水楼台 —— GeoHash",frontmatter:{}}}}]);