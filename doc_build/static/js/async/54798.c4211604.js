"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["54798"],{733942:function(e,n,s){s.r(n),s.d(n,{default:()=>i});var c=s(552676),d=s(740453);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",code:"code",pre:"pre",ul:"ul",li:"li",strong:"strong"},(0,d.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"25module-的加载实现",children:["25.Module 的加载实现",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#25module-的加载实现",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。"}),"\n",(0,c.jsxs)(n.h2,{id:"浏览器加载",children:["浏览器加载",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#浏览器加载",children:"#"})]}),"\n",(0,c.jsxs)(n.h3,{id:"传统方法",children:["传统方法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#传统方法",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["HTML 网页中，浏览器通过",(0,c.jsx)(n.code,{children:"<script>"}),"标签加载 JavaScript 脚本。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'\x3c!-- 页面内嵌的脚本 --\x3e\n<script type="application/javascript">\n  // module code\n<\/script>\n\n\x3c!-- 外部脚本 --\x3e\n<script type="application/javascript" src="path/to/myModule.js">\n<\/script>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，由于浏览器脚本的默认语言是 JavaScript，因此",(0,c.jsx)(n.code,{children:'type="application/javascript"'}),"可以省略。"]}),"\n",(0,c.jsxs)(n.p,{children:["默认情况下，浏览器是同步加载 JavaScript 脚本，即渲染引擎遇到",(0,c.jsx)(n.code,{children:"<script>"}),"标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。"]}),"\n",(0,c.jsx)(n.p,{children:"如果脚本体积很大，下载和执行的时间就会很长，因此造成浏览器堵塞，用户会感觉到浏览器“卡死”了，没有任何响应。这显然是很不好的体验，所以浏览器允许脚本异步加载，下面就是两种异步加载的语法。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<script src="path/to/myModule.js" defer><\/script>\n<script src="path/to/myModule.js" async><\/script>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"<script>"}),"标签打开",(0,c.jsx)(n.code,{children:"defer"}),"或",(0,c.jsx)(n.code,{children:"async"}),"属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"defer"}),"与",(0,c.jsx)(n.code,{children:"async"}),"的区别是：",(0,c.jsx)(n.code,{children:"defer"}),"要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；",(0,c.jsx)(n.code,{children:"async"}),"一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。一句话，",(0,c.jsx)(n.code,{children:"defer"}),"是“渲染完再执行”，",(0,c.jsx)(n.code,{children:"async"}),"是“下载完就执行”。另外，如果有多个",(0,c.jsx)(n.code,{children:"defer"}),"脚本，会按照它们在页面出现的顺序加载，而多个",(0,c.jsx)(n.code,{children:"async"}),"脚本是不能保证加载顺序的。"]}),"\n",(0,c.jsxs)(n.h3,{id:"加载规则",children:["加载规则",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#加载规则",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["浏览器加载 ES6 模块，也使用",(0,c.jsx)(n.code,{children:"<script>"}),"标签，但是要加入",(0,c.jsx)(n.code,{children:'type="module"'}),"属性。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<script type="module" src="./foo.js"><\/script>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码在网页中插入一个模块",(0,c.jsx)(n.code,{children:"foo.js"}),"，由于",(0,c.jsx)(n.code,{children:"type"}),"属性设为",(0,c.jsx)(n.code,{children:"module"}),"，所以浏览器知道这是一个 ES6 模块。"]}),"\n",(0,c.jsxs)(n.p,{children:["浏览器对于带有",(0,c.jsx)(n.code,{children:'type="module"'}),"的",(0,c.jsx)(n.code,{children:"<script>"}),"，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了",(0,c.jsx)(n.code,{children:"<script>"}),"标签的",(0,c.jsx)(n.code,{children:"defer"}),"属性。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<script type="module" src="./foo.js"><\/script>\n\x3c!-- 等同于 --\x3e\n<script type="module" src="./foo.js" defer><\/script>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["如果网页有多个",(0,c.jsx)(n.code,{children:'<script type="module">'}),"，它们会按照在页面出现的顺序依次执行。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<script>"}),"标签的",(0,c.jsx)(n.code,{children:"async"}),"属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<script type="module" src="./foo.js" async><\/script>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["一旦使用了",(0,c.jsx)(n.code,{children:"async"}),"属性，",(0,c.jsx)(n.code,{children:'<script type="module">'}),"就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。"]}),"\n",(0,c.jsx)(n.p,{children:"ES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<script type="module">\n  import utils from "./utils.js";\n\n  // other code\n<\/script>\n'})}),"\n",(0,c.jsx)(n.p,{children:"举例来说，jQuery 就支持模块加载。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:"<script type=\"module\">\n  import $ from \"./jquery/src/jquery.js\";\n  $('#message').text('Hi from jQuery!');\n<\/script>\n"})}),"\n",(0,c.jsxs)(n.p,{children:["对于外部的模块脚本（上例是",(0,c.jsx)(n.code,{children:"foo.js"}),"），有几点需要注意。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。"}),"\n",(0,c.jsxs)(n.li,{children:["模块脚本自动采用严格模式，不管有没有声明",(0,c.jsx)(n.code,{children:"use strict"}),"。"]}),"\n",(0,c.jsxs)(n.li,{children:["模块之中，可以使用",(0,c.jsx)(n.code,{children:"import"}),"命令加载其他模块（",(0,c.jsx)(n.code,{children:".js"}),"后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用",(0,c.jsx)(n.code,{children:"export"}),"命令输出对外接口。"]}),"\n",(0,c.jsxs)(n.li,{children:["模块之中，顶层的",(0,c.jsx)(n.code,{children:"this"}),"关键字返回",(0,c.jsx)(n.code,{children:"undefined"}),"，而不是指向",(0,c.jsx)(n.code,{children:"window"}),"。也就是说，在模块顶层使用",(0,c.jsx)(n.code,{children:"this"}),"关键字，是无意义的。"]}),"\n",(0,c.jsx)(n.li,{children:"同一个模块如果加载多次，将只执行一次。"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"下面是一个示例模块。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import utils from 'https://example.com/js/utils.js';\n\nconst x = 1;\n\nconsole.log(x === window.x); //false\nconsole.log(this === undefined); // true\n"})}),"\n",(0,c.jsxs)(n.p,{children:["利用顶层的",(0,c.jsx)(n.code,{children:"this"}),"等于",(0,c.jsx)(n.code,{children:"undefined"}),"这个语法点，可以侦测当前代码是否在 ES6 模块之中。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const isNotModuleScript = this !== undefined;\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"es6-模块与-commonjs-模块的差异",children:["ES6 模块与 CommonJS 模块的差异",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#es6-模块与-commonjs-模块的差异",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"讨论 Node.js 加载 ES6 模块之前，必须了解 ES6 模块与 CommonJS 模块完全不同。"}),"\n",(0,c.jsx)(n.p,{children:"它们有三个重大差异。"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。"}),"\n",(0,c.jsx)(n.li,{children:"CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。"}),"\n",(0,c.jsxs)(n.li,{children:["CommonJS 模块的",(0,c.jsx)(n.code,{children:"require()"}),"是同步加载模块，ES6 模块的",(0,c.jsx)(n.code,{children:"import"}),"命令是异步加载，有一个独立的模块依赖的解析阶段。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["第二个差异是因为 CommonJS 加载的是一个对象（即",(0,c.jsx)(n.code,{children:"module.exports"}),"属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。"]}),"\n",(0,c.jsx)(n.p,{children:"下面重点解释第一个差异。"}),"\n",(0,c.jsxs)(n.p,{children:["CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个模块文件",(0,c.jsx)(n.code,{children:"lib.js"}),"的例子。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  counter: counter,\n  incCounter: incCounter,\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码输出内部变量",(0,c.jsx)(n.code,{children:"counter"}),"和改写这个变量的内部方法",(0,c.jsx)(n.code,{children:"incCounter"}),"。然后，在",(0,c.jsx)(n.code,{children:"main.js"}),"里面加载这个模块。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// main.js\nvar mod = require('./lib');\n\nconsole.log(mod.counter);  // 3\nmod.incCounter();\nconsole.log(mod.counter); // 3\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码说明，",(0,c.jsx)(n.code,{children:"lib.js"}),"模块加载以后，它的内部变化就影响不到输出的",(0,c.jsx)(n.code,{children:"mod.counter"}),"了。这是因为",(0,c.jsx)(n.code,{children:"mod.counter"}),"是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  get counter() {\n    return counter\n  },\n  incCounter: incCounter,\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，输出的",(0,c.jsx)(n.code,{children:"counter"}),"属性实际上是一个取值器函数。现在再执行",(0,c.jsx)(n.code,{children:"main.js"}),"，就可以正确读取内部变量",(0,c.jsx)(n.code,{children:"counter"}),"的变动了。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"$ node main.js\n3\n4\n"})}),"\n",(0,c.jsxs)(n.p,{children:["ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令",(0,c.jsx)(n.code,{children:"import"}),"，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的",(0,c.jsx)(n.code,{children:"import"}),"有点像 Unix 系统的“符号连接”，原始值变了，",(0,c.jsx)(n.code,{children:"import"}),"加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。"]}),"\n",(0,c.jsx)(n.p,{children:"还是举上面的例子。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// lib.js\nexport let counter = 3;\nexport function incCounter() {\n  counter++;\n}\n\n// main.js\nimport { counter, incCounter } from './lib';\nconsole.log(counter); // 3\nincCounter();\nconsole.log(counter); // 4\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码说明，ES6 模块输入的变量",(0,c.jsx)(n.code,{children:"counter"}),"是活的，完全反应其所在模块",(0,c.jsx)(n.code,{children:"lib.js"}),"内部的变化。"]}),"\n",(0,c.jsxs)(n.p,{children:["再举一个出现在",(0,c.jsx)(n.code,{children:"export"}),"一节中的例子。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// m1.js\nexport var foo = 'bar';\nsetTimeout(() => foo = 'baz', 500);\n\n// m2.js\nimport {foo} from './m1.js';\nconsole.log(foo);\nsetTimeout(() => console.log(foo), 500);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"m1.js"}),"的变量",(0,c.jsx)(n.code,{children:"foo"}),"，在刚加载时等于",(0,c.jsx)(n.code,{children:"bar"}),"，过了 500 毫秒，又变为等于",(0,c.jsx)(n.code,{children:"baz"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["让我们看看，",(0,c.jsx)(n.code,{children:"m2.js"}),"能否正确读取这个变化。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"$ babel-node m2.js\n\nbar\nbaz\n"})}),"\n",(0,c.jsx)(n.p,{children:"上面代码表明，ES6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。"}),"\n",(0,c.jsx)(n.p,{children:"由于 ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// lib.js\nexport let obj = {};\n\n// main.js\nimport { obj } from './lib';\n\nobj.prop = 123; // OK\nobj = {}; // TypeError\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"main.js"}),"从",(0,c.jsx)(n.code,{children:"lib.js"}),"输入变量",(0,c.jsx)(n.code,{children:"obj"}),"，可以对",(0,c.jsx)(n.code,{children:"obj"}),"添加属性，但是重新赋值就会报错。因为变量",(0,c.jsx)(n.code,{children:"obj"}),"指向的地址是只读的，不能重新赋值，这就好比",(0,c.jsx)(n.code,{children:"main.js"}),"创造了一个名为",(0,c.jsx)(n.code,{children:"obj"}),"的",(0,c.jsx)(n.code,{children:"const"}),"变量。"]}),"\n",(0,c.jsxs)(n.p,{children:["最后，",(0,c.jsx)(n.code,{children:"export"}),"通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// mod.js\nfunction C() {\n  this.sum = 0;\n  this.add = function () {\n    this.sum += 1;\n  };\n  this.show = function () {\n    console.log(this.sum);\n  };\n}\n\nexport let c = new C();\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面的脚本",(0,c.jsx)(n.code,{children:"mod.js"}),"，输出的是一个",(0,c.jsx)(n.code,{children:"C"}),"的实例。不同的脚本加载这个模块，得到的都是同一个实例。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// x.js\nimport {c} from './mod';\nc.add();\n\n// y.js\nimport {c} from './mod';\nc.show();\n\n// main.js\nimport './x';\nimport './y';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["现在执行",(0,c.jsx)(n.code,{children:"main.js"}),"，输出的是",(0,c.jsx)(n.code,{children:"1"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"$ babel-node main.js\n1\n"})}),"\n",(0,c.jsxs)(n.p,{children:["这就证明了",(0,c.jsx)(n.code,{children:"x.js"}),"和",(0,c.jsx)(n.code,{children:"y.js"}),"加载的都是",(0,c.jsx)(n.code,{children:"C"}),"的同一个实例。"]}),"\n",(0,c.jsxs)(n.h2,{id:"nodejs-的模块加载方法",children:["Node.js 的模块加载方法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#nodejs-的模块加载方法",children:"#"})]}),"\n",(0,c.jsxs)(n.h3,{id:"概述",children:["概述",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#概述",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"JavaScript 现在有两种模块。一种是 ES6 模块，简称 ESM；另一种是 CommonJS 模块，简称 CJS。"}),"\n",(0,c.jsxs)(n.p,{children:["CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。语法上面，两者最明显的差异是，CommonJS 模块使用",(0,c.jsx)(n.code,{children:"require()"}),"和",(0,c.jsx)(n.code,{children:"module.exports"}),"，ES6 模块使用",(0,c.jsx)(n.code,{children:"import"}),"和",(0,c.jsx)(n.code,{children:"export"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:"它们采用不同的加载方案。从 Node.js v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。"}),"\n",(0,c.jsxs)(n.p,{children:["Node.js 要求 ES6 模块采用",(0,c.jsx)(n.code,{children:".mjs"}),"后缀文件名。也就是说，只要脚本文件里面使用",(0,c.jsx)(n.code,{children:"import"}),"或者",(0,c.jsx)(n.code,{children:"export"}),"命令，那么就必须采用",(0,c.jsx)(n.code,{children:".mjs"}),"后缀名。Node.js 遇到",(0,c.jsx)(n.code,{children:".mjs"}),"文件，就认为它是 ES6 模块，默认启用严格模式，不必在每个模块文件顶部指定",(0,c.jsx)(n.code,{children:'"use strict"'}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["如果不希望将后缀名改成",(0,c.jsx)(n.code,{children:".mjs"}),"，可以在项目的",(0,c.jsx)(n.code,{children:"package.json"}),"文件中，指定",(0,c.jsx)(n.code,{children:"type"}),"字段为",(0,c.jsx)(n.code,{children:"module"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'{\n   "type": "module"\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:"一旦设置了以后，该项目的 JS 脚本，就被解释成 ES6 模块。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# 解释成 ES6 模块\n$ node my-app.js\n"})}),"\n",(0,c.jsxs)(n.p,{children:["如果这时还要使用 CommonJS 模块，那么需要将 CommonJS 脚本的后缀名都改成",(0,c.jsx)(n.code,{children:".cjs"}),"。如果没有",(0,c.jsx)(n.code,{children:"type"}),"字段，或者",(0,c.jsx)(n.code,{children:"type"}),"字段为",(0,c.jsx)(n.code,{children:"commonjs"}),"，则",(0,c.jsx)(n.code,{children:".js"}),"脚本会被解释成 CommonJS 模块。"]}),"\n",(0,c.jsxs)(n.p,{children:["总结为一句话：",(0,c.jsx)(n.code,{children:".mjs"}),"文件总是以 ES6 模块加载，",(0,c.jsx)(n.code,{children:".cjs"}),"文件总是以 CommonJS 模块加载，",(0,c.jsx)(n.code,{children:".js"}),"文件的加载取决于",(0,c.jsx)(n.code,{children:"package.json"}),"里面",(0,c.jsx)(n.code,{children:"type"}),"字段的设置。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，ES6 模块与 CommonJS 模块尽量不要混用。",(0,c.jsx)(n.code,{children:"require"}),"命令不能加载",(0,c.jsx)(n.code,{children:".mjs"}),"文件，会报错，只有",(0,c.jsx)(n.code,{children:"import"}),"命令才可以加载",(0,c.jsx)(n.code,{children:".mjs"}),"文件。反过来，",(0,c.jsx)(n.code,{children:".mjs"}),"文件里面也不能使用",(0,c.jsx)(n.code,{children:"require"}),"命令，必须使用",(0,c.jsx)(n.code,{children:"import"}),"。"]}),"\n",(0,c.jsxs)(n.h3,{id:"packagejson-的-main-字段",children:["package.json 的 main 字段",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson-的-main-字段",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"package.json"}),"文件有两个字段可以指定模块的入口文件：",(0,c.jsx)(n.code,{children:"main"}),"和",(0,c.jsx)(n.code,{children:"exports"}),"。比较简单的模块，可以只使用",(0,c.jsx)(n.code,{children:"main"}),"字段，指定模块加载的入口文件。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'// ./node_modules/es-module-package/package.json\n{\n  "type": "module",\n  "main": "./src/index.js"\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码指定项目的入口脚本为",(0,c.jsx)(n.code,{children:"./src/index.js"}),"，它的格式为 ES6 模块。如果没有",(0,c.jsx)(n.code,{children:"type"}),"字段，",(0,c.jsx)(n.code,{children:"index.js"}),"就会被解释为 CommonJS 模块。"]}),"\n",(0,c.jsxs)(n.p,{children:["然后，",(0,c.jsx)(n.code,{children:"import"}),"命令就可以加载这个模块。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// ./my-app.mjs\n\nimport { something } from 'es-module-package';\n// 实际加载的是 ./node_modules/es-module-package/src/index.js\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，运行该脚本以后，Node.js 就会到",(0,c.jsx)(n.code,{children:"./node_modules"}),"目录下面，寻找",(0,c.jsx)(n.code,{children:"es-module-package"}),"模块，然后根据该模块",(0,c.jsx)(n.code,{children:"package.json"}),"的",(0,c.jsx)(n.code,{children:"main"}),"字段去执行入口文件。"]}),"\n",(0,c.jsxs)(n.p,{children:["这时，如果用 CommonJS 模块的",(0,c.jsx)(n.code,{children:"require()"}),"命令去加载",(0,c.jsx)(n.code,{children:"es-module-package"}),"模块会报错，因为 CommonJS 模块不能处理",(0,c.jsx)(n.code,{children:"export"}),"命令。"]}),"\n",(0,c.jsxs)(n.h3,{id:"packagejson-的-exports-字段",children:["package.json 的 exports 字段",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson-的-exports-字段",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"exports"}),"字段的优先级高于",(0,c.jsx)(n.code,{children:"main"}),"字段。它有多种用法。"]}),"\n",(0,c.jsx)(n.p,{children:"（1）子目录别名"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"package.json"}),"文件的",(0,c.jsx)(n.code,{children:"exports"}),"字段可以指定脚本或子目录的别名。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'// ./node_modules/es-module-package/package.json\n{\n  "exports": {\n    "./submodule": "./src/submodule.js"\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面的代码指定",(0,c.jsx)(n.code,{children:"src/submodule.js"}),"别名为",(0,c.jsx)(n.code,{children:"submodule"}),"，然后就可以从别名加载这个文件。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import submodule from 'es-module-package/submodule';\n// 加载 ./node_modules/es-module-package/src/submodule.js\n"})}),"\n",(0,c.jsx)(n.p,{children:"下面是子目录别名的例子。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'// ./node_modules/es-module-package/package.json\n{\n  "exports": {\n    "./features/": "./src/features/"\n  }\n}\n\nimport feature from \'es-module-package/features/x.js\';\n// 加载 ./node_modules/es-module-package/src/features/x.js\n'})}),"\n",(0,c.jsx)(n.p,{children:"如果没有指定别名，就不能用“模块+脚本名”这种形式加载脚本。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 报错\nimport submodule from 'es-module-package/private-module.js';\n\n// 不报错\nimport submodule from './node_modules/es-module-package/private-module.js';\n"})}),"\n",(0,c.jsx)(n.p,{children:"（2）main 的别名"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"exports"}),"字段的别名如果是",(0,c.jsx)(n.code,{children:"."}),"，就代表模块的主入口，优先级高于",(0,c.jsx)(n.code,{children:"main"}),"字段，并且可以直接简写成",(0,c.jsx)(n.code,{children:"exports"}),"字段的值。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'{\n  "exports": {\n    ".": "./main.js"\n  }\n}\n\n// 等同于\n{\n  "exports": "./main.js"\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["由于",(0,c.jsx)(n.code,{children:"exports"}),"字段只有支持 ES6 的 Node.js 才认识，所以可以搭配",(0,c.jsx)(n.code,{children:"main"}),"字段，来兼容旧版本的 Node.js。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'{\n  "main": "./main-legacy.cjs",\n  "exports": {\n    ".": "./main-modern.cjs"\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，老版本的 Node.js （不支持 ES6 模块）的入口文件是",(0,c.jsx)(n.code,{children:"main-legacy.cjs"}),"，新版本的 Node.js 的入口文件是",(0,c.jsx)(n.code,{children:"main-modern.cjs"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"（3）条件加载"})}),"\n",(0,c.jsxs)(n.p,{children:["利用",(0,c.jsx)(n.code,{children:"."}),"这个别名，可以为 ES6 模块和 CommonJS 指定不同的入口。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'{\n  "type": "module",\n  "exports": {\n    ".": {\n      "require": "./main.cjs",\n      "default": "./main.js"\n    }\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，别名",(0,c.jsx)(n.code,{children:"."}),"的",(0,c.jsx)(n.code,{children:"require"}),"条件指定",(0,c.jsx)(n.code,{children:"require()"}),"命令的入口文件（即 CommonJS 的入口），",(0,c.jsx)(n.code,{children:"default"}),"条件指定其他情况的入口（即 ES6 的入口）。"]}),"\n",(0,c.jsx)(n.p,{children:"上面的写法可以简写如下。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'{\n  "exports": {\n    "require": "./main.cjs",\n    "default": "./main.js"\n  }\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:"注意，如果同时还有其他别名，就不能采用简写，否则会报错。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'{\n  // 报错\n  "exports": {\n    "./feature": "./lib/feature.js",\n    "require": "./main.cjs",\n    "default": "./main.js"\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.h3,{id:"commonjs-模块加载-es6-模块",children:["CommonJS 模块加载 ES6 模块",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#commonjs-模块加载-es6-模块",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["CommonJS 的",(0,c.jsx)(n.code,{children:"require()"}),"命令不能加载 ES6 模块，会报错，只能使用",(0,c.jsx)(n.code,{children:"import()"}),"这个方法加载。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"(async () => {\n  await import('./my-app.mjs');\n})();\n"})}),"\n",(0,c.jsx)(n.p,{children:"上面代码可以在 CommonJS 模块中运行。"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"require()"}),"不支持 ES6 模块的一个原因是，它是同步加载，而 ES6 模块内部可以使用顶层",(0,c.jsx)(n.code,{children:"await"}),"命令，导致无法被同步加载。"]}),"\n",(0,c.jsxs)(n.h3,{id:"es6-模块加载-commonjs-模块",children:["ES6 模块加载 CommonJS 模块",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#es6-模块加载-commonjs-模块",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["ES6 模块的",(0,c.jsx)(n.code,{children:"import"}),"命令可以加载 CommonJS 模块，但是只能整体加载，不能只加载单一的输出项。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 正确\nimport packageMain from 'commonjs-package';\n\n// 报错\nimport { method } from 'commonjs-package';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["这是因为 ES6 模块需要支持静态代码分析，而 CommonJS 模块的输出接口是",(0,c.jsx)(n.code,{children:"module.exports"}),"，是一个对象，无法被静态分析，所以只能整体加载。"]}),"\n",(0,c.jsx)(n.p,{children:"加载单一的输出项，可以写成下面这样。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import packageMain from 'commonjs-package';\nconst { method } = packageMain;\n"})}),"\n",(0,c.jsxs)(n.p,{children:["还有一种变通的加载方法，就是使用 Node.js 内置的",(0,c.jsx)(n.code,{children:"module.createRequire()"}),"方法。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// cjs.cjs\nmodule.exports = 'cjs';\n\n// esm.mjs\nimport { createRequire } from 'module';\n\nconst require = createRequire(import.meta.url);\n\nconst cjs = require('./cjs.cjs');\ncjs === 'cjs'; // true\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，ES6 模块通过",(0,c.jsx)(n.code,{children:"module.createRequire()"}),"方法可以加载 CommonJS 模块。但是，这种写法等于将 ES6 和 CommonJS 混在一起了，所以不建议使用。"]}),"\n",(0,c.jsxs)(n.h3,{id:"同时支持两种格式的模块",children:["同时支持两种格式的模块",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#同时支持两种格式的模块",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"一个模块同时要支持 CommonJS 和 ES6 两种格式，也很容易。"}),"\n",(0,c.jsxs)(n.p,{children:["如果原始模块是 ES6 格式，那么需要给出一个整体输出接口，比如",(0,c.jsx)(n.code,{children:"export default obj"}),"，使得 CommonJS 可以用",(0,c.jsx)(n.code,{children:"import()"}),"进行加载。"]}),"\n",(0,c.jsx)(n.p,{children:"如果原始模块是 CommonJS 格式，那么可以加一个包装层。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import cjsModule from '../index.js';\nexport const foo = cjsModule.foo;\n"})}),"\n",(0,c.jsx)(n.p,{children:"上面代码先整体输入 CommonJS 模块，然后再根据需要输出具名接口。"}),"\n",(0,c.jsxs)(n.p,{children:["你可以把这个文件的后缀名改为",(0,c.jsx)(n.code,{children:".mjs"}),"，或者将它放在一个子目录，再在这个子目录里面放一个单独的",(0,c.jsx)(n.code,{children:"package.json"}),"文件，指明",(0,c.jsx)(n.code,{children:'{ type: "module" }'}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["另一种做法是在",(0,c.jsx)(n.code,{children:"package.json"}),"文件的",(0,c.jsx)(n.code,{children:"exports"}),"字段，指明两种格式模块各自的加载入口。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'"exports"：{\n  "require": "./index.js"，\n  "import": "./esm/wrapper.js"\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码指定",(0,c.jsx)(n.code,{children:"require()"}),"和",(0,c.jsx)(n.code,{children:"import"}),"，加载该模块会自动切换到不一样的入口文件。"]}),"\n",(0,c.jsxs)(n.h3,{id:"nodejs-的内置模块",children:["Node.js 的内置模块",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#nodejs-的内置模块",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"Node.js 的内置模块可以整体加载，也可以加载指定的输出项。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 整体加载\nimport EventEmitter from 'events';\nconst e = new EventEmitter();\n\n// 加载指定的输出项\nimport { readFile } from 'fs';\nreadFile('./foo.txt', (err, source) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(source);\n  }\n});\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"加载路径",children:["加载路径",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#加载路径",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["ES6 模块的加载路径必须给出脚本的完整路径，不能省略脚本的后缀名。",(0,c.jsx)(n.code,{children:"import"}),"命令和",(0,c.jsx)(n.code,{children:"package.json"}),"文件的",(0,c.jsx)(n.code,{children:"main"}),"字段如果省略脚本的后缀名，会报错。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// ES6 模块中将报错\nimport { something } from './index';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["为了与浏览器的",(0,c.jsx)(n.code,{children:"import"}),"加载规则相同，Node.js 的",(0,c.jsx)(n.code,{children:".mjs"}),"文件支持 URL 路径。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import './foo.mjs?query=1'; // 加载 ./foo 传入参数 ?query=1\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，脚本路径带有参数",(0,c.jsx)(n.code,{children:"?query=1"}),"，Node 会按 URL 规则解读。同一个脚本只要参数不同，就会被加载多次，并且保存成不同的缓存。由于这个原因，只要文件名中含有",(0,c.jsx)(n.code,{children:":"}),"、",(0,c.jsx)(n.code,{children:"%"}),"、",(0,c.jsx)(n.code,{children:"#"}),"、",(0,c.jsx)(n.code,{children:"?"}),"等特殊字符，最好对这些字符进行转义。"]}),"\n",(0,c.jsxs)(n.p,{children:["目前，Node.js 的",(0,c.jsx)(n.code,{children:"import"}),"命令只支持加载本地模块（",(0,c.jsx)(n.code,{children:"file:"}),"协议）和",(0,c.jsx)(n.code,{children:"data:"}),"协议，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以",(0,c.jsx)(n.code,{children:"/"}),"或",(0,c.jsx)(n.code,{children:"//"}),"开头的路径）。"]}),"\n",(0,c.jsxs)(n.h3,{id:"内部变量",children:["内部变量",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#内部变量",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"ES6 模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。为了达到这个目标，Node.js 规定 ES6 模块之中不能使用 CommonJS 模块的特有的一些内部变量。"}),"\n",(0,c.jsxs)(n.p,{children:["首先，就是",(0,c.jsx)(n.code,{children:"this"}),"关键字。ES6 模块之中，顶层的",(0,c.jsx)(n.code,{children:"this"}),"指向",(0,c.jsx)(n.code,{children:"undefined"}),"；CommonJS 模块的顶层",(0,c.jsx)(n.code,{children:"this"}),"指向当前模块，这是两者的一个重大差异。"]}),"\n",(0,c.jsx)(n.p,{children:"其次，以下这些顶层变量在 ES6 模块之中都是不存在的。"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"arguments"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"require"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"module"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"exports"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"__filename"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"__dirname"})}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"循环加载",children:["循环加载",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#循环加载",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["“循环加载”（circular dependency）指的是，",(0,c.jsx)(n.code,{children:"a"}),"脚本的执行依赖",(0,c.jsx)(n.code,{children:"b"}),"脚本，而",(0,c.jsx)(n.code,{children:"b"}),"脚本的执行又依赖",(0,c.jsx)(n.code,{children:"a"}),"脚本。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// a.js\nvar b = require('b');\n\n// b.js\nvar a = require('a');\n"})}),"\n",(0,c.jsx)(n.p,{children:"通常，“循环加载”表示存在强耦合，如果处理不好，还可能导致递归加载，使得程序无法执行，因此应该避免出现。"}),"\n",(0,c.jsxs)(n.p,{children:["但是实际上，这是很难避免的，尤其是依赖关系复杂的大项目，很容易出现",(0,c.jsx)(n.code,{children:"a"}),"依赖",(0,c.jsx)(n.code,{children:"b"}),"，",(0,c.jsx)(n.code,{children:"b"}),"依赖",(0,c.jsx)(n.code,{children:"c"}),"，",(0,c.jsx)(n.code,{children:"c"}),"又依赖",(0,c.jsx)(n.code,{children:"a"}),"这样的情况。这意味着，模块加载机制必须考虑“循环加载”的情况。"]}),"\n",(0,c.jsx)(n.p,{children:"对于 JavaScript 语言来说，目前最常见的两种模块格式 CommonJS 和 ES6，处理“循环加载”的方法是不一样的，返回的结果也不一样。"}),"\n",(0,c.jsxs)(n.h3,{id:"commonjs-模块的加载原理",children:["CommonJS 模块的加载原理",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#commonjs-模块的加载原理",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"介绍 ES6 如何处理“循环加载”之前，先介绍目前最流行的 CommonJS 模块格式的加载原理。"}),"\n",(0,c.jsxs)(n.p,{children:["CommonJS 的一个模块，就是一个脚本文件。",(0,c.jsx)(n.code,{children:"require"}),"命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"{\n  id: '...',\n  exports: { ... },\n  loaded: true,\n  ...\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码就是 Node 内部加载模块后生成的一个对象。该对象的",(0,c.jsx)(n.code,{children:"id"}),"属性是模块名，",(0,c.jsx)(n.code,{children:"exports"}),"属性是模块输出的各个接口，",(0,c.jsx)(n.code,{children:"loaded"}),"属性是一个布尔值，表示该模块的脚本是否执行完毕。其他还有很多属性，这里都省略了。"]}),"\n",(0,c.jsxs)(n.p,{children:["以后需要用到这个模块的时候，就会到",(0,c.jsx)(n.code,{children:"exports"}),"属性上面取值。即使再次执行",(0,c.jsx)(n.code,{children:"require"}),"命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。"]}),"\n",(0,c.jsxs)(n.h3,{id:"commonjs-模块的循环加载",children:["CommonJS 模块的循环加载",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#commonjs-模块的循环加载",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["CommonJS 模块的重要特性是加载时执行，即脚本代码在",(0,c.jsx)(n.code,{children:"require"}),'的时候，就会全部执行。一旦出现某个模块被"循环加载"，就只输出已经执行的部分，还未执行的部分不会输出。']}),"\n",(0,c.jsxs)(n.p,{children:["让我们来看，Node ",(0,c.jsx)(n.a,{href:"https://nodejs.org/api/modules.html#modules_cycles",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"里面的例子。脚本文件",(0,c.jsx)(n.code,{children:"a.js"}),"代码如下。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"exports.done = false;\nvar b = require('./b.js');\nconsole.log('在 a.js 之中，b.done = %j', b.done);\nexports.done = true;\nconsole.log('a.js 执行完毕');\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码之中，",(0,c.jsx)(n.code,{children:"a.js"}),"脚本先输出一个",(0,c.jsx)(n.code,{children:"done"}),"变量，然后加载另一个脚本文件",(0,c.jsx)(n.code,{children:"b.js"}),"。注意，此时",(0,c.jsx)(n.code,{children:"a.js"}),"代码就停在这里，等待",(0,c.jsx)(n.code,{children:"b.js"}),"执行完毕，再往下执行。"]}),"\n",(0,c.jsxs)(n.p,{children:["再看",(0,c.jsx)(n.code,{children:"b.js"}),"的代码。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"exports.done = false;\nvar a = require('./a.js');\nconsole.log('在 b.js 之中，a.done = %j', a.done);\nexports.done = true;\nconsole.log('b.js 执行完毕');\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码之中，",(0,c.jsx)(n.code,{children:"b.js"}),"执行到第二行，就会去加载",(0,c.jsx)(n.code,{children:"a.js"}),"，这时，就发生了“循环加载”。系统会去",(0,c.jsx)(n.code,{children:"a.js"}),"模块对应对象的",(0,c.jsx)(n.code,{children:"exports"}),"属性取值，可是因为",(0,c.jsx)(n.code,{children:"a.js"}),"还没有执行完，从",(0,c.jsx)(n.code,{children:"exports"}),"属性只能取回已经执行的部分，而不是最后的值。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"a.js"}),"已经执行的部分，只有一行。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"exports.done = false;\n"})}),"\n",(0,c.jsxs)(n.p,{children:["因此，对于",(0,c.jsx)(n.code,{children:"b.js"}),"来说，它从",(0,c.jsx)(n.code,{children:"a.js"}),"只输入一个变量",(0,c.jsx)(n.code,{children:"done"}),"，值为",(0,c.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["然后，",(0,c.jsx)(n.code,{children:"b.js"}),"接着往下执行，等到全部执行完毕，再把执行权交还给",(0,c.jsx)(n.code,{children:"a.js"}),"。于是，",(0,c.jsx)(n.code,{children:"a.js"}),"接着往下执行，直到执行完毕。我们写一个脚本",(0,c.jsx)(n.code,{children:"main.js"}),"，验证这个过程。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"var a = require('./a.js');\nvar b = require('./b.js');\nconsole.log('在 main.js 之中, a.done=%j, b.done=%j', a.done, b.done);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["执行",(0,c.jsx)(n.code,{children:"main.js"}),"，运行结果如下。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"$ node main.js\n\n在 b.js 之中，a.done = false\nb.js 执行完毕\n在 a.js 之中，b.done = true\na.js 执行完毕\n在 main.js 之中, a.done=true, b.done=true\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面的代码证明了两件事。一是，在",(0,c.jsx)(n.code,{children:"b.js"}),"之中，",(0,c.jsx)(n.code,{children:"a.js"}),"没有执行完毕，只执行了第一行。二是，",(0,c.jsx)(n.code,{children:"main.js"}),"执行到第二行时，不会再次执行",(0,c.jsx)(n.code,{children:"b.js"}),"，而是输出缓存的",(0,c.jsx)(n.code,{children:"b.js"}),"的执行结果，即它的第四行。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"exports.done = true;\n"})}),"\n",(0,c.jsx)(n.p,{children:"总之，CommonJS 输入的是被输出值的拷贝，不是引用。"}),"\n",(0,c.jsx)(n.p,{children:"另外，由于 CommonJS 模块遇到循环加载时，返回的是当前已经执行的部分的值，而不是代码全部执行后的值，两者可能会有差异。所以，输入变量的时候，必须非常小心。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"var a = require('a'); // 安全的写法\nvar foo = require('a').foo; // 危险的写法\n\nexports.good = function (arg) {\n  return a.foo('good', arg); // 使用的是 a.foo 的最新值\n};\n\nexports.bad = function (arg) {\n  return foo('bad', arg); // 使用的是一个部分加载时的值\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，如果发生循环加载，",(0,c.jsx)(n.code,{children:"require('a').foo"}),"的值很可能后面会被改写，改用",(0,c.jsx)(n.code,{children:"require('a')"}),"会更保险一点。"]}),"\n",(0,c.jsxs)(n.h3,{id:"es6-模块的循环加载",children:["ES6 模块的循环加载",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#es6-模块的循环加载",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["ES6 处理“循环加载”与 CommonJS 有本质的不同。ES6 模块是动态引用，如果使用",(0,c.jsx)(n.code,{children:"import"}),"从一个模块加载变量（即",(0,c.jsx)(n.code,{children:"import foo from 'foo'"}),"），那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。"]}),"\n",(0,c.jsx)(n.p,{children:"请看下面这个例子。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// a.mjs\nimport {bar} from './b';\nconsole.log('a.mjs');\nconsole.log(bar);\nexport let foo = 'foo';\n\n// b.mjs\nimport {foo} from './a';\nconsole.log('b.mjs');\nconsole.log(foo);\nexport let bar = 'bar';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"a.mjs"}),"加载",(0,c.jsx)(n.code,{children:"b.mjs"}),"，",(0,c.jsx)(n.code,{children:"b.mjs"}),"又加载",(0,c.jsx)(n.code,{children:"a.mjs"}),"，构成循环加载。执行",(0,c.jsx)(n.code,{children:"a.mjs"}),"，结果如下。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"$ node --experimental-modules a.mjs\nb.mjs\nReferenceError: foo is not defined\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，执行",(0,c.jsx)(n.code,{children:"a.mjs"}),"以后会报错，",(0,c.jsx)(n.code,{children:"foo"}),"变量未定义，这是为什么？"]}),"\n",(0,c.jsxs)(n.p,{children:["让我们一行行来看，ES6 循环加载是怎么处理的。首先，执行",(0,c.jsx)(n.code,{children:"a.mjs"}),"以后，引擎发现它加载了",(0,c.jsx)(n.code,{children:"b.mjs"}),"，因此会优先执行",(0,c.jsx)(n.code,{children:"b.mjs"}),"，然后再执行",(0,c.jsx)(n.code,{children:"a.mjs"}),"。接着，执行",(0,c.jsx)(n.code,{children:"b.mjs"}),"的时候，已知它从",(0,c.jsx)(n.code,{children:"a.mjs"}),"输入了",(0,c.jsx)(n.code,{children:"foo"}),"接口，这时不会去执行",(0,c.jsx)(n.code,{children:"a.mjs"}),"，而是认为这个接口已经存在了，继续往下执行。执行到第三行",(0,c.jsx)(n.code,{children:"console.log(foo)"}),"的时候，才发现这个接口根本没定义，因此报错。"]}),"\n",(0,c.jsxs)(n.p,{children:["解决这个问题的方法，就是让",(0,c.jsx)(n.code,{children:"b.mjs"}),"运行的时候，",(0,c.jsx)(n.code,{children:"foo"}),"已经有定义了。这可以通过将",(0,c.jsx)(n.code,{children:"foo"}),"写成函数来解决。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// a.mjs\nimport {bar} from './b';\nconsole.log('a.mjs');\nconsole.log(bar());\nfunction foo() { return 'foo' }\nexport {foo};\n\n// b.mjs\nimport {foo} from './a';\nconsole.log('b.mjs');\nconsole.log(foo());\nfunction bar() { return 'bar' }\nexport {bar};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["这时再执行",(0,c.jsx)(n.code,{children:"a.mjs"}),"就可以得到预期结果。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"$ node --experimental-modules a.mjs\nb.mjs\nfoo\na.mjs\nbar\n"})}),"\n",(0,c.jsxs)(n.p,{children:["这是因为函数具有提升作用，在执行",(0,c.jsx)(n.code,{children:"import {bar} from './b'"}),"时，函数",(0,c.jsx)(n.code,{children:"foo"}),"就已经有定义了，所以",(0,c.jsx)(n.code,{children:"b.mjs"}),"加载的时候不会报错。这也意味着，如果把函数",(0,c.jsx)(n.code,{children:"foo"}),"改写成函数表达式，也会报错。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// a.mjs\nimport {bar} from './b';\nconsole.log('a.mjs');\nconsole.log(bar());\nconst foo = () => 'foo';\nexport {foo};\n"})}),"\n",(0,c.jsx)(n.p,{children:"上面代码的第四行，改成了函数表达式，就不具有提升作用，执行就会报错。"}),"\n",(0,c.jsxs)(n.p,{children:["我们再来看 ES6 模块加载器",(0,c.jsx)(n.a,{href:"https://github.com/ModuleLoader/es6-module-loader/blob/master/docs/circular-references-bindings.md",target:"_blank",rel:"noopener noreferrer",children:"SystemJS"}),"给出的一个例子。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// even.js\nimport { odd } from './odd'\nexport var counter = 0;\nexport function even(n) {\n  counter++;\n  return n === 0 || odd(n - 1);\n}\n\n// odd.js\nimport { even } from './even';\nexport function odd(n) {\n  return n !== 0 && even(n - 1);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"even.js"}),"里面的函数",(0,c.jsx)(n.code,{children:"even"}),"有一个参数",(0,c.jsx)(n.code,{children:"n"}),"，只要不等于 0，就会减去 1，传入加载的",(0,c.jsx)(n.code,{children:"odd()"}),"。",(0,c.jsx)(n.code,{children:"odd.js"}),"也会做类似操作。"]}),"\n",(0,c.jsx)(n.p,{children:"运行上面这段代码，结果如下。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"$ babel-node\n> import * as m from './even.js';\n> m.even(10);\ntrue\n> m.counter\n6\n> m.even(20)\ntrue\n> m.counter\n17\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，参数",(0,c.jsx)(n.code,{children:"n"}),"从 10 变为 0 的过程中，",(0,c.jsx)(n.code,{children:"even()"}),"一共会执行 6 次，所以变量",(0,c.jsx)(n.code,{children:"counter"}),"等于 6。第二次调用",(0,c.jsx)(n.code,{children:"even()"}),"时，参数",(0,c.jsx)(n.code,{children:"n"}),"从 20 变为 0，",(0,c.jsx)(n.code,{children:"even()"}),"一共会执行 11 次，加上前面的 6 次，所以变量",(0,c.jsx)(n.code,{children:"counter"}),"等于 17。"]}),"\n",(0,c.jsx)(n.p,{children:"这个例子要是改写成 CommonJS，就根本无法执行，会报错。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// even.js\nvar odd = require('./odd');\nvar counter = 0;\nexports.counter = counter;\nexports.even = function (n) {\n  counter++;\n  return n == 0 || odd(n - 1);\n}\n\n// odd.js\nvar even = require('./even').even;\nmodule.exports = function (n) {\n  return n != 0 && even(n - 1);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"even.js"}),"加载",(0,c.jsx)(n.code,{children:"odd.js"}),"，而",(0,c.jsx)(n.code,{children:"odd.js"}),"又去加载",(0,c.jsx)(n.code,{children:"even.js"}),"，形成“循环加载”。这时，执行引擎就会输出",(0,c.jsx)(n.code,{children:"even.js"}),"已经执行的部分（不存在任何结果），所以在",(0,c.jsx)(n.code,{children:"odd.js"}),"之中，变量",(0,c.jsx)(n.code,{children:"even"}),"等于",(0,c.jsx)(n.code,{children:"undefined"}),"，等到后面调用",(0,c.jsx)(n.code,{children:"even(n - 1)"}),"就会报错。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"$ node\n> var m = require('./even');\n> m.even(10)\nTypeError: even is not a function\n"})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(r,{...e})}):r(e)}let i=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F25.Module%20%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"浏览器加载",id:"浏览器加载",depth:2},{text:"传统方法",id:"传统方法",depth:3},{text:"加载规则",id:"加载规则",depth:3},{text:"ES6 模块与 CommonJS 模块的差异",id:"es6-模块与-commonjs-模块的差异",depth:2},{text:"Node.js 的模块加载方法",id:"nodejs-的模块加载方法",depth:2},{text:"概述",id:"概述",depth:3},{text:"package.json 的 main 字段",id:"packagejson-的-main-字段",depth:3},{text:"package.json 的 exports 字段",id:"packagejson-的-exports-字段",depth:3},{text:"CommonJS 模块加载 ES6 模块",id:"commonjs-模块加载-es6-模块",depth:3},{text:"ES6 模块加载 CommonJS 模块",id:"es6-模块加载-commonjs-模块",depth:3},{text:"同时支持两种格式的模块",id:"同时支持两种格式的模块",depth:3},{text:"Node.js 的内置模块",id:"nodejs-的内置模块",depth:3},{text:"加载路径",id:"加载路径",depth:3},{text:"内部变量",id:"内部变量",depth:3},{text:"循环加载",id:"循环加载",depth:2},{text:"CommonJS 模块的加载原理",id:"commonjs-模块的加载原理",depth:3},{text:"CommonJS 模块的循环加载",id:"commonjs-模块的循环加载",depth:3},{text:"ES6 模块的循环加载",id:"es6-模块的循环加载",depth:3}],title:"25.Module 的加载实现",headingTitle:"25.Module 的加载实现",frontmatter:{}}}}]);