"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["47109"],{981488:function(e,n,t){t.r(n),t.d(n,{default:()=>d});var r=t(552676),a=t(740453);let s=t.p+"static/image/7ac337c02aab3f86a31e7fa63f752763.4a88ffc0.gif",o=t.p+"static/image/8a4389aab93d776cab419d5670b4fbc1.7b62a8aa.gif";function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",pre:"pre",code:"code",img:"img",ol:"ol",li:"li"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"17数据获取篇-_-server-actions下",children:["17.数据获取篇 _ Server Actions（下）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#17数据获取篇-_-server-actions下",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"上篇我们讲了 Server Actions 的基本用法，本篇我们讲讲 Server Actions 的“标准”用法。比如哪些 API 和库是常搭配 Server Actions 使用的？写一个 Server Actions 要注意哪些地方？"}),"\n",(0,r.jsx)(n.p,{children:"我们还会介绍开发 Server Actions 时常遇到的一些问题，比如如何进行乐观更新？如何进行错误处理？如何获取 Cookies、Headers 等数据？如何重定向？等等"}),"\n",(0,r.jsx)(n.p,{children:"让我们开始吧。"}),"\n",(0,r.jsxs)(n.h2,{id:"form",children:["Form",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#form",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们先讲讲 Server Actions 处理表单提交时常搭配使用的一些 API。"}),"\n",(0,r.jsxs)(n.h3,{id:"1-useformstatus",children:["1. useFormStatus",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-useformstatus",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["首先是 ",(0,r.jsx)(n.a,{href:"https://react.dev/reference/react-dom/hooks/useFormStatus",target:"_blank",rel:"noopener noreferrer",children:"useFormStatus"}),"，这是 React 的官方 hook，用于返回表单提交的状态信息。示例代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/submit-button.jsx\nimport { useFormStatus } from 'react-dom'\n \nexport function SubmitButton() {\n  const { pending } = useFormStatus()\n \n  return (\n    <button type=\"submit\" aria-disabled={pending}>\n      {pending ? 'Adding' : 'Add'}\n    </button>\n  )\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// app/page.jsx\nimport { SubmitButton } from \'@/app/submit-button\'\n \nexport default async function Home() {\n  return (\n    <form action={...}>\n      <input type="text" name="field-name" />\n      <SubmitButton />\n    </form>\n  )\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["使用的时候要注意：useFormStatus 必须用在 ",(0,r.jsx)(n.code,{children:"<form>"})," 下的组件内部，就像这段示例代码一样。先建立一个按钮组件，在组件内部调用 useFormStatus，然后 ",(0,r.jsx)(n.code,{children:"<form>"})," 下引用该组件。不能完全写到一个组件中，像这样写就是错误的："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function Form() {\n  // \uD83D\uDEA9 `pending` will never be true\n  // useFormStatus does not track the form rendered in this component\n  const { pending } = useFormStatus();\n  return <form action={submit}></form>;\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-useformstate",children:["2. useFormState",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-useformstate",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["然后是 ",(0,r.jsx)(n.a,{href:"https://react.dev/reference/react-dom/hooks/useFormState",target:"_blank",rel:"noopener noreferrer",children:"useFormState"}),"，这也是 React 官方 hook，根据表单 action 的结果更新状态。"]}),"\n",(0,r.jsx)(n.p,{children:"用在 React 时示例代码如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { useFormState } from "react-dom";\n\nasync function increment(previousState, formData) {\n  return previousState + 1;\n}\n\nfunction StatefulForm({}) {\n  const [state, formAction] = useFormState(increment, 0);\n  return (\n    <form>\n      {state}\n      <button formAction={formAction}>Increment</button>\n    </form>\n  )\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"用在 Next.js，结合 Server Actions 时，示例代码如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use client'\n\nimport { useFormState } from 'react-dom'\n\nexport default function Home() {\n\n  async function createTodo(prevState, formData) {\n    return prevState.concat(formData.get('todo'));\n  }\n\n  const [state, formAction] = useFormState(createTodo, [])\n\n  return (\n    <form action={formAction}>\n      <input type=\"text\" name=\"todo\" />\n      <button type=\"submit\">Submit</button>\n      <p>{state.join(',')}</p>\n    </form>\n  ) \n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-实战体会",children:["3. 实战体会",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-实战体会",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现在让我们结合 useFormStatus 和 useFormState，讲解使用 Server Actions 如何处理 form 提交。涉及的目录和文件如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"app                 \n└─ form3           \n   ├─ actions.js   \n   ├─ form.js      \n   └─ page.js            \n"})}),"\n",(0,r.jsxs)(n.p,{children:["其中 ",(0,r.jsx)(n.code,{children:"app/form3/page.js"})," 代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { findToDos } from './actions';\nimport AddToDoForm from './form';\n\nexport default async function Page() {\n  const todos = await findToDos();\n  return (\n    <>\n      <AddToDoForm />\n      <ul>\n        {todos.map((todo, i) => <li key={i}>{todo}</li>)}\n      </ul>\n    </>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"app/form3/form.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use client'\n \nimport { useFormState, useFormStatus } from 'react-dom'\nimport { createToDo } from './actions';\n\nconst initialState = {\n  message: '',\n}\n \nfunction SubmitButton() {\n  const { pending } = useFormStatus()\n  return (\n    <button type=\"submit\" aria-disabled={pending}>\n      {pending ? 'Adding' : 'Add'}\n    </button>\n  )\n}\n\nexport default function AddToDoForm() {\n  const [state, formAction] = useFormState(createToDo, initialState)\n \n  return (\n    <form action={formAction}>\n      <input type=\"text\" name=\"todo\" />\n      <SubmitButton />\n      <p aria-live=\"polite\" className=\"sr-only\">\n        {state?.message}\n      </p>\n    </form>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"app/form3/actions.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use server'\n\nimport { revalidatePath } from \"next/cache\";\n\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\n\nlet data = ['阅读', '写作', '冥想']\n \nexport async function findToDos() {\n  return data\n}\n\nexport async function createToDo(prevState, formData) {\n  await sleep(500)\n  const todo = formData.get('todo')\n  data.push(todo)\n  revalidatePath(\"/form3\");\n  return {\n    message: `add ${todo} success!`\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"交互效果如下："}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:o,alt:"actions-6.gif"}),"\n注意：当使用 useFormState 的时候，对应 Server Action 函数的参数，第一个参数是 prevState，第二个参数是 formData。当使用 useFormStatus 的时候，要写在 form 下的单独的组件中。使用的时候，注意这两点就行。"]}),"\n",(0,r.jsx)(n.p,{children:"值得一提的是："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'<p aria-live="polite" className="sr-only">\n  {state?.message}\n</p>\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"aria-live"}),"表示这是一个 ARIA 标签，用于礼貌通知用户发生了变更。",(0,r.jsx)(n.code,{children:'"sr-only"'}),"表示这是一个只用于 screen reader 的内容。因为我们并没有设置 sr-only 的样式，所以在页面中显露了出来，按理说要加一个如下的样式："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:".sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"简单的来说，这段内容在屏幕上并不应该显示出来。返回这个信息是用于通知不能像正常人看到屏幕内容、需要借助屏幕阅读器工具的人，任务创建成功。"}),"\n",(0,r.jsxs)(n.h2,{id:"server-actions",children:["Server Actions",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#server-actions",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"接下来讲讲写 Server Actions 有哪些注意要点。简单来说，要注意："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"获取提交的数据"}),"\n",(0,r.jsx)(n.li,{children:"进行数据校验和错误处理"}),"\n",(0,r.jsx)(n.li,{children:"重新验证数据"}),"\n",(0,r.jsx)(n.li,{children:"错误处理"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"1-获取数据",children:["1. 获取数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-获取数据",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"如果使用 form action 这种最基本的形式，Server Action 函数第一个参数就是 formData："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default function Page() {\n  async function createInvoice(formData) {\n    'use server'\n \n    const rawFormData = {\n      customerId: formData.get('customerId')\n    }\n \n    // mutate data\n    // revalidate cache\n  }\n \n  return <form action={createInvoice}>...</form>\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果使用 form action + useFormState 这种形式，Server Actions 函数第一个参数是 prevState，第二个参数是 formData："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use client'\n\nimport { useFormState } from 'react-dom'\n\nexport default function Home() {\n\n  async function createTodo(prevState, formData) {\n    return prevState.concat(formData.get('todo'));\n  }\n\n  const [state, formAction] = useFormState(createTodo, [])\n\n  return (\n    <form action={formAction}>\n      <input type=\"text\" name=\"todo\" />\n      <button type=\"submit\">Submit</button>\n      <p>{state.join(',')}</p>\n    </form>\n  ) \n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果是直接调用，那看调用的时候是怎么传入的，比如上篇举的事件调用的例子："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use client'\n\nimport { createToDoDirectly } from './actions';\n\nexport default function Button({children}) {\n  return <button onClick={async () => {\n    const data = await createToDoDirectly('运动')\n    alert(JSON.stringify(data))\n  }}>{children}</button>\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use server'\n\nexport async function createToDoDirectly(value) {\n  const form = new FormData()\n  form.append(\"todo\", value);\n  return createToDo(form)\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-表单验证",children:["2. 表单验证",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-表单验证",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Next.js 推荐基本的表单验证使用 HTML 元素自带的验证如 ",(0,r.jsx)(n.code,{children:"required"}),"、",(0,r.jsx)(n.code,{children:'type="email"'}),"等。"]}),"\n",(0,r.jsxs)(n.p,{children:["对于更高阶的服务端数据验证，可以使用 ",(0,r.jsx)(n.a,{href:"https://zod.dev/",target:"_blank",rel:"noopener noreferrer",children:"zod"})," 这样的 schema 验证库来验证表单数据的结构："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use server'\n \nimport { z } from 'zod'\n \nconst schema = z.object({\n  email: z.string({\n    invalid_type_error: 'Invalid Email',\n  }),\n})\n \nexport default async function createsUser(formData) {\n  const validatedFields = schema.safeParse({\n    email: formData.get('email'),\n  })\n \n  // Return early if the form data is invalid\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n \n  // Mutate data\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-重新验证数据",children:["3. 重新验证数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-重新验证数据",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Server Action 修改数据后，一定要注意重新验证数据，否则数据不会及时更新。"}),"\n",(0,r.jsx)(n.p,{children:"使用 revalidatePath："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use server'\n \nimport { revalidatePath } from 'next/cache'\n \nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n \n  revalidatePath('/posts')\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"使用 revalidateTag："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use server'\n \nimport { revalidateTag } from 'next/cache'\n \nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n \n  revalidateTag('posts')\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"4-错误处理",children:["4. 错误处理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-错误处理",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"一种是返回错误信息。举个例子，当一个条目创建失败，返回错误信息："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use server'\n// app/actions.js\nexport async function createTodo(prevState, formData) {\n  try {\n    await createItem(formData.get('todo'))\n    return revalidatePath('/')\n  } catch (e) {\n    return { message: 'Failed to create' }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在客户端组件中，读取这个值并显示错误信息："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'\'use client\'\n// app/add-form.jsx\nimport { useFormState, useFormStatus } from \'react-dom\'\nimport { createTodo } from \'@/app/actions\'\n \nconst initialState = {\n  message: null,\n}\n \nfunction SubmitButton() {\n  const { pending } = useFormStatus()\n \n  return (\n    <button type="submit" aria-disabled={pending}>\n      Add\n    </button>\n  )\n}\n \nexport function AddForm() {\n  const [state, formAction] = useFormState(createTodo, initialState)\n \n  return (\n    <form action={formAction}>\n      <label htmlFor="todo">Enter Task</label>\n      <input type="text" id="todo" name="todo" required />\n      <SubmitButton />\n      <p aria-live="polite" className="sr-only">\n        {state?.message}\n      </p>\n    </form>\n  )\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"一种是抛出错误，会由最近的 error.js 捕获："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// error.js\nexport default function Error() {\n  return (\n    <h2>error</h2>\n  )\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// page.js\nimport { useFormState } from 'react-dom'\n\nfunction AddForm() {\n  async function serverActionWithError() {\n    'use server';   \n    throw new Error(`This is error is in the Server Action`);\n  }\n\n  return (\n    <form action={serverActionWithError}>\n      <button type=\"submit\">Submit</button>\n    </form>\n  ) \n}\n\nexport default AddForm\n"})}),"\n",(0,r.jsx)(n.p,{children:"这样当 Server Action 发生错误的时候，就会展示错误 UI。"}),"\n",(0,r.jsxs)(n.h2,{id:"乐观更新",children:["乐观更新",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#乐观更新",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-useoptimistic",children:["1. useOptimistic",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-useoptimistic",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"所谓乐观更新，举个例子，当用户点击一个点赞按钮的时候，传统的做法是等待接口返回成功时再更新 UI。乐观更新是先更新 UI，同时发送数据请求，至于数据请求后的错误处理，则根据自己的需要自定义实现。"}),"\n",(0,r.jsxs)(n.p,{children:["React 提供了 ",(0,r.jsx)(n.a,{href:"https://react.dev/reference/react/useOptimistic",target:"_blank",rel:"noopener noreferrer",children:"useOptimistic"})," hook，这也是官方 hook，基本用法如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { useOptimistic } from 'react';\n\nfunction AppContainer() {\n  const [optimisticState, addOptimistic] = useOptimistic(\n    state,\n    // updateFn\n    (currentState, optimisticValue) => {\n      // merge and return new state\n      // with optimistic value\n    }\n  );\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"结合 Server Actions 使用的示例代码如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use client'\n \nimport { useOptimistic } from 'react'\nimport { send } from './actions'\n \nexport function Thread({ messages }) {\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic(\n    messages,\n    (state, newMessage) => [...state, { message: newMessage }]\n  )\n \n  return (\n    <div>\n      {optimisticMessages.map((m) => (\n        <div>{m.message}</div>\n      ))}\n      <form\n        action={async (formData) => {\n          const message = formData.get('message')\n          addOptimisticMessage(message)\n          await send(message)\n        }}\n      >\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-实战体会",children:["2. 实战体会",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-实战体会",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"为了加深对乐观更新的理解，我们来写一个例子。项目目录和文件如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"app                 \n└─ form4           \n   ├─ actions.js   \n   ├─ form.js      \n   └─ page.js            \n"})}),"\n",(0,r.jsxs)(n.p,{children:["其中 ",(0,r.jsx)(n.code,{children:"app/form4/page.js"})," 代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { findToDos } from './actions';\nimport Form from './form';\n\nexport default async function Page() {\n  const todos = await findToDos();\n  return (\n    <Form todos={todos} />\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"app/form4/form.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'\'use client\'\n\nimport { useOptimistic } from \'react\'\nimport { useFormState } from \'react-dom\'\nimport { createToDo } from \'./actions\';\n\nexport default function Form({ todos }) {\n  const [state, sendFormAction] = useFormState(createToDo, { message: \'\' })\n\n  const [optimistiToDos, addOptimisticTodo] = useOptimistic(\n    todos.map((i) => ({text: i})),\n    (state, newTodo) => [\n      ...state,\n      {\n        text: newTodo,\n        sending: true\n      }\n    ]\n  );\n\n  async function formAction(formData) {\n    addOptimisticTodo(formData.get("todo"));\n    await sendFormAction(formData);\n  }\n\n  console.log(optimistiToDos)\n\n  return (\n    <>\n      <form action={formAction}>\n        <input type="text" name="todo" />\n        <button type="submit"> Add </button>\n        <p aria-live="polite" className="sr-only">\n          {state?.message}\n        </p>\n      </form>\n      <ul>\n        {optimistiToDos.map(({text, sending}, i) => <li key={i}>{text}{!!sending && <small> (Sending...)</small>}</li>)}\n      </ul>\n    </>\n  )\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"app/form4/actions.js"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use server'\n\nimport { revalidatePath } from \"next/cache\";\n\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\n\nlet data = ['阅读', '写作', '冥想']\n \nexport async function findToDos() {\n  return data\n}\n\nexport async function createToDo(prevState, formData) {\n  await sleep(2500)\n  const todo = formData.get('todo')\n  data.push(todo)\n  revalidatePath(\"/form4\");\n  return {\n    message: `add ${todo} success!`\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"交互效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:"actions-7.gif"})}),"\n",(0,r.jsx)(n.p,{children:"注：乐观更新是一种面向未来的 UI 更新方式。如何在接口错误的时候撤回数据？如果接口实在是太慢了，乐观更新的时候，用户要离开该怎么办？"}),"\n",(0,r.jsxs)(n.p,{children:["关于这些更细节的实现问题，欢迎参考 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/post/7347957960884355113",target:"_blank",rel:"noopener noreferrer",children:"《Next.js v14 实现乐观更新，面向未来的 UI 更新方式，你可以不去做，但你不应该不了解》"})]}),"\n",(0,r.jsxs)(n.h2,{id:"常见问题",children:["常见问题",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见问题",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-如何处理-cookies-",children:["1. 如何处理 Cookies ?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-如何处理-cookies-",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use server'\n \nimport { cookies } from 'next/headers'\n \nexport async function exampleAction() {\n  // Get cookie\n  const value = cookies().get('name')?.value\n \n  // Set cookie\n  cookies().set('name', 'Delba')\n \n  // Delete cookie\n  cookies().delete('name')\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-如何重定向",children:["2. 如何重定向？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-如何重定向",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"'use server'\n \nimport { redirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n \nexport async function createPost(id) {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n \n  revalidateTag('posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating",target:"_blank",rel:"noopener noreferrer",children:"Data Fetching: Fetching, Caching, and Revalidating"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/data-fetching/patterns",target:"_blank",rel:"noopener noreferrer",children:"Data Fetching: Data Fetching Patterns"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/data-fetching/forms-and-mutations",target:"_blank",rel:"noopener noreferrer",children:"Data Fetching: Forms and Mutations"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/functions/server-actions",target:"_blank",rel:"noopener noreferrer",children:"Functions: Server Actions"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://makerkit.dev/blog/tutorials/nextjs-server-actions",target:"_blank",rel:"noopener noreferrer",children:"https://makerkit.dev/blog/tutorials/nextjs-server-actions"})}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let d=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F17.%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E7%AF%87%20_%20Server%20Actions%EF%BC%88%E4%B8%8B%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"Form",id:"form",depth:2},{text:"1. useFormStatus",id:"1-useformstatus",depth:3},{text:"2. useFormState",id:"2-useformstate",depth:3},{text:"3. 实战体会",id:"3-实战体会",depth:3},{text:"Server Actions",id:"server-actions",depth:2},{text:"1. 获取数据",id:"1-获取数据",depth:3},{text:"2. 表单验证",id:"2-表单验证",depth:3},{text:"3. 重新验证数据",id:"3-重新验证数据",depth:3},{text:"4. 错误处理",id:"4-错误处理",depth:3},{text:"乐观更新",id:"乐观更新",depth:2},{text:"1. useOptimistic",id:"1-useoptimistic",depth:3},{text:"2. 实战体会",id:"2-实战体会",depth:3},{text:"常见问题",id:"常见问题",depth:2},{text:"1. 如何处理 Cookies ?",id:"1-如何处理-cookies-",depth:3},{text:"2. 如何重定向？",id:"2-如何重定向",depth:3},{text:"参考链接",id:"参考链接",depth:2}],title:"17.数据获取篇 _ Server Actions（下）",headingTitle:"17.数据获取篇 _ Server Actions（下）",frontmatter:{}}}}]);