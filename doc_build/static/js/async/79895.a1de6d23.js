"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79895"],{749627:function(e,c,n){n.r(c),n.d(c,{default:()=>a});var s=n(552676),d=n(740453);let r=n.p+"static/image/1951004899e218eb306b2ff4ff7286fc.8e687bb6.webp",t=n.p+"static/image/32916cd4975931764157385face80368.cc200e1b.webp",i=n.p+"static/image/d1920799ea000326f6feb5018763243f.0fea92e0.webp";function l(e){let c=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",h3:"h3",ol:"ol",li:"li",strong:"strong",img:"img",blockquote:"blockquote"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(c.h1,{id:"7响应式原理副作用函数探秘",children:["7.响应式原理：副作用函数探秘",(0,s.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#7响应式原理副作用函数探秘",children:"#"})]}),"\n",(0,s.jsxs)(c.h2,{id:"前言",children:["前言",(0,s.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsxs)(c.p,{children:["上一小节我们说到了 ",(0,s.jsx)(c.code,{children:"Reactive"})," 会在 ",(0,s.jsx)(c.code,{children:"proxy getter"})," 的时候收集 ",(0,s.jsx)(c.code,{children:"effect"})," 依赖，在 ",(0,s.jsx)(c.code,{children:"proxy setter"})," 的时候触发 ",(0,s.jsx)(c.code,{children:"effect"})," 的执行。那么 ",(0,s.jsx)(c.code,{children:"effect"})," 副作用函数到底是个什么？以及是如何被收集起来的呢？"]}),"\n",(0,s.jsxs)(c.h2,{id:"effect",children:["effect",(0,s.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#effect",children:"#"})]}),"\n",(0,s.jsxs)(c.p,{children:["找到源码中关于 ",(0,s.jsx)(c.code,{children:"effect"})," 部分的定义："]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"export function effect (fn, options) {\n  // 如果 fn 已经是一个 effect 函数了，则指向原始函数\n  if (fn.effect) {\n    fn = fn.effect.fn\n  }\n  // 构造 _effect 实例\n  const _effect = new ReactiveEffect(fn)\n  \n  // options 初始化\n  if (options) {\n    extend(_effect, options)\n    if (options.scope) recordEffectScope(_effect, options.scope)\n  }\n  \n  // 如有 options 或者 不是懒加载，执行 _effect.run()\n  if (!options || !options.lazy) {\n    _effect.run()\n  }\n  \n  // 返回 _effect.run\n  const runner = _effect.run.bind(_effect)\n  runner.effect = _effect\n  return runner\n}\n"})}),"\n",(0,s.jsxs)(c.p,{children:["这个 ",(0,s.jsx)(c.code,{children:"effect"})," 函数内部核心是通过 ",(0,s.jsx)(c.code,{children:"ReactiveEffect"})," 类创建了一个 ",(0,s.jsx)(c.code,{children:"_effect"})," 实例，从代码来看，",(0,s.jsx)(c.code,{children:"_effect"})," 上包含了一个 ",(0,s.jsx)(c.code,{children:"run"})," 函数。默认 ",(0,s.jsx)(c.code,{children:"effect"})," 是没有传入 ",(0,s.jsx)(c.code,{children:"options"})," 参数的，所以这里直接执行了 ",(0,s.jsx)(c.code,{children:"_effect.run()"}),"。我们知道，",(0,s.jsx)(c.code,{children:"fn"})," 函数是在 ",(0,s.jsx)(c.code,{children:"effect"})," 函数中的一个入参，比如："]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"const state = reactive({a: 1})\n\neffect(() => console.log(state.a))\n"})}),"\n",(0,s.jsxs)(c.p,{children:["根据上一小节，我们知道因为这里我们访问了 ",(0,s.jsx)(c.code,{children:"state.a"})," 所以收集了副作用函数，但是需要知道的是这里的 ",(0,s.jsx)(c.code,{children:"effect"})," 传入的是一个 ",(0,s.jsx)(c.code,{children:"fn"}),"，所以要想访问 ",(0,s.jsx)(c.code,{children:"state.a"})," 那这个 ",(0,s.jsx)(c.code,{children:"fn"})," 必须要执行才可以。那是在哪里执行的呢？接下来看一下 ",(0,s.jsx)(c.code,{children:"ReactiveEffect"})," 的实现："]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"// 用于记录位于响应上下文中的effect嵌套层次数\nlet effectTrackDepth = 0\n// 二进制位，每一位用于标识当前effect嵌套层级的依赖收集的启用状态\nexport left trackOpBit = 1\n// 表示最大标记的位数\nconst maxMarkerBits = 30\n\n// 当前活跃的 effect\nlet activeEffect;\n\nexport class ReactiveEffect {\n  // 用于标识副作用函数是否位于响应式上下文中被执行\n  active = true\n  // 副作用函数持有它所在的所有依赖集合的引用，用于从这些依赖集合删除自身\n  deps = []\n  // 指针为，用于嵌套 effect 执行后动态切换 activeEffect\n  parent = undefined\n  // ...\n  run() {\n    // 若当前 ReactiveEffect 对象脱离响应式上下文\n    // 那么其对应的副作用函数被执行时不会再收集依赖\n    if (!this.active) {\n      return this.fn()\n    }\n    \n    // 缓存是否需要收集依赖\n    let lastShouldTrack = shouldTrack\n    \n    try {\n      // 保存上一个 activeEffect 到当前的 parent 上\n      this.parent = activeEffect\n      // activeEffect 指向当前的 effect\n      activeEffect = this\n      // shouldTrack 置成 true\n      shouldTrack = true\n      // 左移操作符 <<\xa0将第一个操作数向左移动指定位数\n      // 左边超出的位数将会被清除，右边将会补零。\n      // trackOpBit 是基于 1 左移 effectTrackDepth 位\n      trackOpBit = 1 << ++effectTrackDepth\n      \n      // 如果未超过最大嵌套层数，则执行 initDepMarkers\n      if (effectTrackDepth <= maxMarkerBits) {\n        initDepMarkers(this)\n      } else {\n        cleanupEffect(this)\n      }\n      // 这里执行了 fn\n      return this.fn()\n    } finally {\n      if (effectTrackDepth <= maxMarkerBits) {\n        // 用于对曾经跟踪过，但本次副作用函数执行时没有跟踪的依赖采取删除操作。\n        // 新跟踪的 和 本轮跟踪过的都会被保留\n        finalizeDepMarkers(this)\n      }\n      \n      // << --effectTrackDepth 右移动 effectTrackDepth 位\n      trackOpBit = 1 << --effectTrackDepth\n      \n      // 返回上个 activeEffect\n      activeEffect = this.parent\n      // 返回上个 shouldTrack\n      shouldTrack = lastShouldTrack\n      // 情况本次的 parent 指向\n      this.parent = undefined\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(c.p,{children:["大致看一眼，我们可以看到在 ",(0,s.jsx)(c.code,{children:"ReactiveEffect"})," 中是执行了 ",(0,s.jsx)(c.code,{children:"this.fn()"})," 的，这也就解释了 ",(0,s.jsx)(c.code,{children:"effect"})," 中的回调函数 ",(0,s.jsx)(c.code,{children:"fn"})," 是在这里被调用的。接下来详细研究一下这个 ",(0,s.jsx)(c.code,{children:"ReactiveEffect"}),"。"]}),"\n",(0,s.jsx)(c.p,{children:"但这段代码看起来不是很长，但涉及了好几个概念，我们来一个个看。"}),"\n",(0,s.jsxs)(c.h3,{id:"1-parent-的作用",children:["1. parent 的作用",(0,s.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#1-parent-的作用",children:"#"})]}),"\n",(0,s.jsxs)(c.p,{children:["为什么 ",(0,s.jsx)(c.code,{children:"ReactiveEffect"})," 要设计一个 ",(0,s.jsx)(c.code,{children:"parent"})," 这样一个看似没啥用的变量指针来存储上一次的 ",(0,s.jsx)(c.code,{children:"activeEffect"})," 呢？如果改成下面这样不是更简单吗？"]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"run() {\n  if (!this.active) {\n    return this.fn();\n  }\n  // 初始化\n  shouldTrack = true;\n  activeEffect = this;\n\n  const result = this.fn();\n  \n  // 重置\n  shouldTrack = false;\n  \n  return result;\n}\n"})}),"\n",(0,s.jsx)(c.p,{children:"其实对于下面这样的代码："}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"const state = reactive({a: 1})\n\neffect(() => console.log(state.a))\n\nstate.a++\n"})}),"\n",(0,s.jsxs)(c.p,{children:[(0,s.jsx)(c.code,{children:"effect"})," 函数内调用 ",(0,s.jsx)(c.code,{children:"ReactiveEffect"})," 实例的 ",(0,s.jsx)(c.code,{children:"run"})," 函数。",(0,s.jsx)(c.code,{children:"run"})," 函数执行的时候，把 ",(0,s.jsx)(c.code,{children:"activeEffect"})," 指向 ",(0,s.jsx)(c.code,{children:"this"}),"。然后执行 ",(0,s.jsx)(c.code,{children:"effect"})," 传入的 ",(0,s.jsx)(c.code,{children:"fn"})," 函数，函数在执行的时候访问了 ",(0,s.jsx)(c.code,{children:"state.a"})," 触发了 ",(0,s.jsx)(c.code,{children:"getter"})," 钩子。回顾一下上一节的内容，",(0,s.jsx)(c.code,{children:"getter"})," 的时候有触发添加 ",(0,s.jsx)(c.code,{children:"activeEffect"})," 的功能："]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{children:"// 把 activeEffect 添加到 dep 中\ndep.add(activeEffect!)\n"})}),"\n",(0,s.jsxs)(c.p,{children:["而 ",(0,s.jsx)(c.code,{children:"activeEffect"})," 正是这里的 ",(0,s.jsx)(c.code,{children:"this"}),"。当执行 ",(0,s.jsx)(c.code,{children:"state.a++"})," 时，访问了",(0,s.jsx)(c.code,{children:"state.a"})," 的 ",(0,s.jsx)(c.code,{children:"setter"}),"。上一节也说了，",(0,s.jsx)(c.code,{children:"setter"})," 的执行会调用 ",(0,s.jsx)(c.code,{children:"effect.run"})," 函数："]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"// triggerEffects\neffect.run();\n"})}),"\n",(0,s.jsxs)(c.p,{children:["所以又会执行 ",(0,s.jsx)(c.code,{children:"fn"}),"。"]}),"\n",(0,s.jsx)(c.p,{children:"到这里看似很完美，那么我们再来看另外一个例子\uD83C\uDF30："}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"const state = reactive({\n  a: 1,\n  b: 2\n});\n\n// ef1\neffect(() => {\n  // ef2\n  effect(() => console.log(`b: ${state.b}`))\n  console.log(`a: ${state.a}`)\n});\n\nstate.a ++\n"})}),"\n",(0,s.jsxs)(c.p,{children:["按照上面的逻辑，在第一次 ",(0,s.jsx)(c.code,{children:"effect"})," 执行的时候，",(0,s.jsx)(c.code,{children:"activeEffect = ef1"})," 然后再执行内部的 ",(0,s.jsx)(c.code,{children:"effect"}),"， 此时 ",(0,s.jsx)(c.code,{children:"activeEffect = ef2"})," 然后 ",(0,s.jsx)(c.code,{children:"ef2"})," 执行完成回到 ",(0,s.jsx)(c.code,{children:"ef1"})," 函数体内，此时再访问 ",(0,s.jsx)(c.code,{children:"state.a"})," 触发对 ",(0,s.jsx)(c.code,{children:"a"})," 的依赖收集，但收集到的却是 ",(0,s.jsx)(c.code,{children:"ef2"}),"。那么最终打印的是："]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"b: 2\na: 1\nb: 2\n"})}),"\n",(0,s.jsx)(c.p,{children:"很明显不符合我们的要求，我们期望的是输出："}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"b: 2\na: 1\nb: 2\na: 2\n"})}),"\n",(0,s.jsxs)(c.p,{children:["这时候 ",(0,s.jsx)(c.code,{children:"parent"})," 就排上用场了，当为 ",(0,s.jsx)(c.code,{children:"effect"})," 加上 ",(0,s.jsx)(c.code,{children:"parent"})," 属性后，我们再来捋一下整体的流程。"]}),"\n",(0,s.jsxs)(c.ol,{children:["\n",(0,s.jsxs)(c.li,{children:["执行 ",(0,s.jsx)(c.code,{children:"ef1"})," 的时候，",(0,s.jsx)(c.code,{children:"activeEffect"})," 指向 ",(0,s.jsx)(c.code,{children:"ef1"}),"，此时 ",(0,s.jsx)(c.code,{children:"parent"})," 是 ",(0,s.jsx)(c.code,{children:"undefined"}),"。"]}),"\n",(0,s.jsxs)(c.li,{children:["执行 ",(0,s.jsx)(c.code,{children:"ef1 fn"})," 遇到了 ",(0,s.jsx)(c.code,{children:"ef2"}),"，调用 ",(0,s.jsx)(c.code,{children:"ef2"})," 此时 ",(0,s.jsx)(c.code,{children:"ef2"})," 的 ",(0,s.jsx)(c.code,{children:"parent"})," 指向 ",(0,s.jsx)(c.code,{children:"ef1"}),"， ",(0,s.jsx)(c.code,{children:"activeEffect"})," 指向 ",(0,s.jsx)(c.code,{children:"ef2"}),"。然后执行 ",(0,s.jsx)(c.code,{children:"ef2 的 fn"}),"。"]}),"\n",(0,s.jsxs)(c.li,{children:[(0,s.jsx)(c.code,{children:"ef2 的 fn"})," 执行的时候，访问了 ",(0,s.jsx)(c.code,{children:"state.b"})," 依赖收集 ",(0,s.jsx)(c.code,{children:"ef2"}),"。执行完成后，",(0,s.jsx)(c.code,{children:"activeEffect = this.parent"})," 又把 ",(0,s.jsx)(c.code,{children:"activeEffect"})," 指向了 ",(0,s.jsx)(c.code,{children:"ef1"}),"。"]}),"\n",(0,s.jsxs)(c.li,{children:["返回 ",(0,s.jsx)(c.code,{children:"ef1"})," 的 ",(0,s.jsx)(c.code,{children:"fn"})," 体继续执行，此时访问 ",(0,s.jsx)(c.code,{children:"state.a"})," 依赖收集 ",(0,s.jsx)(c.code,{children:"activeEffect"})," 为 ",(0,s.jsx)(c.code,{children:"ef1"}),"。"]}),"\n",(0,s.jsxs)(c.li,{children:["触发 ",(0,s.jsx)(c.code,{children:"state.a"})," 的 ",(0,s.jsx)(c.code,{children:"setter"}),"，调用 ",(0,s.jsx)(c.code,{children:"a"})," 的副作用 ",(0,s.jsx)(c.code,{children:"ef1"}),"，依次打印……"]}),"\n"]}),"\n",(0,s.jsxs)(c.p,{children:["到这里相信各位小伙伴已经清楚了 ",(0,s.jsx)(c.code,{children:"parent"})," 的作用了，那就是",(0,s.jsxs)(c.strong,{children:["通过 ",(0,s.jsx)(c.code,{children:"parent"})," 这个标记，来回切换 ",(0,s.jsx)(c.code,{children:"activeEffect"})," 的指向，从而完成对嵌套 ",(0,s.jsx)(c.code,{children:"effect"})," 的正确的依赖收集"]}),"。"]}),"\n",(0,s.jsxs)(c.h3,{id:"2-依赖清理",children:["2. 依赖清理",(0,s.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#2-依赖清理",children:"#"})]}),"\n",(0,s.jsx)(c.p,{children:"在说依赖清理之前，再来看一个有意思的例子："}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"const state = reactive({\n  a: 1,\n  show: true\n});\n\neffect(() => {\n  if (state.show) {\n    console.log(`a: ${state.a}`)\n  }\n});\n\nstate.a ++\n\nsetTimeout(() => {\n  state.show = false\n  state.a ++\n}, 1000)\n"})}),"\n",(0,s.jsxs)(c.p,{children:["上面的例子中，我们在 ",(0,s.jsx)(c.code,{children:"effect"})," 中完成了对 ",(0,s.jsx)(c.code,{children:"show"})," 和 ",(0,s.jsx)(c.code,{children:"a"})," 的依赖收集，然后 ",(0,s.jsx)(c.code,{children:"1s"})," 后，我们改变了 ",(0,s.jsx)(c.code,{children:"show"})," 的状态为 ",(0,s.jsx)(c.code,{children:"false"}),"。此时 ",(0,s.jsx)(c.code,{children:"effect"})," 内的函数中的 ",(0,s.jsx)(c.code,{children:"console.log"})," 将永远不会执行，然后再触发 ",(0,s.jsx)(c.code,{children:"state.a++"})," 的动作，访问 ",(0,s.jsx)(c.code,{children:"a"})," 的 ",(0,s.jsx)(c.code,{children:"getter"}),"，如果没有依赖清理，那么按照之前的做法，测试也会触发 ",(0,s.jsx)(c.code,{children:"effect.fn"})," 的执行，但这个执行其实没意义的，因为 ",(0,s.jsx)(c.code,{children:"a"})," 已经没有被使用了，是一个永远不会被访问到的变量，造成了性能浪费。所以我们需要删除 ",(0,s.jsx)(c.code,{children:"a"})," 的副作用函数，让它不要执行。"]}),"\n",(0,s.jsxs)(c.p,{children:["接下来一起来看看 ",(0,s.jsx)(c.code,{children:"Vue"})," 是怎么做的吧！这里涉及到的内容有点多，我们先一个个解释，首先补习一下关于 ",(0,s.jsx)(c.code,{children:"js"})," 的一些操作符的基础知识。"]}),"\n",(0,s.jsx)(c.p,{children:(0,s.jsx)(c.strong,{children:"1.  左移（<<）"})}),"\n",(0,s.jsxs)(c.p,{children:["左移操作符 (",(0,s.jsx)(c.code,{children:"<<"}),")\xa0将第一个操作数转换成 2 进制后向左移动指定位数，左边超出的位数将会被清除，右边将会补零。"]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"const a = 1;         // 00000000000000000000000000000001\nconst b = 1;       \n\nconsole.log(a << b); // 00000000000000000000000000000010\n// expected output: 2\n"})}),"\n",(0,s.jsx)(c.p,{children:(0,s.jsx)(c.strong,{children:"2. 位或操作（|）"})}),"\n",(0,s.jsx)(c.p,{children:"位或操作符（|）， 如果两位之一为 1，则设置每位为 1。"}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"const a = 5;        // 00000000000000000000000000000101\nconst b = 3;        // 00000000000000000000000000000011\n\nconsole.log(a | b); // 00000000000000000000000000000111\n// expected output: 7\n"})}),"\n",(0,s.jsx)(c.p,{children:(0,s.jsx)(c.strong,{children:"3. 按位与（&）"})}),"\n",(0,s.jsxs)(c.p,{children:["按位与运算符 (",(0,s.jsx)(c.code,{children:"&"}),") 在两个操作数对应的二进位都为\xa0",(0,s.jsx)(c.code,{children:"1"}),"\xa0时，该位的结果值才为\xa0",(0,s.jsx)(c.code,{children:"1"}),"，否则为\xa0",(0,s.jsx)(c.code,{children:"0"}),"。"]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"const a = 5;        // 00000000000000000000000000000101\nconst b = 3;        // 00000000000000000000000000000011\n\nconsole.log(a & b); // 00000000000000000000000000000001\n// expected output: 1\n"})}),"\n",(0,s.jsx)(c.p,{children:(0,s.jsx)(c.strong,{children:"4. 按位非（~）"})}),"\n",(0,s.jsx)(c.p,{children:"按位非运算符（~），反转操作数的位。"}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"const a = 5;     // 00000000000000000000000000000101\nconst b = -3;    // 11111111111111111111111111111101\n\nconsole.log(~a); // 11111111111111111111111111111010\n// expected output: -6\n\nconsole.log(~b); // 00000000000000000000000000000010\n// expected output: 2\n"})}),"\n",(0,s.jsx)(c.p,{children:"有了这些基础的知识点后，再来认识几个变量。"}),"\n",(0,s.jsx)(c.p,{children:(0,s.jsx)(c.strong,{children:"1. effectTrackDepth"})}),"\n",(0,s.jsxs)(c.p,{children:["用于记录位于响应上下文中的 ",(0,s.jsx)(c.code,{children:"effect"})," 嵌套层次数，默认值为 ",(0,s.jsx)(c.code,{children:"0"}),"。"]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"// effectTrackDepth = 0\neffect(() => {\n  // effectTrackDepth = 1\n  effect(() => {})\n})\n"})}),"\n",(0,s.jsx)(c.p,{children:(0,s.jsx)(c.strong,{children:"2. trackOpBit"})}),"\n",(0,s.jsxs)(c.p,{children:["二进制位，每一位用于标识当前 ",(0,s.jsx)(c.code,{children:"effect"})," 嵌套层级的依赖收集的启用状态。默认值为 ",(0,s.jsx)(c.code,{children:"1"}),"，即 ",(0,s.jsx)(c.code,{children:"00000000000000000000000000000001"}),"。"]}),"\n",(0,s.jsx)(c.p,{children:(0,s.jsx)(c.strong,{children:"3. maxMarkerBits"})}),"\n",(0,s.jsxs)(c.p,{children:["表示最大的 ",(0,s.jsx)(c.code,{children:"effect"})," 嵌套的层次数，最大值为 ",(0,s.jsx)(c.code,{children:"30"}),"。"]}),"\n",(0,s.jsxs)(c.p,{children:["好了，搞懂了这些操作符之后，我们来看看 ",(0,s.jsx)(c.code,{children:"Vue"})," 的依赖清理是如何实现的，先来看不超过 ",(0,s.jsx)(c.code,{children:"maxMarkerBits"})," 层级数的嵌套 ",(0,s.jsx)(c.code,{children:"effect"})," 的依赖收集的过程，还以上面那个 ",(0,s.jsx)(c.code,{children:"demo"})," 作为示例："]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"const state = reactive({\n  a: 1,\n  show: true\n});\n\neffect(() => {\n  if (state.show) {\n    console.log(`a: ${state.a}`)\n  }\n});\n\nstate.a ++\n\nsetTimeout(() => {\n  state.show = false\n  state.a ++\n}, 1000)\n"})}),"\n",(0,s.jsxs)(c.p,{children:[(0,s.jsx)(c.strong,{children:"Step 1"}),"：",(0,s.jsx)(c.code,{children:"run"})," 函数执行的时候，",(0,s.jsx)(c.code,{children:"trackOpBit = 1 << ++effectTrackDepth"})," 这个语句执行完成后，得到 ",(0,s.jsx)(c.code,{children:"effectTrackDepth = 1"}),"；",(0,s.jsx)(c.code,{children:"trackOpBit.toString(2) = 00000000000000000000000000000010"}),"。"]}),"\n",(0,s.jsxs)(c.p,{children:[(0,s.jsx)(c.strong,{children:"Step 2"}),"：因为 ",(0,s.jsx)(c.code,{children:"effectTrackDepth < maxMarkerBits"})," ，所以执行 ",(0,s.jsx)(c.code,{children:"initDepMarkers"})," 函数，因为这里的 ",(0,s.jsx)(c.code,{children:"deps"})," 在初始化的时候还是个空数组，所以此函数未执行。"]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"export const initDepMarkers = ({ deps }) => {\n  if (deps.length) {\n    for (let i = 0; i < deps.length; i++) {\n      deps[i].w |= trackOpBit // set was tracked\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(c.p,{children:[(0,s.jsx)(c.strong,{children:"Step 3"}),"：执行 ",(0,s.jsx)(c.code,{children:"this.fn"})," 函数，先访问 ",(0,s.jsx)(c.code,{children:"state.show"}),"，触发了 ",(0,s.jsx)(c.code,{children:"trackEffects"}),"。"]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"export function trackEffects(dep) {\n  let shouldTrack = false\n  if (effectTrackDepth <= maxMarkerBits) {\n    // 如果本轮副作用函数执行过程中已经访问并收集过，则不用再收集该依赖\n    if (!newTracked(dep)) {\n      // 设置 dep.n\n      dep.n |= trackOpBit\n      shouldTrack = !wasTracked(dep)\n    }\n  } else {\n    // Full cleanup mode.\n    shouldTrack = !dep.has(activeEffect!)\n  }\n\n  if (shouldTrack) {\n    dep.add(activeEffect!)\n    activeEffect!.deps.push(dep)\n  }\n}\n"})}),"\n",(0,s.jsxs)(c.p,{children:["这里需要额外了解 2 个函数：",(0,s.jsx)(c.code,{children:"wasTracked"}),"（已经被收集过，缩写是 ",(0,s.jsx)(c.code,{children:"w"}),"） 和 ",(0,s.jsx)(c.code,{children:"newTracked"}),"（新收集的依赖，缩写是 ",(0,s.jsx)(c.code,{children:"n"}),"）。"]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"export const wasTracked = dep => (dep.w & trackOpBit) > 0\n\nexport const newTracked = dep => (dep.n & trackOpBit) > 0\n"})}),"\n",(0,s.jsxs)(c.p,{children:["进入 ",(0,s.jsx)(c.code,{children:"trackEffects"})," 时，因为此时还没有为 ",(0,s.jsx)(c.code,{children:"dep.n"})," 进行或运算赋值，所以 ",(0,s.jsx)(c.code,{children:"state.show"})," 的 ",(0,s.jsx)(c.code,{children:"newTracked = false"}),"，",(0,s.jsx)(c.code,{children:"wasTracked = false"}),"。"]}),"\n",(0,s.jsxs)(c.p,{children:["所以计算得到 ",(0,s.jsx)(c.code,{children:"shouldTrack = true"}),"，最后将 ",(0,s.jsx)(c.code,{children:"activeEffect"})," 收集进入 ",(0,s.jsx)(c.code,{children:"dep"})," 中，同时执行了 ",(0,s.jsx)(c.code,{children:"activeEffect.deps.push(dep)"})," 将 ",(0,s.jsx)(c.code,{children:"dep"})," 存入了 ",(0,s.jsx)(c.code,{children:"activeEffect"})," 的 ",(0,s.jsx)(c.code,{children:"deps"})," 中。然后访问 ",(0,s.jsx)(c.code,{children:"state.a"})," 重复上述操作。上述步骤执行完成后的 ",(0,s.jsx)(c.code,{children:"activeEffect.deps"})," 如下："]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:'[\n  {"w":0,"n": 00000000000000000000000000000010, [effect]},\n  {"w":0,"n": 00000000000000000000000000000010, [effect]}\n]\n'})}),"\n",(0,s.jsxs)(c.p,{children:[(0,s.jsx)(c.strong,{children:"Step 4"}),"：最后执行 ",(0,s.jsx)(c.code,{children:"finalizeDepMarkers"})," 函数，根据第 3 步，此时 ",(0,s.jsx)(c.code,{children:"effect"})," 中的 ",(0,s.jsx)(c.code,{children:"deps"})," 包含了 2 个 ",(0,s.jsx)(c.code,{children:"dep"}),"，分别是 ",(0,s.jsx)(c.code,{children:"state.show"})," 和 ",(0,s.jsx)(c.code,{children:"state.a"}),"。 ",(0,s.jsx)(c.code,{children:"finalizeDepMarkers"})," 函数内部执行了 ",(0,s.jsx)(c.code,{children:"wasTracked"}),"（已经被收集过，缩写是 ",(0,s.jsx)(c.code,{children:"w"}),"） 和 ",(0,s.jsx)(c.code,{children:"newTracked"}),"（新收集的依赖，缩写是 ",(0,s.jsx)(c.code,{children:"n"}),"） 函数，因为 ",(0,s.jsx)(c.code,{children:"dep.w = 0"})," 所以 ",(0,s.jsx)(c.code,{children:"wasTracked = false"}),"。"]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"export const finalizeDepMarkers = (effect: ReactiveEffect) => {\n  const { deps } = effect\n  if (deps.length) {\n    let ptr = 0\n    for (let i = 0; i < deps.length; i++) {\n      const dep = deps[i]\n      if (wasTracked(dep) && !newTracked(dep)) {\n        dep.delete(effect)\n      } else {\n        // 缩小依赖集合的大小\n        deps[ptr++] = dep\n      }\n      // clear bits\n      dep.w &= ~trackOpBit\n      dep.n &= ~trackOpBit\n    }\n    deps.length = ptr\n  }\n}\n"})}),"\n",(0,s.jsxs)(c.p,{children:["因为 ",(0,s.jsx)(c.code,{children:"wasTracked = false"}),"，因此 ",(0,s.jsx)(c.code,{children:"finalizeDepMarkers"})," 处理后仍然将副作用函数保留在这两个属性对应的依赖集合中，同时把 ",(0,s.jsx)(c.code,{children:"dep.w"})," 和 ",(0,s.jsx)(c.code,{children:"dep.n"})," 重置回 0。"]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:'[{"w":0, "n":0, [effect]},{"w":0, "n":0, [effect]}]\n'})}),"\n",(0,s.jsxs)(c.p,{children:[(0,s.jsx)(c.strong,{children:"Step 5"}),"：当执行 ",(0,s.jsx)(c.code,{children:"state.show = false"})," 的时候，触发 ",(0,s.jsx)(c.code,{children:"effect.run"})," 的执行，此时执行 ",(0,s.jsx)(c.code,{children:"initDepMarkers"})," 时，因为已经存在了 ",(0,s.jsx)(c.code,{children:"dep"}),"，所以先访问 ",(0,s.jsx)(c.code,{children:"state.show"}),"。"]}),"\n",(0,s.jsxs)(c.p,{children:["当执行到 ",(0,s.jsx)(c.code,{children:"trackEffects"})," 时，此时的 ",(0,s.jsx)(c.code,{children:"newTracked = false"}),"，执行逻辑和之前一致。只不过因为 ",(0,s.jsx)(c.code,{children:"state.show = false"}),"，所以没有触发 ",(0,s.jsx)(c.code,{children:"state.a"})," 的这一部分逻辑的处理，最后得到的结果为："]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:'[\n  {\n    "w": 00000000000000000000000000000010,\n    "n": 00000000000000000000000000000010,\n    [effect]\n  },\n  {\n    "w": 00000000000000000000000000000010, \n    "n": 0,\n    [effect]\n  }\n]\n'})}),"\n",(0,s.jsxs)(c.p,{children:[(0,s.jsx)(c.strong,{children:"Step 6"}),"：最后执行 ",(0,s.jsx)(c.code,{children:"finalizeDepMarkers"})," 时，如下。"]}),"\n",(0,s.jsx)(c.pre,{children:(0,s.jsx)(c.code,{className:"language-js",children:"if (wasTracked(dep) && !newTracked(dep)) {\n  dep.delete(effect)\n}\n"})}),"\n",(0,s.jsxs)(c.p,{children:["因为这里的 ",(0,s.jsx)(c.code,{children:"state.a"})," 的 ",(0,s.jsx)(c.code,{children:"wasTracked = true"})," 且 ",(0,s.jsx)(c.code,{children:"newTracked"})," 为 ",(0,s.jsx)(c.code,{children:"false"}),"，所以执行了 ",(0,s.jsx)(c.code,{children:"dep.delete(effect)"})," 将 ",(0,s.jsx)(c.code,{children:"effect"})," 从 ",(0,s.jsx)(c.code,{children:"dep"})," 中踢掉。"]}),"\n",(0,s.jsxs)(c.p,{children:[(0,s.jsx)(c.strong,{children:"Step 7"}),"：",(0,s.jsx)(c.code,{children:"1s"})," 后执行 ",(0,s.jsx)(c.code,{children:"state.a++"})," 的操作，由于 ",(0,s.jsx)(c.code,{children:"state.a"})," 中没有 ",(0,s.jsx)(c.code,{children:"effect"})," 了，所以不会执行副作用函数。"]}),"\n",(0,s.jsxs)(c.p,{children:[(0,s.jsx)(c.strong,{children:"总结"}),"： ",(0,s.jsx)(c.code,{children:"Vue"})," 在组件的 ",(0,s.jsx)(c.code,{children:"effect"})," 执行之前，会根据 ",(0,s.jsx)(c.code,{children:"dep"})," 的收集标记位 ",(0,s.jsx)(c.code,{children:"w"})," 和 ",(0,s.jsx)(c.code,{children:"n"})," 来进行清理依赖，删除之前 ",(0,s.jsx)(c.code,{children:"state.a"})," 收集的 ",(0,s.jsx)(c.code,{children:"effect"})," 依赖。这样当我们修改 ",(0,s.jsx)(c.code,{children:"state.a"})," 时，由于已经没有依赖了，就不会触发 ",(0,s.jsx)(c.code,{children:"effect"})," 重新执行。"]}),"\n",(0,s.jsx)(c.p,{children:"另外，为了更容易帮助小伙伴们理解上述的流程，我也精心制作了一个动画演示上述流程和过程："}),"\n",(0,s.jsx)(c.p,{children:(0,s.jsx)("img",{src:i,alt:"依赖清理过程.gif"})}),"\n",(0,s.jsxs)(c.blockquote,{children:["\n",(0,s.jsxs)(c.p,{children:["注意，当 ",(0,s.jsx)(c.code,{children:"effectTrackDepth"})," 大于 ",(0,s.jsx)(c.code,{children:"30"})," 时，会调用 ",(0,s.jsx)(c.code,{children:"cleanup"})," 来清理依赖，其实 ",(0,s.jsx)(c.code,{children:"cleanup"})," 的原理就是依赖收集前全部删除所有的 ",(0,s.jsx)(c.code,{children:"dep"}),"，依赖收集时再一个个加进来，这个性能其实是比较差的，所以 ",(0,s.jsx)(c.code,{children:"Vue 3.2"})," 改成了通过二进制标记位的方式来选择性删除和添加，提升了性能。关于这部分更多的细节，可以参考",(0,s.jsx)(c.a,{href:"https://github.com/vuejs/core/pull/4017",target:"_blank",rel:"noopener noreferrer",children:"这个PR"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(c.h2,{id:"总结",children:["总结",(0,s.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(c.p,{children:["到这里，我们基本上讲完了 ",(0,s.jsx)(c.code,{children:"Vue 3"})," 的响应式原理基础，如果有小伙伴了解 ",(0,s.jsx)(c.code,{children:"Vue 2"})," 的响应式原理，应该清楚 ",(0,s.jsx)(c.code,{children:"Vue2"})," 的响应式原理可以理解成如下一幅图："]}),"\n",(0,s.jsx)(c.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsxs)(c.p,{children:["在 ",(0,s.jsx)(c.code,{children:"Vue 2"})," 中，",(0,s.jsx)(c.code,{children:"Watcher"})," 就是依赖，有专门针对组件渲染的 ",(0,s.jsx)(c.code,{children:"render watcher"}),"。"]}),"\n",(0,s.jsxs)(c.ol,{children:["\n",(0,s.jsxs)(c.li,{children:["依赖收集：组件在 ",(0,s.jsx)(c.code,{children:"render"})," 的时候会访问模板中的数据，触发 ",(0,s.jsx)(c.code,{children:"getter"})," 把 ",(0,s.jsx)(c.code,{children:"watcher"})," 作为依赖收集。"]}),"\n",(0,s.jsxs)(c.li,{children:["触发渲染：当修改数据时，会触发 ",(0,s.jsx)(c.code,{children:"setter"}),"，通知 ",(0,s.jsx)(c.code,{children:"watcher"})," 更新，进而触发了组件的重新渲染。"]}),"\n"]}),"\n",(0,s.jsxs)(c.p,{children:["相应地，在 ",(0,s.jsx)(c.code,{children:"Vue 3"})," 中的响应式流程如下："]}),"\n",(0,s.jsx)(c.p,{children:(0,s.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,s.jsxs)(c.p,{children:["可以看到，",(0,s.jsx)(c.code,{children:"Vue 3"})," 相对于 ",(0,s.jsx)(c.code,{children:"Vue 2"})," 的响应式差别不大，主要就是劫持数据的方式改成用 ",(0,s.jsx)(c.code,{children:"Proxy"})," 实现，以及收集的依赖由 ",(0,s.jsx)(c.code,{children:"watcher"})," 实例变成了组件副作用函数 ",(0,s.jsx)(c.code,{children:"effect"}),"。另外，值得一提的是 ",(0,s.jsx)(c.code,{children:"Vue 3"})," 在响应式设计上又多考虑了层级嵌套的依赖收集问题和不必要的依赖清理问题。"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:c}=Object.assign({},(0,d.ah)(),e.components);return c?(0,s.jsx)(c,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let a=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Vue%203%20%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%2F7.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%EF%BC%9A%E5%89%AF%E4%BD%9C%E7%94%A8%E5%87%BD%E6%95%B0%E6%8E%A2%E7%A7%98.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"effect",id:"effect",depth:2},{text:"1. parent 的作用",id:"1-parent-的作用",depth:3},{text:"2. 依赖清理",id:"2-依赖清理",depth:3},{text:"总结",id:"总结",depth:2}],title:"7.响应式原理：副作用函数探秘",headingTitle:"7.响应式原理：副作用函数探秘",frontmatter:{}}}}]);