"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["412"],{746306:function(e,n,s){s.r(n),s.d(n,{default:()=>l});var r=s(552676),d=s(740453);let i=s.p+"static/image/e3999a280c12a2d44ed6db337c6c1045.0dcd44d3.png";function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",h4:"h4",strong:"strong",code:"code",pre:"pre",blockquote:"blockquote",img:"img",ul:"ul",li:"li"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"26云函数快速入门",children:["26.云函数快速入门",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#26云函数快速入门",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"云函数可以以函数的形式自动运行后端代码以响应API调用和HTTPS触发的事件，开发者只需关注业务代码本书，无需关心后端运维、计算资源等，平台会根据负载自动进行扩缩容。各个云函数相互独立，执行环境相互隔离。"}),"\n",(0,r.jsxs)(n.h2,{id:"41-云函数快速入门",children:["4.1 云函数快速入门",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-云函数快速入门",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"云函数在操作上与以往的开发方式会有所不同，不过它依然还是JavaScript知识的应用。在这一章，我们会来讲解云函数如何新建、如何部署、如何调用，在操作上我们需要注意哪些细节等。"}),"\n",(0,r.jsxs)(n.h3,{id:"411-云函数的新建与调用",children:["4.1.1 云函数的新建与调用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#411-云函数的新建与调用",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1新建一个云函数",children:["1、新建一个云函数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1新建一个云函数",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["使用开发者工具，鼠标右键云函数根目录如cloudfunctions，在弹出的窗口选择",(0,r.jsx)(n.strong,{children:"新建Node.js云函数"}),"，然后输入云函数的名称比如",(0,r.jsx)(n.code,{children:"sum"}),"(可以先右键同步云函数列表，保证没有重名),按Enter确认后，微信开发者工具会在本地（你的电脑）创建出",(0,r.jsx)(n.strong,{children:"sum云函数目录"}),"，同时也会在线上环境中创建出对应的云函数（也就是自动部署好了，可以到云开发控制台云函数列表里看到）。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"cloudfunctions //云函数根目录       \n├── sum // 云函数目录\n│   └── index.js \n│   └── config.json\n│   └── package.json  //云函数的Node包管理\nminiprogram //小程序根目录  \n├── ...        \n"})}),"\n",(0,r.jsxs)(n.p,{children:["打开sum云函数目录下的index.js并将里面的代码修改为如下，然后右键index.js文件，选择",(0,r.jsx)(n.strong,{children:"云函数增量上传:（更新文件）"}),"，这样一个用来求两个参数之和的云函数就更新好了："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV, \n})\nexports.main = async (event, context) => {\n  const sum = event.a + event.b\n  return sum\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这里的",(0,r.jsx)(n.code,{children:"event"}),"对象指的是触发云函数的事件，在小程序端调用时，",(0,r.jsx)(n.code,{children:"event"}),"是小程序端调用云函数时传入的参数对象，也就是说要计算",(0,r.jsx)(n.code,{children:"sum"}),"，我们需要在小程序端调用云函数时传入两个参数",(0,r.jsx)(n.code,{children:"a"}),"和",(0,r.jsx)(n.code,{children:"b"}),"。"]}),"\n",(0,r.jsxs)(n.h4,{id:"2云函数的调用",children:["2、云函数的调用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2云函数的调用",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["结合前面的知识，要调用云函数有很多种方式，比如我们可以在调试器的console控制台调用接口、在生命周期函数里调用，还可以通过组件绑定一个事件处理函数来调用等等，这些方式都是大同小异，都是在调用",(0,r.jsx)(n.code,{children:"wx.cloud.callFunction()"}),"接口。"]}),"\n",(0,r.jsx)(n.p,{children:"打开调试器的console控制台，我们可以输入以下代码然后执行，name是要调用的云函数名称，而data则是要传递给云函数的参数："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'wx.cloud.callFunction({\n  name: \'sum\',    // 要调用的云函数名称，这里为sum\n  data: {         // 传递给云函数的event参数，这里为a和b\n    a: 15,\n    b: 23,\n  }\n}).then(res => {\n  console.log("云函数返回的结果",res)\n}).catch(err => {\n  console.log("云函数调用失败",err)\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"在控制台，我们可以看到如下打印的结果，首先它会返回这是一个Promise，然后调用完成之后再返回调用的结果，也就是res对象："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  errMsg: "cloud.callFunction:ok", \n  result: 38,    \n  requestID: "afa3e19a-e389-11ea-ad2f-5254007c2bc0"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["result才是云函数返回的结果，errMsg是云函数执行是否成功，而requestID是云函数执行 ID，可用于日志查询。我们可以将云函数的调用函数放到生命周期函数或者事件处理函数里，再通过",(0,r.jsx)(n.code,{children:"this.setData"}),"赋值给用于数据绑定的Page()里的data对象，最后就可以渲染出来了，我们来看下面的案例。"]}),"\n",(0,r.jsxs)(n.h4,{id:"3云函数的返回值与渲染",children:["3、云函数的返回值与渲染",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3云函数的返回值与渲染",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["使用开发者工具将sum云函数的代码修改为如下，我们让云函数返回更多类型的数据，修改完之后，右键index.js文件，选择",(0,r.jsx)(n.strong,{children:"云函数增量上传:（更新文件）"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const cloud = require(\'wx-server-sdk\')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV, \n})\nexports.main = async (event, context) => {\n  let lesson = "云开发技术训练营";\n  let enname = "CloudBase Camp";\n  let x = 3, y = 4, z = 5.001, a = -3, b = -4, c = -5;\n  let now = new Date();\n  return {\n  \xa0\xa0movie: { name: "霸王别姬", img: "https://img3.doubanio.com/view/photo/s_ratio_poster/public/p1910813120.webp", desc: "风华绝代。" },\n  \xa0\xa0movielist:["肖申克的救赎", "霸王别姬", "这个杀手不太冷", "阿甘正传", "美丽人生"],\n  \xa0\xa0charat: lesson.charAt(4),\n  \xa0\xa0concat: enname.concat(lesson),\n  \xa0\xa0uppercase: enname.toUpperCase(),\n  \xa0\xa0abs: Math.abs(b),\n  \xa0\xa0pow: Math.pow(x, y),\n  \xa0 sign: Math.sign(a),\n  \xa0\xa0now: now.toString(),\n  \xa0\xa0fullyear: now.getFullYear(),\n  \xa0\xa0date: now.getDate(),\n  \xa0\xa0day: now.getDay(),\n  \xa0\xa0hours: now.getHours(),\n  \xa0\xa0minutes: now.getMinutes(),\n  \xa0\xa0seconds: now.getSeconds(),\n  \xa0\xa0time: now.getTime()\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"index.js增量上传更新到云开发环境之后，我们可以在一个小程序页面比如新建一个function页面，然后在function.js的生命周期函数onLoad里调用这个云函数并将获取的数据赋值给data："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'Page({\n  data: {\n    result:{}\n  },\n\n  onLoad: function (options) {\n    const that = this\n    wx.cloud.callFunction({\n      name: \'sum\',//上面这个云函数并不需要我们传递参数（也就不需要data属性）\n    }).then(res => {\n      console.log("云函数返回的结果",res)\n      that.setData({\n        result:res.result\n      })\n    }).catch(err => {\n      console.log("云函数",err)\n    })\n  },\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"使用开发者再在function.wxml里输入以下代码，这里用的就是我们前面学过的页面渲染的知识，编译之后数据就在小程序端渲染出来了："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<view>"云开发技术训练营"第5个字符 {{result.charat}}</view>\n<view>两个字符串连接后的结果：{{result.concat}}</view>\n<view>CloudBase Camp字母大写：{{result.uppercase}}</view>\n<view>b的绝对值：{{result.abs}}</view>\n<view>x的y次幂：{{result.pow}}</view>\n<view>返回a是正还是负：{{result.sign}}</view>\n<view>now对象：{{result.now}}</view>\n<view>{{result.fullyear}}年</view>\n<view>{{result.date}}日</view>\n<view>星期{{result.day}}</view>\n<view>{{result.hours}}时</view>\n<view>{{result.minutes}}分</view>\n<view>{{result.seconds}}秒</view>\n<view>1970年1月1日至今的毫秒数：{{result.time}}</view>\n'})}),"\n",(0,r.jsx)(n.p,{children:"从以上的案例可以看到，小程序端渲染的数据来源于云函数，而且云函数支持各类数据类型，不仅如此云函数还可以调用数据库返回给小程序端，这也是后端服务的基础。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"值得注意的是，云函数返回的时间和小程序端返回的时间(北京时间)是不一样的，这是因为云函数中的时区为 UTC+0，不是 UTC+8，格式化得到的时间和在国内的时间是有8个小时的时间差，但是时区不会影响时间戳，所以尽量不要在云函数端将时间字符串化。"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"412-云函数的初始化",children:["4.1.2 云函数的初始化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#412-云函数的初始化",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1关于wx-server-sdk",children:["1、关于wx-server-sdk",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1关于wx-server-sdk",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["wx-server-sdk是微信小程序服务器端的SDK，SDK包括用于微信免鉴权的私有协议、云数据库、云存储、云调用等基础能力，因此每一个云函数都会使用到wx-server-sdk这个Node包。由于每个云函数实例之间是相互隔离的（没有公用的内存或硬盘空间），所以每个云函数都要求",(0,r.jsx)(n.strong,{children:"单独"}),"安装wx-server-sdk，Node包在云函数实例之间不存在复用的关系。而要调用这个包都需要安装好Node.js环境才能在本地电脑的开发者工具进行本地调试。"]}),"\n",(0,r.jsxs)(n.p,{children:["给云函数安装依赖时，在开发者工具上右键云函数目录如sum，选择开发者工具自带的终端（更建议）或外部终端窗口，直接输入",(0,r.jsx)(n.code,{children:"npm install"}),"即可。npm包管理器自动会安装好package.json的dependencies写好的包，可以将wx-server-sdk的版本号换成latest（生产环境以稳定兼容的版本为准）："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'"dependencies": {\n  "wx-server-sdk": "latest"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["sum安装好node依赖之后，就会在云函数目录里有一个node_modules的文件夹。当我们要将本地的云函数部署到云开发环境时，可以右键云函数目录选择",(0,r.jsx)(n.strong,{children:"上传并部署所有文件"}),"（更建议）或",(0,r.jsx)(n.strong,{children:"上传并部署：云端安装依赖（不上传node_modules）"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果云函数本地没有安装依赖，就没法在开发者工具对云函数进行本地调试，部署上传云函数时，选择",(0,r.jsx)(n.strong,{children:"上传并部署所有文件"}),"就会报错，截图如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"未在本地安装wx-server-sdk"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["wx-server-sdk只是云函数必备的一个依赖，云函数还可以通过package.json安装更多功能丰富的Node包，这些我们会在教程的【用云函数实现后端能力】详细介绍。当在package.json里新增了其他依赖时，都需要使用",(0,r.jsx)(n.code,{children:"npm install"}),"进行依赖的下载。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"2云函数的初始化",children:["2、云函数的初始化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2云函数的初始化",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在云函数中调用其他API前，同小程序端一样，也需要执行一次初始化方法，首先使用require引入wx-server-sdk依赖，然后在初始化",(0,r.jsx)(n.code,{children:"cloud.init()"}),"中指定云开发的环境，方法如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"//方法一，直接使用字符串envId指定环境\nconst cloud = require('wx-server-sdk')\ncloud.init({\n  env: 'xly-xrlur' //换成你的云函数envId\n})\n\n//方法二，使用cloud.DYNAMIC_CURRENT_ENV常量，也就是使用云函数当前所在环境\nconst cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV //注意它不是字符串，不要加引号\n})\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["尽管直接使用",(0,r.jsx)(n.code,{children:"cloud.init()"}),"不指定环境在某些特定情况下仍然可以使用，比如你的云函数就部署在你创建的第一个云开发环境里，但是非常不推荐这种写法；"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"cloud.DYNAMIC_CURRENT_ENV"}),"标志的是云函数当前所在的环境，也就是你将云函数部署到哪个环境，它就是指哪个环境；"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"我们可以在云开发环境A直接调用同一个账号下云开发环境B的资源，只需要在云环境初始化时指定B的envId即可，在开发时切换生产环境、测试环境非常方便；"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["我们还可以在云函数里分别调用不同云开发环境里的云存储、云数据库、云函数等的资源，比如",(0,r.jsx)(n.code,{children:'env:{"database":"xly-xrlur","storage":"xly-1o7da","functions":"xly-oau0j"}'}),"；"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["如果调用云函数时，提示",(0,r.jsx)(n.code,{children:"找不到对应的FunctionName"}),"，可能是你的小程序账号之下有多个云开发环境，而你在云函数初始化时没有指定envId。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"413-开发者工具右键操作说明",children:["4.1.3 开发者工具右键操作说明",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#413-开发者工具右键操作说明",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1同步云函数列表",children:["1、同步云函数列表",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1同步云函数列表",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["当我们右键云函数根目录cloudfunctions时，会有一个",(0,r.jsx)(n.strong,{children:"同步云函数列表"}),"的选项，它可以拉取当前云开发环境所有云函数的列表，右键指定的云函数选择",(0,r.jsx)(n.strong,{children:"下载"}),"就可以将云端的代码给下载到本地电脑。也就是说，上传到云开发环境的云函数以及代码都会存储在云端，你可以在其他设备上通过这种方式进行同步，除非你在云开发控制台将这个云函数给删掉了。"]}),"\n",(0,r.jsxs)(n.p,{children:["当我们在开发者工具本地或使用云开发控制台将云函数删掉之后，",(0,r.jsx)(n.strong,{children:"建议先同步云函数列表"}),"，不然在重新上传部署同名的云函数的时会出现一些报错。"]}),"\n",(0,r.jsxs)(n.h4,{id:"2新建nodejs云函数",children:["2、新建Node.js云函数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2新建nodejs云函数",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在前面我们也已经介绍过右键云函数根目录cloudfunctions，选择",(0,r.jsx)(n.strong,{children:"新建Node.js云函数"}),"可以直接在云端新建一个云函数，同时会自动在云端给新建的云函数安装好wx-server-sdk依赖，并将该云函数在云端部署的情况反馈到开发者工具，即开发者工具本地的云函数目录图标会变色（注意区分同步和没有同步的云函数目录图标的不同）。"]}),"\n",(0,r.jsxs)(n.p,{children:["弄明白了这个机制以及前面的",(0,r.jsx)(n.strong,{children:"上传并部署所有文件"}),"、",(0,r.jsx)(n.strong,{children:"上传并部署：云端安装依赖（不上传node_modules）"}),"，你才能理清什么时候需要我们在本地下载依赖，什么时候只需要更新代码本身就可以。"]}),"\n",(0,r.jsxs)(n.h4,{id:"3增量上传",children:["3、增量上传",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3增量上传",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果你在云端已经部署好了一个云函数所需要的依赖，那在编写云函数的核心文件index.js、权限配置文件或云函数其他目录文件时就不需要再",(0,r.jsx)(n.strong,{children:"上传并部署所有文件"}),"或",(0,r.jsx)(n.strong,{children:"上传并部署：云端安装依赖（不上传node_modules）"}),"，只需要右键云函数目录，选择",(0,r.jsx)(n.strong,{children:"云函数增量上传：更新文件"}),"，这种方式只更新我们修改过的文件，更快捷。"]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F26.%E4%BA%91%E5%87%BD%E6%95%B0%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.md"]={toc:[{text:"4.1 云函数快速入门",id:"41-云函数快速入门",depth:2},{text:"4.1.1 云函数的新建与调用",id:"411-云函数的新建与调用",depth:3},{text:"1、新建一个云函数",id:"1新建一个云函数",depth:4},{text:"2、云函数的调用",id:"2云函数的调用",depth:4},{text:"3、云函数的返回值与渲染",id:"3云函数的返回值与渲染",depth:4},{text:"4.1.2 云函数的初始化",id:"412-云函数的初始化",depth:3},{text:"1、关于wx-server-sdk",id:"1关于wx-server-sdk",depth:4},{text:"2、云函数的初始化",id:"2云函数的初始化",depth:4},{text:"4.1.3 开发者工具右键操作说明",id:"413-开发者工具右键操作说明",depth:3},{text:"1、同步云函数列表",id:"1同步云函数列表",depth:4},{text:"2、新建Node.js云函数",id:"2新建nodejs云函数",depth:4},{text:"3、增量上传",id:"3增量上传",depth:4}],title:"26.云函数快速入门",headingTitle:"26.云函数快速入门",frontmatter:{}}}}]);