"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["27086"],{647785:function(e,n,s){s.r(n),s.d(n,{default:()=>G});var t=s(552676),r=s(740453);let c=s.p+"static/image/c1b83d2030f979a7900375fc1fa50f49.b5c6c798.webp",o=s.p+"static/image/9cb62adcbe3ef3d6ee6eee4c2275622e.bc50db9a.webp",i=s.p+"static/image/9eeafde2ab0809455079da9082b7e116.9fb487a0.webp",a=s.p+"static/image/3abf90e5e4a434ddf7e7bd5adba25578.b8a033f9.webp",p=s.p+"static/image/85af0db555115892248d949637bcc001.8a3f7929.webp",d=s.p+"static/image/1d03b82f8cb996281e30bd2fd4a9acd8.f232696a.webp",l=s.p+"static/image/2a35769644dc7e39c4c7bc44410cfa10.9a72569e.webp",m=s.p+"static/image/62e5a3693dd528468d42898815bab2ab.f37887c1.webp",u=s.p+"static/image/1eb2969e10370d91ba6c038fb95851fd.9f49f3c4.webp",f=s.p+"static/image/2d915fd28da6e57901f78bfa60a52f12.f7e47274.webp",h=s.p+"static/image/7161a0d8bc8e3881cd3829db9193162e.d196adcc.webp",x=s.p+"static/image/2197c6487d5c8943309f9086c7d4513d.af65fe1d.webp",j=s.p+"static/image/bc41f38fc2f4f788124db5d66c5bb089.b0de51b8.webp",g=s.p+"static/image/655f6c28949213de77af166a66a807d4.efa6ccb5.webp",b=s.p+"static/image/409614df2a06d09291fcc097e6c665c9.bbe5f3c0.gif",y=s.p+"static/image/cda6328fffbb6a8f6749f8ef81bbb888.a554ea39.webp",I=s.p+"static/image/8fa766ab3fb4348387d6242563d9e4bb.fcca25f7.webp",M=s.p+"static/image/2b64ac3292fbef7441ea1cd80d6e89ba.38745a4f.webp",k=s.p+"static/image/2cb33909f68754b88a856b97db6cf196.59d14fbd.webp";function v(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"107-如何拿到服务器-cpu内存磁盘状态",children:["107. 如何拿到服务器 CPU、内存、磁盘状态",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#107-如何拿到服务器-cpu内存磁盘状态",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在很多系统中，会有展示服务器信息的页面。"}),"\n",(0,t.jsx)(n.p,{children:"比如 CPU、内存、磁盘等："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:k,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这是怎么实现的呢？"}),"\n",(0,t.jsx)(n.p,{children:"其实通过 node 的原生 api 就可以做到。"}),"\n",(0,t.jsx)(n.p,{children:"我们还是用 Nest 写个接口来返回这些信息："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"nest new server-status\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:M,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"在 AppController 加个接口，用 os.cpus 拿到 cpu 的信息："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport * as os from 'os';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('status')\n  status() {\n    return os.cpus();\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:I,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"浏览器访问下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"返回的数组元素个数就是 cpu 数。"}),"\n",(0,t.jsx)(n.p,{children:"那具体的属性是什么意思呢？"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，times.user、times.sys、times.idle 分别代表用户代码占用的 cpu 时间、系统代码占用的 cpu 时间，空闲的 cpu 时间："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"基于这些就能算出 cpu 的使用率、空置率来。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Get('status')\nstatus() {\n    const cpus = os.cpus();\n    const cpuInfo = cpus.reduce(\n      (info, cpu) => {\n        info.cpuNum += 1;\n        info.user += cpu.times.user;\n        info.sys += cpu.times.sys;\n        info.idle += cpu.times.idle;\n        info.total += cpu.times.user + cpu.times.sys + cpu.times.idle;\n        return info;\n      },\n      { user: 0, sys: 0, idle: 0, total: 0, cpuNum: 0 },\n    );\n    const cpu = {\n      cpuNum: cpuInfo.cpuNum,\n      sys: ((cpuInfo.sys / cpuInfo.total) * 100).toFixed(2),\n      used: ((cpuInfo.user / cpuInfo.total) * 100).toFixed(2),\n      free: ((cpuInfo.idle / cpuInfo.total) * 100).toFixed(2),\n    };\n    return cpu;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"用 reduce 方法累加 cpu 的数量、user、sys、idle 以及总的 cpu 时间。"}),"\n",(0,t.jsx)(n.p,{children:"然后 cpu 的系统使用率就是 sys/total，用户使用率是 user/total 而空置率就是 idle/total。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"对应的就是这部分信息："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后继续拿内存信息："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport * as os from 'os';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('status')\n  status() {\n    return {\n      cpu: this.getCpuInfo(),\n      mem: this.getMemInfo()\n    }\n  }\n\n  getMemInfo() {\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const usedMemory = totalMemory - freeMemory;\n    const memoryUsagePercentage = (((totalMemory - freeMemory) / totalMemory) * 100).toFixed(2);\n    const mem = {\n      total: totalMemory,\n      used: usedMemory,\n      free: freeMemory,\n      usage: memoryUsagePercentage,\n    };\n    return mem;\n  }\n\n  getCpuInfo() {\n    const cpus = os.cpus();\n    const cpuInfo = cpus.reduce(\n      (info, cpu) => {\n        info.cpuNum += 1;\n        info.user += cpu.times.user;\n        info.sys += cpu.times.sys;\n        info.idle += cpu.times.idle;\n        info.total += cpu.times.user + cpu.times.sys + cpu.times.idle;\n        return info;\n      },\n      { user: 0, sys: 0, idle: 0, total: 0, cpuNum: 0 },\n    );\n    const cpu = {\n      cpuNum: cpuInfo.cpuNum,\n      sys: ((cpuInfo.sys / cpuInfo.total) * 100).toFixed(2),\n      used: ((cpuInfo.user / cpuInfo.total) * 100).toFixed(2),\n      free: ((cpuInfo.idle / cpuInfo.total) * 100).toFixed(2),\n    };\n    return cpu;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"os.totalmem 是总内存，os.freemem 是空闲内存，那差值就是已使用的内存。"}),"\n",(0,t.jsx)(n.p,{children:"这样也可以求出内存使用率。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们把它转成 GB 单位的数值返回："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"bytesToGB(bytes) {\n    const gb = bytes / (1024 * 1024 * 1024);\n    return gb.toFixed(2);\n}\n\ngetMemInfo() {\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const usedMemory = totalMemory - freeMemory;\n    const memoryUsagePercentage = (((totalMemory - freeMemory) / totalMemory) * 100).toFixed(2);\n    const mem = {\n      total: this.bytesToGB(totalMemory),\n      used: this.bytesToGB(usedMemory),\n      free: this.bytesToGB(freeMemory),\n      usage: memoryUsagePercentage,\n    };\n    return mem;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"对应的是这部分信息："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后是磁盘信息："}),"\n",(0,t.jsxs)(n.p,{children:["这里用到 ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/node-disk-info",target:"_blank",rel:"noopener noreferrer",children:"node-disk-info"})," 这个包："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"安装下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install --save node-disk-info\n"})}),"\n",(0,t.jsx)(n.p,{children:"调用下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport * as os from 'os';\nimport * as nodeDiskInfo from 'node-disk-info';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('status')\n  async status() {\n    return {\n      cpu: this.getCpuInfo(),\n      mem: this.getMemInfo(),\n      dist: await this.getDiskStatus()\n    }\n  }\n\n  async getDiskStatus() {\n    const disks = await nodeDiskInfo.getDiskInfoSync();\n\n    const sysFiles = disks.map((disk: any) => {\n      return {\n        dirName: disk._mounted,\n        typeName: disk._filesystem,\n        total: this.bytesToGB(disk._blocks) + 'GB',\n        used: this.bytesToGB(disk._used) + 'GB',\n        free: this.bytesToGB(disk._available) + 'GB',\n        usage: ((disk._used / disk._blocks || 0) * 100).toFixed(2),\n      };\n    });\n    return sysFiles;\n  }\n\n  bytesToGB(bytes) {\n    const gb = bytes / (1024 * 1024 * 1024);\n    return gb.toFixed(2);\n  }\n\n  getMemInfo() {\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const usedMemory = totalMemory - freeMemory;\n    const memoryUsagePercentage = (((totalMemory - freeMemory) / totalMemory) * 100).toFixed(2);\n    const mem = {\n      total: this.bytesToGB(totalMemory),\n      used: this.bytesToGB(usedMemory),\n      free: this.bytesToGB(freeMemory),\n      usage: memoryUsagePercentage\n    };\n    return mem;\n  }\n\n  getCpuInfo() {\n    const cpus = os.cpus();\n    const cpuInfo = cpus.reduce(\n      (info, cpu) => {\n        info.cpuNum += 1;\n        info.user += cpu.times.user;\n        info.sys += cpu.times.sys;\n        info.idle += cpu.times.idle;\n        info.total += cpu.times.user + cpu.times.sys + cpu.times.idle;\n        return info;\n      },\n      { user: 0, sys: 0, idle: 0, total: 0, cpuNum: 0 },\n    );\n    const cpu = {\n      cpuNum: cpuInfo.cpuNum,\n      sys: ((cpuInfo.sys / cpuInfo.total) * 100).toFixed(2),\n      used: ((cpuInfo.user / cpuInfo.total) * 100).toFixed(2),\n      free: ((cpuInfo.idle / cpuInfo.total) * 100).toFixed(2),\n    };\n    return cpu;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里拿到的就是本地所有的磁盘信息："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"分别是路径、文件系统、总大小、已用大小、可用大小、已用百分比："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"最后，我们还要返回其他的服务器信息："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Get('status')\nasync status() {\n    return {\n      cpu: this.getCpuInfo(),\n      mem: this.getMemInfo(),\n      dist: await this.getDiskStatus(),\n      sys: this.getSysInfo()\n    }\n}\n\ngetSysInfo() {\n    return {\n      computerName: os.hostname(),\n      computerIp: this.getServerIP(),\n      osName: os.platform(),\n      osArch: os.arch(),\n    };\n}\n\ngetServerIP() {\n    const nets = os.networkInterfaces();\n    for (const name of Object.keys(nets)) {\n      for (const net of nets[name]) {\n        if (net.family === 'IPv4' && !net.internal) {\n          return net.address;\n        }\n      }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里的 os.networkInterfaces 是拿到所有网卡信息："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"从中过滤出非 IPv4 的外部网卡的 ip 来返回。"}),"\n",(0,t.jsx)(n.p,{children:"此外，我们还通过 os.homename、os.platform、os.arch 分别拿到了主机名、操作系统、操作系统架构等信息。"}),"\n",(0,t.jsx)(n.p,{children:"试一下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"和我系统设置里的 ip 一样："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"对应这部分信息："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样，服务器的状态数据就都拿到了。"}),"\n",(0,t.jsx)(n.p,{children:"可以实现这样的服务监控页面："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["案例代码上传了",(0,t.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/server-status",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"这节我们拿到了服务器的 cpu、内存、磁盘、ip 等信息。"}),"\n",(0,t.jsx)(n.p,{children:"通过 node 的 os 模块的 api 以及 node-disk-info 这个包。"}),"\n",(0,t.jsx)(n.p,{children:"可以在后台管理系统加一个页面来展示这些信息。"})]})}function w(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(v,{...e})}):v(e)}let G=w;w.__RSPRESS_PAGE_META={},w.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F107.%20%E5%A6%82%E4%BD%95%E6%8B%BF%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%20CPU%E3%80%81%E5%86%85%E5%AD%98%E3%80%81%E7%A3%81%E7%9B%98%E7%8A%B6%E6%80%81.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"107. 如何拿到服务器 CPU、内存、磁盘状态",headingTitle:"107. 如何拿到服务器 CPU、内存、磁盘状态",frontmatter:{}}}}]);