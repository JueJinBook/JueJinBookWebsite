"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["8860"],{177972:function(e,n,c){c.r(n),c.d(n,{default:()=>b});var r=c(552676),a=c(740453);let s=c.p+"static/image/ba4cd247579c3a948b518205a08acefc.1cc24bef.png",d=c.p+"static/image/51a9814262258294a615c5a4087b71ff.757b4a94.png",i=c.p+"static/image/99177faf11ae66c85ad29942fb89acaf.4e0492e9.png",l=c.p+"static/image/de9c82e3fc838388cc8dbab9df99e1a9.b84d1057.png",h=c.p+"static/image/020ea9ee1ba99d11617dfe4d24673b1b.5377b378.png",t=c.p+"static/image/f7ed0ef787a2127b58df52e30b55f10a.09c9408b.png",p=c.p+"static/image/29827a5994f45c05cd0337087cddaf32.db7eb8ea.png",j=c.p+"static/image/eff2646d63fcf19e88a56b15705e27f1.c146cbd6.png",o=c.p+"static/image/bf83f77a09865af9658f4fa2f6aabcb4.da077ce3.png",x=c.p+"static/image/e8504786ee0898f650b37a1ab2b8c243.fe9e89d1.png";function m(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",ul:"ul",li:"li",h2:"h2"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"9code--frame-和代码高亮原理",children:["9.Code- Frame 和代码高亮原理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9code--frame-和代码高亮原理",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"当代码运行报错时，我们会打印错误，错误中有堆栈信息，可以定位到对应的代码位置。但有的时候我们希望能够更直接准确的打印报错位置的代码。比如这样："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这种错误信息是不是感觉很常见？"}),"\n",(0,r.jsx)(n.p,{children:"这叫做 code frame。"}),"\n",(0,r.jsx)(n.p,{children:"这个可以使用 @babel/code-frames 来打印："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const { codeFrameColumns } = require('@babel/code-frame');\n\nconst res = codeFrameColumns(code, {\n  start: { line: 2, column: 1 },\n  end: { line: 3, column: 5 },\n}, {\n  highlightCode: true,\n  message: '这里出错了'\n});\n\nconsole.log(res);\n"})}),"\n",(0,r.jsx)(n.p,{children:"当然，也可以直接使用 path.buildCodeFrameError(path, options) 来创建这种错误信息。"}),"\n",(0,r.jsx)(n.p,{children:"注意，这里的代码高亮是在控制台实现的，不能用网页里的那种库。"}),"\n",(0,r.jsx)(n.p,{children:"那么它是怎么做到的打印出上面的 code frame 的代码格式的呢？"}),"\n",(0,r.jsx)(n.p,{children:"这节我们就来探究下原理。"}),"\n",(0,r.jsx)(n.p,{children:"核心就是这三个问题："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"如何打印出标记相应位置代码的 code frame（就是上图的打印格式）"}),"\n",(0,r.jsx)(n.li,{children:"如何实现语法高亮"}),"\n",(0,r.jsx)(n.li,{children:"如何在控制台打印颜色"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"如何打印-code-frame",children:["如何打印 code frame",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何打印-code-frame",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们先不管高亮，实现这样的格式的打印："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"其实就是一个拼接字符串的过程，下面是拼接字符串的细节（了解即可）："}),"\n",(0,r.jsxs)(n.p,{children:["传入了源代码、标记开始和结束的行列号，那么我们就能够计算出显示标记（marker ",(0,r.jsx)(n.code,{children:"“>”"}),"）的行是哪些，以及这些行的哪些列，然后依次对每一行代码做处理，如果本行没有标记则保持原样，如果本行有标记的话，那么就在开始打印一个 marker ",(0,r.jsx)(n.code,{children:"“>”"}),"，并且在下面打印一行 marker ",(0,r.jsx)(n.code,{children:'"^"'}),"，最后一个标记行还要打印错误信息。"]}),"\n",(0,r.jsx)(n.p,{children:"我们来看一下 @babel/code-frame 的实现："}),"\n",(0,r.jsx)(n.p,{children:"首先，分割字符串成每一行的数组，然后根据传入的位置计算出 marker（>） 所在的位置。"}),"\n",(0,r.jsx)(n.p,{children:"比如图中第二行的第 1 到 12 列，第三行的 0 到 5 列。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"然后对每一行做处理，如果本行有标记，则拼成 marker + gutter（行号） + 代码的格式，下面再打印一行 marker，最后的 marker 行打印 message。没有标记不处理。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"这样最终拼出的就是这样的 code frame："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们实现了 code frame 的拼接，暂时忽略了高亮，那么怎么做语法高亮呢？"}),"\n",(0,r.jsxs)(n.h2,{id:"如何实现语法高亮",children:["如何实现语法高亮",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何实现语法高亮",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"实现语法高亮，词法分析就足够了，babel 也是这么做的，@babel/highlight 包里面完成了高亮代码的逻辑。"}),"\n",(0,r.jsx)(n.p,{children:"先看效果："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"const a = 1;\nconst b = 2;\nconsole.log(a + b);\n"})}),"\n",(0,r.jsx)(n.p,{children:"上面的源码被分成了 token 数组："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"[\n  [ 'whitespace', '\\n' ], [ 'keyword', 'const' ],\n  [ 'whitespace', ' ' ],  [ 'name', 'a' ],\n  [ 'whitespace', ' ' ],  [ 'punctuator', '=' ],\n  [ 'whitespace', ' ' ],  [ 'number', '1' ],\n  [ 'punctuator', ';' ],  [ 'whitespace', '\\n' ],\n  [ 'keyword', 'const' ], [ 'whitespace', ' ' ],\n  [ 'name', 'b' ],        [ 'whitespace', ' ' ],\n  [ 'punctuator', '=' ],  [ 'whitespace', ' ' ],\n  [ 'number', '2' ],      [ 'punctuator', ';' ],\n  [ 'whitespace', '\\n' ], [ 'name', 'console' ],\n  [ 'punctuator', '.' ],  [ 'name', 'log' ],\n  [ 'bracket', '(' ],     [ 'name', 'a' ],\n  [ 'whitespace', ' ' ],  [ 'punctuator', '+' ],\n  [ 'whitespace', ' ' ],  [ 'name', 'b' ],\n  [ 'bracket', ')' ],     [ 'punctuator', ';' ],\n  [ 'whitespace', '\\n' ]\n]\n"})}),"\n",(0,r.jsx)(n.p,{children:"token 怎么分的呢？"}),"\n",(0,r.jsx)(n.p,{children:"一般来说词法分析就是有限状态自动机（DFA），但是这里实现比较简单，是通过正则匹配的："}),"\n",(0,r.jsx)(n.p,{children:"js-tokens 这个包暴露出来一个正则，一个函数，正则是用来识别 token 的，其中有很多个分组，而函数里面是对不同的分组下标返回了不同的类型，这样就能完成 token 的识别和分类。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 @babel/highlight 包里基于这个正则来匹配 token："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"有了分类之后，不同 token 显示不同颜色，建立个 map 就行了。"}),"\n",(0,r.jsx)(n.p,{children:"@babel/highlight 里的实现："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们知道了怎么做语法高亮，使用 chalk 的 api 就可以打印颜色，那控制台打印颜色的原理是什么呢？"}),"\n",(0,r.jsxs)(n.h2,{id:"如何在控制台打印颜色",children:["如何在控制台打印颜色",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何在控制台打印颜色",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["控制台打印的是 ",(0,r.jsx)(n.a,{href:"https://tool.oschina.net/commons?type=4",target:"_blank",rel:"noopener noreferrer",children:"ASCII 码"}),"，并不是所有的编码都对应可见字符，ASCII 码有一部分字符是对应控制字符的，比如 27 是 ESC，就是我们键盘上的 ESC 键，是 escape 的缩写，按下它可以完成一些控制功能，这里我们可以通过打印 ESC 的 ASCII 码来进入控制打印颜色的状态。"]}),"\n",(0,r.jsx)(n.p,{children:"格式是这样的："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["打印一个 ",(0,r.jsx)(n.code,{children:"ESC"})," 的 ASCII 码，之后是 ",(0,r.jsx)(n.code,{children:"["})," 代表开始，",(0,r.jsx)(n.code,{children:"m"})," 代表结束，中间是用 ",(0,r.jsx)(n.code,{children:";"})," 分隔的 n 个控制字符，可以控制很多样式，比如前景色、背景色、加粗、下划线等等。"]}),"\n",(0,r.jsxs)(n.p,{children:["ESC 的 ASCII 码是 27，有好几种写法：一种是字符表示的 ",(0,r.jsx)(n.code,{children:"\\e"})," ，一种是 16 进制的 ",(0,r.jsx)(n.code,{children:"\\0x1b"}),"（27 对应的 16进制），一种是 8 进制的 ",(0,r.jsx)(n.code,{children:"\\033"}),"，这三种都表示 ESC。"]}),"\n",(0,r.jsx)(n.p,{children:"我们来试验一下： 1 表示加粗、36 表示前景色为青色、4 表示下划线，下面三种写法等价："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"\\e[36;1;4m\n\\033[36;1;4m\n\\0x1b[36;1;4m\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:i,alt:""}),"\n都打印了正确的样式！"]}),"\n",(0,r.jsxs)(n.p,{children:["当然，加了样式还要去掉，可以加一个 ",(0,r.jsx)(n.code,{children:"\\e[0m"})," 就可以了（",(0,r.jsx)(n.code,{children:"\\033[0m"}),",",(0,r.jsx)(n.code,{children:"\\0x1b[0m"})," 等价）。"]}),"\n",(0,r.jsx)(n.p,{children:"chalk（nodejs 的在终端打印颜色的库）的不同方法就是封装了这些 ASCII 码的颜色控制字符。"}),"\n",(0,r.jsx)(n.p,{children:"上面每行代码被高亮过以后的代码是："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"这样也就实现了不同颜色的打印。"}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"至此，我们能实现开头的效果了：支持 code frame 的打印，支持语法高亮，能够打印颜色"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这节我们探究了这种效果的实现原理，先是 code frame 的字符串是怎么拼接的，然后每一行的代码是怎么做高亮的，之后是高亮具体是怎么打印颜色的。"}),"\n",(0,r.jsx)(n.p,{children:"@babel/code-frame 包是 babel 用来打印错误信息的，别的工具（比如 eslint、tsc）也会打印 code frame 的格式，原理一样。"}),"\n",(0,r.jsx)(n.p,{children:"后面的错误打印我们都会用 code frame 的方式。"})]})}function g(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}let b=g;g.__RSPRESS_PAGE_META={},g.__RSPRESS_PAGE_META["Babel%20%E6%8F%92%E4%BB%B6%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F9.Code-%20Frame%20%E5%92%8C%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E5%8E%9F%E7%90%86.md"]={toc:[{text:"如何打印 code frame",id:"如何打印-code-frame",depth:2},{text:"如何实现语法高亮",id:"如何实现语法高亮",depth:2},{text:"如何在控制台打印颜色",id:"如何在控制台打印颜色",depth:2},{text:"总结",id:"总结",depth:2}],title:"9.Code- Frame 和代码高亮原理",headingTitle:"9.Code- Frame 和代码高亮原理",frontmatter:{}}}}]);