"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["88683"],{630465:function(e,n,i){i.r(n),i.d(n,{default:()=>x});var d=i(552676),c=i(740453);let s=i.p+"static/image/1d90a7efcf62518a264d962244364580.d604a51a.webp",r=i.p+"static/image/ce4e2874390f08e5ef945e1861eee362.f04bbe01.webp",l=i.p+"static/image/91ee453c4fc4e971fcbe70613887c5d0.4b931c1d.webp",h=i.p+"static/image/46a71674443746b6382dda3ee0cdb7b6.a080c29c.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",strong:"strong",ul:"ul",li:"li",blockquote:"blockquote",pre:"pre",img:"img"},(0,c.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"第30章git基础工作流程和原理",children:["第30章—Git基础：工作流程和原理",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第30章git基础工作流程和原理",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"\uFEFF前面的 5 个章节，我们已经把一个项目的完整生命周期走了一遍，从需求分析开始，到项目的复盘，我们已经经历了一个完整项目的开发流程。"}),"\n",(0,d.jsx)(n.p,{children:"不对不对，并不完整，你见过开发中不用提交代码的程序员吗？没有版本控制的代码安全感何在？程序员直接删库跑路怎么办？"}),"\n",(0,d.jsx)(n.p,{children:"这肯定是不行的，所以我们要学习版本控制，那么，本章我们就开始来学这些东西。让你的代码不再随着电脑走，而是随着心情走，说白了就是放在云端，你可以随时随地拉取。"}),"\n",(0,d.jsx)(n.p,{children:"好，我们就开始正题。"}),"\n",(0,d.jsxs)(n.h2,{id:"版本控制工具",children:["版本控制工具",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#版本控制工具",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["自太古以来，版本控制工具有两个，一个叫做",(0,d.jsx)(n.code,{children:"SVN"}),"，一个叫做",(0,d.jsx)(n.code,{children:"Git"}),"，日久天长，",(0,d.jsx)(n.code,{children:"Git"}),"把",(0,d.jsx)(n.code,{children:"SVN"}),"干死了，所以现在我们见到的大多数版本控制都是",(0,d.jsx)(n.code,{children:"Git"}),"，",(0,d.jsx)(n.code,{children:"SVN"}),"已经少生优生幸福一生了。"]}),"\n",(0,d.jsx)(n.p,{children:"版本控制工具是用来干啥的呢？"}),"\n",(0,d.jsx)(n.p,{children:"就是用来控制版本的。"}),"\n",(0,d.jsx)(n.p,{children:"比方说，我写了一首诗：辣条真好吃，夹馍更好吃。"}),"\n",(0,d.jsx)(n.p,{children:"然后呢，我觉得不太好，想改改，但是又不能肯定能改得更好，所以想先保存下来，那咋弄呢？"}),"\n",(0,d.jsx)(n.p,{children:"嗯，简单，我就把这首诗拍个照片保存下来，然后重新写，万一写得不好就把这照片拿出来直接在上面改就行。"}),"\n",(0,d.jsxs)(n.p,{children:["这就叫做版本控制：",(0,d.jsx)(n.strong,{children:"每次有改动，就拍个照片存起来，将来有一天想反悔，就可以找到旧照片，在旧照片上面改就行了"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Git"}),"的工作原理就跟这个类似，只不过我们叫照片，",(0,d.jsx)(n.code,{children:"Git"}),"叫快照，嗯，反正差不多。"]}),"\n",(0,d.jsxs)(n.h2,{id:"git-的工作原理",children:["Git 的工作原理",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#git-的工作原理",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["要了解",(0,d.jsx)(n.code,{children:"Git"}),"的工作原理，我们首先来了解下仓库的概念。"]}),"\n",(0,d.jsxs)(n.p,{children:["对于",(0,d.jsx)(n.code,{children:"Git"}),"来说，我们可以将我们的工作空间分为四个区域。"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["工作区：我们的代码存放的区域，比如你在",(0,d.jsx)(n.code,{children:"c:/workspace/helloworld"}),"目录下写代码，那么这个目录就是工作区。"]}),"\n",(0,d.jsxs)(n.li,{children:["暂存区：当你在工作区执行了",(0,d.jsx)(n.code,{children:"git add"}),"之后，被",(0,d.jsx)(n.code,{children:"add"}),"的文件就在暂存区了。"]}),"\n",(0,d.jsxs)(n.li,{children:["本地仓库区：当你执行了",(0,d.jsx)(n.code,{children:"git commit"}),"之后，被",(0,d.jsx)(n.code,{children:"commit"}),"的文件就在本地仓库区了。"]}),"\n",(0,d.jsxs)(n.li,{children:["远程仓库区：当你执行了",(0,d.jsx)(n.code,{children:"git push"}),"之后，被",(0,d.jsx)(n.code,{children:"push"}),"的文件就在远程仓库区了。"]}),"\n"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"其实，我们实际只有本地和远端两个区域，也就是只有工作区和远程仓库区两个区域，而暂存区和本地仓库区，是我们虚拟出来的。"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"举个例子：我要给玉皇大帝写封信。"}),"\n",(0,d.jsx)(n.p,{children:"首先，我肯定用信纸写信，那么，我正在写的那个信纸，就是工作区；等我写完后，我就放在信封里，信封就是暂存区；等我都写完了，我就装进信封放在信箱里，这个信箱，就是本地仓库区；然后等邮递员把信取走送到邮局，这个邮局，就是远程仓库区。"}),"\n",(0,d.jsxs)(n.p,{children:["现在，我们打开编辑器，新建一个项目叫做",(0,d.jsx)(n.code,{children:"helloworld"}),"，它存放在",(0,d.jsx)(n.code,{children:"c/workspace/helloworld"}),"，然后我们在这个目录下执行命令： ",(0,d.jsx)(n.code,{children:"git init"}),"，这个目录下就多了一个隐藏文件夹",(0,d.jsx)(n.code,{children:".git"}),"，这个目录就变成了一个 git 目录，也就可以在这里面进行 git 对应的操作了。"]}),"\n",(0,d.jsxs)(n.p,{children:["好，现在我们新建一个文件",(0,d.jsx)(n.code,{children:"test.java"}),"，然后执行",(0,d.jsx)(n.code,{children:"git status"}),"（查看当前 git 的状态），就会看到如下提示："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:'on branch master\n\nNo commits yet\n\nUntracked files:\n        (use "git add <file>..." to include in what will be committed)\nhello.java\n\nnothing added to commit but untracked files present (use "git add" to track)\n'})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["第一行的意思是：你当前在",(0,d.jsx)(n.code,{children:"master"}),"分支。"]}),"\n",(0,d.jsx)(n.li,{children:"第二行的意思是：当前没有提交。"}),"\n",(0,d.jsxs)(n.li,{children:["接下来的三行的意思是：",(0,d.jsx)(n.code,{children:"hello.java"}),"没有被跟踪，可以使用",(0,d.jsx)(n.code,{children:"git add"}),"来添加，添加后的文件就会被跟踪，也就是会被版本控制。"]}),"\n",(0,d.jsxs)(n.li,{children:["最后一行的意思是：没有文件被添加，但是存在没有被跟踪的文件，可以使用",(0,d.jsx)(n.code,{children:"git add"}),"来跟踪。"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["当我们初始化一个",(0,d.jsx)(n.code,{children:"git"}),"目录时，会默认创建一个叫做",(0,d.jsx)(n.code,{children:"master"}),"的分支（分支的概念我们下一章节再说）。我们可以这么理解：分支就是一个文件夹，我们在某个分支上开发，就等于代码放在一个文件夹下。"]}),"\n",(0,d.jsx)(n.p,{children:"那么，什么是跟踪呢？"}),"\n",(0,d.jsx)(n.p,{children:"跟踪指的就是：这个文件要不要进行版本控制。如果不进行跟踪，就是不进行版本控制，那么，后面你对这个文件的所有改动，git 都不进行记忆，可以理解为：拍照片时把你抹掉，不记录你的历史状态。那么，就无法把你还原到之前的状态。"}),"\n",(0,d.jsxs)(n.p,{children:["所以，我们可以执行",(0,d.jsx)(n.code,{children:"git add hello.java"}),"来跟踪这个文件，然后再执行",(0,d.jsx)(n.code,{children:"git status"}),"，就会看到如下提示："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:'On branch master\n\nNo commits yet\n\nChanges to be committed:\n        (use "git rm --cached <file>..." to unstage)\n        new file:   hello.java\n'})}),"\n",(0,d.jsx)(n.p,{children:"前两行我们不废话了，我们只看后三行。"}),"\n",(0,d.jsxs)(n.p,{children:["它的意思是：改动等待被提交，可以使用",(0,d.jsx)(n.code,{children:"git rm --cached"}),"撤销暂存，新文件",(0,d.jsx)(n.code,{children:"hello.java"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:["用人话说就是：有个新文件被暂存了，也就是可以提交了，可以使用",(0,d.jsx)(n.code,{children:"git rm --cached"}),"撤销暂存。"]}),"\n",(0,d.jsxs)(n.p,{children:["如果我们执行",(0,d.jsx)(n.code,{children:"git rm --cached hello.java"}),"撤销暂存会怎么样子呢？"]}),"\n",(0,d.jsxs)(n.p,{children:["嗯，它就会变成未跟踪状态，也就是我们刚新建文件之后的状态。好，我们直接执行",(0,d.jsx)(n.code,{children:'git commit -m "添加文件"'}),"来将这个文件提交一下，发现如下信息:"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"[master (root-commit) 837dd77] 添加文件\n1 file changed, 0 insertions(+), 0 deletions(-)\ncreate mode 100644 hello.java\n"})}),"\n",(0,d.jsxs)(n.p,{children:["它的意思就是：",(0,d.jsx)(n.code,{children:"master"}),"分支的代码已经被提交，提交的 id 是",(0,d.jsx)(n.code,{children:"837dd77"}),'，提交的信息是"添加文件"，1 个文件改动，0 个插入，0 个删除。']}),"\n",(0,d.jsxs)(n.p,{children:["然后，我们再执行",(0,d.jsx)(n.code,{children:"git status"}),"来看下："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"On branch master\nnothing to commit, working tree clean\n"})}),"\n",(0,d.jsxs)(n.p,{children:["意思很简单：当前位于",(0,d.jsx)(n.code,{children:"master"}),"分支，没有需要提交的，工作区很干净。"]}),"\n",(0,d.jsx)(n.p,{children:"那么，一次提交就完成了。"}),"\n",(0,d.jsx)(n.p,{children:"等等，你这些操作好像都是本地操作，并没有涉及到网络啊，既然有远端仓库，肯定要涉及到网络啊。"}),"\n",(0,d.jsxs)(n.p,{children:["没错，我们来创建一个远程仓库，这里我们使用 ",(0,d.jsx)(n.a,{href:"https://gitee.com/",target:"_blank",rel:"noopener noreferrer",children:"Gitee"}),"，我们在",(0,d.jsx)(n.code,{children:"Gitee"}),"中选择新建仓库："]}),"\n",(0,d.jsxs)(n.p,{children:["然后输入仓库名",(0,d.jsx)(n.code,{children:"HelloWorld"}),"，点击“创建”，就会自动生成一个远程仓库，并提示如下页面："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,d.jsxs)(n.p,{children:["我们使用",(0,d.jsx)(n.code,{children:"git config --global user.name"}),"和",(0,d.jsx)(n.code,{children:"git config --global user.email"}),"配置下用户名和邮箱，记得邮箱要验证下。"]}),"\n",(0,d.jsxs)(n.p,{children:["然后，我们直接在我们的项目目录下执行: ",(0,d.jsx)(n.code,{children:"git remote add origin xxxxx"}),"，将 xxxxx 替换为你的远程仓库，这就等价于为本地仓库配置了一个远程仓库，远程仓库就是刚刚创建的",(0,d.jsx)(n.code,{children:"HelloWorld"}),"仓库。"]}),"\n",(0,d.jsxs)(n.p,{children:["然后我们执行",(0,d.jsx)(n.code,{children:"git push -u origin master"}),"，也就是将本地仓库的代码上传到远程仓库，发现提示如下："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"Enumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 293 bytes | 293.00 KiB/s, done.\n        Total 3 (delta 0), reused 0 (delta 0)\nremote: Powered by GITEE.COM [GNK-6.4]\nTo https://gitee.com/xxxxxx/Helloworld.git\n        * [new branch]      master -> master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n"})}),"\n",(0,d.jsx)(n.p,{children:"这就是本地代码上传成功了。"}),"\n",(0,d.jsxs)(n.p,{children:["好，我们刷新下",(0,d.jsx)(n.code,{children:"Gitee"}),"的页面看看，就会发现如下："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,d.jsx)(n.p,{children:"其中可以看到我们提交的文件、提交的信息，以及提交的时间。"}),"\n",(0,d.jsxs)(n.p,{children:["好，我们点击右边的",(0,d.jsx)(n.strong,{children:"克隆/下载"}),"，然后选择",(0,d.jsx)(n.code,{children:"Https"}),"，点击复制，如下："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,d.jsxs)(n.p,{children:["然后我们在电脑上新建一个目录，在终端打开并跳转到这个目录中，执行命令",(0,d.jsx)(n.code,{children:"git clone xxxx"}),"，其中",(0,d.jsx)(n.code,{children:"xxx"}),"就是我们刚刚复制的地址，直接粘贴即可，就会发现它开始下载了，如下："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"Cloning into 'Helloworld'...\nremote: Enumerating objects: 3, done.\n        remote: Counting objects: 100% (3/3), done.\n        remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\n"})}),"\n",(0,d.jsx)(n.p,{children:"这就表示我们已经把远程仓库的代码下载下来了，我们可以直接使用这个代码了。"}),"\n",(0,d.jsxs)(n.p,{children:["好，到这里，相信你已经可以上传并下载代码到",(0,d.jsx)(n.code,{children:"Git"}),"了，那么，刚刚的那些",(0,d.jsx)(n.code,{children:"git add"}),"、",(0,d.jsx)(n.code,{children:"git commit"}),"、",(0,d.jsx)(n.code,{children:"git push"}),"操作，你是不是感觉有点乱呢？"]}),"\n",(0,d.jsx)(n.p,{children:"我们这里就来梳理下。"}),"\n",(0,d.jsx)(n.p,{children:"我们上面说过，我们的工作空间分为四个区，并且任何一个新文件都在工作区，我们就来列一下执行相关指令后代码的状态和区域。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["工作区：执行",(0,d.jsx)(n.code,{children:"git add"}),"就到暂存区。"]}),"\n",(0,d.jsxs)(n.li,{children:["暂存区：执行",(0,d.jsx)(n.code,{children:"git rm --cached"}),"就还原到工作区，执行",(0,d.jsx)(n.code,{children:"git commit"}),"就到本地仓库区。"]}),"\n",(0,d.jsxs)(n.li,{children:["本地仓库区：执行",(0,d.jsx)(n.code,{children:"git reset"}),"就还原到暂存区，执行",(0,d.jsx)(n.code,{children:"git push"}),"就到远程工作区。"]}),"\n",(0,d.jsxs)(n.li,{children:["远程仓库区：执行",(0,d.jsx)(n.code,{children:"git clone"}),"将整个仓库下载到本地，或者执行",(0,d.jsx)(n.code,{children:"git pull"}),"将变化的部分下载到本地。"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"我们把流程整理如下图："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,d.jsx)(n.p,{children:"那么，这些我都懂了，但是有的代码我不想被跟踪呢？比如我的本地配置文件。"}),"\n",(0,d.jsxs)(n.p,{children:["你可以不",(0,d.jsx)(n.code,{children:"git add"}),"啊。"]}),"\n",(0,d.jsx)(n.p,{children:"这样太麻烦了，它老是提示，烦死了。"}),"\n",(0,d.jsxs)(n.p,{children:["嗯，那我们就可以使用",(0,d.jsx)(n.code,{children:"gitignore"}),"文件了。"]}),"\n",(0,d.jsxs)(n.h2,{id:"gitignore-文件",children:["gitignore 文件",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gitignore-文件",children:"#"})]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"gitignore 文件，顾名思义，就是 git 忽视文件，让你的文件可以被 git 无视，从而不进行跟踪。"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"gitignore 文件的规则如下："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"所有空行或者以 ＃ 开头的行都会被 Git 忽略。"}),"\n",(0,d.jsx)(n.li,{children:"可以使用标准的 glob 模式匹配。"}),"\n",(0,d.jsx)(n.li,{children:"匹配模式可以以（/）开头防止递归。"}),"\n",(0,d.jsx)(n.li,{children:"匹配模式可以以（/）结尾指定目录。"}),"\n",(0,d.jsx)(n.li,{children:"要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。"}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["我们可以直接看",(0,d.jsx)(n.a,{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer",children:"官方的模版"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:["我们在",(0,d.jsx)(n.code,{children:"helloworld"}),"目录下新建一个",(0,d.jsx)(n.code,{children:".gitignore 文件"}),"，然后添加如下内容："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"world.java\n/nb\n"})}),"\n",(0,d.jsxs)(n.p,{children:["这个就意味着我们的",(0,d.jsx)(n.code,{children:"world.java"}),"文件会被无视，并且",(0,d.jsx)(n.code,{children:"/nb"}),"目录也会被无视，然后我们在项目中创建",(0,d.jsx)(n.code,{children:"world.java"}),"文件，紧接着再执行",(0,d.jsx)(n.code,{children:"git status"}),"命令，发现输出如下："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:'On branch master\nYour branch is up to date with \'origin/master\'.\n\nUntracked files:\n        (use "git add <file>..." to include in what will be committed)\n        .gitignore\n\nnothing added to commit but untracked files present (use "git add" to track)\n'})}),"\n",(0,d.jsxs)(n.p,{children:["嗯，只有",(0,d.jsx)(n.code,{children:".gitignore"}),"文件提示了，",(0,d.jsx)(n.code,{children:"world.java"}),"并没有被提示，然后我们再创建",(0,d.jsx)(n.code,{children:"nb"}),"文件夹，发现还是这样。"]}),"\n",(0,d.jsxs)(n.p,{children:["我们再把",(0,d.jsx)(n.code,{children:".gitignore"}),"文件中的",(0,d.jsx)(n.code,{children:"world.java"}),"删除，再执行",(0,d.jsx)(n.code,{children:"git status"}),"命令，发现",(0,d.jsx)(n.code,{children:"world.java"}),"文件又被提示了。"]}),"\n",(0,d.jsxs)(n.p,{children:["到这里，我们已经明白了",(0,d.jsx)(n.code,{children:"gitignore"}),"文件的用法了，这里就不再废话了。"]}),"\n",(0,d.jsxs)(n.h2,{id:"总结",children:["总结",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["本章，我们简单地介绍了",(0,d.jsx)(n.code,{children:"git"}),"的工作流程，以及",(0,d.jsx)(n.code,{children:"git"}),"工作区的概念，并且我们梳理了文件在不同区域之间的流转，最后，我们介绍了",(0,d.jsx)(n.code,{children:"gitignore"}),"文件的使用，我们再来回顾下。"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"git"}),"有四个区域：工作区、暂存区、本地仓库区、远程仓库区。"]}),"\n",(0,d.jsxs)(n.li,{children:["工作区：执行",(0,d.jsx)(n.code,{children:"git add"}),"就到暂存区。"]}),"\n",(0,d.jsxs)(n.li,{children:["暂存区：执行",(0,d.jsx)(n.code,{children:"git rm --cached"}),"就还原到工作区，执行",(0,d.jsx)(n.code,{children:"git commit"}),"就到本地仓库区。"]}),"\n",(0,d.jsxs)(n.li,{children:["本地仓库区：执行",(0,d.jsx)(n.code,{children:"git reset"}),"就还原到暂存区，执行",(0,d.jsx)(n.code,{children:"git push"}),"就到远程工作区。"]}),"\n",(0,d.jsxs)(n.li,{children:["远程仓库区：执行",(0,d.jsx)(n.code,{children:"git clone"}),"将整个仓库下载到本地，或者执行",(0,d.jsx)(n.code,{children:"git pull"}),"将变化的部分下载到本地。"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"gitignore"}),"可以用来对文件进行无视，从而让",(0,d.jsx)(n.code,{children:"git"}),"不跟踪对应的文件。"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["其实，我们只需要牢牢记住一条指令——",(0,d.jsx)(n.code,{children:"git help"}),"——即可，任何时候，如果你忘了该怎么操作，只要执行一下这条指令，你就知道下一次该干什么了。"]}),"\n",(0,d.jsxs)(n.p,{children:["最后，再给大家推荐一本免费的书籍 ",(0,d.jsx)(n.a,{href:"https://www.progit.cn/#_pro_git",target:"_blank",rel:"noopener noreferrer",children:"Git pro"}),"，有空可以看看，你对",(0,d.jsx)(n.code,{children:"git"}),"的认识就会大大提高。"]}),"\n",(0,d.jsxs)(n.p,{children:["我们下一章节就来讲一下",(0,d.jsx)(n.code,{children:"git"}),"的 GUI 工具和分支的操作，我们下一章见。"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(t,{...e})}):t(e)}let x=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%85%E4%BF%AE%E8%AF%BE%2F%E7%AC%AC30%E7%AB%A0%E2%80%94Git%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%92%8C%E5%8E%9F%E7%90%86.md"]={toc:[{text:"版本控制工具",id:"版本控制工具",depth:2},{text:"Git 的工作原理",id:"git-的工作原理",depth:2},{text:"gitignore 文件",id:"gitignore-文件",depth:2},{text:"总结",id:"总结",depth:2}],title:"第30章—Git基础：工作流程和原理",headingTitle:"第30章—Git基础：工作流程和原理",frontmatter:{}}}}]);