"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["31127"],{204709:function(n,e,a){n.exports=a.p+"static/image/102cc7e33556e8850b9f884323ce3e86.ff1be489.webp"},527417:function(n,e,a){n.exports=a.p+"static/image/6d5ad58eab7ff0393b10b689af9dadc8.976b6b81.webp"},357271:function(n,e,a){n.exports=a.p+"static/image/f05543e56001f78e6ec4b0514885d1f7.d811fa43.gif"},859852:function(n,e,a){a.r(e),a.d(e,{default:()=>B});var s=a(552676),r=a(740453);let t=a.p+"static/image/a09a6124e7fb5d2d162c39b578d1296b.1945263c.webp";var c=a(357271);let i=a.p+"static/image/6eba81215dbcfe4d029b85845b605f95.e0745e89.webp",d=a.p+"static/image/1beeafad7a7065d9140b50ccb7ddd55f.87d8af38.gif",o=a.p+"static/image/49220cdcb556c61f68335e13e1b80c37.cf6cd342.webp",l=a.p+"static/image/08d7f4fb4ff4c0a081f168e0ecafa378.a091db0b.webp",p=a.p+"static/image/561ce77a9a27a74d167592324a0d4d45.77cd4daa.webp",m=a.p+"static/image/ce8248d7eeef4c7f16cce7b1c2fe3d30.8a214530.gif",h=a.p+"static/image/8e86c305d808d5f0f4cb6eae3ba89193.3f00358a.webp",u=a.p+"static/image/77d463e2d42cbbb64a43c575029a5f8a.d4472092.gif",x=a.p+"static/image/c6c963cca152ba3feff673f62a99ae75.a70268eb.webp",f=a.p+"static/image/a3e408bd23550e7dc3c4f31f93e6a6cf.d195424a.webp",j=a.p+"static/image/1476a3d90de7368cdd60f61a9b58f0ea.82eea7b4.webp";var g=a(204709);let b=a.p+"static/image/20f5d2533ec756d88d5d5cf1ef39b111.642c3bf1.webp",w=a.p+"static/image/0a238b6d974eaabb7188114ad1f976a4.205f5de1.webp",I=a.p+"static/image/af9da43e8f05b5f7ff2dcdc02af56e68.7bf18e80.webp",v=a.p+"static/image/9756182d238240b36abbb0b18eda3b3a.1dac9b91.webp",y=a.p+"static/image/86ce8bcd476583c4151401f3c5cc2dc9.4bb120fe.webp",F=a.p+"static/image/a60139d7263845a0c127dfa7e298b3f3.9b678bd2.webp",k=a.p+"static/image/5e024c956b68ba900a16f3ec2bee8782.b8a1c685.gif",N=a.p+"static/image/e5f01c655d557931bb8feafe24fc01e0.42b6701f.gif",E=a.p+"static/image/46c78b9fd4eb647b866873ad4cf422f1.8049f970.webp",P=a.p+"static/image/231b651e5b387da80b734750934734bf.52b9c2e3.gif",_=a.p+"static/image/93748f94a0a12e2291abe4fa1d354d75.202d8008.webp";var C=a(527417);function U(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",ul:"ul",li:"li",h2:"h2"},(0,r.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"183-聊天室修改密码信息页面开发",children:["183. 聊天室：修改密码、信息页面开发",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#183-聊天室修改密码信息页面开发",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"这节继续来写修改密码、修改信息页面："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26ce08e936b34f138187ce4a2c520ced~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1208&h=844&s=41235&e=png&b=ffffff",alt:""})}),"\n",(0,s.jsx)(e.p,{children:"首先是修改密码的页面 src/pages/UpdatePassword："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import { Button, Form, Input, message } from \'antd\';\nimport { useForm } from \'antd/es/form/Form\';\nimport \'./index.css\';\nimport { useCallback } from \'react\';\nimport { Link, useNavigate } from \'react-router-dom\';\n\nexport interface UpdatePassword {\n    email: string;\n    captcha: string;\n    password: string;\n    confirmPassword: string;\n}\n\nconst layout1 = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\n\nexport function UpdatePassword() {\n    const [form] = useForm();\n    const navigate = useNavigate();\n\n    const onFinish = async (values: UpdatePassword) => {\n        console.log(values);\n    }\n\n    const sendCaptcha = async function () {\n        console.log(\'send captcha\')\n    }\n\n    return <div id="updatePassword-container">\n        <h1>聊天室</h1>\n        <Form\n            form={form}\n            {...layout1}\n            onFinish={onFinish}\n            colon={false}\n            autoComplete="off"\n        >\n            <Form.Item\n                label="用户名"\n                name="username"\n                rules={[\n                    { required: true, message: \'请输入用户名!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="邮箱"\n                name="email"\n                rules={[\n                    { required: true, message: \'请输入邮箱!\' },\n                    { type: "email", message: \'请输入合法邮箱地址!\'}\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <div className=\'captcha-wrapper\'>\n                <Form.Item\n                    label="验证码"\n                    name="captcha"\n                    rules={[{ required: true, message: \'请输入验证码!\' }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Button type="primary" onClick={sendCaptcha}>发送验证码</Button>\n            </div>\n\n            <Form.Item\n                label="密码"\n                name="password"\n                rules={[{ required: true, message: \'请输入密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                label="确认密码"\n                name="confirmPassword"\n                rules={[{ required: true, message: \'请输入确认密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                {...layout1}\n                label=" "\n            >\n                <Button className=\'btn\' type="primary" htmlType="submit">\n                    修改\n                </Button>\n            </Form.Item>\n        </Form>\n    </div>   \n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"css 部分如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-css",children:"#updatePassword-container {\n    width: 400px;\n    margin: 100px auto 0 auto;\n    text-align: center;\n}\n#updatePassword-container .btn {\n    width: 100%;\n}\n#updatePassword-container .captcha-wrapper {\n    display: flex;\n    justify-content: flex-end;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"跑起来是这样的："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后再调用下后端接口。"}),"\n",(0,s.jsx)(e.p,{children:"在 interfaces 添加这两个接口："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"export async function updatePasswordCaptcha(email: string) {\n    return await axiosInstance.get('/user/update_password/captcha', {\n        params: {\n            address: email\n        }\n    });\n}\n\nexport async function updatePassword(data: UpdatePassword) {\n    return await axiosInstance.post('/user/update_password', data);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"更改密码页面里调用下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const sendCaptcha = async function () {\n    const address = form.getFieldValue('email');\n    if(!address) {\n        return message.error('请输入邮箱地址');\n    }\n\n    try {\n        const res = await updatePasswordCaptcha(address);\n        if(res.status === 201 || res.status === 200) {\n            message.success('发送成功');\n        } \n    } catch(e: any) {\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n};\n"})}),"\n",(0,s.jsx)(e.p,{children:"发送验证码接口的调用逻辑和注册时一模一样。"}),"\n",(0,s.jsx)(e.p,{children:"更改密码接口的调用逻辑也和注册差不多："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const onFinish = async (values: UpdatePassword) => {\n    if(values.password !== values.confirmPassword) {\n        return message.error('两次密码不一致');\n    }\n    try {\n        const res = await updatePassword(values);\n\n        if(res.status === 201 || res.status === 200) {\n            message.success('密码修改成功');\n            setTimeout(() => {\n                navigate('/login');\n            }, 1500);\n        }\n    } catch(e: any) {\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n};\n"})}),"\n",(0,s.jsx)(e.p,{children:"测试下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"填入邮箱，点击发送验证码。"}),"\n",(0,s.jsx)(e.p,{children:"提示发送成功。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"邮箱里也收到了这个验证码。"}),"\n",(0,s.jsx)(e.p,{children:"然后填入新密码，点击修改密码按钮："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"提示修改成功，然后会跳到登录页面。"}),"\n",(0,s.jsx)(e.p,{children:"在登录页面用新密码登录，提示登录成功。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"这样，修改密码功能的前后端就都完成了。"}),"\n",(0,s.jsx)(e.p,{children:"然后还有一个更改个人信息的页面。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26ce08e936b34f138187ce4a2c520ced~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1208&h=844&s=41235&e=png&b=ffffff",alt:""})}),"\n",(0,s.jsx)(e.p,{children:"前面几个功能都是未登录时的，而这个修改个人信息的功能需要登录之后才能用。"}),"\n",(0,s.jsx)(e.p,{children:"而且界面上方是有公共的导航栏的。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:F,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"所以这个页面要声明一个 /index 的路由作为父级路由，然后 /index/update_info 作为子路由。"}),"\n",(0,s.jsx)(e.p,{children:"添加一个 pages/index/index.tsx 页面"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import { UserOutlined } from "@ant-design/icons";\nimport { Outlet } from "react-router-dom";\nimport \'./index.css\';\n\nexport function Index() {\n    return <div id="index-container">\n        <div className="header">\n            <h1>聊天室</h1>\n            <UserOutlined className="icon"/>\n        </div>\n        <div className="body">\n            <Outlet></Outlet>\n        </div>\n    </div>\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"这里用到了 antd 的 icon 组件，需要安装用到的包："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"npm install @ant-design/icons --save\n"})}),"\n",(0,s.jsx)(e.p,{children:"css 如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-css",children:"#index-container{\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n#index-container .header{\n    height: 80px;\n    border-bottom: 1px solid #aaa;\n    line-height: 80px;\n    display: flex;\n    justify-content: space-between;\n    padding: 0 20px;\n}\n#index-container h1{\n    margin: 0;\n}\n\n#index-container .icon {\n    font-size: 40px;\n    margin-top: 20px;\n}\n#index-container .body{\n    flex: 1;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"整体是竖直的 flex 布局，高度 100vh，上面 80px 下面 flex:1"}),"\n",(0,s.jsx)(e.p,{children:"然后 header 部分是 水平的 flex 布局。"}),"\n",(0,s.jsx)(e.p,{children:"把它添加到 /index 的路由，并且添加两个子路由："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"{\n    path: \"/\",\n    element: <Index></Index>,\n    children: [\n      {\n        path: 'aaa',\n        element: <div>aaa</div>\n      },\n      {\n        path: 'bbb',\n        element: <div>bbb</div>\n      }\n    ]\n},\n"})}),"\n",(0,s.jsx)(e.p,{children:"测试下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)("img",{src:w,alt:""}),"\n",(0,s.jsx)("img",{src:b,alt:""})]}),"\n",(0,s.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(e.p,{children:"然后在下面添加 update_info 路由，并实现 page/update_info/UpdateInfo 组件："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"{\n    path: 'update_info',\n    element: <UpdateInfo/>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"写下 pages/UpdateInfo/index.tsx 这个组件"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import { Button, Form, Input, message } from \'antd\';\nimport { useForm } from \'antd/es/form/Form\';\nimport { useCallback } from \'react\';\nimport \'./update_info.css\';\nimport { useNavigate } from \'react-router-dom\';\n\nexport interface UserInfo {\n    headPic: string;\n    nickName: string;\n    email: string;\n    captcha: string;\n}\n\nconst layout1 = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\n\nexport function UpdateInfo() {\n    const [form] = useForm();\n    const navigate = useNavigate();\n\n    const onFinish = async (values: UserInfo) => {\n        \n    };\n\n    const sendCaptcha = async function () {\n    };\n\n    return <div id="updateInfo-container">\n        <Form\n            form={form}\n            {...layout1}\n            onFinish={onFinish}\n            colon={false}\n            autoComplete="off"\n        >\n            <Form.Item\n                label="头像"\n                name="headPic"\n                rules={[\n                    { required: true, message: \'请输入头像!\' },\n                ]}\n            >\n                <Input/>\n            </Form.Item>\n\n            <Form.Item\n                label="昵称"\n                name="nickName"\n                rules={[\n                    { required: true, message: \'请输入昵称!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label="邮箱"\n                name="email"\n                rules={[\n                    { required: true, message: \'请输入邮箱!\' },\n                    { type: "email", message: \'请输入合法邮箱地址!\'}\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <div className=\'captcha-wrapper\'>\n                <Form.Item\n                    label="验证码"\n                    name="captcha"\n                    rules={[{ required: true, message: \'请输入验证码!\' }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Button type="primary" onClick={sendCaptcha}>发送验证码</Button>\n            </div>\n\n            <Form.Item\n                {...layout1}\n                label=" "\n            >\n                <Button className=\'btn\' type="primary" htmlType="submit">\n                    修改密码\n                </Button>\n            </Form.Item>\n        </Form>\n    </div>   \n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"和前几个页面差不多。"}),"\n",(0,s.jsx)(e.p,{children:"css："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-css",children:"#updateInfo-container {\n    width: 400px;\n    margin: 50px auto 0 auto;\n    text-align: center;\n}\n#updateInfo-container .btn {\n    width: 100%;\n}\n#updateInfo-container .captcha-wrapper {\n    display: flex;\n    justify-content: flex-end;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"访问 /update_info 可以看到这个页面："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"这个页面涉及到 3 个接口："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"/user/info 查询用户信息的接口，用来回显数据"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"/user/update 修改用户信息的接口，用来做修改"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"/user/update/captcha 发送验证码的接口"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"首先在 interfaces.ts 里添加这 3 个接口："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"export async function getUserInfo() {\n    return await axiosInstance.get('/user/info');\n}\n\nexport async function updateInfo(data: UserInfo) {\n    return await axiosInstance.post('/user/update', data);\n}\n\nexport async function updateUserInfoCaptcha() {\n    return await axiosInstance.get('/user/update/captcha');\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"然后我们先做用户信息的回显："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"useEffect(() => {\n    async function query() {\n        const res = await getUserInfo();\n\n        if(res.status === 201 || res.status === 200) {\n            console.log(res.data);\n        }\n    }\n    query();\n}, []);\n"})}),"\n",(0,s.jsx)(e.p,{children:"调用 getUserInfo 接口，返回数据后打印下。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"这个接口的访问需要登录，也就是要从 localStorage 里取出 token 放到 header 里。"}),"\n",(0,s.jsx)(e.p,{children:"这种携带 header 的通用逻辑可以放在 axios 的 interceptor 里做。"}),"\n",(0,s.jsx)(e.p,{children:"并且接口返回 token 的 header 更新本地 token 的逻辑。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"\nconst axiosInstance = axios.create({\n    baseURL: 'http://localhost:3005/',\n    timeout: 3000\n});\n\naxiosInstance.interceptors.request.use(function (config) {\n    const accessToken = localStorage.getItem('token');\n\n    if(accessToken) {\n        config.headers.authorization = 'Bearer ' + accessToken;\n    }\n    return config;\n})\n\naxiosInstance.interceptors.response.use(\n    (response) => {\n        const newToken = response.headers['token'];\n        if(newToken) {\n            localStorage.setItem('token', newToken);\n        }\n        return response;\n    }, async (error) => {\n        if(!error.response) {\n            return Promise.reject(error);\n        }\n        let { data } = error.response;\n        if (data.statusCode === 401) {\n            message.error(data.message);\n\n            setTimeout(() => {\n                window.location.href = '/login';\n            }, 1500);\n        } else {\n            return Promise.reject(error);\n        }\n    }\n)\n"})}),"\n",(0,s.jsx)(e.p,{children:"这段逻辑就是在每次发请求之前，在 header 里加上 authorization，带上 token。"}),"\n",(0,s.jsx)(e.p,{children:"当响应的 header 带有 token，就更新本地 token。"}),"\n",(0,s.jsx)(e.p,{children:"如果返回的是 401 的状态码，就提示错误，跳转登录页。"}),"\n",(0,s.jsx)(e.p,{children:"访问 /update_info 页面"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"提示没登录，然后跳转到了登录页。"}),"\n",(0,s.jsx)(e.p,{children:"给用户图标添加跳到 /update_info 的链接："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"我们登录下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"再访问就不会 /update_info 跳转了："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后可以看到控制台打印了当前登录用户的信息："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后我们做下回显："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"useEffect(() => {\n    async function query() {\n        const res = await getUserInfo();\n\n        if(res.status === 201 || res.status === 200) {\n            console.log(res.data);\n\n            form.setFieldValue('headPic', res.data.headPic);\n            form.setFieldValue('nickName', res.data.nickName);\n            form.setFieldValue('email', res.data.email);\n            form.setFieldValue('username', res.data.username);\n        }\n    }\n    query();\n}, []);\n"})}),"\n",(0,s.jsx)(e.p,{children:"这样，回显的数据就有了："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后实现发送验证码："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const sendCaptcha = async function () {\n    try {\n        const res = await updateUserInfoCaptcha();\n        if(res.status === 201 || res.status === 200) {\n            message.success('发送成功');\n        } \n    } catch(e: any) {\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n};\n"})}),"\n",(0,s.jsx)(e.p,{children:"然后是更新接口："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const onFinish = async (values: UserInfo) => {\n    try {\n        const res = await updateInfo(values);\n        if(res.status === 201 || res.status === 200) {\n            message.success('用户信息更新成功');\n        }\n    } catch(e: any) {\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n};\n"})}),"\n",(0,s.jsx)(e.p,{children:"测试下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"修改信息，点击发送验证码："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"填入验证码，点击修改，提示用户信息更新成功。"}),"\n",(0,s.jsx)(e.p,{children:"去数据库里看一下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"确实修改成功了。"}),"\n",(0,s.jsx)(e.p,{children:"这样，修改用户信息的流程就走完了。"}),"\n",(0,s.jsx)(e.p,{children:"案例代码在小册仓库："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-frontend",target:"_blank",rel:"noopener noreferrer",children:"前端代码"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-backend",target:"_blank",rel:"noopener noreferrer",children:"后端代码"})}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:["总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"这节我们实现了修改密码、修改个人信息这两个页面。"}),"\n",(0,s.jsx)(e.p,{children:"添加了 axios 的拦截器来实现 token 自动携带和刷新 token，并且在接口返回 401 的时候跳转登录页。"}),"\n",(0,s.jsx)(e.p,{children:"这样，用户端的用户相关功能就都完成了。"})]})}function A(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(U,{...n})}):U(n)}let B=A;A.__RSPRESS_PAGE_META={},A.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F183.%20%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%9A%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E3%80%81%E4%BF%A1%E6%81%AF%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"183. 聊天室：修改密码、信息页面开发",headingTitle:"183. 聊天室：修改密码、信息页面开发",frontmatter:{}}}}]);