"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["61696"],{327037:function(e,n,r){r.r(n),r.d(n,{default:()=>T});var s=r(552676),t=r(740453);let d=r.p+"static/image/ff670c49e516fd966f937649c736deb8.f7986cec.webp",o=r.p+"static/image/1d9ce7153d4e7dce86eb961a2d3398a9.560966bc.webp",a=r.p+"static/image/3a0c4ae9c515a2fddd443e5f6afcc4d9.35b76b4f.webp",l=r.p+"static/image/6e002ab978746d12f755b7139c5945ee.7d197b7c.webp",i=r.p+"static/image/b3e394b30e4c92439de9881bed7b4e69.37b3a085.webp",c=r.p+"static/image/1723452da92956a3479003e3b446eb19.e6556f42.webp",m=r.p+"static/image/98653cb1d1fc762136f0d9c0ee1bce80.49307d20.webp",u=r.p+"static/image/d8e730f39ecf0a256f72994f020368aa.28a7bd86.webp",h=r.p+"static/image/350187adcb67952c8c5c434f0d3f7505.0c4b80fb.webp",p=r.p+"static/image/d4ea306fdbeb6ebcf98cc860a1d35ec7.96a79151.webp";function x(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",blockquote:"blockquote",code:"code",img:"img",strong:"strong",pre:"pre",h3:"h3",ul:"ul",li:"li",h4:"h4"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"10业务篇-简历制作之工具条模块与简历模版之间通信",children:["10.业务篇-简历制作之工具条模块与简历模版之间通信",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10业务篇-简历制作之工具条模块与简历模版之间通信",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"工具条交互功能优化",children:["工具条交互功能优化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#工具条交互功能优化",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上一章节我们仅是完成了简历制作入口的静态页面，一次性展示所有的工具条模块，其实这种交互是比较呆板僵硬的，接下来我们对它进行一个优化。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["本章节篇幅较长，但也相对重要，其中代码块均以伪代码实现，具体代码实现移步 ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-10",target:"_blank",rel:"noopener noreferrer",children:"chapter-10"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们将所有的工具条模块进行区分：",(0,s.jsx)(n.code,{children:"已添加模块"}),"与",(0,s.jsx)(n.code,{children:"未添加模块"}),"。怎么理解呢？我画几张图进行解释。"]}),"\n",(0,s.jsx)(n.p,{children:"我们的简历模版信息是与 “已添加模块” 同步的，如下图所示，“已添加模块”中有：个人信息、技能清单、联系方式等，那么在模版上，也只会展示这三个模块的数据信息。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"当我们点击“获奖证书”后，将其加到“已添加模块”中，此时简历模板会同时展示获奖证书对应的数据。同理，当我们删除“已添加模块”中的某个模块后，简历模版上不展示删除的模块信息。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"了解交互效果后，接下来我们来实现功能。透过问题看本质，让我们回到简历制作最开始的阶段：一张空白的 A4 纸，所有模块都是未添加的状态，此时此刻，我们的简历模板什么数据都不展示。"}),"\n",(0,s.jsxs)(n.p,{children:["所以我们得到一个有效信息：",(0,s.jsx)(n.strong,{children:"所有工具条模块都是未添加的"}),"，但我们期望，“个人信息”模块是默认加入的，为什么呢？简历最重要的是什么？是你的工作经验还是你的技能清单？是你在学校的优秀表现还是你做了多少牛逼的项目？都不是，最重要的往往是最基础的，也就是个人基础信息（姓名、电话等）。"]}),"\n",(0,s.jsxs)(n.p,{children:["如何区分已添加与未添加呢？让我们修改前边写的工具条数据，修改 ",(0,s.jsx)(n.code,{children:"/constants/resume.ts"})," 文件"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/renderer/common/constants/resume.ts\nconst RESUME_TOOLBAR_LIST: TSResume.SliderItem[] = [\n  {\n    key: RESUME_TOOLBAR_MAPS.personal,\n    name: '个人信息',\n    require: true, // \uD83D\uDC48 添加该字段，为 true 则表示必选项\n    summary: '更好介绍自己，机会会更多',\n  },\n  {\n    key: RESUME_TOOLBAR_MAPS.education,\n    name: '教育信息',\n    require: false, // \uD83D\uDC48 添加该字段，为 true 则表示必选项\n    summary: '介绍你的学校和专业信息',\n  },\n  // ...\n];\n\nexport default RESUME_TOOLBAR_LIST;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们对每条数据添加了一个 require 属性，表示这个模块在初始时是否默认追加到“已添加模块”中，接下来我们将 ",(0,s.jsx)(n.code,{children:"ResumeToolbar"})," 的 index.tsx 文件进行改造（下面为伪代码）"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'function ResumeToolbar() {\n  // ...\n  // \uD83D\uDC47 定义已添加模块与未添加模块\n  const [addToolbarList, setAddToolbarList] = useState<TSResume.SliderItem[]>([]);\n  const [unAddToolbarList, setUnAddToolbarList] = useState<TSResume.SliderItem[]>([]);\n\n  // \uD83D\uDC47 在生命周期中，根据 require 字段，分别加入对应的数据源\n  useEffect(() => {\n    if (RESUME_TOOLBAR_LIST.length > 0) {\n      let _addToolbarList: TSResume.SliderItem[] = [];\n      let _unAddToolbarList: TSResume.SliderItem[] = [];\n      RESUME_TOOLBAR_LIST.forEach((s: TSResume.SliderItem) => {\n        if (s.require) _addToolbarList.push(s);\n        if (!s.require) _unAddToolbarList.push(s);\n      });\n      setAddToolbarList(_addToolbarList);\n      setUnAddToolbarList(_unAddToolbarList);\n    }\n  }, []);\n\n  return (\n    <div styleName="slider">\n      <MyScrollBox maxHeight={height - 180}>\n        {!!addToolbarList.length && (\n          <div styleName="module">\n            // 已添加模块\n            <div styleName="content">\n              {addToolbarList.map((addSlider: TSResume.SliderItem) => {\n                // 遍历展示\n              })}\n            </div>\n          </div>\n        )}\n        {!!unAddToolbarList.length && (\n          <div styleName="module">\n            // 未添加模块\n            <div styleName="content">\n              {unAddToolbarList.map((unAddSlider: TSResume.SliderItem) => {\n                // 遍历展示\n              })}\n            </div>\n          </div>\n        )}\n      </MyScrollBox>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"下图为实现效（左侧一片黑是因为我将简历模板隐藏，为了直观突出工具条效果）"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h3,{id:"从未添加到已添加实现",children:["从未添加到已添加实现",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#从未添加到已添加实现",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"接下来我们需要实现，当点击“未添加模块”中的某条 Item 时，将其添加到“已添加模块”，并同时把“未添加模块”中点击的 Item 删除。如下图所示，下图是一个添加过程。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"我们来编写代码，为每一条未添加的模块注册一个 onClick 事件，具体实现看下面代码"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 添加模块\nconst onAddSliderAction = (moduleToolbar: TSResume.SliderItem) => {\n  // 1. 获取已添加模块的所有 key 值\n  const addKeysList = addToolbarList.map((s: TSResume.SliderItem) => s.key);\n\n  let nextAddToolbarList = [...Array.from(addToolbarList)];\n  // 2. 如果未包含当前要添加的模块key，则加入\n  if (!addKeysList.includes(moduleToolbar.key)) {\n    nextAddToolbarList = nextAddToolbarList.concat(moduleToolbar);\n  }\n  setAddToolbarList(nextAddToolbarList);\n\n  const nextUnAddToolbarList = [...Array.from(unAddToolbarList)];\n  // 3. 如果在未加添加模块中还存在此模块key，则删除\n  const findIndex = nextUnAddToolbarList.findIndex((s) => s.key === moduleToolbar.key);\n  if (findIndex > -1) nextUnAddToolbarList.splice(findIndex, 1);\n  setUnAddToolbarList(nextUnAddToolbarList);\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"从已添加删除",children:["从已添加删除",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#从已添加删除",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"既然我们实现添加逻辑，与之对应的就是删除逻辑，当点击“已添加模块”中的某条 Item 时，将其从“已添加模块”中删除，并同时把它添加到“未添加模块”中。如下图所示，下图是一个删除过程。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["需要明确的一点是，我们在常量文件中，对于工具条数据的每一条都添加了 ",(0,s.jsx)(n.code,{children:"require"})," 字段，意味着当 require 为 true 时，这是",(0,s.jsx)(n.code,{children:"必选项"}),"模块，也就是无法删除。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"明确必选项不能删除后，删除逻辑的就不再是难事了，小伙伴们私下自己实现删除逻辑。"}),"\n",(0,s.jsxs)(n.h3,{id:"抽离方法",children:["抽离方法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#抽离方法",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"当你把上面的添加模块、删除模块写完之后，仔细琢磨，你会发现一个规律，那就是："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"删除：在数组中找到目标元素，然后删掉，返回删除之后的数组"}),"\n",(0,s.jsx)(n.li,{children:"添加：在数组中查找是否已添加此元素，没有添加过就追加在数组尾部，返回添加之后的数组"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"既然如此，作为一名有追求的程序员，我们能不能写成一个业务层面的 utils 工具方法呢？"}),"\n",(0,s.jsx)(n.p,{children:"很明显是可行的，我们在 ResumeToolbar 下新增一个 utils.ts 文件，我们来编写一下此文件"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/renderer/container/resume/ResumeToolbar/utils.ts\n/**\n * @description 添加工具条模块\n * @param {TSResume.SliderItem[]} prevToolbarList 上一轮\n * @param {TSResume.SliderItem} currentToolbar 当前目标模块\n * @returns {TSResume.SliderItem[]} nextToolbarList 下一轮\n */\nexport const onAddToolbar = (\n  prevToolbarList: TSResume.SliderItem[],\n  currentToolbar: TSResume.SliderItem\n): TSResume.SliderItem[] => {\n  const addKeys = prevToolbarList.map((s: TSResume.SliderItem) => s.key);\n  let nextToolbarList = [...Array.from(prevToolbarList)];\n  if (!addKeys.includes(currentToolbar.key)) {\n    nextToolbarList.push(currentToolbar);\n  }\n  return nextToolbarList;\n};\n\n/**\n * @description 删除工具条模块\n * @param {TSResume.SliderItem[]} prevToolbarList 上一轮\n * @param {TSResume.SliderItem} currentToolbar 当前目标模块\n * @returns {TSResume.SliderItem[]} nextToolbarList 下一轮\n */\nexport const onDeleteToolbar = (\n  prevToolbarList: TSResume.SliderItem[],\n  currentToolbar: TSResume.SliderItem\n): TSResume.SliderItem[] => {\n  const nextToolbarList = [...Array.from(prevToolbarList)];\n  const findIndex = nextToolbarList.findIndex((s: TSResume.SliderItem) => s.key === currentToolbar.key);\n  if (findIndex > -1) {\n    nextToolbarList.splice(findIndex, 1);\n  }\n  return nextToolbarList;\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"这样的好处是：在业务逻辑上，我们不用关心它是如何删除、如何新增，只需要调用封装好的方法，就能实现新增、删除功能，至于如何实现，感兴趣的人再进入到对应文件查看具体代码。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/renderer/container/resume/ResumeToolbar/index.tsx\n\n// \uD83D\uDC47 改造后的逻辑\nimport { onAddToolbar, onDeleteToolbar } from './utils';\n\n// 添加模块\nconst onAddSliderAction = (moduleToolbar: TSResume.SliderItem) => {\n  const nextAddSliderList = onAddToolbar(addToolbarList, moduleToolbar);\n  setAddToolbarList(nextAddSliderList);\n  const nextUnAddSliderList = onDeleteToolbar(unAddToolbarList, moduleToolbar);\n  setUnAddToolbarList(nextUnAddSliderList);\n};\n\n// 删除模块\nconst onDeleteSliderAction = (moduleSlider: TSResume.SliderItem) => {\n  const nextAddSliderList = onDeleteToolbar(addToolbarList, moduleSlider);\n  setAddToolbarList(nextAddSliderList);\n  const nextUnAddSliderList = onAddToolbar(unAddToolbarList, moduleSlider);\n  setUnAddToolbarList(nextUnAddSliderList);\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"工具条与模版之间的通信",children:["工具条与模版之间的通信",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#工具条与模版之间的通信",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"虽然我们实现了工具条模块功能和优化交互体验，但从始至终，一切都是我们“单相思”，我们在 ResumeToolbar 组件中做的任何操作，是不被 ResumeContent 简历内容组件感知的。一直以来都是暗恋，那么接下来，我们需要“公开表白”了，我们要让 ResumeContent 知道，我们为它做了什么。"}),"\n",(0,s.jsxs)(n.h3,{id:"redux-记录数据",children:["redux 记录数据",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redux-记录数据",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们期望，工具条的“已添加模块”能与简历上展示的信息同步。这里我们在 redux 中添加一个数据段，用于存储我们当前“已添加模块”的所有 key。"}),"\n",(0,s.jsxs)(n.p,{children:["进入 ",(0,s.jsx)(n.code,{children:"renderer/store"})," 中，新增一个 templateModel.ts 文件，我们来修改此文件"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const templateModel: TSRcReduxModel.Props<TStore> = {\n  namespace: 'templateModel',\n  openSeamlessImmutable: true,\n  state: {\n    resumeToolbarKeys: [], // 选中工具条模块的keys\n  },\n};\n\nexport default templateModel;\n"})}),"\n",(0,s.jsx)(n.p,{children:"不要忘记了，需要将此 model 注入到 redux 中"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/renderer/store/index.ts\n\nimport globalModel from './globalModel';\nimport resumeModel from './resumeModel';\n// \uD83D\uDC47 引入刚新增的 model\nimport templateModel from './templateModel';\n\nconst reduxModel = new RcReduxModel([globalModel, resumeModel, templateModel]);\n\n// ...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们需要将“已添加模块”中的工具条 key 追加到 resumeToolbarKeys 中，前面说过了，如果想修改 redux 中的数据值，我们只需要通过发起一个 Action，且 ",(0,s.jsx)(n.a,{href:"https://github.com/SugarTurboS/rc-redux-model",target:"_blank",rel:"noopener noreferrer",children:"rc-redux-model"}),"  提供了一个通用的 API，接下来我们改造之前的逻辑代码。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/renderer/container/resume/ResumeToolbar/index.tsx\nimport { useDispatch } from 'react-redux';\n\nfunction ResumeToolbar() {\n  // 省略代码 ...\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (RESUME_TOOLBAR_LIST.length > 0) {\n      // \uD83D\uDC47 将已添加模块的所有keys进行修改\n      changeResumeToolbarKeys(_addToolbarList.map((s) => s.key));\n    }\n  }, []);\n\n  // \uD83D\uDC47 修改 redux 中的值，使用 rc-redux-model 提供的 API\n  const changeResumeToolbarKeys = (moduleKeys: string[]) => {\n    if (moduleKeys.length > 0) {\n      dispatch({\n        type: 'templateModel/setStore',\n        payload: {\n          key: 'resumeToolbarKeys',\n          values: moduleKeys,\n        },\n      });\n    }\n  };\n\n  // 添加模块\n  const onAddSliderAction = (moduleToolbar: TSResume.SliderItem) => {\n    // 省略代码 ... \uD83D\uDC47 将已添加模块的所有keys进行修改\n    changeResumeToolbarKeys(nextAddSliderList.map((s: TSResume.SliderItem) => s.key));\n  };\n\n  // 删除模块\n  const onDeleteSliderAction = (moduleSlider: TSResume.SliderItem) => {\n    // 省略代码 ... \uD83D\uDC47 将已添加模块的所有keys进行修改\n    changeResumeToolbarKeys(nextAddSliderList.map((s: TSResume.SliderItem) => s.key));\n  };\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"我们如何验证是不是真的将其添加到 redux 了呢？通过控制面板，我们可以看到 redux 打印的数据，假设我将“工作期望”添加到“已添加模块”，那么此刻的 redux 数据应该是存在该 key 值的。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"与高中谈恋爱一样，我们写好了情书（写好了 Redux 值），需要将这封情书送到她手上（让 ResumeContent 组件接收到数据），借助 useSelector API 让它帮我们传递情书。"}),"\n",(0,s.jsx)(n.p,{children:"我们进入到 /ResumeContent/UseTemplate/templateOne，修改它的入口文件 index.tsx"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'/**\n * @desc 模板1\n * @author pengdaokuan\n */\nimport React from \'react\';\nimport \'./index.less\';\n// 引入一系列的组件代码，在此省略\nimport { useSelector } from \'react-redux\';\nimport { RESUME_TOOLBAR_MAPS } from \'@common/constants/resume\';\n\nfunction TemplateOne() {\n  // \uD83D\uDC47 获取简历信息数据\n  const base: TSResume.Base = useSelector((state: any) => state.resumeModel.base);\n  // \uD83D\uDC47 获取工具条模块 keys\n  const resumeToolbarKeys: string[] = useSelector((state: any) => state.templateModel.resumeToolbarKeys);\n\n  // 必须带有id，以方便导出时获取DOM元素内容\n  return (\n    <div styleName="a4-box">\n      <div styleName="flex container" id="visPdf">\n        {/* 左侧 */}\n        <div styleName="left">\n          <div styleName="avatar">\n            <Avatar />\n          </div>\n          <div styleName="fillColor" />\n          <div styleName="baseData">\n            <BaseInfo />\n            {resumeToolbarKeys.includes(RESUME_TOOLBAR_MAPS.contact) && <Contact />}\n            {resumeToolbarKeys.includes(RESUME_TOOLBAR_MAPS.workPrefer) && <Job />}\n            {resumeToolbarKeys.includes(RESUME_TOOLBAR_MAPS.certificate) && <Certificate />}\n          </div>\n        </div>\n        {/* 内容 */}\n        <div styleName="center">\n          {(resumeToolbarKeys.includes(RESUME_TOOLBAR_MAPS.evaluation) || base?.username) && <Synopsis />}\n          <div styleName="listData">\n            {resumeToolbarKeys.includes(RESUME_TOOLBAR_MAPS.skill) && <Skill />}\n            {resumeToolbarKeys.includes(RESUME_TOOLBAR_MAPS.schoolExperience) && <Post />}\n            {resumeToolbarKeys.includes(RESUME_TOOLBAR_MAPS.projectExperience) && <Project />}\n            {resumeToolbarKeys.includes(RESUME_TOOLBAR_MAPS.workExperience) && <Work />}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TemplateOne;\n'})}),"\n",(0,s.jsx)(n.p,{children:"如上所示，我们在使用简历处，根据当前“已添加模块”的工具条同步展示简历的数据，最终效果如下"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h3,{id:"发布订阅实现弹窗显示",children:["发布订阅实现弹窗显示",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#发布订阅实现弹窗显示",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上面我们实现了数据展示之间的同步，接下来，我们到了最为重要的交互环节，点击模块，弹窗显示。"}),"\n",(0,s.jsx)(n.p,{children:"我们期望在“已添加模块”中，当点击某条模块 Item 时，显示弹窗，弹窗内容为当前该模块对应的简历数据。让我们思考一下什么方式实现会比较优雅？"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["方式一：",(0,s.jsx)(n.code,{children:"数据驱动方式"}),"，在 redux 中定义一个值，暂且叫它 form_name，当点击某 Item 时，就修改该值，显示弹窗，当关闭弹窗之后，清空该值。简历内容组件监听此值，当值发生改变：","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"值为空，表示当前弹窗关闭，不需要显示弹窗"}),"\n",(0,s.jsx)(n.li,{children:"值非空，但发生改变，显示相应的表单弹窗"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["方式二：",(0,s.jsx)(n.code,{children:"事件驱动方式"}),"，通过发布订阅模式，当点击某 Item 时，发布事件，在简历内容组件订阅此事件，通过传参形式获取当前需要显示的表单弹窗名称，从而显示相应的弹窗。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"到底采用数据驱动还是事件驱动，经过再三思考，还是采用事件驱动方式，最主要的一个原因在于，我们不用在 redux 中维护一个数据值，且这个数据值需要频繁修改。"}),"\n",(0,s.jsxs)(n.p,{children:["我们如何实现一套发布订阅呢？可能小伙伴们担心：不会需要我们写一套 EventEmitter 吧？duck不必，",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent",target:"_blank",rel:"noopener noreferrer",children:"EventTarget.dispatchEvent"})," 支持我们向一个指定的事件目标派发一个事件（更多请移步文档），多说无益，直接亮剑吧。"]}),"\n",(0,s.jsx)(n.p,{children:"在 renderer/common 文件夹下，新增一个文件夹，取名为 messager，我们来实现一下此通讯器"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/renderer/common/messager/index.ts\nexport const MESSAGE_EVENT_NAME_MAPS = {\n  OPEN_FORM_MODAL: 'open_form_modal', // 简历模块选择\n};\n\nclass Messager {\n  send = (eventName: string, payload: any) => {\n    document.dispatchEvent(\n      new CustomEvent(eventName, {\n        detail: {\n          payload: payload,\n        },\n      })\n    );\n  };\n  receive = (e: any, messageHandler: Function) => {\n    if (messageHandler) {\n      const payload = e?.detail?.payload;\n      messageHandler(payload);\n    }\n  };\n}\n\nexport default new Messager();\n"})}),"\n",(0,s.jsx)(n.p,{children:"如上所示，我们实现了一个 send 方法和 receive 方法，同时维护了一套通信事件名称，那么在业务端该如何使用呢？"}),"\n",(0,s.jsxs)(n.h4,{id:"点击模块发送事件",children:["点击模块发送事件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#点击模块发送事件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们回到 resume/ResumeToolbar 组件，我们为“已添加模块”的每一条Item注册 onClick 事件"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// app/renderer/container/resume/ResumeToolbar/index.tsx\nimport Messager, { MESSAGE_EVENT_NAME_MAPS } from \'@common/messager\';\n\nfunction ResumeToolbar() {\n  // 省略代码...\n  return (\n    // \uD83D\uDC47 是伪代码\n    {addToolbarList.map((addSlider: TSResume.SliderItem) => {\n       return (\n          <div styleName="box" key={addSlider.key} onClick={() => {\n            // \uD83D\uDC47 事件发送\n             Messager.send(MESSAGE_EVENT_NAME_MAPS.OPEN_FORM_MODAL, {\n               form_name: addSlider.key,\n            });\n          }}>\n             <div styleName="info">\n               {!addSlider.require && (\n                 <div styleName="action">\n                    <i styleName="delete" onClick={(e: React.MouseEvent) => {\n                        // \uD83D\uDC47 这里需要阻止冒泡！！！\n                        e.stopPropagation && e.stopPropagation();\n                        onDeleteSliderAction(addSlider);\n                     }}/>\n                  </div>\n               )}\n             </div>\n         </div>\n       );\n    })}\n  );\n}\n\nexport default ResumeToolbar;\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"最为重要的就是在删除事件上，需要阻止冒泡"}),"，否则点击删除之后，事件会冒泡，导致的结果就是：我点击删除，然而删除后还给我通过通信器 Messager 发了一个事件。"]}),"\n",(0,s.jsxs)(n.h4,{id:"简历内容组件订阅事件",children:["简历内容组件订阅事件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简历内容组件订阅事件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们在 ResumeContent 组件的入口文件 index.tsx 中，订阅此事件，并获取传参值: form_name"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/renderer/container/resume/ResumeContent/index.tsx\nimport Messager, { MESSAGE_EVENT_NAME_MAPS } from '@common/messager';\n\nfunction ResumeContent() {\n  // \uD83D\uDC47 监听此事件\n  useEffect(() => {\n    document.addEventListener(MESSAGE_EVENT_NAME_MAPS.OPEN_FORM_MODAL, onReceive);\n    return () => {\n      document.removeEventListener(MESSAGE_EVENT_NAME_MAPS.OPEN_FORM_MODAL, onReceive);\n    };\n  }, []);\n  /**\n   * @description 接收订阅事件的传参\n   */\n  const onReceive = (e: any) => {\n    Messager.receive(e, (data: any) => {\n      console.log('发布订阅，传参值为: ', data);\n    });\n  };\n  \n  return (\n    // ...\n  )\n}\nexport default ResumeContent;\n"})}),"\n",(0,s.jsx)(n.p,{children:"刷新一下页面，此时我们点击一下“已添加模块”中的工具条，看看打印的数据是否正确"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"没有问题，这表示我们通过发布订阅实现工具条模块与简历模版的消息通信是可行的。"}),"\n",(0,s.jsxs)(n.h3,{id:"弹窗的显示",children:["弹窗的显示",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#弹窗的显示",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们能拿到 form_name 值，意味着，我们知道当前目标模块是哪个了，接下来实现对应弹窗的现实。"}),"\n",(0,s.jsx)(n.p,{children:"这属于通用的表单弹窗组件，不管哪个简历模版，对于信息的录入都是通过弹窗交互实现的，所以这是业务通用的组件，为此，我们在 /container/resume/ResumeContent 文件夹下新增一个文件夹，取名为：UseForm，寓意着使用的表单组件。接下来我们简单实现一下弹窗显示功能。"}),"\n",(0,s.jsx)(n.p,{children:"在 UseForm 下新增个人信息表单弹窗，取名为：Personal，我们来编写一下"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// app/renderer/container/resume/ResumeContent/UseForm/Personal/index.tsx\nimport React from \'react\';\nimport \'./index.less\';\nimport MyModal from \'@common/components/MyModal\';\nimport MyInput from \'@common/components/MyInput\';\nimport { useSelector } from \'react-redux\';\n\nfunction Personal() {\n  const hobby: string = useSelector((state: any) => state.resumeModel.hobby);\n  const base: TSResume.Base = useSelector((state: any) => state.resumeModel.base);\n  return (\n    <MyModal.Dialog title="个人信息">\n      <div styleName="form">\n        <div styleName="flex">\n          <div styleName="left">\n            <span styleName="require">*</span>姓 名 ：\n          </div>\n          <div styleName="right">\n            <MyInput onChange={(e) => {}} value={base?.username || \'\'} placeholder="请输入姓名" allowClear={true} />\n          </div>\n        </div>\n      </div>\n    </MyModal.Dialog>\n  );\n}\n\nexport default Personal;\n'})}),"\n",(0,s.jsx)(n.p,{children:"紧接着，我们前往 ResumeContent 中，引入此组件（伪代码）"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import Messager, { MESSAGE_EVENT_NAME_MAPS } from '@common/messager';\nimport { RESUME_TOOLBAR_MAPS } from '@common/constants/resume';\n\n// \uD83D\uDC47 引入我们写的表单弹窗组件\nimport PersonalForm from './UseForm/Personal';\nimport EducationForm from './UseForm/Education';\n\nfunction ResumeContent() {\n  // \uD83D\uDC47 定义 state 值\n  const [formName, setFormName] = useState('');\n  const [showFormModal, setShowFormModal] = useState(false);\n\n  useEffect(() => {\n    document.addEventListener(MESSAGE_EVENT_NAME_MAPS.OPEN_FORM_MODAL, onReceive);\n    return () => {\n      document.removeEventListener(MESSAGE_EVENT_NAME_MAPS.OPEN_FORM_MODAL, onReceive);\n    };\n  }, []);\n  /**\n   * @description 接收订阅事件的传参\n   */\n  const onReceive = (e: any) => {\n    Messager.receive(e, (data: any) => {\n      setShowFormModal(true);\n      setFormName(data?.form_name);\n    });\n  };\n  return (\n    <MyScrollBox maxHeight={height - HEADER_ACTION_HEIGHT}>\n      <UseTemplateList.TemplateOne />\n      {showFormModal && (\n        <>\n          {formName === RESUME_TOOLBAR_MAPS.personal && <PersonalForm />}\n          {formName === RESUME_TOOLBAR_MAPS.education && <EducationForm />}\n          // 还有许多...\n        </>\n      )}\n    </MyScrollBox>\n  );\n}\nexport default ResumeContent;\n"})}),"\n",(0,s.jsx)(n.p,{children:"当我们点击“个人信息”模块时，就会显示对应的表单弹窗，如下图所示"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"剩下的工作就好办了，以 PersonalForm 为基准，将剩下的所有的表单弹窗组件都写好，最后在 ResumeContent 引入，根据条件匹配从而显示对应的弹窗。"}),"\n",(0,s.jsxs)(n.p,{children:["完整参考阅读",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/blob/chapter-10/app/renderer/container/resume/ResumeContent/index.tsx",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 chapter-10 之表单弹窗"})]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本章节带着大家一步步优化工具条模块的交互效果，以及对新增、删除的逻辑梳理，进而方法抽离。在数据驱动与事件驱动的对比之下，采取事件驱动实现不同组件之间的数据通信。同时封装 Messager 模块，让业务端更好的发送事件与接收事件。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"如果您在边阅读边实践时，发现代码报错或者 TS 报错，那么小伙伴们可以根据报错信息，去线上看看相应的代码。"})}),"\n",(0,s.jsx)(n.p,{children:"如果对本章节存在疑问，欢迎在评论区留言。"})]})}function S(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}let T=S;S.__RSPRESS_PAGE_META={},S.__RSPRESS_PAGE_META["Electron%20%2B%20React%20%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8E%86%E5%B9%B3%E5%8F%B0%E5%AE%9E%E6%88%98%2F10.%E4%B8%9A%E5%8A%A1%E7%AF%87-%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%E4%B9%8B%E5%B7%A5%E5%85%B7%E6%9D%A1%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%AE%80%E5%8E%86%E6%A8%A1%E7%89%88%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1.md"]={toc:[{text:"工具条交互功能优化",id:"工具条交互功能优化",depth:2},{text:"从未添加到已添加实现",id:"从未添加到已添加实现",depth:3},{text:"从已添加删除",id:"从已添加删除",depth:3},{text:"抽离方法",id:"抽离方法",depth:3},{text:"工具条与模版之间的通信",id:"工具条与模版之间的通信",depth:2},{text:"redux 记录数据",id:"redux-记录数据",depth:3},{text:"发布订阅实现弹窗显示",id:"发布订阅实现弹窗显示",depth:3},{text:"点击模块发送事件",id:"点击模块发送事件",depth:4},{text:"简历内容组件订阅事件",id:"简历内容组件订阅事件",depth:4},{text:"弹窗的显示",id:"弹窗的显示",depth:3},{text:"总结",id:"总结",depth:2}],title:"10.业务篇-简历制作之工具条模块与简历模版之间通信",headingTitle:"10.业务篇-简历制作之工具条模块与简历模版之间通信",frontmatter:{}}}}]);