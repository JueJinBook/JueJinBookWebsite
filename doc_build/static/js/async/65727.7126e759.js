"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["65727"],{136951:function(e,n,r){r.r(n),r.d(n,{default:()=>p});var s=r(552676),d=r(740453);let c=r.p+"static/image/4a4eb2dbf6ce6fa1e7caaf5b5a0e6d59.10639908.webp",i=r.p+"static/image/87cd28579e5e3e183998dec62e6256c1.7ed315a5.webp",o=r.p+"static/image/fc8571f113189f2aeb2d67dc34c32f26.0ae3aeda.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",pre:"pre"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"11响应式原理依赖注入实现跨级组件数据共享",children:["11.响应式原理：依赖注入实现跨级组件数据共享",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11响应式原理依赖注入实现跨级组件数据共享",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["通常情况下，当我们需要从父组件向子组件传递数据时，会使用\xa0",(0,s.jsx)(n.a,{href:"https://cn.vuejs.org/guide/components/props.html",target:"_blank",rel:"noopener noreferrer",children:"props"}),"。对于层级不深的父子组件可以通过 ",(0,s.jsx)(n.code,{children:"props"})," 透传数据，但是当父子层级过深时，数据透传将会变得非常麻烦和难以维护，引用 ",(0,s.jsx)(n.code,{children:"Vue.js"})," 官网的一张图："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["而依赖注入则是为了解决 ",(0,s.jsx)(n.code,{children:"prop 逐级透传"})," 的问题而诞生的，父组件 ",(0,s.jsx)(n.code,{children:"provide"})," 需要共享给子组件的数据，子组件 ",(0,s.jsx)(n.code,{children:"inject"})," 使用需要的父组件状态数据，而且可以保持响应式。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"再来看一个依赖注入的使用示例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 父组件\nimport { provide, ref } from 'vue'\nconst msg = ref('hello')\nprovide(/* 注入名 */ 'message', /* 值 */ msg)\n\n//子组件使用\nimport { inject } from 'vue' \nconst message = inject('message')\n"})}),"\n",(0,s.jsx)(n.p,{children:"那么，依赖注入的核心实现原理是怎样的呢？接下来我们就一起分析吧。"}),"\n",(0,s.jsxs)(n.h2,{id:"provide",children:["Provide",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#provide",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Provide"})," 顾名思义，就是一个数据提供方，看看源码里面是如何提供的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export function provide(key, value) {\n  if (!currentInstance) {\n    // ...\n  } else {\n    // 获取当前组件实例上的 provides 对象\n    let provides = currentInstance.provides\n    // 获取父组件实例上的 provides 对象\n    const parentProvides =\n      currentInstance.parent && currentInstance.parent.provides\n    // 当前组件的 providers 指向父组件的情况  \n    if (parentProvides === provides) {\n      // 继承父组件再创建一个 provides\n      provides = currentInstance.provides = Object.create(parentProvides)\n    }\n    // 生成 provides 对象\n    provides[key] = value\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这里稍微回忆一下 ",(0,s.jsx)(n.code,{children:"Object.create"})," 这个函数：这个方法用于创建一个新对象，使用现有的对象来作为新创建对象的原型（",(0,s.jsx)(n.code,{children:"prototype"}),"）。"]}),"\n",(0,s.jsxs)(n.p,{children:["所以 ",(0,s.jsx)(n.code,{children:"provide"})," 就是通过获取当前组件实例对象上的 ",(0,s.jsx)(n.code,{children:"provides"}),"，然后通过 ",(0,s.jsx)(n.code,{children:"Object.create"})," 把父组件的 ",(0,s.jsx)(n.code,{children:"provides"})," 属性设置到当前的组件实例对象的",(0,s.jsx)(n.code,{children:"provides"})," 属性的原型对象上。最后再将需要 ",(0,s.jsx)(n.code,{children:"provid"})," 的数据存储在当前的组件实例对象上的 ",(0,s.jsx)(n.code,{children:"provides"}),"上。"]}),"\n",(0,s.jsxs)(n.p,{children:["这里你可能会有个疑问，当前组件上实例的 ",(0,s.jsx)(n.code,{children:"provides"})," 为什么会等于父组件上的 ",(0,s.jsx)(n.code,{children:"provides"})," 呢？这是因为在组件实例 ",(0,s.jsx)(n.code,{children:"currentInstance"})," 创建的时候进行了初始化的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"appContext = {\n  // ...\n  provides: Object.create(null),\n}\n\nconst instance = { \n  // 依赖注入相关 \n  provides: parent ? parent.provides : Object.create(appContext.provides), \n  // 其它属性 \n  // ... \n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["可以看到，如果父组件定义了 ",(0,s.jsx)(n.code,{children:"provide"})," 那么子组件初始的过程中都会将自己的 ",(0,s.jsx)(n.code,{children:"porvide"})," 指向父组件的 ",(0,s.jsx)(n.code,{children:"provide"}),"。而根组件因为没有父组件，则被赋值为一个空对象。大致可以表示为："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"inject",children:["Inject",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#inject",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Inject"}),"\xa0顾名思义，就是一个数据注入方，看看源码里面是如何实现注入的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export function inject(key, defaultValue, treatDefaultAsFactory = false) {\n  // 获取当前组件实例\n  const instance = currentInstance || currentRenderingInstance\n  if (instance) {\n    // 获取父组件上的 provides 对象\n    const provides =\n      instance.parent == null\n        ? instance.vnode.appContext && instance.vnode.appContext.provides\n        : instance.parent.provides\n    // 如果能取到，则返回值\n    if (provides && key in provides) {\n      return provides[key]\n    } else if (arguments.length > 1) {\n      // 返回默认值\n      return treatDefaultAsFactory && isFunction(defaultValue)\n      // 如果默认内容是个函数的，就执行并且通过call方法把组件实例的代理对象绑定到该函数的this上\n        ? defaultValue.call(instance.proxy)\n        : defaultValue\n    \n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这里的实现就显得通俗易懂了，核心也就是从当前组件实例的父组件上取 ",(0,s.jsx)(n.code,{children:"provides"})," 对象，然后再查找父组件 ",(0,s.jsx)(n.code,{children:"provides"})," 上有没有对应的属性。因为父组件的 ",(0,s.jsx)(n.code,{children:"provides"})," 是通过原型链的方式和父组件的父组件进行了关联，如果父组件上没有，那么会通过原型链的方式再向上取，这也实现了不管组件层级多深，总是可以找到对应的 ",(0,s.jsx)(n.code,{children:"provide"})," 的提供方数据。"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"通过上面的分析，我们知道了依赖注入的实现原理相对还是比较简单的，比较有意思的事他巧妙地利用了原型和原型链的方式进行数据的继承和获取。"}),"\n",(0,s.jsxs)(n.p,{children:["在执行 ",(0,s.jsx)(n.code,{children:"provide"})," 的时候，会将父组件的的 ",(0,s.jsx)(n.code,{children:"provides"})," 关联成当前组件实例 ",(0,s.jsx)(n.code,{children:"provides"})," 对象原型上的属性，当在 ",(0,s.jsx)(n.code,{children:"inject"})," 获取数据的时候，则会根据原型链的规则进行查找，找不到的话则会返回用户自定义的默认值。"]}),"\n",(0,s.jsxs)(n.p,{children:["最后，我们知道 ",(0,s.jsx)(n.code,{children:"Vue"})," 通过了依赖注入的方式实现了跨层级组件的状态共享问题。跨层级的状态共享问题是不是听起来有点耳熟？没错，那就是 ",(0,s.jsx)(n.code,{children:"vuex / pinia"})," 所做的事情。"]}),"\n",(0,s.jsxs)(n.p,{children:["那思考一下 ",(0,s.jsx)(n.code,{children:"Vue 3"})," 是否可以依托于 ",(0,s.jsx)(n.code,{children:"Composition API"})," + ",(0,s.jsx)(n.code,{children:"依赖注入"})," 实现一个轻量级的状态管理工具呢？"]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}let p=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["Vue%203%20%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%2F11.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%EF%BC%9A%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%AE%9E%E7%8E%B0%E8%B7%A8%E7%BA%A7%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"Provide",id:"provide",depth:2},{text:"Inject",id:"inject",depth:2},{text:"总结",id:"总结",depth:2}],title:"11.响应式原理：依赖注入实现跨级组件数据共享",headingTitle:"11.响应式原理：依赖注入实现跨级组件数据共享",frontmatter:{}}}}]);