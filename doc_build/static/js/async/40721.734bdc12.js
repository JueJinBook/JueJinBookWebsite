"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["40721"],{377881:function(n,e,r){r.r(e),r.d(e,{default:()=>d});var l=r(552676),s=r(740453);function c(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",hr:"hr",blockquote:"blockquote",pre:"pre",ol:"ol",strong:"strong",h3:"h3"},(0,s.ah)(),n.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(e.h1,{id:"5一面-4从容应对算法题目",children:["5.一面 4：从容应对算法题目",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5一面-4从容应对算法题目",children:"#"})]}),"\n",(0,l.jsxs)(e.p,{children:["由冯\xb7诺依曼机组成我们知道：数据存储和运算是计算机工作的主要内容。",(0,l.jsx)(e.code,{children:"程序=数据结构+算法"}),"，所以计算机类工程师必须掌握一定的数据结构和算法知识。"]}),"\n",(0,l.jsxs)(e.h2,{id:"知识点梳理",children:["知识点梳理",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#知识点梳理",children:"#"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["常见的数据结构","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"栈、队列、链表"}),"\n",(0,l.jsx)(e.li,{children:"集合、字典、散列集"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["常见算法","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"递归"}),"\n",(0,l.jsx)(e.li,{children:"排序"}),"\n",(0,l.jsx)(e.li,{children:"枚举"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.li,{children:"算法复杂度分析"}),"\n",(0,l.jsxs)(e.li,{children:["算法思维","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"分治"}),"\n",(0,l.jsx)(e.li,{children:"贪心"}),"\n",(0,l.jsx)(e.li,{children:"动态规划"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["高级数据结构","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"树、图"}),"\n",(0,l.jsx)(e.li,{children:"深度优先和广度优先搜索"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"本小节会带领大家快速过一遍数据结构和算法，重点讲解一些常考、前端会用到的算法和数据结构。"}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsxs)(e.h2,{id:"数据结构",children:["数据结构",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数据结构",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"数据结构决定了数据存储的空间和时间效率问题，数据的写入和提取速度要求也决定了应该选择怎样的数据结构。"}),"\n",(0,l.jsx)(e.p,{children:"根据对场景需求的不同，我们设计不同的数据结构，比如："}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"读得多的数据结构，应该想办法提高数据的读取效率，比如 IP 数据库，只需要写一次，剩下的都是读取；"}),"\n",(0,l.jsx)(e.li,{children:"读写都多的数据结构，要兼顾两者的需求平衡，比如 LRU Cache 算法。"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"算法是数据加工处理的方式，一定的算法会提升数据的处理效率。比如有序数组的二分查找，要比普通的顺序查找快很多，尤其是在处理大量数据的时候。"}),"\n",(0,l.jsx)(e.p,{children:"数据结构和算法是程序开发的通用技能，所以在任何面试中都可能会遇见。随着近几年 AI、大数据、小游戏越来越火，Web 前端职位难免会跟数据结构和算法打交道，面试中也会出现越来越多的算法题目。学习数据结构和算法也能够帮助我们打开思路，突破技能瓶颈。"}),"\n",(0,l.jsxs)(e.h2,{id:"前端常遇见的数据结构问题",children:["前端常遇见的数据结构问题",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前端常遇见的数据结构问题",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"现在我来梳理下前端常遇见的数据结构："}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["简单数据结构（必须理解掌握）","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"有序数据结构：栈、队列、链表，有序数据结构省空间（存储空间小）"}),"\n",(0,l.jsx)(e.li,{children:"无序数据结构：集合、字典、散列表，无序数据结构省时间（读取时间快）"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["复杂数据结构","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"树、堆"}),"\n",(0,l.jsx)(e.li,{children:"图"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["对于简单数据结构，在 ES 中对应的是数组（",(0,l.jsx)(e.code,{children:"Array"}),"）和对象（",(0,l.jsx)(e.code,{children:"Object"}),"）。可以想一下，数组的存储是有序的，对象的存储是无序的，但是我要在对象中根据",(0,l.jsx)(e.code,{children:"key"}),"找到一个值是立即返回的，数组则需要查找的过程。"]}),"\n",(0,l.jsx)(e.p,{children:"这里我通过一个真实面试题目来说明介绍下数据结构设计。"}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsxs)(e.p,{children:["题目：使用 ECMAScript（JS）代码实现一个事件类",(0,l.jsx)(e.code,{children:"Event"}),"，包含下面功能：绑定事件、解绑事件和派发事件。"]}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["在稍微复杂点的页面中，比如组件化开发的页面，同一个页面由两三个人来开发，为了保证组件的独立性和降低组件间耦合度，我们往往使用「订阅发布模式」，即组件间通信使用事件监听和派发的方式，而不是直接相互调用组件方法，这就是题目要求写的",(0,l.jsx)(e.code,{children:"Event"}),"类。"]}),"\n",(0,l.jsxs)(e.p,{children:["这个题目的核心是一个事件类型对应回调函数的数据设计。为了实现绑定事件，我们需要一个",(0,l.jsx)(e.code,{children:"_cache"}),"对象来记录绑定了哪些事件。而事件发生的时候，我们需要从",(0,l.jsx)(e.code,{children:"_cache"}),"中读取出来事件回调，依次执行它们。一般页面中事件派发（读）要比事件绑定（写）多。所以我们设计的数据结构应该尽量地能够在事件发生时，更加快速地找到对应事件的回调函数们，然后执行。"]}),"\n",(0,l.jsx)(e.p,{children:"经过这样一番考虑，我简单写了下代码实现："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"class Event {\n    constructor() {\n        // 存储事件的数据结构\n        // 为了查找迅速，使用了对象（字典）\n        this._cache = {};\n    }\n    // 绑定\n    on(type, callback) {\n        // 为了按类查找方便和节省空间，\n        // 将同一类型事件放到一个数组中\n        // 这里的数组是队列，遵循先进先出\n        // 即先绑定的事件先触发\n        let fns = (this._cache[type] = this._cache[type] || []);\n        if (fns.indexOf(callback) === -1) {\n            fns.push(callback);\n        }\n        return this;\n    }\n    // 触发\n    trigger(type, data) {\n        let fns = this._cache[type];\n        if (Array.isArray(fns)) {\n            fns.forEach((fn) => {\n                fn(data);\n            });\n        }\n        return this;\n    }\n    // 解绑\n    off(type, callback) {\n        let fns = this._cache[type];\n        if (Array.isArray(fns)) {\n            if (callback) {\n                let index = fns.indexOf(callback);\n                if (index !== -1) {\n                    fns.splice(index, 1);\n                }\n            } else {\n                //全部清空\n                fns.length = 0;\n            }\n        }\n        return this;\n    }\n}\n// 测试用例\nconst event = new Event();\nevent.on('test', (a) => {\n    console.log(a);\n});\nevent.trigger('test', 'hello world');\n\nevent.off('test');\nevent.trigger('test', 'hello world');\n"})}),"\n",(0,l.jsx)(e.p,{children:"类似于树、堆、图这些高级数据结构，前端一般也不会考查太多，但是它们的查找方法却常考，后面介绍。高级数据应该平时多积累，好好理解，比如理解了堆是什么样的数据结构，在面试中遇见的「查找最大的 K 个数」这类算法问题，就会迎刃而解。"}),"\n",(0,l.jsxs)(e.h2,{id:"算法的效率是通过算法复杂度来衡量的",children:["算法的效率是通过算法复杂度来衡量的",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#算法的效率是通过算法复杂度来衡量的",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"算法的好坏可以通过算法复杂度来衡量，算法复杂度包括时间复杂度和空间复杂度两个。时间复杂度由于好估算、好评估等特点，是面试中考查的重点。空间复杂度在面试中考查得不多。"}),"\n",(0,l.jsx)(e.p,{children:"常见的时间复杂度有："}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["常数阶 ",(0,l.jsx)(e.code,{children:"O(1)"})]}),"\n",(0,l.jsxs)(e.li,{children:["对数阶 ",(0,l.jsx)(e.code,{children:"O(logN)"})]}),"\n",(0,l.jsxs)(e.li,{children:["线性阶 ",(0,l.jsx)(e.code,{children:"O(n)"})]}),"\n",(0,l.jsxs)(e.li,{children:["线性对数阶 ",(0,l.jsx)(e.code,{children:"O(nlogN)"})]}),"\n",(0,l.jsxs)(e.li,{children:["平方阶 ",(0,l.jsx)(e.code,{children:"O(n^2)"})]}),"\n",(0,l.jsxs)(e.li,{children:["立方阶 ",(0,l.jsx)(e.code,{children:"O(n^3)"})]}),"\n",(0,l.jsxs)(e.li,{children:["!k次方阶 ",(0,l.jsx)(e.code,{children:"O(n^k)"})]}),"\n",(0,l.jsxs)(e.li,{children:["指数阶",(0,l.jsx)(e.code,{children:"O(2^n)"})]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低。"}),"\n",(0,l.jsx)(e.p,{children:"一般做算法复杂度分析的时候，遵循下面的技巧："}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["看看有几重循环，一般来说一重就是",(0,l.jsx)(e.code,{children:"O(n)"}),"，两重就是 ",(0,l.jsx)(e.code,{children:"O(n^2)"}),"，以此类推"]}),"\n",(0,l.jsxs)(e.li,{children:["如果有二分，则为",(0,l.jsx)(e.code,{children:"O(logN)"})]}),"\n",(0,l.jsx)(e.li,{children:"保留最高项，去除常数项"}),"\n"]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"题目：分析下面代码的算法复杂度（为了方便，我已经在注释中加了代码分析）"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"let i =0; // 语句执行一次 \nwhile (i < n) { // 语句执行 n 次 \n  console.log(`Current i is ${i}`); //语句执行 n 次\n  i++; // 语句执行 n 次\n}\n"})}),"\n",(0,l.jsxs)(e.p,{children:["根据注释可以得到，算法复杂度为",(0,l.jsx)(e.code,{children:"1 + n + n + n = 1 + 3n"}),"，去除常数项，为",(0,l.jsx)(e.code,{children:"O(n)"}),"。"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"let number = 1; // 语句执行一次 \nwhile (number < n) { // 语句执行 logN 次\n  number *= 2; // 语句执行 logN 次\n}\n"})}),"\n",(0,l.jsxs)(e.p,{children:["上面代码",(0,l.jsx)(e.code,{children:"while"}),"的跳出判断条件是",(0,l.jsx)(e.code,{children:"number<n"}),"，而循环体内",(0,l.jsx)(e.code,{children:"number"}),"增长速度是",(0,l.jsx)(e.code,{children:"(2^n)"}),"，所以循环代码实际执行",(0,l.jsx)(e.code,{children:"logN"}),"次，复杂度为：",(0,l.jsx)(e.code,{children:"1 + 2 * logN = O(logN)"})]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"for (let i = 0; i < n; i++) {// 语句执行 n 次\n  for (let j = 0; j < n; j++) {// 语句执行 n^2 次\n    console.log('I am here!'); // 语句执行 n^2 次\n  }\n}\n"})}),"\n",(0,l.jsxs)(e.p,{children:["上面代码是两个",(0,l.jsx)(e.code,{children:"for"}),"循环嵌套，很容易得出复杂度为：",(0,l.jsx)(e.code,{children:"O(n^2)"})]}),"\n",(0,l.jsxs)(e.h2,{id:"人人都要掌握的基础算法",children:["人人都要掌握的基础算法",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#人人都要掌握的基础算法",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"枚举和递归是最最简单的算法，也是复杂算法的基础，人人都应该掌握！枚举相对比较简单，我们重点说下递归。"}),"\n",(0,l.jsx)(e.p,{children:"递归由下面两部分组成："}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"递归主体，就是要循环解决问题的代码"}),"\n",(0,l.jsx)(e.li,{children:"递归的跳出条件，递归不能一直递归下去，需要完成一定条件后跳出"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"关于递归有个经典的面试题目是："}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"实现 JS 对象的深拷贝"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"什么是深拷贝？"})}),"\n",(0,l.jsxs)(e.p,{children:["「深拷贝」就是在拷贝数据的时候，将数据的所有",(0,l.jsx)(e.strong,{children:"引用结构"}),"都拷贝一份。简单的说就是，在内存中存在两个数据结构完全相同又相互独立的数据，将引用型类型进行复制，而不是只复制其引用关系。"]}),"\n",(0,l.jsx)(e.p,{children:"分析下怎么做「深拷贝」："}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"首先假设深拷贝这个方法已经完成，为 deepClone"}),"\n",(0,l.jsx)(e.li,{children:"要拷贝一个数据，我们肯定要去遍历它的属性，如果这个对象的属性仍是对象，继续使用这个方法，如此往复"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"function deepClone(o1, o2) {\n    for (let k in o2) {\n        if (typeof o2[k] === 'object') {\n            o1[k] = {};\n            deepClone(o1[k], o2[k]);\n        } else {\n            o1[k] = o2[k];\n        }\n    }\n}\n// 测试用例\nlet obj = {\n    a: 1,\n    b: [1, 2, 3],\n    c: {}\n};\nlet emptyObj = Object.create(null);\ndeepClone(emptyObj, obj);\nconsole.log(emptyObj.a == obj.a);\nconsole.log(emptyObj.b == obj.b);\n"})}),"\n",(0,l.jsxs)(e.p,{children:["递归容易造成爆栈，尾部调用可以解决递归的这个问题，Chrome 的 V8 引擎做了尾部调用优化，我们在写代码的时候也要注意尾部调用写法。递归的爆栈问题可以通过将递归改写成枚举的方式来解决，就是通过",(0,l.jsx)(e.code,{children:"for"}),"或者",(0,l.jsx)(e.code,{children:"while"}),"来代替递归。"]}),"\n",(0,l.jsx)(e.p,{children:"我们在使用递归的时候，要注意做优化，比如下面的题目。"}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"题目：求斐波那契数列（兔子数列） 1,1,2,3,5,8,13,21,34,55,89...中的第 n 项"}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["下面的代码中",(0,l.jsx)(e.code,{children:"count"}),"记录递归的次数，我们看下两种差异性的代码中的",(0,l.jsx)(e.code,{children:"count"}),"的值："]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"let count = 0;\nfunction fn(n) {\n    let cache = {};\n    function _fn(n) {\n        if (cache[n]) {\n            return cache[n];\n        }\n        count++;\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        let prev = _fn(n - 1);\n        cache[n - 1] = prev;\n        let next = _fn(n - 2);\n        cache[n - 2] = next;\n        return prev + next;\n    }\n    return _fn(n);\n}\n\nlet count2 = 0;\nfunction fn2(n) {\n    count2++;\n    if (n == 1 || n == 2) {\n        return 1;\n    }\n    return fn2(n - 1) + fn2(n - 2);\n}\n\nconsole.log(fn(20), count); // 6765 20\nconsole.log(fn2(20), count2); // 6765 13529\n"})}),"\n",(0,l.jsxs)(e.h2,{id:"快排和二分查找",children:["快排和二分查找",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#快排和二分查找",children:"#"})]}),"\n",(0,l.jsxs)(e.p,{children:["前端中面试排序和查找的可能性比较小，因为 JS 引擎已经把这些常用操作优化得很好了，可能项目中你费劲写的一个排序方法，都不如",(0,l.jsx)(e.code,{children:"Array.sort"}),"速度快且代码少。因此，掌握快排和二分查找就可以了。"]}),"\n",(0,l.jsxs)(e.p,{children:["快排和二分查找都基于一种叫做「分治」的算法思想，通过对数据进行分类处理，不断降低数量级，实现",(0,l.jsx)(e.code,{children:"O(logN)"}),"（对数级别，比",(0,l.jsx)(e.code,{children:"O(n)"}),"这种线性复杂度更低的一种，快排核心是二分法的",(0,l.jsx)(e.code,{children:"O(logN)"}),"，实际复杂度为",(0,l.jsx)(e.code,{children:"O(N*logN)"}),"）的复杂度。"]}),"\n",(0,l.jsxs)(e.h3,{id:"快速排序",children:["快速排序",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#快速排序",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"快排大概的流程是："}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"随机选择数组中的一个数 A，以这个数为基准"}),"\n",(0,l.jsx)(e.li,{children:"其他数字跟这个数进行比较，比这个数小的放在其左边，大的放到其右边"}),"\n",(0,l.jsx)(e.li,{children:"经过一次循环之后，A 左边为小于 A 的，右边为大于 A 的"}),"\n",(0,l.jsx)(e.li,{children:"这时候将左边和右边的数再递归上面的过程"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"具体代码如下："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"\n// 划分操作函数\nfunction partition(array, left, right) {\n    // 用index取中间值而非splice\n    const pivot = array[Math.floor((right + left) / 2)]\n    let i = left\n    let j = right\n\n    while (i <= j) {\n        while (compare(array[i], pivot) === -1) {\n            i++\n        }\n        while (compare(array[j], pivot) === 1) {\n            j--\n        }\n        if (i <= j) {\n            swap(array, i, j)\n            i++\n            j--\n        }\n    }\n    return i\n}\n\n// 比较函数\nfunction compare(a, b) {\n    if (a === b) {\n        return 0\n    }\n    return a < b ? -1 : 1\n}\n\nfunction quick(array, left, right) {\n    let index\n    if (array.length > 1) {\n        index = partition(array, left, right)\n        if (left < index - 1) {\n            quick(array, left, index - 1)\n        }\n        if (index < right) {\n            quick(array, index, right)\n        }\n    }\n    return array\n}\nfunction quickSort(array) {\n    return quick(array, 0, array.length - 1)\n}\n\n// 原地交换函数，而非用临时数组\nfunction swap(array, a, b) {\n    ;[array[a], array[b]] = [array[b], array[a]]\n}\nconst Arr = [85, 24, 63, 45, 17, 31, 96, 50];\nconsole.log(quickSort(Arr));\n// 本版本来自：https://juejin.cn/post/1#heading-12\n"})}),"\n",(0,l.jsxs)(e.h3,{id:"二分查找",children:["二分查找",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#二分查找",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"二分查找法主要是解决「在一堆有序的数中找出指定的数」这类问题，不管这些数是一维数组还是多维数组，只要有序，就可以用二分查找来优化。"}),"\n",(0,l.jsx)(e.p,{children:"二分查找是一种「分治」思想的算法，大概流程如下："}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"数组中排在中间的数字 A，与要找的数字比较大小"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"因为数组是有序的，所以：\na) A 较大则说明要查找的数字应该从前半部分查找\nb) A 较小则说明应该从查找数字的后半部分查找"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"这样不断查找缩小数量级（扔掉一半数据），直到找完数组为止"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"function Find(target, array) {\n    let i = 0;\n    let j = array[i].length - 1;\n    while (i < array.length && j >= 0) {\n        if (array[i][j] < target) {\n            i++;\n        } else if (array[i][j] > target) {\n            j--;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n\n//测试用例\nconsole.log(Find(10, [\n    [1, 2, 3, 4], \n    [5, 9, 10, 11], \n    [13, 20, 21, 23]\n    ])\n);\n"})}),"\n",(0,l.jsx)(e.p,{children:"另外笔者在面试中遇见过下面的问题："}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"题目：现在我有一个 1~1000 区间中的正整数，需要你猜下这个数字是几，你只能问一个问题：大了还是小了？问需要猜几次才能猜对？"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"拿到这个题目，笔者想到的就是电视上面有个「猜价格」的购物节目，在规定时间内猜对价格就可以把实物抱回家。所以问题就是让面试官不停地回答我猜的数字比这个数字大了还是小了。这就是二分查找！"}),"\n",(0,l.jsxs)(e.p,{children:["猜几次呢？其实这个问题就是个二分查找的算法时间复杂度问题，二分查找的时间复杂度是",(0,l.jsx)(e.code,{children:"O(logN)"}),"，所以求",(0,l.jsx)(e.code,{children:"log1000"}),"的解就是猜的次数。我们知道",(0,l.jsx)(e.code,{children:"2^10=1024"}),"，所以可以快速估算出：",(0,l.jsx)(e.code,{children:"log1000"}),"约等于 10，最多问 10 次就能得到这个数！"]}),"\n",(0,l.jsxs)(e.h2,{id:"面试遇见不会的算法问题怎么办",children:["面试遇见不会的算法问题怎么办",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#面试遇见不会的算法问题怎么办",children:"#"})]}),"\n",(0,l.jsxs)(e.p,{children:["面试的时候，在遇见算法题目的时候，应该揣摩面试官的意图，听好关键词，比如：有序的数列做查找、要求算法复杂度是",(0,l.jsx)(e.code,{children:"O(logN)"}),"这类一般就是用二分的思想。"]}),"\n",(0,l.jsx)(e.p,{children:"一般来说算法题目的解题思路分以下四步："}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"先降低数量级，拿可以计算出来的情况（数据）来构思解题步骤"}),"\n",(0,l.jsx)(e.li,{children:"根据解题步骤编写程序，优先将特殊情况做好判断处理，比如一个大数组的问题，如果数组为两个数长度的情况"}),"\n",(0,l.jsx)(e.li,{children:"检验程序正确性"}),"\n",(0,l.jsx)(e.li,{children:"是否可以优化（由浅到深），有能力的话可以故意预留优化点，这样可以体现个人技术能力"}),"\n"]}),"\n",(0,l.jsxs)(e.h2,{id:"正则匹配解题",children:["正则匹配解题",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#正则匹配解题",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"很多算法题目利用 ES 语法的特性来回答更加简单，比如正则匹配就是常用的一种方式。笔者简单通过几个真题来汇总下正则的知识点。"}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"题目：字符串中第一个出现一次的字符"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符「go」时，第一个只出现一次的字符是「g」。当从该字符流中读出前六个字符「google」时，第一个只出现一次的字符是「l」。"}),"\n",(0,l.jsx)(e.p,{children:"这个如果用纯算法来解答需要遍历字符串，统计每个字符出现的次数，然后按照字符串的顺序来找出第一次出现一次的字符，整个过程比较繁琐，如果用正则就简单多了。"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"function find(str){\n    for (var i = 0; i < str.length; i++) {\n        let char = str[i]\n        let reg = new RegExp(char, 'g');\n        let l = str.match(reg).length\n        if(l===1){\n            return char\n        }\n    }\n}\n"})}),"\n",(0,l.jsxs)(e.p,{children:["当然，使用",(0,l.jsx)(e.code,{children:"indexOf/lastIndexOf"}),"也是一个取巧的方式。再来看一个千分位问题。"]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsxs)(e.p,{children:["题目：将",(0,l.jsx)(e.code,{children:"1234567"})," 变成 ",(0,l.jsx)(e.code,{children:"1,234,567"}),"，即千分位标注"]}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["这个题目可以用算法直接来解，如果候选人使用正则来回答，这样主动展现了自己其他方面的优势，即使不是算法解答出来的，面试官一般也不会太难为他。这道题目可以利用正则的「零宽断言」",(0,l.jsx)(e.code,{children:"(?=exp)"}),"，意思是它断言自身出现的位置的后面能匹配表达式 exp。数字千分位的特点是，第一个逗号后面数字的个数是3的倍数，正则：",(0,l.jsx)(e.code,{children:"/(\\d{3})+$/"}),"；第一个逗号前最多可以有 1~3 个数字，正则：",(0,l.jsx)(e.code,{children:"/\\d{1,3}/"}),"。加起来就是",(0,l.jsx)(e.code,{children:"/\\d{1,3}(\\d{3})+$/"}),"，分隔符要从前往后加。"]}),"\n",(0,l.jsxs)(e.p,{children:["对于零宽断言的详细介绍可以阅读「",(0,l.jsx)(e.a,{href:"https://deerchao.net/tutorials/regex/regex.htm#lookaround",target:"_blank",rel:"noopener noreferrer",children:"零宽断言"}),"」这篇文章。"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"function exchange(num) {\n    num += ''; //转成字符串\n    if (num.length <= 3) {\n        return num;\n    }\n\n    num = num.replace(/\\d{1,3}(?=(\\d{3})+$)/g, (v) => {\n        console.log(v)\n        return v + ',';\n    });\n    return num;\n}\n\nconsole.log(exchange(1234567));\n"})}),"\n",(0,l.jsx)(e.p,{children:"当然上面讲到的多数是算法题目取巧的方式，下面这个题目是纯正则考查，笔者在面试的过程中碰见过，这里顺便提一下。"}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"题目，请写出下面的代码执行结果"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"var str = 'google';\nvar reg = /o/g;\nconsole.log(reg.test(str))\nconsole.log(reg.test(str))\nconsole.log(reg.test(str))\n"})}),"\n",(0,l.jsxs)(e.p,{children:["代码执行后，会发现，最后一个不是为",(0,l.jsx)(e.code,{children:"true"}),"，而是",(0,l.jsx)(e.code,{children:"false"}),"，这是因为",(0,l.jsx)(e.code,{children:"reg"}),"这个正则有个",(0,l.jsx)(e.code,{children:"g"}),"，即",(0,l.jsx)(e.code,{children:"global"}),"全局的属性，这种情况下",(0,l.jsx)(e.code,{children:"lastIndex"}),"就发挥作用了，可以看下面的代码执行结果就明白了。"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"console.log(reg.test(str), reg.lastIndex)\nconsole.log(reg.test(str), reg.lastIndex)\nconsole.log(reg.test(str), reg.lastIndex)\n"})}),"\n",(0,l.jsx)(e.p,{children:"实际开发中也会犯这样的错误，比如为了减少变量每次都重新定义，会把用到的变量提前定义好，这样在使用的时候容易掉进坑里，比如下面代码："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"(function(){\n    const reg = /o/g;\n    function isHasO(str){\n        // reg.lastIndex = 0; 这样就可以避免这种情况\n        return reg.test(str)\n    }\n    var str = 'google';\n    console.log(isHasO(str))\n    console.log(isHasO(str))\n    console.log(isHasO(str))\n}())\n"})}),"\n",(0,l.jsxs)(e.h2,{id:"小结",children:["小结",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"本小节介绍了数据结构和算法的关系，作为普通的前端也应该学习数据结构和算法知识，并且顺带介绍了下正则匹配。具体来说，本小节梳理了以下几部分数据结构和算法知识点："}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"经常用到的数据结构有哪些，它们的特点有哪些"}),"\n",(0,l.jsx)(e.li,{children:"递归和枚举是最基础的算法，必须牢牢掌握"}),"\n",(0,l.jsx)(e.li,{children:"排序里面理解并掌握快速排序算法，其他排序算法可以根据个人实际情况大概了解"}),"\n",(0,l.jsx)(e.li,{children:"有序查找用二分查找"}),"\n",(0,l.jsx)(e.li,{children:"遇见不会的算法问题，先缩小数量级，然后分析推导"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"当然算法部分还有很多知识，比如动态规划这些算法思想，还有图和树常用到的广度优先搜索和深度优先搜索。这些知识在前端面试和项目中遇见得不多，感兴趣的读者可以在梳理知识点的时候根据个人情况自行决定是否复习。"})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(c,{...n})}):c(n)}let d=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["Web%20%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97%E4%B8%8E%E9%AB%98%E9%A2%91%E8%80%83%E9%A2%98%E8%A7%A3%E6%9E%90%2F5.%E4%B8%80%E9%9D%A2%204%EF%BC%9A%E4%BB%8E%E5%AE%B9%E5%BA%94%E5%AF%B9%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE.md"]={toc:[{text:"知识点梳理",id:"知识点梳理",depth:2},{text:"数据结构",id:"数据结构",depth:2},{text:"前端常遇见的数据结构问题",id:"前端常遇见的数据结构问题",depth:2},{text:"算法的效率是通过算法复杂度来衡量的",id:"算法的效率是通过算法复杂度来衡量的",depth:2},{text:"人人都要掌握的基础算法",id:"人人都要掌握的基础算法",depth:2},{text:"快排和二分查找",id:"快排和二分查找",depth:2},{text:"快速排序",id:"快速排序",depth:3},{text:"二分查找",id:"二分查找",depth:3},{text:"面试遇见不会的算法问题怎么办",id:"面试遇见不会的算法问题怎么办",depth:2},{text:"正则匹配解题",id:"正则匹配解题",depth:2},{text:"小结",id:"小结",depth:2}],title:"5.一面 4：从容应对算法题目",headingTitle:"5.一面 4：从容应对算法题目",frontmatter:{}}}}]);