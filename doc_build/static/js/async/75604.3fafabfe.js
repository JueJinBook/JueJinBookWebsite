"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["75604"],{511642:function(e,n,a){a.r(n),a.d(n,{default:()=>X});var s=a(552676),c=a(740453);let i=a.p+"static/image/ee31cb7583816189b953e9f4696399a0.ac97e2b1.webp",r=a.p+"static/image/a3f355bddc07b769d6e350d028e5d66f.2c223144.webp",t=a.p+"static/image/50d5dfa8d7f08c15c12bf111cc2e0247.1f1386c9.webp",d=a.p+"static/image/88ea1c106e2ba78ad2ae343bdaef6256.cd4388a3.webp",l=a.p+"static/image/fbf5f7534eb01ffed53cbeb0f19c6d47.e533d0dd.webp",p=a.p+"static/image/83ff0deb2d579e97878354e36a4ce3d0.500ad519.webp",m=a.p+"static/image/026b4faca8bab22d93562485df53b9fc.4a4e50bd.webp",j=a.p+"static/image/85459c60b20a35f43b0c4247acf288ec.9e560c9d.webp",h=a.p+"static/image/3a31b85d420a0fca5ee91fe9a51ca030.6d39d4d8.webp",x=a.p+"static/image/63881b4f6d35d149f1c6b917d3552a22.dbe8bcda.webp",o=a.p+"static/image/b5df0819b418044e7ce24c1fc8fd5229.ed46b382.webp",g=a.p+"static/image/4a1d81740ee0de226988180468f78631.4fc5ae47.webp",b=a.p+"static/image/629fc528a8bc7c64502b1111bbde7c16.eff9c4a1.webp",f=a.p+"static/image/8a1cb1d655966d449fede0ca89545659.3ad5dace.webp",u=a.p+"static/image/317c002455e58622d3eff33665fb553c.a0d910c2.webp",w=a.p+"static/image/8469cc1e4afdb81e440a67320b0bc54f.1ca15849.webp",y=a.p+"static/image/9501d9c66e7231a5dbcf2494ab19a92d.bd6a4ab4.webp",C=a.p+"static/image/d17daf2b754531e6b90262793fe0c937.4d701794.webp",E=a.p+"static/image/97a8ff87ee5dd87a988a901b5121c798.86282a98.webp",A=a.p+"static/image/110401d4e8671947f7ef84f272011f09.254b75e3.webp",N=a.p+"static/image/ef3c103503544461647aee35c8c60e06.2a1a5d7c.webp",v=a.p+"static/image/3e498f0da28f0d977d3fe043cf0bc5b6.22ce6267.webp",R=a.p+"static/image/dc0e029616ad0afb3f51730178cc345f.64f65d97.webp",D=a.p+"static/image/142fd42e882dd867ae79830bbecd6a2a.0e701703.webp",_=a.p+"static/image/ea8f073ea8253d9af9537a1628dc9cda.88eabf2a.webp",q=a.p+"static/image/7249585595b4608efc953bd88c21062a.2831a028.webp",U=a.p+"static/image/9fac284c4d85ec99e20713c51168506e.6295e4eb.webp",P=a.p+"static/image/9c62c6902b3f0872195cfb91c46dfcb2.85ae47bd.webp",k=a.p+"static/image/30e57195fef5a7167481bcd083d60ee7.1051c6e5.webp",T=a.p+"static/image/c4681d6fee7096094b9909ee247d8ede.9ac294f2.webp",S=a.p+"static/image/82d4f6e76f4f0a45dbaa22abaf8f55ca.ff80e9bf.webp",B=a.p+"static/image/51f59c562f1c00645b3219822cdf5fbe.d4a105a1.webp",I=a.p+"static/image/bd3ff34e3865be5f0930ec75678e9c9c.8f5b3326.webp",O=a.p+"static/image/2133d2d825b405bcf27b6454f18c5c10.62a8bfda.webp";function M(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"150-prisma-client-多表-crud-的全部-api",children:["150. Prisma Client 多表 CRUD 的全部 api",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#150-prisma-client-多表-crud-的全部-api",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上节我们过了一遍 Prisma Client 做 CRUD 的 api，但那只是针对单表的，这节我们把涉及到多表的 CRUD 的 api 过一遍。"}),"\n",(0,s.jsx)(n.p,{children:"创建个新项目："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir prisma-client-api2 \ncd prisma-client-api2 \nnpm init -y\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:O,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"进入项目，执行 init 命令："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"npx prisma init\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"生成了 .env 和 schema 文件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后改下 .env 文件的数据库连接信息："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ini",children:'DATABASE_URL="mysql://root:guang@localhost:3306/prisma_test"\n'})}),"\n",(0,s.jsx)(n.p,{children:"改一下 datasource 的 provider 为 mysql，并且添加 model"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prisma",children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\nmodel Department {\n  id        Int    @id @default(autoincrement())\n  name      String  @db.VarChar(20)\n  createTime DateTime @default(now())\n  updateTime DateTime @updatedAt\n  employees     Employee[]\n}\n\nmodel Employee {\n  id         Int       @id @default(autoincrement())\n  name      String     @db.VarChar(20)\n  phone     String     @db.VarChar(30)  \n\n  deaprtmentId Int\n  department     Department      @relation(fields: [deaprtmentId], references: [id])\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"之后执行 migrate reset 重置下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-perl",children:"npx prisma migrate reset\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后用 migrate dev 创建新的迁移："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"npx prisma migrate dev --name aaa\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"生成了 client 代码，还有 sql 文件。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"数据库中也多了这 2 个表："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后来写下 client 的 crud 代码。"}),"\n",(0,s.jsx)(n.p,{children:"首先安装 ts、ts-node 包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"npm install typescript ts-node @types/node --save-dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"创建 tsconfig.json"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"npx tsc --init\n"})}),"\n",(0,s.jsx)(n.p,{children:"把注释删掉，保留这些配置就行："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "es2016",\n    "module": "commonjs",\n    "types": ["node"],\n    "esModuleInterop": true,\n    "forceConsistentCasingInFileNames": true,\n    "strict": true,\n    "skipLibCheck": true\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"创建 src/index.ts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'stdout',\n      level: 'query'\n    },\n  ],\n});\n\nasync function main() { \n}\n\nmain();\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后分别做下 CRUD。"}),"\n",(0,s.jsx)(n.p,{children:"首先是插入数据："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'stdout',\n      level: 'query'\n    },\n  ],\n});\n\nasync function test1() {\n   await prisma.department.create({\n        data: {\n            name: '技术部',\n            employees: {\n                create: [\n                    {\n                        name: '小张',\n                        phone: '13333333333'\n                    },\n                    {\n                        name: '小李',\n                        phone: '13222222222'\n                    }\n                ]\n            }\n        }\n   })\n}\n\ntest1();\n"})}),"\n",(0,s.jsx)(n.p,{children:"插入关联 model 的数据的时候，也是用 create 指定："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx ts-node ./src/index.ts\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 mysql workbench 里看下结果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"确实，数据都被正确插入了。"}),"\n",(0,s.jsx)(n.p,{children:"当然，你也可以用这种写法："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function test2() {\n    await prisma.department.create({\n         data: {\n             name: '技术部',\n             employees: {\n                 createMany: {\n                    data: [\n                        {\n                            name: '小王',\n                            phone: '13333333333'\n                        },\n                        {\n                            name: '小周',\n                            phone: '13222222222'\n                        }\n                    ],\n\n                 }\n             }\n         }\n    })\n}\n\ntest2();\n"})}),"\n",(0,s.jsx)(n.p,{children:"跑一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"效果一样："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"那如何关联查询呢？"}),"\n",(0,s.jsx)(n.p,{children:"可以这样写："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function test3() {\n    const res1 = await prisma.department.findUnique({\n        where: {\n            id: 1\n        },\n        include: {\n            employees: true\n        }\n    });\n    console.log(res1);\n\n    const res2 = await prisma.department.findUnique({\n        where: {\n            id: 1\n        },\n        include: {\n            employees: {\n                where: {\n                    name: '小张'\n                },\n                select: {\n                    name: true\n                }\n            }\n        }\n    });\n    console.log(res2);\n\n    const res3 = await prisma.department.findUnique({\n        where: {\n            id: 1\n        }\n    }).employees();\n    console.log(res3);\n}\n\ntest3();\n"})}),"\n",(0,s.jsx)(n.p,{children:"查询 department 的时候，通过 include 指定关联查询出 employees。"}),"\n",(0,s.jsx)(n.p,{children:"include 还可以指定 where 等查询的参数，进一步过滤。"}),"\n",(0,s.jsx)(n.p,{children:"此外，你也可以在查出 department 后调用 empolyees() 方法来查询。"}),"\n",(0,s.jsx)(n.p,{children:"可以看到，都能正确查出关联数据："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"再就是关联更新："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function test4() {\n    const res1 = await prisma.department.update({\n        where: {\n            id: 1\n        },\n        data: {\n            name: '销售部',\n            employees: {\n                create: [\n                    {\n                        name: '小刘',\n                        phone: '13266666666'\n                    }\n                ]\n            }\n        }\n    });\n    console.log(res1);\n}\n\ntest4();\n"})}),"\n",(0,s.jsx)(n.p,{children:"比如我在更新 department 的时候关联插入了一条 employee 的记录。"}),"\n",(0,s.jsx)(n.p,{children:"跑一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 mysql workbench 里可以看到，id 为 1 的 department 更新了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"关联插入了一条 employee 的记录："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"更新 department 的时候，除了可以插入 empolyee 的数据，也可以和别的 empolyee 建立关联。"}),"\n",(0,s.jsx)(n.p,{children:"比如 id 为 4 的 empolyee："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"现在他关联的是 id 为 2 的 department。"}),"\n",(0,s.jsx)(n.p,{children:"我们 update 的时候使用 connect 和它关联："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function test5() {\n    const res1 = await prisma.department.update({\n        where: {\n            id: 1\n        },\n        data: {\n            name: '销售部',\n            employees: {\n                connect: [\n                    {\n                        id: 4\n                    }\n                ]\n            }\n        }\n    });\n    console.log(res1);\n}\ntest5();\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"跑一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"刷新可以看到，id 为 4 的 employee 关联的 department 就变了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"如果是某个 id 的数据存在就 connect，不存在就 create 呢？"}),"\n",(0,s.jsx)(n.p,{children:"可以这样写："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function test6() {\n    const res1 = await prisma.department.update({\n        where: {\n            id: 1\n        },\n        data: {\n            name: '销售部',\n            employees: {\n                connectOrCreate: {\n                    where: {\n                        id: 6\n                    },\n                    create: {\n                        id: 6,\n                        name: '小张',\n                        phone: '13256665555'\n                    }\n                }\n            }\n        }\n    });\n    console.log(res1);\n}\ntest6();\n"})}),"\n",(0,s.jsx)(n.p,{children:"第一次跑，执行的是 insert："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"第二次跑，就是 update 了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"也就是说，update 的时候可以通过 create、connect、connectOrCreate 来插入新的关联 model 的记录或者关联已有的记录。"}),"\n",(0,s.jsx)(n.p,{children:"当然，create 的时候也可以这样："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"效果一样，就不一个个测试了。"}),"\n",(0,s.jsx)(n.p,{children:"再就是删除："}),"\n",(0,s.jsx)(n.p,{children:"如果我们想删除 id 为 1 的 department 的所有 empolyee，可以这样写："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function test7() {\n    await prisma.employee.deleteMany({\n        where: {\n            department: {\n                id: 1\n            }\n        },\n    });\n}\ntest7();\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这就是多个 model 关联时的 CRUD。"}),"\n",(0,s.jsx)(n.p,{children:"此外，Prisma 还可以直接执行 sql："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function test8() {\n    await prisma.$executeRaw`TRUNCATE TABLE Employee`;\n\n    const res = await prisma.$queryRaw`select * from Department`;\n    console.log(res);\n}\ntest8();\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样，当上面的 api 都不能满足需求的时候，你就可以直接执行 sql。"}),"\n",(0,s.jsxs)(n.p,{children:["案例代码在",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/prisma-client-api2",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节我们过了一遍多 model 关联的时候涉及到多个表的 CRUD 方法。"}),"\n",(0,s.jsx)(n.p,{children:"还是 findXxx、updateXxx、deleteXxx、createXxx 那些方法，只不过查询的时候可以通过 include 包含关联记录，新增修改的时候可以通过 create、connect、connectOrCreate 来关联或者插入记录。"}),"\n",(0,s.jsx)(n.p,{children:"此外，你还可以直接执行 sql。"}),"\n",(0,s.jsx)(n.p,{children:"通过这些 api，我们就能完成各种 CRUD 需求了。"})]})}function L(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(M,{...e})}):M(e)}let X=L;L.__RSPRESS_PAGE_META={},L.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F150.%20Prisma%20Client%20%E5%A4%9A%E8%A1%A8%20CRUD%20%E7%9A%84%E5%85%A8%E9%83%A8%20api.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"150. Prisma Client 多表 CRUD 的全部 api",headingTitle:"150. Prisma Client 多表 CRUD 的全部 api",frontmatter:{}}}}]);