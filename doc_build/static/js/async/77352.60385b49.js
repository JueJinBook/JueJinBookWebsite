"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["77352"],{744397:function(e,n,d){d.r(n),d.d(n,{default:()=>w});var r=d(552676),s=d(740453);let c=d.p+"static/image/48e2fb5a496bc44855f5eef84af87459.52d589fe.webp",i=d.p+"static/image/2afb59c45c23bbe82b51e95c1b0c5102.e78c8b99.webp",a=d.p+"static/image/12cc4f374c359082723a3d3f595e63e3.9c6d0514.webp",h=d.p+"static/image/34e1f8e85617c28140cc070f3ecdeb32.b7aaf300.webp",t=d.p+"static/image/44b008f1b610f777fc7598c7e0a00186.985f35c9.webp",l=d.p+"static/image/f0252f1f50252fde501cddae219fe574.a68eb3fc.webp",x=d.p+"static/image/c0c4df77d8ee87b2fb1108766ee8a150.1f6ee086.webp",j=d.p+"static/image/78bcb37e60e78f8f42d4a8cfa53d4da3.ef295e37.webp",p=d.p+"static/image/0605520192200c68c75fe8a6bd0bbb39.f4a50558.webp",m=d.p+"static/image/92a44cdebd2310f712dfdac3f2e0952e.99b12dc4.webp",o=d.p+"static/image/ff8dc4bb6a921bf70cf2c93b19ca6870.d2e20b3f.webp",u=d.p+"static/image/524e9c668a6f186815e76b6a805ec2c5.31e7033f.webp",f=d.p+"static/image/c78aa5ac6ae449820c6532c91b5a8506.62b0d8e0.webp",b=d.p+"static/image/d440948d5a73bf19d7f574c8221c02e4.b6d54cac.webp",E=d.p+"static/image/1d3fa16fbdb5c897ddc8e45c917ee025.81a9ec60.webp";function g(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",blockquote:"blockquote",br:"br",h3:"h3",h4:"h4",code:"code",pre:"pre",img:"img"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"10快慢指针与多指针玩转链表复杂操作",children:["10.快慢指针与多指针——玩转链表复杂操作",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10快慢指针与多指针玩转链表复杂操作",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"快慢指针与多指针",children:["快慢指针与多指针",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#快慢指针与多指针",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["链表题目中，有一类会涉及到",(0,r.jsx)(n.strong,{children:"反复的遍历"}),"。涉及反复遍历的题目，题目本身虽然不会直接跟你说“你好，我是一道需要反复遍历的题目”，但只要你尝试用常规的思路分析它，你会发现它一定涉及反复遍历；同时，涉及反复遍历的题目，还有一个更明显的特征，就是它们往往会涉及",(0,r.jsx)(n.strong,{children:"相对复杂的链表操作"}),"，比如反转、指定位置的删除等等。"]}),"\n",(0,r.jsx)(n.p,{children:"解决这类问题，我们用到的是双指针中的“快慢指针”。快慢指针指的是两个一前一后的指针，两个指针往同一个方向走，只是一个快一个慢。快慢指针严格来说只能有俩，不过实际做题中，可能会出现一前、一中、一后的三个指针，这种超过两个指针的解题方法也叫“多指针法”。"}),"\n",(0,r.jsx)(n.p,{children:"快慢指针+多指针，双管齐下，可以帮助我们解决链表中的大部分复杂操作问题。"}),"\n",(0,r.jsxs)(n.h2,{id:"快慢指针删除链表的倒数第-n-个结点",children:["快慢指针——删除链表的倒数第 N 个结点",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#快慢指针删除链表的倒数第-n-个结点",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"真题描述：给定一个链表，删除链表的倒数第\xa0n\xa0个结点，并且返回链表的头结点。"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["示例：\n给定一个链表: 1->2->3->4->5, 和 n = 2.",(0,r.jsx)(n.br,{}),"\n","当删除了倒数第二个结点后，链表变为 1->2->3->5.",(0,r.jsx)(n.br,{}),"\n","说明：\n给定的 n 保证是有效的。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"思路分析",children:["思路分析",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思路分析",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"小贴士dummy-结点的使用",children:["小贴士：dummy 结点的使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小贴士dummy-结点的使用",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["上一节我给大家介绍了 ",(0,r.jsx)(n.code,{children:"dummy"})," 结点：它可以帮我们处理掉头结点为空的边界问题，帮助我们简化解题过程。因此涉及链表操作、尤其是涉及结点删除的题目（对前驱结点的存在性要求比较高），我都建议大家写代码的时候直接把 ",(0,r.jsx)(n.code,{children:"dummy"})," 给用起来，建立好的编程习惯："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const dummy = new ListNode()\n// 这里的 head 是链表原有的第一个结点\ndummy.next = head\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"倒数变正数",children:["“倒数”变“正数”",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#倒数变正数",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"链表的删除我们上节已经讲过，相信都难不倒大家。这道题的难点实际在于这个“倒数第 N 个”如何定位。"}),"\n",(0,r.jsxs)(n.p,{children:["考虑到咱们的遍历不可能从后往前走，因此这个“倒数第 N 个” 咱们完全可以转换为“正数第 ",(0,r.jsx)(n.code,{children:"len - n + 1"}),'"个。这里这个 ',(0,r.jsx)(n.code,{children:"len"})," 代表链表的总长度，比如说咱们链表长为 7，那么倒数第 1 个就是正数第 7 个。按照这个思路往下分析，如果走直接遍历这条路，那么这个 ",(0,r.jsx)(n.code,{children:"len"})," 就非常关键了。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们可以直接遍历两趟：第一趟，设置一个变量 ",(0,r.jsx)(n.code,{children:"count = 0"}),"，每遍历到一个不为空的结点，",(0,r.jsx)(n.code,{children:"count"})," 就加 1，一直遍历到链表结束为止，得出链表的总长度 ",(0,r.jsx)(n.code,{children:"len"}),"；根据这个总长度，咱们就可以算出倒数第 ",(0,r.jsx)(n.code,{children:"n"})," 个到底是正数第几个了（",(0,r.jsx)(n.code,{children:"M = len - n + 1"}),"），那么我们遍历到第",(0,r.jsx)(n.code,{children:" M - 1"}),"（也就是 ",(0,r.jsx)(n.code,{children:"len - n"}),"） 个结点的时候就可以停下来，执行删除操作（想一想，为什么是第 ",(0,r.jsx)(n.code,{children:"M-1"})," 个，而不是第 ",(0,r.jsx)(n.code,{children:"M"})," 个？如果你认真读了我们前面的章节，心中一定会有一个清晰的答案^_^）"]}),"\n",(0,r.jsx)(n.p,{children:"不过这种超过一次的遍历必然需要引起我们的注意，我们应该主动去思考，“如果一次遍历来解决这个问题，我可以怎么做？”，这时候，就要请双指针法来帮忙了。"}),"\n",(0,r.jsxs)(n.h4,{id:"快慢指针登场",children:["快慢指针登场",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#快慢指针登场",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["按照我们已经预告过的思路，首先两个指针 ",(0,r.jsx)(n.code,{children:"slow"})," 和 ",(0,r.jsx)(n.code,{children:"fast"}),"，全部指向链表的起始位——",(0,r.jsx)(n.code,{children:"dummy"})," 结点："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["快指针先出发！闷头走上 ",(0,r.jsx)(n.code,{children:"n"})," 步，在第 ",(0,r.jsx)(n.code,{children:"n"})," 个结点处打住，这里 ",(0,r.jsx)(n.code,{children:"n=2"}),"："]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:b,alt:""}),"\n然后，快慢指针一起前进，当快指针前进到最后一个结点处时，两个指针再一起停下来："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:o,alt:""}),"\n此时，慢指针所指的位置，就是倒数第 ",(0,r.jsx)(n.code,{children:"n"})," 个结点的前一个结点："]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:m,alt:""}),"\n我们基于这个结点来做删除，可以说是手到擒来："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["到这里，我们总结一下：",(0,r.jsx)(n.br,{}),"\n","链表删除问题中，若走两次遍历，我们做了两件事：",(0,r.jsx)(n.br,{}),"\n","1.求长度",(0,r.jsx)(n.br,{}),"\n","2.做减法，找定位。"]}),"\n",(0,r.jsxs)(n.p,{children:["若用快慢指针，我们其实是把做减法和找定位这个过程给融合了。通过快指针先行一步、接着快慢指针一起前进这个操作，巧妙地把两个指针之间的差值保持在了“",(0,r.jsx)(n.code,{children:"n"}),"”上（",(0,r.jsx)(n.strong,{children:"用空间换时间，本质上其实就是对关键信息进行提前记忆，这里咱们相当于用两个指针对差值实现了记忆"}),"），这样当快指针走到链表末尾（第 ",(0,r.jsx)(n.code,{children:"len"})," 个）时，慢指针刚好就在 ",(0,r.jsx)(n.code,{children:"len - n"})," 这个地方稳稳落地。"]}),"\n",(0,r.jsxs)(n.h3,{id:"编码实现",children:["编码实现",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编码实现",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nconst removeNthFromEnd = function(head, n) {\n    // 初始化 dummy 结点\n    const dummy = new ListNode()\n    // dummy指向头结点\n    dummy.next = head\n    // 初始化快慢指针，均指向dummy\n    let fast = dummy\n    let slow = dummy\n\n    // 快指针闷头走 n 步\n    while(n!==0){\n        fast = fast.next\n        n--\n    }\n    \n    // 快慢指针一起走\n    while(fast.next){\n        fast = fast.next\n        slow = slow.next\n    }\n    \n    // 慢指针删除自己的后继结点\n    slow.next = slow.next.next\n    // 返回头结点\n    return dummy.next\n};\n\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"多指针法链表的反转",children:["多指针法——链表的反转",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#多指针法链表的反转",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"完全反转一个链表",children:["完全反转一个链表",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#完全反转一个链表",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"真题描述：定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["示例:",(0,r.jsx)(n.br,{}),"\n","输入: 1->2->3->4->5->NULL",(0,r.jsx)(n.br,{}),"\n","输出: 5->4->3->2->1->NULL"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"思路解读",children:["思路解读",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思路解读",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["这道题虽然是一道新题，但你要说你完全没思路，我真的哭了orz。老哥，我真想把这句话刻你显示器上——",(0,r.jsx)(n.strong,{children:"处理链表的本质，是处理链表结点之间的指针关系"}),"。",(0,r.jsx)(n.br,{}),"\n","我啥也不说，就给你一张链表的结构图："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["来，你告诉我，我如何把这货颠倒个顺序呢？",(0,r.jsx)(n.br,{}),"\n","是不是想办法把每个结点 next 指针的指向给反过来就行了："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"你只要能想到这一步，就说明你对链表操作类题目已经有了最关键的感知，给你双击666~"}),"\n",(0,r.jsx)(n.p,{children:"接下来我们需要琢磨的是如何去反转指针的指向，这里我们需要用到三个指针，它们分别指向目标结点（cur）、目标结点的前驱结点（pre）、目标结点的后继结点（next）。这里咱们随便找个结点来开刀："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["这里我只需要一个简单的",(0,r.jsx)(n.code,{children:"cur.next = pre"}),"，就做到了 next 指针的反转："]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:l,alt:""}),(0,r.jsx)(n.br,{}),"\n","有同学会说：那 ",(0,r.jsx)(n.code,{children:"next"})," 不是完全没用到吗？",(0,r.jsx)(n.br,{}),"\n","当然有用，你瞅瞅，咱们反转完链表变成啥样了："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这会儿我要是不用 next 给你指着 cur 原本的后继结点，你上哪去定位下一个结点呢？遍历都没法继续了嗷。"}),"\n",(0,r.jsx)(n.p,{children:"咱们从第一个结点开始，每个结点都给它进行一次 next 指针的反转。到最后一个结点时，整个链表就已经被我们彻底反转掉了。"}),"\n",(0,r.jsxs)(n.h3,{id:"编码实现-1",children:["编码实现",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编码实现-1",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nconst reverseList = function(head) {\n    // 初始化前驱结点为 null\n    let pre = null;\n    // 初始化目标结点为头结点\n    let cur = head;\n    // 只要目标结点不为 null，遍历就得继续\n    while (cur !== null) {\n        // 记录一下 next 结点\n        let next = cur.next;\n        // 反转指针\n        cur.next = pre;\n        // pre 往前走一步\n        pre = cur;\n        // cur往前走一步\n        cur = next;\n    }\n    // 反转结束后，pre 就会变成新链表的头结点\n    return pre\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"局部反转一个链表",children:["局部反转一个链表",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#局部反转一个链表",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"反转链表真是座金矿，反转完整体反转局部，反转完局部还能每 k 个一组花式反转（最后这个略难，我们会放在真题训练环节来做）。虽然难度依次进阶，但只要把握住核心思想就没问题，下面咱们来看看如何反转局部："}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"真题描述：反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"说明:\n1 ≤\xa0m\xa0≤\xa0n\xa0≤ 链表长度。"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["示例:",(0,r.jsx)(n.br,{}),"\n","输入: 1->2->3->4->5->NULL, m = 2, n = 4",(0,r.jsx)(n.br,{}),"\n","输出: 1->4->3->2->5->NULL"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"思路解读-1",children:["思路解读",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思路解读-1",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们仍然是从指针反转来入手："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"按照题中的示例，假如我们需要反转的是链表的第 2-4 之间的结点，那么对应的指针逆序后会是这个样子："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"4指3，3指2，这都没问题，关键在于，如何让1指向4、让2指向5呢？这就要求我们在单纯的重复“逆序”这个动作之外，还需要对被逆序的区间前后的两个结点做额外的处理："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"由于我们遍历链表的顺序是从前往后遍历，那么为了避免结点1和结点2随着遍历向后推进被遗失，我们需要提前把1结点缓存下来。而结点5就没有这么麻烦了：随着遍历的进行，当我们完成了结点4的指针反转后，此时\ncur 指针就恰好指在结点5上："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"此时我们直接将结点2的 next 指针指向 cur、将结点1的 next 指针指向 pre 即可。"}),"\n",(0,r.jsxs)(n.h3,{id:"编码实现-2",children:["编码实现",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编码实现-2",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"/**\n * @param {ListNode} head\n * @param {number} m\n * @param {number} n\n * @return {ListNode}\n */\n// 入参是头结点、m、n\nconst reverseBetween = function(head, m, n) {\n    // 定义pre、cur，用leftHead来承接整个区间的前驱结点\n    let pre,cur,leftHead\n    // 别忘了用 dummy 嗷\n    const dummy = new ListNode()  \n    // dummy后继结点是头结点\n    dummy.next = head\n    // p是一个游标，用于遍历，最初指向 dummy\n    let p = dummy  \n    // p往前走 m-1 步，走到整个区间的前驱结点处\n    for(let i=0;i<m-1;i++){\n        p = p.next\n    }\n    // 缓存这个前驱结点到 leftHead 里\n    leftHead = p\n    // start 是反转区间的第一个结点\n    let start = leftHead.next  \n    // pre 指向start\n    pre = start\n    // cur 指向 start 的下一个结点\n    cur = pre.next\n    // 开始重复反转动作\n    for(let i=m;i<n;i++){\n        let next = cur.next\n        cur.next = pre\n        pre = cur\n        cur = next\n    }\n    //  leftHead 的后继结点此时为反转后的区间的第一个结点\n    leftHead.next = pre\n    // 将区间内反转后的最后一个结点 next 指向 cur\n    start.next=cur\n    // dummy.next 永远指向链表头结点\n    return dummy.next\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"小贴士：楼上的两道反转题目，都可以用递归来实现，你试试？"}),"\n",(0,r.jsx)(n.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function N(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}let w=N;N.__RSPRESS_PAGE_META={},N.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%A2%E8%AF%95%EF%BC%9A%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%A4%A7%E5%8E%82%E7%9C%9F%E9%A2%98%E8%AE%AD%E7%BB%83%2F10.%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E4%B8%8E%E5%A4%9A%E6%8C%87%E9%92%88%E2%80%94%E2%80%94%E7%8E%A9%E8%BD%AC%E9%93%BE%E8%A1%A8%E5%A4%8D%E6%9D%82%E6%93%8D%E4%BD%9C.md"]={toc:[{text:"快慢指针与多指针",id:"快慢指针与多指针",depth:2},{text:"快慢指针——删除链表的倒数第 N 个结点",id:"快慢指针删除链表的倒数第-n-个结点",depth:2},{text:"思路分析",id:"思路分析",depth:3},{text:"小贴士：dummy 结点的使用",id:"小贴士dummy-结点的使用",depth:4},{text:"“倒数”变“正数”",id:"倒数变正数",depth:4},{text:"快慢指针登场",id:"快慢指针登场",depth:4},{text:"编码实现",id:"编码实现",depth:3},{text:"多指针法——链表的反转",id:"多指针法链表的反转",depth:2},{text:"完全反转一个链表",id:"完全反转一个链表",depth:3},{text:"思路解读",id:"思路解读",depth:3},{text:"编码实现",id:"编码实现-1",depth:3},{text:"局部反转一个链表",id:"局部反转一个链表",depth:3},{text:"思路解读",id:"思路解读-1",depth:3},{text:"编码实现",id:"编码实现-2",depth:3}],title:"10.快慢指针与多指针——玩转链表复杂操作",headingTitle:"10.快慢指针与多指针——玩转链表复杂操作",frontmatter:{}}}}]);