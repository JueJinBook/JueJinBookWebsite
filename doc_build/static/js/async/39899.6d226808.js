"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["39899"],{640267:function(e,n,r){r.r(n),r.d(n,{default:()=>o});var c=r(552676),a=r(740453);function s(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",ol:"ol",li:"li"},(0,a.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"28异步遍历器",children:["28.异步遍历器",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#28异步遍历器",children:"#"})]}),"\n",(0,c.jsxs)(n.h2,{id:"同步遍历器的问题",children:["同步遍历器的问题",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#同步遍历器的问题",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的",(0,c.jsx)(n.code,{children:"next"}),"方法，就会得到一个对象，表示当前遍历指针所在的那个位置的信息。",(0,c.jsx)(n.code,{children:"next"}),"方法返回的对象的结构是",(0,c.jsx)(n.code,{children:"{value, done}"}),"，其中",(0,c.jsx)(n.code,{children:"value"}),"表示当前的数据的值，",(0,c.jsx)(n.code,{children:"done"}),"是一个布尔值，表示遍历是否结束。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"function idMaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return { value: index++, done: false };\n    }\n  };\n}\n\nconst it = idMaker();\n\nit.next().value // 0\nit.next().value // 1\nit.next().value // 2\n// ...\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，变量",(0,c.jsx)(n.code,{children:"it"}),"是一个遍历器（iterator）。每次调用",(0,c.jsx)(n.code,{children:"it.next()"}),"方法，就返回一个对象，表示当前遍历位置的信息。"]}),"\n",(0,c.jsxs)(n.p,{children:["这里隐含着一个规定，",(0,c.jsx)(n.code,{children:"it.next()"}),"方法必须是同步的，只要调用就必须立刻返回值。也就是说，一旦执行",(0,c.jsx)(n.code,{children:"it.next()"}),"方法，就必须同步地得到",(0,c.jsx)(n.code,{children:"value"}),"和",(0,c.jsx)(n.code,{children:"done"}),"这两个属性。如果遍历指针正好指向同步操作，当然没有问题，但对于异步操作，就不太合适了。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"function idMaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return new Promise(function (resolve, reject) {\n        setTimeout(() => {\n          resolve({ value: index++, done: false });\n        }, 1000);\n      });\n    }\n  };\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"next()"}),"方法返回的是一个 Promise 对象，这样就不行，不符合 Iterator 协议，只要代码里面包含异步操作都不行。也就是说，Iterator 协议里面",(0,c.jsx)(n.code,{children:"next()"}),"方法只能包含同步操作。"]}),"\n",(0,c.jsxs)(n.p,{children:["目前的解决方法是，将异步操作包装成 Thunk 函数或者 Promise 对象，即",(0,c.jsx)(n.code,{children:"next()"}),"方法返回值的",(0,c.jsx)(n.code,{children:"value"}),"属性是一个 Thunk 函数或者 Promise 对象，等待以后返回真正的值，而",(0,c.jsx)(n.code,{children:"done"}),"属性则还是同步产生的。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"function idMaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return {\n        value: new Promise(resolve => setTimeout(() => resolve(index++), 1000)),\n        done: false\n      };\n    }\n  };\n}\n\nconst it = idMaker();\n\nit.next().value.then(o => console.log(o)) // 0\nit.next().value.then(o => console.log(o)) // 1\nit.next().value.then(o => console.log(o)) // 2\n// ...\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"value"}),"属性的返回值是一个 Promise 对象，用来放置异步操作。但是这样写很麻烦，不太符合直觉，语义也比较绕。"]}),"\n",(0,c.jsxs)(n.p,{children:["ES2018 ",(0,c.jsx)(n.a,{href:"https://github.com/tc39/proposal-async-iteration",target:"_blank",rel:"noopener noreferrer",children:"引入"}),"了“异步遍历器”（Async Iterator），为异步操作提供原生的遍历器接口，即",(0,c.jsx)(n.code,{children:"value"}),"和",(0,c.jsx)(n.code,{children:"done"}),"这两个属性都是异步产生。"]}),"\n",(0,c.jsxs)(n.h2,{id:"异步遍历的接口",children:["异步遍历的接口",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#异步遍历的接口",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["异步遍历器的最大的语法特点，就是调用遍历器的",(0,c.jsx)(n.code,{children:"next"}),"方法，返回的是一个 Promise 对象。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"asyncIterator\n  .next()\n  .then(\n    ({ value, done }) => /* ... */\n  );\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"asyncIterator"}),"是一个异步遍历器，调用",(0,c.jsx)(n.code,{children:"next"}),"方法以后，返回一个 Promise 对象。因此，可以使用",(0,c.jsx)(n.code,{children:"then"}),"方法指定，这个 Promise 对象的状态变为",(0,c.jsx)(n.code,{children:"resolve"}),"以后的回调函数。回调函数的参数，则是一个具有",(0,c.jsx)(n.code,{children:"value"}),"和",(0,c.jsx)(n.code,{children:"done"}),"两个属性的对象，这个跟同步遍历器是一样的。"]}),"\n",(0,c.jsxs)(n.p,{children:["我们知道，一个对象的同步遍历器的接口，部署在",(0,c.jsx)(n.code,{children:"Symbol.iterator"}),"属性上面。同样地，对象的异步遍历器接口，部署在",(0,c.jsx)(n.code,{children:"Symbol.asyncIterator"}),"属性上面。不管是什么样的对象，只要它的",(0,c.jsx)(n.code,{children:"Symbol.asyncIterator"}),"属性有值，就表示应该对它进行异步遍历。"]}),"\n",(0,c.jsx)(n.p,{children:"下面是一个异步遍历器的例子。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const asyncIterable = createAsyncIterable(['a', 'b']);\nconst asyncIterator = asyncIterable[Symbol.asyncIterator]();\n\nasyncIterator\n.next()\n.then(iterResult1 => {\n  console.log(iterResult1); // { value: 'a', done: false }\n  return asyncIterator.next();\n})\n.then(iterResult2 => {\n  console.log(iterResult2); // { value: 'b', done: false }\n  return asyncIterator.next();\n})\n.then(iterResult3 => {\n  console.log(iterResult3); // { value: undefined, done: true }\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，异步遍历器其实返回了两次值。第一次调用的时候，返回一个 Promise 对象；等到 Promise 对象",(0,c.jsx)(n.code,{children:"resolve"}),"了，再返回一个表示当前数据成员信息的对象。这就是说，异步遍历器与同步遍历器最终行为是一致的，只是会先返回 Promise 对象，作为中介。"]}),"\n",(0,c.jsxs)(n.p,{children:["由于异步遍历器的",(0,c.jsx)(n.code,{children:"next"}),"方法，返回的是一个 Promise 对象。因此，可以把它放在",(0,c.jsx)(n.code,{children:"await"}),"命令后面。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function f() {\n  const asyncIterable = createAsyncIterable(['a', 'b']);\n  const asyncIterator = asyncIterable[Symbol.asyncIterator]();\n  console.log(await asyncIterator.next());\n  // { value: 'a', done: false }\n  console.log(await asyncIterator.next());\n  // { value: 'b', done: false }\n  console.log(await asyncIterator.next());\n  // { value: undefined, done: true }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"next"}),"方法用",(0,c.jsx)(n.code,{children:"await"}),"处理以后，就不必使用",(0,c.jsx)(n.code,{children:"then"}),"方法了。整个流程已经很接近同步处理了。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，异步遍历器的",(0,c.jsx)(n.code,{children:"next"}),"方法是可以连续调用的，不必等到上一步产生的 Promise 对象",(0,c.jsx)(n.code,{children:"resolve"}),"以后再调用。这种情况下，",(0,c.jsx)(n.code,{children:"next"}),"方法会累积起来，自动按照每一步的顺序运行下去。下面是一个例子，把所有的",(0,c.jsx)(n.code,{children:"next"}),"方法放在",(0,c.jsx)(n.code,{children:"Promise.all"}),"方法里面。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const asyncIterable = createAsyncIterable(['a', 'b']);\nconst asyncIterator = asyncIterable[Symbol.asyncIterator]();\nconst [{value: v1}, {value: v2}] = await Promise.all([\n  asyncIterator.next(), asyncIterator.next()\n]);\n\nconsole.log(v1, v2); // a b\n"})}),"\n",(0,c.jsxs)(n.p,{children:["另一种用法是一次性调用所有的",(0,c.jsx)(n.code,{children:"next"}),"方法，然后",(0,c.jsx)(n.code,{children:"await"}),"最后一步操作。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function runner() {\n  const writer = openFile('someFile.txt');\n  writer.next('hello');\n  writer.next('world');\n  await writer.return();\n}\n\nrunner();\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"for-awaitof",children:["for await...of",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#for-awaitof",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["前面介绍过，",(0,c.jsx)(n.code,{children:"for...of"}),"循环用于遍历同步的 Iterator 接口。新引入的",(0,c.jsx)(n.code,{children:"for await...of"}),"循环，则是用于遍历异步的 Iterator 接口。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function f() {\n  for await (const x of createAsyncIterable(['a', 'b'])) {\n    console.log(x);\n  }\n}\n// a\n// b\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"createAsyncIterable()"}),"返回一个拥有异步遍历器接口的对象，",(0,c.jsx)(n.code,{children:"for...of"}),"循环自动调用这个对象的异步遍历器的",(0,c.jsx)(n.code,{children:"next"}),"方法，会得到一个 Promise 对象。",(0,c.jsx)(n.code,{children:"await"}),"用来处理这个 Promise 对象，一旦",(0,c.jsx)(n.code,{children:"resolve"}),"，就把得到的值（",(0,c.jsx)(n.code,{children:"x"}),"）传入",(0,c.jsx)(n.code,{children:"for...of"}),"的循环体。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"for await...of"}),"循环的一个用途，是部署了 asyncIterable 操作的异步接口，可以直接放入这个循环。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let body = '';\n\nasync function f() {\n  for await(const data of req) body += data;\n  const parsed = JSON.parse(body);\n  console.log('got', parsed);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"req"}),"是一个 asyncIterable 对象，用来异步读取数据。可以看到，使用",(0,c.jsx)(n.code,{children:"for await...of"}),"循环以后，代码会非常简洁。"]}),"\n",(0,c.jsxs)(n.p,{children:["如果",(0,c.jsx)(n.code,{children:"next"}),"方法返回的 Promise 对象被",(0,c.jsx)(n.code,{children:"reject"}),"，",(0,c.jsx)(n.code,{children:"for await...of"}),"就会报错，要用",(0,c.jsx)(n.code,{children:"try...catch"}),"捕捉。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function () {\n  try {\n    for await (const x of createRejectingIterable()) {\n      console.log(x);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["注意，",(0,c.jsx)(n.code,{children:"for await...of"}),"循环也可以用于同步遍历器。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"(async function () {\n  for await (const x of ['a', 'b']) {\n    console.log(x);\n  }\n})();\n// a\n// b\n"})}),"\n",(0,c.jsx)(n.p,{children:"Node v10 支持异步遍历器，Stream 就部署了这个接口。下面是读取文件的传统写法与异步遍历器写法的差异。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 传统写法\nfunction main(inputFilePath) {\n  const readStream = fs.createReadStream(\n    inputFilePath,\n    { encoding: 'utf8', highWaterMark: 1024 }\n  );\n  readStream.on('data', (chunk) => {\n    console.log('>>> '+chunk);\n  });\n  readStream.on('end', () => {\n    console.log('### DONE ###');\n  });\n}\n\n// 异步遍历器写法\nasync function main(inputFilePath) {\n  const readStream = fs.createReadStream(\n    inputFilePath,\n    { encoding: 'utf8', highWaterMark: 1024 }\n  );\n\n  for await (const chunk of readStream) {\n    console.log('>>> '+chunk);\n  }\n  console.log('### DONE ###');\n}\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"异步-generator-函数",children:["异步 Generator 函数",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#异步-generator-函数",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"就像 Generator 函数返回一个同步遍历器对象一样，异步 Generator 函数的作用，是返回一个异步遍历器对象。"}),"\n",(0,c.jsxs)(n.p,{children:["在语法上，异步 Generator 函数就是",(0,c.jsx)(n.code,{children:"async"}),"函数与 Generator 函数的结合。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function* gen() {\n  yield 'hello';\n}\nconst genObj = gen();\ngenObj.next().then(x => console.log(x));\n// { value: 'hello', done: false }\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"gen"}),"是一个异步 Generator 函数，执行后返回一个异步 Iterator 对象。对该对象调用",(0,c.jsx)(n.code,{children:"next"}),"方法，返回一个 Promise 对象。"]}),"\n",(0,c.jsx)(n.p,{children:"异步遍历器的设计目的之一，就是 Generator 函数处理同步操作和异步操作时，能够使用同一套接口。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 同步 Generator 函数\nfunction* map(iterable, func) {\n  const iter = iterable[Symbol.iterator]();\n  while (true) {\n    const {value, done} = iter.next();\n    if (done) break;\n    yield func(value);\n  }\n}\n\n// 异步 Generator 函数\nasync function* map(iterable, func) {\n  const iter = iterable[Symbol.asyncIterator]();\n  while (true) {\n    const {value, done} = await iter.next();\n    if (done) break;\n    yield func(value);\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"map"}),"是一个 Generator 函数，第一个参数是可遍历对象",(0,c.jsx)(n.code,{children:"iterable"}),"，第二个参数是一个回调函数",(0,c.jsx)(n.code,{children:"func"}),"。",(0,c.jsx)(n.code,{children:"map"}),"的作用是将",(0,c.jsx)(n.code,{children:"iterable"}),"每一步返回的值，使用",(0,c.jsx)(n.code,{children:"func"}),"进行处理。上面有两个版本的",(0,c.jsx)(n.code,{children:"map"}),"，前一个处理同步遍历器，后一个处理异步遍历器，可以看到两个版本的写法基本上是一致的。"]}),"\n",(0,c.jsx)(n.p,{children:"下面是另一个异步 Generator 函数的例子。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function* readLines(path) {\n  let file = await fileOpen(path);\n\n  try {\n    while (!file.EOF) {\n      yield await file.readLine();\n    }\n  } finally {\n    await file.close();\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，异步操作前面使用",(0,c.jsx)(n.code,{children:"await"}),"关键字标明，即",(0,c.jsx)(n.code,{children:"await"}),"后面的操作，应该返回 Promise 对象。凡是使用",(0,c.jsx)(n.code,{children:"yield"}),"关键字的地方，就是",(0,c.jsx)(n.code,{children:"next"}),"方法停下来的地方，它后面的表达式的值（即",(0,c.jsx)(n.code,{children:"await file.readLine()"}),"的值），会作为",(0,c.jsx)(n.code,{children:"next()"}),"返回对象的",(0,c.jsx)(n.code,{children:"value"}),"属性，这一点是与同步 Generator 函数一致的。"]}),"\n",(0,c.jsxs)(n.p,{children:["异步 Generator 函数内部，能够同时使用",(0,c.jsx)(n.code,{children:"await"}),"和",(0,c.jsx)(n.code,{children:"yield"}),"命令。可以这样理解，",(0,c.jsx)(n.code,{children:"await"}),"命令用于将外部操作产生的值输入函数内部，",(0,c.jsx)(n.code,{children:"yield"}),"命令用于将函数内部的值输出。"]}),"\n",(0,c.jsx)(n.p,{children:"上面代码定义的异步 Generator 函数的用法如下。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"(async function () {\n  for await (const line of readLines(filePath)) {\n    console.log(line);\n  }\n})()\n"})}),"\n",(0,c.jsxs)(n.p,{children:["异步 Generator 函数可以与",(0,c.jsx)(n.code,{children:"for await...of"}),"循环结合起来使用。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function* prefixLines(asyncIterable) {\n  for await (const line of asyncIterable) {\n    yield '> ' + line;\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["异步 Generator 函数的返回值是一个异步 Iterator，即每次调用它的",(0,c.jsx)(n.code,{children:"next"}),"方法，会返回一个 Promise 对象，也就是说，跟在",(0,c.jsx)(n.code,{children:"yield"}),"命令后面的，应该是一个 Promise 对象。如果像上面那个例子那样，",(0,c.jsx)(n.code,{children:"yield"}),"命令后面是一个字符串，会被自动包装成一个 Promise 对象。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"function fetchRandom() {\n  const url = 'https://www.random.org/decimal-fractions/'\n    + '?num=1&dec=10&col=1&format=plain&rnd=new';\n  return fetch(url);\n}\n\nasync function* asyncGenerator() {\n  console.log('Start');\n  const result = await fetchRandom(); // (A)\n  yield 'Result: ' + await result.text(); // (B)\n  console.log('Done');\n}\n\nconst ag = asyncGenerator();\nag.next().then(({value, done}) => {\n  console.log(value);\n})\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"ag"}),"是",(0,c.jsx)(n.code,{children:"asyncGenerator"}),"函数返回的异步遍历器对象。调用",(0,c.jsx)(n.code,{children:"ag.next()"}),"以后，上面代码的执行顺序如下。"]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"ag.next()"}),"立刻返回一个 Promise 对象。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"asyncGenerator"}),"函数开始执行，打印出",(0,c.jsx)(n.code,{children:"Start"}),"。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"await"}),"命令返回一个 Promise 对象，",(0,c.jsx)(n.code,{children:"asyncGenerator"}),"函数停在这里。"]}),"\n",(0,c.jsxs)(n.li,{children:["A 处变成 fulfilled 状态，产生的值放入",(0,c.jsx)(n.code,{children:"result"}),"变量，",(0,c.jsx)(n.code,{children:"asyncGenerator"}),"函数继续往下执行。"]}),"\n",(0,c.jsxs)(n.li,{children:["函数在 B 处的",(0,c.jsx)(n.code,{children:"yield"}),"暂停执行，一旦",(0,c.jsx)(n.code,{children:"yield"}),"命令取到值，",(0,c.jsx)(n.code,{children:"ag.next()"}),"返回的那个 Promise 对象变成 fulfilled 状态。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"ag.next()"}),"后面的",(0,c.jsx)(n.code,{children:"then"}),"方法指定的回调函数开始执行。该回调函数的参数是一个对象",(0,c.jsx)(n.code,{children:"{value, done}"}),"，其中",(0,c.jsx)(n.code,{children:"value"}),"的值是",(0,c.jsx)(n.code,{children:"yield"}),"命令后面的那个表达式的值，",(0,c.jsx)(n.code,{children:"done"}),"的值是",(0,c.jsx)(n.code,{children:"false"}),"。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"A 和 B 两行的作用类似于下面的代码。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"return new Promise((resolve, reject) => {\n  fetchRandom()\n  .then(result => result.text())\n  .then(result => {\n     resolve({\n       value: 'Result: ' + result,\n       done: false,\n     });\n  });\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:["如果异步 Generator 函数抛出错误，会导致 Promise 对象的状态变为",(0,c.jsx)(n.code,{children:"reject"}),"，然后抛出的错误被",(0,c.jsx)(n.code,{children:"catch"}),"方法捕获。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function* asyncGenerator() {\n  throw new Error('Problem!');\n}\n\nasyncGenerator()\n.next()\n.catch(err => console.log(err)); // Error: Problem!\n"})}),"\n",(0,c.jsxs)(n.p,{children:["注意，普通的 async 函数返回的是一个 Promise 对象，而异步 Generator 函数返回的是一个异步 Iterator 对象。可以这样理解，async 函数和异步 Generator 函数，是封装异步操作的两种方法，都用来达到同一种目的。区别在于，前者自带执行器，后者通过",(0,c.jsx)(n.code,{children:"for await...of"}),"执行，或者自己编写执行器。下面就是一个异步 Generator 函数的执行器。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function takeAsync(asyncIterable, count = Infinity) {\n  const result = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) break;\n    result.push(value);\n  }\n  return result;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，异步 Generator 函数产生的异步遍历器，会通过",(0,c.jsx)(n.code,{children:"while"}),"循环自动执行，每当",(0,c.jsx)(n.code,{children:"await iterator.next()"}),"完成，就会进入下一轮循环。一旦",(0,c.jsx)(n.code,{children:"done"}),"属性变为",(0,c.jsx)(n.code,{children:"true"}),"，就会跳出循环，异步遍历器执行结束。"]}),"\n",(0,c.jsx)(n.p,{children:"下面是这个自动执行器的一个使用实例。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function f() {\n  async function* gen() {\n    yield 'a';\n    yield 'b';\n    yield 'c';\n  }\n\n  return await takeAsync(gen());\n}\n\nf().then(function (result) {\n  console.log(result); // ['a', 'b', 'c']\n})\n"})}),"\n",(0,c.jsx)(n.p,{children:"异步 Generator 函数出现以后，JavaScript 就有了四种函数形式：普通函数、async 函数、Generator 函数和异步 Generator 函数。请注意区分每种函数的不同之处。基本上，如果是一系列按照顺序执行的异步操作（比如读取文件，然后写入新内容，再存入硬盘），可以使用 async 函数；如果是一系列产生相同数据结构的异步操作（比如一行一行读取文件），可以使用异步 Generator 函数。"}),"\n",(0,c.jsxs)(n.p,{children:["异步 Generator 函数也可以通过",(0,c.jsx)(n.code,{children:"next"}),"方法的参数，接收外部传入的数据。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const writer = openFile('someFile.txt');\nwriter.next('hello'); // 立即执行\nwriter.next('world'); // 立即执行\nawait writer.return(); // 等待写入结束\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"openFile"}),"是一个异步 Generator 函数。",(0,c.jsx)(n.code,{children:"next"}),"方法的参数，向该函数内部的操作传入数据。每次",(0,c.jsx)(n.code,{children:"next"}),"方法都是同步执行的，最后的",(0,c.jsx)(n.code,{children:"await"}),"命令用于等待整个写入操作结束。"]}),"\n",(0,c.jsx)(n.p,{children:"最后，同步的数据结构，也可以使用异步 Generator 函数。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function* createAsyncIterable(syncIterable) {\n  for (const elem of syncIterable) {\n    yield elem;\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，由于没有异步操作，所以也就没有使用",(0,c.jsx)(n.code,{children:"await"}),"关键字。"]}),"\n",(0,c.jsxs)(n.h2,{id:"yield-语句",children:["yield* 语句",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#yield-语句",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"yield*"}),"语句也可以跟一个异步遍历器。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function* gen1() {\n  yield 'a';\n  yield 'b';\n  return 2;\n}\n\nasync function* gen2() {\n  // result 最终会等于 2\n  const result = yield* gen1();\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"gen2"}),"函数里面的",(0,c.jsx)(n.code,{children:"result"}),"变量，最后的值是",(0,c.jsx)(n.code,{children:"2"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["与同步 Generator 函数一样，",(0,c.jsx)(n.code,{children:"for await...of"}),"循环会展开",(0,c.jsx)(n.code,{children:"yield*"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"(async function () {\n  for await (const x of gen2()) {\n    console.log(x);\n  }\n})();\n// a\n// b\n"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(s,{...e})}):s(e)}let o=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F28.%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8.md"]={toc:[{text:"同步遍历器的问题",id:"同步遍历器的问题",depth:2},{text:"异步遍历的接口",id:"异步遍历的接口",depth:2},{text:"for await...of",id:"for-awaitof",depth:2},{text:"异步 Generator 函数",id:"异步-generator-函数",depth:2},{text:"yield* 语句",id:"yield-语句",depth:2}],title:"28.异步遍历器",headingTitle:"28.异步遍历器",frontmatter:{}}}}]);