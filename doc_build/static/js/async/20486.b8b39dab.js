"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["20486"],{299620:function(n,e,r){n.exports=r.p+"static/image/2afd053cc3aabba818bc53a18db3ba9d.0340e6b6.webp"},982013:function(n,e,r){n.exports=r.p+"static/image/539f843e90cf45034797d5745890c957.98d3ab4f.gif"},462335:function(n,e,r){n.exports=r.p+"static/image/82d25ef4ab3a4edfb72f1dac673f87f2.a063c741.webp"},937309:function(n,e,r){n.exports=r.p+"static/image/93a6c08c2a907e5af38d87f3a60fc400.98b2c723.webp"},415142:function(n,e,r){n.exports=r.p+"static/image/f375418608f6c820714c5a768674f816.bcf2d1f8.gif"},411649:function(n,e,r){r.r(e),r.d(e,{default:()=>F});var o=r(552676),t=r(740453),c=r(982013);let i=r.p+"static/image/87969a5d7038b61c6f812303ac2d78e0.049ab6ad.gif",s=r.p+"static/image/7ec70f9d07e1c14ddfe87617dbd8f7ab.1ff085ec.webp",p=r.p+"static/image/dd006417d1e5f8cb4da8d165dd681dc5.60701403.webp",a=r.p+"static/image/958e2011c45fbaa4035f5c3ace544f73.cf321fca.gif",d=r.p+"static/image/e1f0afb097ab2932834b0a7e21b6c48a.280705a7.webp",m=r.p+"static/image/6335f707412b2026bfbf6fd9e80262ae.d1f005bc.gif",l=r.p+"static/image/d863ef1cef3bc268a499558cafc43c8d.e3ba0338.webp",x=r.p+"static/image/8833b1ffecb32c89545a208e79763044.908922b2.webp",f=r.p+"static/image/e3746915031ed07a6d74f050c3a6409c.e29e84c6.gif",h=r.p+"static/image/a84a7c389aea94c72a4ca571c2843adc.4ad3ff05.webp",j=r.p+"static/image/7b05c8d634bc00c1731aa9ee7af68cbe.03ff9ea6.gif",g=r.p+"static/image/c8a9553bebe54e7eff1f6079e74bb52c.29d271b5.webp",u=r.p+"static/image/d940bcfcac5f7f55479a3e4c7fe5a069.b672c8e7.gif",b=r.p+"static/image/96ef4a3abb620da055141853a813c99d.30dc8f59.webp",C=r.p+"static/image/67acf369440f9edfb8a3a744034566f7.4c163c90.gif",D=r.p+"static/image/a0efeffac3db64715c174e90dfa7a2a5.711ec8b0.webp",v=r.p+"static/image/5640af07544cb06c89341576b022596b.765e92b4.webp",P=r.p+"static/image/093f52eb3dbecbb502901979cf546177.d1011fdf.webp",B=r.p+"static/image/5adc01f6551da51dc8df8b8041dcdf25.36c9ecd4.webp",E=r.p+"static/image/7fd5f72a011edb3fecb40fce1fc01aef.414c93c5.webp",y=r.p+"static/image/c4586c3c546617b9165975e8a1279a03.3630193d.webp",N=r.p+"static/image/c74da6a8ab833905e1139bdff85c63b6.91d33cd0.webp",S=r.p+"static/image/e5a3fecf1cd998f2e4687538abbca619.c0ccbbb4.webp";var w=r(299620),M=r(937309);let k=r.p+"static/image/84bfa90c1c836d9f3c40311bf63a231b.fa244887.webp",A=r.p+"static/image/6c76e03785f24942a67ab668569ee791.a4521afc.webp",R=r.p+"static/image/98f41c8e9dbfebf510239fe5ac00d4ef.0589c8ae.webp",_=r.p+"static/image/318c12fc22ccb2004f5efbbd0a07792b.f4f7d711.webp";var T=r(462335),I=r(415142);function W(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,t.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"第68章低代码编辑器拖拽组件到画布拖拽编辑json",children:["第68章—低代码编辑器：拖拽组件到画布、拖拽编辑json",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第68章低代码编辑器拖拽组件到画布拖拽编辑json",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"\uFEFF上节我们理清了低代码编辑器的实现原理，实现了核心数据结构 components 和 add、update、delete 方法。"}),"\n",(0,o.jsx)(e.p,{children:"并且把拖拽操作对应到了这些增删改方法上。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:I,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:T,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这节我们来实现下拖拽操作。"}),"\n",(0,o.jsx)(e.p,{children:"首先，我们把 json 渲染到中间的画布区："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:_,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"现在的 json 里只有组件名，没有具体的组件："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:R,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"我们写两个组件："}),"\n",(0,o.jsx)(e.p,{children:"editor/materials/Container/index.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { PropsWithChildren } from 'react';\n\nconst Container = ({ children }: PropsWithChildren) => {\n\n  return (\n    <div \n      className='border-[1px] border-[#000] min-h-[100px] p-[20px]'\n      >{children}</div>\n  )\n}\n\nexport default Container;\n"})}),"\n",(0,o.jsx)(e.p,{children:"因为布局放在 components 目录下，那物料组件就放 materials 目录下吧："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:A,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"加了一个黑色的 border，设置了最小高度为 100px，padding 为 20px。"}),"\n",(0,o.jsx)(e.p,{children:"然后再加一个 Button 组件："}),"\n",(0,o.jsx)(e.p,{children:"editor/materials/Button/index.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Button as AntdButton } from 'antd';\nimport { ButtonType } from 'antd/es/button';\n\nexport interface ButtonProps {\n    type: ButtonType,\n    text: string;\n}\n\nconst Button = ({type, text}: ButtonProps) => {\n  return (\n    <AntdButton type={type}>{text}</AntdButton>\n  )\n}\n\nexport default Button;\n"})}),"\n",(0,o.jsx)(e.p,{children:"安装用到的 antd："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"npm install --save-dev antd\n"})}),"\n",(0,o.jsx)(e.p,{children:"然后还要加一个 compnent 名字和 Component 实例的映射。"}),"\n",(0,o.jsx)(e.p,{children:"在 stores 下创建一个新的 Store"}),"\n",(0,o.jsx)(e.p,{children:"stores/component-config.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import {create} from 'zustand';\nimport Container from '../materials/Container';\nimport Button from '../materials/Button';\n\nexport interface ComponentConfig {\n    name: string;\n    defaultProps: Record<string, any>,\n    component: any\n}\n \ninterface State {\n    componentConfig: {[key: string]: ComponentConfig};\n}\n\ninterface Action {\n    registerComponent: (name: string, componentConfig: ComponentConfig) => void\n}\n\nexport const useComponentConfigStore = create<State & Action>((set) => ({\n    componentConfig: {\n        Container: {\n            name: 'Container',\n            defaultProps: {},\n            component: Container\n        },\n        Button: {\n            name: 'Button',\n            defaultProps: {\n                type: 'primary',\n                text: '按钮'\n            },\n            component: Button\n        },\n    },\n    registerComponent: (name, componentConfig) => set((state) => {\n        return {\n            ...state,\n            componentConfig: {\n                ...state.componentConfig,\n                [name]: componentConfig\n            }\n        }\n    })\n}));\n"})}),"\n",(0,o.jsx)(e.p,{children:"声明 state 和 action 的类型。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:k,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"state 就是 componentConfig 的映射。"}),"\n",(0,o.jsx)(e.p,{children:"key 是组件名，value 是组件配置（包括 component 组件实例、defaultProps 组件默认参数）。"}),"\n",(0,o.jsx)(e.p,{children:"action 就是往 componentConfig 里加配置。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:M,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"componentConfig 现在有 Container、Button 两个组件。"}),"\n",(0,o.jsx)(e.p,{children:"有了组件的配置，接下来就可以渲染了："}),"\n",(0,o.jsx)(e.p,{children:"在 EditArea/index.tsx 递归渲染 components"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import React, { useEffect } from "react";\nimport { useComponentConfigStore } from "../../stores/component-config";\nimport { Component, useComponetsStore } from "../../stores/components"\n\nexport function EditArea() {\n    const { components, addComponent } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n\n    useEffect(()=> {\n        addComponent({\n            id: 222,\n            name: \'Container\',\n            props: {},\n            children: []\n        }, 1);\n\n        addComponent({\n            id: 333,\n            name: \'Button\',\n            props: {\n                text: \'无敌\'\n            },\n            children: []\n        }, 222);\n    }, []);\n\n\n    function renderComponents(components: Component[]): React.ReactNode {\n        return components.map((component: Component) => {\n            const config = componentConfig?.[component.name]\n\n            if (!config?.component) {\n                return null;\n            }\n            \n            return React.createElement(\n                config.component,\n                {\n                    key: component.id,\n                    ...config.defaultProps,\n                    ...component.props,\n                },\n                renderComponents(component.children || [])\n            )\n        })\n    }\n\n    return <div className="h-[100%]">\n        <pre>\n            {JSON.stringify(components, null, 2)}\n        </pre>\n        {renderComponents(components)}\n    </div>\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"components 是一个树形结构，我们 render 的时候也要递归渲染："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:w,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"从组件配置中拿到 name 对应的组件实例，然后用 React.cloneElement 来创建组件。"}),"\n",(0,o.jsx)(e.p,{children:"props 是配置里的 defaultProps 用 component.props 覆盖后的结果。"}),"\n",(0,o.jsx)(e.p,{children:"React.cloneElement 的第三个参数是 children，递归调用 renderComponents 渲染就行。"}),"\n",(0,o.jsx)(e.p,{children:"这样，就把 components 组件树渲染了出来。"}),"\n",(0,o.jsx)(e.p,{children:"看下效果："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:S,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"json 下面并没有渲染出组件来。"}),"\n",(0,o.jsx)(e.p,{children:"因为 Page 组件还没写。"}),"\n",(0,o.jsx)(e.p,{children:"写一下："}),"\n",(0,o.jsx)(e.p,{children:"materials/Page/index.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { PropsWithChildren } from \"react\";\n\nfunction Page({ children }: PropsWithChildren) {\n\n  return (\n    <div\n      className='p-[20px] h-[100%] box-border'\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default Page;\n"})}),"\n",(0,o.jsx)(e.p,{children:"在 componentConfig 里配置下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:N,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"Page: {\n    name: 'Page',\n    defaultProps: {},\n    component: Page\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"把 json 注释掉："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:y,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"看下渲染效果："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:E,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"components 里的 Page、Container、Button 组件都渲染出来了。"}),"\n",(0,o.jsx)(e.p,{children:"用 react devtools 看下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:B,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,o.jsx)(e.p,{children:"这样，我们就把 components 的 json 渲染成了组件树。"}),"\n",(0,o.jsx)(e.p,{children:"把 addComponent 去掉，我们用拖拽的方式来添加组件："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:P,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"拖拽用 react-dnd 来做。"}),"\n",(0,o.jsx)(e.p,{children:"安装 react-dnd 的包："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"npm install react-dnd react-dnd-html5-backend\n"})}),"\n",(0,o.jsx)(e.p,{children:"在 main.tsx 里引入 DndProvider："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:v,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这个是 react-dnd 用来跨组件传递数据的"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { DndProvider } from 'react-dnd'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n    <DndProvider backend={HTML5Backend}>\n        <App />\n    </DndProvider>\n)\n"})}),"\n",(0,o.jsx)(e.p,{children:"然后在要拖拽的组件上添加 useDrag，在拖拽到的组件上添加 useDrop 就可以实现拖拽。"}),"\n",(0,o.jsx)(e.p,{children:"我们先写一下物料区："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:D,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"components/Material/index.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { useMemo } from "react";\nimport { useComponentConfigStore } from "../../stores/component-config";\n\nexport function Material() {\n    const { componentConfig } = useComponentConfigStore();\n\n    const components = useMemo(() => {\n        return Object.values(componentConfig);\n     }, [componentConfig]);\n\n    return <div>{\n        components.map(item => {\n            return <div\n                className=\'\n                    border-dashed\n                    border-[1px]\n                    border-[#000]\n                    py-[8px] px-[10px] \n                    m-[10px]\n                    cursor-move\n                    inline-block\n                    bg-white\n                    hover:bg-[#ccc]\n                \'\n            >\n                {item.name}\n            </div>\n        })\n    }</div>\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"读取 componentConfig 里注册的所有组件类型，渲染出来。"}),"\n",(0,o.jsx)(e.p,{children:"设置下 border、margin、padding。"}),"\n",(0,o.jsx)(e.p,{children:"看下效果："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:C,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"我们要给每个 item 添加 useDrag 实现拖拽。"}),"\n",(0,o.jsx)(e.p,{children:"封装个组件："}),"\n",(0,o.jsx)(e.p,{children:"components/MaterialItem/index.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"export interface MaterialItemProps {\n    name: string\n}\n\nexport function MaterialItem(props: MaterialItemProps) {\n\n    const {\n        name\n    } = props;\n\n    return <div\n        className='\n            border-dashed\n            border-[1px]\n            border-[#000]\n            py-[8px] px-[10px] \n            m-[10px]\n            cursor-move\n            inline-block\n            bg-white\n            hover:bg-[#ccc]\n        '\n    >\n        {name}\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"这样组件渲染的时候就可以用"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:b,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"components.map((item, index) => {\n    return <MaterialItem name={item.name} key={item.name + index}/>\n})\n"})}),"\n",(0,o.jsx)(e.p,{children:"不影响页面渲染："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:u,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"然后加一下 useDrag："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:g,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { useEffect, useRef } from "react";\nimport { useDrag } from "react-dnd";\n\nexport interface MaterialItemProps {\n    name: string\n}\n\nexport function MaterialItem(props: MaterialItemProps) {\n\n    const {\n        name\n    } = props;\n\n    const [_, drag] = useDrag({\n        type: name,\n        item: {\n            type: name\n        }\n    });\n\n    return <div\n        ref={drag}\n        className=\'\n            border-dashed\n            border-[1px]\n            border-[#000]\n            py-[8px] px-[10px] \n            m-[10px]\n            cursor-move\n            inline-block\n            bg-white\n            hover:bg-[#ccc]\n        \'\n    >\n        {name}\n    </div>\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"type 是当前 drag 的元素的标识，drop 的时候根据这个来决定是否 accept。"}),"\n",(0,o.jsx)(e.p,{children:"item 是传递的数据。"}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:j,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"现在就可以拖拽了。"}),"\n",(0,o.jsx)(e.p,{children:"只是还没处理 drop 的逻辑。"}),"\n",(0,o.jsx)(e.p,{children:"我们在 Page 组件加一下 useDrop 的处理逻辑："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:h,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { message } from \"antd\";\nimport { PropsWithChildren } from \"react\";\nimport { useDrop } from \"react-dnd\";\n\nfunction Page({ children }: PropsWithChildren) {\n\n    const [{ canDrop }, drop] = useDrop(() => ({\n        accept: ['Button', 'Container'],\n        drop: (item: { type: string}) => {\n            message.success(item.type)\n        },\n        collect: (monitor) => ({\n          canDrop: monitor.canDrop(),\n        }),\n    }));\n\n    return (\n        <div\n            ref={drop}\n            className='p-[20px] h-[100%] box-border'\n            style={{ border: canDrop ? '2px solid blue' : 'none' }}\n        >\n            {children}\n        </div>\n    )\n}\n\nexport default Page;\n"})}),"\n",(0,o.jsx)(e.p,{children:"accept 指定接收的 type，这里接收 Button 和 Container 组件"}),"\n",(0,o.jsx)(e.p,{children:"drop 的时候显示下传过来的 item 数据。"}),"\n",(0,o.jsx)(e.p,{children:"canDrop 的话加一个 border 的高亮。"}),"\n",(0,o.jsx)(e.p,{children:"试一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:f,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"可以看到，Container 和 Button 拖拽到 Page 组件的时候，会触发 drop 事件。"}),"\n",(0,o.jsx)(e.p,{children:"接下来我们只要调用 addComponent 来添加 component 就行了。"}),"\n",(0,o.jsx)(e.p,{children:"这需要把 id 传进来："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:x,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"我们在 renderComponents 的时候传一下 component 的 id、name。"}),"\n",(0,o.jsx)(e.p,{children:"每个组件的参数都是这样，我们在 interface.ts 里定义下参数类型："}),"\n",(0,o.jsx)(e.p,{children:"editor/interface.ts"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { PropsWithChildren } from "react";\n\nexport interface CommonComponentProps extends PropsWithChildren{\n    id: number;\n    name: string;\n    [key: string]: any\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"然后调用下 addComponent："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:l,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { useDrop } from \"react-dnd\";\nimport { CommonComponentProps } from \"../../interface\";\nimport { useComponetsStore } from \"../../stores/components\";\nimport { useComponentConfigStore } from \"../../stores/component-config\";\n\nfunction Page({ id, name, children }: CommonComponentProps) {\n\n    const { addComponent } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n\n    const [{ canDrop }, drop] = useDrop(() => ({\n        accept: ['Button', 'Container'],\n        drop: (item: { type: string}) => {\n            const props = componentConfig[item.type].defaultProps;\n\n            addComponent({\n                id: new Date().getTime(),\n                name: item.type,\n                props\n            }, id)\n        },\n        collect: (monitor) => ({\n          canDrop: monitor.canDrop(),\n        }),\n    }));\n\n    return (\n        <div\n            ref={drop}\n            className='p-[20px] h-[100%] box-border'\n            style={{ border: canDrop ? '2px solid blue' : 'none' }}\n        >\n            {children}\n        </div>\n    )\n}\n\nexport default Page;\n"})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:m,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"完美！"}),"\n",(0,o.jsx)(e.p,{children:"这样，拖拽编辑的第一步就完成了。"}),"\n",(0,o.jsx)(e.p,{children:"然后 Container 组件也是可以 drop 的。"}),"\n",(0,o.jsx)(e.p,{children:"我们加一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:d,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { useComponetsStore } from '../../stores/components';\nimport { useComponentConfigStore } from '../../stores/component-config';\nimport { useDrop } from 'react-dnd';\nimport { CommonComponentProps } from '../../interface';\n\nconst Container = ({ id, children }: CommonComponentProps) => {\n\n    const { addComponent } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n\n    const [{ canDrop }, drop] = useDrop(() => ({\n        accept: ['Button', 'Container'],\n        drop: (item: { type: string}) => {\n            const props = componentConfig[item.type].defaultProps;\n\n            addComponent({\n                id: new Date().getTime(),\n                name: item.type,\n                props\n            }, id)\n        },\n        collect: (monitor) => ({\n          canDrop: monitor.canDrop(),\n        }),\n    }));\n\n    return (\n        <div \n            ref={drop}\n            className={`min-h-[100px] p-[20px] ${ canDrop ? 'border-[2px] border-[blue]' : 'border-[1px] border-[#000]'}`}\n        >{children}</div>\n    )\n}\n\nexport default Container;\n"})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:a,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"可以拖拽组件到 Container 了，但是 Page 的 drop 也被触发了。"}),"\n",(0,o.jsx)(e.p,{children:"我们要加一下判断，处理过 drop 就不再处理。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:p,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:s,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"const didDrop = monitor.didDrop()\nif (didDrop) {\n  return;\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"这样就好了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:i,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,o.jsx)(e.p,{children:"useDrop 代码重复了两次，我们封装一个自定义 hooks："}),"\n",(0,o.jsx)(e.p,{children:"editor/hooks/useMaterialDrop.ts"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { useDrop } from "react-dnd";\nimport { useComponentConfigStore } from "../stores/component-config";\nimport { useComponetsStore } from "../stores/components";\n\nexport function useMaterailDrop(accept: string[], id: number) {\n    const { addComponent } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n\n    const [{ canDrop }, drop] = useDrop(() => ({\n        accept,\n        drop: (item: { type: string}, monitor) => {\n            const didDrop = monitor.didDrop()\n            if (didDrop) {\n              return;\n            }\n\n            const props = componentConfig[item.type].defaultProps;\n\n            addComponent({\n                id: new Date().getTime(),\n                name: item.type,\n                props\n            }, id)\n        },\n        collect: (monitor) => ({\n          canDrop: monitor.canDrop(),\n        }),\n    }));\n\n    return { canDrop, drop }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"传入 accept 和 id 参数，返回 canDrop 和 drop。"}),"\n",(0,o.jsx)(e.p,{children:"在 Page 和 Container 组件用一下："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { CommonComponentProps } from \"../../interface\";\nimport { useMaterailDrop } from \"../../hooks/useMaterailDrop\";\n\nfunction Page({ id, name, children }: CommonComponentProps) {\n\n    const {canDrop, drop } = useMaterailDrop(['Button', 'Container'], id);\n\n    return (\n        <div\n            ref={drop}\n            className='p-[20px] h-[100%] box-border'\n            style={{ border: canDrop ? '2px solid blue' : 'none' }}\n        >\n            {children}\n        </div>\n    )\n}\n\nexport default Page;\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { useMaterailDrop } from '../../hooks/useMaterailDrop';\nimport { CommonComponentProps } from '../../interface';\n\nconst Container = ({ id, children }: CommonComponentProps) => {\n\n    const {canDrop, drop } = useMaterailDrop(['Button', 'Container'], id);\n\n    return (\n        <div \n            ref={drop}\n            className={`min-h-[100px] p-[20px] ${ canDrop ? 'border-[2px] border-[blue]' : 'border-[1px] border-[#000]'}`}\n        >{children}</div>\n    )\n}\n\nexport default Container;\n"})}),"\n",(0,o.jsx)(e.p,{children:"这样代码好看多了。"}),"\n",(0,o.jsx)(e.p,{children:"然后我们先在 Setting 组件里展示下 json："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { useComponetsStore } from "../../stores/components";\n\nexport function Setting() {\n    const { components } = useComponetsStore();\n\n    return <div>\n        <pre>\n            {JSON.stringify(components, null, 2)}\n        </pre> \n    </div>\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:c,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"可以看到，拖拽编辑的时候，json 和画布的内容会同步修改。"}),"\n",(0,o.jsx)(e.p,{children:"完美！"}),"\n",(0,o.jsxs)(e.p,{children:["案例代码上传了",(0,o.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"git reset --hard 6f55fcbcc93bfec667975d808ac2d4c3f97fac05\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"总结",children:["总结",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"这节我们实现了拖拽组件到画布，也就是拖拽编辑 json。"}),"\n",(0,o.jsx)(e.p,{children:"首先我们加了 Button 和 Container 组件，并创建了 componentConfig 的全局 store，用来保存组件配置。"}),"\n",(0,o.jsx)(e.p,{children:"然后实现了 renderComponents，它就是递归渲染 component，用到的组件配置从 componentConfig 取。"}),"\n",(0,o.jsx)(e.p,{children:"之后引入 react-dnd 实现了拖拽编辑，左侧的物料添加 useDrag，画布里的组件添加 useDrop，然后当 drop 的时候，在对应 id 下添加一个对应的类型的组件。"}),"\n",(0,o.jsx)(e.p,{children:"组件类型在 useDrag 的时候通过 item 传递，添加到的组件 id 在 drop 的那个组件里就有。"}),"\n",(0,o.jsx)(e.p,{children:"然后还要处理下 didDrop，保证只 drop 一次。"}),"\n",(0,o.jsx)(e.p,{children:"这样，我们就实现了拖拽编辑 json 的功能。"})]})}function O(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(W,{...n})}):W(n)}let F=O;O.__RSPRESS_PAGE_META={},O.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC68%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6%E5%88%B0%E7%94%BB%E5%B8%83%E3%80%81%E6%8B%96%E6%8B%BD%E7%BC%96%E8%BE%91json.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第68章—低代码编辑器：拖拽组件到画布、拖拽编辑json",headingTitle:"第68章—低代码编辑器：拖拽组件到画布、拖拽编辑json",frontmatter:{}}}}]);