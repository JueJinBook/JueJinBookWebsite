"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["77014"],{711578:function(e,n,t){e.exports=t.p+"static/image/47c53f872a54bf36d140f95f334b25cd.ef103836.webp"},933422:function(e,n,t){e.exports=t.p+"static/image/95e2079f87c5acab35118f5df84615e7.9b72bfb8.webp"},55177:function(e,n,t){t.r(n),t.d(n,{default:()=>K});var i=t(552676),a=t(740453);let s=t.p+"static/image/a5009dbd726e2584c39d3af3ba809f56.9a8dbf2d.webp",r=t.p+"static/image/c293090117972cb3872e1e2786d9cb89.d62e7230.webp",c=t.p+"static/image/17264779e38af5eb3684a6b21789d6b4.ce1c13d8.webp",o=t.p+"static/image/b0c7158cdc2aa8ed4bf0518bc21932f0.b059fdb7.webp",p=t.p+"static/image/fde61ec403c0ee266dbef693d110c988.144b617a.webp",d=t.p+"static/image/97372eea509d3d811ba33280db95c30f.1fa8cc9e.webp",l=t.p+"static/image/9fc9659990f21a8d4f0dad016ab34171.ee25a91a.webp",m=t.p+"static/image/dc184eee5c4a0aa65f4fec2685faf636.2c901565.webp",g=t.p+"static/image/621854d1e4d0a06b392a1092c75f410d.86aa0952.webp",h=t.p+"static/image/44363e69ab81da434d41930e3f123f1f.fd72a957.webp",x=t.p+"static/image/c37a40ca1b72d2fbb5c903c5db3fd94d.395ee350.webp",j=t.p+"static/image/2050db69ceace124b1548f88713e621b.3cfad573.webp",u=t.p+"static/image/c91235f2138d6242ac80b63e6a94b139.72e2ec02.webp",b=t.p+"static/image/43aa272de348c07f5b3009ba09c7c61c.4d3297cb.webp",f=t.p+"static/image/bff26f105fc7b5128e82a02530a9b9c0.7dfcc2e5.webp",A=t.p+"static/image/b2010bfde60180410ed57be7b1ec5aa3.90ab47fb.webp",y=t.p+"static/image/3368ba36f001b4da0d83807052156636.cf1464ff.webp",R=t.p+"static/image/0b46232bcf1117ee06d7a8585d08a2d9.bee08189.webp",w=t.p+"static/image/b99642e11facb36a7af6bc6e88e90d20.4b904c55.webp",v=t.p+"static/image/49bd35debbeb6a34f829a6db7cf64938.f9ecf53d.webp",E=t.p+"static/image/0e1201adb6f0972a1251ac039fc6ff8a.51e57a84.webp",M=t.p+"static/image/b098e70514916364eed5547b8e2e6261.f99ebfbd.webp",_=t.p+"static/image/10b9ece8eb9c2f702545eecc195c0719.c75de810.webp",S=t.p+"static/image/7c358f7c210814f04b754a1d803dd0aa.c2a19311.webp",B=t.p+"static/image/2d07649dbbd0d4b3c4e8d77ff6e6ba4c.8f1052ff.webp",k=t.p+"static/image/8d126d364931bafaca47ad8bec99e2a6.d34f0582.webp",N=t.p+"static/image/9b215fbe541bf937ce719862f4e78402.e6fdfd3b.webp",P=t.p+"static/image/1eaff7a35c2a5b1ce2575cb0258e8441.37689d05.webp",F=t.p+"static/image/e8b05f29293c887dc47adcbc532c2411.7e1ac254.gif",I=t.p+"static/image/b2da39f00a176e3e33dc54196ae7e51e.ef5f8570.webp",C=t.p+"static/image/4eebfc4c16be942857969f671a70c796.c7b3972c.webp",L=t.p+"static/image/2298df17dcdf7b0dabc7f3ee2f023b70.71af9d14.webp",q=t.p+"static/image/354fff3d1409dd628d8050b69fee5137.3742fc37.gif";var T=t(933422);let z=t.p+"static/image/814219f1eec17237cfc293bd14cd92e2.05829b01.gif";var H=t(711578);let V=t.p+"static/image/0fc227f1b142c244ed5df0fc985150bb.7359340d.webp",D=t.p+"static/image/6b4f4e258c9b917bb943598427025a85.a13295f9.webp";function Q(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"123-会议室预订系统会议室管理模块-用户端前端开发",children:["123. 会议室预订系统：会议室管理模块-用户端前端开发",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#123-会议室预订系统会议室管理模块-用户端前端开发",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"这节来写用户端的会议室列表："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"现在，用户端首页是这样的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:D,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"需要在 / 下添加一个二级路由："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:V,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"{\n    path: '/',\n    element: <Menu/>,\n    children: [\n      {\n        path: '/',\n        element: <MeetingRoomList/>\n      },\n      {\n        path: 'meeting_room_list',\n        element: <MeetingRoomList/>\n      },\n      {\n        path: 'booking_history',\n        element: <BookingHistory/>\n      }\n    ]\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"然后分别实现这三个组件："}),"\n",(0,i.jsx)(n.p,{children:"src/page/menu/Menu.tsx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { Outlet, useLocation } from \"react-router-dom\";\nimport { Menu as AntdMenu, MenuProps } from 'antd';\nimport './menu.css';\nimport { MenuClickEventHandler } from \"rc-menu/lib/interface\";\nimport { router } from \"../..\";\n\nconst items: MenuProps['items'] = [\n    {\n        key: '1',\n        label: \"会议室列表\"\n    },\n    {\n        key: '2',\n        label: \"预定历史\"\n    }\n];\n\nconst handleMenuItemClick: MenuClickEventHandler = (info) => {\n    let path = '';\n    switch(info.key) {\n        case '1':\n            path = '/meeting_room_list';\n            break;\n        case '2':\n            path = '/booking_history';\n            break;              \n    }\n    router.navigate(path);\n}\n\n\nexport function Menu() {\n\n    const location = useLocation();\n\n    function getSelectedKeys() {\n        if(location.pathname === '/meeting_room_list') {\n            return ['1']\n        } else if(location.pathname === '/booking_history') {\n            return ['2']\n        } else {\n            return ['1']\n        }\n    }\n\n    return <div id=\"menu-container\">\n        <div className=\"menu-area\">\n            <AntdMenu\n                defaultSelectedKeys={getSelectedKeys()}\n                items={items}\n                onClick={handleMenuItemClick}\n            />\n        </div>\n        <div className=\"content-area\">\n            <Outlet></Outlet>\n        </div>\n    </div>\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"引入 antd 的 Menu 实现菜单。"}),"\n",(0,i.jsx)(n.p,{children:"渲染的时候根据 useLocation 拿到的 pathname 来设置选中的菜单项。"}),"\n",(0,i.jsx)(n.p,{children:"点击菜单项的时候用 router.push 修改路径。"}),"\n",(0,i.jsx)(n.p,{children:"这里用到的 router 需要在 index.tsx 导出："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:H,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这些我们前面写过一遍。"}),"\n",(0,i.jsx)(n.p,{children:"menu.css 如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"#menu-container {\n    display: flex;\n    flex-direction: row;\n}\n#menu-container .menu-area {\n    width: 200px;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"然后是 src/pages/meeting_room_list/MeetingRoomList.tsx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"export function MeetingRoomList() {\n    return <div>MeetingRoomList</div>\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"还有 src/pages/booking_history/BookingHistory.tsx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"export function BookingHistory() {\n    return <div>BookingHistory</div>\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"在 index.tsx 里导入这些组件后，我们跑起来看看："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:z,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"点击菜单项的路由切换，以及刷新选中对应菜单项，都没问题。"}),"\n",(0,i.jsx)(n.p,{children:"然后来写下列表页面，其实这个和管理端的会议室列表差不多："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"我们把那个复制过来改改。"}),"\n",(0,i.jsx)(n.p,{children:"首先，在 interfaces.ts 添加用到的接口："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"export async function searchMeetingRoomList(name: string, capacity: number, equipment: string, pageNo: number, pageSize: number) {\n    return await axiosInstance.get('/meeting-room/list', {\n        params: {\n            name,\n            capacity,\n            equipment,\n            pageNo,\n            pageSize\n        }\n    });\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"然后写下列表："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { Badge, Button, Form, Input, Popconfirm, Table, message } from \"antd\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport './meeting_room_list.css';\nimport { ColumnsType } from \"antd/es/table\";\nimport { useForm } from \"antd/es/form/Form\";\nimport { searchMeetingRoomList } from \"../../interface/interfaces\";\n\ninterface SearchMeetingRoom {\n    name: string;\n    capacity: number;\n    equipment: string;\n}\n\ninterface MeetingRoomSearchResult {\n    id: number,\n    name: string;\n    capacity: number;\n    location: string;\n    equipment: string;\n    description: string;\n    isBooked: boolean;\n    createTime: Date;\n    updateTime: Date;\n}\n\nexport function MeetingRoomList() {\n    const [pageNo, setPageNo] = useState<number>(1);\n    const [pageSize, setPageSize] = useState<number>(10);\n\n    const [meetingRoomResult, setMeetingRoomResult] = useState<Array<MeetingRoomSearchResult>>([]);\n\n    const columns: ColumnsType<MeetingRoomSearchResult> = useMemo(() => [\n        {\n            title: '名称',\n            dataIndex: 'name'\n        },\n        {\n            title: '容纳人数',\n            dataIndex: 'capacity',\n        },\n        {\n            title: '位置',\n            dataIndex: 'location'\n        },\n        {\n            title: '设备',\n            dataIndex: 'equipment'\n        },\n        {\n            title: '描述',\n            dataIndex: 'description'\n        },\n        {\n            title: '添加时间',\n            dataIndex: 'createTime'\n        },\n        {\n            title: '上次更新时间',\n            dataIndex: 'updateTime'\n        },\n        {\n            title: '预定状态',\n            dataIndex: 'isBooked',\n            render: (_, record) => (\n                record.isBooked ? <Badge status=\"error\">已被预订</Badge> : <Badge status=\"success\">可预定</Badge>\n            )\n        },\n        {\n            title: '操作',\n            render: (_, record) => (\n                <div>\n                    <a href=\"#\">预定</a>\n                </div>\n            )\n        }\n    ], []);\n\n    const searchMeetingRoom = useCallback(async (values: SearchMeetingRoom) => {\n        const res = await searchMeetingRoomList(values.name, values.capacity, values.equipment, pageNo, pageSize);\n\n        const { data } = res.data;\n        if(res.status === 201 || res.status === 200) {\n            setMeetingRoomResult(data.meetingRooms.map((item: MeetingRoomSearchResult) => {\n                return {\n                    key: item.id,\n                    ...item\n                }\n            }))\n        } else {\n            message.error(data || '系统繁忙，请稍后再试');\n        }\n    }, []);\n\n    const [form ]  = useForm();\n\n    useEffect(() => {\n        searchMeetingRoom({\n            name: form.getFieldValue('name'),\n            capacity: form.getFieldValue('capacity'),\n            equipment: form.getFieldValue('equipment')\n        });\n    }, [pageNo, pageSize]);\n\n    const changePage = useCallback(function(pageNo: number, pageSize: number) {\n        setPageNo(pageNo);\n        setPageSize(pageSize);\n    }, []);\n\n    return <div id=\"meetingRoomList-container\">\n        <div className=\"meetingRoomList-form\">\n            <Form\n                form={form}\n                onFinish={searchMeetingRoom}\n                name=\"search\"\n                layout='inline'\n                colon={false}\n            >\n                <Form.Item label=\"会议室名称\" name=\"name\">\n                    <Input />\n                </Form.Item>\n\n                <Form.Item label=\"容纳人数\" name=\"capacity\">\n                    <Input />\n                </Form.Item>\n\n                <Form.Item label=\"设备\" name=\"equipment\">\n                    <Input/>\n                </Form.Item>\n\n                <Form.Item label=\" \">\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        搜索会议室\n                    </Button>\n                </Form.Item>\n            </Form>\n        </div>\n        <div className=\"meetingRoomList-table\">\n            <Table columns={columns} dataSource={meetingRoomResult} pagination={ {\n                current: pageNo,\n                pageSize: pageSize,\n                onChange: changePage\n            }}/>\n        </div>\n    </div>\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"上面是 form、下面是 table。"}),"\n",(0,i.jsx)(n.p,{children:"调用搜索接口来搜索列表数据，然后设置到 table 的 dataSource。"}),"\n",(0,i.jsx)(n.p,{children:"每次分页变化的时候重新搜索。"}),"\n",(0,i.jsx)(n.p,{children:"然后 css 部分如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"#meetingRoomList-container {\n    padding: 20px;\n}\n#meetingRoomList-container .meetingRoomList-form {\n    margin-bottom: 40px;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"这样，列表页就完成了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:q,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"其实写这个模块的时候偷懒了，应该是写完后端接口，还要写 swager 文档。"}),"\n",(0,i.jsx)(n.p,{children:"然后前端根据 swagger 接口文档才能知道传啥参数，有啥返回值。"}),"\n",(0,i.jsx)(n.p,{children:"当时我们没写 swagger 文档，现在补一下："}),"\n",(0,i.jsx)(n.p,{children:"打开后端项目，在 MeetingRoomController 里加一下 swagger 相关的装饰器："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:L,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"首先加一下 delete 接口的："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@ApiParam({\n    name: 'id',\n    type: Number,\n    description: 'id'\n})\n@ApiResponse({\n    status: HttpStatus.OK,\n    description: 'success'\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["访问 ",(0,i.jsx)(n.a,{href:"http://localhost:3005/api-doc#/default/MeetingRoomController_delete",target:"_blank",rel:"noopener noreferrer",children:(0,i.jsx)(n.a,{href:"http://localhost:3005/api-doc",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3005/api-doc"})})," 可以看到这个接口的文档："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"其实会议室的接口都是需要登录才能访问的，当时为了测试方便没有加，现在加一下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:I,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"添加 @RequireLogin 装饰器，标识接口需要登录。"}),"\n",(0,i.jsx)(n.p,{children:"并且添加对应的 @ApiBearerAuth 的 swagger 装饰器，代表需要添加 Bearer 的 header。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:F,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"我们现在 postman 里测试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:P,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这时候直接调用 delete 接口就会提示需要先登录了。"}),"\n",(0,i.jsx)(n.p,{children:"然后我们登录下，拿到 token。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:N,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"把它复制到 swagger 文档这里："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后点击这个 try it out："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"数据库中现在有 3 条记录："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"把 id 为 10 那条删掉。"}),"\n",(0,i.jsxs)(n.p,{children:["点击 execute：\n",(0,i.jsx)("img",{src:_,alt:""})]}),"\n",(0,i.jsx)(n.p,{children:"swagger 会发送请求，下面会打印响应："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:M,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["这时数据库里就没有这条记录了：\n",(0,i.jsx)("img",{src:E,alt:""})]}),"\n",(0,i.jsx)(n.p,{children:"可以直接在 swagger 文档里测试接口，不用 postman 也行。"}),"\n",(0,i.jsx)(n.p,{children:"然后继续写下个接口的 swagger 文档："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这个接口的参数也是用 @ApiParam 标识，但它的响应不是 string，而是 MeetingRoom。"}),"\n",(0,i.jsx)(n.p,{children:"而我们现在并没有 vo，没地方标识属性："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以要创建个 vo："}),"\n",(0,i.jsx)(n.p,{children:"新建 src/meeting-room/vo/meeting-room.vo.ts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { ApiProperty } from "@nestjs/swagger";\n\nexport class MeetingRoomVo {\n    \n    @ApiProperty()\n    id: number;\n\n    @ApiProperty()\n    name: string;\n\n    @ApiProperty()\n    capacity: number;\n\n    @ApiProperty()\n    location: string;\n\n    @ApiProperty()\n    equipment: string;\n\n    @ApiProperty()\n    description: string;\n\n    @ApiProperty()\n    isBooked: boolean;\n\n    @ApiProperty()\n    createTime: Date;\n\n    @ApiProperty()\n    updateTime: Date;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"然后加一下 swagger 的装饰器："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@ApiBearerAuth()\n@ApiParam({\n    name: 'id',\n    type: Number,\n})\n@ApiResponse({\n    status: HttpStatus.OK,\n    description: 'success',\n    type: MeetingRoomVo\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:"试一下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"接下来是 update 接口："}),"\n",(0,i.jsx)(n.p,{children:"他有两种响应："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["分别写一下：\n",(0,i.jsx)("img",{src:f,alt:""})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@ApiBearerAuth()\n@ApiBody({\n    type: UpdateMeetingRoomDto,\n})\n@ApiResponse({\n    status: HttpStatus.BAD_REQUEST,\n    description: '会议室不存在'\n})\n@ApiResponse({\n    status: HttpStatus.OK,\n    description: 'success'\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:"然后在 dto 里标注下属性："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"因为 update 的 dto 继承了 create 的 dto，所以那里也要加一下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这样 swagger 文档就对了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后是 create 接口："}),"\n",(0,i.jsx)(n.p,{children:"postman 里调用下是这样的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以 swagger 装饰器这样写："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@ApiBearerAuth()\n@ApiBody({\n    type: CreateMeetingRoomDto,\n})\n@ApiResponse({\n    status: HttpStatus.BAD_REQUEST,\n    description: '会议室名字已存在'\n})\n@ApiResponse({\n    status: HttpStatus.OK,\n    type: MeetingRoomVo\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:"这样 swagger 文档显示的就对了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后还有最后一个 list 接口："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"它的响应是这样的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"首先创建响应数据的 vo："}),"\n",(0,i.jsx)(n.p,{children:"src/meeting-room/vo/meeting-room-list.vo.ts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { ApiProperty } from "@nestjs/swagger";\nimport { MeetingRoomVo } from "./meeting-room.vo";\n\nexport class MeetingRoomListVo {\n\n    @ApiProperty({\n        type: [MeetingRoomVo]\n    })\n    users: Array<MeetingRoomVo>;\n\n    @ApiProperty()\n    totalCount: number;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"然后加一下 swagger 的装饰器："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@ApiBearerAuth()\n@ApiQuery({\n    name: 'pageNo',\n    type: Number,\n    required: false\n})\n@ApiQuery({\n    name: 'pageSize',\n    type: Number,\n    required: false\n})\n@ApiQuery({\n    name: 'name',\n    type: String,\n    required: false\n})\n@ApiQuery({\n    name: 'capacity',\n    type: String,\n    required: false\n})\n@ApiQuery({\n    name: 'equipment',\n    type: String,\n    required: false\n})\n@ApiResponse({\n    type: MeetingRoomListVo\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:"有同学说，不用把 service 里的返回值改成 MeetingRoomListVo 对象么？"}),"\n",(0,i.jsx)(n.p,{children:"不用，只要结构对上就行。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"最后，在 controller 上加上个 @ApiTags，把下面的接口分到单独一组："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:s,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这样，用户端的会议室列表页面，swagger 文档就都完成了。"}),"\n",(0,i.jsx)(n.p,{children:"案例代码上传了小册仓库："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_frontend_user",target:"_blank",rel:"noopener noreferrer",children:"前端代码"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"后端代码"})}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"这节我们写了用户端的会议室列表页，并且补了 swagger 文档。"}),"\n",(0,i.jsx)(n.p,{children:"用户端列表页就是调用 list 接口，通过 form 来填写参数，通过 table 展示结果。"}),"\n",(0,i.jsx)(n.p,{children:"swagger 文档部分就是分别通过 @ApiPram @ApiQuery @ApiBody @ApiResponse 标识接口，通过 @ApiProperty 标识 dto 和 vo 的属性。"}),"\n",(0,i.jsx)(n.p,{children:"这样，会议室模块的前端后端就都完成了。"})]})}function O(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Q,{...e})}):Q(e)}let K=O;O.__RSPRESS_PAGE_META={},O.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F123.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E8%AE%A2%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%BC%9A%E8%AE%AE%E5%AE%A4%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97-%E7%94%A8%E6%88%B7%E7%AB%AF%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"123. 会议室预订系统：会议室管理模块-用户端前端开发",headingTitle:"123. 会议室预订系统：会议室管理模块-用户端前端开发",frontmatter:{}}}}]);