"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["61431"],{683:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var s=r(552676),d=r(740453);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",h3:"h3",h4:"h4",h5:"h5",code:"code",pre:"pre",ul:"ul",li:"li",em:"em"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"27tsconfig-全解上构建相关配置",children:["27.TSConfig 全解（上）：构建相关配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#27tsconfig-全解上构建相关配置",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在前面的内容中，我们已经学习了 TypeScript 在工程中的许多实践，包括类型声明、TypeScript 与 React、ESLint 的结合使用以及装饰器等。这些实践更像是上层建筑，默认是在一个已经基本配置完环境的 TypeScript 项目中进行的。这一节，我们深入下层基础，来了解 TypeScript 工程中最基础的一部分：TSConfig 配置。"}),"\n",(0,s.jsx)(n.p,{children:"为什么选择现在才讲配置呢？因为在前面的工程实践中，我们并不需要自己去修改 TSConfig，脚手架已经帮我们处理好了。有了实践经验，再来讲解讲解这些配置效果会更好。"}),"\n",(0,s.jsxs)(n.p,{children:["为了避免罗列配置这种填鸭式教学，我将 TSConfig 分为三个大类：",(0,s.jsx)(n.strong,{children:"构建相关"}),"、",(0,s.jsx)(n.strong,{children:"类型检查相关"}),"以及",(0,s.jsx)(n.strong,{children:"工程相关"}),"。这其实也对应着我们的开发流程：使用工程能力进行项目开发，检查源码是否符合配置约束，然后才是输出产物。每一个大类又可以划分为几个小类，比如构建相关又可以分为",(0,s.jsx)(n.strong,{children:"构建源码相关"}),"与",(0,s.jsx)(n.strong,{children:"构建产物相关"}),"等等，我们会按照这些分类的方式进行聚合地讲解。"]}),"\n",(0,s.jsx)(n.p,{children:"最后，正如我对这本小册的定位也包括工具书一样，当你在实际项目开发遗忘了某一项具体配置的作用，或者发现某一配置表现不符合预期，都可以回到这里来寻找答案。"}),"\n",(0,s.jsx)(n.p,{children:"这一节我们主要介绍构建相关的配置。"}),"\n",(0,s.jsxs)(n.h2,{id:"构建相关",children:["构建相关",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建相关",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"构建源码相关",children:["构建源码相关",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建源码相关",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"特殊语法相关",children:["特殊语法相关",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#特殊语法相关",children:"#"})]}),"\n",(0,s.jsxs)(n.h5,{id:"experimentaldecorators-与-emitdecoratormetadata",children:["experimentalDecorators 与 emitDecoratorMetadata",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#experimentaldecorators-与-emitdecoratormetadata",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["这两个选项都和装饰器有关，其中 experimentalDecorators 选项用于启用装饰器的 ",(0,s.jsx)(n.code,{children:"@"})," 语法，而 emitDecoratorMetadata 配置则影响装饰器实际运行时的元数据相关逻辑，我们在装饰器一节中已经了解了此选项对实际编译代码的作用："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var\xa0__metadata\xa0=\xa0(this\xa0&&\xa0this.__metadata)\xa0||\xa0function\xa0(k,\xa0v)\xa0{\n\xa0\xa0\xa0\xa0if\xa0(typeof\xa0Reflect\xa0===\xa0"object"\xa0&&\xa0typeof\xa0Reflect.metadata\xa0===\xa0"function")\xa0return\xa0Reflect.metadata(k,\xa0v);\n};\n\n__decorate([\n\xa0\xa0\xa0\xa0Prop(),\n\xa0\xa0\xa0\xa0__metadata("design:type",\xa0String) // 来自于 emitDecoratorMetadata 配置，其它 __metadata 方法同\n],\xa0Foo.prototype,\xa0"prop",\xa0void\xa00);\n\n__decorate([\n\xa0\xa0\xa0\xa0Method(),\n\xa0\xa0\xa0\xa0__param(0,\xa0Param()),\n\xa0\xa0\xa0\xa0__metadata("design:type",\xa0Function),\n\xa0\xa0\xa0\xa0__metadata("design:paramtypes",\xa0[String]),\n\xa0\xa0\xa0\xa0__metadata("design:returntype",\xa0void\xa00)\n],\xa0Foo.prototype,\xa0"handler",\xa0null);\n\nFoo\xa0=\xa0__decorate([\n\xa0\xa0\xa0\xa0Cls(),\n\xa0\xa0\xa0\xa0__param(0,\xa0Param()),\n\xa0\xa0\xa0\xa0__metadata("design:paramtypes",\xa0[String])\n],\xa0Foo);\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"jsxjsxfactoryjsxfragmentfactory-与-jsximportsource",children:["jsx、jsxFactory、jsxFragmentFactory 与 jsxImportSource",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsxjsxfactoryjsxfragmentfactory-与-jsximportsource",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["这部分配置主要涉及 jsx(tsx) 相关的语法特性。其中，jsx 配置将直接影响 JSX 组件的构建表现，常见的主要有 ",(0,s.jsx)(n.code,{children:"react"})," （将 JSX 组件转换为对 ",(0,s.jsx)(n.code,{children:"React.createElement"})," 调用，生成 ",(0,s.jsx)(n.code,{children:".js"})," 文件）、",(0,s.jsx)(n.code,{children:"preserve"}),"（原样保留 JSX 组件，生成 ",(0,s.jsx)(n.code,{children:".jsx"})," 文件，你可以接着让其他的编译器进行处理）、",(0,s.jsx)(n.code,{children:"react-native"})," （类似于 preserve，但会生成 ",(0,s.jsx)(n.code,{children:".js"})," 文件）。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果你希望使用特殊的 jsx 转换，也可以将其配置为 ",(0,s.jsx)(n.code,{children:"react-jsx"})," / ",(0,s.jsx)(n.code,{children:"react-jsxdev"}),"，这样 JSX 组件会被转换为对 ",(0,s.jsx)(n.code,{children:"__jsx"})," 方法的调用与生成 ",(0,s.jsx)(n.code,{children:".js"})," 文件，此方法来自于 ",(0,s.jsx)(n.code,{children:"react/jsx-runtime"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'// react\nimport React from \'react\';\nexport const helloWorld = () => React.createElement("h1", null, "Hello world");\n\n// preserve / react-native\nimport React from \'react\';\nexport const helloWorld = () => <h1>Hello world</h1>;\n\n// react-jsx\nimport { jsx as _jsx } from "react/jsx-runtime";\nimport React from \'react\';\nexport const helloWorld = () => _jsx("h1", { children: "Hello world" });\n \n// react-jsxdev\nimport { jsxDEV as _jsxDEV } from "react/jsx-dev-runtime";\nconst _jsxFileName = "/home/runner/work/TypeScript-Website/TypeScript-Website/index.tsx";\nimport React from \'react\';\nexport const helloWorld = () => _jsxDEV("h1", { children: "Hello world" }, void 0, false, { fileName: _jsxFileName, lineNumber: 9, columnNumber: 32 }, this);\n'})}),"\n",(0,s.jsx)(n.p,{children:"除了 jsx 以外，其它 jsx 相关配置使用较少，我们简单了解即可。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["jsxFactory，影响负责最终处理转换完毕 JSX 组件的方法，默认即为 ",(0,s.jsx)(n.code,{children:"React.createElement"}),"。如果你想使用 ",(0,s.jsx)(n.code,{children:"preact.h"})," 作为处理方法，可以将其配置为 ",(0,s.jsx)(n.code,{children:"h"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["jsxFragmentFactory，类似 jsxFactory，只不过它影响的是 Fragment 组件（",(0,s.jsx)(n.code,{children:"<></>"}),"）的提供方。jsxFactory 与 jsxFragmentFactory 均是 TS 4.1 版本以前用于实现自定义 JSX 转换的配置项，举例来说，当设置了 ",(0,s.jsx)(n.code,{children:'"jsx": "react"'}),"，此时将 jsxFragmentFactory 设置为 ",(0,s.jsx)(n.code,{children:"Fragment"})," ，同时将 jsxFactory 设置为 ",(0,s.jsx)(n.code,{children:"h"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import { h, Fragment } from "preact";\nconst HelloWorld = () => (\n  <>\n    <div>Hello</div>\n  </>\n);\n\n// 转换为以下代码\nconst preact_1 = require("preact");\nconst HelloWorld = () => ((0, preact_1.h)(preact_1.Fragment, null,\n    (0, preact_1.h)("div", null, "Hello")));\n'})}),"\n",(0,s.jsx)(n.p,{children:"为了简化自定义 JSX 转换的配置，4.1 版本以后 TS 支持使用 jsxImportSource 属性快速地调整。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["jsxImportSource，当你的 jsx 设置为 ",(0,s.jsx)(n.code,{children:"react-jsx"})," / ",(0,s.jsx)(n.code,{children:"react-jsxdev"})," 时，指定你的 ",(0,s.jsx)(n.code,{children:"jsx-runtime"})," / ",(0,s.jsx)(n.code,{children:"jsx-dev-runtime"}),"  从何处导入。如设置为 ",(0,s.jsx)(n.code,{children:"preact"})," 时，会从 ",(0,s.jsx)(n.code,{children:"preact/jsx-runtime"})," 导入 ",(0,s.jsx)(n.code,{children:"_jsx"})," 函数，用于进行 JSX 组件的转换。类似的，在另一个类 React 框架 Solid 中，也将此配置修改为了自己的实现： ",(0,s.jsx)(n.code,{children:'"jsxImportSource": "solid-js"'}),"。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这也是 React 17 中的变化之一，在 17 版本前后的构建后代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// v17 前\nimport React from 'react';\n\nfunction App() {\n  return React.createElement('h1', null, 'Hello world');\n}\n\n// v17 后\nimport {jsx as _jsx} from 'react/jsx-runtime';\n\nfunction App() {\n  return _jsx('h1', { children: 'Hello world' });\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这也是在 17 版本以后，不需要再确保代码中导入了 React 就能使用 JSX 的原因。"}),"\n",(0,s.jsxs)(n.h5,{id:"target-与-libnolib",children:["target 与 lib、noLib",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#target-与-libnolib",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"target 配置决定了你的构建代码使用的语法，常用值包括 es5、es6、es2018、es2021、esnext（基于目前的 TypeScript 版本所支持的最新版本） 等等。某些来自于更高版本 ECMAScript 的语法，会在编译到更低版本时进行语法的降级，常见的如异步函数、箭头函数、bigint 数据类型等。"}),"\n",(0,s.jsxs)(n.p,{children:["类似的，在 Babel 中也有 targets 的概念。但这里的 targets 通常指的是预期运行的浏览器，如 chrome 89，然后基于 browserlist 获取浏览器信息，基于 ",(0,s.jsx)(n.a,{href:"https://caniuse.com/",target:"_blank",rel:"noopener noreferrer",children:"caniuse"})," 或者 compat-table 获取各个浏览器版本支持的特性，最后再进行语法的降级。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果没有特殊需要，推荐将 target 设置为 ",(0,s.jsx)(n.code,{children:'"es2018"'}),"，一个对常用语法支持较为全面的版本。"]}),"\n",(0,s.jsx)(n.p,{children:"更改 target 配置也会同时影响你的 lib 配置默认值，而它决定了你是否能使用某些来自于更新版本的 ECMAScript 语法，以 replaceAll 为例，如果你直接在项目中使用："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"'linbudu'.replaceAll('d', 'dd');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["此时，如果你的 lib 配置中不包含 ",(0,s.jsx)(n.code,{children:'"es2021"'})," 或者 ",(0,s.jsx)(n.code,{children:'"es2021.String"'}),"，上面的代码就会给出一个错误提示：",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:'属性“replaceAll”在类型“"linbudu"”上不存在。是否需要更改目标库? 请尝试将 “lib” 编译器选项更改为“es2021”或更高版本'})}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["正如我们在类型声明一节中了解的，TypeScript 会自动加载内置的 ",(0,s.jsx)(n.code,{children:"lib.d.ts"})," 等声明文件，而加载哪些文件则和 lib 配置有关。当我们配置了 ",(0,s.jsx)(n.code,{children:'"es2021"'})," 或者 ",(0,s.jsx)(n.code,{children:'"es2021.String"'}),"，replaceAll 方法对应的声明文件 ",(0,s.jsx)(n.code,{children:"lib.es2021.string.d.ts"})," 就会被加载，然后我们的 String 类型上才有了 lib 方法。"]}),"\n",(0,s.jsxs)(n.p,{children:["除了高版本语法以外，lib 其实也和你的实际运行环境有关。比如，当你的代码仅在 Node 环境下运行时，你的 lib 中不应当包含 ",(0,s.jsx)(n.code,{children:'"DOM"'})," 这个值。对应的，代码中无法使用 window 、document 等全局变量。"]}),"\n",(0,s.jsxs)(n.p,{children:["而 target 对 lib 的影响在于，当你的 target 为更高的版本时，它会自动地将这个版本新语法对应的 lib 声明加载进来，以上面的代码为例， target 为 ",(0,s.jsx)(n.code,{children:'"es2021"'})," 时，你不需要添加 ",(0,s.jsx)(n.code,{children:'"es2021"'})," 到 lib 中也能使用 ECMAScript2021 的新方法 replaceAll。这是因为既然你的编译产物都到这个版本了，那你当然可以直接使用这个方法啦。"]}),"\n",(0,s.jsx)(n.p,{children:"如果你希望使用自己提供的 lib 声明定义，可以启用 noLib 配置，这样 TypeScript 将不会去加载内置的类型定义，但你需要为所有内置对象提供类型定义（String，Function，Object 等）才能进行编译。如果你的运行环境中存在大量的定制方法，甚至对原本的内置方法做了覆盖，就可以使用此配置来加载自己的类型声明。"}),"\n",(0,s.jsxs)(n.p,{children:["最后，target 与 lib 配置会随着 TS 的版本更新而新增可用的值，如在 4.6 版本新增了 ",(0,s.jsx)(n.code,{children:"es2022"}),"这一选项，支持了 ",(0,s.jsx)(n.code,{children:"Array.at()"}),"、",(0,s.jsx)(n.code,{children:"Error Cause"})," 等新的语言特性。"]}),"\n",(0,s.jsxs)(n.h3,{id:"构建解析相关",children:["构建解析相关",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建解析相关",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这部分配置主要控制源码解析，包括从何处开始收集要构建的文件，如何解析别名路径等等。"}),"\n",(0,s.jsxs)(n.h4,{id:"filesinclude-与-exclude",children:["files、include 与 exclude",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#filesinclude-与-exclude",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["这三个选项决定了将被包括到本次编译的代码文件。使用 files 我们可以描述本次包含的所有文件，但不能使用 ",(0,s.jsx)(n.code,{children:"src"})," 或者 ",(0,s.jsx)(n.code,{children:"src/*"})," 这种方式，每个值都需要是完整的文件路径，适合在小型项目时使用："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {},\n  "files": [\n    "src/index.ts",\n    "src/handler.ts"\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["如果你的文件数量较多，或者分散在各个文件夹，此时可以使用 include 和 exclude 进行配置，在这里可以传入文件夹或者 ",(0,s.jsx)(n.code,{children:"src/*"})," 这样的 glob pattern，也可以传入完整的文件路径。"]}),"\n",(0,s.jsx)(n.p,{children:"include 配置方式参考："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "include": ["src/**/*", "generated/*.ts", "internal/*"]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["其中，",(0,s.jsx)(n.code,{children:"src/**/*"})," 表示匹配 src下所有的合法文件，而无视目录层级。而 ",(0,s.jsx)(n.code,{children:"internal/*"})," 则只会匹配 internal 下的文件，不会匹配 ",(0,s.jsx)(n.code,{children:"internal/utils/"})," 下的文件。这里的合法文件指的是，在不包括文件扩展名（",(0,s.jsx)(n.code,{children:"*.ts"}),"）的情况下只会匹配 ",(0,s.jsx)(n.code,{children:".ts"})," /  ",(0,s.jsx)(n.code,{children:".tsx"})," /  ",(0,s.jsx)(n.code,{children:".d.ts"}),"  / ",(0,s.jsx)(n.code,{children:".js"})," / ",(0,s.jsx)(n.code,{children:".jsx"})," 文件（js 和 jsx 文件需要启用 allowJs 配置时才会被包括）。"]}),"\n",(0,s.jsxs)(n.p,{children:["由于我们会在 include 中大量使用 glob pattern 来一次性匹配许多文件，如果存在某些非预期的文件也符合这一匹配模式，比如 ",(0,s.jsx)(n.code,{children:"src/handler.test.ts"})," ",(0,s.jsx)(n.code,{children:"src/file-excluded/"})," 这样，此时专门为需要匹配的文件书写精确的匹配模式就太麻烦了。因此，我们可以使用 exclude 配置，来从被 include 匹配到的文件中再移除一部分，如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "include": ["src/**/*", "generated/*.ts", "internal/*"],\n  "exclude": ["src/file-excluded", "/**/*.test.ts", "/**/*.e2e.ts"]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的是，",(0,s.jsx)(n.strong,{children:"exclude 只能剔除已经被 include 包含的文件"}),"。"]}),"\n",(0,s.jsxs)(n.h4,{id:"baseurl",children:["baseUrl",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#baseurl",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这一配置可以定义文件进行解析的根目录，它通常会是一个相对路径，然后配合 tsconfig.json 所在的路径来确定根目录的位置。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"project\n├── out.ts\n├── src\n├──── core.ts\n└── tsconfig.json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在这个结构下，如果配置为 ",(0,s.jsx)(n.code,{children:'"baseUrl": "./"'}),"，根目录就会被确定为 project。"]}),"\n",(0,s.jsxs)(n.p,{children:["你也可以通过这一配置，在导入语句中使用相对 baseUrl 的解析路径。如在上面根目录已经确定为 project，在 ",(0,s.jsx)(n.code,{children:"out.ts"})," 中，你就可以直接使用基于根目录的绝对路径导入文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import "src/core"; // TS 会自动解析到对应的文件，即 "./src/core.ts"\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"rootdir",children:["rootDir",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rootdir",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["rootDir 配置决定了项目文件的根目录，默认情况下它是项目内",(0,s.jsx)(n.strong,{children:"包括"}),"的所有 .ts 文件的最长公共路径，这里有几处需要注意："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"包括"}),"指的是 include 或 files 中包括的 ",(0,s.jsx)(n.code,{children:".ts"})," 文件，这些文件一般来说不会和 tsconfig.json 位于同一目录层级；"]}),"\n",(0,s.jsxs)(n.li,{children:["不包括 ",(0,s.jsx)(n.code,{children:".d.ts"})," 文件，因为声明文件可能会和 tsconfig.json 位于同一层级。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["最长公共路径又是什么？简单地说，它就是某一个",(0,s.jsxs)(n.strong,{children:["包含了所有被包括的 ",(0,s.jsx)(n.code,{children:".ts"})," 文件的文件夹"]}),"，TypeScript 会找到这么一个文件夹，默认将其作为 rootDir。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"PROJECT\n├── src\n│   ├── index.ts\n│   ├── app.ts\n│   ├── utils\n│   │   ├── helpers.ts\n├── declare.d.ts\n├── tsconfig.json\n"})}),"\n",(0,s.jsx)(n.p,{children:"在这个例子中，rootDir 会被推断为 src。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"PROJECT\n├── env\n│   ├── env.dev.ts\n│   ├── env.prod.ts\n├── app\n│   ├── index.ts\n├── declare.d.ts\n├── tsconfig.json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在这个例子中，rootDir 会被推断为 ",(0,s.jsx)(n.code,{children:"."}),"，即 ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," 所在的目录。"]}),"\n",(0,s.jsxs)(n.p,{children:["构建产物的目录结构会受到这一配置的影响，假设 outDir 被配置为 ",(0,s.jsx)(n.code,{children:"dist"}),"，在上面的第一种情况下，最终的产物会被全部放置在 dist 目录下，保持它们在 ",(0,s.jsx)(n.code,{children:"src"}),"（也就是 rootDir） 内的目录结构："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"PROJECT\n├── dist\n│   ├── index.js\n│   ├── index.d.ts\n│   ├── app.js\n│   ├── app.d.ts\n│   ├── utils\n│   │   ├── helpers.js\n│   │   ├── helpers.d.ts\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果你将 rootDir 更改为推导得到的 rootDir 的父级目录，比如在这里把它更改到了项目根目录 ",(0,s.jsx)(n.code,{children:"."}),"。此时 ",(0,s.jsx)(n.code,{children:"src"})," 会被视为 rootDir 的一部分，因此最终构建目录结构中会多出 ",(0,s.jsx)(n.code,{children:"src"})," 这一级："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"PROJECT\n├── dist\n├── ├──src\n│      ├── index.js\n│      ├── index.d.ts\n│      ├── app.js\n│      ├── app.d.ts\n│      ├── utils\n│      │   ├── helpers.js\n│      │   ├── helpers.d.ts\n"})}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的是，如果你显式指定 rootDir ，需要确保其包含了所有 ",(0,s.jsx)(n.strong,{children:"“被包括”"})," 的文件，因为 TypeScript 需要确保这所有的文件都被生成在 outDir 内。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"PROJECT\n├── src\n│   ├── index.ts\n│   ├── app.ts\n│   ├── utils\n│   │   ├── helpers.ts\n├── env.ts\n├── tsconfig.json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在这个例子中，如果你指定 rootDir 为 ",(0,s.jsx)(n.code,{children:"src"})," ，会导致 ",(0,s.jsx)(n.code,{children:"env.ts"})," 被生成到 ",(0,s.jsx)(n.code,{children:"<project>/env.js"})," 而非 ",(0,s.jsx)(n.code,{children:"<project>/dist/env.js"})," 。"]}),"\n",(0,s.jsxs)(n.h4,{id:"rootdirs",children:["rootDirs",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rootdirs",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"rootDirs 就是复数版本的 rootDir，它接收一组值，并且会将这些值均视为平级的根目录："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "rootDirs": ["src/zh", "src/en", "src/jp"]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"PROJECT\n├── src\n│   ├── zh\n│   │   ├── locale.ts\n│   ├── en\n│   │   ├── locale.ts\n│   ├── jp\n│   │   ├── locale.ts\n│   ├── index.ts\n├── tsconfig.json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["使用 rootDirs，TypeScript 还是会隐式地推导 rootDir，此时它的值为 rootDirs 中所有文件夹最近的公共父文件夹，在这里即是 ",(0,s.jsx)(n.code,{children:"src"}),"。你肯定会想，那 rootDirs 还有什么用？实际上它主要用于实现",(0,s.jsx)(n.strong,{children:"多个虚拟目录的合并解析"}),"。还是以上面的例子为例，假设我们的目录结构是现在这样的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"PROJECT\n├── src\n│   ├── locales\n│   │   ├── zh.locale.ts\n│   │   ├── en.locale.ts\n│   │   ├── jp.locale.ts\n│   ├── index.ts\n│── generated\n│   ├── messages\n│   │   ├── main.mapper.ts\n│   │   ├── info.mapper.ts\n├── tsconfig.json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在这个目录结构中，",(0,s.jsx)(n.code,{children:"locales"})," 下存放我们定义的每个语言的对应翻译，",(0,s.jsx)(n.code,{children:"generated/messages"})," 则是通过扫描项目获得所有需要进行代码替换位置后生成的映射关系，我们在 ",(0,s.jsx)(n.code,{children:".locale.ts"})," 文件中会导入其中的 mapper 文件来生成对应的导出。"]}),"\n",(0,s.jsx)(n.p,{children:"虽然现在 locale 文件和 mapper 文件被定义在不同的目录下，但在构建产物中它们实际上是位于同一层级的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"│── dist\n│   ├── zh.locale.js\n│   ├── en.locale.js\n│   ├── jp.locale.js\n│   ├── main.mapper.js\n│   ├── info.mapper.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这也就意味着，我们应当是在 locale 文件中直接通过 ",(0,s.jsx)(n.code,{children:"./main.mapper"})," 的路径来引用 mapper 文件的，而不是 ",(0,s.jsx)(n.code,{children:"../../generated/messages/main.mapper.ts"})," 这样。"]}),"\n",(0,s.jsx)(n.p,{children:"此时，我们就可以利用 rootDirs 配置来让 TS 将这两个相隔甚远的文件夹视为处于同一目录下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "rootDirs": ["src/locales", "generated/messages"]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"这一配置并不会影响实际的产物生成，它只会告诉 TS 将这两个模块视为同一层级下（类型定义层面）。"}),"\n",(0,s.jsxs)(n.h4,{id:"types-与-typeroots",children:["types 与 typeRoots",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#types-与-typeroots",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["默认情况下，TypeScript 会加载 ",(0,s.jsx)(n.code,{children:"node_modules/@types/"})," 下的所有声明文件，包括嵌套的 ",(0,s.jsx)(n.code,{children:"../../node_modules/@types"})," 路径，这么做可以让你更方便地使用第三方库的类型。但如果你希望只加载实际使用的类型定义包，就可以通过 types 配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "types": ["node", "jest", "react"]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在这种情况下，只有 ",(0,s.jsx)(n.code,{children:"@types/node"}),"、",(0,s.jsx)(n.code,{children:"@types/jest"})," 以及 ",(0,s.jsx)(n.code,{children:"@types/react"})," 会被加载。"]}),"\n",(0,s.jsxs)(n.p,{children:["即使其他 ",(0,s.jsx)(n.code,{children:"@types/"})," 包没有被包含，它们也仍然能拥有完整的类型，但其中的全局声明（如 ",(0,s.jsx)(n.code,{children:"process"}),"，",(0,s.jsx)(n.code,{children:"expect"}),"，",(0,s.jsx)(n.code,{children:"describe"})," 等全局变量）将不会被包含，同时也无法再享受到基于类型的提示。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果你甚至希望改变加载 ",(0,s.jsx)(n.code,{children:"@types/"})," 下文件的行为，可以使用 typeRoots 选项，其默认为 ",(0,s.jsx)(n.code,{children:"@types"}),"，即指定 ",(0,s.jsx)(n.code,{children:"node_modules/@types"})," 下的所有文件（仍然包括嵌套的）。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "typeRoots": ["./node_modules/@types", "./node_modules/@team-types", "./typings"],\n    "types": ["react"],\n    "skipLibCheck": true\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["以上配置会尝试加载 ",(0,s.jsx)(n.code,{children:"node_modules/@types/react"})," 以及 ",(0,s.jsx)(n.code,{children:"./node_modules/@team-types/react"})," 、",(0,s.jsx)(n.code,{children:"./typings/react"})," 中的声明文件，注意我们需要使用",(0,s.jsx)(n.strong,{children:"相对于 baseUrl 的相对路径"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"加载多个声明文件可能会导致内部的声明冲突，所以你可能会需要 skipLibCheck 配置来禁用掉对加载的类型声明的检查。"}),"\n",(0,s.jsxs)(n.h4,{id:"moduleresolution",children:["moduleResolution",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#moduleresolution",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这一配置指定了模块的解析策略，可以配置为 node 或者 classic ，其中 node 为默认值，而 classic 主要作向后兼容用，基本不推荐使用。"}),"\n",(0,s.jsxs)(n.p,{children:["首先来看 node 解析模式，从名字也能看出来它其实就是与 node 一致的解析模式。假设我们有个 ",(0,s.jsx)(n.code,{children:"src/index.js"}),"，其中存在基于相对路径 ",(0,s.jsx)(n.code,{children:'const foo = require("./foo")'})," 的导入，则会依次按照以下顺序解析："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/<root>/<project>/src/foo.js"})," 文件是否存在？"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/<root>/<project>/src/foo"})," 是否是一个文件夹？","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["此文件夹内部是否包含 ",(0,s.jsx)(n.code,{children:"package.json"}),"，且其中使用 ",(0,s.jsx)(n.code,{children:"main"})," 属性描述了这个文件夹的入口文件？"]}),"\n",(0,s.jsxs)(n.li,{children:["假设 ",(0,s.jsx)(n.code,{children:"main"})," 指向 ",(0,s.jsx)(n.code,{children:"dist/index.js"}),"，那这里会尝试寻找 ",(0,s.jsx)(n.code,{children:"/<root>/<project>/src/foo/dist/index.js"})," 文件"]}),"\n",(0,s.jsxs)(n.li,{children:["否则的话，说明这个文件不是一个模块或者没有定义模块入口，我们走默认的 ",(0,s.jsx)(n.code,{children:"/foo/index.js"})," 。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["而对于绝对路径，即 ",(0,s.jsx)(n.code,{children:'const foo = require("foo")'}),"，其只会在 ",(0,s.jsx)(n.code,{children:"node_modules"})," 中寻找，从 ",(0,s.jsx)(n.code,{children:"/<root>/<project>/src/node_modules"})," 开始，到 ",(0,s.jsx)(n.code,{children:"/<root>/<project>/node_modules"})," ，再逐级向上直到根目录。"]}),"\n",(0,s.jsxs)(n.p,{children:["TypeScript 在这基础上增加了对 ",(0,s.jsx)(n.code,{children:".ts"})," ",(0,s.jsx)(n.code,{children:".tsx"})," 和 ",(0,s.jsx)(n.code,{children:".d.ts"})," （优先级按照这一顺序）扩展名的文件解析，以及对 ",(0,s.jsx)(n.code,{children:"package.json"})," 中 ",(0,s.jsx)(n.code,{children:"types"})," 字段的加载。"]}),"\n",(0,s.jsxs)(n.p,{children:["而对于 classic 模式，其解析逻辑可能不太符合直觉，其相对路径导入与绝对路径导入均不会解析 ",(0,s.jsx)(n.code,{children:"node_modules"})," 中的文件。对于相对路径导入 ",(0,s.jsx)(n.code,{children:'import foo from "./foo"'}),"，它只会尝试 ",(0,s.jsx)(n.code,{children:"/<root>/<project>/src/foo.ts"})," 和 ",(0,s.jsx)(n.code,{children:"/<root>/<project>/src/foo.d.ts"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["而对于绝对路径导入 ",(0,s.jsx)(n.code,{children:'import foo from "foo"'}),"，它会按照以下顺序来解析："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"/<root>/<project>/src/foo.ts(.d.ts)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"/<root>/<project>/foo.ts(.d.ts)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"/<root>/foo.ts(.d.ts)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"/foo.ts(.d.ts)"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"绝大部分情况下你不会需要 classic 作为配置值，这里仅做了解即可。"}),"\n",(0,s.jsxs)(n.h4,{id:"modulesuffixes",children:["moduleSuffixes",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modulesuffixes",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"此配置在 4.7 版本被引入，类似于 moduleResolution ，它同样影响对模块的解析策略，但仅影响模块的后缀名部分。如以下配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "compilerOptions": {\n        "moduleSuffixes": [".ios", ".native", ""]\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["此配置在解析文件时，会首先尝试查找 ",(0,s.jsx)(n.code,{children:"foo.ios.ts"}),"，然后是 ",(0,s.jsx)(n.code,{children:"foo.native.ts"}),"，最后才是 ",(0,s.jsx)(n.code,{children:"foo.ts"}),"（注意，需要最后的空字符串",(0,s.jsx)(n.code,{children:'""'}),"配置）。很明显，这一配置主要是为了 React Native 配置中的多平台构建配置。但你可以用它在 Angular 项目中，确保所有文件都使用了一个额外的后缀名，如 ",(0,s.jsx)(n.code,{children:"user.service.ts"}),"、",(0,s.jsx)(n.code,{children:"user.module.ts"})," 等。"]}),"\n",(0,s.jsxs)(n.h4,{id:"noresolve",children:["noResolve",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#noresolve",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"默认情况下， TypeScript 会将你代码中导入的文件也解析为程序的一部分，包括 import 导入和三斜线指令的导入，你可以通过禁用这一配置来阻止这个解析过程。"}),"\n",(0,s.jsx)(n.p,{children:"需要注意的是，虽然导入过程被禁用了，但你仍然需要确保导入的模块是一个合法的模块。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// 开启此配置后，这个指令指向的声明文件将不会被加载！\n/// <reference path="./other.d.ts" />\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"paths",children:["paths",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#paths",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["paths 类似于 Webpack 中的 alias，允许你通过 ",(0,s.jsx)(n.code,{children:"@/utils"})," 或类似的方式来简化导入路径，它的配置方式是这样的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "baseUrl": "./",\n    "paths": {\n      "@/utils/*": ["src/utils/*", "src/other/utils/*"]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"需要注意的是，paths 的解析是基于 baseUrl 作为相对路径的，因此需要确保指定了 baseUrl 。在填写别名路径时，我们可以传入一个数组，TypeScript 会依次解析这些路径，直到找到一个确实存在的路径。"}),"\n",(0,s.jsxs)(n.h4,{id:"resolvejsonmodule",children:["resolveJsonModule",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#resolvejsonmodule",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"启用了这一配置后，你就可以直接导入 Json 文件，并对导入内容获得完整的基于实际 Json 内容的类型推导。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "repo": "TypeScript",\n    "dry": false,\n    "debug": false\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import settings from "./settings.json";\n \nsettings.debug === true;\n// 对应的类型报错\nsettings.dry === 2;\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"构建产物相关",children:["构建产物相关",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建产物相关",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"构建输出相关",children:["构建输出相关",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建输出相关",children:"#"})]}),"\n",(0,s.jsxs)(n.h5,{id:"outdir-与-outfile",children:["outDir 与 outFile",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#outdir-与-outfile",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这两个选项决定了构建产物的输出文件。其中 outDir 配置的值将包括所有的构建产物，通常情况下会按照原本的目录结构存放："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"src\n├── core\n├──── handler.ts\n└── index.ts\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dist\n├── core\n├──── handler.js\n├──── handler.d.ts\n├── index.js\n├── index.d.ts\nsrc\n├── core\n├──── handler.ts\n└── index.ts\n"})}),"\n",(0,s.jsx)(n.p,{children:"而 outFile 类似于 Rollup 或 ESBuild 中的 bundle 选项，它会将所有的产物（其中非模块的文件）打包为单个文件，但仅能在 module 选项为 None / System / AMD 时使用。"}),"\n",(0,s.jsxs)(n.h5,{id:"preserveconstenums",children:["preserveConstEnums",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#preserveconstenums",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在字面量类型与枚举一节中了解过，常量枚举会在编译时被抹除，对其成员的引用会直接使用原本的值来替换。这一配置项可以改变此行为，让常量枚举也像普通枚举那样被编译为一个运行时存在的对象。"}),"\n",(0,s.jsxs)(n.h5,{id:"noemit-与-noemitonerror",children:["noEmit 与 noEmitOnError",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#noemit-与-noemitonerror",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这两个选项主要控制最终是否将构建产物实际写入文件系统中，其中 noEmit 开启时将不会写入，但仍然会执行构建过程，因此也就包括了类型检查、语法检查与实际构建过程。而 noEmitOnError 则仅会在构建过程中有错误产生才会阻止写入。"}),"\n",(0,s.jsxs)(n.p,{children:["一个常见的实践是，使用 ESBuild / SWC  等工具进行实际构建，使用 ",(0,s.jsx)(n.code,{children:"tsc --noEmit"})," 进行类型检查过程。"]}),"\n",(0,s.jsxs)(n.h5,{id:"module",children:["module",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#module",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这一配置控制最终 JavaScript 产物使用的模块标准，常见的包括 CommonJs、ES6、ESNext 以及 NodeNext 等（实际的值也可以是全小写的形式）。另外也支持 AMD、UMD、System 等模块标准。"}),"\n",(0,s.jsxs)(n.p,{children:["TypeScript 会随着版本更新新增可用的 module 选项，如在 4.5 版本新增了 ",(0,s.jsx)(n.code,{children:"es2022"})," 配置，支持了 Top-Level Await 语法。在 4.7 版本还新增了 ",(0,s.jsx)(n.code,{children:"node16"})," 和 ",(0,s.jsx)(n.code,{children:"nodenext"})," 两个 module 配置，使用这两个配置意味着你构建的 npm 包或者代码仅在 node 环境下运行，因此 TypeScript 会对应地启用对 Node ESM 的支持。"]}),"\n",(0,s.jsxs)(n.h5,{id:"importhelpers-与-noemithelpers",children:["importHelpers 与 noEmitHelpers",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importhelpers-与-noemithelpers",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"由于 TypeScript 在编译时除了抹除类型，还需要基于 target 进行语法降级，这一功能往往需要一些辅助函数，将新语法转换为旧语法的实现， 如 async 函数。"}),"\n",(0,s.jsxs)(n.p,{children:["在同样能实现语法降级的 Babel 中，这些辅助函数来自于 core-js （原",(0,s.jsx)(n.code,{children:"@babel/polyfill"}),"） 实现的。在 TypeScript 中这些辅助函数被统一封装在了 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/tslib",target:"_blank",rel:"noopener noreferrer",children:"tslib"})," 中，通过启用 importHelpers 配置，这些辅助函数就将从 tslib 中导出而不是在源码中定义，能够有效地帮助减少构建产物体系。"]}),"\n",(0,s.jsx)(n.p,{children:"举例来说，ES 6 中引入的 rest 操作符，在降低情况下会编译为这样的产物："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export function fn(arr: number[]) {\n  const arr2 = [1, ...arr];\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"var __read = (this && this.__read) || function (o, n) {\n   // ...\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    // ...\n};\nexport function fn(arr) {\n    var arr2 = __spreadArray([1], __read(arr), false);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在启用 importHelpers 后，辅助函数 ",(0,s.jsx)(n.code,{children:"__read"})," 和 ",(0,s.jsx)(n.code,{children:"__spreadArray"})," 都将从 tslib 中导出："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { __read, __spreadArray } from "tslib";\nexport function fn(arr) {\n    var arr2 = __spreadArray([1], __read(arr), false);\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"如果你希望使用自己的实现，而非完全从 tslib 中导出，就可以使用 noEmitHelpers 配置，在开启时源码中仍然会使用这些辅助函数，不会存在从 tslib 中导入的过程。因此，此时需要你在全局命名空间下来提供同名的实现。"}),"\n",(0,s.jsxs)(n.h5,{id:"downleveliteration",children:["downlevelIteration",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#downleveliteration",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 新增了 ",(0,s.jsx)(n.code,{children:"for...of"})," 循环，它可以用于循环遍历所有部署了 ",(0,s.jsx)(n.code,{children:"[Symbol.iterator]"})," 接口的数据结构，如数组、Set、Map，甚至还包括字符串。"]}),"\n",(0,s.jsxs)(n.p,{children:["在默认情况下，如果 target 为 ES5 或更低，",(0,s.jsx)(n.code,{children:"for...of"})," 循环会被降级为普通的基于索引的 for 循环："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// 源代码\nconst str = "Hello!";\nfor (const s of str) {\n  console.log(s);\n}\n\n// 降级\n"use strict";\nvar str = "Hello!";\nfor (var _i = 0, str_1 = str; _i < str_1.length; _i++) {\n    var s = str_1[_i];\n    console.log(s);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["然而在某些情况下，降级到普通的 for 循环可能造成运行结果不一致，比如一个 emoji 字符在 ",(0,s.jsx)(n.code,{children:"for...of"})," 循环中只会被遍历一次，而其实际 length 为 2，因此在 for 循环中会被拆开来分别遍历 2 次。"]}),"\n",(0,s.jsxs)(n.p,{children:["这种情况下我们的预期应当是仍然保留为 ",(0,s.jsx)(n.code,{children:"for...of"})," 循环，此时就可以启用 downlevelIteration 配置，同时在运行环境中确保 ",(0,s.jsx)(n.code,{children:"[Symbol.iterator]"})," 接口的存在（如通过 polyfill），这样就可以保留 ",(0,s.jsx)(n.code,{children:"for...of"})," 循环的实现。"]}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的是，启用这一配置只是意味着 TS 会在构建产物中引入辅助函数，判断在 ",(0,s.jsx)(n.code,{children:"[Symbol.iterator]"})," 接口存在时保留 ",(0,s.jsx)(n.code,{children:"for...of"})," 循环，否则降级为普通的基于索引的 for 循环，因此你仍然需要自己引入 polyfill。"]}),"\n",(0,s.jsxs)(n.h5,{id:"importsnotusedasvalues-与-preservevalueimports",children:["importsNotUsedAsValues 与 preserveValueImports",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importsnotusedasvalues-与-preservevalueimports",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"默认情况下，TypeScript 就在编译时去抹除仅类型导入（import type），但如果你希望保留这些类型导入语句，可以通过更改 importsNotUsedAsValues 配置的值来改变其行为。默认情况下，此配置的值为 remove，即对仅类型导入进行抹除。你也可以将其更改为 preserve，这样所有的导入语句都会被导入（但是类型变量仍然会被抹除）。或者是 error，在这种情况下首先所有导入语句仍然会被保留，但会在值导入仅被用于类型时产生一个错误。"}),"\n",(0,s.jsx)(n.p,{children:"举例来说，以下代码中的仅类型导入会在 preserve 或 error 时保留："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// foo.ts\nexport type FooType = any;\n\ninit();\n\n// index.ts\nimport type { FooType } from "./foo";\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import {} from "./foo";\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这样 foo 文件中的 ",(0,s.jsx)(n.code,{children:"init()"}),"也就是副作用，仍然能够得到执行。"]}),"\n",(0,s.jsx)(n.p,{children:"类似的，还有一个控制导入语句构建产物的配置，preserveValueImports。它主要针对的是值导入（即非类型导入或混合导入），这是因为在某些时候我们的值导入可能是通过一些奇怪的方式使用的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { Animal } from "./animal";\n\neval("console.log(new Animal().isDangerous())");\n'})}),"\n",(0,s.jsx)(n.p,{children:"preserveValueImports 配置会将所有的值导入都保留下来，"}),"\n",(0,s.jsx)(n.p,{children:"如果你使用 Babel 等无法处理类型的编译器来构建 TS 代码（即启用了 isolatedModules 配置），由于它们并不知道这里到底是值导入还是类型导入，所以此时你必须将类型导入显式标记出来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Animal, type AnimalKind } from "./animal;\n\n// 或使用两条导入\nimport { Animal } from "./animal;\nimport type { AnimalKind } from "./animal;\n'})}),"\n",(0,s.jsxs)(n.p,{children:["当你同时启用了 ",(0,s.jsx)(n.code,{children:"isolatedModules"})," 与 ",(0,s.jsx)(n.code,{children:"preserveValueImports"})," 配置时，编辑器会严格约束你必须这么做。"]}),"\n",(0,s.jsxs)(n.h4,{id:"声明文件相关",children:["声明文件相关",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#声明文件相关",children:"#"})]}),"\n",(0,s.jsxs)(n.h5,{id:"declarationdeclarationdir",children:["declaration、declarationDir",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#declarationdeclarationdir",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["这两个选项主要控制声明文件的输出，其中 declaration 接受一个布尔值，即是否产生声明文件。而 declarationDir 控制写入声明文件的路径，默认情况下声明文件会和构建代码文件在一个位置，比如 ",(0,s.jsx)(n.code,{children:"src/index.ts"})," 会构建出 ",(0,s.jsx)(n.code,{children:"dist/index.js"})," 与 ",(0,s.jsx)(n.code,{children:"dist/index.d.ts"}),"，但使用 declarationDir 你可以将这些类型声明文件输出到一个独立的文件夹下，如 ",(0,s.jsx)(n.code,{children:"dist/types/index.d.ts"})," ",(0,s.jsx)(n.code,{children:"dist/types/utils.d.ts"})," 这样。"]}),"\n",(0,s.jsxs)(n.h5,{id:"declarationmap",children:["declarationMap",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#declarationmap",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["declarationMap 选项会为声明文件也生成 source map，这样你就可以从 ",(0,s.jsx)(n.code,{children:".d.ts"})," 直接映射回原本的 ",(0,s.jsx)(n.code,{children:".ts"})," 文件了。"]}),"\n",(0,s.jsx)(n.p,{children:"在使用第三方库时，如果你点击一个来自第三方库的变量，会发现跳转的是其声明文件。如果这些库提供了 declarationMap 与原本的 .ts 文件，那就可以直接跳转到变量对应的原始 ts 文件。当然一般发布 npm 包时并不会携带这些文件，但在 Monorepo 等场景下却有着奇效。"}),"\n",(0,s.jsxs)(n.h5,{id:"emitdeclarationonly",children:["emitDeclarationOnly",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#emitdeclarationonly",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["此配置会让最终构建结果只包含构建出的声明文件（",(0,s.jsx)(n.code,{children:".d.ts"}),"），而不会包含 ",(0,s.jsx)(n.code,{children:".js"})," 文件。类似于 noEmit 选项，你可以使用其他构建器比如 swc 来构建代码文件，而只使用 tsc 来生成类型文件。"]}),"\n",(0,s.jsxs)(n.h4,{id:"source-map-相关",children:["Source Map 相关",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#source-map-相关",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"以下配置均和 Source Map 有关，我们就放在一起介绍了。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["sourceMap 与 inlineSourceMap 有些类似于 Webpack 中的 devtool 配置，控制是生成 ",(0,s.jsx)(n.code,{children:".map.js"})," 这样独立的 source map 文件，还是直接将其附加在生成的 ",(0,s.jsx)(n.code,{children:".js"})," 文件中。这两个选项当然是互斥的。"]}),"\n",(0,s.jsx)(n.li,{children:"inlineSources 这一选项类似于 source map，只不过它是映射到原本的 .ts 文件，也就是你可以从压缩过的代码直接定位到原本的 .ts 文件。"}),"\n",(0,s.jsx)(n.li,{children:"sourceRoot 与 mapRoot，这两个选项通常供 debugger 消费，分别用于定义我们的源文件与 source map 文件的根目录。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"构建产物代码格式化配置",children:["构建产物代码格式化配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建产物代码格式化配置",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"以下选项主要控制产物代码中的代码格式化，或者说代码风格相关，我们就放在一起介绍了。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["newLine，指定文件的结尾使用 CRLF 还是 LF 换行风格。其中 CRLF 其实就是 Carriage Return Line Feed ，是 Windows（DOS）系统下的换行符（相当于 ",(0,s.jsx)(n.code,{children:"\\r\\n"}),"），而 LF 则是 Line Feed，为 Unix 下的换行符（相当于 ",(0,s.jsx)(n.code,{children:"\\n"}),"）。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"removeComments，移除所有 TS 文件的注释，默认启用。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["stripInternal 这一选项会阻止为被标记为 internal 的代码语句生成对应的类型，即被 JSDoc 标记为 ",(0,s.jsx)(n.code,{children:"@internal"}),"。推荐的做法是为仅在内部使用而没有导出的变量或方法进行标记，来减少生成代码的体积。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'  /**\n   * @internal\n   */\n  const SECRET_KEY = "LINBUDU";\n'})}),"\n",(0,s.jsx)(n.p,{children:"以上这段代码不会生成对应的类型声明。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结与预告",children:["总结与预告",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结与预告",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这一节我们介绍了构建相关的配置，其中主要的概念包括如何配置你的输入与输出，以及如何启用特殊的语法等。这些配置通常通常不会频繁发生变化（除了 lib 可能会需要动态调整），而是在有特殊的需要时再对应地进行配置。"}),"\n",(0,s.jsx)(n.p,{children:"在下一节，我们会介绍检查相关与工程相关的配置项，其中检查部分包括了类型检查、逻辑检查等，而工程配置则包括了一系列兼容性与工程能力的配置。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["TypeScript%20%E5%85%A8%E9%9D%A2%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%2F27.TSConfig%20%E5%85%A8%E8%A7%A3%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E6%9E%84%E5%BB%BA%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE.md"]={toc:[{text:"构建相关",id:"构建相关",depth:2},{text:"构建源码相关",id:"构建源码相关",depth:3},{text:"特殊语法相关",id:"特殊语法相关",depth:4},{text:"构建解析相关",id:"构建解析相关",depth:3},{text:"files、include 与 exclude",id:"filesinclude-与-exclude",depth:4},{text:"baseUrl",id:"baseurl",depth:4},{text:"rootDir",id:"rootdir",depth:4},{text:"rootDirs",id:"rootdirs",depth:4},{text:"types 与 typeRoots",id:"types-与-typeroots",depth:4},{text:"moduleResolution",id:"moduleresolution",depth:4},{text:"moduleSuffixes",id:"modulesuffixes",depth:4},{text:"noResolve",id:"noresolve",depth:4},{text:"paths",id:"paths",depth:4},{text:"resolveJsonModule",id:"resolvejsonmodule",depth:4},{text:"构建产物相关",id:"构建产物相关",depth:3},{text:"构建输出相关",id:"构建输出相关",depth:4},{text:"声明文件相关",id:"声明文件相关",depth:4},{text:"Source Map 相关",id:"source-map-相关",depth:4},{text:"构建产物代码格式化配置",id:"构建产物代码格式化配置",depth:3},{text:"总结与预告",id:"总结与预告",depth:2}],title:"27.TSConfig 全解（上）：构建相关配置",headingTitle:"27.TSConfig 全解（上）：构建相关配置",frontmatter:{}}}}]);