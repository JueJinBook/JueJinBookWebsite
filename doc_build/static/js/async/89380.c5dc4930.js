"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["89380"],{556868:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var r=s(552676),c=s(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",h4:"h4",pre:"pre",code:"code",strong:"strong",img:"img",ul:"ul",li:"li",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"29云函数的配置与进阶",children:["29.云函数的配置与进阶",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#29云函数的配置与进阶",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"44-云函数的配置与进阶",children:["4.4 云函数的配置与进阶",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#44-云函数的配置与进阶",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"云函数在云端Node.js的运行机制与本地Node.js会有一些差异，主要表现在云函数实例是由事件触发不是始终运行的（执行完随时会销毁），各个实例之间在横向上是相互隔离的（没有公用的内存或硬盘空间），在纵向上是无状态的（云函数的执行不能调用上一次云函数的执行信息）。云函数平台通过弹性伸缩实例来支持高并发，实例也存在冷启动、热启动（实例复用）的情况。除了机制不同，云函数是无服务器Serverless架构，配置上与传统的Node.js服务器也有所不同。"}),"\n",(0,r.jsxs)(n.h3,{id:"441-云函数的环境变量",children:["4.4.1 云函数的环境变量",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#441-云函数的环境变量",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1云开发环境的processenv",children:["1、云开发环境的process.env",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1云开发环境的processenv",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在配置云函数的环境变量之前，我们需要先来了解云函数的process.env属性，它会返回包含用户环境的对象。process对象是Node.js的全局对象，无需使用require()就可以使用。"}),"\n",(0,r.jsx)(n.p,{children:"比如在invoke云函数里输入以下代码，上传部署到云端之后，在开发者工具的console调用，然后查看云函数的日志就可以看到env环境变量对象："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nexports.main = async(event, context) => {\n  console.log(\"env环境变量\",process.env)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["env环境变量里包含一些内置的环境变量key，比如以",(0,r.jsx)(n.code,{children:"SCF_"}),"、",(0,r.jsx)(n.code,{children:"QCLOUD_"}),"、 ",(0,r.jsx)(n.code,{children:"TECENTCLOUD_ "}),"开头的key是无法配置的。env对象的一些属性，我们可以在云函数中直接获取到它的具体值并在代码中会用。"]}),"\n",(0,r.jsx)(n.p,{children:"比如SCF_RUNTIME函数运行时的Node.js版本，SCF_FUNCTIONVERSION是云函数的版本，TENCENTCLOUD_APPID是云开发对应的腾讯云账号APPID，使用方法如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nexports.main = async(event, context) => {\n  const {SCF_RUNTIME,SCF_FUNCTIONVERSION,TENCENTCLOUD_APPID} = process.env\n  return {SCF_RUNTIME,SCF_FUNCTIONVERSION,TENCENTCLOUD_APPID}\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"2环境变量的配置与应用",children:["2、环境变量的配置与应用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2环境变量的配置与应用",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["打开云开发控制台云函数标签页，我们可以选择一个云函数比如invoke，然后点击",(0,r.jsx)(n.strong,{children:"版本管理"}),"，云函数更新迭代比较频繁且版本变更比较频繁时，就需要对新版本的云函数发布一个灰度版本以来了解新版云函数的执行情况，这时候就可以使用云函数的灰度/版本管理（这里就不深入介绍了）。\n",(0,r.jsx)(n.img,{src:"https://i.hackweek.org/img/4/WX20200924-152135@2x.png",alt:"云函数灰度/版本管理"}),"\n而我们要配置云函数的环境变量，可以点击",(0,r.jsx)(n.strong,{children:"配置"}),"，进入云函数的配置页，在环境变量处，我们可以给云函数以key和value的方式配置环境变量。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://i.hackweek.org/img/4/WX20200924-154834@2x.png",alt:"云函数环境变量配置"})}),"\n",(0,r.jsxs)(n.p,{children:["在配图中，我们写了一些环境变量的大致示例，这些变量的值可以通过",(0,r.jsx)(n.code,{children:"process.env.key"}),"来获取，环境变量常用于如下应用场景："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"可变值提取：我们可以把业务中有可能会变动的值提取至环境变量中，这样就能避免需要根据业务变更而修改云函数的代码了；"}),"\n",(0,r.jsx)(n.li,{children:"加密信息外置：我们可以把认证、加密等敏感信息的key，从代码中提取至环境变量，就能避免key硬编码而引起的安全风险了；"}),"\n",(0,r.jsx)(n.li,{children:"环境区分：针对不同开发阶段所要进行的配置和数据库信息，也可提取到环境变量中，这样仅需要修改环境变量的值，分别执行开发环境数据库和发布环境数据库即可；"}),"\n",(0,r.jsxs)(n.li,{children:["云开发环境的时区：云开发环境的默认时区为UTC+0，比北京时间UTC+8晚了8小时，配置函数的环境变量，设置",(0,r.jsx)(n.code,{children:"TZ"}),"为",(0,r.jsx)(n.code,{children:"Asia/Shanghai"})," 即可。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"442-内存与超时时间",children:["4.4.2 内存与超时时间",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#442-内存与超时时间",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1云函数的内存配置",children:["1、云函数的内存配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1云函数的内存配置",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在云函数的调用日志里，我们可以看到云函数被调用的执行时间和执行内存。默认情况下，云函数的配置内存为256MB，而一般情况下云函数的执行内存都会在100MB以内。"}),"\n",(0,r.jsx)(n.p,{children:"如果根据项目需要，你希望使用云函数来执行图片、音视频、爬虫等任务的处理，云函数的执行内存可能会超过256M，这个时候你可以将云函数的内存升级到512M、1024M等；而如果你只是使用云函数处理一些简单的任务，你可以将云函数的内存将配到128M。"}),"\n",(0,r.jsx)(n.p,{children:"在前面我们已经说过，云函数有个计费指标资源使用量GBs，它的值为云函数的配置内存 X 运行计费时长，也就是说根据业务情况合理配置云函数的内存，可以降低云函数的成本。"}),"\n",(0,r.jsxs)(n.h4,{id:"2云函数的执行时间与超时时间",children:["2、云函数的执行时间与超时时间",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2云函数的执行时间与超时时间",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"云函数默认的超时时间是3秒钟，通常情况下，这个时长已经足够了；一般来说，如果日志里云函数的执行时长超过300毫秒，就应该检查云函数是否需要优化了。不仅如此，对于一些密集型的任务，也建议使用定时触发器来解决，比如当需要使用云函数发送几十万条短信时，可以借助于定时触发器分批发送，如每5秒，而不是使用云函数一次性发送完（关于定时触发器，教程后面有介绍）。"}),"\n",(0,r.jsx)(n.p,{children:"不过如果根据业务需求，云函数会下载一些文件，或处理的链路比较长，或处理的量相对比较大（比如几千条短信之类的），3s的执行时间可能会不够，这时候就需要将云函数的超时时间的值设置更大一些。云函数的超时时间最大可以设置为60s，不过建议一般不要超过20s。"}),"\n",(0,r.jsxs)(n.h3,{id:"443-云函数模块与实例复用",children:["4.4.3 云函数模块与实例复用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#443-云函数模块与实例复用",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1云函数模块的创建与引入",children:["1、云函数模块的创建与引入",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1云函数模块的创建与引入",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"使用开发者工具在invoke云函数目录下新建一个common文件用于存放一些\b模块文件，然后再在common文件夹下新建common.js文件："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"invoke // 云函数目录\n├── common //common文件夹\n│   └── common.js //common.js文件\n└── index.js\n└── config.json \n└── package.json \n"})}),"\n",(0,r.jsx)(n.p,{children:"在common.js输入以下代码，在common文件里就包含一些通用的数据对象、函数等："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const key = {\n	AppID: 'wxda99ae45313257046',  \n	AppKey: 'josgjwoijgowjgjsogjo', \n}\n\nconst getName = (msg) => {\n  return msg+'李东bbsky';\n};\n\n//判断是否为数字\nconst validateNumber = n => !isNaN(parseFloat(n)) && isFinite(n) && Number(n) == n;\n//元素在数组的index位置\nconst indexOfAll = (arr, val) => arr.reduce((acc, el, i) => (el === val ? [...acc, i] : acc), []);\nexports.key = key\nexports.getName = getName\nexports.validateNumber = validateNumber\nexports.indexOfAll = indexOfAll\n"})}),"\n",(0,r.jsx)(n.p,{children:"在index.js里输入以下代码，注意模块文件的引入以及模块里的数据对象、函数等接口的调用方法："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nconst common = require('./common/common.js');\nconst {key,getName,validateNumber,indexOfAll} = common\n\nexports.main = async(event, context) => {\n  const msg = \"你好啊\"\n  console.log(getName(msg)) \n  console.log(key.AppID)\n  console.log(validateNumber(msg))\n  console.log(indexOfAll([1, 2, 3, 1, 2, 3], 1))\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"2关于实例复用",children:["2、关于实例复用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2关于实例复用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"建议在云函数的exports.main函数之外只定义常量或者公共方法，不要定义变量。main函数之外声明的变量可能会被缓存，而不是每次都执行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nlet i = 0; //比如这里在main函数之外定义了一个变量i\nexports.main = async(event, context) => {\n  i++;\n  console.log(i);\n  return i;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"在第一次调用该云函数的时候函数返回的结果为1，这是符合预期的。但如果连续调用这个云函数，返回值有可能是2或从2开始\b递增，也有可能又变成1，这便是实例复用的结果。"}),"\n",(0,r.jsx)(n.p,{children:"当云函数热启动时，执行函数的Node.js进程会被复用，进程的上下文也得到了保留，所以变量i自增。当云函数冷启动时，Node.js进程是全新的, 代码会从头完整的执行一遍，此时就会返回1。所以，开发者在编写云函数时，应注意保证云函数是无状态的、幂等的，即当次云函数的执行不依赖上一次云函数执行过程中在运行环境中残留的信息。"}),"\n",(0,r.jsxs)(n.h3,{id:"444-云函数调用进阶",children:["4.4.4 云函数调用进阶",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#444-云函数调用进阶",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["使用云函数也可以使用",(0,r.jsx)(n.code,{children:"cloud.callFunction"}),"接口来调用其他云函数（可以是同一云开发环境的云函数，也可以是同一账号下或跨账号其他云开发环境里的云函数）。比如云支付的支付成功回调函数就是用云函数调用云函数。对于日常的业务，通常不太建议这种调用链路过长的方式，会比较影响性能。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们还可以使用",(0,r.jsx)(n.code,{children:"switch...case"}),"将多个云函数集成到一个云函数里，其中switch语句会评估一个表达式，将表达式的值与case子句匹配，并执行与该情况相关联的语句："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nexports.main = async(event, context) => {\n  console.log(event.action)\n  switch (event.action) { //根据调用云函数时传入的action的值来调用不同的函数\n    case 'addPost': {\n      return addPost(event)\n    }\n    case 'deletePost': {\n      return deletePost(event)\n    }\n    case 'updatePost': {\n      return updatePost(event)\n    }\n    case 'getPost': {\n      return getPost(event)\n    }\n    default: {\n      return \n    }\n  }\n};\n\nasync function addPost(event) {\n  return '创建一篇文章' //这里只是返回一个字符串，可以换成其他的函数，比如在数据库里创建一篇文章\n}\nasync function deletePost(event) {\n  return '删除一篇文章'\n}\nasync function updatePost(event) {\n  return '更新一篇文章'\n}\nasync function getPost(event) {\n  return '获取一篇文章'\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"调用云函数时，"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'wx.cloud.callFunction({\n  name:"post",\n  data:{\n    action:"addPost" //\n  }\n}).then(res=>{\n  console.log(res)\n})\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["将多个云函数集成到一个云函数里除了可以通过",(0,r.jsx)(n.code,{children:"switch...case"}),"的方法外，还可以使用tcb-router和severless-http，这些在教程的第三部分、第四部分都有详细的讲解。"]}),"\n"]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let a=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F29.%E4%BA%91%E5%87%BD%E6%95%B0%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%BF%9B%E9%98%B6.md"]={toc:[{text:"4.4 云函数的配置与进阶",id:"44-云函数的配置与进阶",depth:2},{text:"4.4.1 云函数的环境变量",id:"441-云函数的环境变量",depth:3},{text:"1、云开发环境的process.env",id:"1云开发环境的processenv",depth:4},{text:"2、环境变量的配置与应用",id:"2环境变量的配置与应用",depth:4},{text:"4.4.2 内存与超时时间",id:"442-内存与超时时间",depth:3},{text:"1、云函数的内存配置",id:"1云函数的内存配置",depth:4},{text:"2、云函数的执行时间与超时时间",id:"2云函数的执行时间与超时时间",depth:4},{text:"4.4.3 云函数模块与实例复用",id:"443-云函数模块与实例复用",depth:3},{text:"1、云函数模块的创建与引入",id:"1云函数模块的创建与引入",depth:4},{text:"2、关于实例复用",id:"2关于实例复用",depth:4},{text:"4.4.4 云函数调用进阶",id:"444-云函数调用进阶",depth:3}],title:"29.云函数的配置与进阶",headingTitle:"29.云函数的配置与进阶",frontmatter:{}}}}]);