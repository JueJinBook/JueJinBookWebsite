"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["34196"],{511690:function(e,n,t){t.r(n),t.d(n,{default:()=>T});var s=t(552676),r=t(740453);let i=t.p+"static/image/6aa4e2b7f2934937275bb32bf0ac1c24.b5c3b0af.webp",d=t.p+"static/image/be1e751cd6303cd87f23076157959b13.1b51dab3.webp",l=t.p+"static/image/581eeb3f56fd7f91adcd464456252a0f.6986e124.webp",o=t.p+"static/image/7356b1abad837f810180803eb0977d7b.491061c6.webp",a=t.p+"static/image/c7d4f29e029e1e1e1d2d4392ea74bc94.fbfbff37.webp",c=t.p+"static/image/87284b11e3c28c967ebecd48d1c6582e.65ffdb6a.webp",h=t.p+"static/image/7d4127d19df4405e73b191694a2d9add.04bb224f.webp",p=t.p+"static/image/b71aaa005eda6770a6054432be86246d.85473065.webp",x=t.p+"static/image/e4f8907dc767085e4ae364747bbfbba1.6a50e18a.webp",f=t.p+"static/image/e9866b4665325523c547d1fc0e3df9da.32de8ffe.webp",j=t.p+"static/image/af46ac618e550e686b7f4e2023a7c495.6f99dcd9.webp",b=t.p+"static/image/9b09a98592f3b080de30c91c27747c47.d4ad75ad.webp",u=t.p+"static/image/0ee8493e82b4f570f19a31efc1f18573.cc42c36c.webp",v=t.p+"static/image/8c68e247c5a493a3a79bcc68e0e1b53f.506b4bce.webp",m=t.p+"static/image/e5684c365d922ca728d3265eef8d4645.7b2cef9b.webp",g=t.p+"static/image/173860b2786d264b80fbb4a4cfecb0f6.fb224d46.webp",k=t.p+"static/image/e1d2b70f3edd20eb91d45b1717be6256.c60af23d.webp",w=t.p+"static/image/2c91ab4f69d65545de8d94325c4292d2.2f740d38.webp",y=t.p+"static/image/cdaed15d6210d20f795315d814a64eb5.a497bf98.webp",N=t.p+"static/image/64063de161684ea551ff53b8337a0e10.b4ce4ddc.webp";function S(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",h3:"h3",code:"code",pre:"pre",img:"img",ol:"ol",li:"li",strong:"strong",h4:"h4",ul:"ul"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"9-语法篇--动画",children:["9-语法篇 ❘ 动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9-语法篇--动画",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"推荐学习指数：⭐️⭐️，建议学习"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"1-前言",children:["1. 前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"动画是 Svelte 的重要组成部分，重要到什么程度呢？Svelte 内置了 4 个包（svelte/motion、svelte/transition、svelte/animate、svelte/easing）来提供完善的动画选项。在 Svelte 实现动画非常的简单，以至于用 Svelte 不写点动画属实有些浪费。那就让我们看看在 Svelte 中如何实现动画吧！"}),"\n",(0,s.jsxs)(n.h2,{id:"2-sveltemotion",children:["2. svelte/motion",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-sveltemotion",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"21-本质是-store",children:["2.1. 本质是 Store",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-本质是-store",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["svelte/motion 导出两个函数 ",(0,s.jsx)(n.code,{children:"tweened"})," 和 ",(0,s.jsx)(n.code,{children:"spring"}),"，它们本质是 Writable Store，其值可以在 set 和 update 后随时间而变化。"]}),"\n",(0,s.jsx)(n.p,{children:"我们先正常写一个 Store 功能："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\nimport { writable } from 'svelte/store';\nconst count = writable(0);\n<\/script>\n\n<button on:click={() => { $count += 1}}>+</button>\n<button on:click={() => { $count -= 1}}>-</button>\n\n<p>{$count}</p>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/afc1eeffca9748f9bb931e81def9a5fd?version=4.2.18",title:"https://svelte.dev/repl/afc1eeffca9748f9bb931e81def9a5fd?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"此时效果没有什么特殊的，点击按钮的时候，数字直接变化。"}),"\n",(0,s.jsxs)(n.p,{children:["但是当用上 ",(0,s.jsx)(n.code,{children:"tweened"})," 的时候："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\nimport { tweened } from 'svelte/motion';\nconst count = tweened(0, {\n  duration: 300\n});\n<\/script>\n\n<button on:click={() => { $count += 1}}>+</button>\n<button on:click={() => { $count -= 1}}>-</button>\n\n<p>{$count}</p>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["因为 tweened 函数返回的是 Store，所以它的写法与其他 Store 并无差别。",(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/edd3510558e644699b06c3949a2308da?version=4.2.18",title:"https://svelte.dev/repl/edd3510558e644699b06c3949a2308da?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"此时浏览器效果如下："})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当点击按钮的时候，数字有一个不断变化的效果，因为设置了 duration，所以该动画会在 300ms 内完成。"}),"\n",(0,s.jsx)(n.p,{children:"那你可能会想：“这有什么用，不就是数字变来变去，数字位还这么多，能做啥？”"}),"\n",(0,s.jsx)(n.p,{children:"这只是为了让大家看到 tweened 和之后 spring 函数的本质：数会返回一个 Store，该 Store 的值会在 set 和 update 的时候随时间变化。"}),"\n",(0,s.jsx)(n.p,{children:"如果要做动画，我们稍微改下就能实现："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\nimport { tweened } from 'svelte/motion';\nconst count = tweened(0, {\n  duration: 300\n});\n<\/script>\n\n<button on:click={() => { $count += 0.1}}>+</button>\n<button on:click={() => { $count -= 0.1}}>-</button>\n\n<progress value={$count}></progress>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/70c5668ea9e249049aa7fc2b9722104c?version=4.2.18",title:"https://svelte.dev/repl/70c5668ea9e249049aa7fc2b9722104c?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"注：因为 GIF 的缘故，动画显得卡顿，实际很流畅，可打开链接查看具体效果"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"22-tweened-函数",children:["2.2. tweened 函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-tweened-函数",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"那我们就来讲讲 tweened 函数的具体用法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"function tweened<T>(\n  value?: T | undefined,\n  defaults?: TweenedOptions<T> | undefined\n): Tweened<T>;\n"})}),"\n",(0,s.jsx)(n.p,{children:"函数的第一个参数就是值，第二个参数是配置选项，一共有 4 个："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"delay"}),"：动画延迟时间，默认 0ms"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"duration"}),"：动画持续时间，默认为 400ms"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"easing"}),"：缓动函数，你可以理解为定义动画的变化速度"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"interpolate"}),"：插值函数，定义具体变化过程"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"221-easing",children:["2.2.1. easing",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#221-easing",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["其中 easing 可以配合 ",(0,s.jsx)(n.code,{children:"svelte/easing"}),"一起使用，比如上节的进度条因为是匀速运动，所以显得“不带劲”，那就让它先快后慢试试："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\nimport { tweened } from 'svelte/motion';\nimport { cubicOut } from 'svelte/easing';\n\nconst count = tweened(0, {\n  duration: 300,\n  easing: cubicOut\n});\n<\/script>\n\n<button on:click={() => { $count += 0.1}}>+</button>\n<button on:click={() => { $count -= 0.1}}>-</button>\n\n<progress value={$count}></progress>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们做个简单的",(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/49eca4d917034a4f938c49511bf14b14?version=4.2.18",title:"https://svelte.dev/repl/49eca4d917034a4f938c49511bf14b14?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"缓动函数对比"}),"："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"具体 svelte/easing 导出了哪些缓动函数，本篇后面会讲到。"}),"\n",(0,s.jsxs)(n.h4,{id:"222-interploate",children:["2.2.2. interploate",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#222-interploate",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"interpolate 能够实现的功能就很强大了，目前我们实现的是数值的变化，如果我想要实现文字、色值的变化呢？这就都要靠 interpolate 函数了。"}),"\n",(0,s.jsxs)(n.p,{children:["这个函数有固定的格式：",(0,s.jsx)(n.code,{children:"(a, b) => t => value"}),"，其中 a 是起始值、b 是目标值，t 是 0 和 1 之间的数字，你可以简单理解为时间，value 是结果。简单来说，你要写一个函数，描述随着时间变化，根据目标值、起始值、时间算出当下的值是多少。"]}),"\n",(0,s.jsx)(n.p,{children:"我们来实现一个颜色变化效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<script>\nimport { tweened } from \'svelte/motion\';\nconst color = tweened("4096ff", {\n  duration: 1000,\n  interpolate: (a, b) => (t) => {\n    const rA = parseInt(a.slice(0, 2), 16);\n    const gA = parseInt(a.slice(2, 4), 16);\n    const bA = parseInt(a.slice(4, 6), 16);\n\n    const rB = parseInt(b.slice(0, 2), 16);\n    const gB = parseInt(b.slice(2, 4), 16);\n    const bB = parseInt(b.slice(4, 6), 16);\n\n    const rT = ("0" + Math.round((rB - rA) * t + rA).toString(16)).slice(-2);\n    const gT = ("0" + Math.round((gB - gA) * t + gA).toString(16)).slice(-2);\n    const bT = ("0" + Math.round((bB - bA) * t + bA).toString(16)).slice(-2);\n\n    return rT + gT + bT;\n  }\n});\n<\/script>\n\n<button on:click={() => { $color = \'ff4d4f\'}}>+</button>\n<button on:click={() => { $color = \'4096ff\'}}>-</button>\n\n<button style="background-color: #{$color};border:none;padding: 4px 12px;border-radius: 5px;">Colorful Button</button>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/1ce69eedf8f14c36b8c8ad770a7cda2d?version=4.2.18",title:"https://svelte.dev/repl/1ce69eedf8f14c36b8c8ad770a7cda2d?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["这里只是为了演示 interploate 函数中到底怎么实现，才这样写的，如果真实项目开发中需要进行色值的改变，还是建议使用 ",(0,s.jsx)(n.a,{href:"https://d3js.org/d3-interpolate/color#interpolateLab",title:"https://d3js.org/d3-interpolate/color#interpolateLab",target:"_blank",rel:"noopener noreferrer",children:"d3-interpolate"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\nimport { tweened } from 'svelte/motion';\nimport { interpolateLab } from 'd3-interpolate';\n\nconst color = tweened(\"#4096ff\", {\n  duration: 1000,\n  interpolate: interpolateLab\n});\n<\/script>\n\n<button on:click={() => { $color = '#ff4d4f'}}>+</button>\n<button on:click={() => { $color = '#4096ff'}}>-</button>\n\n<button style=\"background-color: {$color};border:none;padding: 4px 12px;border-radius: 5px;\">Colorful Button</button>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/2ad855d89cde4d0dbf87e85db061c235?version=4.2.18",title:"https://svelte.dev/repl/2ad855d89cde4d0dbf87e85db061c235?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果不变："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"23-spring-函数",children:["2.3. spring 函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-spring-函数",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"spring 函数与 tweened 函数类似，不过 spring 模拟的是类似于弹簧的弹性运动，而且 tweened 有固定的动画时长，spring 函数根据自己的配置计算，时长不固定，但是动画会显得更加自然，因此更适合用于经常改变的值，比如根据鼠标位置变化等。"}),"\n",(0,s.jsx)(n.p,{children:"用法如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"function spring<T = any>(\n  value?: T | undefined,\n  opts?: SpringOpts | undefined\n): Spring<T>;\n"})}),"\n",(0,s.jsx)(n.p,{children:"函数第一个参数是 Store 的值，第二个参数是配置项，一共有 3 个："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"stiffness"}),"：刚性，0 到 1 之间的值，默认为 0.15"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"damping"}),"：阻尼，0 到 1 之间的值，默认为 0.8"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"precision"}),"：精度，默认为 0.01，确认弹簧已经稳定的精度值"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["大家结合这个 ",(0,s.jsx)(n.a,{href:"https://svelte.dev/examples/spring",title:"https://svelte.dev/examples/spring",target:"_blank",rel:"noopener noreferrer",children:"REPL"})," 通过调节参数和晃动鼠标体会这些值的效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"简单来说的话，刚度是物体抵抗施加的力而形变的程度。在弹性系统中，刚度越大，抵抗变形的能力越强，恢复到平衡位置的速度就越快。阻尼用于描述系统在受到扰动后震荡及衰减的情形。阻尼越大，弹性运动的震荡次数越少、震荡幅度越小。"}),"\n",(0,s.jsxs)(n.h2,{id:"3-sveltetransition",children:["3. svelte/transition",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-sveltetransition",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["svelte/transition 导出 7 个过渡函数 ",(0,s.jsx)(n.code,{children:"fade"}),"、",(0,s.jsx)(n.code,{children:"blur"}),"、 ",(0,s.jsx)(n.code,{children:"fly"}),"、 ",(0,s.jsx)(n.code,{children:"slide"}),"、 ",(0,s.jsx)(n.code,{children:"scale"}),"、 ",(0,s.jsx)(n.code,{children:"draw"})," 和 ",(0,s.jsx)(n.code,{children:"crossfade"})," 。"]}),"\n",(0,s.jsxs)(n.p,{children:["其中 ",(0,s.jsx)(n.code,{children:"fade"}),"、",(0,s.jsx)(n.code,{children:"blur"}),"、 ",(0,s.jsx)(n.code,{children:"fly"}),"、 ",(0,s.jsx)(n.code,{children:"slide"}),"、 ",(0,s.jsx)(n.code,{children:"scale"}),"，顾名思义，都是具体的动画形式，",(0,s.jsx)(n.code,{children:"draw"})," 用于 SVG，",(0,s.jsx)(n.code,{children:"crossfade"})," 效果比较特殊，单独讲解。"]}),"\n",(0,s.jsxs)(n.h3,{id:"31-transtion",children:["3.1. transtion",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-transtion",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"它们都要搭配 transition 指令使用。我们以 fade 为例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\n  import { fade } from 'svelte/transition';\n  let visible = true;\n<\/script>\n\n<label>\n  <input type=\"checkbox\" bind:checked={visible}>\n  visible\n</label>\n\n{#if visible}\n  <div transition:fade>fades in and out</div>\n{/if}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/f254331bb81845a5930a04f3ef993531?version=4.2.18",title:"https://svelte.dev/repl/f254331bb81845a5930a04f3ef993531?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当状态改变时，元素进入或者离开 DOM 就会触发过渡动画。"}),"\n",(0,s.jsx)(n.p,{children:"每种动画都支持参数配置，语法如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"transition:xxx={params}\n"})}),"\n",(0,s.jsx)(n.p,{children:"以 fade 函数为例，它的参数有："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"delay (number, 默认 0)"}),"： 动画延迟开始时间"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"duration (number, 默认 400)"}),"： 动画持续时间"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"easing (function, 默认 linear)"}),"： 动画运动函数"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["每个函数参数配置项略有不同，具体参考文档 ",(0,s.jsx)(n.a,{href:"https://svelte.dev/docs/svelte-transition",title:"https://svelte.dev/docs/svelte-transition",target:"_blank",rel:"noopener noreferrer",children:"svelte/transition • Docs • Svelte"})]}),"\n",(0,s.jsxs)(n.h3,{id:"32-inout",children:["3.2. in/out",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-inout",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["transition 控制的是进入和退出动画，如果只是要控制单向的动画，比如进入或者退出，可以搭配 ",(0,s.jsx)(n.code,{children:"in"}),"或 ",(0,s.jsx)(n.code,{children:"out"}),"指令："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"{#if visible}\n  <div in:fly out:fade>flies in, fades out</div>\n{/if}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"33-global--local",children:["3.3. global | local",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-global--local",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"一般来说，只有元素的直接包含块被添加或者销毁是，才会触发过渡动画。如果你想要全局触发，即添加或删除任何包含块的时候都触发过渡动画，你可以这样做："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"{#if x}\n  {#if y}\n    <p transition:fade>只有当 y 改变的时候才会触发动画</p>\n\n    <p transition:fade|global>x 或者 y 改变的时候都会触发动画</p>\n  {/if}\n{/if}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Svelte 4 默认是局部的（local），在 Svelte 3 中，默认是全局的（global），如果你用的是 Svelte3，这段代码就要写作："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"{#if x}\n  {#if y}\n    <p transition:fade|local>只有当 y 改变的时候才会触发动画</p>\n\n    <p transition:fade>x 或者 y 改变的时候都会触发动画</p>\n  {/if}\n{/if}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"34-自定义过渡函数",children:["3.4. 自定义过渡函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34-自定义过渡函数",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"过渡动画支持自定义："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\n  import { elasticOut } from 'svelte/easing';\n  import { scale } from 'svelte/transition';\n\n  let visible = true;\n\n  function whoosh(node, params) {\n    const existingTransform = getComputedStyle(node).transform.replace('none', '');\n\n    return {\n      delay: params.delay || 0,\n      duration: params.duration || 400,\n      easing: params.easing || elasticOut,\n      css: (t, u) => `transform: ${existingTransform} scale(${t})`\n    };\n  }\n<\/script>\n\n<input type=\"checkbox\" bind:checked={visible}>\n\n{#if visible}\n  <div in:whoosh={{delay: 100, duration: 1000}}>whooshes in</div>\n{/if}\n"})}),"\n",(0,s.jsx)(n.p,{children:"当你返回一个包含 css 函数的对象时，Svelte 将使用该函数为该元素添加 CSS 动画。其中 css 函数的两个参数，t 和 u，t 是从 0 到 1 之间的值，如果是入场动画，t 从 0 到 1，如果是退场动画，t 从 1 到 0。u 则等于 1 - t。"}),"\n",(0,s.jsxs)(n.p,{children:["在这段代码中，我们自定义实现了 scale 从 0 到 1 的变化。",(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/d62bd960a1ff4abfbb3a2356774752ca?version=4.2.18",title:"https://svelte.dev/repl/d62bd960a1ff4abfbb3a2356774752ca?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"除了返回 css 函数，也可以返回 tick 函数。理论上，能用 CSS 函数，不要用 tick 函数，因为 CSS 动画可以在主线程之外运行，从而防止在速度较慢的设备上出现卡顿。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\n  import { elasticOut } from 'svelte/easing';\n\n  let visible = true;\n\n  function typewriter(node, { speed = 1 }) {\n    const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;\n\n    if (!valid) {\n      throw new Error(`This transition only works on elements with a single text node child`);\n    }\n\n    const text = node.textContent;\n    const duration = text.length / (speed * 0.01);\n\n    return {\n      duration,\n      tick: (t) => {\n        const i = ~~(text.length * t);\n        node.textContent = text.slice(0, i);\n      }\n    };\n  }\n<\/script>\n\n<input type=\"checkbox\" bind:checked={visible}>\n\n{#if visible}\n  <p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>\n{/if}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/477f4f3b9e314be5b8468433176bc736?version=4.2.18",title:"https://svelte.dev/repl/477f4f3b9e314be5b8468433176bc736?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"35-过渡事件",children:["3.5. 过渡事件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#35-过渡事件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"除了标准的 DOM 事件之外，具有过渡动画的元素还有这些事件："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"introstart"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"introend"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"outrostart"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"outroend"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\n  import { fly } from 'svelte/transition';\n  let visible = true;\n  let status = ''\n<\/script>\n\n<input type=\"checkbox\" bind:checked={visible}>\n\n当前状态：{status}\n\n{#if visible}\n  <p\n    transition:fly={{ y: 200, duration: 2000 }}\n    on:introstart={() => (status = 'intro started')}\n    on:outrostart={() => (status = 'outro started')}\n    on:introend={() => (status = 'intro ended')}\n    on:outroend={() => (status = 'outro ended')}\n  >\n    Flies in and out\n  </p>\n{/if}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/2b64fde971c0433abad1cbce1217bb61?version=4.2.18",title:"https://svelte.dev/repl/2b64fde971c0433abad1cbce1217bb61?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"36-crossfade",children:["3.6. crossfade",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#36-crossfade",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"crossfade 是一个比较特殊的动画，其用法与 fade、fly 等函数略有不同，主要用于实现在列表之间移动的动画。"}),"\n",(0,s.jsx)(n.p,{children:"我们看一个例子："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\n  import {fade} from 'svelte/transition'\n  let todos = ['运动', '冥想', '阅读', '早起', '写作']\n  let dones = []\n\n  function move(todo) {\n    if (todos.includes(todo)) {\n      todos = todos.filter(t => t !== todo)\n      dones = [...dones, todo]\n    } else {\n      dones = dones.filter(t => t !== todo)\n      todos = [...todos, todo]\n    }\n  }\n<\/script>\n\n<h2>未完成</h2>\n{#each todos as todo (todo)}\n  <button on:click={() => move(todo)}>\n    {todo}\n  </button>\n{/each}\n\n<h2>完成</h2>\n{#each dones as done (done)}\n  <button on:click={() => move(done)}>\n    {done}\n  </button>\n{/each}\n\n\n<style>\n  button {\n    margin: 0 8px;\n    padding: 2px 8px;\n  }\n</style>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/28e8bd06204f4e66ba8bf6221cc21385?version=4.2.18",title:"https://svelte.dev/repl/28e8bd06204f4e66ba8bf6221cc21385?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"如大家所见，有两个列表，一个是未完成列表，一个是完成列表，当点击任务的时候，任务移动到另一列表。"}),"\n",(0,s.jsx)(n.p,{children:"如果我们要添加动画让这个过程更自然该怎么做呢？"}),"\n",(0,s.jsxs)(n.p,{children:["我们当然可以直接添加比如 ",(0,s.jsx)(n.code,{children:"scale"})," 动画："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"确实自然很多，但这里最好的动画，其实应该是移动动画，让用户清晰的看出任务的前后移动位置。这个时候就需要借助 crossfade。"}),"\n",(0,s.jsxs)(n.p,{children:["crossfade 函数会返回一对名为 ",(0,s.jsx)(n.code,{children:"send"})," 和 ",(0,s.jsx)(n.code,{children:"receive"})," 的过渡函数。当元素被 send 的时候，它会查找对应的 receive 元素，并创建一个过渡动画，将元素移动到对应的位置后淡出。当元素被 receive 的时候，也会发生相反的情况。如果没有对应的元素，则使用 fallback 过渡动画。"]}),"\n",(0,s.jsx)(n.p,{children:"crssfade 函数调用的时候支持一些配置参数："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"delay"}),"\n",(0,s.jsx)(n.li,{children:"duration"}),"\n",(0,s.jsx)(n.li,{children:"easing"}),"\n",(0,s.jsx)(n.li,{children:"fallback：当没有对应元素时使用 fallback 过渡动画"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"我们使用 crossfade 修改下刚才的例子："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\n  import { crossfade } from 'svelte/transition';\n  import { quintOut } from 'svelte/easing';\n\n  let todos = ['运动', '冥想', '阅读', '早起', '写作']\n  let dones = []\n\n  function move(todo) {\n    if (todos.includes(todo)) {\n      todos = todos.filter(t => t !== todo)\n      dones = [...dones, todo]\n    } else {\n      dones = dones.filter(t => t !== todo)\n      todos = [...todos, todo]\n    }\n  }\n\n  const [send, receive] = crossfade({\n    duration: 500,\n    easing: quintOut\n  });\n\n<\/script>\n\n<h2>未完成</h2>\n{#each todos as todo (todo)}\n  <button on:click={() => move(todo)} in:send={{ key: todo }} out:receive={{ key: todo }}>\n    {todo}\n  </button>\n{/each}\n\n<h2>完成</h2>\n{#each dones as done (done)}\n  <button on:click={() => move(done)} in:send={{ key: done }} out:receive={{ key: done }}>\n    {done}\n  </button>\n{/each}\n\n<style>\n  button {\n    margin: 0 8px;\n    padding: 2px 8px;\n  }\n</style>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/d0209ec5f73f4f1287dde738f1df7501?version=4.2.18",title:"https://svelte.dev/repl/d0209ec5f73f4f1287dde738f1df7501?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["当我们点击未完成列表中的任务时，触发 ",(0,s.jsx)(n.code,{children:"out:receive"}),"，crossfade 会通过 key 查找对应的 send 元素，做出过渡动画，将元素移动到新位置后淡出。"]}),"\n",(0,s.jsx)(n.p,{children:"之前我们讲到，没有对应的元素时会触发 fallback 动画，既然都是成对使用的，怎么会没有对应的元素呢？"}),"\n",(0,s.jsx)(n.p,{children:"现在让我们改变一下当前的任务列表实现。当点击完成列表中任务时，不再移动任务，而是改为删除。代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\n  import { crossfade, scale } from 'svelte/transition';\n  import { quintOut } from 'svelte/easing';\n\n  let todos = ['运动', '冥想', '阅读', '早起', '写作']\n  let dones = []\n\n  function move(todo) {\n    if (todos.includes(todo)) {\n      todos = todos.filter(t => t !== todo)\n      dones = [...dones, todo]\n    } else {\n      dones = dones.filter(t => t !== todo)\n    }\n  }\n\n  const [send, receive] = crossfade({\n    duration: 500,\n    easing: quintOut,\n    fallback: scale\n  });\n\n<\/script>\n\n<h2>未完成</h2>\n{#each todos as todo (todo)}\n  <button on:click={() => move(todo)} in:send={{ key: todo }} out:receive={{ key: todo }}>\n    {todo}\n  </button>\n{/each}\n\n<h2>完成</h2>\n{#each dones as done (done)}\n  <button on:click={() => move(done)} in:send={{ key: done }} out:receive={{ key: done }}>\n    {done}\n  </button>\n{/each}\n\n<style>\n  button {\n    margin: 0 8px;\n    padding: 2px 8px;\n  }\n</style>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/b70f036f4de349e4ad18d3787dbbfd76?version=4.2.18",title:"https://svelte.dev/repl/b70f036f4de349e4ad18d3787dbbfd76?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当点击完成列表中的任务时，因为查找不到相同 key 的对应元素，所以使用 fallback 动画，这里我们设置的是 scale ，所以元素在当前位置通过 scale 动画消失。"}),"\n",(0,s.jsxs)(n.h2,{id:"4-svelteanimate",children:["4. svelte/animate",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-svelteanimate",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"svelte/animate 用于 Each 逻辑区块中的块的索引发生更改时使用："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"\x3c!-- 当 list 重排的时候，animation 会运行 --\x3e\n{#each list as item, index (item)}\n    <li animate:flip>{item}</li>\n{/each}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"svelte/animate"})," 只有一个导出函数 ",(0,s.jsx)(n.code,{children:"flip"}),"，需要搭配 ",(0,s.jsx)(n.code,{children:"animate"})," 指令实现。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"animate:flip={params}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"flip"})," 函数会计算元素的开始和结束位置，并在它们之间进行动画处理。它的配置参数如下："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"delay"}),"\n",(0,s.jsx)(n.li,{children:"duration"}),"\n",(0,s.jsx)(n.li,{children:"easing"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"比如刚才的列表动画，就适合再加一个 flip 动画。因为当元素消失时，剩余任务前移的动画很生硬。修改代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\n  import { crossfade } from 'svelte/transition';\n  import { quintOut } from 'svelte/easing';\n  import {flip} from 'svelte/animate'\n\n  let todos = ['运动', '冥想', '阅读', '早起', '写作']\n  let dones = []\n\n  function move(todo) {\n    if (todos.includes(todo)) {\n      todos = todos.filter(t => t !== todo)\n      dones = [...dones, todo]\n    } else {\n      dones = dones.filter(t => t !== todo)\n      todos = [...todos, todo]\n    }\n  }\n\n  const [send, receive] = crossfade({\n    duration: 500,\n    easing: quintOut\n  });\n\n<\/script>\n\n<h2>未完成</h2>\n{#each todos as todo (todo)}\n  <button on:click={() => move(todo)} in:send={{ key: todo }} out:receive={{ key: todo }} animate:flip>\n    {todo}\n  </button>\n{/each}\n\n<h2>完成</h2>\n{#each dones as done (done)}\n  <button on:click={() => move(done)} in:send={{ key: done }} out:receive={{ key: done }} animate:flip>\n    {done}\n  </button>\n{/each}\n\n<style>\n  button {\n    margin: 0 8px;\n    padding: 2px 8px;\n  }\n</style>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/e878335a63bb494fad0b7fee37a26099?version=4.2.18",title:"https://svelte.dev/repl/e878335a63bb494fad0b7fee37a26099?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(n.h2,{id:"5-svelteeasing",children:["5. svelte/easing",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-svelteeasing",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"缓动函数（Easing Functions）是描述数值变化速率的数学函数。因为在现实生活中，大多数运动并不是匀速的。比如掉落在地面上的弹性小球，会在地面上来回反弹直到停止。打开抽屉的时候，会先加速后减速。为了让动画更加自然，就需要配上合适的缓动函数。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"svelte/easing"})," 一共提供了 31 个命名导出函数，一个是表示匀速运动的 ",(0,s.jsx)(n.code,{children:"linear"}),"，剩下的 30 个是："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["Svelte 提供了 ",(0,s.jsx)(n.a,{href:"https://svelte.dev/examples/easing",title:"https://svelte.dev/examples/easing",target:"_blank",rel:"noopener noreferrer",children:"REPL"})," 帮助开发者查看不同缓动函数的运动效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"坐标的 x 轴是时间，y 轴是值。右侧有 10 个 Ease 函数，配上 3 个类型（In、Out、InOut）形成 30 个缓动函数。"}),"\n",(0,s.jsxs)(n.p,{children:["我们以最简单的 sine 为例，",(0,s.jsx)(n.code,{children:"sineIn"})," 表示插值缓慢开始，再逐渐加速至结束，最终突然停止。",(0,s.jsx)(n.code,{children:"sineOut"})," 表示插值快速开始，再逐渐减速至结束。",(0,s.jsx)(n.code,{children:"sineInOut"})," 表示插值缓慢开始，然后加速，再减速至结束。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["在 Svelte 中，缓动函数被描述为一个 ",(0,s.jsx)(n.code,{children:"p => t"}),"的函数，使用的是 ",(0,s.jsx)(n.a,{href:"https://web.archive.org/web/20190805215728/http://robertpenner.com/easing/",title:"https://web.archive.org/web/20190805215728/http://robertpenner.com/easing/",target:"_blank",rel:"noopener noreferrer",children:"Penner easing equations"}),"，其中 p 和 t 都是 0 到 1 之间的值。其相关源码在 ",(0,s.jsx)(n.a,{href:"https://github.com/sveltejs/svelte/blob/main/packages/svelte/src/easing/index.js",title:"https://github.com/sveltejs/svelte/blob/main/packages/svelte/src/easing/index.js",target:"_blank",rel:"noopener noreferrer",children:"svelte/src/easing/index.js"}),"，比如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export function linear(t) {\n  return t;\n}\n\nexport function sineInOut(t) {\n  return -0.5 * (Math.cos(Math.PI * t) - 1);\n}\n\nexport function sineIn(t) {\n  const v = Math.cos(t * Math.PI * 0.5);\n  if (Math.abs(v) < 1e-14) return 1;\n  else return 1 - v;\n}\n\nexport function sineOut(t) {\n  return Math.sin((t * Math.PI) / 2);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这也使得这些缓动函数可以搭配比如 css 函数一起使用："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<script>\n  import { elasticOut } from 'svelte/easing';\n  import { scale } from 'svelte/transition';\n  let visible = true;\n\n  function whoosh(node, params) {\n    const existingTransform = getComputedStyle(node).transform.replace('none', '');\n\n    return {\n      delay: params.delay || 0,\n      duration: params.duration || 400,\n      css: (t, u) => {\n        const eased = elasticOut(t);\n        return `transform: ${existingTransform} scale(${eased})`\n      }\n    };\n  }\n<\/script>\n\n<input type=\"checkbox\" bind:checked={visible}>\n\n{#if visible}\n  <div in:whoosh={{delay: 100, duration: 1000}}>whooshes in</div>\n{/if}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/66f8ac9a5dd445b4bf6e1023905fea09?version=4.2.18",title:"https://svelte.dev/repl/66f8ac9a5dd445b4bf6e1023905fea09?version=4.2.18",target:"_blank",rel:"noopener noreferrer",children:"浏览器效果如下："})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.h2,{id:"6-最后",children:["6. 最后",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-最后",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本篇介绍了 Svelte 中关于动画的 API，Svelte 内置动画实现，而且使用起来非常简单，做各种营销页面的时候，常有动画效果，借助 Svelte 可以快捷实现。"})]})}function _(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(S,{...e})}):S(e)}let T=_;_.__RSPRESS_PAGE_META={},_.__RSPRESS_PAGE_META["Svelte%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F9-%E8%AF%AD%E6%B3%95%E7%AF%87%20%E2%9D%98%20%E5%8A%A8%E7%94%BB.md"]={toc:[{text:"1. 前言",id:"1-前言",depth:2},{text:"2. svelte/motion",id:"2-sveltemotion",depth:2},{text:"2.1. 本质是 Store",id:"21-本质是-store",depth:3},{text:"2.2. tweened 函数",id:"22-tweened-函数",depth:3},{text:"2.2.1. easing",id:"221-easing",depth:4},{text:"2.2.2. interploate",id:"222-interploate",depth:4},{text:"2.3. spring 函数",id:"23-spring-函数",depth:3},{text:"3. svelte/transition",id:"3-sveltetransition",depth:2},{text:"3.1. transtion",id:"31-transtion",depth:3},{text:"3.2. in/out",id:"32-inout",depth:3},{text:"3.3. global | local",id:"33-global--local",depth:3},{text:"3.4. 自定义过渡函数",id:"34-自定义过渡函数",depth:3},{text:"3.5. 过渡事件",id:"35-过渡事件",depth:3},{text:"3.6. crossfade",id:"36-crossfade",depth:3},{text:"4. svelte/animate",id:"4-svelteanimate",depth:2},{text:"5. svelte/easing",id:"5-svelteeasing",depth:2},{text:"6. 最后",id:"6-最后",depth:2}],title:"9-语法篇 ❘ 动画",headingTitle:"9-语法篇 ❘ 动画",frontmatter:{}}}}]);