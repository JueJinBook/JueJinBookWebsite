"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["35028"],{304803:function(e,i,n){n.r(i),n.d(i,{default:()=>o});var r=n(552676),s=n(740453);let t=n.p+"static/image/ef6801fb210bc385bde16f5db3c73aec.6c633547.webp",d=n.p+"static/image/0a3719129b163c7fcaa6d109389b55fb.6aa2024e.webp",l=n.p+"static/image/f64f4e89bd083909d14c853cea5b3b4b.56c74d02.webp",h=n.p+"static/image/2632928b1d7c674a68b9072d312d45e7.ab2f7d21.webp",c=n.p+"static/image/60e875891ea896b9b398bd0409384281.3fcd1d84.webp";function a(e){let i=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",h2:"h2",img:"img",h3:"h3",code:"code",blockquote:"blockquote",strong:"strong",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.h1,{id:"28加餐_-vite-30-核心更新盘点与分析",children:["28.加餐_ Vite 3.0 核心更新盘点与分析",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#28加餐_-vite-30-核心更新盘点与分析",children:"#"})]}),"\n",(0,r.jsxs)(i.p,{children:["在 2021 年 2 月，尤大正式推出了 Vite 2.0 版本，可以说是 Vite 的一个重要转折点，自此之后 Vite 的用户量发生了非常迅速的增长，很快达到了每周 100 万的 npm 下载量。同时，Vite 的社区也越来越活跃，目前已经形成非常庞大的社区生态(详情可见",(0,r.jsx)(i.a,{href:"https://github.com/vitejs/awesome-vite",target:"_blank",rel:"noopener noreferrer",children:"Github 地址"}),")，给整个前端领域带来了诸多的改变，如:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Nuxt 3、SvelteKit、Astro、StoryBook 等在内的各大前端框架已经将 Vite 作为内置的构建方案。"}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"基于 Vite 的测试工具 Vitest 诞生，成为替代 Jest 的新一代测试方案。"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"如今已经 2022 年 7 月，距离 v2 版本已经发布了 16 个月的时间，Vite 正式推出 3.0 版本，接下来就给大家介绍一下 Vite 3.0 带来的一些改变以及未来的规划。"}),"\n",(0,r.jsxs)(i.h2,{id:"一全新的-vitepress-文档",children:["一、全新的 VitePress 文档",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#一全新的-vitepress-文档",children:"#"})]}),"\n",(0,r.jsxs)(i.p,{children:["对于用户侧来说，谈到框架的更新，文档自然是最重要的部分。现在你可以直接去 ",(0,r.jsx)(i.a,{href:"/vitejs.dev",children:"vitejs.dev"})," 站点体验到 v3 版本的文档，目前文档同样是使用 ",(0,r.jsx)(i.a,{href:"https://vitepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer",children:"VitePress"})," 进行搭建。下面是暗黑模式下的一张截图:"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,r.jsx)(i.p,{children:"怎么样，是不是比以前更加好看了呢？"}),"\n",(0,r.jsxs)(i.p,{children:["不光是 Vite，也有 Vite 生态中其它的一些项目使用 VitePress 进行文档站点的搭建，比如 ",(0,r.jsx)(i.a,{href:"https://vitest.dev/",target:"_blank",rel:"noopener noreferrer",children:"Vitest"}),", ",(0,r.jsx)(i.a,{href:"https://vite-plugin-pwa.netlify.app/",target:"_blank",rel:"noopener noreferrer",children:"vite-plugin-pwa"})," 以及 ",(0,r.jsx)(i.a,{href:"https://vitepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer",children:"VitePress"})," 自身的文档，我也十分推荐大家使用 VitePress 作为自己的文档建站方案之一。"]}),"\n",(0,r.jsxs)(i.p,{children:["如果你需要查看 Vite 2.0 的文章，也可以访问 ",(0,r.jsx)(i.a,{href:"https://v2.vitejs.dev/",target:"_blank",rel:"noopener noreferrer",children:"v2.vitejs.dev"}),"。"]}),"\n",(0,r.jsxs)(i.h2,{id:"二开发阶段的更新",children:["二、开发阶段的更新",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#二开发阶段的更新",children:"#"})]}),"\n",(0,r.jsxs)(i.h3,{id:"1-cli-的更新",children:["1. CLI 的更新",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#1-cli-的更新",children:"#"})]}),"\n",(0,r.jsxs)(i.p,{children:["在执行 ",(0,r.jsx)(i.code,{children:"vite"})," 命令启动项目时，终端的界面和之前会有所不同，而更重要的是，为了避免 Vite 开发服务的端口和别的应用冲突，默认的端口号从之前的 ",(0,r.jsx)(i.code,{children:"3000"})," 变成了 ",(0,r.jsx)(i.code,{children:"5173"}),"。"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsxs)(i.h3,{id:"2-开箱即用的-websocket-连接策略",children:["2. 开箱即用的 WebSocket 连接策略",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#2-开箱即用的-websocket-连接策略",children:"#"})]}),"\n",(0,r.jsx)(i.p,{children:"Vite 2 中有存在一个痛点，即在存在代理的情况下(比如 Web IDE)需要我们手动配置 WebSocket 使 HMR 生效。目前 Vite 内置了一套更加完善的 WebSocket 连接策略，自动满足更多场景的 HMR 需求。"}),"\n",(0,r.jsxs)(i.h3,{id:"3-服务冷启动性能提升",children:["3. 服务冷启动性能提升",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#3-服务冷启动性能提升",children:"#"})]}),"\n",(0,r.jsx)(i.p,{children:"Vite 3.0 在服务冷启动方面做了非常多的工作，来最大程度提升项目启动的速度。"}),"\n",(0,r.jsx)(i.p,{children:"首先我们来盘点一下 Vite 2.x 阶段服务冷启动的一些问题。"}),"\n",(0,r.jsx)(i.p,{children:"从 Vite 2.0 到 2.9 版本之前，Vite 会在服务启动之前进行依赖预构建，也就是使用 Esbuild 将项目中使用到的依赖扫描出来(Scan)，然后分别进行一次打包(Optimize)。"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsx)(i.p,{children:"这样会造成两个问题:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"依赖预构建会阻塞 Dev Server 启动，但其实不阻塞的情况下，Dev Server 也可以正常启动。"}),"\n",(0,r.jsxs)(i.li,{children:["当某些 Vite 插件手动注入了 import 语句，比如调用 ",(0,r.jsx)(i.code,{children:"babel-plugin-import"})," 添加",(0,r.jsx)(i.code,{children:"import Button from 'antd/lib/button'"}),"，就会导致 Vite 的二次预构建，因为 ",(0,r.jsx)(i.code,{children:"antd/lib/button"})," 的引入代码由 Vite 插件注入，属于 Dev Server 运行时发现的依赖，冷启动阶段无法扫描到。"]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["所谓的二次预构建包含两个步骤，一是需要将所有的依赖全量预构建，二是由于依赖更新，页面需要进行 reload，加载最新的依赖代码。这样会导致 Dev Server 性能明显下降，尤其是在新增依赖较多的场景下，很容易出现浏览器",(0,r.jsx)(i.code,{children:"卡住"}),"的情况。因此二次预构建也是需要极力避免的。当时 ",(0,r.jsx)(i.a,{href:"https://github.com/antfu/vite-plugin-optimize-persist",target:"_blank",rel:"noopener noreferrer",children:"vite-plugin-optimize-persist"})," 就是为了解决二次预构建带来的问题，通过持久化的方式记录 Dev Server 运行时扫描到的依赖，从而让首次预构建便可以感知到，避免二次预构建的发生。"]}),"\n",(0,r.jsx)(i.p,{children:"到了 2.9 版本，Vite 将预构建的逻辑做了一次整体的重构，最后的效果是下面这样的:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Dev Server 启动后预构建(Optimize 阶段)在后台执行，也就是预构建不再阻塞 Dev Server 的启动，只需要等待 Scan 阶段完成，不过通常这个阶段的开销非常小。"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"如果某些依赖是 Dev Server 运行时才发现的，那么 Vite 会尽可能地复用已有预构建产物，尽量不进行 page reload。"}),"\n"]}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:["具体实现大家可以去查看这个 ",(0,r.jsx)(i.a,{href:"https://github.com/vitejs/vite/pull/6758",target:"_blank",rel:"noopener noreferrer",children:"PR"})]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"那问题就完全解决了吗？其实并不是，在某些场景下，Vite 仍然不可避免地需要二次预构建。如下面的这个例子:"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,r.jsx)(i.p,{children:"A 和 B 都是项目的第三方依赖，它们也同时依赖 C。那么当 Vite 预构建 A 的时候，将会 A 和 C 一起进行打包。但 Vite 在运行时发现了依赖 B，而 A 和 B 需要共享 C 的代码，这样 C 的代码可能就会被抽离成一个公共的 chunk，因此之前 A 的预构建产物可能就发生变化了，那么此时 Vite 必须要强制刷新页面，让浏览器使用最新的预构建产物。这仍然是一个二次预构建(所有依赖再次打包 + page reload)的过程。"}),"\n",(0,r.jsx)(i.p,{children:"总体而言，2.9 版本解决了预构建阻塞服务启动的问题，但并没有完全解决二次预构建的问题。"}),"\n",(0,r.jsx)(i.p,{children:"但在 Vite 3.0，二次预构建的问题也得到了根本的解决。那 Vite 3.0 是如何做到的呢？"}),"\n",(0,r.jsxs)(i.p,{children:["核心的解决思路在于",(0,r.jsx)(i.code,{children:"延迟处理"}),"，即把预构建的行为延迟到",(0,r.jsx)(i.strong,{children:"页面加载的最后阶段"}),"进行，此时 Vite 已经编译完了所有的源文件，可以准确地记录下所有需要预构建的依赖(包括 Vite 插件添加的一些依赖)，然后统一进行预构建，将预构建的产物响应给给浏览器即可。"]}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsx)(i.p,{children:"依赖预构建的代码在 Vite 中先后重构了多次，目前的版本实现比较复杂，后续会单独写一篇文章讨论实现细节。"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"因此，与 Vite 2.0 相比，Vite 3.0 在冷启动阶段所做的优化主要有两个方面:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"预构建不再阻塞 Dev Server 的启动，真正做到服务秒启动的效果；"}),"\n",(0,r.jsx)(i.li,{children:"从根本上防止二次预构建的发生。"}),"\n"]}),"\n",(0,r.jsxs)(i.h3,{id:"4-importmetaglob-语法更新",children:["4. import.meta.glob 语法更新",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#4-importmetaglob-语法更新",children:"#"})]}),"\n",(0,r.jsxs)(i.p,{children:["Vite 3.0 对 ",(0,r.jsx)(i.code,{children:"import.meta.glob"})," 的实现进行了重写，支持了更加灵活的 glob 语法，增加了如下的一些特性:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"多种模式匹配:"}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:'import.meta.glob(["./dir/*.js", "./another/*.js"]);\n'})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["否定模式(",(0,r.jsx)(i.code,{children:"!"}),"):"]}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:'import.meta.glob(["./dir/*.js", "!**/bar.js"]);\n'})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"命名导入，可以更好地做到 Tree Shaking:"}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:'import.meta.glob("./dir/*.js", { import: "setup" });\n'})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"自定义 query 参数:"}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:'import.meta.glob("./dir/*.js", { query: { custom: "data" } });\n'})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["指定 eager 模式，替换掉原来",(0,r.jsx)(i.code,{children:"import.meta.globEager"}),":"]}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:'import.meta.glob("./dir/*.js", { eager: true });\n'})}),"\n",(0,r.jsxs)(i.h2,{id:"三生产阶段的更新",children:["三、生产阶段的更新",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#三生产阶段的更新",children:"#"})]}),"\n",(0,r.jsxs)(i.h3,{id:"1-ssr-产物默认使用-esm-格式",children:["1. SSR 产物默认使用 ESM 格式",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#1-ssr-产物默认使用-esm-格式",children:"#"})]}),"\n",(0,r.jsx)(i.p,{children:"在当下的社区生态中，众多 SSR 框架已经在使用 ESM 格式作为默认的产物格式。Vite 3.0 也积极拥抱社区，支持 SSR 构建默认打包出 ESM 格式的产物。"}),"\n",(0,r.jsxs)(i.h3,{id:"2-relative-base-支持",children:["2. Relative Base 支持",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#2-relative-base-支持",children:"#"})]}),"\n",(0,r.jsxs)(i.p,{children:["Vite 3.0 正式支持 Relative Base(即配置",(0,r.jsx)(i.code,{children:"base: ''"}),")，主要用于构建时无法确定 base 地址的场景。"]}),"\n",(0,r.jsxs)(i.h2,{id:"四实验性功能",children:["四、实验性功能",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#四实验性功能",children:"#"})]}),"\n",(0,r.jsxs)(i.h3,{id:"1-更细粒度的-base-配置",children:["1. 更细粒度的 base 配置",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#1-更细粒度的-base-配置",children:"#"})]}),"\n",(0,r.jsxs)(i.p,{children:["在某些场景下，我们需要将不同的资源部署到不同的 CDN 上，比如将图片部署到单独的 CDN，和 JS/CSS 的部署服务区分开来。但 2.x 的版本仅支持统一的部署域名，即",(0,r.jsx)(i.code,{children:"base"})," 配置。在 3.0 中，你可以通过 ",(0,r.jsx)(i.code,{children:"renderBuiltUrl"})," 进行更细粒度的配置:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ts",children:"{\n  experimental: {\n    renderBuiltUrl: (filename: string, { hostType: 'js' | 'css' | 'html' }) => {\n      if (hostType === 'js') {\n        return { runtime: `window.__toCdnUrl(${JSON.stringify(filename)})` }\n      } else {\n        return 'https://cdn.domain.com/assets/' + filename\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:["目前该配置项还不稳定 ，可能会在之后的 minor 版本修改。具体文档见 ",(0,r.jsx)(i.a,{href:"https://vitejs.dev/guide/build.html#advanced-base-options",target:"_blank",rel:"noopener noreferrer",children:"https://vitejs.dev/guide/build.html#advanced-base-options"})]}),"\n"]}),"\n",(0,r.jsxs)(i.h3,{id:"2-esbuild-预构建用于生产环境",children:["2. Esbuild 预构建用于生产环境",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#2-esbuild-预构建用于生产环境",children:"#"})]}),"\n",(0,r.jsxs)(i.p,{children:["这应该是 Vite 架构上非常大的一个改动: 将原来仅仅用于开发阶段的依赖预构建功能应用在生产环境。在 Vite 2.x 中，开发阶段使用 Esbuild 来打包依赖，而在生产环境使用 Rollup 进行打包，用 ",(0,r.jsx)(i.code,{children:"@rollupjs/plugin-commonjs"})," 来处理 cjs 的依赖，这样做会导致依赖处理的不一致问题，造成一些生产构建中的 bug。"]}),"\n",(0,r.jsxs)(i.p,{children:["但 Vite 3.0 中支持通过配置将 Esbulid 预构建同时用于开发环境和生产环境，仅添加",(0,r.jsx)(i.code,{children:"optimizeDeps.disabled: false"})," 的配置即可。不过这个改动确实比较大，Vite 团队不打算将此作为 v3 的正式更新内容，而是一个实验性质的功能，不会默认开启。"]}),"\n",(0,r.jsx)(i.p,{children:"顺便提一句，Rollup 将在接下来的几个月发布 v3 的大版本，要知道，Rollup 2.0 发布至今已经过去 2 年多的时间了，无论是 Rollup 还是 Vite 来讲，这都是一次非常重大的变更。由于 Vite 的架构非常依赖 Rollup，在 Rollup 发布 v3 之后，Vite 也将跟随着发布 Vite 的第 4 个 major 版本。所以，Vite 4.0 的到来也不远啦：）"}),"\n",(0,r.jsxs)(i.h2,{id:"五仓库内部的变化",children:["五、仓库内部的变化",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#五仓库内部的变化",children:"#"})]}),"\n",(0,r.jsx)(i.p,{children:"除了本身功能上的演进，Vite 的仓库本身也产生了不少的变化，从中我们也能了解到社区的一些动向:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"不再支持 Nodejs 12，需要 Node.js 14.18+ 的版本。"}),"\n",(0,r.jsx)(i.li,{children:"单元测试和 E2E 测试从 Jest 完全迁移到 Vitest，一方面 Vitest 更快、体验更好，另一方面也能在 Vite 这样大型的仓库完善 Vitest 的生态，进一步提升 Vitest 稳定性。"}),"\n",(0,r.jsx)(i.li,{children:"VitePress 文档部分也参与 CI 流程。"}),"\n",(0,r.jsx)(i.li,{children:"包管理器 pnpm 迁移至 v7。"}),"\n",(0,r.jsxs)(i.li,{children:["不管是 ",(0,r.jsx)(i.code,{children:"Vite"})," 本身的包还是 E2E 中测试的项目，都在 package.json 中声明 ",(0,r.jsx)(i.code,{children:'type: "module"'}),"，即 Pure ESM 包，对外提供 ESM 格式的产物，将社区 Pure ESM 的趋势又推动了一步。"]}),"\n",(0,r.jsxs)(i.li,{children:["官方所有的 Vite 插件都采用 ",(0,r.jsx)(i.code,{children:"unbuild"}),"(新一代库构建工具) 进行构建，",(0,r.jsx)(i.code,{children:"pluin-vue-jsx"})," 和 ",(0,r.jsx)(i.code,{children:"plugin-legacy"})," 均迁移到了 TS 上。"]}),"\n",(0,r.jsxs)(i.li,{children:["包体积优化。3.0 进一步优化 Vite 本身的产物和 node_modules 体积，将 ",(0,r.jsx)(i.code,{children:"terser"})," 和 ",(0,r.jsx)(i.code,{children:"node-forge"})," 的依赖移除，让用户进行按需安装(",(0,r.jsx)(i.code,{children:"node-forge"})," 的功能是实现 https 证书生成，可用 ",(0,r.jsx)(i.code,{children:"@vitejs/plugin-basic-ssl"})," 插件替代)，效果如下:"]}),"\n"]}),"\n",(0,r.jsxs)(i.table,{children:["\n",(0,r.jsxs)(i.thead,{children:["\n",(0,r.jsxs)(i.tr,{children:["\n",(0,r.jsx)(i.th,{}),"\n",(0,r.jsx)(i.th,{align:"center",children:"Publish Size"}),"\n",(0,r.jsx)(i.th,{align:"center",children:"Install Size"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.tbody,{children:["\n",(0,r.jsxs)(i.tr,{children:["\n",(0,r.jsx)(i.td,{children:"Vite 2.9.14"}),"\n",(0,r.jsx)(i.td,{align:"center",children:"4.38MB"}),"\n",(0,r.jsx)(i.td,{align:"center",children:"19.1MB"}),"\n"]}),"\n",(0,r.jsxs)(i.tr,{children:["\n",(0,r.jsx)(i.td,{children:"Vite 3.0.0"}),"\n",(0,r.jsx)(i.td,{align:"center",children:"3.05MB"}),"\n",(0,r.jsx)(i.td,{align:"center",children:"17.8MB"}),"\n"]}),"\n",(0,r.jsxs)(i.tr,{children:["\n",(0,r.jsx)(i.td,{children:"Reduction"}),"\n",(0,r.jsx)(i.td,{align:"center",children:"-30%"}),"\n",(0,r.jsx)(i.td,{align:"center",children:"-7%"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"不得不说在自身包体积的优化方面， Vite 还是做的很细致的，这也是很多库开发者忽视的一点，有时候加个插件就得安装动辄上百 MB 的依赖，导致项目的 node_modules 最后变得非常臃肿，此时不妨学习一下 Vite 是怎么优化自身体积的。"}),"\n",(0,r.jsxs)(i.h2,{id:"六未来规划",children:["六、未来规划",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#六未来规划",children:"#"})]}),"\n",(0,r.jsx)(i.p,{children:"首先在 Vite 3.0 发布之后会重点保证 3.0 的稳定性，解决目前的一系列 issue。"}),"\n",(0,r.jsx)(i.p,{children:"其次，Rollup 团队将在接下来的几个月发布新的 major 版本，Vite 将持续跟进，紧接着发布 v4 版本，并在 v4 版本中将目前的一些实践性功能稳定下来。"}),"\n",(0,r.jsxs)(i.h2,{id:"小结",children:["小结",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(i.p,{children:"Vite 3.0 带来了一些比较大的架构变动，比如依赖预构建的重构、支持生产环境 Esbuild 预打包依赖以及全面支持 Pure ESM，当然也有一些比较小的 break change 在这个版本集中发布，比如 import.meta.glob 语法的变更。"}),"\n",(0,r.jsxs)(i.p,{children:["总之，在这一年多的时间里，Vite 团队做了非常多的功能改进和架构升级，目前的 Github Star 已经达到了 44 k+，并且还在持续维护。与此同时，Vite 的社区生态也逐步完善，比如 Vitest、VitePress、丰富的",(0,r.jsx)(i.a,{href:"https://github.com/vitejs/awesome-vite",target:"_blank",rel:"noopener noreferrer",children:"社区插件"}),"以及众多内置 Vite 的社区框架等等，可以预见的是，Vite 将在未来的很长一段时间内继续发展，持续迭代，提供更好的用户体验，成为下一代前端工具链。"]})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:i}=Object.assign({},(0,s.ah)(),e.components);return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}let o=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20Vite%2F28.%E5%8A%A0%E9%A4%90_%20Vite%203.0%20%E6%A0%B8%E5%BF%83%E6%9B%B4%E6%96%B0%E7%9B%98%E7%82%B9%E4%B8%8E%E5%88%86%E6%9E%90.md"]={toc:[{text:"一、全新的 VitePress 文档",id:"一全新的-vitepress-文档",depth:2},{text:"二、开发阶段的更新",id:"二开发阶段的更新",depth:2},{text:"1. CLI 的更新",id:"1-cli-的更新",depth:3},{text:"2. 开箱即用的 WebSocket 连接策略",id:"2-开箱即用的-websocket-连接策略",depth:3},{text:"3. 服务冷启动性能提升",id:"3-服务冷启动性能提升",depth:3},{text:"4. import.meta.glob 语法更新",id:"4-importmetaglob-语法更新",depth:3},{text:"三、生产阶段的更新",id:"三生产阶段的更新",depth:2},{text:"1. SSR 产物默认使用 ESM 格式",id:"1-ssr-产物默认使用-esm-格式",depth:3},{text:"2. Relative Base 支持",id:"2-relative-base-支持",depth:3},{text:"四、实验性功能",id:"四实验性功能",depth:2},{text:"1. 更细粒度的 base 配置",id:"1-更细粒度的-base-配置",depth:3},{text:"2. Esbuild 预构建用于生产环境",id:"2-esbuild-预构建用于生产环境",depth:3},{text:"五、仓库内部的变化",id:"五仓库内部的变化",depth:2},{text:"六、未来规划",id:"六未来规划",depth:2},{text:"小结",id:"小结",depth:2}],title:"28.加餐_ Vite 3.0 核心更新盘点与分析",headingTitle:"28.加餐_ Vite 3.0 核心更新盘点与分析",frontmatter:{}}}}]);