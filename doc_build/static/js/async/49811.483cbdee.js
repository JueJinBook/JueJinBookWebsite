"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["49811"],{461138:function(n,e,s){s.r(e),s.d(e,{default:()=>o});var r=s(552676),c=s(740453);let d=s.p+"static/image/6936ce9b690aa90e0f90d1a96bd9ba9e.637079c7.png",l=s.p+"static/image/a6a418e169bc36512ca55bf574e591a7.00951bce.png";function i(n){let e=Object.assign({p:"p",h2:"h2",a:"a",ul:"ul",li:"li",blockquote:"blockquote",code:"code",img:"img",pre:"pre",h3:"h3"},(0,c.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"框架（通用）库的设计是为了在不同的应用中进行逻辑复用，从而提升开发效率。在前端开发中，应用主要分为 Web 应用和 Node 应用，因此框架库主要在这两种应用环境中使用。需要注意，有些库只能在 Node 环境中使用，有些库只能在 Web 环境中使用，而有些库考虑了兼容性设计，在两者中都可以使用。本小节课程会重点讲解 Web 应用和框架库的构建差异，并且会以 Webpack 和 Gulp 构建工具为例进行讲解。"}),"\n",(0,r.jsxs)(e.h2,{id:"应用构建",children:["应用构建",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#应用构建",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"在 Web 应用的打包构建中，一般需要考虑以下构建处理，从而生成前端可以部署的静态资源："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"构建生成 HTML 文件并关联相应的 JS 和 CSS；"}),"\n",(0,r.jsx)(e.li,{children:"对 CSS、JS 、图片、SVG 等进行打包处理，从而减少浏览器的请求数量；"}),"\n",(0,r.jsx)(e.li,{children:"构建的 JS 和 CSS 能够兼容大多数浏览器；"}),"\n",(0,r.jsx)(e.li,{children:"打包的 JS 脚本数量少，减少 HTTP 请求的个数；"}),"\n",(0,r.jsx)(e.li,{children:"打包的 JS 脚本体积小（抽离公共的 JS 脚本、压缩处理），减少 HTTP 请求的时间；"}),"\n",(0,r.jsx)(e.li,{children:"如果是 React 或者 Vue 框架开发，还需要考虑 JSX、Vue Template 等支持；"}),"\n",(0,r.jsx)(e.li,{children:"如果是 TypeScript 开发，还需要考虑支持 TypeScript 转译。"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"温馨提示：使用 React 或者 Vue 框架开发 Web 应用时都会配套相应的开发套件，例如 Create React App 以及 Vue CLI。本课程只是简单讲解和通用库构建息息相关的简单 JS 构建配置，帮助没有构建经验的同学可以简单了解应用的构建过程。如果想了解 TypeScript、CSS 预编译 & 抽离、图片内联 & 抽离、JSX 支持、SVG 支持、ESLint 支持、模块热替换等配置，可以额外深入了解上述列举的框架开发套件。"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["接下来重点讲一下 JS 的打包处理，目前主流框架的 Web 应用都采用模块化的方式进行开发，为了生成浏览器兼容的 ES5 脚本，可以配合打包工具将开发态 ES6+ 语法的脚本打包成带公共 ",(0,r.jsx)(e.code,{children:"chunks"})," 的兼容性 ES5 脚本，如下所示："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"以 Webpack 为例，来看一个简单的模块化打包示例："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"├── src                # 源文件夹\n│   ├── subtract.js    # ES Modules                \n│   ├── add.js         # ES Modules                                \n│   └── index.js       # 入口文件\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：示例源码可以从 ",(0,r.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/webpack-web-demo",target:"_blank",rel:"noopener noreferrer",children:"demo/webpack-web-demo"})," 分支获取。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["在 ",(0,r.jsx)(e.code,{children:"index.js"})," 中通过 ",(0,r.jsx)(e.code,{children:"import"})," 来引入 ",(0,r.jsx)(e.code,{children:"add.js"}),"和 ",(0,r.jsx)(e.code,{children:"subtract.js"})," 模块："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// src/add.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// src/subtract.js\nexport function subtract(a, b) {\n  return a - b;\n}\n\n// src/index.js\nimport { add } from "./add";\nimport { subtract } from "./subtract";\n\nlet c = add(1, 2);\nconsole.log(c);\nlet d = add(3, 4);\nconsole.log(d);\n\nlet e = subtract(d, 4);\nconsole.log(e);\nlet f = subtract(c, 2);\nconsole.log(f);\n'})}),"\n",(0,r.jsxs)(e.p,{children:["在 ",(0,r.jsx)(e.code,{children:"package.json"})," 中添加构建命令（在项目中需要安装 webpack 和 webpack-cli）："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'// package.json\n"scripts": {\n  "build": "webpack"\n},\n'})}),"\n",(0,r.jsxs)(e.p,{children:["执行 ",(0,r.jsx)(e.code,{children:"npm run build"})," 之后默认会在 ",(0,r.jsx)(e.code,{children:"dist"})," 目录下生成 ",(0,r.jsx)(e.code,{children:"main.bundle.js"}),"，如下所示："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// dist/main.bundle.js\n(()=>{"use strict";function o(o,l){return o+l}function l(o,l){return o-l}let e=o(1,2);console.log(e);let n=o(3,4);console.log(n);let t=l(n,4);console.log(t);let c=l(e,2);console.log(c)})();\n'})}),"\n",(0,r.jsxs)(e.p,{children:["可以发现 Webpack 将所有的 ES Modules 打包成了一个文件并做了压缩处理，但没有将 ES6+ 语法转换成 ES5 语法，例如构建代码中的 ",(0,r.jsx)(e.code,{children:"let"})," 和箭头函数。如果想要将源代码转换成 ES5 语法，需要借助 ",(0,r.jsx)(e.a,{href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer",children:"Babel"}),"（转译工具，语法转换和 Polyfill 处理），在项目中新增 ",(0,r.jsx)(e.code,{children:"webpack.config.js"})," 配置文件并添加 ",(0,r.jsx)(e.code,{children:"babel-loader"}),"："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// webpack.config.js\nconst HtmlWebpackPlugin = require("html-webpack-plugin");\n\nmodule.exports = {\n  mode: "production",\n  entry: "./src/index.js",\n  output: {\n    path: __dirname + "/dist",\n    filename: "[name].bundle.js",\n    environment: {\n      // 将最外层立即执行的箭头函数改为 ES5 语法\n      arrowFunction: false,\n    },\n  },\n  module: {\n    rules: [\n      {\n        test: /.m?js$/,\n        // Babel 推荐屏蔽 node_modules 目录，这也是为什么大部分通用库需要构建的主要原因\n        // 如果引入的 NPM 库包是 ES6 语法，那么最终的构建产物将包含 ES6 代码\n        exclude: /(node_modules)/,\n        use: {\n          // 将 ES6+ 语法转换成 ES5\n          loader: "babel-loader",\n          options: {\n            presets: ["@babel/preset-env"],\n          },\n        },\n      },\n    ],\n  },\n  // 构建生成 HTML 文件，并将构建后的 JS 文件添加的 HTML 中\n  plugins: [new HtmlWebpackPlugin()],\n};\n'})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"温馨提示：插件是 Webpack 可以额外处理 JS 的一个重要功能，举个例子，可以通过正则表达式来匹配 JS 和 CSS 中的公网地址，并进行下载打包处理，从而解决私有化网络的问题。"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["执行 ",(0,r.jsx)(e.code,{children:"npm run build"})," 之后会生成可以兼容大部分浏览器的 ES5 代码："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'!function(){"use strict";function o(o,n){return o+n}function n(o,n){return o-n}var r=o(1,2);console.log(r);var c=o(3,4);console.log(c);var l=n(c,4);console.log(l);var e=n(r,2);console.log(e)}();\n'})}),"\n",(0,r.jsx)(e.p,{children:"如果在代码中使用了相对通用的三方库，则可以将三方库通过 Webpack 自带的功能进行代码分离，例如这里更改源代码，引入 Lodash 处理："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// src/add.js\nimport _ from "lodash";\n\nexport function add(a, b) {\n  return _.add(a, b);\n}\n\n// src/subtract.js\nimport _ from "lodash";\n\nexport function subtract(a, b) {\n  return a - b;\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["更改 ",(0,r.jsx)(e.code,{children:"webpack.config.js"})," 的配置："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'const HtmlWebpackPlugin = require("html-webpack-plugin");\n\nmodule.exports = {\n  mode: "production",\n  entry: "./src/index.js",\n  output: {\n    path: __dirname + "/dist",\n    filename: "[name].bundle.js",\n    environment: {\n      arrowFunction: false,\n    },\n  },\n  // 提取公共的依赖模块并生成新的 chunk 文件\n  optimization: {\n    splitChunks: {\n      chunks: "all",\n    },\n  },\n  module: {\n    rules: [\n      {\n        test: /.m?js$/,\n        exclude: /(node_modules)/,\n        use: {\n          loader: "babel-loader",\n          options: {\n            presets: ["@babel/preset-env"],\n          },\n        },\n      },\n    ],\n  },\n  plugins: [new HtmlWebpackPlugin()],\n};\n'})}),"\n",(0,r.jsxs)(e.p,{children:["执行 ",(0,r.jsx)(e.code,{children:"npm run build"})," 之后会将 Lodash 库的代码进行分离："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# 28.工程设计：构建工具\nasset 486.bundle.js 69 KiB [emitted] [minimized] (id hint: vendors) 1 related asset\nasset main.bundle.js 1.74 KiB [emitted] [minimized] (name: main)\nasset index.html 272 bytes [emitted]\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"温馨提示：多入口的情况下分离代码，可以防止各自引入重复的代码从而增加构建体积。除此之外，分离代码还可以防止单个 JS 脚本过大从而增加 HTTP 的请求时间。"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"库构建",children:["库构建",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#库构建",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["框架（通用）库的构建并不直接面向浏览器，而是面向 Web 应用（或者 Node 应用），Web 应用会通过模块化的方式加载通用库并进行最终的应用打包。在 Web 应用中，框架库是通过 NPM 包的方式引入，而 babel-loader 转译时通常会配置忽略 ",(0,r.jsx)(e.code,{children:"node_modules"})," 目录下的库包，因此需要先将库包转译成浏览器能够兼容的 ES5 语法进行发布，因为 Web 应用在打包时不会对三方 NPM 包进行转译处理。除此之外，为了配合 Web 应用的打包处理，还需要将库包发布成能够被打包工具识别的模块化标准："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"库构建面向应用开发，一般需要考虑如下构建处理，从而生成可以被应用安装的 NPM 包："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"目标代码能够兼容浏览器或者 Node.js 环境（ES5 标准）；"}),"\n",(0,r.jsx)(e.li,{children:"输出模块规范，例如 CommonJS、UMD 或者 ES Module（支持 Tree Shaking）；"}),"\n",(0,r.jsx)(e.li,{children:"输出 TypeScript 声明文件，可以在应用开发中得到库 API 的智能提示；"}),"\n",(0,r.jsx)(e.li,{children:"不进行三方库的打包处理，防止应用使用同样的三方库时打包两份代码；"}),"\n",(0,r.jsx)(e.li,{children:"能够使应用按需引入库代码。"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"按需引入",children:["按需引入",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#按需引入",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"接下来重点讲解一下库的按需引入功能，从而帮助大家更好了解接下来的构建工具选型。在之前的 Web 应用构建中，可以重新修改 Lodash 库的引入方式，从而实现按需引入："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// src/add.js\n// Lodash 库按需引入的方式非常简单，例如 import funName from `lodash/${funName}`\nimport _add from "lodash/add";\n\nexport function add(a, b) {\n  return _add(a, b);\n}\n\n// src/subtract.js\nimport _subtract from "lodash/subtract";\n\nexport function subtract(a, b) {\n  return _subtract(a, b);\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["执行 ",(0,r.jsx)(e.code,{children:"npm run build"})," 之后："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# 按需引入的体积 2.74 KiB，按需引入后体积大大减小\nasset main.bundle.js 2.74 KiB [emitted] [minimized] (name: main)\n\n# 不按需引入（不对代码进行分离）的体积 69.8 KiB\nasset main.bundle.js 69.8 KiB [emitted] [minimized] (name: main) 1 related asset\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：如果不想改变 ",(0,r.jsx)(e.code,{children:'import _ from "lodash"'})," 的引入方式，也可以将按需引入的解析工作交给 Webpack 的插件 ",(0,r.jsx)(e.code,{children:"lodash-webpack-plugin"})," 和 Babel 的插件 ",(0,r.jsx)(e.code,{children:"babel-plugin-lodash"})," 来处理，当然最终还是转变成 ",(0,r.jsx)(e.code,{children:'import funName from "lodash/${funName}"'})," 的方式。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"如果构建工具本身支持 Tree Shaking，那么也可以使用 Lodash 的 ES Module 标准库（默认安装的 Lodash 库输出的是 CommonJS 规范），例如："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import { add } from "lodash-es";\n\nexport function _add(a, b) {\n  return add(a, b);\n}\n\n// src/subtract.js\nimport { subtract } from "lodash-es";\n\nexport function subtract(a, b) {\n  return subtract(a, b);\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["此时 Webpack 在构建时可以利用 Tree Shaking 的特性自动去除未使用的代码，执行 ",(0,r.jsx)(e.code,{children:"npm run build"})," 之后："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Tree Shaking 后代码的体积大大减少\nasset main.bundle.js 1.54 KiB [emitted] [minimized] (name: main)\n"})}),"\n",(0,r.jsx)(e.p,{children:"总结来说，如果要设计一个 Lodash 库并支持按需引入，那么可以对库的开发做如下构建处理："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"生成 CommonJS 规范，构建总入口文件，并为每一个函数构建独立文件；"}),"\n",(0,r.jsx)(e.li,{children:"生成 ES Module 规范，构建总入口文件，并为每一个函数构建独立文件；"}),"\n",(0,r.jsx)(e.li,{children:"为每一个设计的函数进行单独构建和单独发布 NPM 包。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"有了上述构建库的设计后，按需引入的方式可以包含如下几种："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// 按函数文件名引入\n// 此时构建的 NPM 包中需要有一个 add.js 文件，并且该文件在一级目录下\nimport _add from "lodash/add";\n\n// CommonJS 总引入，需要配合 lodash-webpack-plugin 和 babel-plugin-lodash 一起使用\n// 此种方式可以简单理解为通过插件间接将代码转换成 import _add from "lodash/add" 的方式\nimport _ from "lodash";\n_.add(1,2);\n\n// ES Modules 总引入，利用构建工具的 Tree Shaking 能力实现按需构建\n// 此时构建的 NPM 包中需要一个总的 lodash.js 文件，该文件导出了所有的工具方法\nimport _ from "lodash-es";\n_.add(1,2);\n\n// 单独的 NPM 按需引入，lodash.add 是一个独立的 NPM 包\nimport add from "lodash.add"\nadd(1,2);\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"构建工具选型",children:["构建工具选型",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#构建工具选型",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"在了解了 Lodash 的按需引入功能之后，以微前端框架库的设计为例，假设需要设计一个以下目录结构的库包："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"├── src                          # 源文件     \n│   ├── index.js                 # 总入口文件\n│   ├── core                     # 应用管理\n│   │   └── core.js              # 应用管理\n│   ├── sandbox                  # 隔离方案\n│   │   ├── sandbox1.js          # 隔离功能一\n│   │   ├── sandbox2.js          # 隔离功能二\n│   │   └── sandbox3.js          # 隔离功能三\n│   ├── opt                      # 性能优化\n│   │   ├── opt1.js              # 优化功能一\n│   │   └── opt2.js              # 优化功能二\n│   └── comm                     # 通信\n│       ├── comm1.js             # 通信功能一\n│       └── comm2.js             # 通信功能二\n├── lib                          # 目标文件\n│   ├── commonjs                 # CommonJS 标准输出（可以单独发布成库包 micro-framework）\n│   │   ├── index.js             # 总入口\n│   │   ├── core.js              # 应用管理\n│   │   ├── sanbox1.js           # 隔离功能一\n│   │   ├── sanbox2.js           # 隔离功能二\n│   │   ├── sanbox3.js           # 隔离功能三\n│   │   ├── opt1.js              # 优化功能一\n│   │   ├── opt2.js              # 优化功能二\n│   │   ├── comm1.js             # 通信功能一\n│   │   └── comm2.js             # 通信功能二\n│   ├── es                       # ES Modules 标准（可以单独发布成库包 micro-framework-es）\n│   │   ├── index.js             # 总入口\n│   │   ├── core.js              # 应用管理\n│   │   ├── sandbox1.js          # 隔离功能一 \n│   │   ├── sandbox2.js          # 隔离功能二\n│   │   ├── sandbox3.js          # 隔离功能二\n│   │   ├── opt1.js              # 优化功能一\n│   │   ├── opt2.js              # 优化功能二\n│   │   ├── comm1.js             # 通信功能一\n│   │   └── comm2.js             # 通信功能二\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：可以视情况将构建后的文件目录进行平铺，使应用的开发者不需要感知 ",(0,r.jsx)(e.code,{children:"sandbox"}),"、",(0,r.jsx)(e.code,{children:"opt"})," 和",(0,r.jsx)(e.code,{children:"comm"})," 等源文件目录路径，提升开发者体验。构建完成后，将上述构建目录的 ",(0,r.jsx)(e.code,{children:"lib/commonjs"})," 发布成独立的 NPM 包，包名为 micro-framework。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"构建并发布后，框架库可以按目标文件进行引入，使用方式如下所示："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// 支持按需引入\nimport micro from 'micro-framework/core';\nimport nav from 'micro-framework/nav';\nimport sandbox1 from 'micro-framework/sandbox1';\nimport opt1 from 'micro-framework/opt1';\nimport comm1 from 'micro-framework/comm1';\n\nmicro.start({\n   // 需要注册的微应用\n   apps: [],\n   // 启用导航、隔离、性能优化和通信\n   plugins: [nav, sandbox1, opt1, comm1],\n});\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在应用中通过 ",(0,r.jsx)(e.code,{children:"import sandbox1 from 'micro-framework/sandbox1'"})," 的方式可以做到按需引入 ",(0,r.jsx)(e.code,{children:"commonjs/sandbox1.js"})," 文件，未被引入的文件不会被打包到应用中。"]}),"\n",(0,r.jsxs)(e.p,{children:["除此之外，不要将三方库打包到框架库的目标文件中，例如 Web 应用和框架库的设计都依赖了 Lodash 三方库，如果在框架库的 ",(0,r.jsx)(e.code,{children:"index.js"})," 中打包了 Lodash，Web 应用也打包了 Lodash，应用引入框架库后进行打包会导致目标文件中存在两份 Lodash 代码。"]}),"\n",(0,r.jsx)(e.p,{children:"为了实现上述框架库的构建处理，需要考虑选型合适的构建工具。构建工具的类型有很多，其中转译和打包是两种常用的类型。babel、tsc 和 swc 是常用的转译工具，只负责源文件到目标文件的转译工作，而 Webpack、Rollup、Vite、Swcpack、Turbopack 等属于打包工具，打包工具可以将多个模块化的文件组合压缩成单个 JS 文件，从而可以减少浏览器的请求数量和体积。当然打包工具的作用还包括代码切割、TreeShaking、CSS 预编译处理等。如果使用打包工具进行库构建处理，一般需要考虑以下处理："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"屏蔽 TreeShaking 处理；"}),"\n",(0,r.jsx)(e.li,{children:"排除三方库的打包处理；"}),"\n",(0,r.jsx)(e.li,{children:"多入口处理（生成按需加载的文件）；"}),"\n",(0,r.jsx)(e.li,{children:"生成 TypeScript 声明文件。"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["温馨提示：打包工具也会具备库的构建能力，例如 Webpack 的",(0,r.jsx)(e.a,{href:"https://webpack.docschina.org/guides/author-libraries/",target:"_blank",rel:"noopener noreferrer",children:"创建 library"}),"，但是不推荐使用多入口的处理方式，并且需要额外排除三方库，当然也可以查看社区是否有排除三方库的工具，例如 Element 的 ",(0,r.jsx)(e.a,{href:"https://github.com/ElemeFE/element/blob/dev/build/config.js",target:"_blank",rel:"noopener noreferrer",children:"config.js"})," 中使用的 webpack-node-externals。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"如果是组件库的构建，则考虑的情况会相对复杂，例如包含 CSS、图片以及 SVG 的处理，此时使用打包工具可能是个不错的选择，例如 Element 的构建就是使用了 Webpack 进行库构建，但是它为了生成按需加载的文件以及排除三方库处理，做了很多复杂的 Webpack 配置。"}),"\n",(0,r.jsx)(e.p,{children:"如果只是简单做一个类似于 Lodash 的工具库，那么可以考虑使用转译工具处理，此时在开发态希望使用最新的 ES6+ 语法，而生产态只需要转译处理即可，使用转译工具的优势在于："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"天然不会处理 TreeShaking；"}),"\n",(0,r.jsx)(e.li,{children:"天然不打包三方库，不需要做额外的排除处理；"}),"\n",(0,r.jsx)(e.li,{children:"天然做到多入多出，因为只是做转译处理，不做打包处理；"}),"\n",(0,r.jsx)(e.li,{children:"类似于 tsc 天然可以生成 TypeScript 声明文件。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"除此之外，如果在开发态可以平铺目录，那么最好是在开发态进行目录的平铺处理，只采用一级目录的设计方式，从而在按需加载时不需要考虑多级目录的引入情况。如果在库设计的开发态希望可以按功能进行多级目录的区分，那么也可以简单通过 Node 的方式在构建时将目录进行平铺处理，从而确保按需引入的体验。因此，工具库或者框架库的构建可以选择转译工具进行构建处理，在选型时可以考虑以下转译工具："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"babel：功能丰富生态强大，但是对 TypeScript 支持偏弱，例如类型检查和声明文件生成；"}),"\n",(0,r.jsx)(e.li,{children:"tsc：TypeScript 原生构建工具，类型检查速度慢并且对新语法的支持不如 Babel 多；"}),"\n",(0,r.jsx)(e.li,{children:"swc：构建速度快，目前正在设计 TypeScript 类型检查，预计速度会比 tsc 快。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"如果熟悉 babel 和 swc，可以使用 babel 和 swc 进行代码的转译处理，配合 tsc 进行声明文件的生成和类型检查处理，如果只是设计简单的功能库，并且不需要大量的 polyfill 支持，那么可以直接选择 tsc 进行转译处理。"}),"\n",(0,r.jsx)(e.p,{children:"当然 tsc 的功能和生态过于简单，本课程接下来会使用 gulp-typescript （利用 TypeScript 的 API 进行编译，具备类型检查和声明的生成能力）进行流式构建处理，从而方便后续可以借助 Gulp 的生态额外定制构建需求，例如文件压缩、合并、添加日志等。"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"温馨提示：感兴趣的同学可以了解一下 tsc 和 gulp-typescript 的差异。"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"小结",children:["小结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"本节课主要讲解了 Web 应用构建和库构建的差异，在 Web 应用的构建中我们简单使用 Webpack 讲解了 JS 的打包过程，在库构建中重点讲解了构建通用库要具备的特性，并以 Lodash 库为例重点讲解了按需加载的构建概念说明。我们还简单讲解了基于按需的构建工具选型，在这里需要重点了解转译和打包的差异。在下一节课中，我们会讲解实现按需加载的库构建实现。"})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(i,{...n})}):i(n)}let o=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F28.%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7.md"]={toc:[{text:"应用构建",id:"应用构建",depth:2},{text:"库构建",id:"库构建",depth:2},{text:"按需引入",id:"按需引入",depth:3},{text:"构建工具选型",id:"构建工具选型",depth:3},{text:"小结",id:"小结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);