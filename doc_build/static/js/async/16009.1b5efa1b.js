"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["16009"],{27056:function(n,e,i){i.r(e),i.d(e,{default:()=>o});var r=i(552676),s=i(740453);let t=i.p+"static/image/f16838d38f6dcf2f311b3c2adbfe6820.f02b483c.webp",c=i.p+"static/image/aa3fe46ab33b7858e680e3c052065fec.af834315.webp",d=i.p+"static/image/9690f2d544b38fb3ee6c389253dc3319.e4a081bb.webp";function l(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",ol:"ol",li:"li",h2:"h2",pre:"pre",code:"code",ul:"ul",strong:"strong"},(0,s.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"20-实战10登录页开发",children:["20 实战10：登录页开发",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#20-实战10登录页开发",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这个章节主要实现以下功能："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"页面开发"}),"\n",(0,r.jsx)(e.li,{children:"账号登录"}),"\n",(0,r.jsx)(e.li,{children:"授权登录"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"页面开发",children:["页面开发",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#页面开发",children:"#"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<template>\n    <view>\n        <view class="login-form">\n            <input class="input-row js-input-numer" v-model="account" type="number" maxlength="11" placeholder="输入手机号"/>\n            <input class="input-row" v-model="password" @confirm="bindLogin" type="password" maxlength="20" placeholder="输入密码" confirm-type="登录"/>\n            <button type="button" class="btn login-btn" @click="bindLogin">登录</button>\n            <view class="bot flex-box">\n                <navigator class="sign" hover-class="none">立即注册</navigator>\n                <navigator class="forget" hover-class="none">忘记密码?</navigator>\n            </view>\n        </view>\n        <view class="auth-row" v-if="hasProvider">\n            <view class="auth-image" v-for="provider in providerList" :key="provider.value">\n                \x3c!-- #ifdef APP-PLUS --\x3e\n                <image class="img" :src="provider.image" @click="authLogin(provider.value)"></image>\n                \x3c!-- #endif --\x3e\n                \x3c!-- 小程序处理 --\x3e\n                \x3c!-- #ifdef MP-WEIXIN --\x3e\n                <button v-if="provider.value == \'weixin\'" class="log-btn" open-type="getUserInfo" @getuserinfo="getUserInfo">\n                    <image class="img" :src="provider.image"></image>\n                </button>\n                \x3c!-- #endif --\x3e\n            </view>\n        </view>\n    </view>\n</template>\n<script>\n\nexport default {\n    data() {\n        return {\n            hasProvider: false, // 是否有服务商平台可登录\n            providerList: [],\n            account: \'\',\n            password: \'\'\n        };\n    },\n    onReady() {\n        this.getProvider();\n        // #ifdef H5\n        this.$nextTick(() => {\n            document.querySelector(\'.js-input-numer input\').setAttribute("pattern", "[0-9]*")\n        })\n        // #endif\n    },\n    methods: {\n        // 获取服务供应商\n        getProvider() {\n            const  providerList = [\'weixin\', \'qq\', \'sinaweibo\'];\n            // 判断是否用某种登录工具登录\n            uni.getProvider({\n                service: \'oauth\',\n                success: res => {\n                    if (res.provider && res.provider.length) {\n                        for (let i = 0; i < res.provider.length; i++) {\n                            var tempProvider = res.provider[i];\n                            if (~providerList.indexOf(tempProvider)) {\n                                this.providerList.push({\n                                    value: tempProvider,\n                                    image: \'../../static/image/login/\' + tempProvider + \'.png\'\n                                });\n                            }\n                        }\n                        this.hasProvider = true;\n                    }\n                },\n                fail: err => {\n                    console.error(\'获取服务供应商失败：\' + JSON.stringify(err));\n                }\n            });\n        },\n        // 账号登录\n        bindLogin() {\n            /**\n             * 客户端对账号信息进行一些必要的校验。\n             * 实际开发中，根据业务需要进行处理，这里仅做示例。\n             */\n            const account = this.account.trim()\n            const password = this.password.trim()\n            if (account == \'\') {\n                this.alert(\'请输入手机号\')\n                return;\n            }\n            if(!(/^1[3456789]\\d{9}$/.test(account))){ \n                this.alert("手机号码有误，请重填");  \n                return false; \n            } \n            if (password.length < 6) {\n                uni.showToast({\n                    icon: \'none\',\n                    title: \'密码最短为 6 个字符\'\n                });\n                return;\n            }\n            \n            uni.showLoading({\n                title: \'登录中\'\n            });\n            \n            const params = {\n                phone: this.account,\n                password: this.password\n            };\n            // 登录请求业务\n            // \n            // ...\n        },\n        // 授权登录\n        authLogin(value) {\n            uni.login({\n                provider: value,\n                success: res => {\n                    uni.getUserInfo({\n                        provider: value,\n                        success: infoRes => {\n                            console.log(infoRes)\n                            // 存储个人信息\n                            // 在store存储token, 用户信息\n                            // ...\n\n                            // 登录完之后到首页\n                            uni.switchTab({\n                                url: \'/pages/index/index\'\n                            });\n                        }\n                    });\n                },\n                fail: err => {\n                    console.error(\'授权失败：\' + JSON.stringify(err));\n                }\n            });\n        },\n        // 验证报错\n        alert (msg) {\n            uni.showToast({\n                icon: \'none\',\n                title: msg\n            });\n        }\n    }\n};\n<\/script>\n<style lang="scss"></style>\n'})}),"\n",(0,r.jsx)(e.p,{children:"在 H5，还要区分是安卓用户，还是 ios 用户，所以这样写：在安卓端设置 input 类型为 number，可限制键盘只输入数字，在 ios 端，要加入 pattern 验证输入字段的模式，才能限制数字输入。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:"<input type='number' pattern=\"[0-9]*\"/>\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"pattern"})," 属性规定用于验证输入字段的模式。模式指的是正则表达式，只出现数字键盘。由于 Uniapp 的 input 组件并没有 pattern 属性传递，编译成 H5 不会在 input 控件中查看到 pattern，需要条件编译一下，插入 pattern："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'onReady() {\n    // #ifdef H5\n    this.$nextTick(() => {\n        document.querySelector(\'.js-input-numer input\').setAttribute("pattern", "[0-9]*")\n    })\n    // #endif\n},\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["在 input 控件中，使用 ",(0,r.jsx)(e.code,{children:"v-model"})," 指令双向绑定使用，直接对应修改 data 中的数据。在这里的登录功能以手机号登录的 api 为账号登录，限定了类型 ",(0,r.jsx)(e.code,{children:'type="number"'}),"，长度 ",(0,r.jsx)(e.code,{children:'maxlength="11"'}),"（手机号码最大长度11位）。"]}),"\n",(0,r.jsxs)(e.p,{children:["第二个密码控件多了 ",(0,r.jsx)(e.code,{children:'@confirm="bindLogin"'})," 属性，可以给用户提供输入完密码后确认登录的体验。"]}),"\n",(0,r.jsxs)(e.p,{children:["登录操作使用 ",(0,r.jsx)(e.code,{children:"@click"})," 事件触发，有些小伙伴可能会在其他地方看到有使用 ",(0,r.jsx)(e.code,{children:"@tap"})," 处理事件的，不必有疑惑，Uniapp 对两者的处理是一样的。"]}),"\n",(0,r.jsx)(e.p,{children:"在页面下方有几个服务平台的授权，如果不使用账号密码登录，可以选择直接由第三方进行授权登录。但是在页面处理方面我们要做到根据应用处于不用平台的情况，对应不同登录方式可供用户选择："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"H5端，只可账号密码登录"}),"\n",(0,r.jsx)(e.li,{children:"小程序可微信授权登录"}),"\n",(0,r.jsx)(e.li,{children:"App 端可 QQ，微信，微博授权登录"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["我们可以使用 Uniapp 的 ",(0,r.jsx)(e.code,{children:"uni.getProvider()"})," 获取服务供应商，判定应用打开的在什么端。注意在 app 平台，可用的服务商，是打包环境中配置的服务商，与手机端安装了什么 app 没有关系。如果你的手机没有安装 QQ 软件，开发的 app 应用会打开 web 进行 QQ 账号密码登录后再授权登录。"]}),"\n",(0,r.jsxs)(e.p,{children:["根据API ",(0,r.jsx)(e.code,{children:"uni.getProvider()"})," 直接在视图渲染对应在 ",(0,r.jsx)(e.code,{children:"/static/image/login/"})," 目录下的图标，只要我们命名方式 ",(0,r.jsx)(e.code,{children:"['weixin', 'qq', 'sinaweibo']"}),"与该方法判断名称一致即可，加上切图美化，即可对应。"]}),"\n",(0,r.jsxs)(e.h2,{id:"手机账号登录",children:["手机账号登录",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#手机账号登录",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"应用的表单提交时可以说是前端的一项重大工程，后台的数据存储都是用户从前端页面操作存储的，如果没有表单的提交，那数据来源就是单向性的。我们前端在给后台传输数据的时候，需要对数据先行处理，对数据进行加工，校验，过滤等操作（当然后台也可以做）。后台也会对数据做校验过滤等操作，因为前端的数据是可见的，并且在某种手段下甚至是可以伪造的，可以说前端的数据是危险的，如果没有后端的校验过滤等操作，那么存入数据库的可能是一个命令。比如，csrf，xss插入伪造信息，更严重是删除数据库。"}),"\n",(0,r.jsx)(e.p,{children:"那么这些校验过滤操作放在前端来做呢？"}),"\n",(0,r.jsx)(e.p,{children:"如果用户的每一次操作不经过前台校验要后台来校验，想想用户每一次输入错误，前台把数据传入到后台需要0.3秒（网络不好甚至是1-3秒），后台再传输返回信息给前端告诉问题所在。那么用户很有可能关闭这个应用，甚至是不再使用这个应用。这样的用户体验是在太差了。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"const account = this.account.trim()\nconst password = this.password.trim()\nif (account == '') {\n    this.alert('请输入手机号')\n    return;\n}\nif (!(/^1[3456789]\\d{9}$/.test(account))) {\n    this.alert(\"手机号码有误，请重填\");  \n    return false;\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在登录提交这一块，对用户输入数据进行校验过滤，先使用 ",(0,r.jsx)(e.code,{children:"trim()"})," 过滤掉数据的前后空格，可以避免用户操作输入失误产生的空格，然后对账号进行校验非空处理。这一步可以拦截用户未填入账号进行登录的无意义提交操作。下一步再对用户的输入数据格式（当前设定为手机号，可能有邮箱账户）进行校验。校验均使用 ",(0,r.jsx)(e.code,{children:"uni.showToast()"})," 进行提示，统一又封装成 ",(0,r.jsx)(e.code,{children:"alert()"}),"。如果有多部操作，提取封装可以减少一定的代码量并提高效率。"]}),"\n",(0,r.jsxs)(e.h2,{id:"微信授权登录",children:["微信授权登录",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#微信授权登录",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"授权登录是指通过一套简单、安全的交互流程，让第三方应用可以在不知道用户登录名和密码的情况下，获取到用户的的对应信息，从而实现在第三方应用中的对应客户端的登录并关联第三方平台账户。"}),"\n",(0,r.jsx)(e.p,{children:"也就是说，对于用户来说，当你登录了一个 app 之后，你再使用这个 app 上的任何第三方服务，都不需要再手动输入一遍第三方服务对应的账号密码。而且在完成第一次登陆后，接下来的一段时间内用户再使用此服务都可以实现无感知登录。"}),"\n",(0,r.jsx)(e.p,{children:"第三方授权登录有几个优势点："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"缩短用户操作步骤，降低流失率；"}),"\n",(0,r.jsx)(e.li,{children:"统一接入规范，把控登录方式；"}),"\n",(0,r.jsx)(e.li,{children:"获取用户信息，考虑合规要求；"}),"\n",(0,r.jsx)(e.li,{children:"协议管理方便，快速签约解约；"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["上面提到 Uniapp 的 ",(0,r.jsx)(e.code,{children:"uni.getProvider()"})," 获取服务供应商就是为了判定该应用是否可以进行第三方授权登录，然后再根据API ",(0,r.jsx)(e.code,{children:"uni.login()"}),"根据不同的服务商进行授权登录。判定登录后再使用API ",(0,r.jsx)(e.code,{children:"uni.getUserInfo()"})," 获取第三方已经登录的用户信息。"]}),"\n",(0,r.jsx)(e.p,{children:"注意："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"虽然第三方授权登录的速度比传统的账号密码登录速度更快，只需要同意授权即可登录。鼓励用户使用第三方的账号登录，无疑是把该平台的资料分享给第三方平台，造成了数据泄露（登录用户数、昵称等信息）。作为核心机密的用户信息，被第三方平台所知悉，这也是不明智的选择。"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["为优化用户体验，使用 ",(0,r.jsx)(e.code,{children:"wx.getUserInfo"})," 接口直接弹出授权框的开发方式将逐步不再支持。目前已经调整为：",(0,r.jsx)(e.strong,{children:"使用 button 组件，并将 open-type 指定为 getUserInfo 类型，获取用户基本信息。"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"小结",children:["小结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"利用元素标签的属性限定用户操作能让你的应用更加好用，记住用户的所有操作都可能是愚蠢的，用户并不关心你的控件，能越节省用户输入时间，你的应用体验感也就越好，越能赢得客户青睐；"}),"\n",(0,r.jsx)(e.li,{children:"前端操作的数据是可见的，危险的，并有可能被人伪造，或者恶意操作，真实项目需要一定的校验加密；"}),"\n",(0,r.jsx)(e.li,{children:"授权登录优化了繁杂的账号密码登录，更方便用户操作。"}),"\n"]})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}let o=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["Uniapp%20%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6%2F20%20%E5%AE%9E%E6%88%9810%EF%BC%9A%E7%99%BB%E5%BD%95%E9%A1%B5%E5%BC%80%E5%8F%91.md"]={toc:[{text:"页面开发",id:"页面开发",depth:2},{text:"手机账号登录",id:"手机账号登录",depth:2},{text:"微信授权登录",id:"微信授权登录",depth:2},{text:"小结",id:"小结",depth:2}],title:"20 实战10：登录页开发",headingTitle:"20 实战10：登录页开发",frontmatter:{}}}}]);