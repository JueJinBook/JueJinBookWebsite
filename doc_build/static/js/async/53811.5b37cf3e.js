"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["53811"],{982013:function(n,e,t){n.exports=t.p+"static/image/539f843e90cf45034797d5745890c957.98d3ab4f.gif"},722671:function(n,e,t){n.exports=t.p+"static/image/be0420b5460ed37f2afc21f7bed75f8b.1a7f31ab.gif"},61106:function(n,e,t){n.exports=t.p+"static/image/c483d5fc3f3d6794d49894796612db54.06d1d32b.gif"},738840:function(n,e,t){t.r(e),t.d(e,{default:()=>X});var o=t(552676),i=t(740453);let c=t.p+"static/image/812b65d22de0dc1c3d3029f06cac1494.34be1008.gif",a=t.p+"static/image/45b4d2e9c65e59093f990e42abba4c22.9e21db0d.webp",s=t.p+"static/image/95dfe9b173039577739881feb7abd7ce.30210363.webp",r=t.p+"static/image/a6828824ec1f9a511db08e8bf1570ee6.5e1d3174.webp",d=t.p+"static/image/cc800bdc2f34df77f96a8d45fd096a2c.73f29cff.webp",p=t.p+"static/image/4eb193329814cc3fc221b08f1e47d41c.ca99173f.webp",l=t.p+"static/image/5c2bd3873a06ca7b621a0d1f1389f1ec.d6ebf03d.gif",h=t.p+"static/image/44b4027ce3fc8396b911b3aea3a4eb37.ff7a646a.webp",m=t.p+"static/image/60146ddd30efe750b6915994b2b8af78.612546d6.webp",f=t.p+"static/image/cdef2bcf94ed0b7725ea7c338af44375.9bdc4d5b.gif",x=t.p+"static/image/ebd779b75a35f125b5cfc79b1ddb49e6.2c5c6570.gif",b=t.p+"static/image/edbf719030ef165c285e0955e8fc8f4e.9f7060e5.webp",j=t.p+"static/image/2250af83b6b9ca4e2793572afb4dc3a7.40c16650.webp",g=t.p+"static/image/8c10a9bdc1e702af06b4d30fc517e40e.7f3ee9d8.webp",u=t.p+"static/image/b657c49896a9da37e311e1dfe9a26360.7f3ee9d8.webp",v=t.p+"static/image/ed53290729a12e452b2e97c77cd3bba4.1c7c8274.webp",C=t.p+"static/image/ff7a8130d17124b98b6bfb807d2d49c8.a6a3d3c6.webp",w=t.p+"static/image/28899c7be06350e94aeecf372429884e.da328095.gif",E=t.p+"static/image/158c563f911207005eda993da1901cd7.377c556d.webp",I=t.p+"static/image/58e1fcf379eb349a64dad80fb9eb291f.ad420ecc.gif",k=t.p+"static/image/acc3ee5b364df82d78213e24db3b5df3.01ed8d49.webp",N=t.p+"static/image/4c34eef949658dc456fa26c2e52ca418.5c8a3bf4.webp",P=t.p+"static/image/b1dbc0a478d99c55d3b34a3da11c0626.5b53cef4.webp",M=t.p+"static/image/728fd5c57209a2723d99d1d310254ec9.58f34005.webp",B=t.p+"static/image/00d84ef74d6872061f63c80dc6e33a8e.b4d8043c.webp",T=t.p+"static/image/25abe63225f718cf5bc33ab2085a06e2.71591ebd.webp",S=t.p+"static/image/ba20440f92d8ca0c7cf4d2aeae333e0d.35742ba7.webp",A=t.p+"static/image/8b3449b9ea9af982272fa9ade62d487c.c7baa4fb.gif",y=t.p+"static/image/99f27c58d96195cbd7f614fa35827409.84a313b8.webp",H=t.p+"static/image/6bc03f69d8938994a90d032b21f81390.bef2175a.webp",L=t.p+"static/image/d10a9af692607d762ff8efa66c220e2c.dfc1a1f5.webp",R=t.p+"static/image/fc3cb9c72582bc5a4836e07d3d589103.0ac0ec76.webp",_=t.p+"static/image/b74446de0086dac0a740c74495562153.9b0bf8d9.webp",z=t.p+"static/image/b055272e52b6e0c6d06249dfb6fdba42.9082463e.webp",q=t.p+"static/image/f31e2febc8513572c0adfc0e220cf602.b4d33413.webp",$=t.p+"static/image/11e4f4a836717ada6363d282623066ed.8697a703.webp",F=t.p+"static/image/e42d7440b262aec172c40e5eacd2f27c.953413ae.gif",O=t.p+"static/image/28394c1449bf55c1b41730e794468b62.7b0177f7.webp",W=t.p+"static/image/bf50a1253d905a8da306d4a8270aef0a.1764699b.webp",G=t.p+"static/image/c3afbd8dc671eccbca8c3fa42f9b05db.898735ea.webp";var D=t(722671),Q=t(61106);let J=t.p+"static/image/378f0a14ebb172dd2a0ec934bf2ae44b.e529d2b1.gif";var K=t(982013);function U(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,i.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"第69章低代码编辑器画布区hover展示高亮框",children:["第69章—低代码编辑器：画布区hover展示高亮框",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第69章低代码编辑器画布区hover展示高亮框",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"\uFEFF上节我们实现了 json 到组件树的渲染，以及拖拽改变 json，支持任意层级："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:K,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这节我们继续来实现编辑时的交互效果。"}),"\n",(0,o.jsxs)(e.p,{children:["也就是",(0,o.jsx)(e.a,{href:"https://aisuda.github.io/amis-editor-demo/#/edit/0",target:"_blank",rel:"noopener noreferrer",children:"这个"}),"："]}),"\n",(0,o.jsx)(e.p,{children:"鼠标 hover 到画布区的任意组件，都会有高亮效果："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:J,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"选中组件的时候，会有框选效果："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:Q,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这种效果怎么实现呢？"}),"\n",(0,o.jsx)(e.p,{children:"最容易想到的就是每个组件都做下处理，hover 或者 click 的时候展示编辑框。"}),"\n",(0,o.jsx)(e.p,{children:"但每个组件都加这段逻辑比较麻烦。"}),"\n",(0,o.jsx)(e.p,{children:"更好的方式是在画布区根组件统一监听 hover 和 click，根据触发事件的元素的 width、height、left、top，来显示编辑框。"}),"\n",(0,o.jsx)(e.p,{children:"类似我们之前实现的 OnBoarding 组件："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:D,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"就是一个 div 来改变 width、height、left、top 实现的。"}),"\n",(0,o.jsx)(e.p,{children:"这里也类似。"}),"\n",(0,o.jsx)(e.p,{children:"我们实现下："}),"\n",(0,o.jsx)(e.p,{children:"我们需要知道 hover 或者 click 的元素对应的 component 的 id。"}),"\n",(0,o.jsx)(e.p,{children:"在渲染的时候加一下这个："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:G,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Button as AntdButton } from 'antd';\nimport { CommonComponentProps } from '../../interface';\n\nconst Button = ({id, type, text}: CommonComponentProps) => {\n  return (\n    <AntdButton data-component-id={id} type={type}>{text}</AntdButton>\n  )\n}\n\nexport default Button;\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:W,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:O,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"试一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:F,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"拖拽两个组件过来。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:$,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"可以看到，id 加在了组件元素的 data-component-id 属性上。"}),"\n",(0,o.jsx)(e.p,{children:"然后在 EditArea 里处理下 hover"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:q,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"const [hoverComponentId, setHoverComponentId] = useState<number>();\n\nconst handleMouseOver: MouseEventHandler = (e)  => {\n    const path = e.nativeEvent.composedPath();\n\n    for (let i = 0; i < path.length; i += 1) {\n        const ele = path[i] as HTMLElement;\n\n        const componentId = ele.dataset?.componentId;\n        if (componentId) {\n            setHoverComponentId(+componentId);\n            return;\n        }\n    }\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"mouseover 的时候做下处理，找到元素的 data-component-id 设置为 hoverComponentId 的 state"}),"\n",(0,o.jsx)(e.p,{children:"加个 debugger"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:z,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"浏览器里打开 devtools，鼠标划到画布区："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:_,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"可以看到 composedPath 是从触发事件的元素到 html 根元素的路径。"}),"\n",(0,o.jsx)(e.p,{children:"这是 event 对象的 api。"}),"\n",(0,o.jsx)(e.p,{children:"为啥不直接 e.composedPath 而是取 e.nativeEvent.composedPath 呢？"}),"\n",(0,o.jsx)(e.p,{children:"因为 react 里的 event 是合成事件，有的原生事件的属性它没有："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:R,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这时候就可以通过 e.nativeEvent 取它的原生事件："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:L,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"然后我们在整个路径从底向上找，找到第一个有 data-component-id 的元素。"}),"\n",(0,o.jsx)(e.p,{children:"它就是当前 hover 的组件了。"}),"\n",(0,o.jsx)(e.p,{children:"还有这个 ele.dataset，它是一个 dom 的属性，包含所有 data-xx 的属性的值："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:H,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样，在 hover 到不同 component 的时候，就能拿到对应的 componentId"}),"\n",(0,o.jsx)(e.p,{children:"我们渲染下这个 hoverComponentId："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:y,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:A,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,o.jsx)(e.p,{children:"然后接下来就是拿到 component-id 对应的 dom 的 with、height、left、top，加一个框上去就好了。"}),"\n",(0,o.jsx)(e.p,{children:"我们创建个组件来写这个："}),"\n",(0,o.jsx)(e.p,{children:"editor/components/HoverMask/index.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import {\n  useEffect,\n  useMemo,\n  useState,\n} from \'react\';\nimport { createPortal } from \'react-dom\';\n\ninterface HoverMaskProps {\n  containerClassName: string\n  componentId: number;\n}\n\nfunction HoverMask({ containerClassName, componentId }: HoverMaskProps) {\n\n  const [position, setPosition] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n  });\n\n  useEffect(() => {\n    updatePosition();\n  }, [componentId]);\n\n  function updatePosition() {\n    if (!componentId) return;\n\n    const container = document.querySelector(`.${containerClassName}`);\n    if (!container) return;\n\n    const node = document.querySelector(`[data-component-id="${componentId}"]`);\n    if (!node) return;\n\n    const { top, left, width, height } = node.getBoundingClientRect();\n    const { top: containerTop, left: containerLeft } = container.getBoundingClientRect();\n\n    setPosition({\n      top: top - containerTop + container.scrollTop,\n      left: left - containerLeft + container.scrollTop,\n      width,\n      height\n    });\n  }\n\n  const el = useMemo(() => {\n      const el = document.createElement(\'div\');\n      el.className = `wrapper`;\n\n      const container = document.querySelector(`.${containerClassName}`);\n      container!.appendChild(el);\n      return el;\n  }, []);\n\n  return createPortal((\n    <div\n      style={{\n        position: "absolute",\n        left: position.left,\n        top: position.top,\n        backgroundColor: "rgba(0, 0, 255, 0.1)",\n        border: "1px dashed blue",\n        pointerEvents: "none",\n        width: position.width,\n        height: position.height,\n        zIndex: 12,\n        borderRadius: 4,\n        boxSizing: \'border-box\',\n      }}\n    />\n  ), el)\n}\n\nexport default HoverMask;\n'})}),"\n",(0,o.jsx)(e.p,{children:"从上到下来看："}),"\n",(0,o.jsx)(e.p,{children:"首先，需要传入 containerClassName 和 componentId 参数："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:S,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"componentId 就是 hover 的组件 id，而 containerClassName 就是画布区的根元素的 className。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:T,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"比如上图，我们计算按钮和画布区顶部的距离，就需要按钮的 boundingClientRect 还有画布区的 boundingClientRect。"}),"\n",(0,o.jsx)(e.p,{children:"所以需要传入 containerClassName 和 componentId。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:B,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"我们声明 left、top、width、height 的 state，调用 updatePosition 来计算这些位置。"}),"\n",(0,o.jsx)(e.p,{children:"计算方式如下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:M,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"获取两个元素的 boundingClientRect，计算 top、left 的差值，加上 scrollTop、scrollLeft。"}),"\n",(0,o.jsx)(e.p,{children:"因为 boundingClientRect 只是可视区也就是和视口的距离，要算绝对定位的位置的话要加上已滚动的距离。"}),"\n",(0,o.jsx)(e.p,{children:"然后创建一个 div 挂载在容器下，用于存放 portal："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:P,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"具体的样式比较简单，就是设置下 top、left、width、height，然后设置下 border、background 就好了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:N,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"注意还要设置 pointer-event 为 none，不响应鼠标事件。"}),"\n",(0,o.jsx)(e.p,{children:"HoverMask 组件写完了，我们用一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:k,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"{hoverComponentId && (\n    <HoverMask\n        containerClassName='edit-area'\n        componentId={hoverComponentId}\n    />\n)}\n"})}),"\n",(0,o.jsx)(e.p,{children:"看下效果："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:I,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"高亮是对的，只是当鼠标离开画布区的时候还在高亮。"}),"\n",(0,o.jsx)(e.p,{children:"处理下 mouseleave 的时候："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:E,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"onMouseLeave={() => {\n    setHoverComponentId(undefined);\n}}\n"})}),"\n",(0,o.jsx)(e.p,{children:"这样就好了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:w,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"但只是高亮下意义不大，我们把组件名也显示下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:C,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:v,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:u,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"就是在加一个右上角 label 的位置计算，然后根据 id 找到对应 component 的 name 显示。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import {\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport { getComponentById, useComponetsStore } from '../../stores/components';\n\ninterface HoverMaskProps {\n  containerClassName: string\n  componentId: number;\n}\n\nfunction HoverMask({ containerClassName, componentId }: HoverMaskProps) {\n\n  const [position, setPosition] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    labelTop: 0,\n    labelLeft: 0,\n  });\n\n  const { components } = useComponetsStore();\n\n  useEffect(() => {\n    updatePosition();\n  }, [componentId]);\n\n  function updatePosition() {\n    if (!componentId) return;\n\n    const container = document.querySelector(`.${containerClassName}`);\n    if (!container) return;\n\n    const node = document.querySelector(`[data-component-id=\"${componentId}\"]`);\n    if (!node) return;\n\n    const { top, left, width, height } = node.getBoundingClientRect();\n    const { top: containerTop, left: containerLeft } = container.getBoundingClientRect();\n\n    let labelTop = top - containerTop + container.scrollTop;\n    let labelLeft = left - containerLeft + width;\n\n    setPosition({\n      top: top - containerTop + container.scrollTop,\n      left: left - containerLeft + container.scrollTop,\n      width,\n      height,\n      labelTop,\n      labelLeft,\n    });\n  }\n\n  const el = useMemo(() => {\n      const el = document.createElement('div');\n      el.className = `wrapper`;\n\n      const container = document.querySelector(`.${containerClassName}`);\n      container!.appendChild(el);\n      return el;\n  }, []);\n\n  const curComponent = useMemo(() => {\n    return getComponentById(componentId, components);\n  }, [componentId]);\n\n  return createPortal((\n    <>\n      <div\n        style={{\n          position: \"absolute\",\n          left: position.left,\n          top: position.top,\n          backgroundColor: \"rgba(0, 0, 255, 0.05)\",\n          border: \"1px dashed blue\",\n          pointerEvents: \"none\",\n          width: position.width,\n          height: position.height,\n          zIndex: 12,\n          borderRadius: 4,\n          boxSizing: 'border-box',\n        }}\n      />\n      <div\n          style={{\n            position: \"absolute\",\n            left: position.labelLeft,\n            top: position.labelTop,\n            fontSize: \"14px\",\n            zIndex: 13,\n            display: (!position.width || position.width < 10) ? \"none\" : \"inline\",\n            transform: 'translate(-100%, -100%)',\n          }}\n        >\n          <div\n            style={{\n              padding: '0 8px',\n              backgroundColor: 'blue',\n              borderRadius: 4,\n              color: '#fff',\n              cursor: \"pointer\",\n              whiteSpace: 'nowrap',\n            }}\n          >\n            {curComponent?.name}\n          </div>\n        </div>\n    </>\n  ), el)\n}\n\nexport default HoverMask;\n"})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:g,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这里的位置是这样算的："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:j,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"labelTop 和高亮框一样，齐平。"}),"\n",(0,o.jsx)(e.p,{children:"labelLeft 是高亮框的 left，加上高亮框宽度。"}),"\n",(0,o.jsx)(e.p,{children:"然后 translate 回去："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:b,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"如果不 tanslate 回去是这样的："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:x,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"此外，还要处理下边界情况，Page 组件就没显示 label 因为定位到上面去了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:f,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:m,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"if (labelTop <= 0) {\n  labelTop -= -20;\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"现在就能显示出来了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:h,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"其实还有个问题："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:l,alt:""})}),"\n",(0,o.jsx)(e.p,{children:".wrapper 会创建多个。"}),"\n",(0,o.jsx)(e.p,{children:"这是因为 hoverComponentId 只要一变，就会卸载之前的 HoverMask 创建新的："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:p,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"所以这段逻辑会执行多次，创建多个 .wrapper 元素："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:d,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样性能不好。"}),"\n",(0,o.jsx)(e.p,{children:"我们改一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:r,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"直接在 EditArea 里创建个元素用来挂载 portal，把 className 传入 HoverMask 组件。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"return <div className=\"h-[100%] edit-area\" onMouseOver={handleMouseOver} onMouseLeave={() => {\n    setHoverComponentId(undefined);\n}} onClick={handleClick}>\n    {renderComponents(components)}\n    {hoverComponentId && (\n        <HoverMask\n            portalWrapperClassName='portal-wrapper'\n            containerClassName='edit-area'\n            componentId={hoverComponentId}\n        />\n    )}\n    <div className=\"portal-wrapper\"></div>\n</div>\n"})}),"\n",(0,o.jsx)(e.p,{children:"HoverMask 直接把 portal 挂载到这个 className 的元素下就好了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:s,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:a,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import {\n  useEffect,\n  useMemo,\n  useState,\n} from \'react\';\nimport { createPortal } from \'react-dom\';\nimport { getComponentById, useComponetsStore } from \'../../stores/components\';\n\ninterface HoverMaskProps {\n  portalWrapperClassName: string;\n  containerClassName: string\n  componentId: number;\n}\n\nfunction HoverMask({ containerClassName, portalWrapperClassName, componentId }: HoverMaskProps) {\n\n  const [position, setPosition] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    labelTop: 0,\n    labelLeft: 0,\n  });\n\n  const { components } = useComponetsStore();\n\n  useEffect(() => {\n    updatePosition();\n  }, [componentId]);\n\n  function updatePosition() {\n    if (!componentId) return;\n\n    const container = document.querySelector(`.${containerClassName}`);\n    if (!container) return;\n\n    const node = document.querySelector(`[data-component-id="${componentId}"]`);\n    if (!node) return;\n\n    const { top, left, width, height } = node.getBoundingClientRect();\n    const { top: containerTop, left: containerLeft } = container.getBoundingClientRect();\n\n    let labelTop = top - containerTop + container.scrollTop;\n    let labelLeft = left - containerLeft + width;\n\n    if (labelTop <= 0) {\n      labelTop -= -20;\n    }\n  \n    setPosition({\n      top: top - containerTop + container.scrollTop,\n      left: left - containerLeft + container.scrollTop,\n      width,\n      height,\n      labelTop,\n      labelLeft,\n    });\n  }\n\n  const el = useMemo(() => {\n      return document.querySelector(`.${portalWrapperClassName}`)!\n  }, []);\n\n  const curComponent = useMemo(() => {\n    return getComponentById(componentId, components);\n  }, [componentId]);\n\n  return createPortal((\n    <>\n      <div\n        style={{\n          position: "absolute",\n          left: position.left,\n          top: position.top,\n          backgroundColor: "rgba(0, 0, 255, 0.05)",\n          border: "1px dashed blue",\n          pointerEvents: "none",\n          width: position.width,\n          height: position.height,\n          zIndex: 12,\n          borderRadius: 4,\n          boxSizing: \'border-box\',\n        }}\n      />\n      <div\n          style={{\n            position: "absolute",\n            left: position.labelLeft,\n            top: position.labelTop,\n            fontSize: "14px",\n            zIndex: 13,\n            display: (!position.width || position.width < 10) ? "none" : "inline",\n            transform: \'translate(-100%, -100%)\',\n          }}\n        >\n          <div\n            style={{\n              padding: \'0 8px\',\n              backgroundColor: \'blue\',\n              borderRadius: 4,\n              color: \'#fff\',\n              cursor: "pointer",\n              whiteSpace: \'nowrap\',\n            }}\n          >\n            {curComponent?.name}\n          </div>\n        </div>\n    </>\n  ), el)\n}\n\nexport default HoverMask;\n'})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:c,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"现在就只会有一个 wrapper 元素了。"}),"\n",(0,o.jsxs)(e.p,{children:["案例代码上传了",(0,o.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"git reset --hard 8b0dacec372a39d4eb90090c0d0a694f7ed9485b\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"总结",children:["总结",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"这节我们实现了下编辑的时候的交互，实现了 hover 的时候展示高亮框和组件名。"}),"\n",(0,o.jsx)(e.p,{children:"我们在每个组件渲染的时候加上了 data-component-id，然后在画布区根组件监听 mouseover 事件，通过触发事件的元素一层层往上找，找到 component-id。"}),"\n",(0,o.jsx)(e.p,{children:"然后 getBoudingClientRect 拿到这个元素的 width、height、left、top 等信息，和画布区根元素的位置做计算，算出高亮框的位置。"}),"\n",(0,o.jsx)(e.p,{children:"并在高亮框的右上角展示了组件名。"}),"\n",(0,o.jsx)(e.p,{children:"这样，编辑时高亮展示组件信息的功能就完成了。"})]})}function V(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(U,{...n})}):U(n)}let X=V;V.__RSPRESS_PAGE_META={},V.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC69%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E7%94%BB%E5%B8%83%E5%8C%BAhover%E5%B1%95%E7%A4%BA%E9%AB%98%E4%BA%AE%E6%A1%86.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第69章—低代码编辑器：画布区hover展示高亮框",headingTitle:"第69章—低代码编辑器：画布区hover展示高亮框",frontmatter:{}}}}]);