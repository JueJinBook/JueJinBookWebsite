"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["81129"],{182092:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var s=r(552676),c=r(740453);let d=r.p+"static/image/a6ac7e3fdd3e8cef8f85b2cdd01f7e3e.9664861a.webp";function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",h3:"h3",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",strong:"strong",tbody:"tbody",td:"td",ul:"ul",li:"li",h4:"h4",ol:"ol",img:"img"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"23组件篇-_-link-和-script",children:["23.组件篇 _ Link 和 Script",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23组件篇-_-link-和-script",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Next.js 内置了 ",(0,s.jsx)(n.code,{children:"<Link>"})," 和 ",(0,s.jsx)(n.code,{children:"<Script>"})," 组件，",(0,s.jsx)(n.code,{children:"<Link> "}),"组件实现了后台预获取资源，从而让页面转换更快更平滑，",(0,s.jsx)(n.code,{children:"<Script>"})," 组件使得你可以控制加载和执行第三方脚本等等。本篇会详细介绍这两个组件的用法和相关参数。"]}),"\n",(0,s.jsxs)(n.h2,{id:"link",children:[(0,s.jsx)(n.code,{children:"<Link>"}),(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#link",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"1-介绍",children:["1. 介绍",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-介绍",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Link 组件是一个拓展了 HTML ",(0,s.jsx)(n.code,{children:"<a>"})," 元素的 React 组件，提供了预加载和客户端路由之间的导航功能。它是 Next.js 路由导航的主要方式。使用示例如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport Link from 'next/link'\n \nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-props",children:["2. Props",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-props",children:"#"})]}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Prop"})}),"\n",(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"类型"})}),"\n",(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"是否必须"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/link#href-required",target:"_blank",rel:"noopener noreferrer",children:"href"})}),"\n",(0,s.jsx)(n.td,{children:'href="/dashboard"'}),"\n",(0,s.jsx)(n.td,{children:"String or Object"}),"\n",(0,s.jsx)(n.td,{children:"是"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/link#replace",target:"_blank",rel:"noopener noreferrer",children:"replace"})}),"\n",(0,s.jsx)(n.td,{children:"replace={false}"}),"\n",(0,s.jsx)(n.td,{children:"Boolean"}),"\n",(0,s.jsx)(n.td,{children:"-"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/link#scroll",target:"_blank",rel:"noopener noreferrer",children:"scroll"})}),"\n",(0,s.jsx)(n.td,{children:"scroll={false}"}),"\n",(0,s.jsx)(n.td,{children:"Boolean"}),"\n",(0,s.jsx)(n.td,{children:"-"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/link#prefetch",target:"_blank",rel:"noopener noreferrer",children:"prefetch"})}),"\n",(0,s.jsx)(n.td,{children:"prefetch={false}"}),"\n",(0,s.jsx)(n.td,{children:"Boolean"}),"\n",(0,s.jsx)(n.td,{children:"-"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-href必须",children:["3. href（必须）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-href必须",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"导航跳转的路径或者 URL："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Link href="/dashboard">Dashboard</Link>\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"href"}),"也支持传入一个对象："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// 导航至 /about?name=test\n<Link\n  href={{\n    pathname: '/about',\n    query: { name: 'test' },\n  }}\n  >\n  About\n</Link>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["那你可能就好奇了，除了 ",(0,s.jsx)(n.code,{children:"pathname"})," 和 ",(0,s.jsx)(n.code,{children:"query"}),"，还支持传入哪些对象参数？我们翻下 ",(0,s.jsxs)(n.a,{href:"https://github.com/vercel/next.js/blob/canary/packages/next/src/client/link.tsx",target:"_blank",rel:"noopener noreferrer",children:[(0,s.jsx)(n.code,{children:"<Link>"})," 组件的源码"]}),"就知道了："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// next.js/packages/next/src/client /link.tsx\nimport type { UrlObject } from 'url'\ntype Url = string | UrlObject\ntype InternalLinkProps = {\n  href: Url\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["可以看出，对象来自于 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/url",target:"_blank",rel:"noopener noreferrer",children:"url NPM 包"}),"，查阅 url 这个包，该对象的属性有（以 ",(0,s.jsx)(n.code,{children:"'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'"}),"为例）："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"href"}),"：",(0,s.jsx)(n.code,{children:"'<http://user:pass@host.com:8080/p/a/t/h?query=string#hash>'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"protocol"}),"：",(0,s.jsx)(n.code,{children:"'http:'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"host"}),": ",(0,s.jsx)(n.code,{children:"'host.com:8080'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"auth"}),": ",(0,s.jsx)(n.code,{children:"'user:pass'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"hostname"}),": ",(0,s.jsx)(n.code,{children:"'host.com'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"port"}),": ",(0,s.jsx)(n.code,{children:"'8080'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"pathname"}),": ",(0,s.jsx)(n.code,{children:"'/p/a/t/h'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"search"}),": ",(0,s.jsx)(n.code,{children:"'?query=string'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"path"}),": ",(0,s.jsx)(n.code,{children:"'/p/a/t/h?query=string'"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"query"}),": ",(0,s.jsx)(n.code,{children:"'query=string' or {'query':'string'}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"hash"}),": ",(0,s.jsx)(n.code,{children:"'#hash'"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"4-replace",children:["4. replace",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-replace",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["默认值为 ",(0,s.jsx)(n.code,{children:"false"}),"，当值为 ",(0,s.jsx)(n.code,{children:"true"})," 的时候，",(0,s.jsx)(n.code,{children:"next/link"}),"会替换浏览器当前的历史记录，而非在浏览器的历史项里新增一个 URL（",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/History_API#replacestate_%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer",children:"history.replaceState 方法"}),"）。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"5-scroll",children:["5. scroll",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-scroll",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["默认值为 ",(0,s.jsx)(n.code,{children:"true"}),"。",(0,s.jsx)(n.code,{children:"<Link>"}),"组件的默认行为是滚动到一个新导航的顶部或者在前进后退导航中维持之前的滚动位置。当值为 ",(0,s.jsx)(n.code,{children:"false"}),"，",(0,s.jsx)(n.code,{children:"next/link"}),"不会在导航后滚动到新的页面顶部（继续维持上一个路由的位置）。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"6-prefetch",children:["6. prefetch",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-prefetch",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["默认值为 ",(0,s.jsx)(n.code,{children:"true"}),"。当值为 ",(0,s.jsx)(n.code,{children:"true"})," 的时候，",(0,s.jsx)(n.code,{children:"next/link"}),"会在后台预获取页面。这可以有效改善客户端导航性能。任何视口中的 ",(0,s.jsx)(n.code,{children:"<Link />"})," （无论是初始加载的时候还是通过滚动）都会预加载。但是要注意：预获取仅在生产环境中开启。"]}),"\n",(0,s.jsxs)(n.p,{children:["你可以通过传递 ",(0,s.jsx)(n.code,{children:"prefetch={false}"}),"来禁用这个功能。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport Link from 'next/link'\n \nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"7-其他-props",children:["7. 其他 props",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-其他-props",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["其他 props 会自动转发给底层的 ",(0,s.jsx)(n.code,{children:"<a>"})," 元素，比如 ",(0,s.jsx)(n.code,{children:'target="_blank"'}),"、",(0,s.jsx)(n.code,{children:"className"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"8-示例",children:["8. 示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-示例",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"81-链接至动态路由",children:["8.1. 链接至动态路由",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#81-链接至动态路由",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// app/blog/page.js\nimport Link from 'next/link'\n \nfunction Page({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"82-中间件",children:["8.2 中间件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#82-中间件",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们通常会用中间件实现鉴权等功能，然后让用户重定向到其他的页面。为了让  "," 组件能够在有中间件的时候获取到重定向后的链接，你需要告诉 Next.js 用于展示的 URL 和用于预获取的 URL。"]}),"\n",(0,s.jsxs)(n.p,{children:["举个例子，当你访问 ",(0,s.jsx)(n.code,{children:"/dashboard"})," 这个路由的时候，需要进行身份验证，如果身份验证通过，跳转到 ",(0,s.jsx)(n.code,{children:"/auth/dashboard"})," 路由，如果没有通过，则跳转到公共访问的 ",(0,s.jsx)(n.code,{children:"/public/dashboard"})," 路由，实现代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// middleware.js\nexport function middleware(req) {\n  const nextUrl = req.nextUrl\n  if (nextUrl.pathname === '/dashboard') {\n    if (req.cookies.authToken) {\n      return NextResponse.rewrite(new URL('/auth/dashboard', req.url))\n    } else {\n      return NextResponse.rewrite(new URL('/public/dashboard', req.url))\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这个时候，为了让 ",(0,s.jsx)(n.code,{children:"<Link />"})," 组件预获取正确的地址，你可以这样写："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import Link from 'next/link'\nimport useIsAuthed from './hooks/useIsAuthed'\n \nexport default function Page() {\n  const isAuthed = useIsAuthed()\n  const path = isAuthed ? '/auth/dashboard' : '/dashboard'\n  return (\n    <Link as=\"/dashboard\" href={path}>\n      Dashboard\n    </Link>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这里我们用到了 ",(0,s.jsx)(n.code,{children:"as"})," 这个 prop，",(0,s.jsx)(n.code,{children:"as"})," 是一个遗留的 prop，早期为了搭配动态路由而实现。这是因为在早期实现跳转动态路由功能的时候，代码并不像上节例子展示的那样理所当然："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const pids = ['id1', 'id2', 'id3']\n{\n  pids.map((pid) => (\n    <Link href=\"/post/[pid]\" as={`/post/${pid}`}>\n      <a>Post {pid}</a>\n    </Link>\n  ))\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这是因为早期设计中， ",(0,s.jsx)(n.code,{children:"href"})," 基于文件系统路径，并不能在运行时被改变，跳转地址只能是 ",(0,s.jsx)(n.code,{children:'"/post/[pid]"'}),"这种形式，但为了让浏览器显示正确的地址，于是增加了 ",(0,s.jsx)(n.code,{children:"as"})," prop，它是浏览器 URL 地址栏中展示的地址。"]}),"\n",(0,s.jsx)(n.p,{children:"回到刚才这个例子："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'  <Link as="/dashboard" href={path}>\n    Dashboard\n  </Link>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["因为 prefetch 基于的是 ",(0,s.jsx)(n.code,{children:"href"})," 地址，为了 prefetch 到正确的地址，所以 ",(0,s.jsx)(n.code,{children:"path"})," 做了 isAuthed 判断。但最终跳转的地址应该是 ",(0,s.jsx)(n.code,{children:"/dashboard"}),"，然后在中间件里做具体的判断，所以使用了 ",(0,s.jsx)(n.code,{children:"as"})," prop。"]}),"\n",(0,s.jsxs)(n.h2,{id:"script",children:[(0,s.jsx)(n.code,{children:"<Script>"}),(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#script",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"1-介绍-1",children:["1. 介绍",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-介绍-1",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Next.js 内置的脚本组件，用于控制加载和执行三方脚本文件。使用基本示例如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// app/dashboard/page.js\nimport Script from 'next/script'\n \nexport default function Dashboard() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这是用在 page.js 之中，也可以用在 layout.js 之中使用，实现为多个路由加载一个脚本："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// app/dashboard/layout.js\nimport Script from 'next/script'\n \nexport default function DashboardLayout({ children }) {\n  return (\n    <>\n      <section>{children}</section>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这样当访问如 ",(0,s.jsx)(n.code,{children:"dashboard/page.js"})," 或是子路由 ",(0,s.jsx)(n.code,{children:"dashboard/settings/page.js"}),"的时候，脚本都会获取。Next.js 会保证脚本只加载一次，即使用户在同一布局的多个路由之间导航。"]}),"\n",(0,s.jsx)(n.p,{children:"如果你希望所有路由都加载一个脚本，那可以直接卸载根布局中："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// app/layout.js \nimport Script from \'next/script\'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang="en">\n      <body>{children}</body>\n      <Script src="https://example.com/script.js" />\n    </html>\n  )\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"当然考虑到性能问题，尽可能在特定页面或布局中加载三方脚本。"}),"\n",(0,s.jsxs)(n.h3,{id:"2-props-1",children:["2. Props",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-props-1",children:"#"})]}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Prop"})}),"\n",(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"类型"})}),"\n",(0,s.jsx)(n.th,{children:"是否必传"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/script#src",target:"_blank",rel:"noopener noreferrer",children:"src"})}),"\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'src="http://example.com/script"'})}),"\n",(0,s.jsx)(n.td,{children:"String"}),"\n",(0,s.jsx)(n.td,{children:"必传，除非使用内联脚本"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/script#strategy",target:"_blank",rel:"noopener noreferrer",children:"strategy"})}),"\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'strategy="lazyOnload"'})}),"\n",(0,s.jsx)(n.td,{children:"String"}),"\n",(0,s.jsx)(n.td,{children:"-"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/script#onload",target:"_blank",rel:"noopener noreferrer",children:"onLoad"})}),"\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onLoad={onLoadFunc}"})}),"\n",(0,s.jsx)(n.td,{children:"Function"}),"\n",(0,s.jsx)(n.td,{children:"-"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/script#onready",target:"_blank",rel:"noopener noreferrer",children:"onReady"})}),"\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onReady={onReadyFunc}"})}),"\n",(0,s.jsx)(n.td,{children:"Function"}),"\n",(0,s.jsx)(n.td,{children:"-"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/script#onerror",target:"_blank",rel:"noopener noreferrer",children:"onError"})}),"\n",(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onError={onErrorFunc}"})}),"\n",(0,s.jsx)(n.td,{children:"Function"}),"\n",(0,s.jsx)(n.td,{children:"-"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-src",children:["3. src",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-src",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"外部脚本地址，字符串形式，外部绝对地址或者内部地址都可，除非使用内联脚本，否则该属性必传。"}),"\n",(0,s.jsxs)(n.p,{children:["所谓内联脚本，就像我们正常使用 script 标签一样，",(0,s.jsx)(n.code,{children:"<Script />"})," 也支持直接在组件内书写 JavaScript 代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"<Script id=\"show-banner\">\n  {`document.getElementById('banner').classList.remove('hidden')`}\n<\/Script>\n"})}),"\n",(0,s.jsx)(n.p,{children:"注意必须为内联脚本分配一个 id，以保证 Next.js 追踪和优化脚本。"}),"\n",(0,s.jsxs)(n.p,{children:["或者使用 ",(0,s.jsx)(n.code,{children:"dangerouslySetInnerHTML"}),"属性："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"<Script\n  id=\"show-banner\"\n  dangerouslySetInnerHTML={{\n    __html: `document.getElementById('banner').classList.remove('hidden')`,\n  }}\n/>\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"4-strategy",children:["4. strategy",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-strategy",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"脚本加载策略，一共有四种："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"beforeInteractive"}),"： 在可交互前加载，适用于如机器人检测、Cookie 管理等"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"afterInteractive"}),"：默认值，在可交互后加载，适用于如数据统计等"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"lazyOnload"}),"：在浏览器空闲时间加载"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"worker"}),"：（实验性质）通过 web worker 加载"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"beforeInteractive"}),"，顾名思义，在可交互之前加载。",(0,s.jsx)(n.code,{children:"beforeInteractive"}),"脚本必须放在根布局（",(0,s.jsx)(n.code,{children:"app/layout.tsx"}),"）之中，用于加载整站都需要的脚本，适用于一些在页面具有可交互前需要获取的关键脚本。它会被注入到 HTML 文档的 ",(0,s.jsx)(n.code,{children:"head"})," 中，不管你写在组件的哪里："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// app/layout.js\nimport Script from \'next/script\'\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang="en">\n      <body>{children}</body>\n      <Script\n        src="https://example.com/script.js"\n        strategy="beforeInteractive"\n      />\n    </html>\n  )\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"虽然我们将 Script 组件写在 body 标签之后，但依然被注入到 head 中："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"afterInteractive"}),"，顾名思义，在页面可交互后（不一定是完全可交互）后加载，这是 Script 组件默认的加载策略，适用于需要尽快加载的脚本。",(0,s.jsx)(n.code,{children:"afterInteractive"}),"脚本可以写在任何页面或者布局中，并且只有当浏览器中打开该页面的时候才会加载和执行。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// app/page.js\nimport Script from \'next/script\'\n \nexport default function Page() {\n  return (\n    <>\n      <Script src="https://example.com/script.js" strategy="afterInteractive" />\n    </>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"lazyOnload"}),"，在浏览器空闲的时候注入到 HTML 客户端，并在页面所有资源都获取后开始加载。此策略是用于不需要提前加载的后台或者低优先级脚本。lazyOnload 脚本可以写在任何页面或者布局中，并且只有当浏览器中打开该页面的时候才会加载和执行。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// app/page.js\nimport Script from \'next/script\'\n \nexport default function Page() {\n  return (\n    <>\n      <Script src="https://example.com/script.js" strategy="lazyOnload" />\n    </>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"worker"}),"，实验性质的加载策略，目前并不稳定，并且不能在 ",(0,s.jsx)(n.code,{children:"app"})," 目录下使用，所以请谨慎使用。使用该策略的脚本将开一个 web worker 线程执行，从确保主线程处理关键的代码。它的背后是使用 ",(0,s.jsx)(n.a,{href:"https://partytown.builder.io/",target:"_blank",rel:"noopener noreferrer",children:"Partytown"})," 处理。尽管这个策略可以用于任何脚本，但作为一种高级用法，并不保证支持所有第三方脚本。"]}),"\n",(0,s.jsxs)(n.p,{children:["使用 worker 策略，需要通过 ",(0,s.jsx)(n.code,{children:"next.config.js"})," 的 ",(0,s.jsx)(n.code,{children:"nextScriptWorkers"})," 配置项开启："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// next.config.js\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["此时当你运行 ",(0,s.jsx)(n.code,{children:"npm run dev"}),"的时候，Next.js 会提示你安装 Partytown："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"npm install @builder.io/partytown\n"})}),"\n",(0,s.jsxs)(n.p,{children:["当完成设置后，定义 ",(0,s.jsx)(n.code,{children:'strategy="worker"'}),"将会在应用中实例化 Partytown，并将脚本放在 web worker 中。不过 ",(0,s.jsx)(n.code,{children:"worker"})," 脚本目前只能在 ",(0,s.jsx)(n.code,{children:"pages/"})," 目录下使用："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// pages/home.js\nimport Script from \'next/script\'\n \nexport default function Home() {\n  return (\n    <>\n      <Script src="https://example.com/script.js" strategy="worker" />\n    </>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"5-onload",children:["5. onLoad",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-onload",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["一些三方脚本需要在脚本加载完毕后执行 JavaScript 代码以完成实例化或者调用函数。如果使用 ",(0,s.jsx)(n.code,{children:"afterInteractive"})," 或者 ",(0,s.jsx)(n.code,{children:"lazyOnload"})," 作为加载策略，则可以在加载完后使用 ",(0,s.jsx)(n.code,{children:"onLoad"})," 属性执行代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/page.js\nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"\n        onLoad={() => {\n          console.log(_.sample([1, 2, 3, 4]))\n        }}\n      />\n    </>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["注意：",(0,s.jsx)(n.code,{children:"onLoad"})," 不能在服务端组件中使用，只能在客户端中使用。而且 ",(0,s.jsx)(n.code,{children:"onLoad"})," 不能和 ",(0,s.jsx)(n.code,{children:"beforeInteractive"})," 一起使用，使用 ",(0,s.jsx)(n.code,{children:"onReady"})," 代替。"]}),"\n",(0,s.jsxs)(n.h3,{id:"6-onready",children:["6. onReady",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-onready",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"某些三方脚本要求用户在脚本完成加载后以及每次组件挂载的时候执行 JavaScript 代码，就比如地图导航。你可以使用 onLoad 属性处理首次加载，使用 onReady 属性处理组件每次重新挂载的时候执行代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/page.js \nimport { useRef } from 'react'\nimport Script from 'next/script'\n \nexport default function Page() {\n  const mapRef = useRef()\n \n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这个例子演示了每次组件挂载时如何重新实例化 Google Maps JS。注意：与 ",(0,s.jsx)(n.code,{children:"onLoad"})," 相同，",(0,s.jsx)(n.code,{children:"onReady"})," 也不能在服务端组件中使用，只能在客户端中使用。"]}),"\n",(0,s.jsxs)(n.h3,{id:"7-onerror",children:["7. onError",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-onerror",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"当脚本加载失败的时候用于捕获错误，此时可以使用 onError 属性处理："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/page.js\nimport Script from 'next/script'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e: Error) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["注意：",(0,s.jsx)(n.code,{children:"onError"})," 不能在服务端组件中使用，只能在客户端中使用。而且 ",(0,s.jsx)(n.code,{children:"onError"})," 也不能和 ",(0,s.jsx)(n.code,{children:"beforeInteractive"})," 一起使用。"]}),"\n",(0,s.jsxs)(n.h3,{id:"8-其他-prop",children:["8. 其他 prop",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-其他-prop",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["原生的 ",(0,s.jsx)(n.code,{children:"<script>"})," 元素有很多 DOM 属性，其他添加在 Script 组件的 prop 都会自动转发给底层的 ",(0,s.jsx)(n.code,{children:"<script>"})," 元素。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// app/page.js\nimport Script from \'next/script\'\n \nexport default function Page() {\n  return (\n    <>\n      <Script\n        src="https://example.com/script.js"\n        id="example-script"\n        nonce="XUENAJFW"\n        data-test="script"\n      />\n    </>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/optimizing/scripts",target:"_blank",rel:"noopener noreferrer",children:"Optimizing: Scripts"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/link",target:"_blank",rel:"noopener noreferrer",children:"Components: "})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/components/script",target:"_blank",rel:"noopener noreferrer",children:"Components: "})}),"\n"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let a=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F23.%E7%BB%84%E4%BB%B6%E7%AF%87%20_%20Link%20%E5%92%8C%20Script.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"`<Link>`",id:"link",depth:2},{text:"1. 介绍",id:"1-介绍",depth:3},{text:"2. Props",id:"2-props",depth:3},{text:"3. href（必须）",id:"3-href必须",depth:3},{text:"4. replace",id:"4-replace",depth:3},{text:"5. scroll",id:"5-scroll",depth:3},{text:"6. prefetch",id:"6-prefetch",depth:3},{text:"7. 其他 props",id:"7-其他-props",depth:3},{text:"8. 示例",id:"8-示例",depth:3},{text:"8.1. 链接至动态路由",id:"81-链接至动态路由",depth:4},{text:"8.2 中间件",id:"82-中间件",depth:4},{text:"`<Script>`",id:"script",depth:2},{text:"1. 介绍",id:"1-介绍-1",depth:3},{text:"2. Props",id:"2-props-1",depth:3},{text:"3. src",id:"3-src",depth:3},{text:"4. strategy",id:"4-strategy",depth:3},{text:"5. onLoad",id:"5-onload",depth:3},{text:"6. onReady",id:"6-onready",depth:3},{text:"7. onError",id:"7-onerror",depth:3},{text:"8. 其他 prop",id:"8-其他-prop",depth:3},{text:"参考链接",id:"参考链接",depth:2}],title:"23.组件篇 _ Link 和 Script",headingTitle:"23.组件篇 _ Link 和 Script",frontmatter:{}}}}]);