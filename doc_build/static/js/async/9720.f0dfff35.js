"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["9720"],{840395:function(n,e,s){s.r(e),s.d(e,{default:()=>l});var o=s(552676),t=s(740453);function r(n){let e=Object.assign({p:"p",h2:"h2",a:"a",ul:"ul",li:"li",pre:"pre",code:"code",blockquote:"blockquote"},(0,t.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"在上个课程中，我们简单使用 Webpack 对 Web 应用进行了 JS 的打包构建处理。除此之外，我们还讲解了库构建所需要具备的构建特性，其中按需加载是库构建非常重要的特性，本节课主要讲解如何对工具或者框架库进行按需加载的构建设计。"}),"\n",(0,o.jsxs)(e.h2,{id:"为什么需要按需加载",children:["为什么需要按需加载？",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么需要按需加载",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"在 Web 应用的开发中，通常需要考虑通过打包工具生成 Bundle，理论上 Bundle 越小， HTTP 的请求时间越少，可以在一定程度上增加用户体验。假设在 Web 应用中使用了 Antd 组件库，并且只用到了其中的 Button 组件和 Input 组件，那么在设计时，应该只引入 Button 和 Input 相关的代码，从而避免引入整个组件库带来的构建体积增加，因此在设计库时往往需要考虑按需加载。以下几种情况需要考虑设计按需加载："}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"可以按功能进行拆分（例如组件库），可以按需使用功能；"}),"\n",(0,o.jsx)(e.li,{children:"可以按工具方法进行拆分（例如 Lodash），可以按需使用工具方法；"}),"\n",(0,o.jsx)(e.li,{children:"可以按模块进行拆分（例如 RxJS），可以按需使用模块。"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"当然并不是所有的库都需要实现按需加载，例如以下几种情况可以不考虑按需加载："}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"设计的库足够简单，确定库的体积足够小，不会影响 Web 应用的加载性能；"}),"\n",(0,o.jsx)(e.li,{children:"设计的库功能单一（例如请求库），大部分代码都会被使用；"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"微前端框架库，单从库体积维度来考量，可以不做按需加载设计（例如 qiankun 的设计），当然本课程对微前端框架的设计按功能进行了解耦拆分（应用管理、隔离、性能优化和通信），在工程上考虑做一个按需加载设计，从而可以方便大家按解耦的功能模块进行逐一学习。如果大家在日常的开发中需要设计一个通用的工具库，完全可以参考本小节的设计思路。"}),"\n",(0,o.jsxs)(e.h2,{id:"gulp-构建",children:["Gulp 构建",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#gulp-构建",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["在上节课中，我们重点讲解了库构建的工具选型。为了使构建的库可以进行类型检查和声明文件自动生成，这节课我们会使用 Gulp 配合 ",(0,o.jsx)(e.a,{href:"https://github.com/ivogabe/gulp-typescript",target:"_blank",rel:"noopener noreferrer",children:"gulp-typescript"})," 实现库构建能力。"]}),"\n",(0,o.jsx)(e.p,{children:"Gulp 的流式构建可以很好地为多文件构建进行服务，各个文件可以通过构建管道进行重复构建，从而保证源文件目录和目标文件目录一一映射，这正是库设计中按需加载非常重要的一个构建特性。例如构建工具中的微前端框架目录设计："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"├── src                            \n│   ├── index.js                 \n│   ├── core                     \n│   │   └── core.js              \n│   ├── sandbox                   \n│   │   ├── sandbox1.js          \n│   │   ├── sandbox2.js          \n│   │   └── sandbox3.js                      \n│   ├── opt                      \n│   │   ├── opt1.js              \n│   │   └── opt2.js              \n│   └── comm                     \n│       ├── comm1.js              \n│       └── comm2.js              \n├── gulpfile.js                   \n├── tsconfig.json                 \n└── package.json                  \n"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：示例源码可以从 ",(0,o.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/gulp-build",target:"_blank",rel:"noopener noreferrer",children:"demo/gulp-build"})," 分支获取。"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"在上述文件目录下，可以简单新增 Gulp 构建来实现："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// gulpfile.js\nconst gulp = require("gulp");\nconst ts = require("gulp-typescript");\nconst merge = require("merge2");\n\nconst task = {\n  // 构建 CommonJS 模块化规范\n  commonjs: {\n    name: "build commonjs",\n    tsconfig: {\n      // 指定输出的模块化标准，例如课程中常说的 CommonJS 和 ES Modules（ES2015/ES6/ES2020）\n      // 中文查看（模块概念）：https://www.tslang.cn/docs/handbook/modules.html\n      // 英文查看（模块编译示例）：https://www.typescriptlang.org/tsconfig/#module\n      module: "CommonJS",\n      // 指定输出的 JS 标准（ES3/ES5/ES6/.../ESNext）\n      // 在课程中已经讲解 ES5 能够兼容大部分的浏览器\n      target: "ES5",\n    },\n    dest: "lib/commonjs",\n  },\n  \n  // 构建 ES Module 模块化规范\n  esmodule: {\n    name: "build esmodule",\n    // 发布的 NPM 库包导入导出使用的是 ES Modules 规范，其余代码都是 ES5 标准\n    // 使用 ES Modules 规范可以启用 Tree Shaking \n    // 输出 ES5 标准是为了配置 Babel 时可以放心屏蔽 node_modules 目录的代码转译\n    tsconfig: {\n      module: "ESNext",\n      target: "ES5",\n    },\n    dest: "lib/es",\n  },\n};\n\nfunction build(task) {\n  const tsProject = ts.createProject("tsconfig.json", task.tsconfig);\n  // tsProject.src() 默认会基于 tsconfig.json 中的 files、exclude 和 include 指定的源文件进行编译\n  const tsResult = tsProject.src().pipe(tsProject());\n  const tsDest = gulp.dest(task.dest, { overwrite: true });\n  return merge([tsResult.dts.pipe(tsDest), tsResult.js.pipe(tsDest)]);\n}\n\ngulp.task(task.commonjs.name, () => build(task.commonjs));\ngulp.task(task.esmodule.name, () => build(task.esmodule));\ngulp.task("default", gulp.parallel([task.commonjs.name, task.esmodule.name]));\n\n\n// tsconfig.json\n// 中文查看：https://www.tslang.cn/docs/handbook/tsconfig-json.html\n// 英文查看：https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n{\n  "compilerOptions": {\n    // 模块解析策略：Node 和 Classic\n    // 中文查看：https://www.tslang.cn/docs/handbook/module-resolution.html\n    // 英文查看：https://www.typescriptlang.org/docs/handbook/module-resolution.html\n    // 一般情况下都是使用 Node，简单理解为参考 Node 的 require 算法解析引入模块的路径\n    "moduleResolution": "node",\n    // 允许从没有设置默认导出的模块中默认导入\n    "allowSyntheticDefaultImports": true,\n    // 删除所有注释，除了以 /!* 开头的版权信息\n    "removeComments": true,\n    // 生成相应的 .d.ts 声明文件\n    "declaration": true,\n    // 启用所有严格类型检查选项。启用 --strict 相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict， --strictNullChecks, --strictFunctionTypes 和 --strictPropertyInitialization\n    "strict": true,\n    // 禁止对同一个文件的不一致的引用\n    "forceConsistentCasingInFileNames": true,\n    // 报错时不生成输出文件\n    "noEmitOnError": true,\n    // 编译过程中需要引入的库文件的列表，其实就是开发态语法的支持程度配置\n    "lib": ["DOM", "ES2015.Promise", "ES6", "ESNext"],\n    // 允许使用 import 代替 import *\n    // 英文查看：https://www.typescriptlang.org/tsconfig#esModuleInterop\n    "esModuleInterop": true,\n    "module": "CommonJS",\n    // 解析非相对模块名的基准目录\n    "baseUrl": ".",\n    // 将每个文件作为单独的模块\n    "isolatedModules": true,\n    // 允许引入 .json 扩展的模块文件\n    "resolveJsonModule": true,\n    // 启动 decorators\n    "experimentalDecorators": true\n  },\n  // 编译器包含的文件列表，可以使用 glob 匹配模式\n  "include": ["src/**/*"],\n  // 编译器排除的文件列表\n  "exclude": ["node_modules"]\n}\n\n\n// package.json\n "scripts": {\n    "build": "gulp"\n },\n'})}),"\n",(0,o.jsxs)(e.p,{children:["执行 ",(0,o.jsx)(e.code,{children:"npm run build"})," 进行构建，构建后会在 ",(0,o.jsx)(e.code,{children:"lib"})," 目录下生成 ",(0,o.jsx)(e.code,{children:"commonjs"})," 和 ",(0,o.jsx)(e.code,{children:"es"})," 两个文件夹，分别代表生成 CommonJS 和 ESModule 模块化规范的输出："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"[09:00:22] Using gulpfile ~/Desktop/Github/micro-framework/gulpfile.js\n[09:00:22] Starting 'default'...\n[09:00:22] Starting 'build commonjs'...\n[09:00:22] Starting 'build esmodule'...\n[09:00:24] Finished 'build esmodule' after 1.55 s\n[09:00:24] Finished 'build commonjs' after 1.55 s\n[09:00:24] Finished 'default' after 1.56 s\n"})}),"\n",(0,o.jsx)(e.p,{children:"生成的目录结构如下所示："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"lib\n├── commonjs                      \n│   ├── index.js                 \n│   ├── index.d.ts               \n│   ├── core                     \n│   │   ├── core.d.ts           \n│   │   └── core.js              \n│   ├── sandbox                   \n│   │   ├── sandbox1.d.ts       \n│   │   ├── sandbox1.js          \n│   │   ├── sandbox2.d.ts       \n│   │   ├── sandbox2.js          \n│   │   ├── sandbox3.d.ts       \n│   │   └── sandbox3.js                    \n│   ├── opt                      \n│   │   ├── opt1.d.ts           \n│   │   ├── opt1.js              \n│   │   ├── opt2.d.ts           \n│   │   └── opt2.js              \n│   └── comm                     \n│       ├── comm1.d.ts           \n│       ├── comm1.js              \n│       ├── comm2.d.ts           \n│       └── comm2.js              \n├── es                            \n│   ├── index.js                 \n│   ├── index.d.ts               \n│   ├── core                     \n│   │   ├── core.d.ts           \n│   │   └── core.js              \n│   ├── sandbox                   \n│   │   ├── sandbox1.d.ts       \n│   │   ├── sandbox1.js          \n│   │   ├── sandbox2.d.ts       \n│   │   ├── sandbox2.js          \n│   │   ├── sandbox3.d.ts       \n│   │   └── sandbox3.js                 \n│   ├── opt                      \n│   │   ├── opt1.d.ts           \n│   │   ├── opt1.js              \n│   │   ├── opt2.d.ts           \n│   │   └── opt2.js              \n│   └── comm                     \n│       ├── comm1.d.ts           \n│       ├── comm1.js              \n│       ├── comm2.d.ts           \n│       └── comm2.js              \n"})}),"\n",(0,o.jsxs)(e.p,{children:["此时可以将整个构建的 ",(0,o.jsx)(e.code,{children:"lib"})," 目录发布成 NPM 库包，并在 ",(0,o.jsx)(e.code,{children:"lib"})," 目录下新增 ",(0,o.jsx)(e.code,{children:"package.json"}),"："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'// 可以设计构建脚本将 lib 目录平级的 package.json 拷贝到 lib 目录下\n{\n  "name": "micro-framework",\n  "version": "1.0.0",\n  "description": "",\n  \n  // 设置 CommonJS 的默认引入路径（不支持 Tree Shaking）\n  "main": "./commonjs/index.js",\n  \n  // 设置 ES Modules 的默认引入路径（支持 Tree Shaking）\n  // 注意这里发布的包的规范：导入导出使用 ES Modules 规范，其余都是 ES5 语法\n  "module": "./es/index.js",\n  \n  "scripts": {\n    "build": "gulp"\n  },\n  "repository": {\n    "type": "git",\n    "url": "git+https://github.com/ziyi2/micro-framework.git"\n  },\n  "author": "",\n  "license": "ISC",\n  "bugs": {\n    "url": "https://github.com/ziyi2/micro-framework/issues"\n  },\n  "homepage": "https://github.com/ziyi2/micro-framework#readme",\n  "dependencies": {\n    "@types/lodash": "^4.14.191",\n    "lodash": "^4.17.21"\n  },\n  "devDependencies": {\n    "gulp": "^4.0.2",\n    "gulp-typescript": "^6.0.0-alpha.1",\n    "merge2": "^1.4.1",\n    "typescript": "^4.9.5"\n  }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"发布 NPM 包后，可以在 Web 应用中通过如下方式进行引入："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// 总体引入方式\n// Web 应用所在打包工具如果支持识别 package.json 中的 module 字段，会优先使用 ES Modules 模块规范，并启用 Tree Shaking\n// Web 应用所在打包工具如果不支持识别 package.json 中的 module 字段，那么默认会识别 main 字段启用 CommonJS 规范\nimport micro from 'micro-framework' \n\n// 按需引入方式\nimport sandbox1 from 'micro-framework/commonjs/sandbox/sandbox1'\nimport sandbox1 from 'micro-framework/es/sandbox/sandbox1'\n"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：哪些打包工具可以识别 ",(0,o.jsx)(e.code,{children:"package.json"})," 中的 ",(0,o.jsx)(e.code,{children:"module"})," 字段呢？"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"可以发现按需引入的方式没有 Lodash 来的简单方便，需要识别多层目录结构，那么是否可以设计一个构建脚本，将目录结构进行平铺发布呢？接下来的课程可能属于定制化内容，不算是一种通用的设计结构，感兴趣的同学可以继续了解。"}),"\n",(0,o.jsxs)(e.h2,{id:"平铺构建",children:["平铺构建",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#平铺构建",children:"#"})]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"温馨提示：没有调研社区是否有类似的 Gulp 插件可以实现平铺，这里通过手动设计加深大家对于构建设计的理解，从而可以设计更加定制的构建脚本。平铺构建并不一定适合微前端框架的设计，但是非常适合类似于 Lodash 的工具库设计。"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"如果大家希望将按需引入的路径变得更加简洁，例如："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// CommonJS 按需引入方式（类似于 Lodash 的引入方式）\n// 原有引入方式：import sandbox1 from 'micro-framework/commonjs/sandbox/sandbox1'\nimport sandbox1 from 'micro-framework/sandbox1'\n// ES Modules 按需引入\n// 原有引入方式：import sandbox1 from 'micro-framework/es/sandbox/sandbox1'\nimport sandbox1 from 'micro-framework-es/sandbox1'\n"})}),"\n",(0,o.jsx)(e.p,{children:"此时可以将微前端框架库像 Lodash 一样发布成两个 NPM 库包，一个库包（micro-framework）支持 CommonJS 规范，另外一个库包（micro-framework-es）支持 ES Modules 规范，从而可以让开发者自主进行库包选择。"}),"\n",(0,o.jsxs)(e.p,{children:["为了实现上述功能，需要设计一个构建脚本，该脚本能够平铺目录结构。这里对 Gulp 构建进行更改，新增 Node.js 构建脚本和构建参数，从而可以包裹原有的 ",(0,o.jsx)(e.code,{children:"gulp"})," 构建命令："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "main": "index.js",\n  "scripts": {\n    // package.json 下原有的构建命令\n    // "build": "gulp"\n    // 将其更改为使用 Node 脚本执行构建\n    "build": "ts-node build/build.ts"\n  },\n  // https://docs.npmjs.com/cli/v8/configuring-npm/package-json#config\n  // 构建配置，可以在代码中通过 process.env.xxx 获取\n  // 这里可以额外扩展其他构建配置项\n  "config": {\n    // 是否平铺\n    "flat": true\n  },\n  \n  // 由于需要设计 Node.js 脚本，这里用于安装依赖时提示 Node.js 版本要求\n  "engines": { "node": ">=16.18.1" },\n  "engineStrict": true\n}\n'})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示： 借助 ts-node 可以使用 TypeScript 设计构建脚本。示例源码可以从 ",(0,o.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/gulp-build-flat",target:"_blank",rel:"noopener noreferrer",children:"demo/gulp-build-flat"})," 分支获取。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["为了支持使用 ts-node，需要在 ",(0,o.jsx)(e.code,{children:"tsconfig.json"})," 中配置对 Node 的支持："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'// tsconfig.json\n// 中文查看：https://www.tslang.cn/docs/handbook/tsconfig-json.html\n// 英文查看：https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n{\n  // ts-node 文档：https://github.com/TypeStrong/ts-node\n  // tsconfig extends：https://github.com/tsconfig/bases\n  "extends": "ts-node/node16/tsconfig.json",\n\n  "compilerOptions": {\n    // 模块解析策略：Node 和 Classic\n    // 中文查看：https://www.tslang.cn/docs/handbook/module-resolution.html\n    // 英文查看：https://www.typescriptlang.org/docs/handbook/module-resolution.html\n    // 一般情况下都是使用 Node，简单理解为参考 Node 的 require 算法解析引入模块的路径\n    "moduleResolution": "node",\n    // 允许从没有设置默认导出的模块中默认导入\n    "allowSyntheticDefaultImports": true,\n    // 删除所有注释，除了以 /!* 开头的版权信息\n    "removeComments": true,\n    // 生成相应的 .d.ts文件\n    "declaration": true,\n    // 启用所有严格类型检查选项。启用 --strict 相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict， --strictNullChecks, --strictFunctionTypes 和 --strictPropertyInitialization\n    "strict": true,\n    // 禁止对同一个文件的不一致的引用\n    "forceConsistentCasingInFileNames": true,\n    // 报错时不生成输出文件\n    "noEmitOnError": true,\n    // 编译过程中需要引入的库文件的列表\n    "lib": ["DOM", "ES2015.Promise", "ES6", "ESNext"],\n    // 允许使用 import 代替 import *\n    // 英文查看：https://www.typescriptlang.org/tsconfig#esModuleInterop\n    "esModuleInterop": true,\n    "module": "CommonJS",\n    // 解析非相对模块名的基准目录\n    "baseUrl": ".",\n    // 将每个文件作为单独的模块\n    "isolatedModules": false,\n    // 允许引入 .json 扩展的模块文件\n    "resolveJsonModule": true,\n    // 启动 decorators\n    "experimentalDecorators": true\n  },\n  // 编译器包含的文件列表，可以使用 glob 匹配模式\n  "include": ["src/**/*"],\n  // 编译器排除的文件列表\n  "exclude": ["node_modules"]\n}\n\n'})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：如果使用的是 Node 其他版本，可以查看 ",(0,o.jsx)(e.a,{href:"https://github.com/tsconfig/bases",target:"_blank",rel:"noopener noreferrer",children:"Centralized Recommendations for TSConfig bases"})," 的相关配置。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["将所有的构建和发布脚本放置在文件夹 ",(0,o.jsx)(e.code,{children:"build"})," 下，方便后续的维护管理。构建脚本的目录结构设计如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"build\n├── base.ts                      # 可以被构建、发布等脚本进行继承使用\n├── build.ts                     # 构建脚本\n├── config.ts                    # 配置，主要被 base 进行消费\n├── gulpfile.ts                  # Gulp 构建配置文件\n└── type.ts                      # 接口、枚举说明\n"})}),"\n",(0,o.jsxs)(e.p,{children:["接下来重点看一下平铺构建目录的脚本设计，",(0,o.jsx)(e.code,{children:"type.ts"})," 用于声明类型："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// type.ts\nimport { Settings } from "gulp-typescript";\n\nexport enum TargetTypeEnum {\n  CommonJS = "CommonJS",\n  ESModule = "ESModule",\n}\n\nexport interface ITarget {\n  name: string;\n  type: TargetTypeEnum;\n  tsconfig: Settings;\n  dest: string;\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"config.ts"})," 用于配置 Gulp 构建任务的信息："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// config.ts\nimport path from "path";\nimport { TargetTypeEnum } from "./type";\n\n// 输出规范的目标集（这里可能命名成 gulpTasks 更合适）\nexport const targets = [\n  {\n    name: "build commonjs",\n    type: TargetTypeEnum.CommonJS,\n    tsconfig: {\n      // 指定输出的模块化标准，例如课程中常说的 CommonJS 和 ES Modules（ES2015/ES6/ES2020）\n      // 中文查看（模块概念）：https://www.tslang.cn/docs/handbook/modules.html\n      // 英文查看（模块编译示例）：https://www.typescriptlang.org/tsconfig/#module\n      module: "CommonJS",\n      // 指定输出的 JS 标准（ES3/ES5/ES6/.../ESNext）\n      // 在课程中已经讲解 ES5 能够兼容大部分的浏览器\n      target: "ES5",\n    },\n    dest: path.join(__dirname, "../lib/commonjs"),\n  },\n  {\n    name: "build esmodule",\n    type: TargetTypeEnum.ESModule,\n    tsconfig: {\n      // 模块化输出 ES Modules 规范，其余代码编译成 ES5 标准\n      module: "ES2015",\n      target: "ES5",\n    },\n    dest: path.join(__dirname, "../lib/es"),\n  },\n];\n\n'})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"base.ts"})," 可以被构建和发布脚本（后续课程设计）共享："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'\n// base.ts\nimport path from "path";\nimport { targets } from "./config";\nimport { ITarget } from "./type";\n\nexport class Base {\n  public rootPath: string = "";\n  public destPaths: string[] = [];\n\n  constructor() {\n    this.rootPath = path.join(__dirname, "../");\n    this.destPaths = targets.map((target) => target.dest);\n  }\n\n  getTargets(): ITarget[] {\n    return targets;\n  }\n\n  // 是否需要平铺\n  isFlat() {\n    // package.json 中的 config 参数\n    // https://docs.npmjs.com/cli/v8/configuring-npm/package-json#config\n    return process.env.npm_package_config_flat;\n  }\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"gulpfile.ts"})," 是 Gulp 的配置文件："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// gulpfile.ts\nimport gulp from "gulp";\nimport ts from "gulp-typescript";\nimport merge2 from "merge2";\nimport { Base } from "./base";\nimport { ITarget } from "./type";\n\nclass GulpBuild extends Base {\n  constructor() {\n    super();\n  }\n\n  build(target: ITarget) {\n    const tsProject = ts.createProject("../tsconfig.json", target.tsconfig);\n    // tsProject.src() 默认会基于 tsconfig.json 中的 files、exclude 和 include 指定的源文件进行编译\n    const tsResult = tsProject.src().pipe(tsProject());\n    const tsDest = gulp.dest(target.dest, { overwrite: true });\n    return merge2([tsResult.dts.pipe(tsDest), tsResult.js.pipe(tsDest)]);\n  }\n\n  run() {\n    const targets = this.getTargets();\n    targets.forEach((target) =>\n      gulp.task(target.name, () => this.build(target))\n    );\n    gulp.task("default", gulp.parallel(targets.map((target) => target.name)));\n  }\n}\n\nnew GulpBuild().run();\n'})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"build.ts"})," 是核心的构建脚本，它首先会清空构建目录，其次会同步执行 ",(0,o.jsx)(e.code,{children:"gulp"})," 命令（指定配置文件为 ",(0,o.jsx)(e.code,{children:"gulpfile.ts"}),"）进行构建，最后对构建后的文件进行平铺处理："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// build.ts\nimport path from "path";\nimport fs from "fs-extra";\nimport shell from "shelljs";\nimport glob from "glob";\nimport { Base } from "./base";\nimport { TargetTypeEnum } from "./type";\n\n// package.json 中的 config 参数\n// https://docs.npmjs.com/cli/v8/configuring-npm/package-json#config\nconst flat = process.env.npm_package_config_flat;\n\nclass Build extends Base {\n  constructor() {\n    super();\n  }\n\n  run() {\n    // 构建初始化\n    this.init();\n    // 同步执行构建\n    this.build();\n    // 平铺构建\n    this.flat();\n  }\n\n  init() {\n    // 清空 lib 目录下的 commonjs 和 es 文件夹\n    this.destPaths?.forEach((destPath) => {\n      fs.removeSync(destPath);\n      fs.emptyDirSync(destPath);\n    });\n  }\n\n  build() {\n    // 构建参数\n    // --gulpfile: 指定 gulpfile.ts 的文件路径\n    // --color: 构建时打印带颜色的日志\n    shell.exec(\n      `gulp --gulpfile ${path.join(__dirname, "gulpfile.ts")} --color `,\n      {\n        // 构建同步执行\n        async: false,\n        // 构建失败则退出进程（例如 TypeScript 类型检查失败），停止后续的平铺构建处理\n        fatal: true,\n      }\n    );\n  }\n\n  flat() {\n    if (!this.isFlat()) {\n      return;\n    }\n\n    // 对 commonjs 规范进行平铺处理（大家可以自行设计一下 ES Modules 的平铺处理）\n    const targets = this.getTargets();\n    const commonjsTarget = targets?.find(\n      (target) => target.type === TargetTypeEnum.CommonJS\n    );\n    if (!commonjsTarget) {\n      return;\n    }\n    const destPath = commonjsTarget.dest;\n    // 同步获取构建目录下的所有文件\n    // 例如：files:  [\n    //     \'lib/commonjs/index.js\',\n    //     \'lib/commonjs/core/core.js\',\n    //     ...\n    //   ]\n    const files = glob.globSync(`${destPath}/**/*.js`);\n\n    // 如果存在相同的文件名称，则清空构建目录，并退出构建处理\n    if (this.hasSameFileName(files)) {\n      this.init();\n      return process.exit(1);\n    }\n\n    // 进行构建文件的平铺处理\n    this.buildFlatFiles(files, destPath);\n\n    // 拷贝声明文件到一级目录下\n    this.copyDeclarationFiles(destPath);\n\n    // 清空构建的子文件夹\n    this.emptyBuildSubDir(destPath);\n  }\n\n  hasSameFileName(files: string[]): boolean {\n    // 目录平铺后必须确保不能产生同名文件，例如 lib/commonjs/index.js 和 lib/commonjs/core/index.js\n    const fileRepeatMap: { [key: string]: string[] } = {};\n    return files.some((file) => {\n      // 将 lib/commonjs/index.js 转化为 index.js\n      const fileName = file.substring(file.lastIndexOf("/") + 1);\n      const fileRepeatArr = fileRepeatMap[fileName];\n      // 存储 index.js 为文件名的文件路径数组，例如 { "index.js": ["lib/commonjs/index.js"] }\n      fileRepeatMap[fileName] = fileRepeatArr\n        ? [...fileRepeatArr, file]\n        : [file];\n      // 如果 index.js 的文件路径存在多个，则提示错误并退出进程，例如 { "index.js": ["lib/commonjs/index.js", "lib/commonjs/core/index.js" ] }\n      if (fileRepeatMap[fileName]?.length > 1) {\n        this.logError(`[编译失败] 编译不允许存在相同的文件名称: ${fileName}`);\n        this.logError(\n          `[编译失败] 相同的文件名称路径：${fileRepeatMap[fileName].join(", ")}`\n        );\n        return true;\n      }\n      return false;\n    });\n  }\n\n  buildFlatFiles(files: string[], destPath: string) {\n    // 如果没有同名文件，则进行文件平铺\n    files.forEach((file) => {\n      // 获取构建文件的目标代码\n      let code = fs.readFileSync(file).toString();\n\n      // 正则说明：\n      // (?<=require(")(.*?)(?=")) 主要分为三部分: (?<=require(")、(.*?)、(?="))\n      // (?<=require("): 反向肯定预查, ?<=pattern, 用于匹配以 require(" 开头的字符串，注意 require(" 是转义后的字符串，匹配的是 require("\n      // (.*?): 用于匹配最短路径的内容，其中 ? 用于非贪婪匹配, * 是贪婪匹配，? 是只能匹配 0 ~ 1 次\n      // (?=")): 正向肯定预查，?=pattern, 用于匹配以 ") 结尾的字符串，注意 ") 是转义后的字符串，匹配的是 ")\n\n      // 正则场景解释:\n      // 例如压缩后的代码： require("./core/core"),fs_1=__importDefault(require("fs")\n      // 通过 (.*) 匹配后默认会匹配到 ./core/core"),fs_1=__importDefault(require("fs\n      // 通过 (.*?) 匹配后默认会匹配到 ./core/core 和 fs\n      // 其中 ? 的作用用于贪婪匹配中的 0 ~ 1 次, 从而阻止了 * 的 0 ~ n 次贪婪匹配\n\n      // 平铺目录后需要将引入路径进行更改，因为平铺后目标文件的位置发送了变化，因此被引用的路径也需要改变\n      // 例如在 src/index.ts 中需要引入 core/core.ts，使用 gulp 构建后是 require("./core/core");\n      // 但是目录平铺之后 index.js 和 core.js 同级，因此希望将目标代码更改为 require("./core"); 需要去掉中间的目录路径 core\n\n      //   ├── src\n      //   │   ├── core/\n      //   │   │   ├── core1/\n      //   │   │   │   └── core1.ts\n      //   │   │   └── core.ts\n      //   │   └── index.ts\n      //   ├── lib\n      //   │   ├── commonjs/\n      //   │   │   ├── package.json\n      //   │   │   ├── core.ts\n      //   │   │   ├── core1.ts\n      //   │   │   └── index.ts\n\n      // 转换引入路径，例如: require(\'./core/core\') => require(\'./core\')\n      code = code.replace(/(?<=require(")(.*?)(?="))/g, (match) => {\n        if (!match) {\n          return match;\n        }\n        // 例如： match = \'./core/core\'\n        const paths = match.split("/");\n        // 获取文件名\n        const fileName = paths.concat().pop();\n        // 不需要更改的引用路径的情况，例如 require("lodash")\n        if (!fileName || paths.length === 1) {\n          return match;\n        }\n        this.logInfo(\n          `[编译信息] 在文件 ${file} 中匹配和替换的 require 路径: ${match} => ./${fileName}`\n        );\n        // 平铺后直接引入同级目录下的文件\n        return `./${fileName}`;\n      });\n\n      // TODO: 如果需要生成 sourcemap，则 sourcemap 的路径也需要处理\n\n      // 删除当前目录下的目标文件，例如 lib/commonjs/core/core.js\n      fs.rmSync(file);\n\n      // 将 lib/commonjs/core/core.js 转化为 lib/commonjs/core.js\n      const fileName = file.substring(file.lastIndexOf("/") + 1);\n      // 生成平级文件的写入路径\n      const fileOutputPath = path.join(destPath, fileName);\n      // 写入更改后的目标代码\n      fs.writeFileSync(fileOutputPath, code);\n    });\n  }\n\n  copyDeclarationFiles(destPath: string) {\n    const files = glob.globSync(`${destPath}/**/*.d.ts`);\n    files.forEach((file) => {\n      // 将 lib/commonjs/index.js 转化为 index.js\n      const fileName = file.substring(file.lastIndexOf("/") + 1);\n      if (file !== path.join(destPath, fileName)) {\n        fs.copySync(file, path.join(destPath, fileName));\n        fs.rmSync(file);\n      }\n    });\n  }\n\n  emptyBuildSubDir(destPath: string) {\n    // 平铺完成后，匹配文件夹并删除空的文件夹\n    // 匹配文件夹：to match only directories, simply put a / at the end of the pattern.\n    // 反转以后可以从内到外进行文件夹删除（先删除内部的子文件夹）\n    const dirs = glob.globSync(`${destPath}/**/`).reverse();\n\n    dirs.forEach((dir) => {\n      const subdirs = fs.readdirSync(dir);\n      // 如果文件夹为空，则删除文件夹（注意从内到外进行删除，core/core1 的情况下先删除 core1 文件夹，再删除 core 文件夹）\n      if (!subdirs?.length) {\n        fs.rmdirSync(dir);\n      }\n    });\n  }\n}\n\nnew Build().run();\n'})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["温馨提示：如果 ",(0,o.jsx)(e.code,{children:"build"})," 目录的设计非常通用，可以发布成 NPM 包进行处理（例如 create-react-app 中的 ",(0,o.jsx)(e.a,{href:"https://github.com/facebook/create-react-app/tree/main/packages/react-scripts",target:"_blank",rel:"noopener noreferrer",children:"react-scripts"}),"），从而可以在各种需要快速创建按需加载的工具库项目中进行构建脚本的复用。除此之外，如果构建脚本的参数非常多，也可以将构建参数提供成配置文件的方式，例如在项目根目录中提供一个 ",(0,o.jsx)(e.code,{children:"ziyi-sdk.config.js"}),"，从而可以在构建脚本中引入声明的配置文件进行构建配置读取。"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["上述构建脚本 ",(0,o.jsx)(e.code,{children:"build.ts"})," 主要做了几件事情："]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["构建脚本的参数处理，例如 ",(0,o.jsx)(e.code,{children:"flat"})," 配置，从而可以满足更灵活的需求；"]}),"\n",(0,o.jsx)(e.li,{children:"使用 shelljs 同步执行 gulp 构建命令；"}),"\n",(0,o.jsx)(e.li,{children:"构建完成后进行构建目录的平铺处理，从而简化按需引入的路径。"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["执行 ",(0,o.jsx)(e.code,{children:"npm run build"})," 后可以进行构建处理，如下所示："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:" npm run build\n\n> micro-framework@1.0.0 build\n> ts-node build/build.ts\n\n[09:06:56] Requiring external module ts-node/register\n[09:06:56] Working directory changed to ~/Desktop/Github/micro-framework/build\n[09:06:57] Using gulpfile ~/Desktop/Github/micro-framework/build/gulpfile.ts\n[09:06:57] Starting 'default'...\n[09:06:57] Starting 'build commonjs'...\n[09:06:57] Starting 'build esmodule'...\n[09:06:58] Finished 'build esmodule' after 709 ms\n[09:06:58] Finished 'build commonjs' after 710 ms\n[09:06:58] Finished 'default' after 711 ms\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js 中匹配和替换的 require 路径:  ./comm/comm1 => ./comm1\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js 中匹配和替换的 require 路径:  ./comm/comm2 => ./comm2\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js 中匹配和替换的 require 路径:  ./core/core => ./core\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js 中匹配和替换的 require 路径:  ./nav/nav => ./nav\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js 中匹配和替换的 require 路径:  ./opt/opt1 => ./opt1\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js 中匹配和替换的 require 路径:  ./opt/opt2 => ./opt2\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js 中匹配和替换的 require 路径:  ./sandbox/sandbox1 => ./sandbox1\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js 中匹配和替换的 require 路径:  ./sandbox/sandbox2 => ./sandbox2\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js 中匹配和替换的 require 路径:  ./sandbox/sandbox3 => ./sandbox3\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/core/core.js 中匹配和替换的 require 路径:  ./core1/core1 => ./core1\n"})}),"\n",(0,o.jsxs)(e.p,{children:["此时会在 ",(0,o.jsx)(e.code,{children:"lib"})," 目录下生成 ",(0,o.jsx)(e.code,{children:"commonjs"})," 和 ",(0,o.jsx)(e.code,{children:"es"})," 文件目录，其中 ",(0,o.jsx)(e.code,{children:"commonjs"})," 做了平铺处理："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# 29.工程设计：按需加载\nlib\n├── commonjs                      \n│   ├── index.js                 \n│   ├── index.d.ts               \n│   ├── core                     \n│   │   ├── core.d.ts           \n│   │   └── core.js              \n│   ├── sandbox                   \n│   │   ├── sandbox1.d.ts        \n│   │   ├── sandbox1.js          \n│   │   ├── sandbox2.d.ts        \n│   │   ├── sandbox2.js          \n│   │   ├── sandbox3.d.ts        \n│   │   └── sandbox3.js                      \n│   ├── opt                      \n│   │   ├── opt1.d.ts           \n│   │   ├── opt1.js              \n│   │   ├── opt2.d.ts           \n│   │   └── opt2.js              \n│   └── comm                     \n│       ├── comm1.d.ts           \n│       ├── comm1.js              \n│       ├── comm2.d.ts           \n│       └── comm2.js              \n\n\n# 平铺后\nlib\n├── commonjs                      \n│   ├── comm1.d.ts                \n│   ├── comm1.js                  \n│   ├── comm2.d.ts                \n│   ├── comm2.js                  \n│   ├── core.d.ts                \n│   ├── core.js                   \n│   ├── index.d.ts               \n│   ├── index.js     \n│   ├── nav.d.ts                 \n│   ├── nav.js    \n│   ├── op1.d.ts   \n│   ├── op1.js\n│   ├── op2.d.ts  \n│   ├── op2.js\n│   ├── sandbox1.d.ts\n│   ├── sandbox1.js  \n│   ├── sandbox2.d.ts\n│   ├── sandbox2.js  \n│   ├── sandbox3.d.ts\n│   └── sandbox3.js  \n"})}),"\n",(0,o.jsxs)(e.p,{children:["需要注意，在设计的过程中一定要考虑检查同名文件，因为在 ",(0,o.jsx)(e.code,{children:"commonjs"})," 下平铺后不应该存在两个同名文件，例如："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"├── src                            \n│   ├── index.js                 \n│   ├── core                     \n│   │    └── index.js  # 同名文件，和 src/index.js 同名\n"})}),"\n",(0,o.jsx)(e.p,{children:"执行构建时，需要将同名文件识别出来，并进行构建失败提醒："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm run build\n\n> micro-framework@1.0.0 build\n> ts-node build/build.ts\n\n[09:40:47] Requiring external module ts-node/register\n[09:40:47] Working directory changed to ~/Desktop/Github/micro-framework/build\n[09:40:48] Using gulpfile ~/Desktop/Github/micro-framework/build/gulpfile.ts\n[09:40:48] Starting 'default'...\n[09:40:48] Starting 'build commonjs'...\n[09:40:48] Starting 'build esmodule'...\n[09:40:48] Finished 'build commonjs' after 641 ms\n[09:40:48] Finished 'build esmodule' after 642 ms\n[09:40:48] Finished 'default' after 643 ms\n[编译失败] 编译不允许存在相同的文件名称: index.js\n[编译失败] 相同的文件名称路径：/Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js, /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/core/index.js\n"})}),"\n",(0,o.jsxs)(e.p,{children:["当然使用 gulp-typescript ，相对于 swc 以及 babel 的好处是可以在构建时进行类型检查，例如在 ",(0,o.jsx)(e.code,{children:"src/index.ts"}),"中新增如下代码："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'function a(b: number) {\n  console.log(b);\n}\n\n// a 函数明显要求传入 number 类型的数据\na("111");\n'})}),"\n",(0,o.jsx)(e.p,{children:"执行构建时，会直接报错并停止构建："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:" npm run build\n\n> micro-framework@1.0.0 build\n> ts-node build/build.ts\n\n[09:49:05] Requiring external module ts-node/register\n[09:49:05] Working directory changed to ~/Desktop/Github/micro-framework/build\n[09:49:06] Using gulpfile ~/Desktop/Github/micro-framework/build/gulpfile.ts\n[09:49:06] Starting 'default'...\n[09:49:06] Starting 'build commonjs'...\n[09:49:06] Starting 'build esmodule'...\n../src/index.ts(15,3): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\nTypeScript: 1 semantic error\nTypeScript: emit failed\n[09:49:06] 'build commonjs' errored after 314 ms\n[09:49:06] Error: TypeScript: Compilation failed\n    at Output.mightFinish (/Users/zhuxiankang/Desktop/Github/micro-framework/node_modules/gulp-typescript/release/output.js:131:43)\n    at Output.finish (/Users/zhuxiankang/Desktop/Github/micro-framework/node_modules/gulp-typescript/release/output.js:123:14)\n    at ProjectCompiler.inputDone (/Users/zhuxiankang/Desktop/Github/micro-framework/node_modules/gulp-typescript/release/compiler.js:97:29)\n    at CompileStream.end (/Users/zhuxiankang/Desktop/Github/micro-framework/node_modules/gulp-typescript/release/project.js:125:31)\n    at DestroyableTransform.onend (/Users/zhuxiankang/Desktop/Github/micro-framework/node_modules/readable-stream/lib/_stream_readable.js:577:10)\n    at Object.onceWrapper (node:events:627:28)\n    at DestroyableTransform.emit (node:events:525:35)\n    at DestroyableTransform.emit (node:domain:552:15)\n    at endReadableNT (/Users/zhuxiankang/Desktop/Github/micro-framework/node_modules/readable-stream/lib/_stream_readable.js:1010:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)\n[09:49:06] 'default' errored after 316 ms\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"小结",children:["小结",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"本节课主要讲解了按需加载的库构建设计，主要利用了 Gulp 配合 gulp-typescript 进行构建处理。除此之外讲解了平铺构建的脚本设计，平铺设计非常适合设计类似于 Lodash 的工具库，从而可以提升开发者的引入使用体验。在下一小节中，我们将重点讲解如何利用构建的脚本进行库的版本发布处理。"})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(r,{...n})}):r(n)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F29.%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD.md"]={toc:[{text:"为什么需要按需加载？",id:"为什么需要按需加载",depth:2},{text:"Gulp 构建",id:"gulp-构建",depth:2},{text:"平铺构建",id:"平铺构建",depth:2},{text:"小结",id:"小结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);