"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["14183"],{73744:function(e,n,s){s.r(n),s.d(n,{default:()=>$});var r=s(552676),c=s(740453);let i=s.p+"static/image/a30326ccec9f84e8a8a172759579dc38.533309ab.webp",d=s.p+"static/image/c5c2d7bc71d867ad0ab1d230605e9a9f.318b6f68.webp",a=s.p+"static/image/320f13a9be9988f21c7de51893b19397.e4e75d4d.webp",l=s.p+"static/image/bd4858c97ca2974737e7be60c5d91955.d8a1e398.webp",h=s.p+"static/image/33a000b0af4e57219a51f755308f690a.26e20618.webp",t=s.p+"static/image/01cf8b7d7c599fd87a9711a3d2d8d329.ab8c1a39.webp",x=s.p+"static/image/65e21f73ccd1102c6331350f80b9df48.efedc31e.webp",p=s.p+"static/image/9a9250acaef94184a5b115c98ada66ad.e5cb8b01.webp",j=s.p+"static/image/fb33fdd9362994b42a40140169283333.364da4de.webp",o=s.p+"static/image/8d361e495d2478b76c7d0438e67a9515.533309ab.webp",g=s.p+"static/image/70dcc7ac33f9a9498e2ea2439cc18e69.deab8b3a.webp",m=s.p+"static/image/34c7da032182bab388452a9a87d2e070.fe1c59ce.webp",b=s.p+"static/image/f84d09519aaf2dea3f0170eabd72bade.91ba8f3c.webp",f=s.p+"static/image/b7e36f62bc4ead96425895050ada696d.70530f6c.webp",u=s.p+"static/image/43ecb5f5b5317c5719d74d28f6283794.7b656319.webp",w=s.p+"static/image/54eda33d128399410b74dc0501b37e6d.707c1fad.webp",N=s.p+"static/image/b7a137d1aab11c192898037dbf21b978.7c75f31b.webp",S=s.p+"static/image/0ed8fb2cdadee3147f1fabb9b3b71248.e9cf316a.webp",_=s.p+"static/image/eef2065378c01f66093b6617d48759a6.eb9075f1.webp",y=s.p+"static/image/42e2887019fe1fb84ada25daccb62bf1.3ce3bead.webp",v=s.p+"static/image/7bf8e7f0f7bd4d543d53cf6630c49187.5a345a52.webp",P=s.p+"static/image/4842ff6bd0c4c44662a5663557b3e8d3.d3557556.webp",T=s.p+"static/image/3d337b66bb1f38a16fe79a2f219380e4.a06f411c.webp",A=s.p+"static/image/fb30ab8d2d9d096137395f199fa74fc6.aaba0eb6.webp",k=s.p+"static/image/493a657506647e6afe68f58c4a145f96.f2a4dbff.webp",E=s.p+"static/image/17fbf7108c2ef345fa849b83ffb41853.6e8e64ca.webp",L=s.p+"static/image/20ab54a3f86e5f2256e6fb9c18abbce8.f022f494.webp",H=s.p+"static/image/28a60ad728393dfdb4296f0b4423005b.d785d112.webp",M=s.p+"static/image/09de5feaa5115980de3272ad7504a01f.d9f4e2c0.webp",R=s.p+"static/image/e5dd13ed3d0903b744305d4c4acce9b5.11d0c024.webp",C=s.p+"static/image/e1fd51a4c0860ec8ddebe00dc43fbf3b.5fbbc07d.webp",U=s.p+"static/image/44b898775b07c0a45309b8f707cae232.d6943ecb.webp",D=s.p+"static/image/91f36418da1caf892f6c42e0596418fe.9e6e72bf.webp",F=s.p+"static/image/dd79539cfc6488286f85dcb56c2f6174.1eb600e4.webp",I=s.p+"static/image/048a69ef783a132e259af736487456db.9bfb9e4f.webp",q=s.p+"static/image/19808a7e298775adb02a129ca756cb2b.7aa29223.webp",B=s.p+"static/image/23813d95e66c9a37e47b3ea834250569.5a02f7cf.webp",G=s.p+"static/image/8b5c67377d043db906205415950c94a2.5eee7f7c.webp",Q=s.p+"static/image/79bb08d7595f446c309e511cc5341f05.9bb74b26.webp",z=s.p+"static/image/c3e3e56655fc671cba2a51fb560f4472.5ff841e6.webp",O=s.p+"static/image/c8e749f72d2dc04c0a669f71922ad38b.1eb600e4.webp",X=s.p+"static/image/cc3dcba0b145b0a7a6cda8461935ab9e.ec5fe79f.webp",V=s.p+"static/image/276f4eda605e4784461c041cea99ebe0.4cc09f75.webp",W=s.p+"static/image/0af69c2d9d4601fcb2d406ef5fba1ede.82b02c81.webp",K=s.p+"static/image/7b944628152cfe3fdaf30e7206e526f8.983fdcc2.webp";function Y(e){let n=Object.assign({h2:"h2",a:"a",p:"p",ol:"ol",li:"li",code:"code",h3:"h3",strong:"strong",img:"img",pre:"pre"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"假设我们的项目做完了，现在该部署上线了。你有两个方向可以选择："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"部署到 Vercel"}),"\n",(0,r.jsx)(n.li,{children:"部署到自己的服务器"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"因为网络原因，国内无法直接访问 Vercel 。假如你要部署到自己的服务器，你有三种选择："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"使用 Node.js Server"}),"\n",(0,r.jsx)(n.li,{children:"使用 Docker Image"}),"\n",(0,r.jsxs)(n.li,{children:["使用",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309078383263989786",target:"_blank",rel:"noopener noreferrer",children:"静态导出"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["其中使用 Node.js Server，也就是我们目前开发的这种方式，主要步骤是将代码部署到服务器上，然后运行",(0,r.jsx)(n.code,{children:"npm run start"})," 启动 Node.js Server，适用于全栈项目。使用 Docker Image 的方式我们会在下篇文章讲到。静态导出适用于纯前端项目，在本地构建导出后，将构建的内容部署到服务器上。"]}),"\n",(0,r.jsx)(n.p,{children:"本篇我们讲讲如何以 Node.js Server 的方式部署到自己的服务器上。我们先从买一个服务器开始说起。"}),"\n",(0,r.jsxs)(n.h2,{id:"服务器",children:["服务器",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#服务器",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"买个服务器",children:["买个服务器",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#买个服务器",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在我们买个服务器，这里我们以目前市场占有率第一的",(0,r.jsx)(n.strong,{children:"阿里云服务器"}),"为例，购买可以参考 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/post/7049692191110725645",target:"_blank",rel:"noopener noreferrer",children:"《一篇从购买服务器到部署博客代码的详细教程》"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"假设我们已经买完了，得到了一个全新的服务器："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:K,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["注：当然你也可以重置一个服务器，此过程叫做“云服务器初始化”，是指将云服务器恢复到最初创建的状态，类似手机的恢复出厂设置。因为阿里云服务器数据是保存在云盘上的，所以这个过程也叫做",(0,r.jsx)(n.strong,{children:"重新初始化云盘"}),"，具体操作参考阿里云文档",(0,r.jsx)(n.a,{href:"https://www.alibabacloud.com/help/zh/ecs/user-guide/re-initialize-a-system-disk",target:"_blank",rel:"noopener noreferrer",children:"《重新初始化系统盘》"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"获取登录密码",children:["获取登录密码",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#获取登录密码",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["首先要做的应该是重置密码。根据阿里云文档的",(0,r.jsx)(n.a,{href:"https://help.aliyun.com/zh/ecs/user-guide/reset-the-logon-password-of-an-instance",target:"_blank",rel:"noopener noreferrer",children:"《重置密码操作说明》"}),"，重置一下密码，否则我们无法登陆服务器。"]}),"\n",(0,r.jsxs)(n.h3,{id:"登陆服务器",children:["登陆服务器",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#登陆服务器",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"获取密码后，我们尝试用命令行的方式登陆服务器："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 47.实战篇 _ React Notes _ 服务器部署\n\n# 示例：\nssh root@39.100.83.124\n\n# 输入实例登录密码\n# 如果出现 Welcome to Alibaba Cloud Elastic Compute Service ! 表示成功连接到实例。\n"})}),"\n",(0,r.jsx)(n.p,{children:"效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:W,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"当重新登陆的时候，又要输入一次密码，为了能够免密码登陆，我们配置下公钥："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# 在本地起一个终端，获取本地公钥\ncat ~/.ssh/id_rsa.pub\n\n# 登陆服务器，将获取的公钥写入服务器的 authorized_keys\necho "这里修改为你的公钥内容" >> ~/.ssh/authorized_keys\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这样我们再次登陆的时候就不需要输入密码了。注意，我们写入的是 ",(0,r.jsx)(n.code,{children:"~"})," 目录里，这就意味着如果我们切换了用户，是需要再按照这个方式重新配置一遍的。"]}),"\n",(0,r.jsx)(n.p,{children:"登陆后如果我们一段时间没有操作，再操作的时候就会断开连接。为了长时间保持 SSH 会话连接不断开，需要设置下心跳以保持连接，运行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"vim /etc/ssh/sshd_config\n"})}),"\n",(0,r.jsx)(n.p,{children:"添加配置项："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ClientAliveInterval 600      \nClientAliveCountMax 10\nTCPKeepAlive yes\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ClientAliveInterval 600"})," 表示 每 600 秒发送一次请求， 从而保持连接。",(0,r.jsx)(n.code,{children:"ClientAliveCountMax 10"})," 表示服务器发出请求后客户端没有响应的次数达到 10 次，就自动断开连接。所以无响应的 SSH 客户端将在大约 600 x 10 = 6000 秒后断开连接。"]}),"\n",(0,r.jsx)(n.p,{children:"重启 sshd 服务，使配置生效："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"systemctl restart sshd\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"装个宝塔",children:["装个宝塔",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#装个宝塔",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["各种环境（Nginx、Redis、MySQL 等）慢慢装其实也可以，但这里为了简单起见，我们直接装个",(0,r.jsx)(n.a,{href:"https://www.bt.cn/new/index.html",target:"_blank",rel:"noopener noreferrer",children:"宝塔"}),"。宝塔是一款简单好用的 Linux/Windows 服务器运维管理面板。使用宝塔，我们可以快捷的安装环境、查看文件、修改配置等。"]}),"\n",(0,r.jsx)(n.p,{children:"登录服务器后，运行脚本："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"if [ -f /usr/bin/curl ];then curl -sSO https://download.bt.cn/install/install_panel.sh;else wget -O install_panel.sh https://download.bt.cn/install/install_panel.sh;fi;bash install_panel.sh ed8484bec\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这里我们用的是万能安装脚本，适用于不确定使用哪个 Linux 系统版本的情况。其他脚本内容请参考",(0,r.jsx)(n.a,{href:"https://www.bt.cn/new/download.html",target:"_blank",rel:"noopener noreferrer",children:"宝塔的安装说明"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["安装的时候需要输入一个 ",(0,r.jsx)(n.code,{children:"y"}),"进行确认："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:V,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"然后就是等待安装，大概 1 到 2 分钟左右会安装完。安装成功后，你会看到："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:X,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"及时保存这些信息。"})," 出于安全考虑，宝塔使用的端口号是随机生成的端口号，从上图中可以看出，这次端口号开在了 14913，为了能够正常访问，需要在云服务器 ECS 的安全组中开启此端口号。"]}),"\n",(0,r.jsxs)(n.p,{children:["打开",(0,r.jsx)(n.a,{href:"https://ecs.console.aliyun.com/securityGroup/region",target:"_blank",rel:"noopener noreferrer",children:"服务器控制台"}),"："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:O,alt:"截屏2024-01-22 下午5.51.15.png"})}),"\n",(0,r.jsxs)(n.p,{children:["添加此端口号，我们顺便把后面会用到的 ",(0,r.jsx)(n.code,{children:"3000"}),"（项目开启在 3000 端口）、",(0,r.jsx)(n.code,{children:"80"}),"（HTTP 默认端口）、",(0,r.jsx)(n.code,{children:"443"}),"（HTTPS 默认端口）顺便也都开启了："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:z,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"然后打开宝塔给出的外网面板地址，因默认启用自签证书 https 加密访问，浏览器将提示不安全，点击【高级】-【继续访问】或【接受风险并继续】访问。"}),"\n",(0,r.jsx)(n.p,{children:"然后输入命令行中给出的用户名和密码。第一次登录还需要勾选同意协议，并绑定宝塔账号。绑定后，会进入到宝塔的主界面："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Q,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h3,{id:"nginxmysql-与-node",children:["Nginx、MySQL 与 Node",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#nginxmysql-与-node",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["首次登录宝塔的时候，宝塔会给出",(0,r.jsx)(n.strong,{children:"推荐安装套件"}),"提示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:G,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["当然你也可以在",(0,r.jsx)(n.strong,{children:"软件商店"}),"中一一安装："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:"截屏2024-01-22 下午9.28.34.png"})}),"\n",(0,r.jsx)(n.p,{children:"这里我们至少需要把 Nginx 和 MySQL 安装了，至于 FTP、PHP、phpMyAdmin 则视个人情况选择。（我是直接在推荐的时候把 LNMP 都极速安装了。虽说是极速，安装还是需要一会的……）"}),"\n",(0,r.jsx)(n.p,{children:"然后安装 Node 环境。点击宝塔左侧的网站选项，打开 Node 项目，安装 Node 版本管理器："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:q,alt:"截屏2024-01-22 下午7.03.04.png"})}),"\n",(0,r.jsx)(n.p,{children:"如果列表中给出的 Node.js 版本比较老，你可以点击右侧的“更新版本列表”，选择一个合适的版本进行安装，这里我选择的是最新的稳定版 v20.11.0，选择后等待安装成功（安装的时候也会自动安装 PM2 模块）："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:I,alt:"截屏2024-01-23 下午2.48.45.png"})}),"\n",(0,r.jsxs)(n.p,{children:["注意安装完成后，图中的 ",(0,r.jsx)(n.strong,{children:"“命令行版本”"})," 要选择上，如果不选择的话，我们登录服务器，不会有 node 命令，也就是运行 node 相关的命令会报错。"]}),"\n",(0,r.jsxs)(n.h3,{id:"ftp",children:["FTP",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ftp",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果你安装了 FTP，可以使用 ",(0,r.jsx)(n.a,{href:"https://filezilla-project.org/download.php",target:"_blank",rel:"noopener noreferrer",children:"FileZilla"})," 这个 FTP 软件查看、编辑、上传、下载文件。Finder 虽然也可以连接 FTP 服务器，但无法上传、编辑、删除文件，功能有限。使用 FTP，首先要做一番配置："]}),"\n",(0,r.jsxs)(n.p,{children:["打开",(0,r.jsx)(n.a,{href:"https://ecs.console.aliyun.com/securityGroup/region",target:"_blank",rel:"noopener noreferrer",children:"服务器控制台-安全组"}),"："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:F,alt:"截屏2024-01-22 下午5.51.15.png"})}),"\n",(0,r.jsxs)(n.p,{children:["添加 ",(0,r.jsx)(n.code,{children:"20"}),"、",(0,r.jsx)(n.code,{children:"21"})," 和 ",(0,r.jsx)(n.code,{children:"39000-40000"})," 范围端口："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["在宝塔的 ",(0,r.jsx)(n.strong,{children:"“安全”"})," 面板里也把这些端口添加一遍："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:U,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["注：阿里云服务器的端口范围写法为 ",(0,r.jsx)(n.code,{children:"39000/40000"}),"，宝塔里的端口范围写法为 ",(0,r.jsx)(n.code,{children:"39000-40000"}),"，略有不同。"]}),"\n",(0,r.jsxs)(n.p,{children:["然后在 ",(0,r.jsx)(n.strong,{children:"“软件商店”"})," 中修改 PureFTPd 的设置："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:"截屏2024-01-24 下午4.19.05.png"})}),"\n",(0,r.jsxs)(n.p,{children:["在“配置修改”里，搜索 ",(0,r.jsx)(n.code,{children:"ForcePassiveIP"}),"，然后将其值更改为服务器的 IP："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:R,alt:"截屏2024-01-24 下午4.21.44.png"})}),"\n",(0,r.jsxs)(n.p,{children:["回到宝塔的“FTP”界面，点击“添加 FTP”，添加一个用户名和密码，根目录设置为 ",(0,r.jsx)(n.code,{children:"/www/wwwroot"}),"，这是宝塔的默认建站目录，我们也会把项目的代码放到这个目录下。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:"截屏2024-01-24 下午4.24.10.png"})}),"\n",(0,r.jsx)(n.p,{children:"添加用户后，点击查看快速连接，根据提示使用 FTP 工具连接即可："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:H,alt:"截屏2024-01-24 下午4.26.31.png"})}),"\n",(0,r.jsx)(n.p,{children:"成功连接后的效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:L,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"域名",children:["域名",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#域名",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"买个域名",children:["买个域名",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#买个域名",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在我们买个域名，购买域名可以参考",(0,r.jsx)(n.a,{href:"https://juejin.cn/post/7052257775270756366",target:"_blank",rel:"noopener noreferrer",children:"《一篇域名从购买到备案到解析的详细教程》"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["假设我们已经购买并备案好了。在",(0,r.jsx)(n.a,{href:"https://dc.console.aliyun.com/next/index#/domain-list/all",target:"_blank",rel:"noopener noreferrer",children:"阿里云域名控制台"}),"可以查到："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h3,{id:"解析域名",children:["解析域名",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#解析域名",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现在我们把域名解析到我们的服务器地址上。点击左边的“解析”按钮，然后点击“添加记录”："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["这里我们用的是二级域名 ",(0,r.jsx)(n.code,{children:"notes.yayujs.com"}),"，记录值填写我们购买的服务器地址。添加后，应该很快就会生效。"]}),"\n",(0,r.jsxs)(n.h3,{id:"ssl-证书",children:["SSL 证书",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ssl-证书",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"阿里云提供免费的 SSL 证书（很多网站都提供的），最近证书的有效期从之前的 1 年改为了目前的 3 个月，虽然有些麻烦，但也能凑合着用。"}),"\n",(0,r.jsxs)(n.p,{children:["参考",(0,r.jsx)(n.a,{href:"https://juejin.cn/post/7051902149826969608",target:"_blank",rel:"noopener noreferrer",children:"《VuePress 博客优化之开启 HTTPS》"}),"，搞一份免费证书："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["点击“下载”，服务器类型选择 nginx，点击“下载”，会下载证书文件，包含一个 ",(0,r.jsx)(n.code,{children:".pem"}),"文件，一个 ",(0,r.jsx)(n.code,{children:".key"})," 文件。"]}),"\n",(0,r.jsx)(n.p,{children:"这两个文件留着备用，后面开启 HTTPS 会用到。"}),"\n",(0,r.jsxs)(n.h2,{id:"部署-nextjs-项目",children:["部署 Next.js 项目",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#部署-nextjs-项目",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"本地检查",children:["本地检查",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本地检查",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在我们尝试部署我们的项目，首先要保证自己的项目本身没有问题。所以我们在本地先 ",(0,r.jsx)(n.code,{children:"npm run build"}),"，然后 ",(0,r.jsx)(n.code,{children:"npm run start"}),"检查一下运行。为了简单起见，我们可以在脚本里再添加一个 ",(0,r.jsx)(n.code,{children:"prod"}),"命令，修改 ",(0,r.jsx)(n.code,{children:"package.json"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  "name": "next-react-notes-demo",\n  "version": "0.1.0",\n  "private": true,\n  "scripts": {\n    // ...\n    "prod": "next build && next start"\n  },\n  "dependencies": {\n    // ...\n  },\n  "devDependencies": {\n    // ...\n  }\n}\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["当运行 ",(0,r.jsx)(n.code,{children:"npm run prod"}),"的时候，就会先构建后运行，省的每次都要手动执行两个命令。"]}),"\n",(0,r.jsx)(n.p,{children:"现在我们在本地运行生产版本，发现新建笔记的时候会报错："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["在生产版本中，",(0,r.jsx)(n.code,{children:"next-auth"})," 并不认为 ",(0,r.jsx)(n.code,{children:"localhost:3000"}),"是值得信任的 Host，使用 ",(0,r.jsx)(n.code,{children:"next-auth"})," 正常部署网站时，需要将 ",(0,r.jsx)(n.code,{children:"NEXTAUTH_URL"})," 环境变量设置为网站的规范 URL："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"NEXTAUTH_URL=https://example.com\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果开发的时候确实没有正式的地址，可以在 ",(0,r.jsx)(n.code,{children:"auth.js"}),"中强行设置 ",(0,r.jsx)(n.code,{children:"trustHost"}),"。修改 ",(0,r.jsx)(n.code,{children:"auth.js"}),"，添加 ",(0,r.jsx)(n.code,{children:"trustHost: true"}),"配置项："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import NextAuth from "next-auth"\nimport GitHub from "next-auth/providers/github"\nimport CredentialsProvider from "next-auth/providers/credentials";\nimport { addUser, getUser } from "@/lib/prisma";\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers:[// ... ],\n  pages: {\n    signIn: \'/auth/signin\'\n  },\n  callbacks: {\n  	// ...\n  },\n  trustHost: true\n})\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这样再运行 ",(0,r.jsx)(n.code,{children:"npm run prod"}),"的时候，就不会有 auth 报错了。不过我们既然已经有了域名，可以在根目录新建一个 ",(0,r.jsx)(n.code,{children:".env.production"}),"文件，设置生产环境的 ",(0,r.jsx)(n.code,{children:"NEXTAUTH_URL"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"AUTH_URL=https://notes.yayujs.com\n"})}),"\n",(0,r.jsx)(n.p,{children:"这样部署线上的时候就不会报 untrustedHost 错误了。"}),"\n",(0,r.jsxs)(n.p,{children:["注：next-auth v5 里，",(0,r.jsx)(n.code,{children:"AUTH_URL"})," 是 ",(0,r.jsx)(n.code,{children:"NEXTAUTH_URL"})," 的别名。"]}),"\n",(0,r.jsxs)(n.h3,{id:"创建-git-项目",children:["创建 Git 项目",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-git-项目",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本地运行没啥问题，我们就可以把项目代码提交到服务器上。虽然可以连接服务器直接上传代码，但为了以后每次提交方便，我们在服务器上创建一个裸仓，这样每次更新代码，Git 提交到远程，服务器上的代码就会自动更新，这样使用起来更加方便。"}),"\n",(0,r.jsxs)(n.p,{children:["登陆服务器，运行 ",(0,r.jsx)(n.code,{children:"yum install git"}),"，安装 Git，效果如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"安装后，运行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 1. 进入目录，这是宝塔的默认建站目录\ncd /www/wwwroot\n# 2. 建个仓库文件夹\nmkdir notes.git && cd notes.git\n# 3. 创建裸仓库\ngit init --bare .\n"})}),"\n",(0,r.jsx)(n.p,{children:"这个时候我们就获得了一个服务器上的仓库地址："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"root@39.100.83.124:/www/wwwroot/notes.git\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这里我们使用 ",(0,r.jsx)(n.code,{children:"git init --bare"})," 初始化仓库，它与我们常使用的 ",(0,r.jsx)(n.code,{children:"git init"})," 初始化的仓库不一样，你可以理解为它专门用来创建远程仓库，这种仓库只包括 git 版本控制相关的文件，不含项目源文件，所以我们需要借助一个 hooks，在有代码提交到该仓库的时候，将提交的代码迁移到其他目录，这里我们在 ",(0,r.jsx)(n.code,{children:"notes.git"})," 同级目录下创建了一个 ",(0,r.jsx)(n.code,{children:"notes"})," 文件夹，用于存放提交的源代码文件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 1. 进入 hooks 目录\ncd hooks\n\n# 2. 创建并编辑 post-receive 文件\nvim post-receive\n\n# 3. 这里是 post-receive 写入的内容,注意根据自己的实际情况修改\n#!/bin/bash\ngit --work-tree=/www/wwwroot/notes checkout -f\n\n# 4. 赋予执行权限\nchmod +x post-receive\n\n# 5. 退出目录到 notes.git 同级目录并创建项目目录\ncd ../../ && mkdir notes\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果顺利的话，现在在本地打开我们的 React Notes 项目， ",(0,r.jsx)(n.code,{children:"commit"})," 提交代码后，运行："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git push -f root@39.100.83.124:/www/wwwroot/notes.git master\n"})}),"\n",(0,r.jsx)(n.p,{children:"以后每次修改代码、提交代码后，运行这行，代码就会自动更新到服务器上。"}),"\n",(0,r.jsxs)(n.p,{children:["此时服务端的 ",(0,r.jsx)(n.code,{children:"notes"})," 文件夹应该有我们提交的代码了，我们可以通过宝塔的“文件”查看："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h3,{id:"mysql-与-prisma",children:["MySQL 与 Prisma",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mysql-与-prisma",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"目前服务器上的 MySQL 数据库还没有设置，我们直接在宝塔添加一个 MySQL 数据库："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["这里我们创建了一个名为 ",(0,r.jsx)(n.code,{children:"notes"})," 的数据库，用户名自动设置为 ",(0,r.jsx)(n.code,{children:"notes"}),"，你不能更改为 ",(0,r.jsx)(n.code,{children:"root"}),"。设置后你可以以 ",(0,r.jsx)(n.code,{children:"notes"})," 用户加密码的方式访问这个数据库。这样我们写在 ",(0,r.jsx)(n.code,{children:"env"}),"中 ",(0,r.jsx)(n.code,{children:"DATABASE_URL"})," 就要修改为："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'DATABASE_URL="mysql://notes:WKNSjB3DeNB4xYje@localhost:3306/notes"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["当然，我们也可以改 ",(0,r.jsx)(n.code,{children:"root"})," 密码，把 ",(0,r.jsx)(n.code,{children:"root"})," 密码改为 ",(0,r.jsx)(n.code,{children:"admin"}),"，这样连代码都不用改了……"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["当然处于安全的角度考虑，最好还是使用 notes 用户。项目根目录新建一个 ",(0,r.jsx)(n.code,{children:".env.development"}),"文件，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'DATABASE_URL="mysql://root:admin@localhost:3306/notes"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".env"})," 中设置线上的 DATABASE_URL："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// ...\n\nDATABASE_URL="mysql://notes:i54f8znxfy2wh3w3@localhost:3306/notes"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["还记得服务器代码修改的流程吗？本地代码修改后，正常运行 ",(0,r.jsx)(n.code,{children:"git add"}),"、",(0,r.jsx)(n.code,{children:"git commit"})," 命令后，运行："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"git push -f root@39.100.83.124:/www/wwwroot/notes.git master\n"})}),"\n",(0,r.jsx)(n.p,{children:"服务器代码就会发生改变，你可以通过宝塔的“文件”面板或者 FTP 工具查看服务器上的文件。"}),"\n",(0,r.jsx)(n.p,{children:"因为我们代码中还使用了 Prisma，目前 MySQL 数据库只是新建了数据库，但没有同步数据模型，所以我们登录服务器进入项目目录："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 1. 进入项目目录\ncd /www/wwwroot/notes\n# 2. 安装依赖\nnpm install\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果 ",(0,r.jsx)(n.code,{children:"npm install"})," 有网络问题，可以设置 npm 镜像："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"# 设置成 npm 镜像\nnpm config set registry https://registry.npmmirror.com\n# 改回来\nnpm config set registry https://registry.npmjs.org/\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这个时候我们执行 prisma 相关的命令，我们先运行 ",(0,r.jsx)(n.code,{children:"npx prisma -v"})," 试试，大概率会出现这个错："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"如果出现这个错误，运行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 1. 编辑环境变量\nvim ~/.bashrc\n# 2. 添加环境变量\nexport PRISMA_ENGINES_MIRROR=https://registry.npmmirror.com/-/binary/prisma\n# 3. 保存退出后运行\nsource ~/.bashrc\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后再次运行 ",(0,r.jsx)(n.code,{children:"npx prisma -v"}),"试试："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"这说明 prisma 已经可以正常使用了。此时我们的数据模型要同步数据库。"}),"\n",(0,r.jsxs)(n.p,{children:["如果你把迁移时生成的 ",(0,r.jsx)(n.code,{children:"prisma/migrations"}),"下的文件也都提交了，那你可以在服务器上运行："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx prisma migrate deploy\n"})}),"\n",(0,r.jsx)(n.p,{children:"正常部署效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["然后运行 ",(0,r.jsx)(n.code,{children:"npx prisma generate"}),"初始化 Prisma Client："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"npx prisma generate\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果你没有提交，反正也是初始化，你可以运行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx prisma migrate dev\n"})}),"\n",(0,r.jsx)(n.p,{children:"此时通过 Prisma，MySQL 的数据表也设置完毕。"}),"\n",(0,r.jsxs)(n.h3,{id:"开启项目",children:["开启项目",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开启项目",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在我们运行 ",(0,r.jsx)(n.code,{children:"npm run prod"}),"试试，应该能顺利的运行在 3000 端口："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["然后这个时候访问 ",(0,r.jsx)(n.code,{children:"http://39.100.83.124:3000/"}),"可能还打不开，因为 3000 端口还没有开启，先在宝塔的“安全”面板上开启："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["我们之前只是在阿里云 ECS 的安全组中开启了 ",(0,r.jsx)(n.code,{children:"3000"}),"（项目开启在 3000 端口）、",(0,r.jsx)(n.code,{children:"80"}),"（HTTP 默认端口）、",(0,r.jsx)(n.code,{children:"443"}),"（HTTPS 默认端口），这里需要在宝塔里也开启一遍。"]}),"\n",(0,r.jsxs)(n.p,{children:["此时打开 ",(0,r.jsx)(n.code,{children:"http://39.100.83.124:3000/"})," 应该能正常访问了："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["不过点击 ",(0,r.jsx)(n.code,{children:"Sign In"})," 的时候还会报错，不着急，我们慢慢解决，先学习点基础知识。"]}),"\n",(0,r.jsxs)(n.h3,{id:"screen-命令",children:["Screen 命令",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#screen-命令",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在我们先在服务器上关掉项目的 node 程序。如果 ssh 还在保持连接，会话还在，那直接 ",(0,r.jsx)(n.code,{children:"control + c"})," 也就断开了。但如果 ssh 断开了连接，恢复之前的会话就有些麻烦了。搞不好还要先强行关闭 3000 端口："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 1. 获取端口进程 PID\nlsof -i:3000\n# 2. 关闭 PID\nkill -9 xxxx\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这个时候就要说到 Screen 了。Screen 是 Linux 下的一个多重视窗管理程序。拥有多窗口、会话恢复、会话共享等功能。所谓会话恢复，对于远程登录的用户，即使连接中断，用户也不会失去对已经打开的命令行会话的控制。只用登录到服务器，运行 ",(0,r.jsx)(n.code,{children:"screen -r"}),"即可恢复会话。"]}),"\n",(0,r.jsx)(n.p,{children:"登陆服务器，安装 Screen："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yum install screen\n"})}),"\n",(0,r.jsx)(n.p,{children:"Screen 的命令并不多，简单介绍下常用到的："}),"\n",(0,r.jsx)(n.p,{children:"Screen 的状态分为两种：Attached（前台运行） 和 Detached（后台运行）。"}),"\n",(0,r.jsxs)(n.p,{children:["通过 ",(0,r.jsx)(n.code,{children:"screen -S xxx"}),"可以新建一个会话，并进入 Attached 状态。如果该程序要长期运行，但你要暂时离开该会话，",(0,r.jsx)(n.code,{children:"Control + A Control + D"}),"，该会话就会进入 Detached 状态。当你再登陆进来的时候，可以通过 ",(0,r.jsx)(n.code,{children:"screen -ls"}),"查看有哪些会话，然后通过 ",(0,r.jsx)(n.code,{children:"screen -r xxxx"}),"恢复会话，将会话从 Detached 状态转为 Attached 状态。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你要进入 Attached 的会话，你需要先通过 ",(0,r.jsx)(n.code,{children:"screen -d xxxx"}),"，将其状态转为 ",(0,r.jsx)(n.code,{children:"Detached"}),"，才能通过 ",(0,r.jsx)(n.code,{children:"screen -r xxxx"})," 进入会话。这个过程也可以合并成 ",(0,r.jsx)(n.code,{children:"screen -d -r xxxx"}),"一个命令。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你要删除某个 screen，运行 ",(0,r.jsx)(n.code,{children:"screen -S xxxx -X quit"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"pm2-命令",children:["PM2 命令",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pm2-命令",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://pm2.keymetrics.io/",target:"_blank",rel:"noopener noreferrer",children:"PM2"})," 是部署 node 项目常用的一个工具。正常我们要安装 pm2 这个模块，但我们在宝塔装 Node.js 版本管理器的时候，宝塔已经为我们安装了 PM2 模块，所以登陆服务器，直接就有 pm2 命令了，不信你运行 ",(0,r.jsx)(n.code,{children:"pm2 -v"}),"试试。"]}),"\n",(0,r.jsx)(n.p,{children:"PM2 是一个 Node.js 进程管理器，使用 PM2，可以实现性能监控、自动重启、负载均衡等。让我们看下常用的命令吧："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 启动\npm2 start app.js\n# 声明一个名字\npm2 start app.js --name app_name\n# 监听文件变化\npm2 start python-app.py --watch\n\n# 列表\npm2 list\n# 监控\npm2 monit\n\n# 重载\npm2 reload app_name\n# 重启\npm2 restart app_name\n# 停止\npm2 stop app_name\n# 删除\npm2 delete app_name\n"})}),"\n",(0,r.jsx)(n.p,{children:"我们来看这样一个命令："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"pm2 start npm --watch --name notes -- run prod\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这个命令的意思是以 pm2 开启 ",(0,r.jsx)(n.code,{children:"npm run prod"}),"脚本命令，此进程命名为 notes，并监听文件变化。"]}),"\n",(0,r.jsxs)(n.h3,{id:"配置-nginx-和-https",children:["配置 Nginx 和 HTTPS",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置-nginx-和-https",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现在回到我们的项目上。在宝塔的“网站”面板中添加 Node 项目，相关配置如图："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:"截屏2024-01-24 下午8.17.54.png"})}),"\n",(0,r.jsx)(n.p,{children:"添加成功后："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"此时宝塔已经为我们的项目做好了 Nginx 配置，可以在设置中查看："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"截屏2024-01-24 下午8.26.30.png"})}),"\n",(0,r.jsxs)(n.p,{children:["宝塔做的 Nginx 配置为监听 ",(0,r.jsx)(n.code,{children:"notes.yayujs.com"})," 的 ",(0,r.jsx)(n.code,{children:"80"}),"端口，然后代理到 ",(0,r.jsx)(n.code,{children:"http://127.0.0.1:3000"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"我们在 Screen 中运行我们的 Next.js 项目吧："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 1. 登陆服务器\nscreen -S notes\n# 2. 进入程序目录\ncd /www/wwwroot/notes\n# 3. 运行脚本\npm2 start npm --watch --name notes -- run prod\n"})}),"\n",(0,r.jsxs)(n.p,{children:["稍等一会，等待编译构建完成，我们再访问 ",(0,r.jsx)(n.code,{children:"http://notes.yayujs.com/"}),"应该可以正常运行了："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["但是当我们点击 ",(0,r.jsx)(n.code,{children:"Sign In"}),"的时候，依然会报错。服务器上的报错为："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["之所以会有这个报错，是因为我们的 Nginx 配置中 ",(0,r.jsx)(n.code,{children:"x-forwarded-host"}),"标头带了端口号，在宝塔上修改 Nginx 配置，把下图中标示的 ",(0,r.jsx)(n.code,{children:"$server_port"})," 去除即可。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"截屏2024-01-24 下午8.37.31.png"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Ctrl+S"})," 保存后，Nginx 配置就会自动生效。此时再访问 ",(0,r.jsx)(n.code,{children:"http://notes.yayujs.com/"}),"，点击 ",(0,r.jsx)(n.code,{children:"Sign In"}),"，虽然还是报错，但至少不报刚才那个错了……哈哈哈哈"]}),"\n",(0,r.jsx)(n.p,{children:"现在让我么来解决 HTTPS 的问题吧。点击 Node 项目的“未部署”按钮："}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:t,alt:"截屏2024-01-24 下午8.42.08.png"}),"\n还记得之前在阿里云服务器上下载的 ",(0,r.jsx)(n.code,{children:".key"})," 和 ",(0,r.jsx)(n.code,{children:".pem"}),"文件吗？用编辑器打开这两个文件，将这两个文件中的内容复制到这两个输入框中，然后点击“保存并启用证书”。宝塔会自动更新 Nginx 配置："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，Nginx 配置更新，监听 HTTPS 的 443 端口，代理到 3000 端口。"}),"\n",(0,r.jsxs)(n.p,{children:["此时访问 ",(0,r.jsx)(n.code,{children:"https://notes.yayujs.com/"}),"，依然可以正常访问，不仅如此，点击 ",(0,r.jsx)(n.code,{children:'"Sign In"'})," 也能正常登录了，项目运行正常："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["此外，因为我们使用的是 pm2 运行的项目，并设置了监听文件变化，所以当你通过 ",(0,r.jsx)(n.code,{children:"git push -f root@39.100.83.124:/www/wwwroot/notes.git master"}),"推送代码到服务器的时候，因为文件变化，pm2 会自动重启该应用。"]}),"\n",(0,r.jsxs)(n.h3,{id:"宝塔-nginx",children:["宝塔 Nginx",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#宝塔-nginx",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"关于宝塔的 Nginx，我们多说一点，了解就行，以防万一用到。"}),"\n",(0,r.jsxs)(n.p,{children:["正常我们登陆服务器直接安装 Nginx，比如参考",(0,r.jsx)(n.a,{href:"https://juejin.cn/post/7049692191110725645",target:"_blank",rel:"noopener noreferrer",children:"《一篇从购买服务器到部署博客代码的详细教程》"}),"中的方式，Nginx 的配置文件是放在 ",(0,r.jsx)(n.code,{children:"/etc/nginx"}),"目录下的。但是宝塔装的 Nginx 并没有放在该目录下。"]}),"\n",(0,r.jsxs)(n.p,{children:["此外，因为宝塔面板内有些包是未托管到服务器 systemd 包管理内的，所以 systemctl 是无法正常使用的。也就是说，使用 ",(0,r.jsx)(n.code,{children:"systemctl status nginx.service"}),"这种命令是无法准确判断 nginx 状态的，当然也无法重启重载等。"]}),"\n",(0,r.jsxs)(n.p,{children:["宝塔的 Nginx 安装在了 ",(0,r.jsx)(n.code,{children:"/www/server/nginx"}),"，配置文件在 ",(0,r.jsx)(n.code,{children:"/www/server/nginx/conf/nginx.conf"}),"，其内容可以通过目录直接查找，也可以在 Nginx 的设置中查看："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"截屏2024-01-24 下午9.05.10.png"})}),"\n",(0,r.jsx)(n.p,{children:"这是 nginx 的主配置文件，在这个文件中底部有一句："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:" include /www/server/panel/vhost/nginx/*.conf;\n"})}),"\n",(0,r.jsx)(n.p,{children:"打开此目录："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"这其实就是我们具体项目的 Nginx 配置，可以在具体项目的设置里查看："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"截屏2024-01-24 下午8.26.30.png"})}),"\n",(0,r.jsx)(n.p,{children:"如果你要操作宝塔的 Nginx 配置，可以在命令行中运行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 启动\n/etc/init.d/nginx start\n\n# 停止\n/etc/init.d/nginx stop\n\n# 重启\n/etc/init.d/nginx restart\n\n# 重载\n/etc/init.d/nginx reload\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://juejin.cn/post/7049692191110725645",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.cn/post/7049692191110725645"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://authjs.dev/getting-started/providers/oauth-tutorial#setting-up-nextauth_url",target:"_blank",rel:"noopener noreferrer",children:"https://authjs.dev/getting-started/providers/oauth-tutorial#setting-up-nextauth_url"})}),"\n"]})]})}function Z(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Y,{...e})}):Y(e)}let $=Z;Z.__RSPRESS_PAGE_META={},Z.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F47.%E5%AE%9E%E6%88%98%E7%AF%87%20_%20React%20Notes%20_%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"服务器",id:"服务器",depth:2},{text:"买个服务器",id:"买个服务器",depth:3},{text:"获取登录密码",id:"获取登录密码",depth:3},{text:"登陆服务器",id:"登陆服务器",depth:3},{text:"装个宝塔",id:"装个宝塔",depth:3},{text:"Nginx、MySQL 与 Node",id:"nginxmysql-与-node",depth:3},{text:"FTP",id:"ftp",depth:3},{text:"域名",id:"域名",depth:2},{text:"买个域名",id:"买个域名",depth:3},{text:"解析域名",id:"解析域名",depth:3},{text:"SSL 证书",id:"ssl-证书",depth:3},{text:"部署 Next.js 项目",id:"部署-nextjs-项目",depth:2},{text:"本地检查",id:"本地检查",depth:3},{text:"创建 Git 项目",id:"创建-git-项目",depth:3},{text:"MySQL 与 Prisma",id:"mysql-与-prisma",depth:3},{text:"开启项目",id:"开启项目",depth:3},{text:"Screen 命令",id:"screen-命令",depth:3},{text:"PM2 命令",id:"pm2-命令",depth:3},{text:"配置 Nginx 和 HTTPS",id:"配置-nginx-和-https",depth:3},{text:"宝塔 Nginx",id:"宝塔-nginx",depth:3},{text:"参考链接",id:"参考链接",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);