"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79231"],{718384:function(e,n,r){e.exports=r.p+"static/image/854ef10194b83ca1aba5d67cf7d7a271.27e6ead8.webp"},860088:function(e,n,r){r.r(n),r.d(n,{default:()=>m});var s=r(552676),i=r(740453);let t=r.p+"static/image/e7ae309b8baf0bd764a5b8c61d08d778.c36703d9.webp",c=r.p+"static/image/74bf7d40fb1dcc3515f8799575eaa86b.797872f1.webp",a=r.p+"static/image/8378f6bdeecfce761fc0564f26990ccc.92bd1d2b.webp",d=r.p+"static/image/ab73891687418724697913d616bea02e.b668966f.webp",p=r.p+"static/image/3482a75fd45a288536e069d5b11b2739.ca46ff0e.webp";var l=r(718384);let h=r.p+"static/image/dd295caf68fca47ccb318f9ef9189e8d.fd589d78.webp",A=r.p+"static/image/2cb5c2166282891fbd77b815477b99df.ed02093a.webp",g=r.p+"static/image/a907ca72cad1818bb78f58cfaa349ce2.bb308817.webp",x=r.p+"static/image/e49c0337a8f874a33f4e750810bfa2d4.86884bb5.webp",j=r.p+"static/image/2952b7f62e06cf04f4cd042c80fd3667.a2793cbe.webp",o=r.p+"static/image/9e2ec18165770e567f32744930a9339c.9c75ef27.webp",y=r.p+"static/image/7a2f74928bac2ea45b8b1e6748a98f8e.988dbe95.webp",b=r.p+"static/image/c9e1d8f49624df627a8f1ccd9a243d39.c2f9c567.webp",u=r.p+"static/image/83e4b8ce30bdcd17f7999360334f1227.a42dc134.webp",f=r.p+"static/image/ae8699789795a0b612664a61cbb6fd82.88e0bdcc.webp";function w(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",h2:"h2",strong:"strong",h3:"h3",img:"img",blockquote:"blockquote",h4:"h4"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"6套路二重新构造做变换",children:["6.套路二：重新构造做变换",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6套路二重新构造做变换",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"类型编程主要的目的就是对类型做各种转换，那么如何对类型做修改呢？"}),"\n",(0,s.jsx)(n.p,{children:"TypeScript 类型系统支持 3 种可以声明任意类型的变量： type、infer、类型参数。"}),"\n",(0,s.jsx)(n.p,{children:"type 叫做类型别名，其实就是声明一个变量存储某个类型："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type ttt = Promise<number>;\n"})}),"\n",(0,s.jsx)(n.p,{children:"infer 用于类型的提取，然后存到一个变量里，相当于局部变量："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type GetValueType<P> = P extends Promise<infer Value> ? Value : never;\n"})}),"\n",(0,s.jsx)(n.p,{children:"类型参数用于接受具体的类型，在类型运算中也相当于局部变量："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type isTwo<T> = T extends 2 ? true: false;\n"})}),"\n",(0,s.jsx)(n.p,{children:"但是，严格来说这三种也都不叫变量，因为它们不能被重新赋值。"}),"\n",(0,s.jsx)(n.p,{children:"TypeScript 设计可以做类型编程的类型系统的目的就是为了产生各种复杂的类型，那不能修改怎么产生新类型呢？"}),"\n",(0,s.jsx)(n.p,{children:"答案是重新构造。"}),"\n",(0,s.jsx)(n.p,{children:"这就涉及到了第二个类型体操套路：重新构造做变换。"}),"\n",(0,s.jsxs)(n.h2,{id:"重新构造",children:["重新构造",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#重新构造",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"TypeScript 的 type、infer、类型参数声明的变量都不能修改，想对类型做各种变换产生新的类型就需要重新构造。"})}),"\n",(0,s.jsx)(n.p,{children:"数组、字符串、函数等类型的重新构造比较简单。"}),"\n",(0,s.jsx)(n.p,{children:"索引类型，也就是多个元素的聚合类型的重新构造复杂一些，涉及到了映射类型的语法。"}),"\n",(0,s.jsx)(n.p,{children:"我们先从简单的开始："}),"\n",(0,s.jsxs)(n.h2,{id:"数组类型的重新构造",children:["数组类型的重新构造",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数组类型的重新构造",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"push",children:["Push",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#push",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"有这样一个元组类型："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type tuple = [1,2,3];\n"})}),"\n",(0,s.jsx)(n.p,{children:"我想给这个元组类型再添加一些类型，怎么做呢？"}),"\n",(0,s.jsx)(n.p,{children:"TypeScript 类型变量不支持修改，我们可以构造一个新的元组类型："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Push<Arr extends  unknown[], Ele> = [...Arr, Ele];\n"})}),"\n",(0,s.jsx)(n.p,{children:"类型参数 Arr 是要修改的数组/元组类型，元素的类型任意，也就是 unknown。"}),"\n",(0,s.jsx)(n.p,{children:"类型参数 Ele 是添加的元素的类型。"}),"\n",(0,s.jsx)(n.p,{children:"返回的是用 Arr 已有的元素加上 Ele 构造的新的元组类型。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBACgrgZwBYB4CCAnDUIA9gQB2AJglFHIQNaED2A7oQNoC6ANFAKIA2EAfFAC8UJgDpxmDBx4QWAbgBQS0JFiIkAJQgI43YELXIUTAIwcATBwDM7KABY+ioA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsx)(n.p,{children:"这就是数组/元组的重新构造。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"数组和元组的区别"}),"：数组类型是指任意多个同一类型的元素构成的，比如 number[]、Array<number>，而元组则是数量固定，类型可以不同的元素构成的，比如 [1, true, 'guang']。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"unshift",children:["Unshift",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#unshift",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"可以在后面添加，同样也可以在前面添加："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Unshift<Arr extends  unknown[], Ele> = [Ele, ...Arr];\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAqgdgZwBYEsBmwA8BBATrqCAD2AjgBMEooBXOAazgHsB3OAbQF0AaKAUQA2EAHxQAvFHaCIvAHTy8uTgG4AUKtCRYiVBgBKEBDQHBx25OizsAjLwBMvAMw8oABmHKgA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsx)(n.p,{children:"这两个案例比较简单，我们来做一个复杂的："}),"\n",(0,s.jsxs)(n.h3,{id:"zip",children:["Zip",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#zip",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"有这样两个元组："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type tuple1 = [1,2];\ntype tuple2 = ['guang', 'dong'];\n"})}),"\n",(0,s.jsx)(n.p,{children:"我们想把它们合并成这样的元组："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type tuple = [[1, 'guang'], [2, 'dong']];\n"})}),"\n",(0,s.jsx)(n.p,{children:"思路很容易想到，提取元组中的两个元素，构造成新的元组："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Zip<One extends [unknown, unknown], Other extends [unknown, unknown]> = \n    One extends [infer OneFirst, infer OneSecond]\n        ? Other extends [infer OtherFirst, infer OtherSecond]\n            ? [[OneFirst, OtherFirst], [OneSecond, OtherSecond]] :[] \n                : [];\n"})}),"\n",(0,s.jsx)(n.p,{children:"两个类型参数 One、Other 是两个元组，类型是 [unknown, unknown]，代表 2 个任意类型的元素构成的元组。"}),"\n",(0,s.jsx)(n.p,{children:"通过 infer 分别提取 One 和 Other 的元素到 infer 声明的局部变量 OneFirst、OneSecond、OtherFirst、OtherSecond 里。"}),"\n",(0,s.jsx)(n.p,{children:"用提取的元素构造成新的元组返回即可："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAWglmAPAeQHbQgD2BVATAZygG0BXVAa1QHsB3VAGinKrtQF0nlgALCAJyhYc+ImUo16TFpI4A+KAF4oAKCjqoaDNlyEScVADMBm9ADE4-AsCYHjgrQGUIAY2r52ajd4D8m3ibCumJ2Jtx8-BZWNlChDgH8zm4eXt5pUH7ExFpR1lwJucCcJE6u7nj5EUnl7OxQAFzEdanprfUk7ADcKi2taSqgkLAIAEoQBKQANsBKw0jEAIwMAEzFxADkAOakAIaom+tM63juB+xynUA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsx)(n.p,{children:"但是这样只能合并两个元素的元组，如果是任意个呢？"}),"\n",(0,s.jsx)(n.p,{children:"那就得用递归了："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Zip2<One extends unknown[], Other extends unknown[]> = \n    One extends [infer OneFirst, ...infer OneRest]\n        ? Other extends [infer OtherFirst, ...infer OtherRest]\n            ? [[OneFirst, OtherFirst], ...Zip2<OneRest, OtherRest>]: []\n                : [];\n"})}),"\n",(0,s.jsx)(n.p,{children:"类型参数 One、Other 声明为 unknown[]，也就是元素个数任意，类型任意的数组。"}),"\n",(0,s.jsx)(n.p,{children:"每次提取 One 和 Other 的第一个元素 OneFirst、OtherFirst，剩余的放到 OneRest、OtherRest 里。"}),"\n",(0,s.jsx)(n.p,{children:"用 OneFirst、OtherFirst 构造成新的元组的一个元素，剩余元素继续递归处理 OneRest、OtherRest。"}),"\n",(0,s.jsx)(n.p,{children:"这样，就能处理任意个数元组的合并："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAWglmATAHgPIDtoQB7AugEwGcoBXdAa3QHsB3dAbQF0AaKVYACwgCcoc8hEuSp1GTAHxQAvFABQURe0z9c+YlAZx0AM17KIAMTg8iwNgDor2vXwwQAShDNMFS9wH52XfQPUktXX0Obh5jU3MoKwsbYJ8eJxc3dxSoLwYGe3CzNhDebOBWKKt4JDRMRMi8hOdgCSYALk1XVNalJuYAbjkeuVBIWARERNIAG2AZQbKGAEYWRBYAZhYAFhYAViKGAHIAc1IAQ3Rd7bZtgmpj06htuCJr7YAjWoedHjh1bclOoA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsx)(n.p,{children:"了解了数组类型的重新构造，我们再来看下字符串类型的："}),"\n",(0,s.jsxs)(n.h2,{id:"字符串类型的重新构造",children:["字符串类型的重新构造",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串类型的重新构造",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"capitalizestr",children:["CapitalizeStr",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#capitalizestr",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们想把一个字符串字面量类型的 'guang' 转为首字母大写的 'Guang'。"}),"\n",(0,s.jsx)(n.p,{children:"需要用到字符串类型的提取和重新构造："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type CapitalizeStr<Str extends string> = \n    Str extends `${infer First}${infer Rest}` \n        ? `${Uppercase<First>}${Rest}` : Str;\n"})}),"\n",(0,s.jsx)(n.p,{children:"我们声明了类型参数 Str 是要处理的字符串类型，通过 extends 约束为 string。"}),"\n",(0,s.jsx)(n.p,{children:"通过 infer 提取出首个字符到局部变量 First，提取后面的字符到局部变量 Rest。"}),"\n",(0,s.jsx)(n.p,{children:"然后使用 TypeScript 提供的内置高级类型 Uppercase 把首字母转为大写，加上 Rest，构造成新的字符串类型返回。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAwghmAlsOAbRAvCBlYAnAHlzyggA9gIA7AEwGco79EqBzAPigF4pjSLq9KAAMAJAG8WAMwgkAYojxMAvhOmyoAJQgrhUAPwiJAVTCQ8AYzh0IBBUuDtV47bqgAuXvgDcAKH+gkLAIyGiYEK4ArqjA3MFIKOhYxAQA5KyRcGyp7N5AA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsxs)(n.p,{children:["这就是字符串类型的重新构造：",(0,s.jsx)(n.strong,{children:"从已有的字符串类型中提取出一些部分字符串，经过一系列变换，构造成新的字符串类型。"})]}),"\n",(0,s.jsxs)(n.h3,{id:"camelcase",children:["CamelCase",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#camelcase",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们再来实现 dong_dong_dong 到 dongDongDong 的变换。"}),"\n",(0,s.jsx)(n.p,{children:"同样是提取和重新构造："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type CamelCase<Str extends string> = \n    Str extends `${infer Left}_${infer Right}${infer Rest}`\n        ? `${Left}${Uppercase<Right>}${CamelCase<Rest>}`\n        : Str;\n"})}),"\n",(0,s.jsx)(n.p,{children:"类型参数 Str 是待处理的字符串类型，约束为 string。"}),"\n",(0,s.jsx)(n.p,{children:"提取 _ 之前和之后的两个字符到 infer 声明的局部变量 Left 和 Right，剩下的字符放到 Rest 里。"}),"\n",(0,s.jsx)(n.p,{children:"然后把右边的字符 Right 大写，和 Left 构造成新的字符串，剩余的字符 Rest 要继续递归的处理。"}),"\n",(0,s.jsx)(n.p,{children:"这样就完成了从下划线到驼峰形式的转换："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAwghgWwgG3gZwgHgMrAE5QQAewEAdgCZpRr4CWZA5gHxQC8UAUFD1LgcVKVqAAwAkAbwYAzCAQAyEacAC+AfUky5UAEp1GAC1Waysgjoi0VI7rzsB+KOImLlKyQFUwkPAGM4GJh6hsDM7hLwSKgBWBa0YTZ2dgBcfPgA3JycoJCwiCjoEHEArsjA7HlRhZgA5BQA9kxqDU0tjDXM6UA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsxs)(n.h3,{id:"dropsubstr",children:["DropSubStr",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dropsubstr",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"可以修改自然也可以删除，我们再来做一个删除一段字符串的案例：删除字符串中的某个子串"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type DropSubStr<Str extends string, SubStr extends string> = \n    Str extends `${infer Prefix}${SubStr}${infer Suffix}` \n        ? DropSubStr<`${Prefix}${Suffix}`, SubStr> : Str;\n"})}),"\n",(0,s.jsx)(n.p,{children:"类型参数 Str 是待处理的字符串， SubStr 是要删除的字符串，都通过 extends 约束为 string 类型。"}),"\n",(0,s.jsx)(n.p,{children:"通过模式匹配提取 SubStr 之前和之后的字符串到 infer 声明的局部变量 Prefix、Suffix 中。"}),"\n",(0,s.jsx)(n.p,{children:"如果不匹配就直接返回 Str。"}),"\n",(0,s.jsx)(n.p,{children:"如果匹配，那就用 Prefix、Suffix 构造成新的字符串，然后继续递归删除 SubStr。直到不再匹配，也就是没有 SubStr 了。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAIgTgezAZQK4CNnDgHi3KCAD2AgDsATAZyiuwEsyBzAGijU20JPOtoeYA+KAF4oAKChT2XYqUo0ABgBIA3owBmEAgAU4EDfSIBfNR3yn1ZLQTQbDJxROkuoAfliIUGfDhWq9AyNLOwdjRTZzbGEALhk4AG5xcVBITyQAJQgqVAAbYFF0705cAHIKBGYAPxrStlKq0sEEoA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsx)(n.p,{children:"字符串类型的重新构造之后，我们再来看下函数类型的重新构造："}),"\n",(0,s.jsxs)(n.h2,{id:"函数类型的重新构造",children:["函数类型的重新构造：",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数类型的重新构造",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"appendargument",children:["AppendArgument",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#appendargument",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"之前我们分别实现了参数和返回值的提取，那么重新构造就是用这些提取出的类型做下修改，构造一个新的类型即可。"}),"\n",(0,s.jsx)(n.p,{children:"比如在已有的函数类型上添加一个参数："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type AppendArgument<Func extends Function, Arg> = \n    Func extends (...args: infer Args) => infer ReturnType \n        ? (...args: [...Args, Arg]) => ReturnType : never;\n"})}),"\n",(0,s.jsx)(n.p,{children:"类型参数 Func 是待处理的函数类型，通过 extends 约束为 Function，Arg 是要添加的参数类型。"}),"\n",(0,s.jsx)(n.p,{children:"通过模式匹配提取参数到 infer 声明的局部变量 Args 中，提取返回值到局部变量 ReturnType 中。"}),"\n",(0,s.jsx)(n.p,{children:"用 Args 数组添加 Arg 构造成新的参数类型，结合 ReturnType 构造成新的函数类型返回。"}),"\n",(0,s.jsx)(n.p,{children:"这样就完成了函数类型的修改："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAgmkDsAmMBOBzArgWwg4APAGKYIDGUEAHsHkgM5QnnACWA9ggDSwYB8UALxQAUFHFNSFarWSMAFADplAQwz0AXFFYIAZhFS909AJRCBO-YYBKEYJlQIAKuGhiJHgPxQlq9VoBtZUU0Yx5QgF0zQQFbe0cXSCgtBAgANwMAbhERUCS4RBQMHDxgW3pMABtgcWECulCS-AJ5BBVcLXpgVB10aIEAI3Z2SogVbigEHAGDPmygA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsx)(n.p,{children:"最后，我们再来看下索引类型的重新构造"}),"\n",(0,s.jsxs)(n.h2,{id:"索引类型的重新构造",children:["索引类型的重新构造",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#索引类型的重新构造",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"索引类型是聚合多个元素的类型，class、对象等都是索引类型，比如这就是一个索引类型："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type obj = {\n  name: string;\n  age: number;\n  gender: boolean;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"索引类型可以添加修饰符 readonly（只读）、?（可选）:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type obj = {\n  readonly name: string;\n  age?: number;\n  gender: boolean;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"对它的修改和构造新类型涉及到了映射类型的语法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Mapping<Obj extends object> = { \n    [Key in keyof Obj]: Obj[Key]\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"mapping",children:["Mapping",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mapping",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"映射的过程中可以对 value 做下修改，比如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Mapping<Obj extends object> = { \n    [Key in keyof Obj]: [Obj[Key], Obj[Key], Obj[Key]]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"类型参数 Obj 是待处理的索引类型，通过 extends 约束为 object。"}),"\n",(0,s.jsx)(n.p,{children:"用 keyof 取出 Obj 的索引，作为新的索引类型的索引，也就是 Key in keyof Obj。"}),"\n",(0,s.jsx)(n.p,{children:"值的类型可以做变换，这里我们用之前索引类型的值 Obj[Key] 构造成了三个元素的元组类型 [Obj[Key], Obj[Key], Obj[Key]]："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/FAFwngDgpgBAsgQwhAlgOwOYB4DyAjAKxigA8Qo0ATAZxgHtCoBjEAPhgF4YBvGYGATADaAaShgY6GAGtxdAGYx8BALoAuYctHiVAGiWFtYPQYJGVK4AF9goSLABOUWl0TJ02Xgg0BGfXg0AJitWAG4gA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsx)(n.p,{children:"索引类型的映射画下图很容易理解："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"uppercasekey",children:["UppercaseKey",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#uppercasekey",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["除了可以对 Value 做修改，也可以对 Key 做修改，使用 as，这叫做",(0,s.jsx)(n.code,{children:"重映射"}),"："]}),"\n",(0,s.jsx)(n.p,{children:"比如把索引类型的 Key 变为大写。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type UppercaseKey<Obj extends object> = { \n    [Key in keyof Obj as Uppercase<Key & string>]: Obj[Key]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"类型参数 Obj 是待处理的索引类型，通过 extends 约束为 object。"}),"\n",(0,s.jsx)(n.p,{children:"新的索引类型的索引为 Obj 中的索引，也就是 Key in keyof Obj，但要做一些变换，也就是 as 之后的。"}),"\n",(0,s.jsx)(n.p,{children:"通过 Uppercase 把索引 Key 转为大写，因为索引可能为 string、number、symbol 类型，而这里只能接受 string 类型，所以要 & string，也就是取索引中 string 的部分。"}),"\n",(0,s.jsx)(n.p,{children:"value 保持不变，也就是之前的索引 Key 对应的值的类型 Obj[Key]。"}),"\n",(0,s.jsx)(n.p,{children:"这样构造出的新的索引类型，就把原来索引类型的索引转为了大写："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAqmkCcDGBDAzhA0hEAeA8gEYBWUEAHsBAHYAmaUA9iREsAHxQC8UA3lACgowqAG1sIKAEtqUANY5GAMyhFS6WPAjJ0EXBKgAyKGmAIZAc3YBdAFyqS4nNYEBfAQNCRNiVBgkAShBoAK4ANsDcPtp+WDi4-BYhKNQW9gCMADRQtIyp9gBMruwA3EA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsxs)(n.h4,{id:"record",children:["Record",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#record",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"TypeScript 提供了内置的高级类型 Record 来创建索引类型："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n"})}),"\n",(0,s.jsx)(n.p,{children:"指定索引和值的类型分别为 K 和 T，就可以创建一个对应的索引类型。"}),"\n",(0,s.jsx)(n.p,{children:"上面的索引类型的约束我们用的 object，其实更语义化一点我推荐用 Record<string, any>："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type UppercaseKey<Obj extends Record<string, any>> = { \n    [Key in keyof Obj as Uppercase<Key & string>]: Obj[Key]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"也就是约束类型参数 Obj 为 key 为 string，值为任意类型的索引类型。"}),"\n",(0,s.jsxs)(n.h3,{id:"toreadonly",children:["ToReadonly",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#toreadonly",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"索引类型的索引可以添加 readonly 的修饰符，代表只读。"}),"\n",(0,s.jsx)(n.p,{children:"那我们就可以实现给索引类型添加 readonly 修饰的高级类型："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type ToReadonly<T> =  {\n    readonly [Key in keyof T]: T[Key];\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"通过映射类型构造了新的索引类型，给索引加上了 readonly 的修饰，其余的保持不变，索引依然为原来的索引 Key in keyof T，值依然为原来的值 T[Key]。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/FAFwngDgpgBAKgewEpQIYBMEDsA2YA8cAfDALwwwDewFFATmprmDANoDSULAlljANZcEAM3gBdAFzwOXMQG5gAX2Arw0GCgzY8KAM4BXHCDLxkjbQWq0YWVAFsoU3SDq8A5guuo3jm-rsARlB0CopEckA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsxs)(n.h3,{id:"topartial",children:["ToPartial",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#topartial",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"同理，索引类型还可以添加可选修饰符："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type ToPartial<T> = {\n    [Key in keyof T]?: T[Key]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"给索引类型 T 的索引添加了 ? 可选修饰符，其余保持不变。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAKg9gBQIYCdgEskBsA8MB8UAvFAN4BQUVUA2gNIQhToB2UA1o3AGawC6AfgBcseoz7kAvuXKhIUZGkxYAShADOAVyzBisRKgzYcFalBZIAthBHrgKVgHMA3JWpJHN85ssAjCCiukvjOQA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsxs)(n.h3,{id:"tomutable",children:["ToMutable",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tomutable",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"可以添加 readonly 修饰，当然也可以去掉："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type ToMutable<T> = {\n    -readonly [Key in keyof T]: T[Key]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"给索引类型 T 的每个索引去掉 readonly 的修饰，其余保持不变。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAKg9gWQK7AIYCMA2EA8MB8UAvFAN4BQUVUAtAE4SoAmcAdpiFANoDSEnAS1ZQA1vzgAzWAF0AXLF79p5AL7lyoSFGRosEAEoQAzkkzBiVeDozYcFalAbM2HKK1QBbCPKPA6QgHMAbkpqVADvNyQPdAg6EJV8EKA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsxs)(n.h3,{id:"torequired",children:["ToRequired",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#torequired",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"同理，也可以去掉可选修饰符："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type ToRequired<T> = {\n    [Key in keyof T]-?: T[Key]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"给索引类型 T 的索引去掉 ? 的修饰 ，其余保持不变。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAKg9gJQgRwK4EsBOEAmAeGAPigF4oBvAKChqgG0BpCEKdAOygGtm4AzWALoBaAPwAuWI2YDKAX0qVQkKEjRZcSAM6oANjuClYiFBmz4qtKGwCGAWwjiom4JnYBzANzVa1txAlsqLYARhCYXrKEXkA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsxs)(n.h3,{id:"filterbyvaluetype",children:["FilterByValueType",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#filterbyvaluetype",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"可以在构造新索引类型的时候根据值的类型做下过滤："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type FilterByValueType<\n    Obj extends Record<string, any>, \n    ValueType\n> = {\n    [Key in keyof Obj \n        as Obj[Key] extends ValueType ? Key : never]\n        : Obj[Key]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"类型参数 Obj 为要处理的索引类型，通过 extends 约束为索引为 string，值为任意类型的索引类型 Record<string, any>。"}),"\n",(0,s.jsx)(n.p,{children:"类型参数 ValueType 为要过滤出的值的类型。"}),"\n",(0,s.jsx)(n.p,{children:"构造新的索引类型，索引为 Obj 的索引，也就是 Key in keyof Obj，但要做一些变换，也就是 as 之后的部分。"}),"\n",(0,s.jsx)(n.p,{children:"如果原来索引的值 Obj[Key] 是 ValueType 类型，索引依然为之前的索引 Key，否则索引设置为 never，never 的索引会在生成新的索引类型时被去掉。"}),"\n",(0,s.jsx)(n.p,{children:"值保持不变，依然为原来索引的值，也就是 Obj[Key]。"}),"\n",(0,s.jsx)(n.p,{children:"这样就达到了过滤索引类型的索引，产生新的索引类型的目的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAYglgG2BATgIRANQIYIK4QAq4EAPAPIBGAVlBAB7IB2AJgM5QBKEAxgPYoWpNsBRwmAcwA0UbExAA+GTnxESCqAF4oAbwBQUQ1ADaAaQggo4qAGsLfAGZQqtA0ffYOLsxYC6dRghWDhUCYkgoAH4oc0sALigmCAA3VF83d0ME71j0gF89PXFkFAdsHmgABVQ2PiZdDMTsAFsIBJExSQBuRuwJNsS8ZspUHvcACz5KShB20XEJY18egsLQCPgkVG42PCQtWEQSjFC1SFJqlFqmGQ6FqAAfQeHUBS6gA",target:"_blank",rel:"noopener noreferrer",children:"试一下"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"TypeScript 支持 type、infer、类型参数来保存任意类型，相当于变量的作用。"}),"\n",(0,s.jsxs)(n.p,{children:["但其实也不能叫变量，因为它们是不可变的。",(0,s.jsx)(n.strong,{children:"想要变化就需要重新构造新的类型，并且可以在构造新类型的过程中对原类型做一些过滤和变换。"})]}),"\n",(0,s.jsx)(n.p,{children:"数组、字符串、函数、索引类型等都可以用这种方式对原类型做变换产生新的类型。其中索引类型有专门的语法叫做映射类型，对索引做修改的 as 叫做重映射。"}),"\n",(0,s.jsxs)(n.p,{children:["提取和构造这俩是相辅相成的，学完了",(0,s.jsx)(n.code,{children:"模式匹配做提取"}),"，",(0,s.jsx)(n.code,{children:"重新构造做变换"})," 这两个套路之后，很多类型体操就有思路了。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/play?#code/PTAEgdTQRv0LH+ChZKACgVwM4AtYBcCeAHAU2XQwB4BBAJytEIA9tCA7AEzVFBWYGtmB7AO7MA2gF0ANKACiAG0IA+UAF5QIgHSbqVKXMJiA3PDxESmAEqE0KWdhVnyIgIxSATFIDMk0ABYFRhDAAVWZMAEsAM2wcAmIQ8KjKGjpGFnZObj4hUW89JVURPSlNdW1DY1jQeIxI7EtrW3tq2rJnN09vAAZ-eEQALTD8GNMB-DIAeWZiBiY2DhFMgWEpRezvcewMQloZtPnV5a5eJeYxfNBYTk5J6dS5tTDmCO3QG4AxMKo0bClH59obgBlQgAY34bDElyu0IA-K9Ni9dvcRH8XhstlQPl8fqBUQCEVRgWCIVDoWTQHCRCJ3p9vlJ0dssd9vNSpkTwax6QT2RCxKAAFziC7kkVXflqcqk0Vk4bEUb1Gx2VSjVouVwsgDkAHMUABDZhajVSDWscGGs4BfqDVyy0CjVwTKYpWbpA45LkY517I5ZYTic5Sm5e5F415TJk4kqhm71bCQ0Vwhk7O7pFFPNEEiPFTTRgmx+PSziU1mELPwjER7wle2Owixj3bWMKMTi8RSwucVuSkxy60KxrK62qiTuDwSHwSACsmp1+sNxtNBqNoA1YTQy41ACMrNgNxEqGE0hqLb0wIB1bUAZN6AJjk4IFQABhXX4MLYXWyMIAL0IgOwVFtj+fV93y-H8qDIUDg3Sb4DwNc4IKRdIAAMABIAG9QwjABfNDQ1jTDEIpUAUNQoJ8CIKgQV1NBCDICMFGw1C8II8VQICHsHyfF830-OsrEVewAK44Dv1-MhtT1JcejvR8AFtCFkR9qP-XU5IUqiaPglMOGgx4tQDaFNJdDhiNDAAZQgokwgB9HD01ocwwi1DBsAY3Cd3w9srjhYjzMstDSPIyjqLIBynOwei0Nk+TFJopsPNFFjfzYyoorU6j+yVDjVJisTFy1Ky8oKs0NSkxAABEqH4fBARQTdQNtCqqpqurRMM70dINKRmra+4Or0+wpR6pDbP+ZAqAssJ6AY7rf1cuzQBqiIIkm-DhRFOFGuq2rQLIYikHG5aprQxbDvwrrtt-JREqoZLTE2jL7E2mawJNM0AD8Po3N6SstMBAF-FcBT1ACgyLSagdTk5honYkGiDYcGUEh7BaO4EFII4N5UewMJwSkcH9KuTHmDRhCOAAChKXUqC1NBxVDcG0AAShUJQ3OwFAqGYAAVSpPKLUAKc0KmadbEoGbx6mxGZ5QlEsdnOZ50xxSmAA3bZbuIWGwepxGWDqPjGnsLX4Z1pGyDJ5gVMIcU+ulpRN34fh5H1KRmER7cqFKsBACJfQBUfUAbx9AGj1IGAFkn2fA1bTDsjdImTcACt0dAfgE9BcL7FQtbOBEABpQhcFxZhQB4fP+AiV4E5bNRxgT3P8-WWu89wBv47r5vIUwipTHGjhVGjiOtTITPdXFFxQE3cVXEwr2qlBij1Kb20Au2ILCCbuPE9J5PU5BdPVEzqU28L4vS-LmvE6o2fAvUsgm9AAAyUA+ubcVz7bjuu7iOfV6bh7VGX+e1F16Z1nAaUeUg8qT2nr9UAXN+CWF1IuWQuBbRwIQUg3AZAubnFAKhKU41EHgmQWoO+jwT64DLrAquXN35GE7radBRDcB-1gfAwghDmDIKHlKS2ckba-l0kYaEuotTW1AG7GSHs6EzzgUgKm2M3yoP4HIqgCjZBYPOHg6ER8yElwoeXLmYgYTihoU3D+toVFqJYbI+RYQ3zcOhLwsRfUhFXBEWIiRUjYDQKBnAkOKBXybnkEo-xgT5AaIzlKAAtAQjBJD87Hz0ZQwxJj37eM-qAUJuogm8QaJlVhWSckOKuLEph4irb8JglqVxnB3HK3durbxMi2EAEcUCfEIKwJRlg2kdNYBE-eh9SFFySQYsQUTjGwLSfQ9iPT2njVYP2AcrC5l9OKZwJxkyXFSjqeIhpN0mkwI+LYbYAAhXAAA1N8KBCCK0ILaY5TAqDnKubIG5dyN5J0sGCKg-S+pSH1LgBQUhXnvNiJooZCTdGnwronPmoBL5vzMUnUFtzKhwjvsrQgasqAFnJK-Ru9d0mwEeE8iIuoQTECQNsNA4JcE8IqU-ARBoakItEfUyRjToQYBTpuXAlTdLiDoRkx5jYDaZVFc8y51y0VEDINSr4uMmVVNAAAHz2Zyz2BggA",target:"_blank",rel:"noopener noreferrer",children:"本文案例的合并"})})]})}function B(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(w,{...e})}):w(e)}let m=B;B.__RSPRESS_PAGE_META={},B.__RSPRESS_PAGE_META["TypeScript%20%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F6.%E5%A5%97%E8%B7%AF%E4%BA%8C%EF%BC%9A%E9%87%8D%E6%96%B0%E6%9E%84%E9%80%A0%E5%81%9A%E5%8F%98%E6%8D%A2.md"]={toc:[{text:"重新构造",id:"重新构造",depth:2},{text:"数组类型的重新构造",id:"数组类型的重新构造",depth:2},{text:"Push",id:"push",depth:3},{text:"Unshift",id:"unshift",depth:3},{text:"Zip",id:"zip",depth:3},{text:"字符串类型的重新构造",id:"字符串类型的重新构造",depth:2},{text:"CapitalizeStr",id:"capitalizestr",depth:3},{text:"CamelCase",id:"camelcase",depth:3},{text:"DropSubStr",id:"dropsubstr",depth:3},{text:"函数类型的重新构造：",id:"函数类型的重新构造",depth:2},{text:"AppendArgument",id:"appendargument",depth:3},{text:"索引类型的重新构造",id:"索引类型的重新构造",depth:2},{text:"Mapping",id:"mapping",depth:3},{text:"UppercaseKey",id:"uppercasekey",depth:3},{text:"Record",id:"record",depth:4},{text:"ToReadonly",id:"toreadonly",depth:3},{text:"ToPartial",id:"topartial",depth:3},{text:"ToMutable",id:"tomutable",depth:3},{text:"ToRequired",id:"torequired",depth:3},{text:"FilterByValueType",id:"filterbyvaluetype",depth:3},{text:"总结",id:"总结",depth:2}],title:"6.套路二：重新构造做变换",headingTitle:"6.套路二：重新构造做变换",frontmatter:{}}}}]);