"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["33767"],{924915:function(e,n,s){s.r(n),s.d(n,{default:()=>o});var r=s(552676),i=s(740453);let l=s.p+"static/image/aab2e383795a7b53286cd0e1149ad9fa.bc6ca4ea.webp",d=s.p+"static/image/3fb5a0b54c5193da5b90709c64465f66.e6c69e2b.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",strong:"strong",blockquote:"blockquote",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",pre:"pre",img:"img",ul:"ul",li:"li"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"9如何引入客户端数据库及相关工具",children:["9.如何引入客户端数据库及相关工具？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9如何引入客户端数据库及相关工具",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在上一节中我们介绍如何使用 Pinia 库来管控应用的数据状态，现在我们是时候该考虑如何把应用内的业务数据持久化到用户本地磁盘上了。"}),"\n",(0,r.jsxs)(n.p,{children:["对于简单的数据类型来说，开发者可以直接把它们存储在 localStorage 中，这些数据是",(0,r.jsx)(n.code,{children:"持久化"}),"在用户磁盘上的，不会因为用户重启应用或者重装应用而丢失。"]}),"\n",(0,r.jsxs)(n.p,{children:["对于稍微复杂的数据类型来说，开发者有两个选择，其一是把这类数据存储在 IndexedDB 中，与 localStorage 类似，这也是谷歌浏览器核心提供的数据持久化工具，",(0,r.jsx)(n.strong,{children:"它以 JSON 对象的方式存储数据，数据较多时，复杂的条件查询效率不佳"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["第二个选择就是把数据存储在 SQLite 中，这是一个关系型数据库，",(0,r.jsx)(n.strong,{children:"天生对复杂条件查询支持良好"}),"。接下来我们就介绍如何把 SQLite 引入到 Electron 应用中。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://sqlite.org/",target:"_blank",rel:"noopener noreferrer",children:"SQLite"})," 是使用 C 语言编写的嵌入式数据库引擎，它不像常见的客户端-服务器数据库范例，SQLite 内嵌到开发者的应用中，直接为开发者提供数据存储与访问的 API，数据存储介质可以是终端的内存也可以是磁盘，其特点是自给自足、无服务器、零配置、支持事务。它是在世界上部署最广泛的 SQL 数据库引擎。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"引入-sqlite",children:["引入 SQLite",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#引入-sqlite",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["有很多 Node.js 的库可以把 SQLite 引入到 Node.js 的开发环境中，比如：",(0,r.jsx)(n.a,{href:"https://github.com/WiseLibs/better-sqlite3",target:"_blank",rel:"noopener noreferrer",children:"better-sqlite3"})," 和 ",(0,r.jsx)(n.a,{href:"https://github.com/TryGhost/node-sqlite3",target:"_blank",rel:"noopener noreferrer",children:"sqlite3"}),"，由于",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"在性能方面表现的更出色，所以我们选用它作为我们的 SQLite 包装器。下表是两个库的性能对比："]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{}),"\n",(0,r.jsxs)(n.th,{children:["select 1 row \xa0",(0,r.jsx)(n.code,{children:"get()"}),"\xa0"]}),"\n",(0,r.jsxs)(n.th,{children:["select 100 rows \xa0\xa0",(0,r.jsx)(n.code,{children:"all()"}),"\xa0\xa0"]}),"\n",(0,r.jsxs)(n.th,{children:["select 100 rows ",(0,r.jsx)(n.code,{children:"iterate()"})," 1-by-1"]}),"\n",(0,r.jsxs)(n.th,{children:["insert 1 row ",(0,r.jsx)(n.code,{children:"run()"})]}),"\n",(0,r.jsx)(n.th,{children:"insert 100 rows in a transaction"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:"better-sqlite3"}),"\n",(0,r.jsx)(n.td,{children:"1x"}),"\n",(0,r.jsx)(n.td,{children:"1x"}),"\n",(0,r.jsx)(n.td,{children:"1x"}),"\n",(0,r.jsx)(n.td,{children:"1x"}),"\n",(0,r.jsx)(n.td,{children:"1x"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/sqlite",target:"_blank",rel:"noopener noreferrer",children:"sqlite"})," and ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/sqlite3",target:"_blank",rel:"noopener noreferrer",children:"sqlite3"})]}),"\n",(0,r.jsx)(n.td,{children:"11.7x slower"}),"\n",(0,r.jsx)(n.td,{children:"2.9x slower"}),"\n",(0,r.jsx)(n.td,{children:"24.4x slower"}),"\n",(0,r.jsx)(n.td,{children:"2.8x slower"}),"\n",(0,r.jsx)(n.td,{children:"15.6x slower"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["你可以使用如下指令为我们的工程安装",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install better-sqlite3 -D\n"})}),"\n",(0,r.jsx)(n.p,{children:"这个模块安装完成后，大概率你是无法使用这个模块的，你可能会碰到如下报错信息："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-error",children:"Error: The module '...node_modules\\better-sqlite3\\build\\Release\\better_sqlite3.node'\nwas compiled against a different Node.js version using\nNODE_MODULE_VERSION $XYZ. This version of Node.js requires\nNODE_MODULE_VERSION $ABC. Please try re-compiling or re-installing\nthe module (for instance, using `npm rebuild` or `npm install`).\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这是因为 ",(0,r.jsx)(n.strong,{children:"Electron 内置的 Node.js 的版本可能与你编译原生模块使用的 Node.js 的版本不同"}),"导致的。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Electron 内置的 Node.js 中的一些模块也与 Node.js 发行版不同，比如 Electron 使用了 Chromium 的加密解密库 BoringSL，而 Node.js 发行版使用的是 OpenSSL 加密解密库。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["建议开发者使用 Electron 团队提供的 ",(0,r.jsx)(n.a,{href:"https://github.com/electron/electron-rebuild",target:"_blank",rel:"noopener noreferrer",children:"electron-rebuild"})," 工具来完成此工作，因为 electron-rebuild 会帮我们确定 Electron 的版本号、Electron 内置的 Node.js 的版本号、以及 Node.js 使用的 ABI 的版本号，并根据这些版本号下载不同的头文件和类库。"]}),"\n",(0,r.jsxs)(n.p,{children:["使用如下命令安装",(0,r.jsx)(n.code,{children:"electron-rebuild"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install electron-rebuild -D\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后，在你的工程的 package.json 中增加如下配置节（",(0,r.jsx)(n.code,{children:"scripts"}),"配置节）："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'"rebuild": "electron-rebuild -f -w better-sqlite3"\n'})}),"\n",(0,r.jsx)(n.p,{children:"接着，在工程根目录下执行如下指令："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run rebuild\n"})}),"\n",(0,r.jsxs)(n.p,{children:["当你的工程下出现了这个文件",(0,r.jsx)(n.code,{children:"node_modules\\better-sqlite3\\build\\Release\\better_sqlite3.node"}),"，才证明",(0,r.jsx)(n.code,{children:"better_sqlite3"}),"模块编译成功了，如果上述指令没有帮你完成这项工作，你可以把指令配置到",(0,r.jsx)(n.code,{children:"node_modules\\better-sqlite3"}),"模块内部再执行一次，一般就可以编译成功了（如下图所示）。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["这样就为 Electron 重新编译了一遍",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"，我们就可以在 Electron 应用内使用",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"提供的 API 了。"]}),"\n",(0,r.jsxs)(n.p,{children:["你可以在应用中试试如下代码（渲染进程和主进程均可，甚至在渲染进程的开发者调试工具中也没问题），看是不是可以正确创建 ",(0,r.jsx)(n.code,{children:"SQLite"})," 的数据库。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const Database = require("better-sqlite3");\nconst db = new Database("db.db", { verbose: console.log, nativeBinding: "./node_modules/better-sqlite3/build/Release/better_sqlite3.node" });\n'})}),"\n",(0,r.jsxs)(n.p,{children:["不出意外的话，你的工程根目录下将会创建一个名为",(0,r.jsx)(n.code,{children:"db.db"}),"的 SQLite 数据库文件，说明",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"库已经生效了。"]}),"\n",(0,r.jsxs)(n.h2,{id:"压缩安装包体积",children:["压缩安装包体积",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#压缩安装包体积",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["可能有的同学会有疑问：",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"不是一个原生模块吗，但这里我们仍然把它安装成了开发依赖，大家都知道",(0,r.jsxs)(n.strong,{children:["原生模块是无法被 ",(0,r.jsx)(n.code,{children:"Vite"})," 编译到 ",(0,r.jsx)(n.code,{children:"JavaScript"}),"的"]}),"，那我们为什么还要把它安装程开发依赖呢？"]}),"\n",(0,r.jsxs)(n.p,{children:["把",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"安装成生产依赖，在功能上没有任何问题，",(0,r.jsx)(n.code,{children:"electron-builder"})," 在制作安装包时，会自动为安装包附加这个依赖（",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"这个库自己的依赖也会被正确附加到安装包内）。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["但",(0,r.jsx)(n.code,{children:"electron-builder"}),"会把很多无用的文件（很多编译原生模块时的中间产物）也附加到安装包内"]}),"。无形中增加了安装包的体积（大概 10M），如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"7.png"})}),"\n",(0,r.jsx)(n.p,{children:"上图中红框内的文件都是无用的文件，还有很多无用的文件没出现在这个截图中，如果你像我一样，无法容忍这一点，那么接下去我们就介绍一种办法来处理这个问题。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"无用文件的多少实际上与开发环境和具体原生模块的配置有关，如果你的环境中没有过多的垃圾文件，你不做这些工作问题也不大。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["还记得我们在",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7152717638173966349/section/7152717638244761637",target:"_blank",rel:"noopener noreferrer",children:"《如何开发 Vite 3 插件打包 Electron 应用？》"}),"中讲的",(0,r.jsx)(n.code,{children:"BuildObj"}),"类吗？我们为这个对象增加一个方法，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'//plugins\\buildPlugin.ts\n//import fs from "fs-extra";\nasync prepareSqlite() {\n  //拷贝better-sqlite3\n  let srcDir = path.join(process.cwd(), `node_modules/better-sqlite3`);\n  let destDir = path.join(process.cwd(), `dist/node_modules/better-sqlite3`);\n  fs.ensureDirSync(destDir);\n  fs.copySync(srcDir, destDir, {\n    filter: (src, dest) => {\n      if (src.endsWith("better-sqlite3") || src.endsWith("build") || src.endsWith("Release") || src.endsWith("better_sqlite3.node")) return true;\n      else if (src.includes("node_modules\\\\better-sqlite3\\\\lib")) return true;\n      else return false;\n    },\n  });\n\n  let pkgJson = `{"name": "better-sqlite3","main": "lib/index.js"}`;\n  let pkgJsonPath = path.join(process.cwd(), `dist/node_modules/better-sqlite3/package.json`);\n  fs.writeFileSync(pkgJsonPath, pkgJson);\n  //制作bindings模块\n  let bindingPath = path.join(process.cwd(), `dist/node_modules/bindings/index.js`);\n  fs.ensureFileSync(bindingPath);\n  let bindingsContent = `module.exports = () => {\nlet addonPath = require("path").join(__dirname, \'../better-sqlite3/build/Release/better_sqlite3.node\');\nreturn require(addonPath);\n};`;\n  fs.writeFileSync(bindingPath, bindingsContent);\n\n  pkgJson = `{"name": "bindings","main": "index.js"}`;\n  pkgJsonPath = path.join(process.cwd(), `dist/node_modules/bindings/package.json`);\n  fs.writeFileSync(pkgJsonPath, pkgJson);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"这段代码主要做了两个工作。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["第一：把开发环境的",(0,r.jsx)(n.code,{children:"node_modules\\better-sqlite3"}),"目录下",(0,r.jsx)(n.strong,{children:"有用"}),"的文件拷贝到",(0,r.jsx)(n.code,{children:"dist\\node_modules\\better-sqlite3"}),"目录下，并为这个模块自制了一个简单的",(0,r.jsx)(n.code,{children:"package.json"}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["第二：完全自己制作了一个",(0,r.jsx)(n.code,{children:"bindings"}),"模块，把这个模块放置在",(0,r.jsx)(n.code,{children:"dist\\node_modules\\bindings"}),"目录下。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["这里",(0,r.jsx)(n.code,{children:"bindings"}),"模块是",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"模块依赖的一个模块，它的作用仅仅是确定原生模块文件",(0,r.jsx)(n.code,{children:"better_sqlite3.node"}),"的路径。"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来再修改一下",(0,r.jsx)(n.code,{children:"BuildObj"}),"的",(0,r.jsx)(n.code,{children:"preparePackageJson"}),"方法，在生成",(0,r.jsx)(n.code,{children:"package.json"}),"文件之前，为其附加两个生产依赖，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'//版本号是否正确无关紧要\nlocalPkgJson.dependencies["better-sqlite3"] = "*";\nlocalPkgJson.dependencies["bindings"] = "*";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["有了这两个配置",(0,r.jsx)(n.code,{children:"electron-builder"}),"就不会再为我们自动安装这些模块了。"]}),"\n",(0,r.jsxs)(n.p,{children:["完成这些工作后，在",(0,r.jsx)(n.code,{children:"closeBundle"}),"钩子函数中调用这个方法：",(0,r.jsx)(n.code,{children:"buildObj.prepareSqlite()"}),"，你再打包看看，安装包的体积是否变小了呢？"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["你可以在",(0,r.jsx)(n.code,{children:"release\\win-unpacked\\resources"}),"这个路径下执行",(0,r.jsx)(n.code,{children:"asar list app.asar"}),"这个命令行指令，观察打包到生产环境的文件（需要全局安装 ",(0,r.jsx)(n.a,{href:"https://github.com/electron/asar",target:"_blank",rel:"noopener noreferrer",children:"asar"})," 工具）。"]}),"\n",(0,r.jsxs)(n.p,{children:["asar 是一种特殊的存档格式，它可以把大批的文件以一种无损、无压缩的方式链接在一起，并提供随机访问支持。默认情况下 electron-builder 会把开发者编写的 HTML、CSS 和 JavaScript 代码以及相关的资源打包成 asar 文件嵌入到安装包中，再分发给用户。electron-builder 是通过 Electron 官方提供的 ",(0,r.jsx)(n.a,{href:"https://github.com/electron/asar",target:"_blank",rel:"noopener noreferrer",children:"asar 工具"}),"制成和提取 asar 文档的。开发者自己全局安装这个工具，随时查阅生产环境下的资源文件。（这是非常有必要的。）"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"引入-knexjs",children:["引入 Knex.js",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#引入-knexjs",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["成功引入",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"并且压缩了",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"模块在安装包的体积后，我们马上就面临着另一个问题需要解决。"]}),"\n",(0,r.jsxs)(n.p,{children:["使用",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"读写数据库中的数据时，要书写 ",(0,r.jsx)(n.code,{children:"SQL"})," 语句，这种语句是专门为数据库准备的指令，是不太符合现代编程语言的习惯的，下面是为 sqlite 数据库建表和在对应表中完成增删改查的 ",(0,r.jsx)(n.code,{children:"SQL"})," 语句："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"create table admin(username text,age integer);\ninsert into admin values('allen',18);\nselect * from admin;\nupdate admin set username='allen001',age=88 where username='allen' and age=18;\ndelete from admin where username='allen001';\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们完全可以使用",(0,r.jsx)(n.code,{children:"Knex.js"}),"库来完成对应的操作，",(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"Knex.js"}),"允许我们使用 JavaScript 代码来操作数据库里的数据和表结构，它会帮我们把 JavaScript 代码转义成具体的 SQL 语句，再把 SQL 语句交给数据库处理。我们可以把它理解为一种 SQL Builder"]}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["安装",(0,r.jsx)(n.code,{children:"Knex.js"}),"的指令如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install knex -D\n"})}),"\n",(0,r.jsx)(n.p,{children:"这个库大部分时候都被用在 Node.js 的服务端，所以设计过程中没有过多地考虑库的体积的问题。但如果你不在意安装包的体积，也可以以生产依赖的形式安装这个库，让 electron-builder 为你安装这个模块和它依赖的那些子模块。"}),"\n",(0,r.jsx)(n.p,{children:"如果你希望做得完美一些，那么我们下面就介绍打包之前编译这个库的方法，代码如下所示："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'//plugins\\buildPlugin.ts\n//import fs from "fs-extra";\nprepareKnexjs() {\n  let pkgJsonPath = path.join(process.cwd(), `dist/node_modules/knex`);\n  fs.ensureDirSync(pkgJsonPath);\n  require("esbuild").buildSync({\n    entryPoints: ["./node_modules/knex/knex.js"],\n    bundle: true,\n    platform: "node",\n    format: "cjs",\n    minify: true,\n    outfile: "./dist/node_modules/knex/index.js",\n    external: ["oracledb", "pg-query-stream", "pg", "sqlite3", "tedious", "mysql", "mysql2", "better-sqlite3"],\n  });\n  let pkgJson = `{"name": "bindings","main": "index.js"}`;\n  pkgJsonPath = path.join(process.cwd(), `dist/node_modules/knex/package.json`);\n  fs.writeFileSync(pkgJsonPath, pkgJson);\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这个方法也是放置在",(0,r.jsx)(n.code,{children:"buildPlugin.ts"}),"文件中的，相对于压缩",(0,r.jsx)(n.code,{children:"better-sqlite3"}),"的体积来说，压缩",(0,r.jsx)(n.code,{children:"Knex.js"}),"包的体积就简单很多了，我们仅仅是通过",(0,r.jsx)(n.code,{children:"esbuild"}),"工具编译了一下这个包的代码就完成了工作。"]}),"\n",(0,r.jsx)(n.p,{children:"这段代码有以下几点需要注意。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["配置项",(0,r.jsx)(n.code,{children:"external"}),"是为了避免编译过程中",(0,r.jsx)(n.code,{children:"esbuild"}),"去寻找这些模块而导致编译失败，也就是说",(0,r.jsx)(n.code,{children:"Knex.js"}),"中这样的代码会保持原样输出到编译产物中：",(0,r.jsx)(n.code,{children:"require('better-sqlite3')"}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["同样，我们要再为 package.json 增加一个生产依赖：",(0,r.jsx)(n.code,{children:'localPkgJson.dependencies["knex"] = "*";'}),"，以避免 electron-builder 为我们安装",(0,r.jsx)(n.code,{children:"Knex.js"}),"模块。"]}),"\n",(0,r.jsxs)(n.li,{children:["别忘记在",(0,r.jsx)(n.code,{children:"closeBundle"}),"钩子函数中调用这个方法：",(0,r.jsx)(n.code,{children:"buildObj.prepareKnexjs()"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"完成这些工作之后，我们就把 Knex.js 安装到我们的工程内了。我们将在下一节介绍如何使用这个库。"}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["本节我们讲了三个知识点，第一个是如何为工程引入原生模块 better-sqlite3，在介绍这部分知识时，我们介绍了如何使用 lectron-rebuild 编译原生模块。第二个知识点是如何压缩 better-sqlite3 这个依赖库的体积，在这里丰富了编译插件的逻辑（这是",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7152717638173966349/section/7152717638244761637",target:"_blank",rel:"noopener noreferrer",children:"《如何开发 Vite3 插件打包 Electron 应用》"}),"介绍的内容）。第三个知识点是如何引入 Knex.js 库并压缩这个依赖库的体积。希望你学完本节的知识后能更深入地掌控 electron-builder 的打包流程。"]}),"\n",(0,r.jsx)(n.p,{children:"下一节我们将介绍一些基础的数据库操作知识，让大家在学习数据库基础操作的同时掌握 better-sqlite3 和 Knex.js 的用法。"}),"\n",(0,r.jsxs)(n.h2,{id:"源码",children:["源码",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#源码",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本节示例代码请通过如下地址自行下载："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://gitee.com/horsejs_admin/electron-jue-jin/tree/db",target:"_blank",rel:"noopener noreferrer",children:"源码仓储"})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let o=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["Electron%20%2B%20Vue%203%20%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%2F9.%E5%A6%82%E4%BD%95%E5%BC%95%E5%85%A5%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%EF%BC%9F.md"]={toc:[{text:"引入 SQLite",id:"引入-sqlite",depth:2},{text:"压缩安装包体积",id:"压缩安装包体积",depth:2},{text:"引入 Knex.js",id:"引入-knexjs",depth:2},{text:"总结",id:"总结",depth:2},{text:"源码",id:"源码",depth:2}],title:"9.如何引入客户端数据库及相关工具？",headingTitle:"9.如何引入客户端数据库及相关工具？",frontmatter:{}}}}]);