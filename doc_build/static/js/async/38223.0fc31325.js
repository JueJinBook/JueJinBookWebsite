"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["38223"],{814706:function(e,n,c){c.r(n),c.d(n,{default:()=>l});var s=c(552676),r=c(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",code:"code",pre:"pre",ul:"ul",li:"li"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"2let-和-const-命令",children:["2.let 和 const 命令",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2let-和-const-命令",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"let-命令",children:["let 命令",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#let-命令",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"基本用法",children:["基本用法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本用法",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 新增了",(0,s.jsx)(n.code,{children:"let"}),"命令，用来声明变量。它的用法类似于",(0,s.jsx)(n.code,{children:"var"}),"，但是所声明的变量，只在",(0,s.jsx)(n.code,{children:"let"}),"命令所在的代码块内有效。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"{\n  let a = 10;\n  var b = 1;\n}\n\na // ReferenceError: a is not defined.\nb // 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码在代码块之中，分别用",(0,s.jsx)(n.code,{children:"let"}),"和",(0,s.jsx)(n.code,{children:"var"}),"声明了两个变量。然后在代码块之外调用这两个变量，结果",(0,s.jsx)(n.code,{children:"let"}),"声明的变量报错，",(0,s.jsx)(n.code,{children:"var"}),"声明的变量返回了正确的值。这表明，",(0,s.jsx)(n.code,{children:"let"}),"声明的变量只在它所在的代码块有效。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"for"}),"循环的计数器，就很合适使用",(0,s.jsx)(n.code,{children:"let"}),"命令。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"for (let i = 0; i < 10; i++) {\n  // ...\n}\n\nconsole.log(i);\n// ReferenceError: i is not defined\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，计数器",(0,s.jsx)(n.code,{children:"i"}),"只在",(0,s.jsx)(n.code,{children:"for"}),"循环体内有效，在循环体外引用就会报错。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面的代码如果使用",(0,s.jsx)(n.code,{children:"var"}),"，最后输出的是",(0,s.jsx)(n.code,{children:"10"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，变量",(0,s.jsx)(n.code,{children:"i"}),"是",(0,s.jsx)(n.code,{children:"var"}),"命令声明的，在全局范围内都有效，所以全局只有一个变量",(0,s.jsx)(n.code,{children:"i"}),"。每一次循环，变量",(0,s.jsx)(n.code,{children:"i"}),"的值都会发生改变，而循环内被赋给数组",(0,s.jsx)(n.code,{children:"a"}),"的函数内部的",(0,s.jsx)(n.code,{children:"console.log(i)"}),"，里面的",(0,s.jsx)(n.code,{children:"i"}),"指向的就是全局的",(0,s.jsx)(n.code,{children:"i"}),"。也就是说，所有数组",(0,s.jsx)(n.code,{children:"a"}),"的成员里面的",(0,s.jsx)(n.code,{children:"i"}),"，指向的都是同一个",(0,s.jsx)(n.code,{children:"i"}),"，导致运行时输出的是最后一轮的",(0,s.jsx)(n.code,{children:"i"}),"的值，也就是 10。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果使用",(0,s.jsx)(n.code,{children:"let"}),"，声明的变量仅在块级作用域内有效，最后输出的是 6。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，变量",(0,s.jsx)(n.code,{children:"i"}),"是",(0,s.jsx)(n.code,{children:"let"}),"声明的，当前的",(0,s.jsx)(n.code,{children:"i"}),"只在本轮循环有效，所以每一次循环的",(0,s.jsx)(n.code,{children:"i"}),"其实都是一个新的变量，所以最后输出的是",(0,s.jsx)(n.code,{children:"6"}),"。你可能会问，如果每一轮循环的变量",(0,s.jsx)(n.code,{children:"i"}),"都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量",(0,s.jsx)(n.code,{children:"i"}),"时，就在上一轮循环的基础上进行计算。"]}),"\n",(0,s.jsxs)(n.p,{children:["另外，",(0,s.jsx)(n.code,{children:"for"}),"循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"for (let i = 0; i < 3; i++) {\n  let i = 'abc';\n  console.log(i);\n}\n// abc\n// abc\n// abc\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码正确运行，输出了 3 次",(0,s.jsx)(n.code,{children:"abc"}),"。这表明函数内部的变量",(0,s.jsx)(n.code,{children:"i"}),"与循环变量",(0,s.jsx)(n.code,{children:"i"}),"不在同一个作用域，有各自单独的作用域（同一个作用域不可使用 ",(0,s.jsx)(n.code,{children:"let"})," 重复声明同一个变量）。"]}),"\n",(0,s.jsxs)(n.h3,{id:"不存在变量提升",children:["不存在变量提升",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#不存在变量提升",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"var"}),"命令会发生“变量提升”现象，即变量可以在声明之前使用，值为",(0,s.jsx)(n.code,{children:"undefined"}),"。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。"]}),"\n",(0,s.jsxs)(n.p,{children:["为了纠正这种现象，",(0,s.jsx)(n.code,{children:"let"}),"命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，变量",(0,s.jsx)(n.code,{children:"foo"}),"用",(0,s.jsx)(n.code,{children:"var"}),"命令声明，会发生变量提升，即脚本开始运行时，变量",(0,s.jsx)(n.code,{children:"foo"}),"已经存在了，但是没有值，所以会输出",(0,s.jsx)(n.code,{children:"undefined"}),"。变量",(0,s.jsx)(n.code,{children:"bar"}),"用",(0,s.jsx)(n.code,{children:"let"}),"命令声明，不会发生变量提升。这表示在声明它之前，变量",(0,s.jsx)(n.code,{children:"bar"}),"是不存在的，这时如果用到它，就会抛出一个错误。"]}),"\n",(0,s.jsxs)(n.h3,{id:"暂时性死区",children:["暂时性死区",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#暂时性死区",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["只要块级作用域内存在",(0,s.jsx)(n.code,{children:"let"}),"命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，存在全局变量",(0,s.jsx)(n.code,{children:"tmp"}),"，但是块级作用域内",(0,s.jsx)(n.code,{children:"let"}),"又声明了一个局部变量",(0,s.jsx)(n.code,{children:"tmp"}),"，导致后者绑定这个块级作用域，所以在",(0,s.jsx)(n.code,{children:"let"}),"声明变量前，对",(0,s.jsx)(n.code,{children:"tmp"}),"赋值会报错。"]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 明确规定，如果区块中存在",(0,s.jsx)(n.code,{children:"let"}),"和",(0,s.jsx)(n.code,{children:"const"}),"命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。"]}),"\n",(0,s.jsxs)(n.p,{children:["总之，在代码块内，使用",(0,s.jsx)(n.code,{children:"let"}),"命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"if (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，在",(0,s.jsx)(n.code,{children:"let"}),"命令声明变量",(0,s.jsx)(n.code,{children:"tmp"}),"之前，都属于变量",(0,s.jsx)(n.code,{children:"tmp"}),"的“死区”。"]}),"\n",(0,s.jsxs)(n.p,{children:["“暂时性死区”也意味着",(0,s.jsx)(n.code,{children:"typeof"}),"不再是一个百分之百安全的操作。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"typeof x; // ReferenceError\nlet x;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，变量",(0,s.jsx)(n.code,{children:"x"}),"使用",(0,s.jsx)(n.code,{children:"let"}),"命令声明，所以在声明之前，都属于",(0,s.jsx)(n.code,{children:"x"}),"的“死区”，只要用到该变量就会报错。因此，",(0,s.jsx)(n.code,{children:"typeof"}),"运行时就会抛出一个",(0,s.jsx)(n.code,{children:"ReferenceError"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["作为比较，如果一个变量根本没有被声明，使用",(0,s.jsx)(n.code,{children:"typeof"}),"反而不会报错。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'typeof undeclared_variable // "undefined"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"undeclared_variable"}),"是一个不存在的变量名，结果返回“undefined”。所以，在没有",(0,s.jsx)(n.code,{children:"let"}),"之前，",(0,s.jsx)(n.code,{children:"typeof"}),"运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。"]}),"\n",(0,s.jsx)(n.p,{children:"有些“死区”比较隐蔽，不太容易发现。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，调用",(0,s.jsx)(n.code,{children:"bar"}),"函数之所以报错（某些实现可能不报错），是因为参数",(0,s.jsx)(n.code,{children:"x"}),"默认值等于另一个参数",(0,s.jsx)(n.code,{children:"y"}),"，而此时",(0,s.jsx)(n.code,{children:"y"}),"还没有声明，属于“死区”。如果",(0,s.jsx)(n.code,{children:"y"}),"的默认值是",(0,s.jsx)(n.code,{children:"x"}),"，就不会报错，因为此时",(0,s.jsx)(n.code,{children:"x"}),"已经声明了。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function bar(x = 2, y = x) {\n  return [x, y];\n}\nbar(); // [2, 2]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["另外，下面的代码也会报错，与",(0,s.jsx)(n.code,{children:"var"}),"的行为不同。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 不报错\nvar x = x;\n\n// 报错\nlet x = x;\n// ReferenceError: x is not defined\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码报错，也是因为暂时性死区。使用",(0,s.jsx)(n.code,{children:"let"}),"声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量",(0,s.jsx)(n.code,{children:"x"}),"的声明语句还没有执行完成前，就去取",(0,s.jsx)(n.code,{children:"x"}),"的值，导致报错”x 未定义“。"]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 规定暂时性死区和",(0,s.jsx)(n.code,{children:"let"}),"、",(0,s.jsx)(n.code,{children:"const"}),"语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。"]}),"\n",(0,s.jsx)(n.p,{children:"总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。"}),"\n",(0,s.jsxs)(n.h3,{id:"不允许重复声明",children:["不允许重复声明",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#不允许重复声明",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"let"}),"不允许在相同作用域内，重复声明同一个变量。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 报错\nfunction func() {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction func() {\n  let a = 10;\n  let a = 1;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"因此，不能在函数内部重新声明参数。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function func(arg) {\n  let arg;\n}\nfunc() // 报错\n\nfunction func(arg) {\n  {\n    let arg;\n  }\n}\nfunc() // 不报错\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"块级作用域",children:["块级作用域",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#块级作用域",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"为什么需要块级作用域",children:["为什么需要块级作用域？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么需要块级作用域",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。"}),"\n",(0,s.jsx)(n.p,{children:"第一种场景，内层变量可能会覆盖外层变量。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var tmp = new Date();\n\nfunction f() {\n  console.log(tmp);\n  if (false) {\n    var tmp = 'hello world';\n  }\n}\n\nf(); // undefined\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码的原意是，",(0,s.jsx)(n.code,{children:"if"}),"代码块的外部使用外层的",(0,s.jsx)(n.code,{children:"tmp"}),"变量，内部使用内层的",(0,s.jsx)(n.code,{children:"tmp"}),"变量。但是，函数",(0,s.jsx)(n.code,{children:"f"}),"执行后，输出结果为",(0,s.jsx)(n.code,{children:"undefined"}),"，原因在于变量提升，导致内层的",(0,s.jsx)(n.code,{children:"tmp"}),"变量覆盖了外层的",(0,s.jsx)(n.code,{children:"tmp"}),"变量。"]}),"\n",(0,s.jsx)(n.p,{children:"第二种场景，用来计数的循环变量泄露为全局变量。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var s = 'hello';\n\nfor (var i = 0; i < s.length; i++) {\n  console.log(s[i]);\n}\n\nconsole.log(i); // 5\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，变量",(0,s.jsx)(n.code,{children:"i"}),"只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。"]}),"\n",(0,s.jsxs)(n.h3,{id:"es6-的块级作用域",children:["ES6 的块级作用域",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#es6-的块级作用域",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"let"}),"实际上为 JavaScript 新增了块级作用域。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面的函数有两个代码块，都声明了变量",(0,s.jsx)(n.code,{children:"n"}),"，运行后输出 5。这表示外层代码块不受内层代码块的影响。如果两次都使用",(0,s.jsx)(n.code,{children:"var"}),"定义变量",(0,s.jsx)(n.code,{children:"n"}),"，最后输出的值才是 10。"]}),"\n",(0,s.jsx)(n.p,{children:"ES6 允许块级作用域的任意嵌套。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"{{{{\n  {let insane = 'Hello World'}\n  console.log(insane); // 报错\n}}}};\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。第四层作用域无法读取第五层作用域的内部变量。"}),"\n",(0,s.jsx)(n.p,{children:"内层作用域可以定义外层作用域的同名变量。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"{{{{\n  let insane = 'Hello World';\n  {let insane = 'Hello World'}\n}}}};\n"})}),"\n",(0,s.jsx)(n.p,{children:"块级作用域的出现，实际上使得获得广泛应用的匿名立即执行函数表达式（匿名 IIFE）不再必要了。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"块级作用域与函数声明",children:["块级作用域与函数声明",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#块级作用域与函数声明",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"函数能不能在块级作用域之中声明？这是一个相当令人混淆的问题。"}),"\n",(0,s.jsx)(n.p,{children:"ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 情况一\nif (true) {\n  function f() {}\n}\n\n// 情况二\ntry {\n  function f() {}\n} catch(e) {\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面两种函数声明，根据 ES5 的规定都是非法的。"}),"\n",(0,s.jsx)(n.p,{children:"但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此上面两种情况实际都能运行，不会报错。"}),"\n",(0,s.jsxs)(n.p,{children:["ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于",(0,s.jsx)(n.code,{children:"let"}),"，在块级作用域之外不可引用。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码在 ES5 中运行，会得到“I am inside!”，因为在",(0,s.jsx)(n.code,{children:"if"}),"内声明的函数",(0,s.jsx)(n.code,{children:"f"}),"会被提升到函数头部，实际运行的代码如下。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ES5 环境\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  function f() { console.log('I am inside!'); }\n  if (false) {\n  }\n  f();\n}());\n"})}),"\n",(0,s.jsxs)(n.p,{children:["ES6 就完全不一样了，理论上会得到“I am outside!”。因为块级作用域内声明的函数类似于",(0,s.jsx)(n.code,{children:"let"}),"，对作用域之外没有影响。但是，如果你真的在 ES6 浏览器中运行一下上面的代码，是会报错的，这是为什么呢？"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 浏览器的 ES6 环境\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n// Uncaught TypeError: f is not a function\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面的代码在 ES6 浏览器中，都会报错。"}),"\n",(0,s.jsxs)(n.p,{children:["原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大影响。为了减轻因此产生的不兼容问题，ES6 在",(0,s.jsx)(n.a,{href:"https://www.ecma-international.org/ecma-262/6.0/index.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics",target:"_blank",rel:"noopener noreferrer",children:"附录 B"}),"里面规定，浏览器的实现可以不遵守上面的规定，有自己的",(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6",target:"_blank",rel:"noopener noreferrer",children:"行为方式"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"允许在块级作用域内声明函数。"}),"\n",(0,s.jsxs)(n.li,{children:["函数声明类似于",(0,s.jsx)(n.code,{children:"var"}),"，即会提升到全局作用域或函数作用域的头部。"]}),"\n",(0,s.jsx)(n.li,{children:"同时，函数声明还会提升到所在的块级作用域的头部。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作",(0,s.jsx)(n.code,{children:"let"}),"处理。"]}),"\n",(0,s.jsxs)(n.p,{children:["根据这三条规则，浏览器的 ES6 环境中，块级作用域内声明的函数，行为类似于",(0,s.jsx)(n.code,{children:"var"}),"声明的变量。上面的例子实际运行的代码如下。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 浏览器的 ES6 环境\nfunction f() { console.log('I am outside!'); }\n(function () {\n  var f = undefined;\n  if (false) {\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n// Uncaught TypeError: f is not a function\n"})}),"\n",(0,s.jsx)(n.p,{children:"考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 块级作用域内部的函数声明语句，建议不要使用\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n\n// 块级作用域内部，优先使用函数表达式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"另外，还有一个需要注意的地方。ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 第一种写法，报错\nif (true) let x = 1;\n\n// 第二种写法，不报错\nif (true) {\n  let x = 1;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，第一种写法没有大括号，所以不存在块级作用域，而",(0,s.jsx)(n.code,{children:"let"}),"只能出现在当前作用域的顶层，所以报错。第二种写法有大括号，所以块级作用域成立。"]}),"\n",(0,s.jsx)(n.p,{children:"函数声明也是如此，严格模式下，函数只能声明在当前作用域的顶层。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 不报错\n'use strict';\nif (true) {\n  function f() {}\n}\n\n// 报错\n'use strict';\nif (true)\n  function f() {}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"const-命令",children:["const 命令",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#const-命令",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"基本用法-1",children:["基本用法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本用法-1",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"const"}),"声明一个只读的常量。一旦声明，常量的值就不能改变。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const PI = 3.1415;\nPI // 3.1415\n\nPI = 3;\n// TypeError: Assignment to constant variable.\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码表明改变常量的值会报错。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"const"}),"声明的变量不得改变值，这意味着，",(0,s.jsx)(n.code,{children:"const"}),"一旦声明变量，就必须立即初始化，不能留到以后赋值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const foo;\n// SyntaxError: Missing initializer in const declaration\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码表示，对于",(0,s.jsx)(n.code,{children:"const"}),"来说，只声明不赋值，就会报错。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"const"}),"的作用域与",(0,s.jsx)(n.code,{children:"let"}),"命令相同：只在声明所在的块级作用域内有效。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"if (true) {\n  const MAX = 5;\n}\n\nMAX // Uncaught ReferenceError: MAX is not defined\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"const"}),"命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"if (true) {\n  console.log(MAX); // ReferenceError\n  const MAX = 5;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码在常量",(0,s.jsx)(n.code,{children:"MAX"}),"声明之前就调用，结果报错。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"const"}),"声明的常量，也与",(0,s.jsx)(n.code,{children:"let"}),"一样不可重复声明。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var message = "Hello!";\nlet age = 25;\n\n// 以下两行都会报错\nconst message = "Goodbye!";\nconst age = 30;\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"本质",children:["本质",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本质",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"const"}),"实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，",(0,s.jsx)(n.code,{children:"const"}),"只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: "foo" is read-only\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，常量",(0,s.jsx)(n.code,{children:"foo"}),"储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把",(0,s.jsx)(n.code,{children:"foo"}),"指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。"]}),"\n",(0,s.jsx)(n.p,{children:"下面是另一个例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const a = [];\na.push('Hello'); // 可执行\na.length = 0;    // 可执行\na = ['Dave'];    // 报错\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，常量",(0,s.jsx)(n.code,{children:"a"}),"是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给",(0,s.jsx)(n.code,{children:"a"}),"，就会报错。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果真的想将对象冻结，应该使用",(0,s.jsx)(n.code,{children:"Object.freeze"}),"方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const foo = Object.freeze({});\n\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，常量",(0,s.jsx)(n.code,{children:"foo"}),"指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。"]}),"\n",(0,s.jsx)(n.p,{children:"除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var constantize = (obj) => {\n  Object.freeze(obj);\n  Object.keys(obj).forEach( (key, i) => {\n    if ( typeof obj[key] === 'object' ) {\n      constantize( obj[key] );\n    }\n  });\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"es6-声明变量的六种方法",children:["ES6 声明变量的六种方法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#es6-声明变量的六种方法",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ES5 只有两种声明变量的方法：",(0,s.jsx)(n.code,{children:"var"}),"命令和",(0,s.jsx)(n.code,{children:"function"}),"命令。ES6 除了添加",(0,s.jsx)(n.code,{children:"let"}),"和",(0,s.jsx)(n.code,{children:"const"}),"命令，后面章节还会提到，另外两种声明变量的方法：",(0,s.jsx)(n.code,{children:"import"}),"命令和",(0,s.jsx)(n.code,{children:"class"}),"命令。所以，ES6 一共有 6 种声明变量的方法。"]}),"\n",(0,s.jsxs)(n.h2,{id:"顶层对象的属性",children:["顶层对象的属性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#顶层对象的属性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["顶层对象，在浏览器环境指的是",(0,s.jsx)(n.code,{children:"window"}),"对象，在 Node 指的是",(0,s.jsx)(n.code,{children:"global"}),"对象。ES5 之中，顶层对象的属性与全局变量是等价的。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"window.a = 1;\na // 1\n\na = 2;\nwindow.a // 2\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码中，顶层对象的属性赋值与全局变量的赋值，是同一件事。"}),"\n",(0,s.jsxs)(n.p,{children:["顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，",(0,s.jsx)(n.code,{children:"window"}),"对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。"]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 为了改变这一点，一方面规定，为了保持兼容性，",(0,s.jsx)(n.code,{children:"var"}),"命令和",(0,s.jsx)(n.code,{children:"function"}),"命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，",(0,s.jsx)(n.code,{children:"let"}),"命令、",(0,s.jsx)(n.code,{children:"const"}),"命令、",(0,s.jsx)(n.code,{children:"class"}),"命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var a = 1;\n// 如果在 Node 的 REPL 环境，可以写成 global.a\n// 或者采用通用方法，写成 this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，全局变量",(0,s.jsx)(n.code,{children:"a"}),"由",(0,s.jsx)(n.code,{children:"var"}),"命令声明，所以它是顶层对象的属性；全局变量",(0,s.jsx)(n.code,{children:"b"}),"由",(0,s.jsx)(n.code,{children:"let"}),"命令声明，所以它不是顶层对象的属性，返回",(0,s.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"globalthis-对象",children:["globalThis 对象",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#globalthis-对象",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["浏览器里面，顶层对象是",(0,s.jsx)(n.code,{children:"window"}),"，但 Node 和 Web Worker 没有",(0,s.jsx)(n.code,{children:"window"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:["浏览器和 Web Worker 里面，",(0,s.jsx)(n.code,{children:"self"}),"也指向顶层对象，但是 Node 没有",(0,s.jsx)(n.code,{children:"self"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:["Node 里面，顶层对象是",(0,s.jsx)(n.code,{children:"global"}),"，但其他环境都不支持。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用",(0,s.jsx)(n.code,{children:"this"}),"关键字，但是有局限性。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["全局环境中，",(0,s.jsx)(n.code,{children:"this"}),"会返回顶层对象。但是，Node.js 模块中",(0,s.jsx)(n.code,{children:"this"}),"返回的是当前模块，ES6 模块中",(0,s.jsx)(n.code,{children:"this"}),"返回的是",(0,s.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:["函数里面的",(0,s.jsx)(n.code,{children:"this"}),"，如果函数不是作为对象的方法运行，而是单纯作为函数运行，",(0,s.jsx)(n.code,{children:"this"}),"会指向顶层对象。但是，严格模式下，这时",(0,s.jsx)(n.code,{children:"this"}),"会返回",(0,s.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:["不管是严格模式，还是普通模式，",(0,s.jsx)(n.code,{children:"new Function('return this')()"}),"，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么",(0,s.jsx)(n.code,{children:"eval"}),"、",(0,s.jsx)(n.code,{children:"new Function"}),"这些方法都可能无法使用。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 方法一\n(typeof window !== 'undefined'\n   ? window\n   : (typeof process === 'object' &&\n      typeof require === 'function' &&\n      typeof global === 'object')\n     ? global\n     : this);\n\n// 方法二\nvar getGlobal = function () {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-global",target:"_blank",rel:"noopener noreferrer",children:"ES2020"})," 在语言标准的层面，引入",(0,s.jsx)(n.code,{children:"globalThis"}),"作为顶层对象。也就是说，任何环境下，",(0,s.jsx)(n.code,{children:"globalThis"}),"都是存在的，都可以从它拿到顶层对象，指向全局环境下的",(0,s.jsx)(n.code,{children:"this"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["垫片库",(0,s.jsx)(n.a,{href:"https://github.com/ungap/global-this",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.code,{children:"global-this"})}),"模拟了这个提案，可以在所有环境拿到",(0,s.jsx)(n.code,{children:"globalThis"}),"。"]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F2.let%20%E5%92%8C%20const%20%E5%91%BD%E4%BB%A4.md"]={toc:[{text:"let 命令",id:"let-命令",depth:2},{text:"基本用法",id:"基本用法",depth:3},{text:"不存在变量提升",id:"不存在变量提升",depth:3},{text:"暂时性死区",id:"暂时性死区",depth:3},{text:"不允许重复声明",id:"不允许重复声明",depth:3},{text:"块级作用域",id:"块级作用域",depth:2},{text:"为什么需要块级作用域？",id:"为什么需要块级作用域",depth:3},{text:"ES6 的块级作用域",id:"es6-的块级作用域",depth:3},{text:"块级作用域与函数声明",id:"块级作用域与函数声明",depth:3},{text:"const 命令",id:"const-命令",depth:2},{text:"基本用法",id:"基本用法-1",depth:3},{text:"本质",id:"本质",depth:3},{text:"ES6 声明变量的六种方法",id:"es6-声明变量的六种方法",depth:3},{text:"顶层对象的属性",id:"顶层对象的属性",depth:2},{text:"globalThis 对象",id:"globalthis-对象",depth:2}],title:"2.let 和 const 命令",headingTitle:"2.let 和 const 命令",frontmatter:{}}}}]);