"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["10581"],{265725:function(e,n,r){r.r(n),r.d(n,{default:()=>R});var s=r(552676),c=r(740453);let i=r.p+"static/image/50fcd896e457beaf4809eca8d17ca77a.f22293d4.webp",p=r.p+"static/image/240fc36ddc1e4f8ef1319618fd77c0a0.cf5fdd52.webp",l=r.p+"static/image/7d784f768d9afd6fb4e6e28b75c413cf.16b937f1.gif",d=r.p+"static/image/6953a4e92d7f6154e8372f6b4cba35c8.d1b3afd1.gif",a=r.p+"static/image/4fddd738fa402516de0a229e7f7a561a.39f15dc0.webp",t=r.p+"static/image/5ccf09da031f4fc39fe750c952695b05.33b286f3.webp",j=r.p+"static/image/d3ae06d1abb1dee578e3030c251d9a2a.80e1f324.webp",h=r.p+"static/image/8714558ade0c96e9ff7569e1f060ffc5.cf34ec63.webp",x=r.p+"static/image/26ab684b7f9ed1922e2e4488619c024a.1885f9d5.webp",o=r.p+"static/image/846ff569d63eca2a7843375054b636ec.37392e44.webp",f=r.p+"static/image/fe0bf15e8a700897bae8e1cfc3f19804.25f77f65.webp",m=r.p+"static/image/b2fb5ad750774aa498e8d55428c44780.1dd00172.webp",b=r.p+"static/image/982fa53c3ee97f9703dffa43386c71db.21e89e22.webp",g=r.p+"static/image/2de80c909f95b454fa988278babd1354.94a7d4c6.webp",u=r.p+"static/image/6417e38c221dc87551fcf436e7bc9f62.90522446.webp",v=r.p+"static/image/622b7e8f76aa65c78c242db6f3da07ad.e7d476a3.webp",w=r.p+"static/image/064b40aba41359a5c7dfac74e845d227.f94001b0.webp",E=r.p+"static/image/45ffdf706e3efb32b7fee87a3337fc9e.7c70ff62.webp",_=r.p+"static/image/62a5c1853e23b0af6ad6d2cd5898c9fe.bed14279.webp",A=r.p+"static/image/521f2c11ddb2210b70f34b35bd74af36.ef4d657d.webp",N=r.p+"static/image/3c0b83aecb76159b3b0684942ad1080e.046db448.webp",P=r.p+"static/image/7d8ec0acfe626b75c5877d8de96fe3a0.d7f1ba5f.webp",y=r.p+"static/image/1ec9133e7c5b397d09eac83844b8614c.d53481b2.webp";function S(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"104-nest-的-repl-模式",children:["104. Nest 的 REPL 模式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#104-nest-的-repl-模式",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们写过很多 Module、Service、Controller，但这些都要服务跑起来之后在浏览器里访问对应的 url，通过 get 或者 post 的方式传参来测试。"}),"\n",(0,s.jsx)(n.p,{children:"这个还是挺麻烦的，能不能像 node 的 repl 那样，直接在控制台测试呢？"}),"\n",(0,s.jsx)(n.p,{children:"repl 是 read-eval-paint-loop，也就是这个："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"Nest 能不能这样来测试呢？"}),"\n",(0,s.jsx)(n.p,{children:"可以的，Nest 支持 repl 模式。"}),"\n",(0,s.jsx)(n.p,{children:"我们创建个 Nest 项目："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest new repl-test\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后创建两个模块："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"浏览器访问下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们前面都是这么测试接口的。"}),"\n",(0,s.jsx)(n.p,{children:"其实还可以用 repl 模式。"}),"\n",(0,s.jsx)(n.p,{children:"在 src 下创建个 repl.ts，写入如下内容："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { repl } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  await repl(AppModule);\n}\nbootstrap();\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后把服务停掉，通过这种方式跑："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev -- --entryFile repl\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里的 --entryFile 是指定入口文件是 repl.ts"}),"\n",(0,s.jsx)(n.p,{children:"前面带了个 -- 是指后面的参数不是传给 npm run start:dev 的，要原封不动保留。"}),"\n",(0,s.jsx)(n.p,{children:"也就是会传给 nest start"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当然，你直接执行 nest start 也可以："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest start --watch --entryFile repl\n"})}),"\n",(0,s.jsx)(n.p,{children:"跑起来后，执行 debug()，会打印所有的 module 和 module 下的 controllers 和 providers。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"而且，你可以 get() 来取对应的 providers 或者 controllers 调用："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"get、post 方法都可以调用。"}),"\n",(0,s.jsx)(n.p,{children:"有的同学说，你这个 post 方法没有参数啊。"}),"\n",(0,s.jsx)(n.p,{children:"那我们加一些："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后添加 ValidationPipe："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"安装校验相关的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install class-validator class-transformer\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 dto 添加约束："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { IsEmail, IsNotEmpty } from "class-validator";\n\nexport class CreateAaaDto {\n    @IsNotEmpty()\n    aaa: string;\n\n    @IsEmail()\n    bbb: string;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"我们先正常跑下服务："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后 postman 里测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，ValidationPipe 生效了。"}),"\n",(0,s.jsx)(n.p,{children:"那 repl 里是不是一样呢？"}),"\n",(0,s.jsx)(n.p,{children:"我们再跑下 repl 模式："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev -- --entryFile repl\n"})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，并没有触发 pipe："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"也就是说，它只是单纯的传参调用这个函数，不会解析装饰器。"}),"\n",(0,s.jsx)(n.p,{children:"所以测试 controller 的话，repl 的方式是有一些限制的。"}),"\n",(0,s.jsx)(n.p,{children:"但是测试 service 很不错："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"比如测试某个项目的 UserService 的 login 方法："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"就很方便。"}),"\n",(0,s.jsx)(n.p,{children:"大概知道 repl 模式是做啥的之后，我们过一下常用的 api："}),"\n",(0,s.jsx)(n.p,{children:"debug() 可以查看全部的 module 或者某个 module 下的 cotrollers、providers："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"methods() 可以查看某个 controller 或者 provider 的方法："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"get() 或者 $() 可以拿到某个 controller 或者 provider 调用它的方法："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"常用的 api 就这些。"}),"\n",(0,s.jsx)(n.p,{children:"此外，按住上下键可以在历史命令中导航："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"但有个问题。"}),"\n",(0,s.jsx)(n.p,{children:"当你重新跑之后，这些命令历史就消失了，再按上下键也没有历史。"}),"\n",(0,s.jsx)(n.p,{children:"可以改一下 repl.ts："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { repl } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n    const replServer = await repl(AppModule);\n    replServer.setupHistory(\".nestjs_repl_history\", (err) => {\n        if (err) {\n            console.error(err);\n        }\n    });\n}\nbootstrap();\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"再跑的时候也是有历史的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"其实就是 nest 会把历史命令写入文件里，下一次跑就可以用它恢复历史了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"你还可以把这个命令配到 npm scripts 里："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后直接 npm run repl:dev 来跑。"}),"\n",(0,s.jsxs)(n.p,{children:["案例代码上传了",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/repl-login",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节我们学了 nest 的 repl 模式。"}),"\n",(0,s.jsx)(n.p,{children:"repl 模式下可以直接调用 controller 或者 provider 的方法，但是它们并不会触发 pipe、interceptor 等，只是传参测试函数。"}),"\n",(0,s.jsx)(n.p,{children:"可以使用 debug() 拿到 module、controller、provider 的信息，methods() 拿到方法，然后 get() 或者 $() 拿到 controller、provider 然后调用。"}),"\n",(0,s.jsx)(n.p,{children:"repl 模式对于测试 service 或者 contoller 的功能还是很有用的。"})]})}function k(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(S,{...e})}):S(e)}let R=k;k.__RSPRESS_PAGE_META={},k.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F104.%20Nest%20%E7%9A%84%20REPL%20%E6%A8%A1%E5%BC%8F.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"104. Nest 的 REPL 模式",headingTitle:"104. Nest 的 REPL 模式",frontmatter:{}}}}]);