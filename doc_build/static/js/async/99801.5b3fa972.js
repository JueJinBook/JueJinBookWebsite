"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["99801"],{985724:function(e,n,r){r.r(n),r.d(n,{default:()=>P});var t=r(552676),s=r(740453);let i=r.p+"static/image/ef5dcd7709f1d0e782da8928bf0af033.cc09f397.webp",a=r.p+"static/image/26eff4ef252897f22e6bb939b453677b.2c06bd11.webp",o=r.p+"static/image/722519ba98c6b420b81905432c4904ec.48773aba.webp",d=r.p+"static/image/3a028e6b19ddae17c0d65a588ee8ef3c.d859e395.webp",l=r.p+"static/image/14117961fd1ce88b297e30030f30d86f.dc32e5fe.webp",c=r.p+"static/image/6628217e51286a5a7c2b5bde6063b886.c8db71cd.webp",m=r.p+"static/image/2cde3566e3b2ad1f118708d377900caa.138dee05.webp",p=r.p+"static/image/65806715b77fad05e6aaf8567792b285.bfc02182.webp",u=r.p+"static/image/57a9baa48a2d281364eded6a8a56779c.6a3c653a.webp",h=r.p+"static/image/9d840a89170ae68134e472abc6015679.c8336050.webp",y=r.p+"static/image/b085fa2e455e42974d463e37f01a9568.1a3e819c.webp",g=r.p+"static/image/8d0f5f9290d01ccaf9bcaafa6e07c0ec.3fed558c.webp",v=r.p+"static/image/46f54713b9ef3f3dfec8358d6485cbf0.dfef6c83.webp",x=r.p+"static/image/db6be34a0fd8c8f7987b38b6e805e9ad.6f109fa7.webp",j=r.p+"static/image/3112f4abe47f816fc531cd7b8c374d44.e06c6e2a.webp",f=r.p+"static/image/428c9021b7715bc21ec55ae404bc446e.13585610.webp";function S(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",h4:"h4",pre:"pre",code:"code",img:"img",blockquote:"blockquote",ol:"ol",li:"li",h5:"h5"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"21服务端实战用户服务开发下",children:["21.服务端实战：用户服务开发（下）",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21服务端实战用户服务开发下",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["基于上一章的用户鉴权部分之后，本章节将介绍主要的用户系统的开发主要细节（包含前后端一起），由于篇幅有限，整体的代码量非常的多，所以并不能将所有的功能都全部复制进来，只能尽可能的介绍一些关键点，同时与前端不同的是，当服务端的整体架构设计结束之后，基本的都是业务模块的 ",(0,t.jsx)(n.strong,{children:"CURD"})," 所以观看本章的时候会较为枯燥，有能力的同学可以掠过本章直接自己开发，有兴趣的同学建议拉完本章的实际项目对比来看效果更佳。"]}),"\n",(0,t.jsxs)(n.h2,{id:"业务代码开发",children:["业务代码开发",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#业务代码开发",children:"#"})]}),"\n",(0,t.jsxs)(n.h4,{id:"前置条件",children:["前置条件",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前置条件",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["如果想体验丝滑的开发体验感觉，可以使用 ",(0,t.jsx)(n.strong,{children:"Nginx"})," 代理去掉端口号，配置如下:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\n    server {\n        listen 80;\n        server_name www.ig-space.com;\n        location / {\n        proxy_pass   http://127.0.0.1:10010/;\n        }\n    }\n\n    server {\n        listen 80;\n        server_name api.ig-space.com;\n        location / {\n        proxy_pass   http://127.0.0.1:4000/;\n        }\n    }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["其中 ",(0,t.jsx)(n.a,{href:"http://www.ig-space.com",target:"_blank",rel:"noopener noreferrer",children:"www.ig-space.com"})," 对应前端应用，api.ig-space.com 对应服务端域名"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["将上一章 ",(0,t.jsx)(n.strong,{children:"github"})," 授权的链接替换该图标的链接，然后可以进入授权界面。"]}),"\n",(0,t.jsxs)(n.p,{children:["根据拿回的 ",(0,t.jsx)(n.strong,{children:"code"})," 调用授权三方的接口 ",(0,t.jsx)(n.a,{href:"http://api.ig-space.com/api/auth?code=44fbc2070464ff2abda3",target:"_blank",rel:"noopener noreferrer",children:"http://api.ig-space.com/api/auth?code=44fbc2070464ff2abda3"})," 就可以正常拿到用户接口并且登录。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["正常完成用户 ",(0,t.jsx)(n.strong,{children:"jwt"})," 注册之后可以看到如下所示，我们已经正常登录成功了。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"这一块的前端后逻辑我还没有修改通顺，后期完成前后端的所有链路之后就可以自动授权跳转，目前还需要自己手动调用服务端登录一次。"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["接下来我们安装 ",(0,t.jsx)(n.strong,{children:"RBAC"})," 的权限模块体系来逐步讲解对应的前端端开发过程。"]}),"\n",(0,t.jsxs)(n.h4,{id:"用户管理",children:["用户管理",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户管理",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["用户管理模块在上一章介绍的比较多，对于此系统目前来说，用户都来源于 ",(0,t.jsx)(n.strong,{children:"Github"})," 授权的能力，所以就只有一张表，但如果需要做个人用户登录的功能的话，则需要拓展三方用户信息表来保证用户主表的唯一性。"]}),"\n",(0,t.jsxs)(n.p,{children:["当然整个系统的功能非常庞大，非阻塞不重要的模块，我们后置处理，所以目前用户的不具备自主新增的功能，只接受 ",(0,t.jsx)(n.strong,{children:"GitHub"})," 授权添加，以及部分字段属性的修改功能。"]}),"\n",(0,t.jsxs)(n.h4,{id:"系统管理",children:["系统管理",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#系统管理",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"用户系统的主要代码如下图所示区域："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:y,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"实体类为："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum STATUS {\n  disabled = 0,\n  enabled = 1,\n}\n@Entity()\nexport class System {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column()\n  name: string;\n\n  @Column({ type: 'text', default: null })\n  description?: string;\n\n  @Column({ default: STATUS.enabled })\n  status?: STATUS;\n\n  @Column()\n  creatorId?: number;\n\n  @Column()\n  creatorName?: string;\n\n  @Column()\n  updateId?: number;\n\n  @Column()\n  updateName?: string;\n\n  @CreateDateColumn()\n  createTime?: string;\n\n  @UpdateDateColumn()\n  updateTime?: string;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"系统类的功能非常简单，主要帮助我们将权限限制再各个系统中，减少查询次数所以对应的 Controller 的功能也较为简洁，只有常规的 CURD 模块："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { BusinessException } from '@app/common';\nimport {\n  CreateSystemDto,\n  DeleteSystemDto,\n  UpdateSystemDto,\n} from './system.dto';\nimport { SystemService } from './system.service';\nimport { PayloadUser } from '@app/common';\n\n@ApiTags('系统')\n@Controller('system')\nexport class SystemController {\n  constructor(private readonly systemService: SystemService) { }\n\n  @ApiOperation({\n    summary: '创建新系统',\n  })\n  @Post('create')\n  create(@Body() dto: CreateSystemDto, @PayloadUser() user: Payload) {\n    return this.systemService.create({\n      ...dto,\n      creatorName: user.name,\n      creatorId: user.userId,\n      updateName: user.name,\n      updateId: user.userId,\n    });\n  }\n\n  @ApiOperation({\n    summary: '修改系统信息',\n  })\n  @Post('update')\n  async update(@Body() dto: UpdateSystemDto, @PayloadUser() user: Payload) {\n    const foundSystem = await this.systemService.findById(dto.id);\n\n    if (!foundSystem) {\n      throw new BusinessException('未找到系统');\n    }\n\n    return await this.systemService.update({\n      ...foundSystem,\n      ...dto,\n      updateName: user.name,\n      updateId: user.userId,\n    });\n  }\n\n  @ApiOperation({\n    summary: '删除系统',\n  })\n  @Post('/delete')\n  async delete(@Body() dto: DeleteSystemDto) {\n    return await this.systemService.delete(dto.id);\n  }\n\n  @ApiOperation({\n    summary: '所有系统列表',\n  })\n  @Post('/list')\n  async list() {\n    return await this.systemService.list();\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h4,{id:"资源管理",children:["资源管理",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#资源管理",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"资源管理的服务端代码如下所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"当我们创建好系统模块之后就可以创建对应的资源模块，资源模块有两种形态："}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"菜单 -> 对应页面级别的可见模块主要用于前端展示模块"}),"\n",(0,t.jsx)(n.li,{children:"常规模块 -> 对应功能级别的模块主要用于服务端"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"同时每个资源都可能存在父子级别嵌套的功能，所以系统模块的实体类的设计相对于系统会较为复杂："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { STATUS } from '../system/system.mysql.entity';\n\nexport enum ResourceType {\n  Menu = 'menu',\n  Nomal = 'nomal',\n}\n\n@Entity()\nexport class Resource {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  key: string; // 对应资源的可识别 key，并不等同于系统自建 id\n\n  @Column({ default: 0 })\n  sort?: number;  // 菜单类的资源才会有排序的功能\n\n  @Column({ default: null })\n  parentId?: number; // 父子嵌套，当为 null 为顶级资源\n\n  @Column()\n  systemId: number; // 归属于对应的系统\n\n  @Column({ default: ResourceType.Nomal })\n  type: ResourceType; // 资源类型\n\n  @Column({ default: STATUS.enabled })\n  status?: STATUS;\n\n  @Column({ type: 'text', default: null })\n  description?: string;\n\n  @CreateDateColumn()\n  createTime?: string;\n\n  @UpdateDateColumn()\n  updateTime?: string;\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"资源类的交互相对于系统来说会更多一下，毕竟涉及了下面的权限与角色模块："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { BusinessException } from '@app/common';\nimport {\n  CreateResourceDto,\n  DeleteResourceDto,\n  ListBySystemIdDto,\n  ListWithPaginationDto,\n  UpdateResourceDto,\n} from './resource.dto';\nimport { ResourceService } from './resource.service';\nimport { SystemService } from '../system/system.service';\nimport { PrivilegeService } from '../privilege/privilege.service';\n\n@Controller('resource')\n@ApiTags('资源')\nexport class ResourceController {\n  constructor(\n    private readonly resourceService: ResourceService,\n    private readonly systemService: SystemService,\n    private readonly privilegeService: PrivilegeService,\n  ) { }\n\n  @ApiOperation({\n    summary: '创建新资源',\n  })\n  @Post('create')\n  async create(@Body() dto: CreateResourceDto) {\n    const foundResource = await this.resourceService.findByKey(dto.key);\n\n    if (foundResource) {\n      throw new BusinessException('资源 Key 已存在');\n    }\n\n    return await this.resourceService.create(dto);\n  }\n\n  @ApiOperation({\n    summary: '修改资源信息',\n  })\n  @Post('update')\n  async update(@Body() dto: UpdateResourceDto) {\n    const foundResource = await this.resourceService.findById(dto.id);\n\n    if (!foundResource) {\n      throw new BusinessException('未找到资源');\n    }\n    const allowUpdateFields = {\n      name: dto.name,\n      description: dto.description,\n    };\n\n    return await this.resourceService.update({\n      ...foundResource,\n      ...allowUpdateFields,\n    });\n  }\n\n  @ApiOperation({\n    summary: '删除资源',\n    description: '',\n  })\n  @Post('/delete')\n  async delete(@Body() dto: DeleteResourceDto) {\n    return await this.resourceService.delete(dto.id);\n  }\n\n  @ApiOperation({\n    summary: '资源列表',\n    description: '根据角色名称查询',\n  })\n  @Post('/list/paginate')\n  async list(@Body() dto: ListWithPaginationDto) {\n    const { page, ...searchParams } = dto;\n    const rourceData = await this.resourceService.paginate(searchParams, page);\n    const systemIds = rourceData.items.map((role) => role.systemId);\n    const systemList = await this.systemService.findByIds(systemIds);\n    const systemMap = {};\n    systemList.forEach((system) => (systemMap[system.id] = system));\n    const newRource = rourceData.items.map((role) => {\n      role['systemName'] = systemMap[role.systemId].name;\n      return role;\n    });\n    return { ...rourceData, items: newRource };\n  }\n\n  @ApiOperation({\n    summary: '资源列表',\n    description: '根据系统 id 查询',\n  })\n  @Post('/listBySystemId')\n  async listBySystemId(@Body() dto: ListBySystemIdDto) {\n    const resourceList = await this.resourceService.listBySystemId(\n      dto.systemId,\n    );\n    const newResource = [];\n\n    for (const resource of resourceList) {\n      const privileges = await this.privilegeService.listByResourceKey(\n        resource.key,\n      );\n      newResource.push({\n        ...resource,\n        privileges,\n      });\n    }\n    return newResource;\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"权限管理",children:["权限管理",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#权限管理",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"权限的服务端代码集中在下图所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"在新建资源之后就是对应资源下的具体权限管理，可以理解为某个页面下的按钮级别权限。"}),"\n",(0,t.jsx)(n.p,{children:"权限主要是对应的描述，所以它的实体类也并不会很复杂："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nexport enum PrivilegeStatus {\n  DENY = 0,\n  ALLOW = 1,\n  NOT_SET = 2,\n}\n\nexport enum Action {\n  Manage = 'manage',\n  Create = 'create',\n  Read = 'read',\n  Update = 'update',\n  Delete = 'delete',\n}\n\n@Entity()\nexport class Privilege {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column({ default: null })\n  systemId?: number;\n\n  @Column()\n  resourceKey: string;\n\n  @Column()\n  name: string;\n\n  @Column({ type: 'text', default: null })\n  description?: string;\n\n  @Column()\n  action: Action;\n\n  @Column({ default: PrivilegeStatus.ALLOW })\n  status?: PrivilegeStatus;\n\n  @CreateDateColumn()\n  createTime?: string;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["同样对应的 ",(0,t.jsx)(n.strong,{children:"Controller"})," 也较为简单："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { BusinessException } from '@app/common';\nimport { SystemService } from '../system/system.service';\nimport { ResourceService } from '../resource/resource.service';\nimport {\n  CreatePrivilegeDto,\n  DeletePrivilegeDto,\n  DisablePrivilegeDto,\n  ListAllPrivilegeDto,\n  PrivilegeListWithPaginationDto,\n  UpdatePrivilegeDto,\n} from './privilege.dto';\nimport { Privilege } from './privilege.mysql.entity';\nimport { PrivilegeService } from './privilege.service';\n\n@ApiTags('权限')\n@Controller('privilege')\nexport class PrivilegeController {\n  constructor(\n    private readonly privilegeService: PrivilegeService,\n    private readonly resourceService: ResourceService,\n    private readonly systemService: SystemService,\n  ) { }\n\n  @ApiOperation({\n    summary: '创建权限',\n  })\n  @Post('create')\n  async create(@Body() dto: CreatePrivilegeDto) {\n    const privilege: Privilege = {\n      systemId: dto.systemId,\n      name: dto.name,\n      resourceKey: dto.resourceKey,\n      action: dto.action,\n      description: dto.description,\n    };\n    const resource = await this.resourceService.findByKey(dto.resourceKey);\n    if (!resource) {\n      throw new BusinessException('未找到资源 Key:' + dto.resourceKey);\n    }\n    return this.privilegeService.createOrUpdate(privilege);\n  }\n\n  @ApiOperation({\n    summary: '修改权限',\n  })\n  @Post('update')\n  async update(@Body() dto: UpdatePrivilegeDto) {\n    const updatedPrivilege: Privilege = {\n      name: dto.name,\n      systemId: dto.systemId,\n      resourceKey: dto.resourceKey,\n      action: dto.action,\n      description: dto.description,\n    };\n\n    const privilege = await this.privilegeService.findById(dto.id);\n\n    if (!privilege) {\n      throw new BusinessException(`未找到 id 为 ${dto.id} 的权限`);\n    }\n\n    const resource = await this.resourceService.findByKey(dto.resourceKey);\n    if (!resource) {\n      throw new BusinessException('未找到资源 Key:' + dto.resourceKey);\n    }\n\n    return this.privilegeService.createOrUpdate({\n      ...privilege,\n      ...updatedPrivilege,\n    });\n  }\n\n  @ApiOperation({\n    summary: '是否冻结权限',\n  })\n  @Post('changeStatus')\n  async changeStatus(@Body() dto: DisablePrivilegeDto) {\n    const found = await this.privilegeService.findById(dto.privilegeId);\n    if (!found) {\n      throw new BusinessException(`未找到 ID 为 ${dto.privilegeId} 的权限`);\n    }\n    return this.privilegeService.createOrUpdate({\n      ...found,\n      status: dto.status,\n    });\n  }\n\n  @ApiOperation({\n    summary: '删除权限',\n  })\n  @Post('delete')\n  async delete(@Body() dto: DeletePrivilegeDto) {\n    return this.privilegeService.delete(dto.privilegeId);\n  }\n\n  @ApiOperation({\n    summary: '权限列表（分页）',\n    description: '根据权限名称查询',\n  })\n  @Post('/list/pagination')\n  async listWithPagination(@Body() dto: PrivilegeListWithPaginationDto) {\n    const { page, ...searchParams } = dto;\n\n    const pageData = await this.privilegeService.paginate(searchParams, page);\n    const systemIds = pageData.items.map((privilege) => privilege.systemId);\n    const systemList = await this.systemService.findByIds(systemIds);\n    const systemMap = {};\n    systemList.forEach((system) => (systemMap[system.id] = system));\n    const newRoles = pageData.items.map((privilege) => {\n      privilege['systemName'] = systemMap[privilege.systemId].name;\n      return privilege;\n    });\n    return { ...pageData, items: newRoles };\n  }\n\n  @ApiOperation({\n    summary: '获取所有权限',\n  })\n  @Post('listBySys')\n  async list(@Body() dto: ListAllPrivilegeDto) {\n    return await this.privilegeService.list(dto.systemId);\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"角色管理",children:["角色管理",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#角色管理",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["这一块是最为复杂的一点，因为角色需要同时关联用户以及权限，所以整体的设计比较复杂，为了将系统的拓展性做的比较通用，我们采用的是 ",(0,t.jsx)(n.strong,{children:"role-privilege"})," 以及 ",(0,t.jsx)(n.strong,{children:"role-user"})," 关联表的设计。"]}),"\n",(0,t.jsx)(n.p,{children:"角色管理的服务端代码如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["所以对应的实体类有 ",(0,t.jsx)(n.strong,{children:"3"})," 张表："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// role\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { STATUS } from '../system/system.mysql.entity';\n\n@Entity()\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id?: number;\n  @Column()\n  name: string;\n\n  @Column()\n  systemId: number;\n\n  @Column()\n  systemName: string;\n\n  @Column()\n  creatorId?: number;\n\n  @Column()\n  creatorName?: string;\n\n  @Column()\n  updateId?: number;\n\n  @Column()\n  updateName?: string;\n\n  @Column({ default: STATUS.enabled })\n  status?: STATUS;\n\n  @Column({ type: 'text', default: null })\n  description?: string;\n\n  @CreateDateColumn()\n  createTime?: string;\n\n  @UpdateDateColumn()\n  updateTime?: string;\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// role-user\nimport { Column, Entity, PrimaryGeneratedColumn } from "typeorm";\n\n@Entity()\nexport class UserRole {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column({ default: null })\n  systemId?: number;\n\n  @Column()\n  userId: number;\n\n  @Column()\n  roleId: number;\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// role-privilege\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n![image.png](./images/cb776d5531812a0e1292b344aaa77823.webp )\n@Entity()\nexport class RolePrivilege {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column({ default: null })\n  systemId?: number;\n\n  @Column()\n  roleId: number;\n\n  @Column()\n  privilegeId: number;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"在新增角色的时候就需要根据系统来确定角色的归属："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["所以在用户授权权限的时候，其实是新增 ",(0,t.jsx)(n.strong,{children:"role-privilege"})," 表数据："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"再完成角色授权之后可以进行用户的角色给予："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["同样这里的创建关系也是新增 ",(0,t.jsx)(n.strong,{children:"role-user"})," 表数据。"]}),"\n",(0,t.jsxs)(n.p,{children:["所以综合来看角色的 ",(0,t.jsx)(n.strong,{children:"Controller"})," 相对于之前会较为复杂点："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { BusinessException, PayloadUser } from '@app/common';\nimport { PrivilegeService } from '../privilege/privilege.service';\nimport { RolePrivilegeService } from '../role-privilege/role-privilege.service';\nimport { SystemService } from '../system/system.service';\nimport {\n  CreateRoleDto,\n  DeleteRoleDto,\n  GetPrivilegeListByIdDto,\n  RoleListDto,\n  RoleListWithPaginationDto,\n  RolePrivilegeSetDto,\n  UpdateRoleDto,\n} from './role.dto';\nimport { RoleService } from './role.service';\n\n@Controller('role')\n@ApiTags('角色')\nexport class RoleController {\n  constructor(\n    private readonly roleService: RoleService,\n    private readonly rolePrivilegeService: RolePrivilegeService,\n    private readonly privilegeService: PrivilegeService,\n    private readonly systemService: SystemService,\n  ) { }\n\n  @ApiOperation({\n    summary: '创建新角色',\n  })\n  @Post('create')\n  async create(\n    @Body() createRoleDto: CreateRoleDto,\n    @PayloadUser() user: Payload,\n  ) {\n    const system = await this.systemService.findById(createRoleDto.systemId);\n    return this.roleService.create({\n      ...createRoleDto,\n      systemName: system.name,\n      creatorName: user.name,\n      creatorId: user.userId,\n      updateName: user.name,\n      updateId: user.userId,\n    });\n  }\n\n  @ApiOperation({\n    summary: '修改角色信息',\n  })\n  @Post('update')\n  async update(@Body() dto: UpdateRoleDto, @PayloadUser() user: Payload) {\n    const foundRole = await this.roleService.findById(dto.id);\n    if (!foundRole) {\n      throw new BusinessException('未找到角色');\n    }\n    return await this.roleService.update({\n      ...foundRole,\n      ...dto,\n      updateName: user.name,\n      updateId: user.userId,\n    });\n  }\n\n  @ApiOperation({\n    summary: '删除角色',\n    description:\n      '如果发现角色有绑定权限，权限将同步删除 Role - privilege 关系表',\n  })\n  @Post('/delete')\n  async delete(@Body() dto: DeleteRoleDto) {\n    return await this.roleService.delete(dto.id);\n  }\n\n  @ApiOperation({\n    summary: '角色 ID 查权限',\n    description: '根据角色 id 查权限列表',\n  })\n  @Post('/getPrivilegeListById')\n  async getPrivilegeListById(@Body() dto: GetPrivilegeListByIdDto) {\n    const rolePrivilegeList = await this.rolePrivilegeService.listByRoleIds([\n      dto.roleId,\n    ]);\n    const privilegeList = await this.privilegeService.findByIds(\n      rolePrivilegeList.map((rp) => rp.privilegeId),\n    );\n    return privilegeList;\n  }\n\n  @ApiOperation({\n    summary: '角色列表（分页）',\n    description: '根据角色名称查询',\n  })\n  @Post('/list/pagination')\n  async listWithPagination(@Body() dto: RoleListWithPaginationDto) {\n    const { page, ...searchParams } = dto;\n    const pageData = await this.roleService.paginate(searchParams, page);\n    const systemIds = pageData.items.map((role) => role.systemId);\n    const systemList = await this.systemService.findByIds(systemIds);\n    const systemMap = {};\n    systemList.forEach((system) => (systemMap[system.id] = system));\n    const newRoles = pageData.items.map((role) => {\n      role['systemName'] = systemMap[role.systemId].name;\n      return role;\n    });\n    return { ...pageData, items: newRoles };\n  }\n\n  @ApiOperation({\n    summary: 'tree 形状角色列表',\n    description: '系统级别树状',\n  })\n  @Post('/list/withSystem')\n  async listWithSys() {\n    const newSys = [];\n    const systemList = await this.systemService.list();\n    for (const sys of systemList) {\n      const roles = await this.roleService.listWithSys(sys.id);\n      newSys.push({\n        ...sys,\n        roles,\n      });\n    }\n    return newSys;\n  }\n\n  @ApiOperation({\n    summary: '角色分配权限',\n    description: '',\n  })\n  @Post('set')\n  async set(@Body() dto: RolePrivilegeSetDto) {\n    await this.rolePrivilegeService.remove(dto.roleId);\n    return await this.rolePrivilegeService.set(\n      dto.roleId,\n      dto.privilegeIds,\n      dto.systemId,\n    );\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"写在最后",children:["写在最后",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,t.jsxs)(n.h5,{id:"为什么只粘贴-controller",children:["为什么只粘贴 Controller",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么只粘贴-controller",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["因为 ",(0,t.jsx)(n.strong,{children:"Service"})," 职责比较单一，在用户系统里面并没有过多的复杂操作，本身就是对权限数据的增删改查，每个 ",(0,t.jsx)(n.strong,{children:"Service"})," 都比较类似就不放上到文章中了，而 ",(0,t.jsx)(n.strong,{children:"Controller"})," 有些部分是需要适配业务也有多表关联查询数据，所以就粘贴了 ",(0,t.jsx)(n.strong,{children:"Controller"})," 层的代码。"]}),"\n",(0,t.jsxs)(n.h4,{id:"为什么不使用多对多的关系",children:["为什么不使用多对多的关系",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么不使用多对多的关系",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"关联表的设计比较复杂，代码写的比较麻烦，也未必是最好的选择，所以就抛弃了关联表设计，代码会比较傻瓜式的开发，而且从性能上，一般的服务也足够使用，并不需要考虑太多。"}),"\n",(0,t.jsxs)(n.h5,{id:"为什么数据库表要这么设计",children:["为什么数据库表要这么设计？",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么数据库表要这么设计",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在最开始的 ",(0,t.jsx)(n.strong,{children:"RBAC"})," 用户权限设计中就已经介绍过了，这里再提一下现实中的常规场景，一般用户在登陆系统的时候是可以感知到对应的登陆系统的，所以此时可以通过系统以及用户来获取到对应的角色，在通过角色拿到对应的权限此时的路径是最为简便的，所以将系统作为用户的直接属性，而用户与权限则作为关联表存在。"]}),"\n",(0,t.jsxs)(n.h4,{id:"为什么本章的代码含量居多",children:["为什么本章的代码含量居多",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么本章的代码含量居多",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["如开头所言，服务端开发反而不是最难的事情，难在架构设计、",(0,t.jsx)(n.strong,{children:"CICD"}),"、分布式、数据一致性等等额外的模块上，所以通常服务端的业务设计以及基础架构花费很多的时间，而代码开发方面占比并不高。"]}),"\n",(0,t.jsxs)(n.p,{children:["当我们将服务端的设计全部讲完，并且已经熟悉了 ",(0,t.jsx)(n.strong,{children:"NestJS"})," 的开发之后，理论上就可以开始服务端的开发，这也是为什么之前的 ",(0,t.jsx)(n.strong,{children:"NestJS"})," 的实战小册介绍完设计以及 ",(0,t.jsx)(n.strong,{children:"NestJS"})," 的开发之后就可以完结的原因。"]}),"\n",(0,t.jsx)(n.p,{children:"因为业务代码的开发是重复且枯燥的，而其他有意思的内容对前端来说学起来又会很吃力，所以在这本大而全的体系中，才方便将所有的代码细节以及服务端的其他模块都串联起来。"}),"\n",(0,t.jsx)(n.p,{children:"下一章是物料服务的前后端开发，加油！狗狗狗！"}),"\n",(0,t.jsx)(n.p,{children:"如果你有什么疑问，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function C(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(S,{...e})}):S(e)}let P=C;C.__RSPRESS_PAGE_META={},C.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F21.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%8B%EF%BC%89.md"]={toc:[{text:"业务代码开发",id:"业务代码开发",depth:2},{text:"前置条件",id:"前置条件",depth:4},{text:"用户管理",id:"用户管理",depth:4},{text:"系统管理",id:"系统管理",depth:4},{text:"资源管理",id:"资源管理",depth:4},{text:"权限管理",id:"权限管理",depth:4},{text:"角色管理",id:"角色管理",depth:4},{text:"写在最后",id:"写在最后",depth:2},{text:"为什么不使用多对多的关系",id:"为什么不使用多对多的关系",depth:4},{text:"为什么本章的代码含量居多",id:"为什么本章的代码含量居多",depth:4}],title:"21.服务端实战：用户服务开发（下）",headingTitle:"21.服务端实战：用户服务开发（下）",frontmatter:{}}}}]);