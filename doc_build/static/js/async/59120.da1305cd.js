"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["59120"],{428271:function(e,n,l){l.r(n),l.d(n,{default:()=>b});var s=l(552676),r=l(740453);let i=l.p+"static/image/5b6b2725a9a31d002d015a112eee795c.223269fc.webp",c=l.p+"static/image/717f48303b1329c9ca13c2f322722433.8d7d8836.webp",d=l.p+"static/image/bd825690d6fa0a3f8dc993a3cb42204f.705d5f73.webp",o=l.p+"static/image/b4bd68cbdd77c33eae6e25e410cc9cde.efc380de.webp",t=l.p+"static/image/2ee150a0b83ee53d5182ccd2089785ae.f0221621.webp",a=l.p+"static/image/c4618e5748c8b0ca8f53ad50a38184fe.1c893930.webp",h=l.p+"static/image/3c2c35fde85eb0ab4384929dd4984e2a.cad7be65.webp",j=l.p+"static/image/370a8c4f904cb6898f2dbf4577c00776.1e8ded70.webp",x=l.p+"static/image/7f7eb2547d82d82eae8dbdd9e476f6dd.d5393a98.webp",p=l.p+"static/image/e693347beb962b8688c09efcc28a9042.82eafbea.webp";function u(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",blockquote:"blockquote",h2:"h2",img:"img",strong:"strong",h3:"h3",ul:"ul",li:"li",pre:"pre",ol:"ol"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"15语法降级与polyfill联合前端编译工具链消灭低版本浏览器兼容问题",children:["15.语法降级与Polyfill：联合前端编译工具链，消灭低版本浏览器兼容问题",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#15语法降级与polyfill联合前端编译工具链消灭低版本浏览器兼容问题",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["谈到 Vite，可能很多人都觉得这是一个现代前端构建工具，应该在现代浏览器中使用，放到各种语法特性都缺失的低版本浏览器(如 ",(0,s.jsx)(n.code,{children:"ie 11"}),")就不适用了。这种观念对不对呢？首先跟大家抛出结论:"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["通过 Vite 构建我们完全可以兼容各种低版本浏览器，打包出既支持现代(",(0,s.jsx)(n.code,{children:"Modern"}),")浏览器又支持旧版(",(0,s.jsx)(n.code,{children:"Legacy"}),")浏览器的产物。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["接下里的课程中，我就来与你分析一下为什么在 Vite 中能够彻底解决低版本浏览器的兼容性问题，以及通过什么手段解决，需要借助哪些 JS 的工具和生态。你会领略到诸多前端编译工具链底层的风光，比如",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"、",(0,s.jsx)(n.code,{children:"core-js"}),"、",(0,s.jsx)(n.code,{children:"regenerator-runtime"}),"等等工具和基础库是如何强强联合的，当然，我也会以官方的 Vite 插件",(0,s.jsx)(n.code,{children:"@vitejs/plugin-legacy"}),"为例告诉你如何将这些底层的工具链接入到 Vite 中，并实现开箱即用的解决方案。"]}),"\n",(0,s.jsxs)(n.h2,{id:"场景复现",children:["场景复现",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#场景复现",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"首先我们来复现一下问题场景，下面两张图代表了之前我在线上环境真实遇到的报错案例:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["某些低版本浏览器并没有提供 ",(0,s.jsx)(n.code,{children:"Promise"})," 语法环境以及对象和数组的各种 API，甚至不支持箭头函数语法，代码直接报错，从而导致线上白屏事故的发生，尤其是需要兼容到",(0,s.jsx)(n.code,{children:"IE 11"}),"、",(0,s.jsx)(n.code,{children:"iOS 9"}),"以及",(0,s.jsx)(n.code,{children:"Android 4.4"}),"的场景中很容易会遇到。"]}),"\n",(0,s.jsxs)(n.p,{children:["旧版浏览器的语法兼容问题主要分两类: ",(0,s.jsx)(n.strong,{children:"语法降级问题"}),"和 ",(0,s.jsx)(n.strong,{children:"Polyfill 缺失问题"}),"。前者比较好理解，比如某些浏览器不支持箭头函数，我们就需要将其转换为",(0,s.jsx)(n.code,{children:"function(){}"}),"语法；而对后者来说，",(0,s.jsx)(n.code,{children:"Polyfill"}),"本身可以翻译为",(0,s.jsx)(n.code,{children:"垫片"}),"，也就是为浏览器提前注入一些 API 的实现代码，如",(0,s.jsx)(n.code,{children:"Object.entries"}),"方法的实现，这样可以保证产物可以正常使用这些 API，防止报错。"]}),"\n",(0,s.jsxs)(n.p,{children:["这两类问题本质上是通过前端的编译工具链(如",(0,s.jsx)(n.code,{children:"Babel"}),")及 JS 的基础 Polyfill 库(如",(0,s.jsx)(n.code,{children:"corejs"}),")来解决的，不会跟具体的构建工具所绑定。也就是说，对于这些本质的解决方案，在其它的构建工具(如 Webpack)能使用，在 Vite 当中也完全可以使用。"]}),"\n",(0,s.jsxs)(n.p,{children:["构建工具考虑的仅仅是如何将这些底层基础设施接入到构建过程的问题，自己并不需要提供底层的解决方案，正所谓",(0,s.jsx)(n.code,{children:"术业有专攻"}),"，把专业的事情交给专业的工具去做。接下来的部分，我就来带你熟悉一下所谓",(0,s.jsx)(n.code,{children:"专业的工具"}),"到底有哪些，以及如何使用这些工具。"]}),"\n",(0,s.jsxs)(n.h2,{id:"底层工具链",children:["底层工具链",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#底层工具链",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"1-工具概览",children:["1. 工具概览",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-工具概览",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"解决上述提到的两类语法兼容问题，主要需要用到两方面的工具，分别包括:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"编译时工具"}),"。代表工具有",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"和",(0,s.jsx)(n.code,{children:"@babel/plugin-transform-runtime"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"运行时基础库"}),"。代表库包括",(0,s.jsx)(n.code,{children:"core-js"}),"和",(0,s.jsx)(n.code,{children:"regenerator-runtime"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"编译时工具"}),"的作用是在代码编译阶段进行",(0,s.jsx)(n.strong,{children:"语法降级"}),"及",(0,s.jsxs)(n.strong,{children:["添加 ",(0,s.jsx)(n.code,{children:"polyfill"})," 代码的引用语句"]}),"，如:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import "core-js/modules/es6.set.js"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["由于这些工具只是编译阶段用到，运行时并不需要，我们需要将其放入",(0,s.jsx)(n.code,{children:"package.json"}),"中的",(0,s.jsx)(n.code,{children:"devDependencies"}),"中。"]}),"\n",(0,s.jsxs)(n.p,{children:["而",(0,s.jsx)(n.strong,{children:"运行时基础库"}),"是根据 ",(0,s.jsx)(n.code,{children:"ESMAScript"}),"官方语言规范提供各种",(0,s.jsx)(n.code,{children:"Polyfill"}),"实现代码，主要包括",(0,s.jsx)(n.code,{children:"core-js"}),"和",(0,s.jsx)(n.code,{children:"regenerator-runtime"}),"两个基础库，不过在 babel 中也会有一些上层的封装，包括："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-polyfill",target:"_blank",rel:"noopener noreferrer",children:"@babel/polyfill"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-runtime",target:"_blank",rel:"noopener noreferrer",children:"@babel/runtime"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-runtime-corejs2",target:"_blank",rel:"noopener noreferrer",children:"@babel/runtime-corejs2"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-runtime-corejs3",target:"_blank",rel:"noopener noreferrer",children:"@babel/runtime-corejs3"}),"\n看似各种运行时库眼花缭乱，其实都是",(0,s.jsx)(n.code,{children:"core-js"}),"和",(0,s.jsx)(n.code,{children:"regenerator-runtime"}),"不同版本的封装罢了(",(0,s.jsx)(n.code,{children:"@babel/runtime"}),"是个特例，不包含 core-js 的 Polyfill)。这类库是项目运行时必须要使用到的，因此一定要放到",(0,s.jsx)(n.code,{children:"package.json"}),"中的",(0,s.jsx)(n.code,{children:"dependencies"}),"中！"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-实际使用",children:["2. 实际使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-实际使用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["了解了基本概念后，接下来我们来通过代码实操的方式来学习这些工具，代码我也已经放到了",(0,s.jsx)(n.a,{href:"https://github.com/sanyuan0704/juejin-book-vite/tree/main/polyfill/babel-test",target:"_blank",rel:"noopener noreferrer",children:"仓库"}),"中，你可以对照学习。"]}),"\n",(0,s.jsx)(n.p,{children:"如果你没拉取仓库的代码，可以先按照如下的命令初始化项目:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mkdir babel-test\nnpm init -y\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后安装一些必要的依赖:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm i @babel/cli @babel/core @babel/preset-env\n"})}),"\n",(0,s.jsx)(n.p,{children:"我解释一下各个依赖的作用:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@babel/cli"}),": 为 babel 官方的脚手架工具，很适合我们练习用。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@babel/core"}),": babel 核心编译库。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@babel/preset-env"}),": babel 的预设工具集，基本为 babel 必装的库。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["接着新建 ",(0,s.jsx)(n.code,{children:"src"})," 目录，在目录下增加",(0,s.jsx)(n.code,{children:"index.js"}),"文件:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const func = async () => {\n  console.log(12123)\n}\n\nPromise.resolve().finally();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["你可以看到，示例代码中既包含了",(0,s.jsx)(n.code,{children:"高级语法"}),"也包含现代浏览器的",(0,s.jsx)(n.code,{children:"API"}),"，正好可以针对语法降级和 Polyfill 注入两个功能进行测试。"]}),"\n",(0,s.jsxs)(n.p,{children:["接下来新建",(0,s.jsx)(n.code,{children:".babelrc.json"}),"即 babel 的配置文件，内容如下:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'{\n  "presets": [\n    [\n      "@babel/preset-env", \n      {\n        // 指定兼容的浏览器版本\n        "targets": {\n          "ie": "11"\n        },\n        // 基础库 core-js 的版本，一般指定为最新的大版本\n        "corejs": 3,\n        // Polyfill 注入策略，后文详细介绍\n        "useBuiltIns": "usage",\n        // 不将 ES 模块语法转换为其他模块语法\n        "modules": false\n      }\n    ]\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["其中有两个比较关键的配置: ",(0,s.jsx)(n.code,{children:"targets"}),"和",(0,s.jsx)(n.code,{children:"usage"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以通过 ",(0,s.jsx)(n.code,{children:"targets"})," 参数指定要兼容的浏览器版本，你既可以填如上配置所示的一个对象:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'{\n  "targets": {\n    "ie": "11"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["也可以用 ",(0,s.jsx)(n.a,{href:"https://github.com/browserslist/browserslist",target:"_blank",rel:"noopener noreferrer",children:"Browserslist"})," 配置语法:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'{ \n  // ie 不低于 11 版本，全球超过 0.5% 使用，且还在维护更新的浏览器\n  "targets": "ie >= 11, > 0.5%, not dead"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Browserslist 是一个帮助我们设置目标浏览器的工具，不光是 Babel 用到，其他的编译工具如",(0,s.jsx)(n.code,{children:"postcss-preset-env"}),"、",(0,s.jsx)(n.code,{children:"autoprefix"}),"中都有所应用。对于",(0,s.jsx)(n.code,{children:"Browserslist"}),"的配置内容，你既可以放到 Babel 这种特定工具当中，也可以在",(0,s.jsx)(n.code,{children:"package.json"}),"中通过",(0,s.jsx)(n.code,{children:"browserslist"}),"声明:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// package.json\n{ \n  "browserslist": "ie >= 11"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["或者通过",(0,s.jsx)(n.code,{children:".browserslistrc"}),"进行声明:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// .browserslistrc\nie >= 11\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在实际的项目中，一般我们可以将使用下面这些",(0,s.jsx)(n.strong,{children:"最佳实践集合"}),"来描述不同的浏览器类型，减轻配置负担:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 现代浏览器\nlast 2 versions and since 2018 and > 0.5%\n// 兼容低版本 PC 浏览器\nIE >= 11, > 0.5%, not dead\n// 兼容低版本移动端浏览器\niOS >= 9, Android >= 4.4, last 2 versions, > 0.2%, not dead\n"})}),"\n",(0,s.jsxs)(n.p,{children:["对于这些配置对应的具体浏览器列表，大家可以去 ",(0,s.jsx)(n.a,{href:"https://browserslist.dev",target:"_blank",rel:"noopener noreferrer",children:"https://browserslist.dev"})," 站点查看:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["好，在说明了目标浏览器的配置之后，接下来我们来看另外一个重要的配置——",(0,s.jsx)(n.code,{children:"useBuiltIns"}),"，它决定了添加 Polyfill 策略，默认是 ",(0,s.jsx)(n.code,{children:"false"}),"，即不添加任何的 Polyfill。你可以手动将",(0,s.jsx)(n.code,{children:"useBuiltIns"}),"配置为",(0,s.jsx)(n.code,{children:"entry"}),"或者",(0,s.jsx)(n.code,{children:"usage"}),"，接下来我们看看这两个配置究竟有什么区别。"]}),"\n",(0,s.jsxs)(n.p,{children:["首先你可以将这个字段配置为",(0,s.jsx)(n.code,{children:"entry"}),"，需要注意的是，",(0,s.jsx)(n.code,{children:"entry"}),"配置规定你必须在入口文件手动添加一行这样的代码:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// index.js 开头加上\nimport 'core-js';\n"})}),"\n",(0,s.jsx)(n.p,{children:"接着在终端执行下面的命令进行 Babel 编译:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx babel src --out-dir dist\n"})}),"\n",(0,s.jsxs)(n.p,{children:["产物输出在",(0,s.jsx)(n.code,{children:"dist"}),"目录中，你可以去观察一下产物的代码:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["Babel 已经根据",(0,s.jsx)(n.code,{children:"目标浏览器"}),"的配置为我们添加了大量的 Polyfill 代码，",(0,s.jsx)(n.code,{children:"index.js"}),"文件简单的几行代码被编译成近 300 行。实际上，Babel 所做的事情就是将你的",(0,s.jsx)(n.code,{children:'import "core-js"'}),"代码替换成了产物中的这些具体模块的导入代码。"]}),"\n",(0,s.jsxs)(n.p,{children:["但这个配置有一个问题，即无法做到按需导入，上面的产物代码其实有大部分的 Polyfill 的代码我们并没有用到。接下来我们试试",(0,s.jsx)(n.code,{children:"useBuiltIns: usage"}),"这个按需导入的配置，改动配置后执行编译命令:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"npx babel src --out-dir dist\n"})}),"\n",(0,s.jsxs)(n.p,{children:["同样可以看到产物输出在了",(0,s.jsx)(n.code,{children:"dist/index.js"}),"中，内容如下所示:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Polyfill 代码主要来自 ",(0,s.jsx)(n.code,{children:"corejs"})," 和 ",(0,s.jsx)(n.code,{children:"regenerator-runtime"}),"，因此如果要运行起来，必须要装这两个库。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["可以发现 Polyfill 的代码精简了许多，真正地实现了按需 Polyfill 导入。因此，在实际的使用当中，还是推荐大家尽量使用",(0,s.jsx)(n.code,{children:'useBuiltIns: "usage"'}),"，进行按需的 Polyfill 注入。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们来梳理一下，上面我们利用",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"进行了目标浏览器语法的降级和",(0,s.jsx)(n.code,{children:"Polyfill"}),"注入，同时用到了",(0,s.jsx)(n.code,{children:"core-js"}),"和",(0,s.jsx)(n.code,{children:"regenerator-runtime"}),"两个核心的运行时库。但",(0,s.jsx)(n.code,{children:"@babel/preset-env"})," 的方案也存在一定局限性:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["如果使用新特性，往往是通过基础库(如 core-js)往全局环境添加 Polyfill，如果是开发应用没有任何问题，如果是开发第三方工具库，则很可能会对",(0,s.jsx)(n.strong,{children:"全局空间造成污染"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["很多工具函数的实现代码(如上面示例中的",(0,s.jsx)(n.code,{children:"_defineProperty"}),"方法)，会在许多文件中重现出现，造成",(0,s.jsx)(n.strong,{children:"文件体积冗余"}),"。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-更优的-polyfill-注入方案-transform-runtime",children:["3. 更优的 Polyfill 注入方案: transform-runtime",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-更优的-polyfill-注入方案-transform-runtime",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["接下来要介绍的",(0,s.jsx)(n.code,{children:"transform-runtime"}),"方案，就是为了解决",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"的种种局限性。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["需要提前说明的是，",(0,s.jsx)(n.code,{children:"transform-runtime"}),"方案可以作为",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"中",(0,s.jsx)(n.code,{children:"useBuiltIns"}),"配置的替代品，也就是说，一旦使用",(0,s.jsx)(n.code,{children:"transform-runtime"}),"方案，你应该把",(0,s.jsx)(n.code,{children:"useBuiltIns"}),"属性设为 ",(0,s.jsx)(n.code,{children:"false"}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"接下来我们来尝试一下这个方案，首先安装必要的依赖:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"pnpm i @babel/plugin-transform-runtime -D\npnpm i @babel/runtime-corejs3 -S\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我解释一下这两个依赖的作用: 前者是编译时工具，用来转换语法和添加 Polyfill，后者是运行时基础库，封装了",(0,s.jsx)(n.code,{children:"core-js"}),"、",(0,s.jsx)(n.code,{children:"regenerator-runtime"}),"和各种语法转换用到的",(0,s.jsx)(n.code,{children:"工具函数"}),"。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["core-js 有三种产物，分别是",(0,s.jsx)(n.code,{children:"core-js"}),"、",(0,s.jsx)(n.code,{children:"core-js-pure"}),"和",(0,s.jsx)(n.code,{children:"core-js-bundle"}),"。第一种是全局 Polyfill 的做法，@babel/preset-env 就是用的这种产物；第二种不会把 Polyfill 注入到全局环境，可以按需引入；第三种是打包好的版本，包含所有的 Polyfill，不太常用。",(0,s.jsx)(n.code,{children:"@babel/runtime-corejs3"})," 使用的是第二种产物。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["接着我们对",(0,s.jsx)(n.code,{children:".babelrc.json"}),"作如下的配置:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "plugins": [\n    // 添加 transform-runtime 插件\n    [\n      "@babel/plugin-transform-runtime", \n      {\n        "corejs": 3\n      }\n    ]\n  ],\n  "presets": [\n    [\n      "@babel/preset-env", \n      {\n        "targets": {\n          "ie": "11"\n        },\n        "corejs": 3,\n        // 关闭 @babel/preset-env 默认的 Polyfill 注入\n        "useBuiltIns": false,\n        "modules": false\n      }\n    ]\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"执行终端命令:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"npx babel src --out-dir dist\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们可以对比一下 ",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"下的产物结果:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["经过对比我们不难发现，",(0,s.jsx)(n.code,{children:"transform-runtime"})," 一方面能够让我们在代码中使用",(0,s.jsx)(n.code,{children:"非全局版本"}),"的 Polyfill，这样就避免全局空间的污染，这也得益于 ",(0,s.jsx)(n.code,{children:"core-js"})," 的 pure 版本产物特性；另一方面对于",(0,s.jsx)(n.code,{children:"asyncToGeneator"}),"这类的工具函数，它也将其转换成了一段引入语句，不再将完整的实现放到文件中，节省了编译后文件的体积。"]}),"\n",(0,s.jsxs)(n.p,{children:["另外，",(0,s.jsx)(n.code,{children:"transform-runtime"}),"方案引用的基础库也发生了变化，不再是直接引入",(0,s.jsx)(n.code,{children:"core-js"}),"和",(0,s.jsx)(n.code,{children:"regenerator-runtime"}),"，而是引入",(0,s.jsx)(n.code,{children:"@babel/runtime-corejs3"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"好，介绍完了 Babel 语法降级与 Polyfill 注入的底层方案，接下来我们来看看如何在 Vite 中利用这些方案来解决低版本浏览器的兼容性问题。"}),"\n",(0,s.jsxs)(n.h2,{id:"vite-语法降级与-polyfill-注入",children:["Vite 语法降级与 Polyfill 注入",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vite-语法降级与-polyfill-注入",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Vite 官方已经为我们封装好了一个开箱即用的方案: ",(0,s.jsx)(n.code,{children:"@vitejs/plugin-legacy"}),"，我们可以基于它来解决项目语法的浏览器兼容问题。这个插件内部同样使用 ",(0,s.jsx)(n.code,{children:"@babel/preset-env"})," 以及 ",(0,s.jsx)(n.code,{children:"core-js"}),"等一系列基础库来进行语法降级和 Polyfill 注入，因此我觉得对于上文所介绍的底层工具链的掌握是必要的，否则无法理解插件内部所做的事情，真正遇到问题时往往会不知所措。"]}),"\n",(0,s.jsxs)(n.h3,{id:"插件使用",children:["插件使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#插件使用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"首先让我们来安装一下官方的插件:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"pnpm i @vitejs/plugin-legacy -D\n"})}),"\n",(0,s.jsx)(n.p,{children:"随后在项目中使用它:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// vite.config.ts\nimport legacy from '@vitejs/plugin-legacy';\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    // 省略其它插件\n    legacy({\n      // 设置目标浏览器，browserslist 配置语法\n      targets: ['ie >= 11'],\n    })\n  ]\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们同样可以通过",(0,s.jsx)(n.code,{children:"targets"}),"指定目标浏览器，这个参数在插件内部会透传给",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["在引入插件后，我们可以尝试执行",(0,s.jsx)(n.code,{children:"npm run build"}),"对项目进行打包，可以看到如下的产物信息:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["相比一般的打包过程，多出了",(0,s.jsx)(n.code,{children:"index-legacy.js"}),"、",(0,s.jsx)(n.code,{children:"vendor-legacy.js"}),"以及",(0,s.jsx)(n.code,{children:"polyfills-legacy.js"}),"三份产物文件。让我们继续观察一下",(0,s.jsx)(n.code,{children:"index.html"}),"的产物内容:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <link rel="icon" type="image/svg+xml" href="/assets/favicon.17e50649.svg" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vite App</title>\n    \x3c!-- 1. Modern 模式产物 --\x3e\n    <script type="module" crossorigin src="/assets/index.c1383506.js"><\/script>\n    <link rel="modulepreload" href="/assets/vendor.0f99bfcc.js">\n    <link rel="stylesheet" href="/assets/index.91183920.css">\n  </head>\n  <body>\n    <div id="root"></div>\n    \x3c!-- 2. Legacy 模式产物 --\x3e\n    <script nomodule>兼容 iOS nomodule 特性的 polyfill，省略具体代码<\/script>\n    <script nomodule id="vite-legacy-polyfill" src="/assets/polyfills-legacy.36fe2f9e.js"><\/script>\n    <script nomodule id="vite-legacy-entry" data-src="/assets/index-legacy.c3d3f501.js">System.import(document.getElementById(\'vite-legacy-entry\').getAttribute(\'data-src\'))<\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["通过官方的",(0,s.jsx)(n.code,{children:"legacy"}),"插件， Vite 会分别打包出",(0,s.jsx)(n.code,{children:"Modern"}),"模式和",(0,s.jsx)(n.code,{children:"Legacy"}),"模式的产物，然后将两种产物插入同一个 HTML 里面，",(0,s.jsx)(n.code,{children:"Modern"}),"产物被放到 ",(0,s.jsx)(n.code,{children:'type="module"'}),"的 script 标签中，而",(0,s.jsx)(n.code,{children:"Legacy"}),"产物则被放到带有 ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-nomodule",target:"_blank",rel:"noopener noreferrer",children:"nomodule"})," 的 script 标签中。浏览器的加载策略如下图所示:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["这样产物便就能够同时放到现代浏览器和不支持",(0,s.jsx)(n.code,{children:'type="module"'}),"的低版本浏览器当中执行。当然，在具体的代码语法层面，插件还需要考虑语法降级和 Polyfill 按需注入的问题，接下来我们就来分析一下 Vite 的官方",(0,s.jsx)(n.code,{children:"legacy"}),"插件是如何解决这些问题的。"]}),"\n",(0,s.jsxs)(n.h3,{id:"插件执行原理",children:["插件执行原理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#插件执行原理",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["官方的",(0,s.jsx)(n.code,{children:"legacy"}),"插件是一个相对复杂度比较高的插件，直接看源码可能会很难理解，这里我梳理了画了一张简化后的流程图，接下来我们就根据这张流程图来一一拆解这个插件在各个钩子阶段到底做了些什么。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["首先是在",(0,s.jsx)(n.code,{children:"configResolved"}),"钩子中调整了",(0,s.jsx)(n.code,{children:"output"}),"属性，这么做的目的是让 Vite 底层使用的打包引擎 Rollup 能另外打包出一份",(0,s.jsx)(n.code,{children:"Legacy 模式"}),"的产物，实现代码如下:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const createLegacyOutput = (options = {}) => {\n  return {\n    ...options,\n    // system 格式产物\n    format: 'system',\n    // 转换效果: index.[hash].js -> index-legacy.[hash].js\n    entryFileNames: getLegacyOutputFileName(options.entryFileNames),\n    chunkFileNames: getLegacyOutputFileName(options.chunkFileNames)\n  }\n}\n\nconst { rollupOptions } = config.build\nconst { output } = rollupOptions\nif (Array.isArray(output)) {\n  rollupOptions.output = [...output.map(createLegacyOutput), ...output]\n} else {\n  rollupOptions.output = [createLegacyOutput(output), output || {}]\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接着，在",(0,s.jsx)(n.code,{children:"renderChunk"}),"阶段，插件会对 Legacy 模式产物进行语法转译和 Polyfill 收集，值得注意的是，这里并不会真正注入",(0,s.jsx)(n.code,{children:"Polyfill"}),"，而仅仅只是收集",(0,s.jsx)(n.code,{children:"Polyfill"}),"，:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"{\n  renderChunk(raw, chunk, opts) {\n    // 1. 使用 babel + @babel/preset-env 进行语法转换与 Polyfill 注入\n    // 2. 由于此时已经打包后的 Chunk 已经生成\n    //   这里需要去掉 babel 注入的 import 语句，并记录所需的 Polyfill\n    // 3. 最后的 Polyfill 代码将会在 generateBundle 阶段生成\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["由于场景是应用打包，这里直接使用 @babel/preset-env 的",(0,s.jsx)(n.code,{children:"useBuiltIns: 'usage'"}),"来进行全局 Polyfill 的收集是比较标准的做法。"]}),"\n",(0,s.jsxs)(n.p,{children:["回到 Vite 构建的主流程中，接下来会进入",(0,s.jsx)(n.code,{children:"generateChunk"}),"钩子阶段，现在 Vite 会对之前收集到的",(0,s.jsx)(n.code,{children:"Polyfill"}),"进行统一的打包，实现也比较精妙，主要逻辑集中在",(0,s.jsx)(n.code,{children:"buildPolyfillChunk"}),"函数中:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 打包 Polyfill 代码\nasync function buildPolyfillChunk(\n  name,\n  imports\n  bundle,\n  facadeToChunkMap,\n  buildOptions,\n  externalSystemJS\n) {\n  let { minify, assetsDir } = buildOptions\n  minify = minify ? 'terser' : false\n  // 调用 Vite 的 build API 进行打包\n  const res = await build({\n    // 根路径设置为插件所在目录\n    // 由于插件的依赖包含`core-js`、`regenerator-runtime`这些运行时基础库\n    // 因此这里 Vite 可以正常解析到基础 Polyfill 库的路径\n    root: __dirname,\n    write: false,\n    // 这里的插件实现了一个虚拟模块\n    // Vite 对于 polyfillId 会返回所有 Polyfill 的引入语句\n    plugins: [polyfillsPlugin(imports, externalSystemJS)],\n    build: {\n      rollupOptions: {\n        // 访问 polyfillId\n        input: {\n          // name 暂可视作`polyfills-legacy`\n          // pofyfillId 为一个虚拟模块，经过插件处理后会拿到所有 Polyfill 的引入语句\n          [name]: polyfillId\n        },\n      }\n    }\n  });\n  // 拿到 polyfill 产物 chunk\n  const _polyfillChunk = Array.isArray(res) ? res[0] : res\n  if (!('output' in _polyfillChunk)) return\n  const polyfillChunk = _polyfillChunk.output[0]\n  // 后续做两件事情:\n  // 1. 记录 polyfill chunk 的文件名，方便后续插入到 Modern 模式产物的 HTML 中；\n  // 2. 在 bundle 对象上手动添加 polyfill 的 chunk，保证产物写到磁盘中\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["因此，你可以理解为这个函数的作用即通过 ",(0,s.jsx)(n.code,{children:"vite build"})," 对",(0,s.jsx)(n.code,{children:"renderChunk"}),"中收集到 polyfill 代码进行打包，生成一个单独的 chunk:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["需要注意的是，polyfill chunk 中除了包含一些 core-js 和 regenerator-runtime 的相关代码，也包含了 ",(0,s.jsx)(n.code,{children:"SystemJS"})," 的实现代码，你可以将其理解为 ESM 的加载器，实现了在旧版浏览器下的模块加载能力。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["现在我们已经能够拿到 Legacy 模式的产物文件名及 Polyfill Chunk 的文件名，那么就可以通过",(0,s.jsx)(n.code,{children:"transformIndexHtml"}),"钩子来将这些产物插入到 HTML 的结构中:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"{\n  transformIndexHtml(html) {\n    // 1. 插入 Polyfill chunk 对应的 <script nomodule> 标签\n    // 2. 插入 Legacy 产物入口文件对应的 <script nomodule> 标签\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"OK，Vite 官方的 legacy 插件的主要原理就介绍到这里，为了方便大家理解，讲解的过程中忽略了一些与主流程关联不大的细节，最后给大家补充一下，感兴趣的同学可以继续深入学习:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["当插件参数中开启了",(0,s.jsx)(n.code,{children:"modernPolyfills"}),"选项时，Vite 也会自动对 Modern 模式的产物进行 Polyfill 收集，并单独打包成",(0,s.jsx)(n.code,{children:"polyfills-modern.js"}),"的 chunk，原理和 Legacy 模式下处理 Polyfill 一样。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Sarari 10.1 版本不支持 ",(0,s.jsx)(n.code,{children:"nomodule"}),"，为此需要单独引入一些补丁代码，",(0,s.jsx)(n.a,{href:"https://gist.github.com/samthor/64b114e4a4f539915a95b91ffd340acc",target:"_blank",rel:"noopener noreferrer",children:"点击查看"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:['部分低版本 Edge 浏览器虽然支持 type="module"，但不支持动态 import，为此也需要插入一些',(0,s.jsx)(n.a,{href:"https://github.com/vitejs/vite/pull/3885",target:"_blank",rel:"noopener noreferrer",children:"补丁代码"}),"，针对这种情况下降级使用 Legacy 模式的产物。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"恭喜你，学习完了本节的内容！本节主要讲解了 Vite 中语法降级与 Polyfill 相关的内容，涉及的概念比较多，篇幅也比较长，你需要重点掌握以下内容:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@babel/preset-env"})," 的使用。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useBuiltIns"})," 与 ",(0,s.jsx)(n.code,{children:"transformRuntime"})," 两种 Polyfill 方案的区别。"]}),"\n",(0,s.jsxs)(n.li,{children:["Vite 降级插件",(0,s.jsx)(n.code,{children:"@vitejs/plugin-legacy"})," 的使用及原理。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["首先我给你复现了线上的低版本浏览器语法报错情景，主要分为 ",(0,s.jsx)(n.strong,{children:"语法报错"}),"\n和 ",(0,s.jsx)(n.strong,{children:"Polyfill 缺失"})," 的问题，由此引出了底层的解决方案——使用 ",(0,s.jsx)(n.code,{children:"Babel 编译工具链"})," 和 JS 运行时基础库来完成。接着我跟你具体介绍了 ",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"的使用，通过实际的代码案例让你体验了它的语法降级和自动 Polyfill 注入的能力，接着，我又给你介绍了一个更优的 Polyfill 方案——",(0,s.jsx)(n.code,{children:"transform-runtime"}),"方案，并与",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"的",(0,s.jsx)(n.code,{children:"useBuiltIns"}),"方案进行了对比，分析了",(0,s.jsx)(n.code,{children:"transform-runtime"}),"方案的两个优化点: ",(0,s.jsx)(n.strong,{children:"不影响全局空间"}),"和",(0,s.jsx)(n.strong,{children:"优化文件体积"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["在介绍了底层的解决方案之后，我们开始学习在 Vite 中的解决方案——",(0,s.jsx)(n.code,{children:"@vitejs/plugin-legacy"}),"，分析了它如何让产物能够同时兼容现代浏览器和不支持 ",(0,s.jsx)(n.code,{children:'type="module"'}),"的低版本浏览器，接着深入地讲解了这个插件的实现原理，你可以发现底层也是通过",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),"来完成兼容方案的。"]}),"\n",(0,s.jsx)(n.p,{children:"以上就是本节的全部内容，希望对你能有所启发，也欢迎将你的学习心得和困惑打在评论区，我们下一小节再见\uD83D\uDC4B\uD83C\uDFFB"})]})}function g(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}let b=g;g.__RSPRESS_PAGE_META={},g.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20Vite%2F15.%E8%AF%AD%E6%B3%95%E9%99%8D%E7%BA%A7%E4%B8%8EPolyfill%EF%BC%9A%E8%81%94%E5%90%88%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E9%93%BE%EF%BC%8C%E6%B6%88%E7%81%AD%E4%BD%8E%E7%89%88%E6%9C%AC%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98.md"]={toc:[{text:"场景复现",id:"场景复现",depth:2},{text:"底层工具链",id:"底层工具链",depth:2},{text:"1. 工具概览",id:"1-工具概览",depth:3},{text:"2. 实际使用",id:"2-实际使用",depth:3},{text:"3. 更优的 Polyfill 注入方案: transform-runtime",id:"3-更优的-polyfill-注入方案-transform-runtime",depth:3},{text:"Vite 语法降级与 Polyfill 注入",id:"vite-语法降级与-polyfill-注入",depth:2},{text:"插件使用",id:"插件使用",depth:3},{text:"插件执行原理",id:"插件执行原理",depth:3},{text:"小结",id:"小结",depth:2}],title:"15.语法降级与Polyfill：联合前端编译工具链，消灭低版本浏览器兼容问题",headingTitle:"15.语法降级与Polyfill：联合前端编译工具链，消灭低版本浏览器兼容问题",frontmatter:{}}}}]);