"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["24461"],{198333:function(e,n,r){r.r(n),r.d(n,{default:()=>S});var s=r(552676),t=r(740453);let a=r.p+"static/image/bf33e4e108d890983ad356d7e90b5042.4e981d14.webp",i=r.p+"static/image/6dd860262a14b1bf3f70afb3ad7d232a.728a4f09.webp",c=r.p+"static/image/733a554ef1c6acab36fe5b740962a2b6.b92a8361.gif",o=r.p+"static/image/351b7f9282598cca729061697cdc3735.6b3fd6de.webp",d=r.p+"static/image/53a88ba108c5f26fc44154b8feac52d7.e114cb94.gif",l=r.p+"static/image/9729348b434ccfb5c2cc465eb0caf0e5.36dbbeb0.webp",h=r.p+"static/image/da4a9b305b11738c0b16a3e0e66222fe.264c466a.webp",p=r.p+"static/image/b18f23dbdbcf3f8faf1032458a1fffd0.92da6a14.webp",x=r.p+"static/image/d8ede5e061b3a2e851153dc4103e60fc.c6ab4fe9.webp",j=r.p+"static/image/3998371a5f6d86446ca5cae63f1282c4.2effb2e2.webp",u=r.p+"static/image/84c567af819fa74ca191e0b389db6f15.b7812fa5.gif",f=r.p+"static/image/7b7ea11fe33aeeb7fa259608978b615a.8ade8cb0.gif",m=r.p+"static/image/aaf1eebb43722f37d8e8292f7d5f7ad3.632a9427.webp",g=r.p+"static/image/73c3a7fac2bfb38205ae430fc64139ea.73f87db0.gif";function b(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",ol:"ol",li:"li",pre:"pre",code:"code",img:"img",h3:"h3",blockquote:"blockquote"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"16数据获取篇-_-server-actions上",children:["16.数据获取篇 _ Server Actions（上）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#16数据获取篇-_-server-actions上",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Server Actions 是指在服务端执行的异步函数，它们可以在服务端和客户端组件中使用，以处理 Next.js 应用中的数据提交和更改。"})}),"\n",(0,s.jsx)(n.p,{children:"注：如果大家看英文文档，“数据更改”更专业的说法叫做 Data Mutations，中文译为“数据突变”。简单来说，数据查询（Data Queries）指读取数据，数据突变（Data Mutations）指更改数据。突变可以是新增、更新、删除字段或对象。“数据突变”初听可能有些奇怪，习惯就好。"}),"\n",(0,s.jsxs)(n.h2,{id:"基本用法",children:["基本用法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本用法",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["定义一个 Server Action 需要使用 React 的 ",(0,s.jsx)(n.a,{href:"https://react.dev/reference/react/use-server",target:"_blank",rel:"noopener noreferrer",children:'"use server"'})," 指令。按指令的定义位置分为两种用法："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'将 "use server" 放到一个 async 函数的顶部表示该函数为 Server Action（函数级别）'}),"\n",(0,s.jsx)(n.li,{children:'将 "use server" 放到一个单独文件的顶部表示该文件导出的所有函数都是 Server Actions（模块级别）'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Server Actions 可以在服务端组件使用，也可以在客户端组件使用。"})}),"\n",(0,s.jsx)(n.p,{children:"当在服务端组件中使用的时候，两种级别都可以使用："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// app/page.jsx\nexport default function Page() {\n  // Server Action\n  async function create() {\n    'use server'\n \n    // ...\n  }\n \n  return (\n    // ...\n  )\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:'而在客户端组件中使用的时候，只支持模块级别。需要先创建一个文件（文件名无约定，很多开发者常命名为 "actions"），在顶部添加 "use server" 指令：'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"'use server'\n\n// app/actions.js\nexport async function create() {\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"当需要使用的时候，导入该文件："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { create } from '@/app/actions'\n \nexport function Button() {\n  return (\n    // ...\n  )\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"也可以将 Server Action 作为 props 传给客户端组件："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"<ClientComponent updateItem={updateItem} />\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"'use client'\n \nexport default function ClientComponent({ updateItem }) {\n  return <form action={updateItem}>{/* ... */}</form>\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"使用场景",children:["使用场景",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用场景",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 Pages Router 下，如果要进行前后端交互，需要先定义一个接口，然后前端调用接口完整前后端交互。而在 App Router 下，这种操作都可以简化为 Server Actions。"}),"\n",(0,s.jsx)(n.p,{children:"也就是说，如果你要实现一个功能，按照传统前后端分离的架构，需要自己先写一个接口，用于前后端交互，那就都可以尝试使用 Server Actions，除非你就是需要写接口方便外部调用。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["而在具体使用上，虽然 Server Actions 常与 ",(0,s.jsx)(n.code,{children:"<form>"})," 一起使用，但其实还可以在事件处理程序、useEffect、三方库、其他表单元素（如 ",(0,s.jsx)(n.code,{children:"<button>"}),"）中调用。"]})}),"\n",(0,s.jsxs)(n.h2,{id:"实战体会",children:["实战体会",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实战体会",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"了解了基本用法，还是让我们在实战中具体体会吧！"}),"\n",(0,s.jsx)(n.p,{children:"我们的目标是写一个简单的 ToDoList："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:"actions-1.gif"})}),"\n",(0,s.jsx)(n.p,{children:"写之前我们先用传统的 Pages Router 来实现一遍，通过对比来感受传统的使用 API 开发和使用 Server Actions 开发之间的区别。"}),"\n",(0,s.jsxs)(n.h3,{id:"pages-router----api",children:["Pages Router  - API",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pages-router----api",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["实现一个 ToDoList，我们需要先创建一个 ",(0,s.jsx)(n.code,{children:"/api/todo"}),"接口。新建 ",(0,s.jsx)(n.code,{children:"app/api/todos/route.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { NextResponse } from 'next/server'\n\nconst data = ['阅读', '写作', '冥想']\n \nexport async function GET() {\n  return NextResponse.json({ data })\n}\n\nexport async function POST(request) {\n  const formData = await request.formData()\n  const todo = formData.get('todo')\n  data.push(todo)\n  return NextResponse.json({ data })\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["此时访问 ",(0,s.jsx)(n.code,{children:"/api/todos"}),"，效果如下："]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:m,alt:"image.png"}),"\n现在我们开始写页面，在项目根目录新建 ",(0,s.jsx)(n.code,{children:"pages"}),"目录（用了 src，就放到 src 下），新建 ",(0,s.jsx)(n.code,{children:"pages/form.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { useEffect, useState } from "react"\n\nexport default function Page() {\n\n  const [todos, setTodos] = useState([])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await (await fetch(\'/api/todos\')).json()\n      setTodos(data)\n    }\n    fetchData()\n  }, [])\n\n  async function onSubmit(event) {\n    event.preventDefault()\n    const response = await fetch(\'/api/todos\', {\n      method: \'POST\',\n      body: new FormData(event.currentTarget),\n    })\n\n    const {data} = await response.json()\n    setTodos(data)\n  }\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input type="text" name="todo" />\n        <button type="submit">Submit</button>\n      </form>\n      <ul>\n        {todos.map((todo, i) => <li key={i}>{todo}</li>)}\n      </ul>\n    </>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["代码很简单，页面加载的时候 GET 请求 ",(0,s.jsx)(n.code,{children:"/api/todos"})," 渲染待办事项，表单提交的时候 POST 请求 ",(0,s.jsx)(n.code,{children:"/api/todos"}),"修改数据，然后渲染最新的待办事项。交互效果如下："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:"actions-2.gif"})}),"\n",(0,s.jsxs)(n.h3,{id:"app-router---server-actions",children:["App Router - Server Actions",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#app-router---server-actions",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"那么用 Server Actions 该怎么实现呢？"}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"app/form2/page.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { findToDos, createToDo } from \'./actions\';\n\nexport default async function Page() {\n  const todos = await findToDos();\n  return (\n    <>\n      <form action={createToDo}>\n        <input type="text" name="todo" />\n        <button type="submit">Submit</button>\n      </form>\n      <ul>\n        {todos.map((todo, i) => <li key={i}>{todo}</li>)}\n      </ul>\n    </>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"app/form2/actions.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"'use server'\n\nimport { revalidatePath } from \"next/cache\";\n\nconst data = ['阅读', '写作', '冥想']\n \nexport async function findToDos() {\n  return data\n}\n\nexport async function createToDo(formData) {\n  const todo = formData.get('todo')\n  data.push(todo)\n  revalidatePath(\"/form2\");\n  return data\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"交互效果如下（其实效果跟 Pages Router 下相同）："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:"actions-3.gif"})}),"\n",(0,s.jsxs)(n.h2,{id:"server-actions",children:["Server Actions",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#server-actions",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"就让我们以这个简单的 Server Actions Demo 为例来分析下 Server Actions。"}),"\n",(0,s.jsxs)(n.h3,{id:"基本原理",children:["基本原理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基本原理",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"首先是原理，Server Actions 是怎么实现的呢？让我们看下表单对应的 HTML 元素："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"截屏2024-03-12 22.51.30.png"})}),"\n",(0,s.jsxs)(n.p,{children:["Next.js 会自动插入一个 ",(0,s.jsx)(n.code,{children:'<input type="hidden">'}),"，其值为 ",(0,s.jsx)(n.code,{children:"$ACTION_ID_xxxxxxxx"}),"，用于让服务端区分 Action（因为一个页面可能使用多个 Server Actions）。"]}),"\n",(0,s.jsx)(n.p,{children:"当点击 Submit 的时候，触发表单提交，会发送一个 POST 请求到当前页面地址："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"截屏2024-03-12 22.54.44.png"})}),"\n",(0,s.jsx)(n.p,{children:"请求会携带表单中的值，以及 $ACTION_ID："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"截屏2024-03-12 22.55.57.png"})}),"\n",(0,s.jsx)(n.p,{children:"接口返回 RSC Payload，用于渲染更新后的数据："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"截屏2024-03-12 23.05.05.png"})}),"\n",(0,s.jsx)(n.p,{children:"其中，中文在 Chrome 显示乱码了（火狐可以正常查看）。RSC Payload 中包含最新的数据（返回最新的数据是因为我们调用了 revalidatePath）："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"截屏2024-03-12 23.06.33.png"})}),"\n",(0,s.jsx)(n.p,{children:"简而言之："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server Actions 背后使用的是 POST 请求方法"}),"，请求当前页面地址，根据 $ACTION_ID 区分"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server Actions 与 Next.js 的缓存和重新验证架构集成"}),"。调用 Action 时，Next.js 可以一次性返回更新的 UI 和新数据"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"使用好处",children:["使用好处",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用好处",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"其次我们说说使用 Server Actions 的好处："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"代码更简洁。你也不需要手动创建接口，而且 Server Actions 是函数，这意味着它们可以在应用程序的任意位置中复用。"}),"\n",(0,s.jsx)(n.li,{children:"当结合 form 使用的时候，支持渐进式增强。也就是说，即使禁用 JavaScript，表单也可以正常提交："}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"actions-4.gif"})}),"\n",(0,s.jsx)(n.p,{children:"如果使用 Pages Router 下的监听事件的方式，表单就无法正常工作了。但是 Server Actions 即使禁用 JS，也可以正常工作。"}),"\n",(0,s.jsxs)(n.p,{children:["使用 Server Actions 禁用和不禁用 JS 的差别是，",(0,s.jsx)(n.strong,{children:"不禁用的时候提交表单，页面不会刷新"}),"。禁用的时候提交表单页面会刷新（仔细看上图提交“早起”这项任务的时候，刷新按钮有变化）"]}),"\n",(0,s.jsxs)(n.h3,{id:"注意要点",children:["注意要点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意要点",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"最后讲讲使用 Server Actions 的注意要点。"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server Actions 的参数和返回值都必须是可序列化的"}),"，简单的说，JSON.stringfiy 这个值不出错"]}),"\n",(0,s.jsx)(n.li,{children:"Server Actions 会继承使用的页面或者布局的运行时和路由段配置项，包括像 maxDuration 等字段"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"支持事件",children:["支持事件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#支持事件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"前面也说过："}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["而在具体使用上，虽然 Server Actions 常与 ",(0,s.jsx)(n.code,{children:"<form>"})," 一起使用，但其实还可以在事件处理程序、useEffect、三方库、其他表单元素（如 ",(0,s.jsx)(n.code,{children:"<button>"}),"）中调用。"]})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"如果是在事件处理程序中，该怎么使用呢？"}),"\n",(0,s.jsx)(n.p,{children:"我们为刚才的 ToDoList 增加一个 “添加运动” 的按钮。当点击的时候，将运动添加到 TODO 中："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"app/form2/page.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { findToDos, createToDo } from \'./actions\';\nimport Button from \'./button\';\n\nexport default async function Page() {\n  const todos = await findToDos();\n  return (\n    <>\n      <form action={createToDo}>\n        <input type="text" name="todo" />\n        <button type="submit">Submit</button>\n      </form>\n      <Button>添加运动</Button>\n      <ul>\n        {todos.map((todo, i) => <li key={i}>{todo}</li>)}\n      </ul>\n    </>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"app/form2/button.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"'use client'\n\nimport { createToDoDirectly } from './actions';\n\nexport default function Button({children}) {\n  return <button onClick={async () => {\n    const data = await createToDoDirectly('运动')\n    alert(JSON.stringify(data))\n  }}>{children}</button>\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"app/form2/actions.js"}),"，添加代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'export async function createToDoDirectly(value) {\n  const form = new FormData()\n  form.append("todo", value);\n  return createToDo(form)\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"交互效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"actions-5.gif"})}),"\n",(0,s.jsx)(n.p,{children:"这里的 Server Actions 是怎么实现的呢？"}),"\n",(0,s.jsx)(n.p,{children:"其实还是发送了一个 POST 请求到当前地址："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"截屏2024-03-13 10.50.23.png"})}),"\n",(0,s.jsx)(n.p,{children:"返回的依然是 RSC Payload："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"想必大家已经熟悉了 Server Actions 的基本用法，Server Actions 自 Next.js v14 起进入稳定阶段，以后应该会是 Next.js 开发全栈项目时获取数据的主要方式，一定要熟练掌握。"}),"\n",(0,s.jsx)(n.p,{children:"其实使用 Server Actions 还有很多细节，比如如何获取表单提交时的等待状态？服务端如何验证字段？如何进行乐观更新？如何进行错误处理？如何获取 Cookies、Headers 等数据？如何重定向？……"}),"\n",(0,s.jsx)(n.p,{children:"这些也都是开发中常遇到的问题，我们下篇继续讲 Server Actions。"})]})}function v(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(b,{...e})}):b(e)}let S=v;v.__RSPRESS_PAGE_META={},v.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F16.%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96%E7%AF%87%20_%20Server%20Actions%EF%BC%88%E4%B8%8A%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"基本用法",id:"基本用法",depth:2},{text:"使用场景",id:"使用场景",depth:2},{text:"实战体会",id:"实战体会",depth:2},{text:"Pages Router  - API",id:"pages-router----api",depth:3},{text:"App Router - Server Actions",id:"app-router---server-actions",depth:3},{text:"Server Actions",id:"server-actions",depth:2},{text:"基本原理",id:"基本原理",depth:3},{text:"使用好处",id:"使用好处",depth:3},{text:"注意要点",id:"注意要点",depth:3},{text:"支持事件",id:"支持事件",depth:3},{text:"总结",id:"总结",depth:2}],title:"16.数据获取篇 _ Server Actions（上）",headingTitle:"16.数据获取篇 _ Server Actions（上）",frontmatter:{}}}}]);