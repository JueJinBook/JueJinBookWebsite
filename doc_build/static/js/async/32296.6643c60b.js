"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["32296"],{259224:function(e,n,i){e.exports=i.p+"static/image/1c4432e493510015671d9dd66a42ef22.67abd8f2.webp"},347381:function(e,n,i){e.exports=i.p+"static/image/371b09ce855ba04b14a16033d40dfa94.bc3f0e6f.webp"},85501:function(e,n,i){e.exports=i.p+"static/image/4b143993ac96e145609a40947b486a46.9f0c6020.webp"},83593:function(e,n,i){e.exports=i.p+"static/image/93d50e72c644d9e05a0ad0d27225db13.29e3e8e6.webp"},922616:function(e,n,i){e.exports=i.p+"static/image/95543df5a66f6a4feddc8937c3d79fa0.29ef9a7f.webp"},490815:function(e,n,i){e.exports=i.p+"static/image/96806cc6bd2f15e8743deb2bbdb1037b.076d2aa9.webp"},813847:function(e,n,i){e.exports=i.p+"static/image/f2e5cf83bd9c4eac05a521fdeb9c7227.771b2959.webp"},963676:function(e,n,i){i.r(n),i.d(n,{default:()=>J});var c=i(552676),s=i(740453);let r=i.p+"static/image/197339c6ecbdf698770d79a5bddbb0b2.7889dfa6.webp",a=i.p+"static/image/9f60b8f3e5824481f0c6e8e2dd027230.51d366e2.webp",t=i.p+"static/image/247a9ca9374da0db366bb3241dd86b97.146d0324.gif",d=i.p+"static/image/e7363e110ed9eb2f91b9945c7fa1b522.2d634f9d.webp",l=i.p+"static/image/420148d003405cfbdb7c632c95c089f0.8ba246b6.webp",o=i.p+"static/image/9a6f56196c2f7e3e256ce280736df4b1.d1da34c9.webp",p=i.p+"static/image/2a6bffccfd3dd2c312fe919a0e84b16f.8ae9fc42.gif",j=i.p+"static/image/75e40644d748931473ec4cc33bdcdfc0.c9cb7452.gif",x=i.p+"static/image/27a208cc3627881a4c599f97077e86b6.e418d6d7.webp",m=i.p+"static/image/2fde1c441a1215595913ab15a84f8790.561825ab.gif",h=i.p+"static/image/8e563946927a02dfd7b56263ea67d5c0.e506fe47.gif",f=i.p+"static/image/f9549c5e67e52c4c6972f0ac0a9f34f7.04735ea1.webp",g=i.p+"static/image/ec5d908b58826e05a671c1ef24014559.e436d0c7.webp",b=i.p+"static/image/ec15b2fdc7d6cf900b1bf2141ac163a1.2e2e9f88.webp",u=i.p+"static/image/cee9d3d66632b758f5071bfe8f7a90cf.90a86544.webp",S=i.p+"static/image/a3fdb46326fac6f31ae503b3d6f31aff.ee63d31e.webp",_=i.p+"static/image/a7f7aaad5e78786b93411ce275653dd3.eab8a6c2.webp",w=i.p+"static/image/018ae90bbe9ac1915a086f323cb5d513.7efd6881.webp",k=i.p+"static/image/1770e578710ebb79d9b5deef6ecb4f6a.344358f0.webp",v=i.p+"static/image/21c2355ecdf991ea24849396f7d95bd1.8e41892b.webp",E=i.p+"static/image/6c9b67ced5c6bbd0b90e1b6d6561c225.91cbdc0d.webp";var N=i(85501),O=i(922616),y=i(490815),I=i(347381);let M=i.p+"static/image/4541797f6350bc6dce4888be29055d21.46211a2a.webp",C=i.p+"static/image/ecf3cbab7f81251d5a1fbd15b220acbf.54ac3417.webp",P=i.p+"static/image/12024c530b3870851a11cbeb6ed3b52f.d3de11c6.webp",A=i.p+"static/image/abd414f6750c2330c712cac7c3357c81.f059c8a4.webp",B=i.p+"static/image/15012e6e140470a9a98d6ed62700f4a9.ec1786dc.webp",R=i.p+"static/image/8a9fd6dbf71910f0a3f02977724e304f.732ce307.webp";var G=i(813847),L=i(83593),T=i(259224);let K=i.p+"static/image/1e97533c98b3347b11e1aa1e708124f3.7d972d70.webp",U=i.p+"static/image/b656148e874f3d55ac446e8202f7e42f.c6175fdb.webp",F=i.p+"static/image/6c52afdb93c6e3f5c6e9d4dc6142fa19.e8d7c023.webp",D=i.p+"static/image/6821ed3b7c88159a2bae796d8e9870d5.50c021ba.webp",q=i.p+"static/image/1aa738581344be54ede0384cb94ade34.9ae341ec.gif";function Q(e){let n=Object.assign({p:"p",img:"img",a:"a",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.p,{children:"前面我们实现了头像的上传："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:q,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"图片是保存在服务器 uploads 目录下的："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:D,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"然后把这个目录设置为静态文件目录："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:F,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这样图片就能直接访问了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:U,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"数据库里保存的也是这个路径："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:K,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这样是能完成功能，但有一些问题："}),"\n",(0,c.jsx)(n.p,{children:"文件直接保存在某个目录下，服务器磁盘空间是有上限的，如果满了怎么办？"}),"\n",(0,c.jsx)(n.p,{children:"这些文件都没有一个管理界面来管理，很不方便。"}),"\n",(0,c.jsx)(n.p,{children:"所以，一般没人这么干，都会用 OSS 来做文件的管理，比如阿里云 OSS、或者我们用 minio 自己搭的 OSS 服务。"}),"\n",(0,c.jsx)(n.p,{children:"这节我们就把头像上传到用 minio 搭的 OSS。"}),"\n",(0,c.jsx)(n.p,{children:"把 minio 的 docker 镜像跑起来："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:T,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"指定本地的某个目录，映射到容器里的 /bitnami/minio/data 目录。"}),"\n",(0,c.jsx)(n.p,{children:"指定端口 9000 和 9001 的映射。(9000 是文件访问的端口，9001 是管理页面的端口)"}),"\n",(0,c.jsx)(n.p,{children:"然后指定登录的用户名、密码 MINIO_ROOT_USER、MINIO_ROOT_PASSWORD"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:L,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["跑起来之后，访问下 ",(0,c.jsx)(n.a,{href:"http://localhost:9001",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:9001"})]}),"\n",(0,c.jsx)(n.p,{children:"输入用户名密码后点击登录："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:G,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"创建个 bucket："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:R,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"设置下可以公开访问："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:B,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:A,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"然后上传个文件："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:P,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"复制路径，然后浏览器访问下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"http://localhost:9000/meeting-room-booking-system/headpic1.jpg",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:9000/meeting-room-booking-system/headpic1.jpg"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:M,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这样，文件就上传到了 OSS 里的 bucket，并且能够访问了。"}),"\n",(0,c.jsx)(n.p,{children:"这不比直接把文件放到文件目录下方便的多？"}),"\n",(0,c.jsx)(n.p,{children:"然后我们直接前端直传 minio 就好了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:I,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"上传完之后把 url 给服务端保存到数据库就行。"}),"\n",(0,c.jsx)(n.p,{children:"但是这个 accessKey 也不能暴露到前端代码里，需要在服务端做预签名。"}),"\n",(0,c.jsxs)(n.p,{children:["这个在",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7226988578700525605/section/7364018227191496704",target:"_blank",rel:"noopener noreferrer",children:"前端直传文件到 minio"}),"那节讲过。"]}),"\n",(0,c.jsx)(n.p,{children:"我们进入 backend 的项目，安装 minio 的包："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install --save minio\n"})}),"\n",(0,c.jsx)(n.p,{children:"然后创建个 minio 模块："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"nest g module minio\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { Global, Module } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Global()\n@Module({\n    providers: [\n        {\n            provide: 'MINIO_CLIENT',\n            async useFactory() {\n                const client = new Minio.Client({\n                        endPoint: 'localhost',\n                        port: 9000,\n                        useSSL: false,\n                        accessKey: '',\n                        secretKey: ''\n                    })\n                return client;\n            }\n          }\n    ],\n    exports: ['MINIO_CLIENT']\n})\nexport class MinioModule {}\n"})}),"\n",(0,c.jsx)(n.p,{children:"把 minio client 封装成 provider，放到 exports 里，并设置模块为 @Global。"}),"\n",(0,c.jsx)(n.p,{children:"用到 accessKey 和 secretKey 在这里创建："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:O,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这些当然也可以放到配置文件里配置："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"# 132. 会议室预定系统：文件上传 OSS\nminio_endpoint=localhost\nminio_port=9000\nminio_access_key=xxx\nminio_secret_key=xxx\n"})}),"\n",(0,c.jsx)(n.p,{children:"因为 ConfigModule 声明为了全局模块："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"所以可以直接在 MinioModule 里注入 ConfigService："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { Global, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as Minio from 'minio';\n\n@Global()\n@Module({\n    providers: [\n        {\n            provide: 'MINIO_CLIENT',\n            async useFactory(configService: ConfigService) {\n                const client = new Minio.Client({\n                    endPoint: configService.get('minio_endpoint'),\n                    port: +configService.get('minio_port'),\n                    useSSL: false,\n                    accessKey: configService.get('minio_access_key'),\n                    secretKey: configService.get('minio_secret_key')\n                })\n                return client;\n            },\n            inject: [ConfigService]\n          },\n    ],\n    exports: ['MINIO_CLIENT']\n})\nexport class MinioModule {}\n"})}),"\n",(0,c.jsx)(n.p,{children:"然后创建 MinioController"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"nest g controller minio --no-spec\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"注入 Minio Client："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Inject, Query } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Controller('minio')\nexport class MinioController {\n\n    @Inject('MINIO_CLIENT')\n    private minioClient: Minio.Client;\n\n    @Get('presignedUrl') \n    presignedPutObject(@Query('name') name: string) {\n        return this.minioClient.presignedPutObject('meeting-room-booking-system', name, 3600);\n    }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"presignedPutObject 第一个参数是 buckectName，第二个参数是 objectName，第三个参数是 expires。"}),"\n",(0,c.jsx)(n.p,{children:"bucketName 就是 meeting-room-booking-system，这个也可以抽到 .env 文件里，用 configService 读取。"}),"\n",(0,c.jsx)(n.p,{children:"objectName 需要上传文件的时候拿到 file.name 作为参数传入。"}),"\n",(0,c.jsx)(n.p,{children:"expires 是生成的临时签名的过期时间，我们指定 3600 秒，也就是一小时。"}),"\n",(0,c.jsx)(n.p,{children:"调用下这个接口试试："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"可以看到，返回了 aaa.png 的预签名的 url，这样前端不需要 accessKey 也可以用这个 url 来上传文件到 minio 了。"}),"\n",(0,c.jsx)(n.p,{children:"我们在 frontend_user 项目里用一下："}),"\n",(0,c.jsx)(n.p,{children:"之前是指定了 action 参数，当选择文件后，antd 的 Dragger 组件会自动上传文件："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"它还支持函数的形式，会传入 file 然后做处理后返回 url："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这里很显然就可以调用 presignedUrl 接口，拿到直传 minio 的 url。"}),"\n",(0,c.jsx)(n.p,{children:"我们在 interfaces.ts 添加一个接口："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"export async function presignedUrl(fileName: string) {\n    return axiosInstance.get(`/minio/presignedUrl?name=${fileName}`);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"然后 action 这里调用下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"action: async (file) => {\n    const res = await presignedUrl(file.name);\n    return res.data.data;\n},\nasync customRequest(options) {\n    const { onSuccess, file, action } = options;\n\n    const res = await axios.put(action, file);\n\n    onSuccess!(res.data);\n},\n"})}),"\n",(0,c.jsx)(n.p,{children:"为什么要 customRequest 呢？"}),"\n",(0,c.jsx)(n.p,{children:"因为默认 Dragger 是用 FormData 的格式上传的，也就是 key value 的格式。"}),"\n",(0,c.jsx)(n.p,{children:"我们指定的 name 就是 key。"}),"\n",(0,c.jsx)(n.p,{children:"但是 minio 要求直接把文件放到 body 里。"}),"\n",(0,c.jsx)(n.p,{children:"所以我们要用 customRequest 自定义请求方式。"}),"\n",(0,c.jsx)(n.p,{children:"试一下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"提示上传成功。"}),"\n",(0,c.jsx)(n.p,{children:"在 minio 管理界面也可以看到这个文件："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"接下来只要改下 onChange 的值，以及回显的图片的 url 就好了。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"onChange('http://localhost:9000/meeting-room-booking-system/' + info.file.name);\n"})}),"\n",(0,c.jsx)(n.p,{children:"试下效果："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"输入验证码，点击修改，会提示更新成功："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"去数据库里看下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"确实改过来了。"}),"\n",(0,c.jsx)(n.p,{children:"这样，基于 minio 搭的 OSS 服务的图片上传功能就完成了。"}),"\n",(0,c.jsx)(n.p,{children:"然后我们改下右上角按钮，改成显示用户头像："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"首先，用户信息更新完后，同步修改下 localStorage 里的 user_info"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const userInfo = localStorage.getItem('user_info');\nif(userInfo) {\n    const info = JSON.parse(userInfo);\n    info.headPic = values.headPic;\n    info.nickName = values.nickName;\n\n    localStorage.setItem('user_info', JSON.stringify(info));\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"测试下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"可以看到，点击修改后，localStorage 里的数据也同步更新了。"}),"\n",(0,c.jsx)(n.p,{children:"然后右上角的按钮也可以从 localStorage 里取最新的 headPic："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'import { UserOutlined } from "@ant-design/icons";\nimport { Link, Outlet } from "react-router-dom";\nimport \'./index.css\';\nimport { useEffect, useState } from "react";\n\nexport function Index() {\n\n    const [headPic, setHeadPic] = useState();\n\n    useEffect(() => {\n        const userInfo = localStorage.getItem(\'user_info\');\n        if(userInfo) {\n            const info = JSON.parse(userInfo);\n            setHeadPic(info.headPic);\n        }\n    }, []);\n\n    return <div id="index-container">\n        <div className="header">\n            <h1>会议室预定系统</h1>\n            <Link to={\'/update_info\'} >\n                {\n                    headPic ? <img src={headPic} width={40} height={40} className="icon"/> : <UserOutlined className="icon"/>\n                }                \n            </Link>\n        </div>\n        <div className="body">\n            <Outlet></Outlet>\n        </div>\n    </div>\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:"useState 创建一个状态来保存 headPic。"}),"\n",(0,c.jsx)(n.p,{children:"在 useEffect 里读取 localStrage 里的值，调用 setHeadPic。"}),"\n",(0,c.jsx)(n.p,{children:"渲染的时候如果 headPic 有值就渲染 img，否则渲染默认的 icon。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这样，头像就正确显示了。"}),"\n",(0,c.jsx)(n.p,{children:"代码在小册仓库："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"backend"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_frontend_user",target:"_blank",rel:"noopener noreferrer",children:"frontend_user"})}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"这节我们把文件上传从基于 multer 实现，保存在项目目录下，换成了基于 minio 实现的 OSS 服务。"}),"\n",(0,c.jsx)(n.p,{children:"我们是用前端直传 OSS，然后把文件 url 发给应用服务器的方式。"}),"\n",(0,c.jsx)(n.p,{children:"但是又不想在前端代码暴露 accessKey，所以是用的预签名的方式，服务端用 presignedPutObject 返回一个预签名 url 给前端。前端用这个 url 来发送 put 请求，来把文件直传 minio。"}),"\n",(0,c.jsx)(n.p,{children:"antd 的 Dragger 组件默认用 form data 来发送请求，我们通过 customRequest 来重写了上传逻辑。"}),"\n",(0,c.jsx)(n.p,{children:"这样，文件就都保存在了 minio 服务里，可以更方便的管理。"})]})}function H(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(Q,{...e})}):Q(e)}let J=H;H.__RSPRESS_PAGE_META={},H.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F132.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E5%AE%9A%E7%B3%BB%E7%BB%9F%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%20OSS.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);