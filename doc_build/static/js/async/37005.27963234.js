"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["37005"],{15531:function(n,e,t){n.exports=t.p+"static/image/44b6e78ad5ec079cc00752dab1ae2702.b584e2de.gif"},803219:function(n,e,t){t.r(e),t.d(e,{default:()=>w});var r=t(552676),o=t(740453);let i=t.p+"static/image/d7c31fec74afde2d552564280337385d.9b8dfcf4.gif",a=t.p+"static/image/407273ed51887cd514779c5c0312e136.6ee76118.webp",s=t.p+"static/image/6352c2bd6ff835cba1f2b825abc2f365.296020e1.webp",c=t.p+"static/image/3436e6c48b9083a8df05daa1ae99e59c.319cbbd4.gif",d=t.p+"static/image/dad81672799ed906a596c799eb9ba498.2dd49970.webp",p=t.p+"static/image/532cd5f2b9a4395589e4fcc9ce66b363.0b2bc3bf.webp",l=t.p+"static/image/c3d8e1e9aedb3884973d8d1238087fb1.c9e6ba40.webp",m=t.p+"static/image/0ce1a6c286dd9386de18c6f06f4e0507.8dbc8eaa.webp",x=t.p+"static/image/6c5a3500558cd552eb49006eb5ae2e42.08dde4d9.webp",h=t.p+"static/image/59f882ece360c1f3e3fd0f832742a13d.94ca36a3.webp",j=t.p+"static/image/f741d2484a0ccdb5b800cbe278e6edcf.8befd3e2.gif";var f=t(15531);let u=t.p+"static/image/72b3a9c0d4cbfa6351822e3608fe4204.f6e335a4.webp",g=t.p+"static/image/7647f8a0ee2afa5bd20a36beb364eeea.70333afb.webp",b=t.p+"static/image/2ad629ee07995c5cc6406b890e62c0ee.302354a4.gif",C=t.p+"static/image/fde548c7d144af8470da8ab4cb11decb.6a7755ea.webp",v=t.p+"static/image/c57a71d4aa4379445b5c4fe21c1bbf87.5872dcae.gif",S=t.p+"static/image/efb9d63ca33be9933e2847426fc9611c.1d498552.webp",y=t.p+"static/image/e637fe2dd43cb051f12ab8c07043b1cd.45bc2559.gif",P=t.p+"static/image/b94c187b5b3b23d9cabdb97169104d46.e88c1e6d.webp",A=t.p+"static/image/1d585e36a1d4e1e4a0f55a7abebc8634.c0b2b725.webp";function E(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,o.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"第72章低代码编辑器预览大纲",children:["第72章—低代码编辑器：预览、大纲",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第72章低代码编辑器预览大纲",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"\uFEFF这节我们来做下大纲和预览的功能。"}),"\n",(0,r.jsx)(e.p,{children:"大纲就是树形展示组件结构："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"顺便把源码也做一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"预览则是展示编辑好的页面："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"我们先来实现下左边的大纲和源码。"}),"\n",(0,r.jsx)(e.p,{children:"创建 components/MaterialWrapper/index.tsx"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Segmented } from \"antd\";\nimport { useState } from \"react\";\nimport { Material } from \"../Material\";\nimport { Outline } from \"../Outline\";\nimport { Source } from \"../Source\";\n\nexport function MaterialWrapper() {\n\n    const [key, setKey] = useState<string>('物料');\n  \n    return <div >\n        <Segmented value={key} onChange={setKey} block options={['物料', '大纲', '源码']} />\n        <div className='pt-[20px]'>\n            {\n                key === '物料' && <Material/>\n            }\n            {\n                key === '大纲' && <Outline/>\n            }\n            {\n                key === '源码' && <Source/>\n            }\n        </div>        \n    </div>\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"同样用 Segmented 组件来写 tab。"}),"\n",(0,r.jsx)(e.p,{children:"然后创建 Outline、Source 组件："}),"\n",(0,r.jsx)(e.p,{children:"components/Outline/index.tsx"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"export function Outline() {\n    return <div>Outline</div>\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"components/Source/index.tsx"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"export function Source() {\n    return <div>Source</div>\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"把 editor/index.tsx 里的 Materail 换成 MaterialWrapper"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"试一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这样，tab 切换就完成了，并且之前的物料拖拽依然是正常的。"}),"\n",(0,r.jsx)(e.p,{children:"然后实现下大纲和源码。"}),"\n",(0,r.jsx)(e.p,{children:"大纲就是树形展示组件树："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"用 antd 的 Tree 组件就行"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Tree } from \"antd\";\nimport { useComponetsStore } from \"../../stores/components\";\n\nexport function Outline() {\n    const { components, setCurComponentId } = useComponetsStore();\n\n    return <Tree\n        fieldNames={{ title: 'desc', key: 'id' }}\n        treeData={components as any}\n        showLine\n        defaultExpandAll\n        onSelect={([selectedKey]) => {\n            setCurComponentId(selectedKey as number);\n        }}\n    />\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"title 是指定用哪个属性作为标题，key 是指定哪个属性作为 key。"}),"\n",(0,r.jsx)(e.p,{children:"选中的时候切换 curComponentId。"}),"\n",(0,r.jsx)(e.p,{children:"看下效果："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"用 Tree 组件很简单就完成了。"}),"\n",(0,r.jsx)(e.p,{children:"然后是 Source，这个就更简单了，直接用 monaco editor 展示 json："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import MonacoEditor, { OnMount } from '@monaco-editor/react'\nimport { useComponetsStore } from '../../stores/components';\n\nexport function Source() {\n    const {components} = useComponetsStore();\n\n    const handleEditorMount: OnMount = (editor, monaco) => {\n      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyJ, () => {\n          editor.getAction('editor.action.formatDocument')?.run()\n      });\n    }\n\n    return <MonacoEditor\n        height={'100%'}\n        path='components.json'\n        language='json'\n        onMount={handleEditorMount}\n        value={JSON.stringify(components, null, 2)}\n        options={\n            {\n                fontSize: 14,\n                scrollBeyondLastLine: false,\n                minimap: {\n                  enabled: false,\n                },\n                scrollbar: {\n                  verticalScrollbarSize: 6,\n                  horizontalScrollbarSize: 6,\n                }\n            }\n        }\n    />\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"把 components 用 JSON.stringify 格式化后展示就行。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"高度有点小，在 MaterialWrapper 设置下 height："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"h-[calc(100vh-60px-30px-20px)]\n"})}),"\n",(0,r.jsx)(e.p,{children:"就是 100 的视口高度减去 header、tab 还有 padding 之后剩下的。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后我们再实现下预览功能："}),"\n",(0,r.jsx)(e.p,{children:"有同学说，预览和画布区不一样也是遍历 json 递归渲染组件么？"}),"\n",(0,r.jsx)(e.p,{children:"对，但是渲染的组件不同。"}),"\n",(0,r.jsx)(e.p,{children:"就拿日期组件来说："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"编辑的时候不响应点击事件，预览的时候才有反应。"}),"\n",(0,r.jsx)(e.p,{children:"这是因为编辑的组件做了处理："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"每个组件都要区分编辑和预览两种状态，甚至渲染的内容都不同。"}),"\n",(0,r.jsx)(e.p,{children:"所以，我们最好是编辑和预览状态的组件分开写："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"改下 ComponentConfig，添加 dev、prod 属性。"}),"\n",(0,r.jsx)(e.p,{children:"然后我们给 Page、Button、Container 组件都添加两种状态的："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"dev.tsx 就是之前的 index.tsx"}),"\n",(0,r.jsx)(e.p,{children:"我们只看 prod.tsx"}),"\n",(0,r.jsx)(e.p,{children:"Button 组件："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Button as AntdButton } from 'antd';\nimport { CommonComponentProps } from '../../interface';\n\nconst Button = ({id, type, text, styles}: CommonComponentProps) => {\n  return (\n    <AntdButton type={type} style={styles}>{text}</AntdButton>\n  )\n}\n\nexport default Button;\n"})}),"\n",(0,r.jsx)(e.p,{children:"和 dev 状态差不多，只不过不用带 data-component-id 了"}),"\n",(0,r.jsx)(e.p,{children:"Container 组件："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { CommonComponentProps } from '../../interface';\n\nconst Container = ({ id, children, styles }: CommonComponentProps) => {\n\n    return (\n        <div \n            style={styles}\n            className={`p-[20px]`}\n        >{children}</div>\n    )\n}\n\nexport default Container;\n"})}),"\n",(0,r.jsx)(e.p,{children:"不用带 border，也不用处理 drop 事件。"}),"\n",(0,r.jsx)(e.p,{children:"Page 组件："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { CommonComponentProps } from \"../../interface\";\n\nfunction Page({ id, name, children, styles }: CommonComponentProps) {\n\n    return (\n        <div\n            className='p-[20px]'\n            style={{ ...styles }}\n        >\n            {children}\n        </div>\n    )\n}\n\nexport default Page;\n"})}),"\n",(0,r.jsx)(e.p,{children:"不用带 h-[100%] 了，这个只是编辑的时候需要。"}),"\n",(0,r.jsx)(e.p,{children:"然后在 ComponentConfig 里注册下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import {create} from 'zustand';\nimport ContainerDev from '../materials/Container/dev';\nimport ContainerProd from '../materials/Container/prod';\nimport ButtonDev from '../materials/Button/dev';\nimport ButtonProd from '../materials/Button/prod';\nimport PageDev from '../materials/Page/dev';\nimport PageProd from '../materials/Page/prod';\n\nexport interface ComponentSetter {\n    name: string;\n    label: string;\n    type: string;\n    [key: string]: any;\n}\n\nexport interface ComponentConfig {\n    name: string;\n    defaultProps: Record<string, any>,\n    desc: string;\n    setter?: ComponentSetter[],\n    stylesSetter?: ComponentSetter[]\n    dev: any;\n    prod: any;\n}\n\ninterface State {\n    componentConfig: {[key: string]: ComponentConfig};\n}\n\ninterface Action {\n    registerComponent: (name: string, componentConfig: ComponentConfig) => void\n}\n\nexport const useComponentConfigStore = create<State & Action>((set) => ({\n    componentConfig: {\n        Container: {\n            name: 'Container',\n            defaultProps: {},\n            desc: '容器',\n            dev: ContainerDev,\n            prod: ContainerProd\n        },\n        Button: {\n            name: 'Button',\n            defaultProps: {\n                type: 'primary',\n                text: '按钮'\n            },\n            setter: [\n                {\n                  name: 'type',\n                  label: '按钮类型',\n                  type: 'select',\n                  options: [\n                    {label: '主按钮', value: 'primary'},\n                    {label: '次按钮', value: 'default'},\n                  ],\n                },\n                {\n                  name: 'text',\n                  label: '文本',\n                  type: 'input',\n                },\n            ],\n            stylesSetter: [\n                {\n                    name: 'width',\n                    label: '宽度',\n                    type: 'inputNumber',\n                },\n                {\n                    name: 'height',\n                    label: '高度',\n                    type: 'inputNumber',\n                }\n            ],\n            desc: '按钮',\n            dev: ButtonDev,\n            prod: ButtonProd\n        },\n        Page: {\n            name: 'Page',\n            defaultProps: {},\n            desc: '页面',\n            dev: PageDev,\n            prod: PageProd\n        }\n    },\n    registerComponent: (name, componentConfig) => set((state) => {\n        return {\n            ...state,\n            componentConfig: {\n                ...state.componentConfig,\n                [name]: componentConfig\n            }\n        }\n    })\n}));\n"})}),"\n",(0,r.jsx)(e.p,{children:"然后 EditArea 里面渲染也改一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"先看下效果："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"功能正常。"}),"\n",(0,r.jsx)(e.p,{children:"然后加一个 Preview 组件："}),"\n",(0,r.jsx)(e.p,{children:"components/Prview/index.tsx"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import React from "react";\nimport { useComponentConfigStore } from "../../stores/component-config";\nimport { Component, useComponetsStore } from "../../stores/components"\n\nexport function Preview() {\n    const { components } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n\n    function renderComponents(components: Component[]): React.ReactNode {\n        return components.map((component: Component) => {\n            const config = componentConfig?.[component.name]\n\n            if (!config?.prod) {\n                return null;\n            }\n            \n            return React.createElement(\n                config.prod,\n                {\n                    key: component.id,\n                    id: component.id,\n                    name: component.name,\n                    styles: component.styles,\n                    ...config.defaultProps,\n                    ...component.props,\n                },\n                renderComponents(component.children || [])\n            )\n        })\n    }\n\n    return <div>\n        {renderComponents(components)}\n    </div>\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"这个组件比 EditArea 简单，只要把 json 递归渲染成 prod 的组件就行。"}),"\n",(0,r.jsx)(e.p,{children:"然后在 store 添加一个 mode 的 state 用来切换编辑、预览状态："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:s,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"mode: 'edit' | 'preview';\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"setMode: (mode: State['mode']) => void;\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"mode: 'edit',\nsetMode: (mode) => set({mode}),\n"})}),"\n",(0,r.jsx)(e.p,{children:"然后渲染的时候用 mode 区分下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'import { Allotment } from "allotment";\nimport \'allotment/dist/style.css\';\nimport { Header } from "./components/Header";\nimport { EditArea } from "./components/EditArea";\nimport { Setting } from "./components/Setting";\nimport { MaterialWrapper } from "./components/MaterialWrapper";\nimport { useComponetsStore } from "./stores/components";\nimport { Preview } from "./components/Preivew";\n\nexport default function ReactPlayground() {\n    const { mode } = useComponetsStore();\n\n    return <div className=\'h-[100vh] flex flex-col\'>\n        <div className=\'h-[60px] flex items-center border-b-[1px] border-[#000]\'>\n            <Header />\n        </div>\n        {\n            mode === \'edit\' \n                ? <Allotment>\n                    <Allotment.Pane preferredSize={240} maxSize={300} minSize={200}>\n                        <MaterialWrapper />\n                    </Allotment.Pane>\n                    <Allotment.Pane>\n                        <EditArea />\n                    </Allotment.Pane>\n                    <Allotment.Pane preferredSize={300} maxSize={500} minSize={300}>\n                        <Setting />\n                    </Allotment.Pane>\n                </Allotment>\n                : <Preview/>\n        }\n    </div>\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"根据 mode 来渲染不同的足迹啊。"}),"\n",(0,r.jsx)(e.p,{children:"然后在 Header 加个预览按钮来切换 mode"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Button, Space } from 'antd';\nimport { useComponetsStore } from '../../stores/components';\n\nexport function Header() {\n\n  const { mode, setMode, setCurComponentId } = useComponetsStore();\n\n  return (\n    <div className='w-[100%] h-[100%]'>\n      <div className='h-[50px] flex justify-between items-center px-[20px]'>\n        <div>低代码编辑器</div>\n        <Space>\n          {mode === 'edit' && (\n            <Button\n                onClick={() => {\n                    setMode('preview');\n                    setCurComponentId(null);\n                }}\n                type='primary'\n            >\n                预览\n            </Button>\n          )}\n          {mode === 'preview' && (\n            <Button\n              onClick={() => { setMode('edit') }}\n              type='primary'\n            >\n              退出预览\n            </Button>\n          )}\n        </Space>\n      </div>\n    </div>\n  )\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"加个预览、退出预览按钮，点击切换 mode。"}),"\n",(0,r.jsx)(e.p,{children:"当 mode 切换为 edit 时，还要把 curComponentId 置空"}),"\n",(0,r.jsx)(e.p,{children:"测试下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这样，预览功能就完成了。"}),"\n",(0,r.jsx)(e.p,{children:"当然，现在组件比较少，后面多加一些组件就好了。"}),"\n",(0,r.jsxs)(e.p,{children:["案例代码上传了",(0,r.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"git reset --hard 1db99bed7d588ac86fd0bdc006fad433f031cd31\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"这节我们实现了源码、大纲、预览的功能。"}),"\n",(0,r.jsx)(e.p,{children:"源码和大纲比较简单，就是 json 的不同形式的展示，分别用 @monaco-editor/react 和 Tree 组件来做。"}),"\n",(0,r.jsx)(e.p,{children:"预览功能也是递归渲染 json 为组件树，但是组件不一样，预览和编辑状态的组件要分开写。"}),"\n",(0,r.jsx)(e.p,{children:"我们在 store 加了一个 mode 的状态，切换 mode 来切换渲染的内容。"}),"\n",(0,r.jsx)(e.p,{children:"这样，从编辑到预览的流程就打通了。"})]})}function B(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(E,{...n})}):E(n)}let w=B;B.__RSPRESS_PAGE_META={},B.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC72%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E9%A2%84%E8%A7%88%E3%80%81%E5%A4%A7%E7%BA%B2.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第72章—低代码编辑器：预览、大纲",headingTitle:"第72章—低代码编辑器：预览、大纲",frontmatter:{}}}}]);