"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["83295"],{289444:function(e,n,r){r.r(n),r.d(n,{default:()=>t});var i=r(552676),l=r(740453);function s(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",p:"p",strong:"strong",code:"code",img:"img",pre:"pre",ol:"ol"},(0,l.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"6基础-3记录和管理-api-日志",children:["6基础 3：记录和管理 API 日志",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6基础-3记录和管理-api-日志",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"本节核心内容",children:["本节核心内容",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本节核心内容",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Go 日志包数量众多，功能不同、性能不同，本小册介绍一个笔者认为比较好的日志库，并给出原因"}),"\n",(0,i.jsx)(n.li,{children:"介绍如何初始化日志包"}),"\n",(0,i.jsx)(n.li,{children:"介绍如何调用日志包"}),"\n",(0,i.jsx)(n.li,{children:"介绍如何转存（rotate）日志文件"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["本小节源码下载路径：",(0,i.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo03",target:"_blank",rel:"noopener noreferrer",children:"demo03"})]}),"\n",(0,i.jsx)(n.p,{children:"可先下载源码到本地，结合源码理解后续内容，边学边练。"}),"\n",(0,i.jsxs)(n.p,{children:["本小节的代码是基于 ",(0,i.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo02",target:"_blank",rel:"noopener noreferrer",children:"demo02"})," 来开发的。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"日志包介绍",children:["日志包介绍",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#日志包介绍",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["apiserver 所采用的日志包 ",(0,i.jsx)(n.a,{href:"https://github.com/lexkong/log",target:"_blank",rel:"noopener noreferrer",children:"lexkong/log"})," 是笔者根据开发经验，并调研 GitHub 上的 开源log 包后封装的一个日志包，也是笔者所在项目使用的日志包。它参考华为 ",(0,i.jsx)(n.a,{href:"https://github.com/ServiceComb/paas-lager",target:"_blank",rel:"noopener noreferrer",children:"paas-lager"}),"，做了一些便捷性的改动，功能完全一样，只不过更为便捷。相较于 Go 的其他日志包，该日志包有如下特点："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"支持日志输出流配置，可以输出到 stdout 或 file，也可以同时输出到 stdout 和 file"}),"\n",(0,i.jsx)(n.li,{children:"支持输出为 JSON 或 plaintext 格式"}),"\n",(0,i.jsx)(n.li,{children:"支持彩色输出"}),"\n",(0,i.jsx)(n.li,{children:"支持 log rotate 功能"}),"\n",(0,i.jsx)(n.li,{children:"高性能"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"初始化日志包",children:["初始化日志包",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化日志包",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["在 ",(0,i.jsx)(n.code,{children:"conf/config.yaml"})," 中添加 log 配置"]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/5/31/163b436f7649e2e7?w=800&h=337&f=png&s=29514",alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["在 ",(0,i.jsx)(n.code,{children:"config/config.go"})," 中添加日志初始化代码"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package config\n\nimport (\n    ....\n    "github.com/lexkong/log"\n    ....\n)\n....\nfunc Init(cfg string) error {\n    ....\n    // 初始化配置文件\n    if err := c.initConfig(); err != nil {\n        return err\n    }\n\n    // 初始化日志包\n    c.initLog()\n    ....\n}\n\nfunc (c *Config) initConfig() error {\n    ....\n}\n\nfunc (c *Config) initLog() {\n    passLagerCfg := log.PassLagerCfg {\n        Writers:        viper.GetString("log.writers"),\n        LoggerLevel:    viper.GetString("log.logger_level"),\n        LoggerFile:     viper.GetString("log.logger_file"),\n        LogFormatText:  viper.GetBool("log.log_format_text"),\n        RollingPolicy:  viper.GetString("log.rollingPolicy"),\n        LogRotateDate:  viper.GetInt("log.log_rotate_date"),\n        LogRotateSize:  viper.GetInt("log.log_rotate_size"),\n        LogBackupCount: viper.GetInt("log.log_backup_count"),\n    }\n\n    log.InitWithConfig(&passLagerCfg)\n}  \n\n// 监控配置文件变化并热加载程序\nfunc (c *Config) watchConfig() {\n    ....\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["这里要注意，日志初始化函数 ",(0,i.jsx)(n.code,{children:"c.initLog()"})," 要放在配置初始化函数 ",(0,i.jsx)(n.code,{children:"c.initConfig()"})," 之后，因为日志初始化函数要读取日志相关的配置。",(0,i.jsx)(n.code,{children:"func (c *Config) initLog()"})," 是日志初始化函数，会设置日志包的各项参数，参数为："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"writers"}),"：输出位置，有两个可选项 —— file 和 stdout。选择 file 会将日志记录到 ",(0,i.jsx)(n.code,{children:"logger_file"})," 指定的日志文件中，选择 stdout 会将日志输出到标准输出，当然也可以两者同时选择"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"logger_level"}),"：日志级别，DEBUG、INFO、WARN、ERROR、FATAL"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"logger_file"}),"：日志文件"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"log_format_text"}),"：日志的输出格式，JSON 或者 plaintext，",(0,i.jsx)(n.code,{children:"true"})," 会输出成非 JSON 格式，",(0,i.jsx)(n.code,{children:"false"})," 会输出成 JSON 格式"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rollingPolicy"}),"：rotate 依据，可选的有 daily 和 size。如果选 daily 则根据天进行转存，如果是 size 则根据大小进行转存"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"log_rotate_date"}),"：rotate 转存时间，配 合",(0,i.jsx)(n.code,{children:"rollingPolicy: daily"})," 使用"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"log_rotate_size"}),"：rotate 转存大小，配合 ",(0,i.jsx)(n.code,{children:"rollingPolicy: size"})," 使用"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"log_backup_count"}),"：当日志文件达到转存标准时，log 系统会将该日志文件进行压缩备份，这里指定了备份文件的最大个数"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"调用日志包",children:["调用日志包",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#调用日志包",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["日志初始化好了，将 ",(0,i.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo02",target:"_blank",rel:"noopener noreferrer",children:"demo02"})," 中的 log 用 ",(0,i.jsx)(n.a,{href:"https://github.com/lexkong/log",target:"_blank",rel:"noopener noreferrer",children:"lexkong/log"})," 包来替换。替换前（这里 grep 出了需要替换的行，读者可自行确认替换后的效果）："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'$ grep log * -R\nconfig/config.go:	"log"\nconfig/config.go:		log.Printf("Config file changed: %s", e.Name)\nmain.go:	"log"\nmain.go:			log.Fatal("The router has no response, or it might took too long to start up.", err)\nmain.go:		log.Print("The router has been deployed successfully.")\nmain.go:	log.Printf("Start to listening the incoming requests on http address: %s", viper.GetString("addr"))\nmain.go:	log.Printf(http.ListenAndServe(viper.GetString("addr"), g).Error())\nmain.go:		log.Print("Waiting for the router, retry in 1 second.")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["替换后的源码文件见 ",(0,i.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo03",target:"_blank",rel:"noopener noreferrer",children:"demo03"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"编译并运行",children:["编译并运行",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译并运行",children:"#"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"下载 apiserver_demos 源码包（如前面已经下载过，请忽略此步骤）"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ git clone https://github.com/lexkong/apiserver_demos\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["将 ",(0,i.jsx)(n.code,{children:"apiserver_demos/demo03 "}),"复制为 ",(0,i.jsx)(n.code,{children:"$GOPATH/src/apiserver"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ cp -a apiserver_demos/demo03/ $GOPATH/src/apiserver\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"在 apiserver 目录下编译源码"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ cd $GOPATH/src/apiserver\n$ gofmt -w .\n$ go tool vet .\n$ go build -v .\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"启动 apiserver"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ ./apiserver\n"})}),"\n",(0,i.jsx)(n.p,{children:"启动后，可以看到 apiserver 有 JSON 格式的日志输出："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/6/7/163d94888f441a2e?w=1738&h=281&f=png&s=38252",alt:""})}),"\n",(0,i.jsxs)(n.h2,{id:"管理日志文件",children:["管理日志文件",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#管理日志文件",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["这里将日志转存策略设置为 ",(0,i.jsx)(n.code,{children:"size"}),"，转存大小设置为 1 MB"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"  rollingPolicy: size\n  log_rotate_size: 1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["并在 ",(0,i.jsx)(n.code,{children:"main"})," 函数中加入测试代码："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/5/31/163b4bc062cc4033?w=1336&h=266&f=png&s=12866",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"启动 apiserver 后发现，在当前目录下创建了 log/apiserver.log 日志文件："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ ls log/\napiserver.log\n"})}),"\n",(0,i.jsx)(n.p,{children:"程序运行一段时间后，发现又创建了 zip 文件："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ ls log/\napiserver.log  apiserver.log.20180531134509631.zip\n"})}),"\n",(0,i.jsx)(n.p,{children:"该 zip 文件就是当 apiserver.log 大小超过 1MB 后，日志系统将之前的日志压缩成 zip 文件后的文件。"}),"\n",(0,i.jsxs)(n.h2,{id:"小结",children:["小结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"本小节通过具体实例讲解了如何配置、使用和管理日志。"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}let t=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F6%E5%9F%BA%E7%A1%80%203%EF%BC%9A%E8%AE%B0%E5%BD%95%E5%92%8C%E7%AE%A1%E7%90%86%20API%20%E6%97%A5%E5%BF%97.md"]={toc:[{text:"本节核心内容",id:"本节核心内容",depth:2},{text:"日志包介绍",id:"日志包介绍",depth:2},{text:"初始化日志包",id:"初始化日志包",depth:2},{text:"调用日志包",id:"调用日志包",depth:2},{text:"编译并运行",id:"编译并运行",depth:2},{text:"管理日志文件",id:"管理日志文件",depth:2},{text:"小结",id:"小结",depth:2}],title:"6基础 3：记录和管理 API 日志",headingTitle:"6基础 3：记录和管理 API 日志",frontmatter:{}}}}]);