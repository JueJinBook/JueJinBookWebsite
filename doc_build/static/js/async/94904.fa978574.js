"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["94904"],{954906:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var s=r(552676),d=r(740453);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",h3:"h3",code:"code",pre:"pre",ul:"ul",li:"li",h4:"h4"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"40聚合快速入门",children:["40.聚合快速入门",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#40聚合快速入门",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["聚合是非常强大的数据分析工具，主要用于对记录进行批量处理，可以对记录进行按条件分组、跨集合联表等一系列批量而又复杂操作，也可以基于字段（以及内嵌字段）进行类似于Excel",(0,s.jsx)(n.strong,{children:"整列整列"}),"跨字段的运算(如加、减、合并、比较等）、对内嵌的字段可以进行整列拆分、类型变换、组合等。聚合主要用于数据统计与数据挖掘，它只能进行数据库的read操作，不能write，不会修改数据库里的数据。"]}),"\n",(0,s.jsxs)(n.h2,{id:"61-聚合快速入门",children:["6.1 聚合快速入门",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#61-聚合快速入门",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"611-聚合查询与普通数据查询",children:["6.1.1 聚合查询与普通数据查询",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#611-聚合查询与普通数据查询",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"聚合aggregate和普通数据查询get是两套不同的体系，聚合更偏向于数据的统计分析，用聚合来查询的功能非常强大，但是目前是不能对集合进行增、删、改等write的操作，因此所有结果都需要返回到小程序端。"}),"\n",(0,s.jsxs)(n.p,{children:["由于聚合查询和普通数据查询都能对数据库进行查询，而且两个的很多方法都特别类似，所以很多人会混淆，甚至错误的混用，比如出现",(0,s.jsx)(n.code,{children:".where().aggregate()"}),"、",(0,s.jsx)(n.code,{children:".aggregate().get()"}),"等错误的操作。这里为了让大家更好理解，特整理一下两个的对比，大家写数据库查询和聚合时都可以先写类似以下的模板。"]}),"\n",(0,s.jsxs)(n.p,{children:["在使用前，首先我们需要",(0,s.jsx)(n.strong,{children:"先声明"}),"以下三个变量，方便简写以及简写方式的统一，其中",(0,s.jsx)(n.code,{children:"_"}),"表示的是查询操作符（聚合里没有更新操作符），而",(0,s.jsx)(n.code,{children:"$"}),"指的是聚合操作符："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const db = wx.cloud.database() //云函数端为const db = cloud.database()\nconst _ = db.command\nconst $ = db.command.aggregate\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后我们再来看普通数据查询和聚合查询一个",(0,s.jsx)(n.strong,{children:"完整的案例"}),"的区别，尤其是普通数据查询的构建查询条件与聚合阶段之间的一些功能相似的地方。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"//普通数据查询\ndb.collection(\"china\")  //获取集合china的引用\n  .where({              //查询的条件操作符where\n    gdp: _.gt(3000)     //查询筛选条件，gt表示字段需大于指定值。\n  })\n  .field({             //显示哪些字段\n    _id:false,         //默认显示_id，这个隐藏\n    city: true,\n    province: true,\n    gdp:true\n  })\n  .orderBy('gdp', 'desc')  //排序方式，降序排列\n  .skip(0)                 //跳过多少个记录（常用于分页），0表示这里不跳过\n  .limit(10)               //限制显示多少条记录，这里为10，默认是20 \n  .get()                   //获取根据查询条件筛选后的集合数据  \n  .then(res => {\n    console.log(res.data)\n  })\n  .catch(err => {\n    console.error(err)\n  })\n\n//聚合查询，大家写聚合操作的时候，可以参考这样的一个模板来写\ndb.collection('china').aggregate() //发起聚合操作\n  .match({       //类似于where，对记录进行筛选\n    gdp: _.gt(3000)\n  })\n  .project({     //类似于field，在这里可以新增字段    \n    _id:false,         //默认显示_id，这个隐藏\n    city: true,\n    province: true,\n    gdp:true\n  })\n  .sort({        //类似于orderBy\n    gdp: -1,\n  })\n  .skip(5)      //类似于skip\n  .limit(1000)     //类似于limit，不填默认是20，没有上限\n  .end()        //注意，end标志聚合操作的完成    \n  .then(res => console.log(res))\n  .catch(err => console.error(err))\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里的match、project、sort、skip、limit、end都是聚合阶段在写聚合查询时有几个需要注意的点："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aggregate()"}),"是发起一个聚合操作"]}),"\n",(0,s.jsx)(n.li,{children:"match是根据条件过滤文档，进行的是查询匹配，语法和where比较类似；"}),"\n",(0,s.jsx)(n.li,{children:"project把指定的字段传递给下一个流水线，指定的字段可以是某个已经存在的字段，也可以是计算出来的新字段，它和field不同的是可以新增一些不存在的字段（只是显示用，没写进数据库）；"}),"\n",(0,s.jsx)(n.li,{children:"sort根据指定的字段，对输入的文档进行排序，1 代表升序排列（从小到大）；-1 代表降序排列（从大到小），功能和orderBy类似；"}),"\n",(0,s.jsx)(n.li,{children:"小程序端limit默认 20，也就是如果你使用聚合查询，你查询到的数据都会默认显示20条数据，但是你可以设置更多（但是不要太大，基本没有上限，除了整个数据不能超过16M外），而普通查询是不能超过20条的；"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"end()"}),"标志着聚合操作的完成"]}),"\n",(0,s.jsxs)(n.li,{children:["注意聚合返回的结果是list数组对象，",(0,s.jsx)(n.code,{children:"res.list"}),"才是数组，这和普通数据查询有所不同"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"612-聚合的基础知识",children:["6.1.2 聚合的基础知识",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#612-聚合的基础知识",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"1聚合的使用场景",children:["1、聚合的使用场景",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1聚合的使用场景",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"聚合查询相比于普通查询只能读不能写，看起来好像和普通查询没有太大区别，那它到底强大在哪里呢？聚合可以对记录进行流水线式分阶段地批处理："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回大量数据（慎用）"}),"：小程序端一次数据库请求最多可以返回20条记录，云函数端一次请求最多可以返回1000条记录，要想在小程序端请求超过20条记录就需要多次进行数据库请求，这时你可以使用云函数来返回数据或使用聚合查询，这样就能减少数据库请求的次数；而对云函数而言，如果你有大量数据请求的需求，比如备份等，也可以通过聚合来减少数据库请求的次数。当然请求过于大量数据不建议在业务场景中使用，只适合管理员的操作；"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"提取嵌套字段里的值"}),"：普通查询只能返回记录列表再通过JavaScript来处理，不能直接返回记录里面指定的字段以及嵌套字段，而用聚合结合unwind、replaceRoot、addFields、project等聚合阶段和聚合操作符，可以将记录里面的嵌套字段提取出来；"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"跨字段统计"}),"：普通查询不能对记录里面的字段进行跨字段的操作，如进行数学运算，比如记录里面有商品A和商品B的每月的价格和销售量，普通查询无法做到统计每月商品A和商品B的销售额。聚合具有非常强大的统计分析能力，可以跨字段、内嵌字段操作；"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"整列整列的批处理"}),"：聚合可以类似于Excel一样对字段进行整列整列的批处理，比如将符合条件的所有记录里的字段都进行算术运算、比较、去重（去除重复值）或者进行跨字段的操作，类似于处理Excel的一整列，这是普通查询做不到的；"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"分组输出多个结果"}),"：聚合可以通过提取字段、新增新字段、删除不必要的字段以及对结果进行分组处理，一次性能够输出多个你想要的结果，比如已知学校每个班级男生、女生的语数外成绩，你想知道每个班男生、女生、语、数、外等的平均分分别是多少"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"lookup联表查询"}),"：使用聚合的lookup可以实现",(0,s.jsx)(n.strong,{children:"跨集合"}),"的记录联表匹配查询，这个可以用来处理类似于关系型数据库的关联关系"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"2聚合流水线说明",children:["2、聚合流水线说明",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2聚合流水线说明",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["聚合管道是一个流水线式的批处理作业，就像工厂的流水线一样，从",(0,s.jsx)(n.code,{children:"aggregate()"}),"发起聚合操作开始，一个流水线作业包含多个批处理阶段（聚合阶段），如match、project、group、sort、skip、limit等（这些聚合阶段可以按照需求来重组），每个聚合阶段接收来自上一个聚合阶段的输入记录列表（如果是第一个阶段则是集合全集），然后加工处理成新的记录列表后输出给下一个阶段，直至end阶段返回结果。"]}),"\n",(0,s.jsx)(n.p,{children:"一个聚合阶段是将输入记录按指定的规则加工处理之后转换为输出记录的过程，比如进行提取字段投影project、排序sort、分组group、新增字段addFields等处理，而每个聚合阶段又可以表达式和操作符进行更加复杂的操作，比如算术运算、比较处理、格式转换、日期转换、累计器等。不同的聚合阶段可以按照任意顺序组合在一起使用，也可以重复任意多次。"}),"\n",(0,s.jsxs)(n.h4,{id:"3聚合表达式说明",children:["3、聚合表达式说明",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3聚合表达式说明",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"聚合表达式可以是字段的路径引用、常量、对象表达式、或操作符表达式，并且可以嵌套使用表达式。通过字段路径引用可以引用一个字段的值，比如以下是一个字段表格（类似于Excel）"}),"\n",(0,s.jsxs)(n.p,{children:["而以",(0,s.jsx)(n.code,{children:"$+字段名"}),"表示引用的是一整列的字段的值，比如",(0,s.jsx)(n.code,{children:"$gdp"}),"表示的是所有城市的GDP，而",(0,s.jsx)(n.code,{children:"$.multiply(['$gdp',10000]"}),"这个表达式使用了算术操作符multiply，也就是将GDP这一列的值分别乘以10000，",(0,s.jsx)(n.code,{children:"$.divide([$.multiply(['$gdp',10000]), '$reg_pop'])"}),"这个表达式则是将GDP这一列的值分别乘以10000，然后再分别处以reg_pop这一列的值，和Excel\b在列的第一行使用公式之后下拉是一样的道理。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果是嵌套字段或数组，也可以通过点表示法和数组下标表示法取引用，比如上一章的案例",(0,s.jsx)(n.code,{children:"$books.publishInfo.press"}),"表示books字段数组里的publishInfo对象里的press字段，而",(0,s.jsx)(n.code,{children:"$books[1].publishInfo.press"}),"则表示books数组第二个元素里的publishInfo对象里的press字段。"]}),"\n",(0,s.jsx)(n.p,{children:"我们可以聚合操作符大致理解为Excel处理数据的公式和函数，两者之间有很多相同之处，和Excel公式一样，聚合操作符也有很多类别，比如算数操作符、比较操作符、布尔操作符、字符串操作符、数组操作符等等，这些操作符有助于我们在聚合查询时实现类似于JavaScript操作数据一样的功能，聚合操作符有哪些呢，我们可以直接在小程序开发者工具控制台打印如下代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"wx.cloud.database().command.aggregate\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"614-云数据库命令与sql语句对应理解",children:["6.1.4 云数据库命令与SQL语句对应理解",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#614-云数据库命令与sql语句对应理解",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"云开发数据库是非关系文档型数据库，和MySQL这种关系型数据库在使用上有不少的差异和联系，下面是云数据库与SQL语句之间的对应立即理解："})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F40.%E8%81%9A%E5%90%88%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.md"]={toc:[{text:"6.1 聚合快速入门",id:"61-聚合快速入门",depth:2},{text:"6.1.1 聚合查询与普通数据查询",id:"611-聚合查询与普通数据查询",depth:3},{text:"6.1.2 聚合的基础知识",id:"612-聚合的基础知识",depth:3},{text:"1、聚合的使用场景",id:"1聚合的使用场景",depth:4},{text:"2、聚合流水线说明",id:"2聚合流水线说明",depth:4},{text:"3、聚合表达式说明",id:"3聚合表达式说明",depth:4},{text:"6.1.4 云数据库命令与SQL语句对应理解",id:"614-云数据库命令与sql语句对应理解",depth:3}],title:"40.聚合快速入门",headingTitle:"40.聚合快速入门",frontmatter:{}}}}]);