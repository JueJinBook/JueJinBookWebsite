"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["86163"],{578998:function(e,n,a){a.r(n),a.d(n,{default:()=>D});var c=a(552676),p=a(740453);let s=a.p+"static/image/db241d4b9924bbf941050d35c149e438.0c7853ce.webp",r=a.p+"static/image/2c419e0568e591e04f954ba2e0f693ce.cb665e12.webp",t=a.p+"static/image/f9e424a4d9e609b6a4641c3ce118a21c.743bbd54.webp",i=a.p+"static/image/bffd8a13a52108b98d9287c46349890c.4773369f.webp",d=a.p+"static/image/89a98460962af79e1163da0547833418.1a3489b3.webp",l=a.p+"static/image/0a45affc1b8b95692f4f1e35afcbdabb.3dc3af0c.webp",h=a.p+"static/image/0f395493665ae25747652a7b11360b32.c44b03cf.webp",o=a.p+"static/image/114acf56c399f8afa583c9437ef89e59.e1126f7c.webp",j=a.p+"static/image/75f53fe7c370ebe53ffe6418f00ee2c6.709fe167.webp",x=a.p+"static/image/263481300f497d3d878dad87b9ed682d.61a4b334.webp",u=a.p+"static/image/81095c77cc70b3e649901343a3a0513b.10f7e8c4.webp",g=a.p+"static/image/ae5e82f9a30ec9c5f13ded406512c768.ec44fdc0.webp",b=a.p+"static/image/594f22c8d66b9613756b91a010016891.38ae0492.webp",f=a.p+"static/image/c99811a3da4f6f4af449cab6e2a97893.bd3531ca.webp",m=a.p+"static/image/bfdb067d6cf0736664c0cf98bf1a1d72.40d8a82f.webp",w=a.p+"static/image/520a169addde00c7d2335b1a2a0cf72b.5eaf5987.webp",E=a.p+"static/image/01f55f279fae6be825106b3dc3c76479.70f49fc4.webp";function A(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,p.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"50把-puppeteer-融入调试流程来做自动化",children:["50.把 Puppeteer 融入调试流程来做自动化",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#50把-puppeteer-融入调试流程来做自动化",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"中后台系统表单比较多，每次调试都要填一堆东西，而且项目需要登录，经常需要来一遍登录流程，再填写表单来调试。这个流程还是比较繁琐的。"}),"\n",(0,c.jsx)(n.p,{children:"于是我在想，自动化测试工具 puppeteer 是可以通过脚本来自动执行浏览器操作的，能不能调试的时候让 puppeteer 帮我自动做了页面操作的一些流程呢？"}),"\n",(0,c.jsx)(n.p,{children:"我试了一下还真可以，用 puppeteer 来自动执行脚本，并且过程中还可以打断点调试，调试体验简直不要太爽。"}),"\n",(0,c.jsx)(n.p,{children:"这节就来分享下。"}),"\n",(0,c.jsx)(n.p,{children:"首先，react 项目是通过 vscode debugger 来调试的："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"在 .vscode > launch.json 的调试配置文件里新增一个 chrome 类型的调试配置，输入调试的 url。"}),"\n",(0,c.jsx)(n.p,{children:"然后点击 debug 启动："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"执行到代码中的断点就会在 vscode 里断住："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这样就可以在 vscode 里断点调试 react 项目了。"}),"\n",(0,c.jsx)(n.p,{children:"但登录还是比较麻烦的，用户名密码我经常忘，而且登录之后还要填一些表单，也很麻烦。"}),"\n",(0,c.jsx)(n.p,{children:"这时候我想到了 puppeteer。"}),"\n",(0,c.jsx)(n.p,{children:"它是可以自动执行脚本的。"}),"\n",(0,c.jsx)(n.p,{children:"比如这样一段脚本："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const puppeteer = require('puppeteer');\n\n(async () => {\n  const browser = await puppeteer.launch({\n    headless: false\n  });\n\n  const page = await browser.newPage();\n  await page.goto('http://localhost:8000/login');\n\n  await page.waitForSelector('#username');\n\n  const $username = await page.$('#username');\n  await $username.type('1111111', {\n    delay: 100\n  });\n  \n  const $password = await page.$('#password');\n  await $password.type('testtest', {\n    delay: 100\n  });\n  \n  const $button = await page.$('button[type=\"submit\"]');\n  await $button.click();\n})();\n"})}),"\n",(0,c.jsx)(n.p,{children:"用 puppeteer 启动一个浏览器，headless 设为 false 就是需要界面。"}),"\n",(0,c.jsx)(n.p,{children:"打开新页面，加载 login 的 url，等出现 #username 的元素之后之后，输入用户名和密码，然后点击提交。"}),"\n",(0,c.jsx)(n.p,{children:"这个脚本还是很容易理解的。"}),"\n",(0,c.jsx)(n.p,{children:"跑下试试："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"流程倒是对了，只是显示的不对，加个 viewport 的设置就好了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"width、height 为 0 会自适应。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"自动跑登录脚本成功了。"}),"\n",(0,c.jsx)(n.p,{children:"此外，launch 支持指定 chrome 的路径，指定 userDataDir，指定启动参数等，和我们调试的时候 launch 浏览器的配置差不多。"}),"\n",(0,c.jsx)(n.p,{children:"那问题来了，断点调试和自动化测试能不能一起跑呢？"}),"\n",(0,c.jsx)(n.p,{children:"看起来这俩都是跑了一个浏览器，应该能融合才对。"}),"\n",(0,c.jsx)(n.p,{children:"这个就要从 puppeteer 和调试的实现原理来看了。"}),"\n",(0,c.jsx)(n.p,{children:"调试是基于调试协议的，比如网页调试是 Chrome DevTools Protocol。"}),"\n",(0,c.jsx)(n.p,{children:"Chrome DevTools 对接了 CDP 可以调试网页，我们用 VSCode Debugger 能调试网页同样也是对接了 CDP。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"puppeteer 能控制浏览器执行一些脚本，也是基于 CDP。"}),"\n",(0,c.jsx)(n.p,{children:"这俩都需要浏览器在调试模式启动，也就是指定 remote-debugging-port。"}),"\n",(0,c.jsx)(n.p,{children:"我们前面跑 react 项目的调试是用的 launch 的方式，它会自动跑一个调试浏览器，然后连接上 ws 调试服务。"}),"\n",(0,c.jsx)(n.p,{children:"其实它还有 attach 的方式："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"attach 的方式不单独跑调试浏览器，而是连接上已有的浏览器来调试。所以需要指定调试服务的端口。"}),"\n",(0,c.jsx)(n.p,{children:"既然 puppeteer 和调试都要以调试模式跑浏览器，那我们就等 puppeteer 跑起 chrome 之后，vscode debugger 再 attach 上它来调试。"}),"\n",(0,c.jsx)(n.p,{children:"这样不就既能自动化测试，又能断点调试了么？"}),"\n",(0,c.jsx)(n.p,{children:"我们来试一下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"puppeteer 启动 chrome 的时候，我指定了调试端口为 9999。"}),"\n",(0,c.jsx)(n.p,{children:"然后跑下 puppeteer 脚本，把 chrome 跑起来："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"之后，去 react 项目里启动调试，只不过这次是 attach："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"依然是能正常断点调试的："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"而且现在还可以跑自动化脚本了！"}),"\n",(0,c.jsx)(n.p,{children:"我们改造下 puppeteer 脚本，改成每次输入内容的时候才跑对应的脚本。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const puppeteer = require('puppeteer');\nconst readline = require('readline');\n\n(async () => {\n  const browser = await puppeteer.launch({\n    headless: false,\n    defaultViewport: {\n      width: 0,\n      height: 0\n    },\n    debuggingPort: 9999\n  });\n\n  const page = await browser.newPage();\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n\n  rl.on('line', async (str) => {\n    if (str === 'login') {\n      await login(page);\n    } else if (str === 'baidu') {\n      await baidu(page);\n    }\n  });\n})();\n\nasync function baidu(page) {\n  await page.goto('http://www.baidu.com');\n}\nasync function login(page) {\n  await page.goto('http://localhost:8000/login');\n\n  await page.waitForSelector('#username');\n\n  const $username = await page.$('#username');\n  await $username.type('1111111', {\n    delay: 100\n  });\n\n  const $password = await page.$('#password');\n  await $password.type('testtest', {\n    delay: 100\n  });\n\n  const $button = await page.$('button[type=\"submit\"]');\n  await $button.click();\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"主要是加了 readline 模块，这是 node 内置模块，用于一行行读取流的输入用的。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"我指定了输入 baidu 的时候打开 baidu，输入 login 的时候打开 localhost:8000，然后执行登录脚本。"}),"\n",(0,c.jsx)(n.p,{children:"试一下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"然后我们把 vscode debugger 也 attach 上。"}),"\n",(0,c.jsx)(n.p,{children:"之后再跑 puppeteer 的脚本。"}),"\n",(0,c.jsx)(n.p,{children:"猜下这时候会发生什么？"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"执行了自动化测试脚本，并且还在断点处断住了！"}),"\n",(0,c.jsx)(n.p,{children:"这样我们就不用再手动点点点，可以用脚本自动跑一些流程，而且还可以断点调试这个流程。"}),"\n",(0,c.jsx)(n.p,{children:"我们再改一下脚本："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"click 之后，又输入了密码，然后再 click："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"断住的时候浏览器不会执行代码，这时候自动化脚本也就执行不了，可以专心根据调用栈作用域等调试代码，调试完之后，释放断点，自动化脚本才会继续执行。"}),"\n",(0,c.jsx)(n.p,{children:"这样我们就完美的把 puppeteer 的自动化测试和 VSCode Debugger 的网页断点调试结合在了一起。"}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"我们会用 VSCode Debugger 断点调试网页，会用 puppeteer 写自动化测试的脚本来测试某条流程。"}),"\n",(0,c.jsx)(n.p,{children:"这俩其实完全可以结合在一起用，因为他们都是基于 CDP，会启动一个调试模式的浏览器。只要 VSCode Debugger attach 到 puppeteer 启动的浏览器就好了。"}),"\n",(0,c.jsx)(n.p,{children:"融合在一起之后，你可以写 puppeteer 脚本来自动化一些流程，比如自动登录、自动填写表单等，这个过程还可以断点调试，断点释放之后再执行后续自动化脚本。"}),"\n",(0,c.jsx)(n.p,{children:"两者简直是完美的配合。"}),"\n",(0,c.jsx)(n.p,{children:"把 puppeteer 融入调试流程，调试体验爽翻了！"})]})}function $(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,p.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(A,{...e})}):A(e)}let D=$;$.__RSPRESS_PAGE_META={},$.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F50.%E6%8A%8A%20Puppeteer%20%E8%9E%8D%E5%85%A5%E8%B0%83%E8%AF%95%E6%B5%81%E7%A8%8B%E6%9D%A5%E5%81%9A%E8%87%AA%E5%8A%A8%E5%8C%96.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"50.把 Puppeteer 融入调试流程来做自动化",headingTitle:"50.把 Puppeteer 融入调试流程来做自动化",frontmatter:{}}}}]);