"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["38691"],{726728:function(n,e,r){r.r(e),r.d(e,{default:()=>l});var t=r(552676),i=r(740453);let a=r.p+"static/image/d24abbcab99a340771d6afa0036f864a.cfc81dac.webp";function s(n){let e=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",blockquote:"blockquote",code:"code",h2:"h2",pre:"pre",h3:"h3",h4:"h4",br:"br",img:"img"},(0,i.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"9初级入门-----绘制多个物体进一步封装绘制方法",children:["9.初级入门 --- 绘制多个物体：进一步封装绘制方法",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#9初级入门-----绘制多个物体进一步封装绘制方法",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"截止到目前，我们已经熟悉了 WebGL 的开发步骤："}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["初始化阶段","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"创建所有着色器程序。"}),"\n",(0,t.jsx)(e.li,{children:"寻找全部 attribute 参数位置。"}),"\n",(0,t.jsx)(e.li,{children:"寻找全部 uniforms 参数位置。"}),"\n",(0,t.jsx)(e.li,{children:"创建缓冲区，并向缓冲区上传顶点数据。"}),"\n",(0,t.jsx)(e.li,{children:"创建纹理，并上传纹理数据。"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["首次渲染阶段","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"为 uniforms 变量赋值。"}),"\n",(0,t.jsxs)(e.li,{children:["处理 attribute 变量","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"使用 gl.bindBuffer 重新绑定模型的 attribute 变量。"}),"\n",(0,t.jsx)(e.li,{children:"使用 gl.enableVertexAttribArray 启用 attribute 变量。"}),"\n",(0,t.jsx)(e.li,{children:"使用 gl.vertexAttribPointer设置 attribute变量从缓冲区中读取数据的方式。"}),"\n",(0,t.jsx)(e.li,{children:"使用 gl.bufferData 将数据传送到缓冲区中。"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.li,{children:"使用 gl.drawArrays 执行绘制。"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["后续渲染阶段","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"对发生变化的 uniforms 变量重新赋值。"}),"\n",(0,t.jsxs)(e.li,{children:["每个模型的 attribute 变量。","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"使用 gl.bindBuffer 重新绑定模型的 attribute 变量。"}),"\n",(0,t.jsx)(e.li,{children:"使用 gl.bufferData 重新向缓冲区上传模型的 attribute 数据。"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.li,{children:"使用 gl.drawArrays 执行绘制。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"这就是 WebGL 的基本绘制流程，但是这些只是在绘制单个模型时的步骤。思考一下，如果我们有多个模型，会碰到哪些问题？如何进行优化？"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["这里提到了模型的概念，3D 中的模型是由顶点",(0,t.jsx)(e.code,{children:"vertex"}),"组成，顶点之间连成三角形，多个三角形就能够组成复杂的立体模型。简单模型诸如立方体、球体等，复杂模型诸如汽车、茶壶等。类比到现实世界中，模型可以理解为现实生活中看得见摸得着的物体。"]}),"\n"]}),"\n",(0,t.jsxs)(e.h2,{id:"创建模型类",children:["创建模型类",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#创建模型类",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["每个模型都有对应的顶点数据，包含顶点位置、颜色、法向量、纹理坐标等，我们将这些数据用一个顶点缓冲对象来表示，每个属性对应一个 ",(0,t.jsx)(e.code,{children:"attribute"})," 变量。除了顶点数据，还需要有众多 ",(0,t.jsx)(e.code,{children:"uniforms"})," 变量，uniforms 变量存储和顶点无关的属性，比如",(0,t.jsx)(e.code,{children:"模型变换矩阵"}),"、模型视图投影矩阵",(0,t.jsx)(e.code,{children:"MVP"}),"，（后续我们用 ",(0,t.jsx)(e.code,{children:"MVP"})," 指代模型视图投影矩阵），法向量矩阵，光照等。既然模型有这么多共同的属性，那么我们把模型抽象出来。"]}),"\n",(0,t.jsxs)(e.p,{children:["定义一个模型类，模型类自身属性有模型矩阵",(0,t.jsx)(e.code,{children:"u_ModelMatrix"}),"，MVP 矩阵",(0,t.jsx)(e.code,{children:"u_Matrix"}),"，以及所有的 uniforms 变量，顶点缓冲数据。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"//模型类\nfunction Model(bufferInfo, uniforms ){\n    this.uniforms = uniforms || {};\n    this.u_Matrix = matrix.identity();\n    this.bufferInfo = bufferInfo || {};\n    \n    // 偏移\n    this.translation = [0, 0, 0];\n    // 旋转角度\n    this.rotation = [0, 0, 0];\n    // 缩放\n    this.scalation = [1, 1, 1];\n}\n"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"matrix.identity 方法生成一个单位矩阵。"}),"\n"]}),"\n",(0,t.jsxs)(e.h3,{id:"设置顶点对象",children:["设置顶点对象",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#设置顶点对象",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["提供一个为模型提供顶点数据的方法，顶点数据用一个对象表示，对象的属性用着色器中属性名称来 表示，对应顶点属性。一个完整的 ",(0,t.jsx)(e.code,{children:"bufferInfo"})," 包含如下内容："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"bufferInfo = {\n    attributes:{\n        a_Positions: {\n            buffer: buffer,\n            type: gl.FLOAT,\n            normalize: false,\n            numsPerElement: 4,\n        },\n        a_Colors:{\n            buffer:buffer,\n            type: gl.UNSIGNED_BYTE,\n            normalize: true,\n            numsPerElement: 4\n        },\n        a_Normals:{\n            buffer:buffer,\n            type: gl.FLOAT,\n            normalize: false,\n            numsPerElement: 3\n        },\n        a_Texcoords:{\n            buffer:buffer,\n            type: gl.FLOAT,\n            normalize: false,\n            numsPerElement: 2\n        }\n    },\n    indices:[],\n    elementsCount: 30\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"indices"})," 代表顶点的索引数组， ",(0,t.jsx)(e.code,{children:"elementsCount"})," 表示顶点的个数。buffer 代表 WebGL 创建的 buffer 对象，里面存储着对应的顶点数据。"]}),"\n",(0,t.jsx)(e.p,{children:"顶点数据对象除了可以在初始化时为 model 设置以外，还需要为 model 提供一个单独设置方法："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"Model.prototype.setBufferInfo = function(bufferInfo){\n    this.bufferInfo = bufferInfo || {};\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"我们最初得到的顶点模型数据一般是这种格式的："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let vertexObject = {\n    positions: [],\n    normals: [],\n    texcoords: [],\n    indices: [],\n    colors: []\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"这和我们上面设置的字段格式都不同，所以我们要添加一个适配器转换一下。"}),"\n",(0,t.jsxs)(e.h3,{id:"设置模型状态",children:["设置模型状态",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#设置模型状态",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"我们需要一些方法能够随时对模型对象的信息进行修改，比如位移，旋转角度，缩放比例等，最后还需要增加一个 preRender 预渲染方法，在绘制之前更新矩阵。"}),"\n",(0,t.jsxs)(e.h4,{id:"设置模型位移",children:["设置模型位移。",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#设置模型位移",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"位移的设置包含同时对三个分量设置以及对每个分量单独设置："}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"translate：对模型设置 X 轴、Y 轴、Z 轴方向的偏移。"}),"\n",(0,t.jsx)(e.li,{children:"translateX：对模型设置 X 轴偏移。"}),"\n",(0,t.jsx)(e.li,{children:"translateY：对模型设置 Y 轴偏移。"}),"\n",(0,t.jsx)(e.li,{children:"translateZ：对模型设置 Z 轴偏移。"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"Model.prototype.translate = function(tx, ty, tz){\n    this.translateX(tx);\n    this.translateY(ty);\n    this.translateZ(tz);\n}\nModel.prototype.translateX = function(tx){\n    this.translation[0] = tx || 0;\n}\nModel.prototype.translateY = function(ty){\n    this.translation[1] = ty || 0;\n}\nModel.prototype.translateZ = function(tz){\n    this.translation[2] = tz || 0;\n}\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"设置模型缩放比例",children:["设置模型缩放比例。",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#设置模型缩放比例",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"缩放比例的设置包含同时对三个分量设置以及对每个分量单独设置："}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"scale：对模型设置 X 轴、Y 轴、Z 轴上的缩放比例。"}),"\n",(0,t.jsx)(e.li,{children:"scaleX：对模型设置 X 轴缩放比例。"}),"\n",(0,t.jsx)(e.li,{children:"scaleY：对模型设置 Y 轴缩放比例。"}),"\n",(0,t.jsx)(e.li,{children:"scaleZ：对模型设置 Z 轴缩放比例。"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"Model.prototype.scale = function(sx, sy, sz){\n    this.scaleX(sx);\n    this.scaleY(sy);\n    this.scaleZ(sz);\n}\nModel.prototype.scaleX = function(sx){\n    this.scalation[0] = sx || 1;\n}\nModel.prototype.scaleY = function(sy){\n    this.scalation[1] = sy || 1;\n}\nModel.prototype.scaleZ = function(sz){\n    this.scalation[2] = sz || 1;\n}\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"设置模型旋转角度",children:["设置模型旋转角度。",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#设置模型旋转角度",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"模型旋转角度的设置包含同时对三个分量设置以及对每个分量单独设置："}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"rotate：对模型设置 X轴、Y轴、Z 轴上的旋转角度。"}),"\n",(0,t.jsx)(e.li,{children:"rotateX：对模型设置 X 轴旋转角度。"}),"\n",(0,t.jsx)(e.li,{children:"rotateY：对模型设置 Y 轴旋转角度。"}),"\n",(0,t.jsx)(e.li,{children:"rotateZ：对模型设置 Z 轴旋转角度。"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"Model.prototype.rotate = function(rx, ry, rz){\n    this.rotateX(rx);\n    this.rotateY(ry);\n    this.rotateZ(rz);\n}\nModel.prototype.rotateX = function(rx){\n    this.rotation[0] = rx || 0;\n}\nModel.prototype.rotateY = function(ry){\n    this.rotation[1] = ry || 0;\n}\nModel.prototype.rotateZ = function(rz){\n    this.rotation[2] = rz || 0;\n}\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"预渲染",children:["预渲染。",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#预渲染",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"在将模型矩阵以及模型的 MVP 矩阵传递给 GPU 之前，我们对模型矩阵以及 MVP 矩阵重新计算。"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"rotate：对模型设置 X 轴、Y 轴、Z 轴上的旋转角度。"}),"\n",(0,t.jsx)(e.li,{children:"rotateX：对模型设置 X 轴旋转角度。"}),"\n",(0,t.jsx)(e.li,{children:"rotateY：对模型设置 Y 轴旋转角度。"}),"\n",(0,t.jsx)(e.li,{children:"rotateZ：对模型设置 Z 轴旋转角度。"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"Model.prototype.preRender =  function( viewMatrix, projectionMatrix){\n    let modelMatrix = matrix.identity();\n  if (this.translation) {\n    modelMatrix = matrix.translate(\n      modelMatrix,\n      this.translation[0],\n      this.translation[1],\n      this.translation[2]\n    );\n  }\n  if (this.rotation) {\n    if (this.rotation[0] !== undefined)\n      modelMatrix = matrix.rotateX(modelMatrix, degToRadians(this.rotation[0]));\n    if (this.rotation[1] !== undefined)\n      modelMatrix = matrix.rotateY(modelMatrix, degToRadians(this.rotation[1]));\n    if (this.rotation[2] !== undefined)\n      modelMatrix = matrix.rotateZ(modelMatrix, degToRadians(this.rotation[2]));\n  }\n  if (this.scalation) {\n    modelMatrix = matrix.scale(\n      modelMatrix,\n      this.scalation[0],\n      this.scalation[1],\n      this.scalation[2]\n    );\n  }\n\n  this.u_ModelMatrix = modelMatrix;\n\n  //重新计算 MVP 矩阵\n\n  this.u_Matrix = matrix.multiply(viewMatrix, this.u_ModelMatrix);\n  this.u_Matrix = matrix.multiply(projectionMatrix, this.u_Matrix);\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"封装顶点数据的操作",children:["封装顶点数据的操作",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#封装顶点数据的操作",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"最为重要的是顶点数据，它们是模型的基本组成元素，顶点数据一般包含如下几个属性："}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"颜色信息"}),"\n",(0,t.jsx)(e.li,{children:"位置信息"}),"\n",(0,t.jsx)(e.li,{children:"法向量信息"}),"\n",(0,t.jsx)(e.li,{children:"索引信息"}),"\n",(0,t.jsx)(e.li,{children:"纹理坐标"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"bufferInfo = {\n    colors: [],\n    positions: [],\n    normals: [],\n    indices: [],\n    texcoords: []\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"我们有了这些顶点信息，还需要通过 attribute 变量传递给 GPU，所以，我们还需要找到对应的 attribute 变量。"}),"\n",(0,t.jsxs)(e.p,{children:["在着色器中命名 attribute 变量时，我们通常使用 ",(0,t.jsx)(e.code,{children:"a_"})," 开头，后面跟着顶点属性名称，按照这种规范命名也方便我们在 JavaScript 中对变量进行赋值。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"attribute vec4 a_Positions;\nattribute vec3 a_Normals;\nattribute vec2 a_Texcoords;\nattribute vec4 a_Colors;\n"})}),"\n",(0,t.jsx)(e.p,{children:"那么我们查找变量时，可以这样查找："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let attributesCount = gl.getProgramParameter(program, param);\n"})}),"\n",(0,t.jsx)(e.p,{children:"当 pname 为 gl.ACTIVE_ATTRIBUTES时，返回program绑定的顶点着色器中 attribute 变量的数量 attributesCount。"}),"\n",(0,t.jsx)(e.p,{children:"有了变量数量，我们就可以对变量进行遍历了。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"for(let i = 0; i< attributesCount; i++){\n    let attributeInfo = gl.getActiveAttrib(program, i);\n}\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["attributeInfo 对象包含 attribute 的变量名称 name，有了",(0,t.jsx)(e.code,{children:"name"}),"我们就能够用 JavaScript 查找该 attribute 变量了："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let attributeIndex = gl.getAttribLocation(program, attributeInfo.name);\n"})}),"\n",(0,t.jsx)(e.p,{children:"接着是熟悉的对变量的启用、读取缓冲区方式的设置了，我们将这些操作封装到一个方法中。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function createAttributeSetter(attributeIndex){\n    return function(bufferInfo){\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.buffer);\n        gl.enableVertexAttribArray(attributeIndex);\n        gl.vertexAttribPointer(\n          attributeIndex,\n          bufferInfo.numsPerElement || bufferInfo.size,\n          bufferInfo.type || gl.FLOAT,\n          bufferInfo.normalize || false,\n          bufferInfo.stride || 0,\n          bufferInfo.offset || 0\n        );\n    }\n}\n\n"})}),"\n",(0,t.jsxs)(e.p,{children:["定义一个 attribute 变量设置对象，对每个 attribute 绑定上面实现的设置方法",(0,t.jsx)(e.code,{children:"createAttributeSetter"}),"。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let attributeSetter = {};\nfor(let i = 0; i< attributesCount; i++){\n    let attributeInfo = gl.getActiveAttrib(program, i);\n    let attributeIndex = gl.getAttribLocation(program, attributeInfo.name);\n    attributeSetter[attributeInfo.name] = createAttributeSetter(attributeIndex);\n}\nreturn attributeSetter;\n"})}),"\n",(0,t.jsx)(e.p,{children:"以上是对着色器的各个attribute变量初始化操作，那么当我们需要对这些变量赋值时，就可以调用attribute 变量对应的 setter 函数对 attribute 进行设置了。"}),"\n",(0,t.jsxs)(e.h3,{id:"封装-uniforms-变量操作",children:["封装 uniforms 变量操作。",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#封装-uniforms-变量操作",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"那么，除了 attribute 变量，程序中还充斥着很多 uniforms 变量，uniforms 变量是与顶点无关的，即不管执行多少遍顶点操作， uniforms 变量始终保持不变。"}),"\n",(0,t.jsx)(e.p,{children:"像 attribute 变量一样，我们仍然需要先找到所有 uniforms 变量："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let uniformsCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n"})}),"\n",(0,t.jsx)(e.p,{children:"之后，遍历所有 uniforms 变量，根据 uniforms 变量名称，生成 uniforms 赋值函数。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let uniformsSetters = {};\nfor(let i = 0; i< uniformsCount; i++){\n    let uniformInfo = gl.getActiveUniform(program, i);\n      if (!uniformInfo) {\n        break;\n      }\n      let name = uniformInfo.name;\n      if (name.substr(-3) === '[0]') {\n        name = name.substr(0, name.length - 3);\n      }\n      var setter = createUniformSetter(program, uniformInfo);\n      uniformSetters[name] = setter;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"uniforms 赋值函数比较繁琐一些，只因 uniforms 变量类型比较多，我们需要针对 uniforms 变量类型，编写对应的赋值函数。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let enums = {\n        FLOAT_VEC2: {\n            value: 0x8B50,\n            setter: function(location, v){\n                gl.uniform2fv(location, v);\n            }\n        },\n        FLOAT_VEC3: {\n            value: 0x8B51,\n            setter: function(location, v){\n                gl.uniform3fv(location, v);\n            }\n        }\n        FLOAT_VEC4: {\n            value: 0x8B52,\n            setter: function(location, v){\n                gl.uniform3fv(location, v);\n            }\n        },\n        INT_VEC2: {\n            value: 0x8B53,\n            setter: function(location, v){\n                gl.uniform2iv(location, v);\n            }\n        },\n        INT_VEC3: {\n            value: 0x8B54,\n            setter: function(location, v){\n                gl.uniform3iv(location, v);\n            }\n        },\n        INT_VEC4: {\n            value: 0x8B55,\n            setter: function(location, v){\n                gl.uniform4iv(location, v);\n            }\n        },\n        BOOL: {\n            value: 0x8B56,\n            setter: function(location, v){\n                gl.uniform1iv(location, v);\n            }\n        },\n        BOOL_VEC2: {\n            value: 0x8B57,\n            setter: function(location, v){\n                gl.uniform2iv(location, v);\n            }\n        },\n        BOOL_VEC3: {\n            value: 0x8B58,\n            setter: function(location, v){\n                gl.uniform3iv(location, v);\n            }\n        },\n        BOOL_VEC4: {\n            value: 0x8B59,\n            setter: function(location, v){\n                gl.uniform4iv(location, v);\n            }\n        },\n        FLOAT_MAT2: {\n            value: 0x8B5A,\n            setter: function(location, v){\n                gl.uniformMatrix2fv(location, false, v);\n            }\n        },\n        FLOAT_MAT3: {\n            value: 0x8B5B,\n            setter: function(location, v){\n                gl.uniformMatrix3fv(location, false, v);\n            }\n        },\n        FLOAT_MAT4: {\n            value: 0x8B5C,\n            setter: function(location, v){\n                gl.uniformMatrix4fv(location, false, v);\n            }\n        },\n        SAMPLER_2D: {\n            value: 0x8B5E,\n            setter: function(location, texture){\n            gl.uniform1i(location, 0);\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n          }\n        },\n        SAMPLER_CUBE: {\n            value: 0x8B60,\n            setter: function(location, texture){\n                gl.uniform1i(location, 0);\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n            }\n        },\n        \n        INT: {\n            value: 0x1404,\n            setter: function(location, v){\n                gl.uniform1i(location, v);\n            }\n        },\n        \n        FLOAT: {\n            value: 0x1406,\n            setter: function(location, v){\n                gl.uniform1f(location, v);\n            }\n        }\n};\n"})}),"\n",(0,t.jsxs)(e.p,{children:["enums 是所有的变量类型，但没有包含普通数组，所以我们还需要通过 uniformInfo.size 属性判断该 uniform 变量是否是数组，uniform 变量的 size 大于 1  并且该变量名称的最后三个字符是",(0,t.jsx)(e.code,{children:"[0]"}),"，说明该 uniform 变量是数组类型，大家可以尝试一下。"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["有两点需要大家注意：",(0,t.jsx)(e.br,{}),"\n","1、如果 uniform 或者 attribute 变量只是在着色器中进行了定义，但没有被使用，那么它将被编译器抛弃，我们通过",(0,t.jsx)(e.code,{children:"gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)"}),"这种方式获取不到该变量。",(0,t.jsx)(e.br,{}),"\n","2、uniform 和 attribute 变量的数量并不是可以无限定义的，而是有一定上限，不同平台数量不同，一般 windows 平台 256 个，mac 和 linux 平台一般为 1024 个，如果定义数量超过这个上限，着色器程序会报编译错误。"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function createUniformSetter(gl, program, uniformInfo) {\n    let uniformLocation = gl.getUniformLocation(program, uniformInfo.name);\n    let type = uniformInfo.type;\n    let isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\n    \n    if(isArray && type == enums.INT.value){\n        return function(v) {\n          gl.uniform1iv(location, v);\n        };\n    }\n    if(isArray && type == enums.FLOAT.value){\n        return function(v) {\n          gl.uniform1fv(location, v);\n        };\n    }\n    return function createSetter(v){\n        return enums[getKeyFromType(type)].setter(location, v)\n    }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"以上就是 uniforms 变量的初始化过程，相对繁琐，但比较简单，容易理解。"}),"\n",(0,t.jsxs)(e.h2,{id:"绘制多个物体",children:["绘制多个物体",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#绘制多个物体",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"既然有了模型类、uniforms 和 attribute 变量的赋值函数，接下来我们就可以创建一个模型列表和一个渲染列表，模型列表中存放所有模型对象，渲染列表中存放着待渲染的对象。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// 渲染列表\nlet renderList = new List();\n// 模型列表\nlet modelList = new list();\n\n// 列表类\nfunction List(list){\n    this.list = list || [];\n    this.uuid = list.length;\n}\n// 添加对象\nList.prototype.add = function(object){\n    object.uuid = this.uuid;\n    this.list.push(object);\n    this.uuid++;\n}\n// 删除对象\nList.prototype.remove = function(object){\n    this.list.splice(object.uuid, 1);\n}\n// 查找对象\nList.prototype.get = function(index){\n    return this.list[index];\n}\n// 遍历列表\nList.prototype.forEach = function(callback){\n    return this.list.forEach(callback);\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"模型列表和渲染列表的区别在于，渲染列表只存储和渲染相关的数据，比如着色器程序，模型的顶点缓冲数据，uniforms 数据等。"}),"\n",(0,t.jsx)(e.p,{children:"一个完整的模型对象有如下内容："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let modelObject={\n    // 偏移状态\n    translation:[0, 0, 0],\n    // 缩放状态\n    scalation:[1, 1, 3],\n    // 旋转状态\n    rotation:[30, 60, 100],\n    bufferInfo:{\n        // 顶点属性\n        attributes:{\n            // 顶点坐标\n            a_Position: {\n                buffer: [],\n                type: gl.FLOAT,\n                normalize: false,\n                numsPerElement: 4\n            },\n            ...\n        },\n        // 顶点索引\n        indices: [],\n        // 顶点数量\n        elementsCount: 30\n    },\n    uniforms: {\n        // MVP 矩阵\n        u_Matrix: ...,\n        // 模型矩阵\n        u_ModelMatrix: ...,\n        // 法向量矩阵\n        u_NormalMatrix: ...,\n        // 全局光照\n        u_LightColor: ...,\n        ...\n    }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"而一个渲染对象通常包含对应模型的几个属性："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let renderObject = {\n    // 模型\n    bufferInfo: modelObject.bufferInfo,\n    program: program,\n    uniforms: modelObject.uniforms,\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"添加一个新模型时，我们只需要初始化模型对象，添加到 objectList 中，同时往 renderList 中添加渲染对象。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let cube = createCube(5, 5, 5);\nlet cubeModel = new Model(cube);\nobjectList.add(cubeModel);\nlet renderObject= {\n    program: program,\n    model: cubeModel,\n    primitive: 'TRIANGLES',\n    renderType: 'drawArrays'\n}\nrenderList.add(renderObject);\n"})}),"\n",(0,t.jsx)(e.p,{children:"每次渲染时，首先遍历 objectList 中的模型对象，计算模型的 uniforms 变量，比如代表模型状态的 MVP 矩阵，模型矩阵，法向量矩阵等，以及顶点数据 bufferInfo，然后遍历 renderList 中的渲染对象，设置对应的 bufferInfo 和 uniforms 变量 ，执行绘制即可。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"objectList.forEach(function(modelObject){\n    // 计算相关 uniforms 属性。\n    modelObject.preRender();\n})\nrenderList.forEach(function(renderObject){\n    let bufferInfo = renderObject.model.bufferInfo;\n    let uniforms = renderObject.model.uniforms;\n    let program = renderObject.program;\n    // 往顶点缓冲区传递数据\n    setBufferInfos(gl, program, bufferInfo);\n    // 设置 uniforms 变量。\n    setUniforms(gl, program, uniforms);\n    // 绘制\n    if (renderObject.renderType === 'drawElements') {\n        if (bufferInfo.indices) {\n            gl.drawElements(object.primitive, bufferInfo.indices.length, gl.UNSIGNED_SHORT, 0);\n            return;\n        } else {\n            console.warn('model buffer does not support indices to draw');\n            return;\n        }\n    } else {\n          gl.drawArrays(gl[object.primitive], 0, bufferInfo.elementsCount);\n    }\n})\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"演示",children:["演示",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#演示",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["接下来我们用上面的代码演示一下绘制多个模型的场景，利用之前写好的立方体和球体生成函数，我们生成 200 个模型，随机分配颜色，请注意由于目前强制要求一个模型的顶点必须包含",(0,t.jsx)(e.code,{children:"颜色"}),"、",(0,t.jsx)(e.code,{children:"坐标"}),"、",(0,t.jsx)(e.code,{children:"纹理坐标"}),"、",(0,t.jsx)(e.code,{children:"法向量"}),"的，所以我们的模型生成函数必须要有能力生成这些属性。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let cube = createCube(2, 2, 2);\n// 将带索引的立方体顶点数据转化成无索引的顶点数据\ncube = transformIndicesToUnIndices(cube);\n// 为顶点数据添加颜色信息\ncreateColorForVertex(cube);\nlet sphere = createSphere(1, 10, 10);\n// 将带索引的球体顶点数据转化成无索引的顶点数据\nsphere = transformIndicesToUnIndices(sphere);\n// 为顶点数据添加颜色信息\ncreateColorForVertex(sphere);\n"})}),"\n",(0,t.jsx)(e.p,{children:"根据上面的顶点数据生成模型缓冲对象："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// 生成立方体的顶点缓冲对象\nlet cubeBufferInfo = createBufferInfoFromObject(gl, cube);\n// 生成球体的顶点缓冲对象\nlet sphereBufferInfo = createBufferInfoFromObject(gl, sphere);\n"})}),"\n",(0,t.jsx)(e.p,{children:"创建模型列表和渲染列表,这里我们选择创建 100 个模型"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let modelList = new List();\nlet renderList = new List();\nfor (var i = 0; i < 100; ++i) {\n    var object = new Model();\n    if (i % 2 == 0) {\n        object.setBufferInfo(bufferInfo);\n    } else {\n        object.setBufferInfo(sphereBufferInfo);\n    }\n    // 设置模型的位置\n    object.translate(rand(-10, 10), rand(-10, 10), rand(-10, 10));\n    // 设置模型的旋转角度\n    object.rotate(rand(0, 90));\n    // 预渲染\n    object.preRender(viewMatrix, projectionMatrix);\n    // 设置模型的 uniforms 属性。\n    object.setUniforms({\n        u_ModelMatrix: object.u_ModelMatrix,\n        u_Matrix: object.u_Matrix,\n        u_ColorFactor: new Float32Array([rand(0.5, 0.75), rand(0.5, 0.75), rand(0.25, 0.5)])\n    })\n\n    objectList.add(object);\n    // 根据模型对象创建渲染对象，并将渲染对象添加到渲染列表中\n    renderList.add({\n        programInfo: program,\n        model: object,\n        primitive: gl.TRIANGLES,\n        renderType: 'drawArrays'\n    });\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"有了模型列表和渲染列表，接下来我们就可以执行渲染操作了，渲染操作是遍历渲染列表，重新设置模型的 bufferInfo 和 uniforms 属性，然后执行绘制。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function render() {\n    if (!playing) {\n        requestAnimationFrame(render);\n        return;\n    }\n    // 重新设置模型的状态\n    objectList.forEach(function (object) {\n        object.rotateX(object.rotation[0] + rand(0.2, 0.5));\n        object.rotateY(object.rotation[1] + rand(0.2, 0.5));\n        object.rotateZ(object.rotation[1] + rand(0.2, 0.5));\n        object.preRender(viewMatrix, projectionMatrix);\n        object.setUniforms({\n            u_ModelMatrix: object.u_ModelMatrix,\n            u_Matrix: object.u_Matrix,\n        })\n    })\n    // 执行渲染\n    let lastProgram;\n    let lastBufferInfo;\n    renderList.forEach(function (object) {\n        let programInfo = object.programInfo;\n        let bufferInfo = object.model.bufferInfo;\n        let uniforms = object.model.uniforms;\n        let bindBuffers = false;\n        if (programInfo !== lastProgram) {\n          lastProgram = programInfo;\n          gl.useProgram(programInfo.program);\n          bindBuffers = true;\n        }\n\n        if (bindBuffers || bufferInfo !== lastBufferInfo) {\n          lastBufferInfo = bufferInfo;\n          setBufferInfos(gl, programInfo, bufferInfo);\n        }\n        setUniforms(programInfo, uniforms);\n\n        // 绘制\n        if (object.renderType === 'drawElements') {\n          if (bufferInfo.indices) {\n            gl.drawElements(object.primitive, bufferInfo.indices.length, gl.UNSIGNED_SHORT, 0);\n            return;\n          } else {\n            console.warn('model buffer does not support indices to draw');\n            return;\n          }\n        } else {\n          gl.drawArrays(gl[object.primitive], 0, bufferInfo.elementsCount);\n        }\n      });\n      requestAnimationFrame(render);\n    }\n"})}),"\n",(0,t.jsx)(e.p,{children:"上面这些就是重构后的调用代码，是不是很简洁了很多？我们看下效果："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsxs)(e.h2,{id:"回顾",children:["回顾",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#回顾",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["本节将之前的代码进行重构优化，大家可以看到一些前面用到的、没有用到的函数，比如 ",(0,t.jsx)(e.code,{children:"uniforms"})," 属性赋值函数，虽然种类很多，但是很容易就能够见名知意。之前代码有用到 ",(0,t.jsx)(e.code,{children:"gl.uniform1f"})," 给变量赋值单个 ",(0,t.jsx)(e.code,{children:"float"})," 类型的数字，其他类似的函数也是为了给 uniform 变量赋值，只是赋值类型不同。"]}),"\n",(0,t.jsxs)(e.p,{children:["通过对重用代码进行封装，我们能够以很少的代码绘制多个模型，并且不用再去编写繁琐的",(0,t.jsx)(e.code,{children:"buffer"})," 和 ",(0,t.jsx)(e.code,{children:"uniform"})," 的赋值代码，我们把精力放在编写模型的状态逻辑上，这大大地提高了我们的开发效率。"]}),"\n",(0,t.jsx)(e.p,{children:"下一节我们开始学习光照效果，光照效果涉及到一些物理学知识，大家先别急着看代码，先理解下物理知识，然后多做实践，相信大家很快就能掌握。"})]})}function o(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(s,{...n})}):s(n)}let l=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["WebGL%20%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5%2F9.%E5%88%9D%E7%BA%A7%E5%85%A5%E9%97%A8%20---%20%E7%BB%98%E5%88%B6%E5%A4%9A%E4%B8%AA%E7%89%A9%E4%BD%93%EF%BC%9A%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%B0%81%E8%A3%85%E7%BB%98%E5%88%B6%E6%96%B9%E6%B3%95.md"]={toc:[{text:"创建模型类",id:"创建模型类",depth:2},{text:"设置顶点对象",id:"设置顶点对象",depth:3},{text:"设置模型状态",id:"设置模型状态",depth:3},{text:"设置模型位移。",id:"设置模型位移",depth:4},{text:"设置模型缩放比例。",id:"设置模型缩放比例",depth:4},{text:"设置模型旋转角度。",id:"设置模型旋转角度",depth:4},{text:"预渲染。",id:"预渲染",depth:4},{text:"封装顶点数据的操作",id:"封装顶点数据的操作",depth:3},{text:"封装 uniforms 变量操作。",id:"封装-uniforms-变量操作",depth:3},{text:"绘制多个物体",id:"绘制多个物体",depth:2},{text:"演示",id:"演示",depth:2},{text:"回顾",id:"回顾",depth:2}],title:"9.初级入门 --- 绘制多个物体：进一步封装绘制方法",headingTitle:"9.初级入门 --- 绘制多个物体：进一步封装绘制方法",frontmatter:{}}}}]);