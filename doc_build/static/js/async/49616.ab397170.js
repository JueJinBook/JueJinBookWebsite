"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["49616"],{558840:function(a,n,e){e.r(n),e.d(n,{default:()=>G});var s=e(552676),i=e(740453);let r=e.p+"static/image/2f1369fe9eddd0e9ea6bd6b2c6a7fb3b.13e75a8f.webp",c=e.p+"static/image/45c650081e98018a53a97a7d727071a5.45777216.webp",t=e.p+"static/image/b021fc1bb927e5fac584936927021f06.4172cb06.webp",l=e.p+"static/image/c5afb771e67fe679a02a001d37aa626a.155581d0.webp",d=e.p+"static/image/9fb355aa9fa7e4ea71304ba6ed5809a0.674c9490.webp",p=e.p+"static/image/d5506d4d230946a041651e69be08da54.7569d95c.webp",o=e.p+"static/image/2da0fa4026e99b333e42a394fd89ed97.b69422e3.webp",j=e.p+"static/image/e7b16b25b8abcb88f04e36a01d448375.db6240e7.webp",x=e.p+"static/image/d24e715cde88ab3258c7228f3c3eaa83.1b2cd573.webp",h=e.p+"static/image/da0bfd54e4c456fc324f73a1d2a7d5f9.4856f2fb.webp",m=e.p+"static/image/efedf1d8cb3026831add732c35eebc70.951ba84b.webp",g=e.p+"static/image/b9e9a3910ae9403cd96d30388b41d496.727348ac.webp",b=e.p+"static/image/5ce081458d9cc11defe222b9123cf51c.948d9c86.webp",f=e.p+"static/image/01cc202b819d17f04150021d8b290725.5c0b0f53.webp",u=e.p+"static/image/1ae4d72eea31f971855165f9e99815ac.1b47bad0.webp",I=e.p+"static/image/55e1f29121d59700ab2f7b4d84a7edb9.af4fee74.webp",v=e.p+"static/image/f72ef7e5037670fb5dd170a1efd12450.d69d264c.webp",A=e.p+"static/image/bd68bc5151aed56f24132d4a127e060d.acc9464f.webp",y=e.p+"static/image/d9bf31ca8aa80aa749224a6c5209011f.7f0aa7fe.webp",w=e.p+"static/image/88ab1acf7ec837c912af35700d5bf849.6521e003.webp",E=e.p+"static/image/e654cba55e08c87338aca6dc810e4089.a55186de.webp",N=e.p+"static/image/e978fa0d1fc29377569cd559d0b5fb84.96b14e9c.webp",V=e.p+"static/image/b8317260e39395c8a4272173c361a115.6ab33a6f.webp",C=e.p+"static/image/f5c77094d7eca429f8fa36b6614af728.bada4c8c.webp",M=e.p+"static/image/292052a8067c6985a166c2fc5c996fb7.1be40601.webp",S=e.p+"static/image/026897571929250b779ed2c85c0f786b.c456fa36.webp",D=e.p+"static/image/e072ee54b58e29ea07f89c545e43f86a.8d8af859.webp",P=e.p+"static/image/5d5d81f23fba91fe75b2e2577efc280c.ca0fe2d8.webp",_=e.p+"static/image/7d560010ce4925abd59cbfe0691ef963.fdba29eb.webp",B=e.p+"static/image/49115547f8139d40c24eef1ed2128128.d2ab156a.webp",k=e.p+"static/image/ffd6a9a8d5bd2c8d426f3ad1ff713016.aa0673e6.webp",O=e.p+"static/image/84189ba54fe316b8db0265d66a289602.ffb909ae.webp",L=e.p+"static/image/1e782aac4995a9fbd848f4f90972830a.2d6f3236.webp",R=e.p+"static/image/18a0239de5fe8ee689867a1320386033.c5fc983b.webp",F=e.p+"static/image/59c6cd30128cf83d862da372685eb63b.a9c0af0d.webp";function T(a){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,i.ah)(),a.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"85-class--validator-的内置装饰器如何自定义装饰器",children:["85. class- validator 的内置装饰器，如何自定义装饰器",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#85-class--validator-的内置装饰器如何自定义装饰器",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们会用 class-validator 的装饰器对 dto 对象做校验。"}),"\n",(0,s.jsx)(n.p,{children:"那 class-validator 都有哪些装饰器可用呢？"}),"\n",(0,s.jsx)(n.p,{children:"这节我们来过一遍。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest new class-validator-decorators\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:F,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"创建个 CRUD 模块："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g resource aaa --no-spec\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"全局启用 ValidationPipe，对 dto 做校验："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:L,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:O,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ValidationPipe } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  app.useGlobalPipes(new ValidationPipe());\n\n  await app.listen(3000);\n}\nbootstrap();\n"})}),"\n",(0,s.jsx)(n.p,{children:"安装用到的 class-validator 和 class-transformer 包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save class-validator class-transformer\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后在 create-aaa.dto.ts 加一下校验："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateAaaDto {\n\n    @IsNotEmpty({message: 'aaa 不能为空'})\n    @IsString({message: 'aaa 必须是字符串'})\n    @IsEmail({}, {message: 'aaa 必须是邮箱'})\n    aaa: string;\n\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"postman 里访问下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这就是 class-validator 的装饰器的用法。"}),"\n",(0,s.jsx)(n.p,{children:"类似这种装饰器有很多。"}),"\n",(0,s.jsx)(n.p,{children:"和 @IsNotEmpty 相反的是 @IsOptional："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"加上之后就是可选的了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"上节学的 PartialType 就是用的 IsOptional 装饰器实现的。"}),"\n",(0,s.jsx)(n.p,{children:"@IsIn 可以限制属性只能是某些值："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@IsNotEmpty({message: 'aaa 不能为空'})\n@IsString({message: 'aaa 必须是字符串'})\n@IsEmail({}, {message: 'aaa 必须是邮箱'})\n@IsIn(['aaa@aa.com', 'bbb@bb.com'])\naaa: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"还有 @IsNotIn，可以限制属性不能是某些值："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@IsNotEmpty({message: 'aaa 不能为空'})\n@IsString({message: 'aaa 必须是字符串'})\n@IsEmail({}, {message: 'aaa 必须是邮箱'})\n@IsNotIn(['aaa@aa.com', 'bbb@bb.com'])\naaa: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"@IsBoolean、@IsInt、@IsNumber、@IsDate 这种就不说了。"}),"\n",(0,s.jsx)(n.p,{children:"@IsArray 可以限制属性是 array："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@IsArray()\nbbb:string;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"@ArrayContains 指定数组里必须包含的值："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@IsArray()\n@ArrayContains(['aaa'])\nbbb:string;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"类似的还有 @ArrayNotContains 就是必须不包含的值。"}),"\n",(0,s.jsx)(n.p,{children:"@ArrayMinSize 和 @ArrayMaxSize 限制数组的长度。"}),"\n",(0,s.jsx)(n.p,{children:"@ArrayUnique 限制数组元素必须唯一："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@IsArray()\n@ArrayNotContains(['aaa'])\n@ArrayMinSize(2)\n@ArrayMaxSize(5)\n@ArrayUnique()\nbbb:string;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"前面讲过 @IsNotEmpty，和它类似的还有 @IsDefined。"}),"\n",(0,s.jsx)(n.p,{children:"@IsNotEmpty 检查值是不是 ''、undefined、null。"}),"\n",(0,s.jsx)(n.p,{children:"@IsDefined 检查值是不是 undefined、null。"}),"\n",(0,s.jsx)(n.p,{children:"当你允许传空字符串的时候就可以用 @IsDefined。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@IsDefined()\nccc: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"如果是 @IsNotEmpty，那空字符串也是不行的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// @IsDefined()\n@IsNotEmpty()\nccc: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"数字可以做更精准的校验："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@IsPositive()\n@Min(1)\n@Max(10)\n@IsDivisibleBy(2)\nddd:number;\n"})}),"\n",(0,s.jsx)(n.p,{children:"@IsPositive 是必须是正数、@IsNegative 是必须是负数。"}),"\n",(0,s.jsx)(n.p,{children:"@Min、@Max 是限制范围。"}),"\n",(0,s.jsx)(n.p,{children:"@IsDivisibleBy 是必须被某个数整除。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"@IsDateString 是 ISO 标准的日期字符串："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@IsDateString()\neee: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:"也就是这种："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"还有几个字符串相关的："}),"\n",(0,s.jsx)(n.p,{children:"@IsAlpha 检查是否只有字母"}),"\n",(0,s.jsx)(n.p,{children:"@IsAlphanumeric 检查是否只有字母和数字"}),"\n",(0,s.jsx)(n.p,{children:"@Contains 是否包含某个值"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@IsAlphanumeric()\n@Contains('aaa')\nfff: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"字符串可以通过 @MinLength、@MaxLength、@Length 来限制长度："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@MinLength(2)\n@MaxLength(6)\nggg: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"也可以用 @Length："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Length(2, 6)\nggg: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:"还可以校验颜色值的格式：@IsHexColor、@IsHSL、@IsRgbColor"}),"\n",(0,s.jsx)(n.p,{children:"校验 IP 的格式：@IsIP"}),"\n",(0,s.jsx)(n.p,{children:"校验端口： @IsPort"}),"\n",(0,s.jsx)(n.p,{children:"校验 JSON 格式 @IsJSON"}),"\n",(0,s.jsxs)(n.p,{children:["常用的差不多就这些，更多的可以看 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/class-validator#validation-decorators",target:"_blank",rel:"noopener noreferrer",children:"class-validator 的文档"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"此外，如果某个属性是否校验要根据别的属性的值呢？"}),"\n",(0,s.jsx)(n.p,{children:"这样："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@IsBoolean()\nhhh: boolean;\n\n@ValidateIf(o => o.hhh === true)\n@IsNotEmpty()\n@IsHexColor()\niii: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:"如果 hhh 传了 true，那就需要对 iii 做校验，否则不需要。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"此外，如果这些内置的校验规则都不满足需求呢？"}),"\n",(0,s.jsx)(n.p,{children:"那就自己写！"}),"\n",(0,s.jsx)(n.p,{children:"创建 my-validator.ts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from "class-validator";\n\n@ValidatorConstraint()\nexport class MyValidator implements ValidatorConstraintInterface {\n    validate(text: string, validationArguments: ValidationArguments) {\n        console.log(text, validationArguments)\n        return true;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"用 @ValidatorConstraint 声明 class 为校验规则，然后实现 ValidatorConstraintInterface 接口。"}),"\n",(0,s.jsx)(n.p,{children:"用一下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Validate(MyValidator, [11, 22], {\n    message: 'jjj 校验失败',\n})\njjj: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:"访问下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"第一个参数传入的字段值，第二个参数包含更多信息，比如 @Validate 指定的参数在 constraints 数组里。"}),"\n",(0,s.jsx)(n.p,{children:"这样，我们只要用这些做下校验然后返回 true、false 就好了。"}),"\n",(0,s.jsx)(n.p,{children:"比如这样："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from "class-validator";\n\n@ValidatorConstraint()\nexport class MyValidator implements ValidatorConstraintInterface {\n    validate(text: string, validationArguments: ValidationArguments) {\n        // console.log(text, validationArguments)\n        return text.includes(validationArguments.constraints[0]);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"内容包含 11 的时候才会校验通过。"}),"\n",(0,s.jsx)(n.p,{children:"那如果这个校验是异步的呢？"}),"\n",(0,s.jsx)(n.p,{children:"返回 promise 就行："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface } from "class-validator";\n\n@ValidatorConstraint()\nexport class MyValidator implements ValidatorConstraintInterface {\n    async validate(text: string, validationArguments: ValidationArguments) {\n        // console.log(text, validationArguments)\n        return new Promise<boolean>((resolve) => {\n            setTimeout(() => {\n                resolve(text.includes(validationArguments.constraints[0]));\n            }, 3000);\n        })\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样用起来还是不如内置装饰器简单："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以用我们前面学的创建自定义装饰器的方式来包装一下："}),"\n",(0,s.jsx)(n.p,{children:"创建 my-contains.decorator.ts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { applyDecorators } from '@nestjs/common';\nimport { Validate, ValidationOptions } from 'class-validator';\nimport { MyValidator } from './my-validator';\n\nexport function MyContains(content: string, options?: ValidationOptions) {\n  return applyDecorators(\n     Validate(MyValidator, [content], options)\n  )\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"用 applyDecorators 组合装饰器生成新的装饰器。"}),"\n",(0,s.jsx)(n.p,{children:"然后用起来就可以这样："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@MyContains('111', {\n    message: 'jjj 必须包含 111'\n})\njjj: string;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们封装出了 @Contains，其实内置的那些装饰器我们都可以自己封装出来。"}),"\n",(0,s.jsxs)(n.p,{children:["案例代码在",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/class-validator-decorators",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们过了一遍 class-validator 的常用装饰器。"}),"\n",(0,s.jsx)(n.p,{children:"它们可以对各种类型的数据做精确的校验。"}),"\n",(0,s.jsx)(n.p,{children:"然后 @ValidateIf 可以根据别的字段来决定是否校验当前字段。"}),"\n",(0,s.jsx)(n.p,{children:"如果内置的装饰器不符合需求，完全可以自己实现，然后用 @Validate 来应用，用自定义装饰器 applyDecorators 包一层之后，和 class-validator 的内置装饰器就一模一样了。"}),"\n",(0,s.jsx)(n.p,{children:"所有的 class-validator 内置装饰器我们完全可以自己实现一遍。"})]})}function z(){let a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),a.components);return n?(0,s.jsx)(n,{...a,children:(0,s.jsx)(T,{...a})}):T(a)}let G=z;z.__RSPRESS_PAGE_META={},z.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F85.%20class-%20validator%20%E7%9A%84%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%8C%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A3%85%E9%A5%B0%E5%99%A8.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"85. class- validator 的内置装饰器，如何自定义装饰器",headingTitle:"85. class- validator 的内置装饰器，如何自定义装饰器",frontmatter:{}}}}]);