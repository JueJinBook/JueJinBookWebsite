"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["15868"],{922657:function(e,n,s){s.r(n),s.d(n,{default:()=>w});var r=s(552676),t=s(740453);let c=s.p+"static/image/ccceacda8945688855dd841e76705caa.491ff76f.webp",i=s.p+"static/image/eec1347d0f4f75207ca64e3f4a1a2970.1167deee.webp",a=s.p+"static/image/12a69971fe1949c03a4adc0cbbdb3817.49279b1b.webp",o=s.p+"static/image/a045778c551e899ee815bf3d2df2aa72.49c6b21c.webp",d=s.p+"static/image/a4ed068fdac0246219715bee354e2cd4.2d73946f.webp",h=s.p+"static/image/f5b6424a8584fe003ae1eda6cb74157b.28291810.webp",l=s.p+"static/image/0efe3d719255634643a2e7e332756b74.088c8217.webp",p=s.p+"static/image/d546b8420b30e37da797508e1696917a.30390bca.webp",j=s.p+"static/image/c14da48a17a1d75e8423f9917ef52873.92c90a6a.webp",x=s.p+"static/image/b5ee0b789c1d1177bfac86129126bb81.b7b8d9c2.webp",u=s.p+"static/image/e99fd10be02406029cc75147405a5c04.2ad19578.webp",g=s.p+"static/image/07c998bc373192871262dac88f7bbdbf.a3e8cc5c.webp",m=s.p+"static/image/92d01a7caf6f2a9ca01b81dc9cbcc08a.18c404eb.webp",b=s.p+"static/image/18f28c527a138653bc0bb73503bdc7f9.2ea7a242.webp",f=s.p+"static/image/e067440191e4dfc148ea4537d533a41c.74debd1c.webp";function E(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ul:"ul",li:"li",h2:"h2",h4:"h4",ol:"ol",pre:"pre",code:"code",img:"img",blockquote:"blockquote"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"20服务端实战用户服务开发上",children:["20.服务端实战：用户服务开发（上）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#20服务端实战用户服务开发上",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在进行了一系列服务端的基础训练之后，本章将迎来第一个服务端实战项目：用户系统。"}),"\n",(0,r.jsxs)(n.p,{children:["我们将完全按照之前的表结构来开发用户系统，为了方便各位操作，用户的三方登录将以 ",(0,r.jsx)(n.strong,{children:"Github"})," 授权来作为演示。"]}),"\n",(0,r.jsx)(n.p,{children:"本章 demo 工程："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["服务端：",(0,r.jsx)(n.a,{href:"https://github.com/Ignition-Space/Ignition",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/Ignition-Space/Ignition"})," main 分支"]})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["客户端：",(0,r.jsx)(n.a,{href:"https://github.com/Ignition-Space/Ignition-web",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/Ignition-Space/Ignition-web"})," next 分支"]})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"准备工作",children:["准备工作",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#准备工作",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"配置测试域名",children:["配置测试域名",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置测试域名",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["修改本地 ",(0,r.jsx)(n.strong,{children:"host"})," 文件的 ",(0,r.jsx)(n.strong,{children:"DNS"})," 解析"]})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"127.0.0.1 wwww.ig-space.com\n127.0.0.1 api.ig-space.com\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["其中 ",(0,r.jsx)(n.code,{children:"wwww.ig-space.com"})," 作为客户端的域名，",(0,r.jsx)(n.code,{children:"api.ig-space.com"})," 作为服务端的域名。"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["使用 ",(0,r.jsx)(n.strong,{children:"nginx"})," 配置对应服务的方向代理，然后启动或者重启 ",(0,r.jsx)(n.strong,{children:"nginx"})," 服务"]})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"server {\n    listen 80;\n    server_name www.ig-space.com;\n    location / {\n    proxy_pass   http://127.0.0.1:10010/;\n    }\n}\n\nserver {\n    listen 80;\n    server_name api.ig-space.com;\n    location / {\n    proxy_pass   http://127.0.0.1:4000/;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"如下能通过域名正常访问对应的前后端项目即可。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"由于后续的操作需要配置本地测试域名才能进行，当然你也可以直接申请一个公网环境的域名来做测试，但为了节约资源减少不必要的浪费，我依然建议你使用本地域名来测试。"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"配置-github-授权",children:["配置 Github 授权",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置-github-授权",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["整个 ",(0,r.jsx)(n.strong,{children:"Github"})," 的授权过程，可以全程参考下述截图步骤，中间步骤就不再一一描述，跟着做就行。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"1693737009589.jpg"})}),"\n",(0,r.jsxs)(n.p,{children:["最后获取到 ",(0,r.jsx)(n.strong,{children:"Client ID"})," & ",(0,r.jsx)(n.strong,{children:"Client secrets"}),"，注意这两个玩意请不要泄密，不然容易被人盗用。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"同时要注意 secrets 只有再生成的时候才能拿到，一定要保存好因为关闭页面之后是无法再次找回。"})}),"\n",(0,r.jsxs)(n.h2,{id:"用户授权登录",children:["用户授权登录",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户授权登录",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["由于我们的服务端有 ",(0,r.jsx)(n.strong,{children:"api"})," 前缀，所以需要修改一下回调接口，如果不想要 ",(0,r.jsx)(n.code,{children:"/api"})," 前缀，可以在 ",(0,r.jsx)(n.strong,{children:"nginx"})," 中代理。"]}),"\n",(0,r.jsxs)(n.p,{children:["然后我们来拼接一下 ",(0,r.jsx)(n.strong,{children:"Github"})," 的授权地址："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/login/oauth/authorize?client_id=07aac5b0e0a0dc5dfdcb&redirect_uri=http%3A%2F%2Fapi.ig-space.com%2Fapi%2Fauth",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/login/oauth/authorize?client_id=07aac5b0e0a0dc5dfdcb&redirect_uri=http%3A%2F%2Fapi.ig-space.com%2Fapi%2Fauth"})}),"\n",(0,r.jsxs)(n.p,{children:["正确在浏览器中输入以上地址会得到下图所示的 ",(0,r.jsx)(n.strong,{children:"Github"})," 授权界面，注意参数记得 ",(0,r.jsx)(n.code,{children:"URLEncode"}),"。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["真实服务中依然不建议你们将 ",(0,r.jsx)(n.code,{children:"client_id"})," 直接写在客户端，可以写个请求接口从后端获取，这里只是为了便于演示，所以我将测试的 ",(0,r.jsx)(n.code,{children:"client_id"})," 放出来，方便对照测试，所以请不要乱玩。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["点击首选之后，系统会重定向到 ",(0,r.jsx)(n.a,{href:"http://api.ig-space.com/auth?code=11c0d5fafb7a8774c07e",target:"_blank",rel:"noopener noreferrer",children:"http://api.ig-space.com/auth?code=11c0d5fafb7a8774c07e"})," ，并携带一个对应的授权 ",(0,r.jsx)(n.strong,{children:"code"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["当然我现在还没有写对应的 ",(0,r.jsx)(n.strong,{children:"auth"})," 授权流程肯定会报错了，如果你打算自己写的话，那么可以按照下述流程并参考工程项目来开发。"]}),"\n",(0,r.jsxs)(n.h4,{id:"github-授权",children:["Github 授权",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#github-授权",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["在 ",(0,r.jsx)(n.code,{children:"lib/commm/helper/github/auth.ts"})," 中添加新的换取用户凭证方法："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"\nimport { BASE_API_GITHUB_URL, BASE_GITHUB_URL, GITHUB_ID, GITHUB_SECRET } from './const';\n\nimport { methodV } from '../../utils/request';\n\n/**\n * @description: 获取用户 token\n */\nexport const getGithubToken = async ({ code }) => {\n  const { data } = await methodV({\n    baseUrl: BASE_GITHUB_URL,\n    url: `login/oauth/access_token`,\n    method: 'POST',\n    params: {\n      client_id: GITHUB_ID,\n      client_secret: GITHUB_SECRET,\n      code,\n    },\n  });\n  console.log('github===>', data)\n  return data;\n};\n\n/**\n * @description: 获取 Github 用户\n */\nexport const getGithubUser = async ({ token }) => {\n  const { data } = await methodV({\n    baseUrl: BASE_API_GITHUB_URL,\n    url: `user`,\n    method: 'GET',\n    headers: {\n      Authorization: `token ${token}`,\n    },\n  });\n  console.log(data)\n  return data;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["其中 ",(0,r.jsx)(n.code,{children:"GITHUB_ID"})," & ",(0,r.jsx)(n.code,{children:"GITHUB_SECRET"})," 需要再 ",(0,r.jsx)(n.code,{children:".config/.dev.yaml"})," 里面配置:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"GITGUB_CONFIG:\n  CLIENT_ID: 07aac5b0e0a0dc5dfdcb // 这是的作者 CLIENT_ID，请不要随便乱玩，要玩玩自己的\n  CLIENT_SECRETS: 请不要写错，使用上文生成的 SECRETS\n"})}),"\n",(0,r.jsxs)(n.p,{children:["统一的配置文件，我比较喜欢用 ",(0,r.jsx)(n.code,{children:"lib/commm/helper/github/const.ts"})," 来承接："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { getConfig } from "../../utils";\n\nconst { GITGUB_CONFIG } = getConfig()\n\nexport const GITHUB_ID = GITGUB_CONFIG.CLIENT_ID\nexport const GITHUB_SECRET = GITGUB_CONFIG.CLIENT_SECRETS\nexport const BASE_GITHUB_URL = "https://github.com/"\nexport const BASE_API_GITHUB_URL = "https://api.github.com/"\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["在 ",(0,r.jsx)(n.code,{children:"src/user/oauth.service.ts"})," 中添加新的换取用户凭证的 ",(0,r.jsx)(n.code,{children:"Service"}),"："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Injectable, } from '@nestjs/common';\nimport { BusinessException, getGithubUser, } from '@app/common';\nimport { getGithubToken } from '@app/common';\nimport * as querystring from 'querystring'\n\n@Injectable()\nexport class OAuthService {\n\n  async getUserToken(code: string) {\n    const res: any = await getGithubToken({ code });\n    const params = querystring.parse(res)\n    console.log('params===>?', params.access_token)\n    return this.getOathUser(params.access_token as string);\n  }\n\n  async getOathUser(token: string) {\n    return getGithubUser({ token })\n  }\n}\n\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["在 ",(0,r.jsx)(n.code,{children:"src/auth/auth.controller.ts"})," 中添加换取 ",(0,r.jsx)(n.strong,{children:"Github"})," 用户信息的 ",(0,r.jsx)(n.code,{children:"Controller"}),"："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  @ApiOperation({\n    summary: 'OAUTH 授权',\n  })\n  @Public()\n  @Get('/')\n  async OAuth(@Query(\"code\") code) {\n    console.log('code===>', code)\n    return this.authService.validateFeishuUser(code);\n  }\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:["添加 ",(0,r.jsx)(n.code,{children:"src/auth/auth.service.ts"})," 获取 ",(0,r.jsx)(n.strong,{children:"Github"})," 的信息，并在数据库中落库："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Injectable } from '@nestjs/common';\n\nimport { JwtService } from '@nestjs/jwt';\nimport { GithubUserInfo } from '../userCenter/user/user.dto';\nimport { User } from '../userCenter/user/user.mysql.entity';\nimport { UserService } from '../userCenter/user/user.service';\nimport { OAuthService } from '../userCenter/user/oauth.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private jwtService: JwtService,\n    private userService: UserService,\n    private oAuthService: OAuthService,\n  ) { }\n\n  async validateFeishuUser(code: string): Promise<Payload> {\n\n    const userInfo: GithubUserInfo = await this.getOAuthTokenByApplications(code);\n\n    // 同步信息\n    const user: User = await this.userService.createOrUpdateByOAoth(\n      userInfo,\n    );\n\n    return {\n      userId: user.id,\n      username: user.username,\n      name: user.name,\n      email: user.email,\n    };\n  }\n\n  async getOAuthTokenByApplications(code: string) {\n\n    const oauth = await this.oAuthService.getUserToken(code);\n    return oauth;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"此时在重新点击之前的授权链接可以得到正确的返回信息："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"并且用户数据已经正确落库："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["此时我们已经拿到了 ",(0,r.jsx)(n.strong,{children:"Github"})," 的 ",(0,r.jsx)(n.code,{children:"access_token"}),"，可以使用 ",(0,r.jsx)(n.code,{children:"access_token"})," 调用 ",(0,r.jsx)(n.strong,{children:"Github"})," 的 ",(0,r.jsx)(n.strong,{children:"open api"}),"，如果有需求的可以自行保存一下，但对于我们的项目来说仅仅只是为了减少鉴权这一步所以存下来的价值不大。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"jwt",children:["jwt",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jwt",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"token"})," 的方案有很多种，我们选择较为通用的 ",(0,r.jsx)(n.strong,{children:"jwt"})," 来做为项目的 ",(0,r.jsx)(n.strong,{children:"token"})," 方案。"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"安装对应的依赖"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npm install @nestjs/passport passport\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["新建 ",(0,r.jsx)(n.code,{children:"/src/auth/strategies"})," 目录，添加 ",(0,r.jsx)(n.code,{children:"oauth.strategy.ts"})," 与 ",(0,r.jsx)(n.code,{children:"jwt-auth.strategy.ts"})," 两个文件"]}),"："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// oauth.strategy.ts\n\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, Query, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { Strategy } from 'passport-custom';\n\n@Injectable()\nexport class OAuthStrategy extends PassportStrategy(Strategy, 'oauth') {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(req): Promise<Payload> {\n    const q: any = req.query;\n\n    const user = await this.authService.validateFeishuUser(q.code as string);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// jwt-auth.strategy.ts\nimport { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-jwt';\nimport { jwtConstants } from '../constants';\n\nconst cookieExtractor = function (req) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['jwt'];\n  }\n  return token;\n};\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: cookieExtractor,\n      ignoreExpiration: jwtConstants.ignoreExpiration,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: Payload): Promise<Payload> {\n    return { ...payload };\n  }\n}\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"OAuthStrategy"})," 根据 ",(0,r.jsx)(n.code,{children:"passport"})," 提供的方法，调用 ",(0,r.jsx)(n.code,{children:"authService"})," 中的 ",(0,r.jsx)(n.code,{children:"validateFeishuUser"})," 方法，从 Github 获取对应的用户信息。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"JwtStrategy"})," 则是使用 ",(0,r.jsx)(n.code,{children:"passport-jwt"}),"拓展的功能，对 ",(0,r.jsx)(n.code,{children:"cookie"})," 做了拦截、解密等功能。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["注意无论是使用 ",(0,r.jsx)(n.code,{children:"passport"})," 自带的三方功能或者自行拓展 ",(0,r.jsx)(n.code,{children:"passport"}),"，都需要对 ",(0,r.jsx)(n.code,{children:"validate"})," 方法进行重写以便实现自己的业务逻辑。"]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["新建 ",(0,r.jsx)(n.code,{children:"/src/auth/guards"})," 目录，添加 ",(0,r.jsx)(n.code,{children:"oauth.guard.ts"})," 与 ",(0,r.jsx)(n.code,{children:"jwt-auth.guard.ts"})," 两个文件"]}),"："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// oauth.guard.ts\nimport { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class OAuthGuard extends AuthGuard('oauth') { }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这里要",(0,r.jsx)(n.strong,{children:"注意"}),"，因为 ",(0,r.jsx)(n.code,{children:"OAuthGuard"})," 已经继承了通用的 ",(0,r.jsx)(n.code,{children:"AuthGuard"}),"，验证逻辑在 ",(0,r.jsx)(n.code,{children:"OAuthStrategy"})," 实现了，所以并没有额外的代码出现，如果有其他的逻辑则需要对不同的方法进行重写已完成需求。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// jwt-auth.guard.ts\nimport { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { BUSINESS_ERROR_CODE, BusinessException } from '@app/common';\nimport { IS_PUBLIC_KEY } from '../constants';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const loginAuth = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (loginAuth) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    if (err || !user) {\n      throw (\n        err ||\n        new BusinessException({\n          code: BUSINESS_ERROR_CODE.TOKEN_INVALID,\n          message: 'token 已失效',\n        })\n      );\n    }\n    return user;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"JwtAuthGuard"})," 模块实现了 ",(0,r.jsx)(n.code,{children:"canActivate"})," 与 ",(0,r.jsx)(n.code,{children:"handleRequest"})," 的重写，分别是针对于自定义逻辑与异常捕获的处理。"]}),"\n",(0,r.jsxs)(n.p,{children:["因为我们使用了 ",(0,r.jsx)(n.code,{children:"JwtAuthGuard"})," 作为全局验证，但有的时候也是需要针对于部分接口开启白名单。例如，登录接口就需要开启白名单，毕竟把登录接口也拦截了，整个项目就无法正常使用了。"]}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:["重写之前 ",(0,r.jsx)(n.strong,{children:"OAUTH"})," 授权方法："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"  @ApiOperation({\n    summary: 'OAUTH 授权',\n  })\n  @Public()\n  @UseGuards(OAuthGuard)\n  @Get('/')\n  async OAuth(@PayloadUser() user: Payload, @Res({ passthrough: true }) response) {\n    const { access_token } = await this.authService.login(user);\n\n    response.cookie('jwt', access_token, {\n      path: '/',\n      httpOnly: true,\n      domain: '.ig-space.com'\n    });\n    \n    return access_token\n  }\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AuthService"})," 添加 ",(0,r.jsx)(n.code,{children:"jwt"})," 注册用户的方法"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"  async login(user: Payload) {\n    return {\n      access_token: this.jwtService.sign(user),\n    };\n  }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后在重新请求之前的授权路径，可以发现我们可以将 ",(0,r.jsx)(n.strong,{children:"jwt"})," 生成的 ",(0,r.jsx)(n.code,{children:"cookie"})," 种在了 .ig-space.com 二级域名下，这样在 ",(0,r.jsx)(n.a,{href:"http://www.ig-space.com",target:"_blank",rel:"noopener noreferrer",children:"www.ig-space.com"})," 也可以从 ",(0,r.jsx)(n.code,{children:"cookie"})," 拿到对应的 ",(0,r.jsx)(n.code,{children:"token"})," 实现了登录流程，最后只需要添加重定向的功能即可完成登录闭环。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["可以在 ",(0,r.jsx)(n.a,{href:"http://api.ig-space.com/doc#/%E7%94%A8%E6%88%B7/UserController_profile",target:"_blank",rel:"noopener noreferrer",children:"http://api.ig-space.com/doc#/%E7%94%A8%E6%88%B7/UserController_profile"})," 直接使用获取用户接口来测试鉴权功能是否连通。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"写在最后",children:["写在最后",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["本章是正式进入服务端开发的第一个章节，难度较之前可能有比较大幅度的提升，如果有服务端的基础或者之前买过 ",(0,r.jsx)(n.strong,{children:"NestJS"})," 小册的同学来说还是比较简单的（并非推广 ",(0,r.jsx)(n.strong,{children:"NestJS"})," 小册，自学能力强的同学不建议买 ",(0,r.jsx)(n.strong,{children:"NetsJS"})," 的教程，因为本身的文档就非常详细，小册主要的价值其实是架构设计啥的。）"]}),"\n",(0,r.jsxs)(n.p,{children:["由于整个鉴权的内容非常多，",(0,r.jsx)(n.strong,{children:"所以小册章节中只有主要的步骤以及关键的代码实现"}),"，更多的内容可以留言让我补充或者参考服务端的项目来学习。"]}),"\n",(0,r.jsxs)(n.p,{children:["本章主要介绍用户授权、登录等内容，下一章则主要讲述用户系统中 ",(0,r.jsx)(n.strong,{children:"RBAC"})," 权限的相关代码实现。"]}),"\n",(0,r.jsx)(n.p,{children:"如果你有什么疑问，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function _(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(E,{...e})}):E(e)}let w=_;_.__RSPRESS_PAGE_META={},_.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F20.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%8A%EF%BC%89.md"]={toc:[{text:"准备工作",id:"准备工作",depth:2},{text:"配置测试域名",id:"配置测试域名",depth:4},{text:"配置 Github 授权",id:"配置-github-授权",depth:4},{text:"用户授权登录",id:"用户授权登录",depth:2},{text:"Github 授权",id:"github-授权",depth:4},{text:"jwt",id:"jwt",depth:4},{text:"写在最后",id:"写在最后",depth:2}],title:"20.服务端实战：用户服务开发（上）",headingTitle:"20.服务端实战：用户服务开发（上）",frontmatter:{}}}}]);