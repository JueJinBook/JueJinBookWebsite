"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["17926"],{478621:function(e,d,c){c.r(d),c.d(d,{default:()=>u});var n=c(552676),r=c(740453);let s=c.p+"static/image/7974874fe6f54566a6f42b29051d3801~tplv-k3u1fbpfcp-zoom-1.image.0c1b0961.png",i=c.p+"static/image/ccc3554f1f1245c5bdaa8d3647411b90~tplv-k3u1fbpfcp-zoom-1.image.85778f11.png",l=c.p+"static/image/fd3b69f006824035ac674303fe2c0feb~tplv-k3u1fbpfcp-zoom-1.image.0c1b0961.png",h=c.p+"static/image/bed380e8dcb38a76aa46f356fb378501.638690c5.png",a=c.p+"static/image/46c25899056444d49b04eec7818a252d~tplv-k3u1fbpfcp-zoom-1.image.2962e7c0.png",j=c.p+"static/image/397d2d72192747ebacca4a1fa201e626~tplv-k3u1fbpfcp-zoom-1.image.e0596fe9.png",x=c.p+"static/image/4bdec6d68aa84d8c808fe99c4c18198e~tplv-k3u1fbpfcp-zoom-1.image.0c1b0961.png";function p(e){let d=Object.assign({h1:"h1",a:"a",h2:"h2",blockquote:"blockquote",p:"p",code:"code",strong:"strong",pre:"pre",ol:"ol",li:"li",img:"img",h3:"h3",hr:"hr",ul:"ul"},(0,r.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(d.h1,{id:"12-你不知道的-reduce函数式语言的万金油",children:["12 你不知道的 Reduce：函数式语言的“万金油”",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#12-你不知道的-reduce函数式语言的万金油",children:"#"})]}),"\n",(0,n.jsxs)(d.h2,{id:"前言",children:["前言",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,n.jsxs)(d.blockquote,{children:["\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)(d.code,{children:"reduce()"}),(0,n.jsx)(d.strong,{children:"是函数式语言的万金油；函数式语言不能失去"})," ",(0,n.jsx)(d.code,{children:"reduce()"}),(0,n.jsx)(d.strong,{children:"，就像西方不能失去耶路撒冷。"}),"             ——修\xb7格拉底\xb7鲁迅\xb7言思妥耶夫斯基"]}),"\n"]}),"\n",(0,n.jsx)(d.p,{children:"有一类高阶函数，我们几乎天天都在用，但却不曾真正了解过它们。"}),"\n",(0,n.jsxs)(d.p,{children:["没错，我说的就是数组方法，包括但不限于 ",(0,n.jsx)(d.code,{children:"map()"}),"、",(0,n.jsx)(d.code,{children:"reduce()"}),"、",(0,n.jsx)(d.code,{children:"filter()"})," 等等等等....."]}),"\n",(0,n.jsxs)(d.p,{children:["其中，最特别的一个是 ",(0,n.jsx)(d.code,{children:"reduce()"}),"。"]}),"\n",(0,n.jsxs)(d.p,{children:["几乎任何在范式上支持了函数式编程的语言，都原生支持了 ",(0,n.jsx)(d.code,{children:"reduce()"}),"。"]}),"\n",(0,n.jsx)(d.p,{children:"这些语言包括但不限于Python、Scala、Clojure、Perl......（Haskell 语言其实也是支持 reduce 的，只是 Haskell 里的 reduce 改名叫 fold 了）。"}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)(d.strong,{children:"在 JS 中，基于 reduce()，我们不仅能够推导出其它数组方法，更能够推导出经典的函数组合过程。"})}),"\n",(0,n.jsxs)(d.h2,{id:"前置知识reduce-工作流分析",children:["前置知识：Reduce 工作流分析",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#前置知识reduce-工作流分析",children:"#"})]}),"\n",(0,n.jsx)(d.p,{children:"接下来我们先通过一个小\uD83C\uDF30快速分析一波 reduce 的工作流特征。"}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-js",children:"const arr = [1, 2, 3]\n\n// 0 + 1 + 2 + 3 \nconst initialValue = 0  \nconst add = (previousValue, currentValue) => previousValue + currentValue\nconst sumArr = arr.reduce(\n  add,\n  initialValue\n)\n\nconsole.log(sumArr)\n// expected output: 6\n"})}),"\n",(0,n.jsxs)(d.p,{children:["众所周知，",(0,n.jsx)(d.code,{children:"reduce()"}),"是一个高阶函数，它的第一个入参是回调函数，第二个入参是初始值。"]}),"\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)(d.code,{children:"Array.prototype.reduce()"}),"调用发生后，它会逐步将数组中的每个元素作为回调函数的入参传入，并且将每一步的计算结果汇总到最终的单个返回值里去。"]}),"\n",(0,n.jsx)(d.p,{children:"以楼上的 case 为例，它的工作流是这样的："}),"\n",(0,n.jsxs)(d.ol,{children:["\n",(0,n.jsxs)(d.li,{children:["\n",(0,n.jsxs)(d.p,{children:["执行回调函数 ",(0,n.jsx)(d.code,{children:"add()"}),"，入参为",(0,n.jsx)(d.code,{children:"(initialValue, arr[0])"}),"。这一步的计算结果为记为 ",(0,n.jsx)(d.code,{children:"sum0"}),"，",(0,n.jsx)(d.code,{children:"sum0=intialValue + arr[0]"}),"，此时剩余待遍历的数组内容为",(0,n.jsx)(d.code,{children:"[2, 3]"}),"，待遍历元素2个。"]}),"\n"]}),"\n",(0,n.jsxs)(d.li,{children:["\n",(0,n.jsxs)(d.p,{children:["执行回调函数 ",(0,n.jsx)(d.code,{children:"add()"}),"，入参为 ",(0,n.jsx)(d.code,{children:"(sum0, arr[1])"}),"。这一步的计算结果记为 ",(0,n.jsx)(d.code,{children:"sum1"}),"，",(0,n.jsx)(d.code,{children:"sum1 = sum0 + arr[1]"}),"，此时剩余待遍历的数组内容为 ",(0,n.jsx)(d.code,{children:"[3]"})," ，待遍历元素1个。"]}),"\n"]}),"\n",(0,n.jsxs)(d.li,{children:["\n",(0,n.jsxs)(d.p,{children:["执行回调函数 ",(0,n.jsx)(d.code,{children:"add()"}),"，入参为",(0,n.jsx)(d.code,{children:"  (sum1, arr[2])"}),"，这一步的计算结果记为 ",(0,n.jsx)(d.code,{children:"sum2"}),"，",(0,n.jsx)(d.code,{children:"sum2 = sum1 + arr[2]"}),"，此时数组中剩余待遍历的元素是 ",(0,n.jsx)(d.code,{children:"[]"}),"，遍历结束。"]}),"\n"]}),"\n",(0,n.jsxs)(d.li,{children:["\n",(0,n.jsxs)(d.p,{children:["输出 ",(0,n.jsx)(d.code,{children:"sum2"})," 作为 ",(0,n.jsx)(d.code,{children:"reduce()"})," 的执行结果， sum2 是一个单一的值。"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(d.p,{children:["这个过程本质上是一个循环调用",(0,n.jsx)(d.code,{children:"add()"}),"函数的过程，上一次 ",(0,n.jsx)(d.code,{children:"add()"}),"函数调用的输出，会成为下一次 ",(0,n.jsx)(d.code,{children:"add()"}),"函数调用的输入（如下图所示）。"]}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)("img",{src:x,alt:""})}),"\n",(0,n.jsxs)(d.p,{children:["这个调用链看上去好像有点东西，但暂时又看不出太多。为了能够挖掘出更多东西，咱们先去看看 ",(0,n.jsx)(d.code,{children:"map()"}),"。"]}),"\n",(0,n.jsxs)(d.h2,{id:"小试牛刀用-reduce-推导-map",children:["小试牛刀：用 ",(0,n.jsx)(d.code,{children:"reduce()"})," 推导 ",(0,n.jsx)(d.code,{children:"map()"}),(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#小试牛刀用-reduce-推导-map",children:"#"})]}),"\n",(0,n.jsxs)(d.h3,{id:"map-工作流分析",children:["Map 工作流分析",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#map-工作流分析",children:"#"})]}),"\n",(0,n.jsxs)(d.p,{children:["没错，用 ",(0,n.jsx)(d.code,{children:"reduce()"}),"是可以推导 ",(0,n.jsx)(d.code,{children:"map()"}),"的。至于怎么推，我们先分析了 ",(0,n.jsx)(d.code,{children:"map()"})," 的工作流再说。"]}),"\n",(0,n.jsxs)(d.p,{children:["众所周知， ",(0,n.jsx)(d.code,{children:"map()"})," 长这样，它看上去和 ",(0,n.jsx)(d.code,{children:"reduce()"}),"没有一毛钱关系："]}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-js",children:"const arr = [1,2,3]  \n\nconst add1 = (num)=> num+1\n// newArr: [2, 3, 4]\nconst newArr = arr.map(add1)    \n"})}),"\n",(0,n.jsxs)(d.p,{children:["对比 ",(0,n.jsx)(d.code,{children:"newArr"})," 和 ",(0,n.jsx)(d.code,{children:"arr"}),"，我们可以看到它们之间的不等关系："]}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)("img",{src:j,alt:""})}),"\n",(0,n.jsxs)(d.p,{children:["这说明 ",(0,n.jsx)(d.code,{children:"newArr"})," 是一个新创建出来的数组——",(0,n.jsx)(d.code,{children:"map()"})," 方法不会改变原有的 ",(0,n.jsx)(d.code,{children:"arr"})," 数组，而是会把结果放在一个新创建出来的数组里返回，这符合我们对不可变数据的预期。"]}),"\n",(0,n.jsx)(d.p,{children:"（不可变数据是函数式编程里最基本的原则之一，我们前面强调过太多次了，这里不再反复吹它。）"}),"\n",(0,n.jsx)(d.p,{children:"我们重点要看的是 map 函数都做了啥："}),"\n",(0,n.jsxs)(d.blockquote,{children:["\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)(d.strong,{children:"map()"})," 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。\n—— MDN"]}),"\n"]}),"\n",(0,n.jsxs)(d.p,{children:["就这个例子来说，",(0,n.jsx)(d.code,{children:"map()"})," 遍历了 ",(0,n.jsx)(d.code,{children:"arr"})," 数组中的每一个元素，给每一个元素执行一遍 ",(0,n.jsx)(d.code,{children:"add1()"})," 这个 callback 后，把执行结果放在一个新的数组里返回。"]}),"\n",(0,n.jsx)(d.p,{children:"我把这个过程用代码表达出来，看上去会更清晰："}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-js",children:"const map = (arr, callback) => {\n  const len = arr.length  \n  // 创建一个新数组用来承接计算结果\n  const newArr = []\n  // 遍历原有数组中的每一个元素\n  for(let i=0; i<len; i++) {  \n    // 逐个对每个元素做 callback 计算，\n    newArr.push(callback(arr[i]))\n  }\n  return newArr\n}\n"})}),"\n",(0,n.jsxs)(d.p,{children:["大家可以试着在控制台用这个手工 map 跑一遍楼上的 ",(0,n.jsx)(d.code,{children:"add1()"})," 回调："]}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{children:"map([1,2,3], (num)=> num+1)\n"})}),"\n",(0,n.jsxs)(d.p,{children:["输出结果为",(0,n.jsx)(d.code,{children:"[2, 3, 4]"}),"，这和原生 ",(0,n.jsx)(d.code,{children:"map()"}),"是一毛一样的。"]}),"\n",(0,n.jsxs)(d.p,{children:["PS：这里倒不需要大家去细抠 ",(0,n.jsx)(d.code,{children:" Array.prototype.map()  "}),"的源码，因为："]}),"\n",(0,n.jsxs)(d.ol,{children:["\n",(0,n.jsxs)(d.li,{children:["\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)(d.code,{children:"Array.prototype.map()"})," 的源码实现跟楼上的人工 ",(0,n.jsx)(d.code,{children:"map()"}),"不一样，我抠过了"]}),"\n"]}),"\n",(0,n.jsxs)(d.li,{children:["\n",(0,n.jsxs)(d.p,{children:["我们的目的是理解 ",(0,n.jsx)(d.code,{children:"map()"})," 做了哪些事情，理解它的工作流，而不是了解它每一行的代码实现细节"]}),"\n"]}),"\n",(0,n.jsxs)(d.li,{children:["\n",(0,n.jsxs)(d.p,{children:["对",(0,n.jsx)(d.code,{children:"map()"})," 工作流的分析仅仅是我们进一步认识 ",(0,n.jsx)(d.code,{children:"reduce()"}),"的一个小道具，接下来我们需要迅速带着对 ",(0,n.jsx)(d.code,{children:" map()  "}),"的理解去看 ",(0,n.jsx)(d.code,{children:"reduce()"})]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(d.h3,{id:"map-其实是-mapreduce",children:["Map 其实是 MapReduce",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#map-其实是-mapreduce",children:"#"})]}),"\n",(0,n.jsxs)(d.p,{children:["在 ",(0,n.jsx)(d.code,{children:"add1()"})," 这个 case 里，整个",(0,n.jsx)(d.code,{children:"map()"})," 的计算过程共有以下要素参加："]}),"\n",(0,n.jsxs)(d.ol,{children:["\n",(0,n.jsxs)(d.li,{children:[(0,n.jsx)(d.code,{children:"arr"})," 数组里的所有数字。"]}),"\n",(0,n.jsxs)(d.li,{children:[(0,n.jsx)(d.code,{children:"newArr"}),"，它最初是一个空数组 ",(0,n.jsx)(d.code,{children:"[]"}),"，在循环体中被反复 ",(0,n.jsx)(d.code,{children:"push()"}),"。"]}),"\n"]}),"\n",(0,n.jsx)(d.p,{children:"我们把每次循环列出来看："}),"\n",(0,n.jsxs)(d.ol,{children:["\n",(0,n.jsxs)(d.li,{children:["初始化状态，",(0,n.jsx)(d.code,{children:"newArr = []"}),"，剩余待遍历的数组内容为",(0,n.jsx)(d.code,{children:"  [1,2,3] "}),"，待遍历元素3个。"]}),"\n",(0,n.jsxs)(d.li,{children:["计算 ",(0,n.jsx)(d.code,{children:"callback(arr[0])"}),"，把计算结果推入 ",(0,n.jsx)(d.code,{children:"newArr"}),"。此时 ",(0,n.jsx)(d.code,{children:"newArr = [2]"}),"，剩余待遍历的数组内容为",(0,n.jsx)(d.code,{children:"  [2, 3] "}),"，待遍历元素2个。"]}),"\n",(0,n.jsxs)(d.li,{children:["计算 ",(0,n.jsx)(d.code,{children:"callback(arr[1])"}),"，把计算结果推入 ",(0,n.jsx)(d.code,{children:"newArr"}),"。此时 ",(0,n.jsx)(d.code,{children:"newArr= [2, 3]"}),"，剩余待遍历的数组内容为 [3] ，待遍历元素1个。"]}),"\n",(0,n.jsxs)(d.li,{children:["计算 ",(0,n.jsx)(d.code,{children:"callback[arr[2]]"}),"，把计算结果推入 ",(0,n.jsx)(d.code,{children:"newArr"}),"，此时 ",(0,n.jsx)(d.code,{children:"newArr= [2, 3, 4]"}),"，剩余待遍历的数组内容为 ",(0,n.jsx)(d.code,{children:"[]"}),"，待遍历元素0个。"]}),"\n",(0,n.jsxs)(d.li,{children:["输出 ",(0,n.jsx)(d.code,{children:"newArr"})," 作为 ",(0,n.jsx)(d.code,{children:"map()"})," 的执行结果， ",(0,n.jsx)(d.code,{children:"newArr"})," 是一个单一的值（一个单一的数组）。"]}),"\n"]}),"\n",(0,n.jsxs)(d.p,{children:["大家细品一下这个过程，你是不是开始隐约觉得它和楼上的 ",(0,n.jsx)(d.code,{children:"reduce()"}),"好像有点神似——它们都吃进【多个】入参、吐出【一个】出参。"]}),"\n",(0,n.jsx)(d.p,{children:"（注意这个入参和出参之间的数量关系，这个很重要，在下文会有更进一步的分析）。"}),"\n",(0,n.jsxs)(d.p,{children:["不同点仅仅在于出参的类型：reduce 编码示例中的出参是一个数字 ",(0,n.jsx)(d.code,{children:"6"}),"，而 map 编码示例中的出参是一个数组",(0,n.jsx)(d.code,{children:"[2, 3, 4]"}),"。"]}),"\n",(0,n.jsx)(d.p,{children:"但出参类型的不同，其实是由 callback 的不同导致的，而不是由流程上的差异导致的。"}),"\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)(d.strong,{children:"有没有可能，我微调一下"})," ",(0,n.jsx)(d.code,{children:"reduce()"}),(0,n.jsx)(d.strong,{children:"的 callback，它的输出就和"})," ",(0,n.jsx)(d.code,{children:"map()"}),(0,n.jsx)(d.strong,{children:"一致了呢？"})]}),"\n",(0,n.jsxs)(d.h3,{id:"用-reduce-推导-map",children:["用 ",(0,n.jsx)(d.code,{children:"reduce()"})," 推导 ",(0,n.jsx)(d.code,{children:"map()"}),(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#用-reduce-推导-map",children:"#"})]}),"\n",(0,n.jsxs)(d.p,{children:["具体来说，我们可以把 ",(0,n.jsx)(d.code,{children:"map()"})," 编码示例中的 ",(0,n.jsx)(d.code,{children:"add1()"}),"回调逻辑和 ",(0,n.jsx)(d.code,{children:"newArr.push()"})," 这个动作看做是同一坨逻辑，给它起名叫 ",(0,n.jsx)(d.code,{children:"add1AndPush()"}),"。"]}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-js",children:"function add1AndPush(previousValue, currentValue) {\n  // previousValue 是一个数组\n  previousValue.push(currentValue + 1)\n  return previousValue\n}\n"})}),"\n",(0,n.jsxs)(d.p,{children:["然后我用 ",(0,n.jsx)(d.code,{children:"reduce()"})," 去调用这个 ",(0,n.jsx)(d.code,{children:"add1AndPush()"}),"："]}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-js",children:"const arr = [1,2,3]\nconst newArray = arr.reduce(add1AndPush, [])\n"})}),"\n",(0,n.jsxs)(d.p,{children:["你会发现，这段代码的工作内容和楼上我们刚分析过的 ",(0,n.jsx)(d.code,{children:"map()"})," 是等价的。"]}),"\n",(0,n.jsxs)(d.p,{children:["把这段代码丢到控制台里运行一下，它的输出结果和楼上的 ",(0,n.jsx)(d.code,{children:"map()"})," 也是等价的："]}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)("img",{src:a,alt:""})}),"\n",(0,n.jsxs)(d.p,{children:["看来我只要微调一下 ",(0,n.jsx)(d.code,{children:"reduce()"})," 的 callback，它就能干",(0,n.jsx)(d.code,{children:"  map() "})," 的活了！"]}),"\n",(0,n.jsxs)(d.p,{children:["大家可以试着在脑海中绘制一下，",(0,n.jsx)(d.code,{children:" reduce(add1AndPush, []) "}),"这个过程对应的函数调用链，它长这样："]}),"\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)("img",{src:h,alt:""}),"如图，我们的)`工作流啊！"]}),"\n",(0,n.jsxs)(d.h3,{id:"map-和-reduce-之间的逻辑关系",children:["Map 和 Reduce 之间的逻辑关系",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#map-和-reduce-之间的逻辑关系",children:"#"})]}),"\n",(0,n.jsxs)(d.p,{children:["破案了，",(0,n.jsx)(d.code,{children:"map()"})," 的过程本质上也是一个 ",(0,n.jsx)(d.code,{children:"reduce()"}),"的过程！"]}),"\n",(0,n.jsxs)(d.p,{children:["区别仅仅在于， ",(0,n.jsx)(d.code,{children:"reduce()"})," 本体的回调函数入参可以是任何值，出参也可以是任何值；而 map 则是一个相对特殊的 ",(0,n.jsx)(d.code,{children:" reduce()  "}),",它锁定了一个数组作为每次回调的第一个入参，并且限定了 ",(0,n.jsx)(d.code,{children:"reduce()"})," 的返回结果只能是数组。"]}),"\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)(d.code,{children:"map()"})," 和",(0,n.jsx)(d.code,{children:"reduce()"}),"，这两个工具函数的应用非常广泛，不仅仅在 JS 中有内置的实现，在许多函数式编程语言中，你都可以看到它们的身影。"]}),"\n",(0,n.jsxs)(d.p,{children:["在这些语言底层的源码中， 是否真的是直接借助 ",(0,n.jsx)(d.code,{children:"reduce()"})," 调用来实现 ",(0,n.jsx)(d.code,{children:"map()"}),"，这个不好说，咱也不必太关注。"]}),"\n",(0,n.jsxs)(d.p,{children:["我们真正需要关注的，",(0,n.jsx)(d.strong,{children:"是"})," ",(0,n.jsx)(d.code,{children:" map()"}),(0,n.jsx)(d.strong,{children:"和"})," ",(0,n.jsx)(d.code,{children:" reduce()"}),(0,n.jsx)(d.strong,{children:"之间的逻辑关系"}),"。"]}),"\n",(0,n.jsxs)(d.p,{children:["通过楼上一系列的工作流拆解+逻辑分析，我们至少可以确定，",(0,n.jsx)(d.code,{children:"map()"})," 过程可以看作是 ",(0,n.jsx)(d.code,{children:"reduce()"})," 过程的一种特殊的应用。"]}),"\n",(0,n.jsxs)(d.p,{children:["也就是说，在数组方法里，",(0,n.jsx)(d.code,{children:"reduce()"})," 处在逻辑链相对底层的位置，这一点毋庸置疑。"]}),"\n",(0,n.jsxs)(d.p,{children:["理解到这一层，大家也就能初步认识到 ",(0,n.jsx)(d.code,{children:"reduce()"})," 函数的重要性了。"]}),"\n",(0,n.jsxs)(d.p,{children:["“初步认识”绝对是不够的，",(0,n.jsx)(d.code,{children:"reduce()"})," 方法真正的威力，远远不止于此。"]}),"\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)(d.code,{children:" reduce()"}),(0,n.jsx)(d.strong,{children:"真正的威力，在于它对函数组合思想的映射。"})]}),"\n",(0,n.jsx)(d.hr,{}),"\n",(0,n.jsxs)(d.h2,{id:"更进一步-reduce-映射了函数组合思想",children:["更进一步： ",(0,n.jsx)(d.code,{children:"reduce()"})," 映射了函数组合思想",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#更进一步-reduce-映射了函数组合思想",children:"#"})]}),"\n",(0,n.jsxs)(d.p,{children:["现在请大家重新审视一下 ",(0,n.jsx)(d.code,{children:"reduce()"})," 的工作流："]}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)("img",{src:l,alt:""})}),"\n",(0,n.jsx)(d.p,{children:"通过观察这个工作流，我们可以发现这样两个特征："}),"\n",(0,n.jsxs)(d.ul,{children:["\n",(0,n.jsxs)(d.li,{children:[(0,n.jsx)(d.code,{children:"reduce()"})," 的回调函数在做参数组合"]}),"\n",(0,n.jsxs)(d.li,{children:[(0,n.jsx)(d.code,{children:"reduce()"})," 过程构建了一个函数 pipeline"]}),"\n"]}),"\n",(0,n.jsxs)(d.h3,{id:"reduce-的回调函数在做参数组合",children:[(0,n.jsx)(d.code,{children:"reduce()"})," 的回调函数在做参数组合",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#reduce-的回调函数在做参数组合",children:"#"})]}),"\n",(0,n.jsx)(d.p,{children:"首先，就 reduce() 过程中的单个步骤来说，每一次回调执行，都会吃进 2 个参数，吐出 1 个结果。"}),"\n",(0,n.jsxs)(d.p,{children:["我们可以把每一次的调用看做是把 2 个入参被【",(0,n.jsx)(d.strong,{children:"组合"}),"】进了 callback 函数里，最后转化出 1 个出参的过程。"]}),"\n",(0,n.jsxs)(d.p,{children:["我们把数组中的 n 个元素看做 n 个参数，那么 ",(0,n.jsx)(d.code,{children:"reduce()"})," 的过程，就是一个把 n 个参数逐步【",(0,n.jsx)(d.strong,{children:"组合"}),"】到一起，最终吐出 1 个结果的过程。"]}),"\n",(0,n.jsxs)(d.p,{children:["上文讨论过的 ",(0,n.jsx)(d.code,{children:"reduce(add)"})," 和 ",(0,n.jsx)(d.code,{children:"reduce(add1AndPush)"})," 均能够体现这个特征："]}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)("img",{src:i,alt:""})}),"\n",(0,n.jsx)(d.p,{children:"reduce，动词，意为减少。这个【减少】可以理解为是参数个数的减少。"}),"\n",(0,n.jsx)(d.p,{children:"如上图所示，reduce 方法把多个入参，reduce（减少）为一个出参 。"}),"\n",(0,n.jsxs)(d.h3,{id:"reduce-过程是一个函数-pipeline",children:[(0,n.jsx)(d.code,{children:"reduce()"})," 过程是一个函数 pipeline",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#reduce-过程是一个函数-pipeline",children:"#"})]}),"\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)(d.code,{children:"reduce()"})," 函数发起的工作流，可以看作是一个函数 pipeline。"]}),"\n",(0,n.jsx)(d.p,{children:"尽管每次调用的都是同一个函数，但上一个函数的输出，总是会成为下一个函数的输入。"}),"\n",(0,n.jsxs)(d.p,{children:["同时，",(0,n.jsx)(d.code,{children:"reduce()"})," pipeline 里的每一个任务都是一样的，仅仅是入参不同，这极大地约束了 pipeline 的能力。 如下图，整个 ",(0,n.jsx)(d.code,{children:"reduce(add)"})," pipeline 中只有 ",(0,n.jsx)(d.code,{children:"add()"})," 这一种行为。"]}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)("img",{src:s,alt:""})}),"\n",(0,n.jsx)(d.p,{children:"这就好像你开了一家水果加工厂，厂里拉出来了一条流水线，这流水线里的每一道工序都是一样的，就只会做“水果切块”，不会整别的了。"}),"\n",(0,n.jsx)(d.p,{children:"难道哪天我想做果汁了，我还得拉个新的流水线出来，专门做水果榨汁吗？"}),"\n",(0,n.jsx)(d.p,{children:"这、这是不是有点浪费？"}),"\n",(0,n.jsxs)(d.p,{children:["我们把 ",(0,n.jsx)(d.code,{children:"reduce()"})," 的这两个特征放在一起来看：",(0,n.jsx)(d.strong,{children:"参数组合+函数pipeline"}),"。"]}),"\n",(0,n.jsx)(d.p,{children:"咱就是说，有没有可能，有没有可能咱们把 pipeline 里的每一个函数也弄成不一样的呢？"}),"\n",(0,n.jsxs)(d.p,{children:["更直白地说，你",(0,n.jsx)(d.code,{children:"reduce()"}),"既然都能组合参数了，你能不能帮我的 pipeline 组合一下函数呢？"]}),"\n",(0,n.jsxs)(d.p,{children:["毕竟，",(0,n.jsx)(d.strong,{children:"JS 的函数是可以作为参数传递"}),"的嘛！"]}),"\n",(0,n.jsx)(d.p,{children:"答案是肯定的——可能，可太能了！"}),"\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)(d.code,{children:"reduce()"})," 之所以能够作为函数式编程的“万金油”存在，本质上就是因为它映射了函数组合的思想。"]}),"\n",(0,n.jsx)(d.p,{children:"而函数组合，恰恰是函数式编程中最特别、最关键的实践方法，是核心中的核心，堪称“核中核”。"}),"\n",(0,n.jsxs)(d.p,{children:["那么函数组合到底是什么？它在实践中的形态是什么样的？我们又该如何借助",(0,n.jsx)(d.code,{children:"reduce()"}),"来实现函数组合呢？"]}),"\n",(0,n.jsx)(d.p,{children:"在展开讨论这些问题之前，咱首先得去到下一节，整明白“声明式的数据流”是啥。"}),"\n",(0,n.jsx)(d.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:d}=Object.assign({},(0,r.ah)(),e.components);return d?(0,n.jsx)(d,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}let u=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["JavaScript%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F12%20%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20Reduce%EF%BC%9A%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%9A%84%E2%80%9C%E4%B8%87%E9%87%91%E6%B2%B9%E2%80%9D.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"前置知识：Reduce 工作流分析",id:"前置知识reduce-工作流分析",depth:2},{text:"小试牛刀：用 `reduce()` 推导 `map()`",id:"小试牛刀用-reduce-推导-map",depth:2},{text:"Map 工作流分析",id:"map-工作流分析",depth:3},{text:"Map 其实是 MapReduce",id:"map-其实是-mapreduce",depth:3},{text:"用 `reduce()` 推导 `map()`",id:"用-reduce-推导-map",depth:3},{text:"Map 和 Reduce 之间的逻辑关系",id:"map-和-reduce-之间的逻辑关系",depth:3},{text:"更进一步： `reduce()` 映射了函数组合思想",id:"更进一步-reduce-映射了函数组合思想",depth:2},{text:"`reduce()` 的回调函数在做参数组合",id:"reduce-的回调函数在做参数组合",depth:3},{text:"`reduce()` 过程是一个函数 pipeline",id:"reduce-过程是一个函数-pipeline",depth:3}],title:"12 你不知道的 Reduce：函数式语言的“万金油”",headingTitle:"12 你不知道的 Reduce：函数式语言的“万金油”",frontmatter:{}}}}]);