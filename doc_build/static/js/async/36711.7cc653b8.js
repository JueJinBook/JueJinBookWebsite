"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["36711"],{694375:function(e,n,s){s.r(n),s.d(n,{default:()=>o});var r=s(552676),c=s(740453);let d=s.p+"static/image/1e557e8a1a4a03985987b88ac2b747aa.5e1a1d7b.webp";function l(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",em:"em",h3:"h3",img:"img",ol:"ol"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"10第十日前端工程化",children:["10.第十日：前端工程化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10第十日前端工程化",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"第一个故事搭建环境与代码风格管理",children:["第一个故事：搭建环境与代码风格管理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第一个故事搭建环境与代码风格管理",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"今天的故事是本课程最后的内容，主要来聊聊前端开发的工程化。那么什么是前端工程化呢？它能解决什么问题呢？"}),"\n",(0,r.jsx)(n.p,{children:"我们知道，早期JavaScript代码是写在文本编辑器中的，然后加载到浏览器，直接运行。这种方式对于早期只是开发几个页面来说还是很便利。但是，如今的前端开发演变成复杂的应用开发，一个web项目需要好几个开发人员共同完成。因为一个项目需要多人协作开发，这是就会出现很多问题，比如："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"模块间变量冲突、覆盖"}),"\n",(0,r.jsx)(n.li,{children:"书写风格迥异"}),"\n",(0,r.jsx)(n.li,{children:"代码重复和冗余等"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["前端工程化就是为了解决这些问题而产生的。前端工程化的主要内容包括了",(0,r.jsx)(n.strong,{children:"模块化"}),"、",(0,r.jsx)(n.strong,{children:"组件化"}),"、",(0,r.jsx)(n.strong,{children:"规范化"}),"和",(0,r.jsx)(n.strong,{children:"自动化"}),"。在前面的故事中，我们介绍了如何封装模块和创建组件的思路。所以今天的故事，我们重点关注规范化和自动化这两方面。规范化包括了书写规范，版本统一等。自动化包括了自动打包、单元测试，持续集成等等。"]}),"\n",(0,r.jsx)(n.p,{children:"早些年，Web开发的规范化一般采用约定的方式，规范程序员的代码书写。比如，让不同的开发人员用不同的名字空间或者不同的前缀来命名各自负责的模块中的变量和函数。但是，这种方式不能保证每个开发人员都能遵守约定，而且在人多的时候，这种方式会把变量和函数的名字变得很复杂，不利于理解和维护。"}),"\n",(0,r.jsx)(n.p,{children:"至于打包，早期的JS语言特性不支持模块化，也没有相应的工具来管理模块，因此开发人员各自写的JS文件都依次添加到HTML页面上。当页面比较复杂的时候，加载的JS文件会比较多，可能造成混乱。再后来，出现了require JS、sea JS等前端模块管理的工具和相应的ADM/CMD规范，前端开始在网页上通过异步加载的方式来管理和组织JS文件，这是最原始的模块管理方式。"}),"\n",(0,r.jsx)(n.p,{children:"但在2009年Node.js诞生后，前端程序员真正有了可以搭建项目工程脚手架和管理代码的环境。用Node.js编写的运行于开发环境代码目录中的工具脚本，可以帮助我们完成诸如代码检查、文件编译、依赖管理、内容打包、单元测试和持续集成等工作，这就让前端项目的代码可维护性大大提升，从而能够轻松维护更大规模的项目。"}),"\n",(0,r.jsx)(n.p,{children:"所以，现在的Web项目一般不再使用“裸写”JavaScript代码的方式，而是会先引入并初始化Node环境。所以第一个故事，我们就来看看Node环境是如何帮助我们实现规范化代码书写的。"}),"\n",(0,r.jsxs)(n.p,{children:["下面的内容涉及到",(0,r.jsx)(n.a,{href:"https://nodejs.org/",target:"_blank",rel:"noopener noreferrer",children:"Node.js"}),"和",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer",children:"NPM"}),"的使用，如果你不了解Node.js和NPM可以查阅它们的官网。"]}),"\n",(0,r.jsx)(n.p,{children:"首先，在系统里安装好Node.js和NPM后，创建项目目录，在目录下执行初始化NPM配置文件的命令："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm init\n"})}),"\n",(0,r.jsx)(n.p,{children:"系统将会以询问式的方式创建并初始化NPM配置。这个配置会保存在package.json文件中。通常一个初始的NPM配置如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "app",\n  "version": "1.0.0",\n  "description": "My Web Application",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "MIT"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这是一份JSON配置文件，",(0,r.jsx)(n.code,{children:"name"}),"字段表示项目名称，如果你要将项目最终发布到NPM，你需要起一个唯一的，没有被人使用过的名字。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"version"}),"字段是项目的版本号，一般来说采用",(0,r.jsx)(n.code,{children:"semver"}),"（语义化版本 Semantic Versioning）规范，根据",(0,r.jsx)(n.code,{children:"semver"}),"规范，版本号格式为：",(0,r.jsx)(n.code,{children:"主版本号.次版本号.修订号"}),"。当项目做了不兼容的API修改时，更新主版本号；做了向下兼容的功能更新时，更新次版本号，只是做了问题修复时，更新修订号。",(0,r.jsx)(n.code,{children:"description"}),"字段是项目描述。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"main"}),"字段是项目的入口JS，如果项目要被其他项目依赖，其他项目的代码中",(0,r.jsx)(n.code,{children:"import"}),"或者",(0,r.jsx)(n.code,{children:"require"}),"时，缺省的入口就是main字段指定的那个JS文件。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"scripts"}),"字段是个很重要的字段，我们的工程化脚本就添加在这里，而且它还有一个很重要的作用，如果我们安装一个带有命令行的Node模块，我们不需要将该模块全局安装，",(0,r.jsx)(n.code,{children:"scripts"}),"中定义的脚本会自动根据",(0,r.jsx)(n.code,{children:"node_modules"}),"找到相应的模块并启动脚本指令。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"keywords"}),"定义模块的关键字，如果我们最终将这个模块发布到NPM上，这里定义的",(0,r.jsx)(n.code,{children:"keywords"}),"有助于其他开发者搜索到模块。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"author"}),"字段设置作者信息。",(0,r.jsx)(n.code,{children:"lincense"}),"设置开源协议。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"关于这份配置文件的说明还有很多，如果你有兴趣可以到官网上查看它的详细说明。这里我们主要介绍这一节需要用到的配置。"})}),"\n",(0,r.jsx)(n.p,{children:"我们初始化好NPM配置之后，就可以安装模块了。"}),"\n",(0,r.jsx)(n.p,{children:"在多人维护的项目中，第一个要做的事情是统一代码风格，包括符号书写风格如缩进、括号、运算符、空格、空行、引号、逗号、分号等等；也包括语法书写风格，如变量命名、逻辑结构、函数签名等等；以及其他一些风格，比如函数参数个数、一行书写的最大字符数、函数长度与逻辑复杂度、单个JS文件长度等等。"}),"\n",(0,r.jsxs)(n.p,{children:["这些代码风格检查，我们都可以通过工具",(0,r.jsx)(n.code,{children:"eslint"}),"来完成。所以现在，我们需要给Node环境安装",(0,r.jsx)(n.code,{children:"eslint"}),"包："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev eslint\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面的命令行中，我们通过",(0,r.jsx)(n.code,{children:"npm install"}),"安装",(0,r.jsx)(n.code,{children:"eslint"}),"，参数",(0,r.jsx)(n.code,{children:"--save-dev"}),"表示将它安装到开发依赖中。安装完成后，",(0,r.jsx)(n.code,{children:"package.json"}),"中增加了",(0,r.jsx)(n.code,{children:"devDependencies"}),"字段，其中内容是当前安装的",(0,r.jsx)(n.code,{children:"eslint"}),"的版本号。如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "app",\n  "version": "1.0.0",\n  "description": "My Web Application",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "MIT",\n  "devDependencies": {\n    "eslint": "^6.8.0"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["安装完成后，我们需要告诉",(0,r.jsx)(n.code,{children:"eslint"}),"检查哪些文件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "app",\n  "version": "1.0.0",\n  "description": "My Web Application",\n  "main": "index.js",\n  "scripts": {\n    "lint": "eslint \'./**/*.js\'",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "MIT",\n  "devDependencies": {\n    "eslint": "^6.8.0"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["如上代码所示，我们给",(0,r.jsx)(n.code,{children:"script"}),"字段添加了",(0,r.jsx)(n.code,{children:'"lint": "eslint \'./**/*.js\'"'}),"这个配置，表示让",(0,r.jsx)(n.code,{children:"eslint"}),"检查项目中所有的JS文件。"]}),"\n",(0,r.jsxs)(n.p,{children:["但是，",(0,r.jsx)(n.code,{children:"eslint"}),"没有设置默认的检查规则，所以我们必须给它指定检查规则。我们在项目目录下添加一个",(0,r.jsx)(n.code,{children:".eslintrc.js"}),"文件，内容如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  extends: 'eslint:recommended',\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"eslint:recommended"}),"是",(0,r.jsx)(n.code,{children:"eslint"}),"内置的推荐检查规则，我们暂时就用它来规范开发人员的代码书写。"]}),"\n",(0,r.jsxs)(n.p,{children:["现在我们在项目中创建一个JS文件",(0,r.jsx)(n.code,{children:"index.js"}),"，内容如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'var message = "Hello world!";\nconsole.log(message);\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后我们在项目目录下运行命令，检查项目下所有JS文件的书写规范："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run lint \n"})}),"\n",(0,r.jsx)(n.p,{children:"这时，我们会看到控制台上输出的检查结果："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"  2:1  error  'console' is not defined  no-undef\n\n✖ 1 problem (1 error, 0 warnings)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这条结果说的是",(0,r.jsx)(n.code,{children:"console"}),"变量未定义，但是",(0,r.jsx)(n.code,{children:"console"}),"是在浏览器环境下的内置对象，所以我们可以在",(0,r.jsx)(n.code,{children:".eslintrc.js"}),"配置里面修改一下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  env: {\n    browser: true, // 告诉eslint这个项目是浏览器的项目\n  },\n  extends: 'eslint:recommended',\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["因为我们的项目是一个浏览器应用，我们把",(0,r.jsx)(n.code,{children:"env"}),"（环境）配置为",(0,r.jsx)(n.code,{children:"{browser: true}"}),"，这样浏览器下的内置对象就不会报未定义的错误了。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"eslint"}),"还允许我们添加其他规则，比如我们希望不使用",(0,r.jsx)(n.code,{children:"var"}),"，而使用ES6的",(0,r.jsx)(n.code,{children:"const"}),"和",(0,r.jsx)(n.code,{children:"let"}),"声明，那么我们可以添加规则——rules："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  env: {\n    browser: true,\n  },\n  extends: \'eslint:recommended\',\n  rules: {\n    "no-var": "error",\n  },\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["我们再次运行",(0,r.jsx)(n.code,{children:"npm run lint"}),"，就可以看到新的错误信息："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"  1:1  error  Unexpected var, use let or const instead  no-var\n\n✖ 1 problem (1 error, 0 warnings)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时我们把",(0,r.jsx)(n.code,{children:"var"}),"改为",(0,r.jsx)(n.code,{children:"const"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const message = "Hello world!";\nconsole.log(message);\n'})}),"\n",(0,r.jsx)(n.p,{children:"再次运行脚本，依然报一个错误："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"  1:1  error  Parsing error: The keyword 'const' is reserved\n\n✖ 1 problem (1 error, 0 warnings)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这是因为",(0,r.jsx)(n.code,{children:"eslint"}),"默认的JS版本是ES5，所以不支持",(0,r.jsx)(n.code,{children:"const"}),"语法，需要将默认的JS版本修改为ES6版本："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  env: {\n    browser: true,\n  },\n  extends: 'eslint:recommended',\n  parserOptions: {\n    ecmaVersion: 2017,\n    sourceType: 'module',\n  },\n  rules: {\n    \"no-var\": \"error\",\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面的代码设置了",(0,r.jsx)(n.code,{children:"parserOptions"}),"属性，将",(0,r.jsx)(n.code,{children:"ecmaVersion"}),"设为",(0,r.jsx)(n.code,{children:"2017"}),"，",(0,r.jsx)(n.code,{children:"sourceType"}),"设为",(0,r.jsx)(n.code,{children:"module"}),"这样它就支持",(0,r.jsx)(n.code,{children:"ES2017"}),"最新的语法和",(0,r.jsx)(n.code,{children:"ES module"}),"模块加载语法的检查了。"]}),"\n",(0,r.jsxs)(n.p,{children:["其实，ESLint的校验规则很多，有数百条，我们可以在",(0,r.jsx)(n.a,{href:"https://cn.eslint.org/docs/rules/",target:"_blank",rel:"noopener noreferrer",children:"ESLint官网"}),"上查到所有的规则说明和配置方法，然后根据我们的喜好来配置，但这是一件非常耗时的工作。不过，ESLint提供了交互式初始化校验规则的命令行工具，我们可以使用它来快速配置规则。"]}),"\n",(0,r.jsxs)(n.h3,{id:"自动配置-eslint",children:["自动配置 eslint",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自动配置-eslint",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["编辑",(0,r.jsx)(n.code,{children:"package.json"}),"，添加",(0,r.jsx)(n.code,{children:"scripts"}),"字段的内容："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "app",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "lint:init": "eslint --init",\n    "lint": "eslint \'./**/*.js\'",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "devDependencies": {\n    "eslint": "^6.8.0"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["我们添加一个",(0,r.jsx)(n.code,{children:"lint:init"}),"命令行脚本，然后运行它："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run lint:init\n"})}),"\n",(0,r.jsx)(n.p,{children:"这样ESLint就会启动交互式配置的命令帮助我们配置合适于我们项目的ESLint检查规则。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"> eslint --init\n\n? How would you like to use ESLint? To check syntax, find problems, and enforce \ncode style\n? What type of modules does your project use? JavaScript modules (import/export)\n\n\n? Which framework does your project use? None of these\n? Does your project use TypeScript? No\n? Where does your code run? Browser, Node\n? How would you like to define a style for your project? Use a popular style gui\nde\n? Which style guide do you want to follow? Airbnb: https://github.com/airbnb/jav\nascript\n? What format do you want your config file to be in? JavaScript\n"})}),"\n",(0,r.jsxs)(n.p,{children:["执行",(0,r.jsx)(n.code,{children:"eslint --init"}),"会询问我们几个问题，根据我们的回答初始化配置文件，而且会让我们选择继承常用的代码风格，包括",(0,r.jsx)(n.a,{href:"https://github.com/doasync/eslint-config-airbnb-standard",target:"_blank",rel:"noopener noreferrer",children:"Airbnb"}),"风格、",(0,r.jsx)(n.a,{href:"https://github.com/standard/eslint-config-standard",target:"_blank",rel:"noopener noreferrer",children:"Standard"}),"和",(0,r.jsx)(n.a,{href:"https://github.com/google/eslint-config-google",target:"_blank",rel:"noopener noreferrer",children:"Google"}),"风格，我们可以选择适合我们团队的风格。比如选择Standard风格，最终生成的",(0,r.jsx)(n.code,{children:".eslintrc.js"}),"配置文件如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  env: {\n    browser: true,\n    es6: true\n  },\n  extends: [\n    'standard'\n  ],\n  globals: {\n    Atomics: 'readonly',\n    SharedArrayBuffer: 'readonly'\n  },\n  parserOptions: {\n    ecmaVersion: 2018,\n    sourceType: 'module'\n  },\n  rules: {\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"这样我们就可以通过ESLint让团队成员维护项目代码时，风格保持一致了。"}),"\n",(0,r.jsxs)(n.p,{children:["我们添加了新的Standard风格，再次运行",(0,r.jsx)(n.code,{children:"npm run lint"}),"，发现这次报了比较多的错误："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"  1:5   error  'message' is never reassigned. Use 'const' instead  prefer-const\n  1:15  error  Strings must use singlequote                        quotes\n  1:29  error  Extra semicolon                                     semi\n  2:21  error  Extra semicolon                                     semi\n  2:22  error  Newline required at end of file but not found \n"})}),"\n",(0,r.jsx)(n.p,{children:"ESLint报的错误一共5条："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"message"}),"变量没有被再次赋值，应当使用",(0,r.jsx)(n.code,{children:"const"}),"声明。"]}),"\n",(0,r.jsx)(n.li,{children:"字符串应该用单引号"}),"\n",(0,r.jsx)(n.li,{children:"两条语句多余分号（Standard采用semiless风格，不主动写分号）。"}),"\n",(0,r.jsx)(n.li,{children:"文件最后保留一个空行"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我们可以根据提示信息一一修复它们，但是我们有一个更简单的方法，在",(0,r.jsx)(n.code,{children:"script"}),"字段中添加如下配置："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'  "lint:fix": "eslint \'./**/*.js\' --fix",\n'})}),"\n",(0,r.jsxs)(n.p,{children:["它表示让ESLint自动修复问题。然后，我们只需要在命令后运行",(0,r.jsx)(n.code,{children:"npm run lint:fix"}),"，就能自动修改书写中的错误了。"]}),"\n",(0,r.jsx)(n.p,{children:"最后，我们的代码被修复为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const message = 'Hello world!'\nconsole.log(message)\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们也可以根据需要，在",(0,r.jsx)(n.code,{children:".eslintrc.js"}),"的",(0,r.jsx)(n.code,{children:"rules"}),"字段中修改我们自己喜好的规则，这些规则会覆盖",(0,r.jsx)(n.code,{children:"standard"}),"定义好的默认规则。比如，如果我们希望在语句末尾添加分号，可以在",(0,r.jsx)(n.code,{children:".eslintrc.js"}),"文件中添加这个规则："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"rules: {\n  semi: ['error', 'always'],\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这样我们再执行",(0,r.jsx)(n.code,{children:"npm run lint"}),"时，又会出现下面这个错误："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"  1:31  error  Missing semicolon  semi\n  2:21  error  Missing semicolon  semi\n\n✖ 2 problems (2 errors, 0 warnings)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们可以再次运行",(0,r.jsx)(n.code,{children:"npm run lint:fix"}),"来修复它们。最终代码被修改如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const message = 'Hello world!';\nconsole.log(message);\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"除了NPM命令外，ESLint还能被VSCode等常用编辑器支持，这些编辑器能够直接在开发的时候给出语法提示，这样就帮助我们写出符合规范的代码来。"}),"\n",(0,r.jsxs)(n.p,{children:["所以，在团队开发的时候，应当养成使用ESLint的习惯，创建项目后，第一个安装和初始化的模块就应当是",(0,r.jsx)(n.code,{children:"eslint"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"这个故事主要让你了解了如何在工具层面规范开发者的代码书写，下一个故事，我们来聊聊规范化的另一个内容：统一开发版本。"}),"\n",(0,r.jsxs)(n.h2,{id:"第二个故事使用babel向下兼容",children:["第二个故事：使用Babel向下兼容",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第二个故事使用babel向下兼容",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"JavaScript大部分的使用场景是在浏览器环境中。因为Web的开放性，用户使用的浏览器版本也很多种。最新的浏览器几乎支持所有最新的JavaScript语言特性，而一些比较旧的浏览器，则可能只支持比较旧版本的JavaScript语言特性。在过去，前端开发者面临两难选择，要么放弃使用新的语言特性书写代码，要么放弃支持一部分使用旧浏览器的用户。但是现在，有了Babel这样的编译工具，情况得到了改变。"}),"\n",(0,r.jsx)(n.p,{children:"Babel是一个JavaScript编译器，它能把新的JavaScript语言版本编译为旧版本，这样我们开发者在进行Web开发的时候，就可以使用最新的语法特性，同时又能兼顾使用老版本浏览器环境的用户了。这样就能保证一个公司内部中的每个项目中使用的JS版本是一样的，降低各项目的维护成本。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"如上图，左边是编译前的代码，右边是编译后的代码（编译的目标版本是ES5）。"}),"\n",(0,r.jsx)(n.p,{children:"下面，我们就来学习一下如何使用Babel工具。"}),"\n",(0,r.jsxs)(n.h3,{id:"安装babel",children:["安装Babel",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装babel",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Babel是NPM模块，安装Babel通常需要装好几个库。"}),"\n",(0,r.jsx)(n.p,{children:"我们按照下面的NPM命令来安装："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @babel/core @babel/cli @babel/preset-env\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@babel/core"}),"是Babel的核心库，",(0,r.jsx)(n.code,{children:"@babel/cli"}),"是Babel的命令行工具，",(0,r.jsx)(n.code,{children:"@babel/preset-env"}),"是Babel默认的预设环境。"]}),"\n",(0,r.jsxs)(n.p,{children:["要在运行时兼容老版本的浏览器，我们还要安装一个",(0,r.jsx)(n.code,{children:"core-js v3"}),"模块，这个模块要安装在发布依赖，而不是开发依赖下。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save core-js@3\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\uD83D\uDCA1",(0,r.jsx)(n.code,{children:"npm install"}),"命令的参数",(0,r.jsx)(n.code,{children:"--save-dev"}),"表示在安装模块的同时将模块信息写到",(0,r.jsx)(n.code,{children:"package.json"}),"的",(0,r.jsx)(n.code,{children:"devDependencies"}),"字段，而",(0,r.jsx)(n.code,{children:"--save"}),"参数则表示写到",(0,r.jsx)(n.code,{children:"dependencies"}),"字段。两者的区别是，如果我们将代码发布到NPM，用户通过",(0,r.jsx)(n.code,{children:"npm install <包名>"}),"安装我们的代码时，",(0,r.jsx)(n.code,{children:"devDependencies"}),"字段中的模块并不会被安装，只有用户将我们的代码clone下来，进行改动时，才会安装",(0,r.jsx)(n.code,{children:"devDependencies"}),"中的依赖。"]}),"\n",(0,r.jsxs)(n.p,{children:["因为",(0,r.jsx)(n.code,{children:"@babel/core"}),"、",(0,r.jsx)(n.code,{children:"@babel/cli"}),"、",(0,r.jsx)(n.code,{children:"@babel/preset-env"}),"只有开发者编译代码时有用，使用模块的人直接使用编译好的代码，所以并不要使用这三个模块。而",(0,r.jsx)(n.code,{children:"core-js"}),"是在运行时为老版本的浏览器提供不支持的API的实现的，所以使用模块的时候要加载它。因此前者用",(0,r.jsx)(n.code,{children:"--save-dev"}),"安装，后者用",(0,r.jsx)(n.code,{children:"--save"}),"安装。同样，前一节我们的",(0,r.jsx)(n.code,{children:"eslint"}),"也是对开发者有用，使用者并不关心，所以也用",(0,r.jsx)(n.code,{children:"--save-dev"}),"安装。"]}),"\n",(0,r.jsxs)(n.p,{children:["安装好了Babel后，我们在项目目录下创建一个配置文件",(0,r.jsx)(n.code,{children:".babelrc"}),"，这是一个JSON文件，我们配置如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "presets": [\n    [\n      "@babel/env",\n      {\n        "targets": "> 0.25%, not dead",\n        "useBuiltIns": "usage"\n      }\n    ]\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"我们先来分析一下这段配置："}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@babel/env"}),"表示预设支持当前版本所能支持的所有JavaScript的正式标准。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:' "targets": "> 0.25%, not dead"'}),"表示编译后的目标，这里设置为目前市场占有率高于",(0,r.jsx)(n.code,{children:"0.25%"}),"且依然在维护中（not dead）的浏览器。这个选项包括了较多早期的浏览器，这些浏览器不支持ES6的语法。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"useBuiltIns": "usage"'}),"表示Babel会根据我们实际用到的API以及编译目标的浏览器兼容性，从",(0,r.jsx)(n.code,{children:"core-js"}),"中按需添加需要的",(0,r.jsx)(n.code,{children:"polyfill"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"corejs": 3'}),"表示使用",(0,r.jsx)(n.code,{children:"core-js"}),"的",(0,r.jsx)(n.code,{children:"3.x"}),"版本（默认是使用2.x版本）。"]}),"\n",(0,r.jsxs)(n.p,{children:["然后，我们在项目中创建一个src目录，修改上一节中的",(0,r.jsx)(n.code,{children:"index.js"}),"文件，并将它移至",(0,r.jsx)(n.code,{children:"src"}),"目录下，内容为："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class Foo {\n  bar () {\n    return 'bar';\n  }\n}\n\nconst f = new Foo();\nconsole.log(f.bar());\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后在package.json文件中的",(0,r.jsx)(n.code,{children:"scripts"}),"字段中添加",(0,r.jsx)(n.code,{children:"compile"}),"命令:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'  "scripts": {\n    // ..省略其他的设置...\n    "compile": "babel src -d lib",\n  },\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"compile": "babel src -d lib"'}),"表示在compile命令中执行babel，将src目录的所有JS文件编译后，输出到lib目录。"]}),"\n",(0,r.jsx)(n.p,{children:"运行compile命令："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run compile\n"})}),"\n",(0,r.jsx)(n.p,{children:"这时，我们会发现项目下多了lib目录，其中的index.js文件内容如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'"use strict";\n\nfunction _classCallCheck(instance, Constructor) { ... }\n\nfunction _defineProperties(target, props) { ...}\n\nfunction _createClass(Constructor, protoProps, staticProps) { ... }\n\nvar Foo =\n/*#__PURE__*/\nfunction () {\n  function Foo() {\n    _classCallCheck(this, Foo);\n  }\n\n  _createClass(Foo, [{\n    key: "bar",\n    value: function bar() {\n      return \'bar\';\n    }\n  }]);\n\n  return Foo;\n}();\n\nvar f = new Foo();\nconsole.log(f.bar());\n'})}),"\n",(0,r.jsx)(n.p,{children:"上面的这段代码是经过Babel编译后的代码。它将ES6的代码编译成ES5的代码。因为老版浏览器不支持ES6的Class语法，所以Babel将它编译成function，这样就能让ES6的代码运行在老版本的浏览器上了。"}),"\n",(0,r.jsxs)(n.p,{children:["我们可以修改",(0,r.jsx)(n.code,{children:"targets"}),"，让我们的代码运行在我们需要的浏览器上："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "presets": [\n    [\n      "@babel/env",\n      {\n        "targets": {\n          "chrome": 49\n        },\n        "useBuiltIns": "usage",\n        "corejs": 3\n      }\n    ]\n  ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["我们将",(0,r.jsx)(n.code,{children:"targets"}),"设为",(0,r.jsx)(n.code,{children:'"chrome": 49'}),"，那么它会编译成chrome 49所支持的目标代码。再次执行",(0,r.jsx)(n.code,{children:"npm run compile"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["这次得到的 ",(0,r.jsx)(n.code,{children:"lib/index.js"})," 长这样："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"\"use strict\";\n\nclass Foo {\n  bar() {\n    return 'bar';\n  }\n\n}\n\nconst f = new Foo();\nconsole.log(f.bar());\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们看到，除了添加了一行",(0,r.jsx)(n.code,{children:'"use strict"'}),"之外，基本上代码没有任何区别。这是因为",(0,r.jsx)(n.code,{children:"chrome 49"}),"已经支持了class语法。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们继续修改",(0,r.jsx)(n.code,{children:"src/index.js"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class Foo {\n  bar () {\n    return 'bar';\n  }\n}\n\nconst f = new Foo();\nconsole.log(f.bar());\n\nconsole.log(10 ** 3);\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们增加了",(0,r.jsx)(n.code,{children:"console.log(10 ** 3)"}),"这行代码，再次运行",(0,r.jsx)(n.code,{children:"npm run compile"}),"，然后查看",(0,r.jsx)(n.code,{children:"lib/index.js"}),"，我们看到现在的代码是这样的："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"\"use strict\";\n\nclass Foo {\n  bar() {\n    return 'bar';\n  }\n\n}\n\nconst f = new Foo();\nconsole.log(f.bar());\nconsole.log(Math.pow(10, 3));\n"})}),"\n",(0,r.jsxs)(n.p,{children:["因为",(0,r.jsx)(n.code,{children:"chrome 49"}),"不支持乘方操作符",(0,r.jsx)(n.code,{children:"**"}),"，所以",(0,r.jsx)(n.code,{children:"10 ** 3"}),"被编译成了",(0,r.jsx)(n.code,{children:"Math.pow(10, 3)"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["除了上面所提到的这些，Babel还有许多配置项和用法，更详细的用法可以参考",(0,r.jsx)(n.a,{href:"https://www.babeljs.cn/",target:"_blank",rel:"noopener noreferrer",children:"Babel官网"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"总之，有了Babel之后，我们就可以将JavaScript代码编译成任何我们需要的目标版本，这样我们在使用JavaScript写代码的时候就可以放心使用最新的语言特性而不用担心浏览器兼容性问题了。"}),"\n",(0,r.jsx)(n.p,{children:"解决了兼容问题，我们再来思考另一个问题。通常情况下，对于较复杂的Web应用，我们会采用模块化的开发方式，无论是早期Node.js的CommoneJS规范还是ECMAScript最新的ES Module规范都提供了规范的模块加载机制。但是，早期的浏览器却不支持模块的加载，而且现在大部分网站依然是HTTP1.1，除了模块加载外，我们还需要考虑减少HTTP请求的数量。这就要求我们的代码在开发到最终上线的环节还需要解决两个问题："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"一个是模块加载和管理的问题；"}),"\n",(0,r.jsx)(n.li,{children:"另一个是将多个模块文件打包合并成单一文件发布上线的问题。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"那么，上述两个问题可以通过什么工具来解决呢？"}),"\n",(0,r.jsxs)(n.h2,{id:"第三个故事使用webpack打包和发布",children:["第三个故事：使用Webpack打包和发布",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第三个故事使用webpack打包和发布",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"上两个故事中，我们介绍了规范化的工具解决方案，这个故事，我们就来看看自动化打包工具。"}),"\n",(0,r.jsx)(n.p,{children:"在较大规模的Web应用场景中，JavaScript代码会使用比较多，逻辑也比较复杂，而且要多人协作开发，分模块是一个强需求。"}),"\n",(0,r.jsxs)(n.p,{children:["最新的浏览器是支持",(0,r.jsx)(n.code,{children:"ES Module"}),"规范的，我们可以用浏览器提供的原生模块机制，实现模块的加载："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script type=\"module\">\n  import {Foo} from '/foo.js';\n  const f = new Foo();\n  console.log(f.bar());\n<\/script>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们把",(0,r.jsx)(n.code,{children:"script"}),"标签的",(0,r.jsx)(n.code,{children:"type"}),"设为",(0,r.jsx)(n.code,{children:"module"}),"，告诉浏览器这是一段支持",(0,r.jsx)(n.code,{children:"ES Module"}),"的脚本。这样，在这段脚本中，我们才可以使用",(0,r.jsx)(n.code,{children:"import"}),"去加载其他模块。这条语句（",(0,r.jsx)(n.code,{children:"import {Foo} from '/foo.js'"}),"）表示浏览器就会根据网站根目录自动加载对应的",(0,r.jsx)(n.code,{children:"/foo.js"}),"脚本文件。"]}),"\n",(0,r.jsxs)(n.p,{children:["但是，稍早一些的浏览器不支持",(0,r.jsx)(n.code,{children:"ES Module"}),"，这时候就需要我们的打包工具了。打包工具它解决两个问题："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"根据import关键字，将项目中上所有用到的模块都合并到一个JS文件中。除了JS文件，它还能打包Web项目中的其它的静态资源，比如：html、css、图片等。"}),"\n",(0,r.jsx)(n.li,{children:"减少http请求，提上加载速度"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"现在比较流行的打包工具有Webpack、Rollup、Gulp等等，一般选择一种就可以，在这里我们选择Webpack。"}),"\n",(0,r.jsx)(n.p,{children:"同样，我们需要在Node环境安装Webpack模块："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev webpack webpack-cli webpack-dev-server babel-loader\n"})}),"\n",(0,r.jsx)(n.p,{children:"在这里我们安装了四个模块："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"webpack"}),"：",(0,r.jsx)(n.code,{children:"webpack"}),"核心模块"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"webpack-cli"}),"：命令行"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"webpack-dev-server"}),"：开发服务器"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"babel-loader"}),"：",(0,r.jsx)(n.code,{children:"webpack"}),"集成",(0,r.jsx)(n.code,{children:"babel"}),"编译的加载器。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["有了webpack之后，我们要添加webpack的配置文件，它是一个js文件。我们在项目目录下创建一个",(0,r.jsx)(n.code,{children:"webpack.config.js"}),"文件。它的内容如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'app.js'\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"entry"}),"字段指定了入口文件，这里是",(0,r.jsx)(n.code,{children:"./src/index.js"}),"，",(0,r.jsx)(n.code,{children:"output"}),"字段指定打包后的文件的输出目的地，这里是输出到当前项目的",(0,r.jsx)(n.code,{children:"dist"}),"目录下的",(0,r.jsx)(n.code,{children:"app.js"}),"文件。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们在",(0,r.jsx)(n.code,{children:"package.json"}),"文件中添加一个命令："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  // ...省略其他配置...\n  "build": "webpack"\n},\n'})}),"\n",(0,r.jsx)(n.p,{children:"我们添加了build命令，运行它："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这样我们得到一个",(0,r.jsx)(n.code,{children:"dist"}),"目录和一个打包后的",(0,r.jsx)(n.code,{children:"app.js"}),"文件。"]}),"\n",(0,r.jsx)(n.p,{children:"打包的过程中，控制台上会有一段警告信息："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ARNING in configuration\nThe 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.\nYou can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这是因为我们没有配置webpack的打包模式。webpack支持",(0,r.jsx)(n.code,{children:"development"}),"、",(0,r.jsx)(n.code,{children:"production"}),"和",(0,r.jsx)(n.code,{children:"none"}),"三种模式。现在我们不指定模式，文件默认会被以",(0,r.jsx)(n.code,{children:"production"}),"模式打包。在production模式下，JS脚本会被压缩成一行以减小体积，你打开",(0,r.jsx)(n.code,{children:"dist/app.js"}),"文件就会看到脚本被压缩成了一行。"]}),"\n",(0,r.jsxs)(n.h3,{id:"envmode",children:["env.mode",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#envmode",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["为了让Webpack能够以不同的模式进行打包，我们需要在",(0,r.jsx)(n.code,{children:"webpack.config.js"}),"文件中增加",(0,r.jsx)(n.code,{children:"mode"}),"设置："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const path = require('path');\n\nmodule.exports = function (env = {}) {\n  return {\n    mode: env.mode,\n    entry: './src/index.js',\n    output: {\n      path: path.resolve(__dirname, 'dist'),\n      filename: 'app.js'\n    }\n  };\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后修改",(0,r.jsx)(n.code,{children:"package.json"}),"中的脚本命令："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  // ...省略其他配置...\n  "build": "webpack --env.mode=none",\n  "build:dev": "webpack --env.mode=development",\n  "build:prod": "webpack --env.mode=production",\n},\n'})}),"\n",(0,r.jsxs)(n.p,{children:["我们用三个命令",(0,r.jsx)(n.code,{children:"build"}),"、",(0,r.jsx)(n.code,{children:"build:dev"}),"和",(0,r.jsx)(n.code,{children:"build:prod"}),"表示以三种不同的模式打包我们的JS代码。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们现在再运行一下",(0,r.jsx)(n.code,{children:"npm run build"}),"这时候将以",(0,r.jsx)(n.code,{children:"env.mode=none"}),"的方式进行打包，代码将不再被压缩成一行，我们看到打包后的代码是这样的："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"/******/ (function(modules) { // webpackBootstrap\n/******/ 	// The module cache\n/******/ 	var installedModules = {};\n/******/\n...\n/******/\n/******/ 	// Load entry module and return exports\n/******/ 	return __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nclass Foo {\n  bar () {\n    return 'bar';\n  }\n}\n\nconst f = new Foo();\nconsole.log(f.bar());\n\nconsole.log(10 ** 3);\n\n\n/***/ })\n/******/ ]);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["前面有一堆被省略掉的代码是Webpack打包的时候添加的，用来正确载入模块的代码。后面一部分是我们原始代码，也就是",(0,r.jsx)(n.code,{children:"src/index.js"}),"中的代码。不过我们看到，这部分代码依然是和我们原来写的一样，如果我们要将它编译成兼容旧版本，同时打包，就需要",(0,r.jsx)(n.code,{children:"Babel"}),"的配合。我们前面安装的",(0,r.jsx)(n.code,{children:"babel-loader"}),"就是用来做这个事情的。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们修改一下",(0,r.jsx)(n.code,{children:"webpack.config.js"}),"，添加一下loader："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const path = require('path');\n\nmodule.exports = function (env = {}) {\n  return {\n    mode: env.mode,\n    entry: './src/index.js',\n    output: {\n      path: path.resolve(__dirname, 'dist'),\n      filename: 'app.js'\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.js$/,\n          exclude: /node_modules/,\n          use: {\n            loader: 'babel-loader'\n          }\n        }\n      ]\n    }\n  };\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们给webpack增加模块（module）配置，规则是匹配所有的 js 文件，但是不包括",(0,r.jsx)(n.code,{children:"node_modules"}),"目录中的文件。因为我们安装的第三方模块通常是编译过的，",(0,r.jsx)(n.code,{children:"use"}),"字段表示要使用的",(0,r.jsx)(n.code,{children:"loader"}),"，这里是",(0,r.jsx)(n.code,{children:"babel-loader"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["为了区分得更明显，我们将",(0,r.jsx)(n.code,{children:".babelrc"}),"的配置改回以下配置："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "presets": [\n    [\n      "@babel/env",\n      {\n        "targets": "> 0.25%, not dead",\n        "useBuiltIns": "usage",\n        "corejs": 3\n      }\n    ]\n  ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这样，再次运行",(0,r.jsx)(n.code,{children:"npm run build"}),"，我们会看到，打包后的代码将变成："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"... // 省略前面 Webpack 添加的代码\n/***/ (function(module, exports) {\n\nfunction _classCallCheck(instance, Constructor) { ... }\n\nfunction _defineProperties(target, props) { ... }\n\nfunction _createClass(Constructor, protoProps, staticProps) { ... }\n\nvar Foo =\n/*#__PURE__*/\nfunction () {\n  function Foo() {\n    _classCallCheck(this, Foo);\n  }\n\n  _createClass(Foo, [{\n    key: \"bar\",\n    value: function bar() {\n      return 'bar';\n    }\n  }]);\n\n  return Foo;\n}();\n\nvar f = new Foo();\nconsole.log(f.bar());\nconsole.log(Math.pow(10, 3));\n\n/***/ })\n/******/ ]);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这样，我们看到",(0,r.jsx)(n.code,{children:"src/index.js"}),"被编译成ES5的代码了。"]}),"\n",(0,r.jsxs)(n.p,{children:["现在我们修改一下",(0,r.jsx)(n.code,{children:"src"}),"下的文件，把它分成两个文件，新建一个",(0,r.jsx)(n.code,{children:"foo.js"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default class Foo {\n  bar () {\n    return 'bar';\n  }\n};\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后把",(0,r.jsx)(n.code,{children:"index.js"}),"改成："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import Foo from './foo';\n\nconst f = new Foo();\nconsole.log(f.bar());\n\nconsole.log(10 ** 3);\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们先运行一下之前的Babel编译命令：",(0,r.jsx)(n.code,{children:"npm run compile"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们会看到现在的lib目录下面也是两个文件，一个",(0,r.jsx)(n.code,{children:"foo.js"}),"和一个",(0,r.jsx)(n.code,{children:"index.js"}),"。也就是说，Babel会将src目录下的所有文件一一对应编译到lib下，但是它并不会合并文件。"]}),"\n",(0,r.jsxs)(n.p,{children:["而我们再运行",(0,r.jsx)(n.code,{children:"npm run build"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["会发现，生成的",(0,r.jsx)(n.code,{children:"dist/app.js"}),"文件内容和之前一个文件时的一样，也就是说，webpack将两个文件打包在了一起。"]}),"\n",(0,r.jsxs)(n.p,{children:["最后，还有一个问题，我们刚才还安装了一个",(0,r.jsx)(n.code,{children:"webpack-dev-server"}),"，这个脚本又是做什么用的呢？"]}),"\n",(0,r.jsxs)(n.p,{children:["因为我们现在有了webpack打包工具，所以我们已经可以生成",(0,r.jsx)(n.code,{children:"app.js"}),"这个文件，然后我们可以创建应用来使用",(0,r.jsx)(n.code,{children:"app.js"}),"，或者创建例子来测试它。但是，如果我们在开发中每次一修改原始的src目录中的文件，都要打包一次去更新",(0,r.jsx)(n.code,{children:"app.js"}),"，那样会非常麻烦，开发和测试起来很不方便。",(0,r.jsx)(n.code,{children:"webpack-dev-server"}),"提供了一个可以热更新修改原始文件，立即更新",(0,r.jsx)(n.code,{children:"app.js"}),"的机制，并且它自身是一个web服务器，方便我们开发调试。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们现在配置一下",(0,r.jsx)(n.code,{children:"webpack-dev-server"}),"，修改",(0,r.jsx)(n.code,{children:"webpack.config.js"}),"文件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const path = require('path');\n\nmodule.exports = function (env = {}) {\n  return {\n    // ...省略其它设置...\n    devServer: {\n      contentBase: path.join(__dirname, env.server || '.'),\n      port: 9090,\n      hot: true\n    }\n  };\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们添加了一个",(0,r.jsx)(n.code,{children:"devServer"}),"配置，",(0,r.jsx)(n.code,{children:"contentBase"}),"是",(0,r.jsx)(n.code,{children:"http server"}),"运行的目录，我们可以通过",(0,r.jsx)(n.code,{children:"env.server"}),"来指定，",(0,r.jsx)(n.code,{children:"port"}),"是运行端口，我们将它设为9090，",(0,r.jsx)(n.code,{children:"hot"}),"设为",(0,r.jsx)(n.code,{children:"true"}),"，那么一旦src下的内容被修改，",(0,r.jsx)(n.code,{children:"app.js"}),"将自动更新。"]}),"\n",(0,r.jsx)(n.p,{children:"接下来我们在项目目录下创建一个example子目录，添加index.html文件："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Document</title>\n</head>\n<body>\n  <script src="app.js"><\/script>\n</body>\n</html>\n'})}),"\n",(0,r.jsx)(n.p,{children:"我们再修改package.json文件，添加一个命令："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  // ...省略其它配置...\n  "dev": "webpack-dev-server --env.server=example",\n},\n'})}),"\n",(0,r.jsxs)(n.p,{children:["我们添加了一个",(0,r.jsx)(n.code,{children:"dev"}),"命令，执行",(0,r.jsx)(n.code,{children:"webpack-dev-server --env.server=example"}),"，现在我们运行它："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这样我们就启动了webpack-dev-server的web服务器，打开浏览器，访问",(0,r.jsx)(n.code,{children:"localhost:9090"}),"就可以看到我们的页面。打开开发者工具，控制台上现在输出的信息是",(0,r.jsx)(n.code,{children:"bar"}),"和",(0,r.jsx)(n.code,{children:"1000"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["回到",(0,r.jsx)(n.code,{children:"src/index.js"}),"文件，我们把",(0,r.jsx)(n.code,{children:"console.log(10 ** 3);"}),"修改为",(0,r.jsx)(n.code,{children:"console.log(20 ** 3);"}),"，再切换回浏览器窗口，我们看到控制台的输出信息变成了",(0,r.jsx)(n.code,{children:"bar"}),"和",(0,r.jsx)(n.code,{children:"2000"}),"。这是因为",(0,r.jsx)(n.code,{children:"webpack"}),"自动更新了",(0,r.jsx)(n.code,{children:"app.js"}),"文件。"]}),"\n",(0,r.jsx)(n.p,{children:"至此，webpack打包的简单配置就基本上完成了。这时，我们已经创建了一个完整的开发环境，可以开始我们的项目开发了。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"webpack"}),"还有许多高级的功能，以及不同的loader，不仅仅能够打包JS文件，还可以打包CSS、静态资源和HTML文件，在许多web项目中，我们会配置",(0,r.jsx)(n.code,{children:"webpack"}),"将各种文件打包到一起，最终整体发布，这样线上代码的体积最小，而且HTTP请求数也大大减少。"]}),"\n",(0,r.jsxs)(n.p,{children:["关于",(0,r.jsx)(n.code,{children:"webpack"}),"的更多功能和示例，可以参考",(0,r.jsx)(n.a,{href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer",children:"webpack官网"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"最后总结一下，在一个通用的项目开发环境中，我们使用ESLint来进行代码提示，从而统一代码风格，提升项目的代码质量；使用Babel来编译代码以兼容旧版本，从而让我们能够使用最新的语言特性来开发项目，以提高开发效率，提升项目的可维护性；使用Webpack来完成代码的打包，解决浏览器不能支持CommonJS和ES Module模块化规范的问题，将我们的项目代码从开发环境转变为可发布到线上的最终代码。"}),"\n",(0,r.jsx)(n.p,{children:"ESLint到Babel到Webpack，这是最基础的工程化工具集，除此以外，还有其他的工具以解决其他问题，比如单元测试的工具、持续集成（CI/CD）的工具等等，这些工具最终的目的都是让我们的开发变得更高效和可靠，项目的代码质量和可维护性得到提升，而这是实际项目开发和团队协作不可或缺的。因此前端工程化方法和相应的工具集，对于优秀的前端工程师，也是必修课，必须要好好掌握。"}),"\n",(0,r.jsx)(n.p,{children:"本课程限于篇幅，我们只是最粗浅地介绍了这些工具的使用，真正发挥不到这些工具能力的十分之一。如果你有兴趣，可以到各自的官网自行学习。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}let o=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6%2010%20%E6%97%A5%E8%B0%88%2F10.%E7%AC%AC%E5%8D%81%E6%97%A5%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96.md"]={toc:[{text:"第一个故事：搭建环境与代码风格管理",id:"第一个故事搭建环境与代码风格管理",depth:2},{text:"自动配置 eslint",id:"自动配置-eslint",depth:3},{text:"第二个故事：使用Babel向下兼容",id:"第二个故事使用babel向下兼容",depth:2},{text:"安装Babel",id:"安装babel",depth:3},{text:"第三个故事：使用Webpack打包和发布",id:"第三个故事使用webpack打包和发布",depth:2},{text:"env.mode",id:"envmode",depth:3},{text:"小结",id:"小结",depth:3}],title:"10.第十日：前端工程化",headingTitle:"10.第十日：前端工程化",frontmatter:{}}}}]);