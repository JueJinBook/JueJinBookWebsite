"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["14179"],{4678:function(n,e,r){r.r(e),r.d(e,{default:()=>a});var i=r(552676),l=r(740453);function s(n){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",h2:"h2",ul:"ul",li:"li",h3:"h3",strong:"strong",h4:"h4",ol:"ol",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,l.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"33常考算法题解析",children:["33.常考算法题解析",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#33常考算法题解析",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"这一章节依托于上一章节的内容，毕竟了解了数据结构我们才能写出更好的算法。"}),"\n",(0,i.jsxs)(e.p,{children:["对于大部分公司的面试来说，排序的内容已经足以应付了，由此为了更好的符合大众需求，排序的内容是最多的。当然如果你还想冲击更好的公司，那么整一个章节的内容都是需要掌握的。对于字节跳动这类十分看重算法的公司来说，这一章节是远远不够的，",(0,i.jsx)(e.a,{href:"https://book.douban.com/subject/6966465/",target:"_blank",rel:"noopener noreferrer",children:"剑指Offer"}),"应该是你更好的选择。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-!",children:"这一章节的内容信息量会很大，不适合在非电脑环境下阅读，请各位打开代码编辑器，一行行的敲代码，单纯阅读是学习不了算法的。\n"})}),"\n",(0,i.jsxs)(e.p,{children:["另外学习算法的时候，有一个可视化界面会相对减少点学习的难度，具体可以阅读 ",(0,i.jsx)(e.a,{href:"https://github.com/algorithm-visualizer/algorithm-visualizer",target:"_blank",rel:"noopener noreferrer",children:"algorithm-visualizer"})," 这个仓库。"]}),"\n",(0,i.jsxs)(e.h2,{id:"位运算",children:["位运算",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#位运算",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"在进入正题之前，我们先来学习一下位运算的内容。因为位运算在算法中很有用，速度可以比四则运算快很多。"}),"\n",(0,i.jsx)(e.p,{children:"在学习位运算之前应该知道十进制如何转二进制，二进制如何转十进制。这里说明下简单的计算方式"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["十进制 ",(0,i.jsx)(e.code,{children:"33"})," 可以看成是 ",(0,i.jsx)(e.code,{children:"32 + 1"})," ，并且 ",(0,i.jsx)(e.code,{children:"33"})," 应该是六位二进制的（因为 ",(0,i.jsx)(e.code,{children:"33"})," 近似 ",(0,i.jsx)(e.code,{children:"32"}),"，而 ",(0,i.jsx)(e.code,{children:"32"})," 是 2 的五次方，所以是六位），那么 十进制 ",(0,i.jsx)(e.code,{children:"33"})," 就是 ",(0,i.jsx)(e.code,{children:"100001"})," ，只要是 2 的次方，那么就是 1否则都为 0"]}),"\n",(0,i.jsxs)(e.li,{children:["那么二进制 ",(0,i.jsx)(e.code,{children:"100001"})," 同理，首位是 ",(0,i.jsx)(e.code,{children:"2^5"})," ，末位是 ",(0,i.jsx)(e.code,{children:"2^0"})," ，相加得出 33"]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"左移-",children:["左移 <<",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#左移-",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"10 << 1 // -> 20\n"})}),"\n",(0,i.jsxs)(e.p,{children:["左移就是将二进制全部往左移动，",(0,i.jsx)(e.code,{children:"10"})," 在二进制中表示为 ",(0,i.jsx)(e.code,{children:"1010"})," ，左移一位后变成 ",(0,i.jsx)(e.code,{children:"10100"})," ，转换为十进制也就是 20，所以基本可以把左移看成以下公式 ",(0,i.jsx)(e.code,{children:"a * (2 ^ b)"})]}),"\n",(0,i.jsxs)(e.h3,{id:"算数右移-",children:["算数右移 >>",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#算数右移-",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"10 >> 1 // -> 5\n"})}),"\n",(0,i.jsxs)(e.p,{children:["算数右移就是将二进制全部往右移动并去除多余的右边，",(0,i.jsx)(e.code,{children:"10"})," 在二进制中表示为 ",(0,i.jsx)(e.code,{children:"1010"})," ，右移一位后变成 ",(0,i.jsx)(e.code,{children:"101"})," ，转换为十进制也就是 5，所以基本可以把右移看成以下公式 ",(0,i.jsx)(e.code,{children:"int v = a / (2 ^ b)"})]}),"\n",(0,i.jsx)(e.p,{children:"右移很好用，比如可以用在二分算法中取中间值"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"13 >> 1 // -> 6\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"按位操作",children:["按位操作",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#按位操作",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"按位与"})}),"\n",(0,i.jsx)(e.p,{children:"每一位都为 1，结果才为 1"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"8 & 7 // -> 0\n// 1000 & 0111 -> 0000 -> 0\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"按位或"})}),"\n",(0,i.jsx)(e.p,{children:"其中一位为 1，结果就是 1"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"8 | 7 // -> 15\n// 1000 | 0111 -> 1111 -> 15\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"按位异或"})}),"\n",(0,i.jsx)(e.p,{children:"每一位都不同，结果才为 1"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"8 ^ 7 // -> 15\n8 ^ 8 // -> 0\n// 1000 ^ 0111 -> 1111 -> 15\n// 1000 ^ 1000 -> 0000 -> 0\n"})}),"\n",(0,i.jsx)(e.p,{children:"从以上代码中可以发现按位异或就是不进位加法"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"面试题"}),"：两个数不使用四则运算得出和"]}),"\n",(0,i.jsxs)(e.p,{children:["这道题中可以按位异或，因为按位异或就是不进位加法，",(0,i.jsx)(e.code,{children:"8 ^ 8 = 0"})," 如果进位了，就是 16 了，所以我们只需要将两个数进行异或操作，然后进位。那么也就是说两个二进制都是 1 的位置，左边应该有一个进位 1，所以可以得出以下公式 ",(0,i.jsx)(e.code,{children:"a + b = (a ^ b) + ((a & b) << 1)"})," ，然后通过迭代的方式模拟加法"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function sum(a, b) {\n    if (a == 0) return b\n    if (b == 0) return a\n    let newA = a ^ b\n    let newB = (a & b) << 1\n    return sum(newA, newB)\n}\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"排序",children:["排序",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#排序",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"以下两个函数是排序中会用到的通用函数，就不一一写了"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function checkArray(array) {\n    return Array.isArray(array)\n}\nfunction swap(array, left, right) {\n    let rightValue = array[right]\n    array[right] = array[left]\n    array[left] = rightValue\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"冒泡排序",children:["冒泡排序",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#冒泡排序",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["冒泡排序的原理如下，从第一个元素开始，把当前元素和下一个索引元素进行比较。如果当前元素大，那么就交换位置，重复操作直到比较到最后一个元素，那么此时最后一个元素就是该数组中最大的数。下一轮重复以上操作，但是此时最后一个元素已经是最大数了，所以不需要再比较最后一个元素，只需要比较到 ",(0,i.jsx)(e.code,{children:"length - 2"})," 的位置。"]}),"\n",(0,i.jsx)(e.p,{children:"以下是实现该算法的代码"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function bubble(array) {\n  checkArray(array);\n  for (let i = array.length - 1; i > 0; i--) {\n    // 从 0 到 `length - 1` 遍历\n    for (let j = 0; j < i; j++) {\n      if (array[j] > array[j + 1]) swap(array, j, j + 1)\n    }\n  }\n  return array;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["该算法的操作次数是一个等差数列 ",(0,i.jsx)(e.code,{children:"n + (n - 1) + (n - 2) + 1"})," ，去掉常数项以后得出时间复杂度是 O(n * n)"]}),"\n",(0,i.jsxs)(e.h3,{id:"插入排序",children:["插入排序",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#插入排序",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"插入排序的原理如下。第一个元素默认是已排序元素，取出下一个元素和当前元素比较，如果当前元素大就交换位置。那么此时第一个元素就是当前的最小数，所以下次取出操作从第三个元素开始，向前对比，重复之前的操作。"}),"\n",(0,i.jsx)(e.p,{children:"以下是实现该算法的代码"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function insertion(array) {\n  if (!checkArray(array)) return\n  for (let i = 1; i < array.length; i++) {\n    for (let j = i - 1; j >= 0 && array[j] > array[j + 1]; j--)\n      swap(array, j, j + 1);\n  }\n  return array;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["该算法的操作次数是一个等差数列 ",(0,i.jsx)(e.code,{children:"n + (n - 1) + (n - 2) + 1"})," ，去掉常数项以后得出时间复杂度是 O(n * n)"]}),"\n",(0,i.jsxs)(e.h3,{id:"选择排序",children:["选择排序",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#选择排序",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"选择排序的原理如下。遍历数组，设置最小值的索引为 0，如果取出的值比当前最小值小，就替换最小值索引，遍历完成后，将第一个元素和最小值索引上的值交换。如上操作后，第一个元素就是数组中的最小值，下次遍历就可以从索引 1 开始重复上述操作。"}),"\n",(0,i.jsx)(e.p,{children:"以下是实现该算法的代码"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function selection(array) {\n  if (!checkArray(array)) return\n  for (let i = 0; i < array.length - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < array.length; j++) {\n      minIndex = array[j] < array[minIndex] ? j : minIndex;\n    }\n    swap(array, i, minIndex);\n  }\n  return array;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["该算法的操作次数是一个等差数列 ",(0,i.jsx)(e.code,{children:"n + (n - 1) + (n - 2) + 1"})," ，去掉常数项以后得出时间复杂度是 O(n * n)"]}),"\n",(0,i.jsxs)(e.h3,{id:"归并排序",children:["归并排序",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#归并排序",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["归并排序的原理如下。递归的将数组两两分开直到最多包含两个元素，然后将数组排序合并，最终合并为排序好的数组。假设我有一组数组 ",(0,i.jsx)(e.code,{children:"[3, 1, 2, 8, 9, 7, 6]"}),"，中间数索引是 3，先排序数组 ",(0,i.jsx)(e.code,{children:"[3, 1, 2, 8]"})," 。在这个左边数组上，继续拆分直到变成数组包含两个元素（如果数组长度是奇数的话，会有一个拆分数组只包含一个元素）。然后排序数组 ",(0,i.jsx)(e.code,{children:"[3, 1]"})," 和 ",(0,i.jsx)(e.code,{children:"[2, 8]"})," ，然后再排序数组 ",(0,i.jsx)(e.code,{children:"[1, 3, 2, 8]"})," ，这样左边数组就排序完成，然后按照以上思路排序右边数组，最后将数组 ",(0,i.jsx)(e.code,{children:"[1, 2, 3, 8]"})," 和 ",(0,i.jsx)(e.code,{children:"[6, 7, 9]"})," 排序。"]}),"\n",(0,i.jsx)(e.p,{children:"以下是实现该算法的代码"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function sort(array) {\n  if (!checkArray(array)) return\n  mergeSort(array, 0, array.length - 1);\n  return array;\n}\n\nfunction mergeSort(array, left, right) {\n  // 左右索引相同说明已经只有一个数\n  if (left === right) return;\n  // 等同于 `left + (right - left) / 2`\n  // 相比 `(left + right) / 2` 来说更加安全，不会溢出\n  // 使用位运算是因为位运算比四则运算快\n  let mid = parseInt(left + ((right - left) >> 1));\n  mergeSort(array, left, mid);\n  mergeSort(array, mid + 1, right);\n\n  let help = [];\n  let i = 0;\n  let p1 = left;\n  let p2 = mid + 1;\n  while (p1 <= mid && p2 <= right) {\n    help[i++] = array[p1] < array[p2] ? array[p1++] : array[p2++];\n  }\n  while (p1 <= mid) {\n    help[i++] = array[p1++];\n  }\n  while (p2 <= right) {\n    help[i++] = array[p2++];\n  }\n  for (let i = 0; i < help.length; i++) {\n    array[left + i] = help[i];\n  }\n  return array;\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"以上算法使用了递归的思想。递归的本质就是压栈，每递归执行一次函数，就将该函数的信息（比如参数，内部的变量，执行到的行数）压栈，直到遇到终止条件，然后出栈并继续执行函数。对于以上递归函数的调用轨迹如下"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"mergeSort(data, 0, 6) // mid = 3\n  mergeSort(data, 0, 3) // mid = 1\n    mergeSort(data, 0, 1) // mid = 0\n      mergeSort(data, 0, 0) // 遇到终止，回退到上一步\n    mergeSort(data, 1, 1) // 遇到终止，回退到上一步\n    // 排序 p1 = 0, p2 = mid + 1 = 1\n    // 回退到 `mergeSort(data, 0, 3)` 执行下一个递归\n  mergeSort(2, 3) // mid = 2\n    mergeSort(3, 3) // 遇到终止，回退到上一步\n  // 排序 p1 = 2, p2 = mid + 1 = 3\n  // 回退到 `mergeSort(data, 0, 3)` 执行合并逻辑\n  // 排序 p1 = 0, p2 = mid + 1 = 2\n  // 执行完毕回退\n  // 左边数组排序完毕，右边也是如上轨迹\n"})}),"\n",(0,i.jsxs)(e.p,{children:["该算法的操作次数是可以这样计算：递归了两次，每次数据量是数组的一半，并且最后把整个数组迭代了一次，所以得出表达式 ",(0,i.jsx)(e.code,{children:"2T(N / 2) + T(N)"})," （T 代表时间，N 代表数据量）。根据该表达式可以套用 ",(0,i.jsx)(e.a,{href:"https://www.wikiwand.com/zh-hans/%E4%B8%BB%E5%AE%9A%E7%90%86",target:"_blank",rel:"noopener noreferrer",children:"该公式"})," 得出时间复杂度为 ",(0,i.jsx)(e.code,{children:"O(N * logN)"})]}),"\n",(0,i.jsxs)(e.h3,{id:"快排",children:["快排",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#快排",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"快排的原理如下。随机选取一个数组中的值作为基准值，从左至右取值与基准值对比大小。比基准值小的放数组左边，大的放右边，对比完成后将基准值和第一个比基准值大的值交换位置。然后将数组以基准值的位置分为两部分，继续递归以上操作。"}),"\n",(0,i.jsx)(e.p,{children:"以下是实现该算法的代码"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function sort(array) {\n  if (!checkArray(array)) return\n  quickSort(array, 0, array.length - 1);\n  return array;\n}\n\nfunction quickSort(array, left, right) {\n  if (left < right) {\n    swap(array, , right)\n    // 随机取值，然后和末尾交换，这样做比固定取一个位置的复杂度略低\n    let indexs = part(array, parseInt(Math.random() * (right - left + 1)) + left, right);\n    quickSort(array, left, indexs[0]);\n    quickSort(array, indexs[1] + 1, right);\n  }\n}\nfunction part(array, left, right) {\n  let less = left - 1;\n  let more = right;\n  while (left < more) {\n    if (array[left] < array[right]) {\n      // 当前值比基准值小，`less` 和 `left` 都加一\n	   ++less;\n       ++left;\n    } else if (array[left] > array[right]) {\n      // 当前值比基准值大，将当前值和右边的值交换\n      // 并且不改变 `left`，因为当前换过来的值还没有判断过大小\n      swap(array, --more, left);\n    } else {\n      // 和基准值相同，只移动下标\n      left++;\n    }\n  }\n  // 将基准值和比基准值大的第一个值交换位置\n  // 这样数组就变成 `[比基准值小, 基准值, 比基准值大]`\n  swap(array, right, more);\n  return [less, more];\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"该算法的复杂度和归并排序是相同的，但是额外空间复杂度比归并排序少，只需 O(logN)，并且相比归并排序来说，所需的常数时间也更少。"}),"\n",(0,i.jsxs)(e.h4,{id:"面试题",children:["面试题",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#面试题",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Sort Colors"}),"：该题目来自 ",(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/sort-colors/description/",target:"_blank",rel:"noopener noreferrer",children:"LeetCode"}),"，题目需要我们将 ",(0,i.jsx)(e.code,{children:"[2,0,2,1,1,0]"})," 排序成 ",(0,i.jsx)(e.code,{children:"[0,0,1,1,2,2]"})," ，这个问题就可以使用三路快排的思想。"]}),"\n",(0,i.jsx)(e.p,{children:"以下是代码实现"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"var sortColors = function(nums) {\n  let left = -1;\n  let right = nums.length;\n  let i = 0;\n  // 下标如果遇到 right，说明已经排序完成\n  while (i < right) {\n    if (nums[i] == 0) {\n      swap(nums, i++, ++left);\n    } else if (nums[i] == 1) {\n      i++;\n    } else {\n      swap(nums, i, --right);\n    }\n  }\n};\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Kth Largest Element in an Array"}),"：该题目来自 ",(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/kth-largest-element-in-an-array/description/",target:"_blank",rel:"noopener noreferrer",children:"LeetCode"}),"，题目需要找出数组中第 K 大的元素，这问题也可以使用快排的思路。并且因为是找出第 K 大元素，所以在分离数组的过程中，可以找出需要的元素在哪边，然后只需要排序相应的一边数组就好。"]}),"\n",(0,i.jsx)(e.p,{children:"以下是代码实现"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"var findKthLargest = function(nums, k) {\n  let l = 0\n  let r = nums.length - 1\n  // 得出第 K 大元素的索引位置\n  k = nums.length - k\n  while (l < r) {\n    // 分离数组后获得比基准树大的第一个元素索引\n    let index = part(nums, l, r)\n    // 判断该索引和 k 的大小\n    if (index < k) {\n      l = index + 1\n    } else if (index > k) {\n      r = index - 1\n    } else {\n      break\n    }\n  }\n  return nums[k]\n};\nfunction part(array, left, right) {\n  let less = left - 1;\n  let more = right;\n  while (left < more) {\n    if (array[left] < array[right]) {\n	   ++less;\n       ++left;\n    } else if (array[left] > array[right]) {\n      swap(array, --more, left);\n    } else {\n      left++;\n    }\n  }\n  swap(array, right, more);\n  return more;\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"堆排序",children:["堆排序",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#堆排序",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"堆排序利用了二叉堆的特性来做，二叉堆通常用数组表示，并且二叉堆是一颗完全二叉树（所有叶节点（最底层的节点）都是从左往右顺序排序，并且其他层的节点都是满的）。二叉堆又分为大根堆与小根堆。"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"大根堆是某个节点的所有子节点的值都比他小"}),"\n",(0,i.jsx)(e.li,{children:"小根堆是某个节点的所有子节点的值都比他大"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["堆排序的原理就是组成一个大根堆或者小根堆。以小根堆为例，某个节点的左边子节点索引是 ",(0,i.jsx)(e.code,{children:"i * 2 + 1"}),"，右边是 ",(0,i.jsx)(e.code,{children:"i * 2 + 2"}),"，父节点是 ",(0,i.jsx)(e.code,{children:"(i - 1) /2"}),"。"]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"首先遍历数组，判断该节点的父节点是否比他小，如果小就交换位置并继续判断，直到他的父节点比他大"}),"\n",(0,i.jsx)(e.li,{children:"重新以上操作 1，直到数组首位是最大值"}),"\n",(0,i.jsx)(e.li,{children:"然后将首位和末尾交换位置并将数组长度减一，表示数组末尾已是最大值，不需要再比较大小"}),"\n",(0,i.jsx)(e.li,{children:"对比左右节点哪个大，然后记住大的节点的索引并且和父节点对比大小，如果子节点大就交换位置"}),"\n",(0,i.jsx)(e.li,{children:"重复以上操作 3 - 4 直到整个数组都是大根堆。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"以下是实现该算法的代码"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function heap(array) {\n  if (!checkArray(array)) return\n  // 将最大值交换到首位\n  for (let i = 0; i < array.length; i++) {\n    heapInsert(array, i);\n  }\n  let size = array.length;\n  // 交换首位和末尾\n  swap(array, 0, --size);\n  while (size > 0) {\n    heapify(array, 0, size);\n    swap(array, 0, --size);\n  }\n  return array;\n}\n\nfunction heapInsert(array, index) {\n  // 如果当前节点比父节点大，就交换\n  while (array[index] > array[parseInt((index - 1) / 2)]) {\n    swap(array, index, parseInt((index - 1) / 2));\n    // 将索引变成父节点\n    index = parseInt((index - 1) / 2);\n  }\n}\nfunction heapify(array, index, size) {\n  let left = index * 2 + 1;\n  while (left < size) {\n    // 判断左右节点大小\n    let largest =\n      left + 1 < size && array[left] < array[left + 1] ? left + 1 : left;\n    // 判断子节点和父节点大小\n    largest = array[index] < array[largest] ? largest : index;\n    if (largest === index) break;\n    swap(array, index, largest);\n    index = largest;\n    left = index * 2 + 1;\n  }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"以上代码实现了小根堆，如果需要实现大根堆，只需要把节点对比反一下就好。"}),"\n",(0,i.jsx)(e.p,{children:"该算法的复杂度是 O(logN)"}),"\n",(0,i.jsxs)(e.h3,{id:"系统自带排序实现",children:["系统自带排序实现",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#系统自带排序实现",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"每个语言的排序内部实现都是不同的。"}),"\n",(0,i.jsxs)(e.p,{children:["对于 JS 来说，数组长度大于 10 会采用快排，否则使用插入排序 ",(0,i.jsx)(e.a,{href:"https://github.com/v8/v8/blob/ad82a40509c5b5b4680d4299c8f08d6c6d31af3c/src/js/array.js#L760:7",target:"_blank",rel:"noopener noreferrer",children:"源码实现"})," 。选择插入排序是因为虽然时间复杂度很差，但是在数据量很小的情况下和 ",(0,i.jsx)(e.code,{children:"O(N * logN)  "}),"相差无几，然而插入排序需要的常数时间很小，所以相对别的排序来说更快。"]}),"\n",(0,i.jsx)(e.p,{children:"对于 Java 来说，还会考虑内部的元素的类型。对于存储对象的数组来说，会采用稳定性好的算法。稳定性的意思就是对于相同值来说，相对顺序不能改变。"}),"\n",(0,i.jsxs)(e.h2,{id:"链表",children:["链表",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#链表",children:"#"})]}),"\n",(0,i.jsxs)(e.h3,{id:"反转单向链表",children:["反转单向链表",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#反转单向链表",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["该题目来自 ",(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/reverse-linked-list/description/",target:"_blank",rel:"noopener noreferrer",children:"LeetCode"}),"，题目需要将一个单向链表反转。思路很简单，使用三个变量分别表示当前节点和当前节点的前后节点，虽然这题很简单，但是却是一道面试常考题"]}),"\n",(0,i.jsx)(e.p,{children:"以下是实现该算法的代码"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"var reverseList = function(head) {\n    // 判断下变量边界问题\n    if (!head || !head.next) return head\n    // 初始设置为空，因为第一个节点反转后就是尾部，尾部节点指向 null\n    let pre = null\n    let current = head\n    let next\n    // 判断当前节点是否为空\n    // 不为空就先获取当前节点的下一节点\n    // 然后把当前节点的 next 设为上一个节点\n    // 然后把 current 设为下一个节点，pre 设为当前节点\n    while(current) {\n        next = current.next\n        current.next = pre\n        pre = current\n        current = next\n    }\n    return pre\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"树",children:["树",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#树",children:"#"})]}),"\n",(0,i.jsxs)(e.h3,{id:"二叉树的先序中序后序遍历",children:["二叉树的先序，中序，后序遍历",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#二叉树的先序中序后序遍历",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"先序遍历表示先访问根节点，然后访问左节点，最后访问右节点。"}),"\n",(0,i.jsx)(e.p,{children:"中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。"}),"\n",(0,i.jsx)(e.p,{children:"后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。"}),"\n",(0,i.jsxs)(e.h4,{id:"递归实现",children:["递归实现",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#递归实现",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"递归实现相当简单，代码如下"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function TreeNode(val) {\n  this.val = val;\n  this.left = this.right = null;\n}\nvar traversal = function(root) {\n  if (root) {\n    // 先序\n    console.log(root); \n    traversal(root.left);\n    // 中序\n    // console.log(root); \n    traversal(root.right);\n    // 后序\n    // console.log(root);\n  }\n};\n"})}),"\n",(0,i.jsx)(e.p,{children:"对于递归的实现来说，只需要理解每个节点都会被访问三次就明白为什么这样实现了。"}),"\n",(0,i.jsxs)(e.h4,{id:"非递归实现",children:["非递归实现",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#非递归实现",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"非递归实现使用了栈的结构，通过栈的先进后出模拟递归实现。"}),"\n",(0,i.jsx)(e.p,{children:"以下是先序遍历代码实现"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function pre(root) {\n  if (root) {\n    let stack = [];\n    // 先将根节点 push\n    stack.push(root);\n    // 判断栈中是否为空\n    while (stack.length > 0) {\n      // 弹出栈顶元素\n      root = stack.pop();\n      console.log(root);\n      // 因为先序遍历是先左后右，栈是先进后出结构\n      // 所以先 push 右边再 push 左边\n      if (root.right) {\n        stack.push(root.right);\n      }\n      if (root.left) {\n        stack.push(root.left);\n      }\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"以下是中序遍历代码实现"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function mid(root) {\n  if (root) {\n    let stack = [];\n    // 中序遍历是先左再根最后右\n    // 所以首先应该先把最左边节点遍历到底依次 push 进栈\n    // 当左边没有节点时，就打印栈顶元素，然后寻找右节点\n    // 对于最左边的叶节点来说，可以把它看成是两个 null 节点的父节点\n    // 左边打印不出东西就把父节点拿出来打印，然后再看右节点\n    while (stack.length > 0 || root) {\n      if (root) {\n        stack.push(root);\n        root = root.left;\n      } else {\n        root = stack.pop();\n        console.log(root);\n        root = root.right;\n      }\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"以下是后序遍历代码实现，该代码使用了两个栈来实现遍历，相比一个栈的遍历来说要容易理解很多"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function pos(root) {\n  if (root) {\n    let stack1 = [];\n    let stack2 = [];\n    // 后序遍历是先左再右最后根\n	// 所以对于一个栈来说，应该先 push 根节点\n    // 然后 push 右节点，最后 push 左节点\n    stack1.push(root);\n    while (stack1.length > 0) {\n      root = stack1.pop();\n      stack2.push(root);\n      if (root.left) {\n        stack1.push(root.left);\n      }\n      if (root.right) {\n        stack1.push(root.right);\n      }\n    }\n    while (stack2.length > 0) {\n      console.log(s2.pop());\n    }\n  }\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"中序遍历的前驱后继节点",children:["中序遍历的前驱后继节点",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#中序遍历的前驱后继节点",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["实现这个算法的前提是节点有一个 ",(0,i.jsx)(e.code,{children:"parent"})," 的指针指向父节点，根节点指向 ",(0,i.jsx)(e.code,{children:"null"})," 。"]}),"\n",(0,i.jsxs)(e.p,{children:["如图所示，该树的中序遍历结果是 ",(0,i.jsx)(e.code,{children:"4, 2, 5, 1, 6, 3, 7"})]}),"\n",(0,i.jsxs)(e.h4,{id:"前驱节点",children:["前驱节点",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前驱节点",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["对于节点 ",(0,i.jsx)(e.code,{children:"2"})," 来说，他的前驱节点就是 ",(0,i.jsx)(e.code,{children:"4"})," ，按照中序遍历原则，可以得出以下结论"]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["如果选取的节点的左节点不为空，就找该左节点最右的节点。对于节点 ",(0,i.jsx)(e.code,{children:"1"})," 来说，他有左节点 ",(0,i.jsx)(e.code,{children:"2"})," ，那么节点 ",(0,i.jsx)(e.code,{children:"2"})," 的最右节点就是 ",(0,i.jsx)(e.code,{children:"5"})]}),"\n",(0,i.jsxs)(e.li,{children:["如果左节点为空，且目标节点是父节点的右节点，那么前驱节点为父节点。对于节点 ",(0,i.jsx)(e.code,{children:"5"})," 来说，没有左节点，且是节点 ",(0,i.jsx)(e.code,{children:"2"})," 的右节点，所以节点 ",(0,i.jsx)(e.code,{children:"2"})," 是前驱节点"]}),"\n",(0,i.jsxs)(e.li,{children:["如果左节点为空，且目标节点是父节点的左节点，向上寻找到第一个是父节点的右节点的节点。对于节点 ",(0,i.jsx)(e.code,{children:"6"})," 来说，没有左节点，且是节点 ",(0,i.jsx)(e.code,{children:"3"})," 的左节点，所以向上寻找到节点 ",(0,i.jsx)(e.code,{children:"1"})," ，发现节点 ",(0,i.jsx)(e.code,{children:"3"})," 是节点 ",(0,i.jsx)(e.code,{children:"1"})," 的右节点，所以节点 ",(0,i.jsx)(e.code,{children:"1"})," 是节点 ",(0,i.jsx)(e.code,{children:"6"})," 的前驱节点"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"以下是算法实现"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function predecessor(node) {\n  if (!node) return \n  // 结论 1\n  if (node.left) {\n    return getRight(node.left)\n  } else {\n    let parent = node.parent\n    // 结论 2 3 的判断\n    while(parent && parent.right === node) {\n      node = parent\n      parent = node.parent\n    }\n    return parent\n  }\n}\nfunction getRight(node) {\n  if (!node) return \n  node = node.right\n  while(node) node = node.right\n  return node\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"后继节点",children:["后继节点",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#后继节点",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["对于节点 ",(0,i.jsx)(e.code,{children:"2"})," 来说，他的后继节点就是 ",(0,i.jsx)(e.code,{children:"5"})," ，按照中序遍历原则，可以得出以下结论"]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["如果有右节点，就找到该右节点的最左节点。对于节点 ",(0,i.jsx)(e.code,{children:"1"})," 来说，他有右节点 ",(0,i.jsx)(e.code,{children:"3"})," ，那么节点 ",(0,i.jsx)(e.code,{children:"3"})," 的最左节点就是 ",(0,i.jsx)(e.code,{children:"6"})]}),"\n",(0,i.jsxs)(e.li,{children:["如果没有右节点，就向上遍历直到找到一个节点是父节点的左节点。对于节点 ",(0,i.jsx)(e.code,{children:"5"})," 来说，没有右节点，就向上寻找到节点 ",(0,i.jsx)(e.code,{children:"2"})," ，该节点是父节点 ",(0,i.jsx)(e.code,{children:"1"})," 的左节点，所以节点 ",(0,i.jsx)(e.code,{children:"1"})," 是后继节点"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"以下是算法实现"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function successor(node) {\n  if (!node) return \n  // 结论 1\n  if (node.right) {\n    return getLeft(node.right)\n  } else {\n    // 结论 2\n    let parent = node.parent\n    // 判断 parent 为空\n    while(parent && parent.left === node) {\n      node = parent\n      parent = node.parent\n    }\n    return parent\n  }\n}\nfunction getLeft(node) {\n  if (!node) return \n  node = node.left\n  while(node) node = node.left\n  return node\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"树的深度",children:["树的深度",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#树的深度",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"树的最大深度"}),"：该题目来自 ",(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/description/",target:"_blank",rel:"noopener noreferrer",children:"Leetcode"}),"，题目需要求出一颗二叉树的最大深度"]}),"\n",(0,i.jsx)(e.p,{children:"以下是算法实现"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"var maxDepth = function(root) {\n    if (!root) return 0 \n    return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1\n};\n"})}),"\n",(0,i.jsx)(e.p,{children:"对于该递归函数可以这样理解：一旦没有找到节点就会返回 0，每弹出一次递归函数就会加一，树有三层就会得到3。"}),"\n",(0,i.jsxs)(e.h2,{id:"动态规划",children:["动态规划",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#动态规划",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"动态规划背后的基本思想非常简单。就是将一个问题拆分为子问题，一般来说这些子问题都是非常相似的，那么我们可以通过只解决一次每个子问题来达到减少计算量的目的。"}),"\n",(0,i.jsx)(e.p,{children:"一旦得出每个子问题的解，就存储该结果以便下次使用。"}),"\n",(0,i.jsxs)(e.h3,{id:"斐波那契数列",children:["斐波那契数列",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#斐波那契数列",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"斐波那契数列就是从 0 和 1 开始，后面的数都是前两个数之和"}),"\n",(0,i.jsx)(e.p,{children:"0，1，1，2，3，5，8，13，21，34，55，89...."}),"\n",(0,i.jsx)(e.p,{children:"那么显然易见，我们可以通过递归的方式来完成求解斐波那契数列"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function fib(n) {\n  if (n < 2 && n >= 0) return n\n  return fib(n - 1) + fib(n - 2)\n}\nfib(10)\n"})}),"\n",(0,i.jsx)(e.p,{children:"以上代码已经可以完美的解决问题。但是以上解法却存在很严重的性能问题，当 n 越大的时候，需要的时间是指数增长的，这时候就可以通过动态规划来解决这个问题。"}),"\n",(0,i.jsx)(e.p,{children:"动态规划的本质其实就是两点"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"自底向上分解子问题"}),"\n",(0,i.jsx)(e.li,{children:"通过变量存储已经计算过的解"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"根据上面两点，我们的斐波那契数列的动态规划思路也就出来了"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"斐波那契数列从 0 和 1 开始，那么这就是这个子问题的最底层"}),"\n",(0,i.jsx)(e.li,{children:"通过数组来存储每一位所对应的斐波那契数列的值"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function fib(n) {\n  let array = new Array(n + 1).fill(null)\n  array[0] = 0\n  array[1] = 1\n  for (let i = 2; i <= n; i++) {\n    array[i] = array[i - 1] + array[i - 2]\n  }\n  return array[n]\n}\nfib(10)\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"0---1背包问题",children:["0 - 1背包问题",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#0---1背包问题",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"该问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。每个问题只能放入至多一次。"}),"\n",(0,i.jsx)(e.p,{children:"假设我们有以下物品"}),"\n",(0,i.jsxs)(e.table,{children:["\n",(0,i.jsxs)(e.thead,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.th,{align:"center",children:"物品 ID / 重量"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"价值"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.tbody,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"1"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"2"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"7"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"12"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"对于一个总容量为 5 的背包来说，我们可以放入重量 2 和 3 的物品来达到背包内的物品总价值最高。"}),"\n",(0,i.jsx)(e.p,{children:"对于这个问题来说，子问题就两个，分别是放物品和不放物品，可以通过以下表格来理解子问题"}),"\n",(0,i.jsxs)(e.table,{children:["\n",(0,i.jsxs)(e.thead,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.th,{align:"center",children:"物品 ID / 剩余容量"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"0"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"1"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"2"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"4"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"5"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.tbody,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"1"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"0"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"2"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"0"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"7"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"10"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"10"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"10"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"0"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"7"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"12"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"15"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"19"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"直接来分析能放三种物品的情况，也就是最后一行"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"当容量少于 3 时，只取上一行对应的数据，因为当前容量不能容纳物品 3"}),"\n",(0,i.jsxs)(e.li,{children:["当容量 为 3 时，考虑两种情况，分别为放入物品 3 和不放物品 3","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"不放物品 3 的情况下，总价值为 10"}),"\n",(0,i.jsx)(e.li,{children:"放入物品 3 的情况下，总价值为 12，所以应该放入物品 3"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["当容量 为 4 时，考虑两种情况，分别为放入物品 3 和不放物品 3","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"不放物品 3 的情况下，总价值为 10"}),"\n",(0,i.jsx)(e.li,{children:"放入物品 3 的情况下，和放入物品 1 的价值相加，得出总价值为 15，所以应该放入物品 3"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["当容量 为 5 时，考虑两种情况，分别为放入物品 3 和不放物品 3","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"不放物品 3 的情况下，总价值为 10"}),"\n",(0,i.jsx)(e.li,{children:"放入物品 3 的情况下，和放入物品 2 的价值相加，得出总价值为 19，所以应该放入物品 3"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"以下代码对照上表更容易理解"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"/**\n * @param {*} w 物品重量\n * @param {*} v 物品价值\n * @param {*} C 总容量\n * @returns\n */\nfunction knapsack(w, v, C) {\n  let length = w.length\n  if (length === 0) return 0\n\n  // 对照表格，生成的二维数组，第一维代表物品，第二维代表背包剩余容量\n  // 第二维中的元素代表背包物品总价值\n  let array = new Array(length).fill(new Array(C + 1).fill(null))\n\n  // 完成底部子问题的解\n  for (let i = 0; i <= C; i++) {\n    // 对照表格第一行， array[0] 代表物品 1\n    // i 代表剩余总容量\n    // 当剩余总容量大于物品 1 的重量时，记录下背包物品总价值，否则价值为 0\n    array[0][i] = i >= w[0] ? v[0] : 0\n  }\n\n  // 自底向上开始解决子问题，从物品 2 开始\n  for (let i = 1; i < length; i++) {\n    for (let j = 0; j <= C; j++) {\n      // 这里求解子问题，分别为不放当前物品和放当前物品\n      // 先求不放当前物品的背包总价值，这里的值也就是对应表格中上一行对应的值\n      array[i][j] = array[i - 1][j]\n      // 判断当前剩余容量是否可以放入当前物品\n      if (j >= w[i]) {\n        // 可以放入的话，就比大小\n        // 放入当前物品和不放入当前物品，哪个背包总价值大\n        array[i][j] = Math.max(array[i][j], v[i] + array[i - 1][j - w[i]])\n      }\n    }\n  }\n  return array[length - 1][C]\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"最长递增子序列",children:["最长递增子序列",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#最长递增子序列",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"最长递增子序列意思是在一组数字中，找出最长一串递增的数字，比如"}),"\n",(0,i.jsx)(e.p,{children:"0, 3, 4, 17, 2, 8, 6, 10"}),"\n",(0,i.jsx)(e.p,{children:"对于以上这串数字来说，最长递增子序列就是 0, 3, 4, 8, 10，可以通过以下表格更清晰的理解"}),"\n",(0,i.jsxs)(e.table,{children:["\n",(0,i.jsxs)(e.thead,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.th,{align:"center",children:"数字"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"0"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"4"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"17"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"2"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"8"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"6"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"10"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.tbody,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"长度"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"1"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"2"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"3"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"4"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"2"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"4"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"4"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"5"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"通过以上表格可以很清晰的发现一个规律，找出刚好比当前数字小的数，并且在小的数组成的长度基础上加一。"}),"\n",(0,i.jsx)(e.p,{children:"这个问题的动态思路解法很简单，直接上代码"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"function lis(n) {\n  if (n.length === 0) return 0\n  // 创建一个和参数相同大小的数组，并填充值为 1\n  let array = new Array(n.length).fill(1)\n  // 从索引 1 开始遍历，因为数组已经所有都填充为 1 了\n  for (let i = 1; i < n.length; i++) {\n    // 从索引 0 遍历到 i\n    // 判断索引 i 上的值是否大于之前的值\n    for (let j = 0; j < i; j++) {\n      if (n[i] > n[j]) {\n        array[i] = Math.max(array[i], 1 + array[j])\n      }\n    }\n  }\n  let res = 1\n  for (let i = 0; i < array.length; i++) {\n    res = Math.max(res, array[i])\n  }\n  return res\n}\n"})})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,l.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(s,{...n})}):s(n)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%2F33.%E5%B8%B8%E8%80%83%E7%AE%97%E6%B3%95%E9%A2%98%E8%A7%A3%E6%9E%90.md"]={toc:[{text:"位运算",id:"位运算",depth:2},{text:"左移 <<",id:"左移-",depth:3},{text:"算数右移 >>",id:"算数右移-",depth:3},{text:"按位操作",id:"按位操作",depth:3},{text:"排序",id:"排序",depth:2},{text:"冒泡排序",id:"冒泡排序",depth:3},{text:"插入排序",id:"插入排序",depth:3},{text:"选择排序",id:"选择排序",depth:3},{text:"归并排序",id:"归并排序",depth:3},{text:"快排",id:"快排",depth:3},{text:"面试题",id:"面试题",depth:4},{text:"堆排序",id:"堆排序",depth:3},{text:"系统自带排序实现",id:"系统自带排序实现",depth:3},{text:"链表",id:"链表",depth:2},{text:"反转单向链表",id:"反转单向链表",depth:3},{text:"树",id:"树",depth:2},{text:"二叉树的先序，中序，后序遍历",id:"二叉树的先序中序后序遍历",depth:3},{text:"递归实现",id:"递归实现",depth:4},{text:"非递归实现",id:"非递归实现",depth:4},{text:"中序遍历的前驱后继节点",id:"中序遍历的前驱后继节点",depth:3},{text:"前驱节点",id:"前驱节点",depth:4},{text:"后继节点",id:"后继节点",depth:4},{text:"树的深度",id:"树的深度",depth:3},{text:"动态规划",id:"动态规划",depth:2},{text:"斐波那契数列",id:"斐波那契数列",depth:3},{text:"0 - 1背包问题",id:"0---1背包问题",depth:3},{text:"最长递增子序列",id:"最长递增子序列",depth:3}],title:"33.常考算法题解析",headingTitle:"33.常考算法题解析",frontmatter:{}}}}]);