"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["43395"],{88686:function(n,e,t){n.exports=t.p+"static/image/7860e4162a98cf423618057eb1680f2e.9b10500d.gif"},752170:function(n,e,t){t.r(e),t.d(e,{default:()=>I});var o=t(552676),s=t(740453);let i=t.p+"static/image/115ee90f6efffc67ca60d0931bc760de.5073562b.gif",a=t.p+"static/image/41fe7857ed08002e92260fc5a1eb6ca7.7a7462ad.webp",c=t.p+"static/image/0b0048b777ee82411eed7c41e2574739.05f3b0de.gif",r=t.p+"static/image/8361717d9f6798ee9c6d30fe5370e316.02f54033.webp",p=t.p+"static/image/1e3d93124a313abdff5e4adba8e38a19.942fd683.gif",l=t.p+"static/image/a4d6cd486cde79e36467354c51b4596d.6e115e10.webp",d=t.p+"static/image/c72a548f367e7d3f17d9008a3f5de2f1.28e281a0.webp",m=t.p+"static/image/492139512c6c6c4073baeae6084d4789.9cb13730.gif",g=t.p+"static/image/977401e317ba9126a4b8fcc0d913407d.5b73b237.webp",u=t.p+"static/image/2be8a0f962e9fcdd140c1cac74430340.2aca600c.webp",f=t.p+"static/image/21319514646856f56df1d11f9d140e3a.ae509ea8.webp",v=t.p+"static/image/67bbbf1d1274215de7725e6cd32d0b80.5ae1d1a0.webp";var h=t(88686);let x=t.p+"static/image/3bb0f0d76697d6e8c4202e54ad345d53.11d07ad2.webp",C=t.p+"static/image/cb17cf5714c442f66a5df12321047e62.4b3f8d83.webp",j=t.p+"static/image/e36486bda362208971c452d8542440df.b5988bb2.gif",b=t.p+"static/image/418f80f2f7855cd66c1bc555aca46e16.77059a9f.webp",S=t.p+"static/image/fb569c52f39a8829d5125caecae3c932.4a362420.webp",M=t.p+"static/image/1e30bbc469fec917c6f665c307ccb808.a0c34e0b.webp",k=t.p+"static/image/0fce8ad961633eabae4defd379319059.71654dd5.gif",w=t.p+"static/image/cb6cd28eae2fac55f52468693718d6f9.ace51dbe.webp",y=t.p+"static/image/84ad9845c788069cb3196816679da985.1d6f03f5.webp",E=t.p+"static/image/fa33fd4bd35940c9e39b2c20faca2b39.321b237c.gif",A=t.p+"static/image/439272982ef5cf28774a4d606666601d.8466fc17.webp",N=t.p+"static/image/e2ae5e978c247a38787ca432381ec8d7.82bfa4d9.webp",T=t.p+"static/image/ec3e7ffbfcb43ccdfd63c807b5a90d93.992be638.webp",O=t.p+"static/image/4aa82261fe5a868a5851179f607cbbcb.deccd74d.webp",P=t.p+"static/image/c99832349c51abffb81364692a629139.bf200637.webp";function L(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"第74章低代码编辑器动作弹窗",children:["第74章—低代码编辑器：动作弹窗",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第74章低代码编辑器动作弹窗",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"\uFEFF上节我们实现了事件绑定，并内置了两个动作："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:P,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:O,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"我们没用弹窗展示动作："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:T,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样当动作多了就不好展示了。"}),"\n",(0,o.jsx)(e.p,{children:"我们改一下："}),"\n",(0,o.jsx)(e.p,{children:"新建 Setting/ActionModal.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { Modal, Segmented } from "antd";\nimport { useState } from "react";\nimport { GoToLink } from "./actions/GoToLink";\nimport { ComponentEvent } from "../../stores/component-config";\nimport { ShowMessage } from "./actions/ShowMessage";\n\ninterface ActionModalProps {\n    visible: boolean\n    eventConfig: ComponentEvent\n    handleOk: () => void\n    handleCancel: () => void\n}\n\nexport function ActionModal(props: ActionModalProps) {\n    const {\n        visible,\n        handleOk,\n        eventConfig,\n        handleCancel\n    } = props;\n\n    const [key, setKey] = useState<string>(\'访问链接\');\n\n    return  <Modal \n        title="事件动作配置" \n        width={800}\n        open={visible}\n        okText="添加"\n        cancelText="取消"\n        onOk={handleOk}\n        onCancel={handleCancel}\n    >\n        <div className="h-[500px]">\n            <Segmented value={key} onChange={setKey} block options={[\'访问链接\', \'消息提示\', \'自定义 JS\']} />\n            {\n                key === \'访问链接\' && <GoToLink event={eventConfig}/>\n            }\n            {\n                key === \'消息提示\' && <ShowMessage event={eventConfig}/>\n            }\n        </div>\n    </Modal>\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"就是展示所有的动作，当选择某个动作，输入内容后，修改对应的 event 配置。"}),"\n",(0,o.jsx)(e.p,{children:"在 ComponentEvent 里调用下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:N,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:A,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"加一个 state 来控制弹窗打开关闭。"}),"\n",(0,o.jsx)(e.p,{children:"再加一个 state 来记录当前的 event 配置，当点击 label 的添加动作按钮的时候，打开弹窗，记录当前 event"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Collapse, Input, Select, CollapseProps, Button} from 'antd';\nimport { useComponetsStore } from '../../stores/components';\nimport { useComponentConfigStore } from '../../stores/component-config';\nimport type { ComponentEvent } from '../../stores/component-config';\nimport { ActionModal } from './ActionModal';\nimport { useState } from 'react';\n\nexport function ComponentEvent() {\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n    const [actionModalOpen, setActionModalOpen] = useState(false);\n    const [curEvent, setCurEvent] = useState<ComponentEvent>();\n\n    if (!curComponent) return null;\n\n    const items: CollapseProps['items'] = (componentConfig[curComponent.name].events || []).map(event => {\n        return {\n            key: event.name,\n            label: <div className='flex justify-between leading-[30px]'>\n                {event.label}\n                <Button type=\"primary\" onClick={() => {\n                    setCurEvent(event);\n                    setActionModalOpen(true);\n                }}>添加动作</Button>\n            </div>,\n            children: <div>\n                \n            </div>\n        }\n    })\n\n    return <div className='px-[10px]'>\n        <Collapse className='mb-[10px]' items={items}/>\n        <ActionModal visible={actionModalOpen} eventConfig={curEvent!} handleOk={() => {\n            setActionModalOpen(false)\n        }} handleCancel={() => {\n            setActionModalOpen(false)\n        }}/>\n    </div>\n}\n\n"})}),"\n",(0,o.jsx)(e.p,{children:"试一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:E,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"展示出来了，就是有点小。"}),"\n",(0,o.jsx)(e.p,{children:"我们把表单改大一点："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:y,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:w,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { Input } from "antd"\nimport { ComponentEvent } from "../../../stores/component-config";\nimport { useComponetsStore } from "../../../stores/components";\nimport TextArea from "antd/es/input/TextArea";\n\nexport function GoToLink(props: { event: ComponentEvent }) {\n    const { event } = props;\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n\n    function urlChange(eventName: string, value: string) {\n        if (!curComponentId) return;\n\n        updateComponentProps(curComponentId, {\n          [eventName]: {\n            ...curComponent?.props?.[eventName],\n            url: value\n          }\n        })\n    }\n\n    return <div className=\'mt-[40px]\'>\n        <div className=\'flex items-center gap-[10px]\'>\n            <div>跳转链接</div>\n            <div>\n                <TextArea\n                    style={{height: 200, width: 500, border: \'1px solid #000\'}}\n                    onChange={(e) => { urlChange(event.name, e.target.value) }}\n                    value={curComponent?.props?.[event.name]?.url}\n                />\n            </div>\n        </div>\n    </div>\n}\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Input, Select } from \"antd\"\nimport { ComponentEvent } from \"../../../stores/component-config\";\nimport { useComponetsStore } from \"../../../stores/components\";\n\nexport function ShowMessage(props: { event: ComponentEvent }) {\n    const { event } = props;\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n\n    function messageTypeChange(eventName: string, value: string) {\n        if (!curComponentId) return;\n\n        updateComponentProps(curComponentId, {\n          [eventName]: {\n            ...curComponent?.props?.[eventName],\n            config: {\n              ...curComponent?.props?.[eventName]?.config,\n              type: value,\n            },\n          }\n        })\n      }\n    \n    function messageTextChange(eventName: string, value: string) {\n        if (!curComponentId) return;\n\n        updateComponentProps(curComponentId, {\n            [eventName]: {\n                ...curComponent?.props?.[eventName],\n                config: {\n                    ...curComponent?.props?.[eventName]?.config,\n                    text: value,\n                },\n            },\n        })\n    }\n\n    return <div className='mt-[30px]'>\n        <div className='flex items-center gap-[20px]'>\n            <div>类型：</div>\n            <div>\n            <Select\n                style={{ width: 500, height: 50 }}\n                options={[\n                    { label: '成功', value: 'success' },\n                    { label: '失败', value: 'error' },\n                ]}\n                onChange={(value) => { messageTypeChange(event.name, value) }}\n                value={curComponent?.props?.[event.name]?.config?.type}\n            />\n            </div>\n        </div>\n        <div className='flex items-center gap-[20px] mt-[50px]'>\n            <div>文本：</div>\n                <div>\n                <Input\n                    style={{ width: 500, height: 50 }}\n                    onChange={(e) => { messageTextChange(event.name, e.target.value) }}\n                    value={curComponent?.props?.[event.name]?.config?.text}\n                />\n            </div>\n        </div>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"看下效果："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:k,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"好多了。"}),"\n",(0,o.jsx)(e.p,{children:"之前我们是在 action 组件里直接修改 json，"}),"\n",(0,o.jsx)(e.p,{children:"现在改为通过 onChange 暴露出来，然后后面在点添加按钮的时候再改 json："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:M,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { useState } from \"react\";\nimport { useComponetsStore } from \"../../../stores/components\";\nimport TextArea from \"antd/es/input/TextArea\";\n\nexport interface GoToLinkConfig {\n    type: 'goToLink',\n    url: string\n}\n\nexport interface GoToLinkProps {\n    defaultValue?: string\n    onChange?: (config: GoToLinkConfig) => void\n}\n\nexport function GoToLink(props: GoToLinkProps) {\n    const { defaultValue, onChange } = props;\n\n    const { curComponentId } = useComponetsStore();\n    const [value, setValue] = useState(defaultValue);\n\n    function urlChange(value: string) {\n        if (!curComponentId) return;\n\n        setValue(value);\n\n        onChange?.({\n            type: 'goToLink',\n            url: value\n        });\n    }\n\n    return <div className='mt-[40px]'>\n        <div className='flex items-center gap-[10px]'>\n            <div>跳转链接</div>\n            <div>\n                <TextArea\n                    style={{height: 200, width: 500, border: '1px solid #000'}}\n                    onChange={(e) => { urlChange(e.target.value) }}\n                    value={value || ''}\n                />\n            </div>\n        </div>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"现在不用传入 event 配置了，传入回显的 value 就行。"}),"\n",(0,o.jsx)(e.p,{children:"ShowMessage 组件也是这样改："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:S,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Input, Select } from \"antd\"\nimport { useComponetsStore } from \"../../../stores/components\";\nimport { useState } from \"react\";\n\nexport interface ShowMessageConfig {\n    type: 'showMessage',\n    config: {\n        type: 'success' | 'error'\n        text: string\n    }\n}\n\nexport interface ShowMessageProps {\n    value?: ShowMessageConfig['config']\n    onChange?: (config: ShowMessageConfig) => void\n}\n\nexport function ShowMessage(props: ShowMessageProps) {\n    const { value, onChange } = props;\n\n    const { curComponentId } = useComponetsStore();\n\n    const [type, setType] = useState<'success' | 'error'>(value?.type || 'success');\n    const [text, setText] = useState<string>(value?.text || '');\n\n    function messageTypeChange(value: 'success' | 'error') {\n        if (!curComponentId) return;\n\n        setType(value);\n\n        onChange?.({\n            type: 'showMessage',\n            config: {\n                type: value,\n                text\n            }\n        })\n      }\n    \n    function messageTextChange(value: string) {\n        if (!curComponentId) return;\n\n        setText(value);\n\n        onChange?.({\n            type: 'showMessage',\n            config: {\n                type,\n                text: value\n            }\n        })\n    }\n\n    return <div className='mt-[30px]'>\n        <div className='flex items-center gap-[20px]'>\n            <div>类型：</div>\n            <div>\n            <Select\n                style={{ width: 500, height: 50 }}\n                options={[\n                    { label: '成功', value: 'success' },\n                    { label: '失败', value: 'error' },\n                ]}\n                onChange={(value) => { messageTypeChange(value) }}\n                value={type}\n            />\n            </div>\n        </div>\n        <div className='flex items-center gap-[20px] mt-[50px]'>\n            <div>文本：</div>\n                <div>\n                <Input\n                    style={{ width: 500, height: 50 }}\n                    onChange={(e) => { messageTextChange(e.target.value) }}\n                    value={text}\n                />\n            </div>\n        </div>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"试一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:b,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"{\n    key === '访问链接' && <GoToLink onChange={(config) => {\n        console.log(config);\n    }}/>\n}\n{\n    key === '消息提示' && <ShowMessage onChange={(config) => {\n        console.log(config);\n    }}/>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:j,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"现在选择某个动作，填入配置的时候，在 ActionModal 里就能拿到。"}),"\n",(0,o.jsx)(e.p,{children:"那接下来只要在 handleOk 里传出去，然后父组件里加到 store 就可以了。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:C,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { Modal, Segmented } from "antd";\nimport { useState } from "react";\nimport { GoToLink, GoToLinkConfig } from "./actions/GoToLink";\nimport { ComponentEvent } from "../../stores/component-config";\nimport { ShowMessage, ShowMessageConfig } from "./actions/ShowMessage";\n\ninterface ActionModalProps {\n    visible: boolean\n    handleOk: (config?: GoToLinkConfig | ShowMessageConfig) => void\n    handleCancel: () => void\n}\n\nexport function ActionModal(props: ActionModalProps) {\n    const {\n        visible,\n        handleOk,\n        handleCancel\n    } = props;\n\n    const [key, setKey] = useState<string>(\'访问链接\');\n    const [curConfig, setCurConfig] = useState<GoToLinkConfig | ShowMessageConfig>();\n\n    return  <Modal \n        title="事件动作配置" \n        width={800}\n        open={visible}\n        okText="确认"\n        cancelText="取消"\n        onOk={() => handleOk(curConfig)}\n        onCancel={handleCancel}\n    >\n        <div className="h-[500px]">\n            <Segmented value={key} onChange={setKey} block options={[\'访问链接\', \'消息提示\', \'自定义 JS\']} />\n            {\n                key === \'访问链接\' && <GoToLink onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n            {\n                key === \'消息提示\' && <ShowMessage onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n        </div>\n    </Modal>\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"在父组件里添加到 store 里："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:x,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Collapse, Input, Select, CollapseProps, Button} from 'antd';\nimport { useComponetsStore } from '../../stores/components';\nimport { useComponentConfigStore } from '../../stores/component-config';\nimport type { ComponentEvent } from '../../stores/component-config';\nimport { ActionModal } from './ActionModal';\nimport { useState } from 'react';\nimport { GoToLinkConfig } from './actions/GoToLink';\nimport { ShowMessageConfig } from './actions/ShowMessage';\n\nexport function ComponentEvent() {\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n    const [actionModalOpen, setActionModalOpen] = useState(false);\n    const [curEvent, setCurEvent] = useState<ComponentEvent>();\n\n    if (!curComponent) return null;\n\n    const items: CollapseProps['items'] = (componentConfig[curComponent.name].events || []).map(event => {\n        return {\n            key: event.name,\n            label: <div className='flex justify-between leading-[30px]'>\n                {event.label}\n                <Button type=\"primary\" onClick={() => {\n                    setCurEvent(event);\n                    setActionModalOpen(true);\n                }}>添加动作</Button>\n            </div>,\n            children: <div>\n                \n            </div>\n        }\n    })\n\n    function handleModalOk(config?: GoToLinkConfig | ShowMessageConfig) {\n        if(!config || !curEvent || !curComponent) {\n            return ;\n        }\n\n        updateComponentProps(curComponent.id,  { \n            [curEvent.name]: { \n                actions: [\n                    ...(curComponent.props[curEvent.name]?.actions || []),\n                    config\n                ]\n            }\n        })\n\n        setActionModalOpen(false)\n    }\n\n    return <div className='px-[10px]'>\n        <Collapse className='mb-[10px]' items={items}/>\n        <ActionModal visible={actionModalOpen} handleOk={handleModalOk} handleCancel={() => {\n            setActionModalOpen(false)\n        }}/>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"试一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:h,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"现在的 json 结构就支持多个动作了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:v,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"和 amis 的一样："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:f,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"然后我们也做下这个列表展示："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:u,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:g,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"children: <div>\n    {\n        (curComponent.props[event.name]?.actions || []).map((item: GoToLinkConfig | ShowMessageConfig) => {\n            return <div>\n                {\n                    item.type === 'goToLink' ? <div className='border border-[#aaa] m-[10px] p-[10px]'>\n                        <div className='text-[blue]'>跳转链接</div>\n                        <div>{item.url}</div>\n                    </div> : null\n                }\n                {\n                    item.type === 'showMessage' ? <div className='border border-[#aaa] m-[10px] p-[10px]'>\n                        <div className='text-[blue]'>消息弹窗</div>\n                        <div>{item.config.type}</div>\n                        <div>{item.config.text}</div>\n                    </div> : null\n                }\n            </div>\n        })\n    }\n</div>\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:m,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"列表展示没问题。"}),"\n",(0,o.jsx)(e.p,{children:"只是每次都会触发展开收起。"}),"\n",(0,o.jsx)(e.p,{children:"我们加一个 defaultActiveKey 让所有的都展开："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:d,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"defaultActiveKey={componentConfig[curComponent.name].events?.map(item =>item.name)}\n"})}),"\n",(0,o.jsx)(e.p,{children:"然后禁止点击事件冒泡，这样点击按钮就不会收起 Collapse 了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:l,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:p,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"然后在 Preview 组件里处理下事件绑定："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:r,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"function handleEvent(component: Component) {\n    const props: Record<string, any> = {};\n\n    componentConfig[component.name].events?.forEach((event) => {\n        const eventConfig = component.props[event.name];\n\n        if (eventConfig) {\n            props[event.name] = () => {\n                eventConfig?.actions?.forEach((action: GoToLinkConfig | ShowMessageConfig) => {\n                    if (action.type === 'goToLink') {\n                        window.location.href = action.url;\n                    } else if (action.type === 'showMessage') {\n                        if (action.config.type === 'success') {\n                            message.success(action.config.text);\n                        } else if (action.config.type === 'error') {\n                            message.error(action.config.text);\n                        }\n                    }\n                })\n\n            }\n        }\n    })\n    return props;\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"相比之前，就是多了个遍历的过程。"}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:c,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"添加两个消息提示的动作，可以看到，两个动作都执行了。"}),"\n",(0,o.jsx)(e.p,{children:"最后我们再做下动作的删除就好了："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:a,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"通过绝对定位在右上角显示一个删除按钮，点击按钮删除对应 index 的 action。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Collapse, Input, Select, CollapseProps, Button} from 'antd';\nimport { useComponetsStore } from '../../stores/components';\nimport { useComponentConfigStore } from '../../stores/component-config';\nimport type { ComponentEvent } from '../../stores/component-config';\nimport { ActionModal } from './ActionModal';\nimport { useState } from 'react';\nimport { GoToLinkConfig } from './actions/GoToLink';\nimport { ShowMessageConfig } from './actions/ShowMessage';\nimport { DeleteOutlined } from '@ant-design/icons';\n\nexport function ComponentEvent() {\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n    const [actionModalOpen, setActionModalOpen] = useState(false);\n    const [curEvent, setCurEvent] = useState<ComponentEvent>();\n\n    if (!curComponent) return null;\n\n    function deleteAction(event: ComponentEvent, index: number) {\n        if(!curComponent) {\n            return;\n        }\n\n        const actions = curComponent.props[event.name]?.actions;\n\n        actions.splice(index, 1)\n\n        updateComponentProps(curComponent.id,  { \n            [event.name]: { \n                actions: actions\n            }\n        })\n    }\n\n    const items: CollapseProps['items'] = (componentConfig[curComponent.name].events || []).map(event => {\n        return {\n            key: event.name,\n            label: <div className='flex justify-between leading-[30px]'>\n                {event.label}\n                <Button type=\"primary\" onClick={(e) => {\n                    e.stopPropagation();\n\n                    setCurEvent(event);\n                    setActionModalOpen(true);\n                }}>添加动作</Button>\n            </div>,\n            children: <div>\n                {\n                    (curComponent.props[event.name]?.actions || []).map((item: GoToLinkConfig | ShowMessageConfig, index: number) => {\n                        return <div>\n                            {\n                                item.type === 'goToLink' ? <div className='border border-[#aaa] m-[10px] p-[10px] relative'>\n                                    <div className='text-[blue]'>跳转链接</div>\n                                    <div>{item.url}</div>\n                                    <div style={{ position: 'absolute', top: 10, right: 10, cursor: 'pointer' }}\n                                        onClick={() => deleteAction(event, index)}\n                                    ><DeleteOutlined /></div>\n                                </div> : null\n                            }\n                            {\n                                item.type === 'showMessage' ? <div className='border border-[#aaa] m-[10px] p-[10px] relative'>\n                                    <div className='text-[blue]'>消息弹窗</div>\n                                    <div>{item.config.type}</div>\n                                    <div>{item.config.text}</div>\n                                    <div style={{ position: 'absolute', top: 10, right: 10, cursor: 'pointer' }}\n                                        onClick={() => deleteAction(event, index)}\n                                    ><DeleteOutlined /></div>\n                                </div> : null\n                            }\n                        </div>\n                    })\n                }\n            </div>\n        }\n    })\n\n    function handleModalOk(config?: GoToLinkConfig | ShowMessageConfig) {\n        if(!config || !curEvent || !curComponent) {\n            return ;\n        }\n\n        updateComponentProps(curComponent.id,  { \n            [curEvent.name]: { \n                actions: [\n                    ...(curComponent.props[curEvent.name]?.actions || []),\n                    config\n                ]\n            }\n        })\n\n        setActionModalOpen(false)\n    }\n\n    return <div className='px-[10px]'>\n        <Collapse className='mb-[10px]' items={items} defaultActiveKey={componentConfig[curComponent.name].events?.map(item =>item.name)}/>\n        <ActionModal visible={actionModalOpen} handleOk={handleModalOk} handleCancel={() => {\n            setActionModalOpen(false)\n        }}/>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:i,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"删除成功，json 也修改了。"}),"\n",(0,o.jsxs)(e.p,{children:["案例代码上传了",(0,o.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"git reset --hard c85c9913270242f216ec28d18f03cb64887475b4\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"总结",children:["总结",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"之前我们是直接在 Setting 区域展示的动作表单，动作多了以后不好展示，这节我们实现了动作选择弹窗。"}),"\n",(0,o.jsx)(e.p,{children:"选择一个动作，填入信息之后，点击添加就可以添加到 actions 里。"}),"\n",(0,o.jsx)(e.p,{children:"在预览的时候会同时执行多个动作。"}),"\n",(0,o.jsx)(e.p,{children:"主流的低代码编辑器的添加动作的交互都是这么做的。"})]})}function G(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(L,{...n})}):L(n)}let I=G;G.__RSPRESS_PAGE_META={},G.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC74%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E5%8A%A8%E4%BD%9C%E5%BC%B9%E7%AA%97.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第74章—低代码编辑器：动作弹窗",headingTitle:"第74章—低代码编辑器：动作弹窗",frontmatter:{}}}}]);