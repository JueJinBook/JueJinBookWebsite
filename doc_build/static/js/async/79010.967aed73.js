"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79010"],{462324:function(e,n,r){r.r(n),r.d(n,{default:()=>f});var s=r(552676),t=r(740453);let a=r.p+"static/image/6bc09a29e45609e6798c18c7164d86ed.06c54252.gif",i=r.p+"static/image/4af0e539552488027402bdcad1683621.a45c085e.webp",d=r.p+"static/image/8f6f8d41553a99d8c68fc226f480f8ac.6ae570c6.gif",c=r.p+"static/image/1057aeae4e5cc94d61f58c812a3212de.d8dfda8d.webp",l=r.p+"static/image/0063df818a037b749651ff3746c55c87.832d08ec.gif",o=r.p+"static/image/4addae9403a981fae2f31fcc280cf8e8.4d5311a2.gif",h=r.p+"static/image/55bd1081e0820a154926a68f66895a05.5c17f42a.webp",p=r.p+"static/image/1a46b452b0ed01b417078c393b62fd7d.c1b733d1.webp",m=r.p+"static/image/dfc1f51cf5a913f5219e5ad9a24f01a2.1a7b1975.gif",x=r.p+"static/image/f90f8720c28dd61fcff25e9285bcc6ba.1ba45d12.webp",j=r.p+"static/image/5a40b1dd9fc8fce8f0e93a9598281763.6877f2da.webp";function u(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",img:"img",ol:"ol",li:"li",h3:"h3",code:"code",pre:"pre",h4:"h4",blockquote:"blockquote"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"54实战篇-_-博客-_-深色模式dark-mode",children:["54.实战篇 _ 博客 _ 深色模式（Dark Mode）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#54实战篇-_-博客-_-深色模式dark-mode",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本篇我们来实现深色模式。它也被叫做暗黑模式、黑夜模式等等。这里我们选用的是苹果官方文档的翻译："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"1-深色模式",children:["1. 深色模式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-深色模式",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"“深色模式”本质上是一套采用深色背景、浅色文案的配色方案。其实很早就有。现在越来越流行，是因为苹果在 2018 年提出了这一概念。"}),"\n",(0,s.jsx)(n.p,{children:"先是 2018 年的 macOS Mojave 率先支持了深色外观，然后 2019 年 IOS 13 正式支持深色外观。这些都是系统级别的支持，可以将整个系统的界面切换为深色模式。由此深色模式开始进入人们的视野，成为设计师、前端工程师的学习内容……"}),"\n",(0,s.jsx)(n.p,{children:"使用深色模式也确实有一些好处："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"保护视力。毕竟晚上的时候，浅色有些刺眼。"}),"\n",(0,s.jsx)(n.li,{children:"增加沉浸感。阅读浏览类 App 或是内容创作型 App（比如代码编辑器）往往会使用深色模式，它们会借助黑底白字的高对比度特性让用户视线保持集中。所以切换深色模式后，可以增加沉浸感，提升使用欲望。"}),"\n",(0,s.jsx)(n.li,{children:"省电。根据谷歌的官方数据，采用 OLED 屏幕的手机在「深色模式」下，耗电可下降达63%。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"2-如何适配",children:["2. 如何适配？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-如何适配",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"如果我们开发页面，该如何支持深色模式呢？"}),"\n",(0,s.jsxs)(n.h3,{id:"21-css-媒体查询",children:["2.1. CSS 媒体查询",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-css-媒体查询",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["CSS 提供了 ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme",target:"_blank",rel:"noopener noreferrer",children:"prefers-color-scheme"})," 媒体查询特性，用于检测用户是否有将系统的主题色设置为浅色或者深色。"]}),"\n",(0,s.jsxs)(n.p,{children:["比如 Next.js 脚手架默认创建项目的 ",(0,s.jsx)(n.code,{children:"app/globals.css"}),"中，就有这样一段代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:":root {\n  --foreground-rgb: 0, 0, 0;\n  --background-start-rgb: 214, 219, 220;\n  --background-end-rgb: 255, 255, 255;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --foreground-rgb: 255, 255, 255;\n    --background-start-rgb: 0, 0, 0;\n    --background-end-rgb: 0, 0, 0;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这就是一段根据系统的主题色调整网页基础样式的代码。此时页面会根据系统的外观模式进行调整，效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:"1.gif"})}),"\n",(0,s.jsx)(n.p,{children:"注：浏览器设置里也有设置模式的地方："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"但这里设置的是浏览器的外观，不会影响具体页面的外观模式。"}),"\n",(0,s.jsxs)(n.h3,{id:"22-js-查询",children:["2.2. JS 查询",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-js-查询",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"CSS 查询会自动跟随系统设置，但如果你要自定义外观模式，就比如很多博客页面右上角都有个外观模式按钮，点击可以切换到 light / dark 模式，这种就需要依赖 JS 了。"}),"\n",(0,s.jsxs)(n.p,{children:["Web API 提供了 ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia",target:"_blank",rel:"noopener noreferrer",children:"Window.matchMedia()"})," 方法，它会返回一个新的 MediaQueryList 对象，表示指定的媒体查询字符串解析后的结果。返回的 MediaQueryList 可被用于判定 Document 是否匹配媒体查询，或者监控一个 document 来判定它匹配了或者停止匹配了此媒体查询。"]}),"\n",(0,s.jsxs)(n.h4,{id:"判断浏览器是否支持深色模式",children:["判断浏览器是否支持深色模式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#判断浏览器是否支持深色模式",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"if (window.matchMedia('(prefers-color-scheme)').media !== 'not all') {\n  console.log('\uD83C\uDF89 Dark mode is supported');\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"其实支持率还蛮好的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h4,{id:"监听深色模式变化",children:["监听深色模式变化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#监听深色模式变化",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\ndarkModeMediaQuery.addEventListener('change', (e) => {\n  const darkModeOn = e.matches;\n  console.log(`Dark mode is ${darkModeOn ? '\uD83C\uDF12 on' : '☀️ off'}.`);\n});\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"自定义-react-hook",children:["自定义 React hook",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义-react-hook",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["如果使用 React，可以自定义一个 hook，新建 ",(0,s.jsx)(n.code,{children:"app/theme.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { useEffect, useState } from \"react\"\n\nfunction useTheme() {\n \n  const [theme, setTheme] = useState('light')\n\n  useEffect(() => {\n\n    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setTheme(darkModeMediaQuery.matches ? 'dark' : 'light')\n    const listener = (event) => {\n      setTheme(event.matches ? 'dark' : 'light');\n    };\n\n    darkModeMediaQuery.addEventListener('change', listener);\n    return () => {\n      darkModeMediaQuery.removeEventListener('change', listener);\n    };\n    \n  }, [])\n  \n  return {\n    theme,\n    isDarkMode: theme === \"dark\",\n    isLightMode: theme === \"light\",\n  }\n}\n\nexport default useTheme\n"})}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"app/page.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'\'use client\'\n\nimport Image from "next/image";\nimport useTheme from "./theme";\n\nexport default function Home() {\n  \n  const {theme} = useTheme()\n\n  return (\n    <div>Hello World! {theme}</div>\n  );\n}\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"3.gif"})}),"\n",(0,s.jsxs)(n.h3,{id:"23-测试不同的模式",children:["2.3. 测试不同的模式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-测试不同的模式",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"如果要测试页面的浅色/深色模式，修改系统的外观模式会有些麻烦，Chrome 提供了快速切换的方式："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"2.gif"})}),"\n",(0,s.jsx)(n.p,{children:"其步骤为："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"打开浏览器开发者工具"}),"\n",(0,s.jsx)(n.li,{children:"Command + Shift + P 打开命令"}),"\n",(0,s.jsx)(n.li,{children:"输入 dark 或者 light 搜索命令"}),"\n",(0,s.jsx)(n.li,{children:"回车确定"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"注：这只是用于测试，效果是暂时的，关闭开发者工具，就会退出设置的样式。"}),"\n",(0,s.jsxs)(n.h2,{id:"3-实战应用",children:["3. 实战应用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-实战应用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"基础知识我们就说这么多，只是帮助大家理解深色模式的概念和实现的基本原理。"}),"\n",(0,s.jsxs)(n.p,{children:["在 Next.js 项目中，实现手动切换外观模式的效果，通常还要搭配 React Context 或者状态管理库来实现。在实际开发中，为了提高效率，我们会使用 ",(0,s.jsx)(n.a,{href:"https://github.com/pacocoursey/next-themes",target:"_blank",rel:"noopener noreferrer",children:"next-themes"})," 这个包来实现。"]}),"\n",(0,s.jsxs)(n.h3,{id:"31-next-themes",children:["3.1. next-themes",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-next-themes",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"安装依赖项："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install next-themes @headlessui/react\n"})}),"\n",(0,s.jsxs)(n.p,{children:["其中 ",(0,s.jsx)(n.a,{href:"https://github.com/tailwindlabs/headlessui",target:"_blank",rel:"noopener noreferrer",children:"@headlessui/react"})," 是 UI 库，十分适合搭配 Tailwind.css。"]}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"app/theme-providers.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"'use client'\n\nimport { ThemeProvider } from 'next-themes'\n\nexport function ThemeProviders({ children }) {\n  return (\n    <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem>\n      {children}\n    </ThemeProvider>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"app/layout.js"}),"，添加代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import siteMetadata from '@/data/siteMetadata'\nimport \"./globals.css\";\nimport { ThemeProviders } from './theme-providers'\n\nexport const metadata = {\n  // ...\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang={siteMetadata.locale} suppressHydrationWarning>\n      <body>\n        <ThemeProviders>\n          {children}\n        </ThemeProviders>\n      </body>\n    </html>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"修改的代码有 2 点："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"html 使用 suppressHydrationWarning 取消水合错误警告，这是因为 next-theme 会修改 html 元素的属性。因为 suppressHydrationWarning 只作用于一层，所以不用担心它会影响整个应用的水合错误警告。"}),"\n",(0,s.jsx)(n.li,{children:"使用 ThemeProviders 组件包裹 children"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["此时页面并不有什么特殊效果，因为这步相当于在顶层使用了 React Context，储存了一个用于表示当前主题的值，默认是 ",(0,s.jsx)(n.code,{children:'"light"'}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["此时因为我们设置了 ",(0,s.jsx)(n.code,{children:'attribute="class"'}),"，当切换主题的时候，它会对应生成 ",(0,s.jsx)(n.code,{children:'class="dark"'}),"这种属性："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["此外，我们还可以看到生成了 ",(0,s.jsx)(n.code,{children:'style="color-scheme: dark;"'}),"属性，详细介绍参考 ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme",target:"_blank",rel:"noopener noreferrer",children:"MDN color-scheme"}),"。简单来说，操作系统会根据用户选择的颜色方案对用户界面进行调整，包括表单控件、滚动条和 CSS 系统颜色的使用值。"]}),"\n",(0,s.jsx)(n.p,{children:"因为我们改用了 JS 来手动控制主题值，所以写样式效果的时候，也不能再用 @media (prefers-color-scheme: dark) 这种方式，它会根据系统的主题值而非 Context 中的主题值进行修改。"}),"\n",(0,s.jsxs)(n.p,{children:["如果你要写 dark 和 light 两套主题，因为 html 添加了 ",(0,s.jsx)(n.code,{children:".dark"})," 类，所以可以这样写："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"html,\nbody {\n  color: #000;\n  background: #fff;\n}\n\n.dark {\n  html, body {\n    color: #fff;\n    background: #000;\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["当然因为我们项目使用了 Tailwind.css，Tailwind.css 也是支持 ",(0,s.jsx)(n.a,{href:"https://tailwindcss.com/docs/dark-mode#toggling-dark-mode-manually",target:"_blank",rel:"noopener noreferrer",children:"Dark Mode"})," 的。修改 ",(0,s.jsx)(n.code,{children:"tailwind.config.js"}),"，添加代码如下（如果你按照之前的文章写项目，此时应该已经添加了）："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  darkMode: 'class'\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"app/page.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'\'use client\'\n\nimport { useState, useEffect } from \'react\'\nimport { useTheme } from \'next-themes\'\n\nconst ThemeSwitch = () => {\n  const [mounted, setMounted] = useState(false)\n  const { theme, setTheme } = useTheme()\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  if (!mounted) {\n    return null\n  }\n\n  return (\n    <>\n      <h1 className="text-black dark:text-white">Hello World! {theme}</h1>\n      <select value={theme} onChange={e => setTheme(e.target.value)}>\n        <option value="system">System</option>\n        <option value="dark">Dark</option>\n        <option value="light">Light</option>\n      </select>\n    </>\n\n  )\n}\n\nexport default ThemeSwitch\n'})}),"\n",(0,s.jsx)(n.p,{children:"在这段代码中，展示了如何使用 useTheme 和 Taildwind.css。"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"使用 useTheme 需要是客户端组件，且需要判断环境，否则会导致水合错误"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"text-black dark:text-white"'})," 展示了如何为一个元素定义不同主题下的样式"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"此时效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"4.gif"})}),"\n",(0,s.jsxs)(n.h3,{id:"32-项目开发",children:["3.2. 项目开发",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-项目开发",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"components/ThemeSwitch.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'\'use client\'\n\nimport { Fragment, useEffect, useState } from \'react\'\nimport { useTheme } from \'next-themes\'\nimport { Menu, RadioGroup, Transition } from \'@headlessui/react\'\n\nconst Sun = () => (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    viewBox="0 0 20 20"\n    fill="currentColor"\n    className="h-6 w-6 text-gray-900 dark:text-gray-100"\n  >\n    <path\n      fillRule="evenodd"\n      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"\n      clipRule="evenodd"\n    />\n  </svg>\n)\nconst Moon = () => (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    viewBox="0 0 20 20"\n    fill="currentColor"\n    className="h-6 w-6 text-gray-900 dark:text-gray-100"\n  >\n    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />\n  </svg>\n)\nconst Monitor = () => (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    viewBox="0 0 20 20"\n    fill="none"\n    stroke="currentColor"\n    strokeWidth="2"\n    strokeLinecap="round"\n    strokeLinejoin="round"\n    className="h-6 w-6 text-gray-900 dark:text-gray-100"\n  >\n    <rect x="3" y="3" width="14" height="10" rx="2" ry="2"></rect>\n    <line x1="7" y1="17" x2="13" y2="17"></line>\n    <line x1="10" y1="13" x2="10" y2="17"></line>\n  </svg>\n)\n\nconst ThemeSwitch = () => {\n  const [mounted, setMounted] = useState(false)\n  const { theme, setTheme, resolvedTheme } = useTheme()\n\n  // When mounted on client, now we can show the UI\n  useEffect(() => setMounted(true), [])\n\n  if (!mounted) return null\n\n  return (\n    <div className="mr-5">\n      <Menu as="div" className="relative inline-block text-left">\n        <div>\n          <Menu.Button>{resolvedTheme === \'dark\' ? <Moon /> : <Sun />}</Menu.Button>\n        </div>\n        <Transition\n          as={Fragment}\n          enter="transition ease-out duration-100"\n          enterFrom="transform opacity-0 scale-95"\n          enterTo="transform opacity-100 scale-100"\n          leave="transition ease-in duration-75"\n          leaveFrom="transform opacity-100 scale-100"\n          leaveTo="transform opacity-0 scale-95"\n        >\n          <Menu.Items className="absolute right-0 mt-2 w-32 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800">\n            <RadioGroup value={theme} onChange={setTheme}>\n              <div className="p-1">\n                <RadioGroup.Option value="light">\n                  <Menu.Item>\n                    <button className="group flex w-full items-center rounded-md px-2 py-2 text-sm">\n                      <div className="mr-2">\n                        <Sun />\n                      </div>\n                      Light\n                    </button>\n                  </Menu.Item>\n                </RadioGroup.Option>\n                <RadioGroup.Option value="dark">\n                  <Menu.Item>\n                    <button className="group flex w-full items-center rounded-md px-2 py-2 text-sm">\n                      <div className="mr-2">\n                        <Moon />\n                      </div>\n                      Dark\n                    </button>\n                  </Menu.Item>\n                </RadioGroup.Option>\n                <RadioGroup.Option value="system">\n                  <Menu.Item>\n                    <button className="group flex w-full items-center rounded-md px-2 py-2 text-sm">\n                      <div className="mr-2">\n                        <Monitor />\n                      </div>\n                      System\n                    </button>\n                  </Menu.Item>\n                </RadioGroup.Option>\n              </div>\n            </RadioGroup>\n          </Menu.Items>\n        </Transition>\n      </Menu>\n    </div>\n  )\n}\n\nexport default ThemeSwitch\n'})}),"\n",(0,s.jsx)(n.p,{children:"这段代码看似很长，但实现的效果其实很简单："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["为了方便引入，修改 ",(0,s.jsx)(n.code,{children:"jsconfig.json"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "@/data/*": ["data/*"],\n      "@/components/*": ["components/*"],\n      "contentlayer/generated": ["./.contentlayer/generated"]\n    }\n  },\n  // ...\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["我们将组件添加到根布局 ",(0,s.jsx)(n.code,{children:"app/layout.js"}),"中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import siteMetadata from '@/data/siteMetadata'\nimport \"./globals.css\";\nimport { ThemeProviders } from './theme-providers'\nimport ThemeSwitch from '@/components/ThemeSwitch';\n\n// ...\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang={siteMetadata.locale} suppressHydrationWarning>\n      <body>\n        <ThemeProviders>\n          <header className=\"flex justify-end\">\n            <ThemeSwitch />\n          </header>\n          {children}\n        </ThemeProviders>\n      </body>\n    </html>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这样所有页面的右上角都会有这个切换主题的按钮。"}),"\n",(0,s.jsx)(n.p,{children:"现在要做的就是为元素设置不同主题的样式。根据上节的描述有两种方式可以设置，一种是直接使用 CSS 进行设置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:".dark {\n  // ...\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["一种是使用 Tailwind.css，添加 ",(0,s.jsx)(n.code,{children:"dark:"}),"开头的类名："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'<h1 className="text-3xl font-bold dark:text-white">{post.title}</h1>\n'})}),"\n",(0,s.jsx)(n.p,{children:"比较麻烦的地方在于文章页面，因为文章的内容渲染是由 MDX 生成，不能直接添加类名。"}),"\n",(0,s.jsxs)(n.p,{children:["但其实 tailwindcss-typography 同样提供了 dark mode 支持，你只要在外层添加一个 ",(0,s.jsx)(n.code,{children:"dark:prose-invert"})," 类名："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'<article class="prose dark:prose-invert">{{ markdown }}</article>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["所以我们修改 ",(0,s.jsx)(n.code,{children:"app/posts/[id]/page.js"}),"，添加代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'// ...\n\nconst Page = ({ params }) => {\n  const post = allPosts.find((post) => post._raw.flattenedPath === params.id)\n  if (!post) notFound()\n  const MDXContent = useMDXComponent(post.body.code)\n  const jsonLd = post.structuredData\n  return (\n    <>\n      <script\n        type="application/ld+json"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n        />\n      <article className="mx-auto max-w-xl py-8 prose prose-slate dark:prose-invert">\n        <div className="mb-8 text-center">\n          <time dateTime={post.date} className="mb-1 text-xs text-gray-600 dark:text-white">\n            {dayjs(post.date).format(\'DD/MM/YYYY\')}\n          </time>\n          <h1 className="text-3xl font-bold dark:text-white">{post.title}</h1>\n        </div>\n        <MDXContent />\n      </article>\n    </>\n  )\n}\n\nexport default Page\n'})}),"\n",(0,s.jsx)(n.p,{children:"此时文章页面效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"5.gif"})}),"\n",(0,s.jsx)(n.p,{children:"我们成功实现了深色模式！"}),"\n",(0,s.jsxs)(n.h2,{id:"项目源码",children:["项目源码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#项目源码",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"功能实现：博客支持深色模式"}),"\n",(0,s.jsxs)(n.li,{children:["源码地址：",(0,s.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-app-demo/tree/next-blog-3",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/mqyqingfeng/next-app-demo/tree/next-blog-3"})]}),"\n",(0,s.jsxs)(n.li,{children:["下载代码：",(0,s.jsx)(n.code,{children:"git clone -b next-blog-3 git@github.com:mqyqingfeng/next-app-demo.git"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://support.apple.com/zh-cn/guide/mac-help/mchl52e1c2d2/mac",target:"_blank",rel:"noopener noreferrer",children:"https://support.apple.com/zh-cn/guide/mac-help/mchl52e1c2d2/mac"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://juejin.cn/post/7298997940019085366",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.cn/post/7298997940019085366"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme",target:"_blank",rel:"noopener noreferrer",children:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://web.dev/articles/prefers-color-scheme?hl=zh-cn#reacting_on_dark_mode_changes",target:"_blank",rel:"noopener noreferrer",children:"https://web.dev/articles/prefers-color-scheme?hl=zh-cn#reacting_on_dark_mode_changes"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://web.dev/articles/color-scheme?hl=zh-cn",target:"_blank",rel:"noopener noreferrer",children:"https://web.dev/articles/color-scheme?hl=zh-cn"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.uisdc.com/dark-mode-history",target:"_blank",rel:"noopener noreferrer",children:"https://www.uisdc.com/dark-mode-history"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://juejin.cn/post/7062986403205873701",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.cn/post/7062986403205873701"})}),"\n"]})]})}function g(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}let f=g;g.__RSPRESS_PAGE_META={},g.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F54.%E5%AE%9E%E6%88%98%E7%AF%87%20_%20%E5%8D%9A%E5%AE%A2%20_%20%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%EF%BC%88Dark%20Mode%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. 深色模式",id:"1-深色模式",depth:2},{text:"2. 如何适配？",id:"2-如何适配",depth:2},{text:"2.1. CSS 媒体查询",id:"21-css-媒体查询",depth:3},{text:"2.2. JS 查询",id:"22-js-查询",depth:3},{text:"判断浏览器是否支持深色模式",id:"判断浏览器是否支持深色模式",depth:4},{text:"监听深色模式变化",id:"监听深色模式变化",depth:4},{text:"自定义 React hook",id:"自定义-react-hook",depth:4},{text:"2.3. 测试不同的模式",id:"23-测试不同的模式",depth:3},{text:"3. 实战应用",id:"3-实战应用",depth:2},{text:"3.1. next-themes",id:"31-next-themes",depth:3},{text:"3.2. 项目开发",id:"32-项目开发",depth:3},{text:"项目源码",id:"项目源码",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"54.实战篇 _ 博客 _ 深色模式（Dark Mode）",headingTitle:"54.实战篇 _ 博客 _ 深色模式（Dark Mode）",frontmatter:{}}}}]);