"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["61711"],{746706:function(e,n,s){s.r(n),s.d(n,{default:()=>d});var r=s(552676),c=s(740453);function i(e){let n=Object.assign({h2:"h2",a:"a",p:"p",h3:"h3",code:"code",pre:"pre",h4:"h4",strong:"strong",ul:"ul",li:"li",h5:"h5",ol:"ol",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Electron 作为一种强大的桌面应用程序开发框架，提供了跨平台的能力，但在启动速度和内存占用方面一直是让人吐槽的点。接下来，我们将从这两个方面着手，一起聊聊我们能做哪些事情来优化 Electron 应用的性能。"}),"\n",(0,r.jsxs)(n.h2,{id:"启动速度优化",children:["启动速度优化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#启动速度优化",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-资源加载优化",children:["1. 资源加载优化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-资源加载优化",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["为什么 Electron 应用启动通常比较慢呢？在应用启动中最大的性能瓶颈其实是加载 ",(0,r.jsx)(n.code,{children:"JavaScript"})," 的过程。比如，我们在渲染进程中加载一个 ",(0,r.jsx)(n.code,{children:"download"})," 模块："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// renderer.js\nimport download from 'download';\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后你可以在开发者工具的性能分析器中，按下 ",(0,r.jsx)(n.code,{children:"Cmd-E"})," 或红色记录按钮开始捕获运行时性能，以我的最新款 ",(0,r.jsx)(n.code,{children:"macOS"})," 为例："]}),"\n",(0,r.jsxs)(n.p,{children:["我们看到在我的机器上加载 ",(0,r.jsx)(n.code,{children:"download"}),"\xa0库大概用了 ",(0,r.jsx)(n.code,{children:"43ms"}),"。这仅仅是引入一个模块的耗时，整体耗时需要多长时间取决于应用依赖了多少模块。（别忘了，",(0,r.jsx)(n.code,{children:"node_modules"})," 黑洞，你依赖的某模块可能会引用大量的依赖其他模块……）"]}),"\n",(0,r.jsx)(n.p,{children:"所以，如何来优化资源加载呢？"}),"\n",(0,r.jsxs)(n.h4,{id:"11-减少应用的依赖项",children:["1.1 减少应用的依赖项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-减少应用的依赖项",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["这个需要你自己认真检查是否每个资源库都是必须要依赖的，比如你依赖了一个 ",(0,r.jsx)(n.code,{children:"lodash"})," 库，但是你整个项目仅仅需要用到一个 ",(0,r.jsx)(n.code,{children:"lodash.get"})," 的功能，可以考虑自己手写一个功能函数。"]}),"\n",(0,r.jsxs)(n.h4,{id:"12-使用更加轻量的库",children:["1.2 使用更加轻量的库",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-使用更加轻量的库",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果你发现某一个库加载特别耗时，性能特别差，那么可以选择一个更加轻量的库来替代。比如，我们在解析 ",(0,r.jsx)(n.code,{children:"macOS"})," 的 ",(0,r.jsx)(n.code,{children:"plist"})," 文件时通常需要用到 ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/plist",target:"_blank",rel:"noopener noreferrer",children:"plist"})," 这个库，但是经过性能度量后发现 ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/simple-plist",target:"_blank",rel:"noopener noreferrer",children:"simple-plist"})," 更快，但需要的功能是一样的，那么就可以替换 ",(0,r.jsx)(n.code,{children:"simple-plist"}),"。"]}),"\n",(0,r.jsxs)(n.h4,{id:"13-延后加载依赖项",children:["1.3 延后加载依赖项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#13-延后加载依赖项",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"通常我们会在代码头部引入一些依赖性："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import plist from 'simple-plist';\nexport function parsePlist(xml) {\n  const result = plist.parse(xml);\n  // ... \n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["但是 ",(0,r.jsx)(n.code,{children:"parsePlist"})," 这个函数并不需要在应用启动时就执行，因此，我们可以将 ",(0,r.jsx)(n.code,{children:"simple-plist"})," 这个库内置到 ",(0,r.jsx)(n.code,{children:"parsePlist"})," 函数中进行延后加载："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let plist = null;\nfunction get_plist() {\n  if (plist === null) {\n    plist = require('simple-plist');\n  }\n  return plist;\n}\n\nexport function parsePlist(xml) {\n  const plist = get_plist();\n  const result = plist.parse(xml);\n  // ... \n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-提升代码加载速度",children:["2. 提升代码加载速度",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-提升代码加载速度",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"21-打包压缩代码",children:["2.1 打包压缩代码",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-打包压缩代码",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在 Electron 中，前端代码加载和解析是启动速度的一个关键因素。较大的前端代码包意味着更多的文件需要加载和解析，从而增加了应用启动所需的时间。所以，为了提升代码加载速度，我们通常会使用 ",(0,r.jsx)(n.code,{children:"webpack"})," 或者 ",(0,r.jsx)(n.code,{children:"rollup"})," 来对资源进行压缩处理。如果你使用的 ",(0,r.jsx)(n.code,{children:"electron-vite"})," 或者 ",(0,r.jsx)(n.code,{children:"vue-cli-plugin-electron-builder"})," 来构建的，默认也会进行代码压缩。"]}),"\n",(0,r.jsxs)(n.p,{children:["除此之外，因为 Electron 依赖的一般都是最新版的 ",(0,r.jsx)(n.code,{children:"Chromium"}),"，所以，绝大多数的 ES 新特性都可以直接使用，我们不用考虑兼容性使用 ",(0,r.jsx)(n.code,{children:"babel pollyfill"}),"，这样也会进一步减少打包后的代码体积。"]}),"\n",(0,r.jsxs)(n.h4,{id:"22-手动添加-tree-shaking",children:["2.2 手动添加 Tree shaking",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-手动添加-tree-shaking",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Tree shaking"})," 是一种用于优化前端代码的技术，主要用于消除未使用的代码（dead code）以减小最终生成的代码体积。"]}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"JavaScript"})," 应用中，通常会导入许多库或模块，但实际上可能只使用其中的一部分功能或方法。",(0,r.jsx)(n.code,{children:"Tree shaking"})," 通过静态分析代码，识别和移除未被使用的代码片段，以此来减少最终打包输出的文件大小。"]}),"\n",(0,r.jsxs)(n.p,{children:["在绝大多数的打包工具中，都支持 ",(0,r.jsx)(n.code,{children:"Tree shaking"}),"，我们使用的 ",(0,r.jsx)(n.code,{children:"vue-cli-plugin-electron-builder"})," 在进行应用程序打包时，会自动进行 ",(0,r.jsx)(n.code,{children:"Tree shaking"})," 的动作，但是，",(0,r.jsx)(n.code,{children:"Tree shaking"})," 有时候效果并不好。因为它只能对代码进行静态分析，以确认模块是否有用。而有的代码有副作用（副作用，一般是指函数除了返回值，还进行了其他导致程序变化的操作，比如修改外部变量、写入文件等），",(0,r.jsx)(n.code,{children:"Tree shaking"})," 无法判断是否可以消除，举个例子："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"foo()\n\nfunction foo(obj) {\n  obj?.a\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上述代码中，",(0,r.jsx)(n.code,{children:"foo"}),"\xa0函数本身是没有任何意义的，仅仅是对对象\xa0",(0,r.jsx)(n.code,{children:"obj"}),"\xa0进行了属性\xa0",(0,r.jsx)(n.code,{children:"a"}),"\xa0的读取操作，但是\xa0",(0,r.jsx)(n.code,{children:"Tree-Shaking"}),"\xa0是无法删除该函数的，因为上述的属性读取操作可能会产生副作用，因为\xa0",(0,r.jsx)(n.code,{children:"obj"}),"\xa0可能是一个响应式对象，我们可能对\xa0",(0,r.jsx)(n.code,{children:"obj"}),"\xa0定了一个\xa0",(0,r.jsx)(n.code,{children:"getter"}),"\xa0在\xa0",(0,r.jsx)(n.code,{children:"getter"}),"\xa0中触发了很多不可预期的操作。"]}),"\n",(0,r.jsxs)(n.p,{children:["这种情况下，如果你确认代码无副作用，可以通过 ",(0,r.jsx)(n.code,{children:"/*#__PURE__*/"})," 来标记文件无副作用等方法来解决。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"foo()\n\nfunction foo(obj) {\n  /*#__PURE__*/ obj?.a\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"23-减少-ipcrenderersendsync-调用",children:["2.3 减少 ipcRenderer.sendSync 调用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-减少-ipcrenderersendsync-调用",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ipcRenderer.sendSync"})," 发送同步消息将阻止整个渲染过程直到收到回复。因此，我们在写程序的过程中，应该尽量避免直接或间接使用这个方法进行进程间通信。"]}),"\n",(0,r.jsxs)(n.p,{children:["间接使用的形式比如通过 ",(0,r.jsx)(n.code,{children:"@electron/remote"})," 模块进行属性读取："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 主进程\nglobal.foo = {\n  foo: 1,\n  bar: {\n    baz: 2\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"渲染进程："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 渲染进程\nimport { remote } from '@electron/remote'\n\nJSON.stringify(remote.getGlobal('foo'))\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这里会触发 4 次同步 IPC：getGlobal、foo、bar、bar.baz，这是因为通过 ",(0,r.jsx)(n.code,{children:"@electron/remote"})," 来获取主进程中的数据，",(0,r.jsx)(n.code,{children:"@electron/remote"})," 底层为了确保你可以取到最新的值，不会对数据进行缓存，每次都是发起一个同步 IPC 通信来进行动态读取。"]}),"\n",(0,r.jsxs)(n.h4,{id:"24-使用-requestidlecallback-优化加载顺序",children:["2.4 使用 requestIdleCallback 优化加载顺序",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24-使用-requestidlecallback-优化加载顺序",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback",target:"_blank",rel:"noopener noreferrer",children:"requestIdleCallback"})," 允许开发者将函数排队为在进程进入空闲期后立刻执行。它使你能够在不影响用户体验的情况下执行低优先级或后台执行的工作。"]}),"\n",(0,r.jsxs)(n.p,{children:["程序刚启动的时候，CPU 占用会很高，因此有些不影响渲染的启动任务可以通过 ",(0,r.jsx)(n.code,{children:"requestIdleCallback"})," 在浏览器空闲时间执行，让浏览器优先去渲染。"]}),"\n",(0,r.jsxs)(n.h4,{id:"25-减轻主进程负荷",children:["2.5 减轻主进程负荷",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#25-减轻主进程负荷",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["前面我们介绍过 Electron 进程模型是由一个主进程和多个渲染进程构成，主进程控制着整个应用的生命周期、启动、事件管理等任务，但一个应用只有一个同步执行的",(0,r.jsx)(n.strong,{children:"主进程"}),"。如果主进程执行的任务过多，那么它将会被阻塞进而影响整个应用的渲染执行。"]}),"\n",(0,r.jsxs)(n.p,{children:["因此，对于需要长期占用 CPU 繁重任务，使用\xa0",(0,r.jsx)(n.a,{href:"https://nodejs.org/api/worker_threads.html",target:"_blank",rel:"noopener noreferrer",children:"worker threads"}),"， 或者通过 ",(0,r.jsx)(n.code,{children:"BrowserWindow"})," 将它们移动到渲染进程中执行，执行完成再通过 ",(0,r.jsx)(n.code,{children:"ipc"})," 通信把执行后的结果回调给主进程。"]}),"\n",(0,r.jsxs)(n.p,{children:["其次，对于一些同步的 ",(0,r.jsx)(n.code,{children:"nodejs API"})," 我们也尽量避免使用，比如 ",(0,r.jsx)(n.code,{children:"fs.readFileSync"}),"、",(0,r.jsx)(n.code,{children:"child_process.execSync"}),"……"]}),"\n",(0,r.jsxs)(n.h4,{id:"26-使用-v8-compile-cache",children:["2.6 使用 V8 compile cache",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#26-使用-v8-compile-cache",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["当 JavaScript 代码首次被 V8 引擎执行时，会经历编译阶段，将源代码转换为可执行的机器码。编译过程是相对耗时的，特别是对于大型 JavaScript 应用。",(0,r.jsx)(n.code,{children:"V8 compile cache"})," 通过将编译过的代码缓存起来，在下次相同代码被执行时，可以直接从缓存中获取已编译的结果，从而避免了重复的编译过程，提高了代码的执行速度。"]}),"\n",(0,r.jsxs)(n.p,{children:["使用 ",(0,r.jsx)(n.code,{children:"V8 compile cache"})," 也很简单，只需要在需要缓存的代码中引入 ",(0,r.jsx)(n.a,{href:"https://github.com/zertosh/v8-compile-cach",target:"_blank",rel:"noopener noreferrer",children:"v8-compile-cache"})," 这个包就好了，举个例子："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"require('v8-compile-cache')\nrequire('electron')\nrequire('vue')\nrequire('download')\nrequire('axios')\nrequire('electron-builder')\n\nconsole.log(process.uptime() * 1000)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在我的电脑上测试使用 ",(0,r.jsx)(n.code,{children:"V8 compile cache"})," 前后执行时间对比数据是："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["未使用 ",(0,r.jsx)(n.code,{children:"V8 compile cache"})," 执行时间是 ",(0,r.jsx)(n.code,{children:"170.68ms"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:["使用 ",(0,r.jsx)(n.code,{children:"V8 compile cache"})," 执行时间是 ",(0,r.jsx)(n.code,{children:"156.92ms"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["整体而言是有效果的。但是如果 ",(0,r.jsx)(n.code,{children:"require"})," 的包较少，且总包体积不大的情况下，那做不做 ",(0,r.jsx)(n.code,{children:"cache"})," 的意义就不大了。"]}),"\n",(0,r.jsxs)(n.h4,{id:"27-使用-v8-snapshots",children:["2.7 使用 V8 snapshots",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#27-使用-v8-snapshots",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["当应用程序启动时，通常需要加载和解析大量 JavaScript 代码，这会导致较长的启动时间。",(0,r.jsx)(n.code,{children:"V8 snapshots"})," 技术允许将部分 JavaScript 代码编译成一种称为快照的二进制形式，其中包含了代码执行后留在内存中的数据结构。在下次启动应用时，不必重新解析和编译这些代码，而是直接加载快照，从而加速应用程序的启动过程。"]}),"\n",(0,r.jsxs)(n.h5,{id:"主流程",children:["主流程",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#主流程",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在 Electron 中，如果想要使用 ",(0,r.jsx)(n.code,{children:"V8 snapshots"})," 主要分为以下几个步骤："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["安装 ",(0,r.jsx)(n.a,{href:"https://github.com/atom/electron-link",target:"_blank",rel:"noopener noreferrer",children:"electron-link"})," 和\xa0",(0,r.jsx)(n.a,{href:"https://github.com/electron/mksnapshot",target:"_blank",rel:"noopener noreferrer",children:"electron-mksnapshot"})," 模块。"]}),"\n",(0,r.jsxs)(n.li,{children:["使用 ",(0,r.jsx)(n.code,{children:"electron-link"})," 对需要进行快照的文件进行预处理。"]}),"\n",(0,r.jsxs)(n.li,{children:["使用 ",(0,r.jsx)(n.code,{children:"electron-mksnapshot"})," 模块对预处理完成的文件进行快照生成。"]}),"\n",(0,r.jsx)(n.li,{children:"Electron 加载生成好的快照文件。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["其中，",(0,r.jsx)(n.code,{children:"electron-link"})," 模块接收一个 JavaScript 文件作为输入，通常是应用程序的入口点，还接收一个需要延迟加载的模块列表。然后，它会从这个文件开始遍历整个模块依赖图，并将所有的 ",(0,r.jsx)(n.code,{children:"require"})," 调用替换为在运行时将被调用的函数。最终输出一个包含从入口点可达的所有模块代码的单个脚本文件。"]}),"\n",(0,r.jsxs)(n.p,{children:["比如我们有一个 ",(0,r.jsx)(n.code,{children:"snapshot.js"})," 文件，该文件依赖了一个 ",(0,r.jsx)(n.code,{children:"test.js"})," 文件"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// snapshot.js\nrequire('./test')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["经过 ",(0,r.jsx)(n.code,{children:"electron-link"})," 处理后，则会将 ",(0,r.jsx)(n.code,{children:"snapshot.js"})," 作为入口文件，从这个文件开始遍历整个模块依赖图，发现我们引入了 ",(0,r.jsx)(n.code,{children:"test.js"})," 就会将 ",(0,r.jsx)(n.code,{children:"test.js"})," 内联到其中，最终会生成一个包含 ",(0,r.jsx)(n.code,{children:"test.js"})," 代码的文件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// 通过 electron-link 处理后的 snapshot.js\n// ...\ncustomRequire.definitions = {\n  "./snapshot.js": function (exports, module, __filename, __dirname, require, define) {\n    require("./test.js")\n  },\n  "./test.js": function (exports, module, __filename, __dirname, require, define) {\n    const a = \'hello world\';\n    module.exports = a;\n  },\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"electron-link"})," 处理后的代码就可以传递给 ",(0,r.jsx)(n.code,{children:"electron-mksnapshot"}),"，这个工具可以将 JavaScript 代码编译成 V8 引擎可直接执行的快照形式。"]}),"\n",(0,r.jsxs)(n.h5,{id:"示例",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，我们以 ",(0,r.jsx)(n.code,{children:"vue-cli-plugin-electron-builder"})," 构建的应用程序为例，详细介绍一下如何在 Electron 中使用 ",(0,r.jsx)(n.code,{children:"V8 snapshots"})," 加载依赖（electron-vite 类似）。"]}),"\n",(0,r.jsxs)(n.p,{children:["首先，在我们的项目中安装 ",(0,r.jsx)(n.code,{children:"electron-link"})," 和 ",(0,r.jsx)(n.code,{children:"electron-mksnapshot"})," 这两个模块："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"$ yarn add electron-link electron-mksnapshot\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后，创建一个 ",(0,r.jsx)(n.code,{children:"snapshot.js"})," 文件把需要进行 ",(0,r.jsx)(n.code,{children:"snapshot"})," 的模块进行引入，举例："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// ./snapshot.js\nrequire('plist')\nrequire('pinyin-match')\nrequire('lodash')\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["注意：",(0,r.jsxs)(n.strong,{children:["不能对有副作用的代码做 ",(0,r.jsx)(n.code,{children:"snapshot"})," ！"]})," 因为 ",(0,r.jsx)(n.code,{children:"snapshot"})," 只是覆写内存，而没有实际代码执行，因此如果有读写文件、操作 dom、console 等副作用，是不会生效的。所以，你的业务代码、部分含有副作用的三方库是没法进行快照的。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["然后通过以下脚本来对 ",(0,r.jsx)(n.code,{children:"snapshot.js"})," 进行快照："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const childProcess = require('child_process')\nconst vm = require('vm')\nconst path = require('path')\nconst fs = require('fs')\nconst electronLink = require('electron-link')\n\nconst excludedModules = {}\n\nasync function main () {\n  const baseDirPath = path.resolve(__dirname, '..')\n\n  console.log('Creating a linked script..')\n  // 通过 electron-link 对代码进行预处理。\n  const result = await electronLink({\n    baseDirPath: baseDirPath,\n    mainPath: `${baseDirPath}/snapshot.js`,\n    cachePath: `${baseDirPath}/cache`,\n    shouldExcludeModule: (modulePath) => excludedModules.hasOwnProperty(modulePath)\n  })\n  // 将处理完成后的代码写到 cache/snapshot.js 文件中\n  const snapshotScriptPath = `${baseDirPath}/cache/snapshot.js`\n  fs.writeFileSync(snapshotScriptPath, result.snapshotScript)\n \n  // 通过 vm 模块检验生成后的代码是否可以被快照\n  vm.runInNewContext(result.snapshotScript, undefined, {filename: snapshotScriptPath, displayErrors: true})\n\n  const outputBlobPath = baseDirPath\n  console.log(`Generating startup blob in \"${outputBlobPath}\"`)\n  // 通过 electron-mksnapshot 模块来构建预处理过的 js 文件生成快照文件\n  childProcess.execFileSync(\n    path.resolve(\n      __dirname,\n      '..',\n      'node_modules',\n      '.bin',\n      'mksnapshot' + (process.platform === 'win32' ? '.cmd' : '')\n    ),\n    [snapshotScriptPath, '--output_dir', outputBlobPath]\n  )\n}\n\nmain().catch(err => console.error(err))\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果你的 ",(0,r.jsx)(n.code,{children:"snapshot.js"})," 代码中没有引入包含副作用的依赖，那么正常情况下会生成一个 ",(0,r.jsx)(n.code,{children:"snapshot_blob.bin"})," 和一个 ",(0,r.jsx)(n.code,{children:"v8_context_snapshot.${操作系统内核}.bin"})," 两个文件。这两个文件都是为了优化 Electron 应用程序的性能而存在的。",(0,r.jsx)(n.code,{children:"snapshot_blob.bin"})," 存储了预编译的 JavaScript 代码片段，而 ",(0,r.jsx)(n.code,{children:"v8_context_snapshot.bin"})," 则包含了 V8 引擎的上下文快照，用于初始化引擎的状态。"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，我们需要将这两个快照文件加载到 Electron 应用程序中。Electron 在其二进制文件中有默认的 ",(0,r.jsx)(n.code,{children:"V8 snapshot"})," 文件，你必须用你的把它覆盖掉。Electron 的二进制快照文件路径如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 第21章—通用篇：Electron应用性能优化\nnode_modules/electron/dist/Electron.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Resources/\n\n# Windows/Linux\nnode_modules/electron/dist/\n"})}),"\n",(0,r.jsxs)(n.p,{children:["接着，需要使用以下脚本来将生成好的 ",(0,r.jsx)(n.code,{children:"snapshot_blob.bin"})," 和 ",(0,r.jsx)(n.code,{children:"v8_context_snapshot.bin"})," 快照文件复写拷贝到 Electron 对应的目录："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const path = require('path')\nconst fs = require('fs')\n\nconst snapshotFileName = 'snapshot_blob.bin'\n// 根据操作系统获取生成的快照名称\nconst v8ContextFileName = getV8ContextFileName()\nconst pathToBlob = path.resolve(__dirname, '..', snapshotFileName)\nconst pathToBlobV8 = path.resolve(__dirname, '..', v8ContextFileName)\n\nswitch (process.platform) {\n  // macOS 下进行拷贝\n  case 'darwin': {\n    const pathToElectron = path.resolve(\n      __dirname,\n      '..',\n      'node_modules/electron/dist/Electron.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Resources'\n    )\n    console.log('Copying v8 snapshots from', pathToBlob, 'to', pathToElectron)\n    fs.copyFileSync(pathToBlob, path.join(pathToElectron, snapshotFileName))\n    fs.copyFileSync(pathToBlobV8, path.join(pathToElectron, v8ContextFileName))\n    break\n  }\n  \n  // windows 和 linux 进行拷贝\n  case 'win32':\n  case 'linux': {\n    const pathToElectron = path.resolve(\n      __dirname,\n      '..',\n      'node_modules',\n      'electron',\n      'dist'\n    )\n    console.log('Copying v8 snapshots from', pathToBlob, 'to', pathToElectron)\n    fs.copyFileSync(pathToBlob, path.join(pathToElectron, snapshotFileName))\n    fs.copyFileSync(pathToBlobV8, path.join(pathToElectron, v8ContextFileName))\n    break\n  }\n}\n\nfunction getV8ContextFileName() {\n  if (process.platform === 'darwin') {\n    return `v8_context_snapshot${\n      process.arch.startsWith('arm') ? '.arm64' : '.x86_64'\n    }.bin`\n  } else {\n    return `v8_context_snapshot.bin`\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["到这里，我们就完成了对 ",(0,r.jsx)(n.code,{children:"V8 snapshot"})," 生成的动作，接下来，需要对代码进行一点点改造，比如我们在业务代码里面引入了 ",(0,r.jsx)(n.code,{children:"lodash"})," 模块："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// main.js\nimport _ from 'lodash'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["假如我们使用的是 ",(0,r.jsx)(n.code,{children:"webpack"})," 打包工具，以上代码经过 ",(0,r.jsx)(n.code,{children:"webpack"})," 等打包工具的处理，",(0,r.jsx)(n.code,{children:"import"})," 引入的包被转成的是 ",(0,r.jsx)(n.code,{children:"webpack"})," 的 ",(0,r.jsx)(n.code,{children:"__webpack_require__"})," 形式的函数加载，并没有加载到我们缓存的快照内容。所以，第一步就是改写打包工具的打包内容，将 ",(0,r.jsx)(n.code,{children:"lodash"})," 改成正常的 ",(0,r.jsx)(n.code,{children:"nodejs require"})," 的形式进行引入："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// vue.config.js\nconst { defineConfig } = require('@vue/cli-service')\nmodule.exports = defineConfig({\n  // ...\n  configureWebpack: {\n    externals: {\n      lodash: 'require(\"./node_modules/lodash/lodash.js\")',\n    },\n  }\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后，再重写一下 ",(0,r.jsx)(n.code,{children:"nodejs require"})," 函数，让其先从我们的快照中加载依赖，如果快照中没有再正常加载依赖："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// v8-snapshot-util.js\n// snapshotResult 就是快照内容\nif (typeof snapshotResult !== 'undefined') {\n  const Module = __non_webpack_require__('module');\n  // 缓存原始 require 的 _load 函数\n  const originalLoad = Module._load;\n  \n  console.log('snapshot 加载。。。。', snapshotResult);\n  // 重写 require 的 _load 功能\n  Module._load = function _load(module, ...args) {\n    // 从快照中读取模块\n    let cachedModule = snapshotResult.customRequire.cache[module];\n    // 如果没有缓存模块，使用原始 require 方式进行加载\n    if (!cachedModule)  {\n       cachedModule = {exports: originalLoad(module, ...args)};\n    }\n    // 返回模块内容\n    return cachedModule.exports;\n  };\n  \n  snapshotResult.setGlobals(global, process, window, document, console, global.require);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["最后，在 Electron 应用程序入口中引入重写 ",(0,r.jsx)(n.code,{children:"require"})," 的文件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// main.js\nrequire('../../tools/v8-snapshot-util')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["完整代码：",(0,r.jsx)(n.a,{href:"https://github.com/muwoo/electron-demo/tree/feat/v8-snapshot",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/muwoo/electron-demo/tree/feat/v8-snapshot"})]}),"\n",(0,r.jsxs)(n.h3,{id:"3-窗口创建优化",children:["3. 窗口创建优化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-窗口创建优化",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Electron 因为集成了 Node.js 和 Chromium，在创建 ",(0,r.jsx)(n.code,{children:"BrwoserWindow"})," 对象时需要对这些环境进行初始化，整体来看是比较耗时的操作。如果我们需要多窗口的操作，那么通常会通过以下手段进行优化窗口的打开性能。"]}),"\n",(0,r.jsxs)(n.h4,{id:"窗口预热",children:["窗口预热",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#窗口预热",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"窗口预热和前端页面的预渲染有点类似，简单来说就是将用户即将用到的窗口提前进行隐藏加载，等到用户需要的时候直接显示，给用户的体感是秒开，但其实是我们已经预热加载了。"}),"\n",(0,r.jsxs)(n.h4,{id:"窗口常驻",children:["窗口常驻",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#窗口常驻",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对于业务无关的、通用的窗口，也可以采用",(0,r.jsx)(n.strong,{children:"常驻模式"}),"，例如通知、图片查看器。这些窗口一旦创建就不会释放，打开效果会更好。"]}),"\n",(0,r.jsxs)(n.h4,{id:"窗口池",children:["窗口池",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#窗口池",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对于频繁开启/关闭的窗口，也可以使用",(0,r.jsx)(n.strong,{children:"窗口池"}),"来优化。"]}),"\n",(0,r.jsxs)(n.p,{children:["窗口池比较通用的方案是在应用创建的时候提前渲染 n 个空白的窗口并将其放入到一个集合中，当我们操作窗口时，从窗口池中获取一个空闲窗口（",(0,r.jsx)(n.strong,{children:"取出窗口后再立即创建一个新的窗口，将其补充到窗口池子中"}),"），当窗口关闭时，直接将其从窗口池中移除。"]}),"\n",(0,r.jsx)(n.p,{children:"比如，我们可以构造一个窗口池数组："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"items = [];\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后初始化的时候来创建一些窗口："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"init() {\n  // 初始创建 3 个窗口\n  for (let i = 0; i < 3; i++) {\n    this.items.push(new WindowPoolItem())\n  }\n  // 渲染进程发送消息告诉主进程需要从窗口池中获取一个窗口\n  ipcMain.handle('open-window', (e, data) => {\n    // 判断是否有正在使用的窗口\n    if (this.isWindowInUse(data)) return\n    // 从窗口池中选取一个窗口\n    this.picAndUse(data)\n  })\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在这个方法内，我们给窗口池创建了 3 个备用窗口；并监听了一个名为 ",(0,r.jsx)(n.code,{children:"open-window"})," 的消息，当渲染进程需要打开新窗口时，就会发送一条 ",(0,r.jsx)(n.code,{children:"ipc"})," 给主进程进行窗口创建。其中，",(0,r.jsx)(n.code,{children:"WindowPoolItem"})," 是窗口池中的单一窗口创建类："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class WindowPoolItem {\n  // 初始化窗口\n  constructor() {\n    this.params = undefined;\n    this.win = new BrowserWindow({\n      autoHideMenuBar: true,\n      show: false,\n      enableLargerThanScreen: true,\n      webPreferences: {\n        webSecurity: false,\n        contextIsolation: false,\n        webviewTag: true,\n        nodeIntegration: true,\n      },\n    });\n  }\n  // 使用窗口\n  use(params, close) {\n    this.params = params;\n    this.win.setBounds({\n      ...params,\n    });\n    this.win.loadURL(params.url);\n    this.win.once('ready-to-show', () => {\n      this.win.show();\n    });\n    this.win.on('close', () => {\n      close();\n    });\n  }\n  // 修改窗口参数\n  effectParam(params) {\n    this.win.setBounds({\n      ...params,\n    });\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"isWindowInUse"})," 函数通过窗口打开的 ",(0,r.jsx)(n.code,{children:"url"})," 来判断即将打开的窗口是否已经在使用中，如果已经在使用中，那么就不需要从窗口池中再获取新的窗口，只需要通过 ",(0,r.jsx)(n.code,{children:"effectParam"})," 调整一下参数即可："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"isWindowInUse(params) {\n  // 根据 url 判断窗口是否已经打开过\n  let item = this.items.find((v) => v.params?.url === params.url)\n  if (!item) return false\n  // 如果打开过了，对窗口位置、大小进行调整\n  item.effectParam(params)\n  return true\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果需要打开的窗口并没有被打开过，那么就需要通过 ",(0,r.jsx)(n.code,{children:"picAndUse"})," 来从窗口池中拿一个窗口加载，并立即创建一个窗口还给窗口池："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"picAndUse(params) {\n  // 没有params属性的，就是没用过的\n  let item = this.items.find((v) => !v.params);\n  // 使用窗口\n  item.use(params, () => {\n    // 窗口关闭后，从窗口池中移除\n    this.items = this.items.filter(v => v.params?.url !== params.url);\n  });\n  // 取出一个窗口后，立刻再创建一个窗口\n  this.items.push(new WindowPoolItem())\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["完整代码：",(0,r.jsx)(n.a,{href:"https://github.com/muwoo/electron-demo/tree/feat/window",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/muwoo/electron-demo/tree/feat/window"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["整体来看，不管是窗口预热，还是窗口常驻，又或是窗口池，都是",(0,r.jsx)(n.strong,{children:"空间（内存）换时间"}),"的策略，我们可以根据业务需要选择合理的窗口创建策略。"]}),"\n",(0,r.jsxs)(n.h3,{id:"4-预渲染",children:["4. 预渲染",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-预渲染",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["对于大多数基于 ",(0,r.jsx)(n.code,{children:"Vue"})," 或者 ",(0,r.jsx)(n.code,{children:"React"})," 的单页应用而言，页面的 DOM 会通过虚拟 DOM 进行渲染，这就意味着在虚拟 DOM 渲染为真实 DOM 之前，页面都是白屏的。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你的首页数据加载不是很依赖服务端数据，那么可以使用 ",(0,r.jsx)(n.a,{href:"https://github.com/chrisvfritz/prerender-spa-plugin",target:"_blank",rel:"noopener noreferrer",children:"prerender-spa-plugin"})," 这个 ",(0,r.jsx)(n.code,{children:"webpack"})," 插件来对页面做预渲染："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// vue.config.js\nconst path = require('path')\nconst PrerenderSPAPlugin = require('prerender-spa-plugin')\n\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      new PrerenderSPAPlugin({\n        // 预渲染输出的目录\n        staticDir: path.join(__dirname, 'dist'),\n        // 需要进行预渲染的页面\n        routes: [ '/' ],\n      })\n    ]\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果应用首页加载比较依赖服务端提供的数据，那么我们可以在资源未加载完毕之前，先展示页面的骨架，通过骨架屏的方式来让页面整体加载得更加流畅，避免长时间白屏，减少用户等待的焦虑感，比如掘金首页："}),"\n",(0,r.jsxs)(n.p,{children:["以 Vue 为例，你可以通过 ",(0,r.jsx)(n.a,{href:"https://github.com/michalsnik/vue-content-placeholders",target:"_blank",rel:"noopener noreferrer",children:"vue-content-placeholders"})," 这个库来轻松实现一个骨架图。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你的内容比较动态，有很大的不确定性，骨架图渲染的占位可能和最终呈现的效果有很大的出入，那么也可以采用一些开机 ",(0,r.jsx)(n.code,{children:"lodaing"})," 动画。"]}),"\n",(0,r.jsxs)(n.h2,{id:"内存优化",children:["内存优化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#内存优化",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在我们开发 Electron 应用时可以通过电脑的任务管理器（Windows）或者活动监视器（MacOS）来查看应用的内存占用情况。比如我们通过 ",(0,r.jsx)(n.code,{children:"electron-vite"})," 初始化一个 ",(0,r.jsx)(n.code,{children:"Electron"})," 应用，以 MacOS 举例，其内存占用情况大致如下："]}),"\n",(0,r.jsxs)(n.p,{children:["其中 ",(0,r.jsx)(n.code,{children:"Electron Helper"})," 是 Electron 应用中的辅助进程。这些辅助进程是 Electron 框架的一部分，用于协助主进程执行各种任务，以提高应用程序的性能和安全性。Electron Helper 进程执行诸如渲染网页内容、处理图形和执行其他异步任务等工作。例如，可能会看到 ",(0,r.jsx)(n.code,{children:"Electron Helper (Renderer)"})," 用于渲染应用程序的界面，以及 ",(0,r.jsx)(n.code,{children:"Electron Helper (GPU)"})," 用于处理图形加速。"]}),"\n",(0,r.jsxs)(n.h3,{id:"内存分析工具",children:["内存分析工具",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#内存分析工具",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Electron 内存分析工具通常是基于 ",(0,r.jsx)(n.code,{children:"Chrome Devtools"})," 来进行的。Electron 内存占用主要分为主进程内存占用和渲染进程内存占用。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"在主进程中"}),"，我们可以通过 ",(0,r.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/tutorial/debugging-main-process",target:"_blank",rel:"noopener noreferrer",children:"electron inspect"})," 来对应用程序的内存进行分析，如果你使用的是 ",(0,r.jsx)(n.a,{href:"https://cn.electron-vite.org/guide/debugging",target:"_blank",rel:"noopener noreferrer",children:"electron-vite"})," 来构建开发应用程序，那么可以使用其内置脚本来开启主进程调试："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"electron-vite --inspect --sourcemap\n"})}),"\n",(0,r.jsxs)(n.p,{children:["一旦 ",(0,r.jsx)(n.code,{children:"electron-vite"})," 启动，你可以通过在浏览器上打开\xa0",(0,r.jsx)(n.code,{children:"chrome://inspect"}),"\xa0并连接到 V8 inspector 来使用\xa0",(0,r.jsx)(n.code,{children:"Chrome DevTools"}),"\xa0调试："]}),"\n",(0,r.jsxs)(n.p,{children:["打开这个 ",(0,r.jsx)(n.code,{children:"inspect"})," 后，进入到 ",(0,r.jsx)(n.code,{children:"chrome DevTools"})," 后，点击 ",(0,r.jsx)(n.code,{children:"memory"})," 标签进行内存堆快照查看："]}),"\n",(0,r.jsxs)(n.p,{children:["通过 ",(0,r.jsx)(n.code,{children:"Memory Heap Snapshots"})," 可以帮助你找出内存泄漏或者不必要的内存占用。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"在渲染进程中"}),"，就可以通过 ",(0,r.jsx)(n.code,{children:"window.webContents.openDevTools()"})," 的方式来打开渲染进程窗口的 ",(0,r.jsx)(n.code,{children:"Chrome Devtools"})," 进行查看渲染进程的内存占用。"]}),"\n",(0,r.jsxs)(n.h3,{id:"常用的优化手段",children:["常用的优化手段",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常用的优化手段",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"常用的内存优化手段其实我们已经有过部分介绍，比如减少代码体积不仅能加快启动速度，还可以降低应用的内存占用。除此之外，我们再介绍一些对降低内存有用的几种优化手段。"}),"\n",(0,r.jsxs)(n.h4,{id:"1-优化图片资源加载",children:["1. 优化图片资源加载",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-优化图片资源加载",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在 Electron 中，加载不同大小的图片会影响内存占用。大尺寸的图片会占用更多的内存，因为它们需要更多的空间来存储像素数据。当你在应用程序中使用大量图片时，尤其要注意这一点，因为它们可能会显著增加内存的使用量。"}),"\n",(0,r.jsx)(n.p,{children:"通常情况下，合理优化图片大小和使用图片压缩技术能够有效地减少内存占用。这可能包括选择合适的图片格式（如 WebP、JPEG 或 PNG）以及压缩图片以降低文件大小。"}),"\n",(0,r.jsx)(n.p,{children:"另外，注意在使用图片时，及时释放不再需要的资源，比如将图片从内存中卸载或者销毁不再使用的图像对象，有助于降低内存的压力。"}),"\n",(0,r.jsxs)(n.h4,{id:"2-页面懒加载",children:["2. 页面懒加载",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-页面懒加载",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"DOM 的渲染和加载也会占用机器的大量内存，对于一些长列表的页面，我们可以做 DOM 的懒加载，只加载可视区域的内容来避免不必要的内存开销。"}),"\n",(0,r.jsxs)(n.h4,{id:"3-注意内存泄漏",children:["3. 注意内存泄漏",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-注意内存泄漏",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"V8 引擎有着自己的垃圾回收机制，虽然它在 GC（垃圾回收）方面有着其各种策略，并做了各种优化从而尽可能地确保垃圾得以回收，但我们仍应当避免任何可能导致无法回收的代码操作。常见的例子包括："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"未及时移除事件监听器："})," 当你添加了事件监听器，但在元素被移除之前未移除这些监听器时，会导致内存泄漏。这会导致对元素的引用仍然存在，即使元素自身已不再需要。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"闭包（Closure）："})," 在 JavaScript 中，闭包可以导致内存泄漏。当一个函数引用了另一个函数内的变量，并且这个函数被长期保留，即使它不再需要，闭包中引用的变量也会一直存在于内存中。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"定时器未清理："})," 使用 ",(0,r.jsx)(n.code,{children:"setInterval"})," 或 ",(0,r.jsx)(n.code,{children:"setTimeout"})," 创建的定时器，如果不及时清理或者取消，会一直存在于内存中，即使它们不再需要。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DOM 引用未释放："})," 当你从 DOM 中移除一个元素时，如果你仍然保持对该元素的引用（例如，还有其他对象引用了它），那么这个元素将不会被垃圾回收。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"大量未使用的缓存数据："})," 如果你在前端存储了大量的数据，尤其是长时间不再使用的数据，会占用大量内存。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["所以，我们编写代码时，要时刻注意可能存在内存泄露的场景，及时通过 ",(0,r.jsx)(n.code,{children:"Chrome DevTools"})," 进行内存分析查看。"]}),"\n",(0,r.jsxs)(n.h4,{id:"4-合理使用-browserwindow",children:["4. 合理使用 BrowserWindow",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-合理使用-browserwindow",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["通过\xa0",(0,r.jsx)(n.code,{children:"new BrowserWindow"}),"\xa0创建窗口，每个窗口都是独立的进程，如果多个窗口都使用了同一个资源，比如同一张图片或者同一个脚本，那这些窗口都会独立加载这些资源，造成内存浪费。"]}),"\n",(0,r.jsxs)(n.p,{children:["相对的，我们可以通过 ",(0,r.jsx)(n.code,{children:"window open"})," 的方式来创建新窗口，新窗口会在父窗口的渲染进程中创建，共用一个 ",(0,r.jsx)(n.code,{children:"render process"}),"，因此这些窗口是可以共享进程内存的。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"参考文章："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://juejin.cn/post/7201856537534939191",target:"_blank",rel:"noopener noreferrer",children:"我是如何将窗口的内存从500M降低到132M的"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/650624899",target:"_blank",rel:"noopener noreferrer",children:"腾讯 QQ 桌面版架构升级：内存优化探索与总结"})}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"以上，我们介绍了如何优化 Electron 的启动性能和内存占用。需要注意的是任何应用随着业务的迭代和演进，总体性能都是会呈现下降趋势的，性能优化不是一次性的工作，而是需要伴随着业务开发定期检查和优化。希望通过本小节的介绍，可以为你提供一些性能优化的手段和思路。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let d=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC21%E7%AB%A0%E2%80%94%E9%80%9A%E7%94%A8%E7%AF%87%EF%BC%9AElectron%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"启动速度优化",id:"启动速度优化",depth:2},{text:"1. 资源加载优化",id:"1-资源加载优化",depth:3},{text:"1.1 减少应用的依赖项",id:"11-减少应用的依赖项",depth:4},{text:"1.2 使用更加轻量的库",id:"12-使用更加轻量的库",depth:4},{text:"1.3 延后加载依赖项",id:"13-延后加载依赖项",depth:4},{text:"2. 提升代码加载速度",id:"2-提升代码加载速度",depth:3},{text:"2.1 打包压缩代码",id:"21-打包压缩代码",depth:4},{text:"2.2 手动添加 Tree shaking",id:"22-手动添加-tree-shaking",depth:4},{text:"2.3 减少 ipcRenderer.sendSync 调用",id:"23-减少-ipcrenderersendsync-调用",depth:4},{text:"2.4 使用 requestIdleCallback 优化加载顺序",id:"24-使用-requestidlecallback-优化加载顺序",depth:4},{text:"2.5 减轻主进程负荷",id:"25-减轻主进程负荷",depth:4},{text:"2.6 使用 V8 compile cache",id:"26-使用-v8-compile-cache",depth:4},{text:"2.7 使用 V8 snapshots",id:"27-使用-v8-snapshots",depth:4},{text:"3. 窗口创建优化",id:"3-窗口创建优化",depth:3},{text:"窗口预热",id:"窗口预热",depth:4},{text:"窗口常驻",id:"窗口常驻",depth:4},{text:"窗口池",id:"窗口池",depth:4},{text:"4. 预渲染",id:"4-预渲染",depth:3},{text:"内存优化",id:"内存优化",depth:2},{text:"内存分析工具",id:"内存分析工具",depth:3},{text:"常用的优化手段",id:"常用的优化手段",depth:3},{text:"1. 优化图片资源加载",id:"1-优化图片资源加载",depth:4},{text:"2. 页面懒加载",id:"2-页面懒加载",depth:4},{text:"3. 注意内存泄漏",id:"3-注意内存泄漏",depth:4},{text:"4. 合理使用 BrowserWindow",id:"4-合理使用-browserwindow",depth:4},{text:"总结",id:"总结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);