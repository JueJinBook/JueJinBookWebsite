"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["53403"],{659783:function(e,n,s){s.r(n),s.d(n,{default:()=>M});var c=s(552676),o=s(740453);let a=s.p+"static/image/8eb5df479ee9c9fa3972a86008559b29.ed842459.webp",t=s.p+"static/image/934b6d597dc75071b2d6c59558613039.6305be03.gif",i=s.p+"static/image/dbe8b17db9d0821d2b1a53ba82b197d5.0dfd58c5.gif",r=s.p+"static/image/db687ca50d5151480817fee8aa90ab78.0d3eca90.gif",d=s.p+"static/image/fbf9cc366dbcb9569737bdeab62c354a.9b841756.webp",l=s.p+"static/image/3c0d3dd13dba6d77a83505efc8bfd739.dcf61c5d.gif",p=s.p+"static/image/dfc3ef2778e2b3025c0762fcf0cc4f85.3108ad9a.webp",m=s.p+"static/image/11f9c62ab73b1b7273ad4d4c08cfdc98.a94dd907.gif",h=s.p+"static/image/d5ea9130b99444b770c7843f4fc1478a.b22c5f81.gif",j=s.p+"static/image/fa308da3987480625d9fe22b956bea55.b588adc1.webp",g=s.p+"static/image/1ac343e0b600c8fa94459e1bf78a1a68.2f36a835.webp",x=s.p+"static/image/1dd9a35efd02a09c589726e92da320a6.29d5384e.webp",b=s.p+"static/image/e5bfc8820b8e474473fbec0d2cbdbd63.116ef50c.webp",f=s.p+"static/image/234d9d619b03f64a503e31d38f72fdd0.06e6a6b3.webp",k=s.p+"static/image/7b266c1584770b4305a6555b23673977.8a6c9618.webp",u=s.p+"static/image/eb25cee0e983c4a700edead8e706e9ab.420f85c1.webp",y=s.p+"static/image/b5a71ecdb4ca38929d38d79ac5d697ba.0c3f69e2.webp",N=s.p+"static/image/4f6c7a80cc48c8b163b76bea0714bf44.392b0c97.webp",S=s.p+"static/image/dbc4c1354e900da6987dbab64b3b6ff3.71d58891.webp",v=s.p+"static/image/b6112f0294ddbe282d08391358ec76d5.dcfa002d.gif";function w(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,o.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"174-基于-socketio-的-room-实现群聊",children:["174. 基于 Socket.io 的 room 实现群聊",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#174-基于-socketio-的-room-实现群聊",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"上节学了 Nest 里如何创建 WebSocket 服务，这节我们实现下群聊功能。"}),"\n",(0,c.jsx)(n.p,{children:"微信我们可以在不同的群聊里聊天："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"如何实现这种功能呢？"}),"\n",(0,c.jsx)(n.p,{children:"这就要用到 socket.io 的 room 功能了。"}),"\n",(0,c.jsx)(n.p,{children:"socket.io 支持加入房间："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"socket.join('room666')\n"})}),"\n",(0,c.jsx)(n.p,{children:"可以向对应房间发消息："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'serveer.to("room666").emit("新成员加入了群聊")\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这样就实现了群聊功能。"}),"\n",(0,c.jsx)(n.p,{children:"我们来写一下："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"nest new group-chat-room\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"进入项目，安装 websocket 的包："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm i --save @nestjs/websockets @nestjs/platform-socket.io socket.io\n"})}),"\n",(0,c.jsx)(n.p,{children:"然后创建个 websocket 模块："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"nest g resource chatroom\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"注意，选择生成 WebSockets 类型的代码。"}),"\n",(0,c.jsx)(n.p,{children:"这样，基于 websocket 的 crud 代码就生成了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这些我们上节写过。"}),"\n",(0,c.jsx)(n.p,{children:"在 main.ts 里支持下 pages 这个静态目录的访问："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { NestApplication, NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { NestExpressApplication } from '@nestjs/platform-express';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(AppModule);\n\n  app.useStaticAssets('pages');\n  await app.listen(3000);\n}\nbootstrap();\n"})}),"\n",(0,c.jsx)(n.p,{children:"创建 pages/index.html"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:"<html>\n  <head>\n    <script src=\"https://cdn.socket.io/4.3.2/socket.io.min.js\"><\/script>\n    <script>\n      const socket = io('http://localhost:3000');\n      socket.on('connect', function() {\n        console.log('Connected');\n\n        socket.emit('findAllChatroom', function(data) {\n            console.log('allChatroom', data);\n        });\n      });\n      socket.on('disconnect', function() {\n        console.log('Disconnected');\n      });\n    <\/script>\n  </head>\n\n  <body></body>\n</html>\n\n"})}),"\n",(0,c.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"浏览器访问下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"打印了返回的消息。"}),"\n",(0,c.jsx)(n.p,{children:"然后我们实现下房间的功能："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { MessageBody,SubscribeMessage, WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\n\n@WebSocketGateway()\nexport class ChatroomGateway {\n  @WebSocketServer() server: Server;\n\n  @SubscribeMessage('joinRoom')\n  joinRoom(client: Socket, room: string): void {\n    console.log(room);\n    client.join(room);\n    this.server.to(room).emit('message', `新用户加入了 ${room} 房间`);\n  }\n\n  @SubscribeMessage('sendMessage')\n  sendMessage(client: Socket, payload: any): void {\n    console.log(payload);\n    this.server.to(payload.room).emit('message', payload.message);\n  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"添加一个 joinRoom 的路由，它接收 room 参数，把 client 加入对应房间。"}),"\n",(0,c.jsx)(n.p,{children:"然后给这个房间发送一个欢迎消息。"}),"\n",(0,c.jsx)(n.p,{children:"然后加一个 sendMessage 的路由，接收房间和消息，可以给对应 room 发送消息。"}),"\n",(0,c.jsx)(n.p,{children:"之前我们都是这样取消息："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这两种是等价写法："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"然后我们在客户端也加入 room 功能："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"<html>\n  <head>\n    <script src=\"https://cdn.socket.io/4.3.2/socket.io.min.js\"><\/script>\n    <script>\n        const roomName = prompt('输入群聊名');\n        if(roomName) {\n            const socket = io('http://localhost:3000');\n            socket.on('connect', function() {\n                console.log('Connected');\n\n                socket.emit('joinRoom', roomName);\n\n                socket.on('message', (message) => {\n                    console.log('收到来自房间的消息:', message);\n                });\n\n                socket.emit('sendMessage', { room: roomName, message: 'Hello, everyone!' });\n            });\n            socket.on('disconnect', function() {\n                console.log('Disconnected');\n            });\n        } else {\n            alert('请输入群聊名');\n        }\n    <\/script>\n  </head>\n\n  <body></body>\n</html>\n"})}),"\n",(0,c.jsx)(n.p,{children:"进入页面首先输入群聊名，然后加入对应房间，并发一个消息。"}),"\n",(0,c.jsx)(n.p,{children:"测试下："}),"\n",(0,c.jsxs)(n.p,{children:["打开页面，进入 aaa 房间，发送了一条消息：\n",(0,c.jsx)("img",{src:h,alt:""})]}),"\n",(0,c.jsx)(n.p,{children:"再打开一个页面，进入 aaa 房间："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这时候之前那个房间就有 2 条消息了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"再打开一个页面，进入 bbb 房间，这时候之前的 aaa 房间并没有收到消息："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这样，群聊房间功能就实现了。"}),"\n",(0,c.jsx)(n.p,{children:"我们再完善一下："}),"\n",(0,c.jsx)(n.p,{children:"首先 payload 都传入 room 和 nickName。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { MessageBody,SubscribeMessage, WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\n\n@WebSocketGateway()\nexport class ChatroomGateway {\n  @WebSocketServer() server: Server;\n\n  @SubscribeMessage('joinRoom')\n  joinRoom(client: Socket, payload: any): void {\n    console.log(payload.roomName);\n    client.join(payload.roomName);\n    this.server.to(payload.roomName).emit('message', {\n      nickName: payload.nickName,\n      message: `${payload.nickName} 加入了 ${payload.roomName} 房间`\n    });\n  }\n\n  @SubscribeMessage('sendMessage')\n  sendMessage(@MessageBody() payload: any): void {\n    console.log(payload);\n    this.server.to(payload.room).emit('message', { nickName: payload.nickName, message: payload.message});\n  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"然后改下 client："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"<html>\n  <head>\n    <script src=\"https://cdn.socket.io/4.3.2/socket.io.min.js\"><\/script>\n  </head>\n  <body>\n\n    <div id=\"messageBox\">\n    </div>\n\n    <input id=\"messageInput\"/>\n    <button id=\"sendMessage\">发送</button>\n\n    <script>\n        const messageBox = document.getElementById('messageBox');\n        const messageInput = document.getElementById('messageInput');\n        const sendMessage = document.getElementById('sendMessage');\n\n        const roomName = prompt('输入群聊名');\n        const nickName = prompt('输入昵称');\n        if(roomName && nickName) {\n            const socket = io('http://localhost:3000');\n            socket.on('connect', function() {\n                console.log('Connected');\n\n                socket.emit('joinRoom', { roomName, nickName});\n\n                socket.on('message', (payload) => {\n                    console.log('收到来自房间的消息:', payload);\n\n                    const item = document.createElement('div');\n                    item.className = 'message'\n                    item.textContent = payload.nickName + ':  ' + payload.message;\n                    messageBox.appendChild(item);\n                });\n            });\n\n            sendMessage.onclick = function() {\n                socket.emit('sendMessage', { room: roomName, nickName, message: messageInput.value });\n            }\n\n            socket.on('disconnect', function() {\n                console.log('Disconnected');\n            });\n        }\n    <\/script>\n  </body>\n</html>\n"})}),"\n",(0,c.jsx)(n.p,{children:"进入页面输入群聊名和昵称。"}),"\n",(0,c.jsx)(n.p,{children:"加上 messageBox 用于显示消息。"}),"\n",(0,c.jsx)(n.p,{children:"在输入框输入内容，点击的时候发送消息。"}),"\n",(0,c.jsx)(n.p,{children:"测试下："}),"\n",(0,c.jsx)(n.p,{children:"打开一个页面发消息："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"再打开一个页面："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"可以看到，另一个页面也收到消息了，因为这俩在一个房间。"}),"\n",(0,c.jsx)(n.p,{children:"我们进入其他房间发消息试试："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这时候另外两个页面就没收到消息了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"因为在不同房间。"}),"\n",(0,c.jsxs)(n.p,{children:["代码在",(0,c.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/group-chat-room",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"这节我们实现了群聊功能。"}),"\n",(0,c.jsx)(n.p,{children:"主要是基于 socket.io 的 room 实现的，可以把 client socket 加入某个 room，然后向这个 room 发消息。"}),"\n",(0,c.jsx)(n.p,{children:"这样，发消息的时候带上昵称、群聊名等内容，就可以往指定群聊发消息了。"}),"\n",(0,c.jsx)(n.p,{children:"更完善的聊天室，会带上 userId、groupId 等，然后可以根据这俩 id 查询更详细的信息，但只是消息格式更复杂一些，原理都是 room。"})]})}function E(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(w,{...e})}):w(e)}let M=E;E.__RSPRESS_PAGE_META={},E.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F174.%20%E5%9F%BA%E4%BA%8E%20Socket.io%20%E7%9A%84%20room%20%E5%AE%9E%E7%8E%B0%E7%BE%A4%E8%81%8A.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"174. 基于 Socket.io 的 room 实现群聊",headingTitle:"174. 基于 Socket.io 的 room 实现群聊",frontmatter:{}}}}]);