"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["93815"],{693604:function(n,e,t){t.r(e),t.d(e,{default:()=>f});var r=t(552676),i=t(740453);let o=t.p+"static/image/7d06f704aa9f19ac9a70ec7d932342e2.5fbcd552.webp",s=t.p+"static/image/23554497f57fa5143dc1e0a177cd3abe.669c4065.webp",a=t.p+"static/image/eca94c499d13c0b748341cb510393a6c.a2ef9fa3.webp",c=t.p+"static/image/6866e1d056f4c3648eda16671e954ecf.3b923b6c.webp",l=t.p+"static/image/5faeff4783bd3f2cf1856c2640001024.a91c716b.webp",d=t.p+"static/image/f57fc116fe47303a5ebfd4bfc4ede791.20cf6156.webp",p=t.p+"static/image/10e114220245e76d54e302b94bb2f5c8.1c482b06.webp",m=t.p+"static/image/f868310c998d81999f76fcc8c092ff1b.13096bbe.webp";function h(n){let e=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",img:"img",pre:"pre",code:"code",ul:"ul",li:"li"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"12多媒体适配_-官网的设备样式兼容方案",children:["12.多媒体适配_ 官网的设备样式兼容方案",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#12多媒体适配_-官网的设备样式兼容方案",children:"#"})]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["仓库地址：",(0,r.jsx)(e.a,{href:"https://github.com/czm1290433700/nextjs-demo",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/czm1290433700/nextjs-demo"})]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"上一节课我们学习了怎么实现复杂的帧动画，通过对比我们使用 Animation 对动画进行了逐帧实现，并且我们还了解了怎么去主动触发我们实现的帧动画，使得我们页面的动画效果具备更高的灵活性，到这里其实我们官网大部分的功能就已经实现了。"}),"\n",(0,r.jsx)(e.p,{children:"但是之前我们的页面只绘制了 pc 端的样式，通常官网需要支持 pc、 ipad、 移动端等多种设备的访问，所以这一节课我们就来学习怎么对多媒体设备的样式进行兼容适配。"}),"\n",(0,r.jsxs)(e.h2,{id:"px-转-rem",children:["Px 转 Rem",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#px-转-rem",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"在进行适配之前，我们需要先了解一下 rem 和 px，有过 c 端开发经验的同学对这两个单位应该都不陌生。px 是相对屏幕分辨率的像素单位，通常对于纯 b 端业务，或是只需要适配少部分手机设备，且分辨率对页面影响不大的，我们通常使用 px 进行样式的开发。至于 rem，是相对 HTML 根元素字体大小而确定的相对单位，对于多媒体的适配，我们常用 rem 进行开发。"}),"\n",(0,r.jsx)(e.p,{children:"所以我们需要对之前的样式进行一下替换，将 px 单位替换为 rem，这个过程我们通过 cssrem 的 vscode 插件来协助完成，可以参照下图安装，默认的的根字体为 16px，需要更新的同学可以右键插件，选择扩展配置调整即可。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"安装完成后，我们移步到样式问题，输入 16px，可以看到会有对应 rem 提示，我们将所有的 px 单位替换即可。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsxs)(e.h2,{id:"css-多媒体设备适配",children:["CSS 多媒体设备适配",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#css-多媒体设备适配",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"CSS 的多媒体设备适配大家应该不陌生，通过编写不同的媒体设备样式来进行适配就可，这种常用于 dom 结构变化不大，可以复用 dom 的基础上，调整样式就能适配的场景。为加强复用，我们可以定义几个常用的设备场景。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"// ./pages/media.scss\n// 极小分辨率移动端设备\n@mixin media-mini-mobile {\n  @media screen and (max-width: 25.875rem) {\n    @content;\n  }\n}\n\n// 介于极小分辨率和正常分辨率之间的移动端设备\n@mixin media-between-mini-and-normal-mobile {\n  @media screen and (min-width: 25.876rem) and (max-width: 47.9375rem) {\n    @content;\n  }\n}\n\n// 移动端设备\n@mixin media-mobile {\n  @media screen and (max-width: 47.9375rem) {\n    @content;\n  }\n}\n\n// ipad\n@mixin media-ipad {\n  @media screen and (min-width: 47.9375rem) and (max-width: 75rem) {\n    @content;\n  }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"在大部分场景，我们可以直接引入这些定义进行适配。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"@include media-ipad {\n// ...\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"大家也可以采用自定义分辨率的方式适配，我们以 footer 组件举例，改造一下它之前的样式。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./components/footer/styles.module.scss\n@import "../../pages/media.scss";\n\n.footer {\n  font-size: 16px;\n  padding: 4.375rem 9.0625rem;\n  background-color: var(--footer-background-color);\n  .topArea {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n\n    .footerTitle {\n      font-weight: 500;\n      font-size: 2.25rem;\n      line-height: 2.25rem;\n      color: var(--primary-color);\n      margin: 0;\n    }\n\n    .linkListArea {\n      display: flex;\n      .linkArea {\n        display: flex;\n        flex-direction: column;\n        margin-left: 10rem;\n        .title {\n          font-weight: 500;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          color: var(--primary-color);\n          margin-bottom: 2.5rem;\n          word-break: keep-all;\n        }\n\n        .links {\n          display: flex;\n          flex-direction: column;\n          font-weight: 400;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          word-break: keep-all;\n\n          .link {\n            color: var(--primary-color);\n            cursor: pointer;\n            margin-bottom: 1.5rem;\n          }\n\n          .disabled {\n            color: var(--secondary-color);\n            cursor: not-allowed;\n            margin-bottom: 1.5rem;\n          }\n        }\n      }\n\n      .linkArea:first-of-type {\n        margin-left: 0;\n      }\n    }\n  }\n\n  .bottomArea {\n    display: flex;\n    justify-content: space-between;\n    .codeArea {\n      display: flex;\n      flex-direction: column;\n      .text {\n        color: var(--secondary-color);\n      }\n    }\n    .numArea {\n      color: var(--secondary-color);\n      display: flex;\n      flex-direction: column;\n      align-items: flex-end;\n      font-weight: 400;\n      font-size: 0.875rem;\n      line-height: 1.25rem;\n\n      span {\n        margin-bottom: 0.75rem;\n      }\n\n      .publicLogo {\n        display: flex;\n\n        .logo {\n          margin-right: 0.25rem;\n        }\n      }\n    }\n  }\n}\n\n@media screen and (min-width: 48.6875rem) and (max-width: 54.125rem) {\n  .footer {\n    .topArea {\n      .footerTitle {\n        margin-bottom: 1.25rem;\n      }\n    }\n  }\n}\n\n@media screen and (max-width: 48.6875rem) {\n  .footer {\n    .topArea {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      .footerTitle {\n        margin-bottom: 2.5rem;\n      }\n      .linkListArea {\n        display: flex;\n        flex-direction: column;\n        text-align: center;\n        .linkArea {\n          margin-left: 0;\n        }\n      }\n    }\n\n    .bottomArea {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n\n      .codeArea {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n\n        .text {\n          text-align: center;\n          margin: 20px 0;\n        }\n      }\n\n      .numArea {\n        align-items: center;\n        text-align: center;\n      }\n    }\n  }\n}\n\n// @include media-ipad {\n// }\n'})}),"\n",(0,r.jsxs)(e.p,{children:["我们分别绘制了两种分辨率下的场景，这些会作为扩展样式引入，当页面处理到解析 CSS 树的时候，会一并扩展到渲染树中渲染，我们来看一下效果。\n",(0,r.jsx)("img",{src:d,alt:"A Demo for 《深入浅出SSR官网开发指南》(移动端) - Google Chrome 2022-08-14 15-54-08.gif"}),"\n当然我们也可以通过 network 选中设备的方式查看，那个是更加真实的模拟方式，包括请求头在内的都会同步为对应设备，类似这种拖动的查看方式，是为了排查是否有边界的分辨率遗漏，可以覆盖全部的场景。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)("img",{src:l,alt:"image.png"}),"\n对于剩下的区域，同学们可以课下自己模仿练习试试，只需要拖动控制台没有显示异常的区域大致就算完成了。"]}),"\n",(0,r.jsxs)(e.h2,{id:"客户端-context-注入设备信息",children:["客户端 Context 注入设备信息",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#客户端-context-注入设备信息",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"对于页面的样式适配，CSS media 已经可以覆盖绝大部分的场景，但是小部分的场景仍然无法覆盖，比如在一些媒体设备下，不再采用原本的 dom 结构，换用别的交互形式，就没办法直接用样式覆盖了，而是需要通过在客户端判断当前的设备，选用不同的交互，比如抖音前端技术团队官网的菜单，在低分辨率场景就会采用右侧弹出的方式来显示。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"那么针对这种场景，我们应该怎么在客户端判断当前的设备呢？"}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141549531249770499",target:"_blank",rel:"noopener noreferrer",children:"10 | 样式注入：如何实现一个主题化功能？"})," 我们有介绍 useContext 的用法，为了避免逻辑的分散，所以我们定义了主题的 context 在全局进行注入，这里我们同样可以定义一个 context，用于判断当前的设备，然后注入给每个页面。判断设备的方式其实也很简单，通过页宽来判断就可。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./stores/userAgent.tsx\nimport React, { useState, useEffect, createContext } from "react";\nimport { Environment } from "@/constants/enum";\n\n// export enum Environment {\n//   pc = "pc",\n//   ipad = "ipad",\n//   mobile = "mobile",\n//   none = "none",\n// } \n\ninterface IUserAgentContextProps {\n  userAgent: Environment;\n}\n\ninterface IProps {\n  children: JSX.Element;\n}\n\nexport const UserAgentContext = createContext<IUserAgentContextProps>(\n  {} as IUserAgentContextProps\n);\n\nexport const UserAgentProvider = ({ children }: IProps): JSX.Element => {\n  const [userAgent, setUserAgent] = useState<Environment>(Environment.none); // 服务器渲染初始化渲染未必是预期效果，none缓冲切换视觉)\n\n  // 监听本地缓存来同步不同页面间的主题（当前页面无法监听到，直接在顶部栏进行了类的切换)\n  useEffect(() => {\n    const checkUserAgent = (): void => {\n      const width = document.body.offsetWidth;\n      // 用宽度去判断，是为了适配不改机型，仅拉扯屏幕宽度的情况\n      if (width < 768) {\n        // 手机端\n        setUserAgent(Environment.mobile);\n      } else if (width >= 768 && width < 1200) {\n        // ipad端\n        setUserAgent(Environment.ipad);\n      } else if (width >= 1200) {\n        // pc端\n        setUserAgent(Environment.pc);\n      } else {\n        setUserAgent(Environment.none); // 增加none类型来缓冲默认类型样式切换时的视觉突变\n      }\n    };\n    checkUserAgent();\n    window.addEventListener("resize", checkUserAgent); // 监听屏幕宽度变化，及时适配当前页面样式\n    return (): void => {\n      window.removeEventListener("resize", checkUserAgent);\n    };\n  }, [typeof document !== "undefined" && document.body.offsetWidth]);\n\n  return (\n    <UserAgentContext.Provider value={{ userAgent }}>\n      {children}\n    </UserAgentContext.Provider>\n  );\n};\n'})}),"\n",(0,r.jsx)(e.p,{children:"这里有两个需要讲解的点："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"Environment.none"}),"：设置一个空态，是为了避免未取到页宽时，错误赋值非当前页面的设备分辨率的值，导致可能会出现分辨率样式的短暂切换造成的视觉冲突。"]}),"\n"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:'typeof document !== "undefined" && document.body.offsetWidth'}),"： 在",(0,r.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141320046864777228",target:"_blank",rel:"noopener noreferrer",children:"05 | 架构实现（三）：如何支持 SSR对数据的请求？"})," 中实现注水脱水的时候我们也有遇到过类似的问题，因为除钩子方法里（比如 useEffect）以外的逻辑，都是会在服务器端执行的，在服务器端是没有 BOM 的注入的，所以我们需要对 BOM 的调用进行判空。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"然后我们把这个 context 同样注入到入口文件。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"// ./pages/_app.tsx\n// ...\n<ThemeContextProvider>\n    <UserAgentProvider>\n      <Layout navbarData={navbarData} footerData={footerData}>\n        <Component {...pageProps} />\n      </Layout>\n    </UserAgentProvider>\n</ThemeContextProvider>\n// ...\n"})}),"\n",(0,r.jsx)(e.p,{children:"我们在 navbar 组件简单调用试试。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./components/navbar/index.tsx\nimport { FC, useContext } from "react";\nimport styles from "./styles.module.scss";\nimport { ThemeContext } from "@/stores/theme";\nimport { UserAgentContext } from "@/stores/userAgent";\nimport { Themes, Environment } from "@/constants/enum";\n\nexport interface INavBarProps {}\n\nexport const NavBar: FC<INavBarProps> = ({}) => {\n  const { setTheme } = useContext(ThemeContext);\n  const { userAgent } = useContext(UserAgentContext);\n\n  return (\n    <div className={styles.navBar}>\n      <a href="http://localhost:3000/">\n        <div className={styles.logoIcon}></div>\n      </a>\n      <div className={styles.themeArea}>\n        {userAgent === Environment.pc && (\n          <span className={styles.text}>当前是pc端样式</span>\n        )}\n        {userAgent === Environment.ipad && (\n          <span className={styles.text}>当前是Ipad端样式</span>\n        )}\n        {userAgent === Environment.mobile && (\n          <span className={styles.text}>当前是移动端样式</span>\n        )}\n        <div\n          className={styles.themeIcon}\n          onClick={(): void => {\n            if (localStorage.getItem("theme") === Themes.light) {\n              setTheme(Themes.dark);\n            } else {\n              setTheme(Themes.light);\n            }\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,r.jsx)(e.p,{children:"我们来看看效果。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"因为我们还监听了页宽变化的事件，所以这个是可以随着页宽变化实时更新的，上面的录屏也有这部分效果，大家可以翻至上页查看。"}),"\n",(0,r.jsxs)(e.h2,{id:"在服务器端判定设备信息",children:["在服务器端判定设备信息",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#在服务器端判定设备信息",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"客户端判定设备其实存在一个小问题是，因为 HTML 文本的生成是在服务器端生成的，客户端判断设备信息会存在一个初始态到实际设备数据短暂切换的问题，而且如果不同设备展示的内容不同，还有可能会影响到实际的 SEO ，那么有没有办法可以在服务器端判断当前的访问设备呢？"}),"\n",(0,r.jsx)(e.p,{children:"也是有的，虽然服务器端拿不到当前访问的客户端页宽等数据，但是客户端在服务器端请求的时候，请求头中有一个 user-agent 请求头，可以用来判断当前的设备是 pc 端还是移动端，通过这个来判断，我们就可以在 HTML 文本返回前，就拿到实际的设备 DOM。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"我们首先来定义一下判断设备的通用方法。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./utils/index.tsx\nexport const getIsMobile = (context: AppContext) => {\n  const { headers = {} } = context.ctx.req || {};\n  return /mobile|android|iphone|ipad|phone/i.test(\n    (headers["user-agent"] || "").toLowerCase()\n  );\n};\n'})}),"\n",(0,r.jsx)(e.p,{children:"然后我们在入口文件的注入函数里，额外注入一个设备信息，如果是移动端，我们就给标题加一个“（移动端）”， 如果是 pc 端，我们就加一个 “（pc 端）”。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./pages/_app.tsx\nimport type { AppProps, AppContext } from "next/app";\nimport App from "next/app";\nimport { Layout, ILayoutProps } from "@/components/layout";\nimport Head from "next/head";\nimport axios from "axios";\nimport { getIsMobile, LOCALDOMAIN } from "@/utils";\nimport { ThemeContextProvider } from "@/stores/theme";\nimport { UserAgentProvider } from "@/stores/userAgent";\nimport "./global.scss";\n\nconst MyApp = (data: AppProps & ILayoutProps & { isMobile: boolean }) => {\n  const { Component, pageProps, navbarData, footerData, isMobile } = data;\n\n  return (\n    <div>\n      <Head>\n        <title>{`A Demo for 《深入浅出SSR官网开发指南》(${\n          isMobile ? "移动端" : "pc端"\n        })`}</title>\n        <meta\n          name="description"\n          content={`A Demo for 《深入浅出SSR官网开发指南》(${\n            isMobile ? "移动端" : "pc端"\n          })`}\n        />\n        <link rel="icon" href="/favicon.ico" />\n      </Head>\n      <ThemeContextProvider>\n        <UserAgentProvider>\n          <Layout navbarData={navbarData} footerData={footerData}>\n            <Component {...pageProps} />\n          </Layout>\n        </UserAgentProvider>\n      </ThemeContextProvider>\n    </div>\n  );\n};\n\nMyApp.getInitialProps = async (context: AppContext) => {\n  const pageProps = await App.getInitialProps(context);\n  const { data = {} } = await axios.get(`${LOCALDOMAIN}/api/layout`);\n\n  return {\n    ...pageProps,\n    ...data,\n    isMobile: getIsMobile(context),\n  };\n};\n\nexport default MyApp;\n'})}),"\n",(0,r.jsx)(e.p,{children:"然后我们来看看效果，可以看到返回的 HTML 文本里已经包含设备信息的判断了。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,r.jsxs)(e.h2,{id:"一个小彩蛋",children:["一个小彩蛋",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一个小彩蛋",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"同学们好 ~ 小册的名称与编辑同学确定，最终改为《SSR 实战：官网开发指南》，中间名称有多次调整，之前写的课程文案中部分首页截图文案可能为《深入浅出SSR官网开发指南》或是《官网开发：SSR 应用实战指南》，考虑到需要还原当时场景重新截图比较费时=。=，这边就不统一替换了。从下一节课开始，相关的首页截图会统一调整为《SSR 实战：官网开发指南》。感谢同学们的理解~"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'// ./pages/index.tsx\n// ...\nHome.getInitialProps = (context) => {\n  return {\n    title: "Hello SSR!",\n    description: "A Demo for 《SSR 实战：官网开发指南》", // rename 小册，谢谢大家~\n    list: [\n      {\n        label: "文章1",\n        info: "A test for article1",\n        link: "http://localhost:3000/article/1",\n      },\n      {\n        label: "文章2",\n        info: "A test for article2",\n        link: "http://localhost:3000/article/2",\n      },\n      {\n        label: "文章3",\n        info: "A test for article3",\n        link: "http://localhost:3000/article/3",\n      },\n      {\n        label: "文章4",\n        info: "A test for article4",\n        link: "http://localhost:3000/article/4",\n      },\n      {\n        label: "文章5",\n        info: "A test for article5",\n        link: "http://localhost:3000/article/5",\n      },\n      {\n        label: "文章6",\n        info: "A test for article6",\n        link: "http://localhost:3000/article/6",\n      },\n    ],\n  };\n};\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"小结",children:["小结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"这节课我们学习了怎么对 SSR 页面进行多媒体适配，对于大部分场景，我们都通过 css media 的方式来进行样式的适配，我们就 footer 组件举例，为它覆盖了 ipad， mobile 等场景的样式，对于剩下的组件和页面，我们作为课后的一个小作业留给同学试验，大家可以通过调整它们的字体大小，间宽，让不同设备下的访问更好看一些。"}),"\n",(0,r.jsx)(e.p,{children:"同时因为 SSR 的特点，常见的 css media 适配的方式并不能满足我们的所有需求。针对可以复用 dom，只需要调整样式的场景，我们可以采用 css media 的方式；针对 dom 需要根据设备定制的场景，我们则需要通过客户端注入的方式，通过脚本逻辑来进行结构的适配；如果是不同设备下展示的内容不同，或者区域有较大的变化，出于交互和 SEO 的考虑，我们则需要通过客户端向服务器端发送的请求头来判断当前设备的类型，来确保服务器端返回的 HTML 文本是正确设备下所需要的。"}),"\n",(0,r.jsxs)(e.p,{children:["在下一节课，我们将重识我们的老朋友 Strapi，在",(0,r.jsx)(e.a,{href:"https://juejin.cn/book/7137945369635192836/section/7141544709205262368",target:"_blank",rel:"noopener noreferrer",children:"08 | 数据可视化：基于 Strapi 实现后台数据的灵活配置"})," 中我们介绍了它的一些基础能力，但是实际它的能力还远不止此，下一节课我们将学习 Strapi 的一些进阶知识，来实现我们的文章页分页和国际化功能。"]})]})}function x(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}let f=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["SSR%20%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AE%98%E7%BD%91%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F12.%E5%A4%9A%E5%AA%92%E4%BD%93%E9%80%82%E9%85%8D_%20%E5%AE%98%E7%BD%91%E7%9A%84%E8%AE%BE%E5%A4%87%E6%A0%B7%E5%BC%8F%E5%85%BC%E5%AE%B9%E6%96%B9%E6%A1%88.md"]={toc:[{text:"Px 转 Rem",id:"px-转-rem",depth:2},{text:"CSS 多媒体设备适配",id:"css-多媒体设备适配",depth:2},{text:"客户端 Context 注入设备信息",id:"客户端-context-注入设备信息",depth:2},{text:"在服务器端判定设备信息",id:"在服务器端判定设备信息",depth:2},{text:"一个小彩蛋",id:"一个小彩蛋",depth:2},{text:"小结",id:"小结",depth:2}],title:"12.多媒体适配_ 官网的设备样式兼容方案",headingTitle:"12.多媒体适配_ 官网的设备样式兼容方案",frontmatter:{}}}}]);