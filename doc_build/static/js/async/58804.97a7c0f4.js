"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["58804"],{727034:function(n,e,s){s.r(e),s.d(e,{default:()=>a});var r=s(552676),t=s(740453);let c=s.p+"static/image/edd79fdf09060ab32add483fa7ba8849.4648012c.webp",d=s.p+"static/image/b9236130091aab2d8ae7b676f44ac059.8e15f908.webp",i=s.p+"static/image/caae01e20543822ad6bab99f6820cec1.76427d69.webp";function o(n){let e=Object.assign({h1:"h1",a:"a",p:"p",ol:"ol",li:"li",strong:"strong",h3:"h3",pre:"pre",code:"code",img:"img",blockquote:"blockquote",h2:"h2"},(0,t.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"35客户端实战远程资源加载实现",children:["35.客户端实战：远程资源加载实现",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#35客户端实战远程资源加载实现",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"在低代码平当中，要想用户能获得更灵活的体验，那么就必然会涉及到加载远程资源的技术实现。通过加载远程资源，用户可以完成自定义物料组件、工具库、样式等一些列的资源导入，从而增强平台的能力。在通用低代码平台的基座上，增加以下一系列能力："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["远程脚本加载：通过在低代码平台中嵌入脚本标签，引用远程资源的URL，例如 ",(0,r.jsx)(e.strong,{children:"JavaScript"})," 或 ",(0,r.jsx)(e.strong,{children:"CSS"})," 文件。类似于初始化",(0,r.jsx)(e.strong,{children:"RestCSS"}),"、监控等注入性上下文。"]}),"\n",(0,r.jsx)(e.li,{children:"插件系统：提供自定义插件系统，允许用户通过加载插件来扩展平台的功能。这些插件可以包含自定义的组件、工具库和样式等资源，用户可以根据自己的需求选择加载并使用。"}),"\n",(0,r.jsx)(e.li,{children:"动态模块加载：动态模块加载的功能，可以在运行时根据用户的需求加载远程资源。这样用户可以根据需要选择加载所需的组件和资源，以实现定制化的功能和体验。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"通过远程资源加载可以实现以上的一些内容远程化，除了能够解耦基座的设计外，同时也更加的灵活的插拔内容功能。"}),"\n",(0,r.jsxs)(e.h3,{id:"模块概念",children:["模块概念",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#模块概念",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.strong,{children:"javaScript"}),"中，随着版本更迭和技术趋势的发展，模块的概念也衍生出了几张不同的概念，大体上分为以下几种："]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"UMD"}),"：",(0,r.jsx)(e.strong,{children:"UMD"})," 是一种模块定义格式，它允许模块在不同的环境中使用，包括浏览器环境和 ",(0,r.jsx)(e.strong,{children:"Node.js"})," 环境。",(0,r.jsx)(e.strong,{children:"UMD"})," 模块可以通过多种方式导出和导入，以适应不同的模块加载器和环境。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"AMD"}),"：",(0,r.jsx)(e.strong,{children:"AMD"})," 是一种异步模块定义格式，主要用于浏览器环境。它允许在模块加载时使用异步方式进行加载和定义依赖关系。",(0,r.jsx)(e.strong,{children:"RequireJS"})," 是一个常用的 ",(0,r.jsx)(e.strong,{children:"AMD"})," 模块加载器。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"CommonJS"}),"：",(0,r.jsx)(e.strong,{children:"CommonJS"})," 是一种模块定义规范，主要用于 ",(0,r.jsx)(e.strong,{children:"Node.js"})," 环境。它使用 ",(0,r.jsx)(e.strong,{children:"require"})," 和 ",(0,r.jsx)(e.strong,{children:"module.exports"})," 来导入和导出模块。",(0,r.jsx)(e.strong,{children:"CommonJS"})," 模块是同步加载的，适用于服务器端应用程序。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"SystemJS"}),"：",(0,r.jsx)(e.strong,{children:"SystemJS"})," 是一个通用的模块加载器，它能够在浏览器中加载多种模块格式，包括 ",(0,r.jsx)(e.strong,{children:"AMD"}),"、",(0,r.jsx)(e.strong,{children:"CommonJS"})," 和 ",(0,r.jsx)(e.strong,{children:"ES6"})," 模块。",(0,r.jsx)(e.strong,{children:"SystemJS"})," 具有很高的灵活性，可以适应不同的模块加载需求。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"ESM"}),"：",(0,r.jsx)(e.strong,{children:"ESM"})," 是 ",(0,r.jsx)(e.strong,{children:"ECMAScript"})," 的官方模块系统，它在 ",(0,r.jsx)(e.strong,{children:"ES6"})," 中引入。",(0,r.jsx)(e.strong,{children:"ESM"})," 使用 ",(0,r.jsx)(e.strong,{children:"import"})," 和 ",(0,r.jsx)(e.strong,{children:"export"})," 关键字来导入和导出模块。",(0,r.jsx)(e.strong,{children:"ESM"})," 具有静态导入和异步加载的特性，可以在现代浏览器和支持的** Node.js** 版本中使用。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"以上种种就是javaScript当中的模块定义。在Deno中，你可以通过地址的形式来完成CDN模块的引入。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'// deno\nimport Module from "https://3.cdn.com/PKG@SEMVER[/PATH]";\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"umd模块动态脚本加载",children:["UMD模块动态脚本加载",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#umd模块动态脚本加载",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["对于",(0,r.jsx)(e.strong,{children:"UMD"}),"模块，很多同学并不是很陌生。上面也提到过UMD模块在浏览器和",(0,r.jsx)(e.strong,{children:"Nodejs"}),"下都能使用，并且会在",(0,r.jsx)(e.strong,{children:"window"}),"中挂载对应的包名。基于此，在早期很多同学都会利用",(0,r.jsx)(e.strong,{children:"webpack"}),"的",(0,r.jsx)(e.strong,{children:"Externals"}),"来将",(0,r.jsx)(e.strong,{children:"React、ReactDOM"}),"等依赖替换为",(0,r.jsx)(e.strong,{children:"CDN加载"}),"，来优化产物包大小的体积。"]}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsx)(e.p,{children:"首先在html当中引入对应的cdn模块包。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"><\/script>\n<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"><\/script>\n'})}),"\n",(0,r.jsxs)(e.p,{children:["然后在",(0,r.jsx)(e.strong,{children:"webpack.config.js"}),"中配置",(0,r.jsx)(e.strong,{children:"externals"}),"引入的包映射地址。这样配置后，在打包过程中，",(0,r.jsx)(e.strong,{children:"webpack"})," 会将 ",(0,r.jsx)(e.strong,{children:"import React from 'react'"})," 和 ",(0,r.jsx)(e.strong,{children:"import ReactDOM from 'react-dom'"})," 这样的语句排除在打包范围之外。取而代之的是，webpack 会假设这些库已经在运行环境中可用，并通过全局变量 ",(0,r.jsx)(e.strong,{children:"window.React"})," 和 ",(0,r.jsx)(e.strong,{children:"window.ReactDOM"})," 来访问。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"module.exports = {\n  externals: {\n    react: 'React',\n    'react-dom': 'ReactDOM'\n  },\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:"如下图和代码所示："}),"\n",(0,r.jsxs)(e.p,{children:["通过",(0,r.jsx)(e.strong,{children:"webpack"}),"的理念，可以通过",(0,r.jsx)(e.strong,{children:"appendChild"}),"来实现",(0,r.jsx)(e.strong,{children:"script"}),"的加载和加载完成后的回调。利用UMD挂载window的特性动态常见",(0,r.jsx)(e.strong,{children:"script"}),"标签后在",(0,r.jsx)(e.strong,{children:"onreadystatechange"}),"或者",(0,r.jsx)(e.strong,{children:"onload"}),"中回调中判断",(0,r.jsx)(e.strong,{children:"readyState"}),"为",(0,r.jsx)(e.strong,{children:"loaded"}),"(加载完成)或者是",(0,r.jsx)(e.strong,{children:"complete"}),"(不管完成还是失败都触发)来调用",(0,r.jsx)(e.strong,{children:"CallBack"}),"函数，此时",(0,r.jsx)(e.strong,{children:"CallBack"}),"函数中就可以使用加载完成的模块了。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"var script = document.createElement('script');\n    script.src = \"https://unpkg.com/dayjs@1.11.9/dayjs.min.js\";\n\n    function callback() {\n      // 在脚本加载完成后执行的操作\n      console.log(\n        '脚本加载完成！',\n        window.dayjs().format(\"YYYY-MM-DD HH:mm:ss\")\n      );\n    }\n\n    script.onload = callback;\n    script.onreadystatechange = function () {\n      if (script.readyState === 'loaded' || script.readyState === 'complete') {\n        callback();\n      }\n    };\n\n    document.head.appendChild(script);\n    })\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["封装了一个名为 ",(0,r.jsx)(e.strong,{children:"loadUMDModule"})," 的异步函数，该函数用于加载 ",(0,r.jsx)(e.strong,{children:"UMD"})," 模块并返回一个 ",(0,r.jsx)(e.strong,{children:"Promise"})," 对象，可以在需要加载 ",(0,r.jsx)(e.strong,{children:"UMD"})," 模块的任何地方重复使用。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"const loadUMDModule = async (url, moudleName) => {\n    return new Promise((resolve) => {\n\n    var script = document.createElement('script');\n    script.src = url;\n\n    function callback() {\n      // 在脚本加载完成后执行的操作\n      console.log(\n        '脚本加载完成！'\n      );\n      resolve(window[moudleName])\n    }\n\n    script.onload = callback;\n    script.onreadystatechange = function () {\n      if (script.readyState === 'loaded' || script.readyState === 'complete') {\n        callback();\n      }\n    };\n\n    document.head.appendChild(script);\n    })\n  }\n\n  React.useEffect(() => {\n    loadUMDModule(\"https://unpkg.com/dayjs@1.11.9/dayjs.min.js\", \"dayjs\").then((module) => {\n      console.log(\"load module: \", module)\n    })\n  }, []);\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"动态执行加载模块",children:["动态执行加载模块",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#动态执行加载模块",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在这之前，我们使用了",(0,r.jsx)(e.strong,{children:"eval"}),"来执行输入的字符串，同理，将UMD模块视为一个可执行的js代码片段也是合理的，将",(0,r.jsx)(e.strong,{children:"script"}),"替换为",(0,r.jsx)(e.strong,{children:"eval"}),"执行也能够从",(0,r.jsx)(e.strong,{children:"window"}),"上获取对应的绑定属性，从而来达到用远程模块加载的目的。"]}),"\n",(0,r.jsxs)(e.p,{children:["如下代码所示，使用 ",(0,r.jsx)(e.strong,{children:"fetch"})," 函数请求指定 ",(0,r.jsx)(e.strong,{children:"URL"})," 的脚本文件，并通过 ",(0,r.jsx)(e.strong,{children:"eval"})," 函数执行脚本内容，最后返回模块结果，与 ",(0,r.jsx)(e.strong,{children:"script"})," 标签的目的是一样的。"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["需要注意的是，此方法需要配合前文中讲述的代码执行容器一起使用才能有效避免全局变量冲突的问题，也可以基于",(0,r.jsx)(e.strong,{children:"iframe沙箱"}),"完成模块加载的通用解法"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:"<script type=\"module\">\n\n  const importScript = (url) => {\n    return fetch(url)\n      .then((response) => response.text())\n      .then((text) => {\n        // eval 执行\n        eval(text);\n\n        return window.React\n      });\n  }\n\nimportScript('https://unpkg.com/react@18/umd/react.production.min.js').then(\n  (res) => {\n    console.log(res, 'res');\n  }\n)\n  <\/script>\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["在早期，也看到过",(0,r.jsx)(e.strong,{children:"amd"}),"和",(0,r.jsx)(e.strong,{children:"commonjs"}),"模块的一些模拟加载法，通过自己实现",(0,r.jsx)(e.strong,{children:"CommonJS"}),"的",(0,r.jsx)(e.strong,{children:"require"}),"函数来重写逻辑方法替换依赖，通过",(0,r.jsx)(e.strong,{children:"Babel"})," 对脚本内容进行转换，使用预设 ",(0,r.jsx)(e.strong,{children:"react"}),"来处理 ",(0,r.jsx)(e.strong,{children:"React"})," 相关语法。然后，通过eval函数执行转换后的代码，将模块的导出内容存储在 exports对象中，最终就可以根据是否是",(0,r.jsx)(e.strong,{children:"esModule"}),"模块返回不同的内容了。具体示例可以参考以下方式，随着浏览器的更迭，慢慢的有了很多更加优雅的方式。"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://codepen.io/qborreda/pen/JZyEaj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/qborreda/pen/JZyEaj"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"function importScript(url){\n  return fetch(url)\n  .then(res=> res.text())\n  .then(source=>{\n    var exports = {}\n    // 实现require来支持commonjs\n    function require(name){\n    // 依赖map\n      if(name == 'react') return React\n      else throw `You can't use modules other than \"react\" in remote component.`\n    }\n    // babel代码转换\n    const transCode = Babel.transform(source, {\n      presets: ['react']\n    }).code\n    eval(transCode)\n    // __esModule为true的时候\n    return exports.__esModule ? exports.default : exports\n  })\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"esm-动态地导入模块",children:["ESM 动态地导入模块",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#esm-动态地导入模块",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["ESM模块，相信很多同学都已经非常熟悉了，得益于 ",(0,r.jsx)(e.strong,{children:"Bundle-less"})," 等工程构建工具的火热背景下，浏览器原生的ESM模块也渐渐的开始被绝大多数开源库作者进行适配和社区PR。"]}),"\n",(0,r.jsxs)(e.p,{children:["如下代码所示，通过",(0,r.jsx)(e.strong,{children:"importmaps"}),"可以进行ESM的映射表资源加载的方式可以加载",(0,r.jsx)(e.strong,{children:"vue.js"}),"，从而在",(0,r.jsx)(e.strong,{children:"html"}),"当中快速的使用",(0,r.jsx)(e.strong,{children:"vue.js"}),"构建应用，而不需要借助构建工具来进行打包。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Document</title>\n  <script type="importmap">\n    {\n      "imports": {\n        "vue": "https://unpkg.com/vue@3/dist/vue.esm-browser.js"\n      }\n    }\n  <\/script>\n    \n</head>\n<body>\n  document\n  <script type="module">\n    import { createApp } from \'vue\';\n\n    console.log(createApp, \'createApp\')\n  <\/script>\n</body>\n</html>\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"importmaps"}),"是一个比较新的特性。在运行时动态导入模块，可以使用 ",(0,r.jsx)(e.strong,{children:"import()"})," 函数来实现动态加载模块，如下图所示，",(0,r.jsx)(e.strong,{children:"import()"})," 函数接受一个参数 ",(0,r.jsx)(e.strong,{children:"modulePath"}),"，表示要导入的模块路径，",(0,r.jsx)(e.strong,{children:"modulePath"}),"可以是本地的路径，也可以是远程的资源地址。其结果是一个",(0,r.jsx)(e.strong,{children:"Promis"}),"e的返回值，导入的模块可以通过 ",(0,r.jsx)(e.strong,{children:"Promise"})," 的解析值来进行保存和使用。",(0,r.jsx)(e.strong,{children:"import"}),"动态导入模块往往用于一些异步模块，如SPA路由懒加载等等场景下使用。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"React.useEffect(() => {\n    import('https://unpkg.com/dayjs@1.11.9/dayjs.min.js').then((dayjs) => {\n      console.log(\n        'load success: ',\n        dayjs.default().format('YYYY-MM-DD HH:mm:ss')\n      );\n    });\n  }, []);\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(e.h3,{id:"systemjs",children:["SystemJS",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#systemjs",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"SystemJS"}),"是三方开源的浏览器模块加载方式，目前",(0,r.jsx)(e.strong,{children:"rollup"}),"和",(0,r.jsx)(e.strong,{children:"webpack"}),"都支持",(0,r.jsx)(e.strong,{children:"targetFormat"}),"的配置，能够直接将工程打包成一个systemjs的依赖模块包。"]}),"\n",(0,r.jsxs)(e.p,{children:["如下所示，我使用",(0,r.jsx)(e.strong,{children:"了systemJS"}),"来加载",(0,r.jsx)(e.strong,{children:"CDN"}),"上的",(0,r.jsx)(e.strong,{children:"dayjs"}),"来处理相关逻辑，整体流程如下："]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["首先在 ",(0,r.jsx)(e.code,{children:"<head>"})," 标签中引入 ",(0,r.jsx)(e.strong,{children:"SystemJS"})," 的脚本文件。"]}),"\n",(0,r.jsxs)(e.li,{children:["然后使用 ",(0,r.jsx)(e.code,{children:'type="systemjs-importmap"'})," 的 ",(0,r.jsx)(e.code,{children:"<script>"})," 标签定义 ",(0,r.jsx)(e.strong,{children:"import map"}),"，指定 ",(0,r.jsx)(e.strong,{children:"dayjs"})," 模块的远程 ",(0,r.jsx)(e.strong,{children:"CDN 地址"}),"。"]}),"\n",(0,r.jsxs)(e.li,{children:["通过 ",(0,r.jsx)(e.code,{children:"System.import"})," 函数可以异步加载 ",(0,r.jsx)(e.strong,{children:"dayjs"})," 模块。"]}),"\n",(0,r.jsxs)(e.li,{children:["追后在 ",(0,r.jsx)(e.code,{children:"then"})," 方法中，访问导入的 ",(0,r.jsx)(e.strong,{children:"dayjs"})," 模块，获取当前时间并进行格式化。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["到此，就完成了",(0,r.jsx)(e.strong,{children:"systemjs"}),"的模块映射和加载。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Document</title>\n  \x3c!-- load SystemJS --\x3e\n  <script src="https://cdn.jsdelivr.net/npm/systemjs/dist/system.js"><\/script>\n</head>\n<body>\n  <script type="systemjs-importmap">\n    {\n      "imports": {\n        "dayjs": "https://cdn.jsdelivr.net/npm/dayjs@1.11.9/dist/dayjs.min.js"\n      }\n    }\n  <\/script>\n\n  <script>\n    // Import the dayjs module\n    System.import(\'dayjs\').then(({ default: dayjs }) => {\n      // 在这里可以使用导入的 dayjs 模块\n      const formattedDate = dayjs().format(\'YYYY-MM-DD HH:mm:ss\');\n\n      console.log(formattedDate);\n    }).catch((error) => {\n      console.error(\'Failed to import dayjs:\', error);\n    });\n  <\/script>\n</body>\n</html>\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"SystemJS"}),"的使用方式是最接近原生的",(0,r.jsx)(e.strong,{children:"import maps"}),"特性的，可以将其理解为",(0,r.jsx)(e.strong,{children:"import maps"}),"的 ",(0,r.jsx)(e.strong,{children:"Polyfills"})," 版本。同样开箱即用的还有类似",(0,r.jsx)(e.strong,{children:"require.js"}),"等方式，在这里就不过多赘述了。"]}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["本章节对常见的远程资源模块加载的方式都进行了一定的阐述，在看完章节内容后对于相关的知识也有一定的了解，在下一章节中，就需要将其与低代码平台结合起来，封装成为一个运行时的资源加载容器提供给编辑器使用，提供动态挂载物料、方法依赖、运行时逻辑等等方式。基于上述方式，也可以将其封装成为React组件并配合",(0,r.jsx)(e.strong,{children:"Suspense"}),"完成一个远程异步组件，提供给页面使用。"]}),"\n",(0,r.jsxs)(e.p,{children:["随着前端生态ES模块的逐渐完善，现如今",(0,r.jsx)(e.strong,{children:"Deno"}),"已经完成了远程模块的支持，想比对之前的异步资源加载而言，现如今方案逐渐开始得到完善，或许在不久的将来，我们真正意义上的微前端也能够完美的实现。"]}),"\n",(0,r.jsxs)(e.h2,{id:"资源",children:["资源",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#资源",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://codepen.io/qborreda/pen/JZyEaj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/qborreda/pen/JZyEaj"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://juejin.cn/post/7127440050937151525?searchId=20230813083612EAEC847402B5781601C9#heading-25",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.cn/post/7127440050937151525?searchId=20230813083612EAEC847402B5781601C9#heading-25"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://github.com/systemjs/systemjs/tree/main",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/systemjs/systemjs/tree/main"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://requirejs.org/",target:"_blank",rel:"noopener noreferrer",children:"https://requirejs.org/"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://github.com/WICG/import-maps",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/WICG/import-maps"})})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F35.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E8%BF%9C%E7%A8%8B%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"模块概念",id:"模块概念",depth:3},{text:"UMD模块动态脚本加载",id:"umd模块动态脚本加载",depth:3},{text:"动态执行加载模块",id:"动态执行加载模块",depth:3},{text:"ESM 动态地导入模块",id:"esm-动态地导入模块",depth:3},{text:"SystemJS",id:"systemjs",depth:3},{text:"总结",id:"总结",depth:2},{text:"资源",id:"资源",depth:2}],title:"35.客户端实战：远程资源加载实现",headingTitle:"35.客户端实战：远程资源加载实现",frontmatter:{}}}}]);