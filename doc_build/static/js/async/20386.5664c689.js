"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["20386"],{641861:function(e,n,r){r.r(n),r.d(n,{default:()=>A});var c=r(552676),s=r(740453);let i=r.p+"static/image/1d6bc37b23c853c70d70cb65536bff16.df7a35ab.webp",t=r.p+"static/image/deb8c5dd135fcd41d705de250da6c3c9.6c6f2e8d.webp",d=r.p+"static/image/ede11da0e430f5379737db6494016755.828a92f5.gif",l=r.p+"static/image/54cc05f93a993e64602673e82bcd8360.9028efac.gif",a=r.p+"static/image/56545fb3db93ffbb71e1ce41e7dfe144.bf823ef2.gif",h=r.p+"static/image/b189fb90203b5bb7b101df0fbde5335a.6847e036.gif",o=r.p+"static/image/c6d5dda2eba52bad1ca4a4a8ce536ae5.19140e2c.webp",x=r.p+"static/image/1880018e68ff9ded9e7f46928917154b.9c36aed9.webp",p=r.p+"static/image/c1a7e00d503f58b7fc7b356f911d3044.5b960523.webp",j=r.p+"static/image/1a054a980e82f40b8e69932813bc70d5.2410e82b.gif",f=r.p+"static/image/81c4dafd10b4b2d466b89bf59a5ee1dd.1dc7c142.webp",g=r.p+"static/image/7e212df452033e3d4e5e9d1b85b081d0.1b7235cd.webp",u=r.p+"static/image/607f9de898943059011e5ba9588dd0ef.3dc79a76.gif",b=r.p+"static/image/735c768d98c3b135c0a18357b009f0aa.0bec55e7.gif",S=r.p+"static/image/dd5d46e3eddff6020f2a69d6e605e9f5.7967644a.gif",m=r.p+"static/image/c928d0b3bba36c3047331f221d05ffc1.600bffcb.gif",w=r.p+"static/image/5a96d44f2176c30d5c424fb8594976d9.3e9c2780.gif",k=r.p+"static/image/ee62d95d987ae38a9974a29481d23712.4c7eea57.webp",G=r.p+"static/image/1c41853665aa2f09fd93bee552e80a4e.e3ec68de.webp",V=r.p+"static/image/6bef9ec4a858bfc88dc86270c674d87b.a8752954.webp",v=r.p+"static/image/bedcbf9fb306389c2e4ad313da5e095f.61922aec.webp",y=r.p+"static/image/221f7a14f78208d5fb20325e783cf658.eb9ffccc.webp",C=r.p+"static/image/5b56fc5be76355ade904d53fe226d8e3.e80d7e71.webp",P=r.p+"static/image/2b952ca13342cbede8485681e8606bf7.4ebb9ee2.webp",B=r.p+"static/image/efff4548c562567833ceebab0e4b2d6e.771ae791.webp",U=r.p+"static/image/7eb15a9e7dd2deb706127d707e8990e8.8dd0b50a.gif",N=r.p+"static/image/90fb9e9777312cd8fc8ab0906c3eebfb.9892ada9.webp",_=r.p+"static/image/5e94c7deacaf09621e3a17bdaa8a628d.89ccefa3.webp",L=r.p+"static/image/86732e94afcc5c86ec34a74c667fcaa4.314585ea.webp",M=r.p+"static/image/ac2e128a0222e8e50dca90d37cedaad3.33e31347.webp",O=r.p+"static/image/b965f7aadfb6a99d1fc8b2770034b3fe.eee9554a.gif",D=r.p+"static/image/7be07ec307a5999bb96156e90656ac46.a9879340.webp",X=r.p+"static/image/3bd5c9f2969600a1acb9d23675ea9d37.4877d266.webp",q=r.p+"static/image/5d96668f351cb4d4478d5c368af0851f.59cd95aa.webp",W=r.p+"static/image/012e05a87a08567cb6c11b791101863b.32caa5fb.webp",E=r.p+"static/image/f5b7d336d9fb95cb01cfd61b550a0e9e.66913e2f.webp";function z(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",blockquote:"blockquote",h2:"h2",code:"code",pre:"pre",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"17-中级篇svg-pattern",children:["17-中级篇：SVG Pattern",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#17-中级篇svg-pattern",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"如今，图案无处不在。它们经常出现在精美的包装上，各种精彩的出版物封面上，甚至是漂亮的布料上。在 Web 设计中，图案是一种引人注目的设计元素，也是 Web 网站设计中非常有用的资源。通过使用仅有几 KB 的小图像，我们可以为网站背景增添活力。重复的图形是响应式设计的一个好策略，因为它完美地适应了所有屏幕分辨率。图案在水平和垂直方向上可以无限重复，我们可以尝试使用各种形状和颜色、位图或矢量图以及不同的样式。"}),"\n",(0,c.jsx)(n.p,{children:"在创建各种图案的过程中，SVG Pattern 和 CSS Pattern 是两种常见的方式。就像 CSS Pattern 可以为 Web 元素添加背景纹理和图案一样，SVG Pattern 也可以为 SVG 图像添加各式各样的图案效果。SVG Pattern 可以创建更丰富、更复杂的图案，包括条纹、格子、波纹和纹理等。与 CSS Pattern 相比，SVG Pattern 的灵活性和可定制性更高，能够创建更多样化的图案效果。"}),"\n",(0,c.jsx)(n.p,{children:"与 CSS Pattern 相似，SVG Pattern 也可以通过调整参数和属性来实现各种不同的图案效果。但与 CSS Pattern 不同的是，SVG Pattern 可以结合使用 SVG 的强大功能，如形状、路径和滤镜，从而创造出更加复杂和生动的图案效果。"}),"\n",(0,c.jsx)(n.p,{children:"无论你是想为 Web 添加一些独特的图案元素，还是为了实现特定的视觉效果，SVG Pattern 都是一个非常强大的工具。在这节课中，我们将深入探讨 SVG Pattern 的各种用法和技巧，带你领略 SVG 图案的无限魅力，并教你如何利用它们为你的 Web 设计增添个性和视觉吸引力。让我们一起开始这段充满创造力和想象力的旅程吧！"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"注意，Pattern 通常有多种不同的称呼，例如模式、图案和纹理。我个人常称它为“图案”。同时 CSS Pattern 和 SVG Pattern 分别是使用 CSS 和 SVG 是创建图像的两种不同技术。因此，CSS Pattern 和 SVG Pattern 也称被称为“CSS 图案”和“SVG 图案”。"}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"回顾一下-css-pattern",children:["回顾一下 CSS Pattern",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#回顾一下-css-pattern",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["CSS Pattern 是指使用 CSS 技术来创建各种图案和纹理效果的方法。这些图案可以用作元素的背景（",(0,c.jsx)(n.code,{children:"background-image"}),"）、边框（",(0,c.jsx)(n.code,{children:"border-image"}),"）或装饰性元素，为 Web 页面增添美感和视觉吸引力。CSS Pattern 的创建方式通常涉及到利用 CSS 属性和伪类来实现各种图案效果，例如使用线性渐变（",(0,c.jsx)(n.code,{children:"linear-gradient"}),"）、径向渐变（",(0,c.jsx)(n.code,{children:"radial-gradient"}),"）、圆锥渐变（",(0,c.jsx)(n.code,{children:"conic-gradient"}),"）以及相应的重复性渐变（",(0,c.jsx)(n.code,{children:"repeating-*-gradient"}),"，这里的 ",(0,c.jsx)(n.code,{children:"*"})," 可以是 ",(0,c.jsx)(n.code,{children:"linear"})," 、",(0,c.jsx)(n.code,{children:"radial"})," 和 ",(0,c.jsx)(n.code,{children:"conic"})," 中的任何一个）等。与传统的背景图像相比，CSS Pattern 具有许多优势，例如文件大小更小、加载速度更快、可调整性更强等。同时， CSS Pattern 也更灵活，可以通过调整参数来快速修改图案的样式和布局，使得 Web 开发者能够更加轻松地实现他们的创意想法。"]}),"\n",(0,c.jsx)(n.p,{children:"CSS Pattern 是 Web 设计中常用的技术之一，它为 Web 开发者提供了丰富的图案选择和创作的可能性，为 Web 设计注入了更多的个性和创意。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:W,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo: ",(0,c.jsx)(n.a,{href:"https://codepen.io/poulamic/full/MWyGvjd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/poulamic/full/MWyGvjd"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:q,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://css-pattern.com/",target:"_blank",rel:"noopener noreferrer",children:"https://css-pattern.com/"})," （带动画效果的版本：",(0,c.jsx)(n.a,{href:"https://animated.css-pattern.com/%EF%BC%89",target:"_blank",rel:"noopener noreferrer",children:"https://animated.css-pattern.com/）"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:X,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://projects.verou.me/css3patterns/",target:"_blank",rel:"noopener noreferrer",children:"https://projects.verou.me/css3patterns/"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:D,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/NWxBzRv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/thebabydino/full/NWxBzRv"})," （",(0,c.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/GRRpzNX%EF%BC%89",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/thebabydino/full/GRRpzNX）"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"我们来看一个简单的效果："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"body {\n    background-image: \n        radial-gradient(black 3px, transparent 4px),\n        radial-gradient(black 3px, transparent 4px),\n        linear-gradient(#fff 4px, transparent 0),\n        linear-gradient(45deg, transparent 74px, transparent 75px, #a4a4a4 75px, #a4a4a4 76px, transparent 77px, transparent 109px),\n        linear-gradient(-45deg, transparent 75px, transparent 76px, #a4a4a4 76px, #a4a4a4 77px, transparent 78px, transparent 109px);\n  \n    background-repeat: repeat;\n    background-size: 109px 109px, 109px 109px,100% 6px, 109px 109px, 109px 109px;\n    background-position: 54px 55px, 0px 0px, 0px 0px, 0px 0px, 0px 0px;\n}\n"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/abxYmNQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abxYmNQ"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在此基础上，",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259669043622690853",target:"_blank",rel:"noopener noreferrer",children:"还可以结合 CSS 处理图像特效相关的特性"}),"，例如滤镜 ",(0,c.jsx)(n.code,{children:"filter"})," 、混合模式 ",(0,c.jsx)(n.code,{children:"background-blend-mode"})," 给图案添加特效，从而创建出一个新的图案效果："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:O,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"正如你所看到的，虽然 CSS Pattern 在一些简单的图案效果上表现不错，并且易于实现和调整，但对于复杂或高度定制的图案需求，CSS 实现可能会变得笨拙和不灵活。就这一点而言，SVG Pattern 往往更具优势。"}),"\n",(0,c.jsx)(n.p,{children:"SVG Pattern 提供了更多的灵活性、功能和性能，能够实现更丰富、更复杂的图案效果，同时具有更好的浏览器兼容性和性能表现。"}),"\n",(0,c.jsxs)(n.h2,{id:"svg-pattern-简介",children:["SVG Pattern 简介",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-pattern-简介",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:M,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"我想大家对上图应该不会有任何的陌生感。接下来，让我们以“砌砖模式”（砖块图案）为例，简单介绍一下 SVG Pattern（SVG 图案）。"}),"\n",(0,c.jsxs)(n.p,{children:["“砖块图案”是一种常见的图案设计，仿效砖墙排列方式（即砌砖的模式），你可能在很多地方都见过它：每一行砖块都向下偏移了半个砖块的长度，形成一种交错重复的效果。这种排列方式非常简单易懂，因此使用 SVG 的 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素来复制这种效果非常合适。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <pattern id="pattern" width="220" height="80" patternUnits="userSpaceOnUse">\n            <path d="m0 77h218V40H0V36h109V0h3v36h109V0H0" />\n        </pattern>\n        <filter id="filter">\n            <feDropShadow dx="0" dy="0" result="s" />\n            <feTurbulence type="fractalNoise" baseFrequency=".01" numOctaves="9" />\n            <feComposite in="s" operator="arithmetic" k2=".7" k3=".35" />\n            <feDiffuseLighting lighting-color="#f84" surfaceScale="9">\n                <feDistantLight azimuth="225" elevation="9" />\n            </feDiffuseLighting>\n        </filter>\n    </defs>\n    <rect width="100%" height="100%" fill="url(#pattern)" filter="url(#filter)" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:L,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/XWQEjYO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWQEjYO"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["SVG Pattern 通过预定义的图形对象来创建，可以在水平和垂直方向上以固定的间隔进行复制，从而形成图案的填充效果。我们首先要做的是定义砖块的尺寸和砖块之间的间隙。为了方便起见，我们使用整数尺寸：假设砖块的宽度为 ",(0,c.jsx)(n.code,{children:"100"})," ，高度为 ",(0,c.jsx)(n.code,{children:"30"})," ，砖块之间的水平和垂直间隙为 ",(0,c.jsx)(n.code,{children:"10"})," 。"]}),"\n",(0,c.jsx)(n.p,{children:"接下来，我们需要确定图案的“基本”图案瓷砖。这里的“瓷砖”指的是图案瓷砖，而不是真实的建筑材料。我们使用下图中突出显示的部分作为我们的基本图案瓷砖：第一排有两块完整的砖，第二排有一块完整的砖夹在两块半砖之间。需要注意的是，间隙的位置和大小也需要考虑在内："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["在使用 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素时，我们需要定义图案瓷砖的宽度和高度，这些尺寸对应于基本图案瓷砖的尺寸。为了确定这些尺寸，我们需要进行一些简单的数学计算。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["现在，我们已经定义好了图案瓷砖的尺寸（",(0,c.jsx)(n.code,{children:"220 x 80"}),"），并使用了 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素来描述它。我们可以将这个图案瓷砖用作其他元素（例如 ",(0,c.jsx)(n.code,{children:"<rect>"})," ）的填充，并在 SVG 图像中创建出与砖块相似的图案效果。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg>\n    <defs>\n        <pattern id="pattern" width="220" height="80" patternUnits="userSpaceOnUse">\n            <path d="m0 77h218V40H0V36h109V0h3v36h109V0H0" />\n        </pattern>\n    </defs>\n    <rect width="100%" height="100%" fill="url(#pattern)" filter="url(#filter)" />\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["总之，SVG 图案是一种方便灵活的方式，可以在 SVG 图像中创建出各种各样的图案效果，从简单的砖块排列到复杂的纹理图案，都可以通过 SVG 的 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素轻松实现。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:U,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://philiprogers.com/svgpatterns/",target:"_blank",rel:"noopener noreferrer",children:"https://philiprogers.com/svgpatterns/"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://www.w3.org/TR/SVG2/pservers.html#Patterns",target:"_blank",rel:"noopener noreferrer",children:"这其实就是W3C规范里说的SVG Pattern"}),"：图案就是用来给一个形状填充或描边的，用的是预先定义好的图形，这些图形可以在横向和纵向以一定的间距重复出现，就像铺瓷砖一样，覆盖整个需要画的区域。图案是用 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素定义的，然后通过在形状元素上设置 ",(0,c.jsx)(n.code,{children:"fill"})," 或 ",(0,c.jsx)(n.code,{children:"stroke"})," 属性来使用这个图案。"]}),"\n",(0,c.jsxs)(n.h2,{id:"理解图案瓷砖",children:["理解“图案瓷砖”",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#理解图案瓷砖",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:B,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"在 SVG Pattern 中，图案瓷砖是构成整个图案的基本单元，类似于铺设瓷砖时使用的瓷砖块。然而，在 SVG 中，它不是实际的物理单元，而是一个虚拟的图形单元。"}),"\n",(0,c.jsx)(n.p,{children:"当你能够看到一个重复的图案并辨认出图案瓷砖时，你很快就会明白是如何构建的。更重要的是，当你构建自己的图案时遇到问题时，识别图案瓷砖的能力将帮助你找出问题所在。通常情况下，我们可以按照下面的步骤来识别图案瓷砖："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"①识别重复特征：首先要识别图案设计中重复出现的特征。寻找在整个图案中多次出现的元素、形状或图案"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"②标记独特点：选择一个重复特征上的独特点并标记它。这个点将作为识别图案瓷砖的参考点"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"③水平移动：从标记点水平移动，找到同一特征在同一点的下一个实例。同样标记这个点"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"④垂直移动：从两个标记点垂直移动，以在垂直轴上定位相同特征的相同实例。同样标记这些点"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:P,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"在复杂图案中找到图案瓷砖可能会更具挑战性。在大多数情况下，你将在第一次尝试时标记形成矩形的四个点，并定位图案瓷砖。然而，具有大型瓷砖或瓷砖内重复元素的复杂图案会使这项工作更具挑战性。在这种情况下，你可能需要扩展点的边界或选择不同的特征，并重试。此外，图案瓷砖可能会旋转，因此你可能需要相应地调整并以角度移动，而不是水平和垂直移动。"}),"\n",(0,c.jsx)(n.p,{children:"一旦你能够识别图案中的矩形瓷砖，你就可以学习如何创建自己的瓷砖了。将任何形状放置在图案瓷砖的边界内，它将以图案形式进行重复。但是，当你将相同的元素放置在穿越图案瓷砖边界的位置时，元素将在图案中出现裁剪。要防止这种裁剪，你需要在相反的边界上克隆相同的元素。如果边界位于角上，将元素克隆到所有其他瓷砖角上。"}),"\n",(0,c.jsxs)(n.p,{children:["为了确保克隆体完美对齐，你需要进行简单的数学计算。处理左右边界时，你将根据瓷砖的宽度添加或减去 ",(0,c.jsx)(n.code,{children:"X"})," 坐标，并保持相同的 ",(0,c.jsx)(n.code,{children:"Y"})," 坐标。对于顶部和底部计算，请使用高度。对于角边界，请使用宽度和高度的组合。"]}),"\n",(0,c.jsxs)(n.p,{children:["换句话说，在 SVG 中，我们是通过 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素来定义“图案瓷砖”的，并且它的 ",(0,c.jsx)(n.code,{children:"x"})," 、",(0,c.jsx)(n.code,{children:"y"})," 、",(0,c.jsx)(n.code,{children:"width"})," 、",(0,c.jsx)(n.code,{children:"height"})," 和 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 定义了图案瓷砖大小和位置（它是画布上某处的参考矩形），图案瓷砖（参考矩形）的左上角位于 ",(0,c.jsx)(n.code,{children:"(x,y)"})," ，右下角位于 ",(0,c.jsx)(n.code,{children:"(x + width, y + height)"})," 。理论上，平铺将 ",(0,c.jsx)(n.code,{children:"X"})," 和 ",(0,c.jsx)(n.code,{children:"Y"})," 方向上无限延伸一系列这样的矩形（图案瓷砖），包括正数和负数，每个可能的整数值 ",(0,c.jsx)(n.code,{children:"m"})," 和 ",(0,c.jsx)(n.code,{children:"n"})," 都以 ",(0,c.jsx)(n.code,{children:"(x + m \xd7 width, y + n \xd7 height)"})," 为起点。"]}),"\n",(0,c.jsx)(n.p,{children:"这也意味着，在创建 SVG 图案时，理解和设计好图案瓷砖是非常重要的。一个好的图案瓷砖设计可以确保图案的整体外观和重复效果符合预期，同时也能提高图案的可重用性和灵活性。"}),"\n",(0,c.jsxs)(n.h2,{id:"svg-pattern-基础应用",children:["SVG Pattern 基础应用",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-pattern-基础应用",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在很多方面，SVG 中的 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素的使用方式与之前我们介绍的 ",(0,c.jsx)(n.code,{children:"<linearGradient> 和 <radialGradient>（渐变元素）"}),"非常相似。 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素定义了所谓的“图案瓷砖”，它是图案中的最小单元，也是重复的单元。在 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素内部，你可以包含之前介绍过的",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345813971552698406",target:"_blank",rel:"noopener noreferrer",children:"任何基本形状"}),"，而且每个形状都可以使用之前学到的",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7349188496181887017",target:"_blank",rel:"noopener noreferrer",children:"任何样式"}),"，包括",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7354948936039137289",target:"_blank",rel:"noopener noreferrer",children:"渐变"}),"和不透明度。"]}),"\n",(0,c.jsxs)(n.p,{children:["与渐变类似，",(0,c.jsx)(n.code,{children:"<pattern>"})," 相关的信息应该放置在 SVG 的 ",(0,c.jsx)(n.code,{children:"<defs>"})," 元素中。每个“图案瓷砖”都有一个唯一的 ",(0,c.jsx)(n.code,{children:"id"})," 标识符，然后你可以使用 ",(0,c.jsx)(n.code,{children:"url(#idName)"})," 将定义好的图案应用到 SVG 图形元素的 ",(0,c.jsx)(n.code,{children:"fill"})," 或 ",(0,c.jsx)(n.code,{children:"stroke"})," 属性中。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["除此之外，",(0,c.jsx)(n.code,{children:"<pattern>"})," 上的属性也与渐变元素上的属性非常相似："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"通过设置这些属性，可以灵活地定义和控制 SVG 的“图案瓷砖”，从而创建出各种各样的图案效果："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"id"})," ：定义图案瓷砖的唯一标识符，以便其他图形元素的 ",(0,c.jsx)(n.code,{children:"fill"})," 和 ",(0,c.jsx)(n.code,{children:"stroke"})," 可以引用该图案"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," ：定义图案瓷砖的起始位置（通常上图案瓷砖的左上角）在 SVG 坐标系中的位置"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," ：定义图案瓷砖的尺寸，即图案瓷砖的宽度（",(0,c.jsx)(n.code,{children:"width"}),"）和高度（",(0,c.jsx)(n.code,{children:"height"}),"）"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"patternUnits"})," ：定义 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素中各个属性（如 ",(0,c.jsx)(n.code,{children:"x"})," 、",(0,c.jsx)(n.code,{children:"y"})," 、",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," ）的单位，它有 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," （用户坐标系）和 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," （对象边界框坐标系）"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"patternContentUnits"})," ：定义 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素内部图案内容的单位，与 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 相似，也有 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," 和 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," 两个值可选"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"patternTransform"})," ：定义应用于图案瓷砖的变换矩阵，如平移（",(0,c.jsx)(n.code,{children:"translate"}),"）、旋转（",(0,c.jsx)(n.code,{children:"rotate"}),"）、缩放（",(0,c.jsx)(n.code,{children:"scale"}),"）和倾斜（",(0,c.jsx)(n.code,{children:"skew"}),"）等"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"viewBox"})," ：定义图案瓷砖的可见区域。它是一个矩形区域，用于指定 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素内部的图案内容应如何显示和缩放"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," ：定义了如何对图案瓷砖的内容进行缩放和定位，以适应 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素的 ",(0,c.jsx)(n.code,{children:"viewBox"})," 。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果说，",(0,c.jsx)(n.code,{children:"<linearGradient>"})," 和 ",(0,c.jsx)(n.code,{children:"<radialGradient>"})," 上的属性与 ",(0,c.jsx)(n.code,{children:"<line>"})," 和 ",(0,c.jsx)(n.code,{children:"<circle>"})," 的属性相匹配；那么 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 上的几何属性（",(0,c.jsx)(n.code,{children:"x"})," 、",(0,c.jsx)(n.code,{children:"y"})," 、 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," ）类似于 ",(0,c.jsx)(n.code,{children:"<rect>"})," 或 ",(0,c.jsx)(n.code,{children:"<image>"})," 。默认情况下，所有这些属性均为 ",(0,c.jsx)(n.code,{children:"0"})," ，通常情况下，",(0,c.jsx)(n.code,{children:"width"})," 或 ",(0,c.jsx)(n.code,{children:"height"})," 为 ",(0,c.jsx)(n.code,{children:"0"})," 时会阻止内容被绘制出来。"]}),"\n",(0,c.jsx)(n.p,{children:"我们通过一个简单的实例，来了解 SVG Pattern 最基础的使用。"}),"\n",(0,c.jsxs)(n.p,{children:["首先，像创建渐变一样，将 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素放置在 ",(0,c.jsx)(n.code,{children:"<defs>"})," 元素内，并且使用 ",(0,c.jsx)(n.code,{children:"id"})," 给图案瓷砖指定唯一标识符："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <pattern id="pattern">\n            \x3c!-- 定义图案瓷砖的内容放置在这里 --\x3e\n        </pattern>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["如果你需要改变图案瓷砖在画布中的起始位置，则需要在 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素上设置 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 的值；如果未设置，图案瓷砖在画布中的起始位置是 ",(0,c.jsx)(n.code,{children:"(0,0)"})," 位置，因为它们的默认值为 ",(0,c.jsx)(n.code,{children:"0"})," 。在这个示例中，不对瓷砖的起始位置进行调整："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <pattern id="pattern" x="0" y="0">\n            \x3c!-- 定义图案瓷砖的内容放置在这里 --\x3e\n        </pattern>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["前面提到过，",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 是定义图案瓷砖大小的，而且它们的默认值为 ",(0,c.jsx)(n.code,{children:"0"})," 。因此，在定义图案瓷砖时，需要显式给 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素设置 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 的值，否则它们两者中任一值为 ",(0,c.jsx)(n.code,{children:"0"})," 时，都会阻止图案瓷砖的内容显示。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <pattern id="pattern" x="0" y="0" width="100" height="100">\n            \x3c!-- 定义图案瓷砖的内容放置在这里 --\x3e\n        </pattern>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["现在我们创建了一个 ",(0,c.jsx)(n.code,{children:"100 \xd7 100"})," 的图案瓷砖。到目前为止，它是一个空的图案瓷砖，因为 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素内还没有任何内容。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，在 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素内，可以放置任何基本图形。接下来，我们在 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 内放置一个圆："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <pattern id="pattern" x="0" y="0" width="100" height="100">\n            <circle cx="50" cy="50" r="50" />\n        </pattern>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:"就这么简单，我们现在已经创建了一个简单的图案。现在，你就可以在其他的图形元素中引用这个图案："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <pattern id="pattern" x="0" y="0" width="100" height="100">\n            <circle cx="50" cy="50" r="50" />\n        </pattern>\n    </defs>\n    <rect x="0" y="0" width="100%" height="100%" fill="url(#pattern)" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"这似乎并不是我们所期望的效果。这是为什么呢？"}),"\n",(0,c.jsxs)(n.p,{children:["简单地说，默认情况下，",(0,c.jsx)(n.code,{children:"<pattern>"})," 的 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 属性的值是 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," ，这意味着它采用的是图形对象边界框坐标系，是基于百分比的，这很尴尬，因为图案会变形以适应容器。相反，要是将 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 属性的值设置为 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," ，表示图案采用的是用户坐标系，这个坐标系统在容器固定（基于像素）或流体（基于百分比）时表现一致。这与使用默认的 ",(0,c.jsx)(n.code,{children:"viewBox"})," 坐标系统没有区别。"]}),"\n",(0,c.jsxs)(n.p,{children:["换句话说，在 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素上显式设置 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 属性的值为 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," ，你会看到一个黑色的圆圈将会沿着 ",(0,c.jsx)(n.code,{children:"x"})," 轴（水平方向）和 ",(0,c.jsx)(n.code,{children:"y"})," 轴（垂直方向）重复平铺，并且会填充整个矩形："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <pattern id="pattern" x="0" y="0" width="100" height="100" patternUnits="userSpaceOnUse">\n            <circle cx="50" cy="50" r="50" />\n        </pattern>\n    </defs>\n    <rect fill="url(#pattern)" width="100%" height="100%" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:V,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/NWmYwEx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWmYwEx"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这是一个最简单的图案效果，你也可以继续在 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 添加更多的内容，构建一个更复杂的图案："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <pattern id="pattern" x="0" y="0" width="100" height="100" patternUnits="userSpaceOnUse">\n            <circle fill="#f90ace" cx="50" cy="50" r="25" />\n            <g fill="orange">\n                <circle r="25" />\x3c!-- 左上角 --\x3e\n                <circle cx="100" r="25" />\x3c!-- 右上角 --\x3e\n                <circle cy="100" r="25" />\x3c!-- 左下角 --\x3e\n                <circle cx="100" cy="100" r="25" />\x3c!-- 右下角 --\x3e\n            </g>\n        </pattern>\n    </defs>\n    <rect fill="url(#pattern)" width="100%" height="100%" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:G,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/wvZmPLM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvZmPLM"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"svg-pattern-工作原理",children:["SVG Pattern 工作原理",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-pattern-工作原理",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["现在，我们知道了如何使用 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素定义可重复使用的图案（“图案瓷砖”），并将其应用于图形元素的填充（",(0,c.jsx)(n.code,{children:"fill"}),"）或描边（",(0,c.jsx)(n.code,{children:"stroke"}),"）。不过，如果想使用 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 创建各种复杂的图案效果，那么就得需要理解 SVG Pattern 的工作原理。它的工作原理如下："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"定义图案瓷砖（Pattern Tile）：首先，我们定义一个图案瓷砖，它是图案中的基本单元，也是重复的单元。图案瓷砖可以包含任何形状，如矩形、圆形等，并且可以应用各种样式，包括填充颜色、渐变和不透明度"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["图案瓷砖放置在 ",(0,c.jsx)(n.code,{children:"<defs>"})," 中：我们将 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素定义的图案瓷砖放置在 ",(0,c.jsx)(n.code,{children:"<defs>"})," 中，以便在需要时进行引用。这样做可以将图案瓷砖的定义与实际使用它的图形元素分离开来，提高了 SVG 代码的可维护性和重用性"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["将图案应用到图形元素：通过将图案瓷砖的 ",(0,c.jsx)(n.code,{children:"id"})," 用作 ",(0,c.jsx)(n.code,{children:"fill"})," 或 ",(0,c.jsx)(n.code,{children:"stroke"})," 属性的值，我们可以将图案应用到需要填充或描边的图形元素上。这样元素将使用图案瓷砖来填充或描边其内部区域"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"平铺和重复：一旦图案瓷砖被应用到图形元素上，它会根据图案瓷砖的定义在图形元素的区域内进行平铺和重复，直到填充整个区域。我们可以通过调整图案瓷砖的大小和位置来控制图案的平铺方式"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"如果要更好地理解 SVG Pattern 的工作原理，最好通过不同的实际案例来解释 SVG Pattern 的使用方法。"}),"\n",(0,c.jsx)(n.p,{children:"我们先从简单的示例开始。使用简单重复的条纹图案填充两个不同的形状，例如矩形和圆形："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        \x3c!-- 定义图案瓷砖 --\x3e\n        <pattern id="stripes"  width="20%" height="100%">\n            <rect x="0%" y="0" width="5%" height="100%" fill="#fff" />\n            <rect x="5%" y="0" width="5%" height="100%" fill="#f50" />\n            <rect x="10%" y="0" width="5%" height="100%" fill="#09f" />\n        </pattern>\n    </defs>\n\n    \x3c!-- 应用已定义的瓷砖 #stripes --\x3e\n    <rect x="1%" y="1%" width="98%" height="40%" fill="url(#stripes) lime" />\n    <circle cx="50%" cy="70.5%" r="28%" fill="url(#stripes) lime" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/dyLmJBG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dyLmJBG"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这个示例，使用三个 ",(0,c.jsx)(n.code,{children:"<rect>"})," 绘制了一个条纹图案瓷砖："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<pattern id="stripes"  width="20%" height="100%">\n    <rect x="0%" y="0" width="5%" height="100%" fill="#fff" />\n    <rect x="5%" y="0" width="5%" height="100%" fill="#f50" />\n    <rect x="10%" y="0" width="5%" height="100%" fill="#09f" />\n</pattern>\n'})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<pattern>"})," 元素的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 属性定义了图案瓷砖的尺寸。在这个示例中，图案瓷砖将从 ",(0,c.jsx)(n.code,{children:"(0,0)"})," 点开始沿着 ",(0,c.jsx)(n.code,{children:"x"})," 轴水平方向重复平铺。它会在 ",(0,c.jsx)(n.code,{children:"<rect>"})," 和 ",(0,c.jsx)(n.code,{children:"<circle>"})," 图形元素中沿 ",(0,c.jsx)(n.code,{children:"x"})," 轴水平方向重复五次平铺。"]}),"\n",(0,c.jsxs)(n.p,{children:["很明显，相同的一个图案瓷砖在 ",(0,c.jsx)(n.code,{children:"<rect>"})," 和 ",(0,c.jsx)(n.code,{children:"<circle>"})," 图形中平铺后的结果有明显的差异，但在矩形中更加接近。你可能会好奇？为什么会这样呢？"]}),"\n",(0,c.jsxs)(n.p,{children:["前面我们提到，默认情况下，图案瓷砖的 ",(0,c.jsx)(n.code,{children:"x"})," 、",(0,c.jsx)(n.code,{children:"y"})," 、",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 属性默认会以 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," 单位计算，因为 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素的 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 属性的默认值是 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," （对象边界框坐标系）。每个图案瓷砖都会延伸到边界框的完整高度（",(0,c.jsx)(n.code,{children:"100%"}),"），但只有 ",(0,c.jsx)(n.code,{children:"20%"})," 的宽度。无论形状有多宽（",(0,c.jsx)(n.code,{children:"<rect>"})," 宽度是 ",(0,c.jsx)(n.code,{children:"98%"})," ，",(0,c.jsx)(n.code,{children:"<circle>"})," 是 ",(0,c.jsx)(n.code,{children:"56%"}),"），图案瓷砖都会在图形元素上有五组条纹（五个图案瓷砖）。"]}),"\n",(0,c.jsxs)(n.p,{children:["我们可以通过将 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 属性的值更改为 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," 来改变这一现象："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["注意，你可以通过调整 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 来改变图案瓷砖的尺寸，也可以通过 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 调整图案瓷砖的起始位置（左上角）。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/ZEZxroz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZEZxroz"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["你可能发现了，在上面这个示例中，调整图案瓷砖的 ",(0,c.jsx)(n.code,{children:"y"})," 属性的值，不会有任何的变化。为了能向大家展示 ",(0,c.jsx)(n.code,{children:"y"})," 属性对图案瓷砖的影响，我重新定义了一个图案："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern" viewBox="0 0 1024 1024">\n    <defs>\n        \x3c!-- 定义图案瓷砖 --\x3e\n        <pattern id="dots"  width="20%" height="20%" patternUnits="objectBoundingBox">\n            <circle cx="10%" cy="10%" r="4%" fill="oklch(0.75 0.17 81.34)" />\n            \n            <g fill="oklch(0.81 0.25 149.38)">\n                <circle cx="16%" cy="10%" r="2%"  />\n                <circle cx="4%" cy="10%" r="2%"  />\n                <circle cx="10%" cy="4%" r="2%"  />\n                <circle cx="10%" cy="16%" r="2%"  />\n            </g>  \n        </pattern>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLrKKJe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLrKKJe"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["你可能已经发现了，不管是条纹图案还是上面这个圆点图案，它们都不是按照对象边界框的比例进行缩放的。这是因为，默认情况之下，",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素中的内容（图形元素）的单位是相对于用户坐标系统（",(0,c.jsx)(n.code,{children:"userSpaceOnUse"}),"）进行计算。我们可能通过 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素上的 ",(0,c.jsx)(n.code,{children:"patternContentUnits"})," 属性来控制，你可以将其设置为 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," ，使图形元素的坐标系统与图案瓷砖的坐标系保持一致："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<pattern id="dots" width=".2" height=".2" patternContentUnits="objectBoundingBox" patternUnits="objectBoundingBox">\n    <circle cx=".1" cy=".1" r=".04" fill="oklch(0.75 0.17 81.34)" />\n    \n    <g fill="oklch(0.81 0.25 149.38)">\n        <circle cx=".16" cy=".1" r=".02" />\n        <circle cx=".04" cy=".1" r=".02" />\n        <circle cx=".1" cy=".04" r=".02" />\n        <circle cx=".1" cy=".16" r=".02" />\n    </g>\n</pattern>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/MWRVGgE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWRVGgE"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["也就是说，",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素的 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 和 ",(0,c.jsx)(n.code,{children:"patternContentUnits"})," 属性的默认值不同，并且作用的对象也不同。其中 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 的默认值为 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," ，作用于图案瓷砖；",(0,c.jsx)(n.code,{children:"patternContentUnits"})," 的默认值为 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," ，作用于图案瓷砖内容中的图形元素。因此，在默认情况之下，很少有图案瓷砖能够很好的适应。事实上，我们在设计图案瓷砖时，总是希望图案瓷砖的内容能够按比例缩放以匹配图案瓷砖。"]}),"\n",(0,c.jsxs)(n.p,{children:["所以说，你可以将 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 和 ",(0,c.jsx)(n.code,{children:"patternContentUnits"})," 两属性设置具有相同的值，可以都是 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," ，也可以都是 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," ，以确保图案瓷砖区域的位置一致性。由于默认值不匹配，通常只需要声明其中一个，而不是两个都声明。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["将 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 设置为 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," 将确保它与 ",(0,c.jsx)(n.code,{children:"patternContentUnits"})," 使用相同的坐标系，这是一个更直接的选项。如果我们在该坐标系内调整图形元素的大小，图案将重复以填充额外的空间"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["将 ",(0,c.jsx)(n.code,{children:"patternContentUnits"})," 设置为 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," 也将确保坐标空间的一致性。如果我们在此坐标系内调整图形元素的大小，图案将按比例缩放以填充额外的空间，而不会重复。为了确保在此系统中的正确缩放，值必须以百分比或小数为基础"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["然而，在 ",(0,c.jsx)(n.code,{children:"objectBoundingBox"})," 系统中工作可能会很困难。在该空间中工作时似乎存在一些错误，并且总体而言，缩放的概念与重复平铺图案的概念并不真正符合。"]}),"\n",(0,c.jsxs)(n.p,{children:["我更偏向将 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 属性设置为 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"}),"，与 ",(0,c.jsx)(n.code,{children:"patternContentUnits"})," 属性的默认值保持一致。这样一来，你可以创建具有固定尺寸图形的固定大小图案瓷砖。这样的设置更符合“瓷砖”的实际概念，就像你可能用来铺盖客厅和房间的“瓷砖”一样。固定尺寸的“瓷砖”（也就是图案瓷砖）在较大的区域（比如客厅）或较小的区域（比如房间）中仅会改变“瓷砖”的数量，而不会改变其尺寸。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern" viewBox="0 0 1024 1024">\n    <defs>\n        \x3c!-- 定义图案瓷砖 --\x3e\n        <pattern id="dots" x="12px" y="14px" width="100px" height="100px" patternUnits="userSpaceOnUse">\n            <circle cx="50" cy="50" r="20" fill="oklch(0.75 0.17 81.34)" />\n            <g fill="oklch(0.81 0.25 149.38)">\n                <circle cx="80" cy="50" r="10" />\n                <circle cx="20" cy="50" r="10" />\n                <circle cx="50" cy="20" r="10" />\n                <circle cx="50" cy="80" r="10" />\n            </g>\n        </pattern>\n    </defs>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/gOyezew",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOyezew"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"正如你所看到的，经过调整之后，图案瓷砖尺寸大小是固定的，并且能自动匹配填充区域的大小。"}),"\n",(0,c.jsxs)(n.p,{children:["虽然说 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 定义的图案与 ",(0,c.jsx)(n.code,{children:"<linearGradient>"})," 和 ",(0,c.jsx)(n.code,{children:"<radialGradient>"})," 定义的渐变都可以用于图形元素的 ",(0,c.jsx)(n.code,{children:"fill"})," 和 ",(0,c.jsx)(n.code,{children:"stroke"})," 。但 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 在定义图案瓷砖的时候，会涉及到很多宽度和高度，包括 SVG 画布、图案瓷砖以及用于生成图案瓷砖的图形，这可能会令人不知所措。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<svg>"})," 元素上的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 主要用于确定 SVG 视窗（Viewport）的尺寸"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<pattern>"})," 元素上的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 主要定义了图案瓷砖的尺寸，即确定了图案瓷砖区域的画布大小"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<pattern>"})," 内部图形元素的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," 主要定义了图形的大小，它们不能超过 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素设置的 ",(0,c.jsx)(n.code,{children:"width"})," 和 ",(0,c.jsx)(n.code,{children:"height"})," ，如果图形的大小超过它们，则多余部分会被裁剪掉，因为 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素的 ",(0,c.jsx)(n.code,{children:"overflow"})," 默认值为 ",(0,c.jsx)(n.code,{children:"hidden"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"我们通过下面这个简单的案例来进一步向大家说明尺寸之间的关系："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 204 204" width="400" class="pattern">\n    <defs>\n        <pattern id="pattern" x="2" y="2" width="20" height="20" patternUnits="userSpaceOnUse">\n            <rect x="5" y="5" width="10" height="10" fill="lime" />\n        </pattern>\n    </defs>\n    <rect x="2" y="2" width="200" height="200" fill="url(#pattern) red" stroke="orange" stroke-width="1"/>\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/mdgxKEw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdgxKEw"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["SVG 视口（Viewport）的尺寸是 ",(0,c.jsx)(n.code,{children:"400 \xd7 400"})," ，",(0,c.jsx)(n.code,{children:"viewBox"})," 的尺寸是 ",(0,c.jsx)(n.code,{children:"204 \xd7 204"})," ，图形 ",(0,c.jsx)(n.code,{children:"<rect>"})," 的尺寸是 ",(0,c.jsx)(n.code,{children:"200 \xd7 200"})," ，我们的图案瓷砖尺寸是 ",(0,c.jsx)(n.code,{children:"20 \xd7 20"})," ，图案内的绿色矩形 ",(0,c.jsx)(n.code,{children:"rect"})," 的尺寸是 ",(0,c.jsx)(n.code,{children:"10 \xd7 10"})," 。这允许 ",(0,c.jsx)(n.code,{children:"10"})," 图案瓷砖（",(0,c.jsx)(n.code,{children:"20 \xd7 20"}),"）平铺在 ",(0,c.jsx)(n.code,{children:"200 \xd7 200"})," 的矩形（黄色边框的矩形）中。"]}),"\n",(0,c.jsxs)(n.p,{children:["每个图案瓷砖中有一个 ",(0,c.jsx)(n.code,{children:"10 \xd7 10"})," 的矩形，并且该矩形的 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 属性的值为 ",(0,c.jsx)(n.code,{children:"5"})," 。这意味着在每个矩形的顶部和左侧距离 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 边界有 ",(0,c.jsx)(n.code,{children:"5"})," 个单位的距离。SVG 的 ",(0,c.jsx)(n.code,{children:"<rect>"})," （黄色描边的）矩形本身和图案瓷砖（",(0,c.jsx)(n.code,{children:"<pattern>"}),"）都从左边和顶部各向内移动了 ",(0,c.jsx)(n.code,{children:"2"})," 个用户单位，以确保形状的边界不会被隐藏。"]}),"\n",(0,c.jsx)(n.p,{children:"接下来，我们再来看一个稍微复杂的图案瓷砖，它看起来就像是鱼的鳞片一样。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1024 1024" class="pattern">\n    <defs>\n        \x3c!-- 创建径向渐变 --\x3e\n        <radialGradient id="scale-gradient">\n            <stop stop-color="#004000" offset="0" />\n            <stop stop-color="green" offset="0.85" />\n            <stop stop-color="yellow" offset="1" />\n        </radialGradient>\n        \x3c!-- 创建鱼鳞图案瓷砖 --\x3e\n        <pattern id="scales-pattern" width="100" height="100" patternUnits="userSpaceOnUse">\n            <g id="scales" fill="url(#scale-gradient)">\n                <circle class="scale" cx="0" cy="95" r="50" />\n                <circle class="scale" cx="100" cy="95" r="50" />\n                <circle class="scale" cx="50" cy="45" r="50" />\n                <circle class="scale" cx="0" cy="-5" r="50" />\n                <circle class="scale" cx="100" cy="-5" r="50" />\n            </g>\n        </pattern>\n    </defs>\n    <rect width="100%" height="100%" fill="url(#scales-pattern) green" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/mdgxNXe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdgxNXe"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["上面示例使用了五个 ",(0,c.jsx)(n.code,{children:"<circle>"})," 元素错开重叠在一起制作了鱼鳞片形状的图案瓷砖。整个图案瓷砖使用了 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," 作为 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 属性的值，这意味着图案瓷砖将是 ",(0,c.jsx)(n.code,{children:"100 x 100"})," 的正方形，无论填充的形状（",(0,c.jsx)(n.code,{children:"<rect>"}),"）的大小如何。"]}),"\n",(0,c.jsxs)(n.p,{children:["并不难发现，前两个鳞片几乎位于图案瓷砖的底部角落的中心位置（上图红色矩形框左下角和右下角），下一个鳞片被绘制在前两个鳞片的上方，几乎位于图案瓷砖的中心。最后两个鳞片位于图案瓷砖的顶部角落的正上方（上图红色矩形框的左上角和右上角）。这五个鳞片组合在一起，就绘制了鱼鳞图案瓷砖（红色矩形框内的部分，红色框边缘与白色框之间的部分会被 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素裁剪）。"]}),"\n",(0,c.jsx)(n.p,{children:"大多数图案可以用这种方式构建，但可能需要一些额外的数学计算来确定尺寸。将图案块的最终外观草绘出来会有所帮助，从而可以确定图案在水平和垂直方向上的精确重复位置。"}),"\n",(0,c.jsxs)(n.p,{children:["通过上述示例我们发现，将 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素的 ",(0,c.jsx)(n.code,{children:"patternUnits"})," 属性设置为 ",(0,c.jsx)(n.code,{children:"userSpaceOnUse"})," 值能够有效避免图案瓷砖的扭曲变形。然而，这也意味着图案无法根据形状进行缩放调整。此外，坐标的定位是相对于整个图形空间（用户坐标系）而言的，而不是对象本身（图形对象边界框坐标系）。如果要移动对象以改变其位置，我们需要通过其他的方式来处理。"]}),"\n",(0,c.jsxs)(n.p,{children:["你可以通过相对于坐标系中的固定点来定义形状，并使用变换（",(0,c.jsx)(n.code,{children:"transform"}),"）或 ",(0,c.jsx)(n.code,{children:"<use>"})," 元素上的 ",(0,c.jsx)(n.code,{children:"x"})," 和 ",(0,c.jsx)(n.code,{children:"y"})," 属性将其移动到相应的位置来解决定位问题，但要解决缩放问题，则需要为每个形状创建一个单独的坐标系，使用 ",(0,c.jsx)(n.code,{children:"<symbol>"})," 元素或嵌套的 SVG，并填充整个宽度或高度。尽管这种方法可以解决问题，但除了增加额外的工作量外，还会增加复杂性。"]}),"\n",(0,c.jsxs)(n.p,{children:["幸运的是，还有一种选择可以缩放",(0,c.jsx)(n.code,{children:"<pattern>"}),"的内容：",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345677438053810214",target:"_blank",rel:"noopener noreferrer",children:"定义一个viewBox 并使用 preserveAspectRatio 来确保其不变形"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["在 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素上，",(0,c.jsx)(n.code,{children:"viewBox"})," 属性覆盖了 ",(0,c.jsx)(n.code,{children:"patternContentUnits"})," 设置，并为图案创建了自己的坐标系统。由 ",(0,c.jsx)(n.code,{children:"viewBox"})," 创建的坐标系统将按比例缩放以适应图案瓷砖，并尊重任何 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性值。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern" viewBox="0 0 800 600">\n    <defs>\n        <radialGradient id="scale-gradient">\n            <stop stop-color="#004000" offset="0" />\n            <stop stop-color="green" offset="0.85" />\n            <stop stop-color="yellow" offset="1" />\n        </radialGradient>\n        <pattern id="scales-pattern" width=".05" height=".05" viewBox="0 0 1 1">\n            <g id="scales" fill="url(#scale-gradient)" stroke-width=".02" stroke="#000">\n                <circle r=".5" cx="1" cy=".98" />\n                <circle r=".5" cx="0" cy=".98" />\n                <circle r=".5" cx=".5" cy=".5" />\n                <circle r=".5" cx="0" cy="-.02" />\n                <circle r=".5" cx="1" cy="-.02" />\n            </g>\n        </pattern>\n    </defs>\n    <rect width="100%" height="100%" fill="url(#scales-pattern)" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/yLrjBjW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLrjBjW"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["上面这个示例，在 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素上设置了 ",(0,c.jsx)(n.code,{children:'viewBox="0 0 1 1"'})," ，并且将其宽度和高度都指定为 ",(0,c.jsx)(n.code,{children:"0.05"})," ，始终保持一比一的比例进行缩放。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意， ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素的 ",(0,c.jsx)(n.code,{children:"viewBox"})," 和 ",(0,c.jsx)(n.code,{children:"preserveAspectRatio"})," 属性的使用与它们在 ",(0,c.jsx)(n.code,{children:"<svg>"})," 元素上的使用是一致的。有关于这方面的介绍就不在这里重复阐述了。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"<pattern>"})," 与渐变还有一个相似之处，可以通过 ",(0,c.jsx)(n.code,{children:"patternTransform"})," 属性对瓷砖图案做变换处理。这意味着，对于某些几何图案，你可以通过使用坐标变换来简化你的代码以实现相同的效果。例如下面这个示例："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <pattern id="pinstripe" patternUnits="userSpaceOnUse" width="30" height="30">\n            <rect id="r" width="30" height="30"  fill="oklch(0.33 0.11 25.3)" />\n            <line id="l" x1="15" y="0" x2="15" y2="30" stroke="oklch(0.72 0.06 244.48)" />\n        </pattern>\n        <pattern id="diagonals" href="#pinstripe" patternTransform="rotate(45)" />\n        <pattern id="grid" href="#pinstripe">\n            <use xlink:href="#r" />\n            <use xlink:href="#l" />\n            <use xlink:href="#l" transform="rotate(90, 15, 15)" />\n        </pattern>\n        <pattern id="diagonal-grid" href="#grid" patternTransform="rotate(45)" />\n    </defs>\n    <rect width="24%" height="100%" fill="url(#pinstripe)" />\n    <rect width="25%" height="100%" x="24.666%" fill="url(#diagonals)" />\n    <rect width="25%" height="100%" X="50.333%" fill="url(#diagonal-grid)" />\n    <rect width="24%" height="100%" x="75.999%"  fill="url(#grid)" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/gOyzYVj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOyzYVj"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["在 ",(0,c.jsx)(n.code,{children:"<defs>"})," 元素内使用四个 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素创建了四个不同的图案瓷砖，它们都使用了相同的颜色方案，并且后面三个图案瓷砖继承了第一个图案瓷砖内的图形，只是使用 ",(0,c.jsx)(n.code,{children:"patternTransform"})," 做了变换处理。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["第一个 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 内使用 ",(0,c.jsx)(n.code,{children:"<rect>"})," 和 ",(0,c.jsx)(n.code,{children:"<line>"})," 绘制了最基本的图案"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["第二个 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 使用 ",(0,c.jsx)(n.code,{children:"href"})," 属性引用了第一个图案（",(0,c.jsx)(n.code,{children:"#pinstripe"}),"），并旋转 ",(0,c.jsx)(n.code,{children:"45"})," 度"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["第三个 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 也使用 ",(0,c.jsx)(n.code,{children:"href"})," 属性引用了第一个图案（",(0,c.jsx)(n.code,{children:"#pinstripe"}),"），并且在该元素内使用 ",(0,c.jsx)(n.code,{children:"<use>"})," 引用了第一个 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素内的 ",(0,c.jsx)(n.code,{children:"<rect>"})," 和 ",(0,c.jsx)(n.code,{children:"<line>"})," ，并对其中一个竖线做了变换处理（ ",(0,c.jsx)(n.code,{children:'transform="rotate(90, 15, 15)"'})," ）"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["第四个 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 使用 ",(0,c.jsx)(n.code,{children:"href"})," 属性引用了第三个图案（",(0,c.jsx)(n.code,{children:"#grid"}),"），并旋转 ",(0,c.jsx)(n.code,{children:"45"})," 度"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"使用变换，你可以创建图案瓷砖布局，其中瓷砖是平行四边形或菱形，而不是简单的矩形。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <pattern id="triangles" patternUnits="userSpaceOnUse" width="20" height="17.32" patternTransform="skewX(30)">\n            <rect width="30" height="20" fill="lightGreen" />\n            <polygon points="0,0 20,0 0,17.32" fill="forestgreen" />\n        </pattern>\n        <pattern id="argyle" patternUnits="userSpaceOnUse" width="20" height="20" patternTransform="scale(2,4) rotate(45)">\n            <rect fill="mediumPurple" width="20" height="20" />\n            <rect fill="indigo" width="10" height="10" />\n            <rect fill="navy" width="10" height="10" x="10" y="10" />\n            <path stroke="lavender" stroke-width="0.25" fill="none" d="M0,5 L20,5 M5,0 L5,20\n     M0,15 L20,15 M15,0 L15,20" />\n        </pattern>\n    </defs>\n\n    <rect width="50%" height="100%" fill="url(#triangles)" />\n    <rect width="50%" height="100%" x="50%" fill="url(#argyle)" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/jORxOVO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jORxOVO"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"你还可以结合 SVG 滤镜，制作出更出色的图案效果："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <filter id="glow">\n        <feGaussianBlur stdDeviation="2" />\n        <feComposite in2="SourceGraphic" operator="out" result="glow" />\n        <feFlood flood-color="white" flood-opacity="0.2" />\n        <feComposite in2="SourceGraphic" operator="atop" result="light" />\n        <feComposite in="glow" in2="light" />\n    </filter>\n    <pattern id="p" patternUnits="userSpaceOnUse" width="180px" height="120px" patternTransform="scale(1,0.8660254)">\n        <g filter="url(#glow)">\n            <g class="wrapper">\n                <path id="hex" pathLength="388.5" d="M-30,-60 30,-60 60,0 30,60 -30,60 -60,0Z" transform="scale(0.935)" />\n            </g>\n            <use xlink:href="#hex" x="0" y="+120" />\n            <use xlink:href="#hex" x="+90" y="+60" />\n            <use xlink:href="#hex" x="+180" y="0" />\n            <use xlink:href="#hex" x="+180" y="120" />\n        </g>\n    </pattern>\n    <rect fill="url(#p)" width="100%" height="100%" />\n</svg>\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/eYorYvd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYorYvd"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"动画化-svg-pattern",children:["动画化 SVG Pattern",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动画化-svg-pattern",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["我们可以像动画化其他元素一样，使用 CSS 给 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 中的图形元素添加动画效果，使整个图案带有动画效果。例如上面正边形的较案，只需要添加下面这几行 CSS ，就可以使整个图案动起来："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes draw {\n        from {\n            stroke-dashoffset: 388.5;\n        }\n        to {\n            stroke-dashoffset: 0;\n        }\n    }\n    \n    @keyframes stroke-color {\n        0% {\n            stroke: hsl(0 100% 70%);\n        }\n        16.667% {\n            stroke: hsl(60 100% 70%);\n        }\n        33.333% {\n            stroke: hsl(120 100% 70%);\n        }\n        50% {\n            stroke: hsl(180 100% 70%);\n        }\n        66.667% {\n            stroke: hsl(240 100% 70%);\n        }\n        83.333% {\n            stroke: hsl(300 100% 70%);\n        }\n        100% {\n            stroke: hsl(360 100% 70%);\n        }\n    }\n    \n    @keyframes back-color {\n        0% {\n            background: hsl(0 80% 15%);\n        }\n        16.667% {\n            background: hsl(60 80% 15%);\n        }\n        33.333% {\n            background: hsl(120 80% 15%);\n        }\n        50% {\n            background: hsl(180 80% 15%);\n        }\n        66.667% {\n            background: hsl(240 80% 15%);\n        }\n        83.333% {\n            background: hsl(300 80% 15%);\n        }\n        100% {\n            background: hsl(360 80% 15%);\n        }\n    }\n    \n    #p {\n        animation: stroke-color 11s infinite linear;\n    \n        :is(.wrapper, use) {\n            animation: draw 4s infinite linear;\n        }\n    \n        use:nth-child(3) {\n            animation-delay: -2s;\n        }\n    }\n\n    :root {\n        animation: back-color 11s infinite linear;\n    }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/VwNxwzd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwNxwzd"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"再来看一个："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <clipPath id="port">\n            <circle r="150" />\n        </clipPath>\n        <filter id="glow">\n            <feGaussianBlur stdDeviation="2"/>\n            <feComposite in2="SourceGraphic"  operator="out" result="glow" />\n            <feFlood flood-color="white" flood-opacity="0.2" />\n            <feComposite in2="SourceGraphic"  operator="atop" result="light" />\n            <feComposite in="glow" in2="light" />    \n        </filter>\n        <filter id="filter">\n            <feDropShadow dx="0" dy="0" result="s" />\n            <feTurbulence type="fractalNoise" baseFrequency=".01" numOctaves="9" />\n            <feComposite in="s" operator="arithmetic" k2=".7" k3=".35" />\n            <feDiffuseLighting lighting-color="#f84" surfaceScale="9">\n                <feDistantLight azimuth="225" elevation="9" />\n            </feDiffuseLighting>\n        </filter>\n        <pattern id="p" patternUnits="userSpaceOnUse" x="-30" width="60" height="60" viewBox="-150 -150 300 300">\n            <g clip-path="url(#port)" stroke="black" stroke-width="318.3" stroke-dasharray="5 5" filter="url(#glow)">\n                <circle r="159.15" fill="white" />\n                <circle r="159.15" fill="none" cx="10" cy="10" id="r" />\n            </g>\n        </pattern>\n    </defs>\n\n    <rect width="100%" height="100%" fill="url(#p)" filter="url(#filter)"/>\n</svg>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes rot {\n        to {\n            rotate: 1turn;\n        }\n    }\n    #r {\n        animation: rot 20s cubic-bezier(0.46, 0.03, 0.52, 0.96) infinite alternate;\n    }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/OJGZJxG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJGZJxG"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"我们前面展示的示例，都是图案填充在图形中，试想一下，如果填充到文本中呢？将会是一种什么的结果："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-XML",children:'<svg class="pattern">\n    <defs>\n        <clipPath id="port">\n            <circle r="150" />\n        </clipPath>\n        <filter id="glow">\n            <feGaussianBlur stdDeviation="2"/>\n            <feComposite in2="SourceGraphic"  operator="out" result="glow" />\n            <feFlood flood-color="white" flood-opacity="0.2" />\n            <feComposite in2="SourceGraphic"  operator="atop" result="light" />\n            <feComposite in="glow" in2="light" />    \n        </filter>\n        <filter id="filter">\n            <feDropShadow dx="0" dy="0" result="s" />\n            <feTurbulence type="fractalNoise" baseFrequency=".01" numOctaves="9" />\n            <feComposite in="s" operator="arithmetic" k2=".7" k3=".35" />\n            <feDiffuseLighting lighting-color="#f84" surfaceScale="9">\n                <feDistantLight azimuth="225" elevation="9" />\n            </feDiffuseLighting>\n        </filter>\n        <pattern id="p" patternUnits="userSpaceOnUse" x="-30" width="60" height="60" viewBox="-150 -150 300 300">\n            <g clip-path="url(#port)" stroke="black" stroke-width="318.3" stroke-dasharray="5 5" filter="url(#glow)">\n                <circle r="159.15" fill="white" />\n                <circle r="159.15" fill="none" cx="10" cy="10" id="r" />\n            </g>\n        </pattern>\n    </defs>\n    <rect width="100%" height="100%" filter="url(#filter)"/>\n    <text fill="url(#p)" lengthAdjust="spacingAndGlyphs" x="0" y="0" dx="50%" dy="50%" textLength="1200" text-anchor="middle" font-stretch="expanded" filter="url(#filter)" stroke-width="5" stroke="red">CSS & SVG are awesome</text>\n</svg>\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:'@layer animation {\n    @keyframes rot {\n        to {\n            rotate: 1turn;\n        }\n    }\n    #r {\n    animation: rot 20s cubic-bezier(0.46, 0.03, 0.52, 0.96) infinite alternate;\n    }\n}\n\n@layer demo {\n    text {\n        font-size: clamp(3rem, 4vw + 4rem, 6rem);\n        font-family: "Courier New", Courier, monospace;\n        font-weight: 900;\n        text-transform: uppercase;\n    }\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/VwNxwBG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwNxwBG"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["Demo 地址：",(0,c.jsx)(n.a,{href:"https://codepen.io/airen/full/xxejxmW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxejxmW"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://codepen.io/collection/DRMKdB",target:"_blank",rel:"noopener noreferrer",children:"更多相关的案例可以点击这里查看"}),"："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["URL：",(0,c.jsx)(n.a,{href:"https://codepen.io/collection/DRMKdB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/collection/DRMKdB"})]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"svg-pattern-生成器",children:["SVG Pattern 生成器",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-pattern-生成器",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"说实话，手动硬编码创建复杂的图案瓷砖还是很吃力的，除非你对 SVG 有足够深的认识，并且深度的掌握了 SVG 的相关技术与细节。"}),"\n",(0,c.jsx)(n.p,{children:"事实上，除了手动编码创建复杂的图案瓷砖之外，还可以借助诸如 Figma、Sketch 等图形设计软件来辅助你设计图案瓷砖。更为简便的是，我们可以直接使用一些在线工具来生成图案瓷砖。例如："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://10015.io/tools/svg-pattern-generator",target:"_blank",rel:"noopener noreferrer",children:"10015.io"})," ：它生成真正的、可直接使用的 SVG 图案，而不像许多其他工具一样生成通用的 SVG 图像块"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://heropatterns.com/",target:"_blank",rel:"noopener noreferrer",children:"Hero Patterns"}),"：提供了超过 90 种免费下载的 SVG 图案，并允许你设置文件的不透明度、前景和背景颜色"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://iros.github.io/patternfills/",target:"_blank",rel:"noopener noreferrer",children:"Iros Pattern Fills"}),"：收集了一本单色图案填充的图案书，你可以轻松地在你的工作中参考。这些文件非常小，即使你只引用了其中的一部分，也可以轻松包含它们。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://pattern.monster/",target:"_blank",rel:"noopener noreferrer",children:"Pattern Monster"}),"：是一个庞大的、优雅的 SVG 图形集合，大约有 250 个。你可以轻松快速地缩放、着色、旋转和重新定位每个设计。你可以直接从平台上导出 CSS 和 SVG 代码。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://fffuel.co/mmmotif/",target:"_blank",rel:"noopener noreferrer",children:"Mmmotif"}),"：@S\xe9bastien No\xebl 在他的 ",(0,c.jsx)(n.a,{href:"https://fffuel.co",target:"_blank",rel:"noopener noreferrer",children:"fffuel.co"})," 网站上提供了一个令人瞠目结舌的简单、原创和美丽的设计工具集合。在这个集合中，他的 Mmmotif 等距三维图案生成器非常出色。与 Pattern Monster 类似，你可以混合和匹配形状、颜色、缩放和角度，以组合一个凹凸不平的三维等距图块。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"SVGBackgrounds.com ：这个工具目前提供了 30 种基本图案，但颜色和不透明度可以通过几次点击进行自定义。完成后，它会导出 CSS 和 SVG，可以粘贴到你的样式表中。与 Pattern Monster 类似，你需要手动编写 SVG 图案定义。"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://philiprogers.com/svgpatterns/",target:"_blank",rel:"noopener noreferrer",children:"SVG Patterns Gallery"}),"：基于 ",(0,c.jsx)(n.a,{href:"https://projects.verou.me/css3patterns/",target:"_blank",rel:"noopener noreferrer",children:"@Lea Verou 的 CSS3 图案"}),"的一个小型 SVG 图案集合。已经有一段时间没有更新了，但仍然有价值。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"如何在-web-中应用-svg-pattern",children:["如何在 Web 中应用 SVG Pattern",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何在-web-中应用-svg-pattern",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"现在我们可以创建自己的图案了，我们有三种方法可以将想要的图案添加到 Web 中："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["SVG 平铺：将整个 SVG 文件作为背景。我们已经使用 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素创建了SVG代码，该元素已经处理了平铺，并提供了高级控制功能，例如旋转、缩放、平移和倾斜。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["CSS 平铺：将SVG文件作为图块。这种方法依赖于 CSS 来处理平铺。在这种情况下，SVG 不应该具有包裹图块的 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素，但并不改变设计图块的规则。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"内联 SVG 以进行高级控制：直接将 SVG 代码内嵌在 HTML 文档中，以便能够使用 CSS 或 JavaScript 操纵 SVG 设计。"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"无论你选择 SVG 还是 CSS 平铺，你都将通过 CSS 将 SVG 图案作为背景图像添加。"}),"\n",(0,c.jsxs)(n.p,{children:["首先，我们将创建一个类，并将 SVG 文件的路径作为 ",(0,c.jsx)(n.code,{children:"background-image"})," 属性的值，如下所示："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-CSS",children:'.bg {\n    background-image: url("/path/to/pattern.svg");\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:"这与将 JPG 作为背景图像添加没有什么不同。然后，还有一些其他属性需要考虑，以确保图案显示的方式符合你的意图："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"background-size: cover;"}),"：当将 SVG 拉伸到整个屏幕时，这个声明很有用，这在使用 SVG 平铺时很相关。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"background-size: auto;"}),"：这是默认值，对于 CSS 平铺是必需的，因此如果出于任何原因覆盖了 ",(0,c.jsx)(n.code,{children:"auto"})," 值，则需要此声明。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"background-position: center;"}),"：这是可选的，但如果你希望将图案居中，则很有用，默认情况下，你的图案锚定在背景容器的左上角。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"background-repeat: no-repeat;"}),"：如果我们依赖于 SVG 进行平铺，则不希望有任何 CSS 平铺。但如果使用 ",(0,c.jsx)(n.code,{children:"background-size: cover"}),"，则不需要此声明，因为它会显示单个图块。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"background-repeat: repeat;"}),"：这是默认值，对于 CSS 平铺是必需的。或者，你还可以使用 ",(0,c.jsx)(n.code,{children:"repeat-x"})," 或 ",(0,c.jsx)(n.code,{children:"repeat-y"})," 这些值，如果你只想要单列或单行图块。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"background-attachment: scroll | fixed;"}),"：此属性确定背景与你的内容一起显示的方式。滚动（",(0,c.jsx)(n.code,{children:"scroll"}),"）是默认值，使背景与其容器一起滚动。固定值（",(0,c.jsx)(n.code,{children:"fixed"}),"）会产生视差效果，背景固定在屏幕上，并在滚动时保持位置不变。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"css-pattern-vs-svg-pattern",children:["CSS Pattern vs. SVG Pattern",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-pattern-vs-svg-pattern",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"在 CSS 中，可以使用背景图像创建重复图案。因此，图案内容可以由任何有效的 CSS 图像数据类型创建：光栅、 SVG 图像或 CSS 渐变。默认情况下，图像会在水平和垂直方向重复，以创建类似于 SVG 图案的平铺效果。"}),"\n",(0,c.jsxs)(n.p,{children:["最初，CSS 背景图像总是以图像的固有大小绘制。类似于用户空间模式，改变具有背景的元素的大小会改变重复的次数，而不是它们的比例。对于应该按比例缩放以适应元素的大型图像背景来说，这并不特别有用，并且对于没有固有大小的渐变（和一些 SVG 图像）来说根本没有用。CSS 的 ",(0,c.jsx)(n.code,{children:"background-size"})," 属性，允许将每个背景图像缩放到固定大小或元素的百分比。"]}),"\n",(0,c.jsx)(n.p,{children:"与 SVG 图案相比，CSS 背景有一些优势："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"background-repeat"})," 属性，可以将背景设置为仅在水平或垂直方向重复（或根本不重复）"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"background-size"})," 属性接受 ",(0,c.jsx)(n.code,{children:"auto"})," 值，以允许图案瓷砖的高度或宽度按照其他值和内容的固有宽高比进行缩放。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"背景可以分层，每个图层都有自己的大小和重复选项。"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"使用 CSS 背景创建图案效果的主要缺点是，图案内容必须在单独的图像文件中（或编码为数据 URI ），除非它们可以表示为渐变。尽管渐变可以用来创建块和条纹，但在某些浏览器上的呈现质量明显较差于 SVG 形状。"}),"\n",(0,c.jsxs)(n.h2,{id:"小结",children:["小结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"SVG Pattern 是一种强大的设计工具，可以为网页和应用程序添加独特的视觉效果。它们可以用作背景、填充和纹理，为用户界面增添吸引力和个性化。以下是关于 SVG 图案的一些关键点："}),"\n",(0,c.jsxs)(n.p,{children:["首先，SVG 图案可以通过 ",(0,c.jsx)(n.code,{children:"<pattern>"})," 元素在 SVG 中创建。这些图案可以是重复的形状、线条或其他几何图形，可以自定义大小、颜色、旋转等属性。"]}),"\n",(0,c.jsx)(n.p,{children:"SVG 图案可以在网页中以多种方式应用，包括作为整个背景、图块或内联 SVG 以进行更高级的控制。无论是使用 SVG 平铺还是 CSS 平铺，都可以通过 CSS 轻松地将 SVG 图案添加到网页中。"}),"\n",(0,c.jsx)(n.p,{children:"有许多在线工具和库可供使用，可以帮助你创建、定制和应用 SVG 图案。这些工具提供了各种选项，使你能够轻松地生成各种各样的图案，并将它们应用到你的项目中。"}),"\n",(0,c.jsx)(n.p,{children:"一些流行的图形编辑软件，如 Adobe Illustrator 、 Inkscape、 Sketch 和 Figma等，也提供了创建和导出 SVG 图案的功能。然而，某些编辑软件可能对 SVG 图案的支持程度有所不同，因此需要谨慎选择。"}),"\n",(0,c.jsx)(n.p,{children:"总的来说，SVG 图案是一种灵活且强大的设计工具，可以为您的项目增添美感和独特性。通过使用 SVG 图案，你可以轻松地创建各种各样的视觉效果，从而为用户带来更加吸引人的体验。"})]})}function R(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(z,{...e})}):z(e)}let A=R;R.__RSPRESS_PAGE_META={},R.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F17-%E4%B8%AD%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20Pattern.md"]={toc:[{text:"回顾一下 CSS Pattern",id:"回顾一下-css-pattern",depth:2},{text:"SVG Pattern 简介",id:"svg-pattern-简介",depth:2},{text:"理解“图案瓷砖”",id:"理解图案瓷砖",depth:2},{text:"SVG Pattern 基础应用",id:"svg-pattern-基础应用",depth:2},{text:"SVG Pattern 工作原理",id:"svg-pattern-工作原理",depth:2},{text:"动画化 SVG Pattern",id:"动画化-svg-pattern",depth:2},{text:"SVG Pattern 生成器",id:"svg-pattern-生成器",depth:2},{text:"如何在 Web 中应用 SVG Pattern",id:"如何在-web-中应用-svg-pattern",depth:2},{text:"CSS Pattern vs. SVG Pattern",id:"css-pattern-vs-svg-pattern",depth:2},{text:"小结",id:"小结",depth:2}],title:"17-中级篇：SVG Pattern",headingTitle:"17-中级篇：SVG Pattern",frontmatter:{}}}}]);