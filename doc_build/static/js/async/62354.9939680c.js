"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["62354"],{378557:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var s=r(552676),t=r(740453);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",code:"code",pre:"pre",ol:"ol",strong:"strong",img:"img"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"20进阶-7go-test-测试你的代码",children:["20进阶 7：go test 测试你的代码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#20进阶-7go-test-测试你的代码",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在实际开发中，不仅要开发功能，更重要的是确保这些功能稳定可靠，并且拥有一个不错的性能，要确保这些就要对代码进行测试，开发人员通常会进行单元测试和性能测试。不同的语言通常都有自己的测试包/模块，Go 语言也一样，在 Go 中可以通过 testing 包对代码进行单元和性能测试，下面就来详细介绍。"}),"\n",(0,s.jsxs)(n.h2,{id:"本节核心内容",children:["本节核心内容",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本节核心内容",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"如何进行单元测试"}),"\n",(0,s.jsx)(n.li,{children:"如何进行压力/性能测试"}),"\n",(0,s.jsx)(n.li,{children:"如何进行性能分析"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["本小节源码下载路径：",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo15",target:"_blank",rel:"noopener noreferrer",children:"demo15"})]}),"\n",(0,s.jsx)(n.p,{children:"可先下载源码到本地，结合源码理解后续内容，边学边练。"}),"\n",(0,s.jsxs)(n.p,{children:["本小节的代码是基于 ",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo14",target:"_blank",rel:"noopener noreferrer",children:"demo14"})," 来开发的。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"go-语言测试支持",children:["Go 语言测试支持",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#go-语言测试支持",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Go 语言有自带的测试框架 testing，可以用来实现单元测试和性能测试，通过 ",(0,s.jsx)(n.code,{children:"go test"})," 命令来执行单元测试和性能测试。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"go test"})," 执行测试用例时，是以 go 包为单位进行测试的。执行时需要指定包名，比如：",(0,s.jsx)(n.code,{children:"go test 包名"}),"，如果没有指定包名，默认会选择执行命令时所在的包。",(0,s.jsx)(n.code,{children:"go test"})," 在执行时会遍历以 ",(0,s.jsx)(n.code,{children:"_test.go"})," 结尾的源码文件，执行其中以 ",(0,s.jsx)(n.code,{children:"Test"}),"、",(0,s.jsx)(n.code,{children:"Benchmark"}),"、",(0,s.jsx)(n.code,{children:"Example"})," 开头的测试函数。其中源码文件需要满足以下规范："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["文件名必须是 ",(0,s.jsx)(n.code,{children:"_test.go"})," 结尾，跟源文件在同一个包。"]}),"\n",(0,s.jsx)(n.li,{children:"测试用例函数必须以 Test、Benchmark、Example 开头"}),"\n",(0,s.jsx)(n.li,{children:"执行测试用例时的顺序，会按照源码中的顺序依次执行"}),"\n",(0,s.jsx)(n.li,{children:"单元测试函数 TestXxx() 的参数是 testing.T，可以使用该类型来记录错误或测试状态"}),"\n",(0,s.jsx)(n.li,{children:"性能测试函数 BenchmarkXxx() 的参数是 testing.B，函数内以 b.N 作为循环次数，其中 N 会动态变化"}),"\n",(0,s.jsxs)(n.li,{children:["示例函数 ExampleXxx()  没有参数，执行完会将输出与注释 ",(0,s.jsx)(n.code,{children:"// Output:"})," 进行对比"]}),"\n",(0,s.jsxs)(n.li,{children:["测试函数原型：func TestXxx(t *testing.T)，Xxx 部分为任意字母数字组合，首字母大写，例如： ",(0,s.jsx)(n.code,{children:"TestgenShortId"})," 是错误的函数名，",(0,s.jsx)(n.code,{children:"TestGenShortId"})," 是正确的函数名"]}),"\n",(0,s.jsxs)(n.li,{children:["通过调用 testing.T 的 Error、Errorf、FailNow、Fatal、FatalIf 方法来说明测试不通过，通过调用 Log、Logf 方法来记录测试信息：","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"t.Log t.Logf     # 正常信息 \nt.Error t.Errorf # 测试失败信息 \nt.Fatal t.Fatalf # 致命错误，测试程序退出的信息\nt.Fail     # 当前测试标记为失败\nt.Failed   # 查看失败标记\nt.FailNow  # 标记失败，并终止当前测试函数的执行，需要注意的是，我们只能在运行测试函数的 Goroutine 中调用 t.FailNow 方法，而不能在我们在测试代码创建出的 Goroutine 中调用它\nt.Skip     # 调用 t.Skip 方法相当于先后对 t.Log 和 t.SkipNow 方法进行调用，而调用 t.Skipf 方法则相当于先后对 t.Logf 和 t.SkipNow 方法进行调用。方法 t.Skipped 的结果值会告知我们当前的测试是否已被忽略\nt.Parallel # 标记为可并行运算\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"编写测试用例对-genshortid-函数进行单元测试",children:["编写测试用例（对 ",(0,s.jsx)(n.code,{children:"GenShortId"})," 函数进行单元测试）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编写测试用例对-genshortid-函数进行单元测试",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["在 ",(0,s.jsx)(n.code,{children:"util"})," 目录下创建文件 ",(0,s.jsx)(n.code,{children:"util_test.go"}),"，内容为："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package util\n\nimport (\n	"testing"\n)\n\nfunc TestGenShortId(t *testing.T) {\n	shortId, err := GenShortId()\n	if shortId == "" || err != nil {\n		t.Error("GenShortId failed!")\n	}\n\n	t.Log("GenShortId test pass")\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["从用例可以看出，如果 ",(0,s.jsx)(n.code,{children:"GenShortId()"})," 返回的 ",(0,s.jsx)(n.code,{children:"shortId"})," 为空或者 ",(0,s.jsx)(n.code,{children:"err"})," 不为空，则调用 ",(0,s.jsx)(n.code,{children:"t.Error()"})," 函数标明该用例测试不通过。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"执行用例"})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"util"})," 目录下执行命令 ",(0,s.jsx)(n.code,{children:"go test"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ cd util/\n$ go test\nPASS\nok  	apiserver/util	0.006s\n"})}),"\n",(0,s.jsxs)(n.p,{children:["要查看更详细的执行信息可以执行 ",(0,s.jsx)(n.code,{children:"go test -v"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ go test -v\n=== RUN   TestGenShortId\n--- PASS: TestGenShortId (0.00s)\n	util_test.go:13: GenShortId test pass\nPASS\nok  	apiserver/util	0.006s\n"})}),"\n",(0,s.jsxs)(n.p,{children:["根据 ",(0,s.jsx)(n.code,{children:"go test"})," 的输出可以知道 ",(0,s.jsx)(n.code,{children:"TestGenShortId"})," 用例测试通过。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果要执行测试 N 次可以使用 ",(0,s.jsx)(n.code,{children:"-count N"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ go test -v -count 2\n=== RUN   TestGenShortId\n--- PASS: TestGenShortId (0.00s)\n	util_test.go:13: GenShortId test pass\n=== RUN   TestGenShortId\n--- PASS: TestGenShortId (0.00s)\n	util_test.go:13: GenShortId test pass\nPASS\nok  	apiserver/util	0.006s\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"编写性能测试用例",children:["编写性能测试用例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编写性能测试用例",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"util/util_test.go"})," 测试文件中，新增两个性能测试函数：",(0,s.jsx)(n.code,{children:"BenchmarkGenShortId()"})," 和 ",(0,s.jsx)(n.code,{children:"BenchmarkGenShortIdTimeConsuming()"}),"（详见 ",(0,s.jsx)(n.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo15/util/util_test.go",target:"_blank",rel:"noopener noreferrer",children:"demo15/util/util_test.go"}),"）："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'func BenchmarkGenShortId(b *testing.B) {\n	for i := 0; i < b.N; i++ {\n		GenShortId()\n	}\n}\n\nfunc BenchmarkGenShortIdTimeConsuming(b *testing.B) {\n	b.StopTimer() // 调用该函数停止压力测试的时间计数\n\n	shortId, err := GenShortId()\n	if shortId == "" || err != nil {\n		b.Error(err)\n	}\n\n	b.StartTimer() // 重新开始时间\n\n	for i := 0; i < b.N; i++ {\n		GenShortId()\n	}\n}\n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"说明"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"性能测试函数名必须以 Benchmark 开头，如 BenchmarkXxx 或 Benchmark_xxx"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"go test"})," 默认不会执行压力测试函数，需要通过指定参数 ",(0,s.jsx)(n.code,{children:"-test.bench"})," 来运行压力测试函数，",(0,s.jsx)(n.code,{children:"-test.bench"})," 后跟正则表达式，如 ",(0,s.jsx)(n.code,{children:'go test -test.bench=".*"'})," 表示执行所有的压力测试函数"]}),"\n",(0,s.jsxs)(n.li,{children:["在压力测试中，需要在循环体中指定 ",(0,s.jsx)(n.code,{children:"testing.B.N"})," 来循环执行压力测试代码"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"执行压力测试"})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"util"})," 目录下执行命令 ",(0,s.jsx)(n.code,{children:'go test -test.bench=".*"'}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ go test -test.bench=".*"\ngoos: linux\ngoarch: amd64\npkg: apiserver/util\nBenchmarkGenShortId-2                	  500000	      2291 ns/op\nBenchmarkGenShortIdTimeConsuming-2   	  500000	      2333 ns/op\nPASS\nok  	apiserver/util	2.373s\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"上面的结果显示，我们没有执行任何 TestXXX 的单元测试函数，只执行了压力测试函数"}),"\n",(0,s.jsxs)(n.li,{children:["第一条显示了 ",(0,s.jsx)(n.code,{children:"BenchmarkGenShortId"})," 执行了 500000 次，每次的执行平均时间是 2291 纳秒"]}),"\n",(0,s.jsxs)(n.li,{children:["第二条显示了 ",(0,s.jsx)(n.code,{children:"BenchmarkGenShortIdTimeConsuming"})," 执行了 500000，每次的平均执行时间是 2333 纳秒"]}),"\n",(0,s.jsx)(n.li,{children:"最后一条显示总执行时间"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"BenchmarkGenShortIdTimeConsuming"})," 比 ",(0,s.jsx)(n.code,{children:"BenchmarkGenShortId"})," 多了两个调用 ",(0,s.jsx)(n.code,{children:"b.StopTimer()"})," 和 ",(0,s.jsx)(n.code,{children:"b.StartTimer()"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"b.StopTimer()"}),"：调用该函数停止压力测试的时间计数"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"b.StartTimer()"}),"：重新开始时间"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"b.StopTimer()"})," 和 ",(0,s.jsx)(n.code,{children:"b.StartTimer()"})," 之间可以做一些准备工作，这样这些时间不影响我们测试函数本身的性能。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"查看性能并生成函数调用图",children:["查看性能并生成函数调用图",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#查看性能并生成函数调用图",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"执行命令："}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ go test -bench=".*" -cpuprofile=cpu.profile ./util\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上述命令会在当前目录下生成 ",(0,s.jsx)(n.code,{children:"cpu.profile"})," 和 ",(0,s.jsx)(n.code,{children:"util.test"})," 文件。"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["执行 ",(0,s.jsx)(n.code,{children:"go tool pprof util.test cpu.profile"})," 查看性能（进入交互界面后执行 ",(0,s.jsx)(n.code,{children:"top"})," 指令）："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ go tool pprof util.test cpu.profile\n\nFile: util.test\nType: cpu\nTime: Jun 5, 2018 at 7:28pm (CST)\nDuration: 4.93s, Total samples = 4.97s (100.78%)\nEntering interactive mode (type "help" for commands, "o" for options)\n(pprof) top\nShowing nodes accounting for 3480ms, 70.02% of 4970ms total\nDropped 34 nodes (cum <= 24.85ms)\nShowing top 10 nodes out of 75\n      flat  flat%   sum%        cum   cum%\n    1890ms 38.03% 38.03%     1900ms 38.23%  syscall.Syscall\n     500ms 10.06% 48.09%      620ms 12.47%  runtime.mallocgc\n     240ms  4.83% 52.92%     3700ms 74.45%  vendor/github.com/teris-io/shortid.(*Abc).Encode\n     150ms  3.02% 55.94%      200ms  4.02%  runtime.scanobject\n     140ms  2.82% 58.75%      640ms 12.88%  runtime.makeslice\n     140ms  2.82% 61.57%      280ms  5.63%  runtime.slicerunetostring\n     120ms  2.41% 63.98%      120ms  2.41%  math.Log\n     110ms  2.21% 66.20%     2430ms 48.89%  io.ReadAtLeast\n     110ms  2.21% 68.41%      110ms  2.21%  runtime._ExternalCode\n      80ms  1.61% 70.02%      140ms  2.82%  runtime.deferreturn\n(pprof) \n'})}),"\n",(0,s.jsxs)(n.p,{children:["pprof 程序中最重要的命令就是 ",(0,s.jsx)(n.code,{children:"topN"}),"，此命令用于显示 profile 文件中的最靠前的 N 个样本（sample），它的输出格式各字段的含义依次是："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"采样点落在该函数中的总时间"}),"\n",(0,s.jsx)(n.li,{children:"采样点落在该函数中的百分比"}),"\n",(0,s.jsx)(n.li,{children:"上一项的累积百分比"}),"\n",(0,s.jsx)(n.li,{children:"采样点落在该函数，以及被它调用的函数中的总时间"}),"\n",(0,s.jsx)(n.li,{children:"采样点落在该函数，以及被它调用的函数中的总次数百分比"}),"\n",(0,s.jsx)(n.li,{children:"函数名"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["此外，在 pprof 程序中还可以使用 ",(0,s.jsx)(n.code,{children:"svg"})," 来生成函数调用关系图（需要安装 graphviz），例如："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/6/5/163d01d751cb3087?w=693&h=768&f=png&s=99002",alt:""})}),"\n",(0,s.jsx)(n.p,{children:"该调用图生成方法如下："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["安装 ",(0,s.jsx)(n.code,{children:"graphviz"})," 命令"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# yum -y install graphviz.x86_64\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["执行 ",(0,s.jsx)(n.code,{children:"go tool pprof"})," 生成 svg 图："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ go tool pprof util.test cpu.profile\nFile: util.test\nType: cpu\nTime: Jun 5, 2018 at 7:28pm (CST)\nDuration: 4.93s, Total samples = 4.97s (100.78%)\nEntering interactive mode (type "help" for commands, "o" for options)\n(pprof) svg\nGenerating report in profile001.svg\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"svg"})," 子命令会提示在 ",(0,s.jsx)(n.code,{children:"$GOPATH/src"})," 目录下生成了一个 svg 文件 ",(0,s.jsx)(n.code,{children:"profile001.svg"}),"。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["关于如何看懂 pprof 信息，请参考官方文档 ",(0,s.jsx)(n.a,{href:"https://blog.golang.org/profiling-go-programs",target:"_blank",rel:"noopener noreferrer",children:"Profiling Go Programs"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["关于如何做性能分析，请参考郝林大神的文章 ",(0,s.jsx)(n.a,{href:"https://github.com/hyper0x/go_command_tutorial/blob/master/0.12.md",target:"_blank",rel:"noopener noreferrer",children:"go tool pprof"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"测试覆盖率",children:["测试覆盖率",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#测试覆盖率",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们写单元测试的时候应该想得很全面，能够覆盖到所有的测试用例，但有时也会漏过一些 case，go 提供了 cover 工具来统计测试覆盖率。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"go test -coverprofile=cover.out"}),"：在测试文件目录下运行测试并统计测试覆盖率"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"go tool cover -func=cover.out"}),"：分析覆盖率文件，可以看出哪些函数没有测试，哪些函数内部的分支没有测试完全，cover 工具会通过执行代码的行数与总行数的比例表示出覆盖率"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"测试覆盖率"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ go test -coverprofile=cover.out\nPASS\ncoverage: 14.3% of statements\nok  	apiserver/util	0.006s\n[api@centos util]$ go tool cover -func=cover.out\napiserver/util/util.go:8:	GenShortId	100.0%\napiserver/util/util.go:12:	GetReqID	0.0%\ntotal:				(statements)	14.3%\n"})}),"\n",(0,s.jsxs)(n.p,{children:["可以看到 ",(0,s.jsx)(n.code,{children:"GenShortId()"})," 函数测试覆盖率为 100%，",(0,s.jsx)(n.code,{children:"GetReqID()"})," 测试覆盖率为 0%。"]}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本小节简单介绍了如何用 testing 包做单元和性能测试。在实际的开发中，要养成编写单元测试代码的好习惯，在项目上线前，最好对一些业务逻辑比较复杂的函数做一些性能测试，提前发现性能问题。"}),"\n",(0,s.jsxs)(n.p,{children:["至于怎么去分析性能，比如查找耗时最久的函数等，笔者链接了郝林大神专业的分析方法（",(0,s.jsx)(n.a,{href:"https://github.com/hyper0x/go_command_tutorial/blob/master/0.12.md",target:"_blank",rel:"noopener noreferrer",children:"go tool pprof"}),"），更深的分析技巧需要读者在实际开发中自己去探索。"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let d=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F20%E8%BF%9B%E9%98%B6%207%EF%BC%9Ago%20test%20%E6%B5%8B%E8%AF%95%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81.md"]={toc:[{text:"本节核心内容",id:"本节核心内容",depth:2},{text:"Go 语言测试支持",id:"go-语言测试支持",depth:2},{text:"编写测试用例（对 `GenShortId` 函数进行单元测试）",id:"编写测试用例对-genshortid-函数进行单元测试",depth:2},{text:"编写性能测试用例",id:"编写性能测试用例",depth:2},{text:"查看性能并生成函数调用图",id:"查看性能并生成函数调用图",depth:2},{text:"测试覆盖率",id:"测试覆盖率",depth:2},{text:"小结",id:"小结",depth:2}],title:"20进阶 7：go test 测试你的代码",headingTitle:"20进阶 7：go test 测试你的代码",frontmatter:{}}}}]);