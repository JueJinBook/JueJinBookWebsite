"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["24782"],{233908:function(e,d,s){s.r(d),s.d(d,{default:()=>r});var n=s(552676),a=s(740453);function c(e){let d=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",img:"img"},(0,a.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(d.h1,{id:"8进阶-5关于-add",children:["8进阶 5：关于 add",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#8进阶-5关于-add",children:"#"})]}),"\n",(0,n.jsxs)(d.p,{children:["前面说过了可以通过 ",(0,n.jsx)(d.code,{children:"add"})," 来把改动的内容放进暂存区。这一节关于 ",(0,n.jsx)(d.code,{children:"add"})," 再多说两点。都是基础的东西，但对新学 Git 的人可能有些用处。"]}),"\n",(0,n.jsxs)(d.h2,{id:"1-add-后面加个点-全部暂存",children:['1. add 后面加个点 "."：全部暂存',(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#1-add-后面加个点-全部暂存",children:"#"})]}),"\n",(0,n.jsxs)(d.p,{children:[(0,n.jsx)(d.code,{children:"add"})," 指令除了 ",(0,n.jsx)(d.code,{children:"git add 文件名"})," 这种用法外，还可以使用 ",(0,n.jsx)(d.code,{children:"add ."})," 来直接把工作目录下的所有改动全部放进暂存区："]}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-shell",children:"git status\n"})}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)(d.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe36e3ee159b2e?w=623&h=341&f=jpeg&s=82623",alt:""})}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-shell",children:"git add .\ngit status\n"})}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)(d.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe36e3ed623762?w=383&h=183&f=jpeg&s=46814",alt:""})}),"\n",(0,n.jsx)(d.p,{children:"这个用法没什么特别的好处，但就一个字：方便（咦？）。你在用的时候会更加深刻地体会到。"}),"\n",(0,n.jsxs)(d.h2,{id:"2-add-添加的是文件改动而不是文件名",children:["2. add 添加的是文件改动，而不是文件名",(0,n.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#2-add-添加的是文件改动而不是文件名",children:"#"})]}),"\n",(0,n.jsxs)(d.p,{children:["假如你修改了文件 ",(0,n.jsx)(d.code,{children:"a.txt"}),"，然后把它 ",(0,n.jsx)(d.code,{children:"add"})," 进了暂存区："]}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-shell",children:"git add a.txt\ngit status\n"})}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)(d.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe36e3ee50d1a6?w=386&h=149&f=jpeg&s=40273",alt:""})}),"\n",(0,n.jsxs)(d.p,{children:["然后你又往 ",(0,n.jsx)(d.code,{children:"a.txt"})," 里写了几行东西。这时候你再 ",(0,n.jsx)(d.code,{children:"status"})," 一下的话："]}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-shell",children:"git status\n"})}),"\n",(0,n.jsx)(d.p,{children:(0,n.jsx)(d.img,{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe36e3ed9f9877?w=618&h=221&f=jpeg&s=56939",alt:""})}),"\n",(0,n.jsxs)(d.p,{children:["你会发现你的 ",(0,n.jsx)(d.code,{children:"a.txt"}),' 既在 "Changes to be commited" 的暂存区，又在 "Changes not staged for commit"。不用觉得奇怪，这是因为通过 ',(0,n.jsx)(d.code,{children:"add"})," 添加进暂存区的不是文件名，而是具体的文件改动内容。你在 ",(0,n.jsx)(d.code,{children:"add"})," 时的改动都被添加进了暂存区，但在 ",(0,n.jsx)(d.code,{children:"add"})," 之后的新改动并不会自动被添加进暂存区。在这时如果你提交："]}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-shell",children:"git commit\n"})}),"\n",(0,n.jsx)(d.p,{children:"那么你那些新的改动是不会被提交的。"}),"\n",(0,n.jsx)(d.p,{children:"这种逻辑也许会让新学 Git 的人有点困惑和感到麻烦，但当你使用 Git 一段时间后，你会发现这种设计很巧妙，而且不但不麻烦，还很方便。具体的原因我就不长篇大论地说了，你以后慢慢体会吧。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:d}=Object.assign({},(0,a.ah)(),e.components);return d?(0,n.jsx)(d,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}let r=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["Git%20%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%2F8%E8%BF%9B%E9%98%B6%205%EF%BC%9A%E5%85%B3%E4%BA%8E%20add.md"]={toc:[{text:'1. add 后面加个点 "."：全部暂存',id:"1-add-后面加个点-全部暂存",depth:2},{text:"2. add 添加的是文件改动，而不是文件名",id:"2-add-添加的是文件改动而不是文件名",depth:2}],title:"8进阶 5：关于 add",headingTitle:"8进阶 5：关于 add",frontmatter:{}}}}]);