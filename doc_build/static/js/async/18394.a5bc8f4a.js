"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["18394"],{711974:function(e,n,i){i.r(n),i.d(n,{default:()=>x});var r=i(552676),d=i(740453);let s=i.p+"static/image/00699be45aa227f94c4a6849619bb8ab.dcdf6880.webp",c=i.p+"static/image/9affc75ebc4a02626ad0d926ea8276c6.0999bd53.webp",a=i.p+"static/image/6163add1d0ef507421bc56cb423fe5d7.87450ce8.webp",h=i.p+"static/image/52e41bf27be328fab8c407e2210227a3.70177b20.webp",l=i.p+"static/image/1cdee057b818f6e94730c07a2821e1c6.1b3b119f.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",code:"code",h2:"h2",img:"img",pre:"pre",h3:"h3",blockquote:"blockquote"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"8进阶篇深入服务端从跨域问题到-nginx-响应报头配置",children:["8.进阶篇：深入服务端——从跨域问题到 Nginx 响应报头配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8进阶篇深入服务端从跨域问题到-nginx-响应报头配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"前端工程师作为一个承上启下的工种"}),"，承接上方的 UI 层，开启对接后端的 API 层，前端开发可以说是软件开发过程中重要的一环。正因为前端的特殊地位，因此有时候不可避免需要接触并学习其上下游知识。"]}),"\n",(0,r.jsxs)(n.p,{children:["一个优秀的前端工程师，往往除了精通前端本身外，还需要具备一定的软件设计能力或者服务端开发能力，而本篇文章也将由原来的纯前端层面转变到服务端 ",(0,r.jsx)(n.code,{children:"Nginx"})," 配置层面，虽然进阶了一层，但本身其也与前端息息相关，借此笔者也将带大家更上一层楼。"]}),"\n",(0,r.jsxs)(n.h2,{id:"nginx-与跨域问题",children:["Nginx 与跨域问题",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#nginx-与跨域问题",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"大多数前端第一次接触 Nginx 可能并不是为了配置什么 HTTP 缓存相关的响应头，而是为了解决头疼的跨域问题。比如下方常见的浏览器跨域报错："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"20210910204624.jpg"})}),"\n",(0,r.jsx)(n.p,{children:"以上是笔者在掘金首页随便找了一个接口进行本地调用后报的跨域问题，从响应报头可以看出服务端做了访问限制："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"20210910205141.jpg"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Access-Control-Allow-Origin"})," 表示指定允许访问的域名（白名单），上述因为设置了 ",(0,r.jsx)(n.a,{href:"https://juejin.cn",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.cn"})," 的域名，所以除了该域名外的任何访问都将是不被允许的。"]}),"\n",(0,r.jsx)(n.p,{children:"因此如果前端访问后端跨域，首先要检查的便是服务端或者 Nginx 配置的 Access-Control-Allow-Origin 是否包含前端域名。"}),"\n",(0,r.jsx)(n.p,{children:"有些时候 Access-Control-Allow-Origin 被设置成 * 代表允许所有域名访问，但可能还会报如下跨域问题："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"20210910215922.jpg"})}),"\n",(0,r.jsxs)(n.p,{children:["该问题产生的根源其实是在前端，比如前端使用 ",(0,r.jsx)(n.code,{children:"Axios"})," 请求库时如果开启了以下配置："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"axios.defaults.withCredentials = true // 允许携带 cookie\n"})}),"\n",(0,r.jsxs)(n.p,{children:["其代表允许请求头携带 ",(0,r.jsx)(n.code,{children:"cookie "}),"，那么服务端配置 Access-Control-Allow-Origin 时就不能为 *，或者针对该类型的接口前端请求关闭该配置即可。"]}),"\n",(0,r.jsxs)(n.p,{children:["同时当前端配置了 ",(0,r.jsx)(n.code,{children:"axios.defaults.withCredentials = true"})," 时，服务端需配置 ",(0,r.jsx)(n.code,{children:"access-control-allow-credentials: true"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果浏览器发起了",(0,r.jsx)(n.strong,{children:"预检请求"}),"，那么可能还需要配置 ",(0,r.jsx)(n.code,{children:"access-control-allow-methods"})," 和 ",(0,r.jsx)(n.code,{children:"access-control-allow-headers"})," 报头为允许的值。比如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"access-control-allow-headers: Content-Type,Content-Length,Authorization,Accept,X-Requested-With\naccess-control-allow-methods: PUT,POST,GET,DELETE,OPTIONS\n"})}),"\n",(0,r.jsxs)(n.p,{children:["所谓预检请求，也就是浏览器控制台经常会看到的 ",(0,r.jsx)(n.code,{children:"OPTIONS"})," 请求。"]}),"\n",(0,r.jsxs)(n.p,{children:["关于什么时候会发起预检请求，与预检请求相反的称为“简单请求”，可以参考：",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82",target:"_blank",rel:"noopener noreferrer",children:"简单请求的触发条件"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"使用-nginx-配置响应报头",children:["使用 Nginx 配置响应报头",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-nginx-配置响应报头",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"通过跨域问题，让我们了解到了 Nginx 配置的重要性，下面我们就正式尝试使用 Nginx 来配置响应报头。"}),"\n",(0,r.jsxs)(n.h3,{id:"访问-nginx-服务器及配置文件",children:["访问 Nginx 服务器及配置文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#访问-nginx-服务器及配置文件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["第一步我们需要访问应用所在的 Nginx 服务器，这里笔者使用的是 ",(0,r.jsx)(n.code,{children:"finalshell"})," 工具，该软件支持 Windows 和 Mac 系统。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:"1610264529229005910.jpg"})}),"\n",(0,r.jsxs)(n.p,{children:["登录成功之后我们可以进入控制台使用 ",(0,r.jsx)(n.code,{children:"vim"})," 命令针对 nginx 配置文件进行编辑（首先得知道 nginx 配置文件的目录地址，一般以 nginx.conf 命名）："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"vim /etc/nginx/nginx.conf\n"})}),"\n",(0,r.jsx)(n.p,{children:"打开 nginx.conf 文件后可以通过以下常用命令进行操作："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"编辑：按 i 键，进入编辑模式\n保存：按下 :w\n保存并退出：按下 :wq\n退出：按下 :q\n返回命令模式：按\xa0esc 键，返回命令模式\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"修改跨域相关配置",children:["修改跨域相关配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#修改跨域相关配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["nginx.conf 文件中包含了很多参数项，如果要修改上述的跨域配置，那么首先找到对应的应用端口，修改 ",(0,r.jsx)(n.code,{children:"location /"})," 中的参数："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nginx",children:"server {\n    listen 80;\n    location / {\n        add_header Access-Control-Allow-Origin *; \n        add_header Access-Control-Allow-Methods 'PUT,POST,GET,DELETE,OPTIONS'; \n        add_header Access-Control-Allow-Headers 'Content-Type,Content-Length, Authorization, Accept,X-Requested-With';\n        \n        if ($request_method = 'OPTIONS') {\n            return 204;\n        }\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["修改完我们保存并退出后需要重启下 nginx 配置才会生效，运行 ",(0,r.jsx)(n.code,{children:"nginx -s reload"})," 命令。最终我们刷新页面观察响应报头成功返回了配置字段："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:"20210911162520.jpg"})}),"\n",(0,r.jsxs)(n.h3,{id:"修改缓存相关配置",children:["修改缓存相关配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#修改缓存相关配置",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"nginx 作为一个代理服务器，当处理静态资源时资源的一些如 eTag、last-modified 等首部大都是由源服务器返回的，一般在 nginx 配置中不会对其进行修改，而主要修改的是缓存方式和过期时间的配置。比如我们不想 html 文件命中强缓存，希望其走协商缓存，可以添加如下响应报头配置："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nginx",children:"server {\n    listen 80;\n    location / {\n        if ($request_filename ~* .*.(html|htm)$) {\n            add_header Cache-Control 'no-cache';\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"而像 js、css 和图片这样的静态资源，我们希望浏览器命中强缓存，nginx 可以设置相应的过期时间："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nginx",children:"server {\n    listen 80;\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf|js|css)$ {\n        expires 1d;\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上述配置我们以 1 天为例，最终浏览器将返回响应报头 ",(0,r.jsx)(n.code,{children:"Cache-Control: max-age=86400"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"add_header-的继承问题",children:["add_header 的继承问题",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#add_header-的继承问题",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"倘若我们在 html 的判断上层又添加了如下首部："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nginx",children:"server {\n    listen 80;\n    location / {\n        add_header Test '掘金';\n\n        if ($request_filename ~* .*.(html|htm)$) {\n            add_header Cache-Control 'no-cache';\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"那么如果按照 JavaScript 从上往下的执行顺序来猜想，最终 html 文件响应报头中将会被添加以上两个首部，而经过实际检验会发现只会添加 Cache-Control 首部，导致该结果的原因主要是 add_header 的继承问题。官方给出的解释如下："}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["There could be several",(0,r.jsx)(n.code,{children:"add_header"}),"directives. These directives are inherited from the previous level if and only if there are no",(0,r.jsx)(n.code,{children:"add_header"}),"directives defined on the current level."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["主要意思为",(0,r.jsx)(n.strong,{children:"当且仅当当前层级上未定义任何 add_header 时，才可以从上层继承 add_header"}),"。而上述的 if 模块便属于层级的概念，因此上层的 add_header 并不会起作用。"]}),"\n",(0,r.jsxs)(n.h2,{id:"结语",children:["结语",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结语",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本篇文章 Nginx 部分看似脱离了前端，实际与前端关系密切，同时本章内容也是掌握 HTTP 缓存知识不可或缺的一部分。笔者认为学习一门技术遇到瓶颈不在于这门技术本身，而是看你如何突破其上下游的知识领域，虽然本文没有涉及服务端更深层次的内容，但作为一个和前端缓存有来往的“邻居”，相信大家可以借此继续前行。"}),"\n",(0,r.jsx)(n.p,{children:"至此我们即将从“HTTP 缓存”学习班中毕业，相信一路打怪升级下来各位读者也积累了不少“装备”和“经验”，于此可以暂且休息一会，切勿“急功近利”，下文便将开启新的征程。"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let x=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF%E4%B8%8E%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90%2F8.%E8%BF%9B%E9%98%B6%E7%AF%87%EF%BC%9A%E6%B7%B1%E5%85%A5%E6%9C%8D%E5%8A%A1%E7%AB%AF%E2%80%94%E2%80%94%E4%BB%8E%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%88%B0%20Nginx%20%E5%93%8D%E5%BA%94%E6%8A%A5%E5%A4%B4%E9%85%8D%E7%BD%AE.md"]={toc:[{text:"Nginx 与跨域问题",id:"nginx-与跨域问题",depth:2},{text:"使用 Nginx 配置响应报头",id:"使用-nginx-配置响应报头",depth:2},{text:"访问 Nginx 服务器及配置文件",id:"访问-nginx-服务器及配置文件",depth:3},{text:"修改跨域相关配置",id:"修改跨域相关配置",depth:3},{text:"修改缓存相关配置",id:"修改缓存相关配置",depth:3},{text:"add_header 的继承问题",id:"add_header-的继承问题",depth:3},{text:"结语",id:"结语",depth:2}],title:"8.进阶篇：深入服务端——从跨域问题到 Nginx 响应报头配置",headingTitle:"8.进阶篇：深入服务端——从跨域问题到 Nginx 响应报头配置",frontmatter:{}}}}]);