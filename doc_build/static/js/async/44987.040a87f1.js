"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["44987"],{317148:function(n,e,r){r.r(e),r.d(e,{default:()=>a});var i=r(552676),s=r(740453);function l(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",h3:"h3",blockquote:"blockquote",pre:"pre",ol:"ol",li:"li",ul:"ul"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"第16章实战篇实现超级面板",children:["第16章—实战篇：实现超级面板",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第16章实战篇实现超级面板",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["\uFEFF## 前言\n超级面板又称超级菜单，是系统右击菜单的升级版，唤起方式可以通过快捷键，也可以通过鼠标键触发。超级面板本质也是一个特殊的 ",(0,i.jsx)(e.code,{children:"BrwoserWindow"}),"，只不过这个窗口中包含的都是一些自定义的菜单项。如果你使用过 ",(0,i.jsx)(e.a,{href:"https://getquicker.net/",target:"_blank",rel:"noopener noreferrer",children:"quicker"}),"，那么这个界面你应该不会陌生（点击鼠标中键或快速单击 Ctrl 键即可弹出面板窗口）："]}),"\n",(0,i.jsxs)(e.p,{children:["如果你使用 ",(0,i.jsx)(e.a,{href:"https://www.u.tools/",target:"_blank",rel:"noopener noreferrer",children:"uTools"}),"，那么你在长按鼠标右键的时候，也会产出 ",(0,i.jsx)(e.code,{children:"uTools"})," 的超级面板："]}),"\n",(0,i.jsx)(e.p,{children:"这些面板都是系统右击菜单的升级版，用于扩展更多自定义的快捷功能。接下来我们将通过 Rubick 系统插件的方式来实现一个超级面板插件。"}),"\n",(0,i.jsxs)(e.h2,{id:"实现超级面板",children:["实现超级面板",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现超级面板",children:"#"})]}),"\n",(0,i.jsxs)(e.h3,{id:"1-功能简介",children:["1. 功能简介",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-功能简介",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["超级面板都有一个唤起的触发方式，比如鼠标长按右击、鼠标中键、键盘快捷键……在 Rubick 中，我们将会通过快捷键 ",(0,i.jsx)(e.code,{children:"Ctrl+W"})," 的方式进行唤起。"]}),"\n",(0,i.jsx)(e.p,{children:"超级面板唤起后，会根据用户选中的目标进行匹配不同的功能，接下来我们会分别介绍这多重匹配功能的实现。"}),"\n",(0,i.jsxs)(e.h3,{id:"2-初始化插件项目",children:["2. 初始化插件项目",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-初始化插件项目",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["在 ",(0,i.jsx)(e.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304842476639453193",target:"_blank",rel:"noopener noreferrer",children:"《实战篇：系统插件的加载和取色插件的开发》"}),"章节，我们已经教会大家如何搭建一个基于 ",(0,i.jsx)(e.code,{children:"Vue 3"})," 的插件开发环境。这里我们可以继续利用上面搭建好的项目，再来开发一个超级面板系统插件。"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["之所以要开发系统插件，是因为我们希望超级面板可以随时随地使用，不依赖 ",(0,i.jsx)(e.code,{children:"BrwoserView"})," 的插件窗口渲染。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["因为是系统插件，所以我们需要在 ",(0,i.jsx)(e.code,{children:"public/"})," 目录下再新建一个系统插件的入口文件 ",(0,i.jsx)(e.code,{children:"main.js"}),"，并添加以下代码："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"// public/main.js\nmodule.exports = () => {\n  return {\n    // rubick 系统插件的 onReady 钩子函数\n    onReady(ctx) {\n      //  todo\n    }\n  }\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["然后修改 ",(0,i.jsx)(e.code,{children:"public/package.json"})," 文件，添加如下字段："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'{\n  // ...\n  // 标明入口文件\n  "entry": "main.js",\n  // 指明插件类型\n  "pluginType": "system",\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"这样我们一个系统插件的项目就初始化完成了。"}),"\n",(0,i.jsxs)(e.h3,{id:"2-添加超级面板窗口",children:["2. 添加超级面板窗口",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-添加超级面板窗口",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["接下来，我们需要实现用户触发 ",(0,i.jsx)(e.code,{children:"Ctrl+W"})," 快捷键唤起超级面板窗口的功能。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"// public/main.js\nconst superPanel = (ctx) => {\n  const { BrowserWindow } = ctx;\n  \n  let win;\n  \n  let init = () => {\n    if (win === null || win === undefined) {\n      // 创建超级面板窗口\n      createWindow();\n    }\n  };\n  \n  let createWindow = () => {\n    win = new BrowserWindow({\n      frame: false,\n      autoHideMenuBar: true,\n      width: 240,\n      height: 50,\n      show: false,\n      alwaysOnTop: true,\n      webPreferences: {\n        contextIsolation: false,\n        webSecurity: false,\n        backgroundThrottling: false,\n        nodeIntegration: true,\n        preload: path.join(__dirname, 'panel-preload.js'),\n      },\n    });\n    // dev 环境\n    win.loadURL(`http://localhost:8003/main`);\n    // 生产环境\n    // win.loadURL(`file://${__dirname}/main.html`);\n    win.on(\"closed\", () => {\n      win = undefined;\n    });\n    // 打包后，失焦隐藏\n    win.on(\"blur\", () => {\n      win.hide();\n    });\n  };\n  \n  let getWindow = () => win;\n  \n  return {\n    init,\n    getWindow,\n  };\n}\n\nmodule.exports = () => {\n  return {\n    async onReady(ctx) {\n      const {screen, globalShortcut} = ctx;\n      // 初始化超级面板 window\n      const panelInstance = superPanel(ctx);\n      panelInstance.init();\n      \n      globalShortcut.register('Ctrl+W', async () => {\n        // 获取鼠标位置\n        const { x, y } = screen.getCursorScreenPoint()\n        // 初始化超级面板窗口\n        let win = panelInstance.getWindow();\n        // 将像素位置转换成 windows 屏幕缩放比例后的实际坐标。\n        const pos = getPos(screen, {x, y});\n        // 设置窗口位置\n        win.setPosition(parseInt(pos.x), parseInt(pos.y));\n        win.setAlwaysOnTop(true);\n        win.setVisibleOnAllWorkspaces(true, {visibleOnFullScreen: true});\n        win.focus();\n        win.show();\n      });\n    },\n  }\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["其中 ",(0,i.jsx)(e.code,{children:"ctx"})," 是 Rubick 为钩子函数注入的上下文对象，在其中我们可以使用一些 Electron 主进程中的模块，然后我们通过 ",(0,i.jsx)(e.code,{children:"superPanel(ctx).init()"})," 方法创建了一个隐藏的超级面板窗口，当触发快捷键 ",(0,i.jsx)(e.code,{children:"Ctrl+W"})," 时再获取当前鼠标位置后，将超级面板窗口显示在鼠标位置处。"]}),"\n",(0,i.jsxs)(e.h3,{id:"3-选中文本目标",children:["3. 选中文本目标",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-选中文本目标",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"如果用户选择了文本目标，则会对文本进行划词翻译，并匹配需要处理文本类型的插件："}),"\n",(0,i.jsxs)(e.p,{children:["不管是文本匹配插件，还是划词翻译的能力，都强依赖于获取用户选中文本的内容。在 Electron 中，我们可以通过 ",(0,i.jsx)(e.a,{href:"https://www.electronjs.org/zh/docs/latest/api/clipboard",target:"_blank",rel:"noopener noreferrer",children:"Clipboard"})," 这个模块来获取剪贴板中的文字。但是没有任何方法获取到用户仅仅选择但未复制到剪贴板中的文字，总不能要求用户先选中文字内容再复制一下，再使用 ",(0,i.jsx)(e.code,{children:"Ctrl+W"})," 快捷键来唤起超级面板吧，这样链路太长了，也不符合操作习惯。"]}),"\n",(0,i.jsxs)(e.p,{children:["所以，有没有办法在触发 ",(0,i.jsx)(e.code,{children:"Ctrl+W"})," 快捷键的时候，就自动将选择的内容复制到剪贴板，然后再从剪贴板中读取呢？答案也是肯定的，我们来看看代码实现："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"// public/main.js\nconst { keyboard, Key } = require(\"@nut-tree/nut-js\");\nconst modifier = isMacOS ? Key.LeftSuper : Key.LeftControl;\n\nasync function simulateCopy() {\n  await keyboard.pressKey(modifier, Key.C);\n  await keyboard.releaseKey(modifier, Key.C);\n}\n\nfunction getSelectedContent(clipboard) {\n  return new Promise(async (resolve) => {\n    // 先清空剪贴板\n    clipboard.clear();\n    // 再执行模拟复制\n    await simulateCopy();\n    // 延时一定时间才能从剪切板内读取到内容\n    setTimeout(() => {\n      // 获取剪贴板中的内容\n      const text = clipboard.readText('clipboard') || ''\n      resolve({\n        text,\n      })\n      // ...\n    }, 50);\n  })\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["相信你一眼就知道了核心所在，这里采用了一个取巧的方式，我们使用了 ",(0,i.jsx)(e.a,{href:"https://nutjs.dev/",target:"_blank",rel:"noopener noreferrer",children:"nutjs"})," 这个库来实现模拟键盘按下 ",(0,i.jsx)(e.code,{children:"Ctrl/Command + C"})," 的动作，这个快捷键就是复制。然后再通过 ",(0,i.jsx)(e.code,{children:"clipboard.readText('clipboard')"})," 来读取剪贴板中的文案，这样便实现了获取用户选择文案的能力。"]}),"\n",(0,i.jsx)(e.p,{children:"获取了选择的文案，接下来只需要将文案发送给超级面板渲染进程进行处理："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"// public/main.js\nmodule.exports = () => {\n  return {\n    async onReady(ctx) {\n       // ...\n       const copyResult = await getSelectedContent(clipboard);\n       win.webContents.send('trigger-super-panel', {\n        ...copyResult,\n      });\n    },\n  }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"渲染进程进行文本匹配插件处理和翻译："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"ipcRenderer.on('trigger-super-panel', async (e, args) => {\n  if (args.text) {\n    const word = args.text;\n    // 翻译\n    translateStr(word);\n    // todo 插件匹配\n    // ...\n  }\n});\n"})}),"\n",(0,i.jsxs)(e.p,{children:["翻译功能使用的是有道翻译，可以在",(0,i.jsx)(e.a,{href:"https://ai.youdao.com/",target:"_blank",rel:"noopener noreferrer",children:"有道云"}),"上进行注册后获取 ",(0,i.jsx)(e.code,{children:"appKey"})," 和 ",(0,i.jsx)(e.code,{children:"secretKey"}),"。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"Translator.prototype.translate = async function (word) {\n  let youdaoHost = 'http://openapi.youdao.com/api';\n  // 在get请求中，中文需要进行uri编码\n  let encodeURIWord = encodeURI(word);\n  let salt = this.getRandomN(1000);\n  let sign = this.md5(this.config.appKey + word + salt + this.config.secretKey);\n  let paramsJson = {\n    q: encodeURIWord,\n    from: this.config.from,\n    to: this.config.to,\n    appKey: this.config.appKey,\n    salt: salt,\n    sign: sign\n  }\n  let url = youdaoHost + '?' + this.generateUrlParams(paramsJson);\n  let result = await request.get({ url: url });\n  return result;\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"4-选中非文本目标",children:["4. 选中非文本目标",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4-选中非文本目标",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"选中非文本目标会有多种情况产生，我们需要根据每种情况展示不同样式的超级面板，绝大多数情况下会出现以下三种情况。"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"用户当前鼠标在桌面上，未选择任何文件。"}),"\n"]}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"用户鼠标在 finder.app（Mac） 或 explorer.exe（Windows）文件夹内，但是未选中任何内容。"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.ol,{start:"3",children:["\n",(0,i.jsx)(e.li,{children:"用户选中了文件（图片、pdf、excel...）或文件夹。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"为了区分这三种情况，我们首先需要先获取当前用户剪贴板中内容，关于文本获取上面已经介绍过了，接下来我们介绍获取剪贴板中的文件路径内容。"}),"\n",(0,i.jsxs)(e.p,{children:["对于文件、文件夹而言，要获取选中文件、文件夹的路径还是和上面一样先通过 ",(0,i.jsx)(e.code,{children:"simulateCopy"})," 函数模拟复制后，再从剪贴板读取复制的文件路径。"]}),"\n",(0,i.jsx)(e.p,{children:"对于用户来说，也有可能一次选择了多个文件，使用 Electron 从剪贴板中获取多文件在不同平台有不同的处理方式，以 Windows 和 MacOS 为例："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"const getFilePathFromClipboard = (clipboard) => {\n  // 用于存放剪切板上的文件路径集合\n  let filePath = [];\n  // 若当前在mac系统中\n  if (process.platform === 'darwin') {\n    // 若存在多个文件\n    if (clipboard.has('NSFilenamesPboardType')) {\n      filePath =\n        clipboard\n          .read('NSFilenamesPboardType')\n          .match(/<string>.*</string>/g)\n          ?.map(item => item.replace(/<string>|</string>/g, '')) || [];\n    } else {\n      // 仅单个文件的时候\n      const clipboardImage = clipboard.readImage('clipboard');\n      // 若此文件为图片\n      if (!clipboardImage.isEmpty()) {\n        const png = clipboardImage.toPNG();\n        // 转成图片文件\n        const fileInfo = {\n          buffer: png,\n          mimetype: 'image/png',\n          originalname: uuid() + '.png'\n        };\n        filePath = [fileInfo];\n      } else {\n        filePath = [clipboard.read('public.file-url').replace('file://', '')].filter(item => item);\n      }\n    }\n  } else {\n    // 若当前在 windows 系统中，且剪切板上有多个文件\n    if (clipboard.has('CF_HDROP')) {\n      const rawFilePathStr = clipboard.read('CF_HDROP') || '';\n      let formatFilePathStr = [...rawFilePathStr]\n        .filter((_, index) => rawFilePathStr.charCodeAt(index) !== 0)\n        .join('')\n        .replace(/\\/g, '\\');\n      \n      const drivePrefix = formatFilePathStr.match(/[a-zA-Z]:\\/);\n      \n      if (drivePrefix) {\n        const drivePrefixIndex = formatFilePathStr.indexOf(drivePrefix[0]);\n        if (drivePrefixIndex !== 0) {\n          formatFilePathStr = formatFilePathStr.substring(drivePrefixIndex);\n        }\n        filePath = formatFilePathStr\n          .split(drivePrefix[0])\n          .filter(item => item)\n          .map(item => drivePrefix + item);\n      }\n    } else {\n      // 若为单个文件\n      const clipboardImage = clipboard.readImage('clipboard');\n      // 图片处理\n      if (!clipboardImage.isEmpty()) {\n        const png = clipboardImage.toPNG();\n        const fileInfo = {\n          buffer: png,\n          mimetype: 'image/png',\n          originalname: uuid() + '.png'\n        };\n        filePath = [fileInfo];\n      } else {\n        filePath = [\n          clipboard\n            .readBuffer('FileNameW')\n            .toString('ucs2')\n            .replace(RegExp(String.fromCharCode(0), 'g'), '')\n        ].filter(item => item);\n      }\n    }\n  }\n  return filePath;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Electron 读取剪贴板中的内容核心用到的是 ",(0,i.jsx)(e.a,{href:"https://www.electronjs.org/zh/docs/latest/api/clipboard#clipboardreadformat-%E5%AE%9E%E9%AA%8C%E5%8A%9F%E8%83%BD",target:"_blank",rel:"noopener noreferrer",children:"clipboard.read(format)"})," 这个 API，其中 ",(0,i.jsx)(e.code,{children:"format"})," 传入不同的值会有不同的含义："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["在 MacOS 系统中，通过 ",(0,i.jsx)(e.code,{children:"clipboard.read('NSFilenamesPboardType')"})," 读取被复制的文件或文件夹列表的 XML 格式描述文本。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["在 Windows 系统中，通过 ",(0,i.jsx)(e.code,{children:"clipboard.read('CF_HDROP')"})," 读取剪切板的上的文件名数组。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["在 MacOS 系统中，通过 ",(0,i.jsx)(e.code,{children:"clipboard.read('public.file-url')"})," 读取剪切板上的单个文件。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["在 Windows 系统中能通过 ",(0,i.jsx)(e.code,{children:"clipboard.read('FileNameW')"})," 读取剪切板上单个文件。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["通过 ",(0,i.jsx)(e.code,{children:"clipboard.readImage('clipboard')"})," 能获取剪切板上的图片。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"接下来就是将获取到的剪贴板中的内容信息传递给超级面板的渲染进程，由渲染进程进行处理。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'ipcRenderer.on(\'trigger-super-panel\', async (e, args) => {\n  // 如果 fileUrl === null 表示当前在桌面上\n  if (args.fileUrl === null) {\n    // ...\n  }\n  // 如果 不存在 args.fileUrl 且从剪贴板中获取到了 文本信息 表示当前是文本选择\n  else if (!args.fileUrl && args.text) {\n    const word = args.text;\n    // 翻译\n    translateStr(word);\n    // todo 插件匹配\n    // ...\n  } \n  // 如果fileUrl 是以这样的路径结尾：["explorer.exe", "SearchApp.exe", "SearchHost.exe", "FESearchHost.exe", "Finder.app"];\n  // 比如：C://xxx/explorer.exe\n  // 表示当前是在一个聚焦在文件夹内，且未选中任何内容  \n  else if (finders.includes(args.fileUrl.split(\'/\').pop()) || finders.includes(args.fileUrl.split(\'\\\').pop())) {\n    // 在文件中，但是未选择任何文件\n    // ...\n  }\n  else {\n    // 有文件选择\n    // ...\n  }\n});\n'})}),"\n",(0,i.jsxs)(e.p,{children:["其中 ",(0,i.jsx)(e.code,{children:"args"})," 是插件主进程获取剪贴板内容传递给渲染进程的参数，包含了 ",(0,i.jsx)(e.code,{children:"fileUrl"})," 和 ",(0,i.jsx)(e.code,{children:"text"})," 两个字段，分别代表从剪贴板中获取的文件路径和文本内容。上面代码核心就是根据这两个字段来进行用户选择判断。"]}),"\n",(0,i.jsx)(e.p,{children:"至此一个超级面板插件的核心功能已经完成。"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["完整代码见：",(0,i.jsx)(e.a,{href:"https://gitee.com/rubick-center/rubick-super-x",target:"_blank",rel:"noopener noreferrer",children:"https://gitee.com/rubick-center/rubick-super-x"})]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"总结",children:["总结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"通过以上内容介绍，我们再来回顾一下要实现一个超级面板的核心步骤："}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["先通过 ",(0,i.jsx)(e.code,{children:"globalShortcut.register"})," 来注册一个快捷触发方式。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["当用户选中目标进行快捷键唤起的时候，触发 ",(0,i.jsx)(e.code,{children:"Ctrl/Command + C"})," 把用户选中的内容复制到系统剪贴板。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["通过 Electron ",(0,i.jsx)(e.code,{children:"Clipboard"})," 模块来读取剪贴板中的内容，并传递给渲染进程处理。"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"渲染进程收到内容后，开始对用户选中目标类型做判断，给出不同的面板交互形式。"}),"\n"]}),"\n"]})]})}function t(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}let a=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC16%E7%AB%A0%E2%80%94%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%9A%E5%AE%9E%E7%8E%B0%E8%B6%85%E7%BA%A7%E9%9D%A2%E6%9D%BF.md"]={toc:[{text:"实现超级面板",id:"实现超级面板",depth:2},{text:"1. 功能简介",id:"1-功能简介",depth:3},{text:"2. 初始化插件项目",id:"2-初始化插件项目",depth:3},{text:"2. 添加超级面板窗口",id:"2-添加超级面板窗口",depth:3},{text:"3. 选中文本目标",id:"3-选中文本目标",depth:3},{text:"4. 选中非文本目标",id:"4-选中非文本目标",depth:3},{text:"总结",id:"总结",depth:2}],title:"第16章—实战篇：实现超级面板",headingTitle:"第16章—实战篇：实现超级面板",frontmatter:{}}}}]);