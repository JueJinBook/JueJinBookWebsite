"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["38283"],{166302:function(e,n,s){e.exports=s.p+"static/image/b57f4dce9e49c5383b9e528b334254f9.68a36aae.webp"},693736:function(e,n,s){e.exports=s.p+"static/image/d12b92f5c04f67a1e5240e5cce7c1b9e.b37e85e3.webp"},382471:function(e,n,s){s.r(n),s.d(n,{default:()=>j});var r=s(552676),t=s(740453);let a=s.p+"static/image/5205a097315e0d11001424ff8dd8f362.1398b22e.webp",i=s.p+"static/image/75db593e7b33e55aa674c8c250ca5644.9048de40.webp";var d=s(166302);let c=s.p+"static/image/578d21e4663ea34fd09e24d6a85cd750.1b49cb7c.webp",o=s.p+"static/image/51e55b7a016a067005ac21af15dc6f9f.c65bb16d.webp";var l=s(693736);let p=s.p+"static/image/104beb191393a5da104b2e5860d2afa7.b7c2467d.webp",h=s.p+"static/image/2fe5e2dd4d57255f5821c60366482f99.16f4ef8c.webp";function x(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",h3:"h3",strong:"strong",pre:"pre",code:"code",img:"img",ol:"ol",li:"li"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"27-实战篇---zod",children:["27-实战篇 ❘  Zod",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#27-实战篇---zod",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"推荐学习指数：⭐️️⭐️️⭐️️"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"1-前言",children:["1. 前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Zod 几乎是前端开发的必学内容了，因为大部分的全栈项目都会有数据校验的场景，像 Next.js ",(0,r.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#server-side-validation-and-error-handling",title:"https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#server-side-validation-and-error-handling",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"推荐的正是 ",(0,r.jsx)(n.a,{href:"https://zod.dev/",title:"https://zod.dev/",target:"_blank",rel:"noopener noreferrer",children:"Zod"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"目前 Zod GitHub 31.5k Star，Npm 周均下载量 784W，几乎是前端做数据校验的第一选择。"}),"\n",(0,r.jsx)(n.p,{children:"本篇带大家快速上手 Zod。"}),"\n",(0,r.jsxs)(n.h2,{id:"2-zod-介绍",children:["2. Zod 介绍",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-zod-介绍",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"21-基础介绍",children:["2.1. 基础介绍",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-基础介绍",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Zod 是一个 TypeScript 优先（TypeScript-first）的模式声明（schema declaration）和验证库（validation library）"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"第一次听到这个介绍可能会“不明觉厉”，但其实很简单，举个简单的例子："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { z } from "zod";\n\n// 模式声明\nconst schema = z.string();\n\n// 数据校验\nschema.parse("tuna"); // => "tuna"\nschema.parse(12); // => throws ZodError\n'})}),"\n",(0,r.jsx)(n.p,{children:"这就是一个基本的模式声明和数据验证的例子。那什么是 TypeScript 优先呢？"}),"\n",(0,r.jsx)(n.p,{children:"简单来说，就是和 TypeScript 搭配使用，效果更佳。Zod 的目的在于消除重复的类型声明。使用 Zod，你只需声明一次验证器（validator），Zod 就会自动推断出静态 TypeScript 类型。细看 Zod 的 API，你会发现 Zod 与 TypeScript 的类型系统几乎是一对一的映射。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\n\n// 模式声明\nconst User = z.object({\n  username: z.string(),\n});\n\n// 数据校验\nUser.parse({ username: "Ludwig" });\n\n// 提取推断类型\ntype User = z.infer<typeof User>;\n// { username: string }\n'})}),"\n",(0,r.jsx)(n.p,{children:"注意：但这并不是说使用 Zod 就一定要使用 TypeScript，Zod 也可用于纯 JavaScript。"}),"\n",(0,r.jsxs)(n.h3,{id:"22-运行时校验",children:["2.2. 运行时校验",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-运行时校验",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"那你可能就好奇了，不都是数据校验，我都有 TypeScript 了，用 Zod 干嘛？"}),"\n",(0,r.jsx)(n.p,{children:"简单来说，TypeScript 是静态类型检查，但 Zod 不仅能在编译时提供类型检查，还能在运行时进行数据校验。这样就可以从源头上防止数据不合法而导致的错误，提高应用的稳定性。"}),"\n",(0,r.jsx)(n.p,{children:"举个例子，我们调用接口，获取返回的数据并进行处理："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'export async function GET() {\n  const res = await fetch("/api/product");\n  const data = await res.json();\n\n  const showPrice = data.price.toFixed(2);\n  return Response.json({ showPrice });\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"在这段代码中，data 肯定会被推断为 any，因为 data 是运行时返回的数据，TypeScript 并不知道："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们当然可以补全类型声明："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type Product = {\n  price: number;\n};\n\nexport async function GET() {\n  const res = await fetch("/api/product");\n  const data = (await res.json()) as Product;\n\n  const showPrice = data.price.toFixed(2);\n  return Response.json({ showPrice });\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"现在 price 字段声明了数字类型，如果我们使用了字符串的方法, TypeScript 就会报错。"}),"\n",(0,r.jsx)(n.p,{children:"但问题在于，即便我们不使用，但接口的返回数据类型突然改了呢？比如本来是 Number 类型，后端改为了 String 类型？因为 String 类型没有 toFixed 方法，那这段代码运行的时候就会报错。"}),"\n",(0,r.jsx)(n.p,{children:"为了防止运行时产生问题，我们还需要做判断，比如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type Product = {\n  price: number;\n};\n\nexport async function GET() {\n  const res = await fetch("/api/product");\n  const data = (await res.json()) as Product;\n\n  if (data && data.price && typeof data.price == "number") {\n    const showPrice = data.price.toFixed(2);\n    return Response.json({ showPrice });\n  } else {\n    return Response.json({ success: false });\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"如果涉及的字段众多，每个字段都写一段校验，代码很快就会变得臃肿难以维护。"}),"\n",(0,r.jsx)(n.p,{children:"而 Zod 正好可以解决这一问题，使用 Zod 后，代码改为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { z } from "zod";\n\nconst schema = z.object({\n  price: z.number(),\n});\n\nexport async function GET() {\n  const res = await fetch("/api/product");\n  const data = await res.json();\n\n  const parsedData = schema.safeParse(data);\n\n  if (parsedData.success) {\n    const showPrice = parsedData.data.price.toFixed(2);\n    return Response.json({ showPrice });\n  } else {\n    return Response.json({ success: false });\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"整体代码更加简洁优雅，而且你也不需要再写类型声明："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"先对接口返回的数据进行校验，通过后再进行后续操作，从源头上防止数据不合法而导致的错误，提高应用的稳定性，而且还能帮助 TypeScript 进行推断，使用起来非常方便。"}),"\n",(0,r.jsxs)(n.h3,{id:"23-如何学习-zod",children:["2.3. 如何学习 Zod",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-如何学习-zod",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"那具体如何学习 Zod 呢？就我个人看法，学习 Zod 的最好方法就是看 Zod 的官方文档："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["英文：",(0,r.jsx)(n.a,{href:"https://zod.dev/",title:"https://zod.dev/",target:"_blank",rel:"noopener noreferrer",children:"zod.dev/"})]}),"\n",(0,r.jsxs)(n.li,{children:["中文：",(0,r.jsx)(n.a,{href:"https://zod.dev/README_ZH",title:"https://zod.dev/README_ZH",target:"_blank",rel:"noopener noreferrer",children:"zod.dev/README_ZH"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"内容并不算多， 20 分钟就可以看个大概。首要目的是了解 Zod 有哪些功能，具体要用的时候边查文档边学习。"}),"\n",(0,r.jsxs)(n.p,{children:["如果文档看不下去，这是一个 30 分钟学习 Zod 的 ",(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=L6BE-U3oy80&ab_channel=WebDevSimplified",title:"https://www.youtube.com/watch?v=L6BE-U3oy80&ab_channel=WebDevSimplified",target:"_blank",rel:"noopener noreferrer",children:"Youtube 视频"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"3-svelte--zod",children:["3. Svelte + Zod",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-svelte--zod",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"31-项目初始化",children:["3.1. 项目初始化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-项目初始化",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"运行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm create svelte@latest svelte-todolist\n"})}),"\n",(0,r.jsxs)(n.p,{children:["选择 ",(0,r.jsx)(n.strong,{children:"Skeleton project、TypeScript、Svelte 5："})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"按照命令行中的提示提交代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'cd svelte-todolist\n\nnpm install\n\ngit init && git add -A && git commit -m "Initial commit"\n'})}),"\n",(0,r.jsx)(n.p,{children:"运行："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx svelte-add\n"})}),"\n",(0,r.jsx)(n.p,{children:"选择 Tailwind CSS："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"查看此时的 Git 提交记录，可以清晰的看到添加的内容："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"开启本地开发模式："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev -- --open\n"})}),"\n",(0,r.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"32-使用-zod",children:["3.2. 使用 Zod",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-使用-zod",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"安装 Zod："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"npm install zod\n"})}),"\n",(0,r.jsx)(n.p,{children:"我们以注册页面为例为大家进行讲解："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"src/lib/types.ts"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\n\nexport const UserSchema = z.object({\n  username: z.string().min(2, "用户名最少 2 位"),\n  password: z\n    .string()\n    .regex(new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$"), {\n      message: "密码至少 8 位，包含一个大写字母，一个小写字母和一个数字",\n    }),\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"这里我们声明了登录时提交数据的 Schema，之所以将其单独抽离，是因为数据校验往往是前后端都需要的。前端做校验是因为要避免浪费服务端资源，后端做校验是因为不能信任来自前端的数据。"}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"src/routes/signup/+page.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<script lang="ts">\n  import type { ZodIssue } from \'zod\';\n  import ZodIssues from \'$lib/components/ZodIssues.svelte\';\n  import { enhance } from \'$app/forms\';\n  import { UserSchema } from \'$lib/types\';\n\n  let issues: ZodIssue[] = $state([]);\n<\/script>\n\n<div class="flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8">\n  <form\n    method="POST"\n    use:enhance={({ formElement, formData, action, cancel, submitter }) => {\n      const result = UserSchema.safeParse(Object.fromEntries(formData));\n      if (!result.success) {\n        issues = result.error.issues;\n        cancel();\n      }\n      return async ({ result, update }) => {\n        if (result.type == \'failure\') {\n          issues = result.data!.issues as ZodIssue[];\n        }\n        await update();\n      };\n    }}\n  >\n    <div class="mb-2">\n      <label for="username" class="mb-2 block text-sm font-medium leading-6 text-gray-900">\n        用户名\n      </label>\n      <input\n        id="username"\n        name="username"\n        type="text"\n        required\n        class="block w-full rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n      />\n    </div>\n\n    <div class="mb-4">\n      <div class="flex items-center justify-between">\n        <label for="password" class="block text-sm font-medium leading-6 text-gray-900">\n          密码\n        </label>\n      </div>\n      <div class="mt-2">\n        <input\n          id="password"\n          name="password"\n          type="password"\n          required\n          autoComplete="current-password"\n          class="block w-full rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n        />\n      </div>\n    </div>\n\n    <button\n      type="submit"\n      class="mb-4 flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"\n    >\n      注册\n    </button>\n  </form>\n  <ZodIssues {issues} />\n</div>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这是实现数据校验的核心代码，主要是使用 ",(0,r.jsx)(n.code,{children:"use:enhance"}),"实现提交前的数据验证，如果无法通过 Zod 校验，就取消提交数据。如果通过，再根据返回结果展示数据。"]}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"src/routes/signup/+page.server.ts"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"import { fail, redirect } from '@sveltejs/kit';\nimport { UserSchema } from '$lib/types';\n\nexport const actions = {\n  default: async ({ request }) => {\n    const formData = Object.fromEntries(await request.formData());\n\n    const safeParse = UserSchema.safeParse(formData);\n\n    if (!safeParse.success) {\n      return fail(400, { issues: safeParse.error.issues });\n    }\n\n    redirect(303, '/');\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这段代码很简单，主要是用 Zod 做数据校验，如果失败，就返回错误信息。如果成功，就跳转到 ",(0,r.jsx)(n.code,{children:"/"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"src/lib/components/ZodIssues.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<script lang=\"ts\">\n  import type { ZodIssue } from 'zod';\n\n  let { issues }: { issues: ZodIssue[] } = $props();\n<\/script>\n\n<ul>\n  {#each issues as { message, path }}\n    <li>{path[0]} - {message}</li>\n  {/each}\n</ul>\n"})}),"\n",(0,r.jsx)(n.p,{children:"这是为了方便展示 Zod 返回的错误。"}),"\n",(0,r.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"4-最后",children:["4. 最后",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-最后",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本篇我们介绍了 Zod 的背景和用途，并实现了一个 Svelte + Zod 的全栈例子。常见的全栈框架如 Next.js、SvelteKit 都常使用 Zod。但在实际项目开发中，我们往往并不只用 Zod，比如 Next.js 会使用 Shadcn UI + React Hook Form + Zod 的组合拳，在 Svelte 中，常会用 SuperForm + Zod，这正是下篇我们要介绍的内容。"})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}let j=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["Svelte%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F27-%E5%AE%9E%E6%88%98%E7%AF%87%20%E2%9D%98%20%20Zod.md"]={toc:[{text:"1. 前言",id:"1-前言",depth:2},{text:"2. Zod 介绍",id:"2-zod-介绍",depth:2},{text:"2.1. 基础介绍",id:"21-基础介绍",depth:3},{text:"2.2. 运行时校验",id:"22-运行时校验",depth:3},{text:"2.3. 如何学习 Zod",id:"23-如何学习-zod",depth:3},{text:"3. Svelte + Zod",id:"3-svelte--zod",depth:2},{text:"3.1. 项目初始化",id:"31-项目初始化",depth:3},{text:"3.2. 使用 Zod",id:"32-使用-zod",depth:3},{text:"4. 最后",id:"4-最后",depth:2}],title:"27-实战篇 ❘  Zod",headingTitle:"27-实战篇 ❘  Zod",frontmatter:{}}}}]);