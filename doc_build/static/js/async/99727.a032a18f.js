"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["99727"],{929111:function(n,e,s){s.r(e),s.d(e,{default:()=>u});var i=s(552676),c=s(740453);let d=s.p+"static/image/19a5fa3a3278dbf07dd613de8bfca694.1610cacc.webp",l=s.p+"static/image/1ddd98aa2a209a02fe010789579d8b7c.1d098070.webp",h=s.p+"static/image/af20668d84ce76c1755ee895b974380d.8c5e2ad2.webp",r=s.p+"static/image/a7a4fe9d321a22ac29c70e979935028a.1610cacc.webp",x=s.p+"static/image/663133906068207c68fbd74543a64620.eff00705.webp",o=s.p+"static/image/0edea31582854813f5a3d4ab0bf6c2a8.e3e78181.webp",j=s.p+"static/image/cdc9bacc10ede946ea5efa5af34f32bd.666aac65.webp";function t(n){let e=Object.assign({h1:"h1",a:"a",p:"p",ol:"ol",li:"li",code:"code",h2:"h2",strong:"strong",img:"img",ul:"ul",blockquote:"blockquote",pre:"pre"},(0,c.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"16如何正确使用-splitchunks提升应用性能",children:["16.如何正确使用 SplitChunks提升应用性能？",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#16如何正确使用-splitchunks提升应用性能",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Webpack 默认会将尽可能多的模块代码打包在一起，优点是能减少最终页面的 HTTP 请求数，但缺点也很明显："}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"页面初始代码包过大，影响首屏渲染性能；"}),"\n",(0,i.jsx)(e.li,{children:"无法有效应用浏览器缓存，特别对于 NPM 包这类变动较少的代码，业务代码哪怕改了一行都会导致 NPM 包缓存失效。"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["为此，Webpack 提供了 ",(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 插件，专门用于根据产物包的体积、引用次数等做分包优化，规避上述问题，特别适合生产环境使用。"]}),"\n",(0,i.jsxs)(e.p,{children:["不过，",(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 的使用方法比较复杂，我们得从 Chunk 这个概念开始说起。"]}),"\n",(0,i.jsxs)(e.h2,{id:"深入理解-chunk",children:["深入理解 Chunk",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#深入理解-chunk",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Chunk 是 Webpack 内部一个非常重要的底层设计，用于组织、管理、优化最终产物，在构建流程进入生成(Seal)阶段后："}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["Webpack 首先根据 ",(0,i.jsx)(e.code,{children:"entry"})," 配置创建若干 Chunk 对象；"]}),"\n",(0,i.jsx)(e.li,{children:"遍历构建(Make)阶段找到的所有 Module 对象，同一 Entry 下的模块分配到 Entry 对应的 Chunk 中；"}),"\n",(0,i.jsx)(e.li,{children:"遇到异步模块则创建新的 Chunk 对象，并将异步模块放入该 Chunk；"}),"\n",(0,i.jsxs)(e.li,{children:["分配完毕后，根据 SplitChunksPlugin 的启发式算法进一步对这些 Chunk 执行",(0,i.jsx)(e.strong,{children:"裁剪、拆分、合并、代码调优"}),"，最终调整成运行性能(可能)更优的形态；"]}),"\n",(0,i.jsx)(e.li,{children:"最后，将这些 Chunk 一个个输出成最终的产物(Asset)文件，编译工作到此结束。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["可以看出，Chunk 在构建流程中起着承上启下的关键作用 —— 一方面作为 Module 容器，根据一系列默认 ",(0,i.jsx)(e.strong,{children:"分包策略"})," 决定哪些模块应该合并在一起打包；另一方面根据 ",(0,i.jsx)(e.code,{children:"splitChunks"})," 设定的 ",(0,i.jsx)(e.strong,{children:"策略"})," 优化分包，决定最终输出多少产物文件。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Chunk 分包结果的好坏直接影响了最终应用性能"}),"，Webpack 默认会将以下三种模块做分包处理："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Initial Chunk：",(0,i.jsx)(e.code,{children:"entry"})," 模块及相应子模块打包成 Initial Chunk；"]}),"\n",(0,i.jsxs)(e.li,{children:["Async Chunk：通过 ",(0,i.jsx)(e.code,{children:"import('./xx')"})," 等语句导入的异步模块及相应子模块组成的 Async Chunk；"]}),"\n",(0,i.jsxs)(e.li,{children:["Runtime Chunk：运行时代码抽离成 Runtime Chunk，可通过 ",(0,i.jsx)(e.a,{href:"https://webpack.js.org/configuration/entry-context/#dependencies",target:"_blank",rel:"noopener noreferrer",children:"entry.runtime"})," 配置项实现。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Runtime Chunk 规则比较简单，本文先不关注，但 Initial Chunk 与 Async Chunk 这种略显粗暴的规则会带来两个明显问题："}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"模块重复打包："})}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"假如多个 Chunk 同时依赖同一个 Module，那么这个 Module 会被不受限制地重复打包进这些 Chunk，例如对于下面的模块关系："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["示例中 ",(0,i.jsx)(e.code,{children:"main/index"})," 入口(",(0,i.jsx)(e.code,{children:"entry"}),")同时依赖于 ",(0,i.jsx)(e.code,{children:"c"})," 模块，默认情况下 Webpack 不会对此做任何优化处理，只是单纯地将 ",(0,i.jsx)(e.code,{children:"c"})," 模块同时打包进 ",(0,i.jsx)(e.code,{children:"main/index"})," 两个 Chunk："]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"资源冗余 & 低效缓存："})}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Webpack 会将 Entry 模块、异步模块所有代码都打进同一个单独的包，这在小型项目通常不会有明显的性能问题，但伴随着项目的推进，包体积逐步增长可能会导致应用的响应耗时越来越长。归根结底这种将所有资源打包成一个文件的方式存在两个弊端："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"资源冗余"}),"：客户端必须等待整个应用的代码包都加载完毕才能启动运行，但可能用户当下访问的内容只需要使用其中一部分代码"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"缓存失效"}),"：将所有资源达成一个包后，所有改动 —— 即使只是修改了一个字符，客户端都需要重新下载整个代码包，缓存命中率极低"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"这两个问题都可以通过更科学的分包策略解决，例如："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"将被多个 Chunk 依赖的包分离成独立 Chunk，防止资源重复；"}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"node_modules"})," 中的资源通常变动较少，可以抽成一个独立的包，业务代码的频繁变动不会导致这部分第三方库资源缓存失效，被无意义地重复加载。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["为此，Webpack 专门提供了 ",(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 插件，用于实现更灵活、可配置的分包，提升应用性能。"]}),"\n",(0,i.jsxs)(e.h2,{id:"splitchunksplugin-简介",children:["SplitChunksPlugin 简介",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#splitchunksplugin-简介",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"https://webpack.docschina.org/plugins/split-chunks-plugin/",target:"_blank",rel:"noopener noreferrer",children:"SplitChunksPlugin"})," 是 Webpack 4 之后内置实现的最新分包方案，与 Webpack3 时代的 ",(0,i.jsx)(e.code,{children:"CommonsChunkPlugin"})," 相比，它能够基于一些更灵活、合理的启发式规则将 Module 编排进不同的 Chunk，最终构建出性能更佳，缓存更友好的应用产物。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 的用法比较抽象，算得上 Webpack 的一个难点，主要能力有："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 支持根据 Module 路径、Module 被引用次数、Chunk 大小、Chunk 请求数等决定是否对 Chunk 做进一步拆解，这些决策都可以通过 ",(0,i.jsx)(e.code,{children:"optimization.splitChunks"})," 相应配置项调整定制，基于这些能力我们可以实现：","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["单独打包某些特定路径的内容，例如 ",(0,i.jsx)(e.code,{children:"node_modules"})," 打包为 ",(0,i.jsx)(e.code,{children:"vendors"}),"；"]}),"\n",(0,i.jsx)(e.li,{children:"单独打包使用频率较高的文件；"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 还提供了 ",(0,i.jsx)(e.code,{children:"optimization.splitChunks.cacheGroup"})," 概念，用于对不同特点的资源做分组处理，并为这些分组设置更有针对性的分包规则；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 还内置了 ",(0,i.jsx)(e.code,{children:"default"})," 与 ",(0,i.jsx)(e.code,{children:"defaultVendors"})," 两个 ",(0,i.jsx)(e.code,{children:"cacheGroup"}),"，提供一些开箱即用的分包特性：","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"node_modules"})," 资源会命中 ",(0,i.jsx)(e.code,{children:"defaultVendors"})," 规则，并被单独打包；"]}),"\n",(0,i.jsx)(e.li,{children:"只有包体超过 20kb 的 Chunk 才会被单独打包；"}),"\n",(0,i.jsx)(e.li,{children:"加载 Async Chunk 所需请求数不得超过 30；"}),"\n",(0,i.jsx)(e.li,{children:"加载 Initial Chunk 所需请求数不得超过 30。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"提示：这里所说的请求数不能等价对标到 http 资源请求数，下面会细讲。"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["由于 Webpack4 开始已经内置支持 ",(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," ，我们不需要额外安装依赖，直接修改 ",(0,i.jsx)(e.a,{href:"https://webpack.js.org/configuration/optimization/#optimizationsplitchunks",target:"_blank",rel:"noopener noreferrer",children:"optimization.splitChunks"})," 配置项即可实现自定义的分包策略："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      // ...\n    },\n  },\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"splitChunks"})," 主要有两种类型的配置："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"minChunks/minSize/maxInitialRequest"})," 等分包条件，满足这些条件的模块都会被执行分包；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"cacheGroup"})," ：用于为特定资源声明特定分包条件，例如可以为 ",(0,i.jsx)(e.code,{children:"node_modules"})," 包设定更宽松的分包条件。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"下面展开细讲。"}),"\n",(0,i.jsxs)(e.h2,{id:"设置分包范围",children:["设置分包范围",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#设置分包范围",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["首先，",(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 默认情况下只对 Async Chunk 生效，我们可以通过 ",(0,i.jsx)(e.code,{children:"splitChunks.chunks"})," 调整作用范围，该配置项支持如下值："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["字符串 ",(0,i.jsx)(e.code,{children:"'all'"})," ：对 Initial Chunk 与 Async Chunk 都生效，建议优先使用该值；"]}),"\n",(0,i.jsxs)(e.li,{children:["字符串 ",(0,i.jsx)(e.code,{children:"'initial'"})," ：只对 Initial Chunk 生效；"]}),"\n",(0,i.jsxs)(e.li,{children:["字符串 ",(0,i.jsx)(e.code,{children:"'async'"})," ：只对 Async Chunk 生效；"]}),"\n",(0,i.jsxs)(e.li,{children:["函数 ",(0,i.jsx)(e.code,{children:"(chunk) => boolean"})," ：该函数返回 ",(0,i.jsx)(e.code,{children:"true"})," 时生效；"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"例如："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      chunks: 'all',\n    },\n  },\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["设置为 ",(0,i.jsx)(e.code,{children:"all"})," 效果最佳，此时 Initial Chunk、Async Chunk 都会被 ",(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 插件优化。"]}),"\n",(0,i.jsxs)(e.h2,{id:"根据-module-使用频率分包",children:["根据 Module 使用频率分包",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#根据-module-使用频率分包",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 支持按 Module 被 Chunk 引用的次数决定是否分包，借助这种能力我们可以轻易将那些被频繁使用的模块打包成独立文件，减少代码重复。"]}),"\n",(0,i.jsxs)(e.p,{children:["用法很简单，只需用 ",(0,i.jsx)(e.code,{children:"splitChunks.minChunks"})," 配置项设定最小引用次数，例如："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      // 设定引用次数超过 2 的模块才进行分包\n      minChunks: 2\n    },\n  },\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["注意，这里“被 Chunk 引用次数”并不直接等价于被 ",(0,i.jsx)(e.code,{children:"import"})," 的次数，而是取决于上游调用者是否被视作 Initial Chunk 或 Async Chunk 处理，例如："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"// common.js\nexport default \"common chunk\";\n\n// async-module.js\nimport common from './common'\n\n// entry-a.js\nimport common from './common'\nimport('./async-module')\n\n// entry-b.js\nimport common from './common'\n\n"})}),"\n",(0,i.jsx)(e.p,{children:"上例包含四个模块，形成如下模块关系图："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["其中，",(0,i.jsx)(e.code,{children:"entry-a"}),"、",(0,i.jsx)(e.code,{children:"entry-b"})," 分别被视作 Initial Chunk 处理；",(0,i.jsx)(e.code,{children:"async-module"})," 被 ",(0,i.jsx)(e.code,{children:"entry-a"})," 以异步方式引入，因此被视作 Async Chunk 处理。那么对于 ",(0,i.jsx)(e.code,{children:"common"})," 模块来说，分别被三个不同的 Chunk 引入，此时引用次数为 3，配合下面的配置："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"// webpack.config.js\nmodule.exports = {\n  entry: {\n    entry1: './src/entry-a.js',\n    entry2: './src/entry-b.js'\n  },\n  // ...\n  optimization: {\n    splitChunks: {      \n      minChunks: 2,\n      //...\n    }\n  }\n};\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["提示：示例已上传到 ",(0,i.jsx)(e.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/tree/main/splitchunks-basic",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"common"})," 模块命中 ",(0,i.jsx)(e.code,{children:"optimization.splitChunks.minChunks = 2"})," 规则，因此该模块",(0,i.jsx)(e.strong,{children:"可能"}),"会被单独分包，最终产物："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"entry1.js"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"entry1.js"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"async-module.js"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"common.js"})}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["强调一下，上面说的是“",(0,i.jsx)(e.strong,{children:"可能"}),"”，",(0,i.jsx)(e.code,{children:"minChunks"})," 并不是唯一条件，此外还需要满足诸如 ",(0,i.jsx)(e.code,{children:"minSize"}),"、",(0,i.jsx)(e.code,{children:"chunks"})," 等限制条件才会真正执行分包，接着往下看。"]}),"\n",(0,i.jsxs)(e.h2,{id:"限制分包数量",children:["限制分包数量",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#限制分包数量",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["在 ",(0,i.jsx)(e.code,{children:"minChunks"})," 基础上，为防止最终产物文件数量过多导致 HTTP 网络请求数剧增，反而降低应用性能，Webpack 还提供了 ",(0,i.jsx)(e.code,{children:"maxInitialRequest/maxAsyncRequest"})," 配置项，用于限制分包数量："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"maxInitialRequest"}),"：用于设置 Initial Chunk 最大并行请求数；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"maxAsyncRequests"}),"：用于设置 Async Chunk 最大并行请求数。"]}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:'敲重点，"请求数" 这个概念有点复杂：'}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"这里所说的“请求数”，是指加载一个 Chunk 时所需要加载的所有分包数。例如对于一个 Chunk A，如果根据分包规则(如模块引用次数、第三方包)分离出了若干子 Chunk A[\xa1]，那么加载 A 时，浏览器需要同时加载所有的 A[\xa1]，此时并行请求数等于 \xa1 个分包加 A 主包，即 \xa1+1。"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["提示：通过 ",(0,i.jsx)(e.a,{href:"https://webpack.js.org/api/compilation-object/#emitasset",target:"_blank",rel:"noopener noreferrer",children:"emitAssets"})," 等方式直接输出产物文件不在此范畴。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"举个例子，对于上例所说的模块关系："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["若 ",(0,i.jsx)(e.code,{children:"minChunks = 2"})," ，则 ",(0,i.jsx)(e.code,{children:"common"})," 模块命中 ",(0,i.jsx)(e.code,{children:"minChunks"})," 规则被独立分包，浏览器请求 ",(0,i.jsx)(e.code,{children:"entry-a"})," 时，则需要同时请求 ",(0,i.jsx)(e.code,{children:"common"})," 包，并行请求数为 1 + 1=2。"]}),"\n",(0,i.jsx)(e.p,{children:"而对于下述模块关系："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["若 ",(0,i.jsx)(e.code,{children:"minChunks = 2"})," ，则 ",(0,i.jsx)(e.code,{children:"common-1"})," 、",(0,i.jsx)(e.code,{children:"common-2"})," 同时命中 ",(0,i.jsx)(e.code,{children:"minChunks"})," 规则被分别打包，浏览器请求 ",(0,i.jsx)(e.code,{children:"entry-b"})," 时需要同时请求 ",(0,i.jsx)(e.code,{children:"common-1"})," 、",(0,i.jsx)(e.code,{children:"common-2"})," 两个分包，并行数为 2 + 1 = 3，此时若 ",(0,i.jsx)(e.code,{children:"maxInitialRequest = 2"}),"，则分包数超过阈值，",(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 会 ",(0,i.jsxs)(e.strong,{children:["放弃 ",(0,i.jsx)(e.code,{children:"common-1"}),"、",(0,i.jsx)(e.code,{children:"common-2"})," 中体积较小的分包"]}),"。",(0,i.jsx)(e.code,{children:"maxAsyncRequest"})," 逻辑与此类似，不在赘述。"]}),"\n",(0,i.jsx)(e.p,{children:"并行请求数关键逻辑总结如下："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Initial Chunk 本身算一个请求；"}),"\n",(0,i.jsx)(e.li,{children:"Async Chunk 不算并行请求；"}),"\n",(0,i.jsxs)(e.li,{children:["通过 ",(0,i.jsx)(e.code,{children:"runtimeChunk"})," 拆分出的 runtime 不算并行请求；"]}),"\n",(0,i.jsxs)(e.li,{children:["如果同时有两个 Chunk 满足拆分规则，但是 ",(0,i.jsx)(e.code,{children:"maxInitialRequests"}),"(或 ",(0,i.jsx)(e.code,{children:"maxAsyncRequest"}),") 的值只能允许再拆分一个模块，那么体积更大的模块会被优先拆解。"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"限制分包体积",children:["限制分包体积",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#限制分包体积",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["除上面介绍的 ",(0,i.jsx)(e.code,{children:"minChunks"})," —— 模块被引用次数，以及 ",(0,i.jsx)(e.code,{children:"maxXXXRequest"}),' —— 包数量，这两个条件外，Webpack 还提供了一系列与 Chunk 大小有关的分包判定规则，借助这些规则我们可以实现当包体过小时直接取消分包 —— 防止产物过"碎"；当包体过大时尝试对 Chunk 再做拆解 —— 避免单个 Chunk 过大。']}),"\n",(0,i.jsx)(e.p,{children:"这一规则相关的配置项有："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"minSize"}),"： 超过这个尺寸的 Chunk 才会正式被分包；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"maxSize"}),"： 超过这个尺寸的 Chunk 会尝试进一步拆分出更小的 Chunk；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"maxAsyncSize"}),"： 与 ",(0,i.jsx)(e.code,{children:"maxSize"})," 功能类似，但只对异步引入的模块生效；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"maxInitialSize"}),"： 与 ",(0,i.jsx)(e.code,{children:"maxSize"})," 类似，但只对 ",(0,i.jsx)(e.code,{children:"entry"})," 配置的入口模块生效；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"enforceSizeThreshold"}),"： 超过这个尺寸的 Chunk 会被强制分包，忽略上述其它 Size 限制。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["那么，结合前面介绍的两种规则，",(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 的主体流程如下："]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 尝试将命中 ",(0,i.jsx)(e.code,{children:"minChunks"})," 规则的 Module 统一抽到一个额外的 Chunk 对象；"]}),"\n",(0,i.jsxs)(e.li,{children:["判断该 Chunk 是否满足 ",(0,i.jsx)(e.code,{children:"maxInitialRequests"})," 阈值，若满足则进行下一步；"]}),"\n",(0,i.jsxs)(e.li,{children:["判断该 Chunk 资源的体积是否大于上述配置项 ",(0,i.jsx)(e.code,{children:"minSize"})," 声明的下限阈值；","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["如果体积",(0,i.jsx)(e.strong,{children:"小于"})," ",(0,i.jsx)(e.code,{children:"minSize"})," 则取消这次分包，对应的 Module 依然会被合并入原来的 Chunk"]}),"\n",(0,i.jsxs)(e.li,{children:["如果 Chunk 体积",(0,i.jsx)(e.strong,{children:"大于"})," ",(0,i.jsx)(e.code,{children:"minSize"})," 则判断是否超过 ",(0,i.jsx)(e.code,{children:"maxSize"}),"、",(0,i.jsx)(e.code,{children:"maxAsyncSize"}),"、",(0,i.jsx)(e.code,{children:"maxInitialSize"})," 声明的上限阈值，如果超过则尝试将该 Chunk 继续分割成更小的部分"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["提示：虽然 ",(0,i.jsx)(e.code,{children:"maxSize"})," 等阈值规则会产生更多的包体，但缓存粒度会更小，命中率相对也会更高，配合持久缓存与 HTTP2 的多路复用能力，网络性能反而会有正向收益。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"以上述模块关系为例："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,i.jsxs)(e.p,{children:["若此时 Webpack 配置的 ",(0,i.jsx)(e.code,{children:"minChunks"})," 大于 2，且 ",(0,i.jsx)(e.code,{children:"maxInitialRequests"})," 也同样大于 2，如果 ",(0,i.jsx)(e.code,{children:"common"})," 模块的体积大于上述说明的 ",(0,i.jsx)(e.code,{children:"minxSize"})," 配置项则分包成功，",(0,i.jsx)(e.code,{children:"commont"})," 会被分离为单独的 Chunk，否则会被合并入原来的 3 个 Chunk。"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["提示：注意，这些条件的优先级顺序为：\n",(0,i.jsx)(e.code,{children:"maxInitialRequest/maxAsyncRequests < maxSize < minSize"}),"。而命中 ",(0,i.jsx)(e.code,{children:"enforceSizeThreshold"})," 阈值的 Chunk 会直接跳过这些条件判断，强制进行分包。"]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"缓存组-cachegroups-简介",children:["缓存组 ",(0,i.jsx)(e.code,{children:"cacheGroups"})," 简介",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#缓存组-cachegroups-简介",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["上述 ",(0,i.jsx)(e.code,{children:"minChunks"}),"、",(0,i.jsx)(e.code,{children:"maxInitialRequest"}),"、",(0,i.jsx)(e.code,{children:"minSize"})," 都属于分包条件，决定是否对什么情况下对那些 Module 做分包处理。此外， ",(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 还提供了 ",(0,i.jsx)(e.code,{children:"cacheGroups"})," 配置项用于为不同文件组设置不同的规则，例如："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        vendors: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            minChunks: 1,\n            minSize: 0\n        }\n      },\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.p,{children:["示例通过 ",(0,i.jsx)(e.code,{children:"cacheGroups"})," 属性设置 ",(0,i.jsx)(e.code,{children:"vendors"})," 缓存组，所有命中 ",(0,i.jsx)(e.code,{children:"vendors.test"})," 规则的模块都会被归类 ",(0,i.jsx)(e.code,{children:"vendors"})," 分组，优先应用该组下的 ",(0,i.jsx)(e.code,{children:"minChunks"}),"、",(0,i.jsx)(e.code,{children:"minSize"})," 等分包配置。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"cacheGroups"})," 支持上述 ",(0,i.jsx)(e.code,{children:"minSice/minChunks/maxInitialRequest"})," 等条件配置，此外还支持一些与分组逻辑强相关的属性，包括："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"test"}),"：接受正则表达式、函数及字符串，所有符合 ",(0,i.jsx)(e.code,{children:"test"})," 判断的 Module 或 Chunk 都会被分到该组；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"type"}),"：接受正则表达式、函数及字符串，与 ",(0,i.jsx)(e.code,{children:"test"})," 类似均用于筛选分组命中的模块，区别是它判断的依据是文件类型而不是文件名，例如 ",(0,i.jsx)(e.code,{children:"type = 'json'"})," 会命中所有 JSON 文件；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"idHint"}),"：字符串型，用于设置 Chunk ID，它还会被追加到最终产物文件名中，例如 ",(0,i.jsx)(e.code,{children:"idHint = 'vendors'"})," 时，输出产物文件名形如 ",(0,i.jsx)(e.code,{children:"vendors-xxx-xxx.js"})," ；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"priority"}),"：数字型，用于设置该分组的优先级，若模块命中多个缓存组，则优先被分到 ",(0,i.jsx)(e.code,{children:"priority"})," 更大的组。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["缓存组的作用在于能为不同类型的资源设置更具适用性的分包规则，一个典型场景是将所有 ",(0,i.jsx)(e.code,{children:"node_modules"})," 下的模块统一打包到 ",(0,i.jsx)(e.code,{children:"vendors"})," 产物，从而实现第三方库与业务代码的分离。"]}),"\n",(0,i.jsxs)(e.p,{children:["Webpack 提供了两个开箱即用的 ",(0,i.jsx)(e.code,{children:"cacheGroups"}),"，分别命名为 ",(0,i.jsx)(e.code,{children:"default"})," 与 ",(0,i.jsx)(e.code,{children:"defaultVendors"}),"，默认配置："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        default: {\n          idHint: "",\n          reuseExistingChunk: true,\n          minChunks: 2,\n          priority: -20\n        },\n        defaultVendors: {\n          idHint: "vendors",\n          reuseExistingChunk: true,\n          test: /[\\\\/]node_modules[\\\\/]/i,\n          priority: -10\n        }\n      },\n    },\n  },\n};\n'})}),"\n",(0,i.jsx)(e.p,{children:"这两个配置组能帮助我们："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["将所有 ",(0,i.jsx)(e.code,{children:"node_modules"})," 中的资源单独打包到 ",(0,i.jsx)(e.code,{children:"vendors-xxx-xx.js"})," 命名的产物"]}),"\n",(0,i.jsx)(e.li,{children:"对引用次数大于等于 2 的模块 —— 也就是被多个 Chunk 引用的模块，单独打包"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"开发者也可以将默认分组设置为 false，关闭分组配置，例如："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        default: false\n      },\n    },\n  },\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"配置项与最佳实践",children:["配置项与最佳实践",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置项与最佳实践",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["最后，我们再回顾一下 ",(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 支持的配置项："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"minChunks"}),"：用于设置引用阈值，被引用次数超过该阈值的 Module 才会进行分包处理；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"maxInitialRequest/maxAsyncRequests"}),"：用于限制 Initial Chunk(或 Async Chunk) 最大并行请求数，本质上是在限制最终产生的分包数量；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"minSize"}),"： 超过这个尺寸的 Chunk 才会正式被分包；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"maxSize"}),"： 超过这个尺寸的 Chunk 会尝试继续做分包；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"maxAsyncSize"}),"： 与 ",(0,i.jsx)(e.code,{children:"maxSize"})," 功能类似，但只对异步引入的模块生效；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"maxInitialSize"}),"： 与 ",(0,i.jsx)(e.code,{children:"maxSize"})," 类似，但只对 ",(0,i.jsx)(e.code,{children:"entry"})," 配置的入口模块生效；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"enforceSizeThreshold"}),"： 超过这个尺寸的 Chunk 会被强制分包，忽略上述其它 size 限制；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"cacheGroups"}),"：用于设置缓存组规则，为不同类型的资源设置更有针对性的分包策略。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"结合这些特性，业界已经总结了许多惯用的最佳分包策略，包括："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["针对 ",(0,i.jsx)(e.code,{children:"node_modules"})," 资源：","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["可以将 ",(0,i.jsx)(e.code,{children:"node_modules"})," 模块打包成单独文件(通过 ",(0,i.jsx)(e.code,{children:"cacheGroups"})," 实现)，防止业务代码的变更影响 NPM 包缓存，同时建议通过 ",(0,i.jsx)(e.code,{children:"maxSize"})," 设定阈值，防止 vendor 包体过大；"]}),"\n",(0,i.jsxs)(e.li,{children:["更激进的，如果生产环境已经部署 HTTP2/3 一类高性能网络协议，甚至可以考虑将每一个 NPM 包都打包成单独文件，具体实现可查看小册",(0,i.jsx)(e.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/50c9a47ce3/splitchunks-seperate-npm/webpack.config.js#L19-L20",target:"_blank",rel:"noopener noreferrer",children:"示例"}),"；"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["针对业务代码：","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["设置 ",(0,i.jsx)(e.code,{children:"common"})," 分组，通过 ",(0,i.jsx)(e.code,{children:"minChunks"})," 配置项将使用率较高的资源合并为 Common 资源；"]}),"\n",(0,i.jsx)(e.li,{children:"首屏用不上的代码，尽量以异步方式引入；"}),"\n",(0,i.jsxs)(e.li,{children:["设置 ",(0,i.jsx)(e.code,{children:"optimization.runtimeChunk"})," 为 ",(0,i.jsx)(e.code,{children:"true"}),"，将运行时代码拆分为独立资源。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"不过，现实世界很复杂，同样的方法放在不同场景可能会有完全相反的效果，建议你根据自己项目的实际情况(代码量、基础设施环境)，择优选用上述实践。"}),"\n",(0,i.jsxs)(e.h2,{id:"总结",children:["总结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Chunk 是 Webpack 实现模块打包的关键设计，Webpack 会首先为 Entry 模块、异步模块、Runtime 模块(取决于配置) 创建 Chunk 容器，之后按照 ",(0,i.jsx)(e.code,{children:"splitChunks"})," 配置进一步优化、裁剪分包内容。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"splitChunks"})," 规则比较复杂，大致上可以分类为："]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["规则类：如 ",(0,i.jsx)(e.code,{children:"minSize/minChunks"})," 等，匹配这些条件的 Module 都会被单独分包；"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"cacheGroup"}),"：可以理解为针对特定资源的次级规则集合。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["实践中，分包策略的好坏直接影响应用的运行性能，常用策略一是单独打包 ",(0,i.jsx)(e.code,{children:"node_modules"})," 代码(习惯称为 ",(0,i.jsx)(e.code,{children:"vendor"}),")，二是单独打包被频繁使用的模块(习惯称为 ",(0,i.jsx)(e.code,{children:"common"}),")。"]}),"\n",(0,i.jsxs)(e.h2,{id:"思考题",children:["思考题",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"SplitChunksPlugin"})," 的用法比较复杂，建议你尝试写一些 demo，组合各种形态的配置值，深入理解配置项背后的隐晦逻辑。"]})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(t,{...n})}):t(n)}let u=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["Webpack5%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F16.%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%20SplitChunks%E6%8F%90%E5%8D%87%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%EF%BC%9F.md"]={toc:[{text:"深入理解 Chunk",id:"深入理解-chunk",depth:2},{text:"SplitChunksPlugin 简介",id:"splitchunksplugin-简介",depth:2},{text:"设置分包范围",id:"设置分包范围",depth:2},{text:"根据 Module 使用频率分包",id:"根据-module-使用频率分包",depth:2},{text:"限制分包数量",id:"限制分包数量",depth:2},{text:"限制分包体积",id:"限制分包体积",depth:2},{text:"缓存组 `cacheGroups` 简介",id:"缓存组-cachegroups-简介",depth:2},{text:"配置项与最佳实践",id:"配置项与最佳实践",depth:2},{text:"总结",id:"总结",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"16.如何正确使用 SplitChunks提升应用性能？",headingTitle:"16.如何正确使用 SplitChunks提升应用性能？",frontmatter:{}}}}]);