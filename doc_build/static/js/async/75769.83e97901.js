"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["75769"],{249729:function(e,n,s){s.r(n),s.d(n,{default:()=>i});var r=s(552676),c=s(740453);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",br:"br",pre:"pre",code:"code",h3:"h3",blockquote:"blockquote",h4:"h4"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"5创建型单例模式vuex的数据管理哲学",children:["5.创建型：单例模式——Vuex的数据管理哲学",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5创建型单例模式vuex的数据管理哲学",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"保证一个类仅有一个实例，并提供一个访问它的全局访问点"}),"，这样的模式就叫做单例模式。"]}),"\n",(0,r.jsxs)(n.p,{children:["单例模式是设计模式中相对较为容易理解、容易上手的一种模式，同时因为其具有广泛的应用场景，也是",(0,r.jsx)(n.strong,{children:"面试题里的常客"}),"。因此单例模式这块我们除了讲解单例模式的原理及其在 Vuex 中的应用实践(本节)，还会附上两道面试真题供大家练手(下节)。"]}),"\n",(0,r.jsxs)(n.h2,{id:"单例模式的实现思路",children:["单例模式的实现思路",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单例模式的实现思路",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在我们先不考虑单例模式的应用场景，单看它的实现，思考这样一个问题：如何才能保证一个类仅有一个实例？",(0,r.jsx)(n.br,{}),"\n","一般情况下，当我们创建了一个类（本质是构造函数）后，可以通过new关键字调用构造函数进而生成任意多的实例对象。像这样："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class SingleDog {\n    show() {\n        console.log('我是一个单例对象')\n    }\n}\n\nconst s1 = new SingleDog()\nconst s2 = new SingleDog()\n\n// false\ns1 === s2\n"})}),"\n",(0,r.jsxs)(n.p,{children:["楼上我们先 new 了一个 s1，又 new 了一个 s2，很明显 s1 和 s2 之间没有任何瓜葛，两者是相互独立的对象，各占一块内存空间。而单例模式想要做到的是，",(0,r.jsx)(n.strong,{children:"不管我们尝试去创建多少次，它都只给你返回第一次所创建的那唯一的一个实例"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["要做到这一点，就需要构造函数",(0,r.jsx)(n.strong,{children:"具备判断自己是否已经创建过一个实例"}),"的能力。我们现在把这段判断逻辑写成一个静态方法(其实也可以直接写入构造函数的函数体里）："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class SingleDog {\n    show() {\n        console.log('我是一个单例对象')\n    }\n    static getInstance() {\n        // 判断是否已经new过1个实例\n        if (!SingleDog.instance) {\n            // 若这个唯一的实例不存在，那么先创建它\n            SingleDog.instance = new SingleDog()\n        }\n        // 如果这个唯一的实例已经存在，则直接返回\n        return SingleDog.instance\n    }\n}\n\nconst s1 = SingleDog.getInstance()\nconst s2 = SingleDog.getInstance()\n\n// true\ns1 === s2\n"})}),"\n",(0,r.jsxs)(n.p,{children:["除了楼上这种实现方式之外，getInstance的逻辑还可以用",(0,r.jsx)(n.strong,{children:"闭包"}),"来实现："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"SingleDog.getInstance = (function() {\n    // 定义自由变量instance，模拟私有变量\n    let instance = null\n    return function() {\n        // 判断自由变量是否为null\n        if(!instance) {\n            // 如果为null则new出唯一实例\n            instance = new SingleDog()\n        }\n        return instance\n    }\n})()\n"})}),"\n",(0,r.jsx)(n.p,{children:"可以看出，在getInstance方法的判断和拦截下，我们不管调用多少次，SingleDog都只会给我们返回一个实例，s1和s2现在都指向这个唯一的实例。"}),"\n",(0,r.jsxs)(n.h2,{id:"生产实践vuex中的单例模式",children:["生产实践：Vuex中的单例模式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#生产实践vuex中的单例模式",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"近年来，基于 Flux 架构的状态管理工具层出不穷，其中应用最广泛的要数 Redux 和 Vuex。无论是 Redux 和 Vuex，它们都实现了一个全局的 Store 用于存储应用的所有状态。这个 Store 的实现，正是单例模式的典型应用。这里我们以 Vuex 为例，研究一下单例模式是怎么发光发热的："}),"\n",(0,r.jsxs)(n.h3,{id:"理解-vuex-中的-store",children:["理解 Vuex 中的 Store",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#理解-vuex-中的-store",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。       ——Vuex官方文档"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"在Vue中，组件之间是独立的，组件间通信最常用的办法是 props（限于父组件和子组件之间的通信），稍微复杂一点的（比如兄弟组件间的通信）我们通过自己实现简单的事件监听函数也能解决掉。"}),"\n",(0,r.jsx)(n.p,{children:"但当组件非常多、组件间关系复杂、且嵌套层级很深的时候，这种原始的通信方式会使我们的逻辑变得复杂难以维护。这时最好的做法是将共享的数据抽出来、放在全局，供组件们按照一定的的规则去存取数据，保证状态以一种可预测的方式发生变化。于是便有了 Vuex，这个用来存放共享数据的唯一数据源，就是 Store。"}),"\n",(0,r.jsxs)(n.p,{children:["关于 Vuex 的细节，大家可以参考",(0,r.jsx)(n.a,{href:"https://vuex.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer",children:"Vuex的官方文档"}),"，此处提及 Vuex，除了为了拓宽大家的知识面，更重要的是为了说明单例模式在生产实践中广泛的应用和不可或缺的地位。如果对 Vuex 没有兴趣，那么大家只需关注“一个 Vue 应用只能对应一个 Store”这一点即可。"]}),"\n",(0,r.jsxs)(n.h3,{id:"store-是一个假单例",children:["Store 是一个“假单例”",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#store-是一个假单例",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["首先，我们需要明确什么是假单例。在这里，假单例的意思是虽然",(0,r.jsx)(n.strong,{children:"没有严格遵循单例模式的设计原则，但在实际应用中仍然能够保证实例的唯一性。"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Vuex 中的 Store 就是这样一个”假单例“——"})," 尽管在实际应用中通常 ",(0,r.jsx)(n.code,{children:"Store"})," 只有一个全局实例，但从实现上来看，它并不是一个严格意义上的单例模式。"]}),"\n",(0,r.jsx)(n.p,{children:"接下来我们将结合 Vuex Store 的源码来说明这一点 。"}),"\n",(0,r.jsxs)(n.p,{children:["下面是 Store 类的构造函数的部分源码，完整源码请狠狠地",(0,r.jsx)(n.a,{href:"https://github.com/vuejs/vuex/blob/main/src/store.js",target:"_blank",rel:"noopener noreferrer",children:"戳这里"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class Store {\n  constructor (options = {}) {\n    // ...\n    this._actions = Object.create(null)\n    this._mutations = Object.create(null)\n    this._wrappedGetters = Object.create(null)\n    this._modulesNamespaceMap = Object.create(null)\n    this._subscribers = []\n    this._watcherVM = new Vue()\n\n    // 将 this 赋值给 store，这是为了在后续的函数中使用 Store 实例的上下文\n    const store = this\n    // 将 this 中的 dispatch 和 commit 方法解构出来，以便在后续的函数中使用\n    const { dispatch, commit } = this\n    // 分别为 dispatch 和 commit 方法绑定上下文\n    this.dispatch = function boundDispatch (type, payload) {\n      return dispatch.call(store, type, payload)\n    }\n    this.commit = function boundCommit (type, payload, options) {\n      return commit.call(store, type, payload, options)\n    }\n    // ...\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在 Vuex 中，我们可以通过 ",(0,r.jsx)(n.code,{children:"new Vuex.Store(options)"})," \xa0调用构造函数来创建一个新的 ",(0,r.jsx)(n.code,{children:"Store"})," 实例。而在楼上贴出的 ",(0,r.jsx)(n.code,{children:"Store"})," 的 ",(0,r.jsx)(n.code,{children:"constructor"})," \xa0关键源码中，并",(0,r.jsx)(n.strong,{children:"不存在任何和单例有关的识别/拦截逻辑"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"这意味着开发者可以通过"})," ",(0,r.jsx)(n.code,{children:"new"})," ",(0,r.jsx)(n.strong,{children:"关键字创建多个"})," ",(0,r.jsx)(n.code,{children:"Store"})," ",(0,r.jsx)(n.strong,{children:"实例，这显然不符合我们对单例模式的预期。"})]}),"\n",(0,r.jsxs)(n.p,{children:["下面是一个创建多个 ",(0,r.jsx)(n.code,{children:"Store"})," 实例的例子："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// 创建一个 store 对象 1 号\nconst store1 = new Vuex.Store({\n  state: { count: 0 },\n  mutations: {\n    increment(state) {\n      state.count++\n    }\n  }\n})\n\n// 创建一个 store 对象 2 号\nconst store2 = new Vuex.Store({\n  state: { count: 0 },\n  mutations: {\n    increment(state) {\n      state.count++\n    }\n  }\n})\n\n// false，说明 store1 和 store2 是完全不同的两个 store\nconsole.log(store1 === store2)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["由此我们可以看出，虽然 ",(0,r.jsx)(n.code,{children:"Store"})," 在实践中总是表现得【像个】单例一样，但它本身却并没有真地去实现单例相关的逻辑。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"没有实现单例的"})," ",(0,r.jsx)(n.code,{children:"Store"})," ",(0,r.jsx)(n.strong,{children:"，究竟是如何表现出单例般的行为的呢？"})]}),"\n",(0,r.jsxs)(n.p,{children:["这就要从 ",(0,r.jsx)(n.code,{children:"Vuex"})," 的整体设计上来分析了。"]}),"\n",(0,r.jsxs)(n.h3,{id:"vuex-如何确保--的单例特征",children:[(0,r.jsxs)(n.strong,{children:["Vuex 如何确保 ",(0,r.jsx)(n.code,{children:"Store"})," 的单例特征"]}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vuex-如何确保--的单例特征",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"vuex-工作原理分析",children:["Vuex 工作原理分析",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vuex-工作原理分析",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Store"})," 并没有实现标准的单例模式，但是却能够表现出一种类似于单例的行为。这是因为 ",(0,r.jsx)(n.strong,{children:"Vuex 从整体设计的层面来保证了"})," ",(0,r.jsx)(n.code,{children:"Store"})," ",(0,r.jsx)(n.strong,{children:"在同一个"})," ",(0,r.jsx)(n.code,{children:"Vue"})," ",(0,r.jsx)(n.strong,{children:"应用中的唯一性。"})]}),"\n",(0,r.jsxs)(n.p,{children:["具体来说，我们首先需要关注的是 ",(0,r.jsx)(n.code,{children:"Vue.use()"})," 方法，这个方法允许我们给 ",(0,r.jsx)(n.code,{children:"Vue"})," 应用安装像 ",(0,r.jsx)(n.code,{children:"Vuex"})," 这样的插件。Vuex 插件是一个对象，它在内部实现了一个 ",(0,r.jsx)(n.code,{children:"install"})," 方法，这个方法会在插件安装时被调用，从而把 ",(0,r.jsx)(n.code,{children:"Store"})," 注入到 ",(0,r.jsx)(n.code,{children:"Vue"})," 应用里去。也就是说每 ",(0,r.jsx)(n.code,{children:"install"})," 一次，",(0,r.jsx)(n.code,{children:"Vuex"})," 都会尝试给 ",(0,r.jsx)(n.code,{children:"Vue"})," 应用注入一个 ",(0,r.jsx)(n.code,{children:"Store"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"install"})," 函数源码中，有一段和我们楼上的\xa0",(0,r.jsx)(n.code,{children:"getInstance()"}),"\xa0非常相似的逻辑："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let Vue // 这个Vue的作用和楼上的instance作用一样\n...\n\nexport function install (_Vue) {\n  // 判断传入的Vue实例对象是否已经被install过Vuex插件（是否有了唯一的 store）\n  if (Vue && _Vue === Vue) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      )\n    }\n    return\n  }\n  // 若没有，则为这个Vue实例对象install一个唯一的Vuex\n  Vue = _Vue\n  // 将Vuex的初始化逻辑写进Vue的钩子函数里\n  applyMixin(Vue)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"这段和"})," ",(0,r.jsx)(n.code,{children:" getInstance()  "}),(0,r.jsx)(n.strong,{children:"非常相似的逻辑，通过判断当前 Vue 应用是否已经安装过 Vuex 插件，保证了在同一个"})," ",(0,r.jsx)(n.code,{children:"Vue"})," ",(0,r.jsx)(n.strong,{children:"应用中只存在一个"})," ",(0,r.jsx)(n.code,{children:"Vuex"})," ",(0,r.jsx)(n.strong,{children:"实例。"})]}),"\n",(0,r.jsxs)(n.p,{children:["继续往下看，在 ",(0,r.jsx)(n.code,{children:"install"})," 函数中，我们可以看到 ",(0,r.jsx)(n.code,{children:"Vue"})," 实例被赋值为 ",(0,r.jsx)(n.code,{children:"_Vue"}),"，接着作为 ",(0,r.jsx)(n.code,{children:"applyMixin(Vue)"})," 函数的参数触发一次 ",(0,r.jsx)(n.code,{children:"applyMixin()"})," 的调用。",(0,r.jsx)(n.code,{children:"applyMixin()"})," 函数会在 Vue 实例的 ",(0,r.jsx)(n.code,{children:"beforeCreate"})," 生命周期钩子中，将 ",(0,r.jsx)(n.code,{children:"Store"})," 实例挂载到 ",(0,r.jsx)(n.code,{children:"Vue"})," 实例上。这个“挂载”动作对应的是如下所示的 ",(0,r.jsx)(n.code,{children:"vuexInit()"})," 函数："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function vuexInit () {\n  const options = this.$options\n  // 将 store 实例挂载到 Vue 实例上\n  if (options.store) {\n    this.$store = typeof options.store === 'function'\n      ? options.store()\n      : options.store\n  } else if (options.parent && options.parent.$store) {\n    this.$store = options.parent.$store\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这段代码中最值得我们注意的，是 ",(0,r.jsx)(n.code,{children:"else if"})," 这一行的判断：如果当前组件实例的配置对象中不存在 ",(0,r.jsx)(n.code,{children:"store"}),"，但存在父组件实例（",(0,r.jsx)(n.code,{children:"options.parent"}),"）且父组件实例具有 ",(0,r.jsx)(n.code,{children:"$store"})," 属性，那么将父组件实例的 ",(0,r.jsx)(n.code,{children:"$store"})," 赋值给当前组件实例的 ",(0,r.jsx)(n.code,{children:"$store"}),"。",(0,r.jsx)(n.br,{}),"\n","这段逻辑意味着，",(0,r.jsx)(n.code,{children:"$store"}),"实例在 Vue 组件树中是被层层继承下来的——当子组件自身不具备 ",(0,r.jsx)(n.code,{children:"$store"})," 时，会查找父组件的 ",(0,r.jsx)(n.code,{children:"$store"})," 并继承。这样，整个 Vue 组件树中的所有组件都会访问到同一个 ",(0,r.jsx)(n.code,{children:"Store"})," 实例——那就是根组件的",(0,r.jsx)(n.code,{children:"Store"}),"实例。"]}),"\n",(0,r.jsxs)(n.p,{children:["也就是说，",(0,r.jsx)(n.code,{children:"vuexInit()"}),"的主要作用是将根组件的",(0,r.jsx)(n.code,{children:"Store"}),"实例注入到子组件中，这样所有子组件都可以通过",(0,r.jsx)(n.code,{children:"this.$store"}),"访问到同一个 Store 实例。",(0,r.jsxs)(n.strong,{children:["这就确保了 Vuex ",(0,r.jsx)(n.code,{children:"Store"})," 在整个 Vue 应用中的唯一性。"]})]}),"\n",(0,r.jsxs)(n.p,{children:["总结一下：",(0,r.jsx)(n.code,{children:"install()"}),"函数通过拦截 ",(0,r.jsx)(n.code,{children:"Vue.use(Vuex)"})," 的多次调用，",(0,r.jsxs)(n.strong,{children:["保证了在同一个",(0,r.jsx)(n.code,{children:"Vue"}),"应用只会安装唯一的一个",(0,r.jsx)(n.code,{children:"Vuex"}),"实例"]}),"；而 ",(0,r.jsx)(n.code,{children:"vuexInit()"})," 函数则",(0,r.jsxs)(n.strong,{children:["保证了同一个",(0,r.jsx)(n.code,{children:"Vue"}),"应用只会被挂载唯一一个",(0,r.jsx)(n.code,{children:"Store"})]}),"。这样一来，从效果上来看，Vuex 确实是创造了两个”单例“出来。"]}),"\n",(0,r.jsxs)(n.h4,{id:"单例-store的局限性",children:["“单例 Store”的局限性",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单例-store的局限性",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["注意，我们在楼上所探讨的“",(0,r.jsx)(n.code,{children:"Store"})," ",(0,r.jsx)(n.strong,{children:"的唯一性"}),"“是有前提的——这种唯一性是针对同一个 Vue 应用来说的，而不是针对全局来说的。"]}),"\n",(0,r.jsxs)(n.p,{children:["在全局范围内，Vuex 中的 ",(0,r.jsx)(n.code,{children:"Store"})," 并不一定是唯一的。",(0,r.jsx)(n.strong,{children:"因为在同一个页面中，我们可以使用多个 Vue 应用，每个 Vue 应用都可以拥有自己的 Store 实例"}),"。这也解释了为什么",(0,r.jsx)(n.code,{children:"Vuex"}),"没有将单例逻辑放在",(0,r.jsx)(n.code,{children:"Store"})," 类中去实现，而是将其解构到了 ",(0,r.jsx)(n.code,{children:"install"})," 函数里。"]}),"\n",(0,r.jsxs)(n.p,{children:["在同一个 Vue 应用中，只会存在一个 Store 实例，但在多个 Vue 应用中，可以存在多个 Store 实例。",(0,r.jsx)(n.strong,{children:"在不同的 Vue 应用中，当我们想共享唯一的一个 Store 时，仍然需要通过在全局范围内使用单例模式来确保 Store 的唯一性。"})]}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Vuex 的设计遵循了单例模式的思想，通过 ",(0,r.jsx)(n.code,{children:" install()  "}),"函数拦截 ",(0,r.jsx)(n.code,{children:"Vue.use(Vuex)"}),"的多次调用，确保了在同一个 Vue 应用中只会安装唯一一个 Vuex 实例；通过 ",(0,r.jsx)(n.code,{children:"vuexInit()"})," 函数，确保了同一个 Vue 应用只会挂载唯一一个 ",(0,r.jsx)(n.code,{children:"Store"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"这种设计使得在整个 Vue 应用中，所有组件都能方便地访问同一个 Store 实例。这有助于在整个应用范围内维护一致的状态管理，降低了程序的复杂性。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"尽管 Vuex 并不是严格意义上的单例模式，但它却很大程度上从单例模式的思想中受益，也为我们在实践中应用单例模式提供了全新的思路。"})}),"\n",(0,r.jsx)(n.p,{children:"除了说在 Vuex 中大展身手，我们在 Redux、jQuery 等许多优秀的前端库里也都能看到单例模式的身影。重要的单例模式自然在面试中有了重要的地位，下一节，我们就来看两道面试真题~"}),"\n",(0,r.jsx)(n.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let i=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["JavaScript%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F5.%E5%88%9B%E5%BB%BA%E5%9E%8B%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94Vuex%E7%9A%84%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%93%B2%E5%AD%A6.md"]={toc:[{text:"单例模式的实现思路",id:"单例模式的实现思路",depth:2},{text:"生产实践：Vuex中的单例模式",id:"生产实践vuex中的单例模式",depth:2},{text:"理解 Vuex 中的 Store",id:"理解-vuex-中的-store",depth:3},{text:"Store 是一个“假单例”",id:"store-是一个假单例",depth:3},{text:"**Vuex 如何确保 **",id:"vuex-如何确保-",depth:3},{text:"Vuex 工作原理分析",id:"vuex-工作原理分析",depth:4},{text:"“单例 Store”的局限性",id:"单例-store的局限性",depth:4},{text:"小结",id:"小结",depth:2}],title:"5.创建型：单例模式——Vuex的数据管理哲学",headingTitle:"5.创建型：单例模式——Vuex的数据管理哲学",frontmatter:{}}}}]);