"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["99048"],{947649:function(e,n,r){e.exports=r.p+"static/image/32e2c1b005721b4b45839fe5ed19d58b.bbaa6203.webp"},671784:function(e,n,r){r.r(n),r.d(n,{default:()=>j});var s=r(552676),t=r(740453);let i=r.p+"static/image/edf2de9abf01c50d95a476bacf4a4766.5e6da850.webp";var o=r(947649);let c=r.p+"static/image/c830d139abe4b63b6e931bd4ef61f5f7.29df61f1.webp",h=r.p+"static/image/66975e7325bef1dfff4b8d4863fffe10.14cf2288.webp",d=r.p+"static/image/f30cd81af18686867bd64b889bbd99af.1db3e3a1.webp",a=r.p+"static/image/bf6c9b9918ccf433a08c904427365194.e9060c55.webp",l=r.p+"static/image/fa2e911545a8fa9dbec0e04c09fae8e4.d3778562.webp";function x(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",img:"img",ul:"ul",li:"li",strong:"strong",code:"code",pre:"pre",blockquote:"blockquote",h4:"h4"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"22生态篇-react-router",children:["22.生态篇-React-router",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22生态篇-react-router",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"一-前言",children:["一 前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一-前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"前几章我们分别介绍了几个 React 核心模块原理。从本章节开始，即将开始探讨 React 生态的几个重要的部分，一部分是负责路由分发、页面跳转的 React-Router。另一部分是负责状态管理的 React-Redux 和 React-Mobx 。本章节，我们一起走进 React 路由的世界。你将学会 React 两种路由模式的使用和原理，React 路由的操作技巧，以及权限路由的实践，一次性解决面试 React 路由问题。"}),"\n",(0,s.jsxs)(n.h3,{id:"单页面应用",children:["单页面应用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单页面应用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"众所周知，用 React 或者 Vue 构建的应用都是单页面应用，单页面应用是使用一个 html 前提下，一次性加载 js ， css 等资源，所有页面都在一个容器页面下，页面切换实质是组件的切换。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"spa.jpg"})}),"\n",(0,s.jsxs)(n.h2,{id:"二-路由原理",children:["二 路由原理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#二-路由原理",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"单页面路由实现方式，一直是前端面试容易提问的点之一，从路由实现到深入路由原理，都是需要必要掌握的知识，所以有必要先来探讨一下路由原理。"}),"\n",(0,s.jsxs)(n.h3,{id:"1-history-react-router--react-router-dom-三者关系",children:["1 history ,React-router , React-router-dom 三者关系",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-history-react-router--react-router-dom-三者关系",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"弄清楚 Router 原理之前，用一幅图表示 History ，React-Router ， React-Router-Dom 三者的关系。这对下面的系统学习很重要。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"three.jpg"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"history："})," history 是整个 React-router 的核心，里面包括两种路由模式下改变路由的方法，和监听路由变化方法等。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["react-router：",(0,s.jsx)(n.strong,{children:"既然有了 history 路由监听/改变的核心，那么需要"}),"调度组件"]}),"负责派发这些路由的更新，也需要",(0,s.jsx)(n.strong,{children:"容器组件"}),"通过路由更新，来渲染视图。所以说 React-router 在 history 核心基础上，增加了 Router ，Switch ，Route 等组件来处理视图渲染。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"react-router-dom："})," 在 react-router 基础上，增加了一些 UI 层面的拓展比如 Link ，NavLink 。以及两种模式的根部路由 BrowserRouter ，HashRouter 。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-两种路由主要方式",children:["2 两种路由主要方式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-两种路由主要方式",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"路由主要分为两种方式，一种是 history 模式，另一种是 Hash 模式。History 库对于两种模式下的监听和处理方法不同，稍后会讲到。\n两种模式的样子："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["history 模式下：",(0,s.jsx)(n.code,{children:"http://www.xxx.com/home"})," "]}),"\n",(0,s.jsxs)(n.li,{children:["hash 模式下：   ",(0,s.jsx)(n.code,{children:"http://www.xxx.com/#/home"})," "]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"开发者如何在项目中运用这两种模式路由呢？答案是可以直接从 react-router-dom 引用两种模式的根路由。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"开启 history 模式"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { BrowserRouter as Router   } from 'react-router-dom'\nfunction Index(){\n    return <Router>\n       { /* ...开启history模式 */ }\n    </Router>\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"开启 hash 模式"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { HashRouter as Router   } from 'react-router-dom'\n// 和history一样\n"})}),"\n",(0,s.jsx)(n.p,{children:"对于 BrowserRouter 或者是 HashRouter，实际上原理很简单，就是React-Router-dom 根据 history 提供的 createBrowserHistory 或者 createHashHistory 创建出不同的 history 对象，至于什么是 history 对象，接下来马上会讲到，以 BrowserRouter 那么先来看一下它的真面目。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"react-router-dom/modules/BrowserRouter.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { createBrowserHistory as createHistory } from "history";\nclass BrowserRouter extends React.Component {\n  history = createHistory(this.props) \n  render() {\n    return <Router history={this.history} children={this.props.children} />;\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"通过 createBrowserHistory 创建一个 history 对象，并传递给 Router 组件。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-react路由原理",children:["3 React路由原理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-react路由原理",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上面说到 history 对象，就是整个路由的核心原理，里面包含了监听路由，改变路由的方法。两种模式下的处理有一些区别，但是本质不大。"}),"\n",(0,s.jsxs)(n.h4,{id:"browserhistory模式下",children:["BrowserHistory模式下",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#browserhistory模式下",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"① 改变路由"})}),"\n",(0,s.jsx)(n.p,{children:"改变路由，指的是通过调用 api 实现的路由跳转，比如开发者在 React 应用中调用 history.push 改变路由，本质上是调用 window.history.pushState 方法。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"window.history.pushState"})})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"history.pushState(state,title,path)\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["1 ",(0,s.jsx)(n.code,{children:"state"}),"：一个与指定网址相关的状态对象， popstate 事件触发时，该对象会传入回调函数。如果不需要可填 null。"]}),"\n",(0,s.jsxs)(n.li,{children:["2 ",(0,s.jsx)(n.code,{children:"title"}),"：新页面的标题，但是所有浏览器目前都忽略这个值，可填  null 。"]}),"\n",(0,s.jsxs)(n.li,{children:["3 ",(0,s.jsx)(n.code,{children:"path"}),"：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个地址。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"history.replaceState"})})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"history.replaceState(state,title,path)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["参数和 pushState 一样，这个方法会修改当前的 history 对象记录， 但是 ",(0,s.jsx)(n.code,{children:"history.length"})," 的长度不会改变。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"② 监听路由"}),"\n",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"popstate"})})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"window.addEventListener('popstate',function(e){\n    /* 监听改变 */\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["同一个文档的 history 对象出现变化时，就会触发 popstate 事件\b\nhistory.pushState 可以使浏览器地址改变，但是无需刷新页面。注意⚠️的是：用 ",(0,s.jsx)(n.code,{children:"history.pushState()"})," 或者 ",(0,s.jsx)(n.code,{children:"history.replaceState()"})," 不会触发 popstate 事件。 popstate 事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮或者调用 ",(0,s.jsx)(n.code,{children:"history.back()"}),"、",(0,s.jsx)(n.code,{children:"history.forward()"}),"、",(0,s.jsx)(n.code,{children:"history.go()"}),"方法。"]}),"\n",(0,s.jsx)(n.p,{children:"总结： BrowserHistory 模式下的 history 库就是基于上面改变路由，监听路由的方法进行封装处理，最后形成 history 对象，并传递给 Router。"}),"\n",(0,s.jsxs)(n.h4,{id:"hashhistory模式下",children:["HashHistory模式下",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#hashhistory模式下",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"哈希路由原理和history相似。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"① 改变路由"}),"\n",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"window.location.hash"})})]}),"\n",(0,s.jsxs)(n.p,{children:["通过 ",(0,s.jsx)(n.code,{children:"window.location.hash"})," 属性获取和设置 hash 值。开发者在哈希路由模式下的应用中，切换路由，本质上是改变 ",(0,s.jsx)(n.code,{children:"window.location.hash"})," 。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"② 监听路由"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"onhashchange"})})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"window.addEventListener('hashchange',function(e){\n    /* 监听改变 */\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"hash 路由模式下，监听路由变化用的是 hashchange 。"}),"\n",(0,s.jsxs)(n.h2,{id:"三-react-router-基本构成",children:["三 React-Router 基本构成",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三-react-router-基本构成",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"1-historylocationmatch",children:["1 history，location，match",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-historylocationmatch",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在路由页面中，开发者通过访问 props ，发现路由页面中 props 被加入了这几个对象，接下来分别介绍一下这几个对象是干什么的？"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"history 对象"}),"：history对象保存改变路由方法 push ，replace，和监听路由方法 listen 等。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"location 对象"}),"：可以理解为当前状态下的路由信息，包括 pathname ，state 等。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"match 对象"}),"：这个用来证明当前路由的匹配信息的对象。存放当前路由path 等信息。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-路由组件",children:["2 路由组件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-路由组件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于路由组件，有几个是开发者必须要掌握并明白其原理的，这个对于吃透整个路由系统是很有帮助的。"}),"\n",(0,s.jsxs)(n.h4,{id:"router",children:["①Router",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#router",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Router是整个应用路由的传递者和派发更新者"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"开发者一般不会直接使用 Router ，而是使用 react-router-dom 中  BrowserRouter 或者 HashRouter ，两者关系就是 Router 作为一个传递路由和更新路由的容器，而 BrowserRouter 或 HashRouter 是不同模式下向容器 Router 中注入不同的 history 对象。所以开发者确保整个系统中有一个根部的 BrowserRouter 或者是 HashRouter 就可以了。"}),"\n",(0,s.jsx)(n.p,{children:"综上先用一幅图来描述 Router 和 BrowserRouter 或 HashRouter 的关系："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"twoofrouter.jpg"})}),"\n",(0,s.jsx)(n.p,{children:"为了让大家了解路由的更新机制，所以有必要去研究 Router 内部到底做了些什么？"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"react-router/modules/Router.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class Router extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n           location: props.history.location\n        }\n        this.unlisten = props.history.listen((location)=>{ /* 当路由发生变化，派发更新 */\n            this.setState({ location })\n        })\n    }\n    /* .... */\n    componentWillUnmount(){  if (this.unlisten) this.unlisten() } \n    render(){\n        return  <RouterContext.Provider  \n            children={this.props.children || null}  \n            value={{\n                history: this.props.history, \n                location: this.state.location,\n                match: Router.computeRootMatch(this.state.location.pathname),\n                staticContext: this.props.staticContext\n            }}\n        />\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Router 包含的信息量很大"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"首先 React-Router 是通过 context 上下文方式传递的路由信息。在 context 章节讲过，context 改变，会使消费 context 组件更新，这就能合理解释了，当开发者触发路由改变，为什么能够重新渲染匹配组件。"}),"\n",(0,s.jsx)(n.li,{children:"props.history 是通过 BrowserRouter 或 HashRouter 创建的history 对象，并传递过来的，当路由改变，会触发 listen 方法，传递新生成的 location ，然后通过 setState 来改变 context 中的 value ，所以改变路由，本质上是 location 改变带来的更新作用。"}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"route",children:["②Route",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#route",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Route 是整个路由核心部分，它的工作主要就是一个： ",(0,s.jsx)(n.strong,{children:"匹配路由，路由匹配，渲染组件。"})," 由于整个路由状态是用 context 传递的，所以 Route 可以通过 ",(0,s.jsx)(n.code,{children:"RouterContext.Consumer"})," 来获取上一级传递来的路由进行路由匹配，如果匹配，渲染子代路由。并利用 context 逐层传递的特点，将自己的路由信息，向子代路由传递下去。这样也就能轻松实现了嵌套路由。"]}),"\n",(0,s.jsx)(n.p,{children:"那么先来看一下 Route 用法。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"四种Route编写格式"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"\bfunction Index(){ \n    const mes = { name:'alien',say:'let us learn React!' }\n    return <div>      \n        <Meuns/>\n        <Switch>\n            <Route path='/router/component'   component={RouteComponent}   /> { /* Route Component形式 */ }\n            <Route path='/router/render'  render={(props)=> <RouterRender { ...props }  /> }  {...mes}  /> { /* Render形式 */ }\n            <Route path='/router/children'  > { /* chilren形式 */ }\n                <RouterChildren  {...mes} />\n            </Route>\n            <Route path=\"/router/renderProps\"  >\n                { (props)=> <RouterRenderProps {...props} {...mes}  /> }  {/* renderProps形式 */}\n            </Route>\n        </Switch>\n    </div>\n}\nexport default Index\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"path 属性：Route 接受 path 属性，用于匹配正确的理由，渲染组件。"}),"\n",(0,s.jsx)(n.li,{children:"对于渲染组件 Route 可以接受四种方式。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"四种形式："})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Component"})," 形式：将组件直接传递给 Route 的 component 属性，Route 可以将路由信息隐式注入到页面组件的 props 中，但是无法传递父组件中的信息，比如如上 mes 。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"render"})," 形式：Route 组件的 render 属性，可以接受一个渲染函数，函数参数就是路由信息，可以传递给页面组件，还可以混入父组件信息。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"children"})," 形式：直接作为 children 属性来渲染子组件，但是这样无法直接向子组件传递路由信息，但是可以混入父组件信息。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"renderProps"})," 形式：可以将 childen 作为渲染函数执行，可以传递路由信息，也可以传递父组件信息。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"routeList.gif"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"exact"})}),"\n",(0,s.jsx)(n.p,{children:"Route 可以加上 exact ，来进行精确匹配，精确匹配原则，pathname  必须和 Route 的 path 完全匹配，才能展示该路由信息。打个比方。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<Route path='/router/component' exact  component={RouteComponent}  />\n"})}),"\n",(0,s.jsxs)(n.p,{children:["一旦开发者在 Route 中写上 ",(0,s.jsx)(n.code,{children:"exact=true"})," ，表示该路由页面只有 ",(0,s.jsx)(n.code,{children:"/router/component"})," 这个格式才能渲染，如果 ",(0,s.jsx)(n.code,{children:"/router/component/a"})," 那么会被判定不匹配，从而导致渲染失败。",(0,s.jsx)(n.strong,{children:"所以如果是嵌套路由的父路由，千万不要加 exact=true 属性。换句话只要当前路由下有嵌套子路由，就不要加 exact"})," 。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"优雅写法"})}),"\n",(0,s.jsxs)(n.p,{children:["当然可以用 ",(0,s.jsx)(n.code,{children:"react-router-config"})," 库中提供的 ",(0,s.jsx)(n.code,{children:"renderRoutes"})," ，更优雅的渲染 Route 。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"\nconst RouteList = [\n    {\n        name: '首页',\n        path: '/router/home',  \n        exact:true,\n        component:Home\n    },\n    {\n        name: '列表页',\n        path: '/router/list',  \n        render:()=><List />\n    },\n    {\n        name: '详情页',\n        path: '/router/detail',  \n        component:detail\n    },\n    {\n        name: '我的',\n        path:'/router/person',\n        component:personal\n    }\n] \nfunction Index(){\n    return <div>\n        <Meuns/>\n        { renderRoutes(RouteList) }\n    </div> \n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这样的效果和上述一样，省去了在组件内部手动写 Route ，绑定 path ，component 等属性。"}),"\n",(0,s.jsxs)(n.h4,{id:"switch",children:["③Switch",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#switch",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Switch 有什么作用呢，假设在组件中像如下这么配置路由："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<div>\n   <Route path='/home'  component={Home}  />\n   <Route path='/list'  component={List}  />\n   <Route path='/my'  component={My}  />\n</div>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这样会影响页面的正常展示和路由的正常切换吗？答案是否定的，这样对于路由切换页面展示没有影响，但是值得注意的是，如果在页面中这么写，",(0,s.jsx)(n.strong,{children:"三个路由都会被挂载"}),"，但是每个页面路由展示与否，是通过 Route 内部 location 信息匹配的。"]}),"\n",(0,s.jsx)(n.p,{children:"那么 Switch 作用是先通过匹配选出一个正确路由 Route 进行渲染。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<Switch>\n   <Route path='/home'  component={Home}  />\n   <Route path='/list'  component={List}  />\n   <Route path='/my'  component={My}  />\n</Switch>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果通过 Switch 包裹后，那么页面上只会展示一个正确匹配的路由。比如路由变成 ",(0,s.jsx)(n.code,{children:"/home"})," ，那么只会挂载 ",(0,s.jsx)(n.code,{children:"path='/home'"})," 的路由和对应的组件 Home 。综上所述 Switch 作用就是匹配唯一正确的路由并渲染。"]}),"\n",(0,s.jsxs)(n.h4,{id:"redirect",children:["④Redirect",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redirect",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"假设有下面两种情况："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"当如果修改地址栏或者调用 api 跳转路由的时候，当找不到匹配的路由的时候，并且还不想让页面空白，那么需要重定向一个页面。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"当页面跳转到一个无权限的页面，期望不能展示空白页面，需要重定向跳转到一个无权限页面。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["这时候就需要重定向组件 Redirect ，",(0,s.jsx)(n.strong,{children:"Redirect 可以在路由不匹配情况下跳转指定某一路由，适合路由不匹配或权限路由的情况。"})]}),"\n",(0,s.jsx)(n.p,{children:"对于上述的情况一："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<Switch>\n   <Route path='/router/home'  component={Home}  />\n   <Route path='/router/list'  component={List}  />\n   <Route path='/router/my'  component={My}  />\n   <Redirect from={'/router/*'} to={'/router/home' }  />\n</Switch>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如上例子中加了 Redirect，当在浏览器输入 ",(0,s.jsx)(n.code,{children:"/router/test"})," ，没有路由与之匹配，所以会重定向跳转到 ",(0,s.jsx)(n.code,{children:"/router/home"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"对于上述的情况二："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"  noPermission ?  <Redirect from={'/router/list'} to={'/router/home' }  />  : <Route path='/router/list'  component={List}  />\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果 ",(0,s.jsx)(n.code,{children:"/router/list"})," 页面没有权限，那么会渲染 ",(0,s.jsx)(n.code,{children:"Redirect"})," 就会重定向跳转到 ",(0,s.jsx)(n.code,{children:"/router/home"}),"，反之有权限就会正常渲染 ",(0,s.jsx)(n.code,{children:"/router/list"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"注意 Switch 包裹的 Redirect 要放在最下面，否则会被 Switch 优先渲染 Redirect ，导致路由页面无法展示。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-从路由改变到页面跳转流程图",children:["3 从路由改变到页面跳转流程图",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-从路由改变到页面跳转流程图",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我用一幅图描述当用户触发 history.push ，或者点击浏览器前进后退，路由改变到页面重新渲染流程。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"zong.jpg"})}),"\n",(0,s.jsxs)(n.h2,{id:"四-路由使用指南",children:["四 路由使用指南",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#四-路由使用指南",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于路由使用，还有一些细节值得去思考。"}),"\n",(0,s.jsxs)(n.h3,{id:"1-路由状态获取",children:["1 路由状态获取",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-路由状态获取",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于路由状态获取，首先如果想要在一些子页面中获取 history 或者 location ，实现路由匹配或者路由跳转。"}),"\n",(0,s.jsxs)(n.h4,{id:"-路由组件-props",children:["① 路由组件 props",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-路由组件-props",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上面讲到过，被 Route 包裹的路由组件 props 中会默认混入 history 等信息，那么如果路由组件的子组件也想共享路由状态信息和改变路由的方法，那么 props 可以是一个很好的选择。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class Home extends React.Component{\n    render(){\n        return <div>\n            <Children {...this.props}  />\n        </div>\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Home 组件是 Route 包裹的组件，那么它可以通过 props 方式向 Children 子组件中传递路由状态信息（ histroy ，loaction ）等。"}),"\n",(0,s.jsxs)(n.h4,{id:"-withrouter",children:["② withRouter",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-withrouter",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["对于距离路由组件比较远的深层次组件，通常可以用 react-router 提供的 ",(0,s.jsx)(n.code,{children:"withRouter"})," 高阶组件方式获取 histroy ，loaction 等信息。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { withRouter } from 'react-router-dom'\n@withRouter\nclass Home extends React.Component{\n    componentDidMount(){\n        console.log(this.props.history)\n    }\n    render(){\n        return <div>\n            { /* ....*/ }\n        </div>\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"-usehistory-和-uselocation",children:["③ useHistory 和 useLocation",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-usehistory-和-uselocation",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["对于函数组件，可以用 ",(0,s.jsx)(n.code,{children:"React-router"})," 提供的自定义 hooks 中的 useHistory 获取 history 对象，用 useLocation 获取 location 对象。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useHistory ,useLocation  } from 'react-router-dom'\nfunction Home(){\n    const history = useHistory() /* 获取history信息 */\n    const useLocation = useLocation() /* 获取location信息 */\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"注意事项，无论是 withRouter ，还是 hooks ，都是从保存的上下文中获取的路由信息，所以要保证想要获取路由信息的页面，都在根部 Router 内部。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-路由带参数跳转",children:["2 路由带参数跳转",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-路由带参数跳转",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"-路由跳转",children:["① 路由跳转",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-路由跳转",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["关于路由跳转有",(0,s.jsx)(n.strong,{children:"声明式路由"}),"和",(0,s.jsx)(n.strong,{children:"函数式路由"}),"两种。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["声明式：",(0,s.jsx)(n.code,{children:"<NavLink to='/home' />"})," ，利用 react-router-dom 里面的 ",(0,s.jsx)(n.code,{children:"Link"})," 或者 ",(0,s.jsx)(n.code,{children:"NavLink"})," 。"]}),"\n",(0,s.jsxs)(n.li,{children:["函数式：",(0,s.jsx)(n.code,{children:"histor.push('/home')"})," 。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"-参数传递",children:["② 参数传递",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-参数传递",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"有的时候页面间需要传递信息。这里介绍几种传递参数的方式。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"url拼接"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const name = 'alien'\nconst mes = 'let us learn React!'\nhistory.push(`/home?name=${name}&mes=${mes}`)\n"})}),"\n",(0,s.jsx)(n.p,{children:"这种方式通过 url 拼接，比如想要传递的参数，会直接暴露在 url 上，而且需要对 url 参数，进行解析处理，实际开发中我不推荐这种方式，我更推荐下面的方式。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"state路由状态。"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const name = 'alien'\nconst mes = 'let us learn React!'\nhistory.push({\n    pathname:'/home',\n    state:{\n        name,\n        mes\n    }\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"可以在 location 对象上获取上个页面传入的 state 。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:" const {state = {}} = this.prop.location\n const { name , mes } = state\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"-动态路径参数路由",children:["③ 动态路径参数路由",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#-动态路径参数路由",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"路由中参数可以作为路径。比如像掘金社区的文章详情，就是通过路由路径带参数（文章 ID ）来实现精确的文章定位。在绑定路由的时候需要做如下处理。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'<Route path="/post/:id"  />\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:":id"})," 就是动态的路径参数，"]}),"\n",(0,s.jsx)(n.p,{children:"路由跳转："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"history.push('/post/'+id) // id为动态的文章id\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-嵌套路由",children:["3 嵌套路由",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-嵌套路由",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于嵌套路由实际很简单。就是路由组件下面，还存在子路由的情况。比如如下结构："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'/* 第二层嵌套路由 */\nfunction Home(){\n    return <div>\n        <Route path=\'/home/test\' component={Test}   />\n        <Route path=\'/home/test1\' component={Test1}  />\n    </div>\n}\n\n/* 第一层父级路由 */\nfunction Index(){\n    return <Switch>\n        <Route path="/home" component={Home}  />\n        <Route path="/list" component={List}  />\n        <Route path="/my" component={My}  />\n    </Switch>\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"嵌套路由子路由一定要跟随父路由。比如父路由是 /home ，那么子路由的形式就是 /home/xxx ，否则路由页面将展示不出来。"})}),"\n",(0,s.jsxs)(n.h3,{id:"4-路由拓展",children:["4 路由拓展",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-路由拓展",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"可以对路由进行一些功能性的拓展。比如可以实现自定义路由，或者用 HOC 做一些拦截，监听等操作。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"自定义路由"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function CustomRouter(props){\n    const permissionList = useContext(permissionContext) /* 获取权限列表 */\n    const haspermission = matchPermission(permissionList,props.path)  /* 检查是否具有权限 */\n    return haspermission ? <Route  {...props}  /> :  <Redirect  to="/noPermission" />\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"上述编写一个自定义路由检查是否具有权限，如果没有权，那么直接重定向到没有权限页面。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"使用："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<CustomRouter  path='/list' component={List}  />\n"})}),"\n",(0,s.jsx)(n.p,{children:"注意：一旦对路由进行自定义封装，就要考虑上面四种 Route 编写方式，如上写的自定义 Route 只支持 component 和 render 形式。"}),"\n",(0,s.jsxs)(n.h2,{id:"五-实践一权限路由封装",children:["五 实践一权限路由封装",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#五-实践一权限路由封装",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"之前在 HOC 章节讲了通过 HOC 来对路由进行拦截，然后进行路由匹配，今天将要换一种思路，用自定义路由拦截，如果没有权限就重定向到无权限页面中。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"hoc6.gif"})}),"\n",(0,s.jsx)(n.p,{children:"假设期望的效果是："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"1 模拟数据交互，返回模拟数据，拦截文档列表和标签列表两个页面。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"思路："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"1 编写自定义权限路由组件，组件内部判断当前页面有无权限，如果没有权限，跳转无权限页面。"}),"\n",(0,s.jsx)(n.li,{children:"2 通过 Context 保存权限列表，数据交互"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"第一步：根组件注入权限"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function getRootPermission(){\n    return new Promise((resolve)=>{\n        resolve({\n            code:200, /* 数据模拟只有编写文档，和编写标签模块有权限，文档列表没有权限 */\n            data:[ '/config/index'  , '/config/writeTag' ]\n        })\n    })\n}\n/* 路由根部组件 */\nconst Permission = React.createContext([])\nexport default function Index(){\n    const [ rootPermission , setRootPermission ] = React.useState([])\n    React.useEffect(()=>{\n        /* 获取权限列表 */\n        getRootPermission().then(res=>{\n            console.log(res,setRootPermission)\n            const { code , data } = res as any\n            code === 200 && setRootPermission(data)\n        }) \n    },[])\n    return <Permission.Provider value={rootPermission} >\n         <RootRouter/>\n    </Permission.Provider>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"第二步：编写权限路由"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export function PermissionRouter(props){\n    const permissionList = useContext(Permission) /* 消费权限列表 */\n    const isMatch = permissionList.indexOf(props.path) >= 0 /* 判断当前页面是否有权限 */\n    return isMatch ? <Route {...props}  /> : <Redirect to={'/config/NoPermission'}  />\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"useContext 接受消费权限列表，判断当前页面是否有权限，如果没有权限那么跳转无权限页面。"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"第三步：注册权限路由和无权限跳转页面"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:" <Switch>\n    <PermissionRouter   path={'/config/index'} component={WriteDoc}   />\n    <PermissionRouter   path={'/config/docList'} component={DocList}   />\n    <PermissionRouter   path={'/config/writeTag'} component={WriteTag}   />\n    <PermissionRouter   path={'/config/tagList'} component={TagList}   />\n    <Route path={'/config/NoPermission'}  component={NoPermission}  />\n</Switch>\n"})}),"\n",(0,s.jsx)(n.p,{children:"完美达到效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"success.gif"})}),"\n",(0,s.jsxs)(n.h2,{id:"六-总结",children:["六 总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#六-总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本章节从路由原理，路由内部构成和分工，路由使用指南，路由实践-权限路由四个模块系统的学习了 React-Router 。"}),"\n",(0,s.jsx)(n.p,{children:"对于 history 部分的源码和原理，我没有具体分析，感兴趣的同学可以看我写的源码解析系列。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://juejin.cn/post/6886290490640039943",target:"_blank",rel:"noopener noreferrer",children:"「源码解析 」这一次彻底弄懂react-router路由原理"})}),"\n",(0,s.jsx)(n.p,{children:"下一节将一起研究React-Redux的奥秘。"})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}let j=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["React%20%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F22.%E7%94%9F%E6%80%81%E7%AF%87-React-router.md"]={toc:[{text:"一 前言",id:"一-前言",depth:2},{text:"单页面应用",id:"单页面应用",depth:3},{text:"二 路由原理",id:"二-路由原理",depth:2},{text:"1 history ,React-router , React-router-dom 三者关系",id:"1-history-react-router--react-router-dom-三者关系",depth:3},{text:"2 两种路由主要方式",id:"2-两种路由主要方式",depth:3},{text:"3 React路由原理",id:"3-react路由原理",depth:3},{text:"BrowserHistory模式下",id:"browserhistory模式下",depth:4},{text:"HashHistory模式下",id:"hashhistory模式下",depth:4},{text:"三 React-Router 基本构成",id:"三-react-router-基本构成",depth:2},{text:"1 history，location，match",id:"1-historylocationmatch",depth:3},{text:"2 路由组件",id:"2-路由组件",depth:3},{text:"①Router",id:"router",depth:4},{text:"②Route",id:"route",depth:4},{text:"③Switch",id:"switch",depth:4},{text:"④Redirect",id:"redirect",depth:4},{text:"3 从路由改变到页面跳转流程图",id:"3-从路由改变到页面跳转流程图",depth:3},{text:"四 路由使用指南",id:"四-路由使用指南",depth:2},{text:"1 路由状态获取",id:"1-路由状态获取",depth:3},{text:"① 路由组件 props",id:"-路由组件-props",depth:4},{text:"② withRouter",id:"-withrouter",depth:4},{text:"③ useHistory 和 useLocation",id:"-usehistory-和-uselocation",depth:4},{text:"2 路由带参数跳转",id:"2-路由带参数跳转",depth:3},{text:"① 路由跳转",id:"-路由跳转",depth:4},{text:"② 参数传递",id:"-参数传递",depth:4},{text:"③ 动态路径参数路由",id:"-动态路径参数路由",depth:4},{text:"3 嵌套路由",id:"3-嵌套路由",depth:3},{text:"4 路由拓展",id:"4-路由拓展",depth:3},{text:"五 实践一权限路由封装",id:"五-实践一权限路由封装",depth:2},{text:"六 总结",id:"六-总结",depth:2}],title:"22.生态篇-React-router",headingTitle:"22.生态篇-React-router",frontmatter:{}}}}]);