"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["49692"],{493028:function(e,n,s){s.r(n),s.d(n,{default:()=>j});var r=s(552676),c=s(740453);let l=s.p+"static/image/ddf1a139921c43c7c7dc8d0335e7465b.0c9b8231.webp",i=s.p+"static/image/27a966121d903904e9f838c5749b7c82.3207f73e.webp",d=s.p+"static/image/d11ebfeefcdaba55a1d97c65c0ae686d.705234e6.webp",o=s.p+"static/image/641fc99f02def563e63a1f9e71c3fba6.83c34b9e.webp";function h(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",strong:"strong",img:"img",h2:"h2",ul:"ul",li:"li",ol:"ol",h4:"h4",code:"code",pre:"pre"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"11架构ci_cd-设计",children:["11.架构：CI_CD 设计",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11架构ci_cd-设计",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["本章内容是基于 ",(0,r.jsx)(n.strong,{children:"DevOps"})," 体系的精简版本，如果有阅读过之前 ",(0,r.jsx)(n.strong,{children:"DevOps"})," 小册的同学，可以快速掠过。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["开局先放一张镇楼图，上图我在行云集团做的通用型 ",(0,r.jsx)(n.strong,{children:"CI/CD"})," 解决方案 ",(0,r.jsx)(n.strong,{children:"ALL IN DOCKER"}),"，所有的操作构建与发布过程都在 ",(0,r.jsx)(n.strong,{children:"Docker"})," 中操作。"]}),"\n",(0,r.jsxs)(n.p,{children:["但很多公司和团队都有自己的基础设施和规范，包括使用不同的构建集成工具和仓库管理工具，比如使用 ",(0,r.jsx)(n.strong,{children:"Jenkins"}),"、",(0,r.jsx)(n.strong,{children:"Drone"}),"、",(0,r.jsx)(n.strong,{children:"GitLab CI"}),"、",(0,r.jsx)(n.strong,{children:"Github Action"})," 等等三方工具，不同的仓库管理工具如 ",(0,r.jsx)(n.strong,{children:"GitLab"}),"、",(0,r.jsx)(n.strong,{children:"GitHub"}),"、",(0,r.jsx)(n.strong,{children:"Gitee"})," 等。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们产品的需求开发中会涉及到",(0,r.jsx)(n.strong,{children:"私有化部署"}),"以及",(0,r.jsx)(n.strong,{children:"个性化定制"}),"，所以需要设计一个通用性的 ",(0,r.jsx)(n.strong,{children:"CICD"})," 方案，不能让用户有新的学习成本与额外的使用维护负担，同时我们的发布不仅仅只有前端资源还可以包含服务端。"]}),"\n",(0,r.jsxs)(n.p,{children:["所以基于 ",(0,r.jsx)(n.strong,{children:"Docker"})," 的通用型方案，依然是我推荐的首选之一。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["在这个方案中，我们会尽可能的减少三方构建工具的使用。尽量降低学习与使用的成本，但是 ",(0,r.jsx)(n.strong,{children:"Docker"})," 相关的一些内容还是需要补充的。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"一个通用型的 Devops 方案中，需要包含流程管理、持续构建、持续部署等"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"基于-gitflow-的流程设计",children:["基于 GitFlow 的流程设计",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基于-gitflow-的流程设计",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GitFlow"})," 的核心是通过在项目的不同阶段对 ",(0,r.jsx)(n.strong,{children:"branch"})," 的不同操作包括但不限于 ",(0,r.jsx)(n.strong,{children:"create"}),"、",(0,r.jsx)(n.strong,{children:"marge"}),"、",(0,r.jsx)(n.strong,{children:"rebase"})," 等来实现一个完整的高效率的工作流程。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Production"}),": 这个分支包含最近发布到生产环境的代码，最近发布的 ",(0,r.jsx)(n.strong,{children:"Release"}),"，并且只能从其他分支合并，不能在这个分支直接修改，一般将 ",(0,r.jsx)(n.strong,{children:"Matser"})," 作为 ",(0,r.jsx)(n.strong,{children:"Production"})," 分支；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Develop"}),": 包含所有要发布到下一个 ",(0,r.jsx)(n.strong,{children:"Release"})," 的代码，这个主要合并于其他分支，比如 ",(0,r.jsx)(n.strong,{children:"Feature"})," 分支；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Feature"}),"：用来开发一个新的功能，一旦开发完成，合并回 ",(0,r.jsx)(n.strong,{children:"Develop"})," 分支，并进入下一个 ",(0,r.jsx)(n.strong,{children:"Release"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Release"}),"：当需要发布一个新 ",(0,r.jsx)(n.strong,{children:"Release"})," 的时候，基于 ",(0,r.jsx)(n.strong,{children:"Develop"})," 分支创建一个 ",(0,r.jsx)(n.strong,{children:"Release"})," 分支，完成 ",(0,r.jsx)(n.strong,{children:"Release"})," 后，合并到 ",(0,r.jsx)(n.strong,{children:"Master"})," 和 ",(0,r.jsx)(n.strong,{children:"Develop"})," 分支；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hotfix"}),": 当在线上环节发现新的 ",(0,r.jsx)(n.strong,{children:"Bug"})," 时候，需要创建一个 ",(0,r.jsx)(n.strong,{children:"Hotfix"})," 分支, 完成修复后，合并回 ",(0,r.jsx)(n.strong,{children:"Master"})," 和 ",(0,r.jsx)(n.strong,{children:"Develop"})," 分支，所以 ",(0,r.jsx)(n.strong,{children:"Hotfix"})," 的改动会进入下一个 ",(0,r.jsx)(n.strong,{children:"Release"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"整体的分支管理流程如下图所示"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["通过服务端来控制整个 ",(0,r.jsx)(n.strong,{children:"GitFlow"})," 流程图如下所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"服务端需要做的分支管理功能主要如下："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"控制每个分支的版本号；"}),"\n",(0,r.jsx)(n.li,{children:"处理多分支集成发布的情况；"}),"\n",(0,r.jsx)(n.li,{children:"防止生产环节发布缺失功能；"}),"\n",(0,r.jsx)(n.li,{children:"锁定发布分支与发布环境，防止功能冲突。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"基于-docker-的-cicd",children:["基于 Docker 的 CICD",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基于-docker-的-cicd",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"docker-的优势",children:["Docker 的优势",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#docker-的优势",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第一优势"}),"：",(0,r.jsx)(n.strong,{children:"跨平台"}),"，由于 ",(0,r.jsx)(n.code,{children:"Docker"})," 的镜像能够提供除了系统内核之外完成的运行环境，所以能在任何系统中都能提供",(0,r.jsx)(n.strong,{children:"一致的运行环境"}),"，这样就不需要考虑不同系统中间兼容性的问题，也就不存在虚拟机在各系统中间的配置不同的情况。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第二优势"}),"：就是借助于跨平台的特性，",(0,r.jsx)(n.code,{children:"Docker"})," 可以将很多配置复杂的服务端中间件打包成基础镜像提供给开发使用。这样无疑能够大大降低配置成本，开发只需要知道常规的 ",(0,r.jsx)(n.code,{children:"Docker"})," 相关的命令或者直接运行提供的容器编排脚本就可以搭建出需要使用的服务端环境。同时公共的镜像仓库上已经有很多这种基础镜像，例如 ",(0,r.jsx)(n.code,{children:"Mysql"}),"、",(0,r.jsx)(n.code,{children:"Redis"}),"、",(0,r.jsx)(n.code,{children:"Node"})," 等等，按需提取即可。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第三优势"}),"：这点对于运维同学比较好操作，",(0,r.jsx)(n.code,{children:"Docker"})," 能提供快速迁移以及配合 ",(0,r.jsx)(n.code,{children:"k8s"}),"，能够快速的伸缩副本，减少运维的工作成本与负担。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["这里简单介绍一下 ",(0,r.jsx)(n.strong,{children:"Docker"})," 相关的内容，学起来其实比想象中简单很多，不用过于抵触，更多的 ",(0,r.jsx)(n.strong,{children:"Docker"})," 相关的细节请移步《",(0,r.jsx)(n.a,{href:"https://juejin.cn/column/7140245864781447175",target:"_blank",rel:"noopener noreferrer",children:"工程化专栏"}),"》，里面会有比较多关于 ",(0,r.jsx)(n.strong,{children:"Docker"})," 方面的介绍，小册里面就不过多介绍了。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"持续构建与部署",children:["持续构建与部署",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#持续构建与部署",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"为了完成持续构建与部署的功能，我们需要设计一个通用性的构建镜像："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"基础镜像"}),"：选择一个适合前端项目的基础镜像，例如 ",(0,r.jsx)(n.strong,{children:"Alpine Linux"}),"、",(0,r.jsx)(n.strong,{children:"Linux"})," 等；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"安装必要的软件"}),"：在基础镜像上安装必要的软件，例如构建工具、依赖管理工具、图片服务、上传工具等；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"添加缓存和代理"}),"：为了加速构建过程，可以添加缓存和代理。例如使用 ",(0,r.jsx)(n.strong,{children:"npm"})," 的缓存，以避免重复下载相同的软件包，以及借助 ",(0,r.jsx)(n.strong,{children:"Docker"})," 的文件联合系统架构，避免重复构建相同的层，提高构建效率；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"清理冗余文件"}),"：构建完成后需要清理不必要的文件，以确保镜像的大小尽可能小。例如安装软件包时下载的缓存文件、日志文件、临时文件等等。"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"在通用性的构建镜像之上，我们还需要针对各个不同的体系定制不同的业务构建镜像提供给不同的业务使用，所以在设计构建触发的时候需要有使用不同镜像构建的功能。"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["具体的 ",(0,r.jsx)(n.strong,{children:"Dockerfile"})," 脚本以及其他设计的内容都会放在对应的实战篇进行详细解说。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"基于-nestjs-的任务队列与调度",children:["基于 NestJS 的任务队列与调度",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基于-nestjs-的任务队列与调度",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["文章最开始的时候提过到了，在这套方案里面我们会尽可能的减少对于三方工具的依赖，在之前的 ",(0,r.jsx)(n.strong,{children:"ALL IN DOCKER"})," 的方案中，是借助了 ",(0,r.jsx)(n.strong,{children:"Jenkins"})," 的任务队列来下发各个构建任务。"]}),"\n",(0,r.jsxs)(n.p,{children:["当我们不再依赖于 ",(0,r.jsx)(n.strong,{children:"Jenkins"})," 的时候就需要自己来开发任务队列的模块了。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"任务队列"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bull"}),"\xa0是一个基于 ",(0,r.jsx)(n.strong,{children:"Redis"})," 的高性能队列库，用于实现队列功能。",(0,r.jsx)(n.code,{children:"@nestjs/bull"}),"\xa0是 ",(0,r.jsx)(n.strong,{children:"NestJS"})," 对\xa0",(0,r.jsx)(n.code,{children:"bull"}),"\xa0的封装，提供了更加便捷的使用方式。"]}),"\n",(0,r.jsxs)(n.p,{children:["可以使用 ",(0,r.jsx)(n.code,{children:"@nestjs/bull"})," 中的 ",(0,r.jsx)(n.code,{children:"@InjectQueue"}),"\xa0装饰器来注入队列服务。如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Injectable } from '@nestjs/common';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Queue } from 'bull';\n\n@Injectable()\nexport class EventQueue {\n  constructor(@InjectQueue('event') private readonly queue: Queue) {}\n\n  async addJob(jobData: any) {\n    await this.queue.add(jobData);\n  }\n\n  async processJob(jobHandler: (jobData: any) => void) {\n    this.queue.process(async (job) => {\n      jobHandler(job.data);\n    });\n  }\n\n  async getJobCounts() {\n    const counts = await this.queue.getJobCounts();\n    return {\n      waiting: counts.waiting || 0,\n      active: counts.active || 0,\n      completed: counts.completed || 0,\n      failed: counts.failed || 0,\n    };\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"任务调度"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在低代码产品中我们需要提供",(0,r.jsx)(n.strong,{children:"定时发布、上下架"}),"的功能，而 ",(0,r.jsx)(n.strong,{children:"NestJS"})," 也提供了这样的能力 ",(0,r.jsx)(n.strong,{children:"NestJS Schedule"}),"。"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"创建任务调度器"}),"：可以使用 ",(0,r.jsx)(n.strong,{children:"NestJS Schedule"})," 中的\xa0",(0,r.jsx)(n.code,{children:"@Cron"}),"\xa0装饰器来定义一个任务调度器。如下代码所示，创建了一个每分钟调用一次的任务调度器："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\n@Injectable()\nexport class TaskScheduler {\n  @Cron(CronExpression.EVERY_MINUTE)\n  handleCron() {\n    console.log('Called every minute');\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"注册任务调度器"}),"：使用任务调度器，需要使用\xa0",(0,r.jsx)(n.code,{children:"ScheduleModule.forRoot()"}),"\xa0方法注册 ",(0,r.jsx)(n.strong,{children:"NestJS Schedule"})," 模块："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Module } from '@nestjs/common';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TaskScheduler } from './schedulers/task.scheduler';\n\n@Module({\n  imports: [ScheduleModule.forRoot()],\n  providers: [TaskScheduler],\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在上述的代码中，我们在\xa0",(0,r.jsx)(n.code,{children:"providers"}),"\xa0数组中添加了\xa0",(0,r.jsx)(n.code,{children:"TaskScheduler"}),"，并在\xa0",(0,r.jsx)(n.code,{children:"imports"}),"\xa0数组中注册了 ",(0,r.jsx)(n.strong,{children:"NestJS Schedule"})," 模块。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"这里的具体设计细节后续会在对应的服务端开发中展开讲解，因为是设计篇，所以不想放一些示例的内容，这样没有上下文联系，学起来会比较分散。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"写在最后",children:["写在最后",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["本章主要是介绍了 ",(0,r.jsx)(n.strong,{children:"CI/CD"})," 相关的设计，无论是工程化的专栏还是 ",(0,r.jsx)(n.strong,{children:"Devops"})," 的小册，都对相关的设计做了很多的介绍，所以本章的内容就不做过多介绍，感兴趣的同学可以多看一下，拓展一下相关的知识体系。"]}),"\n",(0,r.jsx)(n.p,{children:"但与之前不同的是，这次我们并不打算借助三方工具来减少成本，而是全部自己开发来减少用户的学习与使用成本。"}),"\n",(0,r.jsx)(n.p,{children:"如果你有什么疑问或者更好的建议，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["后续有空的话，会在工程化的专栏里面继续添加一些 ",(0,r.jsx)(n.strong,{children:"Docker"})," 相关的内容，可以随手关注于一下。"]}),"\n"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}let j=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F11.%E6%9E%B6%E6%9E%84%EF%BC%9ACI_CD%20%E8%AE%BE%E8%AE%A1.md"]={toc:[{text:"基于 GitFlow 的流程设计",id:"基于-gitflow-的流程设计",depth:2},{text:"基于 Docker 的 CICD",id:"基于-docker-的-cicd",depth:2},{text:"Docker 的优势",id:"docker-的优势",depth:4},{text:"持续构建与部署",id:"持续构建与部署",depth:4},{text:"基于 NestJS 的任务队列与调度",id:"基于-nestjs-的任务队列与调度",depth:4},{text:"写在最后",id:"写在最后",depth:2}],title:"11.架构：CI_CD 设计",headingTitle:"11.架构：CI_CD 设计",frontmatter:{}}}}]);