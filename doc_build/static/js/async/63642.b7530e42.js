"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["63642"],{955383:function(e,n,r){r.r(n),r.d(n,{default:()=>p});var t=r(552676),i=r(740453);let s=r.p+"static/image/bed84931118a482a9b777bf2c0cd35da.668b249f.png",c=r.p+"static/image/1af7fbfa0ecbe02493bb8e7153cf12c1.b3183a8a.png",l=r.p+"static/image/3ab0ef34f98a0f30d11a2dc3c35d7d5b.fbed13da.png",o=r.p+"static/image/c2c130b60ded4f966096a12c9f2d69cf.1eb86cab.png";function a(e){let n=Object.assign({p:"p",h2:"h2",a:"a",ul:"ul",li:"li",code:"code",pre:"pre",blockquote:"blockquote",img:"img"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"在上节课中，我们重点讲解了如何配置 ESLint，并讲解了如何使用 VS Code 进行实时检查。本节课主要讲解如何对代码进行格式校验，从而可以统一团队的代码格式。"}),"\n",(0,t.jsxs)(n.h2,{id:"prettier-和-eslint",children:["Prettier 和 ESLint",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#prettier-和-eslint",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["Prettier 是一个统一代码格式风格的工具，如果不清楚为什么需要使用 Prettier，可以查看 ",(0,t.jsx)(n.a,{href:"https://prettier.io/docs/en/why-prettier.html",target:"_blank",rel:"noopener noreferrer",children:"Why Prettier?"}),"。很多人可能疑惑，ESLint 已经能够规范代码风格，为什么还需要 Prettier？在 ",(0,t.jsx)(n.a,{href:"https://prettier.io/docs/en/comparison.html",target:"_blank",rel:"noopener noreferrer",children:"Prettier vs Linters"})," 中详细说明了两者的区别，Linters 有两种类型的规则："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["格式规则（Formatting rules）：例如 ",(0,t.jsx)(n.a,{href:"https://eslint.org/docs/rules/max-len",target:"_blank",rel:"noopener noreferrer",children:"max-len"}),"、",(0,t.jsx)(n.a,{href:"https://eslint.org/docs/rules/keyword-spacing",target:"_blank",rel:"noopener noreferrer",children:"keyword-spacing"})," 以及 ",(0,t.jsx)(n.a,{href:"https://eslint.org/docs/rules/no-mixed-spaces-and-tabs",target:"_blank",rel:"noopener noreferrer",children:"no-mixed-spaces-and-tabs"})," 等；"]}),"\n",(0,t.jsxs)(n.li,{children:["质量规则（Code-quality rules）：例如 ",(0,t.jsx)(n.a,{href:"https://eslint.org/docs/rules/no-unused-vars",target:"_blank",rel:"noopener noreferrer",children:"no-unused-vars"}),"、",(0,t.jsx)(n.a,{href:"https://eslint.org/docs/rules/no-implicit-globals",target:"_blank",rel:"noopener noreferrer",children:"no-implicit-globals"})," 以及 ",(0,t.jsx)(n.a,{href:"https://eslint.org/docs/rules/prefer-promise-reject-errors",target:"_blank",rel:"noopener noreferrer",children:"prefer-promise-reject-errors"})," 等。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["ESLint 的规则校验同时包含了格式规则和质量规则，但是大部分情况下只有格式规则可以通过 ",(0,t.jsx)(n.code,{children:"--fix"})," 或 VS Code 插件的 Auto Fix 功能一键修复，而质量规则更多的是发现代码可能出现的 Bug ，从而防止代码出错，这类规则往往需要手动修复。"]}),"\n",(0,t.jsx)(n.p,{children:"Prettier 和 ESLint 的区别在于 Prettier 专注于统一的格式规则，从而减轻 ESLint 在格式规则上的校验，而质量规则则交给专业的 ESLint 进行处理。总结一句话就是：Prettier for formatting and linters for catching bugs!"}),"\n",(0,t.jsx)(n.p,{children:"需要注意，如果 ESLint 和 Prettier 配合使用时格式规则可能会产生冲突，在编辑器中使用 Auto Fix 功能时可能会产生混乱，此时应该让两者把各自注重的规则区分开，使用 ESLint 校验质量规则，使用 Prettier 校验格式规则。"}),"\n",(0,t.jsxs)(n.h2,{id:"prettier-配置",children:["Prettier 配置",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#prettier-配置",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"为了在库设计的项目中生效 Prettier，首先安装以下依赖："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 32.工程设计：代码格式\n# eslint-config-prettier：8.7.0\nnpm i prettier eslint-config-prettier --save-dev\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：示例源码可以从 ",(0,t.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/prettier",target:"_blank",rel:"noopener noreferrer",children:"demo/prettier"})," 分支获取。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["在上节课的 ESLint 配置中，我们重点讲解了 ",(0,t.jsx)(n.code,{children:"eslint-config"})," 前缀的 NPM 包是共享配置，因此这里重点查看一下的 ",(0,t.jsx)(n.code,{children:"eslint-config-prettier"})," 的代码："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// node_modules/eslint-config-prettier\n// 注意该包没有在 package.json 中配置 main 字段，默认读取目录下的 index.js \n\n"use strict";\n\nconst includeDeprecated = !process.env.ESLINT_CONFIG_PRETTIER_NO_DEPRECATED;\n\nmodule.exports = {\n  rules: {\n    // The following rules can be used in some cases. See the README for more\n    // information. (These are marked with 0 instead of "off" so that a\n    // script can distinguish them.)\n    "curly": 0,\n    "lines-around-comment": 0,\n    "max-len": 0,\n    "no-confusing-arrow": 0,\n    "no-mixed-operators": 0,\n    "no-tabs": 0,\n    "no-unexpected-multiline": 0,\n    "quotes": 0,\n    "@typescript-eslint/quotes": 0,\n    "babel/quotes": 0,\n    "vue/html-self-closing": 0,\n    "vue/max-len": 0,\n    // The rest are rules that you never need to enable when using Prettier.\n    "array-bracket-newline": "off",\n    // 省略默认的格式规则配置\n    "@babel/object-curly-spacing": "off",\n    "@babel/semi": "off",\n    // 省略 typescript 的格式规则配置\n    "@typescript-eslint/brace-style": "off",\n    // 省略 babel 的格式规则配置\n    "babel/object-curly-spacing": "off",\n    // 省略 flowtype 的格式规则配置\n    "flowtype/boolean-style": "off",\n    // 省略 react 的格式规则配置\n    "react/jsx-child-element-spacing": "off",\n    // 省略 standard 的格式规则配置\n    "standard/array-bracket-even-spacing": "off",\n    // 省略 unicorn 的格式规则配置\n    "unicorn/empty-brace-spaces": "off",\n    // 省略 vue 的格式规则配置\n    "vue/array-bracket-newline": "off",\n    ...(includeDeprecated && {\n      // Deprecated since version 4.0.0.\n      // https://github.com/eslint/eslint/pull/8286\n      "indent-legacy": "off",\n      // Deprecated since version 3.3.0.\n      // https://eslint.org/docs/rules/no-spaced-func\n      "no-spaced-func": "off",\n      // Deprecated since version 7.0.0.\n      // https://github.com/yannickcr/eslint-plugin-react/blob/master/CHANGELOG.md#700---2017-05-06\n      "react/jsx-space-before-closing": "off",\n    }),\n  },\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["可以发现 ",(0,t.jsx)(n.code,{children:"eslint-config-prettier"})," 主要的作用是将大部分插件（包括",(0,t.jsx)(n.code,{children:"@typescript-eslint/eslint-plugin"}),"、",(0,t.jsx)(n.code,{children:"eslint-plugin-babel"}),"、",(0,t.jsx)(n.code,{children:"eslint-plugin-react"}),"、",(0,t.jsx)(n.code,{children:"eslint-plugin-vue"}),"、",(0,t.jsx)(n.code,{children:"eslint-plugin-standard"}),"）的格式规则关闭，用于解决 ESLint 和 Prettier 配合使用时可能产生的格式规则冲突问题。通过 ",(0,t.jsx)(n.code,{children:"eslint-config-prettier"})," 插件关闭可能产生冲突的格式规则："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// .eslintrc.js\nmodule.exports = {\n  root: true,\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    tsconfigRootDir: __dirname,\n    project: ['./tsconfig.json'],\n  },\n  plugins: ['@typescript-eslint'],\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:@typescript-eslint/recommended-requiring-type-checking',\n    // 关闭 ESLint 相关的格式规则集\n    // 可以省略 eslint-config 前缀\n    'prettier'\n  ]\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["配置完成后，可以通过",(0,t.jsx)(n.a,{href:"https://prettier.io/docs/en/cli.html",target:"_blank",rel:"noopener noreferrer",children:"命令行接口"}),"运行 Prettier:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'  "scripts": {\n    "lint": "eslint --ext .ts src",\n    // 检测 src 目录下的代码，进行格式自动修复\n    "prettier": "prettier src --write",\n    "build": "npm run lint && node script/build.js",\n    "release": "node script/publish.js"\n  },\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--write"})," 参数类似于 ESLint 中的 ",(0,t.jsx)(n.code,{children:"--fix"}),"（需要谨慎使用这两个参数，推荐使用 VS Code 的 Auto Fix 功能），主要用于自动修复格式错误，例如："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export function a(): string {\n    // 没有分号\n    return 'a'\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["执行 ",(0,t.jsx)(n.code,{children:"npm run prettier"})," 会自动进行格式修复："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["需要注意，如果某些规则集没有对应的 ",(0,t.jsx)(n.code,{children:"eslint-config-prettier"})," 关闭配置，可以先通过 ",(0,t.jsx)(n.a,{href:"https://github.com/prettier/eslint-config-prettier#cli-helper-tool",target:"_blank",rel:"noopener noreferrer",children:"CLI helper tool"})," 检测是否有重复的格式规则集在生效，然后可以通过手动配置 ",(0,t.jsx)(n.code,{children:"eslintrc.js"})," 的形式进行关闭："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# eslint-config-prettier 7.0 之前的版本\nnpx eslint --print-config src/index.ts | npx eslint-config-prettier-check\n# eslint-config-prettier 7.0 之后的版本\nnpx eslint-config-prettier src/index.ts\n"})}),"\n",(0,t.jsxs)(n.p,{children:["例如把 ",(0,t.jsx)(n.code,{children:"eslint-config-prettier"})," 在 ",(0,t.jsx)(n.code,{children:"eslintrc.js"})," 中的配置去除，此时使用工具检查会发现存在重复或者冲突的格式规则："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 执行重复规则检查，只需要在项目中随便校验一个文件即可，除非不同文件使用不同的 ESLint 配置\nnpx eslint-config-prettier src/index.ts\n# 打印信息\nThe following rules are unnecessary or might conflict with Prettier:\n\n- @typescript-eslint/no-extra-semi\n- no-mixed-spaces-and-tabs\n\nThe following rules are enabled but cannot be automatically checked. See:\nhttps://github.com/prettier/eslint-config-prettier#special-rules\n\n- no-unexpected-multiline\n"})}),"\n",(0,t.jsxs)(n.p,{children:["如果配置了 ",(0,t.jsx)(n.code,{children:"eslint-config-prettier"})," 仍然存在重复或者冲突的规则，可以手动在 ",(0,t.jsx)(n.code,{children:"eslintrc.js"})," 的 ",(0,t.jsx)(n.code,{children:"rules"})," 中进行配规则覆盖。"]}),"\n",(0,t.jsxs)(n.h2,{id:"vs-code-插件",children:["VS Code 插件",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vs-code-插件",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["通过命令行接口 ",(0,t.jsx)(n.code,{children:"prettier src --write"})," 的形式能够进行格式自动修复，但是会给人一种不可控的感觉，因为自动格式化包含了所有 ",(0,t.jsx)(n.code,{children:"src"})," 目录下的文件，通常情况下格式完后，还需要通过 Git 进行代码差异对比，确保格式化不会存在问题。更推荐的方式是使用 VS Code 插件按文件进行自动格式化，可以确保开发者实时格式文件的同时，能够直接感知到当前文件的格式变化。在 VS Code 的应用商店搜索并安装 ",(0,t.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode",target:"_blank",rel:"noopener noreferrer",children:"Prettier 插件"}),"："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"使用 ESLint 匹配到相应的规则时会产生波浪线以及带颜色的文件名进行提醒，Prettier 更希望对格式规则无感知并且用户没有使用负担，因此不会在代码和文件名上产生任何提醒信息。为了可以实时格式化文件代码，需要在 VS Code 中配置 Prettier 的 Format On Save 功能："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// .vscode/settings.json\n{\n  // ESLint 保存自动 Fix\n  "editor.codeActionsOnSave": {\n    "source.fixAll": true,\n  },\n  // 设置 Prettier 为 VS Code 的默认格式工具\n  "editor.defaultFormatter": "esbenp.prettier-vscode",\n  // Prettier 保存自动格式化\n  "editor.formatOnSave": true\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"温馨提示：不同版本的 Prettier 插件可能对 Format On Save 功能的配置存在差异，请以插件的官方文档为准。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"此时如果在开发的过程中没有注意代码格式，例如："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"\nexport function a(): number {const a = 1 \n              const b = 2 \n                                         return a + b}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["如果上述代码提交后需要指定开发者进行 Code Review，估计开发者内心一百个不愿意，如果具备 Fortmat On Save 功能，使用键盘上的 ",(0,t.jsx)(n.code,{children:"Commond（Ctrl) + S"})," 进行保存时，代码会自动格式化："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["在使用的过程中，如果想定制特殊的格式需求，可以通过在根目录新增 ",(0,t.jsx)(n.a,{href:"https://prettier.io/docs/en/configuration.html",target:"_blank",rel:"noopener noreferrer",children:"Prettier 配置文件"}),"的方式进行设置，例如在根目录新增 ",(0,t.jsx)(n.code,{children:".prettierrc.js"})," 文件："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// .prettierrc.js\nmodule.exports = {\n  // 不使用 ; 进行结尾\n  semi: false,\n  // 字符串使用单引号\n  singleQuote: true,\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"在保存时会根据配置的格式规则进行格式化："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:""})}),"\n",(0,t.jsxs)(n.h2,{id:"prettier-确保构建",children:["Prettier 确保构建",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#prettier-确保构建",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在 ESLint 确保构建中重点讲解了使用 ",(0,t.jsx)(n.code,{children:"&&"})," 进行处理，从而要求在构建之前需要先通过 ESLint 校验。由于 Prettier 是轻量的格式化处理，不希望开发者进行感知，因此在真正构建的过程中可以不进行 Prettier 格式检测。"]}),"\n",(0,t.jsxs)(n.h2,{id:"小结",children:["小结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本节课主要讲解了 Prettier 的使用。课程首先讲解了 Prettier 和 ESLint 的区别，Prettier 的主要作用是对代码格式风格进行规范统一，而 ESLint 主要作用是发现存在 Bug 隐患的代码。由于 ESLint 和 Prettier 都会存在格式规则校验，因此在课程中我们讲解了如何发现和屏蔽 ESLint 和 Prettier 的重叠规则。最后，我们讲了如何在 VS Code 中进行代码的自动格式化配置。"}),"\n",(0,t.jsx)(n.p,{children:"在下一节课程中，我们将重点讲解如何对需要提交的代码进行代码校验，从而拒绝提交不符合 ESLint 规范的代码。"})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}let p=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F32.%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%9A%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F.md"]={toc:[{text:"Prettier 和 ESLint",id:"prettier-和-eslint",depth:2},{text:"Prettier 配置",id:"prettier-配置",depth:2},{text:"VS Code 插件",id:"vs-code-插件",depth:2},{text:"Prettier 确保构建",id:"prettier-确保构建",depth:2},{text:"小结",id:"小结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);