"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["45795"],{173847:function(e,n,r){r.r(n),r.d(n,{default:()=>o});var s=r(552676),i=r(740453);let l=r.p+"static/image/bbb7dfd484a129281c6370808e7bc99e.2edc09d2.webp",c=r.p+"static/image/bcb684ed9ecf5ff50958b7e54c7e9541.f0479aad.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",img:"img",h2:"h2",pre:"pre",strong:"strong",ol:"ol",li:"li",blockquote:"blockquote"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"4如何开发-vite-3-插件打包-electron-应用",children:["4.如何开发 Vite 3 插件打包 Electron 应用？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4如何开发-vite-3-插件打包-electron-应用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在上一节中我们开发了一个 Vite 插件，有了这个 Vite 插件之后我们就可以自由地开发 Vue+Electron 桌面端应用了。"}),"\n",(0,s.jsxs)(n.p,{children:["但不知道怎么把开发的应用",(0,s.jsx)(n.code,{children:"分发给用户"}),"，我们心里总是会觉得没底，对吧？开发的应用要怎么才能让用户使用呢？如果不解决这个问题，相信大家开发应用时心里也不会踏实。"]}),"\n",(0,s.jsx)(n.p,{children:"同样的，我们还是要基于 Vite 的技术体系完成这项工作，但单上一节讲的插件是没办法制作应用安装包，并把应用分发给用户的，所以本节课我们就再制作一个 Vite 插件。通过这个新的插件生成安装包（这样也就把开发环境脚手架和打包脚手架分离开了，让它们各司其职，互不干扰），有了安装包就可以把应用分发给用户了。"}),"\n",(0,s.jsx)(n.p,{children:"本节课我将按照如下几个步骤带领大家制作 Vite 打包 Electron 应用的插件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"3.1.PNG"})}),"\n",(0,s.jsxs)(n.h2,{id:"编译结束钩子函数",children:["编译结束钩子函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译结束钩子函数",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"首先我们为 vite.config.ts 增加一个新的配置节，如下代码所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//vite.config.ts\n//import { buildPlugin } from "./plugins/buildPlugin";\nbuild: {\n    rollupOptions: {\n        plugins: [buildPlugin()],\n    },\n},\n'})}),"\n",(0,s.jsx)(n.p,{children:"其中，buildPlugin 方法的代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//plugins\\buildPlugin.ts\nexport let buildPlugin = () => {\n  return {\n    name: "build-plugin",\n    closeBundle: () => {\n      let buildObj = new BuildObj();\n      buildObj.buildMain();\n      buildObj.preparePackageJson();\n      buildObj.buildInstaller();\n    },\n  };\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这是一个",(0,s.jsx)(n.strong,{children:"标准的 Rollup 插件"}),"（Vite 底层就是 Rollup，所以 Vite 兼容 Rollup 的插件），我们在这个插件中注册了 ",(0,s.jsx)(n.code,{children:"closeBundle 钩子"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"在 Vite 编译完代码之后（也就是我们执行 npm run build 指令，而且这个指令的工作完成之后），这个钩子会被调用。我们在这个钩子中完成了安装包的制作过程。"}),"\n",(0,s.jsxs)(n.h2,{id:"制作应用安装包",children:["制作应用安装包",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#制作应用安装包",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Vite 编译完成之后，将在项目",(0,s.jsx)(n.code,{children:"dist"}),"目录内会生成一系列的文件（如下图所示），此时",(0,s.jsx)(n.code,{children:"closeBundle"}),"钩子被调用"]}),"，我们在这个钩子中把上述生成的文件打包成一个应用程序安装包。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"3.2.png"})}),"\n",(0,s.jsxs)(n.p,{children:["这些工作是通过一个名为",(0,s.jsx)(n.code,{children:"buildObj"}),"的对象完成的，它的代码如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//plugins\\buildPlugin.ts\nimport path from "path";\nimport fs from "fs";\n\nclass BuildObj {\n  //编译主进程代码\n  buildMain() {\n    require("esbuild").buildSync({\n      entryPoints: ["./src/main/mainEntry.ts"],\n      bundle: true,\n      platform: "node",\n      minify: true,\n      outfile: "./dist/mainEntry.js",\n      external: ["electron"],\n    });\n  }\n  //为生产环境准备package.json\n  preparePackageJson() {\n    let pkgJsonPath = path.join(process.cwd(), "package.json");\n    let localPkgJson = JSON.parse(fs.readFileSync(pkgJsonPath, "utf-8"));\n    let electronConfig = localPkgJson.devDependencies.electron.replace("^", "");\n    localPkgJson.main = "mainEntry.js";\n    delete localPkgJson.scripts;\n    delete localPkgJson.devDependencies;\n    localPkgJson.devDependencies = { electron: electronConfig };\n    let tarJsonPath = path.join(process.cwd(), "dist", "package.json");\n    fs.writeFileSync(tarJsonPath, JSON.stringify(localPkgJson));\n    fs.mkdirSync(path.join(process.cwd(), "dist/node_modules"));\n  }\n  //使用electron-builder制成安装包\n  buildInstaller() {\n    let options = {\n      config: {\n        directories: {\n          output: path.join(process.cwd(), "release"),\n          app: path.join(process.cwd(), "dist"),\n        },\n        files: ["**"],\n        extends: null,\n        productName: "JueJin",\n        appId: "com.juejin.desktop",\n        asar: true,\n        nsis: {\n          oneClick: true,\n          perMachine: true,\n          allowToChangeInstallationDirectory: false,\n          createDesktopShortcut: true,\n          createStartMenuShortcut: true,\n          shortcutName: "juejinDesktop",\n        },\n        publish: [{ provider: "generic", url: "http://localhost:5500/" }],\n      },\n      project: process.cwd(),\n    };\n    return require("electron-builder").build(options);\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"这个对象通过三个方法提供了三个功能，按照这三个方法的执行顺序我们一一介绍它们的功能。"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"buildMain"}),"。由于 Vite 在编译之前会清空 dist 目录，所以我们在上一节中生成的 mainEntry.js 文件也被删除了，此处我们通过",(0,s.jsx)(n.code,{children:"buildMain"}),"方法再次编译主进程的代码。不过由于此处是在为生产环境编译代码，所以我们增加了",(0,s.jsx)(n.code,{children:"minify: true"})," 配置，生成压缩后的代码。如果你希望与开发环境复用编译主进程的代码，也可以把这部分代码抽象成一个独立的方法。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"preparePackageJson"}),"。用户安装我们的产品后，在",(0,s.jsx)(n.strong,{children:"启动我们的应用程序时，实际上是通过 Electron 启动一个 Node.js 的项目"}),"，所以我们要为这个项目准备一个 package.json 文件，这个文件是以当前项目的 package.json 文件为蓝本制作而成的。里面注明了主进程的入口文件，移除了一些对最终用户没用的配置节。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"生成完 package.json 文件之后，还创建了一个 node_modules 目录。此举是为了阻止 electron-builder 的一些默认行为（这一点我们后续章节还会介绍，目前来说它会阻止electron-builder为我们创建一些没用的目录或文件）。"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:['这段脚本还明确指定了 Electron 的版本号，如果 Electron 的版本号前面有"^"符号的话，需把它删掉。这是 electron-builder 的一个 ',(0,s.jsx)(n.a,{href:"https://github.com/electron-userland/electron-builder/issues/4157#issuecomment-596419610",target:"_blank",rel:"noopener noreferrer",children:"Bug"}),"，这个 bug 导致 electron-builder 无法识别带 ^ 或 ~ 符号的版本号。"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"buildInstaller"}),"。这个方法负责调用",(0,s.jsx)(n.code,{children:"electron-builder"}),"提供的 API 以生成安装包。最终生成的安装包被放置在",(0,s.jsx)(n.code,{children:"release"}),"目录下，这是通过",(0,s.jsx)(n.code,{children:"config.directories.output"}),"指定的。静态文件所在目录是通过",(0,s.jsx)(n.code,{children:"config.directories.app"}),"配置项指定。其他配置项，请自行查阅",(0,s.jsx)(n.a,{href:"https://www.electron.build/",target:"_blank",rel:"noopener noreferrer",children:"官网文档"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["在真正创建安装包之前，你应该已经成功通过",(0,s.jsx)(n.code,{children:"npm install electron-builder -D"}),"安装了 electron-builder 库。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["做好这些配置之后，执行",(0,s.jsx)(n.code,{children:"npm run build"}),"就可以制作安装包了，最终生成的安装文件会被放置到 release 目录下。"]}),"\n",(0,s.jsxs)(n.h2,{id:"electron-builder-原理",children:["electron-builder 原理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#electron-builder-原理",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["你如果不了解 electron-builder 原理的话，可能会觉得奇怪：为什么执行",(0,s.jsx)(n.code,{children:'require("electron-builder").build(options)'}),"就会为我们生成应用程序的安装包呢？"]}),"\n",(0,s.jsx)(n.p,{children:"所以，接下来我们得介绍一下 electron-builder 背后为我们做了什么工作。"}),"\n",(0,s.jsxs)(n.p,{children:["首先 electron-builder 会",(0,s.jsx)(n.strong,{children:"收集应用程序的配置信息"}),"。比如应用图标、应用名称、应用 id、附加资源等信息。有些配置信息可能开发者并没有提供，这时 electron-builder 会使用默认的值，总之，这一步工作完成后，会生成一个全量的配置信息对象用于接下来的打包工作。"]}),"\n",(0,s.jsxs)(n.p,{children:["接着 electron-builder 会检查我们在输出目录下准备的 package.json 文件，查看其内部是否存在 dependencies 依赖，如果存在，electron-builder 会帮我们在输出目录下",(0,s.jsx)(n.strong,{children:"安装这些依赖"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["然后 electron-builder 会根据用户配置信息：asar 的值为 true 或 false，来判断是否需要",(0,s.jsx)(n.strong,{children:"把输出目录下的文件合并成一个 asar 文件"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["然后 electron-builder 会",(0,s.jsx)(n.strong,{children:"把 Electron 可执行程序及其依赖的动态链接库及二进制资源拷贝到安装包生成目录下"}),"的 win-ia32-unpacked 子目录内。"]}),"\n",(0,s.jsxs)(n.p,{children:["然后 electron-builder 还会检查用户是否在配置信息中指定了 ",(0,s.jsx)(n.strong,{children:"extraResources 配置项"}),"，如果有，则把相应的文件按照配置的规则，拷贝到对应的目录中。"]}),"\n",(0,s.jsxs)(n.p,{children:["然后 electron-builder 会根据配置信息使用一个",(0,s.jsx)(n.strong,{children:"二进制资源修改器修改 electron.exe 的文件名和属性信息"}),"（版本号、版权信息、应用程序的图标等）。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果开发者在配置信息中指定了签名信息，那么接下来 electron-builder 会使用一个应用程序签名工具来",(0,s.jsx)(n.strong,{children:"为可执行文件签名"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["接着 electron-builder 会使用 7z 压缩工具，把子目录 win-ia32-unpacked 下的",(0,s.jsx)(n.strong,{children:"内容压缩"}),"成一个名为 yourProductName-1.3.6-ia32.nsis.7z 的压缩包。"]}),"\n",(0,s.jsxs)(n.p,{children:["接下来 electron-builder 会使用 NSIS 工具",(0,s.jsx)(n.strong,{children:"生成卸载程序的可执行文件"}),"，这个卸载程序记录了 win-ia32-unpacked 目录下所有文件的相对路径，当用户卸载我们的应用时，卸载程序会根据这些相对路径删除我们的文件，同时它也会记录一些安装时使用的注册表信息，在卸载时清除这些注册表信息。"]}),"\n",(0,s.jsxs)(n.p,{children:["最后 electron-builder 会使用 NSIS 工具",(0,s.jsx)(n.strong,{children:"生成安装程序的可执行文件"}),"，然后把压缩包和卸载程序当作资源写入这个安装程序的可执行文件中。当用户执行安装程序时，这个可执行文件会读取自身的资源，并把这些资源释放到用户指定的安装目录下。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"如果开发者配置了签名逻辑，则 electron-builder 也会为安装程序的可执行文件和卸载程序的可执行文件进行签名。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"至此，一个应用程序的安装包就制作完成了。这就是 electron-builder 在背后为我们做的工作。"}),"\n",(0,s.jsxs)(n.h2,{id:"主进程生产环境加载本地文件",children:["主进程生产环境加载本地文件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#主进程生产环境加载本地文件",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["虽然我们成功制作了安装包，而且这个安装包可以正确安装我们的应用程序，但是这个应用程序无法正常启动，这是因为应用程序的主进程还在通过 ",(0,s.jsx)(n.code,{children:"process.argv[2]"})," 加载首页。显然用户通过安装包安装的应用程序没有这个参数。"]}),"\n",(0,s.jsxs)(n.p,{children:["所以，接下来",(0,s.jsx)(n.strong,{children:"我们就要让应用程序在没有这个参数的时候，也能加载我们的静态页面"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["首先创建一个新的代码文件：",(0,s.jsx)(n.code,{children:"src\\main\\CustomScheme.ts"}),"，为其创建如下代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//src\\main\\CustomScheme.ts\nimport { protocol } from "electron";\nimport fs from "fs";\nimport path from "path";\n\n//为自定义的app协议提供特权\nlet schemeConfig = { standard: true, supportFetchAPI: true, bypassCSP: true, corsEnabled: true, stream: true };\nprotocol.registerSchemesAsPrivileged([{ scheme: "app", privileges: schemeConfig }]);\n\nexport class CustomScheme {\n  //根据文件扩展名获取mime-type\n  private static getMimeType(extension: string) {\n    let mimeType = "";\n    if (extension === ".js") {\n      mimeType = "text/javascript";\n    } else if (extension === ".html") {\n      mimeType = "text/html";\n    } else if (extension === ".css") {\n      mimeType = "text/css";\n    } else if (extension === ".svg") {\n      mimeType = "image/svg+xml";\n    } else if (extension === ".json") {\n      mimeType = "application/json";\n    }\n    return mimeType;\n  }\n  //注册自定义app协议\n  static registerScheme() {\n    protocol.registerStreamProtocol("app", (request, callback) => {\n      let pathName = new URL(request.url).pathname;\n      let extension = path.extname(pathName).toLowerCase();\n      if (extension == "") {\n        pathName = "index.html";\n        extension = ".html";\n      }\n      let tarFile = path.join(__dirname, pathName);\n      callback({\n        statusCode: 200,\n        headers: { "content-type": this.getMimeType(extension) },\n        data: fs.createReadStream(tarFile),\n      });\n    });\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["这段代码在主进程",(0,s.jsx)(n.code,{children:"app ready"}),"前，通过 ",(0,s.jsx)(n.code,{children:"protocol"})," 对象的 ",(0,s.jsx)(n.code,{children:"registerSchemesAsPrivileged"})," 方法为名为 ",(0,s.jsx)(n.code,{children:"app"})," 的 scheme 注册了特权（可以使用 FetchAPI、绕过内容安全策略等）。"]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["在",(0,s.jsx)(n.code,{children:"app"})," ",(0,s.jsx)(n.code,{children:"ready"}),"之后，通过 ",(0,s.jsx)(n.code,{children:"protocol"})," 对象的 ",(0,s.jsx)(n.code,{children:"registerStreamProtocol"})," 方法为名为 ",(0,s.jsx)(n.code,{children:"app"})," 的 scheme 注册了一个回调函数。当我们加载类似",(0,s.jsx)(n.code,{children:"app://index.html"}),"这样的路径时，这个回调函数将被执行。"]})}),"\n",(0,s.jsxs)(n.p,{children:["这个函数有两个传入参数 ",(0,s.jsx)(n.code,{children:"request"})," 和 ",(0,s.jsx)(n.code,{children:"callback"}),"，我们可以通过 request.url 获取到请求的文件路径，可以通过 callback 做出响应。"]}),"\n",(0,s.jsxs)(n.p,{children:["给出响应时，要指定响应的 ",(0,s.jsx)(n.code,{children:"statusCode"})," 和 ",(0,s.jsx)(n.code,{children:"content-type"}),"，这个 content-type 是通过文件的扩展名得到的。这里我们通过 ",(0,s.jsx)(n.code,{children:"getMimeType"})," 方法确定了少量文件的 content-type，如果你的应用要支持更多文件类型，那么可以扩展这个方法。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["响应的 data 属性为目标文件的可读数据流。这也是为什么我们用 ",(0,s.jsx)(n.code,{children:"registerStreamProtocol"})," 方法注册自定义协议的原因。当你的静态文件比较大时，不必读出整个文件再给出响应。"]})}),"\n",(0,s.jsx)(n.p,{children:"接下来在 src\\main\\mainEntry.ts 中使用这段代码，如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"//src\\main\\mainEntry.ts\nif (process.argv[2]) {\n  mainWindow.loadURL(process.argv[2]);\n} else {\n  CustomScheme.registerScheme();\n  mainWindow.loadURL(`app://index.html`);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这样当存在指定的命令行参数时，我们就认为是开发环境，使用命令行参数加载页面，当不存在命令行参数时，我们就认为是生产环境，通过",(0,s.jsx)(n.code,{children:"app://"})," scheme 加载页面。"]}),"\n",(0,s.jsx)(n.p,{children:"再次打包、安装你的应用程序，看这次是不是可以正常运行了呢？"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["如果你不希望在开发环境中通过命令行参数的形式传递信息，那么你也可以在上一节介绍的代码中，为",(0,s.jsx)(n.code,{children:"electronProcess"})," 附加环境变量（使用",(0,s.jsx)(n.code,{children:"spawn"}),"方法第三个参数的",(0,s.jsx)(n.code,{children:"env"}),"属性附加环境变量）。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本节我们通过 Vite 插件（实际上是 Rollup 插件）开发了制作应用程序安装包的功能，而且还粗略介绍了 electron-builder 的原理。"}),"\n",(0,s.jsx)(n.p,{children:"本节介绍的知识虽然有一些技巧性，但还称不上完美，我们将在后续的章节中进一步完善这部分的知识，但现在还不是时候，为了让大家尽快了解 Vue3+Electron 的开发乐趣，我们将在下一章介绍如何使用 vue-router 管控工程架构。"}),"\n",(0,s.jsxs)(n.h2,{id:"代码",children:["代码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本节示例代码请通过如下地址自行下载："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://gitee.com/horsejs_admin/electron-jue-jin/tree/release",target:"_blank",rel:"noopener noreferrer",children:"源码仓储"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}let o=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["Electron%20%2B%20Vue%203%20%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%2F4.%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%20Vite%203%20%E6%8F%92%E4%BB%B6%E6%89%93%E5%8C%85%20Electron%20%E5%BA%94%E7%94%A8%EF%BC%9F.md"]={toc:[{text:"编译结束钩子函数",id:"编译结束钩子函数",depth:2},{text:"制作应用安装包",id:"制作应用安装包",depth:2},{text:"electron-builder 原理",id:"electron-builder-原理",depth:2},{text:"主进程生产环境加载本地文件",id:"主进程生产环境加载本地文件",depth:2},{text:"总结",id:"总结",depth:2},{text:"代码",id:"代码",depth:2}],title:"4.如何开发 Vite 3 插件打包 Electron 应用？",headingTitle:"4.如何开发 Vite 3 插件打包 Electron 应用？",frontmatter:{}}}}]);