"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["76290"],{957939:function(e,n,s){s.r(n),s.d(n,{default:()=>C});var i=s(552676),r=s(740453);let c=s.p+"static/image/f79e185e11c9c8d5099638d1e88c3444.0638e1b5.webp",a=s.p+"static/image/044c49b5079e10d2c5c6087bfbd37be8.af90595c.webp",d=s.p+"static/image/21ee0ea91af2222571d3e4cefd47c89d.da30b5f4.webp",l=s.p+"static/image/8d2f1bacf793208760796b1b3b3be68d.ac401725.webp",t=s.p+"static/image/42544c88bd1ef31b540c25c4fa279018.7fe32cbf.webp",h=s.p+"static/image/8c08ad8de627d7c1b26d01e3b7e3d298.ac2d3251.webp",p=s.p+"static/image/540a93f64801c9eebdd7a68c5ea43dc0.8a77314c.webp",o=s.p+"static/image/57851a1f110c9905d987e2bd4b657dc5.dfc6b312.webp",j=s.p+"static/image/ec8eebe274c8bc883566689f9ce942ea.923c565e.webp",x=s.p+"static/image/2ad049448b7bc7671c15ffe98ba84f2f.ee06c3e8.webp",g=s.p+"static/image/dca824b4b5ce5e6a65d7789d91d93663.d1b3b279.webp",u=s.p+"static/image/60f57b2c6a970fe71461c9b4dd892da3.136d5d91.webp",b=s.p+"static/image/359b81c16b577ced3a816cd4e55629ed.245da729.webp",m=s.p+"static/image/174bbc49a74a68f13edaaa9cec224441.5c885480.webp",f=s.p+"static/image/7b7c68cd265fa4e92e07ac39b008ef0d.fae795f0.webp",v=s.p+"static/image/57ba0a5e54e691081edda3ea858756af.0638e1b5.webp";function w(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",strong:"strong",h3:"h3",pre:"pre",code:"code",ul:"ul",li:"li",h2:"h2"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"16品质保证覆盖率测试报告",children:["16.品质保证：覆盖率测试报告",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#16品质保证覆盖率测试报告",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"代码覆盖率才是评价一个项目品质的标准。在挑选一个项目的时候，有经验的使用者都会根据代码覆盖率来确定代码的可靠性。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"虽然自动化测试工具可以自动验证代码的正确性，但是如果只有部分代码经过了测试，或者只是简单地跑通了代码，也不能说是一个合格的代码。比如组件库只测试一部分的组件，或者每个组件只测试了默认设置。譬如，按钮中某个属性或者某几个属性间的排列组合并没有得到测试，这样的测试还不能保证组件库的功能完全正确。"}),"\n",(0,i.jsxs)(n.p,{children:["那么如何来客观评价这个测试的完备程度呢？",(0,i.jsx)(n.strong,{children:"答案就是代码覆盖率。"})]}),"\n",(0,i.jsxs)(n.h3,{id:"覆盖率概念",children:["覆盖率概念",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#覆盖率概念",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"代码覆盖率（Code coverage）是软件测试中的一种度量指标，描述测试过程中（运行时）被执行的源代码占全部源代码的比例。"}),"\n",(0,i.jsxs)(n.h3,{id:"覆盖率指标种类",children:["覆盖率指标种类",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#覆盖率指标种类",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"只是简单地做到行级覆盖还远远不够，可以看看下面的例子。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-JavaScript",children:"function getName(a, b) {\n    if(a && b) {\n        return 'Jane'\n    }else {\n        return 'Tony'\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"以上代码只需要两个 Case，就可以将所有语句都跑一遍："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Case01: a = true ; b = true;  期待：Jane"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Case02: a =false ; b= true;  期待：Tony"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"但是，显然这样测试甚至不能确定代码中 b 是否参与条件判断。比如下面代码可能也会出现相同的结果。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-JavaScript",children:"function getName(a, b) {\n    if(a) {\n        return 'Jane'\n    }else {\n        return 'Tony'\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"所以假设覆盖率只有简单的代码行覆盖还远远不够。"}),"\n",(0,i.jsx)(n.p,{children:"在软件工程理论中会把覆盖率分为："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"语句覆盖（statement coverage）"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"判定覆盖（decision coverage）"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"条件覆盖（condition coverage）"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"条件判定组合覆盖（condition decision coverage）"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"路径覆盖（path coverage）"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"多条件覆盖（multi-condition coverage）"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"修正条件判定覆盖（modified condition / decision coverage）"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"覆盖深度的提高显然会让代码功能验证更加全面，但是相应的实施成本也会明显提高。"}),"\n",(0,i.jsx)(n.p,{children:"理论的覆盖虽然全面但是实际生产很多指标的指导价值并不是很大。在实际生产中会将它进行简化。"}),"\n",(0,i.jsx)(n.p,{children:"在Javascript语言中，代码覆盖率通常会分为四级覆盖。"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Function coverage 函数覆盖 - 每个函数是否被执行；"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Line coverage  行覆盖 -- 每行是否被执行；"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Statement coverage 语句覆盖 - 每个语句是否被执行；"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Branch coverage 分支覆盖 - 每个 if 节点是否都被执行。"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"这是结合了函数式语言的特点和指标的实用程度的经验之谈，也是 JavaScript 世界比较受认可的标准。"}),"\n",(0,i.jsxs)(n.h2,{id:"用户故事userstory",children:["用户故事(UserStory)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户故事userstory",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"为组件库发布覆盖率报告，使测试覆盖率可视化。"}),"\n",(0,i.jsxs)(n.h2,{id:"任务分解task",children:["任务分解(Task)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#任务分解task",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"生成覆盖率报告；"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"将覆盖率报告任务加入到 CI；"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"上传覆盖率展示平台 Codecov；"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"获取覆盖率徽章。"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"istanbul-代码覆盖率工具",children:["Istanbul 代码覆盖率工具",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#istanbul-代码覆盖率工具",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"代码覆盖率需要专用的工具生成。在 JavaScript 程序中的代码覆盖率通常都是通过 Istanbul  生成的。Istanbul 的来历是伊斯坦布尔的地毯，覆盖率报告其实就是用颜色来表示代码的运行情况，好像给代码铺上了地毯。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"我们熟悉的 Jest 和组件库使用的 Vitest 测试框架，都是使用的 Istanbul。Istanbul 的实现原理是通过编译期代码插桩方式实现的。有兴趣的同学可以研究一下。咱们这里面只讲如何使用。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"http://www.alloyteam.com/2019/07/13481/",target:"_blank",rel:"noopener noreferrer",children:"覆盖率原理介绍"})}),"\n",(0,i.jsxs)(n.h3,{id:"生成覆盖率报告",children:["生成覆盖率报告",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#生成覆盖率报告",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在 Vitest 只需要在命令行中添加参数 --coverage 就可以生成覆盖率报告了。"}),"\n",(0,i.jsx)(n.p,{children:"package.json"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:'"scripts": {\n    "coverage": "vitest run --coverage"\n  },\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"默认报告形式是一个静态网站。"}),"\n",(0,i.jsx)(n.p,{children:"如果想对报告进行进一步调整，可以在 vite.config.ts 中进行。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-TypeScript",children:'test: {\n    coverage: {\n      provider: "istanbul", // or \'c8\',\n      reporter: ["text", "json", "html"],\n    },\n  },\n'})}),"\n",(0,i.jsx)(n.p,{children:"我调整的两项是："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"指定覆盖率引擎 istanbul；"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"指定输出格式，默认是没有 json 格式的。这个和后面的覆盖率展示有关，务必要加。"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"公布覆盖率报告",children:["公布覆盖率报告",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#公布覆盖率报告",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"覆盖率报告放在本地只能给自己的单元测试提供依据，更大的用途在于将覆盖率报告公布展示出来，让使用者可以看到。通常会选用覆盖率展示平台，常用的有 Codecov 和 Coveralls。"}),"\n",(0,i.jsx)(n.p,{children:"Codecov 是一个开源的测试结果展示平台，将测试结果可视化。Github 上许多开源项目都使用了 Codecov 来展示单测结果。Codecov 跟 Travis CI 一样都支持 Github 账号登录，同样会同步 Github 中的项目。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"还会自动的生成徽章。这个徽章是会根据报告结果动态变化的，属于客观的第三方数据，具有公信力。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["首先需要登录 ",(0,i.jsx)(n.a,{href:"https://codecov.io/",target:"_blank",rel:"noopener noreferrer",children:"Codecov 网站"}),"。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"一定要使用 Github 账号进行登录"}),"**，**这样它可以直接读取你的 Github 中的项目。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"然后是添加访问授权，如果你的项目在你名下的组织下，也需要访问授权。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"这时候你就可以在网站上找到所有 Github 中的项目。选择 【Not yet setup 】，选择需要展示覆盖率报告的网站后的【 setup repo】链接，就可以看到安装指南。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"它这个安装指南是针对所有语言项目的。这里面我们只需要得到它的上传 Token 就好了。"}),"\n",(0,i.jsxs)(n.h3,{id:"持续集成自动更新覆盖率报告",children:["持续集成自动更新覆盖率报告",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#持续集成自动更新覆盖率报告",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"覆盖率报告最好能够自动按照最新版本持续更新，而不是自己手动上传。所以这个时候就需要使用 CI 工具来帮忙了。首先需要编写一个 Action。"}),"\n",(0,i.jsx)(n.p,{children:".github/wokflows/codecov.yml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-YAML",children:"# .github/workflows/main.yml\n# This is a basic workflow to help you get started with Actions\n\nname: Code Coverage\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  CodeCov:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - uses: actions/checkout@v2\n      - uses: pnpm/action-setup@v2.1.0\n        with:\n          version: 7.2.1\n      - name: Install modules\n        run: pnpm install\n      - name: Run Test Coverage\n        run: cd packages/smarty-ui-vite && pnpm coverage\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        with:\n          directory: packages/smarty-ui-vite/coverage\n          token: ${{ secrets.CODECOV_TOKEN }}\n"})}),"\n",(0,i.jsx)(n.p,{children:"上传报告环节同样使用现成的 Action 。这里面需要添加 Token，把上面 codecov 安装指南中得到的 Token 放入 Secrets 中。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"提交代码就可以自动生成覆盖率报告了。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"Codecov Action 会自动识别语言与测试框架的覆盖率报告种类，然后上传相应的数据。这里面要特别说明，对于 Vitest ，是上传的 json 格式的报告，所以需要确定你确实生成了 json 报告。如何生成可以看上文介绍。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,i.jsxs)(n.h3,{id:"添加覆盖率徽章",children:["添加覆盖率徽章",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加覆盖率徽章",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"最后就是富有仪式感的一步。Codecov 网站可以将测试结果生成为徽章。你可以把徽章直接放到 Github 中展示出来。"}),"\n",(0,i.jsx)(n.p,{children:"在项目的【 Settings 】中找到对应的徽章。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,i.jsxs)(n.h2,{id:"复盘",children:["复盘",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#复盘",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"这节课的主要内容是介绍覆盖率概念和发布测试覆盖率报告。"}),"\n",(0,i.jsx)(n.p,{children:"覆盖率报告是项目品质的重要指标，成熟的项目都会把项目展示在显眼的位置，大家通常都会拿代码覆盖率指标评价开源代码的成熟度。当然过高的覆盖率也会带来成本的提高，和拉低项目进步速率。"}),"\n",(0,i.jsx)(n.p,{children:"品质、进度、成本是每一个项目管理中都需要均衡的东西。所以一味追求代码覆盖率也未必是好事。这个大家要客观看待。"}),"\n",(0,i.jsx)(n.p,{children:"最后留一些思考题帮助大家复习，也欢迎在留言区讨论。"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"分支覆盖和行覆盖间的关系？"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"如何用 Codecov 完成覆盖率展示 ？"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"下节课，我们将给大家讲解如何使用 PullRequest，下节课见。"})]})}function E(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(w,{...e})}):w(e)}let C=E;E.__RSPRESS_PAGE_META={},E.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Vite%20%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98%2F16.%E5%93%81%E8%B4%A8%E4%BF%9D%E8%AF%81%EF%BC%9A%E8%A6%86%E7%9B%96%E7%8E%87%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A.md"]={toc:[{text:"覆盖率概念",id:"覆盖率概念",depth:3},{text:"覆盖率指标种类",id:"覆盖率指标种类",depth:3},{text:"用户故事(UserStory)",id:"用户故事userstory",depth:2},{text:"任务分解(Task)",id:"任务分解task",depth:2},{text:"Istanbul 代码覆盖率工具",id:"istanbul-代码覆盖率工具",depth:3},{text:"生成覆盖率报告",id:"生成覆盖率报告",depth:3},{text:"公布覆盖率报告",id:"公布覆盖率报告",depth:3},{text:"持续集成自动更新覆盖率报告",id:"持续集成自动更新覆盖率报告",depth:3},{text:"添加覆盖率徽章",id:"添加覆盖率徽章",depth:3},{text:"复盘",id:"复盘",depth:2}],title:"16.品质保证：覆盖率测试报告",headingTitle:"16.品质保证：覆盖率测试报告",frontmatter:{}}}}]);