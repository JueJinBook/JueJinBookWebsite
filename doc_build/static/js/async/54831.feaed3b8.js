"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["54831"],{234664:function(e,s,n){n.r(s),n.d(s,{default:()=>ee});var c=n(552676),i=n(740453);let l=n.p+"static/image/b54e58d03413b21b7d8bec54d2be77e1.79e59570.webp",a=n.p+"static/image/572067e2eea59c0b5feaedd148c07fce.68cb4a24.webp",d=n.p+"static/image/f8162689d96588be6e57c36a1c41151e.1007f13d.webp",r=n.p+"static/image/606abac2761b228d1a7d329b2a842880.8f6f7456.webp",p=n.p+"static/image/d1976be90bdfd0970245612637cced42.6b435237.webp",x=n.p+"static/image/5299c879d263230b3d8d948485c9406b.1f0c8b7d.webp",t=n.p+"static/image/23e4ffb07c7ccf3a97d6d361dbf83fb7.bbee48e7.webp",j=n.p+"static/image/b859c22237ee124f54456676b25bb053.e5f553c4.webp",h=n.p+"static/image/e43cfeec746b3ea44a07a1617f1ed235.f2c68ee9.webp",b=n.p+"static/image/84e8bfbb6beaf9ffe0403ce140d88f8e.9faf1fef.webp",m=n.p+"static/image/3c8bc171f52fe4fbbd3b3cf28b3be6e1.2dc52297.webp",g=n.p+"static/image/5ae72c71201a5cf55522d9883885b2d9.3e6e6aff.webp",f=n.p+"static/image/4bf37fc654b2b217c62f62395b5b446d.9b2faa9f.webp",q=n.p+"static/image/a18956afdd89ca5f26b0501cbd2abaf5.f3189a90.webp",o=n.p+"static/image/ce56c9d34b371802acf6b66109cf09cf.b1b28e98.webp",E=n.p+"static/image/7ad0f6e5b8e57574e61681dc3813fc40.9a6e9b5f.webp",T=n.p+"static/image/62c364aea804af43b583e47b3a9b82dd.6d2b6c55.webp",y=n.p+"static/image/e8d6731e768be458c7ac44ebe1c98d62.837e2640.webp",u=n.p+"static/image/222ca21cef025ef3c21aeb7869a7914d.df619a3e.webp",L=n.p+"static/image/c21337aa14a5c14833e7d51aef8d698f.24cd3011.webp",w=n.p+"static/image/cfca589bdaacac36c47d6118fc44db60.b8091dc8.webp",M=n.p+"static/image/a818e3fbca5375c0b5293d1b249e805a.e3d23aa4.webp",A=n.p+"static/image/1b09f8c9834b090d942e8218a4fbc31a.3e28bb83.webp",N=n.p+"static/image/5d99ba42505b8f80b7c30bbe20728d4a.3f2a2ed1.webp",D=n.p+"static/image/c2622d74c0eeb5769cc35d46d6bd3702.4fca09ce.webp",S=n.p+"static/image/d7aa49873b3908d904463785127659b9.9df8f4cf.webp",R=n.p+"static/image/1d9195a1d573816d45cc19b0e51ecfdc.2ea7212b.webp",I=n.p+"static/image/630a18b9339336c76e75334aa26f7b69.0b45dc48.webp",O=n.p+"static/image/9d6ff2a45a173171f60e190b0868ecdd.b399829a.webp",U=n.p+"static/image/c0749d6f4dbe87ca8a0530cb161f02da.b4289ada.webp",_=n.p+"static/image/219fd0fa27d09b146c48f230ad9ebb29.9e90f14b.webp",C=n.p+"static/image/68b1c6c6311063ef56123ed55118af23.0a916383.webp",k=n.p+"static/image/627e5d3f25a5efc655154fd2b6fc47bc.6a4f59cf.webp",v=n.p+"static/image/dd61ee215766fee7eec65babe92344d8.1fc933ed.webp",Q=n.p+"static/image/213f87f45497211fc46afb3561768962.86917ada.webp",B=n.p+"static/image/fdea695f5d9f26948b150992a574d437.0f2c0223.webp",P=n.p+"static/image/685c077eb80008017db51b223ba15571.343b4306.webp",F=n.p+"static/image/67e2a2b7797a9225e72e731aa820a064.bc1766ec.webp",G=n.p+"static/image/5edc354415c896cf2e302f06db029563.ea50a666.webp",H=n.p+"static/image/74e8a3e98cbd0d7ff37617cf04f8057b.5f12b2f9.webp",W=n.p+"static/image/e3fca126aafc09bf87d4ba369795f822.f23897be.webp",V=n.p+"static/image/2be270298e3001beb55061cdfdb44ac1.3bcc992b.webp",Y=n.p+"static/image/c41d73305c6fe0bf2ac2f74a5599a7c7.d9afeb74.webp",K=n.p+"static/image/46c2630ab8d1daa23b74a02b61772c73.3aa2bad7.webp",X=n.p+"static/image/8146fe61363e6d2ee265c73a4d739e58.47a83ba0.webp",z=n.p+"static/image/fa7952e6f90fd2f66edb8a7dd6cd0210.9fa4704c.webp",J=n.p+"static/image/b08b36805eadb229095ffff30c996e09.b2720313.webp";function Z(e){let s=Object.assign({h1:"h1",a:"a",p:"p",img:"img",strong:"strong",pre:"pre",code:"code",h2:"h2"},(0,i.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(s.h1,{id:"45-快速入门-mysql",children:["45. 快速入门 MySQL",(0,c.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#45-快速入门-mysql",children:"#"})]}),"\n",(0,c.jsx)(s.p,{children:"后端主要做的事情就是把数据从数据库中查出来返回给前端渲染，或者把前端提交的数据存入数据库。"}),"\n",(0,c.jsx)(s.p,{children:"学习后端技术，数据库是很重要的一步。"}),"\n",(0,c.jsx)(s.p,{children:"这节我们就来学下最流行的数据库 MySQL 的使用。"}),"\n",(0,c.jsx)(s.p,{children:"就和我们用 Docker 时一样，mysql 也是分为后台守护进程和客户端两方面。"}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:J,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"我们会在命令行客户端或者 GUI 客户端里连接 MySQL，发送 SQL 语句来操作它。"}),"\n",(0,c.jsx)(s.p,{children:"通过 Docker Desktop 查询下 MySQL 的镜像："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:z,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"点击 run，传入参数："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:X,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"这里端口 3306 就是 client 连接 mysql 的端口。"}),"\n",(0,c.jsx)(s.p,{children:"（另一个 33060 端口是 mysql8 新加的管理 mysql server 的端口，这里用不到）"}),"\n",(0,c.jsx)(s.p,{children:"指定 volume，用本地目录作为数据卷挂载到容器的 /var/lib/mysql 目录，这个是 mysql 保存数据的目录。"}),"\n",(0,c.jsx)(s.p,{children:"（这里的 /Users/guang/mysql 是我本地的一个目录，任意目录都行。在 windows 下就是 D://xxx/xx 的形式）"}),"\n",(0,c.jsx)(s.p,{children:"之前我们也在 mysql 镜像的 dockerfile 里看到过这个 volume 声明："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:K,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"这里还要指定密码 MYSQL_ROOT_PASSWORD，也就是 client 连接 mysql server 的密码。"}),"\n",(0,c.jsx)(s.p,{children:"如果不填，容器跑起来会有这样的提示："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:Y,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"让你必须指定这三个环境变量中的一个。"}),"\n",(0,c.jsx)(s.p,{children:"现在 mysql 容器就成功跑起来了："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:V,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"mysql 镜像里带了 mysql 命令行工具，我们先用它连上 mysql server 操作下："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:W,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"输入 mysql -u root -p 然后会让你输入密码，之后就进入 mysql 操作界面了。"}),"\n",(0,c.jsx)(s.p,{children:"现在可以通过 sql 操作数据库了。"}),"\n",(0,c.jsx)(s.p,{children:"但我们不着急学 sql，还是从 GUI 客户端开始学。"}),"\n",(0,c.jsxs)(s.p,{children:["GUI 客户端有很多，这里我们用 mysql 官方的 GUI 客户端： ",(0,c.jsx)(s.a,{href:"https://dev.mysql.com/downloads/workbench/",target:"_blank",rel:"noopener noreferrer",children:"MySQL Workbench"})]}),"\n",(0,c.jsx)(s.p,{children:"选择你的操作系统版本和 cpu 架构对应的安装包，点击 download："}),"\n",(0,c.jsx)(s.p,{children:"（m1 芯片要选择 arm 的包）"}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:H,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"它会让你登录，你可以点下面的 no thanks，直接开始下载："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:G,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"安装包下载后，点击安装。"}),"\n",(0,c.jsx)(s.p,{children:"安装好后，打开 mysql workbench，点击这个 + 号："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:F,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"输入连接名，点击 store in keychain 输入密码："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:P,alt:""})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:B,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"之后你可以点击下 Test Connection 测试连接是否成功："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:Q,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"然后点击 ok。"}),"\n",(0,c.jsx)(s.p,{children:"之后点击这个连接，进入操作 mysql server 的界面："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"点击 schemas 就可以看到 mysql 现在已有的数据库和它下面的表、视图、存储过程、函数等："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"什么是视图、存储过程、函数之后再讲。"}),"\n",(0,c.jsx)(s.p,{children:"我们先点击这个图标看一下 sys_config 表中的数据："}),"\n",(0,c.jsx)(s.p,{children:"它会自动执行查询这个表全部数据的 sql："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"这就是这个表的数据："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:U,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"点击第一个图标，会展示表的信息，比如多少列、多少行、占据了多大的空间等："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:O,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"点击第二个图标是修改表的列的定义的："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:I,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"不要改这个数据库，我们新建一个来测试。"}),"\n",(0,c.jsx)(s.p,{children:"连接之后，我们可以看到 mysql server 的所有的 database 或者叫 schema。"}),"\n",(0,c.jsx)(s.p,{children:"（从 MySQL5.0 开始，官方文档中开始使用\xa0schema\xa0来代替\xa0database 来描述 MySQL 中的数据库。但是，实际上 MySQL 中的数据库仍然可以使用\xa0database\xa0来称呼，两者是等价的）"}),"\n",(0,c.jsx)(s.p,{children:"每个数据库下存储着很多表、视图、存储过程和函数。"}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:R,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"当然，我们最常用的还是表。"}),"\n",(0,c.jsx)(s.p,{children:"上面这 5 个按钮分别是创建 schema、table、view、stored procedure、function 的。"}),"\n",(0,c.jsx)(s.p,{children:"点击第一个，创建个 database（或者叫 schema）："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"输入名字，指定字符集，点击右下角的 apply。"}),"\n",(0,c.jsx)(s.p,{children:"创建成功之后，就可以看到我们刚建的数据库了："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:D,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"选中 hello-mysql 数据库，点击创建 table 的按钮，我们来建个表："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"输入表名 student。"}),"\n",(0,c.jsx)(s.p,{children:"先建立 id 列："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:A,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"输入描述，选中 primary key、 auto increment 的约束。"}),"\n",(0,c.jsx)(s.p,{children:"primary key 是主键，也就是区分每一行数据的那一列，这一列一般命名为 id。"}),"\n",(0,c.jsx)(s.p,{children:"primary key 自带了唯一（unique）和非空（not null）的约束。"}),"\n",(0,c.jsx)(s.p,{children:"再就是要勾选 auto increment 这样插入数据的时候，会自动设置 1、2、3、4、 的递增的 id。"}),"\n",(0,c.jsx)(s.p,{children:"然后依次创建 name、age、sex、email、create_time、status 列："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:M,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"分别是名字、年龄、性别、邮箱、创建时间、是否删除的意思。"}),"\n",(0,c.jsx)(s.p,{children:"可以填入注释和默认值。"}),"\n",(0,c.jsx)(s.p,{children:"比如 status 用 0 表示未删除，1 表示已删除，这叫做逻辑删除。也就是删除的时候就是从 0 改成 1，但不会真正删除数据。"}),"\n",(0,c.jsx)(s.p,{children:"name 和 create_time 添加非空约束。"}),"\n",(0,c.jsx)(s.p,{children:"mysql 的数据类型有很多："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"整数类的有：TINYINT、SMALLINT、MEDIUMINT、INT\xa0和\xa0BIGINT"}),"\n",(0,c.jsx)(s.p,{children:"看名字就可以看出来，就是存储空间的大小不同"}),"\n",(0,c.jsx)(s.p,{children:"浮点型数字的有 FLOAT、DOUBLE"}),"\n",(0,c.jsx)(s.p,{children:"定点型数字的有 DECIMAL、MUMARIC"}),"\n",(0,c.jsx)(s.p,{children:"字符串型的有 CHAR、VARCHAR、TEXT和\xa0BLOB"}),"\n",(0,c.jsx)(s.p,{children:"日期型的有 DATE、TIME、DATETIME、TIMESTAMP"}),"\n",(0,c.jsx)(s.p,{children:"不过我们常用的也就这么几个："}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"INT"}),"：存储整数"]}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"VARCHAR(100)"}),": 存储变长字符串，可以指定长度"]}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"CHAR"}),"：定长字符串，不够的自动在末尾填充空格"]}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"DOUBLE"}),"：存储浮点数"]}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"DATE"}),"：存储日期 2023-05-27"]}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"TIME"}),"：存储时间 10:13"]}),"\n",(0,c.jsxs)(s.p,{children:[(0,c.jsx)(s.strong,{children:"DATETIME"}),"：存储日期和时间 2023-05-27 10:13"]}),"\n",(0,c.jsx)(s.p,{children:"其余的类型用到再查也行。"}),"\n",(0,c.jsx)(s.p,{children:"这里还有个 TIMESTAMP 类型，它也是存储日期时间的，但是范围小一点，而且会转为中央时区 UTC 的时间来存储。"}),"\n",(0,c.jsx)(s.p,{children:"可以看到，mysql 设计了这么多的数据类型，一个目的自然是存储更丰富的信息，另一个目的就是尽可能的节省存储空间，比如 tiny、small、medinum、big 等各种 int。。。"}),"\n",(0,c.jsx)(s.p,{children:"点击右下角的 apply，就会生成建表 sql："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:L,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"这就是建表语句的语法。"}),"\n",(0,c.jsx)(s.p,{children:"这里简单说一下 sql 的分类，sql 是分为好几种的，这种创建数据库、创建表等修改结构的 sql 叫做 DDL（Data Definition Language），而增删改那种叫做 DML（Data Manipulate Language），查询数据的叫做 DQL（Data Query Language）。"}),"\n",(0,c.jsx)(s.p,{children:"知道这个概念就好了。"}),"\n",(0,c.jsx)(s.p,{children:"然后我们继续："}),"\n",(0,c.jsx)(s.p,{children:"创建成功之后点击第三个图标，就可以查询这个表的所有数据："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"你可以新增几行数据，每一行数据叫做一个记录（Record）。"}),"\n",(0,c.jsx)(s.p,{children:"可以在下面直接编辑，然后点击 apply："}),"\n",(0,c.jsx)(s.p,{children:"（这里不用设置 id，因为我们指定了它自增了，会自动设置）"}),"\n",(0,c.jsx)(s.p,{children:"（status 也不用设置，因为我们指定了默认值了）"}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"他会生成 insert 语句，这是向表中插入数据的语法："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:T,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"把它复制一下，之后我们用 insert 语句来插入数据吧，mysql workbench 这个可视化编辑功能不好用。"}),"\n",(0,c.jsx)(s.p,{children:"点击 apply 之后，mysql 会执行 sql，这时候就可以看到这条记录被插入了："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"因为我之前测试的时候插入过几条，所以 id 自增到了 5，status 默认设置了 0。"}),"\n",(0,c.jsx)(s.p,{children:"接下来我们用 sql 的方式插入："}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-sql",children:"INSERT INTO `hello-mysql`.`student` (`name`, `age`, `sex`, `email`, `create_time`) VALUES ('bbb', '23', '1', 'bbb@qq.com', '2023-05-27 10:50:00');\n\nINSERT INTO `hello-mysql`.`student` (`name`, `age`, `sex`, `email`, `create_time`) VALUES ('ccc', '21', '0', 'ccc@qq.com', '2023-05-26 10:50:00');\n\nINSERT INTO `hello-mysql`.`student` (`name`, `age`, `sex`, `email`, `create_time`) VALUES ('ddd', '22', '1', 'ddd@qq.com', '2023-05-28 10:50:00');\n"})}),"\n",(0,c.jsx)(s.p,{children:"在上面的输入框输入这几条 sql，选中它们，然后点击执行 sql 的按钮："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"下面是执行结果，可以看到都插入成功了，一共 3 行。"}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:q,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"然后再选中上面的查询 sql 来执行："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"下面也同样会展示查询 sql 的执行情况，一共返回了 4 行数据："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"新增学会了，修改和删除呢？"}),"\n",(0,c.jsx)(s.p,{children:"我们同样可视化操作一下，然后看看 sql："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"修改和删除的 sql 分别是这样的："}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-sql",children:"UPDATE `hello-mysql`.`student` SET `email` = 'xxx@qq.com' WHERE (`id` = '10');\n"})}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-sql",children:"DELETE FROM `hello-mysql`.`student` WHERE (`id` = '10');\n"})}),"\n",(0,c.jsxs)(s.p,{children:["更新 hello-mysql 数据库的 student 表，设置 email 列为 ",(0,c.jsx)(s.a,{href:"mailto:xxx@qq.com",children:"xxx@qq.com"}),"，条件是 id 为 10。"]}),"\n",(0,c.jsx)(s.p,{children:"是不是很容易理解？"}),"\n",(0,c.jsx)(s.p,{children:"毕竟 sql 就是设计出来给人用的嘛。"}),"\n",(0,c.jsx)(s.p,{children:"删除数据也同样很容易理解："}),"\n",(0,c.jsx)(s.p,{children:"删除 hello-mysql 数据的 student 的 id 为 10 的列。"}),"\n",(0,c.jsx)(s.p,{children:"至此，我们已经学会 mysql 的数据库表的创建和增删改查了。"}),"\n",(0,c.jsx)(s.p,{children:"创建表是这样的（这个不用记，一般不会手动写 sql 创建表）："}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-sql",children:"CREATE TABLE `student` (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT 'ID',\n  `name` varchar(45) NOT NULL COMMENT '名字',\n  `age` int DEFAULT NULL COMMENT '年龄',\n  `sex` int DEFAULT NULL COMMENT '性别',\n  `email` varchar(60) DEFAULT NULL COMMENT '邮箱',\n  `create_time` datetime NOT NULL COMMENT '创建时间',\n  `status` int DEFAULT '0' COMMENT '是否删除',\n  PRIMARY KEY (`id`)\n) CHARSET=utf8mb4\n"})}),"\n",(0,c.jsx)(s.p,{children:"也就是指定创建的表的名字，然后括号内 , 分隔的每一列分别指定名字、类型、约束、注释、默认值等。"}),"\n",(0,c.jsx)(s.p,{children:"插入记录是这样的："}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-sql",children:"INSERT INTO `student` (`name`, `age`, `sex`, `email`, `create_time`) VALUES ('bbb', '23', '1', 'bbb@qq.com', '2023-05-27 10:50:00');\n"})}),"\n",(0,c.jsx)(s.p,{children:"更新记录是这样的："}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-sql",children:"UPDATE `hello-mysql`.`student` SET `email` = 'xxx@qq.com' WHERE (`id` = '2');\n"})}),"\n",(0,c.jsx)(s.p,{children:"删除记录是这样的："}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-sql",children:"DELETE FROM `hello-mysql`.`student` WHERE (`id` = '2');\n"})}),"\n",(0,c.jsx)(s.p,{children:"查询记录是这样的："}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM `hello-mysql`.student;\n"})}),"\n",(0,c.jsx)(s.p,{children:"增删改的 sql 都很简单，查询的 sql 可以写的很复杂，这个我们下节再讲。"}),"\n",(0,c.jsx)(s.p,{children:"最后再来学下删除和清空表的 sql："}),"\n",(0,c.jsx)(s.p,{children:"清空是 truncate："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsxs)(s.p,{children:["点击 review sql\n",(0,c.jsx)("img",{src:j,alt:""})]}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"删除是 drop："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"都很好理解。"}),"\n",(0,c.jsx)(s.p,{children:"按照 sql 分类，我们学的 table 的创建、删除、清空的 sql 都属于 DDL。table 数据的增删改属于 DML，而数据的查询属于 DQL。"}),"\n",(0,c.jsx)(s.p,{children:"这些 sql 在 mysql 命令行里执行也是一样的。"}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"一般我们还是用 GUI 工具更多一些。"}),"\n",(0,c.jsx)(s.p,{children:"最后还有一个小技巧，这里每次都要指定数据库名比较麻烦："}),"\n",(0,c.jsx)(s.p,{children:"可以先 use 数据库名 切换下数据库："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"这就像我们切到某个目录执行命令一样。"}),"\n",(0,c.jsx)(s.p,{children:"在 mysql workbench 里也是这样，先选中 use xx 那行执行，然后再选中其他 sql 执行。"}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"有同学可能会问，之前 sql 不一直都大写么？咋这里用小写了？"}),"\n",(0,c.jsx)(s.p,{children:"sql 语句不区分大小写，用大写只是关键词更容易区分一些。"}),"\n",(0,c.jsx)(s.p,{children:"最后，还记得我们跑 mysql 镜像指定了个 volume 数据卷么？"}),"\n",(0,c.jsx)(s.p,{children:"之前是没数据的，现在就有数据了："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"本地对应的目录也修改了："}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsx)(s.p,{children:"这样还会丢数据么？"}),"\n",(0,c.jsx)(s.p,{children:"不会，哪怕这个容器不行了，下次换个镜像挂载上这个目录一样跑。"}),"\n",(0,c.jsxs)(s.h2,{id:"总结",children:["总结",(0,c.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(s.p,{children:"mysql 分为 server 和 client，我们通过 docker 跑了一个 mysql server，指定了端口、数据卷，并通过 MYSQL_ROOT_PASSWORD 环境变量指定了 root 的密码。"}),"\n",(0,c.jsx)(s.p,{children:"然后下载了 mysql workbench 这个官方的 GUI 客户端。"}),"\n",(0,c.jsx)(s.p,{children:"可视化创建了一个 database 或者叫 schema。"}),"\n",(0,c.jsx)(s.p,{children:"之后创建了一个表，指定了主键和其他列的约束、默认值等。"}),"\n",(0,c.jsx)(s.p,{children:"之后学习了增删改查数据的可视化操作和对应的 INSERT、DELETE、UPDATE、SELECT 的 sql 语句。"}),"\n",(0,c.jsx)(s.p,{children:"还有 CREATE TABLE、TRUNCATE TABLE、DROP TABLE 等语句，这些修改结构的 sql 叫做 DDL。"}),"\n",(0,c.jsx)(s.p,{children:"增删改数据的 sql 叫做 DML，而查询数据的 sql 叫做 DQL。"}),"\n",(0,c.jsx)(s.p,{children:"当然，这只是单表的操作，下一节我们来学习多表的关联以及复杂 sql 查询语句的编写。"})]})}function $(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,i.ah)(),e.components);return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(Z,{...e})}):Z(e)}let ee=$;$.__RSPRESS_PAGE_META={},$.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F45.%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20MySQL.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"45. 快速入门 MySQL",headingTitle:"45. 快速入门 MySQL",frontmatter:{}}}}]);