"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["38854"],{970098:function(e,n,r){e.exports=r.p+"static/image/a9555cf0277536a9d7cd25f5ea4f51e4.046d3cf3.webp"},693736:function(e,n,r){e.exports=r.p+"static/image/d12b92f5c04f67a1e5240e5cce7c1b9e.b37e85e3.webp"},716537:function(e,n,r){r.r(n),r.d(n,{default:()=>g});var s=r(552676),i=r(740453);let l=r.p+"static/image/c1eb36a6797c59220de44eed421bd2a4.2275f915.webp",t=r.p+"static/image/f1dbea27360fa8f86b3c6f0e350a6a84.853aaee3.webp",c=r.p+"static/image/7c639364f4c19aa31c9fc292fea73213.152b7f45.webp",a=r.p+"static/image/70a8372fdb89faa253eb132a9cb4f98b.f6bc414e.webp",d=r.p+"static/image/96e78845569ee76ffa7d40dc431f7b18.944fba69.webp";var o=r(970098),h=r(693736);let p=r.p+"static/image/41921e69f3e114c9f6d0ddb0e2aa65a5.aa1619ed.webp",x=r.p+"static/image/a3ae69b1e9abe76c8018166d18c8bc34.469812eb.webp";function j(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",ol:"ol",li:"li",strong:"strong",h3:"h3",img:"img",pre:"pre",code:"code"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"30-实战篇--clerk-与登录注册",children:["30-实战篇 ❘ Clerk 与登录注册",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#30-实战篇--clerk-与登录注册",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"推荐学习指数：⭐️️⭐️️"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"1-前言",children:["1. 前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"登录与注册，一个说简单也简单，说复杂也复杂的功能。"}),"\n",(0,s.jsx)(n.p,{children:"往简单的说，注册的时候搞两个输入框，将数据写入数据库，登录的时候校验一下数据是否正确即可。"}),"\n",(0,s.jsx)(n.p,{children:"往复杂的说，除了登录注册，还有账号注销、忘记密码、密码重置、邮箱验证、更新个人资料、更新密码、删除账号等功能，此外，数据的安全性如何保证？Magic Links、Multi-Factor Auth (MFA)、社交媒体登录 (Google, Facebook, Twitter, GitHub, Apple, and more) 是否要支持？是不是还要做个后台统计用户登录数据？想一想都是工作量。"}),"\n",(0,s.jsx)(n.p,{children:"所以虽然可以自己从头做，但有现成的还是用现成的吧。"}),"\n",(0,s.jsx)(n.p,{children:"所幸关于登录注册的技术方案并不多，推荐 3 个主流的技术选择："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://clerk.com/",title:"https://clerk.com/",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.strong,{children:"Clerk"})})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"The most comprehensive User Management Platform"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Clerk 提供了一个开发人员友好的身份验证和用户管理解决方案，帮助开发者轻松构建和管理用户身份验证、用户账户和权限管理功能。它提供了安全的身份验证、社交登录集成、角色和权限管理等功能。"}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://supabase.com/",title:"https://supabase.com/",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.strong,{children:"Supabase"})})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Supabase is an open source Firebase alternative."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Start your project with a Postgres database, Authentication, instant APIs, Edge Functions, Realtime subscriptions, Storage, and Vector embeddings."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"简单来说，Supabase 是 Firebase 的开源替代品，属于 BaaS（后端即服务）产品。所谓 BaaS，开发者只需要开发和维护前端代码，由 BaaS 服务商提供了开发应用所需要的后端服务。Supabase 使用 Postgres 数据库，提供了身份验证、即时 APIs，边缘函数、实时订阅、存储等后端服务。所以用户身份验证只是 Supabase 提供的众多功能之一。"}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://authjs.dev/",title:"https://authjs.dev/",target:"_blank",rel:"noopener noreferrer",children:"Auth.js"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"前身是 NextAuth.js，后来拓展为支持更多框架的通用 Web 身份验证解决方案，并更名为 Auth.js。Auth.js 不是平台，是一个开源库，可以帮助我们快速实现登录注册以及三方授权登录功能。"}),"\n",(0,s.jsx)(n.p,{children:"总的来说，如果要快速接入登录注册功能，最好还是使用平台，也就是 Clerk 和 Supabase，平台都提供了免费版，但免费版毕竟有一些限制，比如 Clerk 会限制 10000 月活跃用户等，Supabse 会限制 50000 月活跃用户，数据库大小为 500 MB 等等。对于个人项目来说基本是够用的。"}),"\n",(0,s.jsx)(n.p,{children:"如果要比较 Clerk 和 Supabase 的话，Clerk 更专注于身份验证和用户管理，对应功能更加丰富。Supabase 实现的功能更多，身份验证只是其中之一。"}),"\n",(0,s.jsx)(n.p,{children:"我会更推荐使用 Clerk，因为登录注册、授权登录、账号设置等都需要 UI 界面，虽然 Clerk 和 Supabase 都提供了 UI，但 Supabase 的 Auth UI 目前正处于废弃状态，已经不再维护。这也可以理解，毕竟 Supabase 是 BaaS 产品，自然要专注于提供后端服务。"}),"\n",(0,s.jsx)(n.p,{children:"所以从首次使用的开发成本而言，我认为 Clerk < Supabase < Auth.js。"}),"\n",(0,s.jsxs)(n.h2,{id:"2-clerk",children:["2. Clerk",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-clerk",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"21-clerk-注册并创建应用",children:["2.1. Clerk 注册并创建应用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-clerk-注册并创建应用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["打开 ",(0,s.jsx)(n.a,{href:"https://clerk.com/",title:"https://clerk.com/",target:"_blank",rel:"noopener noreferrer",children:"clerk.com/"})," 注册一个账号，首次登录后会进入创建应用界面："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"输入应用的名字，左边选择支持的登录方式，右边为预览登录界面 UI，样式会根据左边的选择有所不同。"}),"\n",(0,s.jsx)(n.p,{children:"创建应用后，会跳转到 Get started 页面，指导用户如何接入 Clerk："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["不过你会发现并没有 Svelte，还好社区有 ",(0,s.jsx)(n.a,{href:"https://github.com/markjaquith/clerk-sveltekit",title:"https://github.com/markjaquith/clerk-sveltekit",target:"_blank",rel:"noopener noreferrer",children:"Clerk SvelteKit"}),"，并提供了演示 ",(0,s.jsx)(n.a,{href:"https://clerk-sveltekit.markjaquith.com/",title:"https://clerk-sveltekit.markjaquith.com/",target:"_blank",rel:"noopener noreferrer",children:"Demo"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"22-项目初始化",children:["2.2. 项目初始化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-项目初始化",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"运行："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm create svelte@latest svelte-clerk\n"})}),"\n",(0,s.jsxs)(n.p,{children:["选择 ",(0,s.jsx)(n.strong,{children:"Skeleton project、TypeScript、Svelte 5（4 当然也是可以的，5 会有安装时的兼容问题，不过很容易解决）："})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"按照命令行中的提示提交代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'cd svelte-clerk\n\nnpm install\n\ngit init && git add -A && git commit -m "Initial commit"\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"23-接入-clerk",children:["2.3. 接入 Clerk",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-接入-clerk",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"安装依赖项："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm i clerk-sveltekit\n"})}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:".env"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"PUBLIC_CLERK_PUBLISHABLE_KEY=pk_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\nCLERK_SECRET_KEY=sk_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"})}),"\n",(0,s.jsx)(n.p,{children:"查看这两个值最简单的方法是查看项目创建后的 Next.js 接入文档，第二步就有写："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["拷贝代码，然后把 ",(0,s.jsx)(n.code,{children:"NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY"})," 更名为 ",(0,s.jsx)(n.code,{children:"PUBLIC_CLERK_PUBLISHABLE_KEY"}),"即可。"]}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"src/hooks.server.ts"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import type { Handle } from "@sveltejs/kit";\nimport { sequence } from "@sveltejs/kit/hooks";\nimport { handleClerk } from "clerk-sveltekit/server";\nimport { CLERK_SECRET_KEY } from "$env/static/private";\n\nexport const handle: Handle = sequence(\n  handleClerk(CLERK_SECRET_KEY, {\n    debug: true,\n    protectedPaths: ["/admin"],\n    signInUrl: "/sign-in",\n  })\n);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在这段代码中，我们声明了保护路由和登录地址。注意像 ",(0,s.jsx)(n.code,{children:"/admin"})," 也会保护 ",(0,s.jsx)(n.code,{children:"/admin/xxx"}),"这样的路由。"]}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"src/hooks.client.ts"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import type { HandleClientError } from "@sveltejs/kit";\n// To use Clerk components:\nimport { initializeClerkClient } from "clerk-sveltekit/client";\n// Or for headless mode:\n// import { initializeClerkClient } from \'clerk-sveltekit/headless\'\nimport { PUBLIC_CLERK_PUBLISHABLE_KEY } from "$env/static/public";\n\ninitializeClerkClient(PUBLIC_CLERK_PUBLISHABLE_KEY, {\n  afterSignInUrl: "/admin/",\n  afterSignUpUrl: "/admin/",\n  signInUrl: "/sign-in",\n  signUpUrl: "/sign-up",\n});\n\nexport const handleError: HandleClientError = async ({ error, event }) => {\n  console.error(error, event);\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"在这段代码中，我们声明了登录和注册地址以及登录和注册后的跳转地址。"}),"\n",(0,s.jsx)(n.p,{children:"基本配置完毕。现在我们开始构建登录界面。"}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"src/routes/+layout.svelte"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'<script lang="ts">\n  import UserButton from \'clerk-sveltekit/client/UserButton.svelte\';\n  import SignedIn from \'clerk-sveltekit/client/SignedIn.svelte\';\n  import SignedOut from \'clerk-sveltekit/client/SignedOut.svelte\';\n<\/script>\n\n<SignedIn>\n  <UserButton showName afterSignOutUrl="/" />\n</SignedIn>\n\n<SignedOut>\n  <a href="/sign-in">Sign in</a> <span>|</span> <a href="/sign-up">Sign up</a>\n  \x3c!-- You could also use <SignInButton mode="modal" /> and <SignUpButton mode="modal" /> here --\x3e\n</SignedOut>\n\n<slot />\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在这段代码中，",(0,s.jsx)(n.code,{children:"<SignedIn>"}),"表示登录后显示的内容，",(0,s.jsx)(n.code,{children:"<SignedOut>"}),"表示未登录时现实的内容。我们放在 ",(0,s.jsx)(n.code,{children:"+layout.svelte"}),"中用于模拟顶部导航栏。"]}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"src/routes/sign-in/+page.svelte"}),"，这是登录界面，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'<script lang="ts">\n  import SignIn from \'clerk-sveltekit/client/SignIn.svelte\';\n<\/script>\n\n<div style="display: flex;justify-content:center">\n  <SignIn redirectUrl="/admin" />\n</div>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"svelte-clerk/src/routes/sign-up/+page.svelte"}),"，这是注册界面，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'<script lang="ts">\n  import SignUp from \'clerk-sveltekit/client/SignUp.svelte\';\n<\/script>\n\n<div>\n  <SignUp redirectUrl="/admin" />\n</div>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"src/routes/admin/+page.svelte"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"<script>\n  import SignedIn from 'clerk-sveltekit/client/SignedIn.svelte';\n<\/script>\n\n<SignedIn let:user>\n  Welcome {JSON.stringify(user?.fullName)}!\n</SignedIn>\n"})}),"\n",(0,s.jsx)(n.p,{children:"这是登录后跳转的界面。"}),"\n",(0,s.jsx)(n.p,{children:"此时基本配置完成，我们看下浏览器的效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"24-中文汉化",children:["2.4. 中文汉化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24-中文汉化",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"虽然登录注册功能解决了，但你会发现，登录以及管理界面都是英文，我们该如何改为中文呢？"}),"\n",(0,s.jsx)(n.p,{children:"安装："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"npm i @clerk/localizations --legacy-peer-deps\n"})}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"src/hooks.client.ts"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"import type { HandleClientError } from '@sveltejs/kit';\n// To use Clerk components:\nimport { initializeClerkClient } from 'clerk-sveltekit/client';\n// Or for headless mode:\n// import { initializeClerkClient } from 'clerk-sveltekit/headless'\nimport { PUBLIC_CLERK_PUBLISHABLE_KEY } from '$env/static/public';\n+import { zhCN } from '@clerk/localizations';\n\ninitializeClerkClient(PUBLIC_CLERK_PUBLISHABLE_KEY, {\n+	localization: zhCN,\n  afterSignInUrl: '/admin/',\n  afterSignUpUrl: '/admin/',\n  signInUrl: '/sign-in',\n  signUpUrl: '/sign-up'\n});\n\nexport const handleError: HandleClientError = async ({ error, event }) => {\n  console.error(error, event);\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"此时界面改为中文："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"25-获取用户信息",children:["2.5. 获取用户信息",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#25-获取用户信息",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"现在我们该如何获取用户信息呢？"}),"\n",(0,s.jsxs)(n.p,{children:["如果是用于展示，上节的例子中已经展示了一种方法，那就是使用 ",(0,s.jsx)(n.code,{children:"<SignedIn let:user />"}),"组件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"<SignedIn let:user>\n  Welcome {JSON.stringify(user?.fullName)}!\n</SignedIn>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["SvelteKit Clerk 也提供了其他一些组件方便使用，具体查看",(0,s.jsx)(n.a,{href:"https://github.com/markjaquith/clerk-sveltekit/tree/ff8e381705c49c59750206b409aa00f14127a0f1?tab=readme-ov-file#components",title:"https://github.com/markjaquith/clerk-sveltekit/tree/ff8e381705c49c59750206b409aa00f14127a0f1?tab=readme-ov-file#components",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果需要在服务端获取，对于服务端受保护的路由将自动将 Clerk 用户对象注入到 ",(0,s.jsx)(n.code,{children:"locals.session"})," 中，也就是说，可以在 load 函数、form actions 中获取该信息。"]}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"src/routes/admin/+page.server.ts"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"export async function load({ locals }) {\n  console.log(locals.session);\n  return {\n    user: locals.session\n  };\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"查看打印的结果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["此时可以获取 userId 信息，如果要获取更完整的信息，可以通过 Clerk 提供的 ",(0,s.jsx)(n.a,{href:"https://clerk.com/docs/references/backend/overview",title:"https://clerk.com/docs/references/backend/overview",target:"_blank",rel:"noopener noreferrer",children:"API"})," 获取。"]}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"src/routes/admin/+page.server.ts"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"import { createClerkClient } from '@clerk/clerk-sdk-node';\nimport { CLERK_SECRET_KEY } from '$env/static/private';\n\nconst clerkClient = createClerkClient({ secretKey: CLERK_SECRET_KEY });\n\nexport async function load({ locals }) {\n  const userId = locals.session.userId;\n  const { firstName, lastName } = await clerkClient.users.getUser(locals.session.userId);\n\n  return {\n    user: {\n      userId,\n      userName: firstName + ' ' + lastName\n    }\n  };\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"src/routes/admin/+page.svelte"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"<script>\n  let { data } = $props();\n  import SignedIn from 'clerk-sveltekit/client/SignedIn.svelte';\n<\/script>\n\n{#if data.user}\n  Welcome {JSON.stringify(data.user.userName)}!\n{/if}\n\n<br />\n\n<SignedIn let:user>\n  Welcome {JSON.stringify(user?.fullName)}!\n</SignedIn>\n"})}),"\n",(0,s.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(n.h3,{id:"26-后台界面",children:["2.6. 后台界面",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#26-后台界面",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Clerk 提供了后台界面，可以查看登录用户数据以及进行登录相关的设置："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.h2,{id:"3-最后",children:["3. 最后",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-最后",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"目前 SvelteKit 接入 Clerk 还是要靠社区的贡献，目前看到有两个不错的库："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/markjaquith/clerk-sveltekit",title:"https://github.com/markjaquith/clerk-sveltekit",target:"_blank",rel:"noopener noreferrer",children:"github.com/markjaquith…"})," 这是本篇用到的"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/wobsoriano/svelte-clerk",title:"https://github.com/wobsoriano/svelte-clerk",target:"_blank",rel:"noopener noreferrer",children:"github.com/wobsoriano/…"})," 这是 Svelte 5 的，需要用 Svelte 5"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"使用 Clerk 主要是看中 UI 界面比较省事，一步到位。如果界面需要从零构建，使用 Supabase 也是一个不错的选择。"})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}let g=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["Svelte%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F30-%E5%AE%9E%E6%88%98%E7%AF%87%20%E2%9D%98%20Clerk%20%E4%B8%8E%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C.md"]={toc:[{text:"1. 前言",id:"1-前言",depth:2},{text:"2. Clerk",id:"2-clerk",depth:2},{text:"2.1. Clerk 注册并创建应用",id:"21-clerk-注册并创建应用",depth:3},{text:"2.2. 项目初始化",id:"22-项目初始化",depth:3},{text:"2.3. 接入 Clerk",id:"23-接入-clerk",depth:3},{text:"2.4. 中文汉化",id:"24-中文汉化",depth:3},{text:"2.5. 获取用户信息",id:"25-获取用户信息",depth:3},{text:"2.6. 后台界面",id:"26-后台界面",depth:3},{text:"3. 最后",id:"3-最后",depth:2}],title:"30-实战篇 ❘ Clerk 与登录注册",headingTitle:"30-实战篇 ❘ Clerk 与登录注册",frontmatter:{}}}}]);