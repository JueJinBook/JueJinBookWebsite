"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["52285"],{584458:function(e,n,d){d.r(n),d.d(n,{default:()=>o});var s=d(552676),c=d(740453);let i=d.p+"static/image/6e30c13d1bef16a725df73f91be03f8c.424a4e61.webp",r=d.p+"static/image/72a4d3a13f209926199c697590e45def.45f0e45d.webp",h=d.p+"static/image/16317ab6b2e7b32fc3c15edc5c18430a.0c7daf4b.webp",a=d.p+"static/image/da2a3bbf70126d89a2a05d710ba8e672.1ccc0176.webp",l=d.p+"static/image/9da8597f85d06757b044a859e0a98ba9.7da9f7fa.webp",x=d.p+"static/image/b8e4dccd128936892cedb951e6672ca8.ea0feb99.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",img:"img",code:"code",h4:"h4",pre:"pre",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"30成为一名有独立开发能力的前端工程师",children:["30.成为一名有独立开发能力的前端工程师",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#30成为一名有独立开发能力的前端工程师",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"成为一名有独立开发能力的前端工程师",children:["成为一名有独立开发能力的前端工程师",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#成为一名有独立开发能力的前端工程师",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"计算机行业的高薪，吸引着越来越多的人选择从事这个行业。每年计算机毕业的大学生人才更是以十万甚至百万计，其中从事前端行业的同学更是占据不小的比例。从理性的角度分析，前端的就业会比后端更为宽泛一些，但凡是一个互联网公司，它必定是需要做 C 端项目，这里的 C 端指的是面向用户的客户端。而前端涉略的领域包括 PC 网页、手机 H5、各类小程序、APP、桌面客户端、浏览器插件等等。所以前端这个职业在计算机领域，算是比较吃香的职业。"}),"\n",(0,s.jsx)(n.p,{children:"那么我们如何从众多的竞争者中脱引而出呢？答案就是，不断的提升自己的基础知识，包括对整个从 0 到 1 的把控能力，这都是一个“有竞争力的前端”应该具备的知识。那么本章，对照着文章开头的知识导图，带大家去了解，如何去成为一个“具备独立开发能力的前端”。"}),"\n",(0,s.jsxs)(n.h2,{id:"框架选型",children:["框架选型",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#框架选型",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["框架选型这一环节，可能并不是你能决定的。因为很多公司的前端团队，都会有一直使用的技术，就比如我的公司，多数场景中用的都是 ",(0,s.jsx)(n.code,{children:"Vue"}),"。如果公司的技术选型很松散，可以自己决定的话，你可以根据项目的需要以及人员的配备来选择。如果和你一起开发的小伙伴只会 ",(0,s.jsx)(n.code,{children:"React"})," 或者 ",(0,s.jsx)(n.code,{children:"Vue"}),"，你可以根据团队的技术倾向做选择。当然，上述都要建立在大家对框架都很了解的情况下。"]}),"\n",(0,s.jsxs)(n.p,{children:["我个人倾向中文文档友好的 ",(0,s.jsx)(n.code,{children:"Vue"})," 框架，遇到问题的时候，社区及周边生态都能很好的帮你解决。我看到很多同学，一遇到问题就去 QQ 群或者微信群里提问，本来热热闹闹的 QQ 群因为你一个问题瞬间变得冷清。多数情况下，大家都在忙着自己的事情，很少有人会抽出时间去回答你的问题。此时，你应该去相应技术栈的 ",(0,s.jsx)(n.code,{children:"Github"})," 仓库的 ",(0,s.jsx)(n.code,{children:"issue"})," 里寻找答案。或者去搜索引擎搜关键词，去解决你的问题，关键词很重要，不要乱搜，带着报错的信息去搜，精准的找到问题所在，否则你会浪费很多时间。"]}),"\n",(0,s.jsxs)(n.h2,{id:"项目初始化",children:["项目初始化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#项目初始化",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在你做完框架选型之后，你就该着手开始搭建项目了。此时当然可以手动搭建项目，这非常磨练基本功。但是在项目紧急的情况下，不允许你有过多的时间去研究手动搭建，你可以选择市面上一些成熟的解决方案，如 ",(0,s.jsx)(n.code,{children:"Vue CLI"}),"、",(0,s.jsx)(n.code,{children:"Vite"}),"、",(0,s.jsx)(n.code,{children:"UmiJS"}),"、",(0,s.jsx)(n.code,{children:"create-react-app"}),"、",(0,s.jsx)(n.code,{children:"Next.js"})," 等等，这些工具将帮你完成项目的初始化工作。"]}),"\n",(0,s.jsx)(n.p,{children:"其次，你必须掌握一项程序员必备技能 —— 看文档。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当你遇到问题的时候，比如某个配置、某个环境变量，在当前使用的解决方案下要如何配置和获取，都需要你能快速的从文档中获取有效答案。"}),"\n",(0,s.jsx)(n.p,{children:"在一个产品的前端开发过程中，一般来说会经历本地开发、测试脚本、开发自测、测试环境、预上线环境，然后才能正式的发布。对于不同的环境，有些配置项会有所差异。"}),"\n",(0,s.jsx)(n.p,{children:"我们就拿环境变量来说道说道，注意下面我解决问题的方式。"}),"\n",(0,s.jsxs)(n.h4,{id:"vue-cli-获取环境变量",children:[(0,s.jsx)(n.code,{children:"Vue CLI"})," 获取环境变量",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vue-cli-获取环境变量",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先我们打开",(0,s.jsx)(n.a,{href:"https://cli.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"，在如下位置直接搜索“环境变量”，快速定位："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["文档说的很清楚，三种模式 ",(0,s.jsx)(n.code,{children:"development"}),"、",(0,s.jsx)(n.code,{children:"test"}),"、",(0,s.jsx)(n.code,{children:"production"}),"，分别代表开发、测试、生产。可以在命令行这样设置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'"build:beta": "vue-cli-service build --mode test"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["然后在根目录下新建 ",(0,s.jsx)(n.code,{children:".env.test"}),"，内部写上："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"VUE_APP_BASE_URL=https://test.xixihaha.com\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在项目构建完以后，你可以在项目内部文件通过 ",(0,s.jsx)(n.code,{children:"process.env.VUE_APP_BASE_URL"}),"，获取到请求地址的值。"]}),"\n",(0,s.jsx)(n.p,{children:"这便是打包测试环境的应用所需的环境变量配置。"}),"\n",(0,s.jsxs)(n.h4,{id:"umijs-获取环境变量",children:[(0,s.jsx)(n.code,{children:"UmiJS"})," 获取环境变量",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#umijs-获取环境变量",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["还是一样，打开",(0,s.jsx)(n.a,{href:"https://umijs.org/zh-CN",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"，搜索“环境变量”："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["往往下翻你会发现一个 ",(0,s.jsx)(n.code,{children:"UMI_ENV"}),"，它的作用是指定不同环境各自的配置文件，我们可以这样配置 ",(0,s.jsx)(n.code,{children:"package.josn"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'"build:beta": "UMI_ENV=beta umi build"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["设置好 ",(0,s.jsx)(n.code,{children:"UMI_ENV=beta"})," 之后，在根目录下的 ",(0,s.jsx)(n.code,{children:"config"})," 文件夹中，新增一个文件 ",(0,s.jsx)(n.code,{children:"config.beta.js"}),"，内容如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  define: {\n    'process.env.BUILD_ENV': 'beta'\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"config.beta.js"})," 文件的内容，会覆盖 ",(0,s.jsx)(n.code,{children:"config.js"})," 内的配置，所以这里可以单独设置测试环境需要的变量，部署完之后，在内部文件可以通过如下获取到环境变量："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"process.env.BUILD_ENV\n"})}),"\n",(0,s.jsx)(n.p,{children:"同理可得，生产环境打包可以用："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'"build:release": "UMI_ENV=release umi build"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["设置好 ",(0,s.jsx)(n.code,{children:"config/config.release.js"})," 便可。"]}),"\n",(0,s.jsxs)(n.p,{children:["同样的形式，我们就不一一举例了，",(0,s.jsx)(n.code,{children:"Vite"})," 的环境变量获取，会在下一章搭建项目开发环境的时候为大家讲解。"]}),"\n",(0,s.jsxs)(n.h2,{id:"ui-组件库",children:["UI 组件库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ui-组件库",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["UI 组件库的选型，绝大情况下取决于项目。如果你是开发管理后台 B 端类型的项目，就可以使用 ",(0,s.jsx)(n.code,{children:"Antd"}),"、",(0,s.jsx)(n.code,{children:"Element UI"}),"、",(0,s.jsx)(n.code,{children:"Element-Plus"})," 等，它们对后台的一些操作都有比较好的组件提供。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果你要开发的是 C 端项目，比如电商类项目，可以考虑用 ",(0,s.jsx)(n.code,{children:"Vant"}),"，因为有赞是高度定制电商项目组件的公司，所以选它再合适不过。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["如果是金融类项目，可以推荐使用京东组件库 ",(0,s.jsx)(n.code,{children:"NUT UI"}),"，它是京东金融团队推出的一套针对金融行业的组件库。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"诸如此类，目的就是让大家在选择组件库的时候，做好充分的调研工作。并且还要看是否支持按需加载、自定义主题色等，这关系到后续打包静态资源体积的大小，直接影响到项目的加载性能，所以做好充分的调研工作，还是很有必要的。"}),"\n",(0,s.jsxs)(n.h2,{id:"css-预处理",children:["CSS 预处理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-预处理",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["预处理器的选择，我个人比较倾向 ",(0,s.jsx)(n.code,{children:"Less"}),"，因为多数 ",(0,s.jsx)(n.code,{children:"UI"})," 组件库用的 ",(0,s.jsx)(n.code,{children:"CSS"})," 预处理器就是 ",(0,s.jsx)(n.code,{children:"Less"}),"。预处理器的选择，倒不会对整个项目产生过大的影响，因为它们的作用都大同小异，无非就是给 ",(0,s.jsx)(n.code,{children:"CSS"})," 赋能，让其有变量、计算、合并同类型等能力，这里就不赘述了。"]}),"\n",(0,s.jsxs)(n.h2,{id:"http-请求库",children:["HTTP 请求库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#http-请求库",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["市面上不乏好用的 ",(0,s.jsx)(n.code,{children:"HTTP"})," 请求库，如 ",(0,s.jsx)(n.code,{children:"Axios.js"}),"、",(0,s.jsx)(n.code,{children:"request.js"}),"、",(0,s.jsx)(n.code,{children:"fetch"})," 等等。当然，你可以直接在页面引入使用，在每个页面内部引入请求库。如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<script>\n  import axios from 'axios'\n  export default {\n    setup() {\n      axios.get('/xxx/xxx', { xxx: 'xxx' }, option).then(() => {})\n    }\n  }\n<\/script>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["但是这非常不极客，如果你的 ",(0,s.jsx)(n.code,{children:"option"})," 配置需要修改的话，可能在整个项目有用到请求库的地方，都改上一遍。一次两次也就算了，长此以往，岂不是要疯？"]}),"\n",(0,s.jsxs)(n.p,{children:["所以你可以通过 ",(0,s.jsx)(n.code,{children:"axios.js"})," 提供的拦截器，对它进行二次封装，再抛出去给下级页面使用，这样做的目的就是将数据和配置统一处理，你可以在封装的代码里统一抛出错误信息，不用每次在页面级的请求里单独抛错。这块内容我会在接下里的搭建项目开发环境的章节为大家详细说明如何封装。"]}),"\n",(0,s.jsxs)(n.h2,{id:"全局状态管理",children:["全局状态管理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#全局状态管理",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当你需要大量的组件间的状态共享以及事件传递的时候，状态管理插件就派上用场了。常见的管理插件有 ",(0,s.jsx)(n.code,{children:"Redux"}),"、",(0,s.jsx)(n.code,{children:"Moxb"}),"、",(0,s.jsx)(n.code,{children:"Vuex"}),"、",(0,s.jsx)(n.code,{children:"dva"})," 等等，其实都大同小异，这块内容不会在后台管理系统出现，因为简单的跨组件传递信息传递使用 ",(0,s.jsx)(n.code,{children:"privide"}),"、",(0,s.jsx)(n.code,{children:"inject"})," 可以解决，方法的跨组件调用则可以使用手写“发布订阅”模式脚本，也可以实现。所以这块内容，不会在管理后台的项目中出现。但是它也是一个合格的前端工程师不可或缺的技能。"]}),"\n",(0,s.jsxs)(n.h2,{id:"公共方法的封装",children:["公共方法的封装",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#公共方法的封装",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["公共方法的封装也能体现一个前端程序员模块化的功底。比如 ",(0,s.jsx)(n.code,{children:"localStorage"}),"、正则验证、日期转换、可复用的 ",(0,s.jsx)(n.code,{children:"json"})," 对象等等。"]}),"\n",(0,s.jsx)(n.p,{children:"好的抽离，能让你写的代码变得可控，那种对自己写的代码，能了如指掌的感觉，也是增强代码自信的一种方式。"}),"\n",(0,s.jsxs)(n.h2,{id:"打包构建部署",children:["打包构建部署",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#打包构建部署",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这块内容，那就是奇形怪状、千奇百怪的都有的。"}),"\n",(0,s.jsx)(n.p,{children:"大公司会有一套成熟的 CI、CD 持续集成体系，有完善的版本管理体系，毕竟团队大了，管理那么多项目，想要井井有条的管理，必须上这些成体系的工具插件。"}),"\n",(0,s.jsx)(n.p,{children:"小公司则对这块没有那么特别在意，前端打完包之后，只要将静态资源部署上去，能运行便可。但是也需要做一些简单的版本号控制，合理的利用浏览器缓存能力，节省公司的服务器资源。"}),"\n",(0,s.jsx)(n.p,{children:"其实说白了，前端的部署其实很简单，我们用一个简单的例子展示如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>document</title>\n</head>\n<body>\n    <div class=\'root\'>\n    </div>\n    <script src=\'./bundle.js\'><\/script>\n</body>\n</html>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["你只要想办法，将打包完的后的 ",(0,s.jsx)(n.code,{children:"./bundle.js"})," 文件如上述形式运行在浏览器环境，便能得到想要的结果。"]}),"\n",(0,s.jsxs)(n.h2,{id:"其他能力",children:["其他能力",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#其他能力",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"解决问题",children:["解决问题",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#解决问题",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["解决问题的能力，前面也提到过，一定要学会自己去搜索引擎找答案，很多人会选择百度，但是我这边推荐",(0,s.jsx)(n.a,{href:"https://cn.bing.com/?FORM=BEHPTB&ensearch=1",target:"_blank",rel:"noopener noreferrer",children:"必应国际版"}),"，很多时候一些英文报错可以在国外的论坛上能找到答案。"]}),"\n",(0,s.jsxs)(n.p,{children:["另外，",(0,s.jsx)(n.code,{children:"Github"})," 上的 ",(0,s.jsx)(n.code,{children:"issue"})," 也能帮你解决很多棘手的问题，特别是一些配置上的问题。"]}),"\n",(0,s.jsxs)(n.h4,{id:"布局",children:["布局",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#布局",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"整个网站的布局，一定要写好。尽量避免临时的修改一些宽高、边距等。好的布局，有益于后续的功能迭代及需求的改变。你不知道产品经理什么时候突然来一句，”布局修改一下“。"}),"\n",(0,s.jsxs)(n.h4,{id:"服务端能力",children:["服务端能力",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#服务端能力",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["前端这块还是需要对 ",(0,s.jsx)(n.code,{children:"Node"})," 知识有所了解，遇到一些浏览器无法解决的问题，可以通过服务器的能力解决。比如在我开发的过程中有生成海报的功能，我就利用 ",(0,s.jsx)(n.code,{children:"node"})," ，通过 ",(0,s.jsx)(n.code,{children:"puppeteer"})," 在服务端生成图片在输出给前端。"]}),"\n",(0,s.jsx)(n.p,{children:"而 Nginx 的相关知识也能让你遇到跨域之类的问题，跨域通过本地 Nginx 代理来解决。当然，它还有很多其他的能力有待挖掘。"}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本章节针对如何成为一名有独立开发能力的前端开发，展开了我个人的一些见解。当然，有些同学可能不认可我这套说辞，那就各自保留意见吧。前端的边界是很模糊的，你懂得越多，领导就会越器重你，自然升职加薪就不在话下，希望大家能自己捋一捋，想一想自己的职业规划，到底是原地踏步，还是跳出舒适圈，努力前进\uD83D\uDCAA。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"文档最近更新时间：2022 年 9 月 20 日。"}),"\n"]})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}let o=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F30.%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E6%9C%89%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%83%BD%E5%8A%9B%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88.md"]={toc:[{text:"成为一名有独立开发能力的前端工程师",id:"成为一名有独立开发能力的前端工程师",depth:2},{text:"前言",id:"前言",depth:2},{text:"框架选型",id:"框架选型",depth:2},{text:"项目初始化",id:"项目初始化",depth:2},{text:"`Vue CLI` 获取环境变量",id:"vue-cli-获取环境变量",depth:4},{text:"`UmiJS` 获取环境变量",id:"umijs-获取环境变量",depth:4},{text:"UI 组件库",id:"ui-组件库",depth:2},{text:"CSS 预处理",id:"css-预处理",depth:2},{text:"HTTP 请求库",id:"http-请求库",depth:2},{text:"全局状态管理",id:"全局状态管理",depth:2},{text:"公共方法的封装",id:"公共方法的封装",depth:2},{text:"打包构建部署",id:"打包构建部署",depth:2},{text:"其他能力",id:"其他能力",depth:2},{text:"解决问题",id:"解决问题",depth:4},{text:"布局",id:"布局",depth:4},{text:"服务端能力",id:"服务端能力",depth:4},{text:"总结",id:"总结",depth:2}],title:"30.成为一名有独立开发能力的前端工程师",headingTitle:"30.成为一名有独立开发能力的前端工程师",frontmatter:{}}}}]);