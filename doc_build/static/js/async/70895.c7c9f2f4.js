"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["70895"],{522242:function(e,n,s){s.r(n),s.d(n,{default:()=>eg});var a=s(552676),c=s(740453);let r=s.p+"static/image/ad1923ff1f7daeaca41727e1f8c966f7.c635eaf0.gif",t=s.p+"static/image/0141556a9f0908c93ed3a072c02814b7.b997e903.gif",i=s.p+"static/image/648bf273507e5b7dda2ecc38b3d2f216.85173479.webp",d=s.p+"static/image/d29f3730dad5cb697fea7f20c4e01ce3.6fb4dc25.gif",p=s.p+"static/image/a8965106c3eed8c424f05847020a1864.61fc95fe.webp",l=s.p+"static/image/d1e6a1a2b277e928f9ab579f99f14239.ffad6340.gif",o=s.p+"static/image/da40cd2432f0c793dd1201bef24fe4bd.3b11af05.webp",x=s.p+"static/image/e6350c474bff798a6859ef42edb545fb.237cdccc.webp",j=s.p+"static/image/5f04e883694f29b3cd0a1560524332ef.bb55d80c.webp",b=s.p+"static/image/426c83fe4eb2b9f92e10a5420286c59c.154779bb.webp",h=s.p+"static/image/3e9db5120230963906a9f70bd173ca79.09cb239a.webp",g=s.p+"static/image/3f02ac06fa9b0cead4262a4f340d73ba.bab0791d.webp",f=s.p+"static/image/e2ff2b19670fd9d5461b17f0e45b4825.a5808713.webp",m=s.p+"static/image/98d7ce97c84cae40bd955bc72847862c.019d1bff.webp",y=s.p+"static/image/b34b46ea4ce7c22d7ffaaf83eb3bc3d9.42a29819.webp",u=s.p+"static/image/fec240e2062180f31273cde870a7718d.558e62a5.webp",w=s.p+"static/image/e038983cd9c0a0e3deb46888fb519ebb.7be4cb6e.webp",k=s.p+"static/image/d030fec3e16a43d43bacc1fbd40c1038.568c60e8.webp",S=s.p+"static/image/9d3663f9f4a4a6e359027d294c65003a.17bb03db.webp",v=s.p+"static/image/7091eb484bd3e45777c49aa7f56ba975.c8b9599e.webp",C=s.p+"static/image/b89f9be35c10fde1dfcb6eaa4100914a.d9a68102.webp",E=s.p+"static/image/23908317498e7e1951eb9a10205c44fd.487c444d.webp",_=s.p+"static/image/5c33705fc1245bac5f020a60985c0547.d4d0ae94.webp",B=s.p+"static/image/09a634997b6f38cc768a1a1fff7fe99e.85ce720e.webp",A=s.p+"static/image/3cc67f9859ea277678ee3802950861ca.18a15f7b.webp",D=s.p+"static/image/62d8c3e3dd6ad61ffe99c3cc22b366e4.470fbd38.webp",N=s.p+"static/image/04c2c7c87fef864879949fb1dd689b7c.24a8e133.gif",F=s.p+"static/image/0a44fd59e0fada3f63b4dbf924c92df3.492317aa.webp",R=s.p+"static/image/077a55fc6708c60965097031e0d0a3c8.7f039a52.webp",G=s.p+"static/image/16a60ed9f59cf50a6fc17cb9cc7c4498.1f04ce13.webp",M=s.p+"static/image/3ae42143c55982f3816011839b5a7de9.0b57868d.webp",P=s.p+"static/image/8bf90de6d44f175719da22362971080c.5344e28d.webp",z=s.p+"static/image/08c7af9d540f87414e970ccc47df0d44.7d0601df.webp",O=s.p+"static/image/16268e57345d8b2bd16b9534d27421da.89b775ee.webp",T=s.p+"static/image/9cb7ecc8fccf2c7a337d98bf18fb2e83.46eab380.webp",q=s.p+"static/image/63dadae9b9b39c8bd4198beb78ea0906.6b2a146a.webp",I=s.p+"static/image/b6678e2ce23c2f81ab021b4f30f38100.53fb95b1.webp",V=s.p+"static/image/90e4216d53205c23964758cc22600ff8.143d9f49.webp",L=s.p+"static/image/cc1485aa049aa62f0871d47442ea6b1a.ac1af95e.webp",Q=s.p+"static/image/05e7d335975c5e0e9a65e1c0973f8d58.deb04a1d.webp",U=s.p+"static/image/6fce44e19543859801caa8ec441dfe2b.5e45ac12.webp",X=s.p+"static/image/8f73f645f54869d4352d5532f402c108.dac87b04.webp",H=s.p+"static/image/13f0535dd1ae5b59d49799dbecf284d0.a800beb0.gif",J=s.p+"static/image/317103bba0483de516a589fcfb9a5234.94094671.gif",K=s.p+"static/image/3004fd257f87e282332b9e298d687e09.075d0b33.webp",W=s.p+"static/image/7d483e6273ff5ce115648bd7cc7dfdca.9504edde.webp",Y=s.p+"static/image/e19a0c7e29fefb30ec3df5cd00937e81.f13351e0.webp",Z=s.p+"static/image/6efdf60c7599fccd7d5691dcf815ff16.9d9a83d8.webp",$=s.p+"static/image/110cf393dc13b177a388b3401a430107.2527dc38.gif",ee=s.p+"static/image/d264cdc275cb58bcec487d039406cb65.3d44efb6.webp",en=s.p+"static/image/0e55c0b9815c7523b143a32056a60650.72b2973b.webp",es=s.p+"static/image/0b59ffa91d75c82f90095ccfb50cd393.93aa0e71.webp",ea=s.p+"static/image/989caeccf45fdcd006bc091da78bdaa5.e374e4ca.webp",ec=s.p+"static/image/f6b778545c87b5fb3ec9d4a856089265.8b042d52.webp",er=s.p+"static/image/32fbb62cdf35b0931ea6e29da05060e5.44912cc8.gif",et=s.p+"static/image/d66cfadaef02d838f1ac72046500302e.a9226d18.webp",ei=s.p+"static/image/9b49a9d95f5c8c5c4b08b7aa4f3386fa.12219564.webp",ed=s.p+"static/image/d90365d1a9b30fb810f0cef8d9ee2017.4fa46ef9.webp",ep=s.p+"static/image/a96bef330f6233a5fc9e86053fb1c7e4.b987fdf3.webp",el=s.p+"static/image/4cb050447a0ae887217569d5f1c61530.4fe783b2.webp",eo=s.p+"static/image/a33e3848111fda7dc624d678aed67bcf.09ab5c00.webp",ex=s.p+"static/image/5a9c057ec4c7b277cd0b5ffc751154ab.a2869e42.webp",ej=s.p+"static/image/3b7b345cbbbea2638f9be0ac0675c196.a6a4d0d7.webp";function eb(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,c.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"第10章快速掌握storybook",children:["第10章—快速掌握Storybook",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第10章快速掌握storybook",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"\uFEFF我们每天都在写各种组件，一般的组件不需要文档，但当你写组件库里的组件，或者项目里的一些公共组件的时候，是需要提供文档的。"}),"\n",(0,a.jsx)(n.p,{children:"这时候我们一般都会用 Storybook。"}),"\n",(0,a.jsx)(n.p,{children:"Storybook 是非常流行的用来构建组件文档的工具。"}),"\n",(0,a.jsx)(n.p,{children:"现在有 80k 的 star 了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ej,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"那 Storybook 都提供了啥功能呢？"}),"\n",(0,a.jsx)(n.p,{children:"我们试一下就知道了："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npx create-react-app --template typescript sb-test\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ex,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"用 cra 创建个 react 项目。"}),"\n",(0,a.jsx)(n.p,{children:"然后进入项目，执行 storybook 的初始化："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npx storybook@latest init\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:eo,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"打印的日志告诉你 storybook init 是在你的项目里添加 storybook 的最简单方式。"}),"\n",(0,a.jsx)(n.p,{children:"它会在你的 package.json 添加一个 storybook 命令："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:el,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"执行 npm run storybook，就可以看到这样文档："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm run storybook\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ep,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这就是 storybook 生成的组件文档。"}),"\n",(0,a.jsx)(n.p,{children:"这三个组件不是我们自己写的，是 storybook 初始化的时候自带了三个 demo 组件。"}),"\n",(0,a.jsx)(n.p,{children:"我们可以用它来了解下 storybook 的功能。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ed,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"storybook init 在项目里加了 2 个目录： .storybook 和 src/stories"}),"\n",(0,a.jsx)(n.p,{children:".storybook 下的是配置文件， src/stories 下的是展示文档用的组件。"}),"\n",(0,a.jsx)(n.p,{children:"Button.tsx 就是传入几个参数，渲染出一个 button："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ei,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后 Button.stories.tsx 里导出了几种 Button 的 props："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:et,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"导出的这几个 Story 类型的对象是啥呢？"}),"\n",(0,a.jsx)(n.p,{children:"是用来渲染不同 story 的："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:er,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"也就是 Button 组件传入不同参数的时候渲染的结果。"}),"\n",(0,a.jsx)(n.p,{children:"我们加一个 Story 试试："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ec,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export const Guang: Story = {\n  args: {\n    label: '光光光',\n    size: 'large',\n    backgroundColor: 'green'\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"页面多了一个 Button 的类型："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ea,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"也就是说，Storybook 把同一个组件传入不同 props 的情况，叫做一个 Story。"}),"\n",(0,a.jsx)(n.p,{children:"别的地方可能叫做用例或变体，而在 Storybook 里叫做 story。"}),"\n",(0,a.jsx)(n.p,{children:"一个组件包含多个 Story，一个文档里又包含多个组件，和一本书的目录差不多。"}),"\n",(0,a.jsx)(n.p,{children:"所以把这个工具叫做 Storybook。"}),"\n",(0,a.jsx)(n.p,{children:"除了 story 外，上面还有生成的组件文档："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:es,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以看到，列出了每个 props 和描述。"}),"\n",(0,a.jsx)(n.p,{children:"是从注释里拿到的："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:en,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"我们改了一下注释，刷新下，可以看到文档变了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:ee,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样就可以方便的生成组件文档了。"}),"\n",(0,a.jsx)(n.p,{children:"而且，这些参数都是可以调的："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:$,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以直接修改 props 看组件渲染结果，就很方便。"}),"\n",(0,a.jsx)(n.p,{children:"而且你还可以直接复制它的 jsx 代码："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:Z,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"之前我们是 args 传入参数渲染，你还可以用 render 函数的方式自己渲染："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:Y,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export const Guang: Story = {\n  args: {\n    label: '光光光',\n    size: 'large',\n    backgroundColor: 'green'\n  },\n  render(args) {\n    return <div>\n      <button>aaaa</button>\n      <Button {...args}/>\n      <button>bbb</button>\n    </div>\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"render 函数的参数就是 args，你可以自己返回 jsx（这时要把文件后缀名改为 tsx）。"}),"\n",(0,a.jsx)(n.p,{children:"这样，渲染内容就是自己控制的："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:W,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"而且有的组件不只是传入 props 就可以了，还需要一些点击、输入等事件。"}),"\n",(0,a.jsx)(n.p,{children:"storybook 支持写这类脚本："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:K,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export const Guang: Story = {\n  args: {\n    label: '光光光',\n    size: 'large',\n    backgroundColor: 'green'\n  },\n  render(args) {\n    return <div>\n      <button>aaaa</button>\n      <Button {...args}/>\n      <button>bbb</button>\n    </div>\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const btn = await canvas.getByRole('button', {\n      name: /光光光/i,\n    });\n    await userEvent.click(btn);\n\n    btn.textContext = '东';\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"比如我写了找到内容为光光光的 button，点击，然后把它的内容改为东。"}),"\n",(0,a.jsx)(n.p,{children:"组件渲染完就会自动执行 play 函数："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:J,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"当然，这个案例不大好，用表单来测试 play 功能会更好点："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:H,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"此外，你还可以在渲染组件之前请求数据，然后把数据传入 render 函数再渲染："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:X,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"\nexport const Guang: Story = {\n  args: {\n    label: '光光光',\n    size: 'large',\n    backgroundColor: 'green'\n  },\n  render(args, meta) {\n    const list = meta.loaded.list;\n\n    return <div>\n      <div>{list.join(',')}</div>\n      <Button {...args}/>\n    </div>\n  },\n  loaders: [\n    async () => {\n      await '假装 fetch'\n      return {\n        list: [\n          111,\n          222,\n          333\n        ]\n      }\n    },\n  ]\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"渲染出来是这样的："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:U,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"感受到 Storybook 的强大了么？"}),"\n",(0,a.jsx)(n.p,{children:"不只是自动生成组件文档这么简单，你可以定义不同的 Story，这些 Story 可以传入不同 props、可以请求数据、可以自定义渲染内容、还可以定义自动执行的脚本。"}),"\n",(0,a.jsx)(n.p,{children:"有同学会觉得，这个自动执行的 play 函数其实和测试脚本差不多。"}),"\n",(0,a.jsx)(n.p,{children:"确实，play 函数是可以当作测试脚本来用的。"}),"\n",(0,a.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install @storybook/jest\n"})}),"\n",(0,a.jsx)(n.p,{children:"使用 expect 来断言："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:Q,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:L,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"await expect(btn.textContent).toEqual('光光光');\n\nawait expect(btn.style.backgroundColor).toEqual('green');\n"})}),"\n",(0,a.jsx)(n.p,{children:"这样一打开组件会自动跑 play 函数，也就会自动执行断言："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:V,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"改下 expect，断言失败就是这样："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:I,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:q,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样，组件有没有通过测试用例，打开一看就知道了。"}),"\n",(0,a.jsx)(n.p,{children:"就很方便。"}),"\n",(0,a.jsx)(n.p,{children:"但是，组件多了的话，这样一个个点开看也挺麻烦的，这时候就可以用 cli 跑了："}),"\n",(0,a.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install @storybook/testing-library\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npx test-storybook\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:T,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"xx.stories.tsx 文件里除了 Story 外，还会导出 meta 信息："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:O,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这些都很简单，改一下就知道了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:z,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"title 是这个："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:P,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"paremeters 的 layout 是这个："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:M,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:G,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:R,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这里还可以配置背景色："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:F,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:N,alt:""})}),"\n",(0,a.jsxs)(n.p,{children:["然后 argTypes 是这个：\n",(0,a.jsx)("img",{src:D,alt:""})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:A,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:B,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:_,alt:""})}),"\n",(0,a.jsxs)(n.p,{children:["具体什么类型的参数用什么控件，可以用到的时候查一下",(0,a.jsx)(n.a,{href:"https://storybook.js.org/docs/essentials/controls#annotation",target:"_blank",rel:"noopener noreferrer",children:"文档"}),"。"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:E,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这些都是与 Story 无关的一些东西，所以放在 Meta 里。"}),"\n",(0,a.jsx)(n.p,{children:"此外，你还可以用 Storybook 写 MDX 文档。"}),"\n",(0,a.jsx)(n.p,{children:"mdx 是 markdown + jsx 的混合语法，用来写文档很不错。"}),"\n",(0,a.jsx)(n.p,{children:"在这个目录下的文档："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:C,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"都会被放到这里："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:v,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"我们加一个试试："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:S,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:k,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样，当你想在组件文档里加一些别的说明文档，就可以这样加。"}),"\n",(0,a.jsx)(n.p,{children:"而且，组件文档的格式也是可以自定义的。"}),"\n",(0,a.jsx)(n.p,{children:"可以在 .storybook 下的 preview.tsx 里配置这个："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:w,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:u,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:y,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:m,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"大概过了一遍 Storybook 的功能之后，我们把上节的 Calendar 组件拿过来试一下。"}),"\n",(0,a.jsx)(n.p,{children:"把那个项目的 Calendar 目录复制过来："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:f,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后在 stories 目录下添加一个 Calendar.stories.tsx"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import type { Meta, StoryObj } from '@storybook/react';\nimport Calendar from '../Calendar/index';\nimport dayjs from 'dayjs';\n\nconst meta = {\n    title: '日历组件',\n    component: Calendar,\n    parameters: {\n        layout: 'centered'\n    },\n    tags: ['autodocs']\n} satisfies Meta<typeof Calendar>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Value: Story = {\n    args: {\n        value: dayjs('2023-11-08')\n    },\n};\n\nexport const DateRender: Story = {\n    args: {\n        value: dayjs('2023-11-08'),\n        dateRender(currentDate) {\n            return <div>\n                日期{currentDate.date()}\n            </div>\n        }\n    },\n};\n\nexport const DateInnerContent: Story = {\n    args: {\n        value: dayjs('2023-11-08'),\n        dateInnerContent(currentDate) {\n            return <div>\n                日期{currentDate.date()}\n            </div>\n        }\n    },\n};\n\nexport const Locale: Story = {\n    args: {\n        value: dayjs('2023-11-08'),\n        locale: 'en-US'\n    },\n};\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"我们添加了 4 个 story。"}),"\n",(0,a.jsx)(n.p,{children:"安装用到的 dayjs、classnames 和 node-sass"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install --save classnames\n\nnpm install --save dayjs\n\nnpm install --save-dev node-sass\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后把 storybook 文档服务跑起来："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm run storybook\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:b,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:j,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"都没啥问题。"}),"\n",(0,a.jsx)(n.p,{children:"不过 value 的控件类型不对："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:x,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"但是现在我们要传入的是 dayjs 对象，就算是用了 date 的控件也不行。"}),"\n",(0,a.jsx)(n.p,{children:"先改成 date 类型试试："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"控件确实对了，但是修改日期点击刷新后，会报错："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"因为控件传入的是一个 date 的毫秒值。"}),"\n",(0,a.jsx)(n.p,{children:"那怎么办呢？"}),"\n",(0,a.jsx)(n.p,{children:"这时候就要把 story 改成 render 的方式了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"\nconst renderCalendar = (args: CalendarProps) => {\n    if(typeof args.value === 'number') {\n        return <Calendar {...args} value={dayjs(new Date(args.value))}/>\n    }\n\n    return <Calendar {...args}/>\n}\n\nexport const Value: Story = {\n    args: {\n        value: dayjs('2023-11-08')\n    },\n    render: renderCalendar\n};\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"再试试："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"现在就可以了。"}),"\n",(0,a.jsx)(n.p,{children:"我们基本每个项目都集成了 storybook："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"跑起来是这样的："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:t,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:r,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这些全是业务组件，可以看到业务组件不同参数时的展示和交互。"}),"\n",(0,a.jsx)(n.p,{children:"想想你维护一个业务项目，可以直接看到之前封装过哪些组件，是不是可以直接用。"}),"\n",(0,a.jsx)(n.p,{children:"就很方便，可以说是 react 项目必备。"}),"\n",(0,a.jsxs)(n.p,{children:["案例代码上传了",(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/sb-test",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,a.jsxs)(n.h2,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"写组件文档，我们一般都是用 Storybook。"}),"\n",(0,a.jsx)(n.p,{children:"它把不同 props 的渲染结果叫做一个 story，一个组件有多个 story。"}),"\n",(0,a.jsx)(n.p,{children:"story 可以通过 args 指定传入组件的参数，通过 loaders 请求数据，通过 render 函数自定义渲染内容、通过 play 指定自动执行的脚本等。"}),"\n",(0,a.jsx)(n.p,{children:"而且还可以渲染完组件直接跑测试用例，就很方便。"}),"\n",(0,a.jsx)(n.p,{children:"storybook 还会自动生成组件文档，而且也可以把项目里的 mdx 文件加到文档里。"}),"\n",(0,a.jsx)(n.p,{children:"用起来也很简单，首先 npx storybook init 初始化，之后执行 npm run storybook 就可以了。"}),"\n",(0,a.jsx)(n.p,{children:"总之，用 storybook 可以轻松的创建组件文档，可以写多个 story，直观的看到组件不同场景下的渲染结果，还可以用来做测试。"}),"\n",(0,a.jsx)(n.p,{children:"如果想给你的组件加上文档，storybook 基本是最好的选择。"})]})}function eh(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(eb,{...e})}):eb(e)}let eg=eh;eh.__RSPRESS_PAGE_META={},eh.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC10%E7%AB%A0%E2%80%94%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1Storybook.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第10章—快速掌握Storybook",headingTitle:"第10章—快速掌握Storybook",frontmatter:{}}}}]);