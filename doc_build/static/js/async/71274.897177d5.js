"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["71274"],{581188:function(e,n,s){s.r(n),s.d(n,{default:()=>S});var t=s(552676),r=s(740453);let i=s.p+"static/image/132771c5950aed460b70b89de712f61c.a255126c.gif",a=s.p+"static/image/df5ac81ed73bbbac9b786f4b102c6ea4.9c786f4c.gif",c=s.p+"static/image/c167a90812053e4373653e30d46d8fbe.4adc546a.gif",d=s.p+"static/image/fb85b8ce934853e3b1c249e662e0374d.2a842652.webp",h=s.p+"static/image/9b9beb0251a501c24e1c963e0460d390.0bf4560e.webp",o=s.p+"static/image/b18288e5f56db967599c3da0c6cb541e.0bf4560e.webp",l=s.p+"static/image/a3e9fb0e4a6157b4bfdfa8b16eb5e574.c789ae1b.webp",p=s.p+"static/image/0707979d44c049ca45540043b8f71ae0.2527b734.webp",x=s.p+"static/image/c72ac57483fac6beba0397a2efec745f.0c83b351.webp",u=s.p+"static/image/8d136267b18165bb3f426e31623ccdfc.aa223d3d.webp",j=s.p+"static/image/b955d13b72d137be425ed0e42da33301.1ec4f871.webp",g=s.p+"static/image/ed47a45ce2f1e4f181cc3bdf8963e93b.f6221172.webp",m=s.p+"static/image/1a500841fcae23a041cd3102f3300dbc.337ea1ca.webp",f=s.p+"static/image/a9c735476325c29d985979084556a4a5.56b8881b.webp",b=s.p+"static/image/6c9461592b582292e8554379bb18e8f1.7423772d.gif",v=s.p+"static/image/7981b4c9713d31cb742f22b3f38fd255.470e4992.webp",_=s.p+"static/image/970ee1dad8d1fe49c22e8e23be56c8b0.a888a957.webp",k=s.p+"static/image/635758b6798229436046236b533b5b67.7423772d.gif",N=s.p+"static/image/24f8cfa2bdd0629fcb2a8e9f46c0327a.8dcfed1e.webp";function A(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",blockquote:"blockquote",ul:"ul",li:"li",img:"img",code:"code",h3:"h3",pre:"pre",ol:"ol"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"44实战篇-_-react-notes-_-next-auth",children:["44.实战篇 _ React Notes _ next-auth",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#44实战篇-_-react-notes-_-next-auth",children:"#"})]}),"\n",(0,t.jsxs)(n.h2,{id:"前言",children:["前言",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本篇我们来讲解 Authentication。先介绍下 Authentication 相关的名词："}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Authentication"}),"："]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"身份验证（英语：Authentication）又称“认证”、“鉴权”，是指通过一定的手段，完成对用户身份的确认。"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Authorization"}),"："]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"授权（英语：Authorization）是指根据用户提供的身份凭证，生成权限实体，并为之授予相应的权限。"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"OAuth (Open Authorization)"}),"："]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"开放授权（OAuth）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。"}),"\n",(0,t.jsx)(n.p,{children:"OAuth 允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的网站（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"举个例子，你自己开发了一个图片网站，自己开发登陆注册功能，用户登录后展示该用户的私有图片，这是 Authentication。你使用第三方网站认证用户身份，比如谷歌登录，让第三方网站提供用户身份认证，这是“认证”服务，也是 Authentication。"}),"\n",(0,t.jsx)(n.p,{children:'而 OAuth 是第三方网站允许你直接操作它的用户数据，比如你接入谷歌相册，你不会知道用户的谷歌账号的密码，但谷歌会给你一个 token，这个 token 决定了你能拥有的权限，比如可以读取谷歌相册里的图片，同步到自己的网站中，这属于"授权"服务（Authorization）。'}),"\n",(0,t.jsx)(n.p,{children:"在 Next.js 项目中，主流的支持 App Router 的 Authentication 解决方案有："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://next-auth.js.org/configuration/nextjs#in-app-router",target:"_blank",rel:"noopener noreferrer",children:"NextAuth.js"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://clerk.com/docs/quickstarts/nextjs",target:"_blank",rel:"noopener noreferrer",children:"Clerk"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/auth0/nextjs-auth0#app-router",target:"_blank",rel:"noopener noreferrer",children:"Auth0"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://stytch.com/docs/example-apps/frontend/nextjs",target:"_blank",rel:"noopener noreferrer",children:"Stytch"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://kinde.com/docs/developer-tools/nextjs-sdk/",target:"_blank",rel:"noopener noreferrer",children:"Kinde"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["这是它们的 ",(0,t.jsx)(n.a,{href:"https://npmtrends.com/@auth0/nextjs-auth0-vs-@clerk/nextjs-vs-@stytch/nextjs-vs-next-auth",target:"_blank",rel:"noopener noreferrer",children:"npm trends"}),"："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:N,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["可以看出 ",(0,t.jsx)(n.code,{children:"next-auth"})," 目前是最多人的选择。"]}),"\n",(0,t.jsxs)(n.p,{children:["可能会有一些同学提到 ",(0,t.jsx)(n.a,{href:"https://supabase.com/",target:"_blank",rel:"noopener noreferrer",children:"Supabase"}),"，Supabase 是一个开源的后端即服务（BaaS）平台，它提供了数据库、身份验证、实时数据和文件存储等功能。它可以搭配 NextAuth.js、Clerk 等使用。"]}),"\n",(0,t.jsxs)(n.h2,{id:"需求",children:["需求",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#需求",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"我们来实现这样一个需求："}),"\n",(0,t.jsx)(n.p,{children:"接入 GitHub 第三方登录。页面顶部出现登录和退出登录选项，点击登录的时候，跳转 GitHub 授权登录，登录完成后显示用户名和退出登录选项，点击退出登录即退出登录。效果图如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:k,alt:"ReactNotes-Auth5.gif"})}),"\n",(0,t.jsxs)(n.h2,{id:"next-auth",children:["next-auth",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#next-auth",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["借助 ",(0,t.jsx)(n.code,{children:"next-auth"}),"，其实代码一点也不复杂，让我们来实现吧！"]}),"\n",(0,t.jsxs)(n.h3,{id:"1-github-申请-oauth-应用",children:["1. GitHub 申请 OAuth 应用",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-github-申请-oauth-应用",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在 GitHub 申请 ",(0,t.jsx)(n.a,{href:"https://github.com/settings/applications/new",target:"_blank",rel:"noopener noreferrer",children:"OAuth 应用"}),"："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:_,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["因为目前在本地开发，所以 Homepage URL 填写 ",(0,t.jsx)(n.code,{children:"http://localhost:3000"}),"。",(0,t.jsx)(n.code,{children:"Authorization callback URL"}),"填写 ",(0,t.jsx)(n.code,{children:"http://localhost:3000/api/auth/callback/github"}),"，具体它的处理逻辑会由 ",(0,t.jsx)(n.code,{children:"next-auth"})," 来实现。"]}),"\n",(0,t.jsxs)(n.p,{children:["新建后，点击 ",(0,t.jsx)(n.code,{children:"Generate a new client secret"}),"按钮，生成 ",(0,t.jsx)(n.code,{children:"Client secret"}),"，注意生成的时候， ",(0,t.jsx)(n.code,{children:"Client secret"}),"只能看到一次，所以需要及时保存下来，刷新了页面就查不到了。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h3,{id:"2-设置环境变量",children:["2. 设置环境变量",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-设置环境变量",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["获取到 GitHub Client ID 和 GitHub secrets 后，为了防止信息泄露，将其放入到环境变量中。详细信息参考 《",(0,t.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309078454316564507",target:"_blank",rel:"noopener noreferrer",children:"配置篇 | 环境变量、路径别名与 src 目录》"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["现在我们在",(0,t.jsx)(n.strong,{children:"项目根目录"}),"下建立一个 ",(0,t.jsx)(n.code,{children:".env"})," 文件："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"AUTH_GITHUB_ID=aac6f92981918fc75c31\nAUTH_GITHUB_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxx\nAUTH_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"})}),"\n",(0,t.jsxs)(n.p,{children:["注意这里的环境变量名，在 ",(0,t.jsx)(n.code,{children:"next-auth"})," v4 中可以自定义，v5 改为自动推断的方式，所以约定就是使用这些名字，具体参考 ",(0,t.jsx)(n.a,{href:"https://authjs.dev/reference/nextjs#environment-variable-inferrence",target:"_blank",rel:"noopener noreferrer",children:"next-auth v5 文档"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["其中 ",(0,t.jsx)(n.code,{children:"AUTH_SECRET"})," 是一个随机字符串，用于加密 tokens 和邮件验证哈希值，保证安全性。你可以执行：",(0,t.jsx)(n.code,{children:"openssl rand -base64 32"})," 或者打开 ",(0,t.jsx)(n.a,{href:"https://generate-secret.vercel.app/32",target:"_blank",rel:"noopener noreferrer",children:"https://generate-secret.vercel.app/32"})," 获取一个随机值。"]}),"\n",(0,t.jsxs)(n.h3,{id:"3-添加-api-路由",children:["3. 添加 API 路由",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-添加-api-路由",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["安装 ",(0,t.jsx)(n.code,{children:"next-auth"}),"："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install next-auth@beta\n"})}),"\n",(0,t.jsxs)(n.p,{children:["注意这里安装的是 ",(0,t.jsx)(n.code,{children:"next-auth@beta"}),"，也就是目前正在处于 beta 阶段的 ",(0,t.jsx)(n.code,{children:"next-auth"}),"v5，我写的时候用的具体版本是 ",(0,t.jsx)(n.code,{children:"5.0.0-beta.4"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["根目录下新建 ",(0,t.jsx)(n.code,{children:"auth.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import NextAuth from "next-auth"\nimport GitHub from "next-auth/providers/github"\nexport const { handlers, auth, signIn, signOut } = NextAuth({ providers: [ GitHub ] })\n'})}),"\n",(0,t.jsxs)(n.p,{children:["为了方便导入，修改 ",(0,t.jsx)(n.code,{children:"jsconfig.json"}),"："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "@/actions": ["app/actions.js"],\n      "@/*": ["/*"],\n      "auth": ["./auth"]\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"/app/api/auth/[...nextauth]/route.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { handlers } from "auth"\nexport const { GET, POST } = handlers\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"4-服务端组件获取--session",children:["4. 服务端组件获取  session",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-服务端组件获取--session",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在 ",(0,t.jsx)(n.code,{children:"app/layout.js"}),"中引入一个 ",(0,t.jsx)(n.code,{children:"<Header>"})," 组件："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import \'./style.css\'\nimport Sidebar from \'@/components/Sidebar\'\nimport Header from \'@/components/Header\'\n\nexport default async function RootLayout({\n  children\n}) {\n\n  return (\n    <html lang="en">\n      <body>\n        <div className="container">\n          <Header />\n          <div className="main">\n            <Sidebar />\n            <section className="col note-viewer">{children}</section>\n          </div>\n        </div>\n      </body>\n    </html>\n  )\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"components/Header.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'import { signIn, signOut, auth } from "auth"\n\nfunction SignIn({\n  provider,\n  ...props\n}) {\n  return (\n    <form\n      action={async () => {\n        "use server"\n        await signIn(provider)\n      }}\n    >\n      <button {...props}>Sign In</button>\n    </form>\n  )\n}\n\nfunction SignOut(props) {\n  return (\n    <form\n      action={async () => {\n        "use server"\n        await signOut()\n      }}\n    >\n      <button {...props}>\n        Sign Out\n      </button>\n    </form>\n  )\n}\n\nexport default async function Header() {\n  const session = await auth()\n  return (\n    <header style={{ display: "flex", "justifyContent": "space-around" }}>\n      {\n        session?.user\n          ? <span style={{ display: "flex", "alignItems": "center" }}>{session?.user.name}<SignOut /></span>\n          : <SignIn />\n      }\n    </header>\n  )\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"现在 GitHub 登陆授权就已经实现了，效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:"ReactNotes-Auth5.gif"})}),"\n",(0,t.jsx)(n.p,{children:"如果登陆的时候报如下错误："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"可能是因为网络原因，把代理设置为全局模式试试。"}),"\n",(0,t.jsxs)(n.h3,{id:"5-原理解析",children:["5. 原理解析",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-原理解析",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["你可能会惊讶，三方登录这么简单的吗？其实还是稍微有点复杂的，只是 ",(0,t.jsx)(n.code,{children:"next-auth"})," 都替你做好了而已。"]}),"\n",(0,t.jsxs)(n.p,{children:["当你创建了 ",(0,t.jsx)(n.code,{children:"/app/api/auth/[...nextauth]/route.js"}),"时，以下这些路由就都由 next-auth 创建并处理了："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"GET/api/auth/signin"}),"\n",(0,t.jsx)(n.li,{children:"POST/api/auth/signin/:provider"}),"\n",(0,t.jsx)(n.li,{children:"GET/POST/api/auth/callback/:provider"}),"\n",(0,t.jsx)(n.li,{children:"GET/api/auth/signout"}),"\n",(0,t.jsx)(n.li,{children:"POST/api/auth/signout"}),"\n",(0,t.jsx)(n.li,{children:"GET/api/auth/session"}),"\n",(0,t.jsx)(n.li,{children:"GET/api/auth/csrf"}),"\n",(0,t.jsx)(n.li,{children:"GET/api/auth/providers"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"这些路由有的处理登录，有的是处理退出登录，有的是处理三方登录回调……有的路由你可以直接在浏览器中访问："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["当用户点击 ",(0,t.jsx)(n.code,{children:"SignIn"})," 按钮的时候，跳转到 ",(0,t.jsx)(n.code,{children:"locahost:3000/api/auth/signin"}),"："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"这个页面根据你提供的 providers 选项而生成，在这里我们只配置了 GitHub 登陆，所以显得有点简陋。但如果配置齐全的话，效果可以如下（当然具体样式也支持自定义，详细请参考文档）："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["这里我们以 GitHub 的 OAuth 为例，当我们点击 ",(0,t.jsx)(n.code,{children:"Sign in with Github"}),"，查看对应的元素："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:"截屏2024-01-04 下午8.49.35.png"})}),"\n",(0,t.jsxs)(n.p,{children:["你会发现这是一个表单提交，提交地址为 ",(0,t.jsx)(n.code,{children:"http://localhost:3000/api/auth/signin/github"}),"，请求方法为 POST，",(0,t.jsx)(n.code,{children:"next-auth"})," 会根据 ",(0,t.jsx)(n.code,{children:"auth.js"})," 提供的选项计算 GitHub 登陆所需的值如 ",(0,t.jsx)(n.code,{children:"client_id"}),"（AUTH_GITHUB_ID）、scopes（权限范围） 等，然后拼接跳转到 ",(0,t.jsx)(n.code,{children:"https://github.com/login"}),"，也就是我们登录 GitHub 的页面："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"此时的地址为："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"https://github.com/login?client_id=aac6f92981918fc75c31&return_to=%2Flogin%2Foauth%2Fauthorize%3Fclient_id%3Daac6f92981918fc75c31%26code_challenge%3DVTZmNV47SyxgplMwziDvW0kgxNwV3WsJPnlr6yf7TDI%26code_challenge_method%3DS256%26redirect_uri%3Dhttp%253A%252F%252Flocalhost%253A3000%252Fapi%252Fauth%252Fcallback%252Fgithub%26response_type%3Dcode%26scope%3Dread%253Auser%2Buser%253Aemail\n"})}),"\n",(0,t.jsx)(n.p,{children:"我们解码一下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"https://github.com/login?\nclient_id=aac6f92981918fc75c31\n&return_to=/login/oauth/authorize?client_id=aac6f92981918fc75c31\n&code_challenge=VTZmNV47SyxgplMwziDvW0kgxNwV3WsJPnlr6yf7TDI\n&code_challenge_method=S256\n&redirect_uri=http://localhost:3000/api/auth/callback/github&response_type=code&scope=read:user user:email\n"})}),"\n",(0,t.jsxs)(n.p,{children:["当我们填写密码登录后，会跳转到",(0,t.jsx)(n.code,{children:"github.com/login/oauth/authorize"}),"上："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["当我们在 GitHub 完成授权后，GitHub 会重定向到我们之前在 OAuth App 中设置的",(0,t.jsx)(n.code,{children:"Authorization callback URL"}),"也就是 ",(0,t.jsx)(n.code,{children:"http://localhost:3000/api/auth/callback/github"}),"，其中网址参数中会包含临时 code。临时 code 会在 10 分钟后过期。"]}),"\n",(0,t.jsxs)(n.p,{children:["在 ",(0,t.jsx)(n.code,{children:"http://localhost:3000/api/auth/callback/github"}),"这个路由下，next-auth 会获取临时 code，POST 请求 ",(0,t.jsx)(n.code,{children:"https://github.com/login/oauth/access_token"}),"获取 ",(0,t.jsx)(n.code,{children:"access_token"}),"，用此 token 可以获取用户信息，next-auth 会生成 session token 并且存储 session。"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["这一切本来需要由开发者自己开发，但借助 ",(0,t.jsx)(n.code,{children:"next-auth"}),"，几乎不用写多少代码就全部实现了。"]}),"\n",(0,t.jsxs)(n.h3,{id:"6-客户端组件获取--session",children:["6. 客户端组件获取  session",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-客户端组件获取--session",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["现在让我们回归到 ",(0,t.jsx)(n.code,{children:"next-auth"})," 的具体用法，如果是客户端组件需要获取 session 数据，该怎么实现呢？"]}),"\n",(0,t.jsxs)(n.p,{children:["为了演示用法，我们新建一个 ",(0,t.jsx)(n.code,{children:"/client"}),"路由，并在 ",(0,t.jsx)(n.code,{children:"<Header>"})," 组件中添加链接，效果如下："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"components/Header.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { signIn, signOut } from "auth"\nimport { auth } from "auth"\nimport Link from \'next/link\'\n\nfunction SignIn({\n  provider,\n  ...props\n}) {\n  return (\n    <form\n      action={async () => {\n        "use server"\n        await signIn(provider)\n      }}\n    >\n      <button {...props}>Sign In</button>\n    </form>\n  )\n}\n\nfunction SignOut(props) {\n  return (\n    <form\n      action={async () => {\n        "use server"\n        await signOut()\n      }}\n    >\n      <button {...props}>\n        Sign Out\n      </button>\n    </form>\n  )\n}\n\nexport default async function Header() {\n  const session = await auth()\n  return (\n    <header style={{display: "flex", "justifyContent": "space-around"}}>\n        <Link href="/client">Client Side Component</Link>\n        {\n          !session?.user ? <SignIn /> : <span style={{display: "flex", "alignItems": "center"}}>{session?.user.name}   <SignOut /></span>\n        }\n    </header>\n  )\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"此时页面样式如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"app/client/page.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { auth } from "auth"\nimport ClientComponent from "@/components/ClientComponent"\nimport { SessionProvider } from "next-auth/react"\n\nexport default async function ClientPage() {\n  const session = await auth()\n  if (session?.user) {\n    // 选择需要的信息传给客户端，避免敏感信息泄露\n    session.user = {\n      name: session.user.name,\n      email: session.user.email,\n      image: session.user.image,\n    }\n  }\n\n  return (\n    <SessionProvider session={session}>\n      <ClientComponent />\n    </SessionProvider>\n  )\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"components/ClientComponent.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'"use client"\n\nimport { useSession } from "next-auth/react"\n\nexport default function ClientExample() {\n  const { data: session, status } = useSession()\n  return (\n    <div>\n      {status === "loading" ? (\n        <div>Loading...</div>\n      ) : <pre>{JSON.stringify(session, null, 2)}</pre>}\n    </div>\n  )\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"此时效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h3,{id:"7-保护部分页面",children:["7. 保护部分页面",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-保护部分页面",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"如果部分页面需要登录状态才能访问该怎么办呢？比如这个笔记系统谁都可以查看，但要想编辑，就需要先登录，该怎么实现呢？"}),"\n",(0,t.jsxs)(n.p,{children:["你可以使用中间件，新建 ",(0,t.jsx)(n.code,{children:"middleware.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'export { auth as middleware } from "auth"\n\nexport const config = {\n  matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["核心的判断逻辑在 ",(0,t.jsx)(n.code,{children:"auth.js"}),"中，使用 ",(0,t.jsx)(n.a,{href:"https://authjs.dev/reference/nextjs#authorized",target:"_blank",rel:"noopener noreferrer",children:"callbacks.authorized"})," 回调函数："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import NextAuth from "next-auth"\nimport GitHub from "next-auth/providers/github"\nexport const { handlers, auth, signIn, signOut } = NextAuth({ providers: [ GitHub ],\n  callbacks: {\n    authorized({ request, auth }) {\n      const { pathname } = request.nextUrl\n      if (pathname.startsWith("/note/edit")) return !!auth\n      return true\n    },\n  }\n})\n'})}),"\n",(0,t.jsxs)(n.p,{children:["在中间件中，我们判断路由地址，如果以 ",(0,t.jsx)(n.code,{children:"/note/edit"})," 开头，就判断 auth 是否存在，如果返回 true，则正常跳转，如果返回 false，则自动会重定向到登录页面，效果如下："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:"ReactNotes-Auth6.gif"})}),"\n",(0,t.jsxs)(n.p,{children:["如果不通过中间件，也可以直接在页面或组件中进行判断。比如如果是服务端组件，可以像现在的例子中那样，通过对 ",(0,t.jsx)(n.code,{children:"auth()"}),"返回的 session 进行判断，根据 ",(0,t.jsx)(n.code,{children:"session.user"})," 是否存在来区分登录和未登录状态。如果是在客户端组件，可以通过 ",(0,t.jsx)(n.code,{children:"useSession()"})," 返回的 ",(0,t.jsx)(n.code,{children:"status"})," 来判断，比如修改 ",(0,t.jsx)(n.code,{children:"components/Header.js"}),"代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'"use client"\n\nimport { useSession } from "next-auth/react"\n\nexport default function Page() {\n  const { data: session, status } = useSession()\n\n  if (status === "loading") {\n    return <p>Loading...</p>\n  }\n\n  if (status === "unauthenticated") {\n    return <p>Access Denied</p>\n  }\n\n  return (\n    <pre>{JSON.stringify(session, null, 2)}</pre>\n  )\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"8-自定义登陆逻辑",children:["8. 自定义登陆逻辑",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-自定义登陆逻辑",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["现在我不想要三方登录，我想要自己实现登陆页面行不行，",(0,t.jsx)(n.code,{children:"next-auth"})," 也可以帮助你实现！这就是 ",(0,t.jsx)(n.a,{href:"https://authjs.dev/guides/providers/credentials",target:"_blank",rel:"noopener noreferrer",children:"Credentials Provider"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["为了模拟用户注册和登录，我们在 ",(0,t.jsx)(n.code,{children:"lib/redis.js"})," 中新增一个 ",(0,t.jsx)(n.code,{children:"addUser"})," 和 ",(0,t.jsx)(n.code,{children:"getUser"})," 方法："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'export async function addUser(username, password) {\n  await redis.hset("users", [username], password);\n  return {\n    name: username,\n    username\n  }\n}\n\nexport async function getUser(username, password) {\n  const passwordFromDB = await redis.hget("users", username);\n  if (!passwordFromDB) return 0;\n  if (passwordFromDB !== password) return 1\n  return {\n    name: username,\n    username\n  } \n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["现在修改 ",(0,t.jsx)(n.code,{children:"auth.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import NextAuth from "next-auth"\nimport GitHub from "next-auth/providers/github"\nimport CredentialsProvider from "next-auth/providers/credentials";\nimport { addUser, getUser } from "@/lib/redis";\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers:\n    [CredentialsProvider({\n      // 显示按钮文案 (e.g. "Sign in with...")\n      name: "密码登录",\n      // `credentials` 用于渲染登录页面表单\n      credentials: {\n        username: { label: "邮箱", type: "text", placeholder: "输入您的邮箱" },\n        password: { label: "密码", type: "password", placeholder: "输入您的密码" }\n      },\n      // 处理从用户收到的认证信息\n      async authorize(credentials, req) {\n        // 默认情况下不对用户输入进行验证，确保使用 Zod 这样的库进行验证\n        let user = null\n\n        // 登陆信息验证\n        user = await getUser(credentials.username, credentials.password)\n\n        // 密码错误\n        if (user === 1) return null\n\n        // 用户注册\n        if (user === 0) {\n          user = await addUser(credentials.username, credentials.password)\n        }\n\n        if (!user) {\n          throw new Error("User was not found and could not be created.")\n        }\n\n        return user\n      }\n    }), GitHub],\n  callbacks: {\n    authorized({ request, auth }) {\n      const { pathname } = request.nextUrl\n      if (pathname.startsWith("/note/edit")) return !!auth\n      return true\n    },\n  }\n})\n'})}),"\n",(0,t.jsx)(n.p,{children:"此时效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:"ReactNotes-Auth7.gif"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"next-auth"})," 根据我们传入的 ",(0,t.jsx)(n.code,{children:"credentials"})," 选项渲染登录页面，并且使用 ",(0,t.jsx)(n.code,{children:"authorize"})," 函数处理登录逻辑。在这个例子中，如果用户不存在，就注册一个用户，如果用户名不正确，则提示错误。"]}),"\n",(0,t.jsxs)(n.p,{children:["注意：写这个例子的时候要删除 ",(0,t.jsx)(n.code,{children:"middleware.js"}),"，这是因为我们在代码中使用了 ioredis，ioredis 需要运行在 Nodejs Runtime，而 next.js 的 middleware 目前只能运行在 Edge Runtime。"]}),"\n",(0,t.jsxs)(n.h3,{id:"9-自定义登陆页面",children:["9. 自定义登陆页面",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9-自定义登陆页面",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["如果项目用在国外，都是英文倒也可以接受，但如果用在国内，这种“Sign in With 密码登录”的文案可真让人想吐槽，我如果要完全自定义登陆页面呢？next-auth 提供了 ",(0,t.jsx)(n.a,{href:"https://authjs.dev/guides/basics/pages",target:"_blank",rel:"noopener noreferrer",children:"pages 选项"}),"，修改 ",(0,t.jsx)(n.code,{children:"auth.js"}),"："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import NextAuth from "next-auth"\nimport GitHub from "next-auth/providers/github"\nimport CredentialsProvider from "next-auth/providers/credentials";\nimport { addUser, getUser } from "@/lib/redis";\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers:\n    [// ...],\n  pages: {\n    signIn: \'/auth/signin\'\n  },\n  callbacks: {\n    authorized({ request, auth }) {\n      const { pathname } = request.nextUrl\n      if (pathname.startsWith("/note/edit")) return !!auth\n      return true\n    },\n  }\n})\n'})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"app/auth/signin/page.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'\'use client\'\n\nexport default async function SignIn() {\n  const response = await fetch(\'http://localhost:3000/api/auth/csrf\');\n  const {csrfToken} = await response.json()\n  return (\n    <form method="post" action="/api/auth/callback/credentials">\n      <input type="hidden" name="csrfToken" value={csrfToken} />\n      <label>\n        Username\n        <input name="username" type="text" />\n      </label>\n      <label>\n        Password\n        <input name="password" type="password" />\n      </label>\n      <button type="submit">Sign in</button>\n    </form>\n  )\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"此时效果如下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:"ReactNotes-Auth8.gif"})}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"那么今天的内容就结束了，本篇实现了 GitHub 授权登录和自定义登陆功能。这里用的是正处于 beta 阶段的 next-auth v5，v5 目前还有一些问题没有解决，文档也略显草率。实际项目开发的时候，还是推荐使用稳定版本的 v4。此外，Clerk 和 Supabase 也都是不错的选择，推荐使用。"}),"\n",(0,t.jsxs)(n.p,{children:["本篇的代码我已经上传到",(0,t.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/main",target:"_blank",rel:"noopener noreferrer",children:"代码仓库"}),"的 ",(0,t.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/day8",target:"_blank",rel:"noopener noreferrer",children:"Day 8"})," 分支。直接使用的时候不要忘记在本地开启 Redis。"]}),"\n",(0,t.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://authjs.dev/getting-started/providers/oauth-tutorial",target:"_blank",rel:"noopener noreferrer",children:"OAuth authentication | Auth.js"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.github.com/zh/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps",target:"_blank",rel:"noopener noreferrer",children:"https://docs.github.com/zh/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps"})}),"\n"]})]})}function w(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(A,{...e})}):A(e)}let S=w;w.__RSPRESS_PAGE_META={},w.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F44.%E5%AE%9E%E6%88%98%E7%AF%87%20_%20React%20Notes%20_%20next-auth.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"需求",id:"需求",depth:2},{text:"next-auth",id:"next-auth",depth:2},{text:"1. GitHub 申请 OAuth 应用",id:"1-github-申请-oauth-应用",depth:3},{text:"2. 设置环境变量",id:"2-设置环境变量",depth:3},{text:"3. 添加 API 路由",id:"3-添加-api-路由",depth:3},{text:"4. 服务端组件获取  session",id:"4-服务端组件获取--session",depth:3},{text:"5. 原理解析",id:"5-原理解析",depth:3},{text:"6. 客户端组件获取  session",id:"6-客户端组件获取--session",depth:3},{text:"7. 保护部分页面",id:"7-保护部分页面",depth:3},{text:"8. 自定义登陆逻辑",id:"8-自定义登陆逻辑",depth:3},{text:"9. 自定义登陆页面",id:"9-自定义登陆页面",depth:3},{text:"总结",id:"总结",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"44.实战篇 _ React Notes _ next-auth",headingTitle:"44.实战篇 _ React Notes _ next-auth",frontmatter:{}}}}]);