"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["29346"],{599842:function(n,e,r){r.r(e),r.d(e,{default:()=>a});var s=r(552676),o=r(740453);let l=r.p+"static/image/04e7eb231623704fef9056a565a93764.88c78d18.webp",i=r.p+"static/image/65058824c77a20022ef3f46bc6dd6818.cef062f9.webp",t=r.p+"static/image/fb3324056c3755010439d11cf1441dac.fffd20e6.webp";function c(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",strong:"strong",pre:"pre",ul:"ul",li:"li",blockquote:"blockquote"},(0,o.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"21定制篇-自定义-electron-原生应用菜单",children:["21.定制篇-自定义 Electron 原生应用菜单",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#21定制篇-自定义-electron-原生应用菜单",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"前言",children:["前言",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"本章节主要实现自定义原生应用菜单，如果你对本章节内容兴趣不大，可以快速阅读或跳过。"}),"\n",(0,s.jsxs)(e.h2,{id:"默认行为",children:["默认行为",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#默认行为",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["我们在打开应用程序时，通常在左上角看到一些菜单项，以 ",(0,s.jsx)(e.code,{children:"VSCode"})," 为例，下面是它的菜单项"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:"f6d564fd-d04e-4383-ae03-05ae70d64b65.jpg"})}),"\n",(0,s.jsx)(e.p,{children:"再看看我们的简历平台，也存在一系列的菜单项"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:"a077a533-264e-4af1-9014-6d2151c45788.jpg"})}),"\n",(0,s.jsxs)(e.p,{children:["可能有小伙伴就会问了，我都没写过这玩意，这哪来的呢？实际上，如果应用没有设置菜单的话，系统会生成一个默认菜单。 默认生成的菜单中包含了一些初始选项，例如 \xa0",(0,s.jsx)(e.code,{children:"文件"}),",",(0,s.jsx)(e.code,{children:"编辑"}),",\xa0",(0,s.jsx)(e.code,{children:"视图"}),",",(0,s.jsx)(e.code,{children:"窗口"}),",",(0,s.jsx)(e.code,{children:"帮助"}),"。你可以参考这个 ",(0,s.jsx)(e.a,{href:"https://github.com/carter-thaxton/electron-default-menu/blob/master/index.js",target:"_blank",rel:"noopener noreferrer",children:"electron-default-menu"})]}),"\n",(0,s.jsxs)(e.p,{children:["默认菜单项肯定是难以满足我们的需求，",(0,s.jsx)(e.strong,{children:"我们总会有一些奇奇怪怪的想法"}),"，接下来，让我们自定义菜单行为，实现定制化的功能。"]}),"\n",(0,s.jsxs)(e.h2,{id:"通过例子看实现",children:["通过例子看实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#通过例子看实现",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["小伙伴们可以先去官方文档查看一下",(0,s.jsx)(e.a,{href:"https://www.electronjs.org/docs/api/menu",target:"_blank",rel:"noopener noreferrer",children:"Menu"}),"、",(0,s.jsx)(e.a,{href:"https://www.electronjs.org/docs/api/menu-item",target:"_blank",rel:"noopener noreferrer",children:"MenuItem"}),"相关的信息。接下来通过一个简单的例子，帮助大家了解一下 Elector 中的菜单栏～"]}),"\n",(0,s.jsxs)(e.p,{children:["我们在 ",(0,s.jsx)(e.code,{children:"app/main"})," 文件夹下，新增",(0,s.jsx)(e.code,{children:"customMenu.ts"}),"文件，顾名思义，这是我们自定义的菜单"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// app/main/customMenu.ts\n\nimport { dialog, MenuItemConstructorOptions, MenuItem } from 'electron';\n\nconst customMenu: (MenuItemConstructorOptions | MenuItem)[] = [\n  {\n    label: '我是简历平台自定义菜单栏',\n    role: 'help',\n    submenu: [\n      {\n        label: '关于',\n        click: function () {\n          dialog.showMessageBox({\n            type: 'question',\n            title: '提问环节',\n            message: '谁最帅 ?',\n            detail: '彭于晏广州分晏，不接受反驳',\n          });\n        },\n      },\n    ],\n  },\n  {\n    label: '自定义的编辑菜单栏',\n    submenu: [\n      {\n        label: '复制',\n        accelerator: 'CmdOrCtrl+C',\n        role: 'copy',\n      },\n      {\n        label: '粘贴',\n        accelerator: 'CmdOrCtrl+V',\n        role: 'paste',\n      },\n    ],\n  },\n];\n\nexport default customMenu;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["接着在主进程中引入 ",(0,s.jsx)(e.code,{children:"customMenu"})," 文件"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// app/main/electron.ts\nimport { app, Menu } from 'electron';\nimport customMenu from './customMenu';\n\napp.on('ready', () => {\n  // ...\n  const menu = Menu.buildFromTemplate(customMenu);\n  Menu.setApplicationMenu(menu);\n});\n"})}),"\n",(0,s.jsxs)(e.p,{children:["重新运行一下 ",(0,s.jsx)(e.code,{children:"npm run start:main"}),"，然后看看左上角的菜单栏是否发生了改变。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:"a7203f97-5bb0-4da3-b869-86f7e273e5ca.jpg"})}),"\n",(0,s.jsx)(e.p,{children:"与我们预期一致，让我们看看自定义菜单栏是如何实现的。"}),"\n",(0,s.jsxs)(e.p,{children:["首先，我们的 Menu 菜单栏是在",(0,s.jsx)(e.strong,{children:"主进程"}),"中执行，Menu 提供了一个静态方法 ",(0,s.jsx)(e.code,{children:"buildFromTemplate"}),"，通过该方法，我们可以构建菜单栏。该方法的入参是一个 ",(0,s.jsx)(e.code,{children:"MenuItemConstructorOptions"})," 类型的数组，用于构建 ",(0,s.jsx)(e.code,{children:"MenuItem"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["每一条 ",(0,s.jsx)(e.code,{children:"MenuItem"})," 的属性有很多，这边就不一一列举，感兴趣的小伙伴",(0,s.jsx)(e.a,{href:"https://www.electronjs.org/docs/api/menu-item#new-menuitemoptions",target:"_blank",rel:"noopener noreferrer",children:"可点击这里"}),"进行详细查看。"]}),"\n",(0,s.jsx)(e.p,{children:"以上面例子的代码进行讲解，我们主要看几个属性："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"label 标签名"}),"\n",(0,s.jsx)(e.li,{children:"submenu 子菜单"}),"\n",(0,s.jsxs)(e.li,{children:["role 菜单项的角色，",(0,s.jsx)(e.a,{href:"https://www.electronjs.org/docs/api/menu-item#menuitemrole",target:"_blank",rel:"noopener noreferrer",children:"点击这里看具体值"})]}),"\n",(0,s.jsx)(e.li,{children:"accelerator 快捷键事件"}),"\n",(0,s.jsx)(e.li,{children:"click 点击事件"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"下面以其中一个菜单项进行讲解，关键在注释！！！"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"const customMenu: (MenuItemConstructorOptions | MenuItem)[] = [\n  {\n    // 1. 一级菜单栏标签名称\n    label: '我是简历平台自定义菜单栏',\n    role: 'help',\n    // 2. 该菜单栏下存在子菜单\n    submenu: [\n      {\n        // 2.1 二级菜单栏标签名称\n        label: '关于',\n        // 2.2 该菜单的点击事件\n        click: function () {\n          dialog.showMessageBox({\n            type: 'question',\n            title: '提问环节',\n            message: '谁最帅 ?',\n            detail: '彭于晏广州分晏，不接受反驳',\n          });\n        },\n        // 2.3 快捷键事件（我这边并为为此菜单注册快捷键事件）\n        // accelerator: '',\n      },\n    ],\n  },\n];\n"})}),"\n",(0,s.jsx)(e.p,{children:"了解菜单栏的组成属性之后，编写自定义菜单不再是难事！"}),"\n",(0,s.jsxs)(e.h2,{id:"快捷键事件",children:["快捷键事件",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#快捷键事件",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"也许有小伙伴发懵了，怎么讲菜单栏，一下子就跳到快捷键了？其实上面对于菜单栏的相关基础内容已经讲解完毕，不过既然说到了快捷键事件，那就顺道过一下相关内容吧～"}),"\n",(0,s.jsxs)(e.p,{children:["Electron 可通过 ",(0,s.jsx)(e.a,{href:"https://www.electronjs.org/docs/latest/api/global-shortcut/",target:"_blank",rel:"noopener noreferrer",children:"globalShortcut"})," 模块进行快捷键事件的自定义。比如常用的复制功能，不会真有人傻乎乎的选中一段文本，再鼠标右键，找到复制选项，进行文本复制吧？",(0,s.jsx)(e.code,{children:"Ctrl + C"})," 不香吗？"]}),"\n",(0,s.jsxs)(e.p,{children:["当然了，系统默认给我们注册了一些快捷键事件，不过默认的快捷键事件肯定是难以满足我们的需求，",(0,s.jsx)(e.strong,{children:"我们总会有一些奇奇怪怪的想法"}),"，下面给个小例子，看看如何自定义快捷键事件"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { app, globalShortcut } from 'electron';\n\napp.whenReady().then(() => {\n  // 注册一个快捷键\n  const customCut = globalShortcut.register('CommandOrControl+T', () => {\n    console.log('牛逼Plus');\n  });\n\n  if (!customCut) {\n    console.log('凉了，注册失败');\n  }\n\n  // 检测该快捷键是否被注册\n  console.log(globalShortcut.isRegistered('CommandOrControl+T'));\n});\n\napp.on('will-quit', () => {\n  // 注销快捷键事件\n  globalShortcut.unregister('CommandOrControl+T');\n});\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["这里的 ",(0,s.jsx)(e.code,{children:"CommandOrControl"})," 是因为在 Window 和 Mac 上存在一些差异。"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["重新跑一下 ",(0,s.jsx)(e.code,{children:"npm run start:main"}),"，此时我们在主应用窗口中，摁下 ",(0,s.jsx)(e.code,{children:"command+T"}),"(mac) 或者 ",(0,s.jsx)(e.code,{children:"control+T"}),"(window)，然后在主进程窗口中，看看终端是否会输出 ",(0,s.jsx)(e.code,{children:"牛逼Plus"})," 呢？"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"留个作业，我想通过快捷键的方式显示应用设置窗口，代码该如何写呢？动动你的小奶袋瓜"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"自定义简历菜单栏",children:["自定义简历菜单栏",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义简历菜单栏",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"虽然上面我们实现了简单的自定义菜单栏，但实际上，这会把默认的菜单项给舍弃，以上面的 demo 为示例，你会发现，在应用中无法复制，无法粘贴，这是为什么呢？原因在于我们的菜单栏没有了这些默认菜单事件。我们肯定不会干这么愚蠢的事。"}),"\n",(0,s.jsxs)(e.p,{children:["官方提到，如果应用没有设置菜单的话，系统会生成一个默认菜单。 默认生成的菜单中包含了一些初始选项，我们先把这些初始选项拷贝出来，你可以参考这个 ",(0,s.jsx)(e.a,{href:"https://github.com/carter-thaxton/electron-default-menu/blob/master/index.js",target:"_blank",rel:"noopener noreferrer",children:"electron-default-menu"})]}),"\n",(0,s.jsxs)(e.p,{children:["修改 ",(0,s.jsx)(e.code,{children:"app/main/customMenu.ts"})," 文件"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import _ from 'lodash';\nimport { MyBrowserWindow } from './electron';\nimport {\n  MenuItemConstructorOptions,\n  shell,\n  app,\n  MenuItem,\n  BrowserWindow,\n} from 'electron';\n\nconst customMenu: (MenuItemConstructorOptions | MenuItem)[] = [\n  {\n    label: '平台',\n    role: 'help',\n    submenu: [\n      {\n        label: '源码',\n        click: function () {\n          shell.openExternal('https://github.com/PDKSophia/visResumeMook');\n        },\n      },\n      {\n        label: '小册',\n        click: function () {\n          shell.openExternal('https://juejin.cn/book/6950646725295996940');\n        },\n      },\n    ],\n  },\n  {\n    label: '编辑',\n    submenu: [\n      {\n        label: '撤销',\n        accelerator: 'CmdOrCtrl+Z',\n        role: 'undo',\n      },\n      {\n        label: '重做',\n        accelerator: 'Shift+CmdOrCtrl+Z',\n        role: 'redo',\n      },\n      {\n        type: 'separator',\n      },\n      {\n        label: '剪切',\n        accelerator: 'CmdOrCtrl+X',\n        role: 'cut',\n      },\n      {\n        label: '复制',\n        accelerator: 'CmdOrCtrl+C',\n        role: 'copy',\n      },\n      {\n        label: '粘贴',\n        accelerator: 'CmdOrCtrl+V',\n        role: 'paste',\n      },\n      {\n        label: '全选',\n        accelerator: 'CmdOrCtrl+A',\n        role: 'selectAll',\n      },\n    ],\n  },\n  {\n    label: '视图',\n    submenu: [\n      {\n        label: '刷新当前页面',\n        accelerator: 'CmdOrCtrl+R',\n        click: (item, focusedWindow) => {\n          if (focusedWindow) {\n            focusedWindow.reload();\n          }\n        },\n      },\n      {\n        label: '切换全屏幕',\n        accelerator: (() => {\n          if (process.platform === 'darwin') {\n            return 'Ctrl+Command+F';\n          } else {\n            return 'F11';\n          }\n        })(),\n        click: (item, focusedWindow) => {\n          if (focusedWindow) {\n            focusedWindow.setFullScreen(!focusedWindow.isFullScreen());\n          }\n        },\n      },\n      {\n        label: '切换开发者工具',\n        role: 'toggleDevTools',\n        accelerator: (() => {\n          if (process.platform === 'darwin') {\n            return 'Alt+Command+I';\n          } else {\n            return 'Ctrl+Shift+I';\n          }\n        })(),\n        click: (item, focusedWindow) => {\n          if (focusedWindow) {\n            focusedWindow.webContents.openDevTools();\n          }\n        },\n      },\n    ],\n  },\n  {\n    label: '窗口',\n    role: 'window',\n    submenu: [\n      {\n        label: '最小化',\n        accelerator: 'CmdOrCtrl+M',\n        role: 'minimize',\n      },\n      {\n        label: '关闭',\n        accelerator: 'CmdOrCtrl+W',\n        role: 'close',\n      },\n      {\n        type: 'separator',\n      },\n    ],\n  },\n  {\n    label: '设置',\n    submenu: [\n      {\n        label: '修改简历数据储存路径',\n        click: () => {\n          console.log('111');\n        },\n      },\n    ],\n  },\n];\n\nif (process.platform === 'darwin') {\n  const { name } = app;\n  customMenu.unshift({\n    label: name,\n    submenu: [\n      {\n        label: '关于 ' + name,\n        role: 'about',\n      },\n      {\n        type: 'separator',\n      },\n      {\n        label: '服务',\n        role: 'services',\n        submenu: [],\n      },\n      {\n        type: 'separator',\n      },\n      {\n        label: 'Hide ' + name,\n        accelerator: 'Command+H',\n        role: 'hide',\n      },\n      {\n        label: 'Hide Others',\n        accelerator: 'Command+Shift+H',\n        role: 'hideOthers',\n      },\n      {\n        label: 'Show All',\n        role: 'unhide',\n      },\n      {\n        type: 'separator',\n      },\n      {\n        label: '退出',\n        accelerator: 'Command+Q',\n        click: function () {\n          app.quit();\n        },\n      },\n    ],\n  });\n}\n\nexport default customMenu;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["此时我们重新运行 ",(0,s.jsx)(e.code,{children:"npm run start:main"}),"，可以发现，左上角的菜单栏展示与我们的预期一致。我们点击 ",(0,s.jsx)(e.code,{children:"平台介绍"}),"菜单下的小册，会发现跳转到了小册介绍页；链接的调整固然无误，但接下来的问题是，如何在点击",(0,s.jsx)(e.code,{children:"设置"}),"时，显示我们的应用设置窗口。"]}),"\n",(0,s.jsxs)(e.p,{children:["细心的小伙伴应该发现，在",(0,s.jsx)(e.a,{href:"https://juejin.cn/book/6950646725295996940/section/6962940676258398222",target:"_blank",rel:"noopener noreferrer",children:"第 17 章"}),"时，我们是新增了一个应用窗口，这就使得我们每次启动应用，该应用设置窗口就会创建并显示。"]}),"\n",(0,s.jsxs)(e.p,{children:["我们所期望的是：初始化创建应用设置窗口，但不显示（窗口隐藏），在点击菜单",(0,s.jsx)(e.code,{children:"设置"}),"时，再显示应用设置窗口，点击关闭则将窗口隐藏。接下来让我们一步步实现（伪代码，看注释！！！）"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"初始化创建应用设置窗口，对该窗口隐藏"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"export interface MyBrowserWindow extends BrowserWindow {\n  uid?: string;\n}\n\nfunction createWindow() {\n  // 创建应用设置窗口\n  const settingWindow: MyBrowserWindow = new BrowserWindow({\n    width: 720,\n    height: 240,\n    show: false, // 设置为 false，使得窗口创建时不展示\n    resizable: false,\n    webPreferences: {\n      devTools: true,\n      nodeIntegration: true,\n    },\n  });\n  settingWindow.uid = 'settingWindow'; // 添加自己唯一的窗口属性\n}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["在点击菜单",(0,s.jsx)(e.code,{children:"设置"}),"时，显示应用设置窗口"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["修改 ",(0,s.jsx)(e.code,{children:"customMenu.ts"})," 文件，在回调函数中，得到所有窗口实例，通过 ",(0,s.jsx)(e.code,{children:"uid"})," 得到具体窗口，进行展示"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import _ from 'lodash';\nimport { MyBrowserWindow } from './electron';\nimport { MenuItemConstructorOptions, shell, MenuItem, BrowserWindow } from 'electron';\n\n// 伪代码\n{\n  label: '设置',\n  submenu: [\n    {\n      label: '修改简历数据储存路径',\n      click: () => {\n        const wins: MyBrowserWindow[] = BrowserWindow.getAllWindows();\n        const currentWindow = _.find(wins, (w) => w.uid === 'settingWindow');\n         if (currentWindow) {\n          currentWindow.show(); // 显示窗口\n         }\n      },\n    },\n  ],\n}\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"点击关闭，将应用设置窗口隐藏"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["由于我们点击窗口的 ",(0,s.jsx)(e.code,{children:"x"})," 号进行关闭，会将该窗口销毁，而实际上，我们期望的是将该窗口进行隐藏，所有需要重写一下 ",(0,s.jsx)(e.code,{children:"close"})," 事件"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// 自定义settingWindow的关闭事件\nsettingWindow.on('close', async (e) => {\n  settingWindow.hide(); // 隐藏窗口\n  e.preventDefault();\n  e.returnValue = false;\n});\n"})}),"\n",(0,s.jsxs)(e.p,{children:["小伙伴们一定要记住，修改了主进程的代码，需要重新执行 ",(0,s.jsx)(e.code,{children:"npm run start:main"}),"，这时候就能看到最终的菜单栏效果了。"]}),"\n",(0,s.jsxs)(e.p,{children:["代码可访问：",(0,s.jsx)(e.a,{href:"https://github.com/PDKSophia/visResumeMook/commit/a6b4ffeb19b422f6e437e5839c153833ea71f78c",target:"_blank",rel:"noopener noreferrer",children:"完成自定义菜单栏 commit"})]}),"\n",(0,s.jsxs)(e.h2,{id:"坑",children:["坑",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#坑",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["也许小伙伴们觉得好像没啥毛病，但实际上，我们通过快捷键 ",(0,s.jsx)(e.code,{children:"command+Q"})," 或者手动退出，就会发现，好像程序没有关掉？为什么呢？我猜测，当我们点击退出时，实际上会对所有的窗口都实现退出效果，但由于我们对 ",(0,s.jsx)(e.code,{children:"settingWindow"})," 的退出重写，导致我们主应用窗口退出了，而应用设置窗口还残留着，并且我们将其隐藏掉，导致应用无法完全退出的尴尬局面。那该如何处理呢？"]}),"\n",(0,s.jsxs)(e.p,{children:["只能通过迂回的方式实现。",(0,s.jsx)(e.code,{children:"BrowserWindow"})," 有个配置，可以隐藏掉原生的菜单栏，我们禁掉原生菜单栏，手动实现。然后通过 IPC 的方式实现窗口的显示、隐藏。"]}),"\n",(0,s.jsxs)(e.p,{children:["我们先前往 ",(0,s.jsx)(e.code,{children:"renderer/windowPages/setting"}),"，修改一下 index.tsx 的逻辑代码，给它手动实现一个菜单栏，下面是伪代码，部分代码省略"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:'// renderer/windowPages/setting/index.tsx\n\nfunction Setting() {\n  const onHideWindow = () => {\n    ipcRenderer.send(\'Electron:SettingWindow-hide-event\');\n  };\n  const onMinWindow = () => {\n    ipcRenderer.send(\'Electron:SettingWindow-min-event\');\n  };\n  return (\n    <div styleName="container">\n      <div styleName="menu">\n        <div styleName="hide" onClick={onHideWindow}>x</div>\n        <div styleName="min" onClick={onMinWindow}>-</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Setting;\n'})}),"\n",(0,s.jsxs)(e.p,{children:["接下来需要在主进程添加 IPC 通信的事件处理，顺道把拦截的 ",(0,s.jsx)(e.code,{children:"onclose"})," 代码段删除，同时为应用设置窗口添加 ",(0,s.jsx)(e.code,{children:"frame"})," 属性"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// app/main/electron.ts\n\nfunction createWindow() {\n  const settingWindow: MyBrowserWindow = new BrowserWindow({\n    width: 720,\n    height: 240,\n    resizable: false,\n    // \uD83D\uDC47 第一步. 添加该属性\n    show: false,\n    frame: false,\n    webPreferences: {\n      devTools: true,\n      nodeIntegration: true,\n    },\n  });\n  settingWindow.uid = 'settingWindow';\n\n  // \uD83D\uDC47 第二步.删除掉自定义的关闭事件\n  // settingWindow.on('close', async (e) => {\n  //   settingWindow.hide();\n  //   e.preventDefault();\n  //   e.returnValue = false;\n  // });\n\n  // \uD83D\uDC47 第三步. 新增IPC事件监听\n  ipcMain.on('Electron:SettingWindow-hide-event', () => {\n    // https://www.electronjs.org/docs/api/browser-window#winisvisible\n    if (settingWindow.isVisible()) {\n      settingWindow.hide();\n    }\n  });\n  ipcMain.on('Electron:SettingWindow-min-event', () => {\n    // https://www.electronjs.org/docs/api/browser-window#winisminimized\n    if (settingWindow.isVisible()) {\n      settingWindow.minimize();\n    }\n  });\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["不要忘记了在自定义的菜单栏中，也需要对应做一下修改，前往 ",(0,s.jsx)(e.code,{children:"app/main/customMenu.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// app/main/customMenu.ts\n{\n    label: '设置',\n    submenu: [\n      {\n        label: '修改简历数据储存路径',\n        click: () => {\n          const wins: MyBrowserWindow[] = BrowserWindow.getAllWindows();\n          const currentWindow = _.find(wins, (w) => w.uid === 'settingWindow');\n          if (currentWindow) {\n            if (!currentWindow.isVisible()) {\n              currentWindow.show();\n            }\n            if (currentWindow.isMinimized()) {\n              currentWindow.restore();\n            }\n          }\n        },\n      },\n    ],\n  }\n"})}),"\n",(0,s.jsxs)(e.p,{children:["代码可访问：",(0,s.jsx)(e.a,{href:"https://github.com/PDKSophia/visResumeMook/commit/47aff606c68665debda761ee942a2573bd803315",target:"_blank",rel:"noopener noreferrer",children:"实现无边框窗口，自定义菜单栏功能 commit"})]}),"\n",(0,s.jsxs)(e.h2,{id:"最后",children:["最后",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#最后",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"本章节主要实现自定义原生应用菜单，这是一个特别重要的模块，通过文档的介绍，简单例子的展示，快捷键事件的额外讲解，最后通过真实的场景，带领大家实现自定义原生菜单。"}),"\n",(0,s.jsxs)(e.p,{children:["从一开始的实现，到自定义 ",(0,s.jsx)(e.code,{children:"onclose"})," 事件会带来的问题，再到实现无边框菜单的窗口，最后通过 IPC 通信的方式，实现窗口的隐藏、最小化等功能。希望本章节后，小伙伴们能基于此菜单栏，去实现更多复杂而又有趣的定制化菜单。"]})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["Electron%20%2B%20React%20%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8E%86%E5%B9%B3%E5%8F%B0%E5%AE%9E%E6%88%98%2F21.%E5%AE%9A%E5%88%B6%E7%AF%87-%E8%87%AA%E5%AE%9A%E4%B9%89%20Electron%20%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E8%8F%9C%E5%8D%95.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"默认行为",id:"默认行为",depth:2},{text:"通过例子看实现",id:"通过例子看实现",depth:2},{text:"快捷键事件",id:"快捷键事件",depth:2},{text:"自定义简历菜单栏",id:"自定义简历菜单栏",depth:2},{text:"坑",id:"坑",depth:2},{text:"最后",id:"最后",depth:2}],title:"21.定制篇-自定义 Electron 原生应用菜单",headingTitle:"21.定制篇-自定义 Electron 原生应用菜单",frontmatter:{}}}}]);