"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["24406"],{214784:function(e,n,r){e.exports=r.p+"static/image/64c69dc3494d7847d415a51ba1b4d709.ec02fbb5.webp"},135306:function(e,n,r){r.r(n),r.d(n,{default:()=>I});var s=r(552676),t=r(740453);let a=r.p+"static/image/e00a1b913274ea4e15dda35a9dcd9721.ec19a552.webp",i=r.p+"static/image/ee0e3aa1a998d75c1ce2e26e5afead89.ddfe286c.webp",c=r.p+"static/image/98a70ee4471ca03d1262bc78d6ea68bc.67c34014.webp",o=r.p+"static/image/49cd8489df975614eaf89a934a18a77b.2864022b.webp",l=r.p+"static/image/45fe5016545c78690d248cdeeba8f5c9.c5cb7ca3.webp",p=r.p+"static/image/2493bf65049fdd6f0c4fbeb74e14dcfd.4c243a6b.webp",d=r.p+"static/image/76c6b3caf65316ee9bac9fb2fba72a4c.408a1245.webp",m=r.p+"static/image/8886f06c80adbb163a77585a1306acf5.1fce7428.webp",x=r.p+"static/image/d4d3b3c5e921faed6fa1778b4f0c24fd.7739eddf.webp",j=r.p+"static/image/90a96438ce71230c6cf38244ed369a15.7b67e2be.webp",h=r.p+"static/image/dac4f3717ecf7a96f1cde9a48e13ace9.20da152f.webp",f=r.p+"static/image/e0ac9b309c3066726ae312007bbb8d26.c61b631f.webp",b=r.p+"static/image/2db4e24513ef4f3f08d14947a94431b3.0875cd32.webp",u=r.p+"static/image/c7f6da89f382f7341d03ee723a39be89.2f2bbec6.webp",g=r.p+"static/image/b4d49456b9c074e2435125bf23e7edd7.c959cafd.webp";var E=r(214784);let S=r.p+"static/image/1f7f44d4340e08fbf3e1541a87864ac1.9b1bda84.webp";function C(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"87-手写序列化-entity-的拦截器",children:["87. 手写序列化 Entity 的拦截器",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#87-手写序列化-entity-的拦截器",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上节我们学了用 class-transformer +  ClassSerializerInterceptor 来序列化 entity 对象，可以替代 vo。"}),"\n",(0,s.jsx)(n.p,{children:"这节我们自己来实现一下 ClassSerializerInterceptor，深入理解它的实现原理。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest new serializer-interceptor-test\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"生成一个 user 的 CRUD 模块："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g resource user --no-spec\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 entity 里加一些内容："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export class User {\n    id: number;\n\n    username: string;\n\n    password: string;\n\n    email: string;\n\n    constructor(partial: Partial<User>) {\n        Object.assign(this, partial);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"改下 UserService："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\n\nconst database = [\n  new User({ id: 1, username: 'xxx', password: 'xxx', email: 'xxx@xx.com'}),\n  new User({ id: 2, username: 'yyy', password: 'yyy', email: 'yyy@yy.com'})\n];\nlet id = 0;\n\n@Injectable()\nexport class UserService {\n  create(createUserDto: CreateUserDto) {\n    const user = new User(createUserDto);\n\n    user.id = id++;\n\n    database.push(user);\n\n    return user;\n  }\n\n  findAll() {\n    return database;\n  }\n\n  findOne(id: number) {\n    return database.filter(item =>  item.id === id).at(0);\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"内置两条数据，这样就不用每次调用接口创建了。"}),"\n",(0,s.jsx)(n.p,{children:"然后安装 class-transformer 包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save class-transformer\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 entity 上加一下 class-transformer 的装饰器："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Exclude, Expose, Transform } from \"class-transformer\";\n\nexport class User {\n    id: number;\n\n    username: string;\n\n    @Exclude()\n    password: string;\n\n    @Expose()\n    get xxx(): string {\n        return `${this.username} ${this.email}`;\n    }\n\n    @Transform(({value}) => '邮箱是：' + value)\n    email: string;\n\n    constructor(partial: Partial<User>) {\n        Object.assign(this, partial);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后我们自己来实现 ClassSerializerInterceptor，还有一个自定义装饰器 SerializeOptions："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"先来写这个自定义装饰器，它比较简单："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g decorator serialize-options --flat\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { SetMetadata } from '@nestjs/common';\nimport { ClassTransformOptions } from 'class-transformer';\n\nexport const CLASS_SERIALIZER_OPTIONS = 'class_serializer:options';\n\nexport const SerializeOptions = (options: ClassTransformOptions) =>\n    SetMetadata(CLASS_SERIALIZER_OPTIONS, options);\n"})}),"\n",(0,s.jsx)(n.p,{children:"它做的事情就是往 class 或者 method 上加一个 metadata。"}),"\n",(0,s.jsx)(n.p,{children:"然后 interceptor 取出这个 metadata 的 options 给 class-transfromer 用。"}),"\n",(0,s.jsx)(n.p,{children:"所以这个 options 的类型就是 ClassTransformOptions。"}),"\n",(0,s.jsx)(n.p,{children:"是不是第一次见这样设置参数？"}),"\n",(0,s.jsx)(n.p,{children:"确实挺巧妙的。"}),"\n",(0,s.jsx)(n.p,{children:"然后来写 interceptor："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g interceptor class-serializer --flat --no-spec\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { CallHandler, ExecutionContext, Inject, Injectable, NestInterceptor } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ClassTransformOptions } from 'class-transformer';\nimport { Observable } from 'rxjs';\nimport { CLASS_SERIALIZER_OPTIONS } from './serialize-options.decorator';\n\n@Injectable()\nexport class ClassSerializerInterceptor implements NestInterceptor {\n\n  @Inject(Reflector) \n  protected readonly reflector: Reflector;\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const contextOptions = this.getContextOptions(context);\n\n    return next.handle();\n  }\n\n  protected getContextOptions(\n    context: ExecutionContext,\n  ): ClassTransformOptions | undefined {\n    return this.reflector.getAllAndOverride(CLASS_SERIALIZER_OPTIONS, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"注入 Reflector 包，用它的 getAllAndOverride 方法拿到 class 或者 handler 上的 metadata。"}),"\n",(0,s.jsx)(n.p,{children:"打印下看看。"}),"\n",(0,s.jsx)(n.p,{children:"我们把它加到 handler 上："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"加一个调试配置："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "type": "node",\n            "request": "launch",\n            "name": "debug nest",\n            "runtimeExecutable": "npm",\n            "args": [\n                "run",\n                "start:dev",\n            ],\n            "skipFiles": [\n                "<node_internals>/**"\n            ],\n            "console": "integratedTerminal",\n        }\n    ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"打个断点，然后点击调试启动："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["现在是 undefined：\n",(0,s.jsx)("img",{src:m,alt:""})]}),"\n",(0,s.jsx)(n.p,{children:"加一下 @SerializeOptions 装饰器，用我们刚才写的那个。然后点击 restart："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这时候就拿到 options 了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后我们继续写："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { CallHandler, ExecutionContext, Inject, Injectable, NestInterceptor, StreamableFile } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ClassTransformOptions } from 'class-transformer';\nimport { Observable, map } from 'rxjs';\nimport { CLASS_SERIALIZER_OPTIONS } from './serialize-options.decorator';\nimport * as classTransformer from 'class-transformer';\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object'\n}\n\n@Injectable()\nexport class ClassSerializerInterceptor implements NestInterceptor {\n\n  @Inject(Reflector) \n  protected readonly reflector: Reflector;\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const contextOptions = this.getContextOptions(context);\n\n    return next\n      .handle()\n      .pipe(\n        map((res) =>\n          this.serialize(res, contextOptions),\n        ),\n      );\n  }\n\n  serialize(\n    response: Record<string, any> | Array<Record<string, any>>,\n    options: ClassTransformOptions\n  ){\n\n    if (!isObject (response) || response instanceof StreamableFile) {\n      return response;\n    }\n\n    return Array.isArray(response)\n      ? response.map(item => this.transformToNewPlain(item, options))\n      : this.transformToNewPlain(response, options);\n  }\n\n  transformToNewPlain(\n    palin: any,\n    options: ClassTransformOptions,\n  ) {\n    if (!palin) {\n      return palin;\n    }\n\n    return classTransformer.instanceToPlain(palin, options);\n  }\n\n\n  protected getContextOptions(\n    context: ExecutionContext,\n  ): ClassTransformOptions | undefined {\n    return this.reflector.getAllAndOverride(CLASS_SERIALIZER_OPTIONS, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n  }\n}\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 interceptor 里用 map operator 对返回的数据做修改。"}),"\n",(0,s.jsx)(n.p,{children:"在 serialize 方法里根据响应是数组还是对象分别做处理，调用 transformToNewPlain 做转换。"}),"\n",(0,s.jsx)(n.p,{children:"这里排除了 response 不是对象的情况和返回的是文件流的情况："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"transformToNewPlain 就是用 class-transformer 包的 instanceToPlain 根据对象的 class 上的装饰器来创建新对象："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"有同学说不是 classToPlain 么？"}),"\n",(0,s.jsx)(n.p,{children:"那个 api 过时了，用 instanceToPlain 代替。"}),"\n",(0,s.jsx)(n.p,{children:"打个断点测试下："}),"\n",(0,s.jsx)(n.p,{children:"最开始的响应数据是 user 对象："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"转换完之后就是新的对象了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样我们就实现了 ClassSerializerInterceptor 拦截器的功能。"}),"\n",(0,s.jsxs)(n.p,{children:["案例代码在",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/serializer-interceptor-test",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上节学了用 entity 结合 class-transfomer 的装饰器和 ClassSerializerInterceptor 拦截器实现复用 entity 做 vo 的功能。"}),"\n",(0,s.jsx)(n.p,{children:"这节我们自己实现了下。"}),"\n",(0,s.jsx)(n.p,{children:"首先是 @SerializeOptions 装饰器，它就是在 class 或者 handler 上加一个 metadata，存放 class-transformer 的 options。"}),"\n",(0,s.jsx)(n.p,{children:"在 ClassSerializerInterceptor 里用 reflector 把它取出来。"}),"\n",(0,s.jsx)(n.p,{children:"然后拦截响应，用 map oprator对响应做变换，调用 classTransformer 包的 instanceToPlain 方法进行转换。"}),"\n",(0,s.jsx)(n.p,{children:"自己实现一遍之后，对它的理解就更深了。"})]})}function O(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(C,{...e})}):C(e)}let I=O;O.__RSPRESS_PAGE_META={},O.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F87.%20%E6%89%8B%E5%86%99%E5%BA%8F%E5%88%97%E5%8C%96%20Entity%20%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"87. 手写序列化 Entity 的拦截器",headingTitle:"87. 手写序列化 Entity 的拦截器",frontmatter:{}}}}]);