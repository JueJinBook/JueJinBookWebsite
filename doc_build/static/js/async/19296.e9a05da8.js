"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["19296"],{517920:function(e,n,r){r.r(n),r.d(n,{default:()=>ea});var s=r(552676),c=r(740453);let d=r.p+"static/image/b37c7cacde354d8c0ff9477387175213.3e3be957.gif",l=r.p+"static/image/0d305e968182d5a49798932166b16216.6ad4b285.webp",i=r.p+"static/image/8150d161ae7a7c8da7ae6c13812ade00.787901a5.webp",o=r.p+"static/image/4c96238463b707b3420ac667c6599df8.74099339.webp",h=r.p+"static/image/d34c77e9037246a9de3d2b80dc3583e6.75c17dcd.webp",t=r.p+"static/image/ae1bc04be023fc0b1e301bd4acf77868.1f18ad06.webp",a=r.p+"static/image/b13644c75d65bb21850c5ecb2905b2d3.7a68775b.webp",x=r.p+"static/image/13ae571b9aea7c57d9d77fb53b0db8b0.c8b49b89.webp",j=r.p+"static/image/05cd0329ccbb5c5f47a12305dd6bfab0.373dc82a.gif",p=r.p+"static/image/43e03abdd8b26d07388815c8c976dc9d.f5c873a9.webp",f=r.p+"static/image/7ed1b8825a7e8a0d1cbabf48feb0e672.d48aa669.webp",g=r.p+"static/image/16c5ccc1bf133b2bf06f2f5f9a793c77.961d32d6.gif",u=r.p+"static/image/745c338a5effc5e0b5d1ee8b5e5054d8.6ad09440.gif",b=r.p+"static/image/0aad338e57f3d12a4ec505924b9af044.2208dbf6.gif",m=r.p+"static/image/49d8590cdfde00a9c8316e33ca068f9f.0653182d.webp",E=r.p+"static/image/0991c7f859d98a3195f707888c0b334f.4bfffe36.webp",L=r.p+"static/image/ab999e0f7d42dfb2ee97de451b8facf5.74099339.webp",_=r.p+"static/image/b0d4d01ab82be9523b01f155e1c82830.f7dfd117.webp",k=r.p+"static/image/a974a8209d23b7d17fb51d7453ee91d8.f9ece320.webp",S=r.p+"static/image/963d208c6437c7fbb65738bfddbafa9b.c2b719f6.webp",y=r.p+"static/image/8f2b3472bc740db1f7bdb811e5c6f6e4.bb5b62ef.webp",M=r.p+"static/image/b1bce6f3941337eef95dc4754de48273.dca5ad62.webp",T=r.p+"static/image/a11a17dbda0e4b2898e4552aec8b20b8.1854f38c.webp",V=r.p+"static/image/35c6cacc6b191dc7ad9500ef454fd3dd.e50f4639.webp",C=r.p+"static/image/c2bdb7bda4c0865097e402dbcc13dfbc.5b259168.webp",v=r.p+"static/image/2921686e984b76d8620d4707130f82de.2f5cbef7.webp",R=r.p+"static/image/2995206039197133a02e7aa14a2644f9.a7387d84.gif",A=r.p+"static/image/3d1db475a01fefb4b025cbd4ece2b7db.6eeeae9a.gif",O=r.p+"static/image/2d2bc684e281327a1bea44af8af20e26.dc7a3b14.gif",B=r.p+"static/image/dada972242bbd165c63f7a3c66f62fd8.2f5cbef7.webp",N=r.p+"static/image/fc5a6cc955fdb30aa32be920049e2b86.86ff2e2a.webp",G=r.p+"static/image/810d3261c4bf6301505a746120649c29.cf0a7255.gif",w=r.p+"static/image/ba3197db9b0fa8c5802005cec3ebf355.0b66c44b.webp",F=r.p+"static/image/163c2a70954cad49cf99c3e181e34330.587a3c08.webp",D=r.p+"static/image/339acd60e423e5557f48c933f6eca972.f1b33eb1.gif",X=r.p+"static/image/f1cad77afa835c17cae838add1cc3c07.68299797.webp",q=r.p+"static/image/269168ef3ab1a8b0b2ed716fc3db541f.4e395198.gif",U=r.p+"static/image/0b27e29d479b43a459bac3d8b8789c9a.68299797.webp",K=r.p+"static/image/3fabe28f513ab1c7b338a9dc6eb55395.5576e829.webp",I=r.p+"static/image/d292b4ba1022779c6ac8349b30b31e5b.73e50b04.gif",z=r.p+"static/image/8863f10d700571f4501a937f1e018826.651c8c25.webp",W=r.p+"static/image/76951d5cb0fa0431003dd2d34daa069f.d4a3c3c7.webp",Y=r.p+"static/image/f1c59d87be35c58584c430f75726097a.b4384584.webp",P=r.p+"static/image/86f59f61b083324d54bec5d5e61027d0.924bb34b.gif",Z=r.p+"static/image/e05d033d107f1aa46a9ea1e8fbf7a7d4.2ea3a7c3.webp",Q=r.p+"static/image/7885e99e379610fc3d1c301d84b76652.05ceb95e.gif",H=r.p+"static/image/0e4473af0c23262a51ae95666547788e.f9f36c59.webp",J=r.p+"static/image/ddfb709424bfdf79e22d3c3dfafce3fb.d5dea8cc.webp",$=r.p+"static/image/b439ef13199db2c7b7f4cdee95d5b892.ed9fc14f.gif",ee=r.p+"static/image/eddcc9aa4dad8513df95b8f5e7054318.fc8523a5.gif",en=r.p+"static/image/08b9e6ac55fbf48973b532613e7d683e.078ef928.webp",er=r.p+"static/image/691e7f85b3163908c395379c7818554c.df611344.webp",es=r.p+"static/image/db3b56d3b0f2bea56a63e33c2a09243a.175e3801.webp",ec=r.p+"static/image/4672644c0ea3cbf9e1af390ed6ec0d4c.d2c63b38.webp",ed=r.p+"static/image/6346843c48787ba0984398ac7b9a18b8.8b491dfb.webp",el=r.p+"static/image/5b41a61853f732ce2468780f328f0e03.ddf3aad5.webp",ei=r.p+"static/image/f30a1d6b9706a0521339e625064024a7.ef31a683.webp",eo=r.p+"static/image/7e5f08cc72d49e224bac70a0d5dcdfe4.20976cff.gif";function eh(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",h2:"h2",ul:"ul",li:"li",code:"code",pre:"pre",blockquote:"blockquote",strong:"strong"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"37-高级篇svg-滤镜的进阶之文本描边",children:["37-高级篇：SVG 滤镜的进阶之文本描边",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#37-高级篇svg-滤镜的进阶之文本描边",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:eo,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在20世纪80年代，描边文本是一种更受欢迎的美学风格，经常出现在海报、广告和音乐封面上，成为了那个时代的标志之一。虽然现代Web设计趋向于简约和扁平化，但描边文本却有着独特的魅力，能够赋予设计作品独特的风格和个性。而如今，随着技术的不断发展，在Web开发过程中，我们可以使用CSS和SVG技术为Web上的文本添加描边效果，例如标题、商标设计和广告标语等。"}),"\n",(0,s.jsx)(n.p,{children:"虽然可以在CSS中创建漂亮的描边文字，但有时你可能会发现这些方法有点不可靠或难以控制，以实现你想要的结果。庆幸的是，我们可以利用SVG滤镜为文本添加描边效果。在这节课中，我将引领你深入探讨如何利用SVG滤镜技术来创建描边文字效果，并探索其在现代Web设计中的应用。"}),"\n",(0,s.jsxs)(n.h2,{id:"关于描边的基础知识",children:["关于描边的基础知识",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#关于描边的基础知识",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 Web 设计或平面设计中，轮廓文字的外部部分被称为描边，内部部分被称为填充："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ei,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"描边可以有与填充不同的颜色，通常称为描边颜色。此外，它的宽度（即厚度）也可以不同。在这方面类似于边框，这通常被称为描边的宽度。描边的文字可能没有填充，或者填充为透明，以便通过文字看到背景。在这种情况，文字看起来像一个轮廓："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:el,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"描边的一个不太明显的方面是它的对齐方式。描边就像边框一样，它位于填充区域的外部，但其位置可能会有所不同，例如："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ed,alt:""})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"居中（Center）：描边宽度一半在填充区之外，一半在填充区之内"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"居内（Inside）：描边宽度都在填充区域内"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"居外（Outside）：描边宽度在填充区域外"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"选择不同的对齐方式，将直接影响到描边文本的呈现效果。"}),"\n",(0,s.jsxs)(n.h2,{id:"实现文本描边的常见方案",children:["实现文本描边的常见方案",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现文本描边的常见方案",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"通常情况之下，Web 开发者习惯性的选择 CSS 来给文本添加描边效果。常见的方式有："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.code,{children:"text-shadow"})," 模拟描边效果"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.code,{children:"text-stroke"})," 设置文本描边效果"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"text-stroke"})," 属性还没有得到主流现代浏览器支持之前，Web 开发者会先考虑使用 ",(0,s.jsx)(n.code,{children:"text-shadow"})," 来给文本添加描边效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"h3 {\n    text-shadow: \n        -0.025em -0.025em 0 #444, \n        0.025em -0.025em 0 #444,\n        -0.025em 0.025em 0 #444, \n        0.025em 0.025em 0 #444;\n    color: #fff;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ec,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbQgVO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbQgVO"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["初步看上去，这个效果还令人满意，但仔细看或者当屏幕放大时，或者 ",(0,s.jsx)(n.code,{children:"text-shadow"})," 的 ",(0,s.jsx)(n.code,{children:"x"})," 和 ",(0,s.jsx)(n.code,{children:"y"})," 轴偏移量过猛时，不管是什么语系，文本描边会有明显的断裂感："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:es,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["这可能对于追求细节的同学而言，是无法接受的！而且，使用 ",(0,s.jsx)(n.code,{children:"text-shadow"})," 给文本添加描边效果有诸多的不足，比如："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"不适用于具有更多边缘或曲线的文本"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"需要添加更多阴影以提供更平滑的外观"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"不能与透明填充一起使用"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"角落可能会呈现略微不同的形状"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["另一种方式就是 CSS 的 ",(0,s.jsx)(n.code,{children:"text-stroke"})," 属性，它允许你在文本周围添加描边效果。",(0,s.jsx)(n.code,{children:"text-stroke"})," 属性有两个主要值："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"text-stroke-color"})," ：设置描边颜色"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"text-stroke-width"})," ：设置描边宽度"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"h3 {\n    -webkit-text-stroke: 0.025em #444;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:er,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/WNBOWrR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNBOWrR"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["它与 ",(0,s.jsx)(n.code,{children:"text-shadow"})," 实现的描边效果相比，不管如何放大，描边都不会有断裂感存在，即角落不会呈现别的形状："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:en,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["但不难发现，",(0,s.jsx)(n.code,{children:"text-stroke"})," 描边，它会占用部分填充区域，类似于居中（Center）对齐的描边类型。注意，在 CSS 中，并没有类似 ",(0,s.jsx)(n.code,{children:"text-stroke-align"})," 的属性来设置描边的对齐方式。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"text-stroke"})," 属性有一个最为明显的缺陷是，当 ",(0,s.jsx)(n.code,{children:"text-stroke-width"})," 的值比填充区域还要大时，将会造成文本没有填充区域，甚至描还会重叠在一起。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ee,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["但可以通过 ",(0,s.jsx)(n.code,{children:"paint-order"})," 属性来控制文本区域和图形绘制的填充和绘制的顺序。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"h3 {\n    -webkit-text-stroke: 0.025em #444;\n    paint-order: stroke fill; /* 先描边，然后填充，然后 markers */\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这个时候，",(0,s.jsx)(n.code,{children:"text-stroke-width"})," 如何调整，都能保证填充区域不变："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:$,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/qBGjwpG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBGjwpG"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"text-stroke"})," 属性的另一个好处是，允许你结合 ",(0,s.jsx)(n.code,{children:"background-clip:text"})," 给文本设置渐变的描边效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:" h3 {\n    background-image: linear-gradient(\n      to bottom left in oklab,\n      oklch(55% 0.45 350) 0%,\n      oklch(95% 0.4 95) 100%\n    );\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: #fff;\n    -webkit-text-stroke: .125em transparent;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:J,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/dyERLRx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dyERLRx"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的是，到目前为止，在使用 ",(0,s.jsx)(n.code,{children:"text-stroke"})," 属性时，还得需要添加 ",(0,s.jsx)(n.code,{children:"-webkit-"})," ，才能被主流浏览器识别！这一点，请切记！"]}),"\n",(0,s.jsxs)(n.p,{children:["对于创建描边文本，我更倾向于使用 SVG ，而不是 CSS 的 ",(0,s.jsx)(n.code,{children:"-webkit-text-stroke"})," 属性。 SVG 方法是一个标准，实现的效果可以在所有浏览器中达到一致。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="text">\n    <text dx="50%" dy="1.25em">SVG 太棒了！</text>\n    <text dx="50%" dy="2.5em">SVG Awesome!</text>\n    <text dx="50%" dy="3.75em">SVG 素晴らしいです！</text>\n    <text dx="50%" dy="5em" lang="ar">SVG رائع</text>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"text {\n    fill: #fff;\n    stroke: #09cefa;\n    stroke-width: 8;\n    paint-order: stroke fill;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:H,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"另外，你还可以借助 SVG 的相关特性，实现更丰富的描边效果，例如："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["基于 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7354948936039137289",target:"_blank",rel:"noopener noreferrer",children:"SVG 渐变"}),"，实现带有渐变效果的描边"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["基于 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7355510532712955954",target:"_blank",rel:"noopener noreferrer",children:"SVG 纹理"}),"，实现带有纹理效果的描边"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["基于 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7349188496181887017",target:"_blank",rel:"noopener noreferrer",children:"SVG 的描边属性"}),"，例如 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 来创建带有虚线的描边效果，以及带有动画效果的描边"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Q,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/BaeZeBw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaeZeBw"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["虽然 SVG 的 ",(0,s.jsx)(n.code,{children:"<text> 元素"}),"结合",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7349188496181887017",target:"_blank",rel:"noopener noreferrer",children:" SVG 的描边属性"}),"，例如 ",(0,s.jsx)(n.code,{children:"stroke"})," 和 ",(0,s.jsx)(n.code,{children:"stroke-width"})," 可以实现丰富的文本描边效果，但它有一个致命的缺点，就是排版不够灵活。在小册的《",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7346773005114507304",target:"_blank",rel:"noopener noreferrer",children:"SVG 文本元素"}),"》课程中曾经阐述过，这里就不再复述！"]}),"\n",(0,s.jsxs)(n.p,{children:["庆幸的是，在 SVG 中除了上述所介绍的方案之外，我们还可以使用 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423746187273",target:"_blank",rel:"noopener noreferrer",children:"SVG 的滤镜"}),"与 HTML 元素相互结合，实现丰富多样文本描边效果。更为有意思的是，SVG 滤镜除了能实现描边文本效果之外，还能实现很多吸引人的文本效果，例如："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Z,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们将以 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"<feMorphology>"})})," 和 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"<feComposite>"})})," 滤镜为主，向大家展示它们是如何给文本添加描边效果的，与此同时，在课程中还会涉及到 ",(0,s.jsx)(n.code,{children:"<feConvolveMatrix>"})," 、",(0,s.jsx)(n.code,{children:"<feOffset>"})," 、",(0,s.jsx)(n.code,{children:"<feFlood>"})," 、",(0,s.jsx)(n.code,{children:"<feMerge>"})," 以及",(0,s.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318058076569638",target:"_blank",rel:"noopener noreferrer",children:["上节课介绍过的 ",(0,s.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜"]}),"。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["特别声明，如果你还没来得及阅读前面的课程就到了这里，个人建议你先返回去阅读小册中《",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423746187273",target:"_blank",rel:"noopener noreferrer",children:"初探 SVG 滤镜"})}),"》课程的内容，这将能帮助你对 SVG 滤镜有一个初步的，全面的认识。也易于帮助你更好的理解接下来的内容！"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"femorphology-滤镜",children:[(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#femorphology-滤镜",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在计算机图形学和图像处理领域，形态学（Morphology）是指对图形或图像进行操作，以改变其形状或结构的一种技术。这意味着，它将改变物体的形状或形式。"}),"\n",(0,s.jsxs)(n.p,{children:["SVG 的 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜元素作用于物体的形态。它提供了两种预定义的形态变换：",(0,s.jsx)(n.code,{children:"dilate"})," （即“膨胀”，也称为加厚或扩展）和 ",(0,s.jsx)(n.code,{children:"erode"})," （即“侵蚀”，也称为变薄或缩小），这两个类型是通过其 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"operator"})})," ****属性来设置。换句话说，",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜可以用来扩展或缩小元素："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["URL:",(0,s.jsx)(n.a,{href:"https://yoksel.github.io/svg-filters/#/",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/svg-filters/#/"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正如你所看到的，使用此滤镜，可以使目标源（例如文本）变粗或变细。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜除了 ",(0,s.jsx)(n.code,{children:"operator"})," 属性之外，还有以下几个主要属性："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"输入源（"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"in"})})," ",(0,s.jsx)(n.strong,{children:"）"})," ：如果未指定，则为 ",(0,s.jsx)(n.code,{children:"SourceGraphic"})," （原始图形元素）或前一个滤镜的输出结果"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"半径值（"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"radius"})})," ",(0,s.jsx)(n.strong,{children:"）"})," ：如果只有一个值，则表示 ",(0,s.jsx)(n.code,{children:"x"})," 和 ",(0,s.jsx)(n.code,{children:"y"})," 相等；如果有两个值，则分别指定 ",(0,s.jsx)(n.code,{children:"x"})," 轴和 ",(0,s.jsx)(n.code,{children:"y"})," 轴"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"输出名称（"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"result"})})," ",(0,s.jsx)(n.strong,{children:"）"})," ：如果未指定，则为滤镜的最终结果或下一个滤镜的输入值"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们先来聊 ",(0,s.jsx)(n.code,{children:"operator"})," 。从技术上说，",(0,s.jsx)(n.code,{children:"operator"})," 提供的两种操作（",(0,s.jsx)(n.code,{children:"dilate"})," 和 ",(0,s.jsx)(n.code,{children:"erode"}),"）都是在像素级别上运行，",(0,s.jsx)(n.code,{children:"dilate"})," （膨胀）是将一个像素扩展到其邻近像素上，而",(0,s.jsx)(n.code,{children:"erode"})," （侵蚀）则相反，它会侵蚀掉像素边缘的邻近像素。这两种操作都会影响像素边缘的描边效果。"]}),"\n",(0,s.jsxs)(n.p,{children:["膨胀（",(0,s.jsx)(n.code,{children:"dilate"}),"）和侵蚀（",(0,s.jsx)(n.code,{children:"erode"}),"）的程度由“半径”（",(0,s.jsx)(n.code,{children:"radius"}),"）参数决定。半径参数越大，膨胀或侵蚀的效果就越明显。简单来说，半径参数控制了有多少邻近像素会参与到膨胀或侵蚀的过程中，从而决定了最终图像的变化程度。"]}),"\n",(0,s.jsxs)(n.p,{children:["你可以将形变半径（",(0,s.jsx)(n.code,{children:"radius"}),"）理解为一个圆或椭圆的半径；从输入像素开始，位于该半径确定的圆内的任何邻近像素都将算作邻近像素，并将在膨胀或侵蚀效果中使用。"]}),"\n",(0,s.jsxs)(n.p,{children:["但实际上，半径（",(0,s.jsx)(n.code,{children:"radius"}),"）定义了一个结构元素的内核大小，它更像是一个 ",(0,s.jsx)(n.code,{children:"3 x 3"})," 矩阵，其宽度和高度由 ",(0,s.jsx)(n.code,{children:"radius"})," 属性中指定的像素数决定。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Y,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["如上图所示，输入图像是由一系列 ",(0,s.jsx)(n.code,{children:"0"})," 和 ",(0,s.jsx)(n.code,{children:"1"})," 组成的二值化矩阵，",(0,s.jsx)(n.code,{children:"1"})," 表示白色像素，",(0,s.jsx)(n.code,{children:"0"})," 表示黑色像素。图中的左则是侵蚀操作前的二值化图像，右侧是侵蚀操作后的二值化图像。可以看到，白色区域被侵蚀掉了一部分，只有中心的几个白色像素保留了下来。边缘的白色像素被“侵蚀”掉，变成了黑色像素。"]}),"\n",(0,s.jsxs)(n.p,{children:["其实，我们在实际使用 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜时，不需要理解这么多。你只要知道可以向 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 的 ",(0,s.jsx)(n.code,{children:"radius"})," 属性设置一个或两个值，这将决定你的元素被侵蚀或膨胀的程度。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们来看一个简单的示例，使用 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 分别定义了名为 ",(0,s.jsx)(n.code,{children:"dilate"})," 和 ",(0,s.jsx)(n.code,{children:"erode"})," 的滤镜，它们对应着 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜的 ",(0,s.jsx)(n.code,{children:"operator"})," 操作符，并且将半径设置为 ",(0,s.jsx)(n.code,{children:"3"})," ："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="erode">\n            <feMorphology operator="erode" radius="3"  in="SourceGraphic" result="ERODE" />\n        </filter>\n        <filter id="dilate">\n            <feMorphology operator="dilate" radius="3"  in="SourceGraphic" result="DILATE" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:"分别将它们应用于图像和文本元素上："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".dilate {\n    filter:url('#dilate');\n}\n\n.erode {\n    filter:url('#erode');\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:W,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["你会发现，当 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜作用于图像时，会产生两个结果："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["如果使用 ",(0,s.jsx)(n.code,{children:"dilate"})," （膨胀）操作符，图像尺寸会变大（上图左侧所示）；如果使用 ",(0,s.jsx)(n.code,{children:"erode"})," （侵蚀）操作符，图像尺寸会变小（上图右侧所示）"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"不管使用哪种操作符，图像看上去长满了很多斑点，整个图像失去了原有的细节"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["除了这两点之外，你可能还注意到了，",(0,s.jsx)(n.code,{children:"dilate"})," 和 ",(0,s.jsx)(n.code,{children:"erode"})," 还会导致颜色的差异，其中 ",(0,s.jsx)(n.code,{children:"dilate"})," 会产生亮色像素 输出，而 ",(0,s.jsx)(n.code,{children:"erode"})," 则会产生深色像素输出。这是由于以下原因所产生："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"erode"})," （默认值）将每个像素的每个通道设置为其邻居中最暗或最透明的值匹配，分别针对于 RGBA 每个通道"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"dilate"})," 将每个像素的每个通道设置为与其邻居中最亮或最不透明的值匹配，分别针对于 RGBA 每个通道"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["抛开技术细节不谈，如果将 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜应用于图像上，几乎会产生相同的结果：图像缩小（",(0,s.jsx)(n.code,{children:"erode"}),"）或放大（",(0,s.jsx)(n.code,{children:"dilate"}),"），并且图片会失去细节。"]}),"\n",(0,s.jsxs)(n.p,{children:["然而，",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜应用于文本（纯色或渐变色文本）上时，它只会使文本缩小或放大——不会发生明显的颜色变化。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:z,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["你可以尝试着拖动示例中的滑块，改变 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 元素的 ",(0,s.jsx)(n.code,{children:"radius"})," 值，查看滤镜对于图像和文本带来的变化："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/LYoLwPX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYoLwPX"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["请暂时记住 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 应用于文本上的效果，它可以使用文本加粗或变细。一旦使用 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 加粗或缩小文本，它可以用作其他滤镜的输入（",(0,s.jsx)(n.code,{children:"in"}),"），从而允许我们按照应有的方式创建文本轮廓。"]}),"\n",(0,s.jsxs)(n.p,{children:["需要知道的是，仅使用 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜是无法直接给文本添加描边效果，我们还需要应用其他滤镜（例如 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," ）才能实现文本描边效果。"]}),"\n",(0,s.jsxs)(n.h2,{id:"fecomposite-滤镜",children:[(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fecomposite-滤镜",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423746187273#heading-15",target:"_blank",rel:"noopener noreferrer",children:["我们快速回忆一下 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜"]}),"。它是一个合成两个元素的滤镜。它可以通过各种操作，将两个图像（即 ",(0,s.jsx)(n.code,{children:"in"})," 和 ",(0,s.jsx)(n.code,{children:"in2"})," ）合成在一起。其合成操作方式（",(0,s.jsx)(n.code,{children:"operator"}),"）主要有："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["应用 Porter-Duff 合成操作之一：",(0,s.jsx)(n.code,{children:"over"}),"、",(0,s.jsx)(n.code,{children:"in"}),"、",(0,s.jsx)(n.code,{children:"atop"}),"、",(0,s.jsx)(n.code,{children:"out"}),"、",(0,s.jsx)(n.code,{children:"xor"}),"、",(0,s.jsx)(n.code,{children:"lighter"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["应用一个分量级的算术运算（",(0,s.jsx)(n.code,{children:"arithmetic"}),"），其结果会限制在 ",(0,s.jsx)(n.code,{children:"0 ~ 1"})," 范围内"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["即 ",(0,s.jsx)(n.code,{children:"operator"})," 可以使用 ",(0,s.jsx)(n.code,{children:"over"})," （默认值）、",(0,s.jsx)(n.code,{children:"in"}),"、",(0,s.jsx)(n.code,{children:"out"}),"、",(0,s.jsx)(n.code,{children:"atop"}),"、",(0,s.jsx)(n.code,{children:"xor"})," 和 ",(0,s.jsx)(n.code,{children:"lighter"})," 等关键词，不同值的合成方式如下图所示："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:K,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"operator"})," 为 ",(0,s.jsx)(n.code,{children:"arithmetic"})," 时，",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜可以通过 ",(0,s.jsx)(n.code,{children:"k1"})," 、",(0,s.jsx)(n.code,{children:"k2"})," 、",(0,s.jsx)(n.code,{children:"k3"})," 和 ",(0,s.jsx)(n.code,{children:"k4"})," 等属性来设置合成操作。"]}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们主要会使用 ",(0,s.jsx)(n.code,{children:"out"})," 和 ",(0,s.jsx)(n.code,{children:"xor"})," 。"]}),"\n",(0,s.jsxs)(n.h2,{id:"svg-滤镜制作文本描边",children:["SVG 滤镜制作文本描边",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-滤镜制作文本描边",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["现在，让我们结合 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 和 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜创建带有轮廓的文本（即文本描边）。我们将一步一步地进行。下图是我们将要实现的效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/dyEzoyG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dyEzoyG"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["首先，我们在 SVG 中创建一个名为 ",(0,s.jsx)(n.code,{children:"#outline"})," 的滤镜，起初在 ",(0,s.jsx)(n.code,{children:"<filter>"})," 元素中没有任何滤镜基元："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="outline">\n            \x3c!-- 没有任何滤镜基元 --\x3e\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在 CSS 中通过 ",(0,s.jsx)(n.code,{children:"filter"})," 属性将 ",(0,s.jsx)(n.code,{children:"#outline"})," 滤镜应用于需要实现文本描边的元素上："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'h3 {\n    filter: url("#outline");\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们往 ",(0,s.jsx)(n.code,{children:"<filter>"})," 元素中添加第一个滤镜基元，即 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," ，并且将其 ",(0,s.jsx)(n.code,{children:"operator"})," 属性设置为 ",(0,s.jsx)(n.code,{children:"dilate"})," ，使文本变粗，具体要变粗多少取决于你想要的描边厚度。如果你想要一个 ",(0,s.jsx)(n.code,{children:"2px"})," 的描边厚度，只需要将 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 的 ",(0,s.jsx)(n.code,{children:"radius"})," 设置为 ",(0,s.jsx)(n.code,{children:"2"})," 。注意，为了保持文本描边厚度一致，需要将 ",(0,s.jsx)(n.code,{children:"radius"})," 属性的 ",(0,s.jsx)(n.code,{children:"x"})," 和 ",(0,s.jsx)(n.code,{children:"y"})," 值保持一致。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="outline">\n            <feMorphology in="SourceGraphic" operator="dilate" radius="2" result="DILATED" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["注意，请不要忘记给 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 设置一个 ",(0,s.jsx)(n.code,{children:"result"})," 值，因为接下来的滤镜需要引用 ",(0,s.jsx)(n.code,{children:"result"})," 值。个人建议，在使用 SVG 滤镜时，最好养成一个给每个滤镜基元设置 ",(0,s.jsx)(n.code,{children:"result"})," 值的习惯。"]}),"\n",(0,s.jsx)(n.p,{children:"你可能已经猜到了，上面的代码会使文本变粗："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["为了实现目标效果（一个镂空的，只有描边的文本效果），我们需要将原始文本与膨胀之后的文本合成在一起，这样只有膨胀文本（额外的 ",(0,s.jsx)(n.code,{children:"2px"}),"）的边缘可见，从而使它们看起来像镂空的描边文本。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们使用 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜来实现。将 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜的 ",(0,s.jsx)(n.code,{children:"result"})," 属性的值（",(0,s.jsx)(n.code,{children:"DILATED"}),"）作为 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜的第一个图像输入源（",(0,s.jsx)(n.code,{children:"in"}),"），并且将原始文本（",(0,s.jsx)(n.code,{children:"SourceGraphic"}),"）作为第二个图像输入源（",(0,s.jsx)(n.code,{children:"in2"}),"），同时设置 ",(0,s.jsx)(n.code,{children:"operator"})," 的值为 ",(0,s.jsx)(n.code,{children:"out"})," ，这样就可以去除重叠的原始文本部分："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="outline">\n            <feMorphology in="SourceGraphic" operator="dilate" radius="2" result="DILATED" />\n            <feComposite in="DILATED" in2="SourceGraphic" operator="out" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:"这样就实现了我们想要的文本描边效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:X,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/dyEzoyG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dyEzoyG"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，你也可以将 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜的 ",(0,s.jsx)(n.code,{children:"operator"})," 设置为 ",(0,s.jsx)(n.code,{children:"xor"})," ，将两者不重叠的部分进行合并。"]}),"\n",(0,s.jsxs)(n.p,{children:["再来看 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 的 ",(0,s.jsx)(n.code,{children:"operator"})," 为 ",(0,s.jsx)(n.code,{children:"erode"})," (侵蚀)又是如何制作文本描边："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="outline">\n            <feMorphology operator="erode" radius="2" in="SourceGraphic" result="ERODE" />\n            \x3c!-- <feComposite in="ERODE" in2="SourceGraphic" operator="out" /> --\x3e\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，我先把 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜注释掉了。现在，",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 将文本变细了："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["你可能会认为直接去掉示例代码中的注释，即可实现文本描边效果。意外是，并不能。当 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜操作符为 ",(0,s.jsx)(n.code,{children:"erode"})," （侵蚀）时，文本变细了。这意味着文本会向内侵蚀 ",(0,s.jsx)(n.code,{children:"radius"})," 的距离。"]}),"\n",(0,s.jsxs)(n.p,{children:["此时，即使通过 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜，将前一个滤镜的结果（",(0,s.jsx)(n.code,{children:"ERODE"}),"）设置为 ",(0,s.jsx)(n.code,{children:"in"})," ，原始文本设置为 ",(0,s.jsx)(n.code,{children:"in2"})," ，使两个元素进行合成操作。与之前不同的是，膨胀是向外扩展 ",(0,s.jsx)(n.code,{children:"radius"})," 的距离，",(0,s.jsx)(n.code,{children:"<feComposite>"})," 需要将两者重叠的部分进行合并，使文本只有描边轮廓存在；而侵蚀则是向内收缩 ",(0,s.jsx)(n.code,{children:"radius"})," 的距离，",(0,s.jsx)(n.code,{children:"<feComposite>"})," 需要将两者不重叠的部分进行合并，因此要将 ",(0,s.jsx)(n.code,{children:"operator"})," 设置为 ",(0,s.jsx)(n.code,{children:"xor"})," ，才能实现文本描边的效果（继续设置 ",(0,s.jsx)(n.code,{children:"out"})," 则屏幕上是空白的）："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="outline">\n            <feMorphology operator="erode" radius="2" in="SourceGraphic" result="ERODE" />\n            <feComposite in="ERODE" in2="SourceGraphic" operator="xor" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:F,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdveMo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdveMo"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["你可能已经发现了，上面两个示例所实现的文本描边效果都是镂空的，如果你想通过它们实现带有填充颜色的文本描边效果，相对而言还是比较棘手的。虽然 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜的 ",(0,s.jsx)(n.code,{children:"operator"})," 操作符设置为 ",(0,s.jsx)(n.code,{children:"lighter"})," 时，可以实现填充文本描边，但你无法控制文本填充的颜色。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["你可以尝试着在下面的的示例中，调整 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 和 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜的 ",(0,s.jsx)(n.code,{children:"operator"})," 以及 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜的 ",(0,s.jsx)(n.code,{children:"radius"})," ，查看这些参数对文本最终效果的影响："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/wvbqzBM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvbqzBM"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["如果你足够仔细的话，你会发现，",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜的操作符为 ",(0,s.jsx)(n.code,{children:"erode"})," （侵蚀）时，它的效果与 CSS 的 ",(0,s.jsx)(n.code,{children:"-webkit-text-stroke"})," 以及 SVG 的 ",(0,s.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,s.jsx)(n.code,{children:"stroke-width"})," 所设置的描边效果最接近，前提是没有显式设置 ",(0,s.jsx)(n.code,{children:"paint-order"})," 属性改变绘制顺序。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRezxm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRezxm"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["正如你所看到的，",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 和 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜创作镂空文本描边效果是一个很不错的选择。不过，我们很多时候需要的并不是镂空文本描边。这个时候，它们的结合就比较吃力了。"]}),"\n",(0,s.jsxs)(n.p,{children:["庆幸的是，",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423746187273",target:"_blank",rel:"noopener noreferrer",children:"SVG 滤镜提供了 17 种不同的滤镜基元"}),"，我们可以在 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 和 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 的基础上追加其他的滤镜基元，比如 ",(0,s.jsx)(n.code,{children:"<feFlood>"})," 和 ",(0,s.jsx)(n.code,{children:"<feMerge>"})," ："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<feFlood>"})," 滤镜基元用于生成一个填充指定颜色的图像。它通常与其他滤镜元素结合使用，以创建各种视觉效果。它的",(0,s.jsx)(n.code,{children:"flood-color"})," 属性可以指定填充颜色，",(0,s.jsx)(n.code,{children:"flood-opacity"})," 属性可以指定填充颜色的不透明度"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<feMerge>"})," 滤镜基础用于将多个输入图像合并成一个。它包含多个 ",(0,s.jsx)(n.code,{children:"<feMergeNode>"})," 子元素，每个 ",(0,s.jsx)(n.code,{children:"<feMergeNode>"})," 代表一个要合并的输入图像。合并顺序是按子元素的顺序进行的。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"我们来看下面这个效果，它是使用多个滤镜基元结合在一起实现的文本描边效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/VwOzKmO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwOzKmO"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["同样的，我们先从 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 开始，使用膨胀，将文本变粗："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="outline">\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DILATE" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["与前面示例不同的是，",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜的输入图像 ",(0,s.jsx)(n.code,{children:"in"})," 设置为 ",(0,s.jsx)(n.code,{children:"SourceAlpha"})," ，它将获取文本的 Alpha 通道值——即文本的黑色版本。在这种情况下，不管文本的 ",(0,s.jsx)(n.code,{children:"color"})," 是什么值，它都将会变成黑色。正如前面的示例所示，如果你期望文本描边颜色与 ",(0,s.jsx)(n.code,{children:"color"})," 属性始终保持一致，则需要将输入源设置为 ",(0,s.jsx)(n.code,{children:"SourceGraphic"})," 。"]}),"\n",(0,s.jsx)(n.p,{children:"这个时候，上面代码呈现的结果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:O,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["文本由蓝色变成了黑色，并且向外扩展了 ",(0,s.jsx)(n.code,{children:"4px"})," 。"]}),"\n",(0,s.jsxs)(n.p,{children:["接着，我们将使用 ",(0,s.jsx)(n.code,{children:"<feFlood>"})," 滤镜，将滤镜区域填充为所需的颜色，例如 ",(0,s.jsx)(n.code,{children:"#41e0eb"})," ，并且将 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜的结果 ",(0,s.jsx)(n.code,{children:"DILATE"})," 作为该滤镜的图像输入源（即 ",(0,s.jsx)(n.code,{children:"in"})," 的值），与此同时，把它的结果命名为 ",(0,s.jsx)(n.code,{children:"NAVY"})," 。因为它需要作为其他滤镜的图像输入源。代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="outline">\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DILATE" />\n            <feFlood flood-color="#41e0eb" flood-opacity="1" result="NAVY" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这个时候，滤镜区域都填充了 ",(0,s.jsx)(n.code,{children:"#41e0eb"})," ，将看不到任何文本内容："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["不用着急，我们只需要使用 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜对 ",(0,s.jsx)(n.code,{children:"DILATE"})," （",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜的结果）和 ",(0,s.jsx)(n.code,{children:"NAVY"})," （",(0,s.jsx)(n.code,{children:"<feFlood>"})," 滤镜的结果）进行合成操作。其中，将 ",(0,s.jsx)(n.code,{children:"NAVY"})," 作为 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜的第一图像输入源（",(0,s.jsx)(n.code,{children:"in"}),"），",(0,s.jsx)(n.code,{children:"DILATE"})," 作为它的第二图像输入源（",(0,s.jsx)(n.code,{children:"in2"}),"），并且将其操作符 ",(0,s.jsx)(n.code,{children:"operator"})," 设置为 ",(0,s.jsx)(n.code,{children:"in"})," 。注意，同样将 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜的结果命个名，如 ",(0,s.jsx)(n.code,{children:"OUTLINE"})," ："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="outline">\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DILATE" />\n            <feFlood flood-color="#41e0eb" flood-opacity="1" result="NAVY" />\n            <feComposite in="NAVY" in2="DILATE" operator="in" result="OUTLINE" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["现在的结果是，只有与膨胀文本相交的填充颜色才会被渲染，并与该文本混合，从而文本变成了 ",(0,s.jsx)(n.code,{children:"<feFlood>"})," 滤镜设置的填充色，即 ",(0,s.jsx)(n.code,{children:"#41e0eb"})," ："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"现在离目标效果只差一步了。"}),"\n",(0,s.jsxs)(n.p,{children:["为了创建文本描边效果，我们将原始文本叠加在膨胀文本之外，这样只有膨胀文本（额外的 ",(0,s.jsx)(n.code,{children:"4px"})," ）的边缘会在原始文本后面可见，从而使用它们看起来像描边。这个叠加的动作，我们可以使用 ",(0,s.jsx)(n.code,{children:"<feMerge>"})," 滤镜来完成，它可以将文本叠回在其轮廓（膨胀文本）之上。"]}),"\n",(0,s.jsxs)(n.p,{children:["简单地说，在最后一步中，我们使用 ",(0,s.jsx)(n.code,{children:"<feMerge>"})," 滤镜将 ",(0,s.jsx)(n.code,{children:"<feFlooad>"})," 生成的彩色文本与原始文本相互叠加，最终得到我们想要的文本描边效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="outline">\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DILATE" />\n            <feFlood flood-color="#41e0eb" flood-opacity="1" result="NAVY" />\n            <feComposite in="NAVY" in2="DILATE" operator="in" result="OUTLINE" />\n            <feMerge>\n                <feMergeNode in="OUTLINE" />\n                <feMergeNode in="SourceGraphic" />\n            </feMerge>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/VwOzKmO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwOzKmO"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"如此一来，我们就通过 SVG 滤镜分别实现了镂空描边文本（也称凹陷文本）效果，这意味着文本的内部被“雕刻出来”，这样你就可以通过轮廓看到其背后的背景。另外一种效果就是上面实例所展示的效果，即文本和描边都带有颜色。"}),"\n",(0,s.jsx)(n.p,{children:"除此之外，文本还可以是带有渐变颜色的文本，SVG 滤镜只用于描边，例如下面这个效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdvbXM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdvbXM"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"就这个效果而言，我们使用还是同一个滤镜："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="outline">\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DILATE" />\n            <feFlood flood-color="#41e0eb" flood-opacity="1" result="NAVY" />\n            <feComposite in="NAVY" in2="DILATE" operator="in" result="OUTLINE" />\n            <feMerge>\n                <feMergeNode in="OUTLINE" />\n                <feMergeNode in="SourceGraphic" />\n            </feMerge>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:"不同之处是，通过 CSS 给文本设置了一个渐变效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"h3 {\n    color: #2F3791;\n    filter: url('#outline');\n    background: linear-gradient(45deg, #e3ca2b, #e11212);\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["与此同时，我还发现个非常有意思的效果，SVG 滤镜作于元素上时，它不仅仅影响的是元素的内容（例如文本）。当我们给 ",(0,s.jsx)(n.code,{children:"h3"})," 元素设置 ",(0,s.jsx)(n.code,{children:"border"})," 、",(0,s.jsx)(n.code,{children:"box-shadow"})," 、",(0,s.jsx)(n.code,{children:"text-shadow"})," 和 ",(0,s.jsx)(n.code,{children:"outline"})," 时，也会受到滤镜的影响："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"h3 {\n    filter: url('#outline');\n    background: linear-gradient(45deg, #e3ca2b, #e11212);\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    border-radius: .2em;\n    outline: 4px solid #FF5722;\n    outline-offset: 16px;\n    border: 4px solid;\n    box-shadow: 0 0 .5em .5em rgb(120 120 120 / .5);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/xxNLRaO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxNLRaO"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["这是因为滤镜是在所有其他 CSS 效果之后应用的，除了剪切和遮罩。这意味着，如果你想一个不随滤镜变色的阴影，你需要单独 SVG 滤镜相关的滤镜基元来实现。这个后面会有课程专门阐述。但有的时候，它也能让你获得意外的收获，例如上图中的 ",(0,s.jsx)(n.code,{children:"border"})," 和 ",(0,s.jsx)(n.code,{children:"ouline"})," 边框效果。"]}),"\n",(0,s.jsxs)(n.h2,{id:"其他文本效果",children:["其他文本效果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#其他文本效果",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["虽然我们这节课的主题是：使用 SVG 滤镜给文本添加描边效果。但我想告诉大家的是，SVG 滤镜不仅限于用于制作描边文本效果。它还可以与 CSS 相关的特性结合起来制作一些更有创意，更丰富的文本效果。例如下面这几个由 ",(0,s.jsx)(n.a,{href:"https://codepen.io/thebabydino",target:"_blank",rel:"noopener noreferrer",children:"@Ana Tudor"})," 提供的文本效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/bGJvOmr",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/thebabydino/full/bGJvOmr"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/YzMMNKE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/thebabydino/full/YzMMNKE"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/PogJybr",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/thebabydino/full/PogJybr"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/LYvzmLW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/thebabydino/full/LYvzmLW"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/ZEZXaZZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/thebabydino/full/ZEZXaZZ"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/thebabydino/full/QWPqQpN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/thebabydino/full/QWPqQpN"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这些效果看上去似乎很复杂，但掌握了 SVG 滤镜基元的应用以及相关的技巧，实现这些效果并不复杂。"}),"\n",(0,s.jsx)(n.p,{children:"需要知道的是，当你面对一个 SVG 滤镜创建的复杂效果时，首先不要慌张，只需要将最终结果分解为较小的操作（每个小操作对应一个滤镜基元创建的效果），然后使用一个操作的结果作为另一个操作的输入，最终合并我们创建的所有层，就可以实现最终看似复杂的效果。"}),"\n",(0,s.jsx)(n.p,{children:"我们以下图这个效果为例："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:L,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLvapP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLvapP"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"为了更好地理解和实现这种效果，我们可以将其分解成几个基本构件："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"橙红色文字：这是效果的基础层，表示最终要呈现的文字"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"红色偏移：这个效果模拟了文字的立体感，类似于文字的后面有阴影的效果"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"透明间隙：在橙红色文本和红色阴影之间有一个透明的间隙，使得两者之间有一定的分离感"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"文字的粗糙、风化效果：橙红色文字具有粗糙、风化的外观，增加了整体效果的视觉冲击力"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"整个效果是通过多个小模块（滤镜基元）来构建。每个构件是由一组或多组滤镜基元构成的，这些滤镜基元组合成一个统一的输出。这个效果的构建过程如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"接下来，我们一步一步来实现上图中的每个构件。"}),"\n",(0,s.jsxs)(n.p,{children:["首先准备输入源，它其实就是一个 HTML 元素，并且在 CSS 中使用 ",(0,s.jsx)(n.code,{children:"fiter"})," 属性引用 SVG 的 ",(0,s.jsx)(n.code,{children:"<filter>"})," 定义的滤镜。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<h3>SVG Awesome!</h3>\n\n<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 这个滤镜什么都还没开始做 --\x3e\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'h3 {\n    transform: rotate(-12deg);\n    font: 900 140px/1 "Racing Sans One", cursive;\n    color: #FF5722;\n\n    text-align: center;\n    filter: url("#filter");\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["注意，接下来，我们要往 ",(0,s.jsx)(n.code,{children:"<filter>"})," 元素中添加多个滤镜基元，相比之前的案例，这个滤镜会复杂得多。这意味着，我们在制作一个复杂的滤镜过程中，可能会添加和删除滤镜规则，改变滤镜基元出现的先后顺序和值。在这个过程中很可能会使自己迷失方向。因此，我们在使用滤镜时，就要养成一些好的习惯，或制定一些规则，有助于自己跟踪发生的事情，避免在混乱的场景中迷失自我。"]}),"\n",(0,s.jsx)(n.p,{children:"当然，这些规则不一定适合你，但可以给你提供制定规则的一些方向和思考。例如："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["分组：可以根据滤镜基元分成不同的模块组，例如边框（",(0,s.jsx)(n.code,{children:"BORDER"}),"）、填充（",(0,s.jsx)(n.code,{children:"FILL"}),"）、斜角（",(0,s.jsx)(n.code,{children:"BEVEL"}),"）等，并且尽可能的在代码中添加注释"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["命名：良好的命名约定有助于你构建滤镜并跟踪滤镜基元内外发生的事情。命名规则可以根据自己的习惯来定义，比如 ",(0,s.jsx)(n.code,{children:"BEVEL_10"})," 、",(0,s.jsx)(n.code,{children:"FILL_20"})," 等，它们命名模式是 ",(0,s.jsx)(n.code,{children:"NAME-OF-GROUP_order-number"})," 。我个人比较喜欢用大写字母来给滤镜基元的结果命名"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["始终为每个滤镜基元指定一个 ",(0,s.jsx)(n.code,{children:"in"})," 和 ",(0,s.jsx)(n.code,{children:"result"})," ，尤其是 ",(0,s.jsx)(n.code,{children:"result"})," 。在 SVG 中，如果省略 ",(0,s.jsx)(n.code,{children:"result"})," 属性值，那么它就会是其后继者的输入。这在一定程度之上，使滤镜效果不如你预期，而且也难以被发现"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["接下来，给滤镜准备相关的“素材”，例如流程图上最左侧和最右侧所示。需要一个填充颜色和纹理。在 SVG 滤镜中，可以使用 ",(0,s.jsx)(n.code,{children:"<feFlood>"})," 滤镜创建："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 创建一个带有颜色的区域 --\x3e\n            <feFlood flood-color="#f00e0e" result="COLOR-red" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<feFlood>"})," 会创建一个 ",(0,s.jsx)(n.code,{children:"#f00e0e"})," （红色）矩形，该矩形的大与滤镜区域相同："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["这个 ",(0,s.jsx)(n.code,{children:"COLOR-red"})," 填充区域暂时先放着，为了不影响接下来可看到的效果，你可以先把整个 ",(0,s.jsx)(n.code,{children:"<feFlood>"})," 滤镜注释掉。"]}),"\n",(0,s.jsxs)(n.p,{children:["与准备红色填充区域类似，",(0,s.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423746187273#heading-7",target:"_blank",rel:"noopener noreferrer",children:["使用 ",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜准备一个纹理图案"]}),"，它的输出与 ",(0,s.jsx)(n.code,{children:"<feFlood>"})," 类似，是一个与滤镜区域大小相同的矩形，不同的是，填充的是嘈杂的、无结构的纹理："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 创建一个带有颜色的区域 --\x3e\n            <feFlood flood-color="#f00e0e" result="COLOR-red" />\n            \x3c!-- 创建纹理 --\x3e\n            <feTurbulence baseFrequency=".05,.004" type="fractalNoise" numOctaves="4" seed="0" result="FRACTAL-TEXTURE_10" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"注意，这个滤镜基元很耗性能，它的属性值的设置直接会影响滤镜的性能，因此在使用的时候请慎用！"}),"\n",(0,s.jsxs)(n.p,{children:["另外，默认情况下，",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜输出的是一个带有颜色的纹理（如上图所示）。这可能不是你想要的纹理效果，你可能需要一个灰度 Alpha 图，稍微增加一点对比度会更好。",(0,s.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318058076569638",target:"_blank",rel:"noopener noreferrer",children:["我们可以使用上一节课介绍的 ",(0,s.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜"]}),"来调整纹理图案的颜色，比如增加对比度，将其转换为一个灰色的纹理："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 创建一个带有颜色的区域 --\x3e\n            <feFlood flood-color="#f00e0e" result="COLOR-red" />\n            \x3c!-- 创建纹理 --\x3e\n            <feTurbulence baseFrequency=".05,.004" type="fractalNoise" numOctaves="4" seed="0" result="FRACTAL-TEXTURE_10" />\n            \x3c!-- 使用高阶颜色矩阵，将纹理转换为灰色的 --\x3e\n            <feColorMatrix  \n                values="\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 -1.2 1.1" \n                in="FRACTAL-TEXTURE_10" result="FRACTAL-TEXTURE_20" type="matrix" /> \n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["注意，",(0,s.jsx)(n.code,{children:"<feColorMatrix>"})," 滤镜的输入源（",(0,s.jsx)(n.code,{children:"in"}),"）是 ",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 滤镜的输出结果（",(0,s.jsx)(n.code,{children:"result"}),"），即 ",(0,s.jsx)(n.code,{children:"FRACTAL-TEXTURE_10"})," 。这时候你看到的纹理一个灰色的纹理，不再是彩色纹理："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"正如你所看到的，到目前为止，这几个滤镜基元创建的效果并没有应用于文本上。这就相当于你在厨房炒菜一样，菜你备好了，也切好了，但还没有下锅开始炒。你就无法吃到美味可口的菜。"}),"\n",(0,s.jsxs)(n.p,{children:["现在，我们将根据流程图中间那条线往下创作。首先，使用 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜基元使文本变粗："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 创建一个带有颜色的区域 --\x3e\n            <feFlood flood-color="#f00e0e" result="COLOR-red" />\n            \x3c!-- 创建纹理 --\x3e\n            <feTurbulence baseFrequency=".05,.004" type="fractalNoise" numOctaves="4" seed="0" result="FRACTAL-TEXTURE_10" />\n            \x3c!-- 使用高阶颜色矩阵，将纹理转换为灰色的 --\x3e\n            <feColorMatrix  \n                values="\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 -1.2 1.1" \n                in="FRACTAL-TEXTURE_10" result="FRACTAL-TEXTURE_20" type="matrix" /> \n            \x3c!-- 使文本变粗 --\x3e   \n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="STROKE_10" />     \n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"现在文本是变粗了，但整个文本并没有任何立体感。而目标效果是一个带有 3D 立体感的文本。"}),"\n",(0,s.jsxs)(n.p,{children:["在 SVG 中，",(0,s.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423746187273#heading-10",target:"_blank",rel:"noopener noreferrer",children:["可以使用 ",(0,s.jsx)(n.code,{children:"<feConvolveMatrix>"})," 滤镜基元使文本具有 3D 视觉效果"]}),"。它通过定义一个矩阵（也称为卷积核或滤波器）来操作图像的像素值，从而实现各种效果，例如模糊、锐化、边缘检测等，甚至可以让文本看起来有 3D 凸出的效果。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 创建一个带有颜色的区域 --\x3e\n            <feFlood flood-color="#f00e0e" result="COLOR-red" />\n            \x3c!-- 创建纹理 --\x3e\n            <feTurbulence baseFrequency=".05,.004" type="fractalNoise" numOctaves="4" seed="0" result="FRACTAL-TEXTURE_10" />\n            \x3c!-- 使用高阶颜色矩阵，将纹理转换为灰色的 --\x3e\n            <feColorMatrix  \n                values="\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 -1.2 1.1" \n                in="FRACTAL-TEXTURE_10" result="FRACTAL-TEXTURE_20" type="matrix" /> \n            \x3c!-- 使文本变粗 --\x3e  \n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="STROKE_10" />\n            \x3c!-- 使文本凸起，具有 3D 立体感 --\x3e\n            <feConvolveMatrix  \n                kernelMatrix="\n                    1 0 0 0 0 0 0 0 0\n                    0 1 0 0 0 0 0 0 0\n                    0 0 1 0 0 0 0 0 0\n                    0 0 0 1 0 0 0 0 0\n                    0 0 0 0 1 0 0 0 0\n                    0 0 0 0 0 1 0 0 0\n                    0 0 0 0 0 0 1 0 0\n                    0 0 0 0 0 0 0 1 0\n                    0 0 0 0 0 0 0 0 1" \n                order="9,9" divisor="1" in="BEVEL_10" result="BEVEL_20" />      \n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<feConvolveMatrix> 是所有滤镜中最复杂的一个"}),"，这里简单解释一下："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:'order="9,9"'})})," ： ",(0,s.jsx)(n.code,{children:"order"})," 定义了卷积核的维度。在这里，",(0,s.jsx)(n.code,{children:'order="9,9"'})," 表示一个 ",(0,s.jsx)(n.code,{children:"9 x 9"})," 的矩阵"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:'divisor="1"'})})," ： ",(0,s.jsx)(n.code,{children:"divisor"})," 用于归一化卷积运算的结果。",(0,s.jsx)(n.code,{children:'divisor="1"'})," 意味着卷积结果不会进行任何缩放"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"kernelMatrix"})}),"： 这个属性包含了实际的卷积核矩阵的值。在这里，",(0,s.jsx)(n.code,{children:"kernelMatrix"})," 被定义为一个 ",(0,s.jsx)(n.code,{children:"9 x 9"})," 的单位矩阵，其中对角线上的元素为 ",(0,s.jsx)(n.code,{children:"1"}),"，其余元素为 ",(0,s.jsx)(n.code,{children:"0"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"现在，你看到的文本是具有 3D 立体效果的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["紧接着，我们使用 ",(0,s.jsx)(n.code,{children:"<feOffset>"})," 对 ",(0,s.jsx)(n.code,{children:"<feConvolveMatrix>"})," 滤镜的输出结果 ",(0,s.jsx)(n.code,{children:"BEVEL_20"})," 进行偏移处理，使其与文本之间有一定的间隔："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 创建一个带有颜色的区域 --\x3e\n            <feFlood flood-color="#f00e0e" result="COLOR-red" />\n            \x3c!-- 创建纹理 --\x3e\n            <feTurbulence baseFrequency=".05,.004" type="fractalNoise" numOctaves="4" seed="0" result="FRACTAL-TEXTURE_10" />\n            \x3c!-- 使用高阶颜色矩阵，将纹理转换为灰色的 --\x3e\n            <feColorMatrix  \n                values="\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 -1.2 1.1" \n                in="FRACTAL-TEXTURE_10" result="FRACTAL-TEXTURE_20" type="matrix" /> \n            \x3c!-- 使文本变粗 --\x3e  \n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="STROKE_10" />\n            \x3c!-- 使文本凸起，具有 3D 立体感 --\x3e\n            <feConvolveMatrix  \n                kernelMatrix="\n                    1 0 0 0 0 0 0 0 0\n                    0 1 0 0 0 0 0 0 0\n                    0 0 1 0 0 0 0 0 0\n                    0 0 0 1 0 0 0 0 0\n                    0 0 0 0 1 0 0 0 0\n                    0 0 0 0 0 1 0 0 0\n                    0 0 0 0 0 0 1 0 0\n                    0 0 0 0 0 0 0 1 0\n                    0 0 0 0 0 0 0 0 1" \n                order="9,9" divisor="1" in="BEVEL_10" result="BEVEL_20" />    \n            \x3c!-- 对 BEVEL_20 做偏移处理 --\x3e\n            <feOffset dx="4" dy="4" in="BEVEL_20" result="BEVEL_25" />          \n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["到这里，大部构件都已制作完。接下来要做的就是使用 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 将相关的图像合成在一起。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 创建一个带有颜色的区域 --\x3e\n            <feFlood flood-color="#f00e0e" result="COLOR-red" />\n            \x3c!-- 创建纹理 --\x3e\n            <feTurbulence baseFrequency=".05,.004" type="fractalNoise" numOctaves="4" seed="0" result="FRACTAL-TEXTURE_10" />\n            \x3c!-- 使用高阶颜色矩阵，将纹理转换为灰色的 --\x3e\n            <feColorMatrix  \n                values="\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 -1.2 1.1" \n                in="FRACTAL-TEXTURE_10" result="FRACTAL-TEXTURE_20" type="matrix" /> \n            \x3c!-- 使文本变粗 --\x3e  \n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="STROKE_10" />\n            \x3c!-- 使文本凸起，具有 3D 立体感 --\x3e\n            <feConvolveMatrix  \n                kernelMatrix="\n                    1 0 0 0 0 0 0 0 0\n                    0 1 0 0 0 0 0 0 0\n                    0 0 1 0 0 0 0 0 0\n                    0 0 0 1 0 0 0 0 0\n                    0 0 0 0 1 0 0 0 0\n                    0 0 0 0 0 1 0 0 0\n                    0 0 0 0 0 0 1 0 0\n                    0 0 0 0 0 0 0 1 0\n                    0 0 0 0 0 0 0 0 1" \n                order="9,9" divisor="1" in="BEVEL_10" result="BEVEL_20" />    \n            \x3c!-- 对 BEVEL_20 做偏移处理 --\x3e\n            <feOffset dx="4" dy="4" in="BEVEL_20" result="BEVEL_25" />    \n            \x3c!-- 合成图像: BEVEL_25 和 STROKE_10 合成在一起 --\x3e\n            <feComposite operator="out" in="BEVEL_25" in2="STROKE_10" result="BEVEL_30" />      \n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["请注意 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜中的 ",(0,s.jsx)(n.code,{children:'in="BEVEL_25"'})," 和 ",(0,s.jsx)(n.code,{children:'in2="STROKE_10"'})," ，它们表示将 ",(0,s.jsx)(n.code,{children:"BEVEL_25"})," 作为第一输入图像源，",(0,s.jsx)(n.code,{children:"STROKE_10"})," 则是第二输入图像源。它们都是其他滤镜所产生的结果："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"BEVEL_25"})," 是 ",(0,s.jsx)(n.code,{children:"<feOffset>"})," 对 ",(0,s.jsx)(n.code,{children:"<feConvolveMatrix>"})," 进行偏移之后的结果"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"STROKE_10"})," 是 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 滤镜将文本变粗之后的结果"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["所以说，给每个滤镜基元设置 ",(0,s.jsx)(n.code,{children:"result"})," 属性的值是多么的重要，否则你要按照前后顺序来编写滤镜基础，甚至还不一定能让你有机会按照正确顺序编写滤镜基元。再次强调一下，请记得为你的每个滤镜基元设置 ",(0,s.jsx)(n.code,{children:"result"})," 。"]}),"\n",(0,s.jsx)(n.p,{children:"现在，效果变成下图这样："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["离目标越来越近了！还记得之前 ",(0,s.jsx)(n.code,{children:"<feFlood>"})," 和 ",(0,s.jsx)(n.code,{children:"<feTurbulence>"})," 创建的素材吗？接下来，就可以用上了。我们继续使用 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜，将 ",(0,s.jsx)(n.code,{children:"<feFlood>"})," 创建的填充图像应用到 ",(0,s.jsx)(n.code,{children:"BEVEL_30"})," ："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 创建一个带有颜色的区域 --\x3e\n            <feFlood flood-color="#f00e0e" result="COLOR-red" />\n            \x3c!-- 创建纹理 --\x3e\n            <feTurbulence baseFrequency=".05,.004" type="fractalNoise" numOctaves="4" seed="0" result="FRACTAL-TEXTURE_10" />\n            \x3c!-- 使用高阶颜色矩阵，将纹理转换为灰色的 --\x3e\n            <feColorMatrix  \n                values="\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 -1.2 1.1" \n                in="FRACTAL-TEXTURE_10" result="FRACTAL-TEXTURE_20" type="matrix" /> \n            \x3c!-- 使文本变粗 --\x3e  \n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="STROKE_10" />\n            \x3c!-- 使文本凸起，具有 3D 立体感 --\x3e\n            <feConvolveMatrix  \n                kernelMatrix="\n                    1 0 0 0 0 0 0 0 0\n                    0 1 0 0 0 0 0 0 0\n                    0 0 1 0 0 0 0 0 0\n                    0 0 0 1 0 0 0 0 0\n                    0 0 0 0 1 0 0 0 0\n                    0 0 0 0 0 1 0 0 0\n                    0 0 0 0 0 0 1 0 0\n                    0 0 0 0 0 0 0 1 0\n                    0 0 0 0 0 0 0 0 1" \n                order="9,9" divisor="1" in="BEVEL_10" result="BEVEL_20" />    \n            \x3c!-- 对 BEVEL_20 做偏移处理 --\x3e\n            <feOffset dx="4" dy="4" in="BEVEL_20" result="BEVEL_25" />    \n            \x3c!-- 合成图像: BEVEL_25 和 STROKE_10 合成在一起 --\x3e\n            <feComposite operator="out" in="BEVEL_25" in2="STROKE_10" result="BEVEL_30" />\n            \x3c!-- 给 BEVEL_30 上色 --\x3e\n            <feComposite in="COLOR-red" in2="BEVEL_30" operator="in" result="BEVEL_40" />      \n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:"这个时候，文本的“阴影”部分变成了红色："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["文本“凸起部分”已经是红色了，接下来，我们只需要使用 ",(0,s.jsx)(n.code,{children:"<feMerge>"})," 滤镜将 ",(0,s.jsx)(n.code,{children:"BEVEL_40"})," 与文本自身（",(0,s.jsx)(n.code,{children:"SourceGraphic"}),"）重叠在一起，文本就会带有与 ",(0,s.jsx)(n.code,{children:"color"})," 值一样的颜色："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 创建一个带有颜色的区域 --\x3e\n            <feFlood flood-color="#f00e0e" result="COLOR-red" />\n            \x3c!-- 创建纹理 --\x3e\n            <feTurbulence baseFrequency=".05,.004" type="fractalNoise" numOctaves="4" seed="0" result="FRACTAL-TEXTURE_10" />\n            \x3c!-- 使用高阶颜色矩阵，将纹理转换为灰色的 --\x3e\n            <feColorMatrix  \n                values="\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 -1.2 1.1" \n                in="FRACTAL-TEXTURE_10" result="FRACTAL-TEXTURE_20" type="matrix" /> \n            \x3c!-- 使文本变粗 --\x3e  \n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="STROKE_10" />\n            \x3c!-- 使文本凸起，具有 3D 立体感 --\x3e\n            <feConvolveMatrix  \n                kernelMatrix="\n                    1 0 0 0 0 0 0 0 0\n                    0 1 0 0 0 0 0 0 0\n                    0 0 1 0 0 0 0 0 0\n                    0 0 0 1 0 0 0 0 0\n                    0 0 0 0 1 0 0 0 0\n                    0 0 0 0 0 1 0 0 0\n                    0 0 0 0 0 0 1 0 0\n                    0 0 0 0 0 0 0 1 0\n                    0 0 0 0 0 0 0 0 1" \n                order="9,9" divisor="1" in="BEVEL_10" result="BEVEL_20" />    \n            \x3c!-- 对 BEVEL_20 做偏移处理 --\x3e\n            <feOffset dx="4" dy="4" in="BEVEL_20" result="BEVEL_25" />    \n            \x3c!-- 合成图像: BEVEL_25 和 STROKE_10 合成在一起 --\x3e\n            <feComposite operator="out" in="BEVEL_25" in2="STROKE_10" result="BEVEL_30" />\n            \x3c!-- 给 BEVEL_30 上色 --\x3e\n            <feComposite in="COLOR-red" in2="BEVEL_30" operator="in" result="BEVEL_40" />      \n            \x3c!-- 将 BEVEL_40 和文本自身重叠在一起 --\x3e\n            <feMerge result="BEVEL_50">\n                <feMergeNode in="BEVEL_40" />\n                <feMergeNode in="SourceGraphic" />\n            </feMerge>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["看起来很接近期望的结果。最后一件事，继续使用 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜将带有灰度的纹理 ",(0,s.jsx)(n.code,{children:"FRACTAL-TEXTURE_20"})," 与上一步输出的结果 ",(0,s.jsx)(n.code,{children:"BEVEL_50"})," 合成在一起，就能使文本具有纹理效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            \x3c!-- 创建一个带有颜色的区域 --\x3e\n            <feFlood flood-color="#f00e0e" result="COLOR-red" />\n            \x3c!-- 创建纹理 --\x3e\n            <feTurbulence baseFrequency=".05,.004" type="fractalNoise" numOctaves="4" seed="0" result="FRACTAL-TEXTURE_10" />\n            \x3c!-- 使用高阶颜色矩阵，将纹理转换为灰色的 --\x3e\n            <feColorMatrix  \n                values="\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 0    0\n                    0 0 0 -1.2 1.1" \n                in="FRACTAL-TEXTURE_10" result="FRACTAL-TEXTURE_20" type="matrix" /> \n            \x3c!-- 使文本变粗 --\x3e  \n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="STROKE_10" />\n            <feOffset in="STROKE_10" result="BEVEL_10" />\n            \x3c!-- 使文本凸起，具有 3D 立体感 --\x3e\n            <feConvolveMatrix  \n                kernelMatrix="\n                    1 0 0 0 0 0 0 0 0\n                    0 1 0 0 0 0 0 0 0\n                    0 0 1 0 0 0 0 0 0\n                    0 0 0 1 0 0 0 0 0\n                    0 0 0 0 1 0 0 0 0\n                    0 0 0 0 0 1 0 0 0\n                    0 0 0 0 0 0 1 0 0\n                    0 0 0 0 0 0 0 1 0\n                    0 0 0 0 0 0 0 0 1" \n                order="9,9" divisor="1" in="BEVEL_10" result="BEVEL_20" />    \n            \x3c!-- 对 BEVEL_20 做偏移处理 --\x3e\n            <feOffset dx="4" dy="4" in="BEVEL_20" result="BEVEL_25" />    \n            \x3c!-- 合成图像: BEVEL_25 和 STROKE_10 合成在一起 --\x3e\n            <feComposite operator="out" in="BEVEL_25" in2="STROKE_10" result="BEVEL_30" />\n            \x3c!-- 给 BEVEL_30 上色 --\x3e\n            <feComposite in="COLOR-red" in2="BEVEL_30" operator="in" result="BEVEL_40" />      \n            \x3c!-- 将 BEVEL_40 和文本自身重叠在一起 --\x3e\n            <feMerge result="BEVEL_50">\n                <feMergeNode in="BEVEL_40" />\n                <feMergeNode in="SourceGraphic" />\n            </feMerge>\n            \x3c!-- 合成灰色纹理 --\x3e\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["到这里，SVG 滤镜要做的事情就完成了。为了使整体效果与我们目标效果一致，只需要 CSS 中为 ",(0,s.jsx)(n.code,{children:"body"})," 添加一个背景效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"body {\n    --rg:radial-gradient(0.1875em, #fff4 calc(100% - 1px), #0000);\n    background: var(--rg), var(--rg) 0.5em 0.5em #066158;\n    background-size: 1em 1em;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"你看到的最终效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLvapP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLvapP"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"是不是很完美！"}),"\n",(0,s.jsx)(n.p,{children:"那么，其他滤镜效果你都可以按这个方式来制作！感兴趣的同学可以试一下！"}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["虽然我们主要围绕着使用 ",(0,s.jsx)(n.code,{children:"<feMorphology>"})," 和 ",(0,s.jsx)(n.code,{children:"<feComposite>"})," 滤镜为你的 SVG 或 HTML 文本内容添加描边效果，但 SVG 滤镜绝仅限于制作描边效果。我们可以通过组合多个不同的 SVG 滤镜基元为文本内容添加更丰富，更具创意的效果。只不过这个过程是复杂的！"]}),"\n",(0,s.jsx)(n.p,{children:"这也意味着，要想使用 SVG 滤镜创造出有创意，吸引人的效果（不仅限于文本），需要对 SVG 滤镜基元有足够深的认识与了解。其中有一个通用且实用的小技巧，那就是时不时的应用不同的 SVG 滤镜，调整它们的属性参数，并将这些效果记录下来。甚至还可以将多个滤镜使用不同的方式组合起来创建出其他更复杂的效果。通过这个过程，除了能帮助更好的理解和掌握 SVG 滤镜之外，还可能创造出令你感到惊艳的效果。"}),"\n",(0,s.jsxs)(n.p,{children:["当然，这个过程你也可以借助在线工具，去调整滤镜属性参数，获取你想要的滤镜效果。例如 ",(0,s.jsx)(n.a,{href:"https://yoksel.github.io/svg-filters/#/",target:"_blank",rel:"noopener noreferrer",children:"SVG Filters 工具"}),"："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["URL：",(0,s.jsx)(n.a,{href:"https://yoksel.github.io/svg-filters/#/",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/svg-filters/#/"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["URL:",(0,s.jsx)(n.a,{href:"https://svgfm.chriskirknielsen.com/",target:"_blank",rel:"noopener noreferrer",children:"https://svgfm.chriskirknielsen.com/"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["URL:",(0,s.jsx)(n.a,{href:"https://svgfilters.com/",target:"_blank",rel:"noopener noreferrer",children:"https://svgfilters.com/"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"最后，希望你能将你的创作或你觉得有意思的滤镜效果在评论中与大家一起分享！"})]})}function et(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(eh,{...e})}):eh(e)}let ea=et;et.__RSPRESS_PAGE_META={},et.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F37-%E9%AB%98%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E6%BB%A4%E9%95%9C%E7%9A%84%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%96%87%E6%9C%AC%E6%8F%8F%E8%BE%B9.md"]={toc:[{text:"关于描边的基础知识",id:"关于描边的基础知识",depth:2},{text:"实现文本描边的常见方案",id:"实现文本描边的常见方案",depth:2},{text:"`<feMorphology>` 滤镜",id:"femorphology-滤镜",depth:2},{text:"`<feComposite>` 滤镜",id:"fecomposite-滤镜",depth:2},{text:"SVG 滤镜制作文本描边",id:"svg-滤镜制作文本描边",depth:2},{text:"其他文本效果",id:"其他文本效果",depth:2},{text:"总结",id:"总结",depth:2}],title:"37-高级篇：SVG 滤镜的进阶之文本描边",headingTitle:"37-高级篇：SVG 滤镜的进阶之文本描边",frontmatter:{}}}}]);