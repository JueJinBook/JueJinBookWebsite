"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["72926"],{507349:function(e,n,t){t.r(n),t.d(n,{default:()=>l});var i=t(552676),r=t(740453);let s=t.p+"static/image/54f126424b7837acc308c9847e5042a0.e1161843.webp";function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",img:"img",strong:"strong"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"11-加餐实现文章生成器网页版",children:["11 加餐：实现文章生成器网页版",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-加餐实现文章生成器网页版",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"现在，我们已经实现了一个完整的命令行版本的文章生成器，但还可以做得更好，把它变成一个网页版的发布文章生成器，这样就可以在浏览器中直接使用了。"}),"\n",(0,i.jsx)(n.p,{children:"我们的文章生成器已经支持了 ES Modules，所以理论上可以直接在浏览器中使用它。但使用前，我们还需要做一些工作。"}),"\n",(0,i.jsx)(n.p,{children:"如果不考虑兼容性，我们在浏览器中可以把前面的模块直接 import 进来。而如果考虑兼容性，那我们可以使用 Webpack 或者 Esbuild 等工具来打包代码，这样就可以在不支持 ES Modules 的浏览器中使用了。"}),"\n",(0,i.jsx)(n.p,{children:"我们先来看看不考虑兼容性的情况下，如何在浏览器中使用我们的文章生成器。"}),"\n",(0,i.jsxs)(n.h2,{id:"直接使用-es-modules",children:["直接使用 ES Modules",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#直接使用-es-modules",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在加载模块之前，我们先准备一下 HTML 和 CSS："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="zh-CN">\n  <head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>狗屁不通文章生成器</title>\n  <link rel="stylesheet" href="style.css">\n  </head>\n  <body>\n    <header>\n      <div class="options">\n        <div>最小字数：<input id="min" type="range" min="500" max="5000" step="100" value="2000"><span>2000</span></div>\n        <div>最大字数：<input id="max" type="range" min="1000" max="10000" step="100" value="5000"><span>5000</span></div>\n      </div>\n      <div class="ref"><a href="https://github.com/menzi11/BullshitGenerator">原版</a></div>\n      <div class="title"><span>标题：</span><input id="title" type="text" value="">\n        <button id="generate">生成</button>\n        <button id="anotherTitle">换</button>\n      </div>\n    </header>\n    <main>\n      <article></article>\n    </main>\n    <footer>改进版：<a href="https://github.com/akira-cn/bullshit-generator-js">bullshit-generator-js</a> 作者：月影</footer>\n  </body>\n</html>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"header {\n  height: 120px;\n  border-bottom: solid 1px #777;\n}\n.options {\n  float: right;\n  display: flex;\n  flex-direction: column;\n}\n.options div {\n  width: 300px;\n}\n#title {\n  font-size: 1.5rem;\n}\n.title {\n  clear: both;\n  line-height: 60px;\n  text-align: center;\n  font-size: 1.5rem;\n  padding-top: 12px;\n}\n.title input {\n  outline: none;\n  border: none;\n  border-bottom: solid 1px black;\n  text-align: center;\n  width: 45%;\n  max-width: 600px;\n}\n.options input {\n  margin-right: 10px;\n}\n.title button {\n  font-size: 1.5rem;\n  margin-left: 10px;\n  border: none;\n  background: #444;\n  color: #eee;\n}\nmain {\n  padding-bottom: 40px;\n}\nsection {\n  text-indent: 3rem;\n  padding: 10px 0;\n}\nfooter {\n  position: fixed;\n  width: 100%;\n  bottom: 0;\n  background-color: white;\n}\n@media screen and (max-width: 480px) {\n  .title span {display: none;}\n  #title {font-size: 1.2rem;}\n  .title button {\n    font-size: 1.2rem;\n  }\n  section {text-indent: 2.4rem;}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"在 HTML 里，我们添加参数面板，用来设置标题和字数范围。在 CSS 里，我们添加了一些基础样式，让页面看起来更舒服一些。"}),"\n",(0,i.jsx)(n.p,{children:"现在整个页面看上去如下图所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:s,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["接下来，我们直接在 HTML 中添加",(0,i.jsx)(n.code,{children:"script"}),"标签，然后使用",(0,i.jsx)(n.code,{children:'type="module"'}),"来加载我们的模块："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"<script type=\"module\">\n  import {generate} from './lib/generator.js';\n  import {createRandomPicker} from './lib/random.js';\n<\/script>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["在 HTML 文件中，我们可以在",(0,i.jsx)(n.code,{children:"script"}),"标签里使用",(0,i.jsx)(n.code,{children:'type="module"'}),"属性，这样浏览器就会默认用 ES Modules 的方式来运行其中的代码，我们也就可以通过",(0,i.jsx)(n.code,{children:"import"}),"来加载其他的模块了。我们一共加载了 generator.js 和 random.js 这两个模块。"]}),"\n",(0,i.jsx)(n.p,{children:"接下来我们实现对应的调用逻辑，代码并不复杂，如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import {generate} from './lib/generator.js';\nimport {createRandomPicker} from './lib/random.js';\nconst options = document.querySelector('.options');\nconst config = {min: 2000, max: 5000};\noptions.addEventListener('change', ({target}) => {\n  const num = Number(target.value);\n  config[target.id] = num;\n  target.parentNode.querySelector('input + span').innerHTML = num;\n});\nconst generateButton = document.getElementById('generate');\nconst anotherTitleButton = document.getElementById('anotherTitle');\nconst article = document.querySelector('article');\nconst titleEl = document.getElementById('title');\n\n(async function () {\n  const corpus = await (await fetch('./corpus/data.json')).json();\n  const pickTitle = createRandomPicker(corpus.title);\n  titleEl.value = pickTitle();\n  generateButton.addEventListener('click', () => {\n    const text = generate(titleEl.value, {corpus, ...config});\n    article.innerHTML = `<section>${text.join('</section><section>')}</section>`;\n  });\n  anotherTitleButton.addEventListener('click', () => {\n    titleEl.value = pickTitle();\n    if(article.innerHTML) generateButton.click();\n  });\n}());\n"})}),"\n",(0,i.jsxs)(n.p,{children:["这里我们主要是将参数面板的值同步到",(0,i.jsx)(n.code,{children:"config"}),"对象中，然后在点击生成按钮时，调用",(0,i.jsx)(n.code,{children:"generate"}),"函数来生成文章。文章生成之后，我们将文章内容添加到 article 元素中。这样，我们就完成了网页版的文章生成器。"]}),"\n",(0,i.jsxs)(n.p,{children:["你可以在",(0,i.jsx)(n.a,{href:"https://code.juejin.cn/pen/7136002977608761357",target:"_blank",rel:"noopener noreferrer",children:"码上掘金"}),"上查看最终版本的效果。"]}),"\n",(0,i.jsxs)(n.h2,{id:"将模块打包",children:["将模块打包",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#将模块打包",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"上面的代码，要以模块的方式加载到浏览器中，可能会带来两个问题：一个是如果浏览器版本比较老，不支持 ES Module，就不能正常运行代码；另一个是 ES Module 加载方式会增加 HTTP 请求数量，会影响网页的加载速度。"}),"\n",(0,i.jsx)(n.p,{children:"为了解决上述问题，我们可以将代码打包成一个单一的包(bundle)，来直接用默认的方式加载。可以使用的打包工具有很多种，比如流行的 Webpack、Rollup 和 Esbuild 等等。在这里，我们选择 Esbuild 来打包。"}),"\n",(0,i.jsx)(n.p,{children:"首先在我们的项目中安装 Esbuild："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install esbuild --save-dev\n"})}),"\n",(0,i.jsxs)(n.p,{children:["注意，在第 4 节中我们见过",(0,i.jsx)(n.code,{children:"--save"}),"参数，它会在模块安装后将安装包的名字和版本写入",(0,i.jsx)(n.code,{children:"package.json"}),"的 dependencies 字段中，这样我们就可以直接通过",(0,i.jsx)(n.code,{children:"npm install"}),"来安装模块了。"]}),"\n",(0,i.jsxs)(n.p,{children:["那在这里我们使用",(0,i.jsx)(n.code,{children:"--save-dev"}),"参数，它和",(0,i.jsx)(n.code,{children:"--save"}),"类似，只不过它将安装包的名字和版本写入",(0,i.jsx)(n.code,{children:"package.json"}),"的 devDependencies 字段中，这表示我们在进行开发的时候才需要依赖这个包，而不是在生产环境中使用。"]}),"\n",(0,i.jsxs)(n.p,{children:["关于",(0,i.jsx)(n.code,{children:"--save-dev"}),"的用法，我们在讲到工程化的时候会详细讨论，这里你只要了解这些就够了。"]}),"\n",(0,i.jsxs)(n.p,{children:["现在我们先继续看如何使用 Esbuild。首先，我们创建一个 ",(0,i.jsx)(n.code,{children:"build.js"})," 文件，内容如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import {build} from 'esbuild';\n\nconst buildOptions = {\n  entryPoints: ['./browser/index.js'],\n  outfile: './dist/index.js',\n  bundle: true,\n  minify: true,\n};\n\nbuild(buildOptions);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["然后，我们创建 ",(0,i.jsx)(n.code,{children:"browser/index.js"})," 文件，内容如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import {generate} from '../lib/generator.js';\nimport {createRandomPicker} from '../lib/random.js';\n\nconst defaultCorpus = require('../corpus/data.json');\n\nasync function loadCorpus(corpuspath) {\n  if(corpuspath) {\n    const corpus = await (await fetch(corpuspath)).json();\n    return corpus;\n  }\n  return defaultCorpus;\n}\n\nexport {generate, createRandomPicker, loadCorpus};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["接着我们修改项目的",(0,i.jsx)(n.code,{children:"package.json"}),"文件，添加："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'  "scripts": {\n    "start": "http-server -c-1 -p3000",\n    "build": "node build.js",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n'})}),"\n",(0,i.jsxs)(n.p,{children:["运行",(0,i.jsx)(n.code,{children:"npm run build"}),"，就可以编译生成 ",(0,i.jsx)(n.code,{children:"dist/index.js"})," 文件，这就是打包后的文件。"]}),"\n",(0,i.jsxs)(n.p,{children:["最终我们将它发布到 GitHub 上，通过引用",(0,i.jsx)(n.code,{children:"https://akira-cn.github.io/bullshit-generator-js/dist/index.js"}),"就可以将它引入进来。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<script src="https://akira-cn.github.io/bullshit-generator-js/dist/index.js"><\/script>\n'})}),"\n",(0,i.jsx)(n.p,{children:"最终使用代码与 ES 模块版本类似，如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const {generate, createRandomPicker, loadCorpus} = bullshitGenerator;\nconst options = document.querySelector('.options');\nconst config = {min: 2000, max: 5000};\noptions.addEventListener('change', ({target}) => {\n  const num = Number(target.value);\n  config[target.id] = num;\n  target.parentNode.querySelector('input + span').innerHTML = num;\n});\nconst generateButton = document.getElementById('generate');\nconst anotherTitleButton = document.getElementById('anotherTitle');\nconst article = document.querySelector('article');\nconst titleEl = document.getElementById('title');\n\n(async function () {\n  const corpus = await loadCorpus();\n  const pickTitle = createRandomPicker(corpus.title);\n  titleEl.value = pickTitle();\n  generateButton.addEventListener('click', () => {\n    const text = generate(titleEl.value, {corpus, ...config});\n    article.innerHTML = `<section>${text.join('</section><section>')}</section>`;\n  });\n  anotherTitleButton.addEventListener('click', () => {\n    titleEl.value = pickTitle();\n    if(article.innerHTML) generateButton.click();\n  });\n}());\n"})}),"\n",(0,i.jsxs)(n.p,{children:["你可以在",(0,i.jsx)(n.a,{href:"https://code.juejin.cn/pen/7136735952877125671",target:"_blank",rel:"noopener noreferrer",children:"码上掘金"}),"上查看这个版本的效果。"]}),"\n",(0,i.jsxs)(n.p,{children:["到这里为止，文章生成器的所有代码都完成了，我将完整放在",(0,i.jsx)(n.a,{href:"https://github.com/akira-cn/bullshit-generator-js",target:"_blank",rel:"noopener noreferrer",children:"这个 GitHub 项目"}),"里，你可以获取代码进行研究和修改。"]}),"\n",(0,i.jsxs)(n.p,{children:["记住，",(0,i.jsx)(n.strong,{children:"实践是巩固知识的最佳方法"}),"。"]}),"\n",(0,i.jsx)(n.p,{children:"从下一节课开始，我们将进入 Web 原理部分，由浅入深地开始讨论 HTTP 服务的基本实现原理，并尝试将它应用在服务端编程上，为你打下全栈基础！"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}let l=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%E5%85%A8%E6%A0%88%2F11%20%E5%8A%A0%E9%A4%90%EF%BC%9A%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%94%9F%E6%88%90%E5%99%A8%E7%BD%91%E9%A1%B5%E7%89%88.md"]={toc:[{text:"直接使用 ES Modules",id:"直接使用-es-modules",depth:2},{text:"将模块打包",id:"将模块打包",depth:2}],title:"11 加餐：实现文章生成器网页版",headingTitle:"11 加餐：实现文章生成器网页版",frontmatter:{}}}}]);