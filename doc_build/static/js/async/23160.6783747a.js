"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["23160"],{525623:function(n,e,s){s.r(e),s.d(e,{default:()=>d});var r=s(552676),t=s(740453);let l=s.p+"static/image/76a05e4305b61a901d7b15e140b14d3e.d27c5681.webp",o=s.p+"static/image/52fd42a64b0dde2211d55ee412ecdc06.7d907606.webp",c=s.p+"static/image/2d9e68fe324426c95c3b319b00e01738.64033993.webp";function a(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ul:"ul",li:"li",h2:"h2",img:"img",blockquote:"blockquote",pre:"pre",code:"code",h3:"h3"},(0,t.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"40组件实战表格组件开发",children:["40.组件实战：表格组件开发",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#40组件实战表格组件开发",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在中后台业务场景下绝大部分的表格都不会单独存在(简单的甚至可以使用",(0,r.jsx)(e.strong,{children:"List"}),"代替)，伴随着业务DS的体验一致和与服务器数据交互，大部分的团队都会将其封装成为高阶组件进行使用，从而提升产品交付的速度和质量，后期维护和升级的成本也将大幅度减少。"]}),"\n",(0,r.jsx)(e.p,{children:"目前市面上存在不少的优质解决方案，如下："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.surely.cool/",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(e.strong,{children:"SurelyTable"})})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://mui.com/x/react-data-grid/",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(e.strong,{children:"MUI-Data-Grid"})})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://procomponents.ant.design/components/table",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(e.strong,{children:"AntD ProTable"})})}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"功能设计",children:["功能设计",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#功能设计",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"整体的功能设计如下，使用时只需要传入请求参数和基本配置即可完成。通过传入接口请求和配置对象，可以轻松的生成一个带搜索和工具栏的高阶表格组件。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"请求函数"}),"：传入一个固定返回total和data的异步函数，来请求接口数据源获得表格中需要展示的数据列表。request参数会接管整个列表的公共状态属性，如loading、selectKeys、请求参数修改与响应。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"配置"}),"：配置对象分为表单组件和表格列的配置，两者可以分开也可以将其合并在一个参数当中进行配置。"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"如上图所示，除了传入的重要参数外，按照中台标准的模板，将其分割为以下几个模块："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"表单Form"}),"：查询表单模块"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"内置标准表单组件如：输入、下拉选择器等组件，且允许用户传入自定义组件。"}),"\n",(0,r.jsx)(e.li,{children:"搜索与重置交互操作，且允许用户传入自定义的操作按钮。"}),"\n",(0,r.jsx)(e.li,{children:"当搜索表单项多的时候，收起和展开可以减少其展示面积，避免遮挡表格内部重要信息的展示。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"表格展示Table"}),"：数据展示模块"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"操作设置：能够自定义列表列字段的显示和隐藏，顺序调整等行为，来提升不同使用者的数据展示体验。"}),"\n",(0,r.jsx)(e.li,{children:"自定义操作：通过传入自定义操作能够在操作栏中添加新的组件，来支持更多的自定义功能，保持风格的一致。"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"分页显示"}),"：分页控制表格内显示数据的数量，可以减少服务端的压力与减少页面因为数据量大导致的卡顿。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"开发实现",children:["开发实现",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#开发实现",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在实现时尽可能的减少学习成本，因此Demo的实现上尽可能采用最小原子化的设计方式来进行开发。可以看到如下物料的演示过程，在物料组件的",(0,r.jsx)(e.strong,{children:"props"}),"中传入了",(0,r.jsx)(e.strong,{children:"rowKey"}),"、",(0,r.jsx)(e.strong,{children:"request"}),"、",(0,r.jsx)(e.strong,{children:"searchFields"}),"、",(0,r.jsx)(e.strong,{children:"columns"}),"等几个参数就能够直接完成整个组件的展示。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"rowKey"}),"：列表的唯一key，避免表格出现组件的重复加载，效果同React.Key相似。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"request"}),"：请求函数，用于携带查询条件请求服务端数据。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"searchFields"}),"：搜索表单的配置，用来统一生成表单的组件展示。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"columns"}),"：同Table组件的属性配置，声明表格组件的列信息。"]}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"searchFields"}),"与",(0,r.jsx)(e.strong,{children:"columns"}),"两者的配置可以进行合并，大多数情况下表格列的展示字段通常也会在搜索栏中出现，因此基于自身的业务属性可以将两者结合来实现一份配置同时完成搜索和显示。"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { createReactMaterial } from "@huos/core";\nimport { ProTableView } from "./view";\nimport { Panel } from "./panel";\nimport request from "umi-request";\n\nexport const __ArcoProTable__ = createReactMaterial(ProTableView, {\n  displayName: "高阶表格",\n  custom: {\n    useResize: false,\n  },\n  props: {\n   // tableRowKey\n    rowKey: \'id\',\n    // request\n    request: async (params) => {\n    },\n    // formFields\n    searchFields: [\n    ],\n    // tableColumns\n    columns: [\n      \n    ],\n  },\n  related: {\n    settingRender: Panel,\n  },\n});\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"请求实现",children:["请求实现",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#请求实现",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"首先，先来看看request参数的实现原理。"}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"request"}),"本身是一个",(0,r.jsx)(e.strong,{children:"Promise异步函数"}),"，它分别会接收三个参数："]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"params"}),"：用户查询的参数，如搜索表单的属性，分页组件的页码与表格长度。"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Sort & filter"}),": 表格的标题在部分场景中筛选和排序是两种高频的使用方式，因此在request当中也会接管对应的参数并将当前状态通过参数进行传递，在请求函数中，您可以将其转换成为理想的参数格式发送给接口，从而完成对应操作的实现。"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"返回值：request请求函数的返回值是一个对象，内部包含success、data、total等几个关键性的数据，正常情况下是必填的。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"success"}),"：判断当前请求是否成功，以此来决定后续表格组件是否继续向下解析。"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"data"}),"：列表数据。"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"total"}),": 列表总数，将会传递给分页组件进行渲染展示，从而支持分页功能。"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'interface DefaultRequestParams {\n    pageSize: number;\n    current: number;\n}\n\ntype RequestType = (params: R & DefaultRequestParams, sort: SortType, filter: FilterType) => Promise<{\n    success: boolean,\n    data: any[],\n    total: number;\n}>\n\n{\n    request: async (params: any) => {\n      const data = await request(\n        "https://proapi.azurewebsites.net/github/issues",\n        {\n          method: "GET",\n          params,\n        }\n      );\n      return data;\n    }\n  }\n'})}),"\n",(0,r.jsx)(e.p,{children:"通过上述几个出入参数约定基本的请求格式后，就可以快速的完成具体功能的实现。"}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:["使用",(0,r.jsx)(e.strong,{children:"useEffect"}),"对",(0,r.jsx)(e.strong,{children:"params、sort、filter"}),"这几个入参的副作用进行管理，当发生变化时则重新执行",(0,r.jsx)(e.strong,{children:"request"}),"函数获取最新的数据。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"React.useEffect(() => {\n      if (request) {\n        setTrue()\n        request(params, sort, filter).then(({ success = false, data = [], total = [] }) => {\n          if (success) {\n            setTableData({\n              data,\n              total\n            })\n          }\n        }).finally(() => {\n          setFalse()\n        })\n      }\n    }, [params, sort, filter])\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"表单实现",children:["表单实现",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#表单实现",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["搜索表单组件主要需要接收一个",(0,r.jsx)(e.strong,{children:"items"}),"参数，它是",(0,r.jsx)(e.strong,{children:"ProTable"}),"组件",(0,r.jsx)(e.strong,{children:"searchFields"}),"的透传。"]}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"searchField"}),"需要在",(0,r.jsx)(e.strong,{children:"FromItem"}),"的基础上额外接收",(0,r.jsx)(e.strong,{children:"componentType"}),"和",(0,r.jsx)(e.strong,{children:"componentProps"}),"属性，这两个属性类似之前编辑器协议的实现，主要是用来查找渲染的表单组件的。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"componentType"}),"：表单控件的名称索引，通过索引在",(0,r.jsx)(e.strong,{children:"resolver"}),"中查找对应的控件并展示。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"componentProps"}),"：对应表单控件的参数传递。"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"export interface SearchFormProps {\n  items: Array<{\n    componentType: keyof typeof resolver;\n    componentProps: any;\n  } & FormItemProps>;\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"resolver"}),"的实现如下代码所示："]}),"\n",(0,r.jsxs)(e.p,{children:["将",(0,r.jsx)(e.strong,{children:"ArcoDesign"}),"的表单控件封装成为一个大对象，根据",(0,r.jsx)(e.strong,{children:"componentType"}),"可以直接进行获取到对应的组件，遍历",(0,r.jsx)(e.strong,{children:"searchFields"}),"将其渲染随后进行渲染。"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"如果读过前面设计篇的同学应该能够很快的理解，resolver的方式能够将组件配置简单化，方便后续的存储。"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"const resolver = {\n  InputNumber,\n  Select,\n  Input,\n  Switch,\n  TreeSelect,\n  Slider,\n  // ...\n} as const;\n\n\nexport const SearchForm: React.FC<SearchFormProps> = (props) => {\n  const [collapsed, { toggle }] = useBoolean(true);\n\n  return (\n    <Grid collapsed={collapsed} cols={3} colGap={12}>\n      {props.items.map((item) => {\n        const { componentType, componentProps, ...formItemProps } = item\n        const Element = resolver?.[componentType]\n        return (\n          <GridItem>\n            <Form.Item {...formItemProps} >\n              <Element {...componentProps} />\n            </Form.Item>\n          </GridItem>\n        );\n      })}\n    </Grid>\n  );\n};\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"展开收起",children:["展开收起",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#展开收起",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["整个表单组件是使用",(0,r.jsx)(e.strong,{children:"Grid布局"}),"实现的，它能够支持折叠，并且将表单操作的区域固定在末尾，从而达到一个展开收起的功能。"]}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:["为",(0,r.jsx)(e.strong,{children:"GridItem"}),"组件添加",(0,r.jsx)(e.strong,{children:"suffix"}),"属性后，通过",(0,r.jsx)(e.strong,{children:"useBoolean"}),"声明的",(0,r.jsx)(e.strong,{children:"collapsed"}),"属性来完成收起开关的切换，在",(0,r.jsx)(e.strong,{children:"suffix"}),"网格中，通过",(0,r.jsx)(e.strong,{children:"collapsed"}),"的状态判断在页面组件中显示的相关文本信息。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'export const SearchForm: React.FC<SearchFormProps> = (props) => {\n  const [collapsed, { toggle }] = useBoolean(true);\n\n  return (\n    <Grid collapsed={collapsed} cols={3} colGap={12}>\n      {props.items.map((item) => {\n        const { componentType, componentProps, ...formItemProps } = item\n        const Element = resolver?.[componentType]\n        return (\n          <GridItem>\n            <Form.Item {...formItemProps} >\n              <Element {...componentProps} />\n            </Form.Item>\n          </GridItem>\n        );\n      })}\n      <GridItem suffix>\n        <div\n          style={{\n            display: "flex",\n            alignItems: "center",\n            gap: 12,\n            justifyContent: "flex-end",\n          }}\n        >\n          <Typography.Text\n            style={{ cursor: "pointer" }}\n            type="primary"\n            onClick={toggle}\n          >\n            {collapsed ? <IconDoubleDown /> : <IconDoubleUp />}\n            {collapsed ? "展开" : "收起"}\n          </Typography.Text>\n          <Button htmlType="reset">重置</Button>\n          <Button htmlType="submit" loading={props.loading} type="primary">\n            提交\n          </Button>\n        </div>\n      </GridItem>\n    </Grid>\n  );\n};\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"表格实现",children:["表格实现",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#表格实现",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"表格的实现要做的就是接管一些中心状态，并将其透传到外部从而做一个中间处理过程。"}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.strong,{children:"Form"}),"表单的",(0,r.jsx)(e.strong,{children:"onSubmit"}),"和",(0,r.jsx)(e.strong,{children:"Table"}),"表格的",(0,r.jsx)(e.strong,{children:"onChange"}),"事件中分别设置",(0,r.jsx)(e.strong,{children:"params"}),"，",(0,r.jsx)(e.strong,{children:"sort"}),"、",(0,r.jsx)(e.strong,{children:"filter"}),"等必要属性的状态存储，从而完成",(0,r.jsx)(e.strong,{children:"request"}),"的请求重新调用，以此来更新表格视图中的数据。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'export const ProTable = React.forwardRef<HTMLDivElement, ProTableProps>(\n  ({ searchFields, request, ...props }, ref) => {\n    const [loading, { setTrue, setFalse }] = useBoolean(false);\n    const [params, setParams] = React.useState({\n      pageSize: 5,\n      current: 1,\n    });\n    const [sort, setSort] = React.useState();\n    const [filter, setFilter] = React.useState();\n    const [tableData, setTableData] = React.useState<any>({\n      data: [],\n      total: 0,\n    });\n    const [form] = Form.useForm();\n\n    React.useEffect(() => {\n      if (request) {\n        setTrue();\n        request(params, sort, filter)\n          .then(({ success = false, data = [], total = [] }) => {\n            if (success) {\n              setTableData({\n                data,\n                total,\n              });\n            }\n          })\n          .finally(() => {\n            setFalse();\n          });\n      }\n    }, [params, sort, filter]);\n\n    const handleSubmit = (values: any) => {\n      setParams({\n        pageSize: params.pageSize,\n        current: 1,\n        ...values,\n      });\n    };\n\n    return (\n      <Space\n        direction="vertical"\n        style={{ width: "100%" }}\n        ref={ref}\n        className="arco-pro-table"\n      >\n        {isEmpty(searchFields) ? null : (\n          <Card size="small">\n            <Form form={form} onSubmit={handleSubmit}>\n              <SearchForm loading={loading} items={searchFields || []} />\n            </Form>\n          </Card>\n        )}\n        <Card\n          size="small"\n          title="标题"\n          bodyStyle={{ padding: 0, margin: 0 }}\n          extra={<Control columns={props.columns || []} />}\n        >\n          <Table\n            noDataElement\n            borderCell={false}\n            border={false}\n            loading={loading}\n            data={tableData.data}            \n            onChange={(pagination, sort: any, filter: any) => {\n              setSort(sort)\n              setFilter(filter)\n              setParams({\n                ...params,\n                pageSize: pagination.pageSize || 10,\n                current: pagination.current || 1,\n              });\n            }}\n            pagination={{\n              pageSize: params.pageSize,\n              current: params.current,\n              total: tableData?.total || 0,\n            }}\n            {...props}\n          />\n        </Card>\n      </Space>\n    );\n  }\n);\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"字段配置",children:["字段配置",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字段配置",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"字段配置是一个非常实用的功能，通过表格设置按钮可以对表格列进行显示隐藏以及排序功能。"}),"\n",(0,r.jsx)(e.p,{children:"如下图所示："}),"\n",(0,r.jsx)(e.p,{children:"通过设置面板，可以管理当前列显示和位置更换。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"checkedKeys"}),"：当前选中的keys，表示当前需要展示的显示的列有哪些。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"sortKeys"}),"：当前表格所有列的keys排序，通过对dataIndex的索引标记进行顺序的更新。"]}),"\n",(0,r.jsxs)(e.p,{children:["在初始化时，需要将当前",(0,r.jsx)(e.strong,{children:"columns"}),"的所有keys进行初始化来全部选中。当",(0,r.jsx)(e.strong,{children:"sortKeys"}),"和",(0,r.jsx)(e.strong,{children:"checkedKeys"}),"发生变化时，会触发",(0,r.jsx)(e.strong,{children:"onChange"}),"事件来调整表格的",(0,r.jsx)(e.strong,{children:"columns"}),"状态。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"\n\n  const [checkedKeys, setCheckedKeys] = React.useState<string[]>([])\n  const [sortKeys, setSortKeys] = React.useState<string[]>([])\n\n  const allKeys = React.useMemo(() => {\n    return props.columns.map(e => e.dataIndex)\n  }, [props.columns])\n\n  useMount(() => {\n    setCheckedKeys(allKeys)\n    setSortKeys(allKeys)\n  })\n\n  React.useEffect(() => {\n    props.onChange(checkedKeys, sortKeys)\n  }, [checkedKeys, sortKeys])\n"})}),"\n",(0,r.jsx)(e.p,{children:"使用useMemo对sortKeys和checkedKeys变化时的对应处理，以此来计算得出相应的columns结果，并给予Table组件显示，只有当useMemo的属性变化时进行重新计算，以此来作为缓存减少重复计算工作。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"const memoizedColumns = React.useMemo(() => {\n      if (!props.columns?.length) return []\n      let columns = sortKeys.map((_key) => props.columns?.find((v) => v.dataIndex === _key))\n      // 过滤显示的keys \n      const showColumns = columns.filter((v) => checkKeys.includes(v?.dataIndex as string))\n\n      console.log(showColumns, 'showColumns')\n      return showColumns\n      \n    }, [sortKeys, checkKeys, props.columns])\n"})}),"\n",(0,r.jsxs)(e.p,{children:["使用",(0,r.jsx)(e.strong,{children:"Tree"}),"组件的",(0,r.jsx)(e.strong,{children:"draggable"}),"属性来开启其上下文拖拽，并在",(0,r.jsx)(e.strong,{children:"onDrop"}),"事件中对当前",(0,r.jsx)(e.strong,{children:"sortKeys"}),"进行调整，其目的就是为了实现",(0,r.jsx)(e.strong,{children:"columns的dataIndex"}),"排序。"]}),"\n",(0,r.jsxs)(e.p,{children:["如下图所示，通过一个",(0,r.jsx)(e.strong,{children:"Stag变量"}),"暂存需要放置的元素，将拖动的元素放置完成后，在将拖动元素的",(0,r.jsx)(e.strong,{children:"Stag"}),"放到拖动元素的位置，以此来完成一次交换。"]}),"\n",(0,r.jsx)(e.p,{children:"暂时无法在飞书文档外展示此内容"}),"\n",(0,r.jsxs)(e.p,{children:["需要注意的是，拖动分三种情况，一种是生序拖动，一种是降序拖动，最后一种则是无变化拖动，因此实现了一个",(0,r.jsx)(e.strong,{children:"moveArrayElements"}),"函数来处理不同情况下的问题发生。"]}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.strong,{children:"onDrop"}),"事件回调中使用",(0,r.jsx)(e.strong,{children:"moveArrayElements"}),"来处理拖拽数据的处理，当",(0,r.jsx)(e.strong,{children:"dropPosition"}),"为0时，不做任何处理。反之通过拖动下标和放置下标结合向上或者是向下拖动完整数据的交互。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'<Tree\n              blockNode\n              multiple\n              showLine\n              draggable\n              checkable\n              icons={{\n                switcherIcon: <IconDragDotVertical />,\n                dragIcon: <IconDragArrow />,\n              }}\n              checkedKeys={checkedKeys}\n              onCheck={(keys, extra) => {\n                console.log(keys, extra);\n                setCheckedKeys(keys);\n              }}\n              onDrop={({ dragNode, dropNode, dropPosition }) => {\n                function moveArrayElements(arr: string[], startIndex: number, endIndex: number, p: number) {\n                  if (startIndex < 0 || startIndex >= arr.length || endIndex < 0 || endIndex >= arr.length) {\n                    console.error("Invalid start index or end index.");\n                    return arr;\n                  }\n                \n                  const element = arr[startIndex];\n                  arr.splice(startIndex, 1); // 移除开始下标位置的元素\n                \n                  arr.splice(endIndex, 0, element)\n                \n                  return arr;\n                }\n                const cloneKeys = clone(sortKeys)\n                const dragIdx = cloneKeys.indexOf(dragNode?.key as string);\n                const dropIdx = cloneKeys.indexOf(dropNode?.key as string);\n                if (dropPosition !== 0) {\n                  const newSortKeys = moveArrayElements(cloneKeys, dragIdx, dropIdx, dropPosition)\n                   setSortKeys(newSortKeys)\n                }\n              }}\n            >\n              {sortKeys.map((columnDataIdx) => {\n                const column = props.columns.find((v) => v.dataIndex === columnDataIdx)\n                return (\n                  <TreeNode\n                    style={{ width: 200 }}\n                    key={column.dataIndex}\n                    title={column.title}\n                  ></TreeNode>\n                );\n              })}\n            </Tree>\n'})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"目前代码不是最优实现，只是相应的更加清晰，能够有一个全面的了解过程。"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"效果",children:["效果",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#效果",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["完成了整体的实现后，使用",(0,r.jsx)(e.strong,{children:"createReactMaterial"}),"则可以将其链接到编辑器当中进行使用，后续就是为其添加属性面板的组件插槽的工作了。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'export const __ArcoProTable__ = createReactMaterial(ProTableView, {\n  displayName: "高阶表格",\n  custom: {\n    useResize: false,\n  },\n  props: {\n    request: async (params: any) => {\n      const data = await request(\n        "https://proapi.azurewebsites.net/github/issues",\n        {\n          method: "GET",\n          params,\n        }\n      );\n      return data;\n    },\n    searchFields: [\n      {\n        label: "标题",\n        field: "title",\n        componentProps: {\n          options: [],\n          placeholder: "请输入标题",\n        },\n        componentType: "Input",\n      },\n      {\n        label: "标题",\n        field: "title",\n        componentProps: {\n          options: [],\n          placeholder: "请输入标题",\n        },\n        componentType: "Input",\n      },\n      {\n        label: "标题",\n        field: "title",\n        componentProps: {\n          options: [],\n          placeholder: "请输入标题",\n        },\n        componentType: "Input",\n      },\n      {\n        label: "标题",\n        field: "title",\n        componentProps: {\n          options: [],\n          placeholder: "请输入标题",\n        },\n        componentType: "Input",\n      },\n      {\n        label: "标题",\n        field: "title",\n        componentProps: {\n          options: [],\n          placeholder: "请输入标题",\n        },\n        componentType: "Input",\n      },\n      {\n        label: "标题",\n        field: "title",\n        componentProps: {\n          options: [],\n          placeholder: "请输入标题",\n        },\n        componentType: "Input",\n      },\n\n      {\n        label: "标题",\n        field: "title",\n        componentProps: {\n          options: [],\n          placeholder: "请输入标题",\n        },\n        componentType: "Input",\n      },\n      {\n        label: "标题",\n        field: "title",\n        componentProps: {\n          options: [],\n          placeholder: "请输入标题",\n        },\n        componentType: "Input",\n      },{\n        label: "标题",\n        field: "title",\n        componentProps: {\n          options: [],\n          placeholder: "请输入标题",\n        },\n        componentType: "Input",\n      },\n      {\n        label: "标题",\n        field: "title",\n        componentProps: {\n          options: [],\n          placeholder: "请输入标题",\n        },\n        componentType: "Input",\n      },\n\n    ],\n    columns: [\n      {\n        title: \'ID\',\n        dataIndex: \'id\'\n      },\n      {\n        title: "标题",\n        dataIndex: "title",\n      },\n      {\n        title: "创建时间",\n        key: "showTime",\n        dataIndex: "created_at",\n      },\n    ],\n  },\n  related: {\n    settingRender: Panel,\n  },\n});\n'})}),"\n",(0,r.jsx)(e.p,{children:"在编辑中，它的显示如下所示："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在组件实战中，我们通过增加组件的可扩展性和复用性，以及简化配置区块的方式，提高了代码的维护能力和搭建组件的敏捷性。这种设计思路借鉴了 ",(0,r.jsx)(e.strong,{children:"Ant Design"})," ",(0,r.jsx)(e.strong,{children:"ProTable"})," 组件库的设计理念，在早期大部分方案也是类似的实现模式。其本质就是降低工程代码中的重复",(0,r.jsx)(e.strong,{children:"CURD"}),"工作，能够快速的将组件区块运用到实际当中。通过结合底代码的物料接入方式，能够迅速将其过渡延伸到平台能力提供快速的表格能力实现。"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"目前而言，当前仅仅只是一个基础实现，其目的是为了做一定的功能实战，当前章节会随着后续编辑器能力扩展而更新相关的内容。"}),"\n"]})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}let d=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F40.%E7%BB%84%E4%BB%B6%E5%AE%9E%E6%88%98%EF%BC%9A%E8%A1%A8%E6%A0%BC%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91.md"]={toc:[{text:"功能设计",id:"功能设计",depth:2},{text:"开发实现",id:"开发实现",depth:2},{text:"请求实现",id:"请求实现",depth:3},{text:"表单实现",id:"表单实现",depth:3},{text:"展开收起",id:"展开收起",depth:3},{text:"表格实现",id:"表格实现",depth:3},{text:"字段配置",id:"字段配置",depth:3},{text:"效果",id:"效果",depth:2},{text:"总结",id:"总结",depth:2}],title:"40.组件实战：表格组件开发",headingTitle:"40.组件实战：表格组件开发",frontmatter:{}}}}]);