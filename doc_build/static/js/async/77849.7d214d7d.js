"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["77849"],{788056:function(n,e,o){o.r(e),o.d(e,{default:()=>A});var t=o(552676),i=o(740453);let c=o.p+"static/image/3e904b02d2e2e808da6048db6b93dfcc.c4b5f141.gif",s=o.p+"static/image/8b3cea53b5cd1e7e68e99f7a5a3af034.6457dcbf.webp",a=o.p+"static/image/8fc56ab46c69abb1660bf7c2b72b4e9f.93964c56.webp",d=o.p+"static/image/64f57866da7f8a526f8bf902bb7b1b68.7d7761bd.gif",r=o.p+"static/image/9e07e0614f6e277f772c5bb8b79f3a07.be402186.webp",p=o.p+"static/image/97e1299b408157b7d743c85515342701.1a485718.webp",l=o.p+"static/image/dab6c41030216dc032734864d6e6c1a6.498f9ddd.webp",m=o.p+"static/image/a05ec1a85a961069ab373975687f0708.0fa15efa.gif",h=o.p+"static/image/588dffb4126e6f5fc9609fc8beb390ce.40e276ac.webp",f=o.p+"static/image/364f7897c00968e908f61f933ed86198.899f2eb2.webp",g=o.p+"static/image/0e04c0b4596d8f50a09f88ee4cd21cf0.3f165fa2.webp",x=o.p+"static/image/8c9b53ab90bdbf41ebff639c56270796.82d421c7.webp",u=o.p+"static/image/53af908c9994270d48d3b131f9b99a00.807b2102.gif",C=o.p+"static/image/1fb15dc13bc0853024a92983d2ce5289.25785d33.gif",j=o.p+"static/image/212fc5cf99cd5d4afa7c0e8b5e2b164e.6152561d.gif",b=o.p+"static/image/639b0a1b461c1515657b9996be6baf94.ae982ad5.gif",v=o.p+"static/image/95fc43fed05bb1740bef802910d0b8b1.52932945.webp",M=o.p+"static/image/b5588c050183ca07c35ea5cdeeb5566b.99532d4d.gif",S=o.p+"static/image/5d72e825c42272888cbb83e76954f5f9.b8d8ef00.webp",y=o.p+"static/image/625f620401a1a95361d577efe3ec6ca8.9a19d539.webp",k=o.p+"static/image/63330dbc3913bd4e07a3a15e04fb57e3.e122598f.gif",w=o.p+"static/image/befd9c3c278e0685a9afe5b2d0cc6a24.9cf5bbf6.gif";function E(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",strong:"strong",h2:"h2"},(0,i.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"第76章低代码编辑器组件联动",children:["第76章—低代码编辑器：组件联动",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第76章低代码编辑器组件联动",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"\uFEFF这节我们来实现组件联动。"}),"\n",(0,t.jsx)(e.p,{children:"它是动作的一种类型："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:w,alt:""})}),"\n",(0,t.jsxs)(e.p,{children:["比如 ",(0,t.jsx)(e.a,{href:"https://aisuda.github.io/amis-editor-demo/#/edit/0",target:"_blank",rel:"noopener noreferrer",children:"amis"})," 里，点击按钮的时候修改视频组件为隐藏。"]}),"\n",(0,t.jsx)(e.p,{children:"这种组件和组件之间的关联就叫组件联动："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:k,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"那它是怎么实现的呢？"}),"\n",(0,t.jsx)(e.p,{children:"其实也很简单："}),"\n",(0,t.jsx)(e.p,{children:"我们知道，forwardRef + useImperativeHandle 可以让组件暴露一些方法出来："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"我们在递归渲染组件 renderComponents 的时候，把组件 ref 收集起来，放到一个 map 里。"}),"\n",(0,t.jsx)(e.p,{children:"key 为组件 id"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"{\n    1111: {\n        aaa() {\n        }\n        bbb() {\n        }\n    },\n    222: {\n        ccc() {\n        }\n        ddd() {\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"这样 id 为 111 的组件想调用 id 为 222 的组件的 ccc 方法，就只需要在动作里加一个配置："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"actions: [\n    {\n        type: 'componentMethod',\n        config: {\n            componentId: 222,\n            method: 'ccc'\n        }\n    }\n]\n"})}),"\n",(0,t.jsx)(e.p,{children:"然后处理事件的时候，根据这个 componentId 和 method 从 refs 里拿到对应的方法执行就好了。"}),"\n",(0,t.jsx)(e.p,{children:"这样就实现了组件联动。"}),"\n",(0,t.jsx)(e.p,{children:"这个 actions 是配置在 components 的 store 里。"}),"\n",(0,t.jsx)(e.p,{children:"而组件有什么 method 是配置在 componentConfig 的 store 里。"}),"\n",(0,t.jsx)(e.p,{children:"思路理清了，我们来写下代码："}),"\n",(0,t.jsx)(e.p,{children:"当然，现在的组件没啥好暴露的方法，我们加一个 Modal 组件："}),"\n",(0,t.jsx)(e.p,{children:"materials/Modal/prod.tsx"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { Modal as AntdModal } from 'antd';\nimport { forwardRef, useImperativeHandle, useState } from 'react';\nimport { CommonComponentProps } from '../../interface';\n\nexport interface ModalRef {\n    open: () => void\n    close: () => void\n}\n\nconst Modal: React.ForwardRefRenderFunction<ModalRef, CommonComponentProps> = ({ children, title, onOk, onCancel, styles }, ref) => {\n\n  const [open, setOpen] = useState(false);\n\n  useImperativeHandle(ref, () => {\n    return {\n      open: () => {\n        setOpen(true);\n      },\n      close: () => {\n        setOpen(false);\n      }\n    }\n  }, []);\n\n  return (\n    <AntdModal\n      title={title}\n      style={styles}\n      open={open}\n      onCancel={() => {\n        onCancel && onCancel();\n        setOpen(false);\n      }}\n      onOk={() => {\n        onOk && onOk();\n      }}\n      destroyOnClose\n    >\n      {children}\n    </AntdModal>\n  );\n}\n\nexport default forwardRef(Modal);\n"})}),"\n",(0,t.jsx)(e.p,{children:"可以传入 title、onOk、onCancel、styles 的参数，并且暴露了 open、close 方法用于控制弹窗显示隐藏。"}),"\n",(0,t.jsx)(e.p,{children:"然后写下 dev 时的组件："}),"\n",(0,t.jsx)(e.p,{children:"materials/Modal/dev.tsx"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { useMaterailDrop } from '../../hooks/useMaterailDrop';\nimport { CommonComponentProps } from '../../interface';\n\nfunction Modal({ id, children, title, styles }: CommonComponentProps) {\n\n    const {canDrop, drop } = useMaterailDrop(['Button', 'Container'], id);\n\n    return (\n        <div \n            ref={drop}\n            style={styles}\n            data-component-id={id}  \n            className={`min-h-[100px] p-[20px] ${ canDrop ? 'border-[2px] border-[blue]' : 'border-[1px] border-[#000]'}`}\n        >\n            <h4>{title}</h4>\n            <div>\n                {children}\n            </div>\n        </div>\n    );\n}\n\nexport default Modal;\n"})}),"\n",(0,t.jsx)(e.p,{children:"dev 时的组件和 prod 时的组件不一样，我们要加上 drop 的处理，，设置 drop 时的高亮，添加 data-compnent-id，并且指定最小高度"}),"\n",(0,t.jsx)(e.p,{children:"在 componentConfig 里配一下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:S,alt:""})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"Modal: {\n    name: 'Modal',\n    defaultProps: {\n        title: '弹窗'\n    },\n    setter: [\n        {\n          name: 'title',\n          label: '标题',\n          type: 'input'\n        }\n    ],\n    stylesSetter: [],\n    events: [\n        {\n            name: 'onOk',\n            label: '确认事件',\n        },\n        {\n            name: 'onCancel',\n            label: '取消事件'\n        },\n    ],\n    desc: '弹窗',\n    dev: ModalDev,\n    prod: ModalProd\n},\n"})}),"\n",(0,t.jsx)(e.p,{children:"试下效果："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:M,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"编辑时可以拖拽组件进去，预览时为空，因为默认是隐藏的。"}),"\n",(0,t.jsx)(e.p,{children:"我们先改为默认显示试试："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"然后我们设置下属性和样式："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"绑定下事件："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:C,alt:""})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"和之前的功能能无缝结合。"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"低代码编辑器的核心完成后，支持不同场景只要增加不同组件就可以了。"})}),"\n",(0,t.jsx)(e.p,{children:"然后我们回过头来继续做组件联动："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"默认弹窗是隐藏的，我们要通过组件联动的方式，调用它的 open、close 方法来控制。"}),"\n",(0,t.jsx)(e.p,{children:"在 componentConfig 里配置下这两个 methods："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"export interface ComponentMethod {\n    name: string\n    label: string\n}\n\nexport interface ComponentConfig {\n    name: string;\n    defaultProps: Record<string, any>,\n    desc: string;\n    setter?: ComponentSetter[];\n    stylesSetter?: ComponentSetter[];\n    events?: ComponentEvent[];\n    methods?: ComponentMethod[]\n    dev: any;\n    prod: any;\n}\n\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"methods: [\n    {\n        name: 'open',\n        label: '打开弹窗',\n    },\n    {\n        name: 'close',\n        label: '关闭弹窗'\n    }\n],\n"})}),"\n",(0,t.jsx)(e.p,{children:"然后在 ActionModal 里支持选择组件联动的方式："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { Modal, Segmented } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { GoToLink, GoToLinkConfig } from \"./actions/GoToLink\";\nimport { ShowMessage, ShowMessageConfig } from \"./actions/ShowMessage\";\nimport { CustomJS, CustomJSConfig } from \"./actions/CustomJS\";\nimport { ComponentMethod, ComponentMethodConfig } from \"./actions/ComponentMethod\";\n\nexport type ActionConfig = GoToLinkConfig | ShowMessageConfig | CustomJSConfig | ComponentMethodConfig;\n\nexport interface ActionModalProps {\n    visible: boolean\n    action?: ActionConfig\n    handleOk: (config?: ActionConfig) => void\n    handleCancel: () => void\n}\n\nexport function ActionModal(props: ActionModalProps) {\n    const {\n        visible,\n        action,\n        handleOk,\n        handleCancel\n    } = props;\n\n    const map = {\n        goToLink: '访问链接',\n        showMessage: '消息提示',\n        customJS: '自定义 JS',\n        componentMethod: '组件方法'\n    }\n\n    const [key, setKey] = useState<string>('访问链接');\n    const [curConfig, setCurConfig] = useState<ActionConfig>();\n\n    useEffect(() => {\n        if(action?.type ) {\n            setKey(map[action.type]);\n        }\n    }, [action]);\n\n    return  <Modal \n        title=\"事件动作配置\"\n        width={800}\n        open={visible}\n        okText=\"确认\"\n        cancelText=\"取消\"\n        onOk={() => handleOk(curConfig)}\n        onCancel={handleCancel}\n    >\n        <div className=\"h-[500px]\">\n            <Segmented value={key} onChange={setKey} block options={['访问链接', '消息提示', '组件方法', '自定义 JS']} />\n            {\n                key === '访问链接' && <GoToLink key=\"goToLink\" value={action?.type === 'goToLink' ? action.url : ''} onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n            {\n                key === '消息提示' && <ShowMessage  key=\"showMessage\" value={action?.type === 'showMessage' ? action.config : undefined} onChange={(config) => {\n                setCurConfig(config);\n                }}/>\n            }\n            {\n                key === '组件方法' && <ComponentMethod  key=\"showMessage\" value={action?.type === 'componentMethod' ? action.config : undefined} onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n            {\n                key === '自定义 JS' && <CustomJS key=\"customJS\" value={action?.type === 'customJS' ? action.code : ''} onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n        </div>\n    </Modal>\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"实现下这个 ComponentMethod 组件："}),"\n",(0,t.jsx)(e.p,{children:"Setting/actions/ComponentMethod.tsx"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { useEffect, useState } from \"react\";\nimport { Component, getComponentById, useComponetsStore } from \"../../../stores/components\";\nimport { Select, TreeSelect } from \"antd\";\nimport { useComponentConfigStore } from \"../../../stores/component-config\";\n\nexport interface ComponentMethodConfig {\n    type: 'componentMethod',\n    config: {\n        componentId: number,\n        method: string\n    }\n}\n\nexport interface ComponentMethodProps {\n    value?: string\n    onChange?: (config: ComponentMethodConfig) => void\n}\n\nexport function ComponentMethod(props: ComponentMethodProps) {\n\n    const { components, curComponentId } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n    const [selectedComponent, setSelectedComponent] = useState<Component | null>();\n\n    function componentChange(value: number) {\n        if (!curComponentId) return;\n    \n        setSelectedComponent(getComponentById(value, components))\n    }\n\n    return <div className='mt-[40px]'>\n        <div  className='flex items-center gap-[10px]'>\n            <div>组件：</div>\n            <div>\n                <TreeSelect\n                    style={{ width: 500, height: 50 }}\n                    treeData={components}\n                    fieldNames={{\n                        label: 'name',\n                        value: 'id',\n                    }}\n                    onChange={(value) => { componentChange(value) }}\n                />\n            </div>\n        </div>\n        {componentConfig[selectedComponent?.name || ''] && (\n            <div  className='flex items-center gap-[10px] mt-[20px]'>\n                <div>方法：</div>\n                <div>\n                    <Select\n                        style={{ width: 500, height: 50 }}\n                        options={componentConfig[selectedComponent?.name || ''].methods?.map(\n                            method => ({ label: method.label, value: method.name })\n                        )}\n                        onChange={(value) => { }}\n                    />\n                </div>\n            </div>\n        )}\n    </div>\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"就是两个 Select，一个选择组件、一个选择组件的方法。"}),"\n",(0,t.jsx)(e.p,{children:"需要加一个 selectedComponent 的 state 来记录选中的组件。"}),"\n",(0,t.jsx)(e.p,{children:"测试下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"这样，组件方法的选择就完成了。"}),"\n",(0,t.jsx)(e.p,{children:"我们再处理下 value 和 onChange，做下数据的保存和回显："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"import { useEffect, useState } from \"react\";\nimport { Component, getComponentById, useComponetsStore } from \"../../../stores/components\";\nimport { Select, TreeSelect } from \"antd\";\nimport { useComponentConfigStore } from \"../../../stores/component-config\";\n\nexport interface ComponentMethodConfig {\n    type: 'componentMethod',\n    config: {\n        componentId: number,\n        method: string\n    }\n}\n\nexport interface ComponentMethodProps {\n    value?: ComponentMethodConfig['config']\n    onChange?: (config: ComponentMethodConfig) => void\n}\n\nexport function ComponentMethod(props: ComponentMethodProps) {\n\n    const { value, onChange} = props;\n    const { components, curComponentId } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n    const [selectedComponent, setSelectedComponent] = useState<Component | null>();\n\n    const [curId, setCurId] = useState<number>();\n    const [curMethod, setCurMethod] = useState<string>();\n\n    useEffect(() => {\n        if(value) {\n            setCurId(value.componentId)\n            setCurMethod(value.method)\n\n            setSelectedComponent(getComponentById(value.componentId, components))\n        }\n    }, [value]);\n\n    function componentChange(value: number) {\n        if (!curComponentId) return;\n    \n        setCurId(value);\n        setSelectedComponent(getComponentById(value, components))\n    }\n\n    function componentMethodChange(value: string) {\n        if (!curComponentId || !selectedComponent) return;\n\n        setCurMethod(value);\n\n        onChange?.({\n            type: 'componentMethod',\n            config: {\n                componentId: selectedComponent?.id,\n                method: value\n            }\n        })\n    }\n\n    return <div className='mt-[40px]'>\n        <div  className='flex items-center gap-[10px]'>\n            <div>组件：</div>\n            <div>\n                <TreeSelect\n                    style={{ width: 500, height: 50 }}\n                    treeData={components}\n                    fieldNames={{\n                        label: 'name',\n                        value: 'id',\n                    }}\n                    value={curId}\n                    onChange={(value) => { componentChange(value) }}\n                />\n            </div>\n        </div>\n        {componentConfig[selectedComponent?.name || ''] && (\n            <div  className='flex items-center gap-[10px] mt-[20px]'>\n                <div>方法：</div>\n                <div>\n                    <Select\n                        style={{ width: 500, height: 50 }}\n                        options={componentConfig[selectedComponent?.name || ''].methods?.map(\n                            method => ({ label: method.label, value: method.name })\n                        )}\n                        value={curMethod}\n                        onChange={(value) => { componentMethodChange(value) }}\n                    />\n                </div>\n            </div>\n        )}\n    </div>\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"然后还要在动作列表回显下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:r,alt:""})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"{\n    item.type === 'componentMethod' ? <div key=\"componentMethod\" className='border border-[#aaa] m-[10px] p-[10px] relative'>\n        <div className='text-[blue]'>组件方法</div>\n        <div>{getComponentById(item.config.componentId, components)?.desc}</div>\n        <div>{item.config.componentId}</div>\n        <div>{item.config.method}</div>\n        <div style={{ position: 'absolute', top: 10, right: 30, cursor: 'pointer' }}\n            onClick={() => editAction(item, index)}\n        ><EditOutlined /></div>\n        <div style={{ position: 'absolute', top: 10, right: 10, cursor: 'pointer' }}\n            onClick={() => deleteAction(event, index)}\n        ><DeleteOutlined /></div>\n    </div> : null\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"测试下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"添加、编辑都没问题。"}),"\n",(0,t.jsx)(e.p,{children:"然后我们在 Preview 里做下事件处理："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:s,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"收集所有的 refs，按照 id 来索引，调用方法的时候根据 componentId 和 method 来调用。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const componentRefs = useRef<Record<string, any>>({});\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"ref: (ref: Record<string, any>) => { componentRefs.current[component.id] = ref; },\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"else if(action.type === 'componentMethod') {\n    const component = componentRefs.current[action.config.componentId];\n\n    if (component) {\n      component[action.config.method]?.();\n    }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"测试下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"这样，组件联动就完成了。"}),"\n",(0,t.jsxs)(e.p,{children:["案例代码上传了",(0,t.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"git reset --hard 909a148d0145db4b7ce93ce2f16f676f87c37013\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"总结",children:["总结",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"这节我们实现了组件联动，也就是一个组件可以调用另一个组件的方法。"}),"\n",(0,t.jsx)(e.p,{children:"原理就是组件通过 forwardRef + useImperativeHandle 暴露一些方法，然后在 action 里配置 componentId、method。"}),"\n",(0,t.jsx)(e.p,{children:"这样预览的时候收集所有组件的 ref，事件触发的时候根据配置调用对应 componentId 的对应 method。"}),"\n",(0,t.jsx)(e.p,{children:"这样，我们支持了内置动作、自定义 JS、组件联动，事件绑定的功能就比较完整了。"})]})}function I(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(E,{...n})}):E(n)}let A=I;I.__RSPRESS_PAGE_META={},I.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC76%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E7%BB%84%E4%BB%B6%E8%81%94%E5%8A%A8.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第76章—低代码编辑器：组件联动",headingTitle:"第76章—低代码编辑器：组件联动",frontmatter:{}}}}]);