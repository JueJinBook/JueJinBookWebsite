"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["94135"],{655553:function(e,n,s){s.r(n),s.d(n,{default:()=>Q});var a=s(552676),t=s(740453);let i=s.p+"static/image/5e2d7c7440866b7ff77b5e8e5aa400ee.f3d63c43.gif",r=s.p+"static/image/edd856f15b7cc458e84f4ddbfc57a0aa.01c66175.webp",c=s.p+"static/image/422a6384b624f413e9ab3187a0dd283d.c572a505.webp",d=s.p+"static/image/df81fee5dcc656fc8a1ad556de940ea4.157a6468.webp",o=s.p+"static/image/fe99d331fa43ea95e8a75c3528200c34.e1ad8b59.webp",m=s.p+"static/image/7e9a49f276bab6e20f5934d82a46f8b8.ed368dd8.webp",l=s.p+"static/image/58bb23dcbb3cf537d7043f7518a703ce.e0865762.webp",p=s.p+"static/image/4b0f8f142624744f0630596672d7c6d5.562c625e.gif",h=s.p+"static/image/709ab25dd595e040bb314cf312859638.d1f50ea9.webp",g=s.p+"static/image/1af26eabb0d48d7428d66a88b48e652d.4bb7319c.webp",x=s.p+"static/image/7c229da0753a827628d5db89ab3382ec.c5d19570.gif",f=s.p+"static/image/c67559f43f02d2edec1ea43acc47bd39.85de1cbd.gif",j=s.p+"static/image/8ddec018aa3dae029724bac62ee7e2eb.94893a6c.gif",b=s.p+"static/image/fd3adaeb1c7597a31576d99906c25b54.5b24fa46.webp",u=s.p+"static/image/d42d2a0af436e241e753177de931c409.1dbd38be.webp",y=s.p+"static/image/a6d4254c45491cc78e0906a09356dc05.34a0588e.gif",v=s.p+"static/image/b972dee10820e7d87b4fd406f7f3566f.2452d637.webp",N=s.p+"static/image/35b55ac60f7b1e26edfc5f637feca3da.584f36a2.webp",I=s.p+"static/image/40cd3a9ab1b45c3168b3b55792c2bcec.de81aa0f.gif",w=s.p+"static/image/a94e9276d0bc4460cb6158e3a105c734.11369fb5.webp",k=s.p+"static/image/2311cf8099b0e1b778a264c42d2825d8.aeaee34f.webp",C=s.p+"static/image/730116fe46813d214f400aebb17bf922.70e36fd7.webp",E=s.p+"static/image/51e93d5f4065f4b81517991cc422de31.c52fab09.webp",S=s.p+"static/image/5af1d691ec41967ba68dea9264c07763.e9eff3ac.webp",A=s.p+"static/image/80e3536f43b3d1b911eb827a6a31ca28.db83e72e.webp",H=s.p+"static/image/7a126b470830cda32437e49b41eaf333.5a67aea1.gif",L=s.p+"static/image/46b362fcba1896b30b2ec92fc8f1866e.531fcdd3.webp",M=s.p+"static/image/a4cd3e2b0222a81ad4bd1f7504a3bf36.3f705edf.webp",R=s.p+"static/image/9f9615f4b8ac6d91161ac06edc28c10b.3e000df5.webp",T=s.p+"static/image/c71e16dc8860115f80132b892095edd0.c9fc04b8.webp",U=s.p+"static/image/79ff2bd8f044fcc6a397d80e3e7ca274.b42e97c4.webp",_=s.p+"static/image/c52c6a2ea35a93960665edf91af459f6.602dd6bd.webp",B=s.p+"static/image/71c7f8a37dcff7d92517920e8afbe742.b8b8f52b.webp",P=s.p+"static/image/2168c3c2f0d6b885bb2d23bf8640fdc4.37a80e0c.gif",q=s.p+"static/image/cd740f7004c1d984d9914fdb81987230.a45badc6.webp",D=s.p+"static/image/31d76278f8ad6749d1cf08249c6ecb1b.2591c237.webp",F=s.p+"static/image/f7ef814bf15a8ce4a7a794ecad712237.507c1cc0.webp",G=s.p+"static/image/c829978d2caba001dde21f910c475413.4d6f4fae.gif",J=s.p+"static/image/3d4df8faa1b8b8a34bd04cad7ffc29b8.4a44ca49.webp";function O(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,t.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"188-聊天室聊天功能前端开发",children:["188. 聊天室：聊天功能前端开发",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#188-聊天室聊天功能前端开发",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"这节来写下聊天的前端页面："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c28534fcdb24af183076bc3d0be4e2d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1406&h=986&s=65437&e=png&b=fefefe",alt:""})}),"\n",(0,a.jsx)(n.p,{children:"左侧是聊天室列表，右边是聊天界面。"}),"\n",(0,a.jsx)(n.p,{children:"点击左侧切换聊天室，就可以在不同聊天室聊天。"}),"\n",(0,a.jsx)(n.p,{children:"先写下样式："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:J,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'return <div id="chat-container">\n        <div className="chat-room-list">\n            <div className="chat-room-item">技术交流群</div>\n            <div className="chat-room-item selected">技术交流群</div>\n            <div className="chat-room-item">技术交流群</div>\n            <div className="chat-room-item">技术交流群</div>\n        </div>\n        <div className="message-list">\n            <div className="message-item">\n                <div className="message-sender">\n                    <img src="http://localhost:9000/chat-room/dong.png" />\n                    <span className="sender-nickname">神说要有光</span>\n                </div>\n                <div className="message-content">\n                    你好\n                </div>\n            </div>\n            <div className="message-item">\n                <div className="message-sender">\n                    <img src="http://localhost:9000/chat-room/dong.png" />\n                    <span className="sender-nickname">神说要有光</span>\n                </div>\n                <div className="message-content">\n                    你好\n                </div>\n            </div>\n            <div className="message-item from-me">\n                <div className="message-sender">\n                    <img src="http://localhost:9000/chat-room/dong.png" />\n                    <span className="sender-nickname">神说要有光</span>\n                </div>\n                <div className="message-content">\n                    你好\n                </div>\n            </div>\n        </div>\n    </div>\n'})}),"\n",(0,a.jsx)(n.p,{children:"样式 index.scss"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scss",children:"#chat-container {\n    margin: 20px;\n    display: flex;\n    flex-direction: row;\n    width: 800px;\n    height: 600px;\n\n    .chat-room-list {\n        width: 150px;\n        border: 1px solid #000;\n        overflow-y: auto;\n    }\n\n    .chat-room-item {\n        line-height: 50px;\n        padding-left: 20px;\n        border: 1px solid #000;\n        cursor: pointer;\n\n        &:hover, &.selected{\n            background: lightgreen;\n        }\n    }\n\n    .message-list {\n        border: 1px solid #000;\n        flex: 1;\n        overflow-y: auto;\n\n        .message-item {\n            padding: 20px;\n        \n            display: flex;\n            flex-wrap: wrap;\n\n            .message-sender {\n                width:100%;\n\n                img{\n                    width: 20px;\n                    height: 20px;\n                    padding-right: 10px;\n                }\n            }\n\n            .message-content{\n                border: 1px solid #000;\n                width:max-content;\n                padding: 10px 20px;\n                border-radius: 4px;\n                background: skyblue;\n            }\n            \n            &.from-me{\n                text-align: right;\n                justify-content: right;\n\n                .message-content{\n                    text-align: right;\n                    justify-content: right;\n                    background: #fff;\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"因为样式比较复杂，我们用到了 sass"}),"\n",(0,a.jsx)(n.p,{children:"安装下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install --save-dev sass\n"})}),"\n",(0,a.jsx)(n.p,{children:"看下效果："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:G,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"布局比较简单，整体宽度 800px，左侧宽度固定，右侧 flex:1"}),"\n",(0,a.jsx)(n.p,{children:"然后右边的布局也是 flex 布局，有 .from-me 的设置 justify-content:right;"}),"\n",(0,a.jsx)(n.p,{children:"然后我们请求下聊天室列表："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:F,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const [roomList, setRoomList] = useState<Array<Chatroom>>();\n\nasync function queryChatroomList() {\n    try{\n        const res = await chatroomList();\n\n        if(res.status === 201 || res.status === 200) {\n            setRoomList(res.data.map((item: Chatroom) => {\n                return {\n                    ...item,\n                    key: item.id\n                }\n            }));\n        }\n    } catch(e: any){\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n}\n\nuseEffect(() => {\n    queryChatroomList();\n}, []);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'{\n    roomList?.map(item => {\n        return <div className="chat-room-item" data-id={item.id}  key={item.id} >{item.name}</div>\n    })\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"然后 interfaces 加一下请求聊天记录的接口："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export async function chatHistoryList(id: number) {\n    return axiosInstance.get(`/chat-history/list?chatroomId=${id}`);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"组件里当点击聊天室的时候，就查询对应的聊天记录显示："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:D,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:q,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"useEffect(() => {\n    queryChatroomList();\n}, []);\n\ninterface ChatHistory {\n    id: number\n    content: string\n    type: number\n    chatroomId: number\n    senderId: number\n    createTime: Date,\n    sender: UserInfo\n}\n\nconst [chatHistory, setChatHistory] = useState<Array<ChatHistory>>();\n\nasync function queryChatHistoryList(chatroomId: number) {\n    try{\n        const res = await chatHistoryList(chatroomId);\n\n        if(res.status === 201 || res.status === 200) {\n            setChatHistory(res.data.map((item: Chatroom) => {\n                return {\n                    ...item,\n                    key: item.id\n                }\n            }));\n        }\n    } catch(e: any){\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'return <div id="chat-container">\n    <div className="chat-room-list">\n        {\n            roomList?.map(item => {\n                return <div className="chat-room-item" data-id={item.id}  key={item.id}  onClick={() => {\n                    queryChatHistoryList(item.id);\n                }}>{item.name}</div>\n            })\n        }\n    </div>\n    <div className="message-list">\n        {chatHistory?.map(item => {\n            return <div className="message-item" data-id={item.id}  key={item.id} >\n                <div className="message-sender">\n                    <img src={item.sender.headPic} />\n                    <span className="sender-nickname">{item.sender.nickName}</span>\n                </div>\n                <div className="message-content">\n                    {item.content}\n                </div>\n            </div>\n        })}\n    </div>\n</div>\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:P,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后我们加上聊天的功能："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:B,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"用绝对定位把这个 div 定位在右下角："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:_,alt:""})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)("img",{src:U,alt:""}),"\n",(0,a.jsx)("img",{src:T,alt:""})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scss",children:"position: relative;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scss",children:".message-input {\n    width: 648px;\n    border: 1px solid #000;\n\n    height: 100px;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n\n    .message-type {\n        display: flex;\n\n        .message-type-item {\n            width: 100px;\n            &:hover {\n                font-weight: bold;\n                cursor: pointer;\n            }\n        }\n    }\n\n    .message-input-area {\n        width: 650px;\n\n        display: flex;\n        .message-send-btn {\n            width: 50px;\n            height: 50px;\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"但这样会和 .message-list 重合："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:R,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"我们改下 .message-list 的高度"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:M,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"height: calc(100% - 100px);\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后把它的 border-bottom 去掉："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:L,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"border-bottom: 0;\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:H,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样，布局就完成了。"}),"\n",(0,a.jsx)(n.p,{children:"我们来加一下发消息的功能："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:A,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"用 inputText 的 state 保存输入的内容，点击发送的时候调用 sendMessage 方法。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:S,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"sendMessage 方法从 localStorage 拿 userId，然后单独一个 state 保存 chatroomId。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:E,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"点击切换聊天室的时候 setChatroomId"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:C,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"当收到新的消息的时候重新查询聊天记录"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:k,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"roomId 改变的时候重新链接一下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:w,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'import { Button, Input, message } from "antd";\nimport { useEffect, useRef, useState } from "react";\nimport { io, Socket } from "socket.io-client";\nimport \'./index.scss\';\nimport { chatHistoryList, chatroomList } from "../../interfaces";\nimport { UserInfo } from "../UpdateInfo";\nimport TextArea from "antd/es/input/TextArea";\n\ninterface JoinRoomPayload {\n    chatroomId: number\n    userId: number\n}\n\ninterface SendMessagePayload {\n    sendUserId: number;\n    chatroomId: number;\n    message: Message\n}\n\ninterface Message {\n    type: \'text\' | \'image\'\n    content: string\n}\n\ntype Reply  = {\n    type: \'sendMessage\'\n    userId: number\n    message: Message\n} | {\n    type: \'joinRoom\'\n    userId: number\n}\n\n\ninterface Chatroom {\n    id: number;\n    name: string;\n    createTime: Date;\n}\n\ninterface ChatHistory {\n    id: number\n    content: string\n    type: number\n    chatroomId: number\n    senderId: number\n    createTime: Date,\n    sender: UserInfo\n}\n\ninterface User {\n    id: number;\n    email: string;\n    headPic: string;\n    nickName: string;\n    username: string;\n    createTime: Date;\n}\n\nexport function getUserInfo(): User {\n    return JSON.parse(localStorage.getItem(\'userInfo\')!);\n}\n\nexport function Chat() {\n    const socketRef = useRef<Socket>();\n    const [roomId, setChatroomId] = useState<number>();\n\n    useEffect(() => {\n        if(!roomId) {\n            return;\n        }\n        const socket = socketRef.current = io(\'http://localhost:3005\');\n        socket.on(\'connect\', function() {\n    \n            const payload: JoinRoomPayload = {\n                chatroomId: roomId,\n                userId: getUserInfo().id\n            }\n    \n            socket.emit(\'joinRoom\', payload);\n    \n            socket.on(\'message\', (reply: Reply) => {\n                queryChatHistoryList(roomId);\n            });\n    \n        });\n        return () => {\n            socket.disconnect();\n        }\n    }, [roomId]);\n\n    function sendMessage(value: string) {\n        if(!value) {\n            return;\n        }\n        if(!roomId) {\n            return;\n        }\n\n        const payload: SendMessagePayload = {\n            sendUserId: getUserInfo().id,\n            chatroomId: roomId,\n            message: {\n                type: \'text\',\n                content: value\n            }\n        }\n\n        socketRef.current?.emit(\'sendMessage\', payload);\n    }\n\n    const [roomList, setRoomList] = useState<Array<Chatroom>>();\n\n    async function queryChatroomList() {\n        try{\n            const res = await chatroomList();\n\n            if(res.status === 201 || res.status === 200) {\n                setRoomList(res.data.map((item: Chatroom) => {\n                    return {\n                        ...item,\n                        key: item.id\n                    }\n                }));\n            }\n        } catch(e: any){\n            message.error(e.response?.data?.message || \'系统繁忙，请稍后再试\');\n        }\n    }\n\n    useEffect(() => {\n        queryChatroomList();\n    }, []);\n\n    const [chatHistory, setChatHistory] = useState<Array<ChatHistory>>();\n\n    async function queryChatHistoryList(chatroomId: number) {\n        try{\n            const res = await chatHistoryList(chatroomId);\n\n            if(res.status === 201 || res.status === 200) {\n                setChatHistory(res.data.map((item: Chatroom) => {\n                    return {\n                        ...item,\n                        key: item.id\n                    }\n                }));\n            }\n        } catch(e: any){\n            message.error(e.response?.data?.message || \'系统繁忙，请稍后再试\');\n        }\n    }\n    const [inputText, setInputText] = useState(\'\');\n\n    return <div id="chat-container">\n        <div className="chat-room-list">\n            {\n                roomList?.map(item => {\n                    return <div className="chat-room-item" key={item.id} data-id={item.id} onClick={() => {\n                        queryChatHistoryList(item.id);\n                        setChatroomId(item.id);\n                    }}>{item.name}</div>\n                })\n            }\n        </div>\n        <div className="message-list">\n            {chatHistory?.map(item => {\n                return <div className="message-item" data-id={item.id}>\n                    <div className="message-sender">\n                        <img src={item.sender.headPic} />\n                        <span className="sender-nickname">{item.sender.nickName}</span>\n                    </div>\n                    <div className="message-content">\n                        {item.content}\n                    </div>\n                </div>\n            })}\n        </div>\n        <div className="message-input">\n            <div className="message-type">\n                <div className="message-type-item" key={1}>表情</div>\n                <div className="message-type-item" key={2}>图片</div>\n                <div className="message-type-item" key={3}>文件</div>\n            </div>\n            <div className="message-input-area">\n                <TextArea className="message-input-box" value={inputText} onChange={(e) => {\n                    setInputText(e.target.value)\n                }}/>\n                <Button className="message-send-btn" type="primary" onClick={() => {\n                    sendMessage(inputText)\n                    setInputText(\'\');\n                }}>发送</Button>\n            </div>\n        </div>\n    </div>\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"测试下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:I,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"聊天没问题，就是样式不大对。"}),"\n",(0,a.jsx)(n.p,{children:"我们加一下判断："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:N,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:v,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"className={`message-item ${item.senderId === userInfo.id ? 'from-me' : ''}`}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:y,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"现在样式就对了，只不过自己聊没意思。"}),"\n",(0,a.jsx)(n.p,{children:"在数据库里查一下上面那个聊天室的另一个用户："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:u,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:b,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"换个浏览器登录小强的账号："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:j,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后在光的账号这边看下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:f,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"收到了小强的消息。"}),"\n",(0,a.jsx)(n.p,{children:"我们聊一会天："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:x,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"能聊天了。"}),"\n",(0,a.jsx)(n.p,{children:"就是每次需要手动滚动到底部才能看到新消息。"}),"\n",(0,a.jsx)(n.p,{children:"我们加一下自动滚动："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"<div id=\"bottom-bar\" key='bottom-bar'></div>\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"setTimeout(() => {\n    document.getElementById('bottom-bar')?.scrollIntoView({block: 'end'});\n}, 300);\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样，基本聊天功能就完成了。"}),"\n",(0,a.jsx)(n.p,{children:"但这样其实性能并不好，没必要每发一条消息就查一下聊天记录。"}),"\n",(0,a.jsx)(n.p,{children:"我们在服务端把消息存到聊天记录表之后，把这条消息返回："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"此外，sender 的信息也要查出来："}),"\n",(0,a.jsx)(n.p,{children:"把 UserService 导出，然后在 chat 模块引入："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:m,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"返回 history 的时候把 sender 也查出来："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"@Inject(UserService)\nprivate userService: UserService\n\n@SubscribeMessage('sendMessage')\nasync sendMessage(@MessageBody() payload: SendMessagePayload) {\n    const roomName = payload.chatroomId.toString();\n\n    const history = await this.chatHistoryService.add(payload.chatroomId, {\n      content: payload.message.content,\n      type: payload.message.type === 'image' ? 1 : 0,\n      chatroomId: payload.chatroomId,\n      senderId: payload.sendUserId\n    });\n    const sender = await this.userService.findUserDetailById(history.senderId);\n\n    this.server.to(roomName).emit('message', { \n      type: 'sendMessage',\n      userId: payload.sendUserId,\n      message: {\n        ...history,\n        sender\n      }\n    });\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"然后前端就可以直接在后面添加了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:r,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"socket.on('message', (reply: Reply) => {\n    if(reply.type === 'sendMessage') {\n        setChatHistory((chatHistory) => {\n            return chatHistory ? [...chatHistory, reply.message] : [reply.message]\n        });   \n        setTimeout(() => {\n            document.getElementById('bottom-bar')?.scrollIntoView({block: 'end'});\n        }, 300);\n    }\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样，全程只需要查询一次聊天记录，性能好很多。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-frontend",target:"_blank",rel:"noopener noreferrer",children:"前端代码"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-backend",target:"_blank",rel:"noopener noreferrer",children:"后端代码"})}),"\n",(0,a.jsxs)(n.h2,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"这节我们实现了聊天页面。"}),"\n",(0,a.jsx)(n.p,{children:"首先，我们写了布局，在左侧展示聊天室列表。"}),"\n",(0,a.jsx)(n.p,{children:"点击聊天室的时候，在右侧展示查询出的聊天记录。"}),"\n",(0,a.jsx)(n.p,{children:"点击发送消息的时候，通过 socket 链接来 emit 消息。"}),"\n",(0,a.jsx)(n.p,{children:"监听服务端的 message 消息，有新消息的时候添加到聊天记录里，并通过 scrollIntoView 滚动到底部。"}),"\n",(0,a.jsx)(n.p,{children:"这样，多个用户在不同房间聊天的功能就完成了。"})]})}function V(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(O,{...e})}):O(e)}let Q=V;V.__RSPRESS_PAGE_META={},V.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F188.%20%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%9A%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"188. 聊天室：聊天功能前端开发",headingTitle:"188. 聊天室：聊天功能前端开发",frontmatter:{}}}}]);