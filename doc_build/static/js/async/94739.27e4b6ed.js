"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["94739"],{689690:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var d=r(552676),c=r(740453);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong",h3:"h3",pre:"pre",blockquote:"blockquote",ul:"ul",li:"li"},(0,c.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"第01章开篇electron带来的边界扩展",children:["第01章—开篇：Electron带来的边界扩展",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第01章开篇electron带来的边界扩展",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"\uFEFF## 前言"}),"\n",(0,d.jsxs)(n.p,{children:["前端工程师这一角色随着互联网的发展而逐渐形成。起初，网站开发主要关注基本的 ",(0,d.jsx)(n.code,{children:"HTML"}),"（超文本标记语言）、",(0,d.jsx)(n.code,{children:"CSS"}),"（层叠样式表）和一些简单的 ",(0,d.jsx)(n.code,{children:"JavaScript"})," 交互。1990 年代中期，随着互联网的普及，网站不再只是展示信息，而是开始变得更加动态和交互式。"]}),"\n",(0,d.jsx)(n.p,{children:"在这个过程中，前端工程师的概念逐渐确立。他们开始负责网站的用户界面（UI）和用户体验（UX），包括页面设计、交互设计、响应式设计等。随着技术的不断演进，前端工程师的职责也扩展到了更复杂的前端开发，涉及各种框架（如 React、Angular、Vue.js 等）和库，以及移动端开发和跨平台兼容性等领域。"}),"\n",(0,d.jsxs)(n.p,{children:["在当今时代，随着智能化和 AI 技术的兴起，一些简单的交互界面可以通过无代码的方式直接生成，前端的部分职责开始被逐步取代。据我所知，现在的一些互联网大厂开始取消“前端工程师”这一岗位 ",(0,d.jsx)(n.code,{children:"title"}),"， 取而代之的是 “端工程师”。这一改变也意味着前端的职能边界开始逐步扩展和延伸。"]}),"\n",(0,d.jsxs)(n.p,{children:["所以，作为 ",(0,d.jsx)(n.code,{children:"“端工程师”"})," 中的一员，如果你想要尝试着扩大自己的技能边界，掌握一门桌面端应用开发的能力，那么 ",(0,d.jsx)(n.code,{children:"Electron"})," 将是一个非常不错的选择。"]}),"\n",(0,d.jsxs)(n.h2,{id:"为什么不是-taruinwjsflutter",children:["为什么不是 Tarui、NW.js、Flutter？",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么不是-taruinwjsflutter",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"既然要掌握一门桌面端应用开发的能力，那么为什么不选择 Tarui、NW.js、Flutter，而是 Electron 呢？其实它们各有千秋，这里，我们先只关注比较流行的一些桌面端开发框架，并进行一些拓展对比："}),"\n",(0,d.jsxs)(n.table,{children:["\n",(0,d.jsxs)(n.thead,{children:["\n",(0,d.jsxs)(n.tr,{children:["\n",(0,d.jsx)(n.th,{children:"框架"}),"\n",(0,d.jsx)(n.th,{children:"开发技术"}),"\n",(0,d.jsx)(n.th,{children:"生态系统"}),"\n",(0,d.jsx)(n.th,{children:"适用场景"}),"\n",(0,d.jsx)(n.th,{children:"安全性"}),"\n",(0,d.jsx)(n.th,{children:"安装包体积"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.tbody,{children:["\n",(0,d.jsxs)(n.tr,{children:["\n",(0,d.jsx)(n.td,{children:"Electron"}),"\n",(0,d.jsx)(n.td,{children:"HTML、CSS、JavaScript、Chromium、Node.js"}),"\n",(0,d.jsx)(n.td,{children:"比较老牌，有强大的社区支持"}),"\n",(0,d.jsx)(n.td,{children:"功能丰富、跨平台的桌面应用，特别是网络相关的应用"}),"\n",(0,d.jsx)(n.td,{children:"因为使用Chromium，需要注意安全漏洞。需谨慎处理外部内容。"}),"\n",(0,d.jsx)(n.td,{children:"安装包较大，因为集成了Chromium，可能较大。"}),"\n"]}),"\n",(0,d.jsxs)(n.tr,{children:["\n",(0,d.jsx)(n.td,{children:"Tauri"}),"\n",(0,d.jsx)(n.td,{children:"Rust、任何编程语言"}),"\n",(0,d.jsx)(n.td,{children:"快速成长的社区，灵活性高"}),"\n",(0,d.jsx)(n.td,{children:"需要高性能、小体积的应用，对Rust有兴趣的开发者"}),"\n",(0,d.jsx)(n.td,{children:"使用Rust语言提供更高的安全性，可以减少安全风险。"}),"\n",(0,d.jsx)(n.td,{children:"相对较小的安装包，因为可以更精准地控制应用所需的依赖。"}),"\n"]}),"\n",(0,d.jsxs)(n.tr,{children:["\n",(0,d.jsx)(n.td,{children:"NW.js"}),"\n",(0,d.jsx)(n.td,{children:"HTML、CSS、JavaScript"}),"\n",(0,d.jsx)(n.td,{children:"用户群体相对较小"}),"\n",(0,d.jsx)(n.td,{children:"类似的跨平台桌面应用，可能需要更多自行处理配置方面的工作"}),"\n",(0,d.jsx)(n.td,{children:"与Electron类似，需注意Chromium的安全问题。"}),"\n",(0,d.jsx)(n.td,{children:"安装包体积较大，因为集成了Chromium。"}),"\n"]}),"\n",(0,d.jsxs)(n.tr,{children:["\n",(0,d.jsx)(n.td,{children:"Flutter"}),"\n",(0,d.jsx)(n.td,{children:"Dart语言、自有渲染引擎"}),"\n",(0,d.jsx)(n.td,{children:"迅速崛起的生态系统，Google支持"}),"\n",(0,d.jsx)(n.td,{children:"移动应用开发、同时可用于桌面和Web应用"}),"\n",(0,d.jsx)(n.td,{children:"Google支持和活跃的社区有助于安全性的维护。"}),"\n",(0,d.jsx)(n.td,{children:"安装包体积较小，Flutter的渲染引擎可提供较小的包。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["总体来看，",(0,d.jsx)(n.code,{children:"Electron"})," 有着其",(0,d.jsx)(n.strong,{children:"强大的跨端能力、社区生态"}),"，更重要的是可以直接使用 ",(0,d.jsx)(n.code,{children:"HTML"})," + ",(0,d.jsx)(n.code,{children:"JS"})," + ",(0,d.jsx)(n.code,{children:"CSS"})," 来开发桌面端应用程序，这对前端来说无疑是",(0,d.jsx)(n.strong,{children:"非常容易上手"}),"的，也有着",(0,d.jsx)(n.strong,{children:"无与伦比的开发效率和平滑的学习曲线"}),"。"]}),"\n",(0,d.jsx)(n.p,{children:"但是 Electron 也有着天然的短板，比如：Electron 相比其他 Native 来说，包体积和 CPU 资源占用较高；我们还需要额外解决一些安全性问题和性能体验问题。所以，本小册的目的也是希望通过从实战化指南的角度帮助大家规避和优化以上问题。"}),"\n",(0,d.jsxs)(n.h2,{id:"electron-相对于-web-开发的一些优势",children:["Electron 相对于 Web 开发的一些优势",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#electron-相对于-web-开发的一些优势",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["通过上面的对比，我们大致了解了 ",(0,d.jsx)(n.code,{children:"Electron"})," 的一个核心优势是跨平台能力，而其跨平台能力主要依赖于 ",(0,d.jsx)(n.code,{children:"Chromium"})," + ",(0,d.jsx)(n.code,{children:"Node.js"})," + ",(0,d.jsx)(n.code,{children:"内置 API"})," 来实现的。可能有些小伙伴会有疑问，既然是依托于 ",(0,d.jsx)(n.code,{children:"Chromium"}),"，那么为什么不直接使用浏览器开发网页而选择 ",(0,d.jsx)(n.code,{children:"Electron"})," 开发桌面端呢？"]}),"\n",(0,d.jsxs)(n.p,{children:["接下来我们将简单分析一下 ",(0,d.jsx)(n.code,{children:"Electron"})," 相对于 ",(0,d.jsx)(n.code,{children:"Web"})," 网页开发有哪些独有的优势。"]}),"\n",(0,d.jsxs)(n.h3,{id:"1-无兼容性问题",children:["1. 无兼容性问题",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-无兼容性问题",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["由于 ",(0,d.jsx)(n.code,{children:"Electron"})," 内置了 ",(0,d.jsx)(n.code,{children:"Chromium"})," 浏览器，所以几乎不需要考虑不同浏览器兼容性问题。"]}),"\n",(0,d.jsx)(n.p,{children:"与此同时，这也意味着，我们可以使用一些 ES 6/7/8/9/10 的高级语法，比如：async、await、Promise……而不需要 PolyFill。"}),"\n",(0,d.jsxs)(n.h3,{id:"2-最新浏览器-feature",children:["2. 最新浏览器 Feature",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-最新浏览器-feature",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["通常情况下，",(0,d.jsx)(n.code,{children:"Electron"})," 会在新的稳定版本发布后相对快速地更新其 ",(0,d.jsx)(n.code,{children:"Chromium"})," 版本，这也意味着你可以快速体验和使用一些浏览器最新的 ",(0,d.jsx)(n.code,{children:"Feature"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:["比如，通过对图片、iframe 设置 ",(0,d.jsx)(n.code,{children:'loading="lazy"'})," 属性，可以天然支持懒加载："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",children:'<img src="image.jpg" alt="..." loading="lazy" />\n<iframe src="video-player.html" title="..." loading="lazy"></iframe>\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"3-轻松绕过跨域问题",children:["3. 轻松绕过跨域问题",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-轻松绕过跨域问题",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在浏览器环境中，作为一个前端开发，经常会碰到各种各样的跨域问题，比如 ",(0,d.jsx)(n.code,{children:"iframe"})," 跨域、",(0,d.jsx)(n.code,{children:"request"})," 请求跨域……而对于请求类跨域问题通常需要后端配合着设置跨域限制。"]}),"\n",(0,d.jsx)(n.p,{children:"在 Electron 应用中，由于可以自由地访问本地文件系统和系统资源，也可以通过 Node.js 模块实现对底层操作系统的访问。这种能力使得 Electron 应用可以绕过浏览器的跨域限制，可以在本地环境中自由通信和交互，而无需担心同源策略带来的限制。"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["关于 Electron 如何绕过浏览器的跨域限制，",(0,d.jsx)(n.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304842580359905334",target:"_blank",rel:"noopener noreferrer",children:"《通用篇：Electron 应用安全性指南》"}),"章节有详细的介绍。"]}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"4-使用-nodejs-提供的能力",children:["4. 使用 Node.js 提供的能力",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-使用-nodejs-提供的能力",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.a,{href:"https://nodejs.org/api/",target:"_blank",rel:"noopener noreferrer",children:"Node.js 的所有内置模块"}),"在 Electron 中都可用，同时第三方 node 模块也完全支持（包括",(0,d.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/tutorial/using-native-node-modules",target:"_blank",rel:"noopener noreferrer",children:"本地 native 模块"}),"）。"]}),"\n",(0,d.jsx)(n.p,{children:"试想一下，有了这个能力，就可以实现前端开发多年的梦想：直接在浏览器中无限制地使用 Node API！"}),"\n",(0,d.jsxs)(n.h3,{id:"5-客户端能力的支持",children:["5. 客户端能力的支持",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-客户端能力的支持",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["为了弥补 ",(0,d.jsx)(n.code,{children:"Node.js"})," 和前端技术访问系统 ",(0,d.jsx)(n.code,{children:"API"})," 方面的不足，",(0,d.jsx)(n.code,{children:"Electron"})," 内部对系统 ",(0,d.jsx)(n.code,{children:"API"})," 做了封装，比如："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"客户端 GUI：右键菜单、窗⼝定制、系统托盘、Dock……"}),"\n",(0,d.jsx)(n.li,{children:"桌⾯环境集成：系统通知、剪切板、系统快捷键、⽂件拖放……"}),"\n",(0,d.jsx)(n.li,{children:"设备 API：电源监视、内存、CPU、屏幕……"}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["开发者基于 ",(0,d.jsx)(n.code,{children:"Electron"})," 开发应用时，可以直接使用 ",(0,d.jsx)(n.code,{children:"JavaScript"})," 访问这些 API。"]}),"\n",(0,d.jsxs)(n.h3,{id:"6-调用-os-能力",children:["6. 调用 OS 能力",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-调用-os-能力",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Electron"})," 可以通过 Node.js 的 ",(0,d.jsx)(n.code,{children:"Child Process"})," 模块执行系统命令，因此可以间接地调用 ",(0,d.jsx)(n.code,{children:"AppleScript"}),"（在 macOS 上）和 ",(0,d.jsx)(n.code,{children:"Windows RT"}),"（在 Windows 上）以及一些 ",(0,d.jsx)(n.code,{children:"Shell"})," 脚本。"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["在 ",(0,d.jsx)(n.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304830272770408498",target:"_blank",rel:"noopener noreferrer",children:"《基础篇：Electron 的原生能力》"})," 章节中，我们将会给大家详细讲解这其中的细节。"]}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"electron-应用场景的分布",children:["Electron 应用场景的分布",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#electron-应用场景的分布",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["使用 ",(0,d.jsx)(n.code,{children:"Electron"})," 开发的应用品类非常丰富，我们看看官网的一些案例展示中的统计数据："]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["数据来源：",(0,d.jsx)(n.a,{href:"https://www.electronjs.org/apps",target:"_blank",rel:"noopener noreferrer",children:"Electron ShowCase"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"可以看到，在使用 Electron 开发的 APP 中，开发者工具、效率应用占据了大半江山。"}),"\n",(0,d.jsxs)(n.p,{children:["基于此，我们小册实战部分的内容将会以 Electron 开发 ",(0,d.jsx)(n.code,{children:"工具、效率"})," 类应用为基石，介绍 Electron 开发中的经验、问题、解决方案，并教会你打造一款属于自己的插件化工具箱。"]}),"\n",(0,d.jsxs)(n.p,{children:["相对于其他 Electron 教程而言，我们的实战部分绝对不是开发一个玩具的 ",(0,d.jsx)(n.code,{children:"demo"}),"  项目然后草草收场，其依托的技术原型就是开源项目 ",(0,d.jsx)(n.a,{href:"https://github.com/rubickCenter/rubick",target:"_blank",rel:"noopener noreferrer",children:"Rubick 6.2k+ star"}),"，所有示例代码都在开源项目中应用，因此会有更强的带入感和业务应用性。"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"题外话：Rubick 是一款插件化桌面端工具箱，Rubick 插件市场提供丰富插件（比如：屏幕取色插件、翻译插件、OCR 插件），用户可以随时随地安装所需要的插件完成工作。"}),"\n",(0,d.jsx)(n.p,{children:"Rubick 取名的灵感来自于一款经典的塔防游戏 Dota。他是游戏中的一个英雄，核心技能是可以随心所欲地把其他英雄的技能汲取到（插件化）自己身上进行使用。"}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"总结",children:["总结",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["这里我们主要介绍了一些桌面端技术现状和一些技术对比，并且简要说明了 ",(0,d.jsx)(n.code,{children:"Electron"})," 相对于 ",(0,d.jsx)(n.code,{children:"Web"})," 开发的一些优势和包含的一些能力。"]}),"\n",(0,d.jsxs)(n.p,{children:["希望通过阅读本章内容，你能对 Electron 框架有一个基本的认识，知道 Electron 框架可以赋予我们什么样的能力、我们可以拿来做哪些事情。这样在遇到特定场景的时候，也许我们会感叹一句：",(0,d.jsx)(n.code,{children:"Electron"})," 可以完美解决痛点！"]}),"\n",(0,d.jsxs)(n.p,{children:["最后，让我们一起携手开启 ",(0,d.jsx)(n.code,{children:"Electron"})," 开发之旅吧！"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(s,{...e})}):s(e)}let h=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC01%E7%AB%A0%E2%80%94%E5%BC%80%E7%AF%87%EF%BC%9AElectron%E5%B8%A6%E6%9D%A5%E7%9A%84%E8%BE%B9%E7%95%8C%E6%89%A9%E5%B1%95.md"]={toc:[{text:"为什么不是 Tarui、NW.js、Flutter？",id:"为什么不是-taruinwjsflutter",depth:2},{text:"Electron 相对于 Web 开发的一些优势",id:"electron-相对于-web-开发的一些优势",depth:2},{text:"1. 无兼容性问题",id:"1-无兼容性问题",depth:3},{text:"2. 最新浏览器 Feature",id:"2-最新浏览器-feature",depth:3},{text:"3. 轻松绕过跨域问题",id:"3-轻松绕过跨域问题",depth:3},{text:"4. 使用 Node.js 提供的能力",id:"4-使用-nodejs-提供的能力",depth:3},{text:"5. 客户端能力的支持",id:"5-客户端能力的支持",depth:3},{text:"6. 调用 OS 能力",id:"6-调用-os-能力",depth:3},{text:"Electron 应用场景的分布",id:"electron-应用场景的分布",depth:2},{text:"总结",id:"总结",depth:2}],title:"第01章—开篇：Electron带来的边界扩展",headingTitle:"第01章—开篇：Electron带来的边界扩展",frontmatter:{}}}}]);