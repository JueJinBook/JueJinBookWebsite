"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["2249"],{23014:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var s=r(552676),c=r(740453);function a(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",code:"code",pre:"pre",strong:"strong",ul:"ul",li:"li"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"9数组的扩展",children:["9.数组的扩展",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9数组的扩展",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"扩展运算符",children:["扩展运算符",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展运算符",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"含义",children:["含义",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#含义",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["扩展运算符（spread）是三个点（",(0,s.jsx)(n.code,{children:"..."}),"）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"console.log(...[1, 2, 3])\n// 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5)\n// 1 2 3 4 5\n\n[...document.querySelectorAll('div')]\n// [<div>, <div>, <div>]\n"})}),"\n",(0,s.jsx)(n.p,{children:"该运算符主要用于函数调用。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function push(array, ...items) {\n  array.push(...items);\n}\n\nfunction add(x, y) {\n  return x + y;\n}\n\nconst numbers = [4, 38];\nadd(...numbers) // 42\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"array.push(...items)"}),"和",(0,s.jsx)(n.code,{children:"add(...numbers)"}),"这两行，都是函数的调用，它们都使用了扩展运算符。该运算符将一个数组，变为参数序列。"]}),"\n",(0,s.jsx)(n.p,{children:"扩展运算符与正常的函数参数可以结合使用，非常灵活。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function f(v, w, x, y, z) { }\nconst args = [0, 1];\nf(-1, ...args, 2, ...[3]);\n"})}),"\n",(0,s.jsx)(n.p,{children:"扩展运算符后面还可以放置表达式。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const arr = [\n  ...(x > 0 ? ['a'] : []),\n  'b',\n];\n"})}),"\n",(0,s.jsx)(n.p,{children:"如果扩展运算符后面是一个空数组，则不产生任何效果。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[...[], 1]\n// [1]\n"})}),"\n",(0,s.jsx)(n.p,{children:"注意，只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"(...[1, 2])\n// Uncaught SyntaxError: Unexpected number\n\nconsole.log((...[1, 2]))\n// Uncaught SyntaxError: Unexpected number\n\nconsole.log(...[1, 2])\n// 1 2\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面三种情况，扩展运算符都放在圆括号里面，但是前两种情况会报错，因为扩展运算符所在的括号不是函数调用。"}),"\n",(0,s.jsxs)(n.h3,{id:"替代函数的-apply-方法",children:["替代函数的 apply() 方法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#替代函数的-apply-方法",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["由于扩展运算符可以展开数组，所以不再需要",(0,s.jsx)(n.code,{children:"apply()"}),"方法将数组转为函数的参数了。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ES5 的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6 的写法\nfunction f(x, y, z) {\n  // ...\n}\nlet args = [0, 1, 2];\nf(...args);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["下面是扩展运算符取代",(0,s.jsx)(n.code,{children:"apply()"}),"方法的一个实际的例子，应用",(0,s.jsx)(n.code,{children:"Math.max()"}),"方法，简化求出一个数组最大元素的写法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ES5 的写法\nMath.max.apply(null, [14, 3, 77])\n\n// ES6 的写法\nMath.max(...[14, 3, 77])\n\n// 等同于\nMath.max(14, 3, 77);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，由于 JavaScript 不提供求数组最大元素的函数，所以只能套用",(0,s.jsx)(n.code,{children:"Math.max()"}),"函数，将数组转为一个参数序列，然后求最大值。有了扩展运算符以后，就可以直接用",(0,s.jsx)(n.code,{children:"Math.max()"}),"了。"]}),"\n",(0,s.jsxs)(n.p,{children:["另一个例子是通过",(0,s.jsx)(n.code,{children:"push()"}),"函数，将一个数组添加到另一个数组的尾部。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ES5 的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6 的写法\nlet arr1 = [0, 1, 2];\nlet arr2 = [3, 4, 5];\narr1.push(...arr2);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码的 ES5 写法中，",(0,s.jsx)(n.code,{children:"push()"}),"方法的参数不能是数组，所以只好通过",(0,s.jsx)(n.code,{children:"apply()"}),"方法变通使用",(0,s.jsx)(n.code,{children:"push()"}),"方法。有了扩展运算符，就可以直接将数组传入",(0,s.jsx)(n.code,{children:"push()"}),"方法。"]}),"\n",(0,s.jsx)(n.p,{children:"下面是另外一个例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ES5\nnew (Date.bind.apply(Date, [null, 2015, 1, 1]))\n\n// ES6\nnew Date(...[2015, 1, 1]);\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"扩展运算符的应用",children:["扩展运算符的应用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展运算符的应用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（1）复制数组"})}),"\n",(0,s.jsx)(n.p,{children:"数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const a1 = [1, 2];\nconst a2 = a1;\n\na2[0] = 2;\na1 // [2, 2]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"a2"}),"并不是",(0,s.jsx)(n.code,{children:"a1"}),"的克隆，而是指向同一份数据的另一个指针。修改",(0,s.jsx)(n.code,{children:"a2"}),"，会直接导致",(0,s.jsx)(n.code,{children:"a1"}),"的变化。"]}),"\n",(0,s.jsx)(n.p,{children:"ES5 只能用变通方法来复制数组。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const a1 = [1, 2];\nconst a2 = a1.concat();\n\na2[0] = 2;\na1 // [1, 2]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"a1"}),"会返回原数组的克隆，再修改",(0,s.jsx)(n.code,{children:"a2"}),"就不会对",(0,s.jsx)(n.code,{children:"a1"}),"产生影响。"]}),"\n",(0,s.jsx)(n.p,{children:"扩展运算符提供了复制数组的简便写法。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const a1 = [1, 2];\n// 写法一\nconst a2 = [...a1];\n// 写法二\nconst [...a2] = a1;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面的两种写法，",(0,s.jsx)(n.code,{children:"a2"}),"都是",(0,s.jsx)(n.code,{children:"a1"}),"的克隆。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（2）合并数组"})}),"\n",(0,s.jsx)(n.p,{children:"扩展运算符提供了数组合并的新写法。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const arr1 = ['a', 'b'];\nconst arr2 = ['c'];\nconst arr3 = ['d', 'e'];\n\n// ES5 的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6 的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"不过，这两种方法都是浅拷贝，使用的时候需要注意。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const a1 = [{ foo: 1 }];\nconst a2 = [{ bar: 2 }];\n\nconst a3 = a1.concat(a2);\nconst a4 = [...a1, ...a2];\n\na3[0] === a1[0] // true\na4[0] === a1[0] // true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"a3"}),"和",(0,s.jsx)(n.code,{children:"a4"}),"是用两种不同方法合并而成的新数组，但是它们的成员都是对原数组成员的引用，这就是浅拷贝。如果修改了引用指向的值，会同步反映到新数组。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（3）与解构赋值结合"})}),"\n",(0,s.jsx)(n.p,{children:"扩展运算符可以与解构赋值结合起来，用于生成数组。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// ES5\na = list[0], rest = list.slice(1)\n\n// ES6\n[a, ...rest] = list\n"})}),"\n",(0,s.jsx)(n.p,{children:"下面是另外一些例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []\n\nconst [first, ...rest] = ["foo"];\nfirst  // "foo"\nrest   // []\n'})}),"\n",(0,s.jsx)(n.p,{children:"如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n\nconst [first, ...middle, last] = [1, 2, 3, 4, 5];\n// 报错\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（4）字符串"})}),"\n",(0,s.jsx)(n.p,{children:"扩展运算符还可以将字符串转为真正的数组。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'[...\'hello\']\n// [ "h", "e", "l", "l", "o" ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"上面的写法，有一个重要的好处，那就是能够正确识别四个字节的 Unicode 字符。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"'x\uD83D\uDE80y'.length // 4\n[...'x\uD83D\uDE80y'].length // 3\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码的第一种写法，JavaScript 会将四个字节的 Unicode 字符，识别为 2 个字符，采用扩展运算符就没有这个问题。因此，正确返回字符串长度的函数，可以像下面这样写。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function length(str) {\n  return [...str].length;\n}\n\nlength('x\uD83D\uDE80y') // 3\n"})}),"\n",(0,s.jsx)(n.p,{children:"凡是涉及到操作四个字节的 Unicode 字符的函数，都有这个问题。因此，最好都用扩展运算符改写。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let str = 'x\uD83D\uDE80y';\n\nstr.split('').reverse().join('')\n// 'y\uDE80\uD83Dx'\n\n[...str].reverse().join('')\n// 'y\uD83D\uDE80x'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，如果不用扩展运算符，字符串的",(0,s.jsx)(n.code,{children:"reverse()"}),"操作就不正确。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（5）实现了 Iterator 接口的对象"})}),"\n",(0,s.jsx)(n.p,{children:"任何定义了遍历器（Iterator）接口的对象（参阅 Iterator 一章），都可以用扩展运算符转为真正的数组。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let nodeList = document.querySelectorAll('div');\nlet array = [...nodeList];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"querySelectorAll()"}),"方法返回的是一个",(0,s.jsx)(n.code,{children:"NodeList"}),"对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于",(0,s.jsx)(n.code,{children:"NodeList"}),"对象实现了 Iterator。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Number.prototype[Symbol.iterator] = function*() {\n  let i = 0;\n  let num = this.valueOf();\n  while (i < num) {\n    yield i++;\n  }\n}\n\nconsole.log([...5]) // [0, 1, 2, 3, 4]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，先定义了",(0,s.jsx)(n.code,{children:"Number"}),"对象的遍历器接口，扩展运算符将",(0,s.jsx)(n.code,{children:"5"}),"自动转成",(0,s.jsx)(n.code,{children:"Number"}),"实例以后，就会调用这个接口，就会返回自定义的结果。"]}),"\n",(0,s.jsx)(n.p,{children:"对于那些没有部署 Iterator 接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let arrayLike = {\n  '0': 'a',\n  '1': 'b',\n  '2': 'c',\n  length: 3\n};\n\n// TypeError: Cannot spread non-iterable object.\nlet arr = [...arrayLike];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"arrayLike"}),"是一个类似数组的对象，但是没有部署 Iterator 接口，扩展运算符就会报错。这时，可以改为使用",(0,s.jsx)(n.code,{children:"Array.from"}),"方法将",(0,s.jsx)(n.code,{children:"arrayLike"}),"转为真正的数组。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"（6）Map 和 Set 结构，Generator 函数"})}),"\n",(0,s.jsx)(n.p,{children:"扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，比如 Map 结构。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let map = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nlet arr = [...map.keys()]; // [1, 2, 3]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generator 函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const go = function*(){\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...go()] // [1, 2, 3]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，变量",(0,s.jsx)(n.code,{children:"go"}),"是一个 Generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。"]}),"\n",(0,s.jsx)(n.p,{children:"如果对没有 Iterator 接口的对象，使用扩展运算符，将会报错。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const obj = {a: 1, b: 2};\nlet arr = [...obj]; // TypeError: Cannot spread non-iterable object\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"arrayfrom",children:["Array.from()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#arrayfrom",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Array.from()"}),"方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。"]}),"\n",(0,s.jsxs)(n.p,{children:["下面是一个类似数组的对象，",(0,s.jsx)(n.code,{children:"Array.from()"}),"将它转为真正的数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n\n// ES5 的写法\nvar arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\n\n// ES6 的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n"})}),"\n",(0,s.jsxs)(n.p,{children:["实际应用中，常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的",(0,s.jsx)(n.code,{children:"arguments"}),"对象。",(0,s.jsx)(n.code,{children:"Array.from()"}),"都可以将它们转为真正的数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// NodeList 对象\nlet ps = document.querySelectorAll('p');\nArray.from(ps).filter(p => {\n  return p.textContent.length > 100;\n});\n\n// arguments 对象\nfunction foo() {\n  var args = Array.from(arguments);\n  // ...\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"querySelectorAll()"}),"方法返回的是一个类似数组的对象，可以将这个对象转为真正的数组，再使用",(0,s.jsx)(n.code,{children:"filter()"}),"方法。"]}),"\n",(0,s.jsxs)(n.p,{children:["只要是部署了 Iterator 接口的数据结构，",(0,s.jsx)(n.code,{children:"Array.from()"}),"都能将其转为数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array.from('hello')\n// ['h', 'e', 'l', 'l', 'o']\n\nlet namesSet = new Set(['a', 'b'])\nArray.from(namesSet) // ['a', 'b']\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，字符串和 Set 结构都具有 Iterator 接口，因此可以被",(0,s.jsx)(n.code,{children:"Array.from()"}),"转为真正的数组。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果参数是一个真正的数组，",(0,s.jsx)(n.code,{children:"Array.from()"}),"会返回一个一模一样的新数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array.from([1, 2, 3])\n// [1, 2, 3]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["值得提醒的是，扩展运算符（",(0,s.jsx)(n.code,{children:"..."}),"）也可以将某些数据结构转为数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// arguments对象\nfunction foo() {\n  const args = [...arguments];\n}\n\n// NodeList对象\n[...document.querySelectorAll('div')]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["扩展运算符背后调用的是遍历器接口（",(0,s.jsx)(n.code,{children:"Symbol.iterator"}),"），如果一个对象没有部署这个接口，就无法转换。",(0,s.jsx)(n.code,{children:"Array.from()"}),"方法还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有",(0,s.jsx)(n.code,{children:"length"}),"属性。因此，任何有",(0,s.jsx)(n.code,{children:"length"}),"属性的对象，都可以通过",(0,s.jsx)(n.code,{children:"Array.from()"}),"方法转为数组，而此时扩展运算符就无法转换。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array.from({ length: 3 });\n// [ undefined, undefined, undefined ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Array.from()"}),"返回了一个具有三个成员的数组，每个位置的值都是",(0,s.jsx)(n.code,{children:"undefined"}),"。扩展运算符转换不了这个对象。"]}),"\n",(0,s.jsxs)(n.p,{children:["对于还没有部署该方法的浏览器，可以用",(0,s.jsx)(n.code,{children:"Array.prototype.slice()"}),"方法替代。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const toArray = (() =>\n  Array.from ? Array.from : obj => [].slice.call(obj)\n)();\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Array.from()"}),"还可以接受一个函数作为第二个参数，作用类似于数组的",(0,s.jsx)(n.code,{children:"map()"}),"方法，用来对每个元素进行处理，将处理后的值放入返回的数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n"})}),"\n",(0,s.jsx)(n.p,{children:"下面的例子是取出一组 DOM 节点的文本内容。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let spans = document.querySelectorAll('span.name');\n\n// map()\nlet names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n// Array.from()\nlet names2 = Array.from(spans, s => s.textContent)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["下面的例子将数组中布尔值为",(0,s.jsx)(n.code,{children:"false"}),"的成员转为",(0,s.jsx)(n.code,{children:"0"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n"})}),"\n",(0,s.jsx)(n.p,{children:"另一个例子是返回各种数据的类型。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function typesOf () {\n  return Array.from(arguments, value => typeof value)\n}\ntypesOf(null, [], NaN)\n// ['object', 'object', 'number']\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果",(0,s.jsx)(n.code,{children:"map()"}),"函数里面用到了",(0,s.jsx)(n.code,{children:"this"}),"关键字，还可以传入",(0,s.jsx)(n.code,{children:"Array.from()"}),"的第三个参数，用来绑定",(0,s.jsx)(n.code,{children:"this"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Array.from()"}),"可以将各种值转为真正的数组，并且还提供",(0,s.jsx)(n.code,{children:"map"}),"功能。这实际上意味着，只要有一个原始的数据结构，你就可以先对它的值进行处理，然后转成规范的数组结构，进而就可以使用数量众多的数组方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array.from({ length: 2 }, () => 'jack')\n// ['jack', 'jack']\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Array.from()"}),"的第一个参数指定了第二个参数运行的次数。这种特性可以让该方法的用法变得非常灵活。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Array.from()"}),"的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于",(0,s.jsx)(n.code,{children:"\\uFFFF"}),"的 Unicode 字符，算作两个字符的 bug。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function countSymbols(string) {\n  return Array.from(string).length;\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"arrayof",children:["Array.of()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#arrayof",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Array.of()"}),"方法用于将一组值，转换为数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这个方法的主要目的，是弥补数组构造函数",(0,s.jsx)(n.code,{children:"Array()"}),"的不足。因为参数个数的不同，会导致",(0,s.jsx)(n.code,{children:"Array()"}),"的行为有差异。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array() // []\nArray(3) // [, , ,]\nArray(3, 11, 8) // [3, 11, 8]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Array()"}),"方法没有参数、一个参数、三个参数时，返回的结果都不一样。只有当参数个数不少于 2 个时，",(0,s.jsx)(n.code,{children:"Array()"}),"才会返回由参数组成的新数组。参数只有一个正整数时，实际上是指定数组的长度。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Array.of()"}),"基本上可以用来替代",(0,s.jsx)(n.code,{children:"Array()"}),"或",(0,s.jsx)(n.code,{children:"new Array()"}),"，并且不存在由于参数不同而导致的重载。它的行为非常统一。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array.of() // []\nArray.of(undefined) // [undefined]\nArray.of(1) // [1]\nArray.of(1, 2) // [1, 2]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Array.of()"}),"总是返回参数值组成的数组。如果没有参数，就返回一个空数组。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Array.of()"}),"方法可以用下面的代码模拟实现。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function ArrayOf(){\n  return [].slice.call(arguments);\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"实例方法copywithin",children:["实例方法：copyWithin()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法copywithin",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["数组实例的",(0,s.jsx)(n.code,{children:"copyWithin()"}),"方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array.prototype.copyWithin(target, start = 0, end = this.length)\n"})}),"\n",(0,s.jsx)(n.p,{children:"它接受三个参数。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"target（必需）：从该位置开始替换数据。如果为负值，表示倒数。"}),"\n",(0,s.jsx)(n.li,{children:"start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。"}),"\n",(0,s.jsx)(n.li,{children:"end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这三个参数都应该是数值，如果不是，会自动转为数值。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[1, 2, 3, 4, 5].copyWithin(0, 3)\n// [4, 5, 3, 4, 5]\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。"}),"\n",(0,s.jsx)(n.p,{children:"下面是更多例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 将3号位复制到0号位\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4)\n// [4, 2, 3, 4, 5]\n\n// -2相当于3号位，-1相当于4号位\n[1, 2, 3, 4, 5].copyWithin(0, -2, -1)\n// [4, 2, 3, 4, 5]\n\n// 将3号位复制到0号位\n[].copyWithin.call({length: 5, 3: 1}, 0, 3)\n// {0: 1, 3: 1, length: 5}\n\n// 将2号位到数组结束，复制到0号位\nlet i32a = new Int32Array([1, 2, 3, 4, 5]);\ni32a.copyWithin(0, 2);\n// Int32Array [3, 4, 5, 4, 5]\n\n// 对于没有部署 TypedArray 的 copyWithin 方法的平台\n// 需要采用下面的写法\n[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\n// Int32Array [4, 2, 3, 4, 5]\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"实例方法findfindindexfindlastfindlastindex",children:["实例方法：find()，findIndex()，findLast()，findLastIndex()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法findfindindexfindlastfindlastindex",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["数组实例的",(0,s.jsx)(n.code,{children:"find()"}),"方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为",(0,s.jsx)(n.code,{children:"true"}),"的成员，然后返回该成员。如果没有符合条件的成员，则返回",(0,s.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[1, 4, -5, 10].find((n) => n < 0)\n// -5\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码找出数组中第一个小于 0 的成员。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"find()"}),"方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。"]}),"\n",(0,s.jsxs)(n.p,{children:["数组实例的",(0,s.jsx)(n.code,{children:"findIndex()"}),"方法的用法与",(0,s.jsx)(n.code,{children:"find()"}),"方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回",(0,s.jsx)(n.code,{children:"-1"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这两个方法都可以接受第二个参数，用来绑定回调函数的",(0,s.jsx)(n.code,{children:"this"}),"对象。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function f(v){\n  return v > this.age;\n}\nlet person = {name: 'John', age: 20};\n[10, 12, 26, 15].find(f, person);    // 26\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面的代码中，",(0,s.jsx)(n.code,{children:"find()"}),"函数接收了第二个参数",(0,s.jsx)(n.code,{children:"person"}),"对象，回调函数中的",(0,s.jsx)(n.code,{children:"this"}),"对象指向",(0,s.jsx)(n.code,{children:"person"}),"对象。"]}),"\n",(0,s.jsxs)(n.p,{children:["另外，这两个方法都可以发现",(0,s.jsx)(n.code,{children:"NaN"}),"，弥补了数组的",(0,s.jsx)(n.code,{children:"indexOf()"}),"方法的不足。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[NaN].indexOf(NaN)\n// -1\n\n[NaN].findIndex(y => Object.is(NaN, y))\n// 0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"indexOf()"}),"方法无法识别数组的",(0,s.jsx)(n.code,{children:"NaN"}),"成员，但是",(0,s.jsx)(n.code,{children:"findIndex()"}),"方法可以借助",(0,s.jsx)(n.code,{children:"Object.is()"}),"方法做到。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"find()"}),"和",(0,s.jsx)(n.code,{children:"findIndex()"}),"都是从数组的0号位，依次向后检查。",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-array-find-from-last",target:"_blank",rel:"noopener noreferrer",children:"ES2022"})," 新增了两个方法",(0,s.jsx)(n.code,{children:"findLast()"}),"和",(0,s.jsx)(n.code,{children:"findLastIndex()"}),"，从数组的最后一个成员开始，依次向前检查，其他都保持不变。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const array = [\n  { value: 1 },\n  { value: 2 },\n  { value: 3 },\n  { value: 4 }\n];\n\narray.findLast(n => n.value % 2 === 1); // { value: 3 }\narray.findLastIndex(n => n.value % 2 === 1); // 2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面示例中，",(0,s.jsx)(n.code,{children:"findLast()"}),"和",(0,s.jsx)(n.code,{children:"findLastIndex()"}),"从数组结尾开始，寻找第一个",(0,s.jsx)(n.code,{children:"value"}),"属性为奇数的成员。结果，该成员是",(0,s.jsx)(n.code,{children:"{ value: 3 }"}),"，位置是2号位。"]}),"\n",(0,s.jsxs)(n.h2,{id:"实例方法fill",children:["实例方法：fill()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法fill",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"fill"}),"方法使用给定值，填充一个数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\nnew Array(3).fill(7)\n// [7, 7, 7]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码表明，",(0,s.jsx)(n.code,{children:"fill"}),"方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"fill"}),"方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码表示，",(0,s.jsx)(n.code,{children:"fill"}),"方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。"]}),"\n",(0,s.jsx)(n.p,{children:"注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'let arr = new Array(3).fill({name: "Mike"});\narr[0].name = "Ben";\narr\n// [{name: "Ben"}, {name: "Ben"}, {name: "Ben"}]\n\nlet arr = new Array(3).fill([]);\narr[0].push(5);\narr\n// [[5], [5], [5]]\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"实例方法entrieskeys-和-values",children:["实例方法：entries()，keys() 和 values()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法entrieskeys-和-values",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ES6 提供三个新的方法——",(0,s.jsx)(n.code,{children:"entries()"}),"，",(0,s.jsx)(n.code,{children:"keys()"}),"和",(0,s.jsx)(n.code,{children:"values()"}),"——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用",(0,s.jsx)(n.code,{children:"for...of"}),"循环进行遍历，唯一的区别是",(0,s.jsx)(n.code,{children:"keys()"}),"是对键名的遍历、",(0,s.jsx)(n.code,{children:"values()"}),"是对键值的遍历，",(0,s.jsx)(n.code,{children:"entries()"}),"是对键值对的遍历。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"for (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果不使用",(0,s.jsx)(n.code,{children:"for...of"}),"循环，可以手动调用遍历器对象的",(0,s.jsx)(n.code,{children:"next"}),"方法，进行遍历。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let letter = ['a', 'b', 'c'];\nlet entries = letter.entries();\nconsole.log(entries.next().value); // [0, 'a']\nconsole.log(entries.next().value); // [1, 'b']\nconsole.log(entries.next().value); // [2, 'c']\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"实例方法includes",children:["实例方法：includes()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法includes",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Array.prototype.includes"}),"方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的",(0,s.jsx)(n.code,{children:"includes"}),"方法类似。ES2016 引入了该方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[1, 2, 3].includes(2)     // true\n[1, 2, 3].includes(4)     // false\n[1, 2, NaN].includes(NaN) // true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["该方法的第二个参数表示搜索的起始位置，默认为",(0,s.jsx)(n.code,{children:"0"}),"。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为",(0,s.jsx)(n.code,{children:"-4"}),"，但数组长度为",(0,s.jsx)(n.code,{children:"3"}),"），则会重置为从",(0,s.jsx)(n.code,{children:"0"}),"开始。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["没有该方法之前，我们通常使用数组的",(0,s.jsx)(n.code,{children:"indexOf"}),"方法，检查是否包含某个值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"if (arr.indexOf(el) !== -1) {\n  // ...\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"indexOf"}),"方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于",(0,s.jsx)(n.code,{children:"-1"}),"，表达起来不够直观。二是，它内部使用严格相等运算符（",(0,s.jsx)(n.code,{children:"==="}),"）进行判断，这会导致对",(0,s.jsx)(n.code,{children:"NaN"}),"的误判。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[NaN].indexOf(NaN)\n// -1\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"includes"}),"使用的是不一样的判断算法，就没有这个问题。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[NaN].includes(NaN)\n// true\n"})}),"\n",(0,s.jsx)(n.p,{children:"下面代码用来检查当前环境是否支持该方法，如果不支持，部署一个简易的替代版本。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const contains = (() =>\n  Array.prototype.includes\n    ? (arr, value) => arr.includes(value)\n    : (arr, value) => arr.some(el => el === value)\n)();\ncontains(['foo', 'bar'], 'baz'); // => false\n"})}),"\n",(0,s.jsxs)(n.p,{children:["另外，Map 和 Set 数据结构有一个",(0,s.jsx)(n.code,{children:"has"}),"方法，需要注意与",(0,s.jsx)(n.code,{children:"includes"}),"区分。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Map 结构的",(0,s.jsx)(n.code,{children:"has"}),"方法，是用来查找键名的，比如",(0,s.jsx)(n.code,{children:"Map.prototype.has(key)"}),"、",(0,s.jsx)(n.code,{children:"WeakMap.prototype.has(key)"}),"、",(0,s.jsx)(n.code,{children:"Reflect.has(target, propertyKey)"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:["Set 结构的",(0,s.jsx)(n.code,{children:"has"}),"方法，是用来查找值的，比如",(0,s.jsx)(n.code,{children:"Set.prototype.has(value)"}),"、",(0,s.jsx)(n.code,{children:"WeakSet.prototype.has(value)"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"实例方法flatflatmap",children:["实例方法：flat()，flatMap()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法flatflatmap",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["数组的成员有时还是数组，",(0,s.jsx)(n.code,{children:"Array.prototype.flat()"}),"用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[1, 2, [3, 4]].flat()\n// [1, 2, 3, 4]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，原数组的成员里面有一个数组，",(0,s.jsx)(n.code,{children:"flat()"}),"方法将子数组的成员取出来，添加在原来的位置。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"flat()"}),"默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将",(0,s.jsx)(n.code,{children:"flat()"}),"方法的参数写成一个整数，表示想要拉平的层数，默认为1。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[1, 2, [3, [4, 5]]].flat()\n// [1, 2, 3, [4, 5]]\n\n[1, 2, [3, [4, 5]]].flat(2)\n// [1, 2, 3, 4, 5]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"flat()"}),"的参数为2，表示要“拉平”两层的嵌套数组。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果不管有多少层嵌套，都要转成一维数组，可以用",(0,s.jsx)(n.code,{children:"Infinity"}),"关键字作为参数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[1, [2, [3]]].flat(Infinity)\n// [1, 2, 3]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果原数组有空位，",(0,s.jsx)(n.code,{children:"flat()"}),"方法会跳过空位。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[1, 2, , 4, 5].flat()\n// [1, 2, 4, 5]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"flatMap()"}),"方法对原数组的每个成员执行一个函数（相当于执行",(0,s.jsx)(n.code,{children:"Array.prototype.map()"}),"），然后对返回值组成的数组执行",(0,s.jsx)(n.code,{children:"flat()"}),"方法。该方法返回一个新数组，不改变原数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 相当于 [[2, 4], [3, 6], [4, 8]].flat()\n[2, 3, 4].flatMap((x) => [x, x * 2])\n// [2, 4, 3, 6, 4, 8]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"flatMap()"}),"只能展开一层数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()\n[1, 2, 3, 4].flatMap(x => [[x * 2]])\n// [[2], [4], [6], [8]]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，遍历函数返回的是一个双层的数组，但是默认只能展开一层，因此",(0,s.jsx)(n.code,{children:"flatMap()"}),"返回的还是一个嵌套数组。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"flatMap()"}),"方法的参数是一个遍历函数，该函数可以接受三个参数，分别是当前数组成员、当前数组成员的位置（从零开始）、原数组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"arr.flatMap(function callback(currentValue[, index[, array]]) {\n  // ...\n}[, thisArg])\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"flatMap()"}),"方法还可以有第二个参数，用来绑定遍历函数里面的",(0,s.jsx)(n.code,{children:"this"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"实例方法at",children:["实例方法：at()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法at",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["长久以来，JavaScript 不支持数组的负索引，如果要引用数组的最后一个成员，不能写成",(0,s.jsx)(n.code,{children:"arr[-1]"}),"，只能使用",(0,s.jsx)(n.code,{children:"arr[arr.length - 1]"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["这是因为方括号运算符",(0,s.jsx)(n.code,{children:"[]"}),"在 JavaScript 语言里面，不仅用于数组，还用于对象。对于对象来说，方括号里面就是键名，比如",(0,s.jsx)(n.code,{children:"obj[1]"}),"引用的是键名为字符串",(0,s.jsx)(n.code,{children:"1"}),"的键，同理",(0,s.jsx)(n.code,{children:"obj[-1]"}),"引用的是键名为字符串",(0,s.jsx)(n.code,{children:"-1"}),"的键。由于 JavaScript 的数组是特殊的对象，所以方括号里面的负数无法再有其他语义了，也就是说，不可能添加新语法来支持负索引。"]}),"\n",(0,s.jsxs)(n.p,{children:["为了解决这个问题，",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-relative-indexing-method/",target:"_blank",rel:"noopener noreferrer",children:"ES2022"})," 为数组实例增加了",(0,s.jsx)(n.code,{children:"at()"}),"方法，接受一个整数作为参数，返回对应位置的成员，并支持负索引。这个方法不仅可用于数组，也可用于字符串和类型数组（TypedArray）。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const arr = [5, 12, 8, 130, 44];\narr.at(2) // 8\narr.at(-2) // 130\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果参数位置超出了数组范围，",(0,s.jsx)(n.code,{children:"at()"}),"返回",(0,s.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const sentence = 'This is a sample sentence';\n\nsentence.at(0); // 'T'\nsentence.at(-1); // 'e'\n\nsentence.at(-100) // undefined\nsentence.at(100) // undefined\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"实例方法toreversedtosortedtosplicedwith",children:["实例方法：toReversed()，toSorted()，toSpliced()，with()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法toreversedtosortedtosplicedwith",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["很多数组的传统方法会改变原数组，比如",(0,s.jsx)(n.code,{children:"push()"}),"、",(0,s.jsx)(n.code,{children:"pop()"}),"、",(0,s.jsx)(n.code,{children:"shift()"}),"、",(0,s.jsx)(n.code,{children:"unshift()"}),"等等。数组只要调用了这些方法，它的值就变了。",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-change-array-by-copy",target:"_blank",rel:"noopener noreferrer",children:"ES2023"}),"引入了四个新方法，对数组进行操作时，不改变原数组，而返回一个原数组的拷贝。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Array.prototype.toReversed() -> Array"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Array.prototype.toSorted(compareFn) -> Array"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Array.prototype.toSpliced(start, deleteCount, ...items) -> Array"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Array.prototype.with(index, value) -> Array"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"它们分别对应数组的原有方法。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"toReversed()"}),"对应",(0,s.jsx)(n.code,{children:"reverse()"}),"，用来颠倒数组成员的位置。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"toSorted()"}),"对应",(0,s.jsx)(n.code,{children:"sort()"}),"，用来对数组成员排序。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"toSpliced()"}),"对应",(0,s.jsx)(n.code,{children:"splice()"}),"，用来在指定位置，删除指定数量的成员，并插入新成员。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"with(index, value)"}),"对应",(0,s.jsx)(n.code,{children:"splice(index, 1, value)"}),"，用来将指定位置的成员替换为新的值。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"上面是这四个新方法对应的原有方法，含义和用法完全一样，唯一不同的是不会改变原数组，而是返回原数组操作后的拷贝。"}),"\n",(0,s.jsx)(n.p,{children:"下面是示例。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const sequence = [1, 2, 3];\nsequence.toReversed() // [3, 2, 1]\nsequence // [1, 2, 3]\n\nconst outOfOrder = [3, 1, 2];\noutOfOrder.toSorted() // [1, 2, 3]\noutOfOrder // [3, 1, 2]\n\nconst array = [1, 2, 3, 4];\narray.toSpliced(1, 2, 5, 6, 7) // [1, 5, 6, 7, 4]\narray // [1, 2, 3, 4]\n\nconst correctionNeeded = [1, 1, 3];\ncorrectionNeeded.with(1, 2) // [1, 2, 3]\ncorrectionNeeded // [1, 1, 3]\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"实例方法groupgrouptomap",children:["实例方法：group()，groupToMap()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法groupgrouptomap",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["数组成员分组是一个常见需求，比如 SQL 有",(0,s.jsx)(n.code,{children:"GROUP BY"}),"子句和函数式编程有 MapReduce 方法。现在有一个",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-array-grouping",target:"_blank",rel:"noopener noreferrer",children:"提案"}),"，为 JavaScript 新增了数组实例方法",(0,s.jsx)(n.code,{children:"group()"}),"和",(0,s.jsx)(n.code,{children:"groupToMap()"}),"，它们可以根据分组函数的运行结果，将数组成员分组。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"group()"}),"的参数是一个分组函数，原数组的每个成员都会依次执行这个函数，确定自己是哪一个组。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const array = [1, 2, 3, 4, 5];\n\narray.group((num, index, array) => {\n  return num % 2 === 0 ? 'even': 'odd';\n});\n// { odd: [1, 3, 5], even: [2, 4] }\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"group()"}),"的分组函数可以接受三个参数，依次是数组的当前成员、该成员的位置序号、原数组（上例是",(0,s.jsx)(n.code,{children:"num"}),"、",(0,s.jsx)(n.code,{children:"index"}),"和",(0,s.jsx)(n.code,{children:"array"}),"）。分组函数的返回值应该是字符串（或者可以自动转为字符串），以作为分组后的组名。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"group()"}),"的返回值是一个对象，该对象的键名就是每一组的组名，即分组函数返回的每一个字符串（上例是",(0,s.jsx)(n.code,{children:"even"}),"和",(0,s.jsx)(n.code,{children:"odd"}),"）；该对象的键值是一个数组，包括所有产生当前键名的原数组成员。"]}),"\n",(0,s.jsx)(n.p,{children:"下面是另一个例子。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[6.1, 4.2, 6.3].group(Math.floor)\n// { '4': [4.2], '6': [6.1, 6.3] }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面示例中，",(0,s.jsx)(n.code,{children:"Math.floor"}),"作为分组函数，对原数组进行分组。它的返回值原本是数值，这时会自动转为字符串，作为分组的组名。原数组的成员根据分组函数的运行结果，进入对应的组。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"group()"}),"还可以接受一个对象，作为第二个参数。该对象会绑定分组函数（第一个参数）里面的",(0,s.jsx)(n.code,{children:"this"}),"，不过如果分组函数是一个箭头函数，该对象无效，因为箭头函数内部的",(0,s.jsx)(n.code,{children:"this"}),"是固化的。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"groupToMap()"}),"的作用和用法与",(0,s.jsx)(n.code,{children:"group()"}),"完全一致，唯一的区别是返回值是一个 Map 结构，而不是对象。Map 结构的键名可以是各种值，所以不管分组函数返回什么值，都会直接作为组名（Map 结构的键名），不会强制转为字符串。这对于分组函数返回值是对象的情况，尤其有用。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const array = [1, 2, 3, 4, 5];\n\nconst odd  = { odd: true };\nconst even = { even: true };\narray.groupToMap((num, index, array) => {\n  return num % 2 === 0 ? even: odd;\n});\n//  Map { {odd: true}: [1, 3, 5], {even: true}: [2, 4] }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面示例返回的是一个 Map 结构，它的键名就是分组函数返回的两个对象",(0,s.jsx)(n.code,{children:"odd"}),"和",(0,s.jsx)(n.code,{children:"even"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["总之，按照字符串分组就使用",(0,s.jsx)(n.code,{children:"group()"}),"，按照对象分组就使用",(0,s.jsx)(n.code,{children:"groupToMap()"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"数组的空位",children:["数组的空位",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数组的空位",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["数组的空位指的是，数组的某一个位置没有任何值，比如",(0,s.jsx)(n.code,{children:"Array()"}),"构造函数返回的数组都是空位。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array(3) // [, , ,]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Array(3)"}),"返回一个具有 3 个空位的数组。"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，空位不是",(0,s.jsx)(n.code,{children:"undefined"}),"，某一个位置的值等于",(0,s.jsx)(n.code,{children:"undefined"}),"，依然是有值的。空位是没有任何值，",(0,s.jsx)(n.code,{children:"in"}),"运算符可以说明这一点。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"0 in [undefined, undefined, undefined] // true\n0 in [, , ,] // false\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码说明，第一个数组的 0 号位置是有值的，第二个数组的 0 号位置没有值。"}),"\n",(0,s.jsx)(n.p,{children:"ES5 对空位的处理，已经很不一致了，大多数情况下会忽略空位。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"forEach()"}),", ",(0,s.jsx)(n.code,{children:"filter()"}),", ",(0,s.jsx)(n.code,{children:"reduce()"}),", ",(0,s.jsx)(n.code,{children:"every()"})," 和",(0,s.jsx)(n.code,{children:"some()"}),"都会跳过空位。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"map()"}),"会跳过空位，但会保留这个值"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"join()"}),"和",(0,s.jsx)(n.code,{children:"toString()"}),"会将空位视为",(0,s.jsx)(n.code,{children:"undefined"}),"，而",(0,s.jsx)(n.code,{children:"undefined"}),"和",(0,s.jsx)(n.code,{children:"null"}),"会被处理成空字符串。"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// forEach方法\n[,'a'].forEach((x,i) => console.log(i)); // 1\n\n// filter方法\n['a',,'b'].filter(x => true) // ['a','b']\n\n// every方法\n[,'a'].every(x => x==='a') // true\n\n// reduce方法\n[1,,2].reduce((x,y) => x+y) // 3\n\n// some方法\n[,'a'].some(x => x !== 'a') // false\n\n// map方法\n[,'a'].map(x => 1) // [,1]\n\n// join方法\n[,'a',undefined,null].join('#') // \"#a##\"\n\n// toString方法\n[,'a',undefined,null].toString() // \",a,,\"\n"})}),"\n",(0,s.jsxs)(n.p,{children:["ES6 则是明确将空位转为",(0,s.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Array.from()"}),"方法会将数组的空位，转为",(0,s.jsx)(n.code,{children:"undefined"}),"，也就是说，这个方法不会忽略空位。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Array.from(['a',,'b'])\n// [ \"a\", undefined, \"b\" ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["扩展运算符（",(0,s.jsx)(n.code,{children:"..."}),"）也会将空位转为",(0,s.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[...['a',,'b']]\n// [ \"a\", undefined, \"b\" ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"copyWithin()"}),"会连空位一起拷贝。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"[,'a','b',,].copyWithin(2,0) // [,\"a\",,\"a\"]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"fill()"}),"会将空位视为正常的数组位置。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'new Array(3).fill(\'a\') // ["a","a","a"]\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"for...of"}),"循环也会遍历空位。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let arr = [, ,];\nfor (let i of arr) {\n  console.log(1);\n}\n// 1\n// 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，数组",(0,s.jsx)(n.code,{children:"arr"}),"有两个空位，",(0,s.jsx)(n.code,{children:"for...of"}),"并没有忽略它们。如果改成",(0,s.jsx)(n.code,{children:"map()"}),"方法遍历，空位是会跳过的。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"entries()"}),"、",(0,s.jsx)(n.code,{children:"keys()"}),"、",(0,s.jsx)(n.code,{children:"values()"}),"、",(0,s.jsx)(n.code,{children:"find()"}),"和",(0,s.jsx)(n.code,{children:"findIndex()"}),"会将空位处理成",(0,s.jsx)(n.code,{children:"undefined"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// entries()\n[...[,'a'].entries()] // [[0,undefined], [1,\"a\"]]\n\n// keys()\n[...[,'a'].keys()] // [0,1]\n\n// values()\n[...[,'a'].values()] // [undefined,\"a\"]\n\n// find()\n[,'a'].find(x => true) // undefined\n\n// findIndex()\n[,'a'].findIndex(x => true) // 0\n"})}),"\n",(0,s.jsx)(n.p,{children:"由于空位的处理规则非常不统一，所以建议避免出现空位。"}),"\n",(0,s.jsxs)(n.h2,{id:"arrayprototypesort-的排序稳定性",children:["Array.prototype.sort() 的排序稳定性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#arrayprototypesort-的排序稳定性",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"排序稳定性（stable sorting）是排序算法的重要属性，指的是排序关键字相同的项目，排序前后的顺序不变。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const arr = [\n  'peach',\n  'straw',\n  'apple',\n  'spork'\n];\n\nconst stableSorting = (s1, s2) => {\n  if (s1[0] < s2[0]) return -1;\n  return 1;\n};\n\narr.sort(stableSorting)\n//\xa0[\"apple\", \"peach\", \"straw\", \"spork\"]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码对数组",(0,s.jsx)(n.code,{children:"arr"}),"按照首字母进行排序。排序结果中，",(0,s.jsx)(n.code,{children:"straw"}),"在",(0,s.jsx)(n.code,{children:"spork"}),"的前面，跟原始顺序一致，所以排序算法",(0,s.jsx)(n.code,{children:"stableSorting"}),"是稳定排序。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const unstableSorting = (s1, s2) => {\n  if (s1[0] <= s2[0]) return -1;\n  return 1;\n};\n\narr.sort(unstableSorting)\n// ["apple", "peach", "spork", "straw"]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，排序结果是",(0,s.jsx)(n.code,{children:"spork"}),"在",(0,s.jsx)(n.code,{children:"straw"}),"前面，跟原始顺序相反，所以排序算法",(0,s.jsx)(n.code,{children:"unstableSorting"}),"是不稳定的。"]}),"\n",(0,s.jsx)(n.p,{children:"常见的排序算法之中，插入排序、合并排序、冒泡排序等都是稳定的，堆排序、快速排序等是不稳定的。不稳定排序的主要缺点是，多重排序时可能会产生问题。假设有一个姓和名的列表，要求按照“姓氏为主要关键字，名字为次要关键字”进行排序。开发者可能会先按名字排序，再按姓氏进行排序。如果排序算法是稳定的，这样就可以达到“先姓氏，后名字”的排序效果。如果是不稳定的，就不行。"}),"\n",(0,s.jsxs)(n.p,{children:["早先的 ECMAScript 没有规定，",(0,s.jsx)(n.code,{children:"Array.prototype.sort()"}),"的默认排序算法是否稳定，留给浏览器自己决定，这导致某些实现是不稳定的。",(0,s.jsx)(n.a,{href:"https://github.com/tc39/ecma262/pull/1340",target:"_blank",rel:"noopener noreferrer",children:"ES2019"})," 明确规定，",(0,s.jsx)(n.code,{children:"Array.prototype.sort()"}),"的默认排序算法必须稳定。这个规定已经做到了，现在 JavaScript 各个主要实现的默认排序算法都是稳定的。"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F9.%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95.md"]={toc:[{text:"扩展运算符",id:"扩展运算符",depth:2},{text:"含义",id:"含义",depth:3},{text:"替代函数的 apply() 方法",id:"替代函数的-apply-方法",depth:3},{text:"扩展运算符的应用",id:"扩展运算符的应用",depth:3},{text:"Array.from()",id:"arrayfrom",depth:2},{text:"Array.of()",id:"arrayof",depth:2},{text:"实例方法：copyWithin()",id:"实例方法copywithin",depth:2},{text:"实例方法：find()，findIndex()，findLast()，findLastIndex()",id:"实例方法findfindindexfindlastfindlastindex",depth:2},{text:"实例方法：fill()",id:"实例方法fill",depth:2},{text:"实例方法：entries()，keys() 和 values()",id:"实例方法entrieskeys-和-values",depth:2},{text:"实例方法：includes()",id:"实例方法includes",depth:2},{text:"实例方法：flat()，flatMap()",id:"实例方法flatflatmap",depth:2},{text:"实例方法：at()",id:"实例方法at",depth:2},{text:"实例方法：toReversed()，toSorted()，toSpliced()，with()",id:"实例方法toreversedtosortedtosplicedwith",depth:2},{text:"实例方法：group()，groupToMap()",id:"实例方法groupgrouptomap",depth:2},{text:"数组的空位",id:"数组的空位",depth:2},{text:"Array.prototype.sort() 的排序稳定性",id:"arrayprototypesort-的排序稳定性",depth:2}],title:"9.数组的扩展",headingTitle:"9.数组的扩展",frontmatter:{}}}}]);