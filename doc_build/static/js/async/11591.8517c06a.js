"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["11591"],{224652:function(e,n,i){i.r(n),i.d(n,{default:()=>ex});var r=i(552676),s=i(740453);let l=i.p+"static/image/cb5f6aa64eb283f161eba34ba07af7fa.8c877723.webp",c=i.p+"static/image/7f0f4b3f1f89ae8928ef43c5db7457f9.ee799c6b.webp",d=i.p+"static/image/9e0135d899e14f0ae1f2e49db1d2b03c.8c877723.webp",t=i.p+"static/image/e86a9d70ba74ba8732a975d1955c8b24.a1fd4b27.webp",o=i.p+"static/image/5bb9c79ec801a8a300d610300c38afc0.aebaf30e.webp",a=i.p+"static/image/d20afa64a3e45f4d7d47e4b297400e5c.5d83139c.webp",h=i.p+"static/image/9e05c294ca015c04958550b4a4d65fc7.6c9a98fc.webp",x=i.p+"static/image/cc46b20d22a311d3af7bb21244d4a98c.224059a2.gif",p=i.p+"static/image/3dd0a457d39ea66052ef084a470d98f6.3fffd69a.gif",f=i.p+"static/image/85511a36ed38acf175dba0fcc4b637d5.63a85f45.webp",j=i.p+"static/image/cf73cbc93e07c182a0b90b2611568d17.3dd432ed.gif",g=i.p+"static/image/f3d13123d9dd9974ede881926e369664.110d923a.webp",u=i.p+"static/image/ea72a16756174d8a369f572519ddf9d0.1adb2018.webp",_=i.p+"static/image/536cc80e3264df35e87287f7f3203ca5.35d9ae68.webp",m=i.p+"static/image/ae34864a3ac7bb3913463c368e3bc664.7801dfe0.webp",b=i.p+"static/image/c9c0618004227bba2c87e3f597af1372.678159ef.webp",E=i.p+"static/image/f1daeefc49a4dd15f6a5c2754a71f1cc.579cd473.webp",G=i.p+"static/image/d1ca0535e366574da45f1dc452894240.1f914142.webp",S=i.p+"static/image/2c46a500279ad0b56c634582ab774edc.491eb3ef.webp",D=i.p+"static/image/31478c1d801771e7f7af550403e6d122.ac5e6085.webp",w=i.p+"static/image/b81e1d024459aad9478a77066f0c9502.fcace032.webp",L=i.p+"static/image/d91153056733b11ea140605b4e8dcaf9.87590a4f.webp",y=i.p+"static/image/793f9ed116dc7d0e8056036f458113c9.0d103249.webp",R=i.p+"static/image/eb6a8376bde72bae56ba0a03be107f8a.8bae6f73.webp",v=i.p+"static/image/80b21586f2d1a3e58208d07e92b9a168.5074f16f.webp",B=i.p+"static/image/8cc7895c39888cdbf6b9f8893066962d.3d1cc978.webp",C=i.p+"static/image/73aac3af97f23658b3c284c40c782b43.bd1e0a23.webp",T=i.p+"static/image/c76e34875427049f731e0281bfeb2854.7702e6ed.webp",k=i.p+"static/image/f3f267e355293f23e707dab1bc793417.5cc175e5.webp",N=i.p+"static/image/5a0b6547329e069114c9afba1f6448c3.07670ca6.webp",U=i.p+"static/image/7728a5351556e153e20b15b289f34190.961b1e3a.webp",M=i.p+"static/image/402420f6fe982824f46f5399b54fca1d.76a8cecd.webp",F=i.p+"static/image/dcef38ba4d257617058603c61d44d9d3.1333d16c.webp",A=i.p+"static/image/2eb8daba32fa0c8a7bed216085d4e11e.db9581ff.webp",I=i.p+"static/image/54f42f380482d2f8d2f05649f1f6b8c0.65abe272.webp",O=i.p+"static/image/f2bb758878b13d86db251d8a413d3e0b.93c7e261.webp",V=i.p+"static/image/eeb7c86a6e36914b036a7a4d0ef88634.96a687b9.webp",H=i.p+"static/image/315f2ed6e61a601d707d27d8517f061b.b6841113.webp",P=i.p+"static/image/a77ae66d90223865e1e928fc9a44163d.b85fe4de.gif",K=i.p+"static/image/a9a665f3305ed4ed64cab0aaf4718565.6bef0ef9.gif",q=i.p+"static/image/b4234b327c2c2c6c55f2a5180852e1e8.93320080.webp",W=i.p+"static/image/52e8a6d51b2188ebdfdd55b0af748be1.7eb5d5ab.webp",X=i.p+"static/image/1da747b5c5f22af6af44590eabad822c.f9d77109.webp",z=i.p+"static/image/de199cba75ea66d201eb60a01802d2dd.f39929cb.webp",Y=i.p+"static/image/e84c30f56c91fa45b3c900f86b8076a3.3ae97727.webp",J=i.p+"static/image/4bfb0482fc42bb0eec06d0b3f12e632c.4205eec3.webp",Z=i.p+"static/image/beb7b6d17025bb6faad3ac72ee5abdf0.d738cf42.gif",Q=i.p+"static/image/4a9d73f7154d3c690abd59202dbdee06.89a05d60.gif",$=i.p+"static/image/4e8f8fa2f75ba79d578b8975a42fe2b4.b33f9581.gif",ee=i.p+"static/image/a6d6034ec292e696407de9d0ab5092f8.fdc9108d.gif",en=i.p+"static/image/6c743062da148352b00b5825db512808.4f04ac53.gif",ei=i.p+"static/image/80c5ce35698bdbb4a8e470c5d6ba6645.1bbd8881.gif",er=i.p+"static/image/ce94238d59b28d2468d48482f488bc37.c45695b9.webp",es=i.p+"static/image/da7b0594d3c3cb7504a65747e3d74ee0.5868c567.webp",el=i.p+"static/image/dbbe7247c1d92b3d283968dc8d73cd63.762ea6d1.webp",ec=i.p+"static/image/221882438634e2a4098d4edc7b47a4e4.606c65f6.webp",ed=i.p+"static/image/6b65594dfdc499b1d59162137b94f6a8.acb44979.webp",et=i.p+"static/image/5f518652771e98ec87575248ba5a1513.469e570d.webp",eo=i.p+"static/image/cb34263e12e6d9aa851b6a334c50ff28.3e0b9f30.webp";function ea(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",code:"code",h2:"h2",blockquote:"blockquote",strong:"strong",ul:"ul",li:"li",h3:"h3",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"42-高级篇svg-滤镜的进阶之模糊与阴影效果",children:["42-高级篇：SVG 滤镜的进阶之模糊与阴影效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-高级篇svg-滤镜的进阶之模糊与阴影效果",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:eo,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["模糊和阴影效果在 Web 设计中扮演着关键角色，远非仅仅是装饰性的设计元素。它们不仅能赋予界面元素深度和现代感，还能有效地引导用户注意力，提升整体视觉吸引力和用户操作的友好性。尽管现代 ",(0,r.jsx)(n.code,{children:"CSS"})," 提供了诸如 ",(0,r.jsx)(n.code,{children:"box-shadow"}),"、",(0,r.jsx)(n.code,{children:"drop-shadow()"}),"、",(0,r.jsx)(n.code,{children:"blur()"})," 和 ",(0,r.jsx)(n.code,{children:"backdrop-filter"})," 等特性，但它们在实现复杂模糊和阴影效果时存在一定的局限性。"]}),"\n",(0,r.jsxs)(n.p,{children:["幸运的是，SVG 滤镜技术为增强 Web 视觉效果提供了强大而灵活的解决方案。其中，模糊和阴影效果是最为突出和广泛应用的技术之一。通过利用 SVG 滤镜功能，如 ",(0,r.jsx)(n.code,{children:"<feGaussianBlur>"}),"、",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 、 ",(0,r.jsx)(n.code,{children:"<feSpecularLighting>"})," 、 ",(0,r.jsx)(n.code,{children:"<feDiffuseLighting>"})," 、",(0,r.jsx)(n.code,{children:"<feComposite>"})," 、",(0,r.jsx)(n.code,{children:"<feOffset>"})," 和 ",(0,r.jsx)(n.code,{children:"<feMerge>"})," 等，Web 开发者能轻松为网页元素添加精细的模糊效果和复杂的阴影效果，远远超越了现代 CSS 的功能限制。"]}),"\n",(0,r.jsx)(n.p,{children:"在这节课中，我们将深入探讨如何利用 SVG 滤镜技术创建高度定制的模糊效果，并实现各种类型的阴影效果，从简单的投影到复杂的内阴影，甚至包括与元素透明度交互响应的动态效果。通过深入理解 SVG 滤镜的工作原理，以及如何巧妙结合不同的滤镜效果，你将能够为 Web 设计带来全新的视觉层次和动态交互体验。这些技术不仅能够增强用户界面的美观性，还能提升用户体验和操作的直观性，为现代 Web 设计开辟出更广阔的创新空间。"}),"\n",(0,r.jsxs)(n.h2,{id:"web-上的模糊与阴影效果",children:["Web 上的模糊与阴影效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#web-上的模糊与阴影效果",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:et,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://dribbble.com/shots/15900095-Glow-up-Photographe-studio-web-design",target:"_blank",rel:"noopener noreferrer",children:"图片由 @Seddik walid 提供"}),"！"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"我想你和我有同样的感觉，在 Web 上随处都可见到带有模糊和阴影等效果的 UI 视觉元素。这是因为，在现代 Web UI 设计中，模糊和阴影效果已经成为突出视觉层次和增强用户体验的重要元素之一。Web 设计将模糊和阴影加入设计中是有其独特的原因——它们帮助在界面中创建视觉提示，让人类大脑能够理解正在查看的用户界面元素。"}),"\n",(0,r.jsx)(n.p,{children:"在 Web 界面设计中，模糊效果不仅仅是为了美观，更是为了突出重要内容和优化体验。通过将背景或部分元素模糊化，可以有效凸显前景内容、使得文字、图标等元素更加突出清晰，从而提升阅读体验和视觉焦点的集中度。动态模糊效果的运用、如滚动模糊和动画过渡中的模糊，不仅增加了界面的生动感和现代感，还可以提升用户对内容变化的感知和互动的乐趣。例如 iOS 系统中很多界面都有模糊效果的身影，也就是大家常说的磨砂效果或玻璃效果："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:ed,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"同样的，阴影效果在 Web 界面设计中也扮演着关键角色，它为元素增添了深度和立体感，使得界面元素更加真实和具有触感。通过合理的阴影设置，可以清晰地突出各个界面元素之间的关系和层次，例如按钮、卡片、弹出框等，从而使用户界面看起来更加整洁、有序和易于理解。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:ec,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["例如，",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://material.io/",target:"_blank",rel:"noopener noreferrer",children:"Google 的 Material Design 设计系统"})})," 是 Web 阴影设计中最典型案例。我想你肯定感受到了 Material Design 中阴影给 Web UI 带来的美感，因为在 Google 的产品上，几乎都能看到这样的设计："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:el,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"除此之外，内阴影的应用也为设计师提供了更多创造性的可能，例如在按钮按下时的内嵌效果或者选项卡的深度感应用，都能够有效提升用户操作的直观性和互动的体验感。其中，Neumorphism UI （拟物化用户界面）就是内阴影的经典案例之一："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:es,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"随着 Web 技术的进步和浏览器支持的增强，模糊和阴影效果的应用空间也在不断扩展和创新。未来，随着更多的交互式设计趋势和响应式布局的发展，模糊和阴影效果将继续发挥重要作用，成为设计师打造现代化、功能强大的用户界面的重要工具。通过综合运用艺术美学与功能优化，模糊和阴影效果将继续为 Web UI 设计带来更多的创新和实用价值，为用户提供更加流畅和愉悦的使用体验。"}),"\n",(0,r.jsx)(n.p,{children:"因此，作为一名专业且优秀的 Web 开发者，必须精通阴影和模糊效果的制作，能够随时灵活应对这些方面的新需求。掌握和运用这些技巧不仅是一种能力的体现，也是保持竞争优势的关键之一。"}),"\n",(0,r.jsx)(n.p,{children:"我们先从模糊效果开始聊起！"}),"\n",(0,r.jsxs)(n.h2,{id:"创建模糊效果",children:["创建模糊效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建模糊效果",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:er,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["URL:",(0,r.jsx)(n.a,{href:"https://www.freepik.com/vectors/glassmorphism-ui-design",target:"_blank",rel:"noopener noreferrer",children:"https://www.freepik.com/vectors/glassmorphism-ui-design"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"我们以流行的磨砂玻璃效果为例，因为它是 Web 上模糊效果的典型案例之一！社区里时上图这种 UI 效果有多种不同的称呼，即磨砂玻璃（Frosted Glass）、Glass UI 和 Glassmorphism UI。从 UI 视觉呈现的出的效果上看并无差异，甚至可以说是同样的。它们之间的关系是："}),"\n",(0,r.jsxs)(n.p,{children:["Glassmorphism 是一种设计风格，强调使用透明度和模糊效果，让界面元素看起来像是半透明的玻璃。这个概念由 ",(0,r.jsx)(n.a,{href:"https://x.com/michalmalewicz",target:"_blank",rel:"noopener noreferrer",children:"@Michal Malewicz"})," 提出，旨在统一和连接所有使用“磨砂玻璃”效果的 UI 设计。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://ui.glass/",target:"_blank",rel:"noopener noreferrer",children:"Glass UI"})," 是一个基于玻璃拟态（Glassmorphism）设计原则的现代 CSS 用户界面库。其主要目标是帮助设计师和开发者快速创建美观的网站和应用程序。Glass UI 提供了一系列预设的样式和组件，简化了设计和开发过程，使得即使是没有太多设计经验的开发者也能够轻松创建出美观的界面。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:ei,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["URL:",(0,r.jsx)(n.a,{href:"https://ui.glass/",target:"_blank",rel:"noopener noreferrer",children:"https://ui.glass/"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Frosted Glass 是 Glassmorphism 设计风格中的核心视觉效果之一。Glassmorphism 通过使用 Frosted Glass 效果来实现其独特的视觉体验。因此，Frosted Glass 是实现 Glassmorphism UI 的一种技术手段。"}),"\n",(0,r.jsx)(n.p,{children:"简单地说："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Glassmorphism UI"}),"：一种设计风格，使用透明度和模糊效果，营造出半透明玻璃的视觉效果"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Glass UI"}),"：一个基于 Glassmorphism 设计原则的 CSS 库，帮助开发者快速创建美观的界面"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Frosted Glass"}),"：一种具体的视觉效果，表现为半透明和模糊，是 Glassmorphism UI 的核心效果之一"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Glass UI 利用 Glassmorphism 的设计原则，通过实现 Frosted Glass 效果，帮助开发者快速创建现代、美观的用户界面。这三者之间相互关联，组成了一个完整的设计和开发体系。"}),"\n",(0,r.jsxs)(n.h3,{id:"css-创建磨砂玻璃效果的局限性",children:["CSS 创建磨砂玻璃效果的局限性",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-创建磨砂玻璃效果的局限性",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["通常情况之下，Web 开发者会使用 ",(0,r.jsx)(n.code,{children:"backdrop-filter"})," 或 ",(0,r.jsx)(n.code,{children:"filter"})," 属性来制作磨砂玻璃效果。例如",(0,r.jsx)(n.a,{href:"https://ui.glass/generator/",target:"_blank",rel:"noopener noreferrer",children:" Glass UI 提供的生成工具"}),"采用的就是 ",(0,r.jsx)(n.code,{children:"backdrop-filter"})," 属性："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:en,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["URL: ",(0,r.jsx)(n.a,{href:"https://ui.glass/generator/",target:"_blank",rel:"noopener noreferrer",children:"https://ui.glass/generator/"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"我们来看一个真实的案例："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:ee,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/GRayMRV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRayMRV"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["从呈现的效果上看，两者之间有明显的差异，而且在代码也有所差异。因为 CSS 的 ",(0,r.jsx)(n.code,{children:"filter"})," 属性会影响其所有后代元素，所以你需要为磨砂玻璃效果提供单独的层，例如伪元素 ",(0,r.jsx)(n.code,{children:"::after"})," 。下面是这两个效果的关键代码："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<div class="card backdrop-filter">\n    <img src="https://picsum.photos/id/85/300/400" alt="">\n    <div class="card__content">\n        <h2 class="title">Backdrop Filter</h2>\n        <p class="copy">Check out all of these gorgeous mountain trips with beautiful views of, you guessed it, the mountains</p>\n        <button class="button">View Trips</button>\n    </div>\n</div>\n\n<div class="card filter">\n    <img src="https://picsum.photos/id/85/300/400" alt="">\n    <div class="card__content">\n        <h2 class="title">CSS Filter</h2>\n        <p class="copy">Check out all of these gorgeous mountain trips with beautiful views of, you guessed it, the mountains</p>\n        <button class="button">View Trips</button>\n    </div>\n</div>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:'.backdrop-filter .card__content {\n    backdrop-filter: blur(5px) saturate(65%);\n    background-color: rgba(255, 255, 255, 0.3);\n}\n  \n.filter .card__content::after {\n    content: "";\n    position: absolute;\n    inset: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    background: url("https://picsum.photos/id/85/300/400") 0% calc(-100% + 3.5rem) / cover;\n    filter:  blur(5px) saturate(65%);\n}\n  \n.filter:hover .card__content::after {\n    background-position: 0 0;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["正如你所看到的，CSS 和 ",(0,r.jsx)(n.code,{children:"filter"})," 和 ",(0,r.jsx)(n.code,{children:"backdrop-filter"})," 是可以用于创建磨砂玻璃的视觉效果。然而，这些功能在某些方面存在一些缺陷和不足之处，特别是在复杂的视觉效果和动态交互中可能显得有限。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["CSS 的 ",(0,r.jsx)(n.code,{children:"filter"})," 属性可以应用于元素本身，但它的模糊效果通常是静态的，并且对元素周围的其他内容不会产生影响。这意味着使用 ",(0,r.jsx)(n.code,{children:"filter"})," 创建的磨砂玻璃效果在视觉上可能缺乏深度和交互性，无法实现与其他元素的实时交互效果"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["CSS 的 ",(0,r.jsx)(n.code,{children:"backdrop-filter"})," 属性允许在元素背景上应用模糊效果，这使得可以创建一些复杂的背景模糊效果，但它在浏览器兼容性上存在问题，不同浏览器的支持程度不一致，而且性能可能受到影响，尤其是在动画和复杂布局中。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["相比而言，SVG 的高斯模糊滤镜（",(0,r.jsx)(n.code,{children:"<feGaussianBlur>"}),"）提供了更高级的图像处理能力。高斯模糊滤镜可以精确控制模糊程度和效果的范围，还可以与 SVG 的其他功能结合使用，例如 ",(0,r.jsx)(n.code,{children:"<feMerge>"})," 和 ",(0,r.jsx)(n.code,{children:"<feComposite>"}),"，从而创建出更加复杂和动态的效果。"]}),"\n",(0,r.jsx)(n.p,{children:"除此之外，SVG 的滤镜功能在现代浏览器中得到了广泛支持，并且性能较为稳定，能够处理复杂的动画和交互效果。也就是说，对于需要实现高度定制化、复杂动态效果的磨砂玻璃效果，使用 SVG 的高斯模糊滤镜是一个更为可靠和强大的选择。"}),"\n",(0,r.jsxs)(n.h3,{id:"使用-fegaussianblur-创建磨砂玻璃效果",children:["使用 ",(0,r.jsx)(n.code,{children:"<feGaussianBlur>"})," 创建磨砂玻璃效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-fegaussianblur-创建磨砂玻璃效果",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在开始使用 ",(0,r.jsx)(n.code,{children:"<feGaussianBlur>"})," 创建磨砂玻璃效果之前，我们先了解一下 ",(0,r.jsx)(n.code,{children:"<feGaussianBlur>"})," 滤镜。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<feGaussianBlur>"})," 是 SVG 滤镜中较为简单的一个滤镜基元，它一种基于",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Gaussian_function",target:"_blank",rel:"noopener noreferrer",children:"高斯函数"}),"的模糊技术，能平滑图像的细节，使图像看起来更加柔和。简单地说，我们可通过调整 ",(0,r.jsx)(n.code,{children:"<feGaussianBlur>"})," 滤镜基元的 ",(0,r.jsx)(n.code,{children:"stdDeviation"})," 属性来调整图像的模糊大小，值越大，模糊效果越强。可以是一个数值（对 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 方向同时生效），也可以是两个数值（分别指定 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 方向的模糊程度）。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:$,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["URL: ",(0,r.jsx)(n.a,{href:"https://yoksel.github.io/svg-filters/#/",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/svg-filters/#/"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"要是用 SVG 代码来描述的话，大致像下面这样："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg>\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB">\n            <feGaussianBlur stdDeviation="15 14"  in="SourceGraphic"  result="BLUR" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["如果上面这段 SVG 代码放到你的页面中，那么你就定义了一个名为 ",(0,r.jsx)(n.code,{children:"#filter>"})," 的滤镜，并使用 CSS 的 ",(0,r.jsx)(n.code,{children:"filter"})," 属性的 ",(0,r.jsx)(n.code,{children:"url()"})," 函数引用该滤镜。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".filtered {\n    filter: url(#filter);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"有了这个基础之后，我们就可以尝试着将 SVG 滤镜创建的高斯模糊效果应用到之前的卡片示例中："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:'.svg-filter .card__content::after{\n    content: "";\n    position: absolute;\n    inset: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    background: url("https://picsum.photos/id/85/300/400") 0% calc(-100% + 3.5rem) / cover;\n    filter: url(#filter) saturate(65%);\n}\n  \n.svg-filter:hover .card__content::after {\n    background-position: 0 0;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Q,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdrOvx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdrOvx"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"再来看一个带有磨砂玻璃效果的进度环："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Z,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/rNgppBO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNgppBO"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在这个效果中，我们使用了两个 ",(0,r.jsx)(n.code,{children:"<filter>"})," 元素，定义了两个高斯模糊的效果："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<filter id="glass-glow">\n    <feGaussianBlur in="SourceGraphic" stdDeviation="5" />\n</filter>\n    \n<filter id="glass2-blur">\n    <feGaussianBlur in="SourceGraphic" stdDeviation="1.5" />\n</filter>\n'})}),"\n",(0,r.jsx)(n.p,{children:"稍微熟悉进度条制作的开发者都知道，整个进度条分两个部分组件，进度条轨道和当前状态："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:J,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["通常情况之下，我们会使用两个圆 ",(0,r.jsx)(n.code,{children:"<circle>"})," 或 ",(0,r.jsx)(n.code,{children:"<path>"})," 元素绘制的形状来表示这两种状态。不过，在这个示例中，是通过多个圆（",(0,r.jsx)(n.code,{children:"<circle>"}),"）相互组合，构建成带有一点层次感的进度条形状，并且些圆的描边（",(0,r.jsx)(n.code,{children:"stroke"}),"）都不是纯色，而是由 SVG 的 ",(0,r.jsx)(n.code,{children:"<linearGradient>"})," 或 ",(0,r.jsx)(n.code,{children:"<radialGradient>"})," 定义的渐变色："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="progress" viewBox="0 0 270 270" width="270" height="270">\n    <defs>\n        <radialGradient id="glass1" r="1">\n            <stop stop-color="hsl(0 0% 100% / 0.05)" offset="0.4" />\n            <stop stop-color="hsl(0 0% 100% /0.35)" offset="1" />\n        </radialGradient>\n        <linearGradient id="glass2" x1="0" y1="0" x2="0.75" y2="1">\n            <stop stop-color="hsl(0 0% 100% / 0.3)" offset="0" />\n            <stop stop-color="hsl(0 0% 100% / 0.08)" offset="1" />\n        </linearGradient>\n        <linearGradient id="glass3" x1="0" y1="0" x2="0" y2="1">\n            <stop stop-color="hsl(0 0% 100% / 0.3)" offset="0" />\n            <stop stop-color="hsl(0 0% 100% / 0)" offset="0.5" />\n        </linearGradient>\n        <linearGradient id="glass4" x1="0" y1="0" x2="0" y2="1">\n            <stop stop-color="hsl(0 0% 100% / 0)" offset="0.6" />\n            <stop stop-color="hsl(0 0% 100% / 0.3)" offset="1" />\n        </linearGradient>\n        <radialGradient id="glass5" r="1">\n            <stop stop-color="hsl(0 0% 0% / 0.2)" offset="0.45" />\n            <stop stop-color="hsl(0 0% 0% / 0)" offset="0.55" />\n        </radialGradient>\n        <linearGradient id="glass6" x1="0" y1="0" x2="0" y2="1">\n            <stop stop-color="hsl(0 0% 100% / 0.15)" offset="0" />\n            <stop stop-color="hsl(0 0% 100% / 0)" offset="0.3" />\n        </linearGradient>\n        <linearGradient id="glass7" x1="0" y1="0" x2="0" y2="1">\n            <stop stop-color="hsl(0 0% 100% / 0)" offset="0.7" />\n            <stop stop-color="hsl(0 0% 100% / 0.1)" offset="1" />\n        </linearGradient>\n        <clipPath id="glass8">\n            <circle cx="135" cy="135" r="125" />\n        </clipPath>\n        \x3c!-- 高斯模糊滤镜 --\x3e\n        <filter id="glass-glow">\n            <feGaussianBlur in="SourceGraphic" stdDeviation="5" />\n        </filter>\n        <filter id="glass2-blur">\n            <feGaussianBlur in="SourceGraphic" stdDeviation="1.5" />\n        </filter>\n    </defs>\n    <g fill="none">\n        \x3c!-- 进度条完成的进度 --\x3e\n        <g transform="rotate(-90,135,135)" class="progress__schedule">\n            <circle class="progress__ring" r="105" cx="135" cy="135" stroke-dasharray="659.74 659.74" stroke-dashoffset="659.74" stroke-width="40" />\n            <g filter="url(#glass-glow)" stroke-linecap="round" stroke-width="4" opacity="0.6">\n                <circle class="progress__ring-glow1" r="80" cx="135" cy="135" stroke-dasharray="502.66 502.66" stroke-dashoffset="502.66" />\n                <circle class="progress__ring-glow2" r="130" cx="135" cy="135" stroke-dasharray="816.82 816.82" stroke-dashoffset="816.82" />\n            </g>\n        </g>\n        \x3c!-- 进度条轨道 --\x3e\n        <g class="progress__track">\n            <circle stroke="url(#glass1)" stroke-width="40" r="105" cx="135" cy="135" />\n            <circle filter="url(#glass2-blur)" stroke="url(#glass2)" stroke-width="9" r="105" cx="135" cy="135" />\n            <circle stroke="url(#glass3)" stroke-width="1" r="109" cx="135" cy="135" />\n            <circle stroke="url(#glass4)" stroke-width="1" r="101" cx="135" cy="135" />\n            <circle stroke="url(#glass5)" stroke-width="14" r="92" cx="135" cy="135" />\n            <circle stroke="url(#glass6)" stroke-width="2" r="86" cx="135" cy="135" />\n            <circle stroke="url(#glass7)" stroke-width="4" r="87" cx="135" cy="135" />\n            <circle clip-path="url(#glass8)" stroke="hsl(var(--hue) 90% 10% / 0.1)" stroke-width="4" r="125" cx="135" cy="142" />\n        </g>\n    </g>\n    <text id="progress__percent" fill="currentcolor" font-size="48" text-anchor="middle" x="135" y="151" data-percent></text>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"仔细对比应用滤镜前后的效果。当然，完成整个效果还需要一些 CSS 和 JavaScript 代码，这里就不贴出来了，因为它们并不复杂，感兴趣的可以阅读案例源码。"}),"\n",(0,r.jsx)(n.p,{children:"请注意，尽管前面的例子展示了高斯模糊用于创建磨砂玻璃效果，但这并不意味着它的应用局限于此。接下来的案例将进一步展示高斯模糊在其他场景中的多样应用。期待你的探索和发现！"}),"\n",(0,r.jsxs)(n.h2,{id:"创建阴影效果",children:["创建阴影效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建阴影效果",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:z,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["在 CSS 的世界中，",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328/section/7199844993455325216",target:"_blank",rel:"noopener noreferrer",children:"它为 Web 开发者提供了多个特性为 Web 元素添加阴影效果"}),"。例如："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"text-shadow"})," 属性给元素文本内容添加阴影"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"box-shadow"})," 属性给元素框添加阴影"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"drop-shadow()"})," 函数给元素内容或元素框添加阴影"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["然而，在实际开发过程中，这些属性都或多或少有一定的局限性。例如 ",(0,r.jsx)(n.code,{children:"box-shadow"})," 属性，它遵循元素的矩形外边缘，而不是我们想要的 SVG 元素的边缘。换句话说，如果你使用 ",(0,r.jsx)(n.code,{children:"box-shadow"})," 给一个图标添加阴影效果，最终呈现的效果并不是你所期望的："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".icon--cat {\n    box-shadow: .2em .2em .2em .2em rgb(255 255 255 / .5);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:X,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["注意，如果 Icon 图标使用的是字体图标，那么使用 ",(0,r.jsx)(n.code,{children:"text-shadow"})," 给图标添加阴影总是可用的。也确实可以工作，但让我们把更多的注意力放在 ",(0,r.jsx)(n.code,{children:"box-shadow"})," 属性的局限性上。"]}),"\n",(0,r.jsxs)(n.p,{children:["除此之外，如果你使用 ",(0,r.jsx)(n.code,{children:"box-shadow"})," 给一个元素组添加阴影效果，最终呈现的结果也将是不尽人意的。例如："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:W,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["当然，面对诸如上面这两种情景，你可能会考虑使用 ",(0,r.jsx)(n.code,{children:"filter"})," 的 ",(0,r.jsx)(n.code,{children:"drop-shadow()"})," 函数来给 SVG 图标，不规则图形或元素组添加阴影效果："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".svg-icon {\n    filter: drop-shadow(0.35rem 0.35rem 0.4rem rgba(0, 0, 0, 0.5));\n}\n\n.element--group {\n    filter: drop-shadow(0.35rem 0.35rem 0.4rem rgba(0, 0, 0, 0.5));\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:q,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["虽然 ",(0,r.jsx)(n.code,{children:"drop-shadow()"})," 函数的出现让 Web 开发者多了一种选择——可以为不规则图形设置阴影效果，但它和 ",(0,r.jsx)(n.code,{children:"box-shadow"})," 属性一样，无法直接给元素设置内阴影。以 ",(0,r.jsx)(n.code,{children:"box-shadow"})," 属性为例，它就无法直接给诸如 ",(0,r.jsx)(n.code,{children:"<img>"})," 、",(0,r.jsx)(n.code,{children:"<iframe>"})," 和 ",(0,r.jsx)(n.code,{children:"<video>"})," 等可替换元素设置内阴影："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:K,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/NWVXzdR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWVXzdR"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7199571709102391328/section/7199844993455325216",target:"_blank",rel:"noopener noreferrer",children:"虽然有一些 Hack 手段可以帮助我们避免这些现象出现"}),"，但有一些场景即便是通过各种 Hack 手段，也未必能实现我们所期望的内阴影效果，例如给不规则图形设置内阴影以及给 SVG 图形或图标设置内阴影。既然如此，为何不考虑使用 SVG 滤镜来创建阴影效果呢？"]}),"\n",(0,r.jsxs)(n.p,{children:["是的，我们可以借助 SVG 滤镜来创建各种所需要的阴影效果。为了能让大家更好的理解如何使用 SVG 滤镜创建阴影效果，我们先从简单的 ",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 滤镜开始！"]}),"\n",(0,r.jsxs)(n.h3,{id:"使用-fedropshadow-滤镜创建阴影效果",children:["使用 ",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 滤镜创建阴影效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-fedropshadow-滤镜创建阴影效果",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 滤镜基元看上去和 CSS 的 ",(0,r.jsx)(n.code,{children:"filter"})," 的 ",(0,r.jsx)(n.code,{children:"drop-shadow()"})," 函数非常相似。的确如此，之前我们提到过，CSS ",(0,r.jsx)(n.code,{children:"filter"})," 属性中的滤镜函数都是 SVG 滤镜基元的简捷方式，你可以理解成 SVG 滤镜的阉割版。这意味着，",(0,r.jsx)(n.code,{children:"drop-shadow()"})," 函数所具备的功能，",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 滤镜基元都具备，而且还更强大："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://yoksel.github.io/svg-filters/#/",target:"_blank",rel:"noopener noreferrer",children:"https://yoksel.github.io/svg-filters/#/"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["正如上图所示，我们可以通过 ",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 提供的属性和功能更精细的控制阴影的模糊程度、颜色和透明度："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dx"})})," 和 ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dy"})}),"：控制阴影的水平和垂直偏移量"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"stdDeviation"})}),"：设置阴影的模糊程度。值越大，阴影越模糊。它可以接受两个值，第一个值表示阴影在水平方向（",(0,r.jsx)(n.code,{children:"x"})," 轴）模糊程度，第二个值表示阴影在垂直方向（",(0,r.jsx)(n.code,{children:"y"})," 轴）模糊程度。如果省略第二个值，则表示阴影在 ",(0,r.jsx)(n.code,{children:"x"})," 轴和 ",(0,r.jsx)(n.code,{children:"y"})," 轴的模糊程度相同"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"flood-color"})}),"：指定阴影的颜色"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"flood-opacity"})}),"：设置阴影颜色的透明度"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["我们来看一个简单的示例。假设我们在 HTML 中使用 ",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 创建了一个 ",(0,r.jsx)(n.code,{children:"shadow"})," 阴影滤镜："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="shadow" color-interpolation-filters="sRGB">\n            <feDropShadow dx="4" dy="4" stdDeviation="4" flood-color="#fff" flood-opacity="0.75" in="SourceGraphic" result="DROPSHADOW" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:"简单的解释一下上面的代码："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:'dx="4"'})})," ：表示阴影在水平方向上的偏移量为 ",(0,r.jsx)(n.code,{children:"4"})," 个用户单位。正值表示向右偏移，负值表示向左偏移"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:'dy="4"'})})," ：表示阴影在垂直方向上的偏移量为 ",(0,r.jsx)(n.code,{children:"4"})," 个用户单位。正值表示向下偏移，负值表示向上偏移"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:'stdDeviation="4"'})})," ：表示阴影的模糊半径为 ",(0,r.jsx)(n.code,{children:"4"})," 个用户单位"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:'flood-color="#fff"'})})," ：指定阴影的颜色是 ",(0,r.jsx)(n.code,{children:"#fff"})," 。如果不指定颜色，默认为黑色"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:'flood-opacity="0.75"'})})," ：指定阴影的透明度，值范围从 ",(0,r.jsx)(n.code,{children:"0 ~ 1"})," 。示例中 ",(0,r.jsx)(n.code,{children:"0.75"})," 表示 ",(0,r.jsx)(n.code,{children:"75%"})," 的不透明度，即阴影只有 ",(0,r.jsx)(n.code,{children:"25%"})," 的透明度"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["它与 CSS 的 ",(0,r.jsx)(n.code,{children:" drop-shadow(4px 4px 4px rgb(255 255 255  ``/ .75``))"})," 效果有点相似："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:H,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["同样地，",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 创建的阴影也可以用于元素组。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:V,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/pompKOp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/pompKOp"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["然后，",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 滤镜并不是一个基本的滤镜，它是由多个更简单的滤镜效果组合而成的，而且相当复杂。换句话说，",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 滤镜基元的几个关键属性的功能对应着其他几个更简单的滤镜："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"stdDeviation"})," ：将转发到内部 ",(0,r.jsx)(n.code,{children:"<feGaussianBlur>"})," 滤镜基元的 ",(0,r.jsx)(n.code,{children:"stdDeviation"})," 属性"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"dx"})," 和 ",(0,r.jsx)(n.code,{children:"dy"})," ：分别转发到内部 ",(0,r.jsx)(n.code,{children:"<feOffset>"})," 滤镜基元的 ",(0,r.jsx)(n.code,{children:"dx"})," 和 ",(0,r.jsx)(n.code,{children:"dy"})," 属性"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"flood-color"})," ：将转发到内部 ",(0,r.jsx)(n.code,{children:"<feFlood>"})," 滤镜基元的 ",(0,r.jsx)(n.code,{children:"flood-color"})," 属性"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"flood-opacity"})," ：将转发到内部 ",(0,r.jsx)(n.code,{children:"<feFlood>"})," 滤镜基元的 ",(0,r.jsx)(n.code,{children:"flood-opacity"})," 属性"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["这意味着，任何一个由 ",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 滤镜基元创建的阴影效果，都可以通过 ",(0,r.jsx)(n.code,{children:"<feGaussianBlur>"})," 、",(0,r.jsx)(n.code,{children:"<feFlood>"})," 、",(0,r.jsx)(n.code,{children:"<feOffset>"})," 等滤镜基元组合而成。例如，下面两个滤镜最终效果是一致的："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="shadow" color-interpolation-filters="sRGB">\n            <feDropShadow dx="4" dy="4" stdDeviation="4" flood-color="#fff" flood-opacity="0.75" in="SourceGraphic" result="DROPSHADOW" />\n        </filter>\n        \n        <filter id="shadow2" color-interpolation-filters="sRGB">\n            <feGaussianBlur stdDeviation="4" in="SourceAlpha" result="BLUR" />\n            <feOffset dx="4" dy="4" in="BLUR" result="OFFSET" />\n            <feFlood flood-color="#fff" flood-opacity="0.75" in="OFFSET" resutl="FLOOD" />\n            <feComposite in="FLOOD" in2="OFFSET" operator="in" result="COMPOSITE" />\n            <feMerge>\n                <feMergeNode in="COMPOSITE" />\n                <feMergeNode in="SourceGraphic" />\n            </feMerge>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/abrEjgZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abrEjgZ"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这仅仅实现了一个普通的投影效果，即元素在下方投射阴影。要修改它以实现内阴影，即元素“被切除”，光源从内部投射阴影。虽然不难，但你必须了解原始阴影的所有细微之处。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["阴影是一门复杂而又深奥的学科，它与",(0,r.jsx)(n.strong,{children:"光"})," 、",(0,r.jsx)(n.strong,{children:"颜色"})," 、",(0,r.jsx)(n.strong,{children:"投影"})," 、",(0,r.jsx)(n.strong,{children:"形体"})," 、",(0,r.jsx)(n.strong,{children:"光源定位"})," 、",(0,r.jsx)(n.strong,{children:"阴影分层"})," 和 ",(0,r.jsx)(n.strong,{children:"阴影模糊度"})," 等都有关。只不过，这些理论知识已超出这节课的范畴，因此不在这里做过多的阐述。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"我们还是从实际出发，如何使用 SVG 滤镜创建内阴影。例如，我们要给 Twitter 图标添加内阴影效果："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="icon--twitter">\n    <path d="M459.4 151.7c.3 4.5 .3 9.1 .3 13.6 0 138.7-105.6 298.6-298.6 298.6-59.5 0-114.7-17.2-161.1-47.1 8.4 1 16.6 1.3 25.3 1.3 49.1 0 94.2-16.6 130.3-44.8-46.1-1-84.8-31.2-98.1-72.8 6.5 1 13 1.6 19.8 1.6 9.4 0 18.8-1.3 27.6-3.6-48.1-9.7-84.1-52-84.1-103v-1.3c14 7.8 30.2 12.7 47.4 13.3-28.3-18.8-46.8-51-46.8-87.4 0-19.5 5.2-37.4 14.3-53 51.7 63.7 129.3 105.3 216.4 109.8-1.6-7.8-2.6-15.9-2.6-24 0-57.8 46.8-104.9 104.9-104.9 30.2 0 57.5 12.7 76.7 33.1 23.7-4.5 46.5-13.3 66.6-25.3-7.8 24.4-24.4 44.8-46.1 57.8 21.1-2.3 41.6-8.1 60.4-16.2-14.3 20.8-32.2 39.3-52.6 54.3z"/>\n</svg>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:'.icon--twitter {\n    fill: #4691f6;\n    filter: url("#inset-shadow");\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"让我们开始关键部分："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="inset-shadow" color-interpolation-filters="sRGB">\n            <feComponentTransfer in="SourceAlpha" result="INVERSE">\n                <feFuncA type="table" tableValues="1 0" />\n            </feComponentTransfer>\n            <feGaussianBlur in="INVERSE" result="BLUR__INVERSE" stdDeviation="4" />\n            <feOffset dx="5" dy="5" in="BLUR__INVERSE" result="OFFSET__BLUR__INVERSE" />\n            <feFlood flood-color="rgb(20 0 0)" in="OFFSET__BLUR__INVERSE" result="BLUR__COLOR" />\n            <feComposite in="BLUR__COLOR" in2="OFFSET__BLUR__INVERSE" operator="in" result="COMPOSITE__10" />\n            <feComposite in="COMPOSITE__10" in2="SourceAlpha" operator="in" result="COMPOSITE__20" />\n            <feMerge>\n                <feMergeNode in="SourceGraphic" />\n                <feMergeNode in="COMPOSITE__20" />\n            </feMerge>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:"上面代码呈现的效果如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:I,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/mdYpGVL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdYpGVL"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"让我们逐步分析这段代码。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<feComponentTransfer>"})," 滤镜基元使用 ",(0,r.jsx)(n.code,{children:'in="SourceAlpha"'})," 获取源图形的 Alpha 通道，并对其进行反转。普通的投影阴影使用图形的正常 Alpha 通道，对其进行模糊和偏移以生成阴影。在这里，源图形本身不会投射阴影，而是其他所有东西，因此我们需要反转其 Alpha 通道。这样我们得到的图像在图形实心处是透明的，在图形透明处是实心的，我们将其转换为阴影："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<feGaussianBlur>"})," 滤镜基元对该图像（",(0,r.jsx)(n.code,{children:"<feComponentTransfer>"})," 滤镜基元的结果）进行模糊处理，为创建阴影做准备，然后使用 ",(0,r.jsx)(n.code,{children:"<feOffset>"})," 将其稍微偏移，使光源似乎来自侧面："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["接下来，使用 ",(0,r.jsx)(n.code,{children:"<feFlood>"})," 滤镜给阴影上色。当我们获取 ",(0,r.jsx)(n.code,{children:"SourceAlpha"})," 时，它会给我们一个纯黑色图像，其 Alpha 通道与源图像相同。如果我们需要黑色阴影，这很好用，但如果我们想要给它上色，就需要做一些工作。在这种情况下，你可以使用 ",(0,r.jsx)(n.code,{children:"<feFlood>"})," 滤镜基元设置任何你喜欢的阴影颜色，不过在我们示例中使用的是黑色 ",(0,r.jsx)(n.code,{children:"rgb(20 0 0)"})," 。注意，这个时候整个滤镜区域填充了一个黑色矩形，你并看不到 Twitter 图标："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["不用担心，我们可以使用 ",(0,r.jsx)(n.code,{children:"<feComposite>"})," 滤镜基元将其裁剪为仅与模糊阴影重叠的部分。",(0,r.jsx)(n.code,{children:"<feComposite>"})," 滤镜操作符（",(0,r.jsx)(n.code,{children:"operator"}),"）有很多种类型，我们在这里使用 ",(0,r.jsx)(n.code,{children:"in"})," ，将 ",(0,r.jsx)(n.code,{children:'in="BLUR__COLOR"'})," 和 ",(0,r.jsx)(n.code,{children:'in2="OFFSET__BLUR__INVERSE"'})," 重叠部分显示出来，",(0,r.jsx)(n.code,{children:"in2"})," 图像的实体部分让 ",(0,r.jsx)(n.code,{children:"in"})," 图像显示出来，透明部分阻止它。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:U,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["这给我们提供了正确颜色的模糊。然后我们再次使用 ",(0,r.jsx)(n.code,{children:'<feComposite operator="in">'}),"，这次使用 ",(0,r.jsx)(n.code,{children:"SourceAlpha"})," 作为 ",(0,r.jsx)(n.code,{children:"in2"})," ，并将第一个 ",(0,r.jsx)(n.code,{children:"<feComposite>"})," 的结果（",(0,r.jsx)(n.code,{children:"result"}),"）作为 ",(0,r.jsx)(n.code,{children:"in"})," 的值。这样做减少了大部分模糊效果，只留下与源图像重叠的部分。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["最后，我们使用 ",(0,r.jsx)(n.code,{children:"<feMerge>"})," 和预定义的 ",(0,r.jsx)(n.code,{children:"SourceImage"})," 值将阴影和源图像合并，使阴影位于顶部。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/mdYpGVL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdYpGVL"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["你可能已经发现了，在制作内阴影的所有滤镜基元中并没有 ",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 。是的，因为只使用 ",(0,r.jsx)(n.code,{children:"<feDropShadow>"})," 是无法直接实现内阴影的，这正如 ",(0,r.jsx)(n.code,{children:"drop-shadow()"})," 无法实现内阴影是一样的。庆幸的是，在 SVG 滤镜中，我们组合多个不同的滤镜基元，可以轻松实现内阴影的效果。"]}),"\n",(0,r.jsx)(n.p,{children:"另外，还需要知道的是，上面这个示例仅仅是创建内阴影的一种方式，在 SVG 滤镜中，只要用好了 SVG 的各个滤镜基元，创建内阴影的滤镜组合就有多种组合方式。例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="inset-shadow" color-interpolation-filters="sRGB">\n            \x3c!-- 阴影偏移 --\x3e\n            <feOffset dx="0" dy="0" />\n        \n            \x3c!-- 阴影模糊 --\x3e\n            <feGaussianBlur stdDeviation="4" result="offset-blur" />\n        \n            \x3c!-- 反转投影以形成内阴影 --\x3e\n            <feComposite operator="out" in="SourceGraphic" in2="offset-blur" result="inverse" />\n          \n            \x3c!-- 切割阴影内的颜色 --\x3e\n            <feFlood flood-color="black" flood-opacity=".95" result="color" />\n            <feComposite operator="in" in="color" in2="inverse" result="shadow" />\n        \n            \x3c!-- 将阴影放在元素上 --\x3e\n            <feComposite operator="over" in="shadow" in2="SourceGraphic" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:"这里有四个不同的滤镜基元，每个原滤镜基元执行不同的功能，但结合起来，它们实现了一个内阴影。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/pompxoR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/pompxoR"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["使用这种方式创建的内阴影也可以用于诸如 ",(0,r.jsx)(n.code,{children:"img"})," 、",(0,r.jsx)(n.code,{children:"video"})," 这样的可替代元素上："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<img src=\'https://picsum.photos/800/600?random=1\' alt=\'\' class="figure" />\n\n<svg class="sr-only">\n    <defs>\n        <filter id="inset-shadow" color-interpolation-filters="sRGB">\n            <feOffset dx="0" dy="0" in="SourceGraphic" result="OFFSET" />\n            <feGaussianBlur stdDeviation="14" in="OFFSET" result="BLUR" />\n            <feComposite operator="out" in="SourceAlpha" in2="BLUR" result="COMPOSITE" />\n             <feColorMatrix values="\n                 0 0 0 0 1 \n                 0 0 0 0 .271\n                 0 0 0 0 0\n                 0 0 0 1 0" in="COMPOSITE" result="COLORMATRIX" />\n            <feBlend in2="SourceGraphic" in="COLORMATRIX" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".figure {\n    filter: url(#inset-shadow);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/xxNpyVJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxNpyVJ"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"svg-滤镜中的光照效果",children:["SVG 滤镜中的光照效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-滤镜中的光照效果",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["之前我们提到过，阴影效果也会受到光的影响。既然如此，我们就顺便了解一下 SVG 滤镜中的光照效果。在 SVG 中，我们可以使用 ",(0,r.jsx)(n.code,{children:"<feSpecularLighting>"})," 和（或）",(0,r.jsx)(n.code,{children:"<feDiffuseLighting>"})," 滤镜基元来应用光照效果，然后通过下面三种光源之一来控制光照细节：",(0,r.jsx)(n.code,{children:"fePointLight"}),"、",(0,r.jsx)(n.code,{children:"feDistantLight"}),"和",(0,r.jsx)(n.code,{children:"feSpotLight"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"这些光源滤镜可以创建出特别酷的效果，例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter" color-interpolation-filters="linearRGB">\n            <feOffset dx="25" dy="15"  in="SourceGraphic" result="OFFSET" />\n            <feGaussianBlur stdDeviation="3"  in="OFFSET" result="BLUR" />\n            <feDiffuseLighting surfaceScale="5" diffuseConstant="0.75" lighting-color="#BBF900"  in="BLUR" result="DIFFUSELIGHTING">\n                <fePointLight x="195" y="150" z="200" />\n            </feDiffuseLighting>\n            <feComposite in="DIFFUSELIGHTING" in2="BLUR" operator="in" result="composite" />\n        </filter>  \n    </defs>\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdrPVQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdrPVQ"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["正如你所看到的，SVG 的光照效果是通过使用 ",(0,r.jsx)(n.code,{children:"<feDiffuseLighting>"})," 或 ",(0,r.jsx)(n.code,{children:"<feSpecularLighting>"})," 滤镜基元来实现，它们是基于 ",(0,r.jsx)(n.a,{href:"https://www.cs.utexas.edu/~bajaj/graphics2012/cs354/lectures/lect14.pdf",target:"_blank",rel:"noopener noreferrer",children:"Phong 光照模型"}),"的适当组件进行计算，使图像或图形看起来更具立体感和质感。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<feDiffuseLighting>"})," 用于模拟漫反射光照效果。漫反射光是指均匀散射的光线，使物体表面看起来更加柔和和均匀。这个元素需要一个高度图（通常由 ",(0,r.jsx)(n.code,{children:"<feTile>"})," 或 ",(0,r.jsx)(n.code,{children:"<feDisplacementMap>"})," 生成）作为输入，以确定每个像素的光照强度"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<feSpecularLighting>"})," 用于模拟镜面反射光照效果。镜面反射光光是指光线直接反射到观察者眼中的那部分光，使物体表面看起来有光泽或闪光。与 ",(0,r.jsx)(n.code,{children:"<feDiffuseLighting>"})," 类似，它也需要一个高度图来确定光照强度"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"它们各自都包含了一些主要属性，下面这个表格描述了它们的主要属性及其功能和作用："}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"属性名称"})}),"\n",(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"<feDiffuseLighting>"})})}),"\n",(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"<feSpecularLighting>"})})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"in"})})}),"\n",(0,r.jsx)(n.td,{children:"指定输入图像，用于确定光照效果应用于哪个图像"}),"\n",(0,r.jsx)(n.td,{children:"指定输入图像，用于确定光照效果应用于哪个图像"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"surfaceScale"})})}),"\n",(0,r.jsx)(n.td,{children:"指定表面高度的比例，用于控制光照效果在图形表面上的高度变化。较高的值会增加表面的起伏，使光照效果更明显"}),"\n",(0,r.jsx)(n.td,{children:"指定表面高度的比例，用于控制光照效果在图形表面上的高度变化。较高的值会增加表面的起伏，使光照效果更明显"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"diffuseConstant"})})}),"\n",(0,r.jsx)(n.td,{children:"指定漫反射光的常数，用于决定光照的强度。较高的值会使图形表面的漫反射光更亮"}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"\uD83D\uDEAB"})}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"kernelUnitLength"})})}),"\n",(0,r.jsxs)(n.td,{children:["指定用于计算光照的采样单位长度，用于定义采样单位长度的 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 值。如果只提供一个数字，它将用于两个方向。它影响到光照效果的分辨率"]}),"\n",(0,r.jsxs)(n.td,{children:["指定用于计算光照的采样单位长度，用于定义采样单位长度的 ",(0,r.jsx)(n.code,{children:"x"})," 和 ",(0,r.jsx)(n.code,{children:"y"})," 值。如果只提供一个数字，它将用于两个方向。它影响到光照效果的分辨率"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"lighting-color"})})}),"\n",(0,r.jsx)(n.td,{children:"指定光的颜色，用于设置光源的颜色，这会影响光照效果的颜色，使被光照部分呈现出指定的颜色"}),"\n",(0,r.jsx)(n.td,{children:"指定光的颜色，用于设置光源的颜色，这会影响光照效果的颜色，使被光照部分呈现出指定的颜色"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"specularConstant"})})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"\uD83D\uDEAB"})}),"\n",(0,r.jsx)(n.td,{children:"指定镜面反射光的常数，用于决定光照的强度。较高的值会使图形表面的镜面反射光更亮"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"specularExponent"})})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"\uD83D\uDEAB"})}),"\n",(0,r.jsx)(n.td,{children:"指定镜面反射光的指数，用于控制光的聚集程度。较高的值会使光的反射更集中在高亮区域，从而产生更尖锐的高光"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["需要知道的是，",(0,r.jsx)(n.code,{children:"<feDiffuseLighting>"})," 和 ",(0,r.jsx)(n.code,{children:"<feSpecularLighting>"})," 滤镜基元都需要依赖于光源的定义来产生光照效果。即 ",(0,r.jsx)(n.code,{children:"<fePointLight>"}),"、",(0,r.jsx)(n.code,{children:"<feDistantLight>"})," 和 ",(0,r.jsx)(n.code,{children:"<feSpotLight>"})," ："]}),"\n",(0,r.jsxs)(n.h3,{id:"点光源fepointlight",children:["点光源：",(0,r.jsx)(n.code,{children:"<fePointLight>"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#点光源fepointlight",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<fePointLight>"})," 是一种点光源，它模拟从一个特定点向外辐射的光线，类似于房间中的灯泡。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"它从一个三维空间中的点发射光线，并且光线向所有方向均匀扩散。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<fePointLight>"})," 点光源的位置由要由 ",(0,r.jsx)(n.code,{children:"x"})," 、",(0,r.jsx)(n.code,{children:"y"})," 和 ",(0,r.jsx)(n.code,{children:"z"})," 三个属性来确定，即确定光源在适当轴上的坐标系中的位置："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"x"}),"：定义光源在 ",(0,r.jsx)(n.code,{children:"x"})," 轴上的位置。表示光源在水平方向上的位置"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"y"}),"：定义光源在 ",(0,r.jsx)(n.code,{children:"y"})," 轴上的位置。表示光源在垂直方向上的位置"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"z"}),"：定义光源在 ",(0,r.jsx)(n.code,{children:"z"})," 轴上的位置，表示光源离图形平面的高度。换句话说，它会确定从光点到用户的位置来调整光源的感知大小；值越大，产生的光点也会更大，它在视觉上更“接近”用户"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter1" color-interpolation-filters="linearRGB" x="0" y="0" width="100%" height="100%">\n            <feTurbulence type="turbulence" baseFrequency="0.006 0.04" numOctaves="3" seed="2" in="SourceGraphic" result="TURBULENCE__10" />\n            <feDiffuseLighting surfaceScale="2.5" diffuseConstant="12" lighting-color="#268ddb" in="TURBULENCE__10" result="DIFFUSELIGHTING__10">\n                <fePointLight x="100" y="100" z="3" />\n            </feDiffuseLighting>\n        </filter>\n        <filter id="filter2" color-interpolation-filters="linearRGB" x="0" y="0" width="100%" height="100%">\n            <feTurbulence type="turbulence" baseFrequency="0.006 0.04" numOctaves="3" seed="2" in="SourceGraphic" result="TURBULENCE__20" />\n            <feSpecularLighting surfaceScale="2.5" specularConstant="12" specularExponent="40" lighting-color="#268ddb" in="TURBULENCE__20" result="DIFFUSELIGHTING__20">\n                <fePointLight x="100" y="100" z="3" />\n            </feSpecularLighting>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["示例中的点光源位于 ",(0,r.jsx)(n.code,{children:"(100,100,3)"})," 位置，呈现的效果如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/JjqpjYg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjqpjYg"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"聚光灯光源-fespotlight",children:["聚光灯光源： ",(0,r.jsx)(n.code,{children:"<feSpotLight>"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#聚光灯光源-fespotlight",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<feSpotLight>"})," 是一种聚光灯光源，它模拟从一个特定点向一个目标点照射的光束，光束可以聚焦成锥形，类似于舞台上的聚光灯。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们可以通过下面这些属性来调整聚光灯光源的位置、投射区域等："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"x"}),"：定义光源在 ",(0,r.jsx)(n.code,{children:"x"})," 轴上的位置。表示光源在水平方向上的位置"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"y"}),"：定义光源在 ",(0,r.jsx)(n.code,{children:"y"})," 轴上的位置。表示光源在垂直方向上的位置"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"z"}),"：定义光源在 ",(0,r.jsx)(n.code,{children:"z"})," 轴上的位置，表示光源离图形平面的高度"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"pointsAtX"}),"：定义光束指向的目标点在 ",(0,r.jsx)(n.code,{children:"x"})," 轴上的位置"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"pointsAtY"}),"：定义光束指向的目标点在 ",(0,r.jsx)(n.code,{children:"y"})," 轴上的位置"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"pointsAtZ"}),"：定义光束指向的目标点在 ",(0,r.jsx)(n.code,{children:"z"})," 轴上的位置，表示目标点离图形平面的高度"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"specularExponent"}),"：定义光束的聚焦程度，值越大，光束越集中"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"limitingConeAngle"}),"：定义光束的锥角，值越小，光束越聚焦"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter1" color-interpolation-filters="linearRGB" x="0" y="0" width="100%" height="100%">\n            <feTurbulence type="turbulence" baseFrequency="0.006 0.04" numOctaves="3" seed="2" in="SourceGraphic" result="TURBULENCE__10" />\n            <feDiffuseLighting surfaceScale="2.5" diffuseConstant="12" lighting-color="#268ddb" in="TURBULENCE__10" result="DIFFUSELIGHTING__10">\n                <feSpotLight x="50" y="50" z="100" pointsAtX="100" pointsAtY="100" pointsAtZ="100" specularExponent="30" limitingConeAngle="45" />\n            </feDiffuseLighting>\n        </filter>\n        <filter id="filter2" color-interpolation-filters="linearRGB" x="0" y="0" width="100%" height="100%">\n            <feTurbulence type="turbulence" baseFrequency="0.006 0.04" numOctaves="3" seed="2" in="SourceGraphic" result="TURBULENCE__20" />\n            <feSpecularLighting surfaceScale="2.5" specularConstant="12" specularExponent="40" lighting-color="#268ddb" in="TURBULENCE__20" result="DIFFUSELIGHTING__20">\n                <feSpotLight x="50" y="50" z="100" pointsAtX="100" pointsAtY="100" pointsAtZ="100" specularExponent="30" limitingConeAngle="45" />\n            </feSpecularLighting>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["此示例表示光源位于 ",(0,r.jsx)(n.code,{children:"(50,50,100)"})," ，光束指向 ",(0,r.jsx)(n.code,{children:"(100, 100, 100)"})," 的目标点，光束的聚焦程度为 ",(0,r.jsx)(n.code,{children:"30"})," ，光束的锥角为 ",(0,r.jsx)(n.code,{children:"45"})," 度。所呈现的效果如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/vYwdYwJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYwdYwJ"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"远距离光源-fedistantlight",children:["远距离光源： ",(0,r.jsx)(n.code,{children:"<feDistantLight>"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#远距离光源-fedistantlight",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<feDistantLight>"})," 是一种远距离光源，它模拟从无限远处照射过来的平行光束，类似于太阳光。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["由于光源离目标非常远，所以光线是平行的。我们可以通过 ",(0,r.jsx)(n.code,{children:"azimuth"})," 和 ",(0,r.jsx)(n.code,{children:"elevation"})," 属性来设置远距离光源的效果："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"azimuth"}),"：定义光源在 ",(0,r.jsx)(n.code,{children:"XY"})," 平面上的顺时针方向角度（以度数表示）。它表示光源在水平方向上相对于图形中心的角度"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"elevation"}),"：定义光源相对于图形平面的高度角（以度数表示），即光源从 ",(0,r.jsx)(n.code,{children:"XY"})," 平面向 ",(0,r.jsx)(n.code,{children:"z"})," 轴方向的方向角度。它表示光源在垂直方向上的高度角"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["其中 ",(0,r.jsx)(n.code,{children:"azimuth"})," 又称为“方位角”，而 ",(0,r.jsx)(n.code,{children:"elevation"})," 称为“仰角”。方位角和仰角是定义天体（太阳、月亮）在天空中特定位置的两个坐标，这些坐标是从特定地点在特定时间观看到的。假设你希望太阳或月亮在天空中的某个特定位置，天空中的这个位置是由方位角和仰角定义的。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["方位角（",(0,r.jsx)(n.code,{children:"azimuth"}),"）是指从北方向顺时针沿观察者地平线测量的天体（太阳或月亮）的角度。它决定了天体的方向。例如，正北方向的天体方位角为 ",(0,r.jsx)(n.code,{children:"0\xba"}),"，正东方向的方位角为 ",(0,r.jsx)(n.code,{children:"90\xba"}),"，正南方向的方位角为 ",(0,r.jsx)(n.code,{children:"180\xba"}),"，正西方向的方位角为 ",(0,r.jsx)(n.code,{children:"270\xba"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["仰角（",(0,r.jsx)(n.code,{children:"elevation"}),"）是指天体（太阳、月亮）与观察者的当地地平线或当地平面的垂直角距离。对于我们来说，太阳的仰角是太阳表观盘几何中心的方向与观察者当地地平线之间的角度。当太阳或月亮的几何中心位于观察者的当地地平线或当地平面上方 ",(0,r.jsx)(n.code,{children:"12\xba"})," 时，我们会说太阳或月亮的仰角为 ",(0,r.jsx)(n.code,{children:"12\xba"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"下图显示了在两种不同观察者位置下的太阳仰角。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:G,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["我们来看一个关于 ",(0,r.jsx)(n.code,{children:"<feDistantLight>"})," 光源的简单示例："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <defs>\n        <filter id="filter1" color-interpolation-filters="linearRGB" x="0" y="0" width="100%" height="100%">\n            <feTurbulence type="turbulence" baseFrequency="0.006 0.04" numOctaves="3" seed="2" in="SourceGraphic" result="TURBULENCE__10" />\n            <feDiffuseLighting surfaceScale="2.5" diffuseConstant="12" lighting-color="#268ddb" in="TURBULENCE__10" result="DIFFUSELIGHTING__10">\n                <feDistantLight azimuth="45" elevation="5" />\n            </feDiffuseLighting>\n        </filter>\n        <filter id="filter2" color-interpolation-filters="linearRGB" x="0" y="0" width="100%" height="100%">\n            <feTurbulence type="turbulence" baseFrequency="0.006 0.04" numOctaves="3" seed="2" in="SourceGraphic" result="TURBULENCE__20" />\n            <feSpecularLighting surfaceScale="2.5" specularConstant="12" specularExponent="40" lighting-color="#268ddb" in="TURBULENCE__20" result="DIFFUSELIGHTING__20">\n                <feDistantLight azimuth="45" elevation="5" />\n            </feSpecularLighting>\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["此示例表示光源以 ",(0,r.jsx)(n.code,{children:"45"})," 度的角度从水平方向照射，并以 ",(0,r.jsx)(n.code,{children:"5"})," 度的角度从垂直方向照射。呈现的效果如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLQwwL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLQwwL"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"案例制作玻璃文字效果",children:["案例：制作玻璃文字效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#案例制作玻璃文字效果",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们来看一个综合案例，玻璃文字效果。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/WNBMbWv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNBMbWv"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"接下来，我们一步一步来看这个效果是如何实现的。"}),"\n",(0,r.jsxs)(n.h3,{id:"第一步引入背景图像",children:["第一步：引入背景图像",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第一步引入背景图像",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在这个示例中，我们需要一张图像作为“玻璃”效果的背景，我在这里使用了下图："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://picsum.photos/id/56/1920/1024",target:"_blank",rel:"noopener noreferrer",children:"https://picsum.photos/id/56/1920/1024"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"你可以选择你喜欢的图像。"}),"\n",(0,r.jsxs)(n.p,{children:["在这个示例中，并没有使用 HTML 的 ",(0,r.jsx)(n.code,{children:"<img>"})," 元素来引入背景图，而是使用了 SVG 的 ",(0,r.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7347990618057998388",target:"_blank",rel:"noopener noreferrer",children:[(0,r.jsx)(n.code,{children:"<image>"})," 元素"]}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    \x3c!-- 背景图（可见） --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["你会注意到，示例中的 ",(0,r.jsx)(n.code,{children:"<svg>"})," 元素的 ",(0,r.jsx)(n.code,{children:"viewBox"})," 属性的 ",(0,r.jsx)(n.code,{children:"width"})," 和 ",(0,r.jsx)(n.code,{children:"height"})," 和 ",(0,r.jsx)(n.code,{children:"<image>"})," 元素引入的图片原始尺寸是相同的，即 ",(0,r.jsx)(n.code,{children:"1920 x 1024"})," 。这确保了 SVG 的视窗大小与图片的尺寸相同，减少了很多不必要的麻烦。例如，确保图像位于我们指定的位置。"]}),"\n",(0,r.jsxs)(n.h3,{id:"第二步扭曲图像",children:["第二步：扭曲图像",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第二步扭曲图像",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["复制第一步中的 ",(0,r.jsx)(n.code,{children:"<image>"})," 元素，唯一不同的是，在这个图像上我们将会应用一个 ID 为 ",(0,r.jsx)(n.code,{children:"distortion"})," 的滤镜。这个滤镜将会扭曲图像。我们将使用 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318101526183986",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(n.code,{children:"<feTurbulence>"})})," 和 ",(0,r.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318262368534578",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(n.code,{children:"<feDisplacementMap>"})})," 滤镜基元来对图像进行扭曲操作，即 ",(0,r.jsx)(n.code,{children:"<feTurbulence>"})," 生成噪声图，并且该图像将作为 ",(0,r.jsx)(n.code,{children:"<feDisplacementMap>"})," 滤镜的位移图，并且图像的 ",(0,r.jsx)(n.code,{children:"x"})," 轴上的红色通道和 ",(0,r.jsx)(n.code,{children:"y"})," 轴上的绿色通道值会根据 ",(0,r.jsx)(n.code,{children:"scale"})," 指定的值进行缩放。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["如果你仔细观察上图，你人看到应用了滤镜（",(0,r.jsx)(n.code,{children:'filter="url(#distortion)"'}),"）的图像中物体的边缘有些粗糙和波浪状。这就是滤镜的作用。"]}),"\n",(0,r.jsxs)(n.h3,{id:"第三步裁剪文本",children:["第三步：裁剪文本",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第三步裁剪文本",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["我们不希望整个图像被扭曲。我们要将扭曲的 ",(0,r.jsx)(n.code,{children:"<image>"})," 裁剪成一些文本形状。这样就能看到“透过”玻璃的图片部分。"]}),"\n",(0,r.jsxs)(n.p,{children:["在 SVG 中，",(0,r.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7362748816769941540",target:"_blank",rel:"noopener noreferrer",children:["我们可以使用 ",(0,r.jsx)(n.code,{children:"<clipPath>"})," 元素来定义剪切路径"]}),"，只不过我们这个示例中是由 ",(0,r.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7346773005114507304",target:"_blank",rel:"noopener noreferrer",children:[(0,r.jsx)(n.code,{children:"<text>"})," 元素"]}),"来决定剪切路径形状的。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义剪切路径 --\x3e\n        <clipPath id="clip">\n            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>\n        </clipPath>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["并在 CSS 中给 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素设置一些样式："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:'text {\n    font-size: 12vw;\n    font-family: "Mona Sans", serif;\n    font-weight: 900;\n    z-index: 3;\n    place-self: center;\n    text-transform: uppercase;\n    color: #fff;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["定义好裁剪路径之后，请别忘了在扭曲图像 ",(0,r.jsx)(n.code,{children:"<image>"})," 上使用 ",(0,r.jsx)(n.code,{children:"clip-path"})," 引用 ",(0,r.jsx)(n.code,{children:"<clipPath>"})," 定义的剪切路径（你也可以在 CSS 中使用 ",(0,r.jsx)(n.code,{children:"clip-path"})," 引用），否则看不到任何被裁剪的效果："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义剪切路径 --\x3e\n        <clipPath id="clip">\n            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>\n        </clipPath>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 + 裁剪 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" \n        clip-path="url(#clip)"\n        filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"注意，为了让大家能看到被裁剪的扭曲图像效果，我把背景图先禁用了。如果开启背景图，在浏览器中你看到效果如下图。似乎看不到“SVG AWESOME” 文本字样。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"如果你足够仔细的话，还是能发现差异的。只有“SVG AWESOME” 文本区域的图像带有扭曲效果。或者你给扭曲图像临时设置一个混合模式，立刻就能显示出差异："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"第四步添加文本",children:["第四步：添加文本",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第四步添加文本",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，我们要在 SVG 中添加一个与 ",(0,r.jsx)(n.code,{children:"<clipPath>"})," 中一模一样的 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义剪切路径 --\x3e\n        <clipPath id="clip">\n            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>\n        </clipPath>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 + 裁剪 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" \n        clip-path="url(#clip)"\n        filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n        \n    \x3c!-- 可见文本 --\x3e\n    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>        \n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["正如你所看到的，在背景图片上面有一个黑色文本（“SVG AWESOME”）。如果我们已经制作的 ",(0,r.jsx)(n.code,{children:"<image>"})," 上的扭曲滤镜是我们通过“玻璃”看到的内容，那么我们的新 ",(0,r.jsx)(n.code,{children:"<text>"})," 就是玻璃本身。"]}),"\n",(0,r.jsxs)(n.h3,{id:"第五步创建文本的暗色边缘",children:["第五步：创建文本的暗色边缘",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第五步创建文本的暗色边缘",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"接下来的内容就更有趣了，当然也变得更复杂了。"}),"\n",(0,r.jsx)(n.p,{children:"我们想在文本元素的边缘创建一个暗边缘（有点类似描边的效果），这样当与亮边缘结合时，会增加文本在图像上的深度感。"}),"\n",(0,r.jsxs)(n.p,{children:["我们需要为 ",(0,r.jsx)(n.code,{children:"<text>"})," 创建一个新的滤镜，并给这个滤镜一个 ",(0,r.jsx)(n.code,{children:'id="textFilter"'}),"，然后将其链接到 ",(0,r.jsx)(n.code,{children:"<text>"})," 元素的 ",(0,r.jsx)(n.code,{children:"filter"})," 属性。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义剪切路径 --\x3e\n        <clipPath id="clip">\n            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>\n        </clipPath>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n        \n        \x3c!-- 应用于文本的滤镜 --\x3e\n        <filter id="textFilter" color-interpolation-filters="linearRGB">\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 + 裁剪 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" \n        clip-path="url(#clip)"\n        filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n        \n    \x3c!-- 可见文本 --\x3e\n    <text filter="url(#textFilter)" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>        \n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["我们需要往 ",(0,r.jsx)(n.code,{children:"textFilter"})," 滤镜中添加更多的滤镜基元。"]}),"\n",(0,r.jsx)(n.p,{children:"由于 SVG 从背景到前景工具，所以我们在滤镜中首先放置的是玻璃的阴影，因为它在最远的后面。这一部分有点复杂，但我们会逐步讲解。"}),"\n",(0,r.jsxs)(n.p,{children:["为了实现这个效果，我们使用了四个滤镜基元：",(0,r.jsx)(n.code,{children:"<feMorphology>"}),"、",(0,r.jsx)(n.code,{children:"<feOffset>"}),"、",(0,r.jsx)(n.code,{children:"<feFlood>"})," 和 ",(0,r.jsx)(n.code,{children:"<feComposite>"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义剪切路径 --\x3e\n        <clipPath id="clip">\n            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>\n        </clipPath>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n        \n        \x3c!-- 应用于文本的滤镜 --\x3e\n        <filter id="textFilter" color-interpolation-filters="linearRGB">\n            \x3c!-- 暗色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DARK__EDGE__10" />\n            <feOffset dx="5" dy="5" in="DARK__EDGE__10" result="DARK__EDGE__30" />\n            <feFlood flood-color="rgb(0 0 0 / .5)" result="DARK__EDGE__40" />\n            <feComposite in="DARK__EDGE__40" in2="DARK__EDGE__30" operator="in" result="DARK__EDGE__50" />\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 + 裁剪 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" \n        clip-path="url(#clip)"\n        filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n        \n    \x3c!-- 可见文本 --\x3e\n    <text filter="url(#textFilter)" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>        \n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["首先是 ",(0,r.jsx)(n.code,{children:"<feMorphology>"})," 滤镜基元，在这里它会使文本变得更粗，因为我们设置的操作类型是 ",(0,r.jsx)(n.code,{children:"dilate"})," 膨胀（变粗）。并且将它的 ",(0,r.jsx)(n.code,{children:"radius"})," 设置为 ",(0,r.jsx)(n.code,{children:"4"})," ，这个相当于文本描边粗细："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["接着使用 ",(0,r.jsx)(n.code,{children:"<feOffset>"})," 滤镜基元，将 ",(0,r.jsx)(n.code,{children:"<feMorphology>"})," 滤镜基元的结果（所有“像素”）在 ",(0,r.jsx)(n.code,{children:"x"})," 轴或 ",(0,r.jsx)(n.code,{children:"y"})," 轴上移动。值 ",(0,r.jsx)(n.code,{children:'dx="5"'})," 和 ",(0,r.jsx)(n.code,{children:'dy="5"'})," 分别在 ",(0,r.jsx)(n.code,{children:"x"})," 轴和 ",(0,r.jsx)(n.code,{children:"y"})," 轴上向右向下移动 ",(0,r.jsx)(n.code,{children:"5"})," 个用户单位。数字越大，移动得越远。为 ",(0,r.jsx)(n.code,{children:"dx"})," 输入负数，像素将向左移动；负 ",(0,r.jsx)(n.code,{children:"dy"})," 将向上移动！"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["然后，使用 ",(0,r.jsx)(n.code,{children:"<feFlood>"})," 滤镜基元给文本着色。你会发现，",(0,r.jsx)(n.code,{children:"<feFlood>"})," 滤镜基元将按照你指定的颜色（",(0,r.jsx)(n.code,{children:"flood-color"}),"）填充整个滤镜区域："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["正如你所看到的，现在整个滤镜区域被填充了一个 ",(0,r.jsx)(n.code,{children:" rgb(0 0 0  / .5)"})," 颜色。注意，",(0,r.jsx)(n.code,{children:"<feFlood>"})," 滤镜基元并不知道你之前做了什么，而且它也不关心你之前做了什么，它唯一做的就是将按照像指定的颜色来填充整个滤镜区域。"]}),"\n",(0,r.jsxs)(n.p,{children:["这就是为什么有些人对 SVG 感到沮丧。看不见的东西很难工作！相信我，随着你对 SVG 的熟练，你会习惯这种情况。事实上，接下来的几步我们需要依赖这个并相信一切都还在。比如 ",(0,r.jsx)(n.code,{children:"<feComposite>"})," 滤镜基元。它就像个魔法师一样，会将你感觉消失的东西又重新变回来。"]}),"\n",(0,r.jsxs)(n.p,{children:["在这个示列中，",(0,r.jsx)(n.code,{children:"<feComposite>"})," 滤镜基元会将 ",(0,r.jsx)(n.code,{children:"<feOffset>"})," 和 ",(0,r.jsx)(n.code,{children:"<feFlood>"})," 两个滤镜基元的结果做一个合成操作，将两者未重叠的部分消除。这样一来，我们可以再次看到文本，并且由于我们使用的颜色略带透明（",(0,r.jsx)(n.code,{children:" rgb(0 0 0  / .5)"}),"），我们甚至可以看到失真“玻璃”效果（其实就是填充颜色是透明的，从而看到底部的背景图像）："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"第六步制作文本的亮色边缘",children:["第六步：制作文本的亮色边缘",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第六步制作文本的亮色边缘",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这一步与我们刚刚完成的几乎相同："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义剪切路径 --\x3e\n        <clipPath id="clip">\n            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>\n        </clipPath>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n        \n        \x3c!-- 应用于文本的滤镜 --\x3e\n        <filter id="textFilter" color-interpolation-filters="linearRGB">\n            \x3c!-- 暗色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DARK__EDGE__10" />\n            <feOffset dx="5" dy="5" in="DARK__EDGE__10" result="DARK__EDGE__30" />\n            <feFlood flood-color="rgb(0 0 0 / .5)" result="DARK__EDGE__40" />\n            <feComposite in="DARK__EDGE__40" in2="DARK__EDGE__30" operator="in" result="DARK__EDGE__50" />\n            \n            \x3c!-- 亮色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="LIGHT__EDGE__10" />\n            <feOffset dx="-2" dy="-2" in="LIGHT__EDGE__10" result="LIGHT__EDGE__20" />\n            <feFlood flood-color="rgb(255 255 255 / .5)" result="LIGHT__EDGE__30" />\n            <feComposite in="LIGHT__EDGE__30" in2="LIGHT__EDGE__20" operator="in" result="LIGHT__EDGE__40" />\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 + 裁剪 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" \n        clip-path="url(#clip)"\n        filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n        \n    \x3c!-- 可见文本 --\x3e\n    <text filter="url(#textFilter)" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>        \n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这次 ",(0,r.jsx)(n.code,{children:"<feOffset>"})," 的 ",(0,r.jsx)(n.code,{children:"dx"})," 和 ",(0,r.jsx)(n.code,{children:"dy"})," 设置了负值 ",(0,r.jsx)(n.code,{children:"-2"})," ，使 ",(0,r.jsx)(n.code,{children:"<feMorphology>"})," 的结果向左向上移动 ",(0,r.jsx)(n.code,{children:"2"})," 个用户单位。",(0,r.jsx)(n.code,{children:"<feFlood>"})," 设置的填充颜色略微白色（",(0,r.jsx)(n.code,{children:"rgb(255 255 255  / .5)"}),"）。我们经在达到一个漂亮的深度效果。"]}),"\n",(0,r.jsx)(n.p,{children:"这个时候，你在浏览器只能看到亮色边缘的效果，第五步的暗色边缘看上去似乎又被丢失了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"第七步合并暗色和亮色边缘",children:["第七步：合并暗色和亮色边缘",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第七步合并暗色和亮色边缘",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["由于我们希望文本亮色描边和暗色描边效果都存在，因此我们需要使用另一个滤镜基元来对它们进行合并，即 SVG 的 ",(0,r.jsx)(n.code,{children:"<feMerge>"})," 滤镜基元。它让我们可以将任意数量的基本结果合并，生成一个新的图像。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义剪切路径 --\x3e\n        <clipPath id="clip">\n            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>\n        </clipPath>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n        \n        \x3c!-- 应用于文本的滤镜 --\x3e\n        <filter id="textFilter" color-interpolation-filters="linearRGB">\n            \x3c!-- 暗色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DARK__EDGE__10" />\n            <feOffset dx="5" dy="5" in="DARK__EDGE__10" result="DARK__EDGE__30" />\n            <feFlood flood-color="rgb(0 0 0 / .5)" result="DARK__EDGE__40" />\n            <feComposite in="DARK__EDGE__40" in2="DARK__EDGE__30" operator="in" result="DARK__EDGE__50" />\n            \n            \x3c!-- 亮色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="LIGHT__EDGE__10" />\n            <feOffset dx="-2" dy="-2" in="LIGHT__EDGE__10" result="LIGHT__EDGE__20" />\n            <feFlood flood-color="rgb(255 255 255 / .5)" result="LIGHT__EDGE__30" />\n            <feComposite in="LIGHT__EDGE__30" in2="LIGHT__EDGE__20" operator="in" result="LIGHT__EDGE__40" />\n            \n            \x3c!-- 暗色边缘和亮色边缘合并 --\x3e\n            <feMerge result="EDGES__10">\n                <feMergeNode in="DARK__EDGE__50" />\n                <feMergeNode in="LIGHT__EDGE__40" />\n            </feMerge>\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 + 裁剪 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" \n        clip-path="url(#clip)"\n        filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n        \n    \x3c!-- 可见文本 --\x3e\n    <text filter="url(#textFilter)" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>        \n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["现在，两者（文本暗色描边和亮色描边）共存了！然而，这效果并不是我们所期望的。我们只是想要描边的效果，而不是填充整个文本。因此，我们需要移除原始 ",(0,r.jsx)(n.code,{children:"<text>"})," 占据的空间。"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，我们继续使用 ",(0,r.jsx)(n.code,{children:"<feComposite>"})," 滤镜基元来移除原始的 ",(0,r.jsx)(n.code,{children:"SourceGraphic"}),"。因为我们使用 ",(0,r.jsx)(n.code,{children:"<feMorphology>"})," 加粗字母，使文本具有描边效果，现在我们可以从 ",(0,r.jsx)(n.code,{children:"<feMerge>"})," 的结果中移除原始的字母形状。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义剪切路径 --\x3e\n        <clipPath id="clip">\n            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>\n        </clipPath>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n        \n        \x3c!-- 应用于文本的滤镜 --\x3e\n        <filter id="textFilter" color-interpolation-filters="linearRGB">\n            \x3c!-- 暗色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DARK__EDGE__10" />\n            <feOffset dx="5" dy="5" in="DARK__EDGE__10" result="DARK__EDGE__30" />\n            <feFlood flood-color="rgb(0 0 0 / .5)" result="DARK__EDGE__40" />\n            <feComposite in="DARK__EDGE__40" in2="DARK__EDGE__30" operator="in" result="DARK__EDGE__50" />\n            \n            \x3c!-- 亮色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="LIGHT__EDGE__10" />\n            <feOffset dx="-2" dy="-2" in="LIGHT__EDGE__10" result="LIGHT__EDGE__20" />\n            <feFlood flood-color="rgb(255 255 255 / .5)" result="LIGHT__EDGE__30" />\n            <feComposite in="LIGHT__EDGE__30" in2="LIGHT__EDGE__20" operator="in" result="LIGHT__EDGE__40" />\n            \n            \x3c!-- 暗色边缘和亮色边缘合并 --\x3e\n            <feMerge result="EDGES__10">\n                <feMergeNode in="DARK__EDGE__50" />\n                <feMergeNode in="LIGHT__EDGE__40" />\n            </feMerge>\n            \n            \x3c!-- 移除文本原始空间 --\x3e\n            <feComposite in="EDGES__10" in2="SourceGraphic" operator="out" result="EDGES__20" />\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 + 裁剪 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" \n        clip-path="url(#clip)"\n        filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n        \n    \x3c!-- 可见文本 --\x3e\n    <text filter="url(#textFilter)" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>        \n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["通过这些步骤，我们成功的将暗色描边和亮色描边结合在一起，并且只留文本的描边效果，使文本在图像上显得更加立体。仔细观察整个效果，文本看上去像是应用了两个不同方向的、不同颜色的阴影效果，想象一下 CSS 的 ",(0,r.jsx)(n.code,{children:"text-shadow"})," 给文本添加描边的效果。"]}),"\n",(0,r.jsx)(n.p,{children:"现在我们看起来像玻璃了，只剩下一个部分还需完成。"}),"\n",(0,r.jsxs)(n.h3,{id:"第八步添加斜角效果",children:["第八步：添加斜角效果",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第八步添加斜角效果",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们已经有了一个相当不错的立体玻璃效果。然而，字母看起来还是比较平坦。让我们再添加一个效果，让它们看起来更加圆润。"}),"\n",(0,r.jsx)(n.p,{children:"为了实现这一点，我们将创建一个斜角效果。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义剪切路径 --\x3e\n        <clipPath id="clip">\n            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>\n        </clipPath>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n        \n        \x3c!-- 应用于文本的滤镜 --\x3e\n        <filter id="textFilter" color-interpolation-filters="linearRGB">\n            \x3c!-- 暗色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DARK__EDGE__10" />\n            <feOffset dx="5" dy="5" in="DARK__EDGE__10" result="DARK__EDGE__30" />\n            <feFlood flood-color="rgb(0 0 0 / .5)" result="DARK__EDGE__40" />\n            <feComposite in="DARK__EDGE__40" in2="DARK__EDGE__30" operator="in" result="DARK__EDGE__50" />\n            \n            \x3c!-- 亮色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="LIGHT__EDGE__10" />\n            <feOffset dx="-2" dy="-2" in="LIGHT__EDGE__10" result="LIGHT__EDGE__20" />\n            <feFlood flood-color="rgb(255 255 255 / .5)" result="LIGHT__EDGE__30" />\n            <feComposite in="LIGHT__EDGE__30" in2="LIGHT__EDGE__20" operator="in" result="LIGHT__EDGE__40" />\n            \n            \x3c!-- 暗色边缘和亮色边缘合并 --\x3e\n            <feMerge result="EDGES__10">\n                <feMergeNode in="DARK__EDGE__50" />\n                <feMergeNode in="LIGHT__EDGE__40" />\n            </feMerge>\n            \n            \x3c!-- 移除文本原始空间 --\x3e\n            <feComposite in="EDGES__10" in2="SourceGraphic" operator="out" result="EDGES__20" />\n            \n            \x3c!-- 斜角 --\x3e\n            <feGaussianBlur stdDeviation="5" in="SourceGraphic" result="BEVEL__BLUR__10" />\n            <feSpecularLighting result="BEVEL__BLUR__20" in="BEVEL__BLUR__10" specularConstant="2.4" specularExponent="13" lighting-color="rgb(60 60 60 / .4)">\n                <feDistantLight azimuth="25" elevation="40" />\n            </feSpecularLighting>\n            <feComposite in="BEVEL__BLUR__20" in2="SourceGraphic" operator="in" result="BEVEL__BLUR__30" />\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 + 裁剪 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" \n        clip-path="url(#clip)"\n        filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n        \n    \x3c!-- 可见文本 --\x3e\n    <text filter="url(#textFilter)" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>        \n</svg>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["首先，我们将使用 ",(0,r.jsx)(n.code,{children:"<feGaussianBlur>"}),"。这会轻微地模糊我们现有的滤镜结果。我们将使用这个模糊的结果作为基础，然后使用 ",(0,r.jsx)(n.code,{children:"<feSpecularLighting>"})," 滤镜基元为整个效果添加光照效果。和往常一样，你可以随意调整这里的参数，看看能够得到什么效果！你可能想要改变的主要参数是 ",(0,r.jsx)(n.code,{children:"lighting-color"}),"。我们使用的图像稍微暗一些，因此使用了一个明亮的 ",(0,r.jsx)(n.code,{children:"lighting-color"}),"。如果你的图像非常明亮，这会使字母难以阅读，那么在这种情况下你可能会使用较暗的 ",(0,r.jsx)(n.code,{children:"lighting-color"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"通过这些步骤，我们将为文本添加一个斜角效果，使其看起来更加立体和真实，与背景图像融为一体。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"第九步所有步骤综合起来",children:["第九步：所有步骤综合起来！",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第九步所有步骤综合起来",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["最后，将所有部分组合到一起，使用最后的 ",(0,r.jsx)(n.code,{children:"<feMerge>"})," 将所有内容放置到最终效果中！"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1920 1024" class="demo">\n    <defs>\n        \x3c!-- 定义剪切路径 --\x3e\n        <clipPath id="clip">\n            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>\n        </clipPath>\n        \x3c!-- 定义扭曲图像的滤镜 --\x3e\n        <filter id="distortion" color-interpolation-filters="linearRGB">\n            <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" in="SourceGraphic" result="TURBULENCE" />\n            <feDisplacementMap in2="TURBULENCE" in="SourceGraphic" scale="20" xChannelSelector="R" yChannelSelector="G" />\n        </filter>\n        \n        \x3c!-- 应用于文本的滤镜 --\x3e\n        <filter id="textFilter" color-interpolation-filters="linearRGB">\n            \x3c!-- 暗色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="DARK__EDGE__10" />\n            <feOffset dx="5" dy="5" in="DARK__EDGE__10" result="DARK__EDGE__30" />\n            <feFlood flood-color="rgb(0 0 0 / .5)" result="DARK__EDGE__40" />\n            <feComposite in="DARK__EDGE__40" in2="DARK__EDGE__30" operator="in" result="DARK__EDGE__50" />\n            \n            \x3c!-- 亮色边缘 --\x3e\n            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="LIGHT__EDGE__10" />\n            <feOffset dx="-2" dy="-2" in="LIGHT__EDGE__10" result="LIGHT__EDGE__20" />\n            <feFlood flood-color="rgb(255 255 255 / .5)" result="LIGHT__EDGE__30" />\n            <feComposite in="LIGHT__EDGE__30" in2="LIGHT__EDGE__20" operator="in" result="LIGHT__EDGE__40" />\n            \n            \x3c!-- 暗色边缘和亮色边缘合并 --\x3e\n            <feMerge result="EDGES__10">\n                <feMergeNode in="DARK__EDGE__50" />\n                <feMergeNode in="LIGHT__EDGE__40" />\n            </feMerge>\n            \n            \x3c!-- 移除文本原始空间 --\x3e\n            <feComposite in="EDGES__10" in2="SourceGraphic" operator="out" result="EDGES__20" />\n            \n            \x3c!-- 斜角 --\x3e\n            <feGaussianBlur stdDeviation="5" in="SourceGraphic" result="BEVEL__BLUR__10" />\n            <feSpecularLighting result="BEVEL__BLUR__20" in="BEVEL__BLUR__10" specularConstant="2.4" specularExponent="13" lighting-color="rgb(60 60 60 / .4)">\n                <feDistantLight azimuth="25" elevation="40" />\n            </feSpecularLighting>\n            <feComposite in="BEVEL__BLUR__20" in2="SourceGraphic" operator="in" result="BEVEL__BLUR__30" />\n            \n            \x3c!-- 斜角与边缘合并 --\x3e\n            <feMerge result="complete">\n                <feMergeNode in="EDGES__20" />\n                <feMergeNode in="BEVEL__BLUR__30" />\n            </feMerge>\n        </filter>\n    </defs>\n    \x3c!-- 背景图 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" width="100%"  height="100%" x=0 y=0 />\n    \x3c!-- 扭曲图像 + 裁剪 --\x3e\n    <image href="https://picsum.photos/id/56/1920/1024" \n        clip-path="url(#clip)"\n        filter="url(#distortion)" width="100%"  height="100%" x=0 y=0 />\n        \n    \x3c!-- 可见文本 --\x3e\n    <text filter="url(#textFilter)" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle">svg awesome</text>        \n</svg>\n'})}),"\n",(0,r.jsx)(n.p,{children:"通过这些步骤，我们创建了一个真实的玻璃效果，使得文本和背景图像相互融合，看起来立体而逼真。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/WNBMbWv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNBMbWv"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"正如课程中示例所呈现的效果，SVG 滤镜中有太多不可思议的东西，也有很非常有趣的东西可以玩，它们的结合为我们打开了很多视觉的可能性。这些效果以前在诸如 Photoshop 等图像编辑器这外几乎不可想象。这些是设计师的设计技巧，现如今，SVG 滤镜为你打开了新世界的大门，你可以通过几行代码创建出很神奇的 UI 视觉效果。"}),"\n",(0,r.jsx)(n.p,{children:"另外，SVG 滤镜效果除了让你感到惊艳之外，还让你感到惧怕，并且止步往前。其实，它并没有我们想象的那么复杂，正如课程中制作玻璃文字效果的案例所示，很多时候，我们只需要一步步理清楚 SVG 每一个滤镜基元的功能，了解它们的参数，我们就可以组合它们创建出自己期望的效果。"})]})}function eh(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(ea,{...e})}):ea(e)}let ex=eh;eh.__RSPRESS_PAGE_META={},eh.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F42-%E9%AB%98%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E6%BB%A4%E9%95%9C%E7%9A%84%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%A8%A1%E7%B3%8A%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C.md"]={toc:[{text:"Web 上的模糊与阴影效果",id:"web-上的模糊与阴影效果",depth:2},{text:"创建模糊效果",id:"创建模糊效果",depth:2},{text:"CSS 创建磨砂玻璃效果的局限性",id:"css-创建磨砂玻璃效果的局限性",depth:3},{text:"使用 `<feGaussianBlur>` 创建磨砂玻璃效果",id:"使用-fegaussianblur-创建磨砂玻璃效果",depth:3},{text:"创建阴影效果",id:"创建阴影效果",depth:2},{text:"使用 `<feDropShadow>` 滤镜创建阴影效果",id:"使用-fedropshadow-滤镜创建阴影效果",depth:3},{text:"SVG 滤镜中的光照效果",id:"svg-滤镜中的光照效果",depth:2},{text:"点光源：`<fePointLight>`",id:"点光源fepointlight",depth:3},{text:"聚光灯光源： `<feSpotLight>`",id:"聚光灯光源-fespotlight",depth:3},{text:"远距离光源： `<feDistantLight>`",id:"远距离光源-fedistantlight",depth:3},{text:"案例：制作玻璃文字效果",id:"案例制作玻璃文字效果",depth:2},{text:"第一步：引入背景图像",id:"第一步引入背景图像",depth:3},{text:"第二步：扭曲图像",id:"第二步扭曲图像",depth:3},{text:"第三步：裁剪文本",id:"第三步裁剪文本",depth:3},{text:"第四步：添加文本",id:"第四步添加文本",depth:3},{text:"第五步：创建文本的暗色边缘",id:"第五步创建文本的暗色边缘",depth:3},{text:"第六步：制作文本的亮色边缘",id:"第六步制作文本的亮色边缘",depth:3},{text:"第七步：合并暗色和亮色边缘",id:"第七步合并暗色和亮色边缘",depth:3},{text:"第八步：添加斜角效果",id:"第八步添加斜角效果",depth:3},{text:"第九步：所有步骤综合起来！",id:"第九步所有步骤综合起来",depth:3},{text:"小结",id:"小结",depth:2}],title:"42-高级篇：SVG 滤镜的进阶之模糊与阴影效果",headingTitle:"42-高级篇：SVG 滤镜的进阶之模糊与阴影效果",frontmatter:{}}}}]);