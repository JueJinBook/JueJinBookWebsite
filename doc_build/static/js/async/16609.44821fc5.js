"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["16609"],{574641:function(e,n,s){e.exports=s.p+"static/image/40da35a65cfc9b458c335c68925bcc30.26ac21e4.webp"},931560:function(e,n,s){s.r(n),s.d(n,{default:()=>H});var r=s(552676),i=s(740453);let c=s.p+"static/image/b826cacf8b639ffe06a23d69efe77170.ee77f1ef.webp",a=s.p+"static/image/b64fb64e477322088efcf0231d0b1f13.ede1b99e.webp",t=s.p+"static/image/3010f0d709a3f15ed2213ae78f4bf7c6.34cfda8b.webp",l=s.p+"static/image/d3fb3250ae7ad28552c1b9ef3a10203f.150299c8.webp",d=s.p+"static/image/6eeb5d156a116590f5f4fd6dbb46a4b2.e39d5fb5.webp",p=s.p+"static/image/30e85e0157fc3779f0951e61f94d5b81.417379b1.webp",j=s.p+"static/image/c271e65679952410e73aaa333888f0f3.a86d2515.webp",x=s.p+"static/image/c509974b75331c953cc88c16c9f71cbe.787baa12.webp",h=s.p+"static/image/7c19e39f7b53aa9e8ede5da2a3610a10.160c01d4.webp",o=s.p+"static/image/cb045bf418b0818a9b97ce8aba8be8f9.7c367e1a.webp";var m=s(574641);let b=s.p+"static/image/18b78ca659e0f9f2a066be99b7cd8532.ba938fa7.webp",g=s.p+"static/image/6023554b170868f6f63594b123fe92b4.0de0450c.webp",f=s.p+"static/image/deded893bc740b15928bcfa573dbc342.6be0db69.webp",u=s.p+"static/image/ed88a6391d7883322bbdfc10267613e2.44370ac7.webp",v=s.p+"static/image/6e9d61ae3e0093f23d1f810421adcad4.0e5be42f.webp",w=s.p+"static/image/3a0b979aebdad867f94c727fd8547c89.2eb77191.webp",C=s.p+"static/image/34aa4091d2b6fc3400307e97f8f3d832.b538a0a6.webp",y=s.p+"static/image/370ac4488463cb1265fecc3ea54bef67.f9c0c8d6.webp",E=s.p+"static/image/b89892c5f2301e0a906371bd7159574d.2f194a23.gif",S=s.p+"static/image/7a1ee15431c9dbb4812298fad7847e17.1645e424.webp",R=s.p+"static/image/5acd4b534d9f2bbab27dbc7e0367ab25.024d1ae1.webp",k=s.p+"static/image/c2a565b58ce82366baa508f72a9712b7.5be64f49.webp",A=s.p+"static/image/d7a3a6b10da199cf049a4e6f14e85e41.f662e025.webp",_=s.p+"static/image/2e5e44c04b6029956270fe10063b2e4e.89e268c5.webp",T=s.p+"static/image/501a7fc1ea38dcbbb5a1cd8ede7f4e64.5fa93c25.webp",P=s.p+"static/image/8f54aac41678cdf077b93d1ac11af15e.c391bb40.webp",I=s.p+"static/image/775ebae1594c6ee614a6249f8cdbf7c3.10ae7983.webp",M=s.p+"static/image/3f70df562a7b6d2ac39d9a65c556445e.08732cb9.webp",N=s.p+"static/image/7cea16e85925b1f7af8eae4c2d74338e.f88e9508.webp",B=s.p+"static/image/4f88ca674bcee9e821c5a7979f064f77.aa07ed3c.webp";function G(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"157-考试系统微服务lib-拆分",children:["157. 考试系统：微服务、Lib 拆分",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#157-考试系统微服务lib-拆分",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这节我们来做下微服务的拆分，并把一些公共 Module 放到 Lib 里。"}),"\n",(0,r.jsx)(n.p,{children:"创建项目："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest new exam-system\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后添加 4 个 app："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g app user\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g app exam\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g app answer\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:I,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g app analyse\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"看下现在的目录："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"还有 nest-cli.json"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们改下 user、exam、answer、analyse 的服务的启动端口，分别改为 3001、3002、3003、3004"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"跑起来："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start:dev user\nnpm run start:dev exam\nnpm run start:dev answer\nnpm run start:dev analyse\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"浏览器访问这 4 个服务的接口："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(n.p,{children:"多个微服务之间是可以相互调用的。"}),"\n",(0,r.jsx)(n.p,{children:"在根目录安装微服务的包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install @nestjs/microservices --save\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后改下 exam 微服务，添加一个消息处理函数："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@MessagePattern('sum')\nsum(numArr: Array<number>): number {\n    return numArr.reduce((total, item) => total + item, 0);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 main.ts 里注册下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"app.connectMicroservice({\n    transport: Transport.TCP,\n    options: {\n      port: 8888,\n    },\n});\napp.startAllMicroservices();\n"})}),"\n",(0,r.jsx)(n.p,{children:"exam 服务暴露了 3002 的 HTTP 服务，现在用 connectMicroservice 就是再暴露 8888 的 TCP 服务。"}),"\n",(0,r.jsx)(n.p,{children:"在 answer 的服务里面调用下这个微服务："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"ClientsModule.register([\n  {\n    name: 'EXAM_SERVICE',\n    transport: Transport.TCP,\n    options: {\n      port: 8888,\n    },\n  },\n])\n"})}),"\n",(0,r.jsx)(n.p,{children:"用客户端模块连接上 888 端口的微服务，然后在 Controller 里调用下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Inject } from '@nestjs/common';\nimport { AnswerService } from './answer.service';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\n\n@Controller()\nexport class AnswerController {\n  constructor(private readonly answerService: AnswerService) {}\n\n  @Inject('EXAM_SERVICE')\n  private examClient: ClientProxy\n\n  @Get()\n  async getHello() {\n    const value = await firstValueFrom(this.examClient.send('sum', [1, 3, 5]));\n    return this.answerService.getHello() + ' ' + value\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在之前的 hello world 接口里调用下微服务的 sum 方法。"}),"\n",(0,r.jsx)(n.p,{children:"用 firstValueFrom 取返回的值。"}),"\n",(0,r.jsx)(n.p,{children:"重新跑一下这两个服务："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start:dev exam\nnpm run start:dev answer\n"})}),"\n",(0,r.jsx)(n.p,{children:"试一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"微服务调用成功了。"}),"\n",(0,r.jsx)(n.p,{children:"虽然是隔着网络的两个服务，但是用起来和本地的 service 体验一样，这就是 RPC（远程过程调用）"}),"\n",(0,r.jsx)(n.p,{children:"user、exam、answer、analyse 微服务，各自提供 HTTP 接口，之间还可以通过 TCP 做相互调用。"}),"\n",(0,r.jsx)(n.p,{children:"那多个微服务的公共代码呢？"}),"\n",(0,r.jsx)(n.p,{children:"放在 lib 里。"}),"\n",(0,r.jsx)(n.p,{children:"比如 RedisModule："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g lib redis\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"会让你指定一个前缀，这里用默认的 @app。"}),"\n",(0,r.jsx)(n.p,{children:"然后可以看到在 libs 目录下多了这个公共模块："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"并且在 tsconfig.json 里生成了别名配置："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"改下 RedisModule"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Global, Module } from '@nestjs/common';\nimport { createClient } from 'redis';\nimport { RedisService } from './redis.service';\n\n@Global()\n@Module({\n  providers: [RedisService, \n    {\n      provide: 'REDIS_CLIENT',\n      async useFactory() {\n        const client = createClient({\n            socket: {\n                host: 'localhost',\n                port: 6379\n            }\n        });\n        await client.connect();\n        return client;\n      }\n    }\n  ],\n  exports: [RedisService]\n})\nexport class RedisModule {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"还有 RedisService"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Inject, Injectable } from '@nestjs/common';\nimport { RedisClientType } from 'redis';\n\n@Injectable()\nexport class RedisService {\n\n    @Inject('REDIS_CLIENT') \n    private redisClient: RedisClientType\n\n    async keys(pattern: string) {\n        return await this.redisClient.keys(pattern);\n    }\n\n    async get(key: string) {\n        return await this.redisClient.get(key);\n    }\n\n    async set(key: string, value: string | number, ttl?: number) {\n        await this.redisClient.set(key, value);\n\n        if(ttl) {\n            await this.redisClient.expire(key, ttl);\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后分别在 user 和 exam 的 service 里用一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Inject } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { RedisService } from '@app/redis';\n\n@Controller()\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Inject(RedisService)\n  redisService: RedisService;\n\n  @Get()\n  async getHello() {\n    const keys = await this.redisService.keys('*');\n    return this.userService.getHello() +  keys;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"把 redis 的容器跑起来，去 RedisInsight 里看下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"有两个 key。"}),"\n",(0,r.jsx)(n.p,{children:"把用户微服务跑起来："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start:dev user\n"})}),"\n",(0,r.jsx)(n.p,{children:"访问下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，lib 里的 RedisService 正确引入并生效了。"}),"\n",(0,r.jsx)(n.p,{children:"在 exam 微服务里也引入下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Inject(RedisService)\nredisService: RedisService;\n\n@Get()\nasync getHello() {\n    const keys = await this.redisService.keys('*');\n    return this.examService.getHello() +  keys;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start:dev exam\n"})}),"\n",(0,r.jsx)(n.p,{children:"试一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样，同一个模块就可以在两个微服务里使用了。"}),"\n",(0,r.jsxs)(n.p,{children:["案例代码在",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/exam-system",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这节我们微服务架构的项目结构。"}),"\n",(0,r.jsx)(n.p,{children:"创建了 user、exam、answer、analyse 这 4 个 app，还有 redis 这个公共 lib。"}),"\n",(0,r.jsx)(n.p,{children:"4 个微服务都单独暴露 http 接口在不同端口，之间还可以通过 TCP 来做通信。"}),"\n",(0,r.jsx)(n.p,{children:"微服务之间的 RPC 通信用起来就和用本地的 service 一样。"}),"\n",(0,r.jsx)(n.p,{children:"libs 下的模块可以在每个 app 里引入，可以放一些公共代码。"}),"\n",(0,r.jsx)(n.p,{children:"这样，微服务架构的 monorepo 的项目就够就搭建完成了。"})]})}function F(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(G,{...e})}):G(e)}let H=F;F.__RSPRESS_PAGE_META={},F.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F157.%20%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9F%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E3%80%81Lib%20%E6%8B%86%E5%88%86.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"157. 考试系统：微服务、Lib 拆分",headingTitle:"157. 考试系统：微服务、Lib 拆分",frontmatter:{}}}}]);