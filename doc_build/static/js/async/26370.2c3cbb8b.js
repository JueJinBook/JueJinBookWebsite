"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["26370"],{329601:function(e,n,r){r.r(n),r.d(n,{default:()=>p});var i=r(552676),s=r(740453);let c=r.p+"static/image/99167532c93410ad3987ecdd97390fc8.e3352364.webp",l=r.p+"static/image/1fd8fe32022cc3efcd2451f3c6a4ef1f.44e0c714.webp",d=r.p+"static/image/af0231d756b10b7d36204d1b5740e9e0.a90849e4.webp",t=r.p+"static/image/36e92a95348fcfe8a832a249cfdd44ae.9b87809c.webp",o=r.p+"static/image/21d05e178d2dcbccd86fd98234ea51a0.a642205a.webp";function h(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",code:"code",ol:"ol",li:"li",pre:"pre",img:"img",blockquote:"blockquote",ul:"ul"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"17不止-terser揭秘代码压缩的门门道道",children:["17.不止 Terser：揭秘代码压缩的门门道道",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#17不止-terser揭秘代码压缩的门门道道",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"代码压缩"})," 是指在不改变代码功能的前提下，从声明式（HTML、CSS）或命令式（JavaScript）语言中删除所有不必要的字符（备注、变量名压缩、逻辑语句合并等），减少代码体积的过程，这在 Web 场景中能够有效减少浏览器从服务器获取代码资源所需要消耗的传输量，降低网络通讯耗时，提升页面启动速度，是一种非常基础且性价比特别高的应用性能优化方案。"]}),"\n",(0,i.jsx)(n.p,{children:"在 Webpack 生态下，我们可以借助各种插件轻松实现应用代码压缩，本文将从代码压缩的基本原理开始讲起，之后介绍若干适用于 JavaScript、CSS、HTML 的代码压缩工具。"}),"\n",(0,i.jsxs)(n.h2,{id:"代码压缩原理",children:["代码压缩原理",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码压缩原理",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["“代码压缩”最关键的问题是：如何用“",(0,i.jsx)(n.strong,{children:"更精简"}),"”的代码表达“",(0,i.jsx)(n.strong,{children:"同一套"}),"”程序逻辑？这并不是什么黑魔法，底层逻辑简单的甚至有点粗暴，拆开来看："]}),"\n",(0,i.jsxs)(n.p,{children:["“",(0,i.jsx)(n.strong,{children:"更精简"}),"”意味着可以适当 —— 甚至完全牺牲可读性、语义、优雅度而力求用最少字符数的方式书写代码。比如说 ",(0,i.jsx)(n.code,{children:"const name = 'tecvan';"}),"，这个看起来非常简单的赋值语句就有不少可以精简的字符："]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["变量名 ",(0,i.jsx)(n.code,{children:"name"})," 语义很明确，大多数“人”看到就基本明白是干什么用的，但这对计算机并没有什么意义，我们完全可以将 ",(0,i.jsx)(n.code,{children:"name"})," 修改为 ",(0,i.jsx)(n.code,{children:"a"})," —— 从 4 个字符精简为 1 个字符，但仍保持改动前后逻辑、功能效果完全一致；"]}),"\n",(0,i.jsxs)(n.li,{children:["赋值操作符 ",(0,i.jsx)(n.code,{children:"="})," 前后都有空格，这种格式对阅读代码的“人”很友好，视觉效果非常舒适、整齐，但对计算机而言同样毫无意义，我们可以将这前后两个空格删掉 —— 精简了两个字符；"]}),"\n",(0,i.jsxs)(n.li,{children:["虽然 ",(0,i.jsx)(n.code,{children:"const"})," 与 ",(0,i.jsx)(n.code,{children:"let"})," 关键词的功能不同，但特定情况下我们同样能牺牲一部分功能性，用 ",(0,i.jsx)(n.code,{children:"let"})," 替换 ",(0,i.jsx)(n.code,{children:"const"}),"，从 5 个字符精简为 1 个字符。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["经过上面三个步骤之后，代码从 ",(0,i.jsx)(n.code,{children:"const name = 'tecvan';"})," —— 22 个字符，精简为 ",(0,i.jsx)(n.code,{children:"let a='tecvan';"})," —— 18 个字符，往大了说是节省了 ",(0,i.jsx)(n.strong,{children:"18%"})," 的代码体积。其它语言的代码压缩规则也基本都是按照上面这种套路实现的。"]}),"\n",(0,i.jsxs)(n.p,{children:["其次，“",(0,i.jsx)(n.strong,{children:"同一套"}),"”意味着修改前后必须保持一致的代码逻辑、执行流程、功能效果等，例如："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const a = 1;\nconst b = 2;\nconst c = a + b;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["代码中，",(0,i.jsx)(n.code,{children:"a/b"})," 都是字面量常量，那么整段代码完全可以精简为 ",(0,i.jsx)(n.code,{children:"const c = 3"})," ，省略掉 ",(0,i.jsx)(n.code,{children:"a/b"})," 变量的声明语句，前后还能保持功能完全一致。"]}),"\n",(0,i.jsx)(n.p,{children:"为了应对这两个挑战，很自然的我们可以先将字符串形态的代码转换为结构化、容易分析处理的 AST（抽象语法树）形态，之后在 AST 上应用上面的规则做各种语法、语义、逻辑推理与简化替换，最后按精简过的 AST 生成结果代码。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["社区曾经出现过非常非常多 JavaScript、HTML、CSS 代码压缩工具，基本上都是按照上面这种套路实现的，包括：",(0,i.jsx)(n.a,{href:"https://github.com/terser/terser",target:"_blank",rel:"noopener noreferrer",children:"Terser"}),"、",(0,i.jsx)(n.a,{href:"https://esbuild.github.io/",target:"_blank",rel:"noopener noreferrer",children:"ESBuild"}),"、",(0,i.jsx)(n.a,{href:"https://cssnano.co/",target:"_blank",rel:"noopener noreferrer",children:"CSS-Nano"}),"、",(0,i.jsx)(n.a,{href:"https://github.com/babel/minify",target:"_blank",rel:"noopener noreferrer",children:"babel-minify"}),"、",(0,i.jsx)(n.a,{href:"https://github.com/terser/html-minifier-terser",target:"_blank",rel:"noopener noreferrer",children:"htmlMinifierTerser"})," 等，幸运的是，我们可以在 Webpack 中轻松接入这些工具，实现代码压缩。"]}),"\n",(0,i.jsxs)(n.h2,{id:"使用-terserwebpackplugin-压缩-js",children:["使用 TerserWebpackPlugin 压缩 JS",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-terserwebpackplugin-压缩-js",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/terser/terser",target:"_blank",rel:"noopener noreferrer",children:"Terser"})," 是当下 ",(0,i.jsx)(n.a,{href:"https://npmtrends.com/babel-minify-vs-terser-vs-uglify-js",target:"_blank",rel:"noopener noreferrer",children:"最为流行"})," 的 ES6 代码压缩工具之一，支持 ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Dead-code_elimination",target:"_blank",rel:"noopener noreferrer",children:"Dead-Code Eliminate"}),"、删除注释、删除空格、代码合并、变量名简化等等",(0,i.jsx)(n.a,{href:"https://github.com/terser/terser#compress-options",target:"_blank",rel:"noopener noreferrer",children:"一系列"}),"代码压缩功能。Terser 的前身是大名鼎鼎的 ",(0,i.jsx)(n.a,{href:"https://github.com/mishoo/UglifyJS",target:"_blank",rel:"noopener noreferrer",children:"UglifyJS"}),"，它在 UglifyJS 基础上增加了 ES6 语法支持，并重构代码解析、压缩算法，使得执行效率与压缩率都有较大提升："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["数据来源：",(0,i.jsx)(n.a,{href:"https://github.com/babel/minify",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/babel/minify"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Webpack5.0 后默认使用 Terser 作为 JavaScript 代码压缩器，简单用法只需通过 ",(0,i.jsx)(n.code,{children:"optimization.minimize"})," 配置项开启压缩功能即可："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  //...\n  optimization: {\n    minimize: true\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["提示：使用 ",(0,i.jsx)(n.code,{children:"mode = 'production'"})," 启动生产模式构建时，默认也会开启 Terser 压缩。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Terser 支持许多压缩 ",(0,i.jsx)(n.a,{href:"https://github.com/terser/terser#compress-options",target:"_blank",rel:"noopener noreferrer",children:"配置"}),"："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dead_code"}),"：是否删除不可触达的代码 —— 也就是所谓的死代码；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"booleans_as_integers"}),"：是否将 Boolean 值字面量转换为 0、1；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"join_vars"}),"：是否合并连续的变量声明，如 ",(0,i.jsx)(n.code,{children:"var a = 1; var b = 2;"})," 合并为 ",(0,i.jsx)(n.code,{children:"var a=1,b=2;"}),"；"]}),"\n",(0,i.jsx)(n.li,{children:"等等。"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["多数情况下使用默认 Terser 配置即可，必要时也可以手动创建 ",(0,i.jsx)(n.a,{href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"terser-webpack-plugin"})," 实例并传入压缩配置实现更精细的压缩功能，例如："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const TerserPlugin = require("terser-webpack-plugin");\n\nmodule.exports = {\n  // ...\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          compress: {\n            reduce_vars: true,\n            pure_funcs: ["console.log"],\n          },\n          // ...\n        },\n      }),\n    ],\n  },\n};\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["提示：示例中的 ",(0,i.jsx)(n.code,{children:"minimize"})," 用于控制是否开启压缩，只有 ",(0,i.jsx)(n.code,{children:"minimize = true'"})," 时才会调用 ",(0,i.jsx)(n.code,{children:"minimizer"})," 声明的压缩器数组（没错，这是数组形式）执行压缩操作。"]}),"\n",(0,i.jsxs)(n.p,{children:["另外，Webpack4 默认使用 ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/uglifyjs-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"uglifyjs-webpack-plugin"})," 压缩代码，也可以通过 ",(0,i.jsx)(n.code,{children:"minimizer"})," 数组替换为 Terser 插件。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"terser-webpack-plugin"})," 是一个颇为复杂的 Webpack 插件，提供下述 ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/terser-webpack-plugin#options",target:"_blank",rel:"noopener noreferrer",children:"配置项"}),"："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"test"}),"：只有命中该配置的产物路径才会执行压缩，功能与 ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/configuration/module/#ruletest",target:"_blank",rel:"noopener noreferrer",children:"module.rules.test"})," 相似；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"include"}),"：在该范围内的产物才会执行压缩，功能与 ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/configuration/module/#ruleinclude",target:"_blank",rel:"noopener noreferrer",children:"module.rules.include"})," 相似；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"exclude"}),"：与 ",(0,i.jsx)(n.code,{children:"include"})," 相反，不在该范围内的产物才会执行压缩，功能与 ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/configuration/module/#ruleexclude",target:"_blank",rel:"noopener noreferrer",children:"module.rules.exclude"})," 相似；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parallel"}),"：是否启动并行压缩，默认值为 ",(0,i.jsx)(n.code,{children:"true"}),"，此时会按 ",(0,i.jsx)(n.code,{children:"os.cpus().length - 1"})," 启动若干进程并发执行；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minify"}),"：用于配置压缩器，支持传入自定义压缩函数，也支持 ",(0,i.jsx)(n.code,{children:"swc/esbuild/uglifyjs"})," 等值，下面我们再展开讲解；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"terserOptions"}),"：传入 ",(0,i.jsx)(n.code,{children:"minify"})," —— “压缩器”函数的配置参数；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"extractComments"}),"：是否将代码中的备注抽取为单独文件，可配合特殊备注如 ",(0,i.jsx)(n.code,{children:"@license"})," 使用。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"这些配置项总结下来有两个值得关注的逻辑："}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["可以通过 ",(0,i.jsx)(n.code,{children:"test/include/exclude"})," 过滤插件的执行范围，这个功能配合 ",(0,i.jsx)(n.code,{children:"minimizer"})," 的数组特性，可以实现针对不同产物执行不同的压缩策略，例如："]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const TerserPlugin = require("terser-webpack-plugin");\n\nmodule.exports = {\n  entry: { foo: "./src/foo.js", bar: "./src/bar.js" },\n  output: {\n    filename: "[name].js",\n    // ...\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        test: /foo\\.js$/i,\n        extractComments: "all",\n      }),\n      new TerserPlugin({\n        test: /bar\\.js/,\n        extractComments: false,\n      }),\n    ],\n  },\n};\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["提示：示例代码已上传到 ",(0,i.jsx)(n.a,{href:"https://github.com/Tecvan-fe/webpack-book-samples/blob/main/minify-terser/package.json",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["示例中，针对 ",(0,i.jsx)(n.code,{children:"foo.js"})," 产物文件会执行 ",(0,i.jsx)(n.code,{children:"exctractComments"})," 逻辑，将备注信息抽取为单独文件；而针对 ",(0,i.jsx)(n.code,{children:"bar.js"}),"，由于 ",(0,i.jsx)(n.code,{children:"extractComments = false"}),"，不单独抽取备注内容。"]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"terser-webpack-plugin"})," 插件并不只是 Terser 的简单包装，它更像是一个代码压缩功能骨架，底层还支持使用 SWC、UglifyJS、ESBuild 作为压缩器，使用时只需要通过 ",(0,i.jsx)(n.code,{children:"minify"})," 参数切换即可，例如："]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        minify: TerserPlugin.swcMinify,\n        // `terserOptions` 将被传递到 `swc` (`@swc/core`) 工具\n        // 具体配置参数可参考：https://swc.rs/docs/config-js-minify\n        terserOptions: {},\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"提示：TerserPlugin 内置如下压缩器："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TerserPlugin.terserMinify"}),"：依赖于 ",(0,i.jsx)(n.code,{children:"terser"})," 库；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TerserPlugin.uglifyJsMinify"}),"：依赖于 ",(0,i.jsx)(n.code,{children:"uglify-js"}),"，需要手动安装 ",(0,i.jsx)(n.code,{children:"yarn add -D uglify-js"}),"；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TerserPlugin.swcMinify"}),"：依赖于 ",(0,i.jsx)(n.code,{children:"@swc/core"}),"，需要手动安装 ",(0,i.jsx)(n.code,{children:"yarn add -D"})," ",(0,i.jsx)(n.code,{children:"@swc/core"}),"；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TerserPlugin.esbuildMinify"}),"：依赖于 ",(0,i.jsx)(n.code,{children:"esbuild"}),"，需要手动安装 ",(0,i.jsx)(n.code,{children:"yarn add -D esbuild"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["另外，",(0,i.jsx)(n.code,{children:"terserOptions"})," 配置也不仅仅专供 ",(0,i.jsx)(n.code,{children:"terser"})," 使用，而是会透传给具体的 ",(0,i.jsx)(n.code,{children:"minifier"}),"，因此使用不同压缩器时支持的配置选项也会不同。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"不同压缩器功能、性能差异较大，据我了解，ESBuild 与 SWC 这两个基于 Go 与 Rust 编写的压缩器性能更佳，且效果已经基本趋于稳定，虽然功能还比不上 Terser，但某些构建性能敏感场景下不失为一种不错的选择。"}),"\n",(0,i.jsxs)(n.h2,{id:"使用-cssminimizerwebpackplugin-压缩-css",children:["使用 CssMinimizerWebpackPlugin 压缩 CSS",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-cssminimizerwebpackplugin-压缩-css",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["CSS 是一种灵活多变得略显复杂的声明式语言，同样的样式效果可以被表达成非常多样的代码语句，例如一个非常典型的案例：",(0,i.jsx)(n.code,{children:"margin: 10px"}),"，可以被写成："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"margin: 10px 10px;"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"margin-left: 10px; margin-right: 10px;..."})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"这些不同的表述方式最终实现的样式效果相同，那理所当然的可以用最精简的方式压缩代码。扩展开来："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"h1::before,\nh1:before {\n  /* 下面各种备注都可以删除 */\n  /* margin 值可简写 */\n  margin: 10px 20px 10px 20px; \n  /* 颜色值也可以简写 */\n  color: #ff0000; \n  /* 删除重复属性 */\n  font-weight: 400;\n  font-weight: 400; \n  /* position 字面量值可简化为百分比 */\n  background-position: bottom right;\n  /* 渐变参数可精简 */\n  background: linear-gradient(\n    to bottom,\n    #ffe500 0%,\n    #ffe500 50%,\n    #121 50%,\n    #121 100%\n  ); \n  /* 初始值也可精简 */\n  min-width: initial;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["上述代码就有不少地方可以精简优化，使用 ",(0,i.jsx)(n.a,{href:"https://cssnano.co/",target:"_blank",rel:"noopener noreferrer",children:"cssnano"})," 压缩后大致上可简化为："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:'h1:before {\n  margin: 10px 20px;\n  color: red;\n  font-weight: 400;\n  background-position: 100% 100%;\n  quotes: "\xab" "\xbb";\n  background: linear-gradient(180deg, #ffe500, #ffe500 50%, #121 0, #121);\n  min-width: 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"从原来的 422 个字符精简为 212 个字符，接近 50%，我们日常编写的 CSS 语句也跟上述示例类似，通常都会有不少可以优化压缩的地方。"}),"\n",(0,i.jsxs)(n.p,{children:["Webpack 社区中有不少实现 CSS 代码压缩的插件，例如：",(0,i.jsx)(n.a,{href:"https://webpack.js.org/plugins/css-minimizer-webpack-plugin/",target:"_blank",rel:"noopener noreferrer",children:"css-minimizer-webpack-plugin"}),"，用法："]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"安装依赖："}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add -D css-minimizer-webpack-plugin\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"修改 Webpack 配置："}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");\nconst MiniCssExtractPlugin = require("mini-css-extract-plugin");\n\nmodule.exports = {\n  //...\n  module: {\n    rules: [\n      {\n        test: /.css$/,\n        // 注意，这里用的是 `MiniCssExtractPlugin.loader` 而不是 `style-loader`\n        use: [MiniCssExtractPlugin.loader, "css-loader"],\n      },\n    ],\n  },\n  optimization: {\n    minimize: true,\n    minimizer: [\n      // Webpack5 之后，约定使用 `\'...\'` 字面量保留默认 `minimizer` 配置\n      "...",\n      new CssMinimizerPlugin(),\n    ],\n  },\n  // 需要使用 `mini-css-extract-plugin` 将 CSS 代码抽取为单独文件\n  // 才能命中 `css-minimizer-webpack-plugin` 默认的 `test` 规则\n  plugins: [new MiniCssExtractPlugin()],\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["这里的配置逻辑，一是使用 ",(0,i.jsx)(n.code,{children:"mini-css-extract-plugin"})," 将 CSS 代码抽取为单独的 CSS 产物文件，这样才能命中 ",(0,i.jsx)(n.code,{children:"css-minimizer-webpack-plugin"})," 默认的 ",(0,i.jsx)(n.code,{children:"test"})," 逻辑；二是使用 ",(0,i.jsx)(n.code,{children:"css-minimizer-webpack-plugin"})," 压缩 CSS 代码。效果："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["提示：示例代码已上传到 ",(0,i.jsx)(n.a,{href:"https://github.com/Tecvan-fe/webpack-book-samples/blob/main/minify-css/webpack.config.js",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["与 ",(0,i.jsx)(n.code,{children:"terser-webpack-plugin"})," 类似，",(0,i.jsx)(n.code,{children:"css-minimizer-webpack-plugin"})," 也支持 ",(0,i.jsx)(n.code,{children:"test、include、exclude、minify、minimizerOptions"})," 配置，其中 ",(0,i.jsx)(n.code,{children:"minify"})," 支持："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CssMinimizerPlugin.cssnanoMinify"}),"：默认值，使用 ",(0,i.jsx)(n.a,{href:"https://cssnano.co/",target:"_blank",rel:"noopener noreferrer",children:"cssnano"})," 压缩代码，不需要额外安装依赖；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CssMinimizerPlugin.cssoMinify"}),"：使用 ",(0,i.jsx)(n.a,{href:"https://github.com/css/csso",target:"_blank",rel:"noopener noreferrer",children:"csso"})," 压缩代码，需要手动安装依赖 ",(0,i.jsx)(n.code,{children:"yarn add -D csso"}),"；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CssMinimizerPlugin.cleanCssMinify"}),"：使用 ",(0,i.jsx)(n.a,{href:"https://github.com/clean-css/clean-css",target:"_blank",rel:"noopener noreferrer",children:"clean-css"})," 压缩代码，需要手动安装依赖 ",(0,i.jsx)(n.code,{children:"yarn add -D clean-css"}),"；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CssMinimizerPlugin.esbuildMinify"}),"：使用 ",(0,i.jsx)(n.a,{href:"https://esbuild.github.io/",target:"_blank",rel:"noopener noreferrer",children:"ESBuild"})," 压缩代码，需要手动安装依赖 ",(0,i.jsx)(n.code,{children:"yarn add -D esbuild"}),"；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"CssMinimizerPlugin.parcelCssMinify"}),"：使用 ",(0,i.jsx)(n.a,{href:"https://github.com/parcel-bundler/parcel-css",target:"_blank",rel:"noopener noreferrer",children:"parcel-css"})," 压缩代码，需要手动安装依赖 ",(0,i.jsx)(n.code,{children:"yarn add -D"})," ",(0,i.jsx)(n.code,{children:"@parcel/css"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["提示：同样的，",(0,i.jsx)(n.code,{children:"minimizerOptions"})," 也是直接透传给具体 ",(0,i.jsx)(n.code,{children:"minify"}),"，具体配置选项可参考 ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/plugins/css-minimizer-webpack-plugin/#minimizeroptions",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["其中 ",(0,i.jsx)(n.code,{children:"parcel-css"})," 与 ESBuild 压缩性能相对较佳："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["但两者功能与兼容性稍弱，多数情况下推荐使用 ",(0,i.jsx)(n.code,{children:"cssnano"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"使用-htmlminifierterser-压缩-html",children:["使用 HtmlMinifierTerser 压缩 HTML",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-htmlminifierterser-压缩-html",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["现代 Web 应用大多会选择使用 React、Vue 等 MVVM 框架，这衍生出来的一个副作用是原生 HTML 的开发需求越来越少，HTML 代码占比越来越低，所以大多数现代 Web 项目中其实并不需要考虑为 HTML 配置代码压缩工作流。不过凡事都有例外，某些场景如 SSG 或官网一类偏静态的应用中就存在大量可被优化的 HTML 代码，为此社区也提供了一些相关的工程化工具，例如 ",(0,i.jsx)(n.code,{children:"html-minifier-terser"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/terser/html-minifier-terser",target:"_blank",rel:"noopener noreferrer",children:"html-minifier-terser"})," 是一个基于 JavaScript 实现的、高度可配置的 HTML 压缩器，支持一系列 ",(0,i.jsx)(n.a,{href:"https://github.com/terser/html-minifier-terser#options-quick-reference",target:"_blank",rel:"noopener noreferrer",children:"压缩特性"})," 如："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collapseWhitespace"}),"：删除节点间的空字符串，如："]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"\x3c!-- 原始代码： --\x3e\n<div> <p>    foo </p>    </div>\n\x3c!-- 经过压缩的代码： --\x3e\n<div><p>foo</p></div>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"removeComments"}),"：删除备注，如："]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"\x3c!-- 原始代码： --\x3e\n\x3c!-- some comment --\x3e<p>blah</p>\n\n\x3c!-- 经过压缩的代码： --\x3e\n<p>blah</p>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collapseBooleanAttributes"}),"：删除 HTML 的 ",(0,i.jsx)(n.a,{href:"https://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2",target:"_blank",rel:"noopener noreferrer",children:"Boolean 属性值"}),"，如："]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\x3c!-- 原始代码： --\x3e\n<input value="foo" readonly="readonly">\n\n\x3c!-- 经过压缩的代码： --\x3e\n<input value="foo" readonly>\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"等等。"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["我们可以借助 ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/plugins/html-minimizer-webpack-plugin/",target:"_blank",rel:"noopener noreferrer",children:"html-minimizer-webpack-plugin"})," 插件接入 ",(0,i.jsx)(n.code,{children:"html-minifier-terser"})," 压缩器，步骤："]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"安装依赖："}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"yarn add -D html-minimizer-webpack-plugin\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"修改 Webpack 配置，如："}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const HtmlWebpackPlugin = require("html-webpack-plugin");\nconst HtmlMinimizerPlugin = require("html-minimizer-webpack-plugin");\n\nmodule.exports = {\n  // ...\n  optimization: {\n    minimize: true,\n    minimizer: [\n      // Webpack5 之后，约定使用 `\'...\'` 字面量保留默认 `minimizer` 配置\n      "...",\n      new HtmlMinimizerPlugin({\n        minimizerOptions: {\n          // 折叠 Boolean 型属性\n          collapseBooleanAttributes: true,\n          // 使用精简 `doctype` 定义\n          useShortDoctype: true,\n          // ...\n        },\n      }),\n    ],\n  },\n  plugins: [\n    // 简单起见，这里我们使用 `html-webpack-plugin` 自动生成 HTML 演示文件\n    new HtmlWebpackPlugin({\n      templateContent: `<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">\n    <html>\n      <head>\n        <meta charset="UTF-8" />\n        <title>webpack App</title>\n      </head>\n      <body>\n        <input readonly="readonly"/>\n        \x3c!-- comments --\x3e\n        <script src="index_bundle.js"><\/script>\n      </body>\n    </html>`,\n    }),\n  ],\n};\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["提示：示例代码已上传到 ",(0,i.jsx)(n.a,{href:"https://github.com/Tecvan-fe/webpack-book-samples/blob/main/minify-html/webpack.config.js",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["这段配置的关键逻辑，一是通过 ",(0,i.jsx)(n.code,{children:"html-webpack-plugin"})," 生成 HTML 文件，这里为了演示方便特意在 HTML 模板 ",(0,i.jsx)(n.code,{children:"templateContent"})," 中插入一些可以被压缩的代码；二是通过 ",(0,i.jsx)(n.code,{children:"html-minimizer-plugin"})," 压缩 HTML 代码，效果："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["上图中左边是正常构建结果，右图是经过 ",(0,i.jsx)(n.code,{children:"html-minimizer-plugin"})," 压缩后的构建结果，可以看到如 ",(0,i.jsx)(n.code,{children:"doctype"})," 标签被删掉若干不重要的声明，文档中的备注也被删除，等等。"]}),"\n",(0,i.jsxs)(n.p,{children:["与 ",(0,i.jsx)(n.code,{children:"terser-webpack-plugin"})," 类似，",(0,i.jsx)(n.a,{href:"https://webpack.js.org/plugins/html-minimizer-webpack-plugin/",target:"_blank",rel:"noopener noreferrer",children:"html-minimizer-webpack-plugin"})," 也支持 ",(0,i.jsx)(n.code,{children:"include、test、minimizerOptions"})," 等等一系列配置，此处不再赘述。"]}),"\n",(0,i.jsxs)(n.p,{children:["注意，",(0,i.jsx)(n.a,{href:"https://github.com/terser/html-minifier-terser",target:"_blank",rel:"noopener noreferrer",children:"html-minifier-terser"})," 提供的默认配置有点过于保守，例如 ",(0,i.jsx)(n.code,{children:"removeComments"})," —— 用于移除代码备注的配置，或者 ",(0,i.jsx)(n.code,{children:"useShortDoctype"})," 用于简化 ",(0,i.jsx)(n.code,{children:"<doctype>"})," 标签的配置，默认竟然都是 false，这放在当下浏览器功能已经非常强劲，兼容性问题已经被大大抹平的背景下，有点大可不必了。因此，建议你使用时先到 ",(0,i.jsx)(n.a,{href:"https://github.com/terser/html-minifier-terser#options-quick-reference",target:"_blank",rel:"noopener noreferrer",children:"官网"})," 仔细了解各项配置，尽可能开启更多压缩功能。"]}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"综上，代码压缩的重点就在于“保持功能性”的前提下尽可能“删除”不必要的字符，原理虽不复杂但必须对语言特性有比较深的理解才能实现，所幸社区已经提供了各种各样的压缩工具，我们只需要简单配置就能轻松接入。"}),"\n",(0,i.jsxs)(n.p,{children:["在 Webpack 中需要使用 ",(0,i.jsx)(n.code,{children:"optimization.minimizer"})," 数组接入代码压缩插件，比较常用的插件有："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"terser-webpack-plugin"}),"：用于压缩 ES6 代码的插件；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"css-minimizer-webpack-plugin"}),"：用于压缩 CSS 代码的插件；"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"html-minifier-terser"}),"：用于压缩 HTML 代码的插件。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["这些插件用法非常相似，都支持 ",(0,i.jsx)(n.code,{children:"include/test/exclude"})," 配置项，用于控制压缩功能的应用范围；也都支持 ",(0,i.jsx)(n.code,{children:"minify"})," 配置项，用于切换压缩器，借助这个配置我们可以使用性能更佳的工具，如 ESBuild 执行压缩。"]}),"\n",(0,i.jsxs)(n.h2,{id:"思考题",children:["思考题",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"代码压缩与代码混淆是什么关系？分别用于解决什么问题？压缩能代码混淆效果吗？"})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}let p=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["Webpack5%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F17.%E4%B8%8D%E6%AD%A2%20Terser%EF%BC%9A%E6%8F%AD%E7%A7%98%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9%E7%9A%84%E9%97%A8%E9%97%A8%E9%81%93%E9%81%93.md"]={toc:[{text:"代码压缩原理",id:"代码压缩原理",depth:2},{text:"使用 TerserWebpackPlugin 压缩 JS",id:"使用-terserwebpackplugin-压缩-js",depth:2},{text:"使用 CssMinimizerWebpackPlugin 压缩 CSS",id:"使用-cssminimizerwebpackplugin-压缩-css",depth:2},{text:"使用 HtmlMinifierTerser 压缩 HTML",id:"使用-htmlminifierterser-压缩-html",depth:2},{text:"总结",id:"总结",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"17.不止 Terser：揭秘代码压缩的门门道道",headingTitle:"17.不止 Terser：揭秘代码压缩的门门道道",frontmatter:{}}}}]);