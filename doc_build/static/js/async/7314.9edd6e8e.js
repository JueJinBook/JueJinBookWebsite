"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["7314"],{754956:function(n,e,a){n.exports=a.p+"static/image/f66a57a27cd1490af21916a3fcee9361.e32eba78.webp"},429348:function(n,e,a){a.r(e),a.d(e,{default:()=>$});var i=a(552676),s=a(740453);let c=a.p+"static/image/82009e3b79c964db91cbfb3cc6e5784c.289fc742.webp",r=a.p+"static/image/7d667c28db9d77f24cbcbb91b426dc71.1ad7836b.webp",d=a.p+"static/image/a48174cc39756ea813fba579744f78c6.db52edd0.webp",t=a.p+"static/image/2f6c3dac7149d01f7015a2bad5a052ae.ea534608.webp",l=a.p+"static/image/8d08b7e093e5a9165a683af2ff234a75.ce902de5.webp",p=a.p+"static/image/5814ea80e3361648752f683ee048f5ab.6c431c2c.webp",h=a.p+"static/image/e5045f8732efe32fc3ad06bfe8a85e63.ffa704cf.webp",x=a.p+"static/image/47df1be97eb6174e12561d94d808cac7.6b759bbd.webp",m=a.p+"static/image/130501bcbf6b33a1d63c378d92c66098.5a8a1210.webp",o=a.p+"static/image/a835e103d2dcf66531ec5a0f78928241.51912c17.webp",j=a.p+"static/image/e39dfde89e71668f427d3b26a9c25b81.945d44d4.gif",g=a.p+"static/image/323ee4128947778951e27d35c5ebcb67.8e42da13.webp",f=a.p+"static/image/45626289f8ef6e168f1c7f9077a72f34.3ec26a37.webp",u=a.p+"static/image/5cd30d21900d1413f25be3fabf65d58f.fd12ed45.webp",b=a.p+"static/image/4bc64b213fe18fcd8cc2d111adee2b7a.6a5bad8e.webp",w=a.p+"static/image/876bdad9662abfa37581cdb3aa03d2cb.b9df6424.webp",y=a.p+"static/image/b688b3d28c208f09ef1030e1885fdc30.83ed6a3e.webp",v=a.p+"static/image/bc673f04d56144bd188790dfd1d35d63.bac223c0.webp",q=a.p+"static/image/4e9ca0fd22067f9adff7d3a1db77a10a.e953acab.webp",N=a.p+"static/image/b513c02830a082faf36bbc6cebecb91f.e91c0e08.webp",_=a.p+"static/image/92e7a753dd3ffabee9e139a65f425b7b.4297fea3.webp",k=a.p+"static/image/bec7d5deff09ea053cfa5499c4159b55.7b920dcc.webp",C=a.p+"static/image/28fc857d015d0bfe92d4467fe533a12c.38b603d5.webp",U=a.p+"static/image/800a29443549e31923736ed0c7b0231e.ae64e0b4.webp",M=a.p+"static/image/89a7fb23e79736bf8e2b81821548ddd7.e84aaa1b.webp",P=a.p+"static/image/a705d2903cdbb830d5869af09529662f.9832d59c.webp",A=a.p+"static/image/223b94f8f3e6975f71ef5f41b6cae52d.a627da29.webp",E=a.p+"static/image/fde77f3a77379463f0ed60177d5819aa.cd30ddc9.webp",B=a.p+"static/image/15b5ea197fe64262020ab806c8c1c0a2.43971a6d.webp",T=a.p+"static/image/d31a80e9a4b9d001222867fff7725aa6.3fe776ed.webp",F=a.p+"static/image/7aade99aa8620935a4e822f4adbfa873.c7931332.webp",R=a.p+"static/image/e77be6c1f7987fb41dd5dd4a0158f38a.8cca2166.webp",S=a.p+"static/image/5beaa220207d824bda4815eef345a437.6b08a55f.webp",O=a.p+"static/image/3baad037fd13c1917d5dbecfb0804ab8.2a5598aa.webp",D=a.p+"static/image/13df5c92f3909afba00a92616edddb23.338e6877.webp",I=a.p+"static/image/8903fcd82769a37465d1e4598163d086.099555b4.webp",G=a.p+"static/image/1575837a8f0b5d7686fc6098ddca78c6.c755d315.webp",L=a.p+"static/image/bf2b3e2e541d194e732d1508fb98e1a0.a956101d.webp",Q=a.p+"static/image/d0c8cfac2050082ab3c2011b751820e8.c180d540.webp",W=a.p+"static/image/b9d789b344a74a0a9d8ef2b21a65b8f3.95f3582d.webp",z=a.p+"static/image/a9d63254076d80666db66f84d3ca8ed7.21d517f3.webp",H=a.p+"static/image/34a22c6a1eef0199b787506ec0c520a8.ee61974c.webp";var J=a(754956);let K=a.p+"static/image/d4adfcef8f1170f49eb304dc324b85ab.6196dd32.webp",V=a.p+"static/image/2277c46ac2492c8a51cde722933f5c75.9359c3a2.webp",X=a.p+"static/image/f1e2765ad1fcfa5fd199a3e8803d4777.f3905b95.webp";function Y(n){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"149-primsa-client-单表-crud-的全部-api",children:["149. Primsa Client 单表 CRUD 的全部 api",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#149-primsa-client-单表-crud-的全部-api",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"我们学了 Prisma 的命令、schema 的语法，这节来过一遍 Prisma Client 的 api。"}),"\n",(0,i.jsx)(e.p,{children:"这节只涉及单个表的 CRUD 的 api。"}),"\n",(0,i.jsx)(e.p,{children:"创建个新项目："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"mkdir prisma-client-api\ncd prisma-client-api\nnpm init -y\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:X,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"进入项目，执行 init 命令："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx prisma init\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:V,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"生成了 .env 和 schema 文件："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:K,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"然后改下 .env 文件的数据库连接信息："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:J,alt:""})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'DATABASE_URL="mysql://root:guang@localhost:3306/prisma_test"\n'})}),"\n",(0,i.jsx)(e.p,{children:"改一下 datasource 的 provider 为 mysql，并且添加一个 model"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:H,alt:""})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-prisma",children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\nmodel Aaa {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"然后再添加一个 generator，生成 docs，并且修改下生成代码的位置："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:z,alt:""})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'generator docs {\n  provider = "node node_modules/prisma-docs-generator"\n  output   = "../generated/docs"\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"安装用到的 generator 包："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm install --save-dev prisma-docs-generator\n"})}),"\n",(0,i.jsx)(e.p,{children:"之后执行 migrate reset 重置下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx prisma migrate reset\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:W,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"之后用 migrate dev 创建新的迁移："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx prisma migrate dev --name aaa\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:Q,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"可以看到，生成了 client 代码、docs 文档，还有 sql 文件。"}),"\n",(0,i.jsx)(e.p,{children:"数据库中也多了这个表："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:L,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"然后我们写下初始化数据的代码："}),"\n",(0,i.jsx)(e.p,{children:"首先安装 ts、ts-node 包："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm install typescript ts-node @types/node --save-dev\n"})}),"\n",(0,i.jsx)(e.p,{children:"创建 tsconfig.json"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx tsc --init\n"})}),"\n",(0,i.jsx)(e.p,{children:"把注释删掉，保留这些配置就行："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "es2016",\n    "module": "commonjs",\n    "types": ["node"],\n    "esModuleInterop": true,\n    "forceConsistentCasingInFileNames": true,\n    "strict": true,\n    "skipLibCheck": true\n  }\n}\n\n'})}),"\n",(0,i.jsx)(e.p,{children:"在 package.json 配置下 seed 命令："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'"prisma": {\n    "seed": "npx ts-node prisma/seed.ts"\n},\n'})}),"\n",(0,i.jsx)(e.p,{children:"然后写下 prisma/seed.ts"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'stdout',\n      level: 'query'\n    },\n  ],\n});\n\nasync function main() {\n    await prisma.aaa.createMany({\n        data: [\n            {\n                name: 'aaa',\n                email: 'aaa@xx.com'\n            },\n            {\n                name: 'bbb',\n                email: 'bbb@xx.com'\n            },\n            {\n                name: 'ccc',\n                email: 'ccc@xx.com'\n            },\n            {\n                name: 'ddd',\n                email: 'ddd@xx.com'\n            },\n            {\n                name: 'eee',\n                email: 'eee@xx.com'\n            },\n        ]\n    });\n    console.log('done');\n}\n\nmain();\n"})}),"\n",(0,i.jsx)(e.p,{children:"很容易看懂，就是插入了 5 条记录。"}),"\n",(0,i.jsx)(e.p,{children:"执行 seed："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx prisma db seed\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:G,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"打印了插入数据的 sql。"}),"\n",(0,i.jsx)(e.p,{children:"去 mysql workbench 里看下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:I,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"插入成功了。"}),"\n",(0,i.jsx)(e.p,{children:"然后来写下 client 的 crud 代码。"}),"\n",(0,i.jsx)(e.p,{children:"创建 src/index.ts"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'stdout',\n      level: 'query'\n    },\n  ],\n});\n\nasync function main() {\n    \n}\n\nmain();\n"})}),"\n",(0,i.jsx)(e.p,{children:"client 都有哪些方法呢？"}),"\n",(0,i.jsx)(e.p,{children:"我们不是还用 docs generator 生成了文档么？看下那个就知道了。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx http-server ./generated/docs\n"})}),"\n",(0,i.jsx)(e.p,{children:"跑一个静态服务："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:D,alt:""})}),"\n",(0,i.jsxs)(e.p,{children:["访问 ",(0,i.jsx)(e.a,{href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080"})," 可以看到 Aaa 的字段和方法，一共 9 个方法："]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:O,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"我们依次试一下："}),"\n",(0,i.jsxs)(e.h2,{id:"findunique",children:["findUnique",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#findunique",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"findUnique 是用来查找唯一的记录的，可以根据主键或者有唯一索引的列来查："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'stdout',\n      level: 'query'\n    },\n  ],\n});\n\nasync function test1() {\n    const aaa = await prisma.aaa.findUnique({\n        where: {\n            id: 1\n        }\n    });\n    console.log(aaa);\n\n    const bbb = await prisma.aaa.findUnique({\n        where: {\n            email: 'bbb@xx.com'\n        }\n    });\n    console.log(bbb);\n}\n\ntest1();\n"})}),"\n",(0,i.jsx)(e.p,{children:"所以，这里的 id、email 都可以："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"跑一下试试："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx ts-node ./src/index.ts\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"但是如果指定 name 就不行了："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:F,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"因为通过 name 来查并不能保证记录唯一。"}),"\n",(0,i.jsx)(e.p,{children:"你还可以通过 select 指定返回的列："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test1() {\n    const aaa = await prisma.aaa.findUnique({\n        where: {\n            id: 1\n        }\n    });\n    console.log(aaa);\n\n    const bbb = await prisma.aaa.findUnique({\n        where: {\n            email: 'bbb@xx.com'\n        },\n        select: {\n            id: true,\n            email: true\n        }\n    });\n    console.log(bbb);\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"比如我通过 select 指定返回 id、email："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"那结果里就只包含这两个字段。"}),"\n",(0,i.jsxs)(e.h2,{id:"finduniqueorthrow",children:["findUniqueOrThrow",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#finduniqueorthrow",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"findUniqueOrThrow 和 findUnique 的区别是它如果没找到对应的记录会抛异常，而 findUnique 会返回 null。"}),"\n",(0,i.jsx)(e.p,{children:"先试下 findUnique："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'stdout',\n      level: 'query'\n    },\n  ],\n});\n\n\nasync function test2() {\n    const aaa = await prisma.aaa.findUnique({\n        where: {\n            id: 10\n        }\n    });\n    console.log(aaa);\n}\n\ntest2();\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"再换成 findUniqueOrThrow 试试："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'stdout',\n      level: 'query'\n    },\n  ],\n});\n\nasync function test2() {\n    const aaa = await prisma.aaa.findUniqueOrThrow({\n        where: {\n            id: 10\n        }\n    });\n    console.log(aaa);\n}\n\ntest2();\n"})}),"\n",(0,i.jsx)(e.p,{children:"如果没找到会抛异常："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsxs)(e.h2,{id:"findmany",children:["findMany",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#findmany",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"findMany 很明显是查找多条记录的。"}),"\n",(0,i.jsx)(e.p,{children:"比如查找 email 包含 xx 的记录，按照 name 降序排列："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'stdout',\n      level: 'query'\n    },\n  ],\n});\n\nasync function test3() {\n    const res = await prisma.aaa.findMany({\n        where: {\n            email: {\n                contains: 'xx'\n            }\n        },\n        orderBy: {\n            name: 'desc'\n        }\n    });\n    console.log(res);\n}\n\ntest3();\n\n"})}),"\n",(0,i.jsx)(e.p,{children:"跑一下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx ts-node ./src/index.ts\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"然后再加个分页，取从第 2 条开始的 3 条。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test3() {\n    const res = await prisma.aaa.findMany({\n        where: {\n            email: {\n                contains: 'xx'\n            }\n        },\n        orderBy: {\n            name: 'desc'\n        },\n        skip: 2,\n        take: 3\n    });\n    console.log(res);\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"下标是从 0 开始的，所以是这三条："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:P,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"当然，你可以再加上 select 指定返回的字段："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test3() {\n    const res = await prisma.aaa.findMany({\n        where: {\n            email: {\n                contains: 'xx'\n            }\n        },\n        select: {\n            id: true,\n            email: true,\n        },\n        orderBy: {\n            name: 'desc'\n        },\n        skip: 2,\n        take: 3\n    });\n    console.log(res);\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:M,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"你会发现熟练 sql 之后，这些 api 用起来都很自然，过一遍就会了。"}),"\n",(0,i.jsxs)(e.h2,{id:"findfirst",children:["findFirst",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#findfirst",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"findFirst 和 findMany 的唯一区别是，这个返回第一条记录。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async  function test4() {\n    const res = await prisma.aaa.findFirst({\n        where: {\n            email: {\n                contains: 'xx'\n            }\n        },\n        select: {\n            id: true,\n            email: true,\n        },\n        orderBy: {\n            name: 'desc'\n        },\n        skip: 2,\n        take: 3\n    });\n    console.log(res);\n}\ntest4();\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:U,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"此外，where 条件这里可以指定的更细致："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"contains 是包含，endsWith 是以什么结尾"}),"\n",(0,i.jsx)(e.p,{children:"gt 是 greater than 大于，lte 是 less than or equal 大于等于"}),"\n",(0,i.jsx)(e.p,{children:"这些过滤条件都很容易理解，就不展开了。"}),"\n",(0,i.jsx)(e.p,{children:"此外，还有 findFirstOrThrow 方法，那个也是如果没找到，抛异常，参数和 FindFirst 一样。"}),"\n",(0,i.jsxs)(e.h2,{id:"create",children:["create",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#create",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"这个我们用过多次了，用来创建记录："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async  function test5() {\n    const res = await prisma.aaa.create({\n        data: {\n            name: 'kk',\n            email: 'kk@xx.com'\n        },\n        select: {\n            email: true\n        }\n    });\n    console.log(res);\n}\ntest5();\n"})}),"\n",(0,i.jsx)(e.p,{children:"它同样也可以通过 select 指定插入之后再查询出来的字段。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"createMany 我们用过，这里就不测了："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsxs)(e.h2,{id:"update",children:["update",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#update",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"update 明显是用来更新的。"}),"\n",(0,i.jsx)(e.p,{children:"它可以指定 where 条件，指定 data，还可以指定 select 出的字段："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test6() {\n    const res = await prisma.aaa.update({\n        where: { id: 3 },\n        data: { email: '3333@xx.com' },\n        select: {\n            id: true,\n            email: true\n        }\n    });\n    console.log(res);\n}\n\ntest6();\n"})}),"\n",(0,i.jsx)(e.p,{children:"跑一下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx ts-node ./src/index.ts\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:N,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"可以看到，打印了 3 条 sql："}),"\n",(0,i.jsx)(e.p,{children:"首先根据 where 条件查询出这条记录，然后 update，之后再 select 查询出更新后的记录。"}),"\n",(0,i.jsx)(e.p,{children:"updateMany 自然是更新多条记录。"}),"\n",(0,i.jsxs)(e.p,{children:["比如你想更新所有邮箱包含 xx.com 的记录为 ",(0,i.jsx)(e.a,{href:"mailto:666@xx.com",children:"666@xx.com"})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:q,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"用 update 会报错，它只是用来更新单条记录的，需要指定 id 或者有唯一索引的列。"}),"\n",(0,i.jsx)(e.p,{children:"这时候改成 udpateMany 就可以了。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test7() {\n    const res = await prisma.aaa.updateMany({\n        where: { \n            email: {\n                contains: 'xx.com'\n            } \n        },\n        data: { name: '666' },\n    });\n    console.log(res);\n}\n\ntest7();\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"在 mysql workbench 里可以看到，确实改了："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsxs)(e.h2,{id:"upsert",children:["upsert",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#upsert",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"upsert 是 update 和 insert 的意思。"}),"\n",(0,i.jsx)(e.p,{children:"当传入的 id 有对应记录的时候，会更新，否则，会创建记录。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test8() {\n    const res = await prisma.aaa.upsert({\n        where: { id: 11 },\n        update: { email: 'yy@xx.com' },\n        create: { \n            id:  11,\n            name: 'xxx',\n            email: 'xxx@xx.com'\n        },\n    });\n    console.log(res);\n}\n\ntest8();\n"})}),"\n",(0,i.jsx)(e.p,{children:"第一次跑执行的是 insert："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"第二次跑就是 update 了："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsxs)(e.h2,{id:"delete",children:["delete",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#delete",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"delete 就比较简单了，我们和 deleteMany 一起测试下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test9() {\n    await prisma.aaa.delete({\n        where: { id: 1 },\n    });\n\n    await prisma.aaa.deleteMany({\n        where: {\n            id: {\n                in: [11, 2]\n            }\n        }\n    });\n}\n\ntest9();\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"可以看到有两条 delete 语句。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"可以看到 3 条记录都被删除了。"}),"\n",(0,i.jsxs)(e.h2,{id:"count",children:["count",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#count",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"count 其实和 findMany 参数一样，只不过这里不返回具体记录，而是返回记录的条数。"}),"\n",(0,i.jsx)(e.p,{children:"比如 findMany 是这样的："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test10() {\n    const res = await prisma.aaa.findMany({\n        where: {\n            email: {\n                contains: 'xx'\n            }\n        },\n        orderBy: {\n            name: 'desc'\n        },\n        skip: 2,\n        take: 3\n    });\n    console.log(res);\n}\ntest10();\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"把 findMany 改为 count 就是这样了："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test10() {\n    const res = await prisma.aaa.count({\n        where: {\n            email: {\n                contains: 'xx'\n            }\n        },\n        orderBy: {\n            name: 'desc'\n        },\n        skip: 2,\n        take: 3\n    });\n    console.log(res);\n}\ntest10();\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsxs)(e.h2,{id:"aggregate",children:["aggregate",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#aggregate",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"aggregate 是统计相关的。"}),"\n",(0,i.jsx)(e.p,{children:"它除了 where、orderBy、skip、take 这些参数外，还可以指定 _count、_avg、_sum、_min、_max\n这些。"}),"\n",(0,i.jsx)(e.p,{children:"不过我们现在的表里没有数字相关的列。"}),"\n",(0,i.jsx)(e.p,{children:"改一下 model："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"model Aaa {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  age Int       @default(0)\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"然后创建一个新的 migration："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npx prisma migrate dev --name bbb\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"对应的 sql 如下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"然后我们用代码改一下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test11() {\n    await prisma.aaa.update({\n        where: {\n            id: 3\n        },\n        data: {\n            age: 3\n        }\n    });\n\n    await prisma.aaa.update({\n        where: {\n            id: 5\n        },\n        data: {\n            age: 5\n        }\n    });\n}\ntest11();\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"在 mysql workbench 里刷新下，可以看到确实改了："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"接下来就可以测试 aggregate 方法了："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test12() {\n    const res = await prisma.aaa.aggregate({\n        where: {\n            email: {\n                contains: 'xx.com'\n            }\n        },\n        _count: {\n            _all: true,\n        },\n        _max: {\n            age: true\n        },\n        _min: {\n            age: true\n        },\n        _avg: {\n            age: true\n        }\n    });\n    console.log(res);\n}\ntest12();\n"})}),"\n",(0,i.jsx)(e.p,{children:"跑一下："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"可以看到返回的最大值、最小值、计数、平均值，都是对的。"}),"\n",(0,i.jsxs)(e.h2,{id:"groupby",children:["groupBy",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#groupby",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"最后还有个 groupBy 方法，大家有 sql 基础也很容易搞懂，这个就是分组的。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"async function test13() {\n    const res = await prisma.aaa.groupBy({\n        by: ['email'],\n        _count: {\n          _all: true\n        },\n        _sum: {\n          age: true,\n        },\n        having: {\n          age: {\n            _avg: {\n              gt: 2,\n            }\n          },\n        },\n    })\n    console.log(res);\n}\n\ntest13();\n\n"})}),"\n",(0,i.jsx)(e.p,{children:"就是按照 email 分组，过滤出平均年龄大于 2 的分组，计算年龄总和返回。"}),"\n",(0,i.jsxs)(e.p,{children:["结果如下：\n",(0,i.jsx)("img",{src:r,alt:""})]}),"\n",(0,i.jsx)(e.p,{children:"因为 age 大于 2 的就 2 条，然后算平均值、计数，就是上面的结果了："}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"这样，我们就把所有 Prisma Client 的 api 过了一遍。"}),"\n",(0,i.jsxs)(e.p,{children:["案例代码在",(0,i.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/prisma-client-api",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,i.jsxs)(e.h2,{id:"总结",children:["总结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"这节我们过了一遍 Prisma Client 的单个表 CRUD 的 api。"}),"\n",(0,i.jsx)(e.p,{children:"分别包括 create、crateMany、update、updateMany、delete、deleteMany、findMany、findFirst、findFirstOrThrow、findUnique、findUniqueOrThrow。"}),"\n",(0,i.jsx)(e.p,{children:"以及 count、aggregate、groupBy 这些统计相关的。"}),"\n",(0,i.jsx)(e.p,{children:"其实有 sql 的基础的话，学习这些 api 很容易，过一遍就会了。"})]})}function Z(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(Y,{...n})}):Y(n)}let $=Z;Z.__RSPRESS_PAGE_META={},Z.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F149.%20Primsa%20Client%20%E5%8D%95%E8%A1%A8%20CRUD%20%E7%9A%84%E5%85%A8%E9%83%A8%20api.md"]={toc:[{text:"findUnique",id:"findunique",depth:2},{text:"findUniqueOrThrow",id:"finduniqueorthrow",depth:2},{text:"findMany",id:"findmany",depth:2},{text:"findFirst",id:"findfirst",depth:2},{text:"create",id:"create",depth:2},{text:"update",id:"update",depth:2},{text:"upsert",id:"upsert",depth:2},{text:"delete",id:"delete",depth:2},{text:"count",id:"count",depth:2},{text:"aggregate",id:"aggregate",depth:2},{text:"groupBy",id:"groupby",depth:2},{text:"总结",id:"总结",depth:2}],title:"149. Primsa Client 单表 CRUD 的全部 api",headingTitle:"149. Primsa Client 单表 CRUD 的全部 api",frontmatter:{}}}}]);