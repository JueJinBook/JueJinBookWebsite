"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["16685"],{406157:function(e,n,t){t.r(n),t.d(n,{default:()=>S});var s=t(552676),r=t(740453);let i=t.p+"static/image/27429520942744a1203288be2a962134.f18e1746.webp",c=t.p+"static/image/71c94f77d5291010e572713e0c3a2a0b.935dd60d.webp",p=t.p+"static/image/ffb671e12f9f7d93c644b97fd1f2e04e.78281fe6.webp",a=t.p+"static/image/fe5e53b05a2e3c222f35bc5653adbabf.f80a7ad0.webp",o=t.p+"static/image/54630b0437cfca514653683644511d9c.51967f07.webp",l=t.p+"static/image/a4da93c58126a0cd16d9d3539c1ad996.518561ff.webp",d=t.p+"static/image/f5c566e4382f8de27688d78bab5d77c7.3634168e.webp",h=t.p+"static/image/d7182eff7a2564995ea37dee8c36759b.d3346a66.webp",x=t.p+"static/image/093bf5a06a95fc3e6ef2a8b02b34f419.35281228.webp",j=t.p+"static/image/50bd14b1e08801b50fb4a6686e14acc3.a6174b1c.webp",g=t.p+"static/image/d635c301ef1747420965c1a761659dcb.b4cd1280.webp",m=t.p+"static/image/8ceedb2c9dd5ac71526b4c92168a0139.aeadcc79.webp",b=t.p+"static/image/c6e6e12d591eeda02613a791e004e177.1be05bb8.webp",u=t.p+"static/image/580cb2c6554edc3830f9b30603cb6bb0.009a1ac6.webp",f=t.p+"static/image/a765902ad3ffea26e1bdd3708a372ca2.2cbdac49.webp",w=t.p+"static/image/674a64947640f47a160333dbc9c89ba9.a1bc7bed.webp",v=t.p+"static/image/003703ab29ad0575955cc84845333f80.b046e09b.webp",R=t.p+"static/image/c548d0341e98581896000d82290cfee6.d7fe545c.webp",$=t.p+"static/image/4f6fd097b6be06bb9e5f3c666cf54c61.b6d9dc5c.webp",q=t.p+"static/image/d5455bdf053271ac847cd90d07aaf2c9.364712f4.webp",I=t.p+"static/image/3b931d44b7bb5d50529f14cd08ee954c.66d41d33.webp",C=t.p+"static/image/41fc12247b70804310d6ff2335b2938a.b02cb625.webp",E=t.p+"static/image/e19b284152c812478ef845c4623c0506.529154eb.webp";function A(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"95-如何记录请求日志",children:["95. 如何记录请求日志",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#95-如何记录请求日志",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Nest 服务会不断处理用户用户的请求，如果我们想记录下每次请求的日志呢？"}),"\n",(0,s.jsx)(n.p,{children:"可以通过 interceptor 来做。"}),"\n",(0,s.jsx)(n.p,{children:"我们写一下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest new request-log\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"进入项目，创建个 interceptor："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g interceptor request-log --no-spec --flat\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"打印下日志："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Request } from 'express';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class RequestLogInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(RequestLogInterceptor.name);\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler<any>,\n  ) {\n    const request = context.switchToHttp().getRequest<Request>();\n    const response = context.switchToHttp().getResponse<Response>();\n\n    const userAgent = request.headers['user-agent'];\n\n    const { ip, method, path } = request;\n\n    this.logger.debug(\n      `${method} ${path} ${ip} ${userAgent}: ${\n        context.getClass().name\n      } ${\n        context.getHandler().name\n      } invoked...`,\n    );\n\n    const now = Date.now();\n\n    return next.handle().pipe(\n      tap((res) => {\n        this.logger.debug(\n          `${method} ${path} ${ip} ${userAgent}: ${response.statusCode}: ${Date.now() - now}ms`,\n        );\n        this.logger.debug(`Response: ${JSON.stringify(res)}`);\n      }),\n    );\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里用 nest 的 Logger 来打印日志，可以打印一样的格式。"}),"\n",(0,s.jsx)(n.p,{children:"打印下 method、path、ip、user agent，调用的目标 class、handler 等信息。"}),"\n",(0,s.jsx)(n.p,{children:"然后记录下响应的状态码和请求时间还有响应内容。"}),"\n",(0,s.jsx)(n.p,{children:"全局启用这个 interceptor："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { RequestLogInterceptor } from './request-log.interceptor';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: RequestLogInterceptor\n    }\n  ],\n})\nexport class AppModule {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"浏览器访问下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:$,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，打印了请求的信息，目标 class、handler，响应的内容。"}),"\n",(0,s.jsx)(n.p,{children:"但其实这个 ip 是有问题的："}),"\n",(0,s.jsx)(n.p,{children:"如果客户端直接请求 Nest 服务，那这个 ip 是准的，但如果中间经过了 nginx 等服务器的转发，那拿到的 ip 就是 nginx 服务器的 ip 了。"}),"\n",(0,s.jsx)(n.p,{children:"这时候要取 X-Forwarded-For 这个 header，它记录着转发的客户端 ip。"}),"\n",(0,s.jsx)(n.p,{children:"当然，这种事情不用自己做，有专门的库 request-ip："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"安装下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save request-ip\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后把打印的 ip 换一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"换成 X-Forwarded-For 的客户端 ip 或者是 request.ip。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Request } from 'express';\nimport { Observable, tap } from 'rxjs';\nimport * as requestIp from 'request-ip';\n\n@Injectable()\nexport class RequestLogInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(RequestLogInterceptor.name);\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler<any>,\n  ) {\n    const request = context.switchToHttp().getRequest<Request>();\n    const response = context.switchToHttp().getResponse<Response>();\n\n    const userAgent = request.headers['user-agent'];\n\n    const { ip, method, path } = request;\n\n    const clientIp = requestIp.getClientIp(ip) || ip;\n\n    this.logger.debug(\n      `${method} ${path} ${clientIp} ${userAgent}: ${\n        context.getClass().name\n      } ${\n        context.getHandler().name\n      } invoked...`,\n    );\n\n    const now = Date.now();\n\n    return next.handle().pipe(\n      tap((res) => {\n        this.logger.debug(\n          `${method} ${path} ${clientIp} ${userAgent}: ${response.statusCode}: ${Date.now() - now}ms`,\n        );\n        this.logger.debug(`Response: ${JSON.stringify(res)}`);\n      }),\n    );\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"访问下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"因为我们本地访问用 localhost 是拿不到真实 ip 的。"}),"\n",(0,s.jsx)(n.p,{children:"你可以查一下本地 ip，用 ip 访问："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这里的 ::ffff 是 ipv6 地址的意思："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样部署到线上之后就能拿到真实地址了。"}),"\n",(0,s.jsx)(n.p,{children:"那如果想拿到 ip 地址对应的城市呢？"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"很多系统会做登录日志，每次登录的时候记录登录时的 ip 和对应的城市信息到数据库里。"}),"\n",(0,s.jsx)(n.p,{children:"如何根据 ip 拿到城市信息呢？"}),"\n",(0,s.jsx)(n.p,{children:"其实可以通过一些在线的免费接口："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://whois.pconline.com.cn/ipJson.jsp?ip=221.237.121.165&json=true",target:"_blank",rel:"noopener noreferrer",children:"https://whois.pconline.com.cn/ipJson.jsp?ip=221.237.121.165&json=true"})}),"\n",(0,s.jsx)(n.p,{children:"这个就是用于查询 IP 对应的城市的。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"请求三方服务用 axios 的包，"}),"\n",(0,s.jsx)(n.p,{children:"安装下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save @nestjs/axios axios\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 AppModule 里引入下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后在 interceptor 里注入 HttpService 来发请求："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"注入 HttpService，封装个 ipToCity 方法来查询，在 intercept 方法里调用下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { CallHandler, ExecutionContext, Inject, Injectable, Logger, NestInterceptor } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Request } from 'express';\nimport { Observable, tap } from 'rxjs';\nimport * as requestIp from 'request-ip';\nimport { HttpService } from '@nestjs/axios';\n\n@Injectable()\nexport class RequestLogInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(RequestLogInterceptor.name);\n\n  @Inject(HttpService)\n  private httpService: HttpService;\n\n  async ipToCity(ip: string) {\n    const response = await this.httpService.axiosRef(`https://whois.pconline.com.cn/ipJson.jsp?ip=${ip}&json=true`);\n    return response.data.addr;\n  }\n\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler<any>,\n  ) {\n    const request = context.switchToHttp().getRequest<Request>();\n    const response = context.switchToHttp().getResponse<Response>();\n\n    console.log(await this.ipToCity('221.237.121.165'))\n\n    const userAgent = request.headers['user-agent'];\n\n    const { ip, method, path } = request;\n\n    const clientIp = requestIp.getClientIp(ip) || ip;\n\n    this.logger.debug(\n      `${method} ${path} ${clientIp} ${userAgent}: ${\n        context.getClass().name\n      } ${\n        context.getHandler().name\n      } invoked...`,\n    );\n\n    const now = Date.now();\n\n    return next.handle().pipe(\n      tap((res) => {\n        this.logger.debug(\n          `${method} ${path} ${clientIp} ${userAgent}: ${response.statusCode}: ${Date.now() - now}ms`,\n        );\n        this.logger.debug(`Response: ${JSON.stringify(res)}`);\n      }),\n    );\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"直接用 httpService 的方法是被包装过后的，返回值是 rxjs 的 Observable，需要用 firstValueFrom 的操作符转为 promise："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"如果想用原生 axios 对象，可以直接调用 this.httpService.axiosRef.xxx，这样返回的就是 promise。"}),"\n",(0,s.jsx)(n.p,{children:"可以看到，返回的数据是没问题的，但是字符集不对："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"接口返回的字符集是 gbk，而我们用的是 utf-8，所以需要转换一下。"}),"\n",(0,s.jsx)(n.p,{children:"用 iconv-lite 这个包："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"它就是用来转换字符集的。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save iconv\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"指定 responseType 为 arraybuffer，也就是二进制的数组，然后用 gbk 的字符集来解码。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async ipToCity(ip: string) {\n    const response = await this.httpService.axiosRef(`https://whois.pconline.com.cn/ipJson.jsp?ip=${ip}&json=true`, {\n      responseType: 'arraybuffer',\n      transformResponse: [\n        function (data) {\n          const str = iconv.decode(data, 'gbk');\n          return JSON.parse(str);\n        }\n      ]\n    });\n    return response.data.addr;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"现在，就能拿到 utf-8 编码的城市信息了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当然，这个不建议放到请求日志里，不然每次请求都调用一次接口太浪费性能了。"}),"\n",(0,s.jsx)(n.p,{children:"登录日志里可以加这个。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["案例代码上传了",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/request-log",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们通过 interceptor 实现了记录请求日志的功能。"}),"\n",(0,s.jsx)(n.p,{children:"其中 ip 地址如果被 nginx 转发过，需要取 X-Forwarded-For 的 header 的值，我们直接用 request-ip 这个包来做。"}),"\n",(0,s.jsx)(n.p,{children:"如果想拿到 ip 对应的城市信息，可以用一些免费接口来查询，用 @nestjs/axios 来发送请求。当然，这个不建议放到请求日志里。"}),"\n",(0,s.jsx)(n.p,{children:"这样，就可以记录下每次请求响应的信息了。"})]})}function N(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(A,{...e})}):A(e)}let S=N;N.__RSPRESS_PAGE_META={},N.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F95.%20%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BD%95%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"95. 如何记录请求日志",headingTitle:"95. 如何记录请求日志",frontmatter:{}}}}]);