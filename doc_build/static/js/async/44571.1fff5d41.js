"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["44571"],{264563:function(e,n,s){s.r(n),s.d(n,{default:()=>l});var r=s(552676),t=s(740453);let i=s.p+"static/image/53b3cefcdd3ba2ff1f903ea604587c14.eed2dd9c.webp";function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",img:"img",h2:"h2",strong:"strong",pre:"pre",ul:"ul",li:"li",blockquote:"blockquote",ol:"ol"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"3基础篇5-种-react-hooks-api-的介绍和使用v18-篇",children:["3.基础篇｜5 种 React Hooks API 的介绍和使用（v18 篇）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3基础篇5-种-react-hooks-api-的介绍和使用v18-篇",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["本节主要介绍",(0,r.jsx)(n.code,{children:"v18"}),"中提供的 ",(0,r.jsx)(n.code,{children:"useSyncExternalStore"}),"、",(0,r.jsx)(n.code,{children:"useTransition"}),"、",(0,r.jsx)(n.code,{children:"useDeferredValue"}),"、",(0,r.jsx)(n.code,{children:"useInsertionEffect"}),"、",(0,r.jsx)(n.code,{children:"useId"})," 5 个 API 的使用方法。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"1--usesyncexternalstore",children:["1.  useSyncExternalStore",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1--usesyncexternalstore",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"useSyncExternalStore："})," 会通过强制的同步状态更新，使得外部 ",(0,r.jsx)(n.code,{children:"store"})," 可以支持并发读取。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"注意："})," 这个 Hooks 并不是在日常开发中使用的，而是给第三方库 ",(0,r.jsx)(n.code,{children:"redux"}),"、",(0,r.jsx)(n.code,{children:"mobx"})," 使用的，因为在 React v18 中，主推的 Concurrent（并发）模式可能会出现状态不一致的问题（比如在 ",(0,r.jsx)(n.code,{children:"react-redux 7.2.6"})," 的版本），所以官方给出 useSyncExternalStore 来解决此类问题。"]}),"\n",(0,r.jsx)(n.p,{children:"简单地说，useSyncExternalStore 能够让 React 组件在 Concurrent 模式下安全、有效地读取外接数据源，在组件渲染过程中能够检测到变化，并且在数据源发生变化的时候，能够调度更新。"}),"\n",(0,r.jsx)(n.p,{children:"当读取到外部状态的变化，会触发强制更新，以此来保证结果的一致性。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"基本使用："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const state = useSyncExternalStore(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Params："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"subscribe：订阅函数，用于注册一个回调函数，当存储值发生更改时被调用。 此外，useSyncExternalStore 会通过带有记忆性的 getSnapshot 来判断数据是否发生变化，如果发生变化，那么会强制更新数据；"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"getSnapshot：返回当前存储值的函数。必须返回缓存的值。如果 getSnapshot 连续多次调用，则必须返回相同的确切值，除非中间有存储值更新；"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["getServerSnapshot：返回服务端（",(0,r.jsx)(n.code,{children:"hydration"})," 模式下）渲染期间使用的存储值的函数。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Result："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["state：数据源，用于渲染 ",(0,r.jsx)(n.code,{children:"UI 层"}),"的数据源。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"基本用法："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useSyncExternalStore } from "react";\nimport { Button } from "antd";\nimport { combineReducers, createStore } from "redux";\n\nconst reducer = (state: number = 1, action: any) => {\n  switch (action.type) {\n    case "ADD":\n      return state + 1;\n    case "DEL":\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\n/* 注册reducer,并创建store */\nconst rootReducer = combineReducers({ count: reducer });\nconst store = createStore(rootReducer, { count: 1 });\n\nconst Index: React.FC<any> = () => {\n  //订阅\n  const state = useSyncExternalStore(\n    store.subscribe,\n    () => store.getState().count\n  );\n\n  return (\n    <>\n      <div>大家好，我是小杜杜，一起玩转Hooks吧！</div>\n      <div>数据源： {state}</div>\n      <Button type="primary" onClick={() => store.dispatch({ type: "ADD" })}>\n        加1\n      </Button>\n      <Button\n        style={{ marginLeft: 8 }}\n        onClick={() => store.dispatch({ type: "DEL" })}\n      >\n        减1\n      </Button>\n    </>\n  );\n};\n\nexport default Index;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"效果："})}),"\n",(0,r.jsx)(n.p,{children:"当我们点击按钮后，会触发 store.subscribe（订阅函数），执行 getSnapshot 后得到新的 count，此时 count 发生变化，就会触发更新。"}),"\n",(0,r.jsxs)(n.h2,{id:"2-usetransition",children:["2. useTransition",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-usetransition",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"useTransition："})," 返回一个状态值表示过渡更新任务的等待状态，以及一个启动该过渡更新任务的函数。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"问：什么是过渡更新任务？"}),"\n",(0,r.jsx)(n.p,{children:"答：过渡任务是对比紧急更新任务所产生的。"}),"\n",(0,r.jsx)(n.p,{children:"紧急更新任务指，输入框、按钮等任务需要在视图上立即做出响应，让用户立马能够看到效果的任务。"}),"\n",(0,r.jsxs)(n.p,{children:["但有时，更新任务不一定那么紧急，或者说需要去请求数据，导致新的状态不能够立马更新，需要一个 ",(0,r.jsx)(n.code,{children:"loading..."})," 的状态，这类任务称为过渡任务。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"我们再来举个比较常见的例子帮助理解紧急更新任务和过渡更新任务。"}),"\n",(0,r.jsxs)(n.p,{children:["当我们有一个 ",(0,r.jsx)(n.code,{children:"input"})," 输入框，这个输入框的值要维护一个很大列表（假设列表有 1w 条数据），比如说过滤、搜索等情况，这时有两种变化："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"input 框内的变化；"}),"\n",(0,r.jsx)(n.li,{children:"根据 input 的值，1w 条数据的变化。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"input 框内的变化是实时获取的，也就是受控的，此时的行为就是紧急更新任务。而这 1w 条数据的变化，就会有过滤、重新渲染的情况，此时这种行为被称为过渡更新任务。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"基本使用："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const [isPending, startTransition] = useTransition();\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Result："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"isPending：布尔值，过渡状态的标志，为 true 时表示等待状态；"}),"\n",(0,r.jsx)(n.li,{children:"startTransition：可以将里面的任务变成过渡更新任务。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"基本用法："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useState, useTransition } from "react";\nimport { Input } from "antd";\n\nconst Index: React.FC<any> = () => {\n  const [isPending, startTransition] = useTransition();\n  const [input, setInput] = useState("");\n  const [list, setList] = useState<string[]>([]);\n\n  return (\n    <>\n      <div>大家好，我是小杜杜，一起玩转Hooks吧！</div>\n      <Input\n        value={input}\n        onChange={(e) => {\n          setInput(e.target.value);\n          startTransition(() => {\n            const res: string[] = [];\n            for (let i = 0; i < 10000; i++) {\n              res.push(e.target.value);\n            }\n            setList(res);\n          });\n        }}\n      />\n      {isPending ? (\n        <div>加载中...</div>\n      ) : (\n        list.map((item, index) => <div key={index}>{item}</div>)\n      )}\n    </>\n  );\n};\n\nexport default Index;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"效果："})}),"\n",(0,r.jsx)(n.p,{children:"从上述的代码可以看到，我们通过 input 去维护了 1w 条数据，通过 isPending 的状态来控制是否展示完成。"}),"\n",(0,r.jsx)(n.p,{children:"可以看出，useTransition 是为了处理大量数据而存在的，那么有些小伙伴可能会问，这种情况不应该用防抖吗？为什么还会出现 useTransition 呢？"}),"\n",(0,r.jsxs)(n.p,{children:["实际上防抖的本质是 ",(0,r.jsx)(n.code,{children:"setTimeout"}),"，也就是减少了渲染的次数，而 useTransition 并没有减少其渲染的次数，至于具体的区别，在之后的源码篇中专门介绍，这里我们只要清楚 useTransition 的用法即可。"]}),"\n",(0,r.jsxs)(n.h2,{id:"3-usedeferredvalue",children:["3. useDeferredValue",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-usedeferredvalue",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"useDeferredValue：可以让状态滞后派生，与 useTransition 功能类似，推迟屏幕优先级不高的部分。"}),"\n",(0,r.jsx)(n.p,{children:"在一些场景中，渲染比较消耗性能，比如输入框。输入框的内容去调取后端服务，当用户连续输入的时候会不断地调取后端服务，其实很多的片段信息是无用的，这样会浪费服务资源， React 的响应式更新和 JS 单线程的特性也会导致其他渲染任务的卡顿。而 useDeferredValue 就是用来解决这个问题的。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"问：useDeferredValue 和 useTransition 怎么这么相似，两者有什么异同点？"}),"\n",(0,r.jsx)(n.p,{children:"答：useDeferredValue 和 useTransition 从本质上都是标记成了过渡更新任务，不同点在于 useDeferredValue 是将原值通过过渡任务得到新的值， 而 useTransition 是将紧急更新任务变为过渡任务。"}),"\n",(0,r.jsx)(n.p,{children:"也就是说，useDeferredValue 用来处理数据本身，useTransition 用来处理更新函数。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"基本使用："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const deferredValue = useDeferredValue(value);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Params："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["value：接受一个可变的值，如",(0,r.jsx)(n.code,{children:"useState"}),"所创建的值。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Result："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"deferredValue：返回一个延迟状态的值。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"基本用法："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useState, useDeferredValue } from "react";\nimport { Input } from "antd";\n\nconst getList = (key: any) => {\n  const arr = [];\n  for (let i = 0; i < 10000; i++) {\n    if (String(i).includes(key)) {\n      arr.push(<li key={i}>{i}</li>);\n    }\n  }\n  return arr;\n};\n\nconst Index: React.FC<any> = () => {\n  //订阅\n  const [input, setInput] = useState("");\n  const deferredValue = useDeferredValue(input);\n  console.log("value：", input);\n  console.log("deferredValue：", deferredValue);\n\n  return (\n    <>\n      <div>大家好，我是小杜杜，一起玩转Hooks吧！</div>\n      <Input value={input} onChange={(e: any) => setInput(e.target.value)} />\n      <div>\n        <ul>{deferredValue ? getList(deferredValue) : null}</ul>\n      </div>\n    </>\n  );\n};\n\nexport default Index;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"效果："})}),"\n",(0,r.jsx)(n.p,{children:"上述的功能类似于搜索，从 1w 个数中找到输入框内的数。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["问：什么场景下使用",(0,r.jsx)(n.code,{children:"useDeferredValue"})," 和 ",(0,r.jsx)(n.code,{children:"useTransition"})," ？"]}),"\n",(0,r.jsx)(n.p,{children:"答：通过上面的两个例子介绍我们知道，useDeferredValue 和 useTransition 实际上都是用来处理数据量大的数据，比如，百度输入框、散点图等，都可以使用。它们并不适用于少量数据。"}),"\n",(0,r.jsx)(n.p,{children:"但在这里更加推荐使用 useTransition，因为 useTransition 的性能要高于 useDeferredValue，除非像一些第三方的 Hooks 库，里面没有暴露出更新的函数，而是直接返回值，这种情况下才去考虑使用 useDeferredValue。"}),"\n",(0,r.jsx)(n.p,{children:"这两者可以说是一把双刃剑，在数据量大的时候使用会优化性能，而数据量低的时候反而会影响性能。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"4-useinsertioneffect",children:["4. useInsertionEffect",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-useinsertioneffect",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"useInsertionEffect："})," 与 useEffect 一样，但它在所有 DOM 突变之前同步触发。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"注意："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"useInsertionEffect 应限于 css-in-js 库作者使用。在实际的项目中优先考虑使用 useEffect 或 useLayoutEffect 来替代；"}),"\n",(0,r.jsxs)(n.li,{children:["这个钩子是为了解决 ",(0,r.jsx)(n.code,{children:"CSS-in-JS"})," 在渲染中注入样式的性能问题而出现的，所以在我们日常的开发中并不会用到这个钩子，但我们要知道如何去使用它。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"基本使用："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"useInsertionEffect(callback,deps)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"基本用法："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useInsertionEffect } from "react";\n\nconst Index: React.FC<any> = () => {\n  useInsertionEffect(() => {\n    const style = document.createElement("style");\n    style.innerHTML = `\n      .css-in-js{\n        color: blue;\n      }\n    `;\n    document.head.appendChild(style);\n  }, []);\n\n  return (\n    <div>\n      <div className="css-in-js">大家好，我是小杜杜，一起玩转Hooks吧！</div>\n    </div>\n  );\n};\n\nexport default Index;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"效果："})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"执行顺序："})," 在目前的版本中，React 官方共提供三种有关副作用的钩子，分别是 useEffect、useLayoutEffect 和 useInsertionEffect，我们一起来看看三者的执行顺序："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useEffect, useLayoutEffect, useInsertionEffect } from "react";\n\nconst Index: React.FC<any> = () => {\n  useEffect(() => console.log("useEffect"), []);\n\n  useLayoutEffect(() => console.log("useLayoutEffect"), []);\n\n  useInsertionEffect(() => console.log("useInsertionEffect"), []);\n\n  return <div>大家好，我是小杜杜，一起玩转Hooks吧！</div>;\n};\n\nexport default Index;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"效果："})}),"\n",(0,r.jsx)(n.p,{children:"从效果上来看，可知三者的执行的顺序为：useInsertionEffect > useLayoutEffect > useEffect。"}),"\n",(0,r.jsxs)(n.h2,{id:"5-useid",children:["5. useId",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-useid",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"useId："})," 是一个用于生成横跨服务端和客户端的稳定的唯一 ID ，用于解决服务端与客户端产生 ID 不一致的问题，更重要的是保证了 React v18 的 ",(0,r.jsx)(n.code,{children:"streaming renderer （流式渲染）"}),"中 id 的稳定性。"]}),"\n",(0,r.jsxs)(n.p,{children:["这里我们简单介绍一下什么是 ",(0,r.jsx)(n.code,{children:"streaming renderer"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"在之前的 React ssr 中，hydrate（ 与 render 相同，但作用于 ReactDOMServer 渲染的容器中 ）是整个渲染的，也就是说，无论当前模块有多大，都会一次性渲染，无法局部渲染。但这样就会有一个问题，如果这个模块过于庞大，请求数据量大，耗费时间长，这种效果并不是我们想要看到的。"}),"\n",(0,r.jsx)(n.p,{children:"于是在 React v18 上诞生出了 streaming renderer （流式渲染），也就是将整个模块进行拆分，让加载快的小模块先进行渲染，大的模块挂起，再逐步加载出大模块，就可以就解决上面的问题。"}),"\n",(0,r.jsxs)(n.p,{children:["此时就有可能出现：服务端和客户端注册组件的顺序不一致的问题，所以 ",(0,r.jsx)(n.code,{children:"useId"})," 就是为了解决此问题而诞生的，这样就保证了 ",(0,r.jsx)(n.code,{children:"streaming renderer"})," 中 ID 的稳定性。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"基本使用："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const id = useId();\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Result："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["id：生成一个服务端和客户端统一的",(0,r.jsx)(n.code,{children:"id"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"基本用法："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { useId } from "react";\n\nconst Index: React.FC<any> = () => {\n  const id = useId();\n\n  return <div id={id}>大家好，我是小杜杜，一起玩转Hooks吧！</div>;\n};\n\nexport default Index;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"效果："})}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"至此，我们已经搞懂了 React 截止目前为止提供的 Hooks API，建议不熟悉 React 的小伙伴亲自动手试一试，毕竟眼过千遍，不如手过一遍，当你亲自实现后才会加强自己的理解，加深 Hooks 的使用。"}),"\n",(0,r.jsx)(n.p,{children:"下一节，我们将介绍自定义 hooks 的实现。"})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E7%8E%A9%E8%BD%AC%20React%20Hooks%2F3.%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BD%9C5%20%E7%A7%8D%20React%20Hooks%20API%20%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8%EF%BC%88v18%20%E7%AF%87%EF%BC%89.md"]={toc:[{text:"1.  useSyncExternalStore",id:"1--usesyncexternalstore",depth:2},{text:"2. useTransition",id:"2-usetransition",depth:2},{text:"3. useDeferredValue",id:"3-usedeferredvalue",depth:2},{text:"4. useInsertionEffect",id:"4-useinsertioneffect",depth:2},{text:"5. useId",id:"5-useid",depth:2},{text:"小结",id:"小结",depth:2}],title:"3.基础篇｜5 种 React Hooks API 的介绍和使用（v18 篇）",headingTitle:"3.基础篇｜5 种 React Hooks API 的介绍和使用（v18 篇）",frontmatter:{}}}}]);