"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["52166"],{264765:function(e,n,r){r.r(n),r.d(n,{default:()=>k});var i=r(552676),s=r(740453);let a=r.p+"static/image/31d0a36211580b9627eaadded7220d93.547d6cb8.png",c=r.p+"static/image/57b808d10ec5fe204e69db81e17eaad7.fd1aa706.png",t=r.p+"static/image/c3f1ac5a611b26b58a461d8f4bb007c1.37469fac.png",d=r.p+"static/image/839fbbf94c6dd7b6754182879be512ff.a2cce0a9.png",o=r.p+"static/image/889373be687a66a5e13cc26bda8adfeb.57394428.png",l=r.p+"static/image/3689c8b6dd7576336cc9bbed719fadda.9dc65277.png",h=r.p+"static/image/46a6d7023b42ca04d43bdcfe122b2154.66d3b9bb.png",m=r.p+"static/image/4c77bbfba660310ecc53ffcc6055a683.ee7313ee.png",p=r.p+"static/image/d76515ffb780e123c7df638738b27480.9ab74978.png",j=r.p+"static/image/aa11165d220f7cef3a11789d15e1aaa5.6d26efe2.png",x=r.p+"static/image/7d9f2c0a9051400411e96b6e0d1a42a1.cdf23e45.png",f=r.p+"static/image/2fd0b13df4c8fea7cd50e8d77040744d.2334d06c.png",g=r.p+"static/image/0233086d2f0a108f4275d5f30f47be2e.a43a6c04.png",b=r.p+"static/image/645730487c5ed9e8aaf65ad3669956c6.398ac8e2.png",u=r.p+"static/image/6f30eeefa5f0b132250e30122c6788f0.7d78cf6a.png";function w(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",h2:"h2",img:"img",strong:"strong",blockquote:"blockquote",code:"code",pre:"pre"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"4方案了解iframe-方案",children:["4.方案了解：iframe 方案",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4方案了解iframe-方案",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"iframe 是常用的微前端设计方案之一，可能很多同学觉得 iframe 没什么可讲的，它已经是非常成熟的一种技术手段。本文的侧重点不是讲解 iframe 微前端方案实现，而是讲解它背后的浏览器知识，从而帮助大家更好地理解 iframe 和后续的微前端课程。本小节的讲解顺序如下："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"浏览器多进程架构：了解浏览器多进程架构设计；"}),"\n",(0,i.jsx)(n.li,{children:"浏览器沙箱隔离：了解浏览器的沙箱隔离设计；"}),"\n",(0,i.jsx)(n.li,{children:"浏览器站点隔离：了解浏览器中 iframe 的沙箱隔离策略；"}),"\n",(0,i.jsx)(n.li,{children:"iframe 设计方案：基于浏览器知识，讲解 iframe 设计方案的优缺点；"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"浏览器多进程架构",children:["浏览器多进程架构",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#浏览器多进程架构",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"浏览器是一个多进程（Multi Process）的设计架构，通常在打开浏览器标签页访问 Web 应用时，多个浏览器标签页之间互相不会受到彼此的影响，例如某个标签页所在的应用崩溃，其他的标签页应用仍然可以正常运行，这和浏览器的多进程架构息息有关。"}),"\n",(0,i.jsx)(n.p,{children:"以 Chrome 浏览器为例，在运行时会常驻 Browser 主进程，而打开新标签页时会动态创建对应的 Renderer 进程，两者的关系如下所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Browser 主进程"}),"：主要负责处理网络资源请求、用户的输入输出 UI 事件、地址栏 URL 管理、书签管理、回退与前进按钮、文件访问、Cookie 数据存储等。Browser 进程是一个常驻的主进程，它也被称为代理进程，会派生进程并监督它们的活动情况。除此之外，Browser 进程会对派生的进程进行沙箱隔离，具备沙箱策略引擎服务。Browser 进程通过内部的 I/O 线程与其他进程通信，通信的方式是 ",(0,i.jsx)(n.a,{href:"https://www.chromium.org/developers/design-documents/inter-process-communication/",target:"_blank",rel:"noopener noreferrer",children:"IPC"})," & ",(0,i.jsx)(n.a,{href:"https://chromium.googlesource.com/chromium/src/+/HEAD/mojo/README.md",target:"_blank",rel:"noopener noreferrer",children:"Mojo"}),"。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Renderer 进程"}),"：主要负责标签页和 iframe 所在 Web 应用的 UI 渲染和 JavaScript 执行。Renderer 进程由 Browser 主进程派生，每次手动新开标签页时，Browser 进程会创建一个新的 Renderer 进程。"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"温馨提示：新开的标签页和 Renderer 进程并不一定是 1: 1 的关系，例如，多个新开的空白标签页为了节省资源，有可能被合并成一个 Renderer 进程。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"上图只是一个简单的多进程架构示意，事实上 Chrome 浏览器包括 Browser 进程、网络进程、数据存储进程、插件进程、Renderer 进程和 GPU 进程等。除此之外，Chrome 浏览器会根据当前设备的性能和存储空间来动态设置部分进程是否启用，例如低配 Andriod 手机的设备资源相对紧张时，部分进程（存储进程、网络进程、设备进程等）会被合并到 Browser 主进程，完整的多进程架构如下所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["如果想要查看 Chrome 浏览器的进程运行情况，可以通过右上角的",(0,i.jsx)(n.strong,{children:"设置 / 更多工具 / 任务管理器"}),"打开："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"打开以后可以在任务管理器的列表中查看进程情况："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsxs)(n.h2,{id:"浏览器沙箱隔离",children:["浏览器沙箱隔离",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#浏览器沙箱隔离",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"由于 Web 应用运行在 Renderer 进程中，浏览器为了提升安全性，需要通过常驻的 Browser 主进程对 Renderer 进程进行沙箱隔离设计，从而实现 Web 应用进行隔离和管控，如下所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"温馨提示：从 Chrome 浏览器开发商的角度出发，需要将非浏览器自身开发的 Web 应用设定为三方不可信应用，防止 Web 页面可以通过 Chrome 浏览器进入用户的操作系统执行危险操作。"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Chrome 浏览器在进行沙箱设计时，会尽可能的复用现有操作系统的沙箱技术，例如以 Windows 操作系统的沙箱架构为例，",(0,i.jsx)(n.strong,{children:"所有的沙箱都会在进程粒度进行控制"}),"，所有的进程都通过 IPC 进行通信。在 Windows 沙箱的架构中，存在一个 Broker 进程和多个 Target 进程， Broker 进程主要用于派生 Target 进程、管理 Target 进程的沙箱策略、代理 Target 进程执行策略允许的操作，而所有的 Target 进程会在运行时受到沙箱策略的管控："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"在 Chrome 浏览器的多进程架构中，Browser 进程对应 Broker 进程，可以理解为浏览器沙箱策略的总控制器， Renderer 进程对应沙箱化的 Target 进程，它主要运行不受信任的三方 Web 应用，因此，在 Renderer 进程中的一些系统操作需要经过 IPC 通知 Browser 进程进行代理操作，例如网络访问、文件访问（磁盘）、用户输入输出的访问（设备）等。"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"温馨提示：Chrome 浏览器的插件进程是否已经沙箱化？"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"浏览器站点隔离",children:["浏览器站点隔离",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#浏览器站点隔离",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["在 Chrome 浏览器中沙箱隔离以 Renderer 进程为单位，而在旧版的浏览器中会存在多个 Web 应用共享同一个 Renderer 进程的情况，此时浏览器会依靠",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer",children:"同源策略"}),"来限制两个不同源的文档进行交互，帮助隔离恶意文档来减少安全风险。"]}),"\n",(0,i.jsx)(n.p,{children:"Chrome 浏览器未启动站点隔离之前，标签页应用和内部的 iframe 应用会处于同一个 Renderer 进程，Web 应用有可能发现安全漏洞并绕过同源策略的限制，访问同一个进程中的其他 Web 应用，因此可能产生如下安全风险："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"获取跨站点 Web 应用的 Cookie 和 HTML 5 存储数据；"}),"\n",(0,i.jsx)(n.li,{children:"获取跨站点 Web 应用的 HTML、XML 和 JSON 数据；"}),"\n",(0,i.jsx)(n.li,{children:"获取浏览器保存的密码数据；"}),"\n",(0,i.jsx)(n.li,{children:"共享跨站点 Web 应用的授权权限，例如地理位置；"}),"\n",(0,i.jsxs)(n.li,{children:["绕过 ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Frame-Options",target:"_blank",rel:"noopener noreferrer",children:"X-Frame-Options"})," 加载 iframe 应用（例如百度的页面被 iframe 嵌套）；"]}),"\n",(0,i.jsx)(n.li,{children:"获取跨站点 Web 应用的 DOM 元素。"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["在 Chrome 67 版本之后，为了防御多个",(0,i.jsx)(n.strong,{children:"跨站的 Web 应用"}),"处于同一个 Renderer 进程而可能产生的安全风险，浏览器会给来自不同站点的 Web 应用分配不同的 Renderer 进程。例如当前标签页应用中包含了多个不同站点的 iframe 应用，那么浏览器会为各自分配不同的 Renderer 进程，从而可以基于沙箱策略进行应用的进程隔离，确保攻击者难以绕过安全漏洞直接访问跨站 Web 应用："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：Chrome 为标签页分配 Renderer 进程的策略和 iframe 中的站点隔离策略是有差异的，例如用户自己新开标签页时，不管是否已经存在同站的应用都会创建新的 Renderer 进程。用户通过",(0,i.jsx)(n.code,{children:"window.open"})," 跳转新标签页时，浏览器会判断当前应用和跳转后的应用是否属于同一个站点，如果属于同一个站点则会复用当前应用所在的 Renderer 进程。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["需要注意跨站和跨域是有区别的，使用跨站而不是跨域来独立 Renderer 进程是为了兼容现有浏览器的能力，",(0,i.jsx)(n.strong,{children:"例如同站应用通过修改"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"document.domain"})})," ",(0,i.jsx)(n.strong,{children:"进行通信"}),"，如果采用域名隔离，那么会导致处于不同 Renderer 进程的应用无法实现上述能力。这里额外了解一下同源和同站的区别，如下所示："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"同源：协议（protocol）、主机名（host）和端口（port）相同，则为同源；"}),"\n",(0,i.jsx)(n.li,{children:"同站：有效顶级域名（Effective Top-Level-Domain，eTLD）和二级域名相同，则为同站。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["从上图可以看出，eTLD + 1 代表有效顶级域名 + 二级域名。需要注意，有效顶级域名和顶级域名是不一样的概念，例如 ",(0,i.jsx)(n.code,{children:"github.io"})," 是一个有效顶级域名，如果将 ",(0,i.jsx)(n.code,{children:".io"})," 视为有效顶级域名，那么 ",(0,i.jsx)(n.code,{children:"https://ziyi2.github.io"})," 和 ",(0,i.jsx)(n.code,{children:"https://xxholly32.github.io"})," 将被浏览器视为同站，但显然它们是两个不同的开发者创建的博客站点。有效顶级域名有一个维护列表，具体可以查看 ",(0,i.jsx)(n.a,{href:"https://publicsuffix.org/list/public_suffix_list.dat",target:"_blank",rel:"noopener noreferrer",children:"publicsuffix/list"}),"。举个例子："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"温馨提示：什么是有方案同站？"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"关于站点隔离可以通过启动 Node 并聚合 iframe 应用进行验证，目录结构如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"├── views    \n│   └── iframe.html                        \n│   └── main.html         \n├── main-server.js           # main 应用服务\n├── micro-server.js          # iframe 应用服务\n├── config.js                # 端口，host 等配置\n└── package.json    \n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：示例源码可以从 micro-framework 的 ",(0,i.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/iframe-isolate",target:"_blank",rel:"noopener noreferrer",children:"demo/iframe-isolate"})," 分支获取。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["启动 Node 服务渲染 ",(0,i.jsx)(n.code,{children:"main"})," 和 内部的 ",(0,i.jsx)(n.code,{children:"iframe"})," 应用："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:' // main-server.js\nimport path from \'path\';\n// https://github.com/expressjs/express\nimport express from \'express\';\n// ejs 中文网站: https://ejs.bootcss.com/#promo\n// ejs express 示例: https://github.com/expressjs/express/blob/master/examples/ejs/index.js\nimport ejs from "ejs";\nimport config from \'./config.js\';\nconst { port, host, __dirname } = config;\n\nconst app = express();\n\napp.engine(".html", ejs.__express);\napp.set("views", path.join(__dirname, "views"));\napp.set("view engine", "html");\n\n// 浏览器访问 http://${host}:${port.main}/ 时会渲染 views/main.html \napp.get("/", function (req, res) {\n  // 使用 ejs 模版引擎填充主应用 views/main.html 中的 iframeUrl 变量，并将其渲染到浏览器\n  res.render("main", {\n    // 填充 iframe 应用的地址，只有端口不同，iframe 应用和 main 应用跨域但是同站\n    iframeUrl: `http://${host}:${port.micro}`\n  });\n});\n\n// 启动 Node 服务\napp.listen(port.main, host);\nconsole.log(`server start at http://${host}:${port.main}/`);\n\n\n// micro-server.js\nimport path from \'path\';\nimport express from \'express\';\nimport ejs from "ejs";\nimport config from \'./config.js\';\nconst { port, host, __dirname } = config;\n\nconst app = express();\n\napp.engine(".html", ejs.__express);\napp.set("views", path.join(__dirname, "views"));\napp.set("view engine", "html");\n\napp.get("/", function (req, res) {\n  res.render("iframe");\n});\n\n// 启动 Node 服务\napp.listen(port.micro, host);\nconsole.log(`server start at http://${host}:${port.micro}/`);\n\n\n// config.js\n// https://github.com/indutny/node-ip\nimport ip from \'ip\';\nimport path from "path";\nimport { fileURLToPath } from "url";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport default {\n  port: {\n    main: 4000,\n    micro: 3000,\n  },\n\n  // 获取本机的 IP 地址\n  host: ip.address(),\n\n  __dirname\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["在 ",(0,i.jsx)(n.code,{children:"main"})," 对应的 HTML 中使用 iframe 聚合同站应用："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'\x3c!-- main.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>站点隔离测试</title>\n</head>\n<body>\n    <h1>main 应用</h1>\n    <button onclick="javascript:window.open(\'<%= iframeUrl %>\')">在新的标签页打开 iframe 应用</button>\n    <br>\n    \x3c!-- 同站应用：iframe.html --\x3e\n    <iframe src="<%= iframeUrl %>"></iframe>\n    \x3c!-- 跨站应用: https://juejin.cn/ --\x3e\n    <iframe src="https://juejin.cn"></iframe>\n</body>\n</html>\n\n\x3c!-- iframe.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>同站的 iframe 应用</title>\n  </head>\n  <body>\n    <h1>同站的 iframe 应用</h1>\n  </body>\n</html>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["使用 ",(0,i.jsx)(n.code,{children:"npm run main-start"})," 和 ",(0,i.jsx)(n.code,{children:"npm run micro-start"})," 同时启动 main 和 iframe 应用的服务后，在浏览器中打开 main 应用，通过任务管理器查看各自的进程，可以发现",(0,i.jsx)(n.strong,{children:"跨站的掘金应用启动了一个新的进程："})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["为了查看同站 iframe 所在应用的进程，可以点击按钮使用 ",(0,i.jsx)(n.code,{children:"window.open"})," 跳转新的标签页，此时可以发现 iframe 应用和 main 应用处于同一个 Renderer 进程中："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["浏览器的站点隔离功能是可以关闭的，通过 ",(0,i.jsx)(n.code,{children:"chrome://flags"})," 进入："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"禁用站点隔离后，可以发现主应用和两个 iframe 应用处于同一个 Renderer 进程："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsxs)(n.h2,{id:"浏览上下文",children:["浏览上下文",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#浏览上下文",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["每一个 iframe 都有自己的",(0,i.jsx)(n.a,{href:"https://www.w3.org/html/wg/spec/browsers.html#browsing-context",target:"_blank",rel:"noopener noreferrer",children:"浏览上下文"}),"，不同的浏览上下文包含了各自的 Document 对象以及 History 对象，通常情况下 Document 对象和 Window 对象存在 1:1 的映射关系，如下所示："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,i.jsxs)(n.p,{children:["在上述示例中，如果主应用是在空白的标签页打开，那么主应用是一个顶级浏览上下文，顶级浏览器上下文既不是嵌套的浏览上下文，自身也没有父浏览上下文，通过访问 ",(0,i.jsx)(n.code,{children:"window.top"})," 可以获取当前浏览上下文的顶级浏览上下文 ",(0,i.jsx)(n.code,{children:"window"})," 对象，通过访问 ",(0,i.jsx)(n.code,{children:"window.parent"})," 可以获取父浏览上下文的 ",(0,i.jsx)(n.code,{children:"window"})," 对象。"]}),"\n",(0,i.jsx)(n.p,{children:"例如想要知道当前应用是否在 iframe 中打开，可以简单通过如下代码进行判断："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// 如果自己嵌自己会发生什么情况呢？\n// 是否可以使用 if(window.parent !== widnow) {} 代替\nif(window.top !== window) {}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["温馨提示：如果希望判断微应用是否被其他应用进行嵌入，也可以使用 ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Location/ancestorOrigins",target:"_blank",rel:"noopener noreferrer",children:"location.ancestorOrigins"})," 来进行判断。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"iframe-设计方案",children:["iframe 设计方案",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#iframe-设计方案",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在微前端中 iframe 方案需要一个主应用，包含导航和内容区的设计，通过切换导航来控制内容区微应用 A / B / C 的加载和卸载，如下所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,i.jsx)(n.p,{children:"在之前的课程中讲解了导航切换的设计方案可以是前端框架路由、服务端路由和自己设计的切换逻辑，在 iframe 的方案中，导航设计可以是前端框架路由来控制不同微应用所在 iframe 的显示和隐藏，也可以通过自己设计切换逻辑来动态加载 iframe。"}),"\n",(0,i.jsx)(n.p,{children:"不论使用哪一种切换方式，在首次加载 iframe 应用时，都会因为服务端请求而导致内容区带来短暂的白屏效果。当然，相比普通 MPA 应用，通过服务端路由的方式来处理，最大的好处是每次切换微应用都不需要刷新主应用。除此之外，iframe 应用的特点主要包括："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"站点隔离和浏览上下文隔离，可以使微应用在运行时天然隔离，适合集成三方应用；"}),"\n",(0,i.jsx)(n.li,{children:"移植性和复用性好，可以便捷地嵌在不同的主应用中。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"当然在使用 iframe 应用时，会产生如下一些问题："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["主应用刷新时， iframe 无法保持 URL 状态（会重新加载 ",(0,i.jsx)(n.code,{children:"src"})," 对应的初始 URL）；"]}),"\n",(0,i.jsx)(n.li,{children:"主应用和 iframe 处于不同的浏览上下文，无法使 iframe 中的模态框相对于主应用居中；"}),"\n",(0,i.jsx)(n.li,{children:"主应用和 iframe 微应用的数据状态同步问题：持久化数据和通信。"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"温馨提示：对于非后台管理系统而言，使用 iframe 还需要考虑 SEO、移动端兼容性、加载性能等问题。"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["海康威视安防的管理后台系统采用了 iframe 作为微前端解决方案，很好利用了 iframe 的优点，从而实现了不同定制产品的组装功能。当然在 iframe 的设计方案中，",(0,i.jsx)(n.strong,{children:"首要解决的是主应用和微应用的免登问题"}),"，该问题可以通过主应用和微应用共享 Cookie 进行处理，在后续的课程中会讲解在 iframe 中的 Cookie 携带情况。"]}),"\n",(0,i.jsxs)(n.h2,{id:"小结",children:["小结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"本小节首先讲解了和 iframe 息息相关的浏览器原理知识，包括多进程架构、沙箱隔离、站点隔离以及浏览上下文等，基于原理知识讲解了 iframe 设计方案的优缺点。在下一小节中会讲解基于 NPM 包的微前端方案。"})]})}function _(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(w,{...e})}):w(e)}let k=_;_.__RSPRESS_PAGE_META={},_.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F4.%E6%96%B9%E6%A1%88%E4%BA%86%E8%A7%A3%EF%BC%9Aiframe%20%E6%96%B9%E6%A1%88.md"]={toc:[{text:"浏览器多进程架构",id:"浏览器多进程架构",depth:2},{text:"浏览器沙箱隔离",id:"浏览器沙箱隔离",depth:2},{text:"浏览器站点隔离",id:"浏览器站点隔离",depth:2},{text:"浏览上下文",id:"浏览上下文",depth:2},{text:"iframe 设计方案",id:"iframe-设计方案",depth:2},{text:"小结",id:"小结",depth:2}],title:"4.方案了解：iframe 方案",headingTitle:"4.方案了解：iframe 方案",frontmatter:{}}}}]);