"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["33833"],{564092:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var i=s(552676),r=s(740453);let c=s.p+"static/image/5c95603774f84034b4745a7de56f4609.37f9cfa2.webp",l=s.p+"static/image/5d006f6f30b1a4afeaec1d686fb49bc2.72994128.webp",d=s.p+"static/image/6fccf134d6fa5bcc04460adf2ae55037.91d870dd.webp";function h(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",em:"em",ul:"ul",li:"li",code:"code",pre:"pre",h3:"h3"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"5-文章生成器需求原型与系统设计",children:["5 文章生成器：需求原型与系统设计",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-文章生成器需求原型与系统设计",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"这一节课开始，我们进入第二模块的学习：Node.js 的运行时。"}),"\n",(0,i.jsx)(n.p,{children:"第一模块我带你了解了什么是 Node.js，以及 Node.js 支持的两种模块管理规范和它内置的包管理工具（NPM）。我们说过，Node.js 提供了能够让 JavaScript 操作 PC 系统的运行时环境。"}),"\n",(0,i.jsx)(n.p,{children:"那第二模块我们就来学习如何使用 Node.js 开发 PC 小应用：随机文章生成器。通过这个应用，你将了解 node 环境下如何使用 fs、process、readline 模块，如何创建自己的模块，以及如何安装并引入第三库。"}),"\n",(0,i.jsx)(n.p,{children:"首先，我们来了解一下这个应用的需求：随机文章生成器的功能是能根据语料库的配置和用户输入的规则，随机生成一篇可长可短的文本，里面的内容语句通顺，但是废话连篇。"}),"\n",(0,i.jsx)(n.p,{children:"生成这样的文本，在 Web 开发中可以被用来测试布局和网页内容在特定数量时页面呈现的效果，也可以用来测试数据库或文件的读写，或者纯粹作为娱乐项目以图一乐。如果你关注 GitHub，你可能知道最近有个类似的应用很火，叫做《狗屁不通文章生成器》，我们就模仿它来写一个类似的生成器，对它的不足之处也会有一些改进。"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("img",{src:d,alt:""}),"\n",(0,i.jsx)(n.em,{children:"狗屁不通文章生成器网页版效果"})]}),"\n",(0,i.jsx)(n.p,{children:"文章生成器的产品原型非常简单，就是用户设定主题和字数，应用根据内置的语料库，按照规则自动生成一篇随机的文章。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"我们可以画一下它的大致流程："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以我们需要实现以下功能："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"读取语料库并解析；"}),"\n",(0,i.jsx)(n.li,{children:"随机选取语料的随机算法；"}),"\n",(0,i.jsx)(n.li,{children:"字符串模板的参数替换；"}),"\n",(0,i.jsx)(n.li,{children:"文章内容的拼装；"}),"\n",(0,i.jsx)(n.li,{children:"生成文章输出。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"如果再考虑到用户交互，我们还要完成："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"接收命令行输入的参数；"}),"\n",(0,i.jsx)(n.li,{children:"提供给用户命令行使用指引；"}),"\n",(0,i.jsx)(n.li,{children:"输出文本内容的格式和存储。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"总的来说，对应的技术点如下："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"利用 fs 模块读取语料库文件内容；"}),"\n",(0,i.jsx)(n.li,{children:"实现一个随机模块，提供符合要求的随机算法；"}),"\n",(0,i.jsx)(n.li,{children:"使用正则表达式和字符串模板替换以及字符串拼接，完成文章生成；"}),"\n",(0,i.jsx)(n.li,{children:"使用 process.argv 接收用户参数，根据参数输出不同内容；"}),"\n",(0,i.jsx)(n.li,{children:"利用 fs 模块、二进制模块，将生成的文本内容保存成文本和图片格式。"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["我们新建项目，叫",(0,i.jsx)(n.code,{children:"bullshit_generator"}),"，项目目录结构如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:".\n├── corpus\n│\xa0\xa0 └── data.json\n├── index.js\n├── lib\n│\xa0\xa0 ├── generator.js\n│\xa0\xa0 └── random.js\n├── package.json\n└── output\n"})}),"\n",(0,i.jsxs)(n.p,{children:["corpus 存放语料库文件，这是一份 json 文件，文件名 data.json。",(0,i.jsx)(n.code,{children:"index.js"})," 是项目主文件，是一个可以运行的 Node.js 脚本。",(0,i.jsx)(n.code,{children:"lib"}),"目录下是项目依赖的库文件，这里我们不依赖外部的库，自己实现两个模块，一个是 generator.js 模块，用来生成文章内容，另一个是随机模块，用来提供随机算法。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"package.json"}),"是项目的配置文件。",(0,i.jsx)(n.code,{children:"output"}),"存放项目输入结果。在后面的几节课中，我们就来使用上面的技术点实现我们的文章生成器应用。"]}),"\n",(0,i.jsxs)(n.h3,{id:"第一部分的完整代码",children:["第一部分的完整代码",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第一部分的完整代码",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/akira-cn/bullshit-generator-js",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/akira-cn/bullshit-generator-js"})})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}let a=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%E5%85%A8%E6%A0%88%2F5%20%E6%96%87%E7%AB%A0%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%9A%E9%9C%80%E6%B1%82%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.md"]={toc:[{text:"第一部分的完整代码",id:"第一部分的完整代码",depth:3}],title:"5 文章生成器：需求原型与系统设计",headingTitle:"5 文章生成器：需求原型与系统设计",frontmatter:{}}}}]);