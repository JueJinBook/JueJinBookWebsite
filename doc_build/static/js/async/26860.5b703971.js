"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["26860"],{576621:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var i=r(552676),c=r(740453);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",strong:"strong",h2:"h2",h3:"h3",pre:"pre",ul:"ul",li:"li",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"第11章实战篇如何支持工具插件化",children:["第11章—实战篇：如何支持工具插件化",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第11章实战篇如何支持工具插件化",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["\uFEFF## 前言\n前面的章节，我们介绍了要实现的工具箱的一个非常重要的能力就是支持插件化能力，有了插件化能力后，我们所有的效率工具都可以通过类似 ",(0,i.jsx)(n.code,{children:"vscode"})," 插件的方式进行安装、发布、卸载。"]}),"\n",(0,i.jsxs)(n.p,{children:["其实，插件化的核心原理可以类比 ",(0,i.jsx)(n.code,{children:"Hybrid App (混合应用)"}),"。 ",(0,i.jsx)(n.code,{children:"Hybrid App"})," 是一种混合了 ",(0,i.jsx)(n.code,{children:"Native"})," 和 ",(0,i.jsx)(n.code,{children:"H5"})," 的移动端开发技术方案，核心目的是想集齐 ",(0,i.jsx)(n.code,{children:"H5"})," 应用的快速迭代和 ",(0,i.jsx)(n.code,{children:"Native"})," 原生操作交互能力优势。大多数 ",(0,i.jsx)(n.code,{children:"Hybrid App"})," 都是采用 ",(0,i.jsx)(n.code,{children:"Webview UI"})," + ",(0,i.jsx)(n.code,{children:"JSBridge"})," 来实现的。其实，说到这里，你也可以认为那些集成到 ",(0,i.jsx)(n.code,{children:"Webview"})," 中的 ",(0,i.jsx)(n.code,{children:"H5"})," 页面就是一个个插件，这些插件可以独立于 ",(0,i.jsx)(n.code,{children:"APP"})," 进行部署、迭代，而 ",(0,i.jsx)(n.code,{children:"Webview"})," 容器可以动态加载不同的",(0,i.jsx)(n.strong,{children:"插件"}),"。"]}),"\n",(0,i.jsx)(n.p,{children:"以上，就是我们要实现插件化技术的核心原理概要。不过，在 Electron 中，稍微有点不同，我们希望实现的插件化体系大致是这样："}),"\n",(0,i.jsxs)(n.p,{children:["主程序提供一些操作原生能力以及内置功能的 ",(0,i.jsx)(n.code,{children:"Open API"}),"，插件寄生在 Electron 主程序上通过调用主程序的 ",(0,i.jsx)(n.code,{children:"Open API"})," 来独立实现自己的 UI、业务功能。"]}),"\n",(0,i.jsx)(n.p,{children:"接下来，我们将详细介绍 Electron 中如何实现所谓的插件化体系。"}),"\n",(0,i.jsxs)(n.h2,{id:"实现插件加载",children:["实现插件加载",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现插件加载",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["插件需要加载，那么一定需要一个容器来支持插件的渲染，目前，Electron 提供了 ",(0,i.jsx)(n.code,{children:"<webview>"}),"、",(0,i.jsx)(n.code,{children:"iframe"}),"、",(0,i.jsx)(n.code,{children:"BrowserView"})," 三种方式来加载第三方资源，接下来我们主要分析这三种方式中哪种最符合我们的需求。"]}),"\n",(0,i.jsxs)(n.h3,{id:"1-electron-的-webview",children:["1. Electron 的 Webview",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-electron-的-webview",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["和一些原生 APP 类似，Electron 也提供了一个 ",(0,i.jsx)(n.code,{children:"Webview"})," 标签，用于在 Electron 应用程序中嵌入和展示 web 内容的 HTML 标签。它允许开发者将外部的网页或 Web 应用程序嵌入到 Electron 应用的窗口中，从而创建更丰富的用户体验和功能。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<webview id="foo" src="https://juejin.cn"></webview>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["默认情况下，Electron 是不启用 webview 标签的，需要在创建 ",(0,i.jsx)(n.code,{children:"BrowserWindow"})," 的时候在 ",(0,i.jsx)(n.code,{children:"webPreferences"})," 里面设置 ",(0,i.jsx)(n.code,{children:"webviewTag"})," 为 ",(0,i.jsx)(n.code,{children:"true"})," 才行："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"win = new BrowserWindow({\n  width: 800,\n  height: 600,\n  webPreferences: {\n    // 开启 webviewTag\n    webviewTag: true, \n  },\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["因为要加载三方页面，所以为了确保安全，相对于 BrowserWindow 而言，",(0,i.jsx)(n.code,{children:"webview"})," 标签具有非常严格的安全性设置，在默认情况下，Electron 是没有为 ",(0,i.jsx)(n.code,{children:"webview"})," 内的页面开启 Node.js 的能力。"]}),"\n",(0,i.jsxs)(n.p,{children:["如果通过 ",(0,i.jsx)(n.code,{children:"webview"})," 标签实现插件化也是可行的，首先通过 ",(0,i.jsx)(n.code,{children:"preload.js"})," 定义一些全局 open API，然后使用 ",(0,i.jsx)(n.code,{children:"webview"})," 标签加载插件的入口文件："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'\x3c!--plugin.vue--\x3e\n<webview id="webview" :src="path" :preload="preload"></webview>\n<script setup>\nconst path = `File://${route.query.sourceFile}`\nconst preload = `File://${path.join(__static, \'./preload.js\')}`\n<\/script>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// static/preload.js\nwindow.rubick = { \n  // 所有的 api 实现\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["这里，我们通过一个单独的路由页面 ",(0,i.jsx)(n.code,{children:"plugin.vue"})," 来承载插件的加载渲染，通过 ",(0,i.jsx)(n.code,{children:"url"})," 上的 ",(0,i.jsx)(n.code,{children:"path"})," 参数来获取需要加载页面的路径，然后通过 ",(0,i.jsx)(n.code,{children:"preload"})," 参数为页面注入 ",(0,i.jsx)(n.code,{children:"openAPI"}),"。这样后续插件页面中就可以通过 ",(0,i.jsx)(n.code,{children:"window.rubick.xxx"})," 使用一些内置的函数功能。"]}),"\n",(0,i.jsxs)(n.p,{children:["但是，因为",(0,i.jsx)(n.code,{children:"webview"})," 标签是一个 ",(0,i.jsx)(n.code,{children:"HTML"})," 元素，它的加载和运行必须在渲染进程中，无法脱离渲染进程而单独存在，所以插件的整体运行时机是滞后的。其次，",(0,i.jsx)(n.code,{children:"Webview"})," 标签也有不少 ",(0,i.jsx)(n.code,{children:"bug"}),"，比如："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/electron/electron/issues/17890",target:"_blank",rel:"noopener noreferrer",children:"App freeze when iframe is deleted from a webview"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/electron/electron/issues/18019",target:"_blank",rel:"noopener noreferrer",children:"Reload nested iframe in webview causes memory leak in electron"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/electron/electron/issues/18177",target:"_blank",rel:"noopener noreferrer",children:"<webview> not rendering content after reload or redirect"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"官方给的解释是："}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Electron的\xa0",(0,i.jsx)(n.code,{children:"webview"}),"\xa0标签基于\xa0",(0,i.jsxs)(n.a,{href:"https://developer.chrome.com/docs/extensions/reference/webviewTag/",target:"_blank",rel:"noopener noreferrer",children:["Chromium\xa0",(0,i.jsx)(n.code,{children:"webview"}),"\xa0"]}),"，后者正在经历巨大的架构变化。 这将影响\xa0",(0,i.jsx)(n.code,{children:"webview"}),"\xa0的稳定性，包括呈现、导航和事件路由。 我们目前建议不使用\xa0",(0,i.jsx)(n.code,{children:"webview"}),"\xa0标签，并考虑其他替代方案，如\xa0",(0,i.jsx)(n.code,{children:"iframe"}),"\xa0，Electron 的 ",(0,i.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/api/browser-view",target:"_blank",rel:"noopener noreferrer",children:"BrowserView"}),"\xa0或完全避免嵌入内容的架构。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["总而言之，官方还是建议使用 ",(0,i.jsx)(n.code,{children:"iframe"})," 或者 ",(0,i.jsx)(n.code,{children:"BrowserView"})," 来替代 ",(0,i.jsx)(n.code,{children:"Webview"}),"。"]}),"\n",(0,i.jsxs)(n.h3,{id:"2-electron-中的-iframe",children:["2. Electron 中的 iframe",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-electron-中的-iframe",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"iframe"})," 是每个前端开发人员都熟悉的概念，它并非 Electron 框架特有，而是浏览器 DOM 标准中的一种内嵌标签，也是最基础的内嵌方案之一。如果要使用 ",(0,i.jsx)(n.code,{children:"iframe"})," 加载插件页面，首先需要去掉 ",(0,i.jsx)(n.code,{children:"Electron"})," 中 ",(0,i.jsx)(n.code,{children:"index.html"})," 里面的 ",(0,i.jsx)(n.code,{children:"Meta"})," 标签："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!doctype html>\n<html>\n  <head>\n    <meta charset="UTF-8" />\n    <title>Electron</title>\n\x3c!--    <meta--\x3e\n\x3c!--      http-equiv="Content-Security-Policy"--\x3e\n\x3c!--      content="default-src \'self\'; script-src \'self\'; style-src \'self\' \'unsafe-inline\'"--\x3e\n\x3c!--    />--\x3e\n  </head>\n\n  <body>\n    <div id="app"></div>\n    <script type="module" src="/src/main.js"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["这样便允许我们使用 ",(0,i.jsx)(n.code,{children:"iframe"})," 的方式加载三方页面。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<iframe id="foo" src="https://juejin.cn"></iframe>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["在 Electron 中，与普通浏览器有所不同，",(0,i.jsx)(n.code,{children:"iframe"})," 不具备自己的 webContents，而是以宿主页面的 contents 下方的一种 ",(0,i.jsx)(n.code,{children:"frame"})," 形式存在。因此，它也无法脱离渲染进程而单独存在。"]}),"\n",(0,i.jsxs)(n.p,{children:["另外注意的是，",(0,i.jsx)(n.code,{children:"iframe"})," 内的网页无法直接调用 ",(0,i.jsx)(n.code,{children:"node"})," 的能力，也无法直接加载 ",(0,i.jsx)(n.code,{children:"preload.js"})," 文件，这就不得不需要我们使用 ",(0,i.jsx)(n.code,{children:"iframe"})," 的 ",(0,i.jsx)(n.code,{children:"postMessage"})," 的方式来和渲染进程进行通信达到调用和执行 ",(0,i.jsx)(n.code,{children:"openAPI"})," 的目的，这大大降低了插件的功能天花板。"]}),"\n",(0,i.jsxs)(n.h3,{id:"3-electron-的-browserview",children:["3. Electron 的 BrowserView",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-electron-的-browserview",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["前面我们说了，由于 ",(0,i.jsx)(n.code,{children:"<webview>"})," 有一些无法解决和处理的 bug，所以 Electron 绕过了 ",(0,i.jsx)(n.code,{children:"<webview>"})," 构建了一个替代品：",(0,i.jsx)(n.code,{children:"BrowserView"}),"。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"BrowserView"}),"\xa0被用来让\xa0",(0,i.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/api/browser-window",target:"_blank",rel:"noopener noreferrer",children:(0,i.jsx)(n.code,{children:"BrowserWindow"})}),"\xa0嵌入更多的 web 内容。 它就像一个子窗口，除了它的位置是相对于父窗口。这意味着可以替代",(0,i.jsx)(n.code,{children:"webview"}),"标签。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["那么，",(0,i.jsx)(n.code,{children:"BrowserView"})," 与 ",(0,i.jsx)(n.code,{children:"webview"})," 有何不同呢？首先，",(0,i.jsx)(n.code,{children:"webview"})," 是 DOM 层次结构的一部分，而 ",(0,i.jsx)(n.code,{children:"BrowserView"})," 存在于操作系统的窗口层次结构中。这种方式与 Chrome 管理其标签页的方式非常相似，在 BrowserView 中运行的 Web 应用程序的速度也和在 Chrome 中一样快。"]}),"\n",(0,i.jsxs)(n.p,{children:["但是，就像 Electron 官网中说的一样，它的位置是相对于父窗口的，所以你必须手动控制 ",(0,i.jsx)(n.code,{children:"BrowserView"})," 的位置："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// main/index.js\nimport { app, BrowserView, BrowserWindow } from 'electron';\n\napp.whenReady().then(() => {\n  const win = new BrowserWindow({ width: 800, height: 600 });\n  //创建子窗口\n  const view = new BrowserView();\n  //自窗口设置嵌入式子窗口\n  win.setBrowserView(view);\n  // 设置 x，y 坐标，窗口宽度和高度\n  view.setBounds({ x: 0, y: 0, width: 300, height: 300 });\n  //加载页面\n  view.webContents.loadURL('https://juejin.cn');\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["综合来看，如果要实现 ",(0,i.jsx)(n.code,{children:"Electron"})," 的插件化功能，那么就需要加载第三方资源，所以我们建议使用 ",(0,i.jsx)(n.code,{children:"BrowserView"})," 来加载外部资源，因为 ",(0,i.jsx)(n.code,{children:"BrowserView"})," 对新版本的 Electron 支持性更好，而且拥有窗口化最大控制权限。"]}),"\n",(0,i.jsxs)(n.h2,{id:"基于-browserview-实现插件化能力",children:["基于 BrowserView 实现插件化能力",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基于-browserview-实现插件化能力",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"假定我们有个外部插件资源包，包的结构大致如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"plugin\n|-- index.html\n|-- preload.js\n|-- index.js\n└── package.json\n"})}),"\n",(0,i.jsxs)(n.p,{children:["其中，",(0,i.jsx)(n.code,{children:"index.html"})," 是插件的主入口文件，控制着页面的 ",(0,i.jsx)(n.code,{children:"UI"})," 展示逻辑，",(0,i.jsx)(n.code,{children:"preload.js"})," 是插件调用 ",(0,i.jsx)(n.code,{children:"node"})," 能力的预加载脚本和自定义的一些插件全局函数，",(0,i.jsx)(n.code,{children:"index.js"})," 是页面的脚本代码。那么，对于 ",(0,i.jsx)(n.code,{children:"BrowserWindow"})," 而言，只要知道这个插件的路径，就可以通过 ",(0,i.jsx)(n.code,{children:"BrowserView"})," 来动态加载这个插件："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { BrowserView, BrowserWindow, session } from 'electron';\nimport path from 'path';\nimport {\n  WINDOW_HEIGHT,\n  WINDOW_PLUGIN_HEIGHT,\n  WINDOW_WIDTH,\n} from '@/common/constans/common';\n\nconst createView = (plugin, window) => {\n  const {\n    // plugin 的 入口 html 路径\n    indexPath,\n    // plugin 的预加载脚本路径\n    preload,\n  } = plugin;\n  // 构造 browserView 对象\n  view = new BrowserView({\n    webPreferences: {\n      webSecurity: false,\n      nodeIntegration: true,\n      contextIsolation: false,\n      // 加载 preload.js\n      preload, \n    },\n  });\n  // 挂载 browserView 到 browserWindow 对象上\n  window.setBrowserView(view);\n  // browserView 中加载插件入口 html\n  view.webContents.loadURL(indexPath);\n  // 监听 dom-ready 事件\n  view.webContents.once('dom-ready', () => {\n    // 设置 browserView 窗口的尺寸和位置\n    view.setBounds({\n      x: 0,\n      y: WINDOW_HEIGHT,\n      width: WINDOW_WIDTH,\n      height: WINDOW_PLUGIN_HEIGHT - WINDOW_HEIGHT,\n    });\n  });\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["至此，我们便实现了一个主程序窗口挂载插件的功能。详细源码可以见 ",(0,i.jsx)(n.a,{href:"https://github.com/rubickCenter/rubick/blob/master/src/main/browsers/runner.ts",target:"_blank",rel:"noopener noreferrer",children:"rubick runner.ts"}),"。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["一点说明：源码中的 runner.ts 的实现比上面的代码要稍微复杂一点，复杂的地方主要在需要处理 plugin 路径的问题以及处理一些插件加载的生命周期函数。关于路径处理部分，我们将会在",(0,i.jsx)(n.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304842330723319818",target:"_blank",rel:"noopener noreferrer",children:"《插件的安装、发布、卸载》"}),"中详细介绍。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"实现-openapi",children:["实现 openAPI",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现-openapi",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["前面我们提到了，插件可以通过 ",(0,i.jsx)(n.code,{children:"openAPI"})," 的能力调用主窗口提供的封装好的功能来加强原生能力的支持。就像微信小程序提供的 JS SDK 一样，可以轻松使用小程序提供的原生、扩展能力的支持。"]}),"\n",(0,i.jsxs)(n.p,{children:["其实要实现这一点，也很简单，就是需要利用 ",(0,i.jsx)(n.code,{children:"preload.js"})," 这一特性，我们可以在主窗口中加载 ",(0,i.jsx)(n.code,{children:"preload.js"})," 这里面包含了我们事先写好的一些通用全局函数，然后就可以在 ",(0,i.jsx)(n.code,{children:"BrowserView"})," 中来调用定义好的全局函数。"]}),"\n",(0,i.jsxs)(n.p,{children:["比如，我们需要实现一个 ",(0,i.jsx)(n.code,{children:"showNotification"})," 的系统通知功能函数，那么我们可以先实现一个 ",(0,i.jsx)(n.code,{children:"openAPI"})," 的 ",(0,i.jsx)(n.code,{children:"preload.js"})," 文件（",(0,i.jsx)(n.a,{href:"https://github.com/rubickCenter/rubick/blob/master/public/preload.js",target:"_blank",rel:"noopener noreferrer",children:"源码"}),"）："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// public/preload.js\nimport { contextBridge } from 'electron'\n\n// 发布消息到主进程\nconst ipcSend = (type, data) => {\n  ipcRenderer.send('msg-trigger', {\n    type,\n    data,\n  });\n};\n\n// 定义 rubick 的 openAPI\nconst rubick = {\n  showNotification(body, clickFeatureCode) {\n    ipcSend('showNotification', { body, clickFeatureCode });\n  },\n}\n// 在上下文隔离启用的情况下使用预加载\nif (process.contextIsolated) {\n  try {\n    contextBridge.exposeInMainWorld('rubick', rubick)\n  } catch (error) {\n    console.error(error)\n  }\n} else {\n  window.rubick = rubick\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["接着，主进程的 ",(0,i.jsx)(n.code,{children:"mainWindow"})," 就可以加载这个 ",(0,i.jsx)(n.code,{children:"preload.js"}),"："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// main/index.js\nconst mainWindow = new BrowserWindow({\n  // ...\n  webPreferences: {\n    preload: path.join(__static, 'preload.js'),\n    // ...\n  }\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["因为 ",(0,i.jsx)(n.code,{children:"showNotification"})," 用到了 Electron 主进程中的 ",(0,i.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/api/notification",target:"_blank",rel:"noopener noreferrer",children:"Notification"})," 模块，所以，我们通过 ",(0,i.jsx)(n.code,{children:"ipcRenderer.send"})," 的方式和主进程进行通信，来告诉主进程调用 ",(0,i.jsx)(n.code,{children:"Notification"})," 来实现消息通知："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// main/common/api.js\nclass API extends DBInstance {\n  init(mainWindow) {\n    // 响应 preload.js 事件\n    ipcMain.on('msg-trigger', async (event, arg) => {\n      // 执行具体逻辑\n      const data = await this[arg.type](arg);\n      // 返回数据\n      event.returnValue = data;\n    });\n  }\n  \n  public showNotification({ data: { body } }) {\n    if (!Notification.isSupported()) return false;\n    // 调用主进程展示通知窗口\n    const notify = new Notification({\n      title: plugin.pluginName,\n      body,\n      icon: plugin.logo,\n    });\n    notify.show();\n    return true;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["到这里，我们通过 ",(0,i.jsx)(n.code,{children:"BrowserView"})," 加载的插件，就可以通过 ",(0,i.jsx)(n.code,{children:"window.rubick.showNotification"})," 的方式来在界面调用出系统通知模块的功能。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["完整 API 能力的实现源码：",(0,i.jsx)(n.a,{href:"https://github.com/rubickCenter/rubick/blob/master/src/main/common/api.ts",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/rubickCenter/rubick/blob/master/src/main/common/api.ts"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["本小节，我们首先介绍了 ",(0,i.jsx)(n.code,{children:"Electron"})," 实现插件的几种，经过比较，我们选择了 ",(0,i.jsx)(n.code,{children:"BrowserView"})," 的实现。"]}),"\n",(0,i.jsx)(n.p,{children:"至此，我们已经完成了一个支持插件化能力的主程序，但是插件总不能都存储在用户本地吧，那么如何将开发好的插件共享给其他人一起使用呢？所以我们接下来要介绍的就是插件的安装、发布和卸载的知识。"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}let d=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC11%E7%AB%A0%E2%80%94%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%9A%E5%A6%82%E4%BD%95%E6%94%AF%E6%8C%81%E5%B7%A5%E5%85%B7%E6%8F%92%E4%BB%B6%E5%8C%96.md"]={toc:[{text:"实现插件加载",id:"实现插件加载",depth:2},{text:"1. Electron 的 Webview",id:"1-electron-的-webview",depth:3},{text:"2. Electron 中的 iframe",id:"2-electron-中的-iframe",depth:3},{text:"3. Electron 的 BrowserView",id:"3-electron-的-browserview",depth:3},{text:"基于 BrowserView 实现插件化能力",id:"基于-browserview-实现插件化能力",depth:2},{text:"实现 openAPI",id:"实现-openapi",depth:2},{text:"总结",id:"总结",depth:2}],title:"第11章—实战篇：如何支持工具插件化",headingTitle:"第11章—实战篇：如何支持工具插件化",frontmatter:{}}}}]);