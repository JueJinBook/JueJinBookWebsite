"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["15698"],{201736:function(e,n,r){r.r(n),r.d(n,{default:()=>eh});var s=r(552676),i=r(740453);let a=r.p+"static/image/29209c0f2a8eaf178b522d2c8eef2df5.52245654.gif",c=r.p+"static/image/31a75544c53f03b4eded35faade61a9d.cc62cc85.gif",t=r.p+"static/image/bcf3d983eb03425446c717c8ca8c2a35.c0f29685.gif",l=r.p+"static/image/e57b0973360a3d24a2383c525e865f02.eaa500ef.gif",d=r.p+"static/image/1b8061a385d79d2ff1e090025ed1fd1f.ff9dc02d.gif",o=r.p+"static/image/6b0adf871f377fcb0061c948ac58887b.11716817.gif",h=r.p+"static/image/6a71b7fe877d2ecd9879208033467522.f2531769.gif",x=r.p+"static/image/21bca044b7f2ff7261e29ef83037e30a.9f61251b.gif",p=r.p+"static/image/ee5cab35399013ced5ded7cb1aff457d.d2b28c45.gif",f=r.p+"static/image/3be7bedc6ea34d6dd98f9322c9cb2a4f.2593e02d.gif",j=r.p+"static/image/8523f0dc76a1ae6663f38ae175d9f7ff.521aa510.webp",g=r.p+"static/image/350ec17ebe7c09c6b682ef06a4facd3d.aee9573b.gif",m=r.p+"static/image/54d764cc8baa95a077b510b7a867cdf1.f23151db.gif",k=r.p+"static/image/da48e7fcc34019d1feb7291a4a59cdfa.fa4121b0.gif",S=r.p+"static/image/231bfebba277c837fea95141696b4308.906d8317.gif",b=r.p+"static/image/58f0017284a728e1b96a8b76c495d7d7.2466f52b.gif",u=r.p+"static/image/327f405fb068b9d819be9956c152aee9.658b9d9a.gif",v=r.p+"static/image/0c96d617269a399e2f1dfd7bbf8a287b.a054b64b.gif",y=r.p+"static/image/0193d04d8743e0ae74182ea0cbade462.3042c16d.gif",G=r.p+"static/image/75a6d1ad5b335543a4a92d0069e02728.03d4f181.gif",_=r.p+"static/image/f7edfaa8d1ebd6b591c260627a003ba4.378e8365.gif",V=r.p+"static/image/c0e88ead905d1a1344702e12669144b9.758f7ab0.gif",L=r.p+"static/image/fd84a04f8df975b70448365691fd8f47.2e89a32a.gif",w=r.p+"static/image/3d72e9b6024f3d6f6f76d777d6f84ced.74410872.gif",C=r.p+"static/image/6527b93aaeeded83aedf433e2e5cbfe7.6a5669ed.gif",M=r.p+"static/image/e31f62b7c4b4836d47715e0976a2dc49.50aa7ddf.gif",N=r.p+"static/image/2fb053422db2e250480677fce6985a36.c9f1ee3f.gif",E=r.p+"static/image/aed6bcade34179d51ce68d3bee823344.16c35117.gif",B=r.p+"static/image/86cbf706494a300633d076dcc3e327bb.ad798aec.gif",z=r.p+"static/image/2f2a0a7d5cd6ac8366709f2921390070.5b015807.gif",A=r.p+"static/image/f70913d40acb0588dafd5876d26e9d39.322a885b.gif",T=r.p+"static/image/4bc11c0ff2a2d6c03f5705768a9ea631.785ea80b.gif",H=r.p+"static/image/57d35d5cf891f6e79608a4c27a5de5fc.42348135.gif",q=r.p+"static/image/1e1e9ce94cffc26baa9a8be8146d01e7.76f1b42c.gif",D=r.p+"static/image/7d46e9eccdf552f1d5849b084318bafd.b4d850f0.gif",F=r.p+"static/image/394a59b87a9e8132e64486962f64c420.0dc8b2fd.gif",Y=r.p+"static/image/dd4bb0528253cc33bd2c77c8f40535b6.0dc8b2fd.gif",P=r.p+"static/image/b90b20505d66236f0aab02859d49f684.45abc369.gif",W=r.p+"static/image/239e5d62e57fea2eaf8edd45534f1caf.a1dbff47.gif",U=r.p+"static/image/4b2d1fcbabaf956229a12f1a97348005.1b21a950.gif",X=r.p+"static/image/cd9d32fd130d7c75ccf5e97e75e5d7c1.c8596115.gif",J=r.p+"static/image/245f4173fea70b1a3c94604c9a8271b2.ba2c02fe.gif",O=r.p+"static/image/8840890b049311dfbfadf2dd2727dd48.07d4a479.gif",R=r.p+"static/image/1d93bbed365230498aed91a7584d47ac.af35ce8e.gif",Z=r.p+"static/image/43eb8b7bc14c6eec28b41ecb0ac9d909.6f0d1af6.gif",K=r.p+"static/image/8076d89f40a007b2a32fb1458ed30d98.3d5bfee5.gif",I=r.p+"static/image/58549866a4540784dc6f305a2593a88e.48bf9c9a.gif",Q=r.p+"static/image/e96220782f44bfe5245217e8989e35bd.005abfd1.webp",$=r.p+"static/image/6b0073dda98b40dfee5a134c71d1758e.b112a8a5.webp",ee=r.p+"static/image/6a5f3aef5d5a3ac6e00c65c21a6d828c.b1cf3a0e.webp",en=r.p+"static/image/1a042929c697139b2ce4406c0e152f03.b0cc60fc.gif",er=r.p+"static/image/b1415b1088d4a2058e9003e68b972d2d.b6868b29.gif",es=r.p+"static/image/eab34c3fd311d340c3fcf360a5d45929.dc01856c.gif",ei=r.p+"static/image/e0dda3509025406169c65e19455087d2.a283b5c1.gif",ea=r.p+"static/image/ed5083cec9e4d71b4f798a1d7119d3c7.3973d3de.gif",ec=r.p+"static/image/556dcd352ddeecc64e0d39fa97881891.4884e708.gif",et=r.p+"static/image/d9a10281042b9f983673b307739a9185.04c34890.gif",el=r.p+"static/image/44c7498b5fbeb390c70eea74d23f2550.29d347a3.gif";function ed(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",h2:"h2",h3:"h3",strong:"strong",code:"code",pre:"pre",ul:"ul",li:"li",blockquote:"blockquote"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"46-高级篇svg-动画之使用-css-实现动画",children:["46-高级篇：SVG 动画之使用 CSS 实现动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#46-高级篇svg-动画之使用-css-实现动画",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:el,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318466233172005",target:"_blank",rel:"noopener noreferrer",children:"在上一节课结尾时"}),"，我曾抛出了 SMIL 动画虽然很强大，但它却逐渐的没落了，甚至有可能会像 Flash 一样，成为历史。但庆幸的是，SMIL 动画或者说 SVG 原生动画能很容易找到替代方案，比如我们这节课要聊的“带有 CSS 的 SVG 动画”，就是其中替代方案之一。"]}),"\n",(0,s.jsx)(n.p,{children:"“带有 CSS 的 SVG 动画”指的是使用 CSS 给 SVG 元素添加动画，有点类似于 CSS 给 HTML 元素添加动画。简而言之就是使用 CSS 技术为 SVG 元素添加动画。能这样做的主要原因之一是，SVG 和 CSS 的结合为 Web 开发者提供了强大的工具，它们的结合可以使 Web 开发者创建出引人入胜的动画效果。而且这种组合是轻量级的，带有 CSS 的 SVG 动画，可以获得最佳速度，这有助于创建加载更快、确保更流畅用户体验和更快页面加载的更好动画。"}),"\n",(0,s.jsx)(n.p,{children:"在这节课中，我们将探讨使用 SVG 和 CSS 创建简单且可扩展动画的过程。整个课程包含从基础到高级的内容，覆盖了线条动画、路径动画、关键帧动画、过渡效果等方面的技术。通过这节课的学习，你将能够优化 SVG 动画的性能，实现响应式设计，并应用这一技术创造出令人印象深刻的用户体验。我也将带领大家走进一个充满创意和创新的动画世界。"}),"\n",(0,s.jsx)(n.p,{children:"让我们一同探索，如何通过CSS的力量，将静态的SVG图形变成生动而引人入胜的用户体验。唯一的要求是你需要对 CSS 有基本的了解以及对 SVG 有一些了解。"}),"\n",(0,s.jsxs)(n.h2,{id:"使用-css-对-svg-进行动画的常见用例",children:["使用 CSS 对 SVG 进行动画的常见用例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-css-对-svg-进行动画的常见用例",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"SVG 可以顺利地适应不同的情况，当进行缩放时可以保持图形质量。使用 CSS 对 SVG 进行动画可以创造出各种引人注目的效果。在进行代码之前，让我们看一些常见的用例。"}),"\n",(0,s.jsxs)(n.h3,{id:"图标动画",children:["图标动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#图标动画",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:et,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 Web 应用或网站中使用 SVG 图标，并通过 CSS 动画为其添加生动的交互效果。动画 SVG 图标对于引导屏幕、加载旋转器、菜单切换、视频播放控件等方面的微交互和视觉反馈特别有益。"}),"\n",(0,s.jsxs)(n.h3,{id:"路径动画",children:["路径动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#路径动画",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ec,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"利用 CSS 的关键帧动画，创建路径动画以呈现线条、形状或图标的平滑过渡。这可以用于制作复杂的形状转变或线条的动态绘制效果。"}),"\n",(0,s.jsxs)(n.h3,{id:"按钮效果",children:["按钮效果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#按钮效果",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ea,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"通过 CSS 动画为按钮添加吸引人的动画效果，例如悬停时的颜色变化、阴影效果或按钮大小的微妙变化，以提高用户交互体验。"}),"\n",(0,s.jsxs)(n.h3,{id:"数据可视化",children:["数据可视化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据可视化",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ei,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"数据可视化可以使用 SVG 创建干净、可伸缩、动态且高度可定制的图表、图形和图表。利用 CSS 动画为 SVG 创建动态的数据可视化效果，例如图表、图形或地图。这可以通过动态改变数据点的位置、颜色或大小来实现。"}),"\n",(0,s.jsxs)(n.h3,{id:"形状转变",children:["形状转变",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#形状转变",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:es,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"利用 CSS 的形状转变功能，为 SVG 元素创建平滑的形状转变动画。这可以包括大小、旋转、倾斜等转换。"}),"\n",(0,s.jsxs)(n.h3,{id:"文字动画",children:["文字动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文字动画",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:er,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"将文字嵌入到 SVG 中，并使用 CSS 动画为文字添加各种效果，如逐字显示、颜色变化或文字路径动画。"}),"\n",(0,s.jsxs)(n.h3,{id:"加载动画",children:["加载动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#加载动画",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:en,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在页面加载或异步操作期间使用 SVG 图标，并通过 CSS 实现旋转、脉冲或其他加载动画，向用户传达操作正在进行中的信息。"}),"\n",(0,s.jsx)(n.p,{children:"这些只是使用 CSS 对 SVG 进行动画的一些常见用例。通过巧妙地结合 SVG 和 CSS，Web 开发者可以创造出丰富多彩、生动有趣的用户界面效果。"}),"\n",(0,s.jsxs)(n.h2,{id:"如何为动画准备-svg",children:["如何为动画准备 SVG",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何为动画准备-svg",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在这节课中，我们的重点是从头开始创建 SVG，并且使用 CSS 为 SVG 添加动画。在使用 CSS 为 SVG 添加动画效果之前，Web 开发人员需要了解 SVG 在内部是如何工作的。幸运的是，SVG 和 HTML 非常相似：",(0,s.jsx)(n.strong,{children:"我们使用 XML 语法定义 SVG 元素，并使用 CSS 为其设置样式，就像它们是 HTML 一样"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["SVG 元素是专门用于绘制图形的。我们可以使用 ",(0,s.jsx)(n.code,{children:"<rect>"})," 绘制矩形、",(0,s.jsx)(n.code,{children:"<circle>"})," 创建圆形等。它还定义了 ",(0,s.jsx)(n.code,{children:"<ellipse>"})," 、",(0,s.jsx)(n.code,{children:"<line>"})," 、",(0,s.jsx)(n.code,{children:"<polyline>"})," 、",(0,s.jsx)(n.code,{children:"<polygon>"})," 和 ",(0,s.jsx)(n.code,{children:"<path>"})," 等："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg>\n    \x3c!-- rect 用于创建矩形 --\x3e\n    <rect width="100" height="50" fill="blue" />\n    \n    \x3c!-- circle 用于创建圆形 --\x3e\n    <circle cx="50" cy="50" r="30" fill="red" />\n    \n    \x3c!-- ellipse 用于创建椭圆 --\x3e\n    <ellipse cx="50" cy="50" rx="40" ry="20" fill="green" />\n    \n    \x3c!-- line 用于创建直线 --\x3e\n    <line x1="0" y1="0" x2="100" y2="100" stroke="black" stroke-width="2" />\n    \n    \x3c!-- polyline 用于创建折线 --\x3e\n    <polyline points="0,0 50,50 100,0" stroke="blue" fill="none" />\n\n    \x3c!-- polygon 用于创建多边形 --\x3e\n    <polygon points="0,0 50,50 100,0" fill="yellow" />\n\n    \x3c!-- path 用于创建多路径，可以描述直线、曲线、圆弧等 --\x3e    \n    <path d="M10 80 Q 95 10 180 80" stroke="black" fill="transparent" />\n\n    \x3c!-- text 用于在 SVG中添加文本 --\x3e    \n    <text x="10" y="40" font-family="Arial" font-size="20" fill="black">Hello SVG!</text>\n</svg>    \n'})}),"\n",(0,s.jsxs)(n.p,{children:["在 SVG 中除了使用图形元素绘制静态形状之外，它还允许你使用 SMIL 创建动画。例如，你可以使用 ",(0,s.jsx)(n.code,{children:"<animate>"})," 、",(0,s.jsx)(n.code,{children:"<animateMtion>"})," 、",(0,s.jsx)(n.code,{children:"<aniamteTransform>"})," 和 ",(0,s.jsx)(n.code,{children:"<set>"})," 等元素给静态 SVG 元素添加动画效果。"]}),"\n",(0,s.jsxs)(n.p,{children:["虽然说，SVG 和 HTML 非常相似，但也有一些不同。比如，HTML 中大多数元素都可以有子元素，但在 SVG 中，其大多数元素是没有子元素的。这也意味着，SVG 中很多元素是不能相互嵌套的。不过，在 SVG 中，我们通常使用 ",(0,s.jsx)(n.code,{children:"<g>"})," 元素来组合多个 SVG 元素，进行组织结构化以及集体变换或动画。这个分组可以通过分配 ",(0,s.jsx)(n.code,{children:"id"})," 或类名来样式化。然而，对于单个 SVG 元素或单个组，组标签是不必要的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" class="icon--hamburger" width="200" height="200" viewBox="0 0 1024 1024">\n    <g class="hamburger hamburger__top">...</g>\n    <g class="hamburger hamburger__middle">...</g>\n    <g class="hamburger hamburger__bottom">...</g>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["HTML 和 SVG 之间的另一个重要区别是 ",(0,s.jsx)(n.strong,{children:"SVG 元素不像 HTML 元素那样受 CSS 盒模型的约束"}),"。这使得定位和转换这些元素变得更加棘手，并且乍看之下可能会显得不太直观。然而，",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7357982293367422991",target:"_blank",rel:"noopener noreferrer",children:"一旦你理解了 SVG 坐标系统和变换的工作原理"}),"，操作 SVG 就会变得更加容易，也更加合乎逻辑。",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345677438053810214",target:"_blank",rel:"noopener noreferrer",children:"这里简单地回顾一下控制 SVG 坐标系统的三个最重要的 SVG 属性"}),"：",(0,s.jsx)(n.code,{children:"viewport"}),"、",(0,s.jsx)(n.code,{children:"viewBox"})," 和 ",(0,s.jsx)(n.code,{children:"preserveAspectRatio"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ee,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["在 SVG 中，",(0,s.jsx)(n.code,{children:"<svg>"})," 元素的 ",(0,s.jsx)(n.code,{children:"preserveAspectRatio"}),"、",(0,s.jsx)(n.code,{children:"viewBox"}),"、",(0,s.jsx)(n.code,{children:"width"})," 和 ",(0,s.jsx)(n.code,{children:"height"})," 属性之间有密切的关系，它们共同决定了 SVG 图形在渲染时的表现和显示方式。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"preserveAspectRatio"})})," 属性：用于控制 SVG 图形在视口中的放置方式和缩放行为。其语法格式是 ",(0,s.jsx)(n.code,{children:'preserveAspectRatio="align meet/slice defer"'}),"；",(0,s.jsx)(n.code,{children:"align"})," 可选值：",(0,s.jsx)(n.code,{children:"none"}),"、",(0,s.jsx)(n.code,{children:"xMinYMin"}),"、",(0,s.jsx)(n.code,{children:"xMidYMin"}),"、",(0,s.jsx)(n.code,{children:"xMaxYMin"}),"、",(0,s.jsx)(n.code,{children:"xMinYMid"}),"、",(0,s.jsx)(n.code,{children:"xMidYMid"}),"、",(0,s.jsx)(n.code,{children:"xMaxYMid"}),"、",(0,s.jsx)(n.code,{children:"xMinYMax"}),"、",(0,s.jsx)(n.code,{children:"xMidYMax"}),"、",(0,s.jsx)(n.code,{children:"xMaxYMax"}),"。",(0,s.jsx)(n.code,{children:"meet"})," 表示保持纵横比的前提下尽量占满视口；",(0,s.jsx)(n.code,{children:"slice"})," 表示保持纵横比的前提下尽量不超出视口。",(0,s.jsx)(n.code,{children:"defer"})," 表示是否推迟对 ",(0,s.jsx)(n.code,{children:"preserveAspectRatio"})," 的处理。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"viewBox"})})," 属性：定义 SVG 用户坐标系统的位置和大小。其语法格式是 ",(0,s.jsx)(n.code,{children:'viewBox="min-x min-y width height"'}),"；其中 ",(0,s.jsx)(n.code,{children:"min-x"})," 和 ",(0,s.jsx)(n.code,{children:"min-y"})," 定义了视口坐标系中的左上角位置；",(0,s.jsx)(n.code,{children:"width"})," 和 ",(0,s.jsx)(n.code,{children:"height"})," 定义了视口坐标系的宽度和高度。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"width"})})," 和 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"height"})})," 属性：分别定义 SVG 元素在文档中的宽度和高度。通常，如果没有指定 ",(0,s.jsx)(n.code,{children:"width"})," 和 ",(0,s.jsx)(n.code,{children:"height"}),"，SVG 将会根据视口的大小自动调整。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这些属性之间的关系可以通过以下方式理解："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["如果没有指定 ",(0,s.jsx)(n.code,{children:"width"})," 和 ",(0,s.jsx)(n.code,{children:"height"}),"，SVG 将会根据视口的大小自动调整，同时 ",(0,s.jsx)(n.code,{children:"viewBox"})," 属性定义了用户坐标系统的大小和位置。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"preserveAspectRatio"})," 属性则决定了在调整大小时，是否保持 SVG 图形的纵横比，以及如何在视口中对齐。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["如果指定了 ",(0,s.jsx)(n.code,{children:"width"})," 和 ",(0,s.jsx)(n.code,{children:"height"}),"，SVG 将会被强制缩放到指定的大小，但 ",(0,s.jsx)(n.code,{children:"preserveAspectRatio"})," 仍然可以影响如何在这个指定大小内显示。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"例如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'<svg viewBox="0 0 100 50" width="200" height="100" preserveAspectRatio="xMidYMid meet">\n  \x3c!-- SVG 内容 --\x3e\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在这个例子中，",(0,s.jsx)(n.code,{children:"viewBox"})," 定义了用户坐标系统的大小为 ",(0,s.jsx)(n.code,{children:"100x50"}),"，而 ",(0,s.jsx)(n.code,{children:"width"})," 和 ",(0,s.jsx)(n.code,{children:"height"})," 定义了 SVG 元素在文档中的大小为 ",(0,s.jsx)(n.code,{children:"200x100"}),"。",(0,s.jsx)(n.code,{children:"preserveAspectRatio"})," 则指示在这个大小范围内如何对齐和缩放 SVG 图形。"]}),"\n",(0,s.jsxs)(n.p,{children:["尽管在具备一定 SVG 的基础上，",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7345813971552698406",target:"_blank",rel:"noopener noreferrer",children:"你可以在文档中手工编写 SVG 代码来绘制所需图形"}),"，但对于复杂的图形而言，你可能还是需要依赖矢量图形软件，例如 Sketch 和 Figma 等。我通常会基于 Figma 软件来辅助我绘制一些复杂的矢量图形。当然，你也可以从一些矢量图库上来获取所需图形，例如 ",(0,s.jsx)(n.a,{href:"https://undraw.co/",target:"_blank",rel:"noopener noreferrer",children:"Undraw"})," 提供了很多优秀的 SVG 插图："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:$,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["不过，需要注意的是，当你通过图形编辑软件或其他生成 SVG 图形工具获得的 SVG 代码或 ",(0,s.jsx)(n.code,{children:".svg"})," 文件，可能会包含一些不必要的代码。因此，建议使用像 ",(0,s.jsx)(n.a,{href:"https://jakearchibald.github.io/svgomg/",target:"_blank",rel:"noopener noreferrer",children:"SVGOMG"})," 或 ",(0,s.jsx)(n.a,{href:"https://iconly.io/tools/svg-cleaner",target:"_blank",rel:"noopener noreferrer",children:"SVG Cleaner "}),"等工具对 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368114202180845605",target:"_blank",rel:"noopener noreferrer",children:"SVG 代码进行优化"}),"是非常有必要的，这些工具可以帮助你最小化 SVG 文件大小和删除冗余标签和元数据。如此一来，你将获得一份整洁干净的 SVG 代码："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Q,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["SVGOMG：",(0,s.jsx)(n.a,{href:"https://jakearchibald.github.io/svgomg/",target:"_blank",rel:"noopener noreferrer",children:"https://jakearchibald.github.io/svgomg/"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"应用-css-到-svg",children:["应用 CSS 到 SVG",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#应用-css-到-svg",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["假设你已经知道如何获得 SVG 代码，不管是硬编码还是通过工具获得。有了这个基础之后，我们就可以进入下一步，",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7351339840161447945",target:"_blank",rel:"noopener noreferrer",children:"应用 CSS 到 SVG"})," 。"]}),"\n",(0,s.jsx)(n.p,{children:"众所周知，有多种不同的方式可以将 CSS 应用到 HTML 中。同样的，也有多种不同的方式可以将 CSS 应用于 SVG 中。"}),"\n",(0,s.jsxs)(n.p,{children:["由于 SVG 与 HTML 无缝集成，它支持内联 CSS 样式。你可以使用 ",(0,s.jsx)(n.code,{children:"style"})," 属性将 CSS 样式添加到 SVG 元素上，像就在 HTML 中一样。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg width="64" height="64" viewBox="0 0 48 48">\n    <rect width="100%" height="8" style="fill: navy; stroke: red;" />\n    <rect width="100%" height="8" style="fill: blue; stroke: orange;" />\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码演示了使用 CSS 给 ",(0,s.jsx)(n.code,{children:"<rect>"})," 元素设置填充色（",(0,s.jsx)(n.code,{children:"fill"}),"）和描边色（",(0,s.jsx)(n.code,{children:"stroke"}),"）。"]}),"\n",(0,s.jsxs)(n.p,{children:["第二种将 CSS 样式应用于 SVG 的方法涉及使用 CSS 的 ",(0,s.jsx)(n.code,{children:"@import"})," 规则。此规则放置在 SVG 内的 ",(0,s.jsx)(n.code,{children:"<style>"})," 元素中，用于引用和导入外部 CSS 样式表。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg width="64" height="64" viewBox="0 0 48 48">\n    <style>\n        @import url(style.css);\n    </style>\n    \x3c!-- SVG 内容 --\x3e  \n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["第三种方式是直接在 SVG 内部编写样式，但最好将其包含在 ",(0,s.jsx)(n.code,{children:"CDATA"})," 部分中，以防止与 XML 解析可能发生冲突："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg width="64" height="64" viewBox="0 0 48 48">\n    \x3c!-- 请注意，<style> 标签包含在SVG元素内部，包裹在CDATA中。--\x3e\n    <style type="text/css">\n        <![CDATA[\n            .rect {\n                fill: green;\n                stroke: orange;\n            }\n        ]]>\n    </style>\n    \n    <g>\n        <rect class="rect" width="100%" height="8" />\n        <rect class="rect" width="100%" height="8" />\n    </g>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:"最后一种方式是将 CSS 和 SVG 分离，即把 CSS 和 SVG 代码放置在单独的文件中，然后在包含这些 SVG 文件的文档中使用它们。因此，根据使用它们的文档，SVG 将自动获得样式。我个人是比较喜欢这种方式，可以保持 SVG 代码整洁干净，也便于对 SVG 样式调整。这一点与 CSS 和 HTML 分离是一样的。"}),"\n",(0,s.jsxs)(n.h2,{id:"给-svg-添加-css-动画",children:["给 SVG 添加 CSS 动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#给-svg-添加-css-动画",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"通常情况，给 SVG 添加动画的方式有 SMIL、CSS 和 WAAPI 等，但在这里我们主要围绕着“CSS 给 SVG 元素应动画”来展开。"}),"\n",(0,s.jsxs)(n.p,{children:["在 CSS 中，我们主要分为过渡动画和关键帧动画两大类型，即使用 ",(0,s.jsx)(n.code,{children:"transition"})," 和 ",(0,s.jsx)(n.code,{children:"animation"})," 给元素添加动画。也就是说，我们也可以通过给 SVG 元素应用 ",(0,s.jsx)(n.code,{children:"transition"})," 和 ",(0,s.jsx)(n.code,{children:"animation"})," ，实现不同类型的动画效果。"]}),"\n",(0,s.jsxs)(n.h3,{id:"给-svg-添加过渡动画",children:["给 SVG 添加过渡动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#给-svg-添加过渡动画",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["CSS 过渡（",(0,s.jsx)(n.code,{children:"transition"}),"）允许我们定义属性更改的速率和持续时间，与立即从起始值跳到结束值不同，值会平滑过渡。就像下面这个示例，当你用鼠标悬停在卡片时，图标的颜色会发生变化："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/gOJzOzw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOJzOzw"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以使用 ",(0,s.jsx)(n.code,{children:"transition"})," 定义 SVG 图标的 ",(0,s.jsx)(n.code,{children:"fill"})," 属性过渡效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer transition {\n    .card {\n        color: #079ad9;\n        transition: background-color 300ms ease-in, color 300ms ease-in, scale 300ms ease-in;\n    \n        svg {\n            fill: #079ad9;\n            transition: fill 300ms ease-in;\n        }\n        \n        &:hover {\n            background-color: #079ad9;\n            color: white;\n            scale: 1.1;\n    \n            svg {\n                fill: #fff;\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["其实给 SVG 颜色（例如 ",(0,s.jsx)(n.code,{children:"fill"})," 、",(0,s.jsx)(n.code,{children:"stroke"})," 等）添加过渡动画效果，有一个小技巧，那就是利用 CSS 的 ",(0,s.jsx)(n.code,{children:"currentColor"})," 属性，然后对 ",(0,s.jsx)(n.code,{children:"color"})," 属性进行过渡动画处理。使用这个技巧有一个前提条件，那就是需要将 SVG 对应的元素的 ",(0,s.jsx)(n.code,{children:"fill"})," 的值设置为 ",(0,s.jsx)(n.code,{children:"currentColor"})," ，你也可以在 CSS 中设置 ",(0,s.jsx)(n.code,{children:"fill"})," 的值为 ",(0,s.jsx)(n.code,{children:"currentColor"})," 。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="card">\n    <svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n        <path fill="currentColor" d="M13.5 5.5c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zM9.8 8.9L7 23h2.1l1.8-8 2.1 2v6h2v-7.5l-2.1-2 .6-3C14.8 12 16.8 13 19 13v-2c-1.9 0-3.5-1-4.3-2.4l-1-1.6c-.4-.6-1-1-1.7-1-.3 0-.5.1-.8.1L6 8.3V13h2V9.6l1.8-.7" />\n    </svg>\n    Walk\n</div>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer transition {\n    .card {\n        color: #079ad9;\n        transition: background-color 300ms ease-in, color 300ms ease-in, scale 300ms ease-in;\n    \n        svg {\n            transition: color 300ms ease-in;\n        }\n        \n        &:hover {\n            background-color: #079ad9;\n            color: white;\n            scale: 1.1;\n    \n            svg {\n                color: #fff;\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["最终得到的效果是相同的，但相比而言，这种方式的灵活性要更强，它能自动匹配组件的文本颜色（",(0,s.jsx)(n.code,{children:"color"}),"）："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:K,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/qBGYBYz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBGYBYz"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["除了可以动画化 SVG 颜色之外，还可以使用 ",(0,s.jsx)(n.code,{children:"transition"})," 给 SVG 添加微动效，使交互变得更具吸引力。例如下面这个下载按钮，当用户鼠标悬浮在按钮上时，下载图标具有微妙的动画效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Z,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/WNBJNyZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNBJNyZ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["按钮上的 SVG 图标是由三个 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素构建的，并且将需要动画化的部分（箭头部分）用一个 ",(0,s.jsx)(n.code,{children:"<g>"})," 元素包裹起来，同时将类名命名为 ",(0,s.jsx)(n.code,{children:"arrow"})," 。这样做是为了在 CSS 能更好的选中这部分，然后为其添加微妙的动画效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="button">\n    Download\n    <svg xmlns="http://www.w3.org/2000/svg" width="500" height="500" viewBox="0 0 500 500">\n        <defs>\n            <clipPath id="a">\n                <path d="M0 0h500v500H0z" />\n            </clipPath>\n            <clipPath id="c">\n                <path fill="#fff" d="M416.771 26H79.425l-.732 350.612 338.693 2L416.771 26" />\n            </clipPath>\n            <clipPath id="b">\n                <path fill="#fff" d="M416.732-248H79.386l-.04 352.612h337.347L416.732-248" />\n            </clipPath>\n          </defs>\n          <g clip-path="url(#a)">\n              <path fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="50" d="M93.159 306.026v48.543c0 21.87 17.728 39.601 39.598 39.601h233.82c21.87 0 39.598-17.731 39.598-39.601v-48.543" />\n              \x3c!-- 需要动画的部分，命名为 arrow --\x3e\n              <g clip-path="url(#c)" class="arrow">\n                  <path fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="50" d="M249.667 271.794V48.165" transform="matrix(1 0 0 .9901 0 6.545)" />\n                  <path fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="50" d="m-74.576-32.89 72.811 67.723a2.498 2.498 0 0 0 3.53 0l73.207-67.306" transform="matrix(1 0 0 .9901 249.666 265.39)" />\n              </g>\n          </g>\n    </svg>\n</div>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["我们使用 CSS 为 ",(0,s.jsx)(n.code,{children:".arrow"})," 添加了一个很微妙的动画，在鼠标悬浮状态时，沿着 ",(0,s.jsx)(n.code,{children:"y"})," 轴向上移动："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer transition {\n    .button {\n        transition: opacity 300ms ease;\n    \n        .arrow {\n            transform-origion: center bottom;\n            transition: translate 300ms ease;\n        }\n    \n        &:hover {\n            opacity: 0.9;\n    \n            .arrow {\n                translate: 0 -50px;\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面所演示的是两个非常常见，而且非常简单的过渡动画效果。你可能已经发现了，使用 ",(0,s.jsx)(n.code,{children:"transition"})," 为 SVG 元素添加过渡动画效果和为 HTML 元素添加过渡动画效果是相似的。也就是说，为 SVG 元素添加过渡动画效果，技术不是问题，我们始终缺少的是创意，是想法。"]}),"\n",(0,s.jsxs)(n.h3,{id:"给-svg-添加关键帧动画",children:["给 SVG 添加关键帧动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#给-svg-添加关键帧动画",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以通过使用 CSS 的 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 规则定义一系列动画的关键帧，指导元素随时间的推移而演变。这些关键帧将 SVG 元素转化为引人入胜的动画。"]}),"\n",(0,s.jsxs)(n.p,{children:["例如，我们把一个 ",(0,s.jsx)(n.code,{children:"bounce"})," 的动画效果应用于上面示例中的 ",(0,s.jsx)(n.code,{children:".arrow"})," 上："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes bounce {\n        from,\n        20%,\n        53%,\n        to {\n            animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n            translate3d: 0 0 0;\n        }\n    \n        40%,\n        43% {\n            animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n            translate: 0 -30px 0;\n            scale: 1 1.1;\n        }\n    \n        70% {\n            animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n            translate: 0 -15px 0;\n            scale: 1 1.05;\n        }\n    \n        80% {\n            transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n            translate: 0 0 0;\n            scale: 1 0.95;\n        }\n    \n        90% {\n            translate: 0 -4px 0;\n            scale: 1 1.02;\n        }\n    }\n\n    .arrow {\n        transform-origin: center bottom;\n    \n        .button:hover & {\n            animation: bounce 300ms ease infinite;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"你现在看到的效果将如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/mdYLraX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdYLraX"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"接着再来看一个 CSS 关键帧给 SVG 添加动画的案例。假设你使用 SVG 绘制了一个小铃铛的图形："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="bell" width="200" height="200" viewBox="-100 -100 200 200">\n    <g stroke="#001514" stroke-width="2">\n        <circle cx="0" cy="-45" r="7" fill="#4F6D7A" />\n        <circle class="bell--tongue" cx="0" cy="50" r="10" fill="#F79257" />\n        <path d="M -50 40 L -50 50 L 50 50 L 50 40 Q 40 40 40 10 C 40 -60 -40 -60 -40 10 Q -40 40 -50 40" fill="#FDEA96" />\n    </g>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:"我们通过 CSS 给这个小铃铛添加一个摆动的动画效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    .bell {\n        transform-origin: center 30%;\n    }\n\n    .bell,.bell--tongue {\n        animation: ring .5s ease-in-out -.25s infinite alternate;\n    }\n\n    @keyframes ring {\n        from {\n            rotate: -20deg;\n        }\n        to {\n            rotate: 20deg;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:O,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/PoveGvB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PoveGvB"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["上面所演示的都是最基础的 SVG 动画。我们还可以使 SVG 动画变得更为复杂，例如下面这个 ",(0,s.jsx)(n.code,{children:"TodoList"})," 效果，使用 SVG 给复选框添加动画，当用户勾选和不勾选复选框都会有一个动画效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:J,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/qBGYazm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBGYazm"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"上面示例中复选框选中和未选中两个状态的以及文本的删除线都是 SVG 绘制的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<label class="todo">\n    <input class="todo__state" type="checkbox" />\n\n    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 200 25" class="todo__icon">\n        <use xlink:href="#todo__line" class="todo__line"></use>\n        <use xlink:href="#todo__box" class="todo__box"></use>\n        <use xlink:href="#todo__check" class="todo__check"></use>\n        <use xlink:href="#todo__circle" class="todo__circle"></use>\n    </svg>\n    <div class="todo__text">现代 Web 布局</div>\n</label>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这里使用了 SVG 的 ",(0,s.jsx)(n.code,{children:"<use>"})," ，重复利用了下面这个 SVG 绘制的图形："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 0 0" style="position: absolute; z-index: -1; opacity: 0;">\n    <defs>\n        <linearGradient id="boxGradient" gradientUnits="userSpaceOnUse" x1="0" y1="0" x2="25" y2="25">\n            <stop offset="0%" stop-color="#27FDC7" />\n            <stop offset="100%" stop-color="#0FC0F5" />\n        </linearGradient>\n    \n        <linearGradient id="lineGradient">\n            <stop offset="0%" stop-color="#0FC0F5" />\n            <stop offset="100%" stop-color="#27FDC7" />\n        </linearGradient>\n    \n        <path id="todo__line" stroke="url(#lineGradient)" d="M21 12.3h168v0.1z" />\n        <path id="todo__box" stroke="url(#boxGradient)" d="M21 12.7v5c0 1.3-1 2.3-2.3 2.3H8.3C7 20 6 19 6 17.7V7.3C6 6 7 5 8.3 5h10.4C20 5 21 6 21 7.3v5.4" />\n        <path id="todo__check" stroke="url(#boxGradient)" d="M10 13l2 2 5-5" />\n        <circle id="todo__circle" cx="13.5" cy="12.5" r="10" />\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:"然后使用 CSS 给 SVG 元素添加下面的动画效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes explode {\n        30% {\n            stroke-width: 3;\n            stroke-opacity: 1;\n            transform: scale(0.8) rotate(40deg);\n        }\n        100% {\n            stroke-width: 0;\n            stroke-opacity: 0;\n            transform: scale(1.1) rotate(60deg);\n        }\n    }\n\n    .todo__icon {\n        fill: none;\n        stroke: #27fdc7;\n        stroke-width: 2;\n        stroke-linejoin: round;\n        stroke-linecap: round;\n    }\n    \n    .todo__line,\n    .todo__box,\n    .todo__check {\n        transition: stroke-dashoffset 0.8s cubic-bezier(0.9, 0, 0.5, 1);\n    }\n    \n    .todo__circle {\n        stroke: #27fdc7;\n        stroke-dasharray: 1 6;\n        stroke-width: 0;\n        transform-origin: 13.5px 12.5px;\n        transform: scale(0.4) rotate(0deg);\n        animation: none 0.8s linear;\n    }\n\n    .todo__box {\n        stroke-dasharray: 56.1053, 56.1053;\n        stroke-dashoffset: 0;\n        transition-delay: 0.16s;\n    }\n    \n    .todo__check {\n        stroke: #27fdc7;\n        stroke-dasharray: 9.8995, 9.8995;\n        stroke-dashoffset: 9.8995;\n        transition-duration: 0.32s;\n    }\n    \n    .todo__line {\n        stroke-dasharray: 168, 1684;\n        stroke-dashoffset: 168;\n    }\n    \n    .todo__circle {\n        animation-delay: 0.56s;\n        animation-duration: 0.56s;\n    }\n    \n    .todo__state:checked {\n        ~ .todo__text {\n            transition-delay: 0s;\n            color: #5ebec1;\n            opacity: 0.6;\n        }\n        \n        ~ .todo__icon .todo__box {\n            stroke-dashoffset: 56.1053;\n            transition-delay: 0s;\n        }\n        \n        ~ .todo__icon .todo__line {\n            stroke-dashoffset: -8;\n        }\n        \n        ~ .todo__icon .todo__check {\n            stroke-dashoffset: 0;\n            transition-delay: 0.48s;\n        }\n        \n        ~ .todo__icon .todo__circle {\n            animation-name: explode;\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["其中，",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 属性控制用于描边路径的虚线和间隙的模式。如果你想将线条绘制为一组虚线和间隙，而不是一条连续的墨迹，这就是你会使用的属性。",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 属性指定从虚线模式的哪里开始绘制虚线。它们都可以使用 CSS 进行控制。"]}),"\n",(0,s.jsxs)(n.p,{children:["你将在 CSS 中利用 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 和 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 属性为 SVG 路径添加动画。它们给用户一种路径逐渐被绘制的幻觉。稍后的示例还会用到这两种属性。"]}),"\n",(0,s.jsxs)(n.h2,{id:"你可以使用-css-对哪些内容进行动画呢",children:["你可以使用 CSS 对哪些内容进行动画呢？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#你可以使用-css-对哪些内容进行动画呢",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"CSS 使你能够通过对各种属性进行动画来创建动态的视觉效果。虽然并非所有属性都是“可动画的”，但许多属性可以使用 CSS 与 SVG 进行平滑地过渡或动画。"}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们通过一些实际案例来向大家演示 CSS 对 SVG 动画化的威力，它可以通过 ",(0,s.jsx)(n.code,{children:"transform"})," 、",(0,s.jsx)(n.code,{children:"opacity"})," 和 ",(0,s.jsx)(n.code,{children:"color"})," 等属性转换静态 SVG，这些动画利用基本数学来创建动态的菜单切换、加载动画、流体线条移动、生动的插图以及平滑的文本动画。"]}),"\n",(0,s.jsxs)(n.h3,{id:"svg-线条动画",children:["SVG 线条动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-线条动画",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我喜欢 SVG 线条动画，因为我觉得它能给用户一种线条（路径）逐渐被绘制的幻觉，这种效果看起来很棒，而且足够简单，以至于这种效果在 Web 上得到了广泛的运用。"}),"\n",(0,s.jsxs)(n.p,{children:["正如上面那个 ",(0,s.jsx)(n.code,{children:"TodoList"})," 中复选框的效果所示，可以使用 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 和 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 属性来对 SVG 进行动画化，从而实现线条动画效果。虽然使用它们能很容易实现 SVG 线条动画，但其中也有一些较少人知道的或者高级技巧。其中包括操纵起点或使线条向多个方向延伸。"]}),"\n",(0,s.jsxs)(n.p,{children:["首先简单的了解一下 SVG 的 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 属性。它用于使 SVG 路径成为虚线而不是实线。这个属性的值越大，虚线之间的间隔就越大。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .heart {\n        --stroke-dasharray: 90;\n        stroke-dasharray: var(--stroke-dasharray);\n        transition: stroke-dasharray 300ms ease;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["尝试拖动示例中的手柄来改变 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 属性的值："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:X,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/PoveGrd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PoveGrd"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["上面示例中的心形是 SVG 的 ",(0,s.jsx)(n.code,{children:"path"})," 元素绘制的，整个路径的长度是 ",(0,s.jsx)(n.code,{children:"100"})," 个单位（根据 ",(0,s.jsx)(n.code,{children:"SVGGeometryElement.getTotalLength()"})," 确定）。其中红色标记是表示路径的起点。假设 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 的值为 ",(0,s.jsx)(n.code,{children:"50"})," ，将表示线条有 ",(0,s.jsx)(n.code,{children:"50"})," 个单位实色，然后是 ",(0,s.jsx)(n.code,{children:"50"})," 个单位的空白。"]}),"\n",(0,s.jsxs)(n.p,{children:["也就是说，我们可以使用 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 属性来定义线条虚线间隙模式。它最多可以采用四个值，取值不同时，所描述的虚线则不同："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["一个值，例如 ",(0,s.jsx)(n.code,{children:"stroke-dasharray: 40"})," ，表示虚线和间隙的大小相同"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["两个值，例如 ",(0,s.jsx)(n.code,{children:"stroke-dasharray: 40 20"})," ，第一个值用于虚线长度，第二个值应用于间隙"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["三个值，例如 ",(0,s.jsx)(n.code,{children:"stroke-dasharray: 40 20 80"})," ，第一个值用于第一段虚线长度，第二个值应用于间隙，第三个值用于第二段虚线长度，依此类推"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["四个值，例如 ",(0,s.jsx)(n.code,{children:"stroke-dasharray: 40 20 80 120"})," ，第一个值用于第一段虚线长度，第二个值应用于第一个间隙，第三个值应用于第二段虚线长度，第四个值应用于第二个间隙，依此类推"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["除了使用",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 使虚线的长度不同之外，我们还可以使用 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 来偏移描边位置。如果我们改变这个属性，看起来就像我们的虚线沿着路径移动一样。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .heart {\n        --stroke-dasharray: 90;\n        --stroke-dashoffset: 90;\n        stroke-dasharray: var(--stroke-dasharray);\n        stroke-dashoffset: var(--stroke-dashoffset);\n        transition: all 300ms ease;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/qBGYaem",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBGYaem"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["如此一来，我们就可以在 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中改变 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 的值，实现 SVG 线条动画。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes reveal {\n        to {\n          stroke-dashoffset: 0;\n        }\n    }\n  \n    .heart {\n        stroke-dasharray: 100;\n        stroke-dashoffset: 100;\n        animation: reveal 2s ease-in-out infinite;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:W,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/GRadjVG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRadjVG"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["上面这个示例，从起点开始（红色标记处），动画在 ",(0,s.jsx)(n.code,{children:"100"})," 个单位后结束。CSS 的 ",(0,s.jsx)(n.code,{children:"stroke-dasharray: 100"})," 定义了虚线的模式，",(0,s.jsx)(n.code,{children:"100"})," 个单位实色，然后是 ",(0,s.jsx)(n.code,{children:"100"})," 个单位的空白（间隙）。使用 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset: 100"})," ，将其向后拉了 ",(0,s.jsx)(n.code,{children:"100"})," 个单位。然后在 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中将 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 减少到 ",(0,s.jsx)(n.code,{children:"0"})," ，以便动画可以将线条的实色部分推入视图，使人产生一种绘制线条的动画效果。"]}),"\n",(0,s.jsxs)(n.p,{children:["类似的方式，可以给 SVG 绘制的任何线条（",(0,s.jsx)(n.code,{children:"<line>"})," 、",(0,s.jsx)(n.code,{children:"<circle>"})," 、",(0,s.jsx)(n.code,{children:"<polygon>"})," 或 ",(0,s.jsx)(n.code,{children:"<path>"})," 等）添加动画效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 120 120" width="80vh">\n    <defs>\n        <g id="gg">\n            <line id="line" x1="10" y1="10" x2="110" y2="10" />\n            <rect id="rect" x="10" y="26.3" width="25" height="25" />\n            <circle id="circle" cx="60" cy="38.8" r="15.92" />\n            <path id="football" d="M106.1,19.2C97,22,90.3,27.1,87.3,34.3s-1.8,15.6,2.7,24c9.1-2.8,15.9-7.9,18.9-15.1 C111.8,36,110.6,27.6,106.1,19.2z" />\n            <path id="bit" d="M92,101.3c1.4-3,3-5.9,4.8-8.7c3-5.1,9-10.1,6.9-17.4c-0.9-3.3-5.9-9.8-9.3-5.9c-4.4,5,5.5,17.6,8,21.1 C112.5,105.9,85.1,116.1,92,101.3z" />\n            <polygon id="diamond" points="11.4,96.8 22.5,66 33.6,96.8 22.5,110" />\n            <path id="heart" d="M60,102.3c2.6-1.9,4.9-4.2,7.1-6.5c4.6-4.5,10.5-13,5.6-19.5c-1.3-1.7-3.3-2.8-5.5-2.8c-4,0-7.2,3.5-7.2,7.8 c0-4.3-3.2-7.8-7.2-7.8c-2.2,0-4.2,1.1-5.5,2.8c-4.9,6.4,1,14.9,5.6,19.5C55.1,98.1,57.4,100.5,60,102.3z" />\n        </g>\n    </defs>\n    \n    \x3c!-- 灰色图形 --\x3e\n    <g fill="none" stroke="#EEE" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">\n        <use xlink:href="#gg" />\n    </g>\n    \n    \x3c!-- 动画元素 --\x3e\n    <g  fill="none" stroke="#000" stroke-width="1" stroke-linecap="butt" stroke-linejoin="round">\n        <use xlink:href="#line" class="anim" />\n        <use xlink:href="#rect" class="anim" />\n        <use xlink:href="#circle" class="anim" />\n        <use xlink:href="#football" class="anim" />\n        <use xlink:href="#bit" class="anim" />\n        <use xlink:href="#diamond" class="anim" />\n        <use xlink:href="#heart" class="anim" />\n    </g>\n    \n    \x3c!-- 红色标记线 --\x3e\n    <g fill="none" stroke="#F32D66" stroke-width="3" stroke-linecap="butt" stroke-linejoin="round" stroke-dasharray="0.5 100">\n        <use xlink:href="#gg" />\n    </g>\n</svg>  \n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLRgOO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLRgOO"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正如你所看到的，我们可以按照下面的模式动画化绘制线条："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes reveal {\n    to {\n        stroke-dashoffset: 0;\n    }\n}\n\n.animated {\n    --line-full-length: FULL_LENGTH;\n    stroke-dashoffset: var(--line-full-length);\n    stroke-dasharray: var(--line-full-length);\n    \n    animation: reveal 1s ease-in-out infinite;   \n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["注意，",(0,s.jsx)(n.code,{children:"FULL_LENGTH"})," 是指 SVG 路径的长度，可以 根据 ",(0,s.jsx)(n.code,{children:"SVGGeometryElement.getTotalLength()"})," 获得该值。另外，",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 应尽量避免使用负值，因为负值在 Safari 上可能会出现闪烁的现象。"]}),"\n",(0,s.jsxs)(n.p,{children:["在给 SVG 线条添加动画时，你希望能控制动画的方向，比如，按顺时针方向运动或按逆时针方向运动。在上面的示例中，足球（",(0,s.jsx)(n.code,{children:"football"}),"）和心形（",(0,s.jsx)(n.code,{children:"heart"}),"）的方向是逆时针的，其他图形则是顺时针的。如果，希望足球和心形的结动运动方向也是顺时针的话，我们可以通过下面这种方式来完成："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["该线是不可见的，有 ",(0,s.jsx)(n.code,{children:"0"})," 个单位的虚线和 ",(0,s.jsx)(n.code,{children:"100"})," 个单位间隔"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["它变为可见，有 ",(0,s.jsx)(n.code,{children:"100"})," 个单位的虚线和 ",(0,s.jsx)(n.code,{children:"0"})," 个单位的间距"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 将其拉回 ",(0,s.jsx)(n.code,{children:"100"})," 个单位，从而反转它"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes reversed {\n    from {\n        stroke-dasharray: 0 100;\n        stroke-dashoffset: 0;\n    }\n    to {\n        stroke-dasharray: 100 0;\n        stroke-dashoffset: 100;\n    }\n}\n\n.football,.heart {\n    animation: reversed 1s ease-in-out forwards;   \n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Y,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/vYwjyBd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYwjyBd"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"也就是说，你可以按照以下的方式来反转线条运动方向："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes reversed {\n    from {\n        stroke-dasharray: 0 FULL_LENGTH;\n        stroke-dashoffset: 0;\n    }\n    to {\n        stroke-dasharray: FULL_LENGTH 0;\n        stroke-dashoffset: FULL_LENGTH;\n    }\n}\n\n.reversed {\n    animation: reversed 1s ease-in-out infinite;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"只要理解了线条的虚线模式，就能很容易理解上面的代码发生了什么。"}),"\n",(0,s.jsxs)(n.p,{children:["另外一种方式是，使线条的 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 保持在完整长度（",(0,s.jsx)(n.code,{children:"FULL_LENGTH"}),"）的固定位置，只动画化线条的 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," ，并且从完整长度（",(0,s.jsx)(n.code,{children:"FULL_LENGTH"}),"）过渡到双倍长度（",(0,s.jsx)(n.code,{children:"FULL_LENGTH x 2"}),"）："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes reversed {\n    from {\n        stroke-dashoffset: 100; /* 100 是线条的完整长度，即 FULL_LENGTH */\n    }\n    to {\n        stroke-dashoffset: 200; /* 200 是线条完整长度的两倍，即 FULL_LENHTG x 2 */\n    }\n}\n\n.football,\n.heart {\n    stroke-dasharray: 100; /* 100 是线条的完整长度，即 FULL_LENGTH  */\n    animation: reversed 2s ease-in-out infinite;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:F,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/pomVNoz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/pomVNoz"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"接下来，我们再来看看如何控制线条绘制的起点，即移动动画的起点。由于线条就像一个环绕循环的火车，轨道从哪里开始并不重要。通常情况之下，移动动画的起点有三种不同的方式："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"从另一则开始：从封闭路径的另一侧或开放路径的中点开始"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"反向并从另一侧开始：在保留先前更改的方向的同时，从相反的一侧开始"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"任意起点：具有自定义的起点"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["先来看从封闭路径的另一侧或开放路径的中点开始为例。类似于上一个技巧，",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 属性的值互换位置，从而绘制一条线。由于 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 保持不变，原始绘制方向将保持不变。然后，通过将 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 设置为线条总长度（",(0,s.jsx)(n.code,{children:"FULL_LENGTH"}),"）的一半，线条动画将从相反的一侧开始，这对于对称路径非常有用："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes start-from-other-side {\n    from {\n        stroke-dasharray: 0 100; /* 100 是线条总长度 FULL_LENGTH */\n        stroke-dashoffset: 50;  /* 50 是线条总长度 FULL_LENGTH 的一半 */\n    }\n    to {\n        stroke-dasharray: 100 0; /* 100 是线条总长 FULL_LENGTH */\n        stroke-dashoffset: 50;   /* 50 是线条总长度 FULL_LENGTH */\n    }\n}\n\n.animated {\n    animation: start-from-other-side 1s ease-in-out infinite;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/OJYZbJa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJYZbJa"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，就上面这个示例，还可以将 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中的 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 移到动画元素（需要动画的线条元素）上："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes start-from-other-side {\n    from {\n        stroke-dasharray: 0 100; /* 100 是线条总长度 FULL_LENGTH */\n    }\n    to {\n        stroke-dasharray: 100 0; /* 100 是线条总长 FULL_LENGTH */\n    }\n}\n\n.animated {\n    stroke-dashoffset: 50;  /* 50 是线条总长度 FULL_LENGTH 的一半 */    \n    animation: start-from-other-side 1s ease-in-out infinite;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"它们最终达到的效果是一样的。"}),"\n",(0,s.jsxs)(n.p,{children:["你也可以选择动画反向并从另一侧开始。你可以选择在线条的半长度上偏移（",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 的值是线长总长度 ",(0,s.jsx)(n.code,{children:"FULL_LENGTH"})," 的一半），也可以选择从其他值开始。然而，你需要将完整的长度添加到其中，以反转方向："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes other-side-and-reverse {\n    from {\n        stroke-dasharray: 0 100; /* 100 是线条总长度 FULL_LENGTH */\n        stroke-dashoffset: 50;   /* 50 是线条总长度 FULL_LENGTH 的一半 */\n    }\n    to {\n        stroke-dasharray: 100 0; /* 100 是线条总长度 FULL_LENGTH */\n        stroke-dashoffset: 150;  /* 150 是线条总度的 1.5 倍 （线长总长度 + 线条总长度的一半）*/\n    }\n}\n\n.animated {\n    animation: other-side-and-reverse 1s ease-in-out infinite;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/eYarBmJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYarBmJ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["你只需要将 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 属性设置为任意值，例如 ",(0,s.jsx)(n.code,{children:"17"})," 个单位，可以指定线条动画的任意起点："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes custom-start-point {\n    from {\n        stroke-dasharray: 0 100; /* 100 是线条总长度 FULL_LENGTH */\n    }\n    to {\n        stroke-dasharray: 100 0; /* 100 是线条总长度 FULL_LENGTH */\n    }\n}\n\n.animated {\n    stroke-dashoffset: 17; /* 可以是任意值 */\n    animation: custom-start-point 1s ease-in-out infinite;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:H,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/vYwjyER",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYwjyER"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["你还可以将线条从内向外移动。只需要将 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 从线长总长度（",(0,s.jsx)(n.code,{children:"FULL_LENGTH"}),"）过渡到总长度的一半："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes inside-out {\n    from {\n        stroke-dasharray: 0 100; /* 100 是线条总长度 FULL_LENGTH */\n        stroke-dashoffset: 50;   /* 50 是线条总长度 FULL_LENGTH 的一半 */\n    }\n    to {\n        stroke-dasharray: 100 0; /* 100 是线条总长度 FULL_LENGTH */\n        stroke-dashoffset: 100;  /* 100 是线条总长度 FULL_LENGTH */\n    }\n}\n\n.animated {\n    animation: inside-out 1s ease-in-out infinite;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/pomVNJo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/pomVNJo"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["同样的，反过来也是可以的，动画从外到内。对于开放路径（例如直线），将会创建出“双线”效果，就像有两支笔在同时绘制 SVG 线条一样。它通过将 ",(0,s.jsx)(n.code,{children:"0"})," 虚线，",(0,s.jsx)(n.code,{children:"100"})," 间隙的线换换为 ",(0,s.jsx)(n.code,{children:"50"})," 虚线，",(0,s.jsx)(n.code,{children:"0"})," 间隙版本来实现。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes outside-in {\n    from {\n        stroke-dasharray: 0 100; /* 100 是线条总长度 FULL_LENGTH */\n    }\n    to {\n        stroke-dasharray: 50 0; /* 50 是线条总长度 FULL_LENGTH 的一半 */\n    }\n}\n\n.animated {\n    animation: outside-in 1s ease-in-out infinite;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/VwOxmLy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwOxmLy"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"对动画如何绘制线条有完全的控制权可能非常方便。从定义上来说，控制起始点和结束点意味着动画具有两个移动的线头，它们共同到达目的地。否则，SVG 的一部分将保持不可见。如果关键点靠近，一条线段将移动缓慢，而另一条线段需要快速移动，以同时覆盖更多区域。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes custom-start-end {\n    from {\n        stroke-dasharray: 0 100; /* 100 是线条总长度 FULL_LENGTH */\n        stroke-dashoffset: 34;   /* 34 任意值，动画任意起点*/\n    }\n    to {\n        stroke-dasharray: 100 0; /* 100 是线条总长度 FULL_LENGTH */\n        stroke-dashoffset: 68;  /* 68 任意值，动画任意结束点 */\n    }\n}\n\n.animated {\n    animation: custom-start-end 1s ease-in-out infinite;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:z,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/QWRrGbX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWRrGbX"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["正如前面这几个示例所演示的一样，在 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中调整 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 和 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 将得到不同的线条动画。这也是 SVG 线条动画在 Web 应用或网站上得到广泛应用的主要原因之一。"]}),"\n",(0,s.jsx)(n.p,{children:"例如，给链接添加与众不同的悬浮效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/ExzLNVZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ExzLNVZ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["上面示例中的下划线是 SVG 的 ",(0,s.jsx)(n.code,{children:"<rect>"})," 绘制的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="container">\n    <svg height="60" width="100%" xmlns="http://www.w3.org/2000/svg">\n        <rect class="shape" height="60" width="100%" />\n    </svg>\n   <div class="text">HOVER ME</div>\n</div> \n'})}),"\n",(0,s.jsxs)(n.p,{children:["CSS 调整 ",(0,s.jsx)(n.code,{children:"<rect>"})," 元素的 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 和 ",(0,s.jsx)(n.code,{children:"stroke-dashoffset"})," 属性，使其在视觉上看上去不是一个矩形，只是文本的下划线。然后在 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中修改它们的最终值，最终得到你所看到的悬浮效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes draw {\n        0% {\n            stroke-dasharray: 230 540;\n            stroke-dashoffset: -398;\n            stroke-width: 8px;\n        }\n        100% {\n            stroke-dasharray: 760;\n            stroke-dashoffset: 0;\n            stroke-width: 2px;\n        }\n    }\n    \n    .shape {\n        fill: transparent;\n        stroke-dasharray: 230 540;\n        stroke-dashoffset: -398;\n        stroke-width: 8px;\n        stroke: #ff3366;\n        \n        .container:hover {\n            animation: 0.5s draw linear forwards;\n        }    \n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"还可以给文本和图标制作自擦除的动画效果，例如下面这个文本描边效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/WNBJoQq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNBJoQq"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"实现上面效果，其核心代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1200 600" class="anim">\n    <symbol id="s-text">\n        <text text-anchor="middle" x="50%" y="35%" class="text--line">\n            SVG\n        </text>\n        <text text-anchor="middle" x="50%" y="68%" class="text--line2">\n            Animation\n        </text>\n    </symbol>\n\n    <g class="g-ants">\n        <use xlink:href="#s-text" class="text-copy" style="--index: 1;" />\n        <use xlink:href="#s-text" class="text-copy" style="--index: 2;" />\n        <use xlink:href="#s-text" class="text-copy" style="--index: 3;" />\n        <use xlink:href="#s-text" class="text-copy" style="--index: 4;" />\n        <use xlink:href="#s-text" class="text-copy" style="--index: 5;" />\n        <use xlink:href="#s-text" class="text-copy" style="--index: 6;" /\n    </g>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes stroke-offset {\n        50% {\n            stroke-dashoffset: 42%;\n            stroke-dasharray: 0 87.5%;\n        }\n    }\n\n    .text-copy {\n        fill: none;\n        stroke-dasharray: 7% 28%;\n        stroke-width: 10px;\n        animation: stroke-offset 12s infinite linear;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"下面这个是动画化线条绘制小企鹅图形的动画。对三条不同的路径进行绘制："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg x="0px" y="0px" width="250px" height="250px" viewBox="0 0 250 250">\n    <path class="path" fill="none" stroke="#333" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="  M219.638,217.784c-5.204-11.196-1.548-24.239-1.548-24.239c-10.28-57.368-44.34-67.251-61.09-76.96s-1.641-16.537,7.68-16.728  s13.737-1.869,13.242-7.182C175.25,81.5,121.75,78.5,111.176,119.907c-3.073,16.19,21.835,39.559,26.068,60.438  c0.684,3.691-5.729,8.884-24.906-0.249c-19.178-9.133-23.088-30.346-33.699-34.514c-43.51-14.963-50.188,59.404-50.188,59.404  c24.735,9.521,36.923-18.126,66.668-38.722"/>\n    <path class="path2" fill="none" stroke="#333" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="  M124.241,151.721c29.446-9.411,64.104-4.367,91.04,42.945c0,0-33.618,3.563-31.382,39.307c22.249,3.821,35.751-15.939,35.751-15.939  c6.006,13.203,22.958,18.904,22.958,18.904c16.673-33.518-14.624-49.546-14.624-49.546C245.333,68.601,167.75,54.5,134.502,52.163  C88.5,49,96.252,18.706,97,7.125C64.875,15,71.667,56.667,68.752,58.141C-45.066,124.14,20.167,201.375,27.667,204.5"/>\n    <path class="eye" fill="none" stroke="#333" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="  M23.833,146.667c11.667,1.833,14.16-23.786,3.83-25.56S12.167,144.834,23.833,146.667z"/>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    .path {\n        stroke-dasharray: 572;\n        stroke-dashoffset: 572;\n        animation: pathAnimation 1.2s linear 0.001s forwards;\n        visibility: hidden;\n    }\n\n    .path2 {\n        stroke-dasharray: 800;\n        stroke-dashoffset: 800;\n        animation: pathAnimation2 1.5s linear 1.2s forwards;\n        visibility: hidden;\n    }\n\n    .eye {\n        stroke-dasharray: 68;\n        stroke-dashoffset: 68;\n        animation: eyeAnimation 0.5s linear 2.72s forwards;\n        visibility: hidden;\n    }\n\n    @keyframes pathAnimation {\n        from {\n            visibility: hidden;\n            stroke-dashoffset: 572;\n        }\n        to {\n            visibility: visible;\n            stroke-dashoffset: 0;\n        }\n    }\n\n    @keyframes pathAnimation2 {\n        from {\n            visibility: hidden;\n            stroke-dashoffset: 800;\n        }\n        to {\n            visibility: visible;\n            stroke-dashoffset: 0;\n        }\n    }\n\n    @keyframes eyeAnimation {\n        from {\n            visibility: hidden;\n            stroke-dashoffset: 68;\n        }\n        to {\n            visibility: visible;\n            stroke-dashoffset: 0;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/dyEeOGJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dyEeOGJ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["你可能会认为上面所展示的动画效果没有太多的实际意义。事实上，并非如此。利用 SVG 线条动画，你可以为 Web 应用或网站提供与众不同的效果。例如 ",(0,s.jsx)(n.a,{href:"https://codepen.io/genarocolusso",target:"_blank",rel:"noopener noreferrer",children:"@Genaro Colusso"})," 提供的 404 页面的效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/genarocolusso/full/XWbGMLp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/genarocolusso/full/XWbGMLp"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/genarocolusso",target:"_blank",rel:"noopener noreferrer",children:"@Genaro Colusso"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"一些与众不同的页面加载动画："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/jkantner/full/abwgLNX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/jkantner/full/abwgLNX"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/jkantner",target:"_blank",rel:"noopener noreferrer",children:"@Jon Kantner"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/ainalem/full/eYmGLyp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/ainalem/full/eYmGLyp"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/ainalem",target:"_blank",rel:"noopener noreferrer",children:"@Mikael Ainalem"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"还可以是一些 UI 组件，例如常见的圆形进度条效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:L,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/gOJzLrB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOJzLrB"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["使用两个 ",(0,s.jsx)(n.code,{children:"<path>"})," 创建两个圆环，然后通过 ",(0,s.jsx)(n.code,{children:"stroke-dasharray"})," 对内圆环（绿色）做动画处理："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 36 36" class="circular-chart" width="300">\n    <path class="circle-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill=" none" stroke = "#eee" stroke-width= "3.8" />\n    <path class="circle" stroke-dasharray="30, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831  a 15.9155 15.9155 0 0 1 0 -31.831" fill = "none" stroke-width =  "2.8" stroke-linecap = "round" stroke = "#4CC790"/>\n    <text x="18" y="20.35" class="percentage">30%</text>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes progress {\n        0% {\n            stroke-dasharray: 0 100;\n        }\n    }\n    \n    .circle {\n        stroke-dasharray: 30 100;\n        animation: progress 1s ease-out forwards;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在此基础上，借助一些 JavaScript 脚本，还可以制作一些更复杂的 UI 组件，例如 ",(0,s.jsx)(n.a,{href:"https://codepen.io/jkantner",target:"_blank",rel:"noopener noreferrer",children:"@Jon Kantner"})," 写的一个圆环时钟效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/jkantner/full/MWEmExB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/jkantner/full/MWEmExB"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/jkantner",target:"_blank",rel:"noopener noreferrer",children:"@Jon Kantner"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"上面所展示的只是 SVG 常见的一些动画效果，你可以发挥你自己的创意，制作出一些更优秀的 SVG 线条动画效果。由于篇幅所限，有关于 SVG 的线条动画就暂时聊到这里。"}),"\n",(0,s.jsxs)(n.h3,{id:"路径动画-1",children:["路径动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#路径动画-1",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在现实生活中，很少有东西沿着直线运动，因此沿着路径运动允许我们模仿我们在目常生活中看到的运动。",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318466233172005",target:"_blank",rel:"noopener noreferrer",children:"通过 SMIL 动画的学习"}),"，我们知道，在 SVG 中，我们可以使用 ",(0,s.jsx)(n.code,{children:"<animateMotion>"})," 来构建一个物体沿着指定的路径进行运动。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-10 -10 173 61" width="300" class="anim">\n    <path d="M153,20.89c0-45.88-74.95,0-74.95,0S.5,66.76.5,20.89s77.54,0,77.54,0S153,66.76,153,20.89Z" fill="none" stroke="#000" stroke-dasharray="4" stoke-width="4" class="infinity" />\n    <circle r="5" cx="0" cy="0" fill="purple" class="circle" >\n        <animateMotion dur="5s" repeatCount="indefinite" path="M153,20.89c0-45.88-74.95,0-74.95,0S.5,66.76.5,20.89s77.54,0,77.54,0S153,66.76,153,20.89Z" /> \n    </circle>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/jOoxmmE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOoxmmE"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["SMIL 的 ",(0,s.jsx)(n.code,{children:"<animateMotion>"})," 构建路径动画很简单，可 SMIL 将会慢慢被遗弃。庆幸的是，CSS 提供了相应的替代方案，这意味着，我们可以直接使用 CSS 来实现路径动画。CSS 的 ",(0,s.jsx)(n.code,{children:"offset-path"})," 、",(0,s.jsx)(n.code,{children:"offset-distance"})," 、",(0,s.jsx)(n.code,{children:"offset-rotate"})," 和 ",(0,s.jsx)(n.code,{children:"offset-anchor"})," 等属性",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7308623339038670860",target:"_blank",rel:"noopener noreferrer",children:"允许你实现元素沿着指定路径运动"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"就拿上面的示例来说，我们使用 CSS 的话，同样可以实现相似的效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-10 -10 173 61" width="300" class="anim">\n    <path d="M153,20.89c0-45.88-74.95,0-74.95,0S.5,66.76.5,20.89s77.54,0,77.54,0S153,66.76,153,20.89Z" fill="none" stroke="#000" stroke-dasharray="4" stoke-width="4" class="infinity" />\n    <circle r="5" cx="0" cy="0" fill="purple" class="circle" />\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'@layer animation {\n    @keyframes infinity {\n        from {\n            offset-distance: 0%;\n        }\n    \n        to {\n            offset-distance: 100%;\n        }\n  }\n    \n    .circle {\n        offset-path:path("M153 20.89c0-45.88-74.95 0-74.95 0S.5 66.76.5 20.89s77.54 0 77.54 0S153 66.76 153 20.89Z");\n        animation: infinity 5s infinite linear;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/rNgvmwW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNgvmwW"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正如上面示例所示，你可以将任何物体按你所需的路径运动，例如下面这个火箭沿着指定路径，从屏幕左下角向右上角移动："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/yLWjboe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLWjboe"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"上面示例对应的代码如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg  viewBox="0 0 1300 1000" class="anim">\n    \x3c!-- 运动路径，可以根据需要，使该路径不在屏幕上显示 --\x3e\n    <path id="path" fill="none" stroke="#90acef" stroke-miterlimit="10" stroke-width="2" stroke-dasharray="10 20.1" d="M20.2 679.7c210.3-19.1 398.9-219.6 236.5-257.5-170.5-16.8-132.5 146.2-6.8 184.7 141.6 55.7 242.3-9.9 215.3-89.3-43.7-94-330-292-85-347.3 135.5-18.7 251 54.7 302.9 141.5 50.2 85 25.5 183.8 136.6 248.6C1000 627 1037.7 427 1039 395.7c20.3-196.6-133.8-218-199.5-170s-11.3 138.5 107 114S1126.7 147.6 1092.6 67c-2.4-12.2-1.4-23.1 9.2-31.8 100.8-49.4 112.2 198.4 239-23.8"/>\n \n    \x3c!-- 火箭图形 --\x3e \n    <g class="rocket">\n        <g fill="#fff">\n            <path d="M77.4 651.4a13.3 13.3 0 00-14.8-11.6c-19 2.2-29.8 17-55.5 20 25.7-3 39.7 8.7 58.7 6.4a13.3 13.3 0 0011.6-14.8z" opacity=".5" style="isolation:isolate"/>\n            <path d="M77.4 651.4a9 9 0 00-9.9-7.8c-12.7 1.5-20 11.4-37.1 13.4 17.2-2 26.5 5.8 39.2 4.3a9 9 0 007.8-9.9z"/>\n        </g>\n        <g fill="#63c6be">\n            <path d="M111.9 669.7l-15.1 13.7a8.4 8.4 0 01-6.7 2.1l-23-2.8a1 1 0 01-1-1.1 1 1 0 01.2-.5l14-19.7z"/>\n            <path d="M106.7 625.4L89 615.5a8.4 8.4 0 00-7-.5l-21.8 8a1 1 0 00-.3 1.7l18.2 16z"/>\n        </g>\n        \n        <path fill="#fff" d="M173.2 640.3c-18.8-18.2-72-23.2-94.7-4a2.6 2.6 0 00-1 2.2l3 25a2.6 2.6 0 001.4 2c26.4 13.6 77-3.3 91.3-25.2z"/>\n        <path fill="#63c6be" d="M173.2 640.3a63.6 63.6 0 00-30.8-14c-.4-6.5 4 34.5 4 34.5a63.7 63.7 0 0026.8-20.5z"/>\n        <circle cx="123.2" cy="646" r="11.7" fill="#63c6be" transform="rotate(-49.2 123.2 646)"/>\n        <path fill="#22173f" d="M125.7 655a9.4 9.4 0 116.6-11.5 9.4 9.4 0 01-6.6 11.6z"/>\n    </g>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'@layer animation {\n    @keyframes fly {\n        from {\n            offset-distance: 0%;\n        }\n        to {\n            offset-distance: 100%;\n        }\n     }\n        \n    .rocket {\n        transform-box: fill-box;\n        offset-anchor: 50% 50%;\n        transform-origin: 50% 50%;\n        offset-rotate: auto;\n        offset-path: path("M20.2 679.7c210.3-19.1 398.9-219.6 236.5-257.5-170.5-16.8-132.5 146.2-6.8 184.7 141.6 55.7 242.3-9.9 215.3-89.3-43.7-94-330-292-85-347.3 135.5-18.7 251 54.7 302.9 141.5 50.2 85 25.5 183.8 136.6 248.6C1000 627 1037.7 427 1039 395.7c20.3-196.6-133.8-218-199.5-170s-11.3 138.5 107 114S1126.7 147.6 1092.6 67c-2.4-12.2-1.4-23.1 9.2-31.8 100.8-49.4 112.2 198.4 239-23.8");\n        animation: fly 10s infinite ease-in-out;\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"变形动画",children:["变形动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#变形动画",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"现如今天，在 Web 应用或网站上时常能看到变形动画，该动画效果常用于形状变形、文本变形上，在一些交互效果上也能常看到，例如用鼠标悬浮在用户头像时变形。"}),"\n",(0,s.jsxs)(n.p,{children:["在 SVG 中，我们知道通过 ",(0,s.jsx)(n.code,{children:"<animate>"})," 改变路径的 ",(0,s.jsx)(n.code,{children:"d"})," 属性，能轻易实现变形动画效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" width="288" height="288" viewBox="0 0 288 288" class="element">\n    <linearGradient id="PSgrad_0" x1="70.711%" x2="0%" y1="70.711%" y2="0%">\n        <stop offset="0%" stop-color="rgb(95,54,152)" stop-opacity="1" />\n        <stop offset="100%" stop-color="rgb(247,109,138)" stop-opacity="1" />\n    </linearGradient>\n    <path fill="url(#PSgrad_0)">\n        <animate repeatCount="indefinite" attributeName="d" dur="5s" values="M37.5,186c-12.1-10.5-11.8-32.3-7.2-46.7c4.8-15,13.1-17.8,30.1-36.7C91,68.8,83.5,56.7,103.4,45\n        c22.2-13.1,51.1-9.5,69.6-1.6c18.1,7.8,15.7,15.3,43.3,33.2c28.8,18.8,37.2,14.3,46.7,27.9c15.6,22.3,6.4,53.3,4.4,60.2\n        c-3.3,11.2-7.1,23.9-18.5,32c-16.3,11.5-29.5,0.7-48.6,11c-16.2,8.7-12.6,19.7-28.2,33.2c-22.7,19.7-63.8,25.7-79.9,9.7\n        c-15.2-15.1,0.3-41.7-16.6-54.9C63,186,49.7,196.7,37.5,186z;\n        \n        \n        M51,171.3c-6.1-17.7-15.3-17.2-20.7-32c-8-21.9,0.7-54.6,20.7-67.1c19.5-12.3,32.8,5.5,67.7-3.4C145.2,62,145,49.9,173,43.4\n        c12-2.8,41.4-9.6,60.2,6.6c19,16.4,16.7,47.5,16,57.7c-1.7,22.8-10.3,25.5-9.4,46.4c1,22.5,11.2,25.8,9.1,42.6\n        c-2.2,17.6-16.3,37.5-33.5,40.8c-22,4.1-29.4-22.4-54.9-22.6c-31-0.2-40.8,39-68.3,35.7c-17.3-2-32.2-19.8-37.3-34.8\n        C48.9,198.6,57.8,191,51,171.3z;\n        \n        M37.5,186c-12.1-10.5-11.8-32.3-7.2-46.7c4.8-15,13.1-17.8,30.1-36.7C91,68.8,83.5,56.7,103.4,45\n        c22.2-13.1,51.1-9.5,69.6-1.6c18.1,7.8,15.7,15.3,43.3,33.2c28.8,18.8,37.2,14.3,46.7,27.9c15.6,22.3,6.4,53.3,4.4,60.2\n        c-3.3,11.2-7.1,23.9-18.5,32c-16.3,11.5-29.5,0.7-48.6,11c-16.2,8.7-12.6,19.7-28.2,33.2c-22.7,19.7-63.8,25.7-79.9,9.7\n        c-15.2-15.1,0.3-41.7-16.6-54.9C63,186,49.7,196.7,37.5,186z        " />\n    </path>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/PovemKL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PovemKL"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"上面这个 SVG 的变形动画效果，在 CSS 中同样可以实现："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" width="288" height="288" viewBox="0 0 288 288" class="element">\n    <linearGradient id="PSgrad_0" x1="70.711%" x2="0%" y1="70.711%" y2="0%">\n        <stop offset="0%" stop-color="rgb(95,54,152)" stop-opacity="1" />\n        <stop offset="100%" stop-color="rgb(247,109,138)" stop-opacity="1" />\n    </linearGradient>\n    <path class="morphing" fill="url(#PSgrad_0)" />\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["首先在 CSS 中给 ",(0,s.jsx)(n.code,{children:"<path>"})," 指定 ",(0,s.jsx)(n.code,{children:"d"})," 属性的初始值，然后在 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 改变 ",(0,s.jsx)(n.code,{children:"d"})," 属性的值即可："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes morphing {\n        0%, 100%{\n            d:path('M37.5,186c-12.1-10.5-11.8-32.3-7.2-46.7c4.8-15,13.1-17.8,30.1-36.7C91,68.8,83.5,56.7,103.4,45        c22.2-13.1,51.1-9.5,69.6-1.6c18.1,7.8,15.7,15.3,43.3,33.2c28.8,18.8,37.2,14.3,46.7,27.9c15.6,22.3,6.4,53.3,4.4,60.2        c-3.3,11.2-7.1,23.9-18.5,32c-16.3,11.5-29.5,0.7-48.6,11c-16.2,8.7-12.6,19.7-28.2,33.2c-22.7,19.7-63.8,25.7-79.9,9.7        c-15.2-15.1,0.3-41.7-16.6-54.9C63,186,49.7,196.7,37.5,186z');\n        }\n        50%{\n            d:path('M51,171.3c-6.1-17.7-15.3-17.2-20.7-32c-8-21.9,0.7-54.6,20.7-67.1c19.5-12.3,32.8,5.5,67.7-3.4C145.2,62,145,49.9,173,43.4 c12-2.8,41.4-9.6,60.2,6.6c19,16.4,16.7,47.5,16,57.7c-1.7,22.8-10.3,25.5-9.4,46.4c1,22.5,11.2,25.8,9.1,42.6        c-2.2,17.6-16.3,37.5-33.5,40.8c-22,4.1-29.4-22.4-54.9-22.6c-31-0.2-40.8,39-68.3,35.7c-17.3-2-32.2-19.8-37.3-34.8        C48.9,198.6,57.8,191,51,171.3z')\n        }\n    }\n  \n    .morphing {\n        d:path('M37.5,186c-12.1-10.5-11.8-32.3-7.2-46.7c4.8-15,13.1-17.8,30.1-36.7C91,68.8,83.5,56.7,103.4,45        c22.2-13.1,51.1-9.5,69.6-1.6c18.1,7.8,15.7,15.3,43.3,33.2c28.8,18.8,37.2,14.3,46.7,27.9c15.6,22.3,6.4,53.3,4.4,60.2        c-3.3,11.2-7.1,23.9-18.5,32c-16.3,11.5-29.5,0.7-48.6,11c-16.2,8.7-12.6,19.7-28.2,33.2c-22.7,19.7-63.8,25.7-79.9,9.7        c-15.2-15.1,0.3-41.7-16.6-54.9C63,186,49.7,196.7,37.5,186z');\n        animation: morphing 5s linear infinite;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/qBGYmPp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBGYmPp"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"基于上面这个示例，我们只需要稍微调整一下，就可以给用户头像添加一个变形的过渡动画效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 1024 768" class="avatar">\n    <clipPath id="mask1">\n        <path class="anim" d="M804,437C804,619.53,582.03,721,399.5,721S69,573.03,69,390.5S216.97,60,399.5,60S804,254.47,804,437Z"/>\n    </clipPath>\n  \n    <image x="0" y="0"  height="800" clip-path="url(#mask1)"  xlink:href="http://i.pravatar.cc/500?img=7" />\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'@layer animation {\n    .anim {\n        d: path("M804,437C804,619.53,582.03,721,399.5,721S301,625.53,301,443S216.97,60,399.5,60S804,254.47,804,437Z");\n        transition: d 300ms linear;\n    \n        .avatar:hover & {\n            d: path("M771,436C753,627,582.03,721,399.5,721S139,646.53,139,464S405.47,78,588,78S788.126,254.275,771,436Z");\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/xxNjdPX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxNjdPX"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["你还可以结合其他的 CSS 特性制作出更具创意的变形动画效果，例如 ",(0,s.jsx)(n.a,{href:"https://codepen.io/magiai",target:"_blank",rel:"noopener noreferrer",children:"@Dominika"})," 基于 SVG 滤镜和 CSS 的 ",(0,s.jsx)(n.code,{children:"clip-path"})," 制作的文字变形效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/magiai/full/YzaeQQy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/magiai/full/YzaeQQy"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"文本动画",children:["文本动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文本动画",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"给文本添加动画效果是 SVG 动画被广泛应用的另一个场景。从简单的文本淡入淡出效果，到文本的线条效果，可以说，无处不在。"}),"\n",(0,s.jsx)(n.p,{children:"例如下面这个淡入淡出文本动画，它类似于在 HTML 中使用 CSS 实现的文本闪烁效果。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" class="blinking--text" width="400" height="200" viewBox="0 0 400 200">\n    <text class="text-animation-title" text-anchor="middle" x="50%" y="50%">\n        Blinking Text\n    </text>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["让我们使用 SVG 的 ",(0,s.jsx)(n.code,{children:"<text>"})," 元素，并使用 CSS 设置一个关键帧动画来切换文本不透明度，实现平滑的淡入淡出 SVG 文本动画："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes blink {\n        from {\n            opacity: 0;\n        }\n        to {\n            opacity: 1;\n        }\n    }\n        \n    .blinking--text {\n         animation: blink 0.5s ease-in infinite alternate;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/rNgvmJy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNgvmJy"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"在此基础上，我们可以很轻易扩展出一个 Loading 动画效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 240 240" class="loading">\n    <circle cx="35" cy="35" r="60" fill="none"/>\n    <text x="32%" y="52%">Loading...</text>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes fadeIn {\n        from {\n            opacity: 0;\n        }\n        to {\n            opacity: 1;\n        }\n    }\n\n    @keyframes text {\n        0%,\n        100% {\n            fill: #555;\n        }\n        50% {\n            fill: #eee;\n        }\n    }\n\n    @keyframes loader {\n        0% {\n            stroke: #3498db;\n            stroke-width: 10;\n            troke-dasharray: 320;\n            stroke-dashoffset: -180;\n        }\n        65% {\n            stroke: #27ae60;\n            stroke-width: 8;\n            stroke-dasharray: 160;\n            stroke-dashoffset: -90;\n        }\n        100% {\n            stroke: #3498db;\n            stroke-width: 10;\n            rotate: 270deg;\n            stroke-dasharray: 320;\n            stroke-dashoffset: -180;\n        }\n    }\n\n    .loading {\n        circle {\n            stroke-dasharray: 320;\n            stroke-linecap: round;\n            animation: loader 2s infinite ease-in-out;\n            transform-origin: center;\n            rotate: -90deg;\n            cx: 50%;\n            cy: 50%;\n        }\n        text {\n            animation: text 2s infinite, fadeIn 2s ease-in-out infinite;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/BaexRYg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaexRYg"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们还可以通过 SVG 的 ",(0,s.jsx)(n.code,{children:"<text>"})," 元素（包裹单个字母）并结合 CSS 的变换特性来改变每个字母在 ",(0,s.jsx)(n.code,{children:"Y"})," 轴上的位置，从而实现类似于波浪形运动的文本动画："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg width="400" class="wavy-text" viewBox="0 0 800 200">\n    <g>\n        <text y="50%" class="char" style="--index: 1;">A</text>\n        <text y="50%" x="11.111%" class="char" style="--index: 2;">N</text>\n        <text y="50%" x="22.222%" class="char" style="--index: 3;">I</text>\n        <text y="50%" x="33.333%" class="char" style="--index: 4;">M</text>\n        <text y="50%" x="44.444%" class="char" style="--index: 5;">A</text>\n        <text y="50%" x="55.555%" class="char" style="--index: 6;">T</text>\n        <text y="50%" x="66.666%" class="char" style="--index: 7;">I</text>\n        <text y="50%" x="77.777%" class="char" style="--index: 8;">O</text>\n        <text y="50%" x="88.888%" class="char" style="--index: 9;">N</text>\n    </g>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes wave {\n        0%,\n        100% {\n            translate: 0 0;\n        }\n        25%,\n        50% {\n            translate: 0 50%;\n        }\n    }\n  \n    .char {\n        --delay: 100ms;\n        --_delay: calc(var(--index) * var(--delay));\n        \n        transform-origin: center;\n        translate: 0 0;\n        animation: wave 1s ease-in-out infinite var(--_delay);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRdWqd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRdWqd"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"在 Web 上，有的时候会需要将文本环绕着指定的路径排列，例如环绕一个圆排列，这在 SVG 中很容易就能实现，例如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg width="800" viewBox="100 100 200 200" class="text--circle">\n    <path id="myTextPath" d="M -64,0 A 64 64 0 0 1 64,0 A 64,64 0 0 1 -64,0" transform="translate(200,200)" fill="none" stroke="#ea9ab2" stroke-width="25"/>\n\n    <text fill="#fefae0" stroke-width="0" stroke="none">\n        <textPath xlink:href="#myTextPath">\n            <tspan dy="5">Ein Torten-Text im Halbkreis  </tspan>\n        </textPath>\n    </text>\n    \n    <clipPath id="clipCircle">\n        <circle r="50" cx="200" cy="200"/>\n    </clipPath>\n \n    <image x=120 y=140 height=110 clip-path="url(#clipCircle)" href="https://images.unsplash.com/photo-1606871807176-1c9f5ebacd52?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=550&q=80"  />\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdGmGj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdGmGj"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"你可以基于这个基础上，给文本添加一些动画效果。感兴趣的同学可以尝试一下！"}),"\n",(0,s.jsxs)(n.h3,{id:"遮罩动画",children:["遮罩动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#遮罩动画",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 CSS 中，我们可以通过 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668885224456252",target:"_blank",rel:"noopener noreferrer",children:"CSS 的 Masking "}),"（遮罩）特性来创建很多与众不同的效果，包括遮罩动效。在 SVG 中同样如此。例如下面这个探照灯的效果，使用了 SVG 的 ",(0,s.jsx)(n.code,{children:"mask"})," 功能，并使用 CSS 做了简单的位移动效："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" width="600" viewBox="0 0 600 100">\n    <defs>\n        <mask id="experiment">\n            <path fill="#000" class="experiment" d="M150.142 73.467v-46.61h34.56v7.884h-25.15v10.335h23.402v7.854h-23.4v12.685h26.04v7.854H150.14v-.003zM188.835 73.467l15.93-24.323-14.436-22.288h11l9.348 14.976 9.157-14.976h10.905l-14.498 22.638 15.93 23.974H220.82l-10.333-16.12-10.365 16.12h-11.287zM237.004 73.467v-46.61h15.103c5.723 0 9.453.233 11.19.698 2.672.7 4.908 2.22 6.71 4.562 1.8 2.343 2.702 5.37 2.702 9.078 0 2.86-.52 5.268-1.56 7.217-1.038 1.95-2.357 3.482-3.957 4.595-1.6 1.112-3.227 1.85-4.88 2.21-2.247.445-5.5.667-9.76.667h-6.137v17.583h-9.412zm9.41-38.727v13.227h5.152c3.71 0 6.19-.243 7.44-.73 1.25-.488 2.23-1.25 2.94-2.29.71-1.038 1.066-2.246 1.066-3.624 0-1.695-.498-3.095-1.494-4.197-.997-1.102-2.257-1.79-3.784-2.066-1.124-.21-3.38-.318-6.772-.318h-4.547v-.002zM280.435 73.467v-46.61h34.56v7.884h-25.148v10.335h23.4v7.854h-23.4v12.685h26.04v7.854h-35.452v-.003zM323.898 73.467v-46.61h19.81c4.98 0 8.6.418 10.856 1.255 2.258.838 4.063 2.326 5.42 4.467 1.356 2.14 2.035 4.59 2.035 7.345 0 3.496-1.028 6.385-3.085 8.664-2.058 2.276-5.13 3.715-9.222 4.307 2.035 1.188 3.716 2.492 5.04 3.912 1.325 1.42 3.11 3.94 5.357 7.564l5.69 9.094h-11.255l-6.805-10.143c-2.416-3.625-4.07-5.908-4.96-6.853-.89-.943-1.833-1.59-2.83-1.938-.996-.35-2.575-.525-4.737-.525h-1.906v19.458h-9.41zm9.413-26.9h6.964c4.515 0 7.332-.19 8.457-.57 1.124-.383 2.003-1.04 2.64-1.972.636-.934.954-2.1.954-3.498 0-1.568-.42-2.834-1.257-3.8s-2.018-1.573-3.545-1.827c-.764-.106-3.053-.16-6.867-.16h-7.344v11.828zM370.604 73.467v-46.61h9.412v46.61h-9.412zM388.855 73.467v-46.61h14.084l8.456 31.793 8.362-31.794h14.115v46.61h-8.742v-36.69l-9.25 36.69h-9.063l-9.22-36.69v36.69h-8.742zM443.223 73.467v-46.61h34.562v7.884h-25.148v10.335h23.4v7.854h-23.4v12.685h26.04v7.854h-35.453v-.003zM486.75 73.467v-46.61h9.156l19.076 31.125V26.856h8.743v46.61h-9.442l-18.79-30.395v30.397h-8.743zM544.17 73.467V34.74h-13.83v-7.885h37.04v7.885h-13.8v38.727h-9.41z" />\n            <path class="tube" fill="#020202" d="M136.07 27.246h-22.185v5.547h2.31V67.92c0 3.05 2.497 5.547 5.547 5.547h6.47c3.052 0 5.547-2.496 5.547-5.547V32.793h2.31v-5.547zm-4.62 33.74h-11.094v-1.848h11.093v1.848zm0-6.93h-6.472v-1.85h6.47v1.85zm0-6.935h-11.094v-1.848h11.093v1.85zm0-6.932h-6.472V38.34h6.47v1.848z" />\n            <circle fill="#fff" cx="66.836" cy="50.356" r="34" />\n        <mask>\n    </defs>\n\n    <path mask="url(#experiment)" class="experiment" fill="yellow" d="M150.142 73.467v-46.61h34.56v7.884h-25.15v10.335h23.402v7.854h-23.4v12.685h26.04v7.854H150.14v-.003zM188.835 73.467l15.93-24.323-14.436-22.288h11l9.348 14.976 9.157-14.976h10.905l-14.498 22.638 15.93 23.974H220.82l-10.333-16.12-10.365 16.12h-11.287zM237.004 73.467v-46.61h15.103c5.723 0 9.453.233 11.19.698 2.672.7 4.908 2.22 6.71 4.562 1.8 2.343 2.702 5.37 2.702 9.078 0 2.86-.52 5.268-1.56 7.217-1.038 1.95-2.357 3.482-3.957 4.595-1.6 1.112-3.227 1.85-4.88 2.21-2.247.445-5.5.667-9.76.667h-6.137v17.583h-9.412zm9.41-38.727v13.227h5.152c3.71 0 6.19-.243 7.44-.73 1.25-.488 2.23-1.25 2.94-2.29.71-1.038 1.066-2.246 1.066-3.624 0-1.695-.498-3.095-1.494-4.197-.997-1.102-2.257-1.79-3.784-2.066-1.124-.21-3.38-.318-6.772-.318h-4.547v-.002zM280.435 73.467v-46.61h34.56v7.884h-25.148v10.335h23.4v7.854h-23.4v12.685h26.04v7.854h-35.452v-.003zM323.898 73.467v-46.61h19.81c4.98 0 8.6.418 10.856 1.255 2.258.838 4.063 2.326 5.42 4.467 1.356 2.14 2.035 4.59 2.035 7.345 0 3.496-1.028 6.385-3.085 8.664-2.058 2.276-5.13 3.715-9.222 4.307 2.035 1.188 3.716 2.492 5.04 3.912 1.325 1.42 3.11 3.94 5.357 7.564l5.69 9.094h-11.255l-6.805-10.143c-2.416-3.625-4.07-5.908-4.96-6.853-.89-.943-1.833-1.59-2.83-1.938-.996-.35-2.575-.525-4.737-.525h-1.906v19.458h-9.41zm9.413-26.9h6.964c4.515 0 7.332-.19 8.457-.57 1.124-.383 2.003-1.04 2.64-1.972.636-.934.954-2.1.954-3.498 0-1.568-.42-2.834-1.257-3.8s-2.018-1.573-3.545-1.827c-.764-.106-3.053-.16-6.867-.16h-7.344v11.828zM370.604 73.467v-46.61h9.412v46.61h-9.412zM388.855 73.467v-46.61h14.084l8.456 31.793 8.362-31.794h14.115v46.61h-8.742v-36.69l-9.25 36.69h-9.063l-9.22-36.69v36.69h-8.742zM443.223 73.467v-46.61h34.562v7.884h-25.148v10.335h23.4v7.854h-23.4v12.685h26.04v7.854h-35.453v-.003zM486.75 73.467v-46.61h9.156l19.076 31.125V26.856h8.743v46.61h-9.442l-18.79-30.395v30.397h-8.743zM544.17 73.467V34.74h-13.83v-7.885h37.04v7.885h-13.8v38.727h-9.41z" />\n    <path mask="url(#experiment)" class="tube" fill="yellow" d="M136.07 27.246h-22.185v5.547h2.31V67.92c0 3.05 2.497 5.547 5.547 5.547h6.47c3.052 0 5.547-2.496 5.547-5.547V32.793h2.31v-5.547zm-4.62 33.74h-11.094v-1.848h11.093v1.848zm0-6.93h-6.472v-1.85h6.47v1.85zm0-6.935h-11.094v-1.848h11.093v1.85zm0-6.932h-6.472V38.34h6.47v1.848z" />\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes move {\n        from {\n            translate:0 0;\n        }\n        to {\n            translate: 400px 0;\n        }\n    }\n  \n    circle {\n        animation: 3s move alternate infinite;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/OJYZmZe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJYZmZe"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"粒子动画",children:["粒子动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#粒子动画",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["前面在介绍 SVG 线条动画时，曾提到，我们可以使用 ",(0,s.jsx)(n.code,{children:"SVGGeometryElement.getPointAtLength()"})," 方法返回沿路径的给定距离的点。它将给出沿路径精确距离上的坐标。例如 ",(0,s.jsx)(n.code,{children:"path.getPointAtLength(10)"})," 将返回一个包含 ",(0,s.jsx)(n.code,{children:"x"})," 和 ",(0,s.jsx)(n.code,{children:"y"})," 坐标的 ",(0,s.jsx)(n.code,{children:"SVGPoint"}),"（一个对象）。"]}),"\n",(0,s.jsxs)(n.p,{children:["这意味着，我们可以基于 SVG 路径和 ",(0,s.jsx)(n.code,{children:"getPointAtLength()"})," 来创建一些有创意的动画效果，例如 ",(0,s.jsx)(n.a,{href:"https://codepen.io/Mamboleoo",target:"_blank",rel:"noopener noreferrer",children:"@Louis Hoebregts"})," 提供的相关案例，他结合了 ",(0,s.jsx)(n.a,{href:"https://greensock.com/motionpath/",target:"_blank",rel:"noopener noreferrer",children:"GreenSock 相关特性"}),"，创建了一个粒子动画效果。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/Mamboleoo/full/NWaogXW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/Mamboleoo/full/NWaogXW"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/Mamboleoo",target:"_blank",rel:"noopener noreferrer",children:"@Louis Hoebregts"})," ）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这个动画在每一帧上，将创建一个新的圆圈元素，并对其进行动画处理，以使新的粒子弹出并淡出。以下是制作这个动画的效果的核心步骤："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["创建一个新的 ",(0,s.jsx)(n.code,{children:"<circle>"})," 元素，并将其附加到 SVG 中"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.code,{children:"getPointAtLength"})," 计算的点坐标"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"为每个圆定义随机的半径和颜色"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["将圆的 ",(0,s.jsx)(n.code,{children:"cx"})," 和 ",(0,s.jsx)(n.code,{children:"cy"})," 属性动画到一个随机位置"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"动画完成后，从 DOM 中移除圆"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:"function createParticle (point) {\n    // 创建 circle 元素（粒子）\n    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    // 将 circle 插入 svg\n    svg.prepend(circle);\n    // 设置 circle 位置\n    circle.setAttribute('cx', point.x);\n    circle.setAttribute('cy', point.y);\n    // 为每个 circle 设置随机的半径 \n    circle.setAttribute('r', (Math.random() * 2) + 0.2);\n    // 为每个 circle 设置随机的填充色\n    circle.setAttribute('fill', gsap.utils.random(['#ff0000', '#ff5a00', '#ff9a00', '#ffce00', '#ffe808']));\n  \n    // 动画化 circle\n    gsap.to(circle, {\n        // 基于当前位置给 cx 一个随机值\n        cx: '+=random(-20,20)',\n        // 基于当前位置给 cy 一个随机值\n        cy: '+=random(-20,20)',\n        // 淡出\n        opacity: 0,\n        // 给每个圆的动画设置一个随机的持续时间\n        duration: 'random(1, 2)',\n        // 防止gsap四舍五入cx & cy值\n        autoRound: false,\n        // 动画完成后删除 SVG 中的 circle \n        onComplete: () => {\n            svg.removeChild(circle);\n        }\n    });\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"更详细的代码，请参阅案例源码。"}),"\n",(0,s.jsxs)(n.p,{children:["除此之外，要是你对 WebGL 了解，例如 ",(0,s.jsx)(n.a,{href:"https://threejs.org/",target:"_blank",rel:"noopener noreferrer",children:"three.js"})," 。你还可以制作出更酷炫的粒子动画效果，例如下面这个："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/Mamboleoo/full/zYEJVWy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/Mamboleoo/full/zYEJVWy"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/Mamboleoo",target:"_blank",rel:"noopener noreferrer",children:"@Louis Hoebregts"}),"）"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["你也可以基于 ",(0,s.jsx)(n.a,{href:"https://animejs.com/",target:"_blank",rel:"noopener noreferrer",children:"anime.js 来制作 SVG 动画"}),"。例如，下面这个动画效果，它给 ",(0,s.jsx)(n.code,{children:"Notitication"})," 组件的徽标添加了一个类似火焰燃烧的动画效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/AlikinVV/full/wOyGNJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/AlikinVV/full/wOyGNJ"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/AlikinVV",target:"_blank",rel:"noopener noreferrer",children:"@Valery Alikin"}),"）"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"其他动画效果",children:["其他动画效果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#其他动画效果",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上面所展示的是 SVG 和 CSS 共同制作的一些动画效果，它有一些常见的基本动画效果，也有一些酷炫的粒子动画效果。其实，在 Web 上还有可能带有交互的效果的 SVG 动画，或者用于常组件上的 SVG 动画。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/milanraring/full/qBEPzKB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/milanraring/full/qBEPzKB"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/milanraring",target:"_blank",rel:"noopener noreferrer",children:"@Milan Raring"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/Anna_Batura/details/ExKBXdd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/Anna_Batura/details/ExKBXdd"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/Anna_Batura",target:"_blank",rel:"noopener noreferrer",children:"@BrawadaCom"})," ）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/TurkAysenur/details/bGawdKv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/TurkAysenur/details/bGawdKv"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/TurkAysenur",target:"_blank",rel:"noopener noreferrer",children:"@Aysenur Turk"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/aaroniker/details/yLyJYxx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/aaroniker/details/yLyJYxx"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/aaroniker",target:"_blank",rel:"noopener noreferrer",children:"@Aaron Iker"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/arcticben/full/zZaRqQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/arcticben/full/zZaRqQ"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/arcticben",target:"_blank",rel:"noopener noreferrer",children:"@Ben Sinca"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/AbubakerSaeed/full/yLOaaKM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/AbubakerSaeed/full/yLOaaKM"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/AbubakerSaeed",target:"_blank",rel:"noopener noreferrer",children:"@Abubaker Saeed"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"你可以在 CodePen 上查看更多有关于 SVG 方面的动画。这里就不一一向大家展示了。"}),"\n",(0,s.jsxs)(n.h2,{id:"结论",children:["结论",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结论",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"希望这节课能鼓励你尝试制作一些精彩的 SVG 动画和交互，并将这种工作流程整合到你的日常项目中。我们只使用了一些小技巧和 CSS 属性，就能够轻松创建各种不错的效果。如果你愿意投入一些额外的时间、知识和努力，就能够创造一些真正令人惊叹和交互式的图形。"})]})}function eo(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(ed,{...e})}):ed(e)}let eh=eo;eo.__RSPRESS_PAGE_META={},eo.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F46-%E9%AB%98%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E5%8A%A8%E7%94%BB%E4%B9%8B%E4%BD%BF%E7%94%A8%20CSS%20%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB.md"]={toc:[{text:"使用 CSS 对 SVG 进行动画的常见用例",id:"使用-css-对-svg-进行动画的常见用例",depth:2},{text:"图标动画",id:"图标动画",depth:3},{text:"路径动画",id:"路径动画",depth:3},{text:"按钮效果",id:"按钮效果",depth:3},{text:"数据可视化",id:"数据可视化",depth:3},{text:"形状转变",id:"形状转变",depth:3},{text:"文字动画",id:"文字动画",depth:3},{text:"加载动画",id:"加载动画",depth:3},{text:"如何为动画准备 SVG",id:"如何为动画准备-svg",depth:2},{text:"应用 CSS 到 SVG",id:"应用-css-到-svg",depth:2},{text:"给 SVG 添加 CSS 动画",id:"给-svg-添加-css-动画",depth:2},{text:"给 SVG 添加过渡动画",id:"给-svg-添加过渡动画",depth:3},{text:"给 SVG 添加关键帧动画",id:"给-svg-添加关键帧动画",depth:3},{text:"你可以使用 CSS 对哪些内容进行动画呢？",id:"你可以使用-css-对哪些内容进行动画呢",depth:2},{text:"SVG 线条动画",id:"svg-线条动画",depth:3},{text:"路径动画",id:"路径动画-1",depth:3},{text:"变形动画",id:"变形动画",depth:3},{text:"文本动画",id:"文本动画",depth:3},{text:"遮罩动画",id:"遮罩动画",depth:3},{text:"粒子动画",id:"粒子动画",depth:3},{text:"其他动画效果",id:"其他动画效果",depth:3},{text:"结论",id:"结论",depth:2}],title:"46-高级篇：SVG 动画之使用 CSS 实现动画",headingTitle:"46-高级篇：SVG 动画之使用 CSS 实现动画",frontmatter:{}}}}]);