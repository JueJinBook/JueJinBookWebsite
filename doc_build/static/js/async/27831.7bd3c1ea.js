"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["27831"],{926308:function(e,n,r){e.exports=r.p+"static/image/2838042fbcdaa8ed79443d2fe33853b4.f43013b2.webp"},632738:function(e,n,r){e.exports=r.p+"static/image/4123d9612454c7e1bfedaf27d25530be.d623a86d.webp"},833657:function(e,n,r){e.exports=r.p+"static/image/414a519fadc7ed075c93e72963f166dd.802fbcd5.webp"},901277:function(e,n,r){e.exports=r.p+"static/image/c30a0190c2e6c4248f0ee3342ccc99f2.3390b406.webp"},463106:function(e,n,r){e.exports=r.p+"static/image/c4436f7b5587883e3681fd3f821451d9.4fd293eb.webp"},737751:function(e,n,r){e.exports=r.p+"static/image/ca3bd5f802c9de4033a8c45b88b94f89.afde83ff.webp"},738206:function(e,n,r){e.exports=r.p+"static/image/ce6a03c519e64a7088e81d1922303eb1.07fdf98e.webp"},867123:function(e,n,r){e.exports=r.p+"static/image/eb087f71dfe98648de820e1440cd0422.e6773e29.webp"},473064:function(e,n,r){e.exports=r.p+"static/image/f0ea1660b5318a5d385f20fb9cda6dc4.44ee6f8c.webp"},680912:function(e,n,r){r.r(n),r.d(n,{default:()=>F});var s=r(552676),i=r(740453),c=r(833657);let t=r.p+"static/image/aaf894487bf27c694133efb0674b5ef7.f01da902.webp",a=r.p+"static/image/be0f52d7e051ab62af600d518dc4e88f.a4f11d42.webp",d=r.p+"static/image/a5a980c1da997097b5fa3d7409042b30.e1890860.webp",l=r.p+"static/image/ef3c75def968cf4804757c916afd40b3.d988e6e2.webp",p=r.p+"static/image/2b1da815e74c96c21f313eabbcd2d5b1.0b55c856.webp",o=r.p+"static/image/a2fd566217adc0a476e6a515c4e295a0.9e3f0939.webp",m=r.p+"static/image/518268432e6e75cdf81aec0140b3d993.ede54633.webp",h=r.p+"static/image/d7dd5b1d801d636919630d1e1d5af5e3.b32dec38.webp",j=r.p+"static/image/86373ccff6bef0f988c6611ec7471ae2.3d238272.webp",x=r.p+"static/image/5468ec5bfc284512d42659e35c780ff4.28458dff.webp",g=r.p+"static/image/add50983bf8a0935cd6e22a12614c88d.5a20f3bd.webp",b=r.p+"static/image/87e585a388c566ed5cb704f540ac5434.83270639.webp",u=r.p+"static/image/c547972bb768bbac678fbcda09624c77.5eb27af6.webp";var f=r(737751);let v=r.p+"static/image/8335687ad0a2a1fca64801d8f5d7434b.9c1c4968.webp",w=r.p+"static/image/a3ff0a122b53916afb151bbbaf80a669.4614349d.webp",S=r.p+"static/image/fd4827d86fafb569a24c469b86caf998.95563b8a.webp",E=r.p+"static/image/73bda7b9325adb8febcb8652d695450b.0705822f.webp",U=r.p+"static/image/db95d432c6dd1d8decdd8a5ddc10edb4.282be751.webp",y=r.p+"static/image/0f4ff0996674757e5000047b0c863c09.95ba26c2.webp",P=r.p+"static/image/df6697f29056b367a8ed66267e5c8720.19e5c585.webp",R=r.p+"static/image/3ae5886c3d0d73af93beb8c313d76e7a.09ec5b67.webp";var I=r(473064),A=r(738206);let C=r.p+"static/image/44f29175a6a48b5fe6d9272e10ef8409.ec3f064b.webp",D=r.p+"static/image/a4853d01decefacd97c2981d83d7076d.f33d017c.webp",_=r.p+"static/image/c834136fec0afd0fab37c464a451e442.903b7371.webp",B=r.p+"static/image/5c13f5e37b4c54a226e471e81605851b.23489558.webp",T=r.p+"static/image/6a6951c3989cc1b11f9eb972e5496b40.07cef3dc.webp";var N=r(901277),M=r(632738);let k=r.p+"static/image/f877b8bbf64e2d8d0bc369427c8ede59.00558af4.webp",q=r.p+"static/image/ce918a3b494d3726abc761fbc4640547.6b48c15f.webp";var H=r(867123),V=r(926308),G=r(463106);function L(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h2:"h2"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"158-考试系统用户注册",children:["158. 考试系统；用户注册",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#158-考试系统用户注册",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节正式进入开发，我们先来开发注册功能。"}),"\n",(0,s.jsx)(n.p,{children:"在 docker desktop 里把 mysql 的容器跑起来："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"安装 prisma"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install prisma --save-dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后执行 prisma init 创建 schema 文件："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npx prisma init\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:H,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"改下 .env 的配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'DATABASE_URL="mysql://root:你的密码@localhost:3306/exam-system"\n'})}),"\n",(0,s.jsx)(n.p,{children:"并且修改下 schema 里的 datasource 部分："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'datasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"然后创建 model。"}),"\n",(0,s.jsx)(n.p,{children:"前面分析过用户表的结构："}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"字段名"}),"\n",(0,s.jsx)(n.th,{children:"数据类型"}),"\n",(0,s.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"id"}),"\n",(0,s.jsx)(n.td,{children:"INT"}),"\n",(0,s.jsx)(n.td,{children:"用户ID"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"username"}),"\n",(0,s.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,s.jsx)(n.td,{children:"用户名"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"password"}),"\n",(0,s.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,s.jsx)(n.td,{children:"密码"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"email"}),"\n",(0,s.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,s.jsx)(n.td,{children:"邮箱"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"create_time"}),"\n",(0,s.jsx)(n.td,{children:"DATETIME"}),"\n",(0,s.jsx)(n.td,{children:"创建时间"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"update_time"}),"\n",(0,s.jsx)(n.td,{children:"DATETIME"}),"\n",(0,s.jsx)(n.td,{children:"更新时间"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"创建对应的 modal："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\nmodel User {\n  id  Int @id @default(autoincrement())\n  username String @db.VarChar(50) @unique\n  password String @db.VarChar(50)\n  email String @db.VarChar(50)\n  createTime DateTime @default(now())\n  updateTime DateTime @updatedAt\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"这里 username 要添加唯一约束。"}),"\n",(0,s.jsx)(n.p,{children:"在 mysql workbench 里创建 exam-system 的数据库："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"先 migrate reset，重置下数据库："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npx prisma migrate reset \n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后创建新的 migration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npx prisma migrate dev --name user\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这时就生成了迁移文件，包含创建 user 表的 sql 语句："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 mysql workbench 里可以看到创建好的 user 表："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"并且 migrate dev 还会生成 client 代码，接下来我们就可以直接来做 CRUD 了。"}),"\n",(0,s.jsx)(n.p,{children:"创建个公共 lib"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g lib prisma\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"改下 PrismaService，继承 PrismaClient，这样它就有 crud 的 api 了："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n\n    constructor() {\n        super({\n            log: [\n                {\n                    emit: 'stdout',\n                    level: 'query'\n                }\n            ]\n        })\n    }\n\n    async onModuleInit() {\n        await this.$connect();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 constructor 里设置 PrismaClient 的 log 参数，也就是打印 sql 到控制台。"}),"\n",(0,s.jsx)(n.p,{children:"在 onModuleInit 的生命周期方法里调用 $connect 来连接数据库。"}),"\n",(0,s.jsx)(n.p,{children:"这样各处就都可以注入 PrismaService 用了。"}),"\n",(0,s.jsx)(n.p,{children:"在 user 微服务引入 PrismaModule："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后在 UserService 里注入 PrismaService 来做 crud："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { PrismaService } from '@app/prisma';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\n\n@Injectable()\nexport class UserService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n\n  @Inject(PrismaService)\n  private prisma: PrismaService;\n\n  async create(data: Prisma.UserCreateInput) {\n      return await this.prisma.user.create({\n          data,\n          select: {\n              id: true\n          }\n      });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"写代码的时候你会发现，参数的类型 prisma 都给你生成好了，直接用就行："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们这节实现注册："}),"\n",(0,s.jsx)(n.p,{children:"在 UserController 增加一个 post 接口："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { RegisterUserDto } from './dto/register-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('register')\n  async register(@Body() registerUser: RegisterUserDto) {\n      return await this.userService.create(registerUser);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"创建 dto/register-user.dto.ts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export class RegisterUserDto{\n    username: string;\n\n    password: string;\n\n    email: string;\n\n    captcha: string;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm run start:dev user\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 postman 里调用下试试："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n    "username": "guang",\n    "password": "123456",\n    "email": "xxxx@xx.com",\n    "captcha": "abc123"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"报错了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"数据库中没有 captcha 的字段。"}),"\n",(0,s.jsx)(n.p,{children:"我们要在调用 service 之前删掉它："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"再试一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"服务端打印了 insert 的 sql 语句："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"数据库里也可以看到这条记录："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后加一下 ValidationPipe，来对请求体做校验。"}),"\n",(0,s.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save class-validator class-transformer\n"})}),"\n",(0,s.jsx)(n.p,{children:"全局启用 ValidationPipe："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"app.useGlobalPipes(new ValidationPipe());\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后加一下校验规则："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { IsEmail, IsNotEmpty, MinLength } from \"class-validator\";\n\nexport class RegisterUserDto {\n\n    @IsNotEmpty({\n        message: \"用户名不能为空\"\n    })\n    username: string;\n    \n    @IsNotEmpty({\n        message: '密码不能为空'\n    })\n    @MinLength(6, {\n        message: '密码不能少于 6 位'\n    })\n    password: string;\n    \n    @IsNotEmpty({\n        message: '邮箱不能为空'\n    })\n    @IsEmail({}, {\n        message: '不是合法的邮箱格式'\n    })\n    email: string;\n    \n    @IsNotEmpty({\n        message: '验证码不能为空'\n    })\n    captcha: string;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(n.p,{children:"然后实现注册的逻辑。"}),"\n",(0,s.jsx)(n.p,{children:"注册的逻辑是这样的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"继续实现 UserService 的 register 方法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { HttpException, HttpStatus, Inject, Injectable, Logger } from '@nestjs/common';\nimport { PrismaService } from '@app/prisma';\nimport { RedisService } from '@app/redis';\nimport { RegisterUserDto } from './dto/register-user.dto';\n\n@Injectable()\nexport class UserService {\n\n  @Inject(PrismaService)\n  private prismaService: PrismaService;\n\n  @Inject(RedisService)\n  private redisService: RedisService;\n\n  private logger = new Logger();\n\n  async register(user: RegisterUserDto) {\n      const captcha = await this.redisService.get(`captcha_${user.email}`);\n\n      if(!captcha) {\n          throw new HttpException('验证码已失效', HttpStatus.BAD_REQUEST);\n      }\n\n      if(user.captcha !== captcha) {\n          throw new HttpException('验证码不正确', HttpStatus.BAD_REQUEST);\n      }\n\n      const foundUser = await this.prismaService.user.findUnique({\n        where: {\n          username: user.username\n        }\n      });\n\n      if(foundUser) {\n        throw new HttpException('用户已存在', HttpStatus.BAD_REQUEST);\n      }\n\n      try {\n        return await this.prismaService.user.create({\n          data: {\n            username: user.username,\n            password: user.password,\n            email: user.email\n          },\n          select: {\n            id: true,\n            username: true,\n            email: true,\n            createTime: true\n          }\n        });\n      } catch(e) {\n        this.logger.error(e, UserService);\n        return null;\n      }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"先检查验证码是否正确，如果正确的话，检查用户是否存在，然后用 prismaService.create 插入数据。"}),"\n",(0,s.jsx)(n.p,{children:"失败的话用 Logger 记录错误日志。"}),"\n",(0,s.jsx)(n.p,{children:"这里的 md5 方法放在 src/utils.ts 里，用 node 内置的 crypto 包实现。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import * as crypto from 'crypto';\n\nexport function md5(str) {\n    const hash = crypto.createHash('md5');\n    hash.update(str);\n    return hash.digest('hex');\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 UserController 里调用下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { RegisterUserDto } from './dto/register-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('register')\n  async register(@Body() registerUser: RegisterUserDto) {\n    return await this.userService.register(registerUser);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后在 postman 里测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"因为还没实现发送邮箱验证码的逻辑，这里我们手动在 redis 添加一个 key："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:"带上错误的验证码，返回验证码不正确；"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"带上正确的验证码，注册成功："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:h,alt:""}),"\n这时可以在数据库里看到这条记录："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"然后我们来实现发送邮箱验证码的功能。"}),"\n",(0,s.jsx)(n.p,{children:"封装个 email 的 lib："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g lib email\n\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"安装发送邮件用的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install nodemailer --save\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 EmailService 里实现 sendMail 方法"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport { createTransport, Transporter} from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n\n    transporter: Transporter\n    \n    constructor() {\n      this.transporter = createTransport({\n          host: \"smtp.qq.com\",\n          port: 587,\n          secure: false,\n          auth: {\n              user: '你的邮箱地址',\n              pass: '你的授权码'\n          },\n      });\n    }\n\n    async sendMail({ to, subject, html }) {\n      await this.transporter.sendMail({\n        from: {\n          name: '考试系统',\n          address: '你的邮箱地址'\n        },\n        to,\n        subject,\n        html\n      });\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"把邮箱地址和授权码改成你自己的。"}),"\n",(0,s.jsxs)(n.p,{children:["具体怎么生成授权码，看前面的 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7226988578700525605/section/7247327089496424505",target:"_blank",rel:"noopener noreferrer",children:"node 发送邮件"}),"那节。"]}),"\n",(0,s.jsx)(n.p,{children:"引入 EmailModule："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"然后在 UserController 里添加一个 get 接口："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Post, Body, Patch, Param, Delete, Inject, Query } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { EmailService } from '@app/email';\nimport { RedisService } from '@app/redis';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Inject(EmailService)\n  private emailService: EmailService;\n\n  @Inject(RedisService)\n  private redisService: RedisService;\n\n  @Get('register-captcha')\n  async captcha(@Query('address') address: string) {\n      const code = Math.random().toString().slice(2,8);\n\n      await this.redisService.set(`captcha_${address}`, code, 5 * 60);\n\n      await this.emailService.sendMail({\n        to: address,\n        subject: '注册验证码',\n        html: `<p>你的注册验证码是 ${code}</p>`\n      });\n      return '发送成功';\n  }\n\n  @Post('register')\n  async register(@Body() registerUser: RegisterUserDto) {\n    return await this.userService.register(registerUser);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"邮件发送成功："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"redis 里也保存了邮箱地址对应的验证码："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"通过邮件发送验证码之后，保存到 redis，注册的时候取出邮箱地址对应的验证码来校验。"}),"\n",(0,s.jsx)(n.p,{children:"这样，整个注册的流程就完成了。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["代码在",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/exam-system",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节我们引入了 prisma，封装了 prisma、email 这两个 lib。"}),"\n",(0,s.jsx)(n.p,{children:"通过 prisma 的 migrate 功能，生成迁移 sql 并同步到数据库。"}),"\n",(0,s.jsx)(n.p,{children:"此外，prisma 会生成 client 的代码，我们封装了 PrismaService 来做 CRUD。"}),"\n",(0,s.jsx)(n.p,{children:"我们实现了 /user/register 和 /user/register-captcha 两个接口。"}),"\n",(0,s.jsx)(n.p,{children:"/user/register-captcha 会向邮箱地址发送一个包含验证码的邮件，并在 redis 里存一份。"}),"\n",(0,s.jsx)(n.p,{children:"/user/register 会根据邮箱地址查询 redis 中的验证码，验证通过会把用户信息保存到表中。"}),"\n",(0,s.jsx)(n.p,{children:"这样，注册功能就完成了。"})]})}function Q(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(L,{...e})}):L(e)}let F=Q;Q.__RSPRESS_PAGE_META={},Q.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F158.%20%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9F%EF%BC%9B%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"158. 考试系统；用户注册",headingTitle:"158. 考试系统；用户注册",frontmatter:{}}}}]);