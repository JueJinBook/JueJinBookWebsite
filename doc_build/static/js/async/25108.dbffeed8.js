"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["25108"],{80999:function(e,n,t){t.r(n),t.d(n,{default:()=>l});var a=t(552676),r=t(740453);let s=t.p+"static/image/4018ec9934e8931f6f9be77280c18262.ace9f715.webp",c=t.p+"static/image/eb4813e86ad6c02e58b43cf71bc31a4e.e7910cba.webp";function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",ol:"ol",li:"li",h3:"h3",ul:"ul",table:"table",thead:"thead",tr:"tr",th:"th",strong:"strong",tbody:"tbody",td:"td",img:"img",h4:"h4"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"24metadata-篇-_-基于配置",children:["24.Metadata 篇 _ 基于配置",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24metadata-篇-_-基于配置",children:"#"})]}),"\n",(0,a.jsxs)(n.h2,{id:"前言",children:["前言",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Metadata，中文译为“元数据”，简单的来说就是描述数据的数据。"}),"\n",(0,a.jsxs)(n.p,{children:["例如，一个 HTML 文件是一种数据，但 HTML 文件也能在 ",(0,a.jsx)(n.code,{children:"<head>"})," 元素中包含描述该文档的数据，比如该文件的标题和字符编码。这些数据就被称为“元数据”。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<head>\n  <meta charset="utf-8" />\n  <title>我的测试页面</title>\n</head>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["不止标题和字符编码，元数据是一个非常丰富的概念，",(0,a.jsx)(n.code,{children:"<head>"})," 中的各种 meta 标签都是元数据，比如这是描述文档作者和文档信息的元数据："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<meta name="author" content="Chris Mills" />\n<meta name="description" content="the description content" />\n'})}),"\n",(0,a.jsxs)(n.p,{children:["这是根据 ",(0,a.jsx)(n.a,{href:"https://ogp.me/",target:"_blank",rel:"noopener noreferrer",children:"Open Graph 协议"}),"编写的元数据，当分享到诸如 Facebook 这样的社交平台的时候，会展示特殊的格式和信息："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<meta property="og:image" content="..." />\n<meta property="og:description" content="..." />\n<meta property="og:title" content="..." />\n'})}),"\n",(0,a.jsxs)(n.p,{children:["网站的自定义图标、",(0,a.jsx)(n.code,{children:"robots.txt"}),"、",(0,a.jsx)(n.code,{children:"sitemap.xml"})," 等也是元数据："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<link rel="icon" href="favicon.ico" type="image/x-icon" />\n'})}),"\n",(0,a.jsx)(n.p,{children:"元数据的丰富会改善 SEO 和 web 可共享性（比如定义一些特殊的字段用于内容分享到一些社交平台），为了方便定义和管理这些元数据，Next.js 提供了 Metadata API。在 Next.js 中，添加元数据的方法分为两类："}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["基于配置的元数据：在 ",(0,a.jsx)(n.code,{children:"layout.js"}),"或 ",(0,a.jsx)(n.code,{children:"page.js"}),"中导出一个静态 ",(0,a.jsx)(n.code,{children:"metadata"})," 对象或者一个动态的 ",(0,a.jsx)(n.code,{children:"generateMetadata"})," 函数。"]}),"\n",(0,a.jsx)(n.li,{children:"基于文件的元数据：添加一个静态或者动态生成的特殊文件"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["通过这些选项，Next.js 会自动为页面生成相关的 ",(0,a.jsx)(n.code,{children:"<head>"})," 元素。"]}),"\n",(0,a.jsxs)(n.h2,{id:"1-基于配置config-based",children:["1. 基于配置（Config-based）",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-基于配置config-based",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"11-静态元数据",children:["1.1. 静态元数据",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-静态元数据",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["要定义一个静态元数据，需要从 ",(0,a.jsx)(n.code,{children:"layout.js"})," 或者 ",(0,a.jsx)(n.code,{children:"page.js"})," 文件中导出一个 ",(0,a.jsx)(n.code,{children:"Metadata"})," 对象："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  title: '...',\n  description: '...',\n}\n \nexport default function Page() {}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["具体 Metadata 对象有哪些字段呢？我数了数",(0,a.jsx)(n.a,{href:"https://github.com/vercel/next.js/blob/canary/packages/next/src/lib/metadata/default-metadata.tsx",target:"_blank",rel:"noopener noreferrer",children:"源码中的字段"}),"，有 31 个，因为内容很多，所以放在本篇后面具体讲解。我们先了解下主要的定义元数据的方式。"]}),"\n",(0,a.jsxs)(n.h3,{id:"12-动态元数据",children:["1.2. 动态元数据",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-动态元数据",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["动态元数据是指依赖动态信息如当前路由参数、外部数据、父级路由段",(0,a.jsx)(n.code,{children:"metadata"}),"等信息的元数据。要定义动态元数据，需要导出一个名为 ",(0,a.jsx)(n.code,{children:"generateMetadata"}),"的函数，该函数返回一个 Metadata 对象。使用示例如下："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/products/[id]/page.js\nexport async function generateMetadata({ params, searchParams }, parent) {\n  // 读取路由参数\n  const id = params.id\n \n  // 获取数据\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n \n  // 获取和拓展父路由段 metadata\n  const previousImages = (await parent).openGraph?.images || []\n \n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n \nexport default function Page({ params, searchParams }) {}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["让我们详细讲解下 generateMetadata 函数。该函数接收两个参数，",(0,a.jsx)(n.code,{children:"props"})," 和 ",(0,a.jsx)(n.code,{children:"parent"}),"。"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"props"})," 指的是包含当前路由参数的对象，该对象又有两个字段，一个是 ",(0,a.jsx)(n.code,{children:"params"}),"，一个是 ",(0,a.jsx)(n.code,{children:"searchParams"}),"。"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"params 包含当前动态路由参数的对象，让我们举些例子你就知道了:"}),"\n"]}),"\n",(0,a.jsxs)(n.table,{children:["\n",(0,a.jsxs)(n.thead,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Route"})}),"\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"URL"})}),"\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"params"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.tbody,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"app/shop/[slug]/page.js"}),"\n",(0,a.jsx)(n.td,{children:"/shop/1"}),"\n",(0,a.jsx)(n.td,{children:"{ slug: '1' }"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"app/shop/[tag]/[item]/page.js"}),"\n",(0,a.jsx)(n.td,{children:"/shop/1/2"}),"\n",(0,a.jsx)(n.td,{children:"{ tag: '1', item: '2' }"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"app/shop/[...slug]/page.js"}),"\n",(0,a.jsx)(n.td,{children:"/shop/1/2"}),"\n",(0,a.jsx)(n.td,{children:"{ slug: ['1', '2'] }"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["那如果访问的不是动态路由呢？那 params 就是一个空对象 ",(0,a.jsx)(n.code,{children:"{}"}),"。"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"searchParams"})," 是一个包含当前 URL 搜索参数的对象，举个例子："]}),"\n"]}),"\n",(0,a.jsxs)(n.table,{children:["\n",(0,a.jsxs)(n.thead,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"URL 网址"})}),"\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"searchParams"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.tbody,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/shop?a=1"}),"\n",(0,a.jsx)(n.td,{children:"{ a: '1' }"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/shop?a=1&b=2"}),"\n",(0,a.jsx)(n.td,{children:"{ a: '1', b: '2' }"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/shop?a=1&a=2"}),"\n",(0,a.jsx)(n.td,{children:"{ a: ['1', '2'] }"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"searchParams"})," 只在 ",(0,a.jsx)(n.code,{children:"page.js"})," 中会有。"]}),"\n",(0,a.jsxs)(n.p,{children:["而 ",(0,a.jsx)(n.code,{children:"parent"})," 是一个包含父路由段 metadata 对象的 promise 对象，所以示例代码中用的是 ",(0,a.jsx)(n.code,{children:"(await parent).openGraph"}),"获取。"]}),"\n",(0,a.jsxs)(n.p,{children:["注意：无论是静态元数据还是动态元数据",(0,a.jsx)(n.strong,{children:"都只在服务端组件中支持"}),"。如果不依赖运行时的信息，则应该尽可能使用静态元数据方式。"]}),"\n",(0,a.jsxs)(n.p,{children:["缓存篇里也会讲，在 ",(0,a.jsx)(n.code,{children:"generateMetadata"}),"、",(0,a.jsx)(n.code,{children:"generateStaticParams"}),"、布局、页面和服务端组件中的 fetch 请求会自动记忆化，所以不用担心多次请求有性能损失。"]}),"\n",(0,a.jsxs)(n.p,{children:["Next.js 会在等待 ",(0,a.jsx)(n.code,{children:"generateMetadata"}),"中数据请求完毕再开始 UI 流式传输给客户端，这可以保证流式响应的第一部分包含 ",(0,a.jsx)(n.code,{children:"<head>"})," 标签。"]}),"\n",(0,a.jsxs)(n.h2,{id:"2-基于文件file-based",children:["2. 基于文件（File-based）",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-基于文件file-based",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"这些特殊的文件都可用于元数据："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"favicon.ico、apple-icon.jpg 和 icon.jpg"}),"\n",(0,a.jsx)(n.li,{children:"opengraph-image.jpg 和 twitter-image.jpg"}),"\n",(0,a.jsx)(n.li,{children:"robots.txt"}),"\n",(0,a.jsx)(n.li,{children:"sitemap.xml"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["基于文件是什么意思呢？我们以 icon 为例，icon 被用于设置浏览器网页标签的图标，虽然也可以使用静态元数据的方式设置（具体讲 metadata 对象的时候会讲到），但是 Next.js 提供了更便捷的方式，那就是约定一个文件名为 ",(0,a.jsx)(n.code,{children:"icon"})," 的图片，格式支持 ",(0,a.jsx)(n.code,{children:".ico"}),"、",(0,a.jsx)(n.code,{children:".jpg"}),", ",(0,a.jsx)(n.code,{children:".jpeg"}),", ",(0,a.jsx)(n.code,{children:".png"}),", ",(0,a.jsx)(n.code,{children:".svg"}),"。也就是添加一个名为 ",(0,a.jsx)(n.code,{children:"icon.(ico|jpg|jpeg|png|svg)"}),"的图片，Next.js 就会为该路由生成对应的元数据标签："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<link\n  rel="icon"\n  href="/icon?<generated>"\n  type="image/<generated>"\n  sizes="<generated>"\n/>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["甚至如果你想动态生成该图片也可以实现，约定一个名为 ",(0,a.jsx)(n.code,{children:"icon.(js|.ts|.tsx)"}),"的文件，返回一张图片即可。"]}),"\n",(0,a.jsx)(n.p,{children:"其他文件也是同理，使用这种方式快捷直观。不过具体这些文件该怎么设置，因为涉及的 API 太多，统一放在后面讲解。"}),"\n",(0,a.jsx)(n.p,{children:"要注意：基于文件的元数据具有更高的优先级，并会覆盖任何基于配置的元数据。"}),"\n",(0,a.jsxs)(n.h2,{id:"3-行为",children:["3. 行为",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-行为",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"31-默认字段",children:["3.1. 默认字段",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-默认字段",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["有两个默认的 ",(0,a.jsx)(n.code,{children:"meta"})," 标签，即使路由未定义元数据也会添加，一个是设置网站字符编码的 ",(0,a.jsx)(n.code,{children:"charset"}),"，一个是设置网站视口宽度和比例的 ",(0,a.jsx)(n.code,{children:"viewport"}),"："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<meta charset="utf-8" />\n<meta name="viewport" content="width=device-width, initial-scale=1" />\n'})}),"\n",(0,a.jsx)(n.p,{children:"当然这两个元数据标签也都是可以覆盖的。"}),"\n",(0,a.jsxs)(n.h3,{id:"32-顺序",children:["3.2. 顺序",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-顺序",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"一个页面和它的布局以及它的父布局，都设置了一些元数据字段，有的字段重复，有的字段不同，那么 Next.js 该怎么处理呢？"}),"\n",(0,a.jsxs)(n.p,{children:["这个逻辑其实我们也很容易想到，具体页面的设置应该优先级更高。Next.js 就是按照从根路由到 ",(0,a.jsx)(n.code,{children:"page.js"}),"的顺序处理，比如当你访问 ",(0,a.jsx)(n.code,{children:"/blog/1"}),"，处理顺序为："]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"app/layout.tsx"}),"（根布局）"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"app/blog/layout.tsx"}),"（嵌套布局布局）"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"app/blog/[slug]/page.tsx"}),"（具体页面）"]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"33-字段覆盖",children:["3.3. 字段覆盖",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-字段覆盖",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["Next.js 会按照这个顺序，将各层元数据对象",(0,a.jsx)(n.strong,{children:"浅合并"}),"，计算得到最终的元数据。重复的将会根据顺序进行替换。让我们举个例子，加入根布局的 ",(0,a.jsx)(n.code,{children:"metadata"})," 设置为："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js\nexport const metadata = {\n  title: 'Acme',\n  openGraph: {\n    title: 'Acme',\n    description: 'Acme is a...',\n  },\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"page.js"})," 的设置为："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/blog/page.js\nexport const metadata = {\n  title: 'Blog',\n  openGraph: {\n    title: 'Blog',\n  },\n}\n \n// 输出:\n// <title>Blog</title>\n// <meta property=\"og:title\" content=\"Blog\" />\n"})}),"\n",(0,a.jsx)(n.p,{children:"在这个例子中："}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"app/layout.js"})," 中的 ",(0,a.jsx)(n.code,{children:"title"})," 被 ",(0,a.jsx)(n.code,{children:"app/blog/page.js"})," 中的 ",(0,a.jsx)(n.code,{children:"title"})," 替换"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"app/layout.js"})," 中的 ",(0,a.jsx)(n.code,{children:"openGraph"})," 字段被 ",(0,a.jsx)(n.code,{children:"app/blog/page.js"})," 中的 ",(0,a.jsx)(n.code,{children:"openGraph"})," 替换，注意因为是浅合并，所以 ",(0,a.jsx)(n.code,{children:"description"})," 字段丢失了。"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["如果你想在多个路由之间共享一些字段，那你可以将他们提取到一个单独的变量中，比如在 ",(0,a.jsx)(n.code,{children:"app"}),"下建立一个 ",(0,a.jsx)(n.code,{children:"shared-metadata.js"}),"文件共享的字段："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/shared-metadata.js\nexport const openGraphImage = { images: ['http://...'] }\n"})}),"\n",(0,a.jsx)(n.p,{children:"当需要使用时："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/page.js \nimport { openGraphImage } from './shared-metadata'\n \nexport const metadata = {\n  openGraph: {\n    ...openGraphImage,\n    title: 'Home',\n  },\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/about/page.js\nimport { openGraphImage } from '../shared-metadata'\n \nexport const metadata = {\n  openGraph: {\n    ...openGraphImage,\n    title: 'About',\n  },\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["在这个例子中，OG 图片在 ",(0,a.jsx)(n.code,{children:"app/layout.js"})," 和 ",(0,a.jsx)(n.code,{children:"app/about/page.js"})," 中共享，然而 ",(0,a.jsx)(n.code,{children:"title"})," 却是不同的。"]}),"\n",(0,a.jsxs)(n.h3,{id:"34-字段继承",children:["3.4. 字段继承",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34-字段继承",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"比如根布局的设置为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js\nexport const metadata = {\n  title: 'Acme',\n  openGraph: {\n    title: 'Acme',\n    description: 'Acme is a...',\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"页面的设置为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// app/about/page.js\nexport const metadata = {\n  title: \'About\',\n}\n \n// 输出:\n// <title>About</title>\n// <meta property="og:title" content="Acme" />\n// <meta property="og:description" content="Acme is a..." />\n'})}),"\n",(0,a.jsx)(n.p,{children:"在这个例子中："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"app/layout.js"})," 中的 ",(0,a.jsx)(n.code,{children:"title"})," 被 ",(0,a.jsx)(n.code,{children:"app/about/page.js"})," 中的 ",(0,a.jsx)(n.code,{children:"title"})," 替代"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"app/layout.js"})," 中的所有 ",(0,a.jsx)(n.code,{children:"openGraph"})," 字段被 ",(0,a.jsx)(n.code,{children:"app/about/page.js"})," 继承，因为 ",(0,a.jsx)(n.code,{children:"app/about/page.js"})," 没有设置 ",(0,a.jsx)(n.code,{children:"openGraph"})," 字段"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"4-json-ld",children:["4. JSON-LD",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-json-ld",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"41-介绍",children:["4.1 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["JSON-LD，英文全称：",(0,a.jsx)(n.code,{children:"JavaScript Object Notation for Linked Data"}),"，当然这个太“全”了，稍微简写一点就是 ",(0,a.jsx)(n.code,{children:"JSON for Linking Data"}),"，官方文档地址：",(0,a.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fjson-ld.org%2F",target:"_blank",rel:"noopener noreferrer",children:"json-ld.org/"}),"，是一种基于 JSON 的数据格式，用于向 Google 和其他搜索引擎描述网站上的内容。"]}),"\n",(0,a.jsx)(n.p,{children:"比如如果我们在 Google 搜索 「Chocolate in a mug」，我们会看到这样的搜索结果："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsxs)(n.p,{children:["这个搜索结果有评分（4.5）、评价（581条）等内容，我们打开页面，就可以看到搜索展示的这个内容其实对应了 ",(0,a.jsx)(n.code,{children:"application/ld+json"})," 中的内容："]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:s,alt:""})}),"\n",(0,a.jsxs)(n.h3,{id:"42-正常添加",children:["4.2 正常添加",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-正常添加",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"如果我们也要实现这样的效果，方便搜索引擎展现，该怎么做呢？"}),"\n",(0,a.jsx)(n.p,{children:"在页面加入这种结构化数据的方法很简单，只用在页面添加这样一段脚本就可以了："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<script type="application/ld+json">\n  // ...\n<\/script>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["具体里面的内容需要参考比如 Google 搜索中心提供的",(0,a.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fdevelopers.google.com%2Fsearch%2Fdocs%2Fadvanced%2Fstructured-data%2Fsd-policies",target:"_blank",rel:"noopener noreferrer",children:"《结构化数据常规指南》"}),"，如果你写的是文章，参考 ",(0,a.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fdevelopers.google.com%2Fsearch%2Fdocs%2Fadvanced%2Fstructured-data%2Farticle",target:"_blank",rel:"noopener noreferrer",children:"Article 章节"}),"后，可以写入以下这些属性："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<script type="application/ld+json">\n  {\n  "@context": "https://schema.org",\n  "@type": "Article",\n  "headline": "这里填写标题",\n  "image": [\n  "https://ts.yayujs.com/icon-144x144.png"\n  ],\n  "datePublished": "2021-11-10T22:06:06.000Z",\n  "dateModified": "2022-03-04T16:00:00.000Z",\n  "author": [{\n  "@type": "Person",\n  "name": "冴羽",\n  "url": "https://github.com/mqyqingfeng/Blog"\n  }]\n  }\n<\/script>\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"43-nextjs-添加",children:["4.3 Next.js 添加",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43-nextjs-添加",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["如何在 Next.js 中添加 JOSN-LD 呢？Next.js 推荐在 ",(0,a.jsx)(n.code,{children:"layout.js"}),"或 ",(0,a.jsx)(n.code,{children:"page.js"}),"组件中使用 ",(0,a.jsx)(n.code,{children:"<script>"})," 标签，使用示例如下："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/products/[id]/page.js\nexport default async function Page({ params }) {\n  const product = await getProduct(params.id)\n \n  const jsonLd = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    name: product.name,\n    image: product.image,\n    description: product.description,\n  }\n \n  return (\n    <section>\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n      />\n      {/* ... */}\n    </section>\n  )\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["如果你使用 TypeScript，可以配合使用 ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/schema-dts",target:"_blank",rel:"noopener noreferrer",children:"schema-dts"})," 这个包："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { Product, WithContext } from 'schema-dts'\n \nconst jsonLd: WithContext<Product> = {\n  '@context': 'https://schema.org',\n  '@type': 'Product',\n  name: 'Next.js Sticker',\n  image: 'https://nextjs.org/imgs/sticker.png',\n  description: 'Dynamic at the speed of static.',\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["添加 JSON-LD 并部署后，你可以使用 ",(0,a.jsx)(n.a,{href:"https://search.google.com/test/rich-results",target:"_blank",rel:"noopener noreferrer",children:"https://search.google.com/test/rich-results"})," 来测试网页是否支持富媒体搜索结果，使用 ",(0,a.jsx)(n.a,{href:"https://validator.schema.org/",target:"_blank",rel:"noopener noreferrer",children:"https://validator.schema.org/"})," 测试页面的结构化数据，输入 ",(0,a.jsx)(n.code,{children:"https://yayujs.com"}),"试试。"]}),"\n",(0,a.jsxs)(n.h2,{id:"5-metadata-字段",children:["5. Metadata 字段",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-metadata-字段",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"接下来我们来介绍下 Metadata 对象的字段有哪些，由于字段很多，你可以先了解一下有哪些，需要使用的时候再查找使用。每个字段都配有使用的例子。"}),"\n",(0,a.jsxs)(n.h3,{id:"51-title",children:["5.1. title",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#51-title",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"设置文档的标题，该值可以是一个简单的字符串，也可以是一个可选的模板对象。"}),"\n",(0,a.jsxs)(n.h4,{id:"511-字符串",children:["5.1.1. 字符串",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#511-字符串",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"先说字符串："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  title: 'Next.js',\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["注意在 ",(0,a.jsx)(n.code,{children:"layout.js"})," 和 ",(0,a.jsx)(n.code,{children:"page.js"})," 中都可以定义，输出结果为："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"<title>Next.js</title>\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"512-模板对象",children:["5.1.2. 模板对象",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#512-模板对象",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"再说模板对象："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js \nexport const metadata = {\n  title: {\n    default: '...',\n    template: '...',\n    absolute: '...',\n  },\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["其中 ",(0,a.jsx)(n.code,{children:"default"}),"为没有定义 ",(0,a.jsx)(n.code,{children:"title"})," 的子路由提供一个备用 title："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/layout.tsx\nexport const metadata = {\n  title: {\n    default: 'Acme',\n  },\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/about/page.tsx\nexport const metadata = {}\n \n// Output: <title>Acme</title>\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"template"})," 可用于为子路由的 ",(0,a.jsx)(n.code,{children:"title"})," 添加一个前缀或者后缀，比如："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js\nexport const metadata = {\n  title: {\n    template: '%s | Acme',\n    default: 'Acme', // 设置 template 的时候，default 必传\n  },\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/about/page.js\nexport const metadata = {\n  title: 'About',\n}\n \n// Output: <title>About | Acme</title>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["使用 ",(0,a.jsx)(n.code,{children:"template"})," 的时候要注意："]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["使用 ",(0,a.jsx)(n.code,{children:"title.template"})," 的时候，",(0,a.jsx)(n.code,{children:"title.default"})," 是必要的"]}),"\n",(0,a.jsxs)(n.li,{children:["定义在 ",(0,a.jsx)(n.code,{children:"layout.js"})," 中的 ",(0,a.jsx)(n.code,{children:"title.template"})," 不会应用于同级的 ",(0,a.jsx)(n.code,{children:"page.js"})," 中的 ",(0,a.jsx)(n.code,{children:"title"})]}),"\n",(0,a.jsxs)(n.li,{children:["定义在 ",(0,a.jsx)(n.code,{children:"page.js"})," 中的 ",(0,a.jsx)(n.code,{children:"title.template"})," 不会有效果，因为页面没有子路由段。"]}),"\n",(0,a.jsxs)(n.li,{children:["如果路由没有定义 ",(0,a.jsx)(n.code,{children:"title"})," 或者 ",(0,a.jsx)(n.code,{children:"title.default"}),"，",(0,a.jsx)(n.code,{children:"title.template"})," 是不生效的"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"absolute"}),"用于设置标题，但会忽略父路由段中设置的 ",(0,a.jsx)(n.code,{children:"title.template"}),"："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js\nexport const metadata = {\n  title: {\n    template: '%s | Acme',\n  },\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/about/page.js\nexport const metadata = {\n  title: {\n    absolute: 'About',\n  },\n}\n \n// Output: <title>About</title>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["这三个值在 ",(0,a.jsx)(n.code,{children:"layout.js"})," 和 ",(0,a.jsx)(n.code,{children:"page.js"})," 中的表现会有不同，让我们细致梳理一下："]}),"\n",(0,a.jsxs)(n.p,{children:["在 ",(0,a.jsx)(n.code,{children:"layout.js"})," 中："]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"title"}),"（字符串）和 ",(0,a.jsx)(n.code,{children:"title.default"})," 定义的是未设置标题的子路由段的默认标题。它会根据最近的父路由段中的 ",(0,a.jsx)(n.code,{children:"title.template"})," 进行拓展。举个例子："]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js\nexport const metadata = {\n  title: {\n    default: 'home',\n    template: '%s | Home'\n  }\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/about/layout.js\nexport const metadata = {\n  title: {\n    default: 'about'\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["如果 ",(0,a.jsx)(n.code,{children:"/about/company"}),"没有定义自己标题，那它的标题为：",(0,a.jsx)(n.code,{children:"about | Home"}),"。而如果最近的父路由段没有定义 ",(0,a.jsx)(n.code,{children:"title.template"}),"，那就不进行拓展。"]}),"\n",(0,a.jsxs)(n.p,{children:["PS：不过根据 demo 测试，如果 ",(0,a.jsx)(n.code,{children:"app/layout.js"})," 如上相同设置，",(0,a.jsx)(n.code,{children:"app/about/layout.js"})," 不设置，",(0,a.jsx)(n.code,{children:"app/about/company/layout.js"})," 设置 ",(0,a.jsx)(n.code,{children:"default: 'company'"}),"，访问 ",(0,a.jsx)(n.code,{children:"/about/company/members"}),"时，标题为 ",(0,a.jsx)(n.code,{children:"company | Home"}),"，也就是说实际的测试结果是如果完全不设置 metadata，默认标题会根据最近的存在的 ",(0,a.jsx)(n.code,{children:"title.template"})," 进行扩展，并不一定是最近的父路由段中的 ",(0,a.jsx)(n.code,{children:"title.template"}),"。"]}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"title.absolute"})," 定义子路由段的默认标题，它会忽略来自父路由段的 ",(0,a.jsx)(n.code,{children:"title.template"}),"，也就是说即使最近的父路由段有 ",(0,a.jsx)(n.code,{children:"title.template"}),'，也不进行拓展（所以才叫 "absoulte" 绝对标题）']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"title.template"})," 为子路由段定义一个新标题模板，也就是说即使每层 layout 都设置了 ",(0,a.jsx)(n.code,{children:"title.template"}),"，也不会出现 ",(0,a.jsx)(n.code,{children:"xxx | Company | About | Home"})," 这种标题，设置标题的子路由段只会根据父路由段的 ",(0,a.jsx)(n.code,{children:"title.template"})," 进行设置。"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["在 ",(0,a.jsx)(n.code,{children:"page.js"})," 中："]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"如果一个页面没有定义自己的标题，它会使用最近的父级解析标题，注意是“最近的‘父级解析标题’”，而非“‘最近的父级’解析标题”。"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["PS：根据 demo 测试，如果 ",(0,a.jsx)(n.code,{children:"page.js"})," 未设置 ",(0,a.jsx)(n.code,{children:"title"}),"，会优先使用同级 ",(0,a.jsx)(n.code,{children:"layout.js"})," 中设置的 ",(0,a.jsx)(n.code,{children:"title"}),"，包括字符串、",(0,a.jsx)(n.code,{children:"title.default"})," 和",(0,a.jsx)(n.code,{children:" title.abslolute"})," 的方式。"]}),"\n",(0,a.jsxs)(n.p,{children:["如果祖先 ",(0,a.jsx)(n.code,{children:"layout.js"})," 中只有一层设置了标题，而其他都未设置，页面的标题会使用该标题，比如 ",(0,a.jsx)(n.code,{children:"app/layout.js"}),"中设置 ",(0,a.jsx)(n.code,{children:"title: 'home'"}),"，",(0,a.jsx)(n.code,{children:"app/about/company/members"}),"中的各层 ",(0,a.jsx)(n.code,{children:"layout.js"}),"都未设置，",(0,a.jsx)(n.code,{children:"/about/company/members"})," 的 ",(0,a.jsx)(n.code,{children:"title"})," 为 ",(0,a.jsx)(n.code,{children:"home"}),"。欢迎写 demo 验证。"]}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:["如果 ",(0,a.jsx)(n.code,{children:"page.js"})," 定义了路由 title（字符串），它会根据最近的父路由段中的 title.template 进行拓展。"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["PS：不过根据 demo 测试，如同 ",(0,a.jsx)(n.code,{children:"layout.js"}),"，如果父级完全不设置 metadata，标题会根据最近的存在的 ",(0,a.jsx)(n.code,{children:"title.template"})," 进行扩展，并不一定是最近的父路由段中的 ",(0,a.jsx)(n.code,{children:"title.template"}),"。"]}),"\n",(0,a.jsxs)(n.p,{children:["换句话说，如果不设置 ",(0,a.jsx)(n.code,{children:"layout.js"})," 的 ",(0,a.jsx)(n.code,{children:"metadata"}),"，在标题的处理上，相当于这层不存在。"]}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsxs)(n.li,{children:["使用 ",(0,a.jsx)(n.code,{children:"title.absolute"})," 定义路由标题，它会忽略父路由段中的 ",(0,a.jsx)(n.code,{children:"title.template"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"page.js"})," 中设置 ",(0,a.jsx)(n.code,{children:"title.template"}),"没有效果。"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"总之，在使用的时候，尽可能保证每个页面都有设置 title，就不会遇到奇怪的逻辑了。"}),"\n",(0,a.jsxs)(n.h3,{id:"52-description",children:["5.2. description",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#52-description",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"设置页面的描述："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  description: 'The React Framework for the Web',\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<meta name="description" content="The React Framework for the Web" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"53-基础字段",children:["5.3. 基础字段",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#53-基础字段",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  generator: 'Next.js',\n  applicationName: 'Next.js',\n  referrer: 'origin-when-cross-origin',\n  keywords: ['Next.js', 'React', 'JavaScript'],\n  authors: [{ name: 'Seb' }, { name: 'Josh', url: 'https://nextjs.org' }],\n  creator: 'Jiachi Liu',\n  publisher: 'Sebastian Markb\xe5ge',\n  formatDetection: {\n    email: false,\n    address: false,\n    telephone: false,\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<meta name="application-name" content="Next.js" />\n<meta name="author" content="Seb" />\n<link rel="author" href="https://nextjs.org" />\n<meta name="author" content="Josh" />\n<meta name="generator" content="Next.js" />\n<meta name="keywords" content="Next.js,React,JavaScript" />\n<meta name="referrer" content="origin-when-cross-origin" />\n<meta name="color-scheme" content="dark" />\n<meta name="creator" content="Jiachi Liu" />\n<meta name="publisher" content="Sebastian Markb\xe5ge" />\n<meta name="format-detection" content="telephone=no, address=no, email=no" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"54-metadatabase",children:["5.4. metadataBase",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#54-metadatabase",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"设置 metadata 字段中地址的 URL 前缀，看个例子就明白了："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  metadataBase: new URL('https://acme.com'),\n  alternates: {\n    canonical: '/',\n    languages: {\n      'en-US': '/en-US',\n      'de-DE': '/de-DE',\n    },\n  },\n  openGraph: {\n    images: '/og-image.png',\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<link rel="canonical" href="https://acme.com" />\n<link rel="alternate" hreflang="en-US" href="https://acme.com/en-US" />\n<link rel="alternate" hreflang="de-DE" href="https://acme.com/de-DE" />\n<meta property="og:image" content="https://acme.com/og-image.png" />\n'})}),"\n",(0,a.jsxs)(n.p,{children:["关于 ",(0,a.jsx)(n.code,{children:"metadataBase"})," 和 ",(0,a.jsx)(n.code,{children:"metadata"}),"，Next.js 会自动处理，并不是简单的字符串拼接，比如当你设置 ",(0,a.jsx)(n.code,{children:"metadataBase"}),"为："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js\nexport const metadata = {\n  metadataBase: new URL('https://acme.com'),\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["如果你传入 ",(0,a.jsx)(n.code,{children:"metadata"})," 的值为："]}),"\n",(0,a.jsxs)(n.table,{children:["\n",(0,a.jsxs)(n.thead,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"metadata 字段"})}),"\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"解析 URL"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.tbody,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/"}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://acme.com",target:"_blank",rel:"noopener noreferrer",children:"https://acme.com"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"./"}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://acme.com",target:"_blank",rel:"noopener noreferrer",children:"https://acme.com"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"payments"}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://acme.com/payments",target:"_blank",rel:"noopener noreferrer",children:"https://acme.com/payments"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/payments"}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://acme.com/payments",target:"_blank",rel:"noopener noreferrer",children:"https://acme.com/payments"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"./payments"}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://acme.com/payments",target:"_blank",rel:"noopener noreferrer",children:"https://acme.com/payments"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"../payments"}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://acme.com/payments",target:"_blank",rel:"noopener noreferrer",children:"https://acme.com/payments"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://beta.acme.com/payments",target:"_blank",rel:"noopener noreferrer",children:"https://beta.acme.com/payments"})}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://beta.acme.com/payments",target:"_blank",rel:"noopener noreferrer",children:"https://beta.acme.com/payments"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"其他关于 metadataBase："}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"metadataBase"})," 通常设置在",(0,a.jsx)(n.code,{children:"app/layout.js"}),"，应用于所有路由"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"metadataBase"})," 可以设置的更具体，比如 ",(0,a.jsx)(n.code,{children:"https://app.acme.com"}),"、",(0,a.jsx)(n.code,{children:"https://acme.com/start/from/here"}),"等"]}),"\n",(0,a.jsxs)(n.li,{children:["如果 ",(0,a.jsx)(n.code,{children:"metadata"})," 提供了绝对地址，",(0,a.jsx)(n.code,{children:"metadataBase"})," 就会被忽略"]}),"\n",(0,a.jsxs)(n.li,{children:["在没有配置 ",(0,a.jsx)(n.code,{children:"metadataBase"})," 的时候，",(0,a.jsx)(n.code,{children:"metadata"})," 使用相对地址会报错"]}),"\n",(0,a.jsxs)(n.li,{children:["Next.js 会在 ",(0,a.jsx)(n.code,{children:"metadataBase"})," 和相对地址间处理多余的斜线，比如 ",(0,a.jsx)(n.code,{children:"metadataBase"})," 为 ",(0,a.jsx)(n.code,{children:"https://acme.com/"}),"，",(0,a.jsx)(n.code,{children:"metadata"})," 为 ",(0,a.jsx)(n.code,{children:"/path"}),"，Next.js 也能正确处理为 ",(0,a.jsx)(n.code,{children:"https://acme.com/path"}),"。"]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"55-opengraph",children:["5.5. openGraph",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#55-opengraph",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  openGraph: {\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    url: 'https://nextjs.org',\n    siteName: 'Next.js',\n    images: [\n      {\n        url: 'https://nextjs.org/og.png',\n        width: 800,\n        height: 600,\n      },\n      {\n        url: 'https://nextjs.org/og-alt.png',\n        width: 1800,\n        height: 1600,\n        alt: 'My custom alt',\n      },\n    ],\n    locale: 'en_US',\n    type: 'website',\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<meta property="og:title" content="Next.js" />\n<meta property="og:description" content="The React Framework for the Web" />\n<meta property="og:url" content="https://nextjs.org/" />\n<meta property="og:site_name" content="Next.js" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:image:url" content="https://nextjs.org/og.png" />\n<meta property="og:image:width" content="800" />\n<meta property="og:image:height" content="600" />\n<meta property="og:image:url" content="https://nextjs.org/og-alt.png" />\n<meta property="og:image:width" content="1800" />\n<meta property="og:image:height" content="1600" />\n<meta property="og:image:alt" content="My custom alt" />\n<meta property="og:type" content="website" />\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export const metadata = {\n  openGraph: {\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    type: 'article',\n    publishedTime: '2023-01-01T00:00:00.000Z',\n    authors: ['Seb', 'Josh'],\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<meta property="og:title" content="Next.js" />\n<meta property="og:description" content="The React Framework for the Web" />\n<meta property="og:type" content="article" />\n<meta property="article:published_time" content="2023-01-01T00:00:00.000Z" />\n<meta property="article:author" content="Seb" />\n<meta property="article:author" content="Josh" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"56-robots",children:["5.6. robots",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#56-robots",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  robots: {\n    index: false,\n    follow: true,\n    nocache: true,\n    googleBot: {\n      index: true,\n      follow: false,\n      noimageindex: true,\n      'max-video-preview': -1,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n    },\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<meta name="robots" content="noindex, follow, nocache" />\n<meta\n  name="googlebot"\n  content="index, nofollow, noimageindex, max-video-preview:-1, max-image-preview:large, max-snippet:-1"\n/>\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"57-icons",children:["5.7. icons",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#57-icons",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  icons: {\n    icon: '/icon.png',\n    shortcut: '/shortcut-icon.png',\n    apple: '/apple-icon.png',\n    other: {\n      rel: 'apple-touch-icon-precomposed',\n      url: '/apple-touch-icon-precomposed.png',\n    },\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<link rel="shortcut icon" href="/shortcut-icon.png" />\n<link rel="icon" href="/icon.png" />\n<link rel="apple-touch-icon" href="/apple-icon.png" />\n<link\n  rel="apple-touch-icon-precomposed"\n  href="/apple-touch-icon-precomposed.png"\n/>\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export const metadata = {\n  icons: {\n    icon: [{ url: '/icon.png' }, new URL('/icon.png', 'https://example.com')],\n    shortcut: ['/shortcut-icon.png'],\n    apple: [\n      { url: '/apple-icon.png' },\n      { url: '/apple-icon-x3.png', sizes: '180x180', type: 'image/png' },\n    ],\n    other: [\n      {\n        rel: 'apple-touch-icon-precomposed',\n        url: '/apple-touch-icon-precomposed.png',\n      },\n    ],\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<link rel="shortcut icon" href="/shortcut-icon.png" />\n<link rel="icon" href="/icon.png" />\n<link rel="apple-touch-icon" href="/apple-icon.png" />\n<link\n  rel="apple-touch-icon-precomposed"\n  href="/apple-touch-icon-precomposed.png"\n/>\n<link rel="icon" href="https://example.com/icon.png" />\n<link\n  rel="apple-touch-icon"\n  href="/apple-icon-x3.png"\n  sizes="180x180"\n  type="image/png"\n/>\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"58-themecolor",children:["5.8. themeColor",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#58-themecolor",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["metadata 中的 themeColor 已废弃，使用 ",(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079586296791050#heading-5",target:"_blank",rel:"noopener noreferrer",children:"viewport 配置项"})]}),"\n",(0,a.jsxs)(n.h3,{id:"59-manifest",children:["5.9. manifest",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#59-manifest",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  manifest: 'https://nextjs.org/manifest.json',\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<link rel="manifest" href="https://nextjs.org/manifest.json" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"510-twitter",children:["5.10. twitter",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#510-twitter",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    siteId: '1467726470533754880',\n    creator: '@nextjs',\n    creatorId: '1467726470533754880',\n    images: ['https://nextjs.org/og.png'],\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<meta name="twitter:card" content="summary_large_image" />\n<meta name="twitter:site:id" content="1467726470533754880" />\n<meta name="twitter:creator" content="@nextjs" />\n<meta name="twitter:creator:id" content="1467726470533754880" />\n<meta name="twitter:title" content="Next.js" />\n<meta name="twitter:description" content="The React Framework for the Web" />\n<meta name="twitter:image" content="https://nextjs.org/og.png" />\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  twitter: {\n    card: 'app',\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    siteId: '1467726470533754880',\n    creator: '@nextjs',\n    creatorId: '1467726470533754880',\n    images: {\n      url: 'https://nextjs.org/og.png',\n      alt: 'Next.js Logo',\n    },\n    app: {\n      name: 'twitter_app',\n      id: {\n        iphone: 'twitter_app://iphone',\n        ipad: 'twitter_app://ipad',\n        googleplay: 'twitter_app://googleplay',\n      },\n      url: {\n        iphone: 'https://iphone_url',\n        ipad: 'https://ipad_url',\n      },\n    },\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<meta name="twitter:site:id" content="1467726470533754880" />\n<meta name="twitter:creator" content="@nextjs" />\n<meta name="twitter:creator:id" content="1467726470533754880" />\n<meta name="twitter:title" content="Next.js" />\n<meta name="twitter:description" content="The React Framework for the Web" />\n<meta name="twitter:card" content="app" />\n<meta name="twitter:image" content="https://nextjs.org/og.png" />\n<meta name="twitter:image:alt" content="Next.js Logo" />\n<meta name="twitter:app:name:iphone" content="twitter_app" />\n<meta name="twitter:app:id:iphone" content="twitter_app://iphone" />\n<meta name="twitter:app:id:ipad" content="twitter_app://ipad" />\n<meta name="twitter:app:id:googleplay" content="twitter_app://googleplay" />\n<meta name="twitter:app:url:iphone" content="https://iphone_url" />\n<meta name="twitter:app:url:ipad" content="https://ipad_url" />\n<meta name="twitter:app:name:ipad" content="twitter_app" />\n<meta name="twitter:app:name:googleplay" content="twitter_app" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"511-viewport",children:["5.11. viewport",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#511-viewport",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["Next.js 14 起已废弃，使用 ",(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079586296791050#heading-5",target:"_blank",rel:"noopener noreferrer",children:"viewport 配置项"})]}),"\n",(0,a.jsxs)(n.h3,{id:"512-verification",children:["5.12. verification",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#512-verification",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  verification: {\n    google: 'google',\n    yandex: 'yandex',\n    yahoo: 'yahoo',\n    other: {\n      me: ['my-email', 'my-link'],\n    },\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<meta name="google-site-verification" content="google" />\n<meta name="y_key" content="yahoo" />\n<meta name="yandex-verification" content="yandex" />\n<meta name="me" content="my-email" />\n<meta name="me" content="my-link" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"513-applewebapp",children:["5.13. appleWebApp",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#513-applewebapp",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  itunes: {\n    appId: 'myAppStoreID',\n    appArgument: 'myAppArgument',\n  },\n  appleWebApp: {\n    title: 'Apple Web App',\n    statusBarStyle: 'black-translucent',\n    startupImage: [\n      '/assets/startup/apple-touch-startup-image-768x1004.png',\n      {\n        url: '/assets/startup/apple-touch-startup-image-1536x2008.png',\n        media: '(device-width: 768px) and (device-height: 1024px)',\n      },\n    ],\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<meta\n  name="apple-itunes-app"\n  content="app-id=myAppStoreID, app-argument=myAppArgument"\n/>\n<meta name="apple-mobile-web-app-capable" content="yes" />\n<meta name="apple-mobile-web-app-title" content="Apple Web App" />\n<link\n  href="/assets/startup/apple-touch-startup-image-768x1004.png"\n  rel="apple-touch-startup-image"\n/>\n<link\n  href="/assets/startup/apple-touch-startup-image-1536x2008.png"\n  media="(device-width: 768px) and (device-height: 1024px)"\n  rel="apple-touch-startup-image"\n/>\n<meta\n  name="apple-mobile-web-app-status-bar-style"\n  content="black-translucent"\n/>\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"514-alternates",children:["5.14. alternates",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#514-alternates",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  alternates: {\n    canonical: 'https://nextjs.org',\n    languages: {\n      'en-US': 'https://nextjs.org/en-US',\n      'de-DE': 'https://nextjs.org/de-DE',\n    },\n    media: {\n      'only screen and (max-width: 600px)': 'https://nextjs.org/mobile',\n    },\n    types: {\n      'application/rss+xml': 'https://nextjs.org/rss',\n    },\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<link rel="canonical" href="https://nextjs.org" />\n<link rel="alternate" hreflang="en-US" href="https://nextjs.org/en-US" />\n<link rel="alternate" hreflang="de-DE" href="https://nextjs.org/de-DE" />\n<link\n  rel="alternate"\n  media="only screen and (max-width: 600px)"\n  href="https://nextjs.org/mobile"\n/>\n<link\n  rel="alternate"\n  type="application/rss+xml"\n  href="https://nextjs.org/rss"\n/>\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"515-applinks",children:["5.15. appLinks",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#515-applinks",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  appLinks: {\n    ios: {\n      url: 'https://nextjs.org/ios',\n      app_store_id: 'app_store_id',\n    },\n    android: {\n      package: 'com.example.android/package',\n      app_name: 'app_name_android',\n    },\n    web: {\n      url: 'https://nextjs.org/web',\n      should_fallback: true,\n    },\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<meta property="al:ios:url" content="https://nextjs.org/ios" />\n<meta property="al:ios:app_store_id" content="app_store_id" />\n<meta property="al:android:package" content="com.example.android/package" />\n<meta property="al:android:app_name" content="app_name_android" />\n<meta property="al:web:url" content="https://nextjs.org/web" />\n<meta property="al:web:should_fallback" content="true" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"516-archives",children:["5.16. archives",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#516-archives",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  archives: ['https://nextjs.org/13'],\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<link rel="archives" href="https://nextjs.org/13" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"517-assets",children:["5.17. assets",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#517-assets",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  assets: ['https://nextjs.org/assets'],\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<link rel="assets" href="https://nextjs.org/assets" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"518-bookmarks",children:["5.18. bookmarks",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#518-bookmarks",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  bookmarks: ['https://nextjs.org/13'],\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'<link rel="bookmarks" href="https://nextjs.org/13" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"519-category",children:["5.19. category",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#519-category",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// layout.js | page.js\nexport const metadata = {\n  category: 'technology',\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<meta name="category" content="technology" />\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"其他",children:["其他",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#其他",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"所有的 metadata 选项都可以通过像本节介绍的这种方式直接覆盖，Next.js 内部已经定义了这些字段。然而你也可能会想自定义一些 metadata 标签，此时就可以使用 other 选项："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"export const metadata = {\n  other: {\n    custom: 'meta',\n  },\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"输出的 HTML 为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<meta name="custom" content="meta" />\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/optimizing/metadata",target:"_blank",rel:"noopener noreferrer",children:"Optimizing: Metadata"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Metadata",target:"_blank",rel:"noopener noreferrer",children:"Metadata - MDN Web 文档术语表：Web 相关术语的定义 | MDN"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML",target:"_blank",rel:"noopener noreferrer",children:"“头”里有什么——HTML 元信息 - 学习 Web 开发 | MDN"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/functions/generate-metadata",target:"_blank",rel:"noopener noreferrer",children:(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/functions/generate-metadata",target:"_blank",rel:"noopener noreferrer",children:"https://nextjs.org/docs/app/api-reference/functions/generate-metadata"})})}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F24.Metadata%20%E7%AF%87%20_%20%E5%9F%BA%E4%BA%8E%E9%85%8D%E7%BD%AE.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. 基于配置（Config-based）",id:"1-基于配置config-based",depth:2},{text:"1.1. 静态元数据",id:"11-静态元数据",depth:3},{text:"1.2. 动态元数据",id:"12-动态元数据",depth:3},{text:"2. 基于文件（File-based）",id:"2-基于文件file-based",depth:2},{text:"3. 行为",id:"3-行为",depth:2},{text:"3.1. 默认字段",id:"31-默认字段",depth:3},{text:"3.2. 顺序",id:"32-顺序",depth:3},{text:"3.3. 字段覆盖",id:"33-字段覆盖",depth:3},{text:"3.4. 字段继承",id:"34-字段继承",depth:3},{text:"4. JSON-LD",id:"4-json-ld",depth:2},{text:"4.1 介绍",id:"41-介绍",depth:3},{text:"4.2 正常添加",id:"42-正常添加",depth:3},{text:"4.3 Next.js 添加",id:"43-nextjs-添加",depth:3},{text:"5. Metadata 字段",id:"5-metadata-字段",depth:2},{text:"5.1. title",id:"51-title",depth:3},{text:"5.1.1. 字符串",id:"511-字符串",depth:4},{text:"5.1.2. 模板对象",id:"512-模板对象",depth:4},{text:"5.2. description",id:"52-description",depth:3},{text:"5.3. 基础字段",id:"53-基础字段",depth:3},{text:"5.4. metadataBase",id:"54-metadatabase",depth:3},{text:"5.5. openGraph",id:"55-opengraph",depth:3},{text:"5.6. robots",id:"56-robots",depth:3},{text:"5.7. icons",id:"57-icons",depth:3},{text:"5.8. themeColor",id:"58-themecolor",depth:3},{text:"5.9. manifest",id:"59-manifest",depth:3},{text:"5.10. twitter",id:"510-twitter",depth:3},{text:"5.11. viewport",id:"511-viewport",depth:3},{text:"5.12. verification",id:"512-verification",depth:3},{text:"5.13. appleWebApp",id:"513-applewebapp",depth:3},{text:"5.14. alternates",id:"514-alternates",depth:3},{text:"5.15. appLinks",id:"515-applinks",depth:3},{text:"5.16. archives",id:"516-archives",depth:3},{text:"5.17. assets",id:"517-assets",depth:3},{text:"5.18. bookmarks",id:"518-bookmarks",depth:3},{text:"5.19. category",id:"519-category",depth:3},{text:"其他",id:"其他",depth:3},{text:"参考链接",id:"参考链接",depth:2}],title:"24.Metadata 篇 _ 基于配置",headingTitle:"24.Metadata 篇 _ 基于配置",frontmatter:{}}}}]);