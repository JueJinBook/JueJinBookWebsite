"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["55044"],{492862:function(e,n,r){r.r(n),r.d(n,{default:()=>$});var s=r(552676),a=r(740453);let i=r.p+"static/image/3fc53df7cad7c445f150f5984ec2a2ac.a7004a73.webp",c=r.p+"static/image/78a3ae85f3711b3689723a06da9b2e04.41e32ba0.webp",l=r.p+"static/image/6c68c19e5cff60e13d892f053f3c6609.29221f36.webp",d=r.p+"static/image/f945c76efc47f8b6200d04fe111128d9.d70330d7.webp",o=r.p+"static/image/74121c26f5e2844159fd5993cc121b7e.6485bf92.webp",t=r.p+"static/image/8351b7bedaf9fdd70b8ab0844613d9ea.e00baef6.webp",p=r.p+"static/image/c3fa672a6dc3ddc9812a8307ff13eef2.41b365b2.webp",h=r.p+"static/image/b479d5573fad9d7544c6c7155ffd5935.6927ba85.webp",x=r.p+"static/image/7ac53526af9454caf710804eb11a8597.b4eb586c.webp",j=r.p+"static/image/028e6c24983070f8248931930a39108a.cf046208.webp",m=r.p+"static/image/f9149e300e428a3040e426e31ee64ae9.5d63afb1.webp",g=r.p+"static/image/6d4659e66e8762ee1c2c86e40a1e76f5.c70099f5.webp",f=r.p+"static/image/4dcaf19b41dd10463c2a4ba273122e49.a603bf69.webp";function u(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",ul:"ul",li:"li",strong:"strong",h2:"h2"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"23如何通过变量写出更灵活的调试配置",children:["23.如何通过变量写出更灵活的调试配置？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23如何通过变量写出更灵活的调试配置",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们写过很多调试配置了，不管是调试网页代码的，还是调试 node 代码的。"}),"\n",(0,s.jsx)(n.p,{children:"但我们之前的调试配置都是写死的，不够灵活。"}),"\n",(0,s.jsx)(n.p,{children:"比如我有两个 js 文件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"那就要写两个调试配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "type": "pwa-node",\n    "request": "launch",\n    "name": "Launch Program",\n    "skipFiles": [\n        "<node_internals>/**"\n    ],\n    "program": "${workspaceFolder}/a.js"\n},\n{\n    "name": "Launch Program",\n    "program": "${workspaceFolder}/b.js",\n    "request": "launch",\n    "skipFiles": [\n        "<node_internals>/**"\n    ],\n    "type": "pwa-node"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"如果要调试的文件更多呢？"}),"\n",(0,s.jsx)(n.p,{children:"就很麻烦。"}),"\n",(0,s.jsx)(n.p,{children:"能不能我选中哪个文件调试哪个呢？"}),"\n",(0,s.jsx)(n.p,{children:"可以的，这个就是变量的作用。"}),"\n",(0,s.jsx)(n.p,{children:"比如当前打开的文件是 file 这个变量，那就可以这样写："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Launch Program",\n    "program": "${file}",\n    "request": "launch",\n    "skipFiles": [\n        "<node_internals>/**"\n    ],\n    "type": "pwa-node"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"这个 ${file} 就是取 file 变量的值，也就是当前文件路径的作用。"}),"\n",(0,s.jsx)(n.p,{children:"效果就是这样的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当前选中哪个文件，调试的就是哪个文件。"}),"\n",(0,s.jsx)(n.p,{children:"这样通过变量来给调试配置增加了灵活性。"}),"\n",(0,s.jsx)(n.p,{children:"类似的这种变量还有很多："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${workspaceFolder}"})," \xa0在 VSCode 中打开的目录的路径"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${workspaceFolderBasename}"})," 在 VSCode 中打开的目录的名称"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${file}"})," 当前打开的文件"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${relativeFile}"})," 当前打开的文件相对于 workspaceFolder 的路径"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${relativeFileDirname}"})," 当前打开的文件相对于workspaceFolder 的目录名"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${fileBasename}"})," \xa0当前打开文件的名称"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${fileBasenameNoExtension}"})," \xa0当前打开的文件去掉扩展名的名称"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${fileExtname}"})," 当前打开文件的扩展名"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${fileDirname}"})," \xa0当前打开文件的目录路径"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${cwd}"})," 当前执行命令的工作目录"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${lineNumber}"})," \xa0当前行号"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${selectedText}"})," 当前选中的文本"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${execPath}"})," 当前 VSCode 可执行文件的路径"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"${pathSeparator}"})," \xa0操作系统文件路径分割符"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"我们通过这样一个 node 脚本来测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"添加调试配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Launch Program",\n    "program": "${workspaceFolder}/c.js",\n    "args": [\n        "workspaceFolder:  ${workspaceFolder}"\n    ],\n    "console": "integratedTerminal",\n    "request": "launch",\n    "type": "node"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"console 为 integratedTerminal 是指定信息输出在集成的 terminal 而不是默认的 debug console。"}),"\n",(0,s.jsx)(n.p,{children:"启动调试，可以看到 workspaceFolder 变量的值："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"明显，这个是 VSCode 打开的目录的名字。"}),"\n",(0,s.jsx)(n.p,{children:"我们分批测试下其他变量："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Launch Program",\n    "program": "${workspaceFolder}/c.js",\n    "args": [\n        "workspaceFolder: ${workspaceFolder}",\n        "workspaceFolderBasename: ${workspaceFolderBasename}"\n    ],\n    "console": "integratedTerminal",\n    "request": "launch",\n    "type": "node"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"workspaceFolderBasename 相较于 workspaceFolder 只有文件名，没有前面的路径。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Launch Program",\n    "program": "${workspaceFolder}/c.js",\n    "args": [\n        "file: ${file}",\n        "relativeFile: ${relativeFile}",\n        "relativeFileDirname: ${relativeFileDirname}",\n        "fileBasename: ${fileBasename}",\n        "fileBasenameNoExtension: ${fileBasenameNoExtension}",\n        "fileExtname: ${fileExtname}",\n        "fileDirname: ${fileDirname}",\n        "fileDirnameBasename: ${fileDirnameBasename}"\n    ],\n    "console": "integratedTerminal",\n    "request": "launch",\n    "type": "node"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"file 是当前文件的路径，relativeFile 是相较于项目根目录（workspaceFolder）的路径。"}),"\n",(0,s.jsx)(n.p,{children:"relativeFileDirname 是当前文件的目录名字。"}),"\n",(0,s.jsx)(n.p,{children:"fileBasename 是文件名，没有前面的路径。fileBasenameNotExtension 是去掉扩展名以后的。"}),"\n",(0,s.jsx)(n.p,{children:"fileExtname 是扩展名，fileDirname 是当前文件的目录路径。"}),"\n",(0,s.jsx)(n.p,{children:"fileDirnameBasename 是文件夹名字，没有前面的路径。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Launch Program",\n    "program": "${workspaceFolder}/c.js",\n    "args": [\n        "cwd: ${cwd}",\n        "lineNumber: ${lineNumber}",\n        "execPath: ${execPath}",\n        "selectedText: ${selectedText}",\n        "pathSeparator: ${pathSeparator}"\n    ],\n    "console": "integratedTerminal",\n    "request": "launch",\n    "type": "node"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"cwd 是当前工作目录。"}),"\n",(0,s.jsx)(n.p,{children:"lineNumber 是当前的行数。"}),"\n",(0,s.jsx)(n.p,{children:"execPath 是 vscode 可执行文件的路径。"}),"\n",(0,s.jsx)(n.p,{children:"selectedText 是当前选中文本。"}),"\n",(0,s.jsx)(n.p,{children:"pathSeprator 是路径分隔符，比如 mac 下是 /，而 windows 可能就是 \\ 了。"}),"\n",(0,s.jsx)(n.p,{children:"灵活运用这些变量能够增加调试配置的灵活性。"}),"\n",(0,s.jsx)(n.p,{children:"此外，如果我想取环境变量作为参数呢？"}),"\n",(0,s.jsx)(n.p,{children:"自然也是可以的，通过 ${env: 环境变量名} 的语法。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Launch Program",\n    "program": "${workspaceFolder}/c.js",\n    "args": [\n        "${env:PATH}"\n    ],\n    "console": "integratedTerminal",\n    "request": "launch",\n    "type": "node"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"此外，还可以取 vscode 配置中的值。"}),"\n",(0,s.jsx)(n.p,{children:"通过 cmd + shift + p 打开默认配置："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"如果我想取配置的值就可以这样写:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "name": "Launch Program",\n    "program": "${workspaceFolder}/c.js",\n    "args": [\n        "${config:editor.fontSize}"\n    ],\n    "console": "integratedTerminal",\n    "request": "launch",\n    "type": "node"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"除了取 vscode 的配置外，还可以执行 vscode 的命令获取它的返回值："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n    "name": "Launch Program",\n    "program": "${workspaceFolder}/c.js",\n    "args": [\n        "${command:extension.pickNodeProcess}"\n    ],\n    "console": "integratedTerminal",\n    "request": "launch",\n    "type": "node"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"那如果我想用户自己输入调试哪个文件呢？"}),"\n",(0,s.jsx)(n.p,{children:"自然也可以可以的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "name": "Launch Program",\n            "program": "${workspaceFolder}/c.js",\n            "args": [\n                "${input:aaa}",\n                "${input:bbb}",\n            ],\n            "console": "integratedTerminal",\n            "request": "launch",\n            "type": "node"\n        }\n    ],\n    "inputs": [\n        {\n            "type": "pickString",\n            "id": "aaa",\n            "description": "选择一个作为 aaa 的值?",\n            "options": [\n              "a1",\n              "a2",\n              "a3"\n            ],\n            "default": "a4"\n          },\n          {\n            "type": "promptString",\n            "id": "bbb",\n            "description": "输入 bbb 的值",\n            "default": "b1"\n          }\n    ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"通过 ${input: xxx} 的语法，指定 id 为 aaa 和 bbb 的两个 input。"}),"\n",(0,s.jsx)(n.p,{children:"下面有两个 input 的具体定义，一个是选择、一个是输入。"}),"\n",(0,s.jsx)(n.p,{children:"效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"不管是 node 调试配置还是网页调试配置都可以通过变量来增加配置的灵活性。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"input 变量，可以让用户输入或者选择，通过 ${input:xxx} 语法"}),"\n",(0,s.jsx)(n.li,{children:"env 变量，可以读取环境变量值，通过 ${env:xxx} 语法"}),"\n",(0,s.jsx)(n.li,{children:"config 变量，取 vscode 的配置，通过 ${config:xxx} 语法"}),"\n",(0,s.jsx)(n.li,{children:"command 变量，可以读取命令执行结果，通过 ${command: xxx} 语法"}),"\n",(0,s.jsx)(n.li,{children:"内置变量，可以取当前文件、目录等信息，通过 ${xxx} 语法"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"灵活运用这些变量，可以让调试配置更灵活。"})]})}function b(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}let $=b;b.__RSPRESS_PAGE_META={},b.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F23.%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%8F%98%E9%87%8F%E5%86%99%E5%87%BA%E6%9B%B4%E7%81%B5%E6%B4%BB%E7%9A%84%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE%EF%BC%9F.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"23.如何通过变量写出更灵活的调试配置？",headingTitle:"23.如何通过变量写出更灵活的调试配置？",frontmatter:{}}}}]);