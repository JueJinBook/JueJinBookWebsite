"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["75565"],{579622:function(n,e,r){r.r(e),r.d(e,{default:()=>u});var s=r(552676),t=r(740453);let i=r.p+"static/image/b2ef665c18f52d1a6b59e34923dc44b1.bd39e092.webp",l=r.p+"static/image/b629133badf1256d05867543bd266d31.01f95a10.webp",o=r.p+"static/image/a7b619c7003edcb8447deb9987fefbe7.8b07e9c1.webp",c=r.p+"static/image/f719bebdf1f6c006accb6c4779e88fca.e7b81859.webp",d=r.p+"static/image/804ab6165c55a39adb8f2b07a2665a56.b9942d75.webp",a=r.p+"static/image/198ffdb91bdd21494fd89a179fa2c122.f216b7e7.webp",h=r.p+"static/image/09e794a806dd1366691541ff0fa1d15e.dfb0c71d.webp",j=r.p+"static/image/f00bc0bb79e28a0da29504ff99e4b1f9.44565caf.webp",p=r.p+"static/image/3d33a1d470ff7a9e98e7b60c8c4a9f73.17b07ae0.webp",x=r.p+"static/image/43e5113fb8234c256411249956ac0544.fbb36aff.webp";function g(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",img:"img",h4:"h4",blockquote:"blockquote",ul:"ul",li:"li",pre:"pre",code:"code"},(0,t.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"23服务端实战devops-服务开发",children:["23.服务端实战：DevOps 服务开发",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#23服务端实战devops-服务开发",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["本章开始将进入 ",(0,s.jsx)(e.strong,{children:"Dveops"})," 的开发章节，整个 ",(0,s.jsx)(e.strong,{children:"Devops"})," 章节的内容会非常多，篇幅有限我们将仅仅将选择主要的工程架构来讲解，更多的细节内容会放在直播（录播）中介绍。"]}),"\n",(0,s.jsx)(e.p,{children:"有兴趣的同学也可以参考源码来一起看看，这一块的开发仍然在进行中，因为还有很多的调试跟前端页面的开发工作量。"}),"\n",(0,s.jsxs)(e.h2,{id:"项目搭建",children:["项目搭建",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#项目搭建",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:["首先按照之前搭建 ",(0,s.jsx)(e.strong,{children:"User"})," 跟 ",(0,s.jsx)(e.strong,{children:"Materials"})," 的流程，我们需要在 ",(0,s.jsx)(e.strong,{children:"Monorepo"})," 工程中创建 ",(0,s.jsx)(e.strong,{children:"Dveops"})," 的应用。"]}),"\n",(0,s.jsx)(e.p,{children:"整体结构如下所示："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"接下来我们按照流程顺序一起学习下对应模块的内容"}),"："]}),"\n",(0,s.jsxs)(e.h4,{id:"common",children:["Common",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#common",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"首先介绍的是公共模块，这个模块中主要是对接其他系统的内容，所以我放在公共模块中，当然你也可以选择放在其他模块或者单独创建里面。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:["在 ",(0,s.jsx)(e.strong,{children:"IG"})," 这个项目中 ",(0,s.jsx)(e.strong,{children:"Common"})," 主要封装了 ",(0,s.jsx)(e.strong,{children:"Jenkins"})," 与 ",(0,s.jsx)(e.strong,{children:"Gitlab"})," 的业务模块，可以调用配置好的 ",(0,s.jsx)(e.strong,{children:"Jenkins"})," 与 ",(0,s.jsx)(e.strong,{children:"Gitlab"})," 的 ",(0,s.jsx)(e.strong,{children:"OpenApi"}),"，方便其他模块使用。"]}),"\n",(0,s.jsxs)(e.p,{children:["同时可以发现，这两个模块并没有对接数据库的实体类，因为大部分的数据都是拆散落库到其它的表里，而且无论是 ",(0,s.jsx)(e.strong,{children:"Jenkins"})," 还是 ",(0,s.jsx)(e.strong,{children:"Gitlab"})," 都是有自己的持久化存储，所以即使需要全量数据的话，可以提供 ",(0,s.jsx)(e.strong,{children:"OpenApi"})," 从这对应的系统中获取。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["这也是我为什么将这两个模块都收拢到 ",(0,s.jsx)(e.strong,{children:"Common"})," 的原因。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"helper",children:["Helper",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#helper",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Helper"})," 类一般是一个包含一些常用方法或功能的类，用来辅助完成某个模块或任务的功能。"]}),"\n",(0,s.jsxs)(e.p,{children:["在 ",(0,s.jsx)(e.strong,{children:"IG"})," 项目中，主要将对接三方 ",(0,s.jsx)(e.strong,{children:"OpenApi"})," 的功能全部放在其中，如图所示 ",(0,s.jsx)(e.strong,{children:"Helper"})," 中有四个模块分别是 ",(0,s.jsx)(e.strong,{children:"Feishu"}),"、",(0,s.jsx)(e.strong,{children:"Jenkins"}),"、",(0,s.jsx)(e.strong,{children:"Gitlab"})," 与 ",(0,s.jsx)(e.strong,{children:"Wechat"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["接下来我们以 ",(0,s.jsx)(e.strong,{children:"Gitlab"})," 为例子介绍一下具体的代码编写。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:["如图所示，",(0,s.jsx)(e.strong,{children:"Gitlab"})," 一共包含了以下几个模块："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"branch"}),"\n",(0,s.jsx)(e.li,{children:"commits"}),"\n",(0,s.jsx)(e.li,{children:"merge"}),"\n",(0,s.jsx)(e.li,{children:"namespace"}),"\n",(0,s.jsx)(e.li,{children:"project"}),"\n",(0,s.jsx)(e.li,{children:"tags"}),"\n",(0,s.jsx)(e.li,{children:"user"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["当然 ",(0,s.jsx)(e.strong,{children:"Gitlab"})," 本身提供了更多的能力，但我们目前只需要这些，需要接入多少功能可以按照自己的实际需求来取舍。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:["如图所示，当我们需要调用 ",(0,s.jsx)(e.strong,{children:"Gitlab Api"})," 的时候，需要使用 ",(0,s.jsx)(e.strong,{children:"ADMIN_PRIVATE_TOKEN"})," 来操作，一般来说这个是管理员账号，拥有最高的权限，但带来的限制是如果自己不做 ",(0,s.jsx)(e.strong,{children:"RBAC"})," 控制的话，权限会非常难以控制，所以最新的 ",(0,s.jsx)(e.strong,{children:"Gitlab Api"})," 可以使用管理员 ",(0,s.jsx)(e.strong,{children:"token"})," 授权每个用户独立 ",(0,s.jsx)(e.strong,{children:"token"}),"，然后再使用授权的独立 ",(0,s.jsx)(e.strong,{children:"token"})," 去操作 ",(0,s.jsx)(e.strong,{children:"Gitlab Api"}),"，这样很多危险操作会被限制住。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"/**\n * @description: 创建分支\n */\nconst createBranch = async (\n  { ref, projectId, branch }: IBranchList,\n  access_token = '',\n) => {\n  const { data } = await methodV({\n    url: `/projects/${projectId}/repository/branches`,\n    params: {\n      ref,\n      branch,\n    },\n    query: { access_token },\n    method: 'POST',\n  });\n  return data;\n};\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"/**\n * @description: 带 version 的通用 api 请求\n */\nconst methodV = async ({\n  url,\n  method,\n  headers,\n  params = {},\n  query = {},\n}: IMethodV): Promise<IRequest> => {\n  let sendUrl = '';\n  if (/^(http:\\/\\/|https:\\/\\/)/.test(url)) {\n    sendUrl = url;\n  } else {\n    sendUrl = `${GIT_URL}/api/v4${url}`;\n  }\n  console.log(sendUrl, query);\n  try {\n    return new Promise((resolve, reject) => {\n      axios({\n        headers: {\n          'content-type': 'application/json',\n          // 放开所有权限\n          'PRIVATE-TOKEN': ADMIN_PRIVATE_TOKEN,\n          ...headers,\n        },\n        url: sendUrl,\n        method,\n        params: {\n          'private-token': ADMIN_PRIVATE_TOKEN,\n          ...query,\n        },\n        data: {\n          ...params,\n        },\n      })\n        .then(({ data, status }) => {\n          resolve({ data, code: status });\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    });\n  } catch (error) {\n    throw error;\n  }\n};\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["所以我对 ",(0,s.jsx)(e.strong,{children:"Helper"})," 模块的定义是：纯粹与三方项目对接的功能，不掺杂任何的业务逻辑，在对应的模块中组合具体逻辑，例如 ",(0,s.jsx)(e.strong,{children:"Jenkins Module"}),"、",(0,s.jsx)(e.strong,{children:"Project Module"})," 等。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"branch",children:["Branch",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#branch",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Branch"})," 模块的内容较为简单，它的功能是链接 ",(0,s.jsx)(e.strong,{children:"Gitlab"})," 或者其他的代码仓库与实际项目的中间层，所以会有 ",(0,s.jsx)(e.strong,{children:"name"})," 跟 ",(0,s.jsx)(e.strong,{children:"gitBranchName"})," 的区别，如果想做的足够闭环的的话，后续创建 ",(0,s.jsx)(e.strong,{children:"Branch"})," 的流程都可以在 ",(0,s.jsx)(e.strong,{children:"Devops"})," 项目中进行，不需要再在 ",(0,s.jsx)(e.strong,{children:"Gitlab"})," 中创建。"]}),"\n",(0,s.jsxs)(e.p,{children:["此外 ",(0,s.jsx)(e.strong,{children:"Branch"})," 中并没有 ",(0,s.jsx)(e.strong,{children:"Controller"})," ，因为在 ",(0,s.jsx)(e.strong,{children:"Devops"})," 中，",(0,s.jsx)(e.strong,{children:"创建任务 && 流程是需要创建对应的代码分支"}),"，所以也就没有必要单独提供 ",(0,s.jsx)(e.strong,{children:"Branch"})," 的 ",(0,s.jsx)(e.strong,{children:"Controller"}),"。"]}),"\n",(0,s.jsxs)(e.h4,{id:"project",children:["Project",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#project",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:["相比 ",(0,s.jsx)(e.strong,{children:"Branch"})," 而言，",(0,s.jsx)(e.strong,{children:"Project"})," 模块就非常复杂，因为涉及到的配置模块非常多。"]}),"\n",(0,s.jsxs)(e.p,{children:["与之前的设计不同，这里将 ",(0,s.jsx)(e.strong,{children:"Project"})," 的 ",(0,s.jsx)(e.strong,{children:"Type"})," 与 ",(0,s.jsx)(e.strong,{children:"Config"})," 拆出来作为独立的子表，这样可以动态的增加项目类型以及通用的类型配置，组合配置起来会更加的灵活。"]}),"\n",(0,s.jsx)(e.p,{children:"由于前后端都是一个项目也是自己独立开发，所以有些配置项跟流程是会在前端妥协，服务端的内容会部分的冗余。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n} from 'typeorm';\n\nimport { IsNotEmpty } from 'class-validator';\nimport { ApiProperty, ApiResponseProperty } from '@nestjs/swagger';\n\nexport enum ProjectStatus {\n  active = 1,\n  deleted = 0,\n}\n@Entity()\nexport class Project {\n  @ApiResponseProperty()\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  // 中文名，便于识别\n  @ApiProperty({ example: 'hello' })\n  @IsNotEmpty()\n  @Column()\n  zhName: string;\n\n  // 作为部署项目的前缀路径名\n  @IsNotEmpty()\n  @Column()\n  usName: string;\n\n  // 描述\n  @Column({ default: null })\n  desc: string;\n\n  @ApiProperty({ name: '最后一次迭代版本号' })\n  @Column({ default: null })\n  lastIterationVersion?: string;\n\n  // 项目类型\n  @ApiProperty({ example: [1, 2, 3] })\n  @IsNotEmpty()\n  @Column('simple-array')\n  projectTypes: string[];\n\n  // git project fields\n\n  @Column({ default: null })\n  gitProjectId: number;\n\n  @Column({ default: null })\n  gitNamespace: string;\n\n  @Column({ default: null })\n  gitProjectUrl: string;\n\n  @Column({ default: null })\n  gitProjectName: string;\n\n  @Column({ default: null })\n  gitProjectDesc: string;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createTime?: string;\n\n  @Column()\n  creatorName: string;\n\n  @Column()\n  creatorId: number;\n\n  // 微服务关联id\n  @Column({ type: 'simple-array', default: null })\n  microserviceIds?: number[];\n\n  // 项目状态\n  @Column({ default: ProjectStatus.active })\n  status?: number;\n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import {\n  Entity,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  Generated,\n  PrimaryColumn,\n} from 'typeorm';\n\nimport { IsNotEmpty } from 'class-validator';\nimport { ApiProperty, ApiResponseProperty } from '@nestjs/swagger';\n\n@Entity()\nexport class ProjectConfiguration {\n  @ApiResponseProperty()\n  // @Column()\n  @Generated('uuid')\n  id?: number;\n\n  @Column({ default: null })\n  desc?: string;\n\n  @PrimaryColumn({ name: 'project_id' })\n  projectId: number;\n\n  @ApiProperty({ example: 'iOS' })\n  @IsNotEmpty()\n  @PrimaryColumn({ name: 'project_type' })\n  projectType: string;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createTime?: string;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  updateTime?: string;\n\n  @Column({ type: 'json', default: null })\n  deployConfig?: string;\n\n  @Column({ type: 'json', default: null })\n  nacosConfig?: string;\n\n  @Column({ type: 'json', default: null })\n  publishConfig?: string;\n\n  @Column({ default: null })\n  publishDocker?: string;\n\n  @Column({ default: null })\n  builderDocker?: string;\n\n  @Column({ type: 'json', default: null })\n  authentication?: string;\n\n  @Column({ type: 'json', default: null })\n  onlineMicroConfig?: string;\n\n  @Column({ type: 'json', default: null })\n  offlineMicroConfig?: string;\n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class ProjectType {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  type: string;\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["结合上述的表结构可以看出，一个项目是可以有多个类型，这样可以兼容现在主流的跨端框架的 ",(0,s.jsx)(e.strong,{children:"CICD"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["对于微服务来说，主工程发布的时候，也可以选择多个子应用来发布，而微前端大部分都是 ",(0,s.jsx)(e.strong,{children:"Web"})," 类型的项目，所以我并没有通过 ",(0,s.jsx)(e.strong,{children:"ProjectType"})," 来区分，而是在 ",(0,s.jsx)(e.strong,{children:"Project"})," 表中添加 ",(0,s.jsx)(e.strong,{children:"microserviceIds"})," 来进行关联，这种树状结构设计，可以作为嵌套子应用的关联发布，实现无限嵌套的微前端方案，虽然实际情况比较少，我自己也没有试过 ",(0,s.jsx)(e.strong,{children:"3"})," 层以上的方案。"]}),"\n",(0,s.jsxs)(e.h4,{id:"iteration",children:["Iteration",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#iteration",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:["迭代（",(0,s.jsx)(e.strong,{children:"Iteration"}),"）模块的复杂度是仅次于 ",(0,s.jsx)(e.strong,{children:"Project"})," 的，从上图我们可以看到，迭代包含了流程以及流程节点的概念。"]}),"\n",(0,s.jsxs)(e.p,{children:["在之前的设计中，我们是默认流程是从 ",(0,s.jsx)(e.strong,{children:"开发"})," -> ",(0,s.jsx)(e.strong,{children:"测试"})," -> ",(0,s.jsx)(e.strong,{children:"预发"})," -> ",(0,s.jsx)(e.strong,{children:"生产"})," 一个全流程，但实际情况中并非每一个项目都需要全流程，甚至于并非每一次迭代都会需要如此完整的流程。"]}),"\n",(0,s.jsxs)(e.p,{children:["所以新的架构中，在 ",(0,s.jsx)(e.strong,{children:"Iteration"})," 基础上将",(0,s.jsx)(e.strong,{children:"迭代"}),"与",(0,s.jsx)(e.strong,{children:"流程"}),"剥离，每一轮的迭代都是可以关联对应的流程，同时每一个流程都可以有不同的流程 ",(0,s.jsx)(e.strong,{children:"Flow"}),"，而 ",(0,s.jsx)(e.strong,{children:"Flow"})," 则是由每一个对应的 ",(0,s.jsx)(e.strong,{children:"Node"})," 节点组合而成，这样可以适配多种业务场景。"]}),"\n",(0,s.jsxs)(e.h4,{id:"deploy",children:["Deploy",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#deploy",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Deploy"})," 的模块在业务开发中比较简单，主要是生成每一次的构建任务同时对接各个 ",(0,s.jsx)(e.strong,{children:"CICD"})," 的系统以及流程，此外需要保存对应的产物，也就是 ",(0,s.jsx)(e.strong,{children:"History"})," 模块，方便线上发布有问题的时候进行回滚。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"一个简单的流程"}),"：在前端发布的时候，根据对应的 ",(0,s.jsx)(e.strong,{children:"Project"})," 查询对应的发布配置也就是 ",(0,s.jsx)(e.strong,{children:"ProjectConfig"}),"，同时根据 ",(0,s.jsx)(e.strong,{children:"Iteration"})," 查询对应的 ",(0,s.jsx)(e.strong,{children:"Process"})," 信息，当发布配置与流程都完成校验之后，调用 ",(0,s.jsx)(e.strong,{children:"Jenkins"})," 模块，完成 ",(0,s.jsx)(e.strong,{children:"CICD"})," 的流程，同时将生产环境的内容存储到 ",(0,s.jsx)(e.strong,{children:"History"}),"，方便下次线上回滚数据。"]}),"\n",(0,s.jsxs)(e.h4,{id:"system",children:["System",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#system",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"System"})," 模块是所有模块中最为简单的模块，主要是配置全局可用的基础服务，另外一个是操作日志，如果你自己接入日志系统的话，",(0,s.jsx)(e.strong,{children:"operation"})," 也可以省去。"]}),"\n",(0,s.jsxs)(e.h2,{id:"写在最后",children:["写在最后",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Devops"})," 与前面其他系统不同的是，它会与其他的系统做更多的交互，比如 ",(0,s.jsx)(e.strong,{children:"Jenkins"}),"、",(0,s.jsx)(e.strong,{children:"Gitlab"})," 或者 ",(0,s.jsx)(e.strong,{children:"K8S"})," 等其他在 ",(0,s.jsx)(e.strong,{children:"CICD"})," 链路上的会使用到的系统，除此之外还会提供 ",(0,s.jsx)(e.strong,{children:"CICD"})," 的微服务给物料系统使用。"]}),"\n",(0,s.jsxs)(e.p,{children:["同时低代码的服务端并不会太切入其他的业务里面，整套生态系统是可以进行流程自闭环，所以大部分的代码开发是纯粹的 ",(0,s.jsx)(e.strong,{children:"CURD"}),"，并没有很多高阶的用法，但配合 ",(0,s.jsx)(e.strong,{children:"CICD"})," 模块，可能需要拓展的知识面会比较多。"]}),"\n",(0,s.jsxs)(e.p,{children:["当然如果 ",(0,s.jsx)(e.strong,{children:"Devops"})," 耦合了其他的业务模块，比如三方小程序、",(0,s.jsx)(e.strong,{children:"RN"}),"、",(0,s.jsx)(e.strong,{children:"APP"})," 的内容的话，就会涉及到部分的业务开发，所以这一块的内容是需要自行的拓展，未来小册的项目也是没办法直接使用起来的。"]}),"\n",(0,s.jsxs)(e.p,{children:["由于服务端的内容大部分都是 ",(0,s.jsx)(e.strong,{children:"CURD"}),"，因为会有非常多的业务逻辑跟细节在其中，这些很难在通过一两章节的文字表现出来，这也是为什么最近开始进行直播并录课的原因。"]}),"\n",(0,s.jsx)(e.p,{children:"大家后期可以结合小册的架构介绍然后配合视频跟源码来学习本小册。"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["整体项目会比之前的架构设计稍微复杂点，后期项目发布第一个 ",(0,s.jsx)(e.strong,{children:"MVP"})," 版本的时候，我会重写服务端的架构篇。"]}),"\n"]})]})}function m(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(g,{...n})}):g(n)}let u=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F23.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9ADevOps%20%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91.md"]={toc:[{text:"项目搭建",id:"项目搭建",depth:2},{text:"Common",id:"common",depth:4},{text:"Helper",id:"helper",depth:4},{text:"Branch",id:"branch",depth:4},{text:"Project",id:"project",depth:4},{text:"Iteration",id:"iteration",depth:4},{text:"Deploy",id:"deploy",depth:4},{text:"System",id:"system",depth:4},{text:"写在最后",id:"写在最后",depth:2}],title:"23.服务端实战：DevOps 服务开发",headingTitle:"23.服务端实战：DevOps 服务开发",frontmatter:{}}}}]);