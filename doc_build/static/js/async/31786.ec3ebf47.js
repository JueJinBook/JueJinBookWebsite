"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["31786"],{975441:function(e,n,d){d.r(n),d.d(n,{default:()=>s});var i=d(552676),o=d(740453);function t(e){let n=Object.assign({h1:"h1",a:"a",h3:"h3",p:"p",h4:"h4",pre:"pre",code:"code",blockquote:"blockquote",strong:"strong"},(0,o.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"64视频与弹幕",children:["64.视频与弹幕",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#64视频与弹幕",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"103-视频与弹幕",children:["10.3 视频与弹幕",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#103-视频与弹幕",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"视频有着非常丰富的交互功能，除了有播放、暂停、停止、从什么位置开始，跳转到指定位置之外等操作视频本身的按钮外，还有播放模式（循环、静音、自动播放），也有控制视频组件的交互（全屏、控制按钮、亮度、小窗、倍数）还有弹幕等等，这些只需要弄清楚视频组件和相应的API即可。"}),"\n",(0,i.jsxs)(n.h3,{id:"1031-视频播放快速入门",children:["10.3.1 视频播放快速入门",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1031-视频播放快速入门",children:"#"})]}),"\n",(0,i.jsxs)(n.h4,{id:"1video组件回顾",children:["1、video组件回顾",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1video组件回顾",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在《小程序的组件》讲过如何使用数据渲染video组件属性的方式来控制视频的视频源、播放模式等，同样我们也可以通过setData来修改Page对象里的data来控制。"}),"\n",(0,i.jsx)(n.p,{children:"使用开发者工具新建一个页面比如video，然后输入以下代码，编译之后我们可以直接在模拟器里使用组件自带的控制器来播放视频："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'//在video.js里输入的data对象\ndata:{\n  video:{\n    poster:"https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/demo/video.png",\n    src: \'http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400\',\n  },\n  controls:true,\n  showprogress:true,\n  loop:false,\n  autoplay:false,\n  muted:false\n}\n\n//在video.wxml里输入以下代码\n<video id="myVideo" poster="{{video.poster}}" src="{{video.src}}" controls="{{controls}}" show-progress="{{showprogress}}" loop="{{loop}}" autoplay="{{autoplay}}" muted="{{muted}}"></video>\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"2videocontext实例",children:["2、VideoContext实例",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2videocontext实例",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"VideoContext实例可以通过wx.createVideoContext来获取，它可以通过id比如myVideo，与一个id值为myVideo的video组件绑定，也就是说它与video组件是分不开的，这和前面的音频、背景音频可以脱离组件有所不同。VideoContext实例并不像背景音乐视频BackgroundAudioManager是全局实例可以在app.js或页面Page对象的外面来获取，它的获取方式如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"//在video.js的onLoad或onReady生命周期函数添加以下代码来获取VideoContext实例\nonLoad(){\n  this.videoCtx = wx.createVideoContext('myVideo')\n},\n"})}),"\n",(0,i.jsx)(n.p,{children:"然后它的调用方法和音频、背景音频是一致的，"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'//在video.wxml里添加如下代码，通过按钮绑定事件处理函数就能控制视频的播放\n<button bindtap="playVideo" >播放</button>\n<button bindtap="pauseVideo">暂停</button>\n<button bindtap="seekVideo">跳到120秒</button>\n<button bindtap="playRate">2倍数播放</button>\n<button bindtap="stopVideo">停止播放</button>\n\n//在video.js里添加如下事件处理函数，这些都只是VideoContext实例方法的应用\nplayVideo(){\n  this.videoCtx.play()\n},\npauseVideo(){\n  this.videoCtx.pause()\n},\nstopVideo(){\n  this.videoCtx.stop()\n},\nseekVideo(){\n  this.videoCtx.seek(120)\n},\nplayRate(){\n  this.videoCtx.playbackRate(2.0)\n},\n'})}),"\n",(0,i.jsx)(n.p,{children:"VideoContext实例方法还有进入/退出全屏、显示/隐藏状态栏等方法，这里就不一一介绍了。"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"不建议在同一个小程序页面里使用多个video组件，这样会卡顿，影响用户体验。如果一个页面是视频列表，那建议先只显示视频的封面图片，只有在用户点击的时候才替换为video组件或跳转到一个小程序页面单独播放这个视频。"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"1032-视频的弹幕",children:["10.3.2 视频的弹幕",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1032-视频的弹幕",children:"#"})]}),"\n",(0,i.jsxs)(n.h4,{id:"1加载弹幕",children:["1、加载弹幕",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1加载弹幕",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"enable-danmu和danmu-btn的值为true时，可以让视频组件显示弹幕以及弹幕按钮（控制弹幕是否显示），而danmu-list则只需要是对象的数组就能渲染弹幕列表到视频组件上。弹幕的渲染以及数据结构如下，这样就能把data对象里的弹幕给渲染到视频组件上了："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"//在video.wxml里的视频组件里新增如下属性\n<video id=\"myVideo\" src=\"{{video.src}}\" danmu-list=\"{{video.danmuList}}\" danmu-btn enable-danmu></video>\n\n//在video.js的data对象里的video对象新增如下弹幕列表\ndata:{\n  video:{\n    danmuList:[{\n      text: '云开发真的很有用',//弹幕的内容\n      color: '#ff0000',//弹幕的颜色\n      time: 1  //第1秒出现的弹幕\n    }, {\n      text: '用来开发一个完整的项目确实很方便',\n      color: '#ff00ff',\n      time: 3   //第3秒出现的弹幕\n    }],\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"弹幕的这种数据类型与结构对于云开发的文档型数据库来说，设计起来就非常容易，可以直接存储到记录的一个字段里面，至于弹幕的颜色color可以在前端处理:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  id:"video0001",//这里省略了视频的其他信息\n  danmuList:[{\n    _openid:"",\n    text: \'云开发真的很有用\',\n    time: 1 \n  }]\n}\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"2发送弹幕",children:["2、发送弹幕",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2发送弹幕",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在发送弹幕之前，我们需要先通过bindtimeupdate来获取用户发送弹幕时视频的进度，这样弹幕才能在相应的时间加载出来："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'//在video组件里添加bindtimeupdate属性，用来监听播放进度\n<video id="myVideo" src="{{video.src}}"  danmu-list="{{video.danmuList}}" danmu-btn enable-danmu bindtimeupdate="danmuTime"></video>\n\n//在video.js里添加danmuTime事件处理函数，这个触发频率是250ms一次\ndanmuTime(e){\n  console.log("视频播放的当前时间",e.detail.currentTime)\n},\n'})}),"\n",(0,i.jsxs)(n.p,{children:["通过bindtimeupdate绑定的事件处理函数返回的",(0,i.jsx)(n.code,{children:"e.detail.currentTime"}),"，我们就能获取到当前视频播放的进度。再结合前面的表单知识，使用表单来收集用户发送的弹幕内容，并使用",(0,i.jsx)(n.code,{children:"VideoContext 。sendDanmu()"}),"的方法将用户的弹幕实时渲染到视频，相应的代码如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'//在video.wxml添加表单组件并绑定事件处理函数sendDanmu\n<form bindsubmit="sendDanmu">\n	<input type="text" name="danmu" placeholder="在此处输入弹幕内容"></input>\n	<button form-type="submit">发送弹幕</button>\n</form>\n\n//在video.js里添加sendDanmu事件处理函数，通过调用danmuTime来获取用户发送弹幕的时间\ndanmuTime(e){\n  return e.detail.currentTime\n},\nasync sendDanmu(e) { \n  const danmu = e.detail.value.danmu\n  const time = this.danmuTime\n  this.videoCtx.sendDanmu({\n    text:danmu ,\n    color: "#000000",\n    time:Math.ceil(time)\n  })\n},\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"3发送彩色弹幕",children:["3、发送彩色弹幕",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3发送彩色弹幕",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["上面我们设置弹幕的值为黑色",(0,i.jsx)(n.code,{children:"#000000"}),"，我们可以结合前面模块化的知识来获取彩色弹幕。使用开发者工具新建一个utils文件夹，并在utils文件夹下新建一个base.js，然后在base.js里输入以下代码："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function getRandomColor () {\n  const rgb = []\n  for (let i = 0 ; i < 3; ++i){\n    let color = Math.floor(Math.random() * 256).toString(16)\n    color = color.length == 1 ? '0' + color : color\n    rgb.push(color)\n  }\n  return '#' + rgb.join('')\n}\n\nmodule.exports.getRandomColor = getRandomColor\n"})}),"\n",(0,i.jsx)(n.p,{children:"然后再在video.js里引入模块并调用getRandomColor()，这个既可以在发送弹幕的时候用，也可以在弹幕渲染的时候用："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const base = require('../../utils/base.js')\nconst {getRandomColor} = base\nPage({\n  async sendDanmu(e) { \n  const danmu = e.detail.value.danmu\n  const time = this.danmuTime\n  this.videoCtx.sendDanmu({\n    text:danmu ,\n    color: getRandomColor(),\n    time:Math.ceil(time)\n  })\n  },\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["注意这里的弹幕还只能在发送者的小程序端显示，由于并没有提交到数据库，所以其他用户并不能看见。不过由于弹幕属于UGC的范畴，需要将弹幕的内容传递给云函数经过",(0,i.jsx)(n.strong,{children:"内容安全拓展能力"}),"的处理才能再提交到数据库，关于内容安全相关的内容在后面云调用章节会有介绍。"]}),"\n",(0,i.jsx)(n.p,{children:"即使是用户将弹幕提交到了数据库，其他用户也只能在重新请求了数据库的情况下才能看到，也就是说当很多人一起发弹幕时，弹幕并不是实时的，如果要让发送的弹幕实时的被其他用户看到，需要了解云开发数据库的实时数据推送的知识，这个在实时数据推送章节也有介绍。这些就不一一讲啦。"}),"\n",(0,i.jsx)(n.p,{children:"在小程序里，视频还有像照片一样的上传视频（wx.chooseVideo、wx.chooseMedia）、获取视频信息（wx.getVideoInfo）、压缩视频（wx.compressVideo）、保存视频到手机相册（wx.saveVideoToPhotosAlbum）等的接口，具体的用法可以直接参考技术文档。"})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}let s=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F64.%E8%A7%86%E9%A2%91%E4%B8%8E%E5%BC%B9%E5%B9%95.md"]={toc:[{text:"10.3 视频与弹幕",id:"103-视频与弹幕",depth:3},{text:"10.3.1 视频播放快速入门",id:"1031-视频播放快速入门",depth:3},{text:"1、video组件回顾",id:"1video组件回顾",depth:4},{text:"2、VideoContext实例",id:"2videocontext实例",depth:4},{text:"10.3.2 视频的弹幕",id:"1032-视频的弹幕",depth:3},{text:"1、加载弹幕",id:"1加载弹幕",depth:4},{text:"2、发送弹幕",id:"2发送弹幕",depth:4},{text:"3、发送彩色弹幕",id:"3发送彩色弹幕",depth:4}],title:"64.视频与弹幕",headingTitle:"64.视频与弹幕",frontmatter:{}}}}]);