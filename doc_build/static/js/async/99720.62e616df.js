"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["99720"],{775264:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var t=r(552676),s=r(740453);let a=r.p+"static/image/0401a07bad55d32cd717148d2673ccd0.f36aaefd.png";function o(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",h2:"h2",pre:"pre",code:"code",ul:"ul",li:"li",strong:"strong",blockquote:"blockquote"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"23实战案例_-模块遍历",children:["23.实战案例_ 模块遍历",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23实战案例_-模块遍历",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"babel 能够做静态分析，分析代码然后得出一些信息。我们经常用的打包工具就需要通过静态分析的方式得出模块间的依赖关系，然后构造成依赖图，之后对这个依赖图做各种处理，最后输出成文件。"}),"\n",(0,t.jsx)(n.p,{children:"比如 webpack 的打包过程：从入口模块分析依赖，构造模块依赖图，然后把一些模块合并到同个分组（chunk）里，生成 chunk 依赖图，最后把 chunk 通过模版打印为 assets，输出为文件。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"从入口模块开始，对每个模块的依赖关系的分析就是基于 AST，这种就可以用 babel parser （或者直接用 acorn）来处理。"}),"\n",(0,t.jsx)(n.p,{children:"这一节我们就来实现下依赖分析的功能，也就是遍历所有的模块。"}),"\n",(0,t.jsx)(n.p,{children:"写这个的好处一个是能够加深我们对打包工具的认识，二是当做一些独立的工具的时候，可能也需要分析模块依赖关系。"}),"\n",(0,t.jsxs)(n.h2,{id:"思路分析",children:["思路分析",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思路分析",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"模块依赖分析也就是要分析 import 和 export，从入口模块开始，读取文件内容，通过 babel parser 把内容 parse 成 ast，之后通过 babel traverse 来对 AST 进行遍历。分别对 ImportDeclaration、ExportDeclaration 做处理："}),"\n",(0,t.jsx)(n.p,{children:"ImportDeclaration：收集 import 信息，确定依赖的模块和引入的变量，之后再递归处理该模块\nExportDeclaration：收集 export 信息，确定导出的变量"}),"\n",(0,t.jsx)(n.p,{children:"我们可以设计这样一个结构来表示每个模块的信息："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class DependencyNode {\n    constructor(path = '', imports = {}, exports = []) {\n        this.path = path;\n        this.imports = imports;\n        this.exports = exports;\n        this.subModules = {};\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"path 表示当前模块路径， imports 表示从什么模块引入了什么变量，exports 表示导出了什么变量。"}),"\n",(0,t.jsx)(n.p,{children:"接下来我们要完成 traverseModule 这个方法，也就是对每个模块的处理"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const dependencyGraph = traverseModule(入口模块路径);\n"})}),"\n",(0,t.jsx)(n.p,{children:"具体处理的过程就是："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"读取文件内容"}),"\n",(0,t.jsx)(n.li,{children:"通过 babel parser 把文件内容 parse 成 ast"}),"\n",(0,t.jsx)(n.li,{children:"遍历 AST，对 ImportDeclaration、ExportDeclaration 分别做处理"}),"\n",(0,t.jsx)(n.li,{children:"对分析出的依赖路径进行处理，变成绝对路径，并尝试补全"}),"\n",(0,t.jsx)(n.li,{children:"递归处理分析出来的依赖路径"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"如果没有后缀名的依赖路径，要分别尝试 .js、.jsx、.ts、.tsx 的路径，如果存在就补全成该路径，并且目录还要补全 index 文件名。"}),"\n",(0,t.jsx)(n.p,{children:"通过递归处理依赖模块，就可以完成依赖图的构建，我们可以保存根节点和所有模块的信息："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const dependencyGraph = {\n    root: new DependencyNode(),\n    allModules: {}\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"当处理完所有模块后，就得到了完整的 dependencyGraph。"}),"\n",(0,t.jsx)(n.p,{children:"接下来我们来写下代码。"}),"\n",(0,t.jsxs)(n.h2,{id:"代码实现",children:["代码实现",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码实现",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"首先我们定义要返回的 dependencyGraph，"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class DependencyNode {\n    constructor(path = '', imports = {}, exports = []) {\n        this.path = path;\n        this.imports = imports;\n        this.exports = exports;\n        this.subModules = {};\n    }\n}\n\nmodule.exports = function(curModulePath) {\n    const dependencyGraph = {\n        root: new DependencyNode(),\n        allModules: {}\n    };\n    traverseJsModule(curModulePath, dependencyGraph.root, dependencyGraph.allModules);\n    return dependencyGraph;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["接下来实现遍历的方法，也就是之前分析的 ",(0,t.jsx)(n.strong,{children:"读取文件内容、parse 成 AST、travese AST 提取模块信息和依赖信息、递归遍历依赖（先把路径处理成绝对路径）"})," 的过程。"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"要注意的是，ts、jsx、tsx 等用的 babel 插件不同，要根据 extname 来做不同的插件的引入。"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function resolveBabelSyntaxtPlugins(modulePath) {\n    const plugins = [];\n    if (['.tsx', '.jsx'].some(ext => modulePath.endsWith(ext))) {\n        plugins.push('jsx');\n    }\n    if (['.ts', '.tsx'].some(ext => modulePath.endsWith(ext))) {\n        plugins.push('typescript');\n    }\n    return plugins;\n}\n\nfunction traverseJsModule(curModulePath, dependencyGrapthNode, allModules) {\n    const moduleFileContent = fs.readFileSync(curModulePath, {\n        encoding: 'utf-8'\n    });\n    dependencyGrapthNode.path = curModulePath;\n\n    const ast = parser.parse(moduleFileContent, {\n        sourceType: 'unambiguous',\n        plugins: resolveBabelSyntaxtPlugins(curModulePath)\n    });\n\n    traverse(ast, {\n        ImportDeclaration(path) {\n            // 收集import 信息\n            // 递归处理依赖模块\n            traverseJsModule(subModulePath, subModule, allModules);\n            dependencyGrapthNode.subModules[subModule.path] = subModule;\n        },\n        ExportDeclaration(path) {\n            //收集 export 信息\n        }\n    });\n    allModules[curModulePath] = dependencyGrapthNode;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"上面省略了对 ImportDeclaration 和 ExportDeclaration 的处理，接下来我们来分别处理下这两种节点："}),"\n",(0,t.jsx)(n.p,{children:"ImportDeclaration 分为三种："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// 这种我们叫 deconstruct import（解构引入）\nimport { a, b as bb} from 'aa';\n// 这种我们叫 namespace import（命名空间引入）\nimport * as c from 'cc';\n// 这种我们叫 default import（默认引入）\nimport b from 'b';\n"})}),"\n",(0,t.jsxs)(n.p,{children:["可以用 astexplorer.net 看一下",(0,t.jsx)(n.a,{href:"https://astexplorer.net/#/gist/efdc75203c127c7bdb9986bdb83fe2c7/60eb8c67f86b303f89a0e3e6d65d5edd60dea8cf",target:"_blank",rel:"noopener noreferrer",children:"它们的 AST"}),"。"]}),"\n",(0,t.jsx)(n.p,{children:"我们要根据具体的类型来提取信息，三种不同的 import 的 AST 提取信息的方式不同。"}),"\n",(0,t.jsx)(n.p,{children:"先定义下三种 import 类型："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const IMPORT_TYPE = {\n    deconstruct: 'deconstruct',\n    default: 'default',\n    namespace: 'namespace'\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后 visitor 里对不同类型的 AST 做不同的处理："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:" ImportDeclaration(path) {\n    const subModulePath = moduleResolver(curModulePath, path.get('source.value').node);\n    if (!subModulePath) {\n        return;\n    }\n\n    const specifierPaths = path.get('specifiers');\n    dependencyGrapthNode.imports[subModulePath] = specifierPaths.map(specifierPath => {\n        if (specifierPath.isImportSpecifier()) {\n            return {\n                type: IMPORT_TYPE.deconstruct,\n                imported: specifierPath.get('imported').node.name,\n                local: specifierPath.get('local').node.name\n            }\n        } else if (specifierPath.isImportDefaultSpecifier()) {\n            return {\n                type: IMPORT_TYPE.default,\n                local: specifierPath.get('local').node.name\n            }\n        } else {\n            return {\n                type: IMPORT_TYPE.namespace,\n                local: specifierPath.get('local').node.name\n            }\n        }\n    });\n\n    const subModule = new DependencyNode();\n    traverseJsModule(subModulePath, subModule, allModules);\n    dependencyGrapthNode.subModules[subModule.path] = subModule;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"上面我们通过记录了 import 信息到  dependencyGrapthNode.imports 中，并且递归处理了依赖模块。而且在处理依赖模块之前，我们做了把路径转成绝对路径和路径补全的处理。"}),"\n",(0,t.jsx)(n.p,{children:"平时写 js 依赖是可以忽略后缀的，甚至还可以忽略文件名（比如 index.js），但是我们解析依赖要给它补全后缀名。"}),"\n",(0,t.jsx)(n.p,{children:"路径补全的处理就是分别尝试 .tsx,.ts,.jsx,.js的路径是否存在，如果是目录的话，还要连同 index 一起补全，也就是 index.tsx、index.ts、index.jsx、index.js"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function completeModulePath (modulePath) {\n    const EXTS = ['.tsx','.ts','.jsx','.js'];\n    if (modulePath.match(/\\.[a-zA-Z]+$/)) {\n        return modulePath;\n    }\n\n    function tryCompletePath (resolvePath) {\n        for (let i = 0; i < EXTS.length; i ++) {\n            let tryPath = resolvePath(EXTS[i]);\n            if (fs.existsSync(tryPath)) {\n                return tryPath;\n            }\n        }\n    }\n\n    function reportModuleNotFoundError (modulePath) {\n        throw 'module not found: ' + modulePath;\n    }\n\n    if (isDirectory(modulePath)) {//如果是目录\n        const tryModulePath = tryCompletePath((ext) => path.join(modulePath, 'index' + ext));\n        if (!tryModulePath) {\n            reportModuleNotFoundError(modulePath);\n        } else {\n            return tryModulePath;\n        }\n    } else if (!EXTS.some(ext => modulePath.endsWith(ext))) {//如果补全后的路径存在\n        const tryModulePath = tryCompletePath((ext) => modulePath + ext);\n        if (!tryModulePath) {\n            reportModuleNotFoundError(modulePath);\n        } else {\n            return tryModulePath;\n        }\n    }\n    return modulePath;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"当然，我们还要收集下 export 的信息，也是分为三种类型："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// 全部导出(all export)\nexport * from 'a';\n// 默认导出 (default export)\nexport default b;\n// 命名导出 (named export)\nexport { c as cc };\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后分别对这三种 AST 做不同的信息收集："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"ExportDeclaration(path) {\n    if(path.isExportNamedDeclaration()) {\n        const specifiers = path.get('specifiers');\n        dependencyGrapthNode.exports = specifiers.map(specifierPath => ({\n            type: EXPORT_TYPE.named,\n            exported: specifierPath.get('exported').node.name,\n            local: specifierPath.get('local').node.name\n        }));\n    } else if (path.isExportDefaultDeclaration()) {\n        let exportName;\n        const declarationPath = path.get('declaration');\n        if(declarationPath.isAssignmentExpression()) {\n            exportName = declarationPath.get('left').toString();\n        } else {\n            exportName = declarationPath.toString()\n        }\n        dependencyGrapthNode.exports.push({\n            type: EXPORT_TYPE.default,\n            exported: exportName\n        });\n    } else {\n        dependencyGrapthNode.exports.push({\n            type: EXPORT_TYPE.all,\n            exported: path.get('exported').node.name,\n            source: path.get('source').node.value\n        });\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"递归处理每一个模块就完成了依赖图的构建。"}),"\n",(0,t.jsxs)(n.h2,{id:"效果演示",children:["效果演示",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#效果演示",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"首先我们写一个测试项目："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"index.js"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { aa1, aa2 } from './a';\n\nconsole.log(aa1);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"a.js"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import b from './b';\n\nconst aa1 = 1;\nconst aa2 = 2;\n\nconsole.log(b);\n\nexport {\n    aa1,\n    aa2\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"b.js"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { cc  as renamedCc } from './c';\n \nexport default b = 4;\n\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"c/index.js"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const cc = 5;\n\nexport {\n    cc\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后使用 traverseModule 方法对入口模块 index 进行处理："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const traverseModule = require('./traverseModule');\nconst path = require('path');\n\nconst dependencyGraph = traverseModule(path.resolve(__dirname, '../test-project/index.js'));\nconsole.log(JSON.stringify(dependencyGraph, null, 4));\n"})}),"\n",(0,t.jsx)(n.p,{children:"结果如下，我们成功构建出了整个依赖图："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n    "root": {\n        "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/index.js",\n        "imports": {\n            "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/a.js": [\n                {\n                    "type": "deconstruct",\n                    "imported": "aa1",\n                    "local": "aa1"\n                },\n                {\n                    "type": "deconstruct",\n                    "imported": "aa2",\n                    "local": "aa2"\n                }\n            ]\n        },\n        "exports": [],\n        "subModules": {\n            "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/a.js": {\n                "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/a.js",\n                "imports": {\n                    "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js": [\n                        {\n                            "type": "default",\n                            "local": "b"\n                        }\n                    ]\n                },\n                "exports": [\n                    {\n                        "type": "named",\n                        "exported": "aa1",\n                        "local": "aa1"\n                    },\n                    {\n                        "type": "named",\n                        "exported": "aa2",\n                        "local": "aa2"\n                    }\n                ],\n                "subModules": {\n                    "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js": {\n                        "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js",\n                        "imports": {\n                            "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js": [\n                                {\n                                    "type": "deconstruct",\n                                    "imported": "cc",\n                                    "local": "renamedCc"\n                                }\n                            ]\n                        },\n                        "exports": [\n                            {\n                                "type": "default",\n                                "exported": "b"\n                            }\n                        ],\n                        "subModules": {\n                            "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js": {\n                                "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js",\n                                "imports": {},\n                                "exports": [\n                                    {\n                                        "type": "named",\n                                        "exported": "cc",\n                                        "local": "cc"\n                                    }\n                                ],\n                                "subModules": {}\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    "allModules": {\n        "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js": {\n            "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js",\n            "imports": {},\n            "exports": [\n                {\n                    "type": "named",\n                    "exported": "cc",\n                    "local": "cc"\n                }\n            ],\n            "subModules": {}\n        },\n        "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js": {\n            "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js",\n            "imports": {\n                "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js": [\n                    {\n                        "type": "deconstruct",\n                        "imported": "cc",\n                        "local": "renamedCc"\n                    }\n                ]\n            },\n            "exports": [\n                {\n                    "type": "default",\n                    "exported": "b"\n                }\n            ],\n            "subModules": {\n                "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js": {\n                    "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js",\n                    "imports": {},\n                    "exports": [\n                        {\n                            "type": "named",\n                            "exported": "cc",\n                            "local": "cc"\n                        }\n                    ],\n                    "subModules": {}\n                }\n            }\n        },\n        "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/a.js": {\n            "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/a.js",\n            "imports": {\n                "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js": [\n                    {\n                        "type": "default",\n                        "local": "b"\n                    }\n                ]\n            },\n            "exports": [\n                {\n                    "type": "named",\n                    "exported": "aa1",\n                    "local": "aa1"\n                },\n                {\n                    "type": "named",\n                    "exported": "aa2",\n                    "local": "aa2"\n                }\n            ],\n            "subModules": {\n                "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js": {\n                    "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js",\n                    "imports": {\n                        "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js": [\n                            {\n                                "type": "deconstruct",\n                                "imported": "cc",\n                                "local": "renamedCc"\n                            }\n                        ]\n                    },\n                    "exports": [\n                        {\n                            "type": "default",\n                            "exported": "b"\n                        }\n                    ],\n                    "subModules": {\n                        "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js": {\n                            "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js",\n                            "imports": {},\n                            "exports": [\n                                {\n                                    "type": "named",\n                                    "exported": "cc",\n                                    "local": "cc"\n                                }\n                            ],\n                            "subModules": {}\n                        }\n                    }\n                }\n            }\n        },\n        "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/index.js": {\n            "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/index.js",\n            "imports": {\n                "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/a.js": [\n                    {\n                        "type": "deconstruct",\n                        "imported": "aa1",\n                        "local": "aa1"\n                    },\n                    {\n                        "type": "deconstruct",\n                        "imported": "aa2",\n                        "local": "aa2"\n                    }\n                ]\n            },\n            "exports": [],\n            "subModules": {\n                "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/a.js": {\n                    "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/a.js",\n                    "imports": {\n                        "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js": [\n                            {\n                                "type": "default",\n                                "local": "b"\n                            }\n                        ]\n                    },\n                    "exports": [\n                        {\n                            "type": "named",\n                            "exported": "aa1",\n                            "local": "aa1"\n                        },\n                        {\n                            "type": "named",\n                            "exported": "aa2",\n                            "local": "aa2"\n                        }\n                    ],\n                    "subModules": {\n                        "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js": {\n                            "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/b.js",\n                            "imports": {\n                                "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js": [\n                                    {\n                                        "type": "deconstruct",\n                                        "imported": "cc",\n                                        "local": "renamedCc"\n                                    }\n                                ]\n                            },\n                            "exports": [\n                                {\n                                    "type": "default",\n                                    "exported": "b"\n                                }\n                            ],\n                            "subModules": {\n                                "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js": {\n                                    "path": "/Users/guang/code/babel-plugin-exercize/exercize-module-iterator/test-project/c/index.js",\n                                    "imports": {},\n                                    "exports": [\n                                        {\n                                            "type": "named",\n                                            "exported": "cc",\n                                            "local": "cc"\n                                        }\n                                    ],\n                                    "subModules": {}\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"有了依赖图之后，就可以做进一步的处理，比如："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"合并一些模块成 chunk graph"}),"\n",(0,t.jsx)(n.li,{children:"通过 export 和 import 的关系的分析，实现 treeshking"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"打包工具 webpack 就是基于 AST 来做的依赖分析，通过构建模块依赖图，之后进一步的处理。这节我们基于 babel parser 和 babel traverse 做了模块的遍历和依赖图的生成。"}),"\n",(0,t.jsxs)(n.p,{children:["每个模块的处理都是 ",(0,t.jsx)(n.strong,{children:"读取内容、parse、遍历 AST提取 import 和 export 信息、递归遍历依赖"})," 的过程。"]}),"\n",(0,t.jsx)(n.p,{children:"其中要注意的是parse 的插件要根据后缀名来决定，路径要做下补全。"}),"\n",(0,t.jsx)(n.p,{children:"遍历 AST 是要确定什么属性，遍历模块则是要解析 require，然后处理路径。"}),"\n",(0,t.jsx)(n.p,{children:"依赖图分析完之后就可以做进一步的处理，比如合并 chunk、treeshking 等，然后输出成文件，这就是打包工具。"}),"\n",(0,t.jsxs)(n.p,{children:["（代码在",(0,t.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/babel-plugin-exercize",target:"_blank",rel:"noopener noreferrer",children:"这里"}),"，建议 git clone 下来通过 node 跑一下）"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["Babel%20%E6%8F%92%E4%BB%B6%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F23.%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B_%20%E6%A8%A1%E5%9D%97%E9%81%8D%E5%8E%86.md"]={toc:[{text:"思路分析",id:"思路分析",depth:2},{text:"代码实现",id:"代码实现",depth:2},{text:"效果演示",id:"效果演示",depth:2},{text:"总结",id:"总结",depth:2}],title:"23.实战案例_ 模块遍历",headingTitle:"23.实战案例_ 模块遍历",frontmatter:{}}}}]);