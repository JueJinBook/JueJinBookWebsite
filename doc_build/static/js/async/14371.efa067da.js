"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["14371"],{102205:function(e,n,i){i.r(n),i.d(n,{default:()=>g});var s=i(552676),c=i(740453);let d=i.p+"static/image/28f6878d700a3ba87dbb593e0679427e.811b5b29.webp",r=i.p+"static/image/ca715217073f639e054773acb87a891d.68a27a9c.webp",l=i.p+"static/image/28530b067f01f3a3fc5a18f3abb8c250.0e46ddff.webp",t=i.p+"static/image/1c913393a125ca24bcfc78c49510b6d2.efbf18ae.webp",a=i.p+"static/image/9b947cf2c73c0dac3f2d2a9c808a1640.884a4d41.webp",h=i.p+"static/image/a106eccc5af450d30580dde2553017b1.afc378f7.webp",o=i.p+"static/image/c20b424ea5a268ffc8a8ed80ef24c345.6f27b78e.webp",x=i.p+"static/image/eb5834cfe2cbc9ebc73a0ef242f7766d.2efda61f.webp",p=i.p+"static/image/b9ff635be608119821633f7386dfafb6.ceb2fe2b.webp",j=i.p+"static/image/1c0988113e18c1d46142f2ba530bfc8f.eff1a442.webp";function u(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",strong:"strong",h2:"h2",img:"img",pre:"pre",blockquote:"blockquote",h3:"h3",ol:"ol",li:"li",h4:"h4"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"7预构建_-如何玩转秒级依赖预构建的能力",children:["7.预构建_ 如何玩转秒级依赖预构建的能力？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7预构建_-如何玩转秒级依赖预构建的能力",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["大家都知道， Vite 是一个提倡 ",(0,s.jsx)(n.code,{children:"no-bundle"})," 的构建工具，相比于传统的 Webpack，能做到开发时的模块按需编译，而不用先打包完再加载。这一点我们在",(0,s.jsx)(n.code,{children:"快速上手"}),"这一节已经具体地分析过了。"]}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的是，我们所说的模块代码其实分为两部分，一部分是源代码，也就是业务代码，另一部分是第三方依赖的代码，即",(0,s.jsx)(n.code,{children:"node_modules"}),"中的代码。所谓的",(0,s.jsx)(n.code,{children:"no-bundle"}),(0,s.jsx)(n.strong,{children:"只是对于源代码而言"}),"，对于第三方依赖而言，Vite 还是选择 bundle(打包)，并且使用速度极快的打包器 Esbuild 来完成这一过程，达到秒级的依赖编译速度。"]}),"\n",(0,s.jsx)(n.p,{children:"这一小节，我将带你一起熟悉 Vite 的预构建功能，深入体会各个配置的应用场景和使用姿势，学会在实战中驾驭预构建的能力。"}),"\n",(0,s.jsxs)(n.h2,{id:"为什么需要预构建",children:["为什么需要预构建?",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么需要预构建",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在介绍使用姿势之前，我想先问你一个问题：为什么在开发阶段我们要对第三方依赖进行预构建? 如果不进行预构建会怎么样？"}),"\n",(0,s.jsx)(n.p,{children:"首先 Vite 是基于浏览器原生 ES 模块规范实现的 Dev Server，不论是应用代码，还是第三方依赖的代码，理应符合 ESM 规范才能够正常运行。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["但可惜，我们没有办法控制第三方的打包规范。就目前来看，还有相当多的第三方库仍然没有 ES 版本的产物，比如大名鼎鼎的 ",(0,s.jsx)(n.code,{children:"react"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// react 入口文件\n// 只有 CommonJS 格式\n\nif (process.env.NODE_ENV === "production") {\n  module.exports = require("./cjs/react.production.min.js");\n} else {\n  module.exports = require("./cjs/react.development.js");\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"这种 CommonJS 格式的代码在 Vite 当中无法直接运行，我们需要将它转换成 ESM 格式的产物。"}),"\n",(0,s.jsxs)(n.p,{children:["此外，还有一个比较重要的问题——",(0,s.jsx)(n.strong,{children:"请求瀑布流问题"}),"。比如说，知名的",(0,s.jsx)(n.code,{children:"loadsh-es"}),"库本身是有 ES 版本产物的，可以在 Vite 中直接运行。但实际上，它在加载时会发出特别多的请求，导致页面加载的前几秒几都乎处于卡顿状态，拿一个简单的 demo 项目举例，请求情况如下图所示:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["我在应用代码中调用了",(0,s.jsx)(n.code,{children:"debounce"}),"方法，这个方法会依赖很多工具函数，如下图所示:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["每个",(0,s.jsx)(n.code,{children:"import"}),"都会触发一次新的文件请求，因此在这种",(0,s.jsx)(n.code,{children:"依赖层级深"}),"、",(0,s.jsx)(n.code,{children:"涉及模块数量多"}),"的情况下，会触发成百上千个网络请求，巨大的请求量加上 Chrome 对同一个域名下只能同时支持 ",(0,s.jsx)(n.code,{children:"6"})," 个 HTTP 并发请求的限制，导致页面加载十分缓慢，与 Vite 主导性能优势的初衷背道而驰。不过，在进行",(0,s.jsx)(n.strong,{children:"依赖的预构建"}),"之后，",(0,s.jsx)(n.code,{children:"lodash-es"}),"这个库的代码被打包成了一个文件，这样请求的数量会骤然减少，页面加载也快了许多。下图是进行预构建之后的请求情况，你可以对照看看:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"总之，依赖预构建主要做了两件事情："}),"\n",(0,s.jsxs)(n.p,{children:["一是将其他格式(如 UMD 和 CommonJS)的产物转换为 ESM 格式，使其在浏览器通过 ",(0,s.jsx)(n.code,{children:'<script type="module"><script>'}),"的方式正常加载。"]}),"\n",(0,s.jsx)(n.p,{children:"二是打包第三方库的代码，将各个第三方库分散的文件合并到一起，减少 HTTP 请求数量，避免页面加载性能劣化。"}),"\n",(0,s.jsxs)(n.p,{children:["而这两件事情全部由性能优异的 ",(0,s.jsx)(n.code,{children:"Esbuild"})," (基于 Golang 开发)完成，而不是传统的 Webpack/Rollup，所以也不会有明显的打包性能问题，反而是 Vite 项目启动飞快(秒级启动)的一个核心原因。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["ps: Vite 1.x 使用了 Rollup 来进行依赖预构建，在 2.x 版本将 Rollup 换成了 Esbuild，编译速度提升了",(0,s.jsx)(n.a,{href:"https://esbuild.github.io/",target:"_blank",rel:"noopener noreferrer",children:"近 100 倍"}),"！"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"如何开启预构建",children:["如何开启预构建？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何开启预构建",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 Vite 中有两种开启预构建的方式，分别是",(0,s.jsx)(n.code,{children:"自动开启"}),"和",(0,s.jsx)(n.code,{children:"手动开启"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"自动开启",children:["自动开启",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自动开启",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先是",(0,s.jsx)(n.code,{children:"自动开启"}),"。当我们在第一次启动项目的时候，可以在命令行窗口看见如下的信息:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["同时，在项目启动成功后，你可以在根目录下的",(0,s.jsx)(n.code,{children:"node_modules"}),"中发现",(0,s.jsx)(n.code,{children:".vite"}),"目录，这就是预构建产物文件存放的目录，内容如下:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["在浏览器访问页面后，打开 ",(0,s.jsx)(n.code,{children:"Dev Tools"})," 中的网络调试面板，你可以发现第三方包的引入路径已经被重写:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import React from "react";\n// 路径被重写，定向到预构建产物文件中\nimport __vite__cjsImport0_react from "/node_modules/.vite/react.js?v=979739df";\nconst React = __vite__cjsImport0_react.__esModule\n  ? __vite__cjsImport0_react.default\n  : __vite__cjsImport0_react;\n'})}),"\n",(0,s.jsx)(n.p,{children:"并且对于依赖的请求结果，Vite 的 Dev Server 会设置强缓存:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"缓存过期时间被设置为一年，表示缓存过期前浏览器对 react 预构建产物的请求不会再经过 Vite Dev Server，直接用缓存结果。"}),"\n",(0,s.jsxs)(n.p,{children:["当然，除了 HTTP 缓存，Vite 还设置了本地文件系统的缓存，所有的预构建产物默认缓存在",(0,s.jsx)(n.code,{children:"node_modules/.vite"}),"目录中。如果以下 3 个地方都没有改动，Vite 将一直使用缓存文件:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["package.json 的 ",(0,s.jsx)(n.code,{children:"dependencies"})," 字段"]}),"\n",(0,s.jsx)(n.li,{children:"各种包管理器的 lock 文件"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"optimizeDeps"})," 配置内容"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"手动开启",children:["手动开启",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#手动开启",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上面提到了预构建中本地文件系统的产物缓存机制，而少数场景下我们不希望用本地的缓存文件，比如需要调试某个包的预构建结果，我推荐使用下面任意一种方法清除缓存:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["删除",(0,s.jsx)(n.code,{children:"node_modules/.vite"}),"目录。"]}),"\n",(0,s.jsxs)(n.li,{children:["在 Vite 配置文件中，将",(0,s.jsx)(n.code,{children:"server.force"}),"设为",(0,s.jsx)(n.code,{children:"true"}),"。(注意，Vite 3.0 中配置项有所更新，你需要将 ",(0,s.jsx)(n.code,{children:"optimizeDeps.force"})," 设为",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["命令行执行",(0,s.jsx)(n.code,{children:"npx vite --force"}),"或者",(0,s.jsx)(n.code,{children:"npx vite optimize"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Vite 项目的启动可以分为两步，第一步是依赖预构建，第二步才是 Dev Server 的启动，",(0,s.jsx)(n.code,{children:"npx vite optimize"}),"相比于其它的方案，仅仅完成第一步的功能。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"自定义配置详解",children:["自定义配置详解",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义配置详解",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["前面说到了如何启动预构建的问题，现在我们来谈谈怎样通过 Vite 提供的配置项来定制预构建的过程。Vite 将预构建相关的配置项都集中在",(0,s.jsx)(n.code,{children:"optimizeDeps"}),"属性上，我们来一一拆解这些子配置项背后的含义和应用场景。"]}),"\n",(0,s.jsxs)(n.h3,{id:"入口文件entries",children:["入口文件——entries",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#入口文件entries",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["第一个是参数是",(0,s.jsx)(n.code,{children:"optimizeDeps.entries"}),"，通过这个参数你可以自定义预构建的入口文件。"]}),"\n",(0,s.jsxs)(n.p,{children:["实际上，在项目第一次启动时，Vite 会默认抓取项目中所有的 HTML 文件（如当前脚手架项目中的",(0,s.jsx)(n.code,{children:"index.html"}),"），将 HTML 文件作为应用入口，然后根据入口文件扫描出项目中用到的第三方依赖，最后对这些依赖逐个进行编译。"]}),"\n",(0,s.jsxs)(n.p,{children:["那么，当默认扫描 HTML 文件的行为无法满足需求的时候，比如项目入口为",(0,s.jsx)(n.code,{children:"vue"}),"格式文件时，你可以通过 entries 参数来配置:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// vite.config.ts\n{\n  optimizeDeps: {\n    // 为一个字符串数组\n    entries: ["./src/main.vue"];\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["当然，entries 配置也支持 ",(0,s.jsx)(n.a,{href:"https://github.com/mrmlnc/fast-glob",target:"_blank",rel:"noopener noreferrer",children:"glob 语法"}),"，非常灵活，如:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// 将所有的 .vue 文件作为扫描入口\nentries: ["**/*.vue"];\n'})}),"\n",(0,s.jsxs)(n.p,{children:["不光是",(0,s.jsx)(n.code,{children:".vue"}),"文件，Vite 同时还支持各种格式的入口，包括: ",(0,s.jsx)(n.code,{children:"html"}),"、",(0,s.jsx)(n.code,{children:"svelte"}),"、",(0,s.jsx)(n.code,{children:"astro"}),"、",(0,s.jsx)(n.code,{children:"js"}),"、",(0,s.jsx)(n.code,{children:"jsx"}),"、",(0,s.jsx)(n.code,{children:"ts"}),"和",(0,s.jsx)(n.code,{children:"tsx"}),"。可以看到，只要可能存在",(0,s.jsx)(n.code,{children:"import"}),"语句的地方，Vite 都可以解析，并通过内置的扫描机制搜集到项目中用到的依赖，通用性很强。"]}),"\n",(0,s.jsxs)(n.h3,{id:"添加一些依赖include",children:["添加一些依赖——include",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加一些依赖include",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["除了 ",(0,s.jsx)(n.code,{children:"entries"}),"，",(0,s.jsx)(n.code,{children:"include"})," 也是一个很常用的配置，它决定了可以强制预构建的依赖项，使用方式很简单:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// vite.config.ts\noptimizeDeps: {\n  // 配置为一个字符串数组，将 `lodash-es` 和 `vue`两个包强制进行预构建\n  include: ["lodash-es", "vue"];\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["它在使用上并不难，真正难的地方在于，如何找到合适它的使用场景。前文中我们提到，Vite 会根据应用入口(",(0,s.jsx)(n.code,{children:"entries"}),")自动搜集依赖，然后进行预构建，这是不是说明 Vite 可以百分百准确地搜集到所有的依赖呢？事实上并不是，某些情况下 Vite 默认的扫描行为并不完全可靠，这就需要联合配置",(0,s.jsx)(n.code,{children:"include"}),"来达到完美的预构建效果了。接下来，我们好好梳理一下到底有哪些需要配置",(0,s.jsx)(n.code,{children:"include"}),"的场景。"]}),"\n",(0,s.jsxs)(n.h4,{id:"场景一-动态-import",children:["场景一: 动态 import",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#场景一-动态-import",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在某些动态 import 的场景下，由于 Vite 天然按需加载的特性，经常会导致某些依赖只能在运行时被识别出来。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// src/locales/zh_CN.js\nimport objectAssign from "object-assign";\nconsole.log(objectAssign);\n\n// main.tsx\nconst importModule = (m) => import(`./locales/${m}.ts`);\nimportModule("zh_CN");\n'})}),"\n",(0,s.jsx)(n.p,{children:"在这个例子中，动态 import 的路径只有运行时才能确定，无法在预构建阶段被扫描出来。因此，我们在访问项目时控制台会出现下面的日志信息:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["这段 log 的意思是: Vite 运行时发现了新的依赖，随之重新进行依赖预构建，并刷新页面。这个过程也叫",(0,s.jsx)(n.strong,{children:"二次预构建"}),"。在一些比较复杂的项目中，这个过程会执行很多次，如下面的日志信息所示:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[vite] new dependencies found: @material-ui/icons/Dehaze, @material-ui/core/Box, @material-ui/core/Checkbox, updating...\n[vite] ✨ dependencies updated, reloading page...\n[vite] new dependencies found: @material-ui/core/Dialog, @material-ui/core/DialogActions, updating...\n[vite] ✨ dependencies updated, reloading page...\n[vite] new dependencies found: @material-ui/core/Accordion, @material-ui/core/AccordionSummary, updating...\n[vite] ✨ dependencies updated, reloading page...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然而，二次预构建的成本也比较大。我们不仅需要把预构建的流程重新运行一遍，还得重新刷新页面，并且需要重新请求所有的模块。尤其是在大型项目中，这个过程会严重拖慢应用的加载速度！因此，我们要尽力避免运行时的",(0,s.jsx)(n.strong,{children:"二次预构建"}),"。具体怎么做呢？你可以通过",(0,s.jsx)(n.code,{children:"include"}),"参数提前声明需要按需加载的依赖:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// vite.config.ts\n{\n  optimizeDeps: {\n    include: [\n      // 按需加载的依赖都可以声明到这个数组里\n      "object-assign",\n    ];\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"场景二-某些包被手动-exclude",children:["场景二: 某些包被手动 exclude",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#场景二-某些包被手动-exclude",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"exclude"})," 是",(0,s.jsx)(n.code,{children:"optimizeDeps"}),"中的另一个配置项，与",(0,s.jsx)(n.code,{children:"include"}),"相对，用于将某些依赖从预构建的过程中排除。不过这个配置并不常用，也不推荐大家使用。如果真遇到了要在预构建中排除某个包的情况，需要注意",(0,s.jsx)(n.code,{children:"它所依赖的包"}),"是否具有 ESM 格式，如下面这个例子:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// vite.config.ts\n{\n  optimizeDeps: {\n    exclude: ["@loadable/component"];\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"可以看到浏览器控制台会出现如下的报错:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["这是为什么呢? 我们刚刚手动 exclude 的包",(0,s.jsx)(n.code,{children:"@loadable/component"}),"本身具有 ESM 格式的产物，但它的某个依赖",(0,s.jsx)(n.code,{children:"hoist-non-react-statics"}),"的产物并没有提供 ESM 格式，导致运行时加载失败。"]}),"\n",(0,s.jsxs)(n.p,{children:["这个时候",(0,s.jsx)(n.code,{children:"include"}),"配置就派上用场了，我们可以强制对",(0,s.jsx)(n.code,{children:"hoist-non-react-statics"}),"这个间接依赖进行预构建:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// vite.config.ts\n{\n  optimizeDeps: {\n    include: [\n      // 间接依赖的声明语法，通过`>`分开, 如`a > b`表示 a 中依赖的 b\n      "@loadable/component > hoist-non-react-statics",\n    ];\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在",(0,s.jsx)(n.code,{children:"include"}),"参数中，我们将所有不具备 ESM 格式产物包都声明一遍，这样再次启动项目就没有问题了。"]}),"\n",(0,s.jsxs)(n.h3,{id:"自定义-esbuild-行为",children:["自定义 Esbuild 行为",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义-esbuild-行为",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Vite 提供了",(0,s.jsx)(n.code,{children:"esbuildOptions"})," 参数来让我们自定义 Esbuild 本身的配置，常用的场景是加入一些 Esbuild 插件:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// vite.config.ts\n{\n  optimizeDeps: {\n    esbuildOptions: {\n       plugins: [\n        // 加入 Esbuild 插件\n      ];\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这个配置主要是处理一些特殊情况，如某个第三方包本身的代码出现问题了。接下来，我们就来讨论一下。"}),"\n",(0,s.jsxs)(n.h2,{id:"特殊情况-第三方包出现问题怎么办",children:["特殊情况: 第三方包出现问题怎么办？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#特殊情况-第三方包出现问题怎么办",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["由于我们无法保证第三方包的代码质量，在某些情况下我们会遇到莫名的第三方库报错。我举一个常见的案例——",(0,s.jsx)(n.code,{children:"react-virtualized"}),"库。这个库被许多组件库用到，但它的 ESM 格式产物有明显的问题，在 Vite 进行预构建的时候会直接抛出这个错误："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"原因是这个库的 ES 产物莫名其妙多出了一行无用的代码:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// WindowScroller.js 并没有导出这个模块\nimport { bpfrpt_proptype_WindowScroller } from "../WindowScroller.js";\n'})}),"\n",(0,s.jsx)(n.p,{children:"其实我们并不需要这行代码，但它却导致 Esbuild 预构建的时候直接报错退出了。那这一类的问题如何解决呢？"}),"\n",(0,s.jsxs)(n.h3,{id:"1-改第三方库代码",children:["1. 改第三方库代码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-改第三方库代码",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先，我们能想到的思路是",(0,s.jsx)(n.strong,{children:"直接修改第三方库的代码"}),"，不过这会带来团队协作的问题，你的改动需要同步到团队所有成员，比较麻烦。"]}),"\n",(0,s.jsxs)(n.p,{children:["好在，我们可以使用",(0,s.jsx)(n.code,{children:"patch-package"}),"这个库来解决这类问题。一方面，它能记录第三方库代码的改动，另一方面也能将改动同步到团队每个成员。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"patch-package"})," 官方只支持 npm 和 yarn，而不支持 pnpm，不过社区中已经提供了支持",(0,s.jsx)(n.code,{children:"pnpm"}),"的版本，这里我们来安装一下相应的包:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm i @milahu/patch-package -D\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注意: 要改动的包在 package.json 中必须声明确定的版本，不能有",(0,s.jsx)(n.code,{children:"~"}),"或者",(0,s.jsx)(n.code,{children:"^"}),"的前缀。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"接着，我们进入第三方库的代码中进行修改，先删掉无用的 import 语句，再在命令行输入:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx patch-package react-virtualized\n"})}),"\n",(0,s.jsxs)(n.p,{children:["现在根目录会多出",(0,s.jsx)(n.code,{children:"patches"}),"目录记录第三方包内容的更改，随后我们在",(0,s.jsx)(n.code,{children:"package.json"}),"的",(0,s.jsx)(n.code,{children:"scripts"}),"中增加如下内容："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    // 省略其它 script\n    "postinstall": "patch-package"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这样一来，每次安装依赖的时候都会通过 ",(0,s.jsx)(n.code,{children:"postinstall"})," 脚本自动应用 patches 的修改，解决了团队协作的问题。"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-加入-esbuild-插件",children:["2. 加入 Esbuild 插件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-加入-esbuild-插件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"第二种方式是通过 Esbuild 插件修改指定模块的内容，这里我给大家展示一下新增的配置内容:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["关于 Esbuild 插件的实现细节，大家不用深究，我们将在",(0,s.jsx)(n.strong,{children:"底层双引擎"}),"的部分给大家展开介绍"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// vite.config.ts\nconst esbuildPatchPlugin = {\n  name: "react-virtualized-patch",\n  setup(build) {\n    build.onLoad(\n      {\n        filter:\n          /react-virtualized\\/dist\\/es\\/WindowScroller\\/utils\\/onScroll.js$/,\n      },\n      async (args) => {\n        const text = await fs.promises.readFile(args.path, "utf8");\n\n        return {\n          contents: text.replace(\n            \'import { bpfrpt_proptype_WindowScroller } from "../WindowScroller.js";\',\n            ""\n          ),\n        };\n      }\n    );\n  },\n};\n\n// 插件加入 Vite 预构建配置\n{\n  optimizeDeps: {\n    esbuildOptions: {\n      plugins: [esbuildPatchPlugin];\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["好，本节的内容到这里就接近尾声了。在这一节，你需要重点掌握 ",(0,s.jsx)(n.strong,{children:"Vite 预构建技术的作用"}),"和",(0,s.jsx)(n.strong,{children:"预构建相关配置的使用"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"Vite 中的依赖预构建技术主要解决了 2 个问题，即模块格式兼容问题和海量模块请求的问题。而 Vite 中开启预构建有 2 种方式，并梳理了预构建产物的缓存策略，推荐了一些手动清除缓存的方法。"}),"\n",(0,s.jsxs)(n.p,{children:["接着，我们正式学习了预构建的相关配置——",(0,s.jsx)(n.code,{children:"entries"}),"、",(0,s.jsx)(n.code,{children:"include"}),"、",(0,s.jsx)(n.code,{children:"exclude"}),"和",(0,s.jsx)(n.code,{children:"esbuldOptions"}),"，并且重点介绍了",(0,s.jsx)(n.code,{children:"include"}),"配置的各种使用场景和使用姿势。最后，我们讨论了一类特殊情况，即第三方包出现了问题该怎么办，分别给你介绍了两个解决思路: 通过",(0,s.jsx)(n.code,{children:"patch-package"}),"修改库代码和编写 ",(0,s.jsx)(n.code,{children:"Esbuild 插件"}),"修改模块加载的内容。"]}),"\n",(0,s.jsx)(n.p,{children:"本小节的内容覆盖了 Vite 预构建绝大多数的应用场景，相信现在的你已经对预构建有了更深入的掌握。欢迎在评论区把自己在使用预构建时踩过的坑分享出来，跟大家一起讨论，也欢迎大家集思广益，分享更多的解决思路。感谢你的阅读，我们下一节再见！"})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}let g=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20Vite%2F7.%E9%A2%84%E6%9E%84%E5%BB%BA_%20%E5%A6%82%E4%BD%95%E7%8E%A9%E8%BD%AC%E7%A7%92%E7%BA%A7%E4%BE%9D%E8%B5%96%E9%A2%84%E6%9E%84%E5%BB%BA%E7%9A%84%E8%83%BD%E5%8A%9B%EF%BC%9F.md"]={toc:[{text:"为什么需要预构建?",id:"为什么需要预构建",depth:2},{text:"如何开启预构建？",id:"如何开启预构建",depth:2},{text:"自动开启",id:"自动开启",depth:3},{text:"手动开启",id:"手动开启",depth:3},{text:"自定义配置详解",id:"自定义配置详解",depth:2},{text:"入口文件——entries",id:"入口文件entries",depth:3},{text:"添加一些依赖——include",id:"添加一些依赖include",depth:3},{text:"场景一: 动态 import",id:"场景一-动态-import",depth:4},{text:"场景二: 某些包被手动 exclude",id:"场景二-某些包被手动-exclude",depth:4},{text:"自定义 Esbuild 行为",id:"自定义-esbuild-行为",depth:3},{text:"特殊情况: 第三方包出现问题怎么办？",id:"特殊情况-第三方包出现问题怎么办",depth:2},{text:"1. 改第三方库代码",id:"1-改第三方库代码",depth:3},{text:"2. 加入 Esbuild 插件",id:"2-加入-esbuild-插件",depth:3},{text:"小结",id:"小结",depth:2}],title:"7.预构建_ 如何玩转秒级依赖预构建的能力？",headingTitle:"7.预构建_ 如何玩转秒级依赖预构建的能力？",frontmatter:{}}}}]);