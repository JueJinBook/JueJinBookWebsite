"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["38553"],{236345:function(e,n,r){r.r(n),r.d(n,{default:()=>i});var c=r(552676),t=r(740453);let s=r.p+"static/image/3035194c4d810cc848597376407c2b93.5206dae3.png",l=r.p+"static/image/18bb50b1382fc490a87c7017282517fd.d7f4e1fb.png";function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",strong:"strong",img:"img",h3:"h3",pre:"pre"},(0,t.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"第06章基础篇electron菜单和托盘",children:["第06章—基础篇：Electron菜单和托盘",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第06章基础篇electron菜单和托盘",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"\uFEFF## 前言"}),"\n",(0,c.jsx)(n.p,{children:"菜单、托盘是桌面端应用必备的功能之一，我们通常会在菜单上配置应用常用的：偏好设置、显示隐藏、打开文件等功能，在托盘内设置：退出、重启、帮助等辅助性功能，帮助用户方便快捷地控制应用的一些系统功能。系统托盘实际上也是一个菜单，通过点击鼠标触发。"}),"\n",(0,c.jsx)(n.p,{children:"本小节会通过一个个使用示例对菜单和托盘进行详细介绍。"}),"\n",(0,c.jsxs)(n.h2,{id:"应用菜单menu",children:["应用菜单（Menu）",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#应用菜单menu",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["Electron 里的菜单大体上分为三类：应用菜单、上下文菜单和 Dock 菜单（仅针对 OSX 系统）。这里以 ",(0,c.jsx)(n.code,{children:"VSCode"})," 为例，来分别介绍这几种菜单的含义。打开 VSCode 编辑器，可以通过下图，很清晰地发现 3 个菜单所处的位置。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"MacOS"}),"："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Windows"}),"："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,c.jsxs)(n.h3,{id:"1-应用内菜单",children:["1. 应用内菜单",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-应用内菜单",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["原生应用菜单可以理解为应用窗口菜单，在 ",(0,c.jsx)(n.code,{children:"MacOS"})," 上，选中应用后，应用内菜单出现在桌面的左上方。在 Windows 和 Linux 上，",(0,c.jsx)(n.code,{children:"Menu"}),"\xa0将会被设置成窗口顶部菜单。在 Electron 中，通常会使用 ",(0,c.jsx)(n.code,{children:"Menu.setApplicationMenu(menu)"})," 函数来设置应用内菜单："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"import { Menu } from 'electron'\n\nfunction createMenu () {\n  const template = [\n    {\n      label: '菜单一',\n      submenu: [\n        {\n          label: '功能一'\n        },\n        {\n          label: '功能二'\n        }\n      ]\n    },\n    {\n      label: '菜单二',\n      submenu: [\n        {\n          label: '功能一'\n        },\n        {\n          label: '功能二'\n        }\n      ]\n    }\n  ];\n  const menu = Menu.buildFromTemplate(template);\n  Menu.setApplicationMenu(menu);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["通过以上代码设置完成一个应用菜单后，在 ",(0,c.jsx)(n.code,{children:"macOS"})," 下的效果如下："]}),"\n",(0,c.jsxs)(n.p,{children:["可以看到第一个菜单的标题是 ",(0,c.jsx)(n.code,{children:"Electron"})," 而不是我们设置的标题 ",(0,c.jsx)(n.code,{children:"菜单一"}),"。这是因为：在 macOS 中应用程序菜单的第一个项目的标签总是你的应用程序的名字，无论你设置什么标签。如果你想展示成自己的标题，Electron 官方给了一种修改 ",(0,c.jsx)(n.code,{children:"Info.plist"})," 的方法：",(0,c.jsx)(n.a,{href:"https://developer.apple.com/library/ios/documentation/general/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html",target:"_blank",rel:"noopener noreferrer",children:"About Information Property List Files"}),"。除此之外，你也可以重新修改一下 ",(0,c.jsx)(n.code,{children:"template"})," 的格式："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"if (process.platform === 'darwin') {\n  template.unshift({\n    label: app.getName(),\n    submenu: [\n      {\n        label: 'Quit',\n        click() {\n          app.quit();\n        }\n      }\n    ]\n  });\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"这样，其实我们就相当于设置了三个菜单，同时，菜单一和菜单二都可以展示出来："}),"\n",(0,c.jsxs)(n.p,{children:["上述代码中，对于 ",(0,c.jsx)(n.code,{children:"template"})," ",(0,c.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/api/menu-item",target:"_blank",rel:"noopener noreferrer",children:"菜单项"}),"字段内有很多配置项，具体的字段也可以直接阅读官方文档，针对每个字段都有详细的解释。"]}),"\n",(0,c.jsxs)(n.h3,{id:"2-上下文菜单",children:["2. 上下文菜单",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-上下文菜单",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["上下文菜单（context menu）就是我们通常说的右键菜单，需要注意的是：上下文菜单，需要在渲染进程中进行实现，可以通过 ",(0,c.jsx)(n.code,{children:"IPC"})," 发送所需的信息到主进程，并让主进程代替渲染进程显示菜单："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// 主进程 main/index.js\nipcMain.on('show-context-menu', (event) => {\n  const template = [\n    {\n      label: '菜单一',\n      click: () => {\n        // 发送点击菜单一事件到渲染进程\n        event.sender.send('context-menu-command', 'menu-item-1')\n      }\n    },\n    { type: 'separator' },\n    {\n      label: '菜单二',\n      type: 'checkbox',\n      checked: true\n    }\n  ]\n  const menu = Menu.buildFromTemplate(template)\n  menu.popup({\n    window: BrowserWindow.fromWebContents(event.sender)\n  })\n})\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'// 渲染进程 renderer/main.js\nwindow.addEventListener("contextmenu", (e) => {\n  e.preventDefault();\n  electron.ipcRenderer.send("show-context-menu");\n});\nelectron.ipcRenderer.on("context-menu-command", (e, command) => {\n  // todo\n});\n'})}),"\n",(0,c.jsxs)(n.h3,{id:"3-dock-菜单仅-macos-可用",children:["3. Dock 菜单（仅 MacOS 可用）",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-dock-菜单仅-macos-可用",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["Dock 的菜单实现也是在主进程中，可以通过 ",(0,c.jsx)(n.code,{children:"app.dock.setMenu"})," 这个 API 来直接创建："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// main.js\nconst createDockMenu = () => {\n  const dockTempalte = [\n    {\n      label: '菜单一',\n      click () {\n        console.log('New Window');\n      }\n    }, {\n      label: '菜单二',\n      submenu: [\n        { label: 'Basic' },\n        { label: 'Pro' }\n      ]\n    },\n    {\n      label: '其他...'\n    }\n  ];\n\n  const dockMenu = Menu.buildFromTemplate(dockTempalte);\n  app.dock.setMenu(dockMenu);\n}\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"应用托盘tray",children:["应用托盘（Tray）",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#应用托盘tray",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["实现应用托盘主要依托于 Electron 的 ",(0,c.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/api/tray",target:"_blank",rel:"noopener noreferrer",children:"Tray"})," 模块，在 MacOS 和 Ubuntu，托盘将位于屏幕右上角上，靠近你的电池和 wifi 图标。在 Windows 上，托盘通常位于右下角。"]}),"\n",(0,c.jsxs)(n.p,{children:["通过以上图片可以清晰地看到创建一个托盘需要准备一个图标用于显示，以及一个",(0,c.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/api/menu-item",target:"_blank",rel:"noopener noreferrer",children:"菜单项"}),"用于呈现所需的功能菜单，关于托盘图标，我们在",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304648624460759081",target:"_blank",rel:"noopener noreferrer",children:"《Electron 跨平台兼容性措施》"}),"章节已经有所介绍，这里就不再赘述。"]}),"\n",(0,c.jsxs)(n.p,{children:["我们来看一下 ",(0,c.jsx)(n.code,{children:"Windows"})," 下一个简单的应用托盘的实现方式："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// 主进程\nimport {app, Menu, Tray} from 'electron';\n\nlet tray = new Tray('public/icon.ico');\nconst contextMenu = Menu.buildFromTemplate([\n  {\n    label: '退出',\n    click: function(){\n      app.quit();\n    }\n  }\n]);\ntray.setToolTip('应用标题');\ntray.setContextMenu(contextMenu);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["在 Rubick 中，应用托盘实现的源码见：",(0,c.jsx)(n.a,{href:"https://github.com/rubickCenter/rubick/blob/master/src/main/common/tray.ts",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/rubickCenter/rubick/blob/master/src/main/common/tray.ts"})]}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["本小节我们通过一些简单的示例介绍了 Electorn 中如何通过 ",(0,c.jsx)(n.code,{children:"Menu 模块"})," 和 ",(0,c.jsx)(n.code,{children:"Tray 模块"})," 来实现菜单和托盘的功能。作为一款桌面端应用，菜单和托盘属于基础的功能模块，希望通过本章的学习你可以学会使用这两个最基础模块。"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}let i=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC06%E7%AB%A0%E2%80%94%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9AElectron%E8%8F%9C%E5%8D%95%E5%92%8C%E6%89%98%E7%9B%98.md"]={toc:[{text:"应用菜单（Menu）",id:"应用菜单menu",depth:2},{text:"1. 应用内菜单",id:"1-应用内菜单",depth:3},{text:"2. 上下文菜单",id:"2-上下文菜单",depth:3},{text:"3. Dock 菜单（仅 MacOS 可用）",id:"3-dock-菜单仅-macos-可用",depth:3},{text:"应用托盘（Tray）",id:"应用托盘tray",depth:2},{text:"总结",id:"总结",depth:2}],title:"第06章—基础篇：Electron菜单和托盘",headingTitle:"第06章—基础篇：Electron菜单和托盘",frontmatter:{}}}}]);