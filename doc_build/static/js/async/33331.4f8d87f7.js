"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["33331"],{977324:function(n,e,r){r.r(e),r.d(e,{default:()=>h});var s=r(552676),i=r(740453);function l(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ol:"ol",li:"li",strong:"strong",code:"code",img:"img",h3:"h3",h4:"h4",pre:"pre",br:"br",blockquote:"blockquote",ul:"ul"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"17特殊的二叉树二叉搜索树专题",children:["17.特殊的二叉树——二叉搜索树专题",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#17特殊的二叉树二叉搜索树专题",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"二叉搜索树（Binary Search Tree）简称 BST，是二叉树的一种特殊形式。它有很多别名，比如排序二叉树、二叉查找树等等。"}),"\n",(0,s.jsx)(e.p,{children:"虽然二叉搜索树多年来一直作为算法面试的“必要考点”存在，但在实际面试中，它的考察频率并不能和常规二叉树相提并论，算不上“大热”的考点，同时考察内容也是相对比较稳定的。对于二叉搜索树，我们只要能够把握好它的限制条件和特性，就足以应对大部分的考题。"}),"\n",(0,s.jsxs)(e.h2,{id:"什么是二叉搜索树",children:["什么是二叉搜索树",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是二叉搜索树",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"树的定义总是以递归的形式出现，二叉搜索树也不例外，它的递归定义如下："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"是一棵空树"}),"\n",(0,s.jsxs)(e.li,{children:["是一棵由根结点、左子树、右子树组成的树，同时左子树和右子树都是二叉搜索树，且",(0,s.jsx)(e.strong,{children:"左子树"}),"上所有结点的数据域都",(0,s.jsx)(e.strong,{children:"小于等于"}),"根结点的数据域，",(0,s.jsx)(e.strong,{children:"右子树"}),"上所有结点的数据域都",(0,s.jsx)(e.strong,{children:"大于等于"}),"根结点的数据域"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"满足以上两个条件之一的二叉树，就是二叉搜索树。"}),"\n",(0,s.jsxs)(e.p,{children:["从这个定义我们可以看出，二叉搜索树强调的是",(0,s.jsx)(e.strong,{children:"数据域的有序性"}),"。也就是说，二叉搜索树上的每一棵子树，都应该满足 ",(0,s.jsx)(e.code,{children:"左孩子 <= 根结点 <= 右孩子"})," 这样的大小关系。下图我给出了几个二叉搜索树的示例："]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.img,{src:"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81507c52878942b08f5f5a781ee8944c~tplv-k3u1fbpfcp-zoom-1.image",alt:""}),"\n以第三棵树为例，根结点的数据域为6，它的左子树的所有结点都小于等于6、右子树的所有结点都大于等于6。同时在任意子树的内部，也满足这个条件——比如左子树中，根结点值为3，根结点对应左子树的所有结点都小于等于3、右子树的所有结点都大于等于3。"]}),"\n",(0,s.jsxs)(e.h2,{id:"二叉搜索树编码基本功",children:["二叉搜索树：编码基本功",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#二叉搜索树编码基本功",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"关于二叉搜索树，大家需要掌握以下高频操作："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"查找数据域为某一特定值的结点"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"插入新结点"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"删除指定结点"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"查找数据域为某一特定值的结点",children:["查找数据域为某一特定值的结点",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#查找数据域为某一特定值的结点",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["假设这个目标结点的数据域值为 ",(0,s.jsx)(e.code,{children:"n"}),"，我们借助二叉搜索树数据域的有序性，可以有以下查找思路："]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"递归遍历二叉树，若当前遍历到的结点为空，就意味着没找到目标结点，直接返回。"}),"\n",(0,s.jsxs)(e.li,{children:["若当前遍历到的结点对应的数据域值刚好等于",(0,s.jsx)(e.code,{children:"n"}),"，则查找成功，返回。"]}),"\n",(0,s.jsxs)(e.li,{children:["若当前遍历到的结点对应的数据域值大于目标值",(0,s.jsx)(e.code,{children:"n"}),"，则应该在左子树里进一步查找，设置下一步的遍历范围为 ",(0,s.jsx)(e.code,{children:"root.left"})," 后，继续递归。"]}),"\n",(0,s.jsxs)(e.li,{children:["若当前遍历到的结点对应的数据域值小于目标值",(0,s.jsx)(e.code,{children:"n"}),"，则应该在右子树里进一步查找，设置下一步的遍历范围为 ",(0,s.jsx)(e.code,{children:"root.right"})," 后，继续递归。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"编码实现",children:["编码实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码实现",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function search(root, n) {\n    // 若 root 为空，查找失败，直接返回\n    if(!root) {\n        return \n    }\n    // 找到目标结点，输出结点对象\n    if(root.val === n) {\n        console.log('目标结点是：', root)\n    } else if(root.val > n) {\n        // 当前结点数据域大于n，向左查找\n        search(root.left, n)\n    } else {\n        // 当前结点数据域小于n，向右查找\n        search(root.right, n)\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"插入新结点",children:["插入新结点",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#插入新结点",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["插入结点的思路其实和寻找结点非常相似。大家反思一下，在上面寻找结点的时候，为什么我们会在判定当前结点为空时，就认为查找失败了呢？",(0,s.jsx)(e.br,{}),"\n","这是因为，二叉搜索树的查找路线是一个非常",(0,s.jsx)(e.strong,{children:"明确"}),"的路径：我们会根据当前结点值的大小，决定路线应该是向左走还是向右走。如果最后走到了一个空结点处，这就意味着我们没有办法再往深处去搜索了，也就没有了找到目标结点的可能性。"]}),"\n",(0,s.jsxs)(e.p,{children:["换一个角度想想，如果这个空结点所在的位置恰好有一个值为 ",(0,s.jsx)(e.code,{children:"n"})," 的结点，是不是就可以查找成功了？那么如果我把 ",(0,s.jsx)(e.code,{children:"n"})," 值塞到这个空结点所在的位置，是不是刚好符合二叉搜索树的排序规则？"]}),"\n",(0,s.jsx)(e.p,{children:"实不相瞒，二叉搜索树插入结点的过程，和搜索某个结点的过程几乎是一样的：从根结点开始，把我们希望插入的数据值和每一个结点作比较。若大于当前结点，则向右子树探索；若小于当前结点，则向左子树探索。最后找到的那个空位，就是它合理的栖身之所。"}),"\n",(0,s.jsxs)(e.h4,{id:"编码实现-1",children:["编码实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码实现-1",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function insertIntoBST(root, n) {\n    // 若 root 为空，说明当前是一个可以插入的空位\n    if(!root) { \n        // 用一个值为n的结点占据这个空位\n        root = new TreeNode(n)\n        return root\n    }\n    \n    if(root.val > n) {\n        // 当前结点数据域大于n，向左查找\n        root.left = insertIntoBST(root.left, n)\n    } else {\n        // 当前结点数据域小于n，向右查找\n        root.right = insertIntoBST(root.right, n)\n    }\n\n    // 返回插入后二叉搜索树的根结点\n    return root\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["注：你可以用",(0,s.jsx)(e.a,{href:"https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer",children:"这道力扣真题"}),"  来验证以上插入操作的正确性。"]}),"\n",(0,s.jsxs)(e.h3,{id:"删除指定结点",children:["删除指定结点",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#删除指定结点",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"想要删除某个结点，首先要找到这个结点。在定位结点后，我们需要考虑以下情况："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"结点不存在，定位到了空结点。直接返回即可。"}),"\n",(0,s.jsx)(e.li,{children:"需要删除的目标结点没有左孩子也没有右孩子——它是一个叶子结点，删掉它不会对其它结点造成任何影响，直接删除即可。"}),"\n",(0,s.jsx)(e.li,{children:"需要删除的目标结点存在左子树，那么就去左子树里寻找小于目标结点值的最大结点，用这个结点覆盖掉目标结点"}),"\n",(0,s.jsx)(e.li,{children:"需要删除的目标结点存在右子树，那么就去右子树里寻找大于目标结点值的最小结点，用这个结点覆盖掉目标结点"}),"\n",(0,s.jsx)(e.li,{children:"需要删除的目标结点既有左子树、又有右子树，这时就有两种做法了：要么取左子树中值最大的结点，要么取右子树中取值最小的结点。两个结点中任取一个覆盖掉目标结点，都可以维持二叉搜索树的数据有序性"}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"编码实现-2",children:["编码实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码实现-2",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function deleteNode(root, n) {\n    // 如果没找到目标结点，则直接返回\n    if(!root) {\n        return root\n    }\n    // 定位到目标结点，开始分情况处理删除动作\n    if(root.val === n) {\n        // 若是叶子结点，则不需要想太多，直接删除\n        if(!root.left && !root.right) {\n            root = null\n        } else if(root.left) {\n            // 寻找左子树里值最大的结点\n            const maxLeft = findMax(root.left)\n            // 用这个 maxLeft 覆盖掉需要删除的当前结点  \n            root.val = maxLeft.val\n            // 覆盖动作会消耗掉原有的 maxLeft 结点\n            root.left = deleteNode(root.left, maxLeft.val)\n        } else {\n            // 寻找右子树里值最小的结点\n            const minRight = findMin(root.right)\n            // 用这个 minRight 覆盖掉需要删除的当前结点  \n            root.val = minRight.val\n            // 覆盖动作会消耗掉原有的 minRight 结点\n            root.right = deleteNode(root.right, minRight.val)\n        }\n    } else if(root.val > n) {\n        // 若当前结点的值比 n 大，则在左子树中继续寻找目标结点\n        root.left = deleteNode(root.left, n)\n    } else  {\n        // 若当前结点的值比 n 小，则在右子树中继续寻找目标结点\n        root.right = deleteNode(root.right, n)\n    }\n    return root\n}\n\n// 寻找左子树最大值\nfunction findMax(root) {\n    while(root.right) {\n        root = root.right\n    }\n    return root \n}\n\n// 寻找右子树的最小值\nfunction findMin(root) {\n    while(root.left) {\n        root = root.left\n    }\n    return root\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["你可以在",(0,s.jsx)(e.a,{href:"https://leetcode-cn.com/problems/delete-node-in-a-bst/submissions/",target:"_blank",rel:"noopener noreferrer",children:"这道力扣真题"}),"中验证以上删除操作代码的正确性。"]}),"\n",(0,s.jsxs)(e.h4,{id:"编码复盘",children:["编码复盘",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码复盘",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["上面这段代码展示了二叉搜索树删除的基本思路：在这个思路的基础上，大家可以做很多个性化的修改。",(0,s.jsx)(e.br,{}),"\n","举个例子，细心的同学会发现，如果目标结点既有左子树又有右子树，那么在上面这段逻辑里，会优先去找它左子树里的最大值，而不会去 care 右子树的最小值这个选项。",(0,s.jsx)(e.br,{}),"\n","这样做，得到的结果从正确性上来说是没问题的，但是却不太美观：每次都删除一侧子树的结点，会导致二叉树的左右子树高度不平衡。",(0,s.jsx)(e.br,{}),"\n","如果题目中要求我们顾及二叉树的平衡度，那么我们就可以在删除的过程中记录子树的高度，每次选择高度较高的子树作为查找目标，用这个子树里的结点去覆盖需要删除的目标结点。",(0,s.jsx)(e.br,{}),"\n","（关于二叉树平衡度的知识，我们会在下一节作讲解，大家稍安勿躁）"]}),"\n",(0,s.jsxs)(e.h2,{id:"二叉搜索树的特性",children:["二叉搜索树的特性",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#二叉搜索树的特性",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["关于二叉搜索树的特性，有且仅有一条是需要大家背诵默写的：",(0,s.jsx)(e.br,{}),"\n",(0,s.jsx)(e.strong,{children:"二叉搜索树的中序遍历序列是有序的"}),"！"]}),"\n",(0,s.jsx)(e.p,{children:"OK，基本功就修炼到这里，下面大家一起来开开心心地碾碎真题吧！"}),"\n",(0,s.jsxs)(e.h2,{id:"真题实战环节",children:["真题实战环节",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#真题实战环节",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"开篇我们说过，我们只要能够把握好二叉搜索树的限制条件（即定义）和特性，就足以应对大部分的考题。下面我们就来看看定义和特性的考察是如何在真题中体现的："}),"\n",(0,s.jsxs)(e.h3,{id:"对定义的考察二叉搜索树的验证",children:["对定义的考察：二叉搜索树的验证",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#对定义的考察二叉搜索树的验证",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["题目描述：给定一个二叉树，判断其是否是一个有效的二叉搜索树。",(0,s.jsx)(e.br,{}),"\n","假设一个二叉搜索树具有如下特征：",(0,s.jsx)(e.br,{}),"\n","节点的左子树只包含小于当前节点的数。",(0,s.jsx)(e.br,{}),"\n","节点的右子树只包含大于当前节点的数。",(0,s.jsx)(e.br,{}),"\n","所有左子树和右子树自身必须也是二叉搜索树。"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["示例\xa01:",(0,s.jsx)(e.br,{}),"\n","输入:"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"    2\n   / \\\n  1   3\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"输出: true"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["示例\xa02:",(0,s.jsx)(e.br,{}),"\n","输入:"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"    5\n   / \\\n  1   4\n\xa0    / \\\n\xa0   3   6\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["输出: false",(0,s.jsx)(e.br,{}),"\n","解释: 输入为: [5,1,4,null,null,3,6]。",(0,s.jsx)(e.br,{}),"\n","根节点的值为 5 ，但是其右子节点值为 4 。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"思路分析",children:["思路分析",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#思路分析",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"对于这道题，我们需要好好咀嚼一下二叉搜索树的定义："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"它可以是一棵空树"}),"\n",(0,s.jsxs)(e.li,{children:["它可以是一棵由根结点、左子树、右子树组成的树，同时左子树和右子树都是二叉搜索树，且",(0,s.jsx)(e.strong,{children:"左子树"}),"上所有结点的数据域都",(0,s.jsx)(e.strong,{children:"小于等于"}),"根结点的数据域，",(0,s.jsx)(e.strong,{children:"右子树"}),"上所有结点的数据域都",(0,s.jsx)(e.strong,{children:"大于等于"}),"根结点的数据域"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["只有符合以上两种情况之一的二叉树，可以称之为二叉搜索树。",(0,s.jsx)(e.br,{}),"\n","空树的判定比较简单，关键在于非空树的判定：需要递归地对非空树中的左右子树进行遍历，检验每棵子树中是否都满足 ",(0,s.jsx)(e.code,{children:"左 < 根 < 右"})," 这样的关系（注意题中声明了不需要考虑相等情况）。",(0,s.jsx)(e.br,{}),"\n","基于这样的思路，我们可以编码如下："]}),"\n",(0,s.jsxs)(e.h4,{id:"编码实现-3",children:["编码实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码实现-3",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nconst isValidBST = function(root) {\n  // 定义递归函数\n  function dfs(root, minValue, maxValue) {\n      // 若是空树，则合法\n      if(!root) {\n          return true\n      }\n      // 若右孩子不大于根结点值，或者左孩子不小于根结点值，则不合法\n      if(root.val <= minValue || root.val >= maxValue) return false\n      // 左右子树必须都符合二叉搜索树的数据域大小关系\n      return dfs(root.left, minValue,root.val) && dfs(root.right, root.val, maxValue)\n  }\n  // 初始化最小值和最大值为极小或极大\n  return dfs(root, -Infinity, Infinity)\n};\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"编码复盘-1",children:["编码复盘",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码复盘-1",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["这个题的编码实现比较有意思，对 ",(0,s.jsx)(e.code,{children:"minValue"})," 和 ",(0,s.jsx)(e.code,{children:"maxValue"})," 的处理值得我们反刍一下："]}),"\n",(0,s.jsx)(e.p,{children:"递归过程中，起到决定性作用的是这两个判定条件："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"左孩子的值是否小于根结点值"}),"\n",(0,s.jsx)(e.li,{children:"右孩子的值是否大于根结点值"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["在递归式中，如果单独维护一段逻辑，用于判定当前是左孩子还是右孩子，进而决定是进行大于判定还是小于判定，也是没问题的。但是在上面的编码中我们采取了一种更简洁的手法，通过设置 ",(0,s.jsx)(e.code,{children:"minValue"})," 和 ",(0,s.jsx)(e.code,{children:"maxValue"})," 为极小和极大值，来确保 ",(0,s.jsx)(e.code,{children:"root.val <= minValue || root.val >= maxValue"})," 这两个条件中有一个是一定为 ",(0,s.jsx)(e.code,{children:"false"})," 的。"]}),"\n",(0,s.jsxs)(e.p,{children:["比如当前我需要检查的是",(0,s.jsx)(e.code,{children:"root"})," 的左孩子，那么就会进入 ",(0,s.jsx)(e.code,{children:"dfs(root.left, minValue,root.val)"})," 这段逻辑。这个",(0,s.jsx)(e.code,{children:"dfs"}),"调用将最大值更新为了",(0,s.jsx)(e.code,{children:"root"}),"根结点的值，将当前",(0,s.jsx)(e.code,{children:"root"}),"结点更新为了左孩子结点，同时保持最小值为 ",(0,s.jsx)(e.code,{children:"-Infinity"})," 不变。进入 ",(0,s.jsx)(e.code,{children:"dfs"}),"逻辑后，",(0,s.jsx)(e.code,{children:"root.val <= minValue || root.val >= maxValue"})," 中的 ",(0,s.jsx)(e.code,{children:"root.val <= minValue"})," 一定为 ",(0,s.jsx)(e.code,{children:"false"})," ，起决定性作用的条件实际是 ",(0,s.jsx)(e.code,{children:"root.val >= maxValue"}),"（这里这个 ",(0,s.jsx)(e.code,{children:"maxValue"})," 正是根结点的数据域值)。若",(0,s.jsx)(e.code,{children:"root.val >= maxValue"}),"返回 ",(0,s.jsx)(e.code,{children:"true"}),"，就意味着左孩子的值大于等于（也就是不小于）根结点的数据域值，这显然是不合法的。此时整个或语句都会返回",(0,s.jsx)(e.code,{children:"true"}),"，递归式返回",(0,s.jsx)(e.code,{children:"false"}),"，二叉搜索树进而会被判定为不合法。"]}),"\n",(0,s.jsxs)(e.h3,{id:"对特性的考察将排序数组转化为二叉搜索树",children:["对特性的考察：将排序数组转化为二叉搜索树",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#对特性的考察将排序数组转化为二叉搜索树",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["题目描述：将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。",(0,s.jsx)(e.br,{}),"\n","本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["示例:\n给定有序数组: [-10,-3,0,5,9],",(0,s.jsx)(e.br,{}),"\n","一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树："]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"      0\n     / \\\n   -3   9\n   /   /\n -10  5\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"思路分析-1",children:["思路分析",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#思路分析-1",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"这道题出现在这个位置真是太棒了（陶醉脸），它不仅是一道典型的二叉搜索树应用题，还涉及到了平衡二叉树的基本知识，对下一个专题的学习起到了很好的铺垫作用。"}),"\n",(0,s.jsx)(e.p,{children:"做这个题，大家可以先观察一下它的输入和输出，你会发现它们之间有着很微妙的关系。先看输入："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[-10,-3,0,5,9]\n"})}),"\n",(0,s.jsx)(e.p,{children:"再看输出："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"      0\n     / \\\n   -3   9\n   /   /\n -10  5\n"})}),"\n",(0,s.jsxs)(e.p,{children:["这个二叉树从形状上来看，像不像是把数组从 ",(0,s.jsx)(e.code,{children:"0"})," 这个中间位置给“提起来”了？",(0,s.jsx)(e.br,{}),"\n","别笑，我们接下来要做的事情，还真就是要想办法把这个数组给“提”成二叉树。"]}),"\n",(0,s.jsx)(e.p,{children:"在想办法之前，我们先来反思一下为什么可以通过“提起来”来实现数组到目标二叉树的转换，这里面蕴含了两个依据："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["二叉搜索树的特性：题目中指明了目标树是一棵二叉搜索树，二叉搜索树的中序遍历序列是有序的，题中所给的数组也是有序的，",(0,s.jsx)(e.strong,{children:"因此我们可以认为题目中给出的数组就是目标二叉树的中序遍历序列"}),"。中序遍历序列的顺序规则是 ",(0,s.jsx)(e.code,{children:"左 -> 根 -> 右"}),"，因此数组中间位置的元素一定对应着目标二叉树的根结点。以根结点为抓手，把这个数组“拎”起来，得到的二叉树一定是符合二叉搜索树的排序规则的。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"平衡二叉树的特性：虽然咱们还没有讲啥是平衡二叉树，但是题目中已经妥妥地给出了一个平衡二叉树的定义："}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"要做到这一点，只需要把“提起来”这个动作贯彻到底就行了：当我们以有序数组的中间元素为根结点，“提”出一个二叉树时，有两种可能的情况："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"数组中元素为奇数个，此时以数组的中间元素为界，两侧元素个数相同："}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[-10,-3,0,5,9]\n"})}),"\n",(0,s.jsx)(e.p,{children:"如果我们以中间元素为根结点，把数组“提”成二叉树，那么根结点左右两侧的元素个数是一样的，所以站在根结点来看，左右子树的高度差为0："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"      0\n     / \\\n   -3   9\n   /   /\n -10  5\n"})}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsx)(e.li,{children:"数组中元素为偶数个，此时无论是选择中间靠左的元素为界、还是选择中间靠右的元素为界，两侧元素个数差值的绝对值都是1："}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[-10,-3,0,5]\n"})}),"\n",(0,s.jsx)(e.p,{children:"在这个例子里，若以 -3 为根结点，那么左右子树的高度差的绝对值就是1："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"      -3\n     / \\\n   -10   0\n          \\\n           5\n"})}),"\n",(0,s.jsx)(e.p,{children:"以 0 为根结点亦然。"}),"\n",(0,s.jsx)(e.p,{children:"通过对以上情况进行探讨，我们发现“以中间元素为根结点，将数组提成树”这种操作，可以保证根结点左右两侧的子树高度绝对值不大于1。要想保证每一棵子树都满足这个条件，我们只需要对有序数组的每一个对半分出来的子序列都递归地执行这个操作即可。"}),"\n",(0,s.jsxs)(e.h4,{id:"编码实现-4",children:["编码实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码实现-4",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nconst sortedArrayToBST = function(nums) {\n    // 处理边界条件\n    if(!nums.length) {\n        return null\n    }\n    \n    // root 结点是递归“提”起数组的结果\n    const root = buildBST(0, nums.length-1)\n\n    // 定义二叉树构建函数，入参是子序列的索引范围\n    function buildBST(low, high) {\n        // 当 low > high 时，意味着当前范围的数字已经被递归处理完全了\n        if(low > high) {\n            return null\n        }\n        // 二分一下，取出当前子序列的中间元素\n        const mid = Math.floor(low + (high - low)/2)  \n        // 将中间元素的值作为当前子树的根结点值\n        const cur = new TreeNode(nums[mid]) \n        // 递归构建左子树，范围二分为[low,mid)\n        cur.left = buildBST(low,mid-1)\n        // 递归构建左子树，范围二分为为(mid,high]\n        cur.right = buildBST(mid+1, high)\n        // 返回当前结点\n        return cur\n    }\n    // 返回根结点\n    return root\n};\n"})}),"\n",(0,s.jsx)(e.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}let h=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%A2%E8%AF%95%EF%BC%9A%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%A4%A7%E5%8E%82%E7%9C%9F%E9%A2%98%E8%AE%AD%E7%BB%83%2F17.%E7%89%B9%E6%AE%8A%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%93%E9%A2%98.md"]={toc:[{text:"什么是二叉搜索树",id:"什么是二叉搜索树",depth:2},{text:"二叉搜索树：编码基本功",id:"二叉搜索树编码基本功",depth:2},{text:"查找数据域为某一特定值的结点",id:"查找数据域为某一特定值的结点",depth:3},{text:"编码实现",id:"编码实现",depth:4},{text:"插入新结点",id:"插入新结点",depth:3},{text:"编码实现",id:"编码实现-1",depth:4},{text:"删除指定结点",id:"删除指定结点",depth:3},{text:"编码实现",id:"编码实现-2",depth:4},{text:"编码复盘",id:"编码复盘",depth:4},{text:"二叉搜索树的特性",id:"二叉搜索树的特性",depth:2},{text:"真题实战环节",id:"真题实战环节",depth:2},{text:"对定义的考察：二叉搜索树的验证",id:"对定义的考察二叉搜索树的验证",depth:3},{text:"思路分析",id:"思路分析",depth:4},{text:"编码实现",id:"编码实现-3",depth:4},{text:"编码复盘",id:"编码复盘-1",depth:4},{text:"对特性的考察：将排序数组转化为二叉搜索树",id:"对特性的考察将排序数组转化为二叉搜索树",depth:3},{text:"思路分析",id:"思路分析-1",depth:4},{text:"编码实现",id:"编码实现-4",depth:4}],title:"17.特殊的二叉树——二叉搜索树专题",headingTitle:"17.特殊的二叉树——二叉搜索树专题",frontmatter:{}}}}]);