"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["63076"],{817004:function(e,n,d){d.r(n),d.d(n,{default:()=>w});var o=d(552676),l=d(740453);let t=d.p+"static/image/8e5fbfaed5dd17516d83d1ac5d070ad1.04f23c0d.webp",r=d.p+"static/image/31948949021e53b93607861edf4351ce.64b5f9f6.webp",c=d.p+"static/image/71d5d971b4a49032c5321b557a322061.30785f32.webp",s=d.p+"static/image/d4917e7bf64dda114bbae42ec8177a6b.ecefcc37.webp",a=d.p+"static/image/d0c7f320bb3d69e33be4234dc9f60a97.ea22bb17.webp",i=d.p+"static/image/251e26da21316dadb50f1b90a66053ef.eafa9d5a.webp",h=d.p+"static/image/29623c1293db3cb79f039228e3febce6.96689ad3.webp",x=d.p+"static/image/cf9a79d628560ed1edac56e41b1fb62c.9aed41a5.webp",j=d.p+"static/image/a774934a59600a9e149dc0b89e06c59a.03efd085.webp",p=d.p+"static/image/3667a909da03747b94f971853460e918.de0aa1cd.webp",V=d.p+"static/image/6fe366b4395c39b65a048323c4a1e530.4bafa5d5.webp",m=d.p+"static/image/56fd1068c9c74a099f8f935a6757dab6.c6622901.webp";function E(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",img:"img",strong:"strong",ul:"ul",li:"li"},(0,l.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"6数据状态更新时的差异-diff-及-patch-机制",children:["6.数据状态更新时的差异 diff 及 patch 机制",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6数据状态更新时的差异-diff-及-patch-机制",children:"#"})]}),"\n",(0,o.jsxs)(n.h2,{id:"数据更新视图",children:["数据更新视图",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据更新视图",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["之前讲到，在对 ",(0,o.jsx)(n.code,{children:"model"})," 进行操作对时候，会触发对应 ",(0,o.jsx)(n.code,{children:"Dep"})," 中的 ",(0,o.jsx)(n.code,{children:"Watcher"})," 对象。",(0,o.jsx)(n.code,{children:"Watcher"})," 对象会调用对应的 ",(0,o.jsx)(n.code,{children:"update"})," 来修改视图。最终是将新产生的 VNode 节点与老 VNode 进行一个 ",(0,o.jsx)(n.code,{children:"patch"})," 的过程，比对得出「差异」，最终将这些「差异」更新到视图上。"]}),"\n",(0,o.jsxs)(n.p,{children:["这一章就来介绍一下这个 ",(0,o.jsx)(n.code,{children:"patch"})," 的过程，因为 ",(0,o.jsx)(n.code,{children:"patch"})," 过程本身比较复杂，这一章的内容会比较多，但是不要害怕，我们逐块代码去看，一定可以理解。"]}),"\n",(0,o.jsxs)(n.h2,{id:"跨平台",children:["跨平台",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#跨平台",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"因为使用了 Virtual DOM 的原因，Vue.js具有了跨平台的能力，Virtual DOM 终归只是一些 JavaScript 对象罢了，那么最终是如何调用不同平台的 API 的呢？"}),"\n",(0,o.jsx)(n.p,{children:"这就需要依赖一层适配层了，将不同平台的 API 封装在内，以同样的接口对外提供。"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const nodeOps = {\n    setTextContent (text) {\n        if (platform === 'weex') {\n            node.parentNode.setAttr('value', text);\n        } else if (platform === 'web') {\n            node.textContent = text;\n        }\n    },\n    parentNode () {\n        //......\n    },\n    removeChild () {\n        //......\n    },\n    nextSibling () {\n        //......\n    },\n    insertBefore () {\n        //......\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["举个例子，现在我们有上述一个 ",(0,o.jsx)(n.code,{children:"nodeOps"})," 对象做适配，根据 platform 区分不同平台来执行当前平台对应的API，而对外则是提供了一致的接口，供 Virtual DOM 来调用。"]}),"\n",(0,o.jsxs)(n.h2,{id:"一些api",children:["一些API",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一些api",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["接下来我们来介绍其他的一些 API，这些API在下面 ",(0,o.jsx)(n.code,{children:"patch"})," 的过程中会被用到，他们最终都会调用 ",(0,o.jsx)(n.code,{children:"nodeOps"})," 中的相应函数来操作平台。"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"insert"})," 用来在 ",(0,o.jsx)(n.code,{children:"parent"})," 这个父节点下插入一个子节点，如果指定了 ",(0,o.jsx)(n.code,{children:"ref"})," 则插入到 ",(0,o.jsx)(n.code,{children:"ref"})," 这个子节点前面。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function insert (parent, elm, ref) {\n    if (parent) {\n        if (ref) {\n            if (ref.parentNode === parent) {\n                nodeOps.insertBefore(parent, elm, ref);\n            }\n        } else {\n            nodeOps.appendChild(parent, elm)\n        }\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"createElm"})," 用来新建一个节点， ",(0,o.jsx)(n.code,{children:"tag"})," 存在创建一个标签节点，否则创建一个文本节点。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"\nfunction createElm (vnode, parentElm, refElm) {\n    if (vnode.tag) {\n        insert(parentElm, nodeOps.createElement(vnode.tag), refElm);\n    } else {\n        insert(parentElm, nodeOps.createTextNode(vnode.text), refElm);\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"addVnodes"})," 用来批量调用 ",(0,o.jsx)(n.code,{children:"createElm"})," 新建节点。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n        createElm(vnodes[startIdx], parentElm, refElm);\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"removeNode"})," 用来移除一个节点。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function removeNode (el) {\n    const parent = nodeOps.parentNode(el);\n    if (parent) {\n        nodeOps.removeChild(parent, el);\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"removeVnodes"})," 会批量调用 ",(0,o.jsx)(n.code,{children:"removeNode"})," 移除节点。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx]\n        if (ch) {\n            removeNode(ch.elm);\n        }\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"patch",children:["patch",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#patch",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["首先说一下 ",(0,o.jsx)(n.code,{children:"patch"})," 的核心 diff 算法，我们用 diff 算法可以比对出两颗树的「差异」，我们来看一下，假设我们现在有如下两颗树，它们分别是新老 VNode 节点，这时候到了 ",(0,o.jsx)(n.code,{children:"patch"})," 的过程，我们需要将他们进行比对。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:m,alt:""})}),"\n",(0,o.jsx)(n.p,{children:"diff 算法是通过同层的树节点进行比较而非对树进行逐层搜索遍历的方式，所以时间复杂度只有 O(n)，是一种相当高效的算法，如下图。"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)("img",{src:V,alt:""}),"。"]}),"\n",(0,o.jsxs)(n.p,{children:["这张图中的相同颜色的方块中的节点会进行比对，比对得到「",(0,o.jsx)(n.strong,{children:"差异"}),"」后将这些「",(0,o.jsx)(n.strong,{children:"差异"}),"」更新到视图上。因为只进行同层级的比对，所以十分高效。"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"patch"})," 的过程相当复杂，我们先用简单的代码来看一下。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function patch (oldVnode, vnode, parentElm) {\n    if (!oldVnode) {\n        addVnodes(parentElm, null, vnode, 0, vnode.length - 1);\n    } else if (!vnode) {\n        removeVnodes(parentElm, oldVnode, 0, oldVnode.length - 1);\n    } else {\n        if (sameVnode(oldVNode, vnode)) {\n            patchVnode(oldVNode, vnode);\n        } else {\n            removeVnodes(parentElm, oldVnode, 0, oldVnode.length - 1);\n            addVnodes(parentElm, null, vnode, 0, vnode.length - 1);\n        }\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["因为 ",(0,o.jsx)(n.code,{children:"patch"})," 的主要功能是比对两个 VNode 节点，将「差异」更新到视图上，所以入参有新老两个 VNode 以及父节点的 element 。我们来逐步捋一下逻辑， ",(0,o.jsx)(n.code,{children:"addVnodes"})," 、 ",(0,o.jsx)(n.code,{children:"removeVnodes"})," 等函数后面会讲。"]}),"\n",(0,o.jsxs)(n.p,{children:["首先在 ",(0,o.jsx)(n.code,{children:"oldVnode"}),"（老 VNode 节点）不存在的时候，相当于新的 VNode 替代原本没有的节点，所以直接用 ",(0,o.jsx)(n.code,{children:"addVnodes"})," 将这些节点批量添加到 ",(0,o.jsx)(n.code,{children:"parentElm"})," 上。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"if (!oldVnode) {\n    addVnodes(parentElm, null, vnode, 0, vnode.length - 1);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["然后同理，在 ",(0,o.jsx)(n.code,{children:"vnode"}),"（新 VNode 节点）不存在的时候，相当于要把老的节点删除，所以直接使用 ",(0,o.jsx)(n.code,{children:"removeVnodes"})," 进行批量的节点删除即可。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"else if (!vnode) {\n    removeVnodes(parentElm, oldVnode, 0, oldVnode.length - 1);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["最后一种情况，当 ",(0,o.jsx)(n.code,{children:"oldVNode"})," 与 ",(0,o.jsx)(n.code,{children:"vnode"})," 都存在的时候，需要判断它们是否属于 ",(0,o.jsx)(n.code,{children:"sameVnode"}),"（相同的节点）。如果是则进行patchVnode（比对 VNode ）操作，否则删除老节点，增加新节点。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"if (sameVnode(oldVNode, vnode)) {\n    patchVnode(oldVNode, vnode);\n} else {\n    removeVnodes(parentElm, oldVnode, 0, oldVnode.length - 1);\n    addVnodes(parentElm, null, vnode, 0, vnode.length - 1);\n}\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"samevnode",children:["sameVnode",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#samevnode",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["上面这些比较好理解，下面我们来看看什么情况下两个 VNode 会属于 ",(0,o.jsx)(n.code,{children:"sameVnode"})," （相同的节点）呢？"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function sameVnode () {\n    return (\n        a.key === b.key &&\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        (!!a.data) === (!!b.data) &&\n        sameInputType(a, b)\n    )\n}\n\nfunction sameInputType (a, b) {\n    if (a.tag !== 'input') return true\n    let i\n    const typeA = (i = a.data) && (i = i.attrs) && i.type\n    const typeB = (i = b.data) && (i = i.attrs) && i.type\n    return typeA === typeB\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"sameVnode"})," 其实很简单，只有当 ",(0,o.jsx)(n.code,{children:"key"}),"、 ",(0,o.jsx)(n.code,{children:"tag"}),"、 ",(0,o.jsx)(n.code,{children:"isComment"}),"（是否为注释节点）、 ",(0,o.jsx)(n.code,{children:"data"}),"同时定义（或不定义），同时满足当标签类型为 input 的时候 type 相同（某些浏览器不支持动态修改<input>类型，所以他们被视为不同类型）即可。"]}),"\n",(0,o.jsxs)(n.h2,{id:"patchvnode",children:["patchVnode",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#patchvnode",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["之前patch的过程还剩下 ",(0,o.jsx)(n.code,{children:"patchVnode"})," 这个函数没有讲，这也是最复杂的一个，我们现在来看一下。因为这个函数是在符合 ",(0,o.jsx)(n.code,{children:"sameVnode"})," 的条件下触发的，所以会进行「",(0,o.jsx)(n.strong,{children:"比对"}),"」。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function patchVnode (oldVnode, vnode) {\n    if (oldVnode === vnode) {\n        return;\n    }\n\n    if (vnode.isStatic && oldVnode.isStatic && vnode.key === oldVnode.key) {\n        vnode.elm = oldVnode.elm;\n        vnode.componentInstance = oldVnode.componentInstance;\n        return;\n    }\n\n    const elm = vnode.elm = oldVnode.elm;\n    const oldCh = oldVnode.children;\n    const ch = vnode.children;\n\n    if (vnode.text) {\n        nodeOps.setTextContent(elm, vnode.text);\n    } else {\n        if (oldCh && ch && (oldCh !== ch)) {\n            updateChildren(elm, oldCh, ch);\n        } else if (ch) {\n            if (oldVnode.text) nodeOps.setTextContent(elm, '');\n            addVnodes(elm, null, ch, 0, ch.length - 1);\n        } else if (oldCh) {\n            removeVnodes(elm, oldCh, 0, oldCh.length - 1)\n        } else if (oldVnode.text) {\n            nodeOps.setTextContent(elm, '')\n        }\n    }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"首先在新老 VNode 节点相同的情况下，就不需要做任何改变了，直接 return 掉。"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"if (oldVnode === vnode) {\n    return;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["下面的这种情况也比较简单，在当新老 VNode 节点都是 ",(0,o.jsx)(n.code,{children:"isStatic"}),"（静态的），并且 ",(0,o.jsx)(n.code,{children:"key"})," 相同时，只要将 ",(0,o.jsx)(n.code,{children:"componentInstance"})," 与 ",(0,o.jsx)(n.code,{children:"elm"})," 从老 VNode 节点“拿过来”即可。这里的 ",(0,o.jsx)(n.code,{children:"isStatic"})," 也就是前面提到过的「编译」的时候会将静态节点标记出来，这样就可以跳过比对的过程。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"if (vnode.isStatic && oldVnode.isStatic && vnode.key === oldVnode.key) {\n    vnode.elm = oldVnode.elm;\n    vnode.componentInstance = oldVnode.componentInstance;\n    return;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["接下来，当新 VNode 节点是文本节点的时候，直接用 ",(0,o.jsx)(n.code,{children:"setTextContent"})," 来设置 text，这里的 ",(0,o.jsx)(n.code,{children:"nodeOps"})," 是一个适配层，根据不同平台提供不同的操作平台 DOM 的方法，实现跨平台。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"if (vnode.text) {\n    nodeOps.setTextContent(elm, vnode.text);\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"当新 VNode 节点是非文本节点当时候，需要分几种情况。"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"oldCh"})," 与 ",(0,o.jsx)(n.code,{children:"ch"})," 都存在且不相同时，使用 ",(0,o.jsx)(n.code,{children:"updateChildren"})," 函数来更新子节点，这个后面重点讲。"]}),"\n",(0,o.jsxs)(n.li,{children:["如果只有 ",(0,o.jsx)(n.code,{children:"ch"})," 存在的时候，如果老节点是文本节点则先将节点的文本清除，然后将 ",(0,o.jsx)(n.code,{children:"ch"})," 批量插入插入到节点elm下。"]}),"\n",(0,o.jsxs)(n.li,{children:["同理当只有 ",(0,o.jsx)(n.code,{children:"oldch"})," 存在时，说明需要将老节点通过 ",(0,o.jsx)(n.code,{children:"removeVnodes"})," 全部清除。"]}),"\n",(0,o.jsx)(n.li,{children:"最后一种情况是当只有老节点是文本节点的时候，清除其节点文本内容。"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"if (oldCh && ch && (oldCh !== ch)) {\n    updateChildren(elm, oldCh, ch);\n} else if (ch) {\n    if (oldVnode.text) nodeOps.setTextContent(elm, '');\n    addVnodes(elm, null, ch, 0, ch.length - 1);\n} else if (oldCh) {\n    removeVnodes(elm, oldCh, 0, oldCh.length - 1)\n} else if (oldVnode.text) {\n    nodeOps.setTextContent(elm, '')\n}\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"updatechildren",children:["updateChildren",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#updatechildren",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["接下来就要讲一下 ",(0,o.jsx)(n.code,{children:"updateChildren"})," 函数了。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function updateChildren (parentElm, oldCh, newCh) {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (!oldStartVnode) {\n            oldStartVnode = oldCh[++oldStartIdx];\n        } else if (!oldEndVnode) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        } else if (sameVnode(oldStartVnode, newStartVnode)) {\n            patchVnode(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        } else if (sameVnode(oldEndVnode, newEndVnode)) {\n            patchVnode(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        } else if (sameVnode(oldStartVnode, newEndVnode)) {\n            patchVnode(oldStartVnode, newEndVnode);\n            nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        } else if (sameVnode(oldEndVnode, newStartVnode)) {\n            patchVnode(oldEndVnode, newStartVnode);\n            nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        } else {\n            let elmToMove = oldCh[idxInOld];\n            if (!oldKeyToIdx) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            idxInOld = newStartVnode.key ? oldKeyToIdx[newStartVnode.key] : null;\n            if (!idxInOld) {\n                createElm(newStartVnode, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            } else {\n                elmToMove = oldCh[idxInOld];\n                if (sameVnode(elmToMove, newStartVnode)) {\n                    patchVnode(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n                    newStartVnode = newCh[++newStartIdx];\n                } else {\n                    createElm(newStartVnode, parentElm);\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n        }\n    }\n\n    if (oldStartIdx > oldEndIdx) {\n        refElm = (newCh[newEndIdx + 1]) ? newCh[newEndIdx + 1].elm : null;\n        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx);\n    } else if (newStartIdx > newEndIdx) {\n        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"看到代码那么多先不要着急，我们还是一点一点地讲解。"}),"\n",(0,o.jsxs)(n.p,{children:["首先我们定义 ",(0,o.jsx)(n.code,{children:"oldStartIdx"}),"、",(0,o.jsx)(n.code,{children:"newStartIdx"}),"、",(0,o.jsx)(n.code,{children:"oldEndIdx"})," 以及 ",(0,o.jsx)(n.code,{children:"newEndIdx"})," 分别是新老两个 VNode 的两边的索引，同时 ",(0,o.jsx)(n.code,{children:"oldStartVnode"}),"、",(0,o.jsx)(n.code,{children:"newStartVnode"}),"、",(0,o.jsx)(n.code,{children:"oldEndVnode"})," 以及 ",(0,o.jsx)(n.code,{children:"newEndVnode"})," 分别指向这几个索引对应的 VNode 节点。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:p,alt:""})}),"\n",(0,o.jsxs)(n.p,{children:["接下来是一个 ",(0,o.jsx)(n.code,{children:"while"})," 循环，在这过程中，",(0,o.jsx)(n.code,{children:"oldStartIdx"}),"、",(0,o.jsx)(n.code,{children:"newStartIdx"}),"、",(0,o.jsx)(n.code,{children:"oldEndIdx"})," 以及 ",(0,o.jsx)(n.code,{children:"newEndIdx"})," 会逐渐向中间靠拢。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) \n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:j,alt:""})}),"\n",(0,o.jsxs)(n.p,{children:["首先当 ",(0,o.jsx)(n.code,{children:"oldStartVnode"})," 或者 ",(0,o.jsx)(n.code,{children:"oldEndVnode"})," 不存在的时候，",(0,o.jsx)(n.code,{children:"oldStartIdx"})," 与 ",(0,o.jsx)(n.code,{children:"oldEndIdx"})," 继续向中间靠拢，并更新对应的 ",(0,o.jsx)(n.code,{children:"oldStartVnode"})," 与 ",(0,o.jsx)(n.code,{children:"oldEndVnode"})," 的指向（注：下面讲到的 ",(0,o.jsx)(n.code,{children:"oldStartIdx"}),"、",(0,o.jsx)(n.code,{children:"newStartIdx"}),"、",(0,o.jsx)(n.code,{children:"oldEndIdx"})," 以及 ",(0,o.jsx)(n.code,{children:"newEndIdx"})," 移动都会伴随着 ",(0,o.jsx)(n.code,{children:"oldStartVnode"}),"、",(0,o.jsx)(n.code,{children:"newStartVnode"}),"、",(0,o.jsx)(n.code,{children:"oldEndVnode"})," 以及 ",(0,o.jsx)(n.code,{children:"newEndVnode"})," 的指向的变化，之后的部分只会讲 ",(0,o.jsx)(n.code,{children:"Idx"})," 的移动）。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"if (!oldStartVnode) {\n    oldStartVnode = oldCh[++oldStartIdx];\n} else if (!oldEndVnode) {\n    oldEndVnode = oldCh[--oldEndIdx];\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["接下来这一块，是将 ",(0,o.jsx)(n.code,{children:"oldStartIdx"}),"、",(0,o.jsx)(n.code,{children:"newStartIdx"}),"、",(0,o.jsx)(n.code,{children:"oldEndIdx"})," 以及 ",(0,o.jsx)(n.code,{children:"newEndIdx"})," 两两比对的过程，一共会出现 2*2=4 种情况。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:" else if (sameVnode(oldStartVnode, newStartVnode)) {\n    patchVnode(oldStartVnode, newStartVnode);\n    oldStartVnode = oldCh[++oldStartIdx];\n    newStartVnode = newCh[++newStartIdx];\n} else if (sameVnode(oldEndVnode, newEndVnode)) {\n    patchVnode(oldEndVnode, newEndVnode);\n    oldEndVnode = oldCh[--oldEndIdx];\n    newEndVnode = newCh[--newEndIdx];\n} else if (sameVnode(oldStartVnode, newEndVnode)) {\n    patchVnode(oldStartVnode, newEndVnode);\n    nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n    oldStartVnode = oldCh[++oldStartIdx];\n    newEndVnode = newCh[--newEndIdx];\n} else if (sameVnode(oldEndVnode, newStartVnode)) {\n    patchVnode(oldEndVnode, newStartVnode);\n    nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n    oldEndVnode = oldCh[--oldEndIdx];\n    newStartVnode = newCh[++newStartIdx];\n} \n"})}),"\n",(0,o.jsxs)(n.p,{children:["首先是 ",(0,o.jsx)(n.code,{children:"oldStartVnode"})," 与 ",(0,o.jsx)(n.code,{children:"newStartVnode"})," 符合 ",(0,o.jsx)(n.code,{children:"sameVnode"})," 时，说明老 VNode 节点的头部与新 VNode 节点的头部是相同的 VNode 节点，直接进行 ",(0,o.jsx)(n.code,{children:"patchVnode"}),"，同时 ",(0,o.jsx)(n.code,{children:"oldStartIdx"})," 与 ",(0,o.jsx)(n.code,{children:"newStartIdx"})," 向后移动一位。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:x,alt:""})}),"\n",(0,o.jsxs)(n.p,{children:["其次是 ",(0,o.jsx)(n.code,{children:"oldEndVnode"})," 与 ",(0,o.jsx)(n.code,{children:"newEndVnode"})," 符合 ",(0,o.jsx)(n.code,{children:"sameVnode"}),"，也就是两个 VNode 的结尾是相同的 VNode，同样进行 ",(0,o.jsx)(n.code,{children:"patchVnode"})," 操作并将 ",(0,o.jsx)(n.code,{children:"oldEndVnode"})," 与 ",(0,o.jsx)(n.code,{children:"newEndVnode"})," 向前移动一位。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:h,alt:""})}),"\n",(0,o.jsx)(n.p,{children:"接下来是两种交叉的情况。"}),"\n",(0,o.jsxs)(n.p,{children:["先是 ",(0,o.jsx)(n.code,{children:"oldStartVnode"})," 与 ",(0,o.jsx)(n.code,{children:"newEndVnode"})," 符合 ",(0,o.jsx)(n.code,{children:"sameVnode"})," 的时候，也就是老 VNode 节点的头部与新 VNode 节点的尾部是同一节点的时候，将 ",(0,o.jsx)(n.code,{children:"oldStartVnode.elm"})," 这个节点直接移动到 ",(0,o.jsx)(n.code,{children:"oldEndVnode.elm"})," 这个节点的后面即可。然后 ",(0,o.jsx)(n.code,{children:"oldStartIdx"})," 向后移动一位，",(0,o.jsx)(n.code,{children:"newEndIdx"})," 向前移动一位。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:i,alt:""})}),"\n",(0,o.jsxs)(n.p,{children:["同理，",(0,o.jsx)(n.code,{children:"oldEndVnode"})," 与 ",(0,o.jsx)(n.code,{children:"newStartVnode"})," 符合 ",(0,o.jsx)(n.code,{children:"sameVnode"})," 时，也就是老 VNode 节点的尾部与新 VNode 节点的头部是同一节点的时候，将 ",(0,o.jsx)(n.code,{children:"oldEndVnode.elm"})," 插入到 ",(0,o.jsx)(n.code,{children:"oldStartVnode.elm"})," 前面。同样的，",(0,o.jsx)(n.code,{children:"oldEndIdx"})," 向前移动一位，",(0,o.jsx)(n.code,{children:"newStartIdx"})," 向后移动一位。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:a,alt:""})}),"\n",(0,o.jsx)(n.p,{children:"最后是当以上情况都不符合的时候，这种情况怎么处理呢？"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"else {\n    let elmToMove = oldCh[idxInOld];\n    if (!oldKeyToIdx) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n    idxInOld = newStartVnode.key ? oldKeyToIdx[newStartVnode.key] : null;\n    if (!idxInOld) {\n        createElm(newStartVnode, parentElm);\n        newStartVnode = newCh[++newStartIdx];\n    } else {\n        elmToMove = oldCh[idxInOld];\n        if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode);\n            oldCh[idxInOld] = undefined;\n            nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n        } else {\n            createElm(newStartVnode, parentElm);\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n    let i, key\n    const map = {}\n    for (i = beginIdx; i <= endIdx; ++i) {\n        key = children[i].key\n        if (isDef(key)) map[key] = i\n    }\n    return map\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"createKeyToOldIdx"})," 的作用是产生 ",(0,o.jsx)(n.code,{children:"key"})," 与 ",(0,o.jsx)(n.code,{children:"index"})," 索引对应的一个 map 表。比如说："]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:"[\n    {xx: xx, key: 'key0'},\n    {xx: xx, key: 'key1'}, \n    {xx: xx, key: 'key2'}\n]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["在经过 ",(0,o.jsx)(n.code,{children:"createKeyToOldIdx"})," 转化以后会变成："]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:"{\n    key0: 0, \n    key1: 1, \n    key2: 2\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["我们可以根据某一个 key 的值，快速地从 ",(0,o.jsx)(n.code,{children:"oldKeyToIdx"}),"（",(0,o.jsx)(n.code,{children:"createKeyToOldIdx"})," 的返回值）中获取相同 key 的节点的索引 ",(0,o.jsx)(n.code,{children:"idxInOld"}),"，然后找到相同的节点。"]}),"\n",(0,o.jsxs)(n.p,{children:["如果没有找到相同的节点，则通过 ",(0,o.jsx)(n.code,{children:"createElm"})," 创建一个新节点，并将 ",(0,o.jsx)(n.code,{children:"newStartIdx"})," 向后移动一位。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"if (!idxInOld) {\n    createElm(newStartVnode, parentElm);\n    newStartVnode = newCh[++newStartIdx];\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["否则如果找到了节点，同时它符合 ",(0,o.jsx)(n.code,{children:"sameVnode"}),"，则将这两个节点进行 ",(0,o.jsx)(n.code,{children:"patchVnode"}),"，将该位置的老节点赋值 undefined（之后如果还有新节点与该节点key相同可以检测出来提示已有重复的 key ），同时将 ",(0,o.jsx)(n.code,{children:"newStartVnode.elm"})," 插入到 ",(0,o.jsx)(n.code,{children:"oldStartVnode.elm"})," 的前面。同理，",(0,o.jsx)(n.code,{children:"newStartIdx"})," 往后移动一位。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:s,alt:""})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"else {\n    elmToMove = oldCh[idxInOld];\n    if (sameVnode(elmToMove, newStartVnode)) {\n        patchVnode(elmToMove, newStartVnode);\n        oldCh[idxInOld] = undefined;\n        nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n        newStartVnode = newCh[++newStartIdx];\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["如果不符合 ",(0,o.jsx)(n.code,{children:"sameVnode"}),"，只能创建一个新节点插入到 ",(0,o.jsx)(n.code,{children:"parentElm"})," 的子节点中，",(0,o.jsx)(n.code,{children:"newStartIdx"})," 往后移动一位。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:c,alt:""})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"else {\n    createElm(newStartVnode, parentElm);\n    newStartVnode = newCh[++newStartIdx];\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["最后一步就很容易啦，当 ",(0,o.jsx)(n.code,{children:"while"})," 循环结束以后，如果 ",(0,o.jsx)(n.code,{children:"oldStartIdx > oldEndIdx"}),"，说明老节点比对完了，但是新节点还有多的，需要将新节点插入到真实 DOM 中去，调用 ",(0,o.jsx)(n.code,{children:"addVnodes"})," 将这些节点插入即可。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:r,alt:""})}),"\n",(0,o.jsxs)(n.p,{children:["同理，如果满足 ",(0,o.jsx)(n.code,{children:"newStartIdx > newEndIdx"})," 条件，说明新节点比对完了，老节点还有多，将这些无用的老节点通过 ",(0,o.jsx)(n.code,{children:"removeVnodes"})," 批量删除即可。"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)("img",{src:t,alt:""})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"if (oldStartIdx > oldEndIdx) {\n    refElm = (newCh[newEndIdx + 1]) ? newCh[newEndIdx + 1].elm : null;\n    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx);\n} else if (newStartIdx > newEndIdx) {\n    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"到这里，比对的核心实现已经讲完了，这部分比较复杂，不过仔细地梳理一下比对的过程，相信一定能够理解得更加透彻的。"}),"\n",(0,o.jsxs)(n.p,{children:["注：本节代码参考",(0,o.jsx)(n.a,{href:"https://github.com/answershuto/VueDemo/blob/master/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0%E6%97%B6%E7%9A%84%E5%B7%AE%E5%BC%82%20diff%20%E5%8F%8A%20patch%20%E6%9C%BA%E5%88%B6%E3%80%8B.js",target:"_blank",rel:"noopener noreferrer",children:"《数据状态更新时的差异 diff 及 patch 机制》"}),"。"]})]})}function f(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(E,{...e})}):E(e)}let w=f;f.__RSPRESS_PAGE_META={},f.__RSPRESS_PAGE_META["%E5%89%96%E6%9E%90%20Vue.js%20%E5%86%85%E9%83%A8%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%2F6.%E6%95%B0%E6%8D%AE%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0%E6%97%B6%E7%9A%84%E5%B7%AE%E5%BC%82%20diff%20%E5%8F%8A%20patch%20%E6%9C%BA%E5%88%B6.md"]={toc:[{text:"数据更新视图",id:"数据更新视图",depth:2},{text:"跨平台",id:"跨平台",depth:2},{text:"一些API",id:"一些api",depth:2},{text:"patch",id:"patch",depth:2},{text:"sameVnode",id:"samevnode",depth:2},{text:"patchVnode",id:"patchvnode",depth:2},{text:"updateChildren",id:"updatechildren",depth:2}],title:"6.数据状态更新时的差异 diff 及 patch 机制",headingTitle:"6.数据状态更新时的差异 diff 及 patch 机制",frontmatter:{}}}}]);