"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["3904"],{898106:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var c=r(552676),s=r(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li",h3:"h3",strong:"strong"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"24module-的语法",children:["24.Module 的语法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24module-的语法",children:"#"})]}),"\n",(0,c.jsxs)(n.h2,{id:"概述",children:["概述",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#概述",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的",(0,c.jsx)(n.code,{children:"require"}),"、Python 的",(0,c.jsx)(n.code,{children:"import"}),"，甚至就连 CSS 都有",(0,c.jsx)(n.code,{children:"@import"}),"，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。"]}),"\n",(0,c.jsx)(n.p,{children:"在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。"}),"\n",(0,c.jsx)(n.p,{children:"ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// CommonJS模块\nlet { stat, exists, readfile } = require('fs');\n\n// 等同于\nlet _fs = require('fs');\nlet stat = _fs.stat;\nlet exists = _fs.exists;\nlet readfile = _fs.readfile;\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码的实质是整体加载",(0,c.jsx)(n.code,{children:"fs"}),"模块（即加载",(0,c.jsx)(n.code,{children:"fs"}),"的所有方法），生成一个对象（",(0,c.jsx)(n.code,{children:"_fs"}),"），然后再从这个对象上面读取 3 个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。"]}),"\n",(0,c.jsxs)(n.p,{children:["ES6 模块不是对象，而是通过",(0,c.jsx)(n.code,{children:"export"}),"命令显式指定输出的代码，再通过",(0,c.jsx)(n.code,{children:"import"}),"命令输入。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// ES6模块\nimport { stat, exists, readFile } from 'fs';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码的实质是从",(0,c.jsx)(n.code,{children:"fs"}),"模块加载 3 个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。"]}),"\n",(0,c.jsx)(n.p,{children:"由于 ES6 模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽 JavaScript 的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。"}),"\n",(0,c.jsx)(n.p,{children:"除了静态加载带来的各种好处，ES6 模块还有以下好处。"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["不再需要",(0,c.jsx)(n.code,{children:"UMD"}),"模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。目前，通过各种工具库，其实已经做到了这一点。"]}),"\n",(0,c.jsxs)(n.li,{children:["将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者",(0,c.jsx)(n.code,{children:"navigator"}),"对象的属性。"]}),"\n",(0,c.jsxs)(n.li,{children:["不再需要对象作为命名空间（比如",(0,c.jsx)(n.code,{children:"Math"}),"对象），未来这些功能可以通过模块提供。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"本章介绍 ES6 模块的语法，下一章介绍如何在浏览器和 Node 之中，加载 ES6 模块。"}),"\n",(0,c.jsxs)(n.h2,{id:"严格模式",children:["严格模式",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#严格模式",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["ES6 的模块自动采用严格模式，不管你有没有在模块头部加上",(0,c.jsx)(n.code,{children:'"use strict";'}),"。"]}),"\n",(0,c.jsx)(n.p,{children:"严格模式主要有以下限制。"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"变量必须声明后再使用"}),"\n",(0,c.jsx)(n.li,{children:"函数的参数不能有同名属性，否则报错"}),"\n",(0,c.jsxs)(n.li,{children:["不能使用",(0,c.jsx)(n.code,{children:"with"}),"语句"]}),"\n",(0,c.jsx)(n.li,{children:"不能对只读属性赋值，否则报错"}),"\n",(0,c.jsx)(n.li,{children:"不能使用前缀 0 表示八进制数，否则报错"}),"\n",(0,c.jsx)(n.li,{children:"不能删除不可删除的属性，否则报错"}),"\n",(0,c.jsxs)(n.li,{children:["不能删除变量",(0,c.jsx)(n.code,{children:"delete prop"}),"，会报错，只能删除属性",(0,c.jsx)(n.code,{children:"delete global[prop]"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"eval"}),"不会在它的外层作用域引入变量"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"eval"}),"和",(0,c.jsx)(n.code,{children:"arguments"}),"不能被重新赋值"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"arguments"}),"不会自动反映函数参数的变化"]}),"\n",(0,c.jsxs)(n.li,{children:["不能使用",(0,c.jsx)(n.code,{children:"arguments.callee"})]}),"\n",(0,c.jsxs)(n.li,{children:["不能使用",(0,c.jsx)(n.code,{children:"arguments.caller"})]}),"\n",(0,c.jsxs)(n.li,{children:["禁止",(0,c.jsx)(n.code,{children:"this"}),"指向全局对象"]}),"\n",(0,c.jsxs)(n.li,{children:["不能使用",(0,c.jsx)(n.code,{children:"fn.caller"}),"和",(0,c.jsx)(n.code,{children:"fn.arguments"}),"获取函数调用的堆栈"]}),"\n",(0,c.jsxs)(n.li,{children:["增加了保留字（比如",(0,c.jsx)(n.code,{children:"protected"}),"、",(0,c.jsx)(n.code,{children:"static"}),"和",(0,c.jsx)(n.code,{children:"interface"}),"）"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"上面这些限制，模块都必须遵守。由于严格模式是 ES5 引入的，不属于 ES6，所以请参阅相关 ES5 书籍，本书不再详细介绍了。"}),"\n",(0,c.jsxs)(n.p,{children:["其中，尤其需要注意",(0,c.jsx)(n.code,{children:"this"}),"的限制。ES6 模块之中，顶层的",(0,c.jsx)(n.code,{children:"this"}),"指向",(0,c.jsx)(n.code,{children:"undefined"}),"，即不应该在顶层代码使用",(0,c.jsx)(n.code,{children:"this"}),"。"]}),"\n",(0,c.jsxs)(n.h2,{id:"export-命令",children:["export 命令",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#export-命令",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["模块功能主要由两个命令构成：",(0,c.jsx)(n.code,{children:"export"}),"和",(0,c.jsx)(n.code,{children:"import"}),"。",(0,c.jsx)(n.code,{children:"export"}),"命令用于规定模块的对外接口，",(0,c.jsx)(n.code,{children:"import"}),"命令用于输入其他模块提供的功能。"]}),"\n",(0,c.jsxs)(n.p,{children:["一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用",(0,c.jsx)(n.code,{children:"export"}),"关键字输出该变量。下面是一个 JS 文件，里面使用",(0,c.jsx)(n.code,{children:"export"}),"命令输出变量。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// profile.js\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码是",(0,c.jsx)(n.code,{children:"profile.js"}),"文件，保存了用户信息。ES6 将其视为一个模块，里面用",(0,c.jsx)(n.code,{children:"export"}),"命令对外部输出了三个变量。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"export"}),"的写法，除了像上面这样，还有另外一种。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// profile.js\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { firstName, lastName, year };\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码在",(0,c.jsx)(n.code,{children:"export"}),"命令后面，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在",(0,c.jsx)(n.code,{children:"var"}),"语句前）是等价的，但是应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"export"}),"命令除了输出变量，还可以输出函数或类（class）。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"export function multiply(x, y) {\n  return x * y;\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码对外输出一个函数",(0,c.jsx)(n.code,{children:"multiply"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["通常情况下，",(0,c.jsx)(n.code,{children:"export"}),"输出的变量就是本来的名字，但是可以使用",(0,c.jsx)(n.code,{children:"as"}),"关键字重命名。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"function v1() { ... }\nfunction v2() { ... }\n\nexport {\n  v1 as streamV1,\n  v2 as streamV2,\n  v2 as streamLatestVersion\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码使用",(0,c.jsx)(n.code,{children:"as"}),"关键字，重命名了函数",(0,c.jsx)(n.code,{children:"v1"}),"和",(0,c.jsx)(n.code,{children:"v2"}),"的对外接口。重命名后，",(0,c.jsx)(n.code,{children:"v2"}),"可以用不同的名字输出两次。"]}),"\n",(0,c.jsxs)(n.p,{children:["需要特别注意的是，",(0,c.jsx)(n.code,{children:"export"}),"命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 报错\nexport 1;\n\n// 报错\nvar m = 1;\nexport m;\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量",(0,c.jsx)(n.code,{children:"m"}),"，还是直接输出 1。",(0,c.jsx)(n.code,{children:"1"}),"只是一个值，不是接口。正确的写法是下面这样。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 写法一\nexport var m = 1;\n\n// 写法二\nvar m = 1;\nexport {m};\n\n// 写法三\nvar n = 1;\nexport {n as m};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面三种写法都是正确的，规定了对外的接口",(0,c.jsx)(n.code,{children:"m"}),"。其他脚本可以通过这个接口，取到值",(0,c.jsx)(n.code,{children:"1"}),"。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。"]}),"\n",(0,c.jsxs)(n.p,{children:["同样的，",(0,c.jsx)(n.code,{children:"function"}),"和",(0,c.jsx)(n.code,{children:"class"}),"的输出，也必须遵守这样的写法。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 报错\nfunction f() {}\nexport f;\n\n// 正确\nexport function f() {};\n\n// 正确\nfunction f() {}\nexport {f};\n"})}),"\n",(0,c.jsx)(n.p,{children:"目前，export 命令能够对外输出的就是三种接口：函数（Functions）， 类（Classes），var、let、const 声明的变量（Variables）。"}),"\n",(0,c.jsxs)(n.p,{children:["另外，",(0,c.jsx)(n.code,{children:"export"}),"语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"export var foo = 'bar';\nsetTimeout(() => foo = 'baz', 500);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码输出变量",(0,c.jsx)(n.code,{children:"foo"}),"，值为",(0,c.jsx)(n.code,{children:"bar"}),"，500 毫秒之后变成",(0,c.jsx)(n.code,{children:"baz"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:"这一点与 CommonJS 规范完全不同。CommonJS 模块输出的是值的缓存，不存在动态更新，详见下文《Module 的加载实现》一节。"}),"\n",(0,c.jsxs)(n.p,{children:["最后，",(0,c.jsx)(n.code,{children:"export"}),"命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的",(0,c.jsx)(n.code,{children:"import"}),"命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"function foo() {\n  export default 'bar' // SyntaxError\n}\nfoo()\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"export"}),"语句放在函数之中，结果报错。"]}),"\n",(0,c.jsxs)(n.h2,{id:"import-命令",children:["import 命令",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#import-命令",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["使用",(0,c.jsx)(n.code,{children:"export"}),"命令定义了模块的对外接口以后，其他 JS 文件就可以通过",(0,c.jsx)(n.code,{children:"import"}),"命令加载这个模块。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// main.js\nimport { firstName, lastName, year } from './profile.js';\n\nfunction setName(element) {\n  element.textContent = firstName + ' ' + lastName;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码的",(0,c.jsx)(n.code,{children:"import"}),"命令，用于加载",(0,c.jsx)(n.code,{children:"profile.js"}),"文件，并从中输入变量。",(0,c.jsx)(n.code,{children:"import"}),"命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（",(0,c.jsx)(n.code,{children:"profile.js"}),"）对外接口的名称相同。"]}),"\n",(0,c.jsxs)(n.p,{children:["如果想为输入的变量重新取一个名字，",(0,c.jsx)(n.code,{children:"import"}),"命令要使用",(0,c.jsx)(n.code,{children:"as"}),"关键字，将输入的变量重命名。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { lastName as surname } from './profile.js';\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import"}),"命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import {a} from './xxx.js'\n\na = {}; // Syntax Error : 'a' is read-only;\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，脚本加载了变量",(0,c.jsx)(n.code,{children:"a"}),"，对其重新赋值就会报错，因为",(0,c.jsx)(n.code,{children:"a"}),"是一个只读的接口。但是，如果",(0,c.jsx)(n.code,{children:"a"}),"是一个对象，改写",(0,c.jsx)(n.code,{children:"a"}),"的属性是允许的。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import {a} from './xxx.js'\n\na.foo = 'hello'; // 合法操作\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"a"}),"的属性可以成功改写，并且其他模块也可以读到改写后的值。不过，这种写法很难查错，建议凡是输入的变量，都当作完全只读，不要轻易改变它的属性。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import"}),"后面的",(0,c.jsx)(n.code,{children:"from"}),"指定模块文件的位置，可以是相对路径，也可以是绝对路径。如果不带有路径，只是一个模块名，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { myMethod } from 'util';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"util"}),"是模块文件名，由于不带有路径，必须通过配置，告诉引擎怎么取到这个模块。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，",(0,c.jsx)(n.code,{children:"import"}),"命令具有提升效果，会提升到整个模块的头部，首先执行。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"foo();\n\nimport { foo } from 'my_module';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面的代码不会报错，因为",(0,c.jsx)(n.code,{children:"import"}),"的执行早于",(0,c.jsx)(n.code,{children:"foo"}),"的调用。这种行为的本质是，",(0,c.jsx)(n.code,{children:"import"}),"命令是编译阶段执行的，在代码运行之前。"]}),"\n",(0,c.jsxs)(n.p,{children:["由于",(0,c.jsx)(n.code,{children:"import"}),"是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 报错\nimport { 'f' + 'oo' } from 'my_module';\n\n// 报错\nlet module = 'my_module';\nimport { foo } from module;\n\n// 报错\nif (x === 1) {\n  import { foo } from 'module1';\n} else {\n  import { foo } from 'module2';\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面三种写法都会报错，因为它们用到了表达式、变量和",(0,c.jsx)(n.code,{children:"if"}),"结构。在静态分析阶段，这些语法都是没法得到值的。"]}),"\n",(0,c.jsxs)(n.p,{children:["最后，",(0,c.jsx)(n.code,{children:"import"}),"语句会执行所加载的模块，因此可以有下面的写法。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import 'lodash';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码仅仅执行",(0,c.jsx)(n.code,{children:"lodash"}),"模块，但是不输入任何值。"]}),"\n",(0,c.jsxs)(n.p,{children:["如果多次重复执行同一句",(0,c.jsx)(n.code,{children:"import"}),"语句，那么只会执行一次，而不会执行多次。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import 'lodash';\nimport 'lodash';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码加载了两次",(0,c.jsx)(n.code,{children:"lodash"}),"，但是只会执行一次。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { foo } from 'my_module';\nimport { bar } from 'my_module';\n\n// 等同于\nimport { foo, bar } from 'my_module';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，虽然",(0,c.jsx)(n.code,{children:"foo"}),"和",(0,c.jsx)(n.code,{children:"bar"}),"在两个语句中加载，但是它们对应的是同一个",(0,c.jsx)(n.code,{children:"my_module"}),"模块。也就是说，",(0,c.jsx)(n.code,{children:"import"}),"语句是 Singleton 模式。"]}),"\n",(0,c.jsxs)(n.p,{children:["目前阶段，通过 Babel 转码，CommonJS 模块的",(0,c.jsx)(n.code,{children:"require"}),"命令和 ES6 模块的",(0,c.jsx)(n.code,{children:"import"}),"命令，可以写在同一个模块里面，但是最好不要这样做。因为",(0,c.jsx)(n.code,{children:"import"}),"在静态解析阶段执行，所以它是一个模块之中最早执行的。下面的代码可能不会得到预期结果。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"require('core-js/modules/es6.symbol');\nrequire('core-js/modules/es6.promise');\nimport React from 'React';\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"模块的整体加载",children:["模块的整体加载",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#模块的整体加载",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["除了指定加载某个输出值，还可以使用整体加载，即用星号（",(0,c.jsx)(n.code,{children:"*"}),"）指定一个对象，所有输出值都加载在这个对象上面。"]}),"\n",(0,c.jsxs)(n.p,{children:["下面是一个",(0,c.jsx)(n.code,{children:"circle.js"}),"文件，它输出两个方法",(0,c.jsx)(n.code,{children:"area"}),"和",(0,c.jsx)(n.code,{children:"circumference"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// circle.js\n\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\n\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"现在，加载这个模块。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// main.js\n\nimport { area, circumference } from './circle';\n\nconsole.log('圆面积：' + area(4));\nconsole.log('圆周长：' + circumference(14));\n"})}),"\n",(0,c.jsx)(n.p,{children:"上面写法是逐一指定要加载的方法，整体加载的写法如下。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import * as circle from './circle';\n\nconsole.log('圆面积：' + circle.area(4));\nconsole.log('圆周长：' + circle.circumference(14));\n"})}),"\n",(0,c.jsxs)(n.p,{children:["注意，模块整体加载所在的那个对象（上例是",(0,c.jsx)(n.code,{children:"circle"}),"），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import * as circle from './circle';\n\n// 下面两行都是不允许的\ncircle.foo = 'hello';\ncircle.area = function () {};\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"export-default-命令",children:["export default 命令",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#export-default-命令",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["从前面的例子可以看出，使用",(0,c.jsx)(n.code,{children:"import"}),"命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。"]}),"\n",(0,c.jsxs)(n.p,{children:["为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到",(0,c.jsx)(n.code,{children:"export default"}),"命令，为模块指定默认输出。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// export-default.js\nexport default function () {\n  console.log('foo');\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码是一个模块文件",(0,c.jsx)(n.code,{children:"export-default.js"}),"，它的默认输出是一个函数。"]}),"\n",(0,c.jsxs)(n.p,{children:["其他模块加载该模块时，",(0,c.jsx)(n.code,{children:"import"}),"命令可以为该匿名函数指定任意名字。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码的",(0,c.jsx)(n.code,{children:"import"}),"命令，可以用任意名称指向",(0,c.jsx)(n.code,{children:"export-default.js"}),"输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时",(0,c.jsx)(n.code,{children:"import"}),"命令后面，不使用大括号。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"export default"}),"命令用在非匿名函数前，也是可以的。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// export-default.js\nexport default function foo() {\n  console.log('foo');\n}\n\n// 或者写成\n\nfunction foo() {\n  console.log('foo');\n}\n\nexport default foo;\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"foo"}),"函数的函数名",(0,c.jsx)(n.code,{children:"foo"}),"，在模块外部是无效的。加载的时候，视同匿名函数加载。"]}),"\n",(0,c.jsx)(n.p,{children:"下面比较一下默认输出和正常输出。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 第一组\nexport default function crc32() { // 输出\n  // ...\n}\n\nimport crc32 from 'crc32'; // 输入\n\n// 第二组\nexport function crc32() { // 输出\n  // ...\n};\n\nimport {crc32} from 'crc32'; // 输入\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码的两组写法，第一组是使用",(0,c.jsx)(n.code,{children:"export default"}),"时，对应的",(0,c.jsx)(n.code,{children:"import"}),"语句不需要使用大括号；第二组是不使用",(0,c.jsx)(n.code,{children:"export default"}),"时，对应的",(0,c.jsx)(n.code,{children:"import"}),"语句需要使用大括号。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"export default"}),"命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此",(0,c.jsx)(n.code,{children:"export default"}),"命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应",(0,c.jsx)(n.code,{children:"export default"}),"命令。"]}),"\n",(0,c.jsxs)(n.p,{children:["本质上，",(0,c.jsx)(n.code,{children:"export default"}),"就是输出一个叫做",(0,c.jsx)(n.code,{children:"default"}),"的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["正是因为",(0,c.jsx)(n.code,{children:"export default"}),"命令其实只是输出一个叫做",(0,c.jsx)(n.code,{children:"default"}),"的变量，所以它后面不能跟变量声明语句。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 正确\nexport var a = 1;\n\n// 正确\nvar a = 1;\nexport default a;\n\n// 错误\nexport default var a = 1;\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"export default a"}),"的含义是将变量",(0,c.jsx)(n.code,{children:"a"}),"的值赋给变量",(0,c.jsx)(n.code,{children:"default"}),"。所以，最后一种写法会报错。"]}),"\n",(0,c.jsxs)(n.p,{children:["同样地，因为",(0,c.jsx)(n.code,{children:"export default"}),"命令的本质是将后面的值，赋给",(0,c.jsx)(n.code,{children:"default"}),"变量，所以可以直接将一个值写在",(0,c.jsx)(n.code,{children:"export default"}),"之后。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 正确\nexport default 42;\n\n// 报错\nexport 42;\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，后一句报错是因为没有指定对外的接口，而前一句指定对外接口为",(0,c.jsx)(n.code,{children:"default"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["有了",(0,c.jsx)(n.code,{children:"export default"}),"命令，输入模块时就非常直观了，以输入 lodash 模块为例。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import _ from 'lodash';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["如果想在一条",(0,c.jsx)(n.code,{children:"import"}),"语句中，同时输入默认方法和其他接口，可以写成下面这样。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import _, { each, forEach } from 'lodash';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["对应上面代码的",(0,c.jsx)(n.code,{children:"export"}),"语句如下。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"export default function (obj) {\n  // \xb7\xb7\xb7\n}\n\nexport function each(obj, iterator, context) {\n  // \xb7\xb7\xb7\n}\n\nexport { each as forEach };\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码的最后一行的意思是，暴露出",(0,c.jsx)(n.code,{children:"forEach"}),"接口，默认指向",(0,c.jsx)(n.code,{children:"each"}),"接口，即",(0,c.jsx)(n.code,{children:"forEach"}),"和",(0,c.jsx)(n.code,{children:"each"}),"指向同一个方法。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"export default"}),"也可以用来输出类。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// MyClass.js\nexport default class { ... }\n\n// main.js\nimport MyClass from 'MyClass';\nlet o = new MyClass();\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"export-与-import-的复合写法",children:["export 与 import 的复合写法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#export-与-import-的复合写法",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["如果在一个模块之中，先输入后输出同一个模块，",(0,c.jsx)(n.code,{children:"import"}),"语句可以与",(0,c.jsx)(n.code,{children:"export"}),"语句写在一起。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"export { foo, bar } from 'my_module';\n\n// 可以简单理解为\nimport { foo, bar } from 'my_module';\nexport { foo, bar };\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"export"}),"和",(0,c.jsx)(n.code,{children:"import"}),"语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，",(0,c.jsx)(n.code,{children:"foo"}),"和",(0,c.jsx)(n.code,{children:"bar"}),"实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用",(0,c.jsx)(n.code,{children:"foo"}),"和",(0,c.jsx)(n.code,{children:"bar"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:"模块的接口改名和整体输出，也可以采用这种写法。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 接口改名\nexport { foo as myFoo } from 'my_module';\n\n// 整体输出\nexport * from 'my_module';\n"})}),"\n",(0,c.jsx)(n.p,{children:"默认接口的写法如下。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"export { default } from 'foo';\n"})}),"\n",(0,c.jsx)(n.p,{children:"具名接口改为默认接口的写法如下。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"export { es6 as default } from './someModule';\n\n// 等同于\nimport { es6 } from './someModule';\nexport default es6;\n"})}),"\n",(0,c.jsx)(n.p,{children:"同样地，默认接口也可以改名为具名接口。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"export { default as es6 } from './someModule';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["ES2020 之前，有一种",(0,c.jsx)(n.code,{children:"import"}),"语句，没有对应的复合写法。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'import * as someIdentifier from "someModule";\n'})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://github.com/tc39/proposal-export-ns-from",target:"_blank",rel:"noopener noreferrer",children:"ES2020"}),"补上了这个写法。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'export * as ns from "mod";\n\n// 等同于\nimport * as ns from "mod";\nexport {ns};\n'})}),"\n",(0,c.jsxs)(n.h2,{id:"模块的继承",children:["模块的继承",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#模块的继承",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"模块之间也可以继承。"}),"\n",(0,c.jsxs)(n.p,{children:["假设有一个",(0,c.jsx)(n.code,{children:"circleplus"}),"模块，继承了",(0,c.jsx)(n.code,{children:"circle"}),"模块。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// circleplus.js\n\nexport * from 'circle';\nexport var e = 2.71828182846;\nexport default function(x) {\n  return Math.exp(x);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中的",(0,c.jsx)(n.code,{children:"export *"}),"，表示再输出",(0,c.jsx)(n.code,{children:"circle"}),"模块的所有属性和方法。注意，",(0,c.jsx)(n.code,{children:"export *"}),"命令会忽略",(0,c.jsx)(n.code,{children:"circle"}),"模块的",(0,c.jsx)(n.code,{children:"default"}),"方法。然后，上面代码又输出了自定义的",(0,c.jsx)(n.code,{children:"e"}),"变量和默认方法。"]}),"\n",(0,c.jsxs)(n.p,{children:["这时，也可以将",(0,c.jsx)(n.code,{children:"circle"}),"的属性或方法，改名后再输出。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// circleplus.js\n\nexport { area as circleArea } from 'circle';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码表示，只输出",(0,c.jsx)(n.code,{children:"circle"}),"模块的",(0,c.jsx)(n.code,{children:"area"}),"方法，且将其改名为",(0,c.jsx)(n.code,{children:"circleArea"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:"加载上面模块的写法如下。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// main.js\n\nimport * as math from 'circleplus';\nimport exp from 'circleplus';\nconsole.log(exp(math.e));\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中的",(0,c.jsx)(n.code,{children:"import exp"}),"表示，将",(0,c.jsx)(n.code,{children:"circleplus"}),"模块的默认方法加载为",(0,c.jsx)(n.code,{children:"exp"}),"方法。"]}),"\n",(0,c.jsxs)(n.h2,{id:"跨模块常量",children:["跨模块常量",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#跨模块常量",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["本书介绍",(0,c.jsx)(n.code,{children:"const"}),"命令的时候说过，",(0,c.jsx)(n.code,{children:"const"}),"声明的常量只在当前代码块有效。如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以采用下面的写法。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// constants.js 模块\nexport const A = 1;\nexport const B = 3;\nexport const C = 4;\n\n// test1.js 模块\nimport * as constants from './constants';\nconsole.log(constants.A); // 1\nconsole.log(constants.B); // 3\n\n// test2.js 模块\nimport {A, B} from './constants';\nconsole.log(A); // 1\nconsole.log(B); // 3\n"})}),"\n",(0,c.jsxs)(n.p,{children:["如果要使用的常量非常多，可以建一个专门的",(0,c.jsx)(n.code,{children:"constants"}),"目录，将各种常量写在不同的文件里面，保存在该目录下。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// constants/db.js\nexport const db = {\n  url: 'http://my.couchdbserver.local:5984',\n  admin_username: 'admin',\n  admin_password: 'admin password'\n};\n\n// constants/user.js\nexport const users = ['root', 'admin', 'staff', 'ceo', 'chief', 'moderator'];\n"})}),"\n",(0,c.jsxs)(n.p,{children:["然后，将这些文件输出的常量，合并在",(0,c.jsx)(n.code,{children:"index.js"}),"里面。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// constants/index.js\nexport {db} from './db';\nexport {users} from './users';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["使用的时候，直接加载",(0,c.jsx)(n.code,{children:"index.js"}),"就可以了。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// script.js\nimport {db, users} from './constants/index';\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"import",children:["import()",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#import",children:"#"})]}),"\n",(0,c.jsxs)(n.h3,{id:"简介",children:["简介",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["前面介绍过，",(0,c.jsx)(n.code,{children:"import"}),"命令会被 JavaScript 引擎静态分析，先于模块内的其他语句执行（",(0,c.jsx)(n.code,{children:"import"}),"命令叫做“连接” binding 其实更合适）。所以，下面的代码会报错。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 报错\nif (x === 2) {\n  import MyModual from './myModual';\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，引擎处理",(0,c.jsx)(n.code,{children:"import"}),"语句是在编译时，这时不会去分析或执行",(0,c.jsx)(n.code,{children:"if"}),"语句，所以",(0,c.jsx)(n.code,{children:"import"}),"语句放在",(0,c.jsx)(n.code,{children:"if"}),"代码块之中毫无意义，因此会报句法错误，而不是执行时错误。也就是说，",(0,c.jsx)(n.code,{children:"import"}),"和",(0,c.jsx)(n.code,{children:"export"}),"命令只能在模块的顶层，不能在代码块之中（比如，在",(0,c.jsx)(n.code,{children:"if"}),"代码块之中，或在函数之中）。"]}),"\n",(0,c.jsxs)(n.p,{children:["这样的设计，固然有利于编译器提高效率，但也导致无法在运行时加载模块。在语法上，条件加载就不可能实现。如果",(0,c.jsx)(n.code,{children:"import"}),"命令要取代 Node 的",(0,c.jsx)(n.code,{children:"require"}),"方法，这就形成了一个障碍。因为",(0,c.jsx)(n.code,{children:"require"}),"是运行时加载模块，",(0,c.jsx)(n.code,{children:"import"}),"命令无法取代",(0,c.jsx)(n.code,{children:"require"}),"的动态加载功能。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const path = './' + fileName;\nconst myModual = require(path);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面的语句就是动态加载，",(0,c.jsx)(n.code,{children:"require"}),"到底加载哪一个模块，只有运行时才知道。",(0,c.jsx)(n.code,{children:"import"}),"命令做不到这一点。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://github.com/tc39/proposal-dynamic-import",target:"_blank",rel:"noopener noreferrer",children:"ES2020提案"})," 引入",(0,c.jsx)(n.code,{children:"import()"}),"函数，支持动态加载模块。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import(specifier)\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"import"}),"函数的参数",(0,c.jsx)(n.code,{children:"specifier"}),"，指定所要加载的模块的位置。",(0,c.jsx)(n.code,{children:"import"}),"命令能够接受什么参数，",(0,c.jsx)(n.code,{children:"import()"}),"函数就能接受什么参数，两者区别主要是后者为动态加载。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import()"}),"返回一个 Promise 对象。下面是一个例子。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const main = document.querySelector('main');\n\nimport(`./section-modules/${someVariable}.js`)\n  .then(module => {\n    module.loadPageInto(main);\n  })\n  .catch(err => {\n    main.textContent = err.message;\n  });\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import()"}),"函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。它是运行时执行，也就是说，什么时候运行到这一句，就会加载指定的模块。另外，",(0,c.jsx)(n.code,{children:"import()"}),"函数与所加载的模块没有静态连接关系，这点也是与",(0,c.jsx)(n.code,{children:"import"}),"语句不相同。",(0,c.jsx)(n.code,{children:"import()"}),"类似于 Node.js 的",(0,c.jsx)(n.code,{children:"require()"}),"方法，区别主要是前者是异步加载，后者是同步加载。"]}),"\n",(0,c.jsxs)(n.p,{children:["由于",(0,c.jsx)(n.code,{children:"import()"}),"返回 Promise\n对象，所以需要使用",(0,c.jsx)(n.code,{children:"then()"}),"方法指定处理函数。考虑到代码的清晰，更推荐使用",(0,c.jsx)(n.code,{children:"await"}),"命令。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function renderWidget() {\n  const container = document.getElementById('widget');\n  if (container !== null) {\n    // 等同于\n    // import(\"./widget\").then(widget => {\n    //   widget.render(container);\n    // });\n    const widget = await import('./widget.js');\n    widget.render(container);\n  }\n}\n\nrenderWidget();\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面示例中，",(0,c.jsx)(n.code,{children:"await"}),"命令后面就是使用",(0,c.jsx)(n.code,{children:"import()"}),"，对比",(0,c.jsx)(n.code,{children:"then()"}),"的写法明显更简洁易读。"]}),"\n",(0,c.jsxs)(n.h3,{id:"适用场合",children:["适用场合",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#适用场合",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["下面是",(0,c.jsx)(n.code,{children:"import()"}),"的一些适用场合。"]}),"\n",(0,c.jsx)(n.p,{children:"（1）按需加载。"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import()"}),"可以在需要的时候，再加载某个模块。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"button.addEventListener('click', event => {\n  import('./dialogBox.js')\n  .then(dialogBox => {\n    dialogBox.open();\n  })\n  .catch(error => {\n    /* Error handling */\n  })\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"import()"}),"方法放在",(0,c.jsx)(n.code,{children:"click"}),"事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。"]}),"\n",(0,c.jsx)(n.p,{children:"（2）条件加载"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import()"}),"可以放在",(0,c.jsx)(n.code,{children:"if"}),"代码块，根据不同的情况，加载不同的模块。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"if (condition) {\n  import('moduleA').then(...);\n} else {\n  import('moduleB').then(...);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"上面代码中，如果满足条件，就加载模块 A，否则加载模块 B。"}),"\n",(0,c.jsx)(n.p,{children:"（3）动态的模块路径"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import()"}),"允许模块路径动态生成。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import(f())\n.then(...);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，根据函数",(0,c.jsx)(n.code,{children:"f"}),"的返回结果，加载不同的模块。"]}),"\n",(0,c.jsxs)(n.h3,{id:"注意点",children:["注意点",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意点",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import()"}),"加载模块成功以后，这个模块会作为一个对象，当作",(0,c.jsx)(n.code,{children:"then"}),"方法的参数。因此，可以使用对象解构赋值的语法，获取输出接口。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import('./myModule.js')\n.then(({export1, export2}) => {\n  // ...\xb7\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"export1"}),"和",(0,c.jsx)(n.code,{children:"export2"}),"都是",(0,c.jsx)(n.code,{children:"myModule.js"}),"的输出接口，可以解构获得。"]}),"\n",(0,c.jsxs)(n.p,{children:["如果模块有",(0,c.jsx)(n.code,{children:"default"}),"输出接口，可以用参数直接获得。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import('./myModule.js')\n.then(myModule => {\n  console.log(myModule.default);\n});\n"})}),"\n",(0,c.jsx)(n.p,{children:"上面的代码也可以使用具名输入的形式。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import('./myModule.js')\n.then(({default: theDefault}) => {\n  console.log(theDefault);\n});\n"})}),"\n",(0,c.jsx)(n.p,{children:"如果想同时加载多个模块，可以采用下面的写法。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"Promise.all([\n  import('./module1.js'),\n  import('./module2.js'),\n  import('./module3.js'),\n])\n.then(([module1, module2, module3]) => {\n   \xb7\xb7\xb7\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import()"}),"也可以用在 async 函数之中。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"async function main() {\n  const myModule = await import('./myModule.js');\n  const {export1, export2} = await import('./myModule.js');\n  const [module1, module2, module3] =\n    await Promise.all([\n      import('./module1.js'),\n      import('./module2.js'),\n      import('./module3.js'),\n    ]);\n}\nmain();\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"importmeta",children:["import.meta",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#importmeta",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["开发者使用一个模块时，有时需要知道模板本身的一些信息（比如模块的路径）。",(0,c.jsx)(n.a,{href:"https://github.com/tc39/proposal-import-meta",target:"_blank",rel:"noopener noreferrer",children:"ES2020"})," 为 import 命令添加了一个元属性",(0,c.jsx)(n.code,{children:"import.meta"}),"，返回当前模块的元信息。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import.meta"}),"只能在模块内部使用，如果在模块外部使用会报错。"]}),"\n",(0,c.jsxs)(n.p,{children:["这个属性返回一个对象，该对象的各种属性就是当前运行的脚本的元信息。具体包含哪些属性，标准没有规定，由各个运行环境自行决定。一般来说，",(0,c.jsx)(n.code,{children:"import.meta"}),"至少会有下面两个属性。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"（1）import.meta.url"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import.meta.url"}),"返回当前模块的 URL 路径。举例来说，当前模块主文件的路径是",(0,c.jsx)(n.code,{children:"https://foo.com/main.js"}),"，",(0,c.jsx)(n.code,{children:"import.meta.url"}),"就返回这个路径。如果模块里面还有一个数据文件",(0,c.jsx)(n.code,{children:"data.txt"}),"，那么就可以用下面的代码，获取这个数据文件的路径。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"new URL('data.txt', import.meta.url)\n"})}),"\n",(0,c.jsxs)(n.p,{children:["注意，Node.js 环境中，",(0,c.jsx)(n.code,{children:"import.meta.url"}),"返回的总是本地路径，即",(0,c.jsx)(n.code,{children:"file:URL"}),"协议的字符串，比如",(0,c.jsx)(n.code,{children:"file:///home/user/foo.js"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"（2）import.meta.scriptElement"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"import.meta.scriptElement"}),"是浏览器特有的元属性，返回加载模块的那个",(0,c.jsx)(n.code,{children:"<script>"}),"元素，相当于",(0,c.jsx)(n.code,{children:"document.currentScript"}),"属性。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'// HTML 代码为\n// <script type="module" src="my-module.js" data-foo="abc"><\/script>\n\n// my-module.js 内部执行下面的代码\nimport.meta.scriptElement.dataset.foo\n// "abc"\n'})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"（3）其他"})}),"\n",(0,c.jsxs)(n.p,{children:["Deno 现在还支持",(0,c.jsx)(n.code,{children:"import.meta.filename"}),"和",(0,c.jsx)(n.code,{children:"import.meta.dirname"}),"属性，对应 CommonJS 模块系统的",(0,c.jsx)(n.code,{children:"__filename"}),"和",(0,c.jsx)(n.code,{children:"__dirname"}),"属性。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"import.meta.filename"}),"：当前模块文件的绝对路径。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"import.meta.dirname"}),"：当前模块文件的目录的绝对路径。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这两个属性都提供当前平台的正确的路径分隔符，比如 Linux 系统返回",(0,c.jsx)(n.code,{children:"/dev/my_module.ts"}),"，Windows 系统返回",(0,c.jsx)(n.code,{children:"C:\\dev\\my_module.ts"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:"本地模块可以使用这两个属性，远程模块也可以使用。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F24.Module%20%E7%9A%84%E8%AF%AD%E6%B3%95.md"]={toc:[{text:"概述",id:"概述",depth:2},{text:"严格模式",id:"严格模式",depth:2},{text:"export 命令",id:"export-命令",depth:2},{text:"import 命令",id:"import-命令",depth:2},{text:"模块的整体加载",id:"模块的整体加载",depth:2},{text:"export default 命令",id:"export-default-命令",depth:2},{text:"export 与 import 的复合写法",id:"export-与-import-的复合写法",depth:2},{text:"模块的继承",id:"模块的继承",depth:2},{text:"跨模块常量",id:"跨模块常量",depth:2},{text:"import()",id:"import",depth:2},{text:"简介",id:"简介",depth:3},{text:"适用场合",id:"适用场合",depth:3},{text:"注意点",id:"注意点",depth:3},{text:"import.meta",id:"importmeta",depth:2}],title:"24.Module 的语法",headingTitle:"24.Module 的语法",frontmatter:{}}}}]);