"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["34840"],{978688:function(n,e,r){r.r(e),r.d(e,{default:()=>x});var t=r(552676),a=r(740453);let s=r.p+"static/image/e1d0e832271379164e7b623b18fb8943.35682c3a.webp",i=r.p+"static/image/b43ba760ba7e0b1e18e3fa47f4105548.5cd5cfee.webp",l=r.p+"static/image/3a9b08ef72f78c0981964baa233d40aa.a5ab138d.webp",o=r.p+"static/image/ec7e7f2505a12193ad3f45c720ca7ac8.450f4141.webp",c=r.p+"static/image/bf4e2780bf1ce69d894211d8e66a012b.d5621705.webp";function d(n){let e=Object.assign({p:"p",h2:"h2",a:"a",ul:"ul",li:"li",strong:"strong",img:"img",h3:"h3",pre:"pre",code:"code",blockquote:"blockquote"},(0,a.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"什么是国际化语言开发？"}),"\n",(0,t.jsx)(e.p,{children:"很多业务在全球范围内使用的过程中，不仅仅是针对中国用户，往往会面临着需要进行多语种的方案切换，在这个过程中对，需要考虑到不同地区、语言和文化背景的用户，以确保他们可以无障碍地使用和理解软件。"}),"\n",(0,t.jsx)(e.p,{children:"同理，在低代码平台中，如果有国际化的业务诉求，那么集成国际化方案是非常有必要的。本章节的内容就是来配置在低代码平台当中，如何结合现有方案实现从零到一的语种配置、使用、切换的过程。"}),"\n",(0,t.jsxs)(e.h2,{id:"国际化方案",children:["国际化方案",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#国际化方案",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"目前来说，主流的国际化社区实现的方案主要有以下几个三方包能够满足功能的相关诉求："}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"react-i18next(i18next)"}),": react-i18next是一个流行的 React 国际化库，它基于\xa0i18next。主要为React提供一系列的Hook、Hoc和组件的使用方式，能够在项目中更加便捷的使用。"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"react-intl(formatjs)"}),": FormatJS 是一个用于国际化的 JavaScript 库的模块化集合，在这个基础上，借用相关的能力实现了提供给React使用的国际化语言切换工具，也就是react-intl。"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"next-i18next(Next.js)"}),": nextjs基于i18next提供的国际化解决方案，主要搭配Next.js使用，能够最大程度的获得两者结合的相关开发体验和优化性能。"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"除此之外也有其他大大小小的社区方案提供选择，在这里就不过多赘述。在小册项目中，会主要使用react-i18next来进行相关的实践，总体的流程大差不差。如果你对其他的工具库有更加深的理解，那么可以根据自身的经验进行选择。"}),"\n",(0,t.jsxs)(e.h2,{id:"实现原理",children:["实现原理",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现原理",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"在开始之前，先来看看整体的实现脉络。整体实现流程可以分为以下两个阶段："}),"\n",(0,t.jsxs)(e.p,{children:["配置阶段：使用配置组件在工作台和编辑器中进行语种文案的编辑保存。\n编辑器阶段：异步加载多语种文案并注入",(0,t.jsx)(e.strong,{children:"i18n"}),"后，将其提供给",(0,t.jsx)(e.strong,{children:"jsRuntime"}),"使用，最终完成页面的渲染。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,t.jsx)(e.p,{children:"国际化平台的集成实现的首要的工作就是将其集成在低代码编辑器当中实现。我将其分为两个阶段："}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"基础实现：实现基本的国际化能力集成，能够进行基本的语言切换和显示。"}),"\n",(0,t.jsx)(e.li,{children:"低代码平台：在基础实现之上，结合低代码平台做数据源管理，版本切换等等不同的功能，最终实现可在线配置的多语言国际化方案。"}),"\n",(0,t.jsx)(e.li,{children:"稳定迭代：随着应用的发展和迭代，可能会有新的文本需要翻译，或者现有的翻译需要更新。确保国际化资源的持续维护，并及时更新和添加新的翻译内容。"}),"\n"]}),"\n",(0,t.jsxs)(e.h2,{id:"基础实现",children:["基础实现",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基础实现",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["首先先来实现",(0,t.jsx)(e.strong,{children:"react-i18next"}),"在React工程中的基本场景使用。整体过程如下："]}),"\n",(0,t.jsxs)(e.p,{children:["具体也可以参照相关文档链接：",(0,t.jsx)(e.a,{href:"https://www.i18next.com/overview/getting-started",target:"_blank",rel:"noopener noreferrer",children:"https://www.i18next.com/overview/getting-started"})]}),"\n",(0,t.jsxs)(e.h3,{id:"安装",children:["安装",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["在apps/editor文件目录下安装 ",(0,t.jsx)(e.strong,{children:"react-i18next"}),"、",(0,t.jsx)(e.strong,{children:"i18next"}),"相关的多语言库，在上面已经提到了目前市面上主流的一些实现方案，"]}),"\n",(0,t.jsx)(e.p,{children:"如下代码脚本所示"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"# 41.组件实战：国际化语言开发实现\ncd apps/editor\n\n# 安装相关依赖\npnpm add react-i18next i18next\n"})}),"\n",(0,t.jsx)(e.p,{children:"安装成功后就可以在编辑器中开始使用了。"}),"\n",(0,t.jsxs)(e.h3,{id:"初始化配置",children:["初始化配置",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化配置",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"依赖安装完成后，使用i18next进行基础配置的初始化，在utils目录下添加i18next.ts文件，用于实现相关初始化的代码。"}),"\n",(0,t.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,t.jsx)(e.p,{children:"首先引入i18next依赖，并且执行init方法注册React相关的依赖并加载资源的配置。在这里先将resources的配置相关信息写死，后续这里会换成配置的数据和对应的远程资源数据。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'import i18n from "i18next";\nimport { initReactI18next } from "react-i18next";\n\ni18n\n.use(initReactI18next)\n.init({\n  resources: {\n    en: {\n      translation: {\n        "hello": "Hello",\n        "welcome": "Welcome to my app!"\n      }\n    },\n    zh: {\n      translation: {\n        "hello": "你好",\n        "welcome": "欢迎来到我的应用！"\n      }\n    }\n  },\n  lng: \'zh\',\n  fallbackLng: \'zh\',\n  interpolation: {\n    escapeValue: false,\n  }\n});\n\n![image.png](./images/7154f2fc3a5a6be1c25592f81e5907ac.webp )\nexport default i18n\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"provider",children:["Provider",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#provider",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["I18nextProvider是react-i18next提供的Provider组件包裹层，将其包裹编辑器组件并通过",(0,t.jsx)(e.code,{children:"i18n"}),"属性将i18n实例传递给",(0,t.jsx)(e.code,{children:"I18nextProvider"}),"，这样，整个应用的组件树都可以通过",(0,t.jsx)(e.code,{children:"useTranslation"}),"钩子函数或",(0,t.jsx)(e.code,{children:"withTranslation"}),"高阶组件来访问i18n实例的国际化功能，并且在语言切换时可以自动更新翻译内容。"]}),"\n",(0,t.jsx)(e.p,{children:"如下代码所示:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import {I18nextProvider } from 'react-i18next'\nimport i18n from './utils/i18n'\n\n<I18nextProvider i18n={i18n} >\n    {props.children}\n</I18nextProvider>\n"})}),"\n",(0,t.jsx)(e.p,{children:"接下来就来试试效果，我给按钮组件的文本内容输入了一个表达式，使用i18n的方式绑定之前注入过的 welcome词条，界面中按钮的显示文案就会变成【欢迎来到我的应用】的显示。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'$t(["welcome", "我是默认文案"])\n'})}),"\n",(0,t.jsx)(e.p,{children:"具体效果如下图所示："}),"\n",(0,t.jsx)(e.p,{children:"可以看到文本内容已经绑定了表达式，利用其特性来渲染多语言。到此，基础实现就完成了，后面就是在低代码平台中的一些结合应用，做一体化的产品功能实现。"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,t.jsxs)(e.h2,{id:"低代码结合",children:["低代码结合",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#低代码结合",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"在创建应用时，可以在对应的面板中添加多语种板块来支持导入和导出相关数据的操作，如下图选择新建应用，会自动跳转到应用新增界面。"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,t.jsx)(e.p,{children:"如下图所示："}),"\n",(0,t.jsx)(e.p,{children:"在应用新增界面中多语言板块基本的数据编辑器，能够提供自定义语种文案的相关配置方式。将之前写死的resources字段改成从状态更新或者从远程加载，通熟易懂点就是不在init中实现，而是通过异步的形式更新并重新渲染。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'[\n    {\n        "key": "hello",\n        "cn": "hello",\n        "en": "你好"\n    },\n    {\n        "key": "welcome",\n        "cn": "Welcome to my app!",\n        "en": "欢迎来到我的应用！"\n    }\n]\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,t.jsx)(e.p,{children:"整体编辑界面基本布局如下代码所示："}),"\n",(0,t.jsx)(e.p,{children:"通过Form新增编辑界面的基本布局，这里不过多赘述了，后面在平台篇会主要的讲述着一块的具体功能点。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'export default () => {\n  return (\n    <div\n      className={css({\n        maxWidth: 1400,\n        width: "100%",\n        margin: "0 auto",\n      })}\n    >\n      <ProForm\n        submitter={false}\n        initialValues={{\n          dependencies: {\n            js: {\n              tpl: \'<script defer="defer" src="${link}"><\/script>\',\n            },\n          },\n        }}\n      >\n        <Flex vertical gap={12}>\n          <ProCard bordered title="应用信息" tooltip="当前应用的基本信息配置">\n            <ProFormGroup direction="vertical">\n              <ProFormUploadButton\n                width="xs"\n                title="应用图标"\n                icon={<FormOutlined />}\n                label="应用图标"\n                name="icon"\n                params={{\n                  resolveType: 1\n                }}\n                action="/gateway/common/rpc/upload"\n              />\n              <ProFormText\n                name="name"\n                label="名称"\n                width="lg"\n                tooltip="最长为 24 位"\n                placeholder="请输入名称"\n                rules={[{ required: true }]}\n              />\n              <ProFormTextArea\n                fieldProps={{\n                  maxLength: 100,\n                  showCount: true,\n                  autoSize: {\n                    minRows: 5,\n                    maxRows: 5,\n                  },\n                }}\n                width="lg"\n                label="应用描述"\n                name="description"\n                placeholder="请输入应用描述"\n                tooltip="页面的描述，在这里可以将你的应用信息进行详细的描述"\n              />\n            </ProFormGroup>\n          </ProCard>\n\n          {/* 依赖管理 */}\n          <ProForm.Item name="depends" >\n              <DepensManageCard />\n          </ProForm.Iteom>\n          \n\n          {/* 多语言管理 */}\n          <ProForm.Item name="locale" >\n              <LocaleEditTable />\n          </ProForm.Iteom>\n\n          {/* 自动化任务 */}\n          <ProForm.Item name="automation" >\n              <AutomationTaskCard/>\n          </ProForm.Iteom>\n          \n            \n          {/* 部署运维 */}\n          <ProForm.Item name="deploy" >\n              <DeploymentOperationCard/>\n          </ProForm.Iteom>\n          \n        </Flex>\n      </ProForm>\n    </div>\n  );\n};\n\n'})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"LocaleEditTable"})," 组件就是多语言编辑表格的实现，如下代码所示："]}),"\n",(0,t.jsxs)(e.p,{children:["LocaleDataRecordType中定义了各种语类的资源声明，通过 ",(0,t.jsx)(e.strong,{children:"EditableProTable"})," 组件将其进行渲染，在LocaleEditTableProps声明value和onChange方法提供给Antd的组件使用，以此来实现一个自定义的Form组件。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'export type LocaleDataRecordType = {\n  id: React.Key;\n  key?: string;\n  cn?: string;\n  eu?: string;\n  jp?: string;\n  kr?: string;\n  fe?: string;\n};\n\nexport interface LocaleEditTableProps {\n  value?: LocaleDataRecordType[];\n  onCahnge?: (newData: readonly LocaleDataRecordType[]) => void;\n}\n\nexport const LocaleEditTable: React.FC<LocaleEditTableProps> = (props) => {\n  const [editableKeys, setEditableRowKeys] = useState<React.Key[]>(() => []);\n\n  const columns: ProColumns<LocaleDataRecordType>[] = [\n    {\n      title: "键值",\n      dataIndex: "key",\n      tooltip: "必须填写，否则使用时无法命中",\n\n      formItemProps: {\n        rules: [\n          {\n            required: true,\n            message: "请输入语种键值",\n          },\n        ],\n      },\n    },\n    {\n      title: "简体中文",\n      dataIndex: "cn",\n      formItemProps: {\n        rules: [\n          {\n            required: true,\n            message: "请输入默认中文名称",\n          },\n        ],\n      },\n    },\n    {\n      title: "英文",\n      dataIndex: "e",\n    },\n    {\n      title: "日文",\n      dataIndex: "jp",\n    },\n    {\n      title: "韩文",\n      dataIndex: "kr",\n    },\n    {\n      title: "法语",\n      dataIndex: "fe",\n    },\n    {\n      title: "操作",\n      valueType: "option",\n      fixed: "right",\n      align: "left",\n      width: 50,\n      render: () => {\n        return null;\n      },\n    },\n  ];\n\n  const setDataSource = props.onCahnge!\n\n  return (\n    <EditableProTable<LocaleDataRecordType>\n      bordered\n      rowKey="id"\n      headerTitle="多语言"\n      tooltip="国际化语种配置"\n      columns={columns}\n      scroll={{\n        x: "100%",\n        y: 400,\n      }}\n      value={props.value}\n      onChange={setDataSource}\n      recordCreatorProps={{\n        newRecordType: "dataSource",\n        record: () => ({\n          id: Date.now(),\n        }),\n      }}\n      toolBarRender={() => {\n        return [\n          // todo\n          <Typography.Link key="download">下载语言模版</Typography.Link>,\n\n          // todo\n          <Button key="import" type="primary" ghost>\n            导入元数据\n          </Button>,\n        ];\n      }}\n      editable={{\n        type: "multiple",\n        editableKeys,\n        actionRender: (_, __, defaultDoms) => {\n          return [defaultDoms.delete];\n        },\n        onValuesChange: (_, recordList) => {\n          setDataSource(recordList);\n        },\n        onChange: setEditableRowKeys,\n      }}\n    />\n  );\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:"以上就是配置界面的作用和布局的实现，具体细节可以根据自身的想法和需求进行搭配，最终本质是导出一份多语种的文案列表，然后提供给编辑器使用。"}),"\n",(0,t.jsxs)(e.h3,{id:"异步更新语言资源",children:["异步更新语言资源",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#异步更新语言资源",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"在工作台应用创建和编辑器编辑的时候可以动态的配置语种文案数据源，那么如何异步更新语言资源并且实现页面文案切换呢？"}),"\n",(0,t.jsxs)(e.p,{children:["这个时候就需要用到i18n的相关API了，具体可以浏览：",(0,t.jsx)(e.a,{href:"https://www.i18next.com/overview/api",target:"_blank",rel:"noopener noreferrer",children:"https://www.i18next.com/overview/api"})]}),"\n",(0,t.jsxs)(e.p,{children:["打开文档后，使用搜索功能搜索 ",(0,t.jsx)(e.strong,{children:"addResource"})," 方法，会发现其提供了相关资源添加的钩子，基于此就可以来实现文案的添加。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,t.jsxs)(e.p,{children:["首先，先来实现 ",(0,t.jsx)(e.strong,{children:"convertLocaleData"}),"方法，用于将列表的数据转换为当前i18n的资源。"]}),"\n",(0,t.jsx)(e.p,{children:"显示效果如下所示："}),"\n",(0,t.jsx)(e.p,{children:"转换前："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'[\n    {\n        "key": "hello",\n        "cn": "hello",\n        "en": "你好"\n    },\n    {\n        "key": "welcome",\n        "cn": "Welcome to my app!",\n        "en": "欢迎来到我的应用！"\n    }\n]\n'})}),"\n",(0,t.jsx)(e.p,{children:"转换后："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'{\n    en: {\n      translation: {\n        "hello": "Hello",\n        "welcome": "Welcome to my app!"\n      }\n    },\n    cn: {\n      translation: {\n        "hello": "你好",\n        "welcome": "欢迎来到我的应用！"\n      }\n    }\n  }\n'})}),"\n",(0,t.jsx)(e.p,{children:"实现方法如下代码所示："}),"\n",(0,t.jsxs)(e.p,{children:["将 ",(0,t.jsx)(e.strong,{children:"locales"})," 遍历循环，根据 ",(0,t.jsx)(e.strong,{children:"languages"})," 将需要的语言包进行转换。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:" // 这一步其实是在服务端去预处理的\n    const convertLocaleData = (\n      locales: LocaleDataRecordType[],\n      languages: string[]\n    ) => {\n      const outputData: {\n        [language: string]: {\n          translation: {\n            [key: string]: string;\n          };\n        };\n      } = {};\n\n      languages.forEach((language) => {\n        outputData[language] = {\n          translation: {},\n        };\n      });\n\n      locales.forEach((item: Record<string, any>) => {\n        const key = item.key;\n\n        languages.forEach((language) => {\n          if (language && item && key) {\n            outputData[language].translation[key] = item[language];\n          }\n        });\n      });\n\n      return outputData;\n    };\n"})}),"\n",(0,t.jsx)(e.p,{children:"完整的代码实现如下："}),"\n",(0,t.jsxs)(e.p,{children:["当",(0,t.jsx)(e.strong,{children:"i18n"}),"和",(0,t.jsx)(e.strong,{children:"locales"}),"发生改变的时候，",(0,t.jsx)(e.strong,{children:"useEffect"}),"会重新执行",(0,t.jsx)(e.strong,{children:"i18n.addResourceBundle"}),"注册相关的语言包资源，从而通过",(0,t.jsx)(e.strong,{children:"I18nextProvider"}),"触发整个页面视图状态的改变。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:" React.useEffect(() => {\n    // 这一步其实是在服务端去预处理的\n    const convertLocaleData = (\n      locales: LocaleDataRecordType[],\n      languages: string[]\n    ) => {\n      const outputData: {\n        [language: string]: {\n          translation: {\n            [key: string]: string;\n          };\n        };\n      } = {};\n\n      languages.forEach((language) => {\n        outputData[language] = {\n          translation: {},\n        };\n      });\n\n      locales.forEach((item: Record<string, any>) => {\n        const key = item.key;\n\n        languages.forEach((language) => {\n          if (language && item && key) {\n            outputData[language].translation[key] = item[language];\n          }\n        });\n      });\n\n      return outputData;\n    };\n\n    const resources = convertLocaleData(locales, [\"cn\", \"en\"])\n\n    // 监听资源更新并将其设置到i18n实例\n    i18n.addResourceBundle('en', 'translation', resources.en.translation, true, true);\n    i18n.addResourceBundle('cn', 'translation', resources.cn.translation, true, true);\n\n    // 存在语言文案数据的时候\n    if (locales.length > 0) {\n    }\n  }, [i18n, locales]);\n"})}),"\n",(0,t.jsxs)(e.p,{children:["基于此套流程，后续只需要更新",(0,t.jsx)(e.strong,{children:"locales"}),"字段即可重新加载相关的国际化资源。"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"需要注意的是，往往国际化资源会非常大，能预处理和预加载的都提前处理掉， 避免额外的运行时计算开销带来的加载性能问题。"}),"\n"]}),"\n",(0,t.jsxs)(e.h3,{id:"表达式配置",children:["表达式配置",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#表达式配置",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"上述流程当中已经完成了国际化资源的配置、更新、加载。本节主要是将其与表达式结合，通过表达式代码的方式进行配置使用。"}),"\n",(0,t.jsxs)(e.p,{children:["由于在此之前已经完成了表达式的属性绑定，编辑器也已经加载了",(0,t.jsx)(e.strong,{children:"I18nProvider"}),", 因此我们只需要在对",(0,t.jsx)(e.strong,{children:"useParseBinding"}),"进行简单的改造即可让表达式支持 ",(0,t.jsx)(e.strong,{children:"$t"})," 相关的使用。"]}),"\n",(0,t.jsxs)(e.p,{children:["在",(0,t.jsx)(e.strong,{children:"react-i18next"}),"中，提供了给用户使用多语言文案的",(0,t.jsx)(e.strong,{children:"hook"}),"，也就是",(0,t.jsx)(e.strong,{children:"useTranslation"}),"，通过",(0,t.jsx)(e.strong,{children:"useTranslation"}),"暴露出的",(0,t.jsx)(e.strong,{children:"t方法"}),"可以根据传递key的方式将对应语种的文案进行返回。"]}),"\n",(0,t.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,t.jsxs)(e.p,{children:["通过",(0,t.jsx)(e.strong,{children:"useTranslation"}),"获取方法，将其重命名为 ",(0,t.jsx)(e.strong,{children:"$t"})," 传递到 ",(0,t.jsx)(e.strong,{children:"jsRuntime.execute"})," 中，以此表达式的上下文就能够通过 ",(0,t.jsx)(e.strong,{children:"$t"})," 的方式将页面显示的文案返回到页面当中。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-diff",children:"import React from 'react'\nimport _ from 'lodash'\nimport { jsRuntime } from '../runtime'\n+ import { useTranslation } from 'react-i18next'\n\nexport const useParseBinding = (props: Record<string, any>, id?: string) => {\n\n+  const { t } = useTranslation()\n\n  const customizer = (value: any) => {\n    if (_.isPlainObject(value) && _.has(value, '$$jsx')) {\n      return jsRuntime.execute(value.$$jsx, {\n        ...props,\n+        $t: t\n      })?.value\n    }\n  }\n\n  const memoizedProps = React.useMemo(() => {\n    const data = _.cloneDeepWith(props, customizer)\n    return data\n  }, [props])\n\n  return memoizedProps\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["通过以上的改造，",(0,t.jsx)(e.strong,{children:"useParseBinding"}),"就已经可以支持多语种相关的文案渲染了。"]}),"\n",(0,t.jsxs)(e.h2,{id:"总结",children:["总结",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"以上就是基于react-i18next如何实现多语种方案的基础内容，后续就是将相关的配置平台和编辑器进行完善。在后续工作台内容相关的章节实现完成后，会将其整个模块进行串联，实现一站式的多语种文案管理。"}),"\n",(0,t.jsxs)(e.p,{children:["目前是通过",(0,t.jsx)(e.strong,{children:"jsRuntime"}),"来实现相关多语种文案的绑定使用，虽然这种方式能够解决我们的问题，但是随着业务复杂，在这基础之上理应针对多语种开辟一个新的空间和设置器来完成绑定的工作，不仅仅可以在语种提示上，还是在显示交互上都能有很大的优化空间。"]}),"\n",(0,t.jsxs)(e.h2,{id:"资源",children:["资源",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#资源",children:"#"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://www.i18next.com/overview/getting-started",target:"_blank",rel:"noopener noreferrer",children:"https://www.i18next.com/overview/getting-started"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://formatjs.io/",target:"_blank",rel:"noopener noreferrer",children:"https://formatjs.io/"})}),"\n"]}),"\n"]})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}let x=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F41.%E7%BB%84%E4%BB%B6%E5%AE%9E%E6%88%98%EF%BC%9A%E5%9B%BD%E9%99%85%E5%8C%96%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"国际化方案",id:"国际化方案",depth:2},{text:"实现原理",id:"实现原理",depth:2},{text:"基础实现",id:"基础实现",depth:2},{text:"安装",id:"安装",depth:3},{text:"初始化配置",id:"初始化配置",depth:3},{text:"Provider",id:"provider",depth:3},{text:"低代码结合",id:"低代码结合",depth:2},{text:"异步更新语言资源",id:"异步更新语言资源",depth:3},{text:"表达式配置",id:"表达式配置",depth:3},{text:"总结",id:"总结",depth:2},{text:"资源",id:"资源",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);