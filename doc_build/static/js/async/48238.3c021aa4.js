"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["48238"],{961914:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var s=r(552676),c=r(740453);let i=r.p+"static/image/cb33923a0818001f7b20a722ed96d0d1.62d16662.png";function l(e){let n=Object.assign({h2:"h2",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",code:"code",h3:"h3",h4:"h4",ol:"ol",blockquote:"blockquote",pre:"pre",img:"img"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"打包一个 Electron 应用程序简单来说就是通过构建工具创建一个桌面安装程序（.dmg、.exe、.deb 等）。在 Electron 早期作为 Atom 编辑器的一部分时，应用程序开发者通常通过手动编辑 Electron 二进制文件来为应用程序做分发准备。"}),"\n",(0,s.jsx)(n.p,{children:"随着时间的推移，Electron 社区构建了丰富的工具生态系统，用于处理 Electron 应用程序的各种分发任务，其中包括："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["应用程序打包 ",(0,s.jsx)(n.a,{href:"https://github.com/electron/packager",target:"_blank",rel:"noopener noreferrer",children:"@electron/packager"})]}),"\n",(0,s.jsxs)(n.li,{children:["代码签名，例如 ",(0,s.jsx)(n.a,{href:"https://github.com/electron/osx-sign",target:"_blank",rel:"noopener noreferrer",children:"@electron/osx-sign"})]}),"\n",(0,s.jsxs)(n.li,{children:["创建特定平台的安装程序，例如 ",(0,s.jsx)(n.a,{href:"https://github.com/electron/windows-installer",target:"_blank",rel:"noopener noreferrer",children:"windows-installer"})," 或 ",(0,s.jsx)(n.a,{href:"https://github.com/electron-userland/electron-installer-dmg",target:"_blank",rel:"noopener noreferrer",children:"electron-installer-dmg"})]}),"\n",(0,s.jsxs)(n.li,{children:["本地 Node.js 原生扩展模块重新构建 ",(0,s.jsx)(n.a,{href:"https://github.com/electron/rebuild",target:"_blank",rel:"noopener noreferrer",children:"@electron/rebuild"})]}),"\n",(0,s.jsxs)(n.li,{children:["通用 macOS 构建 ",(0,s.jsx)(n.a,{href:"https://github.com/electron/universal",target:"_blank",rel:"noopener noreferrer",children:"@electron/universal"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这样，应用程序开发者在开发 Electron 应用时，为了构建出跨平台的桌面端应用，不得不去了解每个包的功能并需要将这些功能进行组合构建，这对新手而言过于复杂，无疑是劝退的。"}),"\n",(0,s.jsxs)(n.p,{children:["所以，基于以上背景，产生出两套主流的一体化打包解决方案，一个是 Electron 官方出品的 ",(0,s.jsx)(n.a,{href:"https://github.com/electron/forge",target:"_blank",rel:"noopener noreferrer",children:"Electron Forge"}),"，另一个是社区提供的 ",(0,s.jsx)(n.a,{href:"https://github.com/electron-userland/electron-builder",target:"_blank",rel:"noopener noreferrer",children:"Electron Builder"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"这两个包都有各自的优势。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Electron Forge"})," ：因为是官方维护的产品，所以当 ",(0,s.jsx)(n.code,{children:"Electron"})," 支持新的应用程序构建功能时，它会立即集成这些新的能力。另外，",(0,s.jsx)(n.code,{children:"Electron Forge"})," 专注于将现有的工具组合成一个单一的构建流程，因此更易于跟踪代码的流程和扩展。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Electron Builder"}),"：Electron Builder 针对大多数构建任务重新编写了自己的内部逻辑，提供了丰富的功能，包括代码签名、发布支持、文件配置、多种目标构建等。Electron Builder 不限制使用的框架和打包工具，使得可以更加灵活地进行配置和打包。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["总而言之，就长期支持性而言，使用 ",(0,s.jsx)(n.code,{children:"Electron Forge"})," 会更好，但是 ",(0,s.jsx)(n.code,{children:"Electron Forge"})," 打包出来后的包体积会比 ",(0,s.jsx)(n.code,{children:"Electron Builder"})," 大不少。而 ",(0,s.jsx)(n.code,{children:"Electron Builder"})," 则是目前功能最丰富、使用最多的打包方案。比如：",(0,s.jsx)(n.a,{href:"https://nklayman.github.io/vue-cli-plugin-electron-builder/",target:"_blank",rel:"noopener noreferrer",children:"Vue CLI Plugin Electron Builder"}),"、",(0,s.jsx)(n.a,{href:"https://cn.electron-vite.org/",target:"_blank",rel:"noopener noreferrer",children:"electron-vite"})," 这些工具的打包默认情况下都是基于 ",(0,s.jsx)(n.code,{children:"Electron Builder"})," 的。所以，接下来的内容，我们将基于 ",(0,s.jsx)(n.code,{children:"Electron Builder"})," 介绍打包构建的过程。"]}),"\n",(0,s.jsxs)(n.h2,{id:"打包前准备",children:["打包前准备",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#打包前准备",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"1-应用程序签名",children:["1. 应用程序签名",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-应用程序签名",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Electron 代码签名是指对 Electron 应用程序进行数字签名，以验证应用程序的来源和完整性。这是一种安全措施，有助于确保应用程序未被篡改或恶意修改，并且可以追溯到可信任的开发者。默认情况下，Windows 和 macOS 都会禁止未签名的应用的下载或运行。"}),"\n",(0,s.jsxs)(n.h4,{id:"11-windows-签名",children:["1.1 windows 签名",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-windows-签名",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"windows 下给 Electron 程序做签名需要一个签名证书，这个证书可以手动制作，手动制作需要："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"获取一个 Windows 身份验证码签名证书（需要年度费用）；"}),"\n",(0,s.jsxs)(n.li,{children:["安装 Visual Studio 以获取签名工具（免费",(0,s.jsx)(n.a,{href:"https://visualstudio.microsoft.com/vs/community/",target:"_blank",rel:"noopener noreferrer",children:"社区版"}),"已足够）。"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["详细制作教程可以参考这篇文章：",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/6954289571131555871",target:"_blank",rel:"noopener noreferrer",children:"创建数字证书PFX"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["也可以付费购买，常见的数字证书服务商有：",(0,s.jsx)(n.a,{href:"https://cheapsslsecurity.com/",target:"_blank",rel:"noopener noreferrer",children:"CheapSSLSecurity"}),"、",(0,s.jsx)(n.a,{href:"https://www.digicert.com/dc/code-signing/microsoft-authenticode.htm",target:"_blank",rel:"noopener noreferrer",children:"digicert"}),"，但是价格好像都挺贵的，比如 CheapSSLSecurity 购买一年需要 83 美元。详细的使用教程可以参考这篇文章：",(0,s.jsx)(n.a,{href:"https://oldj.net/article/2022/07/15/code-signing-with-electron-on-windows/",target:"_blank",rel:"noopener noreferrer",children:"Electron 在 Windows 下的代码签名"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["不管是手动制作还是付费购买，最后都会生成一个 ",(0,s.jsx)(n.code,{children:".pfx"})," 格式的文件。然后再配置一下 ",(0,s.jsx)(n.code,{children:"electron-builder"})," 进行签名："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'"build": {\n  "appId": "XXXX",\n  "productName": "XXX",\n  "win": {\n    // 以下是证书签名配置\n    "verifyUpdateCodeSignature": false,\n    "signingHashAlgorithms": [\n      "sha256"\n    ],\n    "signDlls": false,\n    "rfc3161TimeStampServer": "http://timestamp.comodoca.com/rfc3161",\n    "certificateFile": "XXX.pfx",\n    "certificatePassword": "XXXX"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["其中，",(0,s.jsx)(n.code,{children:"signingHashAlgorithms"})," 代表的是签名算法；",(0,s.jsx)(n.code,{children:"certificateFile"})," 表示的是要签名的 ",(0,s.jsx)(n.code,{children:"*.pfx"})," 证书的路径；",(0,s.jsx)(n.code,{children:"certificatePassword"})," 是 ",(0,s.jsx)(n.code,{children:"*.pfx"})," 的证书密码。"]}),"\n",(0,s.jsx)(n.p,{children:"随后便是正常的打包过程。"}),"\n",(0,s.jsxs)(n.h4,{id:"12-macos-签名",children:["1.2 macOS 签名",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-macos-签名",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先，需要加入 ",(0,s.jsx)(n.a,{href:"https://developer.apple.com/cn/support/app-account/",target:"_blank",rel:"noopener noreferrer",children:"Apple Developer Program"}),"，加入苹果开发者需要缴纳 ",(0,s.jsx)(n.code,{children:"688 元"}),"/年的年费，然后需要对应用做签名和公正。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"签名："})," 是指使用开发者的数字证书对应用进行加密，以确保应用没有被篡改过。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"公证："})," 是指将应用提交给苹果公司进行审核，并获得苹果公司的认证和授权，以证明应用是安全可信的。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"签名"})}),"\n",(0,s.jsx)(n.p,{children:"签名需要向 Apple 申请证书，大致步骤如下："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"在本地创建一个 csr 文件（Certificate Signing Request），作为获取密钥的凭证；"}),"\n",(0,s.jsx)(n.li,{children:"通过 csr 文件从官网下载 cer 证书；"}),"\n",(0,s.jsx)(n.li,{children:"双击将证书导入到钥匙串，然后导出成 p12 证书。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"公正"})}),"\n",(0,s.jsx)(n.p,{children:"2020 年 2 月 3 日起，Mac App Store 以外通过其他途径分发的 Mac 软件必须经过 Apple 公证，才能在 macOS Catalina 中运行，否则在 MacOS 10.14.5 之后，那么就会弹出“恶意软件”提示框。"}),"\n",(0,s.jsx)(n.p,{children:"这时就需要在应用签名之后，再进行公证（notarize app），公正的作用是将签名后的安装包上传到 Apple 审查，获得公证后，应用会被苹果公司加入到 “Gatekeeper” 应用白名单中，这意味着用户的 macOS 系统会默认信任这个应用的来源，并允许其运行。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Electron"})," 官方提供了 ",(0,s.jsx)(n.a,{href:"https://github.com/electron/electron-notarize",target:"_blank",rel:"noopener noreferrer",children:"electron-notarize"})," 包来进行公正："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { notarize } from 'electron-notarize';\n\nasync function packageTask () {\n  await notarize({\n    appBundleId, // bundleId\n    appPath, // 文件路径\n    appleId, // apple公证账号\n    appleIdPassword, // apple公证专用密钥\n    ascProvider, // 证书提供者\n  });\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"公正结束后，会生成数字签名凭证，需要用下面的命令把凭证放到 dmg 文件中："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'xcrun stapler staple "electron-app.dmg"\n# 第19章—通用篇：Electron应用打包\n# The staple and validate action worked!\n'})}),"\n",(0,s.jsxs)(n.p,{children:["更多细节内容，推荐参考阅读：",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/7009179524520738824",target:"_blank",rel:"noopener noreferrer",children:"Electron-builder 构建MacOS应用小白教程（打包 & 签名 & 公证 & 上架）"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["后续，如果你的应用程序需要上架到 Mac App Store，可以阅读官方的操作指南：",(0,s.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/tutorial/mac-app-store-submission-guide",target:"_blank",rel:"noopener noreferrer",children:"Mac App Store 应用程序提交指南"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-图标制作",children:["2. 图标制作",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-图标制作",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"首先，需要准备 APP logo 图，尺寸是 1024 * 1024 的 png 图片。"}),"\n",(0,s.jsxs)(n.p,{children:["在 windows 下，需要将 png 转成 ",(0,s.jsx)(n.code,{children:".ico"})," 格式图标，可以使用 ",(0,s.jsx)(n.a,{href:"https://www.aconvert.com/cn/icon/png-to-ico/",target:"_blank",rel:"noopener noreferrer",children:"aconvert"})," 网站进行操作，一般转成 256x256 的尺寸就可以了。"]}),"\n",(0,s.jsxs)(n.p,{children:["在 macOS 下，需要将 png 转成 ",(0,s.jsx)(n.code,{children:".icns"})," 格式图标。假设 1024 * 1024 的 png 图标名字为 ",(0,s.jsx)(n.code,{children:"icon.png"}),"，首先命令行通过 ",(0,s.jsx)(n.code,{children:"mkdir icons.iconset"})," 命令创建一个临时目录存放不同大小的图片，然后把原图片转为不同大小的图片，并放入上面的临时目录："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 全部拷贝到命令行回车执行，icons.iconset查看十张图片是否生成好\nsips -z 16 16     icon.png --out icons.iconset/icon_16x16.png\nsips -z 32 32     icon.png --out icons.iconset/icon_16x16@2x.png\nsips -z 32 32     icon.png --out icons.iconset/icon_32x32.png\nsips -z 64 64     icon.png --out icons.iconset/icon_32x32@2x.png\nsips -z 128 128   icon.png --out icons.iconset/icon_128x128.png\nsips -z 256 256   icon.png --out icons.iconset/icon_128x128@2x.png\nsips -z 256 256   icon.png --out icons.iconset/icon_256x256.png\nsips -z 512 512   icon.png --out icons.iconset/icon_256x256@2x.png\nsips -z 512 512   icon.png --out icons.iconset/icon_512x512.png\nsips -z 1024 1024 icon.png --out icons.iconset/icon_512x512@2x.png\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后通过 ",(0,s.jsx)(n.code,{children:"iconutil"})," 来生成 icns 文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"iconutil -c icns icons.iconset -o icon.icns\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"electron-builder-使用",children:["electron-builder 使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#electron-builder-使用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["前面我们简单介绍了 ",(0,s.jsx)(n.code,{children:"electron-builder"})," 的基本概念，它是一个 Electron 应用程序打包构建工具，开发者只需要在 ",(0,s.jsx)(n.code,{children:"package.json"})," 中添加 ",(0,s.jsx)(n.code,{children:"build"})," 字段，然后增加一些配置就可以快速打包。"]}),"\n",(0,s.jsxs)(n.p,{children:["由于我们通常会使用 ",(0,s.jsx)(n.a,{href:"https://nklayman.github.io/vue-cli-plugin-electron-builder/",target:"_blank",rel:"noopener noreferrer",children:"Vue CLI Plugin Electron Builder"}),"、",(0,s.jsx)(n.a,{href:"https://cn.electron-vite.org/",target:"_blank",rel:"noopener noreferrer",children:"electron-vite"})," 作为我们桌面端开发脚手架工具，其中已经集成好了 ",(0,s.jsx)(n.code,{children:"electron-builder"}),"，我们不需要手动安装。但是配置文件的位置会有所不同，在 ",(0,s.jsx)(n.code,{children:"Vue CLI Plugin Electron Builder"})," 中，配置文件是存放在 ",(0,s.jsx)(n.code,{children:"vue.config.js"})," 中的 ",(0,s.jsx)(n.code,{children:"pluginOptions.electronBuilder.builderOptions"})," 字段内。而 ",(0,s.jsx)(n.code,{children:"electron-vite"})," 则是通过一个 ",(0,s.jsx)(n.code,{children:"electron-builder.yml"})," 文件单独存放。但是不管是哪种工具，其实核心配置字段都是一致的，一份简单的配置示例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'"build": {\n  // 应用 id\n  "appId": "com.muwoo.rubick",\n  // 应用名\n  "productName": "rubick",\n  // 输入输出目录相关的配置项\n  "directories": {\n    // 打包的代码目录\n    "app": "dist",\n    // 构建包的资源目录\n    "buildResources": "resource",\n    // 存放产包的目录\n    "output": "release"\n  },\n  // 是否使用asar加密\n  "asar": true,\n  // macOS 系统下的专属配置\n  "mac": {},\n  // Windows 系统下的专属配置\n  "win": {},\n  // Linux 系统下的专属配置\n  "linux": {},\n  // ... \n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["另外，我们上面为不同平台制作的图标，也需要在 ",(0,s.jsx)(n.code,{children:"electron-builder"})," 中进行设置，比如 ",(0,s.jsx)(n.code,{children:"Windows"})," 下的配置项："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'"win": {\n  // 构建的应用图标地址\n  "icon": "public/icons/icon.ico",\n  // 构建后的产物名称\n  "artifactName": "rubick-Setup-${version}-${arch}.exe",\n  // 构建目标系统产物\n  "target": [\n    {\n      "target": "nsis",\n      "arch": ["x64", "ia32"]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["除此之外，",(0,s.jsx)(n.code,{children:"electron-builder"})," 也支持在构建的各个阶段插入一些钩子函数，比如我们需要在构建完成时，自定义一些操作动作："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'"build": {\n  "afterPack": "./release.js",\n}	\n'})}),"\n",(0,s.jsxs)(n.p,{children:["然后，",(0,s.jsx)(n.code,{children:"release.js"})," 就可以自定义操作函数："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// release.js\nexports.default = async function () {\n  // ...\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["更多关于 ",(0,s.jsx)(n.code,{children:"electron-builder"})," 的使用介绍，也可以阅读官方文档：",(0,s.jsx)(n.a,{href:"https://www.electron.build",target:"_blank",rel:"noopener noreferrer",children:"https://www.electron.build"})]}),"\n",(0,s.jsx)(n.p,{children:"完成配置后，接下来只需要执行构建命令，就会根据当前的操作系统构建出不同的安装包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# vue-cli-plugin-electron-builder\nnpm run electron:build\n\n# electron-vite\nnpm run build:mac\n# or\nnpm run build:win\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"asar-文件",children:["asar 文件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#asar-文件",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Electron 应用中的前端代码最终会打包成\xa0",(0,s.jsx)(n.a,{href:"https://github.com/electron/asar",target:"_blank",rel:"noopener noreferrer",children:"asar"}),"\xa0文件。",(0,s.jsx)(n.code,{children:"asar"})," 是一种文件归档方式，类似于 ",(0,s.jsx)(n.code,{children:"tar"})," 包，把多个目录和文件合并在一起，但是并不进行压缩。因为一个包里容纳了多个文件，所以需要对各个文件做索引，加上这些索引信息后，",(0,s.jsx)(n.code,{children:".asar"})," 文件大小实际上超过各个文件加起来的总和。"]}),"\n",(0,s.jsxs)(n.p,{children:["既然 ",(0,s.jsx)(n.code,{children:"asar"})," 文件不进行压缩也不进行加密，那么为什么 Electron 要使用 ",(0,s.jsx)(n.code,{children:"asar"})," 呢？官方也给了一些解释："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"如果我们的程序依赖的某些资源路径很深，而在 Windows 上对资源路径的长度是有限制的，路径过长就会加载失败，使用 asar 打包就能绕开这个问题。"}),"\n",(0,s.jsxs)(n.li,{children:["程序运行时加载一个 ",(0,s.jsx)(n.code,{children:".asar"})," 文件，相对于加载不同路径的文件而言，加快了 ",(0,s.jsx)(n.code,{children:"require"})," 函数的加载文件的速度。"]}),"\n",(0,s.jsx)(n.li,{children:"避免向用户直接暴露代码文件。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["好了，介绍完 ",(0,s.jsx)(n.code,{children:"asar"})," 后，我们再来说一下 ",(0,s.jsx)(n.code,{children:"asar"})," 存档的一些局限性："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"asar 文件是只读的，所以 Node APIs 里那些会修改文件的方法在使用 asar 文件时都无法正常工作。"}),"\n",(0,s.jsx)(n.li,{children:"asar 中的目录不能被设置成工作目录（working directory），这是因为 asar 是一个并不存在虚拟目录。"}),"\n",(0,s.jsx)(n.li,{children:"需要将 asar 中的文件解压出来才能运行 node.js 的部分 API。"}),"\n",(0,s.jsx)(n.li,{children:"fs.stat 返回的信息是不真实的。这个也是因为 asar 是一个虚拟目录。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["1、2、4 三点大多数对我们的影响并不大，但是第三点需要特别注意，还记得我们在",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304830272770408498",target:"_blank",rel:"noopener noreferrer",children:"《Electron 的原生能力》"}),"章节介绍过使用的 ",(0,s.jsx)(n.code,{children:"child_process.execFile"})," 能力调用可执行文件的介绍。如果我们将这个可执行程序 ",(0,s.jsx)(n.code,{children:".exe"})," 一起打包进入 ",(0,s.jsx)(n.code,{children:".asar"})," 虚拟文件中，因为 node.js 的 ",(0,s.jsx)(n.code,{children:"execFile"})," 不支持执行 ",(0,s.jsx)(n.code,{children:"asar"})," 中的虚拟文件，所以 Electron 会将所需的 ",(0,s.jsx)(n.code,{children:".exe"})," 文件提取到临时文件中，并将临时文件的路径传递给这些 API，以使其正常工作，对于这类 API，会增加一些开销。"]}),"\n",(0,s.jsxs)(n.p,{children:["除了 ",(0,s.jsx)(n.code,{children:"child_process.execFile"})," 这个 API 外，其他的还有："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"child_process.execFile"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"child_process.execFileSync"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"fs.open"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"fs.openSync"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"process.dlopen"}),"\xa0- 用在\xa0",(0,s.jsx)(n.code,{children:"require"}),"\xa0原生模块时"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["除此之外，有一些 Node API 不支持在 ASAR 存档中执行二进制文件，例如\xa0",(0,s.jsx)(n.code,{children:"child_process.exec"}),"、",(0,s.jsx)(n.code,{children:"child_process.spawn"}),"。所以，我们尽量不要将一些 Node 原生模块（比如：",(0,s.jsx)(n.code,{children:"sqlite"})," ）、二进制文件（比如：",(0,s.jsx)(n.code,{children:"*.node"}),"、",(0,s.jsx)(n.code,{children:"*.exe"}),"）打包进 ",(0,s.jsx)(n.code,{children:"asar"})," 文档中。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果你使用的是 ",(0,s.jsx)(n.a,{href:"https://nklayman.github.io/vue-cli-plugin-electron-builder/",target:"_blank",rel:"noopener noreferrer",children:"Vue CLI Plugin Electron Builder"}),"，那么你可以在 ",(0,s.jsx)(n.code,{children:"vue.config.js"})," 中的 ",(0,s.jsx)(n.code,{children:"pluginOptions.electronBuilder.externals"})," 中配置需要提取的模块："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"pluginOptions: {\n  electronBuilder: {\n    // ...\n    externals: [\n      'pouchdb',\n      'extract-file-icon',\n      'electron-screenshots',\n    ],\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果你使用的是 ",(0,s.jsx)(n.a,{href:"https://cn.electron-vite.org/",target:"_blank",rel:"noopener noreferrer",children:"electron-vite"}),"，那么你可以在 ",(0,s.jsx)(n.code,{children:"electron-builder.yml"})," 中添加如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"asarUnpack:\n  - node_modules/sqlite3\n  - out/main/chunks/*.node\n  - resources/*\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"集成到-github-actions-跨平台构建",children:["集成到 github Actions 跨平台构建",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#集成到-github-actions-跨平台构建",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们知道，Electron 是一个可以构建跨平台的桌面端工具，我们可以把 Electron 应用程序打包成不同平台的安装包。但是，需要注意的是打包成不同平台的安装包需要我们使用不同的操作系统进行打包。比如我们需要打包 ",(0,s.jsx)(n.code,{children:".dmg、.exe、.deb"})," 这三个安装包文件，那么我们就需要使用三套操作系统来分别打包。所以，你可能需要通过一些 ",(0,s.jsx)(n.code,{children:"CI"})," 工具来帮助你完成多端打包能力。"]}),"\n",(0,s.jsxs)(n.p,{children:["这里，为了方便演示和讲解，我们以 ",(0,s.jsx)(n.code,{children:"github Actions"})," 作为示例，演示如何将你的应用程序集成到自动化构建流程中。"]}),"\n",(0,s.jsxs)(n.h3,{id:"什么是-github-actions",children:["什么是 github Actions?",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是-github-actions",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"GitHub Actions 是 GitHub 提供的一项功能，用于自动化软件开发工作流程。它允许在特定事件发生时执行自定义的自动化操作，例如代码提交、拉取请求、问题创建等。通过 Actions，开发者可以配置一系列步骤和任务，使得在特定事件触发时，自动运行这些任务。"}),"\n",(0,s.jsx)(n.p,{children:"gitHub Actions 有一些概念需要简单介绍下："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"workflow"}),"（工作流程）：持续集成一次运行的过程，就是一个 workflow。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"job"}),"（任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"step"}),"（步骤）：每个 job 由多个 step 构成，一步步完成。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"action"}),"（动作）：每个 step 可以依次执行一个或多个命令（action）。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["工作流程文件是使用 ",(0,s.jsx)(n.a,{href:"https://www.ruanyifeng.com/blog/2016/07/yaml.html",target:"_blank",rel:"noopener noreferrer",children:"YAML 格式"}),"编写的，可以在仓库的 ",(0,s.jsx)(n.code,{children:".github/workflows"})," 目录下创建，文件名可以任意取，但是后缀名统一为 ",(0,s.jsx)(n.code,{children:".yml"}),"，比如 ",(0,s.jsx)(n.code,{children:"main.yml"}),"。一个库可以有多个 workflow 文件。GitHub 只要发现",(0,s.jsx)(n.code,{children:".github/workflows"}),"目录里面有",(0,s.jsx)(n.code,{children:".yml"}),"文件，就会自动运行该文件。"]}),"\n",(0,s.jsxs)(n.h3,{id:"如何编写-github-actions",children:["如何编写 github Actions",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何编写-github-actions",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["拿 ",(0,s.jsx)(n.code,{children:"rubick"})," 的 ",(0,s.jsx)(n.code,{children:"github Actions"})," 配置文件举例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"# .github/workflows/main.yml\n# Workflow 的名称\nname: Build\n\n# Workflow 的触发条件\non:\n  push:\n    branches:\n      - master\n\n# Workflow 的 jobs\njobs:\n  release:\n    # job 的 名称\n    name: build and release electron app\n\n    # 运行平台，取自 strategy 中的 matrix\n    runs-on: ${{ matrix.os }}\n\n    # create a build matrix for jobs\n    strategy:\n      fail-fast: false\n      matrix:\n        # 执行的操作系统\n        os: [macos-11, windows-2019, ubuntu-latest]\n\n    # 创建 steps 代码库\n    steps:\n      # 引用一些 actions\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n      # step1: check out repository\n      - name: Check out git repository\n        uses: actions/checkout@v2\n\n      # step2: 安装 nodejs 环境\n      - name: Install Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: 16.x\n      # step3: 安装特殊环境依赖项\n      - name: Install system deps\n        if: matrix.os == 'ubuntu-latest'\n        run: |\n          sudo apt-get install libxtst-dev libpng++-dev\n          sudo apt-get install --no-install-recommends -y icnsutils graphicsmagick xz-utils\n          sudo snap install snapcraft --classic\n      # step4: yarn\n      - name: Yarn install\n        run: |\n          yarn\n          yarn global add xvfb-maybe\n          yarn global add @vue/cli\n      # step5: 构建发布  \n      - name: Build  & release app\n        run: |\n          npm run release\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["以上 ",(0,s.jsx)(n.code,{children:"yml"})," 文件描述了当我们把代码 ",(0,s.jsx)(n.code,{children:"push"})," 到 ",(0,s.jsx)(n.code,{children:"master"})," 分支时，会触发 ",(0,s.jsx)(n.code,{children:"jobs"})," 执行。",(0,s.jsx)(n.code,{children:"jobs"})," 会分别在 ",(0,s.jsx)(n.code,{children:"macos-11, windows-2019, ubuntu-latest"})," 三套环境中运行构建任务。完成构建后，会将我们构建完成的三个平台的可执行程序上传到 ",(0,s.jsx)(n.code,{children:"github release"})," 中："]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["需要注意的是，上传构建包到 github Actions 中需要在 yml 配置一下 GH_TOKEN 这个字段，你可以在你仓库的项目 ",(0,s.jsx)(n.code,{children:"xxx/settings/secrets/actions"})," 路径下进行设置。\n",(0,s.jsx)("img",{src:i,alt:"image.png"})]}),"\n",(0,s.jsxs)(n.p,{children:["另外，workflow 文件的配置字段非常多，如果你有其他的诉求，可以详见",(0,s.jsx)(n.a,{href:"https://help.github.com/en/articles/workflow-syntax-for-github-actions",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本小节，我们介绍了 Electron 应用程序打包过程中使用的两个主流工具：Electron Forge 和 Electron Builder。并介绍了它们各自的优势和劣势：对于长期支持性，Electron Forge 可能更适合，但打包出的包体积会比 Electron Builder 大。"}),"\n",(0,s.jsx)(n.p,{children:"同时，我们也介绍了打包前的准备工作，如应用程序签名和图标制作的方法。还详细讲解了 asar 文件、Electron Builder 的使用配置以及如何集成到 GitHub Actions 进行跨平台构建。"}),"\n",(0,s.jsx)(n.p,{children:"有了这些基础，接下来我们需要再学习另外一个重要部分，那就是 Electron 应用程序的更新。"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let d=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC19%E7%AB%A0%E2%80%94%E9%80%9A%E7%94%A8%E7%AF%87%EF%BC%9AElectron%E5%BA%94%E7%94%A8%E6%89%93%E5%8C%85.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"打包前准备",id:"打包前准备",depth:2},{text:"1. 应用程序签名",id:"1-应用程序签名",depth:3},{text:"1.1 windows 签名",id:"11-windows-签名",depth:4},{text:"1.2 macOS 签名",id:"12-macos-签名",depth:4},{text:"2. 图标制作",id:"2-图标制作",depth:3},{text:"electron-builder 使用",id:"electron-builder-使用",depth:2},{text:"asar 文件",id:"asar-文件",depth:2},{text:"集成到 github Actions 跨平台构建",id:"集成到-github-actions-跨平台构建",depth:2},{text:"什么是 github Actions?",id:"什么是-github-actions",depth:3},{text:"如何编写 github Actions",id:"如何编写-github-actions",depth:3},{text:"总结",id:"总结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);