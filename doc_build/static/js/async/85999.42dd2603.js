"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["85999"],{131427:function(e,s,n){e.exports=n.p+"static/image/a967108ccf39f4bfd87031fa89e02fb8.1428bfef.webp"},672016:function(e,s,n){n.r(s),n.d(s,{default:()=>o});var d=n(552676),c=n(740453);let r=n.p+"static/image/c828103ea6de277151122959afab71fd.116e2aed.webp";var i=n(131427);let h=n.p+"static/image/fa743eba195663b541cbb71e1b7bd605.e7daa326.webp",l=n.p+"static/image/a7063bf84bb0c6e7472485870e246882.2307b396.webp";function x(e){let s=Object.assign({h1:"h1",a:"a",h3:"h3",p:"p",code:"code",strong:"strong",img:"img",ul:"ul",li:"li",input:"input",h5:"h5",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",hr:"hr"},(0,c.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(s.h1,{id:"1开篇落地前端工程化告别纸上谈兵",children:["1.开篇：落地前端工程化，告别纸上谈兵！",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#1开篇落地前端工程化告别纸上谈兵",children:"#"})]}),"\n",(0,d.jsxs)(s.h3,{id:"前言",children:["前言",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["近些年来，随着前端项目复杂度的不断提高，",(0,d.jsx)(s.code,{children:"前端工程化"}),"被越来越多的公司与开发者所重视。"]}),"\n",(0,d.jsxs)(s.p,{children:["从业务层面来说",(0,d.jsx)(s.code,{children:"前端工程化"}),"俨然已成为一线互联网前端团队的标配，稍具规模的团队都会根据自身业务设计出一套符合当前业务需求的前端架构。从开发者角度来说",(0,d.jsx)(s.code,{children:"前端工程化"}),"已逐渐成为",(0,d.jsx)(s.strong,{children:"普通前端"}),"与",(0,d.jsx)(s.strong,{children:"资深前端"}),"的分界线。例如很多大厂的普通前端只负责编写业务代码，而资深前端则会使用",(0,d.jsx)(s.code,{children:"前端工程化"}),"解决生产问题，以接触更高层次的",(0,d.jsx)(s.code,{children:"前端架构设计"}),"，向技术管理岗晋升。"]}),"\n",(0,d.jsxs)(s.p,{children:["这也是为何很多",(0,d.jsx)(s.code,{children:"前端开发者"}),"已熟练使用",(0,d.jsx)(s.code,{children:"react/vue/next/nuxt"}),"等前端框架，但升职加薪依然遥不可及，因此",(0,d.jsx)(s.strong,{children:"前端开发者想要突破工作局限性，实现跳跃式涨薪，掌握前端工程化必不可少！"})]}),"\n",(0,d.jsxs)(s.h3,{id:"概念前端工程化是什么",children:["概念：前端工程化是什么",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#概念前端工程化是什么",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["说了这么多，",(0,d.jsx)(s.code,{children:"前端工程化"}),"到底是什么？",(0,d.jsx)(s.strong,{children:"前端工程化"}),"指使用软件工程的技术与方法对前端开发的技术、工具、流程、经验、方案等指标",(0,d.jsx)(s.code,{children:"标准化"}),"，它具备",(0,d.jsx)(s.strong,{children:"模块化"}),"、",(0,d.jsx)(s.strong,{children:"组件化"}),"、",(0,d.jsx)(s.strong,{children:"规范化"}),"、",(0,d.jsx)(s.strong,{children:"自动化"}),"四大特性，主要目的是",(0,d.jsx)(s.code,{children:"降低成本"}),"与",(0,d.jsx)(s.code,{children:"增加效率"}),"。"]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)("img",{src:l,alt:"前端工程化"})}),"\n",(0,d.jsxs)(s.p,{children:["很多同学在不了解",(0,d.jsx)(s.code,{children:"前端工程化"}),"前，遇到以下情况经常不知所措。"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"构建配置、打包配置、公共组件、工具函数等代码片段，每次新开项目都要复制粘贴"}),"\n",(0,d.jsx)(s.li,{children:"团队成员的编码风格大相径庭，导致从仓库拉取下来的代码运行起来让控制台一片红"}),"\n",(0,d.jsx)(s.li,{children:"团队协作的规范、环境、模块、仓库和文档，太多基建措施导致团队新成员无从入手"}),"\n",(0,d.jsx)(s.li,{children:"随着需求迭代引起项目结构与工程文件不断变化，处理不当让项目直接走向重构道路"}),"\n"]}),"\n",(0,d.jsx)(s.p,{children:"随着需求迭代的步伐加速，上述问题甚至更多问题无可避免地发生，若一开始未对项目做一些相关工程化措施，项目维度会变得凌乱不堪，甚至达到无法维护的可能，最终只会走向重构道路。"}),"\n",(0,d.jsxs)(s.p,{children:["实际上只要将",(0,d.jsx)(s.code,{children:"前端工程化"}),"的开发思维与解决方案应用到项目中，利用好它的优势，就能轻松实现这些非业务需求，为业务降本增效。"]}),"\n",(0,d.jsxs)(s.p,{children:["总之，",(0,d.jsx)(s.code,{children:"前端工程化"}),"不是某个具体的工具，而是",(0,d.jsx)(s.strong,{children:"对项目的整体架构与整体规划，使开发者能在未来可判时间内动态规划发展走向，以提升整个项目对用户的服务周期"}),"。学习",(0,d.jsx)(s.code,{children:"前端工程化"}),"不仅能理解清楚一个项目的完整流程，遇到困难也能在复杂的流程中快速定位并解决问题，还能根据自身知识储备制定一些可扩展流程，甚至可预见项目的未来发展方向。"]}),"\n",(0,d.jsxs)(s.h3,{id:"课程如何系统学习前端工程化",children:["课程：如何系统学习前端工程化",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#课程如何系统学习前端工程化",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["想要系统学习",(0,d.jsx)(s.code,{children:"前端工程化"}),"不是一件容易的事情。看到这，有些同学可能会说：不就是封装组件库嘛，我也会",(0,d.jsx)(s.code,{children:"前端工程化"}),"呀！"]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"前端工程化"}),"可不只是会封装组件库就行。"]}),"\n",(0,d.jsxs)(s.p,{children:["首先要有明确前后端任务分离的能力。简而言之，能一眼看出该任务属于前端还是后端，划分好前后端的职责更利于",(0,d.jsx)(s.code,{children:"前端工程化"}),"的接入。这也是基于",(0,d.jsx)(s.code,{children:"前端工程化"}),"解决问题的基础。"]}),"\n",(0,d.jsxs)(s.p,{children:["其次要掌握",(0,d.jsx)(s.code,{children:"前端工程化"}),"的四大核心特性，",(0,d.jsx)(s.strong,{children:"模块化"}),"、",(0,d.jsx)(s.strong,{children:"组件化"}),"、",(0,d.jsx)(s.strong,{children:"规范化"}),"和",(0,d.jsx)(s.strong,{children:"自动化"}),"。知道它们如何实现，它们各自标准是什么，因为所有前端工作流程都离不开这些核心内容。"]}),"\n",(0,d.jsxs)(s.p,{children:["虽然很多社区也有一些",(0,d.jsx)(s.code,{children:"前端工程化"}),"相关文章教程，但它们只针对",(0,d.jsx)(s.code,{children:"前端工程化"}),"的某个技能，零零星星的知识点与断层式的学习很难充分实践",(0,d.jsx)(s.code,{children:"前端工程化"}),"。"]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)("img",{src:h,alt:"作者介绍"})}),"\n",(0,d.jsxs)(s.p,{children:["作为一名",(0,d.jsx)(s.code,{children:"网易"}),"的资深前端工程师，近三年来，我一直在",(0,d.jsx)(s.code,{children:"前端工程化"}),"领域实践，利用工程架构的知识重构了众多项目，包括但不限于",(0,d.jsx)(s.code,{children:"脚手架"}),"、",(0,d.jsx)(s.code,{children:"组件库"}),"、",(0,d.jsx)(s.code,{children:"工具库"}),"、",(0,d.jsx)(s.code,{children:"多包仓库"}),"、",(0,d.jsx)(s.code,{children:"私有仓库"}),"、",(0,d.jsx)(s.code,{children:"接口系统"}),"、",(0,d.jsx)(s.code,{children:"文档系统"}),"、",(0,d.jsx)(s.code,{children:"监控系统"}),"、",(0,d.jsx)(s.code,{children:"CI/CD"}),"、",(0,d.jsx)(s.code,{children:"可移植容器"}),"等。有了这些",(0,d.jsx)(s.code,{children:"前端工程化"}),"技术的加持，我负责的项目也从手动处理流程全部替换为自动处理流程，以解放团队双手，让其他成员更专注于自身业务需求。"]}),"\n",(0,d.jsxs)(s.p,{children:["基于此，我将这些经验总结下来，希望通过本课程与你分享。为了让",(0,d.jsx)(s.code,{children:"前端工程化"}),"的课程适合更多开发者，我会以小白的身份，与你一起深入工程的各个环节，带领你走完",(0,d.jsx)(s.code,{children:"前端工程化"}),"落地的全过程。"]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)("img",{src:i,alt:"前端工程化"})}),"\n",(0,d.jsxs)(s.p,{children:["本课程主要分为",(0,d.jsx)(s.strong,{children:"6大模块"}),"。"]}),"\n",(0,d.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,d.jsxs)(s.li,{className:"task-list-item",children:[(0,d.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,d.jsx)(s.strong,{children:"规范篇"}),"：熟悉",(0,d.jsx)(s.code,{children:"模块/代码/提交"}),"三大开发阶段规范，通过规范约束自己，保障工作质量与提升开发效率"]}),"\n",(0,d.jsxs)(s.li,{className:"task-list-item",children:[(0,d.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,d.jsx)(s.strong,{children:"服务篇"}),"：熟悉",(0,d.jsx)(s.code,{children:"云服务器/域名系统/站服务器"}),"部署服务环境，掌握整体部署与工具配置，学会独立上线应用与服务"]}),"\n",(0,d.jsxs)(s.li,{className:"task-list-item",children:[(0,d.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,d.jsx)(s.strong,{children:"环境篇"}),"：熟悉",(0,d.jsx)(s.code,{children:"Node/Nvm/Npm"}),"部署开发环境，独立搭建一个",(0,d.jsx)(s.code,{children:"接口服务"}),"，实践",(0,d.jsx)(s.code,{children:"环境/镜像/数据/进程"}),"四种",(0,d.jsx)(s.code,{children:"Node"}),"应用方式"]}),"\n",(0,d.jsxs)(s.li,{className:"task-list-item",children:[(0,d.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,d.jsx)(s.strong,{children:"构建篇"}),"：熟悉",(0,d.jsx)(s.code,{children:"构建工具"}),"打包类库模块，独立封装一个",(0,d.jsx)(s.code,{children:"类库模块"}),"，结合",(0,d.jsx)(s.code,{children:"测试用例"}),"保障代码的生产质量"]}),"\n",(0,d.jsxs)(s.li,{className:"task-list-item",children:[(0,d.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,d.jsx)(s.strong,{children:"组织篇"}),"：熟悉",(0,d.jsx)(s.code,{children:"Monorepo模式"}),"管理多包仓库，独立维护一个",(0,d.jsx)(s.code,{children:"多包仓库"}),"，结合",(0,d.jsx)(s.code,{children:"Npm Scope"}),"发布模块到公共仓库"]}),"\n",(0,d.jsxs)(s.li,{className:"task-list-item",children:[(0,d.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,d.jsx)(s.strong,{children:"部署篇"}),"：熟悉",(0,d.jsx)(s.code,{children:"自动化工具"}),"部署前端项目，独立打造一个",(0,d.jsx)(s.code,{children:"私有仓库"}),"与",(0,d.jsx)(s.code,{children:"文档站点"}),"，结合",(0,d.jsx)(s.code,{children:"CI/CD"}),"在提交代码时自动部署到公网"]}),"\n"]}),"\n",(0,d.jsxs)(s.h3,{id:"细节前端工程化的特性",children:["细节：前端工程化的特性",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#细节前端工程化的特性",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["对于",(0,d.jsx)(s.code,{children:"前端工程化"}),"的四大特性，在进入学习前有必要了解它们各自的细节。"]}),"\n",(0,d.jsxs)(s.h5,{id:"模块化",children:["模块化",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#模块化",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.strong,{children:"模块化"}),"指将一个复杂应用根据预设规范封装为多个块并组合起来，对内实现数据私有化，对外暴露接口与其它模块通信。"]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"模块化"}),"是",(0,d.jsx)(s.code,{children:"前端工程化"}),"的重中之重。它在",(0,d.jsx)(s.code,{children:"前端工程化"}),"中具体表现为：在文件层面上对代码与资源实现拆分与组装，将一个大文件拆分为互相依赖的小文件，再统一拼装与加载。"]}),"\n",(0,d.jsxs)(s.p,{children:["对于一个完善的",(0,d.jsx)(s.code,{children:"Web项目"}),"，一般是",(0,d.jsx)(s.code,{children:"SPA/MPA"}),"，推荐使用以下目录结构将整个项目划分为各种通用模块。为了让目录结构更突出其功能，就不包括那些杂七杂八的工具链配置文件了。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-txt",children:"project\n├─ dist          # 输出目录\n│  ├─ prod         # 生产环境执行代码\n│  └─ test         # 测试环境执行代码\n├─ src           # 源码目录\n│  ├─ apis         # 接口模块：包括全局接口请求的功能，控制数据定向转换\n│  ├─ assets       # 资源模块：包括样式、脚本、字体、图像、音频、视频等资源文件\n│  ├─ components   # 组件模块：包括全局通用的基础组件、皮肤主题和字体图标\n│  ├─ layouts      # 布局模块：包括以布局为最小粒度的组件集合，由至少一个基础组件组成\n│  ├─ flows        # 流程模块：包括以流程为最小粒度的组件集合，由至少一个基础组件组成\n│  ├─ pages        # 页面模块：包括以页面为最小粒度的组件集合，由至少一个基础组件组成\n│  ├─ routes       # 路由模块：包括全局页面跳转的功能，控制页面自由切换\n│  ├─ stores       # 数据模块：包括全局数据状态的功能，控制数据驱动视图\n│  ├─ views        # 视图模块：包括以视图为最小粒度的组件集合，由至少一个基础组件组成\n│  ├─ utils        # 工具模块：包括全局通用的常量与方法\n│  ├─ index.html   # 模板入口文件\n│  ├─ index.js     # 脚本入口文件\n│  └─ index.scss   # 样式入口文件\n└─ package.json\n"})}),"\n",(0,d.jsxs)(s.p,{children:["对于一个完善的",(0,d.jsx)(s.code,{children:"Node项目"}),"，一般是",(0,d.jsx)(s.code,{children:"接口系统"}),"，推荐使用以下目录结构将整个项目划分为各种通用模块。为了让目录结构更突出其功能，就不包括那些杂七杂八的工具链配置文件了。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-txt",children:"project\n├─ dist          # 输出目录\n│  ├─ prod         # 生产环境执行代码\n│  └─ test         # 测试环境执行代码\n├─ src           # 源码目录\n│  ├─ assets       # 资源模块：包括样式、脚本、字体、图像、音频、视频等资源文件\n│  ├─ models       # 模型模块：包括全局数据模型的功能\n│  ├─ routes       # 路由模块：包括全局接口请求的功能\n│  ├─ utils        # 工具模块：包括全局通用的常量与方法\n│  └─ index.js     # 脚本入口文件\n└─ package.json\n"})}),"\n",(0,d.jsxs)(s.p,{children:["当然这只是",(0,d.jsx)(s.code,{children:"模块化"}),"的第一步，后续章节会有更多内容涉及",(0,d.jsx)(s.code,{children:"模块化"}),"。"]}),"\n",(0,d.jsxs)(s.h5,{id:"组件化",children:["组件化",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#组件化",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.strong,{children:"组件化"}),"指将一个具备通用功能的交互设计划分为模板、样式和逻辑组成的功能单元，对内管理内部状态满足交互需求，对外提供属性接口扩展用户需求。"]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"组件化"}),"是",(0,d.jsx)(s.code,{children:"前端工程化"}),"的重要基础。它实现了代码更高层次的复用性，提升开发效率。组件的封装也是对象的封装，同样要做到",(0,d.jsx)(s.strong,{children:"高内聚低耦合"}),"，",(0,d.jsx)(s.code,{children:"组件化"}),"的项目不仅利于",(0,d.jsx)(s.code,{children:"单元测试"}),"的进行，同样也利于需求迭代的推进。"]}),"\n",(0,d.jsxs)(s.p,{children:["优秀的",(0,d.jsx)(s.code,{children:"组件化"}),"遵循以下设计哲学。"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"将设计图划分为最小组件层级"}),"\n",(0,d.jsx)(s.li,{children:"使用预设规范创建组件静态版本"}),"\n",(0,d.jsx)(s.li,{children:"确定组件内部最小且完整的状态的表示方式"}),"\n",(0,d.jsx)(s.li,{children:"确定组件内部最小且完整的状态的存放方式"}),"\n",(0,d.jsx)(s.li,{children:"实现数据流的正向传递与反向传递"}),"\n"]}),"\n",(0,d.jsxs)(s.p,{children:["有些同学可能会将",(0,d.jsx)(s.code,{children:"模块化"}),"与",(0,d.jsx)(s.code,{children:"组件化"}),"混淆，其实了解它们的概念就很易区分了。",(0,d.jsx)(s.strong,{children:"模块化着重在文件层面上对代码与资源实现拆分与组装，组件化着重在功能层面上对交互与设计实现拆分与组装"}),"。"]}),"\n",(0,d.jsxs)(s.h5,{id:"规范化",children:["规范化",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#规范化",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.strong,{children:"规范化"}),"指将一系列预设规范接入工程各个阶段，通过各项指标标准化开发者的工作流程，引导开发者在团队协作中往更好的方向发展。"]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"规范化"}),"是",(0,d.jsx)(s.code,{children:"前端工程化"}),"的重要部分。它有效地将一盘松散的规范通过指定标准凝聚在一起，将所有工作流程标准化，协同所有开发者以标准化的方式定义工作流程，同时也影响着代码、文档和日志，甚至影响着每个开发者及其团队发展方向，因此每个成熟的前端团队都有一套身经百战的",(0,d.jsx)(s.code,{children:"规范化方案"}),"。"]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"规范化"}),"更多应用在团队协作中，为每个开发者指明一个方向，引领着成员往该方向走。若团队无",(0,d.jsx)(s.code,{children:"规范化"}),"，每个开发者各做各的事情，在合并代码时肯定会发生争吵，甚至影响工作效率。"]}),"\n",(0,d.jsxs)(s.h5,{id:"自动化",children:["自动化",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#自动化",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.strong,{children:"自动化"}),"指将一系列繁琐重复的工作流程交由程序根据预设脚本自动处理，整个工作流程无需人工参与，以解放开发者双手让其更专注业务需求的开发。"]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"自动化"}),"是",(0,d.jsx)(s.code,{children:"前端工程化"}),"的智能部分。它既可解放双手又能节省大量时间做更多有意义的事情，常见",(0,d.jsx)(s.code,{children:"自动化"}),"场景包括但不限于",(0,d.jsx)(s.code,{children:"自动化构建"}),"、",(0,d.jsx)(s.code,{children:"自动化测试"}),"、",(0,d.jsx)(s.code,{children:"自动化打包"}),"、",(0,d.jsx)(s.code,{children:"自动化发布"}),"和",(0,d.jsx)(s.code,{children:"自动化部署"}),"，更高级的自动化场景包括但不限于",(0,d.jsx)(s.code,{children:"持续集成"}),"、",(0,d.jsx)(s.code,{children:"持续交付"}),"和",(0,d.jsx)(s.code,{children:"持续部署"}),"。以",(0,d.jsx)(s.code,{children:"自动化构建"}),"为例，又可将其划分为以下子任务，这些子任务分布在",(0,d.jsx)(s.code,{children:"自动化构建"}),"不同阶段，在不同阶段的最佳时刻会调用相关工具处理相关流程。"]}),"\n",(0,d.jsxs)(s.table,{children:["\n",(0,d.jsxs)(s.thead,{children:["\n",(0,d.jsxs)(s.tr,{children:["\n",(0,d.jsx)(s.th,{align:"center",children:"任务"}),"\n",(0,d.jsx)(s.th,{align:"center",children:"职责"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.strong,{children:"Stylelint"}),"|校验样式代码\n",(0,d.jsx)(s.strong,{children:"Eslint"}),"|校验脚本代码\n",(0,d.jsx)(s.strong,{children:"Postcss"}),"|Postcss → CSS\n",(0,d.jsx)(s.strong,{children:"Sass"}),"|SASS → CSS\n",(0,d.jsx)(s.strong,{children:"Less"}),"|LESS → CSS\n",(0,d.jsx)(s.strong,{children:"Babel"}),"|ES6 → ES5\n",(0,d.jsx)(s.strong,{children:"TypeScript"}),"|TS → JS"]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"自动化"}),"整体重心偏向于构建，构建为工程服务，工程又为用户服务，因此一个项目会演化出至少两种运行环境，分别是",(0,d.jsx)(s.code,{children:"开发环境"}),"与",(0,d.jsx)(s.code,{children:"生产环境"}),"。其中开发环境工程为开发者服务，生产环境工程为用户服务。"]}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsxs)(s.p,{children:["学习",(0,d.jsx)(s.code,{children:"前端工程化"}),"能让一个开发者在任何时刻面对任何情况都能使用工程化的思想解决问题。掌握",(0,d.jsx)(s.code,{children:"前端工程化"}),"可通过以下方面思考，相信",(0,d.jsx)(s.code,{children:"前端工程化"}),"对工作能力与岗位竞争都会有很大帮助。"]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.strong,{children:"前后分离"}),"：前端应自成体系且与后端分离，包括但不限于规范、服务、环境、构建、组织和部署方面"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.strong,{children:"技术选型"}),"：不能以一个框架满足所有业务场景，需制定多套框架解决方案避免技术瓶颈的出现"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.strong,{children:"重构封装"}),"：新生技术不断涌现就要避免改头换面式的重构，重复需求不断出现就要学会举一反三的封装"]}),"\n",(0,d.jsxs)(s.li,{children:[(0,d.jsx)(s.strong,{children:"工程设计"}),"：解决方案要合理分层且互相独立，随时应对各种变化，任何一层可低成本被替换与淘汰"]}),"\n"]}),"\n",(0,d.jsxs)(s.h3,{id:"课前准备万事俱备只欠东风",children:["课前准备：万事俱备只欠东风",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#课前准备万事俱备只欠东风",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"前端工程化"}),"从名字上来看就能想象出其与配置或流程有着众多关联，因此学习",(0,d.jsx)(s.code,{children:"前端工程化"}),"可能与平时学习",(0,d.jsx)(s.code,{children:"react/vue"}),"等框架编程有着不一样的体验。这些体验无法像框架编程那样使用常见套路或技巧去编码，而是得清楚当前流程的所有步骤以及使用何种工具互相搭配与配置完成针对流程的处理。"]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.code,{children:"前端工程化"}),"涉及众多的环境与工具，每个流程涉及至少一种环境或一种工具。在学习本课程时会用到很多与",(0,d.jsx)(s.code,{children:"前端工程化"}),"相关环境与工具，我提前将它们罗列出来，好让你有心理准备。"]}),"\n",(0,d.jsxs)(s.p,{children:["为了方便对以下环境与工具有一个第一印象，都使用",(0,d.jsx)(s.code,{children:"六字真言"}),"概括它们的主要功能，不要太在意是否准确，因为后续章节会详细讲述这些环境与工具。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-txt",children:"没错，总结大师就是喜欢总结！\n"})}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)("img",{src:r,alt:"环境与工具"})}),"\n",(0,d.jsxs)(s.h3,{id:"总结",children:["总结",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["很多同学在一线开发岗位工作多年后才能体会到",(0,d.jsx)(s.code,{children:"前端工程化"}),"的重要性。这些知识因为理论性太强，一般很少有人做总结与分享，基本都是只可意会不可言传的内容，而这些内容的积累也是从一个",(0,d.jsx)(s.code,{children:"Developer"}),"走向",(0,d.jsx)(s.code,{children:"Team Leader"}),"的关键。我花了",(0,d.jsx)(s.code,{children:"1年"}),"时间写下本课程，也是为了将这些只可意会不可言传的内容转换为都可言传的内容，帮助更多开发者突破自己，完成职业生涯的转变。"]}),"\n",(0,d.jsx)(s.p,{children:"总之，在学习具体技能的同时要重视工程化的解决思路，灵活应用它对自身的工作能力与竞争力都会有很大的提升。"}),"\n",(0,d.jsxs)(s.p,{children:["最后，本课程囊括的",(0,d.jsx)(s.code,{children:"前端工程化"}),"应用场景都很常见。若后续有时间，我也会尽力完善更多内容，若你有更好的建议也欢迎加群与我沟通。期待与你同行，一起落地",(0,d.jsx)(s.code,{children:"前端工程化"}),"，告别纸上谈兵！"]}),"\n",(0,d.jsxs)(s.p,{children:["消化下，下章正式进入",(0,d.jsx)(s.code,{children:"前端工程化"}),"的学习之旅。最后记住这句话：",(0,d.jsx)(s.strong,{children:"无论处于何种阶段，深入了解前端工程化都是很有必要的！！！"})]})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,c.ah)(),e.components);return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(x,{...e})}):x(e)}let o=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E5%88%B0%201%20%E8%90%BD%E5%9C%B0%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%2F1.%E5%BC%80%E7%AF%87%EF%BC%9A%E8%90%BD%E5%9C%B0%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%EF%BC%8C%E5%91%8A%E5%88%AB%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5%EF%BC%81.md"]={toc:[{text:"前言",id:"前言",depth:3},{text:"概念：前端工程化是什么",id:"概念前端工程化是什么",depth:3},{text:"课程：如何系统学习前端工程化",id:"课程如何系统学习前端工程化",depth:3},{text:"细节：前端工程化的特性",id:"细节前端工程化的特性",depth:3},{text:"课前准备：万事俱备只欠东风",id:"课前准备万事俱备只欠东风",depth:3},{text:"总结",id:"总结",depth:3}],title:"1.开篇：落地前端工程化，告别纸上谈兵！",headingTitle:"1.开篇：落地前端工程化，告别纸上谈兵！",frontmatter:{}}}}]);