"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["10310"],{726209:function(e,n,c){c.r(n),c.d(n,{default:()=>M});var r=c(552676),o=c(740453);let l=c.p+"static/image/85e748e201bd082759359f0abbcf70b4.64a166a6.webp",s=c.p+"static/image/cae4dd16b9fd10f2d5c6f05384b433ee.1db45925.webp",d=c.p+"static/image/4202519aeaf8af9717ed2795fe824864.fe96449d.webp",i=c.p+"static/image/c0e01d8593a66c7ac1c72e455ec33244.bab749bf.webp",a=c.p+"static/image/15331a0d3061ae298737f0528eb9cae6.48379a8c.webp",t=c.p+"static/image/3411f7f2a6a5077cf38ab8fab7ef7c9d.6f68afe8.webp",h=c.p+"static/image/9b8909fa2eaaa3af956af786c2673953.52014449.webp",x=c.p+"static/image/74e14c6deaed0a047e9e9367819f2f06.e9009191.webp",j=c.p+"static/image/ccbdcb0451b36f97b4be2607b1c2cc25.db732bb0.webp",p=c.p+"static/image/4de62aefa2cdd68b8f5aaa58af693d73.2d39732e.webp",m=c.p+"static/image/08aafde35591203e520a546294875a96.7084bd78.webp",b=c.p+"static/image/3448ce48ed6f3504f3eef7b1ef3dfe2a.f18a89db.webp",g=c.p+"static/image/c6e76651fc6c1d9430f691633cf9ea77.d04df5b1.webp",f=c.p+"static/image/09072ef126157a286dc60a465e59d2c3.c739645d.webp",u=c.p+"static/image/67096f9648932c81ab05eacc6de6113c.ba0ac855.webp",k=c.p+"static/image/c577c85216a0578405383dedc7c5080f.8700f890.webp",w=c.p+"static/image/0e6f18e26d530c74bdb6b9de4dc56393.c823dd8c.webp",S=c.p+"static/image/e2574ec75fa41aee601cfc18ccef91e8.20810f4e.webp",v=c.p+"static/image/d67354bfd6ba57750196511ad334610b.2d7d63cd.webp",C=c.p+"static/image/5cd303e943072c745931c7ea695d21b3.763574a5.webp",y=c.p+"static/image/5fe6daa2784740575f1fd190503a0144.9dd1e827.webp",B=c.p+"static/image/83fbc9a78be47f58fa6ad261ecf4cc11.45a7c574.webp",N=c.p+"static/image/6a17efab49e2a3b01f6bec4aa2b3acf3.c6eadf72.webp",_=c.p+"static/image/aaeb2b08d1c50f9afa6063f175dd24ec.fb03dfbf.webp",T=c.p+"static/image/5a5a02d23b36641be8284a455b333563.5610c860.webp",W=c.p+"static/image/05778204bf8c7132ea421341c7a5f53e.b891294f.webp",A=c.p+"static/image/6db0dc7f3c7f6922b89503747d221525.fb03dfbf.webp";function L(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",code:"code",h2:"h2",pre:"pre",blockquote:"blockquote",strong:"strong",ul:"ul",li:"li",em:"em",h3:"h3"},(0,o.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"第14章web控件ui颜色的定制accent-color和color-scheme",children:["第14章—Web控件UI颜色的定制：accent-color和color-scheme",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第14章web控件ui颜色的定制accent-color和color-scheme",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"\uFEFFWeb 开发者都有一个共识，要给 Web 控件（一般是 HTML 表单元素）定制 UI 风格较为困难。很多时候，开发者都是通过别的方式绕开原生表单控件，比如使用非表单元素来模拟表单控件，或者重置表单控件样式并从头开始构建。这样做的唯一目的，就是让表单控件的 UI 风格在各平台上一致。但是，这给我们增加了很多额外的工作量，而且也会导致表单控件元素状态的样式被丢弃，以及内置的可访问性功能丧失。也就是说，要完全重现浏览器提供的功能，可能比你想象中要承担的工作多得多。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["如果，直接有相应的 CSS 属性让开发者操作表单控件 UI，事情就会简单多了，开发者也可以从此避开非表单控件元素，让表单控件更具个性化 UI。虽然目前我们还无法直接做到这一点，但 CSS 在这方面做出了很多的改变。比如说，我们现在可以直接使用 CSS 来控制表单元素的重点颜色（Accent Color），一种典型的明亮的颜色。这也就是我们今天要介绍的 CSS 的 ",(0,r.jsx)(n.code,{children:"accent-color"})," 属性！"]}),"\n",(0,r.jsxs)(n.h2,{id:"accent-color-的简介",children:["accent-color 的简介",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#accent-color-的简介",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"accent-color"})," 属性是 ",(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/css-ui-4",target:"_blank",rel:"noopener noreferrer",children:"CSS UI 规范"}),"（CSS Basic User Interface Module Level 4 ）中 ",(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/css-ui-4/#styling-widgets",target:"_blank",rel:"noopener noreferrer",children:"“美化控件”（Styling Widgets）"}),"中的一个属性。早在 2021 年就得到部分主流浏览器的支持。",(0,r.jsx)(n.code,{children:"accent-color"})," 允许你仅写一行 CSS 代码，就可以将你的品牌色运用于表单控件上，使你免于自定义工作。"]}),"\n",(0,r.jsxs)(n.p,{children:["简单地说，",(0,r.jsx)(n.code,{children:"accent-color"})," 可以用来设置表单控件的高亮色（即着重色），并且可以让支持的终端达到一致的效果："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:W,alt:"img"})}),"\n",(0,r.jsxs)(n.h2,{id:"accent-color-的使用",children:["accent-color 的使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#accent-color-的使用",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"accent-color"})," 的使用非常简单，只需下面这几行代码，就可以定制化表单的控件颜色（着重色）："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":root {\n    --brand-color: deeppink;\n    accent-color: var(--brand-color);\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        --brand-color: hsl(328 100% 65%);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/JjmVQZv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjmVQZv"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["上面示例展示了 ",(0,r.jsx)(n.code,{children:"accent-color"})," 属性和 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 属性一起使用的效果，允许开发者同时给亮色和深色模式下的表单控件元素着色。当用户激活了深色主题，页面使用  ",(0,r.jsx)(n.code,{children:"color-scheme: light dark"})," ，并使用 ",(0,r.jsx)(n.code,{children:"hsl(328 100% 65%)"})," 作为深色主题的热粉色着色控件。"]}),"\n",(0,r.jsxs)(n.p,{children:["通过上面的示例，我们对 ",(0,r.jsx)(n.code,{children:"accent-color"})," 有了一个初体验。接下来，花点时间探讨 ",(0,r.jsx)(n.code,{children:"accent-color"}),"属性。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/css-ui-4/#widget-accent",target:"_blank",rel:"noopener noreferrer",children:"CSS 规范是这样描述 accent-color 属性的"}),"："]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"The accent-color CSS property allows the author to specify the accent color for user-interface controls generated by the element."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["大致意思是：“",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"accent-color"})})," ",(0,r.jsx)(n.strong,{children:"属性允许开发者为该元素生成的用户界面控件指定重音色（高亮色）"}),"”。",(0,r.jsx)(n.code,{children:"accent-color"})," 属性主要接受两个值，其一是关键词 ",(0,r.jsx)(n.code,{children:"auto"})," ，也是 ",(0,r.jsx)(n.code,{children:"accent-color"})," 属性的默认值，代表一个 UA （比如浏览器）选择的颜色，如果有的话，它应该与平台的重点颜色（着重色）相匹配。也就是说，表单控件的重点颜色会根据客户端来着色。如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"accent-color"})," 属性的另一个值是 ",(0,r.jsx)(n.code,{children:"<color>"})," ，即 CSS 颜色中指定的值。当 ",(0,r.jsx)(n.code,{children:"accent-color"})," 的值为 ",(0,r.jsx)(n.code,{children:"<color>"})," 值时，表示指定用作强调色的颜色："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:"img"})}),"\n",(0,r.jsxs)(n.h2,{id:"可用-accent-color-的元素",children:["可用 accent-color 的元素",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可用-accent-color-的元素",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["HTML中定义了很多种不同类型的",(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/html52/sec-forms.html#form-categories",target:"_blank",rel:"noopener noreferrer",children:"表单控件"}),"，比如我们熟悉的 ",(0,r.jsx)(n.code,{children:"<input>"}),"、",(0,r.jsx)(n.code,{children:"<select>"})," 和 ",(0,r.jsx)(n.code,{children:"<textarea>"}),"等："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["但到目前为止，只有四种表单控件可以通过 ",(0,r.jsx)(n.code,{children:"accent-color"})," 属性对控件高亮颜色进行着色。这四种类型表单控件分别是："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/html52/sec-forms.html#checkbox-state-typecheckbox",target:"_blank",rel:"noopener noreferrer",children:"复选框"}),"（",(0,r.jsx)(n.code,{children:'<input type="checkbox" ``/>'}),"）"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/html52/sec-forms.html#radio-button-state-typeradio",target:"_blank",rel:"noopener noreferrer",children:"单选按钮"}),"（",(0,r.jsx)(n.code,{children:'<input type="radio" />'}),"）"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/html52/sec-forms.html#range-state-typerange",target:"_blank",rel:"noopener noreferrer",children:"滑块"}),"（",(0,r.jsx)(n.code,{children:'<input type="range" />'}),"）"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/html52/sec-forms.html#the-progress-element",target:"_blank",rel:"noopener noreferrer",children:"进度条"}),"（",(0,r.jsx)(n.code,{children:"<progress />"}),"）"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["另外，",(0,r.jsx)(n.a,{href:"https://accent-color.glitch.me/",target:"_blank",rel:"noopener noreferrer",children:"@Adam Argyle 提供了常见表单控件使用 accent-color 属性测试用例"}),"，在这个测试用例中，支持 ",(0,r.jsx)(n.code,{children:"accent-color"})," 的控件可以看到重点颜色不再是系统默认的，比如 ",(0,r.jsx)(n.code,{children:"accent-color"})," 的值为 ",(0,r.jsx)(n.code,{children:"rgb(255 0 210)"}),"时效果："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/poxBMvw",target:"_blank",rel:"noopener noreferrer",children:"我把示例搬到 Codepen 上"}),"，并将 HTML 常见的表单控件都已添加。也就是说，该示例能更全面地检测已支持 ",(0,r.jsx)(n.code,{children:"accent-color"})," 属性的表单元素："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/poxBMvw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poxBMvw"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["再来看一个简单的示例，使用 ",(0,r.jsx)(n.code,{children:"accent-color"})," 和 ",(0,r.jsx)(n.code,{children:"color-theme"})," ，为",(0,r.jsx)(n.strong,{children:"复选框"}),"、",(0,r.jsx)(n.strong,{children:"单选按钮"}),"、",(0,r.jsx)(n.strong,{children:"滑块"}),"和",(0,r.jsx)(n.strong,{children:"进度条"}),"在亮色和暗色模式下设置不同的高亮着色："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:'.accented { \n    accent-color: deeppink; \n} \n\n[color-scheme="dark"] .accented { \n    accent-color: hsl(328 100% 80%); \n} \n\n[color-scheme="light"] { \n    color-scheme: light; \n} \n\n[color-scheme="dark"] { \n    color-scheme: dark; \n} \n\nfieldset[color-scheme="dark"] { \n    background: Canvas; \n    color: CanvasText; \n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/QWZPegM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWZPegM"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，上面这个示例，你还可以使用 CSS 的 ",(0,r.jsx)(n.code,{children:":has()"})," 选择器、样式查询和媒体查询，实现带交互效果的暗黑模式下表单控件强调色（着重色）："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":where(html) {\n    --darkmode: 0;\n    container-name: root;\n    container-type: normal;\n    color-scheme: light dark;\n}\n\nbody {\n    --brand-color: deeppink;\n}\n\n\n@media (prefers-color-scheme：dark) {\n    body {\n        --brand-color: hsl(328 100% 80%);\n    }\n}\n\n@media (prefers-color-scheme: dark) {\n    html {\n        --darkmode: 1;\n        color-scheme: dark;\n    }\n}\n\n@media (prefers-color-scheme: light) {\n    html {\n        --darkmode: 0;\n    }\n}\n\nhtml:has(#color-scheme-light:checked) {\n    --darkmode: 0;\n}\nhtml:has(#color-scheme-dark:checked) {\n    --darkmode: 1;\n}\n\n\n@container root style(--darkmode: 1) {\n    body {\n        --brand-color: hsl(328 100% 80%);\n    }\n}\n\n\nbody {\n    color-scheme: light dark;\n    accent-color: var(--brand-color);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/OJBGKxb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/OJBGKxb"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"给更多的元素设置着重色",children:["给更多的元素设置着重色",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#给更多的元素设置着重色",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["你可能会想，有没有办法为更多控件设置着重色。值得庆幸的是，确实有一些方法可以。比如，我们可以给",(0,r.jsx)(n.strong,{children:"焦点环"})," 、",(0,r.jsx)(n.strong,{children:"选中文本高亮"})," 、",(0,r.jsxs)(n.strong,{children:["列表标记（",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"::marker"})})}),"）"]})," 、",(0,r.jsx)(n.strong,{children:"箭头指示器"})," （仅Webkit）和",(0,r.jsx)(n.strong,{children:"滚动条指示器"})," （仅Firefox）添加着重色："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"html { \n    --color-accent: hotpink; \n    scrollbar-color: hotpink Canvas; \n} \n\n:root { \n    accent-color: var(--color-accent); \n} \n\n:focus-visible { \n    outline-color: var(--color-accent); \n} \n\n::selection { \n    background-color: var(--color-accent); \n} \n\n::marker { \n    color: var(--color-accent); \n} \n\n::-webkit-calendar-picker-indicator {\n    color: var(--color-accent);\n}\n\n::-webkit-clear-button {\n    color: var(--color-accent); \n}\n\n::-webkit-inner-spin-button {\n    color: var(--color-accent); \n} \n\n::-webkit-outer-spin-button {\n    color: var(--color-accent); \n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/poxBMaL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poxBMaL"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"color-scheme-的简介",children:["color-scheme 的简介",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#color-scheme-的简介",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["前面在介绍 ",(0,r.jsx)(n.code,{children:"accent-color"})," 属性的时候提到过，在 CSS 中可以将 ",(0,r.jsx)(n.code,{children:"accent-color"})," 与 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 属性结合起来，在不同模式下（比如暗黑模式）给表单控件设置不同的着重色。而这个 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 属性是 ",(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/css-color-adjust-1/",target:"_blank",rel:"noopener noreferrer",children:"CSS 颜色调整模块 Level1"})," 规范引入一个新特性。它通过用户代理控制自动颜色调整，目的是处理用户偏好（例如暗黑模式）、对比度调整或特定的所需的配色方案。"]}),"\n",(0,r.jsxs)(n.p,{children:["通过其中定义的 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 属性，元素可以指示它适合渲染的颜色方案。将这些值与用户的偏好进行协调，从而生成影响用户界面（UI）事物的所选配色方案（例如表单控件和滚动条的默认颜色），以及 CSS 系统颜色的使用值。"]}),"\n",(0,r.jsxs)(n.p,{children:["CSS 的 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 属性主要有三个值："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.code,{children:"normal"})})," 表示元素完全不知道配色方案，因此应该使用浏览器的默认配色方案呈现该元素；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.code,{children:"[light | dark]+"})})," 表示元素知道且可以处理列出的配色方案，并表达它们之间的排序偏好；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"only"})," 禁止用户代理覆盖元素的颜色方案。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在 CSS 中，",(0,r.jsx)(n.code,{children:"color-scheme"})," 属性可以用于单个元素级别，也可以用于 ",(0,r.jsx)(n.code,{children:":root"})," 级别。在 ",(0,r.jsx)(n.code,{children:":root"})," 元素上，使用配色方案渲染不仅会影响画布的表面颜色（即全局背景颜色）、",(0,r.jsx)(n.code,{children:"color"})," 属性的初始值以及系统颜色的使用值，还会影响视区的滚动条、拼写检查下划线和表单控件等。"]}),"\n",(0,r.jsxs)(n.p,{children:["比如前面示例中就有 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 的身影："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":root {\n    color-scheme: dark light;\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"color-scheme-的使用",children:["color-scheme 的使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#color-scheme-的使用",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在 CSS 中，使用 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 主要有两种方式。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["与 CSS 的媒体查询 ",(0,r.jsx)(n.code,{children:"prefers-color-scheme"})," 一起使用。"]}),"\n",(0,r.jsxs)(n.li,{children:["与 HTML 的 ",(0,r.jsx)(n.code,{children:"<meta>"})," 标签一起使用。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"我们先来看第一种方式。"}),"\n",(0,r.jsxs)(n.h3,{id:"与-prefers-color-scheme-结合在一起",children:["与 prefers-color-scheme 结合在一起",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#与-prefers-color-scheme-结合在一起",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["我们可以通过 CSS 的媒体查询 ",(0,r.jsx)(n.code,{children:"@media"})," 来查询用户偏好的设置。最为经典的就是暗黑模式，我们可以通过以 ",(0,r.jsx)(n.code,{children:"prefers-color-scheme"})," 为条件，给 Web 应用或页面在不同模式中设置不一样的样式风格。例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"/* 亮色模式 */\n:root {\n    --text-color: black;\n    --bg-color: white;\n}\n\nbody {\n    color: var(--text-color);\n    background-color: var(--bg-color);\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        --text-color: white;\n        --bg-color: black;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/yLRWLNN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLRWLNN"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["上面示例所展示的是一个最简单的暗黑模式，它并不完美。如果在上面示例基础上增加一个文本链接（",(0,r.jsx)(n.code,{children:"<a>"}),"），你会发现，当用户从亮色模式切换到暗色模式下时，文本链接的颜色可读性不符合 Web 可访问性要求。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["这是因为文本链接（",(0,r.jsx)(n.code,{children:"<a>"}),"）是专有 WebKit CSS 颜色，即 ",(0,r.jsx)(n.code,{children:"-webkit-link"})," （由 WebKit 和 Chrome 用于经典蓝色链接 ",(0,r.jsx)(n.code,{children:"rgb(0 0 238)"}),"）在黑色背景上的对比度不足 ",(0,r.jsx)(n.code,{children:"2.23:1"})," ，并且不满足 ",(0,r.jsx)(n.a,{href:"https://webaim.org/resources/contrastchecker/?fcolor=0000EE&bcolor=000000",target:"_blank",rel:"noopener noreferrer",children:"WCAG AA"})," 以及 ",(0,r.jsx)(n.a,{href:"https://www.w3.org/WAI/WCAG21/Understanding/conformance#levels",target:"_blank",rel:"noopener noreferrer",children:"WCAG AAA"})," 要求。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["为了避免此现象出现，一般情况下应该将 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 与 ",(0,r.jsx)(n.code,{children:"prefers-color-scheme"})," 结合起来。例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"/* 亮色模式 */\n:root {\n    --text-color: black;\n    --bg-color: white;\n    color-scheme: dark light;\n}\n\nbody {\n    color: var(--text-color);\n    background-color: var(--bg-color);\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        --text-color: white;\n        --bg-color: black;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"你发现，像文本链接这样的元素，即使切换到暗色模式下，它的可读性也很友好，符合 WCAG AAA 的标准。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/eYPaYzd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYPaYzd"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["其主要原因是，",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"color-scheme"})})," ",(0,r.jsx)(n.strong,{children:"完全决定了默认的外观，而"})," ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"prefers-color-scheme"})})," ",(0,r.jsx)(n.strong,{children:"则决定了可样式化的外观"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"与-meta-标签结合使用",children:["与 meta 标签结合使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#与-meta-标签结合使用",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"color-scheme"})," 还有一种使用方式是和 HTML 的 ",(0,r.jsx)(n.code,{children:"<meta>"})," 标签结合，即："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<meta name="color-scheme" content="dark light">\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这样就可以帮助用户代理立即使用所需配色方案呈现页面背景，还可以提供 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 值，即 ",(0,r.jsx)(n.code,{children:"content"})," 的值。"]}),"\n",(0,r.jsxs)(n.h3,{id:"与-prefers-color-scheme-相互影响",children:["与 prefers-color-scheme 相互影响",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#与-prefers-color-scheme-相互影响",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["虽然 ",(0,r.jsx)(n.code,{children:"<meta>"})," 元标签和 CSS 属性（如果运用于 ",(0,r.jsx)(n.code,{children:":root{}"})," 根元素上）最终产生的效果相同（渲染行为相同），但我还是建议你在实际开发中使用 ",(0,r.jsx)(n.code,{children:"<meta>"})," 标签来指定主题颜色配色方案，这样浏览器就可以更快地采用首选方案。"]}),"\n",(0,r.jsxs)(n.p,{children:["简单地说，它们在一起配合得非常好。这是因为 ",(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"color-scheme"})," 完全决定了默认的外观，而"]})," ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"prefers-color-scheme"})})," ",(0,r.jsx)(n.strong,{children:"则决定了可样式化的外观"}),"。比如下面这个示例："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<html>\n    <head>\n        <meta name="color-scheme" content="dark light" />\n    </head>\n    <body>\n        <p> Lorem ipsum dolor sit amet, legere ancillae ne vis.</p>\n        <form>\n            <fieldset>\n                <legend>Lorem ipsum</legend>\n                <button type="button">Lorem ipsum</button>\n            </fieldset>\n        </form>\n    </body>\n</html>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"fieldset {\n    background-color: gainsboro;\n}\n\n@media (prefers-color-scheme: dark) {\n    fieldset {\n        background-color: darkslategray;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/RwemNWb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwemNWb"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["正如你所看到的，在亮色模式下 ",(0,r.jsx)(n.code,{children:"<fieldset>"})," 元素的背景颜色是 ",(0,r.jsx)(n.code,{children:"gainsboro"})," ，切换到暗色模式下时，该元素的背景色则变成 ",(0,r.jsx)(n.code,{children:"darkslategray"})," 。"]}),"\n",(0,r.jsxs)(n.p,{children:["在上面这个示例中，通过 ",(0,r.jsx)(n.code,{children:'<meta name="color-scheme" content="dark light">'})," 元素，页面会告知浏览器它支持深色和浅色主题，且优先选择深色主题。"]}),"\n",(0,r.jsx)(n.p,{children:"整个页面的效果根据操作系统的设置变化，如果系统被设置为深色模式，那么整个页面会基于用户代理样式表在深色中显示浅色；如果系统被设置为亮色模式，那么整个页面会基于用户代理样式表在亮色中显示深色。无需其他开发人员提供的 CSS 来更改页面的段落文本或背景颜色。"}),"\n",(0,r.jsxs)(n.p,{children:["请注意，",(0,r.jsx)(n.code,{children:"<fieldset>"})," 元素的 ",(0,r.jsx)(n.code,{children:"background-color"})," 根据是否启用深色模式而更改，遵循页面上开发人员提供的样式规则。具体为 ",(0,r.jsx)(n.code,{children:"gainsboro"})," 或 ",(0,r.jsx)(n.code,{children:"darkslategray"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:"img"})}),"\n",(0,r.jsx)(n.p,{children:"正如你所看到的："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"亮色模式（Lighter）："})," 由开发人员和用户代理（比如浏览器）指定的样式。按照用户代理样式表，文本为黑色，背景为白色。按照开发人员提供的样式规则，",(0,r.jsx)(n.code,{children:"<fieldset>"})," 元素的 ",(0,r.jsx)(n.code,{children:"background-color"})," 为 ",(0,r.jsx)(n.code,{children:"gainsboro"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"深色模式（Darker）："})," 由开发人员和用户代理（比如浏览器）指定的样式。按照用户代理样式表，文本为白色，背景为黑色。按照开发人员提供的样式规则，",(0,r.jsx)(n.code,{children:"<fieldset>"})," 元素的 ",(0,r.jsx)(n.code,{children:"background-color"})," 为 ",(0,r.jsx)(n.code,{children:"darkslategray"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在上面这个示例中，Web 开发者仅仅调整了 ",(0,r.jsx)(n.code,{children:"<fieldset>"})," 元素的背景颜色（",(0,r.jsx)(n.code,{children:"background-color"}),"），该元素其他样式规则并未做任何调整，以及其他元素也未做任何样式的调整，比如 ",(0,r.jsx)(n.code,{children:"<button>"})," 元素和 ",(0,r.jsx)(n.code,{children:"<p>"})," 元素。或许你已经发现了，即使开发者并没有显式对 ",(0,r.jsx)(n.code,{children:"<p>"})," 和 ",(0,r.jsx)(n.code,{children:"<button>"})," 元素做任何样式的设置，但它们在不同模式下，样式仍然会自动切换。"]}),"\n",(0,r.jsxs)(n.p,{children:["就拿按钮 ",(0,r.jsx)(n.code,{children:"<button>"})," 为例吧，",(0,r.jsx)(n.code,{children:"<button>"})," 元素的外观由用户代理样式表控制。如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["不难发现，不管是亮色模式还是暗色模式下，按钮（",(0,r.jsx)(n.code,{children:"<button>"}),"）的背景颜色（",(0,r.jsx)(n.code,{children:"background-color"}),"）都是 ",(0,r.jsx)(n.code,{children:"ButtonFace"})," 、文本颜色（",(0,r.jsx)(n.code,{children:"color"}),"）是 ",(0,r.jsx)(n.code,{children:"ButtonText"})," 以及边框颜色（",(0,r.jsx)(n.code,{children:"border-color"}),"）是 ",(0,r.jsx)(n.code,{children:"ButtonBorder"})," 。不同的是，在不同模式之下，它们的计算值有所差别。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:"img"})}),"\n",(0,r.jsx)(n.p,{children:"在亮色模式下："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ButtonFace"})," 的计算值是 ",(0,r.jsx)(n.code,{children:"rgb(239 239 239)"})," ；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ButtonText"})," 的计算值是 ",(0,r.jsx)(n.code,{children:"rgb(0 0 0)"})," ；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ButtonBorder"})," 的计算值是 ",(0,r.jsx)(n.code,{children:"rgb(118 118 118)"})," 。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"而在暗色模式下："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ButtonFace"})," 的计算值是 ",(0,r.jsx)(n.code,{children:"rgb(107 107 107)"}),"；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ButtonText"})," 的计算值是 ",(0,r.jsx)(n.code,{children:"rgb(107 107 107)"})," ；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ButtonBorder"})," 的计算值是 ",(0,r.jsx)(n.code,{children:"rgb(255 255 255)"})," 。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["有一点需要注意的是，CSS 的系统颜色在不同的客户端中，其计算值也有所差异，比如上面示例中的 ",(0,r.jsx)(n.code,{children:"ButtonFace"})," 、",(0,r.jsx)(n.code,{children:"ButtonBorder"})," 和 ",(0,r.jsx)(n.code,{children:"ButtonText"})," ，在 Safari 中计算与 Chrome 中计算值就不同。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["而且运用于元素的不同属性的值也会有所差异。比如，在 Safari 浏览器中，元素 ",(0,r.jsx)(n.code,{children:"<button>"})," 的 ",(0,r.jsx)(n.code,{children:"background-color"})," 和 ",(0,r.jsx)(n.code,{children:"border-color"})," 都是 ",(0,r.jsx)(n.code,{children:"ButtonFace"})," 。更为有意思的是，同样用于 ",(0,r.jsx)(n.code,{children:"border-color"})," 的 ",(0,r.jsx)(n.code,{children:"ButtonFace"})," ，其计算值也有所差异。比如，计算值（针对 ",(0,r.jsx)(n.code,{children:"border-top-color"})," 和 ",(0,r.jsx)(n.code,{children:"border-bottom-color"}),"）从 ",(0,r.jsx)(n.code,{children:"rgba(0, 0, 0, 0.847)"}),"（偏黑色）切换为 ",(0,r.jsx)(n.code,{children:"rgba(255, 255, 255, 0.847)"}),"（偏白色），因为用户代理会根据配色方案动态更新 ",(0,r.jsx)(n.code,{children:"ButtonFace"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["这也就是前面示例中，文本链接 ",(0,r.jsx)(n.code,{children:"<a>"})," 元素，在不设置 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 时，暗黑模式下阅读困难的原因所在。也就是说，当你在 CSS 中未显式地为每种模式下文档设置颜色时，浏览器（客户端）会替你设置一个。这也意味着我们需要在浅色背景上获得深色文本（亮色模式），在深色背景上获得浅色文本（暗色模式）。即："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<meta name="color-scheme" content="dark light">\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":root { \n    color-scheme: light dark;\n} \n"})}),"\n",(0,r.jsxs)(n.p,{children:["注意，最好这两者结合起来一起使用。这样做的最大优势就是",(0,r.jsx)(n.strong,{children:"不需要挑选或定义任何颜色（为不同模式）"}),"。用户代理（你的浏览器）样式表会帮助我们处理这些细节。因此，用户得到的调色板更接近于他们在操作系统中使用其他本地应用程序的体验。"]}),"\n",(0,r.jsxs)(n.p,{children:["比如",(0,r.jsx)(n.a,{href:"https://codepen.io/chriscoyier/full/OJpKgBe",target:"_blank",rel:"noopener noreferrer",children:" @Chris Coyier 在 Codepen 上向大家展示的示例"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"html { \n    color-scheme: light dark; \n} \n\nbody { \n    background: Canvas; \n    font: 100%/1.4 system-ui; \n} \n\n.card { \n    border: 5px solid LinkText; \n} \n\nh3 { \n    background: ButtonFace; \n    color: ButtonText; \n    border-bottom: 10px solid VisitedText; \n} \n\np { \n    font-family: ui-monospace, system-ui; \n} \n\n.button { \n    background: ActiveText; \n    color: Field; \n} \n\nfooter { \n    background: Highlight; \n} \n"})}),"\n",(0,r.jsx)(n.p,{children:"切换你的系统设置，可以看到下面这样的效果："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/RwemNzo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwemNzo"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"案例美化表单样式",children:["案例：美化表单样式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#案例美化表单样式",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在，我们已经知道了，使用 CSS 的 ",(0,r.jsx)(n.code,{children:"accent-color"})," 和 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 属性，可以高效利用用户代理样式，使得把我们的品牌颜色快速而轻松地应用于某些表单控件（例如，单选按钮、复选框等）变得容易。接下来，我们一起来看看，这两个属性如何实现简单、易于访问的复选框和单选按钮。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"img"})}),"\n",(0,r.jsx)(n.p,{children:"大多数情况下，Web 开发者都会采用一些 Hack 手段给复选框或单选按钮自定义样式，比如将筛选框、单选按钮隐藏起来，再使用伪元素来模拟它们，就像下面这样："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<form>\n    <fieldset>\n        <legend>选择你喜欢的语言</legend>\n        <div class="control">\n            <input type="checkbox" id="html" name="lange" />\n            <label for="html">HTML</label>\n        </div>\n        <div class="control">\n            <input type="checkbox" id="css" name="lange" checked />\n            <label for="css">CSS</label>\n        </div>\n        \x3c!-- 省略其他复选框 --\x3e\n    </fieldset>\n    <fieldset>\n        <legend>选择你最喜欢的框架</legend>\n        <div class="control">\n            <input type="radio" name="frameworks" id="bootstrap">\n            <label for="bootstrap">Bootstrap</label>\n        </div>\n        <div class="control">\n            <input type="radio" name="frameworks" id="bulma">\n            <label for="bulma">Bulma</label>\n        </div>\n        \x3c!-- 省略其他单选按钮 --\x3e\n    </fieldset>\n</form>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:'fieldset input {\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n}\n\nfieldset label {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    cursor: pointer;\n    transition: all .2s linear;\n}\n\nfieldset label::before {\n    content: "";\n    width: 2rem;\n    aspect-ratio: 1;\n    border: 2px solid #fff;\n    display: inline-flex;\n    border-radius: 3px;\n    justify-content: center;\n    align-items: center;\n    transition: all .2s linear;\n}\n\nfieldset:has(input[type="radio"]) label::before {\n    border-radius: 50%;\n}\n\ninput:checked ~ label {\n    color: var(--brand);\n}\n\ninput[type="checkbox"]:checked ~ label::before {\n    content: "✓";\n    background-color: var(--brand);\n    border-color: var(--brand);\n    color: #fff;\n}\n\ninput[type="radio"]:checked ~ label::before {\n    content: "✣";\n    background-color: var(--brand);\n    border-color: var(--brand);\n    box-shadow: inset 0 0 0 4px #fff;\n    color: #fff;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/vYVwJwG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYVwJwG"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["这种技术可以跨浏览器使用，而且在某些效果下，这种技术仍然是必需的，例如完全自定义复选框或单选按钮（包括动画等）。但许多情况下，我们不需要任何花哨的样式，只需要将品牌色运用于表单控件（例如，示例中的复选框和单选按钮）上。如此一来，我们就可以摆脱那些笨重的 CSS，是不是很棒？这就是 ",(0,r.jsx)(n.code,{children:"accent-color"})," 的用处！"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":root {\n    --brand: hotpink;\n}\n\nfieldset input {\n    width: 2rem;\n    aspect-ratio: 1;\n    accent-color: var(--brand);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/YzJbrPW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzJbrPW"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在此基础上，引入 CSS 自定义属性，我们还可以创建一些有趣的效果。比如下面这个示例，给每个复选框和单选按钮组分配一个自定义属性，该属性对应元素的索引（",(0,r.jsx)(n.code,{children:"--i"}),"），并使用 HTML 中的 ",(0,r.jsx)(n.code,{children:"style"})," 属性进行设置。然后，我们使用它在 CSS 中计算 HSL 颜色函数中的色相值，以确定 ",(0,r.jsx)(n.code,{children:"accent-color"})," 属性的值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<form>\n    <fieldset>\n        <legend>选择你喜欢的语言</legend>\n        <div class="control" style="--i: 1;">\n            <input type="checkbox" id="html" name="lange" />\n            <label for="html">HTML</label>\n        </div>\n        <div class="control" style="--i: 2;">\n            <input type="checkbox" id="css" name="lange" checked />\n            <label for="css">CSS</label>\n        </div>\n        \x3c!-- 省略其他复选框 --\x3e\n    </fieldset>\n    <fieldset>\n        <legend>选择你最喜欢的框架</legend>\n        <div class="control" style="--i: 1;">\n            <input type="radio" name="frameworks" id="bootstrap">\n            <label for="bootstrap">Bootstrap</label>\n        </div>\n        <div class="control" style="--i: 2;">\n            <input type="radio" name="frameworks" id="bulma">\n            <label for="bulma">Bulma</label>\n        </div>\n        \x3c!-- 省略其他单选按钮 --\x3e\n    </fieldset>\n</form>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:".control {\n    --hue: calc(var(--i) * 30deg + 150deg);\n    --accent-color: hsl(var(--hue, 0), 80%, 50%);\n    accent-color: var(--accent-color);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/rNqgGxb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNqgGxb"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"你还可以使用 CSS 的相对颜色来实现上面示例所展示的效果："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":root {\n    --brand: hotpink;\n}\n\n.control {\n    --accent-color: hsl(from var(--brand) calc(var(--i) * 30deg + 150deg) s l);\n    accent-color: var(--accent-color);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/wvYbrWp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvYbrWp"})," （请使用 Safari 查看 Demo）"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["看上去似乎 OK！但还有一个细节请大家不要遗忘。那就是 ",(0,r.jsx)(n.code,{children:"color-scheme"})," ，尤其是你的表单被运用于多种模式下，比如暗黑模式中，",(0,r.jsx)(n.code,{children:"color-scheme"})," 属性可以帮助我们根据用户对亮色或深色模式的偏好进行样式设计。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<meta name="color-scheme" content="light dark">\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:":root {\n    --bg: white;\n    --color: black;\n    --brand: hotpink;\n    color-scheme: light dark;\n}\n\nbody {\n    background-color: var(--bg);\n    color: var(--color);\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        --bg: black;\n        --color: white;\n        color-scheme: dark;\n    }\n}\n\n@supports (hsl(from var(--brand) 30deg l s)) {\n    .control {\n        --accent-color: hsl(from var(--brand) calc(var(--i) * 30deg + 150deg) s l);\n        accent-color: var(--accent-color);\n    }\n  \n    @media (prefers-color-scheme: dark) {\n        .control {\n            --accent-color: hsl(from var(--brand) calc(var(--i) * 30deg + 150deg) 80% 80%);\n        }\n    }\n}\n\n@supports not (hls(from var(--brand) 30deg l s)) {\n    .control {\n        --hue: calc(var(--i) * 30deg + 150deg);\n        accent-color: hsl(var(--hue, 0), 80%, 50%);\n    }\n\n    @media (prefers-color-scheme: dark) {\n        .control {\n            color: hsl(var(--hue, 0), 80%, 80%);\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/poxmWPq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poxmWPq"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这样就完美了！"}),"\n",(0,r.jsxs)(n.p,{children:["在这里，我们主要谈到了复选框和单选按钮，因为它们是最常见的需要自定义的表单元素之一。但是 ",(0,r.jsx)(n.code,{children:"accent-color"})," 具有为许多表单元素提供快速简便样式的潜力，特别是在不需要进行广泛自定义的情况下，同时允许浏览器选择最佳的可访问选项。"]}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["目前，",(0,r.jsx)(n.code,{children:"accent-color"})," 只能运用于复选框、单选按钮、进度条和滑块四个元素上。不过，",(0,r.jsx)(n.code,{children:"accent-color"})," 只能样式化这四个元素的着重色，但不允许完全自定义样式。如果你需要完全自定义本地控件，那还是需要采用一些额外的技术手段，比如使用伪元素模拟表单控件。"]}),"\n",(0,r.jsxs)(n.p,{children:["虽然目前只有复选框、单选按钮、进度条和滑块四个元素受益于 ",(0,r.jsx)(n.code,{children:"accent-color"})," 属性，但并不代表以后也只有这四个元素受益于 ",(0,r.jsx)(n.code,{children:"accent-color"})," 。也就是说，以后可能会有更多的 Web 控件受益于 ",(0,r.jsx)(n.code,{children:"accent-color"}),"。例如，",(0,r.jsx)(n.code,{children:"<select>"})," 中选定的 ",(0,r.jsx)(n.code,{children:"<option>"})," 等元素可以采用 ",(0,r.jsx)(n.code,{children:"accent-color"})," 突出显示。"]}),"\n",(0,r.jsxs)(n.p,{children:["除此之外，我们的 Web 控件会用于不同的模式之中，比如亮色模式或暗色模式下。为了确保它在不同的模式下都能有一个完美的 UI 效果，我们还需要考虑使用 ",(0,r.jsx)(n.code,{children:"color-scheme"})," 属性，使客户端（比如浏览器）能在相应模式下自动匹配系统颜色。这样做的好处除了使 Web 控件 UI 更美观之外，还能使其更具可访问性。"]})]})}function E(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(L,{...e})}):L(e)}let M=E;E.__RSPRESS_PAGE_META={},E.__RSPRESS_PAGE_META["%E7%8E%B0%E4%BB%A3CSS%2F%E7%AC%AC14%E7%AB%A0%E2%80%94Web%E6%8E%A7%E4%BB%B6UI%E9%A2%9C%E8%89%B2%E7%9A%84%E5%AE%9A%E5%88%B6%EF%BC%9Aaccent-color%E5%92%8Ccolor-scheme.md"]={toc:[{text:"accent-color 的简介",id:"accent-color-的简介",depth:2},{text:"accent-color 的使用",id:"accent-color-的使用",depth:2},{text:"可用 accent-color 的元素",id:"可用-accent-color-的元素",depth:2},{text:"给更多的元素设置着重色",id:"给更多的元素设置着重色",depth:2},{text:"color-scheme 的简介",id:"color-scheme-的简介",depth:2},{text:"color-scheme 的使用",id:"color-scheme-的使用",depth:2},{text:"与 prefers-color-scheme 结合在一起",id:"与-prefers-color-scheme-结合在一起",depth:3},{text:"与 meta 标签结合使用",id:"与-meta-标签结合使用",depth:3},{text:"与 prefers-color-scheme 相互影响",id:"与-prefers-color-scheme-相互影响",depth:3},{text:"案例：美化表单样式",id:"案例美化表单样式",depth:2},{text:"小结",id:"小结",depth:2}],title:"第14章—Web控件UI颜色的定制：accent-color和color-scheme",headingTitle:"第14章—Web控件UI颜色的定制：accent-color和color-scheme",frontmatter:{}}}}]);