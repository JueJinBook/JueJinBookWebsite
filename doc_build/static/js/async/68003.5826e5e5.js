"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["68003"],{356982:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var s=r(552676),i=r(740453);let t=r.p+"static/image/2961a11bf25b6a6848c046f805a5e0dd.2c6145d7.webp",o=r.p+"static/image/21abdd1aa321b1c6b1fd001c220ea548.c04c08c8.webp",c=r.p+"static/image/fd2c685dac93cc96ac99133183e3954a.edac40fd.webp",d=r.p+"static/image/ee6d763e963dc1e86304055a9b1a321d.aa393669.webp";function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ul:"ul",li:"li",h2:"h2",code:"code",blockquote:"blockquote",h4:"h4",pre:"pre",img:"img"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"15服务端实战数据库工具封装",children:["15.服务端实战：数据库工具封装",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#15服务端实战数据库工具封装",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在了解完 ",(0,s.jsx)(n.strong,{children:"NestJS"})," 的基础配置之后，服务端的内容将引来一个比较重要的环节：",(0,s.jsx)(n.strong,{children:"数据库"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"因为数据库的内容比较多，所以相关内容将分为两个章节来展开讨论："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"数据库工具封装"})," - 将封装统一的数据库操作工具类，方便后期开发于集成"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"数据库实操"})," - 结合实际项目讲述 ",(0,s.jsx)(n.strong,{children:"TypeORM"})," 的使用以及 ",(0,s.jsx)(n.strong,{children:"MySQL"})," 与 ",(0,s.jsx)(n.strong,{children:"Mongoose"})," 的示例"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"typeorm",children:["TypeORM",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#typeorm",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["日常对数据库的操作需要借助于 ",(0,s.jsx)(n.code,{children:"SQL"}),"，至少需要掌握基础的 ",(0,s.jsx)(n.code,{children:"SQL"})," 语法就有建表、增删改查等。但如果想要在代码中直接实现对数据库的操作，就需要去写大量 ",(0,s.jsx)(n.code,{children:"SQL"})," ，这在",(0,s.jsx)(n.strong,{children:"可读性、维护性及开发体验上都非常糟糕"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["于是 ",(0,s.jsx)(n.strong,{children:"ORM"})," 框架应运而生，这类的框架是为了解决面向",(0,s.jsx)(n.strong,{children:"对象与关系数据库存在的互不匹配的现象"}),"，把面向 ",(0,s.jsx)(n.code,{children:"SQL"})," 开发转变为面向对象开发，开发不需要关注底层实现细节，而是以操作对象的模式使用数据库。"]}),"\n",(0,s.jsxs)(n.p,{children:["虽然市面上也有其他不错的 ",(0,s.jsx)(n.code,{children:"ORM"})," 框架，比如 ",(0,s.jsx)(n.a,{href:"https://sequelize.org/",target:"_blank",rel:"noopener noreferrer",children:"Sequelize"}),"、",(0,s.jsx)(n.a,{href:"https://www.prisma.io/",target:"_blank",rel:"noopener noreferrer",children:"Prisma"})," 等，但 ",(0,s.jsx)(n.code,{children:"TypeORM"})," 使用\xa0",(0,s.jsx)(n.code,{children:"TypeScript"}),"\xa0编写，在\xa0",(0,s.jsx)(n.code,{children:"NestJS"}),"\xa0框架下运行得非常好，也是 ",(0,s.jsx)(n.code,{children:"NestJS"})," 首推的 ",(0,s.jsx)(n.code,{children:"ORM"})," 框架，有开箱即用的\xa0",(0,s.jsx)(n.code,{children:"@nestjs/typeorm"}),"\xa0软件包支持。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"这一章对于很多偏前端的同学来说，会稍微有点复杂，但借助于 ORM 框架来说，并非是无从下手。"}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"封装",children:["封装",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#封装",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"NestJS"})," 使用 ",(0,s.jsx)(n.code,{children:"TypeORM"})," 的方式有两种。一种是 ",(0,s.jsx)(n.code,{children:"NestJS"})," 提供的 ",(0,s.jsx)(n.code,{children:"@nestjs/typeorm"})," 集成包，可以导出 ",(0,s.jsx)(n.code,{children:"TypeOrmModule.forRoot"})," 方法来连接数据库，同时可以使用 ",(0,s.jsx)(n.code,{children:"ormconfig.json"})," 将数据库链接配置项剥离。另外一种是直接使用 ",(0,s.jsx)(n.code,{children:"typeorm"}),"，自由封装 ",(0,s.jsx)(n.code,{children:"Providers"})," 导入使用。"]}),"\n",(0,s.jsxs)(n.p,{children:["两种方案各有优缺点，使用 ",(0,s.jsx)(n.code,{children:"@nestjs/typeorm"})," 集成的方案较为简便，但自建的业务脚手架需要两种数据库保证在开发中体验一致性，此外之前已经自定义了全局环境变量的配置，没有必要再多一个 ",(0,s.jsx)(n.code,{children:"ormconfig.json"})," 的配置来增加额外理解成本，所以接下来我们将使用第二种方案来连接数据库。"]}),"\n",(0,s.jsxs)(n.p,{children:["由于我们已经采用了 ",(0,s.jsx)(n.strong,{children:"Monorepo"})," 的开发模式且已经使用了 ",(0,s.jsx)(n.strong,{children:"Lib"}),"，所以将封装工具类全部收敛进 ",(0,s.jsx)(n.code,{children:"libs/comm"}),"，所以这一步开始都是基于 ",(0,s.jsx)(n.code,{children:"libs/comm"})," 工具库。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第一步"}),"：跟之前一样，为了使用 ",(0,s.jsx)(n.code,{children:"TypeORM"}),"，先安装以下依赖："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"$ pnpm add typeorm mysql2 mongoose -w\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第二步"}),"：在 ",(0,s.jsx)(n.code,{children:"dev.yaml"})," 中添加数据库配置参数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'MONGODB_CONFIG:\n  name: "ignition_test"              # 自定义次数据库链接名称\n  type: mongodb                      # 数据库链接类型\n  url: "mongodb://localhost:27017"   # 数据库链接地址\n  username: "root"                   # 数据库链接用户名\n  password: "123456"                 # 数据库链接密码\n  database: "fast_gateway_test"      # 数据库名\n  entities: "mongo"                  # 自定义加载类型\n  logging: false                     # 数据库打印日志\n  synchronize: true                  # 是否开启同步数据表功能\nMYSQL_CONFIG:\n  name: "material_test"\n  type: "mysql"\n  host: "121.36.198.10"\n  port: 3306\n  username: "root"\n  password: "123456"\n  database: "material_test"\n  entities: "mysql"\n  logging: true\n  synchronize: true\n'})}),"\n",(0,s.jsxs)(n.p,{children:["以上是数据库连接的必要参数，其他的参数可以",(0,s.jsx)(n.a,{href:"https://typeorm.io/data-source-options",target:"_blank",rel:"noopener noreferrer",children:"参考文档"}),"根据需求添加，例如 ",(0,s.jsx)(n.code,{children:"retryAttempts"}),"（重试连接数据库的次数）、",(0,s.jsx)(n.code,{children:"keepConnectionAlive"}),"（应用程序关闭后连接是否关闭） 等配置项。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"MongoDB"})," 是无模式的，所以即使在配置参数开启了 ",(0,s.jsx)(n.code,{children:"synchronize"}),"，启动项目的时候也不会去数据库创建对应的表，所以不用奇怪，并没有出错，但 ",(0,s.jsx)(n.code,{children:"Mysql"})," 在每次应用程序启动时自动同步表结构。为了避免意外 ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"synchronize"})," 这个配置参数一定不要在生产环境开启，每次服务启动的时候都会同步数据库表结构，如果出现主键不同、表结构不等的情况下，会直接进行数据库删表操作，生产环境一定要关闭！"]})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第三步"}),"：新建 ",(0,s.jsx)(n.code,{children:"lib/comm/src/database/database.providers.ts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { DataSource } from 'typeorm';\n\nimport { getConfig } from '../utils/index';\nimport { NamingStrategy } from './naming.strategies';\n\nconst { MONGODB_CONFIG, MYSQL_CONFIG } = getConfig();\n\nconst MONGODB_DATABASE_CONFIG = {\n  ...MONGODB_CONFIG,\n  entities: [`dist/**/*.${MONGODB_CONFIG.entities}.entity.js`]\n};\n\nconst MYSQL_DATABASE_CONFIG = {\n  ...MYSQL_CONFIG,\n  namingStrategy: new NamingStrategy(),\n  entities: [`dist/**/*.${MYSQL_CONFIG.entities}.entity.js`]\n};\n\nconst MONGODB_DATA_SOURCE = new DataSource(MONGODB_DATABASE_CONFIG);\nconst MYSQL_DATA_SOURCE = new DataSource(MYSQL_DATABASE_CONFIG);\n\n// 数据库注入\nexport const DatabaseProviders = [\n  {\n    provide: 'MONGODB_DATA_SOURCE',\n    useFactory: async () => {\n      if (!MONGODB_DATA_SOURCE.isInitialized) await MONGODB_DATA_SOURCE.initialize();\n      return MONGODB_DATA_SOURCE;\n    },\n  },\n  {\n    provide: 'MYSQL_DATA_SOURCE',\n    useFactory: async () => {\n      if (!MYSQL_DATA_SOURCE.isInitialized) await MYSQL_DATA_SOURCE.initialize();\n      return MYSQL_DATA_SOURCE;\n    },\n  },\n];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["其中 ",(0,s.jsx)(n.code,{children:"utils/index"})," 为上一章插件的内容，我们可以将它移动到 ",(0,s.jsx)(n.code,{children:"lib"})," 里面，方便其他项目使用。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"注意"}),"：创建的实体类文件命名后缀统一为 ",(0,s.jsx)(n.code,{children:"entity.ts"}),"，但为了区分不同的数据库扫描，加了 ",(0,s.jsx)(n.code,{children:"MYSQL_CONFIG.entities"})," 来区分不同的数据库类型，同样当我们需要使用多数据库的时候，可以依照这种模式来新增不同的数据库。"]}),"\n",(0,s.jsxs)(n.p,{children:["其中针对于 ",(0,s.jsx)(n.strong,{children:"MySQL"})," 理论上都需要遵守驼峰命名规范，需要对一些不太规范的实体类名进行转换，所以会比 ",(0,s.jsx)(n.strong,{children:"Mongoose"})," 对一个配置 ",(0,s.jsx)(n.code,{children:"naming.strategies.ts"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"/*\n * @Author: Cookie\n * @Description: 添加数据库表与字段驼峰转下划线功能\n */\n\nimport { DefaultNamingStrategy, NamingStrategyInterface } from 'typeorm';\nimport { snakeCase } from 'typeorm/util/StringUtils';\n\nexport class NamingStrategy\n  extends DefaultNamingStrategy\n  implements NamingStrategyInterface {\n\n  tableName(className: string, customName: string): string {\n    return customName ? customName : snakeCase(className);\n  }\n\n  columnName(\n    propertyName: string,\n    customName: string,\n    embeddedPrefixes: string[],\n  ): string {\n    return (\n      snakeCase(embeddedPrefixes.concat('').join('_')) +\n      (customName ? customName : snakeCase(propertyName))\n    );\n  }\n\n  relationName(propertyName: string): string {\n    return snakeCase(propertyName);\n  }\n\n  joinColumnName(relationName: string, referencedColumnName: string): string {\n    return snakeCase(relationName + '_' + referencedColumnName);\n  }\n\n  joinTableName(\n    firstTableName: string,\n    secondTableName: string,\n    firstPropertyName: string,\n    secondPropertyName: string,\n  ): string {\n    return snakeCase(\n      `${firstTableName}_${firstPropertyName.replace(\n        /\\./gi,\n        '_',\n      )}_${secondTableName}`,\n    );\n  }\n\n  joinTableColumnName(\n    tableName: string,\n    propertyName: string,\n    columnName?: string,\n  ): string {\n    return snakeCase(\n      tableName + '_' + (columnName ? columnName : propertyName),\n    );\n  }\n\n  classTableInheritanceParentColumnName(\n    parentTableName: any,\n    parentTableIdPropertyName: any,\n  ): string {\n    return snakeCase(parentTableName + '_' + parentTableIdPropertyName);\n  }\n\n  eagerJoinRelationAlias(alias: string, propertyPath: string): string {\n    return alias + '__' + propertyPath.replace('.', '_');\n  }\n\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第四步"}),"：新建 ",(0,s.jsx)(n.code,{children:"database.module.ts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Global, Module } from '@nestjs/common';\nimport { DatabaseProviders } from './database.providers';\n\n@Global()\n@Module({\n  providers: [...DatabaseProviders],\n  exports: [...DatabaseProviders],\n})\n\nexport class DatabaseModule { }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["至此我们已经封装了 ",(0,s.jsx)(n.code,{children:"MongoDB"})," 与 ",(0,s.jsx)(n.code,{children:"MySQL"})," 的 ",(0,s.jsx)(n.code,{children:"Provider"}),"，作为统一的数据库操作类提供给其他的服务调用，但这其中也有一些缺陷，例如实体类的注册是依赖于",(0,s.jsx)(n.strong,{children:"静态路径"}),"收集注册，也就是采用此方式的话，不太适用于 ",(0,s.jsx)(n.strong,{children:"Webpack"})," 热更新与 ",(0,s.jsx)(n.strong,{children:"Monorep"})," 的方案，所以想使用其他方案的话，就不要采取这个模式。"]}),"\n",(0,s.jsxs)(n.h4,{id:"使用",children:["使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["从这一步开始都是基于 ",(0,s.jsx)(n.code,{children:"app/low-code-test"})," 实际服务端项目"]}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第一步"}),"：注册实体，创建 ",(0,s.jsx)(n.code,{children:"src/user/user.mongo.entity.ts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Entity, Column,  ObjectIdColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @ObjectIdColumn()\n  id?: number;\n\n  @Column({ default: null })\n  name: string;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"MongoDB"})," 里面使用的是 ",(0,s.jsx)(n.code,{children:"ObjectIdColumn"})," 作为类似 ",(0,s.jsx)(n.code,{children:"MySQL"})," 的自增主键，来保证数据唯一性，只是类似，并不是跟普通自增主键一样会递增，把它看成 ",(0,s.jsx)(n.code,{children:"uuid"})," 类似即可。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第二步"}),"：创建 ",(0,s.jsx)(n.code,{children:"user.providers.ts"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { User } from './user.mongo.entity';\n\nexport const UserProviders = [\n  {\n    provide: 'USER_REPOSITORY',\n    useFactory: async (AppDataSource) => await AppDataSource.getRepository(User),\n    inject: ['MONGODB_DATA_SOURCE'],\n  },\n];\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第三步"}),"：创建 ",(0,s.jsx)(n.code,{children:"user.service.ts"}),"，新增添加用户 ",(0,s.jsx)(n.code,{children:"service"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { In, Like, Raw, MongoRepository } from 'typeorm';\nimport { Injectable, Inject } from '@nestjs/common';\nimport { User } from './user.mongo.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @Inject('USER_REPOSITORY')\n    private userRepository: MongoRepository<User>\n  ) { }\n\n  createOrSave(user) {\n   return this.userRepository.save(user)\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第四步"}),"：创建 ",(0,s.jsx)(n.code,{children:"user.dto.ts"}),"，插件"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\nexport class AddUserDto {\n  @ApiProperty({ example: 123, })\n  id?: string;\n\n  @ApiProperty({ example: 'cookie' })\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({ example: 'cookieboty@qq.com' })\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: 'cookieboty' })\n  @IsNotEmpty()\n  username: string;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["有的同学可能会问，",(0,s.jsx)(n.strong,{children:"DTO（Data Transfer Object）"})," 与 ",(0,s.jsx)(n.strong,{children:"Entities"})," 的区别，毕竟两个文件都很类似。"]}),"\n",(0,s.jsx)(n.p,{children:"首先它们都用于表示数据，但在设计和用途方面有所不同："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"DTO"})," 是一种数据传输对象，用于在不同的层之间传输数据。它通常用于将数据从数据库层传输到应用程序层，或将数据从应用程序层传输到前端层。",(0,s.jsx)(n.strong,{children:"DTO"})," 的设计目的是为了最大程度地减少数据传输的开销，通常只包含必要的数据字段，而不包含任何业务逻辑或操作方法。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Entities"})," 是一种实体对象，用于表示应用程序中的业务对象或领域对象。它通常用于表示数据库中的表或文档，或者表示应用程序中的业务对象。",(0,s.jsx)(n.strong,{children:"Entities"})," 的设计目的是为了封装业务逻辑和操作方法，以便在应用程序中进行操作和处理。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第五步"}),"：创建 ",(0,s.jsx)(n.code,{children:"user.controller.ts"}),"，添加新增用户的 ",(0,s.jsx)(n.code,{children:"http"})," 请求方法:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Controller, Post, Body, Query, Get } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { AddUserDto } from './user.dto';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('用户')\n@Controller('user')\nexport class UserController {\n  constructor(\n    private readonly userService: UserService,\n  ) { }\n\n  @ApiOperation({\n    summary: '新增用户',\n  })\n  @Post('/add')\n  create(@Body() user: AddUserDto) {\n    return this.userService.createOrSave(user);\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第六步"}),"：创建 ",(0,s.jsx)(n.code,{children:"user.module.ts"}),"，将 ",(0,s.jsx)(n.code,{children:"controller"}),"、",(0,s.jsx)(n.code,{children:"providers"}),"、",(0,s.jsx)(n.code,{children:"service"})," 等都引入后，",(0,s.jsx)(n.strong,{children:"切记"}),"将 ",(0,s.jsx)(n.code,{children:"user.module.ts"})," 导入 ",(0,s.jsx)(n.code,{children:"app.module.ts"})," 后才会生效，这一步别忘记了 :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Module } from '@nestjs/common';\nimport { DatabaseModule } from '@app/comm/database/database.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { UserProviders } from './user.providers';\nimport { FeishuController } from './feishu/feishu.controller';\nimport { FeishuService } from './feishu/feishu.service';\n\n@Module({\n  imports: [\n    DatabaseModule\n  ],\n  controllers: [\n    FeishuController,\n    UserController\n  ],\n  providers: [...UserProviders, UserService, FeishuService],\n  exports: [UserService],\n})\nexport class UserModule { }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["完成上述所有步骤之后，此时打开 ",(0,s.jsx)(n.code,{children:"Swagger"})," 文档可以看到，已经创建好了 ",(0,s.jsx)(n.code,{children:"/api/user/add"})," 新增用户的 ",(0,s.jsx)(n.code,{children:"http"})," 接口："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"点击测试能正常得到如下返回值的话，则代表数据插入成功，功能正常："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["查询数据库所得如下所示：\n",(0,s.jsx)("img",{src:t,alt:"image.png"})]}),"\n",(0,s.jsxs)(n.h2,{id:"写在最后",children:["写在最后",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["本章主要介绍了如何封装一个数据库操作类，与直接使用 ",(0,s.jsx)(n.strong,{children:"NestJS"})," 自带的 ",(0,s.jsx)(n.strong,{children:"TypeORM"})," 工具库不同的是，我们是自己封装了一套，这样的好处是自定义程度会更高，但与之而来就是很多特性我们也就无法再使用，如果有需求的话就需要自己重新开发。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果不喜欢自己折腾的话，可以看下 ",(0,s.jsx)(n.code,{children:"@nestjs/typeorm"})," 的使用，结合 ",(0,s.jsx)(n.strong,{children:"NetsJS"})," 的官方文档上手也不慢。"]}),"\n",(0,s.jsx)(n.p,{children:"但对于小册来说，我希望带来的是不一样的视角与实战的经验而不是文档的转述与解读，有一定自学能力的同学其实看文档也就足够了。"}),"\n",(0,s.jsx)(n.p,{children:"无论选择哪一种方案，下一章，我们将学习数据库实操的相关内容。"}),"\n",(0,s.jsx)(n.p,{children:"如果你有什么疑问，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let h=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F15.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85.md"]={toc:[{text:"TypeORM",id:"typeorm",depth:2},{text:"封装",id:"封装",depth:4},{text:"使用",id:"使用",depth:4},{text:"写在最后",id:"写在最后",depth:2}],title:"15.服务端实战：数据库工具封装",headingTitle:"15.服务端实战：数据库工具封装",frontmatter:{}}}}]);