"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["92708"],{798434:function(e,n,s){s.r(n),s.d(n,{default:()=>f});var r=s(552676),t=s(740453);let c=s.p+"static/image/f0c6cddbd5a8f7e2f667d11278405bb8.0df92f32.webp",o=s.p+"static/image/cda17f65f1d300b8e81a7c728cd284d2.91b07ab6.webp",i=s.p+"static/image/82f07d214040532ecd81821593ca7eba.4e72c9fe.webp",l=s.p+"static/image/754338dd644a3beb200c3af09fcb4f6a.cda14107.webp",d=s.p+"static/image/0db38a7de226825820416b9f484697b5.73946a4d.webp",a=s.p+"static/image/81800ee8ee16d9b0002916052d37d44e.17f54ca8.webp",p=s.p+"static/image/75aa92b8cebe4c29851fa39eb27a77a4.54849e02.webp",h=s.p+"static/image/d745297428fbdde61ec45ccb6d8eedb8.78525d21.webp",x=s.p+"static/image/ed1a496600642c5411fdfee332dc0c89.6f0da7da.webp",j=s.p+"static/image/21e9802729f2099b561eac826206a5e3.48932bab.webp",m=s.p+"static/image/417d79dfe690ecd0a8d4371469c1528a.c83e7da8.webp";function g(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",h4:"h4",code:"code",pre:"pre",img:"img",blockquote:"blockquote",ol:"ol",li:"li"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"14服务端实战基础大综合",children:["14.服务端实战：基础大综合",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14服务端实战基础大综合",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在上一章节中，我们使用 ",(0,r.jsx)(n.strong,{children:"CLI"})," 与 ",(0,r.jsx)(n.strong,{children:"PNPM"})," 得到了一套基础的项目工程。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Nest"})," 为开发者提供了非常多的内置或配套的功能例如",(0,r.jsx)(n.strong,{children:"高速缓存、日志拦截、过滤器、微服务"}),"等多种模块，方便开发者根据自身的业务需求定制适合当前业务的工程，但 ",(0,r.jsx)(n.strong,{children:"CLI"})," 提供的基础框架并没有内置这些服务，需要开发自己配置。"]}),"\n",(0,r.jsx)(n.p,{children:"本章将根据业务需求选择对应的模块搭建出一个符合要求的通用性脚手架。"}),"\n",(0,r.jsxs)(n.h2,{id:"fastify--express",children:["Fastify & Express",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fastify--express",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在上一本《",(0,r.jsx)(n.strong,{children:"NesJS 实战"}),"》的实战项目网关系统中为了追求性能，我们使用了 ",(0,r.jsx)(n.strong,{children:"Fastify"})," 作为底层框架，但对于一个需要商业化的项目，稳定性、开发效率会有一定要求，并不能太过于追求技术实现，所以 ",(0,r.jsx)(n.strong,{children:"Express"})," 显然是一种更好的选择。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Express"})," 作为老牌的框架，它经历了非常多的大型项目实战的考验以及长期的迭代，同时社区生态非常的丰富，遇到大部分的问题都可以快速找到解决方案，对于新手会更加友好，而使用 ",(0,r.jsx)(n.strong,{children:"Fastify"})," 有些模块需要自己重新实现一下，开发效率会有所降低。"]}),"\n",(0,r.jsxs)(n.p,{children:["所以这次的低代码相关的项目将采用 ",(0,r.jsx)(n.strong,{children:"Express"})," 作为底层框架。"]}),"\n",(0,r.jsxs)(n.h2,{id:"版本控制",children:["版本控制",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#版本控制",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["之前学习过 ",(0,r.jsx)(n.strong,{children:"DevOps"})," 小册的同学，应该对 ",(0,r.jsx)(n.a,{href:"https://docs.gitlab.com/ee/api/",target:"_blank",rel:"noopener noreferrer",children:"GitLab OpenApi"})," 比较熟悉，肯定也使用过这样的请求 ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://gitlab.example.com/api/v4/projects",target:"_blank",rel:"noopener noreferrer",children:"https://gitlab.example.com/api/v4/projects"})})," ，可以看出链接上面是带 v4 版本的。"]}),"\n",(0,r.jsxs)(n.h4,{id:"单个请求控制",children:["单个请求控制",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单个请求控制",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第一步"}),"：在 ",(0,r.jsx)(n.code,{children:"main.ts"})," 启用版本配置："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { VersioningType } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  // 接口版本化管理\n  app.enableVersioning({\n    type: VersioningType.URI,\n  });\n\n  await app.listen(3000);\n}\n\nbootstrap();\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第二步"}),"：启用版本配置之后再在 ",(0,r.jsx)(n.code,{children:"Controller"})," 中请求方法添加对应的版本号装饰器："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Controller, Version } from '@nestjs/common';\n\n  @Get()\n  @Version('1')\n  findAll() {\n    return this.appService.findAll();\n  }\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["配置完毕之后从上图可以看到，只有携带了版本号的请求 ",(0,r.jsx)(n.a,{href:"http://localhost:3000/v1",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/v1"})," 能正常返回数据，而之前未携带版本号的请求 ",(0,r.jsx)(n.a,{href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000"})," 返回了 404 错误。"]}),"\n",(0,r.jsxs)(n.p,{children:["除了针对某一个请求添加版本之外，同样也可以添加全局以及整个 ",(0,r.jsx)(n.code,{children:"Controller"})," 的版本，除了 URL 上携带之外，还可以放在 ",(0,r.jsx)(n.strong,{children:"Header"})," 中或者使用 ",(0,r.jsx)(n.strong,{children:"MEDIA_TYPE"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:" app.enableVersioning({\n-   type: VersioningType.URI,\n+   type: VersioningType.HEADER,\n });\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:" app.enableVersioning({\n-   type: VersioningType.URI,\n+   type: VersioningType..MEDIA_TYPE,\n+   key: 'v='\n });\n"})}),"\n",(0,r.jsx)(n.p,{children:"具体的版本配置规则可以根据自己的实际需求进行取舍，更多的详细用法可以参考官方文档。"}),"\n",(0,r.jsxs)(n.h4,{id:"全局配置请求控制",children:["全局配置请求控制",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#全局配置请求控制",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第一步"}),"：修改 ",(0,r.jsx)(n.code,{children:"enableVersioning"})," 配置项："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"app.enableVersioning({\n+   defaultVersion: '1',\n    type: VersioningType.URI,\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第二步"}),"：修改 ",(0,r.jsx)(n.code,{children:"Controller"})," 的配置，在 ",(0,r.jsx)(n.code,{children:"Controller"})," 装饰器中添加 ",(0,r.jsx)(n.code,{children:"version"})," 属性："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"- @Get()\n- @Version('1')\n+ @Controller({\n+  path: 'user',\n+  version: '1',\n+ })\n"})}),"\n",(0,r.jsxs)(n.p,{children:["完成上述的操作就可以对一整个 ",(0,r.jsx)(n.code,{children:"Controller"})," 进行版本控制。但有的时候，我们需要做针对一些接口做兼容性的更新，而其他的请求是不需要携带版本，又或者请求有多个版本的时候，而默认请求想指定一个版本的话，我们可以在 ",(0,r.jsx)(n.code,{children:"enableVersioning"})," 添加 ",(0,r.jsx)(n.code,{children:"defaultVersion"})," 参数达到上述的要求："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"+ import { VersioningType, VERSION_NEUTRAL } from '@nestjs/common';\n  app.enableVersioning({\n-    defaultVersion: '1',\n+    defaultVersion: [VERSION_NEUTRAL, '1', '2']\n  });\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"  @Get()\n  @Version([VERSION_NEUTRAL, '1'])\n  findAll() {\n    return 'i am old one';\n  }\n\n  @Get()\n  @Version('2')\n  findAll2() {\n    return 'i am new one';\n  }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["接下来分别访问对应的请求",(0,r.jsx)(n.a,{href:"http://localhost:3000/user",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/user"})," 与 ",(0,r.jsx)(n.a,{href:"http://localhost:3000/v2/user",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/v2/user"})," 可以获取到如下的返回值："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"全局返回参数",children:["全局返回参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#全局返回参数",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在配置版本的过程中，也不断地测试了很多次接口，不难发现返回的接口数据非常的不标准，在一个正常的项目中不太合适用这种数据结构返回，毕竟这样对前端不友好，也不利于前端做统一的拦截与取值，所以需要格式化请求参数，输出统一的接口规范。"}),"\n",(0,r.jsx)(n.p,{children:"一般正常项目的返回参数应该包括如下的内容："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n    data, // 数据\n    status: 0, // 接口状态值\n    extra: {}, // 拓展信息\n    message: 'success', // 异常信息\n    success：true // 接口业务返回状态\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"想要输出上述标准的返回参数格式的话："}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第一步"}),"：新建 ",(0,r.jsx)(n.code,{children:"src/common/interceptors/transform.interceptor.ts"})," 文件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\ninterface Response<T> {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor<T>\n  implements NestInterceptor<T, Response<T>>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable<Response<T>> {\n    return next.handle().pipe(\n      map((data) => ({\n        data,\n        status: 0,\n        extra: {},\n        message: 'success',\n        success: true,\n      })),\n    );\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第二步"}),"：修改 ",(0,r.jsx)(n.code,{children:"main.ts"})," 文件，添加 ",(0,r.jsx)(n.code,{children:"useGlobalInterceptors"})," 全局拦截器，处理返回值"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"+ import { TransformInterceptor } from './common/interceptors/transform.interceptor';\n// 统一响应体格式\n+ app.useGlobalInterceptors(new TransformInterceptor());\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后我们再次访问之前的请求，就能获取到标准格式的接口返回值了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h2,{id:"全局异常拦截",children:["全局异常拦截",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#全局异常拦截",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"处理完正常的返回参数格式之后，对于异常处理也应该做一层标准的封装，这样利于开发前端的同学统一处理这类异常错误。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第一步"}),"：新建 ",(0,r.jsx)(n.code,{children:"src/common/exceptions/base.exception.filter.ts"})," 与 ",(0,r.jsx)(n.code,{children:"http.exception.filter.ts"})," 两个文件，从命名中可以看出它们分别处理",(0,r.jsx)(n.strong,{children:"统一异常"}),"与 ",(0,r.jsx)(n.code,{children:"HTTP"})," 类型的接口相关异常。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"base.exception.filter"})," => ",(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"Catch"})," 的参数为空时，默认捕获所有异常"]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpStatus,\n  ServiceUnavailableException,\n} from '@nestjs/common';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  catch(exception: Error, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    // 非 HTTP 标准异常的处理。\n    response.status(HttpStatus.SERVICE_UNAVAILABLE).json({\n      statusCode: HttpStatus.SERVICE_UNAVAILABLE,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: new ServiceUnavailableException().getResponse(),\n    });\n  }\n}\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"http.exception.filter.ts"})," => ",(0,r.jsx)(n.code,{children:"Catch"})," 的参数为 ",(0,r.jsx)(n.code,{children:"HttpException"})," 将只捕获 ",(0,r.jsx)(n.code,{children:"HTTP"})," 相关的异常错误"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.getResponse(),\n    });\n  }\n}\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"第二步"}),"：在 ",(0,r.jsx)(n.code,{children:"main.ts"})," 文件中添加 ",(0,r.jsx)(n.code,{children:"useGlobalFilters"})," 全局过滤器："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"+ import { AllExceptionsFilter } from './common/exceptions/base.exception.filter';\n+ import { HttpExceptionFilter } from './common/exceptions/http.exception.filter';\n  // 异常过滤器\n+ app.useGlobalFilters(new AllExceptionsFilter(), new HttpExceptionFilter());\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"这里一定要注意引入自定义异常的先后顺序，不然异常捕获逻辑会出现混乱"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["完成上述操作之后开始检验是否配置正常。首先访问一个不存在的接口 ",(0,r.jsx)(n.a,{href:"http://localhost:3000/test",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/test"})," ，此时可以对比自定义与原生的异常返回参数区别。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["验证完 ",(0,r.jsx)(n.code,{children:"HTTP"})," 异常之后，我们接着在 ",(0,r.jsx)(n.code,{children:"UserController"})," 中伪造一个程序运行异常的接口，来验证常规异常是否能被正常捕获："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  @Get('findError')\n  @Version([VERSION_NEUTRAL, '1'])\n  findError() {\n    const a: any = {}\n    console.log(a.b.c)\n    return this.appService.getHello();\n  }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["再次访问 ",(0,r.jsx)(n.a,{href:"http://localhost:3000/findError",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/findError"})," ，此时可以看到原生与自定义返回的异常错误存在一定的区别了。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["除了全局异常拦截处理之外，我们需要再新建一个 ",(0,r.jsx)(n.code,{children:"business.exception.ts"})," 来处理业务运行中预知且主动抛出的异常："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { HttpException, HttpStatus } from '@nestjs/common';\nimport { BUSINESS_ERROR_CODE } from './business.error.codes';\n\ntype BusinessError = {\n  code: number;\n  message: string;\n};\n\nexport class BusinessException extends HttpException {\n  constructor(err: BusinessError | string) {\n    if (typeof err === 'string') {\n      err = {\n        code: BUSINESS_ERROR_CODE.COMMON,\n        message: err,\n      };\n    }\n    super(err, HttpStatus.OK);\n  }\n\n  static throwForbidden() {\n    throw new BusinessException({\n      code: BUSINESS_ERROR_CODE.ACCESS_FORBIDDEN,\n      message: '抱歉哦，您无此权限！',\n    });\n  }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export const BUSINESS_ERROR_CODE = {\n  // 公共错误码\n  COMMON: 10001,\n  // 特殊错误码\n  TOKEN_INVALID: 10002,\n  // 禁止访问\n  ACCESS_FORBIDDEN: 10003,\n  // 权限已禁用\n  PERMISSION_DISABLED: 10003,\n  // 用户已冻结\n  USER_DISABLED: 10004,\n};\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["简单改造一下 ",(0,r.jsx)(n.code,{children:"HttpExceptionFilter"}),"，在处理 ",(0,r.jsx)(n.code,{children:"HTTP"})," 异常返回之前先处理业务异常："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { BusinessException } from './business.exception';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    // 处理业务异常\n    if (exception instanceof BusinessException) {\n      const error = exception.getResponse();\n      response.status(HttpStatus.OK).json({\n        data: null,\n        status: error['code'],\n        extra: {},\n        message: error['message'],\n        success: false,\n      });\n      return;\n    }\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.getResponse(),\n    });\n  }\n}\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["完成配置之后，我们继续在 ",(0,r.jsx)(n.code,{children:"AppController"})," 中重新伪造一个业务异常的场景："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"+ import { BusinessException } from 'src/common/exceptions/business.exception';\n\n  @Get('findBusinessError')\n  @Version([VERSION_NEUTRAL, '1'])\n  findBusinessError() {\n    const a: any = {}\n    try {\n      console.log(a.b.c)\n    } catch (error) {\n      throw new BusinessException('你这个参数错了')\n    }\n    return this.appService.findAll();\n  }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["访问接口 ",(0,r.jsx)(n.a,{href:"http://localhost:3000/findBusinessError",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/findBusinessError"})," ，可以看到能够返回我们预期的错误了。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"自定义业务异常的优点在于，当你的业务逻辑复杂到一定的地步，在任意的一处出现可预知的错误，此时可以直接抛出异常让用户感知，不需要写很多冗余的返回代码。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["异常拦截、全局返回参数修改以及替换 ",(0,r.jsx)(n.code,{children:"Fastify"})," 框架的代码已上传 ",(0,r.jsx)(n.a,{href:"https://github.com/boty-design/gateway/tree/demo/v2",target:"_blank",rel:"noopener noreferrer",children:"demo/v2"}),"， 需要的同学可以自取。"]}),"\n",(0,r.jsxs)(n.h2,{id:"环境配置",children:["环境配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#环境配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["一般在项目开发中，至少会经历过 ",(0,r.jsx)(n.code,{children:"Dev"})," -> ",(0,r.jsx)(n.code,{children:"Test"})," -> ",(0,r.jsx)(n.code,{children:"Prod"})," 三个环境。如果再富余一点的话，还会再多一个 ",(0,r.jsx)(n.code,{children:"Pre"})," 环境。甚至在不差钱的情况下，每个环境可能都会有",(0,r.jsx)(n.strong,{children:"多套配置"}),"。那么对应的使用的数据库、",(0,r.jsx)(n.code,{children:"Redis"})," 或者其他的配置项都会随着环境的变换而改变，所以在实际项目开发中，多环境的配置非常必要。"]}),"\n",(0,r.jsxs)(n.h4,{id:"自带环境配置",children:["自带环境配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自带环境配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"NestJS"})," 本身也自带了多环境配置方法"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["安装 ",(0,r.jsx)(n.code,{children:"@nestjs/config"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ pnpm add @nestjs/config -w\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["安装完毕之后，在 ",(0,r.jsx)(n.code,{children:"app.module.ts"})," 中添加 ",(0,r.jsx)(n.code,{children:"ConfigModule"})," 模块"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule.forRoot()],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@nestjs/config"})," 默认会从",(0,r.jsx)(n.strong,{children:"项目根目录"}),"载入并解析一个 ",(0,r.jsx)(n.code,{children:".env"})," 文件，从 ",(0,r.jsx)(n.code,{children:".env"})," 文件和 ",(0,r.jsx)(n.code,{children:"process.env"})," 合并环境变量键值对，并将结果存储到一个可以通过 ",(0,r.jsx)(n.code,{children:"ConfigService"})," 访问的私有结构。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"forRoot()"})," 方法注册了 ",(0,r.jsx)(n.code,{children:"ConfigService"})," 提供者，后者提供了一个 ",(0,r.jsx)(n.code,{children:"get()"})," 方法来读取这些",(0,r.jsx)(n.strong,{children:"解析/合并"}),"的配置变量。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["当一个键同时作为环境变量（例如，通过操作系统终端如",(0,r.jsx)(n.code,{children:"export DATABASE_USER=test"}),"导出）存在于运行环境中以及",(0,r.jsx)(n.code,{children:".env"}),"文件中时，以运行环境变量优先。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["默认的 ",(0,r.jsx)(n.code,{children:".env"})," 文件变量定义如下所示，配置后会默认读取此文件:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"DATABASE_USER=test\nDATABASE_PASSWORD=test\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"自定义-yaml",children:["自定义 YAML",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义-yaml",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["虽然 ",(0,r.jsx)(n.code,{children:"Nest"})," 自带了环境配置的功能，使用的 ",(0,r.jsx)(n.a,{href:"https://github.com/motdotla/dotenv",target:"_blank",rel:"noopener noreferrer",children:"dotenv"})," 来作为默认解析，但默认配置项看起来并不是非常清爽，我们接下来使用结构更加清晰的 ",(0,r.jsx)(n.code,{children:"YAML"})," 来覆盖默认配置。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["想要了解 ",(0,r.jsx)(n.code,{children:"YAML"})," 更多细节的同学可以点击",(0,r.jsx)(n.a,{href:"https://baike.baidu.com/item/YAML/1067697",target:"_blank",rel:"noopener noreferrer",children:"链接"}),"看下，如果使用过 ",(0,r.jsx)(n.code,{children:"GitLab CICD"})," 的同学，应该对 ",(0,r.jsx)(n.code,{children:".yml"})," 文件比较熟悉了，这里我就不对 ",(0,r.jsx)(n.code,{children:"YAML"})," 配置文件做过多阐述了。"]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["在使用自定义 ",(0,r.jsx)(n.code,{children:"YAML"})," 配置文件之前，先要修改 ",(0,r.jsx)(n.code,{children:"app.module.ts"})," 中 ",(0,r.jsx)(n.code,{children:"ConfigModule"})," 的配置项 ",(0,r.jsx)(n.code,{children:"ignoreEnvFile"}),"，禁用默认读取 ",(0,r.jsx)(n.code,{children:".env"})," 的规则："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ConfigModule.forRoot({ ignoreEnvFile: true, });\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["然后再安装 ",(0,r.jsx)(n.code,{children:"YAML"})," 的 ",(0,r.jsx)(n.code,{children:"Node"})," 库 ",(0,r.jsx)(n.code,{children:"yaml"}),"："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ pnpm add yaml -w\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["安装完毕之后，在根目录新建 ",(0,r.jsx)(n.code,{children:".config"})," 文件夹，并创建对应环境的 ",(0,r.jsx)(n.code,{children:"yaml"})," 文件，如下图所示："]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:["新建 ",(0,r.jsx)(n.code,{children:"utils/index.ts"})," 文件，添加读取 ",(0,r.jsx)(n.code,{children:"YAML"})," 配置文件的方法："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { parse } from 'yaml';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\n// 获取项目运行环境\nexport const getEnv = () => {\n  return process.env.RUNNING_ENV;\n};\n\n// 读取项目配置\nexport const getConfig = () => {\n  const environment = getEnv();\n  const yamlPath = path.join(process.cwd(), `./.config/.${environment}.yaml`);\n  const file = fs.readFileSync(yamlPath, 'utf8');\n  const config = parse(file);\n  return config;\n};\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsxs)(n.li,{children:["最后添加在 ",(0,r.jsx)(n.code,{children:"app.module.ts"})," 自定义配置项即可正常使用环境变量："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"+ import { getConfig } from './utils';\n    ConfigModule.forRoot({\n      ignoreEnvFile: true,\n+     isGlobal: true,\n+     load: [getConfig]\n    }),\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["注意：",(0,r.jsx)(n.code,{children:"load"})," 方法中传入的 ",(0,r.jsx)(n.code,{children:"getConfig"})," 是一个函数，并不是直接 JSON 格式的配置对象，直接添加变量会报错。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"使用自定义配置",children:["使用自定义配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用自定义配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["完成之前的配置后，就可以使用 ",(0,r.jsx)(n.code,{children:"cross-env"})," 指定运行环境来使用对应环境的配置变量。"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"添加 cross-env 依赖："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"$ pnpm add cross-env -w\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"修改启动命令："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'"start:lowcode": "cross-env RUNNING_ENV=dev nest start --watch",\n"start:devops": "cross-env RUNNING_ENV=dev nest start devops --watch",\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["添加 ",(0,r.jsx)(n.code,{children:".dev.yaml"})," 配置:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"TEST_VALUE:\n  name: cookie\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["注意 ",(0,r.jsx)(n.code,{children:"yaml"})," 配置的规则，缩进以及冒号 ",(0,r.jsx)(n.strong,{children:":"})," 后的空格是经常容易出错的地方"]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:["在 ",(0,r.jsx)(n.code,{children:"AppController"})," 中添加 ",(0,r.jsx)(n.code,{children:"ConfigService"})," 以及新的请求："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"+ import { ConfigService } from '@nestjs/config';\n\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n+    private readonly configService: ConfigService\n  ) { }\n\n+  @Get('getTestName')\n+  getTestName() {\n+    return this.configService.get('TEST_VALUE').name;\n+  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["完成上述所有步骤之后，重启项目，接下来访问 ",(0,r.jsx)(n.a,{href:"http://localhost:3000/getTestName",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/getTestName"})," 能看到已经能够根据环境变量拿到对应的值："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["这里应该注意到，我们并没有注册 ",(0,r.jsx)(n.code,{children:"ConfigModule"}),"。这是因为在 ",(0,r.jsx)(n.code,{children:"app.module"})," 中添加 ",(0,r.jsx)(n.code,{children:"isGlobal"})," 属性，开启 ",(0,r.jsx)(n.code,{children:"Config"})," 全局注册，如果 ",(0,r.jsx)(n.code,{children:"isGlobal"})," 没有添加的话，则需要先在对应的 ",(0,r.jsx)(n.code,{children:"module"})," 文件中注册后才能正常使用 ",(0,r.jsx)(n.code,{children:"ConfigService"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"文档",children:["文档",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文档",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["作为一个后端服务，",(0,r.jsx)(n.strong,{children:"API"})," 文档是必不可少的，除了接口描述、参数描述之外，自测也十分方便。",(0,r.jsx)(n.code,{children:"NestJS"})," 自带了 ",(0,r.jsx)(n.code,{children:"Swagger"})," 文档，集成非常简单，接下来进行文档的配置部分。"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"安装以下依赖："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ pnpm add @nestjs/swagger -w\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["依赖安装完毕之后，先创建 ",(0,r.jsx)(n.code,{children:"src/doc.ts"})," 文件："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\nimport * as packageConfig from '../package.json'\n\nexport const generateDocument = (app) => {\n\n  const options = new DocumentBuilder()\n    .setTitle(packageConfig.name)\n    .setDescription(packageConfig.description)\n    .setVersion(packageConfig.version)\n    .build();\n\n  const document = SwaggerModule.createDocument(app, options);\n\n  SwaggerModule.setup('/api/doc', app, document);\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["为了节约配置项，",(0,r.jsx)(n.code,{children:"Swagger"})," 的配置信息全部取自 ",(0,r.jsx)(n.code,{children:"package.json"}),"，有额外需求的话可以自己维护配置信息的文件。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["默认情况下，在 ",(0,r.jsx)(n.code,{children:"TS"})," 开发的项目中是没办法导入 ",(0,r.jsx)(n.code,{children:".json"})," 后缀的模块，所以可以在 ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," 中新增 ",(0,r.jsx)(n.code,{children:"resolveJsonModule"})," 配置即可。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'{\n  "compilerOptions": {\n    "module": "commonjs",\n    "declaration": true,\n    "removeComments": true,\n    "emitDecoratorMetadata": true,\n    "experimentalDecorators": true,\n    "allowSyntheticDefaultImports": true,\n    "target": "es2017",\n    "sourceMap": true,\n    "outDir": "./dist",\n    "baseUrl": "./",\n    "incremental": true,\n    "skipLibCheck": true,\n    "strictNullChecks": false,\n    "noImplicitAny": false,\n    "strictBindCallApply": false,\n    "forceConsistentCasingInFileNames": false,\n    "noFallthroughCasesInSwitch": false,\n+   "resolveJsonModule": true\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:["在 ",(0,r.jsx)(n.code,{children:"main.ts"})," 中引入方法即可："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"import { VersioningType, VERSION_NEUTRAL } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\nimport { AllExceptionsFilter } from './common/exceptions/base.exception.filter';\nimport { HttpExceptionFilter } from './common/exceptions/http.exception.filter';\nimport { TransformInterceptor } from './common/interceptors/transform.interceptor';\n+ import { generateDocument } from './doc';\n\ndeclare const module: any;\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter(),\n  );\n\n  // 统一响应体格式\n  app.useGlobalInterceptors(new TransformInterceptor());\n\n  // 异常过滤器\n  app.useGlobalFilters(new AllExceptionsFilter(), new HttpExceptionFilter());\n\n  // 接口版本化管理\n  app.enableVersioning({\n    defaultVersion: [VERSION_NEUTRAL, '1', '2'],\n    type: VersioningType.URI,\n  });\n\n+  // 创建文档\n+  generateDocument(app)\n\n  // 添加热更新\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() => app.close());\n  }\n\n  await app.listen(3000);\n}\nbootstrap();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["完成上述内容之后，浏览器打开 ",(0,r.jsx)(n.a,{href:"http://localhost:3000/api/doc",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/api/doc"})," 就能看到 ",(0,r.jsx)(n.code,{children:"Swagger"})," 已经将我们的前面写好的接口信息收集起来了。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["从上图可以看出，",(0,r.jsx)(n.code,{children:"Swagger"})," 会默认收集我们的接口信息，但是没有描述与分类，使用上很不方便，由于使用过程中的细节较多，具体的配置细节可以从",(0,r.jsx)(n.a,{href:"https://docs.nestjs.cn/8/recipes?id=swagger",target:"_blank",rel:"noopener noreferrer",children:"官网文档"}),"获取。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"热重载",children:["热重载",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#热重载",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["!!!! 注意热重载这个请使用 ",(0,r.jsx)(n.strong,{children:"NestJS"})," 直接创建的项目使用，同时会有不少缓存的问题，不建议在 ",(0,r.jsx)(n.strong,{children:"MonoRepo"})," 的项目中使用，这里只做了简单的介绍。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"NestJS"})," 的 ",(0,r.jsx)(n.code,{children:"dev"})," 模式是将 ",(0,r.jsx)(n.code,{children:"TS"})," 代码编译成 ",(0,r.jsx)(n.code,{children:"JS"})," 再启动，这样每次我们修改代码都会重复经历一次编译的过程。在项目开发初期，业务模块体量不大的情况下，性能开销并不会有很大的影响，但是在业务模块增加到一定数量时，每一次更新代码导致的重新编译就会异常痛苦。为了避免这个情况，",(0,r.jsx)(n.code,{children:"NestJS"})," 也提供了热重载的功能，借助 ",(0,r.jsx)(n.code,{children:"Webpack"})," 的 ",(0,r.jsx)(n.code,{children:"HMR"}),"，使得每次更新只需要替换更新的内容，减少编译的时间与过程。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["注意：",(0,r.jsx)(n.code,{children:"Webpack"}),"并不会自动将（例如\xa0",(0,r.jsx)(n.code,{children:"graphql"}),"\xa0文件）复制到\xa0",(0,r.jsx)(n.code,{children:"dist"}),"\xa0文件夹中。同理，",(0,r.jsx)(n.code,{children:"Webpack"}),"\xa0与静态路径（例如 ",(0,r.jsx)(n.code,{children:"TypeOrmModule"})," 中的\xa0",(0,r.jsx)(n.code,{children:"entities"})," 属性）不兼容。所以如果有同学跳过本章，直接配置了 ",(0,r.jsx)(n.code,{children:"TypeOrmModule"})," 中的 ",(0,r.jsx)(n.code,{children:"entities"}),"，反过来再直接配置热重载会导致启动失败。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["由于我们是使用 ",(0,r.jsx)(n.code,{children:"CLI"})," 插件安装的工程模板，可以直接使用 ",(0,r.jsx)(n.code,{children:"HotModuleReplacementPlugin"})," 创建配置，减少工作量。"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"照例安装所需依赖："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ yarn add webpack-node-externals run-script-webpack-plugin webpack\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["根目录新建 ",(0,r.jsx)(n.code,{children:"webpack-hmr.config.js"})," 文件，复制下述代码："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const nodeExternals = require('webpack-node-externals');\nconst { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');\n\nmodule.exports = function (options, webpack) {\n  return {\n    ...options,\n    entry: ['webpack/hot/poll?100', options.entry],\n    externals: [\n      nodeExternals({\n        allowlist: ['webpack/hot/poll?100'],\n      }),\n    ],\n    plugins: [\n      ...options.plugins,\n      new webpack.HotModuleReplacementPlugin(),\n      new webpack.WatchIgnorePlugin({\n        paths: [/.js$/, /.d.ts$/],\n      }),\n      new RunScriptWebpackPlugin({ name: options.output.filename }),\n    ],\n  };\n};\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["修改 ",(0,r.jsx)(n.code,{children:"main.ts"}),"，开启 ",(0,r.jsx)(n.code,{children:"HMR"})," 功能："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"declare const module: any;\n\nasync function bootstrap() {\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() => app.close());\n  }\n}\nbootstrap();\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"修改启动脚本启动命令即可："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'"start:hotdev": "cross-env RUNNING_ENV=dev nest build --webpack --webpackPath webpack-hmr.config.js --watch"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,r.jsx)(n.p,{children:"然后修改一段简单的代码（随意修改即可），测试一下热更新的是否正常生效："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,r.jsxs)(n.p,{children:["如上图所示，我们已经开启了 ",(0,r.jsx)(n.code,{children:"HMR"})," 功能，具体什么时候使用可以根据自己的项目以及喜好开启，如果没有使用 ",(0,r.jsx)(n.code,{children:"CLI"})," 创建的工程模板，但也想开启 ",(0,r.jsx)(n.code,{children:"HMR"})," 功能的话，可以根据",(0,r.jsx)(n.a,{href:"https://docs.nestjs.cn/8/recipes?id=%e6%b2%a1%e6%9c%89%e4%bd%bf%e7%94%a8-cli",target:"_blank",rel:"noopener noreferrer",children:"文档"})," 自行配置。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["热更新的功能看自己的需求再开启，有的时候存在缓存的情况出现，",(0,r.jsx)(n.strong,{children:"另外，在使用热更新的时候，数据库章节中实体类需要手动注册，不能自动注册"}),"，所以如果项目不大的啥情况，使用 ",(0,r.jsx)(n.strong,{children:"NestJS"})," 自带的项目启动脚本即可。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"写在最后",children:["写在最后",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["本章主要介绍了，对 ",(0,r.jsx)(n.code,{children:"CLI"})," 创建的标准工程模板进行一些常规项目必备的功能配置，例如替换底层 ",(0,r.jsx)(n.code,{children:"HTTP"})," 框架、环境变量配置等等内容。"]}),"\n",(0,r.jsxs)(n.p,{children:["添加了上述",(0,r.jsx)(n.strong,{children:"通用性基础配置"}),"后的工程模板能基本满足一个小型的业务需求，如果还有其他要求的话可以增减功能或者修改某些配置来适配，总体还是看",(0,r.jsx)(n.strong,{children:"团队自身的业务需求来定制"}),"，比如团队中有",(0,r.jsx)(n.code,{children:"统一权限控制的插件"}),"或者",(0,r.jsx)(n.code,{children:"构建服务的脚本"}),"都可以放在工程模板中，方便其他同学开箱即用。"]}),"\n",(0,r.jsxs)(n.p,{children:["至此相信我们已经对 ",(0,r.jsx)(n.code,{children:"NestJS"})," 有了初步了解。下一章，我们将学习数据库的相关内容。"]}),"\n",(0,r.jsx)(n.p,{children:"如果你有什么疑问，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}let f=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F14.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%A4%A7%E7%BB%BC%E5%90%88.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"Fastify & Express",id:"fastify--express",depth:2},{text:"版本控制",id:"版本控制",depth:2},{text:"单个请求控制",id:"单个请求控制",depth:4},{text:"全局配置请求控制",id:"全局配置请求控制",depth:4},{text:"全局返回参数",id:"全局返回参数",depth:2},{text:"全局异常拦截",id:"全局异常拦截",depth:2},{text:"环境配置",id:"环境配置",depth:2},{text:"自带环境配置",id:"自带环境配置",depth:4},{text:"自定义 YAML",id:"自定义-yaml",depth:4},{text:"使用自定义配置",id:"使用自定义配置",depth:4},{text:"文档",id:"文档",depth:2},{text:"热重载",id:"热重载",depth:2},{text:"写在最后",id:"写在最后",depth:2}],title:"14.服务端实战：基础大综合",headingTitle:"14.服务端实战：基础大综合",frontmatter:{}}}}]);