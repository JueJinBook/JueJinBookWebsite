"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["59405"],{528056:function(e,n,r){r.r(n),r.d(n,{default:()=>x});var t=r(552676),i=r(740453);let s=r.p+"static/image/f88bfaa3c8732c1a1bfeb95026543645.cb8ca343.gif",o=r.p+"static/image/3357e4cc6738b745e450f85b0ee23ca4.93145da8.gif",a=r.p+"static/image/cccd5c87db93c173fb37854be27404c3.48203397.webp",c=r.p+"static/image/2b3674239ea75bfa98b39d7bead6174c.f8c68196.webp",l=r.p+"static/image/a9d3bbec6654bd1b217d6753c3cc34a5.b6d337bb.gif",d=r.p+"static/image/d685214dae5ea564f38fc01e92d81136.98ab1dcf.webp",p=r.p+"static/image/0c6680a1b0e3067216f73c88c33ac21b.9630389c.gif",h=r.p+"static/image/7ebe6e6785f5e8b8f7443e7d71472096.f4f9cd6e.webp",f=r.p+"static/image/4212cb7308278e4fe5c65a4c454cb8eb.c71b3280.webp",m=r.p+"static/image/69a80fa6566dd2a431a116ccd3d88a21.93145da8.gif";function u(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",pre:"pre",ol:"ol",li:"li",ul:"ul"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"43实战篇-_-react-notes-_-文件上传",children:["43.实战篇 _ React Notes _ 文件上传",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43实战篇-_-react-notes-_-文件上传",children:"#"})]}),"\n",(0,t.jsxs)(n.h2,{id:"前言",children:["前言",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本篇我们来实现文件上传功能。"}),"\n",(0,t.jsxs)(n.p,{children:["为此我们实现这样一个需求：点击添加按钮，上传本地的 ",(0,t.jsx)(n.code,{children:".md"}),"文件，读取文件内容，新建一条笔记。效果如下："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:"ReactNotes-上传文件 3.gif"})}),"\n",(0,t.jsxs)(n.h2,{id:"温故而知新",children:["温故而知新",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#温故而知新",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["我们先回忆下文件上传功能，通常是用 ",(0,t.jsx)(n.code,{children:'<input type="file">'}),"，示例代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<form method="post" enctype="multipart/form-data">\n  <div>\n    <label for="file">选择要上传的文件</label>\n    <input type="file" id="file" name="file" multiple accept="image/*,.pdf" />\n  </div>\n  <div>\n    <button>提交</button>\n  </div>\n</form>\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["其中 ",(0,t.jsx)(n.code,{children:'<input type="file" >'})," 如果有附加属性 ",(0,t.jsx)(n.code,{children:"multiple"}),"，表示允许用户选择多个文件。如果有附加属性 ",(0,t.jsx)(n.code,{children:"accept"}),"表示支持的文件类型，这个例子中表示的是支持图片格式和 pdf 文件。"]}),"\n",(0,t.jsxs)(n.p,{children:["其中 ",(0,t.jsx)(n.code,{children:"<form>"})," 添加了属性 ",(0,t.jsx)(n.code,{children:"enctype"})," 用于指明提交表单的内容类型，可选的值有 3 个："]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"application/x-www-form-urlencoded"}),"：所有字符在发送前都会被编码。空格会转换为“+”符号，特殊字符会转换为 ASCII 十六进制值，适用于普通的表单数据"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"multipart/form-data"}),"：不对字符编码。如果表单中有上传文件，使用这个"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"text/plain"}),"：发送数据时完全不进行任何编码。用的很少"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["因为 ",(0,t.jsx)(n.code,{children:'<input type="file">'})," 默认的样式无法改变，通常会使用 ",(0,t.jsx)(n.code,{children:"label"})," 标签关联，隐藏 input 标签："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'<form method="post" enctype="multipart/form-data">\n  <div>\n    <label for="file">Import .md File</label>\n    <input type="file" id="file" name="file" multiple style={{ position : "absolute", clip: "rect(0 0 0 0)" }} />\n  </div>\n  <div>\n    <button>提交</button>\n  </div>\n</form>\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"第一种方式api-接口",children:["第一种方式：API 接口",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第一种方式api-接口",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["现在让我们开始写吧！简单起见，我们的代码使用 ",(0,t.jsx)(n.code,{children:"day5-2"}),"分支的代码，也就是没有实现国际化之前的项目。"]}),"\n",(0,t.jsx)(n.p,{children:"第一种实现方式是使用 API 接口，在客户端提交文件的时候，调用后端的接口进行处理。"}),"\n",(0,t.jsxs)(n.p,{children:["实现提交文件功能，你需要监听 ",(0,t.jsx)(n.code,{children:'<input type="file">'})," 的 ",(0,t.jsx)(n.code,{children:"onChange"})," 事件或者是 ",(0,t.jsx)(n.code,{children:"<button>"})," 的 ",(0,t.jsx)(n.code,{children:"onClick"})," 事件，又或者是 ",(0,t.jsx)(n.code,{children:"<form>"})," 的 ",(0,t.jsx)(n.code,{children:"onSubmit"})," 事件，无论哪种，反正你需要写成客户端组件。"]}),"\n",(0,t.jsx)(n.p,{children:"上传文件的入口，我们就写在笔记列表的下方："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"components/SidebarImport.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'\'use client\'\n\nimport React, { Suspense } from \'react\'\n\nexport default function SidebarImport() {\n  return (\n    <form method="post" enctype="multipart/form-data">\n      <div style={{ textAlign: "center" }}>\n        <label for="file" style={{ cursor: \'pointer\' }}>Import .md File</label>\n        <input type="file" id="file" name="file" multiple style={{ position : "absolute", clip: "rect(0 0 0 0)" }} />\n      </div>\n    </form>\n  )\n}\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["在 ",(0,t.jsx)(n.code,{children:"components/Sidebar.js"}),"中导入该组件："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// ...\nimport SidebarImport from '@/components/SidebarImport';\n\nexport default function Sidebar() {\n	// ...\n  return (\n    <>\n      <section className=\"col sidebar\">\n      	// ...\n        <nav>\n          <Suspense fallback={<NoteListSkeleton />}>\n            <SidebarNoteList />\n          </Suspense>\n        </nav>\n        <SidebarImport />\n      </section>\n    </>\n  )\n}\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["此时点击 ",(0,t.jsx)(n.code,{children:"Import .md File"})," 已经能够正常调起文件选择框："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"现在让我们来完善效果吧！"}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"components/SidebarImport.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'\'use client\'\n\nimport React, { Suspense } from \'react\'\nimport { useRouter } from \'next/navigation\'\n\nexport default function SidebarImport() {\n  const router = useRouter()\n\n  const onChange = async (e) => {\n    const fileInput = e.target;\n\n    if (!fileInput.files || fileInput.files.length === 0) {\n      console.warn("files list is empty");\n      return;\n    }\n\n    const file = fileInput.files[0];\n\n    const formData = new FormData();\n    formData.append("file", file);\n\n    try {\n      const response = await fetch("/api/upload", {\n        method: "POST",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        console.error("something went wrong");\n        return;\n      }\n\n      const data = await response.json();\n      router.push(`/note/${data.uid}`)\n\n    } catch (error) {\n      console.error("something went wrong");\n    }\n\n    // 重置 file input\n    e.target.type = "text";\n    e.target.type = "file";\n  };\n\n\n  return (\n    <div style={{ textAlign: "center" }}>\n      <label htmlFor="file" style={{ cursor: \'pointer\' }}>Import .md File</label>\n      <input type="file" id="file" name="file" style={{ position : "absolute", clip: "rect(0 0 0 0)" }} onChange={ onChange } accept=".md" />\n    </div>\n  )\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["在这段代码中，我们并没有用到 ",(0,t.jsx)(n.code,{children:"<form>"})," 标签，而是直接直接监听了 ",(0,t.jsx)(n.code,{children:'<input type="file">'})," 的 ",(0,t.jsx)(n.code,{children:"onChange"})," 事件。当触发 onChange 事件的时候，我们构建了一个 ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData",target:"_blank",rel:"noopener noreferrer",children:"FormData"})," 对象，将 ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/File",target:"_blank",rel:"noopener noreferrer",children:"File"})," 对象添加进去。然后调用 ",(0,t.jsx)(n.code,{children:"/api/upload"}),"接口，将 formData 作为请求体传入。当数据成功返回时，跳转到生成的笔记地址。"]}),"\n",(0,t.jsxs)(n.p,{children:["这里的跳转我们用的是 ",(0,t.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-58",target:"_blank",rel:"noopener noreferrer",children:"useRouter"}),"。 ",(0,t.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-44",target:"_blank",rel:"noopener noreferrer",children:"redirect"})," 只能用在服务端组件、路由处理程序、Server Actions。客户端手动跳转使用 ",(0,t.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-58",target:"_blank",rel:"noopener noreferrer",children:"useRouter"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"app/api/upload/route.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { stat, mkdir, writeFile } from 'fs/promises'\nimport { join } from \"path\";\nimport { NextResponse } from 'next/server'\nimport { revalidatePath } from 'next/cache';\nimport mime from \"mime\";\nimport dayjs from 'dayjs';\nimport { addNote } from '@/lib/redis';\n\nexport async function POST(request) {\n\n  // 获取 formData\n  const formData = await request.formData()\n  const file = formData.get('file')\n\n  // 空值判断\n  if (!file) {\n    return NextResponse.json(\n      { error: \"File is required.\" },\n      { status: 400 }\n    );\n  }\n\n  // 写入文件\n  const buffer = Buffer.from(await file.arrayBuffer());\n  const relativeUploadDir = `/uploads/${dayjs().format(\"YY-MM-DD\")}`;\n  const uploadDir = join(process.cwd(), \"public\", relativeUploadDir);\n\n  try {\n    await stat(uploadDir);\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      await mkdir(uploadDir, { recursive: true });\n    } else {\n      console.error(e)\n      return NextResponse.json(\n        { error: \"Something went wrong.\" },\n        { status: 500 }\n      );\n    }\n  }\n\n  try {\n    // 写入文件\n    const uniqueSuffix = `${Math.random().toString(36).slice(-6)}`;\n    const filename = file.name.replace(/\\.[^/.]+$/, \"\")\n    const uniqueFilename = `${filename}-${uniqueSuffix}.${mime.getExtension(file.type)}`;\n    await writeFile(`${uploadDir}/${uniqueFilename}`, buffer);\n\n    // 调用接口，写入数据库\n    const res = await addNote(JSON.stringify({\n      title: filename,\n      content: buffer.toString('utf-8')\n    }))\n\n    // 清除缓存\n    revalidatePath('/', 'layout')\n\n    return NextResponse.json({ fileUrl: `${relativeUploadDir}/${uniqueFilename}`, uid: res });\n  } catch (e) {\n    console.error(e)\n    return NextResponse.json(\n      { error: \"Something went wrong.\" },\n      { status: 500 }\n    );\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["在这段代码中，我们使用了 ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/mime",target:"_blank",rel:"noopener noreferrer",children:"mime"})," 这个库，用于获取 MIME 类型信息。所谓 MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式，也就是我们常见的 ",(0,t.jsx)(n.code,{children:"text/plain"}),"、",(0,t.jsx)(n.code,{children:"image/jpeg"}),"等。在这里我们是用它获取文件扩展名。别忘了安装这个库："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"npm i mime\n"})}),"\n",(0,t.jsxs)(n.p,{children:["我们通过 ",(0,t.jsx)(n.code,{children:"await request.formData()"}),"获取了提交的 ",(0,t.jsx)(n.code,{children:"formData"}),"。获取其中的 ",(0,t.jsx)(n.code,{children:"File"})," 对象后，我们主要做了两件事情，一是将文件写入到 ",(0,t.jsx)(n.code,{children:"public"})," 目录下，二是根据文件信息创建了笔记。最终接口返回文件地址和笔记 id。"]}),"\n",(0,t.jsxs)(n.p,{children:["为了方便写入，我们将其转为 Buffer 形式：",(0,t.jsx)(n.code,{children:"Buffer.from(await file.arrayBuffer())"}),"，并通过 ",(0,t.jsx)(n.code,{children:"writeFile"})," 写入文件。为了防止文件重复，我们根据日期创建文件夹，并生成了随机字符添加到文件名中。"]}),"\n",(0,t.jsxs)(n.p,{children:["然后我们通过 ",(0,t.jsx)(n.code,{children:"buffer.toString('utf-8')"})," 获取了文件内容，调用之前 ",(0,t.jsx)(n.code,{children:"redis.js"})," 导出的 ",(0,t.jsx)(n.code,{children:"addNote"})," 方法添加笔记内容，然后清除数据缓存，返回了文件地址和笔记 ID。"]}),"\n",(0,t.jsx)(n.p,{children:"现在应该可以正常运行了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:"ReactNotes-上传文件 1.gif"})}),"\n",(0,t.jsxs)(n.p,{children:["虽然文件上传成功了，",(0,t.jsx)(n.code,{children:"public"})," 目录下也可以查看到这个文件，笔记也创建了，但是观察左侧的笔记列表，你会发现虽然页面跳转到对应的笔记，但是左侧的笔记列表并没有更新！"]}),"\n",(0,t.jsxs)(n.p,{children:["这是因为虽然我们在接口中使用了 ",(0,t.jsx)(n.code,{children:"revalidatePath"}),"，但是它并不能影响客户端本身的",(0,t.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309077169735958565#heading-18",target:"_blank",rel:"noopener noreferrer",children:"路由缓存"}),"。GitHub 上也有",(0,t.jsx)(n.a,{href:"https://github.com/vercel/next.js/discussions/54075",target:"_blank",rel:"noopener noreferrer",children:"讨论"}),"。还记得怎么清除路由缓存吗？"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["这里并不是在 Server Action 中，所以只能使用第二种方式，所以我们在 ",(0,t.jsx)(n.code,{children:"router.push"}),"后再加一句："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"router.push(`/note/${data.uid}`)\nrouter.refresh()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["当然也可以配合 ",(0,t.jsx)(n.code,{children:"useTransition"}),"使用："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"'use client'\n\nimport { useTransition } from 'react'\n\nexport default function SidebarImport() {\n  const router = useRouter()\n  const [isPending, startTransition] = useTransition();\n\n  const onChange = async (e) => {\n      // ...\n      startTransition(() => router.push(`/note/${data.uid}`));\n      startTransition(() => router.refresh());\n    	// ...\n  };\n\n  return (\n    	// ...\n  )\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"现在就左侧的列表就可以正常更新了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:"ReactNotes-上传文件 2.gif"})}),"\n",(0,t.jsxs)(n.p,{children:["查看 ",(0,t.jsx)(n.code,{children:"/api/upload"})," 接口的返回："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["因为我们将文件放在了 ",(0,t.jsx)(n.code,{children:"public"}),"下，所以直接访问 ",(0,t.jsx)(n.code,{children:"http://localhost:3000/uploads/24-01-03/occaecati-4s2adp.md"}),"即可查看文件内容："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"在这个例子中，我们并没有用到这个 URL，如果在实际的开发中，你可以用这个 URL 展示缩略图等。"}),"\n",(0,t.jsxs)(n.h2,{id:"第二种方式server-actions",children:["第二种方式：Server Actions",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第二种方式server-actions",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["接下来我们用 Server Actions 重新实现这个需求，关于文件上传，官方也提供了",(0,t.jsx)(n.a,{href:"https://github.com/vercel/next.js/tree/canary/examples/server-actions-upload",target:"_blank",rel:"noopener noreferrer",children:"示例代码 server-actions-upload"})," 可供参考。"]}),"\n",(0,t.jsxs)(n.p,{children:["一般使用 Server Actions 会用在 ",(0,t.jsx)(n.code,{children:"<form>"})," 标签的 ",(0,t.jsx)(n.code,{children:"action"})," 属性上，但这次我们是监听 ",(0,t.jsx)(n.code,{children:'<input type="file">'})," 的 ",(0,t.jsx)(n.code,{children:"onChange"})," 事件，所以我们就直接在 ",(0,t.jsx)(n.code,{children:"onChange"})," 事件中调用 Server Actions，对应要使用客户端组件。"]}),"\n",(0,t.jsxs)(n.p,{children:["在 ",(0,t.jsx)(n.code,{children:"components/Sidebar.js"}),"中导入 ",(0,t.jsx)(n.code,{children:"<SidebarImport>"})," 组件："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// ...\nimport SidebarImport from '@/components/SidebarImport';\n\nexport default function Sidebar() {\n	// ...\n  return (\n    <>\n      <section className=\"col sidebar\">\n      	// ...\n        <nav>\n          <Suspense fallback={<NoteListSkeleton />}>\n            <SidebarNoteList />\n          </Suspense>\n        </nav>\n        <SidebarImport />\n      </section>\n    </>\n  )\n}\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["新建 ",(0,t.jsx)(n.code,{children:"components/SidebarImport.js"}),"，代码如下："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'\'use client\'\n\nimport React from \'react\'\nimport { useRouter } from \'next/navigation\'\nimport { importNote } from \'@/actions\'\n\nexport default function SidebarImport() {\n  const router = useRouter()\n\n  const onChange = async (e) => {\n    const fileInput = e.target;\n\n    if (!fileInput.files || fileInput.files.length === 0) {\n      console.warn("files list is empty");\n      return;\n    }\n\n    const file = fileInput.files[0];\n\n    const formData = new FormData();\n    formData.append("file", file);\n\n    try {\n      const data = await importNote(formData);\n      router.push(`/note/${data.uid}`)\n\n    } catch (error) {\n      console.error("something went wrong");\n    }\n\n    // 重置 file input\n    e.target.type = "text";\n    e.target.type = "file";\n  };\n\n\n  return (\n    <div style={{ textAlign: "center" }}>\n      <label htmlFor="file" style={{ cursor: \'pointer\' }}>Import .md File</label>\n      <input type="file" id="file" name="file" style={{ position : "absolute", clip: "rect(0 0 0 0)" }} onChange={ onChange } accept=".md" />\n    </div>\n  )\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["为方便导入，更新 ",(0,t.jsx)(n.code,{children:"jsconfig.json"}),"："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "@/actions": ["app/actions.js"],\n      "@/*": ["/*"]\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["在 ",(0,t.jsx)(n.code,{children:"app/actions.js"}),"添加 ",(0,t.jsx)(n.code,{children:"importNote"}),"方法："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'\'use server\'\n\n// ...\nimport { stat, mkdir, writeFile } from \'fs/promises\'\nimport { join } from "path";\nimport mime from "mime";\nimport dayjs from \'dayjs\';\n\n// ...\nexport async function importNote(formData) {\n  const file = formData.get(\'file\')\n\n  // 空值判断\n  if (!file) {\n    return { error: "File is required." };\n  }\n\n  // 写入文件\n  const buffer = Buffer.from(await file.arrayBuffer());\n  const relativeUploadDir = `/uploads/${dayjs().format("YY-MM-DD")}`;\n  const uploadDir = join(process.cwd(), "public", relativeUploadDir);\n\n  try {\n    await stat(uploadDir);\n  } catch (e) {\n    if (e.code === "ENOENT") {\n      await mkdir(uploadDir, { recursive: true });\n    } else {\n      console.error(e)\n      return { error: "Something went wrong." }\n    }\n  }\n\n  try {\n    // 写入文件\n    const uniqueSuffix = `${Math.random().toString(36).slice(-6)}`;\n    const filename = file.name.replace(/\\.[^/.]+$/, "")\n    const uniqueFilename = `${filename}-${uniqueSuffix}.${mime.getExtension(file.type)}`;\n    await writeFile(`${uploadDir}/${uniqueFilename}`, buffer);\n\n    // 调用接口，写入数据库\n    const res = await addNote(JSON.stringify({\n      title: filename,\n      content: buffer.toString(\'utf-8\')\n    }))\n\n    // 清除缓存\n    revalidatePath(\'/\', \'layout\')\n\n    return { fileUrl: `${relativeUploadDir}/${uniqueFilename}`, uid: res }\n  } catch (e) {\n    console.error(e)\n    return { error: "Something went wrong." }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"此时页面跟第一种方式一样正常运行："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:"ReactNotes-上传文件 3.gif"})}),"\n",(0,t.jsxs)(n.p,{children:["因为在  Server Actions 中调用 revalidatePath 会清除路由缓存，所以我们也不需要再调用 ",(0,t.jsx)(n.code,{children:"router.refresh()"}),"。"]}),"\n",(0,t.jsx)(n.p,{children:"在这个例子中，我们是在 onChange 事件中调用的 Server Action，使用这种方式对应会丢失渐进式增强，也就是说如果禁用 JS，就无法正常提交了。"}),"\n",(0,t.jsx)(n.p,{children:"如果有提交按钮，写法上会略有改变，我们试着写一下："}),"\n",(0,t.jsxs)(n.p,{children:["修改 ",(0,t.jsx)(n.code,{children:"components/SidebarImport.js"}),"："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"'use client'\n\nimport { useRef } from 'react'\nimport { useFormStatus } from 'react-dom'\nimport { useRouter } from 'next/navigation'\nimport { importNote } from '@/actions'\n\nfunction Submit() {\n  const { pending } = useFormStatus()\n  return <button disabled={pending}>{pending ? 'Submitting' : 'Submit'}</button>\n}\n\nexport default function SidebarImport() {\n  const router = useRouter()\n  const formRef = useRef(null)\n\n  async function upload(formData) {\n\n    const file = formData.get('file');\n    if (!file) {\n      console.warn(\"files list is empty\");\n      return;\n    }\n\n    try {\n      const data = await importNote(formData);\n      router.push(`/note/${data.uid}`)\n\n    } catch (error) {\n      console.error(\"something went wrong\");\n    }\n\n    // 重置 file input\n    formRef.current?.reset()\n  };\n\n\n  return (\n    <form style={{ textAlign: \"center\" }} action={upload} ref={formRef}>\n      <label htmlFor=\"file\" style={{ cursor: 'pointer' }}>Import .md File</label>\n      <input type=\"file\" id=\"file\" name=\"file\" accept=\".md\" />\n      <div><Submit /></div>\n    </form>\n  )\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"actions.js"}),"中的代码不用改，效果如下："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:s,alt:"ReactNotes-上传文件 4.gif"})}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"那么今天的内容就结束了，本篇主要是围绕上传文件功能，帮助大家熟悉如何处理表单中的文件数据以及如何写接口（route.js）和 Server Actions（actions.js）。在实际的开发中，上传文件往往会更复杂，比如缩略图、文件队列、进度条、大文件上传等，但也脱离不了这两种最基本的开发方式。"}),"\n",(0,t.jsxs)(n.p,{children:["本篇的代码我已经上传到",(0,t.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/main",target:"_blank",rel:"noopener noreferrer",children:"代码仓库"}),"的 Day 7 分支："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["第一种方式 在 ",(0,t.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/day7",target:"_blank",rel:"noopener noreferrer",children:"day7"})," 分支"]}),"\n",(0,t.jsxs)(n.li,{children:["第二种方式 在 ",(0,t.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/day7-1",target:"_blank",rel:"noopener noreferrer",children:"day7-1"})," 分支"]}),"\n",(0,t.jsxs)(n.li,{children:["第二种方式带提交按钮 在 ",(0,t.jsx)(n.a,{href:"https://github.com/mqyqingfeng/next-react-notes-demo/tree/day7-2",target:"_blank",rel:"noopener noreferrer",children:"day7-2"})," 分支"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"直接使用的时候不要忘记在本地开启 Redis。"}),"\n",(0,t.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input/file#accept",target:"_blank",rel:"noopener noreferrer",children:"<input type=“file”> - HTML（超文本标记语言） | MDN"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype",target:"_blank",rel:"noopener noreferrer",children:"HTMLFormElement: enctype property - Web APIs | MDN"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/File",target:"_blank",rel:"noopener noreferrer",children:"https://developer.mozilla.org/zh-CN/docs/Web/API/File"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://codersteps.com/articles/building-a-file-uploader-from-scratch-with-next-js-app-directory",target:"_blank",rel:"noopener noreferrer",children:"Building a File Uploader from scratch with Next.js app directory"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://ethanmick.com/how-to-upload-a-file-in-next-js-13-app-directory/",target:"_blank",rel:"noopener noreferrer",children:"How to upload a file in Next.js 13+ App Directory with No libraries"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://stackoverflow.com/questions/76395110/next-js-v13-revalidate-not-triggering-after-router-push",target:"_blank",rel:"noopener noreferrer",children:"Next.js V13: revalidate not triggering after router.push"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/vercel/next.js/discussions/54075",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/vercel/next.js/discussions/54075"})}),"\n"]})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}let x=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F43.%E5%AE%9E%E6%88%98%E7%AF%87%20_%20React%20Notes%20_%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"温故而知新",id:"温故而知新",depth:2},{text:"第一种方式：API 接口",id:"第一种方式api-接口",depth:2},{text:"第二种方式：Server Actions",id:"第二种方式server-actions",depth:2},{text:"总结",id:"总结",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"43.实战篇 _ React Notes _ 文件上传",headingTitle:"43.实战篇 _ React Notes _ 文件上传",frontmatter:{}}}}]);