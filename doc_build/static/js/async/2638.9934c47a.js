"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["2638"],{167088:function(e,n,r){r.r(n),r.d(n,{default:()=>i});var a=r(552676),s=r(740453);let l=r.p+"static/image/26e2ac7335f7bbd0cf3745426ae91165.45bba369.webp";function c(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",strong:"strong",blockquote:"blockquote",code:"code",pre:"pre",ol:"ol",li:"li",img:"img"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"28路由篇-_-国际化",children:["28.路由篇 _ 国际化",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#28路由篇-_-国际化",children:"#"})]}),"\n",(0,a.jsxs)(n.h2,{id:"前言",children:["前言",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"前面我们都在讲 App Router 带来的强大功能，但也不总是会更加便捷，就比如国际化的处理相比以前 Pages Router 反而复杂了一点，需要借助上节讲到的中间件进行来实现。"}),"\n",(0,a.jsx)(n.p,{children:"本篇我们会介绍 Next.js 的国际化实现方式，并为大家普及国际化的基础术语和概念，考虑到并不是所有的同学都有国际化需求，本篇内容可以选择性学习。"}),"\n",(0,a.jsxs)(n.h2,{id:"1-相关术语",children:["1. 相关术语",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-相关术语",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"11-国际化与本地化",children:["1.1. 国际化与本地化",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-国际化与本地化",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["Internationalization，简写 ",(0,a.jsx)(n.strong,{children:"i18n"}),"（首末字符 i 和 n，18 为中间的字符数），中文译为“国际化”。引用百度百科的解释："]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"在资讯领域，国际化(i18n)指让产品（出版物，软件，硬件等）无需做大的改变就能够适应不同的语言和地区的需要。对程序来说，在不修改内部代码的情况下，能根据不同语言及地区显示相应的界面。"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["与 Internationalization 相关的一个单词叫做 localization，简写 ",(0,a.jsx)(n.strong,{children:"L10n"}),"，中文译为“本地化”。"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"在信息技术领域，国际化与本地化是指修改软件使之能适应目标市场的语言、地区差异以及技术需要。"}),"\n",(0,a.jsx)(n.p,{children:"国际化是指在设计软件，将软件与特定语言及地区脱钩的过程。当软件被移植到不同的语言及地区时，软件本身不用做内部工程上的改变或修正。本地化则是指当移植软件时，加上与特定区域设置有关的信息和翻译文件的过程。"}),"\n",(0,a.jsx)(n.p,{children:"国际化和本地化之间的区别虽然微妙，但却很重要。国际化意味着产品有适用于任何地方的“潜力”；本地化则是为了更适合于“特定”地方的使用，而另外增添的特色。用一项产品来说，国际化只需做一次，但本地化则要针对不同的区域各做一次。这两者之间是互补的，并且两者合起来才能让一个系统适用于各地"}),"\n",(0,a.jsx)(n.p,{children:"简而言之，“国际化”是“本地化”的一部分，主要是指国际化的实现机制和翻译工作， “本地化”包含“国际化”，是对“国际化”的补充和完善，它还包括为实现对某种特定语言良好的支持而进行的有针对性的翻译调整以及对软件进行的打补丁工作。"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["这样说有些抽象，举个具体的例子，当访问 ",(0,a.jsx)(n.code,{children:"/dashboard"}),"的时候，默认显示中文，当访问 ",(0,a.jsx)(n.code,{children:"/en/dashboard"})," 的时候，显示英文，当访问 ",(0,a.jsx)(n.code,{children:"/fr/dashboard"}),"的时候，显示法语，这套逻辑的实现属于国际化。"]}),"\n",(0,a.jsx)(n.p,{children:"比如要进军阿拉伯市场，但阿拉伯语是从右到左（RTL）的语言，这就可能需要你重新设计界面，这就属于本地化。调整时间日期格式、货币、文化图片、符合、手势等等也都属于本地化。"}),"\n",(0,a.jsxs)(n.h3,{id:"12-locale",children:["1.2. locale",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-locale",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"讲解完国际化和本地化，我们再说一个术语 —— locale。你可以把它理解为软件运行时的语言环境，它是一组语言和格式首选项的标识符。locale 的命名规则为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markdown",children:"language[_territory[.codeset]][@modifier]\n"})}),"\n",(0,a.jsx)(n.p,{children:"翻译成中文："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markdown",children:" [语言[_地域][.字符集] [@修正值]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["其中 language 是 ",(0,a.jsx)(n.a,{href:"https://zh.wikipedia.org/zh-hans/ISO_639-1",target:"_blank",rel:"noopener noreferrer",children:"ISO 639-1 标准"}),"中定义的双字母的语言代码，territory 是 ",(0,a.jsx)(n.a,{href:"https://zh.wikipedia.org/wiki/ISO_3166-1",target:"_blank",rel:"noopener noreferrer",children:"ISO 3166-1 标准"}),"中定义的双字母的国家和地区代码，codeset 是字符集的名称 (如 UTF-8等)，而 modifier 则是某些 locale 变体的修正符。"]}),"\n",(0,a.jsxs)(n.p,{children:["以汉语为例，",(0,a.jsx)(n.code,{children:"zh_CN.GB2312"}),"就表示中国地区的汉语，字符集采用 GB2312。"]}),"\n",(0,a.jsx)(n.p,{children:"冷知识："}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"英语用 en 表示，取自于 English，德语用 de 表示，取自于 Deutsch，这是“德语”的德语，汉语用 zh 表示，取自于“中文”的汉语拼音：Zhōngw\xe9n，但也不总是如此，比如日语用 ja 表示，尽管日语拼音是 Nihongo。"}),"\n",(0,a.jsx)(n.li,{children:"除了 zh_CN 还有 zh-HK（中国香港）、zh-SG（新加坡）、zh-TW（中国台湾）。"}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"2-实现方式",children:["2. 实现方式",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-实现方式",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Next.js 可以让你通过配置路由和渲染内容支持多种语言，让我们看看怎么实现吧。"}),"\n",(0,a.jsxs)(n.h3,{id:"21-判断区域设置",children:["2.1. 判断区域设置",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-判断区域设置",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["首先 Next.js 推荐使用浏览器中的语言首选项来判断要使用的区域设置，为此你需要分析传入的请求，确定要使用的区域设置。我们知道，请求头中是有 ",(0,a.jsx)(n.code,{children:"Accept-Language"}),"这个标头的，我们就可以根据这个字段的值来确定。"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:"截屏2023-11-22 下午9.06.57.png"})}),"\n",(0,a.jsx)(n.p,{children:"为了方便分析，我们可以借助一些库来实现，比如："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// middleware.js\nimport { match } from '@formatjs/intl-localematcher'\nimport Negotiator from 'negotiator'\n \nlet headers = { 'accept-language': 'en-US,en;q=0.5' }\nlet languages = new Negotiator({ headers }).languages()\nlet locales = ['en-US', 'nl-NL', 'nl']\nlet defaultLocale = 'en-US'\n \nmatch(languages, locales, defaultLocale) // -> 'en-US'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["首先是 ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/negotiator",target:"_blank",rel:"noopener noreferrer",children:"negotiator"})," 这个库，将请求作为参数传给 Negotiator 构造函数，就可以通过 ",(0,a.jsx)(n.code,{children:"new Negotiator(request).languages()"})," 快速获取支持的语言，比如请求的 accept-language 为 ",(0,a.jsx)(n.code,{children:"'en;q=0.8, es, pt'"}),"， ",(0,a.jsx)(n.code,{children:"new Negotiator(request).languages()"}),"  的值为 ",(0,a.jsx)(n.code,{children:"['es', 'pt', 'en']"}),"。"]}),"\n",(0,a.jsxs)(n.p,{children:["其次是 ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/@formatjs/intl-localematcher",target:"_blank",rel:"noopener noreferrer",children:"@formatjs/intl-localematcher"})," 这个库，它的 match 函数，顾名思义，帮助匹配出最适合的语言，比如："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// middleware.js\n// match(languages, locales, defaultLocale)\n\n// 结果为 'fr'，因为 locales 里只有 fr 和 en\nmatch(['fr-XX', 'en'], ['fr', 'en'], 'en')\n\n// 结果为 'en'，因为 locales 里没有 zh，所以使用了 defaultLocale\nmatch(['zh'], ['fr', 'en'], 'en')\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"22-中间件处理",children:["2.2. 中间件处理",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-中间件处理",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["找到了合适的 locale，现在我们就可以根据 locale 来实现子路径（",(0,a.jsx)(n.code,{children:"/fr/products"}),"）或者域（",(0,a.jsx)(n.code,{children:"my-site.fr/products"}),"）国际化，也就是根据用户的浏览器语言设置对应跳转到如 ",(0,a.jsx)(n.code,{children:"/fr/products"}),"这样的国际化路由地址。示例代码如下："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// middleware.js\nimport { match } from '@formatjs/intl-localematcher'\nimport Negotiator from 'negotiator'\n\nlet locales = ['en-US', 'nl-NL', 'nl']\nconst defaultLocale = 'en-US'\n\nfunction getLocale(request) { \n  const headers = { 'accept-language': request.headers.get('accept-language') || '' };\n  // 这里不能直接传入 request，有更简单的写法欢迎评论留言\n  const languages = new Negotiator({ headers }).languages();\n\n  return match(languages, locales, defaultLocale)\n }\n \nexport function middleware(request) {\n  const { pathname } = request.nextUrl\n  // 判断请求路径中是否已存在语言，已存在语言则跳过\n  const pathnameHasLocale = locales.some(\n    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`\n  )\n \n  if (pathnameHasLocale) return\n \n  // 获取匹配的 locale\n  const locale = getLocale(request)\n  request.nextUrl.pathname = `/${locale}${pathname}`\n  // 重定向，如 /products 重定向到 /en-US/products\n  return Response.redirect(request.nextUrl)\n}\n \nexport const config = {\n  matcher: [\n    // 跳过所有内部路径 (_next)\n    '/((?!_next).*)',\n    // 可选: 仅在根 URL (/) 运行\n    // '/'\n  ],\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["最后，因为添加上述代码后比如访问 ",(0,a.jsx)(n.code,{children:"/dashboard"}),"，会跳转到 ",(0,a.jsx)(n.code,{children:"/en-US/dashboard"}),"，而此时并没有对应的处理程序，所以还要将 ",(0,a.jsx)(n.code,{children:"app/"}),"下所有的特殊文件都放在 ",(0,a.jsx)(n.code,{children:"app/[lang]"}),"下。因为借助了动态路由，lang 参数会被转发给每个布局和页面，你可以在布局或页面中获取到 lang 参数："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/[lang]/page.js\nexport default async function Page({ params: { lang } }) {\n  return ...\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["根布局也可以放在新文件中，如 ",(0,a.jsx)(n.code,{children:"app/[lang]/layout.js"}),"。"]}),"\n",(0,a.jsxs)(n.h3,{id:"23-本地化",children:["2.3. 本地化",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-本地化",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"现在我们来解决翻译的问题，本质是根据用户的区域设置来改变显示的内容，但解决的模式并不算是 Next.js 中的特殊内容，任何 Web 应用程序都可以这样解决。"}),"\n",(0,a.jsx)(n.p,{children:"假设我们希望应用能够同时支持英语和荷兰语，我们可以维护两个不同的字典，字典会提供从某个键到本地化字符串的映射，例如："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// dictionaries/en.json\n{\n  "products": {\n    "cart": "Add to Cart"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// dictionaries/nl.json\n{\n  "products": {\n    "cart": "Toevoegen aan Winkelwagen"\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["然后我们可以创建一个 ",(0,a.jsx)(n.code,{children:"getDictionary"})," 函数加载对应语言的字典："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import 'server-only'\n \nconst dictionaries = {\n  en: () => import('./dictionaries/en.json').then((module) => module.default),\n  nl: () => import('./dictionaries/nl.json').then((module) => module.default),\n}\n \nexport const getDictionary = async (locale) => dictionaries[locale]()\n"})}),"\n",(0,a.jsx)(n.p,{children:"最后根据当前选择的语言，在布局或者页面中获取字典，展示对应的翻译文字："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/[lang]/page.js\nimport { getDictionary } from './dictionaries'\n \nexport default async function Page({ params: { lang } }) {\n  const dict = await getDictionary(lang) // en\n  return <button>{dict.products.cart}</button> // Add to Cart\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["由于 ",(0,a.jsx)(n.code,{children:"app/"})," 目录下的所有布局和页面默认都是服务端组件，所以不用担心翻译文件的大小会影响客户端 JavaScript bundle 的大小，这段代码只会在服务端上运行，并且只有生成的 HTML 会发送到浏览器。"]}),"\n",(0,a.jsxs)(n.h3,{id:"24-静态生成",children:["2.4. 静态生成",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24-静态生成",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["如果要为一组区域设置生成静态路由，我们可以在布局或页面中使用 ",(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079586296791050#heading-1",target:"_blank",rel:"noopener noreferrer",children:"generateStaticParams"}),"。可以在全局中使用，比如这个例子就是在根布局中："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/[lang]/layout.js\nexport async function generateStaticParams() {\n  return [{ lang: 'en-US' }, { lang: 'de' }]\n}\n \nexport default function Root({ children, params }) {\n  return (\n    <html lang={params.lang}>\n      <body>{children}</body>\n    </html>\n  )\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"小结",children:["小结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"恭喜你，完成了本节内容的学习！"}),"\n",(0,a.jsx)(n.p,{children:"这一节我们介绍了国际化相关的术语概念，然后讲解了 Next.js 中的国际化实现方式。首先 Next.js 推荐使用浏览器中的语言首选项来判断要使用的区域设置，为此你需要分析传入的请求，确定要使用的区域设置。"}),"\n",(0,a.jsxs)(n.p,{children:["然后借助中间件实现路由的重定向，将 ",(0,a.jsx)(n.code,{children:"/dashboard"})," 重定向到如 ",(0,a.jsx)(n.code,{children:"/en-US/dashboard"}),"这样的地址，此外还需要借助字典模式实现语言的本地化工作。"]}),"\n",(0,a.jsx)(n.p,{children:"但是要注意："}),"\n",(0,a.jsx)(n.p,{children:"本篇只是讲解实现国际化的基本原理，在实际项目开发中，并不会如此从零实现，实战项目中使用请参考："}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309112133474582578",target:"_blank",rel:"noopener noreferrer",children:"《实战篇 | React Notes | 国际化》"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309115955198558217",target:"_blank",rel:"noopener noreferrer",children:"《实战篇 | 移动端 Web | Crowdin 与本地化》"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://baike.baidu.com/item/I18N/6771940",target:"_blank",rel:"noopener noreferrer",children:"I18N"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9F%9F%E8%AE%BE%E7%BD%AE",target:"_blank",rel:"noopener noreferrer",children:"wiki/区域设置"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/routing/internationalization",target:"_blank",rel:"noopener noreferrer",children:"Routing: Internationalization | Next.js"})}),"\n"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}let i=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F28.%E8%B7%AF%E7%94%B1%E7%AF%87%20_%20%E5%9B%BD%E9%99%85%E5%8C%96.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. 相关术语",id:"1-相关术语",depth:2},{text:"1.1. 国际化与本地化",id:"11-国际化与本地化",depth:3},{text:"1.2. locale",id:"12-locale",depth:3},{text:"2. 实现方式",id:"2-实现方式",depth:2},{text:"2.1. 判断区域设置",id:"21-判断区域设置",depth:3},{text:"2.2. 中间件处理",id:"22-中间件处理",depth:3},{text:"2.3. 本地化",id:"23-本地化",depth:3},{text:"2.4. 静态生成",id:"24-静态生成",depth:3},{text:"小结",id:"小结",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"28.路由篇 _ 国际化",headingTitle:"28.路由篇 _ 国际化",frontmatter:{}}}}]);