"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79740"],{184966:function(n,e,r){n.exports=r.p+"static/image/eec21518e88a76c1b65168e887668dc6.ca166626.gif"},634829:function(n,e,r){n.exports=r.p+"static/image/fa66424807fc75a6adea9d3ac8f17d74.4f821940.gif"},546737:function(n,e,r){r.r(e),r.d(e,{default:()=>_});var s=r(552676),t=r(740453),i=r(184966),a=r(634829);let c=r.p+"static/image/e5249fc4747fc41b47b26423830ec128.90730758.gif",d=r.p+"static/image/ba6401b805ed5aa275b16dad845da0ca.7a2184bf.webp",o=r.p+"static/image/0967b532db19d50a85b95910e2a835e9.57f387ea.webp",l=r.p+"static/image/d23929de1567774052699ac4baca686d.c6d28d15.webp",m=r.p+"static/image/7a86bbd2315f7c5d89d34b2f7620a4e7.fed992d3.gif",p=r.p+"static/image/2bdb6cc0916a8d3f6744a165135827db.f85a3f38.webp",u=r.p+"static/image/25865c1a93e811e1da8c428acc1a748e.7b5eb16b.gif",f=r.p+"static/image/d0a6715a962340153e1f70fcf52cb88b.66107eb8.webp",h=r.p+"static/image/7147446ddc37bf6f683a6e752b12a2da.0a94a7ce.webp",x=r.p+"static/image/231263b629a4980523c0bbb5a76ff7ac.1122bf4d.webp",g=r.p+"static/image/269573474fe137c840bcb4e72cbea548.27cabe29.gif",j=r.p+"static/image/7fa50c116846c1da14a43dd9bdbd9106.b9609af5.webp",b=r.p+"static/image/0ed2d6a32447b8c6f2c12fca84aa54f7.94ac39e2.webp",F=r.p+"static/image/dc7b168c2390d2ef23191957749a5108.fac84020.gif",y=r.p+"static/image/75e9d0df8df5ae3be77189aff7860b79.1b8efb99.webp",v=r.p+"static/image/527b11e303c9d58ae8d9216a3ec4d43e.ea3c9048.gif",w=r.p+"static/image/7fbdc9efb0f8d215189f51eda07d95c6.b0b960dc.webp",M=r.p+"static/image/fb8b2f43f9d3e4b16821034b91822347.c06e884c.webp",q=r.p+"static/image/859029ceaca68b17d0e5ccc02d9a7825.f57dd431.webp",A=r.p+"static/image/9257fb23547c4adedb7e0f982e21ffcf.d2fbe8d7.webp",R=r.p+"static/image/4e4e9025bf569af1398d0eb893c12958.c8f5644b.gif",k=r.p+"static/image/c157d01dcd4c5576edec3cb94cfd4ca0.bc15fdff.webp",I=r.p+"static/image/bd5af4de5855d1197433234a91e1f9da.ec87f74c.webp",E=r.p+"static/image/96c868074411a55e8abb31c2f3b73070.9fa1ee3b.gif",N=r.p+"static/image/9ceac7b57d56f39e2bb4cef48b319b65.0aa61b7d.webp",T=r.p+"static/image/a32128d28d58615a87ce0cf1e8edd9fb.4cbd3aa7.webp",U=r.p+"static/image/125fbd9c0f377bd4c06b55dc6066f488.666ba21a.webp";function C(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,t.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"186-聊天室添加好友弹窗通知页面",children:["186. 聊天室：添加好友弹窗、通知页面",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#186-聊天室添加好友弹窗通知页面",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"上节实现了好友、群聊的列表，这节来实现添加好友功能"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"添加 src/pages/Friendship/AddFriendModal.tsx"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import { Button, Form, Input, InputNumber, Modal, message } from "antd";\nimport { useForm } from "antd/es/form/Form";\nimport TextArea from "antd/es/input/TextArea";\nimport { useState } from "react";\n\ninterface AddFriendModalProps {\n    isOpen: boolean;\n    handleClose: Function\n}\n\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\n\nexport interface AddFriend {\n    username: string;\n    reason: string;\n}\n\nexport function AddFriendModal(props: AddFriendModalProps) {\n\n    const [form] = useForm<AddFriend>();\n\n    const handleOk = async function() {\n\n    }\n\n    return <Modal \n        title="添加好友"\n        open={props.isOpen}\n        onOk={handleOk}\n        onCancel={() => props.handleClose()}\n        okText={\'发送好友请求\'}\n        cancelText={\'取消\'}    \n    >\n        <Form\n            form={form}\n            colon={false}\n            {...layout}\n        >\n            <Form.Item\n                label="用户名"\n                name="username"\n                rules={[\n                    { required: true, message: \'请输入用户名!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="添加理由"\n                name="reason"\n                rules={[\n                    { required: true, message: \'请输入添加理由!\' },\n                ]}\n            >\n                <TextArea />\n            </Form.Item>\n        </Form>\n    </Modal>\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"然后在 Friednship/index.tsx 里引入下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"添加一个 state 控制弹窗显示隐藏，然后加一个按钮，点击的时候设置 state 为 true，关闭弹窗的时候设置 state 为 false"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const [isAddFriendModalOpen, setAddFriendModalOpen] = useState(false);\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'<Form.Item label=" ">\n    <Button type="primary" style={{background: \'green\'}} onClick={() => setAddFriendModalOpen(true)}>\n        添加好友\n    </Button>\n</Form.Item>\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"<AddFriendModal isOpen={isAddFriendModalOpen} handleClose={() => {\n    setAddFriendModalOpen(false)\n}}/>\n"})}),"\n",(0,s.jsx)(e.p,{children:"测试下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后调用下添加好友的接口。"}),"\n",(0,s.jsx)(e.p,{children:"之前是通过 id 来添加的好友："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"现在要改一下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import { IsNotEmpty } from "class-validator";\n\nexport class FriendAddDto {\n\n    @IsNotEmpty({\n        message: "添加好友的 username 不能为空"\n    })\n    username: string;\n\n    reason: string;    \n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"然后改下 service 的实现："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"async add(friendAddDto: FriendAddDto, userId: number) {\n    const friend = await this.prismaService.user.findUnique({\n        where: {\n            username: friendAddDto.username\n        }\n    });\n\n    if(!friend) {\n        throw new BadRequestException('要添加的 username 不存在');\n    }\n\n    if(friend.id === userId) {\n        throw new BadRequestException('不能添加自己为好友');\n    }\n\n    const found = await this.prismaService.friendship.findMany({\n        where: {\n            userId,\n            friendId: friend.id\n        }\n    })\n\n    if(found.length) {\n        throw new BadRequestException('该好友已经添加过');\n    }\n\n    return await this.prismaService.friendRequest.create({\n        data: {\n            fromUserId: userId,\n            toUserId: friend.id,\n            reason: friendAddDto.reason,\n            status: 0\n        }\n    })\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"先根据 username 查询 user，如果不存在就返回错误，提示 username 不存在。"}),"\n",(0,s.jsx)(e.p,{children:"如果添加的是自己，返回错误，提示不能添加自己为好友。"}),"\n",(0,s.jsx)(e.p,{children:"如果已经添加过，返回错误，提示已经添加。"}),"\n",(0,s.jsx)(e.p,{children:"否则，创建好友申请。"}),"\n",(0,s.jsx)(e.p,{children:"在页面调用下："}),"\n",(0,s.jsx)(e.p,{children:"interfaces 加一下这个接口"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"export async function friendAdd(data: AddFriend) {\n    return axiosInstance.post('/friendship/add', data);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"组件里调用下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const handleOk = async function() {\n    await form.validateFields();\n\n    const values = form.getFieldsValue();\n\n    try{\n        const res = await friendAdd(values);\n\n        if(res.status === 201 || res.status === 200) {\n            message.success('好友申请已发送');\n            form.resetFields();\n            props.handleClose();\n        }\n    } catch(e: any){\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"试下效果："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"提示好友申请已发送。"}),"\n",(0,s.jsx)(e.p,{children:"其中 hong 提示已经是好友了，我们查一下："}),"\n",(0,s.jsx)(e.p,{children:"/friendship/list"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"确实。"}),"\n",(0,s.jsx)(e.p,{children:"然后查一下新的好友请求："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"已经有了。"}),"\n",(0,s.jsx)(e.p,{children:"然后我们写一下通知页面："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1e1fbc0f1554006b8b7b30368ec59f1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1358&h=922&s=82277&e=png&b=ffffff",alt:""})}),"\n",(0,s.jsx)(e.p,{children:"之前的好友请求列表接口有点问题："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"其实用户发出的好友请求、发给用户的好友请求，都应该展示出来。"}),"\n",(0,s.jsx)(e.p,{children:"并且接口应该顺带把用户信息也给查出来返回。"}),"\n",(0,s.jsx)(e.p,{children:"我们完善下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"async list(userId: number) {\n    const fromMeRequest = await this.prismaService.friendRequest.findMany({\n        where: {\n            fromUserId: userId\n        }\n    })\n\n    const toMeRequest =  await this.prismaService.friendRequest.findMany({\n        where: {\n            toUserId: userId\n        }\n    })\n\n    const res = {\n        toMe: [],\n        fromMe: []\n    }\n\n    for (let i = 0; i < fromMeRequest.length; i++) {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: fromMeRequest[i].toUserId\n            },\n            select: {\n                id: true,\n                username: true,\n                nickName: true,\n                email: true,\n                headPic: true,\n                createTime: true\n            }\n        })\n        res.fromMe.push({\n            ...fromMeRequest[i],\n            toUser: user\n        })\n    }\n\n    for (let i = 0; i < toMeRequest.length; i++) {\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                id: toMeRequest[i].fromUserId\n            },\n            select: {\n                id: true,\n                username: true,\n                nickName: true,\n                email: true,\n                headPic: true,\n                createTime: true\n            }\n        })\n        res.toMe.push({\n            ...toMeRequest[i],\n            fromUser: user\n        })\n    }\n\n    return res;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"分别查询 fromUserId、toUsrId 为 userId 的好友请求，然后把其中的 user 查出来返回。"}),"\n",(0,s.jsx)(e.p,{children:"测试下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"因为现在还没有发送给当前用户的好友请求。"}),"\n",(0,s.jsx)(e.p,{children:"我们在界面发送一个："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"再查询就有了："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后我们在页面把这个显示下就行："}),"\n",(0,s.jsx)(e.p,{children:"src/pages/Notification.tsx"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { Button, Form, Input, Popconfirm, Table, Tabs, TabsProps, message } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\nimport './index.css';\n\nexport function Notification() {\n\n    const [form ]  = useForm();\n\n    const onChange = (key: string) => {\n        console.log(key);\n    };\n      \n    const items: TabsProps['items'] = [\n        {\n          key: '1',\n          label: '我发出的',\n          children: '发给我的',\n        },\n        {\n          key: '2',\n          label: '我发出的',\n          children: '我发出的',\n        }\n    ];\n\n    return <div id=\"notification-container\">\n        <div className=\"notification-list\">\n            <Tabs defaultActiveKey=\"1\" items={items} onChange={onChange} />\n        </div>\n    </div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"css"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-css",children:"#notification-container {\n    padding: 20px;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:F,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后在 interfaces 添加下接口："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"export async function friendRequestList() {\n    return axiosInstance.get('/friendship/request_list');\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"在页面调用下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { Button, Form, Input, Popconfirm, Table, Tabs, TabsProps, message } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\nimport './index.css';\nimport { useEffect, useState } from \"react\";\nimport { friendRequestList } from \"../../interfaces\";\n\ninterface User {\n    id: number;\n    headPic: string;\n    nickName: string;\n    email: string;\n    captcha: string;\n}\n\ninterface FriendRequest {\n    id: number\n    fromUserId: number\n    toUserId: number\n    reason: string\n    createTime: Date\n    fromUser: User\n    toUser: User\n    status: number\n}\n\nexport function Notification() {\n\n    const [form ]  = useForm();\n    const [fromMe, setFromMe] = useState<Array<FriendRequest>>([]);\n    const [toMe, setToMe] = useState<Array<FriendRequest>>([]);\n\n    async function queryFriendRequestList() {\n        try{\n            const res = await friendRequestList();\n\n            if(res.status === 201 || res.status === 200) {\n                setFromMe(res.data.fromMe.map((item: FriendRequest) => {\n                    return {\n                        ...item,\n                        key: item.id\n                    }\n                }));\n                setToMe(res.data.toMe.map((item: FriendRequest) => {\n                    return {\n                        ...item,\n                        key: item.id\n                    }\n                }));\n            }\n        } catch(e: any){\n            message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n        }\n    }\n\n    useEffect(() => {\n        queryFriendRequestList();\n    }, []);\n\n    const onChange = (key: string) => {\n        console.log(key);\n    };\n      \n    const items: TabsProps['items'] = [\n        {\n            key: '1',\n            label: '我发出的',\n            children: <div style={{width: 1000}}>\n                {JSON.stringify(fromMe)}\n            </div>\n        },\n        {\n            key: '2',\n            label: '发给我的',\n            children: <div style={{width: 1000}}>\n                {JSON.stringify(toMe)}\n            </div>\n        }\n    ];\n\n    return <div id=\"notification-container\">\n        <div className=\"notification-list\">\n            <Tabs defaultActiveKey=\"1\" items={items} onChange={onChange} />\n        </div>\n    </div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"请求下接口，设置到 fromMe、toMe 的 state："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后在 tab 内容展示下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"看下效果："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"数据请求成功。"}),"\n",(0,s.jsx)(e.p,{children:"我们用 table 展示下就好了："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { Button, Form, Input, Popconfirm, Table, Tabs, TabsProps, message } from \"antd\";\nimport { useForm } from \"antd/es/form/Form\";\nimport './index.css';\nimport { useEffect, useMemo, useState } from \"react\";\nimport { friendRequestList } from \"../../interfaces\";\nimport { ColumnsType } from \"antd/es/table\";\n\ninterface User {\n    id: number;\n    headPic: string;\n    nickName: string;\n    email: string;\n    captcha: string;\n}\n\ninterface FriendRequest {\n    id: number\n    fromUserId: number\n    toUserId: number\n    reason: string\n    createTime: Date\n    fromUser: User\n    toUser: User\n    status: number\n}\n\nexport function Notification() {\n\n    const [form ]  = useForm();\n    const [fromMe, setFromMe] = useState<Array<FriendRequest>>([]);\n    const [toMe, setToMe] = useState<Array<FriendRequest>>([]);\n\n    async function queryFriendRequestList() {\n        try{\n            const res = await friendRequestList();\n\n            if(res.status === 201 || res.status === 200) {\n                setFromMe(res.data.fromMe.map((item: FriendRequest) => {\n                    return {\n                        ...item,\n                        key: item.id\n                    }\n                }));\n                setToMe(res.data.toMe.map((item: FriendRequest) => {\n                    return {\n                        ...item,\n                        key: item.id\n                    }\n                }));\n            }\n        } catch(e: any){\n            message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n        }\n    }\n\n    useEffect(() => {\n        queryFriendRequestList();\n    }, []);\n\n    const onChange = (key: string) => {\n        console.log(key);\n    };\n      \n    const toMeColumns: ColumnsType<FriendRequest> = [\n        {\n            title: '用户',\n            render: (_, record) => {\n                return <div>\n                    <img src={record.fromUser.headPic} width={30} height={30}/>\n                    {' ' + record.fromUser.nickName + ' 请求加你为好友'}\n                </div>\n            }\n        },\n        \n        {\n            title: '请求时间',\n            render: (_, record) => {\n                return new Date(record.createTime).toLocaleString()\n            }\n        },\n        {\n            title: '操作',\n            render: (_, record) => (\n                <div>\n                    <a href=\"#\">同意</a><br/>\n                    <a href=\"#\">拒绝</a>\n                </div>\n            )\n        }\n    ]\n\n    const fromMeColumns: ColumnsType<FriendRequest> = [\n        {\n            title: '用户',\n            render: (_, record) => {\n                return <div>\n                    {' 请求添加好友 ' + record.toUser.nickName}\n                    <img src={record.toUser.headPic} width={30} height={30}/>\n                </div>\n            }\n        },\n        \n        {\n            title: '请求时间',\n            render: (_, record) => {\n                return new Date(record.createTime).toLocaleString()\n            }\n        },\n        {\n            title: '状态',\n            render: (_, record) => {\n                const map: Record<string, any> = {\n                    0: '申请中',\n                    1: '已通过',\n                    2: '已拒绝'\n                }\n                return <div>\n                    {map[record.status]}\n                </div>\n            }\n        }\n    ]\n\n    const items: TabsProps['items'] = [\n        {\n            key: '1',\n            label: '发给我的',\n            children: <div style={{width: 1000}}>\n                <Table columns={toMeColumns} dataSource={toMe} style={{width: '1000px'}}/>\n            </div>\n        },\n        {\n            key: '2',\n            label: '我发出的',\n            children: <div style={{width: 1000}}>\n                <Table columns={fromMeColumns} dataSource={fromMe} style={{width: '1000px'}}/>\n            </div>\n        }\n    ];\n\n    return <div id=\"notification-container\">\n        <div className=\"notification-list\">\n            <Tabs defaultActiveKey=\"1\" items={items} onChange={onChange} />\n        </div>\n    </div>\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"看下效果："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(e.p,{children:"然后加一下同意和拒绝的接口调用："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"export async function agreeFriendRequest(id: number) {\n    return axiosInstance.get(`/friendship/agree/${id}`);\n}\n\nexport async function rejectFriendRequest(id: number) {\n    return axiosInstance.get(`/friendship/reject/${id}`);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"然后页面上调用下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"{\n    title: '操作',\n    render: (_, record) => {\n        if(record.status === 0) {\n            return <div>\n                <a href=\"#\" onClick={() => agree(record.fromUserId)}>同意</a><br/>\n                <a href=\"#\" onClick={() => reject(record.fromUserId)}>拒绝</a>\n            </div>\n        } else {\n            const map: Record<string, any> = {\n                1: '已通过',\n                2: '已拒绝'\n            }\n            return <div>\n                {map[record.status]}\n            </div>\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"async function agree(id: number) {\n    try{\n        const res = await agreeFriendRequest(id);\n\n        if(res.status === 201 || res.status === 200) {\n            message.success('操作成功');\n            queryFriendRequestList();\n        }\n    } catch(e: any){\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n}\n\nasync function reject(id: number) {\n    try{\n        const res = await rejectFriendRequest(id);\n\n        if(res.status === 201 || res.status === 200) {\n            message.success('操作成功');\n            queryFriendRequestList();\n        }\n    } catch(e: any){\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"试下效果："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"同意后再看下好友列表："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"多了小强这个好友。"}),"\n",(0,s.jsx)(e.p,{children:"我们好像忘记展示 reason 了，补一下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"最后，我们整体测试下添加好友的功能："}),"\n",(0,s.jsx)(e.p,{children:"首先登录一个用户的账号，给 guang 发送好友请求："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"然后登录 guang 的账号："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"同意之后，就可以在好友列表看到这个好友了。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-frontend",target:"_blank",rel:"noopener noreferrer",children:"前端代码"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-backend",target:"_blank",rel:"noopener noreferrer",children:"后端代码"})}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:["总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"这节我们实现了添加好友。"}),"\n",(0,s.jsx)(e.p,{children:"首先点击添加好友按钮的时候会有个弹窗，输入 username 和理由之后，会发送一个好友请求。"}),"\n",(0,s.jsx)(e.p,{children:"在通知页面分别展示发给我的和我发出的好友请求，对方点击同意后，就会成为好友了。"}),"\n",(0,s.jsx)(e.p,{children:"这样添加好友、好友请求的功能就完成了。"})]})}function S(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(C,{...n})}):C(n)}let _=S;S.__RSPRESS_PAGE_META={},S.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F186.%20%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%9A%E6%B7%BB%E5%8A%A0%E5%A5%BD%E5%8F%8B%E5%BC%B9%E7%AA%97%E3%80%81%E9%80%9A%E7%9F%A5%E9%A1%B5%E9%9D%A2.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"186. 聊天室：添加好友弹窗、通知页面",headingTitle:"186. 聊天室：添加好友弹窗、通知页面",frontmatter:{}}}}]);