"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["33948"],{260057:function(e,n,d){e.exports=d.p+"static/image/7f107170006483f071d16e3a9071bd84.4486adf8.webp"},137299:function(e,n,d){d.r(n),d.d(n,{default:()=>f});var s=d(552676),c=d(740453);let r=d.p+"static/image/a0dda10cdf325ee5fa2c260c2e6a5b76.e6fb0fa4.webp",i=d.p+"static/image/a65e85c92e347dc5d975bb250159bb92.2e79f9dc.webp",a=d.p+"static/image/b29ed9c71133f2967a3aa3fba618cf76.31fb2b2a.webp";var l=d(260057);let h=d.p+"static/image/1e7f2da39178fde7d1cf2c391c8d3050.524ad35e.webp",o=d.p+"static/image/1711e3f781942dd9ecb8a1b5e66200dd.29fcc6d9.webp",t=d.p+"static/image/d0effed68fcaeca61ad2892df0d3079c.3a4dd345.webp",p=d.p+"static/image/5b211fd4eae43d115aa316ddc483fd4d.dac1371f.webp",j=d.p+"static/image/887c3671889b74d7d22e8ae085cc37b5.9562a0c9.webp",x=d.p+"static/image/54d8cdc0873f79f7f76454e4d1a0a798.ab99545e.webp";function m(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",blockquote:"blockquote",ol:"ol",li:"li",pre:"pre",strong:"strong",h3:"h3",ul:"ul"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"25打包篇-electron打包体积优化",children:["25.打包篇-Electron打包体积优化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#25打包篇-electron打包体积优化",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"应用构建生成安装包，窃喜，欲分享，微信至张三，张三曰：“入夜，来吾陋室，共享之”，夜深，手挎电脑，进寝室，颤巍双手点鼠标，发送，少倾，啪的一声，张三怒而站起，曰：“汝为何之大！”"}),"\n",(0,s.jsxs)(n.p,{children:["多大？来看看我们的应用程序大小。",(0,s.jsx)(n.code,{children:"219M"}),"，想一想，我们也没写什么代码，咋就这么大了？"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["我们右键应用程序，选中“显示包内容”，点击进入到 ",(0,s.jsx)(n.code,{children:"Contents"}),"，可以看到一些文件夹。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["比如这个 ",(0,s.jsx)(n.code,{children:"Frameworks"})," 里面放的是 v8 引擎和 chromium 内核，我们看看它有多大。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["单单这个东西就占了 178M，另外的 40M 左右大小在哪呢？我们看看 ",(0,s.jsx)(n.code,{children:"Contents/Resources"})," 文件夹下，有一个叫做 ",(0,s.jsx)(n.code,{children:"app.asar"})," 的玩意。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["哦豁，这是个什么东西，大小居然 40M，这个 asar 是个啥玩意？我们可以从",(0,s.jsx)(n.a,{href:"https://fileinfo.com/extension/asar",target:"_blank",rel:"noopener noreferrer",children:"文档"}),"中看到说明"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["An ASAR file is an archive used to package source code for an application using Electron, an open source library used to build cross-platform programs. It is saved in a format similar to\xa0",(0,s.jsx)(n.a,{href:"https://fileinfo.com/extension/tar",target:"_blank",rel:"noopener noreferrer",children:".TAR"}),"\xa0archives where files contained in the archive, such as\xa0",(0,s.jsx)(n.a,{href:"https://fileinfo.com/extension/html",target:"_blank",rel:"noopener noreferrer",children:".HTML"}),",\xa0",(0,s.jsx)(n.a,{href:"https://fileinfo.com/extension/js",target:"_blank",rel:"noopener noreferrer",children:".JS"}),", and\xa0",(0,s.jsx)(n.a,{href:"https://fileinfo.com/extension/css",target:"_blank",rel:"noopener noreferrer",children:".CSS"}),"\xa0files, are concatenated together without using compression."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们可以来解压一下 ",(0,s.jsx)(n.code,{children:"app.asar"}),"，网上搜对应文章就 OK 了。下面我们跟着阿宽解压一波"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"首先安装"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install -g asar\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["进入到 ",(0,s.jsx)(n.code,{children:"Contents/Resources"})," 文件夹内进行解压，下面解压到该文件夹下的 app 文件夹"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"asar extract app.asar ./app\n"})}),"\n",(0,s.jsxs)(n.p,{children:["你就会看到有一个 ",(0,s.jsx)(n.code,{children:"app"})," 文件夹，点进去看一看"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"优化方向",children:["优化方向",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#优化方向",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"先来捋一捋，我们整个应用打包出来的文件夹是这样的"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["关于 ",(0,s.jsx)(n.code,{children:"Frameworks"})," 我们是操作不了了，里面放的是 v8 引擎和 chromium 内核，我们只能想办法优化 ",(0,s.jsx)(n.code,{children:"Resources"}),"，在 Resources 中好像很多文件夹都比较小，并且是默认生成的，正所谓“不做作就不会死”，改出了问题怎么办（关键你也不知道怎么改），所以说我们还是动熟悉的那块。"]}),"\n",(0,s.jsxs)(n.p,{children:["那么哪一块我们熟悉呢？",(0,s.jsx)(n.code,{children:"app.asar"}),"解压后的 ",(0,s.jsx)(n.code,{children:"dist"})," 和 ",(0,s.jsx)(n.code,{children:"node_modules"}),"，上面看到了，40M 里，node_modules 占了大头，所以我们要做的是我们的应用能否不打包 ",(0,s.jsx)(n.code,{children:"node_modules"})," 文件夹，或者是让打包的东西尽可能少？"]}),"\n",(0,s.jsxs)(n.h2,{id:"打包优化",children:["打包优化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#打包优化",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["electron 在打包过程中，会读取 ",(0,s.jsx)(n.code,{children:"package.json"})," 中的 ",(0,s.jsx)(n.code,{children:"dependencies"})," 依赖，将其依赖 ",(0,s.jsx)(n.code,{children:"“copy”"})," 一份放在 ",(0,s.jsx)(n.code,{children:"Resources/app.asar"})," 中，也就是我们压缩之后的代码包。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["故此，想要减小包体积大小，就要减小 ",(0,s.jsx)(n.code,{children:"node_modules"})," 的大小，想减小 ",(0,s.jsx)(n.code,{children:"node_modules"})," 的大小，就要做到 ",(0,s.jsx)(n.code,{children:"dependencise"})," 依赖尽可能少，想减少 ",(0,s.jsx)(n.code,{children:"dependencise"})," 依赖，就要把没必要的包放在 ",(0,s.jsx)(n.code,{children:"devDependencies"}),"。"]})}),"\n",(0,s.jsx)(n.p,{children:"方法告诉你了，赶紧动手试试吧！因为前面阿宽已经区分过了，等价于已经优化过一轮了。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"你可以皮一下，把 package.json 中的 devDependencise 包都放在 dependencise，然后打个包看看体积多大，经过对比，验证结论。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"知识点延伸",children:["知识点延伸",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#知识点延伸",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"1-关于-dependencies-与-devdependencies",children:["1. 关于 dependencies 与 devDependencies",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-关于-dependencies-与-devdependencies",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"dependencies 是产生环境下的依赖，比如说 Vue、React 等"}),"\n",(0,s.jsx)(n.li,{children:"devDependencies 是开发环境下的依赖，比如 Webpack、ESLint、Babel 等"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"可能这么讲小伙伴们还是不怎么能区分，这么说吧。我写了一个 React UI 组件包，其中依赖了 AntDesign，那我需要将 AntDesign 和 React 放在 dependencies 中。"}),"\n",(0,s.jsx)(n.p,{children:"再比如说，我们项目中用到了 Redux，但是 Redux 的 devDependencies 里面有 jest、rxjs 等，在我们安装 Redux 时，我们是不会把 jest、rxjs 拉下来的（也就是 node_modules 里是不会有 jest、rxjs）"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"一般我们开发过程中，会在项目中安装 webpack、webpack-dev-server、babel、eslint 的等工具库，或者是用于单元测试的 jest 库，这些依赖库都只是在我们项目开发过程中使用，应该写在 devDependencies 里。如果说我们依赖乱写，例如开发依赖放在生产，生产依赖放在开发，这会出现什么问题？"}),"\n",(0,s.jsxs)(n.p,{children:["以 ",(0,s.jsx)(n.a,{href:"https://github.com/SugarTurboS/rc-redux-model/blob/master/package.json",target:"_blank",rel:"noopener noreferrer",children:"rc-redux-model"}),"为例，我们可以看到它的依赖非常的少。这是一个 npm 包。当我们执行 ",(0,s.jsx)(n.code,{children:"npm install rc-redux-model"})," 时，此时会将 dependencies 的依赖都安装，不会安装 devDependencies 里的依赖库。"]}),"\n",(0,s.jsxs)(n.p,{children:["但如果是通过克隆仓库项目代码，如 ",(0,s.jsx)(n.code,{children:"git clone https://github.com/SugarTurboS/rc-redux-model"}),"，然后再 ",(0,s.jsx)(n.code,{children:"npm instal"}),"，这时候会将 dependencies 和 devDependencies 里的依赖库都安装。"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-devdependencise-包依赖会被打进去吗",children:["2. devDependencise 包依赖会被打进去吗？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-devdependencise-包依赖会被打进去吗",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["一开始我也有疑惑，如上所述的，electron 打包只会将 dependencise 依赖打进去，那假设我不小心把 ",(0,s.jsx)(n.code,{children:"lodash"}),"、",(0,s.jsx)(n.code,{children:"axios"})," 放在了 devDependencise 里。"]}),"\n",(0,s.jsxs)(n.p,{children:["结果是什么：electron 打包后的 ",(0,s.jsx)(n.code,{children:"Resources/app.asar"})," 解压后，node_modules 是找不到 ",(0,s.jsx)(n.code,{children:"lodash"}),"、",(0,s.jsx)(n.code,{children:"axios"})," 的！小伙伴们能理解吧？那么我不禁思考，我代码里肯定用到了 axios、lodash，为什么它不报错，为什么能正常运行？"]}),"\n",(0,s.jsx)(n.p,{children:"于是我做了一个实验。新增一个空项目，然后写一份 package.json，安装一下，接着新增一个 a.js，编写下面代码，看看打包之后的内容。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 第一步：创建文件夹\nmkdir test\n\n// 第二步：进入文件夹\ncd test\n\n// 第三步：新增 package.json\ntouch package.json\n\n// 第四步：编写 package.json，按照下面图片写一下就好了\nvim package.json\n\n// 第五步：新增 a.js\ntouch a.js\n\n// 第六步：编写 a.js，按照下面图片写一下就好了\nvim a.js\n\n// 第七步：打包\nnpx webpack a.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["首先我们先来测试，",(0,s.jsx)(n.code,{children:"devDependencise"})," 依赖中有个叫 lodash 的库"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["再来测试一下，",(0,s.jsx)(n.code,{children:"dependencise"})," 依赖中有个叫 axios 的库"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["在测试一下，如果是插件类的 ",(0,s.jsx)(n.code,{children:"devDependencise"}),"，是不是也会打进去呢？试试 ",(0,s.jsx)(n.code,{children:"webpack-merge"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["结论：我个人认为，无论是 ",(0,s.jsx)(n.code,{children:"devDependencise"})," 还是 ",(0,s.jsx)(n.code,{children:"dependencise"}),"，实际上都会把这些包打进 js 中。对于 web 应用项目来讲，依赖写在哪不是很重要，说实在话项目中多多少少还是会有一些依赖是处于混用状态。但这是个人主观意识，说白了就是有没有代码洁癖，是不是严格要求写依赖。"]})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["对于 web 应用来讲，不是很重要，但对于开发第三方包来讲，一定要严格区分，正如我前面所说的，第三方包 ",(0,s.jsx)(n.code,{children:"npm install"})," 时，只会安装 ",(0,s.jsx)(n.code,{children:"dependencise"})," 的依赖。同时对于 electron 应用来说，也要严格区分，毕竟这是跟应用大小相关的东西。还是严格一点好。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"最后",children:["最后",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最后",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["本章节的重点从 electron 的打包体积优化逐步变成 node_modules 的体积优化，再演变为 ",(0,s.jsx)(n.code,{children:"dependencies"})," 与 ",(0,s.jsx)(n.code,{children:"devDependencies"})," 的区别，通过实验验证心中所存在的疑惑。"]}),"\n",(0,s.jsx)(n.p,{children:"如果对本章节存在疑问，欢迎在评论区留言。如果觉得阿宽哪里表达错误，可指出，虚心请教～"})]})}function g(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}let f=g;g.__RSPRESS_PAGE_META={},g.__RSPRESS_PAGE_META["Electron%20%2B%20React%20%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8E%86%E5%B9%B3%E5%8F%B0%E5%AE%9E%E6%88%98%2F25.%E6%89%93%E5%8C%85%E7%AF%87-Electron%E6%89%93%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"优化方向",id:"优化方向",depth:2},{text:"打包优化",id:"打包优化",depth:2},{text:"知识点延伸",id:"知识点延伸",depth:2},{text:"1. 关于 dependencies 与 devDependencies",id:"1-关于-dependencies-与-devdependencies",depth:3},{text:"2. devDependencise 包依赖会被打进去吗？",id:"2-devdependencise-包依赖会被打进去吗",depth:3},{text:"最后",id:"最后",depth:2}],title:"25.打包篇-Electron打包体积优化",headingTitle:"25.打包篇-Electron打包体积优化",frontmatter:{}}}}]);