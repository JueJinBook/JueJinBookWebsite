"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["76389"],{651388:function(e,n,r){r.r(n),r.d(n,{default:()=>P});var s=r(552676),i=r(740453);let c=r.p+"static/image/c1c8100c9b78fde75c71e17e61d1d4d8.6826a5f8.gif",l=r.p+"static/image/3f0638c89ac162a6e570294f62c666eb.8ec44734.gif",t=r.p+"static/image/6557711bf3d18745e6d2ac4d65c6c694.dc8c1ffc.gif",a=r.p+"static/image/79925e29ba93a908b9ce8868cb51367e.8337f301.gif",d=r.p+"static/image/fb748181cf11c020849d9f36c2ae7fad.e3d63616.gif",o=r.p+"static/image/3274237b7dafa881628ef28c8b2e2243.7038b059.gif",h=r.p+"static/image/fe20075f8fd18bea138108c8b8de7c0a.ed0b1e2c.webp",p=r.p+"static/image/ba3799424dfea2bb650f593b298d1d7e.7925337a.gif",x=r.p+"static/image/f160b5b3579b58737f216d50991d3fed.2f06ed4a.gif",j=r.p+"static/image/7a6e5e2a3302436202532aad55e0c654.df84409d.gif",S=r.p+"static/image/e7f994ca0fa6596ca7a4c226f8f36d4a.eeb38280.webp",b=r.p+"static/image/d224c012c70191610d723f2d0e946a97.f6c2eee8.webp",f=r.p+"static/image/b4f88e89a982a37740de2f9526a8e9a3.06bb65b8.gif",g=r.p+"static/image/b1f5c272a321858e742d4a134e53188d.1906f97b.webp",u=r.p+"static/image/6a0cbbbdd426bfffaad4d98829d3535b.f31c08af.webp",m=r.p+"static/image/045e4f85e14e916c4100cbaad8d73900.ef8afa43.webp",C=r.p+"static/image/ad62d8c45a6aa6ff8a2004953e30f153.69eefe31.gif",v=r.p+"static/image/253ba47c0fb26d56920b5d602e8880bc.5e47f28d.gif",V=r.p+"static/image/b9bd9397e7c2a2cbf635f963bd781691.c3a9b612.webp",G=r.p+"static/image/69de2e6403098d303af9fd4930b4138e.e6aa3ea9.gif",k=r.p+"static/image/72f95e5778fc984eab85daf02d43e096.cb0621b2.gif",w=r.p+"static/image/14a27ba0bcdb9ab59f09e448b742cead.22651d43.webp",_=r.p+"static/image/c807be3f62932ca0e964f35645c7ee6a.c73bf672.webp",W=r.p+"static/image/00d602086abf3c9a4ba4b52b73fba24a.679b161a.webp",y=r.p+"static/image/4b2766c775a270cbf9618348bddf35f7.94c4a4e0.webp",L=r.p+"static/image/b2c54166a3c84911f4e54886219c4aab.239a401d.gif",M=r.p+"static/image/f848646672cffe6c833ac690a86eacc8.36d881b8.gif",N=r.p+"static/image/64ed4d037bf68a75a519c63bf40c150c.1e976989.webp",B=r.p+"static/image/9119f27e3780cd576a525c423c472ef9.d97659f3.gif",E=r.p+"static/image/9d177dbb9088844d23b8e18780030333.29d347a3.gif";function q(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",h2:"h2",h3:"h3",ul:"ul",li:"li",strong:"strong",code:"code",blockquote:"blockquote",pre:"pre"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"28-实战篇svg-与-web-开发之-svg-vs-css",children:["28-实战篇：SVG 与 Web 开发之 SVG vs. CSS",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#28-实战篇svg-与-web-开发之-svg-vs-css",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在这个视觉体验至上的互联网时代，图形元素不仅是 Web 设计的核心组成部分，还承载着传达信息、塑造品牌个性、提升用户体验的重要任务。随着 HTML5 标准的普及，SVG 作为一种矢量图形格式逐渐成为 Web 开发者的利器，以其独特的魅力挑战着传统位图图像在 Web 设计领域的地位。当 SVG 遇上 CSS，一场关于图形表达与样式风格控制的精彩对话便悄然展开。这便是我们这节课的主题——《SVG 与 Web 开发之 SVG vs. CSS》!"}),"\n",(0,s.jsx)(n.p,{children:"当这两者相遇，技术与创意的碰撞是不可避免的。在这节课中，我们旨在深入探讨两者如何协同工作，既对比它们各自的优势，也揭示它们如何互补不足。我们将探索如何运用 CSS 的强大功能为 SVG 图形添加色彩、实现动画效果、控制图形变换，乃至利用 SVG 和 CSS 的先进特性，如滤镜、剪切和遮罩，进一步提升 Web 页面的视觉表现力，为用户提供更好的体验。"}),"\n",(0,s.jsx)(n.p,{children:"接下来的旅程并不仅是一次技术之旅，更是一次设计思维的拓展。我们不仅会讲解理论，还会通过实战案例，展示如何解决实际开发中的难题，如何高效地将 SVG 与 CSS 结合起来，创造出既美观又实用的 Web UI。无论你是 Web 前端开发者、UI 设计师，还是对 Web 图形技术充满好奇的学习者，这节课的内容都将为你打开一扇通往高质感 Web 设计的大门。"}),"\n",(0,s.jsx)(n.p,{children:"让我们一起踏上这段旅程，见证 SVG 与 CSS 如何携手，在 Web 开发的舞台上共舞，创作出既具艺术美感又充满技术智慧的 Web 作品。"}),"\n",(0,s.jsx)(n.p,{children:"准备好了吗？让我们开始吧！"}),"\n",(0,s.jsxs)(n.h2,{id:"为什么-svg-和-css-是绝配",children:["为什么 SVG 和 CSS 是绝配？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么-svg-和-css-是绝配",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"SVG 和 CSS 在现代 Web 开发中扮演着关键角色，它们的结合被普遍视为理想的组合，为 Web 设计带来了广泛的创造性和灵活性。SVG 作为一种灵活、可扩展的图像格式，提供了高品质、可缩放且不失真的图形展示与绘制能力。而 CSS 则是 Web 设计的精髓，赋予 Web 页面丰富的样式和效果，让设计师得以实现各种视觉上的想象。"}),"\n",(0,s.jsx)(n.p,{children:"尽管 SVG 和 CSS 属于不同的技术体系，但它们并非对立关系，而是相辅相成。它们各自拥有独特的优势，同时在某些方面也相互补充，甚至互相依赖。两者共同推动了 Web 页面的视觉表现和功能性的提升，为用户提供了更加优质的浏览体验。"}),"\n",(0,s.jsxs)(n.h3,{id:"svg-和-css你中有我我中有你",children:["SVG 和 CSS：你中有我，我中有你",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-和-css你中有我我中有你",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"熟悉 CSS 特性的发展历程，你会发现其中一些特性源自 SVG 的功能，例如绘图特性、渐变、滤镜、混合模式、动画、变换以及剪切和遮罩等。随着技术的不断革新，CSS 和 SVG 的特性可以相互结合，例如剪切、遮罩和滤镜等效果，SVG 可以直接提供给 CSS 使用。同时，CSS 也能够直接控制 SVG 元素的样式和动画效果，实现更丰富的视觉效果和交互体验。"}),"\n",(0,s.jsx)(n.p,{children:"可以说，两者相辅相成，彼此之间有着相似之处和不同之处。"}),"\n",(0,s.jsx)(n.p,{children:"相似之处包括："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"样式控制"}),"：SVG 和 CSS 都涉及样式控制，只是范围和重点不同。SVG 内部可以通过属性直接定义图形元素的样式，类似于内联 CSS。CSS 则可以用来控制整个网页或 SVG 元素的外观。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"动画能力"}),"：SVG 和 CSS 都支持动画效果。CSS 引入了关键帧动画（",(0,s.jsx)(n.code,{children:"animation"}),"）和过渡效果（",(0,s.jsx)(n.code,{children:"transition"}),"），而 SVG 自身也有一套动画机制，如 ",(0,s.jsx)(n.code,{children:"<animate>"})," 和 ",(0,s.jsx)(n.code,{children:"<animateTransform>"})," 标签。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"响应式设计"}),"：两者都支持响应式设计理念。SVG 由于其矢量性质，适合各种屏幕尺寸，而 CSS 提供了媒体查询等工具来实现界面的自适应布局。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"可编程性"}),"：SVG 和 CSS 都可以通过 JavaScript 进行动态操作，增加互动性。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"两者的不同之处包括："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"本质与用途"}),"：CSS 是一种样式表语言，专注于定义网页元素的布局和外观。而 SVG 是一种图像格式，用于定义可缩放的矢量图形。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"结构与语法"}),"：CSS 使用选择器和属性-值对设置样式。SVG 通过 XML 标签和属性直接描述图形元素。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"图形处理能力"}),"：SVG 在处理复杂图形、图标和数据可视化方面具有明显优势，而 CSS 更适合控制网页元素的布局和外观。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"性能考量"}),"：SVG 在高分辨率显示上能显著减少加载时间和带宽消耗，但对于非常大的文件，解析和渲染可能会消耗更多资源。CSS 对性能的影响较小，但在优化不当时可能导致页面滚动或动画卡顿。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"动画实现方式"}),"：CSS 动画通过修改元素样式属性实现，简单易用。SVG 动画则直接操作图形属性，适合更复杂的图形变换和交互。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"除了上述的基本对比之外，我们还可以从更细致的角度探讨 SVG 和 CSS 在实际应用中的几个关键对比点："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"交互性"}),"：SVG 提供了极高的交互性潜力。作为 DOM 的一部分，每个 SVG 元素都可以通过 JavaScript 进行访问和操控。这意味着可以为每一个图形元素添加事件监听器（如点击、鼠标悬停等），从而实现丰富的用户交互体验。这种能力使得 SVG 在创建动态图表、地图以及游戏等应用场景中非常有用。CSS 虽然也能通过伪类（如 ",(0,s.jsx)(n.code,{children:":hover"}),", ",(0,s.jsx)(n.code,{children:":active"}),"）实现一些基本的交互反馈，但它更多地集中在视觉样式的变化上，而非直接的逻辑交互处理。复杂的用户交互逻辑通常由 JavaScript 来完成。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"可维护性和可扩展性"}),"：SVG 图像具有良好的可维护性和可扩展性。由于 SVG 是基于文本的 XML 格式，设计师和开发者可以轻松编辑图形的源代码，增删改图形元素，甚至使用版本控制系统管理图形的变化。此外，SVG 元素可以重复利用，一个复杂的图形可以拆分成多个组件，在不同地方重用。CSS 在页面布局和样式一致性维护方面表现出色。通过 CSS 预处理器、模块化和继承等技术，开发者可以轻松地维护和扩展样式规则，确保网站风格统一且易于调整。然而，对于复杂的矢量图形细节控制，CSS 的直接控制能力较弱。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"兼容性"}),"：现代浏览器普遍良好支持 SVG 和 CSS。不过，对于一些复杂的 SVG 特性和 CSS 新特性（如滤镜效果、动画等），老版本浏览器可能支持不完全。开发者需要考虑目标用户的浏览器环境，以决定使用的技术深度。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"尽管 SVG 和 CSS 有许多相交之处，但它们的核心价值和应用场景存在本质区别。理解它们各自的强项并合理搭配使用，是提升 Web 开发效率和用户体验的关键。例如，在设计复杂的用户界面时，可以利用 SVG 创造清晰细腻的图形元素，再通过 CSS 控制布局和样式，结合 JavaScript 实现交互逻辑，三者协同工作，共同构建高质量的 Web 产品。接下来的内容将进一步印证这一观点。"}),"\n",(0,s.jsxs)(n.h3,{id:"增强视觉吸引力和设计的灵活性",children:["增强视觉吸引力和设计的灵活性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#增强视觉吸引力和设计的灵活性",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"SVG 与 CSS 的协同作用不仅在技术层面上显得优势突出，更极大地增强了 Web 项目的视觉吸引力和设计灵活性。这一强大的组合为 Web 设计师开启了无限的创意可能，让他们能够实现复杂的设计和动画效果，这些效果在使用传统位图格式时是难以甚至无法达成的。"}),"\n",(0,s.jsx)(n.p,{children:"SVG 的矢量特性确保了图形在任何尺寸下都能保持清晰和像素完美的状态，从最小的图标到全屏背景图像皆如此。这种清晰度对于创建能够吸引用户注意力并传达专业性的视觉震撼网站至关重要。"}),"\n",(0,s.jsx)(n.p,{children:"当 CSS 应用于 SVG 时，它解锁了美学定制的新维度，包括："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"动态样式"}),"：根据用户交互或站点主题改变颜色、边框、填充等。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"复杂动画"}),"：创建响应用户输入的吸引人动画，增强网站的交互性。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"自适应设计"}),"：调整 SVG 的视觉元素以匹配不同的屏幕尺寸、方向或分辨率。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这两者的结合不仅提高了设计和开发的效率，还为用户提供了更丰富的视觉和交互体验。"}),"\n",(0,s.jsx)(n.p,{children:"比如下面这个按钮效果，就是 SVG 和 CSS 相互结合的典型案例："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLVzbL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLVzbL"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正如你所看到的，按钮在三个状态具有不同的形状："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["仅使用 CSS 自身能力要绘制矩形，很容易。因为在 CSS 中，任何元素默认就是一个矩形框，但要在悬停状态（",(0,s.jsx)(n.code,{children:":hover"}),"）和激活状态（",(0,s.jsx)(n.code,{children:":active"}),"）将矩形分别变成凸出和凹进的形状，就显得非常的吃力。在绘制图形方面，SVG 具有绝对强的优势，使用 SVG 的 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素，非常容易绘制出按钮所需的三种形状："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100">\n    \x3c!-- default --\x3e\n    <path d="M0,0 C0,0 100,0 100,0 C100,0 100,100 100,100 C100,100 0,100 0,100 C0,100 0,0 0,0 z" />\n  \n    \x3c!-- hover --\x3e\n    <path d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />\n  \n    \x3c!-- active --\x3e\n    <path d="M0,0 C30,10 70,10 100,0 C95,30 95,70 100,100 C70,90 30,90 0,100 C5,70 5,30 0,0 z" />\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:"也就是说，我们将两者结合起来，各自发挥其自身的优势，制作该按钮效果就变得轻而易举。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<button class="button">\n    <svg class="button__shape" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">\n        <path class="button__path" d="M0,0 C0,0 100,0 100,0 C100,0 100,100 100,100 C100,100 0,100 0,100 C0,100 0,0 0,0 z"/>\n    </svg>\n    <span class="button__content">CSS & SVG</span>\n</button>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["我们直接将 SVG 嵌套在 ",(0,s.jsx)(n.code,{children:"<button>"})," 元素中，将其作为按钮的背景，然后通过 CSS 的 ",(0,s.jsx)(n.code,{children:":hover"})," 和 ",(0,s.jsx)(n.code,{children:":active"})," 选择器改变 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,s.jsx)(n.code,{children:"d"})," 属性的值："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'.button {\n    background: transparent;\n    \n    .button__shape {\n        overflow: visible;\n    }\n    \n    &:hover {\n        .button__path {\n            d: path(\n              "M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z"\n            );\n        }\n    }\n    \n    &:active {\n        .button__path {\n            d: path(\n              "M0,0 C30,10 70,10 100,0 C95,30 95,70 100,100 C70,90 30,90 0,100 C5,70 5,30 0,0 z"\n            );\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这里有一个小细节需要知道，默认情况下，",(0,s.jsx)(n.code,{children:"<svg>"})," 元素（",(0,s.jsx)(n.code,{children:".button__shape"}),"）的 ",(0,s.jsx)(n.code,{children:"overflow"})," 属性的值为 ",(0,s.jsx)(n.code,{children:"hidden"})," ，所有溢出 ",(0,s.jsx)(n.code,{children:"viewBox"})," 的图形都会被剪裁掉。为了避免在 ",(0,s.jsx)(n.code,{children:":hover"})," 和 ",(0,s.jsx)(n.code,{children:":active"})," 状态下，SVG 图形不被裁剪掉，需要将 ",(0,s.jsx)(n.code,{children:"overflow"})," 重置为 ",(0,s.jsx)(n.code,{children:"visible"})," 。"]}),"\n",(0,s.jsxs)(n.p,{children:["另外，按钮的颜色可能会随着不同的主题发生变化，为了便于随时调整按钮的背景颜色（即图形颜色），我们可以在 CSS 中将 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,s.jsx)(n.code,{children:"fill"})," 属性设置所需的颜色即可。在这里我利用了 CSS 自定义属性特性，将其定义为 ",(0,s.jsx)(n.code,{children:"--background-color"})," 。这样做的好处是，除了易于维护之外，我们可以随时调整图形颜色："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".button {\n    --background-color: #ff5722;\n    \n    .button__shape {\n        fill: var(--background-color);\n        transition:fill .2s ease-in-out,\n    }\n    \n    &:hover {\n        --background-color: #be390f;\n    }\n    \n    &:active {\n        --background-color: #8d2706;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["为了避免按钮在样式发生变化时，效果显得比较生硬，还可以使用 CSS 的 ",(0,s.jsx)(n.code,{children:"transition"})," 特性，为按钮添加过渡动画效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'.button {\n    --background-color: #ff5722;\n    --button-motion-ease: cubic-bezier(0.34, 1.56, 0.64, 1);\n    --button-motion-duration: 0s;\n    --button-scale-up: 1.05;\n    --button-scale-down: 0.95;\n    \n    background: transparent;\n    transition: filter var(--button-motion-duration) var(--button-motion-ease);\n    \n    .button__content {\n        transition: scale var(--button-motion-duration) var(--button-motion-ease);\n    }\n    \n    .button__shape { \n        fill: var(--background-color);\n        overflow: visible;\n        transition:fill .2s ease-in-out, scale var(--button-motion-duration) var(--button-motion-ease);\n    }\n    \n    .button__path {\n        transition: d var(--button-motion-duration) var(--button-motion-ease);\n    }\n    \n    &:hover {\n        --background-color: #be390f;\n        filter: brightness(1.1);\n      \n        :is(.button__content, .button__shape) {\n            scale:var(--button-scale-up);\n        }\n\n        .button__path {\n            d: path("M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z");\n        }\n    }\n    \n    &:active {\n        --background-color: #8d2706;\n        filter: brightness(0.9);\n      \n        :is(.button__content, .button__shape) {\n            scale:var(--button-scale-down);\n        }\n\n        .button__path {\n            d: path("M0,0 C30,10 70,10 100,0 C95,30 95,70 100,100 C70,90 30,90 0,100 C5,70 5,30 0,0 z");\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面所展示的只是案例所需的关键代码，",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLVzbL",target:"_blank",rel:"noopener noreferrer",children:"详细源码请点击这里阅读"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果某一天，Web 设计师不需要这种图形效果的按钮了，需要其他的效果，只需调整 SVG 的 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,s.jsx)(n.code,{children:"d"})," 属性即可。要是你精通 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素的命令，你可能徒手通过命令硬编码实现所需图形；即使你在这方面的知识比较欠缺，也可以通过诸如 Figma 设计软件辅助你获得所需图形。从这一点而言，SVG 的注入，给设计带来无限的可能！"]}),"\n",(0,s.jsx)(n.p,{children:"其次，你可以尝试着调整按钮的文本内容，你会发现，它的可适配性已超出你的想象："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:L,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/PovZzwy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PovZzwy"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"再来看一个图形填充文本相关的示例。"}),"\n",(0,s.jsxs)(n.p,{children:["在 CSS 中，通常是使用 ",(0,s.jsx)(n.code,{children:"background-clip: text"})," 来创建图形填充文本的效果。例如，像下面这个渐变颜色填充文本的效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:"<h1>CSS & SVG Awesome!</h1>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"h1 {\n    font-size: 20vh;\n    background: linear-gradient(to right, #09acef,#cef90a);\n    -webkit-text-fill-color: transparent;\n    -webkit-background-clip: text;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbwpJx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbwpJx"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在 SVG 中，我们可以通过 ",(0,s.jsx)(n.code,{children:"<linearGradient>"})," 和 ",(0,s.jsx)(n.code,{children:"<text>"})," 实现一个类似的渐变填充文本的效果："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 800 200" width="100%" height="100%">\n    <defs>\n        <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">\n            <stop offset="0" stop-color="#09acef" />\n            <stop offset="1" stop-color="#cef90a" />\n        </linearGradient>\n    </defs>\n    <text x="50%" y="50%" text-anchor="middle" fill="url(#gradient)" font-size="95">SVG Gradient Text</text>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:W,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/gOJPLQe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOJPLQe"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"除此之外，我们可以结合 CSS 和 SVG 的滤镜，将 SVG 滤镜效果应用到文本上。创建类似文本被撕裂的效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<h1>CSS & SVG Awesome!</h1>\n<svg class="sr-only">\n    <defs>\n        <filter id="filter">\n            <feTurbulence type="turbulence" baseFrequency="0.002 0.008" numOctaves="2" seed="2" stitchTiles="stitch" result="turbulence" />\n            <feColorMatrix type="saturate" values="30" in="turbulence" result="colormatrix" />\n            <feColorMatrix type="matrix" values="1 0 0 0 0\n                                                 0 1 0 0 0\n                                                 0 0 1 0 0\n                                                 0 0 0 150 -15" in="colormatrix" result="colormatrix1" />\n            <feComposite in="SourceGraphic" in2="colormatrix1" operator="in" result="composite" />\n            <feDisplacementMap in="SourceGraphic" in2="colormatrix1" scale="15" xChannelSelector="R" yChannelSelector="A" result="displacementMap" />\n        </filter>\n    </defs>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"h1 {\n    background: linear-gradient(to right, #09acef,#cef90a);\n    -webkit-text-fill-color: transparent;\n    -webkit-background-clip: text;\n    filter: url(#filter);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/VwOemRz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwOemRz"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"直到目前，仅使用 CSS 要实现类似的文本效果是不太现实的，一旦将 SVG 的能力注入进来，一切皆有可能："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/collection/ArxmyO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/collection/ArxmyO"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"创造沉浸式的用户体验",children:["创造沉浸式的用户体验",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创造沉浸式的用户体验",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"SVG 与 CSS 的结合不仅使 Web 界面更加美观，还能营造出更加沉浸式的用户体验。通过在 SVG 元素上应用 CSS 动画和过渡效果，Web 开发者能够创建丰富的互动功能，吸引用户并鼓励他们进一步探索内容。这些互动效果可以从简单的悬停变化到复杂的动画，不一而足。"}),"\n",(0,s.jsxs)(n.p,{children:["例如，下面这两个由",(0,s.jsx)(n.a,{href:"https://twitter.com/intent/follow",target:"_blank",rel:"noopener noreferrer",children:" @Jhey"})," 提供的悬停效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/jh3y/full/wvNpQJe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/jh3y/full/wvNpQJe"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/jh3y/full/LYaWoRB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/jh3y/full/LYaWoRB"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"我们这里简单地分析一下上面这个按钮的悬停动效是如何实现的。"}),"\n",(0,s.jsxs)(n.p,{children:["实现原理非常简单，按钮默认状态下，",(0,s.jsx)(n.code,{children:"</>"})," 图形是由 SVG 的三个 ",(0,s.jsx)(n.code,{children:"<path>"})," 绘制而成："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 24 24" fill="none">\n    <path d="M6.75 17.25L1.5 12L6.75 6.75" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />\n    <path d="M12 4 L12 20" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />\n    <path d="M17.25 6.75L22.5 12L17.25 17.25" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["当用户鼠标悬停在按钮上时，第一个 ",(0,s.jsx)(n.code,{children:"<path>"})," （即 ",(0,s.jsx)(n.code,{children:"<"}),"）和第三个 ",(0,s.jsx)(n.code,{children:"<path>"})," （即 ",(0,s.jsx)(n.code,{children:">"}),"）会移出按钮可视区域，而第二个 ",(0,s.jsx)(n.code,{children:"<path>"})," （即 ",(0,s.jsx)(n.code,{children:"|"}),"）由竖线变成横线。这些变换效果，我们可以通过 CSS 的变换来实现。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<main>\n    <button class="button">\n        <span class="text">Get Code</span>\n        <span class="container">\n            <svg aria-hidden="true" viewBox="0 0 24 24" fill="none">\n                <path d="M6.75 17.25L1.5 12L6.75 6.75"  />\n                <path d="M12 4 L12 20"  />\n                <path d="M17.25 6.75L22.5 12L17.25 17.25"  />\n            </svg>\n        </span>\n    </button>\n</main>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["注意，为了使 SVG 代码变得更干净些，我将设置 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素样式的相关属性移入到 CSS 中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".button {\n    path {\n        stroke: black;\n        stroke-width: 1.5;\n        stroke-linecap: round;\n        stroke-linejoin: round\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"接下来，使用 CSS 来给按钮添加样式，基本样式相关的代码就不在这里展示了。这里仅展示与 SVG 和交互动相关的 CSS 代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".button {\n    /* 基本样式省略 */\n    position: relative;\n    \n    svg {\n        overflow: visible;\n        width: 24px;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["为了使溢出 SVG 视图的图形不被剪切掉，需要确保它的 ",(0,s.jsx)(n.code,{children:"overflow"})," 属性为 ",(0,s.jsx)(n.code,{children:"visible"}),"。接着就是该示例最为关键的 CSS 代码，主要设置 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素的样式："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:":root {\n    --accent: 280;\n    --speed: 0.25;\n    --transition: calc(var(--speed) * 1s);\n    --timing: ease-out;\n}\n\n.button {\n    path {\n        stroke-linecap: round;\n        stroke-linejoin: round;\n        stroke: currentColor;\n        stroke-width: 4;\n        transform-box: fill-box;\n        transform-origin: 50% 50%;\n        transition: translate var(--transition), scale var(--transition);\n        transition-timing-function: var(--timing);\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，使用 ",(0,s.jsx)(n.code,{children:"stroke"})," 和 ",(0,s.jsx)(n.code,{children:"stroke-width"})," 属性设置了 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素描边的样式。其中 ",(0,s.jsx)(n.code,{children:"transform-box"})," 属性非常重要，它将 SVG 元素变换框指定为 ",(0,s.jsx)(n.code,{children:"fill-box"})," ，如此一来，",(0,s.jsx)(n.code,{children:"transform-origin"})," 的百分比计算将会相对于 SVG 的元素的边界框来计算，不再相对 SVG 视图尺寸来计算。"]}),"\n",(0,s.jsxs)(n.p,{children:["在此基础上，使用 CSS 变换属性来改变每个 ",(0,s.jsx)(n.code,{children:"<path>"})," 的位置："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["第一个 ",(0,s.jsx)(n.code,{children:"<path>"})," （即 ",(0,s.jsx)(n.code,{children:"<"}),"）向左移出按钮可视区域，使用 ",(0,s.jsx)(n.code,{children:"translate"})," 沿 ",(0,s.jsx)(n.code,{children:"x"})," 方向向左移出，并使用 ",(0,s.jsx)(n.code,{children:"scale"})," 缩小到不可见。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["第二个 ",(0,s.jsx)(n.code,{children:"<path>"})," （即 ",(0,s.jsx)(n.code,{children:"|"}),"）由竖线变成横线，并调整描边颜色，使用 ",(0,s.jsx)(n.code,{children:"rotate"})," 旋转 ",(0,s.jsx)(n.code,{children:"90deg"})," ，由竖线变成横线，并使用 ",(0,s.jsx)(n.code,{children:"scale"})," 沿 ",(0,s.jsx)(n.code,{children:"y"})," 进行压缩，使其线条在视觉上变线，同时使用 ",(0,s.jsx)(n.code,{children:"stroke-width"})," 和 ",(0,s.jsx)(n.code,{children:"opacity"})," 调整线条的粗细与颜色。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["第三个 ",(0,s.jsx)(n.code,{children:"<path>"})," （即 ",(0,s.jsx)(n.code,{children:">"})," ）向右移出按钮可视区域，使用 ",(0,s.jsx)(n.code,{children:"translate"})," 沿 ",(0,s.jsx)(n.code,{children:"x"})," 方向向左移出，并使用 ",(0,s.jsx)(n.code,{children:"scale"})," 缩小到不见。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".button {\n    path {\n        stroke-linecap: round;\n        stroke-linejoin: round;\n        stroke: currentColor;\n        stroke-width: 4;\n        transform-box: fill-box;\n        transform-origin: 50% 50%;\n        transition: translate var(--transition), scale var(--transition);\n        transition-timing-function: var(--timing);\n       \n        \x3c!-- 第一个 path 和第三个 path 通过 translate 和 scale 移出按钮可视区域 --\x3e\n        &:not(:nth-child(2)) {\n            --offset: 30%;\n            --distance: 50cqi;\n            translate: calc((var(--offset) * var(--coefficient)) +(var(--intent, 0) * (var(--distance) * var(--coefficient)))) 0;\n            scale: calc(1 + var(--intent));\n        }\n        \n        \x3c!-- 第二个 path 通过 rotate 旋转变成横线，同时 sacle 沿 y 轴压缩 --\x3e\n        &:nth-child(2) {\n            rotate: calc(15deg + (var(--intent, 0) * 75deg));\n            scale: 1 calc(1 + var(--intent, 0));\n            translate: 0 calc(var(--intent, 0) * 30cqh);\n            stroke-width: calc(4 - (var(--intent, 0) * 2));\n            opacity: calc(1 - (var(--intent, 0) * 0.8));\n            transition: stroke-width var(--transition), rotate var(--transition),translate var(--transition), scale var(--transition), opacity var(--transition);\n            transition-timing-function: var(--timing);\n        }\n\n        &:nth-child(1) {\n            --coefficient: -1;\n        }\n\n        &:nth-child(3) {\n            --coefficient: 1;\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["注意，上面代码中第一个 ",(0,s.jsx)(n.code,{children:"<path>"})," 和第三个 ",(0,s.jsx)(n.code,{children:"<path>"})," 移动方向是由 ",(0,s.jsx)(n.code,{children:"--coefficient"})," 来判断的，当值为 ",(0,s.jsx)(n.code,{children:"-1"})," 向左移动，当值为 ",(0,s.jsx)(n.code,{children:"1"})," 时向右移动。"]}),"\n",(0,s.jsxs)(n.p,{children:["最后，在按钮的悬停状态（",(0,s.jsx)(n.code,{children:":hover"}),"）和聚焦状态（",(0,s.jsx)(n.code,{children:":focus-visible"}),"）改变 ",(0,s.jsx)(n.code,{children:"--intent"})," 属性的值，由初始值 ",(0,s.jsx)(n.code,{children:"0"})," 变成 ",(0,s.jsx)(n.code,{children:"1"})," 。该自定义属性值除了决定 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素的变换值之外，还控制了按钮文本的是否可见："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".button {\n\n    /* 省略其他 CSS 代码*/\n    .text {\n        scale: var(--intent, 0);\n        opacity: var(--intent, 0);\n        transform-origin: 50% 100%;\n        display: inline-block;\n        transition: scale var(--transition), opacity var(--transition);\n        transition-timing-function: var(--timing);\n    }\n    \n    &:is(:hover, :focus-visible) {\n        --intent: 1;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"最终效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/MWdKJEy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWdKJEy"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，示例中应用了多个",(0,s.jsx)(n.a,{href:"https://s.juejin.cn/ds/i2pf7RmG/",target:"_blank",rel:"noopener noreferrer",children:"现代 CSS 特性以及语法规则"}),"，如果你阅读示例源码略感吃力，建议你移步阅读《",(0,s.jsx)(n.a,{href:"https://s.juejin.cn/ds/i2pf7RmG/",target:"_blank",rel:"noopener noreferrer",children:"现代 CSS"}),"》，进一步加深对 CSS 新特性的了解！"]}),"\n",(0,s.jsx)(n.p,{children:"此外，使用 SVG 制作图表和信息图等图形元素，并结合 CSS 进行样式设置和动画处理，可以使数据可视化更加动态和易于访问。这种方式不仅提升了图形的视觉效果，还增强了用户与数据的互动性。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/christiannaths/full/yNBjBq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/christiannaths/full/yNBjBq"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/christiannaths",target:"_blank",rel:"noopener noreferrer",children:"@Christian Naths"}),"）"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在创建图表和数据可视方面，SVG 相较于其他技术（包括 CSS）更具优势。SVG 图表和数据可视化既可访问又完全可互动。市面上一些数据可视化方面的库，都提供了 SVG 版本，例如 ",(0,s.jsx)(n.a,{href:"https://echarts.apache.org/zh/index.html",target:"_blank",rel:"noopener noreferrer",children:"Echarts"})," 和 ",(0,s.jsx)(n.a,{href:"https://d3js.org/",target:"_blank",rel:"noopener noreferrer",children:"D3"})," 等："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Echarts 官网：",(0,s.jsx)(n.a,{href:"https://echarts.apache.org/zh/index.html",target:"_blank",rel:"noopener noreferrer",children:"https://echarts.apache.org/zh/index.html"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["D3 官网：",(0,s.jsx)(n.a,{href:"https://d3js.org/",target:"_blank",rel:"noopener noreferrer",children:"https://d3js.org/"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"用户更倾向于参与并理解以互动、视觉吸引人的格式呈现的信息，从而提高了内容的价值和有效性。"}),"\n",(0,s.jsx)(n.p,{children:"在 Web 设计中融入 SVG 与 CSS，不仅能提升网站的审美质量，还在创造吸引人、令人难忘的用户体验方面发挥着关键作用。"}),"\n",(0,s.jsxs)(n.h3,{id:"可缩放性与响应式设计",children:["可缩放性与响应式设计",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可缩放性与响应式设计",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"SVG 的可缩放特性使其成为响应式 Web 设计的理想选择。图形和图标能够根据显示区域的大小自由缩放而不失去质量，确保在任何设备上都能呈现清晰、鲜明的视觉效果。"}),"\n",(0,s.jsx)(n.p,{children:"这种适应性通过 CSS 得到了进一步增强。CSS 可用于控制 SVG 元素的大小、颜色及其他属性，使图形能够灵活响应网站的布局和设计需求。"}),"\n",(0,s.jsx)(n.p,{children:"例如 Web 上带有水波纹的 UI 效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["使用 SVG 创建水波纹要比使用 CSS 简单得多。因为 SVG 最大的特性就是可以无限缩放，而且还不会失真。另外就是，可以使用 ",(0,s.jsx)(n.code,{children:"<path>"})," 绘制出任何你想要的水波纹效果。即使你不懂 SVG，你也可以借且诸如 Figma 这样的图形设计软件或在线工具（例如 ",(0,s.jsx)(n.a,{href:"https://getwaves.io/",target:"_blank",rel:"noopener noreferrer",children:"getwaves.io"})," 、",(0,s.jsx)(n.a,{href:"https://www.shapedivider.app/",target:"_blank",rel:"noopener noreferrer",children:"ShapeDriver"})," 和 ",(0,s.jsx)(n.a,{href:"https://haikei.app/",target:"_blank",rel:"noopener noreferrer",children:"Haikei app"})," 等）获得绘制水波纹的 SVG 代码。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["URL：",(0,s.jsx)(n.a,{href:"https://getwaves.io/",target:"_blank",rel:"noopener noreferrer",children:"https://getwaves.io/"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg style="display:none;">\n    <symbol id="one" viewBox="0 0 1440 320" preserveAspectRatio="none">\n        <path fill="white" d="M0,96L1440,320L1440,320L0,320Z" />\n    </symbol>\n    <symbol id="two" viewBox="0 0 1440 320" preserveAspectRatio="none">\n        <path fill="white" d="M0,32L48,37.3C96,43,192,53,288,90.7C384,128,480,192,576,197.3C672,203,768,149,864,138.7C960,128,1056,160,1152,160C1248,160,1344,128,1392,112L1440,96L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z" />\n    </symbol>\n  \n    <symbol id="three" viewBox="0 0 1440 320" preserveAspectRatio="none">\n        <path fill="white" d="M0,128L30,144C60,160,120,192,180,197.3C240,203,300,181,360,192C420,203,480,245,540,245.3C600,245,660,203,720,192C780,181,840,203,900,181.3C960,160,1020,96,1080,80C1140,64,1200,96,1260,122.7C1320,149,1380,171,1410,181.3L1440,192L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z" />\n    </symbol>\n  \n    <symbol id="four" viewBox="0 0 1440 320" preserveAspectRatio="none">\n        <path fill="white" d="M0,192L120,192C240,192,480,192,720,165.3C960,139,1200,85,1320,58.7L1440,32L1440,320L1320,320C1200,320,960,320,720,320C480,320,240,320,120,320L0,320Z" />\n    </symbol>\n  \n    <symbol id="five" viewBox="0 0 1440 320" preserveAspectRatio="none">\n        <path fill="white" d="M0,32L120,69.3C240,107,480,181,720,192C960,203,1200,149,1320,122.7L1440,96L1440,320L1320,320C1200,320,960,320,720,320C480,320,240,320,120,320L0,320Z" />\n    </symbol>\n  \n    <symbol id="six" viewBox="0 0 1440 320" preserveAspectRatio="none">\n        <path fill="rgba(255, 255, 255, .8)" d="M0,32L120,64C240,96,480,160,720,160C960,160,1200,96,1320,64L1440,32L1440,320L1320,320C1200,320,960,320,720,320C480,320,240,320,120,320L0,320Z" />\n    </symbol>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:"上面的 SVG 代码创建了多种不同的形状："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们以 Web 中的卡片为例，你可能需要像下面这样的一个 HTML："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="cards">\n    <div class="card">\n        <figure>\n            <img src="https://picsum.photos/id/188/800/600" alt="">\n            <svg>\n                <use href="#two"></use>\n            </svg>\n        </figure>\n        <figcaption>\n            <p>现代 Web 布局</p>\n        </figcaption>\n    </div>\n    \x3c!-- 其他 Card --\x3e\n</div>\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<figure>"})," 中的 ",(0,s.jsx)(n.code,{children:"<use>"})," 就是引用 ",(0,s.jsx)(n.code,{children:"<symbol>"})," 已实例化的水波纹。接下来，你需要使用一点 CSS 来样式化卡片："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".cards {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(min(100% - 18px, 300px), 1fr));\n    gap: 2rem;\n  \n    .card {\n        display: grid;\n        gap: 2rem;\n        position: relative;\n        box-shadow: 0 5px 20px 2px rgb(0 0 0 / 0.15);\n        min-width: 0;\n        background-color: #fff;\n        border: 1px solid rgba(0, 0, 0, .125);\n        border-radius: .25rem;\n        overflow: hidden;\n        \n        figure {\n            position: relative;\n        }\n        \n        img {\n            display: block;\n            max-width: 100%;\n            aspect-ratio: 4 / 3;\n            border-radius: .25rem .25rem 0 0;\n            object-fit: cover;\n            object-position: center;\n        }\n        \n        svg {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 55px;\n            width: 100%;\n        }\n        \n        figcaption {\n            padding: 0 20px 20px;\n            font-weight: bold;\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["整个布局，使用了 CSS Grid 中的 RAM 布局技术，另外还应用了些新的 CSS 特性，例如 ",(0,s.jsx)(n.code,{children:"aspect-ratio"})," 设置图片的宽高比，",(0,s.jsx)(n.code,{children:"object-fit"})," 和 ",(0,s.jsx)(n.code,{children:"object-position"})," 防止图片拉伸和挤压等。其他的 CSS 对于大家来说，很普通，就不在这里重复阐述！"]}),"\n",(0,s.jsx)(n.p,{children:"你最终看到的效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/oNRbZGR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/oNRbZGR"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"尤其要强调的一点是，在创建不规则 UI 形状和动画方面，CSS 无法与 SVG 媲美。尤其是弹性动画，CSS 根本无法实现的，即便能实现，成本也非常高，灵活性和可维护性都会相当困难。"}),"\n",(0,s.jsxs)(n.p,{children:["以下是 ",(0,s.jsx)(n.a,{href:"https://codepen.io/suez/full/emjwvP",target:"_blank",rel:"noopener noreferrer",children:"@Nikolay Talanov 创建的一个侧边栏动画案例"}),"："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/suez/full/emjwvP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/suez/full/emjwvP"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/suez/full/emjwvP",target:"_blank",rel:"noopener noreferrer",children:"@Nikolay Talanov"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"想象一下，仅依赖 CSS ，你能实现这个效果。然而，注入 SVG 之后，就不再是难事。这可能也是 SVG 最强大功能之一。"}),"\n",(0,s.jsx)(n.p,{children:"此外，SVG 与 CSS 的结合促进了流畅布局的创建，使这些布局能够无缝适应视口变化，提升了在不同屏幕尺寸和分辨率下的用户体验。这种响应性不仅涉及缩放，还在于打造既具交互性又无障碍的内容，吸引用户并满足他们在快节奏数字世界中的期望。"}),"\n",(0,s.jsxs)(n.h3,{id:"使用-svg-和-css-创建交互动画",children:["使用 SVG 和 CSS 创建交互动画",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-svg-和-css-创建交互动画",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"将 SVG 与 CSS 结合的一大亮点是能够创建增强用户参与度的交互动画。"}),"\n",(0,s.jsx)(n.p,{children:"SVG 本质上具有交互性，允许用户输入触发视觉变化或动画。例如下面这个简单的示例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg width="400" height="70" viewBox="0 0 400 70" class="element">\n    <rect id="PinkRect" x="10" y="20" width="30" height="30" fill="pink" id="PinkRect">\n         <animate begin="2s; click" end="widthAnim.end; mouseover" \n         id="widthAnim" attributeName="width" from="30" to="380" dur="5s"  fill="freeze" />\n    </rect>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["粉红色的矩形会在 ",(0,s.jsx)(n.code,{children:"2s"})," 之后播放或用户点击来立刻触发动画播放；而用户鼠标悬停到矩形上时，正在播放的动画会立即停止："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/gOJPmVg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/gOJPmVg"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"虽然上面展示的只是一个简单的交互动画效果，但这种交互性可以显著提升用户体验，使网站更加动态和吸引人。"}),"\n",(0,s.jsxs)(n.p,{children:["在我的小册《",(0,s.jsx)(n.a,{href:"https://s.juejin.cn/ds/i2pbySf1/",target:"_blank",rel:"noopener noreferrer",children:"Web 动画之旅"}),"》中，我多次强调了",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7288940354571599909",target:"_blank",rel:"noopener noreferrer",children:"动画在现代 Web 设计中的关键角色"}),"。动画不仅能引导用户的注意力，还能提供交互反馈，使整体体验更加愉悦。"]}),"\n",(0,s.jsxs)(n.p,{children:["正如上面示例所示，虽然 SVG 自身具备一定的交互动画能力，但相较于 CSS，其功能还是显得略为逊色。首先，从兼容性角度来看，SVG 动画不及 CSS 动画广泛支持。其次，CSS 提供了强大的动画功能，包括",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7292735608995184678",target:"_blank",rel:"noopener noreferrer",children:"关键帧动画"}),"、",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7292735608995184678",target:"_blank",rel:"noopener noreferrer",children:"过渡动画"}),"、",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7308623339038670860",target:"_blank",rel:"noopener noreferrer",children:"路径动画"}),"、",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7308623298618163212",target:"_blank",rel:"noopener noreferrer",children:"视图过渡动画"}),"和",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7307223031717724172",target:"_blank",rel:"noopener noreferrer",children:"滚动驱动动画"}),"等。此外，",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7297493957557092404",target:"_blank",rel:"noopener noreferrer",children:"CSS 还提供了丰富的时间函数"}),"，用于精确控制动画效果。"]}),"\n",(0,s.jsx)(n.p,{children:"这些 CSS 特性使 Web 开发者能够为 SVG 注入更多的生命力，创造从细微的悬停效果到复杂的动画序列，讲述一个故事或阐述一个概念。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"悬停效果"}),"：在鼠标悬停时改变 SVG 元素的外观，例如改变颜色或显示隐藏的细节。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"过渡效果"}),"：在 SVG 状态或样式之间平滑过渡，增强用户交互的体验。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"关键帧动画"}),"：在 SVG 内创建详细的动画，例如沿路径移动元素或改变形状。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["以 Web 中常见的 ",(0,s.jsx)(n.code,{children:"Avatar"})," 组件（用户头像）为例。首先来看一个悬停效果的案例："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/ZENQKNE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZENQKNE"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在这个示例中，用户头像是 SVG 的 ",(0,s.jsx)(n.code,{children:"<image>"})," 元素创建的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<figure class="avatar">\n    <svg viewBox="0 0 1024 1024">\n        <defs>\n            <clipPath id="mask" clipPathUnits="objectBoundingBox">\n                <path d="M1,0.57 C1,0.846,0.699,1,0.349,1 S0.161,0.856,0.161,0.579 S0,0,0.349,0 S1,0.294,1,0.57" class="anim" />\n            </clipPath>\n        </defs>\n\n        <image x="0" y="0" width="100%" height="100%" clip-path="url(#mask)" xlink:href="http://i.pravatar.cc/1024?img=7" />\n    </svg>\n</figure>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["与此同时，在 ",(0,s.jsx)(n.code,{children:"<clipPath>"})," 内嵌入一个 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素，创建了一个不规则的剪切形状。并将该剪切路径应用于 ",(0,s.jsx)(n.code,{children:"<image>"})," 元素上。这样，呈现给你的结果就是一个不规则形状的用户头像："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["接下来，只需要在鼠标悬浮的时候，改变 ",(0,s.jsx)(n.code,{children:"<path>"})," 的 ",(0,s.jsx)(n.code,{children:"d"})," 属性值，并且使用 CSS 的 ",(0,s.jsx)(n.code,{children:"transition"})," 给 ",(0,s.jsx)(n.code,{children:"d"})," 属性设置一个过渡效果。",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/ZENQKNE",target:"_blank",rel:"noopener noreferrer",children:"这样就完成了一个带有交互效果的用户头像"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'.anim {\n    d: path("M1,0.57 C1,0.846,0.699,1,0.349,1 S0.161,0.856,0.161,0.579 S0,0,0.349,0 S1,0.294,1,0.57");\n    transition: d 300ms linear;\n\n    .avatar:hover & {\n        d: path("M0.992,0.557 C0.964,0.854,0.695,1,0.409,1 S0,0.884,0,0.6 S0.418,0,0.705,0 S1,0.274,0.992,0.557");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"我们还可以只使用 SVG 来定义剪切路径，然后应用在用户头像上："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<figure class="avatar">\n  <img src="http://i.pravatar.cc/1024?img=32" />\n</figure>\n\n<svg viewBox="0 0 1024 1024" class="sr-only">\n  <defs>\n    <clipPath id="mask" clipPathUnits="objectBoundingBox">\n      <path d="M1,0.57 C1,0.846,0.699,1,0.349,1 S0.161,0.856,0.161,0.579 S0,0,0.349,0 S1,0.294,1,0.57" class="anim" />\n    </clipPath>\n  </defs>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面所示的 HTML 结构，你需要调整 CSS 选择器的使用，才能触发 ",(0,s.jsx)(n.code,{children:".anim"})," 值过渡："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'img {\n    clip-path: url(#mask);\n}\n\n.anim {\n    d: path("M1,0.57 C1,0.846,0.699,1,0.349,1 S0.161,0.856,0.161,0.579 S0,0,0.349,0 S1,0.294,1,0.57");\n    transition: d 300ms linear;\n}\n\n.avatar:hover ~ svg .anim {\n    d: path("M0.992,0.557 C0.964,0.854,0.695,1,0.409,1 S0,0.884,0,0.6 S0.418,0,0.705,0 S1,0.274,0.992,0.557");\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/qBGbjaX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBGbjaX"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们还可以在 CSS 的 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 中改变 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素的 ",(0,s.jsx)(n.code,{children:"d"})," 属性值，然后通过 ",(0,s.jsx)(n.code,{children:"animation"})," 属性将定义的关键帧动画应用在 ",(0,s.jsx)(n.code,{children:".anim"})," 元素上："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:'@keyframes morph {\n    0%, 100%{ \n        d: path("M1,0.57 C1,0.846,0.699,1,0.349,1 S0.161,0.856,0.161,0.579 S0,0,0.349,0 S1,0.294,1,0.57");\n    }\n    50% {\n        d: path("M0.992,0.557 C0.964,0.854,0.695,1,0.409,1 S0,0.884,0,0.6 S0.418,0,0.705,0 S1,0.274,0.992,0.557");\n    }\n}\n\n.avatar img {\n    clip-path: url(#mask);\n}\n\n\n.anim {\n    animation: morph 5s linear infinite alternate;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"此时，用户头像不断在这两个图形之间变换："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/BaejZZE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaejZZE"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"除此之外，CSS 还可以结合 SVG 的其他特性，比如遮罩和滤镜，创建出更复杂的效果，从而制作出非常吸引人的 UI 效果。例如下面这几个示例，都有 SVG 滤镜的身影："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/v_Bauer/full/WNroMOq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/v_Bauer/full/WNroMOq"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/v_Bauer",target:"_blank",rel:"noopener noreferrer",children:"@Vadim Bauer"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/cobra_winfrey/full/dKMpzO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/cobra_winfrey/full/dKMpzO"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/cobra_winfrey",target:"_blank",rel:"noopener noreferrer",children:"@Adam Kuhn"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/FloTelemaque/full/JEMMVP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/FloTelemaque/full/JEMMVP"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/FloTelemaque",target:"_blank",rel:"noopener noreferrer",children:"@florent"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这些效果只是 CSS 结合 SVG 所能实现的一部分，它们可以使我们的 UI 交互更加有趣。通过这些实际案例的展示，我想你与我有同样的感受。SVG 与 CSS 结合实现的交互动画，不仅能提升网站的视觉吸引力，还能使其更具吸引力和交互性，从而带来更丰富的用户体验。"}),"\n",(0,s.jsxs)(n.h3,{id:"性能与效率",children:["性能与效率",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#性能与效率",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"使用 SVG 搭配 CSS 的另一大优势在于性能。"}),"\n",(0,s.jsx)(n.p,{children:"由于 SVG 是基于数学定义的图形，与光栅图相比，其文件体积通常更小，尤其在处理复杂形状或图标时。这意味着页面加载速度更快，对于提升用户参与度和 SEO 排名至关重要。"}),"\n",(0,s.jsx)(n.p,{children:"同时，CSS 也发挥着重要作用。它可以直接对 SVG 元素进行样式设置，使单个图形能够通过多种方式重新样式化，而无需为每个变体创建并下载独立的图形。这不仅减少了网络传输的数据量，还简化了 Web 资源的维护和更新，使得 Web 开发过程更加高效。"}),"\n",(0,s.jsx)(n.p,{children:"以 Web 上的 Icon 图标为例，通常同一个图标在不同位置会有大小、颜色等样式的变化。在这种情况下，CSS 与 SVG 的结合让 Web 开发者能够轻松应对这些变化，同时在性能上也具有显著优势。通过使用 CSS，我们可以对 SVG 图标进行多样化的样式设置，而无需为每个变体创建和下载独立的图形文件。这不仅提高了开发效率，还减少了网络传输的数据量，优化了页面加载速度。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="icons">\n    <a href="#">\n        <svg class="icon">\n            <use href="#twitter" />\n        </svg>\n    </a>\n    <a href="#">\n        <svg class="icon">\n            <use href="#facebook" />\n        </svg>\n    </a>\n    <a href="#">\n        <svg class="icon">\n            <use href="#linkedin" />\n        </svg>\n    </a>\n</div>\n\n\n<svg class="sr-only">\n    <symbol id="twitter" viewBox="0 0 512 512">\n        <path  d="M459.4 151.7c.3 4.5 .3 9.1 .3 13.6 0 138.7-105.6 298.6-298.6 298.6-59.5 0-114.7-17.2-161.1-47.1 8.4 1 16.6 1.3 25.3 1.3 49.1 0 94.2-16.6 130.3-44.8-46.1-1-84.8-31.2-98.1-72.8 6.5 1 13 1.6 19.8 1.6 9.4 0 18.8-1.3 27.6-3.6-48.1-9.7-84.1-52-84.1-103v-1.3c14 7.8 30.2 12.7 47.4 13.3-28.3-18.8-46.8-51-46.8-87.4 0-19.5 5.2-37.4 14.3-53 51.7 63.7 129.3 105.3 216.4 109.8-1.6-7.8-2.6-15.9-2.6-24 0-57.8 46.8-104.9 104.9-104.9 30.2 0 57.5 12.7 76.7 33.1 23.7-4.5 46.5-13.3 66.6-25.3-7.8 24.4-24.4 44.8-46.1 57.8 21.1-2.3 41.6-8.1 60.4-16.2-14.3 20.8-32.2 39.3-52.6 54.3z" />\n    </symbol>\n    <symbol id="facebook" viewBox="0 0 512 512">\n        <path d="M512 256C512 114.6 397.4 0 256 0S0 114.6 0 256C0 376 82.7 476.8 194.2 504.5V334.2H141.4V256h52.8V222.3c0-87.1 39.4-127.5 125-127.5c16.2 0 44.2 3.2 55.7 6.4V172c-6-.6-16.5-1-29.6-1c-42 0-58.2 15.9-58.2 57.2V256h83.6l-14.4 78.2H287V510.1C413.8 494.8 512 386.9 512 256h0z" />\n    </symbol>\n    <symbol id="linkedin" viewBox="0 0 448 512">\n        <path d="M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z" />\n    </symbol>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".icons {\n    --text-color: #09f;\n    display: flex;\n    align-items: center;\n    gap: 2rem;\n\n    a {\n        color: var(--text-color);\n        transition: color 0.2s ease-in-out;\n\n        &:is(:hover, :focus-visible) {\n            --text-color: #127abe;\n    \n            .icon {\n                scale: 1.35;\n            }\n        }\n\n        &:active {\n            --text-color: #0f97f0;\n    \n            .icon {\n                scale: 0.85;\n            }\n        }\n    }\n\n    svg {\n        dispaly: block;\n        width: 88px;\n        aspect-ratio: 1;\n        fill: currentColor;\n        transform-box: fill-box;\n        transform-origin: center;\n        transition: all 0.2s ease-in-out;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["首先使用 SVG 的 ",(0,s.jsx)(n.code,{children:"<symbol>"})," 创建了一个 SVG 雪碧图，这种方法可以将多个 SVG 图标合并到一个文件中，它可以减少 HTTP 的请求数量，从而提高页面加载速度和性能。然后使用 CSS，在 ",(0,s.jsx)(n.code,{children:":hover"})," 和 ",(0,s.jsx)(n.code,{children:":active"})," 状态改变图标的颜色和大小："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/KKLVvPN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKLVvPN"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这种技术不仅优化了性能，还增强了网页图形的灵活性和可扩展性，使其成为现代 Web 开发中的热门选择。"}),"\n",(0,s.jsxs)(n.h3,{id:"提升-web-可访问性",children:["提升 Web 可访问性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#提升-web-可访问性",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"可访问性是 Web 开发中的关键因素，确保所有用户都能使用内容，包括残障人士。正确实施 SVG 可以显著增强 Web 内容的可访问性。"}),"\n",(0,s.jsxs)(n.p,{children:["通过在 SVG 元素中包含标题（",(0,s.jsx)(n.code,{children:"<title>"}),"）和描述（",(0,s.jsx)(n.code,{children:"<desc>"}),"），图形内容变得对屏幕阅读器更加友好，为视觉障碍用户提供必要的上下文和含义。此外，CSS 提供的样式灵活性能够帮助创建高对比度模式和其他可访问性功能，使 SVG 内容更加易读和人性化。"]}),"\n",(0,s.jsx)(n.p,{children:"在集成 SVG 和 CSS 时优先考虑可访问性，开发者可以打造更具包容性的 Web 体验，满足更广泛受众的需求，并符合 Web 可访问性的最佳实践和法律要求。"}),"\n",(0,s.jsxs)(n.h3,{id:"兼容性和跨浏览器支持",children:["兼容性和跨浏览器支持",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#兼容性和跨浏览器支持",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"确保 Web 内容在多样化的环境中正确显示一直是 Web 开发者面临的持久挑战。SVG 与 CSS 的结合提供了强大的兼容性和跨浏览器支持，极大地缓解了 Web 设计碎片化带来的困扰。"}),"\n",(0,s.jsx)(n.p,{children:"SVG 的大多数特性都得到了所有现代网络浏览器（包括 Chrome、Firefox、Safari 和 Edge）的支持。这种广泛的兼容性意味着基于 SVG 的图形和图标在不同平台上将保持一致的外观，无需采用特定于浏览器的技巧或解决方法。作为 Web 样式语言的 CSS 也得到了普遍支持，使得 SVG 能够无缝融入网页设计工作流程。"}),"\n",(0,s.jsx)(n.p,{children:"尽管 SVG 具有广泛的兼容性，但为了确保最佳的用户体验，对其进行跨浏览器兼容性优化仍然是必要的。对于不支持 SVG 的老式浏览器，可以通过 CSS 实施回退机制，确保不遗漏任何用户。这意味着，开发者可以利用 CSS 增强 SVG 的功能，例如增加悬停状态或在支持有限的浏览器中实现优雅降级的动画。这样一来，现代浏览器的用户能够享受到完整的交互特性，而使用较旧浏览器的用户仍能访问核心内容和功能。"}),"\n",(0,s.jsx)(n.p,{children:"总的来说，SVG 与 CSS 的结合为解决跨浏览器兼容性这一挑战提供了可靠的解决方案，使得 Web 开发者能够创建既现代又兼容的 Web 内容，满足各种用户的需求。"}),"\n",(0,s.jsxs)(n.h3,{id:"svg-和-css-的未来趋势",children:["SVG 和 CSS 的未来趋势",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-和-css-的未来趋势",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Web 设计与开发领域不断发展，新趋势和技术正塑造着我们创建数字内容的方式。SVG 和 CSS 在现代 Web 设计和开发中已处于核心地位，未来它们将扮演更加重要的角色。"}),"\n",(0,s.jsx)(n.p,{children:"随着 Web 标准的发展和浏览器功能的扩展，SVG 和 CSS 在创建沉浸式、交互性及视觉震撼的 Web 产品方面展现出无限潜力。例如："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"高级动画"}),"：预期会看到更多由 CSS 控制的复杂 SVG 动画，提供更丰富的交互体验。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"增强的交互性"}),"：随着浏览器对 SVG 和 CSS 的支持越来越好，Web 设计会变得更加互动。无论是做数据可视化还是开发游戏，使用 SVG 都会更加方便。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"可访问性和性能"}),"：未来的趋势将更加重视可访问性和性能，SVG 和 CSS 在提供既快速又对所有用户可访问的内容方面将发挥关键作用。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"总的来说，SVG 和 CSS 的不断进步将继续推动 Web 设计与开发的创新，为用户提供更优质的体验。"}),"\n",(0,s.jsxs)(n.h2,{id:"拥抱-svg-与-css-的未来",children:["拥抱 SVG 与 CSS 的未来",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#拥抱-svg-与-css-的未来",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"SVG 与 CSS 的集成标志着 Web 设计与开发的一大进步。这种强大的组合为创建响应迅速、高效、视觉效果惊艳且对广大用户友好的 Web 网站和应用铺平了道路。"}),"\n",(0,s.jsx)(n.p,{children:"正如前面所述，SVG 搭配 CSS 的优势不仅仅在于美学，更在 Web 性能、可访问性、跨浏览器兼容性以及 SEO 等方面提供了实质性的益处。"}),"\n",(0,s.jsx)(n.p,{children:"随着 Web 变得越来越互动和注重视觉效果，对可缩放和响应式图形的需求也不断增加。SVG 和 CSS 正好满足了这种需求，为我们提供了创建美观实用的动态 Web 体验的工具。"}),"\n",(0,s.jsx)(n.p,{children:"随着技术的发展，SVG 和 CSS 的能力也将随之增强，为 Web 设计和开发提供更多创新的可能。最为关键的是，SVG 与 CSS 提供了无与伦比的可缩放性和响应性，确保 Web 内容在所有设备和屏幕尺寸上都能保持清晰。其次，优化 SVG 和 CSS 对于提升 Web 性能和用户体验至关重要。未来的 Web 设计和开发将会看到 SVG 与新技术的更深度融合，进一步拓展在线应用的可能性。"}),"\n",(0,s.jsx)(n.p,{children:"总之，SVG 与 CSS 的优势显著，为 Web 设计和开发的未来奠定了坚实基础。随着我们不断拓展数字创意的极限，SVG 和 CSS 无疑将在塑造 Web 体验中发挥关键作用。对于 Web 设计师和开发者来说，接纳这些技术不仅仅是跟随当前趋势，更是在为下一代 Web 设计奠定舞台，可能性如同我们的想象力一样无穷无尽。"})]})}function z(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(q,{...e})}):q(e)}let P=z;z.__RSPRESS_PAGE_META={},z.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F28-%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%9ASVG%20%E4%B8%8E%20Web%20%E5%BC%80%E5%8F%91%E4%B9%8B%20SVG%20vs.%20CSS.md"]={toc:[{text:"为什么 SVG 和 CSS 是绝配？",id:"为什么-svg-和-css-是绝配",depth:2},{text:"SVG 和 CSS：你中有我，我中有你",id:"svg-和-css你中有我我中有你",depth:3},{text:"增强视觉吸引力和设计的灵活性",id:"增强视觉吸引力和设计的灵活性",depth:3},{text:"创造沉浸式的用户体验",id:"创造沉浸式的用户体验",depth:3},{text:"可缩放性与响应式设计",id:"可缩放性与响应式设计",depth:3},{text:"使用 SVG 和 CSS 创建交互动画",id:"使用-svg-和-css-创建交互动画",depth:3},{text:"性能与效率",id:"性能与效率",depth:3},{text:"提升 Web 可访问性",id:"提升-web-可访问性",depth:3},{text:"兼容性和跨浏览器支持",id:"兼容性和跨浏览器支持",depth:3},{text:"SVG 和 CSS 的未来趋势",id:"svg-和-css-的未来趋势",depth:3},{text:"拥抱 SVG 与 CSS 的未来",id:"拥抱-svg-与-css-的未来",depth:2}],title:"28-实战篇：SVG 与 Web 开发之 SVG vs. CSS",headingTitle:"28-实战篇：SVG 与 Web 开发之 SVG vs. CSS",frontmatter:{}}}}]);