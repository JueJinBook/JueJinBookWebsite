"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["58154"],{512715:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var s=r(552676),d=r(740453);let c=r.p+"static/image/6c00330f4c9cbf7c27ddf02e2c2bc8c3.06cf4b09.webp",t=r.p+"static/image/4da6768b6213cd8a911b4ed254e68056.5f2c2919.webp";function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",img:"img",pre:"pre",strong:"strong",blockquote:"blockquote"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"10桌面应用开发需要掌握哪些数据库知识上",children:["10.桌面应用开发需要掌握哪些数据库知识（上）？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10桌面应用开发需要掌握哪些数据库知识上",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们在上一节中成功引入了 better-sqlite 和 knex.js 库，现在我们有能力把业务数据存储到数据库中了，也有能力从数据库中读取业务数据了，但是对于一个前端开发人员来说，操作 SQLite 这种关系型数据库可能会有无从下手的感觉，本节我们就介绍一下在开发桌面应用的过程中需要掌握哪些最基本的数据库操作知识。"}),"\n",(0,s.jsx)(n.p,{children:"如果你对数据库相关的知识不熟悉，而且没找到适合你的 SQLite 学习资料，那么你不妨看看 MySQL 的资料，这两个数据库在很多基础知识上是很相似的。"}),"\n",(0,s.jsxs)(n.p,{children:["关于使用",(0,s.jsx)(n.code,{children:"Knex.js"}),"操作数据库的知识，请参阅",(0,s.jsx)(n.code,{children:"Knex.js"}),"官方文档：",(0,s.jsx)(n.a,{href:"https://knexjs.org/guide/",target:"_blank",rel:"noopener noreferrer",children:"Knex.js Doc"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"访问数据库",children:["访问数据库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#访问数据库",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["到目前为止，我们需要的工具还没有准备好，你需要一件趁手的数据库设计器，这里我推荐",(0,s.jsx)(n.a,{href:"https://sqliteexpert.com/",target:"_blank",rel:"noopener noreferrer",children:"SQLite Expert"}),"，个人版是免费的，如下图所示是我使用这个工具设计的一个数据库："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"7.1.png"})}),"\n",(0,s.jsx)(n.p,{children:"数据库中有两张表 Message 和 Chat，截图是 Chat 表的列（后面的章节我们还会用到这个数据库），本节我们还不涉及到多表操作，所以暂时只介绍 Chat 表的内容。"}),"\n",(0,s.jsxs)(n.p,{children:["数据库设计好之后，我们要创建一个数据库访问类，由于主进程的逻辑和渲染进程的逻辑都有可能会访问数据库，所以我们把数据库访问类放置在",(0,s.jsx)(n.code,{children:"src\\common"}),"目录下，方便两个进程的逻辑代码使用这个类，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//src\\common\\db.ts\nimport knex, { Knex } from "knex";\nimport fs from "fs";\nimport path from "path";\nlet dbInstance: Knex;\nif (!dbInstance) {\n  let dbPath = process.env.APPDATA || (process.platform == "darwin" ? process.env.HOME + "/Library/Preferences" : process.env.HOME + "/.local/share");\n  dbPath = path.join(dbPath, "electron-jue-jin/db.db");\n  let dbIsExist = fs.existsSync(dbPath);\n  if (!dbIsExist) {\n    let resourceDbPath = path.join(process.execPath, "../resources/db.db");\n    fs.copyFileSync(resourceDbPath, dbPath);\n  }\n  dbInstance = knex({\n    client: "better-sqlite3",\n    connection: { filename: dbPath },\n    useNullAsDefault: true,\n  });\n}\nexport let db = dbInstance;\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这段代码导出一个数据库访问对象，",(0,s.jsx)(n.strong,{children:"只有第一次引入这个数据库访问对象的时候才会执行此对象的初始化逻辑"}),"，也就是说，无论我们在多少个组件中引入这个数据库访问对象，它只会被初始化一次，但这个约束只局限在一个进程内，也就是说对于整个应用而言，",(0,s.jsx)(n.strong,{children:"主进程有一个 db 实例，渲染进程也有一个 db 实例，两个实例是完全不同的"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"由于渲染进程内的数据库访问对象和主进程内的数据库访问对象不是同一个对象，所以会有并发写入数据的问题，你需要控制好你的业务逻辑，避免两个进程在同一时间写入相同的业务数据。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"SQLite 不支持并发写入数据，两个或两个以上的写入操作同时执行时，只有一个写操作可以成功执行，其他写操作会失败。并发读取数据没有问题。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["第一次初始化数据库链接对象时，我们会检查",(0,s.jsx)(n.code,{children:"C:\\Users\\[username]\\AppData\\Roaming\\[appname]\\db.db"}),"文件是否存在，如果不存在，我们就从应用程序安装目录",(0,s.jsx)(n.code,{children:"C:\\Program Files\\[appname]\\resources\\db.db"}),"拷贝一份到该路径下，所以",(0,s.jsx)(n.strong,{children:"我们要提前把数据库设计好，基础数据也要初始化好，制作安装包的时候，把数据库文件打包到安装包里"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们是通过为",(0,s.jsx)(n.code,{children:"plugins\\buildPlugin.ts"}),"增加配置来把数据库文件打包到安装包内的，其中关键的配置代码如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"//plugins\\buildPlugin.ts\n//buildInstaller方法内option.config的一个属性\nextraResources: [{ from: `./src/common/db.db`, to: `./` }],\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这是 electron-builder 的一项配置：",(0,s.jsx)(n.code,{children:"extraResources"}),"，可以让开发者为安装包指定额外的资源文件，electron-builder 打包应用时会把这些资源文件附加到安装包内，当用户安装应用程序时，这些资源会释放在安装目录的 resources\\子目录下。"]}),"\n",(0,s.jsxs)(n.p,{children:["关于",(0,s.jsx)(n.code,{children:"extraResources"}),"的详细配置信息请参阅",(0,s.jsx)(n.a,{href:"https://www.electron.build/configuration/contents.html#filesetto",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["可能有同学会问，为什么要如此麻烦把数据库拷贝到",(0,s.jsx)(n.code,{children:"C:\\Users\\[username]\\AppData\\Roaming\\[appname]\\"}),"目录下再访问，为什么不直接访问安装目录下的数据库文件呢？这是因为",(0,s.jsx)(n.strong,{children:"当用户升级应用程序时安装目录下的文件都会被删除，因为我们可能会在数据库中放置很多用户数据，这样的话每次升级应用用户这些数据就都没了"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们假定数据库是整个应用的核心组件，没有它数据库应用程序无法正常运行，所以初始化数据库的逻辑都是同步操作（fs.copyFileSync），注意这类以 Sync 结尾的方法都是同步操作，它们是会阻塞 JavaScript 的执行线程的，也就是说在它们执行过程中，其他任何操作都会处于阻塞状态，比如以 setInterval 注册的定时器不会按照预期执行，只有等同步操作执行完成之后 JavaScript 的执行线程才会继续执行被阻塞的方法，所以",(0,s.jsx)(n.strong,{children:"应用中一定要谨慎使用同步操作"}),"。除了 Node.js 提供的类似 fs.copyFileSync 这样的方法外，还有 Electron 提供的 dialog.showOpenDialogSync 这样的方法，好在同步方法一般都有对应的异步方法来替代。"]}),"\n",(0,s.jsx)(n.p,{children:"实际上对于真实的产品来说，不一定在这里使用同步操作，最好根据你的应用程序的情况来实现这部分逻辑，在需要使用数据库之前把数据库初始化好即可。"}),"\n",(0,s.jsx)(n.p,{children:"在应用程序开发调试阶段，开发者可以先把设计好的数据库文件放置在目标路径 AppData\\Roaming[appname]\\ 下，这样调试应用就会方便很多。"}),"\n",(0,s.jsxs)(n.p,{children:["db.ts 文件导出的是一个 ",(0,s.jsx)(n.code,{children:"Knex"})," 类型的对象，初始化这个对象时，我们传入了一个配置对象，配置对象的 client 属性代表着使用什么模块访问数据库，这里我们要求 Knex 使用",(0,s.jsx)(n.code,{children:"better-sqlite3"}),"访问数据库，Knex 支持很多数据库，比如",(0,s.jsx)(n.code,{children:"MySql"}),"、",(0,s.jsx)(n.code,{children:"Oracle"}),"、",(0,s.jsx)(n.code,{children:"SqlServer"}),"等，都有对应的数据库访问模块。",(0,s.jsx)(n.strong,{children:"由于 SQLite 是一个客户端数据库，所以我们只要把数据库的本地路径告知 Knex 即可，这个属性是通过配置对象的 connection 属性提供的"}),"。配置对象的 useNullAsDefault 属性告知 Knex 把开发者未明确提供的数据配置为 Null。"]}),"\n",(0,s.jsx)(n.p,{children:"接下来我们就尝试使用这个数据库访问对象把 Chat 表的数据检索出来，代码如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// src\\renderer\\main.ts\nimport { db } from "../common/db";\ndb("Chat")\n  .first()\n  .then((obj) => {\n    console.log(obj);\n  });\n'})}),"\n",(0,s.jsx)(n.p,{children:"在这段代码中，我们首先创建了一个数据库连接对象 db，接着使用这个对象读取 Chat 表里的第一行记录，数据读取成功后把这行数据打印到控制台。"}),"\n",(0,s.jsxs)(n.h2,{id:"数据库的基本操作增加数据",children:["数据库的基本操作：增加数据",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据库的基本操作增加数据",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在上一节中我们创建了聊天会话表，值得注意的是这个表的 id 字段是表的主键，主键是不允许重复的，这也是为什么我们使用",(0,s.jsx)(n.code,{children:"crypto.randomUUID()"}),"生成主键的原因（详见：",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7152717638173966349/section/7152724650118610951",target:"_blank",rel:"noopener noreferrer",children:"《如何引入 pinia 并管控应用的数据状态》"}),"）。"]}),"\n",(0,s.jsx)(n.p,{children:"先来看增加一行数据的操作，代码如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//src\\renderer\\Window\\WindowMain\\Contact.vue\nlet insertData = async () => {\n  let model = new ModelChat();\n  model.fromName = "聊天对象";\n  model.sendTime = Date.now();\n  model.lastMsg = "这是此会话的最后一条消息";\n  model.avatar = `https://pic3.zhimg.com/v2-306cd8f07a20cba46873209739c6395d_im.jpg?source=32738c0c`;\n  await db("Chat").insert(model);\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["这段代码中用到了我们之前定义的",(0,s.jsx)(n.code,{children:"ModelChat"}),"对象，这个",(0,s.jsx)(n.strong,{children:"对象所拥有的属性与数据库表中的列是同名的"}),"，这样",(0,s.jsx)(n.code,{children:'db("Chat").insert(model)'}),"执行时，",(0,s.jsx)(n.code,{children:"model"}),"对象中每个属性所持有的数据就会被插入对应的表的列中。"]}),"\n",(0,s.jsx)(n.p,{children:"如果要在同一张表中增加多行数据，那么可以直接把一个数组提交给数据库，代码如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//src\\renderer\\Window\\WindowMain\\Contact.vue\nlet insertMultiData = async () => {\n  let result = [];\n  for (let i = 0; i < 10; i++) {\n    let model = new ModelChat();\n    model.fromName = "聊天对象" + i;\n    model.sendTime = Date.now();\n    model.lastMsg = "这是此会话的最后一条消息" + i;\n    model.avatar = `https://pic3.zhimg.com/v2-306cd8f07a20cba46873209739c6395d_im.jpg?source=32738c0c`;\n    result.push(model);\n  }\n  result[5].isSelected = true;\n  await db("Chat").insert(result);\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"最终数据库中的数据如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"7.2.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"数据的基本操作查询数据",children:["数据的基本操作：查询数据",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据的基本操作查询数据",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"查询数据的代码如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//src\\renderer\\Window\\WindowMain\\Contact.vue\nlet selectData = async () => {\n  let data = await db("Chat").where({ id: `256d6532-fcfe-4b81-a3f8-ee940f2de3e3` }).first();\n  console.log(data);\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["在上面的代码中，我们通过",(0,s.jsx)(n.code,{children:"where"}),"方法定位 id 为",(0,s.jsx)(n.code,{children:"256d6532-fcfe-4b81-a3f8-ee940f2de3e3"}),"的数据行，由于 id 是唯一的，所以我们这个查询只会得到一行记录。"]}),"\n",(0,s.jsxs)(n.p,{children:["但是 knex 事先无法知道查询结果的数量，所以任何查询都将返回一个数据列表，我们使用",(0,s.jsx)(n.code,{children:"first"}),"方法得到数据列表的第一行。"]}),"\n",(0,s.jsxs)(n.p,{children:["knex 提供了很多查询方法，比如：",(0,s.jsx)(n.code,{children:"whereBetween"}),"、",(0,s.jsx)(n.code,{children:"whereLike"}),"、",(0,s.jsx)(n.code,{children:"whereIn"}),"等，这里不再赘述，你可以自行查阅 knex 官网。"]}),"\n",(0,s.jsxs)(n.h2,{id:"数据的基本操作修改数据",children:["数据的基本操作：修改数据",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据的基本操作修改数据",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"修改数据的代码如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//src\\renderer\\Window\\WindowMain\\Contact.vue\nlet updateData = async () => {\n  let data = await db("Chat").update({ fromName: "三岛由纪夫", lastMsg: "就在刀刃猛然刺入腹部的瞬间，一轮红日在眼睑背面粲然升了上来。" }).where({ id: `256d6532-fcfe-4b81-a3f8-ee940f2de3e3` });\n  console.log(data);\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["我们使用 update 方法来修改数据库中的数据，哪些字段需要更新提供哪些字段的值即可。",(0,s.jsx)(n.strong,{children:"如果没有 where 方法确定更新范围，那么整个表的数据都将被修改掉"}),"。(数据库操作返回的值 data 为受影响的行数。)"]}),"\n",(0,s.jsxs)(n.h2,{id:"数据的基本操作删除数据",children:["数据的基本操作：删除数据",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据的基本操作删除数据",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"删除数据的代码如下所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'//src\\renderer\\Window\\WindowMain\\Contact.vue\nlet deleteData = async () => {\n  let data = await db("Chat").where({ id: `256d6532-fcfe-4b81-a3f8-ee940f2de3e3` }).delete();\n  console.log(data);\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"我们使用 delete 方法删除数据库中的数据，同样需要使用 where 方法确定删除范围，不然整个表的数据都将被删除（数据库操作返回的值 data 为受影响的行数）。"}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本节我们介绍了一些数据库操作的基础知识，在正式操作数据库中的数据之前，我们首先介绍如何把数据库文件放置在终端用户的数据目录下。这是通过 electron-builder 的 extraResources 配置完成的。在这部分我们还介绍了为什么开发者要谨慎使用 Node.js 和 Electron 提供的同步接口。"}),"\n",(0,s.jsx)(n.p,{children:"接着我们介绍了如何建立数据库连接对象，而且还介绍了主进程和渲染进程并发写入数据库时要注意的问题。"}),"\n",(0,s.jsx)(n.p,{children:"最后我们介绍了如何使用 Knex.js 模块完成数据库基本的增删改查操作，这部分内容相对简单，主要带领大家熟悉 Knex 链式访问数据的操作。"}),"\n",(0,s.jsx)(n.p,{children:"很显然，单单这些数据库知识是不够完成一个复杂的应用的，我将在下一节向你传递一些更复杂的数据库操作知识。敬请期待。"}),"\n",(0,s.jsxs)(n.h2,{id:"源码",children:["源码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#源码",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本节示例代码请通过如下地址自行下载："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://gitee.com/horsejs_admin/electron-jue-jin/tree/db",target:"_blank",rel:"noopener noreferrer",children:"源码仓储"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["Electron%20%2B%20Vue%203%20%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%2F10.%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9F.md"]={toc:[{text:"访问数据库",id:"访问数据库",depth:2},{text:"数据库的基本操作：增加数据",id:"数据库的基本操作增加数据",depth:2},{text:"数据的基本操作：查询数据",id:"数据的基本操作查询数据",depth:2},{text:"数据的基本操作：修改数据",id:"数据的基本操作修改数据",depth:2},{text:"数据的基本操作：删除数据",id:"数据的基本操作删除数据",depth:2},{text:"总结",id:"总结",depth:2},{text:"源码",id:"源码",depth:2}],title:"10.桌面应用开发需要掌握哪些数据库知识（上）？",headingTitle:"10.桌面应用开发需要掌握哪些数据库知识（上）？",frontmatter:{}}}}]);