"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["94126"],{862548:function(e,n,r){r.r(n),r.d(n,{default:()=>t});var s=r(552676),d=r(740453);let o=r.p+"static/image/2da5995b7422a9f21acb5e84f4c1ca97.11a08db6.webp",c=r.p+"static/image/7fae953dd92cdcc2699a8e7504b56021.310b6ba9.webp",l=r.p+"static/image/4453b6160e95c471b786b455ea1c9687.171741a2.webp";function i(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",strong:"strong",em:"em",ul:"ul",li:"li",img:"img",h2:"h2",code:"code",ol:"ol",pre:"pre"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"8使用-webpack-构建微前端应用",children:["8.使用 Webpack 构建微前端应用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8使用-webpack-构建微前端应用",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Module Federation 通常译作“",(0,s.jsx)(n.strong,{children:"模块联邦"}),"”，是 Webpack 5 新引入的一种远程模块动态加载、运行技术。MF 允许我们将原本单个巨大应用按我们理想的方式拆分成多个体积更小、职责更内聚的小应用形式，理想情况下各个应用能够实现独立部署、独立开发(不同应用甚至允许使用不同技术栈)、团队自治，从而降低系统与团队协作的复杂度 —— 没错，这正是所谓的微前端架构。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["An architectural style where independently deliverable frontend applications are composed into a greater whole —— 摘自《",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://martinfowler.com/articles/micro-frontends.html",target:"_blank",rel:"noopener noreferrer",children:"Micro Frontends"})}),"》。"]})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["英文社区对 Webpack Module Federation 的响应非常热烈，甚至被誉为“",(0,s.jsx)(n.a,{href:"https://medium.com/swlh/webpack-5-module-federation-a-game-changer-to-javascript-architecture-bcdd30e02669",target:"_blank",rel:"noopener noreferrer",children:"A game-changer in JavaScript architecture"}),"”，相对而言国内对此热度并不高，这一方面是因为 MF 强依赖于 Webpack5，升级成本有点高；另一方面是国内已经有一些成熟微前端框架，例如 ",(0,s.jsx)(n.a,{href:"https://qiankun.umijs.org/zh/guide",target:"_blank",rel:"noopener noreferrer",children:"qiankun"}),"。不过我个人觉得 MF 有不少实用性强，非常值得学习、使用的特性，包括："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"应用可按需导出若干模块，这些模块最终会被单独打成模块包，功能上有点像 NPM 模块；"}),"\n",(0,s.jsx)(n.li,{children:"应用可在运行时基于 HTTP(S) 协议动态加载其它应用暴露的模块，且用法与动态加载普通 NPM 模块一样简单；"}),"\n",(0,s.jsx)(n.li,{children:"与其它微前端方案不同，MF 的应用之间关系平等，没有主应用/子应用之分，每个应用都能导出/导入任意模块；"}),"\n",(0,s.jsx)(n.li,{children:"等等。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["图片摘自：《",(0,s.jsx)(n.a,{href:"https://www.lumin.tech/articles/webpack-module-federation/#%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9D%97",target:"_blank",rel:"noopener noreferrer",children:"Webpack 5 之 模块联合（Module Federation）"}),"》"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"简单示例",children:["简单示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简单示例",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Module Federation 的基本逻辑是一端导出模块，另一端导入、使用模块，实现上两端都依赖于 Webpack 5 内置的 ",(0,s.jsx)(n.code,{children:"ModuleFederationPlugin"})," 插件："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["对于模块生成方，需要使用 ",(0,s.jsx)(n.code,{children:"ModuleFederationPlugin"})," 插件的 ",(0,s.jsx)(n.code,{children:"expose"})," 参数声明需要导出的模块列表；"]}),"\n",(0,s.jsxs)(n.li,{children:["对于模块使用方，需要使用 ",(0,s.jsx)(n.code,{children:"ModuleFederationPlugin"})," 插件的 ",(0,s.jsx)(n.code,{children:"remotes"})," 参数声明需要从哪些地方导入远程模块。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["接下来，我们按这个流程一步步搭建一个简单的 Webpack Module Federation 示例，相关代码已上传到 ",(0,s.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/HEAD/MF-basic",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。首先介绍一下示例文件结构："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"MF-basic\n├─ app-1\n│  ├─ dist\n│  │  ├─ ...\n│  ├─ package.json\n│  ├─ src\n│  │  ├─ main.js\n│  │  ├─ foo.js\n│  │  └─ utils.js\n│  └─ webpack.config.js\n├─ app-2\n│  ├─ dist\n│  │  ├─ ...\n│  ├─ package.json\n│  ├─ src\n│  │  ├─ bootstrap.js\n│  │  └─ main.js\n│  ├─ webpack.config.js\n├─ lerna.json\n└─ package.json\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["提示：为简化依赖管理，示例引入 ",(0,s.jsx)(n.a,{href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer",children:"lerna"})," 实现 Monorepo 策略，不过这与文章主题无关，这里不做过多介绍。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["其中，",(0,s.jsx)(n.code,{children:"app-1"}),"、",(0,s.jsx)(n.code,{children:"app-2"})," 是两个独立应用，分别有一套独立的 Webpack 构建配置，类似于微前端场景下的“微应用”概念。在本示例中，",(0,s.jsx)(n.code,{children:"app-1"})," 负责导出模块 —— 类似于子应用；",(0,s.jsx)(n.code,{children:"app-2"})," 负责使用这些模块 —— 类似于主应用。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们先看看模块导出方 —— 也就是 ",(0,s.jsx)(n.code,{children:"app-1"})," 的构建配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const path = require("path");\nconst { ModuleFederationPlugin } = require("webpack").container;\n\nmodule.exports = {\n  mode: "development",\n  devtool: false,\n  entry: path.resolve(__dirname, "./src/main.js"),\n  output: {\n    path: path.resolve(__dirname, "./dist"),\n    // 必须指定产物的完整路径，否则使用方无法正确加载产物资源\n    publicPath: `http://localhost:8081/dist/`,\n  },\n  plugins: [\n    new ModuleFederationPlugin({\n      // MF 应用名称\n      name: "app1",\n      // MF 模块入口，可以理解为该应用的资源清单\n      filename: `remoteEntry.js`,\n      // 定义应用导出哪些模块\n      exposes: {\n        "./utils": "./src/utils",\n        "./foo": "./src/foo",\n      },\n    }),\n  ],\n  // MF 应用资源提供方必须以 http(s) 形式提供服务\n  // 所以这里需要使用 devServer 提供 http(s) server 能力\n  devServer: {\n    port: 8081,\n    hot: true,\n  },\n};\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["提示：Module Federation 依赖于 Webpack5 内置的 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/plugins/module-federation-plugin/",target:"_blank",rel:"noopener noreferrer",children:"ModuleFederationPlugin"})," 实现模块导入导出功能。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["作用模块导出方，",(0,s.jsx)(n.code,{children:"app-1"})," 的配置逻辑可以总结为："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["需要使用 ",(0,s.jsx)(n.code,{children:"ModuleFederationPlugin"})," 的 ",(0,s.jsx)(n.code,{children:"exposes"})," 项声明哪些模块需要被导出；使用 ",(0,s.jsx)(n.code,{children:"filename"})," 项定义入口文件名称；"]}),"\n",(0,s.jsxs)(n.li,{children:["需要使用 ",(0,s.jsx)(n.code,{children:"devServer"})," 启动开发服务器能力。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.code,{children:"ModuleFederationPlugin"})," 插件后，Webpack 会将 ",(0,s.jsx)(n.code,{children:"exposes"})," 声明的模块分别编译为独立产物，并将产物清单、MF 运行时等代码打包进 ",(0,s.jsx)(n.code,{children:"filename"})," 定义的",(0,s.jsx)(n.strong,{children:"应用入口文件"}),"(Remote Entry File)中。例如 ",(0,s.jsx)(n.code,{children:"app-1"})," 经过 Webpack 编译后，将生成如下产物："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"MF-basic\n├─ app-1\n│  ├─ dist\n│  │  ├─ main.js\n│  │  ├─ remoteEntry.js\n│  │  ├─ src_foo_js.js\n│  │  └─ src_utils_js.js\n│  ├─ src\n│  │  ├─ ...\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"main.js"})," 为整个应用的编译结果，此处可忽略；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src_utils_js.js"})," 与 ",(0,s.jsx)(n.code,{children:"src_foo_js.js"})," 分别为 ",(0,s.jsx)(n.code,{children:"exposes"})," 声明的模块的编译产物；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"remoteEntry.js"})," 是 ",(0,s.jsx)(n.code,{children:"ModuleFederationPlugin"})," 插件生成的应用入口文件，包含模块清单、MF 运行时代码。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["接下来继续看看模块导入方 —— 也就是 ",(0,s.jsx)(n.code,{children:"app-2"})," 的配置方法："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const path = require("path");\nconst HtmlWebpackPlugin = require("html-webpack-plugin");\nconst { ModuleFederationPlugin } = require("webpack").container;\n\nmodule.exports = {\n  mode: "development",\n  devtool: false,\n  entry: path.resolve(__dirname, "./src/main.js"),\n  output: {\n    path: path.resolve(__dirname, "./dist"),\n  },\n  plugins: [\n    // 模块使用方也依然使用 ModuleFederationPlugin 插件搭建 MF 环境\n    new ModuleFederationPlugin({\n      // 使用 remotes 属性声明远程模块列表\n      remotes: {\n        // 地址需要指向导出方生成的应用入口文件\n        RemoteApp: "app1@http://localhost:8081/dist/remoteEntry.js",\n      },\n    }),\n    new HtmlWebpackPlugin(),\n  ],\n  devServer: {\n    port: 8082,\n    hot: true,\n    open: true,\n  },\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["作用远程模块使用方，",(0,s.jsx)(n.code,{children:"app-2"})," 需要使用 ",(0,s.jsx)(n.code,{children:"ModuleFederationPlugin"})," 声明远程模块的 HTTP(S) 地址与模块名称(示例中的 ",(0,s.jsx)(n.code,{children:"RemoteApp"}),")，之后在 ",(0,s.jsx)(n.code,{children:"app-2"})," 中就可以使用模块名称异步导入 ",(0,s.jsx)(n.code,{children:"app-1"})," 暴露出来的模块，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// app-2/src/main.js\n(async () => {\n  const { sayHello } = await import("RemoteApp/utils");\n  sayHello();\n})();\n'})}),"\n",(0,s.jsx)(n.p,{children:"到这里，简单示例就算是搭建完毕了，之后运行页面，打开开发者工具的 Network 面板，可以看到："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"其中："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"remoteEntry.js"})," 即 ",(0,s.jsx)(n.code,{children:"app-1"})," 构建的应用入口文件；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src_utils_js.js"})," 则是 ",(0,s.jsx)(n.code,{children:'import("RemoteApp/utils")'})," 语句导入的远程模块。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["总结一下，MF 中的模块导出/导入方都依赖于 ",(0,s.jsx)(n.code,{children:"ModuleFederationPlugin"})," 插件，其中导出方需要使用插件的 ",(0,s.jsx)(n.code,{children:"exposes"})," 项声明导出哪些模块，使用 ",(0,s.jsx)(n.code,{children:"filename"})," 指定生成的入口文件；导入方需要使用 ",(0,s.jsx)(n.code,{children:"remotes"})," 声明远程模块地址，之后在代码中使用异步导入语法 ",(0,s.jsx)(n.code,{children:'import("module")'})," 引入模块。"]}),"\n",(0,s.jsx)(n.p,{children:"这种模块远程加载、运行的能力，搭配适当的 DevOps 手段，已经足以满足微前端的独立部署、独立维护、开发隔离的要求，在此基础上 MF 还提供了一套简单的依赖共享功能，用于解决多应用间基础库管理问题。"}),"\n",(0,s.jsxs)(n.h2,{id:"依赖共享",children:["依赖共享",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#依赖共享",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["上例应用相互独立，各自管理、打包基础依赖包，但实际项目中应用之间通常存在一部分公共依赖 —— 例如 Vue、React、Lodash 等，如果简单沿用上例这种分开打包的方式势必会出现依赖被重复打包，造成产物冗余的问题，为此 ",(0,s.jsx)(n.code,{children:"ModuleFederationPlugin"})," 提供了 ",(0,s.jsx)(n.code,{children:"shared"})," 配置用于声明该应用可被共享的依赖模块。"]}),"\n",(0,s.jsxs)(n.p,{children:["例如，改造上例模块导出方 ",(0,s.jsx)(n.code,{children:"app-1"})," ，添加 ",(0,s.jsx)(n.code,{children:"shared"})," 配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  // ...\n  plugins: [\n    new ModuleFederationPlugin({\n      name: "app1",\n      filename: `remoteEntry.js`,\n      exposes: {\n        "./utils": "./src/utils",\n        "./foo": "./src/foo",\n      }, \n      // 可被共享的依赖模块\n+     shared: [\'lodash\']\n    }),\n  ],\n  // ...\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["接下来，还需要修改模块导入方 ",(0,s.jsx)(n.code,{children:"app-2"}),"，添加相同的 ",(0,s.jsx)(n.code,{children:"shared"})," 配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  // ...\n  plugins: [\n    // 模块使用方也依然使用 ModuleFederationPlugin 插件搭建 MF 环境\n    new ModuleFederationPlugin({\n      // 使用 remotes 属性声明远程模块列表\n      remotes: {\n        // 地址需要指向导出方生成的应用入口文件\n        RemoteApp: \"app1@http://localhost:8081/dist/remoteEntry.js\",\n      },\n+     shared: ['lodash']\n    }),\n    new HtmlWebpackPlugin(),\n  ],\n  // ...\n};\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["提示：示例代码已上传到 ",(0,s.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/HEAD/MF-shared/package.json",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["之后，运行页面可以看到最终只加载了一次 ",(0,s.jsx)(n.code,{children:"lodash"})," 产物(下表左图)，而改动前则需要分别从导入/导出方各加载一次 ",(0,s.jsx)(n.code,{children:"lodash"}),"(下表右图)："]}),"\n",(0,s.jsxs)(n.p,{children:["注意，这里要求两个应用使用 ",(0,s.jsx)(n.strong,{children:"版本号完全相同"})," 的依赖才能被复用，假设上例应用 ",(0,s.jsx)(n.code,{children:"app-1"})," 用了 ",(0,s.jsx)(n.code,{children:"lodash@4.17.0"})," ，而 ",(0,s.jsx)(n.code,{children:"app-2"})," 用的是 ",(0,s.jsx)(n.code,{children:"lodash@4.17.1"}),"，Webpack 还是会同时加载两份 lodash 代码，我们可以通过 ",(0,s.jsx)(n.code,{children:"shared.[lib].requiredVersion"})," 配置项显式声明应用需要的依赖库版本来解决这个问题："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  // ...\n  plugins: [\n    new ModuleFederationPlugin({\n      // ...\n      // 共享依赖及版本要求声明\n+     shared: {\n+       lodash: {\n+         requiredVersion: "^4.17.0",\n+       },\n+     },\n    }),\n  ],\n  // ...\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上例 ",(0,s.jsx)(n.code,{children:'requiredVersion: "^4.17.0"'})," 表示该应用支持共享版本大于等于 ",(0,s.jsx)(n.code,{children:"4.17.0"})," 小于等于 ",(0,s.jsx)(n.code,{children:"4.18.0"})," 的 lodash，其它应用所使用的 lodash 版本号只要在这一范围内即可复用。",(0,s.jsx)(n.code,{children:"requiredVersion"})," 支持 ",(0,s.jsx)(n.a,{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer",children:"Semantic Versioning 2.0"})," 标准，这意味着我们可以复用 ",(0,s.jsx)(n.code,{children:"package.json"})," 中声明版本依赖的方法。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"requiredVersion"})," 的作用在于限制依赖版本的上下限，实用性极高。除此之外，我们还可以通过 ",(0,s.jsx)(n.code,{children:"shared.[lib].shareScope"})," 属性更精细地控制依赖的共享范围，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  // ...\n  plugins: [\n    new ModuleFederationPlugin({\n      // ...\n      // 共享依赖及版本要求声明\n+     shared: {\n+       lodash: {\n+         // 任意字符串\n+         shareScope: 'foo'\n+       },\n+     },\n    }),\n  ],\n  // ...\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在这种配置下，其它应用所共享的 lodash 库必须同样声明为 ",(0,s.jsx)(n.code,{children:"foo"})," 空间才能复用。",(0,s.jsx)(n.code,{children:"shareScope"})," 在多团队协作时能够切分出多个资源共享空间，降低依赖冲突的概率。"]}),"\n",(0,s.jsxs)(n.p,{children:["除 ",(0,s.jsx)(n.code,{children:"requiredVersion"}),"/",(0,s.jsx)(n.code,{children:"shareScope"})," 外，",(0,s.jsx)(n.code,{children:"shared"})," 还提供了一些不太常用的 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/plugins/module-federation-plugin/",target:"_blank",rel:"noopener noreferrer",children:"配置"}),"，简单介绍："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"singletong"}),"：强制约束多个版本之间共用同一个依赖包，如果依赖包不满足版本 ",(0,s.jsx)(n.code,{children:"requiredVersion"})," 版本要求则报警告："]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"version"}),"：声明依赖包版本，缺省默认会从包体的 ",(0,s.jsx)(n.code,{children:"package.json"})," 的 ",(0,s.jsx)(n.code,{children:"version"})," 字段解析；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"packageName"}),"：用于从描述文件中确定所需版本的包名称，仅当无法从请求中自动确定包名称时才需要这样做；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"eager"}),"：允许 webpack 直接打包该依赖库 —— 而不是通过异步请求获取库；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"import"}),"：声明如何导入该模块，默认为 shared 属性名，实用性不高，可忽略。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"示例微前端",children:["示例：微前端",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例微前端",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Module Federation 是一种非常新的技术，社区资料还比较少，接下来我们来编写一个完整的微前端应用，帮助你更好理解 MF 的功能与用法。微前端架构通常包含一个作为容器的主应用及若干负责渲染具体页面的子应用，分别对标到下面示例的 ",(0,s.jsx)(n.code,{children:"packages/host"})," 与 ",(0,s.jsx)(n.code,{children:"packages/order"})," 应用："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"MF-micro-fe\n├─ packages\n│  ├─ host\n│  │  ├─ public\n│  │  │  └─ index.html\n│  │  ├─ src\n│  │  │  ├─ App.js\n│  │  │  ├─ HomePage.js\n│  │  │  ├─ Navigation.js\n│  │  │  ├─ bootstrap.js\n│  │  │  ├─ index.js\n│  │  │  └─ routes.js\n│  │  ├─ package.json\n│  │  └─ webpack.config.js\n│  └─ order\n│     ├─ src\n│     │  ├─ OrderDetail.js\n│     │  ├─ OrderList.js\n│     │  ├─ main.js\n│     │  └─ routes.js\n│     ├─ package.json\n│     └─ webpack.config.js\n├─ lerna.json\n└─ package.json\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["提示：示例代码已上传到：",(0,s.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/HEAD/MF-micro-fe/package.json",target:"_blank",rel:"noopener noreferrer",children:"MF-micro-fe"}),"，务必 Clone 下来辅助阅读。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["先看看 ",(0,s.jsx)(n.code,{children:"order"})," 对应的 MF 配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  // ...\n  plugins: [\n    new ModuleFederationPlugin({\n      name: "order",\n      filename: "remoteEntry.js",\n      // 导入路由配置\n      exposes: {\n        "./routes": "./src/routes",\n      },\n    }),\n  ],\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["注意，",(0,s.jsx)(n.code,{children:"order"})," 应用实际导出的是路由配置文件 ",(0,s.jsx)(n.code,{children:"routes.js"}),"。而 ",(0,s.jsx)(n.code,{children:"host"})," 则通过 MF 插件导入并消费 ",(0,s.jsx)(n.code,{children:"order"})," 应用的组件，对应配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  // ...\n  plugins: [\n    // 模块使用方也依然使用 ModuleFederationPlugin 插件搭建 MF 环境\n    new ModuleFederationPlugin({\n      // 使用 remotes 属性声明远程模块列表\n      remotes: {\n        // 地址需要指向导出方生成的应用入口文件\n        RemoteOrder: "order@http://localhost:8081/dist/remoteEntry.js",\n      },\n    })\n  ],\n  // ...\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["之后，在 ",(0,s.jsx)(n.code,{children:"host"})," 应用中引入 ",(0,s.jsx)(n.code,{children:"order"})," 的路由配置并应用到页面中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import localRoutes from "./routes";\n// 引入远程 order 模块\nimport orderRoutes from "RemoteOrder/routes";\n\nconst routes = [...localRoutes, ...orderRoutes];\n\nconst App = () => (\n  <React.StrictMode>\n    <HashRouter>\n      <h1>Micro Frontend Example</h1>\n      <Navigation />\n      <Routes>\n        {routes.map((route) => (\n          <Route\n            key={route.path}\n            path={route.path}\n            element={\n              <React.Suspense fallback={<>...</>}>\n                <route.component />\n              </React.Suspense>\n            }\n            exact={route.exact}\n          />\n        ))}\n      </Routes>\n    </HashRouter>\n  </React.StrictMode>\n);\n\nexport default App;\n'})}),"\n",(0,s.jsxs)(n.p,{children:["通过这种方式，一是可以将业务代码分解为更细粒度的应用形态；二是应用可以各自管理路由逻辑，降低应用间耦合性。最终能降低系统组件间耦合度，更有利于多团队协作。除此之外，MF 技术还有非常大想象空间，国外有大神专门整理了一系列实用 MF 示例：",(0,s.jsx)(n.a,{href:"https://github.com/module-federation/module-federation-examples/",target:"_blank",rel:"noopener noreferrer",children:"Module Federation Examples"}),"，感兴趣的读者务必仔细阅读这些示例代码。"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Module Federation 是 Webpack 5 新引入的一种远程模块动态加载、运行技术，虽然国内讨论热度较低，但使用简单，功能强大，非常适用于微前端或代码重构迁移场景。"}),"\n",(0,s.jsxs)(n.p,{children:["使用上，只需引入 ",(0,s.jsx)(n.code,{children:"ModuleFederationPlugin"})," 插件，按要求组织、分割好各个微应用的代码，并正确配置 ",(0,s.jsx)(n.code,{children:"expose/remotes"})," 配置项即可实现基于 HTTP(S) 的模块共享功能。此外，我们还可以通过插件的 ",(0,s.jsx)(n.code,{children:"shared"})," 配置项实现在应用间共享基础依赖库，还可以通过 ",(0,s.jsx)(n.code,{children:"shared.requireVersion"})," 等一系列配置，精细控制依赖的共享版本与范围。"]}),"\n",(0,s.jsxs)(n.h2,{id:"思考题",children:["思考题",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Module Federation 实现的微前端架构并未提供沙箱能力，会不会导致一些安全问题？"})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let t=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["Webpack5%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F8.%E4%BD%BF%E7%94%A8%20Webpack%20%E6%9E%84%E5%BB%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%BA%94%E7%94%A8.md"]={toc:[{text:"简单示例",id:"简单示例",depth:2},{text:"依赖共享",id:"依赖共享",depth:2},{text:"示例：微前端",id:"示例微前端",depth:2},{text:"总结",id:"总结",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"8.使用 Webpack 构建微前端应用",headingTitle:"8.使用 Webpack 构建微前端应用",frontmatter:{}}}}]);