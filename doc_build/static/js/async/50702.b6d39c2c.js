"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["50702"],{992363:function(n,e,s){s.r(e),s.d(e,{default:()=>d});var r=s(552676),i=s(740453);let t=s.p+"static/image/36d45453b533991d3d2ea2811e05d8e2.8a2b7da7.webp",o=s.p+"static/image/158378e427bc3e45397674c9cd116c28.fcb340ba.webp";function l(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",ul:"ul",li:"li",pre:"pre",code:"code",h4:"h4",h3:"h3",img:"img",blockquote:"blockquote",ol:"ol"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"38组件实战布局组件实现",children:["38.组件实战：布局组件实现",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#38组件实战布局组件实现",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在日常开发中，往往会在页面当中使用一些特定的样式来给整体应用做一个大框架的设计，比如在以前面试非常\uD83D\uDD25的",(0,r.jsx)(e.strong,{children:"双飞翼"}),"、",(0,r.jsx)(e.strong,{children:"圣杯"}),"、",(0,r.jsx)(e.strong,{children:"三栏居中"}),"等等通过CSS实现的布局容器，我们可以统一称其为",(0,r.jsx)(e.strong,{children:"应用程序的布局。"})]}),"\n",(0,r.jsxs)(e.p,{children:["在网页开发中，如何把你的盒子放在与视口相关的正确位置上显示是非常重要的，因此CSS中提供了非常多的布局解决方案，比如",(0,r.jsx)(e.strong,{children:"Flex、Grid、Position"}),"等一系列的布局模式给开发者使用，帮助其能够能简单、快速的搭建现代化前端应用页面。"]}),"\n",(0,r.jsx)(e.p,{children:"在低代码平台当中，布局组件同样至关重要。它决定了编排的效率与渲染效果的差异。在本章节的主要内容就是来完成编辑器中常见的基础布局组件。"}),"\n",(0,r.jsxs)(e.h2,{id:"容器大小",children:["容器大小",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#容器大小",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在编辑状态下，用户可以通过自定义的手柄自然的调整大小。想要实现如下图所示的容器收缩效果就需要借助",(0,r.jsx)(e.strong,{children:"re-resizable"}),"来实现相关的功能。"]}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"re-resizable"}),"可以创建一个可伸缩的容器，下面是一些常见的设置属性："]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"宽度与高度"}),"：通过",(0,r.jsx)(e.strong,{children:"defaultSize和size"}),"分别设置默认宽度和高度与状态大小的改变。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"范围"}),"：",(0,r.jsx)(e.strong,{children:"bounds"}),"属性设置为",(0,r.jsx)(e.strong,{children:"parent"}),"可以将容器拉伸的范围限定为父容器的高和宽，避免",(0,r.jsx)(e.strong,{children:"overflow"}),"后超出可视区域内。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"拖动方向"}),"：设置",(0,r.jsx)(e.strong,{children:"enable"}),"属性可以指定开启能够支持缩放的点位，分别为四角和四边，默认情况下是全部开启的状态。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["需要注意的是",(0,r.jsx)(e.strong,{children:"Resizable的Ref"}),"绑定是通过函数形式来处理的，连接器",(0,r.jsx)(e.strong,{children:"connect"}),"链接物料组件使用的是",(0,r.jsx)(e.strong,{children:"resizable.current.resizable"}),"来进行绑定，这样的话就将一份",(0,r.jsx)(e.strong,{children:"Resizable"}),"组件保存起来，方便后续进行使用。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"\nexport interface ContainerProps {\n  style?: React.CSSProperties;\n  children?: React.ReactNode;\n  initialWidth?: string | number;\n  initialHeight?: string | number;\n  width?: string | number;\n  height?: string | number;\n}\n\nexport const Container: UserComponent<\n    ContainerProps\n> = ({ children, initialWidth, initialHeight, style, ...styleProps }) => {\n  const resizable = React.useRef<any>(null)\n  const frameworkContext = React.useContext(FrameworkContext)\n\n  const {\n    actions: { setProp },\n    connectors: { connect },\n    active\n  } = useNode((node) => ({\n    parent: node.data.parent,\n    active: node.events.selected\n  }))\n\n  return (\n    <Resizable\n      style={{\n        position: 'relative',\n        ...style,\n      }}\n      size={{\n        width: styleProps?.width as string,\n        height: styleProps?.height as string\n      }}\n      defaultSize={{\n        width: initialWidth || '100%',\n        height: initialHeight || '100%'\n      }}\n      bounds='parent'\n      enable={{\n        right: frameworkContext?.enabled,\n        bottom: frameworkContext?.enabled\n      }}\n      ref={(ref) => {\n        if (ref) {\n          resizable.current = ref\n          connect(resizable.current.resizable)\n        }\n      }}\n      onResize={handleResizableChange}\n    >\n      {children}\n    </Resizable>\n  )\n}\n\nContainer.craft = {\n  displayName: '容器',\n  related: {\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.h4,{id:"指示器",children:["指示器",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#指示器",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["完成相关的",(0,r.jsx)(e.strong,{children:"Resizeable"}),"组件后，此时页面容器已经可以拖动了，但是会发现拖动的标记不明显。此时就需要根据自身需求实现",(0,r.jsx)(e.strong,{children:"IndicatorRound"}),"组件。"]}),"\n",(0,r.jsx)(e.p,{children:"如下代码所示："}),"\n",(0,r.jsxs)(e.p,{children:["通过",(0,r.jsx)(e.strong,{children:"position"}),"的方式，为右下两侧添加指示符号标记。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import * as React from "react";\nimport { css } from "@emotion/css";\nimport { theme } from "antd";\nimport clsx from "clsx";\nimport classes from "./index.module.sass";\n\nconst { useToken } = theme;\n\nexport interface IndicatorsProps {\n  bound?: string;\n  show?: boolean;\n}\n\nexport const IndicatorRound: React.FC<IndicatorsProps> = (props) => {\n  const { token } = useToken();\n\n  return (\n    <div\n      className={clsx(classes.indicatorRound, {\n        [classes.hide]: !props.show,\n      })}\n    >\n      <span\n        style={{\n          background: token.colorPrimary,\n        }}\n        className={classes.indicatorRoundInline}\n      />\n      <span\n        style={{\n          background: token.colorPrimary,\n        }}\n        className={classes.indicatorRoundBlock}\n      />\n      <span />\n    </div>\n  );\n};\n\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-scss",children:".indicatorRound\n  position: absolute\n  top: 0\n  left: 0\n  width: 100%\n  height: 100%\n  pointer-events: none\n  \n  &Inline\n    position: absolute\n    width: 6px\n    height: 30px\n    top: 50%\n    right: -3px\n    z-index: 2\n    border-radius: 200px\n    pointer-events: none\n    transform: translate(0, -50%)\n\n  &Block\n    position: absolute\n    width: 30px\n    height: 6px\n    bottom: -3px\n    left: 50%\n    z-index: 2\n    border-radius: 200px\n    pointer-events: none\n\n.hide\n  display: none\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"使用方式",children:["使用方式",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用方式",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["将",(0,r.jsx)(e.strong,{children:"IndicatorRound"}),"组件渲染到",(0,r.jsx)(e.strong,{children:"Resizable"}),"，此时",(0,r.jsx)(e.strong,{children:"IndicatorRound"}),"的组件将定位到其两侧，来给用户拉伸的提示信息和操作。接下来为",(0,r.jsx)(e.strong,{children:"Resizable"}),"添加绑定事件，来设置当前拖拽的宽度与高度。"]}),"\n",(0,r.jsxs)(e.p,{children:["handleResizableChange方法做的事情很简单，",(0,r.jsx)(e.strong,{children:"ResizeCallback"})," 会返回当前容器的ElementDOM，可以直接拿到当前宽度和高度，并使用 ",(0,r.jsx)(e.strong,{children:"@craftjs/core"})," 中的 ",(0,r.jsx)(e.strong,{children:"setProp"})," 为容器组件设置对应的",(0,r.jsx)(e.strong,{children:"Props"}),"属性。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-diff",children:"import { IndicatorRound } from './Indicators'\n\n+ const handleResizableChange: ResizeCallback = (\n+    _,\n+    __,\n+    elRef,\n+  ) => {\n+    const { width, height } = elRef.style\n+    setProp((prop: Record<string, any>) => {\n+      prop.width = width\n+      prop.height = height\n+   }, 400)\n+  }\n\n<Resizable\n      style={{\n        position: 'relative',\n        ...style,\n      }}\n      size={{\n        width: styleProps?.width as string,\n        height: styleProps?.height as string\n      }}\n      defaultSize={{\n        width: initialWidth || '100%',\n        height: initialHeight || '100%'\n      }}\n      bounds='parent'\n      enable={{\n        right: frameworkContext?.enabled,\n        bottom: frameworkContext?.enabled\n      }}\n      ref={(ref) => {\n        if (ref) {\n          resizable.current = ref\n          connect(resizable.current.resizable)\n        }\n      }}\n+      onResize={handleResizableChange}\n    >\n      {children}\n+    <IndicatorRound show={active} />\n    </Resizable>\n"})}),"\n",(0,r.jsx)(e.p,{children:"如下所示，就是当前显示的效果。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsxs)(e.h2,{id:"栅格布局",children:["栅格布局",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#栅格布局",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"栅格布局是一种常用的网页布局技术，可以将页面划分为多个水平和垂直的栅格列，以便更方便地组织和布局内容。"}),"\n",(0,r.jsx)(e.p,{children:"在栅格布局中，通常使用CSS Grid或Flexbox来创建栅格系统。这两种技术都可以实现灵活的栅格布局，但在实现方式和语法上略有不同。"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Ant Design"}),"组件提供的栅格化系统是基于 ",(0,r.jsx)(e.strong,{children:"Flex"})," 布局，允许子元素在父节点内的水平对齐方式 - 居左、居中、居右、等宽排列、分散排列。子元素与子元素之间，支持顶部对齐、垂直居中对齐、底部对齐的方式。同时，支持使用 ",(0,r.jsx)(e.strong,{children:"order"})," 来定义元素的排列顺序。"]}),"\n",(0,r.jsxs)(e.p,{children:["在物料组件中，只需要通过简单的",(0,r.jsx)(e.strong,{children:"Element"}),"组件包装，就可以实现一个基础的栅格化的布局组件。"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Element"}),"是一个重要的概念和实体，它主要用于表示和操作用户在可视化编辑器中添加的组件或元素。它代表页面上的一个独立的组件或元素，它包含了该组件的所有相关数据和属性。这些数据可以包括组件的位置、尺寸、样式、文本内容等。在编辑器中，一些容器包装类的组件实现必然离不开它的身影。在实现",(0,r.jsx)(e.strong,{children:"Row和Column"}),"物料组件的过程中，",(0,r.jsx)(e.strong,{children:"Element"}),"的使用方式有多种，下面分别是不同形式的Element组件的实现。"]}),"\n",(0,r.jsx)(e.p,{children:"具体的实现代码："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"export const Row = createReactMaterial(withMaterialNode<RowProps>(AntdRow), {\n})\n\nexport const RowView = React.forwardRef<any, RowProps>((props, ref) => {\n  return (\n    <Element id=\"row-columns\" canvas ref={ref} is={Row} {...props} >\n      <Column/>\n      {props.children}\n    </Element>\n  )\n})\n\nexport const Rows = createReactMaterial(withMaterialNode<RowProps>(RowView), {\n  displayName: '容器-行',\n})\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"export const ColumnView = React.forwardRef<any, ColProps>((props, ref) => {\n  return (\n    <AntCol ref={ref} {...props} >\n        <Element is={Slot} canvas id=\"col-container\"  />\n    </AntCol>\n  )\n})\n\nColumnView.defaultProps = {\n  span: 4\n}\n\nexport const Column = createReactMaterial(withMaterialNode<ColProps>(ColumnView), {\n  displayName: '容器-列',\n  props: {\n    span: 4\n  }\n})\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsxs)(e.h2,{id:"扩展",children:["扩展",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"当实现了容器大小的调整和栅栏化组件后，在后续也会将列表、条件选择、页面布局等组件引入到对应的布局组件分类中来，大体上的实现大差不差，可以通过当前现有的一些业务组件进行轻量的改造旧可以直接放入到编辑器中进行使用，大多数情况下只需要为其包裹一层自定义的Element，并创建成为物料组件。"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"本章节内容会随着后续materials的更新同步插入。"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"在本章节中，我们着重介绍了一系列基础组件容器，以供后续扩展更多容器组件的需要。这些容器组件可以在编辑器中使用，用于组织和排列其他组件，实现页面布局的灵活性和多样性。以下是我们计划实现的基础容器组件列表："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"栅格布局容器"}),"：栅格布局容器是一种经典的布局工具，通过将页面划分为网格状的列和行，使得组件的位置和尺寸可以灵活调整，以适应各种布局需求。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"盒子容器"}),"：作为最基础的布局组件，盒子容器可以将多个组件包装在一个容器中。通过定义容器的背景颜色、边距和背景设置，以及控制内部组件的布局关系，盒子容器能够确保整体布局的一致性和美观性。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"水平和垂直布局容器"}),"：水平和垂直布局容器可用于创建水平或垂直方向的页面布局。通过这些容器组件，开发人员可以轻松地放置和对齐组件，实现各种布局效果，例如导航栏、侧边栏等。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"卡片容器"}),"：卡片容器是一种常见的布局组件，常用于展示信息和内容。它提供了一个容器，可容纳文本、图片等组件，并提供样式和边框以呈现出卡片的效果。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"表单容器"}),"：表单容器是用于创建和布局表单的组件。它可以包含输入框、复选框、下拉列表等表单元素，并帮助开发人员合理布局这些元素，以方便用户填写和提交表单。如"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"以上这些布局容器组件在中后台场景中经常被使用，并通过它们，我们可以高效地搭建各种页面布局。"})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}let d=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F38.%E7%BB%84%E4%BB%B6%E5%AE%9E%E6%88%98%EF%BC%9A%E5%B8%83%E5%B1%80%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"容器大小",id:"容器大小",depth:2},{text:"指示器",id:"指示器",depth:4},{text:"使用方式",id:"使用方式",depth:3},{text:"栅格布局",id:"栅格布局",depth:2},{text:"扩展",id:"扩展",depth:2},{text:"总结",id:"总结",depth:2}],title:"38.组件实战：布局组件实现",headingTitle:"38.组件实战：布局组件实现",frontmatter:{}}}}]);