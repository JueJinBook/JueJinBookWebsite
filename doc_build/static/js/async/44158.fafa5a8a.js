"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["44158"],{965999:function(n,e,t){t.r(e),t.d(e,{default:()=>h});var s=t(552676),r=t(740453);let i=t.p+"static/image/1d902e7fcbcf3bf24986544b9f734791.d1f48c48.png",a=t.p+"static/image/f30e211e669866cdd673b0b2480229ec.de0ac726.png",c=t.p+"static/image/769de0fb70c03fc31ee5c056e3c04d7f.70b5aa9a.png",o=t.p+"static/image/ddc1667e53e9fa211fa5e83b566666dd.689e76e1.png";function d(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",blockquote:"blockquote",h3:"h3",img:"img",pre:"pre"},(0,r.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"17原理解析通信",children:["17.原理解析：通信",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#17原理解析通信",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"主应用和微应用在运行期间可能需要实现主子应用之间的通信，本课程接下来将重点讲解微前端的通信方式以及实现示例。"}),"\n",(0,s.jsxs)(e.h2,{id:"通信模式",children:["通信模式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#通信模式",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在了解微前端的通信方式之前，我们先来了解两种常用的通信模式：观察者和发布 / 订阅模式。两者最主要的区别是一对多单向通信还是多对多双向通信的问题。以微前端为例，如果只需要主应用向各个子应用单向广播通信，并且多个子应用之间互相不需要通信，那么只需要使用观察者模式即可，而如果主应用需要和子应用双向通信，或者子应用之间需要实现去中心化的双向通信，那么需要使用发布 / 订阅模式。"}),"\n",(0,s.jsxs)(e.p,{children:["在浏览器中会使用观察者模式来实现内置 API 的单向通信，例如 ",(0,s.jsx)(e.code,{children:"IntersectionObserver"}),"、",(0,s.jsx)(e.code,{children:"MutationObserver"}),"、",(0,s.jsx)(e.code,{children:"ResizeObserver"})," 以及 ",(0,s.jsx)(e.code,{children:"PerformanceObserver"})," 等，而发布 / 订阅模式则通常是框架提供的一种供外部开发者自定义通信的能力，例如浏览器中的 ",(0,s.jsx)(e.code,{children:"EventTarget"}),"、Node.js 中的 ",(0,s.jsx)(e.code,{children:"EventEmitter"}),"、Vue.js 中的 ",(0,s.jsx)(e.code,{children:"$emit"})," 等。"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"温馨提示：常见的 MVC、MVP 和 MVVM 会使用什么模式进行通信呢？Vue.js 中的响应式设计使用了什么模式进行通信呢？"}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"观察者模式",children:["观察者模式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#观察者模式",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"观察者模式需要包含 Subject 和 Observer 两个概念，其中 Subject 是需要被观察的目标对象，一旦状态发生变化，可以通过广播的方式通知所有订阅变化的 Observer，而 Observer 则是通过向 Subject 进行消息订阅从而实现接收 Subject 的变化通知，具体如下所示："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["我们以浏览器的 ",(0,s.jsx)(e.code,{children:"MutationObserver"})," 为例，来看下观察者模式如何运作："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Document</title>\n  </head>\n  <body>\n    <div id="subject"></div>\n  </body>\n\n  <script>\n\n\n    // 当观察到变动时执行的回调函数\n    const callback = function (mutationsList, observer) {\n      // Use traditional \'for loops\' for IE 11\n      for (let mutation of mutationsList) {\n        if (mutation.type === "childList") {\n          console.log("A child node has been added or removed.");\n        } else if (mutation.type === "attributes") {\n          console.log(\n            "The " + mutation.attributeName + " attribute was modified."\n          );\n        }\n      }\n    };\n\n    // 创建第一个 Observer\n    const observer1 = new MutationObserver(callback);\n\n    // Subject 目标对象\n    const subject = document.getElementById("subject");\n    \n    // Observer 的配置（需要观察什么变动）\n    const config = { attributes: true, childList: true, subtree: true };\n\n    // Observer 订阅 Subject 的变化\n    observer1.observe(subject, config);\n\n    // 创建第二个 Observer\n    const observer2 = new MutationObserver(callback);\n\n    // Observer 订阅 Subject 的变化\n    observer2.observe(subject, config);\n\n    // Subject 的属性变化，会触发 Observer 的 callback 监听\n    subject.className = "change class";\n    \n    // Subject 的子节点变化，会触发 Observer 的 callback 监听\n    subject.appendChild(document.createElement("span"));\n\n    // 这里为什么需要 setTimeout 呢？如果去除会有什么影响吗？\n    setTimeout(() => {\n      // 取消订阅\n      observer1.disconnect();\n      observer2.disconnect();\n    });\n  <\/script>\n</html>\n'})}),"\n",(0,s.jsx)(e.p,{children:"当 DOM 元素（Subject 目标对象）改变自身的属性或者添加子元素时，都会将自身的状态变化单向通知给所有订阅该变化的观察者。当然上述 Web API 内部包装了很多功能，例如观察者配置。我们可以设计一个更加便于理解的观察者通信方式："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'   class Subject {\n    constructor() {\n      this.observers = [];\n    }\n\n    // 添加订阅\n    subscribe(observer) {\n      this.observers.push(observer);\n    }\n\n    // 取消订阅\n    unsubscribe() {}\n\n    // 广播信息\n    broadcast() {\n      this.observers.forEach((observer) => observer.update());\n    }\n  }\n\n  class Observer {\n    constructor() {}\n\n    // 实现一个 update 的接口，供 subject 耦合调用\n    update() {\n      console.log("observer update...");\n    }\n  }\n\n  const subject = new Subject();\n\n  subject.subscribe(new Observer());\n\n  subject.broadcast();\n\n  subject.subscribe(new Observer());\n\n  subject.broadcast();\n'})}),"\n",(0,s.jsx)(e.p,{children:"上述观察者模式没有一个实体的 Subject 对象，我们可以结合 DOM 做一些小小的改动，例如："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Document</title>\n  </head>\n  <body>\n    \x3c!-- 目标对象 --\x3e\n    <input type="checkbox" id="checkbox" />\n\n    \x3c!-- 观察者 --\x3e\n    <div id="div"></div>\n    <h1 id="h1"></h1>\n    <span id="span"></span>\n\n    <script>\n      class Subject {\n        constructor() {\n          this.observers = [];\n        }\n\n        // 添加订阅\n        subscribe(observer) {\n          this.observers.push(observer);\n        }\n\n        // 取消订阅\n        unsubscribe() {}\n\n        // 广播信息\n        broadcast(value) {\n          this.observers.forEach((observer) => observer.update(value));\n        }\n      }\n\n\n      // 观察的目标对象\n      const checkbox = document.getElementById("checkbox");\n\n      // 将 subject 实例挂载到 DOM 对象上（也可以单独使用）\n      checkbox.subject = new Subject();\n\n      checkbox.onclick = function (event) {\n        // 通知观察者 checkbox 的变化\n        checkbox.subject.broadcast(event.target.checked);\n      };\n\n      // 观察者\n      const span = document.getElementById("span");\n      const div = document.getElementById("div");\n      const h1 = document.getElementById("h1");\n\n      // 观察者实现各自 update 接口\n      span.update = function (value) {\n        span.innerHTML = value;\n      };\n      div.update = function (value) {\n        div.innerHTML = value;\n      };\n      h1.update = function (value) {\n        h1.innerHTML = value;\n      };\n\n      // 添加订阅\n      checkbox.subject.subscribe(span);\n      checkbox.subject.subscribe(div);\n      checkbox.subject.subscribe(h1);\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：不用特别关心 ",(0,s.jsx)(e.code,{children:"MutationObserver"})," 和示例中的不同使用方式，需要了解的是单向一对多的通信能力。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"发布--订阅模式",children:["发布 / 订阅模式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#发布--订阅模式",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"发布 / 订阅模式需要包含 Publisher、Channels 和 Subscriber 三个概念，其中 Publisher 是信息的发送者，Subscriber 是信息的订阅者，而 Channels 是信息传输的通道，如下所示："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["发布者可以向某个通道传输信息，而订阅者则可以订阅该通道的信息变化。通过新增通道，可以将发布者和订阅者解耦出来，从而形成一种去中心化的通信模式。如上图所示，订阅者本身也可以是发布者，从而实现事件的双向通信。我们以浏览器的 ",(0,s.jsx)(e.code,{children:"EventTarget"})," 为例，来看下发布 / 订阅模式如何运作："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'const event = new EventTarget();\n// event 是订阅者\nevent.addEventListener("channel1", (e) => console.log(e.detail));\n// event 是发布者\nevent.dispatchEvent(\n  new CustomEvent("channel1", { detail: { hello: true } })\n);\nevent.dispatchEvent(\n  new CustomEvent("channel2", { detail: { hello: true } })\n);\n// 由于先发布后订阅，导致订阅失败，但是发布者不感知订阅者的失败状态\nevent.addEventListener("channel2", (e) => console.log(e.detail));\n'})}),"\n",(0,s.jsx)(e.p,{children:"我们可以通过简单的几行代码实现上述功能，如下所示："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'class Event {\n    constructor() {\n      this.channels = {};\n      // 这里的 token 也可以是随机生成的 uuid\n      this.token = 0;\n    }\n\n    // 实现订阅\n    subscribe(channel, callback) {\n      if (!this.channels[channel]) this.channels[channel] = [];\n      this.channels[channel].push({\n        channel,\n        token: ++this.token,\n        callback,\n      });\n      return this.token;\n    }\n\n    // 实现发布\n    publish(channel, data) {\n      const subscribers = this.channels[channel];\n      if (!subscribers) return;\n      let len = subscribers.length;\n      while (len--) {\n        subscribers[len]?.callback(data, subscribers[len].token);\n      }\n    }\n\n    // 取消订阅\n    unsubscribe(token) {\n      for (let channel in this.channels) {\n        const index = this.channels[channel].findIndex(\n          (subscriber) => subscriber.token === token\n        );\n        if (index !== -1) {\n          this.channels[channel].splice(index, 1);\n          if (!this.channels[channel].length) {\n            delete this.channels[channel];\n          }\n          return token;\n        }\n      }\n    }\n  }\n\n  const event = new Event();\n  const token = event.subscribe("channel1", (data) => console.log(\'token: \', data));\n  const token1 = event.subscribe("channel1", (data) => console.log(\'token1: \', data));\n  // 打印 token 和 token1\n  event.publish("channel1", { hello: true });\n  event.unsubscribe(token);\n  // 打印 token1，因为 token 取消了订阅\n  event.publish("channel1", { hello: true });\n'})}),"\n",(0,s.jsxs)(e.p,{children:["发布 / 订阅模式和观察者模式存在明显差异，首先在功能上观察者模式是一对多的单向通信模式，而发布 / 订阅模式是多对多的双向通信模式。其次观察者模式需要一个中心化的 Subject 广播消息，并且需要感知 Observer（例如上述的 ",(0,s.jsx)(e.code,{children:"observers"})," 列表) 实现通知，是一种紧耦合的通信方式。而发布 / 订阅模式中的发布者只需要向特定的通道发送信息，并不感知订阅者的订阅状态，是一种松散解耦的通信方式。"]}),"\n",(0,s.jsxs)(e.h2,{id:"微前端通信",children:["微前端通信",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#微前端通信",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在微前端中往往需要实现多对多的双向通信模式，例如微应用之间实现通信，主应用和微应用之间实现通信，因此使用发布 / 订阅模式是一种不错的选择。如果微应用和主应用处于同一个全局执行上下文，那么可以利用 ",(0,s.jsx)(e.code,{children:"window"})," 变量实现通信，因为 ",(0,s.jsx)(e.code,{children:"window"})," 实现了 ",(0,s.jsx)(e.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget",target:"_blank",rel:"noopener noreferrer",children:"EventTarget"})," 的通信接口，例如常见的 single-spa，它会将应用的生命周期通过 ",(0,s.jsx)(e.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget",target:"_blank",rel:"noopener noreferrer",children:"EventTarget"})," （",(0,s.jsx)(e.code,{children:"window.dispatchEvent"}),"）的形式广播出来，从而可以使得 qiankun 实现监听处理。例如："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：示例源码可以从 ",(0,s.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/same-origin-pubsub",target:"_blank",rel:"noopener noreferrer",children:"demo/same-origin-pubsub"})," 分支获取。"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// 主应用\nwindow.addEventListener("microChannel", (e) => {\n  console.log("main addEventListener: ", e);\n\n  window.dispatchEvent(\n    new CustomEvent("mainChannel", {\n      detail: "main",\n    })\n  );\n});\n\n// iframe 子应用1（加载以后立马触发）\nwindow.parent.addEventListener("mainChannel", (e) => {\n  console.log("micro1 addEventListener: ", e);\n});\n\nwindow.parent.dispatchEvent(\n  new CustomEvent("microChannel", {\n    detail: "micro1",\n  })\n);\n\n// iframe 子应用2\nwindow.parent.addEventListener("mainChannel", (e) => {\n  console.log("micro2 addEventListener: ", e);\n});\n\nwindow.parent.dispatchEvent(\n  new CustomEvent("microChannel", {\n    detail: "micro2",\n  })\n);\n'})}),"\n",(0,s.jsx)(e.p,{children:"需要注意使用发布 / 订阅模式时先进行订阅处理，从而防止发布后没有及时订阅导致消息丢失。例如上述示例，如果微应用先发布消息然后再进行消息订阅，那么会使得首次无法接收消息。"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：如果想使用自定义的发布 / 订阅模式，可以在 ",(0,s.jsx)(e.code,{children:"window"})," 上挂载一个发布 / 订阅对象实现通信。除此之外，如果通信消息并不是所有子应用都可以订阅，那么可以通过类似于 ",(0,s.jsx)(e.code,{children:"props"})," 的方式传递发布 / 订阅对象给需要的子应用进行处理，例如 Web Components 中可以通过属性的方式进行对象传递，从而实现特定范围内的通信。"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"当然，如果主应用和微应用不同域的情况下通信，则会报跨域的错误："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'\x3c!-- main.html：http://30.120.112.80:4000/ --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>通信测试</title>\n  </head>\n  <body>\n    <h1>main 应用</h1>\n    <br />\n    \x3c!-- 跨域应用：iframe.html --\x3e\n    <iframe id="iframe" src="<%= iframeUrl %>"></iframe>\n\n    <script>\n      const iframe = document.getElementById("iframe");\n\n      iframe.onload = () => {\n        window.dispatchEvent(\n          new CustomEvent({\n            detail: "main",\n          })\n        );\n        \n        // (index):14 Uncaught DOMException: Blocked a frame with origin "http://30.120.112.80:4000" \n        // from accessing a cross-origin frame. at http://30.120.112.80:4000/:14:21\n        iframe.contentWindow.dispatchEvent(\n          new CustomEvent({\n            detail: "iframe",\n          })\n        );\n      };\n    <\/script>\n  </body>\n</html>\n\n\n\x3c!-- 跨域的 iframe.html：http://30.120.112.80:3000/ --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>跨域的 iframe 应用</title>\n  </head>\n  <body>\n    <h1>跨域的 iframe 应用</h1>\n\n    <script>\n    \n      // (index):14 Uncaught DOMException: Blocked a frame with origin "http://30.120.112.80:3000" \n      // from accessing a cross-origin frame. at http://30.120.112.80:3000/:14:21\n      window.parent.addEventListener(\'main\', (e) => {\n        console.log(\'iframe addEventListener: \', e);\n      })\n\n      window.addEventListener(\'iframe\', (e) => {\n        console.log(\'iframe addEventListener: \', e);\n      })\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(e.p,{children:["此时可以通过 ",(0,s.jsx)(e.code,{children:"postMessage"})," 实现跨域通信："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["温馨提示：示例源码可以从 ",(0,s.jsx)(e.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/iframe-cross-origin-event",target:"_blank",rel:"noopener noreferrer",children:"demo/iframe-cross-origin-event"})," 分支获取。"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'\x3c!-- main.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>通信测试</title>\n  </head>\n  <body>\n    <h1>main 应用</h1>\n    <br />\n    \x3c!-- 跨域应用：iframe.html --\x3e\n    <iframe id="micro1" src="<%= micro1 %>"></iframe>\n    <iframe id="micro2" src="<%= micro2 %>"></iframe>\n\n    <script>\n      const micro1 = document.getElementById("micro1");\n      const micro2 = document.getElementById("micro2");\n\n      // 等待 iframe 加载完毕后才能通信\n      micro1.onload = () => {\n        // 给子应用发送消息，注意明确 targetOrigin\n        micro1.contentWindow.postMessage("main", "<%= micro1 %>");\n      };\n\n      micro2.onload = () => {\n        micro2.contentWindow.postMessage("main", "<%= micro2 %>");\n      };\n\n      // 接收来自于 iframe 的消息\n      window.addEventListener("message", (data) => {\n        // 通过 data.origin 来进行应用过滤\n        if (\n          data.origin === "<%= micro1 %>" ||\n          data.origin === "<%= micro2 %>"\n        ) {\n          console.log("main: ", data);\n        }\n      });\n    <\/script>\n  </body>\n</html>\n\n\x3c!-- micro1.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>跨域的 iframe 应用</title>\n  </head>\n  <body>\n    <h1>跨域的 iframe 应用</h1>\n\n    <script>\n      window.addEventListener("message", (data) => {\n        console.log("micro1: ", data);\n\n        if (data.origin === "<%= mainUrl %>") {\n          window.parent.postMessage("micro1", "<%= mainUrl %>");\n        }\n      });\n    <\/script>\n  </body>\n</html>\n\n\n\x3c!-- micro2.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>跨域的 iframe 应用</title>\n  </head>\n  <body>\n    <h1>跨域的 iframe 应用</h1>\n\n    <script>\n      window.addEventListener("message", (data) => {\n        console.log("micro2: ", data);\n        if (data.origin === "<%= mainUrl %>") {\n          window.parent.postMessage("micro1", "<%= mainUrl %>");\n        }\n      });\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(e.p,{children:"三者的服务端设计如下所示："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// config.js\n// https://github.com/indutny/node-ip\nimport ip from \'ip\';\nimport path from "path";\nimport { fileURLToPath } from "url";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport default {\n  port: {\n    main: 4000,\n    micro1: 3000,\n    micro2: 2000\n  },\n\n  // 获取本机的 IP 地址\n  host: ip.address(),\n\n  __dirname\n};\n\n// main-server.js\nimport path from \'path\';\n// https://github.com/expressjs/express\nimport express from \'express\';\n// ejs 中文网站: https://ejs.bootcss.com/#promo\n// ejs express 示例: https://github.com/expressjs/express/blob/master/examples/ejs/index.js\nimport ejs from "ejs";\nimport config from \'./config.js\';\nconst { port, host, __dirname } = config;\n\nconst app = express();\n\napp.engine(".html", ejs.__express);\napp.set("views", path.join(__dirname, "views"));\napp.set("view engine", "html");\n\n// 浏览器访问 http://${host}:${port.main}/ 时会渲染 views/main.html \napp.get("/", function (req, res) {\n  // 使用 ejs 模版引擎填充主应用 views/main.html 中的 micro 变量，并将其渲染到浏览器\n  res.render("main", {\n    // 填充子应用的地址，只有端口不同，iframe 应用和 main 应用跨域\n    micro1: `http://${host}:${port.micro1}`,\n    micro2: `http://${host}:${port.micro2}`\n  });\n});\n\n// 启动 Node 服务\napp.listen(port.main, host);\nconsole.log(`server start at http://${host}:${port.main}/`);\n\n\n// micro1-server.js\nimport path from \'path\';\nimport express from \'express\';\nimport ejs from "ejs";\nimport config from \'./config.js\';\nconst { port, host, __dirname } = config;\n\nconst app = express();\n\napp.engine(".html", ejs.__express);\napp.set("views", path.join(__dirname, "views"));\napp.set("view engine", "html");\n\napp.get("/", function (req, res) {\n  res.render("micro1", {\n    mainUrl:  `http://${host}:${port.main}`\n  });\n});\n\n// 启动 Node 服务\napp.listen(port.micro1, host);\nconsole.log(`server start at http://${host}:${port.micro1}/`);\n\n// micro2-server.js\nimport path from \'path\';\nimport express from \'express\';\nimport ejs from "ejs";\nimport config from \'./config.js\';\nconst { port, host, __dirname } = config;\n\nconst app = express();\n\napp.engine(".html", ejs.__express);\napp.set("views", path.join(__dirname, "views"));\napp.set("view engine", "html");\n\napp.get("/", function (req, res) {\n  res.render("micro2", {\n    mainUrl:  `http://${host}:${port.main}`\n  });\n});\n\n// 启动 Node 服务\napp.listen(port.micro2, host);\nconsole.log(`server start at http://${host}:${port.micro2}/`);\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"小结",children:["小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"本课程首先简单讲解了观察者和发布 / 订阅两种通信模式的差异，其次讲解了微前端中同域和跨域场景下的通信处理，当然真正在设计的时候可能还需要根据业务场景考虑通信的状态感知处理，例如上述的发布/订阅模式无法感知彼此的消息订阅情况，在一些业务场景中可能还需要考虑消息的握手处理。除此之外，如果在业务场景中只需要主应用将一些状态信息单向同步给子应用，那么也可以使用观察者模式实现通信。"})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}let h=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F17.%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%9A%E9%80%9A%E4%BF%A1.md"]={toc:[{text:"通信模式",id:"通信模式",depth:2},{text:"观察者模式",id:"观察者模式",depth:3},{text:"发布 / 订阅模式",id:"发布--订阅模式",depth:3},{text:"微前端通信",id:"微前端通信",depth:2},{text:"小结",id:"小结",depth:2}],title:"17.原理解析：通信",headingTitle:"17.原理解析：通信",frontmatter:{}}}}]);