"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["28464"],{35789:function(e,n,t){e.exports=t.p+"static/image/332aafafbb39042c79d2f1deedf36593.77cf3e35.gif"},316510:function(e,n,t){e.exports=t.p+"static/image/3386dcdff415dd06cacb5f3e4f59a691.6e5c0786.gif"},555088:function(e,n,t){t.r(n),t.d(n,{default:()=>ef});var s=t(552676),c=t(740453),r=t(316510);let a=t.p+"static/image/0bd902ec776ab78a5fe1ab8a8befb98d.0b057d5d.webp",i=t.p+"static/image/0c0ffb4c47bb35f457d96e233f75bec2.6a966c35.webp",o=t.p+"static/image/0f2a95fdf5bc7bb9743d2f7c3f8c9d2d.d0d196b3.gif",p=t.p+"static/image/dccfd252250383e4cb3f486491c3e7d8.22ef3ead.gif",d=t.p+"static/image/3f0dbc5e5ff9cb324b6c02cb560ae51f.944e6096.webp",l=t.p+"static/image/bff883ba78086b335660b7cb6c22ba15.87a48b97.webp",m=t.p+"static/image/80192397cac140df51e5da21c4866f6e.1775de36.gif",j=t.p+"static/image/1d1cdf5b50c4339ff264450b12945c41.5f03d619.webp",f=t.p+"static/image/4417eb89dce0f4fbe1e25198080f753d.ac13adae.gif",x=t.p+"static/image/ce5c23c9309a9f7519210cd2eb3418b5.1d7f2b6b.gif",h=t.p+"static/image/aa5a25a6f77f330992aa07161da34f70.f596fc20.gif",g=t.p+"static/image/4ccc307e0f0666d86ac0bd16b1ea4615.6830fb43.webp",b=t.p+"static/image/cf58c70016f84602cdca7dc8858f67a9.b04a3df9.webp",u=t.p+"static/image/702a163e9d991714e8ab3de9f1599e8d.50541489.webp",C=t.p+"static/image/d793c7fcf0258c5730c2858dce580d7a.42468020.webp",y=t.p+"static/image/8612b8315419de134035fb79a662dae7.85140135.gif",S=t.p+"static/image/57226e9dc8d0f406f9a8a1f94d6adb9b.e4bb7bba.gif",v=t.p+"static/image/838a4e9de43b775eb0eeef18d17d25c2.ae5d54e7.gif",E=t.p+"static/image/935634b66c4d1c385307bde84fb1769f.afa92147.webp",w=t.p+"static/image/df7a73ceac31dbde3de6be0d2f7447e2.1d12fdb7.webp",F=t.p+"static/image/e810e5867cd97b8bac42cf2d728e948d.007dfef0.gif",I=t.p+"static/image/7d8837420b8fb2fb4a2f2e5c282e9c7e.51067dfb.webp",N=t.p+"static/image/7eeace840df0e1c0b661785f3239e275.6f7f0b70.gif",A=t.p+"static/image/2ff5d8cd84cf8dde3b623bfd88417458.8579c8ee.webp",k=t.p+"static/image/7959b293b93dfcacd4cb6133f1185ac9.63e00f99.gif",B=t.p+"static/image/33da9a1f1e0aa4e1d52faf5809e6491c.8f78a20b.webp",P=t.p+"static/image/6461bf65d02700faa64e1fd9829f47a2.89a0327a.gif",_=t.p+"static/image/ccfd3e366edec8659804dd1b8e93864f.7b4c4af9.gif",V=t.p+"static/image/7a9ca83e09d52b24dd8f556dcaa43f8a.d93f2302.gif",M=t.p+"static/image/e6ee55e50b1f7c1af9496f338eb032e8.cfa73f7e.webp",R=t.p+"static/image/43c13011b93137c858ed5035dc876ae3.2d9947d9.webp",O=t.p+"static/image/3f92cfd5615669026f8b19cbb3e8d279.69ab203a.gif",z=t.p+"static/image/5e4fc12e8049c52712849940440a5613.ede9c454.gif",K=t.p+"static/image/7a2f971983fb2a2ea89c3d9fbdf2caa7.191454ac.gif",T=t.p+"static/image/fa875cf3799f8bdf0eda21c340de04ea.550d3117.webp",D=t.p+"static/image/83e92f3684165024d5d4ea2d9b75375c.7cff5607.webp",G=t.p+"static/image/89d0b5d5cb09baca0d24c60a1f50cfef.c76da1af.webp",J=t.p+"static/image/9303d5f7866cd6321dc8f389616152e7.441e405b.webp",L=t.p+"static/image/493659036ca9a338c114b3387a8f7c95.49ff81cc.webp",$=t.p+"static/image/6501101db864eea93bce4b76058e399b.0fc8707d.webp",Q=t.p+"static/image/ea3f0e178dbc5890232e7631fd5e9cfa.aa45bb17.webp",U=t.p+"static/image/5f5c58d96b5d4224f30fad8b56b105bd.dc372f8e.webp",W=t.p+"static/image/7483d3c2917a1adc84ee0f92f5e8f300.2fe2ac08.webp",q=t.p+"static/image/978e3e4535a0d97644bb311a5b275245.c8c6edf9.webp",H=t.p+"static/image/664d14faee8280eba88e6ac5b15a1f44.280fe32b.webp",X=t.p+"static/image/21f9d10dbce216feeb92bfb0bd119909.20d2cca3.webp";var Y=t(35789);let Z=t.p+"static/image/1e026b5bf22d6b6d20ae0e40e4b9c01b.74fd4431.gif",ee=t.p+"static/image/13714b97965f6c0de54e9e462c5f558e.f7375148.webp",en=t.p+"static/image/679ef9c0353440f88f1f669eb8a033c1.1a31b0b2.webp",et=t.p+"static/image/05575d2b1963f757a7394b2cefb79301.caedb09c.webp",es=t.p+"static/image/89db29dde09a8072562b05e03b299de0.7252ea09.webp",ec=t.p+"static/image/602ca417f011803a0a229dea8da714fe.ad3d7f80.gif",er=t.p+"static/image/9a3b47eb332752f3002ad494931163e3.95cce9e4.webp",ea=t.p+"static/image/09aae981e3dfe86eb7c39b5ed9387b9c.b40d9427.webp",ei=t.p+"static/image/4423e9893960eceaa0531efa4f436a47.162c5200.webp",eo=t.p+"static/image/bcf816817281982951c48e37d0db58b2.d0c63851.webp",ep=t.p+"static/image/5536489f1fe61567b39e4839b0626953.992d1a87.webp",ed=t.p+"static/image/acba492b97b261d47035f087540ba07f.9844afea.webp",el=t.p+"static/image/b5449475f881fab78cd24a0acc229f71.75fd5f20.gif";function em(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"第71章低代码编辑器组件属性样式编辑",children:["第71章—低代码编辑器：组件属性、样式编辑",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第71章低代码编辑器组件属性样式编辑",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"\uFEFF这节我们来做属性编辑的功能。"}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.a,{href:"https://aisuda.github.io/amis-editor-demo/#/edit/0",target:"_blank",rel:"noopener noreferrer",children:"amis"})," 中，选中不同组件会在右边展示对应的属性："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:el,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"编辑属性，会修改 json 中的内容："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ed,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们只要在选中组件的时候，在右边展示组件对应属性的表单就行了。"}),"\n",(0,s.jsx)(n.p,{children:"不同组件的属性是不同的，这部分明显是在 componentConfig 里配置。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ep,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export interface ComponentSetter {\n    name: string;\n    label: string;\n    type: string;\n    [key: string]: any;\n}\n\nexport interface ComponentConfig {\n    name: string;\n    defaultProps: Record<string, any>,\n    desc: string;\n    setter?: ComponentSetter[]\n    component: any\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"先给 Button 加一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:eo,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"用 setter 属性来保存属性表单的配置，这里有 type、text 两个属性，就是两个表单项。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"{\n  name: 'type',\n  label: '按钮类型',\n  type: 'select',\n  options: [\n    {label: '主按钮', value: 'primary'},\n    {label: '次按钮', value: 'default'},\n  ],\n},\n{\n  name: 'text',\n  label: '文本',\n  type: 'input',\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"name 是字段名、label 是前面的文案，type 是表单类型。"}),"\n",(0,s.jsx)(n.p,{children:"select 类型的表单多一个 options 来配置选项。"}),"\n",(0,s.jsx)(n.p,{children:"在 Setting 组件里取出 curComponentId 对应的属性，渲染成表单就好了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ei,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"其实 Setting 部分不只是设置属性，还可以设置样式、绑定事件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ea,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:er,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们先预留出位置来："}),"\n",(0,s.jsx)(n.p,{children:"components/Setting/index.tsx"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Segmented } from 'antd';\nimport { useState } from 'react';\nimport { useComponetsStore } from '../../stores/components';\nimport { ComponentAttr } from './ComponentAttr';\nimport { ComponentEvent } from './ComponentEvent';\nimport { ComponentStyle } from './ComponentStyle';\n\nexport function Setting() {\n\n    const { curComponentId } = useComponetsStore();\n\n    const [key, setKey] = useState<string>('属性');\n\n    if (!curComponentId) return null;\n  \n    return <div >\n        <Segmented value={key} onChange={setKey} block options={['属性', '样式', '事件']} />\n        <div>\n            {\n                key === '属性' && <ComponentAttr />\n            }\n            {\n                key === '样式' && <ComponentStyle />\n            }\n            {\n                key === '事件' && <ComponentEvent />\n            }\n        </div>\n    </div>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"components/Setting/ComponentAttr.tsx"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export function ComponentAttr() {\n    return <div>ComponentAttr</div>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"components/Setting/ComponentStyle.tsx"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export function ComponentStyle() {\n    return <div>ComponentStyle</div>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"components/Setting/ComponentEvent.tsx"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export function ComponentEvent() {\n    return <div>ComponentEvent</div>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"如果 curComponentId 为 null，也就是没有选中的组件，就 return null。"}),"\n",(0,s.jsxs)(n.p,{children:["用 antd 的 ",(0,s.jsx)(n.a,{href:"https://ant-design.antgroup.com/components/segmented-cn",target:"_blank",rel:"noopener noreferrer",children:"Segmentd 组件"}),"来做上面的 tab。"]}),"\n",(0,s.jsx)(n.p,{children:"然后分别用 ComponentAttr、ComponentStyle、ComponentEvent 组件渲染组件的属性、样式、事件。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ec,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(n.p,{children:"然后来写 ComponentAttr 组件："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Form, Input, Select } from 'antd';\nimport { useEffect } from 'react';\nimport { ComponentConfig, ComponentSetter, useComponentConfigStore } from '../../stores/component-config';\nimport { useComponetsStore } from '../../stores/components';\n\nexport function ComponentAttr() {\n\n  const [form] = Form.useForm();\n\n  const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n  const { componentConfig } = useComponentConfigStore();\n\n  useEffect(() => {\n    const data = form.getFieldsValue();\n    form.setFieldsValue({...data, ...curComponent?.props});\n  }, [curComponent])\n\n  if (!curComponentId || !curComponent) return null;\n  \n  function renderFormElememt(setting: ComponentSetter) {\n    const { type, options } = setting;\n  \n    if (type === 'select') {\n      return <Select options={options} />\n    } else if (type === 'input') {\n      return <Input />\n    }\n  }\n\n  function valueChange(changeValues: ComponentConfig) {\n    if (curComponentId) {\n      updateComponentProps(curComponentId, changeValues);\n    }\n  }\n\n  return (\n    <Form\n      form={form}\n      onValuesChange={valueChange}\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 14 }}\n    >\n      <Form.Item label=\"组件id\">\n        <Input value={curComponent.id} disabled />\n      </Form.Item>\n      <Form.Item label=\"组件名称\">\n        <Input value={curComponent.name} disabled />\n      </Form.Item>\n      <Form.Item label=\"组件描述\">\n        <Input value={curComponent.desc} disabled/>\n      </Form.Item>\n      {\n        componentConfig[curComponent.name]?.setter?.map(setter => (\n          <Form.Item key={setter.name} name={setter.name} label={setter.label}>\n            {renderFormElememt(setter)}\n          </Form.Item>\n        ))\n      }\n    </Form>\n  )\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"首先，如果 curComponentId 为 null，也就是没有选中组件的时候，返回 null"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:es,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当 curComponent 变化的时候，把 props 设置到表单用于回显数据："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:et,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当表单 value 变化的时候，同步到 store："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:en,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"下面就是表单项目，分别渲染 id、name、desc 属性，还有组件对应的 setter："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:ee,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"id、name、desc 都不可修改，设置 disabled。"}),"\n",(0,s.jsx)(n.p,{children:"setter 要根据类型来渲染不同的表单组件，比如 Select、Input。"}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Z,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，当切换到 Page、Container、Button 组件的时候，展示了对应属性的表单。"}),"\n",(0,s.jsx)(n.p,{children:"现在按钮类型、文本都是可以修改的，画布区会同步变化："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(n.p,{children:"当然，现在我们组件还不多，之后组件多了以后，表单项类型会更多。"}),"\n",(0,s.jsx)(n.p,{children:"到时候扩展这里就可以了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:X,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"扩展更多的 setter 类型，支持 radio、checkbox 等表单项。"}),"\n",(0,s.jsx)(n.p,{children:"还有，现在这里贴的比较紧，我们加个 padding："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:H,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:W,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"好多了。"}),"\n",(0,s.jsx)(n.p,{children:"然后我们再来写下样式的编辑："}),"\n",(0,s.jsx)(n.p,{children:"在 components 的 store 添加 styles 和更新 styles 的方法："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Q,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"updateComponentStyles: (componentId: number, styles: CSSProperties) => void;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"updateComponentStyles: (componentId, styles) =>\n    set((state) => {\n      const component = getComponentById(componentId, state.components);\n      if (component) {\n        component.styles = {...component.styles, ...styles};\n\n        return {components: [...state.components]};\n      }\n\n      return {components: [...state.components]};\n    })   \n"})}),"\n",(0,s.jsx)(n.p,{children:"在渲染组件的时候传进去："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:$,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"给渲染的组件参数加一个 styles 参数："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:L,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"把 styles 渲染出来："}),"\n",(0,s.jsx)(n.p,{children:"Button 组件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:J,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"Container 组件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"Page 组件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后我们在 addComponent 的时候加上个 styles 试试："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:T,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:K,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"生效了。"}),"\n",(0,s.jsx)(n.p,{children:"这样我们就把 styles 保存在了 json 里，并且渲染的时候设置到了组件。"}),"\n",(0,s.jsx)(n.p,{children:"然后做下 styles 的编辑就好了。"}),"\n",(0,s.jsx)(n.p,{children:"amis 的样式编辑上面是一些 css 的样式可以选择，下面还可以直接写 css："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:z,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"而且每个组件配置的样式都不同："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:O,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这个也和组件 props 一样，需要在 componentConfig 配下表单项："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:R,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"stylesSetter?: ComponentSetter[]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"stylesSetter: [\n    {\n        name: 'width',\n        label: '宽度',\n        type: 'inputNumber',\n    },\n    {\n        name: 'height',\n        label: '高度',\n        type: 'inputNumber',\n    }\n],\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后在 ComponentStyle 里面渲染下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Form, Input, InputNumber, Select } from 'antd';\nimport { CSSProperties, useEffect } from 'react';\nimport { ComponentConfig, ComponentSetter, useComponentConfigStore } from '../../stores/component-config';\nimport { useComponetsStore } from '../../stores/components';\n\nexport function ComponentStyle() {\n\n  const [form] = Form.useForm();\n\n  const { curComponentId, curComponent, updateComponentStyles } = useComponetsStore();\n  const { componentConfig } = useComponentConfigStore();\n\n  useEffect(() => {\n    const data = form.getFieldsValue();\n    form.setFieldsValue({...data, ...curComponent?.styles});\n  }, [curComponent])\n\n  if (!curComponentId || !curComponent) return null;\n\n  function renderFormElememt(setting: ComponentSetter) {\n    const { type, options } = setting;\n  \n    if (type === 'select') {\n      return <Select options={options} />\n    } else if (type === 'input') {\n      return <Input />\n    } else if (type === 'inputNumber') {\n        return <InputNumber />\n    }\n  }\n\n  function valueChange(changeValues: CSSProperties) {\n    if (curComponentId) {\n        updateComponentStyles(curComponentId, changeValues);\n    }\n  }\n\n  return (\n    <Form\n      form={form}\n      onValuesChange={valueChange}\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 14 }}\n    >\n      {\n        componentConfig[curComponent.name]?.stylesSetter?.map(setter => (\n          <Form.Item key={setter.name} name={setter.name} label={setter.label}>\n            {renderFormElememt(setter)}\n          </Form.Item>\n        ))\n      }\n    </Form>\n  )\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"和 ComponentAttr 没啥区别，就是把更新方法换成 updateComponentStyles"}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，样式修改生效了。"}),"\n",(0,s.jsx)(n.p,{children:"Button 组件支持的样式配置肯定不是 width、height，后面再完善就行。"}),"\n",(0,s.jsx)(n.p,{children:"我们把直接写 css 的方式也实现下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"或者用类似 tailwind 的原子化 className 的方式，让用户自己选择，添加 className 也行："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样比写 css 上手成本低一些。"}),"\n",(0,s.jsx)(n.p,{children:"用 @monaco-editor/react 来做 css 编辑器，它自带了代码提示功能。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save @monaco-editor/react\n"})}),"\n",(0,s.jsx)(n.p,{children:"封装个组件："}),"\n",(0,s.jsx)(n.p,{children:"components/Setting/CssEditor.tsx"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import MonacoEditor, { OnMount, EditorProps } from '@monaco-editor/react'\nimport { editor } from 'monaco-editor'\nimport { useEffect, useRef } from 'react'\n\nexport interface EditorFile {\n    name: string\n    value: string\n    language: string\n}\n\ninterface Props {\n    value: string\n    onChange?: EditorProps['onChange']\n    options?: editor.IStandaloneEditorConstructionOptions\n}\n\nexport default function CssEditor(props: Props) {\n\n    const {\n        value,\n        onChange,\n        options\n    } = props;\n\n    const handleEditorMount: OnMount = (editor, monaco) => {\n      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyJ, () => {\n          editor.getAction('editor.action.formatDocument')?.run()\n      });\n    }\n\n    return <MonacoEditor\n        height={'100%'}\n        path='component.css'\n        language='css'\n        onMount={handleEditorMount}\n        onChange={onChange}\n        value={value}\n        options={\n            {\n                fontSize: 14,\n                scrollBeyondLastLine: false,\n                minimap: {\n                  enabled: false,\n                },\n                scrollbar: {\n                  verticalScrollbarSize: 6,\n                  horizontalScrollbarSize: 6,\n                },\n                ...options\n            }\n        }\n    />\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"之前写 react playground 的时候用过 monoco editor。"}),"\n",(0,s.jsx)(n.p,{children:"这里配置差不多。"}),"\n",(0,s.jsx)(n.p,{children:"支持 cmd + J 快捷键来格式化。"}),"\n",(0,s.jsx)(n.p,{children:"然后在 ComponentStyle 组件里用一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"<div className='h-[200px] border-[1px] border-[#ccc]'>\n    <CssEditor value={`.comp{\\n\\n}`}/>\n</div>\n"})}),"\n",(0,s.jsx)(n.p,{children:"试一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后做下自定义 css 到 store 的同步："}),"\n",(0,s.jsx)(n.p,{children:"onChange 的时候打印下值："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"触发有点频繁了，我们引入 lodash 做下 debounce："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save lodash-es\nnpm install --save-dev @types/lodash-es\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"加个 500ms 的 debounce。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:F,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样就好多了。"}),"\n",(0,s.jsx)(n.p,{children:"然后把它保存到 store："}),"\n",(0,s.jsx)(n.p,{children:"store 里保存的是 对象，而现在拿到的是 css 字符串，需要 parse 一下。"}),"\n",(0,s.jsxs)(n.p,{children:["用 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/style-to-object",target:"_blank",rel:"noopener noreferrer",children:"style-to-object"})," 这个包："]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:w,alt:""}),"\n调用下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const handleEditorChange = debounce((value) => {\n    setCss(value);\n\n    let css: Record<string, any> = {};\n\n    try {\n        const cssStr = value.replace(/\\/\\*.*\\*\\//, '') // 去掉注释 /** */\n            .replace(/(\\.?[^{]+{)/, '') // 去掉 .comp {\n            .replace('}', '');// 去掉 }\n\n        styleToObject(cssStr, (name, value) => {\n            css[name.replace(/-\\w/, (item) => item.toUpperCase().replace('-', ''))] = value;\n        });\n\n        console.log(css);\n        updateComponentStyles(curComponentId, css);\n    } catch(e) {}\n}, 500);\n"})}),"\n",(0,s.jsx)(n.p,{children:"style-to-object 只支持 style 的 parse："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们需要把注释、.comp { } 去掉"}),"\n",(0,s.jsx)(n.p,{children:"只保留中间部分。"}),"\n",(0,s.jsx)(n.p,{children:"然后 parse 完之后是 font-size、border-color 这种，转为驼峰之后更新到 store。"}),"\n",(0,s.jsx)(n.p,{children:"试一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，打印了 css parse 之后的对象并且更新到的 store。"}),"\n",(0,s.jsx)(n.p,{children:"中间的组件也应用了这个样式。"}),"\n",(0,s.jsx)(n.p,{children:"这时候上面的样式表单，下面直接写的 css 都能生效："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"但有个问题："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"删除这些 css 后，左边的样式不会消失。"}),"\n",(0,s.jsx)(n.p,{children:"因为我们更新 styles 的时候和已有的 style 做了合并："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"所以在编辑器里删除 css，合并后依然保留着之前的样式。"}),"\n",(0,s.jsx)(n.p,{children:"我们支持下整个替换就好了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"component.styles = replace ? {...styles} : {...component.styles, ...styles};\n"})}),"\n",(0,s.jsx)(n.p,{children:"如果 replace 参数传了 true，就整个替换 styles。"}),"\n",(0,s.jsx)(n.p,{children:"然后用的时候指定 replace 为 true："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"updateComponentStyles(curComponentId, {...form.getFieldsValue(), ...css}, true);\n"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"现在两部分样式都会生效。"}),"\n",(0,s.jsx)(n.p,{children:"删除下面编辑器的样式也生效："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"现在还有个问题，切换选中的组件的时候，表单没清空："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"reset 一下就好了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"form.resetFields();\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"表单好了，下面的编辑器也重置下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"声明一个 css 的 state，curComponent 改变的时候设置 store 里的内容到 state。"}),"\n",(0,s.jsx)(n.p,{children:"然后 toCSSStr 方法就是拼接 css 字符串的。"}),"\n",(0,s.jsx)(n.p,{children:"要注意 with、height 要补 px，因为上面的表单的值保存的是数字。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const [css, setCss] = useState<string>(`.comp{\\n\\n}`);\n\nuseEffect(() => {\n    form.resetFields();\n\n    const data = form.getFieldsValue();\n    form.setFieldsValue({...data, ...curComponent?.styles});\n\n    setCss(toCSSStr(curComponent?.styles!))\n}, [curComponent])\n\nfunction toCSSStr(css: Record<string, any>) {\n    let str = `.comp {\\n`;\n    for(let key in css) {\n        let value = css[key];\n        if(!value) {\n            continue;\n        }\n        if(['width', 'height'].includes(key) &&  !value.toString().endsWith('px')) {\n            value += 'px';\n        }\n\n        str += `\\t${key}: ${value};\\n`\n    }\n    str += `}`;\n    return str;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样，当选中的组件切换的时候，样式的切换就完成了。"}),"\n",(0,s.jsx)(n.p,{children:"但还有一个问题："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"当样式改变的时候，编辑框的大小不会跟着改变。"}),"\n",(0,s.jsx)(n.p,{children:"但我们设置了 components 变化会 updatePosition 了呀："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这是因为 components 变了，到渲染完成，然后再 getBoundingClientRect 拿到改变后的宽高是有一段时间的。"}),"\n",(0,s.jsx)(n.p,{children:"加个延迟就好了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["案例代码上传了",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"git reset --hard 32a88a2f26100be09727cb6ba1c7c33d5f491523\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节我们实现了属性和样式的编辑。"}),"\n",(0,s.jsx)(n.p,{children:"在 componentConfig 里加了 setter、stylesSetter 来保存不同组件的属性、样式表单配置。"}),"\n",(0,s.jsx)(n.p,{children:"然后在 Setting 区域渲染对应的表单。"}),"\n",(0,s.jsx)(n.p,{children:"表单变化的时候，修改 components 里对应的 styles、props 信息，传入组件渲染。"}),"\n",(0,s.jsx)(n.p,{children:"样式编辑我们还支持直接写 css，用 @monaco-editor/react 做的编辑器，然后编辑完用 style-to-object 转为对象后保存到 store。"}),"\n",(0,s.jsx)(n.p,{children:"当然，现在 setter 的表单配置不够完善，当后面新加组件的时候，需要什么表单类型再扩展就行。"})]})}function ej(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(em,{...e})}):em(e)}let ef=ej;ej.__RSPRESS_PAGE_META={},ej.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC71%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%B1%9E%E6%80%A7%E3%80%81%E6%A0%B7%E5%BC%8F%E7%BC%96%E8%BE%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第71章—低代码编辑器：组件属性、样式编辑",headingTitle:"第71章—低代码编辑器：组件属性、样式编辑",frontmatter:{}}}}]);