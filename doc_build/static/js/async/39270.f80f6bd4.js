"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["39270"],{826180:function(e,r,n){n.r(r),n.d(r,{default:()=>c});var s=n(552676),i=n(740453);function d(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",p:"p",code:"code",ol:"ol",img:"img",pre:"pre",strong:"strong"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"22进阶-9生成-swagger-在线文档",children:["22进阶 9：生成 Swagger 在线文档",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#22进阶-9生成-swagger-在线文档",children:"#"})]}),"\n",(0,s.jsxs)(r.h2,{id:"本节核心内容",children:["本节核心内容",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#本节核心内容",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"如何给 API 添加 Swagger 文档功能"}),"\n",(0,s.jsx)(r.li,{children:"如何编写 API 文档"}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["本小节源码下载路径：",(0,s.jsx)(r.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo17",target:"_blank",rel:"noopener noreferrer",children:"demo17"})]}),"\n",(0,s.jsx)(r.p,{children:"可先下载源码到本地，结合源码理解后续内容，边学边练。"}),"\n",(0,s.jsxs)(r.p,{children:["本小节的代码是基于 ",(0,s.jsx)(r.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo16",target:"_blank",rel:"noopener noreferrer",children:"demo16"})," 来开发的。"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"背景",children:["背景",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#背景",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"开发 API 服务，API 文档必不可少，很多人选择手写 API 文档，手写 API 文档有很多问题，比如工作量大、手写容易出错、更新麻烦、格式不固定、维护困难等。所以在实际的开发中，建议自动生成 API 文档。"}),"\n",(0,s.jsxs)(r.p,{children:["本小册所用的 API 服务器 RESTful 框架采用的是 ",(0,s.jsx)(r.code,{children:"gin"}),"，",(0,s.jsx)(r.code,{children:"gin"})," 在 GitHub 上有很多 middleware 可用，其中就有可以自动生成 Swagger 文档的 ",(0,s.jsx)(r.code,{children:"gin-swagger"})," middleware。"]}),"\n",(0,s.jsxs)(r.h1,{id:"swagger-简介",children:["Swagger 简介",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#swagger-简介",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"Swagger 是一个强大的 API 文档构建工具，可以自动为 RESTful API 生成 Swagger 格式的文档，可以在浏览器中查看 API 文档，也可以通过调用接口来返回 API 文档（JSON 格式）。Swagger 通常会展示如下信息："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"HTTP 方法（GET、POST、PUT、DELETE 等）"}),"\n",(0,s.jsx)(r.li,{children:"URL 路径"}),"\n",(0,s.jsx)(r.li,{children:"HTTP 消息体（消息体中的参数名和类型）"}),"\n",(0,s.jsx)(r.li,{children:"参数位置"}),"\n",(0,s.jsx)(r.li,{children:"参数是否必选"}),"\n",(0,s.jsx)(r.li,{children:"返回的参数（参数名和类型）"}),"\n",(0,s.jsx)(r.li,{children:"请求和返回的媒体类型"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Swagger 还有一个强大的功能：可以通过 API 文档描述的参数来构建请求，测试 API。"}),"\n",(0,s.jsx)(r.p,{children:"浏览器访问截图："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/6/18/1640ef86266cb60a?w=2525&h=813&f=jpeg&s=71333",alt:""})}),"\n",(0,s.jsx)(r.p,{children:"JSON 返回截图："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/6/18/1640ef885d3efee4?w=2059&h=942&f=jpeg&s=98919",alt:""})}),"\n",(0,s.jsxs)(r.h2,{id:"swagger-配置步骤",children:["Swagger 配置步骤",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#swagger-配置步骤",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["我们用 ",(0,s.jsx)(r.a,{href:"https://github.com/swaggo/gin-swagger",target:"_blank",rel:"noopener noreferrer",children:"gin-swagger"})," gin middleware来生成 Swagger API 文档。步骤如下："]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["安装 ",(0,s.jsx)(r.code,{children:"swag"})," 命令"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"$ mkdir -p $GOPATH/src/github.com/swaggo\n$ cd $GOPATH/src/github.com/swaggo\n$ git clone https://github.com/swaggo/swag\n$ cd swag/cmd/swag/\n$ go install -v\n"})}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["因为该包引用 ",(0,s.jsx)(r.code,{children:"golang.org"})," 中的包，而网络环境原因，一般很难连上 ",(0,s.jsx)(r.code,{children:"golang.org"}),"，所以这里不采用 ",(0,s.jsx)(r.code,{children:"go get"})," 方式安装。"]}),"\n",(0,s.jsx)(r.p,{children:"swag 的依赖包已经包含在第 4 节的 vendor 包下。"}),"\n"]}),"\n",(0,s.jsxs)(r.ol,{start:"2",children:["\n",(0,s.jsxs)(r.li,{children:["进入 apiserver 根目录执行 ",(0,s.jsx)(r.code,{children:"swag init"})]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"$ cd $GOPATH/src/apiserver\n$ swag init\n"})}),"\n",(0,s.jsxs)(r.ol,{start:"3",children:["\n",(0,s.jsxs)(r.li,{children:["下载 ",(0,s.jsx)(r.code,{children:"gin-swagger"})]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"$ cd $GOPATH/src/github.com/swaggo\n$ git clone https://github.com/swaggo/gin-swagger\n"})}),"\n",(0,s.jsxs)(r.ol,{start:"4",children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["在 ",(0,s.jsx)(r.code,{children:"router/router.go"})," 中添加 swagger 路由（详见 ",(0,s.jsx)(r.a,{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo17/router/router.go",target:"_blank",rel:"noopener noreferrer",children:"demo17/router/router.go"}),"）"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/6/18/1640f3fac8635ff0?w=2164&h=1259&f=jpeg&s=196291",alt:""})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"编写 API 注释，Swagger 中需要将相应的注释或注解编写到方法上，再利用生成器自动生成说明文件"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["这里用创建用户 API 来举例，其它 API 请参考 ",(0,s.jsx)(r.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo17/handler/user",target:"_blank",rel:"noopener noreferrer",children:"demo17/handler/user"})," 下的 API 文件。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'package user\n\nimport (\n    ...\n)\n\n\n// @Summary Add new user to the database\n// @Description Add a new user\n// @Tags user\n// @Accept  json\n// @Produce  json\n// @Param user body user.CreateRequest true "Create a new user"\n// @Success 200 {object} user.CreateResponse "{"code":0,"message":"OK","data":{"username":"kong"}}"\n// @Router /user [post]\nfunc Create(c *gin.Context) {\n    ...\n}\n\n'})}),"\n",(0,s.jsxs)(r.ol,{start:"6",children:["\n",(0,s.jsxs)(r.li,{children:["执行 ",(0,s.jsx)(r.code,{children:"swag init"}),"，在 apiserver 根目录下生成 ",(0,s.jsx)(r.code,{children:"docs"})," 目录"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"$ swag init\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"文档语法说明"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Summary：简单阐述 API 的功能"}),"\n",(0,s.jsx)(r.li,{children:"Description：API 详细描述"}),"\n",(0,s.jsx)(r.li,{children:"Tags：API 所属分类"}),"\n",(0,s.jsx)(r.li,{children:"Accept：API 接收参数的格式"}),"\n",(0,s.jsx)(r.li,{children:"Produce：输出的数据格式，这里是 JSON 格式"}),"\n",(0,s.jsxs)(r.li,{children:["Param：参数，分为 6 个字段，其中第 6 个字段是可选的，各字段含义为：","\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"参数名称"}),"\n",(0,s.jsx)(r.li,{children:"参数在 HTTP 请求中的位置（body、path、query）"}),"\n",(0,s.jsx)(r.li,{children:"参数类型（string、int、bool 等）"}),"\n",(0,s.jsx)(r.li,{children:"是否必须（true、false）"}),"\n",(0,s.jsx)(r.li,{children:"参数描述"}),"\n",(0,s.jsxs)(r.li,{children:["选项，这里用的是 ",(0,s.jsx)(r.code,{children:"default()"})," 用来指定默认值"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["Success：成功返回数据格式，分为 4 个字段","\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"HTTP 返回 Code"}),"\n",(0,s.jsx)(r.li,{children:"返回数据类型"}),"\n",(0,s.jsx)(r.li,{children:"返回数据模型"}),"\n",(0,s.jsx)(r.li,{children:"说明"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["路由格式，分为 2 个字段：","\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"API 路径"}),"\n",(0,s.jsx)(r.li,{children:"HTTP 方法"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["API 文档编写规则请参考 ",(0,s.jsx)(r.a,{href:"https://swaggo.github.io/swaggo.io/declarative_comments_format/",target:"_blank",rel:"noopener noreferrer",children:"See Declarative Comments Format"}),"。"]}),"\n",(0,s.jsxs)(r.p,{children:["API 文档有更新时，要重新执行 ",(0,s.jsx)(r.code,{children:"swag init"})," 并重新编译 apiserver。"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"编译并运行",children:["编译并运行",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#编译并运行",children:"#"})]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"下载 apiserver_demos 源码包（如前面已经下载过，请忽略此步骤）"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"$ git clone https://github.com/lexkong/apiserver_demos\n"})}),"\n",(0,s.jsxs)(r.ol,{start:"2",children:["\n",(0,s.jsxs)(r.li,{children:["将 ",(0,s.jsx)(r.code,{children:"apiserver_demos/demo17"})," 复制为 ",(0,s.jsx)(r.code,{children:"$GOPATH/src/apiserver"})]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"$ cp -a apiserver_demos/demo17/ $GOPATH/src/apiserver\n"})}),"\n",(0,s.jsxs)(r.ol,{start:"3",children:["\n",(0,s.jsx)(r.li,{children:"在 apiserver 目录下编译源码"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"$ cd $GOPATH/src/apiserver\n$ make\n"})}),"\n",(0,s.jsxs)(r.p,{children:["执行 ",(0,s.jsx)(r.code,{children:"./apiserver"})," 启动 apiserver 后，在浏览器中打开： ",(0,s.jsx)(r.code,{children:"http://localhost:8080/swagger/index.html"})," 访问 Swagger 2.0 API文档。"]}),"\n",(0,s.jsx)(r.p,{children:"API 总览："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/6/18/1640f0143a77544d?w=2514&h=1169&f=jpeg&s=121870",alt:""})}),"\n",(0,s.jsxs)(r.p,{children:["点击 ",(0,s.jsx)(r.code,{children:"/login"}),"，查看 login API 详情："]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2018/6/6/163d0b2e58caaf13?w=1809&h=929&f=png&s=55566",alt:""})}),"\n",(0,s.jsxs)(r.h2,{id:"小结",children:["小结",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["本小节介绍了如何生成 Swagger 文档，并演示了具体的效果。本小节也是动手操作的最后一个小节，至此恭喜你成功构建了一个企业级的 API 服务器，",(0,s.jsx)(r.a,{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo17",target:"_blank",rel:"noopener noreferrer",children:"demo17"})," 即为此 API 服务器的最终源码。"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Go%20%E8%AF%AD%E8%A8%80%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%20RESTful%20API%20%E6%9C%8D%E5%8A%A1%2F22%E8%BF%9B%E9%98%B6%209%EF%BC%9A%E7%94%9F%E6%88%90%20Swagger%20%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3.md"]={toc:[{text:"本节核心内容",id:"本节核心内容",depth:2},{text:"背景",id:"背景",depth:2},{text:"Swagger 配置步骤",id:"swagger-配置步骤",depth:2},{text:"编译并运行",id:"编译并运行",depth:2},{text:"小结",id:"小结",depth:2}],title:"Swagger 简介",headingTitle:"Swagger 简介",frontmatter:{}}}}]);