"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["75477"],{678444:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var s=r(552676),c=r(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",h3:"h3",ul:"ul",li:"li"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"30最新提案",children:["30.最新提案",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#30最新提案",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本章介绍一些尚未进入标准、但很有希望的最新提案。"}),"\n",(0,s.jsxs)(n.h2,{id:"do-表达式",children:["do 表达式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#do-表达式",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"{\n  let t = f();\n  t = t * t + 1;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，块级作用域将两个语句封装在一起。但是，在块级作用域以外，没有办法得到",(0,s.jsx)(n.code,{children:"t"}),"的值，因为块级作用域不返回值，除非",(0,s.jsx)(n.code,{children:"t"}),"是全局变量。"]}),"\n",(0,s.jsxs)(n.p,{children:["现在有一个",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-do-expressions",target:"_blank",rel:"noopener noreferrer",children:"提案"}),"，使得块级作用域可以变为表达式，也就是说可以返回值，办法就是在块级作用域之前加上",(0,s.jsx)(n.code,{children:"do"}),"，使它变为",(0,s.jsx)(n.code,{children:"do"}),"表达式，然后就会返回内部最后执行的表达式的值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let x = do {\n  let t = f();\n  t * t + 1;\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，变量",(0,s.jsx)(n.code,{children:"x"}),"会得到整个块级作用域的返回值（",(0,s.jsx)(n.code,{children:"t * t + 1"}),"）。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"do"}),"表达式的逻辑非常简单：封装的是什么，就会返回什么。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 等同于 <表达式>\ndo { <表达式>; }\n\n// 等同于 <语句>\ndo { <语句> }\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"do"}),"表达式的好处是可以封装多个语句，让程序更加模块化，就像乐高积木那样一块块拼装起来。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let x = do {\n  if (foo()) { f() }\n  else if (bar()) { g() }\n  else { h() }\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码的本质，就是根据函数",(0,s.jsx)(n.code,{children:"foo"}),"的执行结果，调用不同的函数，将返回结果赋给变量",(0,s.jsx)(n.code,{children:"x"}),"。使用",(0,s.jsx)(n.code,{children:"do"}),"表达式，就将这个操作的意图表达得非常简洁清晰。而且，",(0,s.jsx)(n.code,{children:"do"}),"块级作用域提供了单独的作用域，内部操作可以与全局作用域隔绝。"]}),"\n",(0,s.jsxs)(n.p,{children:["值得一提的是，",(0,s.jsx)(n.code,{children:"do"}),"表达式在 JSX 语法中非常好用。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"return (\n  <nav>\n    <Home />\n    {\n      do {\n        if (loggedIn) {\n          <LogoutButton />\n        } else {\n          <LoginButton />\n        }\n      }\n    }\n  </nav>\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，如果不用",(0,s.jsx)(n.code,{children:"do"}),"表达式，就只能用三元判断运算符（",(0,s.jsx)(n.code,{children:"?:"}),"）。那样的话，一旦判断逻辑复杂，代码就会变得很不易读。"]}),"\n",(0,s.jsxs)(n.h2,{id:"throw-表达式",children:["throw 表达式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#throw-表达式",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript 语法规定",(0,s.jsx)(n.code,{children:"throw"}),"是一个命令，用来抛出错误，不能用于表达式之中。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 报错\nconsole.log(throw new Error());\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"console.log"}),"的参数必须是一个表达式，如果是一个",(0,s.jsx)(n.code,{children:"throw"}),"语句就会报错。"]}),"\n",(0,s.jsxs)(n.p,{children:["现在有一个",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-throw-expressions",target:"_blank",rel:"noopener noreferrer",children:"提案"}),"，允许",(0,s.jsx)(n.code,{children:"throw"}),"用于表达式。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// 参数的默认值\nfunction save(filename = throw new TypeError("Argument required")) {\n}\n\n// 箭头函数的返回值\nlint(ast, {\n  with: () => throw new Error("avoid using \'with\' statements.")\n});\n\n// 条件表达式\nfunction getEncoder(encoding) {\n  const encoder = encoding === "utf8" ?\n    new UTF8Encoder() :\n    encoding === "utf16le" ?\n      new UTF16Encoder(false) :\n      encoding === "utf16be" ?\n        new UTF16Encoder(true) :\n        throw new Error("Unsupported encoding");\n}\n\n// 逻辑表达式\nclass Product {\n  get id() {\n    return this._id;\n  }\n  set id(value) {\n    this._id = value || throw new Error("Invalid value");\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"throw"}),"都出现在表达式里面。"]}),"\n",(0,s.jsxs)(n.p,{children:["语法上，",(0,s.jsx)(n.code,{children:"throw"}),"表达式里面的",(0,s.jsx)(n.code,{children:"throw"}),"不再是一个命令，而是一个运算符。为了避免与",(0,s.jsx)(n.code,{children:"throw"}),"命令混淆，规定",(0,s.jsx)(n.code,{children:"throw"}),"出现在行首，一律解释为",(0,s.jsx)(n.code,{children:"throw"}),"语句，而不是",(0,s.jsx)(n.code,{children:"throw"}),"表达式。"]}),"\n",(0,s.jsxs)(n.h2,{id:"函数的部分执行",children:["函数的部分执行",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数的部分执行",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"语法",children:["语法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#语法",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"多参数的函数有时需要绑定其中的一个或多个参数，然后返回一个新函数。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function add(x, y) { return x + y; }\nfunction add7(x) { return x + 7; }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"add7"}),"函数其实是",(0,s.jsx)(n.code,{children:"add"}),"函数的一个特殊版本，通过将一个参数绑定为",(0,s.jsx)(n.code,{children:"7"}),"，就可以从",(0,s.jsx)(n.code,{children:"add"}),"得到",(0,s.jsx)(n.code,{children:"add7"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// bind 方法\nconst add7 = add.bind(null, 7);\n\n// 箭头函数\nconst add7 = x => add(x, 7);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面两种写法都有些冗余。其中，",(0,s.jsx)(n.code,{children:"bind"}),"方法的局限更加明显，它必须提供",(0,s.jsx)(n.code,{children:"this"}),"，并且只能从前到后一个个绑定参数，无法只绑定非头部的参数。"]}),"\n",(0,s.jsxs)(n.p,{children:["现在有一个",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-partial-application",target:"_blank",rel:"noopener noreferrer",children:"提案"}),"，使得绑定参数并返回一个新函数更加容易。这叫做函数的部分执行（partial application）。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const add = (x, y) => x + y;\nconst addOne = add(1, ?);\n\nconst maxGreaterThanZero = Math.max(0, ...);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["根据新提案，",(0,s.jsx)(n.code,{children:"?"}),"是单个参数的占位符，",(0,s.jsx)(n.code,{children:"..."}),"是多个参数的占位符。以下的形式都属于函数的部分执行。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"f(x, ?)\nf(x, ...)\nf(?, x)\nf(..., x)\nf(?, x, ?)\nf(..., x, ...)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"?"}),"和",(0,s.jsx)(n.code,{children:"..."}),"只能出现在函数的调用之中，并且会返回一个新函数。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const g = f(?, 1, ...);\n// 等同于\nconst g = (x, ...y) => f(x, 1, ...y);\n"})}),"\n",(0,s.jsx)(n.p,{children:"函数的部分执行，也可以用于对象的方法。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let obj = {\n  f(x, y) { return x + y; },\n};\n\nconst g = obj.f(?, 3);\ng(1) // 4\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"注意点",children:["注意点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意点",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"函数的部分执行有一些特别注意的地方。"}),"\n",(0,s.jsx)(n.p,{children:"（1）函数的部分执行是基于原函数的。如果原函数发生变化，部分执行生成的新函数也会立即反映这种变化。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let f = (x, y) => x + y;\n\nconst g = f(?, 3);\ng(1); // 4\n\n// 替换函数 f\nf = (x, y) => x * y;\n\ng(1); // 3\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码中，定义了函数的部分执行以后，更换原函数会立即影响到新函数。"}),"\n",(0,s.jsx)(n.p,{children:"（2）如果预先提供的那个值是一个表达式，那么这个表达式并不会在定义时求值，而是在每次调用时求值。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let a = 3;\nconst f = (x, y) => x + y;\n\nconst g = f(?, a);\ng(1); // 4\n\n// 改变 a 的值\na = 10;\ng(1); // 11\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，预先提供的参数是变量",(0,s.jsx)(n.code,{children:"a"}),"，那么每次调用函数",(0,s.jsx)(n.code,{children:"g"}),"的时候，才会对",(0,s.jsx)(n.code,{children:"a"}),"进行求值。"]}),"\n",(0,s.jsx)(n.p,{children:"（3）如果新函数的参数多于占位符的数量，那么多余的参数将被忽略。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const f = (x, ...y) => [x, ...y];\nconst g = f(?, 1);\ng(2, 3, 4); // [2, 1]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，函数",(0,s.jsx)(n.code,{children:"g"}),"只有一个占位符，也就意味着它只能接受一个参数，多余的参数都会被忽略。"]}),"\n",(0,s.jsx)(n.p,{children:"写成下面这样，多余的参数就没有问题。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const f = (x, ...y) => [x, ...y];\nconst g = f(?, 1, ...);\ng(2, 3, 4); // [2, 1, 3, 4];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["（4）",(0,s.jsx)(n.code,{children:"..."}),"只会被采集一次，如果函数的部分执行使用了多个",(0,s.jsx)(n.code,{children:"..."}),"，那么每个",(0,s.jsx)(n.code,{children:"..."}),"的值都将相同。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const f = (...x) => x;\nconst g = f(..., 9, ...);\ng(1, 2, 3); // [1, 2, 3, 9, 1, 2, 3]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"g"}),"定义了两个",(0,s.jsx)(n.code,{children:"..."}),"占位符，真正执行的时候，它们的值是一样的。"]}),"\n",(0,s.jsxs)(n.h2,{id:"管道运算符",children:["管道运算符",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#管道运算符",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Unix 操作系统有一个管道机制（pipeline），可以把前一个操作的值传给后一个操作。这个机制非常有用，使得简单的操作可以组合成为复杂的操作。许多语言都有管道的实现，现在有一个",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-pipeline-operator",target:"_blank",rel:"noopener noreferrer",children:"提案"}),"，让 JavaScript 也拥有管道机制。"]}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript 的管道是一个运算符，写作",(0,s.jsx)(n.code,{children:"|>"}),"。它的左边是一个表达式，右边是一个函数。管道运算符把左边表达式的值，传入右边的函数进行求值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"x |> f\n// 等同于\nf(x)\n"})}),"\n",(0,s.jsx)(n.p,{children:"管道运算符最大的好处，就是可以把嵌套的函数，写成从左到右的链式表达式。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function doubleSay (str) {\n  return str + \", \" + str;\n}\n\nfunction capitalize (str) {\n  return str[0].toUpperCase() + str.substring(1);\n}\n\nfunction exclaim (str) {\n  return str + '!';\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面是三个简单的函数。如果要嵌套执行，传统的写法和管道的写法分别如下。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 传统的写法\nexclaim(capitalize(doubleSay('hello')))\n// \"Hello, hello!\"\n\n// 管道的写法\n'hello'\n  |> doubleSay\n  |> capitalize\n  |> exclaim\n// \"Hello, hello!\"\n"})}),"\n",(0,s.jsx)(n.p,{children:"管道运算符只能传递一个值，这意味着它右边的函数必须是一个单参数函数。如果是多参数函数，就必须进行柯里化，改成单参数的版本。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function double (x) { return x + x; }\nfunction add (x, y) { return x + y; }\n\nlet person = { score: 25 };\nperson.score\n  |> double\n  |> (_ => add(7, _))\n// 57\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"add"}),"函数需要两个参数。但是，管道运算符只能传入一个值，因此需要事先提供另一个参数，并将其改成单参数的箭头函数",(0,s.jsx)(n.code,{children:"_ => add(7, _)"}),"。这个函数里面的下划线并没有特别的含义，可以用其他符号代替，使用下划线只是因为，它能够形象地表示这里是占位符。"]}),"\n",(0,s.jsxs)(n.p,{children:["管道运算符对于",(0,s.jsx)(n.code,{children:"await"}),"函数也适用。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"x |> await f\n// 等同于\nawait f(x)\n\nconst userAge = userId |> await fetchUserById |> getAgeFromUser;\n// 等同于\nconst userAge = getAgeFromUser(await fetchUserById(userId));\n"})}),"\n",(0,s.jsx)(n.p,{children:"管道运算符对多步骤的数据处理，非常有用。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const numbers = [10, 20, 30, 40, 50];\n\nconst processedNumbers = numbers\n  |> (_ => _.map(n => n / 2)) // [5, 10, 15, 20, 25]\n  |> (_ => _.filter(n => n > 10)); // [15, 20, 25]\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面示例中，管道运算符可以清晰表达数据处理的每一步，增加代码的可读性。"}),"\n",(0,s.jsxs)(n.h2,{id:"mathsignbit",children:["Math.signbit()",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mathsignbit",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript 内部使用64位浮点数（国际标准 IEEE 754）表示数值。IEEE 754 规定，64位浮点数的第一位是符号位，",(0,s.jsx)(n.code,{children:"0"}),"表示正数，",(0,s.jsx)(n.code,{children:"1"}),"表示负数。所以会有两种零，",(0,s.jsx)(n.code,{children:"+0"}),"是符号位为",(0,s.jsx)(n.code,{children:"0"}),"时的零，",(0,s.jsx)(n.code,{children:"-0"}),"是符号位为",(0,s.jsx)(n.code,{children:"1"}),"时的零。实际编程中，判断一个值是",(0,s.jsx)(n.code,{children:"+0"}),"还是",(0,s.jsx)(n.code,{children:"-0"}),"非常麻烦，因为它们是相等的。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"+0 === -0 // true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["ES6 新增的",(0,s.jsx)(n.code,{children:"Math.sign()"}),"方法，只能用来判断数值的正负，对于判断数值的符号位用处不大。因为如果参数是",(0,s.jsx)(n.code,{children:"-0"}),"，它会返回",(0,s.jsx)(n.code,{children:"-0"}),"，还是不能直接知道符号位是",(0,s.jsx)(n.code,{children:"1"}),"还是",(0,s.jsx)(n.code,{children:"0"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.sign(-0) // -0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["目前，有一个",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-Math.signbit",target:"_blank",rel:"noopener noreferrer",children:"提案"}),"，引入了",(0,s.jsx)(n.code,{children:"Math.signbit()"}),"方法判断一个数的符号位是否设置了。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"Math.signbit(2) //false\nMath.signbit(-2) //true\nMath.signbit(0) //false\nMath.signbit(-0) //true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["可以看到，该方法正确返回了",(0,s.jsx)(n.code,{children:"-0"}),"的符号位是设置了的。"]}),"\n",(0,s.jsx)(n.p,{children:"该方法的算法如下。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["如果参数是",(0,s.jsx)(n.code,{children:"NaN"}),"，返回",(0,s.jsx)(n.code,{children:"false"})]}),"\n",(0,s.jsxs)(n.li,{children:["如果参数是",(0,s.jsx)(n.code,{children:"-0"}),"，返回",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:["如果参数是负值，返回",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:["其他情况返回",(0,s.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"双冒号运算符",children:["双冒号运算符",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#双冒号运算符",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["箭头函数可以绑定",(0,s.jsx)(n.code,{children:"this"}),"对象，大大减少了显式绑定",(0,s.jsx)(n.code,{children:"this"}),"对象的写法（",(0,s.jsx)(n.code,{children:"call()"}),"、",(0,s.jsx)(n.code,{children:"apply()"}),"、",(0,s.jsx)(n.code,{children:"bind()"}),"）。但是，箭头函数并不适用于所有场合，所以现在有一个",(0,s.jsx)(n.a,{href:"https://github.com/zenparsing/es-function-bind",target:"_blank",rel:"noopener noreferrer",children:"提案"}),"，提出了“函数绑定”（function bind）运算符，用来取代",(0,s.jsx)(n.code,{children:"call()"}),"、",(0,s.jsx)(n.code,{children:"apply()"}),"、",(0,s.jsx)(n.code,{children:"bind()"}),"调用。"]}),"\n",(0,s.jsxs)(n.p,{children:["函数绑定运算符是并排的两个冒号（",(0,s.jsx)(n.code,{children:"::"}),"），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即",(0,s.jsx)(n.code,{children:"this"}),"对象），绑定到右边的函数上面。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"foo::bar;\n// 等同于\nbar.bind(foo);\n\nfoo::bar(...arguments);\n// 等同于\nbar.apply(foo, arguments);\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n  return obj::hasOwnProperty(key);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var method = obj::obj.foo;\n// 等同于\nvar method = ::obj.foo;\n\nlet log = ::console.log;\n// 等同于\nvar log = console.log.bind(console);\n"})}),"\n",(0,s.jsx)(n.p,{children:"如果双冒号运算符的运算结果，还是一个对象，就可以采用链式写法。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { map, takeWhile, forEach } from "iterlib";\n\ngetPlayers()\n::map(x => x.character())\n::takeWhile(x => x.strength > 100)\n::forEach(x => console.log(x));\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"realm-api",children:["Realm API",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#realm-api",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-realms",target:"_blank",rel:"noopener noreferrer",children:"Realm API"})," 提供沙箱功能（sandbox），允许隔离代码，防止那些被隔离的代码拿到全局对象。"]}),"\n",(0,s.jsxs)(n.p,{children:["以前，经常使用",(0,s.jsx)(n.code,{children:"<iframe>"}),"作为沙箱。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const globalOne = window;\nlet iframe = document.createElement('iframe');\ndocument.body.appendChild(iframe);\nconst globalTwo = iframe.contentWindow;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"<iframe>"}),"的全局对象是独立的（",(0,s.jsx)(n.code,{children:"iframe.contentWindow"}),"）。Realm API 可以取代这个功能。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const globalOne = window;\nconst globalTwo = new Realm().global;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"Realm API"}),"单独提供了一个全局对象",(0,s.jsx)(n.code,{children:"new Realm().global"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["Realm API 提供一个",(0,s.jsx)(n.code,{children:"Realm()"}),"构造函数，用来生成一个 Realm 对象。该对象的",(0,s.jsx)(n.code,{children:"global"}),"属性指向一个新的顶层对象，这个顶层对象跟原始的顶层对象类似。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const globalOne = window;\nconst globalTwo = new Realm().global;\n\nglobalOne.evaluate('1 + 2') // 3\nglobalTwo.evaluate('1 + 2') // 3\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，Realm 生成的顶层对象的",(0,s.jsx)(n.code,{children:"evaluate()"}),"方法，可以运行代码。"]}),"\n",(0,s.jsx)(n.p,{children:"下面的代码可以证明，Realm 顶层对象与原始顶层对象是两个对象。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let a1 = globalOne.evaluate('[1,2,3]');\nlet a2 = globalTwo.evaluate('[1,2,3]');\na1.prototype === a2.prototype; // false\na1 instanceof globalTwo.Array; // false\na2 instanceof globalOne.Array; // false\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码中，Realm 沙箱里面的数组的原型对象，跟原始环境里面的数组是不一样的。"}),"\n",(0,s.jsx)(n.p,{children:"Realm 沙箱里面只能运行 ECMAScript 语法提供的 API，不能运行宿主环境提供的 API。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"globalTwo.evaluate('console.log(1)')\n// throw an error: console is undefined\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，Realm 沙箱里面没有",(0,s.jsx)(n.code,{children:"console"}),"对象，导致报错。因为",(0,s.jsx)(n.code,{children:"console"}),"不是语法标准，是宿主环境提供的。"]}),"\n",(0,s.jsx)(n.p,{children:"如果要解决这个问题，可以使用下面的代码。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"globalTwo.console = globalOne.console;\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Realm()"}),"构造函数可以接受一个参数对象，该参数对象的",(0,s.jsx)(n.code,{children:"intrinsics"}),"属性可以指定 Realm 沙箱继承原始顶层对象的方法。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const r1 = new Realm();\nr1.global === this;\nr1.global.JSON === JSON; // false\n\nconst r2 = new Realm({ intrinsics: 'inherit' });\nr2.global === this; // false\nr2.global.JSON === JSON; // true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，正常情况下，沙箱的",(0,s.jsx)(n.code,{children:"JSON"}),"方法不同于原始的",(0,s.jsx)(n.code,{children:"JSON"}),"对象。但是，",(0,s.jsx)(n.code,{children:"Realm()"}),"构造函数接受",(0,s.jsx)(n.code,{children:"{ intrinsics: 'inherit' }"}),"作为参数以后，就会继承原始顶层对象的方法。"]}),"\n",(0,s.jsxs)(n.p,{children:["用户可以自己定义",(0,s.jsx)(n.code,{children:"Realm"}),"的子类，用来定制自己的沙箱。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class FakeWindow extends Realm {\n  init() {\n    super.init();\n    let global = this.global;\n\n    global.document = new FakeDocument(...);\n    global.alert = new Proxy(fakeAlert, { ... });\n    // ...\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面代码中，",(0,s.jsx)(n.code,{children:"FakeWindow"}),"模拟了一个假的顶层对象",(0,s.jsx)(n.code,{children:"window"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"json-模块",children:["JSON 模块",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#json-模块",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["import 命令目前只能用于加载 ES 模块，现在有一个",(0,s.jsx)(n.a,{href:"https://github.com/tc39/proposal-json-modules",target:"_blank",rel:"noopener noreferrer",children:"提案"}),"，允许加载 JSON 模块。"]}),"\n",(0,s.jsxs)(n.p,{children:["假定有一个 JSON 模块文件",(0,s.jsx)(n.code,{children:"config.json"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "appName": "My App"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["目前，只能使用",(0,s.jsx)(n.code,{children:"fetch()"}),"加载 JSON 模块。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const response = await fetch('./config.json');\nconst json = await response.json();\n"})}),"\n",(0,s.jsx)(n.p,{children:"import 命令能够直接加载 JSON 模块以后，就可以像下面这样写。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import configData from './config.json' assert { type: \"json\" };\nconsole.log(configData.appName);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面示例中，整个 JSON 对象被导入为",(0,s.jsx)(n.code,{children:"configData"}),"对象，然后就可以从该对象获取 JSON 数据。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"import"}),"命令导入 JSON 模块时，命令结尾的",(0,s.jsx)(n.code,{children:'assert {type: "json"}'}),"不可缺少。这叫做导入断言，用来告诉 JavaScript 引擎，现在加载的是 JSON 模块。你可能会问，为什么不通过",(0,s.jsx)(n.code,{children:".json"}),"后缀名判断呢？因为浏览器的传统是不通过后缀名判断文件类型，标准委员会希望遵循这种做法，这样也可以避免一些安全问题。"]}),"\n",(0,s.jsx)(n.p,{children:"导入断言是 JavaScript 导入其他格式模块的标准写法，JSON 模块将是第一个使用这种语法导入的模块。以后，还会支持导入 CSS 模块、HTML 模块等等。"}),"\n",(0,s.jsxs)(n.p,{children:["动态加载模块的",(0,s.jsx)(n.code,{children:"import()"}),"函数也支持加载 JSON 模块。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import('./config.json', { assert: { type: 'json' } })\n"})}),"\n",(0,s.jsx)(n.p,{children:"脚本加载 JSON 模块以后，还可以再用 export 命令输出。这时，可以将 export 和 import 结合成一个语句。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export { config } from './config.json' assert { type: 'json' };\n"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F30.%E6%9C%80%E6%96%B0%E6%8F%90%E6%A1%88.md"]={toc:[{text:"do 表达式",id:"do-表达式",depth:2},{text:"throw 表达式",id:"throw-表达式",depth:2},{text:"函数的部分执行",id:"函数的部分执行",depth:2},{text:"语法",id:"语法",depth:3},{text:"注意点",id:"注意点",depth:3},{text:"管道运算符",id:"管道运算符",depth:2},{text:"Math.signbit()",id:"mathsignbit",depth:2},{text:"双冒号运算符",id:"双冒号运算符",depth:2},{text:"Realm API",id:"realm-api",depth:2},{text:"JSON 模块",id:"json-模块",depth:2}],title:"30.最新提案",headingTitle:"30.最新提案",frontmatter:{}}}}]);