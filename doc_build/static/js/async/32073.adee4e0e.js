"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["32073"],{201137:function(e,n,r){r.r(n),r.d(n,{default:()=>x});var s=r(552676),c=r(740453);let i=r.p+"static/image/57856db085f6acd3f07da73f6afd836b.5e15e6ae.webp",d=r.p+"static/image/e9f15fff859ab82ebfc42eb3752205cb.07a99c2d.webp",l=r.p+"static/image/292b0498fdc96ef389cfa3b70abc4279.eb707d47.webp",h=r.p+"static/image/b80c84b50ceb0d01b36dc5e8c0671086.da7ad187.webp";function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",strong:"strong",img:"img",h3:"h3",ol:"ol",li:"li",ul:"ul",h4:"h4"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"15安全防范知识点",children:["15.安全防范知识点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#15安全防范知识点",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这一章我们将来学习安全防范这一块的知识点。总的来说安全是很复杂的一个领域，不可能通过一个章节就能学习到这部分的内容。在这一章节中，我们会学习到常见的一些安全问题及如何防范的内容，在当下其实安全问题越来越重要，已经逐渐成为前端开发必备的技能了。"}),"\n",(0,s.jsxs)(n.h2,{id:"xss",children:["XSS",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#xss",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-!",children:"涉及面试题：什么是 XSS 攻击？如何防范 XSS 攻击？什么是 CSP？\n"})}),"\n",(0,s.jsx)(n.p,{children:"XSS 简单点来说，就是攻击者想尽一切办法将可以执行的代码注入到网页中。"}),"\n",(0,s.jsxs)(n.p,{children:["XSS 可以分为多种类型，但是总体上我认为分为两类：",(0,s.jsx)(n.strong,{children:"持久型和非持久型"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["持久型也就是攻击的代码被服务端写入进",(0,s.jsx)(n.strong,{children:"数据库"}),"中，这种攻击危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击。"]}),"\n",(0,s.jsx)(n.p,{children:"举个例子，对于评论功能来说，就得防范持久型 XSS 攻击，因为我可以在评论中输入以下内容"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这种情况如果前后端没有做好防御的话，这段评论就会被存储到数据库中，这样每个打开该页面的用户都会被攻击到。"}),"\n",(0,s.jsxs)(n.p,{children:["非持久型相比于前者危害就小的多了，一般通过",(0,s.jsx)(n.strong,{children:"修改 URL 参数"}),"的方式加入攻击代码，诱导用户访问链接从而进行攻击。"]}),"\n",(0,s.jsx)(n.p,{children:"举个例子，如果页面需要从 URL 中获取某些参数作为内容的话，不经过过滤就会导致攻击代码被执行"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"\x3c!-- http://www.domain.com?name=<script>alert(1)<\/script> --\x3e\n<div>{{name}}</div>                                                  \n"})}),"\n",(0,s.jsx)(n.p,{children:"但是对于这种攻击方式来说，如果用户使用 Chrome 这类浏览器的话，浏览器就能自动帮助用户防御攻击。但是我们不能因此就不防御此类攻击了，因为我不能确保用户都使用了该类浏览器。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"对于 XSS 攻击来说，通常有两种方式可以用来防御。"}),"\n",(0,s.jsxs)(n.h3,{id:"转义字符",children:["转义字符",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#转义字符",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"首先，对于用户的输入应该是永远不信任的。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function escape(str) {\n  str = str.replace(/&/g, '&amp;')\n  str = str.replace(/</g, '&lt;')\n  str = str.replace(/>/g, '&gt;')\n  str = str.replace(/\"/g, '&quto;')\n  str = str.replace(/'/g, '&#39;')\n  str = str.replace(/`/g, '&#96;')\n  str = str.replace(/\\//g, '&#x2F;')\n  return str\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["通过转义可以将攻击代码 ",(0,s.jsx)(n.code,{children:"<script>alert(1)<\/script>"})," 变成"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// -> &lt;script&gt;alert(1)&lt;&#x2F;script&gt;\nescape('<script>alert(1)<\/script>')\n"})}),"\n",(0,s.jsx)(n.p,{children:"但是对于显示富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const xss = require(\'xss\')\nlet html = xss(\'<h1 id="title">XSS Demo</h1><script>alert("xss");<\/script>\')\n// -> <h1>XSS Demo</h1>&lt;script&gt;alert("xss");&lt;/script&gt;\nconsole.log(html)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["以上示例使用了 ",(0,s.jsx)(n.code,{children:"js-xss"})," 来实现，可以看到在输出中保留了 ",(0,s.jsx)(n.code,{children:"h1"})," 标签且过滤了 ",(0,s.jsx)(n.code,{children:"script"})," 标签。"]}),"\n",(0,s.jsxs)(n.h3,{id:"csp",children:["CSP",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#csp",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。"}),"\n",(0,s.jsx)(n.p,{children:"通常可以通过两种方式来开启 CSP："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["设置 HTTP Header 中的 ",(0,s.jsx)(n.code,{children:"Content-Security-Policy"})]}),"\n",(0,s.jsxs)(n.li,{children:["设置 ",(0,s.jsx)(n.code,{children:"meta"})," 标签的方式 ",(0,s.jsx)(n.code,{children:'<meta http-equiv="Content-Security-Policy">'})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这里以设置 HTTP Header 来举例"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"只允许加载本站资源"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"Content-Security-Policy: default-src ‘self’\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"只允许加载 HTTPS 协议图片"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"Content-Security-Policy: img-src https://*\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"允许加载任何来源框架"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"Content-Security-Policy: child-src 'none'\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["当然可以设置的属性远不止这些，你可以通过查阅 ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy",target:"_blank",rel:"noopener noreferrer",children:"文档"})," 的方式来学习，这里就不过多赘述其他的属性了。"]}),"\n",(0,s.jsx)(n.p,{children:"对于这种方式来说，只要开发者配置了正确的规则，那么即使网站存在漏洞，攻击者也不能执行它的攻击代码，并且 CSP 的兼容性也不错。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.h2,{id:"csrf",children:["CSRF",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#csrf",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-!",children:"涉及面试题：什么是 CSRF 攻击？如何防范 CSRF 攻击？\n"})}),"\n",(0,s.jsx)(n.p,{children:"CSRF 中文名为跨站请求伪造。原理就是攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。"}),"\n",(0,s.jsxs)(n.p,{children:["举个例子，假设网站中有一个通过 ",(0,s.jsx)(n.code,{children:"GET"})," 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<img src=\"http://www.domain.com/xxx?comment='attack'\"/>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["那么你是否会想到使用 ",(0,s.jsx)(n.code,{children:"POST"})," 方式提交请求是不是就没有这个问题了呢？其实并不是，使用这种方式也不是百分百安全的，攻击者同样可以诱导用户进入某个页面，在页面中通过表单提交 ",(0,s.jsx)(n.code,{children:"POST"})," 请求。"]}),"\n",(0,s.jsxs)(n.h3,{id:"如何防御",children:["如何防御",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何防御",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"防范 CSRF 攻击可以遵循以下几种规则："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Get 请求不对数据进行修改"}),"\n",(0,s.jsx)(n.li,{children:"不让第三方网站访问到用户 Cookie"}),"\n",(0,s.jsx)(n.li,{children:"阻止第三方网站请求接口"}),"\n",(0,s.jsx)(n.li,{children:"请求时附带验证信息，比如验证码或者 Token"}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"samesite",children:["SameSite",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#samesite",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["可以对 Cookie 设置 ",(0,s.jsx)(n.code,{children:"SameSite"})," 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。"]}),"\n",(0,s.jsxs)(n.h4,{id:"验证-referer",children:["验证 Referer",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#验证-referer",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。"}),"\n",(0,s.jsxs)(n.h4,{id:"token",children:["Token",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#token",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。"}),"\n",(0,s.jsxs)(n.h2,{id:"点击劫持",children:["点击劫持",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#点击劫持",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-!",children:"涉及面试题：什么是点击劫持？如何防范点击劫持？\n"})}),"\n",(0,s.jsxs)(n.p,{children:["点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 ",(0,s.jsx)(n.code,{children:"iframe"})," 嵌套的方式嵌入自己的网页中，并将 ",(0,s.jsx)(n.code,{children:"iframe"})," 设置为透明，在页面中透出一个按钮诱导用户点击。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"对于这种攻击方式，推荐防御的方法有两种。"}),"\n",(0,s.jsxs)(n.h3,{id:"x-frame-options",children:["X-FRAME-OPTIONS",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#x-frame-options",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"X-FRAME-OPTIONS"})," 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 ",(0,s.jsx)(n.code,{children:"iframe"})," 嵌套的点击劫持攻击。"]}),"\n",(0,s.jsx)(n.p,{children:"该响应头有三个值可选，分别是"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DENY"}),"，表示页面不允许通过 ",(0,s.jsx)(n.code,{children:"iframe"})," 的方式展示"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SAMEORIGIN"}),"，表示页面可以在相同域名下通过 ",(0,s.jsx)(n.code,{children:"iframe"})," 的方式展示"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ALLOW-FROM"}),"，表示页面可以在指定来源的 ",(0,s.jsx)(n.code,{children:"iframe"})," 中展示"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"js-防御",children:["JS 防御",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#js-防御",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"对于某些远古浏览器来说，并不能支持上面的这种方式，那我们只有通过 JS 的方式来防御点击劫持了。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<head>\n  <style id=\"click-jack\">\n    html {\n      display: none !important;\n    }\n  </style>\n</head>\n<body>\n  <script>\n    if (self == top) {\n      var style = document.getElementById('click-jack')\n      document.body.removeChild(style)\n    } else {\n      top.location = self.location\n    }\n  <\/script>\n</body>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["以上代码的作用就是当通过 ",(0,s.jsx)(n.code,{children:"iframe"})," 的方式加载页面时，攻击者的网页直接不显示所有内容了。"]}),"\n",(0,s.jsxs)(n.h2,{id:"中间人攻击",children:["中间人攻击",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#中间人攻击",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-!",children:"涉及面试题：什么是中间人攻击？如何防范中间人攻击？\n"})}),"\n",(0,s.jsx)(n.p,{children:"中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。"}),"\n",(0,s.jsx)(n.p,{children:"通常来说不建议使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。"}),"\n",(0,s.jsx)(n.p,{children:"当然防御中间人攻击其实并不难，只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。"}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在这一章中，我们学习到了一些常见的前端安全方面的知识及如何防御这些攻击。但是安全的领域相当大，这些内容只是沧海一粟，如果大家对于安全有兴趣的话，可以阅读 ",(0,s.jsx)(n.a,{href:"https://github.com/trimstray/the-book-of-secret-knowledge",target:"_blank",rel:"noopener noreferrer",children:"这个仓库的内容"})," 来学习和实践这方面的知识。"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let x=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%2F15.%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83%E7%9F%A5%E8%AF%86%E7%82%B9.md"]={toc:[{text:"XSS",id:"xss",depth:2},{text:"转义字符",id:"转义字符",depth:3},{text:"CSP",id:"csp",depth:3},{text:"CSRF",id:"csrf",depth:2},{text:"如何防御",id:"如何防御",depth:3},{text:"SameSite",id:"samesite",depth:4},{text:"验证 Referer",id:"验证-referer",depth:4},{text:"Token",id:"token",depth:4},{text:"点击劫持",id:"点击劫持",depth:2},{text:"X-FRAME-OPTIONS",id:"x-frame-options",depth:3},{text:"JS 防御",id:"js-防御",depth:3},{text:"中间人攻击",id:"中间人攻击",depth:2},{text:"小结",id:"小结",depth:2}],title:"15.安全防范知识点",headingTitle:"15.安全防范知识点",frontmatter:{}}}}]);