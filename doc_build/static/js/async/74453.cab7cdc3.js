"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["74453"],{396882:function(e,n,r){r.r(n),r.d(n,{default:()=>j});var a=r(552676),s=r(740453);let t=r.p+"static/image/01098063bb6631e213b6638d66a16972.cdbba445.webp",i=r.p+"static/image/54af065a41957c79d18c46eb5a931316.193ed5ba.webp",c=r.p+"static/image/be4ddd2a5e4ffdaf2fe935e084082a3a.21338a44.webp",d=r.p+"static/image/01d001af28edd8b84a1c2f6a18f21695.ab52dcda.webp",o=r.p+"static/image/be28e17a735eef0e41bb36e3e36667b2.ea389914.webp",h=r.p+"static/image/96ccf938eb7c1b8a5dde58e285d28b1c.53a71273.webp",l=r.p+"static/image/196c929d38bc1eab3f65e95ff18934b5.e6944b78.webp",p=r.p+"static/image/ac911944af4556a36b646664129cab77.dd4a4b31.webp";function m(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",img:"img",h2:"h2",code:"code",pre:"pre",strong:"strong",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"12快照测试怎么保障组件-ui-的完整",children:["12.快照测试：怎么保障组件 UI 的完整？",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12快照测试怎么保障组件-ui-的完整",children:"#"})]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["代码仓库：",(0,a.jsx)(n.a,{href:"https://github.com/czm1290433700/test_demo",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/czm1290433700/test_demo"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"上节课我们学习了怎么测试一个 hook 方法，因为 hook 只能在 React 组件顶部调用的特性，所以我们不能像测试普通函数一样测试它，还学习了从组件维度和 renderHook 两种测试的方案和它们适用的场景，我们单元测试的内容就已经学完了，在这节课中，我们会来学习一种不同的测试方案 ---- 快照测试。"}),"\n",(0,a.jsx)(n.p,{children:"在开始这节课的学习前，我想请同学们思考一个问题，对于一个业务组件，我们可以用什么手段来保证组件 UI 的完整呢？有的同学可能就会说了，我们可以用断言呀，查询到对应的元素来判定它不就好了吗 ~"}),"\n",(0,a.jsx)(n.p,{children:"这个的确是一个办法，但是断言只能匹配到我们查询到的区域是正常的，一个组件中肯定有一些 DOM 是和功能本身关系不大，但又必须存在的，如果都覆盖断言，一个用例可能就会有几十上百行，那对工程师的心理负担和业务压力增加就太大了（可能真的就要提桶跑路了=。=）"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这边有一个解决办法是使用快照测试，快照测试和它的字面意思一样，通过“快速（简单）拍出的照片”来测试，它是将我们需要判定的元素的内容存储下来，在下一次匹配时，会判断两次的结果能否匹配，从而达到从整体维度保证组件功能完成的能力。"}),"\n",(0,a.jsxs)(n.h2,{id:"组件的快照测试",children:["组件的快照测试",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件的快照测试",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["React Testing library 中提供了快照测试的能力，我们只需要使用它提供给我们的 ",(0,a.jsx)(n.code,{children:"toMatchSnapshot"})," 断言就好，我们可以直接来看看下面的例子："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'// ./src/components/DomSnap/index.tsx\nimport { FC } from "react";\n\ninterface IProps {}\n\n// 12 | 快照测试：怎么保障组件 UI 的完整？\nexport const DomSnap: FC<IProps> = ({}) => {\n  return (\n    <form aria-label="form">\n      <input\n        type="text"\n        name="username"\n        disabled\n        aria-disabled\n        defaultValue="zhenmin"\n        aria-label="form_username"\n      />\n      <input\n        type="number"\n        name="age"\n        defaultValue={23}\n        required\n        aria-label="form_age"\n      />\n      <input\n        type="radio"\n        name="sex"\n        value="man"\n        defaultChecked\n        aria-checked\n        aria-label="form_sex"\n      />\n      <input type="radio" name="sex" value="woman" aria-label="form_sex" />\n    </form>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'import React from "react";\nimport { render, screen } from "@testing-library/react";\nimport { DomSnap } from "../components/DomSnap";\n\n// 12 | 快照测试：怎么保障组件 UI 的完整？\ndescribe("examples for snap", () => {\n  test("a test for component snap", () => {\n    const { baseElement } = render(<DomSnap />);\n    expect(baseElement).toMatchSnapshot();\n  });\n\n  test("a test for part component snap", () => {\n    render(<DomSnap />);\n    expect(\n      screen.getByRole("textbox", { name: "form_username" })\n    ).toMatchSnapshot();\n  });\n});\n'})}),"\n",(0,a.jsx)(n.p,{children:"在上面的例子中，定义了一个 form，我们需要对它进行快照测试，在用例当中，我示范了全局和部分区域的快照筛选，我们来执行这个用例看看。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:l,alt:""})}),"\n",(0,a.jsxs)(n.p,{children:["除了用例执行成功的说明外，可以发现在 ",(0,a.jsx)(n.strong,{children:"test"})," 目录下生成了一个 ",(0,a.jsx)(n.strong,{children:"snapshots"})," ，这个目录用来存放我们的快照文件："]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"我们来看看新生成的快照里面有什么："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以看到针对每一个用例中使用到 toMatchSnapshot 断言的地方，它都会生成一个对应查询区域的快照，后面我们在每次执行这个用例的时候，都会去比对这次的快照能否和上次的匹配起来，我们不妨来改点 dom 试试看。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'// ./src/components/DomSnap/index.tsx\nimport { FC } from "react";\n\ninterface IProps {}\n\n// 12 | 快照测试：怎么保障组件 UI 的完整？\nexport const DomSnap: FC<IProps> = ({}) => {\n  return (\n    <form aria-label="form">\n      <input\n        type="text"\n        name="username"\n        disabled\n        aria-disabled\n        defaultValue="zhenmin"\n        aria-label="form_username"\n      />\n      <input\n        type="number"\n        name="age"\n        // defaultValue={23}\n        defaultValue={24}\n        required\n        aria-label="form_age"\n      />\n      <input\n        type="radio"\n        name="sex"\n        value="man"\n        defaultChecked\n        aria-checked\n        aria-label="form_sex"\n      />\n      <input type="radio" name="sex" value="woman" aria-label="form_sex" />\n    </form>\n  );\n};\n'})}),"\n",(0,a.jsx)(n.p,{children:"因为祯民马上 24 了，所以我们这边可以把 age 表单的默认值换成 24，然后我们重新跑一下用例看看会不会匹配出来对应的调整，可以看到和我们预期的一样，对应的区域发生了调整。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsxs)(n.h2,{id:"序列字符的快照测试",children:["序列字符的快照测试",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#序列字符的快照测试",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"除组件以外呢，快照测试其实也是可以用在函数返回值等非 DOM 的序列字符场景下的，我们来看看下面的例子。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'import React from "react";\nimport { render, screen } from "@testing-library/react";\nimport { DomSnap } from "../components/DomSnap";\n\n// 12 | 快照测试：怎么保障组件 UI 的完整？\ndescribe("examples for snap", () => {\n  // ...\n  test("a test for string snap", () => {\n    expect("a test for string snap").toMatchSnapshot();\n  });\n});\n'})}),"\n",(0,a.jsx)(n.p,{children:"上面的例子里，我们增加一个字符串的快照，这个也是可以用快照测试来验证的。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsxs)(n.h2,{id:"快照测试的更新",children:["快照测试的更新",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#快照测试的更新",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["大家可能会有一个疑问，如果我这次需求迭代完，这个组件的确 DOM 结构就是会变，那我们应该怎么更新之前的快照呢？对于用例中的快照更新有两种方式，第一种我们可以直接在控制台中输入 ",(0,a.jsx)(n.code,{children:"u"})," 来更新快照："]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:i,alt:""})}),"\n",(0,a.jsxs)(n.p,{children:["但是这样很容易误操作，所以我更建议大家用第二种方式，我们可以额外在 package.json 中加入这样的一条命令，对于不是 CRA 项目的同学，也只需要把前面的",(0,a.jsx)(n.code,{children:"react-scripts"}),"换成",(0,a.jsx)(n.code,{children:"jest"}),"即可："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'"updateSnap": "react-scripts test --updateSnapshot"\n'})}),"\n",(0,a.jsx)(n.p,{children:"包含 updateSnapshot 参数的测试环境会自动更新每一个 diff 不同的快照。"}),"\n",(0,a.jsxs)(n.h2,{id:"where--how-to-use-快照测试",children:["Where & how to use 快照测试？",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#where--how-to-use-快照测试",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"虽然快照测试相比断言匹配更加短平快，简单暴力，但并不意味着它可以适用所有的场景，针对每个用例都输出快照是没有意义的。"}),"\n",(0,a.jsxs)(n.p,{children:["那么我们应该在什么场景下去使用快照测试呢？其实我们可以把快照测试输出的内容理解为 ",(0,a.jsx)(n.code,{children:"screen.debug()"}),"，比对的目的只是需要保证前后两次 debug 的输出是相同的，通过这个特点，我们就可以推断出快照测试",(0,a.jsx)(n.strong,{children:"更适合使用在不轻易改变，甚至不会去改变的公共逻辑中"}),"。"]}),"\n",(0,a.jsx)(n.p,{children:"快照测试的使用是比较简单的，只需要加上一个断言就可以自动生成，但是对于快照测试的使用，我还是想提几个建议："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:t,alt:""})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"避免大快照：在我们的业务页面中，组件之间多层嵌套是常有的事情，我们应该避免对一个页面，或者一个大组件直接整体进行快照，因为这样的快照可能会导致后期迭代中需要频繁修改快照。"}),"\n",(0,a.jsxs)(n.li,{children:['避免小快照：有同学看到这个，就会觉得祯民这不是在自己打自己脸？上面才刚说了要避免大快照，现在又说避免小快照，那还用不用了~其实是这样的，这边的"小”是指粒度过小，比如它可能就一行，像我们上面举例中的',(0,a.jsx)(n.code,{children:'  expect("a test for string snap").toMatchSnapshot() '}),"其实就是一个 bad case，这种粒度我们完全可以使用断言来获得更精准的测试，也更方便。其实快照的粒度怎么选取，还是决定于你认为组件中最大粒度的不会去改变的公共逻辑是到哪里，我们应该尽可能保证粒度大，且快照的内容并不会被修改。"]}),"\n",(0,a.jsx)(n.li,{children:"避免频繁更新快照：虽然我们有学习怎么去更新快照，但我是不希望大家去频繁更新快照的，使用快照的目的应该就是为了保证这个稳定的公共逻辑能够不变，如果每个开发同学发现快照通过不了就更新，那么快照的意义也就丢失了，就不需要使用快照测试。"}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"小结",children:["小结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["这节课我们学习怎么使用快照测试来保障组件 UI 的完整，快照测试相比断言成本更小，可以快速匹配这次和历史版本的区别，我们只需要对需要快照的内容使用 ",(0,a.jsx)(n.code,{children:"toMatchSnapshot"}),"就可以生成对应的快照了。快照测试本身并不难，反而是如何妥善使用，不滥用快照测试倒显得更为重要。"]}),"\n",(0,a.jsx)(n.p,{children:"我们应该尽可能使用快照测试在不容易频繁迭代更改的场景，并且在粒度上，我们要尽可能保证从组件维度上粒度尽可能大，又不容易去迭代更改的程度，这样才能避免对一两行代码快照，或者是快照过大需要频繁更新快照的问题，这两种情况都会丢失快照测试的初衷。"}),"\n",(0,a.jsx)(n.p,{children:"到现在为止，我们需要学习的单元测试内容已经完成了，大家可能会很好奇，Jest 是怎么实现这么一个庞大的单元测试系统的呢？所以下一节课，我们就来深入原理讲一讲，从我们运行命令到用例执行完成究竟发生了什么事情。"})]})}function x(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}let j=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%B2%BE%E8%AE%B2%2F12.%E5%BF%AB%E7%85%A7%E6%B5%8B%E8%AF%95%EF%BC%9A%E6%80%8E%E4%B9%88%E4%BF%9D%E9%9A%9C%E7%BB%84%E4%BB%B6%20UI%20%E7%9A%84%E5%AE%8C%E6%95%B4%EF%BC%9F.md"]={toc:[{text:"组件的快照测试",id:"组件的快照测试",depth:2},{text:"序列字符的快照测试",id:"序列字符的快照测试",depth:2},{text:"快照测试的更新",id:"快照测试的更新",depth:2},{text:"Where & how to use 快照测试？",id:"where--how-to-use-快照测试",depth:2},{text:"小结",id:"小结",depth:2}],title:"12.快照测试：怎么保障组件 UI 的完整？",headingTitle:"12.快照测试：怎么保障组件 UI 的完整？",frontmatter:{}}}}]);