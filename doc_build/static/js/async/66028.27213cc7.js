"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["66028"],{785965:function(e,n,a){e.exports=a.p+"static/image/525136bc8fb00f0d2e634b1d349094c8.eec423f7.webp"},928889:function(e,n,a){e.exports=a.p+"static/image/83e1341810c7235012cc2063f95da9d9.c61e9b78.webp"},345396:function(e,n,a){e.exports=a.p+"static/image/9281a95f17590da8f9f7711677bdb12c.47a83ba0.webp"},284954:function(e,n,a){e.exports=a.p+"static/image/a084ce06fd2a02cd1913a06e56069c3c.a6e71abb.webp"},979509:function(e,n,a){e.exports=a.p+"static/image/b9d1cc0a9a1f796bc584276e01e8d63e.b46ee461.webp"},636445:function(e,n,a){e.exports=a.p+"static/image/cdbdce5b62a8470f198a5fdf9f7b02ae.c5d77664.webp"},3233:function(e,n,a){a.r(n),a.d(n,{default:()=>W});var t=a(552676),s=a(740453),c=a(636445);let i=a.p+"static/image/d8d89c8f845eebdf4c12b2c01b0b8ebf.fa867268.webp",r=a.p+"static/image/9d2490ad58ac92aa9b8f15eefc99a084.8dd157cb.webp",l=a.p+"static/image/174daf0b5a4d730403c030af0ed2282a.4a093c1b.webp",p=a.p+"static/image/39fda5dcd6117102e2982b3a47dffe79.7ac7630b.webp",d=a.p+"static/image/7023a07af9603bfad28f2e073e3357f4.15dbf2d4.gif",o=a.p+"static/image/ec0457899705cda4c7b377c4b839b5c1.a4752f56.webp",j=a.p+"static/image/1bac6660694ae6cb1334f03da6ab2abf.1ed20a7b.webp",h=a.p+"static/image/0b6e98f967f56706018c033f193082a8.9ddc1d93.webp",b=a.p+"static/image/affcf886115a81886265e1febc13165d.edda21d4.webp",x=a.p+"static/image/5e27bcb45cf84dc96c9e1a5105e6e967.af8db23d.webp",g=a.p+"static/image/e4188a5e56ed862ac48007bf042305cd.2e3b489d.webp",m=a.p+"static/image/2fc449022f0d150c5e0fbc28cc054352.1c90153a.webp",f=a.p+"static/image/e689d7be5472ea4512234cfde7a05166.1a8853a3.webp",w=a.p+"static/image/70c945a8d41dec545ff84ec84248c813.33e1dabf.webp",u=a.p+"static/image/6131b53e6eff6f8572b7eb2bf5fca3b6.63392962.webp",y=a.p+"static/image/df0a88fd258db7f531bac8b68d0a1870.55e90b3a.webp",S=a.p+"static/image/e4b34a203c0fd597fa959f6a01d9a2f9.793044c5.webp";var k=a(284954),E=a(928889),q=a(345396),v=a(979509),C=a(785965);let P=a.p+"static/image/49ddc00c43941ad75b469389357b15f0.82f6411a.webp",A=a.p+"static/image/3289da1f0da21cb65b4929a370b8ec36.ae1eb3f3.gif",J=a.p+"static/image/733e1af86c1197647f113381381dc44c.fc7fdbd0.gif",_=a.p+"static/image/0ee6358713f62e289577c91f6b78a4c5.1ec956be.webp",B=a.p+"static/image/5d47744d66999db3f746f8ca715bd64f.2d0f075a.gif",M=a.p+"static/image/277cafde6d2f75ed7364a280b5964703.98b30f6e.webp",N=a.p+"static/image/bbc70e6aa912873ddb2bc7623be2ac6e.5b20056d.webp",O=a.p+"static/image/bbe7f52e78ef276fac6356e65a7f80d4.79039c4f.webp",F=a.p+"static/image/30fa2866be2c27c60778dc445ccb6b69.d7d61139.webp",R=a.p+"static/image/ce2cadb77d4fe4c622091115f6d94400.8c7e1fcf.webp",T=a.p+"static/image/bbe0365648e72dc7d4fbe6c00e8bfdd3.2fec2a75.webp",z=a.p+"static/image/42e949f3ccd165edc93f90dc443d29e7.3d4b4f9f.gif",G=a.p+"static/image/e0ddc4c0fbba493989c8bca6ae8bce5e.1a3b6324.gif",$=a.p+"static/image/59d763e0c37a47d6fe5f0e3aa9210eb6.fc5db9da.webp",I=a.p+"static/image/e041cbbcb4fd1cc053c0228361ee68fc.9ab2ff9e.gif",D=a.p+"static/image/9787d6232bbb69a5b07a1beaef177014.58aa62e4.gif",V=a.p+"static/image/95e4c2ca1443bf482a3d1304f7d83bc4.751ac191.webp",Q=a.p+"static/image/19b4c7a7da37171086aaab58948a8677.b09f5187.webp";function H(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"102-puppeteer-实现爬虫爬取-boss-直聘全部前端岗位",children:["102. Puppeteer 实现爬虫，爬取 BOSS 直聘全部前端岗位",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#102-puppeteer-实现爬虫爬取-boss-直聘全部前端岗位",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"我们在找工作的时候，都会用 boss 直聘、拉钩之类的 APP 投简历。"}),"\n",(0,t.jsx)(n.p,{children:"根据职位描述筛选出适合自己的来投。"}),"\n",(0,t.jsx)(n.p,{children:"此外，职位描述也是我们简历优化的方向，甚至是平时学习的方向。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:Q,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"所以我觉得招聘网站的职位描述还是挺有价值的，就想把它们都爬取下来存到数据库里。"}),"\n",(0,t.jsx)(n.p,{children:"今天我们一起来实现下。"}),"\n",(0,t.jsx)(n.p,{children:"爬取数据我们使用 Puppeteer 来做，然后用 TypeORM 把爬到的数据存到 mysql 表里。"}),"\n",(0,t.jsx)(n.p,{children:"创建个项目："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"mkdir jd-spider\ncd jd-spider\nnpm init -y\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:V,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"进入项目，安装 puppeteer："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install --save puppeteer\n"})}),"\n",(0,t.jsx)(n.p,{children:"我们要爬取的是 boss 直聘的网站数据。"}),"\n",(0,t.jsxs)(n.p,{children:["首先，进入",(0,t.jsx)(n.a,{href:"https://www.zhipin.com/web/geek/job?query=%E5%89%8D%E7%AB%AF&city=100010000",target:"_blank",rel:"noopener noreferrer",children:"搜索页面"}),"，选择全国范围，搜索前端："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:D,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后职位列表的每个点进去查看描述，把这个岗位的信息和描述抓取下来："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:I,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"创建 test.js"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch({\n    headless: false,\n    defaultViewport: {\n        width: 0,\n        height: 0\n    }\n});\n\nconst page = await browser.newPage();\n\nawait page.goto('https://www.zhipin.com/web/geek/job');\n\nawait page.waitForSelector('.job-list-box');\n\nawait page.click('.city-label', {\n    delay: 500\n});\n\nawait page.click('.city-list-hot li:first-child', {\n    delay: 500\n});\n\nawait page.focus('.search-input-box input');\n\nawait page.keyboard.type('前端', {\n    delay: 200\n});\n\nawait page.click('.search-btn', {\n    delay: 1000\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"调用 launch 跑一个浏览器实例，指定 headless 为 false 也就是有界面。"}),"\n",(0,t.jsx)(n.p,{children:"defaultView 设置 width、height 为 0 是网页内容充满整个窗口。"}),"\n",(0,t.jsx)(n.p,{children:"然后就是自动化的流程了："}),"\n",(0,t.jsx)(n.p,{children:"首先进入职位搜索页面，等 job-list-box 这个元素出现之后，也就是列表加载完成了。"}),"\n",(0,t.jsx)(n.p,{children:"就点击城市选择按钮，选择全国。"}),"\n",(0,t.jsx)(n.p,{children:"然后在输入框输入前端，点击搜索。"}),"\n",(0,t.jsx)(n.p,{children:"然后跑一下。"}),"\n",(0,t.jsx)(n.p,{children:"跑之前在 package.json 设置 type 为 module，也就是支持 es module 的 import："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:$,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"node ./test.js\n"})}),"\n",(0,t.jsx)(n.p,{children:"它会自动打开一个浏览器窗口："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:G,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后执行自动化脚本："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:z,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样，下面的列表数据就是可以抓取的了。"}),"\n",(0,t.jsx)(n.p,{children:"不过这里其实没必要这么麻烦，因为只要你 url 里带了 city 和 query 的参数，会自动设置为搜索参数："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:T,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"所以直接打开这个 url 就可以："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch({\n    headless: false,\n    defaultViewport: {\n        width: 0,\n        height: 0\n    }\n});\n\nconst page = await browser.newPage();\n\nawait page.goto('https://www.zhipin.com/web/geek/job?query=前端&city=100010000');\n\nawait page.waitForSelector('.job-list-box');\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后我们要拿到页数，用来访问列表的每页数据。"}),"\n",(0,t.jsx)(n.p,{children:"怎么拿到页数呢？"}),"\n",(0,t.jsx)(n.p,{children:"其实就是拿 options-pages 的倒数第二个 a 标签的内容："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:R,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch({\n    headless: false,\n    defaultViewport: {\n        width: 0,\n        height: 0\n    }\n});\n\nconst page = await browser.newPage();\n\nawait page.goto('https://www.zhipin.com/web/geek/job?query=前端&city=100010000');\n\nawait page.waitForSelector('.job-list-box');\n\nconst res = await page.$eval('.options-pages a:nth-last-child(2)', el => {\n    return parseInt(el.textContent)\n});\n\nconsole.log(res);\n"})}),"\n",(0,t.jsx)(n.p,{children:"$eval 第一个参数是选择器，第二个参数是对选择出的元素做一些处理后返回。"}),"\n",(0,t.jsx)(n.p,{children:"跑一下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:F,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"页数没问题。"}),"\n",(0,t.jsx)(n.p,{children:"然后接下来就是访问每页的列表数据了。"}),"\n",(0,t.jsx)(n.p,{children:"就是在 url 后再带一个 page 的参数："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:O,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后，我们遍历访问每页数据，拿到每个职位的信息："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import puppeteer from 'puppeteer';\n\nconst browser = await puppeteer.launch({\n    headless: false,\n    defaultViewport: {\n        width: 0,\n        height: 0\n    }\n});\n\nconst page = await browser.newPage();\n\nawait page.goto('https://www.zhipin.com/web/geek/job?query=前端&city=100010000');\n\nawait page.waitForSelector('.job-list-box');\n\nconst totalPage = await page.$eval('.options-pages a:nth-last-child(2)', e => {\n    return parseInt(e.textContent)\n});\n\nconst allJobs = [];\nfor(let i = 1; i <= totalPage; i ++) {\n    await page.goto('https://www.zhipin.com/web/geek/job?query=前端&city=100010000&page=' + i);\n\n    await page.waitForSelector('.job-list-box');\n\n    const jobs = await page.$eval('.job-list-box', el => {\n        return [...el.querySelectorAll('.job-card-wrapper')].map(item => {\n            return {\n                job: {\n                    name: item.querySelector('.job-name').textContent,\n                    area: item.querySelector('.job-area').textContent,\n                    salary: item.querySelector('.salary').textContent\n                },\n                link: item.querySelector('a').href,\n                company: {\n                    name: item.querySelector('.company-name').textContent,\n                }\n            }\n        })\n    });\n    allJobs.push(...jobs);\n}\n\nconsole.log(allJobs);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:N,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"具体的信息都是从 dom 去拿的："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:M,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"跑一下试试："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:B,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:_,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"可以看到，它会依次打开每一页，然后把职位数据爬取下来。"}),"\n",(0,t.jsx)(n.p,{children:"做到这一步还不够，我们要点进去这个链接，拿到 jd 的描述。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38c311e0bdcf4db6b8d15bf173ed058f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1076&h=756&s=122606&e=png&b=1f1f1f",target:"_blank",rel:"noopener noreferrer"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"for(let i = 0; i< allJobs.length; i ++) {\n    await page.goto(allJobs[i].link);\n\n    try{\n        await page.waitForSelector('.job-sec-text');\n\n        const jd= await page.$eval('.job-sec-text', el => {\n            return el.textContent\n        });\n        allJobs[i].desc = jd;\n\n        console.log(allJobs[i]);\n    } catch(e) {}\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"try catch 是因为有的页面可能打开会超时导致中止，这种就直接跳过好了。"}),"\n",(0,t.jsx)(n.p,{children:"跑一下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:J,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"它同样会自动打开每个岗位详情页，拿到职位描述的内容，并打印在控制台。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:A,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"接下来只要把这些存入数据库就好了。"}),"\n",(0,t.jsx)(n.p,{children:"我们新建个 nest 项目："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install -g @nestjs/cli\n\nnest new boss-jd-spider\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:P,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"用 docker 把 mysql 跑起来："}),"\n",(0,t.jsxs)(n.p,{children:["从 ",(0,t.jsx)(n.a,{href:"https://docker.com/",target:"_blank",rel:"noopener noreferrer",children:"docker 官网"}),"下载 docker desktop，这个是 docker 的桌面端："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:C,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"跑起来后，搜索 mysql 镜像（这步需要科学上网），点击 run："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"输入容器名、端口映射、以及挂载的数据卷，还要指定一个环境变量："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:q,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"端口映射就是把宿主机的 3306 端口映射到容器里的 3306 端口，这样就可以在宿主机访问了。"}),"\n",(0,t.jsx)(n.p,{children:"数据卷挂载就是把宿主机的某个目录映射到容器里的 /var/lib/mysql 目录，这样数据是保存在本地的，不会丢失。"}),"\n",(0,t.jsx)(n.p,{children:"而 MYSQL_ROOT_PASSWORD 的密码则是 mysql 连接时候的密码。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:E,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"跑起来后，我们用 GUI 客户端连上，这里我们用的是 mysql workbench，这是 mysql 官方提供的免费客户端："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:k,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"连接上之后，点击创建 database："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:S,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"指定名字、字符集为 utf8mb4，然后点击右下角的 apply。"}),"\n",(0,t.jsx)(n.p,{children:"创建成功之后在左侧就可以看到这个 database 了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"当然，现在还没有表。"}),"\n",(0,t.jsx)(n.p,{children:"我们在 Nest 里用 TypeORM 连接 mysql。"}),"\n",(0,t.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install --save @nestjs/typeorm typeorm mysql2\n"})}),"\n",(0,t.jsx)(n.p,{children:"mysql2 是数据库驱动，typeorm 是我们用的 orm 框架，而 @nestjs/tyeporm 是 nest 集成 typeorm 用的。"}),"\n",(0,t.jsx)(n.p,{children:"在 AppModule 里引入 TypeORM，指定数据库连接配置："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'TypeOrmModule.forRoot({\n  type: "mysql",\n  host: "localhost",\n  port: 3306,\n  username: "root",\n  password: "guang",\n  database: "boss-spider",\n  synchronize: true,\n  logging: true,\n  entities: [],\n  poolSize: 10,\n  connectorPackage: \'mysql2\',\n  extra: {\n      authPlugin: \'sha256_password\',\n  }\n}),\n'})}),"\n",(0,t.jsx)(n.p,{children:"然后创建个 entity："}),"\n",(0,t.jsx)(n.p,{children:"src/entities/Job.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class Job {\n    \n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        length: 30,\n        comment: '职位名称'\n    })\n    name: string;\n\n    @Column({\n        length: 20,\n        comment: '区域'\n    })\n    area: string;\n\n    @Column({\n        length: 10,\n        comment: '薪资范围'\n    })\n    salary: string;\n\n    @Column({\n        length: 600,\n        comment: '详情页链接'\n    })    \n    link: string;\n\n    @Column({\n        length: 30,\n        comment: '公司名'\n    })   \n    company: string;\n\n    @Column({\n        type: 'text',\n        comment: '职位描述'\n    })\n    desc: string;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"链接可能很长，所以设置为 600，而职位描述就更长了，直接设置 text 就行，它可以存储大段文本。"}),"\n",(0,t.jsx)(n.p,{children:"在 AppModule 引入："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:w,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,t.jsx)(n.p,{children:"TypeORM会自动建表:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后我们加个启动爬虫的接口："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Get('start-spider')\nstartSpider() {\n    this.appService.startSpider();\n    return '爬虫已启动';\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"安装 puppeteer："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm install --save puppeteer\n"})}),"\n",(0,t.jsx)(n.p,{children:"在 AppService 里实现 startSpider："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { Injectable } from '@nestjs/common';\nimport puppeteer from 'puppeteer';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n\n  async startSpider() {\n    const browser = await puppeteer.launch({\n        headless: false\n        ,\n        defaultViewport: {\n            width: 0,\n            height: 0\n        }\n    });\n\n    const page = await browser.newPage();\n\n    await page.goto('https://www.zhipin.com/web/geek/job?query=前端&city=100010000');\n\n    await page.waitForSelector('.job-list-box');\n\n    const totalPage = await page.$eval('.options-pages a:nth-last-child(2)', e => {\n        return parseInt(e.textContent)\n    });\n\n    const allJobs = [];\n    for(let i = 1; i <= totalPage; i ++) {\n        await page.goto('https://www.zhipin.com/web/geek/job?query=前端&city=100010000&page=' + i);\n\n        await page.waitForSelector('.job-list-box');\n\n        const jobs = await page.$eval('.job-list-box', el => {\n            return [...el.querySelectorAll('.job-card-wrapper')].map(item => {\n                return {\n                    job: {\n                        name: item.querySelector('.job-name').textContent,\n                        area: item.querySelector('.job-area').textContent,\n                        salary: item.querySelector('.salary').textContent\n                    },\n                    link: item.querySelector('a').href,\n                    company: {\n                        name: item.querySelector('.company-name').textContent\n                    }\n                }\n            })\n        });\n        allJobs.push(...jobs);\n    }\n\n    // console.log(allJobs);\n\n    for(let i = 0; i< allJobs.length; i ++) {\n        await page.goto(allJobs[i].link);\n\n        try{\n            await page.waitForSelector('.job-sec-text');\n\n            const jd= await page.$eval('.job-sec-text', el => {\n                return el.textContent\n            });\n            allJobs[i].desc = jd;\n\n            console.log(allJobs[i]);\n        } catch(e) {}\n    }\n  }\n  \n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里原封不动的把之前的爬虫逻辑复制了过来，只是把 headless 设置为了 true，因为我们不需要界面。"}),"\n",(0,t.jsx)(n.p,{children:"浏览器访问下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"爬虫跑的没啥问题。"}),"\n",(0,t.jsx)(n.p,{children:"不过这个过程中 boss 可能会检测到你访问频率过高，会让你做下是不是真人的验证："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这个就是验证码点点就好了。"}),"\n",(0,t.jsx)(n.p,{children:"然后我们把数据存到数据库里："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"用 EntityManager 来 save 就好了："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"@Inject(EntityManager)\nprivate entityManager: EntityManager;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const job = new Job();\n\njob.name = allJobs[i].job.name;\njob.area = allJobs[i].job.area;\njob.salary = allJobs[i].job.salary;\njob.link = allJobs[i].link;\njob.company = allJobs[i].company.name;\njob.desc = allJobs[i].desc;\n\nawait this.entityManager.save(Job, job);\n"})}),"\n",(0,t.jsx)(n.p,{children:"再跑下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"去数据库里看下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样，你就可以对这些职位描述做一些搜索，分析之类的了。"}),"\n",(0,t.jsx)(n.p,{children:"比如搜索职位描述中包含 react 的岗位："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT * FROM `boss-spider`.job where `desc` like "%React%";\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:r,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样，爬虫就做完了。"}),"\n",(0,t.jsx)(n.p,{children:"如果想在前端实时看到爬取到的数据，可以通过 SSE 来实时返回："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样用："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这里我们就不改了。"}),"\n",(0,t.jsxs)(n.p,{children:["案例代码上传了 nest 小册仓库：",(0,t.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/boss-jd-spider",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/boss-jd-spider"})]}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"我们通过 puppeteer 实现了对 BOSS 直聘网站的前端职位的爬取，并用 Nest + TypeORM 把数据保存到了数据库里。"}),"\n",(0,t.jsx)(n.p,{children:"这样就可以在本地对这些职位数据做一些处理或分析了。"})]})}function L(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(H,{...e})}):H(e)}let W=L;L.__RSPRESS_PAGE_META={},L.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F102.%20Puppeteer%20%E5%AE%9E%E7%8E%B0%E7%88%AC%E8%99%AB%EF%BC%8C%E7%88%AC%E5%8F%96%20BOSS%20%E7%9B%B4%E8%81%98%E5%85%A8%E9%83%A8%E5%89%8D%E7%AB%AF%E5%B2%97%E4%BD%8D.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"102. Puppeteer 实现爬虫，爬取 BOSS 直聘全部前端岗位",headingTitle:"102. Puppeteer 实现爬虫，爬取 BOSS 直聘全部前端岗位",frontmatter:{}}}}]);