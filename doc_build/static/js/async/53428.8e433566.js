"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["53428"],{571983:function(e,r,n){n.r(r),n.d(r,{default:()=>a});var l=n(552676),t=n(740453);function i(e){let r=Object.assign({h1:"h1",a:"a",p:"p",h3:"h3",pre:"pre",code:"code",blockquote:"blockquote",strong:"strong",img:"img",hr:"hr"},(0,t.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(r.h1,{id:"11实战篇-02结合-live-reload-实现自动刷新",children:["11实战篇 02：结合 live-reload 实现自动刷新",(0,l.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#11实战篇-02结合-live-reload-实现自动刷新",children:"#"})]}),"\n",(0,l.jsx)(r.p,{children:"前端工程师日常开发最频繁（实际上最浪费时间）的操作是什么？可能你已经想到了，就是刷新页面，要让变更生效，需要重新加载，刷新页面的操作就变成了重复低效的操作。"}),"\n",(0,l.jsxs)(r.p,{children:["于是社区里出现了 ",(0,l.jsx)(r.a,{href:"https://www.npmjs.com/package/livereload",target:"_blank",rel:"noopener noreferrer",children:"LiveReload"})," 来把这个过程自动化，react 种子项目生成工具 ",(0,l.jsx)(r.a,{href:"https://github.com/facebookincubator/create-react-app",target:"_blank",rel:"noopener noreferrer",children:"create-react-app"})," 中就使用了这种技术。"]}),"\n",(0,l.jsxs)(r.p,{children:["但随着技术的演化，在单页应用中刷新页面意味着客户端状态的全部丢失，特别是复杂的单页应用刷新意味着更大量的重复工作才能回到刷新前的状态，于是社区又捣鼓出了 ",(0,l.jsx)(r.a,{href:"https://webpack.js.org/concepts/hot-module-replacement/",target:"_blank",rel:"noopener noreferrer",children:"Hot Module Replacement，简称为 HMR"}),"，比如使用 ",(0,l.jsx)(r.a,{href:"https://github.com/vuejs/vue-cli",target:"_blank",rel:"noopener noreferrer",children:"vue-cli"})," 创建的 ",(0,l.jsx)(r.a,{href:"https://github.com/vuejs-templates/webpack",target:"_blank",rel:"noopener noreferrer",children:"webpack"})," 种子项目中就包含这种特性，",(0,l.jsx)(r.a,{href:"https://facebook.github.io/react-native/blog/2016/03/24/introducing-hot-reloading.html",target:"_blank",rel:"noopener noreferrer",children:"react-native"})," 也内置了这种特性，来帮助开发者提高效率。"]}),"\n",(0,l.jsx)(r.p,{children:"读到这里，你可能会嘀咕，看起来 LiveReload 并不是最新的技术，还讨论它干啥，实际上它是自动刷新技术的鼻祖，后续的 HMR、HR 等都是它的改良版，动手配置下自动刷新，也能让你对这些技术的基本原理略知一二。"}),"\n",(0,l.jsx)(r.p,{children:"下面介绍如何在经典的前端项目中（引用了 css、js 的 html 页面）接入 LiveReload 的详细步骤："}),"\n",(0,l.jsxs)(r.h3,{id:"1-安装项目依赖",children:["1. 安装项目依赖",(0,l.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1-安装项目依赖",children:"#"})]}),"\n",(0,l.jsxs)(r.p,{children:["使用如下命令安装 ",(0,l.jsx)(r.a,{href:"https://www.npmjs.com/package/livereload",target:"_blank",rel:"noopener noreferrer",children:"livereload"})," 和 ",(0,l.jsx)(r.a,{href:"https://www.npmjs.com/package/http-server",target:"_blank",rel:"noopener noreferrer",children:"http-server"})," 到项目依赖中："]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-shell",children:"npm i livereload http-server -D\n# npm install livereload http-server --save-dev\n# yarn add livereload http-server -D\n"})}),"\n",(0,l.jsxs)(r.h3,{id:"2-添加-npm-script",children:["2. 添加 npm script",(0,l.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#2-添加-npm-script",children:"#"})]}),"\n",(0,l.jsx)(r.p,{children:"按如下提示添加命令，方便我们启动 LiveReload 服务器和通过 HTTP 的方式访问页面："}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-patch",children:'-    "cover:open": "scripty"\n+    "cover:open": "scripty",\n+    "client": "npm-run-all --parallel client:*",\n+    "client:reload-server": "livereload client/",\n+    "client:static-server": "http-server client/"\n'})}),"\n",(0,l.jsx)(r.p,{children:"其中 client 命令能同时启动 livereload 服务、静态文件服务。"}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"TIP#16"}),"：可能有同学会问，为什么需要启动两个服务，其中 http-server 启动的是静态文件服务器，该服务启动后可以通过 http 的方式访问文件系统上的文件，而 livereload 是启动了自动刷新服务，该服务负责监听文件系统变化，并在文件系统变化时通知所有连接的客户端，在 ",(0,l.jsx)(r.code,{children:"client/index.html"})," 中嵌入的那段 js 实际上是和 livereload-server 连接的一个 livereload-client。"]}),"\n"]}),"\n",(0,l.jsxs)(r.h3,{id:"3-在页面中嵌入-livereload-脚本",children:["3. 在页面中嵌入 livereload 脚本",(0,l.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#3-在页面中嵌入-livereload-脚本",children:"#"})]}),"\n",(0,l.jsx)(r.p,{children:"修改 client/index.html 嵌入 livereload 脚本（能够连接我们的 livereload 服务），diff 如下："}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-patch",children:" <body>\n   <h2>LiveReload Demo</h2>\n+  <script>\n+    document.write('<script src=\"http://' + (location.host || 'localhost').split(':')[0] +\n+      ':35729/livereload.js?snipver=1\"></' + 'script>')\n+  <\/script>\n </body>\n"})}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"TIP#17"}),"：livereload 是支持在启动时自定义端口的，如果你使用了自定义端口，在页面中嵌入的这段 js 里面的 ",(0,l.jsx)(r.code,{children:"35729"})," 也需要替换成对应的端口。"]}),"\n"]}),"\n",(0,l.jsxs)(r.h3,{id:"4-启动服务并测试",children:["4. 启动服务并测试",(0,l.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#4-启动服务并测试",children:"#"})]}),"\n",(0,l.jsx)(r.p,{children:"最后，运行 npm run client 之后，截图如下，注意两个红框里面的输出表示服务启动成功："}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.img,{src:"https://user-gold-cdn.xitu.io/2017/12/14/1605294cbbf843bc?w=1066&h=503&f=png&s=111997",alt:""})}),"\n",(0,l.jsxs)(r.p,{children:["然后，打开浏览器访问：",(0,l.jsx)(r.a,{href:"http://localhost:8080%EF%BC%8C%E6%8E%A5%E7%9D%80%E4%BF%AE%E6%94%B9",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080，接着修改"})," client/main.css 并保存（",(0,l.jsx)(r.strong,{children:"别忘了保存"}),"），你会发现浏览器自动刷新了。如果没有刷新，欢迎留言交流。"]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"TIP#18"}),"：有代码洁癖的同学可能会问，在页面中嵌入的那段 js 在线上环境咋办？实际上在嵌入这段脚本的时候可以通过简单的手段（比如判断 location.hostname）去检查当前页面运行环境，如果是线上环境就不嵌入了，或者使用打包工具处理 html 文件，上线前直接去掉即可。"]}),"\n"]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["本节用到的代码见 ",(0,l.jsx)(r.a,{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/10-livereload-with-npm-script",target:"_blank",rel:"noopener noreferrer",children:"GitHub"}),"，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 ",(0,l.jsx)(r.code,{children:"10-livereload-with-npm-script"}),"。"]}),"\n"]}),"\n",(0,l.jsx)(r.hr,{})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,t.ah)(),e.components);return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(i,{...e})}):i(e)}let a=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["%E7%94%A8%20npm%20script%20%E6%89%93%E9%80%A0%E8%B6%85%E6%BA%9C%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%2F11%E5%AE%9E%E6%88%98%E7%AF%87%2002%EF%BC%9A%E7%BB%93%E5%90%88%20live-reload%20%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0.md"]={toc:[{text:"1. 安装项目依赖",id:"1-安装项目依赖",depth:3},{text:"2. 添加 npm script",id:"2-添加-npm-script",depth:3},{text:"3. 在页面中嵌入 livereload 脚本",id:"3-在页面中嵌入-livereload-脚本",depth:3},{text:"4. 启动服务并测试",id:"4-启动服务并测试",depth:3}],title:"11实战篇 02：结合 live-reload 实现自动刷新",headingTitle:"11实战篇 02：结合 live-reload 实现自动刷新",frontmatter:{}}}}]);