"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["68541"],{215979:function(e,n,r){r.r(n),r.d(n,{default:()=>b});var s=r(552676),a=r(740453);let l=r.p+"static/image/e7b9e56896036dbea1bc93adb1faefc0.fd564788.png",i=r.p+"static/image/e5605ebff3ed373431e9ddbf0494ffe6.04bc2559.png",t=r.p+"static/image/0874f9b71bc7f8fcc354138efc913123.8947aa05.png",p=r.p+"static/image/f6f3418e6d13cb038a37168bd5b33542.97afbd5e.png",c=r.p+"static/image/57a44d57a27185e7d2a28d9b701eeadf.7d7d88d6.png",h=r.p+"static/image/b099e5a52d295378642760b7260ce00f.21b600c6.png",d=r.p+"static/image/785632819ea820ac000bd165442d6bf5.85c05faa.png",o=r.p+"static/image/c6397898dfb970bdd37dc300b1680814.9cfa1950.png";function x(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",h4:"h4",pre:"pre",code:"code",ul:"ul",li:"li",h3:"h3",h5:"h5"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"12babel-的内置功能上",children:["12.Babel 的内置功能（上）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12babel-的内置功能上",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"babel 最开始的名字叫 6to5，主要是做 es6 到 es5 语法的转换和 polyfill，后来在 4.0 时改名为了 babel。虽然从 6to5 改名到了 babel，但是做的事情并没有变，依然是从高版本语法和 api 转换成低版本的语法并自动 polyfill 缺少的 api。"}),"\n",(0,s.jsx)(n.p,{children:"babel 是怎么实现这些功能的呢？"}),"\n",(0,s.jsxs)(n.h2,{id:"从插件到-preset",children:["从插件到 preset",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#从插件到-preset",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"要实现转换，第一步要明确转换什么： 划定一个集合放要转换的特性，再划定一个集合放转换到的目标特性，两者建立一一映射关系。就确定了我们要做哪些转换。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.h4,{id:"exponentiation-operator",children:["exponentiation operator",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#exponentiation-operator",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"比如乘方运算符，我们会用 Math.pow 来实现"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let x = 10 ** 2;\n\nx **= 3;\n"})}),"\n",(0,s.jsx)(n.p,{children:"转换为"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let x = Math.pow(10, 2);\n\nx = Math.pow(x, 3);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.h4,{id:"class",children:["class",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#class",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"再比如 class，我们会用 function、prototype 来实现"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Test {\n  constructor(name) {\n    this.name = name;\n  }\n\n  logger() {\n    console.log("Hello", this.name);\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"转换为"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nvar Test = (function() {\n  function Test(name) {\n    _classCallCheck(this, Test);\n\n    this.name = name;\n  }\n\n  Test.prototype.logger = function logger() {\n    console.log("Hello", this.name);\n  };\n\n  return Test;\n})();\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"每一个语法都可以这样转换为低版本的语法，那把所有的这种高版本语法写的代码转换为低版本的，那不就实现了编译了么。"}),"\n",(0,s.jsx)(n.p,{children:"但是只是转换并不能解决所有问题，涉及到某个对象的 api，比如 Array.prototype.find，这种 api 的兼容并不是需要转换语法，而是要在环境中注入我们实现的 api，也就是 polyfill （垫片）。"}),"\n",(0,s.jsx)(n.p,{children:"所以我们做的事情除了语法转换外，还有 api 的 polyfill。"}),"\n",(0,s.jsx)(n.p,{children:"先说语法转换。"}),"\n",(0,s.jsx)(n.p,{children:"我们要转换哪些语法呢？"}),"\n",(0,s.jsx)(n.p,{children:"babel 插件需要转换的语法包括 es 标准语法、proposal 阶段的语法，还有 react、flow、typescript 等特有语法。"}),"\n",(0,s.jsxs)(n.h4,{id:"es-标准语法",children:["es 标准语法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#es-标准语法",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我们知道，",(0,s.jsx)(n.a,{href:"https://262.ecma-international.org/",target:"_blank",rel:"noopener noreferrer",children:"TC39"})," 是制定 javascript 语言标准的组织，每年都会公布加入到语言标准的特性，",(0,s.jsx)(n.a,{href:"https://262.ecma-international.org/6.0",target:"_blank",rel:"noopener noreferrer",children:"es2015"}),"、es2016、es2017 等。这些是我们要转换的语言特性范围。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 babel6 时，分别用 preset-es2015、 preset-es2016 等来维护相应的 transform plugin，但在 babel7 的时候就改为 preset env 了。"}),"\n",(0,s.jsxs)(n.h4,{id:"proposal-阶段的语法",children:["proposal 阶段的语法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#proposal-阶段的语法",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["babel 要转换的不只是加入标准的特性，语言特性从提出到标准会有一个过程，分为",(0,s.jsx)(n.a,{href:"https://tc39.es/process-document/",target:"_blank",rel:"noopener noreferrer",children:"几个阶段"}),"。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"阶段 0 - Strawman: 只是一个想法，可能用 babel plugin 实现"}),"\n",(0,s.jsx)(n.li,{children:"阶段 1 - Proposal: 值得继续的建议"}),"\n",(0,s.jsx)(n.li,{children:"阶段 2 - Draft: 建立 spec"}),"\n",(0,s.jsx)(n.li,{children:"阶段 3 - Candidate: 完成 spec 并且在浏览器实现"}),"\n",(0,s.jsx)(n.li,{children:"阶段 4 - Finished: 会加入到下一年的 es20xx spec"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这些还未加入到语言标准的特性也是要支持的。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(n.h4,{id:"reactflowtypescript",children:["react、flow、typescript",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#reactflowtypescript",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"只是转换 javascript 本身的 es spec 和 proposal 的特性特性并不够，现在我们开发的时候 jsx、typescript、flow 这些都是会用的，babel 肯定也得支持。"}),"\n",(0,s.jsx)(n.p,{children:"这些转换对应的 plugin 分别放在不同 preset 里： preset-jsx、preset-typescript、preset-flow。"}),"\n",(0,s.jsx)(n.p,{children:"我们要转换的范围又大了一些。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"上面是插件要转换的语言特性，babel7 内置的实现这些特性的插件分为 syntax、transform、proposal 3类。"}),"\n",(0,s.jsxs)(n.h4,{id:"syntax-plugin",children:["syntax plugin",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#syntax-plugin",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"syntax plugin 是在 parserOptions 中放入一个 flag 让 parser 知道要 parse 什么语法，最终的 parse 逻辑还是 babel parser（babylon） 实现的。"}),"\n",(0,s.jsx)(n.p,{children:"一般 syntax plugin 都是这样的："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { declare } from "@babel/helper-plugin-utils";\n\nexport default declare(api => {\n  api.assertVersion(7);\n\n  return {\n    name: "syntax-function-bind",\n\n    manipulateOptions(opts, parserOpts) {\n      parserOpts.plugins.push("functionBind");\n    },\n  };\n});\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"这些插件的目的就是让 parser 能够正确的解析对应的语法成 AST。"}),"\n",(0,s.jsxs)(n.h4,{id:"transform-plugin",children:["transform plugin",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#transform-plugin",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"transform plugin 是对 AST 的转换，各种 es20xx 语言特性、typescript、jsx 等的转换都是在 transform plugin 里面实现的。"}),"\n",(0,s.jsx)(n.p,{children:"有的时候需要结合 syntax plugin 和 transform plugin， 比如 typescript 的语法解析要使用 @babel/plugin-syntax-typescript 在 parserOptions 放入解析 typescript 语法的选项，然后使用 @babel/plugin-transform-typescript 来转换解析出的 typescript 对应的 AST 的转换。"}),"\n",(0,s.jsx)(n.p,{children:"平时我们一般使用 @babel/preset-typescript，它对上面两个插件做了封装。"}),"\n",(0,s.jsxs)(n.h4,{id:"proposal-plugin",children:["proposal plugin",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#proposal-plugin",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"未加入语言标准的特性的 AST 转换插件叫 proposal plugin，其实他也是 transform plugin，但是为了和标准特性区分，所以这样叫。"}),"\n",(0,s.jsx)(n.p,{children:"完成 proposal 特性的支持，有时同样需要 综合 syntax plugin 和 proposal plugin，比如 function bind （:: 操作符）就需要同时使用 @babel/plugin-syntax-function-bind 和 @babel/plugin-proposal-function-bind。"}),"\n",(0,s.jsx)(n.p,{children:"总之，babel 的内置的 plugin，就 @babel/plugin-syntax-xxx, @babel/plugin-transform-xxx、@babel/plugin-proposal-xxx 3种。"}),"\n",(0,s.jsx)(n.p,{children:"这样的 plugin 还是很多的，所以又设计了 preset。"}),"\n",(0,s.jsxs)(n.h3,{id:"preset",children:["preset",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#preset",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"用于不同的目的需要不同的 babel 插件，所以 babel 设计了 preset"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"不同版本的语言标准支持： preset-es2015、preset-es2016 等，babel7 后用 preset-env 代替"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"未加入标准的语言特性的支持： 用于 stage0、stage1、stage2 的特性，babel7 后单独引入 proposal plugin"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"用于 react、jsx、flow 的支持：分别封装相应的插件为 preset-react、preset-jsx、preset-flow，直接使用对应 preset 即可"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"preset 就是插件的集合，但是它可以动态确定包含的插件，比如 preset-env 就是根据 targets 来确定插件。"}),"\n",(0,s.jsx)(n.p,{children:"插件和插件之间自然有一些公共的代码，这部分放在 helper 里："}),"\n",(0,s.jsxs)(n.h3,{id:"helper",children:["helper",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#helper",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"每个特性的实现用一个 babel 插件实现，当 babel 插件多了，自然会有一些共同的逻辑。这部分逻辑怎么共享呢？"}),"\n",(0,s.jsx)(n.p,{children:"babel 设计了插件之间共享逻辑的机制，就是 helper。"}),"\n",(0,s.jsx)(n.p,{children:"helper 分为两种："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"一种是注入到 AST 的运行时用的全局函数"}),"\n",(0,s.jsx)(n.li,{children:"一种是操作 AST 的工具函数，比如变量提升这种通用逻辑"}),"\n"]}),"\n",(0,s.jsxs)(n.h5,{id:"注入到-ast-的全局函数",children:["注入到 AST 的全局函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注入到-ast-的全局函数",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"注入到 AST 的运行时用的全局函数，比如"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class Guang {}\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"会被转换成"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function _classCallCheck(instance, Constructor) {\n  //...\n}\n\nvar Guang = function Guang() {\n  _classCallCheck(this, Guang);\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里的 _classCallCheck 就是 helper。"}),"\n",(0,s.jsx)(n.p,{children:"这类 helper 数量比较多，babel7 有 80 多个，都在 @babel/helpers 里面。在插件里使用的话，直接调用 this.addHelper，会在顶层作用域声明对应的 helper，然后返回对应的 identifier。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var transformObjectSetPrototypeOfToAssign = declare(function (api) {\n    api.assertVersion(7);\n    return {\n      name: "transform-object-set-prototype-of-to-assign",\n      visitor: {\n        CallExpression: function CallExpression(path) {\n          if (path.get("callee").matchesPattern("Object.setPrototypeOf")) {\n            path.node.callee = this.addHelper("defaults");\n          }\n        }\n      }\n    };\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"其实一般我们也用不到，主要是 babel 内部用的。"}),"\n",(0,s.jsx)(n.p,{children:"这种 helper 是用于用低版本特性实现高版本特性的，比如用 function 和 prototype 实现 class."}),"\n",(0,s.jsx)(n.p,{children:"内部用 template 实现的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"除了编译的时候注入 helper 以外，runtime 包里也要包含这些 helper。"}),"\n",(0,s.jsx)(n.p,{children:"因为我们可以把 helper 注入到 AST，也可以抽离成从 runtime 包引入的形式："}),"\n",(0,s.jsx)(n.p,{children:"比如这样："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"除了用于注入同样的 AST 的 helper，还有一些公共逻辑的 helper："}),"\n",(0,s.jsxs)(n.h5,{id:"操作-ast-的工具函数",children:["操作 AST 的工具函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#操作-ast-的工具函数",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"操作 AST 的工具函数，比如变量提升自己实现的话还是比较麻烦的，这种通用逻辑可以封装到 helper 里，然后插件里直接用："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const hoistVariables = require('@babel/helper-hoist-variables').default;\n\ncosnt plugin = function () {\n    visitor: {\n        VariableDeclaration(path) {\n            hoistVariables(path.parentPath, (id) => {\n                path.scope.parent.push({\n                    id: path.scope.generateUidIdentifier(id.name)\n                });\n                return id;\n            }, 'const' );\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"当输入为"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function func(){\n    const a = 1;\n    const b = 2;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"输出为"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var _a, _b;\n\nfunction func() {\n  a = 1;\n  b = 2;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"我们借助 @babel/helper-hoist-variables 轻松实现了变量提升的逻辑。"}),"\n",(0,s.jsx)(n.p,{children:"再举一个例子"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const importModule = require('@babel/helper-module-imports');\n\ncosnt plugin = function ({ template }) {\n    visitor: {\n        Program(path) {\n            const reactIdentifier = importModule.addDefault(path, 'lodash',{\n                nameHint: '_'\n            });\n            path.node.body.push(template.ast(`const get = _.get`));\n        }\n    }\n}                   \n"})}),"\n",(0,s.jsx)(n.p,{children:"会在代码中加入模块引入和变量声明的代码"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var _ = _interopRequireDefault(require("lodash")).default;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst get = _.get;\n'})}),"\n",(0,s.jsx)(n.p,{children:"我们借助 @babel/helper-module-imports 可以很轻松的引入一个模块，通过 named import、default import 或者 namespace import 的方式。"}),"\n",(0,s.jsx)(n.p,{children:"这类 helper 的特点是需要手动引入对应的包，调用 api，而不是直接 this.addHelper 就行。"}),"\n",(0,s.jsx)(n.p,{children:"说了这么多，其实 helper 一般我们也不会用到，知道它是做啥的就行。"}),"\n",(0,s.jsx)(n.p,{children:"babel helpers 是用于 babel plugin 逻辑复用的一些工具函数，分为用于注入 runtime 代码的 helper 和用于简化 AST 操作 的 helper两种。"}),"\n",(0,s.jsx)(n.p,{children:"第一种都在 @babel/helpers 包里，直接 this.addHelper(name) 就可以引入， 而第二种需要手动引入包和调用 api。"}),"\n",(0,s.jsx)(n.p,{children:"前面提到了有的 api 会运行时引入，那 runtime 包里具体有啥呢？"}),"\n",(0,s.jsxs)(n.h3,{id:"babel-runtime",children:["babel runtime",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel-runtime",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"babel runtime 里面放运行时加载的模块，会被打包工具打包到产物中，下面放着各种需要在 runtime 使用的函数，包括三部分：regenerator、corejs、helper。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"corejs 这就是新的 api 的 polyfill，分为 2 和 3 两个版本，3 才实现了实例方法的polyfill"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["regenerator 是 facebook 实现的 aync 的 runtime 库，babel 使用 ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/regenerator/tree/master/packages/runtime",target:"_blank",rel:"noopener noreferrer",children:"regenerator-runtime"}),"来支持实现 async await 的支持。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"helper 是 babel 做语法转换时用到的函数，比如 _typeof、_extends 等"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"babel 做语法转换和 api 的 polyfill，需要自己实现一部分 runtime 的函数，就是 helper 部分。"}),"\n",(0,s.jsx)(n.p,{children:"有的也没有自己实现，用的第三方的，比如 regenerator 是用的 facebook 的。api 的 polyfill 也是用的 core-js 的，babel 对它们做了整合。"}),"\n",(0,s.jsx)(n.p,{children:"因为 async await 这种特性的实现还是比较复杂的，标准 api 的实现的跟进也需要花精力，所以 babel 直接用了社区的实现。"}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们知道了 babel 内置的 plugin 分为了 transform、proposal、syntax 三种，也知道了 preset 就是插件的集合。"}),"\n",(0,s.jsx)(n.p,{children:"插件之间的可复用的 AST 操作逻辑，需要注入的公共代码都在 helper 里。"}),"\n",(0,s.jsx)(n.p,{children:"除了注入到 AST 外，还有一部分是从 runtime 包引入的。runtime 包分为 helper、regenerator、core-js 3部分。后面两个都是社区的实现。"}),"\n",(0,s.jsx)(n.p,{children:"知道了 preset、helper、runtime 都是什么，那 babel 是怎么基于这些来实现语法转换和  api polyfill 的功能的呢？"}),"\n",(0,s.jsx)(n.p,{children:"下节我们继续聊。"})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}let b=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["Babel%20%E6%8F%92%E4%BB%B6%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F12.Babel%20%E7%9A%84%E5%86%85%E7%BD%AE%E5%8A%9F%E8%83%BD%EF%BC%88%E4%B8%8A%EF%BC%89.md"]={toc:[{text:"从插件到 preset",id:"从插件到-preset",depth:2},{text:"exponentiation operator",id:"exponentiation-operator",depth:4},{text:"class",id:"class",depth:4},{text:"es 标准语法",id:"es-标准语法",depth:4},{text:"proposal 阶段的语法",id:"proposal-阶段的语法",depth:4},{text:"react、flow、typescript",id:"reactflowtypescript",depth:4},{text:"syntax plugin",id:"syntax-plugin",depth:4},{text:"transform plugin",id:"transform-plugin",depth:4},{text:"proposal plugin",id:"proposal-plugin",depth:4},{text:"preset",id:"preset",depth:3},{text:"helper",id:"helper",depth:3},{text:"babel runtime",id:"babel-runtime",depth:3},{text:"总结",id:"总结",depth:2}],title:"12.Babel 的内置功能（上）",headingTitle:"12.Babel 的内置功能（上）",frontmatter:{}}}}]);