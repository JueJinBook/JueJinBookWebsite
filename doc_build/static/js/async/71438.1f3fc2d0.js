"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["71438"],{299863:function(e,n,l){l.r(n),l.d(n,{default:()=>p});var s=l(552676),t=l(740453);let a=l.p+"static/image/55529ba3a68c0e26bc1aeeeb4b56050d.f8ceec37.webp",r=l.p+"static/image/52ac6660de56b3247754b75cc05c5fc8.b37fd95f.webp",i=l.p+"static/image/89550068fe4a795ad19f47455ceee803.b78e4da0.webp",c=l.p+"static/image/dc08c6de77c43fc0e8246abde2f6c5e2.d87bc1ac.webp",o=l.p+"static/image/5eccb49a5563063def1d00c70f307391.0b3b5252.webp";function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",h4:"h4",ul:"ul",li:"li",pre:"pre",img:"img",strong:"strong"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"39vue3-实战之会员管理账户修改",children:["39.Vue3 实战之会员管理、账户修改",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#39vue3-实战之会员管理账户修改",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["上一章节学习了订单管理模块，截至目前该实战项目已经使用了 20+ 个 ",(0,s.jsx)(n.code,{children:"Element-plus"})," 的组件，想来已经是对组件的使用和文档的阅读都比较熟悉了。本章节来讲解实战项目的最后两个模块：「会员管理」和「修改密码」。"]}),"\n",(0,s.jsxs)(n.p,{children:["经过前面几个模块的编写，总结出了一个规律：首先，每个页面都需要请求 ",(0,s.jsx)(n.code,{children:"Table"})," 列表数据，其次都有分页。不同的地方在表头的设置，操作的接口数据等。那么就可以尝试着提取 ",(0,s.jsx)(n.code,{children:"Table"})," 作为公共组件，通过传递参数，动态的获取列表数据。"]}),"\n",(0,s.jsxs)(n.h4,{id:"本章节知识点",children:["本章节知识点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章节知识点",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Table 高级公共组件提取"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Slot 具名插槽的使用"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"会员管理页面",children:["会员管理页面",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#会员管理页面",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先，前往 ",(0,s.jsx)(n.code,{children:"App.vue"})," 添加 ",(0,s.jsx)(n.code,{children:"menu"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'\x3c!--App.vue--\x3e\n<el-menu-item index="/guest"><el-icon><User /></el-icon>会员管理</el-menu-item>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["然后前往 ",(0,s.jsx)(n.code,{children:"router/index.js"})," 配置路由参数，如下所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import Guest from '@/views/Guest.vue'\n...\n{\n  path: '/guest',\n  name: 'guest',\n  component: Guest\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["最后在 ",(0,s.jsx)(n.code,{children:"views"})," 添加页面组件 ",(0,s.jsx)(n.code,{children:"Guest.vue"}),"，如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<template>\n  会员管理\n</template>\n\n<script setup>\n<\/script>\n"})}),"\n",(0,s.jsx)(n.p,{children:"添加头部信息："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// utils/index.js\nexport const pathMap = {\n  index: '首页',\n  login: '登录',\n  add: '添加商品',\n  swiper: '轮播图配置',\n  hot: '热销商品配置',\n  new: '新品上线配置',\n  recommend: '为你推荐配置',\n  category: '分类管理',\n  level2: '分类二级管理',\n  level3: '分类三级管理',\n  good: '商品管理',\n  order: '订单管理',\n  order_detail: '订单详情',\n  guest: '会员管理'\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"浏览器查看效果："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["先来编写 ",(0,s.jsx)(n.code,{children:"Table"})," 公共组件，前往 ",(0,s.jsx)(n.code,{children:"components"})," 文件夹，新建一个 ",(0,s.jsx)(n.code,{children:"Table.vue"}),"，代码如下："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"template"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<template>\n  <el-table\n      :load="state.loading"\n      :data="state.tableData"\n      tooltip-effect="dark"\n      style="width: 100%"\n      @selection-change="handleSelectionChange"\n  >\n    <slot name=\'column\'></slot>\n  </el-table>\n  <el-pagination\n    background\n    layout="prev, pager, next"\n    :total="state.total"\n    :page-size="state.pageSize"\n    :current-page="state.currentPage"\n    @current-change="changePage"\n  />\n</template>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["模板部分如上述所示，",(0,s.jsx)(n.code,{children:"<slot name='column'></slot>"})," 是组件下设置的具名插槽。之所以要设置这个插槽，是因为每个 ",(0,s.jsx)(n.code,{children:"Table"})," 列表的表头是不一样的，这个需要在父组件按需传入。分页组件则是相同的，所以直接编写在组件内部。"]}),"\n",(0,s.jsx)(n.p,{children:"接下来是逻辑部分的代码："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"script"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport { onMounted, reactive } from 'vue'\nimport axios from '@/utils/axios'\n\nconst props = defineProps({\n  action: String\n})\nconst state = reactive({\n  loading: false,\n  tableData: [], // 数据列表\n  total: 0, // 总条数\n  currentPage: 1, // 当前页\n  pageSize: 10, // 分页大小\n  multipleSelection: [], // 多选框\n  })\n  // 初始化钩子函数\n  onMounted(() => {\n  getList()\n  })\n  // 获取列表方法\n  const getList = () => {\n  state.loading = true\n  axios.get(props.action, {\n    params: {\n      pageNumber: state.currentPage,\n      pageSize: state.pageSize\n    }\n  }).then(res => {\n    state.tableData = res.list\n    state.total = res.totalCount\n    state.currentPage = res.currPage\n    state.loading = false\n  })\n  }\n  // 选项\n  const handleSelectionChange = (val) => {\n  state.multipleSelection = val\n  }\n  // 分页方法\n  const changePage = (val) => {\n  state.currentPage = val\n  getList()\n  }\n  // script setup 写法，需要通过 defineExpose 方法，将属性暴露出去，才能在父组件通过 ref 形式拿到本组件的内部参数\n  defineExpose({ state: state, getList: getList })\n<\/script>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["写逻辑的部分的时候，读者们要注意，所有 ",(0,s.jsx)(n.code,{children:"return"})," 返回出去的变量，以及通过 ",(0,s.jsx)(n.code,{children:"reactive"})," 声明的变量，都能在父组件通过 ",(0,s.jsx)(n.code,{children:"ref"})," 拿到，所以上述组件内的一些变量，比如多选框选择的项，在父组件就能通过。"]}),"\n",(0,s.jsx)(n.p,{children:"在接口的返回层级和字段上，需要和服务端商量好，这样才能更好的提取公共组件，咱们列表接口返回的格式是这样的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["定义好组件之后，在 ",(0,s.jsx)(n.code,{children:"views/Guest.vue"})," 下添加如下代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<template>\n  <el-card class="guest-container">\n    <template #header>\n      <div class="header">\n        <el-button type="primary" size="small" icon="el-icon-plus" @click="handleSolve">解除禁用</el-button>\n        <el-button type="danger" size="small" icon="el-icon-delete" @click="handleForbid">禁用账户</el-button>\n      </div>\n    </template>\n    <Table\n      action=\'/users\'\n      ref="table"\n    >\n      <template #column>\n        <el-table-column\n          type="selection"\n          width="55">\n        </el-table-column>\n        <el-table-column\n          prop="nickName"\n          label="昵称"\n        >\n        </el-table-column>\n        <el-table-column\n          prop="loginName"\n          label="登录名"\n        >\n        </el-table-column>\n        <el-table-column\n          label="身份状态"\n        >\n          <template #default="scope">\n            <span :style="scope.row.lockedFlag == 0 ? \'color: green;\' : \'color: red;\'">\n              {{ scope.row.lockedFlag == 0 ? \'正常\' : \'禁用\' }}\n            </span>\n          </template>\n        </el-table-column>\n        <el-table-column\n          label="是否注销"\n        >\n          <template #default="scope">\n            <span :style="scope.row.lockedFlag == 0 ? \'color: green;\' : \'color: red;\'">\n              {{ scope.row.isDeleted == 0 ? \'正常\' : \'注销\' }}\n            </span>\n          </template>\n        </el-table-column>\n        <el-table-column\n          prop="createTime"\n          label="注册时间"\n        >\n        </el-table-column>\n      </template>\n    </Table>\n  </el-card>\n</template>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["上述 ",(0,s.jsx)(n.code,{children:"<Table>"})," 标签是声明的公共组件，在标签内部用 ",(0,s.jsx)(n.code,{children:"<template #column>"})," 声明具名插槽的内容，在内部编写的内容都会体现在 ",(0,s.jsx)(n.code,{children:"<slot name='column'></slot>"})," 下，这里就把需要的 ",(0,s.jsx)(n.code,{children:"Table"})," 表头设置好。"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，",(0,s.jsx)(n.code,{children:"Table"})," 需要传入 ",(0,s.jsx)(n.code,{children:"action"})," 参数，会员管理的接口路径是 ",(0,s.jsx)(n.code,{children:"/users"}),"，所以在代码中将其赋值给 ",(0,s.jsx)(n.code,{children:"action"})," 属性。",(0,s.jsx)(n.code,{children:'ref="table"'})," 是后续逻辑部分，通过 ",(0,s.jsx)(n.code,{children:"ref"})," 声明的绑定属性。就是通过它，拿到组件内部的各种变量和方法。"]}),"\n",(0,s.jsx)(n.p,{children:"接着来编写逻辑部分的代码："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"script"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<script>\nimport { ref } from 'vue'\nimport Table from '@/components/Table.vue'\nimport { ElMessage } from 'element-plus'\nimport { Plus, Delete } from '@element-plus/icons-vue'\nimport axios from '@/utils/axios'\n\nconst table = ref(null) // 绑定 Table  的 ref 属性\n// 解禁方法\nconst handleSolve = () => {\n  // 可以通过 table 获取到组件内部的 multipleSelection 值\n  if (!table.value.state.multipleSelection.length) {\n    ElMessage.error('请选择项')\n    return\n  }\n  axios.put(`/users/0`, {\n    ids: table.value.state.multipleSelection.map(item => item.userId)\n  }).then(() => {\n    ElMessage.success('解除成功')\n    // 通过 table 获取组件内部的 getList 方法\n    table.value.getList()\n  })\n}\n// 禁用方法\nconst handleForbid = () => {\n  // 可以通过 table 获取到组件内部的 multipleSelection 值\n  if (!table.value.state.multipleSelection.length) {\n    ElMessage.error('请选择项')\n    return\n  }\n  axios.put(`/users/1`, {\n    ids: table.value.state.multipleSelection.map(item => item.userId)\n  }).then(() => {\n    ElMessage.success('禁用成功')\n    // 通过 table 获取组件内部的 getList 方法\n    table.value.getList()\n  })\n}\n<\/script>\n"})}),"\n",(0,s.jsx)(n.p,{children:"上述代码中，已经给出详细的注释内容。"}),"\n",(0,s.jsx)(n.p,{children:"页面的显示效果如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["可以观察到，",(0,s.jsx)(n.code,{children:"Guest.vue"})," 组件的代码量减少了至少三分之一。插槽为开发者们提供了优化代码结构的能力，合理的利用插槽，能使代码的可复用性增强，当然这里只是举了一个用例，它的博大精深还需读者们课后再去探索，这里就不再深究，有兴趣的同学，可以将之前的列表都用公共 ",(0,s.jsx)(n.code,{children:"Table"})," 去重写一遍，一定能从中获得一些启发。"]}),"\n",(0,s.jsxs)(n.h2,{id:"账户修改",children:["账户修改",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#账户修改",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"账户的修改，在后台管理这块也是很重要的部分，很多权限的控制都会在这里。这里涉及到两个操作，一个是登录名和昵称的修改，一个是登录密码的重置。"}),"\n",(0,s.jsx)(n.p,{children:"先来看看页面布局，如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["这部分内容会相对简单一些，打开 ",(0,s.jsx)(n.code,{children:"App.vue"})," 新建添加 ",(0,s.jsx)(n.code,{children:"menu"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<el-submenu index="4">\n  <template #title>\n    <span>系统管理</span>\n  </template>\n  <el-menu-item-group>\n    <el-menu-item index="/account"><el-icon><Lock /></el-icon>修改密码</el-menu-item>\n  </el-menu-item-group>\n</el-submenu>\n'})}),"\n",(0,s.jsx)(n.p,{children:"此时要新增一个分类项，叫「系统管理」，默认打开："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"defaultOpen: ['1', '2', '3', '4']\n"})}),"\n",(0,s.jsxs)(n.p,{children:["再添加路由配置、新建页面组件 ",(0,s.jsx)(n.code,{children:"Account.vue"}),"、头部信息配置。完成上述操作之后，需要给 ",(0,s.jsx)(n.code,{children:"Account.vue"})," 添加模板，代码如下："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"template"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<template>\n  <el-card class="account-container">\n    <el-form :model="state.nameForm" :rules="state.rules" ref="nameRef" label-width="80px" label-position="right" class="demo-ruleForm">\n      <el-form-item label="登录名：" prop="loginName">\n        <el-input style="width: 200px" v-model="state.nameForm.loginName"></el-input>\n      </el-form-item>\n      <el-form-item label="昵称：" prop="nickName">\n        <el-input style="width: 200px" v-model="state.nameForm.nickName"></el-input>\n      </el-form-item>\n      <el-form-item>\n        <el-button type="danger" @click="submitName">确认修改</el-button>\n      </el-form-item>\n    </el-form>\n  </el-card>\n  <el-card class="account-container">\n    <el-form :model="state.passForm" :rules="state.rules" ref="passRef" label-width="80px" label-position="right" class="demo-ruleForm">\n      <el-form-item label="原密码：" prop="oldpass">\n        <el-input style="width: 200px" v-model="state.passForm.oldpass"></el-input>\n      </el-form-item>\n      <el-form-item label="新密码：" prop="newpass">\n        <el-input style="width: 200px" v-model="state.passForm.newpass"></el-input>\n      </el-form-item>\n      <el-form-item>\n        <el-button type="danger" @click="submitPass">确认修改</el-button>\n      </el-form-item>\n    </el-form>\n  </el-card>\n</template>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["两个 ",(0,s.jsx)(n.code,{children:"el-card"})," 对应两个表单 ",(0,s.jsx)(n.code,{children:"el-form"}),"，有些简单样式可以直接通过内嵌 ",(0,s.jsx)(n.code,{children:"style"})," 标签编写，什么都声明类名去编写样式，在某种程度上也很累赘。"]}),"\n",(0,s.jsx)(n.p,{children:"逻辑部分的代码如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"script"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<script>\nimport { onMounted, reactive, ref } from 'vue'\nimport axios from '@/utils/axios'\nimport { ElMessage } from 'element-plus'\nimport md5 from 'js-md5'\n\nconst nameRef = ref(null) // 修改名称 ref\nconst passRef = ref(null) // 修改密码 ref\nconst state = reactive({\n  user: null,\n  nameForm: {\n    loginName: '',\n    nickName: ''\n  },\n  passForm: {\n    oldpass: '',\n    newpass: ''\n  },\n  // 验证配置对象\n  rules: {\n    loginName: [\n      { required: 'true', message: '登录名不能为空', trigger: ['change'] }\n    ],\n    nickName: [\n      { required: 'true', message: '昵称不能为空', trigger: ['change'] }\n    ],\n    oldpass: [\n      { required: 'true', message: '原密码不能为空', trigger: ['change'] }\n    ],\n    newpass: [\n      { required: 'true', message: '新密码不能为空', trigger: ['change'] }\n    ]\n  },\n})\n// 初始化钩子\nonMounted(() => {\n  // 获取用户信息\n  axios.get('/adminUser/profile').then(res => {\n    state.user = res\n    state.nameForm.loginName = res.loginUserName\n    state.nameForm.nickName = res.nickName\n  })\n})\n// 提交昵称登录名修改\nconst submitName = () => {\n  nameRef.value.validate((vaild) => {\n    if (vaild) {\n      axios.put('/adminUser/name', {\n        loginUserName: state.nameForm.loginName,\n        nickName: state.nameForm.nickName\n      }).then(() => {\n        ElMessage.success('修改成功')\n        window.location.reload()\n      })\n    }\n  })\n}\n// 提交密码修改\nconst submitPass = () => {\n  passRef.value.validate((vaild) => {\n    if (vaild) {\n      axios.put('/adminUser/password', {\n        originalPassword: md5(state.passForm.oldpass),\n        newPassword: md5(state.passForm.newpass)\n      }).then(() => {\n        ElMessage.success('修改成功')\n        window.location.reload()\n      })\n    }\n  })\n}\n<\/script>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这里获取用户信息，在 ",(0,s.jsx)(n.code,{children:"Header.vue"})," 组件内就获取过了，其实可以将用户信息存入本地，或者如 ",(0,s.jsx)(n.code,{children:"vuex"})," 这类状态管理插件内，而不用每次进来都去请求用户信息接口，毕竟用户信息是不会经常变动的。合理的利用本地存储的能力，也是一个代码优化的一种类型。"]}),"\n",(0,s.jsxs)(n.p,{children:["这个接口比较特殊，公测环境不支持用户随便修改 ",(0,s.jsx)(n.code,{children:"admin"})," 的信息，因为一旦被修改了，其他同学就会拿不到测试的接口权限。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image-20210505125844716"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["本章节对 ",(0,s.jsx)(n.code,{children:"Table"})," 组件做了抽取和代码优化，通过具名插槽以及动态传路径的形式，对 ",(0,s.jsx)(n.code,{children:"Table"})," 列表进行了二次封装。这在业务逻辑层面是一个不小的提升，组件化开发模式大抵如此。读者们课后可以将之前的几个 ",(0,s.jsx)(n.code,{children:"Table"})," 列表也进行改造，代码量会骤降，打包后的静态资源提及也会相应的减少。"]}),"\n",(0,s.jsxs)(n.h4,{id:"本章源码地址",children:["本章源码地址",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章源码地址",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://s.yezgea02.com/1668132013544/admin08%202.zip",target:"_blank",rel:"noopener noreferrer",children:"点击下载"})})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let p=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F39.Vue3%20%E5%AE%9E%E6%88%98%E4%B9%8B%E4%BC%9A%E5%91%98%E7%AE%A1%E7%90%86%E3%80%81%E8%B4%A6%E6%88%B7%E4%BF%AE%E6%94%B9.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"本章节知识点",id:"本章节知识点",depth:4},{text:"会员管理页面",id:"会员管理页面",depth:2},{text:"账户修改",id:"账户修改",depth:2},{text:"总结",id:"总结",depth:2},{text:"本章源码地址",id:"本章源码地址",depth:4}],title:"39.Vue3 实战之会员管理、账户修改",headingTitle:"39.Vue3 实战之会员管理、账户修改",frontmatter:{}}}}]);