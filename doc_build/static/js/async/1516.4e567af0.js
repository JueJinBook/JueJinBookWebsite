"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["1516"],{858079:function(e,n,s){s.r(n),s.d(n,{default:()=>h});var r=s(552676),c=s(740453);let i=s.p+"static/image/2fa8b5776fb24f38fa03a7f7d4e5e1b2.117a1560.webp",d=s.p+"static/image/af5ad1ea911e4da01194aed0c2e80d6f.c7f4dda2.webp",l=s.p+"static/image/83d17b2a45cf2602c64baf2841fe4c38.d8c57702.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",h3:"h3",ul:"ul",li:"li",strong:"strong",h4:"h4",ol:"ol",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",img:"img"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"12浏览器基础知识点及常考面试题",children:["12.浏览器基础知识点及常考面试题",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12浏览器基础知识点及常考面试题",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这一章节我们将会来学习浏览器的一些基础知识点，包括：事件机制、跨域、存储相关，这几个知识点也是面试经常会考到的内容。"}),"\n",(0,r.jsxs)(n.h2,{id:"事件机制",children:["事件机制",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#事件机制",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-!",children:"涉及面试题：事件的触发过程是怎么样的？知道什么是事件代理嘛？\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"事件触发三阶段",children:["事件触发三阶段",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#事件触发三阶段",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"事件触发有三个阶段："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"window"})," 往事件触发处传播，遇到注册的捕获事件会触发"]}),"\n",(0,r.jsx)(n.li,{children:"传播到事件触发处时触发注册的事件"}),"\n",(0,r.jsxs)(n.li,{children:["从事件触发处往 ",(0,r.jsx)(n.code,{children:"window"})," 传播，遇到注册的冒泡事件会触发"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["事件触发一般来说会按照上面的顺序进行，但是也有特例，",(0,r.jsxs)(n.strong,{children:["如果给一个 ",(0,r.jsx)(n.code,{children:"body"})," 中的子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。"]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 以下会先打印冒泡然后是捕获\nnode.addEventListener(\n  'click',\n  event => {\n    console.log('冒泡')\n  },\n  false\n)\nnode.addEventListener(\n  'click',\n  event => {\n    console.log('捕获 ')\n  },\n  true\n)\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"注册事件",children:["注册事件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注册事件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["通常我们使用 ",(0,r.jsx)(n.code,{children:"addEventListener"})," 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 ",(0,r.jsx)(n.code,{children:"useCapture"})," 参数来说，该参数默认值为 ",(0,r.jsx)(n.code,{children:"false"})," ，",(0,r.jsx)(n.code,{children:"useCapture"})," 决定了注册的事件是捕获事件还是冒泡事件。对于对象参数来说，可以使用以下几个属性"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"capture"}),"：布尔值，和 ",(0,r.jsx)(n.code,{children:"useCapture"})," 作用一样"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"once"}),"：布尔值，值为 ",(0,r.jsx)(n.code,{children:"true"})," 表示该回调只会调用一次，调用后会移除监听"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"passive"}),"：布尔值，表示永远不会调用 ",(0,r.jsx)(n.code,{children:"preventDefault"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["一般来说，如果我们只希望事件只触发在目标上，这时候可以使用 ",(0,r.jsx)(n.code,{children:"stopPropagation"})," 来阻止事件的进一步传播。通常我们认为 ",(0,r.jsx)(n.code,{children:"stopPropagation"})," 是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。",(0,r.jsx)(n.code,{children:"stopImmediatePropagation"})," 同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"node.addEventListener(\n  'click',\n  event => {\n    event.stopImmediatePropagation()\n    console.log('冒泡')\n  },\n  false\n)\n// 点击 node 只会执行上面的函数，该函数不会执行\nnode.addEventListener(\n  'click',\n  event => {\n    console.log('捕获 ')\n  },\n  true\n)\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"事件代理",children:["事件代理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#事件代理",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话",(0,r.jsx)(n.strong,{children:"应该注册在父节点上"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<ul id=\"ul\">\n	<li>1</li>\n    <li>2</li>\n	<li>3</li>\n	<li>4</li>\n	<li>5</li>\n</ul>\n<script>\n	let ul = document.querySelector('#ul')\n	ul.addEventListener('click', (event) => {\n		console.log(event.target);\n	})\n<\/script>\n"})}),"\n",(0,r.jsx)(n.p,{children:"事件代理的方式相较于直接给目标注册事件来说，有以下优点："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"节省内存"}),"\n",(0,r.jsx)(n.li,{children:"不需要给子节点注销事件"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"跨域",children:["跨域",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#跨域",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-!",children:"涉及面试题：什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？\n"})}),"\n",(0,r.jsx)(n.p,{children:"因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"那么是出于什么安全考虑才会引入这种机制呢？"})," 其实主要是用来防止 CSRF 攻击的。简单点说，CSRF 攻击是利用用户的登录态发起恶意请求。"]}),"\n",(0,r.jsx)(n.p,{children:"也就是说，没有同源策略的情况下，A 网站可以被任意其他来源的 Ajax 访问到内容。如果你当前 A 网站还存在登录态，那么对方就可以通过 Ajax 获得你的任何信息。当然跨域并不能完全阻止 CSRF。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"然后我们来考虑一个问题，请求跨域了，那么请求到底发出去没有？"})," 请求必然是发出去了，但是浏览器拦截了响应。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会。因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。"]}),"\n",(0,r.jsx)(n.p,{children:"接下来我们将来学习几种常见的方式来解决跨域的问题。"}),"\n",(0,r.jsxs)(n.h3,{id:"jsonp",children:["JSONP",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsonp",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["JSONP 的原理很简单，就是利用 ",(0,r.jsx)(n.code,{children:"<script>"})," 标签没有跨域限制的漏洞。通过 ",(0,r.jsx)(n.code,{children:"<script>"})," 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'<script src="http://domain/api?param1=a&param2=b&callback=jsonp"><\/script>\n<script>\n    function jsonp(data) {\n    	console.log(data)\n	}\n<\/script>    \n'})}),"\n",(0,r.jsxs)(n.p,{children:["JSONP 使用简单且兼容性不错，但是只限于 ",(0,r.jsx)(n.code,{children:"get"})," 请求。"]}),"\n",(0,r.jsx)(n.p,{children:"在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP，以下是简单实现"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function jsonp(url, jsonpCallback, success) {\n  let script = document.createElement('script')\n  script.src = url\n  script.async = true\n  script.type = 'text/javascript'\n  window[jsonpCallback] = function(data) {\n    success && success(data)\n  }\n  document.body.appendChild(script)\n}\njsonp('http://xxx', 'callback', function(value) {\n  console.log(value)\n})\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"cors",children:["CORS",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cors",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 ",(0,r.jsx)(n.code,{children:"XDomainRequest"})," 来实现。"]}),"\n",(0,r.jsx)(n.p,{children:"浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。"}),"\n",(0,r.jsxs)(n.p,{children:["服务端设置 ",(0,r.jsx)(n.code,{children:"Access-Control-Allow-Origin"})," 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。"]}),"\n",(0,r.jsxs)(n.p,{children:["虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为",(0,r.jsx)(n.strong,{children:"简单请求和复杂请求"}),"。"]}),"\n",(0,r.jsxs)(n.h4,{id:"简单请求",children:["简单请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简单请求",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"以 Ajax 为例，当满足以下条件时，会触发简单请求"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"使用下列方法之一："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"GET"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"HEAD"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"POST"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Content-Type"})," 的值仅限于下列三者之一："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"text/plain"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"multipart/form-data"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"application/x-www-form-urlencoded"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["请求中的任意 ",(0,r.jsx)(n.code,{children:"XMLHttpRequestUpload"})," 对象均没有注册任何事件监听器； ",(0,r.jsx)(n.code,{children:"XMLHttpRequestUpload"})," 对象可以使用 ",(0,r.jsx)(n.code,{children:"XMLHttpRequest.upload"})," 属性访问。"]}),"\n",(0,r.jsxs)(n.h4,{id:"复杂请求",children:["复杂请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#复杂请求",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"那么很显然，不符合以上条件的请求就肯定是复杂请求了。"}),"\n",(0,r.jsxs)(n.p,{children:["对于复杂请求来说，首先会发起一个预检请求，该请求是 ",(0,r.jsx)(n.code,{children:"option"})," 方法的，通过该请求来知道服务端是否允许跨域请求。"]}),"\n",(0,r.jsx)(n.p,{children:"对于预检请求来说，如果你使用过 Node 来设置 CORS 的话，可能会遇到过这么一个坑。"}),"\n",(0,r.jsx)(n.p,{children:"以下以 express 框架举例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"app.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*')\n  res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS')\n  res.header(\n    'Access-Control-Allow-Headers',\n    'Origin, X-Requested-With, Content-Type, Accept, Authorization, Access-Control-Allow-Credentials'\n  )\n  next()\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["该请求会验证你的 ",(0,r.jsx)(n.code,{children:"Authorization"})," 字段，没有的话就会报错。"]}),"\n",(0,r.jsxs)(n.p,{children:["当前端发起了复杂请求后，你会发现就算你代码是正确的，返回结果也永远是报错的。因为预检请求也会进入回调中，也会触发 ",(0,r.jsx)(n.code,{children:"next"})," 方法，因为预检请求并不包含 ",(0,r.jsx)(n.code,{children:"Authorization"})," 字段，所以服务端会报错。"]}),"\n",(0,r.jsxs)(n.p,{children:["想解决这个问题很简单，只需要在回调中过滤 ",(0,r.jsx)(n.code,{children:"option"})," 方法即可"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"res.statusCode = 204\nres.setHeader('Content-Length', '0')\nres.end()\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"documentdomain",children:["document.domain",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#documentdomain",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["该方式只能用于",(0,r.jsx)(n.strong,{children:"二级域名相同"}),"的情况下，比如 ",(0,r.jsx)(n.code,{children:"a.test.com"})," 和 ",(0,r.jsx)(n.code,{children:"b.test.com"})," 适用于该方式。"]}),"\n",(0,r.jsxs)(n.p,{children:["只需要给页面添加 ",(0,r.jsx)(n.code,{children:"document.domain = 'test.com'"})," 表示二级域名都相同就可以实现跨域"]}),"\n",(0,r.jsxs)(n.h3,{id:"postmessage",children:["postMessage",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#postmessage",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 发送消息端\nwindow.parent.postMessage('message', 'http://test.com')\n// 接收消息端\nvar mc = new MessageChannel()\nmc.addEventListener('message', event => {\n  var origin = event.origin || event.originalEvent.origin\n  if (origin === 'http://test.com') {\n    console.log('验证通过')\n  }\n})\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"存储",children:["存储",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#存储",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-!",children:"涉及面试题：有几种方式可以实现存储功能，分别有什么优缺点？什么是 Service Worker？\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"cookielocalstoragesessionstorageindexdb",children:["cookie，localStorage，sessionStorage，indexDB",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookielocalstoragesessionstorageindexdb",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们先来通过表格学习下这几种存储方式的区别"}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{align:"center",children:"特性"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"cookie"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"localStorage"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"sessionStorage"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"indexDB"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"center",children:"数据生命周期"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"一般由服务器生成，可以设置过期时间"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"除非被清理，否则一直存在"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"页面关闭就清理"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"除非被清理，否则一直存在"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"center",children:"数据存储大小"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"4K"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"5M"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"5M"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"无限"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"center",children:"与服务端通信"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"每次都会携带在 header 中，对于请求性能影响"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"不参与"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"不参与"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"不参与"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["从上表可以看到，",(0,r.jsx)(n.code,{children:"cookie"})," 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 ",(0,r.jsx)(n.code,{children:"localStorage"})," 和 ",(0,r.jsx)(n.code,{children:"sessionStorage"})," 。对于不怎么改变的数据尽量使用 ",(0,r.jsx)(n.code,{children:"localStorage"})," 存储，否则可以用 ",(0,r.jsx)(n.code,{children:"sessionStorage"})," 存储。"]}),"\n",(0,r.jsxs)(n.p,{children:["对于 ",(0,r.jsx)(n.code,{children:"cookie"})," 来说，我们还需要注意安全性。"]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{align:"center",children:"属性"}),"\n",(0,r.jsx)(n.th,{align:"center",children:"作用"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"center",children:"value"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"center",children:"http-only"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"不能通过 JS 访问 Cookie，减少 XSS 攻击"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"center",children:"secure"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"只能在协议为 HTTPS 的请求中携带"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"center",children:"same-site"}),"\n",(0,r.jsx)(n.td,{align:"center",children:"规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"service-worker",children:["Service Worker",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#service-worker",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Service Worker 是运行在浏览器背后的",(0,r.jsx)(n.strong,{children:"独立线程"}),"，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 ",(0,r.jsx)(n.strong,{children:"HTTPS"}),"。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。"]}),"\n",(0,r.jsxs)(n.p,{children:["Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 ",(0,r.jsx)(n.code,{children:"install"})," 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。以下是这个步骤的实现："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// index.js\nif (navigator.serviceWorker) {\n  navigator.serviceWorker\n    .register('sw.js')\n    .then(function(registration) {\n      console.log('service worker 注册成功')\n    })\n    .catch(function(err) {\n      console.log('servcie worker 注册失败')\n    })\n}\n// sw.js\n// 监听 `install` 事件，回调中缓存所需文件\nself.addEventListener('install', e => {\n  e.waitUntil(\n    caches.open('my-cache').then(function(cache) {\n      return cache.addAll(['./index.html', './index.js'])\n    })\n  )\n})\n\n// 拦截所有请求事件\n// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据\nself.addEventListener('fetch', e => {\n  e.respondWith(\n    caches.match(e.request).then(function(response) {\n      if (response) {\n        return response\n      }\n      console.log('fetch source')\n    })\n  )\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["打开页面，可以在开发者工具中的 ",(0,r.jsx)(n.code,{children:"Application"})," 看到 Service Worker 已经启动了!",(0,r.jsx)("img",{src:l,alt:""})]}),"\n",(0,r.jsx)(n.p,{children:"在 Cache 中也可以发现我们所需的文件已被缓存"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"当我们重新刷新页面可以发现我们缓存的数据是从 Service Worker 中读取的"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"以上就是浏览器基础知识点的内容了，如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。"})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let h=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%2F12.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98.md"]={toc:[{text:"事件机制",id:"事件机制",depth:2},{text:"事件触发三阶段",id:"事件触发三阶段",depth:3},{text:"注册事件",id:"注册事件",depth:3},{text:"事件代理",id:"事件代理",depth:3},{text:"跨域",id:"跨域",depth:2},{text:"JSONP",id:"jsonp",depth:3},{text:"CORS",id:"cors",depth:3},{text:"简单请求",id:"简单请求",depth:4},{text:"复杂请求",id:"复杂请求",depth:4},{text:"document.domain",id:"documentdomain",depth:3},{text:"postMessage",id:"postmessage",depth:3},{text:"存储",id:"存储",depth:2},{text:"cookie，localStorage，sessionStorage，indexDB",id:"cookielocalstoragesessionstorageindexdb",depth:3},{text:"Service Worker",id:"service-worker",depth:3},{text:"小结",id:"小结",depth:2}],title:"12.浏览器基础知识点及常考面试题",headingTitle:"12.浏览器基础知识点及常考面试题",frontmatter:{}}}}]);