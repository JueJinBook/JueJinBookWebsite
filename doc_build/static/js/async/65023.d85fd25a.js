"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["65023"],{964158:function(n,e,i){i.r(e),i.d(e,{default:()=>V});var c=i(552676),s=i(740453);let r=i.p+"static/image/c0c74fb52422e6b855d8aa7aaae43405.98754bd5.gif",d=i.p+"static/image/2848588d129b48c3be035ee5729ed460.30a98ba1.gif",o=i.p+"static/image/637feea457e59d0b0e286137d731e0d9.b0747e32.gif",a=i.p+"static/image/2a7e48122a1e85a44b9b1b8849de2c93.df3b9020.gif",l=i.p+"static/image/e1dcc9cafb1dd04dee0cf031ba710f1c.f817d0bc.gif",t=i.p+"static/image/c945f4f4ffea1f3877b2d427813522b4.8d9dbd7f.gif",x=i.p+"static/image/385d480b9e63ac8e0e9889fcd53b1712.f228e45d.webp",h=i.p+"static/image/3360e529d20c97cb2a364c9e50b77446.fe9d627e.gif",j=i.p+"static/image/5d7a0bfdc86c88e63e6aed5edf694608.2cf164c0.gif",p=i.p+"static/image/feb2a24a7578093c494782689b6bda92.958e7963.gif",m=i.p+"static/image/335f1da8fdda696b9809a0608342d789.b09d9bbb.gif",f=i.p+"static/image/d2146e4b7949691895d89a372f58c1f0.49a6a50f.gif",u=i.p+"static/image/15fcafefba4af38f8bd491a569a3094d.088916a1.gif",g=i.p+"static/image/44dffc8dc2f7436b06dbf24f031db373.9d1738e3.gif",b=i.p+"static/image/bbda63c0a8ecf102d163f03f39b752d5.fe49e879.gif",S=i.p+"static/image/706f67e6b0cc1b3c41b48f9e8d674e5d.ecef67e4.gif",k=i.p+"static/image/21fbed8018daf5e1862db98bdc92bd60.d509dfb4.gif",C=i.p+"static/image/b71022bef612e431c73ede1b9db97ee7.477d4fde.gif",y=i.p+"static/image/c3aeb61b439eb67fdef05c20d0e14679.e62b85f5.gif",I=i.p+"static/image/8773fb812057ee85967767fa665ff24a.9c2145d3.gif",Y=i.p+"static/image/98e574fcaa6d5ac0dee13cbf7d3e4733.9f1b1558.webp",w=i.p+"static/image/45ba41b712e4c9ae1c493cc9bc57e24b.022e3990.gif",q=i.p+"static/image/b780a1c38107de07280555ed47358b68.7f261860.webp",_=i.p+"static/image/fa8d6175c7e2598b64f1dd8d04ff3fd9.f5e9de77.webp",N=i.p+"static/image/7f1be0e2f9be76883cc6bc1851245de2.7a783aff.gif",A=i.p+"static/image/0bd943121cf8acb44e840582f1fbd759.5dd54390.webp",X=i.p+"static/image/87caf91eb9b9dfc295eb9ce11fd2c008.728fb3a6.gif",D=i.p+"static/image/4fce38a962fae0b64542307dac71a68c.55426d0f.gif",W=i.p+"static/image/b21282d8d0265b475b19234be195216f.e1c86af8.gif",v=i.p+"static/image/36deb3fa7c5c0c929d6942becd6bb382.c69366f7.gif",P=i.p+"static/image/9ac43efc2055955a8a79c0435f259a5f.ad23ecda.gif",z=i.p+"static/image/ec3c4645dcc2549c0b0b785d7e067d0e.8718e8f5.gif",E=i.p+"static/image/cc8e4a16fd8bed74e83108d73adbb1ed.eb66eef0.gif",O=i.p+"static/image/f41cbaa5bb62ea612f87ff899ec7e41f.696ba7cf.gif",R=i.p+"static/image/27c0e0c5564627532719dc1e9484abae.ae5e3b04.gif",L=i.p+"static/image/e8ffa166506026305714b490cc3e76b7.8ca90500.gif",M=i.p+"static/image/1ccefbd3fbe5a13bd087850cab684132.4c08874e.gif",G=i.p+"static/image/27c4d0fb86882c27c73fe2077b2e48ec.965f64aa.gif",B=i.p+"static/image/914663dfdc4f9f556fe12815afc36ded.c3513c50.gif",Z=i.p+"static/image/42574238ed6d73bf6f7c992f07dbd456.145fb665.gif";function J(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",img:"img",ul:"ul",li:"li",pre:"pre",blockquote:"blockquote",strong:"strong"},(0,s.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"第45章css动画合成animation-composition",children:["第45章—CSS动画合成：animation-composition",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第45章css动画合成animation-composition",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["\uFEFF在现代 Web 开发中，动画已经成为吸引用户并增强用户体验的不可或缺的一部分。动画可以让 Web 应用或页面内容更具吸引力，提供信息反馈，以及增加互动性。而在创建令人印象深刻的动画时，CSS 动画合成（",(0,c.jsx)(e.code,{children:"animation-composition"}),"）特性给 Web 开发者开发动画效果带来更强大的力量。"]}),"\n",(0,c.jsxs)(e.p,{children:["CSS 动画合成（",(0,c.jsx)(e.code,{children:"animation-composition"}),"）是 CSS 中的一个相对较新的特性，它使 Web 开发者能够更灵活地组合、控制和定时多个 CSS 动画（",(0,c.jsx)(e.code,{children:"animation"}),"），以创建更为复杂的动画效果。这一功能不仅简化了动画的创建过程，还允许 Web 开发者在不依赖 JavaScript 的情况下实现复杂的动画场景。"]}),"\n",(0,c.jsx)(e.p,{children:"这节课我将带领你深入了解 CSS 动画合成的核心概念和用法，以及如何使用它来创建令人印象深刻的动画。无论你是初学者还是有经验的开发者，都能从这节课中获得有关于 CSS 动画合成的宝贵知识。"}),"\n",(0,c.jsx)(e.p,{children:"让我们一起探索 CSS 动画合成的奇妙世界，为你的 Web 项目添加生动和吸引力的动画效果吧！"}),"\n",(0,c.jsxs)(e.h2,{id:"多动画存在的问题",children:["多动画存在的问题",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#多动画存在的问题",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["使用 CSS 的 ",(0,c.jsx)(e.code,{children:"animation"})," 制作 Web 动画的时候，或许会在同一个元素上使用两个或两个以上的 CSS 动画，比如下面这个动画效果："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:Z,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"这是一个很简单地 CSS 动画。如果将其拆分的话，动画元素（圆点）由两个简单的动画组成："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["第一个是圆点沿着 ",(0,c.jsx)(e.code,{children:"x"})," 轴移动一定的距离"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["第二个是圆点沿着 ",(0,c.jsx)(e.code,{children:"y"})," 轴移动一定的距离"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["如果使用 ",(0,c.jsx)(e.code,{children:"@keyframes"})," 来描述这两个动画的话，它可能像下面这样："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes xAxis {\n    50% {\n        animation-timing-function: ease-in;\n        translate:450px 0;\n    }\n}\n\n@keyframes yAxis {\n    50% {\n        animation-timing-function: ease-out;\n        translate:0 -450px;\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["并且将这两个动画都运用到动画元素 ",(0,c.jsx)(e.code,{children:".dot"})," 上："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".dot {\n    animation: \n        xAxis 2.5s infinite cubic-bezier(0.02, 0.01, 0.21, 1),\n        yAxis 2.5s infinite cubic-bezier(0.3, 0.27, 0.07, 1.64);\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:B,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/PoXRPod",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PoXRPod"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"并不能发现，和我们期望的动画效果相差甚远："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:G,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/RwEMWoB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwEMWoB"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"你可能会好奇，这到底是为什么呢？"}),"\n",(0,c.jsxs)(e.p,{children:["这里简单的阐述一下。在这个示例中，",(0,c.jsx)(e.code,{children:"xAxis"})," 和 ",(0,c.jsx)(e.code,{children:"yAxis"})," 都是使用 CSS 的 ",(0,c.jsx)(e.code,{children:"translate"})," 属性对动画元素进行位移，不同的是，",(0,c.jsx)(e.code,{children:"xAxis"})," 使动画元素沿着 ",(0,c.jsx)(e.code,{children:"x"})," 轴水平向右移动（即 ",(0,c.jsx)(e.code,{children:"translate: 450px 0"}),"），而 ",(0,c.jsx)(e.code,{children:"yAxis"})," 使动画元素沿着 ",(0,c.jsx)(e.code,{children:"y"})," 轴垂直向上移动（即 ",(0,c.jsx)(e.code,{children:"translate: 0 -450px"}),"）。可是，在同一个元素，同一时间只能设置一个变换值（即，只有一个 ",(0,c.jsx)(e.code,{children:"translate"})," 可用于目标元素上），因此只有一个 ",(0,c.jsx)(e.code,{children:"translate"})," （位移）动画会生效。因此，在动画列表中，",(0,c.jsx)(e.code,{children:"yAxis"})," 动画会覆盖 ",(0,c.jsx)(e.code,{children:"xAxis"})," 动画。"]}),"\n",(0,c.jsx)(e.p,{children:"事实呢？在同一个元素上使用多个 CSS 动画除了性能问题以及增加维护和调试困难之外还会增加冲突，甚至让动画不可控，造成混乱。"}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"冲突"}),"：不同的动画可能会同时修改相同的 CSS 属性，导致冲突和不一致。例如，一个动画试图将元素向左移动，而另一个动画同时试图将元素向右移动"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"不可控"}),"：多个动画可能会导致元素的状态变得复杂，难以预测和控制。这可能会导致不可预测的动画效果。例如，一个动画试图将元素向右移动，而另一个动画同时试图将元素向上移动"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"混乱"}),"：多个动画可能会导致动画效果重叠，使元素的行为变得混乱。例如，一个动画正在逐渐淡出元素，而另一个动画同时试图将元素放大"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"为了避免这些问题，开发者通常需要仔细规划和组织他们的 CSS 动画，确保它们不会相互干扰，并尽量减少多个动画同时作用于同一个元素的情况。例如，我们一般采用分层来修复上面示例："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-HTML",children:'<div class="dot xAxis">\n    <span class="yAxis"></span>\n</div>\n'})}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["父元素运用 ",(0,c.jsx)(e.code,{children:"xAxis"})," 动画，使其沿着 ",(0,c.jsx)(e.code,{children:"x"})," 轴向右移动"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["子元素运用 ",(0,c.jsx)(e.code,{children:"yAxis"})," 动画，使其沿着 ",(0,c.jsx)(e.code,{children:"y"})," 轴向上移动"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer animation {\n    @keyframes xAxis {\n        50% {\n            animation-timing-function: ease-in;\n            translate:450px 0;\n        }\n    }\n\n    @keyframes yAxis {\n        50% {\n          animation-timing-function: ease-out;\n          translate: 0 -450px;\n        }\n    }\n    \n    .dot {\n        animation: xAxis 2.5s infinite cubic-bezier(0.02, 0.01, 0.21, 1);\n    \n        &::after {\n            animation: yAxis 2.5s infinite cubic-bezier(0.3, 0.27, 0.07, 1.64);\n        }\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:M,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/JjwLYLM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/JjwLYLM"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["如果你在使用 ",(0,c.jsx)(e.a,{href:"https://www.w3.org/TR/web-animations-1/",target:"_blank",rel:"noopener noreferrer",children:"WAPPI"})," （Web Animations API）开发动画的话，那么你可以使用它的 ",(0,c.jsx)(e.code,{children:"composite 功能"}),"来修复示例中动画所存在的问题。"]}),"\n",(0,c.jsx)(e.p,{children:"首先，你可以使用 WAPPI 来创建与之前 CSS 示例等效的动画："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"const dot = document.querySelector('.dot');\n\n// xAxis Animation\ndot.animate({\n    transform: ['translateX(450px)']\n}, {\n    duration: 2500,\n    easing: 'cubic-bezier(0.02, 0.01, 0.21, 1)',\n    iterations: Infinity\n});\n\n// yAxis Animation\ndot.animate({\n    transform: ['translateY(-450px)']\n}, {\n    duration: 2500,\n    easing: 'cubic-bezier(0.3, 0.27, 0.07, 1.64)',\n    iterations: Infinity\n});\n"})}),"\n",(0,c.jsx)(e.p,{children:"默认行为保持不变，因此这段代码将与 CSS 制作的动画效果相同："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:L,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/eYbMpQW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYbMpQW"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["如果我们将第二个动画添加 ",(0,c.jsx)(e.code,{children:"composite"})," 属性，并且设置其值为 ",(0,c.jsx)(e.code,{children:"add"})," ，它将告诉浏览器，我们告诉它将此动画的值添加到该属性的当前状态中："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"// yAxis Animation\ndot.animate({\n    transform: ['translateY(-450px)']\n}, {\n    duration: 2500,\n    easing: 'cubic-bezier(0.3, 0.27, 0.07, 1.64)',\n    iterations: Infinity,\n    composite: 'add'\n});\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:R,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/GRPxpLa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRPxpLa"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"注意，WAPPI 相关知识已超出这节课的范畴，在这里不做过多的阐述，如果感兴趣，可以搜索相关关键词。"}),"\n",(0,c.jsxs)(e.p,{children:["庆幸的是，CSS 的 ",(0,c.jsx)(e.a,{href:"https://drafts.csswg.org/css-animations-2/",target:"_blank",rel:"noopener noreferrer",children:"CSS Animations Level 2"})," 也引入了类似 WAPPI 的 ",(0,c.jsx)(e.code,{children:"composite"})," 的功能，即 ",(0,c.jsx)(e.a,{href:"https://drafts.csswg.org/css-animations-2/#propdef-animation-composition",target:"_blank",rel:"noopener noreferrer",children:"CSS 的动画合成功能"}),"（",(0,c.jsx)(e.code,{children:"animation-composite"}),"）。也就是说，我们现在可以直接使用 CSS 动画合成来修复前面的动画，可以不需要再对多动画进行分层了。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes xAxis {\n    50% {\n        animation-timing-function: ease-in;\n        translate:450px 0;\n    }\n}\n\n@keyframes yAxis {\n    50% {\n        animation-timing-function: ease-out;\n        translate:0 -450px;\n    }\n}\n\n.dot {\n    animation: \n        xAxis 2.5s infinite cubic-bezier(0.02, 0.01, 0.21, 1),\n        yAxis 2.5s infinite cubic-bezier(0.3, 0.27, 0.07, 1.64);\n    animation-composition: add; \n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:O,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/poqedYJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poqedYJ"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"换句话说，你现在可以使用分层、WAPPI 和动画合成等技术来运用多动画，并且尽可能的避免多动画带来的弊端："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/YzdawGb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzdawGb"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["课程开头就说了，CSS 动画合成（",(0,c.jsx)(e.code,{children:"animation-composition"}),"）是一个很新的特性，你可能从未接触过，甚至对它感到很陌生。即使如此，也不用担心，接下来我们将一起来探讨该特性。"]}),"\n",(0,c.jsxs)(e.h2,{id:"css-动画合成是什么",children:["CSS 动画合成是什么？",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#css-动画合成是什么",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.a,{href:"https://drafts.csswg.org/css-animations-2/#animation-composition",target:"_blank",rel:"noopener noreferrer",children:"W3C 规范是这样描述 CSS 合成动画的"}),"："]}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["The ",(0,c.jsx)(e.code,{children:"animation-composition"})," property defines the composite operation used when multiple animations affect the same property simultaneously."]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["大致的意思是说：“",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性定义了在多个动画同时影响同一属性时所使用的复合操作”。"]}),"\n",(0,c.jsxs)(e.p,{children:["换句话说，CSS 动画合成（",(0,c.jsx)(e.code,{children:"animation-composition"}),"）是指同时使用多个 CSS 动画效果来影响同一属性时，通过一些属性和方法来控制这些动画如何组合影响动画元素的属性值。这使得在多个动画效果同时作用于元素时，可以更加灵活地控制动画的表现方式，包括属性值的叠加、替换等。这为 Web 开发人员提供了更多的控制权，以创建复杂的动画效果，而不必依赖于单一的动画规则。"]}),"\n",(0,c.jsxs)(e.p,{children:["CSS 动画合成通常使用 CSS 的 ",(0,c.jsx)(e.code,{children:"animation-composite"})," 或 WAPPI 的 ",(0,c.jsx)(e.code,{children:"composite"})," 方法来实现。这有助于避免不必要的复杂性和冲突，使多个动画效果可以协同工作，以创建更加复杂和吸引人的动画效果。"]}),"\n",(0,c.jsxs)(e.p,{children:["注意，在这节课中，我们主要以 CSS 的 ",(0,c.jsx)(e.code,{children:"animation-composite"})," 为主。"]}),"\n",(0,c.jsxs)(e.h2,{id:"css-动画合成如何使用",children:["CSS 动画合成如何使用？",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#css-动画合成如何使用",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["前面我们已经向大家展示了，在 CSS 中，如何使用 CSS 合成动画 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 来解决多动画存在的问题。也就是说，",(0,c.jsx)(e.strong,{children:"CSS 的"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"animation-composition"})})," ",(0,c.jsx)(e.strong,{children:"属性用于定义当多个动画同时影响同一属性时的复合操作"}),"。例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes move {\n    0% {\n        transform: translate(0, 0);\n    }\n    50% {\n        transform: translate(100px, 0);\n    }\n    100% {\n        transform: translate(0, 0);\n    }\n}\n\n@keyframes rotate {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n.element {\n    animation-name: move, rotate;\n    animation-duration: 2s;\n    animation-timing-function: ease-in-out;\n    animation-iteration-count: infinite;\n    animation-composition: add;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面这个示例中，元素 ",(0,c.jsx)(e.code,{children:".element"})," 同时应用了 ",(0,c.jsx)(e.code,{children:"move"})," 和 ",(0,c.jsx)(e.code,{children:"rotate"})," 两个动画，并且显式地设置了 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的值为 ",(0,c.jsx)(e.code,{children:"add"})," 。这意味着 ",(0,c.jsx)(e.code,{children:"move"})," 和 ",(0,c.jsx)(e.code,{children:"rotate"})," 两个动画效果将相加，而不是互相替换。这样，",(0,c.jsx)(e.code,{children:".element"})," 元素将同时执行 ",(0,c.jsx)(e.code,{children:"move"})," 和 ",(0,c.jsx)(e.code,{children:"rotate"})," 动画，而不是先执行 ",(0,c.jsx)(e.code,{children:"move"})," 动画，再执行 ",(0,c.jsx)(e.code,{children:"rotate"})," 动画。"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:z,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/wvRmGEx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvRmGEx"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["你可以根据需要将 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 设置为不同的值，以控制动画之间的复合方式。该属性可选的值包括 ",(0,c.jsx)(e.code,{children:"replace"})," 、",(0,c.jsx)(e.code,{children:"add"})," 和 ",(0,c.jsx)(e.code,{children:"accumulate"})," ，每个选项都会产生不同的效果："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:P,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/KKbozbY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKbozbY"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"正如你所看到的："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"animation-composition"})," 取值为 ",(0,c.jsx)(e.code,{children:"replace"})," 时，元素只有旋转效果"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"animation-composition"})," 取值为 ",(0,c.jsx)(e.code,{children:"add"})," 时，元素有位移加放置的效果"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"animation-composition"})," 取值为 ",(0,c.jsx)(e.code,{children:"accumulate"})," 时，元素只有位移效果"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"所以说，理解复合操作可以帮助你更精细地控制多个动画之间的互动效果。"}),"\n",(0,c.jsxs)(e.h2,{id:"如何理解-css-的动画合成",children:["如何理解 CSS 的动画合成",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#如何理解-css-的动画合成",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"我们通过下面这个示例来向大家阐述 CSS 的动画合成是如何工作的，即如何理解动画合成。"}),"\n",(0,c.jsxs)(e.p,{children:["假设，你在一个 ",(0,c.jsx)(e.code,{children:".animated"})," 元素上应用了下面这段 CSS 代码："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".element {\n    filter: blur(5px);\n    animation: filter 2s linear infinite;\n}\n\n@keyframes filter {\n    0% {\n        filter: blur(10px);\n    }\n    100% {\n        filter:blur(20px);\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["就上面代码而言，初始状态下，用于 ",(0,c.jsx)(e.code,{children:".element"})," 元素上 ",(0,c.jsx)(e.code,{children:"filter"})," 属性的 ",(0,c.jsx)(e.code,{children:"blur(5px)"})," ，被称为 ",(0,c.jsx)(e.code,{children:"filter"})," 底层值，而 ",(0,c.jsx)(e.code,{children:"@keyframes"})," 中第一帧的 ",(0,c.jsx)(e.code,{children:"filter"})," 属性的 ",(0,c.jsx)(e.code,{children:"blur(10px)"})," 被称为效果值。",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性指定在合成底层值和效果值的效果之后执行的操作，以产生最终的效果值。",(0,c.jsx)(e.code,{children:".element"})," 元素上设置不同的 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 值将会影响 ",(0,c.jsx)(e.code,{children:"filter"})," 属性的最终值，从而影响最终的效果。"]}),"\n",(0,c.jsxs)(e.p,{children:["先来看 ",(0,c.jsx)(e.code,{children:"replace"})," 值，它是 它是 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 的默认值。当 ",(0,c.jsx)(e.code,{children:".element"})," 元素的 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的值为 ",(0,c.jsx)(e.code,{children:"replace"})," 时，那么 ",(0,c.jsx)(e.code,{children:"@keyframes"})," 中第一帧（",(0,c.jsx)(e.code,{children:"0%"}),"）的 ",(0,c.jsx)(e.code,{children:"blur(10px)"})," （效果值）将会替换 ",(0,c.jsx)(e.code,{children:".element"})," 元素的底层值 ",(0,c.jsx)(e.code,{children:"blur(5px)"})," 。此时，元素 ",(0,c.jsx)(e.code,{children:".element"})," 是从 ",(0,c.jsx)(e.code,{children:"blur(10px)"})," 到 ",(0,c.jsx)(e.code,{children:"blur(20px)"})," 的一个动画效果。即："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes filterReplace {\n    0% {\n        filter: blur(10px);\n    }\n    100% {\n        filter: blur(20px);\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/qBLoNGK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBLoNGK"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["如果元素 ",(0,c.jsx)(e.code,{children:".element"})," 的 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的值是 ",(0,c.jsx)(e.code,{children:"add"})," ，那么 ",(0,c.jsx)(e.code,{children:"0%"})," 关键帧中的 ",(0,c.jsx)(e.code,{children:"filter"})," 属性的值（效果值，即 ",(0,c.jsx)(e.code,{children:"blur(10px)"}),"）和元素 ",(0,c.jsx)(e.code,{children:"filter"})," 属性的底层值（",(0,c.jsx)(e.code,{children:"blur(5px)"}),"）会叠加在一起。元素 ",(0,c.jsx)(e.code,{children:".element"})," 的 ",(0,c.jsx)(e.code,{children:"filter"})," 属性复合值将为 ",(0,c.jsx)(e.code,{children:"blur(5px) blur(10px)"})," 。它相当于："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes filterAdd {\n    0% {\n        filter: blur(5px) blur(10px);\n    }\n    100% {\n        filter: blur(20px);\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:W,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/VwqXjoq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwqXjoq"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["如果元素 ",(0,c.jsx)(e.code,{children:".element"})," 的 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的值是 ",(0,c.jsx)(e.code,{children:"accumulate"}),"，那么 ",(0,c.jsx)(e.code,{children:"0%"})," 关键帧中的 ",(0,c.jsx)(e.code,{children:"filter"})," 属性的复合效果值将为 ",(0,c.jsx)(e.code,{children:"blur(15px)"})," 。它相当于："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes filterAccumulate {\n    0% {\n        filter: blur(15px)\n    }\n    \n    100% {\n        filter: blur(20px);\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:D,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/KKbogVW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKbogVW"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["简单地对 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性值含义做个描述："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"replace"})})," ",(0,c.jsx)(e.strong,{children:"（替换）"})," ：这是 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的默认行为。当多个动画同时影响同一个属性时，最后一个动画会完全替换之前的动画效果。换句话说，只有最后一个动画的效果会应用到属性上。例如前面示例中的 ",(0,c.jsx)(e.code,{children:"rotate"})," 动画完全替代了 ",(0,c.jsx)(e.code,{children:"move"})," 动画，所以最终只有旋转的动画效果。"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"add"})})," ",(0,c.jsx)(e.strong,{children:"（叠加）"})," ：使用 ",(0,c.jsx)(e.code,{children:"add"})," 复合操作时，多个动画的效果会叠加在一起。这意味着它们会一起影响属性的最终值。例如，如果一个动画元素向右移动 ",(0,c.jsx)(e.code,{children:"30px"})," ，而另一个动画使元素向左移动 ",(0,c.jsx)(e.code,{children:"20px"})," ，使用 ",(0,c.jsx)(e.code,{children:"add"})," 复合操作之后，元素将向右移动 ",(0,c.jsx)(e.code,{children:"10px"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"accumulate"})})," ",(0,c.jsx)(e.strong,{children:"（累积）"})," ：使用 ",(0,c.jsx)(e.code,{children:"accumulate"})," 复合操作时，动画效果会逐渐累积在一起，而不是替换或叠加。这意味着每个动画都会根据之前动画的效果来计算最终效果。例如上面的滤镜示例，元素默认有一个 ",(0,c.jsx)(e.code,{children:"blur(5px)"})," ，",(0,c.jsx)(e.code,{children:"filter"})," 动画的 ",(0,c.jsx)(e.code,{children:"0%"})," 位置有一个 ",(0,c.jsx)(e.code,{children:"blur(10px)"})," ，使用 ",(0,c.jsx)(e.code,{children:"accumulate"})," 复合操作后，",(0,c.jsx)(e.code,{children:"0%"})," 关键帧的 ",(0,c.jsx)(e.code,{children:"filter"})," 属性的复合值是 ",(0,c.jsx)(e.code,{children:"blur(15px)"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["由于我们平时制作 CSS 动画时常会用到 CSS 的 ",(0,c.jsx)(e.code,{children:"transform"})," 属性，所以我想再花一点时间，以 ",(0,c.jsx)(e.code,{children:"transform"})," 为例，以不同方式的案例向大家阐述动画合成是如何工作的。"]}),"\n",(0,c.jsxs)(e.p,{children:["先来看一个简单的 ",(0,c.jsx)(e.code,{children:"transform"})," 示例。假设你在一个 ",(0,c.jsx)(e.code,{children:".element"})," 元素上运用了下面这段 CSS 代码："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".element {\n    transform-origin: 50% 50%;\n    transform: translateX(50px) rotate(45deg);\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["同时你设置了一个 ",(0,c.jsx)(e.code,{children:"@keyframes"})," ："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes adjust {\n    to {\n        transform: translateX(100px);\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["如果你将 ",(0,c.jsx)(e.code,{children:"adjust"})," 动画应用于元素 ",(0,c.jsx)(e.code,{children:".element"})," 时，那么这些关键帧将会应用于元素。因此，",(0,c.jsx)(e.code,{children:"adjust"})," 中的 ",(0,c.jsx)(e.code,{children:"to"})," 关键帧中的 ",(0,c.jsx)(e.code,{children:"transfrom"})," 将会替代元素 ",(0,c.jsx)(e.code,{children:".element"})," 初始设置的 ",(0,c.jsx)(e.code,{children:"transform"})," 。这和前面那个滤镜示例是相似的，这也是浏览器的默认行为："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes adjust {\n    to {\n        transform: translateX(100px);\n    }\n}\n\n.element {\n    transform-origin: 50% 50%;\n    transform: translateX(50px) rotate(45deg);\n    animation: adjust 5s linear infinite alternate;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"你在浏览器中看到的效果如下图所示："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:X,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/RwEMGYW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwEMGYW"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["上图中，浅蓝色的正方形是 ",(0,c.jsx)(e.code,{children:".element"})," 在没有使用 ",(0,c.jsx)(e.code,{children:"adjust"})," 动画时的效果（初始状态效果），它沿着 ",(0,c.jsx)(e.code,{children:"x"})," 轴向右移动了 ",(0,c.jsx)(e.code,{children:"50px"})," （即 ",(0,c.jsx)(e.code,{children:"translateX(50px)"}),"），然后旋转了 ",(0,c.jsx)(e.code,{children:"45deg"})," （即 ",(0,c.jsx)(e.code,{children:"roate(45deg)"}),"）。图中深蓝色正方形是 ",(0,c.jsx)(e.code,{children:".element"})," 元素使用了 ",(0,c.jsx)(e.code,{children:"adjust"})," 动画之后的效果，",(0,c.jsx)(e.code,{children:"adjust"})," 中的 ",(0,c.jsx)(e.code,{children:"to"})," 关键帧中的 ",(0,c.jsx)(e.code,{children:"transform"})," 替代了现有的 ",(0,c.jsx)(e.code,{children:"transform"})," 。如果你只让动画播放一次，并将 ",(0,c.jsx)(e.code,{children:"animation-fill-mode"})," 设置为 ",(0,c.jsx)(e.code,{children:"forwards"})," 或 ",(0,c.jsx)(e.code,{children:"both"})," ，你就能更清楚的看到 ",(0,c.jsx)(e.code,{children:"to"})," 关键帧中的 ",(0,c.jsx)(e.code,{children:"transform"})," 替代元素现有的 ",(0,c.jsx)(e.code,{children:"transform"})," ，即 ",(0,c.jsx)(e.code,{children:"translateX(50px)"})," 替代了 ",(0,c.jsx)(e.code,{children:"translateX(50) rotate(45deg)"})," ："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:A,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/XWoENKw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWoENKw"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["其实，你现在看到的效果与 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的 ",(0,c.jsx)(e.code,{children:"replace"})," 值的效果等同。你可以使用 ",(0,c.jsx)(e.code,{children:"add"})," 或 ",(0,c.jsx)(e.code,{children:"accumulate"})," 值来替代默认的 ",(0,c.jsx)(e.code,{children:"replace"})," 值。"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/QWzmGwm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWzmGwm"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"稍加解释一下。"}),"\n",(0,c.jsxs)(e.p,{children:["第一个很简单，",(0,c.jsx)(e.code,{children:"replace"})," 会使 ",(0,c.jsx)(e.code,{children:"to"})," 关键词中的 ",(0,c.jsx)(e.code,{children:"transform"})," 替换元素 ",(0,c.jsx)(e.code,{children:"element"})," 底层的 ",(0,c.jsx)(e.code,{children:"transform"})," ，即 ",(0,c.jsx)(e.code,{children:"translateX(100px)"})," 替代了 ",(0,c.jsx)(e.code,{children:"translateX(50px) rotate(45deg)"})," ："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的 ",(0,c.jsx)(e.code,{children:"add"})," 值会将 ",(0,c.jsx)(e.code,{children:"to"})," 关键词中的 ",(0,c.jsx)(e.code,{children:"translateX(100px)"})," （即效果值）添加到 ",(0,c.jsx)(e.code,{children:".element"})," 元素的 ",(0,c.jsx)(e.code,{children:"transform"})," 属性中。也就是说，元素 ",(0,c.jsx)(e.code,{children:".element"})," 最后的 ",(0,c.jsx)(e.code,{children:"transform"})," 的值变成了 ",(0,c.jsx)(e.code,{children:"translateX(50px) rotate(45deg) translateX(100px)"})," ，即在 ",(0,c.jsx)(e.code,{children:"to"})," 关键词中，元素会先执行 ",(0,c.jsx)(e.code,{children:"translateX(50px)"})," ，再执行 ",(0,c.jsx)(e.code,{children:"rotate(45deg)"})," ，最后执行 ",(0,c.jsx)(e.code,{children:"translateX(100px)"})," ："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:q,alt:""})}),"\n",(0,c.jsxs)(e.p,{children:["同样的，你可以尝试着将动画只播放一次，并且让元素停留在动画播放完的位置，你会发现 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 取值为 ",(0,c.jsx)(e.code,{children:"add"})," 时，元素 ",(0,c.jsx)(e.code,{children:".element"})," 的 ",(0,c.jsx)(e.code,{children:"transform"})," 属性的最终效果值："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/zYyWZxR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/zYyWZxR"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的 ",(0,c.jsx)(e.code,{children:"accumulate"})," 值会将 ",(0,c.jsx)(e.code,{children:"to"})," 关键词中 ",(0,c.jsx)(e.code,{children:"transform"})," 属性的值 ",(0,c.jsx)(e.code,{children:"translateX(100px)"})," 与元素 ",(0,c.jsx)(e.code,{children:".element"})," 的 ",(0,c.jsx)(e.code,{children:"transform"})," 属性的 ",(0,c.jsx)(e.code,{children:"translateX(50px) rotate"})," 相结合，即可效果值与底层值相结合。你可以理解成，动画混合后，元素会先执行 ",(0,c.jsx)(e.code,{children:"translateX(150px)"})," ，然后再执行 ",(0,c.jsx)(e.code,{children:"rotate(45deg)"})," ："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:Y,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/bGOvqqe",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/bGOvqqe"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["你也可以但看动画的 ",(0,c.jsx)(e.code,{children:"to"})," 关键词状态下的效果："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:I,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/abPYJYQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abPYJYQ"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["你可以将 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 类比为一杯被茶填满的情况。当倒入牛奶时会发生以下情况："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"replace"}),"：茶被移除，并被牛奶替换"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"add"}),"：牛奶被添加到杯子中，但仍然位于茶的顶部"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"accumulate"}),"：牛奶被加到茶中，因为它们都是液体，所以它们会很好地混合在一起"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["现来看一个更为复杂一点的动画。我们把上面示例中的 ",(0,c.jsx)(e.code,{children:"adjust"})," 帧动画调整为像下面这样："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes adjust {\n    20%,\n    40% {\n        transform: translateX(100px);\n    }\n    80%,\n    100% {\n        transform: translateX(150px);\n    }\n}\n\n.element {\n    transform-origin: 50% 50%;\n    transform: translateX(50px) rotate(45deg);\n    animation: adjust 5s linear infinite alternate;\n    \n    &.replace {\n        animation-composition: replace;\n    }\n    &.add {\n        animation-composition: add;\n    }\n    &.accumulate {\n        animation-composition: accumulate;\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/NWeYpEg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWeYpEg"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"正如你所看到的："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"animation-composition"})," 属性使用 ",(0,c.jsx)(e.code,{children:"replace"})," ，",(0,c.jsx)(e.code,{children:"adjust"})," 动画的 ",(0,c.jsx)(e.code,{children:"20%"})," 和 ",(0,c.jsx)(e.code,{children:"40%"}),"关键帧中 ",(0,c.jsx)(e.code,{children:"transform"})," 属性的最终效果值是 ",(0,c.jsx)(e.code,{children:"translateX(100px)"}),"（完全替换了底层值 ",(0,c.jsx)(e.code,{children:"translateX(50px) rotate(45deg)"}),"）。在这种情况下，元素从 ",(0,c.jsx)(e.code,{children:"45deg"})," 旋转到 ",(0,c.jsx)(e.code,{children:"0deg"}),"，因为它从 ",(0,c.jsx)(e.code,{children:".element"})," 元素本身设置的默认值（",(0,c.jsx)(e.code,{children:"transform: translateX(50px) rotate(45deg)"}),"）动画到 ",(0,c.jsx)(e.code,{children:"20%"})," 标记处设置的非旋转值（",(0,c.jsx)(e.code,{children:"transform: translateX(100%)"}),"）。"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"animation-composition"})," 属性使用 ",(0,c.jsx)(e.code,{children:"add"}),"，",(0,c.jsx)(e.code,{children:"adjust"})," 动画的 ",(0,c.jsx)(e.code,{children:"20%"})," 和 ",(0,c.jsx)(e.code,{children:"40%"})," 关键帧中 ",(0,c.jsx)(e.code,{children:"transform"})," 属性的最终效果值是 ",(0,c.jsx)(e.code,{children:"translateX(50px) rotate(45deg)"}),"，然后是 ",(0,c.jsx)(e.code,{children:"translateX(100px)"}),"。因此，",(0,c.jsx)(e.code,{children:".element"})," 元素先向右移动 ",(0,c.jsx)(e.code,{children:"50px"}),"，旋转 ",(0,c.jsx)(e.code,{children:"45deg"}),"，然后沿着 ",(0,c.jsx)(e.code,{children:"x"})," 轴再向右移动 ",(0,c.jsx)(e.code,{children:"100px"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"animation-composition"})," 属性使用 ",(0,c.jsx)(e.code,{children:"accumulate"}),"，",(0,c.jsx)(e.code,{children:"adjust"})," 动画的 ",(0,c.jsx)(e.code,{children:"20%"})," 和 ",(0,c.jsx)(e.code,{children:"40%"})," 关键帧中的最终效果值是 ",(0,c.jsx)(e.code,{children:"translateX(150px) rotate(45deg)"}),"。这意味着两个 ",(0,c.jsx)(e.code,{children:"x"})," 轴平移值 ",(0,c.jsx)(e.code,{children:"50px"})," 和 ",(0,c.jsx)(e.code,{children:"100px"})," 被合并或“累积”在一起。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["上面我们所展示的都是 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性设置单个值的，其实它也可以设置以逗号分隔开来的多个值，例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".element {\n    animation-composition: add, accumulate;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["那么，动画合成 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 设置多个值时，它又是如何工作呢？在回答该问题之前，我们有必要先给点时间了解一下 CSS 的多动画。"]}),"\n",(0,c.jsxs)(e.p,{children:["CSS 的 ",(0,c.jsx)(e.code,{children:"animation"})," 属性以及它的子属性（",(0,c.jsx)(e.code,{children:"animation-*"}),"）可以接受多个逗号分隔的值，这就是多动画的设置。例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".multi-animation {\n    animation: fadeIn 2s linear, fadeOut 1s linear 1s;\n}\n\n.multi-animation {\n    animation-name: fadeIn, move, bounce;\n    animation-duration: 2s, 1s, 1s,\n    animation-timing-function: linear, ease;\n}\n\n.multi-animation {\n    animation-name: fadeOut, bounce, rotate;\n    animation-duration: 2s;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"代码中的示例都是多动画的正确使用方式。"}),"\n",(0,c.jsx)(e.p,{children:"也就是说，当你希望在单个规则中应用多个动画并为每个动画设置不同的参数时，比如持续时间，缓动函数，迭代次数等，可以使用此功能。接下来，我将通过几个简单的示例，来解释多个值不同的排列方式。"}),"\n",(0,c.jsx)(e.p,{children:"先来看第一个示例："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".multi-animation {\n    animation-name:fadeIn, rotateOut, bounceIn;\n    animation-duration: 1s, 2s, 1s;\n    animation-timing-function: linear, ease, ease-in-out;   \n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["在这个示例中，",(0,c.jsx)(e.code,{children:".multi-animation"})," 元素同时应用了名为 ",(0,c.jsx)(e.code,{children:"fadeIn"})," 、",(0,c.jsx)(e.code,{children:"rotateOut"})," 和 ",(0,c.jsx)(e.code,{children:"bounceIn"})," 的帧动画，并且每个动画的持续时间和缓动函数都不一样。"]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"fadeIn"})," 动画持续播放 ",(0,c.jsx)(e.code,{children:"1s"})," ，对应的缓动函数是 ",(0,c.jsx)(e.code,{children:"linear"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"rotateOut"})," 动画持续播放 ",(0,c.jsx)(e.code,{children:"2s"})," ，对应的缓动函数是 ",(0,c.jsx)(e.code,{children:"ease"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"bounceIn"})," 动画持续播放 ",(0,c.jsx)(e.code,{children:"1s"})," ，对应的缓动函数是 ",(0,c.jsx)(e.code,{children:"ease-in-out"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/ZEVxyaO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ZEVxyaO"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"我们还可以像下面这样设置多个动画："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".multi-animation {\n    animation-name:fadeIn, rotateOut, bounceIn;\n    animation-duration: 1s;\n    animation-timing-function: linear;   \n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["在这个示例中，我们同样使用 ",(0,c.jsx)(e.code,{children:"animation-name"})," 属性给 ",(0,c.jsx)(e.code,{children:".multi-animation"})," 元素设置了 ",(0,c.jsx)(e.code,{children:"fadeIn"})," 、",(0,c.jsx)(e.code,{children:"rotateOut"})," 和 ",(0,c.jsx)(e.code,{children:"bounceIn"})," 三个动画，但三个动画只有一个持续时间和缓动函数。在这种情况之下，",(0,c.jsx)(e.code,{children:"fadeIn"})," 、",(0,c.jsx)(e.code,{children:"rotateOut"})," 和 ",(0,c.jsx)(e.code,{children:"bounceIn"})," 三个动画都会被赋予相同的持续时间（",(0,c.jsx)(e.code,{children:"1s"}),"）和缓动函数（",(0,c.jsx)(e.code,{children:"linear"}),"）："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:k,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/YzdaJWq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzdaJWq"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"把上面示例代码调整成下面这样："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".multi-animation {\n    animation-name:fadeIn, rotateOut, bounceIn;\n    animation-duration: 1s, 2s;\n    animation-timing-function: linear, ease-in-out;   \n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码，依旧通过 ",(0,c.jsx)(e.code,{children:"animation-name"})," 属性给 ",(0,c.jsx)(e.code,{children:".multi-animation"})," 指定了三个动画，即 ",(0,c.jsx)(e.code,{children:"fadeIn"})," 、",(0,c.jsx)(e.code,{children:"rotateOut"})," 和 ",(0,c.jsx)(e.code,{children:"bounceIn"})," ，但持续时间和缓动函数只有两个。在这种情况下，如果列表中没有足够的值来为每个动画分配单独的值，那么值分配将从可用列表中的第一个项目循环到最后一个项目，然后重新循环到第一个项目。因此："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"fadeIn"})," 动画的持续时间是 ",(0,c.jsx)(e.code,{children:"1s"})," ，缓动函数是 ",(0,c.jsx)(e.code,{children:"linear"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"rotateOut"})," 动画的持续时间是 ",(0,c.jsx)(e.code,{children:"2s"})," ，缓动函数是 ",(0,c.jsx)(e.code,{children:"ease-in-out"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"bounceIn"})," 动画的持续时间是 ",(0,c.jsx)(e.code,{children:"1s"})," ，级动函数是 ",(0,c.jsx)(e.code,{children:"linear"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["这是因为 ",(0,c.jsx)(e.code,{children:"rotateOut"})," 动画获得的持续时间 ",(0,c.jsx)(e.code,{children:"2s"})," 和缓动函数 ",(0,c.jsx)(e.code,{children:"ease-in-out"})," 分别是 ",(0,c.jsx)(e.code,{children:"animation-duration"})," 和 ",(0,c.jsx)(e.code,{children:"animation-timing-function"})," 属性的值列表中的最后一个。因此，持续时间和缓动函数的值分配将重置为第一个值，所以 ",(0,c.jsx)(e.code,{children:"bounceIn"})," 动画的持续时间是 ",(0,c.jsx)(e.code,{children:"1s"})," ，缓动函数是 ",(0,c.jsx)(e.code,{children:"linear"})," 。"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/eYbMPBx",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/eYbMPBx"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"如果动画数量与动画属性值的不匹配是反过来的，比如："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".multi-animation {\n    animation-name:fadeIn, rotateOut, bounceIn;\n    animation-duration: 1s, 2s, .2s, .4s, .5s;\n    animation-timing-function: linear, ease-in-out, ease, ease-in, ease-out;   \n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"animation-name"})," 属性只显式指定了三个动画，但 ",(0,c.jsx)(e.code,{children:"animation-duration"})," 和 ",(0,c.jsx)(e.code,{children:"animation-timing-function"})," 分别指定了五个持续时间和缓动函数，比动画名称多出两个。在这种情况下，多出来的持续时间（即 ",(0,c.jsx)(e.code,{children:".4s"})," 和 ",(0,c.jsx)(e.code,{children:".5s"}),"）和缓动函数（即 ",(0,c.jsx)(e.code,{children:"ease-in"})," 和 ",(0,c.jsx)(e.code,{children:"ease-out"})," ）将不会应用于任何动画，并且会被忽略。"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/MWZVPoZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWZVPoZ"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["另外，当同一个元素应用多个动画时，它们将按照出现在 ",(0,c.jsx)(e.code,{children:"animation-name"})," 的顺序来执行，即从左往右执行。比如下面这个示例："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes slideInLeft {\n  from {\n    transform: translate3d(-100vw, 0, 0);\n    visibility: visible;\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes swing {\n  20% {\n    transform: rotate3d(0, 0, 1, 15deg);\n  }\n\n  40% {\n    transform: rotate3d(0, 0, 1, -10deg);\n  }\n\n  60% {\n    transform: rotate3d(0, 0, 1, 5deg);\n  }\n\n  80% {\n    transform: rotate3d(0, 0, 1, -5deg);\n  }\n\n  to {\n    transform: rotate3d(0, 0, 1, 0deg);\n  }\n}\n\n@keyframes slideOutRight {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n\n  to {\n    visibility: hidden;\n    transform: translate3d(100vw, 0, 0);\n  }\n}\n\n.multi-animation {\n    animation-name: slideInLeft, swing, slideOutRight;\n    animation-duration: 1s, 2s, 1s;\n    animation-delay: 0s, .5s, 2.5s;\n    animation-timing-function: ease-in-out;\n    transform-origin: top center;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/abPYREb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abPYREb"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["正如你所看到的，它会先执行 ",(0,c.jsx)(e.code,{children:"slideInLeft"})," 动画，然后是 ",(0,c.jsx)(e.code,{children:"swing"})," 动画，最后才是 ",(0,c.jsx)(e.code,{children:"slideOutRight"})," 动画。如果其他属性值不变，只调整 ",(0,c.jsx)(e.code,{children:"animation-name"})," 属性值，你会发现，应用于元素的动画效果又将会是不一样。例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".multi-animation {\n    animation-name: swing, slideInLeft, slideOutRight;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码把 ",(0,c.jsx)(e.code,{children:"swing"})," 动画调整到最左侧了，此时，元素会先执行 ",(0,c.jsx)(e.code,{children:"swing"})," 动画，再执行 ",(0,c.jsx)(e.code,{children:"slideInLeft"})," 动画，最后才执行 ",(0,c.jsx)(e.code,{children:"slideOutRight"})," 动画："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/qBLoJob",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/qBLoJob"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"注意，如果有多个动画应用在同一个元素上，并且它们修改了相同的属性，最后一个动画的效果将覆盖之前的动画。因此，动画的顺序很重要。"}),"\n",(0,c.jsxs)(e.p,{children:["我想你现在对于多个动画的应用有了一定的了解，那么我们就可以接着聊多个动画合成了。多个动画合成指的是 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的值是一个列表值，例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".element {\n    animation-composition: add, replace, accumulate;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"它同样遵循多个动画运用的规则。先来看第一个示例："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".multi-animation {\n    animation-name:fadeIn, rotateOut, bounceIn;\n    animation-duration: 1s, 2s, 1s;\n    animation-timing-function: linear, ease, ease-in-out;   \n    animation-composition: add, replace, accumulate;\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性值列表数量与 ",(0,c.jsx)(e.code,{children:"animation-name"})," 属性值列表数量相同，动画合成的值与动画是一一对应的关系："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"fadeIn"})," 动画应用了 ",(0,c.jsx)(e.code,{children:"add"})," （叠加）"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"rotateOut"})," 动画应用了 ",(0,c.jsx)(e.code,{children:"replace"})," （替代）"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"bounceIn"})," 动画应用了 ",(0,c.jsx)(e.code,{children:"accumulate"})," （累积）"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/ExGEdpa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ExGEdpa"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"再来看第二个示例，动画名称有三个，动画合成只使用了一个："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".multi-animation {\n    animation-name:fadeIn, rotateOut, bounceIn;\n    animation-duration: 1s;\n    animation-timing-function: linear;  \n    animation-composition: add; \n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这个很好理解，它会告诉浏览器，应用在元素 ",(0,c.jsx)(e.code,{children:".multi-animation"})," 上的 ",(0,c.jsx)(e.code,{children:"fadeIn"})," 、",(0,c.jsx)(e.code,{children:"rotateOut"})," 和 ",(0,c.jsx)(e.code,{children:"bounceIn"})," 三个动画的合成方式都是 ",(0,c.jsx)(e.code,{children:"add"})," （叠加）："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/LYMdgJZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYMdgJZ"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"再来看第三个示例："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".multi-animation {\n    animation-name:fadeIn, rotateOut, bounceIn;\n    animation-duration: 1s, 2s;\n    animation-timing-function: linear, ease-in-out;   \n    animation-composition: add, accumulate;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"应用于元素的动画合成数量少于动画名称，它将会从第一个值开始循环："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"fadeIn"})," 动画应用的是 ",(0,c.jsx)(e.code,{children:"add"})," （叠加）"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"rotateOut"})," 动画应用的是 ",(0,c.jsx)(e.code,{children:"accmulate"})," （累积）"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"bounceIn"})," 动画应用的是 ",(0,c.jsx)(e.code,{children:"add"})," （叠加），因为 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的值列表只有两个值，",(0,c.jsx)(e.code,{children:"rotateOut"})," 动画已经用完其第二个值，因此 ",(0,c.jsx)(e.code,{children:"bounceIn"})," 动画会从值列表的第一个值开始循环使用"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/MWZVPPR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWZVPPR"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["同样的，如果应用于 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性值列表数量多于动画名称的数量，那么多出来的值将被忽略："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".element.playing {\n    animation-name:fadeIn, rotateOut, bounceIn;\n    animation-duration: 1s, 2s,.3s,.4s,.5s;\n    animation-timing-function: linear, ease-in-out,ease, ease-in, ease-out;   \n    animation-composition: add, replace, accumulate, replace, add;\n}\n"})}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"fadeIn"})," 动画应用的是 ",(0,c.jsx)(e.code,{children:"add"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"rotateOut"})," 动画应用的是 ",(0,c.jsx)(e.code,{children:"replace"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"bounceIn"})," 动画应用的是 ",(0,c.jsx)(e.code,{children:"accumulate"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"animation-composition"})," 属性列表值中多出来的 ",(0,c.jsx)(e.code,{children:"replace"})," 和 ",(0,c.jsx)(e.code,{children:"add"})," （从右往左数的两个）则直接被忽略："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/xxmWymZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/xxmWymZ"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["所以说，多个动画合成的使用和多动画的使用是一样的。也就是说，当你在 ",(0,c.jsx)(e.code,{children:"animation-*"})," 属性上指定多个逗号分隔的值时，它们将按照 ",(0,c.jsx)(e.code,{children:"animation-name"})," 出现的顺序应用于动画。",(0,c.jsx)(e.strong,{children:"如果动画数量和合成数量不同，"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"animation-composition"})})," ",(0,c.jsx)(e.strong,{children:"属性中列出的值将循环从第一个"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"animation-name"})})," ",(0,c.jsx)(e.strong,{children:"到最后一个"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"animation-name"})})," ",(0,c.jsx)(e.strong,{children:"，直到所有动画都有分配的"})," ",(0,c.jsx)(e.strong,{children:(0,c.jsx)(e.code,{children:"animation-composition"})})," ",(0,c.jsx)(e.strong,{children:"值"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"在课程中，我们多次提到，多个动画应用在同一元素上，并且它们修改了相同的属性，将以最后一个动画中的属性为准。因此，动画的顺序很重要。可是，随着 CSS 动画合成的出现，它将打破这一规则，前面我们也花了很大的篇幅阐述了动画合成是如何影响元素的动画效果的。其实，元素应用多个动画合成，它的基本原理是一样的。为了更易于帮助大家理解多个动画合成是如何影响元素动画效果的，我这里尽可能把示例简单化。例如，你首先在元素上应用了下面这段代码："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".element {\n    transform: translateX(50px);\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["有一个简单的位移，元素沿着 ",(0,c.jsx)(e.code,{children:"x"})," 轴向右平移了 ",(0,c.jsx)(e.code,{children:"50px"})," ，这个大家都懂。现在，你给 ",(0,c.jsx)(e.code,{children:".element"})," 元素添加了下面三个简单的动画："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes moveX {\n    to {\n        transform: translateX(100px);\n    }\n}\n\n@keyframes rotate {\n    to {\n        transform: rotate(45deg);\n    }\n}\n\n@keyframes moveY {\n    to {\n        transform: translateY(200px);\n    }\n}\n\n.element {\n    animation: \n        moveX 1s linear infinite alternate,\n        rotate 1s linear infinite alternate,\n        moveY 1s linear infinite alternate;\n    animation-composition: add, replace, accumulate;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/GRPxYVQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRPxYVQ"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"我将用下图来拆分一下整个动画效果："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(e.p,{children:"简单解释一下："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["元素默认设置了一个 ",(0,c.jsx)(e.code,{children:"transform"})," ，其值是 ",(0,c.jsx)(e.code,{children:"translateX(50px)"})," ，即上图中浅蓝色的正方形，它从红色虚线框向右移动了 ",(0,c.jsx)(e.code,{children:"50px"})," 。其中 ",(0,c.jsx)(e.code,{children:"translateX(50px)"})," 是 ",(0,c.jsx)(e.code,{children:"transform"})," 的底层值"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["元素设置了三个动画 ",(0,c.jsx)(e.code,{children:"moveX"})," 、",(0,c.jsx)(e.code,{children:"rotate"})," 和 ",(0,c.jsx)(e.code,{children:"moveY"})," ，这三个动画的 ",(0,c.jsx)(e.code,{children:"to"})," 关键帧都重新对 ",(0,c.jsx)(e.code,{children:"transform"})," 属性设置了值，分别是 ",(0,c.jsx)(e.code,{children:"translateX(100px)"})," 、",(0,c.jsx)(e.code,{children:"rotate(45deg)"})," 和 ",(0,c.jsx)(e.code,{children:"translateY(200px)"})," 。它们的执行顺序是 ",(0,c.jsx)(e.code,{children:"moveX"})," ，然后 ",(0,c.jsx)(e.code,{children:"rotate"})," ，最后才是 ",(0,c.jsx)(e.code,{children:"moveY"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["使用 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 分别给 ",(0,c.jsx)(e.code,{children:"moveX"})," 、",(0,c.jsx)(e.code,{children:"rotate"})," 和 ",(0,c.jsx)(e.code,{children:"moveY"})," 动画设置了合成模式，对应的是 ",(0,c.jsx)(e.code,{children:"add"})," （叠加）、",(0,c.jsx)(e.code,{children:"replace"})," （替代）和 ",(0,c.jsx)(e.code,{children:"accumulate"})," （混合）"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["由于 ",(0,c.jsx)(e.code,{children:"moveX"})," 动画的合成模式是 ",(0,c.jsx)(e.code,{children:"add"})," （叠加），该动执行到 ",(0,c.jsx)(e.code,{children:"to"})," 关键帧（最后一帧）时，对应的 ",(0,c.jsx)(e.code,{children:"transform"})," 会与元素底层的 ",(0,c.jsx)(e.code,{children:"transform"})," 相叠加，此时 ",(0,c.jsx)(e.code,{children:"transform"})," 的效果值变成 ",(0,c.jsx)(e.code,{children:"translateX(50px) translateY(100px)"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["接着元素会执行 ",(0,c.jsx)(e.code,{children:"rotate"})," 动画，由于该动画设置的合成模式是 ",(0,c.jsx)(e.code,{children:"replace"})," （替换），所以动画执行到 ",(0,c.jsx)(e.code,{children:"to"})," 关键帧时，对应的 ",(0,c.jsx)(e.code,{children:"transform"})," 的值会直接替换 ",(0,c.jsx)(e.code,{children:"moveX"})," 动画合成后的 ",(0,c.jsx)(e.code,{children:"transform"})," 效果值，此时 ",(0,c.jsx)(e.code,{children:"transform"})," 的效果值就变成 ",(0,c.jsx)(e.code,{children:"rotate(45deg)"})]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:["最后执行的是 ",(0,c.jsx)(e.code,{children:"moveY"})," 动画，该动画设置的合成模式是 ",(0,c.jsx)(e.code,{children:"accumulate"})," （混合），动画执行到 ",(0,c.jsx)(e.code,{children:"to"})," 关键帧时，对应的 ",(0,c.jsx)(e.code,{children:"transform"})," 的值会与 ",(0,c.jsx)(e.code,{children:"rotate"})," 动画合成后的 ",(0,c.jsx)(e.code,{children:"transform"})," 值相混合，此时 ",(0,c.jsx)(e.code,{children:"transform"})," 的效果值就变成 ",(0,c.jsx)(e.code,{children:"translateY(200px) rotate(45deg)"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"你可以尝试着将所有动画只播放一次，并且状态停留在结束位置，能看到最终结果与分解所描述的结果是一致的，如下图所示："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/YzdaRzr",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzdaRzr"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["如此一来，你可以更进一步的使用 CSS 的 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 来控制动画，制作出效果更佳的动画。"]}),"\n",(0,c.jsxs)(e.h2,{id:"css-动画合成的用例",children:["CSS 动画合成的用例",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#css-动画合成的用例",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"我想阅读到这里，再回过头来看课程开头的示例，你应该明白了动画合成的功能与作用。这里我还是要再重复一次："}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["CSS 动画合成 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性用于确定当多个动画同时影响相同属性时应该发生什么情况。它主要用于控制多个动画如何组合它们的效果，特别是当它们影响相同的 CSS 属性时。"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"我们在理解和使用 CSS 动画合成的时候，需要避免一个误区。这个误区是，CSS 动画合成并不是把多个动画合在一起，而是多个元素应用到同一个元素，并且影响同一个属性时，它是如何改变元素的属性。这对于具有相同属性的多个动画非常有用，可以根据需求选择不同的组合方式，以实现所需的动画效果。"}),"\n",(0,c.jsxs)(e.p,{children:["记得在小册《",(0,c.jsx)(e.a,{href:"https://juejin.cn/book/7223230325122400288/section/7259668493158023205",target:"_blank",rel:"noopener noreferrer",children:"CSS 变换之单个变换"}),"》的课程中，我曾举过一个给模态框添加动画效果的案例。通常情况之下，我们一般会使用下面的 CSS 代码让模态框在视窗中水平垂直居中："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:".modal {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["但为了给模态框添加动画效果，可能会在 ",(0,c.jsx)(e.code,{children:"@keyframes"})," 中用到元素的 ",(0,c.jsx)(e.code,{children:"transform"})," 属性，比如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer modal {\n    @keyframes bounceInDown {\n        from,\n        60%,\n        75%,\n        90%,\n        to {\n            animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n        }\n    \n        0% {\n            opacity: 0;\n            transform: translate3d(0, -3000px, 0) scaleY(3);\n        }\n    \n        60% {\n            opacity: 1;\n            transform: translate3d(0, 25px, 0) scaleY(0.9);\n        }\n    \n        75% {\n            transform: translate3d(0, -10px, 0) scaleY(0.95);\n        }\n    \n        90% {\n            transform: translate3d(0, 5px, 0) scaleY(0.985);\n        }\n    \n        to {\n            transform: translate3d(0, 0, 0);\n        }\n    }\n    \n    dialog {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        animation: bounceInDown 0.28s cubic-bezier(0.215, 0.61, 0.355, 1) both;\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["你会发现，添加 ",(0,c.jsx)(e.code,{children:"bounceInDown"})," 动效之后的模态框，在动效结束时，它的位置也被改变了，并没有在浏览器视窗中水平居中："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsxs)(e.p,{children:["这是因为运用于模态框的 ",(0,c.jsx)(e.code,{children:"transform"})," 并不是最初设置的值（",(0,c.jsx)(e.code,{children:"transform: translate(-50%,-50%)"}),"），而是被 ",(0,c.jsx)(e.code,{children:"@keyframes"})," 中最后一帧的 ",(0,c.jsx)(e.code,{children:"transform"})," 属性值（",(0,c.jsx)(e.code,{children:"translate3d(0,0,0)"}),"）覆盖了。如果要让添加了 ",(0,c.jsx)(e.code,{children:"bounceInDown"})," 动效的模态框，在动效结束之后依旧在浏览器视窗中水平垂直居中，我们不得不改变水平垂直居中的布局方案，或者调整 ",(0,c.jsx)(e.code,{children:"bounceInDown"})," 动画中每一帧的 ",(0,c.jsx)(e.code,{children:"transform"})," 的值，例如："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer modal {\n    @keyframes bounceInDown {\n        from,\n        60%,\n        75%,\n        90%,\n        to {\n            animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n        }\n    \n        0% {\n            opacity: 0;\n            transform : translate3d (- 50% , calc (- 3000px - 50% ), 0 ) scaleY ( 3 );\n        }\n    \n        60% {\n            opacity: 1;\n            transform : translate3d (- 50% , calc ( 25px - 50% ), 0 ) scaleY ( 0.9 );\n        }\n    \n        75% {\n            transform : translate3d (- 50% , calc (- 10px - 50% ), 0 ) scaleY ( 0.95 );\n        }\n    \n        90% {\n            transform : translate3d (- 50% , calc ( 5px - 50% ), 0 ) scaleY ( 0.985 );\n        }\n    \n        to {\n            transform : translate3d (- 50% , - 50% , 0 );\n        }\n    }\n    \n    dialog {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        animation: bounceInDown 0.28s cubic-bezier(0.215, 0.61, 0.355, 1) both;\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/rNoOMWL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNoOMWL"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["或者我们使用单个变换属性来替代 ",(0,c.jsx)(e.code,{children:"transform"})," 属性："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer modal {\n    @keyframes bounceInDown {\n        from,\n        60%,\n        75%,\n        90%,\n        to {\n            animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n        }\n    \n        0% {\n            opacity: 0;\n            /* transform: translate3d(-50%, calc(-3000px - 50%), 0) scaleY(3); */\n            translate: -50% calc(-3000px - 50%);\n            scale: 1 3 1;\n        }\n    \n        60% {\n            opacity: 1;\n            /* transform: translate3d(-50%, calc(25px - 50%), 0) scaleY(0.9); */\n            translate: -50% calc(25px - 50%);\n            scale: 1 .9 1;\n        }\n    \n        75% {\n            /*transform: translate3d(-50%, calc(-10px - 50%), 0) scaleY(0.95); */\n            translate: -50% calc(-10px - 50%);\n            scale: 1 .95 1;\n        }\n    \n        90% {\n            /* transform: translate3d(-50%, calc(5px - 50%), 0) scaleY(0.985); */\n            translate: -50% calc(5px - 50%);\n            scale: 1 .985 1;\n        }\n    \n        to {\n            /*transform: translate3d(-50%, -50%, 0); */\n            translate: -50% -50%; \n        }\n    }\n    dialog {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        /* transform: translate(-50%, -50%); */\n        translate: -50% -50%;\n        animation: bounceInDown 0.28s cubic-bezier(0.215, 0.61, 0.355, 1) both;\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"使用单个变换属性也能获得相同的模态框效果："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/abPYXZg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/abPYXZg"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"有了 CSS 的动画合成之后，你又多了一种选择："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer modal {\n    @keyframes bounceInDown {\n        from,\n        60%,\n        75%,\n        90%,\n        to {\n            animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n        }\n    \n        0% {\n            opacity: 0;\n            transform: translate3d(0, -3000px, 0) scaleY(3);\n        }\n    \n        60% {\n            opacity: 1;\n            transform: translate3d(0, 25px, 0) scaleY(0.9);\n        }\n    \n        75% {\n            transform: translate3d(0, -10px, 0) scaleY(0.95);\n        }\n    \n        90% {\n            transform: translate3d(0, 5px, 0) scaleY(0.985);\n        }\n    \n        to {\n            transform: translate3d(0, 0, 0);\n        }\n    }\n    \n    dialog {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        animation: bounceInDown 0.28s cubic-bezier(0.215, 0.61, 0.355, 1) both;\n        animation-composition: add;\n    }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面的代码我们没有对 ",(0,c.jsx)(e.code,{children:"bounceInDown"})," 动画中每一帧的 ",(0,c.jsx)(e.code,{children:"transform"})," 属性进行调整，只是在 ",(0,c.jsx)(e.code,{children:"dialog"})," 元素上新增了 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性，并且指定其值为 ",(0,c.jsx)(e.code,{children:"add"})," 。最终效果也如你所期待的一样："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/yLGKZMR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/yLGKZMR"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["注意，在这个示例中，你将 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的值改成 ",(0,c.jsx)(e.code,{children:"accumulate"})," 也能得到同样的效果。"]}),"\n",(0,c.jsxs)(e.p,{children:["你甚至还可以在上例的基础上，你还可以给模态框添加新的动画，比如 ",(0,c.jsx)(e.code,{children:"swing"}),"："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@keyframes swing {\n    20% {\n        transform: rotate3d(0, 0, 1, 15deg);\n    }\n\n    40% {\n        transform: rotate3d(0, 0, 1, -10deg);\n    }\n\n    60% {\n        transform: rotate3d(0, 0, 1, 5deg);\n    }\n\n    80% {\n        transform: rotate3d(0, 0, 1, -5deg);\n    }\n\n    to {\n        transform: rotate3d(0, 0, 1, 0deg);\n    }\n}\n\ndialog {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    transform-origin: top center;\n    animation: \n      bounceInDown 0.28s cubic-bezier(0.215, 0.61, 0.355, 1) both,\n      swing .2s cubic-bezier(0.215, 0.61, 0.355, 1) .28s both;\n    animation-composition: add;\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"此时，打开模态框的动画效果又将会是另一种："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/vYvRbJy",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYvRbJy"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["正如你看到的，你现在可以将 ",(0,c.jsx)(e.a,{href:"https://animate.style/",target:"_blank",rel:"noopener noreferrer",children:"Animate.css"})," 提供 CSS 动画效果随意组合性的用于动画元素上。最后再来看一个示例，我将 ",(0,c.jsx)(e.code,{children:"zoomIn"})," 、",(0,c.jsx)(e.code,{children:"lightSpeedInLeft"})," 和 ",(0,c.jsx)(e.code,{children:"heartBeat"})," 三个动画用于模态框上："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-CSS",children:"@layer modal {\n    @keyframes zoomIn {\n        from {\n            opacity: 0;\n            transform: scale3d(0.3, 0.3, 0.3);\n        }\n    \n        50% {\n            opacity: 1;\n        }\n    }\n    \n    @keyframes heartBeat {\n        0% {\n            transform: scale(1);\n        }\n    \n        14% {\n            transform: scale(1.3);\n        }\n    \n        28% {\n            transform: scale(1);\n        }\n    \n        42% {\n            transform: scale(1.3);\n        }\n    \n        70% {\n            transform: scale(1);\n        }\n    }\n    \n    @keyframes lightSpeedInLeft {\n        from {\n            transform: translate3d(-100%, 0, 0) skewX(30deg);\n            opacity: 0;\n        }\n    \n        60% {\n            transform: skewX(-20deg);\n            opacity: 1;\n        }\n    \n        80% {\n            transform: skewX(5deg);\n        }\n    \n        to {\n            transform: translate3d(0, 0, 0);\n        }\n    }\n    \n    dialog {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        transform-origin: top center;\n        animation: \n            lightSpeedInLeft 0.28s ease-out both, \n            zoomIn 0.2s linear both,\n            heartBeat 1.3s cubic-bezier(0.215, 0.61, 0.355, 1) 0.28s both;\n        animation-composition: add, accumulate, add;\n    }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsxs)(e.blockquote,{children:["\n",(0,c.jsxs)(e.p,{children:["Demo 地址：",(0,c.jsx)(e.a,{href:"https://codepen.io/airen/full/LYMdqdG",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYMdqdG"})]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"我想你肯定能创造出更有创意的动画效果。"}),"\n",(0,c.jsxs)(e.h2,{id:"小结",children:["小结",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["CSS 动画合成（",(0,c.jsx)(e.code,{children:"animation-composition"}),"）是一个用于控制多个动画在同时影响相同属性时如何组合它们的效果的属性。这对于创建复杂的动画效果非常有用，特别是当你需要控制多个动画之间的相互作用时。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"animation-composition"})," 属性主要有 ",(0,c.jsx)(e.code,{children:"replace"})," 、",(0,c.jsx)(e.code,{children:"add"})," 和 ",(0,c.jsx)(e.code,{children:"accumulate"})," 。这些值决定了动画效果是替代、叠加还是累积应用到元素属性上："]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"replace"})," （替代）：使用 ",(0,c.jsx)(e.code,{children:"replace"})," 值时，动画的效果值将完全替代元素的原始值（底层值）。这是默认行为"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"add"})," （叠加）：使用 ",(0,c.jsx)(e.code,{children:"add"})," 值时，动画的效果值将与元素属性的原始值（底层值）相加，产生一种叠加效果"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"accumulate"})," （累积）：使用 ",(0,c.jsx)(e.code,{children:"accumulate"})," 值时，动画的效果值将与元素属性的原始值进行累积，产生一种累积效果"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["CSS 动画合成对于处理多个影响相同属性的动画非常有用。它允许你根据需要控制动画之间的相互作用，以实现所需动画效果。另外，",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性通常与多个动画一起使用。动画的应用顺序由 ",(0,c.jsx)(e.code,{children:"animation-name"})," 属性决定，你可以按照 ",(0,c.jsx)(e.code,{children:"animation-name"})," 中列出的顺序应用 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性的值 。通过选择合适的 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 值，你可以精确控制多个动画之间的效果，以创建复杂的、精彩的动画效果。"]}),"\n",(0,c.jsxs)(e.p,{children:["总之，CSS 动画合成是一个强大的工具，可用于在多个动画之间控制效果的叠加和组合方式。通过了解如何使用 ",(0,c.jsx)(e.code,{children:"animation-composition"})," 属性，你可以更好地掌握 CSS 动画的创建和控制，实现各种令人惊叹的动画效果。"]})]})}function K(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(J,{...n})}):J(n)}let V=K;K.__RSPRESS_PAGE_META={},K.__RSPRESS_PAGE_META["%E7%8E%B0%E4%BB%A3CSS%2F%E7%AC%AC45%E7%AB%A0%E2%80%94CSS%E5%8A%A8%E7%94%BB%E5%90%88%E6%88%90%EF%BC%9Aanimation-composition.md"]={toc:[{text:"多动画存在的问题",id:"多动画存在的问题",depth:2},{text:"CSS 动画合成是什么？",id:"css-动画合成是什么",depth:2},{text:"CSS 动画合成如何使用？",id:"css-动画合成如何使用",depth:2},{text:"如何理解 CSS 的动画合成",id:"如何理解-css-的动画合成",depth:2},{text:"CSS 动画合成的用例",id:"css-动画合成的用例",depth:2},{text:"小结",id:"小结",depth:2}],title:"第45章—CSS动画合成：animation-composition",headingTitle:"第45章—CSS动画合成：animation-composition",frontmatter:{}}}}]);