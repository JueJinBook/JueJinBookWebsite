"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["4760"],{214052:function(e,n,r){r.r(n),r.d(n,{default:()=>w});var s=r(552676),t=r(740453);let i=r.p+"static/image/f665b081551648cfe4fe06ba5a640312.2636481f.webp",d=r.p+"static/image/56fc48a95c0736155c2ab6cc865b4648.9c1b5baa.webp",c=r.p+"static/image/fcaea9afa0b681a634ff0f44700b2e63.1fa1a062.webp",l=r.p+"static/image/48feca0be1ac314171efac882ffee5b6.adc7fa16.webp",a=r.p+"static/image/c4f2d94c4e39d0a59715a8f383086431.3eb0b6a2.webp",o=r.p+"static/image/e95893f0a951d27f787841aad1c5c4c5.c8111dc9.webp",p=r.p+"static/image/8bd0638fea2e028c64fff0895dcf06a3.ba0f0e75.webp",h=r.p+"static/image/8aa3869d4b719643b3923baf66213460.dc644b40.webp",m=r.p+"static/image/14ff0aac5cf68b70ac4e3fdfa04b94df.87454426.webp",x=r.p+"static/image/9f2c01cde574c1154575f9783a67aedc.97a5b9fa.webp",j=r.p+"static/image/9911bc6d0339f593046e831f1be8d4ce.57ffcc31.webp",u=r.p+"static/image/b601709bace5708a498d25409011b197.878589a2.webp",g=r.p+"static/image/217617c992788dd90e0ba19cca4ee3f5.eb63220a.webp",f=r.p+"static/image/d4181754e59d05e38d510337f30c2708.434327d5.webp",b=r.p+"static/image/1e98a5aebf3d632c58e04b71df583e31.7566c24b.webp",y=r.p+"static/image/3a824a70f8070c27f23e1e6d716565a8.467c1ab2.webp",U=r.p+"static/image/12f3acb63839fce4f9cbe3c40e9dac51.13286adf.webp",C=r.p+"static/image/d0692c4c9f0d997c59d6a5e74f9140d1.5257e4dc.webp",E=r.p+"static/image/261a1ab30fe77235405596558a0118b9.29299546.webp",D=r.p+"static/image/b24ed34e01b26c0b4f9410c0e5d5be5e.070a5d55.webp",v=r.p+"static/image/2fed63b90318d980bbc4bee8be378b4c.33755790.webp";function N(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",ol:"ol",li:"li",pre:"pre",code:"code",img:"img",blockquote:"blockquote",h4:"h4"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"16服务端实战数据库实操mysql",children:["16.服务端实战：数据库实操（MYSQL）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#16服务端实战数据库实操mysql",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["本章将介绍基于 ",(0,s.jsx)(n.strong,{children:"TypeORM"})," 的 ",(0,s.jsx)(n.strong,{children:"Mysql"})," 数据库实操部分，其中的实操细节部分，我们将使用之前小册中的用户系统作为 ",(0,s.jsx)(n.strong,{children:"Demo"}),"，如果没有看过之前的 ",(0,s.jsx)(n.strong,{children:"RBAC"})," 的介绍也并没有关系，因为这一章我们仅仅只是为了熟悉数据库相关的各种操作罢了。"]}),"\n",(0,s.jsxs)(n.h2,{id:"准备前置",children:["准备前置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#准备前置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["经过前两章节的实战，我们手上已经有了一个基础的工程，接下来我们先创建一个 ",(0,s.jsx)(n.strong,{children:"user"})," 微服务来熟悉数据库的相关操作："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"输入生成微服务的指令"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"nest generate app user\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:"image.png"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["为了兼容给 ",(0,s.jsx)(n.strong,{children:"MnnoRepo"}),"，",(0,s.jsx)(n.code,{children:"app/user"})," 目录下新增虚拟 ",(0,s.jsx)(n.code,{children:"package.json"})," 文件："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JSON",children:'{\n  "name": "user",\n  "version": "0.0.1",\n  "description":"user",\n  "scripts": {\n    "dev": "cd .. && pnpm start:user"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"修改根目录启动脚本，新增启动用户微服务的命令:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:'  "scripts": {\n    "build": "nest build",\n    "format": "prettier --write \\"apps/**/*.ts\\" \\"libs/**/*.ts\\"",\n    "start": "turbo run dev",\n    "start:lowcode": "cross-env RUNNING_ENV=dev nest start --watch",\n+    "start:user": "cross-env RUNNING_ENV=dev nest start user --watch",\n    "start:devops": "cross-env RUNNING_ENV=dev nest start devops --watch",\n  },\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:"image.png"})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["其他通用的内容，照搬之前的 ",(0,s.jsx)(n.strong,{children:"low-code-test"})," 子工程即可，但将其他的业务模块去掉，最终获取的目录结构如下所示："]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:"image.png"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["此时并不要急于运行项目，因为我们加了 ",(0,s.jsx)(n.strong,{children:"Doc"})," 模块，其中依赖了 ",(0,s.jsx)(n.strong,{children:"package.json"}),"，会导致构建目录异常，所以并不必着急启动，我们继续引入其他模块后即可正常启动。"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsxs)(n.li,{children:["使用以下脚本创建 ",(0,s.jsx)(n.strong,{children:"curd"})," 的 ",(0,s.jsx)(n.strong,{children:"user"})," 模块："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"nest g resource user --project user\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"--project 记得加，不然会在根项目生成"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["可以看到借助于 ",(0,s.jsx)(n.strong,{children:"CLI"})," 工具，不仅仅生成了整个 ",(0,s.jsx)(n.strong,{children:"User"})," 的 ",(0,s.jsx)(n.strong,{children:"CURD"})," 模块，同时也帮我们在 ",(0,s.jsx)(n.code,{children:"app.module.ts"})," 中注册了对应的 ",(0,s.jsx)(n.strong,{children:"Module"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["另外，如果你们使用此命令的时候，同时生成了 ",(0,s.jsx)(n.code,{children:"spec"})," 文件，可以选择在 ",(0,s.jsx)(n.code,{children:"nest-cli.json"})," 添加如下配置来禁用测试文件的生成。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"generateOptions": {\n"spec": false\n},\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"基础操作",children:["基础操作",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础操作",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"增",children:["增",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#增",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"准备工作做完之后现在开始基础篇的训练。"}),"\n",(0,s.jsxs)(n.p,{children:["首先需要先创建实体类，在我们之前创建的 ",(0,s.jsx)(n.strong,{children:"CURD"})," 中有一个 ",(0,s.jsx)(n.code,{children:"user/entities/user.entity.ts"})," 文件，也就是之前我们介绍过的与数据库关联的实体类，现在我们来用户实体类型添加一些属性，此外之前我们约定了 ",(0,s.jsx)(n.code,{children:"Mysql"})," 的实体文件命名规则，所以需要将文件名改为 ",(0,s.jsx)(n.code,{children:"user.mysql.entity.ts"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"import { Entity, Column, UpdateDateColumn, PrimaryGeneratedColumn, CreateDateColumn } from 'typeorm';\n\nexport enum UserStatus {\n  disabled = 0,\n  enabled = 1\n}\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn() // 自增主键\n  id?: number;\n\n  @Column({ default: null }) // 普通类型\n  name: string;\n\n  @Column({ default: null })\n  username: string;\n\n  @Column({ default: null })\n  email: string;\n\n  @Column({ default: null })\n  avatar?: string;\n\n  @Column({ default: null })\n  mobile?: string;\n\n  @Column({ default: null })\n  enName?: string;\n\n  @Column({ default: null })\n  departmentName?: string;\n\n  @Column({ default: null })\n  departmentId?: number;\n\n  @Column({ default: UserStatus.enabled })\n  status?: UserStatus;\n\n  @UpdateDateColumn()\n  updateTime?: string;\n\n  @CreateDateColumn()\n  createTime?: string;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["略微按照之前的模式调整以下目录结构，并引入 ",(0,s.jsx)(n.code,{children:"user.providers.ts"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { User } from './user.mysql.entity';\n\nexport const UserProviders = [\n  {\n    provide: 'USER_REPOSITORY',\n    useFactory: async (AppDataSource) => await AppDataSource.getRepository(User),\n    inject: ['MYSQL_DATA_SOURCE'],\n  },\n];\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["完毕之后在 ",(0,s.jsx)(n.code,{children:"user/user.module.ts"})," 导入 ",(0,s.jsx)(n.code,{children:"UserProviders"})," 以及 ",(0,s.jsx)(n.code,{children:"DatabaseModule"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"import { Module } from '@nestjs/common';\nimport { DatabaseModule } from '@app/comm/database/database.module';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { UserProviders } from './user.providers';\nimport { DepartmentModule } from '../department/department.module';\n\n@Module({\n  imports: [\n    DatabaseModule,\n    DepartmentModule\n  ],\n  controllers: [UserController],\n  providers: [...UserProviders, UserService,],\n})\nexport class UserModule { }\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["完成上述步骤就可以使用 ",(0,s.jsx)(n.code,{children:"pnpm start:user"})," 正常启动项目了:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"正如之前所说的一样，我们在测试环境开启了同步的配置。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"文件"}),"：",(0,s.jsx)(n.code,{children:".config/.dev.yaml"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"MYSQL_CONFIG:\n    synchronize: true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["所以在每一次启动的时候，",(0,s.jsx)(n.strong,{children:"TypeORM"})," 都会进行实体类与 ",(0,s.jsx)(n.strong,{children:"Mysql"})," 数据库表结构的同步，所以可以在 ",(0,s.jsx)(n.strong,{children:"Mysql workbench"})," 中看到 ",(0,s.jsx)(n.strong,{children:"material_test"})," 数据库创建了一张 ",(0,s.jsx)(n.strong,{children:"User"})," 表。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["细心的同学应该注意到了，数据库存储的字段与我们的实体类有区别，大驼峰格式被转换成为了下划线格式，这是上一章提到的 ",(0,s.jsx)(n.code,{children:"naming.strategies.ts"})," 的转换结果。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["其中要注意的是，所有的实体类都需用使用 ",(0,s.jsx)(n.strong,{children:"@Entity"})," 来注册，否则无法正常注册到表中，所以复制的时候请不要遗漏。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["每一个实体类都需有一个主键，可以使用 ",(0,s.jsx)(n.code,{children:"PrimaryColumn"})," 来创建主键字段，如果并无实际含义的情况下可以使用 ",(0,s.jsx)(n.code,{children:"PrimaryGeneratedColumn"})," 来自动创建主键，该值将使用自动增量值自动生成。"]}),"\n",(0,s.jsxs)(n.p,{children:["同时大家需要注意的时，在 ",(0,s.jsx)(n.strong,{children:"User"})," 实体类中，",(0,s.jsx)(n.code,{children:"UserStatus"})," 字段使用了 ",(0,s.jsx)(n.strong,{children:"enum"})," 元组类型，只有 ",(0,s.jsx)(n.strong,{children:"postgres"})," 和 ",(0,s.jsx)(n.strong,{children:"Mysql"})," 支持 ",(0,s.jsx)(n.code,{children:"enum"})," 类型，在 ",(0,s.jsx)(n.strong,{children:"Mongoose"})," 中使用 ",(0,s.jsx)(n.strong,{children:"enum"})," 并不会生效。"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["按照实体类修改 ",(0,s.jsx)(n.code,{children:"user/dto/create-user.dto.ts"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty } from \"class-validator\"\n\nexport class CreateUserDto {\n\n  @IsNotEmpty()\n  @ApiProperty({ example: 'cookie' })\n  name: string;\n\n  @IsNotEmpty()\n  @ApiProperty({ example: '言萧凡' })\n  username: string;\n\n  @ApiProperty({ example: 'cookie' })\n  enName?: string;\n\n  @IsNotEmpty()\n  @ApiProperty({ example: '' })\n  email: string;\n\n  @ApiProperty({ example: '' })\n  avatar?: string;\n\n  @ApiProperty({ example: '' })\n  mobile?: string;\n\n\n  @ApiProperty({ example: '' })\n  departmentName?: string;\n\n  @ApiProperty({ example: 0 })\n  departmentId?: number;\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["添加新增用户的 ",(0,s.jsx)(n.code,{children:"service"}),"： ",(0,s.jsx)(n.code,{children:"user/user.service.ts"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Inject, Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { Repository } from 'typeorm';\nimport { User } from './user.mysql.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @Inject('USER_REPOSITORY')\n    private userRepository: Repository<User>,\n  ) { }\n\n  create(createUserDto: CreateUserDto) {\n    return this.userRepository.save(createUserDto)\n  }\n\n  findAll() {\n    return `This action returns all user`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} user`;\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`;\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["打开 ",(0,s.jsx)(n.strong,{children:"doc"})," 链接 ",(0,s.jsx)(n.a,{href:"http://localhost:3002/api/doc#/default/UserController_create",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3002/api/doc#/default/UserController_create"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"测试执行此方法得到如下返回结果则代表插入成功"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"同时数据库应该也支持新增了对应的数据字段"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h4,{id:"查",children:["查",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#查",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["修改 ",(0,s.jsx)(n.code,{children:"user.service.ts"}),"，新增查询方法:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  findAll() {\n    return this.userRepository.find()\n  }\n\n  findOne(id: number) {\n    return this.userRepository.findOneBy({ id })\n  }\n"})}),"\n",(0,s.jsx)(n.p,{children:"查询所有："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"查询单个："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h4,{id:"删",children:["删",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删",children:"#"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["修改 ",(0,s.jsx)(n.code,{children:"user.service.ts"}),"，新增删除方法:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  remove(id: number) {\n    return this.userRepository.delete(id)\n  }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["删除 ",(0,s.jsx)(n.code,{children:"id=1"})," 的用户，返回数据如下所示则代表成功："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["直接查询数据库可以看到 ",(0,s.jsx)(n.strong,{children:"id"})," 为 ",(0,s.jsx)(n.strong,{children:"1"})," 的数据已经确实被删除了。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h4,{id:"改",children:["改",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#改",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["一般来说，单纯的修改数据是可以继承 ",(0,s.jsx)(n.strong,{children:"CreateUserDto"}),"，除非有其他的业务特殊处理，这个可以根据自己的取舍。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果你不想使用 ",(0,s.jsx)(n.strong,{children:"patch"})," 方法的话，改成 ",(0,s.jsx)(n.strong,{children:"post"})," 需要新增 ",(0,s.jsx)(n.strong,{children:"id"})," 字段，否则不需要加"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n\n  @IsNotEmpty()\n  @ApiProperty({ example: 2 })\n  id: number;\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["修改 ",(0,s.jsx)(n.code,{children:"user.service.ts"}),"，新增更新方法:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"update(id: number, updateUserDto: UpdateUserDto) {\nreturn this.userRepository.update({ id }, updateUserDto)\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"注意，这里的 demo 使用的是 patch 方法，所以我并没有加 id 属性。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"正常请求之后，数据库自然也会更新成功："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"一对多",children:["一对多",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一对多",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在上述 ",(0,s.jsx)(n.strong,{children:"User"})," 的实体类中有一个 ",(0,s.jsx)(n.code,{children:"departmentId"})," 字段，一般来说，部门会有多个员工，所以如果有使用一对多的模式来创建两张表的关联，这样用户在获取的时候将不再只有 ",(0,s.jsx)(n.code,{children:"departmentId"})," 字段，接下来我们来进入一对多的实操环节。"]}),"\n",(0,s.jsxs)(n.p,{children:["首先，我们需要按照创建 ",(0,s.jsx)(n.strong,{children:"User"})," 的模式，创建一个 ",(0,s.jsx)(n.strong,{children:"Department"})," ",(0,s.jsx)(n.strong,{children:"CRUD"})," 模块。"]}),"\n",(0,s.jsx)(n.p,{children:"整体结构如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["修改 ",(0,s.jsx)(n.code,{children:"department/department.mysql.entity.ts"})," 文件为："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"import { Entity, Column, UpdateDateColumn, PrimaryGeneratedColumn, CreateDateColumn, OneToMany } from 'typeorm';\nimport { User } from '../user/user.mysql.entity';\n\n@Entity()\nexport class Department {\n\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column({ default: null })\n  name: string;\n\n  @OneToMany(() => User, user => user.department)\n  users: User[];\n\n  @UpdateDateColumn()\n  updateTime?: string;\n\n  @CreateDateColumn()\n  createTime?: string;\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["修改 ",(0,s.jsx)(n.code,{children:"user/user.mysql.entity.ts"})," 文件为："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"import { Entity, Column, UpdateDateColumn, PrimaryGeneratedColumn, CreateDateColumn, ManyToOne, } from 'typeorm';\nimport { Department } from '../department/department.mysql.entity';\n\nexport enum UserStatus {\n  disabled = 0,\n  enabled = 1\n}\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column({ default: null })\n  name: string;\n\n  @Column({ default: null })\n  username: string;\n\n  @Column({ default: null })\n  email: string;\n\n  @Column({ default: null })\n  avatar?: string;\n\n  @Column({ default: null })\n  mobile?: string;\n\n  @Column({ default: null })\n  enName?: string;\n\n  @ManyToOne(() => Department, department => department.users)\n  department: Department;\n\n  @Column({ default: UserStatus.enabled })\n  status?: UserStatus;\n\n  @UpdateDateColumn()\n  updateTime?: string;\n\n  @CreateDateColumn()\n  createTime?: string;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["我们将 ",(0,s.jsx)(n.code,{children:"departmentId"})," 与 ",(0,s.jsx)(n.code,{children:"departmentName"})," 换成 ",(0,s.jsx)(n.code,{children:"department"})," 字段，就不再需要多存字段同时获取的信息会更多，但 ",(0,s.jsx)(n.code,{children:"CreateUserDto"})," 里面只需要删除 ",(0,s.jsx)(n.code,{children:"departmentName"})," 即可，我们还需要使用 ",(0,s.jsx)(n.code,{children:"departmentId"})," 来获取部门信息。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注意根据我们的设计是一个部门对应多个员工，所以 ",(0,s.jsx)(n.code,{children:"Department"})," 实体类使用 ",(0,s.jsx)(n.code,{children:"OneToMany"})," 来装饰字段，而 ",(0,s.jsx)(n.code,{children:"user"})," 实体类则使用 ",(0,s.jsx)(n.code,{children:"ManyToOne"})," 来装饰 ",(0,s.jsx)(n.code,{children:"department"})," 字段。"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["修改 ",(0,s.jsx)(n.code,{children:"uer/user.service.ts"})," 中 ",(0,s.jsx)(n.code,{children:"create"})," 方法，添加查询部门以及添加的关系逻辑："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'  async create(createUserDto: CreateUserDto) {\n    const dep = await this.departmentService.findOne(createUserDto.departmentId)\n    return this.userRepository.save({\n      ...createUserDto,\n      department: dep\n    })\n  }\n\n  findAll() {\n    return this.userRepository.find({ relations: ["department"] })\n  }\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["注意在查询 ",(0,s.jsx)(n.code,{children:"dep"})," 的时候是一个异步方法，所以需要 ",(0,s.jsx)(n.code,{children:"async"})," 与 ",(0,s.jsx)(n.code,{children:"await"})," 来同步获取查询返回值。"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["修改 ",(0,s.jsx)(n.code,{children:"department/department.service.ts"})," 的 ",(0,s.jsx)(n.code,{children:"findAll"})," 方法，添加 ",(0,s.jsx)(n.code,{children:"relations"})," 筛选关联关系："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'  findAll() {\n    return this.depRepository.find({ relations: ["users"] })\n  }\n'})}),"\n",(0,s.jsx)(n.p,{children:"在完成上述所有步骤后，我们可以进行相关的测试了，一切顺利的话，将如下所示："}),"\n",(0,s.jsx)(n.p,{children:"预先新增一个部门："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"新增用户："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["查询部门：\n",(0,s.jsx)("img",{src:d,alt:"image.png"})]}),"\n",(0,s.jsx)(n.p,{children:"查询用户："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"写在最后",children:["写在最后",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["为了让更多的同学可以顺利学会 ",(0,s.jsx)(n.strong,{children:"NestJS"})," 的使用，数据库相关的介绍比之前会多一些，分为基础与进阶。"]}),"\n",(0,s.jsxs)(n.p,{children:["本章只介绍了基于 ",(0,s.jsx)(n.strong,{children:"TypeORM"})," 的 ",(0,s.jsx)(n.strong,{children:"Mysql"})," 基础用法，下一章，我们将继续学习 ",(0,s.jsx)(n.strong,{children:"Mongoose"})," 的相关使用方法与注意事项。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["本章依然没有 ",(0,s.jsx)(n.strong,{children:"Demo"})," 工程也不会放在 ",(0,s.jsx)(n.strong,{children:"Github"})," 上，因此这章的的代码不需要加群询问仓库地址，但我会针对每一个细节做一定的介绍与全流程的代码展示，所以如果遇到问题，加群或者留言直接质疑步骤或者模块，我会在文章中补充完整，务必做到基础实战的所有内容不借助于工程就能实现"]}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"如果你有什么疑问，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function A(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(N,{...e})}):N(e)}let w=A;A.__RSPRESS_PAGE_META={},A.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F16.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E6%93%8D%EF%BC%88MYSQL%EF%BC%89.md"]={toc:[{text:"准备前置",id:"准备前置",depth:2},{text:"基础操作",id:"基础操作",depth:2},{text:"增",id:"增",depth:4},{text:"查",id:"查",depth:4},{text:"删",id:"删",depth:4},{text:"改",id:"改",depth:4},{text:"一对多",id:"一对多",depth:2},{text:"写在最后",id:"写在最后",depth:2}],title:"16.服务端实战：数据库实操（MYSQL）",headingTitle:"16.服务端实战：数据库实操（MYSQL）",frontmatter:{}}}}]);