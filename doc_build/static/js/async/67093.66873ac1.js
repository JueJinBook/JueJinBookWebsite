"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["67093"],{121298:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var c=r(552676),s=r(740453);function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",h3:"h3",ul:"ul",li:"li",strong:"strong"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"10对象的扩展",children:["10.对象的扩展",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10对象的扩展",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍",(0,c.jsx)(n.code,{children:"Object"}),"对象的新增方法。"]}),"\n",(0,c.jsxs)(n.h2,{id:"属性的简洁表示法",children:["属性的简洁表示法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#属性的简洁表示法",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const foo = 'bar';\nconst baz = {foo};\nbaz // {foo: \"bar\"}\n\n// 等同于\nconst baz = {foo: foo};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，变量",(0,c.jsx)(n.code,{children:"foo"}),"直接写在大括号里面。这时，属性名就是变量名, 属性值就是变量值。下面是另一个例子。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"function f(x, y) {\n  return {x, y};\n}\n\n// 等同于\n\nfunction f(x, y) {\n  return {x: x, y: y};\n}\n\nf(1, 2) // Object {x: 1, y: 2}\n"})}),"\n",(0,c.jsx)(n.p,{children:"除了属性简写，方法也可以简写。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'const o = {\n  method() {\n    return "Hello!";\n  }\n};\n\n// 等同于\n\nconst o = {\n  method: function() {\n    return "Hello!";\n  }\n};\n'})}),"\n",(0,c.jsx)(n.p,{children:"下面是一个实际的例子。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let birth = '2000/01/01';\n\nconst Person = {\n\n  name: '张三',\n\n  //等同于birth: birth\n  birth,\n\n  // 等同于hello: function ()...\n  hello() { console.log('我的名字是', this.name); }\n\n};\n"})}),"\n",(0,c.jsx)(n.p,{children:"这种写法用于函数的返回值，将会非常方便。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"function getPoint() {\n  const x = 1;\n  const y = 10;\n  return {x, y};\n}\n\ngetPoint()\n// {x:1, y:10}\n"})}),"\n",(0,c.jsx)(n.p,{children:"CommonJS 模块输出一组变量，就非常合适使用简洁写法。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let ms = {};\n\nfunction getItem (key) {\n  return key in ms ? ms[key] : null;\n}\n\nfunction setItem (key, value) {\n  ms[key] = value;\n}\n\nfunction clear () {\n  ms = {};\n}\n\nmodule.exports = { getItem, setItem, clear };\n// 等同于\nmodule.exports = {\n  getItem: getItem,\n  setItem: setItem,\n  clear: clear\n};\n"})}),"\n",(0,c.jsx)(n.p,{children:"属性的赋值器（setter）和取值器（getter），事实上也是采用这种写法。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const cart = {\n  _wheels: 4,\n\n  get wheels () {\n    return this._wheels;\n  },\n\n  set wheels (value) {\n    if (value < this._wheels) {\n      throw new Error('数值太小了！');\n    }\n    this._wheels = value;\n  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"简洁写法在打印对象时也很有用。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'let user = {\n  name: \'test\'\n};\n\nlet foo = {\n  bar: \'baz\'\n};\n\nconsole.log(user, foo)\n// {name: "test"} {bar: "baz"}\nconsole.log({user, foo})\n// {user: {name: "test"}, foo: {bar: "baz"}}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"console.log"}),"直接输出",(0,c.jsx)(n.code,{children:"user"}),"和",(0,c.jsx)(n.code,{children:"foo"}),"两个对象时，就是两组键值对，可能会混淆。把它们放在大括号里面输出，就变成了对象的简洁表示法，每组键值对前面会打印对象名，这样就比较清晰了。"]}),"\n",(0,c.jsx)(n.p,{children:"注意，简写的对象方法不能用作构造函数，会报错。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const obj = {\n  f() {\n    this.foo = 'bar';\n  }\n};\n\nnew obj.f() // 报错\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"f"}),"是一个简写的对象方法，所以",(0,c.jsx)(n.code,{children:"obj.f"}),"不能当作构造函数使用。"]}),"\n",(0,c.jsxs)(n.h2,{id:"属性名表达式",children:["属性名表达式",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#属性名表达式",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"JavaScript 定义对象的属性，有两种方法。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 方法一\nobj.foo = true;\n\n// 方法二\nobj['a' + 'bc'] = 123;\n"})}),"\n",(0,c.jsx)(n.p,{children:"上面代码的方法一是直接用标识符作为属性名，方法二是用表达式作为属性名，这时要将表达式放在方括号之内。"}),"\n",(0,c.jsx)(n.p,{children:"但是，如果使用字面量方式定义对象（使用大括号），在 ES5 中只能使用方法一（标识符）定义属性。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"var obj = {\n  foo: true,\n  abc: 123\n};\n"})}),"\n",(0,c.jsx)(n.p,{children:"ES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let propKey = 'foo';\n\nlet obj = {\n  [propKey]: true,\n  ['a' + 'bc']: 123\n};\n"})}),"\n",(0,c.jsx)(n.p,{children:"下面是另一个例子。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let lastWord = 'last word';\n\nconst a = {\n  'first word': 'hello',\n  [lastWord]: 'world'\n};\n\na['first word'] // \"hello\"\na[lastWord] // \"world\"\na['last word'] // \"world\"\n"})}),"\n",(0,c.jsx)(n.p,{children:"表达式还可以用于定义方法名。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let obj = {\n  ['h' + 'ello']() {\n    return 'hi';\n  }\n};\n\nobj.hello() // hi\n"})}),"\n",(0,c.jsx)(n.p,{children:"注意，属性名表达式与简洁表示法，不能同时使用，会报错。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 报错\nconst foo = 'bar';\nconst bar = 'abc';\nconst baz = { [foo] };\n\n// 正确\nconst foo = 'bar';\nconst baz = { [foo]: 'abc'};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串",(0,c.jsx)(n.code,{children:"[object Object]"}),"，这一点要特别小心。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const keyA = {a: 1};\nconst keyB = {b: 2};\n\nconst myObject = {\n  [keyA]: 'valueA',\n  [keyB]: 'valueB'\n};\n\nmyObject // Object {[object Object]: \"valueB\"}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"[keyA]"}),"和",(0,c.jsx)(n.code,{children:"[keyB]"}),"得到的都是",(0,c.jsx)(n.code,{children:"[object Object]"}),"，所以",(0,c.jsx)(n.code,{children:"[keyB]"}),"会把",(0,c.jsx)(n.code,{children:"[keyA]"}),"覆盖掉，而",(0,c.jsx)(n.code,{children:"myObject"}),"最后只有一个",(0,c.jsx)(n.code,{children:"[object Object]"}),"属性。"]}),"\n",(0,c.jsxs)(n.h2,{id:"方法的-name-属性",children:["方法的 name 属性",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#方法的-name-属性",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["函数的",(0,c.jsx)(n.code,{children:"name"}),"属性，返回函数名。对象方法也是函数，因此也有",(0,c.jsx)(n.code,{children:"name"}),"属性。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const person = {\n  sayName() {\n \xa0 \xa0console.log('hello!');\n  },\n};\n\nperson.sayName.name   // \"sayName\"\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，方法的",(0,c.jsx)(n.code,{children:"name"}),"属性返回函数名（即方法名）。"]}),"\n",(0,c.jsxs)(n.p,{children:["如果对象的方法使用了取值函数（",(0,c.jsx)(n.code,{children:"getter"}),"）和存值函数（",(0,c.jsx)(n.code,{children:"setter"}),"），则",(0,c.jsx)(n.code,{children:"name"}),"属性不是在该方法上面，而是该方法的属性的描述对象的",(0,c.jsx)(n.code,{children:"get"}),"和",(0,c.jsx)(n.code,{children:"set"}),"属性上面，返回值是方法名前加上",(0,c.jsx)(n.code,{children:"get"}),"和",(0,c.jsx)(n.code,{children:"set"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const obj = {\n  get foo() {},\n  set foo(x) {}\n};\n\nobj.foo.name\n// TypeError: Cannot read property 'name' of undefined\n\nconst descriptor = Object.getOwnPropertyDescriptor(obj, 'foo');\n\ndescriptor.get.name // \"get foo\"\ndescriptor.set.name // \"set foo\"\n"})}),"\n",(0,c.jsxs)(n.p,{children:["有两种特殊情况：",(0,c.jsx)(n.code,{children:"bind"}),"方法创造的函数，",(0,c.jsx)(n.code,{children:"name"}),"属性返回",(0,c.jsx)(n.code,{children:"bound"}),"加上原函数的名字；",(0,c.jsx)(n.code,{children:"Function"}),"构造函数创造的函数，",(0,c.jsx)(n.code,{children:"name"}),"属性返回",(0,c.jsx)(n.code,{children:"anonymous"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'(new Function()).name // "anonymous"\n\nvar doSomething = function() {\n  // ...\n};\ndoSomething.bind().name // "bound doSomething"\n'})}),"\n",(0,c.jsxs)(n.p,{children:["如果对象的方法是一个 Symbol 值，那么",(0,c.jsx)(n.code,{children:"name"}),"属性返回的是这个 Symbol 值的描述。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'const key1 = Symbol(\'description\');\nconst key2 = Symbol();\nlet obj = {\n  [key1]() {},\n  [key2]() {},\n};\nobj[key1].name // "[description]"\nobj[key2].name // ""\n'})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"key1"}),"对应的 Symbol 值有描述，",(0,c.jsx)(n.code,{children:"key2"}),"没有。"]}),"\n",(0,c.jsxs)(n.h2,{id:"属性的可枚举性和遍历",children:["属性的可枚举性和遍历",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#属性的可枚举性和遍历",children:"#"})]}),"\n",(0,c.jsxs)(n.h3,{id:"可枚举性",children:["可枚举性",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可枚举性",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。",(0,c.jsx)(n.code,{children:"Object.getOwnPropertyDescriptor"}),"方法可以获取该属性的描述对象。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let obj = { foo: 123 };\nObject.getOwnPropertyDescriptor(obj, 'foo')\n//  {\n//    value: 123,\n//    writable: true,\n//    enumerable: true,\n//    configurable: true\n//  }\n"})}),"\n",(0,c.jsxs)(n.p,{children:["描述对象的",(0,c.jsx)(n.code,{children:"enumerable"}),"属性，称为“可枚举性”，如果该属性为",(0,c.jsx)(n.code,{children:"false"}),"，就表示某些操作会忽略当前属性。"]}),"\n",(0,c.jsxs)(n.p,{children:["目前，有四个操作会忽略",(0,c.jsx)(n.code,{children:"enumerable"}),"为",(0,c.jsx)(n.code,{children:"false"}),"的属性。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"for...in"}),"循环：只遍历对象自身的和继承的可枚举的属性。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Object.keys()"}),"：返回对象自身的所有可枚举的属性的键名。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"JSON.stringify()"}),"：只串行化对象自身的可枚举的属性。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Object.assign()"}),"： 忽略",(0,c.jsx)(n.code,{children:"enumerable"}),"为",(0,c.jsx)(n.code,{children:"false"}),"的属性，只拷贝对象自身的可枚举的属性。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这四个操作之中，前三个是 ES5 就有的，最后一个",(0,c.jsx)(n.code,{children:"Object.assign()"}),"是 ES6 新增的。其中，只有",(0,c.jsx)(n.code,{children:"for...in"}),"会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性。实际上，引入“可枚举”（",(0,c.jsx)(n.code,{children:"enumerable"}),"）这个概念的最初目的，就是让某些属性可以规避掉",(0,c.jsx)(n.code,{children:"for...in"}),"操作，不然所有内部属性和方法都会被遍历到。比如，对象原型的",(0,c.jsx)(n.code,{children:"toString"}),"方法，以及数组的",(0,c.jsx)(n.code,{children:"length"}),"属性，就通过“可枚举性”，从而避免被",(0,c.jsx)(n.code,{children:"for...in"}),"遍历到。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"Object.getOwnPropertyDescriptor(Object.prototype, 'toString').enumerable\n// false\n\nObject.getOwnPropertyDescriptor([], 'length').enumerable\n// false\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"toString"}),"和",(0,c.jsx)(n.code,{children:"length"}),"属性的",(0,c.jsx)(n.code,{children:"enumerable"}),"都是",(0,c.jsx)(n.code,{children:"false"}),"，因此",(0,c.jsx)(n.code,{children:"for...in"}),"不会遍历到这两个继承自原型的属性。"]}),"\n",(0,c.jsx)(n.p,{children:"另外，ES6 规定，所有 Class 的原型的方法都是不可枚举的。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"Object.getOwnPropertyDescriptor(class {foo() {}}.prototype, 'foo').enumerable\n// false\n"})}),"\n",(0,c.jsxs)(n.p,{children:["总的来说，操作中引入继承的属性会让问题复杂化，大多数时候，我们只关心对象自身的属性。所以，尽量不要用",(0,c.jsx)(n.code,{children:"for...in"}),"循环，而用",(0,c.jsx)(n.code,{children:"Object.keys()"}),"代替。"]}),"\n",(0,c.jsxs)(n.h3,{id:"属性的遍历",children:["属性的遍历",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#属性的遍历",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"ES6 一共有 5 种方法可以遍历对象的属性。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"（1）for...in"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"for...in"}),"循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"（2）Object.keys(obj)"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Object.keys"}),"返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"（3）Object.getOwnPropertyNames(obj)"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Object.getOwnPropertyNames"}),"返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"（4）Object.getOwnPropertySymbols(obj)"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Object.getOwnPropertySymbols"}),"返回一个数组，包含对象自身的所有 Symbol 属性的键名。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"（5）Reflect.ownKeys(obj)"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Reflect.ownKeys"}),"返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。"]}),"\n",(0,c.jsx)(n.p,{children:"以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"首先遍历所有数值键，按照数值升序排列。"}),"\n",(0,c.jsx)(n.li,{children:"其次遍历所有字符串键，按照加入时间升序排列。"}),"\n",(0,c.jsx)(n.li,{children:"最后遍历所有 Symbol 键，按照加入时间升序排列。"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"Reflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 })\n// ['2', '10', 'b', 'a', Symbol()]\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"Reflect.ownKeys"}),"方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是这样的，首先是数值属性",(0,c.jsx)(n.code,{children:"2"}),"和",(0,c.jsx)(n.code,{children:"10"}),"，其次是字符串属性",(0,c.jsx)(n.code,{children:"b"}),"和",(0,c.jsx)(n.code,{children:"a"}),"，最后是 Symbol 属性。"]}),"\n",(0,c.jsxs)(n.h2,{id:"super-关键字",children:["super 关键字",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#super-关键字",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["我们知道，",(0,c.jsx)(n.code,{children:"this"}),"关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字",(0,c.jsx)(n.code,{children:"super"}),"，指向当前对象的原型对象。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const proto = {\n  foo: 'hello'\n};\n\nconst obj = {\n  foo: 'world',\n  find() {\n    return super.foo;\n  }\n};\n\nObject.setPrototypeOf(obj, proto);\nobj.find() // \"hello\"\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，对象",(0,c.jsx)(n.code,{children:"obj.find()"}),"方法之中，通过",(0,c.jsx)(n.code,{children:"super.foo"}),"引用了原型对象",(0,c.jsx)(n.code,{children:"proto"}),"的",(0,c.jsx)(n.code,{children:"foo"}),"属性。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意，",(0,c.jsx)(n.code,{children:"super"}),"关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 报错\nconst obj = {\n  foo: super.foo\n}\n\n// 报错\nconst obj = {\n  foo: () => super.foo\n}\n\n// 报错\nconst obj = {\n  foo: function () {\n    return super.foo\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面三种",(0,c.jsx)(n.code,{children:"super"}),"的用法都会报错，因为对于 JavaScript 引擎来说，这里的",(0,c.jsx)(n.code,{children:"super"}),"都没有用在对象的方法之中。第一种写法是",(0,c.jsx)(n.code,{children:"super"}),"用在属性里面，第二种和第三种写法是",(0,c.jsx)(n.code,{children:"super"}),"用在一个函数里面，然后赋值给",(0,c.jsx)(n.code,{children:"foo"}),"属性。目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。"]}),"\n",(0,c.jsxs)(n.p,{children:["JavaScript 引擎内部，",(0,c.jsx)(n.code,{children:"super.foo"}),"等同于",(0,c.jsx)(n.code,{children:"Object.getPrototypeOf(this).foo"}),"（属性）或",(0,c.jsx)(n.code,{children:"Object.getPrototypeOf(this).foo.call(this)"}),"（方法）。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const proto = {\n  x: 'hello',\n  foo() {\n    console.log(this.x);\n  },\n};\n\nconst obj = {\n  x: 'world',\n  foo() {\n    super.foo();\n  }\n}\n\nObject.setPrototypeOf(obj, proto);\n\nobj.foo() // \"world\"\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"super.foo"}),"指向原型对象",(0,c.jsx)(n.code,{children:"proto"}),"的",(0,c.jsx)(n.code,{children:"foo"}),"方法，但是绑定的",(0,c.jsx)(n.code,{children:"this"}),"却还是当前对象",(0,c.jsx)(n.code,{children:"obj"}),"，因此输出的就是",(0,c.jsx)(n.code,{children:"world"}),"。"]}),"\n",(0,c.jsxs)(n.h2,{id:"对象的扩展运算符",children:["对象的扩展运算符",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#对象的扩展运算符",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["《数组的扩展》一章中，已经介绍过扩展运算符（",(0,c.jsx)(n.code,{children:"..."}),"）。ES2018 将这个运算符",(0,c.jsx)(n.a,{href:"https://github.com/sebmarkbage/ecmascript-rest-spread",target:"_blank",rel:"noopener noreferrer",children:"引入"}),"了对象。"]}),"\n",(0,c.jsxs)(n.h3,{id:"解构赋值",children:["解构赋值",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#解构赋值",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx // 1\ny // 2\nz // { a: 3, b: 4 }\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，变量",(0,c.jsx)(n.code,{children:"z"}),"是解构赋值所在的对象。它获取等号右边的所有尚未读取的键（",(0,c.jsx)(n.code,{children:"a"}),"和",(0,c.jsx)(n.code,{children:"b"}),"），将它们连同值一起拷贝过来。"]}),"\n",(0,c.jsxs)(n.p,{children:["由于解构赋值要求等号右边是一个对象，所以如果等号右边是",(0,c.jsx)(n.code,{children:"undefined"}),"或",(0,c.jsx)(n.code,{children:"null"}),"，就会报错，因为它们无法转为对象。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let { ...z } = null; // 运行时错误\nlet { ...z } = undefined; // 运行时错误\n"})}),"\n",(0,c.jsx)(n.p,{children:"解构赋值必须是最后一个参数，否则会报错。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let { ...x, y, z } = someObject; // 句法错误\nlet { x, ...y, ...z } = someObject; // 句法错误\n"})}),"\n",(0,c.jsx)(n.p,{children:"上面代码中，解构赋值不是最后一个参数，所以会报错。"}),"\n",(0,c.jsx)(n.p,{children:"注意，解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let obj = { a: { b: 1 } };\nlet { ...x } = obj;\nobj.a.b = 2;\nx.a.b // 2\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"x"}),"是解构赋值所在的对象，拷贝了对象",(0,c.jsx)(n.code,{children:"obj"}),"的",(0,c.jsx)(n.code,{children:"a"}),"属性。",(0,c.jsx)(n.code,{children:"a"}),"属性引用了一个对象，修改这个对象的值，会影响到解构赋值对它的引用。"]}),"\n",(0,c.jsx)(n.p,{children:"另外，扩展运算符的解构赋值，不能复制继承自原型对象的属性。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let o1 = { a: 1 };\nlet o2 = { b: 2 };\no2.__proto__ = o1;\nlet { ...o3 } = o2;\no3 // { b: 2 }\no3.a // undefined\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，对象",(0,c.jsx)(n.code,{children:"o3"}),"复制了",(0,c.jsx)(n.code,{children:"o2"}),"，但是只复制了",(0,c.jsx)(n.code,{children:"o2"}),"自身的属性，没有复制它的原型对象",(0,c.jsx)(n.code,{children:"o1"}),"的属性。"]}),"\n",(0,c.jsx)(n.p,{children:"下面是另一个例子。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const o = Object.create({ x: 1, y: 2 });\no.z = 3;\n\nlet { x, ...newObj } = o;\nlet { y, z } = newObj;\nx // 1\ny // undefined\nz // 3\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，变量",(0,c.jsx)(n.code,{children:"x"}),"是单纯的解构赋值，所以可以读取对象",(0,c.jsx)(n.code,{children:"o"}),"继承的属性；变量",(0,c.jsx)(n.code,{children:"y"}),"和",(0,c.jsx)(n.code,{children:"z"}),"是扩展运算符的解构赋值，只能读取对象",(0,c.jsx)(n.code,{children:"o"}),"自身的属性，所以变量",(0,c.jsx)(n.code,{children:"z"}),"可以赋值成功，变量",(0,c.jsx)(n.code,{children:"y"}),"取不到值。ES6 规定，变量声明语句之中，如果使用解构赋值，扩展运算符后面必须是一个变量名，而不能是一个解构赋值表达式，所以上面代码引入了中间变量",(0,c.jsx)(n.code,{children:"newObj"}),"，如果写成下面这样会报错。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let { x, ...{ y, z } } = o;\n// SyntaxError: ... must be followed by an identifier in declaration contexts\n"})}),"\n",(0,c.jsx)(n.p,{children:"解构赋值的一个用处，是扩展某个函数的参数，引入其他操作。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"function baseFunction({ a, b }) {\n  // ...\n}\nfunction wrapperFunction({ x, y, ...restConfig }) {\n  // 使用 x 和 y 参数进行操作\n  // 其余参数传给原始函数\n  return baseFunction(restConfig);\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，原始函数",(0,c.jsx)(n.code,{children:"baseFunction"}),"接受",(0,c.jsx)(n.code,{children:"a"}),"和",(0,c.jsx)(n.code,{children:"b"}),"作为参数，函数",(0,c.jsx)(n.code,{children:"wrapperFunction"}),"在",(0,c.jsx)(n.code,{children:"baseFunction"}),"的基础上进行了扩展，能够接受多余的参数，并且保留原始函数的行为。"]}),"\n",(0,c.jsxs)(n.h3,{id:"扩展运算符",children:["扩展运算符",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展运算符",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["对象的扩展运算符（",(0,c.jsx)(n.code,{children:"..."}),"）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let z = { a: 3, b: 4 };\nlet n = { ...z };\nn // { a: 3, b: 4 }\n"})}),"\n",(0,c.jsx)(n.p,{children:"由于数组是特殊的对象，所以对象的扩展运算符也可以用于数组。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let foo = { ...['a', 'b', 'c'] };\nfoo\n// {0: \"a\", 1: \"b\", 2: \"c\"}\n"})}),"\n",(0,c.jsx)(n.p,{children:"如果扩展运算符后面是一个空对象，则没有任何效果。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"{...{}, a: 1}\n// { a: 1 }\n"})}),"\n",(0,c.jsx)(n.p,{children:"如果扩展运算符后面不是对象，则会自动将其转为对象。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 等同于 {...Object(1)}\n{...1} // {}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，扩展运算符后面是整数",(0,c.jsx)(n.code,{children:"1"}),"，会自动转为数值的包装对象",(0,c.jsx)(n.code,{children:"Number{1}"}),"。由于该对象没有自身属性，所以返回一个空对象。"]}),"\n",(0,c.jsx)(n.p,{children:"下面的例子都是类似的道理。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 等同于 {...Object(true)}\n{...true} // {}\n\n// 等同于 {...Object(undefined)}\n{...undefined} // {}\n\n// 等同于 {...Object(null)}\n{...null} // {}\n"})}),"\n",(0,c.jsx)(n.p,{children:"但是，如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'{...\'hello\'}\n// {0: "h", 1: "e", 2: "l", 3: "l", 4: "o"}\n'})}),"\n",(0,c.jsx)(n.p,{children:"对象的扩展运算符，只会返回参数对象自身的、可枚举的属性，这一点要特别小心，尤其是用于类的实例对象时。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"class C {\n  p = 12;\n  m() {}\n}\n\nlet c = new C();\nlet clone = { ...c };\n\nclone.p; // ok\nclone.m(); // 报错\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面示例中，",(0,c.jsx)(n.code,{children:"c"}),"是",(0,c.jsx)(n.code,{children:"C"}),"类的实例对象，对其进行扩展运算时，只会返回",(0,c.jsx)(n.code,{children:"c"}),"自身的属性",(0,c.jsx)(n.code,{children:"c.p"}),"，而不会返回",(0,c.jsx)(n.code,{children:"c"}),"的方法",(0,c.jsx)(n.code,{children:"c.m()"}),"，因为这个方法定义在",(0,c.jsx)(n.code,{children:"C"}),"的原型对象上（详见 Class 的章节）。"]}),"\n",(0,c.jsxs)(n.p,{children:["对象的扩展运算符等同于使用",(0,c.jsx)(n.code,{children:"Object.assign()"}),"方法。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let aClone = { ...a };\n// 等同于\nlet aClone = Object.assign({}, a);\n"})}),"\n",(0,c.jsx)(n.p,{children:"上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 写法一\nconst clone1 = {\n  __proto__: Object.getPrototypeOf(obj),\n  ...obj\n};\n\n// 写法二\nconst clone2 = Object.assign(\n  Object.create(Object.getPrototypeOf(obj)),\n  obj\n);\n\n// 写法三\nconst clone3 = Object.create(\n  Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj)\n)\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，写法一的",(0,c.jsx)(n.code,{children:"__proto__"}),"属性在非浏览器的环境不一定部署，因此推荐使用写法二和写法三。"]}),"\n",(0,c.jsx)(n.p,{children:"扩展运算符可以用于合并两个对象。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let ab = { ...a, ...b };\n// 等同于\nlet ab = Object.assign({}, a, b);\n"})}),"\n",(0,c.jsx)(n.p,{children:"如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let aWithOverrides = { ...a, x: 1, y: 2 };\n// 等同于\nlet aWithOverrides = { ...a, ...{ x: 1, y: 2 } };\n// 等同于\nlet x = 1, y = 2, aWithOverrides = { ...a, x, y };\n// 等同于\nlet aWithOverrides = Object.assign({}, a, { x: 1, y: 2 });\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"a"}),"对象的",(0,c.jsx)(n.code,{children:"x"}),"属性和",(0,c.jsx)(n.code,{children:"y"}),"属性，拷贝到新对象后会被覆盖掉。"]}),"\n",(0,c.jsx)(n.p,{children:"这用来修改现有对象部分的属性就很方便了。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let newVersion = {\n  ...previousVersion,\n  name: 'New Name' // Override the name property\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面代码中，",(0,c.jsx)(n.code,{children:"newVersion"}),"对象自定义了",(0,c.jsx)(n.code,{children:"name"}),"属性，其他属性全部复制自",(0,c.jsx)(n.code,{children:"previousVersion"}),"对象。"]}),"\n",(0,c.jsx)(n.p,{children:"如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let aWithDefaults = { x: 1, y: 2, ...a };\n// 等同于\nlet aWithDefaults = Object.assign({}, { x: 1, y: 2 }, a);\n// 等同于\nlet aWithDefaults = Object.assign({ x: 1, y: 2 }, a);\n"})}),"\n",(0,c.jsx)(n.p,{children:"与数组的扩展运算符一样，对象的扩展运算符后面可以跟表达式。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const obj = {\n  ...(x > 1 ? {a: 1} : {}),\n  b: 2,\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["扩展运算符的参数对象之中，如果有取值函数",(0,c.jsx)(n.code,{children:"get"}),"，这个函数是会执行的。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"let a = {\n  get x() {\n    throw new Error('not throw yet');\n  }\n}\n\nlet aWithXGetter = { ...a }; // 报错\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面例子中，取值函数",(0,c.jsx)(n.code,{children:"get"}),"在扩展",(0,c.jsx)(n.code,{children:"a"}),"对象时会自动执行，导致报错。"]}),"\n",(0,c.jsxs)(n.h2,{id:"aggregateerror-错误对象",children:["AggregateError 错误对象",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#aggregateerror-错误对象",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["ES2021 标准之中，为了配合新增的",(0,c.jsx)(n.code,{children:"Promise.any()"}),"方法（详见《Promise 对象》一章），还引入一个新的错误对象",(0,c.jsx)(n.code,{children:"AggregateError"}),"，也放在这一章介绍。"]}),"\n",(0,c.jsx)(n.p,{children:"AggregateError 在一个错误对象里面，封装了多个错误。如果某个单一操作，同时引发了多个错误，需要同时抛出这些错误，那么就可以抛出一个 AggregateError 错误对象，把各种错误都放在这个对象里面。"}),"\n",(0,c.jsx)(n.p,{children:"AggregateError 本身是一个构造函数，用来生成 AggregateError 实例对象。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"AggregateError(errors[, message])\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"AggregateError()"}),"构造函数可以接受两个参数。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"errors：数组，它的每个成员都是一个错误对象。该参数是必须的。"}),"\n",(0,c.jsx)(n.li,{children:"message：字符串，表示 AggregateError 抛出时的提示信息。该参数是可选的。"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const error = new AggregateError([\n  new Error('ERROR_11112'),\n  new TypeError('First name must be a string'),\n  new RangeError('Transaction value must be at least 1'),\n  new URIError('User profile link must be https'),\n], 'Transaction cannot be processed')\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面示例中，",(0,c.jsx)(n.code,{children:"AggregateError()"}),"的第一个参数数组里面，一共有四个错误实例。第二个参数字符串则是这四个错误的一个整体的提示。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"AggregateError"}),"的实例对象有三个属性。"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"name：错误名称，默认为“AggregateError”。"}),"\n",(0,c.jsx)(n.li,{children:"message：错误的提示信息。"}),"\n",(0,c.jsx)(n.li,{children:"errors：数组，每个成员都是一个错误对象。"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"下面是一个示例。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'try {\n  throw new AggregateError([\n    new Error("some error"),\n  ], \'Hello\');\n} catch (e) {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message);                   // "Hello"\n  console.log(e.name);                      // "AggregateError"\n  console.log(e.errors);                    // [ Error: "some error" ]\n}\n'})}),"\n",(0,c.jsxs)(n.h2,{id:"error-对象的-cause-属性",children:["Error 对象的 cause 属性",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#error-对象的-cause-属性",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["Error 对象用来表示代码运行时的异常情况，但是从这个对象拿到的上下文信息，有时很难解读，也不够充分。",(0,c.jsx)(n.a,{href:"https://github.com/tc39/proposal-error-cause",target:"_blank",rel:"noopener noreferrer",children:"ES2022"})," 为 Error 对象添加了一个",(0,c.jsx)(n.code,{children:"cause"}),"属性，可以在生成错误时，添加报错原因的描述。"]}),"\n",(0,c.jsxs)(n.p,{children:["它的用法是",(0,c.jsx)(n.code,{children:"new Error()"}),"生成 Error 实例时，给出一个描述对象，该对象可以设置",(0,c.jsx)(n.code,{children:"cause"}),"属性。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const actual = new Error('an error!', { cause: 'Error cause' });\nactual.cause; // 'Error cause'\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面示例中，生成 Error 实例时，使用描述对象给出",(0,c.jsx)(n.code,{children:"cause"}),"属性，写入报错的原因。然后，就可以从实例对象上读取这个属性。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"cause"}),"属性可以放置任意内容，不必一定是字符串。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"try {\n  maybeWorks();\n} catch (err) {\n  throw new Error('maybeWorks failed!', { cause: err });\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面示例中，",(0,c.jsx)(n.code,{children:"cause"}),"属性放置的就是一个对象。"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}let d=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F10.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.md"]={toc:[{text:"属性的简洁表示法",id:"属性的简洁表示法",depth:2},{text:"属性名表达式",id:"属性名表达式",depth:2},{text:"方法的 name 属性",id:"方法的-name-属性",depth:2},{text:"属性的可枚举性和遍历",id:"属性的可枚举性和遍历",depth:2},{text:"可枚举性",id:"可枚举性",depth:3},{text:"属性的遍历",id:"属性的遍历",depth:3},{text:"super 关键字",id:"super-关键字",depth:2},{text:"对象的扩展运算符",id:"对象的扩展运算符",depth:2},{text:"解构赋值",id:"解构赋值",depth:3},{text:"扩展运算符",id:"扩展运算符",depth:3},{text:"AggregateError 错误对象",id:"aggregateerror-错误对象",depth:2},{text:"Error 对象的 cause 属性",id:"error-对象的-cause-属性",depth:2}],title:"10.对象的扩展",headingTitle:"10.对象的扩展",frontmatter:{}}}}]);