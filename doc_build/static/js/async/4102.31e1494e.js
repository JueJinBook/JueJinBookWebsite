"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["4102"],{921800:function(e,d,n){n.r(d),n.d(d,{default:()=>h});var c=n(552676),s=n(740453);let r=n.p+"static/image/d7b917ebd3792f45c5a205515940b308.777eb777.webp",i=n.p+"static/image/90b0beb2f526fd22159815cfc9b8a480.c1e4ce0f.webp";function l(e){let d=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h3:"h3",code:"code",strong:"strong",h5:"h5",ul:"ul",li:"li",input:"input",img:"img",table:"table",thead:"thead",tr:"tr",th:"th",pre:"pre"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(d.h1,{id:"2模块规范在node环境中运行esm可行吗",children:["2.模块规范：在Node环境中运行ESM，可行吗？",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#2模块规范在node环境中运行esm可行吗",children:"#"})]}),"\n",(0,c.jsxs)(d.blockquote,{children:["\n",(0,c.jsx)(d.p,{children:"技术要点：CJS、ESM、Nodemon"}),"\n"]}),"\n",(0,c.jsxs)(d.h3,{id:"前言",children:["前言",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"前端工程化"}),"完全离不开",(0,c.jsx)(d.code,{children:"Node"}),"，很多需求都基于",(0,c.jsx)(d.code,{children:"Node"}),"完成。一般来说",(0,c.jsx)(d.code,{children:"Node开发"}),"会使用",(0,c.jsx)(d.code,{children:"CJS"}),"编码，但很多",(0,c.jsx)(d.code,{children:"Web开发"}),"的同学已习惯使用",(0,c.jsx)(d.code,{children:"ESM"}),"编码了。"]}),"\n",(0,c.jsxs)(d.p,{children:["其实无需担心，",(0,c.jsx)(d.code,{children:"Web开发"}),"转向",(0,c.jsx)(d.code,{children:"Node开发"}),"完全可继续使用",(0,c.jsx)(d.code,{children:"ESM"}),"编码。因为",(0,c.jsx)(d.code,{children:"Web"}),"与",(0,c.jsx)(d.code,{children:"Node"}),"都是一种",(0,c.jsx)(d.code,{children:"JS运行环境"}),"，本质上只有",(0,c.jsx)(d.code,{children:"运行环境"}),"不同。"]}),"\n",(0,c.jsxs)(d.p,{children:["当前面临的核心问题是",(0,c.jsx)(d.code,{children:"Node"}),"无法直接使用",(0,c.jsx)(d.code,{children:"ESM"}),"编码。本章将带领你",(0,c.jsx)(d.strong,{children:"部署Node的ESM开发环境"}),"，无需关注",(0,c.jsx)(d.code,{children:"JS运行环境"}),"涉及模块方案的差异性，让",(0,c.jsx)(d.code,{children:"Node开发"}),"也变得像",(0,c.jsx)(d.code,{children:"Web开发"}),"那样丝滑。"]}),"\n",(0,c.jsxs)(d.h3,{id:"背景模块化是什么",children:["背景：模块化是什么",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#背景模块化是什么",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:["首先理解",(0,c.jsx)(d.code,{children:"前端工程化"}),"中一个很重要的概念：",(0,c.jsx)(d.strong,{children:"模块化"}),"。一起聊聊",(0,c.jsx)(d.code,{children:"模块化"}),"是什么以及",(0,c.jsx)(d.code,{children:"JS模块化"}),"包括哪些解决方案。当然",(0,c.jsx)(d.code,{children:"CJS"}),"与",(0,c.jsx)(d.code,{children:"ESM"}),"这两种",(0,c.jsx)(d.code,{children:"模块规范"}),"是重点回顾对象。"]}),"\n",(0,c.jsxs)(d.h5,{id:"模块化",children:["模块化",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#模块化",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"JS"}),"诞生于",(0,c.jsx)(d.code,{children:"1995年"}),"，最初设计的目的是实现一些简单的浏览器交互效果，寥寥数语就能为用户提供良好的操作体验。随着",(0,c.jsx)(d.code,{children:"JS"}),"的快速发展，各种前端技术得到广泛应用，特别是",(0,c.jsx)(d.code,{children:"AJAX"}),"与",(0,c.jsx)(d.code,{children:"Jquery"}),"引发的前端大革命让",(0,c.jsx)(d.code,{children:"JS"}),"得到质的提升，但各种问题也接踵而至。"]}),"\n",(0,c.jsxs)(d.p,{children:["在实际开发时，经常会遇到",(0,c.jsx)(d.code,{children:"变量名称"}),"或",(0,c.jsx)(d.code,{children:"函数名称"}),"一样的情况。这不仅容易造成",(0,c.jsx)(d.strong,{children:"命名冲突"}),"，还会污染全局变量。若在应用特别复杂，存在大量相似代码，又引用很多第三方库的情况下，稍不注意就很易造成文件的",(0,c.jsx)(d.strong,{children:"依赖混乱"}),"。"]}),"\n",(0,c.jsxs)(d.p,{children:["基于此，",(0,c.jsx)(d.code,{children:"JS"}),"也引入",(0,c.jsx)(d.code,{children:"模块化"}),"的概念。",(0,c.jsx)(d.strong,{children:"早期的模块化不是真正的模块化，只是通过一些“骚操作”实现看似是模块化的效果"}),"，例如",(0,c.jsx)(d.code,{children:"立即调用函数表达式"}),"(简称",(0,c.jsx)(d.code,{children:"IIFE"}),")就是一个在定义时可立即执行的函数，至于它如何实现",(0,c.jsx)(d.code,{children:"模块化"}),"，可查看",(0,c.jsx)(d.a,{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/IIFE",target:"_blank",rel:"noopener noreferrer",children:"MDN文档"}),"，在此不深入讲述了。",(0,c.jsx)(d.strong,{children:"后期的模块化才算是真正的模块化"}),"，它包括",(0,c.jsx)(d.code,{children:"CJS"}),"、",(0,c.jsx)(d.code,{children:"AMD"}),"、",(0,c.jsx)(d.code,{children:"CMD"}),"、",(0,c.jsx)(d.code,{children:"UMD"}),"和",(0,c.jsx)(d.code,{children:"ESM"}),"，经过多年演变，目前",(0,c.jsx)(d.code,{children:"Web开发"}),"倾向于",(0,c.jsx)(d.code,{children:"ESM"}),"，",(0,c.jsx)(d.code,{children:"Node开发"}),"倾向于",(0,c.jsx)(d.code,{children:"CJS"}),"。"]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"模块化"}),"让",(0,c.jsx)(d.code,{children:"JS"}),"也能拥有自己的",(0,c.jsx)(d.code,{children:"模块化效果"}),"，在实际开发中，",(0,c.jsx)(d.strong,{children:"一个模块就是一个文件"}),"。",(0,c.jsx)(d.code,{children:"模块化"}),"的核心包括以下特性，基本都是围绕如何处理文件(",(0,c.jsx)(d.code,{children:"模块"}),")。"]}),"\n",(0,c.jsxs)(d.ul,{className:"contains-task-list",children:["\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,c.jsx)(d.strong,{children:"拆分"}),"：将代码根据功能拆分为多个可复用模块"]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,c.jsx)(d.strong,{children:"加载"}),"：通过指定方式加载模块并执行与输出模块"]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,c.jsx)(d.strong,{children:"注入"}),"：将一个模块的输出注入到另一个模块"]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,c.jsx)(d.strong,{children:"管理"}),"：因为工程模块数量众多需管理模块间的依赖关系"]}),"\n"]}),"\n",(0,c.jsxs)(d.p,{children:["前端代码爆炸式增长必然会引入",(0,c.jsx)(d.code,{children:"前端工程化"}),"解决问题，",(0,c.jsx)(d.code,{children:"模块化"}),"作为",(0,c.jsx)(d.code,{children:"前端工程化"}),"中最低成本的应用，很值得每位开发者遵守。使用",(0,c.jsx)(d.code,{children:"模块化"}),"开发代码，不仅能提高代码整体可读性，也能增强项目整体维护性。不管是个人开发还是协作开发，",(0,c.jsx)(d.code,{children:"模块化"}),"都能带来很多好处。"]}),"\n",(0,c.jsx)(d.p,{children:(0,c.jsx)("img",{src:i,alt:"模块化作用"})}),"\n",(0,c.jsxs)(d.h5,{id:"模块方案",children:["模块方案",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#模块方案",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:["以前引用",(0,c.jsx)(d.code,{children:"js文件"}),"都会使用多个",(0,c.jsx)(d.code,{children:"<script>"}),"顺序处理，曾见过一个老旧项目多达",(0,c.jsx)(d.code,{children:"12"}),"个",(0,c.jsx)(d.code,{children:"<script>"}),"，这会导致很多问题，例如以下情况。"]}),"\n",(0,c.jsxs)(d.ul,{children:["\n",(0,c.jsxs)(d.li,{children:[(0,c.jsx)(d.strong,{children:"请求过多"}),"：每个",(0,c.jsx)(d.code,{children:"<script>"}),"都有一个",(0,c.jsx)(d.code,{children:"src"}),"必然会增加",(0,c.jsx)(d.code,{children:"HTTP"}),"请求次数"]}),"\n",(0,c.jsxs)(d.li,{children:[(0,c.jsx)(d.strong,{children:"依赖模糊"}),"：每个",(0,c.jsx)(d.code,{children:"<script>"}),"的摆放顺序都有可能影响前后脚本加载错误"]}),"\n",(0,c.jsxs)(d.li,{children:[(0,c.jsx)(d.strong,{children:"难以维护"}),"：每个",(0,c.jsx)(d.code,{children:"<script>"}),"的变量命名与函数作用域都有可能互相影响"]}),"\n"]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"JS模块化"}),"就很好地解决了上述问题，具体有哪些解决方案？在",(0,c.jsx)(d.code,{children:"JS"}),"发展历程中，主要有六种常见模块方案，分别是",(0,c.jsx)(d.code,{children:"IIFE"}),"、",(0,c.jsx)(d.code,{children:"CJS"}),"、",(0,c.jsx)(d.code,{children:"AMD"}),"、",(0,c.jsx)(d.code,{children:"CMD"}),"、",(0,c.jsx)(d.code,{children:"UMD"}),"和",(0,c.jsx)(d.code,{children:"ESM"}),"。为了方便对比，通过下图展示它们各自的定义与特性，相信你有更好的理解。"]}),"\n",(0,c.jsx)(d.p,{children:(0,c.jsx)("img",{src:r,alt:"模块方案"})}),"\n",(0,c.jsxs)(d.p,{children:["分析每个模块方案的特性可知，",(0,c.jsx)(d.code,{children:"同步加载"}),"包括",(0,c.jsx)(d.code,{children:"IIFE"}),"与",(0,c.jsx)(d.code,{children:"CJS"}),"，",(0,c.jsx)(d.code,{children:"异步加载"}),"包括",(0,c.jsx)(d.code,{children:"AMD"}),"、",(0,c.jsx)(d.code,{children:"CMD"}),"和",(0,c.jsx)(d.code,{children:"ESM"}),"。浏览器可兼容",(0,c.jsx)(d.code,{children:"IIFE"}),"与",(0,c.jsx)(d.code,{children:"AMD"}),"，服务器可兼容",(0,c.jsx)(d.code,{children:"CJS"}),"，浏览器与服务器都兼容",(0,c.jsx)(d.code,{children:"CMD"}),"、",(0,c.jsx)(d.code,{children:"UMD"}),"和",(0,c.jsx)(d.code,{children:"ESM"}),"。"]}),"\n",(0,c.jsxs)(d.p,{children:["目前只需关注",(0,c.jsx)(d.code,{children:"CJS"}),"与",(0,c.jsx)(d.code,{children:"ESM"}),"，那它们到底有何细微不同？"]}),"\n",(0,c.jsxs)(d.table,{children:["\n",(0,c.jsxs)(d.thead,{children:["\n",(0,c.jsxs)(d.tr,{children:["\n",(0,c.jsx)(d.th,{align:"center",children:"-"}),"\n",(0,c.jsx)(d.th,{align:"center",children:(0,c.jsx)(d.strong,{children:"CJS"})}),"\n",(0,c.jsx)(d.th,{align:"center",children:(0,c.jsx)(d.strong,{children:"ESM"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.strong,{children:"语法类型"}),"|动态|静态\n",(0,c.jsx)(d.strong,{children:"关键声明"}),"|",(0,c.jsx)(d.code,{children:"require"}),"|",(0,c.jsx)(d.code,{children:"export"}),"与",(0,c.jsx)(d.code,{children:"import"}),"\n",(0,c.jsx)(d.strong,{children:"加载方式"}),"|运行时加载|编译时加载\n",(0,c.jsx)(d.strong,{children:"加载行为"}),"|同步加载|异步加载\n",(0,c.jsx)(d.strong,{children:"书写位置"}),"|任何位置|顶层位置\n",(0,c.jsx)(d.strong,{children:"指针指向"}),"|",(0,c.jsx)(d.code,{children:"this"}),"指向",(0,c.jsx)(d.code,{children:"当前模块"}),"|",(0,c.jsx)(d.code,{children:"this"}),"指向",(0,c.jsx)(d.code,{children:"undefined"}),"\n",(0,c.jsx)(d.strong,{children:"执行顺序"}),"|首次引用时",(0,c.jsx)(d.code,{children:"加载模块"}),"再次引用时",(0,c.jsx)(d.code,{children:"读取缓存"}),"|引用时生成",(0,c.jsx)(d.code,{children:"只读引用"}),"执行时才是正式取值\n",(0,c.jsx)(d.strong,{children:"属性引用"}),"|基本类型属于",(0,c.jsx)(d.code,{children:"复制不共享"}),"引用类型属于",(0,c.jsx)(d.code,{children:"浅拷贝且共享"}),"|所有类型属于",(0,c.jsx)(d.code,{children:"动态只读引用"}),"\n",(0,c.jsx)(d.strong,{children:"属性改动"}),"|工作空间可修改引用的值|工作空间不可修改引用的值","但可通过引用的方法修改"]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"Node开发"}),"习惯使用",(0,c.jsx)(d.code,{children:"CJS"}),"编码，但本章将改用",(0,c.jsx)(d.code,{children:"ESM"}),"编码，因此在后续编码时可能会出现一些难以解释的问题，例如",(0,c.jsx)(d.code,{children:"循环引用"}),"与",(0,c.jsx)(d.code,{children:"前置引用"}),"，而了解它们的加载方式与行为可帮助你理解这些问题。"]}),"\n",(0,c.jsxs)(d.ul,{children:["\n",(0,c.jsxs)(d.li,{children:[(0,c.jsx)(d.strong,{children:"运行时加载"}),"指整体加载模块生成一个对象，再从对象中获取所需的属性方法去加载。最大特性是",(0,c.jsx)(d.code,{children:"全部加载"}),"，只有运行时才能得到该对象，无法在编译时做静态优化。"]}),"\n",(0,c.jsxs)(d.li,{children:[(0,c.jsx)(d.strong,{children:"编译时加载"}),"指直接从模块中获取所需的属性方法去加载。最大特性是",(0,c.jsx)(d.code,{children:"按需加载"}),"，在编译时就完成模块加载，效率比其他方案高，无法引用模块本身(",(0,c.jsx)(d.code,{children:"本身不是对象"}),")，但可拓展",(0,c.jsx)(d.code,{children:"JS"}),"高级语法(",(0,c.jsx)(d.code,{children:"宏与类型校验"}),")。"]}),"\n"]}),"\n",(0,c.jsxs)(d.p,{children:["上述介绍了好几种模块方案，那",(0,c.jsx)(d.code,{children:"前端工程化"}),"都会用到吗？当然不会，可能只需使用",(0,c.jsx)(d.code,{children:"CJS"}),"或",(0,c.jsx)(d.code,{children:"ESM"}),"，而目前只需使用",(0,c.jsx)(d.code,{children:"ESM"}),"编码，因此接着重点关注",(0,c.jsx)(d.code,{children:"ESM"}),"。"]}),"\n",(0,c.jsxs)(d.h3,{id:"现状esm能否在node环境中运行",children:["现状：ESM能否在Node环境中运行",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#现状esm能否在node环境中运行",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:["随着主流浏览器逐步支持",(0,c.jsx)(d.code,{children:"ESM"}),"，越来越多目光投注于",(0,c.jsx)(d.code,{children:"Node"}),"对于",(0,c.jsx)(d.code,{children:"ESM"}),"的支持上。目前",(0,c.jsx)(d.code,{children:"Node"}),"使用",(0,c.jsx)(d.code,{children:"CJS"}),"作为官方模块方案，虽然内置模块方案促进",(0,c.jsx)(d.code,{children:"Node"}),"的流行，但也阻碍了",(0,c.jsx)(d.code,{children:"ESM"}),"的引入，这一点相信接触过",(0,c.jsx)(d.code,{children:"Node开发"}),"的同学一定深有感触。"]}),"\n",(0,c.jsxs)(d.h5,{id:"原生支持esm",children:["原生支持ESM",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#原生支持esm",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"2017年10月31日"}),"，",(0,c.jsx)(d.code,{children:"Node"}),"发布了",(0,c.jsx)(d.code,{children:"v8.9.0"}),"，从此只要在命令中加上",(0,c.jsx)(d.code,{children:"--experimental-modules"}),"，",(0,c.jsx)(d.code,{children:"Node"}),"就可象征性地支持",(0,c.jsx)(d.code,{children:"ESM"}),"了。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-bash",children:"node --experimental-modules index.js\n"})}),"\n",(0,c.jsxs)(d.p,{children:["但",(0,c.jsx)(d.code,{children:"低版本 Node"}),"依然无法直接支持",(0,c.jsx)(d.code,{children:"ESM"}),"解析，还需在运行环境中",(0,c.jsx)(d.code,{children:"“做些手脚”"}),"才行。"]}),"\n",(0,c.jsxs)(d.p,{children:["接着",(0,c.jsx)(d.code,{children:"Node"}),"发布了",(0,c.jsx)(d.code,{children:"v13.2.0"}),"带来一些新特性，正式取消",(0,c.jsx)(d.code,{children:"--experimental-modules"}),"启动参数。当然并不是删除",(0,c.jsx)(d.code,{children:"--experimental-modules"}),"，而是在其原有基础上实现对",(0,c.jsx)(d.code,{children:"ESM"}),"的实验性支持并默认启动。"]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"--experimental-modules"}),"特性包括以下方面。"]}),"\n",(0,c.jsxs)(d.ul,{children:["\n",(0,c.jsxs)(d.li,{children:["使用",(0,c.jsx)(d.code,{children:"type"}),"指定模块方案","\n",(0,c.jsxs)(d.ul,{children:["\n",(0,c.jsxs)(d.li,{children:["在",(0,c.jsx)(d.code,{children:"package.json"}),"中指定",(0,c.jsx)(d.code,{children:"type"}),"为",(0,c.jsx)(d.code,{children:"commonjs"}),"，则使用",(0,c.jsx)(d.code,{children:"CJS"})]}),"\n",(0,c.jsxs)(d.li,{children:["在",(0,c.jsx)(d.code,{children:"package.json"}),"中指定",(0,c.jsx)(d.code,{children:"type"}),"为",(0,c.jsx)(d.code,{children:"module"}),"，则使用",(0,c.jsx)(d.code,{children:"ESM"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(d.li,{children:["使用",(0,c.jsx)(d.code,{children:"--input-type"}),"指定入口文件的模块方案，与",(0,c.jsx)(d.code,{children:"type"}),"一样","\n",(0,c.jsxs)(d.ul,{children:["\n",(0,c.jsxs)(d.li,{children:["命令中加上",(0,c.jsx)(d.code,{children:"--input-type=commonjs"}),"，则使用",(0,c.jsx)(d.code,{children:"CJS"})]}),"\n",(0,c.jsxs)(d.li,{children:["命令中加上",(0,c.jsx)(d.code,{children:"--input-type=module"}),"，则使用",(0,c.jsx)(d.code,{children:"ESM"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(d.li,{children:["支持新文件后缀",(0,c.jsx)(d.code,{children:".cjs"}),"\n",(0,c.jsxs)(d.ul,{children:["\n",(0,c.jsxs)(d.li,{children:["文件后缀使用",(0,c.jsx)(d.code,{children:".cjs"}),"，则使用",(0,c.jsx)(d.code,{children:"CJS"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(d.li,{children:["使用",(0,c.jsx)(d.code,{children:"--es-module-specifier-resolution"}),"指定文件名称引用方式","\n",(0,c.jsxs)(d.ul,{children:["\n",(0,c.jsxs)(d.li,{children:["命令中加上",(0,c.jsx)(d.code,{children:"--es-module-specifier-resolution=explicit"}),"，则引用模块时必须使用文件后缀(",(0,c.jsx)(d.code,{children:"默认"}),")"]}),"\n",(0,c.jsxs)(d.li,{children:["命令中加上",(0,c.jsx)(d.code,{children:"--es-module-specifier-resolution=node"}),"，则引用模块时无需使用文件后缀"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(d.li,{children:["使用",(0,c.jsx)(d.code,{children:"main"}),"根据",(0,c.jsx)(d.code,{children:"type"}),"指定模块方案加载文件","\n",(0,c.jsxs)(d.ul,{children:["\n",(0,c.jsxs)(d.li,{children:["在",(0,c.jsx)(d.code,{children:"package.json"}),"中指定",(0,c.jsx)(d.code,{children:"mian"}),"后会根据",(0,c.jsx)(d.code,{children:"type"}),"指定模块方案加载文件"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(d.h5,{id:"cjsesm判断方式",children:["CJS/ESM判断方式",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#cjsesm判断方式",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"Node"}),"要求使用",(0,c.jsx)(d.code,{children:"ESM"}),"的文件采用",(0,c.jsx)(d.code,{children:".mjs"}),"后缀，只要文件中存在",(0,c.jsx)(d.code,{children:"import/export命令"}),"就必须使用",(0,c.jsx)(d.code,{children:".mjs"}),"后缀。若不希望修改文件后缀，可在",(0,c.jsx)(d.code,{children:"package.json"}),"中指定",(0,c.jsx)(d.code,{children:"type"}),"为",(0,c.jsx)(d.code,{children:"module"}),"。基于此，若其他文件使用",(0,c.jsx)(d.code,{children:"CJS"}),"，就需将其文件后缀改成",(0,c.jsx)(d.code,{children:".cjs"}),"。若在",(0,c.jsx)(d.code,{children:"package.json"}),"中未指定",(0,c.jsx)(d.code,{children:"type"}),"或指定",(0,c.jsx)(d.code,{children:"type"}),"为",(0,c.jsx)(d.code,{children:"commonjs"}),"，则以",(0,c.jsx)(d.code,{children:".js"}),"为后缀的文件会被解析为",(0,c.jsx)(d.code,{children:"CJS"}),"。"]}),"\n",(0,c.jsxs)(d.p,{children:["简而言之，",(0,c.jsx)(d.code,{children:"mjs文件"}),"使用",(0,c.jsx)(d.code,{children:"ESM"}),"解析，",(0,c.jsx)(d.code,{children:"cjs文件"}),"使用",(0,c.jsx)(d.code,{children:"CJS"}),"解析，",(0,c.jsx)(d.code,{children:"js文件"}),"使用基于",(0,c.jsx)(d.code,{children:"package.json"}),"指定的",(0,c.jsx)(d.code,{children:"type"}),"解析(",(0,c.jsx)(d.code,{children:"type=commonjs"}),"使用",(0,c.jsx)(d.code,{children:"CJS"}),"，",(0,c.jsx)(d.code,{children:"type=module"}),"使用",(0,c.jsx)(d.code,{children:"ESM"}),")。"]}),"\n",(0,c.jsx)(d.p,{children:"当然还可通过命令参数处理，不过我认为这样做操作过多，所以就不讨论具体方法了。"}),"\n",(0,c.jsxs)(d.p,{children:["刚才说了",(0,c.jsx)(d.code,{children:"Node v13.2.0"}),"在默认情况下，会启动对",(0,c.jsx)(d.code,{children:"ESM"}),"的实验支持，无需在命令中加上",(0,c.jsx)(d.code,{children:"--experimental-modules"}),"参数。那",(0,c.jsx)(d.code,{children:"Node"}),"是如何区分",(0,c.jsx)(d.code,{children:"CJS"}),"与",(0,c.jsx)(d.code,{children:"ESM"}),"？简而言之，",(0,c.jsx)(d.code,{children:"Node"}),"会将以下情况视为",(0,c.jsx)(d.code,{children:"ESM"}),"。"]}),"\n",(0,c.jsxs)(d.ul,{className:"contains-task-list",children:["\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ","文件后缀为",(0,c.jsx)(d.code,{children:".mjs"})]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ","文件后缀为",(0,c.jsx)(d.code,{children:".js"}),"且在",(0,c.jsx)(d.code,{children:"package.json"}),"中指定",(0,c.jsx)(d.code,{children:"type"}),"为",(0,c.jsx)(d.code,{children:"module"})]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ","命令中加上",(0,c.jsx)(d.code,{children:"--input-type=module"})]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ","命令中加上",(0,c.jsx)(d.code,{children:"--eval cmd"})]}),"\n"]}),"\n",(0,c.jsxs)(d.h3,{id:"方案部署node的esm开发环境",children:["方案：部署Node的ESM开发环境",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#方案部署node的esm开发环境",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:["虽然官方文档有明确的迁移方案，但很多同学还是会存在理解偏差。确实，一连串的操作会让很多未接触或很少接触",(0,c.jsx)(d.code,{children:"Node开发"}),"的同学感觉无比混乱。为了愉快地部署",(0,c.jsx)(d.code,{children:"Node"}),"的",(0,c.jsx)(d.code,{children:"ESM开发环境"}),"，将实现高低两种版本的部署，规范好每种方案的实现方式，再根据自己喜好选择。"]}),"\n",(0,c.jsxs)(d.p,{children:["将",(0,c.jsx)(d.code,{children:"Node v13.2.0"}),"作为高低版本分界线，当版本",(0,c.jsx)(d.code,{children:">=13.2.0"}),"则定为高版本，当版本",(0,c.jsx)(d.code,{children:"<13.2.0"}),"则定为低版本。高版本使用",(0,c.jsx)(d.code,{children:"Node原生部署方案"}),"，低版本使用",(0,c.jsx)(d.code,{children:"Node编译部署方案"}),"。"]}),"\n",(0,c.jsxs)(d.p,{children:["在部署",(0,c.jsx)(d.code,{children:"Node"}),"的",(0,c.jsx)(d.code,{children:"ESM开发环境"}),"前需初始一个示例，以下所有代码都基于该项目进行。"]}),"\n",(0,c.jsxs)(d.p,{children:["在根目录中创建",(0,c.jsx)(d.code,{children:"package.json"}),"并执行",(0,c.jsx)(d.code,{children:"npm i"}),"安装项目依赖。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-json",children:'{\n	"name": "node-esm",\n	"version": "1.0.0",\n	"main": "src/index.js",\n	"scripts": {\n		"start": "node src/index.js"\n	},\n	"dependencies": {\n		"@yangzw/bruce-us": "1.0.3"\n	}\n}\n'})}),"\n",(0,c.jsxs)(d.p,{children:["创建",(0,c.jsx)(d.code,{children:"src/index.js"}),"文件，加入以下内容。示例引用我开源的",(0,c.jsx)(d.a,{href:"https://github.com/JowayYoung/bruce/tree/main/packages/us",target:"_blank",rel:"noopener noreferrer",children:"@yangzw/bruce-us"}),"，其中",(0,c.jsx)(d.code,{children:"NodeType()"}),"用于获取",(0,c.jsx)(d.code,{children:"Node"}),"相关信息。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-js",children:'import { NodeType } from "@yangzw/bruce-us/dist/node";\n\nconsole.log(NodeType());\n'})}),"\n",(0,c.jsx)(d.p,{children:"这一步完成就需分情况讨论了。"}),"\n",(0,c.jsxs)(d.h5,{id:"node原生部署方案",children:["Node原生部署方案",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#node原生部署方案",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:["假设",(0,c.jsx)(d.code,{children:"Node"}),"是",(0,c.jsx)(d.code,{children:"v13.2.0"}),"以上版本，执行",(0,c.jsx)(d.code,{children:"npm start"}),"，输出以下信息表示运行失败。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-bash",children:'(node:56155) Warning: To load an ES module, set "type": "module" in the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...` to show where the warning was created)\n/Users/.../node-esm/for-node/src/index.js:1\nimport { NodeType } from "@yangzw/bruce-us/dist/node";\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n'})}),"\n",(0,c.jsxs)(d.p,{children:["这是因为",(0,c.jsx)(d.code,{children:"Node"}),"根据刚才提到的四种情况也无法识别出是",(0,c.jsx)(d.code,{children:"ESM"}),"，知道原因很快就能找出解决方案了。在保持所有文件后缀为",(0,c.jsx)(d.code,{children:".js"}),"的前提下，在",(0,c.jsx)(d.code,{children:"package.json"}),"中指定",(0,c.jsx)(d.code,{children:"type"}),"为",(0,c.jsx)(d.code,{children:"module"}),"。"]}),"\n",(0,c.jsxs)(d.p,{children:["为何一定要保持所有文件后缀为",(0,c.jsx)(d.code,{children:".js"}),"？作为",(0,c.jsx)(d.code,{children:"前端开发者"}),"且使用",(0,c.jsx)(d.code,{children:"JS"}),"编码，那保证文件后缀为",(0,c.jsx)(d.code,{children:".js"}),"再正常不过，不想出幺蛾子就不要乱改文件后缀。"]}),"\n",(0,c.jsxs)(d.p,{children:["为了让",(0,c.jsx)(d.code,{children:"Node"}),"支持",(0,c.jsx)(d.code,{children:"ESM"}),"，还需为其指定",(0,c.jsx)(d.code,{children:"Node/Npm"}),"版本限制。这是为了避免预设与实际情况不同而报错，例如预设该项目在高版本运行，实际却在低版本运行。"]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"Node"}),"与",(0,c.jsx)(d.code,{children:"Npm"}),"是成双成对地安装，可通过",(0,c.jsx)(d.a,{href:"https://nodejs.org/zh-cn/download/releases",target:"_blank",rel:"noopener noreferrer",children:"Node Releases"}),"查询到",(0,c.jsx)(d.code,{children:"Node v13.2.0"}),"对应",(0,c.jsx)(d.code,{children:"Npm v6.13.1"}),"。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-json",children:'{\n	"type": "module",\n	"engines": {\n		"node": ">=13.2.0",\n		"npm": ">=6.13.1"\n	}\n}\n'})}),"\n",(0,c.jsxs)(d.p,{children:["重新执行",(0,c.jsx)(d.code,{children:"npm start"}),"，输出以下信息表示运行失败。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-bash",children:'internal/process/esm_loader.js:74\ninternalBinding("errors").triggerUncaughtException(\n\nError [ERR_MODULE_NOT_FOUND]: Cannot find module ...\nDid you mean to import @yangzw/bruce-us/dist/node.js?\n'})}),"\n",(0,c.jsxs)(d.p,{children:["根据报错提示，可知模块路径不存在，这主要是因为",(0,c.jsx)(d.strong,{children:"显式文件名称"}),"使用不对。"]}),"\n",(0,c.jsxs)(d.p,{children:["首先",(0,c.jsx)(d.code,{children:"高版本Node"}),"在默认情况下，对",(0,c.jsx)(d.code,{children:"import命令"}),"的文件后缀存在强制性，因此",(0,c.jsx)(d.code,{children:'import "./file"'}),"并不等于",(0,c.jsx)(d.code,{children:"import ./file.js"}),"。其次",(0,c.jsx)(d.code,{children:"CJS"}),"的自动后缀处理行为可通过",(0,c.jsx)(d.code,{children:"--es-module-specifier-resolution=node"}),"开启，但模块主入口并不会受到",(0,c.jsx)(d.code,{children:"ESM"}),"的影响，例如",(0,c.jsx)(d.code,{children:'import Path from "path"'}),"照样可正常运行。在命令中加上",(0,c.jsx)(d.code,{children:"--es-module-specifier-resolution=node"}),"就能解决显示文件名称的问题。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-json",children:'{\n	"scripts": {\n		"start": "node --es-module-specifier-resolution=node src/index.js"\n	}\n}\n'})}),"\n",(0,c.jsxs)(d.p,{children:["为何这样设计显式文件名称？这主要是想通过",(0,c.jsx)(d.code,{children:"Node"}),"提供的通用解决方案鼓励开发者编写",(0,c.jsx)(d.code,{children:"Web"}),"与",(0,c.jsx)(d.code,{children:"Node"}),"共享的代码。"]}),"\n",(0,c.jsxs)(d.p,{children:["重新修改文件名称后再执行",(0,c.jsx)(d.code,{children:"npm start"}),"，输出以下信息运行成功，这次就无任何问题了！"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-bash",children:'{\n	nodeVs: "16.14.0",\n	npmVs: "8.3.1",\n	system: "macos",\n	systemVs: "19.6.0"\n}\n'})}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"Node"}),"使用",(0,c.jsx)(d.code,{children:"ESM"}),"除了上述问题外，还存在一些特别差异。特别是",(0,c.jsx)(d.code,{children:"ESM"}),"不再提供",(0,c.jsx)(d.code,{children:"Node"}),"某些特性与不能灵活引用",(0,c.jsx)(d.code,{children:"json文件"}),"了，因此",(0,c.jsx)(d.code,{children:"__dirname"}),"、",(0,c.jsx)(d.code,{children:"__filename"}),"、",(0,c.jsx)(d.code,{children:"require"}),"、",(0,c.jsx)(d.code,{children:"module"}),"和",(0,c.jsx)(d.code,{children:"exports"}),"这几个特性将无法使用。"]}),"\n",(0,c.jsx)(d.p,{children:"不过，上帝关闭一扇门的同时还会打开另一扇窗，可采用以下方式解决这些问题。"}),"\n",(0,c.jsxs)(d.ul,{children:["\n",(0,c.jsxs)(d.li,{children:[(0,c.jsx)(d.code,{children:"__filename"}),"与",(0,c.jsx)(d.code,{children:"__dirname"}),"可用",(0,c.jsx)(d.code,{children:"import.meta"}),"对象重建"]}),"\n",(0,c.jsxs)(d.li,{children:[(0,c.jsx)(d.code,{children:"require"}),"、",(0,c.jsx)(d.code,{children:"module"}),"和",(0,c.jsx)(d.code,{children:"exports"}),"可用",(0,c.jsx)(d.code,{children:"import"}),"与",(0,c.jsx)(d.code,{children:"export"}),"代替"]}),"\n",(0,c.jsxs)(d.li,{children:[(0,c.jsx)(d.code,{children:"json文件"}),"的引用可用",(0,c.jsx)(d.code,{children:"Fs模块"}),"的",(0,c.jsx)(d.code,{children:"readFileSync"}),"与",(0,c.jsx)(d.code,{children:"JSON.parse()"}),"代替"]}),"\n"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-js",children:'import { readFileSync } from "fs";\nimport { dirname } from "path";\nimport { fileURLToPath } from "url";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconsole.log(__filename, __dirname);\n\nconst json = readFileSync("./info.json");\nconst info = JSON.parse(json);\n'})}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"CJS"}),"的循环依赖关系已通过缓存各个模块的",(0,c.jsx)(d.code,{children:"module.exports"}),"对象解决，但",(0,c.jsx)(d.code,{children:"ESM"}),"用了所谓的绑定。简而言之，",(0,c.jsx)(d.code,{children:"ESM"}),"模块不会导出导入值而是引用值。"]}),"\n",(0,c.jsxs)(d.ul,{children:["\n",(0,c.jsxs)(d.li,{children:[(0,c.jsx)(d.strong,{children:"导入引用模块可访问该引用但无法修改它"}),"。"]}),"\n",(0,c.jsx)(d.li,{children:(0,c.jsx)(d.strong,{children:"导出引用模块可为引用该模块的模块重新分配值且该值由导入引用模块使用"})}),"\n"]}),"\n",(0,c.jsxs)(d.p,{children:["而",(0,c.jsx)(d.code,{children:"CJS"}),"允许在任何时间点将引用分配给模块的",(0,c.jsx)(d.code,{children:"module.exports"}),"对象，让这些改动仅部分反映在其他模块。"]}),"\n",(0,c.jsxs)(d.h5,{id:"node编译部署方案",children:["Node编译部署方案",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#node编译部署方案",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:[(0,c.jsx)(d.code,{children:"Npm"}),"很多模块都使用",(0,c.jsx)(d.code,{children:"CJS"}),"编码，因为同时使用",(0,c.jsx)(d.code,{children:"require"}),"与",(0,c.jsx)(d.code,{children:"export/import"}),"会报错，所以单个模块无法切换到",(0,c.jsx)(d.code,{children:"ESM"}),"。"]}),"\n",(0,c.jsxs)(d.p,{children:["可用",(0,c.jsx)(d.code,{children:"babel"}),"将代码从",(0,c.jsx)(d.code,{children:"ESM"}),"转换为",(0,c.jsx)(d.code,{children:"CJS"}),"，因此使用",(0,c.jsx)(d.code,{children:"babel"}),"编译",(0,c.jsx)(d.code,{children:"ESM"}),"代码是低版本",(0,c.jsx)(d.code,{children:"Node"}),"支持",(0,c.jsx)(d.code,{children:"ESM"}),"最稳定的方案无之一。在",(0,c.jsx)(d.code,{children:"Node v8.9.0"}),"前的版本无法使用",(0,c.jsx)(d.code,{children:"--experimental-modules"}),"支持",(0,c.jsx)(d.code,{children:"ESM"}),"，也就更需",(0,c.jsx)(d.code,{children:"babel"}),"解决该问题了。"]}),"\n",(0,c.jsxs)(d.p,{children:["当然在任何版本中，",(0,c.jsx)(d.code,{children:"babel"}),"都能让新语法转换为与旧环境兼容的代码，因此在",(0,c.jsx)(d.code,{children:"高版本Node"}),"中也同样适用。"]}),"\n",(0,c.jsxs)(d.p,{children:["接着在",(0,c.jsx)(d.code,{children:"v13.2.0"}),"以下版本中部署。执行以下命令安装",(0,c.jsx)(d.code,{children:"babel"}),"相关工具链到",(0,c.jsx)(d.code,{children:"devDependencies"}),"。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-bash",children:"npm i @babel/cli @babel/core @babel/node @babel/preset-env -D\n"})}),"\n",(0,c.jsxs)(d.p,{children:["这四个",(0,c.jsx)(d.code,{children:"babel"}),"子包很重要，",(0,c.jsx)(d.code,{children:"Node"}),"能不能支持",(0,c.jsx)(d.code,{children:"ESM"}),"的解析就看它们了。"]}),"\n",(0,c.jsxs)(d.ul,{className:"contains-task-list",children:["\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,c.jsx)(d.strong,{children:"@babel/cli"}),"：提供支持",(0,c.jsx)(d.code,{children:"@babel/core"}),"的命令运行环境"]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,c.jsx)(d.strong,{children:"@babel/core"}),"：提供转译函数"]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,c.jsx)(d.strong,{children:"@babel/node"}),"：提供支持",(0,c.jsx)(d.code,{children:"ESM"}),"的命令运行环境"]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,c.jsx)(d.strong,{children:"@babel/preset-env"}),"：提供预设语法转换集成环境"]}),"\n"]}),"\n",(0,c.jsxs)(d.p,{children:["安装完毕，在",(0,c.jsx)(d.code,{children:"package.json"}),"中指定",(0,c.jsx)(d.code,{children:"babel"}),"相关配置，将",(0,c.jsx)(d.code,{children:"start"}),"命令中的",(0,c.jsx)(d.code,{children:"node"}),"替换为",(0,c.jsx)(d.code,{children:"babel-node"}),"。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-json",children:'{\n	"scripts": {\n		"start": "babel-node src/index.js"\n	},\n	"babel": {\n		"presets": [\n			"@babel/preset-env"\n		]\n	}\n}\n'})}),"\n",(0,c.jsxs)(d.p,{children:["执行",(0,c.jsx)(d.code,{children:"npm start"}),"，输出以下信息表示运行成功，到此整体坑位几乎为零。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-bash",children:'{\n	nodeVs: "12.22.10",\n	npmVs: "6.14.16",\n	system: "macos",\n	systemVs: "19.6.0"\n}\n'})}),"\n",(0,c.jsxs)(d.p,{children:["当然该方案无需在",(0,c.jsx)(d.code,{children:"package.json"}),"中指定",(0,c.jsx)(d.code,{children:"engines"}),"，毕竟其目的还是将代码的模块方案从",(0,c.jsx)(d.code,{children:"ESM"}),"转换为",(0,c.jsx)(d.code,{children:"CJS"}),"。若需兼容",(0,c.jsx)(d.code,{children:"更低版本Node"}),"，可在",(0,c.jsx)(d.code,{children:"package.json"}),"中指定",(0,c.jsx)(d.code,{children:"babel"}),"的",(0,c.jsx)(d.code,{children:"targets"}),"。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-json",children:'{\n	"babel": {\n		"presets": [\n			["@babel/preset-env", { "targets": { "node": "8.0.0" } }]\n		]\n	}\n}\n'})}),"\n",(0,c.jsxs)(d.h5,{id:"监听脚本自动重启命令",children:["监听脚本自动重启命令",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#监听脚本自动重启命令",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:["每次修改脚本都需重启命令才能让脚本内容生效，这太麻烦了，所以我始终喜欢在",(0,c.jsx)(d.code,{children:"Node"}),"中使用",(0,c.jsx)(d.code,{children:"nodemon"}),"。",(0,c.jsx)(d.strong,{children:"nodemon"}),"是一个自动检测项目文件发生变化就重启服务的",(0,c.jsx)(d.code,{children:"Npm模块"}),"，是",(0,c.jsx)(d.code,{children:"Node开发"}),"的必备工具。"]}),"\n",(0,c.jsxs)(d.p,{children:["以",(0,c.jsx)(d.strong,{children:"Node编译部署方案"}),"的示例为例。执行",(0,c.jsx)(d.code,{children:"npm i -D nodemon"}),"安装",(0,c.jsx)(d.code,{children:"nodemon"}),"，在",(0,c.jsx)(d.code,{children:"package.json"}),"中指定",(0,c.jsx)(d.code,{children:"nodemonConfig"}),"相关配置，将",(0,c.jsx)(d.code,{children:"start"}),"命令替换为",(0,c.jsx)(d.code,{children:"nodemon -x babel-node src/index.js"}),"。"]}),"\n",(0,c.jsx)(d.pre,{children:(0,c.jsx)(d.code,{className:"language-json",children:'{\n	"nodemonConfig": {\n		"env": {\n			"NODE_ENV": "dev"\n		},\n		"execMap": {\n			"js": "node --harmony"\n		},\n		"ext": "js json",\n		"ignore": [\n			"dist/"\n		],\n		"watch": [\n			"src/"\n		]\n	}\n}\n'})}),"\n",(0,c.jsxs)(d.p,{children:["修改",(0,c.jsx)(d.code,{children:"src/index.js"}),"内容，",(0,c.jsx)(d.code,{children:"nodemon"}),"就能快速响应改动并重启命令。",(0,c.jsx)(d.code,{children:"nodemon配置"}),"可查看",(0,c.jsx)(d.a,{href:"https://nodemon.io",target:"_blank",rel:"noopener noreferrer",children:"Nodemon官网"}),"，在此不深入讲述了。"]}),"\n",(0,c.jsxs)(d.h3,{id:"总结",children:["总结",(0,c.jsx)(d.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsxs)(d.p,{children:["很多同学接触",(0,c.jsx)(d.code,{children:"Node开发"}),"都会使用",(0,c.jsx)(d.code,{children:"CJS"}),"编码，但通过本章学习，相信能在",(0,c.jsx)(d.code,{children:"Node环境"}),"中使用",(0,c.jsx)(d.code,{children:"ESM"}),"编码有一个更充分的实践。所有",(0,c.jsx)(d.code,{children:"Node项目"}),"都能通过上述探讨的解决方案改造为",(0,c.jsx)(d.code,{children:"ESM"}),"形式，其余改动可能就是业务代码中",(0,c.jsx)(d.code,{children:"require()"}),"与",(0,c.jsx)(d.code,{children:"import/export"}),"的转换了。"]}),"\n",(0,c.jsxs)(d.p,{children:["每种解决方案都可能有自身的局限，我根据以往开发经验对上述解决方案做一个应用场景的总结。考虑到实用性与稳定性，最终还是推荐使用第三种解决方案：",(0,c.jsx)(d.strong,{children:"监听脚本自动重启命令"}),"。"]}),"\n",(0,c.jsxs)(d.ul,{className:"contains-task-list",children:["\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ","基于",(0,c.jsx)(d.strong,{children:"Node原生部署方案"}),"改造",(0,c.jsx)(d.code,{children:"Node项目"}),"，适合在",(0,c.jsx)(d.code,{children:"高版本Node环境"}),"中使用，点击查看",(0,c.jsx)(d.a,{href:"https://github.com/JowayYoung/fe-engineering/tree/main/node-esm/for-node",target:"_blank",rel:"noopener noreferrer",children:"源码"})]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ","基于",(0,c.jsx)(d.strong,{children:"Node编译部署方案"}),"改造",(0,c.jsx)(d.code,{children:"Node项目"}),"，适合在",(0,c.jsx)(d.code,{children:"低版本Node环境"}),"或",(0,c.jsx)(d.code,{children:"任何版本Node环境"}),"中使用，点击查看",(0,c.jsx)(d.a,{href:"https://github.com/JowayYoung/fe-engineering/tree/main/node-esm/for-babel",target:"_blank",rel:"noopener noreferrer",children:"源码"})]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ","基于",(0,c.jsx)(d.strong,{children:"监听脚本自动重启命令"}),"改造",(0,c.jsx)(d.code,{children:"Node项目"}),"，与",(0,c.jsx)(d.code,{children:"Node编译部署方案"}),"一样的使用条件，中使用，点击查看",(0,c.jsx)(d.a,{href:"https://github.com/JowayYoung/fe-engineering/tree/main/node-esm/for-nodemon",target:"_blank",rel:"noopener noreferrer",children:"源码"})]}),"\n"]}),"\n",(0,c.jsxs)(d.p,{children:["从",(0,c.jsx)(d.code,{children:"前端工程化"}),"的角度来看，设计任何解决方案都要准备一些备用方案甚至是兜底方案，这些方案必须纳入考虑范围并使其具备可行性。"]}),"\n",(0,c.jsx)(d.p,{children:"本章内容到此为止，希望能对你有所启发，欢迎你把自己的学习心得打到评论区！"}),"\n",(0,c.jsxs)(d.ul,{className:"contains-task-list",children:["\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ","示例项目：",(0,c.jsx)(d.a,{href:"https://github.com/JowayYoung/fe-engineering",target:"_blank",rel:"noopener noreferrer",children:"fe-engineering"})]}),"\n",(0,c.jsxs)(d.li,{className:"task-list-item",children:[(0,c.jsx)(d.input,{type:"checkbox",checked:!0,disabled:!0})," ","正式项目：",(0,c.jsx)(d.a,{href:"https://github.com/JowayYoung/bruce",target:"_blank",rel:"noopener noreferrer",children:"bruce"})]}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:d}=Object.assign({},(0,s.ah)(),e.components);return d?(0,c.jsx)(d,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}let h=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E5%88%B0%201%20%E8%90%BD%E5%9C%B0%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%2F2.%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83%EF%BC%9A%E5%9C%A8Node%E7%8E%AF%E5%A2%83%E4%B8%AD%E8%BF%90%E8%A1%8CESM%EF%BC%8C%E5%8F%AF%E8%A1%8C%E5%90%97%EF%BC%9F.md"]={toc:[{text:"前言",id:"前言",depth:3},{text:"背景：模块化是什么",id:"背景模块化是什么",depth:3},{text:"现状：ESM能否在Node环境中运行",id:"现状esm能否在node环境中运行",depth:3},{text:"方案：部署Node的ESM开发环境",id:"方案部署node的esm开发环境",depth:3},{text:"总结",id:"总结",depth:3}],title:"2.模块规范：在Node环境中运行ESM，可行吗？",headingTitle:"2.模块规范：在Node环境中运行ESM，可行吗？",frontmatter:{}}}}]);