"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["17165"],{363509:function(e,r,n){n.r(r),n.d(r,{default:()=>s});var t=n(552676),a=n(740453);let l=n.p+"static/image/93471b23e48668721a3d3e2d09ccfcf7.c1cc8fd9.webp";function i(e){let r=Object.assign({h1:"h1",a:"a",pre:"pre",code:"code",p:"p",h2:"h2",ol:"ol",li:"li",img:"img",ul:"ul",h3:"h3",strong:"strong",h4:"h4"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.h1,{id:"29api-接口开发实战之订单管理模块接口开发",children:["29.API 接口开发实战之订单管理模块接口开发",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#29api-接口开发实战之订单管理模块接口开发",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tip",children:"本篇文章中所涉及的源码已经整理好并上传到百度云，地址和提取密码如下：\n链接: https://pan.baidu.com/s/1boO5BbMUJmdSl41s_wzvSQ \n提取码: g2r3\n"})}),"\n",(0,t.jsx)(r.p,{children:"vue3-admin 是一个 Vue3 + element plus 等技术栈开发的后台管理系统，而其中的业务则是与新蜂商城相关的，这个章节我们来介绍一下订单管理模块的接口实现。"}),"\n",(0,t.jsxs)(r.h2,{id:"新蜂商城订单处理流程",children:["新蜂商城订单处理流程",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#新蜂商城订单处理流程",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"新蜂商城中订单的生成到处理结束，主要有以下几个阶段："}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"提交订单"}),"\n",(0,t.jsx)(r.li,{children:"订单入库"}),"\n",(0,t.jsx)(r.li,{children:"支付订单（由新蜂商城用户发起）"}),"\n",(0,t.jsx)(r.li,{children:"订单流程处理（包括确认订单、取消订单、修改订单信息等操作，新蜂商城用户和管理员都可以对支付成功后的订单进行处理）"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdc81dd592394876b755a62f71e01b6a~tplv-k3u1fbpfcp-zoom-1.image",alt:""})}),"\n",(0,t.jsx)(r.p,{children:"订单模块是整个电商系统的重中之重，甚至可以说它就是电商系统的心脏，因为订单往往决定了一个电商系统的生死，而且订单模块贯穿了整个电商系统的大部分流程，各个环节都与它密不可分，从用户点击提交订单成功生成订单开始，后续的整个流程都是围绕着订单模块进行的，包括支付成功到确认收货的正常订单流程，也包括订单取消、订单退款等一系列的异常单流程。"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"正常订单流程如下："}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f4c564758564ff282532fdd1db59616~tplv-k3u1fbpfcp-zoom-1.image",alt:""})}),"\n",(0,t.jsx)(r.p,{children:"订单生成后，用户正常进行支付操作 > 商家正常进行订单确认和订单发货操作 > 最后由用户进行最后一个步骤：确认收货，这样整个订单流程就正常走完。"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"异常单流程如下："}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4cef625e6e28473cb6a2f58dba796037~tplv-k3u1fbpfcp-zoom-1.image",alt:""})}),"\n",(0,t.jsx)(r.p,{children:"订单入库后，用户选择不去支付而是直接取消订单，亦或者用户正常支付但是在后续流程中选择取消订单这个步骤，至此订单就不是正常状态的订单了，因为它的流程并没有如预想的一样，不止用户可以关闭订单，如果流程中出现了意外事件，商家管理员也可以选择关闭订单。"}),"\n",(0,t.jsx)(r.p,{children:"后台管理系统中并不会处理所有的流程，涉及到的流程主要是订单搜索、订单信息查看、订单状态修改、关闭订单等，本章节主要是实现这些功能。"}),"\n",(0,t.jsxs)(r.h2,{id:"表结构设计",children:["表结构设计",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#表结构设计",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"后台管理系统中，订单管理模块主要涉及两张表，分别是订单表和与之关联的订单项表。"}),"\n",(0,t.jsx)(r.p,{children:"除了订单主表 tb_newbee_mall_order 外，还有一个订单项关联表 tb_newbee_mall_order_item ，订单主表中存储关于订单的相关信息，而订单项表中主要存储关联的商品字段。"}),"\n",(0,t.jsxs)(r.h3,{id:"订单主表和订单项关联表设计",children:["订单主表和订单项关联表设计",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#订单主表和订单项关联表设计",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"订单主表 tb_newbee_mall_order  表结构设计如下，主要字段为："}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"user_id：用户的 id，我们根据这个字段来确定是哪个用户下的订单"}),"\n",(0,t.jsx)(r.li,{children:"order_no：订单号，订单号是用来唯一的标识订单和后续查询订单时用的，这是每个电商系统都会有的设计"}),"\n",(0,t.jsx)(r.li,{children:"pay_status/pay_type/pay_time：支付信息字段，包括支付状态、支付方式、支付时间"}),"\n",(0,t.jsx)(r.li,{children:"order_status：订单状态"}),"\n",(0,t.jsx)(r.li,{children:"create_time：添加到购物车中的时间"}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-sql",children:"USE `newbee_mall_db_v2`;\n\nDROP TABLE IF EXISTS `tb_newbee_mall_order`;\n\nCREATE TABLE `tb_newbee_mall_order` (\n  `order_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '订单表主键id',\n  `order_no` varchar(20) NOT NULL DEFAULT '' COMMENT '订单号',\n  `user_id` bigint(20) NOT NULL DEFAULT '0' COMMENT '用户主键id',\n  `total_price` int(11) NOT NULL DEFAULT '1' COMMENT '订单总价',\n  `pay_status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '支付状态:0.未支付,1.支付成功,-1:支付失败',\n  `pay_type` tinyint(4) NOT NULL DEFAULT '0' COMMENT '0.无 1.支付宝支付 2.微信支付',\n  `pay_time` datetime DEFAULT NULL COMMENT '支付时间',\n  `order_status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '订单状态:0.待支付 1.已支付 2.配货完成 3:出库成功 4.交易成功 -1.手动关闭 -2.超时关闭 -3.商家关闭',\n  `extra_info` varchar(100) NOT NULL DEFAULT '' COMMENT '订单body',\n  `is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '删除标识字段(0-未删除 1-已删除)',\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '最新修改时间',\n  PRIMARY KEY (`order_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n"})}),"\n",(0,t.jsx)(r.p,{children:"订单项表 tb_newbee_mall_order_item 表结构设计如下，主要字段为："}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"order_id：关联的订单主键 id，标识该订单项是哪个订单中的数据"}),"\n",(0,t.jsxs)(r.li,{children:["goods_id/goods_name/goods_cover_img/selling_price/goods_count：订单中的商品信息，且主要字段都做了保存，而且是下单当时的商品数据，因为商品数据也是可以更改的，如果数据发生了改变，只关联商品主键 goods_id 是不够的，更改后再去查看订单详情就不是下单时的商品数据了，因此对这几个字段都做了保存处理，作为订单快照，",(0,t.jsx)(r.strong,{children:"记录下单当时的商品信息"})]}),"\n",(0,t.jsx)(r.li,{children:"create_time：添加到购物车中的时间"}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-sql",children:"USE `newbee_mall_db_v2`;\n\nDROP TABLE IF EXISTS `tb_newbee_mall_order_item`;\n\nCREATE TABLE `tb_newbee_mall_order_item`  (\n  `order_item_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '订单关联购物项主键id',\n  `order_id` bigint(20) NOT NULL DEFAULT 0 COMMENT '订单主键id',\n  `goods_id` bigint(20) NOT NULL DEFAULT 0 COMMENT '关联商品id',\n  `goods_name` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '下单时商品的名称(订单快照)',\n  `goods_cover_img` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '下单时商品的主图(订单快照)',\n  `selling_price` int(11) NOT NULL DEFAULT 1 COMMENT '下单时商品的价格(订单快照)',\n  `goods_count` int(11) NOT NULL DEFAULT 1 COMMENT '数量(订单快照)',\n  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  PRIMARY KEY (`order_item_id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\n"})}),"\n",(0,t.jsx)(r.p,{children:"每个字段对应的含义都在上面的 SQL 中有介绍，大家可以对照 SQL 进行理解，正确的把建表 SQL 导入到数据库中即可，关于两张表中的快照字段，包括收件信息字段和商品信息字段，大家可以做一下思考，也可以参考淘宝商城的订单快照来理解，这些信息都是可以更改的，因此不能只关联一个主键 id，一旦更改，订单信息也随之更改，不再是下单时的数据了。"}),"\n",(0,t.jsxs)(r.h2,{id:"接口实现",children:["接口实现",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#接口实现",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"后台管理系统中，订单管理页面实际的展现效果如下图所示："}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)("img",{src:l,alt:"image-20210426155043945"})}),"\n",(0,t.jsx)(r.p,{children:"需要开发的接口如下："}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"订单列表接口"}),"\n",(0,t.jsx)(r.li,{children:"配货接口"}),"\n",(0,t.jsx)(r.li,{children:"出库接口"}),"\n",(0,t.jsx)(r.li,{children:"订单详情接口"}),"\n",(0,t.jsx)(r.li,{children:"关闭订单接口"}),"\n"]}),"\n",(0,t.jsxs)(r.h4,{id:"新建订单类和订单项类和-mapper-接口",children:["新建订单类和订单项类和 Mapper 接口",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#新建订单类和订单项类和-mapper-接口",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"首先在 ltd.newbee.mall.entity 包中创建订单实体类和订单项类，选中 entity 包并右击，在弹出的菜单中选择“New → Java Class”，在弹出的窗口中分别输入“NewBeeMallOrder”和“NewBeeMallOrderItem”，最后在类中新增如下代码："}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package ltd.newbee.mall.entity;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport lombok.Data;\n\nimport java.util.Date;\n\n@Data\npublic class NewBeeMallOrder {\n    private Long orderId;\n\n    private String orderNo;\n\n    private Long userId;\n\n    private Integer totalPrice;\n\n    private Byte payStatus;\n\n    private Byte payType;\n\n    private Date payTime;\n\n    private Byte orderStatus;\n\n    private String extraInfo;\n\n    private Byte isDeleted;\n\n    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")\n    private Date createTime;\n    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")\n    private Date updateTime;\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"package ltd.newbee.mall.entity;\n\nimport lombok.Data;\n\nimport java.util.Date;\n\n@Data\npublic class NewBeeMallOrderItem {\n    private Long orderItemId;\n\n    private Long orderId;\n\n    private Long goodsId;\n\n    private String goodsName;\n\n    private String goodsCoverImg;\n\n    private Integer sellingPrice;\n\n    private Integer goodsCount;\n\n    private Date createTime;\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"在 ltd.newbee.mall.dao 包中新建订单实体和订单项实体的 Mapper 接口，选中 dao 包并右击，在弹出的菜单中选择“New → Java Class”，在弹出的窗口中分别输入“NewBeeMallOrderMapper”和“NewBeeMallOrderItemMapper”，并选中“Interface”选项，之后在 Mapper 文件中新增如下代码："}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package ltd.newbee.mall.dao;\n\nimport ltd.newbee.mall.entity.NewBeeMallOrder;\nimport ltd.newbee.mall.util.PageQueryUtil;\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.List;\n\npublic interface NewBeeMallOrderMapper {\n    NewBeeMallOrder selectByPrimaryKey(Long orderId);\n\n    int updateByPrimaryKeySelective(NewBeeMallOrder record);\n\n    List<NewBeeMallOrder> findNewBeeMallOrderList(PageQueryUtil pageUtil);\n\n    int getTotalNewBeeMallOrders(PageQueryUtil pageUtil);\n\n    List<NewBeeMallOrder> selectByPrimaryKeys(@Param("orderIds") List<Long> orderIds);\n\n    int checkOut(@Param("orderIds") List<Long> orderIds);\n\n    int closeOrder(@Param("orderIds") List<Long> orderIds, @Param("orderStatus") int orderStatus);\n\n    int checkDone(@Param("orderIds") List<Long> asList);\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"package ltd.newbee.mall.dao;\n\nimport ltd.newbee.mall.entity.NewBeeMallOrderItem;\n\nimport java.util.List;\n\npublic interface NewBeeMallOrderItemMapper {\n    /**\n     * 根据订单id获取订单项列表\n     *\n     * @param orderId\n     * @return\n     */\n    List<NewBeeMallOrderItem> selectByOrderId(Long orderId);\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"定义了对于订单实体和订单项实体操作的数据层方法，主要是查询和修改操作。"}),"\n",(0,t.jsxs)(r.h4,{id:"创建-mapper-接口的映射文件",children:["创建 Mapper 接口的映射文件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-mapper-接口的映射文件",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"在 resources/mapper 目录下新建 NewBeeMallOrderMapper 接口和 NewBeeMallOrderItemMapper 接口的映射文件 NewBeeMallOrderMapper.xml 和 NewBeeMallOrderItemMapper.xml，之后进行映射文件的编写。"}),"\n",(0,t.jsx)(r.p,{children:"按照对应的接口方法，编写具体的 SQL 语句，最终的 NewBeeMallOrderMapper.xml 文件如下："}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="ltd.newbee.mall.dao.NewBeeMallOrderMapper">\n    <resultMap id="BaseResultMap" type="ltd.newbee.mall.entity.NewBeeMallOrder">\n        <id column="order_id" jdbcType="BIGINT" property="orderId"/>\n        <result column="order_no" jdbcType="VARCHAR" property="orderNo"/>\n        <result column="user_id" jdbcType="BIGINT" property="userId"/>\n        <result column="total_price" jdbcType="INTEGER" property="totalPrice"/>\n        <result column="pay_status" jdbcType="TINYINT" property="payStatus"/>\n        <result column="pay_type" jdbcType="TINYINT" property="payType"/>\n        <result column="pay_time" jdbcType="TIMESTAMP" property="payTime"/>\n        <result column="order_status" jdbcType="TINYINT" property="orderStatus"/>\n        <result column="extra_info" jdbcType="VARCHAR" property="extraInfo"/>\n        <result column="is_deleted" jdbcType="TINYINT" property="isDeleted"/>\n        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>\n        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>\n    </resultMap>\n    <sql id="Base_Column_List">\n    order_id, order_no, user_id, total_price, pay_status, pay_type, pay_time, order_status,\n    extra_info, is_deleted, create_time, update_time\n  </sql>\n    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">\n        select\n        <include refid="Base_Column_List"/>\n        from tb_newbee_mall_order\n        where order_id = #{orderId,jdbcType=BIGINT}\n    </select>\n    <select id="selectByPrimaryKeys" resultMap="BaseResultMap">\n        select\n        <include refid="Base_Column_List"/>\n        from tb_newbee_mall_order\n        where order_id in\n        <foreach collection="orderIds" item="item" index="index"\n                 open="(" separator="," close=")">#{item}\n        </foreach>\n    </select>\n    <select id="findNewBeeMallOrderList" parameterType="Map" resultMap="BaseResultMap">\n        select\n        <include refid="Base_Column_List"/>\n        from tb_newbee_mall_order\n        <where>\n            <if test="orderNo!=null and orderNo!=\'\'">\n                and order_no = #{orderNo}\n            </if>\n            <if test="userId!=null and userId!=\'\'">\n                and user_id = #{userId}\n            </if>\n            <if test="payType!=null and payType!=\'\'">\n                and pay_type = #{payType}\n            </if>\n            <if test="orderStatus!=null">\n                and order_status = #{orderStatus}\n            </if>\n            <if test="isDeleted!=null and isDeleted!=\'\'">\n                and is_deleted = #{isDeleted}\n            </if>\n            <if test="startTime != null and startTime.trim() != \'\'">\n                and create_time &gt; #{startTime}\n            </if>\n            <if test="endTime != null and endTime.trim() != \'\'">\n                and create_time &lt; #{endTime}\n            </if>\n        </where>\n        order by create_time desc\n        <if test="start!=null and limit!=null">\n            limit #{start},#{limit}\n        </if>\n    </select>\n\n    <select id="getTotalNewBeeMallOrders" parameterType="Map" resultType="int">\n        select count(*) from tb_newbee_mall_order\n        <where>\n            <if test="orderNo!=null and orderNo!=\'\'">\n                and order_no = #{orderNo}\n            </if>\n            <if test="userId!=null and userId!=\'\'">\n                and user_id = #{userId}\n            </if>\n            <if test="payType!=null and payType!=\'\'">\n                and pay_type = #{payType}\n            </if>\n            <if test="orderStatus!=null">\n                and order_status = #{orderStatus}\n            </if>\n            <if test="isDeleted!=null and isDeleted!=\'\'">\n                and is_deleted = #{isDeleted}\n            </if>\n            <if test="startTime != null and startTime.trim() != \'\'">\n                and create_time &gt; #{startTime}\n            </if>\n            <if test="endTime != null and endTime.trim() != \'\'">\n                and create_time &lt; #{endTime}\n            </if>\n        </where>\n    </select>\n    <update id="checkDone">\n        update tb_newbee_mall_order\n        set order_status = 2,update_time = now()\n        where order_id in\n        <foreach collection="orderIds" item="item" index="index"\n                 open="(" separator="," close=")">#{item}\n        </foreach>\n    </update>\n    <update id="checkOut">\n        update tb_newbee_mall_order\n        set order_status = 3,update_time = now()\n        where order_id in\n        <foreach collection="orderIds" item="item" index="index"\n                 open="(" separator="," close=")">#{item}\n        </foreach>\n    </update>\n    <update id="closeOrder">\n        update tb_newbee_mall_order\n        set order_status = #{orderStatus},update_time = now()\n        where order_id in\n        <foreach collection="orderIds" item="item" index="index"\n                 open="(" separator="," close=")">#{item}\n        </foreach>\n    </update>\n    <update id="updateByPrimaryKeySelective" parameterType="ltd.newbee.mall.entity.NewBeeMallOrder">\n        update tb_newbee_mall_order\n        <set>\n            <if test="orderNo != null">\n                order_no = #{orderNo,jdbcType=VARCHAR},\n            </if>\n            <if test="userId != null">\n                user_id = #{userId,jdbcType=BIGINT},\n            </if>\n            <if test="totalPrice != null">\n                total_price = #{totalPrice,jdbcType=INTEGER},\n            </if>\n            <if test="payStatus != null">\n                pay_status = #{payStatus,jdbcType=TINYINT},\n            </if>\n            <if test="payType != null">\n                pay_type = #{payType,jdbcType=TINYINT},\n            </if>\n            <if test="payTime != null">\n                pay_time = #{payTime,jdbcType=TIMESTAMP},\n            </if>\n            <if test="orderStatus != null">\n                order_status = #{orderStatus,jdbcType=TINYINT},\n            </if>\n            <if test="extraInfo != null">\n                extra_info = #{extraInfo,jdbcType=VARCHAR},\n            </if>\n            <if test="isDeleted != null">\n                is_deleted = #{isDeleted,jdbcType=TINYINT},\n            </if>\n            <if test="createTime != null">\n                create_time = #{createTime,jdbcType=TIMESTAMP},\n            </if>\n            <if test="updateTime != null">\n                update_time = #{updateTime,jdbcType=TIMESTAMP},\n            </if>\n        </set>\n        where order_id = #{orderId,jdbcType=BIGINT}\n    </update>\n</mapper>\n'})}),"\n",(0,t.jsx)(r.p,{children:"NewBeeMallOrderItemMapper.xml 文件如下："}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="ltd.newbee.mall.dao.NewBeeMallOrderItemMapper">\n    <resultMap id="BaseResultMap" type="ltd.newbee.mall.entity.NewBeeMallOrderItem">\n        <id column="order_item_id" jdbcType="BIGINT" property="orderItemId"/>\n        <result column="order_id" jdbcType="BIGINT" property="orderId"/>\n        <result column="goods_id" jdbcType="BIGINT" property="goodsId"/>\n        <result column="goods_name" jdbcType="VARCHAR" property="goodsName"/>\n        <result column="goods_cover_img" jdbcType="VARCHAR" property="goodsCoverImg"/>\n        <result column="selling_price" jdbcType="INTEGER" property="sellingPrice"/>\n        <result column="goods_count" jdbcType="INTEGER" property="goodsCount"/>\n        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>\n    </resultMap>\n    <sql id="Base_Column_List">\n    order_item_id, order_id, goods_id, goods_name, goods_cover_img, selling_price, goods_count, \n    create_time\n  </sql>\n    <select id="selectByOrderId" parameterType="java.lang.Long" resultMap="BaseResultMap">\n        select\n        <include refid="Base_Column_List"/>\n        from tb_newbee_mall_order_item\n        where order_id = #{orderItemId,jdbcType=BIGINT}\n    </select>\n</mapper>\n'})}),"\n",(0,t.jsxs)(r.h4,{id:"业务层代码实现",children:["业务层代码实现",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#业务层代码实现",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"在 ltd.newbee.mall.service 包中新建业务处理类，选中 service 包并右击，在弹出的菜单中选择“New → Java Class”，在弹出的窗口中输入“NewBeeMallOrderService”，并选中“Interface”选项。"}),"\n",(0,t.jsx)(r.p,{children:"最后在 NewBeeMallOrderService.java 文件中新增如下代码："}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"package ltd.newbee.mall.service;\n\nimport ltd.newbee.mall.api.admin.vo.NewBeeMallOrderDetailVO;\nimport ltd.newbee.mall.util.PageQueryUtil;\nimport ltd.newbee.mall.util.PageResult;\n\npublic interface NewBeeMallOrderService {\n\n    /**\n     * 获取订单详情\n     *\n     * @param orderId\n     * @return\n     */\n    NewBeeMallOrderDetailVO getOrderDetailByOrderId(Long orderId);\n\n    /**\n     * 后台分页\n     *\n     * @param pageUtil\n     * @return\n     */\n    PageResult getNewBeeMallOrdersPage(PageQueryUtil pageUtil);\n\n    /**\n     * 配货\n     *\n     * @param ids\n     * @return\n     */\n    String checkDone(Long[] ids);\n\n    /**\n     * 出库\n     *\n     * @param ids\n     * @return\n     */\n    String checkOut(Long[] ids);\n\n    /**\n     * 关闭订单\n     *\n     * @param ids\n     * @return\n     */\n    String closeOrder(Long[] ids);\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"订单模块的业务层方法定义以及每个方法的作用都已经编写完成。"}),"\n",(0,t.jsx)(r.p,{children:"然后在 ltd.newbee.mall.service.impl 包中新建 NewBeeMallOrderService 的实现类，选中 impl 包并右击，在弹出的菜单中选择“New → Java Class”，在弹出的窗口中输入“NewBeeMallOrderServiceImpl”，最后在 NewBeeMallOrderServiceImpl 类中新增如下代码："}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package ltd.newbee.mall.service.impl;\n\nimport ltd.newbee.mall.api.admin.vo.NewBeeMallOrderDetailVO;\nimport ltd.newbee.mall.api.admin.vo.NewBeeMallOrderItemVO;\nimport ltd.newbee.mall.common.NewBeeMallException;\nimport ltd.newbee.mall.common.NewBeeMallOrderStatusEnum;\nimport ltd.newbee.mall.common.PayTypeEnum;\nimport ltd.newbee.mall.common.ServiceResultEnum;\nimport ltd.newbee.mall.dao.NewBeeMallOrderItemMapper;\nimport ltd.newbee.mall.dao.NewBeeMallOrderMapper;\nimport ltd.newbee.mall.entity.NewBeeMallOrder;\nimport ltd.newbee.mall.entity.NewBeeMallOrderItem;\nimport ltd.newbee.mall.service.NewBeeMallOrderService;\nimport ltd.newbee.mall.util.BeanUtil;\nimport ltd.newbee.mall.util.PageQueryUtil;\nimport ltd.newbee.mall.util.PageResult;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n@Service\npublic class NewBeeMallOrderServiceImpl implements NewBeeMallOrderService {\n\n    @Autowired\n    private NewBeeMallOrderMapper newBeeMallOrderMapper;\n    @Autowired\n    private NewBeeMallOrderItemMapper newBeeMallOrderItemMapper;\n\n    @Override\n    public NewBeeMallOrderDetailVO getOrderDetailByOrderId(Long orderId) {\n        NewBeeMallOrder newBeeMallOrder = newBeeMallOrderMapper.selectByPrimaryKey(orderId);\n        if (newBeeMallOrder == null) {\n            NewBeeMallException.fail(ServiceResultEnum.DATA_NOT_EXIST.getResult());\n        }\n        List<NewBeeMallOrderItem> orderItems = newBeeMallOrderItemMapper.selectByOrderId(newBeeMallOrder.getOrderId());\n        //获取订单项数据\n        if (!CollectionUtils.isEmpty(orderItems)) {\n            List<NewBeeMallOrderItemVO> newBeeMallOrderItemVOS = BeanUtil.copyList(orderItems, NewBeeMallOrderItemVO.class);\n            NewBeeMallOrderDetailVO newBeeMallOrderDetailVO = new NewBeeMallOrderDetailVO();\n            BeanUtil.copyProperties(newBeeMallOrder, newBeeMallOrderDetailVO);\n            newBeeMallOrderDetailVO.setOrderStatusString(NewBeeMallOrderStatusEnum.getNewBeeMallOrderStatusEnumByStatus(newBeeMallOrderDetailVO.getOrderStatus()).getName());\n            newBeeMallOrderDetailVO.setPayTypeString(PayTypeEnum.getPayTypeEnumByType(newBeeMallOrderDetailVO.getPayType()).getName());\n            newBeeMallOrderDetailVO.setNewBeeMallOrderItemVOS(newBeeMallOrderItemVOS);\n            return newBeeMallOrderDetailVO;\n        } else {\n            NewBeeMallException.fail(ServiceResultEnum.ORDER_ITEM_NULL_ERROR.getResult());\n            return null;\n        }\n    }\n\n    @Override\n    public PageResult getNewBeeMallOrdersPage(PageQueryUtil pageUtil) {\n        List<NewBeeMallOrder> newBeeMallOrders = newBeeMallOrderMapper.findNewBeeMallOrderList(pageUtil);\n        int total = newBeeMallOrderMapper.getTotalNewBeeMallOrders(pageUtil);\n        PageResult pageResult = new PageResult(newBeeMallOrders, total, pageUtil.getLimit(), pageUtil.getPage());\n        return pageResult;\n    }\n\n    @Override\n    @Transactional\n    public String checkDone(Long[] ids) {\n        //查询所有的订单 判断状态 修改状态和更新时间\n        List<NewBeeMallOrder> orders = newBeeMallOrderMapper.selectByPrimaryKeys(Arrays.asList(ids));\n        String errorOrderNos = "";\n        if (!CollectionUtils.isEmpty(orders)) {\n            for (NewBeeMallOrder newBeeMallOrder : orders) {\n                if (newBeeMallOrder.getIsDeleted() == 1) {\n                    errorOrderNos += newBeeMallOrder.getOrderNo() + " ";\n                    continue;\n                }\n                if (newBeeMallOrder.getOrderStatus() != 1) {\n                    errorOrderNos += newBeeMallOrder.getOrderNo() + " ";\n                }\n            }\n            if (StringUtils.isEmpty(errorOrderNos)) {\n                //订单状态正常 可以执行配货完成操作 修改订单状态和更新时间\n                if (newBeeMallOrderMapper.checkDone(Arrays.asList(ids)) > 0) {\n                    return ServiceResultEnum.SUCCESS.getResult();\n                } else {\n                    return ServiceResultEnum.DB_ERROR.getResult();\n                }\n            } else {\n                //订单此时不可执行出库操作\n                if (errorOrderNos.length() > 0 && errorOrderNos.length() < 100) {\n                    return errorOrderNos + "订单的状态不是支付成功无法执行出库操作";\n                } else {\n                    return "你选择了太多状态不是支付成功的订单，无法执行配货完成操作";\n                }\n            }\n        }\n        //未查询到数据 返回错误提示\n        return ServiceResultEnum.DATA_NOT_EXIST.getResult();\n    }\n\n    @Override\n    @Transactional\n    public String checkOut(Long[] ids) {\n        //查询所有的订单 判断状态 修改状态和更新时间\n        List<NewBeeMallOrder> orders = newBeeMallOrderMapper.selectByPrimaryKeys(Arrays.asList(ids));\n        String errorOrderNos = "";\n        if (!CollectionUtils.isEmpty(orders)) {\n            for (NewBeeMallOrder newBeeMallOrder : orders) {\n                if (newBeeMallOrder.getIsDeleted() == 1) {\n                    errorOrderNos += newBeeMallOrder.getOrderNo() + " ";\n                    continue;\n                }\n                if (newBeeMallOrder.getOrderStatus() != 1 && newBeeMallOrder.getOrderStatus() != 2) {\n                    errorOrderNos += newBeeMallOrder.getOrderNo() + " ";\n                }\n            }\n            if (StringUtils.isEmpty(errorOrderNos)) {\n                //订单状态正常 可以执行出库操作 修改订单状态和更新时间\n                if (newBeeMallOrderMapper.checkOut(Arrays.asList(ids)) > 0) {\n                    return ServiceResultEnum.SUCCESS.getResult();\n                } else {\n                    return ServiceResultEnum.DB_ERROR.getResult();\n                }\n            } else {\n                //订单此时不可执行出库操作\n                if (errorOrderNos.length() > 0 && errorOrderNos.length() < 100) {\n                    return errorOrderNos + "订单的状态不是支付成功或配货完成无法执行出库操作";\n                } else {\n                    return "你选择了太多状态不是支付成功或配货完成的订单，无法执行出库操作";\n                }\n            }\n        }\n        //未查询到数据 返回错误提示\n        return ServiceResultEnum.DATA_NOT_EXIST.getResult();\n    }\n\n    @Override\n    @Transactional\n    public String closeOrder(Long[] ids) {\n        //查询所有的订单 判断状态 修改状态和更新时间\n        List<NewBeeMallOrder> orders = newBeeMallOrderMapper.selectByPrimaryKeys(Arrays.asList(ids));\n        String errorOrderNos = "";\n        if (!CollectionUtils.isEmpty(orders)) {\n            for (NewBeeMallOrder newBeeMallOrder : orders) {\n                // isDeleted=1 一定为已关闭订单\n                if (newBeeMallOrder.getIsDeleted() == 1) {\n                    errorOrderNos += newBeeMallOrder.getOrderNo() + " ";\n                    continue;\n                }\n                //已关闭或者已完成无法关闭订单\n                if (newBeeMallOrder.getOrderStatus() == 4 || newBeeMallOrder.getOrderStatus() < 0) {\n                    errorOrderNos += newBeeMallOrder.getOrderNo() + " ";\n                }\n            }\n            if (StringUtils.isEmpty(errorOrderNos)) {\n                //订单状态正常 可以执行关闭操作 修改订单状态和更新时间\n                if (newBeeMallOrderMapper.closeOrder(Arrays.asList(ids), NewBeeMallOrderStatusEnum.ORDER_CLOSED_BY_JUDGE.getOrderStatus()) > 0) {\n                    return ServiceResultEnum.SUCCESS.getResult();\n                } else {\n                    return ServiceResultEnum.DB_ERROR.getResult();\n                }\n            } else {\n                //订单此时不可执行关闭操作\n                if (errorOrderNos.length() > 0 && errorOrderNos.length() < 100) {\n                    return errorOrderNos + "订单不能执行关闭操作";\n                } else {\n                    return "你选择的订单不能执行关闭操作";\n                }\n            }\n        }\n        //未查询到数据 返回错误提示\n        return ServiceResultEnum.DATA_NOT_EXIST.getResult();\n    }\n}\n'})}),"\n",(0,t.jsxs)(r.h4,{id:"订单管理模块控制层代码实现",children:["订单管理模块控制层代码实现",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#订单管理模块控制层代码实现",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"在 ltd.newbee.mall.api.admin 包中新建 NewBeeAdminOrderAPI 类，在 NewBeeAdminOrderAPI 控制器中新增相关接口的实现代码，最终 NewBeeAdminOrderAPI 类的代码如下："}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package ltd.newbee.mall.api.admin;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiParam;\nimport ltd.newbee.mall.api.admin.param.BatchIdParam;\nimport ltd.newbee.mall.api.admin.vo.NewBeeMallOrderDetailVO;\nimport ltd.newbee.mall.common.ServiceResultEnum;\nimport ltd.newbee.mall.config.annotation.TokenToAdminUser;\nimport ltd.newbee.mall.entity.AdminUserToken;\nimport ltd.newbee.mall.service.NewBeeMallOrderService;\nimport ltd.newbee.mall.util.PageQueryUtil;\nimport ltd.newbee.mall.util.Result;\nimport ltd.newbee.mall.util.ResultGenerator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author 13\n * @qq交流群 796794009\n * @email 2449207463@qq.com\n * @link https://github.com/newbee-ltd\n */\n@RestController\n@Api(value = "v1", tags = "8-5.后台管理系统订单模块接口")\n@RequestMapping("/manage-api/v1")\npublic class NewBeeAdminOrderAPI {\n\n    private static final Logger logger = LoggerFactory.getLogger(NewBeeAdminOrderAPI.class);\n\n    @Resource\n    private NewBeeMallOrderService newBeeMallOrderService;\n\n    /**\n     * 列表\n     */\n    @RequestMapping(value = "/orders", method = RequestMethod.GET)\n    @ApiOperation(value = "订单列表", notes = "可根据订单号和订单状态筛选")\n    public Result list(@RequestParam(required = false) @ApiParam(value = "页码") Integer pageNumber,\n                       @RequestParam(required = false) @ApiParam(value = "每页条数") Integer pageSize,\n                       @RequestParam(required = false) @ApiParam(value = "订单号") String orderNo,\n                       @RequestParam(required = false) @ApiParam(value = "订单状态") Integer orderStatus, @TokenToAdminUser AdminUserToken adminUser) {\n        logger.info("adminUser:{}", adminUser.toString());\n        if (pageNumber == null || pageNumber < 1 || pageSize == null || pageSize < 10) {\n            return ResultGenerator.genFailResult("分页参数异常！");\n        }\n        Map params = new HashMap(8);\n        params.put("page", pageNumber);\n        params.put("limit", pageSize);\n        if (!StringUtils.isEmpty(orderNo)) {\n            params.put("orderNo", orderNo);\n        }\n        if (orderStatus != null) {\n            params.put("orderStatus", orderStatus);\n        }\n        PageQueryUtil pageUtil = new PageQueryUtil(params);\n        return ResultGenerator.genSuccessResult(newBeeMallOrderService.getNewBeeMallOrdersPage(pageUtil));\n    }\n\n    @GetMapping("/orders/{orderId}")\n    @ApiOperation(value = "订单详情接口", notes = "传参为订单号")\n    public Result<NewBeeMallOrderDetailVO> orderDetailPage(@ApiParam(value = "订单号") @PathVariable("orderId") Long orderId, @TokenToAdminUser AdminUserToken adminUser) {\n        logger.info("adminUser:{}", adminUser.toString());\n        return ResultGenerator.genSuccessResult(newBeeMallOrderService.getOrderDetailByOrderId(orderId));\n    }\n\n    /**\n     * 配货\n     */\n    @RequestMapping(value = "/orders/checkDone", method = RequestMethod.PUT)\n    @ApiOperation(value = "修改订单状态为配货成功", notes = "批量修改")\n    public Result checkDone(@RequestBody BatchIdParam batchIdParam, @TokenToAdminUser AdminUserToken adminUser) {\n        logger.info("adminUser:{}", adminUser.toString());\n        if (batchIdParam==null||batchIdParam.getIds().length < 1) {\n            return ResultGenerator.genFailResult("参数异常！");\n        }\n        String result = newBeeMallOrderService.checkDone(batchIdParam.getIds());\n        if (ServiceResultEnum.SUCCESS.getResult().equals(result)) {\n            return ResultGenerator.genSuccessResult();\n        } else {\n            return ResultGenerator.genFailResult(result);\n        }\n    }\n\n    /**\n     * 出库\n     */\n    @RequestMapping(value = "/orders/checkOut", method = RequestMethod.PUT)\n    @ApiOperation(value = "修改订单状态为已出库", notes = "批量修改")\n    public Result checkOut(@RequestBody BatchIdParam batchIdParam, @TokenToAdminUser AdminUserToken adminUser) {\n        logger.info("adminUser:{}", adminUser.toString());\n        if (batchIdParam==null||batchIdParam.getIds().length < 1) {\n            return ResultGenerator.genFailResult("参数异常！");\n        }\n        String result = newBeeMallOrderService.checkOut(batchIdParam.getIds());\n        if (ServiceResultEnum.SUCCESS.getResult().equals(result)) {\n            return ResultGenerator.genSuccessResult();\n        } else {\n            return ResultGenerator.genFailResult(result);\n        }\n    }\n\n    /**\n     * 关闭订单\n     */\n    @RequestMapping(value = "/orders/close", method = RequestMethod.PUT)\n    @ApiOperation(value = "修改订单状态为商家关闭", notes = "批量修改")\n    public Result closeOrder(@RequestBody BatchIdParam batchIdParam, @TokenToAdminUser AdminUserToken adminUser) {\n        logger.info("adminUser:{}", adminUser.toString());\n        if (batchIdParam==null||batchIdParam.getIds().length < 1) {\n            return ResultGenerator.genFailResult("参数异常！");\n        }\n        String result = newBeeMallOrderService.closeOrder(batchIdParam.getIds());\n        if (ServiceResultEnum.SUCCESS.getResult().equals(result)) {\n            return ResultGenerator.genSuccessResult();\n        } else {\n            return ResultGenerator.genFailResult(result);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"1.列表接口负责接收前端传来的分页参数和过滤字段参数，如 pageNumber、pageSize 、orderNo、orderStatus ，分页参数是必传的，另外两个参数需要根据管理员选择的过滤条件来传输，后端在处理完参数后，会将数据总数和对应页面的数据列表查询出来并封装为分页数据返回给前端。实际的查询 SQL 语句在 NewBeeMallOrderMapper.xml 文件中，除了分页参数的过滤外，也针对 order_no 字段和 order_status 进行了过滤，前端请求的参数不同，执行的 SQL 也会去对应的查询该类型的分页记录，获取响应条数的记录和总数之后再进行数据封装，这个接口就是根据前端传的分页参数进行查询并返回分页数据以供前端页面进行数据渲染。"}),"\n",(0,t.jsx)(r.p,{children:"2.配货、出口、关闭订单负责接收前端的状态修改请求，处理前端传输过来的数据后，将这些记录的 order_status 改为对应的订单状态。接收的参数是一个数组，可以同时操作多条记录，只需要在前端将用户选择的记录 id 封装好再传参到后端即可，使用 @RequestBody 将前端传过来的参数封装为数组对象，如果数组为空则直接返回异常提醒，参数验证通过后则调用对应的方法进行数据库操作。"}),"\n",(0,t.jsx)(r.p,{children:"3.详情接口负责处理订单详情页面的数据查询和整理，接收的参数是订单主键 orderId，根据该字段去查询订单表中的内容，之后再去查询该订单所关联的订单项数据，最后将订单数据和订单项数据进行整理和封装并返回给前端。"}),"\n",(0,t.jsxs)(r.h2,{id:"总结",children:["总结",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"至此，后台接口的编码实现及相关知识点都介绍完毕。"}),"\n",(0,t.jsx)(r.p,{children:"今后的日子里该项目会继续优化更新，这本小册也是如此。如果有需要整理的内容，我会继续追加到这本掘金小册中来。当然，小册中的代码是为了知识点讲解，所以可能与开源仓库中的代码有一点小区别，这是正常的，仓库中的代码是最终成品，而小册中每一章节都有各自的代码，随着知识点的深入代码也越来越丰富，希望你有所收获。"})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,a.ah)(),e.components);return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}let s=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F29.API%20%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E4%B9%8B%E8%AE%A2%E5%8D%95%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91.md"]={toc:[{text:"新蜂商城订单处理流程",id:"新蜂商城订单处理流程",depth:2},{text:"表结构设计",id:"表结构设计",depth:2},{text:"订单主表和订单项关联表设计",id:"订单主表和订单项关联表设计",depth:3},{text:"接口实现",id:"接口实现",depth:2},{text:"新建订单类和订单项类和 Mapper 接口",id:"新建订单类和订单项类和-mapper-接口",depth:4},{text:"创建 Mapper 接口的映射文件",id:"创建-mapper-接口的映射文件",depth:4},{text:"业务层代码实现",id:"业务层代码实现",depth:4},{text:"订单管理模块控制层代码实现",id:"订单管理模块控制层代码实现",depth:4},{text:"总结",id:"总结",depth:2}],title:"29.API 接口开发实战之订单管理模块接口开发",headingTitle:"29.API 接口开发实战之订单管理模块接口开发",frontmatter:{}}}}]);