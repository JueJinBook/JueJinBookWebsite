"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79996"],{569139:function(n,e,i){i.r(e),i.d(e,{default:()=>o});var a=i(552676),r=i(740453);function d(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",code:"code",pre:"pre",ul:"ul",li:"li",strong:"strong",blockquote:"blockquote",h4:"h4",img:"img"},(0,r.ah)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"62音频与背景音乐",children:["62.音频与背景音乐",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#62音频与背景音乐",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"在前面我们介绍过小程序一些多媒体组件，音频/音乐、视频、地图、动画、富文本等这些元素能以更强的交互形态向用户传递更加丰富的内容。这一章，我们会把这些元素与JavaScript事件结合起来，让交互不再局限于仅仅只是展示，而会将它们与页面的加载、用户的点击等行为紧密联系；同时这些元素以及控制这些元素的核心就是数据，因此很有必要回顾前面关于数据的存储以及数据类型的操作的内容。"}),"\n",(0,a.jsxs)(e.h2,{id:"101-音频与背景音乐",children:["10.1 音频与背景音乐",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#101-音频与背景音乐",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"要在小程序端实现音乐、音频播放，推荐的音乐格式有m4a、mp3、wav、aac，其他格式可能因为终端（iOS和安卓）的不同而没法播放。音乐音频的来源可以是云存储的CloudID，也可以是内外部链接。值得注意的是，以往的audio组件和AudioContext这两种实现音乐播放的方法已经不再推荐。"}),"\n",(0,a.jsxs)(e.h3,{id:"1011-音乐播放快速入门",children:["10.1.1 音乐播放快速入门",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1011-音乐播放快速入门",children:"#"})]}),"\n",(0,a.jsxs)(e.p,{children:["在小程序里操作音乐媒体，核心就是操作InnerAudioContext实例的属性与调用这个实例的方法，而InnerAudioContext实例我们可以通过",(0,a.jsx)(e.code,{children:"wx.createInnerAudioContext"}),"接口来获取。我们可以在开发者工具的Console里输入以下代码来了解一下InnerAudioContext实例到底有哪些属性与方法："]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const audioCtx = wx.createInnerAudioContext()\naudioCtx.autoplay = true\naudioCtx.src = 'https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/post/springtime.mp3'\nconsole.log('audioCtx对象',audioCtx)\n"})}),"\n",(0,a.jsx)(e.p,{children:"在控制台我们可以看到打印的audioCtx对象有如下属性，在控制台，我们只设置了实例的src属性以及autoplay属性，其他的属性大家可以根据情况来设置："}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"src，音频资源的地址，用于直接播放，支持云文件ID；"}),"\n",(0,a.jsx)(e.li,{children:"startTime，开始播放的位置（单位：s），默认为 0；"}),"\n",(0,a.jsx)(e.li,{children:"autoplay，是否自动开始播放，默认为 false；"}),"\n",(0,a.jsx)(e.li,{children:"loop，是否循环播放，默认为 false；"}),"\n",(0,a.jsx)(e.li,{children:"volume，音量。范围 0~1。默认为 1"}),"\n",(0,a.jsx)(e.li,{children:"playbackRate，播放速度。范围 0.5-2.0，默认为 1。"}),"\n",(0,a.jsx)(e.li,{children:"duration，当前音频的长度（单位 s），只有在当前有合法的 src 时返回（只读，不能修改）；"}),"\n",(0,a.jsx)(e.li,{children:"currentTime，当前音频的播放位置（单位 s）。只有在当前有合法的 src 时返回，时间保留小数点后 6 位（只读）；"}),"\n",(0,a.jsx)(e.li,{children:"paused，当前是是否暂停或停止状态（只读）"}),"\n",(0,a.jsx)(e.li,{children:"buffered，音频缓冲的时间点，仅保证当前播放时间点到此时间点内容已缓冲"}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"当音乐还在播放时"}),"，我们还可以在控制台打印来了解到这个音乐的一些信息，比如："]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'console.log("当前播放的位置",audioCtx.currentTime)\nconsole.log("当前音乐的长度",audioCtx.duration)\nconsole.log("音乐是否在播放",audioCtx.paused)\n'})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:"这里音乐播放的时间是精确到小数点后10多位的十进制值，需要我们把时间换算成60进制，\n以及还有很多个方法，比如我们可以在控制台输入以下命令，来调用这些方法，从而操作音乐的播放："}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"audioCtx.play()       //播放\naudioCtx.pause()      //暂停\naudioCtx.seek(20.134) //跳转到20.134秒处\naudioCtx.destroy()    //关闭音乐\n"})}),"\n",(0,a.jsx)(e.p,{children:"以上的方法的含义，相信大家比较好理解，还有一些监听方法，在后面我们会来介绍："}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"play()，播放"}),"\n",(0,a.jsx)(e.li,{children:"pause()暂停。暂停后的音频再播放会从暂停处开始播放"}),"\n",(0,a.jsx)(e.li,{children:"seek(number)，跳转到指定的时间位置，单位为s，可以精确到小数点后 3 位，即支持 ms 级别精确度；"}),"\n",(0,a.jsx)(e.li,{children:"stop()，停止播放，停止后的音频再播放会从头开始播放。"}),"\n",(0,a.jsx)(e.li,{children:"destroy()，销毁当前实例"}),"\n"]}),"\n",(0,a.jsxs)(e.h3,{id:"1012-音乐的播放与监听",children:["10.1.2 音乐的播放与监听",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1012-音乐的播放与监听",children:"#"})]}),"\n",(0,a.jsxs)(e.h4,{id:"1在小程序端实现音乐的播放",children:["1、在小程序端实现音乐的播放",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1在小程序端实现音乐的播放",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"那我们应该如何把以上的接口应用在小程序当中呢？使用开发者工具新建一个music页面，然后再在music.wxml里面输入以下代码，我们用按钮来绑定事件处理函数："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-xml",children:'<button type="primary" bindtap="audioPlay">播放</button>\n<button type="primary" bindtap="audioPause">暂停</button>\n<button type="primary" bindtap="audioSeek">跳转到指定时间</button>\n<button type="primary" bindtap="audioStart">重新播放</button>\n'})}),"\n",(0,a.jsx)(e.p,{children:"然后再在music.js里输入以下代码，在js文件里，我们用事件处理函数来调用音频的接口："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const audioCtx = wx.createInnerAudioContext()//也可以创建多个音频播放实例，这样可能会出现同时播放多个音乐的情况，你可以按需求来处理\nPage({\n  data: {   \n  },\n  onLoad: function (options) {\n  },\n  onReady: function () {\n    audioCtx.src = 'https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/post/springtime.mp3'\n  },\n\n  audioPlay() {\n    audioCtx.play()\n  },\n  audioPause () {\n    audioCtx.pause()\n  },\n  audioSeek() {\n    audioCtx.seek(20.134)\n  },\n  audioStart() { //音乐的重新播放是没有相应的接口的，但是可以使用seek(0)来实现\n    audioCtx.seek(0)\n  }\n})\n"})}),"\n",(0,a.jsxs)(e.h4,{id:"2音频播放监听事件",children:["2、音频播放监听事件",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2音频播放监听事件",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"小程序还支持音频播放事件的监听，监听事件返回的是callback回调，我们把监听事件归纳整理如下："}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"onWaiting/offWaiting，监听音频加载中事件。当音频因为数据不足，需要停下来加载时会触发"}),"\n",(0,a.jsx)(e.li,{children:"onTimeUpdate/offTimeUpdate，监听音频播放进度更新事件"}),"\n",(0,a.jsx)(e.li,{children:"onStop/offStop，监听音频停止事件"}),"\n",(0,a.jsx)(e.li,{children:"onSeeking/offSeeking，监听音频进行跳转操作的事件"}),"\n",(0,a.jsx)(e.li,{children:"onSeeked/offSeeked，监听音频完成跳转操作的事件"}),"\n",(0,a.jsx)(e.li,{children:"onPlay/offPlay，监听音频播放事件"}),"\n",(0,a.jsx)(e.li,{children:"onPause/offPause，监听音频暂停事件"}),"\n",(0,a.jsx)(e.li,{children:"onError/offError，监听音频播放错误事件"}),"\n",(0,a.jsx)(e.li,{children:"onEnded/offEnded，监听音频自然播放至结束的事件"}),"\n",(0,a.jsx)(e.li,{children:"onCanplay/offCanplay，监听音频进入可以播放状态的事件。但不保证后面可以流畅播放"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"把以下监听事件的代码放到music.js的onReady页面生命周期函数里，我们来监听音乐播放的位置以及音乐的总时长和音乐是否在播放："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"onReady: function () {\n  audioCtx.src = 'https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/post/springtime.mp3'\n  audioCtx.onPlay(() => {\n    console.log(\"音乐正在播放\")\n  })\n  audioCtx.onTimeUpdate(() => {\n    const {currentTime,duration} = audioCtx    \n    this.setData({\n      currentTime,duration\n    })\n    console.log(`当前进度为：${audioCtx.currentTime}音乐播放总时长为：${audioCtx.duration}`);\n  })\n},\n"})}),"\n",(0,a.jsx)(e.p,{children:"以及在music.wxml里添加以下代码，我们把音乐总时长，尤其是音乐播放的当前位置实时渲染在小程序上："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-xml",children:"<view>当前播放位置：{{currentTime}}</view>\n<view>音乐总时长：{{duration}}</view>\n"})}),"\n",(0,a.jsx)(e.p,{children:"我们还可以结合progress进度条组件来显示音乐播放的进度（你也可以自己根据这些能够获取到的数据写一些有意思的动效），方法其实比较简单："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'//在music.wxml添加progress组件\n<progress percent="{{progress}}" show-info stroke-width="3"/>\n\n//在music.js里的onTimeUpdate里添加进度的代码，progress的进度为百分比，计算一下即可\naudioCtx.onTimeUpdate(() => {\n  const {currentTime,duration} = audioCtx   \n  const progress = Math.floor((currentTime /duration)*100) \n  this.setData({\n    currentTime,duration,progress\n  })\n})\n'})}),"\n",(0,a.jsx)(e.p,{children:"如果我们要使用云开发实现一个音乐播放的小程序，只需要把音频文件以及相应的封面存储到云存储，用云数据库来记录音乐的标题、专辑名称、作者等信息和音频文件、封面所在的云存储的地址就可以了，至于小程序端的音乐播放器的控制按钮则需要使用到InnerAudioContext实例的各种方法了，"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://i.hackweek.org/img//10/WX20201023-180857@2x.png",alt:"音乐播放器"})}),"\n",(0,a.jsx)(e.p,{children:"尽管一个音乐播放器有着十分复杂的交互功能，只要我们将功能背后的数据进行有效的拆解以及功能的实现善于转化为函数，开发起来就不那么难了。比如："}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"根据每首音乐的封面来获取相应的背景颜色，可以使用图像拓展能力的获取图片主色调，我们再根据这个主色调使用css进行滤镜、透明的处理，这样封面千变万化，背景颜色也就跟着变化；"}),"\n",(0,a.jsxs)(e.li,{children:["播放模式和播放列表、上一首、下一首，在请求数据库时获取到的播放列表就是一个数组，而数组有index，如果按照顺序上一首或下一首就是index的切换，如果是随机可以使用",(0,a.jsx)(e.code,{children:"Math.floor(Math.random()*(数组长度+1))"}),"来获取随机的index；"]}),"\n",(0,a.jsx)(e.li,{children:"至于转发、喜欢、下载、评论等按钮都可以绑定相应的事件处理函数来处理，在前面的章节已经有相关的介绍了。"}),"\n"]}),"\n",(0,a.jsxs)(e.h3,{id:"1013-背景音乐快速入门",children:["10.1.3 背景音乐快速入门",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1013-背景音乐快速入门",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"当小程序切入后台之后，之前介绍的音频/音乐播放就会停止，如果想要小程序切入后台之后，能够继续播放音频，且音频的播放能够被手机系统自带的音乐播放控件控制（暂停、上一首、下一首），那就需要用到背景音乐了。"}),"\n",(0,a.jsxs)(e.h4,{id:"1背景音乐的权限设置",children:["1、背景音乐的权限设置",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1背景音乐的权限设置",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"如果需要在小程序切后台后继续播放音频，需要在小程序的app.json中配置全局属性requiredBackgroundModes，该属性的类型为数组，支持后台音乐播放和后台定位的设置。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'{\n  "requiredBackgroundModes": ["audio", "location"]\n}\n'})}),"\n",(0,a.jsxs)(e.h4,{id:"2通过打印了解backgroundaudiomanager实例",children:["2、通过打印了解BackgroundAudioManager实例",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2通过打印了解backgroundaudiomanager实例",children:"#"})]}),"\n",(0,a.jsxs)(e.p,{children:["和前面音频播放一样，我们也通过控制台的打印来了解背景音乐的API，要在小程序里操作背景音乐，它的核心是BackgroundAudioManager实例，而BackgroundAudioManager实例可以通过",(0,a.jsx)(e.code,{children:"wx.getBackgroundAudioManager()"}),"来获取。我们可以在开发者工具的Console里输入以下代码来了解一下BackgroundAudioManager实例到底有哪些属性与方法："]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const bgAudio = wx.getBackgroundAudioManager()\nbgAudio.title = '春光美bgm'\nbgAudio.epname = '追风的少年2'\nbgAudio.singer = '张德兰'\nbgAudio.coverImgUrl = 'https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/demo/spring.jpg'\nbgAudio.src = 'https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/post/springtime.mp3'\nconsole.log('bgAudio对象',bgAudio)\n"})}),"\n",(0,a.jsxs)(e.p,{children:["执行之后就能播放背景音乐并在开发者工具的模拟器底部可以控制背景音乐的播放。在控制台我们可以看到打印的bgAudio对象的所有属性与方法，这些属性与方法的具体使用说明可以参考",(0,a.jsx)(e.a,{href:"https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html",target:"_blank",rel:"noopener noreferrer",children:"BackgroundAudioManager技术文档"}),"详细了解。"]}),"\n",(0,a.jsx)(e.p,{children:"我们也可以把以上代码放到小程序的一个页面比如backAudio的onLoad生命周期函数里，在手机上预览或使用真机调试。以下是小程序切入后台后，背景音乐在iOS里的展现的形式："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://i.hackweek.org/img//10/WX20201023-232806@2x.png",alt:"背景音乐在iOS的表现"})})]})}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}let o=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F62.%E9%9F%B3%E9%A2%91%E4%B8%8E%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90.md"]={toc:[{text:"10.1 音频与背景音乐",id:"101-音频与背景音乐",depth:2},{text:"10.1.1 音乐播放快速入门",id:"1011-音乐播放快速入门",depth:3},{text:"10.1.2 音乐的播放与监听",id:"1012-音乐的播放与监听",depth:3},{text:"1、在小程序端实现音乐的播放",id:"1在小程序端实现音乐的播放",depth:4},{text:"2、音频播放监听事件",id:"2音频播放监听事件",depth:4},{text:"10.1.3 背景音乐快速入门",id:"1013-背景音乐快速入门",depth:3},{text:"1、背景音乐的权限设置",id:"1背景音乐的权限设置",depth:4},{text:"2、通过打印了解BackgroundAudioManager实例",id:"2通过打印了解backgroundaudiomanager实例",depth:4}],title:"62.音频与背景音乐",headingTitle:"62.音频与背景音乐",frontmatter:{}}}}]);