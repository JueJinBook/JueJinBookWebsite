"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["92778"],{645982:function(e,n,a){a.r(n),a.d(n,{default:()=>t});var r=a(552676),i=a(740453);function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",h2:"h2",code:"code",pre:"pre"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"temporal-api",children:["Temporal API",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporal-api",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Temporal 是一个表示日期时间的全新 API，对目前的 Date API 的诸多问题进行修正。"}),"\n",(0,r.jsx)(n.p,{children:"它有几个核心概念。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"当前时间：表示此时此刻的时间，位于 Temporal.now 对象。"}),"\n",(0,r.jsx)(n.li,{children:"时点（instant），表示历史上某个唯一时间，其中 Temporal.Instant 对象表示时间戳，Temporal.ZonedDateTime 表示带有时区的日期时间。"}),"\n",(0,r.jsxs)(n.li,{children:["时钟时间（wall-clock times），表示本地时间，包含以下几个对象，不涉及时区。","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Temporal.PlainDateTime：完整的日期和时间。"}),"\n",(0,r.jsx)(n.li,{children:"Temporal.PlainDate：仅限于日期。"}),"\n",(0,r.jsx)(n.li,{children:"Temporal.PlainYearMonth：仅限于年月。"}),"\n",(0,r.jsx)(n.li,{children:"Temporal.PlainMonthDay：仅限于月和日。"}),"\n",(0,r.jsx)(n.li,{children:"Temporal.PlainTime：不包含日期的时间。"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"持续时间（durations），表示两个时间点之间的差异，位于 Temporal.Duration 对象。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"temporalnow",children:["Temporal.Now",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalnow",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.Now"}),"表示当前系统的准确时间。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Temporal.Now.instant()- 获取当前系统准确时间"}),"\n",(0,r.jsx)(n.li,{children:"Temporal.Now.timeZoneId()- 获取当前系统时区"}),"\n",(0,r.jsx)(n.li,{children:"Temporal.Now.zonedDateTimeISO()- 获取系统时区和 ISO-8601 日历中的当前日期和挂钟时间"}),"\n",(0,r.jsx)(n.li,{children:"Temporal.Now.plainDateISO()- 获取系统时区和 ISO-8601 日历中的当前日期"}),"\n",(0,r.jsx)(n.li,{children:"Temporal.Now.plainTimeISO()- 获取系统时区和 ISO-8601 日历中的当前挂钟时间"}),"\n",(0,r.jsx)(n.li,{children:"Temporal.Now.plainDateTimeISO()- 与上面相同，但返回 ISO-8601 日历中的日期时间"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// 返回 UTC 的当前时间\nTemporal.Now.instant().toString()\n\n// 系统时区的当前时间\nTemporal.Now.plainDateTimeISO() // 2025-01-22T11:46:36.144\n\n// 当前时间对应 America/New_York 时区的时间\nTemporal.Now.plainDateTimeISO(\"America/New_York\") // 2025-01-22T05:47:02.555\n\n// 返回某个时区的当前日期时间\nTemporal.Now.zonedDateTimeISO('Asia/Shanghai').toString()\n\n// 返回 ISO 格式当前日期时间\nTemporal.Now.plainDateTimeISO().toString()\n\n// 返回 ISO 格式的当前时间，不含日期\nTemporal.Now.plainTimeISO().toString()\n"})}),"\n",(0,r.jsx)(n.p,{children:"下面的例子是获取指定时区的当前时间。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const now = Temporal.Now.zonedDateTimeISO('America/New_York');\nconsole.log(now.toString());\n"})}),"\n",(0,r.jsx)(n.p,{children:"下面的例子是获取当前时间对应的农历年。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const currentYear = Temporal.Now.plainDateISO().withCalendar("chinese").year;\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"temporalinstant",children:["Temporal.Instant",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalinstant",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.Instant"}),"表示某个固定的时点。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const instant = Temporal.Instant.from('1969-07-20T20:17Z');\ninstant.toString(); // => '1969-07-20T20:17:00Z'\ninstant.epochMilliseconds; // => -14182980000\n\n// 某个 Unix 时间戳对应的时点\nconst launch = Temporal.Instant.fromEpochMilliseconds(1851222399924);\nconst now = Temporal.Now.instant();\nconst duration = now.until(launch, { smallestUnit: \"hour\" });\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"temporalzoneddatetime",children:["Temporal.ZonedDateTime",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalzoneddatetime",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.ZonedDateTime"}),"表示某个时区的时间。它会在 ISO8601 的标准格式后面，添加时区后缀和历法后缀。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"2020-08-05T20:06:13+09:00[Asia/Tokyo][u-ca=japanese]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面示例中，",(0,r.jsx)(n.code,{children:"2020-08-05T20:06:13+09:00"}),"是 ISO8601 标准格式，",(0,r.jsx)(n.code,{children:"[Asia/Tokyo]"}),"是时区后缀，",(0,r.jsx)(n.code,{children:"[u-ca=japanese]"}),"是历法后缀，表示采用日本历法。"]}),"\n",(0,r.jsx)(n.p,{children:"默认的历法是 ISO8601 规定的公历，可以省略不写。"}),"\n",(0,r.jsxs)(n.p,{children:["下面是使用",(0,r.jsx)(n.code,{children:"Temporal.ZonedDateTime.from()"}),"新建 ZonedDateTime 实例对象的例子。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const zonedDateTime = Temporal.ZonedDateTime.from({\n  timeZone: 'America/Los_Angeles',\n  year: 1995,\n  month: 12,\n  day: 7,\n  hour: 3,\n  minute: 24,\n  second: 30,\n  millisecond: 0,\n  microsecond: 3,\n  nanosecond: 500\n}); // => 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["下面是使用",(0,r.jsx)(n.code,{children:"Temporal.ZonedDateTime.compare()"}),"比较两个 ZonedDateTime 实例对象的例子。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const one = Temporal.ZonedDateTime.from('2020-11-01T01:45-07:00[America/Los_Angeles]');\nconst two = Temporal.ZonedDateTime.from('2020-11-01T01:15-08:00[America/Los_Angeles]');\n\nTemporal.ZonedDateTime.compare(one, two);\n// -1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面示例中，",(0,r.jsx)(n.code,{children:"Temporal.ZonedDateTime.compare()"}),"返回",(0,r.jsx)(n.code,{children:"-1"}),"，表示第一个时间小于（即早于）第二个时间。如果返回",(0,r.jsx)(n.code,{children:"1"}),"，表示第一个时间大于第二个时间；返回",(0,r.jsx)(n.code,{children:"0"}),"，表示两个时间相等。"]}),"\n",(0,r.jsx)(n.p,{children:"ZonedDateTime 实例对象有以下属性。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"hoursInDay：指定时区的某一天一共有多少个小时，主要用来处理夏令时。"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"Temporal.ZonedDateTime.from('2020-01-01T12:00-08:00[America/Los_Angeles]').hoursInDay;\n// 24\nTemporal.ZonedDateTime.from('2020-03-08T12:00-07:00[America/Los_Angeles]').hoursInDay;\n// 23\nTemporal.ZonedDateTime.from('2020-11-01T12:00-08:00[America/Los_Angeles]').hoursInDay;\n// 25\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"daysInYear"}),"\n",(0,r.jsx)(n.li,{children:"inLeapYear"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"ZonedDateTime 实例对象有以下方法。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:".withTimeZone()：切换时区。"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"zdt = Temporal.ZonedDateTime.from('1995-12-07T03:24:30+09:00[Asia/Tokyo]');\nzdt.toString(); // => '1995-12-07T03:24:30+09:00[Asia/Tokyo]'\nzdt.withTimeZone('Africa/Accra').toString(); // => '1995-12-06T18:24:30+00:00[Africa/Accra]'\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"add()：增加时间。"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"zdt = Temporal.ZonedDateTime.from('2020-03-08T00:00-08:00[America/Los_Angeles]');\n\n// 增加一天\nlaterDay = zdt.add({ days: 1 });\n// 2020-03-09T00:00:00-07:00[America/Los_Angeles]\n// 注意：时区改变了，表示洛杉矶这个日期处于夏令时，比正常情况早一个小时\n\nlaterDay.since(zdt, { largestUnit: 'hour' }).hours;\n// 23\n// 当天只有23小时\n\nlaterHours = zdt.add({ hours: 24 });\n// 2020-03-09T01:00:00-07:00[America/Los_Angeles]\nlaterHours.since(zdt, { largestUnit: 'hour' }).hours; // 24\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:".until()：计算两个时间之间的差异。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"temporalplaindate",children:["Temporal.PlainDate",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalplaindate",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.PlainDate"}),"表示与时区无关的日期。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const date = Temporal.PlainDate.from({ year: 2006, month: 8, day: 24 }); // => 2006-08-24\ndate.year; // => 2006\ndate.inLeapYear; // => false\ndate.toString(); // => '2006-08-24'\n"})}),"\n",(0,r.jsx)(n.p,{children:"下面的例子是计算某个日期以后的时间。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const date = Temporal.PlainDate.from('2024-01-01');\nconst newDate = date.add({ days: 10 });\nconsole.log(newDate.toString()); // Outputs '2024-01-11'\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"temporalplaintime",children:["Temporal.PlainTime",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalplaintime",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.PlainTime"}),"表示与时区无关的某个时点。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const time = Temporal.PlainTime.from({\n  hour: 19,\n  minute: 39,\n  second: 9,\n  millisecond: 68,\n  microsecond: 346,\n  nanosecond: 205\n}); // => 19:39:09.068346205time.second; // => 9\ntime.toString(); // => '19:39:09.068346205'\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"temporalplaindatetime",children:["Temporal.PlainDateTime",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalplaindatetime",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.PlainDateTime"}),"表示时区无关的日期时间。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const dateTime = Temporal.PlainDateTime.from({\n  year: 1995,\n  month: 12,\n  day: 7,\n  hour: 15\n}); // => 1995-12-07T15:00:00\nconst dateTime1 = dateTime.with({\n  minute: 17,\n  second: 19\n}); // => 1995-12-07T15:17:19\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"temporalplainyearmonth",children:["Temporal.PlainYearMonth",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalplainyearmonth",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.PlainYearMonth"}),"表示不含日期的年月。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const yearMonth = Temporal.PlainYearMonth.from({ year: 2020, month: 10 }); // => 2020-10\nyearMonth.daysInMonth; // => 31\nyearMonth.daysInYear; // => 366\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"temporalplainmonthday",children:["Temporal.PlainMonthDay",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalplainmonthday",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.PlainMonthDay"}),"表示没有年份的月和日。"]}),"\n",(0,r.jsx)(n.p,{children:"下面是计算生日的例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const birthday = Temporal.PlainMonthDay.from("12-15");\n// 或者写成\n// const birthday = Temporal.PlainMonthDay.from({ month: 12, day: 15 })\n\nconst birthdayIn2030 = birthday.toPlainDate({ year: 2030 });\n\nbirthdayIn2030.toString() // 2030-12-15\nbirthdayIn2030.dayOfWeek // 7\n'})}),"\n",(0,r.jsx)(n.p,{children:"下面是农历一月一日（大年初一）的例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const chineseNewYear = Temporal.PlainMonthDay.from({\n  monthCode: "M01",\n  day: 1,\n  calendar: "chinese",\n});\n\nconst currentYear = Temporal.Now.plainDateISO().withCalendar("chinese").year;\n\n// 获取下一个春节\nlet nextCNY = chineseNewYear.toPlainDate({ year: currentYear });\n// 如果 nextCNY 早于当前时间，则向后移动一年\nif (Temporal.PlainDate.compare(nextCNY, Temporal.Now.plainDateISO()) <= 0) {\n  nextCNY = nextCNY.add({ years: 1 });\n}\n\nnextCNY.withCalendar("iso8601").toLocaleString() // 1/29/2025\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"temporalduration",children:["Temporal.Duration",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalduration",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.Duration"}),"表示时长。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const duration = Temporal.Duration.from({\n  hours: 130,\n  minutes: 20\n});\n\nduration.total({ unit: 'second' }); // => 469200\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"temporaltimezone",children:["Temporal.TimeZone",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporaltimezone",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.TimeZone"}),"表示某个时区。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const timeZone = Temporal.TimeZone.from('Africa/Cairo');\ntimeZone.getInstantFor('2000-01-01T00:00'); // => 1999-12-31T22:00:00Z\ntimeZone.getPlainDateTimeFor('2000-01-01T00:00Z'); // => 2000-01-01T02:00:00\ntimeZone.getPreviousTransition(Temporal.Now.instant()); // => 2014-09-25T21:00:00Z\ntimeZone.getNextTransition(Temporal.Now.instant()); // => null\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"temporalcalendar",children:["Temporal.Calendar",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalcalendar",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Temporal.Calendar"}),"表示某个日历系统。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const cal = Temporal.Calendar.from('iso8601');\nconst date = cal.dateFromFields({ year: 1999, month: 12, day: 31 }, {});\ndate.monthsInYear; // => 12\ndate.daysInYear; // => 365\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"temporalduration-1",children:["Temporal.Duration",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#temporalduration-1",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Temporal.Duration 表示一个持续的时间对象。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const durations = [\n  Temporal.Duration.from({ hours: 1 }),\n  Temporal.Duration.from({ hours: 2 }),\n  Temporal.Duration.from({ hours: 1, minutes: 30 }),\n  Temporal.Duration.from({ hours: 1, minutes: 45 }),\n];\n\ndurations.sort(Temporal.Duration.compare);\nconsole.log(durations.map((d) => d.toString()));\n// [ 'PT1H', 'PT1H30M', 'PT1H45M', 'PT2H' ]\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://tc39.es/proposal-temporal/docs/",target:"_blank",rel:"noopener noreferrer",children:"Temporal documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.timetime.in/blog/js-dates-finally-fixed/",target:"_blank",rel:"noopener noreferrer",children:"JS Dates Are About to Be Fixed"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/blog/javascript-temporal-is-coming/",target:"_blank",rel:"noopener noreferrer",children:"JavaScript Temporal is coming"})}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}let t=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2FTemporal%20API.md"]={toc:[{text:"Temporal.Now",id:"temporalnow",depth:2},{text:"Temporal.Instant",id:"temporalinstant",depth:2},{text:"Temporal.ZonedDateTime",id:"temporalzoneddatetime",depth:2},{text:"Temporal.PlainDate",id:"temporalplaindate",depth:2},{text:"Temporal.PlainTime",id:"temporalplaintime",depth:2},{text:"Temporal.PlainDateTime",id:"temporalplaindatetime",depth:2},{text:"Temporal.PlainYearMonth",id:"temporalplainyearmonth",depth:2},{text:"Temporal.PlainMonthDay",id:"temporalplainmonthday",depth:2},{text:"Temporal.Duration",id:"temporalduration",depth:2},{text:"Temporal.TimeZone",id:"temporaltimezone",depth:2},{text:"Temporal.Calendar",id:"temporalcalendar",depth:2},{text:"Temporal.Duration",id:"temporalduration-1",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"Temporal API",headingTitle:"Temporal API",frontmatter:{}}}}]);