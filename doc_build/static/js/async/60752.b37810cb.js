"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["60752"],{976471:function(e,n,d){d.r(n),d.d(n,{default:()=>u});var c=d(552676),i=d(740453);let s=d.p+"static/image/277686d5160ba14fc9b978428e8acf5f.8b0b41b5.webp",l=d.p+"static/image/59c1931dc6a8ccf41349e376f87fa58f.491e2bd3.webp",r=d.p+"static/image/a5477c82b92f1275ec9feeccaead675c.a3884c18.webp",h=d.p+"static/image/7ba3c3956b37bc3f0134340ae92eabb9.597c8e64.webp",x=d.p+"static/image/f0aa770258aba6807f5a067071322068.9716d516.webp",o=d.p+"static/image/0255fe4982af84a1e66d553d32ac0240.276cb2fe.webp",a=d.p+"static/image/49dcbbb9e2d88d9c69002b4e78a9db9a.7a965ee6.webp",j=d.p+"static/image/37839d2ac4b39a7ca91f17f1b8877ac2.dcb46be4.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",ol:"ol",li:"li",img:"img",strong:"strong",h3:"h3"},(0,i.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"5渲染器数组子节点的-diff-算法",children:["5.渲染器：数组子节点的 diff 算法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5渲染器数组子节点的-diff-算法",children:"#"})]}),"\n",(0,c.jsxs)(n.h2,{id:"前言",children:["前言",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"上一节，我们介绍了关于新旧子节点不同为数组的情况下的更新过程，下面将接着上节的内容继续介绍如果子节点都是数组的情况，那么更新过程会变成什么样呢？"}),"\n",(0,c.jsxs)(n.h2,{id:"1-从头比对",children:["1. 从头比对",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-从头比对",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"Vue 3"})," 的 ",(0,c.jsx)(n.code,{children:"diff"})," 算法第一步就是进行新老节点从头比对的方式来判断是否是同类型的节点："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized) => {\n  let i = 0\n  const l2 = c2.length\n  // 旧节点的尾部标记位\n  let e1 = c1.length - 1\n  // 新节点的尾部标记位\n  let e2 = l2 - 1\n  // 从头部开始比对\n  // (a b) c\n  // (a b) d e\n  while (i <= e1 && i <= e2) {\n    const n1 = c1[i]\n    const n2 = (c2[i] = optimized\n      ? cloneIfMounted(c2[i] as VNode)\n      : normalizeVNode(c2[i]))\n    // 如果是 sameVnode 则递归执行 patch  \n    if (isSameVNodeType(n1, n2)) {\n      patch(n1, n2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized)\n    } else {\n      break\n    }\n    i++\n  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"这里有几个变量需要说明一下："}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"i"})," 代表的是头部的标记位；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"e1"})," 代表的是旧的子节点的尾部标记位；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"e2"})," 代表的是新的子节点的尾部标记位。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["从头比对就是通过不断移动 ",(0,c.jsx)(n.code,{children:"i"})," 这个头部标记位来判断对应的节点是否是 ",(0,c.jsx)(n.code,{children:"sameVnode"}),"。如果是，则进行递归 ",(0,c.jsx)(n.code,{children:"patch"})," 操作，递归 ",(0,c.jsx)(n.code,{children:"patch"})," 就是继续进入到我们上一小节的内容。如果不满足条件，则退出头部比对，进入从尾比对流程。"]}),"\n",(0,c.jsxs)(n.h2,{id:"2-从尾比对",children:["2. 从尾比对",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-从尾比对",children:"#"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized) => {\n  let i = 0\n  const l2 = c2.length\n  // 旧节点的尾部标记位\n  let e1 = c1.length - 1\n  // 新节点的尾部标记位\n  let e2 = l2 - 1\n  // 从头部开始比对\n  // ...\n  // 从尾部开始比对\n  // a (b c)\n  // d e (b c)\n  while (i <= e1 && i <= e2) {\n    const n1 = c1[e1]\n    const n2 = (c2[i] = optimized\n      ? cloneIfMounted(c2[i] as VNode)\n      : normalizeVNode(c2[i]))\n    // 如果是 sameVnode 则递归执行 patch  \n    if (isSameVNodeType(n1, n2)) {\n      patch(n1, n2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized)\n    } else {\n      break\n    }\n    e1--\n    e2--\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["从尾比对就是通过不断移动新旧节点 ",(0,c.jsx)(n.code,{children:"e1"})," 和 ",(0,c.jsx)(n.code,{children:"e2"})," 的尾部指针来判断对应的节点是否是 ",(0,c.jsx)(n.code,{children:"sameVnode"}),"。如果是则进行递归 ",(0,c.jsx)(n.code,{children:"patch"})," 操作，递归 ",(0,c.jsx)(n.code,{children:"patch"})," 也是继续进入到我们上一小节的内容。如果不满足条件，则退出头部比对，进入后续流程。"]}),"\n",(0,c.jsxs)(n.h2,{id:"3-新增节点",children:["3. 新增节点",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-新增节点",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"假设我们有这样一个旧列表："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<ul>\n  <li key="a">a</li>\n  <li key="b">b</li>\n  <li key="c">c</li>\n  <li key="d">d</li>\n</ul>\n'})}),"\n",(0,c.jsx)(n.p,{children:"新列表的变更是在中间插入了一个新节点："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<ul>\n  <li key="a">a</li>\n  <li key="b">b</li>\n  <li key="b">e</li>\n  <li key="c">c</li>\n  <li key="d">d</li>\n</ul>\n'})}),"\n",(0,c.jsx)(n.p,{children:"那么先进入第一步头部比对流程："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["第一步执行时，会完成对 ",(0,c.jsx)(n.code,{children:"a"})," 和 ",(0,c.jsx)(n.code,{children:"b"})," 头部这 2 个节点进行 ",(0,c.jsx)(n.code,{children:"patch"}),"。当 ",(0,c.jsx)(n.code,{children:"i = 2"})," 时，由于此时的 ",(0,c.jsx)(n.code,{children:"c"})," 和 ",(0,c.jsx)(n.code,{children:"e"})," 节点的 ",(0,c.jsx)(n.code,{children:"key"})," 不一样，所以退出了头部比对流程，进入尾部比对："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["第二步执行时，会完成对 ",(0,c.jsx)(n.code,{children:"c"})," 和 ",(0,c.jsx)(n.code,{children:"d"})," 尾部这 2 个节点进行 ",(0,c.jsx)(n.code,{children:"patch"}),"。当 ",(0,c.jsx)(n.code,{children:"e1 = 1"})," 时，由于",(0,c.jsx)(n.code,{children:"i > e1"}),"，所以退出了尾部比对流程。肉眼可见，此时的情况是新节点多了个 ",(0,c.jsx)(n.code,{children:"e"})," 节点的情况，所以我们需要添加多余的剩余节点："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized) => {\n  let i = 0\n  const l2 = c2.length\n  // 旧节点的尾部标记位\n  let e1 = c1.length - 1\n  // 新节点的尾部标记位\n  let e2 = l2 - 1\n  // 从头部开始必须\n  // ...\n  // 从尾部开始比对\n  // ...\n  // 如果有多余的新节点，则执行新增逻辑\n  if (i > e1) {\n    if (i <= e2) {\n      const nextPos = e2 + 1\n      const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor\n      while (i <= e2) {\n        // 新增新节点\n        patch(null, c2[i], container, anchor, parentComponent, parentSuspense, isSVG)\n        i++\n      }\n    }\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"4-删除节点",children:["4. 删除节点",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-删除节点",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"类比新增节点的情况，假设我们有这样一个旧列表："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<ul>\n  <li key="a">a</li>\n  <li key="b">b</li>\n  <li key="b">e</li>\n  <li key="c">c</li>\n  <li key="d">d</li>\n</ul>\n'})}),"\n",(0,c.jsx)(n.p,{children:"新列表的变更是在中间删除了一个旧节点："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<ul>\n  <li key="a">a</li>\n  <li key="b">b</li>\n  <li key="c">c</li>\n  <li key="d">d</li>\n</ul>\n'})}),"\n",(0,c.jsx)(n.p,{children:"那么先进入第一步头部比对流程："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["第一步执行时，会完成对\xa0",(0,c.jsx)(n.code,{children:"a"}),"\xa0和\xa0",(0,c.jsx)(n.code,{children:"b"}),"\xa0头部这 2 个节点进行\xa0",(0,c.jsx)(n.code,{children:"patch"}),"。当\xa0",(0,c.jsx)(n.code,{children:"i = 2"}),"\xa0时，由于此时的\xa0",(0,c.jsx)(n.code,{children:"e"}),"\xa0和\xa0",(0,c.jsx)(n.code,{children:"c"}),"\xa0节点的\xa0",(0,c.jsx)(n.code,{children:"key"}),"\xa0不一样，所以退出了头部比对流程，进入尾部比对："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["第二步执行时，会完成对 ",(0,c.jsx)(n.code,{children:"c"})," 和 ",(0,c.jsx)(n.code,{children:"d"})," 尾部这 2 个节点进行 ",(0,c.jsx)(n.code,{children:"patch"}),"。当 ",(0,c.jsx)(n.code,{children:"e2 = 1"})," 时，由于",(0,c.jsx)(n.code,{children:"i > e2"}),"，所以退出了尾部比对流程。肉眼可见，此时的情况是新节点少了个 ",(0,c.jsx)(n.code,{children:"e"})," 节点的情况，所以我们需要删除节点 ",(0,c.jsx)(n.code,{children:"e"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized) => {\n  let i = 0\n  const l2 = c2.length\n  // 旧节点的尾部标记位\n  let e1 = c1.length - 1\n  // 新节点的尾部标记位\n  let e2 = l2 - 1\n  // 从头部开始比对\n  // ...\n  // 从尾部开始比对\n  // ...\n  // 如果有多余的新节点，则执行新增逻辑\n  // ...\n  // 如果有多余的旧节点，则执行卸载逻辑\n  else if (i > e2) {\n    while (i <= e1) {\n      // 卸载节点\n      unmount(c1[i], parentComponent, parentSuspense, true)\n      i++\n    }\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"5-未知子序列",children:["5. 未知子序列",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-未知子序列",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["经过步骤 1、2 的操作后如果可以直接进入步骤 3、4 那是非常方便的操作了，直接进行多余删除缺少新增的操作。如果步骤 3、4 的条件都不满足的情况，那么 ",(0,c.jsx)(n.code,{children:"Vue"})," 是如何处理的呢？再来看这样一个例子。"]}),"\n",(0,c.jsx)(n.p,{children:"旧子节点："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<ul>\n  <li key="a">a</li>\n  <li key="b">b</li>\n  <li key="c">c</li>\n  <li key="d">d</li>\n  <li key="e">e</li>\n  <li key="f">f</li>\n  <li key="g">g</li>\n  <li key="h">h</li>\n</ul>\n'})}),"\n",(0,c.jsx)(n.p,{children:"新子节点："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<ul>\n  <li key="a">a</li>\n  <li key="b">b</li>\n  <li key="e">e</li>\n  <li key="c">c</li>\n  <li key="d">d</li>\n  <li key="i">i</li>\n  <li key="g">g</li>\n  <li key="h">h</li>\n</ul>\n'})}),"\n",(0,c.jsx)(n.p,{children:"此时经过步骤 1、2 后的结果可以表示为如下图："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["这种情况，既不满足 ",(0,c.jsx)(n.code,{children:"i > e1"})," 也不满足 ",(0,c.jsx)(n.code,{children:"i > e2"})," 的条件，所以对于这种情况应该如何处理呢？我们知道 ",(0,c.jsx)(n.code,{children:"DOM"})," 更新的性能优劣关系大致为：",(0,c.jsx)(n.code,{children:"属性更新"})," > ",(0,c.jsx)(n.code,{children:"位置移动"})," > ",(0,c.jsx)(n.code,{children:"增删节点"}),"。所以，我们需要尽可能地复用老节点，做属性更新，减少移动次数和增删节点的次数。"]}),"\n",(0,c.jsx)(n.p,{children:"那么上述更新策略假设有这样 2 种方式。"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"c"})," 和 ",(0,c.jsx)(n.code,{children:"d"})," 节点不动，只做 ",(0,c.jsx)(n.code,{children:"patch"}),"，",(0,c.jsx)(n.code,{children:"e"})," 节点 ",(0,c.jsx)(n.code,{children:"patch"})," 后移动到 ",(0,c.jsx)(n.code,{children:"c"})," 节点前面，删除 ",(0,c.jsx)(n.code,{children:"f"})," 节点，然后在 ",(0,c.jsx)(n.code,{children:"d"})," 节点后面添加 ",(0,c.jsx)(n.code,{children:"i"})," 节点。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"e"})," 节点不动，只做 ",(0,c.jsx)(n.code,{children:"patch"}),"，",(0,c.jsx)(n.code,{children:"c"})," 和 ",(0,c.jsx)(n.code,{children:"d"})," 节点 ",(0,c.jsx)(n.code,{children:"patch"})," 后移动到 ",(0,c.jsx)(n.code,{children:"e"})," 节点后面，删除 ",(0,c.jsx)(n.code,{children:"f"})," 节点，然后在 ",(0,c.jsx)(n.code,{children:"d"})," 节点后面添加 ",(0,c.jsx)(n.code,{children:"i"})," 节点。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["根据上面的性能优劣关系，我们需要尽可能多地保障最多的公共子节点位置不变，只做 ",(0,c.jsx)(n.code,{children:"patch"})," 更新。然后找出多余的节点删除，找出新的节点添加，找出有需要移动的节点移动。"]}),"\n",(0,c.jsxs)(n.p,{children:["当需要进行移动操作时，那么这个问题就变成了求取新旧子树上的",(0,c.jsx)(n.strong,{children:"最长公共子序列"}),"。当知道了最长公共子序列，所有的操作就可以简化为："]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:"如果节点在新节点中，不在旧节点中，那么新增节点。"}),"\n",(0,c.jsx)(n.li,{children:"如果节点在旧节点中，不在新节点中，那么删除节点。"}),"\n",(0,c.jsx)(n.li,{children:"如果节点既在旧节点中，也在新节点中，那么更新。"}),"\n",(0,c.jsx)(n.li,{children:"如果节点需要移动，那么求取最长公共子序列后，进行最小位置移动。"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["接下来看看 ",(0,c.jsx)(n.code,{children:"Vue"})," 是如何实现上述能力的。"]}),"\n",(0,c.jsxs)(n.h3,{id:"构造新老节点位置映射-keytonewindexmap",children:["构造新老节点位置映射 keyToNewIndexMap",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构造新老节点位置映射-keytonewindexmap",children:"#"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// 旧子序列开始位置\nconst s1 = i\n// 新子序列开始位置\nconst s2 = i\n\n// 5.1 构建 key:index 关系索引 map\nconst keyToNewIndexMap = new Map()\nfor (i = s2; i <= e2; i++) {\n  const nextChild = (c2[i] = optimized\n    ? cloneIfMounted(c2[i] as VNode)\n    : normalizeVNode(c2[i]))\n  if (nextChild.key != null) {\n    keyToNewIndexMap.set(nextChild.key, i)\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["这里的新旧子节点开始位置通过 ",(0,c.jsx)(n.code,{children:"s1"})," 和 ",(0,c.jsx)(n.code,{children:"s2"})," 作为标记，然后开始进行构造新老节点位置映射，这里新节点 ",(0,c.jsx)(n.code,{children:"key"})," -> ",(0,c.jsx)(n.code,{children:"index"})," 关系的索引图是保存在了 ",(0,c.jsx)(n.code,{children:"keyToNewIndexMap"})," 这样一个 ",(0,c.jsx)(n.code,{children:"Map"})," 结构中，其中的 ",(0,c.jsx)(n.code,{children:"key"})," 就是新节点的 ",(0,c.jsx)(n.code,{children:"key"})," 值，而 ",(0,c.jsx)(n.code,{children:"value"})," 则是旧节点对应的位置关系 ",(0,c.jsx)(n.code,{children:"index"}),"。这一步完成后，生成的 ",(0,c.jsx)(n.code,{children:"keyToNewIndexMap"})," 结果可以表示为："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"keyToNewIndexMap = {e: 2, c: 3, d: 4, i: 5}\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:"image.png"})}),"\n",(0,c.jsxs)(n.h3,{id:"继续处理旧节点",children:["继续处理旧节点",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#继续处理旧节点",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["有了上面的 ",(0,c.jsx)(n.code,{children:"keyToNewIndexMap"})," 新节点的索引图，接下来我们就需要遍历旧的节点，寻找旧节点在新节点中对应的位置信息，如果找到则做更新，找不到则移除。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// 记录新节点已更新的数目\nlet patched = 0\n// 记录新节点还有多少个没有更新\nconst toBePatched = e2 - s2 + 1\n// 标记是否有必要进行节点的位置移动\nlet moved = false\n// 标记是否有节点进行了位置移动\nlet maxNewIndexSoFar = 0\n// 记录新节点在旧节点中的位置数组\nconst newIndexToOldIndexMap = new Array(toBePatched)\n// newIndexToOldIndexMap 全部置为 0\nfor (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0\n// 开始遍历旧子节点\nfor (i = s1; i <= e1; i++) {\n  // prevChild 代表旧节点\n  const prevChild = c1[i]\n  // 还有多余的旧节点，则删除\n  if (patched >= toBePatched) {\n    unmount(prevChild, parentComponent, parentSuspense, true)\n    continue\n  }\n  // 记录旧节点在新节点中的位置数组\n  let newIndex = keyToNewIndexMap.get(prevChild.key)\n  \n  // 如果旧节点不存在于新节点中，则删除该节点\n  if (newIndex === undefined) {\n    unmount(prevChild, parentComponent, parentSuspense, true)\n  } else {\n    // newIndexToOldIndexMap 中元素为 0 表示着新节点不存在于旧节点中\n    newIndexToOldIndexMap[newIndex - s2] = i + 1\n    // 默认不移动的话，所有相同节点都是增序排列的\n    // 如果有移动，必然出现节点降序的情况\n    if (newIndex >= maxNewIndexSoFar) {\n      maxNewIndexSoFar = newIndex\n    } else {\n      moved = true\n    }\n    // 更新节点\n    patch(\n      prevChild,\n      c2[newIndex] as VNode,\n      container,\n      null,\n      parentComponent,\n      parentSuspense,\n      isSVG,\n      slotScopeIds,\n      optimized\n    )\n    // 记录更新的数量\n    patched++\n  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"我们简单来总结一下这一步的一些核心操作。"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Step 1："})," 定义一个初始长度为新节点数组长度且默认值全为 0 的变量 ",(0,c.jsx)(n.code,{children:"newIndexToOldIndexMap"}),"，记录新节点中的元素在旧节点中的位置关系。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Step 2："})," 遍历旧的节点数组，如果旧节点不存在于新节点中，则表示旧的节点其实是多余的节点，需要被移除。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Step 3："})," 如果旧节点存在于新节点数组中，则将它在旧子序列中的位置信息记录到 ",(0,c.jsx)(n.code,{children:"newIndexToOldIndexMap"})," 中，同时根据 ",(0,c.jsx)(n.code,{children:"newIndex"})," 是否大于 ",(0,c.jsx)(n.code,{children:"maxNewIndexSoFar"})," 来判断是否有节点移动。"]}),"\n",(0,c.jsxs)(n.p,{children:["这里我们结合个例子来说明。假如旧节点信息为 ",(0,c.jsx)(n.code,{children:"abc"}),"、新节点为 ",(0,c.jsx)(n.code,{children:"cab"}),"，当旧节点遍历到 ",(0,c.jsx)(n.code,{children:"c"})," 节点时，此时的",(0,c.jsx)(n.code,{children:"newIndex"})," 的值为 ",(0,c.jsx)(n.code,{children:"0"})," 而 ",(0,c.jsx)(n.code,{children:"maxNewIndexSoFar"})," 的值为 ",(0,c.jsx)(n.code,{children:"2"}),"。这就意味着此时的 ",(0,c.jsx)(n.code,{children:"c"})," 节点并不是升序位于 ",(0,c.jsx)(n.code,{children:"ab"})," 节点之后的，因此需要标记为有需要移动的节点。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Step 4："})," 更新相同节点。"]}),"\n",(0,c.jsxs)(n.p,{children:["经过上面的一系列操作，我们最终得到了一个 ",(0,c.jsx)(n.code,{children:"newIndexToOldIndexMap"})," 和一个 ",(0,c.jsx)(n.code,{children:"moved"})," 两个变量 ，这两个变量将在下文的移动和新增节点中被使用。"]}),"\n",(0,c.jsx)(n.p,{children:"我们来看一下示例处理后的结果，如下图所示："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["此时 ",(0,c.jsx)(n.code,{children:"c"}),"、",(0,c.jsx)(n.code,{children:"d"}),"、",(0,c.jsx)(n.code,{children:"e"})," 因为是相同节点，所以进行 ",(0,c.jsx)(n.code,{children:"patch"})," 更新，",(0,c.jsx)(n.code,{children:"f"})," 节点因为不存在于新的索引中，所以被删除。最后得到的 ",(0,c.jsx)(n.code,{children:"newIndexToOldIndexMap"})," 数据结构大致如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"newIndexToOldIndexMap = [5, 3, 4, 0]\n"})}),"\n",(0,c.jsxs)(n.p,{children:["而且此时的 ",(0,c.jsx)(n.code,{children:"moved"})," 也被标记为 ",(0,c.jsx)(n.code,{children:"true"}),"。"]}),"\n",(0,c.jsxs)(n.h3,{id:"移动和增加新节点",children:["移动和增加新节点",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#移动和增加新节点",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"通过前面的操作，我们完成了对旧节点的移除和更新，那么接下来就是需要进行对节点的移动和新节点的增加了："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// 根据 newIndexToOldIndexMap 求取最长公共子序列\nconst increasingNewIndexSequence = moved\n  ? getSequence(newIndexToOldIndexMap)\n  : EMPTY_ARR\n// 最长公共子序列尾部索引  \nj = increasingNewIndexSequence.length - 1\n// 从尾部开始遍历\nfor (i = toBePatched - 1; i >= 0; i--) {\n  const nextIndex = s2 + i\n  const nextChild = c2[nextIndex]\n  const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor\n  // 如果新子序列中的节点在旧子序列中不存在，则新增节点\n  if (newIndexToOldIndexMap[i] === 0) {\n    patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG)\n  } else if (moved) {\n    // 如果需要移动且\n    // 没有最长递增子序列\n    // 当前的节点不在最长递增子序列中\n    if (j < 0 || i !== increasingNewIndexSequence[j]) {\n      move(nextChild, container, anchor, MoveType.REORDER)\n    } else {\n      j--\n    }\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Step 1："})," 这里针对 ",(0,c.jsx)(n.code,{children:"moved"})," 是 ",(0,c.jsx)(n.code,{children:"true"})," 的情况，则会进行求取最长递增子序列的索引操作。"]}),"\n",(0,c.jsxs)(n.p,{children:["什么是最长递增子序列？简单来说指的是找到一个特定的最长的子序列，并且子序列中的所有元素单调递增。本例中，",(0,c.jsx)(n.code,{children:"newIndexToOldIndexMap = [5, 3, 4, 0]"})," 最长递增子序列的值为 ",(0,c.jsx)(n.code,{children:"[3, 4]"}),", 对应到 ",(0,c.jsx)(n.code,{children:"newIndexToOldIndexMap"})," 中的索引即 ",(0,c.jsx)(n.code,{children:"increasingNewIndexSequence = [1, 2]"}),"。关于具体的算法细节，我们后面再详细探讨。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Step 2："})," 从尾部开始遍历新的子序列，在遍历的过程中，如果新子序列中的节点在旧子序列中不存在，也就是 ",(0,c.jsx)(n.code,{children:"newIndexToOldIndexMap[i] === 0"}),"，则新增节点。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Step 3："})," 判断是否存在节点移动的情况，如果存在的话则看节点的索引是不是在最长递增子序列中，如果不在，则将它移动到锚点的前面，否则仅移动最长子序列的尾部指针。"]}),"\n",(0,c.jsxs)(n.p,{children:["针对上述例子中，新的子序列为 ",(0,c.jsx)(n.code,{children:"e,c,d,i"}),"。最长递增子序列的索引为 ",(0,c.jsx)(n.code,{children:"[1, 2]"}),"。开始遍历到 ",(0,c.jsx)(n.code,{children:"i"})," 节点时，因为 ",(0,c.jsx)(n.code,{children:"newIndexToOldIndexMap[i] = 0"})," 所以新增，然后遍历到 ",(0,c.jsx)(n.code,{children:"c,d"})," 节点，因为存在于最长子序列中，所以最后 ",(0,c.jsx)(n.code,{children:"j = -1"}),"。当遍历到 ",(0,c.jsx)(n.code,{children:"e"})," 节点时，此时 ",(0,c.jsx)(n.code,{children:"j = -1"})," 并且 ",(0,c.jsx)(n.code,{children:"e"})," 节点不存在于最长递增子序列索引中，索引最后一步就是把节点 ",(0,c.jsx)(n.code,{children:"e"})," 进行一次移动："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"move(nextChild, container, anchor, MoveType.REORDER)\n"})}),"\n",(0,c.jsxs)(n.p,{children:["其中 ",(0,c.jsx)(n.code,{children:"anchor"})," 是参照物，记录着上一次更新的节点信息，也就是节点 ",(0,c.jsx)(n.code,{children:"c"})," 的信息，所以这里的意思就是将节点 ",(0,c.jsx)(n.code,{children:"e"})," 移动到节点 ",(0,c.jsx)(n.code,{children:"c"})," 前面。"]}),"\n",(0,c.jsx)(n.p,{children:"至此，完成了所有节点的增、删、更新、移动的操作，此次操作结果如下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,c.jsxs)(n.h2,{id:"最长递增子序列",children:["最长递增子序列",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最长递增子序列",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["求最长递增子序列是 ",(0,c.jsx)(n.code,{children:"LeetCode"})," 上的一道经典算法题，原题：",(0,c.jsx)(n.a,{href:"https://leetcode.cn/problems/longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer",children:"300.\xa0最长递增子序列"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:"什么是上升子序列？简单来说指的是找到一个特定的最长的子序列，并且子序列中的所有元素单调递增。"}),"\n",(0,c.jsxs)(n.p,{children:["假设我们的序列为 ",(0,c.jsx)(n.code,{children:"[5, 3, 4, 9]"})," ，那么最长的递增子序列是 ",(0,c.jsx)(n.code,{children:"[3, 4]"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["那么如何找到最长的递增子序列呢？",(0,c.jsx)(n.code,{children:"Vue"})," 内部使用的是一套 ",(0,c.jsx)(n.code,{children:"贪心 + 二分查找"})," 的算法，关于贪心和二分查找的解释如下。"]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["贪心算法：贪心算法在每一步都做出了当时看起来最佳的选择，也就是说，它总是做出局部最优的选择，寄希望这样的选择能导致全局最优解。",(0,c.jsx)(n.a,{href:"https://leetcode.cn/problems/assign-cookies/description/",target:"_blank",rel:"noopener noreferrer",children:"leetCode 455.\xa0分发饼干。"})]}),"\n",(0,c.jsxs)(n.li,{children:["二分查找：每次的查找都是和区间的中间元素对比，将待查找的区间缩小为一半，直到找到目标元素，或者区间被缩小为 0（没找到）。",(0,c.jsx)(n.a,{href:"https://leetcode.cn/problems/binary-search/",target:"_blank",rel:"noopener noreferrer",children:"leetCode 704.\xa0二分查找。"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["那么这里我们再结合一下贪心算法的思想，在求取最长上升子序列时，对于同样长度是二的序列 ",(0,c.jsx)(n.code,{children:"[2, 3]"})," 一定比 ",(0,c.jsx)(n.code,{children:"[2, 5]"})," 好，因为要想让子序列尽可能地长，那么上升得尽可能慢，这样潜力更大。"]}),"\n",(0,c.jsx)(n.p,{children:"所以我们可以创建一个临时数组，用来保存最长的递增子序列，如果当前遍历的元素大于临时数组中的最后一个元素（也就是临时数组的最大值）时，那么将其追加到临时数组的尾部，否则，查找临时数组，找到第一个大于该元素的数并替换它，这样就保证了临时数组上升时最慢的。因为是单调递增的序列，我们也可以在临时数组中用二分查找，降低时间复杂度。"}),"\n",(0,c.jsxs)(n.p,{children:["以输入序列 ",(0,c.jsx)(n.code,{children:"[1, 4, 5, 2, 8, 7, 6, 0]"})," 为例，根据上面算法的描述，我们大致可以得到如下的计算步骤："]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"[1]"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"[1, 4]"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"[1, 4, 5]"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"[1, 2, 5]"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"[1, 2, 5, 8]"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"[1, 2, 5, 7]"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"[0, 2, 5, 6]"})}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["可以看到，如果单纯地按照上述算法的模式，得到的结果的长度虽然一致，但位置顺序和值并不符合预期，预期结果是 ",(0,c.jsx)(n.code,{children:"[1, 4, 5, 6]"}),"。那么在 ",(0,c.jsx)(n.code,{children:"Vue"})," 中是如何解决这个顺序和值错乱的问题呢？"]}),"\n",(0,c.jsx)(n.p,{children:"我们一起来看看源码的实现："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"function getSequence (arr) {\n  const p = arr.slice()\n  const result = [0]\n  let i, j, u, v, c\n  const len = arr.length\n  for (i = 0; i < len; i++) {\n    const arrI = arr[i]\n    // 排除等于 0 的情况\n    if (arrI !== 0) {\n      j = result[result.length - 1]\n      // 与最后一项进行比较\n      if (arr[j] < arrI) {\n        // 存储在 result 更新前的最后一个索引的值\n        p[i] = j\n        result.push(i)\n        continue\n      }\n      u = 0\n      v = result.length - 1\n      // 二分搜索，查找比 arrI 小的节点，更新 result 的值\n      while (u < v) {\n        // 取整得到当前位置\n        c = ((u + v) / 2) | 0\n        if (arr[result[c]] < arrI) {\n          u = c + 1\n        }\n        else {\n          v = c\n        }\n      }\n      if (arrI < arr[result[u]]) {\n        if (u > 0) {\n          // 正确的结果\n          p[i] = result[u - 1]\n        }\n        // 有可能替换会导致结果不正确，需要一个新数组 p 记录正确的结果\n        result[u] = i\n      }\n    }\n  }\n  u = result.length\n  v = result[u - 1]\n\n  // 回溯数组 p，找到最终的索引\n  while (u-- > 0) {\n    result[u] = v\n    v = p[v]\n  }\n  return result\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["其中 ",(0,c.jsx)(n.code,{children:"result"})," 中存储的是长度为 ",(0,c.jsx)(n.code,{children:"i"})," 的递增子序列最小末尾值的索引。",(0,c.jsx)(n.code,{children:"p"})," 是来存储在每次更新 ",(0,c.jsx)(n.code,{children:"result"})," 前最后一个索引的值，并且它的 ",(0,c.jsx)(n.code,{children:"key"})," 是这次要更新的 ",(0,c.jsx)(n.code,{children:"result"})," 值："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:" // 插入\n p[i] = j\n result.push(i)\n // 替换\n p[i] = result[u - 1]\n result[u] = i\n"})}),"\n",(0,c.jsxs)(n.p,{children:["对于上述的实例，我们在进行最后一步回溯数组 ",(0,c.jsx)(n.code,{children:"p"})," 之前，得到的数据机构如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"result = [ 0, 3, 2, 6 ] // => [0, 2, 5, 6]\n\np = [1, 0, 1, 0, 2, 2, 2]\n"})}),"\n",(0,c.jsxs)(n.p,{children:["从 ",(0,c.jsx)(n.code,{children:"result"})," 最后一个元素 ",(0,c.jsx)(n.code,{children:"6"})," 对应的索引 ",(0,c.jsx)(n.code,{children:"6"})," 开始回溯，可以看到 ",(0,c.jsx)(n.code,{children:"p[6] = 2"}),"，",(0,c.jsx)(n.code,{children:"p[2] = 1"}),"，",(0,c.jsx)(n.code,{children:"p[1] = 0"}),"，所以通过对 ",(0,c.jsx)(n.code,{children:"p"})," 的回溯，得到最终的 ",(0,c.jsx)(n.code,{children:"result"})," 值是 ",(0,c.jsx)(n.code,{children:"[0, 1, 2, 6]"}),"，也就找到最长递增子序列的最终索引了。"]}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["至此我们介绍完了关于 ",(0,c.jsx)(n.code,{children:"Vue3"})," 的 ",(0,c.jsx)(n.code,{children:"diff"})," 算法。接下来小伙伴们可以思考两个问题："]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["为什么 ",(0,c.jsx)(n.code,{children:"Vue 3"})," 不再沿用之前 ",(0,c.jsx)(n.code,{children:"Vue 2"})," 的双端 ",(0,c.jsx)(n.code,{children:"diff"})," 算法而改成现在的这种模式呢？"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["我们使用 ",(0,c.jsx)(n.code,{children:"v-for"})," 编写列表时为什么不建议使用 ",(0,c.jsx)(n.code,{children:"index"})," 作为 ",(0,c.jsx)(n.code,{children:"key"}),"?"]}),"\n"]}),"\n"]})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(t,{...e})}):t(e)}let u=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["Vue%203%20%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%2F5.%E6%B8%B2%E6%9F%93%E5%99%A8%EF%BC%9A%E6%95%B0%E7%BB%84%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%20diff%20%E7%AE%97%E6%B3%95.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. 从头比对",id:"1-从头比对",depth:2},{text:"2. 从尾比对",id:"2-从尾比对",depth:2},{text:"3. 新增节点",id:"3-新增节点",depth:2},{text:"4. 删除节点",id:"4-删除节点",depth:2},{text:"5. 未知子序列",id:"5-未知子序列",depth:2},{text:"构造新老节点位置映射 keyToNewIndexMap",id:"构造新老节点位置映射-keytonewindexmap",depth:3},{text:"继续处理旧节点",id:"继续处理旧节点",depth:3},{text:"移动和增加新节点",id:"移动和增加新节点",depth:3},{text:"最长递增子序列",id:"最长递增子序列",depth:2},{text:"总结",id:"总结",depth:2}],title:"5.渲染器：数组子节点的 diff 算法",headingTitle:"5.渲染器：数组子节点的 diff 算法",frontmatter:{}}}}]);