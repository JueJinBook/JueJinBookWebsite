"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["37014"],{767074:function(n,s,e){e.r(s),e.d(s,{default:()=>h});var r=e(552676),d=e(740453);let t=e.p+"static/image/5dc87760efdb3f8034e08a91ce8e7634.b93169bc.webp";function c(n){let s=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",ul:"ul",li:"li",code:"code",blockquote:"blockquote",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h3:"h3",img:"img",pre:"pre"},(0,d.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h1,{id:"4架构canvas-vs-dom",children:["4.架构：Canvas VS DOM",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#4架构canvas-vs-dom",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["在",(0,r.jsx)(s.strong,{children:"可视化搭建的低代码平台"}),"中，",(0,r.jsx)(s.strong,{children:"设计器"}),"是一个非常关键的模块，",(0,r.jsx)(s.strong,{children:"可以帮助用户通过拖拽、配置等方式快速搭建应用界面"}),"。"]}),"\n",(0,r.jsxs)(s.p,{children:["在技术选型方面，目前市面上主流的设计器技术包括基于 ",(0,r.jsx)(s.strong,{children:"HTML/CSS/JavaScript"})," 的 ",(0,r.jsx)(s.strong,{children:"Web"})," 设计器。"]}),"\n",(0,r.jsxs)(s.p,{children:["在渲染方案方面，主流的设计器通常采用基于虚拟 ",(0,r.jsx)(s.strong,{children:"DOM"})," 的渲染方案，比如 ",(0,r.jsx)(s.strong,{children:"React"}),"、",(0,r.jsx)(s.strong,{children:"Vue"})," 等，这种渲染方案可以提高渲染性能和开发效率，同时也支持组件化开发，使得设计器更加易于维护和扩展。"]}),"\n",(0,r.jsx)(s.p,{children:"除了渲染方案，设计器的交互体验也非常重要，为了提高用户体验，主流的设计器通常会提供丰富的交互组件和动画效果，比如拖拽、缩放、动态添加组件等功能，以及实时预览、撤销重做等操作，这些功能会非常考验渲染方案的选择以及研发的设计与开发功底。"}),"\n",(0,r.jsxs)(s.p,{children:["所以要设计一个易于使用、高效的低代码平台设计器，我们需要综合考虑",(0,r.jsx)(s.strong,{children:"技术选型"}),"、",(0,r.jsx)(s.strong,{children:"渲染方案"}),"、",(0,r.jsx)(s.strong,{children:"交互体验"}),"等多个方面的因素，本章将会针对设计器中可视化搭建的方案做一些技术上的选型探讨以及介绍一下市面上一些主流设计器的渲染方案。"]}),"\n",(0,r.jsxs)(s.h2,{id:"浏览器渲染的方式",children:["浏览器渲染的方式",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#浏览器渲染的方式",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"在开始进行渲染方式的选择之前，我们先来了解下在浏览器中渲染视图的常见方案："}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"HTML DOM"}),"：目前大多数都是使用其来绘制大部分的前端需求，使用起来非常的灵活和便捷，提供了配套全面的事件处理机制来处理相关的交互操作。主打的优势就是其便携性，学习成本低，上手简单容易。",(0,r.jsx)(s.strong,{children:"不过在内存开销、渲染速度等方面并不是很占优势，是其的薄弱环节"}),";"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Canvas(画布)"}),"：",(0,r.jsx)(s.strong,{children:"HTML5"})," 中，提供了 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 画布元素，通过 ",(0,r.jsx)(s.code,{children:"<canvas/>"})," 和绘制 ",(0,r.jsx)(s.strong,{children:"API"})," 在web页面上呈现图形、动画和图像。与 ",(0,r.jsx)(s.strong,{children:"DOM"})," 不同，",(0,r.jsx)(s.strong,{children:"Canvas"})," 主打的优势在于灵活性高、性能出色、跨平台渲染等特点。",(0,r.jsxs)(s.strong,{children:["但 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 的上手成本很高，需要了解 ",(0,r.jsx)(s.strong,{children:"JavaScript"})," ",(0,r.jsx)(s.strong,{children:"Canvas"})," 相关画布 ",(0,r.jsx)(s.strong,{children:"api"}),"，不支持 ",(0,r.jsx)(s.strong,{children:"SEO"})," 等等缺陷。设立的门槛让很多想尝试的前端同学望而却步"]}),";"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"WebGL"}),"：",(0,r.jsx)(s.strong,{children:"WebGL"})," 是比较新颖成熟的 ",(0,r.jsx)(s.strong,{children:"3D"})," 渲染引擎，主要用于在 ",(0,r.jsx)(s.strong,{children:"Web"})," 浏览器中呈现复杂的 ",(0,r.jsx)(s.strong,{children:"3D"})," 图像和动画。可以实现高性能的 ",(0,r.jsx)(s.strong,{children:"3D"})," 图形渲染和复杂场景绘制。同时支持硬件加速，调用 ",(0,r.jsx)(s.strong,{children:"GPU"})," 资源来渲染图形，极大的提高了渲染速度。基于 ",(0,r.jsx)(s.strong,{children:"WebGL"})," 的 ",(0,r.jsx)(s.strong,{children:"Three.js"})," 深受广大开发者的青睐。",(0,r.jsx)(s.strong,{children:"不过相应的缺点就是对基础设备有一定的要求，对低端设备不太友好。另外上手困难，不仅仅需要具备前端开发知识，同时也需要了解图形学、数学相关的一些理念和知识"}),";"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SVG"}),"：虽然 ",(0,r.jsx)(s.strong,{children:"SVG"})," 也能够在浏览器上绘制内容，但是与上面的几种技术相比，就明显薄弱很多了，不管是从性能上，还是易用程度而言都没有突出的亮点。不过 ",(0,r.jsx)(s.strong,{children:"SVG"})," 在浏览器图形高保真上有自己独有的优势，因此很多时候都会使用 ",(0,r.jsx)(s.strong,{children:"SVG"})," 的图标来保证相关设计的还原度，拥有更好的呈现效果的同时，也拥有比同位图文件更小的体积。"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["以上是在浏览器渲染视图的各种方案介绍，可以很明显的看出，",(0,r.jsx)(s.strong,{children:"DOM"})," 与 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 两种方案综合来看优势会比较明显，所以大部分的低代码产品会选择 ",(0,r.jsx)(s.strong,{children:"DOM"})," 和 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 两者其中一个做为渲染器，不排除某些另辟蹊径的特殊项目有其他的选择。"]}),"\n",(0,r.jsxs)(s.h2,{id:"其他平台的策略",children:["其他平台的策略",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#其他平台的策略",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["上述提到了 ",(0,r.jsx)(s.strong,{children:"DOM"})," 和 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 是比较好的选择，那么不妨先来看看目前市面上比较热门的一些编辑器它们内部究竟是怎么做抉择的呢？"]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:["下面只是做一些技术方案的横向对比，不一定是低代码平台，也包含了目前一些比较受欢迎的企业级 ",(0,r.jsx)(s.strong,{children:"D2C"})," 产品。"]}),"\n"]}),"\n",(0,r.jsxs)(s.table,{children:["\n",(0,r.jsxs)(s.thead,{children:["\n",(0,r.jsxs)(s.tr,{children:["\n",(0,r.jsx)(s.th,{children:"平台"}),"\n",(0,r.jsx)(s.th,{children:"DOM"}),"\n",(0,r.jsx)(s.th,{children:"Canvas"}),"\n",(0,r.jsx)(s.th,{children:"是否开源"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.tbody,{children:["\n",(0,r.jsxs)(s.tr,{children:["\n",(0,r.jsx)(s.td,{children:"Retool"}),"\n",(0,r.jsx)(s.td,{children:"☑️"}),"\n",(0,r.jsx)(s.td,{}),"\n",(0,r.jsx)(s.td,{children:"\uD83D\uDE45"}),"\n"]}),"\n",(0,r.jsxs)(s.tr,{children:["\n",(0,r.jsx)(s.td,{children:"bubble"}),"\n",(0,r.jsx)(s.td,{children:"☑️"}),"\n",(0,r.jsx)(s.td,{}),"\n",(0,r.jsx)(s.td,{children:"\uD83D\uDE45"}),"\n"]}),"\n",(0,r.jsxs)(s.tr,{children:["\n",(0,r.jsx)(s.td,{children:"蓝湖"}),"\n",(0,r.jsx)(s.td,{}),"\n",(0,r.jsx)(s.td,{children:"☑️"}),"\n",(0,r.jsx)(s.td,{children:"\uD83D\uDE45"}),"\n"]}),"\n",(0,r.jsxs)(s.tr,{children:["\n",(0,r.jsx)(s.td,{children:"即时设计"}),"\n",(0,r.jsx)(s.td,{}),"\n",(0,r.jsx)(s.td,{children:"☑️"}),"\n",(0,r.jsx)(s.td,{children:"\uD83D\uDE45"}),"\n"]}),"\n",(0,r.jsxs)(s.tr,{children:["\n",(0,r.jsx)(s.td,{children:"figma"}),"\n",(0,r.jsx)(s.td,{}),"\n",(0,r.jsx)(s.td,{children:"☑️"}),"\n",(0,r.jsx)(s.td,{children:"\uD83D\uDE45"}),"\n"]}),"\n",(0,r.jsxs)(s.tr,{children:["\n",(0,r.jsx)(s.td,{children:"lowcode-engine（宜搭）"}),"\n",(0,r.jsx)(s.td,{children:"☑️"}),"\n",(0,r.jsx)(s.td,{}),"\n",(0,r.jsx)(s.td,{children:"☑️"}),"\n"]}),"\n",(0,r.jsxs)(s.tr,{children:["\n",(0,r.jsx)(s.td,{children:"amis"}),"\n",(0,r.jsx)(s.td,{children:"☑️"}),"\n",(0,r.jsx)(s.td,{}),"\n",(0,r.jsx)(s.td,{children:"☑️"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["可以看出上述的 ",(0,r.jsx)(s.strong,{children:"LowCode"})," & ",(0,r.jsx)(s.strong,{children:"D2C"})," 产品，不管是商业化还是开源项目，可视化搭建类型的低代码产品多数都是使用 ",(0,r.jsx)(s.strong,{children:"DOM"})," 方案，而 ",(0,r.jsx)(s.strong,{children:"D2C"})," 类型的产品则是使用 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 会多一些。"]}),"\n",(0,r.jsxs)(s.h2,{id:"canvas-vs-dom",children:["Canvas Vs DOM",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#canvas-vs-dom",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["那么为什么 ",(0,r.jsx)(s.strong,{children:"D2C"})," 产品会倾向选择 ",(0,r.jsx)(s.strong,{children:"Canvas"}),"，而低代码平台则是更偏向 ",(0,r.jsx)(s.strong,{children:"DOM"})," 方案呢？"]}),"\n",(0,r.jsx)(s.p,{children:"接下来会从一些常见的编辑器的侧重点来一一进行分析。"}),"\n",(0,r.jsxs)(s.h3,{id:"渲染性能",children:["渲染性能",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#渲染性能",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"首先从性能入手，为了让同学更好的来了解。"}),"\n",(0,r.jsxs)(s.p,{children:["在浏览器窗口内分别使用 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 和 ",(0,r.jsx)(s.strong,{children:"DOM"})," 的绘制方式来插入 ",(0,r.jsx)(s.strong,{children:"1000"})," 个红色方块，最后使用计时代码记录当前的渲染时间。"]}),"\n",(0,r.jsxs)(s.p,{children:["可以看到 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 的渲染速度比 ",(0,r.jsx)(s.strong,{children:"DOM"})," 是成倍提升的。"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,r.jsx)(s.p,{children:"下面是两者比对的代码："}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'<div id="BoxContainer" ></div>\n<script>\n  const container = document.getElementById("BoxContainer");\n\n  const startTime = performance.now();\n\n  for(let i = 0; i < 1000; i++) {\n    const square = document.createElement("div");\n    square.style.width = "10px";\n    square.style.height = "10px";\n    square.style.background = "red";\n    square.style.position = "absolute";\n    square.style.left = Math.random() * 500 + "px";\n    square.style.top = Math.random() * 500 + "px";\n    container.appendChild(square);\n  }\n\n  const endTime = performance.now();\n  const renderTime = endTime - startTime;\n  console.log(`DOM render time: ${renderTime} ms`);\n<\/script>\n'})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'\n<canvas height="500px" width="500px" id="MyCanvas" ></canvas>\n<script>\n    const canvas = document.getElementById("MyCanvas");\n    const ctx = canvas.getContext("2d");\n\n    const startTime = performance.now();\n\n    for(let i = 0; i < 1000; i++) {\n        ctx.fillStyle = "red";\n        ctx.fillRect(Math.random() * 500, Math.random() * 500, 10, 10);\n    }\n\n    const endTime = performance.now();\n    const renderTime = endTime - startTime;\n    console.log(`Canvas render time: ${renderTime} ms`);\n<\/script>\n'})}),"\n",(0,r.jsxs)(s.p,{children:["从渲染的性能上来比，",(0,r.jsx)(s.strong,{children:"Canvas"})," 无疑是碾压 ",(0,r.jsx)(s.strong,{children:"DOM"})," 的。"]}),"\n",(0,r.jsxs)(s.h3,{id:"事件交互",children:["事件交互",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#事件交互",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["浏览器 ",(0,r.jsx)(s.strong,{children:"DOM"})," 的优势在于每一个节点都是独立开的，并且具有一套完整易用的浏览器事件系统提供给开发者进行调用，而 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 则是在一个画布平面当中，只能通过元素的 ",(0,r.jsx)(s.strong,{children:"x"}),"，",(0,r.jsx)(s.strong,{children:"y"})," 的距离边界来确定交互的元素，然后通过事件的广播进行操作。"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"首先"}),"：看下 ",(0,r.jsx)(s.strong,{children:"DOM"})," 的事件绑定："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <script>\n      function handleCanvasClick(event) {\n        console.log(\'鼠标点击了canvas\');\n      };\n    <\/script>\n  </head>\n  <body>\n\n    <div onclick="handleCanvasClick()" >click</div>\n\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"然后"}),"：下面是 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 的事件绑定："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'<canvas id="myCanvas" width="400" height="400"></canvas>\n\n<script>\n    // 获取canvas元素\n    var canvas = document.getElementById("myCanvas");\n\n    // 获取画布上下文\n    var ctx = canvas.getContext("2d");\n\n    // 绘制一个圆形\n    ctx.beginPath();\n    ctx.arc(200, 200, 50, 0, 2 * Math.PI);\n    ctx.fillStyle = "red";\n    ctx.fill();\n\n    // 添加点击事件监听器\n    canvas.addEventListener("click", function(event) {\n            // 获取点击位置的坐标\n            var x = event.clientX - canvas.offsetLeft;\n            var y = event.clientY - canvas.offsetTop;\n\n            // 判断是否点击了圆形\n            var distance = Math.sqrt(Math.pow(x-200, 2) + Math.pow(y-200, 2));\n            if (distance <= 50) {\n                    // 在圆形上方显示鼠标指针的坐标\n                    ctx.fillStyle = "black";\n                    ctx.font = "20px Arial";\n                    ctx.fillText("Clicked at (" + x + ", " + y + ")", x, y - 10);\n            }\n    });\n<\/script>\n'})}),"\n",(0,r.jsxs)(s.p,{children:["上述示例中，分别用 ",(0,r.jsx)(s.strong,{children:"DOM"})," 和 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 实现了一个点击元素的事件。可以看到，两者的实现难度还是存在很大差异的，",(0,r.jsx)(s.strong,{children:"DOM"})," 直接使用 ",(0,r.jsx)(s.strong,{children:"onclick"})," 来支持相关的事件绑定，而 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 则是在事件内部通过 ",(0,r.jsx)(s.strong,{children:"event"})," 提供的 ",(0,r.jsx)(s.strong,{children:"x"}),"，",(0,r.jsx)(s.strong,{children:"y"})," 坐标确定点击的内容归属。"]}),"\n",(0,r.jsxs)(s.h3,{id:"选择",children:["选择",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#选择",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["通过上述一些简单的示例，可以有一个比较明确的结论，",(0,r.jsx)(s.strong,{children:"Canvas"})," 渲染器在图形渲染方面性能确实是非常好的，但从开发体验上来看 ",(0,r.jsx)(s.strong,{children:"DOM"})," 会更加简单，不管是添加内容还是事件系统都比 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 方便，学习成本以及上手成本都会低于 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 方案。"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"蓝湖"}),"和",(0,r.jsx)(s.strong,{children:"即时设计"}),"等 ",(0,r.jsx)(s.strong,{children:"D2C"})," 平台绝大部分都是使用 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 作为渲染引擎，其原因是随着设计师上传的素材切图越来越多，如果使用 ",(0,r.jsx)(s.strong,{children:"DOM"})," 来渲染的话，由于节点过多带来的图形渲染的瓶颈会造成使用体验的卡顿，且交互事件并不算太复杂，因此使用 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 能够得到非常好的正向收益。"]}),"\n",(0,r.jsxs)(s.p,{children:["反观可视化的低代码平台则因为产物是实际应用的原因，不管是现如今 ",(0,r.jsx)(s.strong,{children:"SPA"})," 单页应用还是以前的 ",(0,r.jsx)(s.strong,{children:"HTML"})," 站点都是使用 ",(0,r.jsx)(s.strong,{children:"DOM"})," 来作为页面绘制的主要手段，且页面内容增长远远达不到 ",(0,r.jsx)(s.strong,{children:"D2C"})," 的节点规模的，所以渲染压力相对较小，同时又带有很强的交互逻辑性，物料组件也需要管理和开发，基于以上种种条件下，",(0,r.jsx)(s.strong,{children:"DOM"})," 自然而然的成为了首选的渲染器绘制方式。"]}),"\n",(0,r.jsxs)(s.p,{children:["最后就是 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 通常不利于搜索引擎优化（",(0,r.jsx)(s.strong,{children:"SEO"}),"），因为它的内容不易于解析和理解。同时也不支持选择、复制和粘贴等基本的用户界面功能，而 ",(0,r.jsx)(s.strong,{children:"DOM"})," 确很好的支持了这些点。"]}),"\n",(0,r.jsx)(s.p,{children:"因此在编辑器渲染技术选型中，需要根据具体的应用场景和需求来选择使用哪种技术："}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["需要高性能的图形和动画效果，不需要 ",(0,r.jsx)(s.strong,{children:"SEO"}),"，可以选择 ",(0,r.jsx)(s.strong,{children:"Canvas"}),";"]}),"\n",(0,r.jsxs)(s.li,{children:["需要更好的可维护性和易用性，可以选择 ",(0,r.jsx)(s.strong,{children:"DOM"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(s.h2,{id:"总结",children:["总结",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["在本章节，主要带大家了解 ",(0,r.jsx)(s.strong,{children:"DOM"})," 和 ",(0,r.jsx)(s.strong,{children:"Canvas"})," 在 ",(0,r.jsx)(s.strong,{children:"D2C"})," 和 ",(0,r.jsx)(s.strong,{children:"Lowcode"})," 领域中的一些应用和技术选型的一些细节点。为后续开发物料组件和渲染引擎模块做一些技术积累，为后续开发做一些知识储备。"]}),"\n",(0,r.jsxs)(s.p,{children:["但由于大部分的公司的组件化基本都是基于 ",(0,r.jsx)(s.strong,{children:"React"}),"、",(0,r.jsx)(s.strong,{children:"Vue"})," 来开发，在接入低代码平台中的物料中心的时候，采用 ",(0,r.jsx)(s.strong,{children:"DOM"})," 的方案可以节约大量的改造成本，使用过渡也会更为平滑。"]}),"\n",(0,r.jsxs)(s.p,{children:["所以最终我们可视化搭建的设计器也将选择 ",(0,r.jsx)(s.strong,{children:"DOM"})," 作为搭建技术方案，至于在设计器中存在大量组件渲染卡顿的情况，在本章开头也提到了，除了基础的原生技术方案有区别之外，还可以通过一些额外的研发设计方案来规避，例如",(0,r.jsx)(s.strong,{children:"数据组装与视图渲染分离"}),"等来解决性能问题，这些具体的优化措施我们将放在搭建实战篇进行更多的细节讲解。"]}),"\n",(0,r.jsxs)(s.h2,{id:"参考",children:["参考",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#参考",children:"#"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://medium.com/young-coder/the-future-web-will-canvas-rendering-replace-the-dom-847be872884c",target:"_blank",rel:"noopener noreferrer",children:"The Future Web: Will Canvas Rendering Replace the DOM?"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://www.youtube.com/watch?v=SwpS6fP1_hE",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(s.a,{href:"https://www.youtube.com/watch?v=SwpS6fP1_hE",target:"_blank",rel:"noopener noreferrer",children:"https://www.youtube.com/watch?v=SwpS6fP1_hE"})})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://zapier.com/blog/google-docs-canvas-based-rendering/",target:"_blank",rel:"noopener noreferrer",children:"Google Docs is switching to canvas-based rendering. Here's what that means."})}),"\n"]}),"\n",(0,r.jsxs)(s.h2,{id:"写在最后",children:["写在最后",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"如果你有什么疑问或者更好的建议，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,d.ah)(),n.components);return s?(0,r.jsx)(s,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F4.%E6%9E%B6%E6%9E%84%EF%BC%9ACanvas%20VS%20DOM.md"]={toc:[{text:"浏览器渲染的方式",id:"浏览器渲染的方式",depth:2},{text:"其他平台的策略",id:"其他平台的策略",depth:2},{text:"Canvas Vs DOM",id:"canvas-vs-dom",depth:2},{text:"渲染性能",id:"渲染性能",depth:3},{text:"事件交互",id:"事件交互",depth:3},{text:"选择",id:"选择",depth:3},{text:"总结",id:"总结",depth:2},{text:"参考",id:"参考",depth:2},{text:"写在最后",id:"写在最后",depth:2}],title:"4.架构：Canvas VS DOM",headingTitle:"4.架构：Canvas VS DOM",frontmatter:{}}}}]);