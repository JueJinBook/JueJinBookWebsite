"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["93015"],{241301:function(e,n,s){s.r(n),s.d(n,{default:()=>l});var i=s(552676),d=s(740453);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",hr:"hr",h2:"h2",code:"code",h3:"h3",ul:"ul",li:"li",pre:"pre"},(0,d.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"16查询优化的百科全书--explain-详解下",children:["16查询优化的百科全书 —— Explain 详解（下）",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#16查询优化的百科全书--explain-详解下",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"标签： MySQL 是怎样运行的"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"执行计划输出中各列详解",children:["执行计划输出中各列详解",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#执行计划输出中各列详解",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["本章紧接着上一节的内容，继续唠叨",(0,i.jsx)(n.code,{children:"EXPLAIN"}),"语句输出的各个列的意思。"]}),"\n",(0,i.jsxs)(n.h3,{id:"extra",children:["Extra",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extra",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["顾名思义，",(0,i.jsx)(n.code,{children:"Extra"}),"列是用来说明一些额外信息的，我们可以通过这些额外信息来更准确的理解",(0,i.jsx)(n.code,{children:"MySQL"}),"到底将如何执行给定的查询语句。",(0,i.jsx)(n.code,{children:"MySQL"}),"提供的额外信息有好几十个，我们就不一个一个介绍了（都介绍了感觉我们的文章就跟文档差不多了～），所以我们只挑一些平时常见的或者比较重要的额外信息介绍给大家哈。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"No tables used"})}),"\n",(0,i.jsxs)(n.p,{children:["当查询语句的没有",(0,i.jsx)(n.code,{children:"FROM"}),"子句时将会提示该额外信息，比如："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT 1;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\n|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | No tables used |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Impossible WHERE"})}),"\n",(0,i.jsxs)(n.p,{children:["查询语句的",(0,i.jsx)(n.code,{children:"WHERE"}),"子句永远为",(0,i.jsx)(n.code,{children:"FALSE"}),"时将会提示该额外信息，比方说："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 WHERE 1 != 1;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra            |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+\n|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | Impossible WHERE |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+\n1 row in set, 1 warning (0.01 sec)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"No matching min/max row"})}),"\n",(0,i.jsxs)(n.p,{children:["当查询列表处有",(0,i.jsx)(n.code,{children:"MIN"}),"或者",(0,i.jsx)(n.code,{children:"MAX"}),"聚集函数，但是并没有符合",(0,i.jsx)(n.code,{children:"WHERE"}),"子句中的搜索条件的记录时，将会提示该额外信息，比方说："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT MIN(key1) FROM s1 WHERE key1 = 'abcdefg';\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                   |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------------------+\n|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | No matching min/max row |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------------------+\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Using index"})}),"\n",(0,i.jsxs)(n.p,{children:["当我们的查询列表以及搜索条件中只包含属于某个索引的列，也就是在可以使用索引覆盖的情况下，在",(0,i.jsx)(n.code,{children:"Extra"}),"列将会提示该额外信息。比方说下边这个查询中只需要用到",(0,i.jsx)(n.code,{children:"idx_key1"}),"而不需要回表操作："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT key1 FROM s1 WHERE key1 = 'a';\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref   | rows | filtered | Extra       |\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\n|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | const |    8 |   100.00 | Using index |\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Using index condition"})}),"\n",(0,i.jsx)(n.p,{children:"有些搜索条件中虽然出现了索引列，但却不能使用到索引，比如下边这个查询："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"SELECT * FROM s1 WHERE key1 > 'z' AND key1 LIKE '%a';\n"})}),"\n",(0,i.jsxs)(n.p,{children:["其中的",(0,i.jsx)(n.code,{children:"key1 > 'z'"}),"可以使用到索引，但是",(0,i.jsx)(n.code,{children:"key1 LIKE '%a'"}),"却无法使用到索引，在以前版本的",(0,i.jsx)(n.code,{children:"MySQL"}),"中，是按照下边步骤来执行这个查询的："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["先根据",(0,i.jsx)(n.code,{children:"key1 > 'z'"}),"这个条件，从二级索引",(0,i.jsx)(n.code,{children:"idx_key1"}),"中获取到对应的二级索引记录。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["根据上一步骤得到的二级索引记录中的主键值进行回表，找到完整的用户记录再检测该记录是否符合",(0,i.jsx)(n.code,{children:"key1 LIKE '%a'"}),"这个条件，将符合条件的记录加入到最后的结果集。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["但是虽然",(0,i.jsx)(n.code,{children:"key1 LIKE '%a'"}),"不能组成范围区间参与",(0,i.jsx)(n.code,{children:"range"}),"访问方法的执行，但这个条件毕竟只涉及到了",(0,i.jsx)(n.code,{children:"key1"}),"列，所以设计",(0,i.jsx)(n.code,{children:"MySQL"}),"的大叔把上边的步骤改进了一下："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["先根据",(0,i.jsx)(n.code,{children:"key1 > 'z'"}),"这个条件，定位到二级索引",(0,i.jsx)(n.code,{children:"idx_key1"}),"中对应的二级索引记录。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["对于指定的二级索引记录，先不着急回表，而是先检测一下该记录是否满足",(0,i.jsx)(n.code,{children:"key1 LIKE '%a'"}),"这个条件，如果这个条件不满足，则该二级索引记录压根儿就没必要回表。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["对于满足",(0,i.jsx)(n.code,{children:"key1 LIKE '%a'"}),"这个条件的二级索引记录执行回表操作。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["我们说回表操作其实是一个随机",(0,i.jsx)(n.code,{children:"IO"}),"，比较耗时，所以上述修改虽然只改进了一点点，但是可以省去好多回表操作的成本。设计",(0,i.jsx)(n.code,{children:"MySQL"}),"的大叔们把他们的这个改进称之为",(0,i.jsx)(n.code,{children:"索引条件下推"}),"（英文名：",(0,i.jsx)(n.code,{children:"Index Condition Pushdown"}),"）。"]}),"\n",(0,i.jsxs)(n.p,{children:["如果在查询语句的执行过程中将要使用",(0,i.jsx)(n.code,{children:"索引条件下推"}),"这个特性，在",(0,i.jsx)(n.code,{children:"Extra"}),"列中将会显示",(0,i.jsx)(n.code,{children:"Using index condition"}),"，比如这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 WHERE key1 > 'z' AND key1 LIKE '%b';\n  +----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+\n  | id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra                 |\n  +----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+\n  |  1 | SIMPLE      | s1    | NULL       | range | idx_key1      | idx_key1 | 303     | NULL |  266 |   100.00 | Using index condition |\n  +----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+\n  1 row in set, 1 warning (0.01 sec)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Using where"})}),"\n",(0,i.jsxs)(n.p,{children:["当我们使用全表扫描来执行对某个表的查询，并且该语句的",(0,i.jsx)(n.code,{children:"WHERE"}),"子句中有针对该表的搜索条件时，在",(0,i.jsx)(n.code,{children:"Extra"}),"列中会提示上述额外信息。比如下边这个查询："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 WHERE common_field = 'a';\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |    10.00 | Using where |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.01 sec)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["当使用索引访问来执行对某个表的查询，并且该语句的",(0,i.jsx)(n.code,{children:"WHERE"}),"子句中有除了该索引包含的列之外的其他搜索条件时，在",(0,i.jsx)(n.code,{children:"Extra"}),"列中也会提示上述额外信息。比如下边这个查询虽然使用",(0,i.jsx)(n.code,{children:"idx_key1"}),"索引执行查询，但是搜索条件中除了包含",(0,i.jsx)(n.code,{children:"key1"}),"的搜索条件",(0,i.jsx)(n.code,{children:"key1 = 'a'"}),"，还有包含",(0,i.jsx)(n.code,{children:"common_field"}),"的搜索条件，所以",(0,i.jsx)(n.code,{children:"Extra"}),"列会显示",(0,i.jsx)(n.code,{children:"Using where"}),"的提示："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 WHERE key1 = 'a' AND common_field = 'a';\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref   | rows | filtered | Extra       |\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\n|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | const |    8 |    10.00 | Using where |\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Using join buffer (Block Nested Loop)"})}),"\n",(0,i.jsxs)(n.p,{children:["在连接查询执行过程过，当被驱动表不能有效的利用索引加快访问速度，",(0,i.jsx)(n.code,{children:"MySQL"}),"一般会为其分配一块名叫",(0,i.jsx)(n.code,{children:"join buffer"}),"的内存块来加快查询速度，也就是我们所讲的",(0,i.jsx)(n.code,{children:"基于块的嵌套循环算法"}),"，比如下边这个查询语句："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.common_field = s2.common_field;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | NULL                                               |\n|  1 | SIMPLE      | s2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9954 |    10.00 | Using where; Using join buffer (Block Nested Loop) |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n2 rows in set, 1 warning (0.03 sec)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["可以在对",(0,i.jsx)(n.code,{children:"s2"}),"表的执行计划的",(0,i.jsx)(n.code,{children:"Extra"}),"列显示了两个提示："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Using join buffer (Block Nested Loop)"}),"：这是因为对表",(0,i.jsx)(n.code,{children:"s2"}),"的访问不能有效利用索引，只好退而求其次，使用",(0,i.jsx)(n.code,{children:"join buffer"}),"来减少对",(0,i.jsx)(n.code,{children:"s2"}),"表的访问次数，从而提高性能。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Using where"}),"：可以看到查询语句中有一个",(0,i.jsx)(n.code,{children:"s1.common_field = s2.common_field"}),"条件，因为",(0,i.jsx)(n.code,{children:"s1"}),"是驱动表，",(0,i.jsx)(n.code,{children:"s2"}),"是被驱动表，所以在访问",(0,i.jsx)(n.code,{children:"s2"}),"表时，",(0,i.jsx)(n.code,{children:"s1.common_field"}),"的值已经确定下来了，所以实际上查询",(0,i.jsx)(n.code,{children:"s2"}),"表的条件就是",(0,i.jsx)(n.code,{children:"s2.common_field = 一个常数"}),"，所以提示了",(0,i.jsx)(n.code,{children:"Using where"}),"额外信息。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Not exists"})}),"\n",(0,i.jsxs)(n.p,{children:["当我们使用左（外）连接时，如果",(0,i.jsx)(n.code,{children:"WHERE"}),"子句中包含要求被驱动表的某个列等于",(0,i.jsx)(n.code,{children:"NULL"}),"值的搜索条件，而且那个列又是不允许存储",(0,i.jsx)(n.code,{children:"NULL"}),"值的，那么在该表的执行计划的",(0,i.jsx)(n.code,{children:"Extra"}),"列就会提示",(0,i.jsx)(n.code,{children:"Not exists"}),"额外信息，比如这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 LEFT JOIN s2 ON s1.key1 = s2.key1 WHERE s2.id IS NULL;\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------------------+\n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref               | rows | filtered | Extra                   |\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------------------+\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL     | NULL    | NULL              | 9688 |   100.00 | NULL                    |\n|  1 | SIMPLE      | s2    | NULL       | ref  | idx_key1      | idx_key1 | 303     | xiaohaizi.s1.key1 |    1 |    10.00 | Using where; Not exists |\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------------------+\n2 rows in set, 1 warning (0.00 sec)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["上述查询中",(0,i.jsx)(n.code,{children:"s1"}),"表是驱动表，",(0,i.jsx)(n.code,{children:"s2"}),"表是被驱动表，",(0,i.jsx)(n.code,{children:"s2.id"}),"列是不允许存储",(0,i.jsx)(n.code,{children:"NULL"}),"值的，而",(0,i.jsx)(n.code,{children:"WHERE"}),"子句中又包含",(0,i.jsx)(n.code,{children:"s2.id IS NULL"}),"的搜索条件，这意味着必定是驱动表的记录在被驱动表中找不到匹配",(0,i.jsx)(n.code,{children:"ON"}),"子句条件的记录才会把该驱动表的记录加入到最终的结果集，所以对于某条驱动表中的记录来说，如果能在被驱动表中找到1条符合",(0,i.jsx)(n.code,{children:"ON"}),"子句条件的记录，那么该驱动表的记录就不会被加入到最终的结果集，也就是说我们","没有必要到被驱动表中找到全部符合ON子句条件的记录","，这样可以稍微节省一点性能。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-!",children:"小贴士：\n\n右（外）连接可以被转换为左（外）连接，所以就不提右（外）连接的情况了。\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Using intersect(...)"}),"、",(0,i.jsx)(n.code,{children:"Using union(...)"}),"和",(0,i.jsx)(n.code,{children:"Using sort_union(...)"})]}),"\n",(0,i.jsxs)(n.p,{children:["如果执行计划的",(0,i.jsx)(n.code,{children:"Extra"}),"列出现了",(0,i.jsx)(n.code,{children:"Using intersect(...)"}),"提示，说明准备使用",(0,i.jsx)(n.code,{children:"Intersect"}),"索引合并的方式执行查询，括号中的",(0,i.jsx)(n.code,{children:"..."}),"表示需要进行索引合并的索引名称；如果出现了",(0,i.jsx)(n.code,{children:"Using union(...)"}),"提示，说明准备使用",(0,i.jsx)(n.code,{children:"Union"}),"索引合并的方式执行查询；出现了",(0,i.jsx)(n.code,{children:"Using sort_union(...)"}),"提示，说明准备使用",(0,i.jsx)(n.code,{children:"Sort-Union"}),"索引合并的方式执行查询。比如这个查询的执行计划："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 WHERE key1 = 'a' AND key3 = 'a';\n+----+-------------+-------+------------+-------------+-------------------+-------------------+---------+------+------+----------+-------------------------------------------------+\n| id | select_type | table | partitions | type        | possible_keys     | key               | key_len | ref  | rows | filtered | Extra                                           |\n+----+-------------+-------+------------+-------------+-------------------+-------------------+---------+------+------+----------+-------------------------------------------------+\n|  1 | SIMPLE      | s1    | NULL       | index_merge | idx_key1,idx_key3 | idx_key3,idx_key1 | 303,303 | NULL |    1 |   100.00 | Using intersect(idx_key3,idx_key1); Using where |\n+----+-------------+-------+------------+-------------+-------------------+-------------------+---------+------+------+----------+-------------------------------------------------+\n1 row in set, 1 warning (0.01 sec)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["其中",(0,i.jsx)(n.code,{children:"Extra"}),"列就显示了",(0,i.jsx)(n.code,{children:"Using intersect(idx_key3,idx_key1)"}),"，表明",(0,i.jsx)(n.code,{children:"MySQL"}),"即将使用",(0,i.jsx)(n.code,{children:"idx_key3"}),"和",(0,i.jsx)(n.code,{children:"idx_key1"}),"这两个索引进行",(0,i.jsx)(n.code,{children:"Intersect"}),"索引合并的方式执行查询。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-!",children:"小贴士：\n\n剩下两种类型的索引合并的Extra列信息就不一一举例子了，自己写个查询瞅瞅呗～\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Zero limit"})}),"\n",(0,i.jsxs)(n.p,{children:["当我们的",(0,i.jsx)(n.code,{children:"LIMIT"}),"子句的参数为",(0,i.jsx)(n.code,{children:"0"}),"时，表示压根儿不打算从表中读出任何记录，将会提示该额外信息，比如这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 LIMIT 0;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra      |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------+\n|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | Zero limit |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------+\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Using filesort"})}),"\n",(0,i.jsx)(n.p,{children:"有一些情况下对结果集中的记录进行排序是可以使用到索引的，比如下边这个查询："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 ORDER BY key1 LIMIT 10;\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------+\n| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra |\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------+\n|  1 | SIMPLE      | s1    | NULL       | index | NULL          | idx_key1 | 303     | NULL |   10 |   100.00 | NULL  |\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------+\n1 row in set, 1 warning (0.03 sec)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["这个查询语句可以利用",(0,i.jsx)(n.code,{children:"idx_key1"}),"索引直接取出",(0,i.jsx)(n.code,{children:"key1"}),"列的10条记录，然后再进行回表操作就好了。但是很多情况下排序操作无法使用到索引，只能在内存中（记录较少的时候）或者磁盘中（记录较多的时候）进行排序，设计",(0,i.jsx)(n.code,{children:"MySQL"}),"的大叔把这种在内存中或者磁盘上进行排序的方式统称为文件排序（英文名：",(0,i.jsx)(n.code,{children:"filesort"}),"）。如果某个查询需要使用文件排序的方式执行查询，就会在执行计划的",(0,i.jsx)(n.code,{children:"Extra"}),"列中显示",(0,i.jsx)(n.code,{children:"Using filesort"}),"提示，比如这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 ORDER BY common_field LIMIT 10;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | Using filesort |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["需要注意的是，如果查询中需要使用",(0,i.jsx)(n.code,{children:"filesort"}),"的方式进行排序的记录非常多，那么这个过程是很耗费性能的，我们最好想办法将使用",(0,i.jsx)(n.code,{children:"文件排序"}),"的执行方式改为使用索引进行排序。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Using temporary"})}),"\n",(0,i.jsxs)(n.p,{children:["在许多查询的执行过程中，",(0,i.jsx)(n.code,{children:"MySQL"}),"可能会借助临时表来完成一些功能，比如去重、排序之类的，比如我们在执行许多包含",(0,i.jsx)(n.code,{children:"DISTINCT"}),"、",(0,i.jsx)(n.code,{children:"GROUP BY"}),"、",(0,i.jsx)(n.code,{children:"UNION"}),"等子句的查询过程中，如果不能有效利用索引来完成查询，",(0,i.jsx)(n.code,{children:"MySQL"}),"很有可能寻求通过建立内部的临时表来执行查询。如果查询中使用到了内部的临时表，在执行计划的",(0,i.jsx)(n.code,{children:"Extra"}),"列将会显示",(0,i.jsx)(n.code,{children:"Using temporary"}),"提示，比方说这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT DISTINCT common_field FROM s1;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra           |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | Using temporary |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n",(0,i.jsx)(n.p,{children:"再比如："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT common_field, COUNT(*) AS amount FROM s1 GROUP BY common_field;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                           |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | Using temporary; Using filesort |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["不知道大家注意到没有，上述执行计划的",(0,i.jsx)(n.code,{children:"Extra"}),"列不仅仅包含",(0,i.jsx)(n.code,{children:"Using temporary"}),"提示，还包含",(0,i.jsx)(n.code,{children:"Using filesort"}),"提示，可是我们的查询语句中明明没有写",(0,i.jsx)(n.code,{children:"ORDER BY"}),"子句呀？这是因为",(0,i.jsx)(n.code,{children:"MySQL"}),"会在包含",(0,i.jsx)(n.code,{children:"GROUP BY"}),"子句的查询中默认添加上",(0,i.jsx)(n.code,{children:"ORDER BY"}),"子句，也就是说上述查询其实和下边这个查询等价："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"EXPLAIN SELECT common_field, COUNT(*) AS amount FROM s1 GROUP BY common_field ORDER BY common_field;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["如果我们并不想为包含",(0,i.jsx)(n.code,{children:"GROUP BY"}),"子句的查询进行排序，需要我们显式的写上",(0,i.jsx)(n.code,{children:"ORDER BY NULL"}),"，就像这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT common_field, COUNT(*) AS amount FROM s1 GROUP BY common_field ORDER BY NULL;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra           |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | Using temporary |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["这回执行计划中就没有",(0,i.jsx)(n.code,{children:"Using filesort"}),"的提示了，也就意味着执行查询时可以省去对记录进行文件排序的成本了。"]}),"\n",(0,i.jsxs)(n.p,{children:["另外，执行计划中出现",(0,i.jsx)(n.code,{children:"Using temporary"}),"并不是一个好的征兆，因为建立与维护临时表要付出很大成本的，所以我们最好能使用索引来替代掉使用临时表，比方说下边这个包含",(0,i.jsx)(n.code,{children:"GROUP BY"}),"子句的查询就不需要使用临时表："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT key1, COUNT(*) AS amount FROM s1 GROUP BY key1;\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+\n| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | s1    | NULL       | index | idx_key1      | idx_key1 | 303     | NULL | 9688 |   100.00 | Using index |\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["从",(0,i.jsx)(n.code,{children:"Extra"}),"的",(0,i.jsx)(n.code,{children:"Using index"}),"的提示里我们可以看出，上述查询只需要扫描",(0,i.jsx)(n.code,{children:"idx_key1"}),"索引就可以搞定了，不再需要临时表了。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Start temporary, End temporary"})}),"\n",(0,i.jsxs)(n.p,{children:["我们前边唠叨子查询的时候说过，查询优化器会优先尝试将",(0,i.jsx)(n.code,{children:"IN"}),"子查询转换成",(0,i.jsx)(n.code,{children:"semi-join"}),"，而",(0,i.jsx)(n.code,{children:"semi-join"}),"又有好多种执行策略，当执行策略为",(0,i.jsx)(n.code,{children:"DuplicateWeedout"}),"时，也就是通过建立临时表来实现为外层查询中的记录进行去重操作时，驱动表查询执行计划的",(0,i.jsx)(n.code,{children:"Extra"}),"列将显示",(0,i.jsx)(n.code,{children:"Start temporary"}),"提示，被驱动表查询执行计划的",(0,i.jsx)(n.code,{children:"Extra"}),"列将显示",(0,i.jsx)(n.code,{children:"End temporary"}),"提示，就是这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key3 FROM s2 WHERE common_field = 'a');\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+\n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref               | rows | filtered | Extra                        |\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+\n|  1 | SIMPLE      | s2    | NULL       | ALL  | idx_key3      | NULL     | NULL    | NULL              | 9954 |    10.00 | Using where; Start temporary |\n|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | xiaohaizi.s2.key3 |    1 |   100.00 | End temporary                |\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+\n2 rows in set, 1 warning (0.00 sec)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"LooseScan"})}),"\n",(0,i.jsxs)(n.p,{children:["在将",(0,i.jsx)(n.code,{children:"In"}),"子查询转为",(0,i.jsx)(n.code,{children:"semi-join"}),"时，如果采用的是",(0,i.jsx)(n.code,{children:"LooseScan"}),"执行策略，则在驱动表执行计划的",(0,i.jsx)(n.code,{children:"Extra"}),"列就是显示",(0,i.jsx)(n.code,{children:"LooseScan"}),"提示，比如这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 WHERE key3 IN (SELECT key1 FROM s2 WHERE key1 > 'z');\n+----+-------------+-------+------------+-------+---------------+----------+---------+-------------------+------+----------+-------------------------------------+\n| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref               | rows | filtered | Extra                               |\n+----+-------------+-------+------------+-------+---------------+----------+---------+-------------------+------+----------+-------------------------------------+\n|  1 | SIMPLE      | s2    | NULL       | range | idx_key1      | idx_key1 | 303     | NULL              |  270 |   100.00 | Using where; Using index; LooseScan |\n|  1 | SIMPLE      | s1    | NULL       | ref   | idx_key3      | idx_key3 | 303     | xiaohaizi.s2.key1 |    1 |   100.00 | NULL                                |\n+----+-------------+-------+------------+-------+---------------+----------+---------+-------------------+------+----------+-------------------------------------+\n2 rows in set, 1 warning (0.01 sec)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"FirstMatch(tbl_name)"})}),"\n",(0,i.jsxs)(n.p,{children:["在将",(0,i.jsx)(n.code,{children:"In"}),"子查询转为",(0,i.jsx)(n.code,{children:"semi-join"}),"时，如果采用的是",(0,i.jsx)(n.code,{children:"FirstMatch"}),"执行策略，则在被驱动表执行计划的",(0,i.jsx)(n.code,{children:"Extra"}),"列就是显示",(0,i.jsx)(n.code,{children:"FirstMatch(tbl_name)"}),"提示，比如这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT * FROM s1 WHERE common_field IN (SELECT key1 FROM s2 where s1.key3 = s2.key3);\n+----+-------------+-------+------------+------+-------------------+----------+---------+-------------------+------+----------+-----------------------------+\n| id | select_type | table | partitions | type | possible_keys     | key      | key_len | ref               | rows | filtered | Extra                       |\n+----+-------------+-------+------------+------+-------------------+----------+---------+-------------------+------+----------+-----------------------------+\n|  1 | SIMPLE      | s1    | NULL       | ALL  | idx_key3          | NULL     | NULL    | NULL              | 9688 |   100.00 | Using where                 |\n|  1 | SIMPLE      | s2    | NULL       | ref  | idx_key1,idx_key3 | idx_key3 | 303     | xiaohaizi.s1.key3 |    1 |     4.87 | Using where; FirstMatch(s1) |\n+----+-------------+-------+------------+------+-------------------+----------+---------+-------------------+------+----------+-----------------------------+\n2 rows in set, 2 warnings (0.00 sec)\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"json格式的执行计划",children:["Json格式的执行计划",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#json格式的执行计划",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["我们上边介绍的",(0,i.jsx)(n.code,{children:"EXPLAIN"}),"语句输出中缺少了一个衡量执行计划好坏的重要属性 —— ","成本","。不过设计",(0,i.jsx)(n.code,{children:"MySQL"}),"的大叔贴心的为我们提供了一种查看某个执行计划花费的成本的方式："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["在",(0,i.jsx)(n.code,{children:"EXPLAIN"}),"单词和真正的查询语句中间加上",(0,i.jsx)(n.code,{children:"FORMAT=JSON"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["这样我们就可以得到一个",(0,i.jsx)(n.code,{children:"json"}),"格式的执行计划，里边儿包含该计划花费的成本，比如这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'mysql> EXPLAIN FORMAT=JSON SELECT * FROM s1 INNER JOIN s2 ON s1.key1 = s2.key2 WHERE s1.common_field = \'a\'\\G\n*************************** 1. row ***************************\n\nEXPLAIN: {\n  "query_block": {\n    "select_id": 1,     # 整个查询语句只有1个SELECT关键字，该关键字对应的id号为1\n    "cost_info": {\n      "query_cost": "3197.16"   # 整个查询的执行成本预计为3197.16\n    },\n    "nested_loop": [    # 几个表之间采用嵌套循环连接算法执行\n    \n    # 以下是参与嵌套循环连接算法的各个表的信息\n      {\n        "table": {\n          "table_name": "s1",   # s1表是驱动表\n          "access_type": "ALL",     # 访问方法为ALL，意味着使用全表扫描访问\n          "possible_keys": [    # 可能使用的索引\n            "idx_key1"\n          ],\n          "rows_examined_per_scan": 9688,   # 查询一次s1表大致需要扫描9688条记录\n          "rows_produced_per_join": 968,    # 驱动表s1的扇出是968\n          "filtered": "10.00",  # condition filtering代表的百分比\n          "cost_info": {\n            "read_cost": "1840.84",     # 稍后解释\n            "eval_cost": "193.76",      # 稍后解释\n            "prefix_cost": "2034.60",   # 单次查询s1表总共的成本\n            "data_read_per_join": "1M"  # 读取的数据量\n          },\n          "used_columns": [     # 执行查询中涉及到的列\n            "id",\n            "key1",\n            "key2",\n            "key3",\n            "key_part1",\n            "key_part2",\n            "key_part3",\n            "common_field"\n          ],\n          \n          # 对s1表访问时针对单表查询的条件\n          "attached_condition": "((`xiaohaizi`.`s1`.`common_field` = \'a\') and (`xiaohaizi`.`s1`.`key1` is not null))"\n        }\n      },\n      {\n        "table": {\n          "table_name": "s2",   # s2表是被驱动表\n          "access_type": "ref",     # 访问方法为ref，意味着使用索引等值匹配的方式访问\n          "possible_keys": [    # 可能使用的索引\n            "idx_key2"\n          ],\n          "key": "idx_key2",    # 实际使用的索引\n          "used_key_parts": [   # 使用到的索引列\n            "key2"\n          ],\n          "key_length": "5",    # key_len\n          "ref": [      # 与key2列进行等值匹配的对象\n            "xiaohaizi.s1.key1"\n          ],\n          "rows_examined_per_scan": 1,  # 查询一次s2表大致需要扫描1条记录\n          "rows_produced_per_join": 968,    # 被驱动表s2的扇出是968（由于后边没有多余的表进行连接，所以这个值也没啥用）\n          "filtered": "100.00",     # condition filtering代表的百分比\n          \n          # s2表使用索引进行查询的搜索条件\n          "index_condition": "(`xiaohaizi`.`s1`.`key1` = `xiaohaizi`.`s2`.`key2`)",\n          "cost_info": {\n            "read_cost": "968.80",      # 稍后解释\n            "eval_cost": "193.76",      # 稍后解释\n            "prefix_cost": "3197.16",   # 单次查询s1、多次查询s2表总共的成本\n            "data_read_per_join": "1M"  # 读取的数据量\n          },\n          "used_columns": [     # 执行查询中涉及到的列\n            "id",\n            "key1",\n            "key2",\n            "key3",\n            "key_part1",\n            "key_part2",\n            "key_part3",\n            "common_field"\n          ]\n        }\n      }\n    ]\n  }\n}\n1 row in set, 2 warnings (0.00 sec)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["我们使用",(0,i.jsx)(n.code,{children:"#"}),"后边跟随注释的形式为大家解释了",(0,i.jsx)(n.code,{children:"EXPLAIN FORMAT=JSON"}),"语句的输出内容，但是大家可能有疑问",(0,i.jsx)(n.code,{children:'"cost_info"'}),"里边的成本看着怪怪的，它们是怎么计算出来的？先看",(0,i.jsx)(n.code,{children:"s1"}),"表的",(0,i.jsx)(n.code,{children:'"cost_info"'}),"部分："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'"cost_info": {\n    "read_cost": "1840.84",\n    "eval_cost": "193.76",\n    "prefix_cost": "2034.60",\n    "data_read_per_join": "1M"\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"read_cost"}),"是由下边这两部分组成的："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"IO"}),"成本"]}),"\n",(0,i.jsxs)(n.li,{children:["检测",(0,i.jsx)(n.code,{children:"rows \xd7 (1 - filter)"}),"条记录的",(0,i.jsx)(n.code,{children:"CPU"}),"成本"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-!",children:"小贴士：\n\nrows和filter都是我们前边介绍执行计划的输出列，在JSON格式的执行计划中，rows相当于rows_examined_per_scan，filtered名称不变。\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"eval_cost"}),"是这样计算的："]}),"\n",(0,i.jsxs)(n.p,{children:["检测 ",(0,i.jsx)(n.code,{children:"rows \xd7 filter"}),"条记录的成本。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"prefix_cost"}),"就是单独查询",(0,i.jsx)(n.code,{children:"s1"}),"表的成本，也就是："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"read_cost + eval_cost"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"data_read_per_join"}),"表示在此次查询中需要读取的数据量，我们就不多唠叨这个了。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-!",children:"小贴士：\n\n大家其实没必要关注MySQL为啥使用这么古怪的方式计算出read_cost和eval_cost，关注prefix_cost是查询s1表的成本就好了。\n"})}),"\n",(0,i.jsxs)(n.p,{children:["对于",(0,i.jsx)(n.code,{children:"s2"}),"表的",(0,i.jsx)(n.code,{children:'"cost_info"'}),"部分是这样的："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'"cost_info": {\n    "read_cost": "968.80",\n    "eval_cost": "193.76",\n    "prefix_cost": "3197.16",\n    "data_read_per_join": "1M"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["由于",(0,i.jsx)(n.code,{children:"s2"}),"表是被驱动表，所以可能被读取多次，这里的",(0,i.jsx)(n.code,{children:"read_cost"}),"和",(0,i.jsx)(n.code,{children:"eval_cost"}),"是访问多次",(0,i.jsx)(n.code,{children:"s2"}),"表后累加起来的值，大家主要关注里边儿的",(0,i.jsx)(n.code,{children:"prefix_cost"}),"的值代表的是整个连接查询预计的成本，也就是单次查询",(0,i.jsx)(n.code,{children:"s1"}),"表和多次查询",(0,i.jsx)(n.code,{children:"s2"}),"表后的成本的和，也就是："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"968.80 + 193.76 + 2034.60 = 3197.16\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"extented-explain",children:["Extented EXPLAIN",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extented-explain",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["最后，设计",(0,i.jsx)(n.code,{children:"MySQL"}),"的大叔还为我们留了个彩蛋，在我们使用",(0,i.jsx)(n.code,{children:"EXPLAIN"}),"语句查看了某个查询的执行计划后，紧接着还可以使用",(0,i.jsx)(n.code,{children:"SHOW WARNINGS"}),"语句查看与这个查询的执行计划有关的一些扩展信息，比如这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mysql> EXPLAIN SELECT s1.key1, s2.key1 FROM s1 LEFT JOIN s2 ON s1.key1 = s2.key1 WHERE s2.common_field IS NOT NULL;\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+\n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref               | rows | filtered | Extra       |\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+\n|  1 | SIMPLE      | s2    | NULL       | ALL  | idx_key1      | NULL     | NULL    | NULL              | 9954 |    90.00 | Using where |\n|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | xiaohaizi.s2.key1 |    1 |   100.00 | Using index |\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+\n2 rows in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Note\n   Code: 1003\nMessage: /* select#1 */ select `xiaohaizi`.`s1`.`key1` AS `key1`,`xiaohaizi`.`s2`.`key1` AS `key1` from `xiaohaizi`.`s1` join `xiaohaizi`.`s2` where ((`xiaohaizi`.`s1`.`key1` = `xiaohaizi`.`s2`.`key1`) and (`xiaohaizi`.`s2`.`common_field` is not null))\n1 row in set (0.00 sec)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["大家可以看到",(0,i.jsx)(n.code,{children:"SHOW WARNINGS"}),"展示出来的信息有三个字段，分别是",(0,i.jsx)(n.code,{children:"Level"}),"、",(0,i.jsx)(n.code,{children:"Code"}),"、",(0,i.jsx)(n.code,{children:"Message"}),"。我们最常见的就是",(0,i.jsx)(n.code,{children:"Code"}),"为",(0,i.jsx)(n.code,{children:"1003"}),"的信息，当",(0,i.jsx)(n.code,{children:"Code"}),"值为",(0,i.jsx)(n.code,{children:"1003"}),"时，",(0,i.jsx)(n.code,{children:"Message"}),"字段展示的信息","类似于","查询优化器将我们的查询语句重写后的语句。比如我们上边的查询本来是一个左（外）连接查询，但是有一个",(0,i.jsx)(n.code,{children:"s2.common_field IS NOT NULL"}),"的条件，着就会导致查询优化器把左（外）连接查询优化为内连接查询，从",(0,i.jsx)(n.code,{children:"SHOW WARNINGS"}),"的",(0,i.jsx)(n.code,{children:"Message"}),"字段也可以看出来，原本的",(0,i.jsx)(n.code,{children:"LEFT JOIN"}),"已经变成了",(0,i.jsx)(n.code,{children:"JOIN"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["但是大家一定要注意，我们说",(0,i.jsx)(n.code,{children:"Message"}),"字段展示的信息","类似于","查询优化器将我们的查询语句重写后的语句，并不是等价于，也就是说",(0,i.jsx)(n.code,{children:"Message"}),"字段展示的信息并不是标准的查询语句，在很多情况下并不能直接拿到黑框框中运行，它只能作为帮助我们理解查",(0,i.jsx)(n.code,{children:"MySQL"}),"将如何执行查询语句的一个参考依据而已。"]})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}let l=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["MySQL%20%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%9A%E4%BB%8E%E6%A0%B9%E5%84%BF%E4%B8%8A%E7%90%86%E8%A7%A3%20MySQL%2F16%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E7%9A%84%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6%20%E2%80%94%E2%80%94%20Explain%20%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%8B%EF%BC%89.md"]={toc:[{text:"执行计划输出中各列详解",id:"执行计划输出中各列详解",depth:2},{text:"Extra",id:"extra",depth:3},{text:"Json格式的执行计划",id:"json格式的执行计划",depth:2},{text:"Extented EXPLAIN",id:"extented-explain",depth:2}],title:"16查询优化的百科全书 —— Explain 详解（下）",headingTitle:"16查询优化的百科全书 —— Explain 详解（下）",frontmatter:{}}}}]);