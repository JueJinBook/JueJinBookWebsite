"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["32092"],{480638:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var c=s(552676),l=s(740453);function r(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",pre:"pre",code:"code",ul:"ul",li:"li",strong:"strong",blockquote:"blockquote"},(0,l.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"73excel文档处理",children:["73.Excel文档处理",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#73excel文档处理",children:"#"})]}),"\n",(0,c.jsxs)(n.h2,{id:"116-excel文档处理",children:["11.6 Excel文档处理",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#116-excel文档处理",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"Excel是存储数据比较常见的格式，它是日常办公的运营数据的载体，也是很多非技术人士常用于数据转移的一个方式，使用非常频繁，因此研究如何将Excel(CSV)的数据导入数据库，将数据库里的数据导出为Excel(CSV)是一个比较重要的话题。我们除了可以在云开发控制台里导入导出csv文件外，还可以在云函数使用Node.js的一些模块来处理Excel文档。"}),"\n",(0,c.jsxs)(n.h3,{id:"1161-读取云存储的excel文件",children:["11.6.1 读取云存储的Excel文件",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1161-读取云存储的excel文件",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["我们可以在GitHub上搜索关键词“Node Excel”，去筛选Star比较多，条件比较契合的，这里推荐使用node-xlsx，GitHub地址：",(0,c.jsx)(n.a,{href:"https://github.com/mgcrea/node-xlsx",target:"_blank",rel:"noopener noreferrer",children:"node-xlsx"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:"使用开发者工具新建一个云函数比如node-excel，在package.json里添加latest最新版的node-xlsx，并右键云函数目录选择在终端中打开输入命令npm install安装依赖："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'"dependencies": {\n  "wx-server-sdk": "latest",\n  "node-xlsx": "latest"\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:"然后再在index.js里输入以下代码，这里有几点需要注意："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"使用云函数处理的Excel文件的来源是你的云存储，所以你需要事先将数据csv文件上传到云存储，在下面的代码里换成你的云存储csv地址；当然这个fileID也可以是你在小程序端上传Excel文件返回的云文件地址；"}),"\n",(0,c.jsx)(n.li,{children:"云函数会先从云存储里下载csv文件，然后使用node-xlsx解析Exce文件，然后再将每行每行的写入数据库，这个Excel文件用的是前面介绍过的中国经济数据，这里只是写入了部分字段；"}),"\n",(0,c.jsxs)(n.li,{children:["由于下面是读取数据的每一行，并将读取的数据循环写入数据库，也就是把数据库的add请求放在循环里面，一般情况下我们",(0,c.jsx)(n.strong,{children:"非常不推荐"}),"大家这么做，如果要这么做，主要要把云函数的超时时间设置为更长，比如20s~60s之间，保证云函数执行成功，不然会出现只成功了一部分的情况；"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV\n})\nconst xlsx = require('node-xlsx');\nconst db = cloud.database()\nexports.main = async (event, context) => {\n  const fileID = 'cloud://xly-xrlur.786c-xly-xrlur-1300446086/china.csv' //你需要将该csv的地址替换成你的云存储的csv地址\n  const res = await cloud.downloadFile({\n    fileID: fileID,\n  })\n  const buffer = await res.fileContent\n  const sheets = await xlsx.parse(buffer);  //解析下载后的Excel Buffer文件，sheets是一个对象，而sheets['data']是数组，Excel有多少行数据，这个数组里就有多少个数组；\n  const sheet = sheets[0].data  //取出第一张表里的数组，注意这里的sheet为数组\n  const tasks = [] \n  for (let rowIndex in sheet) { //如果你的Excel第一行为字段名的话，从第2行开始\n    let row = sheet[rowIndex];\n    const task = await db.collection('chinaexcel')\n    .add({\n      data: {\n        city: row[0], \n        province: row[1], \n        city_area: row[2], \n        builtup_area: row[3],\n        reg_pop: row[4],\n        resident_pop: row[5],\n        gdp: row[6]\n      }\n    })\n    tasks.push(task) //task是数据库add请求返回的值，包含数据添加之后的_id，以及是否添加成功\n  }\n  return tasks\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["使用xlsx.parse解析Excel文件得到的数据是一个数组，也就是上面所说的sheets，数组里的值都是Excel的每张表，而",(0,c.jsx)(n.code,{children:"sheets[0].data"})," 则是第一张表里面的数据，",(0,c.jsx)(n.code,{children:"sheets[0].data"}),"仍然是一个数组，数组里的值是Excel表的每一行数据。\n在解析返回的对象里，每个数组都是Excel的一行数据，"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"[\n  {\n    name: 'Sheet1',\n    data: [\n      [Array], [Array],\n      ... 233 more items\n    ]\n  }\n]\n"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["发现有不少人使用云函数往数据库里导入大量数据的时候，使用的是Promise.all()方法，这个方法会出现并发的问题，会报",(0,c.jsx)(n.code,{children:"[LimitExceeded.NoValidConnection] Connection num overrun"}),"的错误，这是因为数据库的同时连接数是有限制的，不同套餐数据库的连接数不同，比如免费的是20。针对这个问题还有其他解决方法，这里就不介绍啦；还有尽管你可能已经把云函数的超时时间设置到了60s，但是仍然会出现，数据并没有完全导入的情况，显然你的Excel文件过大或者一次性导入的数据太多，超出了这个云函数的极限，建议分割处理，这种方法只适用于几百条的数据。"]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"1162将数据库里的数据保存为csv",children:["11.6.2、将数据库里的数据保存为CSV",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1162将数据库里的数据保存为csv",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"node-xlsx不仅可以解析Excel文件从中取出数据，还能将数据生成Excel文件，因此我们可以将云数据库里面的数据取出来之后保存为Excel文件，然后再将保存的Excel文件上传到云存储。"}),"\n",(0,c.jsx)(n.p,{children:"我们可以将node-excel的云函数修改为如下代码之后直接更新文件（因为依赖相同所以不需要安装依赖）："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"这个云函数是先将数据库里面的数据取出来，你也可以根据你自己的需要对数据进行筛选，我们知道云函数每次最多可以 get 1000条数据，如果超过1000条，需要你自己遍历处理；"}),"\n",(0,c.jsxs)(n.li,{children:["dataList.data是数组，里面的格式是键：值对，我们可以使用",(0,c.jsx)(n.code,{children:"dataList.data[index].key"}),"的形式取出相应的value，因此这种方式也支持嵌套子文档，比如",(0,c.jsx)(n.code,{children:"dataList.data[index].key.subkey"}),"取出嵌套子文档里面的值；"]}),"\n",(0,c.jsx)(n.li,{children:"云函数是先将excel每一行的字段值(相当于excel的每一个格子) push成一行数据，再将每一行的数组push成一个表格，然后再将表格写成xlsx Buffer文件，最后再上传到云存储。"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: 'xly-xrlur'\n})\nconst xlsx = require('node-xlsx');\nconst db = cloud.database()\nconst _ = db.command\nexports.main = async (event, context) => {\n  const dataList = await db.collection(\"chinaexcel\").where({\n    _id:_.exists(true)\n  }).limit(1000).get()\n  const data = dataList.data  //data是获取到的数据数组，每一个数组都是一个key:value的对象\n  let sheet = [] // 其实最后就是把这个数组写入excel   \n  let title = ['id','builtup_area','city','city_area','gdp','province','reg_pop','resident_pop']//这是第一行\n  await sheet.push(title) // 添加完列名 下面就是添加真正的内容了\n  for(let rowIndex in data){ //\n    let rowcontent = []  //这是声明每一行的数据\n    rowcontent.push(data[rowIndex]._id) //注意下面这个与title里面的值的顺序对应\n    rowcontent.push(data[rowIndex].builtup_area)\n    rowcontent.push(data[rowIndex].city)\n    rowcontent.push(data[rowIndex].city_area)\n    rowcontent.push(data[rowIndex].gdp)\n    rowcontent.push(data[rowIndex].province)\n    rowcontent.push(data[rowIndex].reg_pop)\n    rowcontent.push(data[rowIndex].resident_pop)\n    await sheet.push(rowcontent) //将每一行的字段添加到rowcontent里面\n  }\n  const buffer = await xlsx.build([{name: \"china\", data: sheet}])\n  return await cloud.uploadFile({\n    cloudPath: 'china.xlsx',\n    fileContent: buffer,\n  })\n}\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"1163-导入excel更多数据的解决方法",children:["11.6.3 导入Excel更多数据的解决方法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1163-导入excel更多数据的解决方法",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"在前面我们已经了解到，要将Excel里面的数据导入到数据库，会出现将数据库新增请求add放在循环里的情况，这种做法是非常低效的，即使是将云函数的超时时间设置为60s，也仍然只能导入少量的数据，如果你的业务经常需要往数据库里导入数据，我们应该如何处理呢？我们可以使用内嵌子文档的设计。"}),"\n",(0,c.jsx)(n.p,{children:"数据库的请求add是往数据库里一条一条的增加记录，有多少条就会请求多少次，而数据库的请求是非常耗时、耗资源、耗性能，而且数据量比较大时成功率也很难把控，但是如果把你要添加的所有数据，作为一整个数组添加到某个字段的值里时，就只需要执行一次数据库请求的操作即可，比如某个集合可以设计为："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"{\n  china:[{...//几百个城市的数据\n  }]\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"由于是记录里的某个字段的值，我们可以使用更新操作符，往数组里面push数组，这样就能大大提升数据导入的性能了。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"db.collection('china').doc(id).update({\n  data: {\n    china: _.push([数组])\n  }\n})\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"1164-将excel文件一键转成云数据库的json文件",children:["11.6.4 将Excel文件一键转成云数据库的json文件",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1164-将excel文件一键转成云数据库的json文件",children:"#"})]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"以下是一个脚本文件，是在自己电脑的本地运行的哦，不是在云函数端执行的。该脚本文件只是将Excel文件转成云数据库所需要json格式，实用性其实并没有非常大。"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"使用Excel导入云开发的数据库，数据量比较大的时候会出现一些问题，我们可以将Excel转成CSV文件，让CSV的第一行为字段名（要是英文哦），然后使用以下代码将CSV文件转成json文件。"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"第一步，安装Node.js环境，然后使用vscode新建一个 csv2json.js 的文件，将下面的代码拷贝进来；"}),"\n",(0,c.jsx)(n.li,{children:"第二步，在vscode的资源管理器里右键csv2json.js，在终端中打开，然后输入命令 npm install csvtojson replace-in-file；"}),"\n",(0,c.jsx)(n.li,{children:"第三步，把要转化的csv文件放在同一个目录，这里换成你的文件即可，也就是下面的china.csv换成你的csv文件；"}),"\n",(0,c.jsx)(n.li,{children:"第四步，后面的代码都不用管，然后打开vscode终端，输入 node csv2json.js 执行，就会生成两个文件，一个是json文件，一个是可以导入到云开发数据库的data.json"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"//用vscode打开文件之后，npm install csvtojson replace-in-file\nconst csv=require('csvtojson')\nconst replace = require('replace-in-file');\nconst fs = require('fs')\n\nconst csvFilePath='china.csv' //把要转化的csv文件放在同一个目录，这里换成你的文件即可\n//后面的代码都不用管，然后打开vscode终端，就会生成两个文件，一个是json文件，一个是可以导入到\ncsv()\n.fromFile(csvFilePath)\n.then((jsonObj)=>{\n  // console.log(jsonObj);\n  var jsonContent = JSON.stringify(jsonObj);\n  console.log(jsonContent);   \n  fs.writeFile(\"output.json\", jsonContent, 'utf8', function (err) {\n    if (err) {\n      console.log(\"保存json文件出错.\");\n      return console.log(err);\n    }\n\n    console.log(\"JSON文件已经被保存为output.json.\");\n    fs.readFile('output.json', 'utf8', function (err,data) {\n      if (err) {\n        return console.log(err);\n      }\n      var result = data.replace(/},/g, '}\\n').replace(/\\[/,'').replace(/\\]/,'')\n      fs.writeFile('data.json', result, 'utf8', function (err) {\n        if (err) return console.log(err);\n      });\n    });\n  });\n})\n"})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(r,{...e})}):r(e)}let a=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F73.Excel%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86.md"]={toc:[{text:"11.6 Excel文档处理",id:"116-excel文档处理",depth:2},{text:"11.6.1 读取云存储的Excel文件",id:"1161-读取云存储的excel文件",depth:3},{text:"11.6.2、将数据库里的数据保存为CSV",id:"1162将数据库里的数据保存为csv",depth:3},{text:"11.6.3 导入Excel更多数据的解决方法",id:"1163-导入excel更多数据的解决方法",depth:3},{text:"11.6.4 将Excel文件一键转成云数据库的json文件",id:"1164-将excel文件一键转成云数据库的json文件",depth:3}],title:"73.Excel文档处理",headingTitle:"73.Excel文档处理",frontmatter:{}}}}]);