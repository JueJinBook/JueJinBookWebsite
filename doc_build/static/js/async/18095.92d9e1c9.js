"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["18095"],{597644:function(e,s,n){n.r(s),n.d(s,{default:()=>x});var r=n(552676),i=n(740453);let c=n.p+"static/image/987f86e7af0d8af5f7b1db4868e665fe.73cccd5f.webp",t=n.p+"static/image/efefebc1f6190dd2eea0cf1b99087b4f.d3260ee9.webp",d=n.p+"static/image/d4ca64ddb4b8b363af7d542e69a9b429.ebe65fd3.webp",a=n.p+"static/image/88b98126bc587f81dc15a66435f1c18c.200775f8.webp",l=n.p+"static/image/aa0ba0427afab45640b611da690f0f3f.e2d98f2c.webp",o=n.p+"static/image/a21880d399c4ca50b940a1ed80c11e1c.3e4b0e04.webp",p=n.p+"static/image/689beb093033bceae3657819b3c376cd.a187e11b.webp";function h(e){let s=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",code:"code",pre:"pre",strong:"strong",h3:"h3",img:"img",ol:"ol",li:"li"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h1,{id:"18-sveltekit--页面选项",children:["18-SvelteKit ❘ 页面选项",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#18-sveltekit--页面选项",children:"#"})]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"推荐学习指数：⭐️️，了解即可"}),"\n"]}),"\n",(0,r.jsxs)(s.h2,{id:"1-前言",children:["1. 前言",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["路由篇讲到 ",(0,r.jsx)(s.code,{children:"+page(.server).js"}),"和 ",(0,r.jsx)(s.code,{children:"+layout(.server).js"}),"可以导出一些页面选项（page options）控制页面的行为。这些选项大多是为了让开发者根据实际情况自定义渲染方式，从而实现页面性能的最佳化。"]}),"\n",(0,r.jsx)(s.p,{children:"本篇就为大家详细讲解这些选项。"}),"\n",(0,r.jsxs)(s.h2,{id:"2-prerender",children:["2. prerender",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#2-prerender",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"prerender"})," 选项用于控制页面是否进行预渲染。"]}),"\n",(0,r.jsx)(s.p,{children:"所谓预渲染，指的是在构建的时候就将路由渲染为 HTML。优势在于减少服务端开销，劣势在于预渲染的内容只能通过构建和部署新版本的应用程序来更新。"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"// +page(.server).js/+layout(.server).js/+server.js\nexport const prerender = true | false | auto;\n"})}),"\n",(0,r.jsx)(s.p,{children:"如何判断一个页面是否适合预渲染呢？"}),"\n",(0,r.jsxs)(s.p,{children:["最基本的判断是 ",(0,r.jsx)(s.strong,{children:"“是否所有用户都必须从服务端获取相同的内容”。"})]}),"\n",(0,r.jsx)(s.p,{children:"但这并不是说页面只能是纯 HTML 和 CSS 才能预渲染，页面依然可以有 JavaScript，可以有事件监听，可以在 onMount 时访问页面参数、获取个性化数据等等。"}),"\n",(0,r.jsx)(s.p,{children:"比如一篇文章，如果只有文章内容，哪个用户访问都还是这个内容，所以可以预渲染成 HTML。但如果还有点赞、评论等数据，两个用户访问的时候数据可能并不相同，所以只能动态渲染。"}),"\n",(0,r.jsx)(s.p,{children:"此外要注意，带 actions 的页面不能预渲染，因为相同的路由还要有一个服务端用于处理 POST 请求，就不是纯静态了。"}),"\n",(0,r.jsxs)(s.h3,{id:"21-pageserverjs",children:["2.1. +page(.server).js",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#21-pageserverjs",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["新建 ",(0,r.jsx)(s.code,{children:"src/routes/posts/+page.js"}),"，代码如下："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'export async function load({ fetch }) {\n  const response = await fetch("https://jsonplaceholder.typicode.com/posts");\n  const posts = await response.json();\n\n  return {\n    posts,\n  };\n}\n\nexport const prerender = true;\n'})}),"\n",(0,r.jsxs)(s.p,{children:["新建 ",(0,r.jsx)(s.code,{children:"src/routes/posts/+page.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-xml",children:"<script>\n  let { data } = $props();\n<\/script>\n\n<h1>Posts list</h1>\n<ul>\n  {#each data.posts as { id, title }}\n    <li>{title}</li>\n  {/each}\n</ul>\n"})}),"\n",(0,r.jsxs)(s.p,{children:["运行 ",(0,r.jsx)(s.code,{children:"npm run build"}),"，查看 ",(0,r.jsx)(s.code,{children:".svelte-kit/output/prerendered/pages"}),"文件夹，可以看到预渲染生成的 HTML 文件："]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsxs)(s.p,{children:["运行 ",(0,r.jsx)(s.code,{children:"npm run preview"}),"预览效果："]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsxs)(s.h3,{id:"22-serverjs",children:["2.2. +server.js",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#22-serverjs",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"prerender"})," 也可用于 ",(0,r.jsx)(s.code,{children:"+server.js"}),"，新建 ",(0,r.jsx)(s.code,{children:"src/routes/api/posts/+server.js"}),"，代码如下："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"import { json } from '@sveltejs/kit';\n\nexport async function GET() {\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const data = await res.json();\n\n  return json(data);\n}\n\nexport const prerender = true;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["运行 ",(0,r.jsx)(s.code,{children:"npm run build"})," ，查看 ",(0,r.jsx)(s.code,{children:".svelte-kit/output/prerendered/pages"}),"文件夹："]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsxs)(s.p,{children:["运行 ",(0,r.jsx)(s.code,{children:"npm run preview"}),"预览效果："]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(s.p,{children:"这里要注意一个路由冲突问题："}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"routes/api/posts/+server.js"}),"对应创建的文件是 ",(0,r.jsx)(s.code,{children:".svelte-kit/output/prerendered/pages/api/posts"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"routes/api/posts/about/+server.js"}),"对应创建的文件是 ",(0,r.jsx)(s.code,{children:".svelte-kit/output/prerendered/pages/api/posts/about"})]}),"\n",(0,r.jsxs)(s.p,{children:["如果两个文件同时存在，就会造成冲突。因为 Linux 系统同一个目录下，文件和目录不能同名。也就是说，如果 ",(0,r.jsx)(s.code,{children:"api"}),"目录下已经有一个 posts 文件存在，则不能建立一个名为 posts 的文件夹，反之也是一样，已经有了一个名为 posts 的文件夹，不能再创建一个名为 posts 的文件。"]}),"\n",(0,r.jsxs)(s.p,{children:["所以如果你同时写了 ",(0,r.jsx)(s.code,{children:"api/posts/+server.js"}),"和 ",(0,r.jsx)(s.code,{children:"api/posts/about/+server.js"}),"，预渲染时就会报错。为了避免这个问题，你可以写成 ",(0,r.jsx)(s.code,{children:"api/posts.json/+server.js"}),"和 ",(0,r.jsx)(s.code,{children:"api/posts/about.json/+server.js"}),"。"]}),"\n",(0,r.jsxs)(s.p,{children:["页面并没有这个问题，因为 SvelteKit 自动将预渲染的页面写成了 ",(0,r.jsx)(s.code,{children:"pages/posts.html"}),"而不是 ",(0,r.jsx)(s.code,{children:"pages/post"}),"。"]}),"\n",(0,r.jsxs)(s.h3,{id:"23-auto",children:["2.3. auto",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#23-auto",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["prerender 选项也可以设置成 ",(0,r.jsx)(s.code,{children:'"auto"'}),"："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'export const prerender = "auto";\n'})}),"\n",(0,r.jsx)(s.p,{children:'"auto" 是什么意思呢？它跟 true 的区别是什么呢？这在初学的时候可能让人有点难以理解。其实很简单，正如官方文档中讲的：'}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"for example, with a route like /blog/[slug] where you want to prerender your most recent/popular content but server-render the long tail"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["假设 ",(0,r.jsx)(s.code,{children:"/blog/[slug]"}),"这个路由下有 1000 篇文章，根据二八定律，20% 的文章具有 80% 的流量，剩下 80% 的文章流量星星点点构成长尾。"]}),"\n",(0,r.jsxs)(s.p,{children:["我们没有必要每次都重新构建预渲染 1000 篇文章，我们只需要用 ",(0,r.jsx)(s.code,{children:"entries"})," 指定最有流量的文章预渲染即可，那剩下的文章怎么办呢？如果设置 ",(0,r.jsx)(s.code,{children:"prerender = true"}),"，访问这些文章会出现 404 错误，因为没有预渲染。但如果设置 ",(0,r.jsx)(s.code,{children:"prerender=auto"}),"，虽然没有预渲染，但会保留服务端渲染的代码，此时依然可以正常渲染（不过加载速度肯定会慢于预渲染）。"]}),"\n",(0,r.jsxs)(s.p,{children:["简单来说，借助 ",(0,r.jsx)(s.code,{children:'prerender = "auto"'})," 和 ",(0,r.jsx)(s.code,{children:"entries"})," ，将主要的文章预渲染保证性能，剩下的文章走服务端渲染保证能正常访问。"]}),"\n",(0,r.jsxs)(s.h3,{id:"24-自动生成",children:["2.4. 自动生成",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#24-自动生成",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["关于预渲染有一点要讲解的是，当为动态路由设置 ",(0,r.jsx)(s.code,{children:'prerender = true | "auto"'}),"时，SvelteKit 其实会自动生成预渲染的页面。这是什么意思呢？我们举个简单的例子，文件目录如下："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:"routes\n└─ posts\n   ├─ [id]\n   │  ├─ +page.js\n   │  └─ +page.svelte\n   ├─ +page.js\n   └─ +page.svelte\n"})}),"\n",(0,r.jsxs)(s.p,{children:["新建 ",(0,r.jsx)(s.code,{children:"src/routes/posts/+page.js"}),"，代码如下："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"export async function load() {\n  const posts = [\n    {\n      userId: 1,\n      id: 1,\n      title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n      body: 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto'\n    },\n    {\n      userId: 1,\n      id: 2,\n      title: 'qui est esse',\n      body: 'est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla'\n    },\n    {\n      userId: 1,\n      id: 3,\n      title: 'ea molestias quasi exercitationem repellat qui ipsa sit aut',\n      body: 'et iusto sed quo iure\nvoluptatem occaecati omnis eligendi aut ad\nvoluptatem doloribus vel accusantium quis pariatur\nmolestiae porro eius odio et labore et velit aut'\n    }\n  ];\n\n  return {\n    posts\n  };\n}\n\nexport const prerender = true;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["新建 ",(0,r.jsx)(s.code,{children:"src/routes/posts/+page.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-xml",children:"<script>\n  let { data } = $props();\n<\/script>\n\n<h1>Posts list</h1>\n<ul>\n  {#each data.posts as { id, title }}\n    <li><a href={`/posts/${id}`}>{title}</a></li>\n  {/each}\n</ul>\n\n"})}),"\n",(0,r.jsxs)(s.p,{children:["新建 ",(0,r.jsx)(s.code,{children:"src/routes/posts/[id]/+page.js"}),"，代码如下："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"import { error } from '@sveltejs/kit';\n\nexport async function load({ params }) {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${params.id}`);\n  const post = await response.json();\n  if (post.title) {\n    return {\n      post\n    };\n  }\n\n  error(404, 'Not found');\n}\n\nexport const prerender = 'true';\n"})}),"\n",(0,r.jsxs)(s.p,{children:["新建 ",(0,r.jsx)(s.code,{children:"src/routes/posts/[id]/+page.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-xml",children:"<script>\n  import { page } from '$app/stores';\n  let { data } = $props();\n<\/script>\n\n{$page.params.id} Post Content\n\n<hr />\n\n<h2>{data.post.title}</h2>\n\n<hr />\n\n{data.post.body}\n"})}),"\n",(0,r.jsx)(s.p,{children:"浏览器效果如下："}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(s.p,{children:["此时运行 ",(0,r.jsx)(s.code,{children:"npm run build"}),"，SvelteKit 会预渲染出哪些 HTML 文件呢？答案是："]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsxs)(s.p,{children:["问题在于，为什么会生成 ",(0,r.jsx)(s.code,{children:"posts/1.html"}),"、",(0,r.jsx)(s.code,{children:"posts/2.html"}),"、",(0,r.jsx)(s.code,{children:"posts/3.html"})," 呢？明明在动态路由中，我们并没有指定要预渲染的路由。"]}),"\n",(0,r.jsxs)(s.p,{children:["这是因为 SvelteKit 预渲染器会爬取预渲染的页面，并扫描其中的 ",(0,r.jsx)(s.code,{children:"<a>"}),"元素指向的页面，如果这些页面也设置了预渲染，就会预渲染这些页面。所以之所以会生成 ",(0,r.jsx)(s.code,{children:"1-3.html"}),"，是因为 ",(0,r.jsx)(s.code,{children:"posts.html"})," 有这些页面的链接。查看上图中的右侧部分，发现确实有这些链接。"]}),"\n",(0,r.jsxs)(s.p,{children:["你也可以取消 ",(0,r.jsx)(s.code,{children:"posts/+page.js"}),"的预渲染或者删除掉 ",(0,r.jsx)(s.code,{children:"posts/+page.svelte"}),"中的链接继续验证这一规律。"]}),"\n",(0,r.jsxs)(s.h2,{id:"3-entries",children:["3. entries",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#3-entries",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["对于一个动态路由 ",(0,r.jsx)(s.code,{children:"posts/[id]"}),"，SvelteKit 其实并不知道有哪些需要预渲染的路由，所以只能通过爬取链接确定。但开发者可以通过 ",(0,r.jsx)(s.code,{children:"entries"}),"选项明确指定有哪些路由。"]}),"\n",(0,r.jsxs)(s.p,{children:["修改 ",(0,r.jsx)(s.code,{children:"src/routes/posts/[id]/+page.js"}),"，代码如下："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"export function entries() {\n  return [{ id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }];\n}\n\nexport const prerender = true;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["此时 SvelteKit 会预渲染 ",(0,r.jsx)(s.code,{children:"posts/1"}),"到 ",(0,r.jsx)(s.code,{children:"posts/4"}),"这 4 个路由："]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"entries"}),"也可以是一个 ",(0,r.jsx)(s.code,{children:"async"})," 函数，用于从接口或数据库获取列表数据。"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"entries"}),"会和 SvelteKit 自动爬取链接一起决定预渲染哪些页面，比如 SvelteKit 爬取到了 ",(0,r.jsx)(s.code,{children:"posts/1"}),"、",(0,r.jsx)(s.code,{children:"post/2"}),"，而 ",(0,r.jsx)(s.code,{children:"entries"})," 指定 ",(0,r.jsx)(s.code,{children:"posts/1"}),"、",(0,r.jsx)(s.code,{children:"posts/3"}),"，最终会预渲染 ",(0,r.jsx)(s.code,{children:"posts/1"}),"、",(0,r.jsx)(s.code,{children:"post/2"}),"、",(0,r.jsx)(s.code,{children:"posts/3"}),"。"]}),"\n",(0,r.jsxs)(s.h2,{id:"4-ssr",children:["4. ssr",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#4-ssr",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["通常情况下，SvelteKit 会先在服务端渲染页面，然后将 HTML 发送给客户端，在客户端进行水合。如果设置 ",(0,r.jsx)(s.code,{children:"ssr=false"}),"，SvelteKit 会渲染一个“空”页面。适用于页面无法在服务端渲染的情况比如使用了浏览器的 API 如 document 等。当然，大部分情况下并不推荐这样做。因为 SSR 对 SEO 更好，且性能更好一点。"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"// +page.js\nexport const ssr = false;\n// 如果 `ssr` 和 `csr` 都是 `false`, 啥也不渲染！\n"})}),"\n",(0,r.jsxs)(s.p,{children:["如果在根布局中添加 ",(0,r.jsx)(s.code,{children:"export const ssr = false"}),"，整个应用就是仅在客户端渲染，相当于变成了 SPA 应用。"]}),"\n",(0,r.jsxs)(s.h2,{id:"5-csr",children:["5. csr",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#5-csr",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"有些页面并不需要 JavaScript，比如一些静态“关于”页面，此时可以禁用 CSR："}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"// +page.js\nexport const csr = false;\n// 如果 `ssr` 和 `csr` 都是 `false`, 啥也不渲染！\n"})}),"\n",(0,r.jsx)(s.p,{children:"禁用 CSR 意味着不会向客户端发送 JavaScript："}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"网页只靠 HTML 和 CSS 工作"}),"\n",(0,r.jsxs)(s.li,{children:["所有 Svelte 组件内的 ",(0,r.jsx)(s.code,{children:"<script>"})," 标签都会被删除"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"<form>"})," 无法渐进式增强"]}),"\n",(0,r.jsx)(s.li,{children:"跳转时页面会刷新"}),"\n",(0,r.jsx)(s.li,{children:"不能热更新（HMR）"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"如果只在开发期间启用 CSR（利用 HMR），可以这样写："}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"// +page.js\nimport { dev } from '$app/environment';\n\nexport const csr = dev;\n"})}),"\n",(0,r.jsxs)(s.h2,{id:"6-trailingslash",children:["6. trailingSlash",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#6-trailingslash",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"trailingSlash"})," 选项用于配置页面尾部斜杠。默认情况下，SvelteKit 会删除 URL 中的尾部斜杠，比如访问 ",(0,r.jsx)(s.code,{children:"/about/"}),"会重定向到 ",(0,r.jsx)(s.code,{children:"/about"}),"。",(0,r.jsx)(s.code,{children:"trailingSlash"})," 就是用于更改此行为（通常建议不要改）："]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"// +page(.server).js/+layout(.server).js/+server.js\nexport const trailingSlash = 'always' | 'never'（默认） | 'ignore'\n"})}),"\n",(0,r.jsxs)(s.p,{children:["该选项也会影响预渲染，举个例子，如果 trailingSlash 是 ",(0,r.jsx)(s.code,{children:"always"}),"，",(0,r.jsx)(s.code,{children:"/about"})," 会生成 ",(0,r.jsx)(s.code,{children:"about/index.html"}),"，否则会创建 ",(0,r.jsx)(s.code,{children:"/about.html"}),"。"]}),"\n",(0,r.jsxs)(s.h2,{id:"7-config",children:["7. config",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#7-config",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"借助适配器，SvelteKit 能够在各种平台上运行，每一个平台可能都需要一些特定的配置来调整部署，比如 Vercel 可以让你选择将应用的部分部署在 edge 上，或将其他部分部署在 serverless 环境。"}),"\n",(0,r.jsx)(s.p,{children:"此时就需要 config 选项，它具体有哪些字段，取决于使用的适配器："}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"export const config = {\n  runtime: 'edge'\n};\n"})}),"\n",(0,r.jsx)(s.p,{children:"注意 config 对象的合并只在顶层，并不是深合并。比如这是布局的配置："}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"export const config = {\n  runtime: 'edge',\n  regions: 'all',\n  foo: {\n    bar: true\n  }\n}\n"})}),"\n",(0,r.jsx)(s.p,{children:"这是页面的配置："}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"export const config = {\n  regions: ['us1', 'us2'],\n  foo: {\n    baz: true\n  }\n}\n"})}),"\n",(0,r.jsx)(s.p,{children:"最终的配置是："}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "runtime": "edge",\n  "regions": ["us1", "us2"],\n  "foo": { "baz": true }\n}\n'})})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,i.ah)(),e.components);return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}let x=j;j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["Svelte%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F18-SvelteKit%20%E2%9D%98%20%E9%A1%B5%E9%9D%A2%E9%80%89%E9%A1%B9.md"]={toc:[{text:"1. 前言",id:"1-前言",depth:2},{text:"2. prerender",id:"2-prerender",depth:2},{text:"2.1. +page(.server).js",id:"21-pageserverjs",depth:3},{text:"2.2. +server.js",id:"22-serverjs",depth:3},{text:"2.3. auto",id:"23-auto",depth:3},{text:"2.4. 自动生成",id:"24-自动生成",depth:3},{text:"3. entries",id:"3-entries",depth:2},{text:"4. ssr",id:"4-ssr",depth:2},{text:"5. csr",id:"5-csr",depth:2},{text:"6. trailingSlash",id:"6-trailingslash",depth:2},{text:"7. config",id:"7-config",depth:2}],title:"18-SvelteKit ❘ 页面选项",headingTitle:"18-SvelteKit ❘ 页面选项",frontmatter:{}}}}]);