"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["26042"],{866046:function(e,n,a){a.r(n),a.d(n,{default:()=>s});var r=a(552676),i=a(740453);function l(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",h4:"h4",pre:"pre",code:"code",strong:"strong",ul:"ul",li:"li",img:"img",blockquote:"blockquote"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"58表单组件与组合",children:["58.表单组件与组合",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#58表单组件与组合",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"92-表单组件与组合",children:["9.2 表单组件与组合",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#92-表单组件与组合",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在前面我们已经了解了form、input，在这一节会介绍更多不同类型的表单组件，我们应该如何从单一的表单组件或多个表单组件的组合里获取数据，而这些数据又是如何渲染到小程序页面并控制页面的显示的。"}),"\n",(0,r.jsxs)(n.h3,{id:"921-表单组件快速入门",children:["9.2.1 表单组件快速入门",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#921-表单组件快速入门",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1表单组件的综合案例",children:["1、表单组件的综合案例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1表单组件的综合案例",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"一个完整的数据收集表单，除了可以提交input文本框里面的数据，还可以提交开关选择器按钮switch、滑动选择器按钮slider、单选按钮radio、多选按钮checkbox等组件里面的数据。"}),"\n",(0,r.jsx)(n.p,{children:"使用开发者工具在form.wxml里添加以下代码，这些组件都是我们日常使用App、页面等经常会使用到的场景："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<form bindsubmit="formSubmit" bindreset="formReset">\n  <view>开关选择器按钮</view>\n  <switch name="switch"/>\n  <view>滑动选择器按钮slider</view>\n  <slider name="process" show-value ></slider>\n  <view>文本输入框</view>\n  <input name="textinput" placeholder="要输入的文本" />\n  <view>单选按钮radio</view>\n  <radio-group name="sex">\n    <label><radio value="male"/>男</label>\n    <label><radio value="female"/>女</label>\n  </radio-group>\n  <view>多选按钮checkbox</view>\n  <checkbox-group name="gamecheck">\n    <label><checkbox value="game1"/>王者荣耀</label>\n    <label><checkbox value="game2"/>欢乐斗地主</label>\n    <label><checkbox value="game3"/>连连看</label>\n    <label><checkbox value="game4"/>刺激战场</label>\n    <label><checkbox value="game5"/>穿越火线</label>\n    <label><checkbox value="game6"/>天天酷跑</label>\n  </checkbox-group>\n  <button form-type="submit">提交</button>\n  <button form-type="reset">重置</button>\n</form>\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后在form.js里添加formSubmit和formReset事件处理函数"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"formSubmit: function (e) {\n  console.log('表单携带的数据为：', e.detail.value)\n  const {switch,process,textinput,sex,gamecheck} = e.detail.value\n},\nformReset: function () {\n  console.log('表单重置了')\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["编译之后，在开发者工具的模拟器里给选择器组件和文本输入组件做出选择以及添加一些值，然后点击",(0,r.jsx)(n.strong,{children:"提交按钮"}),"。在控制台console，我们可以看到事件对象e的",(0,r.jsx)(n.strong,{children:"value对象"}),"就记录了我们提交的数据。也就是说，表单组件提交的数据都存储在事件对象e的detail属性下的value里。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"switch属性："})," 记录switch开关选择的值，这是一个boolean值，ture为开，false为关；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"sex属性："})," 记录name名为sex的单选按钮的值，它只记录单选选择的那一项的值；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"process属性："}),"\xa0记录name名为process的滑动选择器的值，show-value为boolean值，显示当前value值，数据类型为number；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"textinput属性："})," 记录name名为textinput的input文本输入框的值；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"gamecheck属性："})," 记录name名为gamecheck的多选组件的值，",(0,r.jsx)(n.strong,{children:"数据类型为数组Array"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://i.hackweek.org/img//9/WX20201005-104625@2x.png",alt:"表单携带的数据"})}),"\n",(0,r.jsxs)(n.h4,{id:"2获取form数据",children:["2、获取form数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2获取form数据",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["form表单可以将组件内用户在switch、input、checkbox、slider、radio、picker里输入的内容提交。当用户点击form表单中",(0,r.jsx)(n.code,{children:"form-type"}),"（或formType）的值为submit的button组件时，会触发bindsubmit绑定的事件处理函数formSubmit，用户提交的内容就在对象e.detail.value里。"]}),"\n",(0,r.jsxs)(n.p,{children:["注意在",(0,r.jsx)(n.code,{children:"<form></form>"}),"里的switch、input、checkbox、slider、radio、picker等组件都需要有name，这样用户在每个组件填写的相应值可以通过",(0,r.jsx)(n.code,{children:"const {name} = e.detail.value"}),"取出。这些组件都有自己的value值，也就是这些组件单独使用时不需要name就可以在事件对象的detail里取到value值，而组合使用时，则必须加name才能取到值，大家可以把name都取消掉，看看结果如何。"]}),"\n",(0,r.jsxs)(n.p,{children:["在这里我们先来介绍一下",(0,r.jsx)(n.strong,{children:"扩展运算符"}),"的概念，它的写法很简单，就是三个点 ",(0,r.jsx)(n.code,{children:"..."}),"。我们会用案例的方式让大家先了解它的作用，以后会经常用到的。上面的gamecheck记录了我们勾选的多选项的value值，它是一个",(0,r.jsx)(n.strong,{children:"数组Array"}),"。我们可以在formSubmit事件处理函数把选项value值给打印出来，给上面的formSubmit函数添加以下语句："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"formSubmit: function (e) {\n  const gamecheck=e.detail.value.gamecheck\n  console.log('直接打印的gamecheck',gamecheck)\n  console.log('拓展运算符打印的gamecheck',...gamecheck)\n},\n"})}),"\n",(0,r.jsxs)(n.p,{children:["然后我们再来填写表单提交数据，从控制台可以看到直接打印gamecheck，它是一个数组Array，中括号",(0,r.jsx)(n.code,{children:"[ ]"}),"就可以看出来，展开也有index值；而使用扩展运算符打印gamecheck，是",(0,r.jsx)(n.strong,{children:"将数组里的值都遍历了出来"}),"。这就是扩展运算符",(0,r.jsx)(n.code,{children:"…"}),"的作用，大家可以先只了解即可。"]}),"\n",(0,r.jsx)(n.p,{children:"只要我们知道form表单存储的数据在哪里，就能够结合前面的知识把数据取出来，不同的数据类型区别对待，所以掌握如何使用JavaScript操作不同的数据类型很重要。"}),"\n",(0,r.jsxs)(n.h4,{id:"3表单的重置",children:["3、表单的重置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3表单的重置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["点击",(0,r.jsx)(n.strong,{children:"重置按钮"}),"，即会重置表单里的数据，并不需要formReset事件处理函数做额外的处理。我们还可以在formReset事件里处理一些交互事件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"formReset: function () {\n  wx.showToast({\n  title: '成功',\n  icon: 'success',\n  duration: 2000})\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们也可以删掉重置的事件处理函数formReset，以及form组件",(0,r.jsx)(n.code,{children:'bindreset="formReset"'}),"，只需要将button的form-type设置为reset，代码如下，就可以达到重置的效果。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<button form-type="reset">重置</button>\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"4value与placeholder",children:["4、value与placeholder",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4value与placeholder",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"input、textarea、editor等组件有placeholder属性，它是占位符的意思，可以起到一个提示的作用（注意placeholder与value的不同）。而几乎所有组件都有value属性，通过给value属性赋值，可以做到将数据渲染到组件的效果（不适用于单选、多选）。比如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'//在form.wxml里输入以下代码\n<input name="name" placeholder="请输入你的姓名" value="{{userData.name}}" />\n<textarea name="desc" value="{{userData.desc}}" placeholder="请简短介绍一下你自己" auto-height auto-focus />\n<input name="email" value="{{userData.email}}" placeholder="请输入你的邮箱" />\n\n//在form.js的data里添加如下数据\ndata:{\n  userData:{\n    name:"李东bbsky",\n    desc:"致力于互联网技术技能的普及",\n    email:"344169902@qq.com"    \n  }\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"922-slider响应设置颜色",children:["9.2.2 slider响应设置颜色",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#922-slider响应设置颜色",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"slider滑动选择器也可以绑定事件处理函数，有：bindchange完成一次拖动后触发的事件以及bindchanging拖动过程中触发的事件。"}),"\n",(0,r.jsxs)(n.p,{children:["我们要先回顾一下事件对象里",(0,r.jsx)(n.code,{children:"data-*"}),"携带的数据和表单组件携带的数据：**首先组件",(0,r.jsx)(n.code,{children:"data-*"}),"属性的数据会存储在事件对象里的currentTarget下的dataset里的属性名里，也就是",(0,r.jsx)(n.code,{children:"data-color"}),"的值会存储在 ",(0,r.jsx)(n.code,{children:"e.currentTarget.dataset.color"}),"里；而表单组件的数据则是存储在事件对象的detail里，也就是",(0,r.jsx)(n.code,{children:"e.detail.value"}),"里。"]}),"\n",(0,r.jsx)(n.p,{children:"使用开发者工具在form.wxml里输入以下代码，这里会既涉及到data-*携带的数据，也会涉及到表单组件携带的数据："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<view style="background-color:rgb({{R}},{{G}},{{B}});width:300rpx;height:300rpx"></view>\n<slider data-color="R" value=\'{{R}}\' max="255" bindchanging=\'colorChanging\'  show-value>红色</slider>\n<slider data-color="G" value=\'{{G}}\' max="255" bindchanging=\'colorChanging\' show-value>绿色</slider>\n<slider data-color="B" value=\'{{B}}\' max="255" bindchanging=\'colorChanging\' show-value>蓝色</slider>\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后在Page的data里我们添加R、G、B的初始值（不了解RGB颜色值的童鞋可以搜索一下，它们的取值在0~255之间），这里的R、G、B初始值既是background-color的三个颜色的初始值，也是滑动选择器的初始值，我们把它设置为绿色（小程序技术文档的VI色）"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"data: {\n  R:7,\n  G:193,\n  B:96,\n},\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后在form.js里添加slider组件绑定的事件处理函数colorChanging："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"colorChanging(e) {\n  console.log(e)\n  let color = e.currentTarget.dataset.color\n  let value = e.detail.value;\n  this.setData({\n    [color]: value\n  })\n},\n"})}),"\n",(0,r.jsxs)(n.p,{children:["编译之后，当我们滑动slider，view组件的背景颜色也会随之改变。当滑动slider时，colorChanging因为滑动的拖动会不断触发（类似于英文里的ing的状态，实时监听），也就会在控制台Console里打印多个值，e.detail.value为拖动的值，而",(0,r.jsx)(n.code,{children:"e.currentTarget.dataset.color"}),"始终只会有三个结果R、G、B，而",(0,r.jsx)(n.code,{children:"[color]: value"}),"就是把值赋值给R、G、B这三个值。"]}),"\n",(0,r.jsxs)(n.h3,{id:"923-picker组件",children:["9.2.3 picker组件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#923-picker组件",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"1获取picker组件的数据",children:["1、获取picker组件的数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1获取picker组件的数据",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"picker滚动选择器看起来样式非常复杂，不过小程序已经帮我们封装好了，我们只需要用几行简单的代码就可以做一个非常复杂而且类别多样的滚动选择器。"}),"\n",(0,r.jsx)(n.p,{children:"使用开发者工具在form.wxm里输入以下代码，只需要下面几行代码，就能从底部弹起一个日期的滚动选择器。而里面的文字可以任意填写，类似于button、navigator组件里的字，点击即可执行相应的事件。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<picker mode="date" value="{{pickerdate}}" start="2017-09-01" end="2022-09-01" bindchange="bindDateChange">\n选择的日期为：{{pickerdate}}\n</picker>\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"mode属性：滚动选择器有几种模式，不同的模式可以弹出不同类型的滚动选择器，这里的是date日期选择，其他模式大体相似；"}),"\n",(0,r.jsx)(n.li,{children:"start和end属性：这是日期选择器特有的属性，为有效日期的开始和结束，我们可以滚动试下，超出这个范围就没法滚动了；"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"然后在Page的data里我们添加pickerdate的初始值"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'data: {\n  pickerdate:"2019-8-31",\n},\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后在form.js中添加picker组件绑定的事件处理函数bindDateChange，我们先打印看看picker组件的事件对象："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"bindDateChange: function (e) {\n  console.log('picker组件的value', e.detail.value)\n},\n"})}),"\n",(0,r.jsx)(n.p,{children:"编译之后，当我们弹起滚动选择器时，日期选择器默认会指向初始值2019年8月31日，而当我们滑动选择一个日期确定之后，可以在控制台console里看到选择的日期。这个日期是一个字符串。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"小任务："})," 那我们要如何把选择的日期比如2019-10-21，从这里取出年月日呢（也就是2019、10、21）？这个就涉及到字符串的操作了，还记得字符串的操作么？可以看",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer",children:"MDN技术文档之JavaScript标准库之String"}),"，取出具体数字的方法有很多种，你知道应该怎么处理吗？"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"2picker组件的渲染",children:["2、picker组件的渲染",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2picker组件的渲染",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"和其他表单组件一样，我们可以通过给value属性赋值从而将数据渲染到picker组件，当用户使用picker选择时间或地点等时，就会触发picker绑定的事件处理函数，而事件处理函数又通过setData修改data里的值，这样就可以将用户选择的时间或地点实时渲染在picker组件。"}),"\n",(0,r.jsx)(n.p,{children:"使用开发者工具在form.wxml里输入以下代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<picker name="birth" mode="date" value="{{userData.birth}}" start="1970-01-01" end="2005-01-01" bindchange="birthChange">\n  <view>你的生日：{{userData.birth}}</view>\n</picker>\n\n<picker name="region" mode="region" bindchange="regionChange" value="{{userData.region}}" custom-item="{{customItem}}">\n  <view class="picker">\n    当前选择：{{userData.region[0]}}，{{userData.region[1]}}，{{userData.region[2]}}\n  </view>\n</picker>\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后再在form.js里输入以下代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'Page({\n  data:{\n    userData:{\n      birth:"1995-01-01",\n      region:["广东省","深圳市","福田区"],\n    }\n  },\n  async onLoad(){\n\n  },\n  birthChange(e){\n    console.log("生日选择",e.detail.value)\n    this.setData({\n      "userData.birth":e.detail.value\n    })\n\n  },\n\n  regionChange(e){\n    console.log("地址选择",e.detail.value)\n    this.setData({\n      "userData.region":e.detail.value\n    })\n  }\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"在这个章节里，我们讲了数据可以存储到本地手机里，在后面的章节，我们还会讲数据存储的其他方式，比如缓存、数据库等。有没有感觉到编程就是逻辑处理、调用API和玩弄数据…"})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}let s=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F58.%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%BB%84%E5%90%88.md"]={toc:[{text:"9.2 表单组件与组合",id:"92-表单组件与组合",depth:2},{text:"9.2.1 表单组件快速入门",id:"921-表单组件快速入门",depth:3},{text:"1、表单组件的综合案例",id:"1表单组件的综合案例",depth:4},{text:"2、获取form数据",id:"2获取form数据",depth:4},{text:"3、表单的重置",id:"3表单的重置",depth:4},{text:"4、value与placeholder",id:"4value与placeholder",depth:4},{text:"9.2.2 slider响应设置颜色",id:"922-slider响应设置颜色",depth:3},{text:"9.2.3 picker组件",id:"923-picker组件",depth:3},{text:"1、获取picker组件的数据",id:"1获取picker组件的数据",depth:4},{text:"2、picker组件的渲染",id:"2picker组件的渲染",depth:4}],title:"58.表单组件与组合",headingTitle:"58.表单组件与组合",frontmatter:{}}}}]);