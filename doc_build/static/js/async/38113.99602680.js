"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["38113"],{76091:function(n,e,s){s.r(e),s.d(e,{default:()=>u});var t=s(552676),a=s(740453);let i=s.p+"static/image/7ebd3d60ec0f35bdf587e4f9b483d3ae.229cfd6e.webp",c=s.p+"static/image/31a43634dc300aa137100981170c67f0.e70c11f1.webp",o=s.p+"static/image/1eea7fc5c9636da16ec9384267c7d5f6.f0715e25.webp",l=s.p+"static/image/05528bc91cfe024691c961da35fc1c7d.dc98c66a.webp",r=s.p+"static/image/5cc2d5af375852ca7983e6d0f21ecbca.265d5747.webp",d=s.p+"static/image/f1463f3f65c007997ca903203a630f75.c2762059.webp",p=s.p+"static/image/b03bd1552fa53b60cb9206789c9e948f.e8c89740.webp",m=s.p+"static/image/8562c5ba81fd5b5fb9115c9638193d64.4f49db74.webp";function h(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",blockquote:"blockquote",h4:"h4",ul:"ul",li:"li",img:"img",pre:"pre"},(0,a.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"16前端实战账单列表页",children:["16.前端实战：账单列表页",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#16前端实战账单列表页",children:"#"})]}),"\n",(0,t.jsxs)(e.h2,{id:"前言",children:["前言",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["上一章节介绍的登录注册是整个项目的根基，没有拿到 ",(0,t.jsx)(e.code,{children:"token"}),"，将无法进行后续的各种操作，如账单的增删改查。所以务必将上一章节好好地阅读与揣摩，为后面的学习做好铺垫。我们直接进入本次前端实战项目的主题，账单的增删改查之列表页。"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["本教程已有线上地址",(0,t.jsx)(e.a,{href:"http://cost.chennick.wang",target:"_blank",rel:"noopener noreferrer",children:"在线地址"}),"，同学们可以在实战部分，对照着线上页面进行学习。"]}),"\n"]}),"\n",(0,t.jsxs)(e.h4,{id:"知识点",children:["知识点",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#知识点",children:"#"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"单项组件抽离"}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"列表页无限滚动"}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"下拉刷新列表"}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"弹窗组件封装"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"我们先来欣赏一下最终的页面效果："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsxs)(e.h2,{id:"列表页编写静态部分",children:["列表页编写（静态部分）",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#列表页编写静态部分",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["按照正常的开发流程，我们先将静态页面切出来，再填入数据使其动态化。在此之前，我们已经新建好了 ",(0,t.jsx)(e.code,{children:"Home"})," 目录，该目录便是用于放置账单列表，所以我们直接在 ",(0,t.jsx)(e.code,{children:"Home/index.jsx"})," 新增代码。"]}),"\n",(0,t.jsxs)(e.h4,{id:"头部统计实现",children:["头部统计实现",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#头部统计实现",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"列表的头部展示的内容为当月的收入和支出汇总，并且有两个列表条件过滤项，分别是类型过滤和时间过滤。"}),"\n",(0,t.jsx)(e.p,{children:"我们新增代码如下："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"import React from 'react'\nimport { Icon } from 'zarm'\n\nimport s from './style.module.less'\n\nconst Home = () => {\n  return <div className={s.home}>\n    <div className={s.header}>\n      <div className={s.dataWrap}>\n        <span className={s.expense}>总支出：<b>\xa5 200</b></span>\n        <span className={s.income}>总收入：<b>\xa5 500</b></span>\n      </div>\n      <div className={s.typeWrap}>\n        <div className={s.left}>\n          <span className={s.title}>类型 <Icon className={s.arrow} type=\"arrow-bottom\" /></span>\n        </div>\n        <div className={s.right}>\n          <span className={s.time}>2022-06<Icon className={s.arrow} type=\"arrow-bottom\" /></span>\n        </div>\n      </div>\n    </div>\n  </div>\n}\n\nexport default Home\n"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"文末已为同学们提供下本章节 demo 代码，样式部分不再详细说明。"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"代码分析："}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"header"})," 采用 ",(0,t.jsx)(e.code,{children:"fixed"})," 固定定位，将整个汇总信息固定在页面的顶部位置，这样后续列表滚动的时候，你可以方便查看当月的收入汇总，以及筛选当月消费类型和时间段的筛选。每个列表展示的是当月的收入与支出明细，比如 ",(0,t.jsx)(e.code,{children:"2021-06"})," 的收入明细。"]}),"\n",(0,t.jsxs)(e.p,{children:["本次项目全程采用的是 ",(0,t.jsx)(e.code,{children:"Flex"})," 弹性布局，这种布局形式在当下的开发生产环境已经非常成熟，同学们如果还有不熟悉的，请实现对 ",(0,t.jsx)(e.code,{children:"Flex"})," 布局做一个简单的学习，这边推荐一个学习网站："]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"http://flexboxfroggy.com/#zh-cn",target:"_blank",rel:"noopener noreferrer",children:"http://flexboxfroggy.com/#zh-cn"})}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["笔者当初也是通过这个网站的学习，入门的 ",(0,t.jsx)(e.code,{children:"Flex"}),"。"]}),"\n",(0,t.jsx)(e.p,{children:"完成上述布局之后，页面如下所示："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsxs)(e.h4,{id:"列表页面实现",children:["列表页面实现",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#列表页面实现",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["列表页面会用到 ",(0,t.jsx)(e.code,{children:"Zarm"})," 组件库为我们提供的 ",(0,t.jsx)(e.a,{href:"https://zarm.gitee.io/#/components/pull",target:"_blank",rel:"noopener noreferrer",children:"Pull"})," 组件，来实现下拉刷新以及无限滚动，我们先来将基础布局实现，如下所示："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'// Home/index.jsx\nconst Home = () => {\n  const [list, setList] = useState([\n    {\n      bills: [\n        {\n          amount: "25.00",\n          date: "1623390740000",\n          id: 911,\n          pay_type: 1,\n          remark: "",\n          type_id: 1,\n          type_name: "餐饮"\n        }\n      ],\n      date: \'2021-06-11\'\n    }\n  ]); // 账单列表\n  return <div className={s.home}>\n    <div className={s.header}>\n      ...\n    </div>\n    <div className={s.contentWrap}>\n      {\n        list.map((item, index) => <BillItem />)\n      }\n    </div>\n  </div>\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["上述我们添加 ",(0,t.jsx)(e.code,{children:"list"})," 为列表假数据，",(0,t.jsx)(e.code,{children:"BillItem"})," 组件为账单单项组件，我们将其抽离到 ",(0,t.jsx)(e.code,{children:"components"})," 组件库，如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// components/BillItem/index.jsx\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport dayjs from 'dayjs';\nimport { Cell } from 'zarm';\nimport { useNavigate } from 'react-router-dom'\nimport CustomIcon from '../CustomIcon';\nimport { typeMap } from '@/utils';\n\nimport s from './style.module.less';\n\nconst BillItem = ({ bill }) => {\n  const [income, setIncome] = useState(0); // 收入\n  const [expense, setExpense] = useState(0); // 支出\n  const navigateTo = useNavigate(); // 路由实例\n\n  // 当添加账单是，bill.bills 长度变化，触发当日收支总和计算。\n  useEffect(() => {\n    // 初始化将传入的 bill 内的 bills 数组内数据项，过滤出支出和收入。\n    // pay_type：1 为支出；2 为收入\n    // 通过 reduce 累加\n    const _income = bill.bills.filter(i => i.pay_type == 2).reduce((curr, item) => {\n      curr += Number(item.amount);\n      return curr;\n    }, 0);\n    setIncome(_income);\n    const _expense = bill.bills.filter(i => i.pay_type == 1).reduce((curr, item) => {\n      curr += Number(item.amount);\n      return curr;\n    }, 0);\n    setExpense(_expense);\n  }, [bill.bills]);\n\n  // 前往账单详情\n  const goToDetail = (item) => {\n    navigateTo(`/detail?id=${item.id}`)\n  };\n\n  return <div className={s.item}>\n    <div className={s.headerDate}>\n      <div className={s.date}>{bill.date}</div>\n      <div className={s.money}>\n        <span>\n          <img src=\"//s.yezgea02.com/1615953405599/zhi%402x.png\" alt='支' />\n            <span>\xa5{ expense.toFixed(2) }</span>\n        </span>\n        <span>\n          <img src=\"//s.yezgea02.com/1615953405599/shou%402x.png\" alt=\"收\" />\n          <span>\xa5{ income.toFixed(2) }</span>\n        </span>\n      </div>\n    </div>\n    {\n      bill && bill.bills.map(item => <Cell\n        className={s.bill}\n        key={item.id}\n        onClick={() => goToDetail(item)}\n        title={\n          <>\n            <CustomIcon\n              className={s.itemIcon}\n              type={item.type_id ? typeMap[item.type_id].icon : 1}\n            />\n            <span>{ item.type_name }</span>\n          </>\n        }\n        description={<span style={{ color: item.pay_type == 2 ? 'red' : '#39be77' }}>{`${item.pay_type == 1 ? '-' : '+'}${item.amount}`}</span>}\n        help={<div>{dayjs(Number(item.date)).format('HH:mm')} {item.remark ? `| ${item.remark}` : ''}</div>}\n      >\n      </Cell>)\n    }\n  </div>\n};\n\nBillItem.propTypes = {\n  bill: PropTypes.object\n};\n\nexport default BillItem;\n"})}),"\n",(0,t.jsxs)(e.p,{children:["通过 ",(0,t.jsx)(e.code,{children:"npm i dayjs -S"})," 添加日期操作工具，移动端建议使用 ",(0,t.jsx)(e.code,{children:"dayjs"}),"，因为它相比 ",(0,t.jsx)(e.code,{children:"moment"}),"，体积小很多。"]}),"\n",(0,t.jsxs)(e.p,{children:["上述代码中，",(0,t.jsx)(e.code,{children:"typeMap"})," 为我们自定义的属性，它是一个简直对，",(0,t.jsx)(e.code,{children:"key"})," 为消费类型 ",(0,t.jsx)(e.code,{children:"icon"})," 的 ",(0,t.jsx)(e.code,{children:"id"}),"，",(0,t.jsx)(e.code,{children:"value"})," 为消费类型的 ",(0,t.jsx)(e.code,{children:"iconfont"})," 的值，如下所示："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// utils/index.js\n...\nexport const typeMap = {\n  1: {\n    icon: 'canyin'\n  },\n  2: {\n    icon: 'fushi'\n  },\n  3: {\n    icon: 'jiaotong'\n  },\n  4: {\n    icon: 'riyong'\n  },\n  5: {\n    icon: 'gouwu'\n  },\n  6: {\n    icon: 'xuexi'\n  },\n  7: {\n    icon: 'yiliao'\n  },\n  8: {\n    icon: 'lvxing'\n  },\n  9: {\n    icon: 'renqing'\n  },\n  10: {\n    icon: 'qita'\n  },\n  11: {\n    icon: 'gongzi'\n  },\n  12: {\n    icon: 'jiangjin'\n  },\n  13: {\n    icon: 'zhuanzhang'\n  },\n  14: {\n    icon: 'licai'\n  },\n  15: {\n    icon: 'tuikuang'\n  },\n  16: {\n    icon: 'qita'\n  }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"完成上述操作之后，我们重启浏览器，如下所示："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"样式部分大家可以根据自己的喜好进行微调，不一定要一模一样，仁者见仁。"}),"\n",(0,t.jsxs)(e.h4,{id:"下拉刷新上滑无限加载",children:["下拉刷新、上滑无限加载",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#下拉刷新上滑无限加载",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["我们修改 ",(0,t.jsx)(e.code,{children:"Home/index.jsx"})," 如下所示："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"import React, { useState, useEffect } from 'react'\nimport { Icon, Pull } from 'zarm'\nimport dayjs from 'dayjs'\nimport BillItem from '@/components/BillItem'\nimport { get, REFRESH_STATE, LOAD_STATE } from '@/utils' // Pull 组件需要的一些常量\n\nimport s from './style.module.less'\n\nconst Home = () => {\n  const [currentTime, setCurrentTime] = useState(dayjs().format('YYYY-MM')); // 当前筛选时间\n  const [page, setPage] = useState(1); // 分页\n  const [list, setList] = useState([]); // 账单列表\n  const [totalPage, setTotalPage] = useState(0); // 分页总数\n  const [refreshing, setRefreshing] = useState(REFRESH_STATE.normal); // 下拉刷新状态\n  const [loading, setLoading] = useState(LOAD_STATE.normal); // 上拉加载状态\n\n  useEffect(() => {\n    getBillList() // 初始化\n  }, [page])\n\n  // 获取账单方法\n  const getBillList = async () => {\n    const { data } = await get(`/api/bill/list?page=${page}&page_size=5&date=${currentTime}`);\n    // 下拉刷新，重制数据\n    if (page == 1) {\n      setList(data.list);\n    } else {\n      setList(list.concat(data.list));\n    }\n    setTotalPage(data.totalPage);\n    // 上滑加载状态\n    setLoading(LOAD_STATE.success);\n    setRefreshing(REFRESH_STATE.success);\n  }\n\n  // 请求列表数据\n  const refreshData = () => {\n    setRefreshing(REFRESH_STATE.loading);\n    if (page != 1) {\n      setPage(1);\n    } else {\n      getBillList();\n    };\n  };\n\n  const loadData = () => {\n    if (page < totalPage) {\n      setLoading(LOAD_STATE.loading);\n      setPage(page + 1);\n    }\n  }\n\n  return <div className={s.home}>\n    <div className={s.header}>\n      <div className={s.dataWrap}>\n        <span className={s.expense}>总支出：<b>\xa5 200</b></span>\n        <span className={s.income}>总收入：<b>\xa5 500</b></span>\n      </div>\n      <div className={s.typeWrap}>\n        <div className={s.left}>\n          <span className={s.title}>类型 <Icon className={s.arrow} type=\"arrow-bottom\" /></span>\n        </div>\n        <div className={s.right}>\n          <span className={s.time}>2022-06<Icon className={s.arrow} type=\"arrow-bottom\" /></span>\n        </div>\n      </div>\n    </div>\n    <div className={s.contentWrap}>\n      {\n        list.length ? <Pull\n          animationDuration={200}\n          stayTime={400}\n          refresh={{\n            state: refreshing,\n            handler: refreshData\n          }}\n          load={{\n            state: loading,\n            distance: 200,\n            handler: loadData\n          }}\n        >\n          {\n            list.map((item, index) => <BillItem\n              bill={item}\n              key={index}\n            />)\n          }\n        </Pull> : null\n      }\n    </div>\n  </div>\n}\n\nexport default Home\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["在 ",(0,t.jsx)(e.code,{children:"utils/index.js"})," 中添加一些 ",(0,t.jsx)(e.code,{children:"Pull"})," 组件需要用到的常量，如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// utils/index.js\nexport const REFRESH_STATE = {\n  normal: 0, // 普通\n  pull: 1, // 下拉刷新（未满足刷新条件）\n  drop: 2, // 释放立即刷新（满足刷新条件）\n  loading: 3, // 加载中\n  success: 4, // 加载成功\n  failure: 5, // 加载失败\n};\n\nexport const LOAD_STATE = {\n  normal: 0, // 普通\n  abort: 1, // 中止\n  loading: 2, // 加载中\n  success: 3, // 加载成功\n  failure: 4, // 加载失败\n  complete: 5, // 加载完成（无新数据）\n};\n"})}),"\n",(0,t.jsx)(e.p,{children:"代码中，已经为大家整理了详细的注释。无限滚动在移动端的应用随处可见，所以这块内容大家尽量能做到烂熟于心。如果有可能的话，希望你也能将其二次封装，便于多个地方的复用。我们打开浏览器查看效果："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:r,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"同学们注意一下上述动图中的细节，滑到底部的时候，有一部分内容被遮挡住了，此时我们需要添加下列样式，进行修复："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-css",children:'.home {\n  ...\n  .content-wrap {\n    height: calc(~"(100% - 50px)");\n    overflow: hidden;\n    overflow-y: scroll;\n    background-color: #f5f5f5;\n    padding: 10px;\n    :global {\n      .za-pull {\n        overflow: unset;\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["给 ",(0,t.jsx)(e.code,{children:"content-wrap"})," 对应的标签一个高度，并且减去 ",(0,t.jsx)(e.code,{children:"50px"})," 的高度，这样就不会被遮挡住下面一点的部分。"]}),"\n",(0,t.jsxs)(e.p,{children:["还有一个很关键的步骤，给 ",(0,t.jsx)(e.code,{children:"src"})," 目录下的的 ",(0,t.jsx)(e.code,{children:"index.css"})," 添加初始化高度和样式："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-css",children:"body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nbody, html, p {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n#root {\n  height: 100%;\n}\n\n.text-deep {\n  color: rgba(0, 0, 0, 0.9)\n}\n\n.text-light {\n  color: rgba(0, 0, 0, 0.6)\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"至此，滚动加载基本上就完成了。"}),"\n",(0,t.jsxs)(e.h4,{id:"添加筛选条件",children:["添加筛选条件",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#添加筛选条件",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"最后我们需要添加两个筛选条件，类型选择和日期选择。"}),"\n",(0,t.jsx)(e.p,{children:"我们先来实现类型选择弹窗，我们采用的形式如下，底部弹出的弹窗形式，大致如下："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsxs)(e.p,{children:["想要实现上述形式，我们需要借助 ",(0,t.jsx)(e.code,{children:"Zarm"})," 组件库为我们提供的 ",(0,t.jsx)(e.a,{href:"https://zarm.gitee.io/#/components/popup",target:"_blank",rel:"noopener noreferrer",children:"Popup"})," 组件，它的作用就是从不同方向弹出一个脱离文档流的弹出层。同样，我们使用组件的形式将其放置于 ",(0,t.jsx)(e.code,{children:"components"})," 文件夹内实现，这样便于后续其他地方的使用。"]}),"\n",(0,t.jsxs)(e.p,{children:["新建 ",(0,t.jsx)(e.code,{children:"components/PopupType"}),"，在其内部新建 ",(0,t.jsx)(e.code,{children:"index.jsx"})," 和 ",(0,t.jsx)(e.code,{children:"style.module.less"})," 内容如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// PopupType/index.jsx\nimport React, { forwardRef, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Popup, Icon } from 'zarm'\nimport cx from 'classnames'\nimport { get } from '@/utils'\n\nimport s from './style.module.less'\n\n// forwardRef 用于拿到父组件传入的 ref 属性，这样在父组件便能通过 ref 控制子组件。\nconst PopupType = forwardRef(({ onSelect }, ref) => {\n  const [show, setShow] = useState(false); // 组件的显示和隐藏\n  const [active, setActive] = useState('all'); // 激活的 type\n  const [expense, setExpense] = useState([]); // 支出类型标签\n  const [income, setIncome] = useState([]); // 收入类型标签\n\n  useEffect(async () => {\n    // 请求标签接口放在弹窗内，这个弹窗可能会被复用，所以请求如果放在外面，会造成代码冗余。\n    const { data: { list } } = await get('/api/type/list')\n    setExpense(list.filter(i => i.type == 1))\n    setIncome(list.filter(i => i.type == 2))\n  }, [])\n\n  if (ref) {\n    ref.current = {\n      // 外部可以通过 ref.current.show 来控制组件的显示\n      show: () => {\n        setShow(true)\n      },\n      // 外部可以通过 ref.current.close 来控制组件的显示\n      close: () => {\n        setShow(false)\n      }\n    }\n  };\n\n  // 选择类型回调\n  const choseType = (item) => {\n    setActive(item.id)\n    setShow(false)\n    // 父组件传入的 onSelect，为了获取类型\n    onSelect(item)\n  };\n\n  return <Popup\n    visible={show}\n    direction=\"bottom\"\n    onMaskClick={() => setShow(false)}\n    destroy={false}\n    mountContainer={() => document.body}\n  >\n    <div className={s.popupType}>\n      <div className={s.header}>\n        请选择类型\n        <Icon type=\"wrong\" className={s.cross} onClick={() => setShow(false)} />\n      </div>\n      <div className={s.content}>\n        <div onClick={() => choseType({ id: 'all' })} className={cx({ [s.all]: true, [s.active]: active == 'all' })}>全部类型</div>\n        <div className={s.title}>支出</div>\n        <div className={s.expenseWrap}>\n          {\n            expense.map((item, index) => <p key={index} onClick={() => choseType(item)} className={cx({[s.active]: active == item.id})} >{ item.name }</p>)\n          }\n        </div>\n        <div className={s.title}>收入</div>\n        <div className={s.incomeWrap}>\n          {\n            income.map((item, index) => <p key={index} onClick={() => choseType(item)} className={cx({[s.active]: active == item.id})} >{ item.name }</p>)\n          }\n        </div>\n      </div>\n    </div>\n  </Popup>\n});\n\nPopupType.propTypes = {\n  onSelect: PropTypes.func\n}\n\nexport default PopupType;\n"})}),"\n",(0,t.jsx)(e.p,{children:"老规矩，代码逻辑注释我都写在代码中，我坚持不把注释和逻辑分开，是因为我自己在看其他教程的时候，遇到代码中没写逻辑的文章，来回看下边的注释和上边的代码，有点乱，如果同学们有疑问，可以进群截图咨询，我在群里看到的话，随时进行解答。"}),"\n",(0,t.jsxs)(e.p,{children:["类型弹窗组件写完之后，我们在 ",(0,t.jsx)(e.code,{children:"Home/index.jsx"})," 内尝试调用它，如下所示："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"...\nimport PopupType from '@/components/PopupType'\n\nconst Home = () => {\n  const typeRef = useRef(); // 账单类型 ref\n  const [currentSelect, setCurrentSelect] = useState({}); // 当前筛选类型\n  ...\n\n  useEffect(() => {\n    getBillList() // 初始化\n  }, [page, currentSelect])\n\n  const getBillList = async () => {\n    const { data } = await get(`/api/bill/list?page=${page}&page_size=5&date=${currentTime}&type_id=${currentSelect.id || 'all'}`);\n    // 下拉刷新，重制数据\n    if (page == 1) {\n      setList(data.list);\n    } else {\n      setList(list.concat(data.list));\n    }\n    setTotalPage(data.totalPage);\n    // 上滑加载状态\n    setLoading(LOAD_STATE.success);\n    setRefreshing(REFRESH_STATE.success);\n  }\n\n  ...\n\n  // 添加账单弹窗\n  const toggle = () => {\n    typeRef.current && typeRef.current.show()\n  };\n\n  // 筛选类型\n  const select = (item) => {\n    setRefreshing(REFRESH_STATE.loading);\n    // 触发刷新列表，将分页重制为 1\n    setPage(1);\n    setCurrentSelect(item)\n  }\n\n  return <div className={s.home}>\n    <div className={s.header}>\n      <div className={s.dataWrap}>\n        <span className={s.expense}>总支出：<b>\xa5 200</b></span>\n        <span className={s.income}>总收入：<b>\xa5 500</b></span>\n      </div>\n      <div className={s.typeWrap}>\n        <div className={s.left} onClick={toggle}>\n          <span className={s.title}>{ currentSelect.name || '全部类型' } <Icon className={s.arrow} type=\"arrow-bottom\" /></span>\n        </div>\n        <div className={s.right}>\n          <span className={s.time}>2022-06<Icon className={s.arrow} type=\"arrow-bottom\" /></span>\n        </div>\n      </div>\n    </div>\n    <div className={s.contentWrap}>\n      {\n        list.length ? <Pull\n          animationDuration={200}\n          stayTime={400}\n          refresh={{\n            state: refreshing,\n            handler: refreshData\n          }}\n          load={{\n            state: loading,\n            distance: 200,\n            handler: loadData\n          }}\n        >\n          {\n            list.map((item, index) => <BillItem\n              bill={item}\n              key={index}\n            />)\n          }\n        </Pull> : null\n      }\n    </div>\n    <PopupType ref={typeRef} onSelect={select} />\n  </div>\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"添加类型选择弹窗注意几个点："}),"\n",(0,t.jsxs)(e.p,{children:["1、使用 ",(0,t.jsx)(e.code,{children:"useState"})," 声明好类型字段。\n2、通过 ",(0,t.jsx)(e.code,{children:"useRef"})," 声明的 ref 给到 ",(0,t.jsx)(e.code,{children:"PopupType"})," 组件，便于控制内部的方法。\n3、传递 ",(0,t.jsx)(e.code,{children:"onSelect"})," 方法，获取到弹窗内部选择的类型。\n4、",(0,t.jsx)(e.code,{children:"useEffect"})," 第二个参数，添加一个 ",(0,t.jsx)(e.code,{children:"currentSelect"})," 以来，便于修改的时候，触发列表的重新渲染。"]}),"\n",(0,t.jsxs)(e.p,{children:["有一个有趣的知识点，这里和大家分享一下，你尝试去打印 ",(0,t.jsx)(e.code,{children:"typeRef"})," 变量，如下所示："]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsxs)(e.p,{children:["可以看到，在 ",(0,t.jsx)(e.code,{children:"PopupType"})," 组件内挂载的方法，可以在父组件内获取到，那么我们便可以直接把弹窗的显示隐藏参数放在子组件内维护，而不用每次都去在父组件声明 ",(0,t.jsx)(e.code,{children:"show"})," 或 ",(0,t.jsx)(e.code,{children:"hide"}),"。"]}),"\n",(0,t.jsxs)(e.p,{children:["加完类型筛选之后，我们再将时间筛选加上，同样将时间筛选添加至 ",(0,t.jsx)(e.code,{children:"components"})," 目录下，便于后续数据页面的时间筛选。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"// PopupDate/index.jsx\nimport React, { forwardRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Popup, DatePicker  } from 'zarm'\nimport dayjs from 'dayjs' \n\nconst PopupDate = forwardRef(({ onSelect, mode = 'date' }, ref) => {\n  const [show, setShow] = useState(false)\n  const [now, setNow] = useState(new Date())\n\n  const choseMonth = (item) => {\n    setNow(item)\n    setShow(false)\n    if (mode == 'month') {\n      onSelect(dayjs(item).format('YYYY-MM'))\n    } else if (mode == 'date') {\n      onSelect(dayjs(item).format('YYYY-MM-DD'))\n    }\n  }\n\n  if (ref) {\n    ref.current = {\n      show: () => {\n        setShow(true)\n      },\n      close: () => {\n        setShow(false)\n      }\n    }\n  };\n  return <Popup\n    visible={show}\n    direction=\"bottom\"\n    onMaskClick={() => setShow(false)}\n    destroy={false}\n    mountContainer={() => document.body}\n  >\n    <div>\n      <DatePicker\n        visible={show}\n        value={now}\n        mode={mode}\n        onOk={choseMonth}\n        onCancel={() => setShow(false)}\n      />\n    </div>\n  </Popup>\n});\n\nPopupDate.propTypes = {\n  mode: PropTypes.string, // 日期模式\n  onSelect: PropTypes.func, // 选择后的回调\n}\n\nexport default PopupDate;\n"})}),"\n",(0,t.jsxs)(e.p,{children:["底部时间弹窗逻辑和类型选择的逻辑相似，这里不做赘述，直接在 ",(0,t.jsx)(e.code,{children:"Home/index.jsx"})," 中引入时间筛选框："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'// Home/index.jsx \n...\nimport PopupDate from \'@/components/PopupDate\'\n\nconst Home = () => {\n  ... \n  const monthRef = useRef(); // 月份筛选 ref\n\n  useEffect(() => {\n    getBillList() // 初始化\n  }, [page, currentSelect, currentTime])\n\n  ... \n\n  // 选择月份弹窗\n  const monthToggle = () => {\n    monthRef.current && monthRef.current.show()\n  };\n\n  // 筛选月份\n  const selectMonth = (item) => {\n    setRefreshing(REFRESH_STATE.loading);\n    setPage(1);\n    setCurrentTime(item)\n  }\n\n  return <div className={s.home}>\n    ... \n    <div className={s.right}>\n      <span className={s.time} onClick={monthToggle}>{ currentTime }<Icon className={s.arrow} type="arrow-bottom" /></span>\n    </div>\n    ... \n\n    <PopupDate ref={monthRef} mode="month" onSelect={selectMonth} />\n  </div>\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"刷新浏览器如下所示："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsxs)(e.p,{children:["最后不要忘记计算当前月份的收入和支出汇总数据，放置于头部，修改 ",(0,t.jsx)(e.code,{children:"Home/index.jsx"})," 内的代码如下："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"... \nconst Home = () => {\n  ... \n  const [totalExpense, setTotalExpense] = useState(0); // 总支出\n  const [totalIncome, setTotalIncome] = useState(0); // 总收入\n\n  const getBillList = async () => {\n    const { data } = await get(`/api/bill/list?page=${page}&page_size=5&date=${currentTime}&type_id=${currentSelect.id || 'all'}`);\n    // 下拉刷新，重制数据\n    if (page == 1) {\n      setList(data.list);\n    } else {\n      setList(list.concat(data.list));\n    }\n    setTotalExpense(data.totalExpense.toFixed(2));\n    setTotalIncome(data.totalIncome.toFixed(2));\n    setTotalPage(data.totalPage);\n    // 上滑加载状态\n    setLoading(LOAD_STATE.success);\n    setRefreshing(REFRESH_STATE.success);\n  }\n\n  return <div className={s.home}>\n    ... \n    <div className={s.dataWrap}>\n      <span className={s.expense}>总支出：<b>\xa5 { totalExpense }</b></span>\n      <span className={s.income}>总收入：<b>\xa5 { totalIncome }</b></span>\n    </div>\n    ...\n  <div>\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"最终展示效果如下所示："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsxs)(e.h2,{id:"总结",children:["总结",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"本章节的内容，偏向实战，而实战部分代码在文章的重复率不可避免，这里大家把握好本章节两个重要知识点："}),"\n",(0,t.jsx)(e.p,{children:"1、无限加载、下拉刷新。"}),"\n",(0,t.jsx)(e.p,{children:"2、公用组件提取，如弹窗组件、账单组件。"}),"\n",(0,t.jsx)(e.p,{children:"这两个知识点在实战中，用到的非常多，希望同学们能重视。"})]})}function x(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}let u=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["Node%20%2B%20React%20%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E8%AE%B0%E8%B4%A6%E6%9C%AC%2F16.%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E8%B4%A6%E5%8D%95%E5%88%97%E8%A1%A8%E9%A1%B5.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"知识点",id:"知识点",depth:4},{text:"列表页编写（静态部分）",id:"列表页编写静态部分",depth:2},{text:"头部统计实现",id:"头部统计实现",depth:4},{text:"列表页面实现",id:"列表页面实现",depth:4},{text:"下拉刷新、上滑无限加载",id:"下拉刷新上滑无限加载",depth:4},{text:"添加筛选条件",id:"添加筛选条件",depth:4},{text:"总结",id:"总结",depth:2}],title:"16.前端实战：账单列表页",headingTitle:"16.前端实战：账单列表页",frontmatter:{}}}}]);