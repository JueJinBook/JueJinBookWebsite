"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["27153"],{959650:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var c=s(552676),r=s(740453);let d=s.p+"static/image/f8f5d295b951a323777888ebcb43a5e7.4034718e.webp",l=s.p+"static/image/ad80eb988a8c5679cca9ae082e45de97.b37e9b89.webp",i=s.p+"static/image/807390fe91d7f10e5504d4ed3e6bae8e.977c38ac.webp";function h(e){let n=Object.assign({h2:"h2",a:"a",p:"p",strong:"strong",h3:"h3",blockquote:"blockquote",h4:"h4",code:"code",pre:"pre",img:"img",ol:"ol",li:"li",ul:"ul"},(0,r.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h2,{id:"前言",children:["前言",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["本篇介绍",(0,c.jsx)(n.strong,{children:"环境变量"}),"、",(0,c.jsx)(n.strong,{children:"路径别名"}),"、",(0,c.jsx)(n.strong,{children:"src 目录"}),"三大块内容，主要是介绍环境变量的使用。Next.js 提供了更为强大便捷的环境变量使用方式，让我们来看看吧。"]}),"\n",(0,c.jsxs)(n.h2,{id:"1-环境变量",children:["1. 环境变量",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-环境变量",children:"#"})]}),"\n",(0,c.jsxs)(n.h3,{id:"11-概念介绍",children:["1.1 概念介绍",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-概念介绍",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["所谓环境变量（environment variables），引用",(0,c.jsx)(n.a,{href:"https://baike.baidu.com/item/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/1730949",target:"_blank",rel:"noopener noreferrer",children:"百度百科的解释"}),"："]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"环境变量一般是指在操作系统中用来指定操作系统运行环境的一些参数，如：临时文件夹位置和系统文件夹位置等。"}),"\n",(0,c.jsx)(n.p,{children:"环境变量是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。例如 Windows 和 DOS 操作系统中的 path 环境变量，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到 path 中指定的路径去找。用户通过设置环境变量，来更好的运行进程。"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"简单的来说，如果我们把操作系统想象成一门语言，就比如 JavaScript，各种程序对应的就是声明的各种函数，而环境变量对应的就是 JavaScript 中的全局变量。各个函数（各个程序）都可以使用这些变量。"}),"\n",(0,c.jsxs)(n.h4,{id:"相关命令",children:["相关命令",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#相关命令",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["我们常见的 ",(0,c.jsx)(n.code,{children:"PATH"})," 只是其中一个环境变量。以 MacOS 系统为例的话（以下命令都是在 MacOS，Windows 中会有差别），我们可以在命令行中输入 ",(0,c.jsx)(n.code,{children:"printenv"})," 查看所有环境变量："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"printenv\n"})}),"\n",(0,c.jsx)(n.p,{children:"输出结果如下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:"还有很多，就不一一描述了"})}),"\n",(0,c.jsx)(n.p,{children:"可以看出，环境变量的命名一般是全部大写。"}),"\n",(0,c.jsxs)(n.p,{children:["如果要查看某个特定环境变量，可以使用 ",(0,c.jsx)(n.code,{children:"printenv"}),"，也可以使用 ",(0,c.jsx)(n.code,{children:"echo"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"// 方式 1\nprintenv PATH\n\n// 方式 2\necho $PATH\n"})}),"\n",(0,c.jsxs)(n.p,{children:["如果你要添加或者修改某个环境变量，可以使用 ",(0,c.jsx)(n.code,{children:"export"}),"命令："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"// 1. 设置\nexport YAYUCUSTOM=yayu\n// 2. 打印\necho $YAYUCUSTOM\n"})}),"\n",(0,c.jsxs)(n.p,{children:["不过使用这种方式，效果是临时的，只会在本次登录生效，关掉命令行再重启就失效了，不过有的时候，这也够了。比如我们在 ",(0,c.jsx)(n.code,{children:"package.json"})," 中看到这样的配置："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'"scripts": {\n    "dev": "export NODE_ENV=development && node index.js",\n    "prod": "export NODE_ENV=production && node index.js"\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"index.js"}),"中就可以通过 ",(0,c.jsx)(n.code,{children:"process.env.NODE_ENV"})," 获取到设置的 ",(0,c.jsx)(n.code,{children:"NODE_ENV"})," 的值："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 打印的结果根据设置的值不同而不同\nconsole.log(process.env.NODE_ENV)\n"})}),"\n",(0,c.jsx)(n.p,{children:"那如何长久的修改某个环境变量呢？这个就稍微有点复杂了，有很多文件都可以修改环境变量，根据系统以及系统版本的不同会有所不同。以 mac 的 bash 为例的话，文件的顺序为："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"/etc/profile\n/etc/paths \n/etc/paths.d/\n~/.bash_profile \n~/.bash_login\n~/.profile\n~/.bashrc\n"})}),"\n",(0,c.jsxs)(n.p,{children:["其中，以 ",(0,c.jsx)(n.code,{children:"/etc"}),"开头的目录是系统级别的环境变量定义，其他则是用户级别的环境变量定义。一般来说，使用 ",(0,c.jsx)(n.code,{children:"bash"})," 建议修改 ",(0,c.jsx)(n.code,{children:"~/.bash_profile"}),"，使用 ",(0,c.jsx)(n.code,{children:"zsh"})," 建议修改 ",(0,c.jsx)(n.code,{children:"~/.zshrc"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["Mac 使用 ",(0,c.jsx)(n.code,{children:"zsh"})," 或 ",(0,c.jsx)(n.code,{children:"bash"})," 作为登录 Shell 和交互式 Shell 的命令行解释器。从 macOS Catalina 开始，Mac 使用 ",(0,c.jsx)(n.code,{children:"zsh"})," 作为默认登录 Shell 和交互式 Shell。",(0,c.jsx)(n.code,{children:"bash"})," 是 macOS Mojave 及更早版本中的默认 Shell。"]}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"bash"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"// 1. 修改文件\nvim ~/.bash_profile\n// 2. 添加内容\nexport YAYU_CUSOTM=yayu\n// 3. 使用 wq 命令退出保存后执行使其生效\nsource  ~/.bash_profile\n// 4. 查看生效\necho $YAYU_CUSOTM\n"})}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"zsh"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"// 1. 修改文件\nvim  ~/.zshrc\n// 2. 添加内容\nexport YAYU_CUSOTM=yayu\n// 3. 使用 :wq 命令退出保存后执行使其生效\nsource  ~/.zshrc\n// 4. 查看生效\necho $YAYU_CUSOTM\n"})}),"\n",(0,c.jsx)(n.p,{children:"如果你遇到设置完后，当时有效，重启终端后就会失效，可能是你使用的 shell 有问题，查看当前使用的 Shell："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"echo $SHELL\n"})}),"\n",(0,c.jsxs)(n.p,{children:["切换成 ",(0,c.jsx)(n.code,{children:"zsh"})," 或 ",(0,c.jsx)(n.code,{children:"bash"})," （执行命令后重启终端）："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"// 切换成 zsh\nchsh -s /bin/zsh\n// 切换成 bash\nchsh -s /bin/bash\n"})}),"\n",(0,c.jsxs)(n.h4,{id:"processenv",children:["process.env",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#processenv",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["Nodejs 提供了 ",(0,c.jsx)(n.code,{children:"process.env"})," API 返回包含用户环境的对象，简单的来说，这是 Nodejs 提供的在 node 中获取环境变量的方法。此对象示例如下所示："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"{\n  TERM: 'xterm-256color',\n  SHELL: '/usr/local/bin/bash',\n  USER: 'maciej',\n  PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',\n  PWD: '/Users/maciej',\n  EDITOR: 'vim',\n  SHLVL: '1',\n  HOME: '/Users/maciej',\n  LOGNAME: 'maciej',\n  _: '/usr/local/bin/node'\n}\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"12-nextjs-实现",children:["1.2 Next.js 实现",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-nextjs-实现",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"在 Next.js 中添加环境变量会更加方便，因为 Next.js 内置了对环境变量的支持，使用环境变量有两种方式："}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["通过 ",(0,c.jsx)(n.code,{children:".env.local"})," 加载环境变量"]}),"\n",(0,c.jsxs)(n.li,{children:["通过 ",(0,c.jsx)(n.code,{children:"NEXT_PUBLIC_"}),"前缀在浏览器中获取环境变量"]}),"\n"]}),"\n",(0,c.jsxs)(n.h4,{id:"19配置篇-_-环境变量路径别名与-src-目录-加载环境变量",children:["19.配置篇 _ 环境变量、路径别名与 src 目录 加载环境变量",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#19配置篇-_-环境变量路径别名与-src-目录-加载环境变量",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["Next.js 支持从 ",(0,c.jsx)(n.code,{children:".env.local"}),"中加载环境变量到 ",(0,c.jsx)(n.code,{children:"process.env"}),"。现在我们在项目根目录下建立一个 ",(0,c.jsx)(n.code,{children:".env.local"}),"文件（注意是根目录，不是 ",(0,c.jsx)(n.code,{children:"/src"}),"目录）"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"DB_HOST=localhost\nDB_USER=myuser\nDB_PASS=mypassword\n"})}),"\n",(0,c.jsxs)(n.p,{children:["现在我们就可以服务端组件或者路由处理程序中通过 ",(0,c.jsx)(n.code,{children:"process.env"}),"获取到该值："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nexport default function Page() {\n  console.log(process.env.DB_HOST)\n  return <h1>Hello World!</h1>\n}\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// app/api/route.js\nexport async function GET() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"使用起来就是这么方便。Next.js 也支持多行变量，示例代码如下："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'# 19.配置篇 _ 环境变量、路径别名与 src 目录\n \n# 直接换行\nPRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\n...\nKh9NV...\n...\n-----END DSA PRIVATE KEY-----"\n \n# 也可以使用 `\\n`\nPRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\\nKh9NV...\\n-----END DSA PRIVATE KEY-----\\n"\n'})}),"\n",(0,c.jsxs)(n.p,{children:["Nxt.js 也支持使用 ",(0,c.jsx)(n.code,{children:"$"}),"引用其他变量，举个例子："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"TWITTER_USER=nextjs\nTWITTER_URL=https://twitter.com/$TWITTER_USER\n"})}),"\n",(0,c.jsxs)(n.p,{children:["在这个例子中，",(0,c.jsx)(n.code,{children:"process.env.TWITTER_URL"})," 的值为 ",(0,c.jsx)(n.code,{children:"https://twitter.com/nextjs"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["如果你本来就要用带 ",(0,c.jsx)(n.code,{children:"$"}),"的值，使用 ",(0,c.jsx)(n.code,{children:"\\$"}),"这种方式进行转义即可。"]}),"\n",(0,c.jsxs)(n.h4,{id:"浏览器中获取环境变量",children:["浏览器中获取环境变量",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#浏览器中获取环境变量",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["前面我们讲到，",(0,c.jsx)(n.code,{children:"process.env"})," 是 Nodejs 提供的用于获取用户环境变量对象的 API。也就是说，正常在 ",(0,c.jsx)(n.code,{children:".env.local"})," 中设置的变量，是无法在浏览器端获取的。"]}),"\n",(0,c.jsxs)(n.p,{children:["为了让浏览器也可以获取环境变量中的值，Next.js 可以在构建的时候，将值内联到客户端的 js bundle 中，替换掉所有硬编码使用 ",(0,c.jsx)(n.code,{children:"process.env.[variable]"}),"的地方。不过为了告诉 Next.js 哪些值是可以让浏览器访问的，你需要在变量前添加 ",(0,c.jsx)(n.code,{children:"NEXT_PUBLIC_"}),"前缀，比如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"NEXT_PUBLIC_ANALYTICS_ID=abcdefghijk\n"})}),"\n",(0,c.jsxs)(n.p,{children:["现在我们再通过 ",(0,c.jsx)(n.code,{children:"process.env.NEXT_PUBLIC_ANALYTICS_ID"})," 获取："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"'use client';\n// app/page.js\nexport default function Page() {\n  return <h1 onClick={() => {\n    console.log(process.env.NEXT_PUBLIC_ANALYTICS_ID)\n  }}>Hello World!</h1>\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["如果没有 ",(0,c.jsx)(n.code,{children:"NEXT_PUBLIC_"}),"前缀，正常点击的时候获取的值会是 ",(0,c.jsx)(n.code,{children:"undefined"})," ，添加 ",(0,c.jsx)(n.code,{children:"NEXT_PUBLIC_"}),"前缀后即可获取到正确的值。不过你要记得这里的原理，其实是在构建的时候，将所有 ",(0,c.jsx)(n.code,{children:"NEXT_PUBLIC_"}),"前缀的值做了替换，也就是在代码中，点击事件的代码就已经变成了："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"此外要注意，动态查找的值不会被内联，比如："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 使用了变量，不会被内联，不会生效\nconst varName = 'NEXT_PUBLIC_ANALYTICS_ID'\nsetupAnalyticsService(process.env[varName])\n \n// 使用了变量，不会被内联，不会生效\nconst env = process.env\nsetupAnalyticsService(env.NEXT_PUBLIC_ANALYTICS_ID)\n"})}),"\n",(0,c.jsxs)(n.h4,{id:"默认环境变量",children:["默认环境变量",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#默认环境变量",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["通常一个 ",(0,c.jsx)(n.code,{children:".env.local"}),"文件就够用了，但有的时候，你也许会希望在 ",(0,c.jsx)(n.code,{children:"development"}),"（",(0,c.jsx)(n.code,{children:"next dev"}),"）或 ",(0,c.jsx)(n.code,{children:"production"}),"（",(0,c.jsx)(n.code,{children:"next start"}),"）环境中添加一些默认值。"]}),"\n",(0,c.jsxs)(n.p,{children:["Next.js 支持在 ",(0,c.jsx)(n.code,{children:".env"}),"（所有环境）、",(0,c.jsx)(n.code,{children:".env.development"}),"（开发环境）、",(0,c.jsx)(n.code,{children:".env.production"}),"（生产环境）中设置默认的值。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:".env.local"}),"会覆盖这些默认值。"]}),"\n",(0,c.jsxs)(n.p,{children:["注意：",(0,c.jsx)(n.code,{children:".env"}),"、",(0,c.jsx)(n.code,{children:".env.development"}),"、",(0,c.jsx)(n.code,{children:".env.production"})," 用来设置默认的值，所有这些文件可以放到仓库中，但 ",(0,c.jsx)(n.code,{children:".env*.local"}),"应该添加到 ",(0,c.jsx)(n.code,{children:".gitignore"}),"，因为可能涉及到一些机密的信息。"]}),"\n",(0,c.jsxs)(n.p,{children:["此外，如果环境变量 NODE_ENV 未设置，当执行 ",(0,c.jsx)(n.code,{children:"next dev"}),"的时候，Next.js 会自动给 ",(0,c.jsx)(n.code,{children:"NODE_DEV"}),"赋值 ",(0,c.jsx)(n.code,{children:"development"}),"，其他命令则会赋值 ",(0,c.jsx)(n.code,{children:"production"}),"。也就是说，当执行 ",(0,c.jsx)(n.code,{children:"next dev"}),"或者其他命令的时候，获取",(0,c.jsx)(n.code,{children:"process.env.NODE_ENV"}),"是有值的，这是 Next.js 自动赋值的，为了帮助开发者区分开发环境。"]}),"\n",(0,c.jsxs)(n.h4,{id:"测试环境变量",children:["测试环境变量",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#测试环境变量",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["除了 ",(0,c.jsx)(n.code,{children:"development"}),"环境和 ",(0,c.jsx)(n.code,{children:"production"}),"环境，还有第三个选项，那就是 ",(0,c.jsx)(n.code,{children:"test"}),"环境。这是当使用测试工具如 ",(0,c.jsx)(n.code,{children:"jest"}),"或 ",(0,c.jsx)(n.code,{children:"cypress"}),"时，出于测试目的而设置特定的环境变量。"]}),"\n",(0,c.jsxs)(n.p,{children:["用法跟开发环境、生产环境类似，建立一个 ",(0,c.jsx)(n.code,{children:".env.test"}),"文件用于测试环境，但是跟开发环境、生产环境不同的是，测试环境不会加载 ",(0,c.jsx)(n.code,{children:".env.local"}),"中的值，这是为了让每个人都产生相同的测试结果。这些默认值会在 ",(0,c.jsx)(n.code,{children:"NODE_DEV"}),"设置成 ",(0,c.jsx)(n.code,{children:"test"}),"的时候用到。"]}),"\n",(0,c.jsxs)(n.h4,{id:"环境变量加载顺序",children:["环境变量加载顺序",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#环境变量加载顺序",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"环境变量的查找也是有顺序的，一旦找到，就会终止查找，不会再往下查找，这个顺序是："}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"process.env"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:".env.$(NODE_ENV).local"})}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:".env.local"})," (当 ",(0,c.jsx)(n.code,{children:"NODE_ENV"})," 是 ",(0,c.jsx)(n.code,{children:"test"})," 的时候不会查找)"]}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:".env.$(NODE_ENV)"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:".env"})}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["举个例子，如果你在 ",(0,c.jsx)(n.code,{children:".env.development.local"})," 和 ",(0,c.jsx)(n.code,{children:".env"}),"中设置了 ",(0,c.jsx)(n.code,{children:"NODE_ENV"})," 为 ",(0,c.jsx)(n.code,{children:"development"}),"，按照这个顺序，最终会使用 ",(0,c.jsx)(n.code,{children:".env.development.local"}),"中的值。"]}),"\n",(0,c.jsxs)(n.h2,{id:"2-绝对地址导入和模块路径别名",children:["2. 绝对地址导入和模块路径别名",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-绝对地址导入和模块路径别名",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["Next.js 的 ",(0,c.jsx)(n.code,{children:"tsconfig.json"}),"和",(0,c.jsx)(n.code,{children:"jsconfig.json"}),"文件支持设置 ",(0,c.jsx)(n.code,{children:'"paths"'}),"和 ",(0,c.jsx)(n.code,{children:'"baseUrl"'}),"选项。"]}),"\n",(0,c.jsx)(n.p,{children:"这些配置会帮助你更方便的导入模块，举个例子："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// before\nimport { Button } from '../../../components/button'\n \n// after\nimport { Button } from '@/components/button'\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"21-绝对地址导入",children:["2.1. 绝对地址导入",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-绝对地址导入",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"baseUrl"}),"配置项可以让你从项目根目录中直接导入。使用示例如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'// tsconfig.json or jsconfig.json\n{\n  "compilerOptions": {\n    "baseUrl": "."\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["我们声明 ",(0,c.jsx)(n.code,{children:"baseUrl"}),"为 ",(0,c.jsx)(n.code,{children:'"."'}),"，也就是项目根目录。现在我们在根目录下的 ",(0,c.jsx)(n.code,{children:"components"}),"文件夹下新建一个组件："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// components/button.js\nexport default function Button() {\n  return <button>Click me</button>\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"现在我们导入该组件，不需要再使用相对地址，当嵌套多层引入组件时候就会很方便："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport Button from '/components/button'\n \nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"22-模块别名",children:["2.2. 模块别名",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-模块别名",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["除了配置 ",(0,c.jsx)(n.code,{children:"baseUrl"})," 路径之外，你也可以设置 ",(0,c.jsx)(n.code,{children:'"paths"'})," 选项实现路径别名。举个例子："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'// tsconfig.json or jsconfig.json\n{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "@/components/*": ["components/*"]\n    }\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["在这个例子中，我们设置了一个路径映射，",(0,c.jsx)(n.code,{children:"@/components/*"})," 到 ",(0,c.jsx)(n.code,{children:'"components/*'}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// components/button.js\nexport default function Button() {\n  return <button>Click me</button>\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"现在我们不需要使用相对地址，使用设置的路径别名即可："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport Button from '@/components/button'\n \nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["那 ",(0,c.jsx)(n.code,{children:"baseUrl"}),"和 ",(0,c.jsx)(n.code,{children:"paths:"}),"是什么关系呢？事实上，",(0,c.jsx)(n.code,{children:"paths"})," 中的地址是相对于 ",(0,c.jsx)(n.code,{children:"baseUrl"})," 的，举个例子："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'// tsconfig.json or jsconfig.json\n{\n  "compilerOptions": {\n    "baseUrl": "src/",\n    "paths": {\n      "@/styles/*": ["styles/*"],\n      "@/components/*": ["components/*"]\n    }\n  }\n}\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// pages/index.js\nimport Button from '@/components/button'\nimport '@/styles/styles.css'\nimport Helper from 'utils/helper'\n \nexport default function HomePage() {\n  return (\n    <Helper>\n      <h1>Hello World</h1>\n      <Button />\n    </Helper>\n  )\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"@/components/button"}),"最终的地址其实是 ",(0,c.jsx)(n.code,{children:"src/components/button"}),"，其他地址同理。"]}),"\n",(0,c.jsxs)(n.h2,{id:"3-src-目录",children:["3. src 目录",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-src-目录",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["至今我们都是把代码放在根目录下的",(0,c.jsx)(n.code,{children:"app"})," 或 ",(0,c.jsx)(n.code,{children:"pages"})," 目录下，但 Next.js 也支持 ",(0,c.jsx)(n.code,{children:"src"})," 目录，将代码放在  ",(0,c.jsx)(n.code,{children:"src"})," 目录下有助于实现应用程序代码和项目配置文件（多在项目根目录）分离。"]}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"src"})," 目录，将 ",(0,c.jsx)(n.code,{children:"app"})," 下或者 ",(0,c.jsx)(n.code,{children:"pages"})," 下的文件移动到 ",(0,c.jsx)(n.code,{children:"src/app"})," 或 ",(0,c.jsx)(n.code,{children:"src/pages"})," 即可："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"调整的时候注意："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"/public"}),"目录继续放在项目根目录"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"package.json"}),"、",(0,c.jsx)(n.code,{children:"next.config.js"}),"、",(0,c.jsx)(n.code,{children:"tsconfig.json"})," 等配置文件继续放在项目根目录"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:".env.*"})," 文件继续放在项目根目录"]}),"\n",(0,c.jsxs)(n.li,{children:["如果 ",(0,c.jsx)(n.code,{children:"app"})," 或者 ",(0,c.jsx)(n.code,{children:"pages"})," 在根目录下存在，",(0,c.jsx)(n.code,{children:"src/app"})," 或 ",(0,c.jsx)(n.code,{children:"src/pages"})," 会被忽略。"]}),"\n",(0,c.jsxs)(n.li,{children:["如果你正在使用 ",(0,c.jsx)(n.code,{children:"src"}),"，你可能还需要移动其他应用文件夹，如 ",(0,c.jsx)(n.code,{children:"/components"})," 或 ",(0,c.jsx)(n.code,{children:"/lib"})]}),"\n",(0,c.jsxs)(n.li,{children:["如果你正在使用中间件，确保它放在 ",(0,c.jsx)(n.code,{children:"src"})," 目录下"]}),"\n",(0,c.jsxs)(n.li,{children:["如果你正在使用 Tailwind CSS，别忘了修改 ",(0,c.jsx)(n.code,{children:"tailwind.config.js"})," 中的 ",(0,c.jsx)(n.code,{children:"content"})," 配置项："]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/**/*.{html,js}',\n  ],\n  // ...\n}\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://support.apple.com/zh-cn/HT208050",target:"_blank",rel:"noopener noreferrer",children:"在 Mac 上将 zsh 用作默认 Shell"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/configuring/environment-variables",target:"_blank",rel:"noopener noreferrer",children:"Configuring: Environment Variables"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/configuring/absolute-imports-and-module-aliases",target:"_blank",rel:"noopener noreferrer",children:"Configuring: Absolute Imports and Module Path Aliases"})}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}let a=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F19.%E9%85%8D%E7%BD%AE%E7%AF%87%20_%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E3%80%81%E8%B7%AF%E5%BE%84%E5%88%AB%E5%90%8D%E4%B8%8E%20src%20%E7%9B%AE%E5%BD%95.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. 环境变量",id:"1-环境变量",depth:2},{text:"1.1 概念介绍",id:"11-概念介绍",depth:3},{text:"相关命令",id:"相关命令",depth:4},{text:"process.env",id:"processenv",depth:4},{text:"1.2 Next.js 实现",id:"12-nextjs-实现",depth:3},{text:"19.配置篇 _ 环境变量、路径别名与 src 目录 加载环境变量",id:"19配置篇-_-环境变量路径别名与-src-目录-加载环境变量",depth:4},{text:"浏览器中获取环境变量",id:"浏览器中获取环境变量",depth:4},{text:"默认环境变量",id:"默认环境变量",depth:4},{text:"测试环境变量",id:"测试环境变量",depth:4},{text:"环境变量加载顺序",id:"环境变量加载顺序",depth:4},{text:"2. 绝对地址导入和模块路径别名",id:"2-绝对地址导入和模块路径别名",depth:2},{text:"2.1. 绝对地址导入",id:"21-绝对地址导入",depth:3},{text:"2.2. 模块别名",id:"22-模块别名",depth:3},{text:"3. src 目录",id:"3-src-目录",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);