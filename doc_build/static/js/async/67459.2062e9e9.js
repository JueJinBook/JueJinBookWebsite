"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["67459"],{844193:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var s=r(552676),o=r(740453);let i=r.p+"static/image/ceb62cd084783ed7ab1c058b236fb60a.09e8ce79.webp",a=r.p+"static/image/13a2fb45290adb0534a7df54369fe098.cddb5886.webp",d=r.p+"static/image/241f4938734e730a7cfef11a4f8fb82c.30bf8996.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",strong:"strong",h3:"h3",h4:"h4",pre:"pre",code:"code",ul:"ul",li:"li",ol:"ol"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"5存储篇-2本地存储从-cookie-到-web-storageindexeddb",children:["5.存储篇 2：本地存储——从 Cookie 到 Web Storage、IndexedDB",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5存储篇-2本地存储从-cookie-到-web-storageindexeddb",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"随着移动网络的发展与演化，我们手机上现在除了有原生 App，还能跑“WebApp”——它即开即用，用完即走。一个优秀的 WebApp 甚至可以拥有和原生 App 媲美的功能和体验。"}),"\n",(0,s.jsx)(n.p,{children:"我认为，WebApp 就是我们前端性能优化的产物，是我们前端工程师对体验不懈追求的结果，是 Web 网页在性能上向 Native 应用的一次“宣战”。"}),"\n",(0,s.jsx)(n.p,{children:"WebApp 优异的性能表现，要归功于浏览器存储技术的广泛应用——这其中除了我们上节提到的缓存，本地存储技术也功不可没。"}),"\n",(0,s.jsxs)(n.h2,{id:"故事的开始从-cookie-说起",children:["故事的开始：从 Cookie 说起",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#故事的开始从-cookie-说起",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Cookie 的本职工作并非本地存储，而是“维持状态”。"}),"\n",(0,s.jsx)(n.p,{children:"在 Web 开发的早期，人们亟需解决的一个问题就是状态管理的问题：HTTP 协议是一个无状态协议，服务器接收客户端的请求，返回一个响应，故事到此就结束了，服务器并没有记录下关于客户端的任何信息。那么下次请求的时候，如何让服务器知道“我是我”呢？"}),"\n",(0,s.jsx)(n.p,{children:"在这样的背景下，Cookie 应运而生。"}),"\n",(0,s.jsx)(n.p,{children:"Cookie 说白了就是一个存储在浏览器里的一个小小的文本文件，它附着在 HTTP 请求上，在浏览器和服务器之间“飞来飞去”。它可以携带用户信息，当服务器检查 Cookie 的时候，便可以获取到客户端的状态。"}),"\n",(0,s.jsx)(n.p,{children:"关于 Cookie 的详细内容，我们可以在 Chrome 的 Application 面板中查看到："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["如大家所见，",(0,s.jsx)(n.strong,{children:"Cookie 以键值对的形式存在"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"cookie的性能劣势",children:["Cookie的性能劣势",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookie的性能劣势",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"cookie-不够大",children:["Cookie 不够大",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookie-不够大",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"大家知道，Cookie 是有体积上限的，它最大只能有 4KB。当 Cookie 超过 4KB 时，它将面临被裁切的命运。这样看来，Cookie 只能用来存取少量的信息。"}),"\n",(0,s.jsxs)(n.h4,{id:"过量的-cookie-会带来巨大的性能浪费",children:["过量的 Cookie 会带来巨大的性能浪费",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#过量的-cookie-会带来巨大的性能浪费",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Cookie 是紧跟域名的"}),"。我们通过响应头里的 Set-Cookie 指定要存储的 Cookie 值。默认情况下，domain 被设置为设置 Cookie 页面的主机名，我们也可以手动设置 domain 的值："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Set-Cookie: name=xiuyan; domain=xiuyan.me\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"同一个域名下的所有请求，都会携带 Cookie"}),"。大家试想，如果我们此刻仅仅是请求一张图片或者一个 CSS 文件，我们也要携带一个 Cookie 跑来跑去（关键是 Cookie 里存储的信息我现在并不需要），这是一件多么劳民伤财的事情。Cookie 虽然小，请求却可以有很多，随着请求的叠加，这样的不必要的 Cookie 带来的开销将是无法想象的。"]}),"\n",(0,s.jsx)(n.p,{children:"随着前端应用复杂度的提高，Cookie 也渐渐演化为了一个“存储多面手”——它不仅仅被用于维持状态，还被塞入了一些乱七八糟的其它信息，被迫承担起了本地存储的“重任”。在没有更好的本地存储解决方案的年代里，Cookie 小小的身体里承载了 4KB 内存所不能承受的压力。"}),"\n",(0,s.jsx)(n.p,{children:"为了弥补 Cookie 的局限性，让“专业的人做专业的事情”，Web Storage 出现了。"}),"\n",(0,s.jsxs)(n.h2,{id:"向前一步web-storage",children:["向前一步：Web Storage",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#向前一步web-storage",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Web Storage 是 HTML5 专门为浏览器存储而提供的数据存储机制。它又分为 Local Storage 与 Session Storage。这两组概念非常相近，我们不妨先理解它们之间的区别，再对它们的共性进行研究。"}),"\n",(0,s.jsxs)(n.h3,{id:"local-storage-与-session-storage-的区别",children:["Local Storage 与 Session Storage 的区别",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#local-storage-与-session-storage-的区别",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["两者的区别在于",(0,s.jsx)(n.strong,{children:"生命周期"}),"与",(0,s.jsx)(n.strong,{children:"作用域"}),"的不同。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"生命周期：Local Storage 是持久化的本地存储，存储在其中的数据是永远不会过期的，使其消失的唯一办法是手动删除；而 Session Storage 是临时性的本地存储，它是会话级别的存储，当会话结束（页面被关闭）时，存储内容也随之被释放。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["作用域：Local Storage、Session Storage 和 Cookie 都遵循同源策略。但 Session Storage 特别的一点在于，即便是相同域名下的两个页面，只要它们",(0,s.jsx)(n.strong,{children:"不在同一个浏览器窗口中"}),"打开，那么它们的 Session Storage 内容便无法共享。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"web-storage-的特性",children:["Web Storage 的特性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#web-storage-的特性",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"存储容量大： Web Storage 根据浏览器的不同，存储容量可以达到 5-10M 之间。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"仅位于浏览器端，不与服务端发生通信。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"web-storage-核心-api-使用示例",children:["Web Storage 核心 API 使用示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#web-storage-核心-api-使用示例",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Web Storage 保存的数据内容和 Cookie 一样，是文本内容，以键值对的形式存在。Local Storage 与 Session Storage 在 API 方面无异，这里我们以 localStorage 为例："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"存储数据：setItem()"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"localStorage.setItem('user_name', 'xiuyan')\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"读取数据： getItem()"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"localStorage.getItem('user_name')\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"删除某一键名对应的数据： removeItem()"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"localStorage.removeItem('user_name')\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"清空数据记录：clear()"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"localStorage.clear()\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"应用场景",children:["应用场景",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#应用场景",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"local-storage",children:["Local Storage",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#local-storage",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Local Storage 在存储方面没有什么特别的限制，理论上 Cookie 无法胜任的、可以用简单的键值对来存取的数据存储任务，都可以交给 Local Storage 来做。"}),"\n",(0,s.jsxs)(n.p,{children:["这里给大家举个例子，考虑到 Local Storage 的特点之一是",(0,s.jsx)(n.strong,{children:"持久"}),"，有时我们更倾向于用它来存储一些内容稳定的资源。比如图片内容丰富的电商网站会用它来存储 Base64 格式的图片字符串："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"有的网站还会用它存储一些不经常更新的 CSS、JS 等静态资源。"}),"\n",(0,s.jsxs)(n.h4,{id:"session-storage",children:["Session Storage",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#session-storage",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Session Storage 更适合用来存储生命周期和它同步的",(0,s.jsx)(n.strong,{children:"会话级别"}),"的信息。这些信息只适用于当前会话，当你开启新的会话时，它也需要相应的更新或释放。比如微博的 Session Storage 就主要是存储你本次会话的浏览足迹："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"lasturl 对应的就是你上一次访问的 URL 地址，这个地址是即时的。当你切换 URL 时，它随之更新，当你关闭页面时，留着它也确实没有什么意义了，干脆释放吧。这样的数据用 Session Storage 来处理再合适不过。"}),"\n",(0,s.jsx)(n.p,{children:"这样看来，Web Storage 确实也够强大了。那么 Web Storage 是否能 hold 住所有的存储场景呢？"}),"\n",(0,s.jsx)(n.p,{children:"答案是否定的。大家也看到了，Web Storage 是一个从定义到使用都非常简单的东西。它使用键值对的形式进行存储，这种模式有点类似于对象，却甚至连对象都不是——它只能存储字符串，要想得到对象，我们还需要先对字符串进行一轮解析。"}),"\n",(0,s.jsx)(n.p,{children:"说到底，Web Storage 是对 Cookie 的拓展，它只能用于存储少量的简单数据。当遇到大规模的、结构复杂的数据时，Web Storage 也爱莫能助了。这时候我们就要清楚我们的终极大 boss——IndexedDB！"}),"\n",(0,s.jsxs)(n.h2,{id:"终极形态indexeddb",children:["终极形态：IndexedDB",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#终极形态indexeddb",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["IndexedDB 是一个",(0,s.jsx)(n.strong,{children:"运行在浏览器上的非关系型数据库"}),"。既然是数据库了，那就不是 5M、10M 这样小打小闹级别了。理论上来说，IndexedDB 是没有存储上限的（一般来说不会小于 250M）。它不仅可以存储字符串，还可以存储二进制数据。"]}),"\n",(0,s.jsx)(n.p,{children:"IndexedDB 从推出之日起，其优质教程就层出不绝，我们今天不再着重讲解它的详细操作。接下来，我们遵循 MDN 推荐的操作模式，通过一个基本的 IndexedDB 使用流程，旨在对 IndexedDB 形成一个感性的认知："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"打开/创建一个 IndexedDB 数据库（当该数据库不存在时，open 方法会直接创建一个名为 xiaoceDB 新数据库）。"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'  // 后面的回调中，我们可以通过event.target.result拿到数据库实例\n  let db\n  // 参数1位数据库名，参数2为版本号\n  const request = window.indexedDB.open("xiaoceDB", 1)\n  // 使用IndexedDB失败时的监听函数\n  request.onerror = function(event) {\n     console.log(\'无法使用IndexedDB\')\n   }\n  // 成功\n  request.onsuccess  = function(event){\n    // 此处就可以获取到db实例\n    db = event.target.result\n    console.log("你打开了IndexedDB")\n  }\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"创建一个 object store（object store 对标到数据库中的“表”单位）。"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// onupgradeneeded事件会在初始化数据库/版本发生更新时被调用，我们在它的监听函数中创建object store\nrequest.onupgradeneeded = function(event){\n  let objectStore\n  // 如果同名表未被创建过，则新建test表\n  if (!db.objectStoreNames.contains('test')) {\n    objectStore = db.createObjectStore('test', { keyPath: 'id' })\n  }\n}  \n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"构建一个事务来执行一些数据库操作，像增加或提取数据等。"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'  // 创建事务，指定表格名称和读写权限\n  const transaction = db.transaction(["test"],"readwrite")\n  // 拿到Object Store对象\n  const objectStore = transaction.objectStore("test")\n  // 向表格写入数据\n  objectStore.add({id: 1, name: \'xiuyan\'})\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"通过监听正确类型的事件以等待操作完成。"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'  // 操作成功时的监听函数\n  transaction.oncomplete = function(event) {\n    console.log("操作成功")\n  }\n  // 操作失败时的监听函数\n  transaction.onerror = function(event) {\n    console.log("这里有一个Error")\n  }\n  \n'})}),"\n",(0,s.jsxs)(n.h3,{id:"indexeddb-的应用场景",children:["IndexedDB 的应用场景",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#indexeddb-的应用场景",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"通过上面的示例大家可以看出，在 IndexedDB 中，我们可以创建多个数据库，一个数据库中创建多张表，一张表中存储多条数据——这足以 hold 住复杂的结构性数据。IndexedDB 可以看做是 LocalStorage 的一个升级，当数据的复杂度和规模上升到了 LocalStorage 无法解决的程度，我们毫无疑问可以请出 IndexedDB 来帮忙。"}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["浏览器缓存/存储技术的出现和发展，为我们的前端应用带来了无限的转机。近年来基于缓存/存储技术的第三方库层出不绝，此外还衍生出了 ",(0,s.jsx)(n.a,{href:"https://lavas.baidu.com/pwa",target:"_blank",rel:"noopener noreferrer",children:"PWA"})," 这样优秀的 Web 应用模型。可以说，现代前端应用，尤其是移动端应用，之所以可以发展到在体验上叫板 Native 的地步，主要就是仰仗缓存/存储立下的汗马功劳。"]}),"\n",(0,s.jsx)(n.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%2F5.%E5%AD%98%E5%82%A8%E7%AF%87%202%EF%BC%9A%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E2%80%94%E2%80%94%E4%BB%8E%20Cookie%20%E5%88%B0%20Web%20Storage%E3%80%81IndexedDB.md"]={toc:[{text:"故事的开始：从 Cookie 说起",id:"故事的开始从-cookie-说起",depth:2},{text:"Cookie的性能劣势",id:"cookie的性能劣势",depth:3},{text:"Cookie 不够大",id:"cookie-不够大",depth:4},{text:"过量的 Cookie 会带来巨大的性能浪费",id:"过量的-cookie-会带来巨大的性能浪费",depth:4},{text:"向前一步：Web Storage",id:"向前一步web-storage",depth:2},{text:"Local Storage 与 Session Storage 的区别",id:"local-storage-与-session-storage-的区别",depth:3},{text:"Web Storage 的特性",id:"web-storage-的特性",depth:3},{text:"Web Storage 核心 API 使用示例",id:"web-storage-核心-api-使用示例",depth:3},{text:"应用场景",id:"应用场景",depth:3},{text:"Local Storage",id:"local-storage",depth:4},{text:"Session Storage",id:"session-storage",depth:4},{text:"终极形态：IndexedDB",id:"终极形态indexeddb",depth:2},{text:"IndexedDB 的应用场景",id:"indexeddb-的应用场景",depth:3},{text:"小结",id:"小结",depth:2}],title:"5.存储篇 2：本地存储——从 Cookie 到 Web Storage、IndexedDB",headingTitle:"5.存储篇 2：本地存储——从 Cookie 到 Web Storage、IndexedDB",frontmatter:{}}}}]);