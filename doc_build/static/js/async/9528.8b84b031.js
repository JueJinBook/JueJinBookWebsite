"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["9528"],{390588:function(n,e,r){r.r(e),r.d(e,{default:()=>t});var i=r(552676),d=r(740453);let l=r.p+"static/image/c89b12aae82affd996dc69bfdd2f849c.ff07908c.webp";function c(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",pre:"pre",h3:"h3",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",img:"img"},(0,d.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"28http-及-tls",children:["28.HTTP 及 TLS",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#28http-及-tls",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"这一章节我们将来学习 HTTP 及 TLS 协议中的内容。"}),"\n",(0,i.jsxs)(e.h2,{id:"http-请求中的内容",children:["HTTP 请求中的内容",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#http-请求中的内容",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"HTTP 请求由三部分构成，分别为："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"请求行"}),"\n",(0,i.jsx)(e.li,{children:"首部"}),"\n",(0,i.jsx)(e.li,{children:"实体"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["请求行大概长这样 ",(0,i.jsx)(e.code,{children:"GET /images/logo.gif HTTP/1.1"}),"，基本由请求方法、URL、协议版本组成，这其中值得一说的就是请求方法了。"]}),"\n",(0,i.jsxs)(e.p,{children:["请求方法分为很多种，最常用的也就是 ",(0,i.jsx)(e.code,{children:"Get"})," 和 ",(0,i.jsx)(e.code,{children:"Post"})," 了。虽然请求方法有很多，但是更多的是传达一个语义，而不是说 ",(0,i.jsx)(e.code,{children:"Post"})," 能做的事情 ",(0,i.jsx)(e.code,{children:"Get"})," 就不能做了。如果你愿意，都使用 ",(0,i.jsx)(e.code,{children:"Get"})," 请求或者 ",(0,i.jsx)(e.code,{children:"Post"})," 请求都是可以的。更多请求方法的语义描述可以阅读 ",(0,i.jsx)(e.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods",target:"_blank",rel:"noopener noreferrer",children:"文档"}),"。"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-!",children:"常考面试题：Post 和 Get 的区别？\n"})}),"\n",(0,i.jsx)(e.p,{children:"首先先引入副作用和幂等的概念。"}),"\n",(0,i.jsx)(e.p,{children:"副作用指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。"}),"\n",(0,i.jsx)(e.p,{children:"幂等指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次是幂等的。因为前者是多了一个账号（资源），后者只是更新同一个资源。"}),"\n",(0,i.jsx)(e.p,{children:"在规范的应用场景上说，Get 多用于无副作用，幂等的场景，例如搜索关键字。Post 多用于副作用，不幂等的场景，例如注册。"}),"\n",(0,i.jsx)(e.p,{children:"在技术上说："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Get 请求能缓存，Post 不能"}),"\n",(0,i.jsxs)(e.li,{children:["Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里（当然你想写到 ",(0,i.jsx)(e.code,{children:"body"})," 里也是可以的），且会被浏览器保存历史纪录。Post 不会，但是在抓包的情况下都是一样的。"]}),"\n",(0,i.jsx)(e.li,{children:"URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的"}),"\n",(0,i.jsx)(e.li,{children:"Post 支持更多的编码类型且不对数据类型限制"}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"首部",children:["首部",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#首部",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"首部分为请求首部和响应首部，并且部分首部两种通用，接下来我们就来学习一部分的常用首部。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"通用首部"})}),"\n",(0,i.jsxs)(e.table,{children:["\n",(0,i.jsxs)(e.thead,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.th,{align:"center",children:"通用字段"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"作用"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.tbody,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Cache-Control"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"控制缓存的行为"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Connection"}),"\n",(0,i.jsxs)(e.td,{align:"center",children:["浏览器想要优先使用的连接类型，比如  ",(0,i.jsx)(e.code,{children:"keep-alive"})]}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Date"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"创建报文时间"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Pragma"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"报文指令"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Via"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"代理服务器相关信息"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Transfer-Encoding"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"传输编码方式"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Upgrade"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"要求客户端升级协议"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Warning"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"在内容中可能存在错误"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"请求首部"})}),"\n",(0,i.jsxs)(e.table,{children:["\n",(0,i.jsxs)(e.thead,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.th,{align:"center",children:"请求首部"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"作用"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.tbody,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Accept"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"能正确接收的媒体类型"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Accept-Charset"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"能正确接收的字符集"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Accept-Encoding"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"能正确接收的编码格式列表"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Accept-Language"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"能正确接收的语言列表"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Expect"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"期待服务端的指定行为"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"From"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"请求方邮箱地址"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Host"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"服务器的域名"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"If-Match"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"两端资源标记比较"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"If-Modified-Since"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"本地资源未修改返回 304（比较时间）"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"If-None-Match"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"本地资源未修改返回 304（比较标记）"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"User-Agent"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"客户端信息"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Max-Forwards"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"限制可被代理及网关转发的次数"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Proxy-Authorization"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"向代理服务器发送验证信息"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Range"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"请求某个内容的一部分"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Referer"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"表示浏览器所访问的前一个页面"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"TE"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"传输编码方式"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"响应首部"})}),"\n",(0,i.jsxs)(e.table,{children:["\n",(0,i.jsxs)(e.thead,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.th,{align:"center",children:"响应首部"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"作用"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.tbody,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Accept-Ranges"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"是否支持某些种类的范围"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Age"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"资源在代理缓存中存在的时间"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"ETag"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"资源标识"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Location"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"客户端重定向到某个 URL"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Proxy-Authenticate"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"向代理服务器发送验证信息"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Server"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"服务器名字"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"WWW-Authenticate"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"获取资源需要的验证信息"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"实体首部"})}),"\n",(0,i.jsxs)(e.table,{children:["\n",(0,i.jsxs)(e.thead,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.th,{align:"center",children:"实体首部"}),"\n",(0,i.jsx)(e.th,{align:"center",children:"作用"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.tbody,{children:["\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Allow"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"资源的正确请求方式"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Content-Encoding"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"内容的编码格式"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Content-Language"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"内容使用的语言"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Content-Length"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"request body 长度"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Content-Location"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"返回数据的备用地址"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Content-MD5"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"Base64加密格式的内容 MD5检验值"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Content-Range"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"内容的位置范围"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Content-Type"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"内容的媒体类型"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Expires"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"内容的过期时间"}),"\n"]}),"\n",(0,i.jsxs)(e.tr,{children:["\n",(0,i.jsx)(e.td,{align:"center",children:"Last_modified"}),"\n",(0,i.jsx)(e.td,{align:"center",children:"内容的最后修改时间"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"常见状态码",children:["常见状态码",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#常见状态码",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"状态码表示了响应的一个状态，可以让我们清晰的了解到这一次请求是成功还是失败，如果失败的话，是什么原因导致的，当然状态码也是用于传达语义的。如果胡乱使用状态码，那么它存在的意义就没有了。"}),"\n",(0,i.jsx)(e.p,{children:"状态码通常也是一道常考题。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"2XX 成功"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"200 OK，表示从客户端发来的请求在服务器端被正确处理"}),"\n",(0,i.jsx)(e.li,{children:"204 No content，表示请求成功，但响应报文不含实体的主体部分"}),"\n",(0,i.jsx)(e.li,{children:"205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容"}),"\n",(0,i.jsx)(e.li,{children:"206 Partial Content，进行范围请求"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"3XX 重定向"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"301 moved permanently，永久性重定向，表示资源已被分配了新的 URL"}),"\n",(0,i.jsx)(e.li,{children:"302 found，临时性重定向，表示资源临时被分配了新的 URL"}),"\n",(0,i.jsx)(e.li,{children:"303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源"}),"\n",(0,i.jsx)(e.li,{children:"304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况"}),"\n",(0,i.jsx)(e.li,{children:"307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"4XX 客户端错误"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"400 bad request，请求报文存在语法错误"}),"\n",(0,i.jsx)(e.li,{children:"401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息"}),"\n",(0,i.jsx)(e.li,{children:"403 forbidden，表示对请求资源的访问被服务器拒绝"}),"\n",(0,i.jsx)(e.li,{children:"404 not found，表示在服务器上没有找到请求的资源"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"5XX 服务器错误"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"500 internal sever error，表示服务器端在执行请求时发生了错误"}),"\n",(0,i.jsx)(e.li,{children:"501 Not Implemented，表示服务器不支持当前请求所需要的某个功能"}),"\n",(0,i.jsx)(e.li,{children:"503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"tls",children:["TLS",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#tls",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。"}),"\n",(0,i.jsx)(e.p,{children:"TLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，接下来可以通过 Session Resumption 减少到一个 RTT。"}),"\n",(0,i.jsx)(e.p,{children:"在 TLS 中使用了两种加密技术，分别为：对称加密和非对称加密。"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"对称加密"}),"："]}),"\n",(0,i.jsx)(e.p,{children:"对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。"}),"\n",(0,i.jsx)(e.p,{children:"这种加密方式固然很好，但是问题就在于如何让双方知道秘钥。因为传输数据都是走的网络，如果将秘钥通过网络的方式传递的话，一旦秘钥被截获就没有加密的意义的。"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"非对称加密"}),"："]}),"\n",(0,i.jsx)(e.p,{children:"有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。"}),"\n",(0,i.jsx)(e.p,{children:"这种加密方式就可以完美解决对称加密存在的问题。假设现在两端需要使用对称加密，那么在这之前，可以先使用非对称加密交换秘钥。"}),"\n",(0,i.jsx)(e.p,{children:"简单流程如下：首先服务端将公钥公布出去，那么客户端也就知道公钥了。接下来客户端创建一个秘钥，然后通过公钥加密并发送给服务端，服务端接收到密文以后通过私钥解密出正确的秘钥，这时候两端就都知道秘钥是什么了。"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"TLS 握手过程如下图："})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(e.p,{children:"客户端发送一个随机值以及需要的协议和加密方式。"}),"\n",(0,i.jsx)(e.p,{children:"服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，并且发送自己的证书（如果需要验证客户端证书需要说明）"}),"\n",(0,i.jsx)(e.p,{children:"客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书"}),"\n",(0,i.jsx)(e.p,{children:"服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密"}),"\n",(0,i.jsx)(e.p,{children:"通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。"}),"\n",(0,i.jsx)(e.p,{children:"PS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了。"}),"\n",(0,i.jsxs)(e.h2,{id:"小结",children:["小结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"总结一下内容："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"HTTP 经常考到的内容包括：请求方法、首部的作用以及状态码的含义"}),"\n",(0,i.jsx)(e.li,{children:"TLS 中经常考到的内容包括：两种加密方式以及握手的流程"}),"\n"]})]})}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}let t=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%2F28.HTTP%20%E5%8F%8A%20TLS.md"]={toc:[{text:"HTTP 请求中的内容",id:"http-请求中的内容",depth:2},{text:"首部",id:"首部",depth:3},{text:"常见状态码",id:"常见状态码",depth:3},{text:"TLS",id:"tls",depth:2},{text:"小结",id:"小结",depth:2}],title:"28.HTTP 及 TLS",headingTitle:"28.HTTP 及 TLS",frontmatter:{}}}}]);