"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["50879"],{95490:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var s=r(552676),l=r(740453);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",ol:"ol",pre:"pre",code:"code",h3:"h3",blockquote:"blockquote",strong:"strong"},(0,l.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"6js-异步编程及常考面试题",children:["6.JS 异步编程及常考面试题",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6js-异步编程及常考面试题",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在上一章节中我们了解了常见 ES6 语法的一些知识点。这一章节我们将会学习异步编程这一块的内容，鉴于异步编程是 JS 中至关重要的内容，所以我们将会用三个章节来学习异步编程涉及到的重点和难点，同时这一块内容也是面试常考范围，希望大家认真学习。"}),"\n",(0,s.jsxs)(n.h2,{id:"更新日志",children:["更新日志",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#更新日志",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"各小节内容优化"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"并发concurrency和并行parallelism区别",children:["并发（concurrency）和并行（parallelism）区别",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#并发concurrency和并行parallelism区别",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这两个名词是很多人都常会混淆的知识点。其实混淆的原因可能只是两个名词在中文上的相似，在英文上来说完全是不同的单词。"}),"\n",(0,s.jsx)(n.p,{children:"并发指的是有任务 A 和任务 B，在一段时间内通过任务间的切换完成了这两个任务，这种情况就可以称之为并发。"}),"\n",(0,s.jsx)(n.p,{children:"并行指的是假设 CPU 中存在两个核心，那么我就可以同时完成任务 A、B。同时完成多个任务的情况就可以称之为并行。"}),"\n",(0,s.jsx)(n.p,{children:"另外这两者直接拿来对比其实也是不妥的。并发指的是场景 / 需求，比如说我们这个业务有高并发的场景，但是并行指的是能力，表明我们目前的功能是可以实现这件事情的。"}),"\n",(0,s.jsxs)(n.h2,{id:"回调函数callback",children:["回调函数（Callback）",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#回调函数callback",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"回调函数存在两大问题："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"信任问题"}),"\n",(0,s.jsx)(n.li,{children:"可读性"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"信任问题指的是我们将回调交给了第三方去调用，可能会出现意料之外的事情，比如说不能保证调用次数。"}),"\n",(0,s.jsx)(n.p,{children:"可读性多指回调地狱（Callback hell）。假设多个请求存在依赖性，你可能就会写出如下代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"ajax(url, () => {\n    // 处理逻辑\n    ajax(url1, () => {\n        // 处理逻辑\n        ajax(url2, () => {\n            // 处理逻辑\n        })\n    })\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"以上代码一眼看去就不利于阅读和维护。当然你可能会想说解决这个问题还不简单，把函数分开来写不就得了。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function firstAjax() {\n  ajax(url1, () => {\n    // 处理逻辑\n    secondAjax()\n  })\n}\nfunction secondAjax() {\n  ajax(url2, () => {\n    // 处理逻辑\n  })\n}\najax(url, () => {\n  // 处理逻辑\n  firstAjax()\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"以上的代码虽然看上去利于阅读了，但是还是治标不治本。"}),"\n",(0,s.jsx)(n.p,{children:"回调地狱的根本问题是："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身"}),"\n",(0,s.jsx)(n.li,{children:"嵌套函数一多，就很难处理错误"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"当然，回调函数还存在着别的几个缺点："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["不能使用 ",(0,s.jsx)(n.code,{children:"try catch"})," 捕获错误"]}),"\n",(0,s.jsxs)(n.li,{children:["不能直接 ",(0,s.jsx)(n.code,{children:"return"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"在接下来的几小节中，我们将来学习通过别的技术解决这些问题。"}),"\n",(0,s.jsxs)(n.h3,{id:"常见考点",children:["常见考点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见考点",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"什么是回调函数？"}),"\n",(0,s.jsx)(n.li,{children:"回调函数有什么缺点？"}),"\n",(0,s.jsx)(n.li,{children:"如何解决回调地狱问题？"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"generator",children:["Generator",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#generator",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Generator"})," 算是 ES6 中难理解的概念之一了。它最大的特点就是可以控制函数的执行。在这一小节中我们不会去讲什么是 ",(0,s.jsx)(n.code,{children:"Generator"}),"，而是把重点放在一些容易困惑的地方。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function *foo(x) {\n  let y = 2 * (yield (x + 1))\n  let z = yield (y / 3)\n  return (x + y + z)\n}\nlet it = foo(5)\nconsole.log(it.next())   // => {value: 6, done: false}\nconsole.log(it.next(12)) // => {value: 8, done: false}\nconsole.log(it.next(13)) // => {value: 42, done: true}\n"})}),"\n",(0,s.jsx)(n.p,{children:"你也许会疑惑为什么会产生与你预想不同的值，接下来让我为你逐行代码分析原因："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["首先 ",(0,s.jsx)(n.code,{children:"Generator"})," 函数调用和普通函数不同，它会返回一个迭代器"]}),"\n",(0,s.jsxs)(n.li,{children:["当执行第一次 ",(0,s.jsx)(n.code,{children:"next"})," 时，传参会被忽略，并且函数暂停在 ",(0,s.jsx)(n.code,{children:"yield (x + 1)"})," 处，所以返回 ",(0,s.jsx)(n.code,{children:"5 + 1 = 6"})]}),"\n",(0,s.jsxs)(n.li,{children:["当执行第二次 ",(0,s.jsx)(n.code,{children:"next"})," 时，传入的参数等于上一个 ",(0,s.jsx)(n.code,{children:"yield"})," 的返回值，如果你不传参，",(0,s.jsx)(n.code,{children:"yield"})," 永远返回 ",(0,s.jsx)(n.code,{children:"undefined"}),"。此时 ",(0,s.jsx)(n.code,{children:"let y = 2 * 12"}),"，所以第二个 ",(0,s.jsx)(n.code,{children:"yield"})," 等于 ",(0,s.jsx)(n.code,{children:"2 * 12 / 3 = 8"})]}),"\n",(0,s.jsxs)(n.li,{children:["当执行第三次 ",(0,s.jsx)(n.code,{children:"next"})," 时，传入的参数会传递给 ",(0,s.jsx)(n.code,{children:"z"}),"，所以 ",(0,s.jsx)(n.code,{children:"z = 13, x = 5, y = 24"}),"，相加等于 ",(0,s.jsx)(n.code,{children:"42"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Generator"})," 函数一般见到的不多，其实也于他有点绕有关系，并且一般会配合 co 库去使用。另外，我们可以通过 ",(0,s.jsx)(n.code,{children:"Generator"})," 函数解决回调地狱的问题，可以把之前的回调地狱例子改写为如下代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function *fetch() {\n    yield ajax(url, () => {})\n    yield ajax(url1, () => {})\n    yield ajax(url2, () => {})\n}\nlet it = fetch()\nlet result1 = it.next()\nlet result2 = it.next()\nlet result3 = it.next()\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"常见考点-1",children:["常见考点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见考点-1",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"你理解的 Generator 是什么？"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"promise",children:["Promise",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promise",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"})," 翻译过来就是承诺的意思，这个承诺会在未来有一个确切的答复，并且该承诺有三种状态，分别是："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"等待中（pending）"}),"\n",(0,s.jsx)(n.li,{children:"完成了 （resolved）"}),"\n",(0,s.jsx)(n.li,{children:"拒绝了（rejected）"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这个承诺一旦从等待状态变成为其他状态就永远不能更改状态了。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"new Promise((resolve, reject) => {\n  resolve('success')\n  // 无效\n  reject('reject')\n})\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["当我们在构造 ",(0,s.jsx)(n.code,{children:"Promise"})," 的时候，构造函数内部的代码是立即执行的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"new Promise((resolve, reject) => {\n  console.log('new Promise')\n  resolve('success')\n})\nconsole.log('finifsh')\n// new Promise -> finifsh\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"})," 实现了链式调用，也就是说每次调用 ",(0,s.jsx)(n.code,{children:"then"})," 之后返回的都是一个 ",(0,s.jsx)(n.code,{children:"Promise"}),"，并且是一个全新的 ",(0,s.jsx)(n.code,{children:"Promise"}),"，原因也是因为状态不可变。如果你在 ",(0,s.jsx)(n.code,{children:"then"})," 中 使用了 ",(0,s.jsx)(n.code,{children:"return"}),"，那么 ",(0,s.jsx)(n.code,{children:"return"})," 的值会被 ",(0,s.jsx)(n.code,{children:"Promise.resolve()"})," 包装"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"Promise.resolve(1)\n  .then(res => {\n    console.log(res) // => 1\n    return 2 // 包装成 Promise.resolve(2)\n  })\n  .then(res => {\n    console.log(res) // => 2\n  })\n"})}),"\n",(0,s.jsxs)(n.p,{children:["当然了，",(0,s.jsx)(n.code,{children:"Promise"})," 也很好地解决了回调地狱的问题，可以把之前的回调地狱例子改写为如下代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"ajax(url)\n  .then(res => {\n      console.log(res)\n      return ajax(url1)\n  }).then(res => {\n      console.log(res)\n      return ajax(url2)\n  }).then(res => console.log(res))\n"})}),"\n",(0,s.jsxs)(n.p,{children:["最后，",(0,s.jsx)(n.code,{children:"Promise"})," 的几个 API 也经常被考到，比如说 ",(0,s.jsx)(n.code,{children:"all"}),"、",(0,s.jsx)(n.code,{children:"race"}),"、",(0,s.jsx)(n.code,{children:"allSettled"}),"。API 做题的作用这里就不讲了，大家可以查阅 ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all",target:"_blank",rel:"noopener noreferrer",children:"MDN 文档"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"常见考点-2",children:["常见考点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见考点-2",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"主要考手写 Promise，概念类问题不多。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Promise 的特点是什么，分别有什么优缺点？"}),"\n",(0,s.jsx)(n.li,{children:"什么是 Promise 链？"}),"\n",(0,s.jsx)(n.li,{children:"Promise 构造函数执行和 then 函数执行有什么区别？"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"all"}),"、",(0,s.jsx)(n.code,{children:"race"}),"、",(0,s.jsx)(n.code,{children:"allSettled"})," 各有什么作用？"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"async-及-await",children:["async 及 await",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#async-及-await",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["一个函数如果加上 ",(0,s.jsx)(n.code,{children:"async"})," ，那么该函数就会返回一个 ",(0,s.jsx)(n.code,{children:"Promise"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'async function test() {\n  return "1"\n}\nconsole.log(test()) // -> Promise {<resolved>: "1"}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"async"})," 就是将函数返回值使用 ",(0,s.jsx)(n.code,{children:"Promise.resolve()"})," 包裹了下，和 ",(0,s.jsx)(n.code,{children:"then"})," 中处理返回值一样，并且 ",(0,s.jsx)(n.code,{children:"await"})," 只能配套 ",(0,s.jsx)(n.code,{children:"async"})," 使用。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["目前 ",(0,s.jsx)(n.code,{children:"await"})," 可以直接脱离 ",(0,s.jsx)(n.code,{children:"async"})," 在顶层调用，但是需要在 ESM 模块中。Chrome 中可以没有模块限制，但是这只是 V8 的一个特性。"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"async function test() {\n  let value = await sleep()\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"async"})," 和 ",(0,s.jsx)(n.code,{children:"await"})," 可以说是异步终极解决方案了，相比直接使用 ",(0,s.jsx)(n.code,{children:"Promise"})," 来说，优势在于处理 ",(0,s.jsx)(n.code,{children:"then"})," 的调用链，能够更清晰准确的写出代码，毕竟写一大堆 ",(0,s.jsx)(n.code,{children:"then"})," 也很恶心，并且也能优雅地解决回调地狱问题。"]}),"\n",(0,s.jsxs)(n.p,{children:["当然也存在一些缺点，因为 ",(0,s.jsx)(n.code,{children:"await"})," 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 ",(0,s.jsx)(n.code,{children:"await"})," 会导致性能上的降低。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"async function test() {\n  // 以下代码没有依赖性的话，完全可以使用 Promise.all 的方式\n  // 如果有依赖性的话，其实就是解决回调地狱的例子了\n  await fetch(url)\n  await fetch(url1)\n  await fetch(url2)\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["下面再来看一个使用 ",(0,s.jsx)(n.code,{children:"await"})," 的例子："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"let a = 0\nlet b = async () => {\n  a = a + await 10\n  console.log('2', a) // -> '2' 10\n}\nb()\na++\nconsole.log('1', a) // -> '1' 1\n"})}),"\n",(0,s.jsx)(n.p,{children:"对于以上代码你可能会有疑惑，让我来解释下原因："}),"\n",(0,s.jsxs)(n.p,{children:["这道题目正确答案是 10。因为加法运算法，先算左边再算右边，所以会把 0 固定下来。如果我们把题目改成 ",(0,s.jsx)(n.code,{children:"await 10 + a"})," 的话，答案就是 11 了。"]}),"\n",(0,s.jsxs)(n.h3,{id:"常见考点-3",children:["常见考点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见考点-3",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"async 及 await 的特点"}),"\n",(0,s.jsx)(n.li,{children:"它们的优点和缺点分别是什么？"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"常用定时器函数",children:["常用定时器函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常用定时器函数",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["异步编程当然少不了定时器了，常见的定时器函数有 ",(0,s.jsx)(n.code,{children:"setTimeout"}),"、",(0,s.jsx)(n.code,{children:"setInterval"}),"、",(0,s.jsx)(n.code,{children:"requestAnimationFrame"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["我们先来讲讲最常用的",(0,s.jsx)(n.code,{children:"setTimeout"}),"，很多人认为 ",(0,s.jsx)(n.code,{children:"setTimeout"})," 是延时多久，那就应该是多久后执行。"]}),"\n",(0,s.jsxs)(n.p,{children:["其实这个观点是错误的，因为 JS 是单线程执行的，如果前面的代码影响了性能，就会导致 ",(0,s.jsx)(n.code,{children:"setTimeout"})," 不会按期执行。当然了，我们可以通过代码去修正 ",(0,s.jsx)(n.code,{children:"setTimeout"}),"，从而使定时器",(0,s.jsx)(n.strong,{children:"相对准确"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"let period = 60 * 1000 * 60 * 2\nlet startTime = new Date().getTime()\nlet count = 0\nlet end = new Date().getTime() + period\nlet interval = 1000\nlet currentInterval = interval\n\nfunction loop() {\n  count++\n  // 代码执行所消耗的时间\n  let offset = new Date().getTime() - (startTime + count * interval);\n  let diff = end - new Date().getTime()\n  let h = Math.floor(diff / (60 * 1000 * 60))\n  let hdiff = diff % (60 * 1000 * 60)\n  let m = Math.floor(hdiff / (60 * 1000))\n  let mdiff = hdiff % (60 * 1000)\n  let s = mdiff / (1000)\n  let sCeil = Math.ceil(s)\n  let sFloor = Math.floor(s)\n  // 得到下一次循环所消耗的时间\n  currentInterval = interval - offset \n  console.log('时：'+h, '分：'+m, '毫秒：'+s, '秒向上取整：'+sCeil, '代码执行时间：'+offset, '下次循环间隔'+currentInterval) \n\n  setTimeout(loop, currentInterval)\n}\n\nsetTimeout(loop, currentInterval)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接下来我们来看 ",(0,s.jsx)(n.code,{children:"setInterval"}),"，其实这个函数作用和 ",(0,s.jsx)(n.code,{children:"setTimeout"})," 基本一致，只是该函数是每隔一段时间执行一次回调函数。"]}),"\n",(0,s.jsxs)(n.p,{children:["通常来说不建议使用 ",(0,s.jsx)(n.code,{children:"setInterval"}),"。第一，它和 ",(0,s.jsx)(n.code,{children:"setTimeout"})," 一样，不能保证在预期的时间执行任务。第二，回调函数执行时间不确定，可能会出现意外情况。"]}),"\n",(0,s.jsx)(n.p,{children:"这里我解释下第二个缺点。比如说定时器设定每 100 毫秒执行一次，回调函数中需要执行一些耗时操作，需要 300 毫秒。"}),"\n",(0,s.jsx)(n.p,{children:"第一次回调函数正常被执行，100 毫秒之后第二个回调函数进入定时器队列等待执行，再 100 毫秒之后第三个回调函数也需要进入队列，但是此时队列中已经有相同的函数在排队了，所以此次函数不会被推入队列中等待执行，也就导致了意外情况的发生。"}),"\n",(0,s.jsxs)(n.p,{children:["如果你有循环定时器的需求，其实完全可以通过 ",(0,s.jsx)(n.code,{children:"requestAnimationFrame"})," 来实现"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function setInterval(callback, interval) {\n  let timer\n  const now = Date.now\n  let startTime = now()\n  let endTime = startTime\n  const loop = () => {\n    timer = window.requestAnimationFrame(loop)\n    endTime = now()\n    if (endTime - startTime >= interval) {\n      startTime = endTime = now()\n      callback(timer)\n    }\n  }\n  timer = window.requestAnimationFrame(loop)\n  return timer\n}\n\nlet a = 0\nsetInterval(timer => {\n  console.log(1)\n  a++\n  if (a === 3) cancelAnimationFrame(timer)\n}, 1000)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["首先 ",(0,s.jsx)(n.code,{children:"requestAnimationFrame"})," 自带函数节流功能，基本可以保证在 16.6 毫秒内只执行一次（不掉帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题，当然你也可以通过该函数来实现 ",(0,s.jsx)(n.code,{children:"setTimeout"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"常见考点-4",children:["常见考点",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见考点-4",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"setTimeout、setInterval、requestAnimationFrame 区别是什么？"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"异步编程是 JS 中较难掌握的内容，同时也是很重要的知识点。以上提到的每个知识点其实都可以作为一道面试题，希望大家可以好好掌握以上内容如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。"})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let d=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%2F6.JS%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%8F%8A%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98.md"]={toc:[{text:"更新日志",id:"更新日志",depth:2},{text:"并发（concurrency）和并行（parallelism）区别",id:"并发concurrency和并行parallelism区别",depth:2},{text:"回调函数（Callback）",id:"回调函数callback",depth:2},{text:"常见考点",id:"常见考点",depth:3},{text:"Generator",id:"generator",depth:2},{text:"常见考点",id:"常见考点-1",depth:3},{text:"Promise",id:"promise",depth:2},{text:"常见考点",id:"常见考点-2",depth:3},{text:"async 及 await",id:"async-及-await",depth:2},{text:"常见考点",id:"常见考点-3",depth:3},{text:"常用定时器函数",id:"常用定时器函数",depth:2},{text:"常见考点",id:"常见考点-4",depth:3},{text:"小结",id:"小结",depth:2}],title:"6.JS 异步编程及常考面试题",headingTitle:"6.JS 异步编程及常考面试题",frontmatter:{}}}}]);