"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["16289"],{645524:function(n,e,r){r.r(e),r.d(e,{default:()=>d});var s=r(552676),i=r(740453);let c=r.p+"static/image/7b3a64ba674c81e5569738ef9d4e31e1.77ba722d.webp",o=r.p+"static/image/d143f6963e1632d52549130885c07c1b.d83260ba.webp",a=r.p+"static/image/0e1cf3efcba3afbefbc96f5c2ebba07a.30c1219b.webp";function t(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",img:"img",h2:"h2",h3:"h3",pre:"pre",strong:"strong",ol:"ol",li:"li"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"13具体实现入口设计--发布-npm-包",children:["13.具体实现：入口设计 & 发布 NPM 包",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#13具体实现入口设计--发布-npm-包",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["学习完上节课程后，",(0,s.jsx)(e.code,{children:"step2-7"})," 的实现原理我们就都讲完了，在第 4 节课学习架构设计的时候，我们有提到分析工具支持两种使用模式，这一小节我们主要讲解这两种入口该如何设计，也就是 ",(0,s.jsx)(e.code,{children:"step1"})," 的相关内容。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"cli-模式",children:["CLI 模式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#cli-模式",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"CLI 模式即命令行模式，可以配合 npm script 来驱动，入口为可执行脚本，命令行模式在分析前会对命令行参数以及配置文件参数进行校验，对分析环境进行预处理（清理目录、创建目录），分析完成后会生成分析报告及诊断报告，清理分析环境（删除临时目录、结束进程）。"}),"\n",(0,s.jsxs)(e.h3,{id:"可执行脚本",children:["可执行脚本",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#可执行脚本",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["第一行的 ",(0,s.jsx)(e.code,{children:"#!/usr/bin/env node"})," 表示该文件是一个可执行脚本，相关代码在 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/code-analysis-ts/blob/main/cli/index.js",target:"_blank",rel:"noopener noreferrer",children:"cli/index.js"})," 中："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"#!/usr/bin/env node\nconst program = require('commander');                                                           // 命令行交互\nconst path = require('path');                                                                   // 路径操作\nconst fs = require('fs');                                                                       // 文件操作\nconst chalk = require('chalk');                                                                 // 美化输出\nconst { writeReport, writeDiagnosisReport } = require(path.join(__dirname, '../lib/report'));   // 报告模块\nconst { REPORTDEFAULTDIR, VUETEMPTSDIR } = require(path.join(__dirname, '../lib/constant'));    // 常量模块\nconst { mkDir, rmDir } = require(path.join(__dirname, '../lib/file'));                          // 文件工具\nconst codeAnalysis = require(path.join(__dirname,'../lib/index'));                              // 分析入口\n\nprogram\n    .command('analysis')\n    .description('analysis code and echo report')\n    .action(async () => {\n        try{\n            const configPath =path.join(process.cwd(),'./analysis.config.js');\n            const isConfig =fs.existsSync(configPath);\n            if(isConfig){\n                let config =require(configPath);\n                if(config.scanSource && Array.isArray(config.scanSource) && config.scanSource.length>0){\n                    let isParamsError = false;\n                    let isCodePathError = false;\n                    let unExistDir = '';\n                    for (let i =0; i<config.scanSource.length; i++){\n                        if(!config.scanSource[i].name || !config.scanSource[i].path || !Array.isArray(config.scanSource[i].path) || config.scanSource[i].path.length ==0){\n                            isParamsError = true;\n                            break;\n                        }\n                        let innerBreak = false;\n                        const tempPathArr = config.scanSource[i].path;\n                        for (let j =0; j<tempPathArr.length; j++){\n                            const tempPath = path.join(process.cwd(), tempPathArr[j]);\n                            if(!fs.existsSync(tempPath)){\n                                isCodePathError = true;\n                                unExistDir = tempPathArr[j];\n                                innerBreak = true;\n                                break;\n                            }\n                        }\n                        if(innerBreak)break;\n                    }\n                    if(!isParamsError){\n                        if(!isCodePathError){\n                            if(config && config.analysisTarget){\n                                try{\n                                    // 如果分析报告目录已经存在，则先删除目录\n                                    rmDir(config.reportDir || REPORTDEFAULTDIR);\n                                    // 如果temp目录已经存在，则先删除目录\n                                    rmDir(VUETEMPTSDIR);\n                                    // 如果需要扫描vue文件，创建temp目录\n                                    if(config.isScanVue){\n                                        mkDir(VUETEMPTSDIR);\n                                    }\n                                    // 分析代码\n                                    const { report, diagnosisInfos } = await codeAnalysis(config);\n                                    // 输出分析报告\n                                    writeReport(config.reportDir || 'report', report);\n                                    // 输出诊断报告\n                                    writeDiagnosisReport(config.reportDir || 'report', diagnosisInfos);\n                                    // 删除temp目录\n                                    rmDir(VUETEMPTSDIR);\n                                    // 代码告警/正常退出\n                                    if(config.scorePlugin && config.alarmThreshold && typeof(config.alarmThreshold) ==='number' && config.alarmThreshold >0){\n                                        if(report.scoreMap.score && report.scoreMap.score < config.alarmThreshold){\n                                            console.log(chalk.red('\\n' + '代码得分：' + report.scoreMap.score + ', 不合格'));      // 输出代码分数信息\n                                            if(report.scoreMap.message.length >0){                                              // 输出代码建议信息\n                                                console.log(chalk.yellow('\\n' + '优化建议：'));                           \n                                                report.scoreMap.message.forEach((element, index) => {\n                                                    console.log(chalk.yellow((index+1) + '. ' + element));\n                                                });\n                                            }\n                                            console.log(chalk.red('\\n' + '=== 触发告警 ===' + '\\n'));                          // 输出告警信息\n                                            process.exit(1);                                                                  // 触发告警错误并结束进程\n                                        }else{\n                                            console.log(chalk.green('\\n' + '代码得分：' + report.scoreMap.score));              // 输出代码分数信息\n                                            if(report.scoreMap.message.length >0){                                            // 输出代码建议信息\n                                                console.log(chalk.yellow('\\n' + '优化建议：'));                           \n                                                report.scoreMap.message.forEach((element, index) => {\n                                                    console.log(chalk.yellow((index+1) + '. ' + element));\n                                                });\n                                            }\n                                        }\n                                    }else if(config.scorePlugin){\n                                        console.log(chalk.green('\\n' + '代码得分：' + report.scoreMap.score));          // 输出代码分数信息\n                                        if(report.scoreMap.message.length >0){                                               // 输出代码建议信息\n                                            console.log(chalk.yellow('\\n' + '优化建议：'));                           \n                                            report.scoreMap.message.forEach((element, index) => {\n                                                console.log(chalk.yellow((index+1) + '. ' + element));\n                                            });\n                                        }            \n                                    }\n                                }catch(e){\n                                    // 删除temp目录\n                                    rmDir(VUETEMPTSDIR);\n                                    console.log(chalk.red(e.stack));        // 输出错误信息\n                                    process.exit(1);                        // 错误退出进程\n                                }\n                            }else{\n                                console.log(chalk.red('error: 配置文件中缺少必填配置项analysisTarget'));\n                            }\n                        }else{\n                            console.log(chalk.red(`error: 配置文件中待分析文件目录${unExistDir}不存在`));\n                        }\n                    }else{\n                        console.log(chalk.red('error: scanSource参数选项必填属性不能为空'));\n                    }\n                }else{\n                    console.log(chalk.red('error: 配置文件中必填配置项scanSource不能为空'))\n                }\n            }else{\n                console.log(chalk.red('error: 缺少analysis.config.js配置文件'));\n            }\n        }catch(e){\n            console.log(chalk.red(e.stack));\n        }\n    })\n\nprogram.parse(process.argv)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["上述代码我们用到了 ",(0,s.jsx)(e.a,{href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer",children:"commander"})," 这个开发命令行工具常用的基础包。"]}),"\n",(0,s.jsxs)(e.h3,{id:"生成代码分析报告",children:["生成代码分析报告",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#生成代码分析报告",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"代码分析结果返回的是 JS 对象，这对于使用者并不友好，我们需要更直观的表现方式，比如："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"生成代码分析报告的原理很简单，首先将模版 html 复制到指定的报告输出目录，然后将分析结果写入一个 JS 文件， html 引用这个 JS 来获取数据、完成渲染，相关代码如下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"lib/file.js："})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// 输出内容到JSON文件\nexports.writeJsonFile = function (content, fileName) {\n    try{\n        fs.writeFileSync(path.join(process.cwd(),`${fileName}.json`), JSON.stringify(content), 'utf8');\n    }catch(e){\n        throw e;\n    }\n}\n// 输出内容到JS文件\nexports.writeJsFile = function(prc, content, fileName) {\n    try{\n        fs.writeFileSync(path.join(process.cwd(),`${fileName}.js`), prc+JSON.stringify(content), 'utf8');\n    }catch(e){\n        throw e;\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"lib/constant.js："})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// 代码分析报告js,json文件名字\nexports.TEMPLATEDIR = 'template';\n// 代码分析报告js,json文件名字\nexports.REPORTFILENAME = 'index';\n// 代码分析报告js,json文件名字\nexports.REPORTJSPRE = 'var report=';\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"lib/report.js ："})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"const { writeJsFile, writeJsonFile } = require(path.join(__dirname, './file'));                                              // 文件工具\nconst { TEMPLATEDIR, REPORTFILENAME, REPORTJSPRE, DIAGNOSISREPORTFILENAME } = require(path.join(__dirname, './constant'));   // 常量模块\n\n// 生成分析报告\nexports.writeReport = function (dir, content, templatePath=''){\n    try{\n        // 创建目录\n        fs.mkdirSync(path.join(process.cwd(),`/${dir}`),0777);\n        // 复制报告模版\n        if(templatePath && templatePath!=''){\n            fs.writeFileSync(path.join(process.cwd(), `/${dir}/${REPORTFILENAME}.html`), fs.readFileSync(path.join(process.cwd(), `${templatePath}`)));\n        }else{\n            fs.writeFileSync(path.join(process.cwd(), `/${dir}/${REPORTFILENAME}.html`), fs.readFileSync(path.join(__dirname, `../${TEMPLATEDIR}/${REPORTFILENAME}.html`)));\n        }\n        // 分析结果写入文件\n        writeJsFile(REPORTJSPRE, content, `${dir}/${REPORTFILENAME}`); \n        writeJsonFile(content, `${dir}/${REPORTFILENAME}`);\n    }catch(e){\n        throw e;\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"writeReport"})," 第三个参数用于指定自定义报告模版的路径，默认为 ' '，即使用分析工具默认的报告模版，默认报告模板文件是 ",(0,s.jsx)(e.code,{children:"template"})," 目录下的 ",(0,s.jsx)(e.code,{children:"index.html"})," 。"]}),"\n",(0,s.jsxs)(e.h3,{id:"生成工具诊断报告",children:["生成工具诊断报告",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#生成工具诊断报告",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["codeAnalysis 实例上的 ",(0,s.jsx)(e.code,{children:"diagnosisInfos"})," 属性用于存放执行报错，插件报错等信息，",(0,s.jsx)(e.code,{children:"CLI 模式"}),"在分析结束后会将诊断信息输出到 ",(0,s.jsx)(e.code,{children:"diagnosis.json"})," 中，相关代码如下："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"lib/constant.js："})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// 诊断报告json文件名字\nexports.DIAGNOSISREPORTFILENAME = 'diagnosis';\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"lib/report.js"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"const { writeJsonFile } = require(path.join(__dirname, './file'));                                              // 文件工具\nconst { DIAGNOSISREPORTFILENAME } = require(path.join(__dirname, './constant'));   // 常量模块\n// 生成诊断报告\nexports.writeDiagnosisReport = function (dir, content) {\n    try{\n        writeJsonFile(content, `${dir}/${DIAGNOSISREPORTFILENAME}`);\n    }catch(e){\n        throw e;\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"进程结束方式",children:["进程结束方式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#进程结束方式",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["CLI 模式处理进程结束方式的代码在 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/code-analysis-ts/blob/main/cli/index.js",target:"_blank",rel:"noopener noreferrer",children:"cli/index.js"})," 中的 ",(0,s.jsx)(e.code,{children:"63-91"})," 行，如果配置文件中没有配置 ",(0,s.jsx)(e.code,{children:"alarmThreshold"}),"，分析结束会正常结束进程。如果配置了告警阈值，那么在分析结束后，会判断代码评分是否低于阈值，如果低于阈值分析程序会以 ",(0,s.jsx)(e.code,{children:"process.exit(1)"})," 主动抛错的形式来结束进程，这种方式可以作为告警触发器，在 CI 流水线中影响后续脚本的运行，具体应用我们会在第 15 小节中介绍。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"CLI 命令行模式简单便捷，但却无法拓展更多的使用场景，如果想让使用者非常方便地将代码分析能力嫁接到他们自己的工具或者服务中去，我们还需要设计一种标准输出模式。"}),"\n",(0,s.jsxs)(e.h2,{id:"api-模式",children:["API 模式",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#api-模式",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["API 模式会导出一个封装好的分析方法 ",(0,s.jsx)(e.code,{children:"analysis"}),"，使用者只需要调用该方法即可获取代码分析结果。"]}),"\n",(0,s.jsxs)(e.p,{children:["API 模式相关的代码在 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/code-analysis-ts/blob/main/api/index.js",target:"_blank",rel:"noopener noreferrer",children:"api/index.js"})," 中："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"const fs = require('fs');                                                       // 文件操作\nconst path = require('path');                                                   // 路径操作\nconst { VUETEMPTSDIR } = require(path.join(__dirname, '../lib/constant'));      // 常量模块\nconst { mkDir, rmDir } = require(path.join(__dirname, '../lib/file'));          // 文件工具\nconst codeAnalysis = require(path.join(__dirname, '../lib/index'));             // 分析入口\n\nconst analysis = async function(options){\n    if(options){\n        if(!options.scanSource || !Array.isArray(options.scanSource) || options.scanSource.length ==0){\n            Promise.reject(new Error('error: scanSource参数不能为空'))\n            return;\n        }\n        let isParamsError = false;\n        let isCodePathError = false;\n        let unExistDir = '';\n        for (let i =0; i<options.scanSource.length; i++){\n            if(!options.scanSource[i].name || !options.scanSource[i].path || !Array.isArray(options.scanSource[i].path) || options.scanSource[i].path.length ==0){\n                isParamsError = true;\n                break;\n            }\n            let innerBreak = false;\n            const tempPathArr = options.scanSource[i].path;\n            for (let j =0; j<tempPathArr.length; j++){\n                const tempPath = path.join(process.cwd(), tempPathArr[j]);\n                if(!fs.existsSync(tempPath)){\n                    isCodePathError = true;\n                    unExistDir = tempPathArr[j];\n                    innerBreak = true;\n                    break;\n                }\n            }\n            if(innerBreak)break;\n        }\n        if(isParamsError){\n            Promise.reject(new Error('error: scanSource参数选项必填属性不能为空'))\n            return;\n        }\n        if(isCodePathError){\n            Promise.reject(new Error(`error: 待分析文件目录${unExistDir}不存在`))\n            return;\n        }\n        if(!options.analysisTarget){\n            Promise.reject(new Error('error: analysisTarget参数不能为空'))\n            return;\n        }\n    }else{\n        Promise.reject(new Error('error: 缺少options'))\n        return;\n    }\n    try{\n        // 如果temp目录已经存在，则先删除目录\n        rmDir(VUETEMPTSDIR);\n        // 如果需要扫描vue文件，创建temp目录\n        if(options.isScanVue){\n            mkDir(VUETEMPTSDIR);\n        }\n        const { report, diagnosisInfos } = await codeAnalysis(options);\n        // 删除temp目录\n        rmDir(VUETEMPTSDIR);\n        // 返回结果\n        return Promise.resolve({\n            report: report, \n            diagnosisInfos: diagnosisInfos\n        });\n    }catch(e){\n        return Promise.reject(e.stack);\n    }\n}\n\nmodule.exports = analysis;\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"API 模式"}),"也会进行参数验证和环境处理，配置项变成了 ",(0,s.jsx)(e.code,{children:"analysis"})," 方法的入参，API 模式不会生成代码分析报告等文件，执行成功返回分析结果，执行出错则返回错误信息。"]}),"\n",(0,s.jsxs)(e.h3,{id:"模式优点",children:["模式优点",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#模式优点",children:"#"})]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"配置入参更灵活，使用者可以按需消费分析结果。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"可启用多个分析进程并行处理多个代码分析任务。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"不会生成代码分析报告等文件，对执行环境无副作用。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"开发者可以快速集成代码分析能力到其它工具或服务中。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"使用示例",children:["使用示例",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["安装 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/code-analysis-ts",target:"_blank",rel:"noopener noreferrer",children:"code-analysis-ts"})," 依赖，导入 ",(0,s.jsx)(e.code,{children:"analysis"})," 方法调用即可，下面是 ",(0,s.jsx)(e.a,{href:"https://github.com/liangxin199045/code-demo",target:"_blank",rel:"noopener noreferrer",children:"code-demo"})," 项目中 API 模式的使用示例："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"const analysis = require('code-analysis-ts');\nconst { execSync } = require('child_process');                        // 子进程操作\nconst DefaultBranch = 'main';                                         // 默认分支常量\nfunction getGitBranch() {                                             // 获取当前分支\n    try{\n        const branchName = execSync('git symbolic-ref --short -q HEAD', {\n            encoding: 'utf8'\n        }).trim();\n        // console.log(branchName);\n        return branchName;\n    }catch(e){\n        return DefaultBranch;\n    }\n}\n\nasync function scan() {\n    try{\n        const { report, diagnosisInfos } = await analysis({\n            scanSource: [{                                                          // 必须，待扫描源码的配置信息\n                name: 'Code-Demo',                                                                // 必填，项目名称\n                path: ['src'],                                                                    // 必填，需要扫描的文件路径（基准路径为配置文件所在路径）\n                packageFile: 'package.json',                                                      // 可选，package.json 文件路径配置，用于收集依赖的版本信息\n                format: null,                                                                     // 可选, 文件路径格式化函数,默认为null,一般不需要配置\n                httpRepo: `https://github.com/liangxin199045/code-demo/blob/${getGitBranch()}/`   // 可选，项目gitlab/github url的访问前缀，用于点击行信息跳转，不填则不跳转\n            }],                                                                 \n            analysisTarget: 'framework',                                            // 必须，要分析的目标依赖名\n            analysisPlugins: [],                                                    // 可选，自定义分析插件，默认为空数组，一般不需要配置\n            blackList: ['app.localStorage.set', 'location.href'],                   // 可选，需要标记的黑名单api，默认为空数组\n            browserApis: ['window','document','history','location'],                // 可选，要分析的BrowserApi，默认为空数组\n            reportDir: 'docs',                                                      // 可选，生成代码分析报告的目录，默认为'report',不支持多级目录配置\n            reportTitle: 'Code-Demo代码分析报告',                                    // 可选，代码分析报告标题，默认为'代码依赖分析报告'\n            isScanVue: true,                                                        // 可选，是否要扫描分析vue中的ts代码，默认为false\n            scorePlugin: 'default'                                                  // 可选，评分插件: Function|'default'|null, default表示运行默认插件，默认为null表示不评分\n        });                                                                          \n        console.log(report);\n    }catch(e){\n        console.log(e);\n    }\n};\n\nscan();\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"发布-npm-包",children:["发布 npm 包",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#发布-npm-包",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"入口设置",children:["入口设置",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#入口设置",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"API 模式"}),"：module 与 main 字段用于指定 npm 包入口，对于 ESM 规范，module 有更高优先级。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"CLI 模式"}),"：bin 字段用于声明可执行脚本的名字和文件位置。"]}),"\n",(0,s.jsx)(e.p,{children:"package.json 的配置如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "name": "code-analysis-ts",\n  "version": "1.3.8",\n  "description": "a code dependency analysis tool for ts",\n  "main": "./api/index.js",\n  "module": "./api/index.js",\n  "bin": {\n    "ca": "./cli/index.js"\n  },\n  "repository": {\n    "type": "git",\n    "url": "https://github.com/liangxin199045/code-analysis-ts"\n  },\n  "author": "734099485@qq.com",\n  "license": "MIT",\n  "dependencies": {\n    "@vue/compiler-dom": "3.0.2",\n    "chalk": "^4.1.0",\n    "commander": "^6.2.0",\n    "glob": "^7.1.6",\n    "js-md5": "^0.7.3",\n    "moment": "^2.29.4",\n    "ora": "^5.1.0",\n    "single-line-log": "^1.1.2",\n    "typescript": "4.7.4"\n  },\n  "engines": {\n    "node": ">= 10.0.0",\n    "npm": ">= 4.0.0"\n  }\n}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"私有镜像",children:["私有镜像",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#私有镜像",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["公司如果搭建了私有镜像服务来管理内部 NPM 包，那么可以在项目中创建一个 ",(0,s.jsx)(e.code,{children:".npmrc"})," 文件，然后将",(0,s.jsx)(e.code,{children:"npm publish"})," 推送的默认源配置改为私有镜像源，比如："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"registry=https://npm.iceman.io/    // 修改为私有镜像源(示例)\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"自动化发布",children:["自动化发布",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#自动化发布",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["直接通过 ",(0,s.jsx)(e.code,{children:"npm publish"})," 命令在本地发布 NPM 包可能存在以下问题："]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"在 Windows 或 Mac 不同的开发环境下打包，产物可能不一致；"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"npm 包的 version版本 与 code commit 无法相互关联，不好维护。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["通过 ",(0,s.jsx)(e.code,{children:"gitLab CI + Tag"})," 的方式可以实现 NPM 自动化打包发布，Tag 用于关联代码版本与发布版本。"]}),"\n",(0,s.jsxs)(e.p,{children:["使用 ",(0,s.jsx)(e.code,{children:"gitLab CI"})," 需要配置一个 ",(0,s.jsx)(e.code,{children:".gitlab-ci.yml"})," 文件，CI 在执行 npm publish 时需要进行权限验证，所以在 ",(0,s.jsx)(e.code,{children:".npmrc"})," 中还要添加有 publish 权限的 npm 账户 token 信息。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:".npmrc"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'registry=https://npm.iceman.io/                                // 私有镜像\n//npm.iceman.io/:_authToken="xxxxxxxxxxx73yb6zR==========="    // token值\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:".gitlab-ci.yml"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"image: node:14                        // CI执行镜像\n\nstages:                               // CI执行阶段\n  - publish\n\npackage:                              // 具体任务\n  stage: publish\n  only:\n    - tags                            // 触发条件\n  script:\n    - npm publish --email=$GITLAB_USER_EMAIL --unsafe-perm    // 执行脚本\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"小结",children:["小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"这一小节我们学习了如何设计工具入口，以及如何发布 NPM 包，需要大家掌握以下知识点："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"CLI 模式"}),"即命令行模式，入口为可执行脚本，通常配合 CI 使用，特点是简单便捷。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"API 模式"}),"是一种标准输出模式，该模式可以让使用者快速集成代码分析能力到其它工具或服务中。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"gitLab CI + Tag"}),"的方式可以实现 NPM 自动化打包发布，Tag 用于关联代码版本与发布版本。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"到此为止，我们分析工具第二阶段的相关课程就都讲完了，下一节我们讲解如何开发自定义分析插件。"})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(t,{...n})}):t(n)}let d=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E4%BE%9D%E8%B5%96%E6%B2%BB%E7%90%86%EF%BC%9A%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%2F13.%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%EF%BC%9A%E5%85%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%20%26%20%E5%8F%91%E5%B8%83%20NPM%20%E5%8C%85.md"]={toc:[{text:"CLI 模式",id:"cli-模式",depth:2},{text:"可执行脚本",id:"可执行脚本",depth:3},{text:"生成代码分析报告",id:"生成代码分析报告",depth:3},{text:"生成工具诊断报告",id:"生成工具诊断报告",depth:3},{text:"进程结束方式",id:"进程结束方式",depth:3},{text:"API 模式",id:"api-模式",depth:2},{text:"模式优点",id:"模式优点",depth:3},{text:"使用示例",id:"使用示例",depth:3},{text:"发布 npm 包",id:"发布-npm-包",depth:2},{text:"入口设置",id:"入口设置",depth:3},{text:"私有镜像",id:"私有镜像",depth:3},{text:"自动化发布",id:"自动化发布",depth:3},{text:"小结",id:"小结",depth:2}],title:"13.具体实现：入口设计 & 发布 NPM 包",headingTitle:"13.具体实现：入口设计 & 发布 NPM 包",frontmatter:{}}}}]);