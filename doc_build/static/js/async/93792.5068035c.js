"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["93792"],{841480:function(e,n,i){i.r(n),i.d(n,{default:()=>W});var r=i(552676),a=i(740453);let s=i.p+"static/image/d086c03192c36954ffdb3dcc8fe9e966.2907d2d2.webp",c=i.p+"static/image/ddbb3a7620f3b2b0fec5a968b83b3ae2.1064a4b1.webp",t=i.p+"static/image/083d39919ff6204e1699142c6d3f7c05.173ca2f3.webp",d=i.p+"static/image/27a8da61d65039593a57952218b8e027.35a3d071.webp",l=i.p+"static/image/701e7a72bd3c2d301d0a7ac4cc5eeea9.18b4cf28.webp",p=i.p+"static/image/a6b1477468ff4e05d892b64f2a5ed681.40c7c1ca.webp",m=i.p+"static/image/ef237e9d4312ab171e1f0d93455e6e2b.e0b88cd8.webp",o=i.p+"static/image/a2114020bae7ada106a5f825e402714f.34a3de81.webp",x=i.p+"static/image/b398537cf6092733161296f71bf59429.d83db188.webp",j=i.p+"static/image/d607ce4e56861fc52f94563bc43abf61.7933b4d2.webp",h=i.p+"static/image/b3f51d7012b04a843e975598b04b7dfe.46822d7a.webp",g=i.p+"static/image/441b36ad6cce27d4f33e7a6727a5de1c.bf6121d8.webp",b=i.p+"static/image/91646bc79f8da6c044b25fa4f51e554f.492cc0f1.webp",f=i.p+"static/image/91d0a0101452cfff6ee395175159d190.d6dbb162.webp",u=i.p+"static/image/af5aa1e9dee3064a4d46f8fea044754b.622ffbbf.webp",y=i.p+"static/image/54182b78a08ecd3c1bc7095cbb9b142e.f1a7aede.webp",w=i.p+"static/image/7c298f6cbbaf130851bcf09f4dfac29e.aff448ca.webp",E=i.p+"static/image/f914cd6f78a68830fd13421c6e899fd1.fca4d3f1.webp",A=i.p+"static/image/f9a9e1124de7be9a8918a63a75a06615.cd5e73b1.webp",_=i.p+"static/image/a72bc7570abfa13611c67920d12d52ee.3d8b2ba8.webp",R=i.p+"static/image/d3d671e2e9983835284beff51ddc2370.a8f3a4e8.webp",T=i.p+"static/image/167a4d0d186eed0053825801d2dbeb95.08842e11.webp",N=i.p+"static/image/d0afddd791a0936e6c7b7f329ed9f7ae.53e057c0.webp",q=i.p+"static/image/aa79aee768bf5d39f2d37fdbf29e2aa7.6b0b0ef7.webp",B=i.p+"static/image/85d2e1cc36f3985125859cffe2d5e3ae.3d43ed35.webp",v=i.p+"static/image/c5d2ccff1d7f1ec93e2120ecd28568fe.d7806b9d.webp",S=i.p+"static/image/a727a4723464f8e81100268f391e0473.8f3ffee7.webp",M=i.p+"static/image/3d5c03cbe280e88d5d586f9448b86310.17257aed.webp",O=i.p+"static/image/828d21cdf2c36ba43497f1cc1f1a314a.56e9cc1c.webp",k=i.p+"static/image/39508684e5fe9682a1a0ee5856d9046d.f51219c0.webp",C=i.p+"static/image/1fddf1e36f70544b124c4975d8a222c8.fba5e160.webp",U=i.p+"static/image/98c85498313903764680a5a9c27478e2.87735b3e.webp",z=i.p+"static/image/b5c4548e7330219e4cdd581b05051ced.eb4d5d15.webp",D=i.p+"static/image/e34efc1f3d88dfbf8e30e5ebec09726e.923418c8.webp",P=i.p+"static/image/edb30bfdf0fb9e6016e57dff2534903c.925f49ca.webp",L=i.p+"static/image/afc7e09863002aa483b4f913d7703f6c.376b9c0f.webp",F=i.p+"static/image/b9a97d63fef599e465159639c70a62f7.4b81deaf.webp",I=i.p+"static/image/faa69e83f1d0fe247d6ab2e8bf8de45e.c30b0c9e.webp",G=i.p+"static/image/844ff2e6d60c8f910b5689674956003b.53da5513.webp",Q=i.p+"static/image/c4d07880890a0a80390a9315c96dea06.e9b46056.webp",H=i.p+"static/image/35d1d8e3840302162d293be998b3c558.e24ea568.webp",Y=i.p+"static/image/889b8f284ae160b6d649109721124532.31286331.webp",K=i.p+"static/image/977b07d0691f86bac4e9ba010239bf3d.f7a81648.webp";function J(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2",ul:"ul",li:"li"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"60-为什么生产环境要用-typeorm-的-migration-迁移功能",children:["60. 为什么生产环境要用 TypeORM 的 migration 迁移功能？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#60-为什么生产环境要用-typeorm-的-migration-迁移功能",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"前面我们基于 TypeORM 操作数据库都是开启了 synchronize，只要创建或者修改了 Entity，那就会自动创建表和修改表结构。"}),"\n",(0,r.jsx)(n.p,{children:"在开发时这样很方便，只要关注代码就好了，不用管修改表结构的事情。"}),"\n",(0,r.jsx)(n.p,{children:"但是在生产环境下，用 synchronize 很危险，很容易丢数据。"}),"\n",(0,r.jsx)(n.p,{children:"我们试一下："}),"\n",(0,r.jsx)(n.p,{children:"新建一个 TypeORM 项目："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npx typeorm@latest init --name typeorm-migration --database mysql\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:K,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"改下 data-source.ts 的配置："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import "reflect-metadata"\nimport { DataSource } from "typeorm"\nimport { User } from "./entity/User"\n\nexport const AppDataSource = new DataSource({\n    type: "mysql",\n    host: "localhost",\n    port: 3306,\n    username: "root",\n    password: "guang",\n    database: "migration-test",\n    synchronize: true,\n    logging: true,\n    entities: [User],\n    migrations: [],\n    subscribers: [],\n    poolSize: 10,\n    connectorPackage: \'mysql2\',\n    extra: {\n        authPlugin: \'sha256_password\',\n    }\n})\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"安装用到的 mysql2:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npm install --save mysql2\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 mysql workbench 里创建这个 database："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"指定名字和字符集，点击 apply."}),"\n",(0,r.jsx)(n.p,{children:"或者也可以执行这个 sql 来创建："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE SCHEMA `migration-test` DEFAULT CHARACTER SET utf8mb4 ;\n"})}),"\n",(0,r.jsx)(n.p,{children:"跑一下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start\n"})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，会自动创建 Entity 对应的表："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 mysql workbench 里也可以看到这个表："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:H,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"把插入数据的代码注释掉："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Q,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"改下 Entity："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:G,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"重新跑下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start\n"})}),"\n",(0,r.jsx)(n.p,{children:"可以看到 TypeORM 检测到 Entity 的变更，修改了表结构："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 mysql workbench 里可以看到，之前的 age 列就没了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:I,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"数据是不是就全丢了！"}),"\n",(0,r.jsx)(n.p,{children:"更何况跑 nest 项目的时候都是用 npm run start:dev，代码改动立刻重新跑，所以很容易丢数据。"}),"\n",(0,r.jsx)(n.p,{children:"所以说，synchronize 在开发环境下确实很方便，但是在生产环境下不能用，不安全。"}),"\n",(0,r.jsx)(n.p,{children:"那不用 synchonize 用啥呢，手动去数据库执行 sql 么？"}),"\n",(0,r.jsx)(n.p,{children:"那倒也不用。"}),"\n",(0,r.jsx)(n.p,{children:"可以用 TypeORM 的 migration 功能。"}),"\n",(0,r.jsx)(n.p,{children:"migration 是迁移的意思，其实前面的 create table、alter table 这些都是 migration："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"只不过之前是自动跑，而现在我们要管理起来，手动跑。"}),"\n",(0,r.jsx)(n.p,{children:"typeorm 提供了一个 cli，执行 migration:create 的命令："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx ts-node ./node_modules/typeorm/cli migration:create ./src/migration/Aaa\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"生成了 “时间戳-Aaa.ts” 文件，这个就是放迁移代码的："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"迁移就是 create table、alter table 这些。"}),"\n",(0,r.jsx)(n.p,{children:"我们在 mysql workbench 里导出下建表 sql 语句："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:z,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"点击左侧的 Data Export，选中要导出的表，指定一个 sql 文件保存位置，点击 Export。"}),"\n",(0,r.jsx)(n.p,{children:"可以看到，生成的 sql 里就包括了 create table 建表语句和插入数据的 insert into 语句："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:U,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们把建表 sql 拿过来："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { MigrationInterface, QueryRunner } from "typeorm";\n\nexport class Aaa1708136448263 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise<void> {\n        await queryRunner.query(`\n            CREATE TABLE user (\n                id int NOT NULL AUTO_INCREMENT,\n                firstName varchar(255) NOT NULL,\n                lastName varchar(255) NOT NULL,\n                PRIMARY KEY (id)\n            ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;    \n        `)\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<void> {\n    }\n\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后把 synchronize 关掉，用 migration 来手动建表："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import "reflect-metadata"\nimport { DataSource } from "typeorm"\nimport { User } from "./entity/User"\n\nexport const AppDataSource = new DataSource({\n    type: "mysql",\n    host: "localhost",\n    port: 3306,\n    username: "root",\n    password: "guang",\n    database: "migration-test",\n    synchronize: false,\n    logging: true,\n    entities: [User],\n    migrations: [\'./src/migration/**.ts\'],\n    subscribers: [],\n    poolSize: 10,\n    connectorPackage: \'mysql2\',\n    extra: {\n        authPlugin: \'sha256_password\',\n    }\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"先在 mysql workbench 里把之前的表删掉："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"把 index.ts 注释放开，但 age 去掉："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后再跑 npm run start"}),"\n",(0,r.jsx)(n.p,{children:"这时候因为 synchronize 关掉了，不会自动建表，所以 报错了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后我们用 migration:run 来手动建表："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx ts-node ./node_modules/typeorm/cli migration:run -d ./src/data-source.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，执行了 migration 里的 create table 语句。"}),"\n",(0,r.jsx)(n.p,{children:"这时候数据库中就有这个表了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"并且还在 migrations 表里记录了什么时间执行了什么迁移："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:q,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这时候再跑 npm run start"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这时候 insert、select 就都成功了。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"生产环境，我们不会用 synchronize 自动同步，就是用的 migration 的方式来建表。"}),"\n",(0,r.jsx)(n.p,{children:"但是导出建表 sql 再复制到 migration 的 up 方法里挺麻烦的。"}),"\n",(0,r.jsx)(n.p,{children:"有没有简便的方法呢？"}),"\n",(0,r.jsx)(n.p,{children:"有，这就是 migration:generate 命令。"}),"\n",(0,r.jsx)(n.p,{children:"把这两个表删掉："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"把之前那个 migration 也删掉："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"我们这次用 migration:generate 来生成："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npx ts-node ./node_modules/typeorm/cli migration:generate ./src/migration/Aaa -d ./src/data-source.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"生成的 migration 文件如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"用 migration:run 执行下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx ts-node ./node_modules/typeorm/cli migration:run -d ./src/data-source.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后再跑下 npm run start："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(n.p,{children:"这样，就不用自己写 migration 文件了，就很方便。"}),"\n",(0,r.jsx)(n.p,{children:"当然，不只是建表算是 migration，修改表结构也算。"}),"\n",(0,r.jsx)(n.p,{children:"我们在 User 里加一个字段："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Column()\nemail: string\n"})}),"\n",(0,r.jsx)(n.p,{children:"再执行下 migration:generate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx ts-node ./node_modules/typeorm/cli migration:generate ./src/migration/Bbb -d ./src/data-source.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这时候生成的 migration 就是 alter table 语句。"}),"\n",(0,r.jsx)(n.p,{children:"跑下 migration:run"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx typeorm-ts-node-esm migration:run -d ./src/data-source.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"在 migrations 表里记录了 Aaa 跑过，所以这次只会跑 Bbb 的 migration。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以跑 migration 也同样可以撤销："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx ts-node ./node_modules/typeorm/cli migration:revert -d ./src/data-source.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"执行 migration:revert 会执行上次的 migration 的 down 方法，并且从 migrations 表里删掉执行记录。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"再次 revert，会撤销上一次的 migration，删掉 user 表："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"所以说，每一次的 migration 都是可控的，可以手动执行、也可以撤销。生产环境我们就是用 migration 来修改表结构，而不是 synchronize"}),"\n",(0,r.jsx)(n.p,{children:"此外，每次都输这么长串命令也太麻烦了，我们可以把它封装成 npm scripts："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:' "migration:create": "npm run typeorm -- migration:create",\n  "migration:generate": "npm run typeorm -- migration:generate -d ./src/data-source.ts",\n  "migration:run": "npm run typeorm -- migration:run -d ./src/data-source.ts",\n  "migration:revert": "npm run typeorm -- migration:revert -d ./src/data-source.ts"\n'})}),"\n",(0,r.jsx)(n.p,{children:"这样用起来就简单多了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["案例代码在",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/typeorm-migration",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"开发环境我们会用 synchronize 来同步 Entity 和数据库表，它会自动执行 create table、alter table，不用手动修改表结构，很方便。"}),"\n",(0,r.jsx)(n.p,{children:"但是它并不安全，因为很容易丢失数据。所以生产环境下我们会把它关掉，用 migration 来管理。"}),"\n",(0,r.jsx)(n.p,{children:"migration 就是把 create table、alter table 等封装成一个个的 migration，可以一步步执行、也可以一步步撤销回去。"}),"\n",(0,r.jsx)(n.p,{children:"有 4 个常用命令："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"migration:create：生成空白 migration 文件"}),"\n",(0,r.jsx)(n.li,{children:"migration:generate：连接数据库，根据 Entity 和数据库表的差异，生成 migration 文件"}),"\n",(0,r.jsx)(n.li,{children:"migration:run：执行 migration，会根据数据库 migrations 表的记录来确定执行哪个"}),"\n",(0,r.jsx)(n.li,{children:"migration:revert：撤销上次 migration，删掉数据库 migrations 里的上次执行记录"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这样就把生产环境里的建表和修改表的操作管理了起来。"})]})}function V(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(J,{...e})}):J(e)}let W=V;V.__RSPRESS_PAGE_META={},V.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F60.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E8%A6%81%E7%94%A8%20TypeORM%20%E7%9A%84%20migration%20%E8%BF%81%E7%A7%BB%E5%8A%9F%E8%83%BD%EF%BC%9F.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"60. 为什么生产环境要用 TypeORM 的 migration 迁移功能？",headingTitle:"60. 为什么生产环境要用 TypeORM 的 migration 迁移功能？",frontmatter:{}}}}]);