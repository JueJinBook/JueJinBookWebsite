"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["75227"],{376988:function(e,r,n){n.r(r),n.d(r,{default:()=>d});var s=n(552676),c=n(740453);function i(e){let r=Object.assign({h1:"h1",a:"a",p:"p",code:"code",blockquote:"blockquote",h2:"h2",ol:"ol",li:"li",strong:"strong"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"第07章实战篇需求概述",children:["第07章—实战篇：需求概述",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#第07章实战篇需求概述",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["\uFEFF## 前言\n本小册的实战篇我们将以 ",(0,s.jsx)(r.a,{href:"https://github.com/rubickCenter/rubick",target:"_blank",rel:"noopener noreferrer",children:"Rubick"})," 项目作为原型来介绍如何一步步动手实现自己的插件化桌面端工具箱。如果你对 ",(0,s.jsx)(r.code,{children:"Rubick"})," 还不了解，可以阅读一下我之前写的介绍文章：",(0,s.jsx)(r.a,{href:"https://juejin.cn/post/7297782151046889482",target:"_blank",rel:"noopener noreferrer",children:"桌面端效率工具 Rubick 来了\uD83C\uDF89"}),"。"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Rubick"})," 是一款基于 ",(0,s.jsx)(r.code,{children:"Electron"})," 做的开源、免费桌面端效率工具箱；目标是通过一系列辅助插件解决工作、学习、开发上的效率问题。可以把 ",(0,s.jsx)(r.code,{children:"Rubick"})," 理解成一个微信 ",(0,s.jsx)(r.code,{children:"App"}),"，插件就是基于微信做的 ",(0,s.jsx)(r.code,{children:"小程序"}),"。不过微信的功能主要是 ",(0,s.jsx)(r.code,{children:"聊天"}),"；而 ",(0,s.jsx)(r.code,{children:"Rubick"})," 功能主要是 ",(0,s.jsx)(r.code,{children:"效率工具"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"1-无边框窗口的拖拽和缩放",children:["1. 无边框窗口的拖拽和缩放",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1-无边框窗口的拖拽和缩放",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"窗口是 Electron 应用程序的首要表现形式和展示形式，无边框窗口是指没有明显边框、标题栏或外框的窗口。它们通常具有以下特点："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"无边框："})," 这种窗口没有传统窗口的标准边框。它们可能只有一个微小的边缘，用于指示窗口的大小和位置。"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"没有标题栏："})," 无边框窗口通常没有传统的标题栏，也就是用于显示窗口标题和操作按钮（如最小化、最大化和关闭按钮）的区域。"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"内容焦点："})," 它们着重于窗口内容，让用户更专注于应用程序或内容本身，而不是窗口装饰或边框。"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"这种设计风格通常出现在现代化的用户界面和应用程序中，以提供更清晰、更简洁的外观，并且在某些情况下可能有助于提升用户体验。"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Rubick"})," 有两类无边框窗口，一种是主程序的默认搜索窗口："]}),"\n",(0,s.jsxs)(r.p,{children:["另外一种是有自定义控件栏（最大化、最小化、关闭），嵌入式的 ",(0,s.jsx)(r.code,{children:"windows"})," 窗口："]}),"\n",(0,s.jsxs)(r.p,{children:["这两类窗口的实现中，都有各自的问题，默认情况下，无边框窗口是不可拖拽的。而若你有自定义标题栏，或者嵌入式的",(0,s.jsx)(r.code,{children:"windows"})," 窗口控件需求时，又需要自行实现控件栏。后面的 ",(0,s.jsx)(r.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304842955721408550",target:"_blank",rel:"noopener noreferrer",children:"《实战篇：定义窗口的拖拽和缩放》"})," 章节我们将会详细介绍。"]}),"\n",(0,s.jsxs)(r.h2,{id:"2-应用的快速检索",children:["2. 应用的快速检索",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#2-应用的快速检索",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["作为一款提升效率的工具，其最重要的功能之一是快速检索当前系统中安装的应用，并立即启动这些应用。市面上确实有很多 ",(0,s.jsx)(r.code,{children:"App"})," 能够满足这一需求，例如："]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Raycast"}),"："]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Alfred"}),"："]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"uTools"}),"："]}),"\n",(0,s.jsxs)(r.p,{children:["但是，这些软件要么不支持多平台，要么是商业化产品需要付费。所以，如果你希望了解如何自行打造一个支持应用检索和快速启动的跨平台桌面应用程序，建议你继续阅读后面的",(0,s.jsx)(r.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304842172439658546",target:"_blank",rel:"noopener noreferrer",children:"《实战篇：实现应用快速检索》"}),"章节。"]}),"\n",(0,s.jsxs)(r.h2,{id:"3-插件化的设计体系",children:["3. 插件化的设计体系",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#3-插件化的设计体系",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["作为一个桌面端效率工具箱而言，为了适配各种场景和工作的需要，不得不实现非常多的功能来满足使用需求。比如我们需要一个 ",(0,s.jsx)(r.code,{children:"远程调试&网络抓包"})," 的工具，然后我们基于此开发了一款桌面端工具："]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"这也是 Rubick 最早的雏形"}),"。随后，我们发现当页面发布线上的时候，没有办法在微信环境内对线上页面进行调试，所以开发了一个基于 winner 的远程调试功能。"]}),"\n",(0,s.jsx)(r.p,{children:"但随着该 Rubick 在内部不断推广和使用，所需功能也越来越多。我们需要需求管理、性能评估、埋点检测等工具。这些工具的增加一方面导致 Rubick 体积暴增，一方面又导致了用户需要不断更新软件，导致用户体验非常差。"}),"\n",(0,s.jsx)(r.p,{children:"其次，我们在推广给测试、UI 同学使用的时候，发现他们其实并不关注前面的页面调试、性能测评等功能，可能只是用到其中某一项，所以整个项目对他们来说就显得很臃肿。"}),"\n",(0,s.jsx)(r.p,{children:"因此，插件化体系设计是解决这些问题的最优解，让每个需求功能都独立成一个个插件，只需要安装需要的插件，插件可以单独迭代和发布。"}),"\n",(0,s.jsxs)(r.p,{children:["如果你对插件化体系的实现原理和常用的插件开发比较感兴趣，可以阅读我们后续的 ",(0,s.jsx)(r.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304648624179576871",target:"_blank",rel:"noopener noreferrer",children:"《实战篇：如何支持工具插件化》"})," 篇进行详细阅读。"]}),"\n",(0,s.jsxs)(r.h2,{id:"4-实现超级面板",children:["4. 实现超级面板",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#4-实现超级面板",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"相信很多小伙伴听说过或体验过一些划词翻译的桌面端应用，这个功能在辅助阅读外文文档遇到生疏的语句或单词的时候，非常有用。"}),"\n",(0,s.jsxs)(r.p,{children:["另外，如果你有用过 ",(0,s.jsx)(r.a,{href:"https://molunerfinn.com/PicGo/",target:"_blank",rel:"noopener noreferrer",children:"picgo"})," 这样的软件，那你可能体验过右击菜单增强的特性：当鼠标选中图片，右击触发系统菜单的时候，会弹出系统右击菜单，并可以通过菜单面板选项进行直接上传。关于如何将你的应用选项注入到系统右击菜单项目中，我们会在",(0,s.jsx)(r.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304843033281822730",target:"_blank",rel:"noopener noreferrer",children:"《实战：Electron 应用注入到系统右键菜单》"})," 章节详细介绍。"]}),"\n",(0,s.jsxs)(r.p,{children:["但是系统菜单内容毕竟太多、太杂了，而且我们无法自定义一些常用的功能。所以，我们要实现的超级面板就是",(0,s.jsx)(r.strong,{children:"一个支持快速唤起、划词翻译、文件自动匹配插件的系统菜单增强的超级“菜单”："})]}),"\n",(0,s.jsxs)(r.p,{children:["在",(0,s.jsx)(r.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304842836837728294",target:"_blank",rel:"noopener noreferrer",children:"《实战篇：实现超级面板》"}),"的章节中，我们将会一起从零实现一个属于自己的“超级菜单”来提升自己的工作效率。"]}),"\n",(0,s.jsxs)(r.h2,{id:"5-本地数据库和多端数据同步",children:["5. 本地数据库和多端数据同步",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#5-本地数据库和多端数据同步",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"桌面端 App 在运行期间会产生大量的数据，这些数据大多是存储在本地环境的，所以我们需要设计与实现一套客户端环境下的本地数据库的存储策略。"}),"\n",(0,s.jsx)(r.p,{children:"另外，如果你有多个电脑设备，你可能会经常碰到设备之前数据传输的问题。其实这个场景我们经常碰到，比如微信、钉钉、QQ 这些聊天类软件，它们自带了多端数据同步的能力：当我们在手机上进行聊天时产生了大量数据，在当我们登录电脑设备时，这些数据又可以被同步到电脑终端上。"}),"\n",(0,s.jsxs)(r.p,{children:["而我们的应用场景也很类似，我们的 ",(0,s.jsx)(r.code,{children:"Rubick"})," 工具箱装载了大量的插件，如果我们工作的电脑 A 使用了这些插件并产生了一些数据，当我们再切到电脑 B 上使用插件的时候，我们是希望这些数据是能够同步的。因此，我们需要设计一套多端数据同步的能力：",(0,s.jsx)(r.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304843147903762482",target:"_blank",rel:"noopener noreferrer",children:"《实战篇：本地数据库和多端数据同步》"}),"。"]}),"\n",(0,s.jsxs)(r.h2,{id:"6-菜单截图取色",children:["6. 菜单、截图、取色",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#6-菜单截图取色",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"作为一款桌面端软件，我们也会实现一些通用和基础的功能。比如:"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"截图"})}),"\n",(0,s.jsxs)(r.p,{children:["截图能力在 Electron 中有两种实现方式，一种是基于 Electron 的 ",(0,s.jsx)(r.a,{href:"https://www.electronjs.org/zh/docs/latest/api/desktop-capturer",target:"_blank",rel:"noopener noreferrer",children:"desktopCapturer API"})," 和 web 提供的 ",(0,s.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia",target:"_blank",rel:"noopener noreferrer",children:"navigator.mediaDevices.getUserMedia"}),"。还有一种是调用原生截图功能，关于这两种方式，我们将会在：",(0,s.jsx)(r.a,{href:"https://juejin.cn/book/7302990019642261567/section/7311970169471107110",target:"_blank",rel:"noopener noreferrer",children:"《实战篇：Electron 实现屏幕截图》"})," 章节详细介绍。"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"屏幕取色"})}),"\n",(0,s.jsxs)(r.p,{children:["我们将会在 ",(0,s.jsx)(r.a,{href:"https://juejin.cn/book/7302990019642261567/section/7304842476639453193",target:"_blank",rel:"noopener noreferrer",children:"《实战篇：系统插件的加载和取色插件的开发》"})," 详细介绍取色插件的实现。"]}),"\n",(0,s.jsxs)(r.h2,{id:"总结",children:["总结",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["本小节作为实战篇的开篇内容，主要为大家介绍了一些我们接下来将要实现的工具箱核心能力，接下来的内容将会通过实战化的模式以点及面地为大家介绍 ",(0,s.jsx)(r.code,{children:"Electron"})," 开发的方方面面知识。相信通过实际动手操作，你会对 ",(0,s.jsx)(r.code,{children:"Electron"})," 桌面端开发产生更深刻的认知和理解。"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,c.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let d=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC07%E7%AB%A0%E2%80%94%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%9A%E9%9C%80%E6%B1%82%E6%A6%82%E8%BF%B0.md"]={toc:[{text:"1. 无边框窗口的拖拽和缩放",id:"1-无边框窗口的拖拽和缩放",depth:2},{text:"2. 应用的快速检索",id:"2-应用的快速检索",depth:2},{text:"3. 插件化的设计体系",id:"3-插件化的设计体系",depth:2},{text:"4. 实现超级面板",id:"4-实现超级面板",depth:2},{text:"5. 本地数据库和多端数据同步",id:"5-本地数据库和多端数据同步",depth:2},{text:"6. 菜单、截图、取色",id:"6-菜单截图取色",depth:2},{text:"总结",id:"总结",depth:2}],title:"第07章—实战篇：需求概述",headingTitle:"第07章—实战篇：需求概述",frontmatter:{}}}}]);