"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["63649"],{57859:function(e,n,s){s.r(n),s.d(n,{default:()=>N});var a=s(552676),i=s(740453);let c=s.p+"static/image/60d27dad337f16f458b051742703990b.b0475b35.webp",r=s.p+"static/image/5a6ad02fc7978c43199050a17a707e9c.ee7560f9.webp",t=s.p+"static/image/1a0017b4a7e6395d050864f97a1fec38.2819a785.webp",d=s.p+"static/image/9fe2b8ca36e2eac81e1b87ed39cca11e.1a6bb0cf.webp",p=s.p+"static/image/b81732e3f351216611d167d6333c8a08.d53c2268.webp",l=s.p+"static/image/2d7e0add4cde0cfa0ee2588ce1ee8599.ae576cd3.webp",m=s.p+"static/image/aa0d750e210b36b6f727c4da66190fa8.d71af26a.webp",x=s.p+"static/image/039031f5d85339b3d716adc62aedaf49.46cf2f3a.webp",j=s.p+"static/image/934fd059001456f6f07b0506b447a9fa.a32d4798.webp",h=s.p+"static/image/35a16e85d9fd92ae5ae92a40570aa7b7.389272a9.webp",o=s.p+"static/image/1b18ba360e34a65269741a873faf0b7f.fe254f34.webp",b=s.p+"static/image/19ecfd7066e1f29f60cd4b8e026dde5f.d6c72ce5.webp",g=s.p+"static/image/859b26eaa98849bb7276b25f8a7b4ad4.2d5d5ead.webp",f=s.p+"static/image/5053b9f0bd1b19d73721122955a34869.c78a5627.webp",u=s.p+"static/image/76006dff765fa7b00b308e1d460a0973.cebc057e.webp",w=s.p+"static/image/e8ec980383e04b6468377a64fe113523.f8ab4b34.webp",y=s.p+"static/image/b26dba138e0b052511ad21ceb9c5ae54.9b0a4ef7.webp",E=s.p+"static/image/3357d146fd25008422cb4b0a1d5b733f.c13caf35.webp",R=s.p+"static/image/b2642f8d96062b83aef2e31411d03fd9.f5c54b3b.webp",A=s.p+"static/image/66595f3a24db37fad3a561ebd87719a8.c5053884.webp",_=s.p+"static/image/0f5788979719fd81ea57d7bb926f442d.9ff99f87.webp",v=s.p+"static/image/113774c772f8253e19c0a31b62b3d653.11f4dfb8.webp",C=s.p+"static/image/ac178402fc10453b39043b10aa6c7a5c.238949e6.webp",S=s.p+"static/image/514d0e2373b205bb2322c12b960a2e7a.ccf0e686.webp",P=s.p+"static/image/6f76c10fe3ac6e4fe029ba911b84854e.669a56dc.webp",D=s.p+"static/image/d122f237ea8838b04358e59ebe62fa1b.6ef1a639.webp",q=s.p+"static/image/21731a19b7071ba4ac04531a74c824a2.61b86a65.webp",M=s.p+"static/image/f1b9b77add816f435e4f22dd05c3ed26.7dbeb206.webp";function k(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,i.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"146-快速入门-orm-框架-prisma",children:["146. 快速入门 ORM 框架 Prisma",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#146-快速入门-orm-框架-prisma",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"我们学习了 TypeORM，它是一个传统的 ORM 框架，也就是把表映射到 entity 类，把表的关联映射成 entity 类的属性关联。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:M,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"完成 entity 和表的映射之后，你只要调用 userRepository 和 postRepository 的 find、delete、save 等 api，typeorm 会自动生成对应的 sql 语句并执行。"}),"\n",(0,a.jsx)(n.p,{children:"这就是 Object Relational Mapping，也就是对象和关系型数据库的映射的含义。"}),"\n",(0,a.jsx)(n.p,{children:"而 Prisma 不是这样的，它没有 entity 类的存在。"}),"\n",(0,a.jsx)(n.p,{children:"那映射什么呢？"}),"\n",(0,a.jsx)(n.p,{children:"Prisma 创造了一种 DSL（Domain Specific Language，领域特定语言）。"}),"\n",(0,a.jsx)(n.p,{children:"类似这样："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:q,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"它是把表映射成了 DSL 里的 model，然后编译这个 DSL 会生成 prismaClient 的代码，之后就可以调用它的 find、delete、create 等 api 来做 CRUD 了："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"虽然多了一种 DSL 的语法，但整个流程其实和 typeorm 差不多的。"}),"\n",(0,a.jsx)(n.p,{children:"我们来写下试试："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"mkdir prisma-test\ncd prisma-test\nnpm init -y\n"})}),"\n",(0,a.jsx)(n.p,{children:"首先生成项目："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:D,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"安装 typescript 相关的包："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install typescript ts-node @types/node --save-dev\n"})}),"\n",(0,a.jsx)(n.p,{children:"typescript 是 tsc 编译器的包，ts-node 可以直接跑 ts 代码，而 @types/node 是 node api 的类型声明。"}),"\n",(0,a.jsx)(n.p,{children:"然后创建 tsconfig.json"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npx tsc --init\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:P,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"安装 prisma："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm install prisma --save-dev\n"})}),"\n",(0,a.jsx)(n.p,{children:"之后就可以来写代码了。"}),"\n",(0,a.jsx)(n.p,{children:"首先，我们要写 schema 层的代码："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这个也是用命令生成："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npx prisma init --datasource-provider mysql\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:S,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这时你会发现项目目录下多了 schema 文件和 env 文件："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:C,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"schema 文件里就是定义 model 的地方。"}),"\n",(0,a.jsx)(n.p,{children:"这个文件可以安装 prisma 插件来添加语法高亮等支持："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:v,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"而 .env 文件里存储着连接信息："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:_,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"我们先去 mysql workbench 里创建个数据库："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:A,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"指定字符集为 utf8mb4，这个支持的字符集是最全的。"}),"\n",(0,a.jsx)(n.p,{children:"或者执行这个 sql："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE SCHEMA `prisma_test` DEFAULT CHARACTER SET utf8mb4;\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:R,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"创建完 database 后，我们改下连接信息："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:E,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-env",children:'DATABASE_URL="mysql://root:guang@localhost:3306/prisma_test"\n'})}),"\n",(0,a.jsx)(n.p,{children:"改下用户名、密码、连接的数据库。"}),"\n",(0,a.jsx)(n.p,{children:"然后来定义 model："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:y,alt:""})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-prisma",children:"model User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"有了 mysql 和 typeorm 的基础后，这些很容易能看懂。"}),"\n",(0,a.jsx)(n.p,{children:"@id 是主键"}),"\n",(0,a.jsx)(n.p,{children:"@default(autoincrement()) 是指定默认值是自增的数字"}),"\n",(0,a.jsx)(n.p,{children:"@unique 是添加唯一约束"}),"\n",(0,a.jsx)(n.p,{children:"@relation 是指定多对一的关联关系，通过 authorId 关联 User 的 id"}),"\n",(0,a.jsx)(n.p,{children:"然后只要基于它生成 client 的代码，就可以来 crud 了："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npx prisma migrate dev --name aaa\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:w,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"执行 prisma migrate dev，会生成并执行建表 sql 文件，而且在 node_modules 下生成了 client 代码。"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:u,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在 mysql workbench 里可以看到生成了 2 个表："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:f,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:b,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"在 node_modules/.prisma/client 下生成的代码也包含了 user 和 post 的信息："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:o,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后就可以用 @prisma/client 来做 CRUD 了。"}),"\n",(0,a.jsx)(n.p,{children:"创建 src/index.ts"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient();\n\nasync function test1() {\n    await prisma.user.create({\n        data: {\n            name: 'guang',\n            email: '111@gaung.com'\n        }\n    });\n\n    await prisma.user.create({\n        data: {\n            name: 'dong',\n            email: '222@dong.com'\n        }\n    });\n\n    const users = await prisma.user.findMany();\n    console.log(users);\n}\n\ntest1();\n"})}),"\n",(0,a.jsx)(n.p,{children:"创建 PrismaClient，用 create 方法创建了 2 个 user，然后查询出来。"}),"\n",(0,a.jsx)(n.p,{children:"跑一下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npx ts-node ./src/index.ts\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:h,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以看到，user 表确实插入了 2 条记录："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:j,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后我们再来插入一个新的 user 和它的两个 post："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient({\n  log: [\n    {\n      emit: 'stdout',\n      level: 'query'\n    },\n  ],\n});\n\nasync function test2() {\n    const user = await prisma.user.create({\n        data: {\n            name: '东东东',\n            email: 'dongdong@dong.com',\n            posts: {\n                create: [\n                    {\n                        title: 'aaa',\n                        content: 'aaaa'\n                    },\n                    {\n                        title: 'bbb',\n                        content: 'bbbb'\n                    }\n                ]\n            },\n        },\n    })\n    console.log(user)\n}\n\ntest2();\n"})}),"\n",(0,a.jsx)(n.p,{children:"这里开启了 prisma 的 log，会打印 sql。"}),"\n",(0,a.jsx)(n.p,{children:"然后用 create 方法创建了 user，并且 create 了两个关联的 post。"}),"\n",(0,a.jsx)(n.p,{children:"执行下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npx ts-node ./src/index.ts\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:x,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"可以看到被事务包裹的三条 insert 语句。"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)("img",{src:m,alt:""}),"\n",(0,a.jsx)("img",{src:l,alt:""})]}),"\n",(0,a.jsx)(n.p,{children:"数据也都插入成功了。"}),"\n",(0,a.jsx)(n.p,{children:"然后是再来试下更新和删除："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"async function test3() {\n    await prisma.post.update({\n        where: {\n            id: 2\n        },\n        data: {\n            content: 'xxx'\n        }\n    })\n}\ntest3();\n"})}),"\n",(0,a.jsx)(n.p,{children:"更新 id 为 2 的 post 的内容为 xxx："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:p,alt:""})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"然后把它删掉："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"async function test4() {\n    await prisma.post.delete({\n        where: {\n            id: 2\n        }\n    });\n}\ntest4();\n"})}),"\n",(0,a.jsxs)(n.p,{children:["执行下：\n",(0,a.jsx)("img",{src:t,alt:""})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:r,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"这样，基于 prisma 的 model 定义还有 CRUD 我们就都完成了。"}),"\n",(0,a.jsx)(n.p,{children:"回顾下整个流程："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:""})}),"\n",(0,a.jsx)(n.p,{children:"只是把 entity 类变成了 DSL 语法里的 model，然后通过编译的方式生成 client 的代码，之后进行 CRUD。"}),"\n",(0,a.jsxs)(n.p,{children:["案例代码在",(0,a.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/prisma-test",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,a.jsxs)(n.h2,{id:"总结",children:["总结",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"我们学习了 ORM 框架 prisma，它和 typeorm 大同小异。"}),"\n",(0,a.jsx)(n.p,{children:"typeorm 是把表映射成 entity 类，然后调用 repository 的 api 来做 CRUD。"}),"\n",(0,a.jsx)(n.p,{children:"prisma 是把条映射成 schema 的 model，然后编译生成 client 代码，之后进行 crud。"}),"\n",(0,a.jsx)(n.p,{children:"用到这两个命令："}),"\n",(0,a.jsx)(n.p,{children:"primsa init 创建 schema 文件"}),"\n",(0,a.jsx)(n.p,{children:"prisma migrate dev 根据 schema 文件生成 sql 并执行，还会生成 client 代码。"}),"\n",(0,a.jsx)(n.p,{children:"之后就是 CRUD 了，涉及到 findMany、create、delete、update 等 api。"}),"\n",(0,a.jsx)(n.p,{children:"这节只是入了个门，下节来更全面的掌握 prisma。"})]})}function U(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(k,{...e})}):k(e)}let N=U;U.__RSPRESS_PAGE_META={},U.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F146.%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20ORM%20%E6%A1%86%E6%9E%B6%20Prisma.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"146. 快速入门 ORM 框架 Prisma",headingTitle:"146. 快速入门 ORM 框架 Prisma",frontmatter:{}}}}]);