"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["50564"],{518632:function(e,n,s){s.r(n),s.d(n,{default:()=>i});var r=s(552676),d=s(740453);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",code:"code",h2:"h2",strong:"strong",pre:"pre",blockquote:"blockquote",ol:"ol"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"15有哪些值得学习的构建性能极致优化技巧",children:["15.有哪些值得学习的构建性能极致优化技巧？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#15有哪些值得学习的构建性能极致优化技巧",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"前面章节我们已经详细探讨 Webpack 中如何借助若干工具分析构建性能，以及如何使用缓存与多进程能力提升构建性能的基本方法与实现原理，这两种方法都能通过简单的配置，极大提升大型项目的编译效率。"}),"\n",(0,r.jsx)(n.p,{children:"除此之外，还可以通过一些普适、细碎的最佳实践，减少编译范围、编译步骤提升性能，包括："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"使用最新版本 Webpack、Node；"}),"\n",(0,r.jsxs)(n.li,{children:["配置 ",(0,r.jsx)(n.code,{children:"resolve"})," 控制资源搜索范围；"]}),"\n",(0,r.jsxs)(n.li,{children:["针对 npm 包设置 ",(0,r.jsx)(n.code,{children:"module.noParse"})," 跳过编译步骤；"]}),"\n",(0,r.jsx)(n.li,{children:"等等。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"下面我们一一展开，解释每条最佳实践以及背后的逻辑。"}),"\n",(0,r.jsxs)(n.h2,{id:"使用最新版本",children:["使用最新版本",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用最新版本",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"始终使用最新 Webpack 版本，这算的上是性价比最高的优化手段之一了！从 Webpack V3，到 V4，再到最新的 V5 版本，虽然构建功能在不断叠加增强，但性能反而不断得到优化提升，这得益于 Webpack 开发团队始终重视构建性能，在各个大版本之间不厌其烦地重构核心实现，例如："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["V3 到 V4 重写 Chunk 依赖逻辑，将原来的父子树状关系调整为 ",(0,r.jsx)(n.code,{children:"ChunkGroup"})," 表达的有序图关系，提升代码分包效率；"]}),"\n",(0,r.jsxs)(n.li,{children:["V4 到 V5 引入 ",(0,r.jsx)(n.code,{children:"cache"})," 功能，支持将模块、模块关系图、产物等核心要素持久化缓存到硬盘，减少重复工作。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["其次，新版本通常还会引入更多性能工具，例如 Webpack5 的 ",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/cache/",target:"_blank",rel:"noopener noreferrer",children:"cache"}),"(持久化缓存)、",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/experiments/#experimentslazycompilation",target:"_blank",rel:"noopener noreferrer",children:"lazyCompilation"}),"（按需编译，下面展开介绍） 等。因此，开发者应该保持时刻更新 Webpack 以及 Node、NPM or Yarn 等基础环境，尽量使用最新稳定版本完成构建工作。"]}),"\n",(0,r.jsxs)(n.h2,{id:"使用-lazycompilation",children:["使用 ",(0,r.jsx)(n.code,{children:"lazyCompilation"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-lazycompilation",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Webpack 5.17.0 之后引入实验特性 ",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/experiments/#experimentslazycompilation",target:"_blank",rel:"noopener noreferrer",children:"lazyCompilation"}),"，用于实现 ",(0,r.jsx)(n.code,{children:"entry"})," 或异步引用模块的",(0,r.jsx)(n.strong,{children:"按需编译"}),"，这是一个非常实用的新特性！"]}),"\n",(0,r.jsxs)(n.p,{children:["试想一个场景，你的项目中有一个入口（",(0,r.jsx)(n.code,{children:"entry"}),"）文件及若干按路由划分的异步模块，Webpack 启动后会立即将这些入口与异步模块全部一次性构建好 —— 即使页面启动后实际上只是访问了其中一两个异步模块， 这些花在异步模块构建的时间着实是一种浪费！",(0,r.jsx)(n.code,{children:"lazyCompilation"})," 的出现正是为了解决这一问题。用法很简单："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// webpack.config.js\nmodule.exports = {\n  // ...\n  experiments: {\n    lazyCompilation: true,\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["启动 ",(0,r.jsx)(n.code,{children:"lazyCompilation"})," 后，代码中通过异步引用语句如 ",(0,r.jsx)(n.code,{children:"import('./xxx')"})," 导入的模块（以及未被访问到的 ",(0,r.jsx)(n.code,{children:"entry"}),"）都不会被立即编译，而是直到页面正式请求该模块资源（例如切换到该路由）时才开始构建，效果与 Vite 相似，能够极大提升冷启速度。"]}),"\n",(0,r.jsxs)(n.p,{children:["此外，",(0,r.jsx)(n.code,{children:"lazyCompilation"})," 支持如下参数："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"backend"}),"： 设置后端服务信息，一般保持默认值即可；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"entries"}),"：设置是否对 ",(0,r.jsx)(n.code,{children:"entry"})," 启动按需编译特性；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"imports"}),"：设置是否对异步模块启动按需编译特性；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test"}),"：支持正则表达式，用于声明对那些异步模块启动按需编译特性。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["不过，",(0,r.jsx)(n.code,{children:"lazyCompilation"})," 还处于实验阶段，无法保证稳定性，接口形态也可能发生变更，建议只在开发环境使用。"]}),"\n",(0,r.jsxs)(n.h2,{id:"约束-loader-执行范围",children:["约束 Loader 执行范围",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#约束-loader-执行范围",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Loader 组件用于将各式文件资源转换为可被 Webpack 理解、构建的标准 JavaScript 代码，正是这一特性支撑起 Webpack 强大的资源处理能力。不过，Loader 在执行内容转换的过程中可能需要比较密集的 CPU 运算，如 ",(0,r.jsx)(n.code,{children:"babel-loader"}),"、",(0,r.jsx)(n.code,{children:"eslint-loader"}),"、",(0,r.jsx)(n.code,{children:"vue-loader"})," 等，需要反复执行代码到 AST，AST 到代码的转换。"]}),"\n",(0,r.jsxs)(n.p,{children:["因此开发者可以根据实际场景，使用 ",(0,r.jsx)(n.code,{children:"module.rules.include"}),"、",(0,r.jsx)(n.code,{children:"module.rules.exclude"})," 等配置项，限定 Loader 的执行范围 —— 通常可以排除 ",(0,r.jsx)(n.code,{children:"node_module"})," 文件夹，如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// webpack.config.js\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: ["babel-loader", "eslint-loader"],\n      },\n    ],\n  },\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["配置 ",(0,r.jsx)(n.code,{children:"exclude: /node_modules/"})," 属性后，Webpack 在处理 ",(0,r.jsx)(n.code,{children:"node_modules"})," 中的 js 文件时会直接跳过这个 ",(0,r.jsx)(n.code,{children:"rule"})," 项，不会为这些文件执行 Loader 逻辑。"]}),"\n",(0,r.jsxs)(n.p,{children:["此外，",(0,r.jsx)(n.code,{children:"exclude"})," 与 ",(0,r.jsx)(n.code,{children:"include"})," 还支持类似 MongoDB 参数风格的值，也就是通过 ",(0,r.jsx)(n.code,{children:"and/not/or"})," 属性配置组合过滤逻辑，如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const path = require("path");\nmodule.exports = {\n  // ...\n  module: {\n    rules: [{\n      test: /\\.js$/,\n      exclude: {\n        and: [/node_modules/],\n        not: [/node_modules\\/lodash/]\n      },\n      use: ["babel-loader", "eslint-loader"]\n    }],\n  }\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：详情可查阅 ",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/module/#condition",target:"_blank",rel:"noopener noreferrer",children:"官网"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["上述配置的逻辑是：过滤 ",(0,r.jsx)(n.code,{children:"node_modules"})," 文件夹中除 ",(0,r.jsx)(n.code,{children:"lodash"})," 外的所有文件。使用这种能力，我们可以适当将部分需要转译处理的 NPM 包（例如代码中包含 ES6 语法）纳入 Loader 处理范围中。"]}),"\n",(0,r.jsxs)(n.h2,{id:"使用-noparse-跳过文件编译",children:["使用 ",(0,r.jsx)(n.code,{children:"noParse"})," 跳过文件编译",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-noparse-跳过文件编译",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"有不少 NPM 库已经提前做好打包处理（文件合并、Polyfill、ESM 转 CJS 等），不需要二次编译就可以直接放在浏览器上运行，例如："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Vue2 的 ",(0,r.jsx)(n.code,{children:"node_modules/vue/dist/vue.runtime.esm.js"})," 文件；"]}),"\n",(0,r.jsxs)(n.li,{children:["React 的 ",(0,r.jsx)(n.code,{children:"node_modules/react/umd/react.production.min.js"})," 文件；"]}),"\n",(0,r.jsxs)(n.li,{children:["Lodash 的 ",(0,r.jsx)(n.code,{children:"node_modules/lodash/lodash.js"})," 文件。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["对我们来说，这些资源文件都是独立、内聚的代码片段，没必要重复做代码解析、依赖分析、转译等操作，此时可以使用 ",(0,r.jsx)(n.code,{children:"module.noParse"})," 配置项跳过这些资源，例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// webpack.config.js\nmodule.exports = {\n  //...\n  module: {\n    noParse: /lodash|react/,\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：\n",(0,r.jsx)(n.code,{children:"noParse"})," 支持正则、函数、字符串、字符串数组等参数形式，具体可查阅",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/module/#modulenoparse",target:"_blank",rel:"noopener noreferrer",children:"官网"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["配置后，所有匹配该正则的文件都会跳过前置的构建、分析动作，直接将内容合并进 Chunk，从而提升构建速度。不过，使用 ",(0,r.jsx)(n.code,{children:"noParse"})," 时需要注意："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["由于跳过了前置的 AST 分析动作，构建过程无法发现文件中可能存在的语法错误，需要到运行（或 Terser 做压缩）时才能发现问题，所以必须确保 ",(0,r.jsx)(n.code,{children:"noParse"})," 的文件内容正确性；"]}),"\n",(0,r.jsxs)(n.li,{children:["由于跳过了依赖分析的过程，所以文件中，建议不要包含 ",(0,r.jsx)(n.code,{children:"import/export/require/define"})," 等模块导入导出语句 —— 换句话说，",(0,r.jsx)(n.code,{children:"noParse"})," 文件不能存在对其它文件的依赖，除非运行环境支持这种模块化方案；"]}),"\n",(0,r.jsx)(n.li,{children:"由于跳过了内容分析过程，Webpack 无法标记该文件的导出值，也就无法实现 Tree-shaking。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["综上，建议在使用 ",(0,r.jsx)(n.code,{children:"noParse"})," 配置 NPM 库前，先检查 NPM 库默认导出的资源满足要求，例如 React@18 默认定义的导出文件是 ",(0,r.jsx)(n.code,{children:"index.js"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// react package.json\n{\n  "name": "react",\n  // ...\n  "main": "index.js"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["但 ",(0,r.jsx)(n.code,{children:"node_module/react/index.js"})," 文件包含了模块导入语句 ",(0,r.jsx)(n.code,{children:"require"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// node_module/react/index.js\n'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时，真正有效的代码被包含在 ",(0,r.jsx)(n.code,{children:"react.development.js"}),"（或 ",(0,r.jsx)(n.code,{children:"react.production.min.js"}),"）中，但 Webpack 只会打包这段 ",(0,r.jsx)(n.code,{children:"index.js"})," 内容，也就造成了产物中实际上并没有真正包含 React。针对这个问题，我们可以先找到适用的代码文件，然后用 ",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/resolve/#resolvealias",target:"_blank",rel:"noopener noreferrer",children:"resolve.alias"})," 配置项重定向到该文件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// webpack.config.js\nmodule.exports = {\n  // ...\n  module: {\n    noParse: /react|lodash/,\n  },\n  resolve: {\n    alias: {\n      react: path.join(\n        __dirname,\n        process.env.NODE_ENV === "production"\n          ? "./node_modules/react/cjs/react.production.min.js"\n          : "./node_modules/react/cjs/react.development.js"\n      ),\n    },\n  },\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["提示：使用 ",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer",children:"externals"})," 也能将部分依赖放到构建体系之外，实现与 ",(0,r.jsx)(n.code,{children:"noParse"})," 类似的效果，详情可查阅",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer",children:"官网"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"开发模式禁用产物优化",children:["开发模式禁用产物优化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开发模式禁用产物优化",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Webpack 提供了许多产物优化功能，例如：Tree-Shaking、SplitChunks、Minimizer 等，这些能力能够有效减少最终产物的尺寸，提升生产环境下的运行性能，但这些优化在开发环境中意义不大，反而会增加构建器的负担(都是性能大户)。"}),"\n",(0,r.jsx)(n.p,{children:"因此，开发模式下建议关闭这一类优化功能，具体措施："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["确保 ",(0,r.jsx)(n.code,{children:"mode='development'"})," 或 ",(0,r.jsx)(n.code,{children:"mode = 'none'"}),"，关闭默认优化策略；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimization.minimize"})," 保持默认值或 ",(0,r.jsx)(n.code,{children:"false"}),"，关闭代码压缩；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimization.concatenateModules"})," 保持默认值或 ",(0,r.jsx)(n.code,{children:"false"}),"，关闭模块合并；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimization.splitChunks"})," 保持默认值或 ",(0,r.jsx)(n.code,{children:"false"}),"，关闭代码分包；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optimization.usedExports"})," 保持默认值或 ",(0,r.jsx)(n.code,{children:"false"}),"，关闭 Tree-shaking 功能；"]}),"\n",(0,r.jsx)(n.li,{children:"……"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"最终，建议开发环境配置如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  // ...\n  mode: "development",\n  optimization: {\n    removeAvailableModules: false,\n    removeEmptyChunks: false,\n    splitChunks: false,\n    minimize: false,\n    concatenateModules: false,\n    usedExports: false,\n  },\n};\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"最小化-watch-监控范围",children:["最小化 ",(0,r.jsx)(n.code,{children:"watch"})," 监控范围",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最小化-watch-监控范围",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"watch"})," 模式下（通过 ",(0,r.jsx)(n.code,{children:"npx webpack --watch"})," 命令启动），Webpack 会持续监听项目目录中所有代码文件，发生变化时执行 ",(0,r.jsx)(n.code,{children:"rebuild"})," 命令。"]}),"\n",(0,r.jsxs)(n.p,{children:["不过，通常情况下前端项目中部分资源并不会频繁更新，例如 ",(0,r.jsx)(n.code,{children:"node_modules"})," ，此时可以设置 ",(0,r.jsx)(n.code,{children:"watchOptions.ignored"})," 属性忽略这些文件，例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// webpack.config.js\nmodule.exports = {\n  //...\n  watchOptions: {\n    ignored: /node_modules/\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"跳过-ts-类型检查",children:["跳过 TS 类型检查",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#跳过-ts-类型检查",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"JavaScript 本身是一门弱类型语言，这在多人协作项目中经常会引起一些不必要的类型错误，影响开发效率。随前端能力与职能范围的不断扩展，前端项目的复杂性与协作难度也在不断上升，TypeScript 所提供的静态类型检查能力也就被越来越多人所采纳。"}),"\n",(0,r.jsxs)(n.p,{children:["不过，类型检查涉及 AST 解析、遍历以及其它非常消耗 CPU 的操作，会给工程化流程带来比较大的性能负担，因此我们可以选择关闭 ",(0,r.jsx)(n.code,{children:"ts-loader"})," 的类型检查功能："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  // ...\n  module: {\n    rules: [{\n      test: /\\.ts$/,\n      use: [\n        {\n          loader: 'ts-loader',\n          options: {\n            // 设置为“仅编译”，关闭类型检查\n            transpileOnly: true\n          }\n        }\n      ],\n    }],\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"有同学可能会问：“没有类型检查，那还用 TypeScript 干嘛？”，很简单，我们可以："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"可以借助编辑器的 TypeScript 插件实现代码检查；"}),"\n",(0,r.jsxs)(n.li,{children:["使用 ",(0,r.jsx)(n.code,{children:"fork-ts-checker-webpack-plugin"})," 插件将类型检查能力剥离到 ",(0,r.jsx)(n.strong,{children:"子进程"})," 执行，例如："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [{\n      test: /\\.ts$/,\n      use: [\n        {\n          loader: 'ts-loader',\n          options: {\n            transpileOnly: true\n          }\n        }\n      ],\n    }, ],\n  },\n  plugins:[\n    // fork 出子进程，专门用于执行类型检查\n    new ForkTsCheckerWebpackPlugin()\n  ]\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"这样，既可以获得 Typescript 静态类型检查能力，又能提升整体编译速度。"}),"\n",(0,r.jsxs)(n.h2,{id:"优化-eslint-性能",children:["优化 ESLint 性能",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#优化-eslint-性能",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["ESLint 能帮助我们极低成本发现代码风格问题，维护代码质量，但若使用不当 —— 例如在开发模式下使用 ",(0,r.jsx)(n.code,{children:"eslint-loader"})," 实现实时代码检查，会带来比较高昂且不必要的性能成本，我们可以选择其它更聪明的方式接入 ESLint。"]}),"\n",(0,r.jsxs)(n.p,{children:["例如，使用新版本组件 ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/eslint-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"eslint-webpack-plugin"})," 替代旧版 ",(0,r.jsx)(n.code,{children:"eslint-loader"}),"，两者差异在于，",(0,r.jsx)(n.code,{children:"eslint-webpack-plugin"})," 在模块构建完毕（",(0,r.jsx)(n.code,{children:"compilation.hooks.succeedModule"})," 钩子）后执行检查，不会阻断文件加载流程，性能更优，用法："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"安装依赖："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"yarn add -D eslint-webpack-plugin\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"添加插件："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const ESLintPlugin = require('eslint-webpack-plugin');\nmodule.exports = {\n  // ...\n  plugins: [new ESLintPlugin(options)],\n  // ...\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"或者，可以选择在特定条件、场景下执行 ESLint，减少对构建流程的影响，如："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["使用编辑器插件完成 ESLint 检查、错误提示、自动 Fix，如 VS Code 的 ",(0,r.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint",target:"_blank",rel:"noopener noreferrer",children:"dbaeumer.vscode-eslint"})," 插件；"]}),"\n",(0,r.jsxs)(n.li,{children:["使用 ",(0,r.jsx)(n.code,{children:"husky"}),"，仅在代码提交前执行 ESLint 代码检查；"]}),"\n",(0,r.jsxs)(n.li,{children:["仅在 ",(0,r.jsx)(n.code,{children:"production"})," 构建中使用 ESLint，能够有效提高开发阶段的构建效率。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"慎用-source-map",children:["慎用 ",(0,r.jsx)(n.code,{children:"source-map"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#慎用-source-map",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"source-map"})," 是一种将经过编译、压缩、混淆的代码映射回源码的技术，它能够帮助开发者迅速定位到更有意义、更结构化的源码中，方便调试。不过，",(0,r.jsx)(n.code,{children:"source-map"})," 操作本身也有很大构建性能开销，建议读者根据实际场景慎重选择最合适的 ",(0,r.jsx)(n.code,{children:"source-map"})," 方案。"]}),"\n",(0,r.jsxs)(n.p,{children:["针对 ",(0,r.jsx)(n.code,{children:"source-map"})," 功能，Webpack 提供了 ",(0,r.jsx)(n.code,{children:"devtool"})," 选项，可以配置 ",(0,r.jsx)(n.code,{children:"eval"}),"、",(0,r.jsx)(n.code,{children:"source-map"}),"、",(0,r.jsx)(n.code,{children:"cheap-source-map"})," 等值，不考虑其它因素的情况下，最佳实践："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["开发环境使用 ",(0,r.jsx)(n.code,{children:"eval"})," ，确保最佳编译速度；"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["生产环境使用 ",(0,r.jsx)(n.code,{children:"source-map"}),"，获取最高质量。"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["参考：",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/devtool/",target:"_blank",rel:"noopener noreferrer",children:"https://webpack.js.org/configuration/devtool/"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"设置-resolve-缩小搜索范围",children:["设置 ",(0,r.jsx)(n.code,{children:"resolve"})," 缩小搜索范围",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#设置-resolve-缩小搜索范围",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Webpack 默认提供了一套同时兼容 CMD、AMD、ESM 等模块化方案的资源搜索规则 —— ",(0,r.jsx)(n.code,{children:"enhanced-resolve"}),"，它能将各种模块导入语句准确定位到模块对应的物理资源路径。例如："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"import 'lodash'"})," 这一类引入 NPM 包的语句会被 ",(0,r.jsx)(n.code,{children:"enhanced-resolve"})," 定位到对应包体文件路径 ",(0,r.jsx)(n.code,{children:"node_modules/lodash/index.js"})," ；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"import './a'"})," 这类不带文件后缀名的语句，则可能被定位到 ",(0,r.jsx)(n.code,{children:"./a.js"})," 文件；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"import '@/a'"})," 这类化名路径的引用，则可能被定位到 ",(0,r.jsx)(n.code,{children:"$PROJECT_ROOT/src/a.js"})," 文件。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["需要注意，这类增强资源搜索体验的特性背后涉及许多 IO 操作，本身可能引起较大的性能消耗，开发者可根据实际情况调整 ",(0,r.jsx)(n.code,{children:"resolve"})," 配置，缩小资源搜索范围，包括："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["1. ",(0,r.jsx)(n.code,{children:"resolve.extensions"})," 配置："]})}),"\n",(0,r.jsxs)(n.p,{children:["例如，当模块导入语句未携带文件后缀时，如 ",(0,r.jsx)(n.code,{children:"import './a'"})," ，Webpack 会遍历 ",(0,r.jsx)(n.code,{children:"resolve.extensions"})," 项定义的后缀名列表，尝试在 ",(0,r.jsx)(n.code,{children:"'./a'"})," 路径追加后缀名，搜索对应物理文件。"]}),"\n",(0,r.jsxs)(n.p,{children:["在 Webpack5 中，",(0,r.jsx)(n.code,{children:"resolve.extensions"})," 默认值为 ",(0,r.jsx)(n.code,{children:"['.js', '.json', '.wasm']"})," ，这意味着 Webpack 在针对不带后缀名的引入语句时，可能需要执行三次判断逻辑才能完成文件搜索，针对这种情况，可行的优化措施包括："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["修改 ",(0,r.jsx)(n.code,{children:"resolve.extensions"})," 配置项，减少匹配次数；"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"代码中尽量补齐文件后缀名；"}),"\n",(0,r.jsxs)(n.li,{children:["设置 ",(0,r.jsx)(n.code,{children:"resolve.enforceExtension = true"})," ，强制要求开发者提供明确的模块后缀名，不过这种做法侵入性太强，不太推荐。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["2. ",(0,r.jsx)(n.code,{children:"resolve.modules"})," 配置："]})}),"\n",(0,r.jsxs)(n.p,{children:["类似于 Node 模块搜索逻辑，当 Webpack 遇到 ",(0,r.jsx)(n.code,{children:"import 'lodash'"})," 这样的 npm 包导入语句时，会先尝试在当前项目 ",(0,r.jsx)(n.code,{children:"node_modules"})," 目录搜索资源，如果找不到，则按目录层级尝试逐级向上查找 ",(0,r.jsx)(n.code,{children:"node_modules"})," 目录，如果依然找不到，则最终尝试在全局 ",(0,r.jsx)(n.code,{children:"node_modules"})," 中搜索。"]}),"\n",(0,r.jsxs)(n.p,{children:["在一个依赖管理良好的系统中，我们通常会尽量将 NPM 包安装在有限层级内，因此 Webpack 这一逐层查找的逻辑大多数情况下实用性并不高，开发者可以通过修改 ",(0,r.jsx)(n.code,{children:"resolve.modules"})," 配置项，主动关闭逐层搜索功能，例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n  //...\n  resolve: {\n    modules: [path.resolve(__dirname, 'node_modules')],\n  },\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["3. ",(0,r.jsx)(n.code,{children:"resolve.mainFiles"})," 配置："]})}),"\n",(0,r.jsxs)(n.p,{children:["与 ",(0,r.jsx)(n.code,{children:"resolve.extensions"})," 类似，",(0,r.jsx)(n.code,{children:"resolve.mainFiles"})," 配置项用于定义文件夹默认文件名，例如对于 ",(0,r.jsx)(n.code,{children:"import './dir'"})," 请求，假设 ",(0,r.jsx)(n.code,{children:"resolve.mainFiles = ['index', 'home']"})," ，Webpack 会按依次测试 ",(0,r.jsx)(n.code,{children:"./dir/index"})," 与 ",(0,r.jsx)(n.code,{children:"./dir/home"})," 文件是否存在。"]}),"\n",(0,r.jsxs)(n.p,{children:["因此，实际项目中应控制 ",(0,r.jsx)(n.code,{children:"resolve.mainFiles"})," 数组数量，减少匹配次数。"]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Webpack 在应对大型项目场景时通常会面临比较大的性能挑战，也因此非常值得我们投入精力去学习如何分析、优化构建性能，除了缓存、多进程构建这一类大杀器之外，还可以通过控制构建范围、能力等方式尽可能减少各个环节的耗时，包括文中介绍的："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"使用最新 Webpack、Node 版本；"}),"\n",(0,r.jsx)(n.li,{children:"约束 Loader 执行范围；"}),"\n",(0,r.jsxs)(n.li,{children:["使用 ",(0,r.jsx)(n.code,{children:"noParse"})," 跳过文件编译等。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"如果下次再遇到性能问题，建议可以先试着分析哪些环节占用时长更多，然后有针对性的实施各项优化。"}),"\n",(0,r.jsxs)(n.h2,{id:"思考题",children:["思考题",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"除了上述各项优化外，还存在哪些有效措施？可以往 Webpack 的构建流程、组件等方向思考。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let i=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["Webpack5%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F15.%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC%E5%BE%97%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%9E%84%E5%BB%BA%E6%80%A7%E8%83%BD%E6%9E%81%E8%87%B4%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7%EF%BC%9F.md"]={toc:[{text:"使用最新版本",id:"使用最新版本",depth:2},{text:"使用 `lazyCompilation`",id:"使用-lazycompilation",depth:2},{text:"约束 Loader 执行范围",id:"约束-loader-执行范围",depth:2},{text:"使用 `noParse` 跳过文件编译",id:"使用-noparse-跳过文件编译",depth:2},{text:"开发模式禁用产物优化",id:"开发模式禁用产物优化",depth:2},{text:"最小化 `watch` 监控范围",id:"最小化-watch-监控范围",depth:2},{text:"跳过 TS 类型检查",id:"跳过-ts-类型检查",depth:2},{text:"优化 ESLint 性能",id:"优化-eslint-性能",depth:2},{text:"慎用 `source-map`",id:"慎用-source-map",depth:2},{text:"设置 `resolve` 缩小搜索范围",id:"设置-resolve-缩小搜索范围",depth:2},{text:"总结",id:"总结",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"15.有哪些值得学习的构建性能极致优化技巧？",headingTitle:"15.有哪些值得学习的构建性能极致优化技巧？",frontmatter:{}}}}]);