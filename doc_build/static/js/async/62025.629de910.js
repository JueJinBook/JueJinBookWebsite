"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["62025"],{209571:function(e,n,i){i.r(n),i.d(n,{default:()=>w});var r=i(552676),c=i(740453);let h=i.p+"static/image/6682e7befe1ee77349d35a7b8c4c6008.13d4bb4d.webp",s=i.p+"static/image/a1bd0edf957d5c17b79a11c80039d9d0.81af3bf1.webp",l=i.p+"static/image/ec40f29c8f07d4a327c0ca79a450a0fe.c81aba93.webp",d=i.p+"static/image/c4ecc6f747a4515a65c3370ad0d81c51.dd87faf0.webp",t=i.p+"static/image/77591afd575c28bd0a03736cb6935f0b.dd87faf0.webp",o=i.p+"static/image/a9329d66b4aa07fa6439d4e53b85e209.7862b318.webp",a=i.p+"static/image/bfa93ac1ba321d16d8c40c0c8a138391.d000e70b.webp",g=i.p+"static/image/51feb61e51c22da40e933c51ca94c03f.a52e5258.webp",x=i.p+"static/image/eb99c231c7e18a14aeb44e5e5d4f52a0.ecea35c6.webp",j=i.p+"static/image/26feb759c6588de5c6e67cd68ea0c0de.e9564d79.webp",p=i.p+"static/image/d88d3a0b30249e2e04b71fcdc89d3014.3739a48c.webp",S=i.p+"static/image/f033bb2ee622e8fbce02d9a8a4881682.16f2a1e1.webp",m=i.p+"static/image/e386021c6e54075656ccff8b74a14434.1d202bca.webp",u=i.p+"static/image/caa185f6e9361461e33ad8a27cf9c880.7f63e26b.webp";function b(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",code:"code",h2:"h2",pre:"pre",ul:"ul",li:"li",strong:"strong",blockquote:"blockquote",h3:"h3"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"第07章csscustomhighlightapiweb文本范围高亮的未来",children:["第07章—CSSCustomHighlightAPI：Web文本范围高亮的未来",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第07章csscustomhighlightapiweb文本范围高亮的未来",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"\uFEFF在 Web 中设置文本范围的样式是一件非常有用的事情。比如给选中的文本高亮、给拼写和语法错误文本下方显示漂亮的小波浪线等。另一个非常常见的高亮文本的用例是搜索和高亮功能，它提供了一个文本输入框，让用户在输入文本后搜索匹配的结果并将它们高亮显示。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["现在请尝试在你的 Web 浏览器中按下 ",(0,r.jsx)(n.code,{children:"Ctrl/⌘+F"})," 键，然后键入本文中的一些文本。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["浏览器本身通常会自动处理这些样式情况。可编辑区域（比如 ",(0,r.jsx)(n.code,{children:"<textarea>"}),"）会自动获取拼写波浪线，而查找命令会自动高亮找到的文本。"]}),"\n",(0,r.jsx)(n.p,{children:"但是如果我们想要自己实现这种样式，在 Web 中处理起来并不容易，可能要花费较多的时间。这不是一个简单的问题。我们不能仅仅在给高亮或有语法错误的文本上，用一个带有类名的元素包裹起来。事实上，这需要能够正确地突出显示跨越任意复杂 DOM 树中的多个文本范围，可能跨越 DOM 元素的边界。"}),"\n",(0,r.jsx)(n.p,{children:"以往主要通过“样式文本范围伪元素”或“创建自己的文本高亮系统”来解决该问题。值得庆幸的是，我们现在可以使用 CSS Custom Highlight API 来解决该问题，因为它代表了 Web 上设置文本范围高亮样式的未来。"}),"\n",(0,r.jsxs)(n.h2,{id:"用户代理定义的可样式化文本范围的伪元素",children:["用户代理定义的可样式化文本范围的伪元素",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户代理定义的可样式化文本范围的伪元素",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["可能最为人所知的可样式化文本范围，是使用 ",(0,r.jsx)(n.code,{children:"::selection"})," 伪元素为用户选择的文本设置高亮的样式。例如："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"::selection {\n    background-color: #09f;\n    color: #fff;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["遗憾的是，在 ",(0,r.jsx)(n.code,{children:"::selection"})," 中只能使用部分 CSS 属性："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["文本颜色 ",(0,r.jsx)(n.code,{children:"color"})]}),"\n",(0,r.jsxs)(n.li,{children:["背景颜色 ",(0,r.jsx)(n.code,{children:"background-color"})]}),"\n",(0,r.jsxs)(n.li,{children:["文本修饰 ",(0,r.jsx)(n.code,{children:"text-decoration"})]}),"\n",(0,r.jsxs)(n.li,{children:["文本阴影 ",(0,r.jsx)(n.code,{children:"text-shadow"})]}),"\n",(0,r.jsxs)(n.li,{children:["文本描边 ",(0,r.jsx)(n.code,{children:"-webkit-text-stroke"})]}),"\n",(0,r.jsxs)(n.li,{children:["文本填充 ",(0,r.jsx)(n.code,{children:"-webkit-text-fill-color"})]}),"\n",(0,r.jsxs)(n.li,{children:["光标 ",(0,r.jsx)(n.code,{children:"cursor"})]}),"\n",(0,r.jsxs)(n.li,{children:["强调标记的颜色 ",(0,r.jsx)(n.code,{children:"text-emphasis-color"})]}),"\n",(0,r.jsxs)(n.li,{children:["轮廓 ",(0,r.jsx)(n.code,{children:"outline"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，这里涉及 Web 中的另一个知识点，即 ",(0,r.jsx)(n.strong,{children:"Web 中的选区和光标"}),"。例如，当你使用指针设备（比如鼠标）在 Web 中选择文本时，就会自动创建一个 ",(0,r.jsx)(n.code,{children:"Selection"})," 对象。你可以尝试在本页面上选择文本，然后在浏览器开发者工具的控制台中运行 ",(0,r.jsx)(n.code,{children:"document.getSelection()"}),"。你应该会看到有关所选文本的位置信息。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"img"})}),"\n",(0,r.jsx)(n.p,{children:"在 JavaScript 中，与 Web 选区和光标相关的 JavaScript API 还有很多，例如："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"window.getSelection()"}),": 返回当前页面中的选区"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"document.getSelection()"}),": 返回当前页面中的选区。与 ",(0,r.jsx)(n.code,{children:"window.getSelection()"})," 相同，只是可以直接在文档上调用，而不需要访问 ",(0,r.jsx)(n.code,{children:"window"})," 对象"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Selection"})," 对象: 表示页面中的选区。可用于读取选区范围、设置选区、删除选区等操作"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Range"})," 对象: 表示文档中的一个区域，通常是一个选区的一部分。可用于获取、设置和操作文档中的文本、节点和元素"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"window.getSelection().getRangeAt(index)"}),": 获取选区中指定索引位置的 ",(0,r.jsx)(n.code,{children:"Range"})," 对象。多数情况下，选区只包含一个 ",(0,r.jsx)(n.code,{children:"Range"})," 对象，因此 ",(0,r.jsx)(n.code,{children:"index"})," 通常为 ",(0,r.jsx)(n.code,{children:"0"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"window.getSelection().removeAllRanges()"}),": 从当前页面中删除所有选区"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"window.getSelection().addRange(range)"}),": 添加一个新的选区，其中 ",(0,r.jsx)(n.code,{children:"range"})," 是一个 ",(0,r.jsx)(n.code,{children:"Range"})," 对象。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Range.setStart(node, offset)"})," 和 ",(0,r.jsx)(n.code,{children:"Range.setEnd(node, offset)"}),": 设置 ",(0,r.jsx)(n.code,{children:"Range"})," 对象的起始和结束位置，其中 ",(0,r.jsx)(n.code,{children:"node"})," 是文档中的一个节点，",(0,r.jsx)(n.code,{children:"offset"})," 是节点内部的偏移量"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Range.insertNode(node)"}),": 在 ",(0,r.jsx)(n.code,{children:"Range"})," 对象的起始位置插入一个新节点"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Range.deleteContents()"}),": 删除 ",(0,r.jsx)(n.code,{children:"Range"})," 对象中的所有内容"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Range.surroundContents(node)"}),": 将 ",(0,r.jsx)(n.code,{children:"Range"})," 对象中的内容包裹在指定的节点 ",(0,r.jsx)(n.code,{children:"node"})," 中"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Range.cloneRange()"}),": 创建 ",(0,r.jsx)(n.code,{children:"Range"})," 对象的副本"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Range.extractContents()"}),": 从文档中提取 ",(0,r.jsx)(n.code,{children:"Range"})," 对象中的所有内容，并返回一个文档片段节点"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Range.compareBoundaryPoints(how, sourceRange)"}),": 比较两个 ",(0,r.jsx)(n.code,{children:"Range"})," 对象的边界点，其中 ",(0,r.jsx)(n.code,{children:"how"})," 参数指定比较的方式，",(0,r.jsx)(n.code,{children:"sourceRange"})," 参数指定要比较的另一个 ",(0,r.jsx)(n.code,{children:"Range"})," 对象"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Range.getBoundingClientRect()"}),": 返回 ",(0,r.jsx)(n.code,{children:"Range"})," 对象所涉及的第一个矩形的 ",(0,r.jsx)(n.code,{children:"DOMRect"})," 对象，该矩形包含 ",(0,r.jsx)(n.code,{children:"Range"})," 的范围"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"document.createRange()"}),": 创建一个新的 ",(0,r.jsx)(n.code,{children:"Range"})," 对象"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"注意，与 Web 选区和光标相关的 JavaScript API 相关的介绍已超出这节课的范畴，在这里不做过多阐述。你要是感兴趣的话，可以在 Web 上搜索相关的关键词，获取更多的教程做进一步的学习。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["在 CSS 中，除了 ",(0,r.jsx)(n.code,{children:"::selection"})," 伪元素之外，还有许多其他伪元素可用于文本范围高亮样式的设置，例如："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"::target-text"})," 选择在支持滚动到文本功能的浏览器中",(0,r.jsx)(n.a,{href:"https://wicg.github.io/scroll-to-text-fragment/",target:"_blank",rel:"noopener noreferrer",children:"滚动到的文本"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"::spelling-error"})," 选择被浏览器标记为包含拼写错误的文本"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"::grammar-error"})," 选择被浏览器标记为包含语法错误的文本"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"/* 高亮显示文本片段 */\n::target-text {\n    background-color: rebeccapurple;\n    color: white;\n    font-weight: bold;\n}\n\n/* 标记语法错误文本片段 */\n::grammar-error {\n    text-decoration: underline red;\n    color: red;\n}\n\n/* 标记拼写错误文本片段 */\n::spelling-error {\n    color: red;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"不幸的是，浏览器对此的支持并不太好，尽管它们各自都很有用，但它们不能用于样式化自定义文本段落，只能用于浏览器预定义的文本段落。"}),"\n",(0,r.jsx)(n.p,{children:"因此，用户文本选择是不错的，因为相对简单，不会改变页面的DOM。"}),"\n",(0,r.jsxs)(n.h2,{id:"css-自定义高亮-api-是什么",children:["CSS 自定义高亮 API 是什么？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-自定义高亮-api-是什么",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/css-highlight-api-1/",target:"_blank",rel:"noopener noreferrer",children:"CSS 自定义高亮 API"})," （Custom Highlight API） 是一个新的 W3C 规范，它使得从 JavaScript 中样式化任意文本范围成为可能！这里采用的方法与之前我们所介绍的用户文本选取技术非常相似。它为开发者提供了一种从 JavaScript 中创建任意范围，并使用 CSS 对其进行样式化的方式。"]}),"\n",(0,r.jsxs)(n.p,{children:["简单地说，",(0,r.jsx)(n.strong,{children:"CSS 自定义高亮 API 提供了一种方法，可以通过使用 JavaScript 创建范围并使用 CSS 定义样式来设置文档中任意文本范围的样式"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["自定义高亮 API 扩展了高亮伪元素的概念，通过提供一种方式，让 Web 开发人员能够为任意 ",(0,r.jsx)(n.code,{children:"Range"})," 对象的文本设置样式，而不仅仅局限于用户代理定义的 ",(0,r.jsx)(n.code,{children:"::selection"}),"、",(0,r.jsx)(n.code,{children:"::inactive-selection"}),"、",(0,r.jsx)(n.code,{children:"::spelling-error"})," 和 ",(0,r.jsx)(n.code,{children:"::grammar-error"}),"。这在各种场景下都很有用，包括希望实现自己的选择的编辑框架、在虚拟文档上执行页面查找、用于代表在线协作的多个选择或拼写检查框架等。"]}),"\n",(0,r.jsxs)(n.p,{children:["自定义高亮 API 提供了一种编程方式添加和删除高亮，这不会影响基础 DOM 结构，而是基于范围对象（",(0,r.jsx)(n.code,{children:"Range"})," 对象），通过 ",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素应用文本样式。"]}),"\n",(0,r.jsxs)(n.p,{children:["下面的代码使用 ",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素将黄色背景和蓝色前景颜色应用于文本 “One two”。它通过将 ",(0,r.jsx)(n.code,{children:"Highlight"})," 添加到 ",(0,r.jsx)(n.code,{children:"HighlightRegistry"})," 来实现这一点（",(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/css-highlight-api-1/#highlights-set-up",target:"_blank",rel:"noopener noreferrer",children:"这两个都是此规范引入的新概念"}),"）。",(0,r.jsx)(n.code,{children:"Highlight"})," 将包含一个 ",(0,r.jsx)(n.code,{children:"Range"}),"，其边界点将围绕文本 “One two”。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<div class="range">\n    <span>One</span>\n    <span>two</span>\n    <span>three…</span>\n</div>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"::highlight(custom-highlight) {\n    background-color: yellow;\n    color: blue;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"let r = new Range();\nlet rangeContainer = document.querySelector('.range');\n\nr.setStart(rangeContainer, 0);\nr.setEnd(rangeContainer, 4);\n\nCSS.highlights.set(\"custom-highlight\", new Highlight(r));\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/wvYpQLP",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvYpQLP"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"自定义高亮伪元素highlight",children:["自定义高亮伪元素：::highlight()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义高亮伪元素highlight",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/css-highlight-api-1/#custom-highlight-pseudo",target:"_blank",rel:"noopener noreferrer",children:"W3C 规范是这样定义高亮伪元素 ::highlight()"})," ："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["大概的意思是，",(0,r.jsx)(n.code,{children:"::highlight(<custom-highlight-name>)"})," 伪元素也被称为",(0,r.jsx)(n.strong,{children:"自定义高亮伪元素"}),"。它代表了文档中被所有使用名称为 ",(0,r.jsx)(n.code,{children:"<custom-highlight-name>"})," 的已注册自定义高亮包含或部分包含（如果有的话）。其中，",(0,r.jsx)(n.code,{children:"<custom-highlight-name>"})," 是指自定义高亮所使用的名称，它必须是有效的 CSS  ",(0,r.jsx)(n.code,{children:"<ident-token>"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["简单地说，",(0,r.jsx)(n.code,{children:"::highlight(<custom-highlight-name>)"})," 是一个 CSS 伪元素，也常称为",(0,r.jsx)(n.strong,{children:"自定义高亮伪元素"}),"，可以用于给自定义文本范围设置高亮样式。其中 ",(0,r.jsx)(n.code,{children:"<custom-highlight-name>"})," 是自定义高亮的名称，它需要是一个有效的 CSS 标识符（",(0,r.jsx)(n.code,{children:"<ident-token>"}),"）。这个伪元素的作用是表示文档中被所有注册了该名称的自定义高亮所包含或部分包含的文本内容。这样，就可以通过 JavaScript 注册一个自定义高亮，然后在 CSS 中使用 ",(0,r.jsx)(n.code,{children:"::highlight(<custom-highlight-name>)"})," 来对这个自定义高亮的范围进行样式设置，从而实现自定义高亮的显示效果。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"::highlight(custom-highlight-name) {\n    background-color: #09f;\n    color: #fff;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["需要注意的是，仅仅使用 ",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素是没用的，它还必须有一个有效的",(0,r.jsx)(n.strong,{children:"参数"}),"（比如上面示例中的 ",(0,r.jsx)(n.code,{children:"custom-highlight-name"}),"）。这个参数不是随意而来的，需要使用相关的 JavaScript API 注册。"]}),"\n",(0,r.jsxs)(n.p,{children:["也就是说，为了让自定义高亮生效（",(0,r.jsx)(n.code,{children:"custom-highlight-name"})," 名称有效），需要将其注册到“高亮注册表”（",(0,r.jsx)(n.code,{children:"HighlightRegistry"}),"）中。注册表是一个类似于映射的数据结构，可以使用常规的映射方法添加、移除、更新自定义高亮。一旦自定义高亮被注册，它就可以通过 ",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素来选中对应的文本，并对它们应用相应的 CSS 样式。"]}),"\n",(0,r.jsxs)(n.p,{children:["另外，",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素和 ",(0,r.jsx)(n.code,{children:"::selection"})," 伪元素相似，只有部分 CSS 属性可用："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["文本颜色 ",(0,r.jsx)(n.code,{children:"color"})]}),"\n",(0,r.jsxs)(n.li,{children:["背景颜色 ",(0,r.jsx)(n.code,{children:"background-color"})]}),"\n",(0,r.jsxs)(n.li,{children:["文本修饰 ",(0,r.jsx)(n.code,{children:"text-decoration"})]}),"\n",(0,r.jsxs)(n.li,{children:["文本阴影 ",(0,r.jsx)(n.code,{children:"text-shadow"})]}),"\n",(0,r.jsxs)(n.li,{children:["文本描边 ",(0,r.jsx)(n.code,{children:"-webkit-text-stroke"})]}),"\n",(0,r.jsxs)(n.li,{children:["文本填充 ",(0,r.jsx)(n.code,{children:"-webkit-text-fill-color"})]}),"\n",(0,r.jsxs)(n.li,{children:["光标 ",(0,r.jsx)(n.code,{children:"cursor"})]}),"\n",(0,r.jsxs)(n.li,{children:["强调标记的颜色 ",(0,r.jsx)(n.code,{children:"text-emphasis-color"})]}),"\n",(0,r.jsxs)(n.li,{children:["轮廓 ",(0,r.jsx)(n.code,{children:"outline"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"进入自定义高亮-api",children:["进入自定义高亮 API",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#进入自定义高亮-api",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["正如上面所说，",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素给文本范围设置高亮样式，还是需要借助 JavaScript 脚本的。即需要基于自定义高亮 API 编写一些 JavaScript 脚本，才能注册一个自定义高亮的名称提供给 ",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素使用。"]}),"\n",(0,r.jsx)(n.p,{children:"在使用 CSS 自定义高亮 API 设置 Web上文本范围高亮的样式需要一些必备的步骤，主要有四个步骤："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["第 ① 步：创建 ",(0,r.jsx)(n.code,{children:"Range"})," 对象，即",(0,r.jsx)(n.strong,{children:"创建选区"}),"，这一步很重要"]}),"\n",(0,r.jsxs)(n.li,{children:["第 ② 步：为这些范围创建 ",(0,r.jsx)(n.code,{children:"Highlight"})," 对象，即",(0,r.jsx)(n.strong,{children:"创建高亮"})]}),"\n",(0,r.jsxs)(n.li,{children:["第 ③ 步：使用 ",(0,r.jsx)(n.code,{children:"HighlightRegistry"})," 进行注册，即",(0,r.jsx)(n.strong,{children:"注册高亮"})]}),"\n",(0,r.jsxs)(n.li,{children:["第 ④ 步：使用 ",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素定义高亮样式，即",(0,r.jsx)(n.strong,{children:"样式化高亮文本"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"第--步创建选区",children:["第 ① 步：创建选区",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第--步创建选区",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["创造选区指的是你想设置高亮样式的文本范围，**就像用鼠标滑过选区一样。**你可以使用 JavaScript 中的 ",(0,r.jsx)(n.code,{children:"Range"})," 创建要高亮显示的文本范围。和设置当前选择时一样，需要执行以下步骤："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"const range = new Range();\nrange.setStart(parentNode, startOffset);\nrange.setEnd(parentNode, endOffset);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["需要注意的是，如果作为第一个参数传递的节点是文本节点，则 ",(0,r.jsx)(n.code,{children:"setStart"})," 和 ",(0,r.jsx)(n.code,{children:"setEnd"})," 方法的工作方式会有所不同。对于文本节点，偏移量对应于节点内的字符数。对于其他节点，偏移量对应于父节点中的子节点数量。"]}),"\n",(0,r.jsxs)(n.p,{children:["还需要注意的是，",(0,r.jsx)(n.code,{children:"setStart"})," 和 ",(0,r.jsx)(n.code,{children:"setEnd"})," 并不是描述范围起点和终点的唯一方法。",(0,r.jsx)(n.a,{href:"https://dom.spec.whatwg.org/#ranges",target:"_blank",rel:"noopener noreferrer",children:"查看 Range 类中的其他可用方法"}),"，以了解其他选项。"]}),"\n",(0,r.jsx)(n.p,{children:"这一步是很重要的，相对而言，这也是最复杂的一部分，例如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<div id="foo">\n    <p>我是一段文本....</p>\n    <p>我是一段文本....</p>\n    <p>我是一段文本....</p>\n    <p>我是一段文本....</p>\n    <p>我是一段文本....</p>\n</div>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:'const parentNode = document.getElementById("foo");\n\nconst range1 = new Range();\nrange1.setStart(parentNode, 2);\nrange1.setEnd(parentNode, 3);\n\nconst range2 = new Range();\nrange2.setStart(parentNode, 5);\nrange2.setEnd(parentNode, 10);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这样就要以获得高亮文本范围对象（选区）",(0,r.jsx)(n.code,{children:"range1"})," 和 ",(0,r.jsx)(n.code,{children:"range2"})," 。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:"img"})}),"\n",(0,r.jsxs)(n.h3,{id:"第--步创建高亮",children:["第 ② 步：创建高亮",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第--步创建高亮",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["第二步是为在上一步创建的范围创建 ",(0,r.jsx)(n.code,{children:"Highlight 对象"}),"。 ",(0,r.jsx)(n.code,{children:"Highlight"})," 对象可以接收一个或多个范围。因此，如果要以完全相同的方式突出显示一堆文本片段，则应该创建一个单独的 ",(0,r.jsx)(n.code,{children:"Highlight"})," 对象，并使用所有对应于这些文本片段的范围进行初始化。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"const highlight = new Highlight(range1, range2, ..., rangeN);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["但您也可以根据需要创建尽可能多的 ",(0,r.jsx)(n.code,{children:"Highlight"})," 对象。例如，如果正在构建每个用户都有不同文本颜色的协作文本编辑器，则可以为每个用户创建一个 ",(0,r.jsx)(n.code,{children:"Highlight"})," 对象。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"const highlight1 = new Highlight(user1Range1, user1Range2);\nconst highlight2 = new Highlight(user2Range1, user2Range2, user2Range3);\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后可以根据下一步的操作对每个对象进行不同的样式设置，即每个高亮可以设置不同的样式。"}),"\n",(0,r.jsxs)(n.h3,{id:"第--步注册高亮",children:["第 ③ 步：注册高亮",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第--步注册高亮",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在，单独的 ",(0,r.jsx)(n.code,{children:"Highlight"})," 对象没有任何作用。首先需要使用 ",(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/css-highlight-api-1/#highlight-registry",target:"_blank",rel:"noopener noreferrer",children:"CSS Highlights API"})," 将其注册到所谓的 ",(0,r.jsx)(n.code,{children:"HighlightRegistry"}),"中。该注册表类似于一个地图，您可以通过给它们命名来注册新的高亮显示，以及删除高亮显示（甚至清除整个注册表）。"]}),"\n",(0,r.jsxs)(n.p,{children:["以下是注册单个 ",(0,r.jsx)(n.code,{children:"Highlight"})," 的方法："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"CSS.highlights.set('my-custom-highlight', highlight);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["其中，",(0,r.jsx)(n.code,{children:"my-custom-highlight"})," 是你选择的名称（这个名称可以是任意你喜欢的名称，但只要是一个有效的 CSS ",(0,r.jsx)(n.code,{children:"<ident-token>"})," 即可），",(0,r.jsx)(n.code,{children:"highlight"})," 是在上一步（第 ② 步）创建的 ",(0,r.jsx)(n.code,{children:"Highlight"})," 对象。"]}),"\n",(0,r.jsxs)(n.h3,{id:"第--步样式化高亮文本",children:["第 ④ 步：样式化高亮文本",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第--步样式化高亮文本",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["最后一步是实际上对已注册的亮点进行样式化。这是通过使用新的CSS ",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素完成的，使用你在注册 ",(0,r.jsx)(n.code,{children:"Highlight"})," 对象时选择的名称（在上面的示例中为 ",(0,r.jsx)(n.code,{children:"my-custom-highlight"}),"）。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"::highlight(my-custom-highlight) {\n    background-color: orange;\n    color: black;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"以上就是使用自定义高亮 API 样式化文本范围的全部过程。最终示例代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"const parentNode = document.getElementById(\"foo\");\n\n// 第 ① 步：创建选区\nconst range1 = new Range();\nrange1.setStart(parentNode, 4);\nrange1.setEnd(parentNode, 6);\n\nconst range2 = new Range();\nrange2.setStart(parentNode, 8);\nrange2.setEnd(parentNode, 10);\n\n\n// 第 ② 步：创建高亮\nconst highlight1 = new Highlight(range1);\nconst highlight2 = new Highlight(range2);\n\n// 第 ③ 步：注册高亮\nCSS.highlights.set('my-custom-highlight', highlight1);\nCSS.highlights.set('my-custom-highlight2', highlight2);\n::highlight(my-custom-highlight) {\n    background-color: orange;\n    color: black;\n}\n\n::highlight(my-custom-highlight2) {\n    background-color: #09f;\n    color: #fff;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/KKGZbRL",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/KKGZbRL"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"以上就是全部过程了，稍显复杂，但还是比较好理解的，关键是第一步创建选区的过程最为复杂，下面用一张图总结一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:"img"})}),"\n",(0,r.jsxs)(n.h2,{id:"更新高亮部分",children:["更新高亮部分",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#更新高亮部分",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"有多种方法可以更新页面上的高亮文本。"}),"\n",(0,r.jsxs)(n.p,{children:["例如，你可以使用 ",(0,r.jsx)(n.code,{children:"CSS.highlights.clear()"})," 清除高亮注册表，然后从头重新开始。或者，你还可以更新基础范围，而无需重新创建任何对象。为此，请再次使用 ",(0,r.jsx)(n.code,{children:"range.setStart"})," 和 ",(0,r.jsx)(n.code,{children:"range.setEnd"})," 方法（或任何其他",(0,r.jsx)(n.code,{children:"Range"}),"方法），浏览器将重新绘制高亮部分。"]}),"\n",(0,r.jsxs)(n.p,{children:["但是，",(0,r.jsx)(n.code,{children:"Highlight"})," 对象的工作方式类似于JavaScript 的 ",(0,r.jsx)(n.code,{children:"Set"}),"，这意味着你也可以使用 ",(0,r.jsx)(n.code,{children:"highlight.add(newRange)"})," 向现有 ",(0,r.jsx)(n.code,{children:"Highlight"})," 中添加新的 ",(0,r.jsx)(n.code,{children:"Range"})," 对象或使用 ",(0,r.jsx)(n.code,{children:"highlight.delete(existingRange)"})," 删除范围。"]}),"\n",(0,r.jsxs)(n.p,{children:["第三，你还可以从 ",(0,r.jsx)(n.code,{children:"CSS.highlights"})," 注册表中添加或删除特定的 ",(0,r.jsx)(n.code,{children:"Highlight"})," 对象。由于此 API 的工作方式类似于JavaScript 的 ",(0,r.jsx)(n.code,{children:"Map"}),"，因此可以设置和删除以更新当前注册的 ",(0,r.jsx)(n.code,{children:"Highlights"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"高亮样式化范围文本的示例",children:["高亮样式化范围文本的示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高亮样式化范围文本的示例",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["有关于 CSS 自定义高亮 API 的原理就是这样，我们来看两个这方面的示例。首先来看一个",(0,r.jsx)(n.strong,{children:"高亮显示搜索结果"}),"的示例："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/rNqpmjm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNqpmjm"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这个示例展示了如何使用 CSS 自定义高亮 API 高亮显示搜索结果。"}),"\n",(0,r.jsx)(n.p,{children:"下面的 HTML 代码片段定义了一个搜索框和有几个标题与几段文字的 Web 页面："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<form>\n    <label for="search">搜索：</label>\n    <input type="search" id="search" name="search" placeholder="请输入你需要搜索的关键词" />\n</form>\n<main>\n    <h2>我的第一本小册：现代 Web 布局</h2>\n    <p>随着众多 CSS 新特性出现， Web 布局迎来了质的飞跃，开发者可以快速构建出一个具有创造性的 Web 布局。本小册通过大量图文和示例，带大家了解 Web 布局技术的发展和演变，深入探讨可用于现代 Web 布局的技术细节，比如 Flexbox ，Grid 等。</p>\n    <h2>我的第二本小册：防御式 CSS 精讲</h2>\n    <p>如何使自己构建的 UI 或编写的 CSS 代码更具防御性（健壮性），确保还原的 UI 在不同的条件下都能工作，不打破 Web 布局或 Web UI，是每位专业的 Web 前端开发者必备的技能。这本小册从“防御式”角度出发，分析了布局、UI 效果、媒体对象、交互体验等多种场景下编写 CSS 的注意事项，你可以把它当作 CSS 技巧集合或 CSS 魔法集合！</p>\n    <h2>关于我</h2>\n    <p>常用昵称“大漠”，W3CPlus创始人，曾就职于淘宝。对HTML、CSS和A11Y等领域有一定的认识和丰富的实践经验。CSS和Drupal中国布道者。2014年出版《图解CSS3：核心技术与案例实战》。</p>\n</main>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["使用 JavaScript 监听搜索框上的 ",(0,r.jsx)(n.code,{children:"input"})," 事件，当事件触发，这段代码将在文章的文本中为输入文本查找匹配项。然后它创建匹配的范围，并使用 CSS 自定义高亮 API 创建并注册一个 ",(0,r.jsx)(n.code,{children:"search-result-highlight"})," 高亮对象:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:'const search = document.querySelector("#search");\nconst main = document.querySelector("main");\n\n// 创建 createTreeWalker 迭代器，用于遍历文本节点，保存到一个数组\nconst treeWalker = document.createTreeWalker(main, NodeFilter.SHOW_TEXT);\nconst allTextNodes = [];\nlet currentNode = treeWalker.nextNode();\nwhile (currentNode) {\n    allTextNodes.push(currentNode);\n    currentNode = treeWalker.nextNode();\n}\n\n// 监听inpu事件\nsearch.addEventListener("input", () => {\n    // 清除上个高亮\n    CSS.highlights.clear();\n\n    // 为空判断\n    const str = search.value.trim().toLowerCase();\n    if (!str) {\n        return;\n    }\n\n    // 查找所有文本节点是否包含搜索词\n    const ranges = allTextNodes\n        .map((el) => {\n            return { el, text: el.textContent.toLowerCase() };\n        })\n        .filter(({ text }) => text.includes(str))\n        .map(({ text, el }) => {\n      \n            const indices = [];\n            let startPos = 0;\n            while (startPos < text.length) {\n                const index = text.indexOf(str, startPos);\n                if (index === -1) break;\n                indices.push(index);\n                startPos = index + str.length;\n            }\n    \n            // 根据搜索词的位置创建选区\n            return indices.map((index) => {\n                const range = new Range();\n                range.setStart(el, index);\n                range.setEnd(el, index + str.length);\n                return range;\n            });\n        });\n\n    // 创建高亮对象\n    const highlight = new Highlight(...ranges.flat());\n    \n    // 注册高亮\n    CSS.highlights.set("search-result-highlight", highlight);\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["最后，在 CSS 中使用 ",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素来设置高亮样式。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"::highlight(search-result-highlight) {\n    background-color: yellow;\n    color: black;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这样就实现了一个",(0,r.jsx)(n.strong,{children:"高亮显示搜索结果"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/rNqpmjm",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNqpmjm"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"它和浏览器提供的效果完全相似："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["注意，到目前为止，",(0,r.jsx)(n.strong,{children:"还无法自定义原生搜索高亮的黄色背景，而且不同的浏览器的效果也是有差异的"}),"，比如 Chrome 浏览器的背景是黄色，文本是黑色，而 Firefox 浏览器的搜索高亮的背景是紫色，文本是白色："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:"img"})}),"\n",(0,r.jsxs)(n.p,{children:["再来看一个 CSS 自定义高亮 API 实现七彩文本填充的效果。文本将按红色（",(0,r.jsx)(n.code,{children:"#FF0000"})," ）、橙色（",(0,r.jsx)(n.code,{children:"#FFA500"})," ）、黄色（",(0,r.jsx)(n.code,{children:"#FFFF00"})," ）、绿色（",(0,r.jsx)(n.code,{children:"#008000"})," ）、青色（",(0,r.jsx)(n.code,{children:"#00FFFF"})," ）、蓝色（",(0,r.jsx)(n.code,{children:"#0000FF"})," ）和紫色（",(0,r.jsx)(n.code,{children:"#800080"})," ）七种颜色依次填充，而且不断循环："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-HTML",children:'<p id="rainbow-text">\uD83D\uDE80使用 CSS Custom Highlight API 创建七彩文本！\uD83E\uDD70</p>\n'})}),"\n",(0,r.jsx)(n.p,{children:"使用 JavaScript 创建七个高亮区："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:'const textNode = document.getElementById("rainbow-text").firstChild;\n\nif (CSS.highlights) {\n\n    const highlights = [];\n    for (let i = 0; i < 7; i++) {\n        // 给每个颜色实例化一个Highlight对象\n        const colorHighlight = new Highlight();\n        highlights.push(colorHighlight);\n\n        // 注册高亮\n        CSS.highlights.set(`rainbow-color-${i + 1}`, colorHighlight);\n    }\n\n    // 遍历文本节点\n    for (let i = 0; i < textNode.textContent.length; i++) {\n        // 给每个字符创建一个选区\n        const range = new Range();\n        range.setStart(textNode, i);\n        range.setEnd(textNode, i + 1);\n\n        // 添加到高亮\n        highlights[i % 7].add(range);\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["然后使用 ",(0,r.jsx)(n.code,{children:"::highlight()"})," 为每个高亮区设置样式，分别对应红、橙、黄、绿、青、蓝和紫七色："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CSS",children:"::highlight(rainbow-color-1) {\n    color: #FF0000; /* 红色 */\n}\n::highlight(rainbow-color-2) {\n    color: #FFA500; /* 橙色 */\n}\n::highlight(rainbow-color-3) {\n    color: #FFFF00; /* 黄色 */\n}\n::highlight(rainbow-color-4) {\n    color: #008000; /* 绿色 */\n}\n::highlight(rainbow-color-5) {\n    color: #00FFFF; /* 青色 */\n}\n::highlight(rainbow-color-6) {\n    color: #0000FF; /* 蓝色 */\n}\n::highlight(rainbow-color-7) {\n    color: #800080; /* 紫色 */\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"最终文本效果如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:"img"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Demo 地址：",(0,r.jsx)(n.a,{href:"https://codepen.io/airen/full/NWOXJXg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWOXJXg"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"首先，即使 CSS 自定义高亮 API 一开始可能看起来有点复杂。即："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["需要先使用 ",(0,r.jsx)(n.code,{children:"new Range()"})," 创建选区"]}),"\n",(0,r.jsxs)(n.li,{children:["然后再使用 ",(0,r.jsx)(n.code,{children:"new Highlight()"})," 创建高亮"]}),"\n",(0,r.jsxs)(n.li,{children:["接着使用 ",(0,r.jsx)(n.code,{children:"CSS.highlights.set()"})," 注册高亮"]}),"\n",(0,r.jsxs)(n.li,{children:["最后再使用 CSS 的伪元素 ",(0,r.jsx)(n.code,{children:"::highlight()"})," 来样式化高亮文本"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"但它仍然比新建 DOM 元素并将它们插入到正确位置要简单得多。更重要的是，浏览器引擎可以非常快速地样式化这些文本范围高亮。也就是说，自定义高亮 API 相比传统使用标签的方式有很多优点："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"使用场景更广泛，不用去修改 DOM 结构"}),"\n",(0,r.jsx)(n.li,{children:"性能更好，避免了操作 DOM 带来的额外开销"}),"\n",(0,r.jsx)(n.li,{children:"几乎没有副作用，能有效减少 DOM 变化引起的其他影响，比如光标选区的处理"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["其实归根结底，都是 DOM 变化带来的，而 CSS 自定义高亮 API 恰好能有效避开这个问题。当然也有一些缺陷，只允许在 ",(0,r.jsx)(n.code,{children:"::highlight()"})," 伪元素中使用 CSS 属性子集。其中的主要原因是，该子集仅包含可以由浏览器非常有效地应用，而无需重新创建页面布局的属性。通过在页面中插入新的 DOM 元素来突出显示文本范围需要引擎做更多的工作。"]}),"\n",(0,r.jsx)(n.p,{children:"另外，CSS 自定义高亮 API 还是一个实验性的属性，随着时间往前推移，它的使用或许会有所改变。而且，目前主流浏览器对其兼容性还有所差异，如果你需要使用该特性，就需要权衡一下利弊。"})]})}function f(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}let w=f;f.__RSPRESS_PAGE_META={},f.__RSPRESS_PAGE_META["%E7%8E%B0%E4%BB%A3CSS%2F%E7%AC%AC07%E7%AB%A0%E2%80%94CSSCustomHighlightAPI%EF%BC%9AWeb%E6%96%87%E6%9C%AC%E8%8C%83%E5%9B%B4%E9%AB%98%E4%BA%AE%E7%9A%84%E6%9C%AA%E6%9D%A5.md"]={toc:[{text:"用户代理定义的可样式化文本范围的伪元素",id:"用户代理定义的可样式化文本范围的伪元素",depth:2},{text:"CSS 自定义高亮 API 是什么？",id:"css-自定义高亮-api-是什么",depth:2},{text:"自定义高亮伪元素：::highlight()",id:"自定义高亮伪元素highlight",depth:2},{text:"进入自定义高亮 API",id:"进入自定义高亮-api",depth:2},{text:"第 ① 步：创建选区",id:"第--步创建选区",depth:3},{text:"第 ② 步：创建高亮",id:"第--步创建高亮",depth:3},{text:"第 ③ 步：注册高亮",id:"第--步注册高亮",depth:3},{text:"第 ④ 步：样式化高亮文本",id:"第--步样式化高亮文本",depth:3},{text:"更新高亮部分",id:"更新高亮部分",depth:2},{text:"高亮样式化范围文本的示例",id:"高亮样式化范围文本的示例",depth:2},{text:"小结",id:"小结",depth:2}],title:"第07章—CSSCustomHighlightAPI：Web文本范围高亮的未来",headingTitle:"第07章—CSSCustomHighlightAPI：Web文本范围高亮的未来",frontmatter:{}}}}]);