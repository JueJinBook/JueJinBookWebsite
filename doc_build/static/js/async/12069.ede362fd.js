"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["12069"],{948215:function(n,e,t){t.r(e),t.d(e,{default:()=>l});var o=t(552676),r=t(740453);function i(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",strong:"strong",pre:"pre",img:"img",h3:"h3"},(0,r.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"第-19-节-动态数据应用--使用-vuejs-为数据流添加动态转换过滤器",children:["第 19 节 动态数据应用 \xb7 使用 Vue.js 为数据流添加动态转换过滤器",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第-19-节-动态数据应用--使用-vuejs-为数据流添加动态转换过滤器",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"在上一节中我们学习了如何利用 Vue.js 配合我们之前所学习过的数据处理方法来处理流式数据。在这一节中，我们将继续学习如何利用 Vue.js 来应对结构不确定的数据流。"}),"\n",(0,o.jsxs)(e.h2,{id:"191-基于数据的动态转换过滤器",children:["19.1 基于数据的动态转换过滤器",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#191-基于数据的动态转换过滤器",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["在上一节中我们通过一个既定的 ",(0,o.jsx)(e.code,{children:"typeSet"})," 来模拟一个不断产生数据的流式数据集，而在我们使用 Vue.js 进行构建的数据应用中，也是根据这个 ",(0,o.jsx)(e.code,{children:"typeSet"})," 来",(0,o.jsx)(e.strong,{children:"提前"}),"生成了一个用于过滤数据的过滤器。"]}),"\n",(0,o.jsx)(e.p,{children:"但有的时候前端的数据应用并不知道来自其他数据服务的数据内容究竟有哪些过滤项，那么我们便需要根据数据应用所得到的实际数据来生成过滤器。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"function mockDataSource(typesSet) {\n  const dataset = []\n\n  const timer = setInterval(() => {\n    const randomType = typesSet[Math.round(Math.random() * (typesSet.length - 1))]\n\n    dataset.push({\n      type: randomType,\n      timestamp: Date.now(),\n      value: Math.random().toString(32).substr(2)\n    })\n  }, 1e3)\n\n  return {\n    dataset,\n    stop() {\n      clearInterval(timer)\n    }\n  }\n}\n\nconst dataSource = mockDataSource(Array(10).fill(1).map((_, i) => `type${i + 1}`))\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["这段代码中我们模拟了一个包含多种可过滤数据 ",(0,o.jsx)(e.code,{children:"type"})," 的流式数据集，且该数据集过滤字段内容是“不可预知”的。那么我先把它利用 Vue.js 展示到页面上看一下。"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2019/1/22/16873ea78a8e44ef?w=434&h=326&f=gif&s=138516",alt:""})}),"\n",(0,o.jsxs)(e.p,{children:["DEMO 在线地址：",(0,o.jsx)(e.a,{href:"https://codepen.io/iwillwen/pen/oJKMaK?editors=1010",target:"_blank",rel:"noopener noreferrer",children:(0,o.jsx)(e.a,{href:"https://codepen.io/iwillwen/pen/oJKMaK?editors=1010",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/iwillwen/pen/oJKMaK?editors=1010"})})]}),"\n",(0,o.jsx)(e.p,{children:"很好，现在我们再把上一节中层间实现过的类型过滤器应用到这里来。但不一样的是这一次这个流式数据集中所包含的类型都是不可知的，那么按照我们上一节中所学习到的方法，我们则可以将流式数据集中的类型集通过流失处理的方式也处理成一个数据流，应用到过滤器选项中。"}),"\n",(0,o.jsxs)(e.p,{children:["我们可以通过使用 Lodash 中的 ",(0,o.jsx)(e.code,{children:"groupBy"})," 方法先将流式数据集按照 ",(0,o.jsx)(e.code,{children:"type"})," 字段进行聚合，然后再通过 ",(0,o.jsx)(e.code,{children:"keys"})," 方法得到聚合后的聚合键集，从而得到动态的过滤选项。"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'<div id="app">\n  <label for="type">Type Filter: </label>\n  <select name="type" id="type" v-model="typeFilter">\n    <option value="none">None</option>\n    <option>----------</option>\n    <option v-for="type in typesSet" :value="type" :key="type">{{type}}</option>\n  </select>\n\n  <table>\n    <tr>\n      <th>Type</th>\n      <th>Timestamp</th>\n      <th>Value</th>\n    </tr>\n    <tr v-for="item in filteredDataset" :key="item.timestamp">\n      <td>{{item.type}}</td>\n      <td>{{item.timestamp}}</td>\n      <td>{{item.value}}</td>\n    </tr>\n  </table>\n</div>\n\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"function mockDataSource(typesSet) {\n  const dataset = []\n\n  const timer = setInterval(() => {\n    const randomType = typesSet[Math.round(Math.random() * (typesSet.length - 1))]\n\n    dataset.push({\n      type: randomType,\n      timestamp: Date.now(),\n      value: Math.random().toString(32).substr(2)\n    })\n  }, 1e3)\n\n  return {\n    dataset,\n    stop() {\n      clearInterval(timer)\n    }\n  }\n}\n\nconst dataSource = mockDataSource(Array(10).fill(1).map((_, i) => `type${i + 1}`))\n\nnew Vue({\n  el: '#app',\n  data: {\n    typeFilter: 'none',\n    dataset: dataSource.dataset\n  },\n  computed: {\n    typesSet() {\n      return _.keys(_.groupBy(this.dataset, 'type'))\n    },\n    \n    filteredDataset() {\n      if (this.typeFilter === 'none') {\n        return this.dataset\n      }\n      \n      return this.dataset.filter(item => item.type === this.typeFilter)\n    }\n  }\n})\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["DEMO 在线地址：",(0,o.jsx)(e.a,{href:"https://codepen.io/iwillwen/pen/PXMBvb?editors=1010",target:"_blank",rel:"noopener noreferrer",children:(0,o.jsx)(e.a,{href:"https://codepen.io/iwillwen/pen/PXMBvb?editors=1010",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/iwillwen/pen/PXMBvb?editors=1010"})})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2019/1/22/16873eab27e72097?w=434&h=326&f=gif&s=277568",alt:""})}),"\n",(0,o.jsxs)(e.h2,{id:"192-更复杂的动态转换过滤器",children:["19.2 更复杂的动态转换过滤器",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#192-更复杂的动态转换过滤器",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"笔者在工作中经常会遇到一些非常复杂的动态数据开发需求，其中不乏如 BI（Business Intelligence）之类的项目，具体可以参考如 Superset、Metabase 等等优秀的开源项目。在这些项目中，数据与数据应用之间是相隔离的（特别是通用的开源项目），也就是数据应用除了知道数据源以一个二维表的形式存在以外，对这个数据集的内容和结构完全不清楚。"}),"\n",(0,o.jsx)(e.p,{children:"一般这种情况会出现一个可配置的方案，也就是数据应用本身是一个可配置的通用转换、过滤、展示工具，而数据源和表结构则以配置的方式传递给数据应用。为了表达这种情况的极端性，我们先从模拟一个较为复杂的数据集开始。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"function genTypes(columnName, count = 10) {\n  return Array(count).fill(1).map((_, i) => `${columnName}-type${i + 1}`)\n}\n\nfunction genColumns(count = 10) {\n  return Array(count).fill(1).map((_, i) => {\n    const columnName = `column${i + 1}`\n    const types = genTypes(columnName)\n\n    return {\n      name: columnName, types\n    }\n  })\n}\n\nfunction mockDataSource(columnsCount = 10) {\n  const dataset = []\n\n  const columns = genColumns(columnsCount)\n\n  const timer = setInterval(() => {\n    const timestamp = Date.now()\n    const value = Math.random().toString(32).substr(2)\n    \n    const item = {\n      timestamp, value\n    }\n\n    columns.forEach(({ name, types }) => {\n      const randomType = types[Math.round(Math.random() * (types.length - 1))]\n\n      item[name] = randomType\n    })\n\n    dataset.push(item)\n  }, 1e3)\n\n  return {\n    dataset,\n    stop() {\n      clearInterval(timer)\n    }\n  }\n}\n\nconst dataSource = mockDataSource(4)\n\nsetInterval(() => {\n  console.log(dataSource.dataset[dataSource.dataset.length - 1]) // The last inserted one\n}, 1e3)\n//=> { timestamp: 1547970415609, value: '4ta9d9chh9o', column1: 'column1-type1', column2: 'column2-type7', column3: 'column3-type2', column4: 'column4-type6' }\n//=> { timestamp: 1547970416612, value: 'cobh86f288', column1: 'column1-type7', column2: 'column2-type6', column3: 'column3-type9', column4: 'column4-type1' }\n//=> ...\n\n"})}),"\n",(0,o.jsxs)(e.h3,{id:"1921-将未知结构的数据集展示在页面上",children:["19.2.1 将未知结构的数据集展示在页面上",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1921-将未知结构的数据集展示在页面上",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"在这个例子中我们模拟了一个拥有多个不同字段的数据集，而且其中的每一个字段都有多种不确定的可过滤值。现在我们需要将这个数据集展示到页面上，由于数据应用在开发的时候是不清楚数据集的结构的，所以在展示之前首先需要对数据集进行转换以得到该数据集的字段列表。"}),"\n",(0,o.jsx)(e.p,{children:"因为数据结构在数据到达之前是不可知的，而且一般情况下我们需要约定数据集中的每一个个体数据都严格符合整体结构。这样的情况下，便可以通过取得数据集中的第一个记录来取得该数据集的整体结构。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'<div id="app">\n  <table>\n    <tr>\n      <th v-for="column in columnNames" :key="column">{{column}}</th>\n    </tr>\n    <tr v-for="(item, i) in dataset" :key="i">\n      <td v-for="column in columnNames" :key="column">\n        {{item[column]}}\n      </td>\n    </tr>\n  </table>\n</div>\n\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"// ...\n\nnew Vue({\n  el: '#app',\n\n  data: {\n    dataset: dataSource.dataset\n  },\n\n  computed: {\n    columnNames() {\n      if (this.dataset && this.dataset.length > 0) {\n        return _.keys(this.dataset[0])\n      }\n\n      return []\n    }\n  }\n})\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["DEMO 在线地址：",(0,o.jsx)(e.a,{href:"https://codepen.io/iwillwen/pen/NeQmRX?editors=1010",target:"_blank",rel:"noopener noreferrer",children:(0,o.jsx)(e.a,{href:"https://codepen.io/iwillwen/pen/NeQmRX?editors=1010",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/iwillwen/pen/NeQmRX?editors=1010"})})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2019/1/22/16873eae36e84a83?w=772&h=412&f=gif&s=433108",alt:""})}),"\n",(0,o.jsxs)(e.h3,{id:"1922-为未知结构的数据集添加动态过滤器",children:["19.2.2 为未知结构的数据集添加动态过滤器",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1922-为未知结构的数据集添加动态过滤器",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"我们已经将这个复杂的数据集通过动态地感知到其结构以后展示在了页面上，那么接下来便需要对这个数据集进行转换过滤了，因为对各种不确定的数据集进行各种操作正正就是 BI 项目的基本需求。"}),"\n",(0,o.jsx)(e.p,{children:"而且对于这种拥有多个不同字段的数据集，数据应用拥有高度可配置的过滤机制往往是最起码的要求。数据表格展示作为最基本的数据展示方式，我们可以回想一下数据应用领域中的“老大哥”——Microsoft Excel。对于 Excel 本身来说，每一个处理的表格文件都是一个不确定的数据集，而作为用户的我们可以通过其中的“筛选过滤”功能对数据集中的各种字段进行过滤，而且这个机制是可以多字段叠加的。那么在我们开发的数据应用中该如何进行开发呢？"}),"\n",(0,o.jsx)(e.p,{children:"首先需要设计好的是，因为在这个需求中我们要控制两个对象，一个是数据集本身，另外一个则是控制过滤器本身的配置集。我们将这个过滤器的配置集单独处理，每个过滤器包含两个值：字段名和过滤目标值。默认情况下每一个过滤器都是为了将数据集中的制定字段的指定值记录过滤出来，当然在实际应用开发中很有可能还有有更多的选项，比如大于小于之类的过滤方式。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"const filters = [\n  {\n    column: '<column>',\n    value: '<value>'\n  },\n  // ...\n]\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["当我们只有一个过滤器的时候，我们可以直接判断数据集中的每一个记录中的指定字段是否为指定过滤值。那么当有多个过滤器时，我们可以使用 JavaScript 中的一个原生 API ",(0,o.jsx)(e.code,{children:"Array.prototype.every"})," 来完成这一操作。"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"const row = { /* ... */ }\nconst filters = [ /* ... */ ]\n\nconst isPassed = filters.every(filter => {\n  if (filter.column === 'none' || filter.value === 'none') {\n    return true\n  }\n  \n  return row[filter.column] === filter.value\n})\n\n"})}),"\n",(0,o.jsx)(e.p,{children:"通过 Vue.js 的一些比较基本的使用方法，我们可以非常方便地对过滤器的配置集进行管理。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"new Vue({\n  \n  // ...\n  \n  data: {\n    // ...\n  \n    filters: []\n  },\n  \n  methods: {\n    addFilter() {\n      this.filters.push({\n        column: 'none',\n        value: 'none'\n      })\n    },\n    removeFilter(index) {\n      this.filters.splice(index, 1)\n    }\n  }\n})\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["但是要让用户能够通过数据应用所提供的功能，来为数据集添加动态过滤器，那么首先就得让用户知道当前有哪些可选值。所以跟需要知道数据集结构中有哪些字段一样，过滤器的可选值还包含了每一个字段中有哪些现有值可以作为过滤的目标值。那么还记得我们在第 10 节中曾经学习过的行式数据集和列式数据集的转换方法吗？在默认的行式数据集中，我们很难通过某一个字段名取得该字段的所有可选值。但是使用列式数据集在处理这个需求时，则变得有着非常好的天然优势。配合着 Lodash 的 ",(0,o.jsx)(e.code,{children:"_.uniq"})," 取得每一个字段中的所有唯一值。"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"new Vue({\n  // ...\n  \n  data: {\n    // ...\n  \n    dataset: dataSource.dataset\n  },\n  \n  computed: {\n    colOrientedDataset() {\n      return rowOriented2ColOriented(this.dataset)\n    },\n\n    columnNames() {\n      if (this.dataset && this.dataset.length > 0) {\n        return _.keys(this.dataset[0])\n      }\n\n      return []\n    },\n\n    optionsOfColumns() {\n      return _.fromPairs(\n        this.columnNames.map(columnName => [ columnName, _.uniq(this.colOrientedDataset[columnName]) ])\n      )\n    },\n  }\n})\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["取得这些信息之后，就可以在页面上开发过滤器的控制组件了。我们使用一个简单的列表来表示这个过滤器的配置集，而列表中的每一个元素包含两个 ",(0,o.jsx)(e.code,{children:"<select>"})," 组件分别对应着过滤器的对应字段和过滤目标值。",(0,o.jsx)(e.code,{children:"<select>"})," 组件中则分别使用前面准备好的 ",(0,o.jsx)(e.code,{children:"columnNames"})," 和 ",(0,o.jsx)(e.code,{children:"optionsOfColumns"})," 来生成 ",(0,o.jsx)(e.code,{children:"<option>"})," 可选项。"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'<div id="app">\n  <button @click="addFilter">Add Filter</button>\n\n  <ul id="filters">\n    <li v-for="filter, i in filters" :key="i">\n      <select v-model="filter.column">\n        <option value="none">None</option>\n        <option\n          v-for="columnName in columnNames"\n          :value="columnName"\n          :key="columnName"\n        >\n          {{columnName}}\n        </option>\n      </select>\n      =\n      <select v-model="filter.value">\n        <option value="none">None</option>\n        <option\n          v-for="option in (optionsOfColumns[filter.column] || [])"\n          :value="option"\n          :key="option"\n        >\n          {{option}}\n        </option>\n      </select>\n\n      <button @click="removeFilter(i)">x</button>\n    </li>\n  </ul>\n</div>\n\n'})}),"\n",(0,o.jsx)(e.p,{children:"最后我们将这些元素都整合起来便可以得到一个相当不错的效果。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'<div id="app">\n  <button @click="addFilter">Add Filter</button>\n\n  <ul id="filters">\n    <li v-for="filter, i in filters" :key="i">\n      <select v-model="filter.column">\n        <option value="none">None</option>\n        <option\n          v-for="columnName in columnNames"\n          :value="columnName"\n          :key="columnName"\n        >\n          {{columnName}}\n        </option>\n      </select>\n      =\n      <select v-model="filter.value">\n        <option value="none">None</option>\n        <option\n          v-for="option in (optionsOfColumns[filter.column] || [])"\n          :value="option"\n          :key="option"\n        >\n          {{option}}\n        </option>\n      </select>\n\n      <button @click="removeFilter(i)">x</button>\n    </li>\n  </ul>\n\n  <table>\n    <tr>\n      <th v-for="column in columnNames" :key="column">{{column}}</th>\n    </tr>\n    <tr v-for="(item, i) in filteredDataset" :key="i">\n      <td v-for="column in columnNames" :key="column">\n        {{item[column]}}\n      </td>\n    </tr>\n  </table>\n</div>\n\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"// ...\n\nconst dataSource = mockDataSource(4)\n\nfunction applyColumn(colDataset, columnName) {\n  if (!_.has(colDataset, columnName)) {\n    colDataset[columnName] = []\n  }\n\n  return colDataset\n}\n\nfunction rowOriented2ColOriented(rowDataset) {\n  let colDataset = {}\n\n  rowDataset.forEach(function(row, i) {\n    const columnNames = _.keys(row)\n\n    columnNames.forEach(function(columnName) {\n      colDataset = applyColumn(colDataset, columnName)\n      colDataset[columnName][i] = row[columnName]\n    })\n  })\n\n  return colDataset\n}\n\nnew Vue({\n  el: '#app',\n\n  data: {\n    filters: [],\n    dataset: dataSource.dataset\n  },\n\n  computed: {\n    colOrientedDataset() {\n      return rowOriented2ColOriented(this.dataset)\n    },\n\n    columnNames() {\n      if (this.dataset && this.dataset.length > 0) {\n        return _.keys(this.dataset[0])\n      }\n\n      return []\n    },\n\n    optionsOfColumns() {\n      return _.fromPairs(\n        this.columnNames.map(columnName => [ columnName, _.uniq(this.colOrientedDataset[columnName]) ])\n      )\n    },\n\n    filteredDataset() {\n      return this.dataset.filter(row => {\n        return this.filters.every(({ column, value }) => {\n          if (column === 'none' || value === 'none') {\n            return true\n          }\n\n          return row[column] === value\n        })\n      })\n    }\n  },\n\n  methods: {\n    addFilter() {\n      this.filters.push({\n        column: 'none',\n        value: 'none'\n      })\n    },\n    removeFilter(index) {\n      this.filters.splice(index, 1)\n    }\n  }\n})\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["DEMO 在线地址：",(0,o.jsx)(e.a,{href:"https://codepen.io/iwillwen/pen/Rvbeox?editors=1010",target:"_blank",rel:"noopener noreferrer",children:(0,o.jsx)(e.a,{href:"https://codepen.io/iwillwen/pen/Rvbeox?editors=1010",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/iwillwen/pen/Rvbeox?editors=1010"})})]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2019/1/22/16873eb14d43bd23?w=780&h=503&f=gif&s=1742963",alt:""})}),"\n",(0,o.jsxs)(e.h2,{id:"小结",children:["小结",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"在本小节中我们从较为简单的流式数据集触发，一步一步地尝试添加动态过滤器，并且也从简单的、确定的数据集向更常见的复杂且不确定结构的数据集学习，最后在这种数据集上结合软件工程中的“分治”手段将复杂的问题切分为三个部分：动态数据源、动态数据源的转换过滤展示以及过滤机制的控制管理。相信从第一节开始学习到现在的你已经掌握了非常多的各种数据结构和对他们进行逻辑处理的方法，那么在最后一节中我们将着手开发一个实际的项目，把我们曾经学习过的东西应用起来。"}),"\n",(0,o.jsxs)(e.h3,{id:"习题",children:["习题",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#习题",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"尝试在过滤器机制中为每一个过滤器添加过滤方法，即从原本的等于添加如大于、小于、不等于、包含、不包含等等，完成后在评论区提交你的 CodePen 地址。"})]})}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(i,{...n})}):i(n)}let l=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20JavaScript%20%E5%BC%80%E5%8F%91%E7%81%B5%E6%B4%BB%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%2F%E7%AC%AC%2019%20%E8%8A%82%20%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%20%C2%B7%20%E4%BD%BF%E7%94%A8%20Vue.js%20%E4%B8%BA%E6%95%B0%E6%8D%AE%E6%B5%81%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%BD%AC%E6%8D%A2%E8%BF%87%E6%BB%A4%E5%99%A8.md"]={toc:[{text:"19.1 基于数据的动态转换过滤器",id:"191-基于数据的动态转换过滤器",depth:2},{text:"19.2 更复杂的动态转换过滤器",id:"192-更复杂的动态转换过滤器",depth:2},{text:"19.2.1 将未知结构的数据集展示在页面上",id:"1921-将未知结构的数据集展示在页面上",depth:3},{text:"19.2.2 为未知结构的数据集添加动态过滤器",id:"1922-为未知结构的数据集添加动态过滤器",depth:3},{text:"小结",id:"小结",depth:2},{text:"习题",id:"习题",depth:3}],title:"第 19 节 动态数据应用 \xb7 使用 Vue.js 为数据流添加动态转换过滤器",headingTitle:"第 19 节 动态数据应用 \xb7 使用 Vue.js 为数据流添加动态转换过滤器",frontmatter:{}}}}]);