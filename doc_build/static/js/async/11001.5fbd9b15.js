"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["11001"],{258810:function(e,n,r){r.r(n),r.d(n,{default:()=>x});var s=r(552676),t=r(740453);let d=r.p+"static/image/ae0415cd40d55d75ed38a44f790353be.b90c8c35.webp",i=r.p+"static/image/0c219b139be186fd0427c2fce984ae20.aa2befb5.webp",c=r.p+"static/image/7ee35616fd87482fc55821cd86c1fa0b.271f9852.webp",a=r.p+"static/image/8b47cff62089671b1c3467f4625d693c.3dc41857.webp",o=r.p+"static/image/4e568b6676ca40a33d7247fa64625d3f.e0043f03.webp";function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",img:"img",pre:"pre",code:"code",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",h3:"h3"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"28客户端实战拖拽功能实现",children:["28.客户端实战：拖拽功能实现",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#28客户端实战拖拽功能实现",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["市场上绝大部分的可视化搭建平台都会使用拖拉拽来完成对应页面的布局，减少非研发成员对于选择物料进行整体布局的学习成本，所以流畅的拖拽功能是基于 ",(0,s.jsx)(n.strong,{children:"GUI"})," 的低代码平台中编辑器模块的核心功能之一。"]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.strong,{children:"HTML5"})," 中，提供了 ",(0,s.jsx)(n.strong,{children:"Drag & Drop"})," 相关的 ",(0,s.jsx)(n.strong,{children:"API"})," 用来实现元素的拖动和放置。"]}),"\n",(0,s.jsx)(n.p,{children:"如下示例所示："}),"\n",(0,s.jsxs)(n.p,{children:["分别创建了一个拖动区和一个放置区，为元素标签属性设置 ",(0,s.jsx)(n.strong,{children:"draggable"})," 和 ",(0,s.jsx)(n.strong,{children:"dropzone"})," 即可开启元素拖拽行为，从而能够使操作者将拖动区的元素挪动到放置区当中去。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<style>\n  #drag {\n    padding: 10px;\n    border: 1px solid black;\n    display: flex;\n    justify-content: flex-start;\n    gap: 20px;\n  }\n\n  #drag > div {\n    width: 50px;\n    height: 50px;\n    border: 1px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  #drop {\n    margin-top: 20px;\n    padding: 50px;\n    border: 2px dashed black;\n  }\n</style>\n\n\n<div id=\"drag\">\n  <div data-id=\"text\" draggable=\"true\" >文本</div>\n  <div draggable=\"true\" >图片</div>\n  <div draggable=\"true\"  >容器</div>\n  <div draggable=\"true\" >富文本</div>\n  <div draggable=\"true\" >标题</div>\n</div>\n<div id=\"drop\" dropzone=\"true\" >\n  将拖动元素放到这里\n</div>\n\n<script>\n  const drag = document.getElementById('drag');\n  const drop = document.getElementById('drop');\n\n  drag.addEventListener('dragstart', function(event) {\n    console.log(event, 'event')\n    // 设置传输的数据类型和值\n    event.dataTransfer.setData('text/plain', event.target.outerText);\n  });\n\n  drop.addEventListener('dragover', function(event) {\n    // 防止默认行为，以允许拖动元素放置到目标元素上\n    event.preventDefault();\n    // 添加样式以提示用户\n    drop.classList.add('hover');\n  });\n\n  drop.addEventListener('dragleave', function(event) {\n    // 移除之前添加的样式\n    drop.classList.remove('hover');\n  });\n\n  drop.addEventListener('drop', function(event) {\n    // 防止默认行为\n    event.preventDefault();\n    // 移除样式\n    drop.classList.remove('hover');\n    // 获取传输的数据\n    const data = event.dataTransfer.getData('text/plain');\n    // 在指定区域中插入拖动的元素\n    drop.innerHTML = data;\n  });\n<\/script>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["初步了解了 ",(0,s.jsx)(n.strong,{children:"Drag & Drop"})," 的相关概念后，接下来的内容会主要围绕实现一个编辑器应该具备的拖拽功能为出发点，目的就是为了完成后续编辑器可视化布局 ",(0,s.jsx)(n.strong,{children:"GUI"})," 的能力。"]}),"\n",(0,s.jsxs)(n.h2,{id:"拖拽引擎方案",children:["拖拽引擎方案",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#拖拽引擎方案",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在开头的时候了解了 ",(0,s.jsx)(n.strong,{children:"HTML5"})," 原生的拖拽方案，很明显如果需要用于项目开发需要不少的工作量和改造成本。"]}),"\n",(0,s.jsxs)(n.p,{children:["目前为止，社区有不少的成熟的方案都可以选择，但由于我们的项目中使用了 ",(0,s.jsx)(n.strong,{children:"React"})," 技术栈，所以推荐如下几个社区比较火热和维护度高的一些开源组件："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"react-dnd"}),": 是一个",(0,s.jsx)(n.strong,{children:"React"})," 拖放库的实用库，它提供了一组可以用于创建可拖拽和可放置组件的 **高阶组件（HOC）**和 ",(0,s.jsx)(n.strong,{children:"Hook"})," 函数，可以轻松地实现各种拖放操作。可帮助开发构建复杂的拖放界面，同时保持组件分离；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"react-beautiful-dnd"}),"：基于 ",(0,s.jsx)(n.strong,{children:"react-dnd"})," 扩展的拖拽库，提供了一个美观的视觉反馈，以及高水准的性能优化。支持拖放列表、网格和树形结构等场景的运用，同时可以配合虚拟列表技术来优化部分性能瓶颈的场景；"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"dnd-kit"}),"：用于 ",(0,s.jsx)(n.strong,{children:"React"})," 的",(0,s.jsx)(n.strong,{children:"轻量级"}),"、",(0,s.jsx)(n.strong,{children:"模块化"}),"、",(0,s.jsx)(n.strong,{children:"高性能"}),"、可访问且可扩展的拖放工具包。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"以上几个开源组件基本上能够适用于日常开发工作中绝大部分的基础亦或者是复杂的场景了，根据不同的需求选择适合自己的库即可。"}),"\n",(0,s.jsxs)(n.p,{children:["对于低代码的拖拽场景无非就是考虑几点，一个是基础的拖拽功能，另外一个就是容器内组件的互相拖拽和嵌套拖拽。基于这些场景分析个人还是比较推荐使用 ",(0,s.jsx)(n.strong,{children:"dnd-kit/core"})," 它来做为拖拽引擎的实现选型的，除了基础的拖拽的功能外，",(0,s.jsx)(n.strong,{children:"dnd-kit"})," 还提供了许多可自定义的组件和钩子，可以满足不同的拖拽需求，在 ",(0,s.jsx)(n.strong,{children:"React"}),"、",(0,s.jsx)(n.strong,{children:"Vue"}),"、",(0,s.jsx)(n.strong,{children:"Angular"}),"、",(0,s.jsx)(n.strong,{children:"Svelte"})," 等热门的开发框架 & 库下都有对应的实现，对跨平台的支持也非常不错。"]}),"\n",(0,s.jsxs)(n.p,{children:["除此之外 ",(0,s.jsx)(n.strong,{children:"dnd-kit"})," 的性能也有相当程度的保障，尤其是在 ",(0,s.jsx)(n.strong,{children:"DOM元素"})," 过多的时候能有效减缓操作卡顿和布局抖动。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["如果想要更精简的实现，",(0,s.jsx)(n.strong,{children:"react-dnd"})," 也是非常不错的选择，但是需要相应的承担开发过程中一系列的场景实现，这无疑是一个非常有挑战性的任务。总体来说，基于数据驱动的拖拽方案整体都性能都不会相差太多，可以自行选择喜欢的库进行开发，不必强求约束。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"拖拽引擎的实现分析",children:["拖拽引擎的实现分析",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#拖拽引擎的实现分析",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["上一节中，分析了 ",(0,s.jsx)(n.strong,{children:"React"})," 当中比较流行的解决方案，以此来实现一个基本的拖拽引擎，其结果就是要实现将物料组件放置到画布区域，并且按照一定的布局规律进行编排，同时也需要支持深层次的组件树形结构嵌套。"]}),"\n",(0,s.jsx)(n.p,{children:"如下图所示，针对目前的需求做的方案如下图所示："}),"\n",(0,s.jsx)(n.p,{children:"整个编辑器画布的布局分为容器布局和组件两侧，容器布局负责行列的编排，组件负责内容的显示，两者各司其职。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"实现后的产物结果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["通过 ",(0,s.jsx)(n.strong,{children:"@dnd-kit/core"})," 和 ",(0,s.jsx)(n.strong,{children:"react-dnd"})," 都可以实现以下的基本效果。\n以下几个事例都是比较好的一个实现过程，根据选择技术栈可以实现对应的效果，感兴趣的同学可以参考学习一下。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"react-dnd"}),"：",(0,s.jsx)(n.a,{href:"https://medium.com/kustomerengineering/building-complex-nested-drag-and-drop-user-interfaces-with-react-dnd-87ae5b72c803",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://medium.com/kustomerengineering/building-complex-nested-drag-and-drop-user-interfaces-with-react-dnd-87ae5b72c803",target:"_blank",rel:"noopener noreferrer",children:"https://medium.com/kustomerengineering/building-complex-nested-drag-and-drop-user-interfaces-with-react-dnd-87ae5b72c803"})})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"@dnd-kit/core"}),": ",(0,s.jsx)(n.a,{href:"https://codesandbox.io/s/dnd-kit-nested-containers-forked-rr0mqy?file=/src/app.js",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://codesandbox.io/s/dnd-kit-nested-containers-forked-rr0mqy?file=/src/app.js",target:"_blank",rel:"noopener noreferrer",children:"https://codesandbox.io/s/dnd-kit-nested-containers-forked-rr0mqy?file=/src/app.js"})})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"@dnd-kit/sortable"}),": ",(0,s.jsx)(n.a,{href:"https://master--5fc05e08a4a65d0021ae0bf2.chromatic.com/?path=/docs/presets-sortable-multiple-containers--vertical-grid",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://master--5fc05e08a4a65d0021ae0bf2.chromatic.com/?path=/docs/presets-sortable-multiple-containers--vertical-grid",target:"_blank",rel:"noopener noreferrer",children:"https://master--5fc05e08a4a65d0021ae0bf2.chromatic.com/?path=/docs/presets-sortable-multiple-containers--vertical-grid"})})]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"集成化解决方案",children:["集成化解决方案",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#集成化解决方案",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["从零实现一个拖拽的全链路流程无疑是一项巨大的挑战，这其中不仅仅包含了",(0,s.jsx)(n.strong,{children:"物料组件放置"}),"、",(0,s.jsx)(n.strong,{children:"画布组件交互"}),"、",(0,s.jsx)(n.strong,{children:"容器布局"}),"等基础功能的实现，同时还需要将其过程封装称独立的",(0,s.jsx)(n.strong,{children:"API"}),"或者是",(0,s.jsx)(n.strong,{children:"组件"}),"，其工作量和代码程度对新同学而言，无疑是一个劝退的前奏。"]}),"\n",(0,s.jsx)(n.p,{children:"因此，在方案设计确定好之后，可以先在社区看看有没有成熟的方案，如果已经有一部分稳定的集成化方案且可以初步的满足产品的需求的话，通过一定程度的自定义后完全能够承担起一些自定义的需求扩展。"}),"\n",(0,s.jsx)(n.p,{children:"下面是几个值得推荐的解决方案，有不少的搭建类产品在使用它们："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"React-Grid-Layout"}),": ",(0,s.jsx)(n.strong,{children:"React-Grid-Layout"})," 是一个类似于 ",(0,s.jsx)(n.strong,{children:"Packery"})," 或 ",(0,s.jsx)(n.strong,{children:"Gridster"})," 的网格布局系统，具有响应能力并支持断点，同时断点布局可以由用户提供或自动生成。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"craft.js"}),": ",(0,s.jsx)(n.strong,{children:"craft.js"})," 是一个从上至下的模块化页面编辑器的解决方案，它内置了一套完善的拖拽体系，能有效的处理用户组件的组织与显示。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["由于 ",(0,s.jsx)(n.strong,{children:"craft.js"})," 对新手相对友好，能够稍微减少全链路低代码产品中的一些技术痛点，由浅入深的慢慢攻克其中的难点，再根据自己的想法完成属于自己的一个产品设计，循序渐进完成进阶。"]}),"\n",(0,s.jsxs)(n.p,{children:["所以在小册的开源项目中会将选择 ",(0,s.jsx)(n.strong,{children:"craft.js"})," 来深层次的自定义一些编辑器的交互内容。"]}),"\n",(0,s.jsxs)(n.h3,{id:"安装",children:["安装",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"通过如下命令安装:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"// -w 为全局安装模式，安装后在所有的子包当中都可以直接引用到它，无需重复进行安装。\npnpm add @craftjs/core -w\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"创建物料node",children:["创建物料Node",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建物料node",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.strong,{children:"craft.js"})," 创建一个用户组件非常的简单，只需要使用 ",(0,s.jsx)(n.strong,{children:"useNode"})," 进行连接即可。"]}),"\n",(0,s.jsx)(n.p,{children:"如下简单的例子所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import {useNode} from "@craftjs/core";\n\nconst TextComponent = ({text}) => {\n  const { connectors: {drag} } = useNode();\n\n  return (\n    <div ref={drag}>\n      <h2>{text}</h2>\n    </div>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["但是这样的话有一个弊端，那就是 ",(0,s.jsx)(n.strong,{children:"craft.js"})," 和组件库无法解耦，组件库单独使用不纯粹。"]}),"\n",(0,s.jsxs)(n.p,{children:["基于这个问题考虑，在实际开发过程中，还是需要对它做一些定制化的改造，因此在 ",(0,s.jsx)(n.strong,{children:"@lgnition-lowcode/core"})," 中会声明两个方法："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"withMaterialNode"}),"：一个高阶组件，它接收一个组件，并在其上层进行一些逻辑处理，比如将上述事例中的 ",(0,s.jsx)(n.strong,{children:"useNode"})," 连接放到其中，或者是后面需要注册通用属性和处理相关逻辑都可以放到这一层来做。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"createReactMaterial"}),"：创建 ",(0,s.jsx)(n.strong,{children:"React"})," 物料的方法，主要是来创建物料 ",(0,s.jsx)(n.strong,{children:"config"})," 属性配置，其中定义了物料相关的描述和属性面板的配置与实现。具体可以参考物料组件模块的设计。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import * as React from 'react'\nimport type { UserComponent, UserComponentConfig } from '@craftjs/core';\nimport { useNode } from '@craftjs/core'\n\n/** 物料类型 */\nexport type MaterialComponent = UserComponent\n\n/**\n * 物料组件HOC，透传 useNode Ref\n * @param WrapComponent 物料组件\n */\nexport function withMaterialNode<T = any> (WrapComponent: React.FunctionComponent<T>) {\n  return React.forwardRef(function (props: any) {\n    const { connectors: { connect, drag } } = useNode()\n\n    return <WrapComponent ref={(dom: HTMLElement) => connect(drag(dom))} {...props} />\n  })\n}\n\n/**\n * 创建React物料组件\n * @param component 物料组件\n * @param options 物料配置\n */\nexport function createReactMaterial<T> (component: MaterialComponent, options: Partial<UserComponentConfig<T>>) {\n  component.craft = options\n  return component as MaterialComponent\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"在初期实现编辑器实现算是一个比较简陋的实现，后续随着代码增量会逐步扩展，一步步的来实现更多的功能。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["最后，在 ",(0,s.jsx)(n.strong,{children:"@lgnition-lowcode/core"})," 的 ",(0,s.jsx)(n.strong,{children:"index.ts"})," 文件中导出后，就可以用它们来创建物料组件了。"]}),"\n",(0,s.jsxs)(n.h3,{id:"创建示例",children:["创建示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建示例",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["安装 ",(0,s.jsx)(n.strong,{children:"@lgnition-lowcode/core"})," 包后，可以快速的实现一个 ",(0,s.jsx)(n.strong,{children:"React"})," 组件。"]}),"\n",(0,s.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import * as React from 'react'\nimport { createReactMaterial, withMaterialNode } from '@lgnition-lowcode/core'\n\nexport interface TextProps {\n  children?: React.ReactNode\n}\n\nconst TextView =  React.forwardRef<HTMLDivElement, TextProps>((props, ref) => {\n  return (\n    <div ref={ref} >\n      {props.children}\n    </div>\n  )\n})\n\nexport const Text = createReactMaterial(withMaterialNode<TextProps>(TextView), {\n  displayName: '文本组件'\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TextView"})," 是一个简单的 ",(0,s.jsx)(n.strong,{children:"React"})," 组件，大多数组件都会使用 ",(0,s.jsx)(n.strong,{children:"forwardRef"})," 来向外部暴露 ",(0,s.jsx)(n.strong,{children:"ref"})," 的属性，用于后续添加相应的操作，提供组件管理的支持。它是一个简单的视图组件，可以提供给业务侧单独使用，提供给搭建平台使用的话就需要通过 ",(0,s.jsx)(n.strong,{children:"withMaterialNode"})," 来包裹组件，让它能够支持拖拽的连接和操作。最后在使用 ",(0,s.jsx)(n.strong,{children:"createReactMaterial"})," 添加相应的组件信息。"]}),"\n",(0,s.jsxs)(n.p,{children:["此时，",(0,s.jsx)(n.strong,{children:"Text"})," 组件就已经集成 ",(0,s.jsx)(n.strong,{children:"craft.js"})," 相关的编辑能力，能够在编辑器当中自由的进行拖拽。到了这一步，整个低代码的基础拖拽我想认真读下来的同学应该问题不是太大，后续复杂的也会在此基础上进行扩展。"]}),"\n",(0,s.jsxs)(n.h2,{id:"iframe",children:["iframe",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#iframe",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"iframe"})," 在浏览器中是一个非常好的沙盒容器，能够在网页中嵌入另一个网页或文档。常常被作用于微前端容器的隔离方案存在。"]}),"\n",(0,s.jsxs)(n.p,{children:["在低代码平台当中，我们也需要借用 ",(0,s.jsx)(n.strong,{children:"iframe"})," 的能力来为编辑器画布提供对应的隔离能力，以此来兼容部分特殊单位在画布中的显示，如 ",(0,s.jsx)(n.code,{children:"vw"}),"、",(0,s.jsx)(n.code,{children:"vh"})," 等长度的单位的兼容，尤其是在移动端上被广泛应用。"]}),"\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.strong,{children:"iframe"})," 有如下两个方案："]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第一种方案"}),": 通过 ",(0,s.jsx)(n.strong,{children:"src"})," 属性来连接一个页面，如下图代码预览结果显示，将 ",(0,s.jsx)(n.strong,{children:"preview"})," 页面直接嵌入编辑器画布当中，此时可以通过与 ",(0,s.jsx)(n.strong,{children:"iframe"})," 的交互来完成一些操作。"]}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的是在此方案中，",(0,s.jsx)(n.strong,{children:"iframe"})," 是加载了一个新的预览页面，由于 ",(0,s.jsx)(n.strong,{children:"iframe"})," 的限制原因，每次进入都是一次浏览器上下文重建、资源重新加载的过程，会存在部分资源重复加载引用的问题。在微前端框架 ",(0,s.jsx)(n.strong,{children:"qiankun"})," 中，也描述了一些 ",(0,s.jsx)(n.strong,{children:"iframe"})," 的一些弊端，可以参考一下这篇文章：",(0,s.jsx)(n.a,{href:"https://www.yuque.com/kuitos/gky7yw/gesexv",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://www.yuque.com/kuitos/gky7yw/gesexv",target:"_blank",rel:"noopener noreferrer",children:"https://www.yuque.com/kuitos/gky7yw/gesexv"})})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"<iframe width=\"100%\" height=\"100%\" src='./preview' className={css({\n  overflow: 'hidden',\n  border: 'none'\n})}  />\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"第二种方案"}),": 通过 ",(0,s.jsx)(n.strong,{children:"ReactDOM.createPortal"})," 来挂载对应的内容显示的内容，这个方式可以直接将 ",(0,s.jsx)(n.strong,{children:"React"})," 的组件进行挂载显示，具体来说，可以将 ",(0,s.jsx)(n.strong,{children:"iframe"})," 的 ",(0,s.jsx)(n.strong,{children:"contentWindow.document.body"})," 作为渲染目标来渲染 ",(0,s.jsx)(n.strong,{children:"React"})," 的组件。"]}),"\n",(0,s.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import * as React from 'react'\nimport { css } from '@emotion/css'\nimport { createPortal } from 'react-dom'\n\nexport interface FrameRenderProps {\n  children?: React.ReactNode\n}\n\nexport const FrameRender: React.FC<FrameRenderProps> = ({ children, ...props }) => {\n\n  const ref = React.useRef<HTMLIFrameElement>(null)\n\n  const mountNode =\n    ref?.current?.contentWindow?.document.body\n\n  return (\n    <iframe {...props} ref={ref} width=\"100%\" height=\"100%\" className={css({\n      border: 'none'\n    })} >\n      {mountNode ? createPortal(children, mountNode) : null}\n    </iframe>\n  )\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["通过为 ",(0,s.jsx)(n.strong,{children:"iframe"})," 绑定 ",(0,s.jsx)(n.strong,{children:"ref"}),"，从而获取 ",(0,s.jsx)(n.strong,{children:"iframe"})," 实体的 ",(0,s.jsx)(n.strong,{children:"body"}),"，这个 ",(0,s.jsx)(n.strong,{children:"body"})," 就是 ",(0,s.jsx)(n.strong,{children:"createPortal"})," 需要挂载的节点，调用 ",(0,s.jsx)(n.strong,{children:"createPortal(children, mountNode)"})," 方法，此时就会将 ",(0,s.jsx)(n.strong,{children:"FrameRender"})," 组件的 ",(0,s.jsx)(n.strong,{children:"children"})," 渲染到 ",(0,s.jsx)(n.strong,{children:"iframe"})," 当中去，这样做的好处就是无需新创建一个 ",(0,s.jsx)(n.strong,{children:"route"})," 来专门的作为显示的容器，纯粹当成沙盒容器来使用。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"FrameRender"})," 组件创建好后，就可以用它来包裹一个编辑器画布的内容，如下代码所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"<FrameRender>\n        <Frame/>\n      </FrameRender>\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Frame"})," 组件是要显示的一个内容，通过 ",(0,s.jsx)(n.strong,{children:"createPortal"})," 成功的将它挂载到了 ",(0,s.jsx)(n.strong,{children:"iframe"})," 的 ",(0,s.jsx)(n.strong,{children:"body"})," 中进行渲染显示。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["需要注意的就是资源的加载，由于是 ",(0,s.jsx)(n.strong,{children:"iframe"})," 沙盒加载内容，如果渲染的组件引用了工程中的样式的话，那就会出现样式丢失的问题，解决的办法也容易，参考了微前端的实现过程，在 ",(0,s.jsx)(n.strong,{children:"iframe"})," 挂载期间，会将主工程相关的一些内容进行拷贝，从而在 ",(0,s.jsx)(n.strong,{children:"iframe"})," 中生成一个影子环境，这样的话就能够一定程度上保持两个容器间的内容相对而言比较一致。"]}),"\n",(0,s.jsxs)(n.p,{children:["类似这样的问题，社区中也有相应的解决方案，如 ",(0,s.jsx)(n.strong,{children:"react-frame-component"}),"，就能够很好的将整个 ",(0,s.jsx)(n.strong,{children:"React"})," 应用程序或每个组件封装在一个 ",(0,s.jsx)(n.strong,{children:"iframe"})," 中。如果有兴趣的话，也可以查阅相关的一些学习文章，比如",(0,s.jsx)(n.a,{href:"https://blog.logrocket.com/best-practices-react-iframes/",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://blog.logrocket.com/best-practices-react-iframes/",target:"_blank",rel:"noopener noreferrer",children:"https://blog.logrocket.com/best-practices-react-iframes/"})})," 就很好的讲述了其中的一些概念知识点。"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["本节主题主要是对编辑器相关的拖拽做了相关的技术选型和相关的实践。在后续的开发过程中，会主要使用 ",(0,s.jsx)(n.strong,{children:"craft.js"})," 这个开源组件来作为一个中间层实现编辑器相关的拖拽与编排关联。"]}),"\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.strong,{children:"craft.js"})," 可以最小成本的实现一个低代码平台的拖拽功能实现。在这之上，还提到了利用 ",(0,s.jsx)(n.strong,{children:"iframe"})," 来实现编辑器画布预览的容器沙盒方案，其目的就是为了兼容浏览器当中存在的一些样式污染方面的问题，从而打造一个场景真实还原的一个预览容器。"]}),"\n",(0,s.jsxs)(n.p,{children:["目前市场上的产品而言，大体上都包含了两者方案的实现，其目的是一致的。也有部分产品并没有添加隔离容器，而是直接渲染 ",(0,s.jsx)(n.strong,{children:"dom"}),"，但是这就需要约束物料层的一些实现了，不管是从编程规范上避免特殊的实现，还是从 ",(0,s.jsx)(n.strong,{children:"CLI"})," 层面构建时自动替换抹平的方案上，最终的结果都是为了保证用户搭建应用预览与产物的多端一致性。"]}),"\n",(0,s.jsxs)(n.p,{children:["在后续的规划中，也会基于 ",(0,s.jsx)(n.strong,{children:"dnd-kit"})," 等拖拽方案来实现一个集成化的 ",(0,s.jsx)(n.strong,{children:"SDK"})," 方案，在此基础上更加高定制化的实现低代码平台所需求的一系列操作需求。"]}),"\n",(0,s.jsxs)(n.h2,{id:"资源推荐",children:["资源推荐",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#资源推荐",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.dndkit.com/presets/sortable/usesortable",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://docs.dndkit.com/presets/sortable/usesortable",target:"_blank",rel:"noopener noreferrer",children:"https://docs.dndkit.com/presets/sortable/usesortable"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://craft.js.org/docs/guides/basic-tutorial",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://craft.js.org/docs/guides/basic-tutorial",target:"_blank",rel:"noopener noreferrer",children:"https://craft.js.org/docs/guides/basic-tutorial"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://levelup.gitconnected.com/say-goodbye-to-react-dnd-hello-to-dnd-kit-the-future-of-drag-and-drop-is-here-6aa488f17a0",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://levelup.gitconnected.com/say-goodbye-to-react-dnd-hello-to-dnd-kit-the-future-of-drag-and-drop-is-here-6aa488f17a0",target:"_blank",rel:"noopener noreferrer",children:"https://levelup.gitconnected.com/say-goodbye-to-react-dnd-hello-to-dnd-kit-the-future-of-drag-and-drop-is-here-6aa488f17a0"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://medium.com/kustomerengineering/building-complex-nested-drag-and-drop-user-interfaces-with-react-dnd-87ae5b72c803",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://medium.com/kustomerengineering/building-complex-nested-drag-and-drop-user-interfaces-with-react-dnd-87ae5b72c803",target:"_blank",rel:"noopener noreferrer",children:"https://medium.com/kustomerengineering/building-complex-nested-drag-and-drop-user-interfaces-with-react-dnd-87ae5b72c803"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://master--5fc05e08a4a65d0021ae0bf2.chromatic.com/?path=/docs/presets-sortable-multiple-containers--vertical-grid",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://master--5fc05e08a4a65d0021ae0bf2.chromatic.com",target:"_blank",rel:"noopener noreferrer",children:"https://master--5fc05e08a4a65d0021ae0bf2.chromatic.com"})})}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"写在最后",children:["写在最后",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#写在最后",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"如果你有什么疑问或者更好的建议，欢迎在评论区提出或者加群沟通。 \uD83D\uDC4F"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let x=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F28.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E6%8B%96%E6%8B%BD%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"拖拽引擎方案",id:"拖拽引擎方案",depth:2},{text:"拖拽引擎的实现分析",id:"拖拽引擎的实现分析",depth:2},{text:"集成化解决方案",id:"集成化解决方案",depth:2},{text:"安装",id:"安装",depth:3},{text:"创建物料Node",id:"创建物料node",depth:3},{text:"创建示例",id:"创建示例",depth:3},{text:"iframe",id:"iframe",depth:2},{text:"总结",id:"总结",depth:2},{text:"资源推荐",id:"资源推荐",depth:2},{text:"写在最后",id:"写在最后",depth:2}],title:"28.客户端实战：拖拽功能实现",headingTitle:"28.客户端实战：拖拽功能实现",frontmatter:{}}}}]);