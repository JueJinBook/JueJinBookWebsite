"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["94271"],{688005:function(e,n,a){a.r(n),a.d(n,{default:()=>k});var s=a(552676),i=a(740453);let l=a.p+"static/image/e6e00bad6f00135b53d4e62a95efe2ae.fb56d84f.webp",t=a.p+"static/image/67570c353944ce5770540aacda578c7a.0caba759.webp",r=a.p+"static/image/c524a9022b338f746cd18711c5c08329.b1c95f18.webp",c=a.p+"static/image/ef19c3784da336b653d1c44b02ad4a67.8045c109.webp",d=a.p+"static/image/8bb5373cc912eef9f8d8ec49335a2891.1fa8247e.webp",p=a.p+"static/image/54a59bd02c759603fe38a597bc33042d.ab1f9e7a.webp",o=a.p+"static/image/ae04c7515fb2aa2b74d004e942d95827.ab6b748b.webp",x=a.p+"static/image/e8911c066e66df6bb81e7e22eaec57a3.74184561.webp",h=a.p+"static/image/2d798aa7948972b9ae724eefd276d218.c8a8daba.webp",j=a.p+"static/image/9f1fd0b6ebd3164dd01a50992f284447.17302de7.webp",m=a.p+"static/image/117cef7bf4eefbd1f7f15f59c235087a.12f6a397.webp",f=a.p+"static/image/1c199458a95389e17800ea4805f9671a.432b7815.webp",b=a.p+"static/image/7a7a62c950aad54d31f3a986e85649ef.c639f6b7.webp",u=a.p+"static/image/5eae0573fa228b9592c418b6d371cacc.8842e96a.webp",g=a.p+"static/image/b1eee3b14116f19547768eb250255202.e6af852e.webp",F=a.p+"static/image/df347932533dca3d446164ed5c6490b2.df2cc057.webp",w=a.p+"static/image/f22c1c214ba4c72995d8299385149cae.3bf066d8.webp",y=a.p+"static/image/c5649f705127bbe4ee6df4f3215d8f95.7b376c6c.webp",E=a.p+"static/image/da37b23c9ecc3a644be63933d0a7687c.32626ea4.webp",I=a.p+"static/image/3f59fe6f6dc5d9e7247b52b589c142cb.fe4782b2.webp",v=a.p+"static/image/069c2ef0e09507edd6d2a863081a885e.68d08c41.webp",N=a.p+"static/image/f71d6051f7075f4d69c84ff7e500b8cd.76e5c7e6.webp",A=a.p+"static/image/68bfd2ec841a316b46c4b4bedd149193.8942e196.webp",P=a.p+"static/image/9c459d0a80a25ad923f06092244ec729.316ace79.webp",U=a.p+"static/image/6c716bd5af2c81bf2296f151c2d8b512.a7e878f3.webp",B=a.p+"static/image/e74bcc587ce596d3661510b526cfb6f1.67ad7883.webp",M=a.p+"static/image/4eb9db4d0c754970f69fb1de03ec8af4.b290707b.webp",S=a.p+"static/image/b19c2573cede6f173b419938e1e0f965.9b352168.webp";function D(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"26-nest-如何使用-multer-实现文件上传",children:["26. Nest 如何使用 multer 实现文件上传",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#26-nest-如何使用-multer-实现文件上传",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上节我们学了在 Express 里用 multer 包处理 multipart/form-data 类型的请求中的 file。"}),"\n",(0,s.jsx)(n.p,{children:"单个、多个字段的单个、多个 file 都能轻松取出来。"}),"\n",(0,s.jsx)(n.p,{children:"那在 Nest 里怎么用呢？"}),"\n",(0,s.jsx)(n.p,{children:"我们新建个 nest 项目来试试："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest new nest-multer-upload -p npm\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"还需要安装下 multer 的 ts 类型的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install -D @types/multer\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 AppController 添加这样一个 handler："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Post('aaa')\n@UseInterceptors(FileInterceptor('aaa', {\n    dest: 'uploads'\n}))\nuploadFile(@UploadedFile() file: Express.Multer.File, @Body() body) {\n    console.log('body', body);\n    console.log('file', file);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"使用 FileInterceptor 来提取 aaa 字段，然后通过 UploadedFile 装饰器把它作为参数传入。"}),"\n",(0,s.jsx)(n.p,{children:"用 npm run start:dev 把服务跑起来，一保存，就可以看到这个目录被创建了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:M,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后来写前端代码。"}),"\n",(0,s.jsx)(n.p,{children:"之前我们用过这种方式："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:B,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"就是让 nest 服务支持静态文件的访问。"}),"\n",(0,s.jsx)(n.p,{children:"现在我们换种方式，让 nest 服务支持跨域，再单独跑个 http-server 来提供静态服务："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:U,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在根目录创建 index.html，前端代码和之前差不多："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n    <script src="https://unpkg.com/axios@0.24.0/dist/axios.min.js"><\/script>\n</head>\n<body>\n    <input id="fileInput" type="file" multiple/>\n    <script>\n        const fileInput = document.querySelector(\'#fileInput\');\n\n        async function formData() {\n            const data = new FormData();\n            data.set(\'name\',\'光\');\n            data.set(\'age\', 20);\n            data.set(\'aaa\', fileInput.files[0]);\n\n            const res = await axios.post(\'http://localhost:3000/aaa\', data);\n            console.log(res);\n        }\n\n        fileInput.onchange = formData;\n    <\/script>\n</body>\n</html>\n'})}),"\n",(0,s.jsx)(n.p,{children:"浏览器访问下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"服务端就打印了 file 对象，并且文件也保存到了 uploads 目录："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"其他字段通过 @Body 装饰器获取。"}),"\n",(0,s.jsx)(n.p,{children:"再来试下多文件上传："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Post('bbb')\n@UseInterceptors(FilesInterceptor('bbb', 3, {\n    dest: 'uploads'\n}))\nuploadFiles(@UploadedFiles() files: Array<Express.Multer.File>, @Body() body) {\n    console.log('body', body);\n    console.log('files', files);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"把 FileInterceptor 换成 FilesInterceptor，把 UploadedFile 换成 UploadedFiles，都是多加一个 s。"}),"\n",(0,s.jsx)(n.p,{children:"然后写下前端代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function formData2() {\n    const data = new FormData();\n    data.set('name','光');\n    data.set('age', 20);\n    [...fileInput.files].forEach(item => {\n        data.append('bbb', item)\n    })\n\n    const res = await axios.post('http://localhost:3000/bbb', data, {\n        headers: { 'content-type': 'multipart/form-data' }\n    });\n    console.log(res);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这样就可以上传多文件了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"那如果有多个文件的字段呢？"}),"\n",(0,s.jsx)(n.p,{children:"和 multer 里类似，使用这种方式来指定："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Post('ccc')\n@UseInterceptors(FileFieldsInterceptor([\n    { name: 'aaa', maxCount: 2 },\n    { name: 'bbb', maxCount: 3 },\n], {\n    dest: 'uploads'\n}))\nuploadFileFields(@UploadedFiles() files: { aaa?: Express.Multer.File[], bbb?: Express.Multer.File[] }, @Body() body) {\n    console.log('body', body);\n    console.log('files', files);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后前端代码这样写："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function formData3() {\n    const data = new FormData();\n    data.set('name','光');\n    data.set('age', 20);\n    data.append('aaa', fileInput.files[0]);\n    data.append('aaa', fileInput.files[1]);\n    data.append('bbb', fileInput.files[2]);\n    data.append('bbb', fileInput.files[3]);\n\n    const res = await axios.post('http://localhost:3000/ccc', data);\n    console.log(res);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里应该用两个 file input 来分别上传 aaa 和 bbb 对应的文件，我这里为了测试方便就简化了下。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"后端收到了上传的 aaa、bbb 的文件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"那如果并不知道有哪些字段是 file 呢？"}),"\n",(0,s.jsx)(n.p,{children:"这时可以用 AnyFilesInterceptor："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Post('ddd')\n@UseInterceptors(AnyFilesInterceptor({\n    dest: 'uploads'\n}))\nuploadAnyFiles(@UploadedFiles() files: Array<Express.Multer.File>, @Body() body) {\n    console.log('body', body);\n    console.log('files', files);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后写下前端代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function formData4() {\n    const data = new FormData();\n    data.set('name','光');\n    data.set('age', 20);\n    data.set('aaa', fileInput.files[0]);\n    data.set('bbb', fileInput.files[1]);\n    data.set('ccc', fileInput.files[2]);\n    data.set('ddd', fileInput.files[3]);\n\n    const res = await axios.post('http://localhost:3000/ddd', data);\n    console.log(res);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"同样识别出了所有 file 字段："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这就是 Nest 上传文件的方式。"}),"\n",(0,s.jsx)(n.p,{children:"而且你也同样可以指定 storage："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import * as multer from \"multer\";\nimport * as fs from 'fs';\nimport * as path from \"path\";\n\nconst storage = multer.diskStorage({\n    destination: function (req, file, cb) {\n        try {\n            fs.mkdirSync(path.join(process.cwd(), 'my-uploads'));\n        }catch(e) {}\n\n        cb(null, path.join(process.cwd(), 'my-uploads'))\n    },\n    filename: function (req, file, cb) {\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9) + '-' + file.originalname\n        cb(null, file.fieldname + '-' + uniqueSuffix)\n    }\n});\n\nexport { storage };\n"})}),"\n",(0,s.jsx)(n.p,{children:"把我们之前写的这个 storage 拿过来，在 controller 里用一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:F,alt:""}),"\n为什么 Nest 上传文件的方式和直接使用 multer 这么像呢？"]}),"\n",(0,s.jsx)(n.p,{children:"因为它就是对 multer 做了一层简单的封装呀。"}),"\n",(0,s.jsx)(n.p,{children:"比如在 multer 里我们是通过 single 方法来处理单个 file 的字段："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 FileInterceptor 里也是一样："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 multer 里我们是通过 array 方法来处理多个 file 的字段："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在 FilesInterceptor 里也一样："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"另外两个装饰器也是同理："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"而 UploadedFile、UploadedFiles 这些装饰器，只是从 request 中取出处理完的 file、files 等属性作为参数传入 handler："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"了解了这些装饰器的原理之后，回头再来看这些文件上传用的装饰器，是不是就很清晰了呢："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"此外，我们还要对上传的文件做一些限制，比如文件大小、类型等，很明显，这部分可以放在 pipe 里做："}),"\n",(0,s.jsx)(n.p,{children:"比如我们生成一个 pipe："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g pipe file-size-validation-pipe --no-spec --flat\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后添加检查文件大小的逻辑："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { PipeTransform, Injectable, ArgumentMetadata, HttpException, HttpStatus } from '@nestjs/common';\n\n@Injectable()\nexport class FileSizeValidationPipe implements PipeTransform {\n  transform(value: Express.Multer.File, metadata: ArgumentMetadata) {\n    if(value.size > 10 * 1024) {\n      throw new HttpException('文件大于 10k', HttpStatus.BAD_REQUEST);\n    }\n    return value;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"大于 10k 就抛出异常，返回 400 的响应。"}),"\n",(0,s.jsx)(n.p,{children:"把它加到 UploadedFile 的参数里："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后访问下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样就可以实现文件的校验了。"}),"\n",(0,s.jsx)(n.p,{children:"但像文件大小、类型的校验这种逻辑太过常见，Nest 给封装好了，可以直接用："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Post('fff')\n@UseInterceptors(FileInterceptor('aaa', {\n    dest: 'uploads'\n}))\nuploadFile3(@UploadedFile(new ParseFilePipe({\n    validators: [\n      new MaxFileSizeValidator({ maxSize: 1000 }),\n      new FileTypeValidator({ fileType: 'image/jpeg' }),\n    ],\n})) file: Express.Multer.File, @Body() body) {\n    console.log('body', body);\n    console.log('file', file);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"之前内置的 pipe 还有个没讲，就是这个 ParseFilePipe。"}),"\n",(0,s.jsx)(n.p,{children:"它的作用是调用传入的 validator 来对文件做校验。"}),"\n",(0,s.jsx)(n.p,{children:"比如 MaxFileSizeValidator 是校验文件大小、FileTypeValidator 是校验文件类型。"}),"\n",(0,s.jsx)(n.p,{children:"常用的也就是校验这俩东西。"}),"\n",(0,s.jsx)(n.p,{children:"我们来试试："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，返回的也是 400 响应，并且 message 说明了具体的错误信息。"}),"\n",(0,s.jsx)(n.p,{children:"而且这个错误信息可以自己修改："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"我们也可以自己实现这样的 validator，只要继承 FileValidator 就可以："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { FileValidator } from "@nestjs/common";\n\nexport class MyFileValidator extends FileValidator{\n    constructor(options) {\n        super(options);\n    }\n\n    isValid(file: Express.Multer.File): boolean | Promise<boolean> {\n        if(file.size > 10000) {\n            return false;\n        }\n        return true;\n    }\n    buildErrorMessage(file: Express.Multer.File): string {\n        return `文件 ${file.originalname} 大小超出 10k`;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"然后在 controller 用一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在浏览器上传个文件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到我们自定义的 FileValidator 生效了。"}),"\n",(0,s.jsxs)(n.p,{children:["案例代码在",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/nest-multer-upload",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Nest 的文件上传也是基于 multer 实现的，它对 multer api 封装了一层，提供了 FileInterceptor、FilesInterceptor、FileFieldsInterceptor、AnyFilesInterceptor 的拦截器，分别用到了 multer 包的 single、array、fields、any 方法。"}),"\n",(0,s.jsx)(n.p,{children:"它们把文件解析出来，放到 request 的某个属性上，然后再用 @UploadedFile、@UploadedFiles 的装饰器取出来传入 handler。"}),"\n",(0,s.jsx)(n.p,{children:"并且这个过程还可以使用 ParseFilePipe 来做文件的验证，它内置了 MaxFileSizeValidator、FileTypeValidator，你也可以实现自己的 FileValidator。"}),"\n",(0,s.jsx)(n.p,{children:"这就是 Nest 里处理文件上传的方式。"})]})}function _(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(D,{...e})}):D(e)}let k=_;_.__RSPRESS_PAGE_META={},_.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F26.%20Nest%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20multer%20%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"26. Nest 如何使用 multer 实现文件上传",headingTitle:"26. Nest 如何使用 multer 实现文件上传",frontmatter:{}}}}]);