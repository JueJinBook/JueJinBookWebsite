"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["84812"],{531749:function(e,r,n){n.r(r),n.d(r,{default:()=>c});var s=n(552676),a=n(740453);let t=n.p+"static/image/90a91069dfbcd692749ba9cfe8da24f9.63225ce2.png";function i(e){let r=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",h3:"h3",ul:"ul",li:"li",pre:"pre",code:"code"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"6js-parser-的历史",children:["6.JS Parser 的历史",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#6js-parser-的历史",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"前面我们学习了 babel 的 parser 和 AST，babel 的 parser 是基于 acorn 扩展而来的，而 acorn 也不是最早的 js parser，js parser 的历史是怎样的？ 各种 parser 之间的关系是什么样的呢？这节我们来梳理一下。"}),"\n",(0,s.jsxs)(r.h2,{id:"spidermonkey-和-estree-标准",children:["SpiderMonkey 和 estree 标准",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#spidermonkey-和-estree-标准",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"在 nodejs 出现之后，前端可以用 nodejs 来做一些工程化的事情，工程化需要对代码做编译、压缩、lint 等处理，也就有了对 js parser 的需求。"}),"\n",(0,s.jsxs)(r.p,{children:["Mozilla 在 MDN 上公布了火狐浏览器的 JS 引擎 SpiderMonkey（c++ 写的 js 引擎）的 parser api 和 AST 标准，所以当时最早的 JS parser ---- ",(0,s.jsx)(r.a,{href:"https://github.com/jquery/esprima",target:"_blank",rel:"noopener noreferrer",children:"esprima"})," 就是基于 SpiderMonkey 的 AST 标准来实现的，后来形成了 ",(0,s.jsx)(r.a,{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer",children:"estree 标准"}),"。 当时很多的前端领域的工具都基于 esprima。"]}),"\n",(0,s.jsx)(r.p,{children:"但是到了 2015 年之后，es 标准一年一个版本，而 esprima 的更新速度跟不上，它跟不上也就导致了依赖它的一系列工具都跟不上，所以 eslint 就 fork 了一份 esprima，做了一些扩展，来自己实现新语法的 parse，这就是 espree，它依然是 estree 标准的，这是 eslint 的默认 parser。"}),"\n",(0,s.jsxs)(r.h2,{id:"acorn",children:["acorn",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#acorn",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["后面出现了 ",(0,s.jsx)(r.a,{href:"https://github.com/acornjs/acorn",target:"_blank",rel:"noopener noreferrer",children:"acorn"}),"，也是 estree 标准的实现，但是他的速度比 esprima 快，而且支持插件，可以通过插件扩展语法支持。正是速度快加上支持插件让很多工具都转而使用 acorn。"]}),"\n",(0,s.jsxs)(r.p,{children:["eslint 的 parser，也就是 ",(0,s.jsx)(r.a,{href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer",children:"espree"})," 本来是 fork 自 esprima，但后来 espree 2.0 基于 acorn 重新实现了，也使用 acorn 的插件机制来扩展语法。"]}),"\n",(0,s.jsx)(r.p,{children:"babel parser(babylon) 也选择了基于 acorn 来实现自己的 parser。"}),"\n",(0,s.jsx)(r.p,{children:"但它对 estree 标准的 AST 节点和属性都做了扩展，也提供了一些支持  typescript、jsx、flow 的语法插件（就是我们可以在 @babel/parser 的 plugins 里面指定的那些）。"}),"\n",(0,s.jsx)(r.p,{children:"这些 parser 之间的关系如图所示："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(r.p,{children:"estree 标准是基于 SpiderMonkey 的 AST 标准扩展的，它的实现有 esprima、acorn 等。"}),"\n",(0,s.jsx)(r.p,{children:"因为 acorn 新特性支持的全，而且支持插件，所以 espree、babel parser 都是基于 acorn 做了些扩展。"}),"\n",(0,s.jsx)(r.p,{children:"当然也不是所有的 js parser 都是 estree 标准的，比如 terser、typescript 等都有自己的 AST 标准。"}),"\n",(0,s.jsx)(r.p,{children:"那 babel 对 estree 标准的 AST 做了哪些扩展呢？"}),"\n",(0,s.jsxs)(r.h3,{id:"babel-parser-对-estree-ast-的扩展",children:["babel parser 对 estree AST 的扩展",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#babel-parser-对-estree-ast-的扩展",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["其实这些可以在 ",(0,s.jsx)(r.a,{href:"https://babeljs.io/docs/en/babel-parser#output",target:"_blank",rel:"noopener noreferrer",children:"babel parser 的文档"}),"里看到："]}),"\n",(0,s.jsx)(r.p,{children:"也就是，babel 基于 acorn 插件对 estree AST 做了如下扩展："}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"把 Literal 替换成了 StringLiteral、NumericLiteral、 BigIntLiteral、 BooleanLiteral、 NullLiteral、 RegExpLiteral"}),"\n",(0,s.jsx)(r.li,{children:"把 Property 替换成了 ObjectProperty 和 ObjectMethod"}),"\n",(0,s.jsx)(r.li,{children:"把 MethodDefinition 替换成了 ClassMethod"}),"\n",(0,s.jsx)(r.li,{children:"Program 和 BlockStatement 支持了 directives 属性，也就是 'use strict' 等指令的解析，对应的 ast 是 Directive 和 DirectiveLiteral"}),"\n",(0,s.jsx)(r.li,{children:"ChainExpression 替换为了 ObjectMemberExpression 和 OptionalCallExpression"}),"\n",(0,s.jsx)(r.li,{children:"ImportExpression 替换为了 CallExpression 并且 callee 属性设置为 Import"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"等"}),"\n",(0,s.jsxs)(r.h2,{id:"acorn-插件",children:["acorn 插件",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#acorn-插件",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"babel parser 基于 acorn 扩展了一些语法，那它是怎么扩展的呢？"}),"\n",(0,s.jsx)(r.p,{children:"我们写一个 acorn 插件来感受一下。"}),"\n",(0,s.jsx)(r.p,{children:"acorn 主要是一个 Parser 类，不同的方法实现了不同的逻辑，插件扩展就是继承这个 Parser，重写一些方法。"}),"\n",(0,s.jsx)(r.p,{children:"acorn 的 api 如下，其中 acorn-jsx、acorn-bigint 就是 acorn 插件"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const { Parser } = require("acorn")\n\nconst MyParser = Parser.extend(\n  require("acorn-jsx")(),\n  require("acorn-bigint")\n)\nconsole.log(MyParser.parse("// Some bigint + JSX code"))\n'})}),"\n",(0,s.jsx)(r.p,{children:"插件是一个函数，接收之前的 Parser，返回扩展以后的 Parser"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'module.exports = function noisyReadToken(Parser) {\n  return class extends Parser {\n    readToken(code) {\n      console.log("Reading a token!")\n      super.readToken(code)\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(r.p,{children:"接下来我们写一个 acorn 插件来实现 给 javascript 一个关键字 guang，可以作为 statement 单独使用。"}),"\n",(0,s.jsxs)(r.p,{children:["我们知道 parse 的过程其实就是",(0,s.jsx)(r.code,{children:"分词"})," + ",(0,s.jsx)(r.code,{children:"组装 AST"}),"这两步（一般叫词法分析和语法分析），我们只要实现这两步就可以了。"]}),"\n",(0,s.jsxs)(r.h3,{id:"分词词法分析",children:["分词（词法分析）",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#分词词法分析",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"我们是想增加一个关键字，acorn 有 keywords 属性，是一个正则表达式，用来做关键字拆分，所以我们重写 keywords 属性就可以。并且还要为新的关键字注册一个 token 类型。"}),"\n",(0,s.jsx)(r.p,{children:"acorn Parser 的入口方法是 parse，我们要在 parse 方法里面设置 keywords。"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'parse(program) {\n    var newKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this const class extends export import super";\n    newKeywords += " guang";// 增加一个关键字\n    this.keywords = new RegExp("^(?:" + newKeywords.replace(/ /g, "|") + ")$")\n\n    return(super.parse(program));\n}\n'})}),"\n",(0,s.jsx)(r.p,{children:"然后注册一个新的 token 类型来标识它"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'Parser.acorn.keywordTypes["guang"] = new TokenType("guang",{keyword: "guang"});\n'})}),"\n",(0,s.jsxs)(r.p,{children:["这样 acorn 就会在 parse 的时候分出 ",(0,s.jsx)(r.code,{children:"guang"})," 这个关键字"]}),"\n",(0,s.jsxs)(r.h3,{id:"组装ast语法分析",children:["组装AST（语法分析）",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#组装ast语法分析",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"在词法分析阶段，修改了正则来分出 guang 的 token 之后，就可以在语法分析的时候用它创建对应的 AST 了。"}),"\n",(0,s.jsx)(r.p,{children:"acorn 是基于递归下降的思路实现的，也就是 parse 到不同类型的节点会调用不同的 parseXxx 方法，这样递归的解析。"}),"\n",(0,s.jsx)(r.p,{children:"因为我们是在 statement 里面用，那么就要重写 parseStatement 方法，在里面组装新的 statement 节点："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"parseStatement(context, topLevel, exports) {\n  var tokenType = this.type;\n\n  if (tokenType == Parser.acorn.keywordTypes[\"guang\"]) {\n    var node = this.startNode();\n    this.next();\n    return this.finishNode({value: 'guang'},'GuangStatement');\n  }\n  else {\n    return(super.parseStatement(context, topLevel, exports));\n  }\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"this.type 是当前处理到的 token 的类型， this.next 方式是消费这个 token，我们识别出 token 的类型为 guang 的时候，就组装成一个 AST 返回。"}),"\n",(0,s.jsx)(r.p,{children:"创建 AST 节点是用 this.startNode()，返回用 guang 这个 token 来创建的 AST 节点。"}),"\n",(0,s.jsx)(r.p,{children:"如果不是我们扩展的 token，则调用父类的 parseStatement 处理。"}),"\n",(0,s.jsx)(r.p,{children:"新的关键字的 parse 已经处理完了。但是最好还是把这段解析逻辑拆成一个新的 parseXxx 的方法，这样子类也可以继承然后覆盖它。"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"parseStatement(context, topLevel, exports) {\n  var tokenType = this.type;\n\n  if (tokenType == Parser.acorn.keywordTypes[\"guang\"]) {\n    var node = this.startNode();\n    return this.parseGuangStatement(node);\n  }\n  else {\n    return(super.parseStatement(context, topLevel, exports));\n  }\n}\n\nparseGuangStatement(node) {\n    this.next();\n    return this.finishNode({value: 'guang'},'GuangStatement');\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"完整代码如下："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const acorn = require("acorn");\n\nconst Parser = acorn.Parser;\nconst TokenType = acorn.TokenType;\n\nParser.acorn.keywordTypes["guang"] = new TokenType("guang",{keyword: "guang"});\n\nfunction wordsRegexp(words) {\n  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$")\n}\n\nvar guangKeyword = function(Parser) {\n  return class extends Parser {\n    parse(program) {\n      let newKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this const class extends export import super";\n      newKeywords += " guang";\n      this.keywords = new RegExp("^(?:" + newKeywords.replace(/ /g, "|") + ")$")\n      return(super.parse(program));\n    }\n\n    parseStatement(context, topLevel, exports) {\n      var starttype = this.type;\n\n      if (starttype == Parser.acorn.keywordTypes["guang"]) {\n        var node = this.startNode();\n        return this.parseGuangStatement(node);\n      }\n      else {\n        return(super.parseStatement(context, topLevel, exports));\n      }\n    }\n\n    parseGuangStatement(node) {\n      this.next();\n      return this.finishNode({value: \'guang\'},\'GuangStatement\');//新增加的ssh语句\n    };\n  }\n}\nconst newParser = Parser.extend(guangKeyword);\n'})}),"\n",(0,s.jsx)(r.p,{children:"我们执行下试下效果"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"const newParser = Parser.extend(guangKeywordPlugin);\n\nvar program = \n`\n    guang\n    const a = 1\n`;\n\nconst ast = newParser.parse(program);\nconsole.log(ast);\n"})}),"\n",(0,s.jsx)(r.p,{children:"产生的AST如下："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"Node {\n  type: 'Program',\n  start: 0,\n  end: 27,\n  body: [\n    { value: 'guang', type: 'GuangStatement', end: 10 },\n    Node {\n      type: 'VariableDeclaration',\n      start: 15,\n      end: 26,\n      declarations: [Array],\n      kind: 'const'\n    }\n  ],\n  sourceType: 'script'\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"可以看到代码里的 guang 没有报编译错误，而是作为关键字被解析了。并且这条语句在 parse 后创建了 GuangStatement 类型的节点。"}),"\n",(0,s.jsx)(r.p,{children:"通过这个简单的例子，我们能大概理解 babel 是怎么基于 acorn 实现 typescript、jsx、flow 语法解析的了：就是通过继承和重写的方式修改了词法分析、语法分析的逻辑。"}),"\n",(0,s.jsx)(r.p,{children:"比如 Literal 扩展了 StringLiteral、NumericLiteral 等这一点，我们就可以自己实现："}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"parseLiteral (...args) {\n    const node = super.parseLiteral(...args);\n    switch(typeof node.value) {\n        case 'number':\n            node.type = 'NumericLiteral';\n            break;\n        case 'string':\n            node.type = 'StringLiteral';\n            break;\n    }\n    return  node;\n}\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"总结",children:["总结",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"这一节我们了解了 js parser 的历史，基于火狐浏览器的 JS 引擎 SpiderMonkey 的 AST 标准，制定了 espree 的标准，最早的 estree 标准的实现是 esprima，但是随着 es2015 开始一年一个版本，esprima 的迭代速度逐渐跟不上了，这时候 acorn 流行起来，因为速度更快，而且支持插件扩展，于是 espree、babel parser(babylon) 等都基于 acorn 来实现各自的 parser。虽然 estree 系列的 js parser 挺多的，但也不是全部，terser、typescript 等都是用自己的 AST。"}),"\n",(0,s.jsx)(r.p,{children:"学完这一节，我们更全面的了解了 js parser 的历史，对各种工具所用的 parser 之间的关系有了一定的了解，并且还知道了 acorn 的语法插件该怎么写。"}),"\n",(0,s.jsx)(r.p,{children:"babel parser 能不断地支持新的语法，就是通过修改词法分析、语法分析阶段的代码来实现的。"}),"\n",(0,s.jsx)(r.p,{children:"其实现在 babel parser 的代码里已经看不到 acorn 的依赖了，因为在 babel4 以后，babel 直接 fork 了 acorn 的代码来修改，而不是引入 acorn 包再通过插件扩展的方式。但是，原理还是一样的。"}),"\n",(0,s.jsxs)(r.p,{children:["（代码在",(0,s.jsx)(r.a,{href:"https://github.com/QuarkGluonPlasma/babel-plugin-exercize",target:"_blank",rel:"noopener noreferrer",children:"这里"}),"，建议 git clone 下来跑一下）"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,a.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let c=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["Babel%20%E6%8F%92%E4%BB%B6%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F6.JS%20Parser%20%E7%9A%84%E5%8E%86%E5%8F%B2.md"]={toc:[{text:"SpiderMonkey 和 estree 标准",id:"spidermonkey-和-estree-标准",depth:2},{text:"acorn",id:"acorn",depth:2},{text:"babel parser 对 estree AST 的扩展",id:"babel-parser-对-estree-ast-的扩展",depth:3},{text:"acorn 插件",id:"acorn-插件",depth:2},{text:"分词（词法分析）",id:"分词词法分析",depth:3},{text:"组装AST（语法分析）",id:"组装ast语法分析",depth:3},{text:"总结",id:"总结",depth:2}],title:"6.JS Parser 的历史",headingTitle:"6.JS Parser 的历史",frontmatter:{}}}}]);