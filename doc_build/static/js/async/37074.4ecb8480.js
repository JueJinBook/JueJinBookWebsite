"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["37074"],{669977:function(n,e,r){r.r(e),r.d(e,{default:()=>o});var s=r(552676),i=r(740453);let c=r.p+"static/image/05f51c882b395219d616128550cf4c56.cdd33cc1.png";function l(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",pre:"pre",code:"code",blockquote:"blockquote",strong:"strong",h4:"h4",ul:"ul",li:"li",img:"img"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"88图像处理和ocr",children:["88.图像处理和OCR",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#88图像处理和ocr",children:"#"})]}),"\n",(0,s.jsxs)(e.h2,{id:"133-图像处理和ocr",children:["13.3 图像处理和OCR",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#133-图像处理和ocr",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"云调用有些接口属于AI服务的范畴，比如借助于人工智能来进行智能裁剪、扫描条码/二维码、图片的高清化等图像处理和识别银行卡、营业执照、驾驶证、身份证、印刷体、驾驶证等OCR，有了这些接口我们也能在小程序里使用人工智能了。接下来我们以小程序的条码/二维码识别和识别印刷体为例来介绍一下云调用。"}),"\n",(0,s.jsxs)(e.h3,{id:"1331-图像处理",children:["13.3.1 图像处理",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1331-图像处理",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"使用开发者工具新建一个云函数，如scancode，然后在config.json里添加img.scanQRCode云调用的权限，使用npm install安装依赖之后，上传并部署所有文件（此时也会更新权限）。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'{\n  "permissions": {\n    "openapi": [\n      "img.scanQRCode"\n    ]\n  }\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["然后再在index.js里输入以下代码，注意",(0,s.jsx)(e.code,{children:"cloud.openapi.img.scanQRCode"}),"方法和",(0,s.jsx)(e.code,{children:"img.scanQRCode"}),"权限的对应写法，不然会报604100的错误。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n    env: cloud.DYNAMIC_CURRENT_ENV\n  })\nexports.main = async (event, context) => {\n  try {\n    const result = await cloud.openapi.img.scanQRCode({\n      imgUrl:\"https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/demo/qrcodetest.png\" //注意二维码必须是条码/二维码，不能是小程序码\n    })\n    return result\n    \n  } catch (err) {\n    console.log(err)\n    return err\n  }\n} \n"})}),"\n",(0,s.jsx)(e.p,{children:"调用该云函数之后，返回的result对象里包含result对象，在codeResults的data里可以得到二维码里包含的内容。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'codeResults: [{\n  data: "使用云开发来开发微信小程序可以免费。。。",\n  pos: {leftTop: {…}, rightTop: {…}, rightBottom: {…}, leftBottom: {…}},typeName: "QR_CODE"}]\nerrCode: 0\nerrMsg: "openapi.img.scanQRCode:ok"\nimgSize: {w: 260, h: 260}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"1332-ocr人工智能识别",children:["13.3.2 OCR人工智能识别",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1332-ocr人工智能识别",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"使用开发者工具新建一个云函数，如ocrprint，然后在config.json里添加ocr.printedText云调用的权限，使用npm install安装依赖之后，上传并部署所有文件（此时也会更新权限）。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'{\n  "permissions": {\n    "openapi": [\n      "ocr.printedText"\n    ]\n  }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"调用该云函数之后，返回的result对象里包含result对象，在codeResults的data里可以得到二维码里包含的内容。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n    env: cloud.DYNAMIC_CURRENT_ENV\n  })\nexports.main = async (event, context) => {\n  try {\n    const result = await cloud.openapi.ocr.printedText({\n        imgUrl: 'https://tcb-1251009918.cos.ap-guangzhou.myqcloud.com/demo/ocrprint.png'\n      })\n    console.log(result)\n    return result\n  } catch (err) {\n    console.log(err)\n    return err\n  }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"调用该云函数之后，返回的result对象里包含result对象，在的items里可以返回图片包含的文字内容。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'items: Array(4)\n0: {text: "JavaScript入门", pos: {…}}\n1: {text: "JavaScript是目前世界上最流行的编程语言之一，它也是小程序开发最重要的基础语言。要做出一个功能复杂的小程序，除了需要掌握JavaScript的基本语", pos: {…}}\n2: {text: "法，还要了解如何使用JavaScript来操作小程序(通过API接口)", pos: {…}}\n3: {text: "过API接口)。", pos: {…}}\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"1333-图像处理拓展能力",children:["13.3.3 图像处理拓展能力",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1333-图像处理拓展能力",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"图片是小程序非常重要的元素，尤其是旅游照片、社交图片、电商产品图片、相册类小程序、媒体图文等，图片的加载速度、清晰度、图片的交互、图片效果的处理以及图片加载的CDN消耗都是一个不得不需要去关注的问题。而云开发图像处理拓展能力结合云存储则可以非常有效的解决很多问题。"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"强烈建议所有有图像处理需求的用户都应该安装图像处理拓展能力"}),"，这个能力大大弥补和增强了云存储在图像处理能力，尤其是图片按照需求的规格进行缩放可以大大减少CDN的消耗以及图片的加载速度以及我们可以按照不同的业务场景使用快速缩略模板，而这一切的操作和云存储的结合都是非常实用且易用的。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"1图像处理能力介绍",children:["1、图像处理能力介绍",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1图像处理能力介绍",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"云开发图像处理能力结合的是腾讯云数据万象的图片解决方案，图像处理提供多种图像处理功能，包含智能裁剪、无损压缩、水印、格式转换等，图像处理拓展能力所包含的功能非常丰富，使用如下图像处理的费用是按量计费的，计费周期为月，10TB以内免费，超出10TB，按0.025元/GB 来计费，省事而便宜："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"缩放：等比缩放、设定目标宽高缩放等多种方式；"}),"\n",(0,s.jsx)(e.li,{children:"裁剪：普通裁剪、缩放裁剪、内切圆、人脸智能裁剪；"}),"\n",(0,s.jsx)(e.li,{children:"旋转：普通旋转、自适应旋转；"}),"\n",(0,s.jsx)(e.li,{children:"格式转换：jpg、bmp、gif、png、webp、yjpeg格式转换，gif 格式优化，渐进显示功能；"}),"\n",(0,s.jsx)(e.li,{children:"质量变换：针对 JPG 和 WEBP 图片进行质量变换；"}),"\n",(0,s.jsx)(e.li,{children:"高斯模糊：对图片进行模糊处理；"}),"\n",(0,s.jsx)(e.li,{children:"锐化：对图片进行锐化处理；"}),"\n",(0,s.jsx)(e.li,{children:"图片水印：提供图片水印处理功能；"}),"\n",(0,s.jsx)(e.li,{children:"文字水印：提供实时文字水印处理功能；"}),"\n",(0,s.jsx)(e.li,{children:"获取图片基本信息：查询图片基本信息，包括格式、长、宽等；"}),"\n",(0,s.jsx)(e.li,{children:"获取图片EXIF：查询图片 EXIF 信息，如照片的拍摄参数、缩略图等；"}),"\n",(0,s.jsx)(e.li,{children:"获取图片主色调：获取图片主色调信息；"}),"\n",(0,s.jsx)(e.li,{children:"去除元信息：去除图片元信息，减小图像体积；"}),"\n",(0,s.jsx)(e.li,{children:"快速缩略模板：快速实现图片格式转换、缩略、剪裁等功能，生成缩略图；"}),"\n",(0,s.jsx)(e.li,{children:"管道操作符：对图片按顺序进行多种处理"}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["当我们在",(0,s.jsx)(e.a,{href:"https://console.cloud.tencent.com/tcb/add",target:"_blank",rel:"noopener noreferrer",children:"腾讯云云开发网页控制台"}),"(注意要使用微信公众号的方式登录)添加完图像处理的拓展能力之后，我们可以在腾讯云的",(0,s.jsx)(e.a,{href:"https://console.cloud.tencent.com/ci/bucket",target:"_blank",rel:"noopener noreferrer",children:"数据万象存储桶"}),"里看到云开发的云存储，而关于图像处理能力的深入使用，也可以参考腾讯云",(0,s.jsx)(e.a,{href:"https://cloud.tencent.com/document/product/460/36540",target:"_blank",rel:"noopener noreferrer",children:"数据万象的技术文档"}),"。"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"在小程序云开发里使用图像处理能力的方法有三种："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"图像地址的拼接，只需要在图片的下载地址url里拼接一些简单的参数（API管道操作符），就能够使用到图像处理的能力，非常方便易用，这个不会把图像处理的结果存储到云存储，不会占用云存储的空间；在获取图片基本信息、获取图片 EXIF、获取图片主色调等方面非常方便；"}),"\n",(0,s.jsx)(e.li,{children:"在前端（小程序端）做持久化图像处理，支持有结果图输出的处理操作，也就是我们可以把缩放、裁剪、格式转换、质量变换等处理之后的图片存储到云存储方便以后使用；"}),"\n",(0,s.jsx)(e.li,{children:"在云函数端做持久化图像处理，支持有结果图输出的处理操作"}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"1图像地址的拼接",children:["1、图像地址的拼接",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1图像地址的拼接",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在了解图像处理能力之前，我们需要先了解一下云存储文件的fileID、下载地址以及下载地址携带的权限参数sign（图像处理能力的参数拼接就是基于下载地址的），如下图所示：\n",(0,s.jsx)("img",{src:c,alt:"云存储里图片的信息"})]}),"\n",(0,s.jsx)(e.p,{children:"在安装了图像处理拓展能力的情况下，我们可以直接拿云存储的下载地址进行拼接，拼接之后的链接我们既可以在小程序里使用，也可以用于图床，比如原始图片下载地址为："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"https://786c-xly-xrlur-1300446086.tcb.qcloud.la/hehe.jpg?sign=b8ac757538940ead8eed4786449b4cd7&t=1591752049\n"})}),"\n",(0,s.jsxs)(e.p,{children:["而相关的图像处理能力的拼接案例如下，具体的操作可以看技术文档，实际的效果，可以复制粘贴链接到浏览器或小程序里体验（换成自己的地址），注意拼接方式就是在下载地址后面加了一个",(0,s.jsx)(e.code,{children:"&imageMogr2/thumbnail/!20p"}),"（注意这里由于已经有了一个sign参数，所以拼接时用的是",(0,s.jsx)(e.code,{children:"$"}),"，不能写成",(0,s.jsx)(e.code,{children:"?"}),"，否则不会生效），直接就可以啦，非常易用："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"//将图片等比例缩小到原来的20%\nhttps://786c-xly-xrlur-1300446086.tcb.qcloud.la/hehe.jpg?sign=b8ac757538940ead8eed4786449b4cd7&t=1591752049&imageMogr2/thumbnail/!20p\n"})}),"\n",(0,s.jsxs)(e.p,{children:["后面为了方便，我们将",(0,s.jsx)(e.code,{children:"https://786c-xly-xrlur-1300446086.tcb.qcloud.la/hehe.jpg?sign=b8ac757538940ead8eed4786449b4cd7&t=1591752049"}),"简写为download_url:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"//缩放宽度，高度不变，下面案例为宽度为原图50%，高度不变\ndownload_url&imageMogr2/thumbnail/!50px\n\n//缩放高度，宽度不变，下面案例为高度为原图50%，宽度不变\ndownload_url&imageMogr2/thumbnail/!x50p\n\n//指定目标图片的宽度（单位为px），高度等比压缩，注意下面的是x，不是px，p与x在拼接里代表着不同的意思\ndownload_url&imageMogr2/thumbnail/640x\n\n//指定目标图片的高度（单位为px），宽度等比压缩：\ndownload_url&imageMogr2/thumbnail/x355\n\n//限定缩略图的宽度和高度的最大值分别为 Width 和 Height，进行等比缩放\ndownload_url&imageMogr2/thumbnail/640x355\n\n//限定缩略图的宽度和高度的最小值分别为 Width 和 Height，进行等比缩放\ndownload_url&imageMogr2/thumbnail/640x355r\n\n//忽略原图宽高比例，指定图片宽度为 Width，高度为 Height ，强行缩放图片，可能导致目标图片变形\ndownload_url&imageMogr2/thumbnail/640x355!\n\n//等比缩放图片，缩放后的图像，总像素数量不超过 Area\ndownload_url&imageMogr2/thumbnail/150000@\n\n//取半径为300，进行内切圆裁剪\ndownload_url&imageMogr2/iradius/300\n\n//取半径为100px，进行圆角裁剪\ndownload_url&imageMogr2/rradius/100\n\n//顺时针旋转90度\ndownload_url&imageMogr2/rotate/90\n\n//将jpg格式的原图片转换为 png 格式\ndownload_url&imageMogr2/format/png\n\n//模糊半径取8，sigma 值取5，进行高斯模糊处理\ndownload_url&imageMogr2/blur/8x5\n\n//获取图片的基础信息，返回的是json格式，我们可以使用https请求来查看图片的format格式,width宽度、height高度，size大小，photo_rgb主色调\ndownload_url&imageInfo\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"2小程序端持久化图像处理",children:["2、小程序端持久化图像处理",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2小程序端持久化图像处理",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"当我们希望把缩放、裁剪、旋转、格式变换等图像处理的结果（也就是处理之后的图片）存储到云存储，这个就叫做持久化图像处理，在安装了图像处理能力之后，我们也可以在小程序端做图像处理。"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"当用户把原始图片上传到小程序端时，我们需要对该图片进行一定的处理，比如图片过大就对图片进行裁剪缩小；比如图片需要进行一定的高斯模糊、旋转等处理，这些虽然在图像处理之前，也是可以使用js来做的，但是小程序端图像处理的效果并没有那么好或者过于复杂，使用图像处理的拓展能力就非常实用了。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"在小程序端构建图像拓展依赖"})}),"\n",(0,s.jsxs)(e.p,{children:["首先在开发者工具小程序根目录（一般为miniprogram)，右键“",(0,s.jsx)(e.strong,{children:"在终端中打开"}),"”，然后在终端里输入以下代码，也就是在小程序端安装图像拓展依赖，安装完时，我们就可以在miniprogram文件夹下看到node_modules："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-shell",children:"npm install --save @cloudbase/extension-ci-wxmp@latest\n"})}),"\n",(0,s.jsxs)(e.p,{children:["然后点击开发者工具工具栏里的",(0,s.jsx)(e.strong,{children:"工具"}),"-",(0,s.jsx)(e.strong,{children:"构建npm"}),"，构建成功之后，就可以在miniprogram文件夹下看到minprogram_npm里有@cloubase文件夹，里面有extension-ci-wxmp，说明图像拓展依赖就构建完成。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"在小程序端进行图像处理"})}),"\n",(0,s.jsx)(e.p,{children:"使用开发者工具新建一个imgprocess的页面，然后在imgprocess.wmxl里输入如下代码，我们新建一个button按钮："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:'<button bindtap="imgprocess">处理图片</button>\n'})}),"\n",(0,s.jsx)(e.p,{children:"然后再在imgprocess.js的Page()函数的上面（外面）引入图像处理依赖，代码如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'const extCi = require("./../../miniprogram_npm/@cloudbase/extension-ci-wxmp");\n'})}),"\n",(0,s.jsxs)(e.p,{children:["然后再在imgprocess.js的Page()函数的里面写一个imgprocess的事件处理函数，点击button之后会先执行readFile()函数，也就是获取图片上传到小程序临时文件的结果（是一个对象），然后再调用imageProcess()函数，这个函数会对图片进行处理，图片会保存为",(0,s.jsx)(e.code,{children:"tcbdemo.jpg"}),"，而处理之后的图片会保存为image_process文件夹下的tcbdemo.png，相当于保存了两张图片："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'async imgprocess(){\n  const readFile = async function() {\n    let res = await new Promise(resolve=>{\n        wx.chooseImage({\n            success: function(res) {\n                let filePath = res.tempFilePaths[0]\n                let fm = wx.getFileSystemManager()\n                fm.readFile({\n                    filePath,\n                    success(res){\n                        resolve(res)\n                    }\n                })\n            }    \n        })\n    })\n    return res\n  }\n  \n  let fileResult = await readFile(); //获取图像的临时文件上传结果\n  const fileContent = fileResult.data  //获取上传到临时文件的图像，为Uint8Array或Buffer格式\n\n  async function imageProcess() {\n    extCi.invoke({\n      action: "ImageProcess",\n      cloudPath: "tcbdemo.jpg", // 图像在云存储中的路径，有点类似于wx.cloud.uploadFile接口里的cloudPath，上传的文件会保存为云存储根目录下的hehe.jpg\n      operations: {\n        rules: [\n          {\n            fileid: "/image_process/tcbdemo.png", //将图片存储到云存储目录下的image_process文件夹里，也就是我们用image_process存储处理之后的图片\n            rule: "imageMogr2/format/png", // 处理样式参数，我们可以在这里写图像处理的参数拼接\n          }\n        ]\n      },\n      fileContent\n    }).then(res => {\n        console.log(res);\n    }).catch(err => {\n        console.log(err);\n    })\n  }\n  await imageProcess()\n}\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["可能你的开发者工具会报以下错误：",(0,s.jsx)(e.code,{children:"https://786c-xly-xrlur-1300446086.pic.ap-shanghai.myqcloud.com 不在以下 request 合法域名列表中，请参考文档：https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html"}),"，这个要按照参考文档将链接加入到合法域名当中，不然不会生成图片；"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"action"}),"是操作类型，它的值可以为：ImageProcess图像处理，DetectType图片安全审核（后面会介绍），WaterMark图片忙水印、DetectLabel图像标签等。"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"operations"}),"是图像处理参数，尤其是rule和我们之前url的拼接是一致的，比如",(0,s.jsx)(e.code,{children:"imageMogr2/blur/8x5"}),"、",(0,s.jsx)(e.code,{children:"imageMogr2/rradius/100"}),"等参数仍然有效。"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"上面函数里的fileContent不是必要的，也就是说我们可以不在小程序端上传图片，而是直接修改云存储里面已有的图片，并将图像处理后的照片保存，这种情况代码可以写成如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'async imgprocess(){\n  extCi.invoke({\n    action: "ImageProcess",\n    cloudPath: "tcbdemo.jpg", // 会直接处理这张图片\n    operations: {\n      rules: [\n        {\n          fileid: "/image_process/tcbdemo.png",\n          rule: "imageMogr2/format/png", // 处理样式参数，与下载时处理图像在url拼接的参数一致\n        }\n      ]\n    },\n  }).then(res => {\n      console.log(res);\n  }).catch(err => {\n      console.log(err);\n  })\n}\n'})}),"\n",(0,s.jsxs)(e.h4,{id:"3云函数端持久化图像处理",children:["3、云函数端持久化图像处理",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3云函数端持久化图像处理",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在云函数端的处理和小程序端的处理，使用的方法大体上是一致的，不过云函数的处理图片的场景和小程序端处理图片的场景会有所不同，小程序端主要用于当用于上传图片时就对图片进行处理，云函数则主要用于从第三方下载图片之后进行处理或者对云存储里面的图片进行处理（比如使用定时触发器对云存储里指定文件夹的图片进行处理）。不建议把图片传输到云函数端再来对图片进行处理。"}),"\n",(0,s.jsxs)(e.p,{children:["使用开发者工具新建一个imgprocess的云函数，然后在package.json里添加latest最新版的",(0,s.jsx)(e.code,{children:"@cloudbase/extension-ci"}),"，并右键云函数目录选择在终端中打开输入命令npm install安装依赖："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'"dependencies": {\n  "wx-server-sdk": "latest",\n  "@cloudbase/extension-ci": "latest"\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"然后再在index.js里输入以下代码，代码的具体含义可以参考小程序端的内容讲解："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n    env: cloud.DYNAMIC_CURRENT_ENV\n  })\nconst extCi = require('@cloudbase/extension-ci')\ncloud.registerExtension(extCi)\n\nasync function process() {\n  try {\n    const opts = {\n      rules: [\n        {\n          fileid: '/image_process/tcbdemo.jpeg',\n          rule: 'imageMogr2/format/png' \n        }\n      ]\n    }\n    const res = await app.invokeExtension('CloudInfinite', {\n      action: 'ImageProcess',\n      cloudPath: \"tcbdemo.jpg\", \n      fileContent, \n      operations: opts\n    })\n    console.log(res)\n    return res\n  } catch (err) {\n    console.log(err)\n  }\n}\n"})})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}let o=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F88.%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%92%8COCR.md"]={toc:[{text:"13.3 图像处理和OCR",id:"133-图像处理和ocr",depth:2},{text:"13.3.1 图像处理",id:"1331-图像处理",depth:3},{text:"13.3.2 OCR人工智能识别",id:"1332-ocr人工智能识别",depth:3},{text:"13.3.3 图像处理拓展能力",id:"1333-图像处理拓展能力",depth:3},{text:"1、图像处理能力介绍",id:"1图像处理能力介绍",depth:4},{text:"1、图像地址的拼接",id:"1图像地址的拼接",depth:4},{text:"2、小程序端持久化图像处理",id:"2小程序端持久化图像处理",depth:4},{text:"3、云函数端持久化图像处理",id:"3云函数端持久化图像处理",depth:4}],title:"88.图像处理和OCR",headingTitle:"88.图像处理和OCR",frontmatter:{}}}}]);