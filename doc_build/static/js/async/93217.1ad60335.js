"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["93217"],{566977:function(e,s,n){n.r(s),n.d(s,{default:()=>h});var d=n(552676),r=n(740453);function i(e){let s=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",code:"code",pre:"pre",ol:"ol",li:"li",strong:"strong"},(0,r.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(s.h1,{id:"14原理-4雷厉风行--管道",children:["14原理 4：雷厉风行 —— 管道",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#14原理-4雷厉风行--管道",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"大多数同学一直以来对 Redis 管道有一个误解，他们以为这是 Redis 服务器提供的一种特别的技术，有了这种技术就可以加速 Redis 的存取效率。但是实际上 Redis 管道 (Pipeline) 本身并不是 Redis 服务器直接提供的技术，这个技术本质上是由客户端提供的，跟服务器没有什么直接的关系。下面我们对这块做一个深入探究。"}),"\n",(0,d.jsxs)(s.h2,{id:"redis-的消息交互",children:["Redis 的消息交互",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#redis-的消息交互",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"当我们使用客户端对 Redis 进行一次操作时，如下图所示，客户端将请求传送给服务器，服务器处理完毕后，再将响应回复给客户端。这要花费一个网络数据包来回的时间。"}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/7/10/1648204d4930cc08?w=718&h=164&f=png&s=13399",alt:""})}),"\n",(0,d.jsx)(s.p,{children:"如果连续执行多条指令，那就会花费多个网络数据包来回的时间。如下图所示。"}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/7/10/1648205b22725764?w=687&h=218&f=png&s=16830",alt:""})}),"\n",(0,d.jsx)(s.p,{children:"回到客户端代码层面，客户端是经历了写-读-写-读四个操作才完整地执行了两条指令。"}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/7/10/164820734e963482?w=722&h=83&f=png&s=7258",alt:""})}),"\n",(0,d.jsx)(s.p,{children:"现在如果我们调整读写顺序，改成写—写-读-读，这两个指令同样可以正常完成。"}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/7/10/16482078e3ea3ece?w=745&h=113&f=png&s=7829",alt:""})}),"\n",(0,d.jsx)(s.p,{children:"两个连续的写操作和两个连续的读操作总共只会花费一次网络来回，就好比连续的 write 操作合并了，连续的 read 操作也合并了一样。"}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/7/10/1648209937f6d508?w=732&h=207&f=png&s=16994",alt:""})}),"\n",(0,d.jsx)(s.p,{children:"这便是管道操作的本质，服务器根本没有任何区别对待，还是收到一条消息，执行一条消息，回复一条消息的正常的流程。客户端通过对管道中的指令列表改变读写顺序就可以大幅节省 IO 时间。管道中指令越多，效果越好。"}),"\n",(0,d.jsxs)(s.h2,{id:"管道压力测试",children:["管道压力测试",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#管道压力测试",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"接下来我们实践一下管道的力量。"}),"\n",(0,d.jsxs)(s.p,{children:["Redis 自带了一个压力测试工具",(0,d.jsx)(s.code,{children:"redis-benchmark"}),"，使用这个工具就可以进行管道测试。"]}),"\n",(0,d.jsx)(s.p,{children:"首先我们对一个普通的 set 指令进行压测，QPS 大约 5w/s。"}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{children:"> redis-benchmark -t set -q\nSET: 51975.05 requests per second\n"})}),"\n",(0,d.jsxs)(s.p,{children:["我们加入管道选项",(0,d.jsx)(s.code,{children:"-P"}),"参数，它表示单个管道内并行的请求数量，看下面",(0,d.jsx)(s.code,{children:"P=2"}),"，QPS 达到了 9w/s。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{children:"> redis-benchmark -t set -P 2 -q\nSET: 91240.88 requests per second\n"})}),"\n",(0,d.jsxs)(s.p,{children:["再看看",(0,d.jsx)(s.code,{children:"P=3"}),"，QPS 达到了 10w/s。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{children:"SET: 102354.15 requests per second\n"})}),"\n",(0,d.jsx)(s.p,{children:"但如果再继续提升 P 参数，发现 QPS 已经上不去了。这是为什么呢？"}),"\n",(0,d.jsx)(s.p,{children:"因为这里 CPU 处理能力已经达到了瓶颈，Redis 的单线程 CPU 已经飙到了 100%，所以无法再继续提升了。"}),"\n",(0,d.jsxs)(s.h2,{id:"深入理解管道本质",children:["深入理解管道本质",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#深入理解管道本质",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"接下来我们深入分析一个请求交互的流程，真实的情况是它很复杂，因为要经过网络协议栈，这个就得深入内核了。"}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/8/28/1657e7a5a0a24ce3?w=1850&h=894&f=png&s=194143",alt:""})}),"\n",(0,d.jsx)(s.p,{children:"上图就是一个完整的请求交互流程图。我用文字来仔细描述一遍："}),"\n",(0,d.jsxs)(s.ol,{children:["\n",(0,d.jsxs)(s.li,{children:["客户端进程调用",(0,d.jsx)(s.code,{children:"write"}),"将消息写到操作系统内核为套接字分配的发送缓冲",(0,d.jsx)(s.code,{children:"send buffer"}),"。"]}),"\n",(0,d.jsx)(s.li,{children:"客户端操作系统内核将发送缓冲的内容发送到网卡，网卡硬件将数据通过「网际路由」送到服务器的网卡。"}),"\n",(0,d.jsxs)(s.li,{children:["服务器操作系统内核将网卡的数据放到内核为套接字分配的接收缓冲",(0,d.jsx)(s.code,{children:"recv buffer"}),"。"]}),"\n",(0,d.jsxs)(s.li,{children:["服务器进程调用",(0,d.jsx)(s.code,{children:"read"}),"从接收缓冲中取出消息进行处理。"]}),"\n",(0,d.jsxs)(s.li,{children:["服务器进程调用",(0,d.jsx)(s.code,{children:"write"}),"将响应消息写到内核为套接字分配的发送缓冲",(0,d.jsx)(s.code,{children:"send buffer"}),"。"]}),"\n",(0,d.jsx)(s.li,{children:"服务器操作系统内核将发送缓冲的内容发送到网卡，网卡硬件将数据通过「网际路由」送到客户端的网卡。"}),"\n",(0,d.jsxs)(s.li,{children:["客户端操作系统内核将网卡的数据放到内核为套接字分配的接收缓冲",(0,d.jsx)(s.code,{children:"recv buffer"}),"。"]}),"\n",(0,d.jsxs)(s.li,{children:["客户端进程调用",(0,d.jsx)(s.code,{children:"read"}),"从接收缓冲中取出消息返回给上层业务逻辑进行处理。"]}),"\n",(0,d.jsx)(s.li,{children:"结束。"}),"\n"]}),"\n",(0,d.jsx)(s.p,{children:"其中步骤 5~8 和 1~4 是一样的，只不过方向是反过来的，一个是请求，一个是响应。"}),"\n",(0,d.jsxs)(s.p,{children:["我们开始以为 ",(0,d.jsx)(s.code,{children:"write"})," 操作是要等到对方收到消息才会返回，但实际上不是这样的。",(0,d.jsx)(s.code,{children:"write"})," 操作只负责将数据写到本地操作系统内核的发送缓冲然后就返回了。剩下的事交给操作系统内核异步将数据送到目标机器。但是如果发送缓冲满了，那么就需要等待缓冲空出空闲空间来，这个就是写操作 IO 操作的真正耗时。"]}),"\n",(0,d.jsxs)(s.p,{children:["我们开始以为 ",(0,d.jsx)(s.code,{children:"read"})," 操作是从目标机器拉取数据，但实际上不是这样的。",(0,d.jsx)(s.code,{children:"read"})," 操作只负责将数据从本地操作系统内核的接收缓冲中取出来就了事了。但是如果缓冲是空的，那么就需要等待数据到来，这个就是读操作 IO 操作的真正耗时。"]}),"\n",(0,d.jsxs)(s.p,{children:["所以对于",(0,d.jsx)(s.code,{children:"value = redis.get(key)"}),"这样一个简单的请求来说，",(0,d.jsx)(s.code,{children:"write"}),"操作几乎没有耗时，直接写到发送缓冲就返回，而",(0,d.jsx)(s.code,{children:"read"}),"就会比较耗时了，因为它要等待消息经过网络路由到目标机器处理后的响应消息,再回送到当前的内核读缓冲才可以返回。",(0,d.jsx)(s.strong,{children:"这才是一个网络来回的真正开销"}),"。"]}),"\n",(0,d.jsxs)(s.p,{children:["而对于管道来说，连续的",(0,d.jsx)(s.code,{children:"write"}),"操作根本就没有耗时，之后第一个",(0,d.jsx)(s.code,{children:"read"}),"操作会等待一个网络的来回开销，然后所有的响应消息就都已经回送到内核的读缓冲了，后续的 ",(0,d.jsx)(s.code,{children:"read"})," 操作直接就可以从缓冲拿到结果，瞬间就返回了。"]}),"\n",(0,d.jsxs)(s.h2,{id:"小结",children:["小结",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"这就是管道的本质了，它并不是服务器的什么特性，而是客户端通过改变了读写的顺序带来的性能的巨大提升。"})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,r.ah)(),e.components);return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(i,{...e})}):i(e)}let h=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["Redis%20%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F14%E5%8E%9F%E7%90%86%204%EF%BC%9A%E9%9B%B7%E5%8E%89%E9%A3%8E%E8%A1%8C%20%E2%80%94%E2%80%94%20%E7%AE%A1%E9%81%93.md"]={toc:[{text:"Redis 的消息交互",id:"redis-的消息交互",depth:2},{text:"管道压力测试",id:"管道压力测试",depth:2},{text:"深入理解管道本质",id:"深入理解管道本质",depth:2},{text:"小结",id:"小结",depth:2}],title:"14原理 4：雷厉风行 —— 管道",headingTitle:"14原理 4：雷厉风行 —— 管道",frontmatter:{}}}}]);