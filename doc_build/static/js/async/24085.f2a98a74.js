"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["24085"],{296423:function(n,e,r){r.r(e),r.d(e,{default:()=>v});var s=r(552676),c=r(740453);let i=r.p+"static/image/a448f9fef0056c53752e8ad65f97771e.2aaba2fc.webp",d=r.p+"static/image/db54cc50f200bb830a471a1f49a9d7eb.97e5d253.webp",t=r.p+"static/image/2774cbdb9fd4ebc860e086c505d466b6.27b99b98.webp",l=r.p+"static/image/30c50e836bf83314b3364567c447b970.ddc2a448.webp",h=r.p+"static/image/daedc4f7c6277ed2b81d7f4b02ea026b.a0c75f52.webp",a=r.p+"static/image/832c3076a08e0fcdaccd9750a0deabeb.d9eac600.webp",x=r.p+"static/image/fa9318da3f071a28f05d9826af63919a.3b5d4ecc.webp",o=r.p+"static/image/9d5346226135973bf128e2a53c91cad0.6aa016bf.webp",j=r.p+"static/image/f09a5f6f52afc98ad4803925012b941b.183cf1cb.webp",p=r.p+"static/image/5251928094abc2cdd7d2be975739e341.a43ee26e.webp",g=r.p+"static/image/ecfad8ad4d908d2e3269135bec1d7f1e.f49b4367.webp",m=r.p+"static/image/0dd21ac6f24af009c9b3fde68494b834.b01d5c1f.webp",b=r.p+"static/image/618e7239a297f9f24f9219b9e0fb2f91.b1f36f9d.webp",f=r.p+"static/image/7f1a2be78f351f2a1a2c38c031e6c862.e81b5843.webp",u=r.p+"static/image/a7ceadadc94c771092e0084b66f7e018.6819d374.webp",E=r.p+"static/image/16c5bd3588ac01bf229daa8b1df89c3e.f5eeb45a.webp";function w(n){let e=Object.assign({p:"p",strong:"strong",img:"img",h2:"h2",a:"a",h3:"h3",ul:"ul",li:"li",pre:"pre",code:"code",br:"br"},(0,c.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["到此为止的话，我们的基础项目其实已经有一个基本的雏形了。接下来就是完成整个工程的构建和部署了，在本章节主要会将之前的内容进行发布和部署，相关的依赖包也会发布到内部的私有化",(0,s.jsx)(e.strong,{children:"NPM"}),"托管平台。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Verdaccio"}),"\xa0是一个轻量级的、可自托管的\xa0",(0,s.jsx)(e.strong,{children:"npm 仓库管理器"}),"。它允许您在本地环境中搭建",(0,s.jsx)(e.strong,{children:"私有的 npm 仓库"}),"，用于存储和发布自己的\xa0",(0,s.jsx)(e.strong,{children:"JavaScript包"}),"，如下图所示："]}),"\n",(0,s.jsxs)(e.p,{children:["在私有化的",(0,s.jsx)(e.strong,{children:"npm"}),"平台中，我发布了",(0,s.jsx)(e.strong,{children:"packages"}),"内相关的依赖包，其目的是为了让其能够被复用，主要目的是为提供远程物料构建",(0,s.jsx)(e.strong,{children:"Devops"}),"流程而准备的。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Vercel"}),"\xa0是一个用于托管静态网站和部署\xa0",(0,s.jsx)(e.strong,{children:"Serverless"}),"\xa0函数的云平台。它提供了一个简单而强大的方式来构建、部署和扩展\xa0",(0,s.jsx)(e.strong,{children:"Web 应用程序"}),"。我们可以",(0,s.jsx)(e.strong,{children:"Vercel"}),"来简单的配置我们的",(0,s.jsx)(e.strong,{children:"Github Action"}),"的发布流程。"]}),"\n",(0,s.jsx)(e.p,{children:"如下图所示："}),"\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.strong,{children:"Vercel"}),"中导入当前的代码仓库和部署分支，完成依赖安装和构建产物的路径后即可快速的来完成我们前端工程的部署。在这个环节需要配置好包管理器的依赖安装命令、当前目录的根路径、目标产物的地址、构建项目的命令、对应构建的分支等配置信息，在后面会仔细的介绍。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"发布依赖",children:["发布依赖",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#发布依赖",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在这一小节中，会将整个",(0,s.jsx)(e.strong,{children:"package"}),"当中的通用依赖发布到内部私有平台当中。"]}),"\n",(0,s.jsx)(e.p,{children:"整体的链路如下："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"安装verdaccio",children:["安装Verdaccio",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#安装verdaccio",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Verdaccio"}),"的安装有以下几种"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Nodejs CLI"}),"：",(0,s.jsx)(e.strong,{children:"Verdaccio"}),"本身也是一个集成依赖，可以通过",(0,s.jsx)(e.strong,{children:"Nodejs"}),"的包管理工具进行安装，如下代码所示，通过",(0,s.jsx)(e.strong,{children:"npm"}),"、",(0,s.jsx)(e.strong,{children:"pnpm"}),"、",(0,s.jsx)(e.strong,{children:"yarn"}),"等包管理工具可以直接安装",(0,s.jsx)(e.strong,{children:"verdaccio"}),"，后续通过",(0,s.jsx)(e.strong,{children:"verdaccio"}),"\xa0",(0,s.jsx)(e.strong,{children:"cli"}),"命令启动即可。"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"# 44.项目进阶：构建前端工程\nnpm install --location=global verdaccio\n\n# yarn安装\nyarn global add verdaccio\n\n# ponpm 安装\npnpm install -g verdaccio\n\n# shell 执行\nverdaccio\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Docker"}),"：通过",(0,s.jsx)(e.strong,{children:"Docker Image"}),"的方式进行安装，大多数情况下，默认配置就足够了，执行以下命令即可完成",(0,s.jsx)(e.strong,{children:"Docker Image"}),"的安装和启动。"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"# docker pull\ndocker pull verdaccio\n# started\ndocker run -it --rm --name verdaccio -p 4873:4873 verdaccio/verdaccio\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"启动verdaccio",children:["启动Verdaccio",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#启动verdaccio",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["使用",(0,s.jsx)(e.strong,{children:"npm"}),"安装的方式后，直接在sehll命令行执行全局",(0,s.jsx)(e.strong,{children:"verdaccio"}),"命令，此时就可以看到服务启动的日志信息了。"]}),"\n",(0,s.jsx)(e.p,{children:"如下图所示："}),"\n",(0,s.jsxs)(e.p,{children:["根据对应的日志信息，在浏览器打开",(0,s.jsx)(e.strong,{children:"4873"}),"的端口地址，打开本地浏览器访问**",(0,s.jsx)(e.a,{href:"http://localhost:4873**%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E8%83%BD%E5%A4%9F%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%89%93%E5%BC%80%E5%88%9A%E6%89%8D%E5%AE%89%E8%A3%85%E7%9A%84**Verdaccio**%E5%B9%B3%E5%8F%B0%E4%BA%86%E3%80%82",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:4873**的时候，就能够在本地打开刚才安装的**Verdaccio**平台了。"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)("img",{src:m,alt:""}),"如果你想后台常驻，可以全局安装使用pm2来完成启动，具体可以查阅",(0,s.jsx)(e.strong,{children:"pm2"}),"的相关文档，如下shell所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"pm2 start verdaccio\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"添加用户",children:["添加用户",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#添加用户",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["当启动",(0,s.jsx)(e.strong,{children:"verdaccio"}),"的时候，此时我们还没有账户，因此需要通过",(0,s.jsx)(e.strong,{children:"npm"}),"来添加一个用户账号，如下命令所示:"]}),"\n",(0,s.jsxs)(e.p,{children:["使用",(0,s.jsx)(e.strong,{children:"npm addUser"}),"命令指定",(0,s.jsx)(e.strong,{children:"registry"}),"可以为我们的私有平台添加一个用户，执行命令后会依次让你添加用户，密码和邮箱等用户信息，按照提示键入完成后，即可前往我们的私有平台登录。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"➜  ~ npm adduser --registry http://localhost:4873/\nnpm notice Log in on http://localhost:4873/\nUsername: test\nEmail: (this IS public) xxxxxxxx@163.com\nLogged in on http://localhost:4873/.\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"发布包",children:["发布包",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#发布包",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"npm"}),"的发布流程很多同学应该都知道怎么操作，在这里推荐使用nrm来进行管理，具体的操作可以前往nrm的下载地址查看：",(0,s.jsx)(e.a,{href:"https://www.npmjs.com/package/nrm",target:"_blank",rel:"noopener noreferrer",children:"https://www.npmjs.com/package/nrm"}),"。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"# 安装nrm\nnpm install -g nrm\n\n# 添加huos源\nnrm add huos http://localhost:4873/\n\n# 切换源\nnrm use huos\n\n# 完毕\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["在对应",(0,s.jsx)(e.strong,{children:"packages"}),"的包目录下依次执行如下命令："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"# 构建\npnpm run build\n\n# 发布\n\npnpm publish --no-git-checks\n"})}),"\n",(0,s.jsx)(e.p,{children:"先执行构建命令，然后执行发布命令。当出现如下图所示的npm notice后表示当前的包发布成功。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"如下图所示："}),"\n",(0,s.jsxs)(e.p,{children:["此时私有化平台的 ",(0,s.jsx)(e.strong,{children:"@huos/core"}),"已经更新成为1.0.1版本，此时表明我们的包已经发布完成，后续就可以通过",(0,s.jsx)(e.strong,{children:"npm install"}),"进行使用。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["需要注意的是，如果提示没有权限，此时需要执行",(0,s.jsx)(e.strong,{children:"pnpm login"}),"进行登录，登录的方式与",(0,s.jsx)(e.strong,{children:"npm"}),"平台相同，账号和密码是刚才使用",(0,s.jsx)(e.strong,{children:"npm addUser"}),"添加的用户信息。"]}),"\n",(0,s.jsxs)(e.h2,{id:"构建前端",children:["构建前端",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#构建前端",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["针对",(0,s.jsx)(e.strong,{children:"monorepo"}),"的构建之前也提到过了使用",(0,s.jsx)(e.strong,{children:"tubro"}),"\xa0+\xa0",(0,s.jsx)(e.strong,{children:"pnpm workspace"}),"的方式来进行的。但是在真实体验的过程中，我将其切换为了",(0,s.jsx)(e.strong,{children:"nx"}),"来进行管理。两者在使用层面上并没有太大的区别，配置方法几乎一摸一样，而且相互有提供转换配置的，",(0,s.jsx)(e.strong,{children:"Nx"}),"提供了项目管理、任务自动化、代码生成和依赖分析等功能更细致一些，因此我将",(0,s.jsx)(e.strong,{children:"tubro"}),"切换为了",(0,s.jsx)(e.strong,{children:"nx"}),"。"]}),"\n",(0,s.jsxs)(e.h3,{id:"安装nx",children:["安装Nx",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#安装nx",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["首先通过",(0,s.jsx)(e.strong,{children:"pnpm"}),"命令全局安装",(0,s.jsx)(e.strong,{children:"Nx CLI"}),"，如下代码所示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"pnpm add nx -wD\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"配置nx",children:["配置Nx",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置nx",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["如下代码配置文件所示",(0,s.jsx)(e.br,{}),"\n","通过在根目录新建好",(0,s.jsx)(e.strong,{children:"nx.json"}),"文件，"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'{\n  "targetDefaults": {\n    "build": {\n      "cache": true,\n      "dependsOn": ["^build"]\n    },\n    "start": {\n      "dependsOn": ["^build"]\n    },\n    "test": {\n      "cache": true\n    },\n    "lint": {\n      "cache": true\n    }\n  },\n  "affected": {\n    "defaultBase": "next"\n  },\n  "nxCloudAccessToken": "token******"\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["上面的配置文件，只需要注意",(0,s.jsx)(e.strong,{children:"build"}),"和",(0,s.jsx)(e.strong,{children:"start"}),"的",(0,s.jsx)(e.strong,{children:"dependsOn"}),"了，这个配置表示",(0,s.jsx)(e.strong,{children:"nx"}),"当前执行",(0,s.jsx)(e.strong,{children:"start"}),"和",(0,s.jsx)(e.strong,{children:"build"}),"命令时，会对他们依赖的本地包进行预构建。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'"build": {\n      "cache": true,\n      "dependsOn": ["^build"]\n    },\n    "start": {\n      "dependsOn": ["^build"]\n    },\n'})}),"\n",(0,s.jsxs)(e.h3,{id:"shell",children:["Shell",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#shell",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["创建",(0,s.jsx)(e.strong,{children:"Nx"}),"的配置文件后，接下来就是添加主工程的打包集命令了，如下图所示："]}),"\n",(0,s.jsxs)(e.p,{children:["在主工程的",(0,s.jsx)(e.strong,{children:"pakage.json"}),"中添加以下",(0,s.jsx)(e.strong,{children:"script"}),"脚本命令。其中",(0,s.jsx)(e.strong,{children:"start:editor"}),"和",(0,s.jsx)(e.strong,{children:"build:editor"}),"就是当前启动和构建编辑器的命令，它们都是通过",(0,s.jsx)(e.strong,{children:"Nx CLI"}),"来执行的。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'"scripts": {\n    "build": "nx run-many -t build",\n    "start:main": "nx start @huos/main",\n    "start:editor": "nx start @huos/editor",\n    "build:editor": "nx build @huos/editor",\n    "graph": "nx graph"\n  },\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["添加完成后，分别执行",(0,s.jsx)(e.strong,{children:"start:editor"}),"和",(0,s.jsx)(e.strong,{children:"build:editor"}),"看看是否可以启动和构建成功。如下图所示，分别执行启动和构建命令的输出结构，会发现都会将依赖的 ",(0,s.jsx)(e.strong,{children:"@huos/setter"}),"和 ",(0,s.jsx)(e.strong,{children:"@huos/core"}),"提前重新构建，以此来表示当前的依赖代码是最新的状态。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["到此，整个",(0,s.jsx)(e.strong,{children:"Nx"}),"的构建就基本上结束了，此时可以看到执行构建命令完成后在",(0,s.jsx)(e.strong,{children:"editor"}),"目录下生成了",(0,s.jsx)(e.strong,{children:"dist"}),"的资源产物，接下来就可以通过构建部署平台将其进行部署。"]}),"\n",(0,s.jsxs)(e.h2,{id:"部署前端",children:["部署前端",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#部署前端",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["部署的阶段在这里我使用",(0,s.jsx)(e.strong,{children:"Vercel"}),"来进行演示，如果是自己的服务器直接使用服务器部署方案直接跟手操作即可。在前面提到过",(0,s.jsx)(e.strong,{children:"Vercel"}),"是一个免费的前端部署平台，使用起来也非常简单。"]}),"\n",(0,s.jsxs)(e.h3,{id:"导入项目",children:["导入项目",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#导入项目",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.strong,{children:"Vercel"}),"中选择添加一个新项目，如下图所示，点击图片中红色的部分。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["创建新项目会跳转到下图的界面，如果使用的是",(0,s.jsx)(e.strong,{children:"github"}),"登录的话，可以直接选择现有的仓库直接导入，在这里我直接选择了",(0,s.jsx)(e.a,{href:"https://vercel.com/lgnition/ignition-web",target:"_blank",rel:"noopener noreferrer",children:"ignition-web"}),"项目直接导入。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(e.h3,{id:"构建配置",children:["构建配置",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#构建配置",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"导入项目后，需要修改当前需要构建的相关配置。如下图所示："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["修改",(0,s.jsx)(e.strong,{children:"build command"}),"命令为上一小节我们自己自定义的",(0,s.jsx)(e.strong,{children:"pnpm run build:editor"}),"，此时打包机的路径位于根目录。"]}),"\n",(0,s.jsxs)(e.li,{children:["修改",(0,s.jsx)(e.strong,{children:"Output Directory"}),"的路径为 ",(0,s.jsx)(e.strong,{children:"./apps/editor/dist"}),"，这个路径是我们",(0,s.jsx)(e.strong,{children:"editor"}),"项目构建后的输出地址，因为当前处于根目录，因此需要将其定位到具体的产物目录当中去。"]}),"\n",(0,s.jsxs)(e.li,{children:["由于我们使用的",(0,s.jsx)(e.strong,{children:"pnpm"}),"，因此需要将",(0,s.jsx)(e.strong,{children:"install command"}),"修改为",(0,s.jsx)(e.strong,{children:"pnpm install"}),"，直接指定当前的包管理工具。"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(e.p,{children:"以上配置修改完成后，后续提交代码就会进行我们工程的构建，如下图所示："}),"\n",(0,s.jsxs)(e.p,{children:["构建完成后就会出现前端访问的地址，以及下面的",(0,s.jsx)(e.strong,{children:"Deplpyment Details"}),"的阶段都没有错误，此时就可以访问我们的前端工程路径了。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:["总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"本章节主要将前端工程相关的依赖和工程进行了部署，随着应用依赖的多元化，后续将会有更多的工程和项目依赖到通用包。在之前也有很多同学私信提问说如何部署，集成构建等相关问题，故此本章节将其从开发到构建的相关流程进行了梳理，从而帮助有需要开发构建部署的同学。"}),"\n",(0,s.jsx)(e.p,{children:"在这之前已经完成了最小化的业务流程，后续更多的时补充页面相关交互与服务端之间的联系，慢慢积累功能，以此来形成一个较为基础完善的平台，而构建前端工程是将其整个脉络理解清晰的前提。"}),"\n",(0,s.jsxs)(e.p,{children:["目前整体架构为",(0,s.jsx)(e.strong,{children:"Nx + pnpm + Vite"}),"的模式，将初始化工程中的tubro进行平替，使用文档更全和社区更好的Nx来代替，后续有兴趣的同学也可以了解一下Nx相关的知识，如果能够更加深入的掌握Nx，未来使用monorepo作为项目管理的时候会更加的便捷。"]}),"\n",(0,s.jsxs)(e.h2,{id:"资源",children:["资源",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#资源",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://verdaccio.org/",target:"_blank",rel:"noopener noreferrer",children:"https://verdaccio.org/"})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://vercel.com/lgnition/ignition-web/7KYfjDnoaGokek3qJfBT52Kx2JKz",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(e.a,{href:"https://vercel.com",target:"_blank",rel:"noopener noreferrer",children:"https://vercel.com"})}),"/"]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.npmjs.com/package/nrm",target:"_blank",rel:"noopener noreferrer",children:"https://www.npmjs.com/package/nrm"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://nx.dev/getting-started/intro",target:"_blank",rel:"noopener noreferrer",children:"https://nx.dev/getting-started/intro"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://juejin.cn/post/7096701542408912933#heading-8",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.cn/post/7096701542408912933#heading-8"})}),"\n"]})]})}function k(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(w,{...n})}):w(n)}let v=k;k.__RSPRESS_PAGE_META={},k.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F44.%E9%A1%B9%E7%9B%AE%E8%BF%9B%E9%98%B6%EF%BC%9A%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B.md"]={toc:[{text:"发布依赖",id:"发布依赖",depth:2},{text:"安装Verdaccio",id:"安装verdaccio",depth:3},{text:"启动Verdaccio",id:"启动verdaccio",depth:3},{text:"添加用户",id:"添加用户",depth:3},{text:"发布包",id:"发布包",depth:3},{text:"构建前端",id:"构建前端",depth:2},{text:"安装Nx",id:"安装nx",depth:3},{text:"配置Nx",id:"配置nx",depth:3},{text:"Shell",id:"shell",depth:3},{text:"部署前端",id:"部署前端",depth:2},{text:"导入项目",id:"导入项目",depth:3},{text:"构建配置",id:"构建配置",depth:3},{text:"总结",id:"总结",depth:2},{text:"资源",id:"资源",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);