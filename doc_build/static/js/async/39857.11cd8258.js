"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["39857"],{217808:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var s=r(552676),a=r(740453);let c=r.p+"static/image/ff176b7354b2a8e5907bd1a396c79e0d.71f749d5.png",o=r.p+"static/image/c3e3a0e81b8e7d5f66d2f61ccbe66185.1185af65.png",i=r.p+"static/image/5c728e190d318859a502c40a297b5ef0.47d0b5e7.png";function p(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",code:"code",h4:"h4",h5:"h5",pre:"pre",ul:"ul",li:"li",strong:"strong",ol:"ol"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"8generator-和-sourcemap-的奥秘",children:["8.Generator 和 SourceMap 的奥秘",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8generator-和-sourcemap-的奥秘",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"AST 转换完之后就到了 generate 阶段，genenrate 是怎么生成目标代码和 sourcemap 的呢？sourcemap 有啥作用呢？"}),"\n",(0,s.jsx)(n.p,{children:"本节就来探索一下 generate 的奥秘。"}),"\n",(0,s.jsxs)(n.h2,{id:"generate",children:["generate",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#generate",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"generate 是把 AST 打印成字符串，是一个从根节点递归打印的过程，对不同的 AST 节点做不同的处理，在这个过程中把抽象语法树中省略掉的一些分隔符重新加回来。"}),"\n",(0,s.jsx)(n.p,{children:"比如 while 语句 WhileStatement 就是先打印 while，然后打印一个空格和 '('，然后打印 node.test 属性的节点，然后打印 ')'，之后打印 block 部分"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["比如条件表达式 ConditionExpression 就是分别打印 node.test、node.consequent、node.alternate 属性，中间插入 ",(0,s.jsx)(n.code,{children:"?"})," ",(0,s.jsx)(n.code,{children:":"})," 和空格。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"通过这样的方式递归打印整个 AST，就可以生成目标代码。"}),"\n",(0,s.jsxs)(n.p,{children:["@babel/generator 的 ",(0,s.jsx)(n.a,{href:"https://github.com/babel/babel/tree/main/packages/babel-generator/src/generators",target:"_blank",rel:"noopener noreferrer",children:"src/generators"})," 下定义了每一种AST节点的打印方式，感兴趣的话可以看一下每种 AST 都是怎么打印的。"]}),"\n",(0,s.jsxs)(n.h2,{id:"sourcemap",children:["sourcemap",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcemap",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们知道可以在 generate 的时候选择是否生成 sourcemap，那为什么要生成 sourcemap 呢？"}),"\n",(0,s.jsxs)(n.h4,{id:"sourcemap-的作用",children:["sourcemap 的作用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcemap-的作用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"babel 对源码进行了修改，生成的目标代码可能改动很大，如果直接调试目标代码，那么可能很难对应到源码里。所以需要一种自动关联源码的方式，就是 sourcemap。"}),"\n",(0,s.jsx)(n.p,{children:"我们平时用 sourcemap 主要用两个目的："}),"\n",(0,s.jsxs)(n.h5,{id:"调试代码时定位到源码",children:["调试代码时定位到源码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#调试代码时定位到源码",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["chrome、firefox 等浏览器支持在文件末尾加上",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Tools/Debugger/How_to/Use_a_source_map",target:"_blank",rel:"noopener noreferrer",children:"一行注释"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"//# sourceMappingURL=http://example.com/path/to/your/sourcemap.map\n"})}),"\n",(0,s.jsx)(n.p,{children:"可以通过 url 的方式或者转成 base64 内联的方式来关联 sourcemap。调试工具（浏览器、vscode 等会自动解析 sourcemap，关联到源码。这样打断点、错误堆栈等都会对应到相应源码。"}),"\n",(0,s.jsxs)(n.h5,{id:"线上报错定位到源码",children:["线上报错定位到源码",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#线上报错定位到源码",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"开发时会使用 sourcemap 来调试，但是生产可不会，要是把 sourcemap 传到生产算是大事故了。但是线上报错的时候确实也需要定位到源码，这种情况一般都是单独上传 sourcemap 到错误收集平台。"}),"\n",(0,s.jsxs)(n.p,{children:["比如 sentry 就提供了一个 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@sentry/webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"@sentry/webpack-plugin"})," 支持在打包完成后把 sourcemap 自动上传到 sentry 后台，然后把本地 sourcemap 删掉。还提供了 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@sentry/cli",target:"_blank",rel:"noopener noreferrer",children:"@sentry/cli"})," 让用户可以手动上传。"]}),"\n",(0,s.jsx)(n.p,{children:"平时我们至少在这两个场景（开发时调试源码，生产时定位错误）下会用到 sourcemap。"}),"\n",(0,s.jsxs)(n.h4,{id:"sourcemap的格式",children:["sourcemap的格式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcemap的格式",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n　　version : 3,\n   file: "out.js",\n   sourceRoot : "",\n   sources: ["foo.js", "bar.js"],\n   names: ["src", "maps", "are", "fun"],\n   mappings: "AAgBC,SAAQ,CAAEA"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"比如上面就是一个 sourcemap 文件，对应字段的含义如下："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"version：source map的版本，目前为3。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"file：转换后的文件名。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"sourceRoot：转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"sources：转换前的文件。该项是一个数组，因为可能是多个源文件合并成一个目标文件。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"names：转换前的所有变量名和属性名，把所有变量名提取出来，下面的 mapping 直接使用下标引用，可以减少体积。"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"mappings：转换前代码和转换后代码的映射关系的集合，用分号代表一行，每行的 mapping 用逗号分隔。"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"重点看 mappping 部分"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'　　mappings:"AAAAA,BBBBB;;;;CCCCC,DDDDD"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["每一个分号 ",(0,s.jsx)(n.code,{children:";"})," 表示一行，多个空行就是多个 ",(0,s.jsx)(n.code,{children:";"}),"，mapping 通过 ",(0,s.jsx)(n.code,{children:","})," 分割。"]}),"\n",(0,s.jsx)(n.p,{children:"mapping有五位："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:" 第一位是目标代码中的列数\n 第二位是源码所在的文件名\n 第三位是源码对应的行数\n 第四位是源码对应的列数\n 第五位是源码对应的 names，不一定有\n"})}),"\n",(0,s.jsx)(n.p,{children:"每一位是通过 VLQ 编码的，一个字符就能表示行列数，具体 VLQ 的编码的实现就不展开了，感兴趣可以查一下相关资料。"}),"\n",(0,s.jsxs)(n.p,{children:["sourcemap 通过 ",(0,s.jsx)(n.code,{children:"names"})," 和 ",(0,s.jsx)(n.code,{children:";"})," 的设计省略掉了一些变量名和行数所占的空间，又通过 VLQ 编码使得一个字符就可以表示行列数等信息。通过不大的空间占用完成了源码到目标代码的映射。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"那么 sourcemap 的源码和目标代码的行列数是怎么来的呢？"})}),"\n",(0,s.jsx)(n.p,{children:"其实我们在 parse 的时候就在 AST 节点中保存了 loc 属性，这就是源码中的行列号，在后面 transform 的过程中，并不会去修改它，所以转换完以后节点中仍然保留有源码中的行列号信息，在 generate 打印成目标代码的时候会计算出新的行列号，这样两者关联就可以生成 sourcemap。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["具体生成 sourcemap 的过程是用 mozilla 维护的 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/source-map",target:"_blank",rel:"noopener noreferrer",children:"source-map"})," 这个包，其他工具做 sourcemap 的解析和生成也是基于这个包。"]}),"\n",(0,s.jsxs)(n.h2,{id:"soruce-map",children:["soruce-map",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#soruce-map",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/source-map",target:"_blank",rel:"noopener noreferrer",children:"source-map"})," 可以用于生成和解析 sourcemap，需要手动操作 sourcemap 的时候可以用。我们通过它的 api 来感受下 babel 是怎么生成 sourcemap 的。"]}),"\n",(0,s.jsx)(n.p,{children:"source-map 暴露了 SourceMapConsumer、SourceMapGenerator、SourceNode 3个类，分别用于消费 sourcemap、生成 sourcemap、创建源码节点。"}),"\n",(0,s.jsxs)(n.h5,{id:"生成-sourcemap",children:["生成 sourcemap",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#生成-sourcemap",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"生成 sourcemap 的流程是："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"创建一个 SourceMapGenerator 对象"}),"\n",(0,s.jsx)(n.li,{children:"通过 addMapping 方法添加一个映射"}),"\n",(0,s.jsx)(n.li,{children:"通过 toString 转为 sourcemap 字符串"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'var map = new SourceMapGenerator({\n  file: "source-mapped.js"\n});\n\nmap.addMapping({\n  generated: {\n    line: 10,\n    column: 35\n  },\n  source: "foo.js",\n  original: {\n    line: 33,\n    column: 2\n  },\n  name: "christopher"\n});\n\nconsole.log(map.toString());\n// \'{"version":3,"file":"source-mapped.js",\n//   "sources":["foo.js"],"names":["christopher"],"mappings":";;;;;;;;;mCAgCEA"}\'\n'})}),"\n",(0,s.jsxs)(n.h5,{id:"消费sourcemap",children:["消费sourcemap",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#消费sourcemap",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"SourceMapConsumer.with 的回调里面可以拿到 consumer 的 api，调用 originalPositionFor 和 generatedPositionFor 可以分别用目标代码位置查源码位置和用源码位置查目标代码位置。还可以通过 eachMapping 遍历所有 mapping，对每个进行处理。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const rawSourceMap = {\n  version: 3,\n  file: "min.js",\n  names: ["bar", "baz", "n"],\n  sources: ["one.js", "two.js"],\n  sourceRoot: "http://example.com/www/js/",\n  mappings: "CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA"\n};\n\nconst whatever = await SourceMapConsumer.with(rawSourceMap, null, consumer => {\n   // 目标代码位置查询源码位置\n  consumer.originalPositionFor({\n    line: 2,\n    column: 28\n  })\n  // { source: \'http://example.com/www/js/two.js\',\n  //   line: 2,\n  //   column: 10,\n  //   name: \'n\' }\n  \n  // 源码位置查询目标代码位置\n  consumer.generatedPositionFor({\n    source: "http://example.com/www/js/two.js",\n    line: 2,\n    column: 10\n  })\n  // { line: 2, column: 28 }\n  \n  // 遍历 mapping\n  consumer.eachMapping(function(m) {\n    // ...\n  });\n\n  return computeWhatever();\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"babel 就是用这些 api 来生成 sourcemap 的。"}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这一节我们探索了下 generator 和 sourcemap 的原理，generate 就是递归打印 AST 成字符串，在递归打印的过程中会根据源码位置和计算出的目标代码的位置来生成 mapping，加到 sourcemap 中。 sourcemap 是源码和目标代码的映射，用于开发时调试源码和生产时定位线上错误。 babel 通过 source-map 这个包来生成的 sourcemap，我们使用了下 source-map 包的 api，对 sourcemap 的生成和消费有了一个直观的认识。"}),"\n",(0,s.jsx)(n.p,{children:"学完这一节之后，我们知道了 AST 是怎么生成目标代码和 sourcemap的，加上前两节的内容，把整个 babel 的编译流程串联了起来。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}let h=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["Babel%20%E6%8F%92%E4%BB%B6%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F8.Generator%20%E5%92%8C%20SourceMap%20%E7%9A%84%E5%A5%A5%E7%A7%98.md"]={toc:[{text:"generate",id:"generate",depth:2},{text:"sourcemap",id:"sourcemap",depth:2},{text:"sourcemap 的作用",id:"sourcemap-的作用",depth:4},{text:"sourcemap的格式",id:"sourcemap的格式",depth:4},{text:"soruce-map",id:"soruce-map",depth:2},{text:"总结",id:"总结",depth:2}],title:"8.Generator 和 SourceMap 的奥秘",headingTitle:"8.Generator 和 SourceMap 的奥秘",frontmatter:{}}}}]);