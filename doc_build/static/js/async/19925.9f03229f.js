"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["19925"],{400882:function(e,n,c){c.r(n),c.d(n,{default:()=>D});var d=c(552676),s=c(740453);let l=c.p+"static/image/54cf6dbc6a856a6e21e9ba2747d25515.394dd13d.webp",r=c.p+"static/image/278601c759dece720e8ea8731ae69108.df216a75.webp",i=c.p+"static/image/d1425f444bff08bf7590eb2697593dd6.d5461e3e.webp",a=c.p+"static/image/681de756f940acde268b48b9d1508f08.20352135.webp",o=c.p+"static/image/da817b0bdf3ad3cf81fa24a51576d8d1.803c8eee.webp",h=c.p+"static/image/0dbf78421f1d83834a9b26132b12d43c.54a145f3.webp",t=c.p+"static/image/ed1cdb8a86355fec14f9081e7ed06e4e.795038b6.webp",x=c.p+"static/image/e6a171d5bbc5567079d428d8fec5f24f.dc36e247.webp",j=c.p+"static/image/fff212beab2c04e526058ef9f9fa544a.6051a561.webp",p=c.p+"static/image/d9adeddf964a54703acc14afd0e444a3.e7123b9e.webp",g=c.p+"static/image/8b883ba558c0fbd12aaab68ddd6c6be8.dc400365.webp",b=c.p+"static/image/301ee1ecf2cdf32f797c5dcac0b1a0aa.32f3ad1d.webp",f=c.p+"static/image/065a648f32cf25971a4a40909d2cedc5.00fd70ed.webp",m=c.p+"static/image/c831971cb6a3928a9b0fe2879eb3827a.3b16f2c6.webp",u=c.p+"static/image/12a985e7069cfc38281e854b4dc3e8ab.6d0f84f5.webp",S=c.p+"static/image/1db3c2f52eeaab0cbae4be7a7fd686b4.df04738b.webp",k=c.p+"static/image/6fc1009b59fabff2271acffa906424ea.ba6a40a0.webp",C=c.p+"static/image/7575abe2725f0bd35ef157e758b31199.9783a0ef.webp",w=c.p+"static/image/d3875fee067615063cf2c50842ef441c.236bded8.webp",N=c.p+"static/image/351488dcfbf68592cc2f76c1b048d4c2.3f494d3b.webp",v=c.p+"static/image/6ee55a5c939157975bd2884a66cd53b1.adfb88c4.webp",B=c.p+"static/image/386749a3aefda87253404083ed102afd.9df9b318.webp",E=c.p+"static/image/ca30a9261d24e4c26b7306b5bac9148c.efceef31.webp",A=c.p+"static/image/bbf70b498076613d05b35bf1fcf2eef5.afefe16f.webp",_=c.p+"static/image/262873bd45147e39b4f2a090c71ffc48.e9c18d73.webp",y=c.p+"static/image/24fc940e6c439cc0e89f4ab9ade5555d.a4903800.webp",M=c.p+"static/image/89b503d0576854c9cddd17f296e469c0.eb38e157.webp";function q(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",strong:"strong",h2:"h2",pre:"pre",blockquote:"blockquote",img:"img",ul:"ul",li:"li",h3:"h3"},(0,s.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"第03章css选择器has与not的组合",children:["第03章—CSS选择器：：has()与：not()的组合",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第03章css选择器has与not的组合",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["\uFEFF近几年中，CSS 为 Web 开发者提供了很多优秀且强大的选择器，可以很好地帮助 Web 开发者快速选中目标元素。有些新选择器还可以允许你在开发的过程中减少对类名和 JavaScript 的依赖，比如， ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器。"]}),"\n",(0,d.jsxs)(n.p,{children:["只不过，CSS 中依然缺失很多强大的选择器，比如通过选择器来选择一个范围内的元素。庆幸的是，CSS 的 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器组合在一起，可以构建出更多强大的选择器，比如 ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:":nth-child(An+B [of S]?)"})})," 。在这节课中，我们将一起来探讨 ",(0,d.jsx)(n.code,{children:":has()"})," 与 ",(0,d.jsx)(n.code,{children:":not()"})," 组合在一起可以做哪些事情？又有哪些差异和需要注意的细节？"]}),"\n",(0,d.jsxs)(n.h2,{id:"has-和-not-是什么",children:[":has() 和 :not() 是什么？",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#has-和-not-是什么",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["CSS 的 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器都被称为",(0,d.jsx)(n.strong,{children:"函数伪类"}),"，其中 ",(0,d.jsx)(n.code,{children:":has()"})," 被称为是一个",(0,d.jsx)(n.strong,{children:"关系选择器"}),"。它可以基于包含特定后代来匹配祖先元素，但它也可以基于后续的内容匹配前置元素等。比如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"figure:has(> figcaption) {\n    /* 选中含有子元素 figcaption 的 figure */\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:["代码中的选择器，将会选中含有子元素 ",(0,d.jsx)(n.code,{children:"figcaption"})," 的 ",(0,d.jsx)(n.code,{children:"figure"})," 元素，并且样式规则会运用于 ",(0,d.jsx)(n.code,{children:"figure"})," 。"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["有关于 ",(0,d.jsx)(n.code,{children:":has()"})," 是什么以及相关详细介绍，请移步阅读《",(0,d.jsxs)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7224404685615005728",target:"_blank",rel:"noopener noreferrer",children:["CSS 的父选择器：",(0,d.jsx)(n.code,{children:":has()"})," "]}),"》!"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["而 ",(0,d.jsx)(n.code,{children:":not()"})," 被称为是一个",(0,d.jsx)(n.strong,{children:"否定伪类选择器"}),"，它可以用来作为条件判断，类似 JavaScript 中的非。其主要作用就是防止特定的元素被选中，因此它也被称为",(0,d.jsx)(n.strong,{children:"反选伪类"}),"。比如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"/* 选择 body 后代元素中不是段落 p 的元素 */\nbody :not(p) { \n    color: #000; \n}\n\n/* 选择没有 .fancy 类名的段落 p 元素 */\np:not(.fancy) { \n    color: orange; \n}\n\n/* 选择 body 后代元素中不是 p 或 span 元素 */\nbody :not(p):not(span) { \n    color: red \n}\n\n/* 选择 body 后代元素中不是 p 或 span 元素 */\nbody :not(p, span) { \n    color: yellow;\n}\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"has-和-not-可以做什么",children:[":has() 和 :not() 可以做什么？",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#has-和-not-可以做什么",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["我们在小册第二节课《",(0,d.jsx)(n.a,{href:"https://juejin.cn/book/7223230325122400288/section/7224404685799555111",target:"_blank",rel:"noopener noreferrer",children:"CSS 选择器 :has() 能解决什么问题？"}),"》中花了很大的篇幅阐述了 ",(0,d.jsx)(n.code,{children:":has()"})," 选择器可以做什么。因此，这节课我们来看看 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器可以做什么？"]}),"\n",(0,d.jsxs)(n.p,{children:["我们平时开发项目的时候，时常会碰到列表这样的效果，列表项之间有一个 ",(0,d.jsx)(n.code,{children:"margin-bottom"}),"，而往往想在最后一项中不需要设置 ",(0,d.jsx)(n.code,{children:"margin-bottom"}),"。比如下图这样的效果："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:M,alt:"img"})}),"\n",(0,d.jsxs)(n.p,{children:["正如上图所示，如果我们每一个 ",(0,d.jsx)(n.code,{children:".card"})," 都指定一个 ",(0,d.jsx)(n.code,{children:"margin-bottom"})," 值，就会出现上图中左侧所呈现的效果，无法达到 Web 设计师预期的效果。这个时候，我们使用 ",(0,d.jsx)(n.code,{children:":not()"})," 伪类选择器就可以很好地避免这个现象："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".cards {\n    padding: 20px;\n}\n\n.card:not(:first-child){\n    margin-top: 20px;\n}\n\n/* 或者 */\n.card:not(:last-child) {\n    margin-bottom: 20px;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:"上面代码意思很简单："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:".card:not(:first-child)"})," 表示除了第一个 ",(0,d.jsx)(n.code,{children:".card"})," 之外的所有 ",(0,d.jsx)(n.code,{children:".card"})," 都指定 ",(0,d.jsx)(n.code,{children:"margin-top"})," 的值为 ",(0,d.jsx)(n.code,{children:"20px"}),"；"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:".card:not(:last-child)"})," 则表示除了最后一个 ",(0,d.jsx)(n.code,{children:".card"})," 之外的所有 ",(0,d.jsx)(n.code,{children:".card"})," 都指定 ",(0,d.jsx)(n.code,{children:"margin-bottom"})," 的值为 ",(0,d.jsx)(n.code,{children:"20px"}),"。"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:y,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/poxeKrB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/poxeKrB"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["现在，",(0,d.jsx)(n.code,{children:":not()"})," 伪类在 CSS 中支持复杂选择器。"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"复杂选择器是由组合符分隔的一个或多个复合选择器的序列。"}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["在 ",(0,d.jsx)(n.code,{children:":not()"})," 伪类中支持复杂选择器的有趣之处在于，现在可以使用通用选择器（",(0,d.jsx)(n.code,{children:"*"}),"）选择不是其他元素的子级或后代元素。比如下面这个示例："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'<img src="./logos.png"alt="A Twitter, RSS and Twitch logo" width="508" height="201">\n\n<picture>\n    <source srcset="./logos.webp"type="image/webp">\n    <img src="./logos.png"alt="A Twitter, RSS and Twitch logo" width="508" height="201">\n</picture>\n'})}),"\n",(0,d.jsxs)(n.p,{children:["如今，你可以使用 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器选择所 ",(0,d.jsx)(n.code,{children:"img"})," 元素，但它不是 ",(0,d.jsx)(n.code,{children:"picture"})," 元素的子元素："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"img:not(picture *) {\n    border: 3px solid red;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:_,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/jOeBKdj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOeBKdj"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["就此例而言，我们也可以使用简单的 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器达到相同的效果："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:A,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/mdzWKoK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/mdzWKoK"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["上面示例告诉我们，CSS 的 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器的使用并不复杂，但你在使用它的时候，有几点还需要注意："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["可以使用 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器编写一个完全无用的选择器。例如，",(0,d.jsx)(n.code,{children:":not(*)"})," 匹配任何不是元素的元素，这显然是荒谬的，所以这个附加的规则将永远不被应用。"]}),"\n",(0,d.jsxs)(n.li,{children:["可以利用 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器提高选择器的权重。例如，",(0,d.jsx)(n.code,{children:"#foo:not(#bar)"})," 和 ",(0,d.jsx)(n.code,{children:"#foo"})," 都将匹配相同的元素，但是具有两个 ",(0,d.jsx)(n.code,{children:"id"})," 的选择器的权重要更高（",(0,d.jsx)(n.code,{children:"#foo:not(#bar)"})," 的权重是 ",(0,d.jsx)(n.code,{children:"(3, 0,1)"})," ，",(0,d.jsx)(n.code,{children:"#foo"})," 的权重是 ",(0,d.jsx)(n.code,{children:"(1,0，0)"}),"）。"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:":not()"})," 伪类的优先级将由其逗号分割的参数中优先级最高的选择器指定；提供与 ",(0,d.jsx)(n.code,{children:":not(:is(argument))"})," 相同的优先级。"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:":not(.foo)"})," 将匹配任何非 ",(0,d.jsx)(n.code,{children:".foo"})," 的元素，包括 ",(0,d.jsx)(n.code,{children:"<html>"})," 和 ",(0,d.jsx)(n.code,{children:"<body>"}),"。"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:":not()"})," 选择器将匹配任意“不是一个 X”的元素。当与后代选择器一起使用，这可能令人惊讶，因为有多种路径可以选择一个目标元素。例如，",(0,d.jsx)(n.code,{children:"body :not(table) a"})," 仍将应用 ",(0,d.jsx)(n.code,{children:"<table>"})," 中的 ",(0,d.jsx)(n.code,{children:"a"})," 元素，因为 ",(0,d.jsx)(n.code,{children:"<tr>"}),"、",(0,d.jsx)(n.code,{children:"<tbody>"}),"、",(0,d.jsx)(n.code,{children:"<th>"}),"、",(0,d.jsx)(n.code,{children:"<td>"}),"、",(0,d.jsx)(n.code,{children:"<caption>"})," 等都可以匹配选择器 ",(0,d.jsx)(n.code,{children:":not(table)"})," 部分。"]}),"\n",(0,d.jsxs)(n.li,{children:["你可以同时否定多个选择器。例如：",(0,d.jsx)(n.code,{children:":not(.foo, .bar)"})," 等同于 ",(0,d.jsx)(n.code,{children:":not(.foo):not(.bar)"}),"。"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:":not()"})," 选择器和 ",(0,d.jsx)(n.code,{children:":has()"})," 选择器一样，都被视为严格型选择器。如果传递给 ",(0,d.jsx)(n.code,{children:":not()"})," 伪类的选择器无效或者浏览器不支持，则整个规则都将是无效的。克服这种行为的有效方式是使用：",(0,d.jsx)(n.code,{children:":is()"})," 或 ",(0,d.jsx)(n.code,{children:":where()"})," 伪类，它们接受一个可容错选择器列表。例如 ",(0,d.jsx)(n.code,{children:":not(.foo, :invalid-pseudo-class)"})," 将使整个规则无效，但是 ",(0,d.jsx)(n.code,{children:":is(:not(.foo), :not(:invalid-pseudo-class))"})," 或 ",(0,d.jsx)(n.code,{children:":where(:not(.foo), :not(:invalid-pseudo-class))"})," 将匹配任何不是 ",(0,d.jsx)(n.code,{children:".foo"})," 的元素。"]}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"可以将-has-和-not-组合在一起使用",children:["可以将 :has() 和 :not() 组合在一起使用",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可以将-has-和-not-组合在一起使用",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["我们在实际使用的时候，可以将 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 两个选择器组合在一起。比如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"a:not(:has(> svg)) {\n    color: red;\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"a:not(:has > svg)"})," 选择器将会选择所有 ",(0,d.jsx)(n.code,{children:"<a>"})," 元素，但是它们不能直接包含 ",(0,d.jsx)(n.code,{children:"<svg>"})," 元素，即 ",(0,d.jsx)(n.code,{children:"<a>"})," 元素中不能直接有子元素 ",(0,d.jsx)(n.code,{children:"<svg>"})," ，但可以有后代的 ",(0,d.jsx)(n.code,{children:"<svg>"})," 元素。因为 ",(0,d.jsx)(n.code,{children:":has()"})," 选择器指定了要包含一个子元素 ",(0,d.jsx)(n.code,{children:"<svg>"})," ，而不是更深层的后代元素："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'\x3c!-- 相匹配的 HTML 结构 --\x3e\n<a href="">CSS Selector</a>\n\n<a href="">\n    CSS Selector\n    <span><svg></svg></span>\n</a>\n\n\x3c!-- 不相匹配的 HTML 结构 --\x3e\n<a href="">CSS Selector <svg></svg></a>\n'})}),"\n",(0,d.jsxs)(n.p,{children:["你也可以在 ",(0,d.jsx)(n.code,{children:":has()"})," 中包含 ",(0,d.jsx)(n.code,{children:":not()"})," ，比如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"article:has(img:not([alt])) {\n    color: red;\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"article:has(img:not([alt]))"})," 选择器会选中所有包含 ",(0,d.jsx)(n.code,{children:"<img>"})," ，且这个 ",(0,d.jsx)(n.code,{children:"<img>"})," 元素没有 ",(0,d.jsx)(n.code,{children:"alt"})," 属性的 ",(0,d.jsx)(n.code,{children:"article"})," 元素。具体来说，",(0,d.jsx)(n.code,{children:":has()"})," 选择器指定了 ",(0,d.jsx)(n.code,{children:"article"})," 元素必须包含一个满足条件的子元素或后代元素，即 ",(0,d.jsx)(n.code,{children:"img:not([alt])"})," ，也就是含有 ",(0,d.jsx)(n.code,{children:"<img>"})," 元素，且没有 ",(0,d.jsx)(n.code,{children:"alt"})," 属性。如果条件满足，那么这个 ",(0,d.jsx)(n.code,{children:"article"})," 元素就被选中。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'\x3c!-- 相匹配的 HTML 结构 --\x3e\n<article>\n    Article Element\n    <img src="article.jpg" /> \x3c!-- img 是 article 的子元素，且没有设置 alt 属性 --\x3e\n</article>\n\n<article>\n    Article Element\n    <figure>\n        <img src="figure.jpg" /> \x3c!-- img 是 article 的后代元素，且没有设置 alt 属性 --\x3e\n    </figure>\n</article>\n\n\x3c!-- 不相匹配的 HTML 结构 --\x3e\n<article>\n    Article Element\n    <img src="article.jpg" alt="article element" />\x3c!-- img 是 article 的子元素，但设置了 alt 属性 --\x3e\n</article>\n\n<article>\n    Article Element\n    <figure>\n        <img src="figure.jpg" alt>\x3c!-- img 是 article 的后代元素，但设置了 alt 属性 --\x3e\n    </figure>\n</article>\n'})}),"\n",(0,d.jsxs)(n.p,{children:["它们的结合看上去没什么，但对于初学者而言，有的时候总是易于混淆，尤其是 ",(0,d.jsx)(n.code,{children:":has(:not())"})," 与 ",(0,d.jsx)(n.code,{children:":not(:has())"})," 之间的差异。让我通过一个示例来展示它们之间的差异。假设我们有两张卡片，每张卡片都有一个标题和一些描述文本，但其中一张卡片没有缩略图。它们对应的 HTML 结构如下："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'\x3c!-- 包含缩略图的卡片 --\x3e\n<div class="card">\n    <figure>\n        <img src="card-thumbnail.jpg" alt="Card Thumbnail" />\n    </figure>\n    <h3>Card Title</h3>\n    <p>Card Description</p>\n</div>\n\n\x3c!-- 不包含缩略图的卡片 --\x3e\n<div class="card">\n    <h3>Card Title</h3>\n    <p>Card Description</p>\n</div>\n'})}),"\n",(0,d.jsxs)(n.p,{children:["现在，我们想要为没有包含图片的卡片设置一个内距（",(0,d.jsx)(n.code,{children:"padding"}),"）："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".card:has(:not(img)) {\n    padding: 1rem;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:E,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/vYVxzJO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/vYVxzJO"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["正如你所看到的，两张卡片都设置了 ",(0,d.jsx)(n.code,{children:"padding: 1rem"})," ，无论卡片是否包含了缩略图 ",(0,d.jsx)(n.code,{children:"img"})," 。这是因为 ",(0,d.jsx)(n.code,{children:".card:has(:not(img))"})," 的意思是“",(0,d.jsx)(n.strong,{children:"选择一个包含任何非"})," ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"img"})})," ",(0,d.jsx)(n.strong,{children:"元素的"})," ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:".card"})}),"”。这意味着该选择器仅在卡片仅包含 ",(0,d.jsx)(n.code,{children:"img"})," 时不适用。"]}),"\n",(0,d.jsxs)(n.p,{children:["说实话，最开始也令我感到意外，我原本对 ",(0,d.jsx)(n.code,{children:".card:has(:not(img))"})," 理解是，不包含 ",(0,d.jsx)(n.code,{children:"img"})," 元素的 ",(0,d.jsx)(n.code,{children:".card"})," 元素，但事实上却事与愿违。"]}),"\n",(0,d.jsxs)(n.p,{children:["如果我们把 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器的嵌套关系对换一下，例如："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".card:not(:has(img)) {\n    padding: 1rem;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:"浏览器得出的结果正是我们所期望的："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:B,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址： ",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/jOeBvzY",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOeBvzY"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:".card:not(:has(img))"})," 的意思是“选择一个不包含 ",(0,d.jsx)(n.code,{children:"img"})," 的 ",(0,d.jsx)(n.code,{children:".card"}),"”，这正是我们在这种情况下想要的。"]}),"\n",(0,d.jsxs)(n.p,{children:["也就是说，",(0,d.jsx)(n.code,{children:":has(:not(img))"})," 与 ",(0,d.jsx)(n.code,{children:":not(:has(img))"})," 的差异在于它们选择元素的方式。"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:":has(:not(img))"})," 的意思是“选择包含任何非 ",(0,d.jsx)(n.code,{children:"img"})," 元素的元素”。因此，它会选择包含任何非 ",(0,d.jsx)(n.code,{children:"img"})," 元素的父元素（在这种情况下，是 ",(0,d.jsx)(n.code,{children:".card"})," 元素）。"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:":not(:has(img))"})," 的意思是“选择不包含 ",(0,d.jsx)(n.code,{children:"img"})," 元素的任何元素”。因此，它会选择不包含 ",(0,d.jsx)(n.code,{children:"img"})," 元素的 ",(0,d.jsx)(n.code,{children:".card"})," 元素。"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["因此，两个选择器选择的元素是不同的。",(0,d.jsx)(n.code,{children:":has(:not(img))"})," 选择的是包含非 ",(0,d.jsx)(n.code,{children:"img"})," 元素的 ",(0,d.jsx)(n.code,{children:".card"})," 元素，而 ",(0,d.jsx)(n.code,{children:":not(:has(img))"})," 选择的是不包含 ",(0,d.jsx)(n.code,{children:"img"})," 元素的 ",(0,d.jsx)(n.code,{children:".card"})," 元素。"]}),"\n",(0,d.jsxs)(n.p,{children:["这有点绕口或更易于引起对它们的混淆。但就此示例而言，我们可以使用更简单的选择器，比如选中不带图片（",(0,d.jsx)(n.code,{children:"img"}),"）的 ",(0,d.jsx)(n.code,{children:".card"})," ，我们可以使用 ",(0,d.jsx)(n.code,{children:".card:not(:has(img))"})," ；反之，如果选择带有 ",(0,d.jsx)(n.code,{children:"img"})," 的 ",(0,d.jsx)(n.code,{children:".card"})," 则可以使用 ",(0,d.jsx)(n.code,{children:".card:has(img)"})," ："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".card:has(img) {\n    outline: 3px solid red;\n}\n\n.card:not(:has(img)) {\n    outline: 3px solid blue;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:v,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/ExdWedJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/ExdWedJ"})]}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"has-和-not-构建高级选择器",children:[":has() 和 :not() 构建高级选择器",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#has-和-not-构建高级选择器",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器组合使用，除了能帮助你选中所需要的元素之外，还可以构建一些高级选择器。比如，选择多个范围的组、模拟 ",(0,d.jsx)(n.code,{children:":nth-child(An+B [of S]?)"})," 和选择一个具有特定类的兄弟元素的组中的最后一个元素等。"]}),"\n",(0,d.jsxs)(n.h3,{id:"选择多个范围的组",children:["选择多个范围的组",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#选择多个范围的组",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在 CSS 中，我们可以使用 ",(0,d.jsx)(n.code,{children:":has()"})," 选择器和通用兄弟组合选择器（",(0,d.jsx)(n.code,{children:"~"}),"）选择一个范围组的元素。例如，我们有下面这样的一个 HTML 结构："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'<ul>\n    <li class="rect"></li>\n    <li class="rect"></li>\n    <li data-range></li>\n    <li class="circle"></li>\n    <li class="circle"></li>\n    <li class="circle"></li>\n    <li class="circle"></li>\n    <li data-range></li>\n    <li class="star"></li>\n    <li class="star"></li>\n    <li class="star"></li>\n    <li class="rect"></li>\n</ul>\n'})}),"\n",(0,d.jsxs)(n.p,{children:["为了演示，我们在其中的两个列表项中定义了一个名为 ",(0,d.jsx)(n.code,{children:"data-range"})," 的属性，主要用它们来确定范围的开始和结束。我们可以使用 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:"~"})," 选择器组合在一起，选中 ",(0,d.jsx)(n.code,{children:"data-range"})," 开始和结束之间所有 ",(0,d.jsx)(n.code,{children:"li"})," （即所有 ",(0,d.jsx)(n.code,{children:".circle"})," 元素）："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"[data-range] ~ :has(~ [data-range])  {\n    width: 100px;\n    border: 2px solid #09f;\n    outline: 4px solid rgb(0 0 0 / .5);\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:N,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/VwEpEMb",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/VwEpEMb"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"而且我们可以分别使用："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"[data-range]:has(~ [data-range])"})," 给范围起始元素（第一个设置 ",(0,d.jsx)(n.code,{children:"data-range"})," 的 ",(0,d.jsx)(n.code,{children:"li"})," 元素）设置样式"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"[data-range] ~ [data-range]"})," 给范围结束元素（第二个设置 ",(0,d.jsx)(n.code,{children:"data-range"})," 的 ",(0,d.jsx)(n.code,{children:"li"})," 元素）设置样式"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"/* 选择一个范围的起始元素 */\n[data-range]:has(~ [data-range]) {\n    background-color: #987;\n    outline: 2px solid red;\n}\n\n/* 选择一个范围的结束元素 */\n[data-range] ~ [data-range] {\n    background-color: #90f;\n    outline: 2px solid orange;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:w,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/dygvQbJ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/dygvQbJ"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["现在，我们将推进我们之前的演示，并解决选择多个范围的问题。像上面示例一样，在列项上使用数据属性 ",(0,d.jsx)(n.code,{children:"data-range"})," 在单个父元素内创建多个范围组设置可区分的起始和结束标记，并且设置起始标记的值为 ",(0,d.jsx)(n.code,{children:"start"})," （即 ",(0,d.jsx)(n.code,{children:'data-range="start"'}),"）和结束标记的值为 ",(0,d.jsx)(n.code,{children:"end"})," （即 ",(0,d.jsx)(n.code,{children:'data-range="end"'}),"）："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'<ul>\n    <li data-range="start"></li>\n    <li class="rect"></li>\n    <li class="rect"></li>\n    <li data-range="end"></li>\n    <li data-range="start"></li>\n    <li class="circle"></li>\n    <li class="circle"></li>\n    <li class="circle"></li>\n    <li class="circle"></li>\n    <li data-range="end"></li>\n    <li data-range="start"></li>\n    <li class="star"></li>\n    <li class="star"></li>\n    <li class="star"></li>\n    <li data-range="end"></li>\n    <li class="rect"></li>\n</ul>\n'})}),"\n",(0,d.jsx)(n.p,{children:"由于我们给自定义属性设置了具体的值，因此使用 CSS 属性选择器就可以很轻易地选中一个组中的起始元素和结束元素："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:'/* 选择范围组中开始和结束元素 */\n[data-range] {\n    box-shadow: 0 0 0 6px red;\n    border-radius: 2px;\n}\n\n/* 选择范围组中起始元素 */\n[data-range="start"] {\n    outline:3px solid yellow;\n}\n\n/* 选择范围组中结束元素 */\n[data-range="end"] {\n    outline: 3px solid #e90;\n}\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:C,alt:"img"})}),"\n",(0,d.jsxs)(n.p,{children:["让我们把范围组中的第一个和最后一个元素选出来。这里使用了排除条件 ",(0,d.jsx)(n.code,{children:":not([data-range])"})," 选择器，将自定义属性 ",(0,d.jsx)(n.code,{children:"data-range"})," 没有 ",(0,d.jsx)(n.code,{children:"start"})," 和 ",(0,d.jsx)(n.code,{children:"end"})," 的标记排除出去："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:'/* 选择范围组内的第一个元素 */\n[data-range="start"] + :has(~ [data-range="end"]):not([data-range]) {\n    width: 80px;\n    border: 4px solid #09f;\n}\n\n/* 选择范围组内的最后一个元素 */\n[data-range="start"] ~ :has(+ [data-range="end"]):not([data-range]) {\n     width: 80px;\n     border: 4px solid;\n}\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:k,alt:"img"})}),"\n",(0,d.jsxs)(n.p,{children:["最后，我们需要选择器来匹配范围内的列表项。一开始，它与我们之前为“范围内”选择器创建的相似。同样，我们添加了一个条件，即它不匹配一个本身是 ",(0,d.jsx)(n.code,{children:"[data-range]"})," 元素的元素。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:'/* 选择范围组内的所有元素 */\n[data-range="start"] ~ :has(~ [data-range="end"]):not([data-range]) {\n    width: 80px;\n    border: 4px solid;\n    box-shadow: 0 0 0 4px rgb(0 0 0 / .125);\n}\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:S,alt:"img"})}),"\n",(0,d.jsxs)(n.p,{children:["需要注意的是，通用兄弟组合选择器（",(0,d.jsx)(n.code,{children:"~"}),"）是具有跳跃能力的。因此，上面的选择器选中的范围将会超出我们的预期范围。为了解决这个问题，我们需要添加一个更为复杂的条件选择器，即 ",(0,d.jsx)(n.code,{children:"AND"})," 条件，使用 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器来排除那些不在 ",(0,d.jsx)(n.code,{children:'[data-range="end"]'})," 和 ",(0,d.jsx)(n.code,{children:'[data-range="start"]'})," 之间的列表项。"]}),"\n",(0,d.jsxs)(n.p,{children:["但是，如果你还记得，我提到过通用兄弟选择器具有跳跃能力，所以目前，该选择器将会样式化超出我们预期范围的项目。下面的图片展示了在没有进一步限制如何应用规则的情况下，该规则如何工作。也就是说，单独使用这部分的选择器，将会告诉浏览器“不要选择跟随 ",(0,d.jsx)(n.code,{children:'[data-range="end"]'})," 的列表项，这些列表项还有一个后续名为 ",(0,d.jsx)(n.code,{children:'[data-range="start"]'})," 的兄弟元素”。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:'[data-range="start"] ~ :has(~ [data-range="end"]):not([data-range]):not([data-range="end"] ~ :has(~ [data-range="start"])) {\n    background-image: \n        linear-gradient(to bottom left in oklab, oklch(55% .45 350) 0%, oklch(100% .4 95) 100%);\n}\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:u,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/BaqWGmX",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/BaqWGmX"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"总体来说，这是一个相当冗长但非常强大的选择器，之前在没有 CSS 中的“向前查看”和“向后查看”能力的情况下，要想实现这个效果就必须使用 JavaScript。"}),"\n",(0,d.jsxs)(n.p,{children:["上面示例展示了使用 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器实现多范围组的选择，但还是需要依赖于手动在 HTML 中添加“钩子”（",(0,d.jsx)(n.code,{children:'data-range="start"'})," 和 ",(0,d.jsx)(n.code,{children:'data-range="end"'}),"）。如果我们换成有一个包含复选框的字段集，则可以再次使用 ",(0,d.jsx)(n.code,{children:":checked"})," 状态选择器来自动地、清晰地标识已选和未选项之间的边界。它们的结合可以允许你基于状态的动态样式变化，创建视觉边界变得更加容易。比如下面这个示例，当复选框被选中时，所选中的复选框将会变成一个范围组，会有一个边框和背景的视觉效果。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:m,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/XWxRjOo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/XWxRjOo"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"实现上图的效果，你需要一个 HTML 结构："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'<div class="card">\n    <header>\n        <h3>请选择你喜欢的语言 </h3>\n    </header>\n    <div class="card__content">\n        <label for="css"><input type="checkbox" name="css" id="css" />CSS</label>\n        <label for="html"><input type="checkbox" name="html" id="html" checked />HTML</label>\n        <label for="js"><input type="checkbox" name="js" id="js" />JavaScript</label>\n        <label for="vue"><input type="checkbox" name="vue" id="vue" checked />Vue</label>\n        <label for="react"><input type="checkbox" name="react" id="react" />React</label>\n        <label for="php"><input type="checkbox" name="php" id="php" />PHP</label>\n        <label for="java"><input type="checkbox" name="java" id="java" />Java</label>\n        <label for="python"><input type="checkbox" name="python" id="python" />Python</label>\n    </div>\n</div>\n'})}),"\n",(0,d.jsx)(n.p,{children:"关键 CSS 代码："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:'/* 自定义复选框 UI 样式 */\ninput[type="checkbox"] {\n    height: 1px;\n    overflow: hidden;\n    width: 1px;\n    position: absolute;\n    clip-path: inset(50%);\n}\n\nlabel {\n    display: flex;\n    align-items: center;\n    gap: 0.5em;\n    padding: 0.5em;\n    border: 1px solid transparent;\n    border-radius: var(--radius-tl, 0) var(--radius-tr, 0) var(--radius-br, 0) var(--radius-bl, 0);\n}\n\nlabel::before {\n    content: "";\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 4px;\n    border: 1px solid #c5c5c5;\n    background: #fff;\n    color: #c5c5c5;\n    width: 24px;\n    aspect-ratio: 1;\n    transition: all 0.2s ease;\n}\n\nlabel:has(:checked) {\n    color: #9739e8;\n}\n\nlabel:has(:checked)::before {\n    content: "✔";\n    border-color: #9739e8;\n    background-color: #9739e8;\n    color: #fff;\n    font-size: 0.75em;\n}\n\n/* 有状态的多范围选择组 */\n\n/* 范围组内的第一个选中项或单个选中项的顶部样式 */\nlabel:has(:checked):not(label:has(:checked) + label) {\n    --radius-tl: 0.75em;\n    --radius-tr: 0.75em;\n    border-block-start-color: black;\n}\n\n/* 范围组内最后一次选中的项或单个选中项的底部样式 */\nlabel:has(:checked):not(label:has(+ label :checked)) {\n    --radius-bl: 0.75em;\n    --radius-br: 0.75em;\n    border-block-end-color: black;\n    box-shadow: 0 4px 3px -2px rgba(0, 0, 0, 0.35);\n}\n\n/* 范围组内所有项的样式 */\nlabel:has(:checked):has(~ label :checked),\nlabel:has(:checked):not(label:has(+ label :checked)) {\n    border-inline-color: black;\n    background-color: palegreen;\n}\n'})}),"\n",(0,d.jsx)(n.p,{children:"简单解释一下。我们需要对范围组或单个选中项目的顶部、中间和底部定义 UI 样式。"}),"\n",(0,d.jsxs)(n.p,{children:["通过 ",(0,d.jsx)(n.code,{children:"label:has(:checked):not(label:has(:checked) + label)"})," 选择器来选中范围组的第一个项目或单个项目，然后给其顶部设置样式，即添加圆角和顶部边框："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"/* 范围组内的第一个选中项或单个选中项的顶部样式 */\nlabel:has(:checked):not(label:has(:checked) + label) {\n    --radius-tl: 0.75em;\n    --radius-tr: 0.75em;\n    border-block-start-color: black;\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:["同样的，通过 ",(0,d.jsx)(n.code,{children:"label:has(:checked):not(label:has(+ label :checked))"})," 选择器来选中范围组的最后一项或单个项目，然后给其底部设置样式，也是添加圆角和底部边框："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"/* 范围组内最后一次选中的项或单个选中项的底部样式 */\nlabel:has(:checked):not(label:has(+ label :checked)) {\n    --radius-bl: 0.75em;\n    --radius-br: 0.75em;\n    border-block-end-color: black;\n    box-shadow: 0 4px 3px -2px rgba(0, 0, 0, 0.35);\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:"注意，其实单个选中项目也是一范围组，是最小范围组，它既是范围组中的第一个项目，也是范围组中的最后一个项目。"}),"\n",(0,d.jsxs)(n.p,{children:["最后就是选中项目设置样式。其实只使用 ",(0,d.jsx)(n.code,{children:"label:has(:checked)"})," 就可以选中状态为 ",(0,d.jsx)(n.code,{children:":checked"})," 的复选框（已选复选框），但我们这里是一个多范围组的演示，所以会复杂一些："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"/* 范围组内所有项的样式 */\nlabel:has(:checked):has(~ label :checked),\nlabel:has(:checked):not(label:has(+ label :checked)) {\n    border-inline-color: black;\n    background-color: palegreen;\n}\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"模拟-nth-childanb-of-s-和-nth-last-childanb-of-s-选择器",children:["模拟 :nth-child(An+B [of S]?) 和 :nth-last-child(An+B [of S]?) 选择器",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#模拟-nth-childanb-of-s-和-nth-last-childanb-of-s-选择器",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:":nth-child(An+B [of S]?)"})," 和 ",(0,d.jsx)(n.code,{children:":nth-last-child(An+B [of S]?)"})," 选择器也是结构伪类选择器中的一部分。正如 ",(0,d.jsx)(n.a,{href:"https://twitter.com/stefanjudis/status/1650574371814006787",target:"_blank",rel:"noopener noreferrer",children:"@Stefan Judis  在 Twitter 上所说，浏览器对其支持度还是有限的"}),"："]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:f,alt:"img"})}),"\n",(0,d.jsx)(n.p,{children:"目前可以在 Chromium 111、Safari 9 和 Firefox 113 看到该选择器的效果："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:b,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/YzJVpLQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzJVpLQ"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["不过，我在这里不想介绍 ",(0,d.jsx)(n.code,{children:":nth-child(An+B [of S]?)"})," 和 ",(0,d.jsx)(n.code,{children:":nth-last-child(An+B [of S]?)"})," 选择器如何使用。我想和大家一起来探讨，如何使用 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 模拟出它们一样的功能。"]}),"\n",(0,d.jsxs)(n.p,{children:["在开始之前，我们明确一个概念“元素组”，即",(0,d.jsx)(n.strong,{children:"可以被分组在一起的相邻兄弟元素的一组"}),"。例如下面这个列表："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-HTML",children:'<ul>\n    <li>No Class Name<li>\n    \n    <li class="special">Special</li>\n    <li class="special">Special</li>\n    <li class="special">Special</li>\n    \n    <li>No Class Name<li>\n    \n    <li class="special">Special</li>\n    <li class="special">Special</li>\n    \n    <li>No Class Name<li>\n    <li>No Class Name<li>\n    \n    <li class="special">Special</li>\n    \n    <li>No Class Name<li>\n</ul>\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:g,alt:"img"})}),"\n",(0,d.jsxs)(n.p,{children:["正如上图所示，列表中的第 ",(0,d.jsx)(n.code,{children:"2"}),"、",(0,d.jsx)(n.code,{children:"3"})," 和 ",(0,d.jsx)(n.code,{children:"4"})," 个 ",(0,d.jsx)(n.code,{children:"li"})," 构成一个元素组，因为它们共享同一个类名 ",(0,d.jsx)(n.code,{children:".special"})," ，所以被分组在一起。同样地，列表中的第 ",(0,d.jsx)(n.code,{children:"6"})," 和 ",(0,d.jsx)(n.code,{children:"7"})," 个 ",(0,d.jsx)(n.code,{children:"li"})," 也是如此，它们也组成了一个元素组。甚至列表中的第 ",(0,d.jsx)(n.code,{children:"10"})," 个 ",(0,d.jsx)(n.code,{children:"li"})," 也是一个元素组，即使它只包含单个 ",(0,d.jsx)(n.code,{children:"li"})," 元素。"]}),"\n",(0,d.jsxs)(n.p,{children:["接下来，将使用 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器来选中我们希望选中的元素。"]}),"\n",(0,d.jsx)(n.p,{children:"首先来看选中“元素组”中的第一个元素。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".\uD83D\uDE0D:not(.\uD83D\uDE0D + .\uD83D\uDE0D) {\n    background: #09f;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:"这个选择器将会选中“元素组”中的第一个元素："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:p,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/PoymmPj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/PoymmPj"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:".\uD83D\uDE0D"}),"  选择所有具有 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D"})," 的元素。通过追加 ",(0,d.jsx)(n.code,{children:":not(.\uD83D\uDE0D + .\uD83D\uDE0D)"}),"，我们将排除前面有 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D"})," 的 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D"}),"。"]}),"\n",(0,d.jsx)(n.p,{children:"再来看第二个选择器，我们可以通过下面这个选择器来选中“元素组”中最后一个元素："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".\uD83D\uDE0D:not(:has(+ .\uD83D\uDE0D)) {\n    background: #f35;\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:["它的工作原理是选择任何不直接跟在另一个 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D"})," 后面的 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D"}),"。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:j,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/jOemmVv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOemmVv"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["注意，在此示例中，",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(.\uD83D\uDE0D + .\uD83D\uDE0D)"})," 选择器权重是 ",(0,d.jsx)(n.code,{children:"(0, 3, 0)"})," ，而 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(:has(+ .\uD83D\uDE0D))"})," 选择器权重是 ",(0,d.jsx)(n.code,{children:"(0, 2, 0)"})," ，因此，你看到第 ",(0,d.jsx)(n.code,{children:"11"})," 个列表项 ",(0,d.jsx)(n.code,{children:"li"})," 的背景依旧是 ",(0,d.jsx)(n.code,{children:"#09f"})," 。"]}),"\n",(0,d.jsxs)(n.p,{children:["你可以通过 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(.\uD83D\uDE0D + .\uD83D\uDE0D)"})," （选中“元素组”中第一个元素）和 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(:has(+ .\uD83D\uDE0D))"})," （选中“元素组”中最后一个元素）相结合，来选中仅一个元素组成的“元素组”："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".\uD83D\uDE0D:not(.\uD83D\uDE0D + .\uD83D\uDE0D):not(:has(+ .\uD83D\uDE0D)) {\n   background-color: #890aef;\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:["这个选择器选择那些没有前置 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D"})," 和没有后置 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D"})," 兄弟的 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D"})," 元素。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:x,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/GRYmmOM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRYmmOM"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["更为有意思的是，通过添加更多的  ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D"})," 条件，可以让你不仅限于选择“元素组”中的第一个或最后一个元素，你可以像 ",(0,d.jsx)(n.code,{children:":nth-child(n)"})," 选择器一样，选择“元素组”中的第 ",(0,d.jsx)(n.code,{children:"n"})," 个元素："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"/* 选择元素组中第二个元素 */\n.\uD83D\uDE0D:not(.\uD83D\uDE0D + .\uD83D\uDE0D) + .\uD83D\uDE0D {\n    background-color: #09f;\n}\n\n/* 选择元素组中第三个元素*/\n.\uD83D\uDE0D:not(.\uD83D\uDE0D + .\uD83D\uDE0D) + .\uD83D\uDE0D + .\uD83D\uDE0D {\n    background-color: #f35;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:t,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址： ",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/QWZvvVz",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWZvvVz"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["同样的，要条件中添加更多的 ",(0,d.jsx)(n.code,{children:"+ .\uD83D\uDE0D"})," 选择器，可以实现类似 ",(0,d.jsx)(n.code,{children:":last-nth-child()"})," 选择器，从“组元素”中后面向前数的第 ",(0,d.jsx)(n.code,{children:"n"})," 个元素："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:"/* 选择元素组中倒数第二个元素 */\n.\uD83D\uDE0D:not(:has(+ .\uD83D\uDE0D + .\uD83D\uDE0D)):has(+ .\uD83D\uDE0D) {\n    background-color: #09f;\n}\n\n/* 选择元素组中倒数第三个元素*/\n.\uD83D\uDE0D:not(:has(+ .\uD83D\uDE0D + .\uD83D\uDE0D + .\uD83D\uDE0D)):has(+ .\uD83D\uDE0D + .\uD83D\uDE0D) {\n    background-color: #f35;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:h,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址： ",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/WNajOrB",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNajOrB"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["正如你所看到的，我们可以使用 ",(0,d.jsx)(n.code,{children:":has()"})," 、",(0,d.jsx)(n.code,{children:":not()"})," 、",(0,d.jsx)(n.code,{children:"~"})," 和 ",(0,d.jsx)(n.code,{children:"+"})," 组合在一起，实现："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:":first-in-ElementGroups-of-class(.\uD83D\uDE0D)"})})," ，即选中元素组（",(0,d.jsx)(n.code,{children:"ElementGroups"}),"）中第一个元素（类名为 ",(0,d.jsx)(n.code,{children:"."}),(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"\uD83D\uDE0D"})}),"），对应的选择器为 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(.\uD83D\uDE0D + .\uD83D\uDE0D))"})," 。"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:":last-in-ElementGroups-of-class(.\uD83D\uDE0D)"})})," ，即选中元素组（",(0,d.jsx)(n.code,{children:"ElementGroups"}),"）中最后一个元素（类名为 ",(0,d.jsx)(n.code,{children:"."}),(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"\uD83D\uDE0D"})}),"），对应的选择器为 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(:has(+ .\uD83D\uDE0D))"})," 。"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:":single-in-ElementGroups-of-class(.\uD83D\uDE0D)"})})," ，即选中元素组（",(0,d.jsx)(n.code,{children:"ElementGroups"}),"）中仅有的一个元素（类名为 ",(0,d.jsx)(n.code,{children:"."}),(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"\uD83D\uDE0D"})}),"），对应的选择器为 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(.\uD83D\uDE0D + .\uD83D\uDE0D):not(:has(+ .\uD83D\uDE0D))"})," 。"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:":nth-in-ElementGroups-of-class(.\uD83D\uDE0D)"})})," ，即选中元素组（",(0,d.jsx)(n.code,{children:"ElementGroups"}),"）中的第 ",(0,d.jsx)(n.code,{children:"n"})," 个元素（类名为 ",(0,d.jsx)(n.code,{children:"."}),(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"\uD83D\uDE0D"})}),"）。比如 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(.\uD83D\uDE0D + .\uD83D\uDE0D) + .\uD83D\uDE0D"})," 选择元素组中第 ",(0,d.jsx)(n.code,{children:"2"})," 个元素（类名为 ",(0,d.jsx)(n.code,{children:"."}),(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"\uD83D\uDE0D"})}),"）；",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(.\uD83D\uDE0D + .\uD83D\uDE0D) + .\uD83D\uDE0D + .\uD83D\uDE0D"})," 选择元素组中第 ",(0,d.jsx)(n.code,{children:"3"})," 个元素（类名为 ",(0,d.jsx)(n.code,{children:"."}),(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"\uD83D\uDE0D"})}),"）。"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:":nth-last-in-island-of-class(.special)"})}),"，即选中元素组（",(0,d.jsx)(n.code,{children:"ElementGroups"}),"）中的倒数第 ",(0,d.jsx)(n.code,{children:"n"})," 个元素（类名为 ",(0,d.jsx)(n.code,{children:"."}),(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"\uD83D\uDE0D"})}),"）。比如 ",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(:has(+ .\uD83D\uDE0D + .\uD83D\uDE0D)):has(+ .\uD83D\uDE0D)"})," 选中元素组中倒数第 ",(0,d.jsx)(n.code,{children:"2"})," 个元素（类名为 ",(0,d.jsx)(n.code,{children:"."}),(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"\uD83D\uDE0D"})}),"），",(0,d.jsx)(n.code,{children:".\uD83D\uDE0D:not(:has(+ .\uD83D\uDE0D + .\uD83D\uDE0D + .\uD83D\uDE0D)):has(+ .\uD83D\uDE0D + .\uD83D\uDE0D)"})," 选中元素组中倒数第 ",(0,d.jsx)(n.code,{children:"3"})," 个元素（类名为 ",(0,d.jsx)(n.code,{children:"."}),(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"\uD83D\uDE0D"})}),"）。"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"你可以写一个简单的小工具，自动生成相应的选择器。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:o,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/jOemweW",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/jOemweW"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["基于该原理，你也可以使用 ",(0,d.jsx)(n.code,{children:":has()"})," 、",(0,d.jsx)(n.code,{children:":not()"})," 和 ",(0,d.jsx)(n.code,{children:"~"})," 组合在一起来模拟 ",(0,d.jsx)(n.code,{children:":nth-child(An+B [of S]?)"})," 和 ",(0,d.jsx)(n.code,{children:":nth-last-child(An+B [of S]?)"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:["先从简单的着手，使用下面选择器可以模拟出 ",(0,d.jsx)(n.code,{children:":nth-child(2 of .\uD83E\uDDB5)"})," 选择器，即 ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:":nth-child(B of S)"})}),"："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".\uD83E\uDDB5 ~ .\uD83E\uDDB5:not(.\uD83E\uDDB5 ~ .\uD83E\uDDB5 ~ .\uD83E\uDDB5) {\n    background-color: #09f;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:a,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/QWZvMMv",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWZvMMv"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"它的工作原理是："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["使用 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5 ~ .\uD83E\uDDB5"})," 选择所有前面有 ",(0,d.jsx)(n.code,{children:"1"})," 个 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})," 的 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})," ，从而有效地选择第 ",(0,d.jsx)(n.code,{children:"2"})," 个、第 ",(0,d.jsx)(n.code,{children:"3"})," 个、第 ",(0,d.jsx)(n.code,{children:"4"})," 个、第 ",(0,d.jsx)(n.code,{children:"n"}),"  个 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})," 兄弟元素。简单地说，会选择除了第一个 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})," 之外的所有 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})]}),"\n",(0,d.jsxs)(n.li,{children:["将该选择限制为排除任何前面有 ",(0,d.jsx)(n.code,{children:"2"})," 个 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})," 的 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"}),"，从而从初始选择中排除第 ",(0,d.jsx)(n.code,{children:"3"})," 个、第 ",(0,d.jsx)(n.code,{children:"4"}),"个、第  ",(0,d.jsx)(n.code,{children:"n"})," 个 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})," 兄弟元素。"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["也就是说，你可以通过在选择器中添加更多的 ",(0,d.jsx)(n.code,{children:"~ .\uD83E\uDDB5"})," 部分，来选择第 ",(0,d.jsx)(n.code,{children:"3"})," 个、第 ",(0,d.jsx)(n.code,{children:"4"})," 个、第 ",(0,d.jsx)(n.code,{children:"5"})," 个、第 ",(0,d.jsx)(n.code,{children:"n"})," 个 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})," 兄弟元素，从而实现 ",(0,d.jsx)(n.code,{children:":nth-child(B of S)"})," 选择器。"]}),"\n",(0,d.jsxs)(n.p,{children:["模拟 ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:":nth-last-child(B of S)"})}),"  选择器是相似的。比如，使用下面的代码可以模拟出 ",(0,d.jsx)(n.code,{children:":nth-last-child(3 of .\uD83E\uDDB5)"})," 选择器："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-CSS",children:".\uD83E\uDDB5:not(:has(~ .\uD83E\uDDB5 ~ .\uD83E\uDDB5 ~ .\uD83E\uDDB5)):not(.\uD83E\uDDB5:not(:has(~ .\uD83E\uDDB5 ~ .\uD83E\uDDB5))) {\n    background-color: #09f;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:i,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址： ",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/QWZvMeQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/QWZvMeQ"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"它的工作原理是："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["使用 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5:not(:has(~ .\uD83E\uDDB5 ~ .\uD83E\uDDB5 ~ .\uD83E\uDDB5))"})," 选择最后 ",(0,d.jsx)(n.code,{children:"3"})," 个 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})]}),"\n",(0,d.jsxs)(n.li,{children:["使用 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5:not(.\uD83E\uDDB5:not(:has(~ .\uD83E\uDDB5 ~ .\uD83E\uDDB5)))"})," 选择除最后 ",(0,d.jsx)(n.code,{children:"2"})," 个 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})," 之外的所有 ",(0,d.jsx)(n.code,{children:".\uD83E\uDDB5"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["从两个选择中取交集就得到了 ",(0,d.jsx)(n.code,{children:":nth-last-child(3 of .\uD83E\uDDB5)"}),"。"]}),"\n",(0,d.jsx)(n.p,{children:"同样地，你可以构建一个简单的工具，自动生成所需要的选择器："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:r,alt:"img"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Demo 地址：",(0,d.jsx)(n.a,{href:"https://codepen.io/airen/full/rNqmGrN",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/rNqmGrN"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["这样做主要是因为 ",(0,d.jsx)(n.code,{children:":nth-child(An+B [of S]?)"})," 和 ",(0,d.jsx)(n.code,{children:":nth-last-child(An+B [of S]?)"})," 选择器需要在 Chromium 111+、Safari 9+ 和 Firefox 113+ 上才能得到支持。而 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器得到浏览器支持的版本要更早。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:l,alt:"img"})}),"\n",(0,d.jsxs)(n.p,{children:["如果你想在和 ",(0,d.jsx)(n.code,{children:":has()"})," 以及 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器同浏览器版本上使用  ",(0,d.jsx)(n.code,{children:":nth-child(An+B [of S]?)"})," 和 ",(0,d.jsx)(n.code,{children:":nth-last-child(An+B [of S]?)"})," 选择器，前面的内容尤其有意义。反之，仅是使用 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 来模拟 ",(0,d.jsx)(n.code,{children:":nth-child(An+B [of S]?)"})," 和 ",(0,d.jsx)(n.code,{children:":nth-last-child(An+B [of S]?)"})," 选择器的话，意义不大。"]}),"\n",(0,d.jsxs)(n.p,{children:["事实上，这里仅是想通过这些实例来告诉大家 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器以及 ",(0,d.jsx)(n.code,{children:"~"})," 和 ",(0,d.jsx)(n.code,{children:"+"})," 选择器的组合，可以构建出强大的 CSS 选择器。"]}),"\n",(0,d.jsxs)(n.h2,{id:"小结",children:["小结",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在这节课中，主要向大家介绍了 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器的差异，以及它们的相互组合能构建出强大的 CSS 选择器。正如课程中示例所展示，",(0,d.jsx)(n.code,{children:":has()"})," 、",(0,d.jsx)(n.code,{children:":not()"})," 、",(0,d.jsx)(n.code,{children:"~"})," 和 ",(0,d.jsx)(n.code,{children:"+"})," 组合在一起，可以让你选择单个或多个范围内的元素、也可以模拟出 ",(0,d.jsx)(n.code,{children:":nth-child(An+B [of S]?)"})," 和 ",(0,d.jsx)(n.code,{children:":nth-last-child(An+B [of S]?)"})," 等选择器的功能。虽然这些选择器冗余和复杂，但其功能是强大的。"]}),"\n",(0,d.jsxs)(n.p,{children:["另外，这些组合选择器也从侧面告诉大家 ",(0,d.jsx)(n.code,{children:":has(:not())"})," 与 ",(0,d.jsx)(n.code,{children:":not(:has())"})," 是完全不同的。我们在使用它们的组合时，尤其需要注意这一点。"]}),"\n",(0,d.jsxs)(n.p,{children:["最后想说的是，虽然这些复杂的选择器我们用到的时候很少，但是希望大家在使用 ",(0,d.jsx)(n.code,{children:":has()"})," 和 ",(0,d.jsx)(n.code,{children:":not()"})," 选择器时，能打破固有的思维，创造出更适合生产与使用的高级选择器。"]})]})}function T(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(q,{...e})}):q(e)}let D=T;T.__RSPRESS_PAGE_META={},T.__RSPRESS_PAGE_META["%E7%8E%B0%E4%BB%A3CSS%2F%E7%AC%AC03%E7%AB%A0%E2%80%94CSS%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%9A%EF%BC%9Ahas()%E4%B8%8E%EF%BC%9Anot()%E7%9A%84%E7%BB%84%E5%90%88.md"]={toc:[{text:":has() 和 :not() 是什么？",id:"has-和-not-是什么",depth:2},{text:":has() 和 :not() 可以做什么？",id:"has-和-not-可以做什么",depth:2},{text:"可以将 :has() 和 :not() 组合在一起使用",id:"可以将-has-和-not-组合在一起使用",depth:2},{text:":has() 和 :not() 构建高级选择器",id:"has-和-not-构建高级选择器",depth:2},{text:"选择多个范围的组",id:"选择多个范围的组",depth:3},{text:"模拟 :nth-child(An+B [of S]?) 和 :nth-last-child(An+B [of S]?) 选择器",id:"模拟-nth-childanb-of-s-和-nth-last-childanb-of-s-选择器",depth:3},{text:"小结",id:"小结",depth:2}],title:"第03章—CSS选择器：：has()与：not()的组合",headingTitle:"第03章—CSS选择器：：has()与：not()的组合",frontmatter:{}}}}]);