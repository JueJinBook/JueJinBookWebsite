"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["77206"],{427252:function(e,n,r){e.exports=r.p+"static/image/5c9942ca57adca62d58e9d61e5f765e8.ff3d7373.webp"},192046:function(e,n,r){r.r(n),r.d(n,{default:()=>x});var s=r(552676),o=r(740453);let l=r.p+"static/image/305a3c2bd3e01474d9dc1f6b65d32888.a2e94b63.webp",t=r.p+"static/image/63bc48e16472ce870bd8e58abc9fd99d.fe15cfb5.webp",i=r.p+"static/image/519a3ae19a01bfb40cc3f3ffdd0d5dc7.6af27e5c.webp",c=r.p+"static/image/7043801a69666030ab71f4c0abaa7993.943f9336.webp",a=r.p+"static/image/54d31818a52cae78505a8a0aa49c7c81.5e7a42ca.webp";var d=r(427252);function h(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",blockquote:"blockquote",strong:"strong",img:"img",code:"code",ul:"ul",li:"li",h3:"h3",pre:"pre"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"8业务篇-简历制作之常用组件设计与简历数据设计",children:["8.业务篇-简历制作之常用组件设计与简历数据设计",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8业务篇-简历制作之常用组件设计与简历数据设计",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在上一章节，我们已将数据存储的功能实现，本章节继续采用上章节的 ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-07-op",target:"_blank",rel:"noopener noreferrer",children:"chapter-07-op"})," 分支进行开发。"]}),"\n",(0,s.jsx)(n.p,{children:"在简历制作之前，我想还是有必要单独写篇文章讲解一下常用组件的封装设计与数据字段设计，大家可能喜欢如上几章节的写作思路：先“粗暴编写”再“思考优化”，但在此章节中，我们需要稍微改变一下思考的方式，不要担心，先往下看。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["⚠️ 本章节最重要的是理解和思考，如果你对本章节内容兴趣不大，可以快速阅读或跳过。本章节不强制小伙伴们动手实现，我更希望你看完之后，能自己去思考，去尝试封装，最后再结合",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-08",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 chapter-08"}),"代码去看。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"组件化思想",children:["组件化思想",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件化思想",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"必须承认一点是：人的精力与能力是有限的，你是很难一次性处理好一大堆复杂问题的。但我们与生具备的一优秀特点，那就是拆解问题。如同写代码一样，我们将所有的处理逻辑均放在一个组件中，那么后续的维护、管理及扩展将会变得困难，我们要学会去“拆”逻辑、“拆”组件。"}),"\n",(0,s.jsxs)(n.p,{children:["React 核心思想是组件化，它期望我们通过拆解小颗粒化的组件，进行拼接，从而构造我们的应用。假设我们在一个组件中做完所有的事情，那这个组件属于多职责组件，它不需要区分各种职责，不用规划对应的结构。最终的结果导向为：定位问题时间成本相对较高，代码阅读上，极为痛苦。",(0,s.jsx)(n.a,{href:"https://zh-hans.reactjs.org/docs/thinking-in-react.html",target:"_blank",rel:"noopener noreferrer",children:"React 哲学"}),"里很明确的说道：",(0,s.jsx)(n.strong,{children:"组件应当遵循单一功能原则，换言之，一个组件原则上只能负责一个功能。"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"以上图为例，我们可以将它适当划分，下图是划分之后的层级关系"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["我们将这个页面划分成了 Header（头部）、Content（简历内容）、Toolbar（工具条）三个容器模块，以 Header 为主，它又包含着 Back 返回组件和 ExportButton 导出按钮组件，以这种拆分的形式，对每个模块进行逐层拆解。",(0,s.jsx)(n.strong,{children:"颗粒化拆分组件，需要思考怎样的颗粒度才合适。粒度不是越小越好，粒度最小太极端，会导致小型组件很多，管理困难。所以这个颗粒，一定是最适合被复用的程度。"})]}),"\n",(0,s.jsxs)(n.h2,{id:"组件封装",children:["组件封装",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件封装",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["接下来将会讲解目前简历应用平台的通用组件（当然随着业务开发，可能会越来越多），这里并不会贴代码实现，只会讲解其中的思考过程和为什么要封装。对于组件具体代码在 ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-08",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 chapter-08"}),"，小伙伴们自行前往阅读查看。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"组件封装为了更好书写样式名，这边采用 classnames 库进行处理"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"说白了，我们可以不用封装通用组件，所有的组件都可称之为“业务组件”，比如你点击了“导出”按钮后，显示弹窗，弹窗底部有两个按钮：确定按钮、取消按钮。"}),"\n",(0,s.jsx)(n.p,{children:"我们可以统称这三个按钮为业务按钮组件，每一个按钮对应自己的业务，自己的逻辑。这是合理的，只是我们自身认为不合理的地方是：他们有很多共性，在差异点上可能就文案的不同，颜色的不同，其余的交互效果一致（比如鼠标 hover 按钮、点击按钮之后的颜色改变等）正因为这些一致，在“下一次”新增业务组件时，我们都手动拷贝一份代码，这会导致项目中存在大量“重复”代码。正因为如此，我们才认为它是不合理的，也正因为这样，我们才要去封装公共组件。"}),"\n",(0,s.jsxs)(n.p,{children:["所有的通用组件均存放于 ",(0,s.jsx)(n.code,{children:"app/renderer/common/components"})," 中，通用组件共有："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"MyButton 按钮组件"}),"\n",(0,s.jsx)(n.li,{children:"MyInput 数据输入组件"}),"\n",(0,s.jsx)(n.li,{children:"MyUpload 文件上传组件"}),"\n",(0,s.jsx)(n.li,{children:"MyModal 弹窗组件"}),"\n",(0,s.jsx)(n.li,{children:"MyScrollBox 固定区域内的滚动组件"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"mybutton",children:["MyButton",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mybutton",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["组件代码地址：",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-08/app/renderer/common/components/MyButton",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 查看"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["之前写过一篇关于按钮组件的文章：",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/6844904134047432711",target:"_blank",rel:"noopener noreferrer",children:"前端渣渣的我再也不敢说我会写 Button 组件了"}),"，我也在思考，此简历应用是否需要封装一个复杂的按钮组件，思前想后，我觉得没必要，仅是对其做了简单的封装，保证在“一定程度”上实现逻辑功能。对于所有的业务按钮组件，皆是基于此组件进行衍生。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"<MyButton size=\"middle\" onClick={() => console.log('点击按钮')}>\n  导出PDF\n</MyButton>\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"myinput-组件",children:["MyInput 组件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#myinput-组件",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["组件代码地址：",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-08/app/renderer/common/components/MyInput",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 查看"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"在制作简历过程中，最重要的是用户信息的输入，我们可以通过 HTML 提供的 input 元素加以实现，这会造成的问题是："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"在组件中大量编写 input 代码"}),"\n",(0,s.jsx)(n.li,{children:"需要写一大段的 css 代码加以覆盖原生样式"}),"\n",(0,s.jsx)(n.li,{children:"可能需要重复编写一些额外操作功能的样式代码，如清空输入内容"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"当一个东西重复出现，在交互、样式上都基本一致，那么我们就需要思考斟酌一下：能否做成通用？"}),"\n",(0,s.jsxs)(n.p,{children:["其次对于内容的输入，除 input 外，我们还会使用 textarea 实现，它们最直观的区别莫过于单行文本与多行文本的差异。我们思考一下，能否将两种进行合并，在 MyInput 组件中实现各自的逻辑功能，业务端使用时，不需要根据场景去编写对应的处理逻辑，仅通过一个 ",(0,s.jsx)(n.code,{children:"type"})," 属性就能得到对应的组件效果。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"单行输入框"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<MyInput\n  value={base.username}\n  placeholder="请输入姓名" // 占位文本\n  allowClear={true} // 是否显示清除icon\n  onChange={(e) => console.log(e.target.value)}\n/>\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"多行输入框"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<MyInput\n  value={hobby || \'\'}\n  placeholder="你有什么特长爱好呢" // 占位文本\n  allowClear={true} // 是否显示清除icon\n  onChange={(e) => console.log(e.target.value)}\n  type="textarea" // 类型为多行文本\n  rows={5} // 输入文本的行数\n  maxLength={200} // 最多支持的文本长度\n  allowCount={true} // 是否显示底部文本字数\n/>\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"myupload",children:["MyUpload",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#myupload",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["组件代码地址：",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-08/app/renderer/common/components/MyUpload",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 查看"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们期望能给 HR 留下一个良好的第一印象，照片是最能体现的一个人的精神面貌，所以我们会存在一个简历头像的上传功能，那么问题点在于：",(0,s.jsx)(n.strong,{children:"如何实现本地文件上传并显示"}),"？"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"可能有小伙伴觉得，没必要单独搞个上传组件，这要看你的后期其他的需求上是否也存在上传的功能，我很明确的知悉，后续会有一些功能点，如：导入文件、图片，所以提前实现上传组件。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["经验老道的程序员第一反应就是：",(0,s.jsx)(n.code,{children:'<input type="file" accept="image/*" />'}),"，很快的，第一个版本的 ",(0,s.jsx)(n.code,{children:"<MyUpload />"})," 组件实现了，如你所想，该组件职责就是用于图片上传。"]}),"\n",(0,s.jsxs)(n.p,{children:["随即带来了问题，由于我们写死了 ",(0,s.jsx)(n.code,{children:'accept="image/*"'}),"，假设将来有其他资源的文件上传，该怎么办？当然有很多解决方案，这里我采用的解决方案是：封装基础的上传组件，基于此组件衍生出图片类型的上传组件，将来如果有其他资源类型的上传组件，只需要衍生即可。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"会不会有小伙伴存在疑问：为什么不将该 Upload 组件做得更加通用，所有东西都从由业务通过 props 决定呢？我有想过，之所以没这么设计的原因在于："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"部分逻辑要在业务端处理"}),"\n",(0,s.jsx)(n.li,{children:"样式 UI 的高度复用"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"我举个例子，我们默认的 input 样式如下"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"而往往我们都会自己实现一套 UI 样式，假设这里我们的样式效果为："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"如果在模版一是这种效果，是不是我得在模版一中实现这个 UI 样式（写一坨 CSS），那模版二呢？模版三呢？包括选择文件之后，隶属于文件处理的部分逻辑，是不是也需要在业务端处理呢？"}),"\n",(0,s.jsx)(n.p,{children:"这很好理解，我举个例子：当我选择一张图片之后，需要得到文件名、文件类型、文件大小，这些需要通过工具函数处理才能得到，这块逻辑放于业务层去处理，这属于业务层的工作吗？小伙伴们细品细品。"}),"\n",(0,s.jsx)(n.p,{children:"资源上传中还实现了一个 FileEvent 类，具体实现如下"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"class FileEvent {\n  public constructor(file: any) {\n    this.file = file;\n    this.uuid = createUID();\n    const types = file?.type?.split('/') || [];\n    this.fileType = types.length ? types[0] : '';\n    this.base64URL = window.URL.createObjectURL(file); // 本地预览地址\n  }\n\n  // 释放创建过的URL，不然会存在性能问题\n  // 详情可见 : https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL\n  public revokeFileBase64URL(base64URL: string) {\n    window.URL.revokeObjectURL(base64URL);\n  }\n\n  // 上传/取消上传/重试\n  public upload() {}\n  public cancel() {}\n  public retry() {}\n}\n\nexport default FileEvent;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"mymodal",children:["MyModal",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mymodal",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["组件代码地址：",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-08/app/renderer/common/components/MyModal",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 查看"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/6950646725295996940/section/6962435230061821952",target:"_blank",rel:"noopener noreferrer",children:"设计篇-需求功能设计与数据存储方案设计"}),"章节中表明，通过弹窗作为简历信息录入的交互效果，静下心思考，貌似这也算是通用的公共组件，主要用于内容信息展示的载体。由于弹窗类型有多种，比如 Toast 消息提示类型，再比如 Confirm 对话确定弹窗，为此 MyModal 组件各自实现了多套弹窗组件。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["对于弹窗深度思考，小伙伴们可以阅读",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/6950646725295996940/section/6962941125426413599",target:"_blank",rel:"noopener noreferrer",children:"优化篇-公共弹窗拆解优化，让职能更加单一"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"/**\n * @description 所有弹窗组件集合\n * 方式一：\n * import MyModal from '@components/MyModal';\n * <MyModal.Confirm />\n *\n * 方式二：\n * import { Confirm } from '@components/MyModal';\n * <Confirm />\n */\nimport MyDialog from './MyDialog';\nimport MyConfirm from './MyConfirm';\n\nexport const Dialog = MyDialog;\nexport const Confirm = MyConfirm;\n\nexport default {\n  Dialog: MyDialog,\n  Confirm: MyConfirm,\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"而在业务中可以很简单的使用"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<MyModal.Confirm\n  title="确定要打印简历吗？"\n  description="请确保信息的正确，目前仅支持单页打印哦～"\n  config={{\n    cancelBtn: {\n      isShow: true,\n      callback: () => {},\n    },\n    submitBtn: {\n      isShow: true,\n      callback: () => toPrintPdf(\'彭道宽+前端工程师\'),\n    },\n  }}\n/>\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"myscrollbox",children:["MyScrollBox",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#myscrollbox",children:"#"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["组件代码地址：",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-08/app/renderer/common/components/MyScrollBox",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 查看"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"该组件的职责功能是：在给定的一个最大高度内，超出高度滚动展示。"}),"\n",(0,s.jsx)(n.p,{children:"我们常常会有一些交互效果是给容器定个最大高度，如果展示内容超出此高度，则在此容器内进行滚动，但往往我们会出现默认的滚动条，及其不美观，于是在去掉滚动条的基础上进行组件封装，从而达到我们期望的效果。下面是业务中的使用"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import MyScrollBox from '@common/components/MyScrollBox';\n\nfunction Resume() {\n  const HEADER_HEIGHT = 60;\n  const height = document.body.clientHeight;\n\n  return (\n    <div styleName=\"container\">\n      <MyScrollBox maxHeight={height - HEADER_HEIGHT}>\n        <Template.TemplateOne />\n      </MyScrollBox>\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"简历数据设计",children:["简历数据设计",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简历数据设计",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["一份简历最为重要的莫过于数据字段的设计，在说字段设计之前，我们往 redux 中添加一份简历信息的 model，进入 ",(0,s.jsx)(n.code,{children:"app/renderer/store"})," 文件夹中，新增一份代码文件，取名为: ",(0,s.jsx)(n.code,{children:"resumeModel"}),"，然后将其添加到 reducerList 中。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["这边通过 TSRcReduxModel 与 TSResume 对其进行了类型约束，小伙伴们可前往 ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-08/app/renderer/common/types",target:"_blank",rel:"noopener noreferrer",children:"types"})," 查看"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/renderer/store/index.ts\n// \uD83D\uDC47 引入我们写好的 model\nimport globalModel from './globalModel';\nimport resumeModel from './resumeModel';\n\n// \uD83D\uDC47 这里只需要调用 RcReduxModel 实例化一下得到最后的 reduxModel\nconst reduxModel = new RcReduxModel([globalModel, resumeModel]);\n\n// \uD83D\uDC47 无侵入式的使用 Redux，即使你写最原始的 reducer 也照样支持\nconst reducerList = combineReducers(reduxModel.reducers);\n\nexport default createStore(reducerList, applyMiddleware(reduxModel.thunk, logger));\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/renderer/store/resumeModel.ts\nconst resumeModel: TSRcReduxModel.Props<TSResume.IntactResume> = {\n  namespace: 'resumeModel',\n  openSeamlessImmutable: true,\n  state: {\n    // 简历信息字段\n  },\n};\n\nexport default resumeModel;\n"})}),"\n",(0,s.jsx)(n.p,{children:"接下来让我们愉快的讨论一下简历数据有哪些字段吧？如果按照模块来分，我们是否能划分出下面几大模块？"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"基本信息"}),"\n",(0,s.jsx)(n.li,{children:"联系方式"}),"\n",(0,s.jsx)(n.li,{children:"求职意向"}),"\n",(0,s.jsx)(n.li,{children:"技能清单"}),"\n",(0,s.jsx)(n.li,{children:"个人评价"}),"\n",(0,s.jsx)(n.li,{children:"荣誉证书"}),"\n",(0,s.jsx)(n.li,{children:"在校经验"}),"\n",(0,s.jsx)(n.li,{children:"工作经验"}),"\n",(0,s.jsx)(n.li,{children:"项目经验"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["模块划分出来后，剩下的就好办了，下面是一份完整的简历数据格式，关于类型定义可看 ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/blob/chapter-08/app/renderer/common/types/resume.d.ts",target:"_blank",rel:"noopener noreferrer",children:"resume.d.ts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const userResume = {\n  base: {\n    avatar: '',\n    username: '彭道宽',\n    area: '海南\xb7海口',\n    school: '湖南瞎说大学',\n    major: '软件工程',\n    degree: '本科',\n    hometown: '汉族',\n    onSchoolTime: {\n      beginTime: '2015.09',\n      endTime: '2019.06',\n    },\n  },\n  contact: {\n    phone: '176****2612',\n    email: '1063137960@qq.com',\n    github: 'https://github.com/PDKSophia',\n    juejin: 'https://juejin.cn/user/1838039171075352',\n  },\n  work: {\n    job: '前端工程师',\n    city: '广州｜成都｜海口',\n    cityList: ['广州', '成都', '海口'],\n  },\n  hobby: '篮球、爬山、健身、吉他、街舞',\n  skill: '熟悉 Vue.js，了解数据双向绑定原理、阅读过 NextTick 源码｜熟悉 React，了解并使用 Hooks 特性，阅读过 redux 源码，开发 rc-redux-model 中间件｜阅读过 Antd 部分优秀组件源码，并参考借鉴，开发组内 UI 组件库｜了解 Vscode，开发组内项目辅助工具 vscode-beehive-extension 插件｜了解 Webpack 编译原理，了解 babel 转码原理，编写过 babel 插件｜了解 Electron，了解 Node.js 以及 Git 团队协作开发工具｜了解设计模式，对于特定场景，能采用合适的设计模式进行解决｜了解 MYSQL，了解数据库优化常用方法｜了解基于微信公众号应用开发，采用 Taro 开发微信小程序，具备良好的网络基础知识',\n  skillList: [\n    '熟悉 Vue.js，了解数据双向绑定原理、阅读过 NextTick 源码',\n    '熟悉 React，了解并使用 Hooks 特性，阅读过 redux 源码，开发 rc-redux-model 中间件',\n    '阅读过 Antd 部分优秀组件源码，并参考借鉴，开发组内 UI 组件库',\n    '了解 Vscode，开发组内项目辅助工具 vscode-beehive-extension 插件',\n    '了解 Webpack 编译原理，了解 babel 转码原理，编写过 babel 插件',\n    '了解 Electron，了解 Node.js 以及 Git 团队协作开发工具',\n    '了解设计模式，对于特定场景，能采用合适的设计模式进行解决',\n    '了解 MYSQL，了解数据库优化常用方法',\n    '了解基于微信公众号应用开发，采用 Taro 开发微信小程序，具备良好的网络基础知识',\n  ],\n  evaluation: '投身开源，rc-redux-model 库作者，SugarTurboS Club 开源组织负责人| 掘金 lv3 博主，掘金文章 10w+ 阅读量，github blog 300+ star | 具备良好语言表达能力和沟通能力，能快速融入团队，适应新环境|具有代码洁癖，前后端分离，自我学习能力强，对新技术具有钻研精神',\n  evaluationList: [\n    '投身开源，rc-redux-model 库作者，SugarTurboS Club 开源组织负责人',\n    '掘金 lv3 博主，掘金文章 10w+ 阅读量，github blog 300+ star',\n    '具备良好语言表达能力和沟通能力，能快速融入团队，适应新环境。',\n    '具有代码洁癖，前后端分离，自我学习能力强，对新技术具有钻研精神',\n  ],\n  certificate: '广州第一届喝酒大赛参与奖',\n  certificateList: ['广州第一届喝酒大赛参与奖'],\n  schoolExperience: [\n    {\n      beginTime: '2016.09',\n      endTime: '2017.09',\n      post: '文艺部会长',\n      department: '校团委学生会',\n      content: '计划、组织、协调各年级学生组织的文艺和文化娱乐活动｜承办好学生会部的学生文艺晚会。有效地与社团部开展合作项目',\n      parseContent: [\n        '计划、组织、协调各年级学生组织的文艺和文化娱乐活动',\n        '承办好学生会部的学生文艺晚会。有效地与社团部开展合作项目',\n      ],\n    },\n  ],\n  workExperience: [\n    {\n      beginTime: 1504195200000,\n      endTime: 1559318400000,\n      post: '前端工程师',\n      department: '湖南瞎说大学网络中心',\n      content: '担任TickNet工作室前端工程师，与湖南瞎说大学网络中心合作，围绕微信企业号开发或主导多个应用｜任职期间基于微信企业号开发校内闲余市场，采用Vue.js主导开发，并与湖南xxx科技有限公司合作，主导开发该公司官网及后台管理',\n      parseContent: [\n        '担任TickNet工作室前端工程师，与湖南瞎说大学网络中心合作，围绕微信企业号开发或主导多个应用',\n        '任职期间基于微信企业号开发校内闲余市场，采用Vue.js主导开发，并与湖南xxx科技有限公司合作，主导开发该公司官网及后台管理',\n      ],\n    },\n  ],\n  projectExperience: [\n    {\n      beginTime: '2021.03',\n      endTime: '2021.05',\n      projectName: 'visResumeMook 可视化简历平台',\n      post: '前端工程师',\n      content:\n        'Electron + React Hooks 打造简历平台，只需输入一次信息，套用多份模版｜通过 jsonfile 方式实现主题换肤，支持导出 PDF 简历文档｜通过 indexDB 方式实现历史简历缓存，通过可视化拖拽形式，自定义组件模版',\n      parseContent: [\n        'Electron + React Hooks 打造简历平台，只需输入一次信息，套用多份模版',\n        '通过 jsonfile 方式实现主题换肤，支持导出 PDF 简历文档',\n        '通过 indexDB 方式实现历史简历缓存，通过可视化拖拽形式，自定义组件模版',\n      ],\n      date: 1621145137865,\n    },\n  ],\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"简历模版",children:["简历模版",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简历模版",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["简历模板就不带大家开发了，无非就是 HTML + CSS 实现的一套静态简历模版，由于时间有限，目前暂时先支持一份模版，该模版地址在： ",(0,s.jsx)(n.a,{href:"https://github.com/PDKSophia/visResumeMook/tree/chapter-08/app/renderer/container/templates/templateOne",target:"_blank",rel:"noopener noreferrer",children:"\uD83D\uDC49 template-one"})]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["本章节更多的是将部分通用组件、类型定义文件、Utils 工具函数、icon 图标等与主流程功能关系不大的事先在项目中准备好，也许有小伙伴会有疑问，",(0,s.jsx)(n.strong,{children:"你为什么知道要封装这些组件？"})]}),"\n",(0,s.jsx)(n.p,{children:"在确定产品原型以及交互效果之后，我们会进入一个叫做技术评审环节，我会将项目中，每个功能点进行拆分，通过什么技术能实现这个功能点，这个功能是否通用，在这样反复提问自己的过程中，抽丝剥茧，最后确定好部分通用模块，从而进行实现。"}),"\n",(0,s.jsx)(n.p,{children:"这章节动手较少，更多的是思考和代码阅读，我希望你不要一下子去看通用组件的实现，而是尝试自己动手写一写，只有动手才能知道何为“乐趣”。最后再结合项目中的组件代码 review 一遍。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["如果你真的想了解一个通用组件如何去设计去思考去开发，也许我这篇",(0,s.jsx)(n.a,{href:"https://juejin.cn/post/6844904134047432711",target:"_blank",rel:"noopener noreferrer",children:"前端渣渣的我再也不敢说我会写 Button 组件了"}),"文章能给你一点帮助。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"如果您在边阅读边实践时，发现代码报错或者 TS 报错，那么小伙伴们可以根据报错信息，去线上看看相应的代码。"})}),"\n",(0,s.jsx)(n.p,{children:"如果对本章节存在疑问，欢迎在评论区留言。"})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}let x=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["Electron%20%2B%20React%20%E4%BB%8E%200%20%E5%88%B0%201%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8E%86%E5%B9%B3%E5%8F%B0%E5%AE%9E%E6%88%98%2F8.%E4%B8%9A%E5%8A%A1%E7%AF%87-%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%AE%80%E5%8E%86%E6%95%B0%E6%8D%AE%E8%AE%BE%E8%AE%A1.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"组件化思想",id:"组件化思想",depth:2},{text:"组件封装",id:"组件封装",depth:2},{text:"MyButton",id:"mybutton",depth:3},{text:"MyInput 组件",id:"myinput-组件",depth:3},{text:"MyUpload",id:"myupload",depth:3},{text:"MyModal",id:"mymodal",depth:3},{text:"MyScrollBox",id:"myscrollbox",depth:3},{text:"简历数据设计",id:"简历数据设计",depth:2},{text:"简历模版",id:"简历模版",depth:2},{text:"总结",id:"总结",depth:2}],title:"8.业务篇-简历制作之常用组件设计与简历数据设计",headingTitle:"8.业务篇-简历制作之常用组件设计与简历数据设计",frontmatter:{}}}}]);