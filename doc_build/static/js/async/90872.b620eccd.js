"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["90872"],{631885:function(e,n,s){s.r(n),s.d(n,{default:()=>z});var i=s(552676),c=s(740453);let r=s.p+"static/image/1c0ef7007b807ac2a28d3e2eb0be971c.c03361a7.webp",a=s.p+"static/image/c96debf0853871a2c6c2a74317f2346f.136d3d68.gif",d=s.p+"static/image/2f9b11cd81376e53b5823dd9f08cafdb.f8222c3a.webp",t=s.p+"static/image/9e1aacbc66bebd8e1076b9dd94aae10a.bec8dde9.webp",l=s.p+"static/image/821d05d10367d3ff16260e3707d913ce.5cf8bd64.gif",p=s.p+"static/image/3e187588912cfccb2043ac300061273e.4b5695bd.webp",o=s.p+"static/image/e6d7b3d5e6a903d87c4fe7373c07520b.5d3600d0.webp",h=s.p+"static/image/2c8905acd0692462ad968f4318aecd9e.ca5746d2.webp",j=s.p+"static/image/d02ebca949aa69f7edd6a01dd2e15538.a29b8480.webp",x=s.p+"static/image/1b34aec6bd215dc864064ca17e98ef8e.a77c9523.gif",m=s.p+"static/image/f24f089ffa751992b715b863ee833123.b8470c38.gif",g=s.p+"static/image/78ea4cd98c1ed2d9774dcb68d7801fcd.ab89b1af.gif",f=s.p+"static/image/1a5217a8c12e8e70e1de98b609ba303d.f8fdacbc.gif",b=s.p+"static/image/8f02658bcdc138486eb1c6442401f5c4.d7ae068b.gif",u=s.p+"static/image/ffd975a5e593afeb4e95e93d3fefe684.71e59dcb.webp",_=s.p+"static/image/6135e96eb7b0c0f9b1df2c55bf3e9e45.d8ddb3b7.webp",y=s.p+"static/image/353b0cbec9843d22e5ab2af28a6c6dec.e9955518.webp",v=s.p+"static/image/ff6e7d968ec76044e5a82a847b07a784.3c102893.webp",w=s.p+"static/image/e6187bb2043f382d14404eff86594b9e.6cd0d824.webp",k=s.p+"static/image/4cc474f5d30ac197c5df369140859d5d.c0b1b3f5.webp",E=s.p+"static/image/78981db392b2621412a2e25cbb23e042.e358f87f.webp",U=s.p+"static/image/9c6afaf7f3ae588fdb58d58dc55916d2.f2724dea.webp",P=s.p+"static/image/b9c00dbdadfc5c8179ac968f727e57aa.0d4c4d60.webp",D=s.p+"static/image/7855353075316c0b61b556f6e4e96371.32602acd.webp",A=s.p+"static/image/a545f21c9ab8ea317c40280954e43abe.8abbf69e.webp",N=s.p+"static/image/be2b8b6bd74f9abf10e0666d2932c8d2.cd342abb.webp",I=s.p+"static/image/0195add802d2a546083e631cb495749e.2aec6f41.webp",R=s.p+"static/image/7e25d50d232a137be867042c159b2c06.7aa27974.webp",S=s.p+"static/image/dd77224e931771232278c5216e58f94f.924ae5d4.webp",T=s.p+"static/image/befc0c2bca5aefb2e5a46c435d888627.24818de0.webp",B=s.p+"static/image/fb72120345e61530541c80c32db1e507.802c1529.webp",O=s.p+"static/image/e60707bef24a0e2d3d7784dd1473739f.e9694402.webp",C=s.p+"static/image/5af4d8a12e1b89af6884004f09169e70.c3556df5.webp",L=s.p+"static/image/c695cd1cf69062364983c0dc1c394ebb.9f1567f1.webp",M=s.p+"static/image/39a45c596ba991b52c06e9dd4092df2c.e05a6a21.webp",F=s.p+"static/image/0c6370c459776b833e485a65237eff46.af734396.gif",q=s.p+"static/image/0456860c24f0d09b4587efe87b8d669f.fdf2ff61.webp",G=s.p+"static/image/171b64791072799ea97e1c1af81e9dc0.1530ff32.webp",$=s.p+"static/image/54fa04191344fc9b120a490d3a1ee2cf.2508b15d.webp";function Q(e){let n=Object.assign({p:"p",h2:"h2",a:"a",img:"img",pre:"pre",code:"code",ul:"ul",li:"li"},(0,c.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"会议室预定系统的后端功能我们实现的差不多了，但是代码层面还是有很多可以优化的地方。"}),"\n",(0,i.jsx)(n.p,{children:"这节我们集中优化下。"}),"\n",(0,i.jsxs)(n.h2,{id:"env",children:[".env",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#env",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们在 .env 文件里保存着 redis、mysql、nodemailer、nest 服务、jwt、minio 的配置："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:$,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"其实 google 登录的 client id 和 client secret 也应该在这里配置。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:G,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# 135. 会议室预定系统：后端代码优化\ngoogle_login_client_id=xxx\ngoogle_login_client_secret=xxx\ngoogle_login_callback_url=http://localhost:3005/user/callback/google\n"})}),"\n",(0,i.jsx)(n.p,{children:"然后 google.strategy.ts 里取出来："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:q,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"constructor(configService: ConfigService) {\n    super({\n      clientID: configService.get('google_login_client_id'),\n      clientSecret: configService.get('google_login_client_secret'),\n      callbackURL: configService.get('google_login_callback_url'),\n      scope: ['email', 'profile'],\n    });\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"测试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:F,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,i.jsxs)(n.p,{children:["其实这个 client id 是测试用的，线上的肯定要另外申请，因为线上肯定不会是 ",(0,i.jsx)(n.a,{href:"http://localhost:3005",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3005"})," 的域名。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:M,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"也就是说，dev 环境和 prod 环境的 .env 是不同的。"}),"\n",(0,i.jsx)(n.p,{children:"所以我们要支持多个环境的 .env 的加载。"}),"\n",(0,i.jsx)(n.p,{children:"新建一个 src/.dev.env 的配置文件："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:L,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"其他配置都一样，只是把启动端口改为 3006"}),"\n",(0,i.jsx)(n.p,{children:"然后 ConfigModule 的 envFilePath 指定多个 .env 文件："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"ConfigModule.forRoot({\n  isGlobal: true,\n  envFilePath: [ path.join(__dirname, '.env'), path.join(__dirname, '.dev.env')]\n}),\n"})}),"\n",(0,i.jsx)(n.p,{children:"当指定多个 .env 文件时，配置会做合并，但是相同的 key 前面的配置生效。"}),"\n",(0,i.jsx)(n.p,{children:"也就是说有 .env 的时候，它的配置优先生效。"}),"\n",(0,i.jsx)(n.p,{children:"跑起来试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:O,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"端口是 3005。"}),"\n",(0,i.jsx)(n.p,{children:"删掉 .dev.env 再跑试试："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"现在就是跑在 .env 里配置的 3006 端口了，也就是 .dev.env 生效了。"}),"\n",(0,i.jsx)(n.p,{children:"而且这个 .env 也可以不提交到 git 仓库，部署的时候手动把文件复制过去。"}),"\n",(0,i.jsx)(n.p,{children:"这样就没有泄漏的风险了。"}),"\n",(0,i.jsx)(n.p,{children:"这样，本地测试的配置写在 .dev.env 里，而线上生产环境的配置写在 .env 里。"}),"\n",(0,i.jsxs)(n.h2,{id:"docker-composeyml",children:["docker-compose.yml",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#docker-composeyml",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"前面章节添加了 minio 做 OSS 文件存储，但是并没有把它加到 docker compose 配置文件里。"}),"\n",(0,i.jsx)(n.p,{children:"我们加一下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"minio-container:\n  image: bitnami/minio:latest\n  ports:\n    - 9000:9000\n    - 9001:9001\n  volumes:\n    - /Users/guang/minio:/bitnami/minio/data\n  environment:\n    MINIO_ROOT_USER: guang\n    MINIO_ROOT_PASSWORD: dongdong\n  networks:\n    - common-network\n"})}),"\n",(0,i.jsx)(n.p,{children:"虽然有了桥接网络，多个容器之间可以通过容器名访问，但是这个 minio 还是需要暴露端口出来的。"}),"\n",(0,i.jsx)(n.p,{children:"因为管理界面、保存在 minio 的图片都需要直接访问。"}),"\n",(0,i.jsx)(n.p,{children:"把配置文件里的连接配置都改为容器名："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"注释掉 fe 的容器，并且给 nest 容器映射下 3005 端口："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这里只测试下 nest 服务和 minio 服务就好了。"}),"\n",(0,i.jsx)(n.p,{children:"跑一下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"docker-compose up\n"})}),"\n",(0,i.jsx)(n.p,{children:"注意，要先把你本地的 minio 容器停掉，不然 9000、9001 是被占用的。"}),"\n",(0,i.jsx)(n.p,{children:"nest 和 minio 都跑起来了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:I,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["浏览器访问下 minio 管理页面 ",(0,i.jsx)(n.a,{href:"http://localhost:9001/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:9001/"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:N,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,i.jsx)(n.p,{children:"访问下 minio 预签名的接口："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"也没问题，说明 nest 连接 minio 也是成功的。"}),"\n",(0,i.jsx)(n.p,{children:"回过头来，我们再来优化下 docker-compose.yml"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:D,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"可以通过 command 指定容器启动时执行的命令。"}),"\n",(0,i.jsx)(n.p,{children:"我们在 mysql 容器启动的时候，修改默认字符集为 utf8"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:P,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci # 设置默认字符集\n"})}),"\n",(0,i.jsx)(n.p,{children:"此外，每个容器都应该加上重启策略："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:U,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"当容器意外停掉时重启。"}),"\n",(0,i.jsxs)(n.h2,{id:"dto",children:["dto",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dto",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["在",(0,i.jsx)(n.a,{href:"https://juejin.cn/book/7226988578700525605/section/7361740248814747700",target:"_blank",rel:"noopener noreferrer",children:"如何灵活创建 dto"})," 那节讲过，可以用 @nestjs/mapped-types 的 PartialType、PickType、OmitType、IntersectionType 来灵活创建 dto。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"PickType 是从已有 dto 类型中取某个字段。"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"OmitType 是从已有 dto 类型中去掉某个字段。"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"PartialType 是把 dto 类型变为可选。"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"IntersectionType 是组合多个 dto 类型。"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"用这些方法，可以轻松的基于已有 dto 创建出新的 dto。"}),"\n",(0,i.jsx)(n.p,{children:"我们改造下现有 dto："}),"\n",(0,i.jsx)(n.p,{children:"比如 LoginUserDto："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"它的 username 和 password 在 RegiseterUserDto 里就可以复用："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"而 UpdateUserPasswordDto 和 UpdateUserDto 也可以复用 RegisterUserDto 的某些字段："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"所以 RegisterUserDto 可以简化成这样："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, MinLength } from \"class-validator\";\nimport { LoginUserDto } from \"./login-user.dto\";\nimport { PickType } from \"@nestjs/mapped-types\";\n\nexport class RegisterUserDto extends PickType(LoginUserDto, ['username', 'password']){\n    @IsNotEmpty({\n        message: '昵称不能为空'\n    })\n    @ApiProperty()\n    nickName: string;\n\n    @IsNotEmpty({\n        message: '邮箱不能为空'\n    })\n    @IsEmail({}, {\n        message: '不是合法的邮箱格式'\n    })\n    @ApiProperty()\n    email: string;\n    \n    @IsNotEmpty({\n        message: '验证码不能为空'\n    })\n    @ApiProperty()\n    captcha: string;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"继承 LoginUserDto 里的两个字段。"}),"\n",(0,i.jsx)(n.p,{children:"而 UpdateUserPasswordDto 的字段可以全部从 RegisterUserDto 继承："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { ApiProperty, PickType } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, MinLength } from \"class-validator\";\nimport { LoginUserDto } from \"./login-user.dto\";\nimport { RegisterUserDto } from \"./register-user.dto\";\n\nexport class UpdateUserPasswordDto extends PickType(RegisterUserDto, ['email', 'captcha', 'username', 'password']){\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"UpdateUserDto 也是可以复用 RegisterUserDto 的大部分字段："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { ApiProperty } from "@nestjs/swagger";\nimport { IsEmail, IsNotEmpty } from "class-validator";\nimport { RegisterUserDto } from "./register-user.dto";\nimport { IntersectionType, PartialType, PickType } from "@nestjs/mapped-types";\n\nexport class UpdateUserDto extends PickType(RegisterUserDto, [\'email\', \'captcha\']){\n\n    @ApiProperty()\n    headPic: string;\n\n    @ApiProperty()\n    nickName: string;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"把 frontend_user 跑起来，测试下这些功能："}),"\n",(0,i.jsxs)(n.p,{children:["注册：\n",(0,i.jsx)("img",{src:b,alt:""})]}),"\n",(0,i.jsxs)(n.p,{children:["修改密码：\n",(0,i.jsx)("img",{src:f,alt:""})]}),"\n",(0,i.jsx)(n.p,{children:"登录："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"修改个人信息："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"都没问题。"}),"\n",(0,i.jsxs)(n.h2,{id:"captcha",children:["captcha",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#captcha",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"现在的验证码其实有个问题："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"发送了一个邮箱验证码之后下次修改信息还可以用这个验证码。"}),"\n",(0,i.jsx)(n.p,{children:"因为在 redis 里这个验证码会保存 10 分钟："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"其实应该用完一次就删掉的。"}),"\n",(0,i.jsx)(n.p,{children:"我们在 RedisSercie 添加一个 del 方法："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async del(key: string) {\n    await this.redisClient.del(key);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"更新完信息就调用它删掉验证码："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@Post(['update', 'admin/update'])\n@RequireLogin()\nasync update(@UserInfo('userId') userId: number, @Body() updateUserDto: UpdateUserDto) {\n    const res = await this.userService.update(userId, updateUserDto);\n\n    this.redisService.del(`update_user_captcha_${updateUserDto.email}`);\n\n    return  res;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@Post(['update_password', 'admin/update_password'])\nasync updatePassword(@Body() passwordDto: UpdateUserPasswordDto) {\n    const res = await this.userService.updatePassword(passwordDto);\n\n    this.redisService.del(`update_password_captcha_${passwordDto.email}`);\n\n    return res;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"测试下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"现在一个验证码就只能用一次了。"}),"\n",(0,i.jsx)(n.p,{children:"只不过提示不大对，应该提示这个："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"改一下 front_user 项目里 UpdateInfo 组件的 onFinish 的处理："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"状态码非 20x 的时候展示返回的错误信息。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"现在就对了。"}),"\n",(0,i.jsx)(n.p,{children:"front_admin 项目里的 InfoModify 组件也要做同样的修改："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["案例代码上传了",(0,i.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"})]}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"这节我们对后端代码做了一些优化："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:".env：分开了 .dev.env 和 .env 分别用于开发和生产环境，分别用不同的配置。"}),"\n",(0,i.jsx)(n.li,{children:"docker-compose.yml：添加了 minio 的容器，和 nest 集成成功，并且添加了 mysql 容器启动时设置字符集的命令，还添加了 restart 容器重启配置"}),"\n",(0,i.jsx)(n.li,{children:"dto：用 mapped-types 包的 PickTypes 等 api 对 dto 做了简化，直接复用已有 dto 的字段"}),"\n",(0,i.jsx)(n.li,{children:"captcha：验证码用完之后就从 redis 中删掉，并且前端提示验证码失效"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"开发的时候只想着完成功能，但代码中有很多可以优化的点，这些可以逐步优化。"})]})}function W(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Q,{...e})}):Q(e)}let z=W;W.__RSPRESS_PAGE_META={},W.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F135.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E5%AE%9A%E7%B3%BB%E7%BB%9F%EF%BC%9A%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96.md"]={toc:[{text:".env",id:"env",depth:2},{text:"docker-compose.yml",id:"docker-composeyml",depth:2},{text:"dto",id:"dto",depth:2},{text:"captcha",id:"captcha",depth:2},{text:"总结",id:"总结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);