"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["64492"],{611133:function(n,e,s){n.exports=s.p+"static/image/64cce92c0a81e0960b84f34ff86c9d6b.1dd37a03.webp"},50504:function(n,e,s){s.r(e),s.d(e,{default:()=>b});var a=s(552676),r=s(740453);let t=s.p+"static/image/6fc0e0c37693ef9d3cbe1c5c05b47033.a5c6f4ad.webp",i=s.p+"static/image/aa456de017c7d3ce5396e4a81e84717f.7cbcca7f.webp",c=s.p+"static/image/17903f533bf16ff232906ba5add99ab8.665b1bdd.webp",o=s.p+"static/image/9545f595628c6909d3d550974e45ab41.d163bc7c.webp";var d=s(611133);let p=s.p+"static/image/5ea7610e0bb7b66480a4281a21f4544e.d2df4221.webp",l=s.p+"static/image/35be5efcf96562af158a7e6e19927fa3.25a56fa4.webp",m=s.p+"static/image/389dd12c5f578b000d664c2f8e9ec1de.55e272ea.gif",u=s.p+"static/image/8ef49d215b18171174b8fdad3fc032a1.82ba058f.gif",h=s.p+"static/image/6b5ff41a6cc3b581daf6f9020d97d137.0f2eb9ab.webp",x=s.p+"static/image/4a308778105bc1cd2f90ffe834ef9742.e568d48b.gif",g=s.p+"static/image/4e0e75b6ca125c9f3bad67dc2fc68e73.b60a2780.webp";function j(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,r.ah)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"162-考试系统修改密码试卷列表页面",children:["162. 考试系统：修改密码、试卷列表页面",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#162-考试系统修改密码试卷列表页面",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"这节继续来写修改密码页面，还有试卷列表页面："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(e.p,{children:"首先是修改密码的页面 src/pages/UpdatePassword："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'import { Button, Form, Input, message } from \'antd\';\nimport { useForm } from \'antd/es/form/Form\';\nimport \'./index.css\';\nimport { useCallback } from \'react\';\nimport { Link, useNavigate } from \'react-router-dom\';\n\nexport interface UpdatePassword {\n    email: string;\n    captcha: string;\n    password: string;\n    confirmPassword: string;\n}\n\nconst layout1 = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\n\nexport function UpdatePassword() {\n    const [form] = useForm();\n    const navigate = useNavigate();\n\n    const onFinish = async (values: UpdatePassword) => {\n        console.log(values);\n    }\n\n    const sendCaptcha = async function () {\n        console.log(\'send captcha\')\n    }\n\n    return <div id="updatePassword-container">\n        <h1>考试系统</h1>\n        <Form\n            form={form}\n            {...layout1}\n            onFinish={onFinish}\n            colon={false}\n            autoComplete="off"\n        >\n            <Form.Item\n                label="用户名"\n                name="username"\n                rules={[\n                    { required: true, message: \'请输入用户名!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="邮箱"\n                name="email"\n                rules={[\n                    { required: true, message: \'请输入邮箱!\' },\n                    { type: "email", message: \'请输入合法邮箱地址!\'}\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <div className=\'captcha-wrapper\'>\n                <Form.Item\n                    label="验证码"\n                    name="captcha"\n                    rules={[{ required: true, message: \'请输入验证码!\' }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Button type="primary" onClick={sendCaptcha}>发送验证码</Button>\n            </div>\n\n            <Form.Item\n                label="密码"\n                name="password"\n                rules={[{ required: true, message: \'请输入密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                label="确认密码"\n                name="confirmPassword"\n                rules={[{ required: true, message: \'请输入确认密码!\' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n                {...layout1}\n                label=" "\n            >\n                <Button className=\'btn\' type="primary" htmlType="submit">\n                    修改\n                </Button>\n            </Form.Item>\n        </Form>\n    </div>   \n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"css 部分如下："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-css",children:"#updatePassword-container {\n    width: 400px;\n    margin: 100px auto 0 auto;\n    text-align: center;\n}\n#updatePassword-container .btn {\n    width: 100%;\n}\n#updatePassword-container .captcha-wrapper {\n    display: flex;\n    justify-content: flex-end;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"跑起来是这样的："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:g,alt:""})}),"\n",(0,a.jsx)(e.p,{children:"然后再调用下后端接口。"}),"\n",(0,a.jsx)(e.p,{children:"在 interfaces 添加这两个接口："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"export async function updatePasswordCaptcha(email: string) {\n    return await userServiceInstance.get('/user/update_password/captcha', {\n        params: {\n            address: email\n        }\n    });\n}\n\nexport async function updatePassword(data: UpdatePassword) {\n    return await userServiceInstance.post('/user/update_password', data);\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"更改密码页面里调用下："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const sendCaptcha = async function () {\n    const address = form.getFieldValue('email');\n    if(!address) {\n        return message.error('请输入邮箱地址');\n    }\n\n    try {\n        const res = await updatePasswordCaptcha(address);\n        if(res.status === 201 || res.status === 200) {\n            message.success('发送成功');\n        } \n    } catch(e: any) {\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n};\n"})}),"\n",(0,a.jsx)(e.p,{children:"发送验证码接口的调用逻辑和注册时一模一样。"}),"\n",(0,a.jsx)(e.p,{children:"更改密码接口的调用逻辑也和注册差不多："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const onFinish = async (values: UpdatePassword) => {\n    if(values.password !== values.confirmPassword) {\n        return message.error('两次密码不一致');\n    }\n    try {\n        const res = await updatePassword(values);\n\n        if(res.status === 201 || res.status === 200) {\n            message.success('密码修改成功');\n            setTimeout(() => {\n                navigate('/login');\n            }, 1500);\n        }\n    } catch(e: any) {\n        message.error(e.response?.data?.message || '系统繁忙，请稍后再试');\n    }\n};\n"})}),"\n",(0,a.jsx)(e.p,{children:"测试下："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:x,alt:"2024-08-26 11.05.14.gif"})}),"\n",(0,a.jsx)(e.p,{children:"填入邮箱，点击发送验证码。"}),"\n",(0,a.jsx)(e.p,{children:"提示发送成功。"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"邮箱里也收到了这个验证码。"}),"\n",(0,a.jsx)(e.p,{children:"然后填入新密码，点击修改密码按钮："}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)("img",{src:u,alt:"2024-08-26 11.06.48.gif"}),"\n提示修改成功，然后会跳到登录页面。"]}),"\n",(0,a.jsx)(e.p,{children:"在登录页面用新密码登录，提示登录成功。"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:m,alt:"2024-08-26 11.08.11.gif"})}),"\n",(0,a.jsx)(e.p,{children:"这样，修改密码功能的前后端就都完成了。"}),"\n",(0,a.jsx)(e.p,{children:"然后来写试卷列表页面。"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"添加一个 ExamList 组件"}),"\n",(0,a.jsx)(e.p,{children:"pages/ExamList/index.tsx"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"export function ExamList() {\n    return <div>ExamList</div>\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"看下问卷星的列表页面："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:d,alt:""})}),"\n",(0,a.jsx)(e.p,{children:"修改 pages/ExamList/index.tsx"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'import { Button } from "antd";\nimport "./index.scss";\n\nexport function ExamList() {\n    return <div id="ExamList-container">\n        <div className="header">\n            <h1>考试系统</h1>\n        </div>\n        <div className="body">\n            <div className="operate">\n                <Button type="primary">新建试卷</Button>\n            </div>\n            <div className="list">\n                <div className="item">\n                    <p>语文试卷</p>\n                    <div className="btns">\n                        <Button className="btn" type="primary" style={{background: \'darkblue\'}}>发布</Button>\n                        <Button className="btn" type="primary" style={{background: \'green\'}}>编辑</Button>\n                        <Button className="btn" type="primary" style={{background: \'darkred\'}}>删除</Button>\n                    </div>\n                </div>\n                <div className="item">\n                    <p>数学试卷</p>\n                    <div className="btns">\n                        <Button className="btn" type="primary" style={{background: \'darkblue\'}}>发布</Button>\n                        <Button className="btn" type="primary" style={{background: \'green\'}}>编辑</Button>\n                        <Button className="btn" type="primary" style={{background: \'darkred\'}}>删除</Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"写下 index.scss"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scss",children:"#ExamList-container{\n    .header{\n        height: 80px;\n        border-bottom: 1px solid #aaa;\n        line-height: 80px;\n    }\n    h1{\n        margin:0;\n    }\n\n    .body{\n        .operate {\n            padding: 20px;\n        }\n        .list {\n            .item {\n                min-height: 100px;\n                border: 1px solid #000;\n                padding: 20px;\n                margin-bottom: 20px;\n\n                .btns {\n                    .btn {\n                        margin: 10px;\n                    }\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"安装用到的 sass 包："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"npm install --save-dev sass\n"})}),"\n",(0,a.jsx)(e.p,{children:"看下效果："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"然后在 interfaces/index.tsx 调用 /exam/list 接口："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const examServiceInstance = axios.create({\n    baseURL: 'http://localhost:3002/',\n    timeout: 3000\n});\n\nexport async function examList() {\n    return await examServiceInstance.get('/exam/list');\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"但是这个接口需要登录，拿到 token 里的 userId，用来查询考试列表。"}),"\n",(0,a.jsx)(e.p,{children:"携带 header 的通用逻辑可以放在 axios 的 interceptor 里做。"}),"\n",(0,a.jsx)(e.p,{children:"并且接口返回 token 的 header 更新本地 token 的逻辑。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const examServiceInstance = axios.create({\n    baseURL: 'http://localhost:3002/',\n    timeout: 3000\n});\n\nconst requestInterceptor = function (config: InternalAxiosRequestConfig) {\n    const accessToken = localStorage.getItem('token');\n\n    if(accessToken) {\n        config.headers.authorization = 'Bearer ' + accessToken;\n    }\n    return config;\n}\n\nexamServiceInstance.interceptors.request.use(requestInterceptor)\n\nconst responseIntercepor = (response: AxiosResponse) => {\n    const newToken = response.headers['token'];\n    if(newToken) {\n        localStorage.setItem('token', newToken);\n    }\n    return response;\n}\n\nconst responseErrorIntercepor = async (error: any) => {\n    if(!error.response) {\n        return Promise.reject(error);\n    }\n    let { data } = error.response;\n    if (data.statusCode === 401) {\n        message.error(data.message);\n\n        setTimeout(() => {\n            window.location.href = '/login';\n        }, 1500);\n    } else {\n        return Promise.reject(error);\n    }\n}\n\nexamServiceInstance.interceptors.response.use(\n    responseIntercepor, \n    responseErrorIntercepor\n)\n"})}),"\n",(0,a.jsx)(e.p,{children:"这段逻辑就是在每次发请求之前，在 header 里加上 authorization，带上 token。"}),"\n",(0,a.jsx)(e.p,{children:"当响应的 header 带有 token，就更新本地 token。"}),"\n",(0,a.jsx)(e.p,{children:"如果返回的是 401 的状态码，就提示错误，跳转登录页。"}),"\n",(0,a.jsx)(e.p,{children:"在后端 exam 微服务开启跨域："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"然后在 ExamList 页面调用下："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'import { Button, message } from "antd";\nimport "./index.scss";\nimport { useEffect, useState } from "react";\nimport { examList } from "../../interfaces";\n\ninterface Exam {\n    id: number\n    name: string\n    isPublish: boolean\n    isDelete: boolean\n    content: string\n}\n\nexport function ExamList() {\n\n    const [list, setList] = useState<Array<Exam>>();\n\n    async function query() {\n        try {\n            const res = await examList();\n            if(res.status === 201 || res.status === 200) {\n                setList(res.data)\n            } \n        } catch(e: any){\n            message.error(e.response?.data?.message || \'系统繁忙，请稍后再试\');\n        }\n    }\n\n    useEffect(() => {\n        query()\n    }, []);\n\n    return <div id="ExamList-container">\n        <div className="header">\n            <h1>考试系统</h1>\n        </div>\n        <div className="body">\n            <div className="operate">\n                <Button type="primary">新建试卷</Button>\n            </div>\n            <div className="list">\n                {\n                    list?.map(item => {\n                        return <div className="item">\n                            <p>{item.name}</p>\n                            <div className="btns">\n                                <Button className="btn" type="primary" style={{background: \'darkblue\'}}>{item.isPublish ?  \'停止\' : \'发布\' }</Button>\n                                <Button className="btn" type="primary" style={{background: \'green\'}}>编辑</Button>\n                                <Button className="btn" type="primary" style={{background: \'darkred\'}}>删除</Button>\n                            </div>\n                        </div>\n                    })\n                }\n            </div>\n        </div>\n    </div>\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"测试下："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,a.jsx)(e.p,{children:"这样，试卷列表就展示出来了。"}),"\n",(0,a.jsx)(e.p,{children:"案例代码在小册仓库："}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/exam-system-frontend",target:"_blank",rel:"noopener noreferrer",children:"前端代码"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/exam-system",target:"_blank",rel:"noopener noreferrer",children:"后端代码"})}),"\n",(0,a.jsxs)(e.h2,{id:"总结",children:["总结",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"这节我们实现了修改密码、试卷列表这两个页面。"}),"\n",(0,a.jsx)(e.p,{children:"添加了 axios 的拦截器来实现 token 自动携带和刷新 token，并且在接口返回 401 的时候跳转登录页。"}),"\n",(0,a.jsx)(e.p,{children:"下节我们继续来做试卷相关功能。"})]})}function f(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(j,{...n})}):j(n)}let b=f;f.__RSPRESS_PAGE_META={},f.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F162.%20%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E3%80%81%E8%AF%95%E5%8D%B7%E5%88%97%E8%A1%A8%E9%A1%B5%E9%9D%A2.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"162. 考试系统：修改密码、试卷列表页面",headingTitle:"162. 考试系统：修改密码、试卷列表页面",frontmatter:{}}}}]);