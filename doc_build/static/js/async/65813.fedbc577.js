"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["65813"],{925095:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var s=r(552676),t=r(740453);let i=r.p+"static/image/c85dc63c6a025ec66e94015f54429eea.ecfe6d9e.webp",d=r.p+"static/image/bbd04c7c0058f2b335c291b984e199dd.bf83239a.webp",a=r.p+"static/image/770f618caae0a3f932d91f16eae06d3b.216dc393.webp";function c(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",strong:"strong",ul:"ul",img:"img",h3:"h3",pre:"pre",code:"code",blockquote:"blockquote",em:"em"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"33客户端实战历史记录与版本功能",children:["33.客户端实战：历史记录与版本功能",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33客户端实战历史记录与版本功能",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"简介",children:["简介",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"使用重编辑的产品时，会发现从编辑到保存的过程通常需要一定的时间。"}),"\n",(0,s.jsx)(n.p,{children:"举个例子来说明："}),"\n",(0,s.jsx)(n.p,{children:"当你填写一些采购单的信息时，很容易因为误触而导致填写的内容丢失。因此，大多数系统都提供了本地缓存和离开页面时的强制确认提示等功能，以确保用户的编辑过程更加顺畅。这样一来，即使意外离开或关闭页面，用户的编辑内容也能够得到保护。通过本地缓存，系统可以自动保存用户的输入，并在用户重新进入编辑页面时恢复之前的内容，"}),"\n",(0,s.jsx)(n.p,{children:"在低代码产品中，缓存同样是非常重要的一个环节，基于浏览器缓存可以实现一个简单的LRU本地历史记录来提供给用户本地存储的能力。除了存储备份的功能外，也可以基于本地历史版本进行当前内容与历史版本的比对来更好的把握用户搭建的体验。"}),"\n",(0,s.jsx)(n.p,{children:"在本章节中，就会围绕缓存来完善历史记录与版本功能，可以将任务拆解为以下几个点："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"自动保存编辑信息到本地缓存中"}),"\n",(0,s.jsxs)(n.li,{children:["使用",(0,s.jsx)(n.strong,{children:"IndexDB"}),"构建保存本地历史记录的"]}),"\n",(0,s.jsx)(n.li,{children:"预览调整，添加历史记录版本预览预览"}),"\n",(0,s.jsx)(n.li,{children:"服务端数据存储(待补充)"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"实现思路",children:["实现思路",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现思路",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"如下图所示："}),"\n",(0,s.jsx)(n.p,{children:"整个历史记录分为本地存储和远程存储，两者场景在于保存的时机和位置不同。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"本地存储"}),"：用户点击保存到本地的时候，会将数据存储在本地数据库中，也就浏览器的IndexDB里面，在左侧历史记录面板中会相对的添加一条记录。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"远程存储"}),"：用户点击保存与发布的时候，会将当前页面存储在远程服务器的DB当中，方便用户下一次打开时使用。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在这之前，预览的数据都是存放在",(0,s.jsx)(n.strong,{children:"sessionStorage"}),"当中的，在后续通过这个口子，不管是远程存储的数据还是本地存储的数据都可以进行预览，可以参考后面实现的代码。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"历史记录实现",children:["历史记录实现",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#历史记录实现",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"根据所述的实现思路，我在面板中设计了以下界面。在顶部，使用一个选项卡来切换本地存储和远程存储，以便查看不同纬度之间的页面内容。请参考下图："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在这个界面上，通过导航tabs组件的切换来看不同存储区间的内容卡片，对应的面板呈现的就是缓存的组件，根据保存到本地不同的时间来区分，同时提供了预览和删除的逻辑来方便进行一些操作。"}),"\n",(0,s.jsx)(n.p,{children:"了解了实现思路和界面交互后，接下来就是具体的实现步骤："}),"\n",(0,s.jsxs)(n.h3,{id:"创建模型",children:["创建模型",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建模型",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"创建模型就是来为IndexDB每一列设置对应的字段进行一个定义，后续操作数据库时能够有一个参照系来使用。"}),"\n",(0,s.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,s.jsx)(n.p,{children:"每一条记录都有一个唯一id，它是每条数据的主键，在这基础上，分别创建了htmlBody、createTime、user等列用来存放页面schema、创建时间、创建用户等字段。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"export interface Item {\n  // PRIMARY KEY 唯一id\n  id: number;\n\n  // 界面nodes\n  htmlBody: string;\n\n  // 创建时间\n  createTime: string;\n\n  // 创建用户\n  user: string;\n}\n\n\nconst Model = {\n  tableName: 'hisotry',\n  columns: {\n    id: '++id', // 唯一id，作为主键\n    htmlBody: 'string', // 存放页面schema\n    createTime: 'string', // 创建时间\n    user: 'string', // 创建用户\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"indexeddbwrapper",children:["IndexedDBWrapper",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#indexeddbwrapper",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"IndexDB"}),"的使用相比于",(0,s.jsx)(n.strong,{children:"localStorage"}),"来说更加的复杂，在这里简单的封装一个",(0,s.jsx)(n.strong,{children:"IndexedDBWrapper"}),"来实现",(0,s.jsx)(n.strong,{children:"curd"}),"的功能。"]}),"\n",(0,s.jsx)(n.p,{children:"具有以下属性和方法："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"db"}),"：表示IndexedDB数据库对象，初始值为",(0,s.jsx)(n.strong,{children:"null"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"dbName"}),"：表示数据库的名称。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"storeName"}),"：表示存储对象（表）的名称。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"constructor(dbName: string, storeName: string)"}),"：构造函数，用于初始化 ",(0,s.jsx)(n.strong,{children:"dbName"})," ",(0,s.jsx)(n.strong,{children:"storeName"})," 属性。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"openDatabase"}),"：打开数据库的方法，使用 ",(0,s.jsx)(n.strong,{children:"window.indexedDB.open"})," 方法来打开数据库，它是一个异步方法，返回一个 ",(0,s.jsx)(n.strong,{children:"Promise"})," 对象，便于后续操作。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["这个类提供了一个简单的接口来打开",(0,s.jsx)(n.strong,{children:"IndexedDB"}),"数据库。基于此类进一步扩展和封装其他数据库操作的方法，例如",(0,s.jsx)(n.strong,{children:"添加、查询、更新、删除"}),"等。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"class IndexedDBWrapper {\n  private db: IDBDatabase | null;\n  private dbName: string;\n  private storeName: string\n\n  constructor(dbName: string, storeName: string) {\n    this.dbName = dbName\n    this.storeName = storeName\n    this.db = null\n  }\n  \n  \n  public openDatabase(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const request = window.indexedDB.open(this.dbName, 1);\n\n      request.onupgradeneeded = (event: Event) => {\n        this.db = (event.target as IDBOpenDBRequest).result as IDBDatabase;\n        this.db.createObjectStore(this.storeName, { keyPath: 'id' });\n      };\n\n      request.onsuccess = (event: Event) => {\n        this.db = (event.target as IDBOpenDBRequest).result as IDBDatabase;\n        resolve();\n      };\n\n      request.onerror = () => {\n        reject((request as IDBRequest).error);\n      };\n    });\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"添加删除查询所有",children:["添加、删除、查询所有",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加删除查询所有",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"添加、删除、查询所有的封装逻辑相对一致，大体上分为以下几个阶段："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"首先，我们通过数据库的transaction方法创建一个事务（transaction）对象。该方法接收两个参数：一个包含存储对象名称（storeName）的数组，以及事务的模式。在这里，我们使用this.storeName来获取存储对象名称，在之前的初始化过程中已经保存在this对象中。事务的模式有两种："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"readwrite"}),"（读写模式）"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"readonly"}),"（只读模式）。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"接下来，我们通过事务对象的调用transaction.objectStore方法获取存储对象。也是通过this.storeName来获取对应的存储对象。与transaction保持一致。objectStore对象提供了一组方法来执行对存储对象中数据的操作。通过以下是一些常用的操作方法，可以来封装对应的操作功能。"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"add"}),": 将一个新的数据项添加到存储对象中。value参数是要添加的数据项的值，key参数是可选的，用于指定数据项的键（主键）。如果未提供键值，则存储对象会自动生成一个唯一的键。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"put"}),": 将一个数据项添加到存储对象中，或者更新已存在的数据项。value参数是要添加或更新的数据项的值，key参数是可选的，用于指定数据项的键。如果提供的键值已存在，则会更新对应的数据项。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"get"}),": 根据指定的键获取存储对象中的数据项。返回一个请求对象，可以通过该对象的onsuccess事件来获取返回的数据项。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"delete"}),": 根据指定的键删除存储对象中的数据项。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"clear"}),": 清空存储对象中的所有数据项。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["使用",(0,s.jsx)(n.strong,{children:"objectStore"}),"的操作方法会返回一个请求对象，通过请求对象不同状态的回调方法可以来辨别操作存储对象是否成功，具体的判断如下"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["我们为请求对象的 ",(0,s.jsx)(n.strong,{children:"onsuccess"})," 事件绑定一个回调函数。当添加操作成功时，该回调函数会被触发。在这个回调函数中，我们调用 ",(0,s.jsx)(n.strong,{children:"resolve"})," 函数来解析（",(0,s.jsx)(n.strong,{children:"resolve"}),"）这个 ",(0,s.jsx)(n.strong,{children:"Promise"}),"，并表示添加操作成功。"]}),"\n",(0,s.jsxs)(n.li,{children:["同样地，我们为请求对象的 ",(0,s.jsx)(n.strong,{children:"onerror"})," 事件绑定一个回调函数。当添加操作出现错误时，该回调函数会被触发。在这个回调函数中，我们调用 ",(0,s.jsx)(n.strong,{children:"reject"})," 函数来拒绝（",(0,s.jsx)(n.strong,{children:"reject"}),"）这个Promise，并传递请求对象的错误信息。"]}),"\n",(0,s.jsxs)(n.li,{children:["最后，我们为事务的 ",(0,s.jsx)(n.strong,{children:"oncomplete"})," 事件绑定一个回调函数。当事务完成时，该回调函数会被触发。在这个回调函数中，我们关闭数据库连接，使用 ",(0,s.jsx)(n.strong,{children:"db.close()"})," 方法。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(n.p,{children:["具体的代码实现和上述思路一致，除了",(0,s.jsx)(n.strong,{children:"objectStore"}),"调用的方法不同之外，其他的处理逻辑基本一致。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["由于目前的场景不复杂，所以可以使用最简单的方法进行封装。在未来与服务端打通后，会使用",(0,s.jsx)(n.strong,{children:"dexie"}),"这些成熟的开源库来改造这一部分，从而完成整个本地数据库模型的改造。"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:" public addItem(item: Item): Promise<void> {\n\n    const db = this.db\n\n    if (!db) throw new Error(\"IndexedDBWrapper初始化失败\")\n\n    return new Promise<void>((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], 'readwrite');\n      const objectStore = transaction.objectStore(this.storeName);\n      const request = objectStore.add(item);\n\n      request.onsuccess = () => {\n        resolve();\n      };\n\n      request.onerror = () => {\n        reject((request as IDBRequest).error);\n      };\n\n      transaction.oncomplete = () => {\n        db.close();\n      };\n    });\n  }\n\n  public getAllItems(): Promise<Item[]> {\n\n    const db = this.db\n\n    if (!db) throw new Error(\"IndexedDBWrapper初始化失败\")\n\n    return new Promise<Item[]>((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], 'readonly');\n      const objectStore = transaction.objectStore(this.storeName);\n      const request = objectStore.getAll();\n\n      request.onsuccess = () => {\n        const items: Item[] = (request as IDBRequest<Item[]>).result;\n        resolve(items);\n      };\n\n      request.onerror = () => {\n        reject((request as IDBRequest).error);\n      };\n\n      transaction.oncomplete = () => {\n        db.close();\n      };\n    });\n  }\n\n  public async deleteItem(itemId: number): Promise<boolean> {\n    const db = this.db;\n  \n    if (!db) throw new Error(\"IndexedDBWrapper初始化失败\");\n  \n    return new Promise<boolean>((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], 'readwrite');\n      const objectStore = transaction.objectStore(this.storeName);\n      const request = objectStore.delete(itemId);\n  \n      request.onsuccess = () => {\n        resolve(true);\n      };\n  \n      request.onerror = () => {\n        reject((request as IDBRequest).error);\n      };\n  \n      transaction.oncomplete = () => {\n        db.close();\n      };\n    });\n  }\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"实际使用",children:["实际使用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实际使用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["实际使用的过程就是初始化",(0,s.jsx)(n.strong,{children:"IndexedDBWrapper"}),"类，通过其实例调用",(0,s.jsx)(n.strong,{children:"openDatabase"}),"方法后执行对应的共有方法完成添加、删除等操作。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"/**\n * 初始化IndexDB数据库\n */\nconst dbWrapper = new IndexedDBWrapper('ignition', 'history');\n\nexport const getHisotryList = async () => {\n  await dbWrapper.openDatabase()\n  const data = await dbWrapper.getAllItems()\n  return data\n}\n\nexport const setHistoryRecord = async (record: Item) => {\n  await dbWrapper.openDatabase()\n  const data = await dbWrapper.addItem(record)\n  return data\n}\n\nexport const delHistoryRecord = async (record: Item)  => {\n  await dbWrapper.openDatabase()\n  const data = await dbWrapper.deleteItem(record.id)\n  return data\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"页面逻辑",children:["页面逻辑",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面逻辑",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["如下图所示，在",(0,s.jsx)(n.strong,{children:"left"}),"面板下创建",(0,s.jsx)(n.strong,{children:"History"}),"组件："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(n.p,{children:["引入",(0,s.jsx)(n.strong,{children:"history"}),"目录下的",(0,s.jsx)(n.strong,{children:"History"}),"组件，将其放在左侧的cloud面板当中展示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { Hisotry } from './hisotry'\n\nconst sidebarContext: Record<React.Key, any> = {\n  components: <MaterialCategory/>,  \n  outlinetree: <OutlineTree/>,\n  datasource: <DataSource/>,\n+  cloud: <Hisotry/>\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"页面布局",children:["页面布局",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面布局",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:['页面布局包含两个选项卡的组件，用于展示本地存储和远程存储的数据列表。每个选项卡都有一个标签，分别是"本地存储"和"远程存储"。选中不同的选项卡会显示相应存储的数据列表。这个组件通过 ',(0,s.jsx)(n.strong,{children:"List"})," 组件来展示数据，并提供重新加载数据的功能。"]}),"\n",(0,s.jsxs)(n.p,{children:["以本地存储为例子，当",(0,s.jsxs)(n.strong,{children:['activeKey为"local"',(0,s.jsx)(n.strong,{children:"时，调用"}),"getLocalHistory"]}),"来获取",(0,s.jsx)(n.strong,{children:"IndexedDB"}),"中保存的历史记录。对于远程数据，同样的方式在切换",(0,s.jsx)(n.strong,{children:"activeKey"}),"的时候使用",(0,s.jsx)(n.strong,{children:"getRemoteHistory"}),"方法获取。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'export const Hisotry = () => {\n  const [localList, setLocalList] = React.useState<Item[]>([]);\n  const [activeKey, setActiveKey] = React.useState("local")\n\n  // 获取本地历史记录\n  const getLocalHistory = async () => {\n    const data = await getHisotryList();\n    setLocalList(data);\n  };\n  \n  // TODO: 获取远程历史记录\n  const getRemoteHistory = async () => {\n  };\n\n  React.useEffect(() => {\n    if (activeKey === \'local\')  {\n\n      getLocalHistory();\n    } else {\n      getRemoteHistory()\n    }\n  }, [activeKey]);\n\n  return (\n    <div>\n      <Tabs\n        activeKey={activeKey}\n        centered\n        items={[\n          {\n            key: "local",\n            label: `本地存储`,\n            children: <List data={localList} reload={getLocalHistory} />,\n          },\n          {\n            key: "remote",\n            label: `远程存储`,\n            children: <List data={[]} reload={getRemoteHistory} />,\n          },\n        ]}\n        onChange={(v) => setActiveKey(v)}\n      />\n    </div>\n  );\n};\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"页面组件",children:["页面组件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面组件",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在页面布局中，",(0,s.jsx)(n.strong,{children:"Tabs"}),"的",(0,s.jsx)(n.strong,{children:"children"}),"都使用统一的List组件进行渲染，区分点在于",(0,s.jsx)(n.strong,{children:"data"}),"与",(0,s.jsx)(n.strong,{children:"reload"}),"方法的参数传递。"]}),"\n",(0,s.jsx)(n.p,{children:"整个实现过程如下代码所示："}),"\n",(0,s.jsxs)(n.p,{children:["根据存储的数据列表渲染页面组件， 定义",(0,s.jsx)(n.strong,{children:"handlePreviewEvt"}),"和",(0,s.jsx)(n.strong,{children:"handlelHisotryDelete"}),"，分别用于处理预览事件和本地历史记录的删除事件。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'const List: React.FC<{\n  data: Item[];\n  reload: () => void;\n}> = ({ data, reload }) => {\n  // 处理预览逻辑\n  const handlePreviewEvt = async (record: Item) => {\n    \n    // 生成preview逻辑\n    const previewId = "uid-" + new Date().getTime()\n    sessionStorage.setItem(previewId, record.htmlBody)\n    window.open(`/preview/${previewId}?history=$local&historyId=${record.id}`)\n  }\n\n  const handleHisotryDelete = async (reocrd: Item) => {\n  // 这里需要区分本地和远程，原理是一样的\n    await delHistoryRecord(reocrd)\n    message.error("删除成功")\n    reload()\n  }\n\n  return (\n    <div\n      className={css({\n        padding: 12,\n      })}\n    >\n      <Row gutter={[12, 12]}>\n        {data.map((item) => {\n          return (\n            <Col span={24} key={item.id}>\n              <Card\n                size="small"\n              >\n                <Space direction="vertical">\n                  <Typography.Text>{item.createTime}</Typography.Text>\n                  <Space>\n                    <Typography.Link onClick={() => handlePreviewEvt(item)} >预览</Typography.Link>\n                    <Typography.Text type="danger" onClick={() => handleHisotryDelete(item)}  >删除</Typography.Text>\n                  </Space>\n                </Space>\n              </Card>\n            </Col>\n          );\n        })}\n      </Row>\n    </div>\n  );\n};\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"后续服务端章节中会在这里补充远程数据的存储实现，目前以浏览器客户端做切入点，将整个流程完善打通。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"自动保存页面数据",children:["自动保存页面数据",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自动保存页面数据",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在很多文档协同工具都会在一段时间内自动保存当前页面的内容，避免因为特殊原因导致文档丢失，在低代码平台只能够也是如此，通过",(0,s.jsx)(n.strong,{children:"setInterval"}),"模拟一个简单的定时任务，间隔N分钟自动执行",(0,s.jsx)(n.strong,{children:"autoSaveSchemaData"}),"保存页面协议。"]}),"\n",(0,s.jsx)(n.p,{children:"如下代码所示："}),"\n",(0,s.jsxs)(n.p,{children:["在",(0,s.jsx)(n.strong,{children:"MountRef"}),"中创建一个“定时任务”用来定时保存页面的相关属性信息。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"React.useEffect(() => {\n    const autoSaveSchemaData = () => {\n      // save实现\n    };\n\n    const interval = setInterval(autoSaveSchemaData, 30 * 60 * 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在本章节中，基于",(0,s.jsx)(n.strong,{children:"IndexDB"}),"实现了本地存储的历史记录功能，在此基础之上，完善了数据缓存方面的空缺，在后续与服务端对接之后，还需要实现记录与记录之间的",(0,s.jsx)(n.strong,{children:"Diff"}),"功能，除此之外也需要对本地存储的大小做一些控制，比如利用",(0,s.jsx)(n.strong,{children:"LRU"}),"算法来保证缓存淘汰的策略执行。"]}),"\n",(0,s.jsx)(n.p,{children:"合理的利用浏览器缓存能够获得更快、更加高效的应用使用体验，除此之外也有利于提高网页加载速度和减轻服务器负载，加强应用的稳定性和容错效率。"}),"\n",(0,s.jsxs)(n.h2,{id:"资源",children:["资源",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#资源",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://www.w3.org/TR/IndexedDB/",target:"_blank",rel:"noopener noreferrer",children:"https://www.w3.org/TR/IndexedDB/"})})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/ja/docs/Web/API/IndexedDB_API/Using_IndexedDB",target:"_blank",rel:"noopener noreferrer",children:"https://developer.mozilla.org/ja/docs/Web/API/IndexedDB_API/Using_IndexedDB"})})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.a,{href:"https://dexie.org/",target:"_blank",rel:"noopener noreferrer",children:"https://dexie.org/"})})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}let l=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E4%BB%8E%200%20%E6%89%93%E9%80%A0%E9%80%9A%E7%94%A8%E5%9E%8B%E4%BD%8E%E4%BB%A3%E7%A0%81%E4%BA%A7%E5%93%81%2F33.%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E6%88%98%EF%BC%9A%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%B8%8E%E7%89%88%E6%9C%AC%E5%8A%9F%E8%83%BD.md"]={toc:[{text:"简介",id:"简介",depth:2},{text:"实现思路",id:"实现思路",depth:2},{text:"历史记录实现",id:"历史记录实现",depth:2},{text:"创建模型",id:"创建模型",depth:3},{text:"IndexedDBWrapper",id:"indexeddbwrapper",depth:3},{text:"添加、删除、查询所有",id:"添加删除查询所有",depth:3},{text:"实际使用",id:"实际使用",depth:3},{text:"页面逻辑",id:"页面逻辑",depth:3},{text:"页面布局",id:"页面布局",depth:3},{text:"页面组件",id:"页面组件",depth:3},{text:"自动保存页面数据",id:"自动保存页面数据",depth:3},{text:"总结",id:"总结",depth:2},{text:"资源",id:"资源",depth:2}],title:"33.客户端实战：历史记录与版本功能",headingTitle:"33.客户端实战：历史记录与版本功能",frontmatter:{}}}}]);