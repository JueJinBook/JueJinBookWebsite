"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["83933"],{289858:function(e,n,d){d.r(n),d.d(n,{default:()=>a});var i=d(552676),c=d(740453);function r(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",h3:"h3",h4:"h4",code:"code",pre:"pre",blockquote:"blockquote"},(0,c.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"35操作记录里的字段",children:["35.操作记录里的字段",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#35操作记录里的字段",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"56-操作记录里的字段",children:["5.6 操作记录里的字段",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#56-操作记录里的字段",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["基于集合记录引用Document的四个请求方法：",(0,i.jsx)(n.strong,{children:"获取单个记录数据"}),"get、",(0,i.jsx)(n.strong,{children:"删除单个记录"}),"remove、",(0,i.jsx)(n.strong,{children:"更新单个记录"}),"update、",(0,i.jsx)(n.strong,{children:"替换更新单个记录"}),"set。和基于Collection不一样的是，前者的增删改查是可以批量多条的，而基于Document则是操作单条记录，前者是可以替代后者的。"]}),"\n",(0,i.jsxs)(n.h3,{id:"561-权限限制与替代写法",children:["5.6.1 权限限制与替代写法",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#561-权限限制与替代写法",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["查询集合collection里的记录常用于获取文章、资讯、商品、产品等等的",(0,i.jsx)(n.strong,{children:"列表"}),"；而查询单个记录doc的字段值则常用于这些列表里的",(0,i.jsx)(n.strong,{children:"详情"}),"内容。如果你在开发中需要增删改查某个记录的字段值，为了方便让程序可以根据_id找到对应的记录，建议在创建记录的时候_id用程序有规则的生成。"]}),"\n",(0,i.jsxs)(n.h4,{id:"1权限限制",children:["1、权限限制",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1权限限制",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["如果你使用的是简易权限控制，在小程序端基于Document的请求，同样也是自带了",(0,i.jsx)(n.code,{children:'where({_openid:"当前用户id"})'}),"的条件（服务端没有），而简易权限控制，最多是所有用户可读，但是写操作（set、update、remove）则只能创建者可写，也就是当前用户的openid与记录_openid的值相同时才能对该记录进行写操作，也就是无法在小程序端对记录进行跨用户的写操作。"]}),"\n",(0,i.jsxs)(n.p,{children:["但是开启安全规则（自定义权限）之后，小程序端可以设置的权限范围就大了很多，就可以在小程序端做到对记录进行批量且跨用户的写操作，就可以在小程序端使用",(0,i.jsx)(n.code,{children:"where.update"}),"和",(0,i.jsx)(n.code,{children:"where.remove"}),"(这些都是批量操作)，我们也更建议大家使用安全规则。"]}),"\n",(0,i.jsxs)(n.h4,{id:"2替代写法",children:["2、替代写法",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2替代写法",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["当使用安全规则之后，因为Document请求无法使用条件where，也就无法通过",(0,i.jsx)(n.code,{children:"where({_openid:'当前用户'})"}),"来指定用户，因此在小程序端不再使用基于Document的请求（也就是建议废弃掉），而使用基于Collection的请求代替(和上一节所学内容大体一致)，比如："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"//下面是doc请求的写法\ndb.collection('zhihu_daily').doc(\"daily9718006\")\n//下面是基于Collection的替代写法\ndb.collection('zhihu_daily').where({\n  _openid:'{openid}',\n  _id:\"daily9718006\"\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"_openid:'{openid}'"}),"用来和安全规则搭配匹配用户的权限；而",(0,i.jsx)(n.code,{children:"_id"}),"只有唯一值，所以通过where查询时得到的结果也只会是单条记录，后面我们也会一一介绍doc请求对应的替代写法。云函数端无需理会这些，因为云函数端具有最高权限，但是云函数端仍然可以使用替代写法。"]}),"\n",(0,i.jsxs)(n.h3,{id:"562-操作单个记录doc的字段值",children:["5.6.2 操作单个记录doc的字段值",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#562-操作单个记录doc的字段值",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["集合里的每条记录都有一个_id字段用以",(0,i.jsx)(n.strong,{children:"唯一标志"}),"一条记录，_id的数据格式可以是number数字，也可以是string字符串。这个_id是",(0,i.jsx)(n.strong,{children:"可以自定义"}),"的，当导入记录或写入记录",(0,i.jsx)(n.strong,{children:"没有自定义时系统会自动生成"}),"一个非常长的字符串。",(0,i.jsx)(n.strong,{children:"查询记录doc的字段field值就是基于_id的"}),"。"]}),"\n",(0,i.jsxs)(n.h4,{id:"1查询单条记录",children:["1、查询单条记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1查询单条记录",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["比如我们查询其中知乎日报的一篇文章（也就是其中一条记录）的数据，使用开发者工具zhihudaily页面的zhihudaily.js的onLoad生命周期函数里输入以下代码（",(0,i.jsx)(n.strong,{children:"db不要重复声明"}),"）："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"//基于Document的请求的写法\nconst db = wx.cloud.database() \ndb.collection('zhihu_daily').doc(\"daily9718006\")\n  .get()\n  .then(res => {\n  console.log('单个记录的值',res.data)\n  })\n  .catch(err => {\n    console.error(err)\n  })\n},\n\n//基于Collection请求的写法，给where条件指定_id的值即可只查询到一个记录，再来操作\ndb.collection('zhihu_daily').where({\n  _openid:'{openid}',\n  _id:\"daily9718006\"\n})\n  .get()\n"})}),"\n",(0,i.jsx)(n.p,{children:"如果集合的数据是导入的，那_id是自动生成的，自动生成的_id是字符串string，所以doc内使用了单引号（双引号也是可以的哦），如果你自定义的_id是number类型，比如自定义的_id为20191125，查询时为doc(20191125)即可，这只是基础知识啦。"}),"\n",(0,i.jsxs)(n.h4,{id:"2删除单条记录",children:["2、删除单条记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2删除单条记录",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"删除记录是write操作，因此要注意权限。我们可以使用doc.remove来删除单条记录。虽然我们仍然可以把remove的操作放在Page或小程序的生命周期函数里，不过更通常的做法是放到一个事件处理函数里，比如："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"//基于Document的请求的写法\nremoveDaily(){\n  db.collection('zhihu_daily').doc(\"daily9718006\")\n    .remove()\n    .then(console.log)\n    .catch(console.error)\n}\n\n//基于Collection请求的写法，和前面一样，给where条件指定_id的值即可只查询到一个记录，再来操作\ndb.collection('zhihu_daily').where({\n  _openid:'{openid}',\n  _id:\"daily9718006\"\n})\n  .remove()\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"3更新单条记录",children:["3、更新单条记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3更新单条记录",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们可以使用doc.update来更新记录，update属于字段级别的操作，也就是如果要更新的字段在记录里是已经存在的，就会更新；如果不存在，就会添加没有的字段。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"//基于Document的请求的写法\nupdateDaily(){\n  db.collection('zhihu_daily').doc(\"daily9718006\")\n    .update({\n      data:{\n        title: \"【知乎日报】元素，生生不息的宇宙诸子\",\n      }\n    })\n},\n\n//基于Collection请求的写法\ndb.collection('zhihu_daily').where({\n  _openid:'{openid}',\n  _id:\"daily9718006\"\n})\n  .update({\n    //需要更新的字段\n  })\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"如果使用的是update请求，即使记录里面没有对应的_id记录的访问权限，但是更新操作不会失败，只会在返回的结果中说明updated更新的记录数量为0。"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"4替换更新记录",children:["4、替换更新记录",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4替换更新记录",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"doc.set和doc.update不同的是，doc.update更新的字段级别，而doc.set则是替换整个记录，相当于把原有的记录里的字段都清空，再来添加doc.set里的值，比如:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'setDaily(){\n  db.collection(\'zhihu_daily\').doc("daily9718006")\n    .set({\n      data: {\n        "title": "为什么狗会如此亲近人类?",\n        "images": [\n          "https://pic4.zhimg.com/v2-4cab2fbf4fe9d487910a6f2c54ab3ed3.jpg"\n        ],\n        "id": 9717547,\n        "url": "https://daily.zhihu.com/story/9717547",\n        "image": "https://pic4.zhimg.com/v2-60f220ee6c5bf035d0eaf2dd4736342b.jpg",\n        "share_url": "http://daily.zhihu.com/story/9717547",\n        "body":  `<p>让狗从凶猛的野兽变成忠实的爱宠，涉及了宏观与微观上的两层故事：我们如何在宏观上驯养了它们，以及这些驯养在生理层面究竟意味着什么。</p>rn<p><img class="content-image" src="http://pic1.zhimg.com/70/v2-4147c4b02bf97e95d8a9f00727d4c184_b.jpg" alt=""></p>rn<p>狗是灰狼（Canis lupus）被人类驯养后形成的亚种，至少可以追溯到 1 万多年以前，是人类成功驯化的第一种动物。在这漫长的岁月里，人类的定向选择强烈改变了这个驯化亚种的基因频率，使它呈现出极高的多样性，尤其体现在生理形态上。</p>`\n      }\n    })\n}\n\n//doc.set没有相应的基于Collection请求的替代写法，不过我们可以使用update来穷举的方式。基于Collection请求的写法\ndb.collection(\'zhihu_daily\').where({\n  _openid:\'{openid}\',\n  _id:"daily9718006"\n})\n  .update({\n    //穷举需要更新的字段，以及可以通过Command.remove()来删除多余的字段（后面会介绍）。\n  })\n'})})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}let a=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F35.%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95%E9%87%8C%E7%9A%84%E5%AD%97%E6%AE%B5.md"]={toc:[{text:"5.6 操作记录里的字段",id:"56-操作记录里的字段",depth:2},{text:"5.6.1 权限限制与替代写法",id:"561-权限限制与替代写法",depth:3},{text:"1、权限限制",id:"1权限限制",depth:4},{text:"2、替代写法",id:"2替代写法",depth:4},{text:"5.6.2 操作单个记录doc的字段值",id:"562-操作单个记录doc的字段值",depth:3},{text:"1、查询单条记录",id:"1查询单条记录",depth:4},{text:"2、删除单条记录",id:"2删除单条记录",depth:4},{text:"3、更新单条记录",id:"3更新单条记录",depth:4},{text:"4、替换更新记录",id:"4替换更新记录",depth:4}],title:"35.操作记录里的字段",headingTitle:"35.操作记录里的字段",frontmatter:{}}}}]);