"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["59989"],{706161:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var a=r(552676),s=r(740453);let c=r.p+"static/image/6b5bd3b811ba691d150f869ec1ccd93c.78194d5a.gif";function t(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",h3:"h3",code:"code",pre:"pre",h4:"h4",ul:"ul",h5:"h5",img:"img",table:"table",thead:"thead",tr:"tr",th:"th",strong:"strong",tbody:"tbody",td:"td"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"35api-篇-_-常用函数与方法上",children:["35.API 篇 _ 常用函数与方法（上）",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#35api-篇-_-常用函数与方法上",children:"#"})]}),"\n",(0,a.jsxs)(n.h2,{id:"前言",children:["前言",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"本篇我们讲解请求相关的常用方法，有："}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-1",target:"_blank",rel:"noopener noreferrer",children:"fetch"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-7",target:"_blank",rel:"noopener noreferrer",children:"cookies"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-20",target:"_blank",rel:"noopener noreferrer",children:"headers"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-23",target:"_blank",rel:"noopener noreferrer",children:"NextRequest"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-33",target:"_blank",rel:"noopener noreferrer",children:"NextResponse"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-44",target:"_blank",rel:"noopener noreferrer",children:"redirect"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-46",target:"_blank",rel:"noopener noreferrer",children:"permanentRedirect"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-48",target:"_blank",rel:"noopener noreferrer",children:"notFound"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-50",target:"_blank",rel:"noopener noreferrer",children:"useParams"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-54",target:"_blank",rel:"noopener noreferrer",children:"usePathname"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-58",target:"_blank",rel:"noopener noreferrer",children:"useRouter"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079651500949530#heading-68",target:"_blank",rel:"noopener noreferrer",children:"useSearchParams"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"用到的时候到此篇查看具体的语法即可。"}),"\n",(0,a.jsxs)(n.h2,{id:"1-fetch",children:["1. fetch",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-fetch",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"11-介绍",children:["1.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["Next.js 扩展了原生的 Web ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API",target:"_blank",rel:"noopener noreferrer",children:"fetch API"}),"，可以为每个请求设置自己的缓存模式，你可以在服务端组件中搭配 ",(0,a.jsx)(n.code,{children:"async"})," 和 ",(0,a.jsx)(n.code,{children:"await"})," 直接调用："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nexport default async function Page() {\n  // 请求会被缓存\n  // 类似于 Pages Router 下的 `getStaticProps`.\n  // `force-cache` 是默认选项，不写也行\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n \n  // 每次请求的时候都会重新获取\n  // 类似于 Pages Router 下的 `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n \n  // 请求会被缓存，最多缓存 10s\n  // 类似于 Pages Router 下的 `getStaticProps` 使用 `revalidate` 选项.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n \n  return <div>...</div>\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"这里要注意的是，浏览器中的 fetch 其实也是有 cache 选项的："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'async function postData(url = "", data = {}) {\n  const response = await fetch(url, {\n    method: "POST",\n    cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached\n    body: JSON.stringify(data), \n  });\n  return response.json();\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"浏览器中的 fetch cache 选项控制的是与浏览器交互的 HTTP 缓存，而我们在服务端中用的 fetch cache 选项控制的其实是 Next.js 自己的缓存逻辑，它会将这些请求缓存起来，方便以后重复请求的时候用到。它们具体的 cache 选项内容也会有所不同，接下来会讲到。"}),"\n",(0,a.jsxs)(n.h3,{id:"12-fetchurl-options",children:["1.2. fetch(url, options)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-fetchurl-options",children:"#"})]}),"\n",(0,a.jsxs)(n.h4,{id:"optionscache",children:["options.cache",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#optionscache",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["用于配置 Next.js 数据缓存（",(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#data-cache",target:"_blank",rel:"noopener noreferrer",children:"Data Cache"}),"）"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"fetch(`https://...`, { cache: 'force-cache' | 'no-store' })\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"force-cache"}),"是默认值，表示优先从缓存中查找匹配请求，当没有匹配项或者匹配项过时时，才从服务器上获取资源并更新缓存。"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"no-store"}),"表示每次请求都从服务器上获取资源，不从缓存中查，也不更新缓存。"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["如果没有提供 cache 选项，默认为 ",(0,a.jsx)(n.code,{children:"force-cache"}),"，但如果你使用了动态函数（如 cookies()），它的默认值就会是 ",(0,a.jsx)(n.code,{children:"no-store"}),"。"]}),"\n",(0,a.jsxs)(n.h4,{id:"optionsnextrevalidate",children:["options.next.revalidate",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#optionsnextrevalidate",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"fetch(`https://...`, { next: { revalidate: false | 0 | number } })\n"})}),"\n",(0,a.jsx)(n.p,{children:"设置资源的缓存时间："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"false"}),"（默认）：语义上相当于 ",(0,a.jsx)(n.code,{children:"revalidate: Infinity"}),"，资源无限期缓存"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"0"}),"：防止资源被缓存"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"number"})," ：指定资源的缓存时间，最多 ",(0,a.jsx)(n.code,{children:"n"}),"秒"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["如果一个单独的 ",(0,a.jsx)(n.code,{children:"fetch()"})," 请求的 ",(0,a.jsx)(n.code,{children:"revalidate"})," 值比路由段配置中的 ",(0,a.jsx)(n.code,{children:"revalidate"})," 还低，整个路由的 revalidate 时间都会减少。如果同一路由下有两个使用相同 URL 的请求，但设置了不同的 ",(0,a.jsx)(n.code,{children:"revalidate"}),"值，用较低的那个值。"]}),"\n",(0,a.jsxs)(n.p,{children:["为了方便，如果 ",(0,a.jsx)(n.code,{children:"revalidate"})," 设置了数字，无须再设置 ",(0,a.jsx)(n.code,{children:"cache"})," 选项，设置为",(0,a.jsx)(n.code,{children:"0"})," 会应用 ",(0,a.jsx)(n.code,{children:"cache: 'no-store'"}),"，设置为正值会应用 ",(0,a.jsx)(n.code,{children:"cache: 'force-cache'"}),"。冲突的配置如 ",(0,a.jsx)(n.code,{children:"{ revalidate: 0, cache: 'force-cache' }"}),"和 ",(0,a.jsx)(n.code,{children:"{ revalidate: 10, cache: 'no-store' }"}),"会导致报错。"]}),"\n",(0,a.jsxs)(n.h4,{id:"optionsnexttags",children:["options.next.tags",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#optionsnexttags",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"fetch(`https://...`, { next: { tags: ['collection'] } })\n"})}),"\n",(0,a.jsxs)(n.p,{children:["设置资源的缓存标签，数据可以使用 ",(0,a.jsx)(n.code,{children:"revalidateTag"})," 按需重新验证。自定义标签的最大长度是 256 个字符。"]}),"\n",(0,a.jsxs)(n.h2,{id:"2-cookies",children:["2. cookies",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-cookies",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"21-介绍",children:["2.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"cookies"})," 函数用于："]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"在服务端组件读取传入请求的 cookie"}),"\n",(0,a.jsx)(n.li,{children:"在 Server Action 或路由处理程序中写入返回请求的 cookie"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["注意：之前的文章里也多次提到，",(0,a.jsx)(n.code,{children:"cookies()"})," 是一个动态函数，因为其返回值无法提前知道。所以在页面或者布局中使用该函数会导致路由转变为动态渲染。"]}),"\n",(0,a.jsxs)(n.h3,{id:"22-cookies",children:["2.2. cookies",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-cookies",children:"#"})]}),"\n",(0,a.jsxs)(n.h4,{id:"cookiesgetname",children:["cookies().get(name)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookiesgetname",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["该方法传入一个 cookie 名，返回一个具有 ",(0,a.jsx)(n.code,{children:"name"})," 和 ",(0,a.jsx)(n.code,{children:"value"})," 属性的对象。如果没有找到，返回 ",(0,a.jsx)(n.code,{children:"undefined"}),"，如果匹配到多个 cookie，则返回第一个匹配到的。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport { cookies } from 'next/headers'\n \nexport default function Page() {\n  const cookieStore = cookies()\n  // 如果匹配到，theme 的值为 { name: 'theme', value: 'xxxx' }\n  // 如果没有匹配到，theme 的值为 undefined\n  const theme = cookieStore.get('theme')\n  return '...'\n}\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"cookiesgetallname",children:["cookies().getAll(name)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookiesgetallname",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["该方法类似于 ",(0,a.jsx)(n.code,{children:"get"}),"，但会以数组形式返回所有匹配到的 ",(0,a.jsx)(n.code,{children:"cookies"})," ，匹配不到则返回空数组。如果没有指定 ",(0,a.jsx)(n.code,{children:"name"}),"，则返回所有可用的 cookie。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport { cookies } from 'next/headers'\n \nexport default function Page() {\n  const cookieStore = cookies()\n  // 如果匹配到，theme 的值为 [{ name: 'theme', value: 'xxxx' }]\n  // 如果没有匹配到，theme 的值为 []\n  const theme = cookieStore.get('theme')\n  return '...'\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"另一个示例如下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport { cookies } from 'next/headers'\n \nexport default function Page() {\n  const cookieStore = cookies()\n  return cookieStore.getAll().map((cookie) => (\n    <div key={cookie.name}>\n      <p>Name: {cookie.name}</p>\n      <p>Value: {cookie.value}</p>\n    </div>\n  ))\n}\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"cookieshasname",children:["cookies().has(name)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookieshasname",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"该方法传入一个 cookie 名，返回一个判断该 cookie 是否存在的布尔值。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport { cookies } from 'next/headers'\n \nexport default function Page() {\n  const cookiesList = cookies()\n  // true | false\n  const hasCookie = cookiesList.has('theme')\n  return '...'\n}\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"cookiessetname-value-options",children:["cookies().set(name, value, options)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookiessetname-value-options",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"该方法用于设置 cookie。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use server'\n// app/actions.js\nimport { cookies } from 'next/headers'\n \nasync function create(data) {\n  cookies().set('name', 'lee')\n  // or\n  cookies().set('name', 'lee', { secure: true })\n  // or\n  cookies().set({\n    name: 'name',\n    value: 'lee',\n    httpOnly: true,\n    path: '/',\n  })\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["具体 options 除了 name、value 通过",(0,a.jsx)(n.a,{href:"https://github.com/vercel/next.js/blob/7874ad265962dd1659497cbd8f5c71ddceee207b/packages/next/src/compiled/%40edge-runtime/cookies/index.js#L74",target:"_blank",rel:"noopener noreferrer",children:"查看源码"}),"可以得知，还有 domain、expires、httponly、maxage、path、samesite、secure、priority。"]}),"\n",(0,a.jsxs)(n.h4,{id:"删除-cookie",children:["删除 cookie",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删除-cookie",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"删除 cookie 的方式有多种："}),"\n",(0,a.jsxs)(n.h5,{id:"cookiesdeletename",children:["cookies().delete(name)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookiesdeletename",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"删除指定名称的 cookie"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use server'\n// app/actions.js\nimport { cookies } from 'next/headers'\n \nexport async function create(data) {\n  cookies().delete('name')\n}\n"})}),"\n",(0,a.jsxs)(n.h5,{id:"cookiessetname-",children:["cookies().set(name, '')",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookiessetname-",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"将指定名称的 cookie 设置为空值"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use server'\n// app/actions.js\nimport { cookies } from 'next/headers'\n \nexport async function create(data) {\n  cookies().set('name', '')\n}\n"})}),"\n",(0,a.jsxs)(n.h5,{id:"cookiessetname-value--maxage-0-",children:["cookies().set(name, value, { maxAge: 0 })",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookiessetname-value--maxage-0-",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"设置 maxAge 为 0，立即使 cookie 过期"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use server'\n// app/actions.js\nimport { cookies } from 'next/headers'\n \nexport async function create(data) {\n  cookies().set('name', 'value', { maxAge: 0 })\n}\n"})}),"\n",(0,a.jsxs)(n.h5,{id:"cookiessetname-value--expires-timestamp-",children:["cookies().set(name, value, { expires: timestamp })",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cookiessetname-value--expires-timestamp-",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"设置 expires 为过去的值都会使 cookie 过期"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use server'\n// app/actions.js\nimport { cookies } from 'next/headers'\n \nexport async function create(data) {\n  const oneDay = 24 * 60 * 60 * 1000\n  cookies().set('name', 'value', { expires: Date.now() - oneDay })\n}\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"测试删除效果",children:["测试删除效果",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#测试删除效果",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"如果你想要测试这些删除效果："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'\'use client\'\n// app/page.js\nimport { create } from \'./action\'\n\nexport default function Page({ params }) {\n \n  return (\n    <form action={create}>\n      <input type="text" name="name" />\n      <button type="submit">Submit</button>\n    </form>\n  );\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"效果如下："}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)("img",{src:c,alt:"1113.gif"})}),"\n",(0,a.jsxs)(n.h2,{id:"3-headers",children:["3. headers",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-headers",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"31-介绍",children:["3.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"headers()"})," 函数用于从服务端组件中读取传入的 HTTP 请求头。它拓展了 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers",target:"_blank",rel:"noopener noreferrer",children:"Web Headers API"}),"。它是只读的，这意味着你不能 ",(0,a.jsx)(n.code,{children:"set"}),"/",(0,a.jsx)(n.code,{children:"delete"})," 返回的请求头。headers() 和 cookies() 一样都是动态函数，其返回值无法提前知道，一旦使用会导致路由切换到动态渲染。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport { headers } from 'next/headers'\n \nexport default function Page() {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n \n  return <div>Referer: {referer}</div>\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"32-api",children:["3.2. API",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-api",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const headersList = headers()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["headers() 不接收任何参数，返回一个只读的 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers",target:"_blank",rel:"noopener noreferrer",children:"Web Headers"})," 对象，所以没有 set、append、delete 这些方法："]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers/entries",target:"_blank",rel:"noopener noreferrer",children:"Headers.entries()"}),"：以 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols",target:"_blank",rel:"noopener noreferrer",children:"迭代器"})," 的形式返回 Headers 对象中所有的键值对"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers/get",target:"_blank",rel:"noopener noreferrer",children:"Headers.get()"}),"：以 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer",children:"String"})," 的形式从 Headers 对象中返回指定 header 的全部值"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers/has",target:"_blank",rel:"noopener noreferrer",children:"Headers.has()"}),"：以布尔值的形式从 Headers 对象中返回是否存在指定的 header"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers/keys",target:"_blank",rel:"noopener noreferrer",children:"Headers.keys()"}),"：以",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols",target:"_blank",rel:"noopener noreferrer",children:"迭代器"}),"的形式返回 Headers 对象中所有存在的 header 名"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers/values",target:"_blank",rel:"noopener noreferrer",children:"Headers.values()"}),"：以",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols",target:"_blank",rel:"noopener noreferrer",children:"迭代器"}),"的形式返回 Headers 对象中所有存在的 header 的值"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Headers/forEach",target:"_blank",rel:"noopener noreferrer",children:"Headers.forEach()"}),"：对对象中的每个键/值对执行一次回调函数"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"举个例子："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nimport { headers } from 'next/headers'\n \nasync function getUser() {\n  const headersInstance = headers()\n  const authorization = headersInstance.get('authorization')\n  // 转发 authorization header\n  const res = await fetch('...', {\n    headers: { authorization },\n  })\n  return res.json()\n}\n \nexport default async function UserPage() {\n  const user = await getUser()\n  return <h1>{user.name}</h1>\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"4-nextrequest",children:["4. NextRequest",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-nextrequest",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"41-介绍",children:["4.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["NextRequest 拓展了 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/Request",target:"_blank",rel:"noopener noreferrer",children:"Web Resquest API"}),"，提供了一些便捷的方法。"]}),"\n",(0,a.jsxs)(n.h3,{id:"42-cookies",children:["4.2. cookies",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-cookies",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["用于读取和更改请求的 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/HTTP/Headers/Set-Cookie",target:"_blank",rel:"noopener noreferrer",children:"Set-Cookie"}),"标头。"]}),"\n",(0,a.jsxs)(n.h4,{id:"setname-value",children:["set(name, value)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#setname-value",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"设置 cookie："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 请求会有一个 `Set-Cookie:show-banner=false;path=/home` 标头\nrequest.cookies.set('show-banner', 'false')\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"getname",children:["get(name)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getname",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"返回指定名称的 cookie 值，找不到就返回 undefined，多个就返回第一个："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// { name: 'show-banner', value: 'false', Path: '/home' }\nrequest.cookies.get('show-banner')\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"getall",children:["getAll()",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getall",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"返回指定名称的 cookie 值，未指定则返回所有，数组形式："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nrequest.cookies.getAll('experiments')\n// 返回所有 cookie 值\nrequest.cookies.getAll()\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"deletename",children:["delete(name)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deletename",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"用于删除 cookie："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 返回 true 表示删除成功, false 表示没有删掉任何东西\nrequest.cookies.delete('experiments')\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"hasname",children:["has(name)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#hasname",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"判断是否有该 cookie 值，有则返回 true，无则返回 false"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"request.cookies.has('experiments')\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"clear",children:["clear()",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#clear",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["删除请求的 ",(0,a.jsx)(n.code,{children:"Set-Cookie"})," 标头"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"request.cookies.clear()\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"43-nexturl",children:["4.3. nextUrl",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43-nexturl",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["拓展了原生的 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/URL",target:"_blank",rel:"noopener noreferrer",children:"URL API"}),"，提供了一些便捷的方法："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 假设请求是 /home, pathname 是 /home\nrequest.nextUrl.pathname\n// 请求是 /home?name=lee, searchParams 是 { 'name': 'lee' }\nrequest.nextUrl.searchParams\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"5-nextresponse",children:["5. NextResponse",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-nextresponse",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"51-介绍",children:["5.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#51-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["NextResponse 拓展了 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/Response",target:"_blank",rel:"noopener noreferrer",children:"Web Response API"}),"，提供了一些便捷的方法。"]}),"\n",(0,a.jsxs)(n.h3,{id:"52-cookies",children:["5.2. cookies",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#52-cookies",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"用于读取和更改响应的 Set-Cookie 标头。"}),"\n",(0,a.jsxs)(n.h4,{id:"setname-value-1",children:["set(name, value)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#setname-value-1",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 请求未 /home\nlet response = NextResponse.next()\n// 设置 cookie\nresponse.cookies.set('show-banner', 'false')\n// Response 的 Set-Cookie 标头为 `Set-Cookie:show-banner=false;path=/home`\nreturn response\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"getname-1",children:["get(name)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getname-1",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 假设请求为 /home\nlet response = NextResponse.next()\n// { name: 'show-banner', value: 'false', Path: '/home' }\nresponse.cookies.get('show-banner')\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"getall-1",children:["getAll()",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getall-1",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 假设请求为 /home\nlet response = NextResponse.next()\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nresponse.cookies.getAll('experiments')\n// 返回所有 cookie 值\nresponse.cookies.getAll()\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"deletename-1",children:["delete(name)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deletename-1",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// 假设请求为 /home\nlet response = NextResponse.next()\n// 返回 true 表示删除成功, false 表示没有删掉任何东西\nresponse.cookies.delete('experiments')\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"53-json",children:["5.3. json",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#53-json",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"使用给定的 JSON 正文生成响应："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/api/route.js\nimport { NextResponse } from 'next/server'\n \nexport async function GET(request) {\n  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"54-redirect",children:["5.4. redirect()",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#54-redirect",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"生成重定向到新 URL 的响应："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { NextResponse } from 'next/server'\n \nreturn NextResponse.redirect(new URL('/new', request.url))\n"})}),"\n",(0,a.jsxs)(n.p,{children:["在 ",(0,a.jsx)(n.code,{children:"NextResponse.redirect()"}),"方法使用前可以创建和更改 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/URL",target:"_blank",rel:"noopener noreferrer",children:"URL"}),"，举个例子，你可以使用  ",(0,a.jsx)(n.code,{children:"request.nextUrl"})," 获取当前的 URL，然后据此更改成重定向的 URL："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { NextResponse } from 'next/server'\n \nconst loginUrl = new URL('/login', request.url)\n// 添加 ?from=/incoming-url 参数到 /login URL\nloginUrl.searchParams.set('from', request.nextUrl.pathname)\n// 重定向到新 URL\nreturn NextResponse.redirect(loginUrl)\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"55-rewrite",children:["5.5. rewrite()",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#55-rewrite",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"保留原始 URL 的同时生成一个重写到指定 URL 的响应："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { NextResponse } from 'next/server'\n \n// 传入请求: /about, 浏览器显示 /about\n// 重写请求: /proxy, 浏览器显示 /about\nreturn NextResponse.rewrite(new URL('/proxy', request.url))\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"56-next",children:["5.6. next()",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#56-next",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"常用在中间件，用于提前返回并继续路由："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { NextResponse } from 'next/server'\n \nreturn NextResponse.next()\n"})}),"\n",(0,a.jsxs)(n.p,{children:["也可以在生成响应的时候转发 ",(0,a.jsx)(n.code,{children:"headers"}),"。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { NextResponse } from 'next/server'\n \nconst newHeaders = new Headers(request.headers)\n// 添加新 header\nnewHeaders.set('x-version', '123')\n// 返回新的 headers\nreturn NextResponse.next({\n  request: {\n    headers: newHeaders,\n  },\n})\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"6-redirect",children:["6. redirect",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-redirect",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"61-介绍",children:["6.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#61-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"redirect"}),"函数，顾名思义，重定向地址，可用于服务端组件、路由处理程序、Server Actions。在 Streaming 中，使用重定向将插入一个 meta 标签以在客户端发起重定向，其他情况，它会返回一个 307 HTTP 重定向响应。如果资源不存在，可以直接使用 notFound 函数，并不一定需要 redirect 来处理。"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"redirect"})," 函数接受两个参数："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"redirect(path, type)\n"})}),"\n",(0,a.jsx)(n.p,{children:"其中："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"path"})," 字符串类型，表示重定向的 URL，可以是相对路径，也可以是绝对路径"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"type"})," 值为 ",(0,a.jsx)(n.code,{children:"replace"})," （默认）或者 ",(0,a.jsx)(n.code,{children:"push"}),"（Server Actions 中默认），表示重定向的类型"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["默认情况下，",(0,a.jsx)(n.code,{children:"redirect"})," 在 Sever Actions 中会用 ",(0,a.jsx)(n.code,{children:"push"}),"（添加到浏览器历史栈），在其他地方用 ",(0,a.jsx)(n.code,{children:"replace"}),"（在浏览器历史栈中替换当前的 URL）。你可以通过指定 ",(0,a.jsx)(n.code,{children:"type"}),"参数覆盖此行为。"]}),"\n",(0,a.jsxs)(n.p,{children:["注意：在服务端组件中使用 ",(0,a.jsx)(n.code,{children:"type"}),"参数没有效果。"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"redirect"})," 函数不返回任何值"]}),"\n",(0,a.jsx)(n.p,{children:"举个例子："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/team/[id]/page.js\nimport { redirect } from 'next/navigation'\n \nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n \nexport default async function Profile({ params }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    redirect('/login')\n  }\n \n  // ...\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"7-permanentredirect",children:["7. permanentRedirect",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-permanentredirect",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"71-介绍",children:["7.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#71-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"permanentRedirect"}),"，作用也是重定向，可用于服务端组件、客户端组件、路由处理程序、Server Actions。在 Streaming 中，使用重定向将插入一个 meta 标签以在客户端发起重定向，其他情况，它会返回一个 308 HTTP 重定向响应。。如果资源不存在，可以直接使用 notFound 函数。"]}),"\n",(0,a.jsx)(n.p,{children:"permanentRedirect 函数接受两个参数："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"permanentRedirect(path, type)\n"})}),"\n",(0,a.jsx)(n.p,{children:"其中："}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"path"})," 字符串类型，表示重定向的 URL，可以是相对路径，也可以是绝对路径"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"type"})," 值为 ",(0,a.jsx)(n.code,{children:"replace"})," （默认）或者 ",(0,a.jsx)(n.code,{children:"push"}),"（Server Actions 中默认），表示重定向的类型"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["默认情况下，permanentRedirect 在 Sever Actions 中会用 ",(0,a.jsx)(n.code,{children:"push"}),"（添加到浏览器历史栈），在其他地方用 ",(0,a.jsx)(n.code,{children:"replace"}),"（在浏览器历史栈中替换当前的 URL）。你可以通过指定 ",(0,a.jsx)(n.code,{children:"type"}),"参数覆盖此行为。"]}),"\n",(0,a.jsxs)(n.p,{children:["注意：在服务端组件中使用 ",(0,a.jsx)(n.code,{children:"type"}),"参数没有效果。"]}),"\n",(0,a.jsx)(n.p,{children:"permanentRedirect 函数不返回任何值"}),"\n",(0,a.jsx)(n.p,{children:"举个例子："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/team/[id]/page.js\nimport { permanentRedirect } from 'next/navigation'\n \nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n \nexport default async function Profile({ params }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    permanentRedirect('/login')\n  }\n \n  // ...\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"8-notfound",children:["8. notFound",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-notfound",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"81-介绍",children:["8.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#81-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["调用 ",(0,a.jsx)(n.code,{children:"notFound()"}),"函数会抛出一个 ",(0,a.jsx)(n.code,{children:"NEXT_NOT_FOUND"}),"错误，并且中止该路由段的渲染。通过声明一个 ",(0,a.jsx)(n.code,{children:"not-found.js"}),"文件可以为此路由段渲染一个 Not Found UI 来优雅的处理这个错误。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/user/[id]/page.js \nimport { notFound } from 'next/navigation'\n \nasync function fetchUser(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n \nexport default async function Profile({ params }) {\n  const user = await fetchUser(params.id)\n \n  if (!user) {\n    notFound()\n  }\n \n  // ...\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"9-useparams",children:["9. useParams",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9-useparams",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"91-介绍",children:["9.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#91-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useParams"}),"是一个客户端组件 hook，用于读取当前 URL 的动态参数："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/example-client-component.js\nimport { useParams } from 'next/navigation'\n \nexport default function ExampleClientComponent() {\n  const params = useParams()\n \n  // 路由 -> /shop/[tag]/[item]\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  console.log(params)\n \n  return <></>\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"92-参数",children:["9.2. 参数",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#92-参数",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useParams"}),"不接收任何参数。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const params = useParams()\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"93-返回值",children:["9.3. 返回值",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#93-返回值",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useParams"})," 返回一个包含当前路由动态参数的对象，让我们直接看个例子就明白了："]}),"\n",(0,a.jsxs)(n.table,{children:["\n",(0,a.jsxs)(n.thead,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Route 路线"})}),"\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"URL 网址"})}),"\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"useParams()"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.tbody,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"app/shop/page.js"}),"\n",(0,a.jsx)(n.td,{children:"/shop"}),"\n",(0,a.jsx)(n.td,{children:"null"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"app/shop/[slug]/page.js"}),"\n",(0,a.jsx)(n.td,{children:"/shop/1"}),"\n",(0,a.jsx)(n.td,{children:"{ slug: '1' }"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"app/shop/[tag]/[item]/page.js"}),"\n",(0,a.jsx)(n.td,{children:"/shop/1/2"}),"\n",(0,a.jsx)(n.td,{children:"{ tag: '1', item: '2' }"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"app/shop/[...slug]/page.js"}),"\n",(0,a.jsx)(n.td,{children:"/shop/1/2"}),"\n",(0,a.jsx)(n.td,{children:"{ slug: ['1', '2'] }"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"10-usepathname",children:["10. usePathname",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10-usepathname",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"101-介绍",children:["10.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#101-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"usePathname"})," 是一个客户端组件 hook，用于读取当前 URL 的 pathname。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/example-client-component.js\nimport { usePathname } from 'next/navigation'\n \nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"usePathname"})," 需要用在客户端组件中。"]}),"\n",(0,a.jsxs)(n.h3,{id:"102-参数",children:["10.2. 参数",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#102-参数",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"usePathname"}),"不接收任何参数。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const pathname = usePathname()\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"103-返回值",children:["10.3. 返回值",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#103-返回值",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"usePathname 返回当前 URL pathname 的字符串，让我们直接看个例子就明白了："}),"\n",(0,a.jsxs)(n.table,{children:["\n",(0,a.jsxs)(n.thead,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"URL"})}),"\n",(0,a.jsx)(n.th,{children:"返回值"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.tbody,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"/"})}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"'/'"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"/dashboard"})}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"'/dashboard'"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"/dashboard?v=2"})}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"'/dashboard'"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"/blog/hello-world"})}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"'/blog/hello-world'"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"举个例子："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/example-client-component.js\nimport { usePathname, useSearchParams } from 'next/navigation'\n \nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // 监听路由变化\n  }, [pathname, searchParams])\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"11-userouter",children:["11. useRouter",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-userouter",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"111-介绍",children:["11.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#111-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useRouter"})," hook 用于在客户端组件中更改路由："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/example-client-component.js\nimport { useRouter } from 'next/navigation'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["在 Next.js 中，优先推荐使用 ",(0,a.jsx)(n.code,{children:"<Link>"})," 组件来导航，其次再针对一些特殊的需求使用 ",(0,a.jsx)(n.code,{children:"useRouter"}),"。"]}),"\n",(0,a.jsxs)(n.h3,{id:"112-userouter",children:["11.2. useRouter()",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#112-userouter",children:"#"})]}),"\n",(0,a.jsxs)(n.h4,{id:"push",children:["push",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#push",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"router.push(href: string, { scroll: boolean })"}),"执行一个客户端导航，会将新地址添加到浏览器历史栈中"]}),"\n",(0,a.jsxs)(n.h4,{id:"replace",children:["replace",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#replace",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"router.replace(href: string, { scroll: boolean })"}),"执行一个客户端导航，但不会在浏览器历史栈中添加新的条目。"]}),"\n",(0,a.jsxs)(n.h4,{id:"refresh",children:["refresh",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#refresh",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"router.refresh()"})," 刷新当前路由"]}),"\n",(0,a.jsxs)(n.h4,{id:"prefetch",children:["prefetch",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#prefetch",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"router.prefetch(href: string)"}),"预获取提供的路由，加快客户端导航速度"]}),"\n",(0,a.jsxs)(n.h4,{id:"back",children:["back",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#back",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"router.back()"})," 向后导航到浏览器历史栈中的上一页"]}),"\n",(0,a.jsxs)(n.h4,{id:"forward",children:["forward()",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#forward",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"router.forward()"}),"向前导航到浏览器历史栈中的下一页"]}),"\n",(0,a.jsxs)(n.h3,{id:"113-示例",children:["11.3. 示例",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#113-示例",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"让我们看个例子："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/components/navigation-events.js\nimport { useEffect } from 'react'\nimport { usePathname, useSearchParams } from 'next/navigation'\n \nexport function NavigationEvents() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n \n  useEffect(() => {\n    const url = `${pathname}?${searchParams}`\n    console.log(url)\n    // ...\n  }, [pathname, searchParams])\n \n  return null\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["注意：当使用 App Router 的时候，从",(0,a.jsx)(n.code,{children:"next/navigation"}),"中导入 ",(0,a.jsx)(n.code,{children:"useRouter"})," ，而非 ",(0,a.jsx)(n.code,{children:"next/router"}),"。Pages Router 下的 pathname 改为使用 ",(0,a.jsx)(n.code,{children:"usePathname()"}),"，Pages Router 下的 query 改为使用 ",(0,a.jsx)(n.code,{children:"useSearchParams()"}),"。"]}),"\n",(0,a.jsxs)(n.p,{children:["在这个例子中，我们通过组合 ",(0,a.jsx)(n.code,{children:"usePathname"})," 和 ",(0,a.jsx)(n.code,{children:"useSearchParams"})," 来监听页面更改。我们可以将这个函数导入到布局中："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/layout.js\nimport { Suspense } from 'react'\nimport { NavigationEvents } from './components/navigation-events'\n \nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n \n        <Suspense fallback={null}>\n          <NavigationEvents />\n        </Suspense>\n      </body>\n    </html>\n  )\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["在这个例子中，之所以能够生效，是因为在静态渲染的时候， ",(0,a.jsx)(n.code,{children:"useSearchParams()"}),"会导致客户端渲染到最近的 Suspense 边界。"]}),"\n",(0,a.jsxs)(n.p,{children:["再换一个例子，当导航到新路由时，Next.js 会默认滚动到页面的顶部。你可以在 ",(0,a.jsx)(n.code,{children:"router.push()"})," 或 ",(0,a.jsx)(n.code,{children:"router.replace()"}),"中传递 ",(0,a.jsx)(n.code,{children:"scroll: false"}),"来禁用该行为。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/example-client-component.jsx\nimport { useRouter } from 'next/navigation'\n \nexport default function Page() {\n  const router = useRouter()\n \n  return (\n    <button\n      type=\"button\"\n      onClick={() => router.push('/dashboard', { scroll: false })}\n    >\n      Dashboard\n    </button>\n  )\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"12-usesearchparams",children:["12. useSearchParams",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-usesearchparams",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"121-介绍",children:["12.1. 介绍",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#121-介绍",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useSearchParams"}),"是一个客户端组件 hook，用于读取当前 URL 的查询字符串。",(0,a.jsx)(n.code,{children:"useSearchParams"})," 返回一个只读版本的 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/URLSearchParams",target:"_blank",rel:"noopener noreferrer",children:"URLSearchParams"}),"，举个例子："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/dashboard/search-bar.js\nimport { useSearchParams } from 'next/navigation'\n \nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n \n  const search = searchParams.get('search')\n \n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"122-参数",children:["12.2. 参数",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#122-参数",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useSearchParams"})," 不接收任何参数。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const searchParams = useSearchParams()\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"123-返回值",children:["12.3. 返回值",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#123-返回值",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useSearchParams"})," 返回一个只读版本的 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/URLSearchParams",target:"_blank",rel:"noopener noreferrer",children:"URLSearchParams"}),"，它包含一些读取 URL 查询参数的工具方法，比如："]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/URLSearchParams/get",target:"_blank",rel:"noopener noreferrer",children:"URLSearchParams.get()"})," 返回查询参数的第一个找到的值，举个例子："]}),"\n"]}),"\n",(0,a.jsxs)(n.table,{children:["\n",(0,a.jsxs)(n.thead,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"URL"})}),"\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:'searchParams.get("a")'})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.tbody,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/dashboard?a=1"}),"\n",(0,a.jsx)(n.td,{children:"'1'"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/dashboard?a="}),"\n",(0,a.jsx)(n.td,{children:"''"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/dashboard?b=3"}),"\n",(0,a.jsx)(n.td,{children:"null"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/dashboard?a=1&a=2"}),"\n",(0,a.jsx)(n.td,{children:"'1' （返回第一个，要获取所有，使用 getAll()）"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/URLSearchParams/has",target:"_blank",rel:"noopener noreferrer",children:"URLSearchParams.has()"})," 返回指定的查询参数是否存在，举个例子："]}),"\n"]}),"\n",(0,a.jsxs)(n.table,{children:["\n",(0,a.jsxs)(n.thead,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"URL"})}),"\n",(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:'searchParams.has("a")'})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.tbody,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/dashboard?a=1"}),"\n",(0,a.jsx)(n.td,{children:"true"}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"/dashboard?b=3"}),"\n",(0,a.jsx)(n.td,{children:"false"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["其他方法还有 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll",target:"_blank",rel:"noopener noreferrer",children:"getAll()"}),"、 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/URLSearchParams/keys",target:"_blank",rel:"noopener noreferrer",children:"keys()"}),"、 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/URLSearchParams/values",target:"_blank",rel:"noopener noreferrer",children:"values()"}),"、 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/URLSearchParams/entries",target:"_blank",rel:"noopener noreferrer",children:"entries()"}),"、 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/URLSearchParams/forEach",target:"_blank",rel:"noopener noreferrer",children:"forEach()"})," 和 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/docs/Web/API/URLSearchParams/toString",target:"_blank",rel:"noopener noreferrer",children:"toString()"}),"，都是基于 ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/getAll",target:"_blank",rel:"noopener noreferrer",children:"URLSearchParams"}),"。"]}),"\n",(0,a.jsxs)(n.h3,{id:"124-行为",children:["12.4. 行为",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#124-行为",children:"#"})]}),"\n",(0,a.jsxs)(n.h4,{id:"静态渲染",children:["静态渲染",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静态渲染",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["如果路由是静态渲染，调用 ",(0,a.jsx)(n.code,{children:"useSearchParams()"})," 会导致树到最近的 ",(0,a.jsx)(n.code,{children:"Suspense"}),"边界发生客户端渲染。应该尽可能将使用 ",(0,a.jsx)(n.code,{children:"useSearchParams"})," 的组件放在 ",(0,a.jsx)(n.code,{children:"Suspense"})," 边界中以减少客户端渲染的内容，举个例子："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/dashboard/search-bar.js\nimport { useSearchParams } from 'next/navigation'\n \nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n \n  const search = searchParams.get('search')\n\n  // 当使用静态渲染的时候，不会在服务端打印\n  console.log(search)\n \n  return <>Search: {search}</>\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/dashboard/page.js\nimport { Suspense } from 'react'\nimport SearchBar from './search-bar'\n \nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n \nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>\n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"动态渲染",children:["动态渲染",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动态渲染",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["如果路由是动态渲染的，在客户端组件的初始服务端渲染的时候，",(0,a.jsx)(n.code,{children:"useSearchParams"})," 在服务端是可用的。"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"'use client'\n// app/dashboard/search-bar.js\nimport { useSearchParams } from 'next/navigation'\n \nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n \n  const search = searchParams.get('search')\n\n  // 初始渲染的时候会在服务端打印，后续导航中客户端也会打印\n  console.log(search)\n \n  return <>Search: {search}</>\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/dashboard/page.js\nimport SearchBar from './search-bar'\n \nexport const dynamic = 'force-dynamic'\n \nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <SearchBar />\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"服务端组件",children:["服务端组件",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#服务端组件",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["在 Page（服务端组件）中获取参数，使用 ",(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/file-conventions/page#searchparams-optional",target:"_blank",rel:"noopener noreferrer",children:"searchParams"})," prop。\nLayout 中（服务端组件）并不会有  ",(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/file-conventions/page#searchparams-optional",target:"_blank",rel:"noopener noreferrer",children:"searchParams"})," prop，这是因为在共享一个布局的多个页面之间导航的时候并不会重新渲染，这也就导致  searchParams 不会发生变化。所以要想获得准确的查询参数，使用 Page 的  ",(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/file-conventions/page#searchparams-optional",target:"_blank",rel:"noopener noreferrer",children:"searchParams"})," prop 或是在客户端组件中使用  ",(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/functions/use-search-params",target:"_blank",rel:"noopener noreferrer",children:"useSearchParams"})," hook 它们会在客户端重新渲染的时候带上最新的 searchParams。"]}),"\n",(0,a.jsxs)(n.h3,{id:"125-示例",children:["12.5. 示例",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#125-示例",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["你可以使用 useRouter 或者 Link 设置新的 ",(0,a.jsx)(n.code,{children:"searchParams"}),"。当路由变化后，当前的 page.js 会收到一个更新的 ",(0,a.jsx)(n.code,{children:"searchParams"})," prop："]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// app/example-client-component.js\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n \n  const createQueryString = useCallback(\n    (name, value) => {\n      const params = new URLSearchParams(searchParams)\n      params.set(name, value)\n \n      return params.toString()\n    },\n    [searchParams]\n  )\n \n  return (\n    <>\n      <p>Sort By</p>\n \n      {/* 使用 useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n \n      {/* 使用 <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/functions",target:"_blank",rel:"noopener noreferrer",children:(0,a.jsx)(n.a,{href:"https://nextjs.org/docs/app/api-reference/functions",target:"_blank",rel:"noopener noreferrer",children:"https://nextjs.org/docs/app/api-reference/functions"})})}),"\n"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(t,{...e})}):t(e)}let d=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F35.API%20%E7%AF%87%20_%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B8%8E%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. fetch",id:"1-fetch",depth:2},{text:"1.1. 介绍",id:"11-介绍",depth:3},{text:"1.2. fetch(url, options)",id:"12-fetchurl-options",depth:3},{text:"options.cache",id:"optionscache",depth:4},{text:"options.next.revalidate",id:"optionsnextrevalidate",depth:4},{text:"options.next.tags",id:"optionsnexttags",depth:4},{text:"2. cookies",id:"2-cookies",depth:2},{text:"2.1. 介绍",id:"21-介绍",depth:3},{text:"2.2. cookies",id:"22-cookies",depth:3},{text:"cookies().get(name)",id:"cookiesgetname",depth:4},{text:"cookies().getAll(name)",id:"cookiesgetallname",depth:4},{text:"cookies().has(name)",id:"cookieshasname",depth:4},{text:"cookies().set(name, value, options)",id:"cookiessetname-value-options",depth:4},{text:"删除 cookie",id:"删除-cookie",depth:4},{text:"测试删除效果",id:"测试删除效果",depth:4},{text:"3. headers",id:"3-headers",depth:2},{text:"3.1. 介绍",id:"31-介绍",depth:3},{text:"3.2. API",id:"32-api",depth:3},{text:"4. NextRequest",id:"4-nextrequest",depth:2},{text:"4.1. 介绍",id:"41-介绍",depth:3},{text:"4.2. cookies",id:"42-cookies",depth:3},{text:"set(name, value)",id:"setname-value",depth:4},{text:"get(name)",id:"getname",depth:4},{text:"getAll()",id:"getall",depth:4},{text:"delete(name)",id:"deletename",depth:4},{text:"has(name)",id:"hasname",depth:4},{text:"clear()",id:"clear",depth:4},{text:"4.3. nextUrl",id:"43-nexturl",depth:3},{text:"5. NextResponse",id:"5-nextresponse",depth:2},{text:"5.1. 介绍",id:"51-介绍",depth:3},{text:"5.2. cookies",id:"52-cookies",depth:3},{text:"set(name, value)",id:"setname-value-1",depth:4},{text:"get(name)",id:"getname-1",depth:4},{text:"getAll()",id:"getall-1",depth:4},{text:"delete(name)",id:"deletename-1",depth:4},{text:"5.3. json",id:"53-json",depth:3},{text:"5.4. redirect()",id:"54-redirect",depth:3},{text:"5.5. rewrite()",id:"55-rewrite",depth:3},{text:"5.6. next()",id:"56-next",depth:3},{text:"6. redirect",id:"6-redirect",depth:2},{text:"6.1. 介绍",id:"61-介绍",depth:3},{text:"7. permanentRedirect",id:"7-permanentredirect",depth:2},{text:"7.1. 介绍",id:"71-介绍",depth:3},{text:"8. notFound",id:"8-notfound",depth:2},{text:"8.1. 介绍",id:"81-介绍",depth:3},{text:"9. useParams",id:"9-useparams",depth:2},{text:"9.1. 介绍",id:"91-介绍",depth:3},{text:"9.2. 参数",id:"92-参数",depth:3},{text:"9.3. 返回值",id:"93-返回值",depth:3},{text:"10. usePathname",id:"10-usepathname",depth:2},{text:"10.1. 介绍",id:"101-介绍",depth:3},{text:"10.2. 参数",id:"102-参数",depth:3},{text:"10.3. 返回值",id:"103-返回值",depth:3},{text:"11. useRouter",id:"11-userouter",depth:2},{text:"11.1. 介绍",id:"111-介绍",depth:3},{text:"11.2. useRouter()",id:"112-userouter",depth:3},{text:"push",id:"push",depth:4},{text:"replace",id:"replace",depth:4},{text:"refresh",id:"refresh",depth:4},{text:"prefetch",id:"prefetch",depth:4},{text:"back",id:"back",depth:4},{text:"forward()",id:"forward",depth:4},{text:"11.3. 示例",id:"113-示例",depth:3},{text:"12. useSearchParams",id:"12-usesearchparams",depth:2},{text:"12.1. 介绍",id:"121-介绍",depth:3},{text:"12.2. 参数",id:"122-参数",depth:3},{text:"12.3. 返回值",id:"123-返回值",depth:3},{text:"12.4. 行为",id:"124-行为",depth:3},{text:"静态渲染",id:"静态渲染",depth:4},{text:"动态渲染",id:"动态渲染",depth:4},{text:"服务端组件",id:"服务端组件",depth:4},{text:"12.5. 示例",id:"125-示例",depth:3},{text:"参考链接",id:"参考链接",depth:2}],title:"35.API 篇 _ 常用函数与方法（上）",headingTitle:"35.API 篇 _ 常用函数与方法（上）",frontmatter:{}}}}]);