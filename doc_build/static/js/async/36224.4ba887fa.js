"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["36224"],{370905:function(e,s,n){n.r(s),n.d(s,{default:()=>a});var i=n(552676),r=n(740453);function d(e){let s=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",strong:"strong",img:"img",pre:"pre",code:"code"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.h1,{id:"18原理-8有备无患--主从同步",children:["18原理 8：有备无患 —— 主从同步",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#18原理-8有备无患--主从同步",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"很多企业都没有使用到 Redis 的集群，但是至少都做了主从。有了主从，当 master 挂掉的时候，运维让从库过来接管，服务就可以继续，否则 master 需要经过数据恢复和重启的过程，这就可能会拖很长的时间，影响线上业务的持续服务。"}),"\n",(0,i.jsx)(s.p,{children:"在了解 Redis 的主从复制之前，让我们先来理解一下现代分布式系统的理论基石——CAP 原理。"}),"\n",(0,i.jsxs)(s.h2,{id:"cap-原理",children:["CAP 原理",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#cap-原理",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"CAP 原理就好比分布式领域的牛顿定律，它是分布式存储的理论基石。自打 CAP 的论文发表之后，分布式存储中间件犹如雨后春笋般一个一个涌现出来。理解这个原理其实很简单，本节我们首先对这个原理进行一些简单的讲解。"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"C"})," - Consistent ，一致性"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"A"})," - Availability ，可用性"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"P"})," - Partition tolerance ，分区容忍性"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["分布式系统的节点往往都是分布在不同的机器上进行网络隔离开的，这意味着必然会有网络断开的风险，这个网络断开的场景的专业词汇叫着「",(0,i.jsx)(s.strong,{children:"网络分区"}),"」。"]}),"\n",(0,i.jsxs)(s.p,{children:["在网络分区发生时，两个分布式节点之间无法进行通信，我们对一个节点进行的修改操作将无法同步到另外一个节点，所以数据的「",(0,i.jsx)(s.strong,{children:"一致性"}),"」将无法满足，因为两个分布式节点的数据不再保持一致。除非我们牺牲「",(0,i.jsx)(s.strong,{children:"可用性"}),"」，也就是暂停分布式节点服务，在网络分区发生时，不再提供修改数据的功能，直到网络状况完全恢复正常再继续对外提供服务。"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/7/4/164642389477ff9e?w=538&h=391&f=png&s=25993",alt:""})}),"\n",(0,i.jsxs)(s.p,{children:["一句话概括 CAP 原理就是——",(0,i.jsx)(s.strong,{children:"网络分区发生时，一致性和可用性两难全"}),"。"]}),"\n",(0,i.jsxs)(s.h2,{id:"最终一致",children:["最终一致",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#最终一致",children:"#"})]}),"\n",(0,i.jsxs)(s.p,{children:["Redis 的主从数据是异步同步的，所以分布式的 Redis 系统并不满足「",(0,i.jsx)(s.strong,{children:"一致性"}),"」要求。当客户端在 Redis 的主节点修改了数据后，立即返回，即使在主从网络断开的情况下，主节点依旧可以正常对外提供修改服务，所以 Redis 满足「",(0,i.jsx)(s.strong,{children:"可用性"}),"」。"]}),"\n",(0,i.jsxs)(s.p,{children:["Redis 保证「",(0,i.jsx)(s.strong,{children:"最终一致性"}),"」，从节点会努力追赶主节点，最终从节点的状态会和主节点的状态将保持一致。如果网络断开了，主从节点的数据将会出现大量不一致，一旦网络恢复，从节点会采用多种策略努力追赶上落后的数据，继续尽力保持和主节点一致。"]}),"\n",(0,i.jsxs)(s.h2,{id:"主从同步",children:["主从同步",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#主从同步",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"Redis 同步支持主从同步和从从同步，从从同步功能是 Redis 后续版本增加的功能，为了减轻主库的同步负担。后面为了描述上的方便，统一理解为主从同步。"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/7/4/164641d454a0e67a?w=575&h=238&f=png&s=23174",alt:""})}),"\n",(0,i.jsxs)(s.h2,{id:"增量同步",children:["增量同步",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#增量同步",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"Redis 同步的是指令流，主节点会将那些对自己的状态产生修改性影响的指令记录在本地的内存 buffer 中，然后异步将 buffer 中的指令同步到从节点，从节点一边执行同步的指令流来达到和主节点一样的状态，一边向主节点反馈自己同步到哪里了 (偏移量)。"}),"\n",(0,i.jsxs)(s.p,{children:["因为内存的 buffer 是有限的，所以 Redis 主库不能将所有的指令都记录在内存 buffer 中。Redis 的复制内存 buffer 是一个定长的环形数组，如果数组内容满了，就会从头开始覆盖前面的内容。\n",(0,i.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/5/21/16381ba1db76a768?w=217&h=211&f=png&s=22717",alt:""})]}),"\n",(0,i.jsx)(s.p,{children:"如果因为网络状况不好，从节点在短时间内无法和主节点进行同步，那么当网络状况恢复时，Redis 的主节点中那些没有同步的指令在 buffer 中有可能已经被后续的指令覆盖掉了，从节点将无法直接通过指令流来进行同步，这个时候就需要用到更加复杂的同步机制 —— 快照同步。"}),"\n",(0,i.jsxs)(s.h2,{id:"快照同步",children:["快照同步",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#快照同步",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"快照同步是一个非常耗费资源的操作，它首先需要在主库上进行一次 bgsave 将当前内存的数据全部快照到磁盘文件中，然后再将快照文件的内容全部传送到从节点。从节点将快照文件接受完毕后，立即执行一次全量加载，加载之前先要将当前内存的数据清空。加载完毕后通知主节点继续进行增量同步。"}),"\n",(0,i.jsx)(s.p,{children:"在整个快照同步进行的过程中，主节点的复制 buffer 还在不停的往前移动，如果快照同步的时间过长或者复制 buffer 太小，都会导致同步期间的增量指令在复制 buffer 中被覆盖，这样就会导致快照同步完成后无法进行增量复制，然后会再次发起快照同步，如此极有可能会陷入快照同步的死循环。"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{src:"https://user-gold-cdn.xitu.io/2018/7/4/164641fbae932002?w=610&h=258&f=png&s=17606",alt:""})}),"\n",(0,i.jsx)(s.p,{children:"所以务必配置一个合适的复制 buffer 大小参数，避免快照复制的死循环。"}),"\n",(0,i.jsxs)(s.h2,{id:"增加从节点",children:["增加从节点",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#增加从节点",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"当从节点刚刚加入到集群时，它必须先要进行一次快照同步，同步完成后再继续进行增量同步。"}),"\n",(0,i.jsxs)(s.h2,{id:"无盘复制",children:["无盘复制",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#无盘复制",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"主节点在进行快照同步时，会进行很重的文件 IO 操作，特别是对于非 SSD 磁盘存储时，快照会对系统的负载产生较大影响。特别是当系统正在进行 AOF 的 fsync 操作时如果发生快照，fsync 将会被推迟执行，这就会严重影响主节点的服务效率。"}),"\n",(0,i.jsx)(s.p,{children:"所以从 Redis 2.8.18 版开始支持无盘复制。所谓无盘复制是指主服务器直接通过套接字将快照内容发送到从节点，生成快照是一个遍历的过程，主节点会一边遍历内存，一边将序列化的内容发送到从节点，从节点还是跟之前一样，先将接收到的内容存储到磁盘文件中，再进行一次性加载。"}),"\n",(0,i.jsxs)(s.h2,{id:"wait-指令",children:["Wait 指令",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#wait-指令",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"Redis 的复制是异步进行的，wait 指令可以让异步复制变身同步复制，确保系统的强一致性 (不严格)。wait 指令是 Redis3.0 版本以后才出现的。"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"> set key value\nOK\n> wait 1 0\n(integer) 1\n"})}),"\n",(0,i.jsx)(s.p,{children:"wait 提供两个参数，第一个参数是从库的数量 N，第二个参数是时间 t，以毫秒为单位。它表示等待 wait 指令之前的所有写操作同步到 N 个从库 (也就是确保 N 个从库的同步没有滞后)，最多等待时间 t。如果时间 t=0，表示无限等待直到 N 个从库同步完成达成一致。"}),"\n",(0,i.jsx)(s.p,{children:"假设此时出现了网络分区，wait 指令第二个参数时间 t=0，主从同步无法继续进行，wait 指令会永远阻塞，Redis 服务器将丧失可用性。"}),"\n",(0,i.jsxs)(s.h2,{id:"小结",children:["小结",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"主从复制是 Redis 分布式的基础，Redis 的高可用离开了主从复制将无从进行。后面的章节我们会开始讲解 Redis 的集群模式，这几种集群模式都依赖于本节所讲的主从复制。"}),"\n",(0,i.jsx)(s.p,{children:"不过复制功能也不是必须的，如果你将 Redis 只用来做缓存，跟 memcache 一样来对待，也就无需要从库做备份，挂掉了重新启动一下就行。但是只要你使用了 Redis 的持久化功能，就必须认真对待主从复制，它是系统数据安全的基础保障。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,r.ah)(),e.components);return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}let a=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Redis%20%E6%B7%B1%E5%BA%A6%E5%8E%86%E9%99%A9%EF%BC%9A%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F18%E5%8E%9F%E7%90%86%208%EF%BC%9A%E6%9C%89%E5%A4%87%E6%97%A0%E6%82%A3%20%E2%80%94%E2%80%94%20%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.md"]={toc:[{text:"CAP 原理",id:"cap-原理",depth:2},{text:"最终一致",id:"最终一致",depth:2},{text:"主从同步",id:"主从同步",depth:2},{text:"增量同步",id:"增量同步",depth:2},{text:"快照同步",id:"快照同步",depth:2},{text:"增加从节点",id:"增加从节点",depth:2},{text:"无盘复制",id:"无盘复制",depth:2},{text:"Wait 指令",id:"wait-指令",depth:2},{text:"小结",id:"小结",depth:2}],title:"18原理 8：有备无患 —— 主从同步",headingTitle:"18原理 8：有备无患 —— 主从同步",frontmatter:{}}}}]);