"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["30185"],{763132:function(n,e,t){t.r(e),t.d(e,{default:()=>s});var c=t(552676),a=t(740453);function r(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",code:"code",pre:"pre",h4:"h4"},(0,a.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"28云函数的调用与返回",children:["28.云函数的调用与返回",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#28云函数的调用与返回",children:"#"})]}),"\n",(0,c.jsxs)(e.h2,{id:"43-云函数的调用与返回",children:["4.3 云函数的调用与返回",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#43-云函数的调用与返回",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"调用云函数的方式有很多，如小程序端、管理端调用、定时触发器、HTTP访问服务、云函数等，不同的方式存在哪些差异？我们知道调用云开发资源可以通过小程序端SDK和云函数端的SDK，这两种方式有什么不同？在调用云函数的过程中，我们需要注意哪些问题？"}),"\n",(0,c.jsxs)(e.h3,{id:"431-云函数的传参与返回",children:["4.3.1 云函数的传参与返回",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#431-云函数的传参与返回",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["在小程序端我们可以使用",(0,c.jsx)(e.code,{children:"wx.cloud.callFunction"}),"接口调用云函数并向云函数传递参数。参数的来源和参数的数据类型有很多，我们已经了解参数的传递情况呢？"]}),"\n",(0,c.jsx)(e.p,{children:"比如在小程序function页面的function.js里输入以下代码，我们知道页面js的data对象常用于事件处理的过渡，通过数据渲染可以控制小程序的页面；这里我们将data对象里面的数据以参数的形式传递给云函数："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'Page({\n  data:{\n    rectangle:{\n      width:22,\n      height:33,\n    }\n  },\n\n  onLoad(){\n    this.getData()\n  },\n  getData(){\n    wx.cloud.callFunction({\n      name:"invoke",\n      data:{\n        rectangle:this.data.rectangle\n      }\n    }).then(res=>{\n      console.log("res对象",res)\n    })\n  }\n});\n'})}),"\n",(0,c.jsx)(e.p,{children:"在这里调用的云函数是invoke，那invoke云函数应该如何接收小程序端传递的参数呢？在不熟悉或开发时建议可以先通过打印了解参数传递的状态或参数的数据类型。使用开发者工具新建一个云函数，名称如invoke，然后输入以下代码并部署上传到云端："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV\n})\nexports.main = async (event, context) => {\n  console.log(\"event对象\",event)\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"通过invoke云函数的日志可以了解到event对象里参数的情况，然后再使用解构赋值将参数取出，如:"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV\n})\nexports.main = async (event, context) => {\n  console.log(\"event对象\",event)\n  const {rectangle:{width,height}} = event\n  return {\n    circum:(width+height)*2,\n    area:width*height\n  }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"而在小程序端如果需要对云函数return返回的数据进一步处理，既可以使用callback回调函数的方式，也可以使用Promise的方式，还可以将获取的数据赋值给变量，而要对返回的数据有更清晰的了解，也通过需要在开发时多打印或调试，而不能靠蒙或猜："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'async getData(){\n  const result = await wx.cloud.callFunction({\n    name:"invoke",\n    data:{\n      rectangle:this.data.rectangle\n    }\n  })\n\n  console.log("result对象",result) \n  const {result:{circum,area}} = result  //注意这里有两个result，有着不同的含义，注意区分，使用时也可以采用不同的变量名\n  console.log({circum,area})\n  this.setData({\n    circum,area\n  })\n}\n'})}),"\n",(0,c.jsxs)(e.h3,{id:"432-不同调用方式下的event与context",children:["4.3.2 不同调用方式下的event与context",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#432-不同调用方式下的event与context",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"云函数的调用方式很多，不同的调用方式传入给云函数的参数对象也会有所不同。每个云函数的传入参数有两个对象：event对象和context对象。其中event对象指的是SDK触发云函数时传入的事件；而context对象则包含此调用的调用信息和函数的运行状态。采用不同的调用方式以及调用链条，返回的event对象和event对象的值是不一样的。"}),"\n",(0,c.jsxs)(e.h4,{id:"1通过打印了解event与context对象",children:["1、通过打印了解event与context对象",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1通过打印了解event与context对象",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"将invoke云函数的index.js代码修改为如下，并将文件更新上传到云端，接下来我们会通过多种方式来调用这个云函数，只要云函数被触发，我们就可以在日志里查看到打印的event和context对象到底有何不同："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'const cloud = require(\'wx-server-sdk\')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV\n})\nexports.main = async (event, context) => {\n  console.log("event对象",event)\n  console.log("context对象",context)\n}\n'})}),"\n",(0,c.jsx)(e.p,{children:"在开发者工具调试器的console控制台调用云函数可以直接在控制台输入以下命令："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'wx.cloud.callFunction({name:"add"}).then(res=>{console.log(res)})\n'})}),"\n",(0,c.jsx)(e.p,{children:"我们也可以把上面的代码写在小程序首页如function.js的onLoad生命周期函数里，通过开发者工具的调试以及真机调试来调用云函数；而要在管理端调用云函数，可以打开云开发控制台，对该云函数进行云端测试。打印的event对象和context对象大致如下："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"event对象 { //通过管理端调用云函数，如云端测试，event对象是没有userInfo的\n  userInfo:{ appId: 'wxda99ae4531b57046',\nopenId: 'oUL-m5FuRmuVmxvbYOGuXbuEDsn8' } }\n\ncontext对象 { \n  memory_limit_in_mb: 256,\n  time_limit_in_ms: 3000,\n  request_id: 'f7e616b2-fb4d-11ea-a839-52540064cc91',\n  environment:'',//部分值可以通过getWXContext()获取，后面会介绍\n  environ:'',//部分值可以通过getWXContext()获取，后面会介绍\n  function_version: '$LATEST',\n  function_name: 'invoke',\n  namespace: 'xly-xrlur',\n  tencentcloud_region: '',\n  tencentcloud_appid: '1300446086',\n  tencentcloud_uin: '100011753314' }\n"})}),"\n",(0,c.jsx)(e.p,{children:"通过管理端调用云函数，无论是event对象还是context对象都是获取不到用户的openId、appId、unionid等信息的，也就是说通过管理端调用云函数是获取不到用户的登录态信息的。"}),"\n",(0,c.jsxs)(e.h4,{id:"2getwxcontext",children:["2、getWXContext()",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2getwxcontext",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["context对象里的environment、environ过于复杂，云开发有专门的接口",(0,c.jsx)(e.code,{children:"cloud.getWXContext()"}),"可以获取到其中比较关键的信息，比如会返回小程序用户的openid、小程序appid、小程序用户的unionid等。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nexports.main = async (event, context) => {\n  const wxContext = cloud.getWXContext()\n  console.log(\"wxContext对象\",wxContext)\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["和context对象一样，通过不同的调用方式，",(0,c.jsx)(e.code,{children:"cloud.getWXContext()"}),"返回的值也会有所不同，"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"{ UNIONID: '',//用户的unionid，只有绑定了开放平台，且在用户授权（允许获取用户信息、关注、支付）的情况下才有\n  CLIENTIP: '10.22.213.71',//小程序客户端的网络IPv4地址\n  CLIENTIPV6: '::ffff:10.22.213.71',//小程序客户端的网络IPv6地址\n  APPID: 'wxda99....b57046',//小程序AppID\n  OPENID: 'oUL-m5FuRmuVmxvbYOGuXbuEDsn8',//小程序用户的openid\n  ENV: 'xly-xrlur',\n  SOURCE: 'wx_devtools' //云函数调用来源，wx_devtools开发者工具调用，wx_client小程序调用，wx_http	HTTP API 调用，wx_unknown	微信未知来源调用等\n}\n"})}),"\n",(0,c.jsxs)(e.h4,{id:"3登录态与openid的获取",children:["3、登录态与openid的获取",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3登录态与openid的获取",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["由于context是调用云函数时传入的上下文对象，而getWXContext与context对象有关，因此调用",(0,c.jsx)(e.code,{children:"cloud.getWXContext()"}),"接口时，不能在exports.main外。同时，openId、AppId、unionid等用户信息只有在小程序端调用时才能获取到。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nexports.main = async (event, context) => {\n  const wxContext = cloud.getWXContext()\n  const {OPENID} = wxContext\n  return OPENID\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["不过值得一提的是，尽管我们在小程序端非常需要用户的openid这个值，但是更多的时候，我们没有必要浪费云函数资源来获取openid的值。比如，不少人在使用云开发时，都会先调用云函数返回用户的openid，然后在用户CRUD云数据库时云开发资源时传入获取到的openid。我们可以在用户读写云开发使用",(0,c.jsx)(e.code,{children:".where({_openid:'{openid}'})"}),"以及借助安全规则的方式，这样就不需要先获取用户的openid\b的具体值。"]}),"\n",(0,c.jsxs)(e.h3,{id:"433-main函数与return",children:["4.3.3 main函数与return",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#433-main函数与return",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"云函数主要执行的是index.js中的main方法，因此要确保云函数中含有main函数，而return除了会返回数据给云函数的调用方，同时也会终结云函数的执行。"}),"\n",(0,c.jsx)(e.p,{children:"在main函数的其他函数里要注意一些写法，比如云函数是支持async/await的，不过在await再用then链式写法，而没有返回值，那data对象就会是undefined，而云函数调用的结果为空"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'const cloud = require(\'wx-server-sdk\')\ncloud.init({\n  env:cloud.DYNAMIC_CURRENT_ENV \n})\nconst db = cloud.database()\nconst _ = db.command\nexports.main = async(event, context) => {\n  const data = await db.collection("china")\n  .where({\n    _id:_.exists(true)\n  })\n  .get()\n  .then(res=>{\n    console.log("then打印的结果",res)//会返回数据库查询的结果\n  })\n  console.log("data对象",data)//data为undefined\n  return data //返回的data为空\n}\n'})}),"\n",(0,c.jsx)(e.p,{children:"面对这个问题，有两个解决方法，一是不要使用then链式，二是在then方法里return一个返回值，更加土建采用第一种方式。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'//方法一，不使用then链式\nconst data = await db.collection("china")\n.where({\n  _id:_.exists(true)\n})\n.get()\n\n//方法二，使用return返回一个data\nconst data = await db.collection("china")\n.where({\n  _id:_.exists(true)\n})\n.get()\n.then(res=>{\n  console.log("then打印的结果",res)\n  return res\n})\nconsole.log("data对象",data)\n'})}),"\n",(0,c.jsx)(e.p,{children:"注意方法二里尽管我们在then方法里使用了return，但是return只是终结数据库请求，以及返回数据给data，并不会中断云函数的执行，也不会把res的数据返回给main。因此，下面的方法调用云函数时也的返回值也会是null："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:'await db.collection("china") //const data = await db.collection("china") 同样也不会给main返回任何数据\n.where({\n  _id:_.exists(true)\n})\n.get()\n.then(res=>{\n  console.log("then打印的结果",res)\n  return res\n})\n'})})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(r,{...n})}):r(n)}let s=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F28.%E4%BA%91%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E4%B8%8E%E8%BF%94%E5%9B%9E.md"]={toc:[{text:"4.3 云函数的调用与返回",id:"43-云函数的调用与返回",depth:2},{text:"4.3.1 云函数的传参与返回",id:"431-云函数的传参与返回",depth:3},{text:"4.3.2 不同调用方式下的event与context",id:"432-不同调用方式下的event与context",depth:3},{text:"1、通过打印了解event与context对象",id:"1通过打印了解event与context对象",depth:4},{text:"2、getWXContext()",id:"2getwxcontext",depth:4},{text:"3、登录态与openid的获取",id:"3登录态与openid的获取",depth:4},{text:"4.3.3 main函数与return",id:"433-main函数与return",depth:3}],title:"28.云函数的调用与返回",headingTitle:"28.云函数的调用与返回",frontmatter:{}}}}]);