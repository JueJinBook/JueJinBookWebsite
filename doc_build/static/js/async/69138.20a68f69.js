"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["69138"],{435361:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var s=r(552676),i=r(740453);let t=r.p+"static/image/4df6241933dabec010b504723ad12d3e.08fd47d4.png",c=r.p+"static/image/83cf5e180b907103b7e52a62d0ed994f.ccda2f3a.png",l=r.p+"static/image/cf01a3c4a1636d9aef2fc81a58b7e583.d12cdfd6.png",o=r.p+"static/image/4945aa06daece8073c3d995040c3bba2.283eb04a.png";function d(e){let n=Object.assign({p:"p",h2:"h2",a:"a",img:"img",blockquote:"blockquote",strong:"strong",pre:"pre",code:"code",h3:"h3",ul:"ul",li:"li"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"在前面的课程中我们讲解了构建时的设计，包括构建工具的选型、构建脚本和发布脚本的设计。本节课我们主要讲解开发态的设计规范：如何在 TypeScript 源代码中进行静态代码检查，从而降低代码的出错概率并提升设计的稳定性。"}),"\n",(0,s.jsxs)(n.h2,{id:"为什么需要进行代码检查",children:["为什么需要进行代码检查？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么需要进行代码检查",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"JavaScript （弱语言和动态语言）会通过混合动态编译（JIT）的方式来提升运行性能，由于启动使用解释器执行，因此源代码不需要编译程序，代码只能在运行的过程中进行调试发现错误。"}),"\n",(0,s.jsx)(n.p,{children:"C++ 源代码需要通过编译器编译后才能运行，编译时和运行时强制分离，在编译的过程中会执行词法分析、语法分析和类型检查，确保编译后的代码不会出现语法错误，如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"为了避免 JavaScript 在运行时出现语法错误，开源社区设计了一些代码检查工具（JSLint、TSLint 以及 ESLint 等），可以使得 JavaScript 在代码执行之前通过静态分析的方式提前进行语法检测和类型检查。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：关于 V8 和 C++ 编译可以查看 ",(0,s.jsx)(n.strong,{children:"原理进阶"}),"课程，这里暂时不用过多了解。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"eslint-和-tslint",children:["ESLint 和 TSLint",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#eslint-和-tslint",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["TypeScript 的代码检查工具主要有 TSLint 和 ESLint 两种。早期的 TypeScript 采用 TSLint 进行检查，两者采用同样的 ",(0,s.jsx)(n.a,{href:"https://typescript-eslint.io/docs/development/architecture/asts",target:"_blank",rel:"noopener noreferrer",children:"AST"})," 格式进行编译。为了在 TypeScript 中复用 ESLint 对于 JavaScript 的生态支持，TypeScript 团队在 2019 年宣布全面转向 ESLint，接下来我们讲解如何在库设计的 TypeScript 中支持 ESLint 校验。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：关于 TypeScript 转向 ESLint 的原因可以阅读 ",(0,s.jsx)(n.a,{href:"https://medium.com/palantir/tslint-in-2019-1a144c2317a9",target:"_blank",rel:"noopener noreferrer",children:"TSLint in 2019"})," 。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"eslint-配置",children:["ESLint 配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#eslint-配置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["根据 ",(0,s.jsx)(n.a,{href:"https://typescript-eslint.io/getting-started",target:"_blank",rel:"noopener noreferrer",children:"TypeScript ESLint / Getting Started"})," 官方文档，在库的项目中进行必要的依赖安装："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 31.工程设计：代码检查\nnpm i --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint typescript\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：本项目安装了 TypeScript ESLint 5.41.1 版本、ESLint 8.35.0 版本、TypeScript 4.9.5 版本。如果发现安装了以后 ESLint 不生效，则更多的是需要根据本文所学的内容进行问题排查。示例源码可以从 ",(0,s.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/eslint",target:"_blank",rel:"noopener noreferrer",children:"demo/eslint"})," 分支获取。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在根目录新建 ",(0,s.jsx)(n.code,{children:".eslintrc.js"})," 配置文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  // 共享配置：配置 TypeScript 推荐的校验规则\n  extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended'],\n  // 解析器：将 TypeScript 的 AST 转换成兼容 ESLint 的 AST\n  parser: '@typescript-eslint/parser',\n  // 插件：提供 TypeScript 校验规则的实现\n  plugins: ['@typescript-eslint'],\n  // 层叠配置：停止向上遍历 ESLint 配置文件\n  root: true,\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["为了防止校验不必要的文件，可以在根目录下新建 ",(0,s.jsx)(n.code,{children:".eslintignore"})," 文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"lib\nnode_modules\n.eslintrc.js\n"})}),"\n",(0,s.jsx)(n.p,{children:"接下来重点讲解 ESLint 中各个配置的含义，以及如何在项目中生效 ESLint 校验。"}),"\n",(0,s.jsxs)(n.h3,{id:"层叠配置",children:["层叠配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#层叠配置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:".eslintrc.js"})," 设置 ",(0,s.jsx)(n.code,{children:"root: true"})," ，主要用于向上停止解析嵌套的规则配置，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"projectA\n├── .eslintrc.js       # ESLint 配置文件，没有设置 root\n├── add.js    \n├── lib\n│   └── index.js                          \n└── tests\n     ├── .eslintrc.js  # ESLint 配置文件，没有设置 root\n     └── main.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在上述目录结构中，",(0,s.jsx)(n.code,{children:"lib"})," 目录下的文件将使用 ",(0,s.jsx)(n.code,{children:"projectA/.eslintrc.js"})," 作为它的配置文件进行 ESLint 检测，而 ",(0,s.jsx)(n.code,{children:"tests"})," 目录下的文件将使用 ",(0,s.jsx)(n.code,{children:"tests/.eslintrc.js"})," 和 ",(0,s.jsx)(n.code,{children:"projectA/.eslintrc.js"}),"的组合配置进行 ESLint 校验，并且会将离检测文件最近的配置文件设置为最高优先级。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：在 Monorenpo 目录结构设计中，可以在根目录设置各个分包通用的检测规则，如果某些规则不适用内部的分包，可以在包中设置高优先级规则覆盖。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在默认情况下，ESLint 会在检测文件所在的父级目录中寻找配置文件，一直遍历到根目录。例如 ",(0,s.jsx)(n.code,{children:"projectA"})," 会继续向上进行遍历，如果 ",(0,s.jsx)(n.code,{children:"projectA"})," 的父级目录中存在 ESLint 配置文件，那么可能会组合意想不到的规则配置。"]}),"\n",(0,s.jsxs)(n.p,{children:["为了将 ESLint 的配置限定在一个特定的项目中，可以在项目根目录的 ",(0,s.jsx)(n.code,{children:"eslintrc.js"})," 中设置",(0,s.jsx)(n.code,{children:"root: true"}),"，此时 ESLint 会停止向上遍历。例如将 ",(0,s.jsx)(n.code,{children:"tests"})," 目录下的 ESLint 配置设置成 ",(0,s.jsx)(n.code,{children:"root: true"}),"，在检测 ",(0,s.jsx)(n.code,{children:"tests/main.js"})," 时会只解析 ",(0,s.jsx)(n.code,{children:"tests/.eslintrc.js"})," 配置，而 ",(0,s.jsx)(n.code,{children:"projectA/.eslintrc.js"})," 配置不会生效。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'projectA\n├── .eslintrc.js       # ESLint 配置文件，设置 { "root": true }\n├── add.js    \n├── lib\n│   └── index.js                          \n└── tests\n    ├── .eslintrc.js   # ESLint 配置文件，设置 { "root": true }\n    └── main.js\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"解析器",children:["解析器",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#解析器",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["为了支持 TypeScript 进行 ESLint 校验，需要在 ",(0,s.jsx)(n.code,{children:".eslintrc.js"})," 中配置 ",(0,s.jsx)(n.code,{children:"parser"})," 字段："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  // 解析器：将 TypeScript 的 AST 转换成兼容 ESLint 的 AST\n  parser: '@typescript-eslint/parser',\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["TypeScript 和 ESLint 使用不同的 AST 进行解析，为了在 TypeScript 中支持 ESLint 需要制作额外的",(0,s.jsx)(n.a,{href:"https://eslint.org/docs/latest/extend/custom-parsers",target:"_blank",rel:"noopener noreferrer",children:"自定义解析器"}),"（生成的 AST 需要基于 ",(0,s.jsx)(n.a,{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer",children:"ESTree"}),"），目的是为了将 TypeScript 转成 ESLint 兼容的 AST。",(0,s.jsx)(n.a,{href:"https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/parser",target:"_blank",rel:"noopener noreferrer",children:"TypeScript ESLint Parser"})," 是一个 AST 解析器，会处理所有 ESLint 配置并调用 ",(0,s.jsx)(n.a,{href:"https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/typescript-estree",target:"_blank",rel:"noopener noreferrer",children:"TypeScript ESTree"})," 生成 ESTree AST，从而兼容 ESLint。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：",(0,s.jsx)(n.a,{href:"https://github.com/typescript-eslint/typescript-eslint",target:"_blank",rel:"noopener noreferrer",children:"TypeScript ESLint"})," 采用 ",(0,s.jsx)(n.a,{href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer",children:"Lerna"})," 设计成 Monorenpo 结构，内部包含了多个 NPM 包，关于 TypeScript ESLint Parser 和 TypeScript ESTree 的详细介绍，大家可以查看 ",(0,s.jsx)(n.a,{href:"https://typescript-eslint.io/",target:"_blank",rel:"noopener noreferrer",children:"TypeScript ESLint"})," 官方文档。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["如果想深入了解 TypeScript ESLint Parser，可以通过 ",(0,s.jsx)(n.code,{children:"node_modules/@typescript-eslint/parser"})," 目录寻找到 ",(0,s.jsx)(n.code,{children:"package.json"})," 中的 ",(0,s.jsx)(n.code,{children:"main"})," 字段，进入对应的入口文件查阅代码，会发现内部导出了 ESLint 自定义解析器需要的 ",(0,s.jsx)(n.code,{children:"parse"})," 和 ",(0,s.jsx)(n.code,{children:"parseForESLint"})," 方法。"]}),"\n",(0,s.jsxs)(n.h3,{id:"插件",children:["插件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#插件",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 ESLint 的 ",(0,s.jsx)(n.code,{children:".eslintrc.js"})," 配置文件中可以通过 ",(0,s.jsx)(n.code,{children:"plugins"})," 字段配置插件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  // ESLint 支持使用第三方插件，在使用插件之前，必须使用 NPM 安装它\n  plugins: ['@typescript-eslint'],\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在 ESLint 中每个插件都是命名格式为 ",(0,s.jsx)(n.code,{children:"eslint-plugin-<plugin-name>"})," 或者 ",(0,s.jsx)(n.code,{children:"@<scope>/eslint-plugin-<plugin-name>"})," 的 NPM 包，例如 ",(0,s.jsx)(n.code,{children:"eslint-plugin-vue"})," 和 ",(0,s.jsx)(n.code,{children:"@typescript-eslint/eslint-plugin"}),"。在配置时可以省略 ",(0,s.jsx)(n.code,{children:"eslint-plugin"})," 前缀，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  // 表示配置为 eslint-plugin-vue 和 @typescript-eslint/eslint-plugin 插件包\n  plugins: ['vue', '@typescript-eslint'],\n};\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：可以在 NPM 官网中搜索出大量以 ",(0,s.jsx)(n.code,{children:"eslint-plugin"})," 命名的 NPM 包。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["从上述配置规则可以发现，",(0,s.jsx)(n.code,{children:"@typescript-eslint"})," 配置事实上指向 ",(0,s.jsx)(n.code,{children:"@typescript-eslint/eslint-plugin"})," 插件包，通过 ESLint 官方的",(0,s.jsx)(n.a,{href:"https://eslint.org/docs/latest/extend/plugins",target:"_blank",rel:"noopener noreferrer",children:"插件开发文档"}),"可以发现，插件主要用于设计 ESLint 校验规则的实现："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'module.exports = {\n    // 输出一个 rules 对象暴露校验规则\n    rules: {\n        // 设计一条校验规则 dollar-sign\n        "dollar-sign": {\n            create: function (context) {\n                // 实现校验规则\n            }\n        }\n    }\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["假设上述代码发布成 ",(0,s.jsx)(n.code,{children:"eslint-plugin-ziyi"})," 插件包，想要在项目中生效该插件的 ",(0,s.jsx)(n.code,{children:"dollar-sign"})," 规则，可以在 ",(0,s.jsx)(n.code,{children:"eslintrc.js"})," 中进行如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  // 只设置插件是不会生效校验规则的\n  plugins: ['ziyi'],\n  // 必须指定插件内部的规则，插件仅仅是实现了该校验规则，是否使用该规则由 rules 配置决定\n  rules: {\n    // 省略 eslint-plugin 前缀，不需要使用 eslint-plugin-ziyi/dollar-sign\n    'ziyi/dollar-sign': 'error'\n  }\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["接下来可以简单通过 ",(0,s.jsx)(n.code,{children:"@typescript-eslint/eslint-plugin"})," 来验证上述设计，查看 ",(0,s.jsx)(n.code,{children:"@typescript-eslint/eslint-plugin"})," 中的规则实现："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// node_modules/@typescript-eslint/eslint-plugin\n// package.json 中的 main 指向了 dist/index.js 文件，因此 index.js 是入口文件\n\n// dist/index.js（部分代码）\nconst rules_1 = __importDefault(require(\"./rules\"));\nmodule.exports = {\n    rules: rules_1.default,\n};\n\n// dist/rules/index.js（部分代码）\nconst ban_ts_comment_1 = __importDefault(require(\"./ban-ts-comment\"));\nexports.default = {\n     // 设计一条校验规则 ban-ts-comment\n    'ban-ts-comment': ban_ts_comment_1.default,\n};\n\n// dist/rules/ban-ts-comment.js（部分代码）\n\n// 以下代码不用细看，可以简单理解为从以下注释中匹配，如果能够匹配上，则发布一个 ESLint 错误或者警告\n// @ts-ignore\n// @ts-nocheck\n// @ts-expoect-error\n// @ts-check\n\nexports.default = util.createRule({\n      name: 'ban-ts-comment',\n      create(context, [options]) {\n            /*\n              The regex used are taken from the ones used in the official TypeScript repo -\n              https://github.com/microsoft/TypeScript/blob/408c760fae66080104bc85c449282c2d207dfe8e/src/compiler/scanner.ts#L288-L296\n            */\n            const commentDirectiveRegExSingleLine = /^/*\\s*@ts-(?<directive>expect-error|ignore|check|nocheck)(?<description>.*)/;\n            const commentDirectiveRegExMultiLine = /^\\s*(?:/|*)*\\s*@ts-(?<directive>expect-error|ignore|check|nocheck)(?<description>.*)/;\n            const sourceCode = context.getSourceCode();\n            const descriptionFormats = new Map();\n            for (const directive of [\n                'ts-expect-error',\n                'ts-ignore',\n                'ts-nocheck',\n                'ts-check',\n            ]) {\n                const option = options[directive];\n                if (typeof option === 'object' && option.descriptionFormat) {\n                    descriptionFormats.set(directive, new RegExp(option.descriptionFormat));\n                }\n            }\n            return {\n                Program() {\n                    const comments = sourceCode.getAllComments();\n                    comments.forEach(comment => {\n                        const regExp = comment.type === utils_1.AST_TOKEN_TYPES.Line\n                            ? commentDirectiveRegExSingleLine\n                            : commentDirectiveRegExMultiLine;\n                        const match = regExp.exec(comment.value);\n                        if (!match) {\n                            return;\n                        }\n                        const { directive, description } = match.groups;\n                        const fullDirective = ts-${directive};\n                        const option = options[fullDirective];\n                        if (option === true) {\n                            // https://eslint.org/docs/latest/developer-guide/working-with-rules#contextreport\n                            // 一旦匹配上 TypeScript 上述注释，则通过 context.report 在 ESLint 中发布一个警告或者错误\n                            // The main method you’ll use is context.report(), which publishes a warning or error (depending on the configuration being used). \n                            context.report({\n                                // (optional) placeholder data for message.\n                                data: { directive },\n                                //  (optional) the AST node related to the problem. \n                                node: comment,\n                                // the problem message.\n                                messageId: 'tsDirectiveComment',\n                            });\n                        }\n                        if (option === 'allow-with-description' ||\n                            (typeof option === 'object' && option.descriptionFormat)) {\n                            const { minimumDescriptionLength = exports.defaultMinimumDescriptionLength, } = options;\n                            const format = descriptionFormats.get(fullDirective);\n                            if (description.trim().length < minimumDescriptionLength) {\n                                context.report({\n                                    data: { directive, minimumDescriptionLength },\n                                    node: comment,\n                                    messageId: 'tsDirectiveCommentRequiresDescription',\n                                });\n                            }\n                            else if (format && !format.test(description)) {\n                                context.report({\n                                    data: { directive, format: format.source },\n                                    node: comment,\n                                    messageId: 'tsDirectiveCommentDescriptionNotMatchPattern',\n                                });\n                            }\n                        }\n                    });\n                },\n            };\n        }\n})\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：这里只是为了让大家知道 ESLint 插件的实现过程，如果大家只是设置规则，可以根据官方文档进行设置，例如 ",(0,s.jsx)(n.a,{href:"https://typescript-eslint.io/rules/",target:"_blank",rel:"noopener noreferrer",children:"TypeScript ESLint / Rules"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["知道规则之后，可以通过 ",(0,s.jsx)(n.code,{children:".eslintrc.js"})," 进行规则设置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  extends: [\"eslint:recommended\", \"plugin:@typescript-eslint/recommended\"],\n  // 解析器：将 TypeScript 的 AST 转换成兼容 ESLint 的 AST\n  parser: \"@typescript-eslint/parser\",\n  // 插件：提供 TypeScript 校验规则的实现\n  plugins: [\"@typescript-eslint\"],\n  // 层叠配置\n  root: true,\n  // 根据 TypeScript 插件实现的规则，进行规则配置\n  rules: {\n    \n    // 规则的错误级别配置\n    // 'off' | 0：  关闭规则\n    // 'warn' | 1： 将规则视为一个警告（不会导致程序退出，不会影响退出码）\n    // 'error' | 2：将规则视为一个错误（程序会退出，退出码为 1）\n\n    // 表示来自插件 @typescript-eslint/eslint-plugin 的规则配置\n    // 可以省略 eslint-plugin，不需要使用 @typescript-eslint/eslint-plugin/ban-ts-comment\n    '@typescript-eslint/ban-ts-comment': 'error'\n  }\n};\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：关于如何配置 ESLint 的规则，可以查看 ",(0,s.jsx)(n.a,{href:"https://eslint.bootcss.com/docs/rules/",target:"_blank",rel:"noopener noreferrer",children:"ESLint / Rules"}),"。关于 ban-ts-comment 规则的详细说明，可以查看 ",(0,s.jsx)(n.a,{href:"https://typescript-eslint.io/rules/ban-ts-comment",target:"_blank",rel:"noopener noreferrer",children:"TypeScript ESLint / Rules / ban-ts-comment"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["配置完成后在 ",(0,s.jsx)(n.code,{children:"package.json"})," 中设置校验命令："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'  "scripts": {\n    // 新增 ESLint 校验，校验 src 目录下的 TypeScript 源代码\n    // eslint [options] [file|dir|glob]*\n    "lint": "eslint --ext .ts src"\n  },\n'})}),"\n",(0,s.jsxs)(n.p,{children:["配置完校验命令后，在 ",(0,s.jsx)(n.code,{children:"src/index.ts"})," 目录下新增一个 TypeScript 注释，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// @ts-ignore\nexport * from "./comm/comm1";\nexport * from "./comm/comm2";\nexport * from "./core/core";\nexport * from "./nav/nav";\nexport * from "./opt/opt1";\nexport * from "./opt/opt2";\nexport * from "./sandbox/sandbox1";\nexport * from "./sandbox/sandbox2";\nexport * from "./sandbox/sandbox3";\n'})}),"\n",(0,s.jsxs)(n.p,{children:["执行 ",(0,s.jsx)(n.code,{children:"npm run lint"})," 会输出如下错误信息："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# 执行\nnpm run lint\n\n# 打印\n> micro-framework@1.0.6 lint\n> eslint --ext .ts src\n\n\n/Users/zhuxiankang/Desktop/Github/micro-framework/src/index.ts\n# 提示不要使用 @ts-ignore，并告诉匹配该校验的规则 @typescript-eslint/ban-ts-comment\n  1:1  error  Do not use "@ts-ignore" because it alters compilation errors  @typescript-eslint/ban-ts-comment\n# ESLint 校验出 1 个错误\n✖ 1 problem (1 error, 0 warnings)\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"温馨提示"}),"：ESLint 输出的错误信息是通过 ",(0,s.jsx)(n.a,{href:"https://eslint.org/docs/latest/use/formatters/",target:"_blank",rel:"noopener noreferrer",children:"ESLint Formatters"})," 生成，查看 ESLint 源代码可发现默认采用的是 ",(0,s.jsx)(n.a,{href:"https://eslint.org/docs/latest/use/formatters/#stylish",target:"_blank",rel:"noopener noreferrer",children:"stylish"})," 打印风格。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"共享配置",children:["共享配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#共享配置",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在开发的过程中根据安装的 ESLint 插件进行规则设置是非常麻烦的，并且在团队协作或者社区中提供一份统一的规则设置也是一件麻烦的事，例如："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["库 A 设置了一套基于 ",(0,s.jsx)(n.code,{children:"@typescript-eslint/eslint-plugin"})," 插件的校验规则；"]}),"\n",(0,s.jsx)(n.li,{children:"库 B 和 C 想要复用库 A 的校验规则，如果库 A 经常更新这套校验规则，如何实时复用？"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["在 ESLint 中提供了共享配置的功能，可以将 ",(0,s.jsx)(n.code,{children:".eslintrc.js"})," 中的配置发布成一个通用的 NPM 包，从而供团队内部或者社区进行配置复用。发布的 NPM 包和插件命名的规则类似，必须以 ",(0,s.jsx)(n.code,{children:"eslint-config"})," 前缀命名。例如在 JavaScript 中经常会使用 ",(0,s.jsx)(n.code,{children:"eslint-config-standard"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// 安装以后在 node_modules/eslint-config-standard 目录下查看 package.json 中的 main 字段\n// 找到 NPM 包的入口文件为 index.js\n\n// index.js\n/*! eslint-config-standard. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nmodule.exports = require(\'./.eslintrc.json\')\n\n// .eslintrc.json（类似于 eslintrc.js 配置文件）\n{\n  "parserOptions": {\n    "ecmaVersion": 2022,\n    "ecmaFeatures": {\n      "jsx": true\n    },\n    "sourceType": "module"\n  },\n\n  "env": {\n    "es2021": true,\n    "node": true\n  },\n\n  // 共享插件\n  "plugins": [\n    "import",\n    "n",\n    "promise"\n  ],\n\n  "globals": {\n    "document": "readonly",\n    "navigator": "readonly",\n    "window": "readonly"\n  },\n\n  // 共享校验规则\n  "rules": {\n    "no-var": "warn",\n    // 此处省略剩余的校验规则\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["为了实现配置复用需要在项目中安装 NPM 包并直接在 ",(0,s.jsx)(n.code,{children:"eslintrc.js"})," 中配置 ",(0,s.jsx)(n.code,{children:"extends"})," 字段："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    // 类似于插件，可以省略 eslint-config 前缀\n    "extends": ["standard"]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"eslintrc.js"})," 中的 ",(0,s.jsx)(n.code,{children:"extends"})," 字段主要实现配置合并，当然除了发布成 ",(0,s.jsx)(n.code,{children:"eslint-config"})," NPM 包来共享配置，也可以通过插件来共享配置。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// 假设开发了一个插件 eslint-plugin-ziyi\n\nmodule.exports = {\n    // 输出一个 rules 对象暴露实现的校验规则\n    rules: {\n        // 设计一条校验规则 dollar-sign\n        "dollar-sign": {\n            create: function (context) {\n                // 实现校验规则\n            }\n        }\n    },\n\n    // 输出一个 configs 对象共享 ESLint 配置\n    configs: {\n        // 所有的规则\n        all: {\n            rules: {\n                semi: "error",\n                "ziyi/dollar-sign": "error"\n                // 所有 rules 中的规则配置\n            }\n        },\n\n        // 必须的规则\n        \'essential\': {\n            rules: {\n                semi: "error",\n                "ziyi/dollar-sign": "error"\n                // 其他规则集配置\n            }\n        },\n      \n        // 推荐的规则集\n        recommended: {\n            rules: {\n                // 推荐的规则集配置\n            }\n        },\n\n        // 强烈推荐的规则集\n        \'strongly-recommended:  {\n            rules: {\n                // 强烈推荐的规则集配置\n            }\n        },\n    }\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["如果想要在 ",(0,s.jsx)(n.code,{children:".eslintrc.js"})," 中共享配置，则必须使用 ",(0,s.jsx)(n.code,{children:"plugin: <plugin-name>/<config-name>"})," 方式进行配置，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 没有使用 extends 共享配置时必须指定 rules 进行一条条规则配置\n// module.exports = {\n//   plugins: ['ziyi'],\n//   // 必须指定规则，只设置插件是不会生效校验规则的\n//   rules: {\n//     // 省略 eslint-plugin 前缀，不需要使用 eslint-plugin-ziyi/dollar-sign\n//     'ziyi/dollar-sign': 'error'\n//   }\n// };\n\n// 使用 extends 共享配置\nmodule.exports = {\n  extends: [\n     // 可以省略 eslint-plugin 前缀\n    'plugin:ziyi/essential',\n    'plugin:ziyi/recommended',\n    'plugin:ziyi/strongly-recommended',\n  ],\n  plugins: ['ziyi'],\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果熟悉 Vue 开发，则可能对上述共享配置非常熟悉，在 Vue 2.x 的官方文档",(0,s.jsx)(n.a,{href:"https://v2.cn.vuejs.org/v2/style-guide/",target:"_blank",rel:"noopener noreferrer",children:"风格指南"}),"中，将规则设定为四类：必要的、强烈推荐、推荐和谨慎使用，实际上是通过 ",(0,s.jsx)(n.code,{children:"eslint-plugin-vue"})," 对外提供的",(0,s.jsx)(n.a,{href:"https://eslint.vuejs.org/rules/",target:"_blank",rel:"noopener noreferrer",children:"共享配置"}),"实现："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 安装 eslint-plugin-vue 9.6.0 版本\n// 通过 package.json 的 main 字段找到入口文件 lib/index.js\n\n// lib/index.js\n/*\n * IMPORTANT!\n * This file has been automatically generated,\n * in order to update its content execute \"npm run update\"\n */\n'use strict'\n\nmodule.exports = {\n  rules: {\n    'array-bracket-newline': require('./rules/array-bracket-newline'),\n    // 其余规则实现\n  },\n  configs: {\n    base: require('./configs/base'),\n    essential: require('./configs/essential'),\n    'no-layout-rules': require('./configs/no-layout-rules'),\n    recommended: require('./configs/recommended'),\n    'strongly-recommended': require('./configs/strongly-recommended'),\n    'vue3-essential': require('./configs/vue3-essential'),\n    'vue3-recommended': require('./configs/vue3-recommended'),\n    'vue3-strongly-recommended': require('./configs/vue3-strongly-recommended')\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"eslintrc.js"})," 中的使用方式如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  extends: [\n    // add more generic rulesets here, such as:\n    // 'eslint:recommended',\n    'plugin:vue/vue3-recommended',\n    // 'plugin:vue/recommended' // Use this if you are using Vue.js 2.x.\n  ],\n  rules: {\n    // override/add rules settings here, such as:\n    // 'vue/no-unused-vars': 'error'\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["通过上述代码可以发现，ESLint 中的 ",(0,s.jsx)(n.code,{children:"extends"})," 共享配置的最佳实践就是对外提供代码的风格指南，并且可以通过不同的配置实现递进的风格规则。回到最初的 TypeScript 的 ESLint 配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  // eslint:recommended：ESLint 提供的推荐规则集\n  // plugin:@typescript-eslint/recommended：TypeScript 提供的推荐规则集\n  extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended'],\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  root: true,\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"可以查看一下 TypeScript 有哪些风格推荐以及对应的规则集："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// node_modules/@typescript-eslint/eslint-plugin\n\n// dist/index.js\nmodule.exports = {\n    rules: rules_1.default,\n    configs: {\n        // 所有的规则集，建议团队内的开发者都精通 TypeScript 开发时才启用\n        all: all_1.default,\n        base: base_1.default,\n        // 推荐规则集，建议所有 TypeScript 开发者都使用此配置\n        recommended: recommended_1.default,\n        'eslint-recommended': eslint_recommended_1.default,\n        // 推荐的 TypeScrpt 类型信息检查规则集，建议所有 TypeScript 开发者都使用此配置\n        'recommended-requiring-type-checking': recommended_requiring_type_checking_1.default,\n        // 更加严格的规则集，建议团队内大部分开发者都精通 TypeScript 开发时才启用\n        strict: strict_1.default,\n    },\n};\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：可以在 ",(0,s.jsx)(n.a,{href:"https://typescript-eslint.io/rules/",target:"_blank",rel:"noopener noreferrer",children:"TypeScript ESLint / Rules"})," 中组合勾选这些共享配置来查看最终会生效的规则列表。可以在 ",(0,s.jsx)(n.a,{href:"https://typescript-eslint.io/linting/configs/",target:"_blank",rel:"noopener noreferrer",children:"TypeScript ESLint / Configurations"})," 了解上述规则集配置的介绍。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["根据官方的文档介绍，建议开启 ",(0,s.jsx)(n.code,{children:"recommended"})," 和 ",(0,s.jsx)(n.code,{children:"recommended-requiring-type-checking"}),"(可以利用 TypeScript 类型校验 API 进行更深度的规则校验 ) 两个共享配置，根据 ",(0,s.jsx)(n.a,{href:"https://typescript-eslint.io/linting/typed-linting",target:"_blank",rel:"noopener noreferrer",children:"TypeScript ESLint / Linting with Type Information"})," 文档进行配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  root: true,\n  parser: '@typescript-eslint/parser',\n  parserOptions: { \n    // 项目根目录的绝对路径\n    tsconfigRootDir: __dirname,\n    // tsconfig.json 的相对路径\n    project: ['./tsconfig.json'],\n  },\n  plugins: ['@typescript-eslint'],\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:@typescript-eslint/recommended-requiring-type-checking',\n  ],\n};\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：",(0,s.jsx)(n.code,{children:"parserOptions"})," 可能会随着版本的变化而变化，具体配置以官方文档为准。"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["查看 ",(0,s.jsx)(n.code,{children:"recommended-requiring-type-checking"})," 中的规则集："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// node_modules/@typescript-eslint/eslint-plugin/dist/configs/recommended-requiring-type-checking.js\n\n\"use strict\";\n// THIS CODE WAS AUTOMATICALLY GENERATED\n// DO NOT EDIT THIS CODE BY HAND\n// YOU CAN REGENERATE IT USING yarn generate:configs\nmodule.exports = {\n    extends: ['./configs/base', './configs/eslint-recommended'],\n    rules: {\n        '@typescript-eslint/await-thenable': 'error',\n        '@typescript-eslint/no-floating-promises': 'error',\n        '@typescript-eslint/no-for-in-array': 'error',\n        'no-implied-eval': 'off',\n        '@typescript-eslint/no-implied-eval': 'error',\n        '@typescript-eslint/no-misused-promises': 'error',\n        '@typescript-eslint/no-unnecessary-type-assertion': 'error',\n        '@typescript-eslint/no-unsafe-argument': 'error',\n        '@typescript-eslint/no-unsafe-assignment': 'error',\n        '@typescript-eslint/no-unsafe-call': 'error',\n        '@typescript-eslint/no-unsafe-member-access': 'error',\n        '@typescript-eslint/no-unsafe-return': 'error',\n        'require-await': 'off',\n        '@typescript-eslint/require-await': 'error',\n        '@typescript-eslint/restrict-plus-operands': 'error',\n        '@typescript-eslint/restrict-template-expressions': 'error',\n        '@typescript-eslint/unbound-method': 'error',\n    },\n};\n//# sourceMappingURL=recommended-requiring-type-checking.js.map\n"})}),"\n",(0,s.jsxs)(n.p,{children:["从上述类型规则中随便寻找一条规则进行验证，例如以 ",(0,s.jsx)(n.a,{href:"https://typescript-eslint.io/rules/no-unsafe-argument",target:"_blank",rel:"noopener noreferrer",children:"no-unsafe-argument"})," 为例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// src/index.ts\nexport * from "./comm/comm1";\nexport * from "./comm/comm2";\nexport * from "./core/core";\nexport * from "./opt/opt1";\nexport * from "./opt/opt2";\nexport * from "./sandbox/sandbox1";\nexport * from "./sandbox/sandbox2";\nexport * from "./sandbox/sandbox3";\n\nexport function add(a: number, b: number) {\n    return a + b\n}\n\nadd(1 as any, 2)                        \n'})}),"\n",(0,s.jsxs)(n.p,{children:["执行 ",(0,s.jsx)(n.code,{children:"npm run lint"})," 进行校验："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 执行\nnpm run lint\n\n# 打印\n> micro-framework@1.0.6 lint\n> eslint --ext .ts src\n\n\n/Users/zhuxiankang/Desktop/Github/micro-framework/src/index.ts\n  15:5   error    Unsafe argument of type `any` assigned to a parameter of type `number`  @typescript-eslint/no-unsafe-argument\n  15:10  warning  Unexpected any. Specify a different type                                @typescript-eslint/no-explicit-any\n\n✖ 2 problems (1 error, 1 warning)\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"vs-code-插件",children:["VS Code 插件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vs-code-插件",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"实时校验",children:["实时校验",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实时校验",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["如果不使用 VS Code 插件，在 VS Code 中无法实时发现代码中可能存在的 TypeScript 格式错误，因为在设计代码时，除了手动执行 ",(0,s.jsx)(n.code,{children:"npm run lint"})," 以外，没有任何的实时提示信息。为了可以实时查看 TypeScript 错误信息，可以通过 VS Code 插件进行处理。在 VS Code 的应用商店搜索并安装 ESLint 插件："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["温馨提示：一些脚手架可以在开发态通过自动保存实时在终端输出 ESLint 错误信息，这是因为在项目中使用了打包工具并集成了 ESLint 能力，例如 webpack 集成了 ",(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/eslint-loader",target:"_blank",rel:"noopener noreferrer",children:"eslint-loader"})," 或者 ",(0,s.jsx)(n.a,{href:"https://github.com/webpack-contrib/eslint-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"eslint-webpack-plugin"}),"。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"安装完成后， ESLint 插件会根据 VS Code 打开的项目寻找项目中安装的 ESLint 依赖，如果本地项目没有安装 ESLint，则会寻找全局安装的 ESLint。除此之外，还会读取项目所在的 ESLint 配置文件，根据配置文件进行 ESLint 校验，如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"安装 ESLint 插件以后："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"文件内的代码存在校验错误，则文件和所在的父级文件夹颜色会变红（警告变黄）；"}),"\n",(0,s.jsx)(n.li,{children:"文件内的代码存在校验错误，则代码的底下会出现红色波浪线（警告是黄色波浪线）；"}),"\n",(0,s.jsx)(n.li,{children:"文件内的代码存在校验错误，使用鼠标 Hover 到带波浪线的代码时会弹出 ESLint 信息；"}),"\n",(0,s.jsx)(n.li,{children:"在 VS Code 底部的状态栏上会出现 ESLint 校验的错误和警告数量；"}),"\n",(0,s.jsx)(n.li,{children:"在 VS Code 中编写代码时，上述校验状态会实时更新。"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：ESLint 插件会根据打开的文件进行实时校验，如果没有打开该文件，默认情况下不会做校验处理。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"在项目中建议配置 ESLint 校验的文件夹以及文件类型，在上述库设计的项目中，一些文件夹或文件需要进行 ESLint 校验屏蔽处理："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"├── lib/                 # 目标文件，构建工具自动生成，不用校验\n├── node_modules/        # 三方依赖库，不用校验\n├── eslintrc.js          # ESLint 配置文件，可以不校验\n├── .gitignore           # 配置文件，可以不校验\n├── README.md            # 文档文件，可以使用文档的校验工具\n├── package-lock.json    # NPM 自动生成的文件，不用校验\n├── package.json         \n└── tsconfig.json \n"})}),"\n",(0,s.jsxs)(n.p,{children:["此时可以在项目的根目录下新建 ",(0,s.jsx)(n.code,{children:".eslintignore"})," 文件，该文件的作用和 ",(0,s.jsx)(n.code,{children:".gitignore"})," 以及 ",(0,s.jsx)(n.code,{children:".npmignore"})," 配置功能相似，专门用于屏蔽文件和文件夹："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# .eslintignore 文件\nlib\nnode_modules\n.eslintrc.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["屏蔽之后 VS Code 插件会读取该配置文件并立马生效屏蔽配置，此时 VS Code 插件的 ESLint 校验范围基本上和 ",(0,s.jsx)(n.code,{children:"package.json"})," 中的 ",(0,s.jsx)(n.code,{children:"eslint src"})," 校验范围一致。"]}),"\n",(0,s.jsxs)(n.h3,{id:"auto-fix",children:["Auto Fix",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#auto-fix",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["ESLint 的格式校验错误可通过配置 Auto Fix 进行保存自动格式化处理，需要额外进行 VS Code 配置，具体可参考 ",(0,s.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint",target:"_blank",rel:"noopener noreferrer",children:"ESLint 插件"}),"的文档说明，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"editor.codeActionsOnSave": {\n  "source.fixAll": true,\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"温馨提示：不同版本的 ESLint 插件可能对 Auto Fix On Save 功能的配置存在差异，请以插件的官方文档为准。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["需要注意，VS Code 的配置分为用户和工作区两种类型，用户配置只对当前 VS Code 的开发用户生效。如果想将 VS Code 的配置共享给其他团队开发者，则可以通过工作区进行配置，配置以后默认会在项目的根目录下生成一个 ",(0,s.jsx)(n.code,{children:".vscode"})," 文件，例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"├── .vscode\n│   └── settings.json  # 工作区的 ESLint Auto Fix 放在此文件中\n├── .eslintignore  \n├── eslintrc.js         \n├── .gitignore        \n├── README.md      \n├── package-lock.json        \n├── package.json         \n└── tsconfig.json \n"})}),"\n",(0,s.jsxs)(n.p,{children:["为了可以让其他开发者进行 VS Code 配置共享，可以将文件 ",(0,s.jsx)(n.code,{children:".vscode"})," 提交到远程仓库中，当其他开发者拉取该代码时，如果安装了 ESLint 插件，该配置默认会生效。现在以共享配置 ",(0,s.jsx)(n.code,{children:"eslint:recommended"})," 中的 ",(0,s.jsx)(n.code,{children:"no-extra-semi"})," 规则为例："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["当输入多余的 ",(0,s.jsx)(n.code,{children:";"})," 时按住键盘上的 ",(0,s.jsx)(n.code,{children:"Command(Ctrl) + S"})," 进行保存时，默认会自动去除不必要的 ",(0,s.jsx)(n.code,{children:";"}),"。需要注意，并不是所有的 ESLint 校验规则都能进行自动格式化。"]}),"\n",(0,s.jsxs)(n.h2,{id:"eslint-确保构建",children:["ESLint 确保构建",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#eslint-确保构建",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["VS Code 插件并不能确保代码上传或构建时无任何 ESLint 错误，在构建前进行 ESLint 校验能够确保提示 ESLint 错误信息，一旦 ESLint 校验不通过则可以终止构建操作，通过修改 ",(0,s.jsx)(n.code,{children:"package.json"})," 中的构建脚本："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'  "scripts": {\n    "lint": "eslint --ext .ts src",\n    // 先执行 ESLint 校验，如果校验有错误会退出进程，从而不会执行 ts-node build/build.ts\n    // 需要注意如果 ESLint 只有警告的情况下不会退出进程\n    // 如果希望在有警告的情况下也退出构建，则可以配置 eslint --ext .ts --max-warnings 0 src\n    "build": "npm run lint && ts-node build/build.ts",\n  },\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"温馨提示"}),"：Shell 中的 ",(0,s.jsx)(n.code,{children:"&&"})," 和 ",(0,s.jsx)(n.code,{children:"&"})," 是有差异的，",(0,s.jsx)(n.code,{children:"&&"})," 主要用于继发执行，只有前一个任务执行成功才会执行下一个任务，",(0,s.jsx)(n.code,{children:"&"})," 主要用于并发执行，表示两个脚本同时执行。这里构建的命令需要等待 ",(0,s.jsx)(n.code,{children:"lint"})," 命令执行通过才能进行，一旦 ",(0,s.jsx)(n.code,{children:"lint"})," 退出进程，那么构建命令将不再执行。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本节课主要讲解了如何使用 ESLint 对 TypeScript 代码进行校验，详细讲解了 ESLint 中层叠配置、解析器、插件和共享配置的作用，并讲解了如何对 TypeScript 进行 ESLint 配置。"}),"\n",(0,s.jsx)(n.p,{children:"除此之外，配置 ESLint 主要是用于提升代码设计的稳定性，因此需要确保配置 ESLint 之后可以明显察觉代码校验错误并进行实时修复，提示 ESLint 错误的方式有很多种，包括 VS Code 实时提示、应用开发态的实时打印提示和执行 lint 脚本提示等。"}),"\n",(0,s.jsx)(n.p,{children:"有了 ESLint 校验之后，还需要能够确保构建产物、发布版本以及提交代码（后续讲解）都能进行校验的卡口设计，一旦校验不通过则可以终止操作处理。在下一节中，我们将重点讲解 Prettier 的使用。"})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let a=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F31.%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%9A%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5.md"]={toc:[{text:"为什么需要进行代码检查？",id:"为什么需要进行代码检查",depth:2},{text:"ESLint 和 TSLint",id:"eslint-和-tslint",depth:2},{text:"ESLint 配置",id:"eslint-配置",depth:2},{text:"层叠配置",id:"层叠配置",depth:3},{text:"解析器",id:"解析器",depth:3},{text:"插件",id:"插件",depth:3},{text:"共享配置",id:"共享配置",depth:3},{text:"VS Code 插件",id:"vs-code-插件",depth:2},{text:"实时校验",id:"实时校验",depth:3},{text:"Auto Fix",id:"auto-fix",depth:3},{text:"ESLint 确保构建",id:"eslint-确保构建",depth:2},{text:"小结",id:"小结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);