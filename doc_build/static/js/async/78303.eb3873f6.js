"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["78303"],{265889:function(e,n,i){e.exports=i.p+"static/image/05016f81e9e373009dd20bcaef3bbbe0.615ebf6d.webp"},347381:function(e,n,i){e.exports=i.p+"static/image/371b09ce855ba04b14a16033d40dfa94.bc3f0e6f.webp"},85501:function(e,n,i){e.exports=i.p+"static/image/4b143993ac96e145609a40947b486a46.9f0c6020.webp"},625502:function(e,n,i){e.exports=i.p+"static/image/92783e045cfdacf79c329bb20a4cef2a.b2f19dc0.webp"},922616:function(e,n,i){e.exports=i.p+"static/image/95543df5a66f6a4feddc8937c3d79fa0.29ef9a7f.webp"},490815:function(e,n,i){e.exports=i.p+"static/image/96806cc6bd2f15e8743deb2bbdb1037b.076d2aa9.webp"},69695:function(e,n,i){e.exports=i.p+"static/image/b84d73a564467d13e1f6c6d2daa43c9b.b64a3405.webp"},811837:function(e,n,i){e.exports=i.p+"static/image/ce54ef4f30a04c74437866b7237eb5ad.66402c29.webp"},679193:function(e,n,i){e.exports=i.p+"static/image/d89807ae6070cec01f8c59ae66e46b54.607e85e7.webp"},1990:function(e,n,i){e.exports=i.p+"static/image/f331d231afc1315df6806f5f96d792cd.6531fa7d.webp"},864471:function(e,n,i){e.exports=i.p+"static/image/f9153b5bdc56644eaa6b7ea13fcb68cd.b22f7f2e.webp"},652534:function(e,n,i){i.r(n),i.d(n,{default:()=>k});var c=i(552676),s=i(740453);let r=i.p+"static/image/3f3de9020c912579c516391e598e67f9.8576de6d.webp",t=i.p+"static/image/53ef04e9af9e9615500cd30778dbab22.2a10ee17.webp",a=i.p+"static/image/a226b063970ecf9a9ac47c4025091c43.65ffb611.webp",l=i.p+"static/image/f9164a102215d7698e6b559280cf16ce.f30de3b5.gif",p=i.p+"static/image/74a1b41bdb3076e2cb6b7e2eacb7bb6e.bfa85ae5.webp",o=i.p+"static/image/d4be8fb573889b551a963fd1c46bcb7f.aa97c895.webp",d=i.p+"static/image/d726367299623f83f0aaab89f4f770a0.a6fe4d26.webp",h=i.p+"static/image/d56faf73c3ae9909dd653ba8e6fc5031.3757416b.webp",j=i.p+"static/image/2e5480de8586c1be7fee8bd28def9310.a8794201.webp",x=i.p+"static/image/248733d6f336e6fab666aa3d8d07b5b1.e0c20ead.webp",m=i.p+"static/image/6fc0e5bac01654f0369c19fb1b29680c.087ea9ec.webp";var f=i(85501),b=i(922616),u=i(490815);let g=i.p+"static/image/d9d766f98fc3513aead207757f78d50c.94590481.webp",S=i.p+"static/image/6740b3de7191c3a1764c3ef334fb1343.5b8376d6.webp",w=i.p+"static/image/b75188ec89cf6711aebebd239654e7b8.e3f7f8a7.webp",N=i.p+"static/image/ca95afa9e11bb1da0e9c2b6f89f42205.cd1beff2.webp";var v=i(864471),E=i(625502),O=i(265889),y=i(69695),M=i(679193),_=i(1990),C=i(347381),I=i(811837);function A(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"99-前端如何直传文件到-minio",children:["99. 前端如何直传文件到 Minio",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#99-前端如何直传文件到-minio",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"前面我们学了 Nest 如何上传文件到服务器，但实际上基本不会直接在应用服务器存文件。"}),"\n",(0,c.jsx)(n.p,{children:"因为很容易到达存储上限，而且不好管理。"}),"\n",(0,c.jsx)(n.p,{children:"一般都会用 OSS 服务，比如阿里云的 OSS。"}),"\n",(0,c.jsx)(n.p,{children:"或者自己搭的 OSS 服务，比如用 minio。"}),"\n",(0,c.jsx)(n.p,{children:"用了 OSS 服务之后，可以通过服务器中转的方式上传文件："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:I,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"也就是前端把文件上传应用服务器，服务器上传阿里云或者 minio。"}),"\n",(0,c.jsx)(n.p,{children:"但这样没必要，传两次文件，浪费流量。"}),"\n",(0,c.jsx)(n.p,{children:"一般都是前端直传 OSS 服务，然后把文件 url 给应用服务器："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:C,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"但这样直接把 accessKey 暴露给前端也不安全。"}),"\n",(0,c.jsx)(n.p,{children:"学阿里云 OSS 的时候我们讲过通过临时凭证的方式直穿 OSS。"}),"\n",(0,c.jsx)(n.p,{children:"也就是应用服务器返回一个临时的凭证，前端用这个临时凭证传 OSS，不需要把 accessKey 暴露给前端。"}),"\n",(0,c.jsx)(n.p,{children:"用 minio 自然也可以。"}),"\n",(0,c.jsx)(n.p,{children:"这节我们就来讲下前端如何直传 minio 的 OSS 服务。"}),"\n",(0,c.jsx)(n.p,{children:"搜索下 minio："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:_,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"填入一些信息："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:M,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"name 是容器名。"}),"\n",(0,c.jsx)(n.p,{children:"port 是映射本地 9000 和 9001 端口到容器内的端口。"}),"\n",(0,c.jsx)(n.p,{children:"volume 是挂载本地目录到容器内的目录"}),"\n",(0,c.jsx)(n.p,{children:"这里挂载了一个本地一个目录到容器内的数据目录 /bitnami/minio/data，这样容器里的各种数据都保存在本地了。"}),"\n",(0,c.jsx)(n.p,{children:"还要指定两个环境变量，MINIO_ROOT_USER 和 MINIO_ROOT_PASSWORD，是用来登录的。"}),"\n",(0,c.jsx)(n.p,{children:"点击 run，跑起来之后可以看到数据目录被标记为 mounted，端口也映射成功了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:y,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["访问下 ",(0,c.jsx)(n.a,{href:"http://localhost:9001",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:9001"})]}),"\n",(0,c.jsx)(n.p,{children:"我们创建个 bucket："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:O,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"设置下可以公开访问："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:E,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:v,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"然后上传个文件："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:N,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"浏览器直接访问文件路径的 URL："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"http://localhost:9000/aaa/ground.png",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:9000/aaa/ground.png"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:S,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"可以看到，现在 OSS 服务的上传和查看图片就都成功了。"}),"\n",(0,c.jsx)(n.p,{children:"上节我们也写过在 node 里上传文件到 minio："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"var Minio = require('minio')\n\nvar minioClient = new Minio.Client({\n  endPoint: 'localhost',\n  port: 9000,\n  useSSL: false,\n  accessKey: '',\n  secretKey: '',\n})\n\nfunction put() {\n    minioClient.fPutObject('aaa', 'hello.png', './smile.png', function (err, etag) {\n        if (err) return console.log(err)\n        console.log('上传成功');\n    });\n}\n\nput()\n"})}),"\n",(0,c.jsx)(n.p,{children:"这节来做前端直传 minio。"}),"\n",(0,c.jsx)(n.p,{children:"因为需要服务端生成临时凭证，我们创建个 nest 服务："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"nest new minio-fe-upload\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"安装 minio 包："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install --save minio\n"})}),"\n",(0,c.jsx)(n.p,{children:"然后创建个模块："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"nest g module minio\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { Global, Module } from '@nestjs/common';\nimport * as Minio from 'minio';\n\nexport const MINIO_CLIENT = 'MINIO_CLIENT';\n\n@Global()\n@Module({\n    providers: [\n        {\n            provide: MINIO_CLIENT,\n            async useFactory() {\n                const client = new Minio.Client({\n                        endPoint: 'localhost',\n                        port: 9000,\n                        useSSL: false,\n                        accessKey: '',\n                        secretKey: ''\n                    })\n                return client;\n            }\n          }\n    ],\n    exports: [MINIO_CLIENT]\n})\nexport class MinioModule {}\n"})}),"\n",(0,c.jsx)(n.p,{children:"把 minio client 封装成 provider，放到 exports 里，并设置模块为 @Global。"}),"\n",(0,c.jsx)(n.p,{children:"用到 accessKey 和 secretKey 在这里创建："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"在 AppController 里注入下测试下："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Inject } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { MINIO_CLIENT } from './minio/minio.module';\nimport * as Minio from 'minio';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Inject(MINIO_CLIENT)\n  private minioClient: Minio.Client;\n\n  @Get('test')\n  async test() {\n    try {\n      await this.minioClient.fPutObject('aaa', 'hello.json', './package.json');\n      return 'http://localhost:9000/aaa/hello.json';\n    } catch(e) {\n      console.log(e);\n      return '上传失败';\n    }\n  }\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"注入 Minio Client，在 test 接口里上传文件。"}),"\n",(0,c.jsx)(n.p,{children:"把服务跑起来；"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,c.jsx)(n.p,{children:"试一下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"上传成功。"}),"\n",(0,c.jsx)(n.p,{children:"然后我们要在前端做直传，"}),"\n",(0,c.jsx)(n.p,{children:"指定 public 为静态文件目录："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:""})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"import { NestFactory } from '@nestjs/core';\nimport { NestExpressApplication } from '@nestjs/platform-express';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(AppModule);\n  \n  app.useStaticAssets('public');\n\n  await app.listen(3000);\n}\nbootstrap();\n"})}),"\n",(0,c.jsx)(n.p,{children:"写下前端代码 public/index.html"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n</head>\n<body>\n    <input type="file" id="selector" multiple>\n    <button onclick="upload()">Upload</button>\n    <div id="status">No uploads</div>\n\n    <script type="text/javascript">\n        function upload() {\n            var files = document.querySelector("#selector").files;\n            for (var i = 0; i < files.length; i++) {\n                var file = files[i];\n                retrieveNewURL(file, (file, url) => {\n                    uploadFile(file, url);\n                });\n            }\n        }\n\n        function retrieveNewURL(file, cb) {\n            fetch(`/presignedUrl?name=${file.name}`).then((response) => {\n                response.text().then((url) => {\n                    cb(file, url);\n                });\n            }).catch((e) => {\n                console.error(e);\n            });\n        }\n\n        function uploadFile(file, url) {\n            if (document.querySelector(\'#status\').innerText === \'No uploads\') {\n                document.querySelector(\'#status\').innerHTML = \'\';\n            }\n            fetch(url, {\n                method: \'PUT\',\n                body: file\n            }).then(() => {\n                document.querySelector(\'#status\').innerHTML += `<br>Uploaded ${file.name}.`;\n            }).catch((e) => {\n                console.error(e);\n            });\n        }\n    <\/script>\n</body>\n</html>\n'})}),"\n",(0,c.jsxs)(n.p,{children:["这部分是",(0,c.jsx)(n.a,{href:"https://min.io/docs/minio/linux/integrations/presigned-put-upload-via-browser.html",target:"_blank",rel:"noopener noreferrer",children:"文档"}),"里的。"]}),"\n",(0,c.jsx)(n.p,{children:"就是一个 type 为 file 的 input，可以多选。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"点击上传的时候遍历文件，对每个文件路径调用服务端的 presignedUrl 接口进行 url 签名："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"之后用返回的 url 就可以直传服务端了："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"用 fetch 传的，换成 axios 也一样。"}),"\n",(0,c.jsx)(n.p,{children:"然后我们在服务端增加这个签名接口："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"@Get('presignedUrl')\nasync presignedUrl(@Query('name') name: string) {\n    return this.minioClient.presignedPutObject('aaa', name, 3600);\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"这里的第一个参数是 bucketName，第二个参数是 objectName，第三个参数是过期时间，我们指定 3600秒，也就是一小时"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"bucketName 是 aaa，而 objectName 需要文件上传的时候拿到 file.name 作为参数传过来。"}),"\n",(0,c.jsx)(n.p,{children:"测试下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:""})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"上传成功！"}),"\n",(0,c.jsx)(n.p,{children:"看下 url 签名之后的样子："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:r,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"其实就是在 url 里带上了鉴权信息。"}),"\n",(0,c.jsx)(n.p,{children:"这样，前端不需要 accessKey 也可以直传文件到 minio 了。"}),"\n",(0,c.jsxs)(n.p,{children:["案例代码上传了",(0,c.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/minio-fe-upload",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"前面我们实现过阿里云 OSS 的前端直传文件，只要在服务端做预签名，前端就可以不用 accessKey 实现文件上传。"}),"\n",(0,c.jsx)(n.p,{children:"这节我们实现了 minio 的前端文件直传，也是通过服务端做预签名，然后前端直接传 minio 就行。"}),"\n",(0,c.jsx)(n.p,{children:"一般我们不会直接上传文件到应用服务器，而是传阿里云 OSS 或者传 minio。"})]})}function T(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(A,{...e})}):A(e)}let k=T;T.__RSPRESS_PAGE_META={},T.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F99.%20%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E7%9B%B4%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%20Minio.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"99. 前端如何直传文件到 Minio",headingTitle:"99. 前端如何直传文件到 Minio",frontmatter:{}}}}]);