"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["97015"],{28815:function(e,n,t){t.r(n),t.d(n,{default:()=>l});var r=t(552676),o=t(740453);let s=t.p+"static/image/6e023f58bc308a5a6564c90eede38aa1.bbcdb694.webp",a=t.p+"static/image/b043e24b552a39076985c5cbd94c0bc9.752ca820.webp",i=t.p+"static/image/50c7f8b5b95464e8d1c3f0c0686a7a7d.04ba8e2e.webp",d=t.p+"static/image/77ecf8860b56338b8146d2528bc67841.c3e602cb.webp",c=t.p+"static/image/d21d952227c35b26430f9229ebca579e.d70afb2e.webp";function m(e){let n=Object.assign({blockquote:"blockquote",p:"p",a:"a",h1:"h1",pre:"pre",code:"code",img:"img",ul:"ul",li:"li",strong:"strong"},(0,o.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["仓库地址：",(0,r.jsx)(n.a,{href:"https://github.com/czm1290433700/ssr-server",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/czm1290433700/ssr-server"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"上一节课我们学习了怎么实现 SSR 的静态页面渲染，但是一个页面不可能只有静态的部分，那么 SSR 中我们应该怎么进行数据的请求和注入呢？我们先做下简单尝试，看能不能直接用平常我们开发的方式来请求。"}),"\n",(0,r.jsxs)(n.h1,{id:"5架构实现三如何支持-ssr-对数据的请求",children:["5.架构实现（三）：如何支持 SSR 对数据的请求？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5架构实现三如何支持-ssr-对数据的请求",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们先启一个路由，用来作为一个简单接口，因为 express 没办法直接读取请求的 body，所以我们需要用 body-parser 对请求进行一个解析："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install body-parser --save\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/server/index.tsx\n// ./src/server/index.tsx\nimport express from "express";\nimport childProcess from "child_process";\nimport { renderToString } from "react-dom/server";\nimport path from "path";\nimport router from "@/router";\nimport { Route, Routes } from "react-router-dom";\nimport { StaticRouter } from "react-router-dom/server";\nimport { Helmet } from "react-helmet";\n\nconst app = express();\n\nconst bodyParser = require("body-parser");\n\napp.use(express.static(path.resolve(process.cwd(), "client_build")));\n\n// 请求body解析\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// 启一个post服务\napp.post("/api/getDemoData", (req, res) => {\n  res.send({\n    data: req.body,\n    status_code: 0,\n  });\n});\n\napp.get("*", (req, res) => {\n  const content = renderToString(\n    <StaticRouter location={req.path}>\n      <Routes>\n        {router?.map((item, index) => {\n          return <Route {...item} key={index} />;\n        })}\n      </Routes>\n    </StaticRouter>\n  );\n\n  const helmet = Helmet.renderStatic();\n\n  res.send(`\n    <html\n      <head>\n        ${helmet.title.toString()}\n        ${helmet.meta.toString()}\n      </head>\n      <body>\n        <div id="root">${content}</div>\n        <script src="/index.js"><\/script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => {\n  console.log("ssr-server listen on 3000");\n});\n\nchildProcess.exec("start http://127.0.0.1:3000");\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后咱们在 Demo 页面中直接用 hook 来请求，这个过程需要装一下 axios 的依赖："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install axios --save\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/pages/Demo/index.tsx\nimport { FC, useState, useEffect } from "react";\nimport axios from "axios";\n\nconst Demo: FC = (data) => {\n  const [content, setContent] = useState("");\n\n  useEffect(() => {\n    axios\n      .post("/api/getDemoData", {\n        content: "这是一个demo页面",\n      })\n      .then((res: any) => {\n        setContent(res.data?.data?.content);\n      });\n  }, []);\n\n  return <div>{content}</div>;\n};\n\nexport default Demo;\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后我们刷新一下 Demo 页面看看："}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:c,alt:"image.png"}),"\n数据请求成功了，不过，不对的是，我们可以在 network 中看到对应的请求，数据也没在服务器端请求的时候塞入 HTML，也就是说走的是客户端渲染，而不是服务端渲染，和我们预期的不一样，看来是不能直接用 hook 来常规请求的。"]}),"\n",(0,r.jsx)(n.p,{children:"我们来回忆之前静态页面的思路，是在服务器端拼凑好 HTML 并返回，所以请求的话，咱们应该也是获取到每个模板页面初始化的请求，并在服务器端请求好，进行 HTML 拼凑，在这之前我们需要建立一个全局的 store，使得服务端请求的数据可以提供到模板页面来进行操作。确认好思路，咱们就根据这个思路先来解决试试。"}),"\n",(0,r.jsxs)(n.h1,{id:"全局-store-的建立",children:["全局 store 的建立",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#全局-store-的建立",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"store 的建立我们可以基于 redux 去做，redux 是一个可以对 state 进行统一管理的库。全局 store 的核心在于上一章节提到的“同构”，服务器端和客户端都需要建立 store，我们先装一下相关的依赖："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install @reduxjs/toolkit redux-thunk react-redux --save\n"})}),"\n",(0,r.jsx)(n.p,{children:"其中 @reduxjs/toolkit 是 redux 最新提供的工具包，可以用于状态的统一管理，提供了更多 hook 的能力，相对代码更为简易，至于 redux-thunk 是一个 redux 的中间件，提供了 dispatch 和 getState 与异步方法交互的能力。"}),"\n",(0,r.jsx)(n.p,{children:"然后我们在 Demo 页面下创建一个 store 目录，用来存放对应的 reducer，将之前客户端请求的逻辑加进去，并且设置一个默认值“默认数据”，如果请求成功的话，咱们就把传入参数返回一下。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/pages/Demo/store/demoReducer.ts\nimport { createSlice, createAsyncThunk } from "@reduxjs/toolkit";\nimport axios from "axios";\n\nconst getDemoData = createAsyncThunk(\n  "demo/getData",\n  async (initData: string) => {\n    const res = await axios.post("http://127.0.0.1:3000/api/getDemoData", {\n      content: initData,\n    });\n    return res.data?.data?.content;\n  }\n);\n\nconst demoReducer = createSlice({\n  name: "demo",\n  initialState: {\n    content: "默认数据",\n  },\n  // 同步reducer\n  reducers: {},\n  // 异步reducer\n  extraReducers(build) {\n    build\n      .addCase(getDemoData.pending, (state, action) => {\n        state.content = "pending";\n      })\n      .addCase(getDemoData.fulfilled, (state, action) => {\n        state.content = action.payload;\n      })\n      .addCase(getDemoData.rejected, (state, action) => {\n        state.content = "rejected";\n      });\n  },\n});\n\nexport { demoReducer, getDemoData };\n'})}),"\n",(0,r.jsx)(n.p,{children:"createSlice 这个函数我们着重讲一下，因为是 redux 比较新的版本，很多同学可能还是比较陌生的。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"reducers：可以存放同步的 reducers（不需要请求参数）；"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"initialState：可以理解成原来的 state；"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"name： 是这个 reducer 的空间，后面取 store 的时候会根据这个进行区分；"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"extraReducers：这个是我们这里需要的异步 reducer，其中包含三个状态，pending、fulfilled 和 rejected，分别对应到请求的三种状态。"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["这种函数式的写法可以即用即配，是个不错的改进版本。因为只是一个状态管理的方式，并不是我们这章的重点，更详细的参数和部分大家可以在",(0,r.jsx)(n.a,{href:"https://redux-toolkit.js.org/introduction/getting-started",target:"_blank",rel:"noopener noreferrer",children:" @reduxjs/toolkit 的官网"}),"学习了解。"]}),"\n",(0,r.jsx)(n.p,{children:"我们还可以创建一个 index.ts 来作为统一导出，因为一个页面可能不只有一个 reducer，这样引用的时候就不用每一个都写一个 import 了，都从 index.ts 中统一导出就可以："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/pages/Demo/store/index.ts\nimport { demoReducer } from "./demoReducer";\n\nexport { demoReducer };\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后我们分别创建一下客户端和服务器端的 store，将 reducer 导入一下，并且接入一下 thunk 的中间件，使得 dispatch 相关的函数支持异步函数的入参："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/store/index.ts\nimport { configureStore } from "@reduxjs/toolkit";\nimport thunk from "redux-thunk";\nimport { demoReducer } from "@/pages/Demo/store";\n\nconst clientStore = configureStore({\n  reducer: { demo: demoReducer.reducer },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk),\n});\n\nconst serverStore = configureStore({\n  reducer: { demo: demoReducer.reducer },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk),\n});\n\nexport { clientStore, serverStore };\n'})}),"\n",(0,r.jsx)(n.p,{children:"接下来我们将创建好的 store 分别在客户端和服务器端的路由处注入一下就可以："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/client/index.tsx\nimport { hydrateRoot } from "react-dom/client";\nimport { BrowserRouter, Route, Routes } from "react-router-dom";\nimport router from "@/router";\nimport { clientStore } from "@/store";\nimport { Provider } from "react-redux";\n\nconst Client = (): JSX.Element => {\n  return (\n    <Provider store={clientStore}>\n      <BrowserRouter>\n        <Routes>\n          {router?.map((item, index) => {\n            return <Route {...item} key={index} />;\n          })}\n        </Routes>\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\n// 将事件处理加到ID为root的dom下\nhydrateRoot(document.getElementById("root") as Document | Element, <Client />);\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/server/index.tsx\nimport express from "express";\nimport childProcess from "child_process";\nimport { renderToString } from "react-dom/server";\nimport path from "path";\nimport router from "@/router";\nimport { Route, Routes } from "react-router-dom";\nimport { StaticRouter } from "react-router-dom/server";\nimport { Helmet } from "react-helmet";\nimport { serverStore } from "@/store";\nimport { Provider } from "react-redux";\n\nconst app = express();\n\nconst bodyParser = require("body-parser");\n\napp.use(express.static(path.resolve(process.cwd(), "client_build")));\n\n// 请求body解析\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// 启一个post服务\napp.post("/api/getDemoData", (req, res) => {\n  res.send({\n    data: req.body,\n    status_code: 0,\n  });\n});\n\napp.get("*", (req, res) => {\n  const content = renderToString(\n    <Provider store={serverStore}>\n      <StaticRouter location={req.path}>\n        <Routes>\n          {router?.map((item, index) => {\n            return <Route {...item} key={index} />;\n          })}\n        </Routes>\n      </StaticRouter>\n    </Provider>\n  );\n\n  const helmet = Helmet.renderStatic();\n\n  res.send(`\n    <html\n      <head>\n        ${helmet.title.toString()}\n        ${helmet.meta.toString()}\n      </head>\n      <body>\n        <div id="root">${content}</div>\n        <script src="/index.js"><\/script>\n      </body>\n    </html>\n  `);\n});\n\napp.listen(3000, () => {\n  console.log("ssr-server listen on 3000");\n});\n\nchildProcess.exec("start http://127.0.0.1:3000");\n'})}),"\n",(0,r.jsx)(n.p,{children:"到这里 store 就已经注入好了，我们只需要在 Demo 中与 store 连接就行。connect 暴露了两个参数，一个 state，一个 dispatch，它会根据你的需要拼接成指定的参数，以装饰器的形式包装你定义的函数，这样我们的 Demo 就可以接收到我们定义的 content 和 getDemoData 参数了。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/pages/Demo/index.tsx\nimport { FC, useState, useEffect, Fragment } from "react";\nimport axios from "axios";\nimport { connect } from "react-redux";\nimport { getDemoData } from "./store/demoReducer";\nimport { Helmet } from "react-helmet";\n\ninterface IProps {\n  content?: string;\n  getDemoData?: (data: string) => void;\n}\n\nconst Demo: FC<IProps> = (data) => {\n  // const [content, setContent] = useState("");\n\n  // // 客户端异步请求\n  // useEffect(() => {\n  //   axios\n  //     .post("/api/getDemoData", {\n  //       content: "这是一个demo",\n  //     })\n  //     .then((res) => {\n  //       setContent(res.data?.data?.content);\n  //     });\n  // }, []);\n\n  return (\n    <Fragment>\n      <Helmet>\n        <title>简易的服务器端渲染框架 - DEMO</title>\n        <meta name="description" content="服务器端渲染框架"></meta>\n      </Helmet>\n      <div>\n        <h1>{data.content}</h1>\n        <button\n          onClick={(): void => {\n            data.getDemoData && data.getDemoData("刷新过后的数据");\n          }}\n        >\n          刷新\n        </button>\n      </div>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  // 将对应reducer的内容透传回dom\n  return {\n    content: state?.demo?.content,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    getDemoData: (data: string) => {\n      dispatch(getDemoData(data));\n    },\n  };\n};\n\nconst storeDemo: any = connect(mapStateToProps, mapDispatchToProps)(Demo);\n\nexport default storeDemo;\n'})}),"\n",(0,r.jsx)(n.p,{children:"到这里我们的全局 store 就建立了，我们可以刷新一下页面试试。"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:d,alt:"image.png"}),"\n可以看到展示的是默认数据，那是因为我们并没有进行初始化的请求，所以它走了默认的 state 兜底，然后我们点击刷新试试。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:i,alt:"image.png"}),"\n可以看到新增了对应的请求，对应展示的内容也切换为了刷新过后的数据，那这就意味着咱们 store的部分已经走通了，接下来咱们只需要考虑，应该怎样在服务器端进行请求，使得在 html 拼接的时候就可以拿到初始化的数据呢？"]}),"\n",(0,r.jsxs)(n.h1,{id:"建立服务器端请求数据体系",children:["建立服务器端请求数据体系",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#建立服务器端请求数据体系",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"需要在服务器端进行初始化，我们先来捋捋思路，首先我们肯定得先在服务器端拿到所有需要请求的函数，怎么透传过去呢？我们应该可以使用路由，因为客户端和服务端咱们都有配置路由，如果加一个参数通过路由把参数透传，然后在服务器端遍历，最后把结果对应分发是不是就可以了。"}),"\n",(0,r.jsxs)(n.p,{children:["思路捋好咱们就可以开始做了，不过这里有个小细节大家要注意一下，服务器端不同于客户端，它是拿不到请求的域名的，",(0,r.jsx)(n.strong,{children:"所以服务器端下的axios请求应该是包含域名的绝对路径，而不是使用相对路径，很多SSR的初学者在开发过程中很容易遇到类似问题"})," ",(0,r.jsx)(n.strong,{children:"。"})]}),"\n",(0,r.jsx)(n.p,{children:"好了，进入正题，咱们先给 Demo 定义一个初始化的函数，两个入参，一个透传 store，另一个 data，对应页面展示的内容："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/pages/Demo/index.tsx\nimport { FC, useState, useEffect, Fragment } from "react";\nimport axios from "axios";\nimport { connect } from "react-redux";\nimport { getDemoData } from "./store/demoReducer";\nimport { Helmet } from "react-helmet";\n\ninterface IProps {\n  content?: string;\n  getDemoData?: (data: string) => void;\n}\n\nconst Demo: FC<IProps> = (data) => {\n  // const [content, setContent] = useState("");\n\n  // // 客户端异步请求\n  // useEffect(() => {\n  //   axios\n  //     .post("/api/getDemoData", {\n  //       content: "这是一个demo",\n  //     })\n  //     .then((res) => {\n  //       setContent(res.data?.data?.content);\n  //     });\n  // }, []);\n\n  return (\n    <Fragment>\n      <Helmet>\n        <title>简易的服务器端渲染框架 - DEMO</title>\n        <meta name="description" content="服务器端渲染框架"></meta>\n      </Helmet>\n      <div>\n        <h1>{data.content}</h1>\n        <button\n          onClick={(): void => {\n            data.getDemoData && data.getDemoData("刷新过后的数据");\n          }}\n        >\n          刷新\n        </button>\n      </div>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  // 将对应reducer的内容透传回dom\n  return {\n    content: state?.demo?.content,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    getDemoData: (data: string) => {\n      dispatch(getDemoData(data));\n    },\n  };\n};\n\nconst storeDemo: any = connect(mapStateToProps, mapDispatchToProps)(Demo);\n\nstoreDemo.getInitProps = (store: any, data?: string) => {\n  return store.dispatch(getDemoData(data || "这是初始化的demo"));\n};\n\nexport default storeDemo;\n'})}),"\n",(0,r.jsx)(n.p,{children:"咱们先对路由进行一下改造，将初始化的方法给路由带上："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/router/index.tsx\nimport Home from "@/pages/Home";\nimport Demo from "@/pages/Demo";\n\ninterface IRouter {\n  path: string;\n  element: JSX.Element;\n  loadData?: (store: any) => any;\n}\n\nconst router: Array<IRouter> = [\n  {\n    path: "/",\n    element: <Home />,\n  },\n  {\n    path: "/demo",\n    element: <Demo />,\n    loadData: Demo.getInitProps,\n  },\n];\n\nexport default router;\n'})}),"\n",(0,r.jsx)(n.p,{children:"接下来咱们就该在服务器端拉取对应的初始化方法，并统一请求注入它们了，这个过程很简单，我们只需要改造 get 方法就可以，遍历所有的初始化方法，然后统一请求塞进 store 里。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/server/index.tsx\nimport express from "express";\nimport childProcess from "child_process";\nimport path from "path";\nimport { Route, Routes } from "react-router-dom";\nimport { renderToString } from "react-dom/server";\nimport { StaticRouter } from "react-router-dom/server";\nimport { matchRoutes, RouteObject } from "react-router-dom";\nimport router from "@/router";\nimport { serverStore } from "@/store";\nimport { Provider } from "react-redux";\nimport { Helmet } from "react-helmet";\n\nconst app = express();\n\nconst bodyParser = require("body-parser");\n\n// 请求body解析\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// 注入事件处理的脚本\napp.use(express.static(path.resolve(process.cwd(), "client_build")));\n\n// demo api\napp.post("/api/getDemoData", (req, res) => {\n  res.send({\n    data: req.body,\n    status_code: 0,\n  });\n});\n\napp.get("*", (req, res) => {\n  const routeMap = new Map<string, () => Promise<any>>(); // path - loaddata 的map\n  router.forEach((item) => {\n    if (item.path && item.loadData) {\n      routeMap.set(item.path, item.loadData(serverStore));\n    }\n  });\n\n  // 匹配当前路由的routes\n  const matchedRoutes = matchRoutes(router as RouteObject[], req.path);\n\n  const promises: Array<() => Promise<any>> = [];\n  matchedRoutes?.forEach((item) => {\n    if (routeMap.has(item.pathname)) {\n      promises.push(routeMap.get(item.pathname) as () => Promise<any>);\n    }\n  });\n\n  Promise.all(promises).then((data) => {\n    // 统一放到state里\n    // 编译需要渲染的JSX, 转成对应的HTML STRING\n    const content = renderToString(\n      <Provider store={serverStore}>\n        <StaticRouter location={req.path}>\n          <Routes>\n            {router?.map((item, index) => {\n              return <Route {...item} key={index} />;\n            })}\n          </Routes>\n        </StaticRouter>\n      </Provider>\n    );\n\n    const helmet = Helmet.renderStatic();\n\n    res.send(`\n    <html\n      <head>\n        ${helmet.title.toString()}\n        ${helmet.meta.toString()}\n      </head>\n      <body>\n        <div id="root">${content}</div>\n        <script>\n          window.context = {\n            state: ${JSON.stringify(serverStore.getState())}\n          }\n        <\/script>\n        <script src="/index.js"><\/script>\n      </body>\n    </html>\n  `);\n  });\n});\n\napp.listen(3000, () => {\n  console.log("ssr-server listen on 3000");\n});\n\nchildProcess.exec("start http://127.0.0.1:3000");\n'})}),"\n",(0,r.jsx)(n.p,{children:"到这里服务器端请求就走通了，我们重启项目访问一下 Demo 页面试试："}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:a,alt:"image.png"}),'\n但是很奇怪的是，可以看到服务器端的返回其实是符合预期的，是“这是初始化的demo"，但是页面展示的时候却是默认数据，这是为什么呢？']}),"\n",(0,r.jsx)(n.p,{children:"其实很简单，因为客户端和服务器端的 store 是不同步的，服务器端请求完成填充 store 后，客户端的 JS 又执行了一遍 store，取了默认的值，所以导致数据不能同步。要解决这个问题，就需要使用脱水和注水的方式。"}),"\n",(0,r.jsxs)(n.h1,{id:"脱水和注水",children:["脱水和注水",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#脱水和注水",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"水在这里其实就是数据层，也就是 store，这里对客户端页面进行脱“水”，移除其数据层的部分，仅仅保留 dom 的部分，然后在服务器端请求拿到 store 以后，对数据进行注入，也就是注“水”，使得客户端的数据与服务端请求的数据保持一致，就可以解决掉不同步的问题了。"}),"\n",(0,r.jsx)(n.p,{children:"我们首先在服务器端，将“水”注入到客户端脚本中："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/server/index.tsx\nimport express from "express";\nimport childProcess from "child_process";\nimport path from "path";\nimport { Route, Routes } from "react-router-dom";\nimport { renderToString } from "react-dom/server";\nimport { StaticRouter } from "react-router-dom/server";\nimport { matchRoutes, RouteObject } from "react-router-dom";\nimport router from "@/router";\nimport { serverStore } from "@/store";\nimport { Provider } from "react-redux";\nimport { Helmet } from "react-helmet";\n\nconst app = express();\n\nconst bodyParser = require("body-parser");\n\n// 请求body解析\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// 注入事件处理的脚本\napp.use(express.static(path.resolve(process.cwd(), "client_build")));\n\n// demo api\napp.post("/api/getDemoData", (req, res) => {\n  res.send({\n    data: req.body,\n    status_code: 0,\n  });\n});\n\napp.get("*", (req, res) => {\n  const routeMap = new Map<string, () => Promise<any>>(); // path - loaddata 的map\n  router.forEach((item) => {\n    if (item.path && item.loadData) {\n      routeMap.set(item.path, item.loadData(serverStore));\n    }\n  });\n\n  // 匹配当前路由的routes\n  const matchedRoutes = matchRoutes(router as RouteObject[], req.path);\n\n  const promises: Array<() => Promise<any>> = [];\n  matchedRoutes?.forEach((item) => {\n    if (routeMap.has(item.pathname)) {\n      promises.push(routeMap.get(item.pathname) as () => Promise<any>);\n    }\n  });\n\n  Promise.all(promises).then((data) => {\n    // 统一放到state里\n    // 编译需要渲染的JSX, 转成对应的HTML STRING\n    const content = renderToString(\n      <Provider store={serverStore}>\n        <StaticRouter location={req.path}>\n          <Routes>\n            {router?.map((item, index) => {\n              return <Route {...item} key={index} />;\n            })}\n          </Routes>\n        </StaticRouter>\n      </Provider>\n    );\n\n    const helmet = Helmet.renderStatic();\n\n    // 注水\n    res.send(`\n    <html\n      <head>\n        ${helmet.title.toString()}\n        ${helmet.meta.toString()}\n      </head>\n      <body>\n        <div id="root">${content}</div>\n        <script>\n          window.context = {\n            state: ${JSON.stringify(serverStore.getState())}\n          }\n        <\/script>\n        <script src="/index.js"><\/script>\n      </body>\n    </html>\n  `);\n  });\n});\n\napp.listen(3000, () => {\n  console.log("ssr-server listen on 3000");\n});\n\nchildProcess.exec("start http://127.0.0.1:3000");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["接下来我们在客户端处，Demo 的初始值中注入服务器端的值，这里需要做一个判断，因为服务器端下访问的时候是没有 window 等 BOM 的，所以需要用 typeof 来判断。",(0,r.jsx)(n.strong,{children:"这也是SSR中常常遇到的问题，当有对 BOM的调用时，需要进行判空，否则在服务器端执行的时候将会报错。"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// ./src/pages/Demo/store/demoReducer.ts\nimport { createSlice, createAsyncThunk } from "@reduxjs/toolkit";\nimport axios from "axios";\n\nconst getDemoData = createAsyncThunk(\n  "demo/getData",\n  async (initData: string) => {\n    const res = await axios.post("http://127.0.0.1:3000/api/getDemoData", {\n      content: initData,\n    });\n    return res.data?.data?.content;\n  }\n);\n\nconst demoReducer = createSlice({\n  name: "demo",\n  initialState:\n    typeof window !== "undefined"\n      ? (window as any)?.context?.state?.demo\n      : {\n          content: "默认数据",\n        },\n  // 同步reducer\n  reducers: {},\n  // 异步reducer\n  extraReducers(build) {\n    build\n      .addCase(getDemoData.pending, (state, action) => {\n        state.content = "pending";\n      })\n      .addCase(getDemoData.fulfilled, (state, action) => {\n        state.content = action.payload;\n      })\n      .addCase(getDemoData.rejected, (state, action) => {\n        state.content = "rejected";\n      });\n  },\n});\n\nexport { demoReducer, getDemoData };\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后我们再重新刷新一下页面看看效果，应该就可以了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,r.jsxs)(n.h1,{id:"小结",children:["小结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"这一章节我们学习了 SSR 如何针对数据进行请求，在建立了一个全局的 store 后，将对应的初始化方法透传给服务端进行统一请求，最后再进行数据脱水和注水的操作，使得客户端初始化能和服务器端保持相同的 store，整个过程还是有很多细节的，到这里我们 SSR 的实现篇就结束了。"}),"\n",(0,r.jsx)(n.p,{children:"对一个成熟的 SSR 框架还会有更多的处理，类似 CSS、中间件以及注入函数的装饰器包装，不过这些和基础的原理并没有太大的关系，所以在小册中并不会涉及，感兴趣的同学可以下来了解，对整体的代码风格也是有帮助的。"}),"\n",(0,r.jsx)(n.p,{children:"设立实现篇的初衷，是希望大家可以清楚其中页面渲染到数据请求的过程中是怎么流转的，这样在后期开发中，面对路由跳转，或是请求等不同于客户端的地方时，能知道原理以及为什么产生这些区别，如果三节课学习下来有一点不太理解，大家也不用着急，可以沉下心来多看几遍，涉及的知识点的确不少，如果能完全理解这三节的原理，对大家后面实战的学习会有很大帮助。"}),"\n",(0,r.jsx)(n.p,{children:"从下一节课开始，我们将进入实战的学习，如何使用业内比较成熟的框架 Next.js 来开发一个官网项目？"})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}let l=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["SSR%20%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AE%98%E7%BD%91%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F5.%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E6%94%AF%E6%8C%81%20SSR%20%E5%AF%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%9F.md"]={toc:[],title:"小结",headingTitle:"小结",frontmatter:{}}}}]);