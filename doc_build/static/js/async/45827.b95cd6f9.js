"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["45827"],{10201:function(e,n,a){e.exports=a.p+"static/image/0531a016d87bef6d5c39d04c9ac21096.90744815.webp"},271176:function(e,n,a){e.exports=a.p+"static/image/ca71228e6bd7b28042f1a1d4831aac94.e69f2849.webp"},204911:function(e,n,a){a.r(n),a.d(n,{default:()=>Q});var t=a(552676),s=a(740453);let i=a.p+"static/image/0c5bfee7c902931314fb08791c76c2eb.9f1faf08.gif",r=a.p+"static/image/6e4de83a7dcfdd0babc69e06a16e835e.9adc5c08.webp",c=a.p+"static/image/d3c513e136ef5ea9e02d05e5f49f32e0.027c9f02.gif",o=a.p+"static/image/34a57f24ec677b1145dc0a8e67b3e598.2ffae93e.webp",l=a.p+"static/image/dbd059bca165b27748d32f210f1b6e5e.356ad5c2.webp",d=a.p+"static/image/4d4e36578c17fee11535814e2a535a01.2edf9674.webp",p=a.p+"static/image/dafa2de8cbaad3931524d1e4e8a5b2c0.b80da20d.gif",m=a.p+"static/image/5a469ad48f3aaf91cc3298de218f77e7.532c4ad3.webp",g=a.p+"static/image/f18e2c1685db552d20c7c2b87046a97b.148c139d.webp",u=a.p+"static/image/1604803a07e1579778e4af08eabcaca3.44fbb554.webp",x=a.p+"static/image/b710f1ab8137ba01cad44510e2df7907.74020d36.gif",h=a.p+"static/image/6d53ef21b7032e11c0be111c9f3c767e.0ba1f2a2.webp",j=a.p+"static/image/be0368db828f055bd0b6116b601a98bc.107bc5d8.webp",f=a.p+"static/image/8f1902b2fc2914feb5c0c2a2250f77f7.bfa13bd1.gif",b=a.p+"static/image/687ea877353b705417102c02de8296b6.262b532e.gif",M=a.p+"static/image/efd4391741a299dc72510936965a0aae.87c6bc19.webp",R=a.p+"static/image/703ad3ccd05eb60cc6ffaf073aff74df.a3edc585.webp",F=a.p+"static/image/583e0460bb8e6fea664ee8fef1310714.fdac96cf.gif",v=a.p+"static/image/8f32eb1bcaecc50a492f09d8bfc19ac7.8786c25f.webp",C=a.p+"static/image/b3cfac33c75c0ab10fefa6ea014acca4.b2168563.webp";var I=a(10201);let k=a.p+"static/image/30be03ab461a6cc33e0b74cf4044e1b5.7aa8d91c.webp",N=a.p+"static/image/c1b0ada11a8fd5ffdc57dd9700e86069.d5d60f64.gif",y=a.p+"static/image/5fe790ccf65604366dc2fd6a926fe962.f036fa15.webp",E=a.p+"static/image/ed31513a73a7a615ba6600baebc4bbfc.9c455694.gif",w=a.p+"static/image/a9f3df9ddd5db04cf21faff4514ecf21.d9cec57c.webp",A=a.p+"static/image/63785489578b79fbf3487af4cf4bc0cc.b5a20b21.gif",S=a.p+"static/image/b1a17dd0e674052a8188a651186aedbb.a2f5f162.webp",_=a.p+"static/image/912a36dd7741323c6a0005d955cb6492.76dc864e.webp",B=a.p+"static/image/f95f058ab74030501ebeb582d92818a2.0a83d8b7.webp",O=a.p+"static/image/6602a010d03f05722717dd23092f06c3.c9c020c7.webp",q=a.p+"static/image/8d6b39f065265026ad816e942c9eb2be.4489ed71.gif",T=a.p+"static/image/27ea13c65744b1b9dd5caeb9f439ffbc.b67790d3.webp",P=a.p+"static/image/d0d252b82f7266ce724508a6c369470a.41859a70.webp";var U=a(271176);let V=a.p+"static/image/46dba52357ada43a52b0c6086a6ce1cb.1cb6d4ff.gif",z=a.p+"static/image/3cfbcf912d1de565f9ac38cd4de5eacd.99e411bd.webp",D=a.p+"static/image/9d21b334618b358f89619d87e8e0cb63.1729d374.gif",G=a.p+"static/image/7f5089815503a09c20816cd575f20b20.1c2ca608.webp",L=a.p+"static/image/f20913da01c2a29a8274ee07d3703044.29ede980.webp",Y=a.p+"static/image/8d6c9ae53d99952c65721a4b567372ed.c99e820c.webp";function H(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"122-会议室预订系统会议室管理模块-管理端前端开发",children:["122. 会议室预订系统：会议室管理模块-管理端前端开发",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#122-会议室预订系统会议室管理模块-管理端前端开发",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"后端接口写完了，这节我们来实现下前端页面。"}),"\n",(0,t.jsx)(n.p,{children:"先写管理端的："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:U,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:I,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"把管理端项目跑起来："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm run start\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:Y,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们已经添加了对应的路由，但是还没做点击菜单时的切换。"}),"\n",(0,t.jsx)(n.p,{children:"加一下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:L,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const handleMenuItemClick: MenuClickEventHandler = (info) => {\n    let path = '';\n    switch(info.key) {\n        case '1':\n            path = '/meeting_room_manage';\n            break;\n        case '2':\n            path = '/booking_manage';\n            break;    \n        case '3':\n            path = '/user_manage';\n            break;\n        case '4':\n            path = '/statistics';\n            break;                    \n    }\n    router.navigate(path);\n}\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后写下这 3 个路由的组件："}),"\n",(0,t.jsx)(n.p,{children:"src/pages/MeetingRoomManage/MeetingRoomManage.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export function MeetingRoomManage() {\n    return <div>MeetingRoomManage</div>\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"src/pages/BookingManage/BookingManage.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export function BookingManage() {\n    return <div>BookingManage</div>\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"src/pages/Statistics/Statistics.tsx"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export function Statistics() {\n    return <div>Statistics</div>\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"注册这三个组件对应的路由："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:G,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    path: '/',\n    element: <MeetingRoomManage/>\n},\n{\n    path: 'user_manage',\n    element: <UserManage/>\n},\n{\n    path: 'meeting_room_manage',\n    element: <MeetingRoomManage/>\n},\n{\n    path: 'booking_manage',\n    element: <BookingManage/>\n},\n{\n    path: 'statistics',\n    element: <Statistics/>\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:D,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后还要加上页面刷新时选中对应菜单项的逻辑："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:z,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const location = useLocation();\n\nfunction getSelectedKeys() {\n    if(location.pathname === '/user_manage') {\n        return ['3']\n    } else if(location.pathname === '/booking_manage') {\n        return ['2']\n    } else if(location.pathname === '/meeting_room_manage') {\n        return ['1']\n    } else if(location.pathname === '/statistics') {\n        return ['4']\n    } else {\n        return ['1']\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"这样，刷新后也会选中对应的菜单项："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:V,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后来实现会议室管理页面："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:U,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"和我们前面写过的用户列表差不多："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { Badge, Button, Form, Image, Input, Table, message } from "antd";\nimport { useCallback, useEffect, useMemo, useState } from "react";\nimport \'./meeting_room_manage.css\';\nimport { ColumnsType } from "antd/es/table";\nimport { useForm } from "antd/es/form/Form";\n\ninterface SearchMeetingRoom {\n    name: string;\n    capacity: number;\n    equipment: string;\n}\n\ninterface MeetingRoomSearchResult {\n    id: number,\n    name: string;\n    capacity: number;\n    location: string;\n    equipment: string;\n    description: string;\n    isBooked: boolean;\n    createTime: Date;\n    updateTime: Date;\n}\n\n\nexport function MeetingRoomManage() {\n    const [pageNo, setPageNo] = useState<number>(1);\n    const [pageSize, setPageSize] = useState<number>(10);\n    const [meetingRoomResult, setMeetingRoomResult] = useState<Array<MeetingRoomSearchResult>>([]);\n\n    const columns: ColumnsType<MeetingRoomSearchResult> = useMemo(() => [\n        {\n            title: \'名称\',\n            dataIndex: \'name\'\n        },\n        {\n            title: \'容纳人数\',\n            dataIndex: \'capacity\',\n        },\n        {\n            title: \'位置\',\n            dataIndex: \'location\'\n        },\n        {\n            title: \'设备\',\n            dataIndex: \'equipment\'\n        },\n        {\n            title: \'描述\',\n            dataIndex: \'description\'\n        },\n        {\n            title: \'添加时间\',\n            dataIndex: \'createTime\'\n        },\n        {\n            title: \'上次更新时间\',\n            dataIndex: \'updateTime\'\n        },\n        {\n            title: \'预定状态\',\n            dataIndex: \'isBooked\',\n            render: (_, record) => (\n                record.isBooked ? <Badge status="error">已被预订</Badge> : <Badge status="success">可预定</Badge>\n            )\n        },\n        {\n            title: \'操作\',\n            render: (_, record) => (\n                <a href="#" onClick={() => {}}>删除</a>\n            )\n        }\n    ], []);\n\n    const searchMeetingRoom = useCallback(async (values: SearchMeetingRoom) => {\n        \n    }, []);\n\n    const [form ]  = useForm();\n\n    const changePage = useCallback(function(pageNo: number, pageSize: number) {\n        setPageNo(pageNo);\n        setPageSize(pageSize);\n    }, []);\n\n\n    return <div id="meetingRoomManage-container">\n        <div className="meetingRoomManage-form">\n            <Form\n                form={form}\n                onFinish={searchMeetingRoom}\n                name="search"\n                layout=\'inline\'\n                colon={false}\n            >\n                <Form.Item label="会议室名称" name="name">\n                    <Input />\n                </Form.Item>\n\n                <Form.Item label="容纳人数" name="capacity">\n                    <Input />\n                </Form.Item>\n\n                <Form.Item label="位置" name="location">\n                    <Input/>\n                </Form.Item>\n\n                <Form.Item label=" ">\n                    <Button type="primary" htmlType="submit">\n                        搜索会议室\n                    </Button>\n                    <Button type="primary" style={{background: \'green\'}}>\n                        添加会议室\n                    </Button>\n\n                </Form.Item>\n            </Form>\n        </div>\n        <div className="meetingRoomManage-table">\n            <Table columns={columns} dataSource={meetingRoomResult} pagination={ {\n                current: pageNo,\n                pageSize: pageSize,\n                onChange: changePage\n            }}/>\n        </div>\n    </div>\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"css 部分如下："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"#meetingRoomManage-container {\n    padding: 20px;\n}\n#meetingRoomManage-container .meetingRoomManage-form {\n    margin-bottom: 40px;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:P,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后我们在 interfaces.ts 添加 list 接口："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export async function meetingRoomList(name: string, capacity: number, equipment: string, pageNo: number, pageSize: number) {\n    return await axiosInstance.get('/meeting-room/list', {\n        params: {\n            name,\n            capacity,\n            equipment,\n            pageNo,\n            pageSize\n        }\n    });\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"在页面调用下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:T,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const searchMeetingRoom = useCallback(async (values: SearchMeetingRoom) => {\n    const res = await meetingRoomList(values.name, values.capacity, values.equipment, pageNo, pageSize);\n\n    const { data } = res.data;\n    if(res.status === 201 || res.status === 200) {\n        setMeetingRoomResult(data.meetingRooms.map((item: MeetingRoomSearchResult) => {\n            return {\n                key: item.id,\n                ...item\n            }\n        }))\n    } else {\n        message.error(data || '系统繁忙，请稍后再试');\n    }\n}, []);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:q,alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["按名称搜索：\n",(0,t.jsx)("img",{src:O,alt:""}),"\n按容量搜索：\n",(0,t.jsx)("img",{src:B,alt:""}),"\n按设备搜索：\n",(0,t.jsx)("img",{src:_,alt:""})]}),"\n",(0,t.jsx)(n.p,{children:"然后，最开始进入页面的时候也得搜索一次："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:S,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"useEffect(() => {\n    searchMeetingRoom({\n        name: form.getFieldValue('name'),\n        capacity: form.getFieldValue('capacity'),\n        equipment: form.getFieldValue('equipment')\n    });\n}, [pageNo, pageSize]);\n"})}),"\n",(0,t.jsx)(n.p,{children:"最开始搜索一次，并且分页信息变了也重新搜索。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:A,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"这样，刚进入页面就会触发一次搜索。"}),"\n",(0,t.jsx)(n.p,{children:"然后我们处理删除："}),"\n",(0,t.jsx)(n.p,{children:"在 interfaces.ts 里添加 delete 接口："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export async function deleteMeetingRoom(id: number) {\n    return await axiosInstance.delete('/meeting-room/' + id);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后添加删除按钮的处理逻辑："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:w,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'<a href="#" onClick={() => handleDelete(record.id)}>删除</a>\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const handleDelete = useCallback(async (id: number) => {\n    try {\n        await deleteMeetingRoom(id);\n        message.success('删除成功');\n    } catch(e) {\n        console.log(e);\n        message.error('删除失败');\n    }\n}, []);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:E,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"提示删除成功，刷新后也确实没有了。"}),"\n",(0,t.jsx)(n.p,{children:"不过应该是删除后自动刷新的。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:y,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们添加一个状态，删除后设置一个随机数，然后把它作为 useEffect 的依赖，这样就能触发重新搜索。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const [num, setNum] = useState<number>();\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"setNum(Math.random());\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:N,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"不过，删除操作最好加上个二次确认。"}),"\n",(0,t.jsx)(n.p,{children:"这个把按钮抱一下就好了："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'{\n    title: \'操作\',\n    render: (_, record) => (\n        <Popconfirm\n            title="会议室删除"\n            description="确认删除吗？"\n            onConfirm={() => handleDelete(record.id)}\n            okText="Yes"\n            cancelText="No"\n        >  \n            <a href="#">删除</a>\n        </Popconfirm>\n    )\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"这样，点击后就会出现一个确认框，确认后才会删除："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:k,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后实现添加会议室："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:I,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们在 MeetingRoomManage 的同级添加一个 CreateMeetingRoomModal 组件："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { Modal } from "antd";\nimport { useCallback } from "react";\n\ninterface CreateMeetingRoomModalProps {\n    isOpen: boolean;\n    handleClose: Function\n}\n\nexport function CreateMeetingRoomModal(props: CreateMeetingRoomModalProps) {\n\n    const handleOk = useCallback(async function() {\n        props.handleClose();\n    }, []);\n\n    return <Modal title="创建会议室" open={props.isOpen} onOk={handleOk} onCancel={() => props.handleClose()}>\n        <p>xxxx</p>\n    </Modal>\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"组件里有一个 Modal，通过参数 isOpen 控制是否显示。"}),"\n",(0,t.jsx)(n.p,{children:"当点击取消的时候，或者确认的时候，都会调用 props.handleClose 方法。"}),"\n",(0,t.jsx)(n.p,{children:"然后在 MeetingRoomManage 引入它："}),"\n",(0,t.jsx)(n.p,{children:"先添加一个状态代表 modal 是否打开："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:C,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后添加 Modal 组件，并且点击按钮的时候 open："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:v,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"<Button type=\"primary\" style={{background: 'green'}} onClick={\n    () => setIsCreateModalOpen(true)\n}>\n    添加会议室\n</Button>\n\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"<CreateMeetingRoomModal isOpen={isCreateModalOpen} handleClose={() => {\n    setIsCreateModalOpen(false);\n}}></CreateMeetingRoomModal>\n"})}),"\n",(0,t.jsx)(n.p,{children:"这样，modal 就添加成功了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:F,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后实现 modal 的具体逻辑，创建会议室："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { Button, Form, Input,InputNumber, Modal } from "antd";\nimport { useForm } from "antd/es/form/Form";\nimport TextArea from "antd/es/input/TextArea";\nimport { useCallback } from "react";\n\ninterface CreateMeetingRoomModalProps {\n    isOpen: boolean;\n    handleClose: Function\n}\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\nexport interface CreateMeetingRoom {\n    name: string;\n    capacity: number;\n    location: string;\n    equipment: string;\n    description: string;\n}\n\nexport function CreateMeetingRoomModal(props: CreateMeetingRoomModalProps) {\n\n    const [form] = useForm();\n\n    const handleOk = useCallback(async function() {\n        const values = form.getFieldsValue();\n        console.log(values);\n\n        props.handleClose();\n    }, []);\n\n    return <Modal title="创建会议室" open={props.isOpen} onOk={handleOk} onCancel={() => props.handleClose()} okText={\'创建\'}>\n        <Form\n            form={form}\n            colon={false}\n            {...layout}\n        >\n            <Form.Item\n                label="会议室名称"\n                name="name"\n                rules={[\n                    { required: true, message: \'请输入会议室名称!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="位置"\n                name="location"\n                rules={[\n                    { required: true, message: \'请输入会议室位置!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="容纳人数"\n                name="capacity"\n                rules={[\n                    { required: true, message: \'请输入会议室容量!\' },\n                ]}\n            >\n                <InputNumber />\n            </Form.Item>\n            <Form.Item\n                label="设备"\n                name="equipment"\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="描述"\n                name="description"\n            >\n                <TextArea />\n            </Form.Item>\n        </Form>\n    </Modal>\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"在 modal 里添加一个表单，点击创建按钮的时候打印表单值。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:R,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"我们在 interfaces.ts 添加创建会议室的接口："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export async function createMeetingRoom(meetingRoom: CreateMeetingRoom) {\n    return await axiosInstance.post('/meeting-room/create', meetingRoom);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"在组件里调用下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:M,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const [form] = useForm<CreateMeetingRoom>();\n\nconst handleOk = useCallback(async function() {\n    const values = form.getFieldsValue();\n\n    values.description = values.description || '';\n    values.equipment = values.equipment || '';\n\n    const res = await createMeetingRoom(values);\n\n    if(res.status === 201 || res.status === 200) {\n        message.success('创建成功');\n        form.resetFields();\n        props.handleClose();\n    } else {\n        message.error(res.data.data);\n    }\n}, []);\n"})}),"\n",(0,t.jsx)(n.p,{children:"如果没有填 description 或者 equipment 就设置个空字符串。"}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:"创建失败时："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:b,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"创建成功时："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:f,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"创建成功后，手动刷新页面，就看到了新的会议室。"}),"\n",(0,t.jsx)(n.p,{children:"然后我们在关掉弹窗的时候设置下 num。"}),"\n",(0,t.jsx)(n.p,{children:"这样就会触发列表数据的刷新："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:""})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"最后，加上更新会议室的功能："}),"\n",(0,t.jsx)(n.p,{children:"创建 UpdateMeetingRoom.tsx"}),"\n",(0,t.jsx)(n.p,{children:"内容和 create 的基本一样："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { Button, Form, Input, InputNumber, Modal, message } from "antd";\nimport { useForm } from "antd/es/form/Form";\nimport TextArea from "antd/es/input/TextArea";\nimport { useCallback } from "react";\nimport { updateMeetingRoom } from "../../interfaces/interfaces";\n\ninterface UpdateMeetingRoomModalProps {\n    isOpen: boolean;\n    handleClose: Function\n}\nconst layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n}\n\nexport interface UpdateMeetingRoom {\n    name: string;\n    capacity: number;\n    location: string;\n    equipment: string;\n    description: string;\n}\n\nexport function UpdateMeetingRoomModal(props: UpdateMeetingRoomModalProps) {\n\n    const [form] = useForm<UpdateMeetingRoom>();\n\n    const handleOk = useCallback(async function() {\n        props.handleClose();\n    }, []);\n\n    return <Modal title="更新会议室" open={props.isOpen} onOk={handleOk} onCancel={() => props.handleClose()} okText={\'更新\'}>\n        <Form\n            form={form}\n            colon={false}\n            {...layout}\n        >\n            <Form.Item\n                label="会议室名称"\n                name="name"\n                rules={[\n                    { required: true, message: \'请输入会议室名称!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="位置"\n                name="location"\n                rules={[\n                    { required: true, message: \'请输入会议室位置!\' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="容纳人数"\n                name="capacity"\n                rules={[\n                    { required: true, message: \'请输入会议室容量!\' },\n                ]}\n            >\n                <InputNumber />\n            </Form.Item>\n            <Form.Item\n                label="设备"\n                name="equipment"\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="描述"\n                name="description"\n            >\n                <TextArea/>\n            </Form.Item>\n        </Form>\n    </Modal>\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"在 interfaces.ts里创建会用到的接口："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export async function updateMeetingRoom(meetingRoom: UpdateMeetingRoom) {\n    return await axiosInstance.put('/meeting-room/update', meetingRoom);\n}\n\nexport async function findMeetingRoom(id: number) {\n    return await axiosInstance.get('/meeting-room/' + id);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"然后在 MeetingRoomManage 组件引入："}),"\n",(0,t.jsx)(n.p,{children:"先创建两个 state："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:u,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false);\nconst [updateId, setUpdateId] = useState<number>();\n"})}),"\n",(0,t.jsx)(n.p,{children:"一个是 update 弹窗是否打开，一个是当前的 id。"}),"\n",(0,t.jsx)(n.p,{children:"然后添加一个更新按钮，点击的时候打开弹出弹窗，设置 id："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:g,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'{\n    title: \'操作\',\n    render: (_, record) => (\n        <div>\n            <Popconfirm\n                title="会议室删除"\n                description="确认删除吗？"\n                onConfirm={() => handleDelete(record.id)}\n                okText="Yes"\n                cancelText="No"\n            >  \n                <a href="#">删除</a>\n            </Popconfirm>\n            <br/>\n            <a href="#" onClick={() => {\n                setIsUpdateModalOpen(true);\n                setUpdateId(record.id);\n            }}>更新</a>\n        </div>\n    )\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"在下面加上弹窗："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:m,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"<UpdateMeetingRoomModal isOpen={isUpdateModalOpen} handleClose={() => {\n    setIsUpdateModalOpen(false);\n    setNum(Math.random());\n}}></UpdateMeetingRoomModal>\n"})}),"\n",(0,t.jsx)(n.p,{children:"这样更新弹窗就加上了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后我们要把 id 传过去："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"updateId 的默认值是 undefined，可能为空，加上 ! 代表非空。"}),"\n",(0,t.jsx)(n.p,{children:"然后在组件里添加这个参数："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"并且调用查询接口，查询 id 对应的数据来回显："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"useEffect(() => {\n    async function query() {\n        if(!props.id) {\n            return;\n        }\n        const res = await findMeetingRoom(props.id);\n\n        const { data } = res;\n        if(res.status === 200 || res.status === 201) {\n            form.setFieldValue('id', data.data.id);\n            form.setFieldValue('name', data.data.name);\n            form.setFieldValue('location', data.data.location);\n            form.setFieldValue('capacity', data.data.capacity);\n            form.setFieldValue('equipment', data.data.equipment);\n            form.setFieldValue('description', data.data.description);\n        } else {\n            message.error(res.data.data);\n        }\n    }\n\n    query();\n}, [props.id]);\n"})}),"\n",(0,t.jsx)(n.p,{children:"现在就能回显数据了："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"然后再加上更新数据的接口："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:r,alt:""})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const handleOk = useCallback(async function() {\n    const values = form.getFieldsValue();\n\n    values.description = values.description || '';\n    values.equipment = values.equipment || '';\n\n    const res = await updateMeetingRoom({\n        ...values,\n        id: form.getFieldValue('id')\n    });\n\n    if(res.status === 201 || res.status === 200) {\n        message.success('更新成功');\n        props.handleClose();\n    } else {\n        message.error(res.data.data);\n    }\n}, []);\n"})}),"\n",(0,t.jsx)(n.p,{children:"这里要的参数要额外带上 id。"}),"\n",(0,t.jsx)(n.p,{children:"测试下："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:""})}),"\n",(0,t.jsx)(n.p,{children:"更新成功了。"}),"\n",(0,t.jsx)(n.p,{children:"这样，会议室管理的页面就完成了。"}),"\n",(0,t.jsxs)(n.p,{children:["案例代码上传了",(0,t.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/meeting_room_booking_system_frontend_admin",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,t.jsxs)(n.h2,{id:"总结",children:["总结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"这节我们实现了会议室管理的前端页面。"}),"\n",(0,t.jsx)(n.p,{children:"实现了列表、分页和搜索，添加会议室、更新会议室、删除会议室。"}),"\n",(0,t.jsx)(n.p,{children:"其中添加和更新会议室需要创建 Modal，我们把它拆分成了单独的组件。"}),"\n",(0,t.jsx)(n.p,{children:"更新会议室的时候，传入 id，根据 id 回显数据，然后修改完以后再更新数据。"}),"\n",(0,t.jsx)(n.p,{children:"至此，会议室管理的后端和前端代码就都完成了。"})]})}function K(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(H,{...e})}):H(e)}let Q=K;K.__RSPRESS_PAGE_META={},K.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F122.%20%E4%BC%9A%E8%AE%AE%E5%AE%A4%E9%A2%84%E8%AE%A2%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%BC%9A%E8%AE%AE%E5%AE%A4%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97-%E7%AE%A1%E7%90%86%E7%AB%AF%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"122. 会议室预订系统：会议室管理模块-管理端前端开发",headingTitle:"122. 会议室预订系统：会议室管理模块-管理端前端开发",frontmatter:{}}}}]);