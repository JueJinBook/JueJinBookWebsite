"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["51946"],{177242:function(e,n,s){s.r(n),s.d(n,{default:()=>g});var r=s(552676),i=s(740453);let l=s.p+"static/image/0a2a84e7664594e62f646ecf0d43e148.bfdef24a.webp",c=s.p+"static/image/5729fbf3e8cc20ec24cbffa13fdb3e2e.73ee0884.webp",d=s.p+"static/image/9b6c0ac0632b14dddfc108ae3205c306.49010682.webp",o=s.p+"static/image/2336637147bc87a1d4f159510d87ffcf.6385f4a9.webp",t=s.p+"static/image/8ca782f09afe7f79833cafc273e666e1.9a5e4fa5.webp",a=s.p+"static/image/6f04c7cef74a263b8413c586cede73d7.8e49f06f.webp",h=s.p+"static/image/9a88152359bd13340642e32610145c66.28fa7050.webp",p=s.p+"static/image/6fe91f92393eaadb3324bf439a5b2f0b.2d3b9b87.webp",x=s.p+"static/image/1e814b18cb978bb10734c7b0e640476d.4e5adccc.webp",m=s.p+"static/image/f307c78ce3b4f18770ad8ef284b36f33.ad6debb0.webp";function j(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",h4:"h4",ul:"ul",li:"li",pre:"pre",strong:"strong",blockquote:"blockquote"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"33vue3-实战之登录鉴权form-表单组件",children:["33.Vue3 实战之登录鉴权（Form 表单组件）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33vue3-实战之登录鉴权form-表单组件",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"前言",children:["前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"上一章节我们讲了有关布局的知识点，在这里再次叮嘱大家一句，大多数公司面试初中级前端开发，上来第一个大方向基本上是问布局。因为布局知识很考验一个前端工程师对一个项目的整体把控，你不仅要回答的好，而且还得给出多套方案，这样才能体现出你的能力。"}),"\n",(0,r.jsxs)(n.p,{children:["回顾完上一章，我们来描述一下本章节需要完成的内容：在进行后续的列表需求之前，我们需要登录鉴权，没有权限是无法操作服务端的接口的，这个在之前的服务端章节也介绍过了。本章节除了登录，还会对 ",(0,r.jsx)(n.code,{children:"Form"})," 表单组件进行分析，表单对于后台管理系统尤为重要，因为大多数后台管理系统都充斥着表单验证和提交。"]}),"\n",(0,r.jsx)(n.p,{children:"下面就来预览一下本章要做的页面："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsxs)(n.h4,{id:"本章节知识点",children:["本章节知识点",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章节知识点",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["需要注册的组件：",(0,r.jsx)(n.code,{children:"ElForm"}),"、",(0,r.jsx)(n.code,{children:"ElFormItem"}),"、",(0,r.jsx)(n.code,{children:"ElInput"}),"、",(0,r.jsx)(n.code,{children:"ElCheckbox"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Form"})," 表单验证。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"token"})," 鉴权。"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"公共变量的提取"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"新建登录页面",children:["新建登录页面",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#新建登录页面",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["先创建一个空的登录组件页面，找到 ",(0,r.jsx)(n.code,{children:"views"}),"，在其下新建一个 ",(0,r.jsx)(n.code,{children:"Login.vue"})," 组件，新增代码如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'\x3c!--/src/views/Login.vue--\x3e\n<template>\n  <div class="login-body">\n    登录\n  </div>\n</template>\n\n<script setup>\n<\/script>\n\n<style scoped>\n  .login-body {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    background-color: #fff;\n  }\n</style>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在写代码时一定要声明好 ",(0,r.jsx)(n.code,{children:"name"})," 属性，如上述登录组件，",(0,r.jsx)(n.code,{children:"name: 'Login'"}),"。这样做的目的，首先你全局搜索某个组件的时候，可以直接搜这个名称，其次通过提供 ",(0,r.jsx)(n.code,{children:"name"})," 选项，可以获得更有语义信息的组件树，如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["上图是通过 ",(0,r.jsx)(n.a,{href:"https://github.com/vuejs/vue-devtools/releases/tag/v6.0.0-beta.7",target:"_blank",rel:"noopener noreferrer",children:"vue-devtools"})," 开发工具实现的语义化组件树。"]}),"\n",(0,r.jsxs)(n.p,{children:["创建完 ",(0,r.jsx)(n.code,{children:"Login.vue"})," 之后，紧接着咱们就要去配置路由，打开 ",(0,r.jsx)(n.code,{children:"/src/router/index.js"}),"，代码如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// router/index.js\n...\nroutes: [\n  {\n    path: '/',\n    name: 'index',\n    component: Index\n  },\n  {\n    path: '/add',\n    name: 'add',\n    component: AddGood\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: Login\n  }\n]\n...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["之后打开浏览器查看效果，进入 ",(0,r.jsx)(n.code,{children:"/login"})," 路径，如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["登录组件被菜单包裹，这并不是我们想要的，在登录页面我们是不需要菜单的。此时我们需要在 ",(0,r.jsx)(n.code,{children:"App.vue"})," 里做文章。"]}),"\n",(0,r.jsxs)(n.p,{children:["思路大致是这样，声明一个 ",(0,r.jsx)(n.code,{children:"showMenu"})," 布尔变量，用于控制是否展示菜单栏。再声明一个 ",(0,r.jsx)(n.code,{children:"noMenu"})," 数组变量，用于存放不需要展示菜单的路径，再通过监听路由变化来匹配是否需要展示路径，最后通过 ",(0,r.jsx)(n.code,{children:"showMenu"})," 来展示和隐藏。"]}),"\n",(0,r.jsx)(n.p,{children:"具体实现代码如下所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"template"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'<template>\n  <div class="layout">\n+    <el-container v-if="state.showMenu" class="container">\n      ...\n    </el-container>\n+    <el-container v-else class="container">\n+      <router-view />\n+    </el-container>\n  </div>\n</template>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["通过 ",(0,r.jsx)(n.code,{children:"v-if"}),"、",(0,r.jsx)(n.code,{children:"v-else"})," 属性，显示隐藏是否需要菜单，在这里做统一处理。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"script"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport { reactive, toRefs } from 'vue'\nimport { useRouter } from 'vue-router'\nimport Header from '@/components/Header.vue'\nimport Footer from '@/components/Footer.vue'\n\n// 不需要菜单的路径数组\nconst noMenu = ['/login']\nconst router = useRouter()\nconst state = reactive({\n  showMenu: true, // 是否需要显示菜单\n})\n// 监听路由的变化\nrouter.beforeEach((to) => {\n  state.showMenu = !noMenu.includes(to.path)\n})\n<\/script>\n"})}),"\n",(0,r.jsx)(n.p,{children:"修改完之后，刷新页面，浏览器展示如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"该功能实现完成。"}),"\n",(0,r.jsxs)(n.h2,{id:"添加登录页样式--引入表单组件",children:["添加登录页样式 — 引入表单组件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加登录页样式--引入表单组件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"上述逻辑整理清楚之后，我们来引入表单进行布局操作，代码如下所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"template"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<template>\n  <div class="login-body">\n    \x3c!--登录框div--\x3e\n    <div class="login-container">\n      \x3c!--登录框头部logo部分--\x3e\n      <div class="head">\n        <img class="logo" src="https://s.weituibao.com/1582958061265/mlogo.png" />\n        <div class="name">\n          <div class="title">新蜂商城</div>\n          <div class="tips">Vue3.0 后台管理系统</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<style scoped>\n  .login-container {\n    width: 420px;\n    height: 500px;\n    background-color: #fff;\n    border-radius: 4px;\n    box-shadow: 0px 21px 41px 0px rgba(0, 0, 0, 0.2);\n  }\n  .head {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 40px 0 20px 0;\n  }\n  .head img {\n    width: 100px;\n    height: 100px;\n    margin-right: 20px;\n  }\n  .head .title {\n    font-size: 28px;\n    color: #1BAEAE;\n    font-weight: bold;\n  }\n  .head .tips {\n    font-size: 12px;\n    color: #999;\n  }\n</style>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["代码中给 ",(0,r.jsx)(n.code,{children:"login-container"})," 一个固定宽高，",(0,r.jsx)(n.code,{children:"width: 420px; height: 500px"}),"，其次给 ",(0,r.jsx)(n.code,{children:"box-shadow"})," 增加立体感，",(0,r.jsx)(n.code,{children:"head"})," 通过 ",(0,r.jsx)(n.code,{children:"flex"})," 进行左右布局，",(0,r.jsx)(n.code,{children:"name"})," 通过 ",(0,r.jsx)(n.code,{children:"flex"})," 进行上下布局，最终呈现出的效果如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["还需要为其添加账号密码输入框，这里我们使用 ",(0,r.jsx)(n.code,{children:"Element-Plus"})," 为我们提供的 ",(0,r.jsx)(n.code,{children:"el-form"})," 组件，代码如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"template"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<template>\n  <div class="login-body">\n    <div class="login-container">\n      ...\n      \x3c!--loginForm是从setup内返回得到的--\x3e\n      <el-form label-position="top" :rules="state.rules" :model="state.ruleForm" ref="loginForm" class="login-form">\n        <el-form-item label="账号" prop="username">\n          <el-input type="text" v-model.trim="state.ruleForm.username" autocomplete="off"></el-input>\n        </el-form-item>\n        <el-form-item label="密码" prop="password">\n          <el-input type="password" v-model.trim="state.ruleForm.password" autocomplete="off"></el-input>\n        </el-form-item>\n        <el-form-item>\n          <div style="color: #333">登录表示您已同意<a>《服务条款》</a></div>\n          <el-button style="width: 100%" type="primary" @click="submitForm">立即登录</el-button>\n          <el-checkbox v-model="checked" @change="!checked">下次自动登录</el-checkbox>\n        </el-form-item>\n      </el-form>\n    </div>    \n  </div>\n</template>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"script"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script setup>\nimport axios from '@/utils/axios'\n// 安装 js-md5，密码需要 md5 加密，服务端是解密 md5 的形式\nimport md5 from 'js-md5'\nimport { reactive, ref, toRefs } from 'vue'\nimport { localSet } from '@/utils'\n\n// el-form 组件接收一个 ref 属性，Vue3 需要这样声明\nconst loginForm = ref(null)\nconst state = reactive({\n  ruleForm: {\n    username: '', // 账号\n    password: '', // 密码\n  },\n  checked: true,\n  // 表单验证判断。\n  rules: {\n    username: [\n      { required: 'true', message: '账户不能为空', trigger: 'blur' }\n    ],\n    password: [\n      { required: 'true', message: '密码不能为空', trigger: 'blur' }\n    ]\n  }\n})\n// 表单提交方法\nconst submitForm = async () => {\n  loginForm.value.validate((valid) => {\n    // valid 是一个布尔值，表示表单是否通过了上面 rules 的规则。\n    if (valid) {\n      // /adminUser/login 登录接口路径\n      axios.post('/adminUser/login', {\n        userName: state.ruleForm.username || '',\n        passwordMd5: md5(state.ruleForm.password), // 密码需要 md5 加密\n      }).then(res => {\n        // 返回的时候会有一个 token，这个令牌就是我们后续去请求别的接口时要带上的，否则会报错，非管理员。\n        // 这里我们将其存储到 localStorage 里面。\n        localSet('token', res)\n        // 此处登录完成之后，需要刷新页面\n        window.location.href = '/'\n      })\n    } else {\n      console.log('error submit!!')\n      return false;\n    }\n  })\n}\n// 重制方法\nconst resetForm = () => {\n  // loginForm能拿到 el-form 的重制方法\n  loginForm.value.resetFields();\n}\n<\/script>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"style"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<style scoped>\n  ...\n  .login-form {\n    width: 70%;\n    margin: 0 auto;\n  }\n  .login-form >>> .el-form--label-top .el-form-item__label {\n    padding: 0;\n  }\n  .login-form >>> .el-form-item {\n    margin-bottom: 0;\n  }\n</style>\n"})}),"\n",(0,r.jsx)(n.p,{children:"上述代码中已经给出注释，下面说几点要注意的事项。"}),"\n",(0,r.jsxs)(n.p,{children:["首先需要安装一下 ",(0,r.jsx)(n.code,{children:"js-md5"}),"，执行命令为 ",(0,r.jsx)(n.code,{children:"npm i js-md5 -S"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["其次，之所以设置完 ",(0,r.jsx)(n.code,{children:"token"})," 之后需要刷新页面，是因为 ",(0,r.jsx)(n.code,{children:"token"})," 存储完成之后，如果通过 ",(0,r.jsx)(n.code,{children:"router.push"})," 路由实例方法跳转首页，页面不刷新的情况下，",(0,r.jsx)(n.code,{children:"utils/axios.js"})," 里的 ",(0,r.jsx)(n.code,{children:"localGet('token')"}),"，是不会被执行的，如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// src/utils/axios.js\naxios.defaults.headers['token'] = localGet('token') || ''\n"})}),"\n",(0,r.jsxs)(n.p,{children:["最后， ",(0,r.jsx)(n.code,{children:">>>"})," 深度作用选择器的使用，在加 ",(0,r.jsx)(n.code,{children:"scoped"})," 的情况下，上述我们想修改组件内部样式，如果使用如下方式："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:".login-form  .el-form-item {}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"在添加 rules 的情况下，不要给 el-form-item 组件添加 required 属性，否则错误验证会出现英文的情况。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"样式显示如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"添加后的样式显示如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"刷新浏览器展示如下图所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["点击登录之后，打开控制台查看的 ",(0,r.jsx)(n.code,{children:"Application"}),"，如下图所示："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(n.h2,{id:"优化",children:["优化",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#优化",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["之前已经在二次封装 ",(0,r.jsx)(n.code,{children:"axios"}),"时做了登录鉴权，如果错误码为 419 的时候，我们就会通过 ",(0,r.jsx)(n.code,{children:"router.push"})," 跳转到 ",(0,r.jsx)(n.code,{children:"/login"})," 页面，具体代码如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// src/utils/axios.js\nif (res.data.resultCode == 419) {\n  router.push({ path: '/login' })\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.code,{children:"localStorage"})," 中没有 ",(0,r.jsx)(n.code,{children:"token"})," 值的时候，我们可以明确的知道肯定是没有登录授权，此时我们可以直接不用通过请求接口后，根据错误码来判断是否跳转。"]}),"\n",(0,r.jsxs)(n.p,{children:["我们可以在 ",(0,r.jsx)(n.code,{children:"App.vue"})," 下添加路由监听，打开 ",(0,r.jsx)(n.code,{children:"App.vue"}),"，添加如下代码："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script setup>\n  ...\n  import { localGet } from '@/utils'\n  ...\n  router.beforeEach((to, from, next) => {\n  if (to.path == '/login') {\n    // 如果路径是 /login 则正常执行\n    next()\n  } else {\n    // 如果不是 /login，判断是否有 token\n    if (!localGet('token')) {\n      // 如果没有，则跳至登录页面\n      next({ path: '/login' })\n    } else {\n      // 否则继续执行\n      next()\n    }\n  }\n  state.showMenu = !noMenu.includes(to.path)\n})\n<\/script>\n"})}),"\n",(0,r.jsx)(n.p,{children:"页面展示效果如下所示："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样做的目的，是不会让浏览器中先出现 vue3-admin 项目中的内部页面，之后再跳转的现象。"}),"\n",(0,r.jsxs)(n.p,{children:["我们在路由监听函数内，添加一下 ",(0,r.jsx)(n.code,{children:"title"})," 的修改，如下所示："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script setup>\n  ...\n  import { localGet, pathMap } from '@/utils'\n  ...\n  router.beforeEach((to, from, next) => {\n    if (to.path == '/login') {\n      // 如果路径是 /login 则正常执行\n      next()\n    } else {\n      // 如果不是 /login，判断是否有 token\n      if (!localGet('token')) {\n        // 如果没有，则跳至登录页面\n        next({ path: '/login' })\n      } else {\n        // 否则继续执行\n        next()\n      }\n    }\n    state.showMenu = !noMenu.includes(to.path)\n    document.title = pathMap[to.name]\n  })\n<\/script>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这里我将 ",(0,r.jsx)(n.code,{children:"pathMap"})," 提取到了 ",(0,r.jsx)(n.code,{children:"/src/utils/index.js"})," 内，通过抛出的形式进行公用，因为 ",(0,r.jsx)(n.code,{children:"components/Header.vue"})," 也用到了它。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// src/utils/index.js\nexport const pathMap = {\n  index: '首页',\n  login: '登录',\n  add: '添加商品'\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这里的键值对应着 ",(0,r.jsx)(n.code,{children:"src/router/index.js"})," 下的配置属性的 ",(0,r.jsx)(n.code,{children:"name"}),"。如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"routes: [\n  {\n    path: '/',\n    name: 'index',\n    component: Index\n  },\n  {\n    path: '/add',\n    name: 'add',\n    component: AddGood\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: Login\n  }\n]\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["本章节带着大家一起完成了登录鉴权的工作，目前是采用的 ",(0,r.jsx)(n.code,{children:"token"})," 令牌形式鉴权，常见的还有 ",(0,r.jsx)(n.code,{children:"cookie"}),"、",(0,r.jsx)(n.code,{children:"OAuth(开放授权)"}),"、",(0,r.jsx)(n.code,{children:"HTTP Basic Authentication"}),"等，不过最终目的就是限制用户调用权限接口，按需选择即可。"]}),"\n",(0,r.jsxs)(n.p,{children:["本章的主要目的就是让大家知道如何通过保存 ",(0,r.jsx)(n.code,{children:"token"})," 的形式，完成后续的授权操作。"]}),"\n",(0,r.jsxs)(n.h4,{id:"本章源码地址",children:["本章源码地址",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#本章源码地址",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://s.yezgea02.com/1663310560221/admin02.zip",target:"_blank",rel:"noopener noreferrer",children:"点击下载"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"文档最近更新时间：2022 年 9 月 20 日。"}),"\n"]})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(j,{...e})}):j(e)}let g=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F33.Vue3%20%E5%AE%9E%E6%88%98%E4%B9%8B%E7%99%BB%E5%BD%95%E9%89%B4%E6%9D%83%EF%BC%88Form%20%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"本章节知识点",id:"本章节知识点",depth:4},{text:"新建登录页面",id:"新建登录页面",depth:2},{text:"添加登录页样式 — 引入表单组件",id:"添加登录页样式--引入表单组件",depth:2},{text:"优化",id:"优化",depth:2},{text:"总结",id:"总结",depth:2},{text:"本章源码地址",id:"本章源码地址",depth:4}],title:"33.Vue3 实战之登录鉴权（Form 表单组件）",headingTitle:"33.Vue3 实战之登录鉴权（Form 表单组件）",frontmatter:{}}}}]);