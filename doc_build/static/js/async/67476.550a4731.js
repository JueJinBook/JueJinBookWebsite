"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["67476"],{824503:function(e,n,s){s.r(n),s.d(n,{default:()=>j});var r=s(552676),t=s(740453);let i=s.p+"static/image/f3076737d8dcae70cf32b1a7a41b1b3b.33769730.webp",o=s.p+"static/image/57c2f741fbbbb30030983a483ddd267f.d3cd0cb3.webp",a=s.p+"static/image/0474606eeb767df9f2b3f0cf4fc9fea8.2261f169.webp",l=s.p+"static/image/afd7e4c61c1413b0c38fe71e6f7387a5.eee84c64.webp",d=s.p+"static/image/8d3fe6f4f1fca1db1dc384ba93801a54.b65f85ca.webp",c=s.p+"static/image/91f8ed97b8d12ca2b8ac09a1ba4cfaef.b2be2df5.webp",p=s.p+"static/image/61e714ceb6d15f93e8347f667bd0ece6.d553ddc9.webp";function h(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",ul:"ul",li:"li",blockquote:"blockquote",h2:"h2",pre:"pre",code:"code"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"22接口参数处理和统一响应结果处理",children:["22.接口参数处理和统一响应结果处理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22接口参数处理和统一响应结果处理",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"很多人会问到关于参数接收和处理的问题，其实这是一个非常简单的知识点，不过有些同学可能只学习了 Spring Boot 框架，而对于其基础框架 Spring 和 Spring MVC 框架的知识点掌握得并不是很牢靠，所以这里我也会简单的介绍一下，首先需要达成一个共识：Spring Boot 框架中的 web 开发模块就是使用了 Spring MVC 框架。"}),"\n",(0,r.jsx)(n.p,{children:"不过与普通的 web 项目开发相比，在 Spring Boot 项目中我们并不需要对 Spring MVC 框架进行配置即可使用该框架的相关功能，这种体验在第 14 讲《Spring Boot 快速上手》中都有领略到。只是在项目中引用了 web starter，之后就可以进行 Controller 层代码的编写和 web 请求，这是因为 Spring Boot 自动配置机制，Spring MVC 所需的相关类在项目启动过程汇总已经自动配置生效了，下图就是 Spring Boot 官方文档中关于 Spring MVC 自动配置的简介："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:"auto-mvc"})}),"\n",(0,r.jsx)(n.p,{children:"通过官方文档的介绍我们可以发现，Spring Boot 做了如下的默认配置："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"自动配置了 ViewResolver 视图解析器"}),"\n",(0,r.jsx)(n.li,{children:"静态资源文件夹处理"}),"\n",(0,r.jsx)(n.li,{children:"自动注册了大量的转换器和格式化器"}),"\n",(0,r.jsx)(n.li,{children:"提供了 HttpMessageConverter 对请求参数和返回结果进行处理"}),"\n",(0,r.jsx)(n.li,{children:"自动注册了 MessageCodesResolver"}),"\n",(0,r.jsx)(n.li,{children:"默认欢迎页配置"}),"\n",(0,r.jsx)(n.li,{children:"favicon 自动配置"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"以上自动配置都是在 WebMvcAutoConfiguration 自动配置类中操作的，接下来我们将结合源码和小案例对以上知识点进行介绍和讲解。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"感兴趣的朋友可以去看一看源码，当然，根据过往学员的反馈，很多人都是看不去源码，所以大家可以先了解、先上手代码，后面再找时间去看看源码并研究其中的原理。"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"自动注册-converter-formatter",children:["自动注册 Converter 、Formatter",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自动注册-converter-formatter",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在 WebMvcAutoConfigurationAdapter 内部类中，含有 addFormatters() 方法，该方法会向 FormatterRegistry 添加 IOC 容器中所有的 Converter、GenericConverter、Formatter 类型的 bean。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"		@Override\n		public void addFormatters(FormatterRegistry registry) {\n			for (Converter<?, ?> converter : getBeansOfType(Converter.class)) {\n				registry.addConverter(converter);\n			}\n			for (GenericConverter converter : getBeansOfType(GenericConverter.class)) {\n				registry.addConverter(converter);\n			}\n			for (Formatter<?> formatter : getBeansOfType(Formatter.class)) {\n				registry.addFormatter(formatter);\n			}\n		}\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"为了方便大家理解，我们简单的举一个小例子，新建 TestController 类并新增 typeConversionTest() 方法，参数分别为 goodsName(String 类型)、weight(float类型)、type(int类型)、onSale(Boolean类型)，代码如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\npublic class TestController {\n\n    @RequestMapping("/test/type/conversion")\n    public void typeConversionTest(String goodsName, float weight, int type, Boolean onSale) {\n        System.out.println("goodsName:" + goodsName);\n        System.out.println("weight:" + weight);\n        System.out.println("type:" + type);\n        System.out.println("onSale:" + onSale);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"之后我们重启项目并在浏览器中输入地址进行请求，看一下打印结果是怎么样的。"}),"\n",(0,r.jsxs)(n.p,{children:["第一次请求：",(0,r.jsx)(n.code,{children:"http://localhost:8080/test/type/conversion?goodsName=iPhoneX&weight=174.5&type=1&onSale=true"}),"\n打印结果："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"goodsName:iPhoneX\nweight:174.5\ntype:1\nonSale:true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["第二次请求：",(0,r.jsx)(n.code,{children:"http://localhost:8080/test/type/conversion?goodsName=iPhone8&weight=174.5&type=2&onSale=0"}),"\n打印结果："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"goodsName:iPhone8\nweight:174.5\ntype:2\nonSale:false\n"})}),"\n",(0,r.jsx)(n.p,{children:"其实这就是 SpringMVC 中的类型转换，Http 请求传递的数据都是字符串 String 类型的，上面这个方法在 Controller 中定义，如果该方法对应的地址接收到到浏览器的请求的话，并且请求中含有 goodsName(String 类型)、weight(float类型)、type(int类型)、onSale(Boolean类型) 参数且都已经被进行正确的类型转换了，如果参数无法通过 String 强转的话也会报错，这就是文章中提到的 MessageCodesResolver 了，朋友们可以自行多测试几次。"}),"\n",(0,r.jsx)(n.p,{children:"以上是简单的类型转换，如果业务需要的话也可以进行自定义类型转换器添加到项目中。"}),"\n",(0,r.jsxs)(n.h2,{id:"消息转换器-httpmessageconverter",children:["消息转换器 HttpMessageConverter",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#消息转换器-httpmessageconverter",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"HttpMessageConverter 的设置也是通过 WebMvcAutoConfigurationAdapter 完成的，源码如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"		@Override\n		public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n			this.messageConvertersProvider.ifAvailable((customConverters) -> converters\n					.addAll(customConverters.getConverters()));\n		}\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"以往在使用 SpringMVC 框架开发项目时，大家应该都使用过 @RequestBody、@ResponseBody 注解进行请求实体的转换和响应结果的格式化输出，以普遍使用的 json 数据为例，这两个注解的作用分别可以将请求中的数据解析成 json 并绑定为实体对象以及将响应结果以 json 格式返回给请求发起者，但 Http 请求和响应是基于文本的，也就是说在 SpringMVC 内部维护了一套转换机制，也就是我们通常所说的“将 json 格式的请求信息转换为一个对象，将对象转换为 json 格式并输出为响应信息 ”，这些就是 HttpMessageConverter 的作用。"}),"\n",(0,r.jsx)(n.p,{children:"举一个简单的例子，我们定义一个实体类，并通过 @RequestBody、@ResponseBody 注解进行参数的读取和响应，代码如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// 实体类\npublic class SaleGoods {\n    private Integer id;\n    private String goodsName;\n    private float weight;\n    private int type;\n    private Boolean onSale;\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n        this.id = id;\n    }\n    public String getGoodsName() {\n        return goodsName;\n    }\n    public void setGoodsName(String goodsName) {\n        this.goodsName = goodsName;\n    }\n    public float getWeight() {\n        return weight;\n    }\n    public void setWeight(float weight) {\n        this.weight = weight;\n    }\n    public Boolean getOnSale() {\n        return onSale;\n    }\n    public void setOnSale(Boolean onSale) {\n        this.onSale = onSale;\n    }\n    public int getType() {\n        return type;\n    }\n    public void setType(int type) {\n        this.type = type;\n    }\n    @Override\n    public String toString() {\n        return "SaleGoods{" +\n                "id=" + id +\n                ", goodsName=\'" + goodsName + \'\\\'\' +\n                ", weight=" + weight +\n                ", type=" + type +\n                ", onSale=" + onSale +\n                \'}\';\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"控制器方法如下，拿到参数数值后进行简单的修改并将对象数据返回："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\npublic class TestController {\n\n    @RequestMapping(value = "/test/httpmessageconverter", method = RequestMethod.POST)\n    public SaleGoods httpMessageConverterTest(@RequestBody SaleGoods saleGoods) {\n        System.out.println(saleGoods.toString());\n        saleGoods.setType(saleGoods.getType() + 1);\n        saleGoods.setGoodsName("商品名：" + saleGoods.getGoodsName());\n        return saleGoods;\n    }\n    \n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"代码中并没有 @ResponseBody 注解，是因为 @RestController 注解是一个组合注解，包含 @ResponseBody 注解。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"编码完成后重启项目，并发送请求数据进行测试，请求数据如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{	\n	"id":1,\n	"goodsName":"Spring Boot 2 教程",\n	"weight":10.5,\n	"type":2,\n	"onSale":true\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"由于是 POST 请求，因此没有直接使用浏览器访问，而是使用 postman 进行模拟请求，最终获得结果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:"result"})}),"\n",(0,r.jsx)(n.p,{children:"由于消息转换器的存在，对象数据的读取不仅简单而且完全正确，响应时也不用自行封装工具类，使得开发过程变得更加灵活和高效。"}),"\n",(0,r.jsxs)(n.h2,{id:"项目中的实际应用",children:["项目中的实际应用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#项目中的实际应用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"讲完了 Spring MVC 对于参数和返回结果的处理，接下来大家跟着我的思路，我们一起来看一下在项目中又是怎样去运用这两个知识点，怎样去处理参数接收和结果返回的。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"普通参数接收"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:"image-20210407105710043"})}),"\n",(0,r.jsx)(n.p,{children:"截图中为商品列表接口的方法定义，这里的参数接收方式和前文中讲到的 demo 类似，由于是 GET 请求方式，所以传参时直接在路径后拼接参数和参数值即可，格式为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"?key1=value1&key2=value2\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"路径参数接收"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:"image-20210407105802859"})}),"\n",(0,r.jsxs)(n.p,{children:["部分接口在设计时也采用了这种将参数拼入路径中的方式，比如商品详情接口，如果我们想要查询订单号为 ",(0,r.jsx)(n.code,{children:"10011"})," 的商品信息，则直接请求 ",(0,r.jsx)(n.code,{children:"/goods/10011"})," 路径即可，代码中使用 ",(0,r.jsx)(n.code,{children:"@PathVariable"})," 注解来进行接收。"]}),"\n",(0,r.jsx)(n.p,{children:"当然也可以设计为普通参数接收的形式，比较类似，都是简单类型的参数。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"对象参数接收"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:"image-20210407105924377"})}),"\n",(0,r.jsxs)(n.p,{children:["项目中 ",(0,r.jsx)(n.code,{children:"POST"})," 方法或者 ",(0,r.jsx)(n.code,{children:"PUT"})," 方法类型的请求方式，基本都是以对象形式来接收参数，前端在请求 Body 中放入 json 格式的请求参数，后端则使用 ",(0,r.jsx)(n.code,{children:"@RequestBody"})," 注解进行接收，并将这些参数转换为对应的实体类。"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"为了传参形式的统一，POST 或者 PUT 类型的请求参数，前端传过来的格式要求为 json 形式，Content-Type 统一设置为 application/json。"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"复杂对象接收"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"当然，有时也会出现复杂对象传参的处理，比如一个对象中包含另外一个对象，这种也与对象参数接收的方式一样，只是在 json 串中对加一层对象即可。"}),"\n",(0,r.jsxs)(n.p,{children:["这里我以订单生成接口的传参来介绍，源码为 ",(0,r.jsx)(n.code,{children:"ltd.newbee.mall.api.mall.NewBeeMallOrderAPI"})," 类："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["前端需要将用户选勾选的购物项 id 数组和收货地址的 id 传过来，后端的处理逻辑类似，使用 ",(0,r.jsx)(n.code,{children:"@RequestBody"})," 注解进行接收和对象转换即可。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"前端传参时需要注意一下 json 格式，比如这个接口的传输参数就可以是："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "addressId": 0,\n  "cartItemIds": [\n    1,2,3\n  ]\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"统一结果响应",children:["统一结果响应",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#统一结果响应",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"项目中使用统一的结果响应对象来处理请求的数据返回，这样做的好处是可以保证所有接口响应数据格式的统一，大大地减少接口响应的工作量和避免接口应答的不统一而造成的开发问题，以本项目中的功能模块举例，有些接口需要返回简单的对象，比如字符串或者数字；有些接口需要返回一个复杂的对象，比如用户详情接口、商品详情接口，这些接口就需要返回不同的对象；有些接口又需要返回列表对象或者分页数据，这些对象又复杂了一些。"}),"\n",(0,r.jsx)(n.p,{children:"我们首先将返回结果进行抽象并封装。"}),"\n",(0,r.jsx)(n.p,{children:"新建 util 包，并封装 Result 结果类，代码如下（注：代码位于 ltd.newbee.mall.util）："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package ltd.newbee.mall.util;\n\nimport io.swagger.annotations.ApiModelProperty;\n\nimport java.io.Serializable;\n\npublic class Result<T> implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    //业务码，比如成功、失败、权限不足等 code，可自行定义\n    @ApiModelProperty("返回码")\n    private int resultCode;\n    //返回信息，后端在进行业务处理后返回给前端一个提示信息，可自行定义\n    @ApiModelProperty("返回信息")\n    private String message;\n    //数据结果，泛型，可以是列表、单个对象、数字、布尔值等\n    @ApiModelProperty("返回数据")\n    private T data;\n\n    public Result() {\n    }\n\n    public Result(int resultCode, String message) {\n        this.resultCode = resultCode;\n        this.message = message;\n    }\n\n    public int getResultCode() {\n        return resultCode;\n    }\n\n    public void setResultCode(int resultCode) {\n        this.resultCode = resultCode;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n    @Override\n    public String toString() {\n        return "Result{" +\n                "resultCode=" + resultCode +\n                ", message=\'" + message + \'\\\'\' +\n                ", data=" + data +\n                \'}\';\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"每一次后端数据返回都会根据以上格式进行数据封装，包括业务码、返回信息、实际的数据结果，而不是像前一个实验中的不确定格式，前端接受到该结果后对数据进行解析，并通过业务码进行相应的逻辑操作，之后再将 data 中的数据获取到并进行页面渲染或者进行信息提示。"}),"\n",(0,r.jsx)(n.p,{children:"实际返回的数据格式如下："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"列表数据"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n	"resultCode": 200,\n	"message": "SUCCESS",\n	"data": [{\n		"id": 2,\n		"name": "user1",\n		"password": "123456"\n	}, {\n		"id": 1,\n		"name": "13",\n		"password": "12345"\n	}]\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"单条数据"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n	"resultCode": 200,\n	"message": "SUCCESS",\n	"data": true\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"如上两个分别是列表数据和单条数据的返回，后端进行业务处理后将会返回给前端一串 json 格式的数据，resultCode 等于 200 表示数据请求成功，该字段也可以自行定义，比如 0、1001、500 等等，message 值为 SUCCESS，也可以自行定义返回信息，比如“获取成功”、“列表数据查询成功”等，这些都需要与前端约定好，一个码只表示一种含义，而 data 中的数据可以是一个对象数组、也可以是一个字符串、数字等类型，根据不同的业务返回不同的结果，之后的实践内容里都会以这种方式返回数据。"}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本章节的内容，依然是为了减少大家的学习成本，总体来说是对项目中所有后端接口处理的介绍，包括参数接收、参数格式、接口结果响应、统一结果响应的处理。"}),"\n",(0,r.jsx)(n.p,{children:"关于传参的规范和返回结果的统一，尽可能的使得控制层业务层处理的数据格式统一化，保证了接口和编码规范的统一性。这种做法不仅仅出现本项目中，对大家今后的企业级项目开发工作也有着非常重大的意义，规范的参数定义和结果响应极大程度的降低了开发成本及沟通成本。"})]})}function g(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}let j=g;g.__RSPRESS_PAGE_META={},g.__RSPRESS_PAGE_META["Vue3%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F22.%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%E5%92%8C%E7%BB%9F%E4%B8%80%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C%E5%A4%84%E7%90%86.md"]={toc:[{text:"自动注册 Converter 、Formatter",id:"自动注册-converter-formatter",depth:2},{text:"消息转换器 HttpMessageConverter",id:"消息转换器-httpmessageconverter",depth:2},{text:"项目中的实际应用",id:"项目中的实际应用",depth:2},{text:"统一结果响应",id:"统一结果响应",depth:2},{text:"总结",id:"总结",depth:2}],title:"22.接口参数处理和统一响应结果处理",headingTitle:"22.接口参数处理和统一响应结果处理",frontmatter:{}}}}]);