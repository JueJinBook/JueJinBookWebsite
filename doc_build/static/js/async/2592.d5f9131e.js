"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["2592"],{53475:function(e,n,s){s.r(n),s.d(n,{default:()=>j});var i=s(552676),a=s(740453);let t=s.p+"static/image/3d006af5ca90b249b7aca3ea341a4906.f973e4f0.webp",r=s.p+"static/image/9d8b9ecb3d0285d769f6574aa3d550ea.28b3a577.webp",l=s.p+"static/image/9f52228b2039aa60538e7447d9674dd5.5d102c4f.webp",c=s.p+"static/image/8866040e278d871aef0910bc84929b90.46a61212.webp",d=s.p+"static/image/4546dfac3886451d26e962283b3ecfd2.08b46c14.webp",o=s.p+"static/image/fca7466eadf29a6a263b72bbac88b9d5.96b33d65.webp",h=s.p+"static/image/e92b9dc6868fd895dd702e78b71e1a72.205d5b92.webp";function x(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",img:"img",pre:"pre",code:"code",strong:"strong",ol:"ol",li:"li"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"16-实战6导航四云村页面开发",children:["16 实战6：导航四：云村页面开发",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#16-实战6导航四云村页面开发",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"本节主要讲解利用 swiper 组件滚动展示信息，利用 flexbox 瀑布流布局实现浏览卡片式产品。"}),"\n",(0,i.jsxs)(n.h2,{id:"页面主体布局",children:["页面主体布局",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面主体布局",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"当前页面的布局沿用在上一节中提到的布局。如上图所示分为两部分：头部标题栏 + 滚动浏览区域。头部标题栏 fixed 固定，内容区用 scroll-view 组件撑开整个页面。"}),"\n",(0,i.jsx)(n.p,{children:"相关代码："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<view>\n	\x3c!-- 头部 --\x3e\n	<uni-nav-bar fixed :status-bar="true">\n		头部内容\n	</uni-nav-bar>\n	\x3c!-- 滚动区域 --\x3e\n	<view class="page-content">\n		<mescroll-uni ref="mescroll" :fixed="false" :down="downOption" :up="upOption" @down="downCallback" @up="upCallback">\n			滚动区域内容\n		</mescroll-uni>\n	</view>\n</view>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:".page-content {\n	position: fixed;\n	top: 64px;\n	left: 0;\n	right: 0;\n	bottom: 0px;\n	/* #ifdef H5 */\n	top:44px;  // h5 无状态栏\n	/* #endif */\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["在样式方面需要注意 ",(0,i.jsx)(n.code,{children:".page-content"})," 向下偏移一个头部标题栏的高度才可实现内容区铺满。由于不同端屏幕展示起点不同，需要做样式的调整，先看一下头部标题栏组成："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"头部标题栏固定高度(64px) = 状态栏/电池栏(20px) + 标题栏(44px)"})}),"\n",(0,i.jsx)(n.p,{children:"H5 的渲染起点并没有状态栏，样式需要条件编译，H5 中页面实际的标题高度展示为 44px ，因此 page-content 内容区需向下偏移 44px ，而不是 64px。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"/* #ifdef H5 */\ntop:44px;  // h5 无状态栏\n/* #endif */\n"})}),"\n",(0,i.jsx)(n.p,{children:"添加条件编译后，page-content 内容区偏移程度与其他端保持一致（页面正常）。里面的长列表用 mescroll-uni 上拉加载组件解决浏览交互。"}),"\n",(0,i.jsxs)(n.h2,{id:"swiper-组件展示滚动信息",children:["swiper 组件展示滚动信息",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#swiper-组件展示滚动信息",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["关于这样的信息滚动展示的功能，可能会一大波小伙伴感觉有点吃力。其实分析这一块",(0,i.jsx)(n.strong,{children:"滚动"}),"的特性，可以联想到使用 swiper 组件便能轻松实现这样的一个小功能。"]}),"\n",(0,i.jsx)(n.p,{children:"相关代码："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'\x3c!-- 日期信息bar --\x3e\n<view class="date-bar flex-box">\n	<view class="date-bar-left">\n		云村热评墙 <text class="iconfont">&#xe605;</text>\n		<swiper class="date-bar-swiper" :autoplay="true" :duration="500" :circular="true" :vertical="true">\n			<swiper-item v-for="(item, index) in dateMsg.msgList" :key="index">\n				{{item.name}}\n			</swiper-item>\n		</swiper>\n	</view>\n	<view>\n		<view>{{dateMsg.curDate[1]}}.</view>\n		<view class="date-bar-num">{{dateMsg.curDate[2]}}</view>\n	</view>\n</view>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"dateMsg: {\n	curDate: String(new Date()).split(' '),\n	msgList: [\n		{ name: '他是我见过最年少有为的人', id: ''},\n		{ name: '因为一个人而失眠，这真的好吗', id: ''},\n		{ name: '花开花落，没有悲愁怎么是少年？', id: ''},\n	],\n},\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:".date-bar-swiper{\n	width:430rpx;\n	height:40rpx;\n	line-height: 40rpx;\n	color:#d0d2d3;\n	font-size: 24rpx;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["这个功能对 swiper 属性进行设置 ",(0,i.jsx)(n.code,{children:':autoplay="true" :duration="500" :circular="true" :vertical="true"'}),"，自动滚动，滑动动画时长500毫秒，采用衔接滑动，滑动方向为纵向。即可实现滚动信息展示。"]}),"\n",(0,i.jsxs)(n.h2,{id:"flexbox-瀑布流布局实现浏览卡片式产品",children:["flexbox 瀑布流布局实现浏览卡片式产品",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#flexbox-瀑布流布局实现浏览卡片式产品",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"瀑布流又称瀑布流式布局，是一种比较流行的页面布局方式。与传统的分页显示不同，视觉表现为参差不齐的多栏布局。即多行等宽元素排列，后面的元素依次添加到其后，等宽不等高，根据图片原比例缩放直至宽度达到我们的要求，依次按照规则放入指定位置。"}),"\n",(0,i.jsx)(n.p,{children:"瀑布流式布局的优点："}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"有效的降低了界面复杂度，节省了空间，不再需要臃肿复杂的页码导航链接或按钮；"}),"\n",(0,i.jsx)(n.li,{children:"通过向上滑动浏览，对于触屏设备非常友好，基本上所有移动设备上的信息展示都是采用这种方式，特别是购物网站；"}),"\n",(0,i.jsx)(n.li,{children:"滚动预加载，用户浏览时的观赏和思维不容易被打断，更高的参与度，留存更容易。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"可以看上图的展示的瀑布流效果，flexbox 布局可以轻松实现，而不用使用 js 计算排版高度再插入内容等复杂的操作。我们可以把上图以 html 结构设计成："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'\x3c!-- flex 盒 --\x3e\n<view class="list-content">\n	\x3c!-- 左边/第一列 --\x3e\n	<view class="video-list">\n		<view class="video-item" v-for="(item, index) in showList.colList1"></view>\n	</view>\n	\x3c!-- 右边/第二列 --\x3e\n	<view class="video-list">\n		<view class="video-item" v-for="(item, index) in showList.colList2"></view>\n	</view>\n</view>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:".list-content{\n 	display: flex;\n	flex-direction: row; // 水平方向排版\n}\n.video-list{\n 	display: flex;\n	flex-direction: column; // 垂直方向排版\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["相当于 list-content 包含多列",(0,i.jsx)(n.strong,{children:"从左至右"}),"显示内容（当前为两列），单独的一列以",(0,i.jsx)(n.strong,{children:"从上到下"}),"进行排列显示。单独每一列的具体数据："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"let i = 0,\nlist1 = [], // 左边/第一列\nlist2 = [], // 右边/第二列\n// 如果有第三列\nlist3 = [], // 第三列\n\n// allDate 为后台获取的所有数据\nwhile (i < allDate.length) {\n    list1.push(allDate[i++]);\n    if (i < allDate.length) {\n        list2.push(allDate[i++]);\n    }\n	\n	// 如果有第三列\n    if (i < allDate.length) {\n        list3.push(allDate[i++]);\n    }\n}\nreturn {\n    list1, // 第一列\n    list2, // 第二列\n    // 如果有第三列\n    list3 // 第三列\n};\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"如果使用三列的方式："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["根据上面代码可以改造为多列布局，这些讲解的瀑布流布局方案，可以说是",(0,i.jsx)(n.strong,{children:"竖向瀑布流"}),"，利用 flexbox 的布局再结合下拉更新上拉加载的功能，即可实现可简单实现瀑布流布局的浏览方式。"]}),"\n",(0,i.jsxs)(n.h2,{id:"底部导航栏红点与角标的设置",children:["底部导航栏红点与角标的设置",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#底部导航栏红点与角标的设置",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"作为一款应用，应用内的信息提示一般会展现在底部导航栏上，Uniapp 支持设置 TabBar 上的元素以及角标等信息，统一了 h5，小程序，app 的设置角标 API。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"uni.setTabBarBadge"})," 这个 API 在 ",(0,i.jsx)(n.strong,{children:"非tabbar"})," 页面上调用会失效，因此我们需要在 common/js/util.js 封装一个方法由几个 tabbar 页面上调用。结合 Vuex 的状态管理全局管理角标信息。"]}),"\n",(0,i.jsx)(n.p,{children:"相关代码："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// store/index.js\nconst store = new Vuex.Store({\n	state: {\n		message: {}  // 角标信息\n	},\n	mutations: {\n		storeMessage (state, payload) {   // 角标信息\n			state.message = {...state.message, ...payload}\n		}\n	}\n})\n\nexport default store\n"})}),"\n",(0,i.jsx)(n.p,{children:"封装公用方法，先读取存储的信息，再根据信息设置 tabbar 上的角标与文本。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// common/js/util.js\n// 设置角标\nsetTabBarBadge (page) {\n	// 设置 store 红点信息\n	const accountMsg = store.state.message.account\n	const newMsg = store.state.message.newMsg || []\n	\n	newMsg[page] = 0\n	\n	const TempMsg = {\n		account: page == 4 ? 0 : accountMsg,\n		newMsg\n	}\n	store.commit('storeMessage', TempMsg)\n	\n	// 获取 store 红点信息\n	const accountMsgNew = store.state.message.account\n	const newMsgNew = store.state.message.newMsg || []\n	\n	if (accountMsgNew > 0) { // 如果有账号信息\n		setTimeout(() => {\n			// uni.setTabBarBadge 这个 API 在非tabbar页面上调用会失效。\n			uni.setTabBarBadge({   // 设置角标\n				index: 4,\n				text: String(accountMsgNew)\n			})\n		})\n	} else {\n		setTimeout(() => {\n			// 删除角标\n			uni.removeTabBarBadge({\n			   index: 0,\n			})\n		})\n	}\n	\n	newMsgNew.forEach((item, index) => {  // 设置红点\n		if (item > 0) {\n			uni.showTabBarRedDot({\n				index\n			})\n		} else {\n			uni.hideTabBarRedDot({\n				index\n			})\n		}\n	})\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"在页面上调用，0 代表 tabbar 页面索引页面"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"onLoad() {\n	// 公共设置图标\n	this.$pubFuc.setTabBarBadge(0)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"在进入应用的时候可以看见红点与文本的信息，并在进入当前 tabbar 页面的时候清除红点、角标，表示用户已查看提示的信息。"}),"\n",(0,i.jsxs)(n.h2,{id:"小结",children:["小结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"滑动的展示都可以考虑使用 swiper 组件完成，利用好组件的功能可以达到事半功倍的的效果；"}),"\n",(0,i.jsx)(n.li,{children:"flexbox 很容易实现瀑布流，做瀑布流需要考虑几方面的因素：图片大小，图片质量，加载速度，如果这些不能同时满足，会大大降低用户体验；"}),"\n",(0,i.jsx)(n.li,{children:"角标信息的设置需要在 tabbar 页面上调用。"}),"\n",(0,i.jsxs)(n.li,{children:["本章代码 ",(0,i.jsx)(n.a,{href:"https://github.com/front-end-class/uniapp-music-code/blob/master/uni-course-%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%E4%BA%91%E6%9D%91%E9%A1%B5.zip",target:"_blank",rel:"noopener noreferrer",children:"uni-course-实战开发云村页"}),"。"]}),"\n"]})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}let j=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["Uniapp%20%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6%2F16%20%E5%AE%9E%E6%88%986%EF%BC%9A%E5%AF%BC%E8%88%AA%E5%9B%9B%EF%BC%9A%E4%BA%91%E6%9D%91%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91.md"]={toc:[{text:"页面主体布局",id:"页面主体布局",depth:2},{text:"swiper 组件展示滚动信息",id:"swiper-组件展示滚动信息",depth:2},{text:"flexbox 瀑布流布局实现浏览卡片式产品",id:"flexbox-瀑布流布局实现浏览卡片式产品",depth:2},{text:"底部导航栏红点与角标的设置",id:"底部导航栏红点与角标的设置",depth:2},{text:"小结",id:"小结",depth:2}],title:"16 实战6：导航四：云村页面开发",headingTitle:"16 实战6：导航四：云村页面开发",frontmatter:{}}}}]);