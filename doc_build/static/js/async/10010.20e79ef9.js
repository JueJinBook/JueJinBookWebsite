"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["10010"],{837892:function(e,n,r){r.r(n),r.d(n,{default:()=>_});var s=r(552676),i=r(740453);let c=r.p+"static/image/5759f7ce8f0efce41f4e6cdd73bfd84b.550d24cb.gif",t=r.p+"static/image/6cecc8adbb0829c0c5133012b8f254ab.78248b3b.webp",a=r.p+"static/image/c2eaf15472b48a4ce8c466cc391dfb9e.7930b2e6.webp",d=r.p+"static/image/680106be99c93f0fbf85a7aa41b549b4.27b77b23.webp",o=r.p+"static/image/eeab45ad6604f6a24c664dc3a6ab244f.10082805.webp",h=r.p+"static/image/0beb317a1309c32f5030b69383472173.798caf55.webp",l=r.p+"static/image/4f9f285a1ffd29e2ab02d1062ca575e2.59ce9921.webp",m=r.p+"static/image/b73539ac342d2450bcf4880872850cf9.a3d58cda.webp",p=r.p+"static/image/4f2819f8f5e296172af60ad02113d7e4.e51365d7.webp",j=r.p+"static/image/f648dd3b0570fd262e7ea1844299688c.7c39c7e3.webp",x=r.p+"static/image/b72c4965993131887b1b35313bb9b2c2.7fe17481.webp",u=r.p+"static/image/c720472fb67bc6cd00c185eb13ded3ac.ee445965.webp",b=r.p+"static/image/9cf18c8665a47e4079be2576f084f029.907310a0.webp",f=r.p+"static/image/04afa7b15193309f61f1803adad2a8cc.38a6744f.webp",g=r.p+"static/image/2552eb1bed4a5a944fa9762d2d1e57b6.f3867c25.webp",I=r.p+"static/image/544f7291926c76507bc526f9357da5b9.b8208b63.webp",w=r.p+"static/image/f8ee7bdf5698f01fe36b4019a9da3dba.bcf90f41.webp",v=r.p+"static/image/7933e4e331d3610853c8219846555cbc.d93b8d76.webp",E=r.p+"static/image/c7a8ab924500f5d32d2583adf8f88334.01f61f34.webp",y=r.p+"static/image/36c5cb7acc978c06f5153e9651315ce9.cb313f3d.webp",S=r.p+"static/image/7380c32c73f2e3351cde9ac34899072d.98b02613.webp",C=r.p+"static/image/e5bf6535e18d1be1097a777402469e8e.458fcf3f.webp",A=r.p+"static/image/6d2066260eb8e0c9519910a3a96452bf.f3d55cfe.webp",q=r.p+"static/image/baf1f727d161853829f5fa0127b50b1a.a42414c1.webp";function B(e){let n=Object.assign({h1:"h1",a:"a",p:"p",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",img:"img",pre:"pre",code:"code",h2:"h2"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"181-聊天室创建聊天室加入群聊",children:["181. 聊天室：创建聊天室、加入群聊",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#181-聊天室创建聊天室加入群聊",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"好友功能开发完，这节来开发聊天室的功能。"}),"\n",(0,s.jsx)(n.p,{children:"聊天室涉及到两个表："}),"\n",(0,s.jsx)(n.p,{children:"聊天室表 chatroom："}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"字段名"}),"\n",(0,s.jsx)(n.th,{children:"数据类型"}),"\n",(0,s.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"id"}),"\n",(0,s.jsx)(n.td,{children:"INT"}),"\n",(0,s.jsx)(n.td,{children:"聊天室ID"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"name"}),"\n",(0,s.jsx)(n.td,{children:"VARCHAR(50)"}),"\n",(0,s.jsx)(n.td,{children:"群聊名"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"type"}),"\n",(0,s.jsx)(n.td,{children:"BOOLEAN"}),"\n",(0,s.jsx)(n.td,{children:"类型（单聊、群聊）"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"create_time"}),"\n",(0,s.jsx)(n.td,{children:"DATETIME"}),"\n",(0,s.jsx)(n.td,{children:"创建时间"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"update_time"}),"\n",(0,s.jsx)(n.td,{children:"DATETIME"}),"\n",(0,s.jsx)(n.td,{children:"更新时间"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"用户所在聊天室表 user_chatroom："}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{children:"字段名"}),"\n",(0,s.jsx)(n.th,{children:"数据类型"}),"\n",(0,s.jsx)(n.th,{children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"user_id"}),"\n",(0,s.jsx)(n.td,{children:"INT"}),"\n",(0,s.jsx)(n.td,{children:"用户ID"}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{children:"chatroom_id"}),"\n",(0,s.jsx)(n.td,{children:"INT"}),"\n",(0,s.jsx)(n.td,{children:"聊天室ID"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"chatroom 表保存聊天室信息，user_chatroom 表保存聊天室里有哪些用户，或者说用户在哪些聊天室。"}),"\n",(0,s.jsx)(n.p,{children:"创建对应的 modal"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:q,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"model Chatroom {\n  id  Int @id @default(autoincrement())\n  name String @db.VarChar(50)\n  // 聊天室类型 true 群聊 false 单聊\n  type Boolean @default(false)\n  createTime DateTime @default(now())\n  updateTime DateTime @updatedAt\n}\n\nmodel UserChatroom {\n  userId    Int \n  chatroomId  Int\n\n  @@id([userId, chatroomId])\n}\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"这里的 UserChatroom 表我们就不创建外键了。"}),"\n",(0,s.jsx)(n.p,{children:"执行 migrate dev："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npx prisma migrate dev --name chatroom\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"会生成 migration 的 sql 文件，并且会更新 client 代码。"}),"\n",(0,s.jsx)(n.p,{children:"看下生成的 sql："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"还有生成的表："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"都没问题。"}),"\n",(0,s.jsx)(n.p,{children:"我们创建一个聊天室模块："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g resource chatroom --no-spec\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后加一个创建聊天室的接口："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { BadRequestException, Controller, Get, Query } from '@nestjs/common';\nimport { ChatroomService } from './chatroom.service';\nimport { RequireLogin, UserInfo } from 'src/custom.decorator';\n\n@Controller('chatroom')\n@RequireLogin()\nexport class ChatroomController {\n  constructor(private readonly chatroomService: ChatroomService) {}\n\n  @Get('create-one-to-one')\n  async oneToOne(@Query('friendId') friendId: number, @UserInfo('userId') userId: number) {\n    if(!friendId) {\n      throw new BadRequestException('聊天好友的 id 不能为空');\n    }\n    return this.chatroomService.createOneToOneChatroom(friendId, userId);\n  }\n\n  @Get('create-group')\n  async group(@Query('name') name: string, @UserInfo('userId') userId: number) {\n    return this.chatroomService.createGroupChatroom(name, userId);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"声明 /chatroom/create-one-to-one 和 /chatroom/create-group 两个路由"}),"\n",(0,s.jsx)(n.p,{children:"一对一聊天需要知道对方的 id。"}),"\n",(0,s.jsx)(n.p,{children:"群聊的话需要传入名字。"}),"\n",(0,s.jsx)(n.p,{children:"在 controller 加上 @RequireLogin 的装饰器，然后通过 @Query 取 userId 传入"}),"\n",(0,s.jsx)(n.p,{children:"然后在 ChatroomService 实现对应的方法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class ChatroomService {\n\n    @Inject(PrismaService)\n    private prismaService: PrismaService;\n\n    async createOneToOneChatroom(friendId: number, userId: number) {\n        const { id } = await this.prismaService.chatroom.create({\n            data: {\n                name: '聊天室' + Math.random().toString().slice(2, 8),\n                type: false,\n            },\n            select: {\n                id: true\n            }\n        });\n\n        await this.prismaService.userChatroom.create({\n            data: {\n                userId,\n                chatroomId: id\n            }\n        });\n        await this.prismaService.userChatroom.create({\n            data: {\n                userId: friendId,\n                chatroomId: id\n            }\n        });\n        return '创建成功'\n    }\n\n    async createGroupChatroom(name: string, userId: number) {\n        const { id } = await this.prismaService.chatroom.create({\n            data: {\n                name,\n                type: true\n            }\n        })\n        await this.prismaService.userChatroom.create({\n            data: {\n                userId,\n                chatroomId: id\n            }\n        });\n        return '创建成功'\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"一对一聊天不需要聊天室名，所以随机生成一个就行："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"聊天室创建完成后，单聊把 user 和 friend 加入聊天室，群聊只把 user 加入聊天室。"}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"sql 没啥问题："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"看下数据库："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，聊天室创建成功，并且有两个人。"}),"\n",(0,s.jsx)(n.p,{children:"再创建个群聊："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"看下数据库："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(n.p,{children:"然后我们加一个查看所有群聊的接口："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Get('list')\nasync list(@UserInfo('userId') userId: number) {\n    if(!userId) {\n      throw new BadRequestException('userId 不能为空')\n    }\n    return this.chatroomService.list(userId);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"在 CharoomService 实现这个方法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async list(userId: number) {\n    const chatroomIds = await this.prismaService.userChatroom.findMany({\n        where: {\n            userId\n        },\n        select: {\n            chatroomId: true\n        }\n    })\n    const chatrooms = await this.prismaService.chatroom.findMany({\n        where: {\n            id: {\n                in: chatroomIds.map(item => item.chatroomId)\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            type: true,\n            createTime: true\n        }\n    });\n    return chatrooms;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"首先查询 userId 的所有 chatrooms 的 id，然后查询 id 对应的 chatroom"}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后加一个查询聊天室的所有用户的接口："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Get('members')\nasync members(@Query('chatroomId') chatroomId: number) {\n    if(!chatroomId) {\n      throw new BadRequestException('chatroomId 不能为空')\n    }\n    return this.chatroomService.members(chatroomId);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"实现下 service 的方法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async members(chatroomId: number) {\n    const userIds = await this.prismaService.userChatroom.findMany({\n        where: {\n            chatroomId\n        },\n        select: {\n            userId: true\n        }\n    })\n    const users = await this.prismaService.user.findMany({\n        where: {\n            id: {\n                in: userIds.map(item => item.userId)\n            }\n        },\n        select: {\n            id: true,\n            username: true,\n            nickName: true,\n            headPic: true,\n            createTime: true,\n            email: true\n        }\n    });\n    return users;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(n.p,{children:"然后 chatrooms 接口应该返回群聊的用户数，我们实现一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"就是在查询出 chatroom 之后，再查询下相关 user 的信息："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async list(userId: number) {\n    const chatroomIds = await this.prismaService.userChatroom.findMany({\n        where: {\n            userId\n        },\n        select: {\n            chatroomId: true\n        }\n    })\n    const chatrooms = await this.prismaService.chatroom.findMany({\n        where: {\n            id: {\n                in: chatroomIds.map(item => item.chatroomId)\n            }\n        },\n        select: {\n            id: true,\n            name: true,\n            type: true,\n            createTime: true\n        }\n    });\n\n    const res = [];\n    for (let i = 0; i < chatrooms.length; i++) {\n        const userIds = await this.prismaService.userChatroom.findMany({\n            where: {\n                chatroomId: chatrooms[i].id\n            },\n            select: {\n                userId: true\n            }\n        })\n        res.push({\n            ...chatrooms[i],\n            userCount: userIds.length,\n            userIds: userIds.map(item => item.userId)\n        })\n    }\n\n    return res;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后我们再加一个查询单个 chatroom 所有信息的接口："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Get('info/:id')\nasync info(@Param('id') id: number) {\n    if(!id) {\n      throw new BadRequestException('id 不能为空')\n    }\n    return this.chatroomService.info(id);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"实现下 info 方法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async info(id: number) {\n    const chatroom = await this.prismaService.chatroom.findUnique({\n        where: {\n            id\n        }\n    });\n    return {...chatroom, users: await this.members(id)}\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(n.p,{children:"最后，我们再来实现下加入群聊、退出群聊的功能。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Get('join/:id')\nasync join(@Param('id') id: number, @Query('joinUserId')  joinUserId: number) {\n    if(!id) {\n      throw new BadRequestException('id 不能为空')\n    }\n    if(!joinUserId) {\n      throw new BadRequestException('joinUserId 不能为空')\n    }\n    return this.chatroomService.join(id, joinUserId);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"实现下 join 方法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async join(id: number, userId: number) {\n    const chatroom = await this.prismaService.chatroom.findUnique({\n        where: {\n            id\n        }\n    });\n    if(chatroom.type === false) {\n        throw new BadRequestException('一对一聊天室不能加人');\n    }\n\n    await this.prismaService.userChatroom.create({\n        data: {\n            userId,\n            chatroomId: id\n        }\n    })\n\n    return '加入成功';\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,s.jsx)(n.p,{children:"然后实现下退出群聊："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@Get('quit/:id')\nasync quit(@Param('id') id: number, @Query('quitUserId') quitUserId: number) {\n    if(!id) {\n      throw new BadRequestException('id 不能为空')\n    }\n    if(!quitUserId) {\n      throw new BadRequestException('quitUserId 不能为空')\n    }\n    return this.chatroomService.quit(id, quitUserId);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"实现下 quit 方法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async quit(id: number, userId: number) {\n    const chatroom = await this.prismaService.chatroom.findUnique({\n        where: {\n            id\n        }\n    });\n    if(chatroom.type === false) {\n        throw new BadRequestException('一对一聊天室不能退出');\n    }\n\n    await this.prismaService.userChatroom.deleteMany({\n        where: {\n            userId,\n            chatroomId: id\n        }\n    })\n\n    return '退出成功';\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样，聊天室的加入和退出功能就完成了。"}),"\n",(0,s.jsxs)(n.p,{children:["代码在",(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-backend",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这节我们实现了聊天室创建、加入群聊、退出群聊的功能。"}),"\n",(0,s.jsx)(n.p,{children:"聊天室创建包括一对一聊天和群聊，一对一聊天就是创建聊天室后加入两个 user。"}),"\n",(0,s.jsx)(n.p,{children:"而群聊会加入当前用户，后面可以单独 join 加人。"}),"\n",(0,s.jsx)(n.p,{children:"我们还实现了查询聊天室列表的接口。"}),"\n",(0,s.jsx)(n.p,{children:"至此，好友和聊天室功能都完成了。"})]})}function N(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(B,{...e})}):B(e)}let _=N;N.__RSPRESS_PAGE_META={},N.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F181.%20%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%9A%E5%88%9B%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4%E3%80%81%E5%8A%A0%E5%85%A5%E7%BE%A4%E8%81%8A.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"181. 聊天室：创建聊天室、加入群聊",headingTitle:"181. 聊天室：创建聊天室、加入群聊",frontmatter:{}}}}]);