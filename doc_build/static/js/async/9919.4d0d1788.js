"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["9919"],{888954:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var c=s(552676),r=s(740453);let i=s.p+"static/image/067899b13825595a45e56cf6a2b4ba55.8939e9e8.webp",d=s.p+"static/image/604bcafcffea4fb9ea647dd8e9719d1f.c1c5132c.webp",o=s.p+"static/image/a571bcccc1972554f7ab139f47f5dca9.6d734f9c.webp",t=s.p+"static/image/77c4a700063e2794190074461ca8e465.629bc633.webp";function h(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",strong:"strong",blockquote:"blockquote",pre:"pre",h3:"h3"},(0,r.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"11console-篇---对象--方法",children:["11.console 篇 - 对象 & 方法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11console-篇---对象--方法",children:"#"})]}),"\n",(0,c.jsxs)(n.h2,{id:"前言",children:["前言",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在我们调试 ",(0,c.jsx)(n.code,{children:"Javascript"})," 的代码时，",(0,c.jsx)(n.code,{children:"对象"})," 和 ",(0,c.jsx)(n.code,{children:"方法"})," 作为经常被我们调试的对象，所以这里介绍关于 ",(0,c.jsx)(n.code,{children:"对象"})," 和 ",(0,c.jsx)(n.code,{children:"方法"})," 的调试技巧。"]}),"\n",(0,c.jsxs)(n.h2,{id:"1-queryobjects-对象查询方法",children:["1. ",(0,c.jsx)(n.code,{children:"queryObjects"})," （对象查询）方法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-queryobjects-对象查询方法",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:""})}),"\n",(0,c.jsx)(n.p,{children:"假如我们有这样一段代码，我们在里面定义了一些对象。"}),"\n",(0,c.jsxs)(n.p,{children:["问一个问题，我们怎么知道，在 ",(0,c.jsx)(n.strong,{children:"特定的时刻"})," + ",(0,c.jsx)(n.strong,{children:"特定的执行上下文"})," 有哪些对象呢？"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"DevTools"})," 里的 ",(0,c.jsx)(n.code,{children:"queryObjects"})," 函数可以展示这些信息。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["请注意，列表中创建的最后一个对象是不可用的 :  在代码执行后，对于它的引用并没有留存下来，也就是说，我们只有 ",(0,c.jsx)(n.code,{children:"3"})," 个 ",(0,c.jsx)(n.code,{children:"person"})," 对象："]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:""})}),"\n",(0,c.jsxs)(n.h2,{id:"2-monitor-镜像方法",children:["2. ",(0,c.jsx)(n.code,{children:"monitor"})," （镜像）方法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-monitor-镜像方法",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"monitor"})," 是 ",(0,c.jsx)(n.code,{children:"DevTools"})," 的一个方法， 它能够让你 ",(0,c.jsx)(n.code,{children:"“潜入”"})," 到任何 ",(0,c.jsx)(n.code,{children:"_function calls(方法的调用)"})," 中：每当一个 ",(0,c.jsx)(n.code,{children:"被潜入"})," 的方法运行的时候，",(0,c.jsx)(n.code,{children:"console 控制台"})," 会把它的实例打印出来，包含 ",(0,c.jsx)(n.strong,{children:"函数名"})," 以及 ",(0,c.jsx)(n.strong,{children:"调用它的参数"})," 。"]}),"\n",(0,c.jsxs)(n.p,{children:["我们把前面例子里面的 ",(0,c.jsx)(n.code,{children:"Person"})," 类拿过来，并且给它扩展两个方法："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"class Person {\n  constructor(name, role) {\n    this.name = name;\n    this.role = role;\n  }\n\n  greet() {\n    return this.getMessage('greeting');\n  }\n  getMessage(type) {\n    if (type === 'greeting') {\n      return `Hello, I'm ${this.name}!`;\n    }\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["如你所见，",(0,c.jsx)(n.code,{children:"greet"})," 方法通过一个特殊的参数来执行 ",(0,c.jsx)(n.code,{children:"getMessage"})," 方法，让我们看看对 ",(0,c.jsx)(n.code,{children:"getMessage"})," 方法进行追踪会产生什么结果："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:""})}),"\n",(0,c.jsxs)(n.p,{children:["这样做，会让我们少写很多 ",(0,c.jsx)(n.code,{children:"console.logs"})," !"]}),"\n",(0,c.jsxs)(n.h3,{id:"3-monitorevents-镜像事件方法",children:["3. ",(0,c.jsx)(n.code,{children:"monitorEvents"})," （镜像事件）方法",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-monitorevents-镜像事件方法",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在上文中，我们讨论了用 ",(0,c.jsx)(n.code,{children:"monitor"})," 方法来监听函数，其实还可以使用名为 ",(0,c.jsx)(n.code,{children:"monitorEvents"})," 的方法，对 ",(0,c.jsx)(n.code,{children:"events"})," 做一样的事情："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:""})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%20Chrome%20%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%2F11.console%20%E7%AF%87%20-%20%E5%AF%B9%E8%B1%A1%20%26%20%E6%96%B9%E6%B3%95.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"1. `queryObjects` （对象查询）方法",id:"1-queryobjects-对象查询方法",depth:2},{text:"2. `monitor` （镜像）方法",id:"2-monitor-镜像方法",depth:2},{text:"3. `monitorEvents` （镜像事件）方法",id:"3-monitorevents-镜像事件方法",depth:3}],title:"11.console 篇 - 对象 & 方法",headingTitle:"11.console 篇 - 对象 & 方法",frontmatter:{}}}}]);