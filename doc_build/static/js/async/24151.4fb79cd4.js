"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["24151"],{456068:function(e,t,n){n.r(t),n.d(t,{default:()=>o});var r=n(552676),a=n(740453);function c(e){let t=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",pre:"pre",code:"code",strong:"strong",ul:"ul",li:"li"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.h1,{id:"78云函数路由tcb-router",children:["78.云函数路由tcb-router",(0,r.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#78云函数路由tcb-router",children:"#"})]}),"\n",(0,r.jsxs)(t.h2,{id:"1111-云函数路由tcb-router",children:["11.11 云函数路由tcb-router",(0,r.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#1111-云函数路由tcb-router",children:"#"})]}),"\n",(0,r.jsx)(t.p,{children:"tcb-router是基于Node.js koa风格的云开发云函数轻量级的类路由库，可以用于优化前端（小程序端）调用服务端的云函数时的处理逻辑。我们可以使用它在一个云函数里集成多个类似功能的云函数，比如针对某个集合的增删改查；也可以把后端的一些零散功能集成到一个云函数里，便于集中管理等。"}),"\n",(0,r.jsxs)(t.h3,{id:"11111-tcb-router快速入门",children:["11.11.1 tcb-router快速入门",(0,r.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#11111-tcb-router快速入门",children:"#"})]}),"\n",(0,r.jsx)(t.p,{children:"tcb-router主要用于小程序端调用云函数时的处理逻辑，在小程序端使用wx.cloud.callFunction调用云函数时，我们需要在name里传入要调用的云函数名称，以及在data里传入要调用的路由的路径；而在云函数端使用app.router来写对应的路由的处理函数。"}),"\n",(0,r.jsx)(t.p,{children:"使用开发者工具，创建一个云函数，如router，然后在package.json增加tcb-router最新版latest的依赖并用npm install安装："}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'"dependencies": {\n  "wx-server-sdk":"latest",\n  "tcb-router": "latest"\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["然后在index.js里输入以下代码，其中",(0,r.jsx)(t.code,{children:"app.use"}),"表示该中间件适用于所有的路由，而",(0,r.jsx)(t.code,{children:"app.router('user')"}),"则适用于路由为字符串'user'的中间件，",(0,r.jsx)(t.code,{children:"ctx.body"}),"为返回给小程序端的数据，返回的方式是通过",(0,r.jsx)(t.code,{children:"return app.serve()"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'const cloud = require(\'wx-server-sdk\')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\nconst TcbRouter = require(\'tcb-router\');\nexports.main = async (event, context) => {\n  const app = new TcbRouter({event})\n  const {OPENID} = cloud.getWXContext()\n\n  app.use(async (ctx, next) => {//适用于所有的路由\n    ctx.data = {} //声明data为一个对象\n    await next(); \n  })\n\n  app.router(\'user\',async (ctx, next)=>{//路由为user\n    ctx.data.openId = OPENID\n    ctx.data.name = \'李东bbsky\'\n    ctx.data.interest = ["爬山","旅游","读书"]\n    ctx.body ={ //返回到小程序端的数据\n      "openid":ctx.data.openId,\n      "姓名":ctx.data.name,\n      "兴趣":ctx.data.interest\n    }\n  })\n  return app.serve()\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"而在小程序端，我们可以用事件处理函数或者生命周期函数来调用创建好的router云函数，就能在res对象里获取到云函数router返回的ctx.body里的对象了："}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"wx.cloud.callFunction({\n  name: 'router',\n  data: {\n    $url: \"user\", //路由为字符串user，注意属性为 $url \n  }\n}).then(res => {\n    console.log(res)\n})\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"11112-tcb-router管理数据库的增删改查",children:["11.11.2 tcb-router管理数据库的增删改查",(0,r.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#11112-tcb-router管理数据库的增删改查",children:"#"})]}),"\n",(0,r.jsx)(t.p,{children:"使用tcb-router还可以管理数据库的集合，我们可以把一个集合（也可以是多个集合）的add、remove、update、get等集成到一个云函数里，可以看下面具体的案例，我们在router云函数里输入以下代码："}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const cloud = require('wx-server-sdk')\ncloud.init({\n  env: cloud.DYNAMIC_CURRENT_ENV,\n})\nconst TcbRouter = require('tcb-router');\nconst db = cloud.database()\nconst _ = db.command\nconst $ = db.command.aggregate\nexports.main = async (event, context) => {\n  const collection= \"\" //数据库的名称\n  const app = new TcbRouter({event})\n  const {adddata,deleteid,updatedata,querydata,updateid,updatequery} = event\n  app.use(async (ctx, next) => {\n    ctx.data = {}\n    await next(); \n  });\n\n  app.router('add',async (ctx, next)=>{\n    const addresult = await db.collection(collection).add({\n      data:adddata\n    })\n    ctx.data.addresult = addresult\n    ctx.body = {\"添加记录的返回结果\":ctx.data.addresult}\n  })\n\n  app.router('delete',async(ctx,next)=>{\n    const deleteresult = await db.collection(collection).where({\n      id:deleteid\n    }).remove()\n    ctx.data.deleteresult = deleteresult\n    ctx.body = {\"删除记录的返回结果\":ctx.data.deleteresult}\n  })\n\n  app.router('update',async(ctx,next)=>{\n    const getdata = await db.collection(collection).where({\n      id:updateid\n    }).update({\n      data:updatedata\n    })\n    ctx.data.getresult = getdata\n    ctx.body = {\"查询记录的返回结果\":ctx.data.getresult}\n  })\n\n  app.router('get',async(ctx,next)=>{\n    const getdata = await db.collection(collection).where(querydata).get()\n    ctx.data.getresult = getdata\n    ctx.body = {\"查询记录的返回结果\":ctx.data.getresult}\n  })\n  return app.serve();\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["然后再在小程序端相应的事件处理函数里使用wx.cloud.callFunction传入相应的云函数以及相应的路由",(0,r.jsx)(t.code,{children:"$url"}),"以及传入对应的data值即可："]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'//新增一条记录\nwx.cloud.callFunction({\n  name: \'router\',//router云函数\n  data: {\n  $url: "add",\n  adddata:{\n    id:"202006031020",\n    title:"云数据库的最佳实践",\n    content:"<p>文章的富文本内容</p>",\n    createTime:Date.now()\n    }\n  }\n}).then(res => {\n  console.log(res)\n})\n\n//删除一条记录\nwx.cloud.callFunction({\n  name: \'router\',\n  data: {\n    $url:"delete",\n    deleteid:"202006031020"\n  }\n}).then(res => {\n  console.log(res)\n})\n\n//查询记录\nwx.cloud.callFunction({\n  name: \'router\',\n  data: {\n    $url:"get",\n    querydata:{\n      id:"202006031020",\n    }\n  }\n}).then(res => {\n  console.log(res)\n})\n'})}),"\n",(0,r.jsxs)(t.p,{children:["关于tcb-router更多进阶用法，可以查看",(0,r.jsx)(t.strong,{children:"技术文档："}),(0,r.jsx)(t.a,{href:"https://github.com/TencentCloudBase/tcb-router",target:"_blank",rel:"noopener noreferrer",children:"tcb-router GitHub地址"}),"。使用tcb-router时的一些说明："]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"通常情况下，我们不建议大家使用一个云函数来调用其他云函数这种做法，这种做法会导致云函数的执行时间会增加很多，而且还会耗费云函数的资源，我们可以使用tcb-router来处理需要跨云函数调用的情况；"}),"\n",(0,r.jsx)(t.li,{children:"值得注意的是，tcb-router会把所有云函数的承载放在一个云函数里，对并发有比较高要求的云函数建议不要把用tcb-router整到一个里面。每个云函数的并发数上限为1000，这本可以每秒处理十万级别的请求，但是如果把大量不同的云函数都集成到一个里面，尤其是一些耗时比较长的云函数会严重拖性能后退，而这些云函数都会共享这1000个并发，所以要注意根据情况来抉择了；"}),"\n",(0,r.jsx)(t.li,{children:"云函数会有一个冷启动时间（比如十分钟以上没人调用这个云函数，当再首次调用这个云函数会比较慢），当我们把多个功能相似、并发不会特别高（低于每秒几千）的云函数使用tcb-router集成到一个云函数里，这样就可以减少冷启动的可能性了；"}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let o=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F78.%E4%BA%91%E5%87%BD%E6%95%B0%E8%B7%AF%E7%94%B1tcb-router.md"]={toc:[{text:"11.11 云函数路由tcb-router",id:"1111-云函数路由tcb-router",depth:2},{text:"11.11.1 tcb-router快速入门",id:"11111-tcb-router快速入门",depth:3},{text:"11.11.2 tcb-router管理数据库的增删改查",id:"11112-tcb-router管理数据库的增删改查",depth:3}],title:"78.云函数路由tcb-router",headingTitle:"78.云函数路由tcb-router",frontmatter:{}}}}]);