"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["8150"],{697983:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var d=s(552676),c=s(740453);let i=s.p+"static/image/68b04264c3883e65861f763feb63bd65.bf41d36d.webp",t=s.p+"static/image/fbecb6e4ff572ef67c193a3bf46e3bd9.d8560c63.webp",l=s.p+"static/image/f51c8d03026669e062acaf6f399d2bea.1d99f041.webp";function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",ul:"ul",li:"li",h2:"h2",blockquote:"blockquote",h3:"h3",pre:"pre",code:"code",strong:"strong"},(0,c.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"5单元测试一-使用jest进行前端单元测试",children:["5.单元测试(一)： 使用Jest进行前端单元测试",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5单元测试一-使用jest进行前端单元测试",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"单元测试是软件质量的重要保证。在 Github 上挑选一款软件，单元测试覆盖率是评价软件成熟度的一个重要指标。通常成熟可靠的开源产品都有完善的单元测试，并且覆盖率可以达到 80% 以上。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:l,alt:"img"})}),"\n",(0,d.jsx)(n.p,{children:"单元测试之所以这么重要，我认为有以下三方面原因："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"保证并且展示开发质量；"}),"\n",(0,d.jsx)(n.li,{children:"提高重构的信心；"}),"\n",(0,d.jsx)(n.li,{children:"团队合作的基石。"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"保证并且展示开发质量，这点不必多说，没有人希望使用一个有大坑的项目。如果想要你的项目更加受欢迎，单元测试是必需的，并且要尽量提高覆盖率。不过，有的时候过度追求 100% 覆盖也会带来过多的开发成本。所以没必要一定要在初期过度提高覆盖率。"}),"\n",(0,d.jsx)(n.p,{children:"单元测试，很重要的一点是提高重构的信心。假设尤大神在编写Vue的时候，突然发现 dom diff 中可以用一种全新的算法来提高执行效率，但是他无法判断这种新的算法是否会对 Vue 的整体功能带来意想不到的 Bug，这个时候就该单元测试大显神威了。"}),"\n",(0,d.jsx)(n.p,{children:"由于单元测试是一套代码，可以自动判断程序的执行效果。他只需要在修改代码后重新运行单元测试，就可以分析出这个新特性的引入是否会对 Vue 整体带来影响。也正因为有了单元测试，我们不必过多考虑重构后的代码退化问题，增强重构信心。"}),"\n",(0,d.jsx)(n.p,{children:"开源社区中，团队合作面临很高的不确定性，因为没有当面的沟通，任何人都可能给你的项目提交贡献代码。单靠人工来判断每一个 PR 的代码质量是不可能的，这也需要单元测试来帮忙。"}),"\n",(0,d.jsx)(n.p,{children:"一般项目都会配置 CI 脚本，当有人提出 PullRequest 的时候，CI 服务都会自动运行单元测试来确定这次修改是否会对原来的代码功能造成影响。"}),"\n",(0,d.jsx)(n.p,{children:"下面这张图截取自 Vue 项目的 PR 列表。你看到绿色的对钩就是表示通过的单元测试。这样代码所有者只需要判断这个提交是否有意义就可以了，无需过多考虑对以前代码的影响。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:t,alt:"img"})}),"\n",(0,d.jsx)(n.p,{children:"关于如何在 CI 中配置自动运行单元测试，我们会在后续的章节中介绍。"}),"\n",(0,d.jsx)(n.p,{children:"本小册中计划分为基础、实战两节来介绍，这个章节介绍单元测试的基础部分。主要目的是学会如何使用 Jest 来进行前端项目的测试，为后面的实战做好准备。"}),"\n",(0,d.jsxs)(n.h2,{id:"用户故事userstory",children:["用户故事(UserStory)",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用户故事userstory",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"使用 Jest 完成对一个前端页面的测试。"}),"\n",(0,d.jsxs)(n.h2,{id:"任务分解task",children:["任务分解(Task)",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#任务分解task",children:"#"})]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"搭建 Jest 环境"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"编写一个 Jest 函数 ;"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"引入 Dom 仿真，完成一个前端网页测试。"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"任务实现",children:["任务实现",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#任务实现",children:"#"})]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"Jest 是 Facebook 开发的 Javascript 测试框架，用于创建、运行和编写测试的 JavaScript 库。"}),"\n",(0,d.jsx)(n.p,{children:"Jest 作为 NPM 包发布，可以安装并运行在任何 JavaScript 项目中。Jest 是目前前端最流行的测试库之一。"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"目前 Jest 是最为流行的前端测试框架。Vue、React 、Element 都是采用 Jest 框架。"}),"\n",(0,d.jsxs)(n.h3,{id:"测试js函数",children:["测试JS函数",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#测试js函数",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"使用 Jest 进行单元测试只需要在全局安装 jest 就可以了。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"npm i jest -g\n"})}),"\n",(0,d.jsx)(n.p,{children:"下面尝试测试一个最基本的函数 ，一个加法函数。"}),"\n",(0,d.jsx)(n.p,{children:"add.js"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"const add = (a, b) => a + b;\nmodule.exports = add;\n"})}),"\n",(0,d.jsx)(n.p,{children:"要测试的目的就是确定加法函数确实可以正确的返回加法结果："}),"\n",(0,d.jsx)(n.p,{children:"1 + 2 =3；"}),"\n",(0,d.jsx)(n.p,{children:"1 + 1 = 1；"}),"\n",(0,d.jsx)(n.p,{children:"测试加法程序，编写测试用例。"}),"\n",(0,d.jsxs)(n.p,{children:["./ ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.strong,{children:"tests"})}),"/add.spec.js"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:'const add = require("../add");\n\ndescribe("测试Add函数", () => {\n \xa0test("add(1,2) === 3", () => {\n \xa0 \xa0expect(add(1, 2)).toBe(3);\n  });\n \xa0test("add(1,1) === 2", () => {\n \xa0 \xa0expect(add(1, 1)).toBe(2);\n  });\n});\n'})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["首先创建测试文件 ./ ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.strong,{children:"tests"})}),"/add.spec.js"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"根据 jest 约定："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["功能函数对应的测试函数放在当前目录的",(0,d.jsx)(n.strong,{children:"tests"}),"目录中；"]}),"\n",(0,d.jsx)(n.li,{children:"测试的函数的文件名会是 fun.spec.js。 比如 add.js =》 add.spec.js。"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"建立一个 describe 测试分组， 在第一个参数中填写测试内容 【测试 Add 函数】；"}),"\n"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"编写测试代码 test 函数："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"每一个测试 test 函数是一个测试 case， 测试 Case 的第一个参数是测试内容"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"比如：【add(1,2) === 3】"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"使用 expect（运行结果）.toBe（期望结果）的形式编写断言。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"如果断言正确就代表测试通过 ，如果错误代表不通过。"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"执行 jest 命令运行测试。 Jest 会自动运行本软件包下的所有测试用例。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-bash",children:"(base) ➜ \xa0my-npm jest\n PASS \xa0src/__tests__/add.spec.js\n \xa0测试Add函数\n \xa0 \xa0✓ add(1,2) === 3 (1 ms)\n \xa0 \xa0✓ add(1,1) === 2\n​\nTest Suites: 1 passed, 1 total\nTests: \xa0 \xa0 \xa0 2 passed, 2 total\nSnapshots: \xa0 0 total\nTime: \xa0 \xa0 \xa0 \xa00.325 s\nRan all test suites.\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"用-mock-模拟无法执行的函数",children:["用 Mock 模拟无法执行的函数",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#用-mock-模拟无法执行的函数",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"如果被测试的代码，调用了一个网络请求 API ，比如 axios，但是那个网络地址并不存在或者没有联网，这个时候应该如何测试呢？"}),"\n",(0,d.jsx)(n.p,{children:"fetch.js"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"const axios = require('axios')\nexports.getData = () => axios.get('/abc/bcd')\n"})}),"\n",(0,d.jsx)(n.p,{children:"答案是应该模拟一个 axios 对象结果进行测试。这本身也符合单元测试的原则。"}),"\n",(0,d.jsx)(n.p,{children:"单元测试是针对开发的最小单位展开的测试，通常是函数。遇到函数调用函数的情况，比如 A 函数调用 B 函数，测试的主体是 A 函数，B 函数应该与测试无关，应该孤立 B 函数来测试 A 函数。"}),"\n",(0,d.jsx)(n.p,{children:"对于上面的 getData 函数来讲，调用了 axios.get 函数，应该模拟一个 axios.get 函数来替换掉原有的axios.get 函数。模拟的 axios.get 函数不会调用网络请求，只具有根据输入返回相应结果的功能。这个就是Mock函数。"}),"\n",(0,d.jsx)(n.p,{children:"单元测试的任务是验证 getData 函数的功能是否正确，而不是axios.get 函数或者网络接口是否正确。"}),"\n",(0,d.jsx)(n.p,{children:"接下来我们实际操作一下。"}),"\n",(0,d.jsx)(n.p,{children:"首先使用 jest.mock创建一个 axios 的 mock 对象。实际上就是创建了一个虚拟的 axios 函数替换原函数。然后通过 mockResolvedValue 定义调用 axios.get 函数的返回值。这个时候再调用getData() 方法的时候 ，函数内部的 axios.get 是虚拟 mock 函数。调用时不会发生真正的网络请求，只会返回预定的结果。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:'// __tests__/fetch.spec.js\nconst { getData } = require("../fetch");\nconst axios = require("axios");\njest.mock("axios");\nit("fetch", async () => {\n \xa0// 模拟第一次接收到的数据\n \xa0axios.get.mockResolvedValueOnce("123");\n \xa0// 模拟每一次接收到的数据\n \xa0axios.get.mockResolvedValue("456");\n​\n \xa0const data1 = await getData();\n \xa0const data2 = await getData();\n \xa0expect(data1).toBe("123");\n \xa0expect(data2).toBe("456");\n});\n'})}),"\n",(0,d.jsx)(n.p,{children:"Mock 还有很其他用法比如："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"jest.fn()"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"jest.fn()"}),"是创建Mock函数最简单的方式，如果没有定义函数内部的实现，",(0,d.jsx)(n.code,{children:"jest.fn()"}),"会返回",(0,d.jsx)(n.code,{children:"undefined"}),"作为返回值。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"test('测试jest.fn()调用', () => {\n \xa0let mockFn = jest.fn();\n \xa0let result = mockFn(1, 2, 3);\n​\n \xa0// 断言mockFn的执行后返回undefined\n \xa0expect(result).toBeUndefined();\n \xa0// 断言mockFn被调用\n \xa0expect(mockFn).toBeCalled();\n \xa0// 断言mockFn被调用了一次\n \xa0expect(mockFn).toBeCalledTimes(1);\n \xa0// 断言mockFn传入的参数为1, 2, 3\n \xa0expect(mockFn).toHaveBeenCalledWith(1, 2, 3);\n})\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"jest.spyOn()"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"jest.spyOn()"}),"方法同样创建一个 mock 函数，但是该 mock 函数不仅能够捕获函数的调用情况，还可以正常执行被 spy 的函数。"]}),"\n",(0,d.jsxs)(n.p,{children:["实际上，",(0,d.jsx)(n.code,{children:"jest.spyOn()"}),"是",(0,d.jsx)(n.code,{children:"jest.fn()"}),"的语法糖，它创建了一个和被 spy 的函数具有相同内部代码的 mock 函数。"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:i,alt:"img"})}),"\n",(0,d.jsxs)(n.p,{children:["上图是之前",(0,d.jsx)(n.code,{children:"jest.mock()"}),"示例代码中的正确执行结果的截图，从 shell 脚本中可以看到",(0,d.jsx)(n.code,{children:"console.log('fetchPostsList be called!');"}),"这行代码并没有在 shell 中被打印，这是因为通过",(0,d.jsx)(n.code,{children:"jest.mock()"}),"后，模块内的方法是不会被 jest 所实际执行的。这时我们就需要使用",(0,d.jsx)(n.code,{children:"jest.spyOn()"}),"。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"// functions.test.js\nimport events from '../src/events';\nimport fetch from '../src/fetch';\ntest('使用jest.spyOn()监控fetch.fetchPostsList被正常调用', async() => {\n \xa0expect.assertions(2);\n \xa0const spyFn = jest.spyOn(fetch, 'fetchPostsList');\n \xa0await events.getPostList();\n \xa0expect(spyFn).toHaveBeenCalled();\n \xa0expect(spyFn).toHaveBeenCalledTimes(1);\n})\n"})}),"\n",(0,d.jsxs)(n.p,{children:["执行",(0,d.jsx)(n.code,{children:"npm run test"}),"后，可以看到 shell 中的打印信息，说明通过",(0,d.jsx)(n.code,{children:"jest.spyOn()"}),"，",(0,d.jsx)(n.code,{children:"fetchPostsList"}),"被正常的执行了。"]}),"\n",(0,d.jsx)(n.p,{children:"Mock 函数的作用，就是为了有效孤立函数，实现真正的单元测试。"}),"\n",(0,d.jsxs)(n.h3,{id:"测试前端页面",children:["测试前端页面",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#测试前端页面",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"上面讲的都是测试一个纯 JS 函数，下面讲讲如何测试前端程序。"}),"\n",(0,d.jsx)(n.p,{children:"前端程序和纯 JS 的区别在于运行时不同。前端程序运行于浏览器端，会直接调用 Dom 对象。但是 Node 中并没有 Dom 模型。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["解决的办法有两个 ：","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"将测试用例放到浏览器中运行；"}),"\n",(0,d.jsx)(n.li,{children:"用 dom 仿真模拟一个 dom 对象。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"最佳的选择是后者，因为你的测试程序会放到不同的环境中执行，你不可能要求 CI 服务器中也有浏览器。而且放入浏览器再执行，效率也是一个大问题。"}),"\n",(0,d.jsx)(n.p,{children:"模拟一个 dom 对象需要用到 dom 仿真，常见的有 jsdom、happydom等。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-bash",children:"pnpm i jsdom -D\n"})}),"\n",(0,d.jsx)(n.p,{children:"在 jest 中引入 jsdom ，需要编写一个 jsdom-config.js 文件。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"// jsdom-config.js\nconst jsdom = require('jsdom') // eslint-disable-line\nconst { JSDOM } = jsdom\n\nconst dom = new JSDOM('<!DOCTYPE html><head/><body></body>', {\n \xa0url: 'http://localhost/',\n \xa0referrer: 'https://example.com/',\n \xa0contentType: 'text/html',\n \xa0userAgent: 'Mellblomenator/9000',\n \xa0includeNodeLocations: true,\n \xa0storageQuota: 10000000,\n})\nglobal.window = dom.window\nglobal.document = window.document\nglobal.navigator = window.navigator\n"})}),"\n",(0,d.jsx)(n.p,{children:"编写一个被测试函数，函数中创建一个 div 元素。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:'// dom.js\nexports.generateDiv = () => {\n \xa0const div = document.createElement("div");\n \xa0div.className = "c1";\n \xa0document.body.appendChild(div);\n};\n'})}),"\n",(0,d.jsx)(n.p,{children:"在测试程序中，被测试函数创建了一个 div 元素，接着就可以在 dom 仿真中获取 div 元素了。也可以用断言来判断代码功能是否正常。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"// dom.test.js\nconst { generateDiv } = require('../dom') \nrequire('../jsdom-config')\ndescribe('Dom测试', () => {\n \xa0 \xa0\n \xa0  test('测试dom操作', () => {\n \xa0 \xa0 \xa0  generateDiv()\n \xa0 \xa0 \xa0  expect(document.getElementsByClassName('c1').length).toBe(1)\n \xa0  })\n})\n"})}),"\n",(0,d.jsx)(n.p,{children:"这个就是 dom 测试。前端常用的 Vue 、React 程序也都可以使用这样的方法进行测试。"}),"\n",(0,d.jsxs)(n.h2,{id:"复盘",children:["复盘",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#复盘",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"这节课主要讲了单元测试的基础知识。组件库测试是单元测试的一个应用场景，了解单元测试的基础内容才能顺利的完成组件库的测试。本章节包含了单元测试的所有的基础概念比如断言、分组、Mock等内容，最后还介绍了前端单元测试的必备条件 Dom 仿真测试。"}),"\n",(0,d.jsx)(n.p,{children:"最后留一些思考题帮助大家复习，也欢迎在留言区讨论。"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"断言、分组都是什么？"}),"\n"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Mock 函数的使用场景是什么？"}),"\n"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"如何使用 DOM 仿真进行前端测试？"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"下节课，我们将给大家讲解如何给组件库实施单元测试，下节课见。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(r,{...e})}):r(e)}let a=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Vite%20%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98%2F5.%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95(%E4%B8%80)%EF%BC%9A%20%E4%BD%BF%E7%94%A8Jest%E8%BF%9B%E8%A1%8C%E5%89%8D%E7%AB%AF%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md"]={toc:[{text:"用户故事(UserStory)",id:"用户故事userstory",depth:2},{text:"任务分解(Task)",id:"任务分解task",depth:2},{text:"任务实现",id:"任务实现",depth:2},{text:"测试JS函数",id:"测试js函数",depth:3},{text:"用 Mock 模拟无法执行的函数",id:"用-mock-模拟无法执行的函数",depth:3},{text:"测试前端页面",id:"测试前端页面",depth:3},{text:"复盘",id:"复盘",depth:2}],title:"5.单元测试(一)： 使用Jest进行前端单元测试",headingTitle:"5.单元测试(一)： 使用Jest进行前端单元测试",frontmatter:{}}}}]);