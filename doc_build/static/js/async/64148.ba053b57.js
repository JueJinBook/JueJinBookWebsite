"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["64148"],{273143:function(n,e,a){a.r(e),a.d(e,{default:()=>j});var t=a(552676),s=a(740453);let i=a.p+"static/image/bcd01392f8fa6ffbe9620664d89eedb8.faab2791.webp",r=a.p+"static/image/c865d5d2d0e1394be8456046c98f6a1a.31900b54.webp",o=a.p+"static/image/594fa3430c22e7cc58493447cd80dc6b.68416655.webp",c=a.p+"static/image/186c7c7b67c8c6aeae89ce28b680b549.3a2216f4.webp",d=a.p+"static/image/a64d4d0a61ff42b08a8426ce6d91de6f.6e1e87af.webp",m=a.p+"static/image/6d7d8778b4bb800326fc5bfcec9a3dc0.d6bd4534.webp",l=a.p+"static/image/2682030fedd313dac1be62ac873bddc6.9cd521de.webp",p=a.p+"static/image/7465429f30afc5160c7f58f0841e0e57.1fa89e63.webp",h=a.p+"static/image/13c92833319d2e1ebda8f0aa8c8cabe1.36feed42.webp";function f(n){let e=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",img:"img",h2:"h2",em:"em",ul:"ul",li:"li",pre:"pre",code:"code",strong:"strong"},(0,s.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"11animation_-复杂帧动画的逐帧调试--实现",children:["11.Animation_ 复杂帧动画的逐帧调试 & 实现",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#11animation_-复杂帧动画的逐帧调试--实现",children:"#"})]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["仓库地址：",(0,t.jsx)(e.a,{href:"https://github.com/czm1290433700/nextjs-demo",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/czm1290433700/nextjs-demo"})]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"在 C 端的官网页面中，我们常常可以看到一些花哨的动画。好的动画可以给网页增色很多，给用户身临其境的体验，在技术成本允许的情况，适当在网页中加一下动画可以在页面加载或是交互的时候分散用户注意力并取悦用户。不仅如此，动画还可以用来提供独特的体验，甚至可以突出品牌的趣味性。"}),"\n",(0,t.jsxs)(e.p,{children:["比如",(0,t.jsx)(e.a,{href:"https://www.bytedance.com/zh/",target:"_blank",rel:"noopener noreferrer",children:"字节官网"}),"，首页有一些类似重力感应的球体动画。"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)("img",{src:h,alt:"字节跳动 - Google Chrome 2022-08-13 18-45-27.gif"}),"\n又比如抖音前端技术团队官网，首屏也有一组复杂的首页加载动画。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:p,alt:"抖音前端技术团队官网 - Google Chrome 2022-08-13 18-49-33.gif"})}),"\n",(0,t.jsx)(e.p,{children:"可以说，一个 C 端开发者，熟悉动画的实现方式，并且具备逐帧调试的能力是很重要的。对于一些简单的动画大家应该都比较熟悉，但是对于需要逐帧去绘制的组合动画，应该怎么实现呢？"}),"\n",(0,t.jsxs)(e.h2,{id:"动画的基础知识",children:["动画的基础知识",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#动画的基础知识",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"首先我们先了解一下什么是帧动画呢？"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"定格动画，又名逐帧动画，是一种动画技术，其原理即将每帧不同的图像连续播放，从而产生动画效果。"})}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"简单来说，就是每帧下会有不同的状态和图像，从而组合在一起的复杂动画场景。对于 2D 的 Web 动画场景，我们常用四种方式来绘制动画："}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"CSS Transtion：transition 只有起始状态和终点状态的概念，往往只能针对具体 dom 区域的相关属性变化进行简单动画场景绘制，不适用于帧动画场景。"}),"\n"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"CSS Animation：可以是多个状态，具备很强的灵活性，同时引入了帧的概念，并且支持主动触发，常用于复杂帧动画的绘制。"}),"\n"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"JavaScript：可以覆盖任何场景，但是绘制成本较大，针对较复杂场景，需要频繁操作 dom，同时会受到其他线程代码的影响，导致动画缺帧，建议只在动画极其复杂且高度定制、css 实现很困难的情况下才考虑这种方案。"}),"\n"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Canvas：成本较高，且绘制内容的绑定事件都需要自己处理，加上因为依赖像素，当画布较大的时候，动画效果不佳。"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["所以我们这里使用 Animation 动画来实现帧动画，如果不熟悉它基本属性和能力的同学，建议阅读 ",(0,t.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations",target:"_blank",rel:"noopener noreferrer",children:"MDN 相应的官方文档"})," 来熟悉。因为比较基础，加上官方文档的内容相对更全面且具备实时性，我们这里就不重复搬运讲解基础概念和属性了，下面我们直接就实际的例子来实战讲解整个帧动画的开发过程。"]}),"\n",(0,t.jsxs)(e.h2,{id:"实现一个帧动画的-demo",children:["实现一个帧动画的 Demo",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现一个帧动画的-demo",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["我们以 ",(0,t.jsx)(e.a,{href:"https://douyinfe.com/",target:"_blank",rel:"noopener noreferrer",children:"抖音前端技术团队官网"})," 的首页加载动画为例，看看这个动画下究竟发生了什么？首先我们打开 控制台的 network，使用 performance 来录制首页加载的过程，为了能更清晰查看，我们适当降低 CPU 的性能，调整为 4 x slowdown。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,t.jsx)(e.p,{children:"我们点击控制台左上角的⚪，然后刷新页面，可以得到下面的逐帧列表："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,t.jsx)(e.p,{children:"从下面的加载图中我们可以判断出。这个动画总的执行时长为 1.36 s，然后上面的列表中有具体页面加载过程的帧动画变化图，通过按帧查看，咱们可以大概看出这个动画的执行顺序是这样的。"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,t.jsx)(e.p,{children:"按照从小序列到大序列的顺序，每个元素分别执行了从下往上的平移操作，以及一个透明度从 0 到 1 的过程，加上我们上面看到每个动画的时长分析都是 1.3s，所以只是对每个元素推迟了不同的动画平移时间，但是它们享有相同的动画时长，针对这个场景我们应该怎么去实现呢？"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,t.jsx)(e.p,{children:"针对现在的首页，我们也可以把 dom 元素简单拆分为 8 个区域，我们可以把总动画时长定成 1s，其中 1s 的时间可以分为 9个时间帧，每个区域从对应序列的时间帧开始执行相同的动画效果，最后把所有的帧连起来就是一个完整的帧动画，大致时间帧变化类似下图。"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,t.jsx)(e.p,{children:"这样通过延迟执行的方式，我们就可以得到一种每个区域逐步滑入的视觉感知效果，现在我们开始着手实现，首先我们改造一下首页 Dom 的类，专门定义一个动画类来存放动画相关的样式，避免对基础样式造成污染。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:'// ./pages/index.tsx\nimport type { NextPage } from "next";\nimport styles from "./index.module.scss";\nimport cName from "classnames";\n// ...\n\nconst Home: NextPage<IProps> = ({ title, description, list }) => {\n  return (\n    <div className={styles.container}>\n      <main\n        className={cName([styles.main, styles.withAnimation])}\n        ref={mainRef}\n      >\n        <h1 className={styles.title}>{title}</h1>\n\n        <p className={styles.description}>{description}</p>\n\n        <div className={styles.grid}>\n          {list?.map((item, index) => {\n            return (\n              <div\n                key={index}\n                className={styles.card}\n                onClick={(): void => {\n                  window.open(\n                    item.link,\n                    "blank",\n                    "noopener=yes,noreferrer=yes"\n                  );\n                }}\n              >\n                <h2>{item.label} &rarr;</h2>\n                <p>{item.info}</p>\n              </div>\n            );\n          })}\n        </div>\n      </main>\n    </div>\n  );\n};\n// ...\n\nexport default Home;\n'})}),"\n",(0,t.jsx)(e.p,{children:"然后我们开始定义对应的样式进行绑定，我们以 fadeInDown1 举例，@keyframes 指向动画的逐帧状态，其中 0% 和 11 % 大家可以看到都是一样的内容，这时候区域处于 y 轴 40px 的位置，然后末尾状态是无区域状态和 1 透明度，这个动画的效果会使得动画从整体时间的 11% 开始执行，到 100 % 完成最终的变化。"}),"\n",(0,t.jsx)(e.p,{children:"这个11% 是从哪里来的呢？上面我们提到，我们为每个动画延迟一个帧频率执行，8 个区域，共 9 帧，所以 1 帧的占比为 11% 的总动画时长，参考下面的动画，每个动画的起始时间（第二个状态值）都比上一个高出 1 帧的比例，这样就可以将整体帧动画串联起来了。"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"// ./pages/index.module.scss\n// ...\n\n.withAnimation {\n  .title {\n    animation: fadeInDown1 1s;\n  }\n\n  .description {\n    animation: fadeInDown2 1s;\n  }\n\n  .card:nth-of-type(1) {\n    animation: fadeInDown3 1s;\n  }\n\n  .card:nth-of-type(2) {\n    animation: fadeInDown4 1s;\n  }\n\n  .card:nth-of-type(3) {\n    animation: fadeInDown5 1s;\n  }\n\n  .card:nth-of-type(4) {\n    animation: fadeInDown6 1s;\n  }\n\n  .card:nth-of-type(5) {\n    animation: fadeInDown7 1s;\n  }\n\n  .card:nth-of-type(6) {\n    animation: fadeInDown8 1s;\n  }\n}\n\n// ..\n\n@keyframes fadeInDown1 {\n  0% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  11% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes fadeInDown2 {\n  0% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  22% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes fadeInDown3 {\n  0% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  33% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes fadeInDown4 {\n  0% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  44% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes fadeInDown5 {\n  0% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  55% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes fadeInDown6 {\n  0% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  66% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes fadeInDown7 {\n  0% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  77% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n\n@keyframes fadeInDown8 {\n  0% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  88% {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n    opacity: 1;\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["然后我们查看一下效果，可以看到动画效果已经实现了，其他类型的帧动画也是采用类似的做法，",(0,t.jsx)(e.strong,{children:"将帧动画按帧数区分，每一帧下需要哪些区域进行操作，它们当时帧数下的状态又是怎样的"}),"。确定好这个，我们只需要对每个区域，编写它们下面对应每一帧的样式，就可以实现我们预期的帧动画效果了。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:r,alt:"cdbee301-0ca4-418e-b1b4-8e79550856cd.gif"})}),"\n",(0,t.jsxs)(e.h2,{id:"怎么主动触发动画重新播放",children:["怎么主动触发动画重新播放？",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#怎么主动触发动画重新播放",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["那么如果我们需要主动触发这个动画效果应该怎么办呢，比如在切换主题的时候，我们希望能再执行一次加载动画，我们可以通过",(0,t.jsx)(e.code,{children:"requestAnimationFrame"}),"来实现，它会返回一个回调，强制浏览器在重绘前调用指定的函数来进行动画的更新，我们使用这个来改造一下首页，加一个 useEffect 的钩子。"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:'// ./pages/index.tsx\nimport type { NextPage } from "next";\nimport styles from "./index.module.scss";\nimport cName from "classnames";\nimport { useContext, useEffect, useRef, useState } from "react";\nimport { ThemeContext } from "@/stores/theme";\n\n// ...\n\nconst Home: NextPage<IProps> = ({ title, description, list }) => {\n  const mainRef = useRef<HTMLDivElement>(null);\n  const { theme } = useContext(ThemeContext);\n\n  useEffect(() => {\n    mainRef.current?.classList.remove(styles.withAnimation);\n    window.requestAnimationFrame(() => {\n      mainRef.current?.classList.add(styles.withAnimation);\n    });\n  }, [theme]);\n\n  return (\n    <div className={styles.container}>\n      <main\n        className={cName([styles.main, styles.withAnimation])}\n        ref={mainRef}\n      >\n        <h1 className={styles.title}>{title}</h1>\n\n        <p className={styles.description}>{description}</p>\n\n        <div className={styles.grid}>\n          {list?.map((item, index) => {\n            return (\n              <div\n                key={index}\n                className={styles.card}\n                onClick={(): void => {\n                  window.open(\n                    item.link,\n                    "blank",\n                    "noopener=yes,noreferrer=yes"\n                  );\n                }}\n              >\n                <h2>{item.label} &rarr;</h2>\n                <p>{item.info}</p>\n              </div>\n            );\n          })}\n        </div>\n      </main>\n    </div>\n  );\n};\n\n// ...\n\nexport default Home;\n'})}),"\n",(0,t.jsxs)(e.p,{children:["在每次 theme 发生变化的时候，主动移除对应的动画类，再通过",(0,t.jsx)(e.code,{children:"requestAnimationFrame"}),"对动画类进重新绑定，达到主动触发动画刷新的效果，现在我们来看一下最终成品。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:i,alt:"ceaf0b3e-b13b-4988-b309-e227481d0214.gif"})}),"\n",(0,t.jsxs)(e.h2,{id:"小结",children:["小结",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"这节课我们学习了怎么去实现一个相对复杂的帧动画，并尝试去使用 performance 去慢放分析一个帧动画的细节进行还原，从成本、实现效果多方面考虑，我们通常会采用 CSS Animation 的方式去实现相对复杂的帧动画，实现的关键在于分析出每帧的变化，根据区域去逐帧绘制，然后将所有的帧连起来，就可以实现一个完整的帧动画。"}),"\n",(0,t.jsxs)(e.p,{children:["通常帧动画都会有重复绘制的需求，针对这类场景，我们可以使用",(0,t.jsx)(e.code,{children:"requestAnimationFrame"}),"调起浏览器去执行我们预期的回调，将对应的动画类进行移除和重复添加，这样就可以在重绘的过程中再次执行一次我们的动画效果。"]}),"\n",(0,t.jsx)(e.p,{children:"到这里我们官网的内容其实已经比较充实了，但是现在，我们只针对 16 英寸进行了样式适配，如果通过手机和 ipad 端访问，部分样式可能存在问题，下一节课，我会以首页作为案例，详细给大家介绍怎么全面覆盖主流多媒体设备。"})]})}function x(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(f,{...n})}):f(n)}let j=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["SSR%20%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AE%98%E7%BD%91%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F11.Animation_%20%E5%A4%8D%E6%9D%82%E5%B8%A7%E5%8A%A8%E7%94%BB%E7%9A%84%E9%80%90%E5%B8%A7%E8%B0%83%E8%AF%95%20%26%20%E5%AE%9E%E7%8E%B0.md"]={toc:[{text:"动画的基础知识",id:"动画的基础知识",depth:2},{text:"实现一个帧动画的 Demo",id:"实现一个帧动画的-demo",depth:2},{text:"怎么主动触发动画重新播放？",id:"怎么主动触发动画重新播放",depth:2},{text:"小结",id:"小结",depth:2}],title:"11.Animation_ 复杂帧动画的逐帧调试 & 实现",headingTitle:"11.Animation_ 复杂帧动画的逐帧调试 & 实现",frontmatter:{}}}}]);