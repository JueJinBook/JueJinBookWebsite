"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["52682"],{505456:function(n,e,s){s.r(e),s.d(e,{default:()=>l});var t=s(552676),r=s(740453);function i(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h3:"h3",pre:"pre",img:"img",strong:"strong",blockquote:"blockquote",hr:"hr"},(0,r.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"12实战篇-03在-git-hooks-中运行-npm-script",children:["12实战篇 03：在 git hooks 中运行 npm script",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#12实战篇-03在-git-hooks-中运行-npm-script",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["严肃的研发团队都会使用 Git 之类的版本管理系统来管理代码，随着 GitHub 的广受欢迎，相信大家对 Git 并不陌生。Git 在代码版本管理之外，也提供了类似 npm script 里 ",(0,t.jsx)(e.code,{children:"pre"}),"、",(0,t.jsx)(e.code,{children:"post"})," 的钩子机制，叫做 ",(0,t.jsx)(e.a,{href:"https://git-scm.com/book/gr/v2/Customizing-Git-Git-Hooks",target:"_blank",rel:"noopener noreferrer",children:"Git Hooks"}),"，钩子机制能让我们在代码 commit、push 之前（后）做自己想做的事情。"]}),"\n",(0,t.jsxs)(e.p,{children:["Git Hooks 能给我们的开发工作流带来哪些可能呢？我带的团队中，大部分项目通过 npm script 为本地仓库配置了 pre-commit、pre-push 钩子检查，且正计划为远程仓库（",(0,t.jsx)(e.a,{href:"https://git-scm.com/book/en/v1/Git-Basics-Working-with-Remotes",target:"_blank",rel:"noopener noreferrer",children:"Remotes"}),"）配置 pre-receive 钩子检查。两种钩子的检查目的各不相同，本地检查是为了尽早给提交代码的同学反馈，哪些地方不符合规范，哪些地方需要注意；而远程检查是为了确保远程仓库收到的代码是符合团队约定的规范的，因为如果没有远程检查环节，熟悉 Git 的同学使用 ",(0,t.jsx)(e.code,{children:"--no-verify"}),"（简写为 ",(0,t.jsx)(e.code,{children:"-n"}),"） 参数跳过本地检查时，本地检查就形同虚设。"]}),"\n",(0,t.jsx)(e.p,{children:"可能有同学会嘀咕，在 IDE 里面配置各种检查难道还不够么？对个人开发者来说足够了，但对于团队，如果对代码里面的坏味道听之任之，久而久之整个团队的代码质量标准都会被拉低，到最后坑的还是团队的每个成员，不是么？之前没想到这层的同学建议去看看破窗理论。"}),"\n",(0,t.jsx)(e.p,{children:"那么增加 Git Hooks 的必要性聊清楚了，我们应该在 Git Hooks 里面做哪些事情呢？通常来说：检查编码规范，把低级错误趁早挖出来修好；运行测试，用自动化的方法做功能回归，测试本身就包含很多话题，且按下不表。"}),"\n",(0,t.jsxs)(e.p,{children:["前端社区里有多种结合 npm script 和 git-hooks 的方案，比如 ",(0,t.jsx)(e.a,{href:"https://github.com/observing/pre-commit",target:"_blank",rel:"noopener noreferrer",children:"pre-commit"}),"、",(0,t.jsx)(e.a,{href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer",children:"husky"}),"，相比较而言 husky 更好用，它支持更多的 Git Hooks 种类，再结合 ",(0,t.jsx)(e.a,{href:"https://github.com/okonet/lint-staged",target:"_blank",rel:"noopener noreferrer",children:"lint-staged"})," 试用就更溜。"]}),"\n",(0,t.jsx)(e.p,{children:"接下来我们逐步给示例项目配置本地的 Git Hooks，而在钩子中运行的是已有的 npm script，比如 lint、test："}),"\n",(0,t.jsxs)(e.h3,{id:"1-安装项目依赖",children:["1. 安装项目依赖",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-安装项目依赖",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"使用如下命令安装 husky、lint-staged 到项目依赖中："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"npm i husky lint-staged -D\n# npm install husky lint-staged --save-dev\n# yarn add husky lint-staged -D\n"})}),"\n",(0,t.jsxs)(e.p,{children:["husky 的基本工作原理可以稍作解释下，翻看 husky 的 ",(0,t.jsx)(e.a,{href:"https://github.com/typicode/husky/blob/master/package.json",target:"_blank",rel:"noopener noreferrer",children:"package.json"}),"，注意其中的 scripts 声明："]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'  "scripts": {\n    "test": "jest",\n    "format": "prettier --single-quote --no-semi --write **/*.js",\n    "install": "node ./bin/install.js",\n    "uninstall": "node ./bin/uninstall.js"\n  },\n'})}),"\n",(0,t.jsx)(e.p,{children:"这里面的 install 就是你在项目中安装 husky 时执行的脚本（所有的魔法都藏在在这里了，哈哈）。"}),"\n",(0,t.jsxs)(e.p,{children:["然后再检查我们仓库的 ",(0,t.jsx)(e.code,{children:".git/hooks"})," 目录，会发现里面的钩子都被 husky 替换掉了，注意下图中三个红色框中的内容："]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2017/12/14/16052956cce1a5c3?w=905&h=519&f=png&s=93983",alt:""})}),"\n",(0,t.jsxs)(e.h3,{id:"2-添加-npm-script",children:["2. 添加 npm script",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-添加-npm-script",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"接下来需要在 scripts 对象中增加 husky 能识别的 Git Hooks 脚本："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-patch",children:'   "scripts": {\n+    "precommit": "npm run lint",\n+    "prepush": "npm run test",\n     "lint": "npm-run-all --parallel lint:*",\n     "lint:js": "eslint *.js",\n'})}),"\n",(0,t.jsxs)(e.p,{children:["这两个命令的作用是在代码提交前运行所有的代码检查 npm run lint；在代码 push 到远程之前，运行 lint 和自动化测试（",(0,t.jsx)(e.strong,{children:"言外之意，如果测试失败，push 就不会成功"}),"），虽然运行的是 npm run test，但是 lint 也配置在了 pretest 里面。"]}),"\n",(0,t.jsxs)(e.p,{children:["然后尝试提交代码：",(0,t.jsx)(e.code,{children:"git commit -am 'add husky hooks'"}),"，能看到 pre-commit 钩子已经生效："]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2017/12/14/16052959456b87ca?w=586&h=110&f=png&s=22843",alt:""})}),"\n",(0,t.jsxs)(e.h3,{id:"3-用-lint-staged-改进-pre-commit",children:["3. 用 lint-staged 改进 pre-commit",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-用-lint-staged-改进-pre-commit",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"如上的配置乍看起来没有任何问题，但是在大型项目、遗留项目中接入过 lint 工作流的同学可能深有体会，每次提交代码会检查所有的代码，可能比较慢就不说了，接入初期 lint 工具可能会报告几百上千个错误，这时候估计大多数人内心是崩溃的，尤其是当你是新规范的推进者，遇到的阻力会增大好几倍，毕竟大多数人不愿意背别人的锅，坏笑。"}),"\n",(0,t.jsx)(e.p,{children:"好在，我们有 lint-staged 来环节这个问题，每个团队成员提交的时候，只检查当次改动的文件，具体改动如下："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-patch",children:'   "scripts": {\n-    "precommit": "npm run lint",\n+    "precommit": "lint-staged",\n     "prepush": "npm run test",\n     "lint": "npm-run-all --parallel lint:*",\n   },\n+  "lint-staged": {\n+    "*.js": "eslint",\n+    "*.less": "stylelint",\n+    "*.css": "stylelint",\n+    "*.json": "jsonlint --quiet",\n+    "*.md": "markdownlint --config .markdownlint.json"\n+  },\n   "keywords": [],\n'})}),"\n",(0,t.jsx)(e.p,{children:"接下来我们故意在 index.js 中引入错误："}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-patch",children:"-  return NaN;\n+  return NaN\n"})}),"\n",(0,t.jsxs)(e.p,{children:["然后尝试提交这个文件：",(0,t.jsx)(e.code,{children:"git commit -m 'try to add eslint error' index.js"}),"，结果如下图："]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2017/12/14/1605295bb21f26aa?w=733&h=503&f=png&s=90551",alt:""})}),"\n",(0,t.jsxs)(e.p,{children:["上图中带有 ",(0,t.jsx)(e.code,{children:"Running Tasks"})," 字样的列表就是 lint-staged 根据当前要提交的文件和 package.json 中配置的检查命令去执行的动态输出。红色框里面提示 husky 的 pre-commit 钩子执行失败，提交也就没有成功。"]}),"\n",(0,t.jsx)(e.p,{children:"关于 lint-staged 还有些高级的用法，比如对单个文件执行多条命令，对单个文件动态自动修复，自动格式化等等，留待大家自己去探索好了。"}),"\n",(0,t.jsx)(e.p,{children:"撤销掉有错误的修改，提交之后，我们往远程 push 新分支，结果如下图："}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2017/12/14/16052e6c6cba85ff?w=867&h=460&f=png&s=160857",alt:""})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["读过我其他文章的同学可能已经想到，本小节的内容部分和我早期的文章",(0,t.jsx)(e.a,{href:"https://juejin.im/post/592615580ce463006bf19aa0",target:"_blank",rel:"noopener noreferrer",children:"《用 husky 和 lint-staged 构建超溜的代码检查工作流》"}),"有部分内容是重叠的。"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["本节用到的代码见 ",(0,t.jsx)(e.a,{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/11-run-npm-script-in-git-hooks",target:"_blank",rel:"noopener noreferrer",children:"GitHub"}),"，想边看边动手练习的同学可以拉下来自己改（",(0,t.jsx)(e.strong,{children:"记得安装 npm 依赖之后再运行脚本"}),"），注意切换到正确的分支 ",(0,t.jsx)(e.code,{children:"11-run-npm-script-in-git-hooks"}),"。"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{})]})}function c(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(i,{...n})}):i(n)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["%E7%94%A8%20npm%20script%20%E6%89%93%E9%80%A0%E8%B6%85%E6%BA%9C%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%2F12%E5%AE%9E%E6%88%98%E7%AF%87%2003%EF%BC%9A%E5%9C%A8%20git%20hooks%20%E4%B8%AD%E8%BF%90%E8%A1%8C%20npm%20script.md"]={toc:[{text:"1. 安装项目依赖",id:"1-安装项目依赖",depth:3},{text:"2. 添加 npm script",id:"2-添加-npm-script",depth:3},{text:"3. 用 lint-staged 改进 pre-commit",id:"3-用-lint-staged-改进-pre-commit",depth:3}],title:"12实战篇 03：在 git hooks 中运行 npm script",headingTitle:"12实战篇 03：在 git hooks 中运行 npm script",frontmatter:{}}}}]);