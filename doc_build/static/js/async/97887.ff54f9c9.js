"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["97887"],{926308:function(e,n,t){e.exports=t.p+"static/image/2838042fbcdaa8ed79443d2fe33853b4.f43013b2.webp"},785965:function(e,n,t){e.exports=t.p+"static/image/525136bc8fb00f0d2e634b1d349094c8.eec423f7.webp"},928889:function(e,n,t){e.exports=t.p+"static/image/83e1341810c7235012cc2063f95da9d9.c61e9b78.webp"},345396:function(e,n,t){e.exports=t.p+"static/image/9281a95f17590da8f9f7711677bdb12c.47a83ba0.webp"},284954:function(e,n,t){e.exports=t.p+"static/image/a084ce06fd2a02cd1913a06e56069c3c.a6e71abb.webp"},979509:function(e,n,t){e.exports=t.p+"static/image/b9d1cc0a9a1f796bc584276e01e8d63e.b46ee461.webp"},800207:function(e,n,t){t.r(n),t.d(n,{default:()=>en});var r=t(552676),s=t(740453);let i=t.p+"static/image/bcef7bd6dcade53a280d59e2692fe44a.dc55fc47.webp",a=t.p+"static/image/354aa3c8a83a4f0bb994bca1264b75d9.d513102a.gif",c=t.p+"static/image/29bb6a4f21bfd32a2720ef1f2a46808a.1e18e085.webp",o=t.p+"static/image/78b9cb2a1a8e61222d20e8c0e19dc28e.018c4ee6.webp",d=t.p+"static/image/f9ffa5d49be5ac72f2cebd2b347a866d.3dfc7fe6.webp",l=t.p+"static/image/242249f5e362461f70254cb97521e105.1ab3f363.webp",p=t.p+"static/image/c5808622721d8865aca1cda1d39fa899.09e98566.webp",m=t.p+"static/image/acb94bc9a76b514a56326725e4a1c93c.56d2e85a.webp",h=t.p+"static/image/bbc9486f0c5c5e94daeb7b02f5bfafb6.70563cdd.webp",j=t.p+"static/image/5ed877e4fd63cfd101754287283fd115.6ade86ce.webp",x=t.p+"static/image/1ddaabc97a658700a6a6c95a77771a37.806edba8.webp",g=t.p+"static/image/155014a75ef6326eab15b7d921f95a90.895ea545.webp",u=t.p+"static/image/5757199eb2fa7113aa20ed12bf139de4.37a472cc.webp",b=t.p+"static/image/720bf577964ac812958f2b86b889e75c.814e1640.gif",f=t.p+"static/image/021d715ec6545ae922a2bebc3d7d1a86.d7f2158e.webp",v=t.p+"static/image/0121bb9d3b69fd7a111e2eed8ad14731.8a89ddab.webp",I=t.p+"static/image/2970e62fb180bbfdbf34f9c4e6f391b6.c1538dec.webp",y=t.p+"static/image/929e5fdfc65ab6efb643e56d78a2b0d4.4480004f.webp",T=t.p+"static/image/b4ce289aaef1566afd589186721e745f.b98e97f1.webp",A=t.p+"static/image/7bb42ba30c8046811472728164c9fea3.23061d48.webp",w=t.p+"static/image/a9c54648bdcae97e421a1836152b8156.fd91953e.webp",S=t.p+"static/image/24d58200945c0baf28d58a2e8da96217.2e6f1fa7.webp",L=t.p+"static/image/7535529c46db5a318487cddee865af31.b8e36eb2.webp",q=t.p+"static/image/aba41fc9ce72b68ccc350183f9df3ead.0fb7a821.webp",P=t.p+"static/image/91060cda9a378e107d63611bbea3fa2b.94f42349.webp",Q=t.p+"static/image/51fe735103c2bd39bcb910954fabc46a.ab816686.webp",C=t.p+"static/image/39424a76cbbd332e041541ae07f7baa5.e644cc9f.webp",M=t.p+"static/image/e3e39d0a63a40f7986b2ba5bc594be99.876ba1c4.webp",R=t.p+"static/image/21745214874aa772c192dd8ba8926c71.f585abce.webp",E=t.p+"static/image/9eafdba727c75f0e989ad2fc9530daf4.99939ec8.webp",G=t.p+"static/image/d5cfdeee6717504891f8ae6c6d69ced9.83f87531.webp",N=t.p+"static/image/dd9354d7307ecb550d00677f948fc94c.000b40c0.webp",k=t.p+"static/image/f3178bf6ca23e2d6e715aa475cd62007.2976e584.webp",D=t.p+"static/image/455e8205b8345d7d6143c893a716ed15.14d07a15.webp",_=t.p+"static/image/0f5c89d41b97d7ce2985f3facd244e9d.623d1530.webp",U=t.p+"static/image/9853b168fa9d95b206fbeb1cfa4063bc.dcefc0c8.webp";var B=t(926308);let O=t.p+"static/image/7628927c0d51f7a3acd498e586022ded.66f229ba.webp",$=t.p+"static/image/2e6e86093be78c4f049d047b28dd386a.9bbe2f4b.webp";var H=t(284954),F=t(928889),W=t(345396),V=t(979509),Y=t(785965);let z=t.p+"static/image/2ddfeee0855d21b37ad64f24d05c3f3e.6e9fb3a4.webp",J=t.p+"static/image/5c0da6afdd3676ae8cb920d564a5a3a2.0ad8cc96.webp",K=t.p+"static/image/d044548544ba7813ee0f61ae07b6372f.3882dd63.webp",X=t.p+"static/image/9c147c040895b712149fe57f5a8823ca.659c7c47.webp";function Z(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"199-graphql--primsa--react-实现-todolist",children:["199. GraphQL + Primsa + React 实现 TodoList",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#199-graphql--primsa--react-实现-todolist",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们经常用 restful 的接口来开发业务。"}),"\n",(0,r.jsx)(n.p,{children:"比如 GET 请求 /students 查询所有学生，/students/1 查询 id 为 1 的学生"}),"\n",(0,r.jsx)(n.p,{children:"发送 POST、PUT、DETETE 请求分别代表增删改。"}),"\n",(0,r.jsx)(n.p,{children:"其实也可以用 GraphQL 的方式来写接口："}),"\n",(0,r.jsxs)(n.p,{children:["查询：\n",(0,r.jsx)("img",{src:X,alt:""})]}),"\n",(0,r.jsxs)(n.p,{children:["新增：\n",(0,r.jsx)("img",{src:K,alt:""})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:J,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"增删改查都在一个接口里搞定，并且想要什么数据由前端自己取。"}),"\n",(0,r.jsx)(n.p,{children:"今天我们就用 Nest + GrahQL 做一个 TodoList 的增删改查。"}),"\n",(0,r.jsx)(n.p,{children:"数据存在 mysql 里，用 Prisma 作为 ORM 框架。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install -g @nestjs/cli\n\nnest new graphql-todolist\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:z,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"创建个项目，然后我们首先来实现 restful 接口的增删改查。"}),"\n",(0,r.jsx)(n.p,{children:"用 docker 把 mysql 跑起来："}),"\n",(0,r.jsx)(n.p,{children:"从 docker 官网下载 docker desktop，这个是 docker 的桌面端："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"跑起来后，搜索 mysql 镜像（这步需要科学上网），点击 run："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:V,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"输入容器名、端口映射、以及挂载的数据卷，还要指定一个环境变量："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:W,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"端口映射就是把宿主机的 3306 端口映射到容器里的 3306 端口，这样就可以在宿主机访问了。"}),"\n",(0,r.jsx)(n.p,{children:"数据卷挂载就是把宿主机的某个目录映射到容器里的 /var/lib/mysql 目录，这样数据是保存在本地的，不会丢失。"}),"\n",(0,r.jsx)(n.p,{children:"而 MYSQL_ROOT_PASSWORD 的密码则是 mysql 连接时候的密码。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:F,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"跑起来后，我们用 GUI 客户端连上，这里我们用的是 mysql workbench，这是 mysql 官方提供的免费客户端："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:H,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"连接上之后，点击创建 database："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:$,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"指定名字、字符集为 utf8mb4，然后点击右下角的 apply。"}),"\n",(0,r.jsx)(n.p,{children:"创建成功之后在左侧就可以看到这个 database 了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:O,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"现在还没有表。"}),"\n",(0,r.jsx)(n.p,{children:"我们在 Nest 里用 Prisma 连接 mysql。"}),"\n",(0,r.jsx)(n.p,{children:"进入项目，安装 prisma"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install prisma --save-dev\n"})}),"\n",(0,r.jsx)(n.p,{children:"执行 prisma init 创建 schema 文件："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx prisma init\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:B,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"生成了 schema 文件（用来定义 model 的），和 .env 文件："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:U,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"改下 .env 的配置："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-env",children:'DATABASE_URL="mysql://root:你的密码@localhost:3306/todolist"\n'})}),"\n",(0,r.jsx)(n.p,{children:"并且修改下 schema 里的 datasource 部分："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'datasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"然后创建 model："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:_,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\nmodel TodoItem {\n  id        Int    @id @default(autoincrement())\n  content    String  @db.VarChar(50)\n  createTime DateTime @default(now())\n  updateTime DateTime @updatedAt\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"id 自增，content 是长度为 50 的字符串，还有创建时间 createTime、更新时间 updateTime。"}),"\n",(0,r.jsx)(n.p,{children:"执行 prisma migrate dev，它会根据定义的 model 去创建表："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npx prisma migrate dev --name init\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:D,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"它会生成 sql 文件，里面是这次执行的 sql。"}),"\n",(0,r.jsx)(n.p,{children:"然后还会生成 client 代码，用来连接数据库操作这个表。"}),"\n",(0,r.jsx)(n.p,{children:"可以看到，这次执行的 sql 就是 create table 建表语句："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:k,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这时候数据库就就有这个表了："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:N,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"接下来我们就可以在代码里做 CRUD 了。"}),"\n",(0,r.jsx)(n.p,{children:"生成一个 service："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nest g service prisma --flat --no-spec\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:G,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"改下生成的 PrismaService，继承 PrismaClient，这样它就有 crud 的 api 了："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n\n    constructor() {\n        super({\n            log: [\n                {\n                    emit: 'stdout',\n                    level: 'query'\n                }\n            ]\n        })\n    }\n\n    async onModuleInit() {\n        await this.$connect();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 constructor 里设置 PrismaClient 的 log 参数，也就是打印 sql 到控制台。"}),"\n",(0,r.jsx)(n.p,{children:"在 onModuleInit 的生命周期方法里调用 $connect 来连接数据库。"}),"\n",(0,r.jsx)(n.p,{children:"然后在 AppService 里注入 PrismaService，实现 CRUD："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { CreateTodoList } from './todolist-create.dto';\nimport { UpdateTodoList } from './todolist-update.dto';\n\n@Injectable()\nexport class AppService {\n\n  getHello(): string {\n    return 'Hello World!';\n  }\n\n  @Inject(PrismaService)\n  private prismaService: PrismaService;\n\n  async query() {\n    return this.prismaService.todoItem.findMany({\n      select: {\n        id: true,\n        content: true,\n        createTime: true\n      }\n    });\n  }\n\n  async create(todoItem: CreateTodoList) {\n    return this.prismaService.todoItem.create({\n      data: todoItem,\n      select: {\n        id: true,\n        content: true,\n        createTime: true\n      }\n    });\n  }\n\n  async update(todoItem: UpdateTodoList) {\n    return this.prismaService.todoItem.update({\n      where: {\n        id: todoItem.id\n      },\n      data: todoItem,\n      select: {\n        id: true,\n        content: true,\n        createTime: true\n      }\n    });\n  }\n\n  async remove(id: number) {\n    return this.prismaService.todoItem.delete({\n      where: {\n        id\n      }\n    })\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"@Inject 注入 PrismaService，用它来做 CRUD，where 是条件、data 是数据，select 是回显的字段："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:E,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后创建用到的两个 dto 的 class"}),"\n",(0,r.jsx)(n.p,{children:"todolist-create.dto.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export class CreateTodoList {\n    content: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"todolist-update.dto.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"export class UpdateTodoList {\n    id: number;\n    content: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"在 AppController 里引入下，添加几个路由："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Body, Controller, Delete, Get, Post, Query } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { CreateTodoList } from './todolist-create.dto';\nimport { UpdateTodoList } from './todolist-update.dto';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Post('create')\n  async create(@Body() todoItem: CreateTodoList) {\n    return this.appService.create(todoItem);\n  }\n\n  @Post('update')\n  async update(@Body() todoItem: UpdateTodoList) {\n    return this.appService.update(todoItem);\n  }\n\n  @Get('delete')\n  async delete(@Query('id') id: number) {\n    return this.appService.remove(+id);\n  }\n\n  @Get('list')\n  async list() {\n    return this.appService.query();\n  }\n\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"添加增删改查 4 个路由，post 请求用 @Body() 注入请求体，@Query 拿路径中的参数："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"把服务跑起来试一下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"首先是 list，现在没有数据："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:C,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后添加一个："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:Q,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"服务端打印了 insert into 的 sql："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:P,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"数据库也有了这条记录："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:q,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"再加一个："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:L,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后查一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"接下来试下修改、删除："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:w,alt:""})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"再查一下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:T,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"没啥问题。"}),"\n",(0,r.jsx)(n.p,{children:"这样，todolist 的 restful 版接口就完成了。"}),"\n",(0,r.jsx)(n.p,{children:"接下来实现 graphql 版本："}),"\n",(0,r.jsx)(n.p,{children:"安装用到的包："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i @nestjs/graphql @nestjs/apollo @apollo/server graphql\n"})}),"\n",(0,r.jsx)(n.p,{children:"然后在 AppModule 里引入下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaService } from './prisma.service';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver } from '@nestjs/apollo';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      typePaths: ['./**/*.graphql'],\n    })\n  ],\n  controllers: [AppController],\n  providers: [AppService, PrismaService],\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"typePaths 就是 schema 文件的路径："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"添加一个 todolist.graphql"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"type TodoItem {\n    id: Int\n    content: String\n}\n\ninput CreateTodoItemInput {\n  content: String\n}\n\ninput UpdateTodoItemInput {\n  id: Int!\n  content: String\n}\n\ntype Query {\n  todolist: [TodoItem]!\n  queryById(id: Int!): TodoItem\n}\n\n\ntype Mutation {\n  createTodoItem(todoItem: CreateTodoItemInput!): TodoItem!\n  updateTodoItem(todoItem: UpdateTodoItemInput!): TodoItem!\n  removeTodoItem(id: Int!): Int\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"语法比较容易看懂，就是定义数据的结构。"}),"\n",(0,r.jsx)(n.p,{children:"在 Query 下定义查询的接口，在 Mutation 下定义增删改的接口。"}),"\n",(0,r.jsx)(n.p,{children:"然后实现 resolver，也就是这些接口的实现："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"nest g resolver todolist --no-spec --flat\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:I,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { PrismaService } from './prisma.service';\nimport { Inject } from '@nestjs/common';\nimport { CreateTodoList } from './todolist-create.dto';\nimport { UpdateTodoList } from './todolist-update.dto';\n\n@Resolver()\nexport class TodolistResolver {\n\n    @Inject(PrismaService)\n    private prismaService: PrismaService;\n\n    @Query(\"todolist\")\n    async todolist() {\n        return this.prismaService.todoItem.findMany();\n    }\n\n    @Query(\"queryById\")\n    async queryById(@Args('id') id) {\n        return this.prismaService.todoItem.findUnique({\n            where: {\n                id\n            }\n        })\n    }\n\n    @Mutation(\"createTodoItem\")\n    async createTodoItem(@Args(\"todoItem\") todoItem: CreateTodoList) {\n        return this.prismaService.todoItem.create({\n            data: todoItem,\n            select: {\n              id: true,\n              content: true,\n              createTime: true\n            }\n          });\n    }\n\n\n    @Mutation(\"updateTodoItem\")\n    async updateTodoItem(@Args('todoItem') todoItem: UpdateTodoList) {\n        return this.prismaService.todoItem.update({\n            where: {\n              id: todoItem.id\n            },\n            data: todoItem,\n            select: {\n              id: true,\n              content: true,\n              createTime: true\n            }\n          });\n    }\n\n    @Mutation(\"removeTodoItem\")\n    async removeTodoItem(@Args('id') id: number) {\n        await this.prismaService.todoItem.delete({\n            where: {\n              id\n            }\n        })\n        return id;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"用 @Resolver 声明 resolver，用 @Query 声明查询接口，@Mutation 声明增删改接口，@Args 取传入的参数。"}),"\n",(0,r.jsx)(n.p,{children:"具体增删改查的实现和之前一样。"}),"\n",(0,r.jsxs)(n.p,{children:["浏览器访问 ",(0,r.jsx)(n.a,{href:"http://localhost:3000/graphql",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/graphql"})," 就是 playground，可以在这里查询："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"左边输入查询语法，右边是执行后返回的结果。"}),"\n",(0,r.jsx)(n.p,{children:"当然，对新手来说这个 playground 不够友好，没有提示。"}),"\n",(0,r.jsx)(n.p,{children:"我们换一个："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaService } from './prisma.service';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver } from '@nestjs/apollo';\nimport { TodolistResolver } from './todolist.resolver';\nimport { ApolloServerPluginLandingPageLocalDefault } from '@apollo/server/plugin/landingPage/default';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      typePaths: ['./**/*.graphql'],\n      playground: false,\n      plugins: [ApolloServerPluginLandingPageLocalDefault()],\n    })\n  ],\n  controllers: [AppController],\n  providers: [AppService, PrismaService, TodolistResolver],\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"试一下新增："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"查询："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"修改："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"单个查询："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"删除："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"查询："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"基于 GraphQL 的增删改查都成功了！"}),"\n",(0,r.jsx)(n.p,{children:"然后在 react 项目里调用下。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx create-vite\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"进入项目，安装 @apollo/client"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install\n\nnpm install @apollo/client\n"})}),"\n",(0,r.jsx)(n.p,{children:"改下 main.tsx"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import * as ReactDOM from 'react-dom/client';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport App from './App';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3000/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\n\nroot.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n);\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"创建 ApolloClient 并设置到 ApolloProvider。"}),"\n",(0,r.jsx)(n.p,{children:"然后在 App.tsx 里用 useQuery 发请求："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { gql, useQuery } from '@apollo/client';\n\nconst getTodoList = gql`\n  query Query {\n    todolist {\n      content\n      id\n    }\n  }\n`;\n\ntype TodoItem = {\n  id: number;\n  content: string;\n}\n\ntype TodoList = {\n  todolist: Array<TodoItem>;\n}\n\nexport default function App() {\n  const { loading, error, data } = useQuery<TodoList>(getTodoList);\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <ul>\n      {\n        data?.todolist?.map(item => {\n          return <li key={item.id}>{item.content}</li>\n        })\n      }\n    </ul>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"把服务跑起来："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run dev\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这里涉及到的跨域，现在后端服务里开启下跨域支持："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"可以看到，返回了查询结果："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"然后加一下新增："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"用 useMutation 的 hook，指定 refetchQueries 也就是修改完之后重新获取数据。"}),"\n",(0,r.jsx)(n.p,{children:"调用的时候传入 content 数据。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { gql, useMutation, useQuery } from '@apollo/client';\n\nconst getTodoList = gql`\n  query Query {\n    todolist {\n      content\n      id\n    }\n  }\n`;\n\nconst createTodoItem = gql`\n  mutation Mutation($todoItem: CreateTodoItemInput!) {\n    createTodoItem(todoItem: $todoItem) {\n      id\n      content\n    }\n  }\n`;\n\ntype TodoItem = {\n  id: number;\n  content: string;\n}\n\ntype TodoList = {\n  todolist: Array<TodoItem>;\n}\n\nexport default function App() {\n  const { loading, error, data } = useQuery<TodoList>(getTodoList);\n\n  const [createTodo] = useMutation(createTodoItem, {\n    refetchQueries: [getTodoList]\n  });\n\n  async function onClick() {\n    await createTodo({\n      variables: {\n        todoItem: {\n          content: Math.random().toString().slice(2, 10)\n        }\n      }\n    })\n  }\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <div>\n      <button onClick={onClick}>新增</button>\n      <ul>\n        {\n          data?.todolist?.map(item => {\n            return <li key={item.id}>{item.content}</li>\n          })\n        }\n      </ul>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"测试下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"数据库里也可能看到新增的数据："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这样，我们就能在 react 项目里用 graphql 做 CRUD 了。"}),"\n",(0,r.jsx)(n.p,{children:"案例代码上传了 github。"}),"\n",(0,r.jsxs)(n.p,{children:["后端代码： ",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/graphql-todolist",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/graphql-todolist"})]}),"\n",(0,r.jsxs)(n.p,{children:["前端代码：",(0,r.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/graphql-todolist-client",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/graphql-todolist-client"})]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"我们实现了 Restful\xa0和 GraphQL 版的 CRUD。"}),"\n",(0,r.jsx)(n.p,{children:"前端用 React + @apollo/client。"}),"\n",(0,r.jsx)(n.p,{children:"后端用 Nest + GraphQL + Prisma + MySQL。"}),"\n",(0,r.jsx)(n.p,{children:"GraphQL 主要是定义 schema 和 resolver 两部分，schema 是 Query、Mutation 的结构，resolver 是它的实现。"}),"\n",(0,r.jsx)(n.p,{children:"可以在 playground 里调用接口，也可以在 react 里用 @appolo/client 调用。"}),"\n",(0,r.jsx)(n.p,{children:"相比 restful 的版本，graphql 只需要一个接口，然后用查询语言来查，需要什么数据取什么数据，更加灵活。"}),"\n",(0,r.jsx)(n.p,{children:"业务开发中，你会选择用 GraphQL 开发接口么？"})]})}function ee(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(Z,{...e})}):Z(e)}let en=ee;ee.__RSPRESS_PAGE_META={},ee.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F199.%20GraphQL%20%2B%20Primsa%20%2B%20React%20%E5%AE%9E%E7%8E%B0%20TodoList.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"199. GraphQL + Primsa + React 实现 TodoList",headingTitle:"199. GraphQL + Primsa + React 实现 TodoList",frontmatter:{}}}}]);