"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["30004"],{992870:function(n,e,s){s.r(e),s.d(e,{default:()=>t});var i=s(552676),r=s(740453);function c(n){let e=Object.assign({h2:"h2",a:"a",p:"p",code:"code",blockquote:"blockquote",h3:"h3",ul:"ul",li:"li",pre:"pre",ol:"ol",strong:"strong",h4:"h4"},(0,r.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h2,{id:"前言",children:["前言",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"Electron"})," 虽然本身依托于 ",(0,i.jsx)(e.code,{children:"Chromium"})," + ",(0,i.jsx)(e.code,{children:"Nodejs"})," 具有天然的跨平台能力，但是对于一些和操作系统相关的应用检索能力还是需要自己来分别处理。主要是因为不同类型的操作系统安装应用获取的方式和返回的内容并不相同。"]}),"\n",(0,i.jsxs)(e.p,{children:["考虑到大多数用户都是 ",(0,i.jsx)(e.code,{children:"Windows"})," 或 ",(0,i.jsx)(e.code,{children:"MacOS"})," 操作系统，本小节，我们将通过介绍在 ",(0,i.jsx)(e.code,{children:"MacOS"})," 以及 ",(0,i.jsx)(e.code,{children:"Windows"})," 平台下，如何来实现系统级别的应用检索。"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["如果你对 Linux 的实现方式感兴趣，可以直接参考我们的源码实现：",(0,i.jsx)(e.a,{href:"https://github.com/rubickCenter/rubick/blob/master/src/core/app-search/linux.ts",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/rubickCenter/rubick/blob/master/src/core/app-search/linux.ts"})]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"macos-实现",children:["MacOS 实现",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#macos-实现",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"先来看一下实现的效果："}),"\n",(0,i.jsxs)(e.h3,{id:"1-获取-macos-下安装了哪些应用",children:["1. 获取 macOS 下安装了哪些应用",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-获取-macos-下安装了哪些应用",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"要在 macOS 下获取安装的应用，其实可以直接使用系统配置概要工具（system_profiler）来实现。"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"system_profiler"})," 是 macOS 系统中的命令行工具，用于获取系统的各种硬件和软件配置信息。它能够提供关于电脑硬件、网络、软件以及许多其他系统组件的详尽信息。"]}),"\n",(0,i.jsx)(e.p,{children:"一些常用的参数如下："}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"-xml"}),"：以 XML 格式输出信息。"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"-detailLevel"}),"：控制信息的详细程度，可设置为 ",(0,i.jsx)(e.code,{children:"basic"}),"、",(0,i.jsx)(e.code,{children:"mini"})," 或 ",(0,i.jsx)(e.code,{children:"full"}),"。"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"-listDataTypes"}),"：列出可用的数据类型。"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"-help"}),"：显示帮助信息，列出可用参数和选项。"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"-timeout"}),"：设置超时时间，限制信息的收集时间。"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"-nospin"}),"：在收集信息时禁用硬盘旋转。"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"比如，获取系统中安装了哪些应用，就可以直接使用命令行："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"$ /usr/sbin/system_profiler -xml -detailLevel mini SPApplicationsDataType\n"})}),"\n",(0,i.jsxs)(e.p,{children:["其中，使用了 ",(0,i.jsx)(e.code,{children:"-xml"})," 参数来指示输出以 XML 格式呈现，",(0,i.jsx)(e.code,{children:"-detailLevel mini"})," 表示只显示最小级别的详细信息，",(0,i.jsx)(e.code,{children:"SPApplicationsDataType"})," 则是参数，用于指示 ",(0,i.jsx)(e.code,{children:"system_profiler"})," 获取并显示关于已安装应用程序的数据类型。"]}),"\n",(0,i.jsx)(e.p,{children:"注意，最终输出的格式是一个 XML 的内容："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-XML",children:"<dict>\n  <key>_name</key>\n  <string>钉钉</string>\n  <key>arch_kind</key>\n  <string>arch_arm_i64</string>\n  <key>lastModified</key>\n  <date>2023-11-28T01:44:02Z</date>\n  <key>obtained_from</key>\n  <string>mac_app_store</string>\n  <key>path</key>\n  <string>/Applications/DingTalk.app</string>\n  <key>signed_by</key>\n  <array>\n    <string>Apple Mac OS Application Signing</string>\n    <string>Apple Worldwide Developer Relations Certification Authority</string>\n    <string>Apple Root CA</string>\n  </array>\n  <key>version</key>\n  <string>7.1.6</string>\n</dict>\n"})}),"\n",(0,i.jsxs)(e.p,{children:["写到这里，你或许就明白了如何获取到 ",(0,i.jsx)(e.code,{children:"macOS"})," 中已安装的应用了："]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["使用 node shell 脚本调用 ",(0,i.jsx)(e.code,{children:"system_profiler"})," 命令；"]}),"\n",(0,i.jsxs)(e.li,{children:["获取到 XML 数据后，通过 ",(0,i.jsx)(e.code,{children:"plist"})," 解析 XML；"]}),"\n",(0,i.jsx)(e.li,{children:"返回解析后的数据。"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"对应到具体的代码实现："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"import { spawn } from 'child_process';\nimport plist from 'plist';\n\nexport default function getApps(resolve, reject) {\n  let resultBuffer = new Buffer.from([]);\n  // 通过 spawn 调用 system_profiler 脚本\n  const profileInstalledApps = spawn('/usr/sbin/system_profiler', [\n    '-xml',\n    '-detailLevel',\n    'mini',\n    'SPApplicationsDataType',\n  ]);\n  \n  // 监听返回结果，写入 resultBuffer\n  profileInstalledApps.stdout.on('data', (chunckBuffer) => {\n    resultBuffer = Buffer.concat([resultBuffer, chunckBuffer]);\n  });\n\n  // 监听退出事件\n  profileInstalledApps.on('exit', (exitCode) => {\n    if (exitCode !== 0) {\n      reject([]);\n      return;\n    }\n\n    try {\n      // 解析 XML 文档\n      const [installedApps] = plist.parse(resultBuffer.toString());\n      // 返回结果\n      return resolve(installedApps._items);\n  });\n  // 出错后抛出\n  profileInstalledApps.on('error', (err) => {\n    reject(err);\n  });\n}\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["对应 rubick 具体源码位置：",(0,i.jsx)(e.a,{href:"https://github.com/rubickCenter/rubick/blob/master/src/core/app-search/get-mac-app/getApps.ts",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/rubickCenter/rubick/blob/master/src/core/app-search/get-mac-app/getApps.ts"})]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"2-获取安装应用的图标",children:["2. 获取安装应用的图标",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-获取安装应用的图标",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["第一步我们只是实现了获取当前 macOS 中安装了哪些应用，但是需要注意的是通过 ",(0,i.jsx)(e.code,{children:"system_profiler"})," 命令获取到的应用列表并不包含应用的图标信息，因此我们需要自己再解析出应用的图标。"]}),"\n",(0,i.jsxs)(e.p,{children:["我们知道，对于 ",(0,i.jsx)(e.code,{children:"macOS"})," 中的应用，其图标都是 ",(0,i.jsx)(e.code,{children:"xxx.icns"})," 或 ",(0,i.jsx)(e.code,{children:"xxx.tiff"})," 格式的。",(0,i.jsx)(e.code,{children:".tiff"})," 和 ",(0,i.jsx)(e.code,{children:".icns"})," 类似，接下来的内容，我们将以 ",(0,i.jsx)(e.code,{children:".icns"})," 图标作为示例，解释如何获取应用的图标。"]}),"\n",(0,i.jsxs)(e.p,{children:["对于 ",(0,i.jsx)(e.code,{children:"Electron"})," 而言，是不支持直接展示 ",(0,i.jsx)(e.code,{children:".icons"})," 图标的。最好是可以转成 ",(0,i.jsx)(e.code,{children:".png"})," 或者 ",(0,i.jsx)(e.code,{children:"base64"})," 的格式。但这里有 2 个问题需要解决："]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"如何找到 .icons 文件在哪里？"}),"\n",(0,i.jsx)(e.li,{children:"如何转换 .icons 图标成 .png 图标？"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["首先，先说第一个问题，对于 ",(0,i.jsx)(e.code,{children:"macOS"})," 下的应用，它的应用 ",(0,i.jsx)(e.code,{children:"Contens"})," 目录下总会有一个 ",(0,i.jsx)(e.code,{children:"Info.plist"})," 文件，",(0,i.jsx)(e.code,{children:"Info.plist"})," 是 macOS 上的一个特殊文件，用于存储应用程序的配置和元数据。这个文件采用 XML 格式，包含了应用程序的各种信息，例如应用名称、版本号、",(0,i.jsx)(e.strong,{children:"图标文件名"}),"、支持的文件类型、所需权限等等。"]}),"\n",(0,i.jsxs)(e.p,{children:["拿 ",(0,i.jsx)(e.code,{children:"钉钉"})," 举例，",(0,i.jsx)(e.code,{children:"钉钉"})," 的文件目录是："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"/Applications/DingTalk.app/Contents\n"})}),"\n",(0,i.jsx)(e.p,{children:"它包含的结构如下："}),"\n",(0,i.jsxs)(e.p,{children:["里面有个 ",(0,i.jsx)(e.code,{children:"Info.plist"})," 文件，我们可以简单打开看看它的一些信息："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-XML",children:'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n \x3c!--...--\x3e\n <key>CFBundleExecutable</key>\n <string>DingTalk</string>\n <key>CFBundleIconFile</key>\n <string>AppIcon</string>\n \x3c!--...--\x3e\n</dict>\n</plist>\n'})}),"\n",(0,i.jsxs)(e.p,{children:["这里，我们选取了部分信息作为展示，可以看到有一个 ",(0,i.jsx)(e.code,{children:"CFBundleIconFile"})," 字段标记的图标名称，对于 ",(0,i.jsx)(e.code,{children:"钉钉"})," 来说，那么就是 ",(0,i.jsx)(e.code,{children:"AppIcon.icns"}),"。"]}),"\n",(0,i.jsxs)(e.p,{children:["找到图标名称后，接下来就是需要对图标格式进行转换，在 ",(0,i.jsx)(e.code,{children:"macOS"})," 中，我们可以使用 ",(0,i.jsx)(e.code,{children:"sips"})," 命令来处理图像。"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"sips"}),' 是 macOS 系统中的一个命令行工具，用于对图像进行处理和操作。该命令的全称是 "Scriptable Image Processing System"，它允许用户通过命令行对图像文件进行各种操作，包括格式转换、大小调整、颜色管理等。']}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"这个工具在命令行中使用，通过提供参数和选项来执行不同的操作。例如："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"$ sips -s format png input.jpg --out output.png\n"})}),"\n",(0,i.jsxs)(e.p,{children:["这样的命令可以将 ",(0,i.jsx)(e.code,{children:"input.jpg"})," 文件转换为 PNG 格式并输出为 ",(0,i.jsx)(e.code,{children:"output.png"}),"。有了上面的这些知识，那么我们可以轻松地把 ",(0,i.jsx)(e.code,{children:".icns"})," 图标转成 ",(0,i.jsx)(e.code,{children:".png"})," 图标："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"$ sips -s format png '${iconFile}' --out '${pngFileOutput}' --resampleHeightWidth 64 64\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"-s format png"})," 表示指定输出格式为 PNG。"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"${iconFile}"})," 是一个变量，它包含图标文件的路径。"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"--out '${pngFileOutput}'"})," 表示输出路径为 ",(0,i.jsx)(e.code,{children:"${pngFileOutput}"})," 这个变量中指定的路径。"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"--resampleHeightWidth 64 64"})," 表示对图像进行重采样，将其调整为高度和宽度均为 64 像素的尺寸。"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["这里我们使用了 ",(0,i.jsx)(e.code,{children:"resampleHeightWidth"})," 参数重新调整了图像尺寸，因为在搜索列表中，我们只需要用到这个尺寸的图标就好了。"]}),"\n",(0,i.jsx)(e.p,{children:"接下来，一起看看完整代码："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"import path from 'path';\nimport fs from 'fs';\nimport { exec } from 'child_process';\n\nimport plist from 'plist';\n\nconst getIconFile = (appFileInput) => {\n  return new Promise((resolve, reject) => {\n    // 根据 app 路径，获取 Info.plist 路径\n    const plistPath = path.join(appFileInput, 'Contents', 'Info.plist');\n    // 解析 plist 文件\n    plist.readFile(plistPath, (err, data) => {\n      // 如果不存在 CFBundleIconFile 则返回 macOS 系统默认图标\n      if (err || !data.CFBundleIconFile) {\n        return resolve(\n          '/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericApplicationIcon.icns'\n        );\n      }\n      // 获取 icns 图标路径\n      const iconFile = path.join(\n        appFileInput,\n        'Contents',\n        'Resources',\n        data.CFBundleIconFile\n      );\n      \n      // 依次通过 文件名、.icns、.tiff 来寻找 app icon\n      const iconFiles = [iconFile, iconFile + '.icns', iconFile + '.tiff'];\n      const existedIcon = iconFiles.find((iconFile) => {\n        return fs.existsSync(iconFile);\n      });\n      // 找不到也返回 macOS 系统默认图标\n      resolve(\n        existedIcon ||\n          '/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericApplicationIcon.icns'\n      );\n    });\n  });\n};\n\nconst tiffToPng = (iconFile, pngFileOutput) => {\n  return new Promise((resolve, reject) => {\n    // tiff、icns 图标转 png\n    exec(\n      `sips -s format png '${iconFile}' --out '${pngFileOutput}' --resampleHeightWidth 64 64`,\n      (error) => {\n        error ? reject(error) : resolve(null);\n      }\n    );\n  });\n};\n\n// 传入 app 路径，返回对应 app 图片路径\nconst app2png = (appFileInput, pngFileOutput) => {\n  return getIconFile(appFileInput).then((iconFile) => {\n    return tiffToPng(iconFile, pngFileOutput);\n  });\n};\n\nexport default app2png;\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["对应 rubick 具体源码位置：",(0,i.jsx)(e.a,{href:"https://github.com/rubickCenter/rubick/blob/master/src/core/app-search/get-mac-app/app2png.ts",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/rubickCenter/rubick/blob/master/src/core/app-search/get-mac-app/app2png.ts"})]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"windows-实现",children:["Windows 实现",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#windows-实现",children:"#"})]}),"\n",(0,i.jsxs)(e.h3,{id:"1-获取-windows-下安装了哪些应用",children:["1. 获取 Windows 下安装了哪些应用",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-获取-windows-下安装了哪些应用",children:"#"})]}),"\n",(0,i.jsxs)(e.h4,{id:"11-通过注册表来获取",children:["1.1 通过注册表来获取",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#11-通过注册表来获取",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["在 ",(0,i.jsx)(e.code,{children:"windows"})," 下，要获取当前系统安装了哪些应用，有一种比较直接的方法，就是通过注册表的卸载目录来查看："]}),"\n",(0,i.jsxs)(e.p,{children:["可以看到，注册表 ",(0,i.jsx)(e.code,{children:"Uninstall"})," 中展示出了 ",(0,i.jsx)(e.code,{children:"DisplayIcon"})," 和 ",(0,i.jsx)(e.code,{children:"DisplayName"})," 字段，分别用于表示应用的 ",(0,i.jsx)(e.code,{children:"icon"})," 路径和展示名称。",(0,i.jsx)(e.code,{children:"windows"})," 下，注册表卸载应用的目录一般是："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# 第10章—实战篇：实现应用快速检索\nHKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\nHKCU\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\n# 系统级别\nHKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\nHKLM\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\n"})}),"\n",(0,i.jsxs)(e.p,{children:["因此，我们可以通过 ",(0,i.jsx)(e.a,{href:"https://github.com/Xutaotaotao/get-installed-apps/tree/master",target:"_blank",rel:"noopener noreferrer",children:"get-installed-apps"})," 来实现对注册表内容的读操作："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"import {getInstalledApps} from 'get-installed-apps'\n\ngetInstalledApps().then(apps => {\n  console.log(apps)\n})\n"})}),"\n",(0,i.jsx)(e.p,{children:"可以获取到的格式大致如下："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"[\n  {\n    appIdentifier: '8775235d-add8-5501-961c-495d96145e7e',\n    DisplayName: 'rubick 4.0.10',\n    appName: 'rubick 4.0.10',\n    UninstallString:\n      '\"C:\\Program Files\\rubick2\\Uninstall rubick.exe\" /allusers',\n    QuietUninstallString:\n      '\"C:\\Program Files\\rubick2\\Uninstall rubick.exe\" /allusers /S',\n    DisplayVersion: '4.0.10',\n    appVersion: '4.0.10',\n    DisplayIcon: 'C:\\Program Files\\rubick2\\rubick.exe,0',\n  },\n  {\n    appIdentifier: 'Git_is1',\n    InstallLocation: 'C:\\Program Files\\Git\\',\n    DisplayName: 'Git',\n    appName: 'Git',\n    DisplayIcon:\n      'C:\\Program Files\\Git\\mingw64\\share\\git\\git-for-windows.ico',\n    UninstallString: '\"C:\\Program Files\\Git\\unins000.exe\"',\n    QuietUninstallString: '\"C:\\Program Files\\Git\\unins000.exe\" /SILENT',\n    DisplayVersion: '2.40.1',\n    appVersion: '2.40.1',\n    Publisher: 'The Git Development Community',\n    appPublisher: 'The Git Development Community',\n    URLInfoAbout: 'https://gitforwindows.org/',\n    HelpLink: 'https://github.com/git-for-windows/git/wiki/Contact',\n  },\n];\n"})}),"\n",(0,i.jsx)(e.p,{children:"这里有几个问题："}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["注册表获取的内容格式并不是完全统一的，有的不存在 ",(0,i.jsx)(e.code,{children:"DisplayIcon"}),"，有的内容和格式不正确。"]}),"\n",(0,i.jsxs)(e.li,{children:["大多数应用程序会将它们的卸载条目添加到 ",(0,i.jsx)(e.code,{children:"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${appName}"}),"，但并非所有应用程序都会这样做。"]}),"\n",(0,i.jsx)(e.li,{children:"一些卸载不干净的软件可能也会被包含，比如一些曾经安装过的程序，然后被手动删除了，但是没有删除注册表里面的内容。"}),"\n"]}),"\n",(0,i.jsxs)(e.h4,{id:"12-通过快捷方式获取",children:["1.2 通过快捷方式获取",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#12-通过快捷方式获取",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["我们知道，在 ",(0,i.jsx)(e.code,{children:"Windows"})," 中，软件一般都会有一些快捷方式，这些快捷方式都存储在一些特定的目录下，比如："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories\n"})}),"\n",(0,i.jsx)(e.p,{children:"这两个目录通常包含了系统默认安装的程序的快捷方式，以及用户安装的一些应用程序的快捷方式。用户可以通过这个目录中的程序快捷方式在开始菜单中直接找到并运行他们安装的程序。"}),"\n",(0,i.jsx)(e.p,{children:"还有："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"C:\\Users\\xxx\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\n"})}),"\n",(0,i.jsxs)(e.p,{children:["这个路径位于特定用户的个人文件夹中（例如，",(0,i.jsx)(e.code,{children:"C:\\Users\\xxx"}),"），而不是系统级别的路径。"]}),"\n",(0,i.jsx)(e.p,{children:"所以，我们可以通过获取应用程序快捷方式的做法，获取到当前系统中安装的软件："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"import { shell } from 'electron';\n// app 列表\nconst appList = [];\nconst appData = path.join(os.homedir(), './AppData/Roaming');\n\n// 系统快捷方式\nconst systemShortCut = path.resolve('C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs');\nconst originShortCut = path.resolve('C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories');\n// 用户级别快捷方式\nconst userShortCut = path.join(appData, 'Microsoft\\Windows\\Start Menu\\Programs');\n\nfunction fileDisplay(filePath) {\n  //根据文件路径读取文件，返回文件列表\n  fs.readdir(filePath, function (err, files) {\n    if (err) {\n      console.warn(err);\n    } else {\n      files.forEach(function (filename) {\n        const filedir = path.join(filePath, filename);\n        fs.stat(filedir, function (eror, stats) {\n          if (eror) {\n            console.warn('获取文件stats失败');\n          } else {\n            // 是文件\n            const isFile = stats.isFile();\n            // 是文件夹\n            const isDir = stats.isDirectory(); \n            if (isFile) {\n              // 找到 appName\n              const appName = filename.split('.')[0];\n              const keyWords = [appName];\n              let appDetail = {};\n              try {\n                // 通过 shell.readShortcutLink 获取 快捷方式 信息\n                appDetail = shell.readShortcutLink(filedir);\n              } catch (e) {\n                //\n              }\n              // 如果获取不到简介信息，则丢弃\n              if (\n                !appDetail.target ||\n                appDetail.target.toLowerCase().indexOf('unin') >= 0\n              )\n                return;\n   \n              const appInfo = {\n                desc: appDetail.target,\n                type: 'app',\n                name: appName,\n                // ...\n              };\n              appList.push(appInfo);\n            }\n            if (isDir) {\n              // 递归，如果是文件夹，就继续遍历该文件夹下面的文件\n              fileDisplay(filedir); \n            }\n          }\n        });\n      });\n    }\n  });\n}\n[systemShortCut, originShortCut, userShortCut].forEach(appPath => {\n  fileDisplay(appPath);\n});\n"})}),"\n",(0,i.jsxs)(e.p,{children:["这里就是简单的文件读操作，不断地写入到 ",(0,i.jsx)(e.code,{children:"appList"})," 数组中。不过需要注意的是找到的都是一些快捷键的路径，并不代表真实的软件安装路径，所以为了获取到软件的真实安装路径，需要使用 Electron 的 ",(0,i.jsx)(e.a,{href:"https://www.electronjs.org/zh/docs/latest/api/shell#shellreadshortcutlinkshortcutpath-windows",target:"_blank",rel:"noopener noreferrer",children:"shell"})," 模块来对快捷方式进行解析："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"shell.readShortcutLink(shortcutPath)\n// => output \n// {\n//    target: 'C://xxx/xxx/appName.exe'\n//    // ...\n// }\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["完整代码可以查看 rubick 中的实现：",(0,i.jsx)(e.a,{href:"https://github.com/rubickCenter/rubick/blob/master/src/core/app-search/win.ts",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/rubickCenter/rubick/blob/master/src/core/app-search/win.ts"})]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"2-获取安装应用的图标-1",children:["2. 获取安装应用的图标",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-获取安装应用的图标-1",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["要想获取到 Windows 应用安装的图标，需要用到一个 C++ 原生库：",(0,i.jsx)(e.a,{href:"https://github.com/sentialx/extract-file-icon",target:"_blank",rel:"noopener noreferrer",children:"extract-file-icon"}),"。这个库可以把一些 ",(0,i.jsx)(e.code,{children:".exe"})," 文件的 ",(0,i.jsx)(e.code,{children:"app"})," 中的图标提取出来："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"const fileIcon = require(\"extract-file-icon\");\n// path 代表的就是 .exe 应用程序的路径\nconst icon = fileIcon('path', 32);\n"})}),"\n",(0,i.jsx)(e.p,{children:"因此，我们可以在软件初次启动的时候将应用图标获取到，并写入到一个缓存目录，后续启动直接从缓存目录中加载图标即可："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"import os from 'os';\n// 创建一个 icon 临时目录\nconst icondir = path.join(os.tmpdir(), 'ProcessIcon');\n\nconst getico = (app) => {\n  try {\n    const fileIcon = require('extract-file-icon');\n    const buffer = fileIcon(app.desc, 32);\n    const iconpath = path.join(icondir, `${app.name}.png`);\n     \n    fs.exists(iconpath, (exists) => {\n      // 如果临时目录中不存在 icon，则提取\n      if (!exists) {\n        fs.writeFile(iconpath, buffer, 'base64', () => {});\n      }\n    });\n  } catch (e) {\n    console.log(e, app.desc);\n  }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"总结",children:["总结",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["Electron 跨平台能力主要是指其渲染进程依托于 ",(0,i.jsx)(e.code,{children:"Chromium"})," 来磨平 ",(0,i.jsx)(e.code,{children:"UI"})," 渲染层的差异，以及其提供的一些兼容性 ",(0,i.jsx)(e.code,{children:"Native APIs"}),"。一旦涉及到操作系统层面的交互，因为操作系统底层设计的不同，必然需要我们来仔细处理兼容性方案。"]}),"\n",(0,i.jsxs)(e.p,{children:["另外，本小节所有的实现都是针对没有 ",(0,i.jsx)(e.code,{children:"C++"})," 经验的小伙伴而言来实现的，更加方便小伙伴阅读和修改。如果你是个富有 ",(0,i.jsx)(e.code,{children:"C++"})," 编程经验的人，欢迎提交 ",(0,i.jsx)(e.code,{children:"C++"})," 侧的实现！"]})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}let t=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["Electron%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F%E7%AC%AC10%E7%AB%A0%E2%80%94%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%9A%E5%AE%9E%E7%8E%B0%E5%BA%94%E7%94%A8%E5%BF%AB%E9%80%9F%E6%A3%80%E7%B4%A2.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"MacOS 实现",id:"macos-实现",depth:2},{text:"1. 获取 macOS 下安装了哪些应用",id:"1-获取-macos-下安装了哪些应用",depth:3},{text:"2. 获取安装应用的图标",id:"2-获取安装应用的图标",depth:3},{text:"Windows 实现",id:"windows-实现",depth:2},{text:"1. 获取 Windows 下安装了哪些应用",id:"1-获取-windows-下安装了哪些应用",depth:3},{text:"1.1 通过注册表来获取",id:"11-通过注册表来获取",depth:4},{text:"1.2 通过快捷方式获取",id:"12-通过快捷方式获取",depth:4},{text:"2. 获取安装应用的图标",id:"2-获取安装应用的图标-1",depth:3},{text:"总结",id:"总结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);