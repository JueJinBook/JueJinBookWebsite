"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["79913"],{34248:function(e,n,a){a.r(n),a.d(n,{default:()=>f});var c=a(552676),r=a(740453);let s=a.p+"static/image/36d7710b527363c3edf77d8941e42530.95cb45d0.webp",d=a.p+"static/image/70b72c2d9815a349c968a70c2957a27f.0be6e9f6.gif",i=a.p+"static/image/66b9000d480894538ad7b424082fbadf.029c1968.gif",t=a.p+"static/image/524157fd78934a89dbbf25f29e52bcb2.7a97875a.gif",h=a.p+"static/image/a49ad756a8f4ed35612077061026668f.8751035d.webp",l=a.p+"static/image/632e983e6946273d1c05e6a8576fe2e2.84bdd631.webp",j=a.p+"static/image/ae803f05935c3a807ba2f7f925014eed.39b9396b.webp",x=a.p+"static/image/8cb0991760d9a8598a0f0ed4c5332c6c.9b605d75.webp",o=a.p+"static/image/b3a3075e9a7d6821ca67bfcc21cfee8f.19d0a613.webp",p=a.p+"static/image/f9397e8792091a033f042c13ac8e83aa.cbe024e4.webp";function g(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",img:"img",code:"code",strong:"strong",h3:"h3",pre:"pre",ul:"ul",li:"li",h4:"h4",ol:"ol"},(0,r.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"14缓存篇-_-caching上",children:["14.缓存篇 _ Caching（上）",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14缓存篇-_-caching上",children:"#"})]}),"\n",(0,c.jsxs)(n.h2,{id:"前言",children:["前言",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"本章我们将介绍 Next.js 的缓存机制。"}),"\n",(0,c.jsx)(n.p,{children:"Next.js 的缓存功能非常强大，以至于让人又爱又恨。一方面，缓存的重要性不言而喻，可以优化应用性能和降低开销。另一方面，写 Next.js 项目的时候常会遇到数据没有更新的问题，多半都是缓存搞得鬼……"}),"\n",(0,c.jsx)(n.p,{children:"理论上，缓存不是使用 Next.js 的必要知识。因为 Next.js 会自动根据你使用的 API 做好缓存管理。但实际上，你还是要认真学习下缓存，至少要清楚知道 Next.js 的缓存机制有哪些，大致的工作原理，以及如何退出缓存，否则遇到缓存问题的时候你甚至不知道如何解决……"}),"\n",(0,c.jsx)(n.p,{children:"现在就让我们认真学习下缓存吧。"}),"\n",(0,c.jsxs)(n.h2,{id:"概览",children:["概览",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#概览",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"Next.js 中有四种缓存机制："}),"\n",(0,c.jsxs)(n.table,{children:["\n",(0,c.jsxs)(n.thead,{children:["\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.th,{children:"机制"}),"\n",(0,c.jsx)(n.th,{children:"缓存内容"}),"\n",(0,c.jsx)(n.th,{children:"存储地方"}),"\n",(0,c.jsx)(n.th,{children:"目的"}),"\n",(0,c.jsx)(n.th,{children:"期间"}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.tbody,{children:["\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:"请求记忆（Request Memoization）"}),"\n",(0,c.jsx)(n.td,{children:"函数返回值"}),"\n",(0,c.jsx)(n.td,{children:"服务端"}),"\n",(0,c.jsx)(n.td,{children:"在 React 组件树中复用数据"}),"\n",(0,c.jsx)(n.td,{children:"每个请求的生命周期"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:"数据缓存（Data Cache ）"}),"\n",(0,c.jsx)(n.td,{children:"数据"}),"\n",(0,c.jsx)(n.td,{children:"服务端"}),"\n",(0,c.jsx)(n.td,{children:"跨用户请求和部署复用数据"}),"\n",(0,c.jsx)(n.td,{children:"持久（可重新验证）"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:"完整路由缓存（Full Route Cache）"}),"\n",(0,c.jsx)(n.td,{children:"HTML 和 RSC payload"}),"\n",(0,c.jsx)(n.td,{children:"服务端"}),"\n",(0,c.jsx)(n.td,{children:"降低渲染成本、提高性能"}),"\n",(0,c.jsx)(n.td,{children:"持久（可重新验证）"}),"\n"]}),"\n",(0,c.jsxs)(n.tr,{children:["\n",(0,c.jsx)(n.td,{children:"路由缓存（Router Cache）"}),"\n",(0,c.jsx)(n.td,{children:"RSC payload"}),"\n",(0,c.jsx)(n.td,{children:"客户端"}),"\n",(0,c.jsx)(n.td,{children:"减少导航时的服务端请求"}),"\n",(0,c.jsx)(n.td,{children:"用户会话或基于时间"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"默认情况下，Next.js 会尽可能多的使用缓存以提高性能和降低成本。像路由默认会采用静态渲染，数据请求的结果默认会被缓存。下图是构建时静态路由渲染以及首次访问静态路由的原理图："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"在这张图中："}),"\n",(0,c.jsxs)(n.p,{children:["打包构建 ",(0,c.jsx)(n.code,{children:"/a"}),"时（BUILD TIME），因为路由中的请求是首次，所以都会 ",(0,c.jsx)(n.code,{children:"MISS"}),"，从数据源获取数据后，将数据在",(0,c.jsx)(n.strong,{children:"请求记忆"}),"和",(0,c.jsx)(n.strong,{children:"数据缓存"}),"中都保存了一份（",(0,c.jsx)(n.code,{children:"SET"}),"），并将生成的 RSC Payload 和 HTML 也在服务端保存了一份（",(0,c.jsx)(n.strong,{children:"完整路由缓存"}),"）。"]}),"\n",(0,c.jsxs)(n.p,{children:["当客户端访问 ",(0,c.jsx)(n.code,{children:"/a"})," 的时候，命中服务端缓存的 RSC Payload 和 HTML，并将 RSC Payload 在客户端保存一份（",(0,c.jsx)(n.strong,{children:"路由缓存"}),"）。"]}),"\n",(0,c.jsx)(n.p,{children:"缓存行为是会发生变化的，具体取决的因素有很多，比如路由是动态渲染还是静态渲染，数据是缓存还是未缓存，请求是在初始化访问中还是后续导航中。"}),"\n",(0,c.jsx)(n.p,{children:"是不是有点懵？没有关系，随着内容的展开，我们会有更加深入的了解。"}),"\n",(0,c.jsxs)(n.h2,{id:"1-请求记忆request-memoization",children:["1. 请求记忆（Request Memoization）",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-请求记忆request-memoization",children:"#"})]}),"\n",(0,c.jsxs)(n.h3,{id:"11-工作原理",children:["1.1. 工作原理",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11-工作原理",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["React 拓展了 ",(0,c.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching#fetch",target:"_blank",rel:"noopener noreferrer",children:"fetch API"}),"，当有相同的 URL 和参数的时候，React 会自动将请求结果缓存。也就是说，即时你在组件树中的多个位置请求一份相同的数据，但数据获取只会执行一次。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"这样当你跨路由（比如跨布局、页面、组件）时，你不需要在顶层请求数据，然后将返回结果通过 props 转发，直接在需要数据的组件中请求数据即可，不用担心对同一数据发出多次请求造成的性能影响。"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// app/page.js\nasync function getItem() {\n  // 自动缓存结果\n  const res = await fetch('https://.../item/1')\n  return res.json()\n}\n \n// 函数调用两次，但只会执行一次请求\nconst item = await getItem() // cache MISS\n \nconst item = await getItem() // cache HIT\n"})}),"\n",(0,c.jsx)(n.p,{children:"这是请求记忆的工作原理图："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["在这种图中，当渲染 ",(0,c.jsx)(n.code,{children:"/a"})," 路由的时候，由于是第一次请求，会触发缓存 ",(0,c.jsx)(n.code,{children:"MISS"}),"，函数被执行，请求结果会被存储到内存中（缓存",(0,c.jsx)(n.code,{children:"SET"}),"），当下一次相同的调用发生时，会触发缓存 ",(0,c.jsx)(n.code,{children:"HIT"}),"，数据直接从内存中取出。"]}),"\n",(0,c.jsxs)(n.p,{children:["它背后的原理想必大家也想到了，就是",(0,c.jsx)(n.a,{href:"https://juejin.cn/post/6844903494256705543",target:"_blank",rel:"noopener noreferrer",children:"函数记忆"}),"，《JavaScript 权威指南》中就有类似的函数："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'function memoize(f) {\n    var cache = {};\n    return function(){\n        var key = arguments.length + Array.prototype.join.call(arguments, ",");\n        if (key in cache) {\n            return cache[key]\n        }\n        else return cache[key] = f.apply(this, arguments)\n    }\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:"关于请求记忆，要注意："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"请求记忆是 React 的特性，并非 Next.js 的特性。 React 和 Next.js 都做了请求缓存，React 的方案叫做“请求记忆”，Next.js 的方案叫做“数据缓存”，两者有很多不同"}),"\n",(0,c.jsxs)(n.li,{children:["请求记忆只适合用于用 ",(0,c.jsx)(n.code,{children:"GET"})," 方法的 ",(0,c.jsx)(n.code,{children:"fetch"})," 请求"]}),"\n",(0,c.jsxs)(n.li,{children:["请求记忆只应用于 React 组件树，也就是说你在 ",(0,c.jsx)(n.code,{children:"generateMetadata"}),"、",(0,c.jsx)(n.code,{children:"generateStaticParams"}),"、布局、页面和其他服务端组件中使用 fetch 会触发请求记忆，但是在路由处理程序中使用则不会触发，因为这就不在 React 组件树中了"]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"12-持续时间",children:["1.2. 持续时间",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12-持续时间",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"缓存会持续在服务端请求的生命周期中，直到 React 组件树渲染完毕。它的存在是为了避免组件树渲染的时候多次请求同一数据造成的性能影响。"}),"\n",(0,c.jsxs)(n.h3,{id:"13-重新验证",children:["1.3. 重新验证",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#13-重新验证",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"由于请求记忆只会在渲染期间使用，因此也无须重新验证。"}),"\n",(0,c.jsxs)(n.h3,{id:"14-退出方式",children:["1.4. 退出方式",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#14-退出方式",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"这个行为是 React 的默认优化。不建议退出。"}),"\n",(0,c.jsxs)(n.p,{children:["如果你不希望 fetch 请求被记忆，可以借助 ",(0,c.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController",target:"_blank",rel:"noopener noreferrer",children:"AbortController"})," 这个 Web API，具体使用方式如下（虽然这个 API 本来的作用是用来中止请求）："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const { signal } = new AbortController()\nfetch(url, { signal })\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"15-react-cache",children:["1.5. React Cache",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#15-react-cache",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"如果你不能使用 fetch 请求，但是又想实现记忆，可以借助 React 的 cache 函数："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// utils/get-item.ts\nimport { cache } from 'react'\nimport db from '@/lib/db'\n \nexport const getItem = cache(async (id: string) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n"})}),"\n",(0,c.jsxs)(n.p,{children:["注：为了让大家更好的理解",(0,c.jsx)(n.strong,{children:"请求记忆"}),"和",(0,c.jsx)(n.strong,{children:"数据缓存"}),"，实战例子我们会放到本篇最后。"]}),"\n",(0,c.jsxs)(n.h2,{id:"2-数据缓存data-cache",children:["2. 数据缓存（Data Cache）",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-数据缓存data-cache",children:"#"})]}),"\n",(0,c.jsxs)(n.h3,{id:"21-工作原理",children:["2.1. 工作原理",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#21-工作原理",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"Next.js 有自己的数据缓存方案，可以跨服务端请求和构建部署存储数据。之所以能够实现，是因为 Next.js 拓展了 fetch API，在 Next.js 中，每个请求都可以设置自己的缓存方式。"}),"\n",(0,c.jsx)(n.p,{children:"不过与 React 的请求记忆不同的是，请求记忆因为只用于组件树渲染的时候，所以不用考虑数据缓存更新的情况，但 Next.js 的数据缓存方案更为持久，则需要考虑这个问题。"}),"\n",(0,c.jsxs)(n.p,{children:["默认情况下，使用 ",(0,c.jsx)(n.code,{children:"fetch"})," 的数据请求都会被缓存，这个缓存是持久的，它不会自动被重置。你可以使用 ",(0,c.jsx)(n.code,{children:"fetch"})," 的 ",(0,c.jsx)(n.code,{children:"cache"})," 和 ",(0,c.jsx)(n.code,{children:"next.revalidate"})," 选项来配置缓存行为："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"fetch(`https://...`, { cache: 'force-cache' | 'no-store' })\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"fetch(`https://...`, { next: { revalidate: 3600 } })\n"})}),"\n",(0,c.jsx)(n.p,{children:"这是 Next.js 数据缓存的工作原理图："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"让我们解释一下：当渲染的时候首次调用，请求记忆和数据缓存都会 MISS，从而执行请求，返回的结果在请求记忆和数据缓存中都会存储一份。"}),"\n",(0,c.jsxs)(n.p,{children:["当再次调用的时候，因为添加了 ",(0,c.jsx)(n.code,{children:"{cache: 'no-store'}"}),"参数，请求参数不同，请求记忆会  MISS，而这个参数会导致数据缓存跳过，所以依然是执行请求，因为配置了 no-store，所以数据缓存也不会缓存返回的结果，请求记忆则会正常做缓存处理。"]}),"\n",(0,c.jsxs)(n.h3,{id:"22-持续时间",children:["2.2. 持续时间",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#22-持续时间",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"数据缓存在传入请求和部署中都保持不变，除非重新验证或者选择退出。"}),"\n",(0,c.jsxs)(n.h3,{id:"23-重新验证",children:["2.3. 重新验证",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#23-重新验证",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"Next.js 提供了两种方式更新缓存："}),"\n",(0,c.jsxs)(n.p,{children:["一种是",(0,c.jsx)(n.strong,{children:"基于时间的重新验证（Time-based revalidation）"}),"，即经过一定时间并有新请求产生后重新验证数据，适用于不经常更改且新鲜度不那么重要的数据。"]}),"\n",(0,c.jsxs)(n.p,{children:["一种是",(0,c.jsx)(n.strong,{children:"按需重新验证（On-demand revalidation）"}),"，根据事件手动重新验证数据。按需重新验证又可以使用基于标签（tag-based）和基于路径（path-based）两种方法重新验证数据。适用于需要尽快展示最新数据的场景。"]}),"\n",(0,c.jsxs)(n.h4,{id:"基于时间",children:["基于时间",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基于时间",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["基于时间的重新验证，需要使用 ",(0,c.jsx)(n.code,{children:"fetch"})," 的 ",(0,c.jsx)(n.code,{children:"next.revalidate"})," 选项设置缓存的时间（注意它是以秒为单位）。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 每小时重新验证\nfetch('https://...', { next: { revalidate: 3600 } })\n"})}),"\n",(0,c.jsx)(n.p,{children:"可以借助路由段配置项来配置该路由所有的 fetch 请求："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// layout.jsx / page.jsx / route.js\nexport const revalidate = 3600\n"})}),"\n",(0,c.jsx)(n.p,{children:"这是基于时间的重新验证原理图："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"通过这种图，你可以发现：并不是 60s 后该请求会自动更新，而是 60s 后再有请求的时候，会进行重新验证，60s 后的第一次请求依然会返回之前的缓存值，但 Next.js 将使用新数据更新缓存。60s 后的第二次请求会使用新的数据。"}),"\n",(0,c.jsxs)(n.h4,{id:"按需更新",children:["按需更新",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#按需更新",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["使用按需重新验证，数据可以根据路径（",(0,c.jsx)(n.code,{children:"revalidatePath"}),"）和 缓存标签（",(0,c.jsx)(n.code,{children:"revalidateTag"}),"） 按需更新。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"revalidatePath"})," 用在路由处理程序或 Server Actions 中，用于手动清除特定路径中的缓存数据："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"revalidatePath('/')\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"revalidateTag"})," 依赖的是 Next.js 的缓存标签系统，当使用 fetch 请求的时候，声明一个标签，然后在路由处理程序或是 Server Actions 中重新验证具有某一标签的请求："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 使用标签\nfetch(`https://...`, { next: { tags: ['a', 'b', 'c'] } })\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// 重新验证具有某一标签的请求\nrevalidateTag('a')\n"})}),"\n",(0,c.jsx)(n.p,{children:"这是按需更新的原理图："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"你会发现，这跟基于时间的重新验证有所不同。第一次调用请求的时候，正常缓存数据。当触发按需重新验证的时候，将会从缓存中删除相应的缓存条目。下次请求的时候，又相当于第一次调用请求，正常缓存数据。"}),"\n",(0,c.jsxs)(n.h3,{id:"24-退出方式",children:["2.4. 退出方式",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24-退出方式",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"如果你想要退出数据缓存，有两种方式："}),"\n",(0,c.jsxs)(n.p,{children:["一种是将 ",(0,c.jsx)(n.code,{children:"fetch"})," 的 ",(0,c.jsx)(n.code,{children:"cache"})," 选项设置为 ",(0,c.jsx)(n.code,{children:"no-store"}),"，示例如下，每次调用的时候都会重新获取数据："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"fetch(`https://...`, { cache: 'no-store' })\n"})}),"\n",(0,c.jsxs)(n.p,{children:["一种是使用",(0,c.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7309079033223446554",target:"_blank",rel:"noopener noreferrer",children:"路由段配置项"}),"，它会影响该路由段中的所有数据请求："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"export const dynamic = 'force-dynamic'\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"3-实战体会",children:["3. 实战体会",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-实战体会",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["修改 ",(0,c.jsx)(n.code,{children:"app/page.js"}),"，代码如下："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'async function getData() {\n  // 接口每次调用都会返回一个随机的猫猫图片数据\n  const res = await fetch(\'https://api.thecatapi.com/v1/images/search\') \n  return res.json()\n}\n\nexport async function generateMetadata() {\n  const data = await getData()\n  return {\n    title: data[0].id\n  }\n}\n\nexport default async function Page() {\n  const data = await getData()\n  return (\n    <>\n      <h1>图片 ID：{data[0].id}</h1>\n      <img src={data[0].url} width="300" />\n      <CatDetail />\n    </>\n  )\n}\n\nasync function CatDetail() {\n  const data = await getData()\n  return (\n    <>\n      <h1>图片 ID：{data[0].id}</h1>\n      <img src={data[0].url} width="300" />\n    </>\n  )\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["代码的逻辑很简单，访问 ",(0,c.jsx)(n.code,{children:"/"})," 会在 generateMetadata 函数、页面、子组件中调用 3 次接口，接口每次调用都会返回一张随机的猫猫图片数据，请问此时运行",(0,c.jsx)(n.strong,{children:"生产版本"}),"，3 次返回的数据是一致的吗？"]}),"\n",(0,c.jsx)(n.p,{children:"让我们实际运行一下，效果如下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:"cache-10.gif"})}),"\n",(0,c.jsx)(n.p,{children:"无论是普通刷新还是硬刷新，图片都会保持不遍，且 3 次接口调用数据返回一致。"}),"\n",(0,c.jsx)(n.p,{children:"原因也很简单，首先是静态渲染，页面在构建的时候进行渲染，其次虽然调用了 3 次接口，但因为有请求记忆、数据缓存，3 次调用接口数据返回一致。"}),"\n",(0,c.jsxs)(n.p,{children:["现在我们关掉数据缓存，在 ",(0,c.jsx)(n.code,{children:"app/page.js"})," 中添加代码："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// 强制 fetch 不缓存\nexport const fetchCache = 'force-no-store'\n"})}),"\n",(0,c.jsx)(n.p,{children:"运行生产版本，此时交互效果如下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:"cache-11.gif"})}),"\n",(0,c.jsx)(n.p,{children:"因为设置了 fetch 不缓存，页面自动从静态渲染转为动态渲染，所以每次刷新，接口都会返回新的图片。但因为有请求记忆，3 次接口调用都是返回一样的图片。"}),"\n",(0,c.jsxs)(n.p,{children:["此时我们再关闭请求记忆，修改 ",(0,c.jsx)(n.code,{children:"app/page.js"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"async function getData() {\n  const { signal } = new AbortController()\n  const res = await fetch('https://api.thecatapi.com/v1/images/search', { signal }) \n  return res.json()\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"运行生产版本，此时交互效果如下："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:"cache-12.gif"})}),"\n",(0,c.jsx)(n.p,{children:"此时页面动态渲染，数据缓存和请求记忆都已关闭，所以每次请求都会返回不同的图片数据。"}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"最后让我们比较一下请求记忆和数据缓存："}),"\n",(0,c.jsx)(n.p,{children:"请求记忆是 React 的数据缓存方案，它只持续在组件树渲染期间，目的是为了避免组件树渲染的时候多次请求同一数据造成的性能影响。"}),"\n",(0,c.jsx)(n.p,{children:"数据缓存是 Next.js 的数据缓存方案，它可以跨部署和请求缓存，缓存数据不会失效，除非重新验证或者主动退出。目的在于优化应用性能。"}),"\n",(0,c.jsx)(n.p,{children:"实际项目开发的时候，请求记忆和数据缓存往往同时存在，共同作用。"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,c.jsxs)(n.h2,{id:"参考链接",children:["参考链接",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://nextjs.org/docs/app/building-your-application/caching",target:"_blank",rel:"noopener noreferrer",children:"Building Your Application: Caching | Next.js"})}),"\n"]})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(g,{...e})}):g(e)}let f=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F14.%E7%BC%93%E5%AD%98%E7%AF%87%20_%20Caching%EF%BC%88%E4%B8%8A%EF%BC%89.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"概览",id:"概览",depth:2},{text:"1. 请求记忆（Request Memoization）",id:"1-请求记忆request-memoization",depth:2},{text:"1.1. 工作原理",id:"11-工作原理",depth:3},{text:"1.2. 持续时间",id:"12-持续时间",depth:3},{text:"1.3. 重新验证",id:"13-重新验证",depth:3},{text:"1.4. 退出方式",id:"14-退出方式",depth:3},{text:"1.5. React Cache",id:"15-react-cache",depth:3},{text:"2. 数据缓存（Data Cache）",id:"2-数据缓存data-cache",depth:2},{text:"2.1. 工作原理",id:"21-工作原理",depth:3},{text:"2.2. 持续时间",id:"22-持续时间",depth:3},{text:"2.3. 重新验证",id:"23-重新验证",depth:3},{text:"基于时间",id:"基于时间",depth:4},{text:"按需更新",id:"按需更新",depth:4},{text:"2.4. 退出方式",id:"24-退出方式",depth:3},{text:"3. 实战体会",id:"3-实战体会",depth:2},{text:"总结",id:"总结",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"14.缓存篇 _ Caching（上）",headingTitle:"14.缓存篇 _ Caching（上）",frontmatter:{}}}}]);