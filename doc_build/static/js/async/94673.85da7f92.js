"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["94673"],{669686:function(e,n,a){a.r(n),a.d(n,{default:()=>c});var s=a(552676),r=a(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",br:"br",ul:"ul",li:"li",strong:"strong",h2:"h2",h3:"h3",pre:"pre",code:"code",h4:"h4",blockquote:"blockquote",ol:"ol"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"29-现代前端生态中的函数式编程实践",children:["29 现代前端生态中的函数式编程实践",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#29-现代前端生态中的函数式编程实践",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["众所周知，无论哪种编程范式，只要我们与其磨合得足够默契，我们就能够借助它达成任何目的。",(0,s.jsx)(n.br,{}),"\n","函数式编程也是如此，只要我们足够熟悉它，我们就能够将它应用到任何场景中去。"]}),"\n",(0,s.jsx)(n.p,{children:"因此，函数式编程在前端领域的应用是极为广泛的，我们几乎能在任何一个前端技术分支里看到它的身影，这些分支包括但不限于："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"实用工具库：如 Ramda、Lodash-fp \xa0等"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"状态管理库：如 Redux、 MobX-State-Tree 等"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"视图库：如 React、Cycle.js 等"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"测试库：如 Jest、Cypress 等"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"不可变数据库：如 ImmutableJS、Immer.js 等"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"响应式编程库：RxJS、Bacon.js 等"}),(0,s.jsx)(n.br,{}),"\n","......"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"其中，状态管理库（代表作 Redux）、视图库（代表作 React）、不可变数据库（代表作 ImmutableJs 和 Immer.js）和响应式编程库（代表作 RxJS）我们在前文已经有过非常深入的探讨。"}),"\n",(0,s.jsx)(n.p,{children:"本节，我们将补充对实用工具库和测试库的分析。"}),"\n",(0,s.jsx)(n.p,{children:"此外，在小册的更新过程中，我注意到不少同学都是通过本册才第一次了解到以 Monad、Functor 为代表的盒子模式。为了强化大家的认知，我将在下一节引入更多的函数式工具库作为蓝本，进一步分析盒子模式在前端生态中的实践。"}),"\n",(0,s.jsxs)(n.h2,{id:"函数式编程工具库",children:["函数式编程工具库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数式编程工具库",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["目前市面上流行的函数式编程工具库有很多，但在我看来，最具有代表性的莫过于 ",(0,s.jsx)(n.strong,{children:"Ramda 和 Lodash-fp"}),"。",(0,s.jsx)(n.br,{}),"\n","Ramda 和 Lodash-fp 都是功能强大的函数式编程库。乍看之下，它们有许多共性：如自动柯里化、Data-Last、纯函数和不可变性等；细看之下，它们仍然像孪生兄弟一般相似：两者提供的函数数量、函数功能甚至函数性能都是非常接近的。"]}),"\n",(0,s.jsx)(n.p,{children:"Ramda 发布于 2013 年底，而 Lodash-fp 则发布于 2015 年初。 从时间顺序上来看，Lodash-fp 和 Ramda 之间的这些相似性似乎可以简单理解为 Lodash-fp 向 Ramda 的借鉴。 事实上，Lodash-fp 的开发者 John-David Dalton 也承认过 Ramda 对 Lodash-fp 的影响。因此，单从函数式编程思想的实践来说，Ramda 是当之无愧的先行者。"}),"\n",(0,s.jsxs)(n.p,{children:["尽管功能上有很大程度的重叠，但 Ramda 和 Lodash-fp 背后的设计哲学却是截然不同的—— ",(0,s.jsx)(n.strong,{children:"Lodash-fp 是在 Lodash 的基础上包了一层函数式的皮，而 Ramda 是在设计之初就是为函数式编程而生的。"})]}),"\n",(0,s.jsxs)(n.h2,{id:"ramda为函数式编程而生",children:["Ramda：为函数式编程而生",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ramda为函数式编程而生",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Ramda 是一个为 JavaScript 编程语言设计的函数式编程库，创立于2013年。在当时，创始人 Scott Sauyet 和 Michael Hurley 有感于主流 JavaScript 工具库在函数式编程方面的不足，他们的初心就是创建一个专为函数式编程设计的库，以此来填补行业的空白。"}),"\n",(0,s.jsxs)(n.h3,{id:"核心特征",children:["核心特征",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心特征",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Ramda 的几个核心特征包括：",(0,s.jsx)(n.strong,{children:"自动柯里化、Data-Last、纯函数和不可变性"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"自动柯里化",children:["自动柯里化",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自动柯里化",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Ramda 提供的所有函数都是自动柯里化的。柯里化的好处我们在",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7173591403639865377/section/7175423003319074876",target:"_blank",rel:"noopener noreferrer",children:"第15节"}),"有过充分的叙述，简单来说，柯里化有助于代码的重用，也为函数组合创造了便利。"]}),"\n",(0,s.jsxs)(n.p,{children:["自动柯里化，意味着",(0,s.jsx)(n.strong,{children:"函数默认就支持柯里化"}),"：当对多参数的函数仅传入一个参数时，则默认这个函数需要按照柯里化规则传参。当对多参数的函数一次性传入所有参数时，它依然可以进行正常的计算。如下面代码所示："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import R from 'ramda'\n\n// 自动柯里化的 add 函数\nconst add = R.add \n\n// 部分应用参数 5\nconst add5 = add(5) \n// 输出 8    \nconsole.log(add5(3)) \n\n\n// 一次性传入所有参数，输出 8\nconsole.log(add(5, 3))\n"})}),"\n",(0,s.jsx)(n.h3,{id:"",children:(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#",children:"#"})}),"\n",(0,s.jsxs)(n.h3,{id:"data-last",children:["Data-Last",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#data-last",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Ramda 的函数默认遵循 Data-Last 的原则，这意味着",(0,s.jsx)(n.strong,{children:"数据参数通常是函数的最后一个参数"}),"。这种设计有助于偏函数和函数组合的实现。下面是一个体现 Data-Last 原则的代码示例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const numbers = [1, 2, 3, 4]   \n// R.add(1) 返回一个函数，函数作为了第一个参数\nconst addOne = R.map(R.add(1))   \n// numbers 是数据，数据作为最后一个参数\nconsole.log(addOne(numbers)) \n"})}),"\n",(0,s.jsxs)(n.h4,{id:"why-data-last",children:["Why Data-Last？",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#why-data-last",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"为什么说 Data-Last 更有利于函数组合的实现？我们通过一个简单的例子来理解这个问题。"}),"\n",(0,s.jsx)(n.p,{children:"假设我们有两个函数库，一个使用 Data-First（DF）原则，另一个使用 Data-Last（DL）原则。现在我们需要处理一些数据，具体步骤是：先过滤出大于10的数字，然后将它们乘以2。"}),"\n",(0,s.jsx)(n.p,{children:"首先看 Data-First 的实现："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const filterDF = data => predicate => data.filter(predicate)\nconst mapDF = data => fn => data.map(fn)\n\n// 过滤大于10的数字\nconst greaterThan10 = num => num > 10\n// 乘以2\nconst multiplyBy2 = num => num * 2\n\n// 嵌套调用实现函数的组合\nconst processDataDF = data => mapDF(filterDF(data)(greaterThan10))(multiplyBy2)\n\nconst data = [5, 10, 15, 20]  \n// 输出 [30, 40]\nconsole.log(processDataDF(data)) \n"})}),"\n",(0,s.jsx)(n.p,{children:"现在再来看 Data-Last 的实现："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const filterDL = predicate => data => data.filter(predicate)\nconst mapDL = fn => data => data.map(fn)\n\n// compose 实现函数组合\nconst processDataDL = data => R.compose(mapDL(multiplyBy2), filterDL(greaterThan10))(data)\n\nconst data = [5, 10, 15, 20]\n// 输出 [30, 40]\nconsole.log(processDataDL(data)) \n"})}),"\n",(0,s.jsxs)(n.p,{children:["在这个例子中，Data-First 和 Data-Last 都可以达到目的。但是，在 Data-First 的实现中，我们不能使用像 ",(0,s.jsx)(n.code,{children:"R.compose"})," 、",(0,s.jsx)(n.code,{children:"R.pipe"}),"这样的函数将 ",(0,s.jsx)(n.code,{children:"filterDF"})," 和 ",(0,s.jsx)(n.code,{children:"mapDF"})," 预先组合在一起——因为数据参数是第一个参数。我们需要",(0,s.jsx)(n.strong,{children:"将数据显式地传递给"})," ",(0,s.jsx)(n.code,{children:"filterDF"}),"，然后将结果传递给 ",(0,s.jsx)(n.code,{children:"mapDF"}),"。",(0,s.jsx)(n.strong,{children:"这其实是一个嵌套调用的过程，嵌套调用在函数数量较多时，会导致代码难以阅读"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["相比之下，在 Data-Last 的实现中，我们可以利用函数组合（",(0,s.jsx)(n.code,{children:"R.compose"}),"）提前将 ",(0,s.jsx)(n.code,{children:"filterDL"})," 和 ",(0,s.jsx)(n.code,{children:"mapDL"})," 组合在一起。",(0,s.jsx)(n.strong,{children:"由于数据参数是最后一个参数，我们可以预先组合两个函数，而无需等待数据的到来"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"Data-Last 不仅仅有助于函数组合的实现，也有助于偏函数/柯里化的实现——当一个需要被偏函数/柯里化处理的函数同时具备函数和数据两种参数时，数据参数往往是动态的，而函数参数则相对稳定。因此，在偏函数/柯里化的过程中，将需要固定的函数参数放在前面，将动态的数据参数放在最后，可以使得函数更加通用和可复用。"}),"\n",(0,s.jsxs)(n.h3,{id:"纯函数",children:["纯函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#纯函数",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Ramda 在设计上鼓励使用纯函数。Ramda 自身提供的函数都是纯函数，这意味着它们的输出完全取决于其输入，而且不会产生副作用。通过使用 Ramda 的纯函数，用户可以更容易地编写纯函数，从而提高代码的可预测性和可测试性。"}),"\n",(0,s.jsxs)(n.h3,{id:"不可变性",children:["不可变性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#不可变性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Ramda 提供了一系列不可变的操作方法，例如 ",(0,s.jsx)(n.code,{children:"assoc"}),"、",(0,s.jsx)(n.code,{children:"dissoc"})," 等，这些方法不会修改原始数据，而是返回新的数据。这有助于保证数据的完整性和代码的可预测性。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const person = { name: 'Xiu Yan', age: 30 }\nconst updatedPerson = R.assoc('age', 31, person)\n\n// 输出 { name: 'Xiu Yan', age: 30 }\nconsole.log(person)   \n // 输出 { name: 'Xiu Yan', age: 31 }\nconsole.log(updatedPerson)    \n\n// false\nconsole.log(updatedPerson === person)\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"注：Ramda 提供的所有函数都遵循不可变原则。"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"lodash-fp为-lodash-披上函数式的外衣",children:["Lodash-fp：为 Lodash 披上函数式的外衣",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#lodash-fp为-lodash-披上函数式的外衣",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Lodash 起初的设计目标是为了解决 Underscore.js 在性能和 API 方面的问题，它的作者 John-David Dalton 意在创建一个更快、更一致且功能更丰富的实用工具库。因此，",(0,s.jsx)(n.strong,{children:"最初的 Lodash 并不完全符合函数式编程范式"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["而在函数式编程逐渐流行的过程中，许多开发者希望 Lodash 能够更好地支持函数式编程。为了满足这些需求，Lodash 的作者创建了一个 ",(0,s.jsx)(n.strong,{children:"Lodash 的子项目：Lodash-fp"}),"。",(0,s.jsx)(n.strong,{children:"Lodash-fp 为 Lodash 披上了一层函数式编程的“外衣”"})," ——它对 Lodash 原有的函数进行了改造，使其更符合函数式编程的原则。披上这层“外衣”后，Lodash-fp 也具备了以下的函数式特性："]}),"\n",(0,s.jsxs)(n.h3,{id:"自动柯里化与-data-last",children:["自动柯里化与 Data-Last",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自动柯里化与-data-last",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"和 Ramda 一样，Lodash-fp 中的函数也都是自动柯里化的，这意味着你可以提前传递部分参数，生成一个新的函数，稍后再传递剩余的参数。例如："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"import _ from \"lodash/fp\"   \n\n// 原始数据\nconst users = [\n  { id: 1, name: 'Xiu Yan', age: 28 },\n  { id: 2, name: 'You Hu', age: 24 },\n  { id: 3, name: 'Xiao Ce Sister', age: 32 },\n]\n\n// Lodash-fp 函数自动柯里化\nconst getNames = _.map(_.property('name'))\n\n// data-last，先传入迭代器，再传入数据\nconst names = getNames(users)\n\n// ['Xiu Yan', 'You Hu', 'Xiao Ce Sister']\nconsole.log(names) \n"})}),"\n",(0,s.jsxs)(n.p,{children:["上面的示例中，我们使用了 Lodash-fp 中的 ",(0,s.jsx)(n.code,{children:"_.map"})," 函数，和许多 Lodash-fp 导出的函数一样，它也是自动柯里化的。"]}),"\n",(0,s.jsxs)(n.p,{children:["注意：在传参顺序上，我们先传入了迭代器函数（",(0,s.jsx)(n.code,{children:"_.property('name')"}),"），然后再传入数据（users），因此",(0,s.jsx)(n.strong,{children:"这个例子同时也反映了 Lodash-fp 的 Data-Last 原则"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"纯函数与不可变性",children:["纯函数与不可变性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#纯函数与不可变性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 Lodash-fp 中，",(0,s.jsx)(n.strong,{children:"大部分函数都是纯函数和遵循不可变性原则的"}),"，但确实存在一些例外。以下是一些不符合纯函数和不可变性要求的 Lodash-fp 函数示例："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_.uniqueId"}),"：这个函数生成唯一的 ID。由于每次调用uniqueId函数都会生成一个新的唯一标识符，不能保证对于相同的输入有相同的输出，所以它不是一个纯函数。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_.random"}),"：这个函数生成一个随机数，在给定相同的输入时，可能会产生不同的输出，所以它也不是一个纯函数。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_.assign"}),"：这个函数用于将一个或多个源对象的属性分配给目标对象。它会直接修改目标对象。"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"注：以上仅仅是示例，实际的 Lodash-fp 库中还有更多类似的“危险”函数，由此可以看出纯函数和不可变性对于 Lodash-fp 来说并不是一个特别硬的原则。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["至此，我们已经知道，Lodash-fp 通过给 Lodash “套皮”，使得 Lodash 具备了一些函数式的特性（主要是自动柯里化和 Data-Last）。",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"那么这层函数式的“皮”是如何套到 Lodash 这个本体身上的呢？"})]}),"\n",(0,s.jsxs)(n.h3,{id:"原理分析如何为-lodash-套上函数式的皮",children:["原理分析：如何为 Lodash 套上函数式的“皮”",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#原理分析如何为-lodash-套上函数式的皮",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 Lodash-fp 的源码库中，有一个名为 convert.js 的核心模块，负责根据 lodash 的源码生成 lodash-fp。",(0,s.jsx)(n.br,{}),"\n","在 index.js 文件中，可以看到 lodash-fp 的入口就是这个 convert.js："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// index.js 源码\nmodule.exports = require('./convert')(require('lodash-compat').runInContext());\n"})}),"\n",(0,s.jsx)(n.p,{children:"convert.js 是 lodash-fp 的核心部分，它的关键逻辑提取如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// ... 省略部分代码 ...\n\n// wrap 函数负责将原始的 lodash 方法转换为 lodash-fp 风格\nvar wrap = function (name, func) {\n  var wrapper = wrappers[name];\n  if (wrapper) {\n    return wrapper(func);\n  }\n  var result;\n  each(listing.caps, function (cap) {\n    each(mapping.aryMethodMap[cap], function (otherName) {\n      if (name == otherName) {\n        // 调整函数参数数量\n        result = ary(func, cap);\n        // 重新排列函数参数，将数据参数放在最后\n        if (cap > 1 && !mapping.skipReargMap[name]) {\n          result = rearg(result, mapping.aryReargMap[cap]);\n        }\n        // 对函数进行柯里化\n        return !(result = curry(result, cap));\n      }\n    });\n    return !result;\n  });\n\n  return result || func;\n};\n\n// ... 省略部分代码 ...\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"整个 convert.js 的核心就在于这段 wrap 函数"}),"。",(0,s.jsx)(n.br,{}),"\n","在 wrap 函数中，会首先调用 ary 函数调整函数的参数数量。接着，调用 rearg 函数重新排列函数参数，实现 ",(0,s.jsx)(n.strong,{children:"Data-Last"}),"。最后，使用 curry 函数对调整过参数的函数进行",(0,s.jsx)(n.strong,{children:"柯里化"}),"。",(0,s.jsx)(n.br,{}),"\n","上述的每一步，对应到代码中是这样的："]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["调整函数参数数量：",(0,s.jsx)(n.code,{children:"result = ary(func, cap);"})," 这行代码调用 ary 函数来生成一个新的函数，该函数接受的参数数量由 cap 决定。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data-Last"}),"：",(0,s.jsx)(n.code,{children:"result = rearg(result, mapping.aryReargMap[cap]);"})," 这行代码使用 rearg 函数重新排列函数参数，将数据参数放在最后（具体的参数重排规则由 ",(0,s.jsx)(n.code,{children:"mapping.aryReargMap[cap]"})," 提供，",(0,s.jsx)(n.code,{children:"mapping.aryReargMap"})," 规则的设计是遵循 Data-Last 原则的）。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"自动柯里化"}),"：",(0,s.jsx)(n.code,{children:"result = curry(result, cap);"})," 这行代码调用 curry 函数对调整过参数的函数进行柯里化。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"经过上述转换后，原始的 Lodash 函数就变成了符合函数式编程风格的 Lodash-fp 函数。"}),"\n",(0,s.jsxs)(n.p,{children:["总结一下：Lodash-fp 是一个基于 Lodash 源代码生成的函数式编程库，它对 Lodash 中的存量函数进行了转换，转换后的函数具有",(0,s.jsx)(n.strong,{children:"自动柯里化、Data-Last"})," 等函数式编程特性。"]}),"\n",(0,s.jsxs)(n.h2,{id:"函数式的前端测试以-jest-为例",children:["函数式的前端测试：以 Jest 为例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数式的前端测试以-jest-为例",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在前端测试领域，函数式思想的实践往往表现在以下三个方面： ",(0,s.jsx)(n.strong,{children:"纯函数、不可变性、高阶函数"}),"。",(0,s.jsx)(n.br,{}),"\n","Jest、Cypress 和 Mocha 这三个测试库都在不同程度上实践了函数式编程思想，它们的函数式实践自然也都绕不开上述的三个函数式特性。这里我们以 Jest 为例，一起来看看这些特性是如何表现的。"]}),"\n",(0,s.jsxs)(n.h3,{id:"纯函数和不可变性",children:["纯函数和不可变性",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#纯函数和不可变性",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Jest 并没有强制要求开发者编写纯函数和使用不可变性，但它提供了相应的工具和方法来实现这些概念。",(0,s.jsx)(n.br,{}),"\n","在工具方面，Jest 的断言库中提供了一些用于比较对象的 matcher，如 toEqual、toMatchObject 和 toHaveProperty。这些 matcher 都会对比对象的属性和值，而不是对比对象的引用。这样可以确保开发者不会意外修改对象，从而保证",(0,s.jsx)(n.strong,{children:"不可变性"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["以下是一个借助 ",(0,s.jsx)(n.code,{children:"toEqual"}),"来检查数据是否被意外修改的测试用例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// 使用纯函数和不可变性原则编写测试用例\nit("should not modify the input array", () => {\n  // 原始数组\n  const inputArray = [1, 2, 3]\n  // 原始数组的副本\n  const originalArray = [...inputArray]\n  // 对原始数组执行目标函数\n  targetFunc(inputArray) \n  // 检查目标函数是否修改了原始数组的内容\n  expect(inputArray).toEqual(originalArray)\n})\n'})}),"\n",(0,s.jsx)(n.p,{children:"此外，Jest 还提供了其他一些工具和方法来帮助开发者编写纯函数和遵循不可变性原则，比如用于创建纯函数模拟的 jest.fn() 和用于断言不可变性的 jest-expect-immutable。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"注：Jest 还提供了 Mock 功能，Mock 功能可以用来隔离副作用（例如网络请求或者文件读写等），它使得测试可以更加可控、稳定和独立。"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"高阶函数",children:["高阶函数",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高阶函数",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Jest 在自身的接口设计上大范围使用了高阶函数，比如钩子函数 ",(0,s.jsx)(n.code,{children:"beforeEach"})," 和 ",(0,s.jsx)(n.code,{children:"afterEach"}),"，断言函数 ",(0,s.jsx)(n.code,{children:"expect"}),"，它们都是接受一个函数作为参数的高阶函数。"]}),"\n",(0,s.jsxs)(n.p,{children:["以下是 ",(0,s.jsx)(n.code,{children:"beforeEach"})," 和 ",(0,s.jsx)(n.code,{children:"afterEach"}),"的简单示意："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"beforeEach(() => {\n  // do something before each test\n});\n\nafterEach(() => {\n  // do something after each test\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这里的 ",(0,s.jsx)(n.code,{children:"beforeEach"})," 和 ",(0,s.jsx)(n.code,{children:"afterEach"})," 接受的参数都是一个函数，这个函数会在每个测试用例执行之前或之后执行。这两个函数作为钩子函数存在，允许我们在测试用例执行前后进行一些公共的操作，比如初始化一些数据、创建一些实例等等。",(0,s.jsx)(n.br,{}),"\n","此外，Jest 中的 ",(0,s.jsx)(n.code,{children:"describe"})," 和 ",(0,s.jsx)(n.code,{children:"it"})," 函数也都是高阶函数，这里不再赘述。"]}),"\n",(0,s.jsx)(n.p,{children:"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let c=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["JavaScript%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F29%20%E7%8E%B0%E4%BB%A3%E5%89%8D%E7%AB%AF%E7%94%9F%E6%80%81%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5.md"]={toc:[{text:"函数式编程工具库",id:"函数式编程工具库",depth:2},{text:"Ramda：为函数式编程而生",id:"ramda为函数式编程而生",depth:2},{text:"核心特征",id:"核心特征",depth:3},{text:"自动柯里化",id:"自动柯里化",depth:3},{text:"",id:"",depth:3},{text:"Data-Last",id:"data-last",depth:3},{text:"Why Data-Last？",id:"why-data-last",depth:4},{text:"纯函数",id:"纯函数",depth:3},{text:"不可变性",id:"不可变性",depth:3},{text:"Lodash-fp：为 Lodash 披上函数式的外衣",id:"lodash-fp为-lodash-披上函数式的外衣",depth:2},{text:"自动柯里化与 Data-Last",id:"自动柯里化与-data-last",depth:3},{text:"纯函数与不可变性",id:"纯函数与不可变性",depth:3},{text:"原理分析：如何为 Lodash 套上函数式的“皮”",id:"原理分析如何为-lodash-套上函数式的皮",depth:3},{text:"函数式的前端测试：以 Jest 为例",id:"函数式的前端测试以-jest-为例",depth:2},{text:"纯函数和不可变性",id:"纯函数和不可变性",depth:3},{text:"高阶函数",id:"高阶函数",depth:3}],title:"29 现代前端生态中的函数式编程实践",headingTitle:"29 现代前端生态中的函数式编程实践",frontmatter:{}}}}]);