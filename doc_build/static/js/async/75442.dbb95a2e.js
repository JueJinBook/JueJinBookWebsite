"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["75442"],{35430:function(e,s,n){n.r(s),n.d(s,{default:()=>V});var i=n(552676),a=n(740453);let r=n.p+"static/image/df5cebcead8de190c812280d262c92ae.3eaa316e.webp",c=n.p+"static/image/7023ca1745dfaec7a83f24d266983c0d.82ce15ac.webp",d=n.p+"static/image/da535134a1aed7433de49f98675feb2b.dcd6b83e.webp",t=n.p+"static/image/028b3585052b5b9acdd2775508a6852a.0eae5638.webp",p=n.p+"static/image/4019a6553c449afeff7ebe615b44ee4f.3d4ca133.webp",m=n.p+"static/image/df1531d2190d81fa9cb17c60c95cb99a.077150e6.gif",l=n.p+"static/image/26d7b40cc20dea79354218000143aeeb.2c7dd161.webp",o=n.p+"static/image/f37eabd6e34187d280c6fb574ebd026a.fc816d6c.webp",u=n.p+"static/image/3ab88d440fec73d47bafb7bccf2487ac.672f8b49.webp",j=n.p+"static/image/431a3a53b71f7bc519ff8b41cd6a40f3.d1969a65.webp",x=n.p+"static/image/dbabf8732878c67213dec131d1a89929.35503c61.webp",h=n.p+"static/image/6af67f6505952728e8559e43af7b2b0e.78322982.webp",g=n.p+"static/image/97be0b0b62a757cfa64d9c89d9c8eae1.084bfaab.webp",b=n.p+"static/image/27c066050cd3a1b62899a0c6351be69e.856fdb7f.webp",f=n.p+"static/image/08bed2e6a737143af873282e325f5201.b1c0610e.webp",v=n.p+"static/image/021b21537d21cc88df13000bafdf9850.96d505c7.webp",q=n.p+"static/image/25f4da8ca4077d8b21bbfceeefd37a73.243f1ecf.webp",w=n.p+"static/image/897d96002a555a2f0bc42a629d4a9796.2beb8822.webp",E=n.p+"static/image/68cc26acd7e2a99420a6a12f1446eee5.928fc7f3.webp",k=n.p+"static/image/b5491406fb78ce16864fe891e71cd87b.9759d580.webp",A=n.p+"static/image/d1055e4e0c9b57583f23f67a5757d679.a94ef95c.webp",C=n.p+"static/image/282d85d944fc6b83fcc6af7fa5d81ff9.db2add39.webp",M=n.p+"static/image/15dcb6c9bc57e8e236db6ad221b991c3.98eabc46.webp",_=n.p+"static/image/aef9da2a048087461e09e91f1fa64e82.2bafe1b2.webp",L=n.p+"static/image/8e79dc6dde0c6328069dbefe4b8da315.20f1316c.webp",P=n.p+"static/image/e5706cd66998a452954fb0100caa48a7.debc339e.webp",B=n.p+"static/image/4a6721c1612144b5b92bfed64ab020fa.12988a98.webp",y=n.p+"static/image/ad70b283c9d83367790c83bb41e55f13.440853ff.webp",Q=n.p+"static/image/00596a79f7359277c25fa0313655a292.f85b99a1.webp",N=n.p+"static/image/5e0b7679b8d307ac528522e41dde7c48.aa17b911.webp",W=n.p+"static/image/90195adeb724e562615fc59e22d9267b.fe5c849f.webp",D=n.p+"static/image/d09a7a4afb986f749f8a4b06309bd51b.74c90d8e.webp",S=n.p+"static/image/5762a6b65d84dfeaceaba93de020db95.77dd9a18.webp",R=n.p+"static/image/39d24ce84a4291525625bee0480b9d90.d7c06c1a.webp",F=n.p+"static/image/c8f51b83d258ef70ff0540eac5538252.1113ac65.webp",O=n.p+"static/image/dd2e97574899c771e1d4d6ccdaefc554.5c7caa5c.webp",T=n.p+"static/image/2832e100151e6d87a2dfb12ccdddc0bf.5ff52c7f.webp",G=n.p+"static/image/4377b3356ea63cf273ca017cd2ea50b8.47a5db4e.webp",I=n.p+"static/image/7ae9f3ece836a552e92920737fcb1a8f.94d31fe5.webp",J=n.p+"static/image/c093c996f280cb366f3ed4d24d948a97.b137f6f4.webp",z=n.p+"static/image/37dd2864d9a6c2cae10d79b5b93be1c2.9d5f6b92.webp",H=n.p+"static/image/dfee7795076e4a765d377a65521a7557.f23f8094.webp";function K(e){let s=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2",ul:"ul",li:"li"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.h1,{id:"第40章组件库实战构建esm和cjs产物发布到npm",children:["第40章—组件库实战：构建esm和cjs产物，发布到npm",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#第40章组件库实战构建esm和cjs产物发布到npm",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"\uFEFF我们已经写了很多组件了，比如 Calendar、Watermark、OnBoarding 等，但都是用 cra 或者 vite 单独创建项目来写的。"}),"\n",(0,i.jsx)(s.p,{children:"这节我们把它们整合一下，加上构建脚本，发布到 npm，做成和 Ant Design 一样的组件库。"}),"\n",(0,i.jsx)(s.p,{children:"组件库的构建我们上节分析过，就是构建出 esm、commonjs、umd 3 种格式的代码，再加上 css 的构建就好了。"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"ant design、arco design、semi design 都是这样。"}),"\n",(0,i.jsx)(s.p,{children:"我们再看几个组件库："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"mkdir tmp\ncd tmp\nnpm init -y\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:H,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"安装 react-bootstrap："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"pnpm install react-bootstrap\n"})}),"\n",(0,i.jsx)(s.p,{children:"（用 pnpm 安装，node_modules 下目录比较简洁）"}),"\n",(0,i.jsx)(s.p,{children:"看下 node_modules/react-bootstrap 的 package.json"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:z,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"可以看到，它也有 main 和 module，也就是 commonjs 和 es module 两种入口。"}),"\n",(0,i.jsx)(s.p,{children:"当你 import 的时候，引入的是 esm 的代码。"}),"\n",(0,i.jsx)(s.p,{children:"当你 require 的时候，引入的是 commonjs 的代码。"}),"\n",(0,i.jsx)(s.p,{children:"看一下 esm 和 cjs 下的代码："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:J,alt:""})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:I,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"当然，它也是支持 umd 的："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:G,alt:""})}),"\n",(0,i.jsxs)(s.p,{children:["看下 ",(0,i.jsx)(s.a,{href:"https://github.com/react-bootstrap/react-bootstrap/blob/master/tools/build.js#L101-L103",target:"_blank",rel:"noopener noreferrer",children:"build 脚本"}),"："]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:T,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"就是分别用 babel 编译出 commonjs 和 esm 的代码就可以了："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:O,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"用 tsc 也行。"}),"\n",(0,i.jsxs)(s.p,{children:["umd 格式代码也同样是 ",(0,i.jsx)(s.a,{href:"https://github.com/react-bootstrap/react-bootstrap/blob/master/tools/build.js#L64",target:"_blank",rel:"noopener noreferrer",children:"webpack 打包的"}),"："]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:F,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"不同于 antd、arco design 和 semi design，它就没有用 gulp 来组织流程。"}),"\n",(0,i.jsx)(s.p,{children:"gulp 本来就不是必须的，可用可不用。"}),"\n",(0,i.jsx)(s.p,{children:"甚至连单独的脚本都不需要，直接 tsc 编译就行："}),"\n",(0,i.jsxs)(s.p,{children:["比如这个 ",(0,i.jsx)(s.a,{href:"https://github.com/palantir/blueprint/blob/develop/packages/table/package.json#L22-L25",target:"_blank",rel:"noopener noreferrer",children:"blueprint 组件库"}),"："]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"之前总结的组件库的构建流程是没问题的："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"然后我们新建一个项目来试一下："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npx create-vite guang-components\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:D,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"进入项目，复制几个之前的组件过来："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:W,alt:""})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:N,alt:""})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:Q,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"复制 Calendar、Watermark、Message 这三个组件："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"然后安装下依赖："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npm install\n\nnpm install --save react-transition-group lodash-es dayjs classnames\n\nnpm i --save-dev @types/react-transition-group\n"})}),"\n",(0,i.jsx)(s.p,{children:"然后去掉 Calendar 和 Message 组件里样式的引入，css 和 js 是分开编译的："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:P,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"把这些没用的文件删掉："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:L,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"加一个 index.ts 来导出组件："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"import Calendar, { CalendarProps } from './Calendar';\nimport Watermark, { WatermarkProps } from './Watermark';\nimport { MessageProps, Position, MessageRef} from './Message';\nimport { useMessage } from './Message/useMessage';\nimport { ConfigProvider } from './Message/ConfigProvider';\n\nexport {\n    Calendar,\n    Watermark,\n    ConfigProvider,\n    useMessage\n}\n\nexport type {\n    CalendarProps,\n    WatermarkProps,\n    MessageProps,\n    Position,\n    MessageRef\n}\n"})}),"\n",(0,i.jsx)(s.p,{children:"接下来加上 tsc 和 sass 的编译："}),"\n",(0,i.jsx)(s.p,{children:"添加一个 tsconfig.build.json 的配置文件："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n    "compilerOptions": {\n      "declaration": true,\n      "allowSyntheticDefaultImports": true,\n      "target": "es2015",\n      "lib": ["ES2020", "DOM", "DOM.Iterable"],\n      "module": "ESNext",\n      "skipLibCheck": true,\n      "moduleResolution": "Node",\n      "resolveJsonModule": true,\n      "isolatedModules": true,\n      "jsx": "react-jsx",  \n      "allowImportingTsExtensions":null,\n      "strict": true,\n    },\n    "include": [\n      "src"\n    ],\n    "exclude": [\n      "src/**/*.test.tsx",\n      "src/**/*.stories.tsx"\n    ]\n}\n'})}),"\n",(0,i.jsx)(s.p,{children:"然后编译下："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"npx tsc -p tsconfig.build.json --module ESNext --outDir dist/esm\n\nnpx tsc -p tsconfig.build.json --module commonjs --outDir dist/cjs\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:M,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"看下 dist 的产物："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"没啥问题，esm 和 commonjs 格式的代码都生成了。"}),"\n",(0,i.jsx)(s.p,{children:"然后再编译下样式："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npx sass ./src/Calendar/index.scss ./dist/esm/Calendar/index.css\n\nnpx sass ./src/Calendar/index.scss ./dist/cjs/Calendar/index.css\n\nnpx sass ./src/Message/index.scss ./dist/esm/Message/index.css\n\nnpx sass ./src/Message/index.scss ./dist/cjs/Message/index.css\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"看下产物："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:q,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"没问题。"}),"\n",(0,i.jsx)(s.p,{children:"当然，sass 文件多了以后你可以写个 node 脚本来自动查找所有 sass 文件然后编译。"}),"\n",(0,i.jsx)(s.p,{children:"接下来只要把这个 dist 目录发到 npm 仓库就可以了。"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:'"main": "dist/cjs/index.js",\n"module": "dist/esm/index.js",\n"types": "dist/esm/index.d.ts",\n"files": [\n    "dist",\n    "package.json",\n    "README.md"\n],\n'})}),"\n",(0,i.jsx)(s.p,{children:"main 和 module 分别是 commonjs 和 es module 的入口。"}),"\n",(0,i.jsx)(s.p,{children:"types 是 dts 的路径。"}),"\n",(0,i.jsx)(s.p,{children:"files 是哪些文件发布到 npm 仓库，没列出来的会被过滤掉。"}),"\n",(0,i.jsx)(s.p,{children:"并且，还需要把 private: true 和 type: module 的字段给去掉。"}),"\n",(0,i.jsx)(s.p,{children:"然后我们来发布 npm 包："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npm adduser\n"})}),"\n",(0,i.jsx)(s.p,{children:"执行 npm adduser 命令，会打印一个链接让你登录或者注册："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"登录后就可以 npm publish 了："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"npm publish\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsxs)(s.p,{children:["发布完之后，在 ",(0,i.jsx)(s.a,{href:"https://www.npmjs.com",target:"_blank",rel:"noopener noreferrer",children:"https://www.npmjs.com"})," 就可以搜索到："]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"我们新建个项目来用用看："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npx create-vite guang-test\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"安装依赖："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"pnpm install\n\npnpm install guang-components\n"})}),"\n",(0,i.jsx)(s.p,{children:"在 App.tsx 里用一下："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"import { Watermark } from 'guang-components';\n\nconst App = () => {\n  return <Watermark\n    content={['测试水印', '神说要有光']}\n  >\n   <div style={{height: 800}}>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n   </div>\n  </Watermark>\n};\n\nexport default App;\n"})}),"\n",(0,i.jsx)(s.p,{children:"跑下开发服务："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npm run dev\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"浏览器访问下："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"再试下另外两个组件："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"import dayjs from 'dayjs';\nimport {Calendar} from 'guang-components';\nimport 'guang-components/dist/esm/Calendar/index.css';\n\nfunction App() {\n  return (\n    <div>\n      <Calendar value={dayjs('2024-07-01')}></Calendar>\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,i.jsx)(s.p,{children:"这里用到了 dayjs："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"pnpm install dayjs\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"这里样式受 index.css 影响了，去掉就好了："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"再来试下 Message 组件："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"import { ConfigProvider, useMessage } from \"guang-components\"\nimport 'guang-components/dist/esm/Message/index.css';\n\nfunction Aaa() {\n  const message = useMessage();\n\n  return <button onClick={() =>{\n    message.add({\n      content:'请求成功'\n    })\n  }}>成功</button>\n}\n\nfunction App() {\n\n  return (\n    <ConfigProvider>\n      <div>\n        <Aaa></Aaa>\n      </div>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"没啥问题。"}),"\n",(0,i.jsx)(s.p,{children:"然后我们优化下依赖："}),"\n",(0,i.jsx)(s.p,{children:"其实用到 guang-components 的项目都会安装 react 和 react-dom 包，不需要把它放在 dependencies 里。"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"而是放在 peerDependencies 里："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"它和 dependencies 一样，都是依赖，但是 dependencies 是子级，而 peerDependencies 是平级。"}),"\n",(0,i.jsx)(s.p,{children:"如果和其他 react 包的版本冲突时，dependencies 会保留一份副本，而 peerDependencies  会提示开发者去解决冲突，不会保留副本。"}),"\n",(0,i.jsx)(s.p,{children:"改下版本号，重新 npm publish："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"这样，我们的组件库的 npm 包就发布成功了！"}),"\n",(0,i.jsx)(s.p,{children:"再测试下 commonjs 的代码。"}),"\n",(0,i.jsx)(s.p,{children:"用 cra 创建个项目："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npx create-react-app --template=typescript tmp4\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"进入项目，安装组件库："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npm install --save guang-components\n"})}),"\n",(0,i.jsx)(s.p,{children:"在 App.tsx 用一下："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"const { Watermark } = require('guang-components');\n\nconst App = () => {\n  return <Watermark\n    content={['测试水印', '神说要有光']}\n  >\n   <div style={{height: 800}}>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos quod deserunt quidem quas in rem ipsam ut nesciunt asperiores dignissimos recusandae minus, eaque, harum exercitationem esse sapiente? Eveniet, id provident!</p>\n   </div>\n  </Watermark>\n};\n\nexport default App;\n"})}),"\n",(0,i.jsx)(s.p,{children:"注意，这次用 require 引入代码。"}),"\n",(0,i.jsx)(s.p,{children:"然后把开发服务跑起来："}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npm run start\n"})}),"\n",(0,i.jsx)(s.p,{children:"浏览器里看一下："}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsx)(s.p,{children:"没啥问题。"}),"\n",(0,i.jsxs)(s.p,{children:["案例代码上传了",(0,i.jsx)(s.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/guang-components",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,i.jsxs)(s.h2,{id:"总结",children:["总结",(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(s.p,{children:"今天我们把之前写过的部分组件封装成了组件库并发布到了 npm 仓库。"}),"\n",(0,i.jsx)(s.p,{children:"可以直接在项目里引入来用，和 antd 等组件库一样。"}),"\n",(0,i.jsx)(s.p,{children:"构建部分我们分析过很多组件库，都是一样的："}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"commonjs 和 esm 的代码通过 tsc 或者 babel 编译产生"}),"\n",(0,i.jsx)(s.li,{children:"umd 代码通过 webpack 打包产生"}),"\n",(0,i.jsx)(s.li,{children:"css 代码通过 sass 或者 less 等编译产生"}),"\n",(0,i.jsx)(s.li,{children:"dts 类型也是通过 tsc 编译产生"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"我们在 package.json 里配置了 main 和 module，分别声明 commonjs 和 es module 的入口，配置了 types 指定类型的入口。"}),"\n",(0,i.jsx)(s.p,{children:"然后通过 npm adduser 登录，之后 npm publish 发布到 npm。"}),"\n",(0,i.jsx)(s.p,{children:"这样，react 项目里就可以引入这个组件库来用了，之前写过的所有组件都可以加到这个组件库里。"})]})}function U(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,a.ah)(),e.components);return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(K,{...e})}):K(e)}let V=U;U.__RSPRESS_PAGE_META={},U.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC40%E7%AB%A0%E2%80%94%E7%BB%84%E4%BB%B6%E5%BA%93%E5%AE%9E%E6%88%98%EF%BC%9A%E6%9E%84%E5%BB%BAesm%E5%92%8Ccjs%E4%BA%A7%E7%89%A9%EF%BC%8C%E5%8F%91%E5%B8%83%E5%88%B0npm.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第40章—组件库实战：构建esm和cjs产物，发布到npm",headingTitle:"第40章—组件库实战：构建esm和cjs产物，发布到npm",frontmatter:{}}}}]);