"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["92494"],{318103:function(n,e,i){i.r(e),i.d(e,{default:()=>a});var r=i(552676),s=i(740453);let t=i.p+"static/image/2afa2b194af6ffc94f038024a08ead8b.68e4aef3.webp",l=i.p+"static/image/2799a0a61bbe29fef2e2b36a69aa146f.c043ae45.webp",c=i.p+"static/image/df0989939457e4a59c18554080697d8d.718b4875.webp",h=i.p+"static/image/d231f5f51ce6d770478fd0f423557a6c.edd59baa.webp";function d(n){let e=Object.assign({p:"p",strong:"strong",ul:"ul",li:"li",a:"a",h2:"h2",h3:"h3",pre:"pre",code:"code",blockquote:"blockquote",img:"img"},(0,s.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"为了项目能够长期健康的发展。代码的规范性建设非常重要。只有纪律严明的队伍才能不断打胜仗。"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"规范制定容易，执行的难度很大。"})," 比如你规定大街上抽烟罚款 200 元。但是让警察去执法难度就很大。代码规范也会遇到同样的问题，代码检查任务繁琐又缺乏技术含量，应该没有人愿意干这个苦差事，一般都是交个程序完成，这样才能成功地推行下去。"]}),"\n",(0,r.jsx)(e.p,{children:"这节课我们就来学习用工具实现组件库的规范化。"}),"\n",(0,r.jsx)(e.p,{children:"项目规范可以分为："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"编码规范；"}),"\n",(0,r.jsx)(e.li,{children:"项目结构规范；"}),"\n",(0,r.jsx)(e.li,{children:"文件命名规范；"}),"\n",(0,r.jsx)(e.li,{children:"git commit 版本规范；"}),"\n",(0,r.jsx)(e.li,{children:"工作流 workflow规范。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"本节只考虑前四部分。关于工作流部分，涉及到社区和团队合作方面，我们会另外开辟一节讲解。"}),"\n",(0,r.jsxs)(e.p,{children:["本章代码分支： ",(0,r.jsx)(e.a,{href:"https://github.com/smarty-team/smarty-admin/tree/chapter07",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/smarty-team/smarty-admin/tree/chapter07"})]}),"\n",(0,r.jsxs)(e.h2,{id:"用户故事userstory",children:["用户故事(UserStory)",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#用户故事userstory",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"引入项目规范，配置自动化检查工具，避免代码架构退化。"}),"\n",(0,r.jsxs)(e.h2,{id:"任务分解task",children:["任务分解(Task)",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#任务分解task",children:"#"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"编码与项目结构规范；"}),"\n",(0,r.jsx)(e.li,{children:"Eslint 代码检查工具；"}),"\n",(0,r.jsx)(e.li,{children:"Prettier 代码格式化工具；"}),"\n",(0,r.jsx)(e.li,{children:"Git commit 提交检查脚本；"}),"\n",(0,r.jsx)(e.li,{children:"Husky + git hook 提交前校验。"}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"任务实现",children:["任务实现",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#任务实现",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"编码规范",children:["编码规范",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码规范",children:"#"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"JS代码规范"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://link.juejin.cn/?target=https://github.com/lin-123/javascript",target:"_blank",rel:"noopener noreferrer",children:"airbnb-中文版"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://link.juejin.cn/?target=https://github.com/standard/standard/blob/master/docs/README-zhcn.md",target:"_blank",rel:"noopener noreferrer",children:"standard (24.5k star) 中文版"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://link.juejin.cn/?target=https://github.com/ecomfe/spec",target:"_blank",rel:"noopener noreferrer",children:"百度前端编码规范 3.9k"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"CSS代码规范"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://link.juejin.cn/?target=https://github.com/fex-team/styleguide/blob/master/css.md",target:"_blank",rel:"noopener noreferrer",children:"styleguide 2.3k"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://link.juejin.cn/?target=https://github.com/ecomfe/spec/blob/master/css-style-guide.md",target:"_blank",rel:"noopener noreferrer",children:"spec 3.9k"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"对于编码规范，通常会依赖 eslint 这种代码检查工具。 eslint 提供了 airbnb 、google、eslint默认三种编码规范。其实无论选择哪一种规则都可以很好地保证代码的可读性。所以大家使用 eslint 默认规则就好。"}),"\n",(0,r.jsx)(e.p,{children:"另外还有目录规范和文件命名规范也一并罗列出来。"}),"\n",(0,r.jsxs)(e.h3,{id:"目录规范",children:["目录规范",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#目录规范",children:"#"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:".\n├── config \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 # 配置文件\n├── coverage \xa0 \xa0 \xa0 \xa0 \xa0 \xa0# 覆盖率报告\n├── demo \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0# 代码范例\n├── docs \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0# 文档\n├── node_modules \xa0\n├── scripts \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0# 脚本 发布、提交信息检查\n├── src \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0# 组件代码\n└── types \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0# TS类型定义\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"文件命名规范",children:["文件命名规范",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#文件命名规范",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"以一个组件为例，代码规则如下："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"├── src \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 # 组件代码\n \xa0  └── button \xa0 \xa0 \xa0 # 组件包名\n \xa0 \xa0 \xa0 \xa0 ├── index.ts \xa0 # 组件入口\n \xa0 \xa0 \xa0 \xa0 ├── Button.tsx \xa0# 组件代码 \xa0\n \xa0 \xa0 \xa0 \xa0 └── __tests__ \xa0 # 测试用例\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0  └── Button.spec.ts \xa0 \n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"包名：小写 + 中划线；"}),"\n",(0,r.jsx)(e.li,{children:"统一入口文件： index.ts；"}),"\n",(0,r.jsx)(e.li,{children:"组件代码： 大驼峰；"}),"\n",(0,r.jsx)(e.li,{children:"测试用例代码 ： 测试对象名+ .spec.ts。"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"eslint--prettier-代码检查工具",children:["Eslint + Prettier 代码检查工具",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#eslint--prettier-代码检查工具",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"通常代码的检查工作交给 eslint 和 prettier 共同完成。其中 eslint 主要是完成对于代码语法的检查工作，比如：是否有声明但是没有使用的变量。而 prettier 主要专注于代码格式的调整功能。prettier 通常会以eslint 插件的形式使用，一般无需直接运行。"}),"\n",(0,r.jsx)(e.p,{children:"另外 eslint 在环境下还需要配置专门针对 Vue 框架的 eslint-plugin-vue 插件。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"pnpm i eslint -D\n# 7.规范化： Eslint + Prettier + Husky\npnpm i @typescript-eslint/parser -D\n# 内置各种解析 TypeScript rules 插件\npnpm i @typescript-eslint/eslint-plugin -D\n\npnpm i eslint-formatter-pretty -D\npnpm i eslint-plugin-json -D\npnpm i eslint-plugin-prettier -D\npnpm i eslint-plugin-vue -D\npnpm i @vue/eslint-config-prettier -D\npnpm i babel-eslint -D\npnpm i prettier -D\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:".eslintrc.cjs"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"module.exports = \xa0 {\n \xa0root: true,\n \xa0env: {\n \xa0 \xa0browser: true,\n \xa0 \xa0es2020: true,\n \xa0 \xa0node: true,\n \xa0 \xa0jest: true\n  },\n \xa0globals: {\n \xa0 \xa0ga: true,\n \xa0 \xa0chrome: true,\n \xa0 \xa0__DEV__: true\n  },\n \xa0// 解析 .vue 文件\n \xa0parser: 'vue-eslint-parser', \n \xa0extends: [\n \xa0 \xa0'plugin:json/recommended',\n \xa0 \xa0'plugin:vue/vue3-essential',\n \xa0 \xa0'eslint:recommended',\n \xa0 \xa0'@vue/prettier'\n  ],\n \xa0plugins: ['@typescript-eslint'],\n \xa0parserOptions: {\n \xa0 \xa0parser: '@typescript-eslint/parser' // 解析 .ts 文件\n  },\n \xa0rules: {\n \xa0 \xa0'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',\n \xa0 \xa0'no-debugger': process.env.NODE_ENV === 'production' ? 'warn' : 'off',\n \xa0 \xa0'prettier/prettier': 'error'\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:".eslintignore"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"*.sh\nnode_modules\nlib\ncoverage\n*.md\n*.scss\n*.woff\n*.ttf\nsrc/index.ts\ndist\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"package.json"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'{\n \xa0"scripts": {\n    "lint": "eslint --fix --ext .ts,.vue src",\n    "format": "prettier --write \\"src/**/*.ts\\" \\"src/**/*.vue\\"",\n  },\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"执行 pnpm lint 进行代码校验。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:"img"})}),"\n",(0,r.jsx)(e.p,{children:"果然首次运行的时候还是发现一些语法问题。稍微调整一下就可以通过了。"}),"\n",(0,r.jsxs)(e.h3,{id:"husky--git-hooks-自动化提交验证",children:["Husky + git hooks 自动化提交验证",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#husky--git-hooks-自动化提交验证",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"为了确保只有合格的代码才能够提交到仓库。 需要配置自动化脚本，确保代码在提交前通过了代码验证工具的检验。"}),"\n",(0,r.jsx)(e.p,{children:"实际上 git 本身就设计了生命周期钩子来完成这个任务。但是设置过程比较复杂。所以通常情况下会使用 husky 来简化配置。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"pnpm i husky -D\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在 ",(0,r.jsx)(e.code,{children:"package.json"})," 加上下面的代码。"]}),"\n",(0,r.jsx)(e.p,{children:"添加 husky 脚本："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'npm set-script prepare "husky install"\n'})}),"\n",(0,r.jsx)(e.p,{children:"首先配置一个钩子，在 commit 提交前，必须执行 lint 代码校验。"}),"\n",(0,r.jsx)(e.p,{children:"添加生命周期钩子："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'npx husky add .husky/pre-commit "pnpm lint"\n'})}),"\n",(0,r.jsx)(e.p,{children:"修改 hooks 程序。"}),"\n",(0,r.jsx)(e.p,{children:".husky/pre-commit"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'#!/bin/sh\n. "$(dirname "$0")/_/husky.sh"\n\npnpm run lint\n'})}),"\n",(0,r.jsx)(e.p,{children:"配置完成后，commit 一次代码测试一下是否有效。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:"img"})}),"\n",(0,r.jsx)(e.p,{children:"接着还需要配置在 push 之前通过单元测试的钩子。方法类似。"}),"\n",(0,r.jsx)(e.p,{children:"添加生命周期钩子："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'npx husky add .husky/pre-push "pnpm test:run"\n'})}),"\n",(0,r.jsx)(e.p,{children:"由于 vitest 默认是以伺服模式运行，所以需要写一个专门的脚本让测试运行在伺服模式下\npackages.json"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'  "scripts": {\n    "test:run": "vitest run",\n  },\n'})}),"\n",(0,r.jsx)(e.p,{children:"修改hooks程序。\n.husky/pre-push"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'#!/bin/sh\n. "$(dirname "$0")/_/husky.sh"\n\npnpm run test:run\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"git-commit-提交规范",children:["Git commit 提交规范",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#git-commit-提交规范",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"提交规范主要是为了让开发者提交完整的更新信息。方便查阅。大家可以围观一下 Vue 的 Github。拥有清晰 commit 信息非常有助于查阅代码。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:"img"})}),"\n",(0,r.jsx)(e.p,{children:"目前最为流行的提交信息规范来自于 Angular 团队。"}),"\n",(0,r.jsx)(e.p,{children:"规范中，主要就是要求提交内容要进行分类并填写内容，更为严格的规定是要求标注开发模块。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"type：commit 的类型；"}),"\n",(0,r.jsx)(e.li,{children:"feat：新功能、新特性；"}),"\n",(0,r.jsx)(e.li,{children:"fix: 修改 bug；"}),"\n",(0,r.jsx)(e.li,{children:"perf：更改代码，以提高性能；"}),"\n",(0,r.jsx)(e.li,{children:"refactor：代码重构（重构，在不影响代码内部行为、功能下的代码修改）；"}),"\n",(0,r.jsx)(e.li,{children:"docs：文档修改；"}),"\n",(0,r.jsx)(e.li,{children:"style：代码格式修改, 注意不是 css 修改（例如分号修改）；"}),"\n",(0,r.jsx)(e.li,{children:"test：测试用例新增、修改；"}),"\n",(0,r.jsx)(e.li,{children:"build：影响项目构建或依赖项修改；"}),"\n",(0,r.jsx)(e.li,{children:"revert：恢复上一次提交；"}),"\n",(0,r.jsx)(e.li,{children:"ci：持续集成相关文件修改；"}),"\n",(0,r.jsx)(e.li,{children:"chore：其他修改（不在上述类型中的修改）；"}),"\n",(0,r.jsx)(e.li,{children:"release：发布新版本；"}),"\n",(0,r.jsx)(e.li,{children:"workflow：工作流相关文件修改。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"示例："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"# 示例1\nfix(global):修复checkbox不能复选的问题\n# 示例2 下面圆括号里的 common 为通用管理的名称\nfix(common): 修复字体过小的BUG，将通用管理下所有页面的默认字体大小修改为 14px\n# 示例3\nfix: value.length -> values.length\n"})}),"\n",(0,r.jsx)(e.p,{children:"下面配置一个工具用于在提交时自动检查 commit 信息是否符合要求。"}),"\n",(0,r.jsx)(e.p,{children:"安装工具验证脚本 commitlint，并且配置一个 commitlint 内容插件来确定一种 msg 风格。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'# 安装commitlint\npnpm i -d @commitlint/config-conventional@"17.0.2" @commitlint/cli@"17.0.2"\n\n# Configure commitlint to use conventional config\necho "module.exports = {extends: [\'@commitlint/config-conventional\']}" > commitlint.config.js\n'})}),"\n",(0,r.jsx)(e.p,{children:"将 commitlint 脚本添加到 githooks 中， 让每次提交前都验证信息是否正常。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'npx husky add .husky/commit-msg ""\n'})}),"\n",(0,r.jsx)(e.p,{children:".husky/commit-msg"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'#!/bin/sh\n. "$(dirname "$0")/_/husky.sh"\n\nnpx --no -- commitlint --edit "$1"\n'})}),"\n",(0,r.jsx)(e.p,{children:"配置完成后，你可以测试一下。"}),"\n",(0,r.jsx)(e.p,{children:"当你提交代码没有按照规范填写 commit message 时，就会出现报错并且阻止你提交代码。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:"img"})}),"\n",(0,r.jsxs)(e.p,{children:["本章代码分支： ",(0,r.jsx)(e.a,{href:"https://github.com/smarty-team/smarty-admin/tree/chapter07",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/smarty-team/smarty-admin/tree/chapter07"})]}),"\n",(0,r.jsxs)(e.h2,{id:"复盘",children:["复盘",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#复盘",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"这节课是给组件库确定开发规范并且添加规范化检查工具。"}),"\n",(0,r.jsx)(e.p,{children:"代码规范大体可以分为目录规范、编码规范、提交规范。更重要的内容是介绍如何使用相应的工具来检查代码规范，保证项目的健康性。大体归纳如下："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"编码规范： ESLint （语法） + Prettier（格式）+ Husky (提交时自动检查)；"}),"\n",(0,r.jsx)(e.li,{children:"提交 Message ： commitlint(提交信息样式检查) + Husky (提交时自动检查)。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"ESLint 是通过对 AST 语法树的分析完成的检查，具有很好的扩展性，可以扩展很多功能，比如 vue2 与vue3 语法的不兼容性也可以通过相应的插件进行检测。甚至 Prettier 也是作为 ESLint 的插件执行的。假设在实际开发中有自定义规则，也推荐使用编写ESLint插件的形式完成。"}),"\n",(0,r.jsx)(e.p,{children:"代码规范的作用是为了提高代码的可读性，毕竟代码是人与机器的沟通媒介，机器可以不厌其烦的工作，而人类精力和记忆力都有限，需要更优秀的结构和形式来提高阅读效率。基于人类的有限的精力，代码规范化这个东西如果全部让人类手工完成并不合理，不合理就很难被推行下去，不过聪明的人类可以想到使用规范化工具，让机器来解决这个问题。"}),"\n",(0,r.jsx)(e.p,{children:"对于具体规范化规则的制定，我提倡一定要考虑到实现成本和收益。比如某个规则特别的复杂，但是对可读性没有明显的提高，而且不能使用现成的工具来实现，那这样的规则实际上不应该提倡。"}),"\n",(0,r.jsx)(e.p,{children:"最后留一些思考题帮助大家复习，也欢迎大家在评论区讨论。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Eslint 与 Prettier 的功能和区别 ？"}),"\n",(0,r.jsx)(e.li,{children:"Git commit Message 的规范是什么 ？"}),"\n",(0,r.jsx)(e.li,{children:"如何设置 githooks ？"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"下节课，我们将完成软件包的封装，下节课见。"})]})}function p(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}let a=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Vite%20%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98%2F7.%E8%A7%84%E8%8C%83%E5%8C%96%EF%BC%9A%20Eslint%20%2B%20Prettier%20%2B%20Husky.md"]={toc:[{text:"用户故事(UserStory)",id:"用户故事userstory",depth:2},{text:"任务分解(Task)",id:"任务分解task",depth:2},{text:"任务实现",id:"任务实现",depth:2},{text:"编码规范",id:"编码规范",depth:3},{text:"目录规范",id:"目录规范",depth:3},{text:"文件命名规范",id:"文件命名规范",depth:3},{text:"Eslint + Prettier 代码检查工具",id:"eslint--prettier-代码检查工具",depth:3},{text:"Husky + git hooks 自动化提交验证",id:"husky--git-hooks-自动化提交验证",depth:3},{text:"Git commit 提交规范",id:"git-commit-提交规范",depth:3},{text:"复盘",id:"复盘",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);