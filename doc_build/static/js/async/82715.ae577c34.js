"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["82715"],{695819:function(n,e,s){n.exports=s.p+"static/image/9544d9903e56de89137436bce124138e.7fcf6296.webp"},907241:function(n,e,s){n.exports=s.p+"static/image/ac02760ef9298324c387ac7d1c4a57a3.31c4530d.webp"},963451:function(n,e,s){s.r(e),s.d(e,{default:()=>E});var r=s(552676),a=s(740453);let t=s.p+"static/image/6bc7e60d82dce4cba47bca66044fa32c.4bc4aea1.webp",i=s.p+"static/image/65d83c67e59a7cdcd1b79c55e75de072.2054319f.webp",c=s.p+"static/image/972a540f029cfc64f344935d3dd10d59.eaf682e1.webp",d=s.p+"static/image/7d97e24d526324ec001ac41697a89081.03ddf0fe.webp",l=s.p+"static/image/eed39dc06230e10c7892156e5937229c.31ad2519.webp",p=s.p+"static/image/14b0a4133b52d5f299ab5974f54ca26b.562f0b91.webp",o=s.p+"static/image/aa3cb72210bffe27765340637f1e95f4.7c4b71b9.webp",h=s.p+"static/image/16402ef3d1b0f99e471bb5523d2b4f99.02823c46.webp",g=s.p+"static/image/983a0a42aab7c4ba70dbc7384db93384.ee3d0e15.gif",u=s.p+"static/image/8a09f0fa250f3263b6c164ef451b6e9b.c2313510.webp",x=s.p+"static/image/50767a7d0bc613c1fab70fbb46b4abd3.473de9d2.gif",m=s.p+"static/image/0630284589253a84bf459c4fc947a0cd.c1a83e28.webp",j=s.p+"static/image/48475d2f92a40af9e1b601f792321d0b.0eb35fbc.webp",f=s.p+"static/image/132126b8adb354770c287786c17b57c1.551fe18d.webp",b=s.p+"static/image/aaa60e6a76bbe43f080d0aeeac38a8d1.cfab552a.webp",S=s.p+"static/image/d2f0c8493ed56f2d9f4539e10cec1c53.97f56ddf.webp",v=s.p+"static/image/3f1929572d4b6924255940d5a10cad68.1074c8ac.webp",A=s.p+"static/image/5468aa75eaffab2a9f6e8d8582326685.5c333229.webp",y=s.p+"static/image/ba62c8a18884967ca6fc22524d48578c.dd98ce96.webp",q=s.p+"static/image/e4d190cb610e924d125039becca64610.a9dfa888.webp";var M=s(907241),R=s(695819);function w(n){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,a.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"198-nest-开发-graphql-服务实现-crud",children:["198. Nest 开发 GraphQL 服务：实现 CRUD",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#198-nest-开发-graphql-服务实现-crud",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"上节我们知道了什么是 graphql，它就是通过模式定义语言 SDL（Schema Definition Language) 定义对象和对象之间关系的 schema："}),"\n",(0,r.jsx)(e.p,{children:"比如："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-graphql",children:"const typeDefs = `\n  type Student {\n    id: String,\n    name: String,\n    sex: Boolean\n    age: Int\n  }\n\n  type Teacher {\n    id: String,\n    name: String,\n    age: Int,\n    subject: [String],\n    students: [Student]\n  }\n\n  type Query {\n    students: [Student],\n    teachers: [Teacher],\n  }\n\n  type Res {\n     success: Boolean\n     id: String\n  }\n\n  type Mutation {\n    addStudent(name:String! age:Int! sex:Boolean!): Res\n\n    updateStudent(id: String! name:String! age:Int! sex:Boolean!): Res\n\n    deleteStudent(id: String!): Res\n}\n\nschema {\n    mutation: Mutation\n    query: Query\n}\n`;\n"})}),"\n",(0,r.jsx)(e.p,{children:"这个 schema 只是类型，负责实现 schema 对应数据的部分叫做 resolver："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const students = [\n    {\n      id: '1',\n      name: async () => {\n        await '取数据';\n        return '光光'\n      },\n      sex: true,\n      age: 12\n    },\n    {\n      id: '2',\n      name:'东东',\n      sex: true,\n      age: 13\n    },\n    {\n      id: '3',\n      name:'小红',\n      sex: false,\n      age: 11\n    },\n];\n\nconst teachers = [\n  {\n    id: '1',\n    name: '神光',\n    sex: true,\n    subject: ['体育', '数学'],\n    age: 28,\n    students: students\n  }\n]\n\nconst resolvers = {\n    Query: {\n      students: () => students,\n      teachers: () => teachers\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"schema 结合 resolver，这样客户端就可以按照 schema 的结构来存取数据了："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:R,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:M,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这节我们在 Nest 里集成下 graphql。"}),"\n",(0,r.jsx)(e.p,{children:"新建个项目："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"nest new nest-graphql\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:q,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"进入项目，安装 graphql 和 apollo 的包："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"npm i @nestjs/graphql @nestjs/apollo @apollo/server graphql\n"})}),"\n",(0,r.jsx)(e.p,{children:"在 main.ts 引入 GraphQLModule："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:y,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver } from '@nestjs/apollo';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      typePaths: ['./**/*.graphql'],\n    })\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsx)(e.p,{children:"创建 schema 文件  schema.graphql"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-graphql",children:"type Student {\n  id: String,\n  name: String,\n  sex: Boolean\n  age: Int\n}\n\ntype Teacher {\n  id: String,\n  name: String,\n  age: Int,\n  subject: [String],\n  students: [Student]\n}\n\ntype Query {\n  students: [Student],\n  teachers: [Teacher],\n}\n\ntype Mutation {\n  addStudent(name:String! age:Int! sex:Boolean!): Res\n\n  updateStudent(id: String! name:String! age:Int! sex:Boolean!): Res\n\n  deleteStudent(id: String!): Res\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"这里直接复制的上节的 schema 定义。"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:A,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"语法高亮需要安装下 graphql 插件："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:v,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"然后定义它的 resolver："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"nest g resolver student\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:S,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"实现下 Query、Mutation 对应的逻辑："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\n\nconst students = [ \n    { id: 1, name: '光光', sex: true, age: 20},\n    { id: 2, name: '东东', sex: true, age: 21},\n    { id: 3, name: '小红', sex: false, age: 20},\n];\n\nconst teachers = [\n    { \n        id: 1, \n        name: \"小刚\", \n        age: 30, \n        subject: ['体育', '英语'],\n        students: students\n    },\n]\n\n@Resolver()\nexport class StudentResolver {\n\n    @Query(\"students\")\n    students() {\n        return students;\n    }\n\n\n    @Query(\"teachers\")\n    teachers() {\n        return teachers;\n    }\n\n    @Mutation()\n    addStudent(\n        @Args('name') name: string, \n        @Args('age') age: number, \n        @Args('sex') sex: boolean\n    ) {\n        const id = Math.floor(Math.random() * 1000);\n        students.push({\n            id,\n            name,\n            age,\n            sex\n        });\n        return {\n            id,\n            success: true\n        }\n    }\n\n    @Mutation()\n    updateStudent(\n        @Args('id') id,\n        @Args('name') name: string, \n        @Args('age') age: number, \n        @Args('sex') sex: boolean\n    ) { \n        const index = students.findIndex(item => {\n            return item.id === parseInt(id)\n        });\n\n        if(index ===-1) {\n            return {\n                id: null,\n                success: true\n            }\n        }\n\n        students[index].name = name;\n        students[index].age = age;\n        students[index].sex = sex;\n        return {\n            id,\n            success: true\n        }\n    }\n\n    @Mutation()\n    deleteStudent(@Args('id') id) { \n        const index = students.findIndex(item => {\n            return item.id === parseInt(id)\n        });\n        \n        if(index ===-1) {\n            return {\n                id: null,\n                success: true\n            }\n        }\n\n        students.splice(index, 1);\n        return {\n            id,\n            success: true\n        }\n    }\n      \n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"比较容易看懂，用 @Query 和 @Mutation 分别实现 Query 和 Mutation 对应的方法。"}),"\n",(0,r.jsx)(e.p,{children:"把服务跑起来："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"npm run start:dev\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:b,alt:""})}),"\n",(0,r.jsxs)(e.p,{children:["浏览器访问下 ",(0,r.jsx)(e.a,{href:"http://localhost:3000/graphql",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/graphql"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:f,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"右侧可以看到 schema 定义还有文档："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:j,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这个东西就是 graphql 的接口文档了。"}),"\n",(0,r.jsx)(e.p,{children:"我们在左侧输入下查询语法："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:x,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-graphql",children:"query Xxx {\n  students {\n    id\n    name\n    age\n  }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"对新手来说，写 query language 还是有点难度的，因为不熟悉。"}),"\n",(0,r.jsx)(e.p,{children:"上节那个 playground 就好很多，可以直接生成。"}),"\n",(0,r.jsx)(e.p,{children:"我们换上节的 playground："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver } from '@nestjs/apollo';\nimport { StudentResolver } from './student/student.resolver';\nimport { ApolloServerPluginLandingPageLocalDefault } from '@apollo/server/plugin/landingPage/default';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      typePaths: ['./**/*.graphql'],\n      playground: false,\n      plugins: [ApolloServerPluginLandingPageLocalDefault()],\n    })\n  ],\n  controllers: [AppController],\n  providers: [AppService, StudentResolver],\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsx)(e.p,{children:"刷新就可以看到换成 apollo 的 playground 的了："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:g,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"点击加号就可以生成查询。"}),"\n",(0,r.jsx)(e.p,{children:"试一下添加："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-graphql",children:"mutation Mutation($name: String!, $age: Int!, $sex: Boolean!) {\n  addStudent(name: $name, age: $age, sex: $sex) {\n    id\n    success\n  }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"再查一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"可以看到，添加成功了。"}),"\n",(0,r.jsx)(e.p,{children:"然后再来试下修改："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"修改成功！"}),"\n",(0,r.jsx)(e.p,{children:"试下删除："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"删除成功！"}),"\n",(0,r.jsx)(e.p,{children:"其实还少了个根据 id 查询的方法。"}),"\n",(0,r.jsx)(e.p,{children:"在 schema 里加一下："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:i,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"! 代表必填。"}),"\n",(0,r.jsx)(e.p,{children:"在 resolver 里加一下它的实现："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"@Query(\"studentById\")\nstudentById(@Args('id') id) {\n    return students.find(item => {\n        return item.id === id\n    });\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"查询成功！"}),"\n",(0,r.jsx)(e.p,{children:"至此，Nest + GrphQL 的 CRUD 就完成了。"}),"\n",(0,r.jsxs)(e.p,{children:["案例代码在",(0,r.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/nest-graphql",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"这节我们在 Nest 里集成了 GraphQL，并做了 CRUD。"}),"\n",(0,r.jsx)(e.p,{children:"graphql 主要是分为 schema、resolver 两部分。"}),"\n",(0,r.jsx)(e.p,{children:"GraphQLModule.forRoot 指定 typePaths 也就是 schema 文件的位置。"}),"\n",(0,r.jsx)(e.p,{children:"然后用 nest g resolver 生成 resolver 文件，实现 Query、Mutaion 的方法。"}),"\n",(0,r.jsx)(e.p,{children:"并且还可以切换 playground 为 apollo 的。"}),"\n",(0,r.jsx)(e.p,{children:"之后就可以在 palyground 里发送 graphql 请求，做 CRUD 了。"})]})}function Q(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(w,{...n})}):w(n)}let E=Q;Q.__RSPRESS_PAGE_META={},Q.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F198.%20Nest%20%E5%BC%80%E5%8F%91%20GraphQL%20%E6%9C%8D%E5%8A%A1%EF%BC%9A%E5%AE%9E%E7%8E%B0%20CRUD.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"198. Nest 开发 GraphQL 服务：实现 CRUD",headingTitle:"198. Nest 开发 GraphQL 服务：实现 CRUD",frontmatter:{}}}}]);