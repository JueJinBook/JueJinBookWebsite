"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["74710"],{910155:function(e,n,r){r.r(n),r.d(n,{default:()=>A});var c=r(552676),l=r(740453);let s=r.p+"static/image/43076b9e67566097f704a181d3e98c7d.2aabd46a.webp",i=r.p+"static/image/459cf2f27f1551d205186cab511eea61.be0786d7.webp",d=r.p+"static/image/0001ab09fad3299e3c55d4cc39304933.6f9578b7.webp",o=r.p+"static/image/f9509ca0b81ffca210d7f80ca9588c08.bb14995c.webp",a=r.p+"static/image/9c96cd494a8a6b3385096df0d1d2324b.9eb19952.webp",h=r.p+"static/image/0663fec482ba6eee1900accb6e4b7592.027a58ff.webp",t=r.p+"static/image/486f2116c0ce3cf11d4bbecfe809c531.8d002a8d.webp",p=r.p+"static/image/e466180010d94a3f8355883523d4a774.ea763276.webp",j=r.p+"static/image/2770c216280c79041795153b40db8d3d.b6ab17c4.webp",x=r.p+"static/image/2b40fae73757519ad17db674afbdf86c.f48acfb4.webp",b=r.p+"static/image/31482514b582cf994c3f10f56c4e9c9f.52298624.webp",m=r.p+"static/image/a531bafdb927c26c7ea4b6cc82f1e112.29f743d8.webp",k=r.p+"static/image/f000692a1a99a4e14043d8e909c8f103.b2412f92.webp",u=r.p+"static/image/6b2ccdfd26c99211407de5026f719c4d.abd58bf9.webp",g=r.p+"static/image/d933171678672d420f73db1724e57592.b6f4b061.webp",f=r.p+"static/image/5742aef848f48312f8c19ef293463ee9.0f5f5ebf.webp",w=r.p+"static/image/10d6e799ea49e8486448ab04bef73d30.783de271.webp";function E(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",img:"img",ol:"ol",li:"li",code:"code",blockquote:"blockquote",h2:"h2",ul:"ul",pre:"pre"},(0,l.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"24initmakeseal真正读懂-webpack-核心流程",children:["24.Init、Make、Seal：真正读懂 Webpack 核心流程",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#24initmakeseal真正读懂-webpack-核心流程",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"前面章节中，我们详细讲解了 Webpack 的基本应用、性能优化、Loader 与 Plugin 组件开发方方面面的知识，相信学习过这些内容之后，你已经对 Webpack 有相当深入的理解了，可以开始从更底层的视角，自底向上重新审视 Webpack 实现原理。"}),"\n",(0,c.jsxs)(n.p,{children:["Webpack 的功能集非常庞大：模块打包、代码分割、按需加载、Hot Module Replacement、文件监听、Tree-shaking、Sourcemap、Module Federation、Dev Server、DLL、多进程打包、Persistent Cache 等等，但抛开这些花里胡哨的能力，最最核心的功能依然是：",(0,c.jsx)(n.strong,{children:"At its core, webpack is a static module bundler for modern"})," ",(0,c.jsx)(n.strong,{children:"JavaScript"})," ",(0,c.jsx)(n.strong,{children:"applications"}),"，也就是所谓的",(0,c.jsx)(n.strong,{children:"静态模块打包能力"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:w,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"Webpack 能够将各种类型的资源 —— 包括图片、音视频、CSS、JavaScript 代码等，通通转译、组合、拼接、生成标准的、能够在不同版本浏览器兼容执行的 JavaScript 代码文件，这一特性能够轻易抹平开发 Web 应用时处理不同资源的逻辑差异，使得开发者以一致的心智模型开发、消费这些不同的资源文件。"}),"\n",(0,c.jsx)(n.p,{children:"打包功能的底层实现逻辑很复杂，抛去大多数分支逻辑后，大致包含如下步骤："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:f,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"为了方便理解，我把上述过程划分为三个阶段："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:g,alt:"image.png"})}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"初始化阶段"}),"：修整配置参数，创建 Compiler、Compilation 等基础对象，并初始化插件及若干内置工厂、工具类，并最终根据 ",(0,c.jsx)(n.code,{children:"entry"})," 配置，找到所有入口模块；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"构建阶段"}),"：从 ",(0,c.jsx)(n.code,{children:"entry"})," 文件开始，调用 ",(0,c.jsx)(n.code,{children:"loader"})," 将模块转译为 JavaScript 代码，调用 ",(0,c.jsx)(n.a,{href:"https://github.com/acornjs/acorn",target:"_blank",rel:"noopener noreferrer",children:"Acorn"})," 将代码转换为 AST 结构，遍历 AST 从中找出该模块依赖的模块；之后 ",(0,c.jsx)(n.strong,{children:"递归"})," 遍历所有依赖模块，找出依赖的依赖，直至遍历所有项目资源后，构建出完整的 ",(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.a,{href:"https://webpack.js.org/concepts/dependency-graph/",target:"_blank",rel:"noopener noreferrer",children:"模块依赖关系图"})}),"；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"生成阶段"}),"：根据 ",(0,c.jsx)(n.code,{children:"entry"})," 配置，将模块组装为一个个 Chunk 对象，之后调用一系列 Template 工厂类翻译 Chunk 代码并封装为 Asset，最后写出到文件系统。"]}),"\n"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["提示：单次构建过程自上而下按顺序执行，如果启动了 ",(0,c.jsx)(n.code,{children:"watch"})," ，则构建完成后不会退出 Webpack 进程，而是持续监听文件内容，发生变化时回到「",(0,c.jsx)(n.strong,{children:"构建"}),"」阶段重新执行构建。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["三个阶段环环相扣，「",(0,c.jsx)(n.strong,{children:"初始化"}),"」的重点是根据用户配置设置好构建环境；「",(0,c.jsx)(n.strong,{children:"构建阶段"}),"」则重在解读文件输入与文件依赖关系；最后在「",(0,c.jsx)(n.strong,{children:"生成阶段"}),"」按规则组织、包装模块，并翻译为适合能够直接运行的产物包。三者结合，实现 Webpack 最核心的打包能力，其它功能特性也几乎都是在此基础上，通过 Hook 介入、修改不同阶段的对象状态、流程逻辑等方式实现。"]}),"\n",(0,c.jsx)(n.p,{children:"可以说，深度理解这三个阶段，才算是真正掌握了 Webpack 核心原理，所以接下来，让我们一起深入底层源码，剖析各阶段的具体实现。"}),"\n",(0,c.jsxs)(n.h2,{id:"初始化阶段",children:["初始化阶段",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化阶段",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["初始化阶段主要完成三个功能：修整 & 校验配置对象、运行插件、调用 ",(0,c.jsx)(n.code,{children:"compiler.compile"})," 方法开始执行构建操作，代码比较简单，如下图："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:u,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"首先，校验用户参数，并合并默认配置对象："}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["启动时，首先将 ",(0,c.jsx)(n.code,{children:"process.args"})," 参数与 ",(0,c.jsx)(n.code,{children:"webpack.config.js"})," 文件合并成用户配置；"]}),"\n",(0,c.jsxs)(n.li,{children:["调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/validateSchema.js#L77-L78",target:"_blank",rel:"noopener noreferrer",children:"validateSchema"})," 校验配置对象（",(0,c.jsx)(n.code,{children:"validateSchema"})," 底层依赖于 ",(0,c.jsx)(n.a,{href:"https://www.npmjs.com/package/schema-utils",target:"_blank",rel:"noopener noreferrer",children:"schema-utils"})," 库）；"]}),"\n",(0,c.jsxs)(n.li,{children:["调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/config/normalization.js#L116-L117",target:"_blank",rel:"noopener noreferrer",children:"getNormalizedWebpackOptions"})," + ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/config/defaults.js#L120-L121",target:"_blank",rel:"noopener noreferrer",children:"applyWebpackOptionsBaseDefaults"})," 合并出最终配置。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"之后，创建 Compiler 对象并开始启动插件："}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/webpack.js#L61-L62",target:"_blank",rel:"noopener noreferrer",children:"createCompiler"})," 函数创建 ",(0,c.jsx)(n.code,{children:"compiler"})," 对象。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/webpack.js#L68-L69",target:"_blank",rel:"noopener noreferrer",children:"遍历"})," 配置中的 ",(0,c.jsx)(n.code,{children:"plugins"})," 集合，执行插件的 ",(0,c.jsx)(n.code,{children:"apply"})," 方法。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/webpack.js#L80-L81",target:"_blank",rel:"noopener noreferrer",children:"调用"})," ",(0,c.jsx)(n.code,{children:"new WebpackOptionsApply().process"})," 方法，根据配置内容动态注入相应插件，包括：","\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/EntryOptionPlugin.js",target:"_blank",rel:"noopener noreferrer",children:"EntryOptionPlugin"})," 插件，该插件根据 ",(0,c.jsx)(n.code,{children:"entry"})," 值注入 ",(0,c.jsx)(n.code,{children:"DynamicEntryPlugin"})," 或 ",(0,c.jsx)(n.code,{children:"EntryPlugin"})," 插件；"]}),"\n",(0,c.jsxs)(n.li,{children:["根据 ",(0,c.jsx)(n.code,{children:"devtool"})," 值注入 Sourcemap 插件，包括：",(0,c.jsx)(n.code,{children:"SourceMapDevToolPlugin"}),"、",(0,c.jsx)(n.code,{children:"EvalSourceMapDevToolPlugin"})," 、",(0,c.jsx)(n.code,{children:"EvalDevToolModulePlugin"}),"；"]}),"\n",(0,c.jsxs)(n.li,{children:["注入 ",(0,c.jsx)(n.code,{children:"RuntimePlugin"})," ，用于根据代码内容动态注入 webpack 运行时。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsxs)(n.strong,{children:["最后，调用 ",(0,c.jsx)(n.code,{children:"compiler.compile"})," 方法开始执行构建"]}),"，这一步非常重要，源码："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// webpack/lib/compiler.js \ncompile(callback) {\n    const params = this.newCompilationParams();\n    this.hooks.beforeCompile.callAsync(params, err => {\n      // ...\n      const compilation = this.newCompilation(params);\n      this.hooks.make.callAsync(compilation, err => {\n        // ...\n        this.hooks.finishMake.callAsync(compilation, err => {\n          // ...\n          process.nextTick(() => {\n            compilation.finish(err => {\n              // ...\n              compilation.seal(err => {\n                // ...\n                this.hooks.afterCompile.callAsync(compilation, err => {\n                    if (err) return callback(err);\n                    return callback(null, compilation);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n"})}),"\n",(0,c.jsxs)(n.p,{children:["虽然 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compiler.js#L1159-L1160",target:"_blank",rel:"noopener noreferrer",children:"compile"})," 方法并没有任何实质的功能逻辑，但它搭建起了后续构建流程框架："]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["调用 ",(0,c.jsx)(n.code,{children:"newCompilation"})," 方法创建 ",(0,c.jsx)(n.code,{children:"compilation"})," 对象；"]}),"\n",(0,c.jsxs)(n.li,{children:["触发 ",(0,c.jsx)(n.code,{children:"make"})," 钩子，紧接着 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/EntryPlugin.js#L47-L49",target:"_blank",rel:"noopener noreferrer",children:"EntryPlugin"})," 在这个钩子中调用 ",(0,c.jsx)(n.code,{children:"compilation"})," 对象的 ",(0,c.jsx)(n.code,{children:"addEntry"})," 方法创建入口模块，主流程开始进入「",(0,c.jsx)(n.strong,{children:"构建阶段"}),"」；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"make"})," 执行完毕后，触发 ",(0,c.jsx)(n.code,{children:"finishMake"})," 钩子；"]}),"\n",(0,c.jsxs)(n.li,{children:["执行 ",(0,c.jsx)(n.code,{children:"compilation.seal"})," 函数，进入「",(0,c.jsx)(n.strong,{children:"生成阶段"}),"」，开始封装 Chunk，生成产物；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"seal"})," 函数结束后，触发 ",(0,c.jsx)(n.code,{children:"afterCompile"})," 钩子，开始执行收尾逻辑。"]}),"\n"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["提示：",(0,c.jsx)(n.code,{children:"compile"})," 函数是后续所有功能逻辑的起点，非常重要，请务必前往阅读 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compiler.js#L1159-L1160",target:"_blank",rel:"noopener noreferrer",children:"源码"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["调用 ",(0,c.jsx)(n.code,{children:"compile"})," 函数触发 ",(0,c.jsx)(n.code,{children:"make"})," 钩子后，初始化阶段就算是结束了，流程逻辑开始进入「",(0,c.jsx)(n.strong,{children:"构建阶段"}),"」。"]}),"\n",(0,c.jsxs)(n.h2,{id:"构建阶段",children:["构建阶段",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建阶段",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["「",(0,c.jsx)(n.strong,{children:"构建阶段"}),"」从 ",(0,c.jsx)(n.code,{children:"entry"})," 模块开始递归解析模块内容、找出模块依赖，按图索骥逐步构建出项目整体 ",(0,c.jsx)(n.code,{children:"module"})," 集合以及 ",(0,c.jsx)(n.code,{children:"module"})," 之间的 ",(0,c.jsx)(n.a,{href:"https://webpack.js.org/concepts/dependency-graph/",target:"_blank",rel:"noopener noreferrer",children:"依赖关系图"}),"，这个阶段的主要作用就是读入并理解所有原始代码。"]}),"\n",(0,c.jsxs)(n.p,{children:["实现上，在上述「",(0,c.jsx)(n.strong,{children:"初始化阶段"}),"」的最后，",(0,c.jsx)(n.code,{children:"compiler.compile"})," 函数会触发 ",(0,c.jsx)(n.code,{children:"compiler.hook.make"})," 钩子，",(0,c.jsx)(n.code,{children:"EntryPlugin"})," 监听该钩子并开始调用 ",(0,c.jsx)(n.code,{children:"compilation.addEntry"})," 添加入口："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'class EntryPlugin {\n    apply(compiler) {\n        const { entry, options, context } = this;\n        // 创建入口 Dependency 对象\n        const dep = EntryPlugin.createDependency(entry, options);\n\n        compiler.hooks.make.tapAsync("EntryPlugin", (compilation, callback) => {\n            compilation.addEntry(context, dep, options, err => {\n                callback(err);\n            });\n        });\n    }\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"addEntry"})," 之后的执行逻辑："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:k,alt:"image.png"})}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L1476-L1477",target:"_blank",rel:"noopener noreferrer",children:"handleModuleCreation"}),"，根据文件类型构建 ",(0,c.jsx)(n.code,{children:"module"})," 子类 —— 一般是 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/NormalModule.js",target:"_blank",rel:"noopener noreferrer",children:"NormalModule"}),"；"]}),"\n",(0,c.jsxs)(n.li,{children:["调用 ",(0,c.jsx)(n.a,{href:"https://www.npmjs.com/package/loader-runner",target:"_blank",rel:"noopener noreferrer",children:"loader-runner"})," 转译 ",(0,c.jsx)(n.code,{children:"module"})," 内容，将各类资源类型转译为 Webpack 能够理解的标准 JavaScript 文本；"]}),"\n",(0,c.jsxs)(n.li,{children:["调用 ",(0,c.jsx)(n.a,{href:"https://www.npmjs.com/package/acorn",target:"_blank",rel:"noopener noreferrer",children:"acorn"})," 将 JavaScript 代码解析为 AST 结构；"]}),"\n",(0,c.jsxs)(n.li,{children:["在 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/javascript/JavascriptParser.js",target:"_blank",rel:"noopener noreferrer",children:"JavaScriptParser"})," 类中遍历 AST，触发各种钩子，其中最关键的：","\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["遇到 ",(0,c.jsx)(n.code,{children:"import"})," 语句时，触发 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/javascript/JavascriptParser.js#L1983-L1984",target:"_blank",rel:"noopener noreferrer",children:"exportImportSpecifier"})," 钩子；"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/HarmonyExportDependencyParserPlugin.js#L153-L154",target:"_blank",rel:"noopener noreferrer",children:"HarmonyExportDependencyParserPlugin"})," 监听该钩子，将依赖资源添加为 Dependency 对象；"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["调用 ",(0,c.jsx)(n.code,{children:"module"})," 对象的 ",(0,c.jsx)(n.code,{children:"addDependency"}),"， 将 Dependency 对象转换为 Module 对象并添加到依赖数组中。"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:m,alt:"image.png"})}),"\n",(0,c.jsxs)(n.ol,{start:"5",children:["\n",(0,c.jsxs)(n.li,{children:["AST 遍历完毕后，调用 ",(0,c.jsx)(n.code,{children:"module.handleParseResult"})," 处理模块依赖数组；"]}),"\n",(0,c.jsxs)(n.li,{children:["对于 ",(0,c.jsx)(n.code,{children:"module"})," 新增的依赖，调用 ",(0,c.jsx)(n.code,{children:"handleModuleCreate"}),"，控制流回到第一步；"]}),"\n",(0,c.jsx)(n.li,{children:"所有依赖都解析完毕后，构建阶段结束。"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["过程中模块源码经历了 ",(0,c.jsx)(n.code,{children:"module => ast => dependences => module"})," 的流转，先将源码解析为 AST 结构，再在 AST 中遍历 ",(0,c.jsx)(n.code,{children:"import"})," 等模块导入语句，收集模块依赖数组 —— ",(0,c.jsx)(n.code,{children:"dependences"}),"，最后遍历 ",(0,c.jsx)(n.code,{children:"dependences"})," 数组将 Dependency 转换为 Module 对象，之后递归处理这些新的 Module，直到所有项目文件处理完毕。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["提示：这个过程会调用 acorn 将模块内容 —— 包括 JS、CSS，甚至多媒体文件，解析为 AST 结构，所以需要使用 ",(0,c.jsx)(n.code,{children:"loaders"})," 将不同类型的资源转译为标准 JavaScript 代码。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这个递归处理流程是「",(0,c.jsx)(n.strong,{children:"构建阶段"}),"」的精髓，我们来看个例子，假设对于下图这种简单模块依赖关系："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:b,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["其中 ",(0,c.jsx)(n.code,{children:"index.js"})," 为 entry 文件，依赖于 a/b 文件；a 依赖于 c/d 文件。初始化编译环境之后，",(0,c.jsx)(n.code,{children:"EntryPlugin"})," 根据 ",(0,c.jsx)(n.code,{children:"entry"})," 配置找到 ",(0,c.jsx)(n.code,{children:"index.js"})," 文件，并调用 ",(0,c.jsx)(n.code,{children:"compilation.addEntry"})," 函数将之添加为 Module 对象，触发构建流程，构建完毕后内部会生成这样的数据结构："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:x,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["之后，调用 Acorn 将 ",(0,c.jsx)(n.code,{children:"index.js"})," 代码解析为 AST，并遍历 AST 找到 ",(0,c.jsx)(n.code,{children:"index.js"})," 文件的依赖："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["得到两个新的依赖对象：",(0,c.jsx)(n.code,{children:"dependence[a.js]"})," 与 ",(0,c.jsx)(n.code,{children:"dependence[b.js]"})," ，这是下一步操作的关键线索，紧接着调用 ",(0,c.jsx)(n.code,{children:"module[index.js]"})," 的 ",(0,c.jsx)(n.code,{children:"handleParseResult"})," 函数处理这两个依赖对象，得到 a、b 两个新的 Module 对象："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["接着，又触发 ",(0,c.jsx)(n.code,{children:"module[a/b]"})," 的 ",(0,c.jsx)(n.code,{children:"handleModuleCreation"})," 方法，从 ",(0,c.jsx)(n.code,{children:"a.js"})," 模块中又解析到 ",(0,c.jsx)(n.code,{children:"c.js/d.js"})," 两个新依赖，于是再继续调用 ",(0,c.jsx)(n.code,{children:"module[a]"})," 的 ",(0,c.jsx)(n.code,{children:"handleParseResult"}),"，递归上述流程："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["最终得到 ",(0,c.jsx)(n.code,{children:"a/b/c/d"})," 四个 Module 与对应的 Dependency 对象："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"提示：Dependency、Module、Entry 等都是 Webpack 内部非常重要的基本类型，在后续章节中我们会单独展开这几个类型的基本涵义与相互之间的关系。"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"到这里解析完所有模块，没有新的依赖后就可以继续推进，进入「生成阶段」。"}),"\n",(0,c.jsxs)(n.h2,{id:"生成阶段",children:["生成阶段",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#生成阶段",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["「构建阶段」负责读入与分析源代码文件，将之一一转化为 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Module.js",target:"_blank",rel:"noopener noreferrer",children:"Module"}),"、",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Dependency.js",target:"_blank",rel:"noopener noreferrer",children:"Dependency"})," 对象，解决的是资源“输入”问题；而「生成阶段」则负责根据一系列内置规则，将上一步构建出的所有 Module 对象拆分编排进若干 Chunk 对象中，之后以 Chunk 粒度将源码转译为适合在目标环境运行的产物形态，并写出为产物文件，解决的是资源“输出”问题。"]}),"\n",(0,c.jsxs)(n.p,{children:["「生成阶段」发生在 ",(0,c.jsx)(n.code,{children:"make"})," 阶段执行完毕，",(0,c.jsx)(n.code,{children:"compiler.compile"})," 调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2780-L2781",target:"_blank",rel:"noopener noreferrer",children:"compilation.seal"})," 函数时："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// webpack/lib/compiler.js \ncompile(callback) {\n    // ...\n    const compilation = this.newCompilation(params);\n    this.hooks.make.callAsync(compilation, err => {\n        // ...\n        compilation.seal(err => {/* */});\n    });\n  }\n"})}),"\n",(0,c.jsxs)(n.p,{children:["也就是说，",(0,c.jsx)(n.code,{children:"compilation.seal"})," 函数是「生成阶段」的入口函数，",(0,c.jsx)(n.code,{children:"seal"})," 原意密封、上锁，我个人理解在 Webpack 语境下接近于“将模块装进 Chunk”，核心流程："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["创建本次构建的 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/ChunkGraph.js",target:"_blank",rel:"noopener noreferrer",children:"ChunkGraph"})," 对象。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2815-L2816",target:"_blank",rel:"noopener noreferrer",children:"遍历"})," 入口集合 ",(0,c.jsx)(n.code,{children:"compilation.entries"}),"：","\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["调用 ",(0,c.jsx)(n.code,{children:"addChunk"})," 方法为每一个入口 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2817-L2818",target:"_blank",rel:"noopener noreferrer",children:"创建"})," 对应的 Chunk 对象（EntryPoint Chunk）；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2832-L2833",target:"_blank",rel:"noopener noreferrer",children:"遍历"})," 该入口对应的 Dependency 集合，",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2835-L2836",target:"_blank",rel:"noopener noreferrer",children:"找到"})," 相应 Module 对象并 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2837-L2838",target:"_blank",rel:"noopener noreferrer",children:"关联"})," 到该 Chunk。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["到这里可以得到若干 Chunk，之后调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/buildChunkGraph.js#L1347-L1348",target:"_blank",rel:"noopener noreferrer",children:"buildChunkGraph"})," 方法将这些 Chunk 处理成 Graph 结构，方便后续处理。"]}),"\n",(0,c.jsxs)(n.li,{children:["之后，触发 ",(0,c.jsx)(n.code,{children:"optimizeModules/optimizeChunks"})," 等钩子，由插件（如 ",(0,c.jsx)(n.a,{href:"https://webpack.js.org/plugins/split-chunks-plugin/",target:"_blank",rel:"noopener noreferrer",children:"SplitChunksPlugin"}),"）进一步修剪、优化 Chunk 结构。"]}),"\n",(0,c.jsxs)(n.li,{children:["一直到最后一个 Optimize 钩子 ",(0,c.jsx)(n.code,{children:"optimizeChunkModules"})," 执行完毕后，开始调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L3160-L3161",target:"_blank",rel:"noopener noreferrer",children:"compilation.codeGeneration"})," 方法生成 Chunk 代码，在 ",(0,c.jsx)(n.code,{children:"codeGeneration"})," 方法内部：","\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["遍历每一个 Chunk 的 Module 对象，调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L3297-L3298",target:"_blank",rel:"noopener noreferrer",children:"_codeGenerationModule"}),"；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"_codeGenerationModule"})," 又会继续往下调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Module.js#L876-L877",target:"_blank",rel:"noopener noreferrer",children:"module.codeGeneration"})," 生成单个 Module 的代码，这里注意不同 Module 子类有不同 ",(0,c.jsx)(n.code,{children:"codeGeneration"})," 实现，对应不同产物代码效果。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,c.jsxs)(n.ol,{start:"6",children:["\n",(0,c.jsxs)(n.li,{children:["所有 Module 都执行完 ",(0,c.jsx)(n.code,{children:"codeGeneration"}),"，生成模块资产代码后，开始调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L4520-L4521",target:"_blank",rel:"noopener noreferrer",children:"createChunkAssets"})," 函数，为每一个 Chunk 生成资产文件。"]}),"\n",(0,c.jsxs)(n.li,{children:["调用 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L4638-L4639",target:"_blank",rel:"noopener noreferrer",children:"compilation.emitAssets"})," 函数“",(0,c.jsx)(n.strong,{children:"提交"}),"”资产文件，注意这里还只是记录资产文件信息，还未写出磁盘文件。"]}),"\n",(0,c.jsxs)(n.li,{children:["上述所有操作正常完成后，触发 ",(0,c.jsx)(n.code,{children:"callback"})," 回调，控制流回到 ",(0,c.jsx)(n.code,{children:"compiler"})," 函数。"]}),"\n",(0,c.jsxs)(n.li,{children:["最后，",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compiler.js#L466-L467",target:"_blank",rel:"noopener noreferrer",children:"调用"})," ",(0,c.jsx)(n.code,{children:"compiler"})," 对象的 ",(0,c.jsx)(n.a,{href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compiler.js#L592-L593",target:"_blank",rel:"noopener noreferrer",children:"emitAssets"})," 方法，输出资产文件。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"seal"})," 很复杂，重点在于将 Module 按入口组织成多个 Chunk 对象，之后暴露 ",(0,c.jsx)(n.code,{children:"optimizeXXX"})," 钩子，交由插件根据不同需求对 Chunk 做进一步修剪、整形、优化，最后按 Chunk 为单位做好代码合并与转换，输出为资产文件。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["提示：上述 ",(0,c.jsx)(n.code,{children:"optimizeXXX"})," 钩子常被用于优化最终产物代码，例如 SplitChunksPlugin 就可以在这里分析 Chunk、Module 关系，将使用率较高的 Module 封装进新的 Chunk，实现 Common Chunk 效果。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"简单理解，Entry 与 Chunk 一一对应，而 Chunk 与最终输出的资源一一对应，我们来看个示例，假如有这样的配置："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'// webpack.config.js\nmodule.exports = {\n  entry: {\n    a: "./src/a.js",\n    b: "./src/b.js",\n  },\n  // ...\n};\n'})}),"\n",(0,c.jsx)(n.p,{children:"实例配置中有两个入口，对应的文件结构："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"a 依赖于 c/e；b 依赖于 c/d；a/b 同时依赖于 c。最终生成的 Chunk 结构为："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["也就是根据依赖关系，",(0,c.jsx)(n.code,{children:"chunk[a]"})," 包含了 a/c/e 三个模块，",(0,c.jsx)(n.code,{children:"chunk[b]"})," 包含了 b/c/d 三个模块。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"seal"})," 过程中会不断调用 ",(0,c.jsx)(n.code,{children:"compilation.emitAssets"})," 提交资产记录，而直到 ",(0,c.jsx)(n.code,{children:"seal"})," 结束后则调用 ",(0,c.jsx)(n.code,{children:"compiler.emitAssets"})," 函数，函数内部调用 ",(0,c.jsx)(n.code,{children:"compiler.outputFileSystem.writeFile"})," 方法将 ",(0,c.jsx)(n.code,{children:"assets"})," 集合写入文件系统，Webpack 完成从源码到资产文件的转换，构建工作至此结束。"]}),"\n",(0,c.jsxs)(n.h2,{id:"资源形态流转",children:["资源形态流转",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#资源形态流转",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["OK，上面我们已经把逻辑层面的构造主流程梳理完了，最后我们再结合",(0,c.jsx)(n.strong,{children:"资源形态流转"}),"的角度重新考察整个过程，加深理解："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:s,alt:"image.png"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"compiler.make"})," 阶段：","\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"entry"})," 文件以 ",(0,c.jsx)(n.code,{children:"dependence"})," 对象形式加入 ",(0,c.jsx)(n.code,{children:"compilation"})," 的依赖列表，",(0,c.jsx)(n.code,{children:"dependence"})," 对象记录了 ",(0,c.jsx)(n.code,{children:"entry"})," 的类型、路径等信息；"]}),"\n",(0,c.jsxs)(n.li,{children:["根据 ",(0,c.jsx)(n.code,{children:"dependence"})," 调用对应的工厂函数创建 ",(0,c.jsx)(n.code,{children:"module"})," 对象，之后读入 ",(0,c.jsx)(n.code,{children:"module"})," 对应的文件内容，调用 ",(0,c.jsx)(n.code,{children:"loader-runner"})," 对内容做转化，转化结果若有其它依赖则继续读入依赖资源，重复此过程直到所有依赖均被转化为 ",(0,c.jsx)(n.code,{children:"module"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"compilation.seal"})," 阶段：","\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["遍历 ",(0,c.jsx)(n.code,{children:"module"})," 集合，根据 ",(0,c.jsx)(n.code,{children:"entry"})," 配置及引入资源的方式，将 ",(0,c.jsx)(n.code,{children:"module"})," 分配到不同的 Chunk；"]}),"\n",(0,c.jsx)(n.li,{children:"Chunk 之间最终形成 ChunkGraph 结构；"}),"\n",(0,c.jsxs)(n.li,{children:["遍历 ChunkGraph，调用 ",(0,c.jsx)(n.code,{children:"compilation.emitAsset"})," 方法标记 ",(0,c.jsx)(n.code,{children:"chunk"})," 的输出规则，即转化为 ",(0,c.jsx)(n.code,{children:"assets"})," 集合。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"compiler.emitAssets"})," 阶段：","\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["将 ",(0,c.jsx)(n.code,{children:"assets"})," 写入文件系统。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"这个过程用到很多 Webpack 基础对象，包括："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Entry"}),"：编译入口；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Compiler"}),"：编译管理器，Webpack 启动后会创建 ",(0,c.jsx)(n.code,{children:"compiler"})," 对象，该对象一直存活直到构建结束进程退出；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Compilation"}),"：单次构建过程的管理器，比如 ",(0,c.jsx)(n.code,{children:"watch = true"})," 时，运行过程中只有一个 ",(0,c.jsx)(n.code,{children:"compiler"}),"，但每次文件变更触发重新编译时，都会创建一个新的 ",(0,c.jsx)(n.code,{children:"compilation"})," 对象；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Dependence"}),"：依赖对象，记录模块间依赖关系；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Module"}),"：Webpack 内部所有资源都会以 Module 对象形式存在，所有关于资源的操作、转译、合并都是以 Module 为单位进行的；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Chunk"}),"：编译完成准备输出时，将 Module 按特定的规则组织成一个一个的 Chunk。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"这里简单了解即可，后面章节中我们还会继续挖掘不同对象的作用与细节。"}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"综上，Webpack 底层源码非常复杂，但撇除所有分支逻辑后，构建主流程可以简单划分为三个阶段："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"初始化阶段"}),"：负责设置构建环境，初始化若干工厂类、注入内置插件等；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"构建阶段"}),"：读入并分析 Entry 模块，找到模块依赖，之后递归处理这些依赖、依赖的依赖，直到所有模块都处理完毕，这个过程解决资源“输入”问题；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"生成阶段"}),"：根据 Entry 配置将模块封装进不同 Chunk 对象，经过一系列优化后，再将模块代码翻译成产物形态，按 Chunk 合并成最终产物文件，这个过程解决资源“输出”问题。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"这个过程串起资源「输入」到「输出」的关键步骤，可以说是 Webpack 最重要的流程骨架，没有之一！所以建议你务必跟随上述各个阶段的介绍，翻阅源码中对应的具体代码，深度理解 Webpack 构建功能的实现细节。"}),"\n",(0,c.jsx)(n.p,{children:"在后面章节中，我还会在这个流程骨架基础上，继续展开一些有代表性的对象、分支、功能实现逻辑，帮助你更体系化理解 Webpack 实现原理。"}),"\n",(0,c.jsxs)(n.h2,{id:"思考题",children:["思考题",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"在「构建阶段」，为什么需要先将依赖文件构建为 Dependency，之后再根据 Dependency 创建文件对应的 Module 对象？Dependency 对象到底有什么作用？欢迎在留言区讨论。"})]})}function C(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(E,{...e})}):E(e)}let A=C;C.__RSPRESS_PAGE_META={},C.__RSPRESS_PAGE_META["Webpack5%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F24.Init%E3%80%81Make%E3%80%81Seal%EF%BC%9A%E7%9C%9F%E6%AD%A3%E8%AF%BB%E6%87%82%20Webpack%20%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B.md"]={toc:[{text:"初始化阶段",id:"初始化阶段",depth:2},{text:"构建阶段",id:"构建阶段",depth:2},{text:"生成阶段",id:"生成阶段",depth:2},{text:"资源形态流转",id:"资源形态流转",depth:2},{text:"总结",id:"总结",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"24.Init、Make、Seal：真正读懂 Webpack 核心流程",headingTitle:"24.Init、Make、Seal：真正读懂 Webpack 核心流程",frontmatter:{}}}}]);