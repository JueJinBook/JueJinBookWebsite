"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["78537"],{483429:function(n,e,c){c.r(e),c.d(e,{default:()=>l});var s=c(552676),d=c(740453);function r(n){let e=Object.assign({h1:"h1",a:"a",p:"p",hr:"hr",h2:"h2",h3:"h3",ol:"ol",li:"li",code:"code",ul:"ul",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h4:"h4",em:"em",strong:"strong",img:"img"},(0,d.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"3乱码的前世今生--字符集和比较规则",children:["3乱码的前世今生 —— 字符集和比较规则",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3乱码的前世今生--字符集和比较规则",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"标签： MySQL 是怎样运行的"}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h2,{id:"字符集和比较规则简介",children:["字符集和比较规则简介",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字符集和比较规则简介",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"字符集简介",children:["字符集简介",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字符集简介",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们知道在计算机中只能存储二进制数据，那该怎么存储字符串呢？当然是建立字符与二进制数据的映射关系了，建立这个关系最起码要搞清楚两件事儿："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"你要把哪些字符映射成二进制数据？"}),"\n",(0,s.jsx)(e.p,{children:"也就是界定清楚字符范围。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"怎么映射？"}),"\n",(0,s.jsxs)(e.p,{children:["将一个字符映射成一个二进制数据的过程也叫做",(0,s.jsx)(e.code,{children:"编码"}),"，将一个二进制数据映射到一个字符的过程叫做",(0,s.jsx)(e.code,{children:"解码"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["人们抽象出一个",(0,s.jsx)(e.code,{children:"字符集"}),"的概念来描述某个字符范围的编码规则。比方说我们来自定义一个名称为",(0,s.jsx)(e.code,{children:"xiaohaizi"}),"的字符集，它包含的字符范围和编码规则如下："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["包含字符",(0,s.jsx)(e.code,{children:"'a'"}),"、",(0,s.jsx)(e.code,{children:"'b'"}),"、",(0,s.jsx)(e.code,{children:"'A'"}),"、",(0,s.jsx)(e.code,{children:"'B'"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"编码规则如下："}),"\n",(0,s.jsx)(e.p,{children:"采用1个字节编码一个字符的形式，字符和字节的映射关系如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"'a' -> 00000001 (十六进制：0x01)\n'b' -> 00000010 (十六进制：0x02)\n'A' -> 00000011 (十六进制：0x03)\n'B' -> 00000100 (十六进制：0x04)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["有了",(0,s.jsx)(e.code,{children:"xiaohaizi"}),"字符集，我们就可以用二进制形式表示一些字符串了，下边是一些字符串用",(0,s.jsx)(e.code,{children:"xiaohaizi"}),"字符集编码后的二进制表示："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"'bA' -> 0000001000000011  (十六进制：0x0203)\n'baB' -> 000000100000000100000100  (十六进制：0x020104)\n'cd' -> 无法表示，字符集xiaohaizi不包含字符'c'和'd'\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"比较规则简介",children:["比较规则简介",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#比较规则简介",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在我们确定了",(0,s.jsx)(e.code,{children:"xiaohaizi"}),"字符集表示字符的范围以及编码规则后，怎么比较两个字符的大小呢？最容易想到的就是直接比较这两个字符对应的二进制编码的大小，比方说字符",(0,s.jsx)(e.code,{children:"'a'"}),"的编码为",(0,s.jsx)(e.code,{children:"0x01"}),"，字符",(0,s.jsx)(e.code,{children:"'b'"}),"的编码为",(0,s.jsx)(e.code,{children:"0x02"}),"，所以",(0,s.jsx)(e.code,{children:"'a'"}),"小于",(0,s.jsx)(e.code,{children:"'b'"}),"，这种简单的比较规则也可以被称为二进制比较规则，英文名为",(0,s.jsx)(e.code,{children:"binary collation"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["二进制比较规则是简单，但有时候并不符合现实需求，比如在很多场合对于英文字符我们都是不区分大小写的，也就是说",(0,s.jsx)(e.code,{children:"'a'"}),"和",(0,s.jsx)(e.code,{children:"'A'"}),"是相等的，在这种场合下就不能简单粗暴的使用二进制比较规则了，这时候我们可以这样指定比较规则："]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"将两个大小写不同的字符全都转为大写或者小写。"}),"\n",(0,s.jsx)(e.li,{children:"再比较这两个字符对应的二进制数据。"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["这是一种稍微复杂一点点的比较规则，但是实际生活中的字符不止英文字符一种，比如我们的汉字有几万几十万之多，对于某一种字符集来说，比较两个字符大小的规则可以制定出很多种，也就是说","同一种字符集可以有多种比较规则","，我们稍后就要介绍各种现实生活中用的字符集以及它们的一些比较规则。"]}),"\n",(0,s.jsxs)(e.h3,{id:"一些重要的字符集",children:["一些重要的字符集",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一些重要的字符集",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["不幸的是，这个世界太大了，不同的人制定出了好多种",(0,s.jsx)(e.code,{children:"字符集"}),"，它们表示的字符范围和用到的编码规则可能都不一样。我们看一下一些常用字符集的情况："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"ASCII"}),"字符集"]}),"\n",(0,s.jsx)(e.p,{children:"共收录128个字符，包括空格、标点符号、数字、大小写字母和一些不可见字符。由于总共才128个字符，所以可以使用1个字节来进行编码，我们看一些字符的编码方式："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"'L' ->  01001100（十六进制：0x4C，十进制：76）\n'M' ->  01001101（十六进制：0x4D，十进制：77）\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"ISO 8859-1"}),"字符集"]}),"\n",(0,s.jsxs)(e.p,{children:["共收录256个字符，是在",(0,s.jsx)(e.code,{children:"ASCII"}),"字符集的基础上又扩充了128个西欧常用字符(包括德法两国的字母)，也可以使用1个字节来进行编码。这个字符集也有一个别名",(0,s.jsx)(e.code,{children:"latin1"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"GB2312"}),"字符集"]}),"\n",(0,s.jsxs)(e.p,{children:["收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容",(0,s.jsx)(e.code,{children:"ASCII"}),"字符集，所以在编码方式上显得有些奇怪："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["如果该字符在",(0,s.jsx)(e.code,{children:"ASCII"}),"字符集中，则采用1字节编码。"]}),"\n",(0,s.jsx)(e.li,{children:"否则采用2字节编码。"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["这种表示一个字符需要的字节数可能不同的编码方式称为",(0,s.jsx)(e.code,{children:"变长编码方式"}),"。比方说字符串",(0,s.jsx)(e.code,{children:"'爱u'"}),"，其中",(0,s.jsx)(e.code,{children:"'爱'"}),"需要用2个字节进行编码，编码后的十六进制表示为",(0,s.jsx)(e.code,{children:"0xCED2"}),"，",(0,s.jsx)(e.code,{children:"'u'"}),"需要用1个字节进行编码，编码后的十六进制表示为",(0,s.jsx)(e.code,{children:"0x75"}),"，所以拼合起来就是",(0,s.jsx)(e.code,{children:"0xCED275"}),"。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-!",children:"小贴士：\n\n我们怎么区分某个字节代表一个单独的字符还是代表某个字符的一部分呢？别忘了 ASCII字符集只收录128个字符，使用0～127就可以表示全部字符，所以如果某个字节是在0～127之内的，就意味着一个字节代表一个单独的字符，否则就是两个字节代表一个单独的字符。\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"GBK"}),"字符集"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"GBK"}),"字符集只是在收录字符范围上对",(0,s.jsx)(e.code,{children:"GB2312"}),"字符集作了扩充，编码方式上兼容",(0,s.jsx)(e.code,{children:"GB2312"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"utf8"}),"字符集"]}),"\n",(0,s.jsxs)(e.p,{children:["收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容",(0,s.jsx)(e.code,{children:"ASCII"}),"字符集，采用变长编码方式，编码一个字符需要使用1～4个字节，比方说这样："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"'L' ->  01001100（十六进制：0x4C）\n'啊' ->  111001011001010110001010（十六进制：0xE5958A）\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-!",children:"小贴士：\n\n其实准确的说，utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。更详细的Unicode和其编码方案的知识不是本书的重点，大家上网查查哈～\n\nMySQL中并不区分字符集和编码方案的概念，所以后边唠叨的时候把utf8、utf16、utf32都当作一种字符集对待。\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["对于同一个字符，不同字符集也可能有不同的编码方式。比如对于汉字",(0,s.jsx)(e.code,{children:"'我'"}),"来说，",(0,s.jsx)(e.code,{children:"ASCII"}),"字符集中根本没有收录这个字符，",(0,s.jsx)(e.code,{children:"utf8"}),"和",(0,s.jsx)(e.code,{children:"gb2312"}),"字符集对汉字",(0,s.jsx)(e.code,{children:"我"}),"的编码方式如下："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"utf8编码：111001101000100010010001 (3个字节，十六进制表示是：0xE68891)\ngb2312编码：1100111011010010 (2个字节，十六进制表示是：0xCED2)\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"mysql中支持的字符集和排序规则",children:["MySQL中支持的字符集和排序规则",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#mysql中支持的字符集和排序规则",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"mysql中的utf8和utf8mb4",children:["MySQL中的utf8和utf8mb4",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#mysql中的utf8和utf8mb4",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["我们上边说",(0,s.jsx)(e.code,{children:"utf8"}),"字符集表示一个字符需要使用1～4个字节，但是我们常用的一些字符使用1～3个字节就可以表示了。而在",(0,s.jsx)(e.code,{children:"MySQL"}),"中字符集表示一个字符所用最大字节长度在某些方面会影响系统的存储和性能，所以设计",(0,s.jsx)(e.code,{children:"MySQL"}),"的大叔偷偷的定义了两个概念："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"utf8mb3"}),"：阉割过的",(0,s.jsx)(e.code,{children:"utf8"}),"字符集，只使用1～3个字节表示字符。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"utf8mb4"}),"：正宗的",(0,s.jsx)(e.code,{children:"utf8"}),"字符集，使用1～4个字节表示字符。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["有一点需要大家十分的注意，在",(0,s.jsx)(e.code,{children:"MySQL"}),"中",(0,s.jsx)(e.code,{children:"utf8"}),"是",(0,s.jsx)(e.code,{children:"utf8mb3"}),"的别名，所以之后在",(0,s.jsx)(e.code,{children:"MySQL"}),"中提到",(0,s.jsx)(e.code,{children:"utf8"}),"就意味着使用1~3个字节来表示一个字符，如果大家有使用4字节编码一个字符的情况，比如存储一些emoji表情啥的，那请使用",(0,s.jsx)(e.code,{children:"utf8mb4"}),"。"]}),"\n",(0,s.jsxs)(e.h3,{id:"字符集的查看",children:["字符集的查看",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字符集的查看",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"MySQL"}),"支持好多好多种字符集，查看当前",(0,s.jsx)(e.code,{children:"MySQL"}),"中支持的字符集可以用下边这个语句："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];\n"})}),"\n",(0,s.jsxs)(e.p,{children:["其中",(0,s.jsx)(e.code,{children:"CHARACTER SET"}),"和",(0,s.jsx)(e.code,{children:"CHARSET"}),"是同义词，用任意一个都可以。我们查询一下（支持的字符集太多了，我们省略了一些）："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> SHOW CHARSET;\n+----------+---------------------------------+---------------------+--------+\n| Charset  | Description                     | Default collation   | Maxlen |\n+----------+---------------------------------+---------------------+--------+\n| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |\n...\n| latin1   | cp1252 West European            | latin1_swedish_ci   |      1 |\n| latin2   | ISO 8859-2 Central European     | latin2_general_ci   |      1 |\n...\n| ascii    | US ASCII                        | ascii_general_ci    |      1 |\n...\n| gb2312   | GB2312 Simplified Chinese       | gb2312_chinese_ci   |      2 |\n...\n| gbk      | GBK Simplified Chinese          | gbk_chinese_ci      |      2 |\n| latin5   | ISO 8859-9 Turkish              | latin5_turkish_ci   |      1 |\n...\n| utf8     | UTF-8 Unicode                   | utf8_general_ci     |      3 |\n| ucs2     | UCS-2 Unicode                   | ucs2_general_ci     |      2 |\n...\n| latin7   | ISO 8859-13 Baltic              | latin7_general_ci   |      1 |\n| utf8mb4  | UTF-8 Unicode                   | utf8mb4_general_ci  |      4 |\n| utf16    | UTF-16 Unicode                  | utf16_general_ci    |      4 |\n| utf16le  | UTF-16LE Unicode                | utf16le_general_ci  |      4 |\n...\n| utf32    | UTF-32 Unicode                  | utf32_general_ci    |      4 |\n| binary   | Binary pseudo charset           | binary              |      1 |\n...\n| gb18030  | China National Standard GB18030 | gb18030_chinese_ci  |      4 |\n+----------+---------------------------------+---------------------+--------+\n41 rows in set (0.01 sec)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["可以看到，我使用的这个",(0,s.jsx)(e.code,{children:"MySQL"}),"版本一共支持",(0,s.jsx)(e.code,{children:"41"}),"种字符集，其中的",(0,s.jsx)(e.code,{children:"Default collation"}),"列表示这种字符集中一种默认的",(0,s.jsx)(e.code,{children:"比较规则"}),"。大家注意返回结果中的最后一列",(0,s.jsx)(e.code,{children:"Maxlen"}),"，它代表该种字符集表示一个字符最多需要几个字节。为了让大家的印象更深刻，我把几个常用到的字符集的",(0,s.jsx)(e.code,{children:"Maxlen"}),"列摘抄下来，大家务必记住："]}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{align:"center",children:"字符集名称"}),"\n",(0,s.jsx)(e.th,{align:"center",children:"Maxlen"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"ascii"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"1"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"latin1"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"1"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"gb2312"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"2"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"gbk"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"2"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"utf8"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"3"})}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"utf8mb4"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"4"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"比较规则的查看",children:["比较规则的查看",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#比较规则的查看",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["查看",(0,s.jsx)(e.code,{children:"MySQL"}),"中支持的比较规则的命令如下："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SHOW COLLATION [LIKE 匹配的模式];\n"})}),"\n",(0,s.jsxs)(e.p,{children:["我们前边说过一种字符集可能对应着若干种比较规则，",(0,s.jsx)(e.code,{children:"MySQL"}),"支持的字符集就已经非常多了，所以支持的比较规则更多，我们先只查看一下",(0,s.jsx)(e.code,{children:"utf8"}),"字符集下的比较规则："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> SHOW COLLATION LIKE 'utf8\\_%';\n+--------------------------+---------+-----+---------+----------+---------+\n| Collation                | Charset | Id  | Default | Compiled | Sortlen |\n+--------------------------+---------+-----+---------+----------+---------+\n| utf8_general_ci          | utf8    |  33 | Yes     | Yes      |       1 |\n| utf8_bin                 | utf8    |  83 |         | Yes      |       1 |\n| utf8_unicode_ci          | utf8    | 192 |         | Yes      |       8 |\n| utf8_icelandic_ci        | utf8    | 193 |         | Yes      |       8 |\n| utf8_latvian_ci          | utf8    | 194 |         | Yes      |       8 |\n| utf8_romanian_ci         | utf8    | 195 |         | Yes      |       8 |\n| utf8_slovenian_ci        | utf8    | 196 |         | Yes      |       8 |\n| utf8_polish_ci           | utf8    | 197 |         | Yes      |       8 |\n| utf8_estonian_ci         | utf8    | 198 |         | Yes      |       8 |\n| utf8_spanish_ci          | utf8    | 199 |         | Yes      |       8 |\n| utf8_swedish_ci          | utf8    | 200 |         | Yes      |       8 |\n| utf8_turkish_ci          | utf8    | 201 |         | Yes      |       8 |\n| utf8_czech_ci            | utf8    | 202 |         | Yes      |       8 |\n| utf8_danish_ci           | utf8    | 203 |         | Yes      |       8 |\n| utf8_lithuanian_ci       | utf8    | 204 |         | Yes      |       8 |\n| utf8_slovak_ci           | utf8    | 205 |         | Yes      |       8 |\n| utf8_spanish2_ci         | utf8    | 206 |         | Yes      |       8 |\n| utf8_roman_ci            | utf8    | 207 |         | Yes      |       8 |\n| utf8_persian_ci          | utf8    | 208 |         | Yes      |       8 |\n| utf8_esperanto_ci        | utf8    | 209 |         | Yes      |       8 |\n| utf8_hungarian_ci        | utf8    | 210 |         | Yes      |       8 |\n| utf8_sinhala_ci          | utf8    | 211 |         | Yes      |       8 |\n| utf8_german2_ci          | utf8    | 212 |         | Yes      |       8 |\n| utf8_croatian_ci         | utf8    | 213 |         | Yes      |       8 |\n| utf8_unicode_520_ci      | utf8    | 214 |         | Yes      |       8 |\n| utf8_vietnamese_ci       | utf8    | 215 |         | Yes      |       8 |\n| utf8_general_mysql500_ci | utf8    | 223 |         | Yes      |       1 |\n+--------------------------+---------+-----+---------+----------+---------+\n27 rows in set (0.00 sec)\n"})}),"\n",(0,s.jsx)(e.p,{children:"这些比较规则的命名还挺有规律的，具体规律如下："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["比较规则名称以与其关联的字符集的名称开头。如上图的查询结果的比较规则名称都是以",(0,s.jsx)(e.code,{children:"utf8"}),"开头的。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["后边紧跟着该比较规则主要作用于哪种语言，比如",(0,s.jsx)(e.code,{children:"utf8_polish_ci"}),"表示以波兰语的规则比较，",(0,s.jsx)(e.code,{children:"utf8_spanish_ci"}),"是以西班牙语的规则比较，",(0,s.jsx)(e.code,{children:"utf8_general_ci"}),"是一种通用的比较规则。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"名称后缀意味着该比较规则是否区分语言中的重音、大小写啥的，具体可以用的值如下："}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{align:"center",children:"后缀"}),"\n",(0,s.jsx)(e.th,{align:"center",children:"英文释义"}),"\n",(0,s.jsx)(e.th,{align:"center",children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"_ai"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"accent insensitive"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"不区分重音"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"_as"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"accent sensitive"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"区分重音"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"_ci"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"case insensitive"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"不区分大小写"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"_cs"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"case sensitive"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"区分大小写"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"_bin"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"binary"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"以二进制方式比较"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["比如",(0,s.jsx)(e.code,{children:"utf8_general_ci"}),"这个比较规则是以",(0,s.jsx)(e.code,{children:"ci"}),"结尾的，说明不区分大小写。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["每种字符集对应若干种比较规则，每种字符集都有一种默认的比较规则","，",(0,s.jsx)(e.code,{children:"SHOW COLLATION"}),"的返回结果中的",(0,s.jsx)(e.code,{children:"Default"}),"列的值为",(0,s.jsx)(e.code,{children:"YES"}),"的就是该字符集的默认比较规则，比方说",(0,s.jsx)(e.code,{children:"utf8"}),"字符集默认的比较规则就是",(0,s.jsx)(e.code,{children:"utf8_general_ci"}),"。"]}),"\n",(0,s.jsxs)(e.h2,{id:"字符集和比较规则的应用",children:["字符集和比较规则的应用",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字符集和比较规则的应用",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"各级别的字符集和比较规则",children:["各级别的字符集和比较规则",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#各级别的字符集和比较规则",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"MySQL"}),"有4个级别的字符集和比较规则，分别是："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"服务器级别"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"数据库级别"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"表级别"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"列级别"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"我们接下来仔细看一下怎么设置和查看这几个级别的字符集和比较规则。"}),"\n",(0,s.jsxs)(e.h4,{id:"服务器级别",children:["服务器级别",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#服务器级别",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"MySQL"}),"提供了两个系统变量来表示服务器级别的字符集和比较规则："]}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{align:"center",children:"系统变量"}),"\n",(0,s.jsx)(e.th,{align:"center",children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"character_set_server"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"服务器级别的字符集"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"collation_server"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"服务器级别的比较规则"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"我们看一下这两个系统变量的值："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> SHOW VARIABLES LIKE 'character_set_server';\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| character_set_server | utf8  |\n+----------------------+-------+\n1 row in set (0.00 sec)\n\nmysql> SHOW VARIABLES LIKE 'collation_server';\n+------------------+-----------------+\n| Variable_name    | Value           |\n+------------------+-----------------+\n| collation_server | utf8_general_ci |\n+------------------+-----------------+\n1 row in set (0.00 sec)\n\n"})}),"\n",(0,s.jsxs)(e.p,{children:["可以看到在我的计算机中服务器级别默认的字符集是",(0,s.jsx)(e.code,{children:"utf8"}),"，默认的比较规则是",(0,s.jsx)(e.code,{children:"utf8_general_ci"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["我们可以在启动服务器程序时通过启动选项或者在服务器程序运行过程中使用",(0,s.jsx)(e.code,{children:"SET"}),"语句修改这两个变量的值。比如我们可以在配置文件中这样写："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"[server]\ncharacter_set_server=gbk\ncollation_server=gbk_chinese_ci\n"})}),"\n",(0,s.jsx)(e.p,{children:"当服务器启动的时候读取这个配置文件后这两个系统变量的值便修改了。"}),"\n",(0,s.jsxs)(e.h4,{id:"数据库级别",children:["数据库级别",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数据库级别",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则，具体语法如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"CREATE DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n\nALTER DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n"})}),"\n",(0,s.jsxs)(e.p,{children:["其中的",(0,s.jsx)(e.code,{children:"DEFAULT"}),"可以省略，并不影响语句的语义。比方说我们新创建一个名叫",(0,s.jsx)(e.code,{children:"charset_demo_db"}),"的数据库，在创建的时候指定它使用的字符集为",(0,s.jsx)(e.code,{children:"gb2312"}),"，比较规则为",(0,s.jsx)(e.code,{children:"gb2312_chinese_ci"}),"："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> CREATE DATABASE charset_demo_db\n    -> CHARACTER SET gb2312\n    -> COLLATE gb2312_chinese_ci;\nQuery OK, 1 row affected (0.01 sec)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["如果想查看当前数据库使用的字符集和比较规则，可以查看下面两个系统变量的值（前提是使用",(0,s.jsx)(e.code,{children:"USE"}),"语句选择当前默认数据库，如果没有默认数据库，则变量与相应的服务器级系统变量具有相同的值）："]}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{align:"center",children:"系统变量"}),"\n",(0,s.jsx)(e.th,{align:"center",children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"character_set_database"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"当前数据库的字符集"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"collation_database"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"当前数据库的比较规则"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["我们来查看一下刚刚创建的",(0,s.jsx)(e.code,{children:"charset_demo_db"}),"数据库的字符集和比较规则："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> USE charset_demo_db;\nDatabase changed\n\nmysql> SHOW VARIABLES LIKE 'character_set_database';\n+------------------------+--------+\n| Variable_name          | Value  |\n+------------------------+--------+\n| character_set_database | gb2312 |\n+------------------------+--------+\n1 row in set (0.00 sec)\n\nmysql> SHOW VARIABLES LIKE 'collation_database';\n+--------------------+-------------------+\n| Variable_name      | Value             |\n+--------------------+-------------------+\n| collation_database | gb2312_chinese_ci |\n+--------------------+-------------------+\n1 row in set (0.00 sec)\n\nmysql>\n"})}),"\n",(0,s.jsxs)(e.p,{children:["可以看到这个",(0,s.jsx)(e.code,{children:"charset_demo_db"}),"数据库的字符集和比较规则就是我们在创建语句中指定的。需要注意的一点是："," ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:"character_set_database"})})," 和 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:"collation_database"})})," 这两个系统变量是只读的，我们不能通过修改这两个变量的值而改变当前数据库的字符集和比较规则","。"]}),"\n",(0,s.jsx)(e.p,{children:"数据库的创建语句中也可以不指定字符集和比较规则，比如这样："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"CREATE DATABASE 数据库名;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["这样的话将使用服务器级别的字符集和比较规则作为数据库的字符集和比较规则","。"]}),"\n",(0,s.jsxs)(e.h4,{id:"表级别",children:["表级别",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#表级别",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"CREATE TABLE 表名 (列的信息)\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]]\n\nALTER TABLE 表名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]\n"})}),"\n",(0,s.jsxs)(e.p,{children:["比方说我们在刚刚创建的",(0,s.jsx)(e.code,{children:"charset_demo_db"}),"数据库中创建一个名为",(0,s.jsx)(e.code,{children:"t"}),"的表，并指定这个表的字符集和比较规则："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> CREATE TABLE t(\n    ->     col VARCHAR(10)\n    -> ) CHARACTER SET utf8 COLLATE utf8_general_ci;\nQuery OK, 0 rows affected (0.03 sec)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["如果创建和修改表的语句中没有指明字符集和比较规则，","将使用该表所在数据库的字符集和比较规则作为该表的字符集和比较规则","。假设我们的创建表",(0,s.jsx)(e.code,{children:"t"}),"的语句是这么写的："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"CREATE TABLE t(\n    col VARCHAR(10)\n);\n"})}),"\n",(0,s.jsxs)(e.p,{children:["因为表",(0,s.jsx)(e.code,{children:"t"}),"的建表语句中并没有明确指定字符集和比较规则，则表",(0,s.jsx)(e.code,{children:"t"}),"的字符集和比较规则将继承所在数据库",(0,s.jsx)(e.code,{children:"charset_demo_db"}),"的字符集和比较规则，也就是",(0,s.jsx)(e.code,{children:"gbk"}),"和",(0,s.jsx)(e.code,{children:"gb2312_chinese_ci"}),"。"]}),"\n",(0,s.jsxs)(e.h4,{id:"列级别",children:["列级别",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#列级别",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["需要注意的是，对于存储字符串的列，","同一个表中的不同的列也可以有不同的字符集和比较规则","。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"CREATE TABLE 表名(\n    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],\n    其他列...\n);\n\nALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];\n"})}),"\n",(0,s.jsxs)(e.p,{children:["比如我们修改一下表",(0,s.jsx)(e.code,{children:"t"}),"中列",(0,s.jsx)(e.code,{children:"col"}),"的字符集和比较规则可以这么写："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> ALTER TABLE t MODIFY col VARCHAR(10) CHARACTER SET gbk COLLATE gbk_chinese_ci;\nQuery OK, 0 rows affected (0.04 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql>\n"})}),"\n",(0,s.jsxs)(e.p,{children:["对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，","将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则","。比方说表",(0,s.jsx)(e.code,{children:"t"}),"的字符集是",(0,s.jsx)(e.code,{children:"utf8"}),"，比较规则是",(0,s.jsx)(e.code,{children:"utf8_general_ci"}),"，修改列",(0,s.jsx)(e.code,{children:"col"}),"的语句是这么写的："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"ALTER TABLE t MODIFY col VARCHAR(10);\n"})}),"\n",(0,s.jsxs)(e.p,{children:["那列",(0,s.jsx)(e.code,{children:"col"}),"的字符集和编码将使用表",(0,s.jsx)(e.code,{children:"t"}),"的字符集和比较规则，也就是",(0,s.jsx)(e.code,{children:"utf8"}),"和",(0,s.jsx)(e.code,{children:"utf8_general_ci"}),"。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-!",children:"小贴士：\n\n在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示会发生错误。比方说原先列使用的字符集是utf8，列中存储了一些汉字，现在把列的字符集转换为ascii的话就会出错，因为ascii字符集并不能表示汉字字符。\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"仅修改字符集或仅修改比较规则",children:["仅修改字符集或仅修改比较规则",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#仅修改字符集或仅修改比较规则",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"由于字符集和比较规则是互相有联系的，如果我们只修改了字符集，比较规则也会跟着变化，如果只修改了比较规则，字符集也会跟着变化，具体规则如下："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"只修改字符集，则比较规则将变为修改后的字符集默认的比较规则。"}),"\n",(0,s.jsx)(e.li,{children:"只修改比较规则，则字符集将变为修改后的比较规则对应的字符集。"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["不论哪个级别的字符集和比较规则，这两条规则都适用","，我们以服务器级别的字符集和比较规则为例来看一下详细过程："]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"只修改字符集，则比较规则将变为修改后的字符集默认的比较规则。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> SET character_set_server = gb2312;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SHOW VARIABLES LIKE 'character_set_server';\n+----------------------+--------+\n| Variable_name        | Value  |\n+----------------------+--------+\n| character_set_server | gb2312 |\n+----------------------+--------+\n1 row in set (0.00 sec)\n\nmysql>  SHOW VARIABLES LIKE 'collation_server';\n+------------------+-------------------+\n| Variable_name    | Value             |\n+------------------+-------------------+\n| collation_server | gb2312_chinese_ci |\n+------------------+-------------------+\n1 row in set (0.00 sec)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["我们只修改了",(0,s.jsx)(e.code,{children:"character_set_server"}),"的值为",(0,s.jsx)(e.code,{children:"gb2312"}),"，",(0,s.jsx)(e.code,{children:"collation_server"}),"的值自动变为了",(0,s.jsx)(e.code,{children:"gb2312_chinese_ci"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"只修改比较规则，则字符集将变为修改后的比较规则对应的字符集。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> SET collation_server = utf8_general_ci;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SHOW VARIABLES LIKE 'character_set_server';\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| character_set_server | utf8  |\n+----------------------+-------+\n1 row in set (0.00 sec)\n\nmysql> SHOW VARIABLES LIKE 'collation_server';\n+------------------+-----------------+\n| Variable_name    | Value           |\n+------------------+-----------------+\n| collation_server | utf8_general_ci |\n+------------------+-----------------+\n1 row in set (0.00 sec)\n\nmysql>\n"})}),"\n",(0,s.jsxs)(e.p,{children:["我们只修改了",(0,s.jsx)(e.code,{children:"collation_server"}),"的值为",(0,s.jsx)(e.code,{children:"utf8_general_ci"}),"，",(0,s.jsx)(e.code,{children:"character_set_server"}),"的值自动变为了",(0,s.jsx)(e.code,{children:"utf8"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"各级别字符集和比较规则小结",children:["各级别字符集和比较规则小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#各级别字符集和比较规则小结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们介绍的这4个级别字符集和比较规则的联系如下："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则"}),"\n",(0,s.jsx)(e.li,{children:"如果创建或修改表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则"}),"\n",(0,s.jsx)(e.li,{children:"如果创建或修改数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务器的字符集和比较规则"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["知道了这些规则之后，对于给定的表，我们应该知道它的各个列的字符集和比较规则是什么，从而根据这个列的类型来确定存储数据时每个列的实际数据占用的存储空间大小了。比方说我们向表",(0,s.jsx)(e.code,{children:"t"}),"中插入一条记录："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> INSERT INTO t(col) VALUES('我我');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT * FROM t;\n+--------+\n| s      |\n+--------+\n| 我我   |\n+--------+\n1 row in set (0.00 sec)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["首先列",(0,s.jsx)(e.code,{children:"col"}),"使用的字符集是",(0,s.jsx)(e.code,{children:"gbk"}),"，一个字符",(0,s.jsx)(e.code,{children:"'我'"}),"在",(0,s.jsx)(e.code,{children:"gbk"}),"中的编码为",(0,s.jsx)(e.code,{children:"0xCED2"}),"，占用两个字节，两个字符的实际数据就占用4个字节。如果把该列的字符集修改为",(0,s.jsx)(e.code,{children:"utf8"}),"的话，这两个字符就实际占用6个字节啦～"]}),"\n",(0,s.jsxs)(e.h3,{id:"客户端和服务器通信中的字符集",children:["客户端和服务器通信中的字符集",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#客户端和服务器通信中的字符集",children:"#"})]}),"\n",(0,s.jsxs)(e.h4,{id:"编码和解码使用的字符集不一致的后果",children:["编码和解码使用的字符集不一致的后果",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码和解码使用的字符集不一致的后果",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"说到底，字符串在计算机上的体现就是一个字节串，如果你使用不同字符集去解码这个字节串，最后得到的结果可能让你挠头。"}),"\n",(0,s.jsxs)(e.p,{children:["我们知道字符",(0,s.jsx)(e.code,{children:"'我'"}),"在",(0,s.jsx)(e.code,{children:"utf8"}),"字符集编码下的字节串长这样：",(0,s.jsx)(e.code,{children:"0xE68891"}),"，如果一个程序把这个字节串发送到另一个程序里，另一个程序用不同的字符集去解码这个字节串，假设使用的是",(0,s.jsx)(e.code,{children:"gbk"}),"字符集来解释这串字节，解码过程就是这样的："]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["首先看第一个字节",(0,s.jsx)(e.code,{children:"0xE6"}),"，它的值大于",(0,s.jsx)(e.code,{children:"0x7F"}),"（十进制：127），说明是两字节编码，继续读一字节后是",(0,s.jsx)(e.code,{children:"0xE688"}),"，然后从",(0,s.jsx)(e.code,{children:"gbk"}),"编码表中查找字节为",(0,s.jsx)(e.code,{children:"0xE688"}),"对应的字符，发现是字符",(0,s.jsx)(e.code,{children:"'鎴'"})]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["继续读一个字节",(0,s.jsx)(e.code,{children:"0x91"}),"，它的值也大于",(0,s.jsx)(e.code,{children:"0x7F"}),"，再往后读一个字节发现木有了，所以这是半个字符。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["因为",(0,s.jsx)(e.code,{children:"0xE68891"}),"被",(0,s.jsx)(e.code,{children:"gbk"}),"字符集解释成一个字符",(0,s.jsx)(e.code,{children:"'鎴'"}),"和半个字符。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["假设用",(0,s.jsx)(e.code,{children:"iso-8859-1"}),"，也就是",(0,s.jsx)(e.code,{children:"latin1"}),"字符集去解释这串字节，解码过程如下："]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["先读第一个字节",(0,s.jsx)(e.code,{children:"0xE6"}),"，它对应的",(0,s.jsx)(e.code,{children:"latin1"}),"字符为",(0,s.jsx)(e.code,{children:"\xe6"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["再读第二个字节",(0,s.jsx)(e.code,{children:"0x88"}),"，它对应的",(0,s.jsx)(e.code,{children:"latin1"}),"字符为",(0,s.jsx)(e.code,{children:"ˆ"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["再读第二个字节",(0,s.jsx)(e.code,{children:"0x91"}),"，它对应的",(0,s.jsx)(e.code,{children:"latin1"}),"字符为",(0,s.jsx)(e.code,{children:"‘"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["所以整串字节",(0,s.jsx)(e.code,{children:"0xE68891"}),"被",(0,s.jsx)(e.code,{children:"latin1"}),"字符集解释后的字符串就是",(0,s.jsx)(e.code,{children:"'\xe6ˆ‘'"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["可见，","如果对于同一个字符串编码和解码使用的字符集不一样，会产生意想不到的结果","，作为人类的我们看上去就像是产生了乱码一样。"]}),"\n",(0,s.jsxs)(e.h4,{id:"字符集转换的概念",children:["字符集转换的概念",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字符集转换的概念",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["如果接收",(0,s.jsx)(e.code,{children:"0xE68891"}),"这个字节串的程序按照",(0,s.jsx)(e.code,{children:"utf8"}),"字符集进行解码，然后又把它按照",(0,s.jsx)(e.code,{children:"gbk"}),"字符集进行编码，最后编码后的字节串就是",(0,s.jsx)(e.code,{children:"0xCED2"}),"，我们把这个过程称为",(0,s.jsx)(e.code,{children:"字符集的转换"}),"，也就是字符串",(0,s.jsx)(e.code,{children:"'我'"}),"从",(0,s.jsx)(e.code,{children:"utf8"}),"字符集转换为",(0,s.jsx)(e.code,{children:"gbk"}),"字符集。"]}),"\n",(0,s.jsxs)(e.h4,{id:"mysql中字符集的转换",children:["MySQL中字符集的转换",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#mysql中字符集的转换",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们知道从客户端发往服务器的请求本质上就是一个字符串，服务器向客户端返回的结果本质上也是一个字符串，而字符串其实是使用某种字符集编码的二进制数据。这个字符串可不是使用一种字符集的编码方式一条道走到黑的，从发送请求到返回结果这个过程中伴随着多次字符集的转换，在这个过程中会用到3个系统变量，我们先把它们写出来看一下："}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{align:"center",children:"系统变量"}),"\n",(0,s.jsx)(e.th,{align:"center",children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"character_set_client"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"服务器解码请求时使用的字符集"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"character_set_connection"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"服务器运行过程中使用的字符集"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"character_set_results"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"服务器向客户端返回数据时使用的字符集"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"这几个系统变量在我的计算机上的默认值如下（不同操作系统的默认值可能不同）："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> SHOW VARIABLES LIKE 'character_set_client';\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| character_set_client | utf8  |\n+----------------------+-------+\n1 row in set (0.00 sec)\n\nmysql> SHOW VARIABLES LIKE 'character_set_connection';\n+--------------------------+-------+\n| Variable_name            | Value |\n+--------------------------+-------+\n| character_set_connection | utf8  |\n+--------------------------+-------+\n1 row in set (0.01 sec)\n\nmysql> SHOW VARIABLES LIKE 'character_set_results';\n+-----------------------+-------+\n| Variable_name         | Value |\n+-----------------------+-------+\n| character_set_results | utf8  |\n+-----------------------+-------+\n1 row in set (0.00 sec)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["大家可以看到这几个系统变量的值都是",(0,s.jsx)(e.code,{children:"utf8"}),"，为了体现出字符集在请求处理过程中的变化，我们这里特意修改一个系统变量的值："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> set character_set_connection = gbk;\nQuery OK, 0 rows affected (0.00 sec)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["所以现在系统变量",(0,s.jsx)(e.code,{children:"character_set_client"}),"和",(0,s.jsx)(e.code,{children:"character_set_results"}),"的值还是",(0,s.jsx)(e.code,{children:"utf8"}),"，而",(0,s.jsx)(e.code,{children:"character_set_connection"}),"的值为",(0,s.jsx)(e.code,{children:"gbk"}),"。现在假设我们客户端发送的请求是下边这个字符串："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SELECT * FROM t WHERE s = '我';\n"})}),"\n",(0,s.jsxs)(e.p,{children:["为了方便大家理解这个过程，我们只分析字符",(0,s.jsx)(e.code,{children:"'我'"}),"在这个过程中字符集的转换。"]}),"\n",(0,s.jsx)(e.p,{children:"现在看一下在请求从发送到结果返回过程中字符集的变化："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"客户端发送请求所使用的字符集"}),"\n",(0,s.jsx)(e.p,{children:"一般情况下客户端所使用的字符集和当前操作系统一致，不同操作系统使用的字符集可能不一样，如下："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["类",(0,s.jsx)(e.code,{children:"Unix"}),"系统使用的是",(0,s.jsx)(e.code,{children:"utf8"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Windows"}),"使用的是",(0,s.jsx)(e.code,{children:"gbk"})]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["例如我是用的",(0,s.jsx)(e.code,{children:"macOS"}),"操作系统时，客户端使用的就是是",(0,s.jsx)(e.code,{children:"utf8"}),"字符集。所以字符",(0,s.jsx)(e.code,{children:"'我'"}),"在发送给服务器的请求中的字节形式就是：",(0,s.jsx)(e.code,{children:"0xE68891"})]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["服务器接收到客户端发送来的请求其实是一串字节，它会认为这串字节采用的字符集是",(0,s.jsx)(e.code,{children:"chacharacter_set_client"}),"，然后把这串字节转换为",(0,s.jsx)(e.code,{children:"character_set_connection"}),"字符集编码的字节。"]}),"\n",(0,s.jsxs)(e.p,{children:["由于我的计算机上",(0,s.jsx)(e.code,{children:"chacharacter_set_client"}),"的值是",(0,s.jsx)(e.code,{children:"utf8"}),"，",(0,s.jsx)(e.code,{children:"character_set_connection"}),"的值是",(0,s.jsx)(e.code,{children:"gbk"}),"，所以字符串",(0,s.jsx)(e.code,{children:"'我'"}),"将从",(0,s.jsx)(e.code,{children:"utf8"}),"字符集转换为",(0,s.jsx)(e.code,{children:"gbk"}),"字符集，所以最后得到字节其实是",(0,s.jsx)(e.code,{children:"0xCED2"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["因为表",(0,s.jsx)(e.code,{children:"t"}),"的列",(0,s.jsx)(e.code,{children:"col"}),"采用的是",(0,s.jsx)(e.code,{children:"gbk"}),"字符集，与",(0,s.jsx)(e.code,{children:"character_set_connection"}),"一致，所以直接到列中找字节值为",(0,s.jsx)(e.code,{children:"0xCED2"}),"的记录，最后找到了一条。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["服务器会将查找到的结果集包装成一个字符串，需要将这个字符串从",(0,s.jsx)(e.code,{children:"character_set_connection"}),"字符集转换成",(0,s.jsx)(e.code,{children:"character_set_results"}),"字符集，然后把转换后的字节串返回到客户端。"]}),"\n",(0,s.jsxs)(e.p,{children:["服务器生成的结果集中含有字符",(0,s.jsx)(e.code,{children:"'我'"}),"，由于我的计算机上",(0,s.jsx)(e.code,{children:"character_set_connection"}),"的值是",(0,s.jsx)(e.code,{children:"gbk"}),"，所以结果集中的",(0,s.jsx)(e.code,{children:"'我'"}),"对应的字节串是",(0,s.jsx)(e.code,{children:"0xCED2"}),"，而我的计算机",(0,s.jsx)(e.code,{children:"character_set_results"}),"的值是",(0,s.jsx)(e.code,{children:"utf8"}),"，所以需要将",(0,s.jsx)(e.code,{children:"'我'"}),"从",(0,s.jsx)(e.code,{children:"gbk"}),"字符集转换到",(0,s.jsx)(e.code,{children:"utf8"}),"字符集，也就是转换后的字节串是",(0,s.jsx)(e.code,{children:"0xE68891"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["由于客户端是用的字符集是",(0,s.jsx)(e.code,{children:"utf8"}),"，所以可以顺利的将",(0,s.jsx)(e.code,{children:"0xE68891"}),"解释成字符",(0,s.jsx)(e.code,{children:"我"}),"，从而显示到我们的显示器上，所以我们人类也读懂了返回的结果。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"如果你读上边的文字有点晕，可以参照这个图来仔细分析一下这几个步骤："}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/12/6/167815b6f78145f8?w=892&h=470&f=png&s=91878",alt:"image_1c91mt04ll7suk01ej01fb067k9.png-89.7kB"})}),"\n",(0,s.jsx)(e.p,{children:"从这个分析中我们可以得出这么几点需要注意的地方："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["服务器认为客户端发送过来的请求是用",(0,s.jsx)(e.code,{children:"character_set_client"}),"编码的。"]}),"\n",(0,s.jsxs)(e.p,{children:["假设你的客户端采用的字符集和 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:"character_set_client"})})," 不一样的话，这就会出现意想不到的情况","。比如我的客户端使用的是",(0,s.jsx)(e.code,{children:"utf8"}),"字符集，如果把系统变量",(0,s.jsx)(e.code,{children:"character_set_client"}),"的值设置为",(0,s.jsx)(e.code,{children:"gbk"}),"的话，服务器将无法理解我们发送的请求，更别谈处理这个请求了。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["服务器将把得到的结果集使用",(0,s.jsx)(e.code,{children:"character_set_results"}),"编码后发送给客户端。"]}),"\n",(0,s.jsxs)(e.p,{children:["假设你的客户端采用的字符集和 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:"character_set_results"})})," 不一样的话，这就会出现客户端无法解码结果集的情况","，结果就是在你的屏幕上出现乱码。比如我的客户端使用的是",(0,s.jsx)(e.code,{children:"utf8"}),"字符集，如果把系统变量",(0,s.jsx)(e.code,{children:"character_set_results"}),"的值设置为",(0,s.jsx)(e.code,{children:"gbk"}),"的话，将产生乱码。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"character_set_connection"}),"只是服务器在处理请求时使用的字符集，它是什么其实没多重要，但是一定要注意，","该字符集包含的字符范围一定涵盖请求以及结果集中的字符","，要不然会出现无法将请求中的字符编码成",(0,s.jsx)(e.code,{children:"character_set_connection"}),"字符集或者无法编码结果集中的字符。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["知道了在",(0,s.jsx)(e.code,{children:"MySQL"}),"中从发送请求到返回结果过程里发生的各种字符集转换，但是为啥要转来转去的呢？不晕么？"]}),"\n",(0,s.jsxs)(e.p,{children:["答：是的，很头晕，所以","我们通常都把 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:"character_set_client"})})," 、",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:"character_set_connection"})}),"、",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:"character_set_results"})})," 这三个系统变量设置成和客户端使用的字符集一致的情况，这样减少了很多无谓的字符集转换","。为了方便我们设置，",(0,s.jsx)(e.code,{children:"MySQL"}),"提供了一条非常简便的语句："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SET NAMES 字符集名;\n"})}),"\n",(0,s.jsx)(e.p,{children:"这一条语句产生的效果和我们执行这3条的效果是一样的："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SET character_set_client = 字符集名;\nSET character_set_connection = 字符集名;\nSET character_set_results = 字符集名;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["比方说我的客户端使用的是",(0,s.jsx)(e.code,{children:"utf8"}),"字符集，所以需要把这几个系统变量的值都设置为",(0,s.jsx)(e.code,{children:"utf8"}),"："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> SET NAMES utf8;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SHOW VARIABLES LIKE 'character_set_client';\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| character_set_client | utf8  |\n+----------------------+-------+\n1 row in set (0.00 sec)\n\nmysql>  SHOW VARIABLES LIKE 'character_set_connection';\n+--------------------------+-------+\n| Variable_name            | Value |\n+--------------------------+-------+\n| character_set_connection | utf8  |\n+--------------------------+-------+\n1 row in set (0.00 sec)\n\nmysql> SHOW VARIABLES LIKE 'character_set_results';\n+-----------------------+-------+\n| Variable_name         | Value |\n+-----------------------+-------+\n| character_set_results | utf8  |\n+-----------------------+-------+\n1 row in set (0.00 sec)\n\nmysql>\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-!",children:"小贴士：\n\n如果你使用的是Windows系统，那应该设置成gbk。\n"})}),"\n",(0,s.jsxs)(e.p,{children:["另外，如果你想在启动客户端的时候就把",(0,s.jsx)(e.code,{children:"character_set_client"}),"、",(0,s.jsx)(e.code,{children:"character_set_connection"}),"、",(0,s.jsx)(e.code,{children:"character_set_results"}),"这三个系统变量的值设置成一样的，那我们可以在启动客户端的时候指定一个叫",(0,s.jsx)(e.code,{children:"default-character-set"}),"的启动选项，比如在配置文件里可以这么写："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"[client]\ndefault-character-set=utf8\n"})}),"\n",(0,s.jsxs)(e.p,{children:["它起到的效果和执行一遍",(0,s.jsx)(e.code,{children:"SET NAMES utf8"}),"是一样一样的，都会将那三个系统变量的值设置成",(0,s.jsx)(e.code,{children:"utf8"}),"。"]}),"\n",(0,s.jsxs)(e.h3,{id:"比较规则的应用",children:["比较规则的应用",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#比较规则的应用",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["结束了字符集的漫游，我们把视角再次聚焦到",(0,s.jsx)(e.code,{children:"比较规则"}),"，",(0,s.jsx)(e.code,{children:"比较规则"}),"的作用通常体现比较字符串大小的表达式以及对某个字符串列进行排序中，所以有时候也称为",(0,s.jsx)(e.code,{children:"排序规则"}),"。比方说表",(0,s.jsx)(e.code,{children:"t"}),"的列",(0,s.jsx)(e.code,{children:"col"}),"使用的字符集是",(0,s.jsx)(e.code,{children:"gbk"}),"，使用的比较规则是",(0,s.jsx)(e.code,{children:"gbk_chinese_ci"}),"，我们向里边插入几条记录："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> INSERT INTO t(col) VALUES('a'), ('b'), ('A'), ('B');\nQuery OK, 4 rows affected (0.00 sec)\nRecords: 4  Duplicates: 0  Warnings: 0\n\nmysql>\n"})}),"\n",(0,s.jsxs)(e.p,{children:["我们查询的时候按照",(0,s.jsx)(e.code,{children:"t"}),"列排序一下："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> SELECT * FROM t ORDER BY col;\n+------+\n| col  |\n+------+\n| a    |\n| A    |\n| b    |\n| B    |\n| 我   |\n+------+\n5 rows in set (0.00 sec)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["可以看到在默认的比较规则",(0,s.jsx)(e.code,{children:"gbk_chinese_ci"}),"中是不区分大小写的，我们现在把列",(0,s.jsx)(e.code,{children:"col"}),"的比较规则修改为",(0,s.jsx)(e.code,{children:"gbk_bin"}),"："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> ALTER TABLE t MODIFY s VARCHAR(10) COLLATE gbk_bin;\nQuery OK, 5 rows affected (0.02 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n"})}),"\n",(0,s.jsxs)(e.p,{children:["由于",(0,s.jsx)(e.code,{children:"gbk_bin"}),"是不区分大小写而直接比较字符的编码，我们再看一下排序后的查询结果："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mysql> SELECT * FROM t ORDER BY s;\n+------+\n| s    |\n+------+\n| A    |\n| B    |\n| a    |\n| b    |\n| 我   |\n+------+\n5 rows in set (0.00 sec)\n\nmysql>\n"})}),"\n",(0,s.jsxs)(e.p,{children:["所以如果以后大家在对字符串做比较或者对某个字符串列做排序操作时没有得到想象中的结果，需要思考一下是不是",(0,s.jsx)(e.code,{children:"比较规则"}),"的问题～"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"小贴士：\n\n列`col`中各个字符在使用gbk字符集编码后对应的数字如下：\n'A' -> 65 （十进制）\n'B' -> 66 （十进制）\n'A' -> 97 （十进制）\n'A' -> 98 （十进制）\n'A' -> 25105 （十进制）\n\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:["总结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"字符集"}),"的是某个字符范围的编码规则。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"比较规则"}),"是针对某个字符集中的字符比较大小的一种规则。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.code,{children:"MySQL"}),"中，一个字符集可以有若干种比较规则，其中有一个默认的比较规则，一个比较规则必须对应一个字符集。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["查看",(0,s.jsx)(e.code,{children:"MySQL"}),"中查看支持的字符集和比较规则的语句如下："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"SHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];\nSHOW COLLATION [LIKE 匹配的模式];\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"MySQL有四个级别的字符集和比较规则"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"服务器级别"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"character_set_server"}),"表示服务器级别的字符集，",(0,s.jsx)(e.code,{children:"collation_server"}),"表示服务器级别的比较规则。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"数据库级别"}),"\n",(0,s.jsx)(e.p,{children:"创建和修改数据库时可以指定字符集和比较规则："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"CREATE DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n\nALTER DATABASE 数据库名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [[DEFAULT] COLLATE 比较规则名称];\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"character_set_database"}),"表示当前数据库的字符集，",(0,s.jsx)(e.code,{children:"collation_database"}),"表示当前默认数据库的比较规则，这两个系统变量是只读的，不能修改。如果没有指定当前默认数据库，则变量与相应的服务器级系统变量具有相同的值。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"表级别"}),"\n",(0,s.jsx)(e.p,{children:"创建和修改表的时候指定表的字符集和比较规则："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"CREATE TABLE 表名 (列的信息)\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]]\n\nALTER TABLE 表名\n    [[DEFAULT] CHARACTER SET 字符集名称]\n    [COLLATE 比较规则名称]\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"列级别"}),"\n",(0,s.jsx)(e.p,{children:"创建和修改列定义的时候可以指定该列的字符集和比较规则："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"CREATE TABLE 表名(\n    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],\n    其他列...\n);\n\nALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.ol,{start:"6",children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"从发送请求到接收结果过程中发生的字符集转换："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"客户端使用操作系统的字符集编码请求字符串"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["服务器将客户端发送来的字符串的字符集按照",(0,s.jsx)(e.code,{children:"chacharacter_set_client"}),"转换为",(0,s.jsx)(e.code,{children:"character_set_connection"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["使用",(0,s.jsx)(e.code,{children:"character_set_connection"}),"进行服务器操作。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["将结果集字符串的字符集从",(0,s.jsx)(e.code,{children:"character_set_connection"}),"转为",(0,s.jsx)(e.code,{children:"character_set_results"}),"发送到客户端"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"客户端使用操作系统的字符集解析收到的结果集字符串"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"在这个过程中各个系统变量的含义如下："}),"\n",(0,s.jsxs)(e.table,{children:["\n",(0,s.jsxs)(e.thead,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.th,{align:"center",children:"系统变量"}),"\n",(0,s.jsx)(e.th,{align:"center",children:"描述"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.tbody,{children:["\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"character_set_client"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"服务器解码请求时使用的字符集"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"character_set_connection"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"服务器运行过程中使用的字符集"}),"\n"]}),"\n",(0,s.jsxs)(e.tr,{children:["\n",(0,s.jsx)(e.td,{align:"center",children:(0,s.jsx)(e.code,{children:"character_set_results"})}),"\n",(0,s.jsx)(e.td,{align:"center",children:"服务器向客户端返回数据时使用的字符集"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"一般情况下要使用保持这三个变量的值和客户端使用的字符集相同。"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"比较规则的作用通常体现比较字符串大小的表达式以及对某个字符串列进行排序中。"}),"\n"]}),"\n"]})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(r,{...n})}):r(n)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["MySQL%20%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%9A%E4%BB%8E%E6%A0%B9%E5%84%BF%E4%B8%8A%E7%90%86%E8%A7%A3%20MySQL%2F3%E4%B9%B1%E7%A0%81%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%20%E2%80%94%E2%80%94%20%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99.md"]={toc:[{text:"字符集和比较规则简介",id:"字符集和比较规则简介",depth:2},{text:"字符集简介",id:"字符集简介",depth:3},{text:"比较规则简介",id:"比较规则简介",depth:3},{text:"一些重要的字符集",id:"一些重要的字符集",depth:3},{text:"MySQL中支持的字符集和排序规则",id:"mysql中支持的字符集和排序规则",depth:2},{text:"MySQL中的utf8和utf8mb4",id:"mysql中的utf8和utf8mb4",depth:3},{text:"字符集的查看",id:"字符集的查看",depth:3},{text:"比较规则的查看",id:"比较规则的查看",depth:3},{text:"字符集和比较规则的应用",id:"字符集和比较规则的应用",depth:2},{text:"各级别的字符集和比较规则",id:"各级别的字符集和比较规则",depth:3},{text:"服务器级别",id:"服务器级别",depth:4},{text:"数据库级别",id:"数据库级别",depth:4},{text:"表级别",id:"表级别",depth:4},{text:"列级别",id:"列级别",depth:4},{text:"仅修改字符集或仅修改比较规则",id:"仅修改字符集或仅修改比较规则",depth:4},{text:"各级别字符集和比较规则小结",id:"各级别字符集和比较规则小结",depth:4},{text:"客户端和服务器通信中的字符集",id:"客户端和服务器通信中的字符集",depth:3},{text:"编码和解码使用的字符集不一致的后果",id:"编码和解码使用的字符集不一致的后果",depth:4},{text:"字符集转换的概念",id:"字符集转换的概念",depth:4},{text:"MySQL中字符集的转换",id:"mysql中字符集的转换",depth:4},{text:"比较规则的应用",id:"比较规则的应用",depth:3},{text:"总结",id:"总结",depth:2}],title:"3乱码的前世今生 —— 字符集和比较规则",headingTitle:"3乱码的前世今生 —— 字符集和比较规则",frontmatter:{}}}}]);