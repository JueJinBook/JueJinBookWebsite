"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["23926"],{923617:function(e,n,r){r.r(n),r.d(n,{default:()=>p});var c=r(552676),s=r(740453);let l=r.p+"static/image/10f2b9c633f72061021ab5527c79f9a0.5ce0077a.webp",o=r.p+"static/image/bc937ec21f60c7d9ce0a921db2804fec.339cb30b.webp",i=r.p+"static/image/6873d2116065968558b819e09de5fe15.a720812c.webp",a=r.p+"static/image/cc8f1e6ef1c5185a9a351d4c47cf5904.be8225d5.webp",d=r.p+"static/image/f92a982ab9373f8d3e7e27f3f48821c4.e5353ca3.webp";function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",h2:"h2",strong:"strong",code:"code",img:"img",pre:"pre",blockquote:"blockquote",ol:"ol",h3:"h3"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"9如何借助-webpack-开发-pwanodeelectron-应用",children:["9.如何借助 Webpack 开发 PWA、Node、Electron 应用？",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9如何借助-webpack-开发-pwanodeelectron-应用",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["毋庸置疑，对前端开发者而言，当下正是一个日升月恒的美好时代！在久远的过去，Web 页面的开发技术链条非常原始而粗糙，那时候的 JavaScript 更多用来点缀 Web 页面交互而不是用来构建一个完整的应用。直到 2009年5月 ",(0,c.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Ryan_Dahl",target:"_blank",rel:"noopener noreferrer",children:"Ryan Dahl"})," 正式发布 NodeJS，JavaScript 终于有机会脱离 Web 浏览器独立运行，随之而来的是，基于 JavaScript 构建应用程序的能力被扩展到越来越多场景，我们得以用相同的语言、技术栈、工具独立开发桌面端、服务端、命令行、微前端、PWA 等应用形态。"]}),"\n",(0,c.jsx)(n.p,{children:"相应地，我们需要更好的构建、模块化以及打包能力来应对不同形态的工程化需求，所幸 Webpack 提供的功能特性，能够充分支撑这些场景。"}),"\n",(0,c.jsx)(n.p,{children:"前面两个章节我们已经详细介绍了如何使用 Webpack 构建 NPM Library，以及如何基于 Module Federation 搭建微前端架构。本文将继续汇总这些特化场景需求，包括："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"如何使用 Webpack 构建 Progressive Web Apps 应用；"}),"\n",(0,c.jsx)(n.li,{children:"如何使用 Webpack 构建 Node 应用；"}),"\n",(0,c.jsx)(n.li,{children:"如何使用 Webpack 构建 Electron 应用。"}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"构建-pwa-应用",children:["构建 PWA 应用",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建-pwa-应用",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["PWA 全称 Progressive Web Apps (渐进式 Web 应用)，原始定义很复杂，可以简单理解为 ",(0,c.jsx)(n.strong,{children:"一系列将网页如同独立 APP 般安装到本地的技术集合"}),"，借此，我们即可以保留普通网页轻量级、可链接(SEO 友好)、低门槛（只要有浏览器就能访问）等优秀特点，又同时具备独立 APP 离线运行、可安装等优势。"]}),"\n",(0,c.jsx)(n.p,{children:"实现上，PWA 与普通 Web 应用的开发方法大致相同，都是用 CSS、JS、HTML 定义应用的样式、逻辑、结构，两者主要区别在于，PWA 需要用一些新技术实现离线与安装功能："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API",target:"_blank",rel:"noopener noreferrer",children:"ServiceWorker"}),"： 可以理解为一种介于网页与服务器之间的本地代理，主要实现 PWA 应用的离线运行功能。例如 ",(0,c.jsx)(n.code,{children:"ServiceWorker"})," 可以将页面静态资源缓存到本地，用户再次运行页面访问这些资源时，",(0,c.jsx)(n.code,{children:"ServiceWorker"})," 可拦截这些请求并直接返回缓存副本，即使此时用户处于离线状态也能正常使用页面；"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"https://web.dev/add-manifest/?utm_source=devtools",target:"_blank",rel:"noopener noreferrer",children:"manifest"})," 文件：描述 PWA 应用信息的 JSON 格式文件，用于实现本地安装功能，通常包含应用名、图标、URL 等内容，例如："]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'// manifest.json\n{\n  "icons": [\n    {\n      "src": "/icon_120x120.0ce9b3dd087d6df6e196cacebf79eccf.png",\n      "sizes": "120x120",\n      "type": "image/png"\n    }\n  ],\n  "name": "My Progressive Web App",\n  "short_name": "MyPWA",\n  "display": "standalone",\n  "start_url": ".",\n  "description": "My awesome Progressive Web App!"\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["我们可以选择自行开发、维护 ",(0,c.jsx)(n.code,{children:"ServiceWorker"})," 及 ",(0,c.jsx)(n.code,{children:"manifest"})," 文件 ，也可以简单点使用 Google 开源的 Workbox 套件自动生成 PWA 应用的壳，首先安装依赖："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"yarn add -D workbox-webpack-plugin webpack-pwa-manifest\n"})}),"\n",(0,c.jsx)(n.p,{children:"其中："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"workbox-webpack-plugin"}),"：用于自动生成 ",(0,c.jsx)(n.code,{children:"ServiceWorker"})," 代码的 Webpack 插件；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"webpack-pwa-mainifest"}),"：根据 Webpack 编译结果，自动生成 PWA Manifest 文件的 Webpack 插件。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["之后，在 ",(0,c.jsx)(n.code,{children:"webpack.config.js"})," 配置文件中注册插件："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const HtmlWebpackPlugin = require("html-webpack-plugin");\nconst { GenerateSW } = require("workbox-webpack-plugin");\nconst WebpackPwaManifest = require("webpack-pwa-manifest");\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: "Progressive Web Application",\n    }),\n    // 自动生成 Manifest 文件\n    new WebpackPwaManifest({\n      name: "My Progressive Web App",\n      short_name: "MyPWA",\n      description: "My awesome Progressive Web App!",\n      publicPath: "/",\n      icons: [\n        {\n          // 桌面图标，注意这里只支持 PNG、JPG、BMP 格式\n          src: path.resolve("src/assets/logo.png"),\n          sizes: [150],\n        },\n      ],\n    }),\n    // 自动生成 ServiceWorker 文件\n    new GenerateSW({\n      clientsClaim: true,\n      skipWaiting: true,\n    }),\n  ],\n};\n'})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["提示：示例代码已上传到 ",(0,c.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/tree/main/8-1_pwa",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["之后，执行编译命令如 ",(0,c.jsx)(n.code,{children:"npx webpack"})," 就可以生成如下资源："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"├─ 8-1_pwa\n│  ├─ src\n│  │  ├─ xxx\n│  ├─ dist\n│  │  ├─ icon_150x150.119e95d3213ab9106b0f95100015a20a.png\n│  │  ├─ index.html\n│  │  ├─ main.js\n│  │  ├─ manifest.22f4938627a3613bde0a011750caf9f4.json\n│  │  ├─ service-worker.js\n│  │  ├─ workbox-2afe96ff.js\n│  └─ webpack.config.js\n"})}),"\n",(0,c.jsxs)(n.p,{children:["接下来，运行并使用 Chrome 打开页面，打开开发者工具，切换到 ",(0,c.jsx)(n.code,{children:"Applicatios > Service Workers"})," 面板，可以看到："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"这表明 Service Worker 已经正常安装到浏览器上。此外，地址栏右方还会出现一个下载图标："}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:i,alt:"image.png"})}),"\n",(0,c.jsx)(n.p,{children:"点击该图标可将应用下载到本地，并在桌面创建应用图标 —— 效果如同安装独立 App 一样。"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"提示：PWA 是一种复杂度较高的技术，前文只是介绍了一种 Webpack 构建 PWA 的简单方法，感兴趣的同学可以扩展阅读："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://developer.chrome.com/docs/workbox/modules/workbox-webpack-plugin/",target:"_blank",rel:"noopener noreferrer",children:"https://developer.chrome.com/docs/workbox/modules/workbox-webpack-plugin/"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://developers.google.com/web/fundamentals/primers/service-workers",target:"_blank",rel:"noopener noreferrer",children:"https://developers.google.com/web/fundamentals/primers/service-workers"})}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"构建-node-应用",children:["构建 Node 应用",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建-node-应用",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["注意，",(0,c.jsx)(n.strong,{children:"在开发 Node 程序时使用 Webpack 的必要性并不大"}),"，因为 Node 本身已经有完备的模块化系统，并不需要像 Web 页面那样把所有代码打包成一个（或几个）产物文件！即使是为了兼容低版本 Node 环境，也可以使用更简单的方式解决 —— 例如 Babel，引入 Webpack 反而增加了系统复杂度以及不少技术隐患。"]}),"\n",(0,c.jsx)(n.p,{children:"不过，出于学习目的，我们还是可以了解一下使用 Webpack 构建 Node 程序的方法及注意事项，包括："}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["需要 Webpack 的 ",(0,c.jsx)(n.a,{href:"https://webpack.js.org/configuration/target/",target:"_blank",rel:"noopener noreferrer",children:(0,c.jsx)(n.code,{children:"target"})})," 值设置为 ",(0,c.jsx)(n.code,{children:"node"})," ，这能让 Webpack 忽略 ",(0,c.jsx)(n.code,{children:"fs/path"})," 等原生 Node 模块；"]}),"\n",(0,c.jsxs)(n.li,{children:["需要使用 ",(0,c.jsx)(n.a,{href:"https://webpack.js.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer",children:(0,c.jsx)(n.code,{children:"externals"})})," 属性过滤 ",(0,c.jsx)(n.code,{children:"node_modules"})," 模块，简单起见，也可以直接使用 ",(0,c.jsx)(n.code,{children:"webpack-node-externals"})," 库；"]}),"\n",(0,c.jsxs)(n.li,{children:["需要使用 ",(0,c.jsx)(n.a,{href:"https://webpack.js.org/configuration/node/",target:"_blank",rel:"noopener noreferrer",children:(0,c.jsx)(n.code,{children:"node"})})," 属性，正确处理 ",(0,c.jsx)(n.code,{children:"__dirname"}),"、",(0,c.jsx)(n.code,{children:"__filename"})," 值。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"一个典型的 Node 构建配置如下："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'const nodeExternals = require("webpack-node-externals");\n\nmodule.exports = merge(WebpackBaseConfig, {\n  // 1. 设置 target 为 node\n  target: "node",\n  entry: ...,\n  module: [...],\n  // 2. 过滤 node_modules 模块\n  externals: [nodeExternals()],\n  // 3. 设置 __dirname, __filename 值\n  node: {\n    __filename: false,\n    __dirname: false,\n  },\n});\n'})}),"\n",(0,c.jsx)(n.p,{children:"在此基础上，我们可以复用大多数 Loader、Plugin 及 Webpack 基础能力实现各种构建功能。"}),"\n",(0,c.jsxs)(n.p,{children:["不过，需要特别注意，在 Node 代码中请务必慎用动态 ",(0,c.jsx)(n.code,{children:"require"})," 语句，你很可能会得到预期之外的效果！例如对于下面的示例目录："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"├─ example\n│  ├─ src\n│  │  ├─ foo.js\n│  │  ├─ bar.js\n│  │  ├─ unused.js\n│  │  └─ main.js\n│  ├─ package.json\n│  └─ webpack.config.js\n"})}),"\n",(0,c.jsxs)(n.p,{children:["其中 ",(0,c.jsx)(n.code,{children:"main.js"})," 为入口文件，代码："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const modules = ['foo', 'bar'].map(r => require(`./${r}.js`));\n"})}),"\n",(0,c.jsxs)(n.p,{children:["可以看到在 ",(0,c.jsx)(n.code,{children:"main.js"})," 中并没有引用 ",(0,c.jsx)(n.code,{children:"unused.js"})," ，但打包产物中却包含了 ",(0,c.jsx)(n.code,{children:"src"})," 目录下所有文件："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:o,alt:"image.png"})}),"\n",(0,c.jsxs)(n.p,{children:["这是因为 Webpack 遇到示例中的 ",(0,c.jsx)(n.code,{children:"require"})," 语句时，仅仅依靠词法规则、静态语义、AST 等手段并不能推断出实际依赖情况，只能退而求其次粗暴地将所有可能用到的代码一股脑合并进来，这种处理手段很可能会带来许多意想不到的结果，很可能触发 BUG！"]}),"\n",(0,c.jsx)(n.p,{children:"综上，建议尽量不要使用 Webpack 构建 Node 应用。"}),"\n",(0,c.jsxs)(n.h2,{id:"构建-electron-应用",children:["构建 Electron 应用",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建-electron-应用",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"Electron 是一种使用 JavaScript、HTML、CSS 等技术构建跨平台桌面应用开发框架，这意味着我们能用我们熟悉的大部分 Web 技术 —— 例如 React、Vue、Webpack 等开发桌面级应用程序。实际上，许多大名鼎鼎的应用如 VSCode、Facebook Messenger、Twitch，以及国内诸多小程序 IDE 都是基于 Electron 实现的。"}),"\n",(0,c.jsxs)(n.p,{children:["与 Web 页面不同，Electron 应用由一个 ",(0,c.jsx)(n.strong,{children:"主进程"})," 及若干 ",(0,c.jsx)(n.strong,{children:"渲染进程"})," 组成，进程之间以 IPC 方式通讯，其中："]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"主进程是一个 Node 程序，能够使用所有 Node 能力及 Electron 提供的 Native API，主要负责应用窗口的创建与销毁、事件注册分发、版本更新等；"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"渲染进程本质上是一个 Chromium 实例，负责加载我们编写的页面代码，渲染成 Electron 应用界面。"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)("img",{src:l,alt:"image.png"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"提示：Chromium 是一个非常简洁的开源浏览器，许多浏览器都基于 Chromium 二次开发而成，例如 Chrome、Microsoft Edge、Opera 等。"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Electron 这种多进程机构，要求我们能在同一个项目中同时支持主进程与若干渲染进程的构建，两者打包需求各有侧重。接下来我们将通过一个简单示例，逐步讲解如何使用 Webpack 搭建一套完备的 Electron 应用构建环境，示例文件结构如下："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"8-3_electron-wp\n├─ package.json\n├─ webpack.main.config.js       // 主进程构建配置\n├─ webpack.renderer.config.js   // 渲染进程构建配置\n├─ src\n│  ├─ main.js\n│  ├─ pages\n│  │  ├─ home\n│  │     ├─ index.js\n│  │  ├─ login\n│  │     ├─ index.js\n"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["提示：示例代码已上传到 ",(0,c.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/tree/main/8-3_electron-wp",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"其中："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"src/main.js"})," 为主进程代码；"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"src/pages/${page name}/"})," 目录为渲染进程 —— 即桌面应用中每一个独立页面的代码；"]}),"\n",(0,c.jsxs)(n.li,{children:["由于主进程、渲染进程的打包差异较大，这里为方便演示，直接写成两个配置文件：",(0,c.jsx)(n.code,{children:"webpack.main.config.js"})," 与 ",(0,c.jsx)(n.code,{children:"webpack.renderer.config.js"}),"。"]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"electron-主进程打包配置",children:["Electron 主进程打包配置",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#electron-主进程打包配置",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"主进程负责应用窗口的创建销毁，以及许多跨进程通讯逻辑，可以理解为 Electron 应用的控制中心，简单示例："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'// src/main.js\nconst { app, BrowserWindow } = require("electron");\n\n// 应用启动后\napp.whenReady().then(() => {\n  // 创建渲染进程实例\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  });\n  // 使用 BrowserWindow 实例打开页面\n  win.loadFile("home.html");\n});\n'})}),"\n",(0,c.jsxs)(n.p,{children:["代码核心逻辑是在应用启动后 （",(0,c.jsx)(n.code,{children:"app.whenReady"})," 钩子），创建 ",(0,c.jsx)(n.code,{children:"BrowserWindow"})," 实例并打开页面。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["提示：建议结合 Electron 官方提供的 ",(0,c.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/tutorial/examples",target:"_blank",rel:"noopener noreferrer",children:"完整示例"})," 一起学习。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Electron 主进程本质上是一个 Node 程序，因此许多适用于 Node 的构建工具、方法也同样适用主进程，例如 Babel、TypeScript、ESLint 等。与普通 Node 工程相比，构建主进程时需要注意："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["需要将 ",(0,c.jsx)(n.a,{href:"https://webpack.js.org/configuration/target/",target:"_blank",rel:"noopener noreferrer",children:(0,c.jsx)(n.code,{children:"target"})})," 设置为 ",(0,c.jsx)(n.code,{children:"electron-main"})," ，Webpack 会自动帮我们过滤掉一些 Electron 组件，如 ",(0,c.jsx)(n.code,{children:"clipboard"}),"、",(0,c.jsx)(n.code,{children:"ipc"}),"、",(0,c.jsx)(n.code,{children:"screen"})," 等；"]}),"\n",(0,c.jsxs)(n.li,{children:["需要使用 ",(0,c.jsx)(n.code,{children:"externals"})," 属性排除 ",(0,c.jsx)(n.code,{children:"node_modules"})," 模块，简单起见也可以直接使用 ",(0,c.jsx)(n.a,{href:"https://www.npmjs.com/package/webpack-node-externals",target:"_blank",rel:"noopener noreferrer",children:"webpack-node-externals"})," 包；"]}),"\n",(0,c.jsxs)(n.li,{children:["生产环境建议将 ",(0,c.jsx)(n.code,{children:"devtools"})," 设置为 ",(0,c.jsx)(n.code,{children:"false"}),"，减少包体积。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"对应的配置脚本："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'// webpack.main.config.js\nconst path = require("path");\nconst nodeExternals = require("webpack-node-externals");\n\nmodule.exports = {\n  // 主进程需要将 `target` 设置为 `electron-main`\n  target: "electron-main",\n  mode: process.env.NODE_ENV || "development",\n  // 开发环境使用 `source-map`，保持高保真源码映射，方便调试\n  devtool: process.env.NODE_ENV === "production"? false: "source-map",\n  entry: {\n    main: path.join(__dirname, "./src/main"),\n  },\n  output: {\n    filename: "[name].js",\n    path: path.join(__dirname, "./dist"),\n  },\n  externals: [nodeExternals()],\n};\n'})}),"\n",(0,c.jsx)(n.p,{children:"至此，一个非常简单的主进程脚本与构建环境示例就搭建完毕了，执行下述命令即可完成构建工作："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"npx webpack -c webpack.main.config.js\n"})}),"\n",(0,c.jsx)(n.p,{children:"另外，安装 Electron 过程中可能会遇到网络超时问题，这是因为资源域已经被墙了，可以使用阿里云镜像解决："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'ELECTRON_MIRROR="https://cdn.npm.taobao.org/dist/electron/" npm i -D electron\n'})}),"\n",(0,c.jsxs)(n.h3,{id:"electron-渲染进程打包配置",children:["Electron 渲染进程打包配置",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#electron-渲染进程打包配置",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"Electron 渲染进程本质上就一个运行在 Chromium 浏览器上的网页，开发方法基本等同于我们日常开发的普通 Web 页面，例如我们可以用 React 开发 Electron 渲染进程："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'// src/home/index.js\nimport React from "react";\nimport ReactDOM from "react-dom";\n\nconst root = document.createElement("div");\n\nReactDOM.render(<h1>Hello world!</h1>, root);\n\ndocument.body.append(root);\n'})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["提示：示例代码已上传到 ",(0,c.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/tree/main/8-3_electron-wp",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"相应的，我们可以复用大部分普通 Web 页面构建的方式方法，主要差异点："}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["需要将 Webpack 的 ",(0,c.jsx)(n.code,{children:"target"})," 配置设置为 ",(0,c.jsx)(n.code,{children:"electron-renderer"}),"；"]}),"\n",(0,c.jsx)(n.li,{children:"Electron 应用通常包含多个渲染进程，因此我们经常需要开启多页面构建配置；"}),"\n",(0,c.jsx)(n.li,{children:"为实现渲染进程的 HMR 功能，需要对主进程代码稍作改造。"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"第一点很简单："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'// webpack.renderer.config.js\nmodule.exports = {\n  // 渲染进程需要将 `target` 设置为 `electron-renderer`\n  target: "electron-renderer"\n};\n'})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["提示：Webpack 为 Electron 提供了三种特殊 ",(0,c.jsx)(n.code,{children:"target"})," 值：",(0,c.jsx)(n.code,{children:"electron-main/electron-renderer/electron-preload"}),"，分别用于主进程、Renderer 进程、Preload 脚本三种场景。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["第二点可以用多 ",(0,c.jsx)(n.code,{children:"entry"})," 配置实现，如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'// webpack.renderer.config.js\n// 入口文件列表\nconst entries = {\n  home: path.join(__dirname, "./src/pages/home"),\n  login: path.join(__dirname, "./src/pages/login"),\n};\n\n// 为每一个入口创建 HTMLWebpackPlugin 实例\nconst htmlPlugins = Object.keys(entries).map(\n  (k) =>\n    new HtmlWebpackPlugin({\n      title: `[${k}] My Awesome Electron App`,\n      filename: `${k}.html`,\n      chunks: [k],\n    })\n);\n\nmodule.exports = {\n  mode: process.env.NODE_ENV || "development",\n  entry: entries,\n  target: "electron-renderer",\n  plugins: [...htmlPlugins],\n  // ...\n};\n'})}),"\n",(0,c.jsxs)(n.p,{children:["第三点，由于 Webpack 的 HMR 功能强依赖于 WebSocket 实现通讯，但 Electron 主进程常用文件协议 ",(0,c.jsx)(n.code,{children:"file://"})," 打开页面，该协议不支持 WebSocket 接口，为此我们需要改造主进程启动代码，以 HTTP 方式打开页面代码，如："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:'function createWindow() {\n  const win = new BrowserWindow({\n    //...\n  });\n\n  if (process.env.NODE_ENV === "development") {\n    // 开发环境下，加载 http 协议的页面，方便启动 HMR\n    win.loadURL("http://localhost:8080/home");\n  } else {\n    // 生产环境下，依然使用 `file://` 协议\n    win.loadFile(path.join(app.getAppPath(), "home.html"));\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["提示：在生产环境中，出于性能考虑，Electron 主进程通常会以 ",(0,c.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/File_URI_scheme",target:"_blank",rel:"noopener noreferrer",children:"File URL Scheme"})," 方式直接加载本地 HTML 文件，这样我们就不必为了提供 HTML 内容而专门启动一个 HTTP 服务进程。不过，同一份代码，用 File URL Scheme 和用 HTTP 方式打开，浏览器提供的接口差异较大，开发时注意区分测试接口兼容性。"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["至此，改造完毕，同学们可以 Clone ",(0,c.jsx)(n.a,{href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/main/8-3_electron-wp/src/main.js",target:"_blank",rel:"noopener noreferrer",children:"示例代码"}),"，本地运行测试效果。"]}),"\n",(0,c.jsxs)(n.h2,{id:"总结",children:["总结",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"综上，Webpack 不仅能构建一般的 Web 应用，理论上还适用于一切以 JavaScript 为主要编程语言的场景，包括 PWA、Node 程序、Electron 等，只是不同场景下的具体构建需求略有差异："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["PWA：需要使用 ",(0,c.jsx)(n.code,{children:"workbox-webpack-plugin"})," 自动生成 ",(0,c.jsx)(n.code,{children:"ServiceWorker"})," 代码；使用 ",(0,c.jsx)(n.code,{children:"webpack-pwa-mainifest"})," Manifest 文件；"]}),"\n",(0,c.jsxs)(n.li,{children:["Node 程序：需要设置 Webpack 配置项 ",(0,c.jsx)(n.code,{children:'target = "node"'}),"；需要使用 ",(0,c.jsx)(n.a,{href:"https://webpack.js.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer",children:"externals"})," 属性过滤 ",(0,c.jsx)(n.code,{children:"node_modules"})," 模块；需要使用 ",(0,c.jsx)(n.a,{href:"https://webpack.js.org/configuration/node/",target:"_blank",rel:"noopener noreferrer",children:"node"})," 属性正确处理 Node 全局变量；"]}),"\n",(0,c.jsx)(n.li,{children:"Electron 桌面应用：需要为主进程、渲染进程分别设置不同的构建脚本；同时需要注意开发阶段使用 HMR 的注意事项。"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"这种强大、普适的构建能力正是 Webpack 的核心优势之一，同类工具无出其右者，虽然不能一招鲜吃天下，但也足够覆盖大多数前端应用场景。站在学习的角度，你可以将主要精力放在 Webpack 基础构建逻辑、配置规则、常用组件上，遇到特殊场景时再灵活查找相应 Loader、Plugin 以及其它生态工具，就可以搭建出适用的工程化环境。"}),"\n",(0,c.jsxs)(n.h2,{id:"思考题",children:["思考题",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#思考题",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"作为对比，调研一下同类框架：Rollup、Parcel、Gulp 等，能否被用于构建 PWA、Node、Electron、微前端、小程序等应用？"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(t,{...e})}):t(e)}let p=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["Webpack5%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%2F9.%E5%A6%82%E4%BD%95%E5%80%9F%E5%8A%A9%20Webpack%20%E5%BC%80%E5%8F%91%20PWA%E3%80%81Node%E3%80%81Electron%20%E5%BA%94%E7%94%A8%EF%BC%9F.md"]={toc:[{text:"构建 PWA 应用",id:"构建-pwa-应用",depth:2},{text:"构建 Node 应用",id:"构建-node-应用",depth:2},{text:"构建 Electron 应用",id:"构建-electron-应用",depth:2},{text:"Electron 主进程打包配置",id:"electron-主进程打包配置",depth:3},{text:"Electron 渲染进程打包配置",id:"electron-渲染进程打包配置",depth:3},{text:"总结",id:"总结",depth:2},{text:"思考题",id:"思考题",depth:2}],title:"9.如何借助 Webpack 开发 PWA、Node、Electron 应用？",headingTitle:"9.如何借助 Webpack 开发 PWA、Node、Electron 应用？",frontmatter:{}}}}]);