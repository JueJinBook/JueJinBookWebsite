"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["64498"],{769003:function(e,n,a){a.r(n),a.d(n,{default:()=>i});var r=a(552676),s=a(740453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li",h3:"h3"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"simd",children:["SIMD",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simd",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"概述",children:["概述",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#概述",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["SIMD（发音",(0,r.jsx)(n.code,{children:"/sim-dee/"}),"）是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，你可以看做这是一种不同的运算执行模式。与它相对的是 SISD（“Single Instruction/Single Data”），即“单指令，单数据”。"]}),"\n",(0,r.jsx)(n.p,{children:"SIMD 的含义是使用一个指令，完成多个数据的运算；SISD 的含义是使用一个指令，完成单个数据的运算，这是 JavaScript 的默认运算模式。显而易见，SIMD 的执行效率要高于 SISD，所以被广泛用于 3D 图形运算、物理模拟等运算量超大的项目之中。"}),"\n",(0,r.jsx)(n.p,{children:"为了理解 SIMD，请看下面的例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = [1, 2, 3, 4];\nvar b = [5, 6, 7, 8];\nvar c = [];\n\nc[0] = a[0] + b[0];\nc[1] = a[1] + b[1];\nc[2] = a[2] + b[2];\nc[3] = a[3] + b[3];\nc // Array[6, 8, 10, 12]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，数组",(0,r.jsx)(n.code,{children:"a"}),"和",(0,r.jsx)(n.code,{children:"b"}),"的对应成员相加，结果放入数组",(0,r.jsx)(n.code,{children:"c"}),"。它的运算模式是依次处理每个数组成员，一共有四个数组成员，所以需要运算 4 次。"]}),"\n",(0,r.jsx)(n.p,{children:"如果采用 SIMD 模式，只要运算一次就够了。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1, 2, 3, 4);\nvar b = SIMD.Float32x4(5, 6, 7, 8);\nvar c = SIMD.Float32x4.add(a, b); // Float32x4[6, 8, 10, 12]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码之中，数组",(0,r.jsx)(n.code,{children:"a"}),"和",(0,r.jsx)(n.code,{children:"b"}),"的四个成员的各自相加，只用一条指令就完成了。因此，速度比上一种写法提高了 4 倍。"]}),"\n",(0,r.jsx)(n.p,{children:"一次 SIMD 运算，可以处理多个数据，这些数据被称为“通道”（lane）。上面代码中，一次运算了四个数据，因此就是四个通道。"}),"\n",(0,r.jsx)(n.p,{children:"SIMD 通常用于矢量运算。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"v + w = 〈v1, …, vn〉+ 〈w1, …, wn〉\n      = 〈v1+w1, …, vn+wn〉\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"v"}),"和",(0,r.jsx)(n.code,{children:"w"}),"是两个多元矢量。它们的加运算，在 SIMD 下是一个指令、而不是 n 个指令完成的，这就大大提高了效率。这对于 3D 动画、图像处理、信号处理、数值处理、加密等运算是非常重要的。比如，Canvas 的",(0,r.jsx)(n.code,{children:"getImageData()"}),"会将图像文件读成一个二进制数组，SIMD 就很适合对于这种数组的处理。"]}),"\n",(0,r.jsx)(n.p,{children:"总的来说，SIMD 是数据并行处理（parallelism）的一种手段，可以加速一些运算密集型操作的速度。将来与 WebAssembly 结合以后，可以让 JavaScript 达到二进制代码的运行速度。"}),"\n",(0,r.jsxs)(n.h2,{id:"数据类型",children:["数据类型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据类型",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"SIMD 提供 12 种数据类型，总长度都是 128 个二进制位。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Float32x4：四个 32 位浮点数"}),"\n",(0,r.jsx)(n.li,{children:"Float64x2：两个 64 位浮点数"}),"\n",(0,r.jsx)(n.li,{children:"Int32x4：四个 32 位整数"}),"\n",(0,r.jsx)(n.li,{children:"Int16x8：八个 16 位整数"}),"\n",(0,r.jsx)(n.li,{children:"Int8x16：十六个 8 位整数"}),"\n",(0,r.jsx)(n.li,{children:"Uint32x4：四个无符号的 32 位整数"}),"\n",(0,r.jsx)(n.li,{children:"Uint16x8：八个无符号的 16 位整数"}),"\n",(0,r.jsx)(n.li,{children:"Uint8x16：十六个无符号的 8 位整数"}),"\n",(0,r.jsx)(n.li,{children:"Bool32x4：四个 32 位布尔值"}),"\n",(0,r.jsx)(n.li,{children:"Bool16x8：八个 16 位布尔值"}),"\n",(0,r.jsx)(n.li,{children:"Bool8x16：十六个 8 位布尔值"}),"\n",(0,r.jsx)(n.li,{children:"Bool64x2：两个 64 位布尔值"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["每种数据类型被",(0,r.jsx)(n.code,{children:"x"}),"符号分隔成两部分，后面的部分表示通道数，前面的部分表示每个通道的宽度和类型。比如，",(0,r.jsx)(n.code,{children:"Float32x4"}),"就表示这个值有 4 个通道，每个通道是一个 32 位浮点数。"]}),"\n",(0,r.jsx)(n.p,{children:"每个通道之中，可以放置四种数据。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"浮点数（float，比如 1.0）"}),"\n",(0,r.jsx)(n.li,{children:"带符号的整数（Int，比如-1）"}),"\n",(0,r.jsx)(n.li,{children:"无符号的整数（Uint，比如 1）"}),"\n",(0,r.jsxs)(n.li,{children:["布尔值（Bool，包含",(0,r.jsx)(n.code,{children:"true"}),"和",(0,r.jsx)(n.code,{children:"false"}),"两种值）"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"每种 SIMD 的数据类型都是一个函数方法，可以传入参数，生成对应的值。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，变量",(0,r.jsx)(n.code,{children:"a"}),"就是一个 128 位、包含四个 32 位浮点数（即四个通道）的值。"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，这些数据类型方法都不是构造函数，前面不能加",(0,r.jsx)(n.code,{children:"new"}),"，否则会报错。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var v = new SIMD.Float32x4(0, 1, 2, 3);\n// TypeError: SIMD.Float32x4 is not a constructor\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"静态方法数学运算",children:["静态方法：数学运算",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静态方法数学运算",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"每种数据类型都有一系列运算符，支持基本的数学运算。"}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeabssimdtypeneg",children:["SIMD.%type%.abs()，SIMD.%type%.neg()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeabssimdtypeneg",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"abs"}),"方法接受一个 SIMD 值作为参数，将它的每个通道都转成绝对值，作为一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(-1, -2, 0, NaN);\nSIMD.Float32x4.abs(a)\n// Float32x4[1, 2, 0, NaN]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"neg"}),"方法接受一个 SIMD 值作为参数，将它的每个通道都转成负值，作为一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(-1, -2, 3, 0);\nSIMD.Float32x4.neg(a)\n// Float32x4[1, 2, -3, -0]\n\nvar b = SIMD.Float64x2(NaN, Infinity);\nSIMD.Float64x2.neg(b)\n// Float64x2[NaN, -Infinity]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeaddsimdtypeaddsaturate",children:["SIMD.%type%.add()，SIMD.%type%.addSaturate()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeaddsimdtypeaddsaturate",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"add"}),"方法接受两个 SIMD 值作为参数，将它们的每个通道相加，作为一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\nvar b = SIMD.Float32x4(5.0, 10.0, 15.0, 20.0);\nvar c = SIMD.Float32x4.add(a, b);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，经过加法运算，新的 SIMD 值为",(0,r.jsx)(n.code,{children:"(6.0, 12.0, 18.0. 24.0)"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"addSaturate"}),"方法跟",(0,r.jsx)(n.code,{children:"add"}),"方法的作用相同，都是两个通道相加，但是溢出的处理不一致。对于",(0,r.jsx)(n.code,{children:"add"}),"方法，如果两个值相加发生溢出，溢出的二进制位会被丢弃; ",(0,r.jsx)(n.code,{children:"addSaturate"}),"方法则是返回该数据类型的最大值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Uint16x8(65533, 65534, 65535, 65535, 1, 1, 1, 1);\nvar b = SIMD.Uint16x8(1, 1, 1, 5000, 1, 1, 1, 1);\nSIMD.Uint16x8.addSaturate(a, b);\n// Uint16x8[65534, 65535, 65535, 65535, 2, 2, 2, 2]\n\nvar c = SIMD.Int16x8(32765, 32766, 32767, 32767, 1, 1, 1, 1);\nvar d = SIMD.Int16x8(1, 1, 1, 5000, 1, 1, 1, 1);\nSIMD.Int16x8.addSaturate(c, d);\n// Int16x8[32766, 32767, 32767, 32767, 2, 2, 2, 2]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"Uint16"}),"的最大值是 65535，",(0,r.jsx)(n.code,{children:"Int16"}),"的最大值是 32767。一旦发生溢出，就返回这两个值。"]}),"\n",(0,r.jsxs)(n.p,{children:["注意，",(0,r.jsx)(n.code,{children:"Uint32x4"}),"和",(0,r.jsx)(n.code,{children:"Int32x4"}),"这两种数据类型没有",(0,r.jsx)(n.code,{children:"addSaturate"}),"方法。"]}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypesubsimdtypesubsaturate",children:["SIMD.%type%.sub()，SIMD.%type%.subSaturate()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypesubsimdtypesubsaturate",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"sub"}),"方法接受两个 SIMD 值作为参数，将它们的每个通道相减，作为一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(-1, -2, 3, 4);\nvar b = SIMD.Float32x4(3, 3, 3, 3);\nSIMD.Float32x4.sub(a, b)\n// Float32x4[-4, -5, 0, 1]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"subSaturate"}),"方法跟",(0,r.jsx)(n.code,{children:"sub"}),"方法的作用相同，都是两个通道相减，但是溢出的处理不一致。对于",(0,r.jsx)(n.code,{children:"sub"}),"方法，如果两个值相减发生溢出，溢出的二进制位会被丢弃; ",(0,r.jsx)(n.code,{children:"subSaturate"}),"方法则是返回该数据类型的最小值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Uint16x8(5, 1, 1, 1, 1, 1, 1, 1);\nvar b = SIMD.Uint16x8(10, 1, 1, 1, 1, 1, 1, 1);\nSIMD.Uint16x8.subSaturate(a, b)\n// Uint16x8[0, 0, 0, 0, 0, 0, 0, 0]\n\nvar c = SIMD.Int16x8(-100, 0, 0, 0, 0, 0, 0, 0);\nvar d = SIMD.Int16x8(32767, 0, 0, 0, 0, 0, 0, 0);\nSIMD.Int16x8.subSaturate(c, d)\n// Int16x8[-32768, 0, 0, 0, 0, 0, 0, 0, 0]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"Uint16"}),"的最小值是",(0,r.jsx)(n.code,{children:"0"}),"，",(0,r.jsx)(n.code,{children:"Int16"}),"的最小值是",(0,r.jsx)(n.code,{children:"-32678"}),"。一旦运算发生溢出，就返回最小值。"]}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypemulsimdtypedivsimdtypesqrt",children:["SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypemulsimdtypedivsimdtypesqrt",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mul"}),"方法接受两个 SIMD 值作为参数，将它们的每个通道相乘，作为一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(-1, -2, 3, 4);\nvar b = SIMD.Float32x4(3, 3, 3, 3);\nSIMD.Float32x4.mul(a, b)\n// Float32x4[-3, -6, 9, 12]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"div"}),"方法接受两个 SIMD 值作为参数，将它们的每个通道相除，作为一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(2, 2, 2, 2);\nvar b = SIMD.Float32x4(4, 4, 4, 4);\nSIMD.Float32x4.div(a, b)\n// Float32x4[0.5, 0.5, 0.5, 0.5]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"sqrt"}),"方法接受一个 SIMD 值作为参数，求出每个通道的平方根，作为一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var b = SIMD.Float64x2(4, 8);\nSIMD.Float64x2.sqrt(b)\n// Float64x2[2, 2.8284271247461903]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdfloattypereciprocalapproximationsimdtypereciprocalsqrtapproximation",children:["SIMD.%FloatType%.reciprocalApproximation()，SIMD.%type%.reciprocalSqrtApproximation()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdfloattypereciprocalapproximationsimdtypereciprocalsqrtapproximation",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"reciprocalApproximation"}),"方法接受一个 SIMD 值作为参数，求出每个通道的倒数（",(0,r.jsx)(n.code,{children:"1 / x"}),"），作为一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1, 2, 3, 4);\nSIMD.Float32x4.reciprocalApproximation(a);\n// Float32x4[1, 0.5, 0.3333333432674408, 0.25]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"reciprocalSqrtApproximation"}),"方法接受一个 SIMD 值作为参数，求出每个通道的平方根的倒数（",(0,r.jsx)(n.code,{children:"1 / (x^0.5)"}),"），作为一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1, 2, 3, 4);\nSIMD.Float32x4.reciprocalSqrtApproximation(a)\n// Float32x4[1, 0.7071067690849304, 0.5773502588272095, 0.5]\n"})}),"\n",(0,r.jsx)(n.p,{children:"注意，只有浮点数的数据类型才有这两个方法。"}),"\n",(0,r.jsxs)(n.h3,{id:"simdintegertypeshiftleftbyscalar",children:["SIMD.%IntegerType%.shiftLeftByScalar()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdintegertypeshiftleftbyscalar",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"shiftLeftByScalar"}),"方法接受一个 SIMD 值作为参数，然后将每个通道的值左移指定的位数，作为一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Int32x4(1, 2, 4, 8);\nSIMD.Int32x4.shiftLeftByScalar(a, 1);\n// Int32x4[2, 4, 8, 16]\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果左移后，新的值超出了当前数据类型的位数，溢出的部分会被丢弃。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var ix4 = SIMD.Int32x4(1, 2, 3, 4);\nvar jx4 = SIMD.Int32x4.shiftLeftByScalar(ix4, 32);\n// Int32x4[0, 0, 0, 0]\n"})}),"\n",(0,r.jsx)(n.p,{children:"注意，只有整数的数据类型才有这个方法。"}),"\n",(0,r.jsxs)(n.h3,{id:"simdintegertypeshiftrightbyscalar",children:["SIMD.%IntegerType%.shiftRightByScalar()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdintegertypeshiftrightbyscalar",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"shiftRightByScalar"}),"方法接受一个 SIMD 值作为参数，然后将每个通道的值右移指定的位数，返回一个新的 SIMD 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Int32x4(1, 2, 4, -8);\nSIMD.Int32x4.shiftRightByScalar(a, 1);\n// Int32x4[0, 1, 2, -4]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果原来通道的值是带符号的值，则符号位保持不变，不受右移影响。如果是不带符号位的值，则右移后头部会补",(0,r.jsx)(n.code,{children:"0"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Uint32x4(1, 2, 4, -8);\nSIMD.Uint32x4.shiftRightByScalar(a, 1);\n// Uint32x4[0, 1, 2, 2147483644]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"-8"}),"右移一位变成了",(0,r.jsx)(n.code,{children:"2147483644"}),"，是因为对于 32 位无符号整数来说，",(0,r.jsx)(n.code,{children:"-8"}),"的二进制形式是",(0,r.jsx)(n.code,{children:"11111111111111111111111111111000"}),"，右移一位就变成了",(0,r.jsx)(n.code,{children:"01111111111111111111111111111100"}),"，相当于",(0,r.jsx)(n.code,{children:"2147483644"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"注意，只有整数的数据类型才有这个方法。"}),"\n",(0,r.jsxs)(n.h2,{id:"静态方法通道处理",children:["静态方法：通道处理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静态方法通道处理",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypecheck",children:["SIMD.%type%.check()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypecheck",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"check"}),"方法用于检查一个值是否为当前类型的 SIMD 值。如果是的，就返回这个值，否则就报错。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1, 2, 3, 9);\n\nSIMD.Float32x4.check(a);\n// Float32x4[1, 2, 3, 9]\n\nSIMD.Float32x4.check([1,2,3,4]) // 报错\nSIMD.Int32x4.check(a) // 报错\nSIMD.Int32x4.check('hello world') // 报错\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeextractlanesimdtypereplacelane",children:["SIMD.%type%.extractLane()，SIMD.%type%.replaceLane()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeextractlanesimdtypereplacelane",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"extractLane"}),"方法用于返回给定通道的值。它接受两个参数，分别是 SIMD 值和通道编号。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var t = SIMD.Float32x4(1, 2, 3, 4);\nSIMD.Float32x4.extractLane(t, 2) // 3\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"replaceLane"}),"方法用于替换指定通道的值，并返回一个新的 SIMD 值。它接受三个参数，分别是原来的 SIMD 值、通道编号和新的通道值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var t = SIMD.Float32x4(1, 2, 3, 4);\nSIMD.Float32x4.replaceLane(t, 2, 42)\n// Float32x4[1, 2, 42, 4]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeload",children:["SIMD.%type%.load()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeload",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"load"}),"方法用于从二进制数组读入数据，生成一个新的 SIMD 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = new Int32Array([1,2,3,4,5,6,7,8]);\nSIMD.Int32x4.load(a, 0);\n// Int32x4[1, 2, 3, 4]\n\nvar b = new Int32Array([1,2,3,4,5,6,7,8]);\nSIMD.Int32x4.load(a, 2);\n// Int32x4[3, 4, 5, 6]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"load"}),"方法接受两个参数：一个二进制数组和开始读取的位置（从 0 开始）。如果位置不合法（比如",(0,r.jsx)(n.code,{children:"-1"}),"或者超出二进制数组的大小），就会抛出一个错误。"]}),"\n",(0,r.jsxs)(n.p,{children:["这个方法还有三个变种",(0,r.jsx)(n.code,{children:"load1()"}),"、",(0,r.jsx)(n.code,{children:"load2()"}),"、",(0,r.jsx)(n.code,{children:"load3()"}),"，表示从指定位置开始，只加载一个通道、二个通道、三个通道的值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// 格式\nSIMD.Int32x4.load(tarray, index)\nSIMD.Int32x4.load1(tarray, index)\nSIMD.Int32x4.load2(tarray, index)\nSIMD.Int32x4.load3(tarray, index)\n\n// 实例\nvar a = new Int32Array([1,2,3,4,5,6,7,8]);\nSIMD.Int32x4.load1(a, 0);\n// Int32x4[1, 0, 0, 0]\nSIMD.Int32x4.load2(a, 0);\n// Int32x4[1, 2, 0, 0]\nSIMD.Int32x4.load3(a, 0);\n// Int32x4[1, 2, 3,0]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypestore",children:["SIMD.%type%.store()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypestore",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"store"}),"方法用于将一个 SIMD 值，写入一个二进制数组。它接受三个参数，分别是二进制数组、开始写入的数组位置、SIMD 值。它返回写入值以后的二进制数组。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var t1 = new Int32Array(8);\nvar v1 = SIMD.Int32x4(1, 2, 3, 4);\nSIMD.Int32x4.store(t1, 0, v1)\n// Int32Array[1, 2, 3, 4, 0, 0, 0, 0]\n\nvar t2 = new Int32Array(8);\nvar v2 = SIMD.Int32x4(1, 2, 3, 4);\nSIMD.Int32x4.store(t2, 2, v2)\n// Int32Array[0, 0, 1, 2, 3, 4, 0, 0]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"t1"}),"是一个二进制数组，",(0,r.jsx)(n.code,{children:"v1"}),"是一个 SIMD 值，只有四个通道。所以写入",(0,r.jsx)(n.code,{children:"t1"}),"以后，只有前四个位置有值，后四个位置都是 0。而",(0,r.jsx)(n.code,{children:"t2"}),"是从 2 号位置开始写入，所以前两个位置和后两个位置都是 0。"]}),"\n",(0,r.jsxs)(n.p,{children:["这个方法还有三个变种",(0,r.jsx)(n.code,{children:"store1()"}),"、",(0,r.jsx)(n.code,{children:"store2()"}),"和",(0,r.jsx)(n.code,{children:"store3()"}),"，表示只写入一个通道、二个通道和三个通道的值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var tarray = new Int32Array(8);\nvar value = SIMD.Int32x4(1, 2, 3, 4);\nSIMD.Int32x4.store1(tarray, 0, value);\n// Int32Array[1, 0, 0, 0, 0, 0, 0, 0]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypesplat",children:["SIMD.%type%.splat()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypesplat",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"splat"}),"方法返回一个新的 SIMD 值，该值的所有通道都会设成同一个预先给定的值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"SIMD.Float32x4.splat(3);\n// Float32x4[3, 3, 3, 3]\nSIMD.Float64x2.splat(3);\n// Float64x2[3, 3]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果省略参数，所有整数型的 SIMD 值都会设定",(0,r.jsx)(n.code,{children:"0"}),"，浮点型的 SIMD 值都会设成",(0,r.jsx)(n.code,{children:"NaN"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeswizzle",children:["SIMD.%type%.swizzle()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeswizzle",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"swizzle"}),"方法返回一个新的 SIMD 值，重新排列原有的 SIMD 值的通道顺序。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var t = SIMD.Float32x4(1, 2, 3, 4);\nSIMD.Float32x4.swizzle(t, 1, 2, 0, 3);\n// Float32x4[2,3,1,4]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"swizzle"}),"方法的第一个参数是原有的 SIMD 值，后面的参数对应将要返回的 SIMD 值的四个通道。它的意思是新的 SIMD 的四个通道，依次是原来 SIMD 值的 1 号通道、2 号通道、0 号通道、3 号通道。由于 SIMD 值最多可以有 16 个通道，所以",(0,r.jsx)(n.code,{children:"swizzle"}),"方法除了第一个参数以外，最多还可以接受 16 个参数。"]}),"\n",(0,r.jsx)(n.p,{children:"下面是另一个例子。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\n// Float32x4[1.0, 2.0, 3.0, 4.0]\n\nvar b = SIMD.Float32x4.swizzle(a, 0, 0, 1, 1);\n// Float32x4[1.0, 1.0, 2.0, 2.0]\n\nvar c = SIMD.Float32x4.swizzle(a, 3, 3, 3, 3);\n// Float32x4[4.0, 4.0, 4.0, 4.0]\n\nvar d = SIMD.Float32x4.swizzle(a, 3, 2, 1, 0);\n// Float32x4[4.0, 3.0, 2.0, 1.0]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeshuffle",children:["SIMD.%type%.shuffle()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeshuffle",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"shuffle"}),"方法从两个 SIMD 值之中取出指定通道，返回一个新的 SIMD 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1, 2, 3, 4);\nvar b = SIMD.Float32x4(5, 6, 7, 8);\n\nSIMD.Float32x4.shuffle(a, b, 1, 5, 7, 2);\n// Float32x4[2, 6, 8, 3]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"a"}),"和",(0,r.jsx)(n.code,{children:"b"}),"一共有 8 个通道，依次编号为 0 到 7。",(0,r.jsx)(n.code,{children:"shuffle"}),"根据编号，取出相应的通道，返回一个新的 SIMD 值。"]}),"\n",(0,r.jsxs)(n.h2,{id:"静态方法比较运算",children:["静态方法：比较运算",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静态方法比较运算",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeequalsimdtypenotequal",children:["SIMD.%type%.equal()，SIMD.%type%.notEqual()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeequalsimdtypenotequal",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"equal"}),"方法用来比较两个 SIMD 值",(0,r.jsx)(n.code,{children:"a"}),"和",(0,r.jsx)(n.code,{children:"b"}),"的每一个通道，根据两者是否精确相等（",(0,r.jsx)(n.code,{children:"a === b"}),"），得到一个布尔值。最后，所有通道的比较结果，组成一个新的 SIMD 值，作为掩码返回。",(0,r.jsx)(n.code,{children:"notEqual"}),"方法则是比较两个通道是否不相等（",(0,r.jsx)(n.code,{children:"a !== b"}),"）。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1, 2, 3, 9);\nvar b = SIMD.Float32x4(1, 4, 7, 9);\n\nSIMD.Float32x4.equal(a,b)\n// Bool32x4[true, false, false, true]\n\nSIMD.Float32x4.notEqual(a,b);\n// Bool32x4[false, true, true, false]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypegreaterthansimdtypegreaterthanorequal",children:["SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypegreaterthansimdtypegreaterthanorequal",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"greatThan"}),"方法用来比较两个 SIMD 值",(0,r.jsx)(n.code,{children:"a"}),"和",(0,r.jsx)(n.code,{children:"b"}),"的每一个通道，如果在该通道中，",(0,r.jsx)(n.code,{children:"a"}),"较大就得到",(0,r.jsx)(n.code,{children:"true"}),"，否则得到",(0,r.jsx)(n.code,{children:"false"}),"。最后，所有通道的比较结果，组成一个新的 SIMD 值，作为掩码返回。",(0,r.jsx)(n.code,{children:"greaterThanOrEqual"}),"则是比较",(0,r.jsx)(n.code,{children:"a"}),"是否大于等于",(0,r.jsx)(n.code,{children:"b"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1, 6, 3, 11);\nvar b = SIMD.Float32x4(1, 4, 7, 9);\n\nSIMD.Float32x4.greaterThan(a, b)\n// Bool32x4[false, true, false, true]\n\nSIMD.Float32x4.greaterThanOrEqual(a, b)\n// Bool32x4[true, true, false, true]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypelessthansimdtypelessthanorequal",children:["SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypelessthansimdtypelessthanorequal",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"lessThan"}),"方法用来比较两个 SIMD 值",(0,r.jsx)(n.code,{children:"a"}),"和",(0,r.jsx)(n.code,{children:"b"}),"的每一个通道，如果在该通道中，",(0,r.jsx)(n.code,{children:"a"}),"较小就得到",(0,r.jsx)(n.code,{children:"true"}),"，否则得到",(0,r.jsx)(n.code,{children:"false"}),"。最后，所有通道的比较结果，会组成一个新的 SIMD 值，作为掩码返回。",(0,r.jsx)(n.code,{children:"lessThanOrEqual"}),"方法则是比较",(0,r.jsx)(n.code,{children:"a"}),"是否等于",(0,r.jsx)(n.code,{children:"b"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1, 2, 3, 11);\nvar b = SIMD.Float32x4(1, 4, 7, 9);\n\nSIMD.Float32x4.lessThan(a, b)\n// Bool32x4[false, true, true, false]\n\nSIMD.Float32x4.lessThanOrEqual(a, b)\n// Bool32x4[true, true, true, false]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeselect",children:["SIMD.%type%.select()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeselect",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"select"}),"方法通过掩码生成一个新的 SIMD 值。它接受三个参数，分别是掩码和两个 SIMD 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(1, 2, 3, 4);\nvar b = SIMD.Float32x4(5, 6, 7, 8);\n\nvar mask = SIMD.Bool32x4(true, false, false, true);\n\nSIMD.Float32x4.select(mask, a, b);\n// Float32x4[1, 6, 7, 4]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"select"}),"方法接受掩码和两个 SIMD 值作为参数。当某个通道对应的掩码为",(0,r.jsx)(n.code,{children:"true"}),"时，会选择第一个 SIMD 值的对应通道，否则选择第二个 SIMD 值的对应通道。"]}),"\n",(0,r.jsx)(n.p,{children:"这个方法通常与比较运算符结合使用。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(0, 12, 3, 4);\nvar b = SIMD.Float32x4(0, 6, 7, 50);\n\nvar mask = SIMD.Float32x4.lessThan(a,b);\n// Bool32x4[false, false, true, true]\n\nvar result = SIMD.Float32x4.select(mask, a, b);\n// Float32x4[0, 6, 3, 4]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，先通过",(0,r.jsx)(n.code,{children:"lessThan"}),"方法生成一个掩码，然后通过",(0,r.jsx)(n.code,{children:"select"}),"方法生成一个由每个通道的较小值组成的新的 SIMD 值。"]}),"\n",(0,r.jsxs)(n.h3,{id:"simdbooleantypealltruesimdbooleantypeanytrue",children:["SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdbooleantypealltruesimdbooleantypeanytrue",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"allTrue"}),"方法接受一个 SIMD 值作为参数，然后返回一个布尔值，表示该 SIMD 值的所有通道是否都为",(0,r.jsx)(n.code,{children:"true"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Bool32x4(true, true, true, true);\nvar b = SIMD.Bool32x4(true, false, true, true);\n\nSIMD.Bool32x4.allTrue(a); // true\nSIMD.Bool32x4.allTrue(b); // false\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"anyTrue"}),"方法则是只要有一个通道为",(0,r.jsx)(n.code,{children:"true"}),"，就返回",(0,r.jsx)(n.code,{children:"true"}),"，否则返回",(0,r.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Bool32x4(false, false, false, false);\nvar b = SIMD.Bool32x4(false, false, true, false);\n\nSIMD.Bool32x4.anyTrue(a); // false\nSIMD.Bool32x4.anyTrue(b); // true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["注意，只有四种布尔值数据类型（",(0,r.jsx)(n.code,{children:"Bool32x4"}),"、",(0,r.jsx)(n.code,{children:"Bool16x8"}),"、",(0,r.jsx)(n.code,{children:"Bool8x16"}),"、",(0,r.jsx)(n.code,{children:"Bool64x2"}),"）才有这两个方法。"]}),"\n",(0,r.jsx)(n.p,{children:"这两个方法通常与比较运算符结合使用。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var ax4    = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\nvar bx4    = SIMD.Float32x4(0.0, 6.0, 7.0, 8.0);\nvar ix4    = SIMD.Float32x4.lessThan(ax4, bx4);\nvar b1     = SIMD.Int32x4.allTrue(ix4); // false\nvar b2     = SIMD.Int32x4.anyTrue(ix4); // true\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeminsimdtypeminnum",children:["SIMD.%type%.min()，SIMD.%type%.minNum()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeminsimdtypeminnum",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"min"}),"方法接受两个 SIMD 值作为参数，将两者的对应通道的较小值，组成一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(-1, -2, 3, 5.2);\nvar b = SIMD.Float32x4(0, -4, 6, 5.5);\nSIMD.Float32x4.min(a, b);\n// Float32x4[-1, -4, 3, 5.2]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果有一个通道的值是",(0,r.jsx)(n.code,{children:"NaN"}),"，则会优先返回",(0,r.jsx)(n.code,{children:"NaN"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var c = SIMD.Float64x2(NaN, Infinity)\nvar d = SIMD.Float64x2(1337, 42);\nSIMD.Float64x2.min(c, d);\n// Float64x2[NaN, 42]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"minNum"}),"方法与",(0,r.jsx)(n.code,{children:"min"}),"的作用一模一样，唯一的区别是如果有一个通道的值是",(0,r.jsx)(n.code,{children:"NaN"}),"，则会优先返回另一个通道的值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var ax4 = SIMD.Float32x4(1.0, 2.0, NaN, NaN);\nvar bx4 = SIMD.Float32x4(2.0, 1.0, 3.0, NaN);\nvar cx4 = SIMD.Float32x4.min(ax4, bx4);\n// Float32x4[1.0, 1.0, NaN, NaN]\nvar dx4 = SIMD.Float32x4.minNum(ax4, bx4);\n// Float32x4[1.0, 1.0, 3.0, NaN]\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypemaxsimdtypemaxnum",children:["SIMD.%type%.max()，SIMD.%type%.maxNum()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypemaxsimdtypemaxnum",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"max"}),"方法接受两个 SIMD 值作为参数，将两者的对应通道的较大值，组成一个新的 SIMD 值返回。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Float32x4(-1, -2, 3, 5.2);\nvar b = SIMD.Float32x4(0, -4, 6, 5.5);\nSIMD.Float32x4.max(a, b);\n// Float32x4[0, -2, 6, 5.5]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果有一个通道的值是",(0,r.jsx)(n.code,{children:"NaN"}),"，则会优先返回",(0,r.jsx)(n.code,{children:"NaN"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var c = SIMD.Float64x2(NaN, Infinity)\nvar d = SIMD.Float64x2(1337, 42);\nSIMD.Float64x2.max(c, d)\n// Float64x2[NaN, Infinity]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"maxNum"}),"方法与",(0,r.jsx)(n.code,{children:"max"}),"的作用一模一样，唯一的区别是如果有一个通道的值是",(0,r.jsx)(n.code,{children:"NaN"}),"，则会优先返回另一个通道的值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var c = SIMD.Float64x2(NaN, Infinity)\nvar d = SIMD.Float64x2(1337, 42);\nSIMD.Float64x2.maxNum(c, d)\n// Float64x2[1337, Infinity]\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"静态方法位运算",children:["静态方法：位运算",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静态方法位运算",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeandsimdtypeorsimdtypexorsimdtypenot",children:["SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeandsimdtypeorsimdtypexorsimdtypenot",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"and"}),"方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制",(0,r.jsx)(n.code,{children:"AND"}),"运算（",(0,r.jsx)(n.code,{children:"&"}),"）后得到的新的 SIMD 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Int32x4(1, 2, 4, 8);\nvar b = SIMD.Int32x4(5, 5, 5, 5);\nSIMD.Int32x4.and(a, b)\n// Int32x4[1, 0, 4, 0]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，以通道",(0,r.jsx)(n.code,{children:"0"}),"为例，",(0,r.jsx)(n.code,{children:"1"}),"的二进制形式是",(0,r.jsx)(n.code,{children:"0001"}),"，",(0,r.jsx)(n.code,{children:"5"}),"的二进制形式是",(0,r.jsx)(n.code,{children:"01001"}),"，所以进行",(0,r.jsx)(n.code,{children:"AND"}),"运算以后，得到",(0,r.jsx)(n.code,{children:"0001"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"or"}),"方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制",(0,r.jsx)(n.code,{children:"OR"}),"运算（",(0,r.jsx)(n.code,{children:"|"}),"）后得到的新的 SIMD 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Int32x4(1, 2, 4, 8);\nvar b = SIMD.Int32x4(5, 5, 5, 5);\nSIMD.Int32x4.or(a, b)\n// Int32x4[5, 7, 5, 13]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"xor"}),"方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制“异或”运算（",(0,r.jsx)(n.code,{children:"^"}),"）后得到的新的 SIMD 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Int32x4(1, 2, 4, 8);\nvar b = SIMD.Int32x4(5, 5, 5, 5);\nSIMD.Int32x4.xor(a, b)\n// Int32x4[4, 7, 1, 13]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"not"}),"方法接受一个 SIMD 值作为参数，返回每个通道进行二进制“否”运算（",(0,r.jsx)(n.code,{children:"~"}),"）后得到的新的 SIMD 值。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var a = SIMD.Int32x4(1, 2, 4, 8);\nSIMD.Int32x4.not(a)\n// Int32x4[-2, -3, -5, -9]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"1"}),"的否运算之所以得到",(0,r.jsx)(n.code,{children:"-2"}),"，是因为在计算机内部，负数采用”2 的补码“这种形式进行表示。也就是说，整数",(0,r.jsx)(n.code,{children:"n"}),"的负数形式",(0,r.jsx)(n.code,{children:"-n"}),"，是对每一个二进制位取反以后，再加上 1。因此，直接取反就相当于负数形式再减去 1，比如",(0,r.jsx)(n.code,{children:"1"}),"的负数形式是",(0,r.jsx)(n.code,{children:"-1"}),"，再减去 1，就得到了",(0,r.jsx)(n.code,{children:"-2"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"静态方法数据类型转换",children:["静态方法：数据类型转换",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#静态方法数据类型转换",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"SIMD 提供以下方法，用来将一种数据类型转为另一种数据类型。"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromFloat32x4()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromFloat32x4Bits()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromFloat64x2Bits()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromInt32x4()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromInt32x4Bits()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromInt16x8Bits()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromInt8x16Bits()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromUint32x4()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromUint32x4Bits()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromUint16x8Bits()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SIMD.%type%.fromUint8x16Bits()"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["带有",(0,r.jsx)(n.code,{children:"Bits"}),"后缀的方法，会原封不动地将二进制位拷贝到新的数据类型；不带后缀的方法，则会进行数据类型转换。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var t = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\nSIMD.Int32x4.fromFloat32x4(t);\n// Int32x4[1, 2, 3, 4]\n\nSIMD.Int32x4.fromFloat32x4Bits(t);\n// Int32x4[1065353216, 1073741824, 1077936128, 1082130432]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，",(0,r.jsx)(n.code,{children:"fromFloat32x4"}),"是将浮点数转为整数，然后存入新的数据类型；",(0,r.jsx)(n.code,{children:"fromFloat32x4Bits"}),"则是将二进制位原封不动地拷贝进入新的数据类型，然后进行解读。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Bits"}),"后缀的方法，还可以用于通道数目不对等的拷贝。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var t = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\nSIMD.Int16x8.fromFloat32x4Bits(t);\n// Int16x8[0, 16256, 0, 16384, 0, 16448, 0, 16512]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码中，原始 SIMD 值",(0,r.jsx)(n.code,{children:"t"}),"是 4 通道的，而目标值是 8 通道的。"]}),"\n",(0,r.jsx)(n.p,{children:"如果数据转换时，原通道的数据大小，超过了目标通道的最大宽度，就会报错。"}),"\n",(0,r.jsxs)(n.h2,{id:"实例方法",children:["实例方法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"simdtypeprototypetostring",children:["SIMD.%type%.prototype.toString()",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#simdtypeprototypetostring",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"toString"}),"方法返回一个 SIMD 值的字符串形式。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'var a = SIMD.Float32x4(11, 22, 33, 44);\na.toString() // "SIMD.Float32x4(11, 22, 33, 44)"\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"实例求平均值",children:["实例：求平均值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例求平均值",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["正常模式下，计算",(0,r.jsx)(n.code,{children:"n"}),"个值的平均值，需要运算",(0,r.jsx)(n.code,{children:"n"}),"次。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function average(list) {\n  var n = list.length;\n  var sum = 0.0;\n  for (var i = 0; i < n; i++) {\n    sum += list[i];\n  }\n  return sum / n;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["使用 SIMD，可以将计算次数减少到",(0,r.jsx)(n.code,{children:"n"}),"次的四分之一。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function average(list) {\n  var n = list.length;\n  var sum = SIMD.Float32x4.splat(0.0);\n  for (var i = 0; i < n; i += 4) {\n    sum = SIMD.Float32x4.add(\n      sum,\n      SIMD.Float32x4.load(list, i)\n    );\n  }\n  var total = SIMD.Float32x4.extractLane(sum, 0) +\n              SIMD.Float32x4.extractLane(sum, 1) +\n              SIMD.Float32x4.extractLane(sum, 2) +\n              SIMD.Float32x4.extractLane(sum, 3);\n  return total / n;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["上面代码先是每隔四位，将所有的值读入一个 SIMD，然后立刻累加。然后，得到累加值四个通道的总和，再除以",(0,r.jsx)(n.code,{children:"n"}),"就可以了。"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let i=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2FSIMD.md"]={toc:[{text:"概述",id:"概述",depth:2},{text:"数据类型",id:"数据类型",depth:2},{text:"静态方法：数学运算",id:"静态方法数学运算",depth:2},{text:"SIMD.%type%.abs()，SIMD.%type%.neg()",id:"simdtypeabssimdtypeneg",depth:3},{text:"SIMD.%type%.add()，SIMD.%type%.addSaturate()",id:"simdtypeaddsimdtypeaddsaturate",depth:3},{text:"SIMD.%type%.sub()，SIMD.%type%.subSaturate()",id:"simdtypesubsimdtypesubsaturate",depth:3},{text:"SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt()",id:"simdtypemulsimdtypedivsimdtypesqrt",depth:3},{text:"SIMD.%FloatType%.reciprocalApproximation()，SIMD.%type%.reciprocalSqrtApproximation()",id:"simdfloattypereciprocalapproximationsimdtypereciprocalsqrtapproximation",depth:3},{text:"SIMD.%IntegerType%.shiftLeftByScalar()",id:"simdintegertypeshiftleftbyscalar",depth:3},{text:"SIMD.%IntegerType%.shiftRightByScalar()",id:"simdintegertypeshiftrightbyscalar",depth:3},{text:"静态方法：通道处理",id:"静态方法通道处理",depth:2},{text:"SIMD.%type%.check()",id:"simdtypecheck",depth:3},{text:"SIMD.%type%.extractLane()，SIMD.%type%.replaceLane()",id:"simdtypeextractlanesimdtypereplacelane",depth:3},{text:"SIMD.%type%.load()",id:"simdtypeload",depth:3},{text:"SIMD.%type%.store()",id:"simdtypestore",depth:3},{text:"SIMD.%type%.splat()",id:"simdtypesplat",depth:3},{text:"SIMD.%type%.swizzle()",id:"simdtypeswizzle",depth:3},{text:"SIMD.%type%.shuffle()",id:"simdtypeshuffle",depth:3},{text:"静态方法：比较运算",id:"静态方法比较运算",depth:2},{text:"SIMD.%type%.equal()，SIMD.%type%.notEqual()",id:"simdtypeequalsimdtypenotequal",depth:3},{text:"SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual()",id:"simdtypegreaterthansimdtypegreaterthanorequal",depth:3},{text:"SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual()",id:"simdtypelessthansimdtypelessthanorequal",depth:3},{text:"SIMD.%type%.select()",id:"simdtypeselect",depth:3},{text:"SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue()",id:"simdbooleantypealltruesimdbooleantypeanytrue",depth:3},{text:"SIMD.%type%.min()，SIMD.%type%.minNum()",id:"simdtypeminsimdtypeminnum",depth:3},{text:"SIMD.%type%.max()，SIMD.%type%.maxNum()",id:"simdtypemaxsimdtypemaxnum",depth:3},{text:"静态方法：位运算",id:"静态方法位运算",depth:2},{text:"SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not()",id:"simdtypeandsimdtypeorsimdtypexorsimdtypenot",depth:3},{text:"静态方法：数据类型转换",id:"静态方法数据类型转换",depth:2},{text:"实例方法",id:"实例方法",depth:2},{text:"SIMD.%type%.prototype.toString()",id:"simdtypeprototypetostring",depth:3},{text:"实例：求平均值",id:"实例求平均值",depth:2}],title:"SIMD",headingTitle:"SIMD",frontmatter:{}}}}]);