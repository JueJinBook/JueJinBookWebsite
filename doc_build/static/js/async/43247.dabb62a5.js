"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["43247"],{165592:function(e,r,n){n.r(r),n.d(r,{default:()=>i});var c=n(552676),s=n(740453);function a(e){let r=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",strong:"strong",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",hr:"hr"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(r.h1,{id:"7高阶篇-01实现-npm-script-跨平台兼容",children:["7高阶篇 01：实现 npm script 跨平台兼容",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#7高阶篇-01实现-npm-script-跨平台兼容",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"到目前为止，如果你在 Linux、Mac 平台做开发，所有的 npm script 都会顺利运行，但是 Windows 下面的同学可能就比较痛苦了，因为不是所有的 shell 命令都是跨平台兼容的，甚至各种常见的文件系统操作也是不兼容的。"}),"\n",(0,c.jsx)(r.p,{children:"可能有部分同学处理过 npm script 跨平台兼容的问题，比如粗暴的为两种平台各写一份 npm script，像下面这样："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-json",children:'{\n  "name": "hello-npm-script",\n  "scripts": {\n    "bash-script": "echo Hello $npm_package_name",\n    "win-script": "echo Hello %npm_package_name%"\n  }\n}\n'})}),"\n",(0,c.jsx)(r.p,{children:"有技术追求的工程师肯定不会满足上面的解决方案，实际上社区中已经有非常多的小工具可以帮我们优雅的实现跨平台的 npm script，下面我们探索下如何实现跨平台的文件系统操作、变量引用、环境变量设置。"}),"\n",(0,c.jsx)(r.p,{children:(0,c.jsx)(r.strong,{children:"特别说明，windows 环境的同学建议使用 git bash 来运行 npm script，使用 windows 自带的 cmd 可能会遇到比较多的问题"})}),"\n",(0,c.jsxs)(r.h2,{id:"文件系统操作的跨平台兼容",children:["文件系统操作的跨平台兼容",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#文件系统操作的跨平台兼容",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"npm script 中涉及到的文件系统操作包括文件和目录的创建、删除、移动、复制等操作，而社区为这些基本操作也提供了跨平台兼容的包，列举如下："}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.a,{href:"https://github.com/isaacs/rimraf",target:"_blank",rel:"noopener noreferrer",children:"rimraf"})," 或 ",(0,c.jsx)(r.a,{href:"https://www.npmjs.com/package/del-cli",target:"_blank",rel:"noopener noreferrer",children:"del-cli"}),"，用来删除文件和目录，实现类似于 ",(0,c.jsx)(r.code,{children:"rm -rf"})," 的功能；"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.a,{href:"https://www.npmjs.com/package/cpr",target:"_blank",rel:"noopener noreferrer",children:"cpr"}),"，用于拷贝、复制文件和目录，实现类似于 ",(0,c.jsx)(r.code,{children:"cp -r"})," 的功能；"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.a,{href:"https://www.npmjs.com/package/make-dir-cli",target:"_blank",rel:"noopener noreferrer",children:"make-dir-cli"}),"，用于创建目录，实现类似于 ",(0,c.jsx)(r.code,{children:"mkdir -p"})," 的功能；"]}),"\n"]}),"\n",(0,c.jsx)(r.p,{children:"使用上面这几个小工具改造 npm script 的具体步骤如下："}),"\n",(0,c.jsx)(r.p,{children:"第 1 步，添加开发依赖："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-shell",children:"npm i rimraf cpr make-dir-cli -D\n# npm install rimraf cpr make-dir-cli --save-dev\n# yarn add rimraf cpr make-dir-cli -D\n"})}),"\n",(0,c.jsx)(r.p,{children:"第 2 步，改造涉及文件系统操作的 npm script："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-patch",children:'  "scripts": {\n-    "cover:cleanup": "rm -rf coverage && rm -rf .nyc_output",\n-    "cover:archive": "cross-var \\"mkdir -p coverage_archive/$npm_package_version && cp -r coverage/* coverage_archive/$npm_package_version\\"",\n+    "cover:cleanup": "rimraf coverage && rimraf .nyc_output",\n+    "cover:archive": "cross-var \\"make-dir coverage_archive/$npm_package_version && cpr coverage/* coverage_archive/$npm_package_version -o\\"",\n     "cover:serve": "cross-var http-server coverage_archive/$npm_package_version -p $npm_package_config_port",\n     "cover:open": "cross-var opn http://localhost:$npm_package_config_port",\n-    "postcover": "npm-run-all cover:archive cover:cleanup --parallel cover:serve cover:open"\n+    "precover": "npm run cover:cleanup",\n+    "postcover": "npm-run-all cover:archive --parallel cover:serve cover:open"\n  },\n'})}),"\n",(0,c.jsx)(r.p,{children:"对改动的几点说明："}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"rm -rf"})," 直接替换成 ",(0,c.jsx)(r.code,{children:"rimraf"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"mkdir -p"})," 直接替换成 ",(0,c.jsx)(r.code,{children:"make-dir"}),"；"]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"cp -r"})," 的替换需特别说明下，",(0,c.jsx)(r.code,{children:"cpr"})," 默认是不覆盖的，需要显示传入 ",(0,c.jsx)(r.code,{children:"-o"})," 配置项，并且参数必须严格是 ",(0,c.jsx)(r.code,{children:"cpr <source> <destination> [options]"})," 的格式，即配置项放在最后面；"]}),"\n",(0,c.jsxs)(r.li,{children:["把 ",(0,c.jsx)(r.code,{children:"cover:cleanup"})," 从 ",(0,c.jsx)(r.code,{children:"postcover"})," 挪到 ",(0,c.jsx)(r.code,{children:"precover"})," 里面去执行，规避 ",(0,c.jsx)(r.code,{children:"cpr"})," 没归档完毕覆盖率报告就被清空的问题；"]}),"\n"]}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.strong,{children:"TIP#13"}),"：任何改动之后记得重新运行 npm run cover，确保所有的 npm script 还是按预期工作的"]}),"\n"]}),"\n",(0,c.jsxs)(r.h2,{id:"用-cross-var-引用变量",children:["用 cross-var 引用变量",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#用-cross-var-引用变量",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.a,{href:"https://juejin.im/book/5a1212bc51882531ea64df07/section/5a12146951882531bb6c68fe",target:"_blank",rel:"noopener noreferrer",children:"2.2 在 npm script 中使用变量"})," 介绍了如何使用内置和预定义变量减少代码重复的技巧，如本节开头的例子，Linux 和 Windows 下引用变量的方式是不同的，Linux 下直接可以用 ",(0,c.jsx)(r.code,{children:"$npm_package_name"}),"，而 Windows 下必须使用 ",(0,c.jsx)(r.code,{children:"%npm_package_name%"}),"，我们可以使用 ",(0,c.jsx)(r.a,{href:"https://www.npmjs.com/package/cross-var",target:"_blank",rel:"noopener noreferrer",children:"cross-var"})," 实现跨平台的变量引用，具体步骤如下："]}),"\n",(0,c.jsx)(r.p,{children:"第 1 步，安装 cross-var 为开发依赖："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-shell",children:"npm i cross-var -D\n# npm install cross-var --save-dev\n# yarn add cross-var -D\n"})}),"\n",(0,c.jsx)(r.p,{children:"第 2 步，改写引用变量 npm script，具体 diff 如下："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-patch",children:'  "scripts": {\n     "cover:cleanup": "rm -rf coverage && rm -rf .nyc_output",\n-    "cover:archive": "mkdir -p coverage_archive/$npm_package_version && cp -r coverage/* coverage_archive/$npm_package_version",\n-    "cover:serve": "http-server coverage_archive/$npm_package_version -p $npm_package_config_port",\n-    "cover:open": "opn http://localhost:$npm_package_config_port",\n+    "cover:archive": "cross-var \\"mkdir -p coverage_archive/$npm_package_version && cp -r coverage/* coverage_archive/$npm_package_version\\"",\n+    "cover:serve": "cross-var http-server coverage_archive/$npm_package_version -p $npm_package_config_port",\n+    "cover:open": "cross-var opn http://localhost:$npm_package_config_port",\n     "postcover": "npm-run-all cover:archive cover:cleanup --parallel cover:serve cover:open"\n   },\n'})}),"\n",(0,c.jsx)(r.p,{children:"因为 cover:serve 和 cover:open 命令都比较简单，直接在原始命令前增加 cross-var 命令即可，而 cover:archive 内含了两条子命令，我们需要用引号把整个命令包起来（注意这里是用的双引号，且必须转义），然后在前面加上 cross-var。"}),"\n",(0,c.jsxs)(r.p,{children:["此外，细心的同学可能发现引入 cross-var 之后，它竟然给我们安装了 babel，如果想保持依赖更轻量的话，可以考虑使用 ",(0,c.jsx)(r.a,{href:"https://www.npmjs.com/package/cross-var-no-babel",target:"_blank",rel:"noopener noreferrer",children:"cross-var-no-babel"}),"。"]}),"\n",(0,c.jsxs)(r.h2,{id:"用-cross-env-设置环境变量",children:["用 cross-env 设置环境变量",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#用-cross-env-设置环境变量",children:"#"})]}),"\n",(0,c.jsxs)(r.p,{children:["在 node.js 脚本和 npm script 使用环境变量也是比较常见的，比如我们在运行测试时，需要加上 ",(0,c.jsx)(r.code,{children:"NODE_ENV=test"}),"，或者在启动静态资源服务器时自定义端口号。因为不同平台的环境变量语法不同，我们可以使用 ",(0,c.jsx)(r.a,{href:"https://www.npmjs.com/package/cross-env",target:"_blank",rel:"noopener noreferrer",children:"cross-env"})," 来实现 npm script 的跨平台兼容，具体步骤如下："]}),"\n",(0,c.jsx)(r.p,{children:"第 1 步，添加 cross-env 到开发依赖："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-shell",children:"npm i cross-env -D\n# npm install cross-env --save-dev\n# yarn add cross-env -D\n"})}),"\n",(0,c.jsx)(r.p,{children:"第 2 步，改写使用了环境变量的 npm script："}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-patch",children:'  "scripts": {\n-    "test": "NODE_ENV=test mocha tests/",\n+    "test": "cross-env NODE_ENV=test mocha tests/",\n  },\n'})}),"\n",(0,c.jsx)(r.p,{children:"上面的改动更简单，直接在设置了环境变量的命令前面加上 cross-env 即可。"}),"\n",(0,c.jsxs)(r.h2,{id:"再多说几句",children:["再多说几句",(0,c.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#再多说几句",children:"#"})]}),"\n",(0,c.jsx)(r.p,{children:"关于 npm script 的跨平台兼容，还有几点需要大家注意："}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsx)(r.li,{children:"所有使用引号的地方，建议使用双引号，并且加上转义；"}),"\n",(0,c.jsx)(r.li,{children:"没做特殊处理的命令比如 eslint、stylelint、mocha、opn 等工具本身都是跨平台兼容的；"}),"\n",(0,c.jsx)(r.li,{children:"还是强烈建议有能力的同学能使用 Linux 做开发，只要你入门并且熟练了，效率提升会惊人；"}),"\n",(0,c.jsxs)(r.li,{children:["短时间内继续拥抱 Windows 的同学，可以考虑看看 Windows 10 里面引入的 ",(0,c.jsx)(r.a,{href:"https://msdn.microsoft.com/en-us/commandline/wsl/about",target:"_blank",rel:"noopener noreferrer",children:"Subsystem"}),"，让你不用虚拟机即可在 Windows 下使用大多数 Linux 命令。"]}),"\n"]}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:[(0,c.jsx)(r.strong,{children:"TIP#14"}),"：如果你在编写 npm script 过程中有更多的跨平台兼容需求，基本思路是去 ",(0,c.jsx)(r.a,{href:"https://www.npmjs.com/search?q=cross%20platform",target:"_blank",rel:"noopener noreferrer",children:"npmjs.com"})," 上找对应的包，关键词自然少不了 ",(0,c.jsx)(r.code,{children:"cross platform"}),"，你遇到的问题，肯定很多其他人遇到过，相信我，你并不孤独！"]}),"\n"]}),"\n",(0,c.jsx)(r.hr,{}),"\n",(0,c.jsxs)(r.blockquote,{children:["\n",(0,c.jsxs)(r.p,{children:["本节用到的代码见 ",(0,c.jsx)(r.a,{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/06-add-cross-platform-support",target:"_blank",rel:"noopener noreferrer",children:"GitHub"}),"，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 ",(0,c.jsx)(r.code,{children:"06-add-cross-platform-support"}),"。"]}),"\n"]}),"\n",(0,c.jsx)(r.hr,{})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,s.ah)(),e.components);return r?(0,c.jsx)(r,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}let i=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E7%94%A8%20npm%20script%20%E6%89%93%E9%80%A0%E8%B6%85%E6%BA%9C%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%2F7%E9%AB%98%E9%98%B6%E7%AF%87%2001%EF%BC%9A%E5%AE%9E%E7%8E%B0%20npm%20script%20%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%85%BC%E5%AE%B9.md"]={toc:[{text:"文件系统操作的跨平台兼容",id:"文件系统操作的跨平台兼容",depth:2},{text:"用 cross-var 引用变量",id:"用-cross-var-引用变量",depth:2},{text:"用 cross-env 设置环境变量",id:"用-cross-env-设置环境变量",depth:2},{text:"再多说几句",id:"再多说几句",depth:2}],title:"7高阶篇 01：实现 npm script 跨平台兼容",headingTitle:"7高阶篇 01：实现 npm script 跨平台兼容",frontmatter:{}}}}]);