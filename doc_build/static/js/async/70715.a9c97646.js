"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["70715"],{220856:function(n,e,s){s.r(e),s.d(e,{default:()=>l});var c=s(552676),r=s(740453);let d=s.p+"static/image/0ab0ff03ae835a5dc66c60e9c0087fd7.145fbdd1.webp",t=s.p+"static/image/c4378543c13322c3ccacd884cbad870d.e754f6cc.webp";function i(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",img:"img",pre:"pre",ol:"ol",li:"li"},(0,r.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"19内置组件suspense-原理与异步",children:["19.内置组件：Suspense 原理与异步",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#19内置组件suspense-原理与异步",children:"#"})]}),"\n",(0,c.jsxs)(e.h2,{id:"前言",children:["前言",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"<Suspense>"}),"\xa0是一个内置组件，用来在组件树中协调对异步依赖的处理。可以帮助我们更好的完成组件树父组件对子组件的多个嵌套异步依赖关系的管理，当父组件处于等待中时，允许我们自定挂载一个加载中状态。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)("img",{src:t,alt:"image.png"}),"\n上图中，红色字体代表的是组件有异步的 ",(0,c.jsx)(e.code,{children:"setup()"})," 。 通过 ",(0,c.jsx)(e.code,{children:"<Suspense>"})," 组件我们可以很容易实现在组件异步加载时统一展示加载中状态，在所有组件完成加载时，再统一展示："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-html",children:"<Suspense>\n  \x3c!-- 具有深层异步依赖的组件 --\x3e\n  <Dashboard />\n\n  \x3c!-- 在 #fallback 插槽中显示 “正在加载中” --\x3e\n  <template #fallback>\n    Loading...\n  </template>\n</Suspense>\n"})}),"\n",(0,c.jsxs)(e.p,{children:["接下来我们将深度解读 ",(0,c.jsx)(e.code,{children:"<Suspense>"})," 组件实现的原理。"]}),"\n",(0,c.jsxs)(e.h2,{id:"suspense-挂载",children:["Suspense 挂载",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#suspense-挂载",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"<Suspense>"})," 组件和所有内置组件一样，也是有初始化挂载的过程，先来看看 ",(0,c.jsx)(e.code,{children:"Vue"})," 对 ",(0,c.jsx)(e.code,{children:"<Suspense>"})," 组件的源码定义："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"export const SuspenseImpl = {\n  name: 'Suspense',\n  // Suspense 组件标识符\n  __isSuspense: true,\n  process(...) {\n    if (n1 == null) {\n      // 初始化挂载的逻辑\n    } else {\n      // diff 的逻辑\n    }\n  },\n  create: createSuspenseBoundary,\n  normalize: normalizeSuspenseChildren\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"process"})," 的执行时机和前面提到的 ",(0,c.jsx)(e.code,{children:"<Teleport>"})," 组件是一致的，会在 ",(0,c.jsx)(e.code,{children:"patch"})," 的时候根据组件的 ",(0,c.jsx)(e.code,{children:"shapeFlag"})," 标志来判断是否需要执行 ",(0,c.jsx)(e.code,{children:"process"})," 函数的调用。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"const patch = (n1, n2, container, anchor, ...) => {\n  // ...\n  const { type, ref, shapeFlag } = n2\n  switch (type) {\n    // 根据 type 类型处理\n    case Text:\n      // 对文本节点的处理\n      processText(n1, n2, container, anchor)\n      break\n    // 这里省略了一些其他节点处理，比如注释、Fragment 节点等等\n    // ...\n    default:\n      // 根据 shapeFlag 来处理\n      // ...\n      else if (__FEATURE_SUSPENSE__ && shapeFlag & ShapeFlags.SUSPENSE) {\n        // 对 Suspense 节点进行处理\n        type.process(\n          n1,\n          n2,\n          container,\n          anchor,\n          parentComponent,\n          parentSuspense,\n          isSVG,\n          slotScopeIds,\n          optimized,\n          internals\n        );\n      }\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["接下来，我们着重先来看看 ",(0,c.jsx)(e.code,{children:"Suspense"})," 的初始化挂载逻辑，这块的代码集中在 ",(0,c.jsx)(e.code,{children:"mountSuspense"})," 中："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {\n  const {\n    p: patch,\n    o: { createElement }\n  } = rendererInternals\n  // 创建隐藏容器，用来实例化挂载 default 插槽内的内容\n  const hiddenContainer = createElement('div')\n  // 构造一个 suspense 对象，并赋值给 vnode.suspense\n  const suspense = (vnode.suspense = createSuspenseBoundary(\n    vnode,\n    parentSuspense,\n    parentComponent,\n    container,\n    hiddenContainer,\n    anchor,\n    isSVG,\n    slotScopeIds,\n    optimized,\n    rendererInternals\n  ))\n  \n  // 离线挂载 default 插槽内的内容\n  patch(\n    null,\n    (suspense.pendingBranch = vnode.ssContent),\n    hiddenContainer,\n    null,\n    parentComponent,\n    suspense,\n    isSVG,\n    slotScopeIds\n  )\n  // 如果有异步依赖\n  if (suspense.deps > 0) {\n    // 触发 onPending，onFallback 钩子函数\n    triggerEvent(vnode, 'onPending')\n    triggerEvent(vnode, 'onFallback')\n    \n    // 初始化挂载 fallback 插槽内容\n    patch(\n      null,\n      vnode.ssFallback,\n      container,\n      anchor,\n      parentComponent,\n      // fallback tree 不会有 suspense context\n      null, \n      isSVG,\n      slotScopeIds\n    )\n    // 将 fallback vnode 设置为 activeBranch\n    setActiveBranch(suspense, vnode.ssFallback)\n  } else {\n    // 如果 suspense 没有异步依赖，直接调用 resolve\n    suspense.resolve()\n  }\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"在开始解读源码之前，我们需要提前认识几个关键变量的含义："}),"\n",(0,c.jsxs)(e.ol,{children:["\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"ssContent"})," 代表的是 ",(0,c.jsx)(e.code,{children:"default"})," 插槽内的内容的 ",(0,c.jsx)(e.code,{children:"vnode"}),"。"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"ssFallback"})," 代表的是 ",(0,c.jsx)(e.code,{children:"fallback"})," 插槽内的内容的 ",(0,c.jsx)(e.code,{children:"vnode"}),"。"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"activeBranch"})," 代表的是当前激活的分支，就是挂载到页面中的 ",(0,c.jsx)(e.code,{children:"vnode"}),"。"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"pendingBranch"})," 代表的是正处于 ",(0,c.jsx)(e.code,{children:"pending"})," 状态的分支，一般指还未被激活的 ",(0,c.jsx)(e.code,{children:"default"})," 插槽内的内容中的 ",(0,c.jsx)(e.code,{children:"vnode"})]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["然后我们再来看一下整个 ",(0,c.jsx)(e.code,{children:"mountSuspense"})," 的过程，首先会创建一个隐藏的 ",(0,c.jsx)(e.code,{children:"DOM"})," 元素，该元素将作为 ",(0,c.jsx)(e.code,{children:"default"})," 插槽内容的初始化挂载容器。然后创建了一个 ",(0,c.jsx)(e.code,{children:"suspense"})," 变量，该变量内部包含了一些的对 ",(0,c.jsx)(e.code,{children:"<Suspense>"})," 组件的处理函数："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {\n  // ...\n  const suspense = {\n    vnode,\n    parent,\n    parentComponent,\n    isSVG,\n    container,\n    hiddenContainer,\n    anchor,\n    deps: 0,\n    pendingId: 0,\n    timeout: typeof timeout === 'number' ? timeout : -1,\n    activeBranch: null,\n    pendingBranch: null,\n    isInFallback: true,\n    isHydrating,\n    isUnmounted: false,\n    effects: [],\n    \n    resolve(resume = false) {\n      // ...\n    },\n    \n    fallback(fallbackVNode) {\n      // ...\n    },\n    \n    move(container, anchor, type) {\n      // ...\n    },\n    \n    next() {\n      // ...\n    },\n    \n    registerDep(instance, setupRenderEffect) {\n      // ...\n    },\n    \n    unmount(parentSuspense, doRemove) {\n      // ...\n    }\n  }\n  \n  return suspense\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["可以看到，这个 ",(0,c.jsx)(e.code,{children:"createSuspenseBoundary"})," 函数本身其实并没有做太多的事情，本质上就是为了构造一个 ",(0,c.jsx)(e.code,{children:"suspense"})," 对象。"]}),"\n",(0,c.jsxs)(e.p,{children:["接下来会进入到对 ",(0,c.jsx)(e.code,{children:"default"})," 容器中的内容进行 ",(0,c.jsx)(e.code,{children:"patch"})," 的过程。在本课程的第二小节中，我们提到了 ",(0,c.jsx)(e.code,{children:"patch"})," 函数在进行组件实例化的过程中，会执行 ",(0,c.jsx)(e.code,{children:"setupStatefulComponent"})," 这个设置并运行副作用渲染函数的方法，之前我们只是介绍了该方法处理同步 ",(0,c.jsx)(e.code,{children:"setup"})," 的情况，而对于 ",(0,c.jsx)(e.code,{children:"<Suspense>"})," 组件来说，",(0,c.jsx)(e.code,{children:"setup"})," 会返回个 ",(0,c.jsx)(e.code,{children:"promise"}),"。我们再来看看对于这种情况的处理："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"function setupStatefulComponent(instance, isSSR) {\n  // ...\n  // 对于 setup 返回是个 promise 的情况\n  if (isPromise(setupResult)) {\n    setupResult.then(unsetCurrentInstance, unsetCurrentInstance)\n    if (__FEATURE_SUSPENSE__) {\n      // 在 suspense 模式下，为实例 asyncDep 赋值为 setupResult\n      instance.asyncDep = setupResult\n    }\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["可以看到对于 ",(0,c.jsx)(e.code,{children:"Suspense"})," 组件来说，其中的 ",(0,c.jsx)(e.code,{children:"default"})," 内容的 ",(0,c.jsx)(e.code,{children:"setup"})," 如果返回的是个 ",(0,c.jsx)(e.code,{children:"pormise"})," 对象的话，则会为将 ",(0,c.jsx)(e.code,{children:"setup"})," 函数执行的结果 ",(0,c.jsx)(e.code,{children:"setupResult"})," 赋值给实例属性 ",(0,c.jsx)(e.code,{children:"asyncDep"}),"。那 ",(0,c.jsx)(e.code,{children:"asyncDep"})," 有什么用呢？"]}),"\n",(0,c.jsxs)(e.p,{children:["在渲染器执行 ",(0,c.jsx)(e.code,{children:"mountComponent"})," 的时候，如果存在 ",(0,c.jsx)(e.code,{children:"asyncDep"})," 变量，则会调用 ",(0,c.jsx)(e.code,{children:"suspense"})," 上的 ",(0,c.jsx)(e.code,{children:"registerDep"})," 方法，并为 ",(0,c.jsx)(e.code,{children:"default"})," 中的插槽节点创建了一个占位符："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\n  // ...\n  // 依赖于 suspense 的异步 setup\n  if (__FEATURE_SUSPENSE__ && instance.asyncDep) {\n    parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect)\n    \n    // 为插槽 vnode 创建注释节点\n    if (!initialVNode.el) {\n      const placeholder = (instance.subTree = createVNode(Comment))\n      processCommentNode(null, placeholder, container, anchor)\n    }\n    return\n  }\n  // ...\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这里的 ",(0,c.jsx)(e.code,{children:"parentSuspense"})," 就是 ",(0,c.jsx)(e.code,{children:"default"})," 插槽内的第一个父级 ",(0,c.jsx)(e.code,{children:"suspense"})," 对象。接下来看看 ",(0,c.jsx)(e.code,{children:"registerDep"})," 的执行逻辑："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {\n  // ...\n  const suspense = {\n    // ...\n    registerDep(instance, setupRenderEffect) {\n      // 是否有异步未处理的分支\n      const isInPendingSuspense = !!suspense.pendingBranch\n      if (isInPendingSuspense) {\n        // deps 这里会被递增，记录依赖的异步数量\n        suspense.deps++\n      }\n      // asyncDep promise 执行\n      instance\n        .asyncDep.catch(err => {\n          // setup return 的 promise 异常捕获\n          handleError(err, instance, ErrorCodes.SETUP_FUNCTION)\n        })\n        .then(asyncSetupResult => {\n          // 处理一些异常结果\n          if (\n            instance.isUnmounted ||\n            suspense.isUnmounted ||\n            suspense.pendingId !== instance.suspenseId\n          ) {\n            return\n          }\n          instance.asyncResolved = true\n          const {vnode} = instance\n          // setup 处理完成调用\n          handleSetupResult(instance, asyncSetupResult, false)\n          // 占位内容，就是 mountComponent 中创建的注释节点\n          const placeholder = !hydratedEl && instance.subTree.el\n          // 执行 render 挂载节点\n          setupRenderEffect(\n            instance,\n            vnode,\n            // 找到注释占位内容的父节点，作为容器节点，也就是我们之前创建的隐藏 dom\n            parentNode(hydratedEl || instance.subTree.el),\n            hydratedEl ? null : next(instance.subTree),\n            suspense,\n            isSVG,\n            optimized\n          )\n          // 移除占位符\n          if (placeholder) {\n            remove(placeholder)\n          }\n          // 更新 vnode el 属性\n          updateHOCHostEl(instance, vnode.el)\n        \n          // 当所有的异步依赖处理完成后执行 suspense.resolve()\n          if (isInPendingSuspense && --suspense.deps === 0) {\n            suspense.resolve()\n          }\n        })\n    },\n  }\n  \n  return suspense\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这里在执行 ",(0,c.jsx)(e.code,{children:"createSuspenseBoundary"})," 函数的时候，有一个变量需要先了解一下，就是 ",(0,c.jsx)(e.code,{children:"suspense.deps"}),"。这个变量记录着需要处理的异步数量，比如我们上面的图例："]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,c.jsxs)(e.p,{children:["这里生成的 ",(0,c.jsx)(e.code,{children:"deps = 3"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["然后会对 ",(0,c.jsx)(e.code,{children:"instance.asyncDep"})," 的执行结果进行处理，如果有异常，则进入到 ",(0,c.jsx)(e.code,{children:"handleError"})," 的逻辑，",(0,c.jsx)(e.code,{children:"handleError"})," 内部会调用 ",(0,c.jsx)(e.code,{children:"onErrorCaptured"})," 钩子，可以让我们监听到组件的错误。"]}),"\n",(0,c.jsxs)(e.p,{children:["如果正常返回，则会进入到 ",(0,c.jsx)(e.code,{children:"then"})," 的处理逻辑中，这里的处理主要做了以下几件事儿："]}),"\n",(0,c.jsxs)(e.ol,{children:["\n",(0,c.jsxs)(e.li,{children:["首先对一些异常场景进行降级，这里的异常场景包含了组件实例在异步执行完成后被卸载，或者 ",(0,c.jsx)(e.code,{children:"Suspense"})," 实例被卸载等情况。"]}),"\n",(0,c.jsxs)(e.li,{children:["然后就是为组件设置 ",(0,c.jsx)(e.code,{children:"render"})," 函数。如果 ",(0,c.jsx)(e.code,{children:"setup promise"})," 返回的时候函数，那么这里也会将这个函数设置为渲染函数。"]}),"\n",(0,c.jsxs)(e.li,{children:["接着就是通过 ",(0,c.jsx)(e.code,{children:"setupRenderEffect"})," 函数的调用，完成渲染函数的调用执行，生成 ",(0,c.jsx)(e.code,{children:"DOM"})," 节点"]}),"\n",(0,c.jsxs)(e.li,{children:["最后，根据 ",(0,c.jsx)(e.code,{children:"deps"})," 判断是否所有的异步依赖都已执行完，如果执行完，则进入 ",(0,c.jsx)(e.code,{children:"suspense.resolve()"})," 的逻辑。"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["介绍完了 ",(0,c.jsx)(e.code,{children:"patch"})," 的过程，再回到 ",(0,c.jsx)(e.code,{children:"mountSuspense"})," 函数体当中，如果存在异步依赖，此时的 ",(0,c.jsx)(e.code,{children:"suspense.deps > 0"})," 会进入到对异步处理的逻辑中："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"// 触发 onPending，onFallback 钩子函数\ntriggerEvent(vnode, 'onPending')\ntriggerEvent(vnode, 'onFallback')\n\n// 初始化挂载 fallback 插槽内容\npatch(\n  null,\n  vnode.ssFallback,\n  container,\n  anchor,\n  parentComponent,\n  // fallback tree 不会有 suspense context\n  null, \n  isSVG,\n  slotScopeIds\n)\n// 将 fallback vnode 设置为 activeBranch\nsetActiveBranch(suspense, vnode.ssFallback)\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这里的核心逻辑就是在 ",(0,c.jsx)(e.code,{children:"default"})," 插槽中的异步未执行完成时，先挂载 ",(0,c.jsx)(e.code,{children:"fallback"})," 的内容。然后将 ",(0,c.jsx)(e.code,{children:"activeBranch"})," 设置为 ",(0,c.jsx)(e.code,{children:"fallback"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["如果不存在异步依赖，",(0,c.jsx)(e.code,{children:"suspense.deps = 0"})," 此时，也会直接执行 ",(0,c.jsx)(e.code,{children:"suspense.resolve()"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["接下来，我们看看这个 ",(0,c.jsx)(e.code,{children:"resolve"})," 到底做了哪些事："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {\n  // ...\n  const suspense = {\n    // ...\n    resolve(resume = false) {\n      const {\n        vnode,\n        activeBranch,\n        pendingBranch,\n        pendingId,\n        effects,\n        parentComponent,\n        container\n      } = suspense\n      // 服务端渲染的逻辑，这里不关心\n      if (suspense.isHydrating) {\n        suspense.isHydrating = false\n      } else if (!resume) {\n        // ...\n        let {anchor} = suspense\n        // 卸载当前激活分支，即 fallback\n        if (activeBranch) {\n          anchor = next(activeBranch)\n          unmount(activeBranch, parentComponent, suspense, true)\n        }\n        if (!delayEnter) {\n          // 将 default 容器中的内容移动到可视区域\n          move(pendingBranch, container, anchor, MoveType.ENTER)\n        }\n      }\n      // 将 pendingBranch 设置为激活分支\n      setActiveBranch(suspense, pendingBranch)\n      suspense.pendingBranch = null\n      suspense.isInFallback = false\n      \n      // 获取父节点\n      let parent = suspense.parent\n      // 标记是否还有未处理完成的 suspense\n      let hasUnresolvedAncestor = false\n      while (parent) {\n        if (parent.pendingBranch) {\n          //  如果存在还未处理完的父级 suspense，将当前 effect 合并到父级当中\n          parent.effects.push(...effects)\n          hasUnresolvedAncestor = true\n          break\n        }\n        parent = parent.parent\n      }\n      // 全部处理完suspense，一次性 queuePostFlushCb\n      if (!hasUnresolvedAncestor) {\n        queuePostFlushCb(effects)\n      }\n      suspense.effects = []\n      \n      // 调用 onResolve 钩子函数\n      triggerEvent(vnode, 'onResolve')\n    },\n  }\n  \n  return suspense\n}\n"})}),"\n",(0,c.jsx)(e.p,{children:"这里要做的事情也是比较明确的，我们也来一一枚举一下"}),"\n",(0,c.jsxs)(e.ol,{children:["\n",(0,c.jsxs)(e.li,{children:["卸载 ",(0,c.jsx)(e.code,{children:"fallback"})," 的插槽内容，因为已经完成了异步逻辑，所以没必要了。"]}),"\n",(0,c.jsxs)(e.li,{children:["将之前缓存在内存中的 ",(0,c.jsx)(e.code,{children:"default"})," 节点移动到可是区域。"]}),"\n",(0,c.jsxs)(e.li,{children:["遍历父节点，找到是否还有未完成的 ",(0,c.jsx)(e.code,{children:"suspense"})," 节点，将当前的渲染 ",(0,c.jsx)(e.code,{children:"effects"})," 合并到父节点上进行统一更新。"]}),"\n",(0,c.jsxs)(e.li,{children:["触发 ",(0,c.jsx)(e.code,{children:"onResolve"})," 钩子函数。"]}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["这里我想重点说一下第三点，什么情况下会出现子节点已经完成异步依赖执行单父节点还有未完成的异步依赖呢？可以来看一个 ",(0,c.jsx)(e.code,{children:"demo"}),"："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"import { createApp, ref, h, onMounted } from 'vue'\n\n// 构造一个异步渲染容器\nfunction defineAsyncComponent(\n  comp,\n  delay = 0\n) {\n  return {\n    setup(props, { slots }) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve(() => h(comp, props, slots))\n        }, delay)\n      })\n    }\n  }\n}\n// 定义一个外层异步组件\nconst AsyncOuter = defineAsyncComponent(\n  {\n    setup: () => {\n      onMounted(() => {\n        console.log('outer mounted')\n      })\n      return () => h('div', 'async outer')\n    }\n  },\n  2000\n)\n// 定义一个内层异步组件\nconst AsyncInner = defineAsyncComponent(\n  {\n    setup: () => {\n      onMounted(() => {\n        console.log('inner mounted')\n      })\n      return () => h('div', 'async inner')\n    }\n  },\n  1000\n)\n// 定义一个内层 Suspense 组件\nconst Inner = {\n  setup() {\n    return () =>\n      h(Suspense, null, {\n        default: h(AsyncInner),\n        fallback: h('div', 'fallback inner')\n      })\n  }\n}\ncreateApp({\n  setup() {\n    return () =>\n      // 定义一个外层 Suspense 组件\n      h(Suspense, null, {\n        default: h('div', [h(AsyncOuter), h(Inner)]),\n        fallback: h('div', 'fallback outer')\n      })\n  },\n}).mount('#app')\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这里呢，我们构造了一个包含了 ",(0,c.jsx)(e.code,{children:"Suspense"})," 异步渲染的 ",(0,c.jsx)(e.code,{children:"Outer"})," 组件，",(0,c.jsx)(e.code,{children:"Outer"})," 中又包含了另一个通过 ",(0,c.jsx)(e.code,{children:"Suspense"})," 渲染的 ",(0,c.jsx)(e.code,{children:"Inner"})," 组件。我们通过 ",(0,c.jsx)(e.code,{children:"defineAsyncComponent"})," 函数来模拟组件的异步过程，此时的 ",(0,c.jsx)(e.code,{children:"AsyncInner"})," 组件是优先于 ",(0,c.jsx)(e.code,{children:"AsyncOuter"})," 组件的异步完成的，对于这种情况，就满足了存在父的 ",(0,c.jsx)(e.code,{children:"Suspense"})," 且父级 ",(0,c.jsx)(e.code,{children:"Suspense"})," 还有 ",(0,c.jsx)(e.code,{children:"pendingBranch"})," 待处理的情况，那么会把子组件的 ",(0,c.jsx)(e.code,{children:"suspense.effects"})," 合入父组件当中。"]}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"suspense.effects"})," 是个什么东西呢？"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"// queuePostRenderEffect 在 suspense 模式下指的是 queueEffectWithSuspense\nexport const queuePostRenderEffect = __FEATURE_SUSPENSE__\n  ? queueEffectWithSuspense\n  : queuePostFlushCb\n  \nexport function queueEffectWithSuspense(fn, suspense) {\n  // 针对 suspense 处理，会将渲染函数推送到 suspense.effects 中\n  if (suspense && suspense.pendingBranch) {\n    if (isArray(fn)) {\n      suspense.effects.push(...fn)\n    } else {\n      suspense.effects.push(fn)\n    }\n  } else {\n    queuePostFlushCb(fn)\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.code,{children:"suspense.effects"})," 在 ",(0,c.jsx)(e.code,{children:"suspense"})," 模式下，就是通过 ",(0,c.jsx)(e.code,{children:"queuePostRenderEffect"})," 生成的副作用函数的数组。我们的示例中，会在组件中调用 ",(0,c.jsx)(e.code,{children:"onMounted"})," 钩子函数，在组件被挂载的时候，就会执行通过 ",(0,c.jsx)(e.code,{children:"queuePostRenderEffect"})," 函数，将 ",(0,c.jsx)(e.code,{children:"onMounted"})," 推入 ",(0,c.jsx)(e.code,{children:"suspense.effects"})," 数组中："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-js",children:"// 设置并运行带副作用的渲染函数\nconst setupRenderEffect = (...) => {\n  const componentUpdateFn = () => {\n    if (!instance.isMounted) {\n      // ...\n      const { m } = instance\n      // mounted hook 推入到 suspense.effects\n      if (m) {\n        queuePostRenderEffect(m, parentSuspense)\n      }\n     \n    } else {\n      // ...\n      let { u } = instance\n      // updated hook 推入到 suspense.effects\n      if (u) {\n        queuePostRenderEffect(u, parentSuspense)\n      }\n    }\n  }\n  // ...\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["所以上述的示例中，父子组件的 ",(0,c.jsx)(e.code,{children:"onMounted"})," 钩子将会被在父组件异步完成后统一执行。"]}),"\n",(0,c.jsxs)(e.h2,{id:"suspense-更新",children:["Suspense 更新",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#suspense-更新",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["接下来我们看一下 ",(0,c.jsx)(e.code,{children:"Suspense"})," 更新的逻辑，这块的逻辑都集中在 ",(0,c.jsx)(e.code,{children:"patchSuspense"})," 函数中："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {\n  // 初始化赋值操作\n  const suspense = (n2.suspense = n1.suspense)\n    suspense.vnode = n2\n  n2.el = n1.el\n  // 最新的 default 分支\n  const newBranch = n2.ssContent\n  // 最新的 fallback 分支\n  const newFallback = n2.ssFallback\n  \n  const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense\n  // 存在旧的 pendingBranch\n  if (pendingBranch) {\n    suspense.pendingBranch = newBranch\n    // 新旧分支是属于 isSameVNodeType\n    if (isSameVNodeType(newBranch, pendingBranch)) {\n      // 新旧分支进行 diff\n      patch(\n        pendingBranch,\n        newBranch,\n        suspense.hiddenContainer,\n        null,\n        parentComponent,\n        suspense,\n        isSVG,\n        slotScopeIds,\n        optimized\n      )\n      // 没有依赖则直接 resolve\n      if (suspense.deps <= 0) {\n        suspense.resolve()\n      } else if (isInFallback) {\n        // 处于 fallback 中，激活分支和 newFallback 进行 diff\n        patch(\n          activeBranch,\n          newFallback,\n          container,\n          anchor,\n          parentComponent,\n          null, // fallback tree will not have suspense context\n          isSVG,\n          slotScopeIds,\n          optimized\n        )\n        // 更新激活分支为 newFallback\n        setActiveBranch(suspense, newFallback)\n      }\n    } else {\n      suspense.pendingId++\n      // ...\n      // 卸载旧分支\n      unmount(pendingBranch, parentComponent, suspense)\n      // ...\n      //  创建隐藏容器\n      suspense.hiddenContainer = createElement('div')\n      // 处于 fallback 态\n      if (isInFallback) {\n        // 挂载新的分支到隐藏容器中\n        patch(\n          null,\n          newBranch,\n          suspense.hiddenContainer,\n          null,\n          parentComponent,\n          suspense,\n          isSVG,\n          slotScopeIds,\n          optimized\n        )\n        // 没有依赖则直接 resolve\n        if (suspense.deps <= 0) {\n          suspense.resolve()\n        } else {\n          // 激活分支和 newFallback 进行 diff\n          patch(\n            activeBranch,\n            newFallback,\n            container,\n            anchor,\n            parentComponent,\n            null, // fallback tree will not have suspense context\n            isSVG,\n            slotScopeIds,\n            optimized\n          )\n          setActiveBranch(suspense, newFallback)\n        }\n      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\n        // 激活分支和新分支进行 diff\n        patch(\n          activeBranch,\n          newBranch,\n          container,\n          anchor,\n          parentComponent,\n          suspense,\n          isSVG,\n          slotScopeIds,\n          optimized\n        )\n        suspense.resolve(true)\n      } else {\n        // 挂载新分支到隐藏分支\n        patch(\n          null,\n          newBranch,\n          suspense.hiddenContainer,\n          null,\n          parentComponent,\n          suspense,\n          isSVG,\n          slotScopeIds,\n          optimized\n        )\n        if (suspense.deps <= 0) {\n          suspense.resolve()\n        }\n      }\n    }\n  } else {\n    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\n      // activeBranch 和 newBranch 进行 diff\n      patch(\n        activeBranch,\n        newBranch,\n        container,\n        anchor,\n        parentComponent,\n        suspense,\n        isSVG,\n        slotScopeIds,\n        optimized\n      )\n      setActiveBranch(suspense, newBranch)\n    } else {\n      // ...\n      // 挂载新分支到隐藏分支\n      patch(\n        null,\n        newBranch,\n        suspense.hiddenContainer,\n        null,\n        parentComponent,\n        suspense,\n        isSVG,\n        slotScopeIds,\n        optimized\n      )\n      // ...\n    }\n  }\n}\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这个函数核心作用是通过判断 ",(0,c.jsx)(e.code,{children:"ssConent"}),"、",(0,c.jsx)(e.code,{children:"ssFallback"}),"、",(0,c.jsx)(e.code,{children:"pendingBranch"}),"、",(0,c.jsx)(e.code,{children:"activeBranch"})," 的内容，进行不同条件的 ",(0,c.jsx)(e.code,{children:"diff"}),"。 ",(0,c.jsx)(e.code,{children:"diff"})," 完成后的工作和上面初始化的过程是大致一样的，会进行异步依赖 ",(0,c.jsx)(e.code,{children:"deps"})," 数目的判断，如果没有依赖 ",(0,c.jsx)(e.code,{children:"deps"})," 则直接进行 ",(0,c.jsx)(e.code,{children:"suspense.resolve"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"该函数看起来分支逻辑比较多，我们可以通过一个简单的脑图捋顺其中的逻辑："}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,c.jsxs)(e.h2,{id:"总结",children:["总结",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["这里我们详细介绍了 ",(0,c.jsx)(e.code,{children:"<Suspense>"})," 组件的实现原理，本质上就是通过一个计数器 ",(0,c.jsx)(e.code,{children:"deps"})," 来记录需要被处理的依赖数量，当异步状态执行完成后，响应的计数器进行递减，当所有 ",(0,c.jsx)(e.code,{children:"deps"})," 清空时，则达到统一完成态。于此同时，如果有父子嵌套的情况出现，会根据父节点的 ",(0,c.jsx)(e.code,{children:"suspense"})," 状态来判断是否需要统一处理 ",(0,c.jsx)(e.code,{children:"effects"}),"。"]}),"\n",(0,c.jsxs)(e.p,{children:["最后，",(0,c.jsx)(e.code,{children:"<Suspense>"})," 组件到目前为止，还是一个实验性的功能，这也意味着这个功能在后续迭代中可能会被随时调整，作者也会持续关注组件的变更。"]})]})}function o(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(i,{...n})}):i(n)}let l=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["Vue%203%20%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%2F19.%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6%EF%BC%9ASuspense%20%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BC%82%E6%AD%A5.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"Suspense 挂载",id:"suspense-挂载",depth:2},{text:"Suspense 更新",id:"suspense-更新",depth:2},{text:"总结",id:"总结",depth:2}],title:"19.内置组件：Suspense 原理与异步",headingTitle:"19.内置组件：Suspense 原理与异步",frontmatter:{}}}}]);