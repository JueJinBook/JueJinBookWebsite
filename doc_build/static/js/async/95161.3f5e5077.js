"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["95161"],{137830:function(n,e,t){t.r(e),t.d(e,{default:()=>D});var o=t(552676),i=t(740453);let c=t.p+"static/image/e039716c097032e824a4c3fd313270b2.1b7e94a6.gif",s=t.p+"static/image/6e2536882af34286b23e4a73306eb23c.3e6d44d4.webp",a=t.p+"static/image/eb1ed9c50321e9245fd748a2e5c96428.9b739496.webp",r=t.p+"static/image/292c54d45dd6154c16192ce9563f25d1.a459ba63.webp",d=t.p+"static/image/1c692c91c65d268a5b0a4979b7b78c5d.e1acad72.webp",p=t.p+"static/image/22346473c1a4410e26c438c3a93fb78e.094792a5.webp",l=t.p+"static/image/87109e8332312d787844c24f3d5ab3ab.ab53dfbc.webp",m=t.p+"static/image/ca8bb578551efc5102de92e8949129af.2700ea63.gif",u=t.p+"static/image/309120da620e2ba32f75055858ee8557.d9722476.gif",g=t.p+"static/image/6f55a4e983d21427d309197aa857580d.47d69e6e.webp",f=t.p+"static/image/3e6bd9532584827aba0dda737109df73.92060f19.webp",x=t.p+"static/image/20fa67a69ab36398dd460aeeeeb48d3b.745b1ed0.gif",h=t.p+"static/image/05be20f76e29241c0cda39b315ac75dd.d64baab5.webp",C=t.p+"static/image/89a775469980d72f672449ce78dcb262.eceeb06b.webp",v=t.p+"static/image/90a70aaf225ea690cf49a8a6cfc2c1d5.d74a71c9.webp",j=t.p+"static/image/e052d5812db2203fddcbc8a7b2f0dc92.4f153ac0.webp",b=t.p+"static/image/a23590aa230c78b203753d5e413a0f51.43e758a7.gif",S=t.p+"static/image/c067b8cd2851809f4315519e71b269a8.206734bf.webp",A=t.p+"static/image/fee91363b0165d06de83bd7c422c0f15.a9129c56.gif",k=t.p+"static/image/d1460b05e6156c303d5f7f41c902e25b.e696f68e.webp",y=t.p+"static/image/b95ee8d073d9f097ed36fb631d13d58a.a39d3257.gif",M=t.p+"static/image/18c4301f355a73b5ab3ad39d50531ea8.8eb0b39c.gif",E=t.p+"static/image/94be06476333eeb267c2c0052174c442.bd2e68c3.webp",w=t.p+"static/image/ee04afb48977cd39980bdeeb8acc00a3.b7fe75a2.gif",J=t.p+"static/image/cd88951acdb8b9a721c8191bbca96337.af16deef.webp",O=t.p+"static/image/c632c770ad29d29f6d09a3d1e5a46dd5.e95b9269.webp",N=t.p+"static/image/493cb12245286c882da0fe334dbb2064.38157e42.gif",P=t.p+"static/image/3abaf83946b3f467b2c8e5f166cfc186.b79ed3f5.webp",T=t.p+"static/image/3f0fd3658e6927f8cd7252100e705a47.41b0d0a9.webp",L=t.p+"static/image/b2fb3b3e8eaeb32e176b5cf1dd17cc54.f98458ad.webp",B=t.p+"static/image/b5d2d0420d6d550c6fd90fbd900cd56e.ec372d65.webp";function _(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",strong:"strong",h2:"h2"},(0,i.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"第75章低代码编辑器自定义js",children:["第75章—低代码编辑器：自定义JS",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第75章低代码编辑器自定义js",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"\uFEFF前面实现了内置的几个动作，这节来实现下自定义 JS。"}),"\n",(0,o.jsxs)(e.p,{children:["比如 ",(0,o.jsx)(e.a,{href:"https://aisuda.github.io/amis-editor-demo/#/edit/0",target:"_blank",rel:"noopener noreferrer",children:"amis"}),"："]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:B,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"它就支持通过代码来自定义动作。"}),"\n",(0,o.jsx)(e.p,{children:"而且自定义 JS 可以拿到 doAction 方法来执行其他动作："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:L,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"可以通过 context 拿到组件信息。"}),"\n",(0,o.jsx)(e.p,{children:"我们也来实现下。"}),"\n",(0,o.jsx)(e.p,{children:"创建 Setting/actions/CustomJS.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { useState } from \"react\";\nimport { useComponetsStore } from \"../../../stores/components\";\nimport MonacoEditor, { OnMount } from '@monaco-editor/react'\n\nexport interface CustomJSConfig {\n    type: 'customJS',\n    code: string\n}\n\nexport interface CustomJSProps {\n    defaultValue?: string\n    onChange?: (config: CustomJSConfig) => void\n}\n\nexport function CustomJS(props: CustomJSProps) {\n    const { defaultValue, onChange } = props;\n\n    const { curComponentId } = useComponetsStore();\n    const [value, setValue] = useState(defaultValue);\n\n    function codeChange(value?: string) {\n        if (!curComponentId) return;\n\n        setValue(value);\n\n        onChange?.({\n            type: 'customJS',\n            code: value!\n        })\n    }\n\n    const handleEditorMount: OnMount = (editor, monaco) => {\n        editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyJ, () => {\n            editor.getAction('editor.action.formatDocument')?.run()\n        });\n    }\n\n    return <div className='mt-[40px]'>\n        <div className='flex items-start gap-[20px]'>\n            <div>自定义 JS</div>\n            <div>\n                <MonacoEditor\n                    width={'600px'}\n                    height={'400px'}\n                    path='action.js'\n                    language='javascript'\n                    onMount={handleEditorMount}\n                    onChange={codeChange}\n                    value={value}\n                    options={\n                        {\n                            fontSize: 14,\n                            scrollBeyondLastLine: false,\n                            minimap: {\n                                enabled: false,\n                            },\n                            scrollbar: {\n                                verticalScrollbarSize: 6,\n                                horizontalScrollbarSize: 6,\n                            },\n                        }\n                    }\n                />\n            </div>\n        </div>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"和其他动作表单不同的是这里用 monaco editor。"}),"\n",(0,o.jsx)(e.p,{children:"然后在 ActionModal 里用一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:T,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"切换自定义 JS 的 tab 时，渲染 CustomJS 组件。"}),"\n",(0,o.jsx)(e.p,{children:"顺便把类型也改一下，加上 CustomJSConfig 的类型"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { Modal, Segmented } from "antd";\nimport { useState } from "react";\nimport { GoToLink, GoToLinkConfig } from "./actions/GoToLink";\nimport { ShowMessage, ShowMessageConfig } from "./actions/ShowMessage";\nimport { CustomJS, CustomJSConfig } from "./actions/CustomJS";\n\nexport interface ActionModalProps {\n    visible: boolean\n    handleOk: (config?: ActionConfig) => void\n    handleCancel: () => void\n}\n\nexport type ActionConfig = GoToLinkConfig | ShowMessageConfig | CustomJSConfig;\n\nexport function ActionModal(props: ActionModalProps) {\n    const {\n        visible,\n        handleOk,\n        handleCancel\n    } = props;\n\n    const [key, setKey] = useState<string>(\'访问链接\');\n    const [curConfig, setCurConfig] = useState<ActionConfig>();\n\n    return  <Modal \n        title="事件动作配置" \n        width={800}\n        open={visible}\n        okText="确认"\n        cancelText="取消"\n        onOk={() => handleOk(curConfig)}\n        onCancel={handleCancel}\n    >\n        <div className="h-[500px]">\n            <Segmented value={key} onChange={setKey} block options={[\'访问链接\', \'消息提示\', \'自定义 JS\']} />\n            {\n                key === \'访问链接\' && <GoToLink onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n            {\n                key === \'消息提示\' && <ShowMessage onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n            {\n                key === \'自定义 JS\' && <CustomJS onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n        </div>\n    </Modal>\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"ComponentEvent 里渲染的时候也支持 customJS，并改下 ts 类型："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:P,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Collapse, Input, Select, CollapseProps, Button} from 'antd';\nimport { useComponetsStore } from '../../stores/components';\nimport { useComponentConfigStore } from '../../stores/component-config';\nimport type { ComponentEvent } from '../../stores/component-config';\nimport { ActionConfig, ActionModal } from './ActionModal';\nimport { useState } from 'react';\nimport { DeleteOutlined } from '@ant-design/icons';\n\nexport function ComponentEvent() {\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n    const [actionModalOpen, setActionModalOpen] = useState(false);\n    const [curEvent, setCurEvent] = useState<ComponentEvent>();\n\n    if (!curComponent) return null;\n\n    function deleteAction(event: ComponentEvent, index: number) {\n        if(!curComponent) {\n            return;\n        }\n\n        const actions = curComponent.props[event.name]?.actions;\n\n        actions.splice(index, 1)\n\n        updateComponentProps(curComponent.id,  { \n            [event.name]: { \n                actions: actions\n            }\n        })\n    }\n\n    const items: CollapseProps['items'] = (componentConfig[curComponent.name].events || []).map(event => {\n        return {\n            key: event.name,\n            label: <div className='flex justify-between leading-[30px]'>\n                {event.label}\n                <Button type=\"primary\" onClick={(e) => {\n                    e.stopPropagation();\n\n                    setCurEvent(event);\n                    setActionModalOpen(true);\n                }}>添加动作</Button>\n            </div>,\n            children: <div>\n                {\n                    (curComponent.props[event.name]?.actions || []).map((item: ActionConfig, index: number) => {\n                        return <div>\n                            {\n                                item.type === 'goToLink' ? <div key=\"goToLink\" className='border border-[#aaa] m-[10px] p-[10px] relative'>\n                                    <div className='text-[blue]'>跳转链接</div>\n                                    <div>{item.url}</div>\n                                    <div style={{ position: 'absolute', top: 10, right: 10, cursor: 'pointer' }}\n                                        onClick={() => deleteAction(event, index)}\n                                    ><DeleteOutlined /></div>\n                                </div> : null\n                            }\n                            {\n                                item.type === 'showMessage' ? <div key=\"showMessage\" className='border border-[#aaa] m-[10px] p-[10px] relative'>\n                                    <div className='text-[blue]'>消息弹窗</div>\n                                    <div>{item.config.type}</div>\n                                    <div>{item.config.text}</div>\n                                    <div style={{ position: 'absolute', top: 10, right: 10, cursor: 'pointer' }}\n                                        onClick={() => deleteAction(event, index)}\n                                    ><DeleteOutlined /></div>\n                                </div> : null\n                            }\n                            {\n                                item.type === 'customJS' ? <div key=\"customJS\" className='border border-[#aaa] m-[10px] p-[10px] relative'>\n                                    <div className='text-[blue]'>自定义 JS</div>\n                                    <div style={{ position: 'absolute', top: 10, right: 10, cursor: 'pointer' }}\n                                        onClick={() => deleteAction(event, index)}\n                                    ><DeleteOutlined /></div>\n                                </div> : null\n                            }\n                        </div>\n                    })\n                }\n            </div>\n        }\n    })\n\n    function handleModalOk(config?: ActionConfig) {\n        if(!config || !curEvent || !curComponent) {\n            return ;\n        }\n\n        updateComponentProps(curComponent.id,  { \n            [curEvent.name]: { \n                actions: [\n                    ...(curComponent.props[curEvent.name]?.actions || []),\n                    config\n                ]\n            }\n        })\n\n        setActionModalOpen(false)\n    }\n\n    return <div className='px-[10px]'>\n        <Collapse className='mb-[10px]' items={items} defaultActiveKey={componentConfig[curComponent.name].events?.map(item =>item.name)}/>\n        <ActionModal visible={actionModalOpen} handleOk={handleModalOk} handleCancel={() => {\n            setActionModalOpen(false)\n        }}/>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:N,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"动作添加成功。"}),"\n",(0,o.jsx)(e.p,{children:"在 json 里可以看到这个配置："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:O,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"接下来只要 Preview 的时候实现这种 action 的执行就好了。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:J,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"支持 customJS 的 action 执行，顺便改下类型。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"props[event.name] = () => {\n    eventConfig?.actions?.forEach((action: ActionConfig) => {\n        if (action.type === 'goToLink') {\n            window.location.href = action.url;\n        } else if (action.type === 'showMessage') {\n            if (action.config.type === 'success') {\n                message.success(action.config.text);\n            } else if (action.config.type === 'error') {\n                message.error(action.config.text);\n            }\n        } else if(action.type === 'customJS') {\n            const func = new Function(action.code);\n            func()\n        }\n    })\n\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:w,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样就实现了自定义 JS 的执行。"}),"\n",(0,o.jsx)(e.p,{children:"然后给执行的函数加上一些参数："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:E,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"new Function 可以传入任意个参数，最后一个是函数体，前面都会作为函数参数的名字。"}),"\n",(0,o.jsx)(e.p,{children:"然后调用的时候传入参数。"}),"\n",(0,o.jsx)(e.p,{children:"我们这里只传入了当前组件的 name、props 还有一个方法。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"const func = new Function('context', action.code);\nfunc({\n    name: component.name,\n    props: component.props,\n    showMessage(content: string) {\n        message.success(content)\n    }\n});\n"})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:M,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:y,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样，自定义 JS 的功能就完成了。"}),"\n",(0,o.jsx)(e.p,{children:"但现在有个问题："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:k,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"我们上节做了动作的新增、删除，并没有做编辑。"}),"\n",(0,o.jsx)(e.p,{children:"这对于跳转链接、消息弹窗这种动作还好，参数比较简单。"}),"\n",(0,o.jsx)(e.p,{children:"但是对于自定义 JS，写一段 JS 成本还是挺高的，删了再重写体验不好，所以我们得支持下编辑。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:A,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"改下 ComponentEvent 组件："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:S,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"<div style={{ position: 'absolute', top: 10, right: 30, cursor: 'pointer' }}\n    onClick={() => editAction(item)}\n><EditOutlined /></div>\n"})}),"\n",(0,o.jsx)(e.p,{children:"加一个绝对定位的 icon。"}),"\n",(0,o.jsx)(e.p,{children:"点击的时候打开弹窗："}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"function editAction(config: ActionConfig) {\n    if(!curComponent) {\n        return;\n    }\n\n    setActionModalOpen(true);\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:b,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"能打开弹窗，但是还没回显内容。"}),"\n",(0,o.jsx)(e.p,{children:"在 ActionModal 传入 action 来回显："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:j,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:v,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Modal, Segmented } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { GoToLink, GoToLinkConfig } from \"./actions/GoToLink\";\nimport { ShowMessage, ShowMessageConfig } from \"./actions/ShowMessage\";\nimport { CustomJS, CustomJSConfig } from \"./actions/CustomJS\";\n\nexport type ActionConfig = GoToLinkConfig | ShowMessageConfig | CustomJSConfig;\n\nexport interface ActionModalProps {\n    visible: boolean\n    action?: ActionConfig\n    handleOk: (config?: ActionConfig) => void\n    handleCancel: () => void\n}\n\nexport function ActionModal(props: ActionModalProps) {\n    const {\n        visible,\n        action,\n        handleOk,\n        handleCancel\n    } = props;\n\n    const map = {\n        goToLink: '访问链接',\n        showMessage: '消息提示',\n        customJS: '自定义 JS'\n    }\n\n    const [key, setKey] = useState<string>('访问链接');\n    const [curConfig, setCurConfig] = useState<ActionConfig>();\n\n    useEffect(() => {\n        if(action?.type ) {\n            setKey(map[action.type]);\n        }\n    }, [action]);\n\n    return  <Modal \n        title=\"事件动作配置\" \n        width={800}\n        open={visible}\n        okText=\"确认\"\n        cancelText=\"取消\"\n        onOk={() => handleOk(curConfig)}\n        onCancel={handleCancel}\n    >\n        <div className=\"h-[500px]\">\n            <Segmented value={key} onChange={setKey} block options={['访问链接', '消息提示', '自定义 JS']} />\n            {\n                key === '访问链接' && <GoToLink key=\"goToLink\" defaultValue={action?.type === 'goToLink' ? action.url : ''} onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n            {\n                key === '消息提示' && <ShowMessage  key=\"showMessage\" value={action?.type === 'showMessage' ? action.config : undefined} onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n            {\n                key === '自定义 JS' && <CustomJS key=\"customJS\" defaultValue={action?.type === 'customJS' ? action.code : ''} onChange={(config) => {\n                    setCurConfig(config);\n                }}/>\n            }\n        </div>\n    </Modal>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"然后在 ComponentEvent 里传入这个参数："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:C,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:h,alt:""})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"const [curAction, setCurAction] = useState<ActionConfig>();\n"})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:x,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样，回显就完成了。"}),"\n",(0,o.jsx)(e.p,{children:"然后保存的时候也要处理下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:f,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:g,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"记录下当前编辑的 action 的 index。"}),"\n",(0,o.jsx)(e.p,{children:"保存的时候如果有 curAction，就是修改，没有的话才是新增。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import { Collapse, Input, Select, CollapseProps, Button} from 'antd';\nimport { useComponetsStore } from '../../stores/components';\nimport { useComponentConfigStore } from '../../stores/component-config';\nimport type { ComponentEvent } from '../../stores/component-config';\nimport { ActionConfig, ActionModal } from './ActionModal';\nimport { useState } from 'react';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\n\nexport function ComponentEvent() {\n\n    const { curComponentId, curComponent, updateComponentProps } = useComponetsStore();\n    const { componentConfig } = useComponentConfigStore();\n    const [actionModalOpen, setActionModalOpen] = useState(false);\n    const [curEvent, setCurEvent] = useState<ComponentEvent>();\n    const [curAction, setCurAction] = useState<ActionConfig>();\n    const [curActionIndex, setCurActionIndex] = useState<number>();\n\n    if (!curComponent) return null;\n\n    function deleteAction(event: ComponentEvent, index: number) {\n        if(!curComponent) {\n            return;\n        }\n\n        const actions = curComponent.props[event.name]?.actions;\n\n        actions.splice(index, 1)\n\n        updateComponentProps(curComponent.id,  { \n            [event.name]: { \n                actions: actions\n            }\n        })\n    }\n\n    function editAction(config: ActionConfig, index: number) {\n        if(!curComponent) {\n            return;\n        }\n        setCurAction(config);\n        setCurActionIndex(index)\n\n        setActionModalOpen(true);\n    }\n\n    const items: CollapseProps['items'] = (componentConfig[curComponent.name].events || []).map(event => {\n        return {\n            key: event.name,\n            label: <div className='flex justify-between leading-[30px]'>\n                {event.label}\n                <Button type=\"primary\" onClick={(e) => {\n                    e.stopPropagation();\n\n                    setCurEvent(event);\n                    setActionModalOpen(true);\n                }}>添加动作</Button>\n            </div>,\n            children: <div>\n                {\n                    (curComponent.props[event.name]?.actions || []).map((item: ActionConfig, index: number) => {\n                        return <div>\n                            {\n                                item.type === 'goToLink' ? <div key=\"goToLink\" className='border border-[#aaa] m-[10px] p-[10px] relative'>\n                                    <div className='text-[blue]'>跳转链接</div>\n                                    <div>{item.url}</div>\n                                    <div style={{ position: 'absolute', top: 10, right: 30, cursor: 'pointer' }}\n                                        onClick={() => editAction(item, index)}\n                                    ><EditOutlined /></div>\n                                    <div style={{ position: 'absolute', top: 10, right: 10, cursor: 'pointer' }}\n                                        onClick={() => deleteAction(event, index)}\n                                    ><DeleteOutlined /></div>\n                                </div> : null\n                            }\n                            {\n                                item.type === 'showMessage' ? <div key=\"showMessage\" className='border border-[#aaa] m-[10px] p-[10px] relative'>\n                                    <div className='text-[blue]'>消息弹窗</div>\n                                    <div>{item.config.type}</div>\n                                    <div>{item.config.text}</div>\n                                    <div style={{ position: 'absolute', top: 10, right: 30, cursor: 'pointer' }}\n                                        onClick={() => editAction(item, index)}\n                                        ><EditOutlined /></div>\n                                    <div style={{ position: 'absolute', top: 10, right: 10, cursor: 'pointer' }}\n                                        onClick={() => deleteAction(event, index)}\n                                    ><DeleteOutlined /></div>\n                                </div> : null\n                            }\n                            {\n                                item.type === 'customJS' ? <div key=\"customJS\" className='border border-[#aaa] m-[10px] p-[10px] relative'>\n                                    <div className='text-[blue]'>自定义 JS</div>\n                                    <div style={{ position: 'absolute', top: 10, right: 30, cursor: 'pointer' }}\n                                        onClick={() => editAction(item, index)}\n                                    ><EditOutlined /></div>\n                                    <div style={{ position: 'absolute', top: 10, right: 10, cursor: 'pointer' }}\n                                        onClick={() => deleteAction(event, index)}\n                                    ><DeleteOutlined /></div>\n                                </div> : null\n                            }\n                        </div>\n                    })\n                }\n            </div>\n        }\n    })\n\n    function handleModalOk(config?: ActionConfig) {\n        if(!config || !curEvent || !curComponent) {\n            return ;\n        }\n\n        if(curAction) {\n            updateComponentProps(curComponent.id,  { \n                [curEvent.name]: { \n                    actions: curComponent.props[curEvent.name]?.actions.map((item: ActionConfig, index: number) => {\n                        return index === curActionIndex ? config : item;\n                    })\n                }\n            })\n        } else {\n            updateComponentProps(curComponent.id,  { \n                [curEvent.name]: { \n                    actions: [\n                        ...(curComponent.props[curEvent.name]?.actions || []),\n                        config\n                    ]\n                }\n            })\n        }\n\n        setCurAction(undefined);\n\n        setActionModalOpen(false)\n    }\n\n    return <div className='px-[10px]'>\n        <Collapse className='mb-[10px]' items={items} defaultActiveKey={componentConfig[curComponent.name].events?.map(item =>item.name)}/>\n        <ActionModal visible={actionModalOpen} handleOk={handleModalOk} action={curAction} handleCancel={() => {\n            setCurAction(undefined);\n            setActionModalOpen(false)\n        }}/>\n    </div>\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:u,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"action 的新增和修改正常。"}),"\n",(0,o.jsx)(e.p,{children:"这时候我发现虽然最终保存的是对的，回显的不对："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:m,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"如上图，我修改下面的 action 的时候，回显的依然是之前的值，但保存是对的。"}),"\n",(0,o.jsx)(e.p,{children:"这是为什么呢？我们不是传了参数了么："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:l,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"因为我们是用非受控模式写的，传的参数作为表单的默认值："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:p,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"所以修改 defaultValue 并不会修改表单值。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"有回显需求的表单，必须用受控模式来写。"})}),"\n",(0,o.jsx)(e.p,{children:"我们改一下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:d,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:r,alt:""})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:a,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"当传入 value 参数的时候，同步设置内部的 value"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:s,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"测试下："}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)("img",{src:c,alt:""})}),"\n",(0,o.jsx)(e.p,{children:"这样就好了。"}),"\n",(0,o.jsxs)(e.p,{children:["案例代码上传了",(0,o.jsx)(e.a,{href:"https://github.com/QuarkGluonPlasma/react-course-code/tree/main/lowcode-editor",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"，可以切换到这个 commit 查看："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"git reset --hard 29562eb568bdc05e4efbdd02ba4f817f47201279\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"总结",children:["总结",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"这节我们实现了自定义 JS。"}),"\n",(0,o.jsx)(e.p,{children:"通过 monaco editor 来输入代码，然后通过 new Function 来动态执行代码，执行的代码可以访问 context，传入一些属性方法。"}),"\n",(0,o.jsx)(e.p,{children:"然后我们实现了动作的编辑，点击编辑按钮会在弹窗回显 action，保存之后会修改 json。"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"主要回显的表单一定是受控模式，这样才可以随时 value，不然只能设置初始值 defaultValue"})}),"\n",(0,o.jsx)(e.p,{children:"这样，内置动作、自定义 JS 的动作就都完成了。"})]})}function G(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(_,{...n})}):_(n)}let D=G;G.__RSPRESS_PAGE_META={},G.__RSPRESS_PAGE_META["React%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%2F%E7%AC%AC75%E7%AB%A0%E2%80%94%E4%BD%8E%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89JS.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"第75章—低代码编辑器：自定义JS",headingTitle:"第75章—低代码编辑器：自定义JS",frontmatter:{}}}}]);