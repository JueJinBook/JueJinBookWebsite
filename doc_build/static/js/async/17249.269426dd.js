"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["17249"],{801903:function(r,e,n){n.r(e),n.d(e,{default:()=>t});var s=n(552676),i=n(740453);function d(r){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img",h2:"h2",code:"code",strong:"strong",ol:"ol",li:"li",h3:"h3",pre:"pre",br:"br"},(0,i.ah)(),r.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"5第一次数据请求-1服务器接收用户注册信息",children:["5第一次数据请求 1：服务器接收用户注册信息",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5第一次数据请求-1服务器接收用户注册信息",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"本小节将是我们编写服务器端代码的开始。现在假设有这样一个 App（见下图），用户需要通过该界面提交注册信息。服务器端在接收到客户端的注册请求后，返回注册成功信息，并将该用户写入数据库表用户信息中。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e5245ff4d0d4?w=407&h=718&f=png&s=42477",alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"客户端模拟",children:["客户端模拟",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#客户端模拟",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"考虑到本小册讲解的是服务器端，这里不作 App 端的介绍，我们将使用 HTTP 发包工具来模拟上面的 App 注册信息的提交。"}),"\n",(0,s.jsxs)(e.p,{children:["HTTP 发包工具：",(0,s.jsx)(e.a,{href:"https://getman.cn/",target:"_blank",rel:"noopener noreferrer",children:"Getman"})]}),"\n",(0,s.jsxs)(e.p,{children:["约定服务器端 HTTP server 的端口号为 8000，服务器端和客户端定义的请求是 ",(0,s.jsx)(e.code,{children:"/users/regist"}),"，那么完整的 URL 为 ",(0,s.jsx)(e.code,{children:"http://150.109.33.132:8000/users/regist?"}),"（请用自己的云虚拟机 IP 替换其中的 IP）。\r\n参数为手机号（",(0,s.jsx)(e.code,{children:"phone"}),"）、密码（",(0,s.jsx)(e.code,{children:"password"}),"）及验证码（",(0,s.jsx)(e.code,{children:"code"}),"），参数放入 HTTP 的 body 中，具体为：\r\n",(0,s.jsx)(e.code,{children:'{"phone":"18866668888","password":"demo123456","code":"123456"}'})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"注："})}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"确保服务器端 8000 端口已放通；"}),"\n",(0,s.jsx)(e.li,{children:"在实际的项目中，密码不会明文的传输，一般会在客户端先使用 md5 进行加密，服务器端存储的也是加密后的密码字符串。本小册作为学习示例，将使用明文讲解。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"发包器模拟如下："})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e672605297b9?w=779&h=279&f=png&s=17104",alt:""})}),"\n",(0,s.jsx)(e.p,{children:"客户端的请求至此已初步完成，现在，服务器端接收到客户端这个请求后，将如何处理呢？"}),"\n",(0,s.jsxs)(e.h2,{id:"服务器端处理",children:["服务器端处理",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#服务器端处理",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"调用逻辑",children:["调用逻辑",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#调用逻辑",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/17/162d421ec503ec5a?w=685&h=572&f=png&s=26711",alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["客户端以 POST 的方式，发送注册请求至服务器端，请求进入服务器端的 ",(0,s.jsx)(e.code,{children:"main.py"})," 后，将调用 ",(0,s.jsx)(e.code,{children:"url_router"})," 转发到 ",(0,s.jsx)(e.code,{children:"users_url.py"})," 中，在 ",(0,s.jsx)(e.code,{children:"users_urls.py"})," 中，对应的 URL 将调用 ",(0,s.jsx)(e.code,{children:"users_views.py"})," 的 ",(0,s.jsx)(e.code,{children:"RegistHandle"})," 类， ",(0,s.jsx)(e.code,{children:"RegistHandle"})," 为真正的代码处理逻辑，在校验用户信息正确的情况下，返回 JSON 格式的注册成功信息给客户端。"]}),"\n",(0,s.jsxs)(e.h3,{id:"编写服务器端入口函数",children:["编写服务器端入口函数",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编写服务器端入口函数",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"main.py"})," 是 Tornado 作为 HTTP 服务器的统一入口，根据前面的约定，Tornado 对外服务的端口号为 8000。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'#! /usr/bin/python3\r\n# -*- coding:utf-8 -*-\r\n# Author: demo\r\n# Email: demo@demo.com\r\n# Version: demo\r\n\r\nimport tornado.ioloop\r\nimport tornado.web\r\nimport os\r\nimport sys\r\nfrom tornado.options import define,options\r\n\r\nclass Application(tornado.web.Application):\r\n    def __init__(self):\r\n        #定义 Tornado 服务器的配置项，如 static/templates 目录位置、debug 级别等\r\n        settings = dict(\r\n            debug=True,\r\n            static_path=os.path.join(os.path.dirname(__file__),"static"),\r\n            template_path=os.path.join(os.path.dirname(__file__), "templates")\r\n        )\r\n        tornado.web.Application.__init__(self, **settings)\r\n \r\n \r\n \r\nif __name__ == \'__main__\':\r\n    print ("Tornado server is ready for service\\r")\r\n    tornado.options.parse_command_line()\r\n    Application().listen(8000, xheaders=True)\r\n    tornado.ioloop.IOLoop.instance().start()\n'})}),"\n",(0,s.jsxs)(e.p,{children:["保存 ",(0,s.jsx)(e.code,{children:"main.py"})," 代码后，在服务器端运行此段代码"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e6756e0779e5?w=831&h=116&f=png&s=12072",alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["此时再次点击 HTTP 发包模拟器发送注册信息",(0,s.jsx)(e.br,{}),"\n","URL: ",(0,s.jsx)(e.code,{children:"http://150.109.33.132:8000/users/regist?"}),(0,s.jsx)(e.br,{}),"\n","入参：",(0,s.jsx)(e.code,{children:'{"phone":"18866668888","password":"demo123456","code":"123456"}'})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e6772d17bd6b?w=872&h=566&f=png&s=35971",alt:""})}),"\n",(0,s.jsx)(e.p,{children:"再次查看服务器端"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e6792966cf9e?w=971&h=164&f=png&s=18437",alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["此条打印说明，客户端的 HTTP 请求已到达服务器，服务器接收成功但处理失败了，原因为找不到路径 ",(0,s.jsx)(e.code,{children:"/users/regist"}),"。下面在服务器端编写针对  ",(0,s.jsx)(e.code,{children:"/users/regist"})," 的处理代码。"]}),"\n",(0,s.jsxs)(e.h3,{id:"编写路由转发",children:["编写路由转发",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编写路由转发",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["首先，服务器端从 ",(0,s.jsx)(e.code,{children:"main.py"})," 收到客户端的请求后，需要将其转发给对应的处理模块。进入 common 目录，创建 ",(0,s.jsx)(e.code,{children:"url_router.py"})," 文件"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/26/162fec3892c373b3?w=864&h=162&f=png&s=19504",alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["在 ",(0,s.jsx)(e.code,{children:"url_router.py"})," 中输入如下代码。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"#!/usr/bin/python3\r\n# -*- coding:utf-8 -*-\r\n\r\nfrom __future__ import unicode_literals\r\nfrom importlib import import_module\r\n\r\ndef include(module):\r\n    '''根据传入的字符串，调用相应的模块,如 module 为字符串 regist 时，\r\n    调用views.users.users_views.RegistHandle 模块\r\n    '''\r\n    res = import_module(module)\r\n    urls = getattr(res, 'urls', res)\r\n    return urls\r\n    \r\n    \r\ndef url_wrapper(urls):\r\n    '''拼接请求 url，调用对应的模块，如拼接 users 和 regist 成 url /users/regist，\r\n    调用 views.users.users_views.RegistHandle 模块\r\n    '''\r\n    wrapper_list = []\r\n    for url in urls:\r\n        path, handles = url\r\n        if isinstance(handles, (tuple, list)):\r\n            for handle in handles:\r\n                #分离获取字符串（如regist）和调用类（如views.users.users_views.RegistHandle）\r\n                pattern, handle_class = handle\r\n                #拼接url，新的url调用模块\r\n                wrap = ('{0}{1}'.format(path, pattern), handle_class)\r\n                wrapper_list.append(wrap)\r\n        else:\r\n            wrapper_list.append((path, handles))\r\n    return wrapper_list\n"})}),"\n",(0,s.jsxs)(e.p,{children:["接下来修改 ",(0,s.jsx)(e.code,{children:"main.py"}),"，调用 ",(0,s.jsx)(e.code,{children:"url_router.py"})," 将用户请求的路径转发给对应的请求模块。"]}),"\n",(0,s.jsxs)(e.p,{children:["增加如下几行，从 ",(0,s.jsx)(e.code,{children:"common"})," 目录的 ",(0,s.jsx)(e.code,{children:"url_router"})," 导入所需函数（ ",(0,s.jsx)(e.code,{children:"from common.url_router import include, url_wrapper"}),"），并在 ",(0,s.jsx)(e.code,{children:"Application"})," 的类中，拼接转发路由。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e683eae8d788?w=651&h=616&f=png&s=41332",alt:""})}),"\n",(0,s.jsx)(e.p,{children:"完成后的代码如下："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'#! /usr/bin/python3\r\n# -*- coding:utf-8 -*-\r\n# Author: demo\r\n# Email: demo@demo.com\r\n# Version: demo\r\n\r\nimport tornado.ioloop\r\nimport tornado.web\r\nimport os\r\nimport sys\r\nfrom tornado.options import define,options\r\nfrom common.url_router import include, url_wrapper\r\nfrom tornado.options import define,options\r\n\r\n\r\nclass Application(tornado.web.Application):\r\n    def __init__(self):\r\n        handlers = url_wrapper([\r\n        (r"/users/", include(\'views.users.users_urls\'))\r\n        ])\r\n        #定义 Tornado 服务器的配置项，如 static/templates 目录位置，debug 级别等\r\n        settings = dict(\r\n            debug=True,\r\n            static_path=os.path.join(os.path.dirname(__file__),"static"),\r\n            template_path=os.path.join(os.path.dirname(__file__), "templates")\r\n        )\r\n        tornado.web.Application.__init__(self, handlers, **settings)\r\n \r\n\r\nif __name__ == \'__main__\':\r\n    print ("Tornado server is ready for service\\r")\r\n    tornado.options.parse_command_line()\r\n    Application().listen(8000, xheaders=True)\r\n    tornado.ioloop.IOLoop.instance().start()\n'})}),"\n",(0,s.jsxs)(e.p,{children:["至此，",(0,s.jsx)(e.code,{children:"main.py"})," 的路由转发已完成，接下来将编写真正的处理模块。"]}),"\n",(0,s.jsxs)(e.p,{children:["进入 views 目录，创建 users 目录，该目录将存放所有跟用户信息处理相关的代码。在该目录下，创建 ",(0,s.jsx)(e.code,{children:"users_urls.py"}),"、",(0,s.jsx)(e.code,{children:"users_views.py"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/26/1630193b94de9b25?w=457&h=117&f=png&s=6776",alt:""}),"\r\n其中，",(0,s.jsx)(e.code,{children:"users_urls.py"})," 处理针对 ",(0,s.jsx)(e.code,{children:"users"})," 相关的路由及调用类之间的路由，",(0,s.jsx)(e.code,{children:"users_views.py"})," 为真正的逻辑处理。在 ",(0,s.jsx)(e.code,{children:"users_urls.py"})," 中输入如下代码："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"#! /usr/bin/python3\r\n# -*- coding:utf-8 -*-\r\n\r\n\r\nfrom __future__ import unicode_literals\r\nfrom .users_views import (\r\n    RegistHandle\r\n)\r\n\r\nurls = [\r\n    #从 /users/regist 过来的请求，将调用 users_views 里面的 RegistHandle 类\r\n    (r'regist', RegistHandle)\r\n]\r\n	\n"})}),"\n",(0,s.jsxs)(e.p,{children:["在 ",(0,s.jsx)(e.code,{children:"users_views.py"})," 文件中，输入如下代码："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"#! /usr/bin/python3\r\n# -*- coding:utf-8 -*-\r\n\r\nimport tornado.web\r\nfrom tornado.escape import json_decode\r\n\r\n# 从commons中导入http_response方法\r\nfrom common.commons import (\r\n    http_response,\r\n)\r\n\r\n# 从配置文件中导入错误码\r\nfrom conf.base import (\r\n    ERROR_CODE,\r\n)\r\n \r\nclass RegistHandle(tornado.web.RequestHandler):\r\n    \"\"\"handle /user/regist request\r\n    :param phone: users sign up phone\r\n    :param password: users sign up password\r\n    :param code: users sign up code, must six digital code\r\n    \"\"\"\r\n        \r\n    def post(self):\r\n        try:\r\n            #获取入参\r\n            args = json_decode(self.request.body)\r\n            phone = args['phone']\r\n            password = args['password']\r\n            verify_code = args['code']\r\n        except:\r\n            # 获取入参失败时，抛出错误码及错误信息\r\n            http_response(self, ERROR_CODE['1001'], 1001)\r\n            return \r\n            \r\n        # 处理成功后，返回成功码“0”及成功信息“ok”\r\n        http_response(self, ERROR_CODE['0'], 0)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["在",(0,s.jsx)(e.code,{children:"users_views.py"})," 中看到，我们从公共方法库（",(0,s.jsx)(e.code,{children:"commons"}),"）中导入了方法，并从配置文件中导入了错误码定义。接下来编写 ",(0,s.jsx)(e.code,{children:"commons"})," 及 ",(0,s.jsx)(e.code,{children:"base"})," 配置文件。\r\n进入 common 目录，并创建 ",(0,s.jsx)(e.code,{children:"commons.py"})," 文件，在 ",(0,s.jsx)(e.code,{children:"commons.py"})," 中输入如下代码："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e68ccde8beef?w=642&h=84&f=png&s=10262",alt:""})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'#! /usr/bin/python3\r\n# -*- coding:utf-8 -*-\r\n\r\nimport json\r\n\r\ndef http_response(self, msg, code):\r\n    self.write(json.dumps({"data": {"msg": msg, "code": code}}))\r\n\r\n        \r\nif __name__ == "__main__":\r\n   http_response()\n'})}),"\n",(0,s.jsxs)(e.p,{children:["在 conf 目录下，创建 ",(0,s.jsx)(e.code,{children:"base.py"})," 文件："]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/26/1630196b72f2d727?w=489&h=134&f=png&s=6687",alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["在 ",(0,s.jsx)(e.code,{children:"base.py"})," 文件中，输入如下代码："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'#! /usr/bin/python3\r\n# -*- coding:utf-8 -*-\r\n\r\nERROR_CODE = {\r\n    "0": "ok",\r\n    #Users error code\r\n    "1001": "入参非法"\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["至此，我们已经完成了基本的用户注册以及服务器端处理逻辑代码，重新运行 ",(0,s.jsx)(e.code,{children:"main.py"}),"，查看是否启动正常。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e69187e0fc2a?w=836&h=133&f=png&s=14983",alt:""})}),"\n",(0,s.jsx)(e.p,{children:"现在再从 HTTP 发包模拟器"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e6931784b422?w=795&h=583&f=png&s=25718",alt:""})}),"\n",(0,s.jsx)(e.p,{children:"此时看到返回的 JSON 消息已成功。"}),"\n",(0,s.jsx)(e.p,{children:"再次查看服务器端，此时控制台打印的 log 提示 HTTP 200，表示该条 URL 请求已正确处理并返回。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e695cfc9bfd8?w=987&h=153&f=png&s=19756",alt:""})}),"\n",(0,s.jsxs)(e.p,{children:["假如此时 HTTP 发包模拟器入参少了 ",(0,s.jsx)(e.code,{children:"code"})," 参数，将提示错误信息。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/7/1629e697a5a92e2d?w=683&h=582&f=png&s=25059",alt:""})}),"\n",(0,s.jsx)(e.p,{children:"至此，我们第一次客户端与服务器端的数据请求及回复已讲解完毕。完成后的目录结构及文件如下。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://user-gold-cdn.xitu.io/2018/4/22/162ea8b6d4f5c4c6?w=818&h=520&f=png&s=59180",alt:""})}),"\n",(0,s.jsxs)(e.h2,{id:"代码下载",children:["代码下载",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码下载",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["到目前为止，服务器端代码如下：",(0,s.jsx)(e.br,{}),"\n",(0,s.jsx)(e.a,{href:"https://github.com/Jawish185/demo6.git",target:"_blank",rel:"noopener noreferrer",children:"demo6"})]}),"\n",(0,s.jsxs)(e.h2,{id:"小结",children:["小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"本小节讲解了客户端与服务器端的第一次数据请求及回复。代码比较简单，重点在于理解其中的 URL 路由转发，以达到触类旁通的效果。代码还有很多待完善的地方，如增加 log 管理，进一步抽象类和方法等。下一小节，我们将为代码加入 log 管理。"})]})}function o(){let r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),r.components);return e?(0,s.jsx)(e,{...r,children:(0,s.jsx)(d,{...r})}):d(r)}let t=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E5%9F%BA%E4%BA%8E%20Python%20%E8%BD%BB%E6%9D%BE%E8%87%AA%E5%BB%BA%20App%20%E6%9C%8D%E5%8A%A1%E5%99%A8%2F5%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%201%EF%BC%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E6%94%B6%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF.md"]={toc:[{text:"客户端模拟",id:"客户端模拟",depth:2},{text:"服务器端处理",id:"服务器端处理",depth:2},{text:"调用逻辑",id:"调用逻辑",depth:3},{text:"编写服务器端入口函数",id:"编写服务器端入口函数",depth:3},{text:"编写路由转发",id:"编写路由转发",depth:3},{text:"代码下载",id:"代码下载",depth:2},{text:"小结",id:"小结",depth:2}],title:"5第一次数据请求 1：服务器接收用户注册信息",headingTitle:"5第一次数据请求 1：服务器接收用户注册信息",frontmatter:{}}}}]);