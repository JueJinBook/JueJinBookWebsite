"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["44222"],{338909:function(e,n,r){r.r(n),r.d(n,{default:()=>W});var s=r(552676),c=r(740453);let l=r.p+"static/image/dcaf8dbaa36ea9ca32f781e8f0ba2bc9.4c51f63b.gif",i=r.p+"static/image/20c4c951483f133d69cb99992efa08d3.002e4508.webp",a=r.p+"static/image/f1a8dcfca4f86102d09958ecb9f6ea5c.86d1f960.webp",d=r.p+"static/image/a1b2f4761e7862c63a0a22a7a0843c6e.0a4918df.gif",t=r.p+"static/image/bc4bdb3d3c053ee5f4279553adda4bcc.a87e295e.webp",o=r.p+"static/image/453deebf6f04c018ec0a33bb0c39cfeb.2a899981.gif",h=r.p+"static/image/c405074c11c43348aa5a55c3277f7a54.40f3575e.webp",x=r.p+"static/image/cd8d08fd3636d626e6e3522182821f8c.5e182073.webp",p=r.p+"static/image/f3c3b4f6bc2224bac8eed3d1b201dd06.716e5135.webp",j=r.p+"static/image/db88cf03c1b8a82703f19dc85ee5f284.479d07c5.gif",f=r.p+"static/image/5376482749c24ff115aad4c947aa2522.cdbebbed.gif",g=r.p+"static/image/835bfc5202cc5f9885658d43fe95ccaf.ac52339a.webp",b=r.p+"static/image/7fd36b56b5b462988f97d8ca93ec56db.47faf28b.webp",u=r.p+"static/image/293ceed5ccb41716842a57d9652ad3ca.6d1d14da.webp",m=r.p+"static/image/dfb7757fff8a4570cbf8f635136d8ab6.85201b58.gif",v=r.p+"static/image/b75b612e22c47f154834bf8c300b92f6.ad0a4ca5.gif",k=r.p+"static/image/2167dd2c5f4028ce5915fa929821e763.ad839c1f.gif",S=r.p+"static/image/0f88695c28f90a8e53983fb2168b66f2.caae89ca.gif",y=r.p+"static/image/f807b5a0b132b535d1486c9e5068d1ff.20e57a43.gif",D=r.p+"static/image/5ccdac544f51f4a7274424d0b048724d.5f033f9e.gif",w=r.p+"static/image/612deb78631c95d6e846222899c80054.09b0c25f.webp",G=r.p+"static/image/b1247a6d1bd6ce860205bfb4484dbe02.d7686e14.gif",V=r.p+"static/image/65b145d6e2011cbe3f6ba0c434db317f.dca89c6e.webp",_=r.p+"static/image/5d30738afcfb64c7a7935ca7520393b8.20a09d54.gif",Y=r.p+"static/image/587cf0ee4360983e0cd7329f44af3427.c97f0a41.webp",C=r.p+"static/image/1bfa1a43a2595cabd6c6e467d322d7a3.feebe1f3.gif",z=r.p+"static/image/7200264a707f37d5bc5cc6f6449f32bf.6e672fae.webp",N=r.p+"static/image/90161b9516be3d1c4f0a160701ed5862.e812eba3.webp";function L(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",h2:"h2",ul:"ul",li:"li",code:"code",h3:"h3",blockquote:"blockquote",strong:"strong",pre:"pre"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"48-高级篇svg-与-3d-效果",children:["48-高级篇：SVG 与 3D 效果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#48-高级篇svg-与-3d-效果",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在当今 Web 设计中，3D 效果已经成为无处不在的重要元素。从网站的视觉吸引力到用户体验的提升，3D 技术为我们开辟了全新的创作领域。SVG 作为一种强大的工具崭露头角，将可伸缩性和灵活性与三维形象的美学魅力完美融合。这节课，我们将探讨如何利用 SVG 技术实现令人惊叹的 3D 效果，让你的 Web 页面不再仅限于平面，而是展现出真正的深度和交互性。"}),"\n",(0,s.jsxs)(n.h2,{id:"svg-创建-3d-效果的技巧",children:["SVG 创建 3D 效果的技巧",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-创建-3d-效果的技巧",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在 Web 开发过程中，有多种不同的方式为 Web 元素添加 3D 视觉效果和交互效果。这些技术涵盖了 CSS、JavaScript、WebGL 以及 SVG 等不同领域："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"CSS 提供了强大的 3D 变换和动画功能，可以用来创建 3D 效果"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"JavaScript 结合 WebGL 可以创建复杂的 3D 图形和动画"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["HTML5 的 ",(0,s.jsx)(n.code,{children:"<canvas>"})," 元素与 JavaScript 结合，可以实现复杂的 3D 绘图和动画"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"当然，SVG 作为一种强大的工具，也能够帮助我们创建令人惊叹的 3D 效果。如果你能掌握 SVG 创建 3D 效果的一些技巧，将使你在开发过程中达到事半功倍的效果。以下是一些利用 SVG 创建 3D 效果的技巧。"}),"\n",(0,s.jsxs)(n.h3,{id:"拥抱-z-轴通往-3d-的大门",children:["拥抱 Z 轴：通往 3D 的大门",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#拥抱-z-轴通往-3d-的大门",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:z,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["传统上，SVG 局限于 ",(0,s.jsx)(n.code,{children:"x"})," 轴和 ",(0,s.jsx)(n.code,{children:"y"})," 轴，但当我们引入 ",(0,s.jsx)(n.code,{children:"z"})," 轴时，SVG 将焕发新生命，为 SVG 图形增添了深度。要实现这一点，需要结合 SVG 属性和 CSS 变换，从而模拟三维空间。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/marianab/full/KKKYdxE",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/marianab/full/KKKYdxE"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/marianab/full/KKKYdxE",target:"_blank",rel:"noopener noreferrer",children:"@Mariana Beldi"}),"）"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"我们可以应用 CSS 3D 变换和透视相关特性，将 SVG 图形放置三维空间中："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rotate3d"})," ：围绕着 ",(0,s.jsx)(n.code,{children:"x"})," 、",(0,s.jsx)(n.code,{children:"y"})," 或 ",(0,s.jsx)(n.code,{children:"z"})," 轴旋转 SVG 元素，增加旋转和深度感"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"translate3d"})," ：沿着 ",(0,s.jsx)(n.code,{children:"z"})," 轴移动元素，使其靠近或远离观察者"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"scale3d"})," ：在三维空间中调整元素大小，增强深度幻觉，图形放大或缩小"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"perspective"}),"：将透视属性（",(0,s.jsx)(n.code,{children:"perspective"}),"）应用于 SVG 容器，影响深度的感知，使 3D 效果更加明显和真实"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"注意，到目前为止，SVG 元素只具备 2D 变换属性。庆幸的是，当 SVG 内联在 HTML 中时，CSS 变换属性（包括 2D 和 3D 变换）以及透视相关属性都可以应用于 SVG 元素上。这意味着，我们可以使用 CSS 变换属性使 SVG 具有 3D 效果。稍后，我们会与大家更深入的探讨这方面的知识。"}),"\n",(0,s.jsxs)(n.h3,{id:"光照和阴影打造逼真效果",children:["光照和阴影：打造逼真效果",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#光照和阴影打造逼真效果",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:Y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"Web 上的 3D 效果大多依赖于光照和阴影，为大脑提供有关物体形状和深度的线索。它们同样适用于 SVG 中的 3D 效果。与 CSS 相比，在 SVG 中创建阴影和模拟光源要容易得多，而且效果更佳。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["投射阴影：利用 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318391733452850#heading-4",target:"_blank",rel:"noopener noreferrer",children:"SVG 滤镜基元"}),"添加投射阴影，营造物体脱离页面的效果"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["渐变阴影：应用渐变填充模拟环境光效果，柔化边缘并增加体积感。",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7354948936039137289",target:"_blank",rel:"noopener noreferrer",children:"径向渐变和线性渐变"}),"，代表着光源及其对物体的阴影，展示光线如何在表面上淡化"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318391733452850#heading-1",target:"_blank",rel:"noopener noreferrer",children:"高斯模糊"}),"：柔化阴影和光效果，使其更加自然"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["除此之外，",(0,s.jsxs)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318391733452850#heading-6",target:"_blank",rel:"noopener noreferrer",children:["还可以使用 ",(0,s.jsx)(n.code,{children:"<feSpecularLighting>"})," 和（或）",(0,s.jsx)(n.code,{children:"<feDiffuseLighting>"})," 滤镜基元"]}),"来应用光照效果，使阴影和光照效果更自然。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/chrisgannon/full/RwWVJWd",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/chrisgannon/full/RwWVJWd"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/chrisgannon/full/RwWVJWd",target:"_blank",rel:"noopener noreferrer",children:"@Chris Gannon"})," ）"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"渐变魔法幻觉艺术之道",children:["渐变魔法：幻觉艺术之道",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#渐变魔法幻觉艺术之道",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:V,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"渐变在 3D 效果中至关重要，提供了一种简单而有效的方法来暗示形态和光线方向。"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"线性和径向渐变：使用渐变来指示曲率和形态，颜色从浅到深过渡，模拟光线打击和包裹物体的效果；径向渐变可以暗示圆润的表面，增强 3D 效果"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"多段渐变：应用多段渐变来处理复杂表面，无缝融合多种颜色，模仿光影的细微变化"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:G,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/chrisgannon/full/ZaPmKp",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/chrisgannon/full/ZaPmKp"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/chrisgannon/full/ZaPmKp",target:"_blank",rel:"noopener noreferrer",children:"@Chris Gannon"})," ）"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"结合元素创建复杂形状",children:["结合元素创建复杂形状",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结合元素创建复杂形状",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"创建复杂的3D形状涉及到策略性地组合简单的形状，层层叠加并进行变换，以构建所需的形态。例如，从矩形、圆形和多边形等基本形状开始，利用变换在 3D 空间中对齐和堆叠它们。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:D,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/noahblon/full/mRvOzq",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/noahblon/full/mRvOzq"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/noahblon/full/mRvOzq",target:"_blank",rel:"noopener noreferrer",children:"@Noah Blon"})," ）"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["还可以使用",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7362748816769941540",target:"_blank",rel:"noopener noreferrer",children:"剪切"}),"（",(0,s.jsx)(n.code,{children:"<cipPath>"}),"）和",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7366549423813296165",target:"_blank",rel:"noopener noreferrer",children:"遮罩"}),"（",(0,s.jsx)(n.code,{children:"<mask>"}),"）来隐藏形状的部分，精细化边缘并创建复杂的细节，以增强整体的 3D 效果。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/chrisgannon/full/dROyLa",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/chrisgannon/full/dROyLa"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/chrisgannon/full/dROyLa",target:"_blank",rel:"noopener noreferrer",children:"@Chris Gannon"})," ）"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"动画赋予-3d-svg-生命",children:["动画：赋予 3D SVG 生命",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动画赋予-3d-svg-生命",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["通过复杂的 SVG 动画，将动态运动融入 3D 效果中，显著增强真实感。例如，",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318500093296667",target:"_blank",rel:"noopener noreferrer",children:"通过动画变换来旋转、平移和缩放 SVG 元素"}),"，在三维空间中模拟运动。",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7288940354408022074/section/7295617447058407474",target:"_blank",rel:"noopener noreferrer",children:"还可以结合 @keyframes 实现复杂的多阶段动画"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/ponycorn/full/ExLMpoV",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/ponycorn/full/ExLMpoV"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/ponycorn/full/ExLMpoV",target:"_blank",rel:"noopener noreferrer",children:"@Ponycorn"})," ）"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368318583098572810",target:"_blank",rel:"noopener noreferrer",children:"你还可以利用 JavaScript 响应用户交互"}),"，如鼠标移动或点击，实时调整变换，以实现交互式的 3D 效果。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/enxaneta/full/yNpoyw",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/enxaneta/full/yNpoyw"})," （来源于 ",(0,s.jsx)(n.a,{href:"https://codepen.io/enxaneta/full/yNpoyw",target:"_blank",rel:"noopener noreferrer",children:"@Gabi"})," ）"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["你也可以将 ",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7368317620015071282",target:"_blank",rel:"noopener noreferrer",children:"SVG 的图形数据与 WebGL 结合"}),"在一起构建更复杂的 3D 效果："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/NWVrVPR",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/NWVrVPR"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这些技巧，特别是应用于创建交互式 SVG 时，打开了广阔的创作领域，使 Web 开发者能够打造不仅视觉上令人惊叹，而且富有吸引力的体验。"}),"\n",(0,s.jsxs)(n.h2,{id:"svg-中的-3d-变换",children:["SVG 中的 3D 变换",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#svg-中的-3d-变换",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["我曾在《",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7341630791099383835/section/7356918561740161036",target:"_blank",rel:"noopener noreferrer",children:"SVG 的变换属性"}),"》课程中提到过，到目前为止，SVG 自身的变换属性仅支持 2D 变换。庆幸的是，CSS 变换模块包含 3D 变换函数。它们允许你在三维空间中对 SVG 图形进行操作，例如在三维空间中移动 SVG 元素。接下来，我们来一起探讨 CSS 的 3D 变换与 SVG 结合能做些什么？"]}),"\n",(0,s.jsx)(n.p,{children:"一个三维变换由两个步骤组成："}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["1️⃣ ",(0,s.jsx)(n.strong,{children:"变换函数"}),"：这些函数用于在理论的三维空间中操作绘制图形的平面。具体来说，这些变换函数通过改变图形的位置、大小和旋转角度来实现三维空间中的各种变换。例如，",(0,s.jsx)(n.code,{children:"rotate3d"})," 可以围绕 ",(0,s.jsx)(n.code,{children:"x"})," 、",(0,s.jsx)(n.code,{children:"y"})," 或 ",(0,s.jsx)(n.code,{children:"z"})," 轴旋转图形，",(0,s.jsx)(n.code,{children:"translate3d"})," 可以沿着 ",(0,s.jsx)(n.code,{children:"z"})," 轴称动图形，",(0,s.jsx)(n.code,{children:"scale3d"})," 可以在三维空间缩放图形"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["2️⃣ ",(0,s.jsx)(n.strong,{children:"透视效果"}),"：这些效果将变换后的三维图形转换为一个可以绘制在计算机屏幕上的平面表示。透视效果通过模拟人眼的视觉感知来创建深度感。具体来说，当你为容器应用透视（",(0,s.jsx)(n.code,{children:"perspective"}),"）属性时，离视点较近的对象看起来较大，而离视点较远的对象看起来较小。这种效果使二维的图形具有三维空间的深度感，使其看起来更加逼真"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["变换函数是基于 2D 变换的扩展，应用于 3D 坐标系。换句话说，2D 变换（如平移、旋转和缩放）通常只涉及 ",(0,s.jsx)(n.code,{children:"x"})," 和 ",(0,s.jsx)(n.code,{children:"y"})," 轴。这些变换在三维空间中得到了扩展，添加了 ",(0,s.jsx)(n.code,{children:"z"})," 轴。例如，二维中的 ",(0,s.jsx)(n.code,{children:"translate"})," 变换只移动 ",(0,s.jsx)(n.code,{children:"x"})," 和 ",(0,s.jsx)(n.code,{children:"y"})," 方向，而在三维中，",(0,s.jsx)(n.code,{children:"translate3d"})," 变换会在 ",(0,s.jsx)(n.code,{children:"x"})," 、",(0,s.jsx)(n.code,{children:"y"})," 和 ",(0,s.jsx)(n.code,{children:"z"})," 方向上移动。"]}),"\n",(0,s.jsxs)(n.p,{children:["三维空间中的 ",(0,s.jsx)(n.code,{children:"z"})," 轴，最初指指向屏幕外的观察者。因此，正 ",(0,s.jsx)(n.code,{children:"z"})," 坐标表示物体位于屏幕“前面”，即更接近观察者；负 ",(0,s.jsx)(n.code,{children:"z"})," 坐标表示物体位于屏幕“后面”，即远离观察者："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这种设置允许你在三维空间中操纵图形的位置和深度。"}),"\n",(0,s.jsxs)(n.p,{children:["考虑到 SVG 中的 ",(0,s.jsx)(n.code,{children:"x"})," 轴通常从左到右，",(0,s.jsx)(n.code,{children:"y"})," 轴从上到下。在添加 ",(0,s.jsx)(n.code,{children:"z"})," 轴后，这形成了一个左手坐标系："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["在左手坐标系中，如果你的左手握拳，大拇指指向 ",(0,s.jsx)(n.code,{children:"z"})," 轴正方向（屏幕前），食指指向 ",(0,s.jsx)(n.code,{children:"x"})," 轴正方向（右），中指指向 ",(0,s.jsx)(n.code,{children:"y"})," 轴正方向（下），这就是左手坐标系的定义。"]}),"\n",(0,s.jsxs)(n.p,{children:["理解你在一个左手坐标系中工作可以帮助你在扭曲和旋转坐标直到 ",(0,s.jsx)(n.code,{children:"x"})," 轴和 ",(0,s.jsx)(n.code,{children:"y"})," 轴不再接近垂直和水平时保持方向感。通过理解和使用左手规则，你可以在复杂的三维空间变换中保持对坐标方向的准确把握，避免在旋转和扭曲后迷失方向。"]}),"\n",(0,s.jsxs)(n.p,{children:["通常情况下，你的图形最初都是在 ",(0,s.jsx)(n.code,{children:"x"})," 轴和 ",(0,s.jsx)(n.code,{children:"y"})," 轴构成的平面上绘制，",(0,s.jsx)(n.code,{children:"z"})," 坐标为 ",(0,s.jsx)(n.code,{children:"0"})," 。然而，通过 CSS 3D 变换函数可以在 3D 坐标空间中移动该平面的位置："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"translate3d(tx, ty, tz)"}),"：沿每个轴按给定长度平移它"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"translateZ(tz)"}),"：类似于 ",(0,s.jsx)(n.code,{children:"translateX"})," 和 ",(0,s.jsx)(n.code,{children:"translateY"})," 函数，这个简写允许你仅指定沿 ",(0,s.jsx)(n.code,{children:"z"})," 轴的平移"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"scale3d(sx, sy, sz)"}),"：按指定因子改变所有维度的缩放比例"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"scaleZ(sz)"}),"：仅改变 ",(0,s.jsx)(n.code,{children:"z"})," 轴缩放比例（类似于 ",(0,s.jsx)(n.code,{children:"scaleX"})," 和 ",(0,s.jsx)(n.code,{children:"scaleY"})," 函数）"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rotateX(a)"}),"：使用 ",(0,s.jsx)(n.code,{children:"x"})," 轴作为旋转轴，并按指定角度（",(0,s.jsx)(n.code,{children:"a"}),"）旋转坐标系；",(0,s.jsx)(n.code,{children:"x"})," 坐标不会改变，但 ",(0,s.jsx)(n.code,{children:"y"})," 和 ",(0,s.jsx)(n.code,{children:"z"})," 坐标会改变"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rotateY(a)"}),"：使用 ",(0,s.jsx)(n.code,{children:"y"})," 轴作为旋转轴，并按指定角度（",(0,s.jsx)(n.code,{children:"a"}),"）旋转坐标系；",(0,s.jsx)(n.code,{children:"y"})," 坐标不会改变，但 ",(0,s.jsx)(n.code,{children:"x"})," 和 ",(0,s.jsx)(n.code,{children:"z"})," 坐标会改变"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rotateZ(a)"}),"：使用 ",(0,s.jsx)(n.code,{children:"z"})," 轴作为旋转轴，并按指定角度（",(0,s.jsx)(n.code,{children:"a"}),"）旋转坐标系；这对坐标的影响与2D旋转函数相同，但它强制使用3D绘图方法"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rotate3d(vx, vy, vz, a)"}),"：使用从原点到点 ",(0,s.jsx)(n.code,{children:"(vx, vy, vz)"}),"的向量（直线）创建一个旋转轴，并围绕它按角度 ",(0,s.jsx)(n.code,{children:"a"})," 旋转坐标系"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["注意，这些规则仅适用于 CSS 的变换属性 ",(0,s.jsx)(n.code,{children:"transform"})," ，但不适用于 SVG 的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性。另外，角度和和长度必须包含单位。其中 ",(0,s.jsx)(n.code,{children:"z"})," 轴的值不能是百分比值，这是因为所有 SVG 和 CSS 参考框都是 2D 的，所以没有参考值来定义 ",(0,s.jsx)(n.code,{children:"z"})," 轴上的百分比值。"]}),"\n",(0,s.jsx)(n.p,{children:"也就是说，通过 3D 变换函数你可以将图形从 2D 世界带入到 3D 世界，那么问题来了，3D 空间的图形在二维的屏幕上应该如何显示呢？毕竟，大多数人并未使用全息显示器（Holographic Display）！"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"浏览器使用附加的投影计算，根据从某个点（三维空间中的视角）看到的方式来变换不同部分。最终图像受用于此“视角”的点的影响很大。"}),"\n",(0,s.jsx)(n.p,{children:"你可以这样想，如果你把一个盒子举在你面前，让你正对着其中一面看，你完全看不到其他几面。如果你把视角移到一侧，上下移动，那么你可以看到多个面。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"你所看到的还取决于你离它有多远。把盒子靠近你的脸，离你眼睛最近的一端将占据你视野的较大部分，而较远的一端则会显得较小。将整个盒子移远一些，近端和远端的表观大小差异就会减小。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/RwmERbo",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/RwmERbo"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"需要知道的是，在二维 SVG 中使用的仿射变换是无法使形状的一端比另一端缩小。"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Affine_transformation",target:"_blank",rel:"noopener noreferrer",children:"仿射变换"}),"（Affine Transformation）是一种线性变换，用于二维或三维空间中的图形操作。这种变换保留了图形的“平直性”和“平行性”，即直线仍然是直线，平行线仍然是平行线。常见的仿射变换包括平移、旋转、缩放和斜切。"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"在实现世界中，只有当你通过望远镜或高倍变焦相机观察时，才能获得没有深度透视的角度透视：在这种情况下，你距离物体非常远，以至于其深度无关紧要。"}),"\n",(0,s.jsxs)(n.p,{children:["默认情况下，CSS 3D 变换的效果就类似于从无限远的地方看盒子，但放大了图像。然而，通过使 ",(0,s.jsx)(n.code,{children:"perspective"})," 属性，可以控制计算平面图像的理论“视点”。"]}),"\n",(0,s.jsx)(n.p,{children:"我们先来看一个简单的示例，使用 2D 变换来构建一个类似 3D 盒子的效果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="container">\n    <div class="box">\n        <div class="face face--back" style="--color: hsl(90 50% 50% / .65);"></div>\n        <div class="face face--left" style="--color: hsl(180 50% 50% / .65);"></div>\n        <div class="face face--front" style="--color: hsl(270 50% 50% / .65);"></div>\n        <div class="face face--right" style="--color: hsl(360 50% 50% / .65);"></div>\n    </div>\n</div>\n\n<svg class="container">\n    <g class="box">\n        <rect class="face face--back" style="--color: hsl(90 50% 50% / .65);"></rect>\n        <rect class="face face--left" style="--color: hsl(180 50% 50% / .65);"></rect>\n        <rect class="face face--front" style="--color: hsl(270 50% 50% / .65);"></rect>\n        <rect class="face face--right" style="--color: hsl(360 50% 50% / .65);"></rect>\n    </g>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".face--back {\n    transform: translate(50px, -25px);\n}\nrect.face--back {\n    transform: translate(50px, -50px);\n}\n\n.face--left {\n    transform: skewy(-45deg);\n}\n\n.face--front {\n    transform: translate(0px, 25px);\n}\nrect.face--front {\n    transform: translate(0px, 0px);\n}\n\n.face--right {\n    transform: translate(250px, 0) skewY(-45deg);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"上面代码中，盒子的各个页通过 CSS 2D 变换的斜切和位移变换进行定位，使整个图形看上去是一个长方体，一个没有顶部和底部的 3D 盒子："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/wvbZyJZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/wvbZyJZ"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这个结果并不意外，因为 SVG 元素与 HTML 元素一样，应用 2D 变换能很好的工作。"}),"\n",(0,s.jsxs)(n.p,{children:["当然，在某些场景应用 2D 变换也能使你构建出类似 3D 的效果，而且在此基础上结合其他 SVG 的特性，例如 ",(0,s.jsx)(n.code,{children:"<use>"})," ，我们可以重复利用 2D 变换构建的盒子，创建出更复杂的 3D 视觉效果。例如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-130 -20 300 100">\n    <g id="cube">\n        <rect width="21" height="24" transform="skewY(30)"/>\n        <rect width="21" height="24" transform="skewY(-30) translate(21 24.3)"/>\n        <rect width="21" height="21"  transform="scale(1.41,.81) rotate(45) translate(0 -21)"/>\n    </g>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"rect {\n    fill: #2196f3;\n    stroke: #03a9f4;\n    fill-opacity: 0.9;\n    stroke-miterlimit: 0;\n    stroke-width: 0.5;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"使用上面的代码，我们可以构建出类似下图这样的 3D 盒子："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["我们把上面代码中的 ",(0,s.jsx)(n.code,{children:"<g>"})," 放到 ",(0,s.jsx)(n.code,{children:"<defs>"})," 中，并且通过 ",(0,s.jsx)(n.code,{children:"<use>"})," 来重复引用 ",(0,s.jsx)(n.code,{children:"#cube"})," ，并在每个 ",(0,s.jsx)(n.code,{children:"<use>"})," 上调整其 ",(0,s.jsx)(n.code,{children:"x"})," 和 ",(0,s.jsx)(n.code,{children:"y"})," 的坐标："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="-15 75 300 100" class="box">\n    <defs>\n        <g id="cube">\n            <rect width="21" height="24" transform="skewY(30)"/>\n            <rect width="21" height="24" transform="skewY(-30) translate(21 24.3)"/>\n            <rect width="21" height="21"  transform="scale(1.41,.81) rotate(45) translate(0 -21)"/>\n        </g>\n    </defs>\n    <use href="#cube" x="121" y="112"/>\n    <use href="#cube" x="100" y="124"/>\n    <use href="#cube" x="142" y="124"/>\n    <use href="#cube" x="121" y="136"/>\n    <use href="#cube" x="79" y="136"/>\n    <use href="#cube" x="163" y="136"/>\n    <use href="#cube" x="142" y="148"/>\n    <use href="#cube" x="100" y="148"/>\n    <use href="#cube" x="121" y="160"/>\n    <use href="#cube" x="121" y="88"/>\n    <use href="#cube" x="100" y="100"/>\n    <use href="#cube" x="142" y="100"/>\n    <use href="#cube" x="121" y="112"/>\n    <use href="#cube" x="79" y="112"/>\n    <use href="#cube" x="163" y="112"/>\n    <use href="#cube" x="142" y="124"/>\n    <use href="#cube" x="100" y="124"/>\n    <use href="#cube" x="121" y="136"/>\n    <use href="#cube" x="121" y="64"/>\n    <use href="#cube" x="100" y="76"/>\n    <use href="#cube" x="142" y="76"/>\n    <use href="#cube" x="121" y="88"/>\n    <use href="#cube" x="79" y="88"/>\n    <use href="#cube" x="163" y="88"/>\n    <use href="#cube" x="142" y="100"/>\n    <use href="#cube" x="100" y="100"/>\n    <use href="#cube" x="121" y="112"/>\n</svg>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"在这一点上，它比 HTML 更具优势，你可以想象一下，上图这个效果，如果使用 HTML 元素来替换 SVG 元素，你需要额外增加多少个空元素。"}),"\n",(0,s.jsxs)(n.p,{children:["我们还可以使用 ",(0,s.jsx)(n.code,{children:"@keyframes"})," 给上面的 3D 盒子添加动画效果，使整个 3D 效果更生动："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@keyframes moveX {\n    to { \n        transform: translateX(var(--translate, 35px)); \n    }\n}\n\n@keyframes moveY {\n    to { \n        transform: translateY(var(--translate, -35px)); \n    }\n}\n\n.m-left, .m-right { \n    animation: 2s moveX alternate infinite paused; \n}\n.m-up, .m-down { \n    animation: 2s moveY alternate infinite paused; \n}\n.m-left { \n    --translate: -50px; \n}\n.m-right { \n    --translate: 50px; \n}\n.m-up { \n    --translate: -35px; \n}  \n.m-down { \n    --translate: 35px; \n}  \n\n.box:hover * { \n    animation-play-state: running; \n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/YzbMeYj",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/YzbMeYj"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们再把焦点回到 3D 变换中来。这次我们将盒子的各个面通过 3D 变换来定位。盒子的背面（",(0,s.jsx)(n.code,{children:".face--back"}),"）将沿着 ",(0,s.jsx)(n.code,{children:"z"})," 轴平移，以便将其定位在前面（",(0,s.jsx)(n.code,{children:".face--front"}),"）的后面，而侧面将围绕着 ",(0,s.jsx)(n.code,{children:"y"})," 轴旋转 ",(0,s.jsx)(n.code,{children:"90"})," 度："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg width="400" height="300" viewBox="0 0 40 30" class="container">\n    <g class="box">\n        <rect class="face face--back" width="25" height="15" fill="hsl(90 50% 50% / .65)" />\n        <rect class="face face--left" width="10" height="15" fill="hsl(180 50% 50% / .65)" />\n        <rect class="face face--front" width="25" height="15" fill="hsl(270 50% 50% / .65)" />\n        <rect class="face face--right" width="10" height="15" fill="hsl(360 50% 50% / .65)" />\n    </g>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".box {\n    transform-style: preserve-3d; \n    transform: translate(5px,10px) rotate3d(1,1,0,-30deg)\n}\n\n.face--back {\n    transform: translateZ(-10px);\n}\n\n.face--left {\n    transform: rotateY(90deg);\n}\n\n.face--right {\n    transform: translate(25px,0) rotateY(90deg);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/GRaLdwQ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/GRaLdwQ"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["正如你所看到的，我们只能看到前面（",(0,s.jsx)(n.code,{children:".face--front"}),"）。为了能看到盒子的侧面和背面，我们需要在 3D 空间中稍微旋转整个对象，将开口的顶部和一侧向观察者倾斜。逻辑上，我们对 ",(0,s.jsx)(n.code,{children:"<g>"})," 元素进行旋转，就可以旋转整个对象，但实际上，即便我们这样做了，也未能达到预期的效果。"]}),"\n",(0,s.jsxs)(n.p,{children:["这是因为，在默认情况下，浏览器会分别计算每个经过 3D 变换的元素的二维表示，即逐个将它们“压平”。每个形状在其父元素的变换计算之前都会重新绘制在主平面上。对于构建盒子来说，这种方式行不通：由于盒子的侧面从主图形平面旋转了 ",(0,s.jsx)(n.code,{children:"90"})," 度，在被压平时，它们会变得不可见。盒子的背面在压平时完全被前面遮挡。即使尝试对整个变形后的集合进行旋转，得到的也只是倾斜的二维矩形，无法体现出应有的立体深度，这就是为何三维盒子未能显现，仅呈现出单一平面矩形的关键原因之一。"]}),"\n",(0,s.jsxs)(n.p,{children:["值得注意的是，尽管我们在 ",(0,s.jsx)(n.code,{children:".box"})," 元素上显式设置了 ",(0,s.jsx)(n.code,{children:"transform-style"})," 的值为 ",(0,s.jsx)(n.code,{children:"preserve-3d"})," ，但在 SVG 环境中，并没有使元素保留三维性。主要原因是，现代 Web 浏览器仍无法完全支持 SVG 与 ",(0,s.jsx)(n.code,{children:"preserve-3d"})," 属性的无缝协同工作，这意味着 SVG 元素尚不具备原生的三维空间表现能力。"]}),"\n",(0,s.jsx)(n.p,{children:"也就是说，我们不能以熟悉的 CSS 3D 变换思维在 SVG 中应用 3D 变换。"}),"\n",(0,s.jsxs)(n.p,{children:["如果需要，你可以通过变换 HTML 元素框而不是 SVG 元素来减少（但不能消除）浏览器支持问题。你可以在每个 ",(0,s.jsx)(n.code,{children:"<svg>"})," 元素中绘制每个 SVG 形状，每个元素绝对定位以填充 ",(0,s.jsx)(n.code,{children:"<div>"})," 容器，并变换 ",(0,s.jsx)(n.code,{children:"<svg>"})," 元素而不是形状。例如下面这个示例："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTML",children:'<div class="main">        \n    <div class="cont">\n        <div class="cube cube--front">\n            <svg style="--fill: hsl(60 50% 50% / .65)">\n                <use href="#logo" />\n            </svg>\n        </div>\n        <div class="cube cube--back">\n            <svg style="--fill: hsl(120 50% 50% / .85)">\n                <use href="#logo" />\n            </svg>\n        </div>\n        <div class="cube cube--top">\n            <svg style="--fill: hsl(180 50% 50% / .85)">\n                <use href="#logo" />\n            </svg>\n        </div>\n         <div class="cube cube--bottom">\n            <svg style="--fill: hsl(240 50% 50% / .65)">\n                <use href="#logo" />\n            </svg>\n        </div>\n        <div class="cube cube--left">\n            <svg style="--fill: hsl(300 50% 50% / .85)">\n                <use href="#logo" />\n            </svg>\n        </div>\n        <div class="cube cube--right">\n            <svg style="--fill: hsl(360 50% 50% / .85)">\n                <use href="#logo" />\n            </svg>\n        </div>\n    </div>\n</div>\n'})}),"\n",(0,s.jsx)(n.p,{children:"注意，上面示例中的每一面都应用了同一个 SVG图形："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="sr-only">\n    <symbol id="logo" viewBox="0 0 500 500">\n        <g>\n            <polygon  points="214.3,500 0,500 0,285.7 71.4,285.7 71.4,428.6 142.9,428.6 142.9,285.7 214.3,285.7 "/>\n            <polygon  points="214.3,214.3 142.9,214.3 142.9,71.4 71.4,71.4 71.4,214.3 0,214.3 0,0 214.3,0 "/>\n            <rect x="285.7" y="428.6" width="214.3" height="71.4"/>\n            <polygon  points="500,357.1 285.7,357.1 285.7,285.7 428.6,285.7 428.6,214.3 285.7,214.3 285.7,142.9 500,142.9 "/>\n            <rect x="285.7"  width="214.3" height="71.4"/>\n        </g>\n    </symbol>\n</svg>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["然在每个面 ",(0,s.jsx)(n.code,{children:".cube"})," 应用 3D 变换："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .main {\n        perspective: 1000px;\n        width: 250px;\n        aspect-ratio: 1;\n    }\n\n    .cont {\n        position: relative;\n        width: 100%;\n        height: 100%;\n        transform-style: preserve-3d;\n        transform: rotateX(-15deg) rotateY(15deg);\n        animation: rotateCube 7s infinite linear;\n    }\n\n    .cube {\n        position: absolute;\n        opacity: 0.85;\n        width: 250px;\n        aspect-ratio: 1;\n        background-color: #000;\n        \n        svg {\n            display: block;\n            width: 100%;\n            height: 100%;\n            fill: var(--fill);\n        }\n    }\n\n    .cube--front {\n        transform: translate3d(0, 0, 125px);\n    }\n\n    .cube--back {\n        transform: rotateY(180deg) translate3d(0, 0, 125px);\n    }\n\n    .cube--top {\n        transform: rotateX(90deg) translate3d(0, 0, 125px);\n    }\n\n    .cube--bottom {\n        transform: rotateX(-90deg) translate3d(0, 0, 125px);\n    }\n\n    .cube--left {\n        transform: rotateY(-90deg) translate3d(0, 0, 125px);\n    }\n\n    .cube--right {\n        transform: rotateY(90deg) translate3d(0, 0, 125px);\n    }\n\n    @keyframes rotateCube {\n        0% {\n            transform: rotateY(0deg) rotateX(0deg);\n        }\n    \n        100% {\n            transform: rotateY(-360deg) rotateX(-360deg);\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"你最终看到的效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/LYovrWO",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYovrWO"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["或者，你可以在没有 ",(0,s.jsx)(n.code,{children:"preserve-3d"})," 选项的情况下创建复杂的 3D 对象。即在每个元素上指定完整的 3D 变换序列。换句话说，删除 ",(0,s.jsx)(n.code,{children:"<g>"})," 元素的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性，并将该函数列表复制到每个矩形元素（",(0,s.jsx)(n.code,{children:"<rect>"}),"）的 ",(0,s.jsx)(n.code,{children:"transform"})," 属性的开头："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 40 30" class="transform--3d">\n    <g class="box" transform="translate(5,10)">\n        <rect transform="translate(5,-5)" width="25" height="15" fill="oklch(0.83 0.28 138.96 / .5)" stroke="oklch(0.58 0.2 139.61)" />\n        <rect transform="skewY(-45) scale(0.5,1)" width="10" height="15" fill="oklch(0.56 0.24 30.18 / .5)" stroke="oklch(0.48 0.21 30.17)" />\n        <rect width="25" height="15" fill="oklch(0.56 0.15 240.68 / .5)" stroke="oklch(0.48 0.16 250.4)" />\n        <rect transform="translate(25,0) skewY(-45) scale(0.5,1)" width="10" height="15" fill="oklch(0.79 0.19 80.72 / .5)" stroke="oklch(0.74 0.17 101.91)" />\n    </g>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:".box {\n    /* transform-style: preserve-3d; */\n    transform: translate(5px, 10px) rotate3d(1, 1, 0, -30deg);\n\n    rect {\n        stroke-width: 0.3;\n        stroke-linejoin: round;\n\n        &:nth-of-type(1) {\n            transform: rotate3d(1, 1, 0, -30deg) translateZ(-10px);\n        }\n      \n        &:nth-of-type(2) {\n            transform: rotate3d(1, 1, 0, -30deg) rotateY(90deg);\n        }\n      \n        &:nth-of-type(3) {\n            transform: rotate3d(1, 1, 0, -30deg);\n        }\n      \n        &:nth-of-type(4) {\n            transform: rotate3d(1, 1, 0, -30deg) translate(25px, 0) rotateY(90deg);\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/WNWKjXZ",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/WNWKjXZ"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"虽然这样调整之后，你可以在 SVG 画布上看到一个 3D 形状的盒子。但细看，这个盒子仍然不太正确。问题不仅在于矩形的描边导致盒子边缘的精确对齐有偏差。这也意味着透视仍然不正确。"}),"\n",(0,s.jsxs)(n.p,{children:["为了使你能在 3D 空间中有更自然的透视效果，CSS 变换定义了透视（",(0,s.jsx)(n.code,{children:"perspective"})," ）和透视原点（",(0,s.jsx)(n.code,{children:"perspective-origin"}),"）属性，用于设置三维空间中观察者的位置。这些属性定义在父元素上，为其子元素的 3D 变换创建上下文。"]}),"\n",(0,s.jsxs)(n.p,{children:["透视的不均匀缩放效果也可以通过变换函数列表中的 ",(0,s.jsx)(n.code,{children:"perspective()"})," 函数来创建，它与 ",(0,s.jsx)(n.code,{children:"perspective"})," 属性类似。父元素上的透视属性 ",(0,s.jsx)(n.code,{children:"perspective"})," 等效于在子元素的变换列表中的 ",(0,s.jsx)(n.code,{children:"perspective()"})," 函数。与 ",(0,s.jsx)(n.code,{children:"perspective-origin"})," 属性没有等效的函数。相反，类似于 ",(0,s.jsx)(n.code,{children:"transform-origin"}),"，",(0,s.jsx)(n.code,{children:"perspective-origin"})," 等效于前后平移：这次，在透视函数之前和之后应用平移。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg viewBox="0 0 400 300" class="transform--3d">\n    <g class="box" transform="translate(50,100)">\n        <rect transform="translate(50,-50)" width="250" height="150" fill="oklch(0.83 0.28 138.96 / .5)" stroke="oklch(0.58 0.2 139.61)" />\n        <rect transform="skewY(-45) scale(0.5,1)" width="100" height="150" fill="oklch(0.56 0.24 30.18 / .5)" stroke="oklch(0.48 0.21 30.17)" />\n        <rect width="250" height="150" fill="oklch(0.56 0.15 240.68 / .5)" stroke="oklch(0.48 0.16 250.4)" />\n        <rect transform="translate(250,0) skewY(-45) scale(0.5,1)" width="100" height="150" fill="oklch(0.79 0.19 80.72 / .5)" stroke="oklch(0.74 0.17 101.91)" />\n    </g>\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"rect {\n    stroke-width: 3;\n    stroke-linejoin: round;\n\n    &:nth-of-type(1) {\n        transform: translate(800px, -400px) perspective(1000px) translate(-800px, 400px) translateZ(-100px);\n    }\n    \n    &:nth-of-type(2) {\n        transform: translate(800px, -400px) perspective(1000px) translate(-800px, 400px) rotateY(90deg);\n    }\n    \n    &:nth-of-type(3) {\n        transform: translate(800px, -400px) perspective(1000px) translate(-800px, 400px);\n    }\n    \n    &:nth-of-type(4) {\n        transform: translate(800px, -400px) perspective(1000px) translate(-800px, 400px) translate(250px, 0) rotateY(90deg);\n    }\n} \n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/MWRBovM",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/MWRBovM"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"应用透视效果到 3D 变换的图形需要复杂的数学计算，包括找到交点、裁剪超出“观察者”背后的形状，并确保每个点相对于透视距离和原点正确地缩放和定位。这些计算大部分在 CSS 中没有明确定义。在使用 SVG 的 3D 变换时，务必进行全面测试，并接受不同的浏览器之间的一些差异。"}),"\n",(0,s.jsxs)(n.p,{children:["上面所展示的案例都是通过 CSS 变换来模拟出 SVG 3D 效果。除此之外，我们在使用 SVG 元素绘制出图形时，只要控制好每个点的位置，在不使用任何变换的情况之下，也能模拟出 3D 的效果。例如下面这个，使用三个 ",(0,s.jsx)(n.code,{children:"<path>"})," 元素绘制的 3D 盒子效果，就没有使用 CSS 变换："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<svg class="cube" viewBox="0 0 100 100">\n    <defs>\n        <filter id="gaussian">\n            <feGaussianBlur in="SourceGraphic" stdDeviation="3" />\n        </filter>\n        <linearGradient id="purpleGradient" x1="0%" y1="0%" x2="100%" y2="100%">\n            <stop offset="0" stop-color="#8b09e8" stop-opacity="1" />\n            <stop offset=".5" stop-color="#326be5" stop-opacity=".9" />\n            <stop offset="1" stop-color="#44b9d6" stop-opacity=".6" />\n        </linearGradient>\n    </defs>\n    <path class="shadow" d="M5,85 50,100 95,85 50,60" fill="rgb(0 0 0 /.4)" filter="url(#gaussian)" />\n    <path d="M10,20 50,5 90,20 50,35" fill="url(#purpleGradient)" />\n    <path d="M10,20 50,35 50,90 10,75" fill="url(#purpleGradient)" />\n    <path d="M50,90 50,35 90,20 90,75" fill="url(#purpleGradient)" />\n</svg>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:"@layer demo {\n    .cube {\n        display: block;\n        width: 50vmin;\n        aspect-ratio: 1;\n        overflow: visible;\n    }\n  \n    .cube path:not(.shadow) {\n        animation: float 1s infinite alternate ease-in-out;\n    }\n  \n    .shadow {\n        transform-origin: bottom;\n        animation: shadow 1s infinite alternate ease-in-out;\n    }\n\n    @keyframes float {\n        to {\n            translate: 0 8px;\n        }\n    }\n\n    @keyframes shadow {\n        to {\n            scale: 0.8;\n            fill: rgb(0 0 0 / 0.6);\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Demo 地址：",(0,s.jsx)(n.a,{href:"https://codepen.io/airen/full/LYovBVg",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/airen/full/LYovBVg"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"小结",children:["小结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"首先需要明确的一点是，到目前为止，在 SVG 中并不具备原生 3D 变换特性，但我们可以通过使用 CSS 的 3D 变换模拟出 3D SVG 效果。除此之外，可以通过其他一些技巧使 SVG 具有 3D 效果。掌握这些技巧，可以极大地丰富 Web 的视觉效果和交互体验。通过正确应用这些技术，Web 开发者能够创造出具有深度和真实感的三维图形，提升 Web 设计的层次与吸引力。"})]})}function M(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(L,{...e})}):L(e)}let W=M;M.__RSPRESS_PAGE_META={},M.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20SVG%2F48-%E9%AB%98%E7%BA%A7%E7%AF%87%EF%BC%9ASVG%20%E4%B8%8E%203D%20%E6%95%88%E6%9E%9C.md"]={toc:[{text:"SVG 创建 3D 效果的技巧",id:"svg-创建-3d-效果的技巧",depth:2},{text:"拥抱 Z 轴：通往 3D 的大门",id:"拥抱-z-轴通往-3d-的大门",depth:3},{text:"光照和阴影：打造逼真效果",id:"光照和阴影打造逼真效果",depth:3},{text:"渐变魔法：幻觉艺术之道",id:"渐变魔法幻觉艺术之道",depth:3},{text:"结合元素创建复杂形状",id:"结合元素创建复杂形状",depth:3},{text:"动画：赋予 3D SVG 生命",id:"动画赋予-3d-svg-生命",depth:3},{text:"SVG 中的 3D 变换",id:"svg-中的-3d-变换",depth:2},{text:"小结",id:"小结",depth:2}],title:"48-高级篇：SVG 与 3D 效果",headingTitle:"48-高级篇：SVG 与 3D 效果",frontmatter:{}}}}]);