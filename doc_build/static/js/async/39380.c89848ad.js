"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["39380"],{938551:function(e,n,c){c.r(n),c.d(n,{default:()=>G});var i=c(552676),d=c(740453);let r=c.p+"static/image/557390a89993201c236338e998f3475d.be88dcda.webp",s=c.p+"static/image/dee479864fb063fd0149a92cb073fe59.d3dc5184.webp",l=c.p+"static/image/c80e7ecfb71535ba828c7f2905899c0c.57d4076c.webp",o=c.p+"static/image/219557bef8e4aac276c332edcf925811.4634bd09.webp",p=c.p+"static/image/c9ed519709bc06527037b0574a86d597.17062140.webp",a=c.p+"static/image/4d7dc15905e4012e837889fe4fb92783.6a09412b.webp",t=c.p+"static/image/d5b830240f2010c830d8c8d73d0432cc.9d816b5b.webp",h=c.p+"static/image/a7ec5d9fd9ee3116eb051c596da4958d.42c4737a.webp",j=c.p+"static/image/d751e0a0db2c2983fab0cea09e953200.32946692.webp",x=c.p+"static/image/c2b2d85c9110ac1afffd9b15887ba261.5a7eda01.webp",b=c.p+"static/image/ceab46dfd0860a091d9f88b23f5995c2.48c8000f.webp",m=c.p+"static/image/b766b283604b0221004e2c139e4e7bbd.0781e5f9.webp",f=c.p+"static/image/1271605f7763b0e501c5159b86b728ea.d112c125.webp",g=c.p+"static/image/985294c1bdd8d0f14279be7b2883cd15.ca3da542.webp",u=c.p+"static/image/c8682d0d1850991d01a875da2fb66c30.938a295a.webp",w=c.p+"static/image/2146585b1dd05a152576765eae69f9cd.c10f10c1.webp",A=c.p+"static/image/4148f48d775315ba8c5d60df602d7ea3.f152a44f.webp",M=c.p+"static/image/77d4da76e26cf6fd1de0a070720ddfe2.34c0fd7d.webp",v=c.p+"static/image/b0e1d6d1d5aea49e3e21624c01e24933.7db386d6.webp",S=c.p+"static/image/8c5fa3a84b6afc881f38ec097d9daf42.49b6d156.webp",C=c.p+"static/image/f5013ca7adcfecd78e40685b03ba0964.ca10df6a.webp",E=c.p+"static/image/5c6885de09c6fb75694ec841d9020d49.614174e0.webp",B=c.p+"static/image/234632168dd5cffd2839af214336177a.1b1f5194.webp",_=c.p+"static/image/21bf68938517a94b202c74e25793f0b3.fcc2ee59.webp",R=c.p+"static/image/498ab0a1db8d4677426979adc108fc34.1cb0d783.webp",y=c.p+"static/image/29344dde6f36fed97ab8d7da0ab8f864.dcb63e85.webp",D=c.p+"static/image/6ac34b12585353a0b8382ee3cb4ce4e6.b94cf347.webp",O=c.p+"static/image/05e98aa0a4f42acb6879086ec98c59db.8ef63e6f.webp",k=c.p+"static/image/31dfbc445affe3f02c528b194500faac.a5df5c94.webp",I=c.p+"static/image/1011202173b9cd0ea0f4c7cb5c354a43.59fff1be.webp";function N(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h2:"h2"},(0,d.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"9-全局模块和生命周期",children:["9. 全局模块和生命周期",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9-全局模块和生命周期",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"模块导出 provider，另一个模块需要 imports 它才能用这些 provider。"}),"\n",(0,i.jsx)(n.p,{children:"但如果这个模块被很多模块依赖了，那每次都要 imports 就很麻烦。"}),"\n",(0,i.jsx)(n.p,{children:"能不能设置成全局的，它导出的 provider 直接可用呢？"}),"\n",(0,i.jsx)(n.p,{children:"Module、Controller、Provider 是由 Nest 创建的，能不能在创建、销毁的时候执行一些逻辑呢？"}),"\n",(0,i.jsx)(n.p,{children:"这节我们来学习下全局模块和生命周期。"}),"\n",(0,i.jsx)(n.p,{children:"创建一个 nest 项目："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"nest new global-and-lifecycle -p npm\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:I,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后创建两个 CRUD 的模块："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"nest g resource aaa --no-spec\nnest g resource bbb --no-spec\n"})}),"\n",(0,i.jsx)(n.p,{children:"--no-spec 是不生成测试文件"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:k,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"在 AaaModule 里指定 exports 的 provider："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:O,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"然后在 BbbModule 里 imports："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:D,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这样就可以在 BbbModule 内注入 AaaService 了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:y,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"把 nest 服务跑起来："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"npm run start:dev\n"})}),"\n",(0,i.jsx)(n.p,{children:"可以看到 aaaService 生效了："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:R,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这是我们常用的引入 Module 的方式。"}),"\n",(0,i.jsx)(n.p,{children:"但如果这个 AaaModule 被很多地方引用呢？"}),"\n",(0,i.jsx)(n.p,{children:"每个模块都 imports 太麻烦了，这时候就可以把它声明为全局的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:_,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"在 AaaModule 上加一个 @Global 的装饰器，然后在 BbbModule 里把 AaaModule 的 imports 去掉。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:B,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这样依然是可以注入的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:E,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:C,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这就是全局模块。"}),"\n",(0,i.jsx)(n.p,{children:"不过全局模块还是尽量少用，不然注入的很多 provider 都不知道来源，会降低代码的可维护性。"}),"\n",(0,i.jsx)(n.p,{children:"然后是生命周期："}),"\n",(0,i.jsx)(n.p,{children:"Nest 在启动的时候，会递归解析 Module 依赖，扫描其中的 provider、controller，注入它的依赖。"}),"\n",(0,i.jsx)(n.p,{children:"全部解析完后，会监听网络端口，开始处理请求。"}),"\n",(0,i.jsx)(n.p,{children:"这个过程中，Nest 暴露了一些生命周期方法："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:S,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"首先，递归初始化模块，会依次调用模块内的 controller、provider 的 onModuleInit 方法，然后再调用 module 的 onModuleInit 方法。"}),"\n",(0,i.jsx)(n.p,{children:"全部初始化完之后，再依次调用模块内的 controller、provider 的 onApplicationBootstrap 方法，然后调用 module 的 onApplicationBootstrap 方法"}),"\n",(0,i.jsx)(n.p,{children:"然后监听网络端口。"}),"\n",(0,i.jsx)(n.p,{children:"之后 Nest 应用就正常运行了。"}),"\n",(0,i.jsx)(n.p,{children:"这个过程中，onModuleInit、onApplicationBootstrap 都是我们可以实现的生命周期方法。"}),"\n",(0,i.jsx)(n.p,{children:"我们来试一下："}),"\n",(0,i.jsx)(n.p,{children:"再创建两个 Module："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"nest g resource ccc --no-spec\nnest g resource ddd --no-spec\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:v,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"nest 提供了这样两个 interface："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:M,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:A,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"在 controller、service、module 里分别实现它："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:w,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:u,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:g,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"ddd 模块也是这样。"}),"\n",(0,i.jsx)(n.p,{children:"然后重新跑下服务，会看到这样的日志信息："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:f,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这就是 onModuleInit 和 onApplicationBootstrap 生命周期的调用顺序。"}),"\n",(0,i.jsx)(n.p,{children:"应用销毁的时候也同样有生命周期："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:m,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"先调用每个模块的 controller、provider 的 onModuleDestroy 方法，然后调用 Module 的 onModuleDestroy 方法。"}),"\n",(0,i.jsx)(n.p,{children:"之后再调用每个模块的 controller、provider 的 beforeApplicationShutdown 方法，然后调用 Module 的 beforeApplicationShutdown 方法。"}),"\n",(0,i.jsx)(n.p,{children:"然后停止监听网络端口。"}),"\n",(0,i.jsx)(n.p,{children:"之后调用每个模块的 controller、provider 的 onApplicationShutdown 方法，然后调用 Module 的 onApplicationShutdown 方法。"}),"\n",(0,i.jsx)(n.p,{children:"之后停止进程。"}),"\n",(0,i.jsx)(n.p,{children:"是不是感觉 onModuleDestory 和 beforeApplicationShutdown 没区别呀？"}),"\n",(0,i.jsx)(n.p,{children:"其实是有区别的，可以看下对应的 interface："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:b,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:x,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"beforeApplicationShutdown 是可以拿到 signal 系统信号的，比如 SIGTERM。"}),"\n",(0,i.jsx)(n.p,{children:"这些终止信号是别的进程传过来的，让它做一些销毁的事情，比如用 k8s 管理容器的时候，可以通过这个信号来通知它。"}),"\n",(0,i.jsx)(n.p,{children:"我们分别给 CccController、CccProvider、CccModule 还有 ddd 模块的那些给加一下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:j,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:h,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:t,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"3s 后调用 app.close() 触发销毁（app.close() 只是触发销毁逻辑，但不会真正退出进程）"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"生命周期方法是这样的执行顺序："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:p,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"而且所有的生命周期函数都是支持 async 的。"}),"\n",(0,i.jsx)(n.p,{children:"我们来看看 @nestjs/typeorm、@nestjs/mongoose 里都是怎么用的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:o,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"可以看到，一般都是通过 moduleRef 取出一些 provider 来销毁，比如关闭连接。"}),"\n",(0,i.jsx)(n.p,{children:"这里的 moduleRef 就是当前模块的引用。"}),"\n",(0,i.jsx)(n.p,{children:"我们来试试："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:s,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"onApplicationShutdown 的生命周期里，拿到当前模块的引用 moduleRef，调用 get 方法，传入 token，取出对应的 provider 实例，然后调用它的方法。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { Module, OnModuleInit, OnApplicationBootstrap, OnModuleDestroy, BeforeApplicationShutdown, OnApplicationShutdown  } from '@nestjs/common';\nimport { ModuleRef } from '@nestjs/core';\nimport { CccService } from './ccc.service';\nimport { CccController } from './ccc.controller';\n\n@Module({\n  controllers: [CccController],\n  providers: [CccService]\n})\nexport class CccModule implements OnModuleInit, OnApplicationBootstrap, OnModuleDestroy, BeforeApplicationShutdown, OnApplicationShutdown  {\n\n\n  onModuleDestroy() {\n    console.log('CccModule onModuleDestroy');\n  }\n\n  beforeApplicationShutdown(signal: string) {\n    console.log('CccModule beforeApplicationShutdown', signal);\n  }\n\n  onApplicationShutdown() {\n    const cccService = this.moduleRef.get<CccService>(CccService);\n    console.log('--------------------------', cccService.findAll());\n\n    console.log('CccModule onApplicationShutdown');\n  }\n\n  onModuleInit() {\n    console.log('CccModule OnModuleInit');\n  }\n\n  onApplicationBootstrap() {\n    console.log('CccModule onApplicationBootstrap');\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"这就是 onApplicationShutdown 生命周期的常见用法。"}),"\n",(0,i.jsxs)(n.p,{children:["案例代码在",(0,i.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/global-and-lifecycle",target:"_blank",rel:"noopener noreferrer",children:"小册仓库"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"这节我们学习了全局模块和生命周期。"}),"\n",(0,i.jsx)(n.p,{children:"模块可以通过 @Global 声明为全局的，这样它 exports 的 provider 就可以在各处使用了，不需要 imports。"}),"\n",(0,i.jsx)(n.p,{children:"provider、controller、module 都支持启动和销毁的生命周期函数，这些生命周期函数都支持 async 的方式。"}),"\n",(0,i.jsx)(n.p,{children:"可以在其中做一些初始化、销毁的逻辑，比如 onApplicationShutwon 里通过 moduleRef.get 取出一些 provider，执行关闭连接等销毁逻辑。"}),"\n",(0,i.jsx)(n.p,{children:"全局模块、生命周期、moduleRef 都是 Nest 很常用的功能。"})]})}function P(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(N,{...e})}):N(e)}let G=P;P.__RSPRESS_PAGE_META={},P.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F9.%20%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"9. 全局模块和生命周期",headingTitle:"9. 全局模块和生命周期",frontmatter:{}}}}]);