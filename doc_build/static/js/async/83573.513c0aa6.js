"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["83573"],{193849:function(e,n,s){s.r(n),s.d(n,{default:()=>p});var i=s(552676),t=s(740453);let r=s.p+"static/image/b310ecd7df5e538cae3a05a6b8d4438f.ccf193b1.webp",c=s.p+"static/image/17b5d2b01bd38d6445d37a85a088ede1.ee7c262d.webp",l=s.p+"static/image/2cac0812fecc99da20df697abb4118d9.fa213489.webp",d=s.p+"static/image/372685de3699b588121863d41128c1d4.53de338d.webp",a=s.p+"static/image/713d5921f78295ae8d9bc2e3d77990b7.53de338d.webp";function o(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",h3:"h3",pre:"pre",code:"code",img:"img",em:"em"},(0,t.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"7第七日常用设计模式",children:["7.第七日：常用设计模式",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7第七日常用设计模式",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"第一个故事图片预览",children:["第一个故事：图片预览",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第一个故事图片预览",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["如果说组件封装是为了让其他程序员能够复用和扩展我们的UI组件，那么设计模式的意义则在于让其他程序员能够复用我们的",(0,i.jsx)(n.strong,{children:"解决方案"}),"。设计模式简单来说就是解决在一个特定上下文中一个问题的一种解决方案。所以，今天的故事，我们就来聊聊前端开发中常用的设计模式。"]}),"\n",(0,i.jsxs)(n.h3,{id:"抽象行为behavior",children:["抽象行为（behavior）",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#抽象行为behavior",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们的任务是这样的，给一个固定列表中的图片元素增加“预览”功能。"}),"\n",(0,i.jsx)(n.p,{children:"对应的HTML页面如下所示："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta http-equiv="X-UA-Compatible" content="ie=edge">\n  <title>图片预览</title>\n  <style>\n    #list {\n      list-style-type: none;\n      justify-content: flex-start;\n      display: flex;\n      flex-wrap: wrap;\n    }\n\n    #list li {\n      padding: 10px;\n      margin: 0;\n    }\n    #list img {\n      height: 200px;\n      cursor: pointer;\n    }\n  </style>\n</head>\n<body>\n  <ul id="list">\n    <li>\n      <img src="https://p4.ssl.qhimg.com/t01713d89cfdb45cdf5.jpg">\n    </li>\n    <li>\n      <img src="https://p4.ssl.qhimg.com/t01e456146c8f8a639a.jpg">\n    </li>\n    <li>\n      <img src="https://p1.ssl.qhimg.com/t015f613e2205b573d8.jpg">\n    </li>\n    <li>\n      <img src="https://p0.ssl.qhimg.com/t01290338a28018d404.jpg">\n    </li>\n    <li>\n      <img src="https://p3.ssl.qhimg.com/t01d9aa5ae469c8862e.jpg">\n    </li>\n    <li>\n      <img src="https://p3.ssl.qhimg.com/t01cb20d35fc4aa3c0d.jpg">\n    </li>\n    <li>\n      <img src="https://p5.ssl.qhimg.com/t0110b30256941b9611.jpg">\n    </li>\n  </ul>\n</body>\n</html>\n'})}),"\n",(0,i.jsx)(n.p,{children:"显示的UI效果如图所示："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:a,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"要实现的功能是，鼠标点击到列表中的图片上，显示对应图片（缩略图）的高清大图并带有“上一张”、“下一张”的切换按钮。"}),"\n",(0,i.jsx)(n.p,{children:"这个任务的解决方案很多：你可以按照常规做法，给每张图片注册一个事件监听器，响应用户的点击，显示该图的预览；你也可以按照组件封装的思路，设计一个预览功能的UI组件。但是，今天我们的主题是设计模式，所以，我们想使用“抽象行为”的设计模式来实现这个任务。这种模式应用了第四日的过程抽象的思想，是比组件化更加轻量的一种解决思路。"}),"\n",(0,i.jsx)(n.p,{children:"下面，我们来看一看抽象行为是如何实现这个预览行为的："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const list = document.getElementById('list');\nlist.addEventListener('click', (evt) => {\n  const target = evt.target;\n  if(target.tagName === 'IMG') {\n    preview(list, target);\n  }\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["上面的代码是",(0,i.jsx)(n.code,{children:"click"}),"事件处理函数。当点击的",(0,i.jsx)(n.code,{children:"target"}),"是图片时，则执行",(0,i.jsx)(n.code,{children:"preview(list,target)"}),"函数。这个",(0,i.jsx)(n.code,{children:"preview"}),"函数就是我们的预览行为。"]}),"\n",(0,i.jsxs)(n.p,{children:["下面我们重点看看",(0,i.jsx)(n.code,{children:"preview"}),"行为是如何被抽象出来的："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function useBehavior(context) {\n  const {type, getDetail} = context;\n  return function (subject, target) {\n    const event = new CustomEvent(type, {bubbles: true, detail: getDetail.call(context, subject, target)});\n    target.dispatchEvent(event);\n  };\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["如上代码所示，我们定义了一个很简短的函数",(0,i.jsx)(n.code,{children:"useBehavior(context)"}),"，这个函数是一个高阶函数，它返回的是代表特定行为的方法。当调用这个方法时，传入",(0,i.jsx)(n.code,{children:"subject"}),"和",(0,i.jsx)(n.code,{children:"target"}),"，然后创建一个自定义事件，并通过执行",(0,i.jsx)(n.code,{children:"getDetail"}),"获取到赋给该事件参数的detail内容，然后以",(0,i.jsx)(n.code,{children:"target"}),"为目标派发这个自定义事件。"]}),"\n",(0,i.jsx)(n.p,{children:"接下来，我们通过它定义一个叫做“preview”的行为："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const preview = useBehavior({\n  type: 'preview',\n\n  /*\n    @subject: <ul>元素\n    @target: 选中的图片元素\n  */\n  getDetail(subject, target) {\n    const imgs = Array.from(subject.querySelectorAll('img'));\n    const selected = imgs.indexOf(target); // 获取选中图片在图片集合中的索引号\n    let mask = document.getElementById('mask');\n\n    // 如果mask不存在，创建一个mask元素\n    if(!mask) {\n      mask = document.createElement('div');\n      mask.id = 'mask';\n      mask.innerHTML = `\n        <a class=\"previous\" href=\"###\">&lt;</a>\n        <img src=\"${imgs[selected].src}\">\n        <a class=\"next\" href=\"###\">&gt;</a>    \n      `;\n      // 给 #mask 元素设置样式：\n      Object.assign(mask.style, {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        display: 'none',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      });\n\n      // 给 #mask 元素左右两边的<a>元素设置样式：\n      mask.querySelectorAll('a').forEach((a) => {\n        Object.assign(a.style, {\n          width: '30px',\n          textAlign: 'center',\n          fontSize: '2rem',\n          color: '#fff',\n          textDecoration: 'none',\n        });\n      });\n      document.body.appendChild(mask);\n\n      // 给#mask元素添加点击事件处理函数：\n      let idx = selected;\n      mask.addEventListener('click', (evt) => {\n        const target = evt.target;\n        if(target === mask) { // 如果点击的对象是mask元素，则隐藏mask元素\n          mask.style.display = 'none';\n        } else if(target.className === 'previous') { // 显示上一张图片\n          update(--idx);\n        } else if(target.className === 'next') { // 显示下一张图片\n          update(++idx);\n        }\n      });\n    }\n\n    // 设置img元素的src属性指向指定图片\n    function update(idx) {\n      const [previous, next] = [...mask.querySelectorAll('a')];\n      previous.style.visibility = idx ? 'visible' : 'hidden';\n      next.style.visibility = idx < imgs.length - 1 ? 'visible' : 'hidden';\n      const img = mask.querySelector('img');\n      img.src = imgs[idx].src;\n    }\n\n    return {\n      showMask() { // 显示选中图片的预览\n        mask.style.display = 'flex';\n        update(selected);\n      },\n    };\n  },\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["在",(0,i.jsx)(n.code,{children:"getDetail"}),"方法里，我们先创建一个",(0,i.jsx)(n.code,{children:"id=mask"}),"的",(0,i.jsx)(n.code,{children:"<div>"}),"元素，它的结构如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div id="mask">\n  <a class="previous" href="###">&lt;</a>\n  <img src="${imgs[selected].src}">\n  <a class="next" href="###">&gt;</a>\n</div>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["然后给",(0,i.jsx)(n.code,{children:"#mask"}),"元素设置样式："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"Object.assign(mask.style, {\n  position: 'absolute',\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%',\n  backgroundColor: 'rgba(0,0,0,0.8)',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n});\nmask.querySelectorAll('a').forEach((a) => {\n  Object.assign(a.style, {\n    width: '30px',\n    textAlign: 'center',\n    fontSize: '2rem',\n    color: '#fff',\n    textDecoration: 'none',\n  });\n});\ndocument.body.appendChild(mask);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["接着添加鼠标点击",(0,i.jsx)(n.code,{children:"mask"}),"元素，以及左右两侧箭头（即",(0,i.jsx)(n.code,{children:"a.previous"}),"和",(0,i.jsx)(n.code,{children:"a.next"}),"两个元素）时触发的动作："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"mask.addEventListener('click', (evt) => {\n  const target = evt.target;\n  if(target === mask) {\n    mask.style.display = 'none';\n  } else if(target.className === 'previous') {\n    update(--idx);\n  } else if(target.className === 'next') {\n    update(++idx);\n  }\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"update"}),"方法显示",(0,i.jsx)(n.code,{children:"idx"}),"对应的图片，以及根据图片的位置决定是否显示左右箭头:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function update(idx) {\n  const [previous, next] = [...mask.querySelectorAll('a')];\n  previous.style.visibility = idx ? 'visible' : 'hidden';\n  next.style.visibility = idx < imgs.length - 1 ? 'visible' : 'hidden';\n  const img = mask.querySelector('img');\n  img.src = imgs[idx].src;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["最后，我们返回一个",(0,i.jsx)(n.code,{children:"showMask()"}),"方法，这个方法的作用是将",(0,i.jsx)(n.code,{children:"id=mask"}),"的",(0,i.jsx)(n.code,{children:"<div>"}),"元素真正显示出来。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"return {\n  showMask(){\n    mask.style.display = 'flex';\n    update(selected);\n  },\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"接着我们要通过鼠标click事件触发preview行为："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const list = document.getElementById('list');\nlist.addEventListener('click', (evt) => {\n  const target = evt.target;\n  if(target.tagName === 'IMG') {\n    preview(list, target);\n  }\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["然后，我们让",(0,i.jsx)(n.code,{children:"#list"}),"元素监听",(0,i.jsx)(n.code,{children:"preview"}),"事件："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"list.addEventListener('preview', ({detail}) => {\n  detail.showMask();\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["在",(0,i.jsx)(n.code,{children:"preview"}),"事件监听器中我们执行",(0,i.jsx)(n.code,{children:"detail.showMask()"}),"，就能触发图片预览的功能了。",(0,i.jsx)(n.a,{href:"https://junyux.github.io/FE-Advance/day07/index1.html",target:"_blank",rel:"noopener noreferrer",children:"在线演示"})]}),"\n",(0,i.jsx)(n.p,{children:"从上述的解决方案，我们可以看到，通过抽象行为的模式，我们将“预览”这个行为从组件中剥离出来，降低了组件和行为的耦合度。这样做究竟有什么好处呢？"}),"\n",(0,i.jsxs)(n.h2,{id:"第二个故事图片选择器",children:["第二个故事：图片选择器",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第二个故事图片选择器",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"这个故事，我们依然使用和第一个故事相似的HTML结构，实现一个与图片预览类似的功能，叫做图片选择器："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta http-equiv="X-UA-Compatible" content="ie=edge">\n  <title>抽象行为</title>\n  <style>\n    #list {\n      list-style-type: none;\n      justify-content: flex-start;\n      display: flex;\n      flex-wrap: wrap;\n    }\n\n    #list li {\n      padding: 10px;\n      margin: 0;\n    }\n    #list img {\n      height: 200px;\n      cursor: pointer;\n      box-sizing: border-box;\n      padding: 5px;\n    }\n\n    #list img.selected {\n      border: solid 5px #37c;\n      padding: 0;\n    }\n  </style>\n</head>\n<body>\n  <ul id="list">\n    <li>\n      <img src="https://p4.ssl.qhimg.com/t01713d89cfdb45cdf5.jpg">\n    </li>\n    <li>\n      <img src="https://p4.ssl.qhimg.com/t01e456146c8f8a639a.jpg">\n    </li>\n    <li>\n      <img src="https://p1.ssl.qhimg.com/t015f613e2205b573d8.jpg">\n    </li>\n    <li>\n      <img src="https://p0.ssl.qhimg.com/t01290338a28018d404.jpg">\n    </li>\n    <li>\n      <img src="https://p3.ssl.qhimg.com/t01d9aa5ae469c8862e.jpg">\n    </li>\n    <li>\n      <img src="https://p3.ssl.qhimg.com/t01cb20d35fc4aa3c0d.jpg">\n    </li>\n    <li>\n      <img src="https://p5.ssl.qhimg.com/t0110b30256941b9611.jpg">\n    </li>\n  </ul>\n</body>\n</html>\n'})}),"\n",(0,i.jsx)(n.p,{children:"上面的HTML和前面的图片预览基本上一样，只是有些细节的CSS样式修改："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:d,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"沿用图片预览的思路，我们也可以将图片选择器的“选择”行为抽象出来，它比图片预览更加简单："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function useBehavior(context) {\n  const {type, getDetail} = context;\n  return function(subject, target) {\n    const event = new CustomEvent(type, {bubbles: true, detail: getDetail.call(context, subject, target)});\n    target.dispatchEvent(event);\n  }\n}\n\nconst select = useBehavior({\n  type: 'select',\n  data: {\n    picked: new Set(), // 选中的图片集合\n  },\n  getDetail(subject, target) {\n    const picked = this.data.picked;\n\n    if(picked.has(target)) {\n      target.className = '';\n      picked.delete(target);\n    } else {\n      target.className = 'selected';\n      picked.add(target);\n    }\n\n    return {\n      changed: target,\n      picked,\n    };\n  },\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["在",(0,i.jsx)(n.code,{children:"select"}),"行为里，我们定义一个",(0,i.jsx)(n.code,{children:"picked"}),"集合，用来存放所有选中的图片元素。",(0,i.jsx)(n.code,{children:"getDetail"}),"函数仅仅做一件事情，如果",(0,i.jsx)(n.code,{children:"target"}),"在",(0,i.jsx)(n.code,{children:"picked"}),"集合中，将它移出集合并撤销",(0,i.jsx)(n.code,{children:"img"}),"元素的样式，否则，将它放入集合并添加",(0,i.jsx)(n.code,{children:"img"}),"元素的样式。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["\uD83D\uDCA1注意，在",(0,i.jsx)(n.code,{children:"useBehavior"}),"定义中，我们将",(0,i.jsx)(n.code,{children:"context"}),"作为",(0,i.jsx)(n.code,{children:"getDetail"}),"的",(0,i.jsx)(n.code,{children:"this"}),"上下文传入。这样我们就可以在实际实现",(0,i.jsx)(n.code,{children:"getDetail"}),"方法的时候，通过",(0,i.jsx)(n.code,{children:"this"}),"上下文拿到调用",(0,i.jsx)(n.code,{children:"useBehavior"}),"的对象上的数据，这样我们就可以灵活地给",(0,i.jsx)(n.code,{children:"getDetail"}),"操作提供需要的初始数据了。"]})}),"\n",(0,i.jsxs)(n.p,{children:["然后，我们给",(0,i.jsx)(n.code,{children:"#list"}),"元素添加",(0,i.jsx)(n.code,{children:"click"}),"和",(0,i.jsx)(n.code,{children:"select"}),"事件处理函数："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const list = document.getElementById('list');\nlist.addEventListener('click', (evt) => {\n  const target = evt.target;\n  if(target.tagName === 'IMG') {\n    select(list, target);\n  }\n});\n\nlist.addEventListener('select', ({detail}) => {\n  // do nothing\n  console.log(detail.changed, detail.picked);\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["上面的代码中，虽然现在",(0,i.jsx)(n.code,{children:"select"}),"事件处理函数不处理任何事情，但是我们依然可以监听它，以便将来对选择的对象进行下一步动作。它的效果如下所示："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://junyux.github.io/FE-Advance/day07/index2.html",target:"_blank",rel:"noopener noreferrer",children:"在线演示"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:l,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"通过第一个故事和第二个故事，我们可以把“预览”和“选择”这两个行为组合起来。比如，当鼠标点击的同时，我们按下alt建，就表示选择图片；否则就是预览图片："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://junyux.github.io/FE-Advance/day07/index3.html",target:"_blank",rel:"noopener noreferrer",children:"在线演示"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"/* ...省略其他代码... */\n\nconst list = document.getElementById('list');\nlist.addEventListener('click', (evt) => {\n  const target = evt.target;\n  if(target.tagName === 'IMG') {\n    if(evt.altKey) {\n      select(list, target);\n    } else {\n      preview(list, target);\n    }\n  }\n});\n\nlist.addEventListener('preview', ({detail}) => {\n  const {showMask} = detail;\n  showMask();\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["如上代码所示，抽象行为的模式允许一个组件可以灵活的",(0,i.jsx)(n.strong,{children:"组合或卸载"}),"多个行为，且互不冲突。"]}),"\n",(0,i.jsxs)(n.p,{children:["但是，上面的例子只是非常粗略的抽象方式，而且还有一些争议点，比如我们可以将预览行为中的",(0,i.jsx)(n.code,{children:"showMask"}),"操作直接放在",(0,i.jsx)(n.code,{children:"getDetail"}),"里面完成，为什么要将它暴露给事件处理函数，在处理函数中手工调用？另外，",(0,i.jsx)(n.code,{children:"select"}),"行为中，我们为什么又将",(0,i.jsx)(n.code,{children:"className"}),"的变化放在",(0,i.jsx)(n.code,{children:"getDetail"}),"里面而不是将它交给事件处理函数？"]}),"\n",(0,i.jsxs)(n.p,{children:["这里是有可权衡的地方，实际上把操作放在哪边，都各有利弊。不过我们一般遵循一个大的原则——如果操作只是处理数据或改变状态，那么将它放在",(0,i.jsx)(n.code,{children:"getDetail"}),"中；但是如果同时改变了DOM结构，比如创建或删除了元素，那么这些操作我们可以交给事件处理函数处理。也就是说，",(0,i.jsx)(n.code,{children:"getDetail"}),"函数只处理数据或者改变元素的",(0,i.jsx)(n.code,{children:"className"}),"（即状态），不对DOM树的结构做修改。因为这样才能保证在组合多个行为下，DOM结构的稳定，否则一个行为操作的DOM元素被另一个行为删除就会导致冲突。"]}),"\n",(0,i.jsx)(n.p,{children:"抽象行为（behavior）模式还有很多用途，可以创造非常复杂的行为，我们将会在设计模式的课程中详细介绍。下一个故事，我们来看另一个前端常用的设计模式 —— 中间人模式。"}),"\n",(0,i.jsxs)(n.h2,{id:"第三个故事滚动的文字",children:["第三个故事：滚动的文字",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第三个故事滚动的文字",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们接下来的新任务是实现一个同步滚动的编辑与预览区，这是一些在线编辑类Web应用常见的一种交互形式。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:c,alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"同步滚动的编辑与预览区"})}),"\n",(0,i.jsx)(n.p,{children:"这是页面的HTML结构："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<body>\n  <textarea id="editor" oninput="this.editor.update()"\n            rows="6" cols="60">\n在 2001 到 2003 年间，Judith Miller 在纽约时报上发表了一批文章，宣称伊拉克有能力和野心生产大规模杀伤性武器。这是假新闻。\n\n回顾当年，我们无法确定 Miller 写的这些故事在美国 2013 年做出发动伊拉克战争的决定中扮演了怎样的角色；与 Miller 相同来源的消息与小布什政府的对外政策团队有很大关联。但是，纽约时报仍然起到了为这一政策背书的作用，尤其是对民主党人，本来他们应该会更坚定地反对小布什的政策。毕竟，纽约时报可不是一些无人问津的地方小报，它是整个美国影响力最大的报刊，它一般被认为具有左倾倾向。Miller 的故事某种程度上吻合报纸的政治倾向。\n\n我们可以把 Miller 的错误和最近关于 Facebook 的假新闻问题联系起来看；Facebook 用自己的故事告诫我们“假新闻是坏的”。然而，我持有不同的观点：**新闻假不假没那么重要，由谁来决定什么是新闻才是第一重要的**。\n\n\x3c!--more--\x3e\n\n#### Facebook 的媒体商业化\n\n在[聚集理论](https://stratechery.com/2015/aggregation-theory/)中，我描述了基于分配的经济权利的消亡导致强势中介的崛起，它们掌控客户体验并将它们的供应商商品化。[在 Facebook 的例子里](https://stratechery.com/2016/the-fang-playbook/)，社交网络之所以兴起，是因为之前存在的线下社会网络在往线上网络转变。考虑到人类本质是社会化的，用户开始将时间花在 Facebook 上阅读、发表观点和获取新闻。\n\n...（此处省略）\n                     \n  </textarea>\n  <div id="preview"> </div>\n  <div id="hintbar"> 0% </div>\n</body>\n'})}),"\n",(0,i.jsx)(n.p,{children:"CSS样式："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"body{\n  display: flex;\n}\n\n#editor {\n  width: 45%;\n  height: 350px;\n  margin-right: 10px;\n}\n\n#preview {\n  width: 45%;\n  height: 350px;\n  overflow: scroll;\n}\n\n#hintbar {\n  position: absolute;\n  right: 10px;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["要实现这个效果，要控制3个区域的状态，左侧的编辑区，这是一个",(0,i.jsx)(n.code,{children:"textare"}),"元素和其中的文本，中间的预览区，这是一个",(0,i.jsx)(n.code,{children:"id"}),"为",(0,i.jsx)(n.code,{children:"preview"}),"的",(0,i.jsx)(n.code,{children:"div"}),"元素，右侧显示进度百分比信息，是一个",(0,i.jsx)(n.code,{children:"id"}),"为",(0,i.jsx)(n.code,{children:"hintbar"}),"的",(0,i.jsx)(n.code,{children:"div"}),"元素。"]}),"\n",(0,i.jsx)(n.p,{children:"最简单的思路是我们同步这三个区域的状态，下面我们来看一下它的实现。"}),"\n",(0,i.jsxs)(n.p,{children:["首先，我们使用markdown的JS库提供接口，创建一个",(0,i.jsx)(n.code,{children:"Editor"}),"的对象："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function Editor(input, preview) {\n  this.update = function () {\n    preview.innerHTML = markdown.toHTML(input.value);\n  };\n  input.editor = this;\n  this.update();\n}\nnew Editor(editor, preview);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["上面的代码把",(0,i.jsx)(n.code,{children:"editor"}),"中的内容经过markdown解析后赋给",(0,i.jsx)(n.code,{children:"preview"}),"元素。"]}),"\n",(0,i.jsx)(n.p,{children:"而markdown库可以通过以下方式加载到我们的页面中："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<script src="https://s3.ssl.qhres.com/!67fc024a/markdown.min.js"><\/script>\n'})}),"\n",(0,i.jsx)(n.p,{children:"然后，我们来实现三部分同步的功能："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"//三部分 UI 耦合在一起的 update 方法\nfunction update(src, dest, hint) {\n  var scrollRange = src.scrollHeight - src.clientHeight,\n      p = src.scrollTop / scrollRange;  \n  \n  dest.scrollTop = p * (dest.scrollHeight - dest.clientHeight);\n  hint.innerHTML = Math.round(100 * p) + '%';\n}\n\nupdate(editor, preview, hintbar);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["如上代码所示，",(0,i.jsx)(n.code,{children:"update"}),"方法读取滚动元素（",(0,i.jsx)(n.code,{children:"src"}),"）的滚动位置，换算成百分比，然后将被同步的目标元素（",(0,i.jsx)(n.code,{children:"dest"}),"）的",(0,i.jsx)(n.code,{children:"scrollTop"}),"属性设置为和这个百分比值对应的滚动位置。最后，将这个百分比值赋给",(0,i.jsx)(n.code,{children:"hint"}),"元素。"]}),"\n",(0,i.jsxs)(n.p,{children:["最后，我们分别给",(0,i.jsx)(n.code,{children:"editor"}),"和",(0,i.jsx)(n.code,{children:"preview"}),"元素添加",(0,i.jsx)(n.code,{children:"scroll"}),"事件："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"editor.addEventListener('scroll', function(evt) {\n  update(editor, preview, hintbar);\n});\n\npreview.addEventListener('scroll', function(evt) {  \n  update(preview, editor, hintbar);\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"这样就可以实现滚动同步了。但是，上面的代码其实存在错误。让我们来看一下现在的效果："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)("img",{src:r,alt:""})}),"\n",(0,i.jsx)(n.p,{children:"你会看到，一开始的时候，我们滚动左侧，右侧跟着滚动没有问题，但是当我们停止滚动的时候，页面竟然自己会慢慢地往上滚动回去。"}),"\n",(0,i.jsxs)(n.p,{children:["为什么会出现这样的错误呢？其实问题出现在",(0,i.jsx)(n.code,{children:"update"}),"方法上："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function update(src, dest, hint) {\n  var scrollRange = src.scrollHeight - src.clientHeight,\n      p = src.scrollTop / scrollRange;  \n  \n  dest.scrollTop = p * (dest.scrollHeight - dest.clientHeight);\n  hint.innerHTML = Math.round(100 * p) + '%';\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["这个方法更新了",(0,i.jsx)(n.code,{children:"dest"}),"的",(0,i.jsx)(n.code,{children:"scrollTop"}),"。调用",(0,i.jsx)(n.code,{children:"update(editor, preview, hintbar)"}),"，就是用",(0,i.jsx)(n.code,{children:"editor"}),"的滚动信息去更新",(0,i.jsx)(n.code,{children:"preview"}),"的",(0,i.jsx)(n.code,{children:"scrollTop"}),"。但是，在浏览器中，如果元素的",(0,i.jsx)(n.code,{children:"scrollTop"}),"改变，就会自动触发",(0,i.jsx)(n.code,{children:"scroll"}),"事件。因此，当我们监听",(0,i.jsx)(n.code,{children:"editor"}),"的",(0,i.jsx)(n.code,{children:"scroll"}),"事件："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"editor.addEventListener('scroll', function(evt) {\n  update(editor, preview, hintbar);\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["在这个",(0,i.jsx)(n.code,{children:"scroll"}),"事件里我们调用",(0,i.jsx)(n.code,{children:"update(editor, preview, hintbar)"}),"，改变了",(0,i.jsx)(n.code,{children:"perview"}),"的",(0,i.jsx)(n.code,{children:"scrollTop"}),"，这时就会触发",(0,i.jsx)(n.code,{children:"preview"}),"的",(0,i.jsx)(n.code,{children:"scroll"}),"事件，但我们又同时监听了",(0,i.jsx)(n.code,{children:"preview"}),"的",(0,i.jsx)(n.code,{children:"scroll"}),"事件："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"preview.addEventListener('scroll', function(evt) {\n  update(preview, editor, hintbar);\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["所以我们又执行了一次",(0,i.jsx)(n.code,{children:"update(preview, editor, hintbar)"}),"，而在这里面，我们又反过来更新了",(0,i.jsx)(n.code,{children:"editor"}),"的",(0,i.jsx)(n.code,{children:"scrollTop"}),"，于是又触发了",(0,i.jsx)(n.code,{children:"editor"}),"的",(0,i.jsx)(n.code,{children:"scroll"}),"事件，这样来回反复触发，根本停不下来……"]}),"\n",(0,i.jsxs)(n.p,{children:["所以，要解决这个问题，我们需要保证，当",(0,i.jsx)(n.code,{children:"preview"}),"的",(0,i.jsx)(n.code,{children:"scroll"}),"事件被触发时，不应该马上触发",(0,i.jsx)(n.code,{children:"editor"}),"的",(0,i.jsx)(n.code,{children:"scroll"}),"事件。这个问题我们可以中用前面学过的",(0,i.jsx)(n.code,{children:"debounce"}),"函数来解决："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function debounce(fn, ms = 100) {\n  let debounceTimer = null;\n  return function(...args) {\n    if(debounceTimer) clearTimeout(debounceTimer);\n\n    debounceTimer = setTimeout(() => {\n      fn.apply(this, args);\n    }, ms);\n  }\n}\n\nlet scrollingTarget = null;\neditor.addEventListener('scroll', function(evt){\n  if(!scrollingTarget) scrollingTarget = editor;\n  if(scrollingTarget === editor) update(editor, preview, hintbar);\n});\n\neditor.addEventListener('scroll', debounce(function(evt){\n  scrollingTarget = null;\n}));\n\npreview.addEventListener('scroll', function(evt){  \n  if(!scrollingTarget) scrollingTarget = preview;\n  if(scrollingTarget === preview) update(preview, editor, hintbar);\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["我们定义一个",(0,i.jsx)(n.code,{children:"scrollingTarge"}),"t对象，当它为",(0,i.jsx)(n.code,{children:"null"}),"时，",(0,i.jsx)(n.code,{children:"editor"}),"或",(0,i.jsx)(n.code,{children:"preview"}),"哪一边的scroll先触发，我们就把",(0,i.jsx)(n.code,{children:"scrollingTarget"}),"设为对应的对象。我们设定当scroll事件触发时，",(0,i.jsx)(n.code,{children:"scrollingTarget"}),"与对应的对象相同时才会执行",(0,i.jsx)(n.code,{children:"update"}),"。这样，如果我们先滚动",(0,i.jsx)(n.code,{children:"editor"}),"，那么",(0,i.jsx)(n.code,{children:"scrollingTarget"}),"的值被设为",(0,i.jsx)(n.code,{children:"editor"}),",这样就只有",(0,i.jsx)(n.code,{children:"editor"}),"的滚动事件中，",(0,i.jsx)(n.code,{children:"update"}),"才会被触发。"]}),"\n",(0,i.jsxs)(n.p,{children:["直到",(0,i.jsx)(n.code,{children:"editor"}),"滚动结束，我们再将",(0,i.jsx)(n.code,{children:"scrollingTarget"}),"重新设为null："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"editor.addEventListener('scroll', debounce(function(evt){\n  scrollingTarget = null;\n}));\n\n/* 或者\npreview.addEventListener('scroll', debounce(function(evt){\n  scrollingTarget = null;\n}));\n*/\n"})}),"\n",(0,i.jsxs)(n.p,{children:["注意，因为不论哪一边调用",(0,i.jsx)(n.code,{children:"update"}),"，都会触发另一边的scroll事件，所以这里我们只要",(0,i.jsx)(n.code,{children:"editor"}),"或",(0,i.jsx)(n.code,{children:"preivew"}),"任意一边注册了这个",(0,i.jsx)(n.code,{children:"debounce"}),"变换后的函数即可，不需要两边都注册。这样我们就正常实现了滚动文字的功能了。",(0,i.jsx)(n.a,{href:"https://junyux.github.io/FE-Advance/day07/index4-v1.html",target:"_blank",rel:"noopener noreferrer",children:"在线演示"})]}),"\n",(0,i.jsxs)(n.p,{children:["但是，上述的实现方式有明显的缺点：将三个UI元素的状态同步耦合在一个",(0,i.jsx)(n.code,{children:"update"}),"函数里处理，导致这个方法不通用。假设我们要增加一个同步状态的对象或者减少一个同步状态的对象，我们都需要修改",(0,i.jsx)(n.code,{children:"update"}),"的代码，而且将来要组合不同的操作改变状态也会非常麻烦。"]}),"\n",(0,i.jsx)(n.p,{children:"所以，我们需要引入一种设计模式，降低这种同步状态的耦合度，使得状态同步的功能易于维护。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"中间人（Mediator）"})}),"\n",(0,i.jsxs)(n.p,{children:["一个最简单的",(0,i.jsx)(n.code,{children:"Mediator"}),"模式的类定义如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"class PubSub {\n  constructor() {\n    this.subscribers = {};\n  }\n\n  /*\n    @type 消息类型，如scroll\n    @receiver 订阅者\n    @fn 响应消息的处理函数\n  */\n  sub(type, receiver, fn) {\n    this.subscribers[type] = this.subscribers[type] || [];\n    this.subscribers[type].push(fn.bind(receiver));\n  }\n\n  /*\n    @type 消息类型\n    @sender 派发消息者\n    @data 数据，比如状态数据\n  */\n  pub(type, sender, data) {\n    const subscribers = this.subscribers[type];\n    subscribers.forEach((subscriber) => {\n      subscriber({type, sender, data});\n    });\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"PubSub"}),"类定义了一个中间人的行为。",(0,i.jsx)(n.code,{children:"sub"}),"方法收集订阅者的关于",(0,i.jsx)(n.code,{children:"type"}),"类型的响应行为。",(0,i.jsx)(n.code,{children:"pub"}),"方法将",(0,i.jsx)(n.code,{children:"type"}),"类型的消息派发给所有注册了该类型消息的订阅者。"]}),"\n",(0,i.jsxs)(n.p,{children:["然后，我们让",(0,i.jsx)(n.code,{children:"preview"}),"、",(0,i.jsx)(n.code,{children:"editor"}),"、",(0,i.jsx)(n.code,{children:"hintbar"}),"元素分别监听",(0,i.jsx)(n.code,{children:"scroll"}),"类型的消息。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function scrollTo({data:p}){\n  this.scrollTop = p * (this.scrollHeight - this.clientHeight);\n}\n\nvar mediator = new PubSub();\nmediator.sub('scroll', preview, scrollTo);\nmediator.sub('scroll', editor, scrollTo);\nmediator.sub('scroll', hintbar, function({data:p}){\n  this.innerHTML = Math.round(p * 100) + '%';\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["接着，我们在",(0,i.jsx)(n.code,{children:"editor"}),"和",(0,i.jsx)(n.code,{children:"preview"}),"元素滚动的时候，让中间人派发消息："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function debounce(fn, ms = 100) {\n  let debounceTimer = null;\n  return function(...args) {\n    if(debounceTimer) clearTimeout(debounceTimer);\n\n    debounceTimer = setTimeout(() => {\n      fn.apply(this, args);\n    }, ms);\n  }\n}\n\nlet scrollingTarget = null;\neditor.addEventListener('scroll', debounce(function(evt){\n  scrollingTarget = null;\n}));\n\nfunction updateScroll(evt) {\n  var target = evt.target;\n  if(!scrollingTarget) scrollingTarget = target;\n  if(scrollingTarget === target) {\n    var scrollRange = target.scrollHeight - target.clientHeight,\n      p = target.scrollTop / scrollRange;\n\n    // 中间人派发scroll消息\n    mediator.pub('scroll', target, p);\n  }\n}\neditor.addEventListener('scroll', updateScroll);\npreview.addEventListener('scroll', updateScroll);\n"})}),"\n",(0,i.jsx)(n.p,{children:"注意这里一样要使用debounce。"}),"\n",(0,i.jsx)(n.p,{children:"这样我们就实现了同样的同步滚动，完整的JavaScript代码如下："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://junyux.github.io/FE-Advance/day07/index4-v2.html",target:"_blank",rel:"noopener noreferrer",children:"在线演示"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function Editor(input, preview) {\n  this.update = function () {\n    preview.innerHTML = markdown.toHTML(input.value);\n  };\n  input.editor = this;\n  this.update();\n}\nnew Editor(editor, preview);\n\nclass PubSub {\n  constructor() {\n    this.subscribers = {};\n  }\n  pub(type, sender, data){\n    var subscribers = this.subscribers[type];\n    subscribers.forEach(function(subscriber){\n      subscriber({type, sender, data});\n    });\n  }\n  sub(type, receiver, fn){\n    this.subscribers[type] = this.subscribers[type] || [];\n    this.subscribers[type].push(fn.bind(receiver));\n  }\n}\n\nfunction scrollTo({data:p}){\n  this.scrollTop = p * (this.scrollHeight - this.clientHeight);\n}\n\nvar mediator = new PubSub();\nmediator.sub('scroll', preview, scrollTo);\nmediator.sub('scroll', editor, scrollTo);\nmediator.sub('scroll', hintbar, function({data:p}){\n  this.innerHTML = Math.round(p * 100) + '%';\n});\n\nfunction debounce(fn, ms = 100) {\n  let debounceTimer = null;\n  return function(...args) {\n    if(debounceTimer) clearTimeout(debounceTimer);\n\n    debounceTimer = setTimeout(() => {\n      fn.apply(this, args);\n    }, ms);\n  }\n}\n\nlet scrollingTarget = null;\neditor.addEventListener('scroll', debounce(function(evt){\n  scrollingTarget = null;\n}));\n\nfunction updateScroll(evt) {\n  var target = evt.target;\n  if(!scrollingTarget) scrollingTarget = target;\n  if(scrollingTarget === target) {\n    var scrollRange = target.scrollHeight - target.clientHeight,\n      p = target.scrollTop / scrollRange;\n    mediator.pub('scroll', target, p);\n  }\n}\neditor.addEventListener('scroll', updateScroll);\npreview.addEventListener('scroll', updateScroll);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["这一版代码与前面的代码相比看上去更长了，但是它不再将所有的状态同步耦合在一个",(0,i.jsx)(n.code,{children:"update"}),"函数里，而是分成了发布和订阅两个部分，而且",(0,i.jsx)(n.code,{children:"preview"}),"、",(0,i.jsx)(n.code,{children:"editor"}),"、",(0,i.jsx)(n.code,{children:"hintbar"}),"是分别订阅scroll消息的，这样就保证了UI状态的独立性。假设将来我们要取消",(0,i.jsx)(n.code,{children:"hintbar"}),"的状态同步，我们可以直接注释掉订阅消息的代码："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// mediator.sub('scroll', hintbar, function({data:p}){\n//   this.innerHTML = Math.round(p * 100) + '%';\n// });\n"})}),"\n",(0,i.jsx)(n.p,{children:"这样就不需要修改任何函数的内部实现，从而提高了系统的可维护性。"}),"\n",(0,i.jsx)(n.p,{children:"当我们需要同步多个UI状态时，可以考虑采用中间人模式，用中间人统一管理UI组件的消息，在这个场景下，中间人是一个非常有效的设计模式。"}),"\n",(0,i.jsx)(n.p,{children:"今天的故事主要讲解了前端开发中两个非常常用的设计模式——行为模式和中间人模式。虽然前端开发还有很多其他的设计模式，但是这个超出了这门课的范畴。我们会在将来的设计模式的专门课程中详细讲解，敬请期待。"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}let p=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6%2010%20%E6%97%A5%E8%B0%88%2F7.%E7%AC%AC%E4%B8%83%E6%97%A5%EF%BC%9A%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md"]={toc:[{text:"第一个故事：图片预览",id:"第一个故事图片预览",depth:2},{text:"抽象行为（behavior）",id:"抽象行为behavior",depth:3},{text:"第二个故事：图片选择器",id:"第二个故事图片选择器",depth:2},{text:"第三个故事：滚动的文字",id:"第三个故事滚动的文字",depth:2}],title:"7.第七日：常用设计模式",headingTitle:"7.第七日：常用设计模式",frontmatter:{}}}}]);