"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["56768"],{782551:function(e,n,r){r.r(n),r.d(n,{default:()=>h});var d=r(552676),s=r(740453);let c=r.p+"static/image/f49a5d1bd54d99a3d6ddca0aba7a67ef.67133109.webp";function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",strong:"strong",h2:"h2",pre:"pre",ol:"ol",li:"li",img:"img",h3:"h3",ul:"ul",blockquote:"blockquote"},(0,s.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"7-基础篇如何高效地创建遍历与搜索数组",children:["7 基础篇｜如何高效地创建、遍历与搜索数组？",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-基础篇如何高效地创建遍历与搜索数组",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["数组（",(0,d.jsx)(n.code,{children:"Array"}),"）是除了对象以外的最常用的数据集合结构。在如 C++、Java 等静态编译型语言中，数组只能存储同类型的数组，且数组的长度是固定的，这是因为数组在内存上是一片连续的区域，虽然容量不可变，但是在定位、遍历上非常高效。"]}),"\n",(0,d.jsxs)(n.p,{children:["相比而言，",(0,d.jsx)(n.strong,{children:"JavaScript 的数组更加灵活，不但可以存储不同类型的数组，而且数组的容量也可以灵活地扩展和收缩"}),"。这背后是 JavaScript 底层引擎的实现，是",(0,d.jsx)(n.code,{children:"空间和效率的平衡"}),"，比如 Chrome 使用的 V8 引擎，在实现数组上就有连续内存和哈希表两种结构。"]}),"\n",(0,d.jsxs)(n.p,{children:["本章内容，我们来系统性地梳理数组在",(0,d.jsx)(n.code,{children:"创建"}),"、",(0,d.jsx)(n.code,{children:"遍历"}),"和",(0,d.jsx)(n.code,{children:"搜索"}),"上的方法，希望大家能够掌握对应需求环境下的最简单、高效的编码实现。"]}),"\n",(0,d.jsxs)(n.h2,{id:"构造数组",children:["构造数组",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构造数组",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"可以用中括号来声明一个数组字面量，它的每一个位置都已经初始化好了数据，数组的长度也定了。虽然可以后期更改，但是可能带有一定的开销。"}),"\n",(0,d.jsxs)(n.p,{children:["如果数据量一定，我们应该更倾向于用 ",(0,d.jsx)(n.code,{children:"Array()"})," 构造器来初始化一个有确切容量的空数组。这个数组每一个位置上都没有数据。注意，",(0,d.jsx)(n.strong,{children:"没有数据不代表是 undefined"}),"，如果在 Chrome 下把这个数据打印出来："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"const arr = new Array(5);\nconsole.log(arr); // [空属性 \xd7 5]\n"})}),"\n",(0,d.jsxs)(n.p,{children:["使用 ",(0,d.jsx)(n.code,{children:"fill"})," 函数可以批量填充任意数据，再打印出来即可看到 undefined 和无数据之间的区别了："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"arr.fill(undefined);\nconsole.log(arr); // [undefined \xd7 5]\n"})}),"\n",(0,d.jsxs)(n.p,{children:["如何从运行结果上分辨这两种状态呢？很简单，无数据代表数组对象没有这个 key，有数据代表数组对象有这个 key，但是值为 undefined，因此使用 ",(0,d.jsx)(n.code,{children:"hasOwnProperty"})," 函数或者 ",(0,d.jsx)(n.code,{children:"in"})," 操作符："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"const arr = new Array(5);\n\narr.hasOwnProperty(0); // false\n0 in arr; // false\n\narr.fill(undefined);\n\narr.hasOwnProperty(0); // true\n0 in arr; // true\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Array()"})," 构造器也可以传入一个以上的参数，不过这时候参数的意义就发生了变化："]}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsx)(n.li,{children:"不传参数，代表空数组；"}),"\n",(0,d.jsx)(n.li,{children:"传入 1 个参数，代表的数组的长度；"}),"\n",(0,d.jsx)(n.li,{children:"传入多个参数，代表的是数组内初始化数据，和中括号语法的结构是等价的。"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"我们看这样一个例子："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"function createArray(...params) {\n    return new Array(...params);\n}\n\ncreateArray(5);\ncreateArray(5, 6);\n"})}),"\n",(0,d.jsxs)(n.p,{children:["第一个 ",(0,d.jsx)(n.code,{children:"createArray"})," 的调用返回的是一个长度为 5 的无数据数组，而第二个调用返回的包含数字 5 和 6 的长度为 2 的有数据数组。"]}),"\n",(0,d.jsxs)(n.p,{children:["是不是很迷惑这个 API 为什么这么设计呢？应该也是一个遗留问题，ECMAScript 后面进行了补救，传入多个参数的这种用法，不再建议使用 Array 构造器，而是推荐用静态方法 ",(0,d.jsx)(n.code,{children:"Array.of()"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Array.of"})," 没有歧义性，传入的参数一定都是数组的成员："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"Array.of(5) // [5]\n"})}),"\n",(0,d.jsxs)(n.p,{children:["有意思的是，",(0,d.jsx)(n.code,{children:"Array.of"})," 函数并非必须在 Array 上调用，如果你有一个构造函数，它有唯一一个 Number 类型的参数，那么就可以作为这函数的上下文："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"class Queue {\n    size;\n    constructor(size) {\n        this.size = size;\n    }\n}\n\nconsole.log(Array.of.call(Queue, 15, 16))\n"})}),"\n",(0,d.jsx)(n.p,{children:"在 Chrome 下打印就是这个效果："}),"\n",(0,d.jsxs)(n.p,{children:["简单来说，",(0,d.jsx)(n.code,{children:"Array.of"})," 的逻辑非常简单，这是我实现的一个："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"function myArrayOf(...elements) {\n    // 以 this 为构造函数，传入当前函数的参数个数作为唯一构造参数\n    const obj = Reflect.construct(this, [elements.length]);\n    \n    // 在生成的对象上创建序号为 key 的各种属性\n    for (const [index, value] of elements.entries()) {\n        Object.defineProperty(obj, index, {\n            value,\n            enumerable: true,\n            configurable: true,\n            writable: true,\n        });\n    }\n    \n    // 添加 length 属性，值为当前函数的参数个数\n    Object.defineProperty(obj, 'length', {\n        value: elements.length,\n        enumerable: true,\n        configurable: true,\n        writable: true,\n    });\n\n    return obj;\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:"事实上很多 Array 的函数都不要求必须在 Array 上执行，相对来说会比较通用，下面我们还会提到。"}),"\n",(0,d.jsxs)(n.p,{children:["无论是 ",(0,d.jsx)(n.code,{children:"Array()"})," 构造器还是 ",(0,d.jsx)(n.code,{children:"Array.of()"})," 函数，数组的初始化值都是静态传入的。如果希望每个位置的值不一样，带有一定的逻辑，除了可以遍历赋值以外，还可以使用 ",(0,d.jsx)(n.code,{children:"Array.from()"}),"。"]}),"\n",(0,d.jsx)(n.p,{children:"假设有这样一个诉求：生成一个数组，包含有序的 26 个大写英文字母。如何最简单地实现？"}),"\n",(0,d.jsxs)(n.p,{children:["使用 ",(0,d.jsx)(n.code,{children:"Array.from()"})," 配合 ",(0,d.jsx)(n.code,{children:"Array()"})," 可以轻松地以一行代码实现："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"Array.from(new Array(26), (val, index) => String.fromCodePoint(65 + index));\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Array.from()"})," 常常用来把一个类数组、同步迭代对象转换为数组，在前面的章节中，我们讲到过 String 的 matchAll 会返回一个迭代器，我们就是用 ",(0,d.jsx)(n.code,{children:"Array.from()"})," 来转换成数组打印出来的。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Array.from()"})," 的第二个参数是一个 mapper 函数，用来把每一项数据做一个映射。"]}),"\n",(0,d.jsxs)(n.p,{children:["如果数组的每一项都是同一个值，那么可以用数组实例的 ",(0,d.jsx)(n.code,{children:"fill()"})," 函数来填充，否则的话，",(0,d.jsx)(n.code,{children:"Array.from()"})," 是一个更好的方案。"]}),"\n",(0,d.jsx)(n.p,{children:"构造完了数组，作为数据集合，我们最常见的操作就是遍历。"}),"\n",(0,d.jsxs)(n.h2,{id:"数组的遍历",children:["数组的遍历",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数组的遍历",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["遍历数组用 ",(0,d.jsx)(n.code,{children:"for 循环"})," 、",(0,d.jsx)(n.code,{children:"while 循环"})," 都是常规的办法，在 ES5 以后增加了 ",(0,d.jsx)(n.code,{children:"forEach"})," 实例函数，相对来说，它的特点是",(0,d.jsx)(n.strong,{children:"不允许中途退出"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"for...in"})," 和 ",(0,d.jsx)(n.code,{children:"for...of"})," 也可以遍历数组，它们有很大的区别。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"for...in"})," 以普通对象的方式来遍历数组，这意味着，如果数组对象上有其他属性，很可能也被遍历出来，比如我们之前讲到的正则的 exec 的特殊数组结构："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"/[A-Z]+/.exec(\"AC78\") // ['AC', index: 0, input: 'AC78', groups: undefined]\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"for...in"})," 会把 index、input、groups 也遍历出来，这可能不是你想要的结果。"]}),"\n",(0,d.jsxs)(n.p,{children:["有人一定会问，数组上还有 every、forEach、map、find 等等这些方法，虽然在原型链上，但是应该也能被 ",(0,d.jsx)(n.code,{children:"for...in"})," 遍历出来才对呀？"]}),"\n",(0,d.jsxs)(n.p,{children:["对此，ECMAScript 做了精心的设计，这些数组的方法都是不可枚举的（",(0,d.jsx)(n.code,{children:"non-enumerable"}),"），通过下面的代码可以看得出来："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"Object.getOwnPropertyDescriptor(Array.prototype, 'find')\n"})}),"\n",(0,d.jsx)(n.p,{children:"Chrome 下打印出："}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"enumerable"})," 是 false，代表了其不可被 ",(0,d.jsx)(n.code,{children:"for...in"})," 遍历出来。"]}),"\n",(0,d.jsxs)(n.p,{children:["无论如何，",(0,d.jsx)(n.code,{children:"for...in"})," 仍然具有潜在的风险，因此更加建议使用 ",(0,d.jsx)(n.code,{children:"for...of"})," 方式："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"for (const val of [1,2,3]) {\n    console.log(val);\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:["相比而言，",(0,d.jsxs)(n.strong,{children:[(0,d.jsx)(n.code,{children:"for...of"})," 能利用数组具有迭代器的特性，安全地遍历数组"]}),"，唯一遗憾的可能是它不能直接输出序号，不过也有“曲线救国”的办法："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"for (const [index, val] of [1,2,3].entries()) {\n    console.log(index, val);\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:"遍历对于数组来说至关重要，能实现所有需求，不过对于一些简单的场景，写起来还是比较麻烦，ECMAScript 提供了数组的更多方法以供高效调用。"}),"\n",(0,d.jsxs)(n.h2,{id:"数组的搜索",children:["数组的搜索",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数组的搜索",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"数组的搜索指的是找到想要的元素，可能需要位置序号，也可能需要元素本身，还可能只是想知道有没有找到。"}),"\n",(0,d.jsx)(n.p,{children:"遍历操作能够实现任意的搜索需求，不过使用 Array 的实例函数更方便一些。"}),"\n",(0,d.jsxs)(n.h3,{id:"找到位置序号",children:["找到位置序号",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#找到位置序号",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["搜索特定元素在数组中的位置，通常可以使用 ",(0,d.jsx)(n.code,{children:"indexOf"}),"、",(0,d.jsx)(n.code,{children:"lastIndexOf"}),"、",(0,d.jsx)(n.code,{children:"findIndex"}),"、",(0,d.jsx)(n.code,{children:"findLastIndex"})," 这四个函数。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"indexOf"})," 和 ",(0,d.jsx)(n.code,{children:"lastIndexOf"})," 有两个特殊情况需要关注："]}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["它们不认为数组中的无数据位置是 undefined，即 ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"new Array(5).indexOf(undefined) === -1"})}),"；"]}),"\n",(0,d.jsxs)(n.li,{children:["它们无法搜索到 NaN，即 ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"[NaN].indexOf(NaN) === -1"})}),"。"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"因此，如果你的场景中有这样的情况，那么对于结果就需要小心了。"}),"\n",(0,d.jsx)(n.p,{children:"要理解这样的行为，我们需要从 ECMAScript 的规范定义出发，我摘录其中最关键的部分，来说明这两个函数的关键运行原理："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["关键点 1：按照顺序（indexOf 是从前往后，lastIndexOf 是后往前）遍历数据，对于下标 index，要保证数组有这个属性，可理解为 ",(0,d.jsx)(n.code,{children:"array.hasOwnProperty(index) === true"})," 要成立，因此无数据的那些位置并不会被当作 undefined；"]}),"\n",(0,d.jsxs)(n.li,{children:["关键点 2：使用规范内部的 ",(0,d.jsx)(n.code,{children:"IsStrictlyEqual(x, y)"})," 函数来比较两个对象，这个函数可以理解为就是符号 ",(0,d.jsx)(n.code,{children:"==="}),"，我们都知道 ",(0,d.jsx)(n.code,{children:"(NaN === NaN) === false"}),"，因此 NaN 无法被搜索得到。"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["根据以上两点，我们甚至可以大概写出自己的 ",(0,d.jsx)(n.code,{children:"indexOf"}),"："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"Array.prototype.indexOf = function(ele) {\n    for (let i = 0; i < this.length; i += 1) {\n        // 判断有无此数据\n        if (!this.hasOwnProperty(i)) continue;\n        // 严格相等判断\n        if (ele === this[i]) return i;\n    }\n    \n    return -1;\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:["lastIndexOf 类似。注意这两个函数还可以传入第二个参数 ",(0,d.jsx)(n.code,{children:"fromIndex"}),"。这些其实都和 String 的 index/lastIndexOf 一模一样的，同样是 fromIndex 对于 indexOf 是向后搜索，对于 lastIndexOf 是向前搜索。"]}),"\n",(0,d.jsxs)(n.p,{children:["除此以外，近年来新引入的 ",(0,d.jsx)(n.code,{children:"findIndex"})," 和 ",(0,d.jsx)(n.code,{children:"findLastIndex"})," 则没有这样那样的例外，因为它们传入的是一个函数，找到什么样的元素，完全是由你自己定义："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"new Array(5).findIndex(ele => 'undefined' === typeof ele) // 0\n[NaN].findIndex((ele) => isNaN(ele)) // 0\n"})}),"\n",(0,d.jsxs)(n.p,{children:["注意这两个函数允许在非数组对象上运行，这一点和 ",(0,d.jsx)(n.code,{children:"indexOf"}),"/",(0,d.jsx)(n.code,{children:"lastIndexOf"})," 不同。"]}),"\n",(0,d.jsxs)(n.h3,{id:"找到元素本身",children:["找到元素本身",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#找到元素本身",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["毫无疑问，找到了序号，自然就找到了元素本身。不过我们这里一步到位，调用一个函数即完成，那么免不了需要用到 ",(0,d.jsx)(n.code,{children:"find"})," 或者 ",(0,d.jsx)(n.code,{children:"findLast"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:["这两个函数与上面的 ",(0,d.jsx)(n.code,{children:"findIndex"}),"/",(0,d.jsx)(n.code,{children:"findLastIndex"})," 的用法几乎一致，只是第二个参数叫做 ",(0,d.jsx)(n.code,{children:"thisArg"}),"，是第一个函数参数的上下文。"]}),"\n",(0,d.jsx)(n.p,{children:"这一步相比于上一节，已经丢失了下标信息，如果进一步丢失信息的话，相当于元素本身并不重要，只是想知道数组中有没有满足指定要求的要求，进入下一节。"}),"\n",(0,d.jsxs)(n.h3,{id:"判断找没找到",children:["判断找没找到",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#判断找没找到",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"find"}),"、",(0,d.jsx)(n.code,{children:"some"})," 都可以搜索数组中有没有指定的元素。",(0,d.jsx)(n.code,{children:"some"})," 返回布尔语义更清晰，需要传入一个判断函数："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"[NaN, 1, Infinity].some(ele => ele === Infinity);\n"})}),"\n",(0,d.jsxs)(n.p,{children:["如果想直接传入与元素相等的值，",(0,d.jsx)(n.code,{children:"includes"})," 足矣，和 String 同名函数一样。"]}),"\n",(0,d.jsxs)(n.p,{children:["那么一道经典的面试题来了：",(0,d.jsx)(n.strong,{children:"数组的 indexOf 和 includes 在搜索指定元素上有何不同呢？"})]}),"\n",(0,d.jsx)(n.p,{children:"还是那两个特殊情况："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"new Array(5).includes(undefined) // true\n[NaN].includes(NaN) // true\n"})}),"\n",(0,d.jsxs)(n.p,{children:["可想而知，",(0,d.jsx)(n.code,{children:"includes"})," 一定不是 ",(0,d.jsx)(n.code,{children:"IsStrictlyEqual"})," 实现的。确实："]}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["首先，",(0,d.jsx)(n.code,{children:"includes"})," 不会要求 ",(0,d.jsx)(n.code,{children:"array.hasOwnProperty(index) === true"}),"，因此即便在这个下标没有数据，强行读取仍然会读到 undefined；"]}),"\n",(0,d.jsxs)(n.li,{children:["其次，",(0,d.jsx)(n.code,{children:"includes"})," 不使用 ",(0,d.jsx)(n.code,{children:"IsStrictlyEqual"})," 而是 ",(0,d.jsx)(n.code,{children:"SameValueZero"}),"，相对而言，它支撑 NaN 的判断。"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["因此，",(0,d.jsx)(n.code,{children:"includes"})," 相比于 ",(0,d.jsx)(n.code,{children:"indexOf"})," 而言更普适，更建议使用。"]}),"\n",(0,d.jsxs)(n.h2,{id:"小结",children:["小结",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"数组作为最简单的数据集合，是日常编程开发绝对避不开的对象，往往很多算法都是依赖数组实现的。"}),"\n",(0,d.jsxs)(n.p,{children:["相比其他语言而言，JavaScript 的数组对象上有非常多的函数，这些函数无一例外都是不可枚举的，因此完全原始、未经改动的纯数组对象，即便用 ",(0,d.jsx)(n.code,{children:"for...in"})," 也能按照预期地遍历。"]}),"\n",(0,d.jsxs)(n.p,{children:["在这些函数中，大家需要关注哪些是返回新的数组，哪些是修改了当前数组，以免造成意外的结果。截至 ES2023，",(0,d.jsx)(n.code,{children:"pop"}),"、",(0,d.jsx)(n.code,{children:"push"}),"、",(0,d.jsx)(n.code,{children:"shift"}),"、",(0,d.jsx)(n.code,{children:"unshift"}),"、",(0,d.jsx)(n.code,{children:"splice"}),"、",(0,d.jsx)(n.code,{children:"sort"}),"、",(0,d.jsx)(n.code,{children:"reverse"}),"、",(0,d.jsx)(n.code,{children:"copyWithin"})," 仍然是仅有的 8 个修改当前数组的方法。前面 4 个非常容易理解，而后面 4 个则会存在一定的歧义——到底是返回了新数组，还是修改了原数组呢？"]}),"\n",(0,d.jsxs)(n.p,{children:["为了减少这种歧义，ES2023 又引入了对应的 4 个新函数：",(0,d.jsx)(n.code,{children:"toSpliced"}),"、",(0,d.jsx)(n.code,{children:"toSorted"}),"、",(0,d.jsx)(n.code,{children:"toReversed"}),"、",(0,d.jsx)(n.code,{children:"with"}),"。它们都会返回新的数组，不会对原始数据进行修改。"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"严格来讲，with 和 copyWithin 没什么对应关系，这里这么讲仅为方便记忆。"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"需要注意的是，这些函数还太新，你要确认你的编译环境是否对它们进行 polyfill。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(i,{...e})}):i(e)}let h=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["JavaScript%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6%2F7%20%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BD%9C%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%9C%B0%E5%88%9B%E5%BB%BA%E3%80%81%E9%81%8D%E5%8E%86%E4%B8%8E%E6%90%9C%E7%B4%A2%E6%95%B0%E7%BB%84%EF%BC%9F.md"]={toc:[{text:"构造数组",id:"构造数组",depth:2},{text:"数组的遍历",id:"数组的遍历",depth:2},{text:"数组的搜索",id:"数组的搜索",depth:2},{text:"找到位置序号",id:"找到位置序号",depth:3},{text:"找到元素本身",id:"找到元素本身",depth:3},{text:"判断找没找到",id:"判断找没找到",depth:3},{text:"小结",id:"小结",depth:2}],title:"7 基础篇｜如何高效地创建、遍历与搜索数组？",headingTitle:"7 基础篇｜如何高效地创建、遍历与搜索数组？",frontmatter:{}}}}]);