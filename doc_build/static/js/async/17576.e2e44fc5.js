"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["17576"],{63490:function(n,e,i){i.r(e),i.d(e,{default:()=>d});var c=i(552676),r=i(740453);function s(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",ul:"ul",li:"li"},(0,r.ah)(),n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"函数式编程",children:["函数式编程",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数式编程",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。"}),"\n",(0,c.jsx)(e.p,{children:"ES6 的种种新增功能，使得函数式编程变得更方便、更强大。本章介绍 ES6 如何进行函数式编程。"}),"\n",(0,c.jsxs)(e.h2,{id:"柯里化",children:["柯里化",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#柯里化",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"柯里化（currying）指的是将一个多参数的函数拆分成一系列函数，每个拆分后的函数都只接受一个参数（unary）。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"function add (a, b) {\n  return a + b;\n}\n\nadd(1, 1) // 2\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，函数",(0,c.jsx)(e.code,{children:"add"}),"接受两个参数",(0,c.jsx)(e.code,{children:"a"}),"和",(0,c.jsx)(e.code,{children:"b"}),"。"]}),"\n",(0,c.jsx)(e.p,{children:"柯里化就是将上面的函数拆分成两个函数，每个函数都只接受一个参数。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"function add (a) {\n  return function (b) {\n    return a + b;\n  }\n}\n// 或者采用箭头函数写法\nconst add = x => y => x + y;\n\nconst f = add(1);\nf(1) // 2\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，函数",(0,c.jsx)(e.code,{children:"add"}),"只接受一个参数",(0,c.jsx)(e.code,{children:"a"}),"，返回一个函数",(0,c.jsx)(e.code,{children:"f"}),"。函数",(0,c.jsx)(e.code,{children:"f"}),"也只接受一个参数",(0,c.jsx)(e.code,{children:"b"}),"。"]}),"\n",(0,c.jsxs)(e.h2,{id:"函数合成",children:["函数合成",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数合成",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"函数合成（function composition）指的是，将多个函数合成一个函数。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"const compose = f => g => x => f(g(x));\n\nconst f = compose (x => x * 4) (x => x + 3);\nf(2) // 20\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"compose"}),"就是一个函数合成器，用于将两个函数合成一个函数。"]}),"\n",(0,c.jsx)(e.p,{children:"可以发现，柯里化与函数合成有着密切的联系。前者用于将一个函数拆成多个函数，后者用于将多个函数合并成一个函数。"}),"\n",(0,c.jsxs)(e.h2,{id:"参数倒置",children:["参数倒置",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#参数倒置",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"参数倒置（flip）指的是改变函数前两个参数的顺序。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"var divide = (a, b) => a / b;\nvar flip = f.flip(divide);\n\nflip(10, 5) // 0.5\nflip(1, 10) // 10\n\nvar three = (a, b, c) => [a, b, c];\nvar flip = f.flip(three);\nflip(1, 2, 3); // => [2, 1, 3]\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面代码中，如果按照正常的参数顺序，10 除以 5 等于 2。但是，参数倒置以后得到的新函数，结果就是 5 除以 10，结果得到 0.5。如果原函数有 3 个参数，则只颠倒前两个参数的位置。"}),"\n",(0,c.jsx)(e.p,{children:"参数倒置的代码非常简单。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let f = {};\nf.flip =\n  fn =>\n    (a, b, ...args) => fn(b, a, ...args.reverse());\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"执行边界",children:["执行边界",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#执行边界",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"执行边界（until）指的是函数执行到满足条件为止。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let condition = x => x > 100;\nlet inc = x => x + 1;\nlet until = f.until(condition, inc);\n\nuntil(0) // 101\n\ncondition = x => x === 5;\nuntil = f.until(condition, inc);\n\nuntil(3) // 5\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，第一段的条件是执行到",(0,c.jsx)(e.code,{children:"x"}),"大于 100 为止，所以",(0,c.jsx)(e.code,{children:"x"}),"初值为 0 时，会一直执行到 101。第二段的条件是执行到等于 5 为止，所以",(0,c.jsx)(e.code,{children:"x"}),"最后的值是 5。"]}),"\n",(0,c.jsx)(e.p,{children:"执行边界的实现如下。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let f = {};\nf.until = (condition, f) =>\n  (...args) => {\n    var r = f.apply(null, args);\n    return condition(r) ? r : f.until(condition, f)(r);\n  };\n"})}),"\n",(0,c.jsx)(e.p,{children:"上面代码的关键就是，如果满足条件就返回结果，否则不断递归执行。"}),"\n",(0,c.jsxs)(e.h2,{id:"队列操作",children:["队列操作",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#队列操作",children:"#"})]}),"\n",(0,c.jsx)(e.p,{children:"队列（list）操作包括以下几种。"}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"head"}),"： 取出队列的第一个非空成员。"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"last"}),"： 取出有限队列的最后一个非空成员。"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"tail"}),"： 取出除了“队列头”以外的其他非空成员。"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"init"}),"： 取出除了“队列尾”以外的其他非空成员。"]}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"下面是例子。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"f.head(5, 27, 3, 1) // 5\nf.last(5, 27, 3, 1) // 1\nf.tail(5, 27, 3, 1) // [27, 3, 1]\nf.init(5, 27, 3, 1) // [5, 27, 3]\n"})}),"\n",(0,c.jsx)(e.p,{children:"这些方法的实现如下。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let f = {};\nf.head = (...xs) => xs[0];\nf.last = (...xs) => xs.slice(-1);\nf.tail = (...xs) => Array.prototype.slice.call(xs, 1);\nf.init = (...xs) => xs.slice(0, -1);\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"合并操作",children:["合并操作",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#合并操作",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["合并操作分为",(0,c.jsx)(e.code,{children:"concat"}),"和",(0,c.jsx)(e.code,{children:"concatMap"}),"两种。前者就是将多个数组合成一个，后者则是先处理一下参数，然后再将处理结果合成一个数组。"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"f.concat([5], [27], [3]) // [5, 27, 3]\nf.concatMap(x => 'hi ' + x, 1, [[2]], 3) // ['hi 1', 'hi 2', 'hi 3']\n"})}),"\n",(0,c.jsx)(e.p,{children:"这两种方法的实现代码如下。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let f = {};\nf.concat =\n  (...xs) => xs.reduce((a, b) => a.concat(b));\nf.concatMap =\n  (f, ...xs) => f.concat(xs.map(f));\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"配对操作",children:["配对操作",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配对操作",children:"#"})]}),"\n",(0,c.jsxs)(e.p,{children:["配对操作分为",(0,c.jsx)(e.code,{children:"zip"}),"和",(0,c.jsx)(e.code,{children:"zipWith"}),"两种方法。",(0,c.jsx)(e.code,{children:"zip"}),"操作将两个队列的成员，一一配对，合成一个新的队列。如果两个队列不等长，较长的那个队列多出来的成员，会被忽略。",(0,c.jsx)(e.code,{children:"zipWith"}),"操作的第一个参数是一个函数，然后会将后面的队列成员一一配对，输入该函数，返回值就组成一个新的队列。"]}),"\n",(0,c.jsx)(e.p,{children:"下面是例子。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let a = [0, 1, 2];\nlet b = [3, 4, 5];\nlet c = [6, 7, 8];\n\nf.zip(a, b) // [[0, 3], [1, 4], [2, 5]]\nf.zipWith((a, b) => a + b, a, b, c) // [9, 12, 15]\n"})}),"\n",(0,c.jsxs)(e.p,{children:["上面代码中，",(0,c.jsx)(e.code,{children:"zipWith"}),"方法的第一个参数是一个求和函数，它将后面三个队列的成员，一一配对进行相加。"]}),"\n",(0,c.jsx)(e.p,{children:"这两个方法的实现如下。"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-javascript",children:"let f = {};\n\nf.zip = (...xs) => {\n  let r = [];\n  let nple = [];\n  let length = Math.min.apply(null, xs.map(x => x.length));\n\n  for (var i = 0; i < length; i++) {\n    xs.forEach(\n      x => nple.push(x[i])\n    );\n\n    r.push(nple);\n    nple = [];\n  }\n\n  return r;\n};\n\nf.zipWith = (op, ...xs) =>\n  f.zip.apply(null, xs).map(\n    (x) => x.reduce(op)\n  );\n"})}),"\n",(0,c.jsxs)(e.h2,{id:"参考链接",children:["参考链接",(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["Mateo Gianolio, ",(0,c.jsx)(e.a,{href:"http://casualjavascript.com/?1",target:"_blank",rel:"noopener noreferrer",children:"Haskell in ES6: Part 1"})]}),"\n"]})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(s,{...n})}):s(n)}let d=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["ECMAScript%206%20%E5%85%A5%E9%97%A8%2F%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.md"]={toc:[{text:"柯里化",id:"柯里化",depth:2},{text:"函数合成",id:"函数合成",depth:2},{text:"参数倒置",id:"参数倒置",depth:2},{text:"执行边界",id:"执行边界",depth:2},{text:"队列操作",id:"队列操作",depth:2},{text:"合并操作",id:"合并操作",depth:2},{text:"配对操作",id:"配对操作",depth:2},{text:"参考链接",id:"参考链接",depth:2}],title:"函数式编程",headingTitle:"函数式编程",frontmatter:{}}}}]);