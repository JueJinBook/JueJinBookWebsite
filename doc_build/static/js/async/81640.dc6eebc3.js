"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["81640"],{358063:function(e,n,r){r.r(n),r.d(n,{default:()=>x});var s=r(552676),a=r(740453);let l=r.p+"static/image/a55c9589685fe21c2728b5e3ee4adea4.72f0fd28.gif",t=r.p+"static/image/cbf915f09b9fe412c3ff38603d1086c9.af73684f.webp",i=r.p+"static/image/d7248c1aa5c3ad868ea88e8dea84af2a.b0952449.gif",o=r.p+"static/image/c83654ce1001e0558b89ab4ddcefa2b0.73e874d8.gif",c=r.p+"static/image/5f6e756f7ef25b962533bdc89aa3d5d1.03c639ad.webp",d=r.p+"static/image/ddea78b61f9b169596fedbf2d0d87d1c.8d5a0aa2.webp";function h(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",strong:"strong",blockquote:"blockquote",h3:"h3",img:"img",pre:"pre",code:"code"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"59实战篇-_-clerk-与登录注册",children:["59.实战篇 _ Clerk 与登录注册",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#59实战篇-_-clerk-与登录注册",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"前言",children:["前言",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"登录与注册，一个说简单也简单，说复杂也复杂的功能。"}),"\n",(0,s.jsx)(n.p,{children:"往简单的说，注册的时候搞两个输入框，将数据写入数据库，登录的时候校验一下数据是否正确即可。"}),"\n",(0,s.jsx)(n.p,{children:"往复杂的说，除了登录注册，还有账号注销、忘记密码、密码重置、邮箱验证、更新个人资料、更新密码、删除账号等功能，此外，数据的安全性如何保证？Magic Links、Multi-Factor Auth (MFA)、社交媒体登录 (Google, Facebook, Twitter, GitHub, Apple, and more) 是否要支持？是不是还要做个后台统计用户登录数据？想一想都是工作量。"}),"\n",(0,s.jsx)(n.p,{children:"所以虽然可以自己从头做，但有现成的还是用现成的吧。"}),"\n",(0,s.jsx)(n.p,{children:"所幸关于登录注册的技术方案，并不像评论系统那么多，推荐 3 个主流的技术选型："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://clerk.com/",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.strong,{children:"Clerk"})})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"The most comprehensive User Management Platform"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Clerk 提供了一个开发人员友好的身份验证和用户管理解决方案，帮助开发者轻松构建和管理用户身份验证、用户账户和权限管理功能。它提供了安全的身份验证、社交登录集成、角色和权限管理等功能。"}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://supabase.com/",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.strong,{children:"Supabase"})})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Supabase is an open source Firebase alternative."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Start your project with a Postgres database, Authentication, instant APIs, Edge Functions, Realtime subscriptions, Storage, and Vector embeddings."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"简单来说，Supabase 是 Firebase 的开源替代品，属于 BaaS（后端即服务）产品。所谓 BaaS，开发者只需要开发和维护前端代码，由 BaaS 服务商提供了开发应用所需要的后端服务，如用户身份验证、数据库管理、推送通知（针对移动应用程序），以及云存储和托管等。"}),"\n",(0,s.jsx)(n.p,{children:"此外，Supabase 建立在 Postgres 之上。Postgres 是一个免费的开源数据库，被认为是世界上最稳定、最先进的数据库之一。"}),"\n",(0,s.jsx)(n.p,{children:"所以用户身份验证只是 Supabase 提供的功能之一。"}),"\n",(0,s.jsx)(n.p,{children:"如果要比较 Clerk 和 Supabse 的话，Clerk 更专注于身份验证和用户管理，对应功能更加丰富。Supabase 实现的功能更多，身份验证只是其中之一。"}),"\n",(0,s.jsx)(n.p,{children:"实际使用的时候，两者也可以一起使用。Clerk 和 Supabse 各自提供了接入对方的文档："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://clerk.com/docs/integrations/databases/supabase",target:"_blank",rel:"noopener noreferrer",children:"Clerk：Integrate Supabase with Clerk"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://supabase.com/partners/integrations/clerk",target:"_blank",rel:"noopener noreferrer",children:"Supabase：Integrate Clerk"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"注意：这两个平台都提供了免费版，但免费版毕竟有一些限制，比如 Clerk 会限制 10000 月活跃用户等，Supabse 会限制 50000 月活跃用户，数据库大小为 500 MB 等等。"}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://next-auth.js.org/getting-started/introduction",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.strong,{children:"Next-Auth"})})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["我们在",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7307859898316881957/section/7317925907765657638",target:"_blank",rel:"noopener noreferrer",children:"《实战篇 | React Notes | next-auth》"}),"介绍的便是 Next-Auth，Next-auth 不是平台，是一个开源库，可以帮助我们快速实现登录注册等功能。"]}),"\n",(0,s.jsx)(n.p,{children:"总的来说，如果要快速接入登录注册功能，最好还是使用平台，也就是 Clerk 和 Supabse，其中 Clerk 提供的功能更为丰富，但免费版月活限制用户数更少。"}),"\n",(0,s.jsx)(n.p,{children:"本篇我们对 Clerk 的使用进行讲解。"}),"\n",(0,s.jsxs)(n.h2,{id:"clerk",children:["Clerk",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#clerk",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"1-clerk-注册并创建应用",children:["1. Clerk 注册并创建应用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-clerk-注册并创建应用",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["打开 ",(0,s.jsx)(n.a,{href:"https://clerk.com/",target:"_blank",rel:"noopener noreferrer",children:"https://clerk.com/"})," 注册一个账号，首次登录后会进入创建应用界面："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,s.jsx)(n.p,{children:"输入应用的名字，左边选择支持的登录方式，右边为预览登录界面 UI，样式会根据左边的选择有所不同。"}),"\n",(0,s.jsx)(n.p,{children:"创建应用后，会跳转到 Get started 页面，指导用户如何接入 Clerk："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:c,alt:"image.png"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-接入-clerk",children:["2. 接入 Clerk",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-接入-clerk",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"为了演示如何接入 Clerk，我们使用官方脚手架创建一个新项目："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx create-next-app@latest\n"})}),"\n",(0,s.jsx)(n.p,{children:"项目安装依赖项："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @clerk/nextjs\n"})}),"\n",(0,s.jsx)(n.p,{children:"添加本地环境变量："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxxxxxxxxxxxxxxxxxxxxxxxx\nCLERK_SECRET_KEY=sk_test_xxxxxxxxxxxxxxxxxxxxxxxxx\n"})}),"\n",(0,s.jsxs)(n.p,{children:["新建 ",(0,s.jsx)(n.code,{children:"middleware.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { clerkMiddleware } from "@clerk/nextjs/server";\n\nexport default clerkMiddleware();\n\nexport const config = {\n  matcher: ["/((?!.*\\\\..*|_next).*)", "/", "/(api|trpc)(.*)"],\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"app/layout.jsx"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import {\n  ClerkProvider,\n  SignInButton,\n  SignedIn,\n  SignedOut,\n  UserButton\n} from '@clerk/nextjs'\nimport './globals.css'\nexport default function RootLayout({\n  children,\n}) {\n  return (\n    <ClerkProvider>\n      <html lang=\"en\">\n        <body>\n          <SignedOut>\n            <SignInButton />\n          </SignedOut>\n          <SignedIn>\n            <UserButton />\n          </SignedIn>\n          {children}\n        </body>\n      </html>\n    </ClerkProvider>\n  )\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"解释下这段代码中用到的组件："}),"\n",(0,s.jsxs)(n.p,{children:["所有 Clerk hooks 和组件都必须是 ",(0,s.jsx)(n.code,{children:"<ClerkProvider>"})," 的子组件，所以我们用 ",(0,s.jsx)(n.code,{children:"<ClerkProvider>"})," 将整个页面代码包裹，该组件会存储 session 和用户上下文数据。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<SignedIn>"}),"下的子组件仅在登录状态时显示。",(0,s.jsx)(n.code,{children:"<SignedOut>"}),"下的子组件仅在非登录状态时显示。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<SignInButton>"})," 是一个链接至登录页面的无样式组件。",(0,s.jsx)(n.code,{children:"<UserButton>"}),"是一个 Clerk 提供的自带样式的组件，用于展示用户头像。"]}),"\n",(0,s.jsx)(n.p,{children:"此时我们就实现了 Clerk 的接入，并已经实现了账号的登录、注册、账号管理、注销等功能。"}),"\n",(0,s.jsxs)(n.p,{children:["打开 ",(0,s.jsx)(n.a,{href:"http://localhost:3000/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/"}),"，浏览器效果如下："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:"4.gif"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-添加中文",children:["3. 添加中文",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-添加中文",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["从上图可以发现，虽然 Clerk 实现了登录注册的功能，但有一个问题，那就是界面都是英文，如何改成中文界面呢？Clerk 也考虑到了这一点，并提供了",(0,s.jsx)(n.a,{href:"https://clerk.com/docs/components/customization/localization",target:"_blank",rel:"noopener noreferrer",children:"本地化方法"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"安装依赖项："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @clerk/localizations\n"})}),"\n",(0,s.jsxs)(n.p,{children:["修改 ",(0,s.jsx)(n.code,{children:"app/layout.js"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import {\n  ClerkProvider,\n  SignInButton,\n  SignedIn,\n  SignedOut,\n  UserButton\n} from \'@clerk/nextjs\'\nimport \'./globals.css\'\nimport { zhCN } from "@clerk/localizations";\n\nexport default function RootLayout({\n  children,\n}) {\n  return (\n    <ClerkProvider localization={zhCN}>\n      <html lang="zh-CN">\n        <body>\n          <SignedOut>\n            <SignInButton mode="modal">\n              登录\n            </SignInButton>\n          </SignedOut>\n          <SignedIn>\n            <UserButton showName={true} />\n          </SignedIn>\n          {children}\n        </body>\n      </html>\n    </ClerkProvider>\n  )\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"此时浏览器效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:i,alt:"5.gif"})}),"\n",(0,s.jsxs)(n.p,{children:["注意：这里",(0,s.jsx)(n.code,{children:"<SignInButton>"})," 的 ",(0,s.jsx)(n.code,{children:"mode"})," 设置为了 ",(0,s.jsx)(n.code,{children:'"modal"'})," 才让登录界面的本地化生效。如果不设置为 modal 则会直接跳转到登录界面，此时本地化不会生效。如果让跳转登录界面也实现本地化的话，可以参考接下来讲到的 Next-js-Boilerplate 的实现方式。"]}),"\n",(0,s.jsxs)(n.h3,{id:"4-后台界面",children:["4. 后台界面",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-后台界面",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Clerk 提供了后台界面，可以查看登录用户数据以及进行登录相关的设置："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:"image.png"})}),"\n",(0,s.jsxs)(n.p,{children:["当然，Clerk 实现的功能远不止如此，你可以完全自定义登录界面、使用内置的组件自定义开发、构架自己的登录流程等等，Clerk 都提供了详细的文档：",(0,s.jsx)(n.a,{href:"https://clerk.com/docs",target:"_blank",rel:"noopener noreferrer",children:"https://clerk.com/docs"})]}),"\n",(0,s.jsxs)(n.h2,{id:"next-js-boilerplate",children:["Next-js-Boilerplate",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#next-js-boilerplate",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"既然我们已经知道了 Next.js 项目如何接入 Clerk，那回到我们之前讲到的 Next-js-Boilerplate 模板。"}),"\n",(0,s.jsxs)(n.h3,{id:"1-基础设置",children:["1. 基础设置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-基础设置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在这个模板中使用 Clerk，最基础的就是设置 ",(0,s.jsx)(n.code,{children:"NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY"})," 和 ",(0,s.jsx)(n.code,{children:"CLERK_SECRET_KEY"}),"。"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["从安全的角度来讲，应该将 ",(0,s.jsx)(n.code,{children:"NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY"})," 放到 ",(0,s.jsx)(n.code,{children:".env"}),"文件中，",(0,s.jsx)(n.code,{children:"CLERK_SECRET_KEY"})," 放到 ",(0,s.jsx)(n.code,{children:".env.local"}),"文件中，并且 Git 不提交 ",(0,s.jsx)(n.code,{children:".env.local"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-登录路由",children:["2. 登录路由",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-登录路由",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["但与之前简易接入 Clerk 的方式不同，在 Next-js-Boilerplate 中，当用户点击 Sign In 的时候，跳转的并不是 Clerk 的登录页面，而是 ",(0,s.jsx)(n.a,{href:"http://localhost:3000/sign-in",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:3000/sign-in"}),"，这是因为在 ",(0,s.jsx)(n.code,{children:".env"}),"中，我们通过 ",(0,s.jsx)(n.code,{children:"CLERK_SIGN_IN_URL"})," 环境变量重新设置了登录的跳转地址："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in\n"})}),"\n",(0,s.jsxs)(n.p,{children:["查看 ",(0,s.jsx)(n.code,{children:"/sign-in"}),"路由对应的文件代码，打开 ",(0,s.jsx)(n.code,{children:"src/app/[locale]/(auth)/(center)/sign-in/[[...sign-in]]/page.tsx"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { SignIn } from '@clerk/nextjs';\nimport { getTranslations } from 'next-intl/server';\nimport { getI18nPath } from '@/utils/Helpers';\n\n// ...\n\nconst SignInPage = (props: { params: { locale: string } }) => (\n  <SignIn path={getI18nPath('/sign-in', props.params.locale)} />\n);\n\nexport default SignInPage;\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在这个页面路由中，我们使用了 Clerk 提供的 ",(0,s.jsx)(n.code,{children:"<SignIn>"})," 组件来渲染登录界面，其中 ",(0,s.jsx)(n.code,{children:"path"})," 属性用来设置组件挂载的路径。"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-中文设置",children:["3. 中文设置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-中文设置",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"如果我们的 Next-js-Boilerplate 要实现默认中文登录界面的效果，该如何实现呢？"}),"\n",(0,s.jsxs)(n.p,{children:["首先，修改 ",(0,s.jsx)(n.code,{children:"src/utils/AppConfig.ts"}),"，完整代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import type { LocalePrefix } from 'node_modules/next-intl/dist/types/src/shared/types';\n\nconst localePrefix: LocalePrefix = 'as-needed';\n\nexport const AppConfig = {\n  name: 'Nextjs Starter',\n  locales: ['zh', 'en'],\n  defaultLocale: 'zh',\n  localePrefix,\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后修改 ",(0,s.jsx)(n.code,{children:"src/app/[locale]/(auth)/layout.tsx"}),"，完整代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { enUS, zhCN } from '@clerk/localizations';\nimport { ClerkProvider } from '@clerk/nextjs';\n\nexport default function AuthLayout(props: {\n  children: React.ReactNode;\n  params: { locale: string };\n}) {\n  let clerkLocale = zhCN;\n  let signInUrl = '/sign-in';\n  let signUpUrl = '/sign-up';\n  let dashboardUrl = '/dashboard';\n\n  if (props.params.locale === 'en') {\n    clerkLocale = enUS;\n  }\n\n  if (props.params.locale !== 'zh') {\n    signInUrl = `/${props.params.locale}${signInUrl}`;\n    signUpUrl = `/${props.params.locale}${signUpUrl}`;\n    dashboardUrl = `/${props.params.locale}${dashboardUrl}`;\n  }\n\n  return (\n    <ClerkProvider\n      localization={clerkLocale}\n      signInUrl={signInUrl}\n      signUpUrl={signUpUrl}\n      signInFallbackRedirectUrl={dashboardUrl}\n      signUpFallbackRedirectUrl={dashboardUrl}\n      >\n      {props.children}\n    </ClerkProvider>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["最后，添加翻译文件，新建 ",(0,s.jsx)(n.code,{children:"src/locales/zh.json"}),"，代码如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'{\n  "RootLayout": {\n    "home_link": "主页",\n    "about_link": "关于",\n    "guestbook_link": "Guestbook",\n    "portfolio_link": "Portfolio",\n    "sign_in_link": "登录",\n    "sign_up_link": "注册"\n  },\n  "BaseTemplate": {\n    "description": "Starter code for your Nextjs Boilerplate with Tailwind CSS",\n    "made_with": "Made with"\n  },\n  "Index": {\n    "meta_title": "Next.js Boilerplate Presentation",\n    "meta_description": "Next js Boilerplate is the perfect starter code for your project. Build your React application with the Next.js framework."\n  },\n  "Guestbook": {\n    "meta_title": "Guestbook",\n    "meta_description": "An example of CRUD operation",\n    "database_powered_by": "Database powered by",\n    "loading_guestbook": "Loading guestbook...",\n    "error_reporting_powered_by": "Error reporting powered by"\n  },\n  "GuestbookForm": {\n    "username": "Username",\n    "body": "Body",\n    "save": "Save"\n  },\n  "About": {\n    "meta_title": "About",\n    "meta_description": "About page description",\n    "about_paragraph": "Welcome to our About page! We are a team of passionate individuals dedicated to creating amazing software.",\n    "translation_powered_by": "Translation powered by"\n  },\n  "Portfolio": {\n    "meta_title": "Portfolio",\n    "meta_description": "Welcome to my portfolio page!",\n    "presentation": "Welcome to my portfolio page! Here you will find a carefully curated collection of my work and accomplishments. Through this portfolio, I\'m to showcase my expertise, creativity, and the value I can bring to your projects.",\n    "portfolio_name": "Portfolio {name}",\n    "error_reporting_powered_by": "Error reporting powered by",\n    "coverage_powered_by": "Code coverage powered by"\n  },\n  "PortfolioSlug": {\n    "meta_title": "Portfolio {slug}",\n    "meta_description": "Portfolio {slug} description",\n    "header": "Portfolio {slug}",\n    "content": "Created a set of promotional materials and branding elements for a corporate event. Crafted a visually unified theme, encompassing a logo, posters, banners, and digital assets. Integrated the client\'s brand identity while infusing it with a contemporary and innovative approach. Garnered favorable responses from event attendees, resulting in a successful event with heightened participant engagement and increased brand visibility.",\n    "log_management_powered_by": "Log management powered by"\n  },\n  "SignIn": {\n    "meta_title": "Sign in",\n    "meta_description": "Seamlessly sign in to your account with our user-friendly login process."\n  },\n  "SignUp": {\n    "meta_title": "Sign up",\n    "meta_description": "Effortlessly create an account through our intuitive sign-up process."\n  },\n  "Dashboard": {\n    "meta_title": "Dashboard",\n    "hello_message": "Hello {email}!"\n  },\n  "UserProfile": {\n    "meta_title": "User Profile"\n  },\n  "DashboardLayout": {\n    "dashboard_link": "Dashboard",\n    "user_profile_link": "Manage your account",\n    "sign_out": "Sign out"\n  }\n}\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"当然在这里我们只翻译了登录相关的文字，其他内容的翻译我们会在下篇借助 CrowdIn 来实现。"}),"\n",(0,s.jsx)(n.p,{children:"此时浏览器效果如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:"6.gif"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"登录注册所代表的鉴权功能，主流技术选型有 3 个：Clerk、Supabase 和 Next-Auth。其不同之处在于 Clerk 专注于用户管理，Supabse 是 BaaS 产品，鉴权是其中一个功能。Next-Auth 是一个开源库，需要自己实现数据库等。"}),"\n",(0,s.jsx)(n.p,{children:"总的来说，为了快速接入，会优先选择接入 Clerk 和 Supabase，这两个平台自带数据库实现，但免费版都有一些限制。但两者也不冲突，Clerk 和 Supabse 可以一起使用。"})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}let x=p;p.__RSPRESS_PAGE_META={},p.__RSPRESS_PAGE_META["Next.js%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F59.%E5%AE%9E%E6%88%98%E7%AF%87%20_%20Clerk%20%E4%B8%8E%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C.md"]={toc:[{text:"前言",id:"前言",depth:2},{text:"Clerk",id:"clerk",depth:2},{text:"1. Clerk 注册并创建应用",id:"1-clerk-注册并创建应用",depth:3},{text:"2. 接入 Clerk",id:"2-接入-clerk",depth:3},{text:"3. 添加中文",id:"3-添加中文",depth:3},{text:"4. 后台界面",id:"4-后台界面",depth:3},{text:"Next-js-Boilerplate",id:"next-js-boilerplate",depth:2},{text:"1. 基础设置",id:"1-基础设置",depth:3},{text:"2. 登录路由",id:"2-登录路由",depth:3},{text:"3. 中文设置",id:"3-中文设置",depth:3},{text:"总结",id:"总结",depth:2}],title:"59.实战篇 _ Clerk 与登录注册",headingTitle:"59.实战篇 _ Clerk 与登录注册",frontmatter:{}}}}]);