"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["50410"],{674048:function(e,n,s){s.r(n),s.d(n,{default:()=>g});var r=s(552676),i=s(740453);let a=s.p+"static/image/45cf09053dfddb3796d21c6fe4df8eb1.081aa76a.webp",t=s.p+"static/image/7a3d1b37604a5dbeace3c20db4702094.9038e7c6.webp",d=s.p+"static/image/e4ca9ec3b6ee9ecd5f1b944706b57eaa.3657af11.webp",o=s.p+"static/image/36d01fe459f400192b3971726ae9720a.d9dcf2cf.webp",l=s.p+"static/image/c4a2529a640871d48911eaa5ac8f7532.1e47922a.webp",c=s.p+"static/image/0a842f85e03f59814c4d02ccc169f492.f72307ba.webp",m=s.p+"static/image/c1d892db4c32247571db1fb38dcd19ec.d6081658.webp",p=s.p+"static/image/25b423f08c2e88aeb6938dcebb1634f6.de5637d2.webp",h=s.p+"static/image/605e376fc3c2cb788185ee8e94f895ab.316a2809.webp",u=s.p+"static/image/526347d6ed37cfcd1cd23ea5fe0e10f7.881350f6.webp";function f(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",ol:"ol",li:"li",code:"code",pre:"pre",h3:"h3",img:"img",h4:"h4",strong:"strong",hr:"hr"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"28-实战篇---superforms",children:["28-实战篇 ❘  Superforms",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#28-实战篇---superforms",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"推荐学习指数：⭐️️⭐️️⭐️️"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"1-前言",children:["1. 前言",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前言",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Superforms 是一个 SvelteKit 表单库，提供了服务端和客户端表单验证的全面解决方案，支持 Arktype、Joi、JSON Schema、Superstruct、TypeBox、Valibot、VineJS、Yup、Zod 等多种验证库。"}),"\n",(0,r.jsxs)(n.p,{children:["它是 ",(0,r.jsx)(n.a,{href:"https://hack.sveltesociety.dev/winners",title:"https://hack.sveltesociety.dev/winners",target:"_blank",rel:"noopener noreferrer",children:"Sveltehack 2023"})," 年 Best Library 的冠军，目前 GitHub 2.1k Star，是 SvelteKit 项目做表单校验的常用选择。"]}),"\n",(0,r.jsxs)(n.p,{children:["根据 ",(0,r.jsx)(n.a,{href:"https://github.com/ciscoheat/sveltekit-superforms?tab=readme-ov-file#feature-list",title:"https://github.com/ciscoheat/sveltekit-superforms?tab=readme-ov-file#feature-list",target:"_blank",rel:"noopener noreferrer",children:"GitHub"})," 上的介绍，它具有以下这些特性："]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"自由选择最喜欢的验证库进行数据验证"}),"\n",(0,r.jsxs)(n.li,{children:["无缝合并 ",(0,r.jsx)(n.code,{children:"PageData"})," 和 ",(0,r.jsx)(n.code,{children:"ActionData"}),"，只需专注于表单数据"]}),"\n",(0,r.jsx)(n.li,{children:"自动居中并聚焦无效的表单字段"}),"\n",(0,r.jsxs)(n.li,{children:["自动转换 ",(0,r.jsx)(n.code,{children:"FormData"}),"为正确的类型"]}),"\n",(0,r.jsx)(n.li,{children:"从 schema 生成默认表达值"}),"\n",(0,r.jsx)(n.li,{children:"支持同页面多表单处理"}),"\n",(0,r.jsx)(n.li,{children:"即可在服务端运行，也可以和 SPA 意使用"}),"\n",(0,r.jsx)(n.li,{children:"实时客户端验证"}),"\n",(0,r.jsx)(n.li,{children:"轻松创建 Loading"}),"\n",(0,r.jsx)(n.li,{children:"大量的定制选项"}),"\n",(0,r.jsx)(n.li,{children:"默认不需要 JavaScript，支持渐进式增强"}),"\n",(0,r.jsx)(n.li,{children:"自带 SuperDebug 组件"}),"\n",(0,r.jsx)(n.li,{children:"……"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"简而言之，功能强大，那就让我们开始使用吧！"}),"\n",(0,r.jsxs)(n.h2,{id:"2-安装-superforms",children:["2. 安装 Superforms",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-安装-superforms",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"安装："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i sveltekit-superforms\n"})}),"\n",(0,r.jsx)(n.p,{children:"数据校验库选择自己喜欢的就行，我们以 Zod 为例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i zod\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"3-基础使用方式",children:["3. 基础使用方式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-基础使用方式",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"31-初始化表单",children:["3.1. 初始化表单",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#31-初始化表单",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["首先是初始化表单，修改 ",(0,r.jsx)(n.code,{children:"+page.server.ts"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import type { PageServerLoad } from "./$types.js";\nimport { superValidate } from "sveltekit-superforms";\nimport { zod } from "sveltekit-superforms/adapters";\nimport { UserSchema } from "$lib/types";\n\nexport const load: PageServerLoad = async () => {\n  return { form: await superValidate(zod(UserSchema)) };\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"注：这里只是为了讲解如何使用而写的演示代码，下节会写具体的例子"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Superform 的服务端 API 叫 ",(0,r.jsx)(n.code,{children:"superValidate"}),"。这步是为了设置表单的初始值，Superforms 会根据 Schema 自动生成默认值，比如你在 schema 中："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\n\nexport const UserSchema = z.object({\n  username: z.string().min(2, "用户名最少 2 位").default("hello world"),\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"与表单元素绑定后，它就会作为表单的初始值："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:u,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"因为 load 函数运行在服务端，所以也可以从服务端（比如数据库）获取数据，然后设置初始值，此时需要将数据作为第一个参数，第二个参数作为适配器："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const load: PageServerLoad = async () => {\n  return {\n    form: await superValidate(\n      {\n        username: '123',\n        password: '123123'\n      },\n      zod(UserSchema)\n    )\n  };\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"与表单元素绑定后，它就会作为表单的初始值："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:h,alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"32-绑定表单元素",children:["3.2. 绑定表单元素",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#32-绑定表单元素",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["然后是绑定表单元素，修改 ",(0,r.jsx)(n.code,{children:"+page.svlete"}),"："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<script lang="ts">\n  import { superForm } from \'sveltekit-superforms\';\n  const { data } = $props();\n\n  // Client API:\n  const { form } = superForm(data.form);\n<\/script>\n\n<form method="POST">\n  <label for="name">Name</label>\n  <input type="text" name="name" bind:value={$form.name} />\n\n  <label for="email">E-mail</label>\n  <input type="email" name="email" bind:value={$form.email} />\n\n  <div><button>Submit</button></div>\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"superForm"})," 函数用于在客户端创建表单，",(0,r.jsx)(n.code,{children:"bind:value"}),"用于创建表单数据和输入字段的双向绑定。注意表单元素要有 ",(0,r.jsx)(n.code,{children:"name"})," 属性，这是提交的表单数据的键值。"]}),"\n",(0,r.jsxs)(n.h3,{id:"33-debugging",children:["3.3. Debugging",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#33-debugging",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["SuperForm 提供了 ",(0,r.jsx)(n.code,{children:"<SuperDebug />"}),"组件用于查看表单数据："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<script lang=\"ts\">\n  import SuperDebug from 'sveltekit-superforms';\n<\/script>\n\n<SuperDebug data={$form} />\n"})}),"\n",(0,r.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:p,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"当修改表单字段时，组件中的数据也会自动更新。"}),"\n",(0,r.jsxs)(n.h3,{id:"34-提交数据",children:["3.4. 提交数据",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#34-提交数据",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["最后让我们看看服务端该如何处理。修改 ",(0,r.jsx)(n.code,{children:"+page.server.ts"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { fail } from "@sveltejs/kit";\nimport { superValidate, message } from "sveltekit-superforms";\nimport { zod } from "sveltekit-superforms/adapters";\n\nexport const actions = {\n  default: async ({ request }) => {\n    const form = await superValidate(request, zod(UserSchema));\n    console.log(form);\n\n    if (!form.valid) {\n      return fail(400, { form });\n    }\n\n    return message(form, "Form posted successfully!");\n  },\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["这是错误时 ",(0,r.jsx)(n.code,{children:"form"})," 的数据结构："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:m,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["这是成功时 ",(0,r.jsx)(n.code,{children:"form"})," 的数据结构："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsxs)(n.h3,{id:"35-错误展示",children:["3.5. 错误展示",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#35-错误展示",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["最后让我们看看如何展示错误。修改 ",(0,r.jsx)(n.code,{children:"+page.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'<script lang="ts">\n  const { form, errors, constraints, message } = superForm(data.form);\n<\/script>\n\n{#if $message}<h3>{$message}</h3>{/if}\n\n<form method="POST">\n  <label for="name">Name</label>\n  <input\n    type="text"\n    name="name"\n    aria-invalid={$errors.name ? \'true\' : undefined}\n    bind:value={$form.name}\n    {...$constraints.name}\n  />\n  {#if $errors.name}<span>{$errors.name}</span>{/if}\n\n  <label for="email">E-mail</label>\n  <input\n    type="email"\n    name="email"\n    aria-invalid={$errors.email ? \'true\' : undefined}\n    bind:value={$form.email}\n    {...$constraints.email}\n  />\n  {#if $errors.email}<span>{$errors.email}</span>{/if}\n\n  <div><button>Submit</button></div>\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["其中 ",(0,r.jsx)(n.code,{children:"errors"}),"用于获取 ",(0,r.jsx)(n.code,{children:"fail()"})," 返回的错误信息，",(0,r.jsx)(n.code,{children:"message"}),"用于获取 ",(0,r.jsx)(n.code,{children:"message()"}),"返回的消息，",(0,r.jsx)(n.code,{children:"$constraints"}),"用于提供浏览器验证，后面还会讲到。"]}),"\n",(0,r.jsx)(n.p,{children:"现在我们就应该有了一个可以正常工作的表单。"}),"\n",(0,r.jsxs)(n.h3,{id:"36-实例演示",children:["3.6. 实例演示",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#36-实例演示",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现在让我们重写一下上篇 Zod 中的账号注册例子。"}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"src/lib/types.ts"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\n\nexport const UserSchema = z.object({\n  username: z.string().min(2, "用户名最少 2 位"),\n  password: z\n    .string()\n    .regex(new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$"), {\n      message: "密码至少 8 位，包含一个大写字母，一个小写字母和一个数字",\n    }),\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"src/routes/signup2/+page.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'<script lang="ts">\n  import { page } from \'$app/stores\';\n  import { superForm } from \'sveltekit-superforms\';\n  import SuperDebug from \'sveltekit-superforms\';\n\n  const { data } = $props();\n  const { form, errors, message, enhance } = superForm(data.form);\n<\/script>\n\n<div class="flex min-h-full flex-1 flex-col justify-center gap-4 p-6">\n  <SuperDebug data={$form} />\n  <form method="POST" use:enhance>\n    <div class="mb-2">\n      <label for="username" class="mb-2 block text-sm font-medium leading-6 text-gray-900">\n        用户名\n      </label>\n      <input\n        type="text"\n        name="username"\n        class="mb-2 block w-full rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n        aria-invalid={$errors.username ? \'true\' : undefined}\n        bind:value={$form.username}\n      />\n      {#if $errors.username}<span class="text-sm text-red-500">{$errors.username}</span>{/if}\n    </div>\n\n    <div class="mb-4">\n      <div class="flex items-center justify-between">\n        <label for="password" class="block text-sm font-medium leading-6 text-gray-900">\n          密码\n        </label>\n      </div>\n      <div class="mt-2">\n        <input\n          type="password"\n          name="password"\n          class="mb-2 block w-full rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n          aria-invalid={$errors.password ? \'true\' : undefined}\n          bind:value={$form.password}\n        />\n        {#if $errors.password}<span class="text-sm text-red-500">{$errors.password}</span>{/if}\n      </div>\n    </div>\n\n    <button\n      type="submit"\n      class="mb-4 flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"\n    >\n      注册\n    </button>\n    {#if $message}\n      <div class="status" class:error={$page.status >= 400} class:success={$page.status == 200}>\n        {$message}\n      </div>\n    {/if}\n  </form>\n</div>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["新建 ",(0,r.jsx)(n.code,{children:"src/routes/signup2/+page.server.ts"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import type { Actions, PageServerLoad } from "./$types.js";\nimport { fail } from "@sveltejs/kit";\nimport { superValidate, message } from "sveltekit-superforms";\nimport { zod } from "sveltekit-superforms/adapters";\nimport { UserSchema } from "$lib/types";\n\nexport const load: PageServerLoad = async () => {\n  return {\n    form: await superValidate(zod(UserSchema)),\n  };\n};\n\nexport const actions: Actions = {\n  default: async ({ request }) => {\n    const form = await superValidate(request, zod(UserSchema));\n    console.log(form);\n\n    if (!form.valid) return fail(400, { form });\n\n    return message(form, "账号注册成功!");\n  },\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"效果描述：每次点击注册按钮的时候，数据都会提交给服务端进行验证。客户端根据响应展示不同的结果。"}),"\n",(0,r.jsxs)(n.h2,{id:"4-进阶使用方式",children:["4. 进阶使用方式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-进阶使用方式",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"41-客户端验证",children:["4.1. 客户端验证",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#41-客户端验证",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"上节我们实现的效果是每次提交都会在服务端进行验证，为了避免服务端资源浪费，如何开启客户端验证呢？"}),"\n",(0,r.jsx)(n.p,{children:"在 Superforms 中有两个客户端验证方式："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"内置浏览器验证：也就是浏览器自带的验证，好处在于甚至不需要启用 JavaScript，坏处在于无法进行自定义验证"}),"\n",(0,r.jsx)(n.li,{children:"使用校验 schema：通常与服务端校验 schema 一致，需要 JavaScript 和 use:enhance"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"现在让我们具体看下如何使用。"}),"\n",(0,r.jsxs)(n.h4,{id:"411-内置浏览器校验",children:["4.1.1. 内置浏览器校验",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#411-内置浏览器校验",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["使用内置浏览器校验，只需要在输入字段上添加 ",(0,r.jsx)(n.code,{children:"$constraints"}),"Store："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'<script lang="ts">\n  export let data;\n  const { form, constraints } = superForm(data.form);\n<\/script>\n\n<input\n  name="email"\n  type="email"\n  bind:value={$form.email}\n  {...$constraints.email} />\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$constraints"})," 是一个对象，由 schema 生成而来。"]}),"\n",(0,r.jsx)(n.p,{children:"比如 schema 为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'export const UserSchema = z.object({\n  username: z.string().min(2, "用户名最少 2 位"),\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Superforms"})," 会对应为绑定的元素生成这些属性："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:o,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"schema 为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'export const UserSchema = z.object({\n  password: z\n    .string()\n    .regex(new RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$"), {\n      message: "密码至少 8 位，包含一个大写字母，一个小写字母和一个数字",\n    }),\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Superforms"})," 会对应为绑定的元素生成这些属性："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"也就是说，Superforms 借助浏览器提供的原生校验 API 进行校验，根据 schema 生成元素属性。"}),"\n",(0,r.jsx)(n.p,{children:"这样做的好处在于甚至不需要 JavaScript 也可以进行校验。坏处在于无法控制错误信息的位置、样式，也无法进行一些自定义验证。"}),"\n",(0,r.jsx)(n.p,{children:"如果你要自定义这些信息，就需要借助第二种客户端校验方式 —— 使用校验 schema。"}),"\n",(0,r.jsxs)(n.h4,{id:"412-使用校验-schema",children:["4.1.2. 使用校验 schema",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#412-使用校验-schema",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"使用校验 schema，以 Zod 为例："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { zodClient } from "sveltekit-superforms/adapters";\nimport { UserSchema } from "$lib/types";\n\nconst { form, errors, message, enhance, constraints } = superForm(data.form, {\n  validators: zodClient(UserSchema),\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"此时就会为绑定的元素添加上客户端校验。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"注意：这仅适用于与服务端使用相同的 schema 时。如果使用不同的模式，则需要完整的适配器，比如用 zod 替代 zodClient"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"413-实例演示",children:["4.1.3. 实例演示",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#413-实例演示",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在让我们修改上节的例子。修改 ",(0,r.jsx)(n.code,{children:"src/routes/signup2/+page.svelte"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<script lang="ts">\n  import { page } from \'$app/stores\';\n  import { superForm } from \'sveltekit-superforms\';\n  import SuperDebug from \'sveltekit-superforms\';\n  import { zodClient } from \'sveltekit-superforms/adapters\';\n  import { UserSchema } from \'$lib/types\';\n\n  const { data } = $props();\n  const { form, errors, message, enhance, constraints } = superForm(data.form, {\n    validators: zodClient(UserSchema)\n  });\n<\/script>\n\n<div class="flex min-h-full flex-1 flex-col justify-center gap-4 p-6">\n  <SuperDebug data={$form} />\n  <form method="POST" use:enhance>\n    <div class="mb-2">\n      <label for="username" class="mb-2 block text-sm font-medium leading-6 text-gray-900">\n        用户名\n      </label>\n      <input\n        type="text"\n        name="username"\n        autocomplete="off"\n        class="mb-2 block w-full rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n        aria-invalid={$errors.username ? \'true\' : undefined}\n        bind:value={$form.username}\n        {...$constraints.username}\n      />\n      {#if $errors.username}<span class="text-sm text-red-500">{$errors.username}</span>{/if}\n    </div>\n\n    <div class="mb-4">\n      <div class="flex items-center justify-between">\n        <label for="password" class="block text-sm font-medium leading-6 text-gray-900">\n          密码\n        </label>\n      </div>\n      <div class="mt-2">\n        <input\n          type="password"\n          name="password"\n          autocomplete="off"\n          class="mb-2 block w-full rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n          aria-invalid={$errors.password ? \'true\' : undefined}\n          bind:value={$form.password}\n          {...$constraints.password}\n        />\n        {#if $errors.password}<span class="text-sm text-red-500">{$errors.password}</span>{/if}\n      </div>\n    </div>\n\n    <button\n      type="submit"\n      class="mb-4 flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"\n    >\n      注册\n    </button>\n    {#if $message}\n      <div class="status" class:error={$page.status >= 400} class:success={$page.status == 200}>\n        {$message}\n      </div>\n    {/if}\n  </form>\n</div>\n'})}),"\n",(0,r.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:t,alt:""})}),"\n",(0,r.jsx)(n.p,{children:"这是一个拥有两种客户端校验的例子。一开始数据为空，直接提交的时候，触发的是浏览器内置校验。当输入字段失焦后，触发的是 schema 校验。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"默认的校验方式是“尽早奖励、延迟验证”，这是一个经过研究的校验输入数据的方法，旨在提高用户满意度："})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["如果在有错误的字段上输入数据，在 ",(0,r.jsx)(n.code,{children:"input"}),"的时候校验"]}),"\n",(0,r.jsxs)(n.li,{children:["否则，在 ",(0,r.jsx)(n.code,{children:"blur"}),"的时候校验"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["意思是：当用户第一次输入数据的时候，在 blur 的时候校验数据，如果数据发生错误，用户再输入的时候，在输入的时候就进行校验，而非等到失焦的时候。",(0,r.jsx)(n.strong,{children:"这就是“尽早奖励、延迟验证”。"})]}),"\n",(0,r.jsx)(n.p,{children:"现在的这个例子就是这个校验逻辑。"}),"\n",(0,r.jsxs)(n.h3,{id:"42-加载状态",children:["4.2. 加载状态",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#42-加载状态",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"加载状态用于在服务端响应延迟时提供反馈。默认设置如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const { form, enhance, submitting, delayed, timeout } = superForm(data.form, {\n  delayMs?: 500\n  timeoutMs?: 8000\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Superforms 认为在短等待时间内，除了显示结果外，不需要任何反馈，意思是如果接口返回的快，那就不要 loading 效果了。所以才有一个 delayMs 设置，默认是 500ms，也就是提交后，如果超过了 500ms，还没有返回结果，那就最好显示加载状态。使用如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<script lang="ts">\n  const { form, errors, enhance, delayed } = superForm(data.form);\n  import spinner from \'$lib/assets/spinner.svg\';\n<\/script>\n\n<form method="POST" use:enhance>\n  <button>Submit</button>\n  {#if $delayed}<img src={spinner} />{/if}\n</form>\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"421-实例演示",children:["4.2.1. 实例演示",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#421-实例演示",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["修改 ",(0,r.jsx)(n.code,{children:"src/routes/signup2/+page.svelte"}),"，完整代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<script lang="ts">\n  import { page } from \'$app/stores\';\n  import { superForm } from \'sveltekit-superforms\';\n  import SuperDebug from \'sveltekit-superforms\';\n  import { zodClient } from \'sveltekit-superforms/adapters\';\n  import { UserSchema } from \'$lib/types\';\n\n  const { data } = $props();\n  const { form, errors, message, enhance, constraints, delayed } = superForm(data.form, {\n    validators: zodClient(UserSchema)\n  });\n<\/script>\n\n<div class="flex min-h-full flex-1 flex-col justify-center gap-4 p-6">\n  <SuperDebug data={$form} />\n  <form method="POST" use:enhance>\n    <div class="mb-2">\n      <label for="username" class="mb-2 block text-sm font-medium leading-6 text-gray-900">\n        用户名\n      </label>\n      <input\n        type="text"\n        name="username"\n        autocomplete="off"\n        class="mb-2 block w-full rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n        aria-invalid={$errors.username ? \'true\' : undefined}\n        bind:value={$form.username}\n        {...$constraints.username}\n      />\n      {#if $errors.username}<span class="text-sm text-red-500">{$errors.username}</span>{/if}\n    </div>\n\n    <div class="mb-4">\n      <div class="flex items-center justify-between">\n        <label for="password" class="block text-sm font-medium leading-6 text-gray-900">\n          密码\n        </label>\n      </div>\n      <div class="mt-2">\n        <input\n          type="password"\n          name="password"\n          autocomplete="off"\n          class="mb-2 block w-full rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600"\n          aria-invalid={$errors.password ? \'true\' : undefined}\n          bind:value={$form.password}\n          {...$constraints.password}\n        />\n        {#if $errors.password}<span class="text-sm text-red-500">{$errors.password}</span>{/if}\n      </div>\n    </div>\n\n    <button\n      type="submit"\n      class="mb-4 flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"\n    >\n      注册{#if $delayed}中……{/if}\n    </button>\n\n    {#if $message}\n      <div class="status" class:error={$page.status >= 400} class:success={$page.status == 200}>\n        {$message}\n      </div>\n    {/if}\n  </form>\n</div>\n'})}),"\n",(0,r.jsx)(n.p,{children:"浏览器效果如下："}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)("img",{src:a,alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["此为接口响应时间较长时的效果。可通过 ",(0,r.jsx)(n.code,{children:"sleep"})," 函数模拟，修改 ",(0,r.jsx)(n.code,{children:"src/routes/signup2/+page.server.ts"}),"，代码如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import type { Actions, PageServerLoad } from "./$types.js";\nimport { fail } from "@sveltejs/kit";\nimport { superValidate, message } from "sveltekit-superforms";\nimport { zod } from "sveltekit-superforms/adapters";\nimport { UserSchema } from "$lib/types";\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport const load: PageServerLoad = async () => {\n  return {\n    form: await superValidate(zod(UserSchema)),\n  };\n};\n\nexport const actions: Actions = {\n  default: async ({ request }) => {\n    await sleep(3000);\n    const form = await superValidate(request, zod(UserSchema));\n    console.log(form);\n\n    if (!form.valid) return fail(400, { form });\n\n    return message(form, "账号注册成功!");\n  },\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"注意：默认会阻止表单多次提交"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"5-总结",children:["5. 总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-总结",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Superforms 功能强大，还有很多其他功能比如 Event、嵌套数据等内容没有讲解。具体查看",(0,r.jsx)(n.a,{href:"https://superforms.rocks/get-started",title:"https://superforms.rocks/get-started",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"。SvelteKit 项目做表单验证，Superforms + Zod 是一个常见的组合拳。"]})]})}function x(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}let g=x;x.__RSPRESS_PAGE_META={},x.__RSPRESS_PAGE_META["Svelte%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%2F28-%E5%AE%9E%E6%88%98%E7%AF%87%20%E2%9D%98%20%20Superforms.md"]={toc:[{text:"1. 前言",id:"1-前言",depth:2},{text:"2. 安装 Superforms",id:"2-安装-superforms",depth:2},{text:"3. 基础使用方式",id:"3-基础使用方式",depth:2},{text:"3.1. 初始化表单",id:"31-初始化表单",depth:3},{text:"3.2. 绑定表单元素",id:"32-绑定表单元素",depth:3},{text:"3.3. Debugging",id:"33-debugging",depth:3},{text:"3.4. 提交数据",id:"34-提交数据",depth:3},{text:"3.5. 错误展示",id:"35-错误展示",depth:3},{text:"3.6. 实例演示",id:"36-实例演示",depth:3},{text:"4. 进阶使用方式",id:"4-进阶使用方式",depth:2},{text:"4.1. 客户端验证",id:"41-客户端验证",depth:3},{text:"4.1.1. 内置浏览器校验",id:"411-内置浏览器校验",depth:4},{text:"4.1.2. 使用校验 schema",id:"412-使用校验-schema",depth:4},{text:"4.1.3. 实例演示",id:"413-实例演示",depth:4},{text:"4.2. 加载状态",id:"42-加载状态",depth:3},{text:"4.2.1. 实例演示",id:"421-实例演示",depth:4},{text:"5. 总结",id:"5-总结",depth:2}],title:"28-实战篇 ❘  Superforms",headingTitle:"28-实战篇 ❘  Superforms",frontmatter:{}}}}]);