"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["56703"],{490301:function(n,e,s){s.r(e),s.d(e,{default:()=>t});var r=s(552676),i=s(740453);let l=s.p+"static/image/fbdbb6f7cfc642dbbc9b91eb580eee01~tplv-k3u1fbpfcp-zoom-1.image.a1ec3375.png",c=s.p+"static/image/37fbeac64cbd48258dee60e9a0d2590e~tplv-k3u1fbpfcp-zoom-1.image.24caf025.png",d=s.p+"static/image/a749b992a86847c89df2c2718e997e7c~tplv-k3u1fbpfcp-zoom-1.image.97d2c10f.png";function a(n){let e=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",blockquote:"blockquote",br:"br",ol:"ol",li:"li",h3:"h3",pre:"pre",code:"code",img:"img",ul:"ul",em:"em"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"5-一等公民的故事聊聊-first-class-function",children:["5 “一等公民”的故事——聊聊 First-Class Function",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5-一等公民的故事聊聊-first-class-function",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["本节，我们来认识函数式编程的第二个关键特征：",(0,r.jsx)(e.strong,{children:"函数是一等公民"})]}),"\n",(0,r.jsxs)(e.h2,{id:"头等函数与一等公民",children:["“头等函数”与“一等公民”",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#头等函数与一等公民",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"开篇我想先对两个常见的概念进行辨析：“头等函数”与“一等公民”。"}),"\n",(0,r.jsx)(e.p,{children:"有的同学比起“函数是一等公民”，会更加熟悉“xx拥有头等函数”这样的说法。其实两者表达的是同个意思。"}),"\n",(0,r.jsx)(e.p,{children:"如果你在维基百科中搜索“头等函数”这一词条，你将找到这样一条描述："}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["a programming language is said to have ",(0,r.jsx)(e.strong,{children:"first-class functions"})," if it treats functions as first-class citizens.",(0,r.jsx)(e.br,{}),"\n","（笔者译：如果一门编程语言将函数当做一等公民对待，那么这门语言被称作“拥有头等函数“）",(0,r.jsx)(e.br,{}),"\n","——wikipedia"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"这条定义将“头等函数”与“函数是一等公民”划上了等号——“头等函数”就是“被当做一等公民对待的函数”。"}),"\n",(0,r.jsx)(e.p,{children:"那么什么是程序世界的“一等公民”？“一等公民”又有哪些“特殊待遇”呢？"}),"\n",(0,r.jsx)(e.p,{children:"我们或许可以从 MDN 对“First-Class Function”的阐释中找到这个问题的答案："}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["当一门编程语言的函数可以被当作变量一样用时，则称这门语言拥有",(0,r.jsx)(e.strong,{children:"头等函数"}),"。例如，在这门语言中，函数可以被当作参数传递给其他函数，可以作为另一个函数的返回值，还可以被赋值给一个变量。\n——MDN Web Docs"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["【划重点】：头等函数的核心特征是“",(0,r.jsx)(e.strong,{children:"可以被当做变量一样用"}),"”。"]}),"\n",(0,r.jsx)(e.p,{children:"“可以被当做变量一样用”意味着什么？它意味着："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"可以被当作参数传递给其他函数"}),"\n",(0,r.jsx)(e.li,{children:"可以作为另一个函数的返回值"}),"\n",(0,r.jsx)(e.li,{children:"可以被赋值给一个变量"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"以上三条，就是“函数是一等公民”这句话的内涵。"}),"\n",(0,r.jsxs)(e.h2,{id:"一等公民的-js-函数",children:["“一等公民”的 JS 函数",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一等公民的-js-函数",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"接下来我们首先趁热打铁，通过几个例子来验证一下“一等公民”的特征是如何在 JS 函数身上得到体现的。"}),"\n",(0,r.jsxs)(e.h3,{id:"js-函数可以被赋值给一个变量",children:["JS 函数可以被赋值给一个变量",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#js-函数可以被赋值给一个变量",children:"#"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"// 将一个匿名函数赋值给变量 callMe\nlet callMe = () => {\n   console.log('Hello World！')\n}\n\n// 输出 callMe 的内容\nconsole.log(callMe)\n// 调用 callMe\ncallMe()\n\n// 将一个新的匿名函数赋值给变量 callMe\ncallMe = () => {\n  console.log('Hello 修言~')\n}\n\n// 输出 callMe 的内容\nconsole.log(callMe)\n// 调用 callMe\ncallMe()\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在这个例子中，我们成功将两个匿名函数先后赋值给了变量 ",(0,r.jsx)(e.code,{children:"callMe"}),"。",(0,r.jsx)(e.code,{children:"callMe"})," 被赋值为一个函数后，我们不仅可以通过添加两个圆括号来调用它，也可以像访问普通变量一样查看它的内容。"]}),"\n",(0,r.jsxs)(e.h3,{id:"js-函数可以作为参数传递",children:["JS 函数可以作为参数传递",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#js-函数可以作为参数传递",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"咱要是说“JS 函数作为参数传递”，你可能还不太能转过这个弯儿来。但咱要是说“回调函数”，你肯定一下就来精神了——它可不就是在说回调函数么！"}),"\n",(0,r.jsx)(e.p,{children:"众所周知，回调函数是 JS 异步编程的基础。在前端，我们常用的事件监听、发布订阅等操作都需要借助回调函数来实现。比如这样："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"function consoleTrigger() {\n    console.log('spEvent 被触发')\n}   \n\njQuery.subscribe('spEvent', consoleTrigger)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在这个例子中，",(0,r.jsx)(e.code,{children:"consoleTrigger"})," 函数就作为 ",(0,r.jsx)(e.code,{children:"subscribe"})," 函数的第 2 个入参被传递。"]}),"\n",(0,r.jsx)(e.p,{children:"而在 Node 层，我们更是需要回调函数来帮我们完成与外部世界的一系列交互（也就是所谓的“副作用”）。"}),"\n",(0,r.jsx)(e.p,{children:"这里举一个异步读取文件的例子："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"function showData(err, data){\n    if(err) {\n      throw err\n    }\n    // 输出文件内容\n    console.log(data);\n})\n\n// -- 异步读取文件\nfs.readFile(filePath, 'utf8', showData)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["在这个例子中， ",(0,r.jsx)(e.code,{children:"showData"})," 函数作为 ",(0,r.jsx)(e.code,{children:"readFile"})," 函数的第 3 个入参被传递。"]}),"\n",(0,r.jsxs)(e.h3,{id:"js-函数可以作为另一个函数的返回值",children:["JS 函数可以作为另一个函数的返回值",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#js-函数可以作为另一个函数的返回值",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"函数作为返回值传递，基本上都是馋人家闭包的特性。比如下面这个例子："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"function baseAdd(a) {\n  return (b) => {\n    return a + b\n  };\n};\n\nconst addWithOne = baseAdd(1)\n\n// .... (也许在许多行业务逻辑执行完毕后）\n\nconst result = addWithOne(2)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["显然，",(0,r.jsx)(e.code,{children:"add"})," 函数想要做一个加法，但是在只能够确认其中一个加数（",(0,r.jsx)(e.code,{children:"a"}),"）的时候，它并不急于立刻做这个加法。"]}),"\n",(0,r.jsxs)(e.p,{children:["怎么办呢？先把这个已经确定的加数（",(0,r.jsx)(e.code,{children:"a"}),"）以【闭包中的自由变量】的形式存起来，然后返回一个待执行的加法函数。等什么时候第二个加数也确定了，就可以立刻执行这段逻辑。"]}),"\n",(0,r.jsxs)(e.h2,{id:"一等公民的本质js-函数是可执行的对象",children:["“一等公民”的本质：JS 函数是可执行的对象",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一等公民的本质js-函数是可执行的对象",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"吃了这么多栗子\uD83C\uDF30，想必大家现在已经深刻地理解了“函数是 JavaScript 的一等公民”这句话的内涵。"}),"\n",(0,r.jsx)(e.p,{children:"那么为什么 JS 中的函数这么牛x，可以为所欲为呢？"}),"\n",(0,r.jsxs)(e.p,{children:["本质上是因为",(0,r.jsx)(e.strong,{children:"它不仅仅是个函数，它还是个对象"}),"。"]}),"\n",(0,r.jsx)(e.p,{children:"如下图所示，JS 函数确实是一个对象，它的类型是 Function，它具备 Function 原型上的一切属性和方法："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:d,alt:""})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:c,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"这里需要强调的是，根据最新版的红宝书（《JavaScript 高级程序设计》第4版）定义，JavaScript 有且仅有以下 7 种数据类型："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Undefined 类型"}),"\n",(0,r.jsx)(e.li,{children:"Null 类型"}),"\n",(0,r.jsx)(e.li,{children:"Boolean 类型"}),"\n",(0,r.jsx)(e.li,{children:"Number 类型"}),"\n",(0,r.jsx)(e.li,{children:"String 类型"}),"\n",(0,r.jsx)(e.li,{children:"Symbol 类型"}),"\n",(0,r.jsx)(e.li,{children:"Object 类型"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"（作者注：结合最新的 ES 标准，还有一个新的类型 BigInt）"}),"\n",(0,r.jsxs)(e.p,{children:["尽管在早期 ES 规范还不太清晰的时候，有一些 JS 著作中曾经将 Function 单独拿出来作为和 Object 并列的一种数据类型。但事实上，",(0,r.jsx)(e.strong,{children:"并没有一种数据类型叫 Function"}),"，Function 和 Array、Date 这些 built-in Class 一样，都属于对象类型。"]}),"\n",(0,r.jsx)(e.p,{children:"既然函数也是对象，那么对象能干的事，函数也能干。"}),"\n",(0,r.jsx)(e.p,{children:"对象能干啥？别的不说，咱对照“一等公民”的特征来一个一个看一下："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"能不能赋值给变量？能！"}),"\n",(0,r.jsx)(e.li,{children:"能不能作为函数参数传递？能！"}),"\n",(0,r.jsx)(e.li,{children:"能不能作为返回值返回？能！"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:['到这里我们不难看出，"First-Class Function（头等函数）" 的本质，其实是"First-Class Object（头等对象）”。JS 函数的本质，就是',(0,r.jsx)(e.strong,{children:"可执行的对象"}),"。"]}),"\n",(0,r.jsxs)(e.h2,{id:"拓展一等公民的函数意味着什么",children:["拓展：“一等公民的函数”意味着什么",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#拓展一等公民的函数意味着什么",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"一等公民的学术背景",children:["“一等公民”的学术背景",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一等公民的学术背景",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:['"一等公民“这一词条最早可以追溯到 1960 年，彼时计算机科学家',(0,r.jsx)(e.a,{href:"https://zh.wikipedia.org/wiki/%E5%85%8B%E9%87%8C%E6%96%AF%E6%89%98%E5%BC%97%C2%B7%E6%96%AF%E7%89%B9%E9%9B%B7%E5%A5%87",target:"_blank",rel:"noopener noreferrer",children:"克里斯托弗\xb7斯特雷奇"}),"仅仅是引入了这一概念，但并没有给出严格的术语定义，只是给出了",(0,r.jsx)(e.a,{href:"https://zh.wikipedia.org/wiki/ALGOL",target:"_blank",rel:"noopener noreferrer",children:"ALGOL"}),"语言中实数和过程的对比。"]}),"\n",(0,r.jsxs)(e.p,{children:["时下当我们谈及“一等公民”的时候，更多的是在讨论 ",(0,r.jsx)(e.a,{href:"https://zh.wikipedia.org/w/index.php?title=%E6%8B%89%E6%96%90%E5%B0%94%C2%B7%E8%8A%AC%E5%85%8B%E5%B0%94&action=edit&redlink=1",target:"_blank",rel:"noopener noreferrer",children:"拉斐尔\xb7芬克尔"})," 在 《",(0,r.jsx)(e.em,{children:"Advanced Programming language Design"}),"》一书中所描述的”一等值“："]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)("img",{src:l,alt:""})}),"\n",(0,r.jsx)(e.p,{children:"如图中的表格所示，老爷子根据以下三个条件的满足情况，将值划分为了三种类型："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"pass value as a parameter (能否当做参数传递）"}),"\n",(0,r.jsx)(e.li,{children:"return value from a procedure（能否作为返回值返回）"}),"\n",(0,r.jsx)(e.li,{children:"assign value into a variable（能否赋值给变量）"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"按照表格的示意，三个条件全部满足的，就认为它是“一等值”，也就是“一等公民”。只满足第一条的，则是“二等值”，一条也不满足的，属于”三等值”。"}),"\n",(0,r.jsx)(e.p,{children:"事实上，除了“一等值”的定义被广泛使用至今外，“二等值”、“三等值”这些定义在行业里的接受度并不高。大家知道有这种说法即可。"}),"\n",(0,r.jsxs)(e.h3,{id:"一等公民的现实意义",children:["“一等公民”的现实意义",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一等公民的现实意义",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"“一等公民的函数”，并不仅仅意味着函数符合了这样那样的特征，还意味着函数在 JS 世界中，具有最高的自由度。"}),"\n",(0,r.jsx)(e.p,{children:"这“最高的自由度”，是从能力的角度来说的。它意味着函数是 JS 世界里技能树最满的家伙，别人能干的活，它能干，别人干不了的活，它还能干。"}),"\n",(0,r.jsx)(e.p,{children:"这直接决定了函数可以在 JS 世界里横着走，可以帮我们做任何我们想要做的事情，这也使“以函数为基本单位构建应用程序”成为可能。"}),"\n",(0,r.jsx)(e.p,{children:"由此我们可以断言，任何语言如果想要实现对函数式编程范式的支持，就必须支持“函数是一等公民”这一特性。"})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}let t=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["JavaScript%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97%2F5%20%E2%80%9C%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91%E2%80%9D%E7%9A%84%E6%95%85%E4%BA%8B%E2%80%94%E2%80%94%E8%81%8A%E8%81%8A%20First-Class%20Function.md"]={toc:[{text:"“头等函数”与“一等公民”",id:"头等函数与一等公民",depth:2},{text:"“一等公民”的 JS 函数",id:"一等公民的-js-函数",depth:2},{text:"JS 函数可以被赋值给一个变量",id:"js-函数可以被赋值给一个变量",depth:3},{text:"JS 函数可以作为参数传递",id:"js-函数可以作为参数传递",depth:3},{text:"JS 函数可以作为另一个函数的返回值",id:"js-函数可以作为另一个函数的返回值",depth:3},{text:"“一等公民”的本质：JS 函数是可执行的对象",id:"一等公民的本质js-函数是可执行的对象",depth:2},{text:"拓展：“一等公民的函数”意味着什么",id:"拓展一等公民的函数意味着什么",depth:2},{text:"“一等公民”的学术背景",id:"一等公民的学术背景",depth:3},{text:"“一等公民”的现实意义",id:"一等公民的现实意义",depth:3}],title:"5 “一等公民”的故事——聊聊 First-Class Function",headingTitle:"5 “一等公民”的故事——聊聊 First-Class Function",frontmatter:{}}}}]);