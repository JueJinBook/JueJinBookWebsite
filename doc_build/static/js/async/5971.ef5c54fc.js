"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["5971"],{916559:function(n,e,r){r.r(e),r.d(e,{default:()=>l});var d=r(552676),s=r(740453);function h(n){let e=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",code:"code",h2:"h2",strong:"strong",pre:"pre",blockquote:"blockquote",h3:"h3",ol:"ol",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,s.ah)(),n.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(e.h1,{id:"第05章基础语法一变量和常量声明基本类型",children:["第05章—基础语法一｜变量和常量、声明、基本类型",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#第05章基础语法一变量和常量声明基本类型",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"\uFEFF我们日常玩的电脑游戏、手机上运行的各类软件、甚至是操作系统都是以数据的管理和计算为基础的，那么这些数据是如何在计算机中安家的呢？这就涉及到了编程语言中的基本语法内容了，这节课我们一起来看一下Go语言的基础语法。具体包括以下内容："}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"变量与常量"}),"\n",(0,d.jsx)(e.li,{children:"声明与赋值"}),"\n",(0,d.jsx)(e.li,{children:"基本数据类型"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"\uD83D\uDCA1 提示： 为易于大家领会要点，节约篇幅，在文末有3个附录。大家可结合相应的知识点进行查阅和实践。"})}),"\n",(0,d.jsxs)(e.h2,{id:"变量与常量",children:["变量与常量",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#变量与常量",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"与大多数编程语言类似，Go语言支持声明变量与常量，Go语言程序在运行时，会把所需的数据加载到内存中，这些数据又分为常量和变量，它们的定义也很好理解："}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"常量是一个简单值的标识符，在程序运行时，不会被修改的量；"}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"变量来源于数学，是计算机语言中能储存计算结果或能表示值的抽象概念，它的值通常是可变的。"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.p,{children:["为何要将数据分为可变的变量和不可变的常量？答案是：为了程序",(0,d.jsx)(e.strong,{children:"更快"}),"、",(0,d.jsx)(e.strong,{children:"更安全"}),"。"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"更快：虽然常量和变量都会占用内存，但它们位于不同的位置，常量会在编译后放在数据段内存；变量放在代码段内存。合理地使用常量将加快编译速度与减少运行时的内存占用。"}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"更安全：由于常量不可变，因此我们就没有机会将其误改为其它的值。"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:"变量与常量本身很好理解，这里就不过多解释了，需要注意的是它们的命名。"}),"\n",(0,d.jsxs)(e.p,{children:["无论是常量还是变量，我们都可以通过它们的名字访问它们。",(0,d.jsx)(e.strong,{children:"Go语言中包含25个关键字和37个保留字（参考附录一），在起名字的时候要注意避开它们。"})]}),"\n",(0,d.jsx)(e.p,{children:"如果错误地使用了关键字或者保留字作为名字，编译器便无法区分到底该作为名字处理，还是当作本身的作用处理，因此会引发编译时错误。使用GoLand会帮助我们规避这类问题，例如下面的代码："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:'//变量声明\r\nvar break = "打断"\n'})}),"\n",(0,d.jsx)(e.p,{children:"由于break本身属于流程控制类的关键字，代码无法被编译。"}),"\n",(0,d.jsx)(e.p,{children:"在实际开发中，不同的开发者起名字的习惯不同，往往会导致代码的可读性降低甚至引起歧义。比如，把变量命名为a1、a2、a3……时间久了之后几乎没有人能一下子看懂它们代表什么含义，包括代码的作者。因此，一个好的习惯是尽量使用能表达其含义的一个或多个英文单词来命名。"}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"对于变量，除了首个单词外，每个单词的首字母用大写表示，这种命名法通常被称为小驼峰式命名法；若所有单词的首字母均大写，则成为大驼峰式命名法（又被称为帕斯卡命名法）。由于变量有可见性（有关可见性的更多内容，将在结构体/包中介绍。）之分，对于对外可见的变量，使用大驼峰法；对于对外不可见的变量，使用小驼峰法。特别地，若变量/常量是布尔类型，最好以is、allow、has、can之类来开头；"}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"对于常量，单词均用大写字母来表示，每个字母之间使用下划线来分割。"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:"例如："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:"//变量声明\r\nvar exampleNumberA int = 10\r\nvar isDarkMode bool = false\r\n//常量声明\r\nconst WIDTH_OF_RECT int = 12\r\nconst ALLOW_DOWNLOAD_WHEN_WIFI bool = true\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"\uD83D\uDCA1 提示： 本小册中的所有示例代码均按照上述规则对变量/常量命名。"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"❗️ 注意： Go语言是区分大小写的，exampleNumberA和ExampleNumberA是两个不同的变量。"})}),"\n",(0,d.jsx)(e.p,{children:"Go语言中的命名规范除了体现在变量/常量的命名上，还体现在包名、源码文件名等多个方面，具体请参考文末附录二。"}),"\n",(0,d.jsxs)(e.h2,{id:"声明与赋值",children:["声明与赋值",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#声明与赋值",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"从定义上看，声明是指："}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"当一个计算机程序需要调用内存空间时，对内存发出的“占位”指令，称为：“声明”。"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:"通俗地讲，我们使用的软件都是从硬盘加载到内存，然后在内存中运行的，因为内存和CPU之间交换数据的速度更快。除了程序运行的逻辑外，必要的数据必然也会被加载到内存中。而声明的目的就是在计算机的内存中占用一定大小的空间，用来存放数据。"}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"在Go语言中，变量或常量的数据类型必须先声明，才能使用"}),"，且无法将不相关的数据赋值给它们。"]}),"\n",(0,d.jsx)(e.p,{children:"这是因为Go语言和Java、C、C++等语言一样，属于静态语言，静态语言具有更严谨的结构要求、调试便捷（可通过代码直观地看到数据类型）与确保类型安全（无法使用不同类型的数据赋值）的特点，必须要先做声明。而像PHP、Python、JavaScript等动态语言则没有这个限制。"}),"\n",(0,d.jsxs)(e.p,{children:["从根本上说，静态类型和动态类型语言的最大区别就是，",(0,d.jsx)(e.strong,{children:"数据类型是否在编译时确定。"})]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"\uD83D\uDCA1 提示： 如果想要计算机运行人类编写的Go语言代码，需要先编译再运行。程序代码易于人类编写和理解，但计算机无法直接理解，需要先“翻译”为机器语言才行，编译便是完成这个“翻译”工作的。与此相对，运行便是将机器语言加载到内存中执行的过程。 "})}),"\n",(0,d.jsxs)(e.h3,{id:"变量的声明与赋值",children:["变量的声明与赋值",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#变量的声明与赋值",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"在Go语言中，声明变量的一般格式为："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:"var name type\n"})}),"\n",(0,d.jsx)(e.p,{children:"其中，var是声明变量的关键字，固定不变，表明意图——要声明一个变量；name紧随其后，是开发者自定义的变量名，可根据实际用途和命名规范命名；type表示该变量所属的数据类型。"}),"\n",(0,d.jsx)(e.p,{children:"完成声明后，便要对变量进行赋值了，否则它没有任何意义。赋值后，变量就有了“初始值”；对于已经有值的变量，再次赋值将使用新值覆盖旧值，达到修改的目的。"}),"\n",(0,d.jsx)(e.p,{children:"和大多数编程语言一样，使用等号“=”为变量或常量赋值。如："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:"//声明一个名为number的变量，类型为int（整数类型）\r\nvar number int\r\n//为number赋值\r\nnumber = 100\n"})}),"\n",(0,d.jsx)(e.p,{children:"如此，number这个变量就表示100这个整数了。此外，变量的声明和赋值还可一并完成，如："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:"//变量声明\r\nvar number int = 100\n"})}),"\n",(0,d.jsx)(e.p,{children:"这种写法与前一个示例作用相同。"}),"\n",(0,d.jsxs)(e.h3,{id:"常量的声明与赋值",children:["常量的声明与赋值",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#常量的声明与赋值",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"常量声明和赋值的一般格式为："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:"const name type = value\n"})}),"\n",(0,d.jsx)(e.p,{children:"其中，const是声明常量的关键字，固定不变，表明意图，要声明一个常量；name和type的意义与声明变量时一样；value是常量的值。如："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:"//声明一个名为PI的常量，类型为float64（浮点数类型）\r\nconst PI float64 = 3.14\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"❗️ 注意： 声明常量时，必须为其赋值，且后续无法修改。"})}),"\n",(0,d.jsxs)(e.h3,{id:"go语言的类型推断",children:["Go语言的类型推断",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#go语言的类型推断",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"使用Go语言可简化代码，类型推断体现了这一点。当声明与赋值一并进行时，如果数据为Go内置的基础类型，则可无需指定类型。如："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:"//变量声明\r\nvar number = 100\r\n//常量声明\r\nconst PI = 3.14\n"})}),"\n",(0,d.jsx)(e.p,{children:"无需担心，由于number的值为100，Go语言会推断出它的类型为整数型。同理，PI也会被推断为浮点数型。"}),"\n",(0,d.jsx)(e.p,{children:"对于变量，还有一种超级精简的声明和赋值方式，示例如下："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:"//变量声明\r\nnumber := 100\n"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"❗️ 注意： 冒号等于号“:=”的作用是声明和赋值，若number是已经声明过的变量，则无法使用 := 的方式赋值。"})}),"\n",(0,d.jsxs)(e.h3,{id:"批量声明赋值",children:["批量声明/赋值",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#批量声明赋值",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"为了方便多个变量/常量的声明和赋值，我们还可以批量处理它们，示例如下："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:'//变量\r\nvar (\r\n        //声明+赋值\r\n        number int = 100\r\n        //声明+赋值（类型推断）\r\n        text = "Hello"\r\n        //只声明\r\n        name string\r\n)\r\n//常量\r\nconst (\r\n        // PI 声明+赋值\r\n        PI float64 = 3.14\r\n        // WIDTH 声明+赋值（类型推断）\r\n        WIDTH  = 5\r\n        // HEIGHT 声明+赋值（类型推断）\r\n        HEIGHT = 10\r\n)\n'})}),"\n",(0,d.jsx)(e.p,{children:"到此，一些朋友可能会问：什么是常量/变量？为什么常量的值可以修改而变量不行？为何声明常量都用大写字符？除了示例中的int、float64、string，还有哪些内置类型……"}),"\n",(0,d.jsx)(e.p,{children:"带着这些疑问，我们继续往下看。"}),"\n",(0,d.jsxs)(e.h2,{id:"基本数据类型",children:["基本数据类型",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基本数据类型",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"和其它高级编程语言类似，Go语言同样内置了多种基本数据类型，它们也被称为内置数据类型。"}),"\n",(0,d.jsx)(e.p,{children:"除了基本数据类型之外，还有接口类型（下一讲中会介绍）和复合类型（可以简单地理解为基本数据的“组合体”，如数组、切片、结构体等）。"}),"\n",(0,d.jsx)(e.p,{children:"由此可见，掌握基本数据类型是实现复杂运算乃至构建复杂程序的基础，也是日常开发中使用最频繁的类型。"}),"\n",(0,d.jsx)(e.p,{children:"Go语言的基本数据类型包括数字型（含整数int系列、浮点数float系列和复数complex系列）、布尔型（bool）和字符串型(string)。对于数字型和布尔型较为易懂，在本讲前面的内容中已经使用过了，这里要特别强调字符串型。"}),"\n",(0,d.jsx)(e.p,{children:"对于字符串型值，我们通常在必要时使用一些转义字符，以实现文本的正确输出。"}),"\n",(0,d.jsx)(e.p,{children:"举例来说，如果我们想要使用单个变量表示下面的两行字："}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:'汉语:"你好"的英文翻译是:"Hello" 汉语:"早上好"的英文翻译是:"Good Morning"'}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:"代码可写为："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:'var text string = "汉语:\\"你好\\"的英文翻译是:\\"Hello\\"\\n汉语:\\"早上好\\"的英文翻译是:\\"Good Morning\\""\r\nfmt.Println(text)\n'})}),"\n",(0,d.jsx)(e.p,{children:'这段代码中，使用了"输出英文双引号，\\n用作换行。当然，若使用中文的双引号时无需使用转义的。更多转义字符及含义请参考附录四。'}),"\n",(0,d.jsxs)(e.h2,{id:"小结",children:["小结",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"\uD83C\uDF89 恭喜，您完成了本次课程的学习！"}),"\n",(0,d.jsx)(e.p,{children:"\uD83D\uDCCC 以下是本次课程的重点内容总结："}),"\n",(0,d.jsxs)(e.ol,{children:["\n",(0,d.jsx)(e.li,{children:"变量与常量"}),"\n",(0,d.jsx)(e.li,{children:"声明"}),"\n",(0,d.jsx)(e.li,{children:"基本数据类型"}),"\n",(0,d.jsx)(e.li,{children:"代码风格约定"}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:"我们使用的几乎所有软件的背后，其实都是数据，数据是构成程序的基础单位。Go语言将数据分为了常量与变量，分别表示不变的数据和可变的数据。程序运行后，数据被放到计算机内存中管理并参与运算。声明在内存中开辟空间，让数据在内存中“安家”。"}),"\n",(0,d.jsx)(e.p,{children:"为了增强代码的可读性和安全性，Go语言本身是静态语言，数据的类型在声明时便要指定。Go语言中的基本数据类型分为数值型、布尔型和字符串型。"}),"\n",(0,d.jsx)(e.p,{children:"为了便于理解和规范代码，为变量命名时，遵循“驼峰式命名法”，再根据可见性使用小驼峰和大驼峰式；为常量命名时，遵循全大写，单词之间使用下划线分割的方式命名。另外，源码文件名、包名等也有规范命名要求。"}),"\n",(0,d.jsx)(e.p,{children:"学习这一讲时，我特别建议大家动手实践，尤其对于编程0基础的同学来说，练习更为重要，切勿停留在理解层面。如果有问题的话，欢迎各位随时在微信群里发问。"}),"\n",(0,d.jsx)(e.p,{children:"➡️ 在下次课程中，我们会阐述如下内容："}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["Go语言基础语法之流程控制结构，包括：","\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"指针类型"}),"\n",(0,d.jsx)(e.li,{children:"运算符及优先级"}),"\n",(0,d.jsx)(e.li,{children:"类型转换"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h2,{id:"附录一-go语言中的关键字和保留字",children:["附录一 Go语言中的关键字和保留字",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#附录一-go语言中的关键字和保留字",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Go语言中的关键字"})}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"包管理"}),"\n",(0,d.jsx)(e.th,{children:"声明与定义"}),"\n",(0,d.jsx)(e.th,{children:"流程控制"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"import、package"}),"\n",(0,d.jsx)(e.td,{children:"chan、const、func、interface、map、struct、type、var"}),"\n",(0,d.jsx)(e.td,{children:"break、case、continue、default、defer、else、fallthrough、for、go、goto、if、range、return、select"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.strong,{children:"Go语言中的保留字"})}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"常量"}),"\n",(0,d.jsx)(e.th,{children:"变量类型"}),"\n",(0,d.jsx)(e.th,{children:"内置函数名"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"true、false、iota、nil"}),"\n",(0,d.jsx)(e.td,{children:"Int、int8、int16、int32、int64、uint、uint8、uint16、uint32、uint64、uintptr、float32、float64、complex128、complex64、bool、byte、rune、string、error"}),"\n",(0,d.jsx)(e.td,{children:"make、len、cap、new、append、copy、close、delete、complex、real、imag、panic、recover"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h2,{id:"附录二-go语言命名规范",children:["附录二 Go语言命名规范",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#附录二-go语言命名规范",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"Go语言中的命名规则应尽量使用能表达其含义或目的的一个或多个英文单词来命名。英文单词之间的连接方式和大小写规则如下："}),"\n",(0,d.jsxs)(e.h3,{id:"源码文件名",children:["源码文件名",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#源码文件名",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"英文单词全部小写，每个单词之间使用下划线分割。"}),"\n",(0,d.jsx)(e.p,{children:"如：hello_world.go、calc.go"}),"\n",(0,d.jsxs)(e.h3,{id:"包名",children:["包名",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#包名",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"使用尽量简短的英文单词，全部小写，名称不要与Go内置标准库相同。"}),"\n",(0,d.jsx)(e.p,{children:"如：net、database"}),"\n",(0,d.jsxs)(e.h3,{id:"变量名",children:["变量名",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#变量名",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"整体遵循驼峰式命名法。允许从外部访问的名字（类似Java中的public修饰符）以大写开头（大驼峰法，亦称帕斯卡命名法），不允许从外部访问的名字以小写开头（小驼峰法）。对于布尔类型的变量，可考虑添加Has、Is、Can、Allow前缀。"}),"\n",(0,d.jsx)(e.p,{children:"如：age、personStatus、StudentAge、isDarkMode"}),"\n",(0,d.jsxs)(e.h3,{id:"常量名",children:["常量名",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#常量名",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"英文单词全部大写，每个单词之间使用下划线分割。对于布尔类型的变量，可考虑添加Has、Is、Can、Allow前缀。"}),"\n",(0,d.jsx)(e.p,{children:"如：SERVER_URL、IS_ALLOW_DOWNLOAD"}),"\n",(0,d.jsxs)(e.h3,{id:"结构体名",children:["结构体名",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#结构体名",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"整体遵循驼峰式命名法。允许从外部访问的名字（类似Java中的public修饰符）以大写开头（大驼峰法，亦称帕斯卡命名法），不允许从外部访问的名字以小写开头（小驼峰法）。"}),"\n",(0,d.jsx)(e.p,{children:'如：personInfo := {"David", "18"}'}),"\n",(0,d.jsx)(e.p,{children:"使用struct关键字进行声明和初始化时，使用多行表示，每行表示一个成员。"}),"\n",(0,d.jsx)(e.p,{children:"如："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:"type PersonInfo struct {\r\n   name string\r\n   age  int\r\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"接口名",children:["接口名",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#接口名",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"整体遵循驼峰式命名法。允许从外部访问的名字（类似Java中的public修饰符）以大写开头（大驼峰法，亦称帕斯卡命名法），不允许从外部访问的名字以小写开头（小驼峰法），通常以“er”结尾。"}),"\n",(0,d.jsx)(e.p,{children:"如："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Go",children:"type DownloadListener interface {\r\n   DownloadStart() (err error)\r\n   DownloadInProgress() (err error)\r\n   DownloadComplete() (err error)\r\n}\n"})}),"\n",(0,d.jsxs)(e.h2,{id:"附录三-go语言基本数据类型定义及精度",children:["附录三 Go语言基本数据类型定义及精度",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#附录三-go语言基本数据类型定义及精度",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"整数型",children:["整数型",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#整数型",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"类型"}),"\n",(0,d.jsx)(e.th,{children:"精度"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"uint8"}),"\n",(0,d.jsx)(e.td,{children:"无符号 8 位整型 (0 到 28-1)"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"uint16"}),"\n",(0,d.jsx)(e.td,{children:"无符号 16 位整型 (0 到 216-1)"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"uint32"}),"\n",(0,d.jsx)(e.td,{children:"无符号 32 位整型 (0 到 232-1)"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"uint64"}),"\n",(0,d.jsx)(e.td,{children:"无符号 64 位整型 (0 到 264-1)"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"int8"}),"\n",(0,d.jsx)(e.td,{children:"有符号 8 位整型 (-27 到 27-1)"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"int16"}),"\n",(0,d.jsx)(e.td,{children:"有符号 16 位整型 (-215 到 215-1)"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"int32"}),"\n",(0,d.jsx)(e.td,{children:"有符号 32 位整型 (-231 到 231)"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"int64"}),"\n",(0,d.jsx)(e.td,{children:"有符号 64 位整型 (-264 到 264)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"浮点型",children:["浮点型",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#浮点型",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"类型"}),"\n",(0,d.jsx)(e.th,{children:"精度"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"float32"}),"\n",(0,d.jsx)(e.td,{children:"\xb11.18\xd710-38 到 \xb13.4\xd71038"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"float64"}),"\n",(0,d.jsx)(e.td,{children:"\xb12.23\xd710-308 到 \xb11.8\xd710308"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"复数型",children:["复数型",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#复数型",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"类型"}),"\n",(0,d.jsx)(e.th,{children:"精度"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"complex64"}),"\n",(0,d.jsx)(e.td,{children:"含 float32 位实数和 float32 位虚数"}),"\n"]}),"\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"complex128"}),"\n",(0,d.jsx)(e.td,{children:"含 float64 位实数和 float64 位虚数"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"布尔型",children:["布尔型",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#布尔型",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"类型"}),"\n",(0,d.jsx)(e.th,{children:"精度"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"bool"}),"\n",(0,d.jsx)(e.td,{children:"true 或 false"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.h3,{id:"字符串型",children:["字符串型",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串型",children:"#"})]}),"\n",(0,d.jsxs)(e.table,{children:["\n",(0,d.jsxs)(e.thead,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.th,{children:"类型"}),"\n",(0,d.jsx)(e.th,{children:"精度"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.tbody,{children:["\n",(0,d.jsxs)(e.tr,{children:["\n",(0,d.jsx)(e.td,{children:"string"}),"\n",(0,d.jsx)(e.td,{children:"UTF-8 编码标识的 Unicode 文本"}),"\n"]}),"\n"]}),"\n"]})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(h,{...n})}):h(n)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E9%9B%B6%E5%9F%BA%E7%A1%80%E9%80%9A%E5%85%B3Go%E8%AF%AD%E8%A8%80%2F%E7%AC%AC05%E7%AB%A0%E2%80%94%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%80%EF%BD%9C%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F%E3%80%81%E5%A3%B0%E6%98%8E%E3%80%81%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B.md"]={toc:[{text:"变量与常量",id:"变量与常量",depth:2},{text:"声明与赋值",id:"声明与赋值",depth:2},{text:"变量的声明与赋值",id:"变量的声明与赋值",depth:3},{text:"常量的声明与赋值",id:"常量的声明与赋值",depth:3},{text:"Go语言的类型推断",id:"go语言的类型推断",depth:3},{text:"批量声明/赋值",id:"批量声明赋值",depth:3},{text:"基本数据类型",id:"基本数据类型",depth:2},{text:"小结",id:"小结",depth:2},{text:"附录一 Go语言中的关键字和保留字",id:"附录一-go语言中的关键字和保留字",depth:2},{text:"附录二 Go语言命名规范",id:"附录二-go语言命名规范",depth:2},{text:"源码文件名",id:"源码文件名",depth:3},{text:"包名",id:"包名",depth:3},{text:"变量名",id:"变量名",depth:3},{text:"常量名",id:"常量名",depth:3},{text:"结构体名",id:"结构体名",depth:3},{text:"接口名",id:"接口名",depth:3},{text:"附录三 Go语言基本数据类型定义及精度",id:"附录三-go语言基本数据类型定义及精度",depth:2},{text:"整数型",id:"整数型",depth:3},{text:"浮点型",id:"浮点型",depth:3},{text:"复数型",id:"复数型",depth:3},{text:"布尔型",id:"布尔型",depth:3},{text:"字符串型",id:"字符串型",depth:3}],title:"第05章—基础语法一｜变量和常量、声明、基本类型",headingTitle:"第05章—基础语法一｜变量和常量、声明、基本类型",frontmatter:{}}}}]);