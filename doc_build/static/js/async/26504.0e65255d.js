"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["26504"],{693216:function(n,e,r){r.r(e),r.d(e,{default:()=>i});var s=r(552676),d=r(740453);function c(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",pre:"pre",ul:"ul",li:"li",h2:"h2",h3:"h3",strong:"strong",br:"br",ol:"ol"},(0,d.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"20排序算法专题上",children:["20.排序算法专题（上）",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#20排序算法专题上",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"各位老铁，从本节开始，我们进入排序算法的世界。"}),"\n",(0,s.jsxs)(e.p,{children:["对于前端来说，排序算法在应用方面似乎始终不是什么瓶颈——",(0,s.jsx)(e.code,{children:"JS"})," 天生地提供了对排序能力的支持，很多时候，我们实现排序只需要这样寥寥数行的代码："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"arr.sort((a,b) => {\n    return a - b\n})\n"})}),"\n",(0,s.jsx)(e.p,{children:"以某一个排序算法为“引子”，顺藤摸瓜式地盘问，可以问出非常多的东西，这也是排序算法始终热门的一个重要原因——面试官可以通过这种方式在较短的时间里试探出候选人算法能力的扎实程度和知识链路的完整性。因此排序算法在面试中的权重不容小觑。"}),"\n",(0,s.jsx)(e.p,{children:"以面试为导向来看，需要大家着重掌握的排序算法，主要是以下5种："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["基础排序算法：","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"冒泡排序"}),"\n",(0,s.jsx)(e.li,{children:"插入排序"}),"\n",(0,s.jsx)(e.li,{children:"选择排序"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["进阶排序算法","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"归并排序"}),"\n",(0,s.jsx)(e.li,{children:"快速排序"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"我们的学习安排就按照这个从基础到进阶的次序来。"}),"\n",(0,s.jsx)(e.p,{children:"和以往不同的是，本专题的讲解线索不再是“题目”，而是排序算法本身：针对每一种算法，我都会首先介绍其思想，然后为大家逐步示范一遍真实的排序过程，接着为大家做编码教学。最后，别忘了，排序算法的时间复杂度也是一个不能忽视的考点，“编码复盘”部分我们不见不散。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-!",children:"注意：考虑到排序类题目在未经特别声明的情况下，都默认以“从小到大排列”为有序标准。因此下文中所有”有序“的描述指代的都是“从小到大排列”。\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"冒泡排序",children:["冒泡排序",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#冒泡排序",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"基本思路分析",children:["基本思路分析",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基本思路分析",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["冒泡排序的过程，就是从第一个元素开始，",(0,s.jsx)(e.strong,{children:"重复比较相邻的两个项"}),"，若第一项比第二项更大，则交换两者的位置；反之不动。",(0,s.jsx)(e.br,{}),"\n","每一轮操作，都会将这一轮中最大的元素放置到数组的末尾。假如数组的长度是 ",(0,s.jsx)(e.code,{children:"n"}),"，那么当我们重复完 ",(0,s.jsx)(e.code,{children:"n"})," 轮的时候，整个数组就有序了。"]}),"\n",(0,s.jsxs)(e.h3,{id:"真实排序过程演示",children:["真实排序过程演示",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#真实排序过程演示",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"下面我们基于冒泡排序的思路，尝试对以下数组进行排序："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[5, 3, 2, 4, 1]\n"})}),"\n",(0,s.jsx)(e.p,{children:"首先，将第一个元素 5 和它相邻的元素 3 作比较，发现5 比 3 大，故将 5 和 3 交换："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[3, 5, 2, 4, 1]\n ↑  ↑\n"})}),"\n",(0,s.jsx)(e.p,{children:"将第二个元素 5 和第三个元素 2 作比较，发现 5 比 2大，故将 5 和 2 交换："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[3, 2, 5, 4, 1]\n    ↑  ↑\n"})}),"\n",(0,s.jsx)(e.p,{children:"将第三个元素 5 和第四个元素 4 作比较，发现 5 比 4 大，故将 5 和 4 交换："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[3, 2, 4, 5, 1]\n       ↑  ↑\n"})}),"\n",(0,s.jsx)(e.p,{children:"将第四个元素 5 和第五个元素 1 作比较，发现 5 比 1 大，故将 5 和 1 交换："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[3, 2, 4, 1, 5]\n          ↑ ↑\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"至此我们就完成了一轮排序，此时，五个数中最大的数字 5 仿佛气泡浮出水面一样，被”冒“到了数组顶部"}),"。这也是冒泡排序得名的原因。"]}),"\n",(0,s.jsx)(e.p,{children:"重复上面的操作，我们继续从第一个元素开始看起。比较 3 和 2，发现 3 比 2 大，交换两者："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 3, 4, 1, 5]\n ↑  ↑\n"})}),"\n",(0,s.jsx)(e.p,{children:"比较 3 和 4，发现 3 比 4 小，符合从小到大排列的原则，故保持不动："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 3, 4, 1, 5]\n    ↑  ↑\n"})}),"\n",(0,s.jsx)(e.p,{children:"比较 4 和 1，发现 4 比 1 大，交换两者："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 3, 1, 4, 5]\n       ↑  ↑\n"})}),"\n",(0,s.jsx)(e.p,{children:"比较 4 和 5，发现 4 比 5 小，符合从小到大排列的原则，故保持不动："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 3, 1, 4, 5]\n          ↑  ↑\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"以上我们完成了第二轮排序，至此，五个数中第二大的数字 4 也被”冒“到了数组相对靠后的位置"}),"。",(0,s.jsx)(e.br,{}),"\n","沿着这个思路往下走，仍然是从第一个元素开始，比较 2 和 3。发现 2 比 3 小，符合排序原则，故保持不动："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 3, 1, 4, 5]\n ↑  ↑\n"})}),"\n",(0,s.jsx)(e.p,{children:"接着走下去，比较 3 和 1，发现 3 比 1 大，交换两者："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 1, 3, 4, 5]\n    ↑  ↑\n"})}),"\n",(0,s.jsx)(e.p,{children:"比较 3 和 4，发现 3 比 4 小，符合排序原则，故保持不动："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 1, 3, 4, 5]\n       ↑  ↑\n"})}),"\n",(0,s.jsx)(e.p,{children:"比较 4 和 5，发现 4 比 5 小，符合排序原则，故保持不动："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 1, 3, 4, 5]\n          ↑  ↑\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"以上我们完成了第二轮排序，至此，五个数中第三大的数字 3 被”冒“到了倒数第三个的位置"}),"。",(0,s.jsx)(e.br,{}),"\n","继续我们的循环，从当前的第一个元素 2 开始，比较 2 和相邻元素 1，发现 2 比 1 大，交换两者："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[1, 2, 3, 4, 5]\n ↑  ↑\n"})}),"\n",(0,s.jsx)(e.p,{children:"接下来仍然会对剩余的元素进行相邻元素比较，但由于不再发生交换，所以我们这里简写一下每一步对应的相邻元素关系："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[1, 2, 3, 4, 5]\n    ↑  ↑\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[1, 2, 3, 4, 5]\n       ↑  ↑\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[1, 2, 3, 4, 5]\n       ↑  ↑\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[1, 2, 3, 4, 5]\n          ↑  ↑\n"})}),"\n",(0,s.jsxs)(e.p,{children:["经过第四轮冒泡，整个数组已经完全达到了有序状态。不过，冒泡排序的逻辑并不会因为数组有序就立刻停下来——”从头到尾遍历数组，对比+交换每两个相邻元素“这套逻辑到底要执行多少次，按照我们目前的基本思路来看，是完全由数组中元素的个数来决定的：每一次从头到尾的遍历都只能定位到一个元素的位置，因此元素有多少个，总的循环就要执行多少轮。",(0,s.jsx)(e.br,{}),"\n","在这个例子中，总的元素有 5 个，因此理论上来说还有一轮从头到尾的循环要走。",(0,s.jsx)(e.br,{}),"\n","相信大家已经隐约感觉到了哪里不对，不过没关系，掌握了基本思路，优化啥的都好说。我们先按照这个思路来编码："]}),"\n",(0,s.jsxs)(e.h3,{id:"基本冒泡思路编码实现",children:["基本冒泡思路编码实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基本冒泡思路编码实现",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function bubbleSort(arr) {\n    // 缓存数组长度\n    const len = arr.length  \n    // 外层循环用于控制从头到尾的比较+交换到底有多少轮\n    for(let i=0;i<len;i++) {  \n        // 内层循环用于完成每一轮遍历过程中的重复比较+交换\n        for(let j=0;j<len-1;j++) {\n            // 若相邻元素前面的数比后面的大\n            if(arr[j] > arr[j+1]) {  \n                // 交换两者\n                [arr[j], arr[j+1]] = [arr[j+1], arr[j]]\n            }\n        }\n    }\n    // 返回数组\n    return arr\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"基本冒泡思路的改进",children:["基本冒泡思路的改进",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基本冒泡思路的改进",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"在上面的示例中，我们已经初步分析出了这样一个结论：在冒泡排序的过程中，有一些”动作“是不太必要的。比如数组在已经有序的情况下，为什么还要强行再从头到尾再对数组做一次遍历？"}),"\n",(0,s.jsxs)(e.p,{children:["这背后的根本原因是，我们忽略了这样一个事实：随着外层循环的进行，数组尾部的元素会渐渐变得有序——当我们走完第1轮循环的时候，最大的元素被排到了数组末尾；走完第2轮循环的时候，第2大的元素被排到了数组倒数第2位；走完第3轮循环的时候，第3大的元素被排到了数组倒数第3位......以此类推，走完第 n 轮循环的时候，数组的后 ",(0,s.jsx)(e.code,{children:"n"})," 个元素就已经是有序的。"]}),"\n",(0,s.jsx)(e.p,{children:"楼上基本冒泡思路的问题在于，没有区别处理这一部分已经有序的元素，而是把它和未排序的部分做了无差别的处理，进而造成了许多不必要的比较。"}),"\n",(0,s.jsxs)(e.p,{children:["为了避免这些冗余的比较动作，我们需要规避掉数组中的后 ",(0,s.jsx)(e.code,{children:"n"})," 个元素，对应的代码可以这样写："]}),"\n",(0,s.jsxs)(e.h3,{id:"改进版冒泡排序的编码实现",children:["改进版冒泡排序的编码实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#改进版冒泡排序的编码实现",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function betterBubbleSort(arr) {\n    const len = arr.length  \n    for(let i=0;i<len;i++) {\n        // 注意差别在这行，我们对内层循环的范围作了限制\n        for(let j=0;j<len-1-i;j++) {\n            if(arr[j] > arr[j+1]) {\n                [arr[j], arr[j+1]] = [arr[j+1], arr[j]]\n            }\n        }\n    }\n    return arr\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"面向最好情况的进一步改进",children:["面向“最好情况”的进一步改进",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#面向最好情况的进一步改进",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["很多同学反映说，在不少教材里都看到了“冒泡排序时间复杂度在最好情况下是 O(n)”这种说法，但是横看竖看，包括楼上示例在内的各种冒泡排序主流模板似乎都无法帮助我们推导出 ",(0,s.jsx)(e.code,{children:"O(n)"})," 这个结果。",(0,s.jsx)(e.br,{}),"\n","实际上，你的想法是对的，冒泡排序最常见的写法（也就是楼上的编码示例）在最好情况下对应的时间复杂度确实不是",(0,s.jsx)(e.code,{children:"O(n)"}),"，而是",(0,s.jsx)(e.code,{children:"O(n^2)"}),"。",(0,s.jsx)(e.br,{}),"\n","那么是",(0,s.jsx)(e.code,{children:"O(n)"}),"这个说法错了吗？其实也不错，因为冒泡排序通过进一步的改进，确实是可以做到最好情况下 ",(0,s.jsx)(e.code,{children:"O(n)"}),"复杂度的，这里我先把代码给大家写出来（注意解析在注释里）："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function betterBubbleSort(arr) {\n    const len = arr.length  \n    \n    for(let i=0;i<len;i++) {\n        // 区别在这里，我们加了一个标志位\n        let flag = false\n        for(let j=0;j<len-1-i;j++) {\n            if(arr[j] > arr[j+1]) {\n                [arr[j], arr[j+1]] = [arr[j+1], arr[j]]\n                // 只要发生了一次交换，就修改标志位\n                flag = true\n            }\n        }\n        \n        // 若一次交换也没发生，则说明数组有序，直接放过\n        if(flag == false)  return arr;\n    }\n    return arr\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["标志位可以帮助我们在第一次冒泡的时候就定位到数组是否完全有序，进而节省掉不必要的判断逻辑，将最好情况下的时间复杂度定向优化为 ",(0,s.jsx)(e.code,{children:"O(n)"}),"。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-!",children:"注意，以上几种写法中，改进后的版本可以视为标准的冒泡排序。但笔者更推荐大家把两个思路都记住，尤其是要理解从基本思路到改进思路的演进过程和优化依据。\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"编码复盘冒泡排序的时间复杂度",children:["编码复盘——冒泡排序的时间复杂度",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码复盘冒泡排序的时间复杂度",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"我们分最好、最坏和平均来看："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"最好时间复杂度"}),"：它对应的是数组本身有序这种情况。在这种情况下，我们只需要作比较（n-1 次），而不需要做交换。时间复杂度为 ",(0,s.jsx)(e.strong,{children:"O(n)"})]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"最坏时间复杂度"}),"： 它对应的是数组完全逆序这种情况。在这种情况下，每一轮内层循环都要执行，重复的总次数是 n(n-1)/2 次，因此时间复杂度是 ",(0,s.jsx)(e.strong,{children:"O(n^2)"})]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"平均时间复杂度"}),"：这个东西比较难搞，它涉及到一些概率论的知识。实际面试的时候也不会有面试官摁着你让你算这个，这里记住平均时间复杂度是 ",(0,s.jsx)(e.strong,{children:"O(n^2)"})," 即可。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-!",children:"对于每一种排序算法的时间复杂度，大家对计算依据有了解即可，重点在于记忆。面试的时候不要靠现场推导，要靠直觉+条件反射。\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"选择排序",children:["选择排序",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#选择排序",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"思路分析",children:["思路分析",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#思路分析",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["选择排序的关键字是“",(0,s.jsx)(e.strong,{children:"最小值"}),"”：循环遍历数组，每次都找出当前范围内的最小值，把它放在当前范围的头部；然后缩小排序范围，继续重复以上操作，直至数组完全有序为止。"]}),"\n",(0,s.jsxs)(e.h3,{id:"真实排序过程演示-1",children:["真实排序过程演示",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#真实排序过程演示-1",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"下面我们尝试基于选择排序的思路，对如下数组进行排序："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[5, 3, 2, 4, 1]\n"})}),"\n",(0,s.jsx)(e.p,{children:"首先，索引范围为 [0, n-1] 也即 [0,4] 之间的元素进行的遍历（两个箭头分别对应当前范围的起点和终点）："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[5, 3, 2, 4, 1]\n ↑           ↑\n"})}),"\n",(0,s.jsxs)(e.p,{children:["得出整个数组的最小值为 ",(0,s.jsx)(e.code,{children:"1"}),"。因此把",(0,s.jsx)(e.code,{children:"1"}),"锁定在当前范围的头部，也就是和 ",(0,s.jsx)(e.code,{children:"5"})," 进行交换："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[1, 3, 2, 4, 5]\n"})}),"\n",(0,s.jsx)(e.p,{children:"交换后，数组的第一个元素值就明确了。接下来需要排序的是 [1, 4] 这个索引区间："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[1, 3, 2, 4, 5]\n    ↑        ↑\n"})}),"\n",(0,s.jsxs)(e.p,{children:["遍历这个区间，找出区间内最小值为 ",(0,s.jsx)(e.code,{children:"2"}),"。因此区间头部的元素锁定为 ",(0,s.jsx)(e.code,{children:"2"}),"，也就是把 ",(0,s.jsx)(e.code,{children:"2"})," 和 ",(0,s.jsx)(e.code,{children:"3"})," 交换。相应地，将需要排序的区间范围的起点再次后移一位，此时区间为 [2, 4]："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[1, 2, 3, 4, 5]\n       ↑     ↑\n"})}),"\n",(0,s.jsxs)(e.p,{children:["遍历 [2,4] 区间，得到最小值为 ",(0,s.jsx)(e.code,{children:"3"}),"。",(0,s.jsx)(e.code,{children:"3"})," 本来就在当前区间的头部，因此不需要做额外的交换。",(0,s.jsx)(e.br,{}),"\n","以此类推，",(0,s.jsx)(e.code,{children:"4"}),"会被定位为索引区间 [3,4] 上的最小值，仍然是不需要额外交换的。"]}),"\n",(0,s.jsx)(e.p,{children:"基于这个思路，我们来写代码："}),"\n",(0,s.jsxs)(e.h3,{id:"编码示范",children:["编码示范",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码示范",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function selectSort(arr)  {\n  // 缓存数组长度\n  const len = arr.length \n  // 定义 minIndex，缓存当前区间最小值的索引，注意是索引\n  let minIndex  \n  // i 是当前排序区间的起点\n  for(let i = 0; i < len - 1; i++) { \n    // 初始化 minIndex 为当前区间第一个元素\n    minIndex = i  \n    // i、j分别定义当前区间的上下界，i是左边界，j是右边界\n    for(let j = i; j < len; j++) {  \n      // 若 j 处的数据项比当前最小值还要小，则更新最小值索引为 j\n      if(arr[j] < arr[minIndex]) {  \n        minIndex = j\n      }\n    }\n    // 如果 minIndex 对应元素不是目前的头部元素，则交换两者\n    if(minIndex !== i) {\n      [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]]\n    }\n  }\n  return arr\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"编码复盘选择排序的时间复杂度",children:["编码复盘——选择排序的时间复杂度",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码复盘选择排序的时间复杂度",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["在时间复杂度这方面，选择排序没有那么多弯弯绕绕：最好情况也好，最坏情况也罢，两者之间的区别仅仅在于元素交换的次数不同，",(0,s.jsx)(e.strong,{children:"但都是要走内层循环作比较的"}),"。因此选择排序的三个时间复杂度都对应两层循环消耗的时间量级： O(n^2)。"]}),"\n",(0,s.jsxs)(e.h2,{id:"插入排序",children:["插入排序",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#插入排序",children:"#"})]}),"\n",(0,s.jsxs)(e.h3,{id:"思路分析-1",children:["思路分析",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#思路分析-1",children:"#"})]}),"\n",(0,s.jsxs)(e.p,{children:["插入排序的核心思想是“找到元素在它前面那个序列中的正确位置”。",(0,s.jsx)(e.br,{}),"\n","具体来说，插入排序所有的操作都基于一个这样的前提：当前元素前面的序列是有序的。基于这个前提，从后往前去寻找当前元素在前面那个序列里的正确位置。"]}),"\n",(0,s.jsxs)(e.h3,{id:"真实排序过程演示-2",children:["真实排序过程演示",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#真实排序过程演示-2",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"下面我们尝试基于插入排序的思路，对如下数组进行排序："}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[5, 3, 2, 4, 1]\n"})}),"\n",(0,s.jsxs)(e.p,{children:["首先，单个数字一定有序，因此数组首位的这个 ",(0,s.jsx)(e.code,{children:"5"})," 可以看做是一个有序序列。在这样的前提下， 我们就可以选中第二个元素 ",(0,s.jsx)(e.code,{children:"3"})," 作为当前元素，思考它和前面那个序列 ",(0,s.jsx)(e.code,{children:"[5]"})," 之间的关系。很明显， ",(0,s.jsx)(e.code,{children:"3"})," 比 ",(0,s.jsx)(e.code,{children:"5"})," 小，注意这里按照插入排序的原则，靠前的较大数字要为靠后的较小数字腾出位置："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[暂时空出, 5, 2, 4, 1]\n当前元素 3\n"})}),"\n",(0,s.jsxs)(e.p,{children:["再往前看，发现没有更小的元素可以作比较了。那么现在空出的这个位置就是当前元素 ",(0,s.jsx)(e.code,{children:"3"})," 应该待的地方："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[3, 5, 2, 4, 1]\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"以上我们就完成了一轮插入。这一轮插入结束后，大家会发现，有序数组 [5] 现在变成了有序数组 [3, 5]"}),"——这正是插入排序的用意所在，",(0,s.jsx)(e.strong,{children:"通过正确地定位当前元素在有序序列里的位置、不断扩大有序数组的范围，最终达到完全排序的目的"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["沿着这个思路，继续往下走，当前元素变成了紧跟[3, 5] 这个有序序列的 ",(0,s.jsx)(e.code,{children:"2"}),"。对比 ",(0,s.jsx)(e.code,{children:"2"})," 和 ",(0,s.jsx)(e.code,{children:"5"})," 的大小，发现 ",(0,s.jsx)(e.code,{children:"2"})," 比 ",(0,s.jsx)(e.code,{children:"5"})," 小。按照插入排序的原则，",(0,s.jsx)(e.code,{children:"5"}),"要往后挪，给较小元素空出一个位置："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[3, 暂时空出, 5, 4, 1]\n当前元素 2\n"})}),"\n",(0,s.jsxs)(e.p,{children:["接着继续向前对比，遇到了 ",(0,s.jsx)(e.code,{children:"3"}),"。对比 ",(0,s.jsx)(e.code,{children:"3"})," 和 ",(0,s.jsx)(e.code,{children:"2"})," 的大小，发现 ",(0,s.jsx)(e.code,{children:"3"})," 比 ",(0,s.jsx)(e.code,{children:"2"})," 大。按照插入排序的原则，",(0,s.jsx)(e.code,{children:"3"}),"要往后挪，给较小元素空出一个位置："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[暂时空出, 3, 5, 4, 1]\n当前元素 2\n"})}),"\n",(0,s.jsxs)(e.p,{children:["此时 ",(0,s.jsx)(e.code,{children:"2"})," 前面的有序序列已经被对比完毕了。我们把 ",(0,s.jsx)(e.code,{children:"2"})," 放到最终空出来的那个属于它的空位里去："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 3, 5, 4, 1]\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"以上我们完成了第二轮插入。这一轮插入结束后，有序数组 [3, 5] 现在变成了有序数组 [2, 3, 5]"}),"。"]}),"\n",(0,s.jsxs)(e.p,{children:["继续往下走，紧跟有序数组 [2, 3, 5] 的元素是 ",(0,s.jsx)(e.code,{children:"4"}),"。仍然是从后往前，首先对比 ",(0,s.jsx)(e.code,{children:"4"})," 和 ",(0,s.jsx)(e.code,{children:"5"})," 的大小，发现 ",(0,s.jsx)(e.code,{children:"4"})," 比 ",(0,s.jsx)(e.code,{children:"5"})," 小，那么 ",(0,s.jsx)(e.code,{children:"5"})," 就要为更小的元素空出一个位置："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 3, 暂时空出, 5, 1]\n当前元素 4\n"})}),"\n",(0,s.jsxs)(e.p,{children:["向前对比，遇到了 ",(0,s.jsx)(e.code,{children:"3"}),"。因为 ",(0,s.jsx)(e.code,{children:"4"})," 比 ",(0,s.jsx)(e.code,{children:"3"})," 大，符合从小到大的排序原则；同时已知当前这个序列是有序的，",(0,s.jsx)(e.code,{children:"3"})," 前面的数字一定都比 ",(0,s.jsx)(e.code,{children:"3"})," 小，再继续向前查找就没有意义了。因此当前空出的这个坑就是 ",(0,s.jsx)(e.code,{children:"4"})," 应该待的地方："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[2, 3, 4, 5, 1]\n"})}),"\n",(0,s.jsxs)(e.p,{children:["以此类推，最后一个元素 ",(0,s.jsx)(e.code,{children:"1"})," 会被拱到 [2, 3, 4, 5] 这个序列的头部去，最终数组得以完全排序："]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"[1, 2, 3, 4, 5]\n"})}),"\n",(0,s.jsx)(e.p,{children:"分析至此，再来帮大家复习一遍插入排序里的几个关键点："}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"当前元素前面的那个序列是有序的"}),"\n",(0,s.jsx)(e.li,{children:"“正确的位置”如何定义——所有在当前元素前面的数都不大于它，所有在当前元素后面的数都不小于它"}),"\n",(0,s.jsx)(e.li,{children:"在有序序列里定位元素位置的时候，是从后往前定位的。只要发现一个比当前元素大的值，就需要为当前元素腾出一个新的坑位。"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"基于这个思路，我们来写代码："}),"\n",(0,s.jsxs)(e.h3,{id:"编码实现",children:["编码实现",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码实现",children:"#"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function insertSort(arr) {\n  // 缓存数组长度\n  const len = arr.length\n  // temp 用来保存当前需要插入的元素\n  let temp  \n  // i用于标识每次被插入的元素的索引\n  for(let i = 1;i < len; i++) {\n    // j用于帮助 temp 寻找自己应该有的定位\n    let j = i\n    temp = arr[i]  \n    // 判断 j 前面一个元素是否比 temp 大\n    while(j > 0 && arr[j-1] > temp) {\n      // 如果是，则将 j 前面的一个元素后移一位，为 temp 让出位置\n      arr[j] = arr[j-1]   \n      j--\n    }\n    // 循环让位，最后得到的 j 就是 temp 的正确索引\n    arr[j] = temp\n  }\n  return arr\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"编码复盘插入排序的时间复杂度",children:["编码复盘——插入排序的时间复杂度",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编码复盘插入排序的时间复杂度",children:"#"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"最好时间复杂度"}),"：它对应的数组本身就有序这种情况。此时内层循环只走一次，整体复杂度取决于外层循环，时间复杂度就是一层循环对应的 ",(0,s.jsx)(e.strong,{children:"O(n)"}),"。"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"最坏时间复杂度"}),"：它对应的是数组完全逆序这种情况。此时内层循环每次都要移动有序序列里的所有元素，因此时间复杂度对应的就是两层循环的 O(n^2)"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"平均时间复杂度"}),"：O(n^2)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"小结",children:["小结",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:"所谓基础排序算法，普遍符合两个特征："}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"易于理解，上手迅速"}),"\n",(0,s.jsx)(e.li,{children:"时间效率差"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["楼上的三个算法完美地诠释了这两个特征。对于基础排序算法，大家不要胡思乱想，你的目标就是默写，面试的时候考的最多的也是默写。",(0,s.jsx)(e.br,{}),"\n","那么在此基础上，排序效率如何提升、排序算法如何与进阶的算法思想相结合？这就是我们下一节要讨论的问题了。"]})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}let i=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%A2%E8%AF%95%EF%BC%9A%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%A4%A7%E5%8E%82%E7%9C%9F%E9%A2%98%E8%AE%AD%E7%BB%83%2F20.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98%EF%BC%88%E4%B8%8A%EF%BC%89.md"]={toc:[{text:"冒泡排序",id:"冒泡排序",depth:2},{text:"基本思路分析",id:"基本思路分析",depth:3},{text:"真实排序过程演示",id:"真实排序过程演示",depth:3},{text:"基本冒泡思路编码实现",id:"基本冒泡思路编码实现",depth:3},{text:"基本冒泡思路的改进",id:"基本冒泡思路的改进",depth:3},{text:"改进版冒泡排序的编码实现",id:"改进版冒泡排序的编码实现",depth:3},{text:"面向“最好情况”的进一步改进",id:"面向最好情况的进一步改进",depth:3},{text:"编码复盘——冒泡排序的时间复杂度",id:"编码复盘冒泡排序的时间复杂度",depth:3},{text:"选择排序",id:"选择排序",depth:2},{text:"思路分析",id:"思路分析",depth:3},{text:"真实排序过程演示",id:"真实排序过程演示-1",depth:3},{text:"编码示范",id:"编码示范",depth:3},{text:"编码复盘——选择排序的时间复杂度",id:"编码复盘选择排序的时间复杂度",depth:3},{text:"插入排序",id:"插入排序",depth:2},{text:"思路分析",id:"思路分析-1",depth:3},{text:"真实排序过程演示",id:"真实排序过程演示-2",depth:3},{text:"编码实现",id:"编码实现",depth:3},{text:"编码复盘——插入排序的时间复杂度",id:"编码复盘插入排序的时间复杂度",depth:3},{text:"小结",id:"小结",depth:2}],title:"20.排序算法专题（上）",headingTitle:"20.排序算法专题（上）",frontmatter:{}}}}]);