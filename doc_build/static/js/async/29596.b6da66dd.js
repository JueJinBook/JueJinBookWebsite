"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["29596"],{889794:function(n,e,d){d.r(e),d.d(e,{default:()=>t});var a=d(552676),s=d(740453);function r(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li"},(0,s.ah)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"4实现-virtual-dom-下的一个-vnode-节点",children:["4.实现 Virtual DOM 下的一个 VNode 节点",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4实现-virtual-dom-下的一个-vnode-节点",children:"#"})]}),"\n",(0,a.jsxs)(e.h2,{id:"什么是vnode",children:["什么是VNode",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是vnode",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。"}),"\n",(0,a.jsxs)(e.h2,{id:"实现一个vnode",children:["实现一个VNode",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现一个vnode",children:"#"})]}),"\n",(0,a.jsxs)(e.p,{children:["VNode 归根结底就是一个 JavaScript 对象，只要这个类的一些属性可以正确直观地描述清楚当前节点的信息即可。我们来实现一个简单的 ",(0,a.jsx)(e.code,{children:"VNode"})," 类，加入一些基本属性，为了便于理解，我们先不考虑复杂的情况。"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"class VNode {\n    constructor (tag, data, children, text, elm) {\n        /*当前节点的标签名*/\n        this.tag = tag;\n        /*当前节点的一些数据信息，比如props、attrs等数据*/\n        this.data = data;\n        /*当前节点的子节点，是一个数组*/\n        this.children = children;\n        /*当前节点的文本*/\n        this.text = text;\n        /*当前虚拟节点对应的真实dom节点*/\n        this.elm = elm;\n    }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"比如我目前有这么一个 Vue 组件。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:'<template>\n  <span class="demo" v-show="isShow">\n    This is a span.\n  </span>\n</template>\n'})}),"\n",(0,a.jsx)(e.p,{children:"用 JavaScript 代码形式就是这样的。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function render () {\n    return new VNode(\n        'span',\n        {\n            /* 指令集合数组 */\n            directives: [\n                {\n                    /* v-show指令 */\n                    rawName: 'v-show',\n                    expression: 'isShow',\n                    name: 'show',\n                    value: true\n                }\n            ],\n            /* 静态class */\n            staticClass: 'demo'\n        },\n        [ new VNode(undefined, undefined, undefined, 'This is a span.') ]\n    );\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"看看转换成 VNode 以后的情况。"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"{\n    tag: 'span',\n    data: {\n        /* 指令集合数组 */\n        directives: [\n            {\n                /* v-show指令 */\n                rawName: 'v-show',\n                expression: 'isShow',\n                name: 'show',\n                value: true\n            }\n        ],\n        /* 静态class */\n        staticClass: 'demo'\n    },\n    text: undefined,\n    children: [\n        /* 子节点是一个文本VNode节点 */\n        {\n            tag: undefined,\n            data: undefined,\n            text: 'This is a span.',\n            children: undefined\n        }\n    ]\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"然后我们可以将 VNode 进一步封装一下，可以实现一些产生常用 VNode 的方法。"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"创建一个空节点"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function createEmptyVNode () {\n    const node = new VNode();\n    node.text = '';\n    return node;\n}\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"创建一个文本节点"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val));\n}\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"克隆一个 VNode 节点"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function cloneVNode (node) {\n    const cloneVnode = new VNode(\n        node.tag,\n        node.data,\n        node.children,\n        node.text,\n        node.elm\n    );\n    return cloneVnode;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"总的来说，VNode 就是一个 JavaScript 对象，用 JavaScript 对象的属性来描述当前节点的一些状态，用 VNode 节点的形式来模拟一棵 Virtual DOM 树。"}),"\n",(0,a.jsxs)(e.p,{children:["注：本节代码参考",(0,a.jsx)(e.a,{href:"https://github.com/answershuto/VueDemo/blob/master/%E3%80%8A%E5%AE%9E%E7%8E%B0%20Virtual%20DOM%20%E4%B8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%20VNode%20%E8%8A%82%E7%82%B9%E3%80%8B.js",target:"_blank",rel:"noopener noreferrer",children:"《实现 Virtual DOM 下的一个 VNode 节点》"}),"。"]})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(r,{...n})}):r(n)}let t=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["%E5%89%96%E6%9E%90%20Vue.js%20%E5%86%85%E9%83%A8%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%2F4.%E5%AE%9E%E7%8E%B0%20Virtual%20DOM%20%E4%B8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%20VNode%20%E8%8A%82%E7%82%B9.md"]={toc:[{text:"什么是VNode",id:"什么是vnode",depth:2},{text:"实现一个VNode",id:"实现一个vnode",depth:2}],title:"4.实现 Virtual DOM 下的一个 VNode 节点",headingTitle:"4.实现 Virtual DOM 下的一个 VNode 节点",frontmatter:{}}}}]);