"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["22054"],{157886:function(e,n,s){e.exports=s.p+"static/image/fe0affc6469ddc22a3ac923d9458cad5.01c386e5.png"},537253:function(e,n,s){s.r(n),s.d(n,{default:()=>g});var t=s(552676),r=s(740453);let c=s.p+"static/image/ea4673a502d61d55ad4477321041416b.b96c8694.png",i=s.p+"static/image/07c9c4043106b251d1e24d5de3b1ad2e.eec13872.png";var l=s(157886);let o=s.p+"static/image/7326203f4de4fdad7664e484ef1dda3c.dcc854be.png",a=s.p+"static/image/e62204d329e9e08fdd07d61f8b605e8f.0b62368a.png",d=s.p+"static/image/7db2e2dfebf0344af0b618ddf4a5b7a0.adca5dc3.png",h=s.p+"static/image/ed6594456aaf1242655dec1ec197916b.6ebc0d65.png",p=s.p+"static/image/d7980ca56e84e3d372a57b9ddc8ba982.607863d2.png",j=s.p+"static/image/c657a8e134c3c2f6a0298dec8737abaa.0e4dd520.png",x=s.p+"static/image/7ccf8432742bdf47a8c428138e63c330.afe62be3.png";function m(e){let n=Object.assign({p:"p",img:"img",blockquote:"blockquote",a:"a",h2:"h2",ul:"ul",li:"li",code:"code",pre:"pre",h3:"h3",strong:"strong"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"本课程主要讲解如何进行单元测试，对于通用库而言建立单元测试可以保证 API 的稳定性，降低代码错误发生的概率。除此之外，单元测试也是提供 API 用法最详细的教程示例。如果社区的一些通用库没有提供 example 示例，那么可以通过查看单元测试来了解 API 的详细用法。为了使得大家更好的理解课程设计，接下来会按照以下内容进行讲解："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:x,alt:"yuque_diagram (2).jpg"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：本课程不会讲解测试的基础知识，也不会讲解测试的最佳实践，更不会讲解测试框架的对比。如果对这些内容感兴趣，可以优先阅读 ",(0,t.jsx)(n.a,{href:"https://javascript.ruanyifeng.com/tool/testing.html",target:"_blank",rel:"noopener noreferrer",children:"JavaScript 程序测试"}),"、",(0,t.jsx)(n.a,{href:"https://link.juejin.cn/?target=https%3A%2F%2Fraygun.com%2Fblog%2Fjavascript-unit-testing-frameworks%2F",title:"https://raygun.com/blog/javascript-unit-testing-frameworks/",target:"_blank",rel:"noopener noreferrer",children:"JavaScript unit testing frameworks in 2020: A comparison"}),"、",(0,t.jsx)(n.a,{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fgoldbergyoni%2Fjavascript-testing-best-practices%2Fblob%2Fmaster%2Freadme-zh-CN.md",title:"https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme-zh-CN.md",target:"_blank",rel:"noopener noreferrer",children:"javascript-testing-best-practices"})," 等。"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"为什么需要单元测试",children:["为什么需要单元测试",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么需要单元测试",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"单元测试可以模仿开发者对于 API 的调用过程，并且可以通过边界情况来测试 API 是否存在异常情况，确保 API 的设计可得到预期的结果，从而提升代码质量。当我们对 API 进行重构或者优化时，可以通过单元测试的测试案例来确保代码的改动不会影响最终的运行结果，从而提升代码设计的稳定性。因此良好的单元测试："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"有助于测试 API 的边界情况，提升代码的质量"}),"\n",(0,t.jsx)(n.li,{children:"有助于重构和优化，提升 API 的可维护性和稳定性"}),"\n",(0,t.jsx)(n.li,{children:"有助于开发者快速熟悉 API 用法，单元测试就是最好的用法示例"}),"\n",(0,t.jsx)(n.li,{children:"有助于项目的版本发布（CI / CD），防止产生非兼容性更新"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"可能很多同学对于上述的测试作用不是很有体感，因为测试在一定程度上并不能立马体现作用，而是在不断的开发迭代中，有新的开发者接手项目或者原开发者忘记了代码本身的实现细节，写入了一些非兼容性的代码、会产生 Bug 的代码或者偏离了功能本身的代码时，测试代码可以很好的起到提醒作用。"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"温馨提示：需要注意在前端的开发中单元测试和 e2e 测试是两个非常重要的测试类型，单元测试会相对简单，不需要复杂的测试环境和工具。e2e 测试相对复杂，需要具备浏览器的运行环境，测试的成本相对较高。对于工具库或者框架库而言优先选择单元测试，测试的成本低收益高。本课程接下来会讲解基于 Jest 的单元测试。"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"jest-单元测试",children:["Jest 单元测试",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jest-单元测试",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["本项目的单元测试主要采用了\xa0",(0,t.jsx)(n.a,{href:"https://jestjs.io/en/",target:"_blank",rel:"noopener noreferrer",children:"Jest"}),"\xa0测试框架，它的特点如下："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["内置断言库可实现开箱即用（从\xa0",(0,t.jsx)(n.code,{children:"it"}),"\xa0到\xa0",(0,t.jsx)(n.code,{children:"expect"}),"， Jest 将整个工具包放在一个地方）"]}),"\n",(0,t.jsx)(n.li,{children:"可以并行运行测试，并且为了让加速测试进程，Jest 会优先运行之前失败的测试用例"}),"\n",(0,t.jsx)(n.li,{children:"内置覆盖率报告，无需额外进行配置"}),"\n",(0,t.jsx)(n.li,{children:"测试报错时，Jest 会提供丰富的上下文内容"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["我们先来看下本课程示例的最终效果，执行 ",(0,t.jsx)(n.code,{children:"npm run test"})," 进行单元测试："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 35.工程设计：单元测试\nnpm run test\n\n# 打印\n> micro-framework@1.0.6 test\n> jest\n\n PASS  test/core.ts\n PASS  test/core1.ts\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |                   \n core.ts  |     100 |      100 |     100 |     100 |                   \n core1.ts |     100 |      100 |     100 |     100 |                   \n----------|---------|----------|---------|---------|-------------------\n\nTest Suites: 2 passed, 2 total\nTests:       4 passed, 4 total\nSnapshots:   0 total\nTime:        1.153 s, estimated 2 s\nRan all test suites.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["通过执行测试命令后会打印测试用例和覆盖率报告情况，同时会在根目录的 ",(0,t.jsx)(n.code,{children:"coverage"})," 目录下自动生成测试覆盖率报告文件，在浏览器中打开 ",(0,t.jsx)(n.code,{children:"coverage/lcov-report/index.html"})," 文件，可以查看详细的测试情况，如下所示："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:j,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"通过点击文件链接还可以进入查看哪些代码被单元测试覆盖，如下所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:p,alt:"image.png"})}),"\n",(0,t.jsx)(n.p,{children:"增加单元测试后，项目的目录结构中会新增如下文件："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"micro-framework\n├── jest.config.js      # Jest 配置文件 \n├── coverage/           # 测试覆盖率报告                        \n└── test/               # 单元测试代码   \n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：示例源码可以从 ",(0,t.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/jest",target:"_blank",rel:"noopener noreferrer",children:"demo/jest"})," 分支获取。"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"jest-测试设计",children:["Jest 测试设计",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jest-测试设计",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"在了解如何进行 Jest 配置之前，我们先来了解简单的测试用例设计。假设现在我们的源码中设计了一个插入排序的函数，如下所示："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/sort/sort.ts\n// 插入排序（从大到小排序）\nexport function insertionSort(originalArray: number[]) {\n  const array = [...originalArray];\n  let currentElement, preIndex;\n\n  for (let i = 1; i < array.length; i++) {\n    preIndex = i - 1;\n    currentElement = array[i];\n\n    while (preIndex >= 0 && currentElement > array[preIndex]) {\n      array[preIndex + 1] = array[preIndex--];\n    }\n    array[preIndex + 1] = currentElement;\n  }\n  return array;\n}\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"温馨提示：这里先忽略算法本身，只需要知道它的作用是将数组进行排序。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"假设我们需要对上述函数进行单元测试，那么可以先设计测试用例，如下所示："}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"传入空数组，是否会返回空数组"}),"\n",(0,t.jsx)(n.li,{children:"传入正序数组，是否返回逆序数组"}),"\n",(0,t.jsx)(n.li,{children:"传入逆序数组，是否返回逆序数组"}),"\n",(0,t.jsx)(n.li,{children:"传入乱序的数组，是否返回逆序数组"}),"\n",(0,t.jsx)(n.li,{children:"传入相等元素的数组，是否会返回原样数组"}),"\n",(0,t.jsx)(n.li,{children:"不传入参数（边界测试），是否会报错"}),"\n",(0,t.jsx)(n.li,{children:"传入非数组（边界测试），是否会报错"}),"\n",(0,t.jsx)(n.li,{children:"传入非数字元素的数组（边界测试），是否会报错"}),"\n",(0,t.jsx)(n.li,{children:"传入含非数字元素的数组（边界测试），是否会报错"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"温馨提示：这里不会讨论 TDD、BDD、ATDD 和 UTDD 等开发流程，只是从大部分开发者的实际情况出发进行课程设计，例如大部分的开发者都是先设计源码然后再设计测试用例和测试代码，这和 TDD 的设计思想是有差异的。"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"如果设计的代码能够通过上述测试用例，那么基本上可以满足我们对于插入排序函数的设计要求了。在进行 Jest 设计之前，我们需要先了解一些测试术语，包括测试套件、测试用例和断言。"}),"\n",(0,t.jsxs)(n.p,{children:["测试套件使用 ",(0,t.jsx)(n.code,{children:"describe"})," 函数进行描述，用于将相关的测试用例组合在一起。例如："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'\n// 第一个参数是一个字符串，表示测试组合的名称或者标题\n// 第二个参数是一个函数，用来实现该测试套件\ndescribe("插入排序", function() {\n  // ...\n});\n\ndescribe("冒泡排序", function() {\n  // ...\n});\n\ndescribe("归并排序", function() {\n  // ...\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["测试用例是对框架的某一个功能点进行测试，是测试的最基本单位。测试用例可以包含在测试套件中使用，也可以单独使用。测试用例使用 ",(0,t.jsx)(n.code,{children:"it"})," 或者 ",(0,t.jsx)(n.code,{children:"test"})," 函数进行描述，它和 ",(0,t.jsx)(n.code,{children:"describe"})," 函数类似："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// 测试套件（可以包含多个测试用例）\ndescribe("插入排序", function() {\n  // 测试用例\n  // 第一个参数是一个字符串，表示测试用例的描述\n  // 第二个参数是一个函数，用来实现该测试用例\n  it("传入空数组，是否会返回空数组", function() {\n      // 实际测试代码\n  });\n  \n  it("传入正序数组，是否会返回逆序数组", function() {\n      // 实际测试代码\n  });\n  \n  it("传入逆序数组，是否会返回逆序数组", function() {\n      // 实际测试代码\n  });\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["在测视用例中需要使用断言函数 ",(0,t.jsx)(n.code,{children:"expect"})," 来对代码的行为是否符合预期进行判断，例如上述插入排序，需要对特定的输入参数进行输出判断，判断输出是否符合预期："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// 这里给出部分测试用例\n\n// 这里先忽略路径映射 @，在接下来的配置中进行讲解\nimport { insertionSort } from "@/sort/sort";\n\nconst sortedArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst reverseArray = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\nconst randomArray = [8, 5, 10, 1, 9, 7, 3, 2, 6, 4];\nconst equalArray = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n\n// 测试套件（可以包含多个测试用例）\ndescribe("插入排序", function () {\n  // 测试用例（可以包含多个断言）\n  it("传入空数组，是否会返回空数组", function () {\n    // expect 断言函数\n    // 通过 expect 函数来检查函数值是否符合条件，expect 提供了不同的匹配器去验证不同类型的结果\n    // 匹配器包含：toBeFalsy、toBeNull、toBeTruthy、toBeUndefined、toBeNaN 等等\n    // 更多匹配器可以查看：https://jestjs.io/docs/expect\n    // 这里通过 toStrictEqual 匹配数组元素是否相等\n    // 注意 toStrictEqual 可以防止匹配稀疏数组的情况，例如 [, 1] 和 [undefined, 1] 不相等\n    expect(insertionSort([])).toStrictEqual([]);\n  });\n\n  it("传入正序数组，返回逆序数组", function () {\n    expect(insertionSort(sortedArray)).toStrictEqual(reverseArray);\n  });\n\n  it("传入逆序数组，返回逆序数组", function () {\n    expect(insertionSort(reverseArray)).toStrictEqual(reverseArray);\n  });\n\n  it("传入乱序数组，返回逆序数组", function () {\n    expect(insertionSort(randomArray)).toStrictEqual(reverseArray);\n  });\n\n  it("传入相等元素数组，返回原样数组", function () {\n    expect(insertionSort(equalArray)).toStrictEqual(equalArray);\n  });\n});\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"jest-测试配置",children:["Jest 测试配置",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jest-测试配置",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["由于本课程的框架库采用 TypeScript 进行开发，因此需要 Jest 支持 TypeScript。Jest 可以配合 Babel（具体可查看\xa0",(0,t.jsx)(n.a,{href:"https://jestjs.io/docs/en/getting-started#using-typescript",target:"_blank",rel:"noopener noreferrer",children:"Jest - Using TypeScript"}),"）支持 TypeScript 开发，但是采用 Babel 会产生一些限制（具体可查看\xa0",(0,t.jsx)(n.a,{href:"https://kulshekhar.github.io/ts-jest/docs/babel7-or-ts/",target:"_blank",rel:"noopener noreferrer",children:"Babel 7 or TypeScript"}),"）。由于本项目没有采用 Babel 进行转译，并且希望能够完美支持类型检查，因此采用\xa0",(0,t.jsx)(n.a,{href:"https://kulshekhar.github.io/ts-jest/",target:"_blank",rel:"noopener noreferrer",children:"ts-jest"}),"\xa0进行单元测试。按照官方教程进行依赖安装和项目初始化："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 本课程中使用的 Jest 版本为 29.6.4、ts-jest 版本为 29.1.1\nnpm install --save-dev jest typescript ts-jest @types/jest\n# 执行 CLI 命令创建配置文件（也可以手动创建）\nnpx ts-jest config:init\n"})}),"\n",(0,t.jsxs)(n.p,{children:["执行 Jest 初始化命令后会在项目根目录自动创建 ",(0,t.jsx)(n.code,{children:"jest.config.js"})," 文件："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'/** @type {import(\'ts-jest\').JestConfigWithTsJest} */\n// 更多关于 Jest 配置查看：https://jestjs.io/zh-Hans/docs/configuration\nmodule.exports = {\n  // 初始化时自动生成，支持 typescript 开发环境\n  // https://jestjs.io/zh-Hans/docs/configuration#preset-string\n  preset: "ts-jest",\n  // 初始化时自动生成，测试的运行环境，可以是 node 或者 jsdom\n  // https://jestjs.io/zh-Hans/docs/configuration#testenvironment-string\n  testEnvironment: "node"\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"除了上述默认的测试配置，还需要根据项目情况额外做一些配置，接下来将一一讲解课程中使用的配置信息。"}),"\n",(0,t.jsxs)(n.h3,{id:"testregex",children:["testRegex",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#testregex",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["测试文件有两种放置风格，一种是新建 ",(0,t.jsx)(n.code,{children:"test"})," 文件夹，然后将所有的测试代码集中在 ",(0,t.jsx)(n.code,{children:"test"})," 目录下进行管理，另外一种是在各个源码文件的同级目录下新建 ",(0,t.jsx)(n.code,{children:"__test__"})," 目录，进行就近测试。如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 方式一\nproject\n├── src/                   # src 目录                    \n└── test/                  # 测试目录\n\n# 方式二\nproject                 \n└── src/                   # src 目录\n     ├── core/      \n     │   ├── core.ts 			\n     │   └── __test__/	# 测试目录       \n     └── sandbox/\n         ├── sandbox.ts		\n         └── __test__/	# 测试目录    \n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"温馨提示：大家可以随便找一些 github 上的开源项目进行仔细观察。这里可以额外思考一下两种放置目录的优缺点？例如从构建工具的角度出发，如果不希望将单元测试文件进行构建处理，那么哪种方式更合理？"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["在 Jest 中通过配置 ",(0,t.jsx)(n.code,{children:"testMatch"})," 或 ",(0,t.jsx)(n.code,{children:"testRegex"})," 可以使得项目识别特定格式文件作为测试文件运行，默认采用方式二进行 ",(0,t.jsx)(n.code,{children:"__test__"})," 目录识别单元测试文件，为了采用方式一隔离单元测试目录，需要做如下配置："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// 默认：/__tests__/.*|(\\\\.|/)(test|spec))\\\\.[jt]sx?$\n// 这里改为识别 test 目录，并且放置在和 src 同级目录下\ntestRegex: ["/test/"],\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"modulenamemapper",children:["moduleNameMapper",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modulenamemapper",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在 typescript 的 ",(0,t.jsx)(n.code,{children:"tsconfig.json"})," 中可以通过配置 ",(0,t.jsx)(n.code,{children:"compilerOptions.paths"})," 字段进行路径映射，如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// tsconfig.json\n{\n  "compilerOptions": {\n    // 指定基准路径，这里指定为项目的根目录路径\n    "baseUrl": ".",\n    "paths": {\n      // 使用 @ 指向 src 所在的文件目录\n      "@/*": ["src/*"]\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：typescript 中的 ",(0,t.jsx)(n.code,{children:"compilerOptions.paths"})," 和",(0,t.jsx)(n.strong,{children:"方案了解：NPM 方案"}),"中我们了解的 import-maps 作用相似，都是配置路径映射。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"配置了以后可以在任何层级目录的文件下进行路径映射，如下所示："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"\n// 假设当前代码的路径为 src/sandbox/sanbox.ts，需要引入 src/core/core.ts\n// 如果不使用路径映射，则需要使用相对路径，需要知道当前文件所在的层级目录\nimport core from '../../core/core.ts';\n\n// 如果使用路径映射，则不需要关心当前文件所在的文件目录，使用 @ 代替 src 所在的目录文件\n// 使用 @/core/core.ts 指向 src/core/core.ts\nimport core from '@/core/core.ts';\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：假设这里要移动 ",(0,t.jsx)(n.code,{children:"src/sandbox/sanbox.ts"})," 到 ",(0,t.jsx)(n.code,{children:"src/sanbox.ts"})," 下，那么使用了路径映射后代码不需要任何更改。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["为了可以在单元测试中进行路径映射，需要配合 ",(0,t.jsx)(n.code,{children:"tsconfig.json"})," 的路径映射对 Jest 进行额外配置，具体如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// jest.config.js\n\nmodule.exports = {\n  // 路径映射配置\n  // https://kulshekhar.github.io/ts-jest/docs/getting-started/paths-mapping\n  // 需要配合 TypeScript 路径映射，和 tsconfig.json 中的 compilerOptions.paths 需要一一映射\n  // https://www.tslang.cn/docs/handbook/module-resolution.html\n  moduleNameMapper: {\n    // @/xxx 会指向 src/xxx\n    "^@/(.*)$": "<rootDir>/src/$1",\n  },\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["假设在 ",(0,t.jsx)(n.code,{children:"src/core/core.ts"})," 中设计了如下源码："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/core/core.ts\nexport function core(str: string) {\n  return `Hello ${str}`;\n}\n\nexport function hello(str: string) {\n  return `Hello ${str}`;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["配置了 ",(0,t.jsx)(n.code,{children:"testRegex"})," 和 ",(0,t.jsx)(n.code,{children:"moduleNameMapper"})," 之后， 我们可以在 ",(0,t.jsx)(n.code,{children:"test"})," 目录下设计测试代码，如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// test/core.ts\n// 使用 @/core/core 指向 src/core/core.ts\nimport { core, hello } from "@/core/core";\n\ndescribe("src/core/core.ts", () => {\n   it("core 入参测试", () => {\n     expect(core("Jest")).toBe("Hello Jest");\n   });\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["设计完成后可以在 ",(0,t.jsx)(n.code,{children:"package.json"})," 中新增测试命令，如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'  "scripts": {\n    // 测试命令\n    "test": "jest"\n  },\n'})}),"\n",(0,t.jsxs)(n.p,{children:["之后可以通过执行 ",(0,t.jsx)(n.code,{children:"npm run test"})," 命令进行测试："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 执行\nnpm run test\n\n# 打印\n> micro-framework@1.0.6 test\n> jest\n\n PASS  test/core.ts\n  src/core/core.ts\n    ✓ core 入参测试 (1 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.973 s, estimated 1 s\nRan all test suites.\n"})}),"\n",(0,t.jsx)(n.p,{children:"假设我们更改测试用例："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// test/core.ts\n// 使用 @/core/core 指向 src/core/core.ts\nimport { core, hello } from "@/core/core";\n\ndescribe("src/core/core.ts", () => {\n   it("core 入参测试", () => {\n     expect(core("Jest")).toBe("Hello Jest1");\n   });\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"此时重新执行测试命令，可以发现测试用例失败："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# 执行\nnpm run test\n\n# 打印\n> micro-framework@1.0.6 test\n> jest\n\n FAIL  test/core.ts\n  src/core/core.ts\n    ✕ core 入参测试 (2 ms)\n\n  ● src/core/core.ts › core 入参测试\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: "Hello Jest1"\n    Received: "Hello Jest"\n\n      3 | describe("src/core/core.ts", () => {\n      4 |   it("core 入参测试", () => {\n    > 5 |     expect(core("Jest")).toBe("Hello Jest1");\n        |                          ^\n      6 |   });\n      7 | });\n      8 |\n\n      at Object.<anonymous> (test/core.ts:5:26)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 total\nSnapshots:   0 total\nTime:        0.929 s, estimated 2 s\nRan all test suites.\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"测试覆盖率",children:["测试覆盖率",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#测试覆盖率",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在上述测试示例中我们发现 ",(0,t.jsx)(n.code,{children:"src/core/core.ts"})," 中只有一个函数设计了单元测试，如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/core/core.ts\n// 进行了单元测试\nexport function core(str: string) {\n  return `Hello ${str}`;\n}\n\n// 没有进行单元测试\nexport function hello(str: string) {\n  return `Hello ${str}`;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["如果我们要求测试的代码尽可能覆盖所有源码，那么需要额外进行测试覆盖率百分比的配置，例如在这里要求 90% 以上的源码需要被测试代码覆盖，那么可以通过 ",(0,t.jsx)(n.code,{children:"coverageThreshold"})," 进行配置："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'module.exports = {\n  // 在当前根目录下生成 coverage 代码的测试覆盖率报告，该报告还可以上传 coveralls 进行 Github 项目的 Badges 显示\n  // https://jestjs.io/zh-Hans/docs/configuration#collectcoverage-boolean\n  collectCoverage: true,\n   // 输出覆盖信息文件的目录\n  // https://jestjs.io/zh-Hans/docs/configuration#coveragedirectory-string\n  coverageDirectory: "./coverage/",\n  // 如果测试覆盖率未达到 90%（可以根据实际业务情况进行数值调整），则测试失败\n  // 这里可用于 CI / CD 检测\n  // https://jestjs.io/zh-Hans/docs/configuration#coveragethreshold-object\n  coverageThreshold: {\n    global: {\n      // 条件分支覆盖率，是否条件代码块都执行了\n      branches: 90,\n      // 函数覆盖率，是否每一个函数都被调用了\n      functions: 90,\n      // 行覆盖率，是不是每一行都被执行了\n      lines: 90,\n      // 语句覆盖率，是不是每个语句都被执行了\n      statements: 90,\n    },\n  },\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"配置了上述测试覆盖率百分比以后，我们可以重新执行之前的测试案例："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# 执行\nnpm run test\n\n# 打印\n> micro-framework@1.0.6 test\n> jest\n\n PASS  test/core.ts\n  src/core/core.ts\n    ✓ core 入参测试 (1 ms)\n\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------|---------|----------|---------|---------|-------------------\nAll files |      75 |      100 |      50 |      75 |                   \n core.ts  |      75 |      100 |      50 |      75 | 6                 \n----------|---------|----------|---------|---------|-------------------\nJest: "global" coverage threshold for statements (90%) not met: 75%\nJest: "global" coverage threshold for lines (90%) not met: 75%\nJest: "global" coverage threshold for functions (90%) not met: 50%\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.975 s, estimated 1 s\nRan all test suites.\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：只配置 ",(0,t.jsx)(n.code,{children:"coverageThreshold"})," 并不会产生上述测试覆盖率信息，需要配合 ",(0,t.jsx)(n.code,{children:"collectCoverage"})," 配置。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"可以发现测试失败，因此函数测试的覆盖率只有 50%，而我们的覆盖率百分比阈值是 90%，此时我们需要补全测试案例："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// test/core.ts\nimport { core, hello } from "@/core/core";\n\nimport { core, hello } from "@/core/core";\n\ndescribe("src/core/core.ts", () => {\n  it("core 入参测试", () => {\n    expect(core("Jest")).toBe("Hello Jest");\n  });\n\n  it("hello 入参测试", () => {\n    expect(hello("Jest")).toBe("Hello Jest");\n  });\n});\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"再次执行测试，此时可以达到测试覆盖率要求："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 执行\nnpm run test\n\n# 打印\n> micro-framework@1.0.6 test\n> jest\n\n PASS  test/core.ts\n  src/core/core.ts\n    ✓ core 入参测试 (1 ms)\n    ✓ hello 入参测试\n\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |                   \n core.ts  |     100 |      100 |     100 |     100 |                   \n----------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        0.942 s, estimated 2 s\nRan all test suites.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["同时会在 ",(0,t.jsx)(n.code,{children:"coverage"})," 目录下自动生成测试覆盖率报告，可以在浏览器中打开 ",(0,t.jsx)(n.code,{children:"coverage/lcov-report/index.html"})," 进行查看："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:h,alt:"image.png"})}),"\n",(0,t.jsxs)(n.p,{children:["点击了上述红框中的文件 ",(0,t.jsx)(n.code,{children:"core.ts"})," 之后可以查看代码的详细测试覆盖情况："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:d,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h2,{id:"eslint-支持",children:["ESLint 支持",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#eslint-支持",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["项目 ",(0,t.jsx)(n.code,{children:"src"})," 目录下的源码可以通过安装配置 ",(0,t.jsx)(n.code,{children:"@typescript-eslint/eslint-plugin"})," 插件使用 TypeScript 推荐的规则进行 ESLint 校验，同理 ",(0,t.jsx)(n.code,{children:"test"})," 目录下的测试代码可以通过安装配置 ",(0,t.jsx)(n.a,{href:"https://github.com/jest-community/eslint-plugin-jest",target:"_blank",rel:"noopener noreferrer",children:"eslint-plugin-jest"})," 插件使用 Jest 推荐的规则进行 ESLint 校验："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'module.exports = {\n  extends: [\n    "eslint:recommended",\n    "plugin:@typescript-eslint/recommended",\n    "plugin:@typescript-eslint/recommended-requiring-type-checking",\n    \'prettier\',\n    // 新增 Jest 推荐的 ESLint 校验规则\n    // 所有规则集查看：https://github.com/jest-community/eslint-plugin-jest#rules（recommended 标识表明是推荐规则）\n    "plugin:jest/recommended",\n    "plugin:jest/style",\n  ],\n  parser: "@typescript-eslint/parser",\n  parserOptions: {\n    tsconfigRootDir: __dirname,\n    project: ["./tsconfig.json"],\n  },\n  plugins: ["@typescript-eslint"],\n  root: true\n};\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：",(0,t.jsx)(n.code,{children:"ts-jest"})," 项目本身就是采用了该插件进行 ESLint 校验，具体可查看配置文件 ",(0,t.jsx)(n.a,{href:"https://github.com/kulshekhar/ts-jest/blob/main/.eslintrc.js",target:"_blank",rel:"noopener noreferrer",children:"ts-jest/.eslintrc.js"})," 中的 ",(0,t.jsx)(n.code,{children:"extends"})," 配置信息。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["配置完成后在 ",(0,t.jsx)(n.code,{children:"package.json"})," 中新增 ESLint 的校验范围："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'  "scripts": {\n    // 新增 test 校验目录\n    "lint": "eslint --ext .ts src test",\n  },\n'})}),"\n",(0,t.jsxs)(n.p,{children:["为了验证推荐规则是否生效，这里以\xa0",(0,t.jsx)(n.a,{href:"https://github.com/jest-community/eslint-plugin-jest/blob/master/docs/rules/no-identical-title.md",target:"_blank",rel:"noopener noreferrer",children:"no-identical-title"}),"\xa0规则为例进行验证："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { core, hello } from "@/core/core";\n\ndescribe("src/core/core.ts", () => {\n  it("core 入参测试", () => {\n    expect(core("Jest")).toBe("Hello Jest");\n  });\n\n  it("hello 入参测试", () => {\n    expect(hello("Jest")).toBe("Hello Jest");\n  });\n  // 新增重复的测试案例名称\n  it("core 入参测试", () => {\n    expect(hello("Jest")).toBe("Hello Jest");\n  });\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["此时执行 ",(0,t.jsx)(n.code,{children:"npm run test"})," 进行 ESLint 校验时会产生校验错误："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 执行\nnpm run lint\n\n# 打印\n> micro-framework@1.0.6 lint\n> eslint --ext .ts src test\n\n\n/Users/zhuxiankang/Desktop/Github/micro-framework/test/core.ts\n  12:6  error  Test title is used multiple times in the same describe block  jest/no-identical-title\n\n✖ 1 problem (1 error, 0 warnings)\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["在课程",(0,t.jsx)(n.strong,{children:"工程设计：提交规范"}),"中，我们讲解了使用 ",(0,t.jsx)(n.code,{children:"lint-staged"})," 可以防止含有 ESLint 错误的代码进行远程提交，这里同样可以配置 ",(0,t.jsx)(n.code,{children:"lint-staged"})," 支持："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// .lintstagedrc.js\nmodule.exports = {\n  "src/**/*.ts": "eslint",\n  // 新增 test 目录校验\n  "test/**/*.ts": "eslint",\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"此时我们尝试提交代码，会发现提交失败："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# 执行\nnpm run cz \n\n# 打印\n> micro-framework@1.0.6 cz\n> git cz\n\ncz-cli@4.3.0, cz-customizable@7.0.0\n\nAll lines except first will be wrapped after 100 characters.\n? 选择一种提交类型: 特性:    一个新的特性\n? 选择一个 scope (可选): 工程设计\n? 短说明:\n 新增 Jest 的 ESLint 配置\n? 长说明，使用"|"换行：\n Jest\n? 关联关闭的 issue，例如：#31, #34(可选):\n \n\n###--------------------------------------------------------###\n特性(工程设计): 新增 Jest 的 ESLint 配置\n\nJest\n###--------------------------------------------------------###\n\n? 确定提交说明? Yes\n✔ Preparing lint-staged...\n❯ Running tasks for staged files...\n  ❯ .lintstagedrc.js — 5 files\n    ↓ src/**/*.ts — no files [SKIPPED]\n    ❯ test/**/*.ts — 1 file\n      ✖ eslint [FAILED]\n↓ Skipped because of errors from tasks. [SKIPPED]\n✔ Reverting to original state because of errors...\n✔ Cleaning up temporary files...\n\n✖ eslint:\n\n/Users/zhuxiankang/Desktop/Github/micro-framework/test/core.ts\n  12:6  error  Test title is used multiple times in the same describe block  jest/no-identical-title\n\n✖ 1 problem (1 error, 0 warnings)\n\nhusky - pre-commit hook exited with code 1 (error)\ngit exited with error code 1\n'})}),"\n",(0,t.jsxs)(n.p,{children:["当然在之前的课程",(0,t.jsx)(n.strong,{children:"工程设计：代码检查"}),"中我们还讲解了通过安装 VS Code 的 ESLint 插件可以实时查看当前文件的 ESLint 校验情况，具体如下所示："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:a,alt:"image.png"})}),"\n",(0,t.jsxs)(n.h2,{id:"实时测试",children:["实时测试",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实时测试",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["在",(0,t.jsx)(n.strong,{children:"工程设计：代码检查"}),"中我们可以通过 VS Code 的 ESLint 插件实时对源代码进行 ESLint 校验，从而不需要在修改代码之后手动执行 ",(0,t.jsx)(n.code,{children:"npm run lint"})," 进行校验处理。在单元测试中，我们也可以通过 ",(0,t.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest",target:"_blank",rel:"noopener noreferrer",children:"Jest"})," 插件实现类似的功能，从而不需要每次设计完单元测试的代码后手动执行 ",(0,t.jsx)(n.code,{children:"npm run test"})," 命令。安装 Jest 插件后，修改 ",(0,t.jsx)(n.code,{children:".vscode/settings.json"})," 中的配置信息："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  // Jest 保存自动测试\n  "jest.autoRun": "on-save"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"此时修改单元测试的代码并保存会自动执行测试案例，如下所示："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:o,alt:"Jest 测试.gif"})}),"\n",(0,t.jsx)(n.p,{children:"除此之外，为了可以实时查看源文件的测试覆盖率，可以对 Jest 插件进行如下配置："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// .vscode/settings.json\n{\n  // 插件启动后显示源文件的测试覆盖率百分比\n  "jest.showCoverageOnLoad": true,\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"设置后重新启动 VS Code 并运行测试用例，之后便可以在相应的源文件上查看测试覆盖率情况。如下所示，源文件中的红色背景代码代表没有进行单元测试，并且可以在文件的顶部查看代码的覆盖率百分比信息："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:l,alt:"Jest显示.gif"})}),"\n",(0,t.jsxs)(n.h2,{id:"确保通过测试",children:["确保通过测试",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#确保通过测试",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"尽管具备了实时测试的功能，但是并不能阻止开发者提交含有失败测试用例的代码，也不能阻止开发者对该代码进行构建和发布处理（开发者可能没有安装 Jest 插件无法实时感知单元测试情况）。例如 A 开发者设计了一个功能并设计了相应的单元测试，在之后的迭代中 B 开发者对该代码进行了 Bug 修复或者维护，但是 B 没有完全掌握该功能实现的所有细节，导致修改代码后单元测试失败。如果此时没有任何提示，那么 B 在不知情的情况下可以将代码进行提交或者发布处理。为了防止此类情况的发生，我们可以在提交或者发布时进行一些钩子配置，从而让开发者感知单元测试的执行情况。"}),"\n",(0,t.jsxs)(n.p,{children:["在课程",(0,t.jsx)(n.strong,{children:"工程设计：提交规范"}),"中我们了解了 lint-staged 和 husky 的作用，在这里我们也可以使用它们对单元测试进行配置，从而可以在提交代码时自动执行单元测试。我们希望在提交代码时只检测改动部分的单元测试，并且一旦有测试用例失败便立即停止代码提交或者版本发布，这样有利于开发效率，为此需要配置 Jest 的 CLI 参数："]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"bail"}),": 一旦有测试用例失败则立马停止测试，默认 1 个测试用例失败就停止测试"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"findRelatedTests"}),": 只对指定的源代码进行单元测试，可以配合 lint-staged 使用"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"jest --findRelatedTests src/hello.ts"})," 的功能类似于 ",(0,t.jsx)(n.code,{children:"eslint src/hello.ts"}),"，该参数用于匹配源代码对应的单元测试，具体如下所示："]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:i,alt:"Jest测试部分.gif"})}),"\n",(0,t.jsxs)(n.p,{children:["从上述演示可以发现通过配置 ",(0,t.jsx)(n.code,{children:"findRelatedTests"})," 参数可以指定需要单元测试的文件目录，我们知道 ",(0,t.jsx)(n.code,{children:"lint-staged"})," 会计算暂存区的文件目录并将其添加到需要执行的 CLI 命令后，因此我们可以在 ",(0,t.jsx)(n.code,{children:".lintstagedrc.js"})," 中做如下配置："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'module.exports = {\n  "src/**/*.ts": "eslint",\n  "test/**/*.ts": "eslint",\n  // 新增暂存区代码的单元测试\n  "src/**/*.ts": "jest --bail --findRelatedTests",\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"此时可以设计一个错误的测试用例（注意需要更改源码，因为测试的是暂存区的代码）并尝试提交代码："}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)("img",{src:c,alt:"Jest检测.gif"})}),"\n",(0,t.jsx)(n.p,{children:"从上述演示可以发现，由于修改的源码对应的单元测试失败，导致代码提交失败，从而可以有效防止不符合单元测试的代码被提交到远程仓库。"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：示例源码可以从 ",(0,t.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/jest-eslint",target:"_blank",rel:"noopener noreferrer",children:"demo/jest-eslint"})," 分支获取。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["除此之外，为了防止发布失败的单元测试，可以使用 ",(0,t.jsx)(n.code,{children:"prepublishOnly"})," 钩子，该钩子会在执行 ",(0,t.jsx)(n.code,{children:"npm publish"})," 之前触发，具体如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// package.json\n"scripts": {\n    "prepare": "husky install",\n    "build": "npm run lint && ts-node build/build.ts",\n    "release": "npm run build && ts-node build/release.ts",\n    "lint": "eslint --ext .ts src test",\n    "prettier": "prettier src",\n    "test": "jest --bail",\n    "cz": "git cz",\n    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0",\n    // 执行 npm publish 时会先执行 prepublishOnly，如果测试失败则不会继续执行 npm publish\n    "prepublishOnly": "npm run test"\n},\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：示例源码可以从 ",(0,t.jsx)(n.a,{href:"https://github.com/ziyi2/micro-framework/tree/demo/jest-publish",target:"_blank",rel:"noopener noreferrer",children:"demo/jest-publish"})," 分支获取。"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["此时假设我们需要进行发布处理，执行 ",(0,t.jsx)(n.code,{children:"npm publish"})," 命令："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# 执行\nnpm publish    \n\n# 打印\n> micro-framework@1.0.6 prepublishOnly\n> npm run test\n\n\n> micro-framework@1.0.6 test\n> jest --bail\n\n FAIL  test/core.ts\n  src/core/core.ts\n    ✕ core 入参测试 (2 ms)\n    ✓ hello 入参测试\n\n  ● src/core/core.ts › core 入参测试\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: "Hello Jest"\n    Received: "Hello1 Jest"\n\n      3 | describe("src/core/core.ts", () => {\n      4 |   it("core 入参测试", () => {\n    > 5 |     expect(core("Jest")).toBe("Hello Jest");\n        |                          ^\n      6 |   });\n      7 |\n      8 |   it("hello 入参测试", () => {\n\n      at Object.<anonymous> (test/core.ts:5:26)\n\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |                   \n core.ts  |     100 |      100 |     100 |     100 |                   \n----------|---------|----------|---------|---------|-------------------\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        0.966 s, estimated 1 s\nRan all test suites.\nnpm ERR! code 1\nnpm ERR! path /Users/zhuxiankang/Desktop/Github/micro-framework\nnpm ERR! command failed\nnpm ERR! command sh -c -- npm run test\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/zhuxiankang/.npm/_logs/2023-09-14T01_31_48_524Z-debug-0.log\n'})}),"\n",(0,t.jsxs)(n.p,{children:["此时会因为单元测试失败而退出发布处理。需要注意，由于我们在工程中设计了 ",(0,t.jsx)(n.code,{children:"build/release.ts"})," 发布脚本，因此还需要确认在发布脚本中能否触发 ",(0,t.jsx)(n.code,{children:"prepublishOnly"})," 钩子，执行 ",(0,t.jsx)(n.code,{children:"npm run release"})," 后发现内部的代码 ",(0,t.jsx)(n.code,{children:'shell.exec("npm publish")'})," 并不会触发 ",(0,t.jsx)(n.code,{children:"prepublishOnly"})," 钩子，因此这里可以在发布之前的 ",(0,t.jsx)(n.code,{children:"check"})," 函数中新增单元测试检测逻辑，如下所示："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// build/release.ts\nclass Release extends Base {\n  constructor() {\n    super();\n  }\n  \n  async run() {\n    this.prepare();\n    // 发布预检\n    await this.check();\n    this.release();\n  }\n  \n  async check() {\n    const targets = this.getTargets();\n    if (!targets?.length) return;\n    // 新增单元测试检查\n    this.checkUnitTest();\n    await this.checkBranch();\n    this.checkPublishFiles(targets);\n    await this.checkLocalVersion(targets);\n  }\n  \n   checkUnitTest() {\n    // 执行单元测试，如果测试失败则退出发布脚本\n    const result = shell.exec("npm run test");\n    if (result.code !== 0) {\n      this.logError(`[发布失败]: 单元测试失败！`);\n      process.exit(1);\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["此时我们执行 ",(0,t.jsx)(n.code,{children:"npm run release"})," 命令会执行单元测试检查："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# 执行\nnpm run release\n\n# 打印\n> micro-framework@1.0.6 release\n> npm run build && ts-node build/release.ts\n\n\n> micro-framework@1.0.6 build\n> npm run lint && ts-node build/build.ts\n\n\n> micro-framework@1.0.6 lint\n> eslint --ext .ts src test\n\n[09:48:58] Requiring external module ts-node/register\n[09:48:58] Working directory changed to ~/Desktop/Github/micro-framework/build\n[09:48:59] Using gulpfile ~/Desktop/Github/micro-framework/build/gulpfile.ts\n[09:48:59] Starting \'default\'...\n[09:48:59] Starting \'build commonjs\'...\n[09:48:59] Starting \'build esmodule\'...\n[09:48:59] Finished \'build commonjs\' after 45 ms\n[09:48:59] Finished \'build esmodule\' after 45 ms\n[09:48:59] Finished \'default\' after 46 ms\n[编译信息] 在文件 /Users/zhuxiankang/Desktop/Github/micro-framework/lib/commonjs/index.js 中匹配和替换的 require 路径: @/core/core => ./core\n\n> micro-framework@1.0.6 test\n> jest --bail\n\nFAIL test/core.ts\n  src/core/core.ts\n    ✕ core 入参测试 (2 ms)\n    ✓ hello 入参测试 (1 ms)\n\n  ● src/core/core.ts › core 入参测试\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: "Hello Jest"\n    Received: "Hello1 Jest"\n\n      3 | describe("src/core/core.ts", () => {\n      4 |   it("core 入参测试", () => {\n    > 5 |     expect(core("Jest")).toBe("Hello Jest");\n        |                          ^\n      6 |   });\n      7 |\n      8 |   it("hello 入参测试", () => {\n\n      at Object.<anonymous> (test/core.ts:5:26)\n\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |                   \n core.ts  |     100 |      100 |     100 |     100 |                   \n----------|---------|----------|---------|---------|-------------------\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        0.922 s, estimated 1 s\nRan all test suites.\n[发布失败]: 单元测试失败！\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["温馨提示：是否有方式可以在脚本中使用类似的 ",(0,t.jsx)(n.code,{children:"shell.exec"})," 执行 ",(0,t.jsx)(n.code,{children:"npm publish"})," 时自动触发 ",(0,t.jsx)(n.code,{children:"prepublishOnly"})," 钩子。使用 ",(0,t.jsx)(n.code,{children:"shell.exec"})," 执行单元测试时会丢失命令行打印信息的颜色，是否有方式可以恢复打印信息的颜色？"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"测试覆盖率报告",children:["测试覆盖率报告",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#测试覆盖率报告",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本课程不会讲解如何自动上传报告，在之后的 CI / CD 课程中详细讲解上传测试报告。"}),"\n",(0,t.jsxs)(n.h2,{id:"小结",children:["小结",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小结",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"本课程主要讲解了如何利用 Jest 进行单元测试，包括开发前的测试配置准备、开发中的实时查看测试情况以及开发后的测试钩子配置，从而确保单元测试可以覆盖整个开发链路，最终可以提升框架库的版本发布稳定性。在下一节课程中，我们会讲解如何利用工具快速生成开发指南文档。"})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}let g=u;u.__RSPRESS_PAGE_META={},u.__RSPRESS_PAGE_META["%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BE%AE%E5%89%8D%E7%AB%AF%2F35.%E5%B7%A5%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md"]={toc:[{text:"为什么需要单元测试",id:"为什么需要单元测试",depth:2},{text:"Jest 单元测试",id:"jest-单元测试",depth:2},{text:"Jest 测试设计",id:"jest-测试设计",depth:2},{text:"Jest 测试配置",id:"jest-测试配置",depth:2},{text:"testRegex",id:"testregex",depth:3},{text:"moduleNameMapper",id:"modulenamemapper",depth:3},{text:"测试覆盖率",id:"测试覆盖率",depth:3},{text:"ESLint 支持",id:"eslint-支持",depth:2},{text:"实时测试",id:"实时测试",depth:2},{text:"确保通过测试",id:"确保通过测试",depth:2},{text:"测试覆盖率报告",id:"测试覆盖率报告",depth:2},{text:"小结",id:"小结",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);