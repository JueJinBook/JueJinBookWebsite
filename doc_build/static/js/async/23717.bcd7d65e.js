"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["23717"],{762769:function(n,a,e){e.r(a),e.d(a,{default:()=>r});var i=e(552676),s=e(740453);function t(n){let a=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",h4:"h4",code:"code",pre:"pre",blockquote:"blockquote"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a.h1,{id:"66动画事件",children:["66.动画事件",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#66动画事件",children:"#"})]}),"\n",(0,i.jsxs)(a.h2,{id:"105-动画事件",children:["10.5 动画事件",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#105-动画事件",children:"#"})]}),"\n",(0,i.jsx)(a.p,{children:"前面我们已经接触过如何使用wxss给组件添加一定的动画效果，这一节我们会来介绍使用事件来触发css动画，以及调用小程序的关键帧动画给组件创建旋转、缩放、移动、倾斜的动画效果。合适的动态交互能给用户带来更好的操作视觉体验，而炫酷的动画特效也能有助于品牌与运营同时这些也是做小游戏的基础。"}),"\n",(0,i.jsxs)(a.h3,{id:"1051-css动画与事件结合",children:["10.5.1 CSS动画与事件结合",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#1051-css动画与事件结合",children:"#"})]}),"\n",(0,i.jsx)(a.p,{children:"只用CSS来实现的动画，不受页面加载、用户点击等交互事件（悬停除外）的控制以及没有时间轴的概念，动画呈现的效果会比较单一。我们可以通过事件（加载事件的生命周期函数或点击事件的事件处理函数等）来改变view的属性值class，而class的改变最终会动态修改组件的样式；不仅如此，我们还可以监听动画的状态。"}),"\n",(0,i.jsxs)(a.h4,{id:"1使用事件来修改class属性",children:["1、使用事件来修改class属性",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#1使用事件来修改class属性",children:"#"})]}),"\n",(0,i.jsxs)(a.p,{children:["在前面我们介绍过",(0,i.jsx)(a.code,{children:"<view>"}),"组件的hover-class，当用户长按（悬停）组件时，就可以触发动画，动画的样式可以是渐变（Gradient）、滤镜（Filter）、变形（Transform）、过渡（Transition）等。使用开发者工具新建一个页面，比如animate，然后再输入以下代码："]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:'//wxml里面的代码\n<view class="transition-display">\n	<view class="box bg-color" hover-class="bg-color-hover"></view>\n</view>\n\n//css的样式\n.box{width: 150px;height: 150px}\n.bg-color{\n	background-color:green;\n}\n.bg-color-hover{\n	background-color: yellow;\n	transition: background-color 5s ease-out 3s;\n}\n'})}),"\n",(0,i.jsxs)(a.p,{children:["我们可以在css样式不变的情况下，通过事件将",(0,i.jsx)(a.code,{children:"bg-color-hover"}),"动态渲染到class里，比如使用生命周期函数onShow或onReady使用",(0,i.jsx)(a.code,{children:"this.setData()"}),"，这样动画会在页面加载的时候触发而不再支持长按（悬停）："]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:'//wxml里面的代码\n<view class="transition-display">\n	<view class="box bg-color {{animation}}"></view>\n</view>\n\n//js代码，将class的值分离成数据，用JavaScript事件来控制\nPage({\n  data: {\n    animation:""\n  },\n  onReady(){\n    this.setData({\n      animation:"bg-color-hover"\n    })\n  }\n})\n'})}),"\n",(0,i.jsxs)(a.h4,{id:"2监听css的animation动画的状态",children:["2、监听css的animation动画的状态",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#2监听css的animation动画的状态",children:"#"})]}),"\n",(0,i.jsxs)(a.p,{children:["在前面我们还介绍过使用css的animation属性通过引入关键帧",(0,i.jsx)(a.code,{children:"@keyframes"}),"以及样式规则（延迟、次数、时长等）让动画更丰富。"]}),"\n",(0,i.jsx)(a.p,{children:"在小程序里使用animation属性，还可以使用bindtransitionend（监听动画过渡是否结束）、bindanimationstart（监听动画是否开始）、bindanimationiteration（监听动画是否结束一个阶段）、 bindanimationend（监听动画是否结束）来监听animation动画执行的状态。"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:'//wxml里的代码，前面使用了生命周期函数触发动画，这里我们通过点击事件来触发动画\n<view class="transition-display">\n  <view class="bg bg-color {{animation}}"  \n  bindtransitionend="transitionEnd"\n  bindanimationstart="animationStart"\n  bindanimationiteration="animationIteration"\n  bindanimationen = "animationend"\n  ></view>\n</view>\n\n<button bindtap="addAnimation">触发动画</button>\n\n//在wxss文件里新增一个fadeIn的关键帧动画的样式\n@keyframes fadeIn {\n	from {opacity: 0;}\n	to {opacity: 1;}\n}\n	\n.fadeIn {\n	animation: 4s linear 0s infinite alternate fadeIn;\n}\n\n//在js文件里新增点击事件和监听事件的事件处理函数\nPage({\n  data: {\n    animation:""\n  },\n  addAnimation(){\n    this.setData({\n      animation:"fadeIn"\n    })\n  },\n  transitionEnd() {\n    //只能监听transition类的动画\n    console.log(\'渐变已结束\')\n  },\n  animationStart() {\n    //如果动画有delay，该监听函数会在delay之后立即执行\n    console.log(\'动画开始\')\n  },\n  animationIteration(){\n    //animation支持多次执行动画，执行完一次就会触发该函数\n    console.log("动画执行完了一次")\n  },\n  animationend(){\n    console.log("整个动画已结束")\n  }\n})\n'})}),"\n",(0,i.jsxs)(a.p,{children:["在监听动画执行状态的函数里，我们也可以像本节前面介绍的来修改class的属性值，比如动画执行一次就修改一次样式，动画执行完成后样式又可以不同，也可以调用小程序的API如",(0,i.jsx)(a.code,{children:"wx.showToast()"}),"等，让动画展示形式更加丰富。"]}),"\n",(0,i.jsxs)(a.h3,{id:"1052-关键帧动画",children:["10.5.2 关键帧动画",(0,i.jsx)(a.a,{className:"header-anchor","aria-hidden":"true",href:"#1052-关键帧动画",children:"#"})]}),"\n",(0,i.jsxs)(a.p,{children:["关键帧keyframes动画相比于旧的",(0,i.jsx)(a.code,{children:"wx.createAnimation"}),"（建议取代）性能更好，在页面或自定义组件中，当需要进行关键帧动画时，可以使用",(0,i.jsx)(a.code,{children:"this.animate"}),"接口，可以使用",(0,i.jsx)(a.code,{children:"this.clearAnimation"}),"来清除关键帧动画。"]}),"\n",(0,i.jsx)(a.p,{children:"关键帧动画的语法如下，其中selector为类似于wxss/css一样的选择器，keyframes为关键帧信息，duration为动画时长，而callback为动画执行完成之后的回调："}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:"this.animate(selector, keyframes, duration, callback)\n"})}),"\n",(0,i.jsx)(a.p,{children:"在animate页面里面输入以下代码，当我们点击button触发animateImg事件处理函数时就会调用关键帧动画，关键帧动画为一个数组，动画会依次执行输入的关键帧，动画持续5s执行完成之后会执行回调函数："}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:'//在animate.wxml里输入以下代码\n<view id="img001">\n  <image mode="widthFix" src="https://hackwork-1251009918.cos.ap-shanghai.myqcloud.com/handbook/html5/weapp.jpg" ></image>\n</view>\n<button bindtap="animateImg">动画动起来</button>\n\n//在animate.js里面输入button绑定的事件处理函数\nanimateImg(){\n  this.animate(\'#img001\',[\n    { scale: [2, 2], rotate: 90 },\n    { scale: [1, 1], rotate: 0, ease: \'ease-out\' },\n    { scale: [1.5, 1.5], rotate: 45, ease: \'ease-in\'},\n    ],5000,function(){\n      console.log("动画执行完成")\n      wx.showToast({\n        title: "执行成功",\n      })\n    })\n}\n'})}),"\n",(0,i.jsx)(a.p,{children:"keyframes支持translate位移、skew倾斜、scale缩放、rotate旋转、matrix矩阵变换、opacity透明度、位置（top、left、right、bottom等）、背景颜色backgroundColor、offset关键帧的偏移、ease缓动，这些和css的用法是一致的。"}),"\n",(0,i.jsxs)(a.blockquote,{children:["\n",(0,i.jsx)(a.p,{children:"动画的呈现方式很多，并不局限于以上的解决方案，小程序也有lottie、threejs等拓展能力（在技术文档拓展能力标签页可以看到相关的说明）以及使用Canvas也能做动画。lottie可以在移动端、Web端等渲染动画设计软件Adobe After Effects（AE）导出的json文件实现动画效果；而threejs是基于原生webgl封装的3D引擎，在大数据可视化、WebVR、全景图、3D可视化、H5游戏/小游戏方面有广泛的应用，有兴趣的童鞋可以拓展学习。"}),"\n"]})]})}function o(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:a}=Object.assign({},(0,s.ah)(),n.components);return a?(0,i.jsx)(a,{...n,children:(0,i.jsx)(t,{...n})}):t(n)}let r=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%2F66.%E5%8A%A8%E7%94%BB%E4%BA%8B%E4%BB%B6.md"]={toc:[{text:"10.5 动画事件",id:"105-动画事件",depth:2},{text:"10.5.1 CSS动画与事件结合",id:"1051-css动画与事件结合",depth:3},{text:"1、使用事件来修改class属性",id:"1使用事件来修改class属性",depth:4},{text:"2、监听css的animation动画的状态",id:"2监听css的animation动画的状态",depth:4},{text:"10.5.2 关键帧动画",id:"1052-关键帧动画",depth:3}],title:"66.动画事件",headingTitle:"66.动画事件",frontmatter:{}}}}]);