"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["73215"],{339447:function(e,r,s){s.r(r),s.d(r,{default:()=>A});var n=s(552676),d=s(740453);let c=s.p+"static/image/1da9e5ed572a37e9d618c72998074521.61b7b131.webp",a=s.p+"static/image/ccac4d7d07e9f5c573d5314bf9d6e424.774fd917.webp",i=s.p+"static/image/ee79bd6a5041632e53881eb9b8fb111b.78890e20.webp",t=s.p+"static/image/d2c2c0df23b6a137f117a5faa07229fe.171907a1.webp",l=s.p+"static/image/fd21001b1483dce16a72b7069c8b2238.eb2fb932.webp",o=s.p+"static/image/7c0d43e13ffd8db17e72bdef377dd4dd.0de93734.webp",m=s.p+"static/image/4aedaca03f433ee0f0c8ce8e4479c91a.56e6ce49.webp",h=s.p+"static/image/6abf9747c762d41df9b7b35ccf32c69c.927d075f.webp",p=s.p+"static/image/1d3efe426a0febe701e2253d77f9274e.95d3da7a.webp",E=s.p+"static/image/4c69af863a910e97cd8611a0556b6da1.e61dfe23.webp",x=s.p+"static/image/1ad2d6d46e63b03c9c631ec51ae050e3.e3eba4fb.webp",j=s.p+"static/image/e8999861b14d194203c58481a95d05bc.55536a47.webp",N=s.p+"static/image/d79c4798259194dbf5c5f8a531c235ba.33f8e847.webp",u=s.p+"static/image/cd07720f49a8854fca24f54236530947.52856931.webp",O=s.p+"static/image/63a567b33f11b4c669b269784c8baadb.d6173cad.webp",_=s.p+"static/image/2d8f25fcb72ea538cae97857736b45e3.a20ed5e4.webp",T=s.p+"static/image/77522ca9654527af71ac467c10e2775e.92b9ab5e.webp",g=s.p+"static/image/0e6af60386470f179b9f88a987857978.c503f2d3.webp",R=s.p+"static/image/644cc86016e131ce1fbf4c3116063455.b61bff3b.webp",b=s.p+"static/image/a8bb5f853950118e786641a3c289ae05.eacef313.webp",S=s.p+"static/image/04498a19fdc0e84bdce18aa6839de4cd.21f39586.webp",f=s.p+"static/image/a0b264351e304810e33a86d7055506af.9a78e9f6.webp",I=s.p+"static/image/84a66246bfb98948c6cdc345fba4e790.a20a4f85.webp",C=s.p+"static/image/68830adf2ebe2e710fb57c301139685d.9f92e9ff.webp";function M(e){let r=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img",h3:"h3",h2:"h2"},(0,d.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.h1,{id:"50-sql-综合练习",children:["50. SQL 综合练习",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#50-sql-综合练习",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"前面我们把 select、update、insert、delete 的语法、函数、关联查询、子查询都过了一遍，sql 学的就差不多了。"}),"\n",(0,n.jsx)(r.p,{children:"这节我们来实战下，写一些复杂的 sql。"}),"\n",(0,n.jsx)(r.p,{children:"先创建个单独的数据库："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"create database practice\n"})}),"\n",(0,n.jsxs)(r.p,{children:["执行它：\n",(0,n.jsx)("img",{src:C,alt:""})]}),"\n",(0,n.jsx)(r.p,{children:"点击刷新，就可以看到这个 database（也叫 schema）了："}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:I,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"执行 use practice 切换数据库："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"use practice;\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:f,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"然后创建 3 个表："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"-- 创建 customers 表，用于存储客户信息\nCREATE TABLE IF NOT EXISTS `customers` (\n `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '客户ID，自增长',\n `name` varchar(255) NOT NULL COMMENT '客户姓名，非空',\n PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='客户信息表';\n\n-- 创建 orders 表，用于存储订单信息\nCREATE TABLE IF NOT EXISTS `orders` (\n `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '订单ID，自增长',\n `customer_id` int(11) NOT NULL COMMENT '客户ID，非空',\n `order_date` date NOT NULL COMMENT '订单日期，非空',\n `total_amount` decimal(10,2) NOT NULL COMMENT '订单总金额，非空',\n PRIMARY KEY (`id`),\n FOREIGN KEY (`customer_id`) REFERENCES `customers` (`id`) ON DELETE CASCADE ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='订单信息表';\n\n-- 创建 order_items 表，用于存储订单商品信息\nCREATE TABLE IF NOT EXISTS `order_items` (\n `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '商品ID，自增长',\n `order_id` int(11) NOT NULL COMMENT '订单ID，非空',\n `product_name` varchar(255) NOT NULL COMMENT '商品名称，非空',\n `quantity` int(11) NOT NULL COMMENT '商品数量，非空',\n `price` decimal(10,2) NOT NULL COMMENT '商品单价，非空',\n PRIMARY KEY (`id`),\n FOREIGN KEY (`order_id`) REFERENCES `orders` (`id`) ON DELETE CASCADE ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='订单商品信息表';\n"})}),"\n",(0,n.jsx)(r.p,{children:"分别是顾客、订单、订单项。"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:S,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"一个顾客有多个订单，一个订单有多个订单项，通过外键存储这种关联关系。"}),"\n",(0,n.jsx)(r.p,{children:"级联方式为 CASCADE。"}),"\n",(0,n.jsx)(r.p,{children:"上面还涉及到注释的语法，sql 里的注释用 -- 开头："}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:b,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"执行建表 sql:"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:R,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"点击刷新，就可以看到这三个表了："}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:g,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"然后插入一些数据："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"-- 向 customers 表插入数据\nINSERT INTO `customers` (`name`) \n    VALUES \n        ('张丽娜'),('李明'),('王磊'),('赵静'),('钱伟'),\n        ('孙芳'),('周涛'),('吴洋'),('郑红'),('刘华'),\n        ('陈明'),('杨丽'),('王磊'),('张伟'),('李娜'),\n        ('刘洋'),('陈静'),('杨阳'),('王丽'),('张强');\n\n-- 向 orders 表插入数据\nINSERT INTO `orders` (`customer_id`, `order_date`, `total_amount`)\n    VALUES\n        (1, '2022-01-01',100.00),(1, '2022-01-02',200.00),\n        (2, '2022-01-03',300.00),(2, '2022-01-04',400.00),\n        (3, '2022-01-05',500.00),(3, '2022-01-06',600.00),\n        (4, '2022-01-07',700.00),(4, '2022-01-08',800.00),\n        (5, '2022-01-09',900.00),(5, '2022-01-10',1000.00);\n\n-- 向 order_items 表插入数据\nINSERT INTO `order_items` (`order_id`, `product_name`, `quantity`, `price`)\n    VALUES\n        (1, '耐克篮球鞋',1,100.00),\n        (1, '阿迪达斯跑步鞋',2,50.00),\n        (2, '匡威帆布鞋',3,100.00),\n        (2, '万斯板鞋',4,50.00),\n        (3, '新百伦运动鞋',5,100.00),\n        (3, '彪马休闲鞋',6,50.00),\n        (4, '锐步经典鞋',7,100.00),\n        (5, '亚瑟士运动鞋',10,50.00),\n        (5, '帆布鞋',1,100.00),\n        (1, '苹果手写笔',2,50.00),\n        (2, '电脑包',3,100.00),\n        (3, '苹果手机',4,50.00),\n        (4, '苹果耳机',5,100.00),\n        (5, '苹果平板',7,100.00);\n"})}),"\n",(0,n.jsx)(r.p,{children:"执行这些 sql："}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:T,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"然后查询下看看："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"select * from customers\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:_,alt:""})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"select * from orders\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:O,alt:""})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"select * from order_items\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:u,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"顾客、订单、订单项三个表都成功插入了数据。"}),"\n",(0,n.jsx)(r.p,{children:"然后我们来实现下这些需求："}),"\n",(0,n.jsxs)(r.h3,{id:"需求-1-查询每个客户的订单总金额",children:["需求 1: 查询每个客户的订单总金额",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#需求-1-查询每个客户的订单总金额",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"客户的订单存在订单表里，可能有多个，这里需要 JOIN ON 关联两个表，然后用 GROUP BY 根据客户 id 分组，再通过 SUM 函数计算价格总和。"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT customers.name, SUM(orders.total_amount) AS total_amount \n    FROM customers\n    INNER JOIN orders ON customers.id = orders.customer_id \n    GROUP BY customers.id;\n"})}),"\n",(0,n.jsx)(r.p,{children:"这里的 INNER JOIN ON 也可以简化为 JOIN ON。"}),"\n",(0,n.jsx)(r.p,{children:"执行查询："}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:N,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"成功查出了每个客户的订单总金额。"}),"\n",(0,n.jsx)(r.p,{children:"我们还可以再加上排序："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT customers.name, SUM(orders.total_amount) AS total_amount \n    FROM customers\n    INNER JOIN orders ON customers.id = orders.customer_id \n    GROUP BY customers.id\n    ORDER BY total_amount DESC;\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:j,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"如果想取前 3 的，可以用 LIMIT："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT customers.name, SUM(orders.total_amount) AS total_amount \n    FROM customers\n    JOIN orders ON customers.id = orders.customer_id\n    GROUP BY customers.id\n    ORDER BY total_amount DESC \n    LIMIT 0,3;\n"})}),"\n",(0,n.jsx)(r.p,{children:"从第 0 个开始取 3 个："}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:x,alt:""})}),"\n",(0,n.jsxs)(r.h3,{id:"需求-2-查询每个客户的订单总金额并计算其占比",children:["需求 2: 查询每个客户的订单总金额，并计算其占比",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#需求-2-查询每个客户的订单总金额并计算其占比",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"每个客户的总金额的需求上面实现了，这里需要算占比，就需要通过一个子查询来计算全部订单的总金额，然后相除："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT customers.name, SUM(orders.total_amount) AS total_amount, \n	SUM(orders.total_amount) / (SELECT SUM(total_amount) FROM orders) AS percentage \n    FROM customers\n    INNER JOIN orders ON customers.id = orders.customer_id\n    GROUP BY customers.id;\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:E,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"当然，这里每次都算一遍总金额性能不好，可以先算出总金额，然后把数值传入。"}),"\n",(0,n.jsx)(r.p,{children:"这里只是练习子查询。"}),"\n",(0,n.jsxs)(r.h3,{id:"需求-3查询每个客户的订单总金额并列出每个订单的商品清单",children:["需求 3：查询每个客户的订单总金额，并列出每个订单的商品清单",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#需求-3查询每个客户的订单总金额并列出每个订单的商品清单",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"这里在总金额的基础上，多了订单项的查询，需要多关联一个表："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT customers.name, orders.order_date, orders.total_amount, \n	order_items.product_name, order_items.quantity, order_items.price\n    FROM customers\n    JOIN orders ON customers.id = orders.customer_id\n    JOIN order_items ON orders.id = order_items.order_id\n    ORDER BY customers.name, orders.order_date;\n"})}),"\n",(0,n.jsx)(r.p,{children:"内连接关联 3 个表，按照名字和下单日期排序。"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:p,alt:""})}),"\n",(0,n.jsxs)(r.h3,{id:"需求-4查询每个客户的订单总金额并列出每个订单的商品清单同时只显示客户名字姓张的客户的记录",children:["需求 4：查询每个客户的订单总金额，并列出每个订单的商品清单，同时只显示客户名字姓“张”的客户的记录：",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#需求-4查询每个客户的订单总金额并列出每个订单的商品清单同时只显示客户名字姓张的客户的记录",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"总金额和商品清单的需求前面实现了，这里只需要加一个 WHERE 来过滤客户名就行："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT customers.name, orders.order_date, orders.total_amount, \n	order_items.product_name, order_items.quantity, order_items.price\n    FROM customers\n    INNER JOIN orders ON customers.id = orders.customer_id\n    INNER JOIN order_items ON orders.id = order_items.order_id\n    WHERE customers.name LIKE '张%'\n    ORDER BY customers.name, orders.order_date;\n"})}),"\n",(0,n.jsx)(r.p,{children:"执行下："}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:h,alt:""})}),"\n",(0,n.jsxs)(r.h3,{id:"需求-5查询每个客户的订单总金额并列出每个订单的商品清单同时只显示订单日期在2022年1月1日到2022年1月3日之间的记录",children:["需求 5:查询每个客户的订单总金额，并列出每个订单的商品清单，同时只显示订单日期在2022年1月1日到2022年1月3日之间的记录",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#需求-5查询每个客户的订单总金额并列出每个订单的商品清单同时只显示订单日期在2022年1月1日到2022年1月3日之间的记录",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"这里比上面的需求只是多了日期的过滤，范围是一个区间，用 BETWEEN AND："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT customers.name, orders.order_date,\n	orders.total_amount, order_items.product_name,\n    order_items.quantity, order_items.price\n    FROM customers\n    INNER JOIN orders ON customers.id = orders.customer_id\n    INNER JOIN order_items ON orders.id = order_items.order_id\n    WHERE orders.order_date BETWEEN '2022-01-01' AND '2022-01-03'\n    ORDER BY customers.name, orders.order_date;\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:m,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"因为这里的 order_date 是 date 类型，所以指定范围也只是用 2022-01-01 这种格式的。如果是 datetime，那就要用 2022-01-01 10:10:00 这种格式了。"}),"\n",(0,n.jsxs)(r.h3,{id:"需求-6查询每个客户的订单总金额并计算商品数量只包含商品名称包含鞋的商品商品名用-连接显示前-3-条记录",children:["需求 6：查询每个客户的订单总金额，并计算商品数量，只包含商品名称包含“鞋”的商品，商品名用-连接，显示前 3 条记录：",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#需求-6查询每个客户的订单总金额并计算商品数量只包含商品名称包含鞋的商品商品名用-连接显示前-3-条记录",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"查询订单总金额和商品数量都需要用 group by 根据 customer.id 分组，过滤出只包含鞋的商品。"}),"\n",(0,n.jsx)(r.p,{children:"把分组的多条商品名连接起来需要用 GROUP_CONCAT 函数。"}),"\n",(0,n.jsx)(r.p,{children:"然后 LIMIT 3"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT \n        c.name AS customer_name,\n        SUM(o.total_amount) AS total_amount,\n        COUNT(oi.id) AS total_quantity,\n        GROUP_CONCAT(oi.product_name SEPARATOR '-') AS product_names\n    FROM customers c\n    JOIN orders o ON c.id = o.customer_id\n    JOIN order_items oi ON o.id = oi.order_id\n    WHERE oi.product_name LIKE '%鞋%'\n    GROUP BY c.name\n    ORDER BY total_amount DESC\n    LIMIT 3;\n\n"})}),"\n",(0,n.jsx)(r.p,{children:"GROUP_CONCAT 函数是用于 group by 分组后，把多个值连接成一个字符串的。"}),"\n",(0,n.jsx)(r.p,{children:"LIMIT 3 就相当于 LIMIT 0,3 也就是从 0 开始 3 条记录："}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:o,alt:""})}),"\n",(0,n.jsxs)(r.h2,{id:"需求-7-查询存在订单的客户",children:["需求 7: 查询存在订单的客户",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#需求-7-查询存在订单的客户",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"这里使用子查询 + EXISTS 来实现："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT * FROM customers c\n    WHERE EXISTS (\n            SELECT 1 FROM orders o WHERE o.customer_id = c.id\n    );\n"})}),"\n",(0,n.jsx)(r.p,{children:"如果从 orders 表中查出了当前 customer 的订单记录，EXISTS 就成立。"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:l,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"当然，你也可以用 NO EXISTS 来查询没有下单过的客户："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT * FROM customers c\n    WHERE NOT EXISTS (\n            SELECT 1 FROM orders o WHERE o.customer_id = c.id\n    );\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:t,alt:""})}),"\n",(0,n.jsxs)(r.h2,{id:"需求-8-将王磊的订单总金额打九折",children:["需求 8: 将王磊的订单总金额打九折",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#需求-8-将王磊的订单总金额打九折",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"现在王磊的订单总金额是这些："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"SELECT * FROM orders \n JOIN customers ON orders.customer_id = customers.id\n WHERE customers.name = '王磊';\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:i,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"更新它们为 90%："}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-sql",children:"UPDATE orders o SET o.total_amount = o.total_amount * 0.9\n    WHERE o.customer_id IN (\n        SELECT id FROM customers WHERE name = '王磊'\n    );\n"})}),"\n",(0,n.jsx)(r.p,{children:"这里订单不止一条，所以用 IN 来指定一个集合。"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:a,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"再查询下："}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)("img",{src:c,alt:""})}),"\n",(0,n.jsx)(r.p,{children:"确实减少了。"}),"\n",(0,n.jsxs)(r.h2,{id:"总结",children:["总结",(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,n.jsx)(r.p,{children:"这节我们创建了一个新的 database 并且新增了 customers、orders、order_items 表来练习 sql。"}),"\n",(0,n.jsx)(r.p,{children:"customers 和 orders、orders 和 order_items 都是一对多的关系。"}),"\n",(0,n.jsx)(r.p,{children:"我们练习了 JOIN ON、WHERE、ORDER BY、GROUP BY、LIMIT 等语法，也练习了 SUM、COUNT、GROUP_CONCAT 等函数。"}),"\n",(0,n.jsx)(r.p,{children:"还有子查询和 EXISTS。"}),"\n",(0,n.jsx)(r.p,{children:"sql 常用的语法也就这些，把这些掌握了就能完成各种需求了。"})]})}function L(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,d.ah)(),e.components);return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(M,{...e})}):M(e)}let A=L;L.__RSPRESS_PAGE_META={},L.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F50.%20SQL%20%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.md"]={toc:[{text:"需求 1: 查询每个客户的订单总金额",id:"需求-1-查询每个客户的订单总金额",depth:3},{text:"需求 2: 查询每个客户的订单总金额，并计算其占比",id:"需求-2-查询每个客户的订单总金额并计算其占比",depth:3},{text:"需求 3：查询每个客户的订单总金额，并列出每个订单的商品清单",id:"需求-3查询每个客户的订单总金额并列出每个订单的商品清单",depth:3},{text:"需求 4：查询每个客户的订单总金额，并列出每个订单的商品清单，同时只显示客户名字姓“张”的客户的记录：",id:"需求-4查询每个客户的订单总金额并列出每个订单的商品清单同时只显示客户名字姓张的客户的记录",depth:3},{text:"需求 5:查询每个客户的订单总金额，并列出每个订单的商品清单，同时只显示订单日期在2022年1月1日到2022年1月3日之间的记录",id:"需求-5查询每个客户的订单总金额并列出每个订单的商品清单同时只显示订单日期在2022年1月1日到2022年1月3日之间的记录",depth:3},{text:"需求 6：查询每个客户的订单总金额，并计算商品数量，只包含商品名称包含“鞋”的商品，商品名用-连接，显示前 3 条记录：",id:"需求-6查询每个客户的订单总金额并计算商品数量只包含商品名称包含鞋的商品商品名用-连接显示前-3-条记录",depth:3},{text:"需求 7: 查询存在订单的客户",id:"需求-7-查询存在订单的客户",depth:2},{text:"需求 8: 将王磊的订单总金额打九折",id:"需求-8-将王磊的订单总金额打九折",depth:2},{text:"总结",id:"总结",depth:2}],title:"50. SQL 综合练习",headingTitle:"50. SQL 综合练习",frontmatter:{}}}}]);