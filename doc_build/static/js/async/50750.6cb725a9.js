"use strict";(self.webpackChunkjue_jin_book_press=self.webpackChunkjue_jin_book_press||[]).push([["50750"],{259224:function(e,n,i){e.exports=i.p+"static/image/1c4432e493510015671d9dd66a42ef22.67abd8f2.webp"},347381:function(e,n,i){e.exports=i.p+"static/image/371b09ce855ba04b14a16033d40dfa94.bc3f0e6f.webp"},85501:function(e,n,i){e.exports=i.p+"static/image/4b143993ac96e145609a40947b486a46.9f0c6020.webp"},83593:function(e,n,i){e.exports=i.p+"static/image/93d50e72c644d9e05a0ad0d27225db13.29e3e8e6.webp"},922616:function(e,n,i){e.exports=i.p+"static/image/95543df5a66f6a4feddc8937c3d79fa0.29ef9a7f.webp"},490815:function(e,n,i){e.exports=i.p+"static/image/96806cc6bd2f15e8743deb2bbdb1037b.076d2aa9.webp"},535503:function(e,n,i){e.exports=i.p+"static/image/b60a3847f4c1d9e146e8f810efc25cda.3d56423c.webp"},357271:function(e,n,i){e.exports=i.p+"static/image/f05543e56001f78e6ec4b0514885d1f7.d811fa43.gif"},813847:function(e,n,i){e.exports=i.p+"static/image/f2e5cf83bd9c4eac05a521fdeb9c7227.771b2959.webp"},127442:function(e,n,i){i.r(n),i.d(n,{default:()=>U});var s=i(552676),c=i(740453);let r=i.p+"static/image/692de343dadb6dd28d3164747c777977.7ffea0f6.webp",a=i.p+"static/image/992f0d693a6d2d3863fc86e793cf7e16.b145cc8a.webp",t=i.p+"static/image/4babe80eca4390cb428419b75a09ed66.ce7b8cd3.gif",d=i.p+"static/image/3ead2365808c9bf48ea0882bdca8f6d1.4196b5b0.webp",l=i.p+"static/image/43387845e091ed1c0ee7563dfdb2a8bf.e2e5867a.webp",o=i.p+"static/image/58204b02da2c13ba995bd63c277f7ca2.c3152fc7.webp",p=i.p+"static/image/5b6039e39ebcb39766e34f16d88607cc.db809013.gif",h=i.p+"static/image/338daf668a08b0239074ea7c36608b63.1675e27e.gif",x=i.p+"static/image/758447409e3a4677161fe528eff3f3a7.e80e65fd.gif",j=i.p+"static/image/fe735b40616cf35f5d9ddd09a61115a4.eeba8e55.webp",m=i.p+"static/image/023b4df38f39565903ef4863058d3dfc.8bf86cea.webp";var f=i(535503);let g=i.p+"static/image/dd3982676392fdf4d9cfd26a5c725878.0572d052.webp",u=i.p+"static/image/90ab3fbb0a878b67f68dfe03c6f3a50c.225d8cec.webp";var b=i(85501),S=i(922616),N=i(490815),v=i(347381);let I=i.p+"static/image/ff4cacd249e9368f4183fab84496b73f.626aa4a8.webp",P=i.p+"static/image/7bc0573ba282485abd334976ddf0e8dd.b0dacbcc.webp",w=i.p+"static/image/5604e96c5254c41e69583d86715ce42e.01e8fff9.webp",O=i.p+"static/image/b006a99a354b0918a7bf3cf40e93b0e1.d94ba97f.webp",E=i.p+"static/image/a86d39147308cd87bf491ff736eb0c75.d24126e2.webp",k=i.p+"static/image/02bdd4bca5fcae18ba0911ff46293e2b.0ee28602.webp";var _=i(813847),C=i(83593),y=i(259224),A=i(357271);function M(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",pre:"pre",code:"code",h2:"h2"},(0,c.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"184-聊天室头像上传",children:["184. 聊天室：头像上传",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#184-聊天室头像上传",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"上节实现了用户信息的更改，但是是直接修改的文件路径："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:A,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这节我们来实现下头像上传。"}),"\n",(0,s.jsx)(n.p,{children:"我们用 minio 来搭 OSS 服务。"}),"\n",(0,s.jsx)(n.p,{children:"把 minio 的 docker 镜像跑起来："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:y,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"指定本地的某个目录，映射到容器里的 /bitnami/minio/data 目录。"}),"\n",(0,s.jsx)(n.p,{children:"指定端口 9000 和 9001 的映射。(9000 是文件访问的端口，9001 是管理页面的端口)"}),"\n",(0,s.jsx)(n.p,{children:"然后指定登录的用户名、密码 MINIO_ROOT_USER、MINIO_ROOT_PASSWORD"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:C,alt:""})}),"\n",(0,s.jsxs)(n.p,{children:["跑起来之后，访问下 ",(0,s.jsx)(n.a,{href:"http://localhost:9001",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:9001"})]}),"\n",(0,s.jsx)(n.p,{children:"输入用户名密码后点击登录："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:_,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"创建个 bucket："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:k,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"设置下可以公开访问："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:E,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:O,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后上传个文件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:w,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:P,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"浏览器访问下这个路径："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"http://localhost:9000/chat-room/dong.png",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:9000/chat-room/dong.png"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:I,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样，文件就上传到了 OSS 里的 bucket，并且能够访问了。"}),"\n",(0,s.jsx)(n.p,{children:"然后我们直接前端直传 minio 就好了："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:v,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"上传完之后把 url 给服务端保存到数据库就行。"}),"\n",(0,s.jsx)(n.p,{children:"但是这个 accessKey 也不能暴露到前端代码里，需要在服务端做预签名。"}),"\n",(0,s.jsxs)(n.p,{children:["这个在",(0,s.jsx)(n.a,{href:"https://juejin.cn/book/7226988578700525605/section/7364018227191496704",target:"_blank",rel:"noopener noreferrer",children:"前端直传文件到 minio"}),"那节讲过。"]}),"\n",(0,s.jsx)(n.p,{children:"我们进入 backend 的项目，安装 minio 的包："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save minio\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后创建个 minio 模块："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g module minio\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:N,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Global, Module } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Global()\n@Module({\n    providers: [\n        {\n            provide: 'MINIO_CLIENT',\n            async useFactory() {\n                const client = new Minio.Client({\n                        endPoint: 'localhost',\n                        port: 9000,\n                        useSSL: false,\n                        accessKey: '',\n                        secretKey: ''\n                    })\n                return client;\n            }\n          }\n    ],\n    exports: ['MINIO_CLIENT']\n})\nexport class MinioModule {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"把 minio client 封装成 provider，放到 exports 里，并设置模块为 @Global。"}),"\n",(0,s.jsx)(n.p,{children:"用到 accessKey 和 secretKey 在这里创建："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:S,alt:""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:b,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"然后创建 MinioController"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nest g controller minio --no-spec\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:u,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"注入 Minio Client："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Controller, Get, Inject, Query } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Controller('minio')\nexport class MinioController {\n\n    @Inject('MINIO_CLIENT')\n    private minioClient: Minio.Client;\n\n    @Get('presignedUrl') \n    presignedPutObject(@Query('name') name: string) {\n        return this.minioClient.presignedPutObject('chat-room', name, 3600);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"presignedPutObject 第一个参数是 buckectName，第二个参数是 objectName，第三个参数是 expires。"}),"\n",(0,s.jsx)(n.p,{children:"bucketName 就是 chat-rom"}),"\n",(0,s.jsx)(n.p,{children:"objectName 需要上传文件的时候拿到 file.name 作为参数传入。"}),"\n",(0,s.jsx)(n.p,{children:"expires 是生成的临时签名的过期时间，我们指定 3600 秒，也就是一小时。"}),"\n",(0,s.jsx)(n.p,{children:"调用下这个接口试试："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:g,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，返回了 xxx.png 的预签名的 url，这样前端不需要 accessKey 也可以用这个 url 来上传文件到 minio 了。"}),"\n",(0,s.jsx)(n.p,{children:"我们在 frontend 项目里用一下："}),"\n",(0,s.jsx)(n.p,{children:"在 src/pages/UpdateInfo 下增加一个 HeadPicUpload.tsx"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { InboxOutlined } from "@ant-design/icons";\nimport { message } from "antd";\nimport Dragger, { DraggerProps } from "antd/es/upload/Dragger";\nimport axios from "axios";\n\ninterface HeadPicUploadProps {\n    value?: string;\n    onChange?: Function\n}\n\nlet onChange: Function;\n\nconst props: DraggerProps = {\n    name: \'file\',\n    action: \'http://localhost:3005/xxxx\',\n    onChange(info) {\n        const { status } = info.file;\n        if (status === \'done\') {\n            onChange(\'http://localhost:9000/chat-room/\' + info.file.name);\n            message.success(`${info.file.name} 文件上传成功`);\n        } else if (status === \'error\') {\n            message.error(`${info.file.name} 文件上传失败`);\n        }\n    }\n};\n\nconst dragger = <Dragger {...props}>\n    <p className="ant-upload-drag-icon">\n        <InboxOutlined />\n    </p>\n    <p className="ant-upload-text">点击或拖拽文件到这个区域来上传</p>\n</Dragger>\n\nexport function HeadPicUpload(props: HeadPicUploadProps) {\n\n    onChange = props.onChange!\n\n    return props?.value ? <div>\n        <img src={props.value} alt="头像" width="100" height="100"/>\n        {dragger}\n    </div>: <div>\n        {dragger}\n    </div>\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"用 antd 的 Dragger 组件实现拖拽上传，如果有值的话，就展示之前的头像。"}),"\n",(0,s.jsx)(n.p,{children:"在上传头像的地方引入下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:f,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"为什么是 value 和 onChange 两个参数呢？"}),"\n",(0,s.jsx)(n.p,{children:"因为 antd 的 Form.Item 在渲染时会给子组件传这两个参数。"}),"\n",(0,s.jsx)(n.p,{children:"渲染出来是这样的："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:m,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"不过现在 action 的路径不对，我们改一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:j,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"action: async (file) => {\n    const res = await presignedUrl(file.name);\n    return res.data;\n},\nasync customRequest(options) {\n    const { onSuccess, file, action } = options;\n\n    const res = await axios.put(action, file);\n\n    onSuccess!(res.data);\n},\n"})}),"\n",(0,s.jsx)(n.p,{children:"customRequest 就是自定义请求怎么发。"}),"\n",(0,s.jsx)(n.p,{children:"为什么要 customRequest 呢？"}),"\n",(0,s.jsx)(n.p,{children:"因为默认 Dragger 是用 FormData 的格式上传的，也就是 key value 的格式。"}),"\n",(0,s.jsx)(n.p,{children:"我们指定的 name 就是 key。"}),"\n",(0,s.jsx)(n.p,{children:"但是 minio 要求直接把文件放到 body 里。"}),"\n",(0,s.jsx)(n.p,{children:"所以我们要用 customRequest 自定义请求方式。"}),"\n",(0,s.jsx)(n.p,{children:"在 interfaces 创建这个 presignedUrl 方法："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export async function presignedUrl(fileName: string) {\n\n    return axiosInstance.get(`/minio/presignedUrl?name=${ fileName}`);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"试一下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:x,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"提示上传成功。"}),"\n",(0,s.jsx)(n.p,{children:"在 minio 管理界面也可以看到这个文件："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:h,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"输入验证码，点击修改，会提示更新成功："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:p,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"去数据库里看下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:o,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"确实改过来了。"}),"\n",(0,s.jsx)(n.p,{children:"这样，基于 minio 搭的 OSS 服务的图片上传功能就完成了。"}),"\n",(0,s.jsx)(n.p,{children:"然后我们改下右上角按钮，改成显示用户头像："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:l,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"首先，用户信息更新完后，同步修改下 localStorage 里的 userInfo"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:d,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const userInfo = localStorage.getItem('userInfo');\nif(userInfo) {\n    const info = JSON.parse(userInfo);\n    info.headPic = values.headPic;\n    info.nickName = values.nickName;\n\n    localStorage.setItem('userInfo', JSON.stringify(info));\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"测试下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:t,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"可以看到，点击修改后，localStorage 里的数据也同步更新了。"}),"\n",(0,s.jsx)(n.p,{children:"然后右上角的按钮也可以从 localStorage 里取最新的 headPic："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:a,alt:""})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { UserOutlined } from "@ant-design/icons";\nimport { Link, Outlet } from "react-router-dom";\nimport \'./index.css\';\nimport { useEffect, useState } from "react";\n\nexport function Index() {\n\n    const [headPic, setHeadPic] = useState();\n\n    useEffect(() => {\n        const userInfo = localStorage.getItem(\'userInfo\');\n        if(userInfo) {\n            const info = JSON.parse(userInfo);\n            setHeadPic(info.headPic);\n        }\n    }, []);\n\n    return <div id="index-container">\n        <div className="header">\n            <h1>聊天室</h1>\n            <Link to={\'/update_info\'} >\n                {\n                    headPic \n                        ? <img src={headPic} width={40} height={40} className="icon"/> \n                        : <UserOutlined className="icon"/>\n                }                \n            </Link>\n        </div>\n        <div className="body">\n            <Outlet></Outlet>\n        </div>\n    </div>\n}\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"useState 创建一个状态来保存 headPic。"}),"\n",(0,s.jsx)(n.p,{children:"在 useEffect 里读取 localStrage 里的值，调用 setHeadPic。"}),"\n",(0,s.jsx)(n.p,{children:"渲染的时候如果 headPic 有值就渲染 img，否则渲染默认的 icon。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)("img",{src:r,alt:""})}),"\n",(0,s.jsx)(n.p,{children:"这样，头像就正确显示了。"}),"\n",(0,s.jsx)(n.p,{children:"案例代码在小册仓库："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-frontend",target:"_blank",rel:"noopener noreferrer",children:"前端代码"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/chat-room-backend",target:"_blank",rel:"noopener noreferrer",children:"后端代码"})}),"\n",(0,s.jsxs)(n.h2,{id:"总结",children:["总结",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们用 minio 实现了 OSS 服务。"}),"\n",(0,s.jsx)(n.p,{children:"用前端直传 OSS，然后把文件 url 发给应用服务器的方式。"}),"\n",(0,s.jsx)(n.p,{children:"不想在前端代码暴露 accessKey，所以是用的预签名的方式，服务端用 presignedPutObject 返回一个预签名 url 给前端。前端用这个 url 来发送 put 请求，来把文件直传 minio。"}),"\n",(0,s.jsx)(n.p,{children:"antd 的 Dragger 组件默认用 form data 来发送请求，我们通过 customRequest 来重写了上传逻辑。"}),"\n",(0,s.jsx)(n.p,{children:"这样，文件就都保存在了 minio 服务里，可以更方便的管理。"})]})}function R(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(M,{...e})}):M(e)}let U=R;R.__RSPRESS_PAGE_META={},R.__RSPRESS_PAGE_META["Nest%20%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D%20%20%E6%9C%80%E6%96%B0200%E7%AB%A0%2F184.%20%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%9A%E5%A4%B4%E5%83%8F%E4%B8%8A%E4%BC%A0.md"]={toc:[{text:"总结",id:"总结",depth:2}],title:"184. 聊天室：头像上传",headingTitle:"184. 聊天室：头像上传",frontmatter:{}}}}]);